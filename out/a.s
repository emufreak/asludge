
out/a.elf:     file format elf32-m68k


Disassembly of section .text:

00000000 <_start>:
extern void (*__init_array_start[])() __attribute__((weak));
extern void (*__init_array_end[])() __attribute__((weak));
extern void (*__fini_array_start[])() __attribute__((weak));
extern void (*__fini_array_end[])() __attribute__((weak));

__attribute__((used)) __attribute__((section(".text.unlikely"))) void _start() {
       0:	       subq.l #8,sp
	// initialize globals, ctors etc.
	unsigned long count;
	unsigned long i;

	count = __preinit_array_end - __preinit_array_start;
       2:	       move.l #115237,d0
       8:	       subi.l #115237,d0
       e:	       asr.l #2,d0
      10:	       move.l d0,(sp)
	for (i = 0; i < count; i++)
      12:	       clr.l 4(sp)
      16:	   /-- bra.s 32 <_start+0x32>
		__preinit_array_start[i]();
      18:	/--|-> move.l 4(sp),d0
      1c:	|  |   add.l d0,d0
      1e:	|  |   movea.l d0,a1
      20:	|  |   adda.l d0,a1
      22:	|  |   lea 1c225 <__fini_array_end>,a0
      28:	|  |   movea.l (0,a1,a0.l),a0
      2c:	|  |   jsr (a0)
	for (i = 0; i < count; i++)
      2e:	|  |   addq.l #1,4(sp)
      32:	|  \-> move.l 4(sp),d0
      36:	|      cmp.l (sp),d0
      38:	\----- bcs.s 18 <_start+0x18>

	count = __init_array_end - __init_array_start;
      3a:	       move.l #115237,d0
      40:	       subi.l #115237,d0
      46:	       asr.l #2,d0
      48:	       move.l d0,(sp)
	for (i = 0; i < count; i++)
      4a:	       clr.l 4(sp)
      4e:	   /-- bra.s 6a <_start+0x6a>
		__init_array_start[i]();
      50:	/--|-> move.l 4(sp),d0
      54:	|  |   add.l d0,d0
      56:	|  |   movea.l d0,a1
      58:	|  |   adda.l d0,a1
      5a:	|  |   lea 1c225 <__fini_array_end>,a0
      60:	|  |   movea.l (0,a1,a0.l),a0
      64:	|  |   jsr (a0)
	for (i = 0; i < count; i++)
      66:	|  |   addq.l #1,4(sp)
      6a:	|  \-> move.l 4(sp),d0
      6e:	|      cmp.l (sp),d0
      70:	\----- bcs.s 50 <_start+0x50>

	main();
      72:	       jsr 75d0 <main>

	// call dtors
	count = __fini_array_end - __fini_array_start;
      78:	       move.l #115237,d0
      7e:	       subi.l #115237,d0
      84:	       asr.l #2,d0
      86:	       move.l d0,(sp)
	for (i = count; i > 0; i--)
      88:	       move.l (sp),4(sp)
      8c:	   /-- bra.s aa <_start+0xaa>
		__fini_array_start[i - 1]();
      8e:	/--|-> move.l 4(sp),d0
      92:	|  |   subq.l #1,d0
      94:	|  |   add.l d0,d0
      96:	|  |   movea.l d0,a1
      98:	|  |   adda.l d0,a1
      9a:	|  |   lea 1c225 <__fini_array_end>,a0
      a0:	|  |   movea.l (0,a1,a0.l),a0
      a4:	|  |   jsr (a0)
	for (i = count; i > 0; i--)
      a6:	|  |   subq.l #1,4(sp)
      aa:	|  \-> tst.l 4(sp)
      ae:	\----- bne.s 8e <_start+0x8e>
}
      b0:	       nop
      b2:	       nop
      b4:	       addq.l #8,sp
      b6:	       rts

000000b8 <copyString>:
#include "support/gcc8_c_support.h"
#include "moreio.h"

BOOL allowAnyFilename = TRUE;

char * copyString(const char * c) {
      b8:	       lea -16(sp),sp
      bc:	       move.l a6,-(sp)
    char * r = (char *)AllocVec(strlen(c) + 1, MEMF_ANY);
      be:	       move.l 24(sp),-(sp)
      c2:	       jsr 13ce0 <strlen>
      c8:	       addq.l #4,sp
      ca:	       move.l d0,d1
      cc:	       addq.l #1,d1
      ce:	       move.l d1,16(sp)
      d2:	       clr.l 12(sp)
      d6:	       move.l 1c9ca <SysBase>,d0
      dc:	       movea.l d0,a6
      de:	       move.l 16(sp),d0
      e2:	       move.l 12(sp),d1
      e6:	       jsr -684(a6)
      ea:	       move.l d0,8(sp)
      ee:	       move.l 8(sp),d0
      f2:	       move.l d0,4(sp)
    if (!r) return NULL;
      f6:	   /-- bne.s fc <copyString+0x44>
      f8:	   |   moveq #0,d0
      fa:	/--|-- bra.s 110 <copyString+0x58>
    strcpy(r, c);
      fc:	|  \-> move.l 24(sp),-(sp)
     100:	|      move.l 8(sp),-(sp)
     104:	|      jsr 13cf8 <strcpy>
     10a:	|      addq.l #8,sp
    return r;
     10c:	|      move.l 4(sp),d0
}
     110:	\----> movea.l (sp)+,a6
     112:	       lea 16(sp),sp
     116:	       rts

00000118 <decodeFilename>:

char * decodeFilename(char * nameIn) {
     118:	                      lea -20(sp),sp
     11c:	                      move.l a6,-(sp)
	if (allowAnyFilename) {
     11e:	                      move.w 1c226 <allowAnyFilename>,d0
     124:	/-------------------- beq.w 2ea <decodeFilename+0x1d2>
		char * newName = (char *)AllocVec(strlen(nameIn) + 1, MEMF_ANY);
     128:	|                     move.l 28(sp),-(sp)
     12c:	|                     jsr 13ce0 <strlen>
     132:	|                     addq.l #4,sp
     134:	|                     move.l d0,d1
     136:	|                     addq.l #1,d1
     138:	|                     move.l d1,16(sp)
     13c:	|                     clr.l 12(sp)
     140:	|                     move.l 1c9ca <SysBase>,d0
     146:	|                     movea.l d0,a6
     148:	|                     move.l 16(sp),d0
     14c:	|                     move.l 12(sp),d1
     150:	|                     jsr -684(a6)
     154:	|                     move.l d0,8(sp)
     158:	|                     move.l 8(sp),d0
     15c:	|                     move.l d0,4(sp)
		if (!newName) return NULL;
     160:	|                 /-- bne.s 168 <decodeFilename+0x50>
     162:	|                 |   moveq #0,d0
     164:	|  /--------------|-- bra.w 2f6 <decodeFilename+0x1de>

		int i = 0;
     168:	|  |              \-> clr.l 20(sp)
		while (*nameIn) {
     16c:	|  |     /----------- bra.w 2ce <decodeFilename+0x1b6>
			if (*nameIn == '_') {
     170:	|  |  /--|----------> movea.l 28(sp),a0
     174:	|  |  |  |            move.b (a0),d0
     176:	|  |  |  |            cmpi.b #95,d0
     17a:	|  |  |  |  /-------- bne.w 2b4 <decodeFilename+0x19c>
				nameIn++;
     17e:	|  |  |  |  |         addq.l #1,28(sp)
				switch (*nameIn) {
     182:	|  |  |  |  |         movea.l 28(sp),a0
     186:	|  |  |  |  |         move.b (a0),d0
     188:	|  |  |  |  |         ext.w d0
     18a:	|  |  |  |  |         movea.w d0,a0
     18c:	|  |  |  |  |         moveq #-65,d0
     18e:	|  |  |  |  |         add.l a0,d0
     190:	|  |  |  |  |         moveq #20,d1
     192:	|  |  |  |  |         cmp.l d0,d1
     194:	|  |  |  |  |  /----- bcs.w 2a4 <decodeFilename+0x18c>
     198:	|  |  |  |  |  |      add.l d0,d0
     19a:	|  |  |  |  |  |      movea.l d0,a0
     19c:	|  |  |  |  |  |      adda.l #424,a0
     1a2:	|  |  |  |  |  |      move.w (a0),d0
     1a4:	|  |  |  |  |  |      jmp (1a8 <decodeFilename+0x90>,pc,d0.w)
     1a8:	|  |  |  |  |  |      .short 0x00d4
     1aa:	|  |  |  |  |  |      ori.l #12583164,(a0)+
     1b0:	|  |  |  |  |  |      .short 0x00fc
     1b2:	|  |  |  |  |  |      ori.l #4194556,252(a4)
     1ba:	|  |  |  |  |  |      .short 0x00fc
     1bc:	|  |  |  |  |  |      .short 0x00fc
     1be:	|  |  |  |  |  |      ori.b #-4,252(a2)
     1c4:	|  |  |  |  |  |      .short 0x00fc
     1c6:	|  |  |  |  |  |      ori.w #232,(a6)
     1ca:	|  |  |  |  |  |      .short 0x00fc
     1cc:	|  |  |  |  |  |      ori.l #16515180,d2
					case 'L':	newName[i] = '<';	nameIn++;	break;
     1d2:	|  |  |  |  |  |      move.l 20(sp),d0
     1d6:	|  |  |  |  |  |      movea.l 4(sp),a0
     1da:	|  |  |  |  |  |      adda.l d0,a0
     1dc:	|  |  |  |  |  |      move.b #60,(a0)
     1e0:	|  |  |  |  |  |      addq.l #1,28(sp)
     1e4:	|  |  |  |  |  |  /-- bra.w 2ca <decodeFilename+0x1b2>
					case 'G':	newName[i] = '>';	nameIn++;	break;
     1e8:	|  |  |  |  |  |  |   move.l 20(sp),d0
     1ec:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     1f0:	|  |  |  |  |  |  |   adda.l d0,a0
     1f2:	|  |  |  |  |  |  |   move.b #62,(a0)
     1f6:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     1fa:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'P':	newName[i] = '|';	nameIn++;	break;
     1fe:	|  |  |  |  |  |  |   move.l 20(sp),d0
     202:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     206:	|  |  |  |  |  |  |   adda.l d0,a0
     208:	|  |  |  |  |  |  |   move.b #124,(a0)
     20c:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     210:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'U':	newName[i] = '_';	nameIn++;	break;
     214:	|  |  |  |  |  |  |   move.l 20(sp),d0
     218:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     21c:	|  |  |  |  |  |  |   adda.l d0,a0
     21e:	|  |  |  |  |  |  |   move.b #95,(a0)
     222:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     226:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'S':	newName[i] = '\"';	nameIn++;	break;
     22a:	|  |  |  |  |  |  |   move.l 20(sp),d0
     22e:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     232:	|  |  |  |  |  |  |   adda.l d0,a0
     234:	|  |  |  |  |  |  |   move.b #34,(a0)
     238:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     23c:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'B':	newName[i] = '\\';	nameIn++;	break;
     240:	|  |  |  |  |  |  |   move.l 20(sp),d0
     244:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     248:	|  |  |  |  |  |  |   adda.l d0,a0
     24a:	|  |  |  |  |  |  |   move.b #92,(a0)
     24e:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     252:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'F':	newName[i] = '/';	nameIn++;	break;
     254:	|  |  |  |  |  |  |   move.l 20(sp),d0
     258:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     25c:	|  |  |  |  |  |  |   adda.l d0,a0
     25e:	|  |  |  |  |  |  |   move.b #47,(a0)
     262:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     266:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'C':	newName[i] = ':';	nameIn++;	break;
     268:	|  |  |  |  |  |  |   move.l 20(sp),d0
     26c:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     270:	|  |  |  |  |  |  |   adda.l d0,a0
     272:	|  |  |  |  |  |  |   move.b #58,(a0)
     276:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     27a:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'A':	newName[i] = '*';	nameIn++;	break;
     27c:	|  |  |  |  |  |  |   move.l 20(sp),d0
     280:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     284:	|  |  |  |  |  |  |   adda.l d0,a0
     286:	|  |  |  |  |  |  |   move.b #42,(a0)
     28a:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     28e:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'Q':	newName[i] = '?';	nameIn++;	break;
     290:	|  |  |  |  |  |  |   move.l 20(sp),d0
     294:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     298:	|  |  |  |  |  |  |   adda.l d0,a0
     29a:	|  |  |  |  |  |  |   move.b #63,(a0)
     29e:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     2a2:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					default:	newName[i] = '_';
     2a4:	|  |  |  |  |  \--|-> move.l 20(sp),d0
     2a8:	|  |  |  |  |     |   movea.l 4(sp),a0
     2ac:	|  |  |  |  |     |   adda.l d0,a0
     2ae:	|  |  |  |  |     |   move.b #95,(a0)
     2b2:	|  |  |  |  |     +-- bra.s 2ca <decodeFilename+0x1b2>
				}
			} else {
				newName[i] = *nameIn;
     2b4:	|  |  |  |  \-----|-> move.l 20(sp),d0
     2b8:	|  |  |  |        |   movea.l 4(sp),a0
     2bc:	|  |  |  |        |   adda.l d0,a0
     2be:	|  |  |  |        |   movea.l 28(sp),a1
     2c2:	|  |  |  |        |   move.b (a1),d0
     2c4:	|  |  |  |        |   move.b d0,(a0)
				nameIn++;
     2c6:	|  |  |  |        |   addq.l #1,28(sp)
			}
			i++;
     2ca:	|  |  |  |        \-> addq.l #1,20(sp)
		while (*nameIn) {
     2ce:	|  |  |  \----------> movea.l 28(sp),a0
     2d2:	|  |  |               move.b (a0),d0
     2d4:	|  |  \-------------- bne.w 170 <decodeFilename+0x58>
		}
		newName[i] = 0;
     2d8:	|  |                  move.l 20(sp),d0
     2dc:	|  |                  movea.l 4(sp),a0
     2e0:	|  |                  adda.l d0,a0
     2e2:	|  |                  clr.b (a0)
		return newName;
     2e4:	|  |                  move.l 4(sp),d0
     2e8:	|  +----------------- bra.s 2f6 <decodeFilename+0x1de>
	} else {
		return copyString(nameIn);
     2ea:	\--|----------------> move.l 28(sp),-(sp)
     2ee:	   |                  jsr b8 <copyString>
     2f4:	   |                  addq.l #4,sp
	}
}
     2f6:	   \----------------> movea.l (sp)+,a6
     2f8:	                      lea 20(sp),sp
     2fc:	                      rts

000002fe <encodeFilename>:

char * encodeFilename (char * nameIn) {
     2fe:	                      lea -24(sp),sp
     302:	                      move.l a6,-(sp)
	if (! nameIn) return NULL;
     304:	                      tst.l 32(sp)
     308:	                  /-- bne.s 310 <encodeFilename+0x12>
     30a:	                  |   moveq #0,d0
     30c:	/-----------------|-- bra.w 688 <encodeFilename+0x38a>
	if (allowAnyFilename) {
     310:	|                 \-> move.w 1c226 <allowAnyFilename>,d0
     316:	|  /----------------- beq.w 644 <encodeFilename+0x346>
		char * newName = AllocVec( strlen(nameIn)*2+1,MEMF_ANY);
     31a:	|  |                  move.l 32(sp),-(sp)
     31e:	|  |                  jsr 13ce0 <strlen>
     324:	|  |                  addq.l #4,sp
     326:	|  |                  add.l d0,d0
     328:	|  |                  move.l d0,d1
     32a:	|  |                  addq.l #1,d1
     32c:	|  |                  move.l d1,16(sp)
     330:	|  |                  clr.l 12(sp)
     334:	|  |                  move.l 1c9ca <SysBase>,d0
     33a:	|  |                  movea.l d0,a6
     33c:	|  |                  move.l 16(sp),d0
     340:	|  |                  move.l 12(sp),d1
     344:	|  |                  jsr -684(a6)
     348:	|  |                  move.l d0,8(sp)
     34c:	|  |                  move.l 8(sp),d0
     350:	|  |                  move.l d0,4(sp)
		if(newName == 0) {
     354:	|  |              /-- bne.s 36a <encodeFilename+0x6c>
			KPrintF( "encodefilename: Could not allocate Memory");
     356:	|  |              |   pea 17d22 <PutChar+0x4>
     35c:	|  |              |   jsr 17254 <KPrintF>
     362:	|  |              |   addq.l #4,sp
			return NULL;
     364:	|  |              |   moveq #0,d0
     366:	+--|--------------|-- bra.w 688 <encodeFilename+0x38a>
		}

		int i = 0;
     36a:	|  |              \-> clr.l 24(sp)
		while (*nameIn) {
     36e:	|  |     /----------- bra.w 634 <encodeFilename+0x336>
			switch (*nameIn) {
     372:	|  |  /--|----------> movea.l 32(sp),a0
     376:	|  |  |  |            move.b (a0),d0
     378:	|  |  |  |            ext.w d0
     37a:	|  |  |  |            movea.w d0,a0
     37c:	|  |  |  |            moveq #95,d0
     37e:	|  |  |  |            cmp.l a0,d0
     380:	|  |  |  |        /-- blt.w 424 <encodeFilename+0x126>
     384:	|  |  |  |        |   moveq #34,d1
     386:	|  |  |  |        |   cmp.l a0,d1
     388:	|  |  |  |  /-----|-- bgt.w 608 <encodeFilename+0x30a>
     38c:	|  |  |  |  |     |   moveq #-34,d0
     38e:	|  |  |  |  |     |   add.l a0,d0
     390:	|  |  |  |  |     |   moveq #61,d1
     392:	|  |  |  |  |     |   cmp.l d0,d1
     394:	|  |  |  |  +-----|-- bcs.w 608 <encodeFilename+0x30a>
     398:	|  |  |  |  |     |   add.l d0,d0
     39a:	|  |  |  |  |     |   movea.l d0,a0
     39c:	|  |  |  |  |     |   adda.l #936,a0
     3a2:	|  |  |  |  |     |   move.w (a0),d0
     3a4:	|  |  |  |  |     |   jmp (3a8 <encodeFilename+0xaa>,pc,d0.w)
     3a8:	|  |  |  |  |     |   bchg d0,d6
     3aa:	|  |  |  |  |     |   andi.w #608,-(a0)
     3ae:	|  |  |  |  |     |   andi.w #608,-(a0)
     3b2:	|  |  |  |  |     |   andi.w #608,-(a0)
     3b6:	|  |  |  |  |     |   andi.w #516,-(a0)
     3ba:	|  |  |  |  |     |   andi.w #608,-(a0)
     3be:	|  |  |  |  |     |   andi.w #608,-(a0)
     3c2:	|  |  |  |  |     |   bclr d0,-(a6)
     3c4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3c8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3cc:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d0:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d8:	|  |  |  |  |     |   bset d0,(a6)
     3da:	|  |  |  |  |     |   andi.w #134,-(a0)
     3de:	|  |  |  |  |     |   andi.w #182,-(a0)
     3e2:	|  |  |  |  |     |   andi.b #96,(96,a2,d0.w:2)
     3e8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3ec:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f0:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3fc:	|  |  |  |  |     |   andi.w #608,-(a0)
     400:	|  |  |  |  |     |   andi.w #608,-(a0)
     404:	|  |  |  |  |     |   andi.w #608,-(a0)
     408:	|  |  |  |  |     |   andi.w #608,-(a0)
     40c:	|  |  |  |  |     |   andi.w #608,-(a0)
     410:	|  |  |  |  |     |   andi.w #608,-(a0)
     414:	|  |  |  |  |     |   andi.w #608,-(a0)
     418:	|  |  |  |  |     |   andi.w #608,-(a0)
     41c:	|  |  |  |  |     |   bchg d0,(96,a6,d0.w:2)
     420:	|  |  |  |  |     |   andi.w #278,-(a0)
     424:	|  |  |  |  |     \-> moveq #124,d0
     426:	|  |  |  |  |         cmp.l a0,d0
     428:	|  |  |  |  |     /-- beq.s 48e <encodeFilename+0x190>
     42a:	|  |  |  |  +-----|-- bra.w 608 <encodeFilename+0x30a>
				case '<':	newName[i++] = '_';		newName[i++] = 'L';		break;
     42e:	|  |  |  |  |     |   move.l 24(sp),d0
     432:	|  |  |  |  |     |   move.l d0,d1
     434:	|  |  |  |  |     |   addq.l #1,d1
     436:	|  |  |  |  |     |   move.l d1,24(sp)
     43a:	|  |  |  |  |     |   movea.l 4(sp),a0
     43e:	|  |  |  |  |     |   adda.l d0,a0
     440:	|  |  |  |  |     |   move.b #95,(a0)
     444:	|  |  |  |  |     |   move.l 24(sp),d0
     448:	|  |  |  |  |     |   move.l d0,d1
     44a:	|  |  |  |  |     |   addq.l #1,d1
     44c:	|  |  |  |  |     |   move.l d1,24(sp)
     450:	|  |  |  |  |     |   movea.l 4(sp),a0
     454:	|  |  |  |  |     |   adda.l d0,a0
     456:	|  |  |  |  |     |   move.b #76,(a0)
     45a:	|  |  |  |  |  /--|-- bra.w 624 <encodeFilename+0x326>
				case '>':	newName[i++] = '_';		newName[i++] = 'G';		break;
     45e:	|  |  |  |  |  |  |   move.l 24(sp),d0
     462:	|  |  |  |  |  |  |   move.l d0,d1
     464:	|  |  |  |  |  |  |   addq.l #1,d1
     466:	|  |  |  |  |  |  |   move.l d1,24(sp)
     46a:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     46e:	|  |  |  |  |  |  |   adda.l d0,a0
     470:	|  |  |  |  |  |  |   move.b #95,(a0)
     474:	|  |  |  |  |  |  |   move.l 24(sp),d0
     478:	|  |  |  |  |  |  |   move.l d0,d1
     47a:	|  |  |  |  |  |  |   addq.l #1,d1
     47c:	|  |  |  |  |  |  |   move.l d1,24(sp)
     480:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     484:	|  |  |  |  |  |  |   adda.l d0,a0
     486:	|  |  |  |  |  |  |   move.b #71,(a0)
     48a:	|  |  |  |  |  +--|-- bra.w 624 <encodeFilename+0x326>
				case '|':	newName[i++] = '_';		newName[i++] = 'P';		break;
     48e:	|  |  |  |  |  |  \-> move.l 24(sp),d0
     492:	|  |  |  |  |  |      move.l d0,d1
     494:	|  |  |  |  |  |      addq.l #1,d1
     496:	|  |  |  |  |  |      move.l d1,24(sp)
     49a:	|  |  |  |  |  |      movea.l 4(sp),a0
     49e:	|  |  |  |  |  |      adda.l d0,a0
     4a0:	|  |  |  |  |  |      move.b #95,(a0)
     4a4:	|  |  |  |  |  |      move.l 24(sp),d0
     4a8:	|  |  |  |  |  |      move.l d0,d1
     4aa:	|  |  |  |  |  |      addq.l #1,d1
     4ac:	|  |  |  |  |  |      move.l d1,24(sp)
     4b0:	|  |  |  |  |  |      movea.l 4(sp),a0
     4b4:	|  |  |  |  |  |      adda.l d0,a0
     4b6:	|  |  |  |  |  |      move.b #80,(a0)
     4ba:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '_':	newName[i++] = '_';		newName[i++] = 'U';		break;
     4be:	|  |  |  |  |  |      move.l 24(sp),d0
     4c2:	|  |  |  |  |  |      move.l d0,d1
     4c4:	|  |  |  |  |  |      addq.l #1,d1
     4c6:	|  |  |  |  |  |      move.l d1,24(sp)
     4ca:	|  |  |  |  |  |      movea.l 4(sp),a0
     4ce:	|  |  |  |  |  |      adda.l d0,a0
     4d0:	|  |  |  |  |  |      move.b #95,(a0)
     4d4:	|  |  |  |  |  |      move.l 24(sp),d0
     4d8:	|  |  |  |  |  |      move.l d0,d1
     4da:	|  |  |  |  |  |      addq.l #1,d1
     4dc:	|  |  |  |  |  |      move.l d1,24(sp)
     4e0:	|  |  |  |  |  |      movea.l 4(sp),a0
     4e4:	|  |  |  |  |  |      adda.l d0,a0
     4e6:	|  |  |  |  |  |      move.b #85,(a0)
     4ea:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '\"':	newName[i++] = '_';		newName[i++] = 'S';		break;
     4ee:	|  |  |  |  |  |      move.l 24(sp),d0
     4f2:	|  |  |  |  |  |      move.l d0,d1
     4f4:	|  |  |  |  |  |      addq.l #1,d1
     4f6:	|  |  |  |  |  |      move.l d1,24(sp)
     4fa:	|  |  |  |  |  |      movea.l 4(sp),a0
     4fe:	|  |  |  |  |  |      adda.l d0,a0
     500:	|  |  |  |  |  |      move.b #95,(a0)
     504:	|  |  |  |  |  |      move.l 24(sp),d0
     508:	|  |  |  |  |  |      move.l d0,d1
     50a:	|  |  |  |  |  |      addq.l #1,d1
     50c:	|  |  |  |  |  |      move.l d1,24(sp)
     510:	|  |  |  |  |  |      movea.l 4(sp),a0
     514:	|  |  |  |  |  |      adda.l d0,a0
     516:	|  |  |  |  |  |      move.b #83,(a0)
     51a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '\\':	newName[i++] = '_';		newName[i++] = 'B';		break;
     51e:	|  |  |  |  |  |      move.l 24(sp),d0
     522:	|  |  |  |  |  |      move.l d0,d1
     524:	|  |  |  |  |  |      addq.l #1,d1
     526:	|  |  |  |  |  |      move.l d1,24(sp)
     52a:	|  |  |  |  |  |      movea.l 4(sp),a0
     52e:	|  |  |  |  |  |      adda.l d0,a0
     530:	|  |  |  |  |  |      move.b #95,(a0)
     534:	|  |  |  |  |  |      move.l 24(sp),d0
     538:	|  |  |  |  |  |      move.l d0,d1
     53a:	|  |  |  |  |  |      addq.l #1,d1
     53c:	|  |  |  |  |  |      move.l d1,24(sp)
     540:	|  |  |  |  |  |      movea.l 4(sp),a0
     544:	|  |  |  |  |  |      adda.l d0,a0
     546:	|  |  |  |  |  |      move.b #66,(a0)
     54a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '/':	newName[i++] = '_';		newName[i++] = 'F';		break;
     54e:	|  |  |  |  |  |      move.l 24(sp),d0
     552:	|  |  |  |  |  |      move.l d0,d1
     554:	|  |  |  |  |  |      addq.l #1,d1
     556:	|  |  |  |  |  |      move.l d1,24(sp)
     55a:	|  |  |  |  |  |      movea.l 4(sp),a0
     55e:	|  |  |  |  |  |      adda.l d0,a0
     560:	|  |  |  |  |  |      move.b #95,(a0)
     564:	|  |  |  |  |  |      move.l 24(sp),d0
     568:	|  |  |  |  |  |      move.l d0,d1
     56a:	|  |  |  |  |  |      addq.l #1,d1
     56c:	|  |  |  |  |  |      move.l d1,24(sp)
     570:	|  |  |  |  |  |      movea.l 4(sp),a0
     574:	|  |  |  |  |  |      adda.l d0,a0
     576:	|  |  |  |  |  |      move.b #70,(a0)
     57a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case ':':	newName[i++] = '_';		newName[i++] = 'C';		break;
     57e:	|  |  |  |  |  |      move.l 24(sp),d0
     582:	|  |  |  |  |  |      move.l d0,d1
     584:	|  |  |  |  |  |      addq.l #1,d1
     586:	|  |  |  |  |  |      move.l d1,24(sp)
     58a:	|  |  |  |  |  |      movea.l 4(sp),a0
     58e:	|  |  |  |  |  |      adda.l d0,a0
     590:	|  |  |  |  |  |      move.b #95,(a0)
     594:	|  |  |  |  |  |      move.l 24(sp),d0
     598:	|  |  |  |  |  |      move.l d0,d1
     59a:	|  |  |  |  |  |      addq.l #1,d1
     59c:	|  |  |  |  |  |      move.l d1,24(sp)
     5a0:	|  |  |  |  |  |      movea.l 4(sp),a0
     5a4:	|  |  |  |  |  |      adda.l d0,a0
     5a6:	|  |  |  |  |  |      move.b #67,(a0)
     5aa:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>
				case '*':	newName[i++] = '_';		newName[i++] = 'A';		break;
     5ac:	|  |  |  |  |  |      move.l 24(sp),d0
     5b0:	|  |  |  |  |  |      move.l d0,d1
     5b2:	|  |  |  |  |  |      addq.l #1,d1
     5b4:	|  |  |  |  |  |      move.l d1,24(sp)
     5b8:	|  |  |  |  |  |      movea.l 4(sp),a0
     5bc:	|  |  |  |  |  |      adda.l d0,a0
     5be:	|  |  |  |  |  |      move.b #95,(a0)
     5c2:	|  |  |  |  |  |      move.l 24(sp),d0
     5c6:	|  |  |  |  |  |      move.l d0,d1
     5c8:	|  |  |  |  |  |      addq.l #1,d1
     5ca:	|  |  |  |  |  |      move.l d1,24(sp)
     5ce:	|  |  |  |  |  |      movea.l 4(sp),a0
     5d2:	|  |  |  |  |  |      adda.l d0,a0
     5d4:	|  |  |  |  |  |      move.b #65,(a0)
     5d8:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>
				case '?':	newName[i++] = '_';		newName[i++] = 'Q';		break;
     5da:	|  |  |  |  |  |      move.l 24(sp),d0
     5de:	|  |  |  |  |  |      move.l d0,d1
     5e0:	|  |  |  |  |  |      addq.l #1,d1
     5e2:	|  |  |  |  |  |      move.l d1,24(sp)
     5e6:	|  |  |  |  |  |      movea.l 4(sp),a0
     5ea:	|  |  |  |  |  |      adda.l d0,a0
     5ec:	|  |  |  |  |  |      move.b #95,(a0)
     5f0:	|  |  |  |  |  |      move.l 24(sp),d0
     5f4:	|  |  |  |  |  |      move.l d0,d1
     5f6:	|  |  |  |  |  |      addq.l #1,d1
     5f8:	|  |  |  |  |  |      move.l d1,24(sp)
     5fc:	|  |  |  |  |  |      movea.l 4(sp),a0
     600:	|  |  |  |  |  |      adda.l d0,a0
     602:	|  |  |  |  |  |      move.b #81,(a0)
     606:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>

				default:	newName[i++] = *nameIn;							break;
     608:	|  |  |  |  \--|----> move.l 24(sp),d0
     60c:	|  |  |  |     |      move.l d0,d1
     60e:	|  |  |  |     |      addq.l #1,d1
     610:	|  |  |  |     |      move.l d1,24(sp)
     614:	|  |  |  |     |      movea.l 4(sp),a0
     618:	|  |  |  |     |      adda.l d0,a0
     61a:	|  |  |  |     |      movea.l 32(sp),a1
     61e:	|  |  |  |     |      move.b (a1),d0
     620:	|  |  |  |     |      move.b d0,(a0)
     622:	|  |  |  |     |      nop
			}
			newName[i] = 0;
     624:	|  |  |  |     \----> move.l 24(sp),d0
     628:	|  |  |  |            movea.l 4(sp),a0
     62c:	|  |  |  |            adda.l d0,a0
     62e:	|  |  |  |            clr.b (a0)
			nameIn ++;
     630:	|  |  |  |            addq.l #1,32(sp)
		while (*nameIn) {
     634:	|  |  |  \----------> movea.l 32(sp),a0
     638:	|  |  |               move.b (a0),d0
     63a:	|  |  \-------------- bne.w 372 <encodeFilename+0x74>
		}
		return newName;
     63e:	|  |                  move.l 4(sp),d0
     642:	+--|----------------- bra.s 688 <encodeFilename+0x38a>
	} else {
		int a;
		for (a = 0; nameIn[a]; a ++) {
     644:	|  \----------------> clr.l 20(sp)
     648:	|              /----- bra.s 66e <encodeFilename+0x370>
			if (nameIn[a] == '\\') nameIn[a] ='/';
     64a:	|           /--|----> move.l 20(sp),d0
     64e:	|           |  |      movea.l 32(sp),a0
     652:	|           |  |      adda.l d0,a0
     654:	|           |  |      move.b (a0),d0
     656:	|           |  |      cmpi.b #92,d0
     65a:	|           |  |  /-- bne.s 66a <encodeFilename+0x36c>
     65c:	|           |  |  |   move.l 20(sp),d0
     660:	|           |  |  |   movea.l 32(sp),a0
     664:	|           |  |  |   adda.l d0,a0
     666:	|           |  |  |   move.b #47,(a0)
		for (a = 0; nameIn[a]; a ++) {
     66a:	|           |  |  \-> addq.l #1,20(sp)
     66e:	|           |  \----> move.l 20(sp),d0
     672:	|           |         movea.l 32(sp),a0
     676:	|           |         adda.l d0,a0
     678:	|           |         move.b (a0),d0
     67a:	|           \-------- bne.s 64a <encodeFilename+0x34c>
		}

		return copyString (nameIn);
     67c:	|                     move.l 32(sp),-(sp)
     680:	|                     jsr b8 <copyString>
     686:	|                     addq.l #4,sp
	}
}
     688:	\-------------------> movea.l (sp)+,a6
     68a:	                      lea 24(sp),sp
     68e:	                      rts

00000690 <FLOATSwap>:

FLOAT FLOATSwap( FLOAT f )
{
     690:	subq.l #8,sp
	{
		FLOAT f;
		unsigned char b[4];
	} dat1, dat2;

	dat1.f = f;
     692:	move.l 12(sp),4(sp)
	dat2.b[0] = dat1.b[3];
     698:	move.b 7(sp),d0
     69c:	move.b d0,(sp)
	dat2.b[1] = dat1.b[2];
     69e:	move.b 6(sp),d0
     6a2:	move.b d0,1(sp)
	dat2.b[2] = dat1.b[1];
     6a6:	move.b 5(sp),d0
     6aa:	move.b d0,2(sp)
	dat2.b[3] = dat1.b[0];
     6ae:	move.b 4(sp),d0
     6b2:	move.b d0,3(sp)
	return dat2.f;
     6b6:	move.l (sp),d0
}
     6b8:	addq.l #8,sp
     6ba:	rts

000006bc <get2bytes>:

int get2bytes (BPTR fp) {
     6bc:	lea -24(sp),sp
     6c0:	move.l a6,-(sp)
	int f1, f2;

	f1 = FGetC (fp);
     6c2:	move.l 32(sp),24(sp)
     6c8:	move.l 1c9d2 <DOSBase>,d0
     6ce:	movea.l d0,a6
     6d0:	move.l 24(sp),d1
     6d4:	jsr -306(a6)
     6d8:	move.l d0,20(sp)
     6dc:	move.l 20(sp),d0
     6e0:	move.l d0,16(sp)
	f2 = FGetC (fp);
     6e4:	move.l 32(sp),12(sp)
     6ea:	move.l 1c9d2 <DOSBase>,d0
     6f0:	movea.l d0,a6
     6f2:	move.l 12(sp),d1
     6f6:	jsr -306(a6)
     6fa:	move.l d0,8(sp)
     6fe:	move.l 8(sp),d0
     702:	move.l d0,4(sp)

	return (f1 * 256 + f2);
     706:	move.l 16(sp),d0
     70a:	lsl.l #8,d0
     70c:	add.l 4(sp),d0
}
     710:	movea.l (sp)+,a6
     712:	lea 24(sp),sp
     716:	rts

00000718 <get4bytes>:

ULONG get4bytes (BPTR fp) {
     718:	lea -52(sp),sp
     71c:	move.l a6,-(sp)
	int f1, f2, f3, f4;

	f1 = FGetC (fp);
     71e:	move.l 60(sp),52(sp)
     724:	move.l 1c9d2 <DOSBase>,d0
     72a:	movea.l d0,a6
     72c:	move.l 52(sp),d1
     730:	jsr -306(a6)
     734:	move.l d0,48(sp)
     738:	move.l 48(sp),d0
     73c:	move.l d0,44(sp)
	f2 = FGetC (fp);
     740:	move.l 60(sp),40(sp)
     746:	move.l 1c9d2 <DOSBase>,d0
     74c:	movea.l d0,a6
     74e:	move.l 40(sp),d1
     752:	jsr -306(a6)
     756:	move.l d0,36(sp)
     75a:	move.l 36(sp),d0
     75e:	move.l d0,32(sp)
	f3 = FGetC (fp);
     762:	move.l 60(sp),28(sp)
     768:	move.l 1c9d2 <DOSBase>,d0
     76e:	movea.l d0,a6
     770:	move.l 28(sp),d1
     774:	jsr -306(a6)
     778:	move.l d0,24(sp)
     77c:	move.l 24(sp),d0
     780:	move.l d0,20(sp)
	f4 = FGetC (fp);
     784:	move.l 60(sp),16(sp)
     78a:	move.l 1c9d2 <DOSBase>,d0
     790:	movea.l d0,a6
     792:	move.l 16(sp),d1
     796:	jsr -306(a6)
     79a:	move.l d0,12(sp)
     79e:	move.l 12(sp),d0
     7a2:	move.l d0,8(sp)

	ULONG x = f1 + f2*256 + f3*256*256 + f4*256*256*256;
     7a6:	move.l 32(sp),d0
     7aa:	lsl.l #8,d0
     7ac:	move.l d0,d1
     7ae:	add.l 44(sp),d1
     7b2:	move.l 20(sp),d0
     7b6:	swap d0
     7b8:	clr.w d0
     7ba:	add.l d0,d1
     7bc:	move.l 8(sp),d0
     7c0:	lsl.w #8,d0
     7c2:	swap d0
     7c4:	clr.w d0
     7c6:	add.l d1,d0
     7c8:	move.l d0,4(sp)

	return x;
     7cc:	move.l 4(sp),d0
}
     7d0:	movea.l (sp)+,a6
     7d2:	lea 52(sp),sp
     7d6:	rts

000007d8 <getFloat>:

FLOAT getFloat (BPTR fp) {
     7d8:	    lea -28(sp),sp
     7dc:	    movem.l d2-d4/a6,-(sp)
	FLOAT f;
	LONG blocks_read = FRead( fp, &f, sizeof (FLOAT), 1 ); 
     7e0:	    move.l 48(sp),40(sp)
     7e6:	    lea 44(sp),a0
     7ea:	    lea -28(a0),a0
     7ee:	    move.l a0,36(sp)
     7f2:	    moveq #4,d0
     7f4:	    move.l d0,32(sp)
     7f8:	    moveq #1,d0
     7fa:	    move.l d0,28(sp)
     7fe:	    move.l 1c9d2 <DOSBase>,d0
     804:	    movea.l d0,a6
     806:	    move.l 40(sp),d1
     80a:	    move.l 36(sp),d2
     80e:	    move.l 32(sp),d3
     812:	    move.l 28(sp),d4
     816:	    jsr -324(a6)
     81a:	    move.l d0,24(sp)
     81e:	    move.l 24(sp),d0
     822:	    move.l d0,20(sp)
	if (blocks_read != 1) {
     826:	    moveq #1,d0
     828:	    cmp.l 20(sp),d0
     82c:	/-- beq.s 83c <getFloat+0x64>
		KPrintF("Reading error in getFloat.\n");
     82e:	|   pea 17d4c <PutChar+0x2e>
     834:	|   jsr 17254 <KPrintF>
     83a:	|   addq.l #4,sp
	}
	return FLOATSwap(f);
     83c:	\-> move.l 16(sp),d0
     840:	    move.l d0,-(sp)
     842:	    jsr 690 <FLOATSwap>
     848:	    addq.l #4,sp
	return f;
}
     84a:	    movem.l (sp)+,d2-d4/a6
     84e:	    lea 28(sp),sp
     852:	    rts

00000854 <getSigned>:

short getSigned (BPTR fp) {
     854:	    lea -24(sp),sp
     858:	    movem.l d2-d3/a6,-(sp)
	short f;
	LONG bytes_read = Read(fp, &f, sizeof(short));
     85c:	    move.l 40(sp),32(sp)
     862:	    lea 36(sp),a0
     866:	    lea -22(a0),a0
     86a:	    move.l a0,28(sp)
     86e:	    moveq #2,d0
     870:	    move.l d0,24(sp)
     874:	    move.l 1c9d2 <DOSBase>,d0
     87a:	    movea.l d0,a6
     87c:	    move.l 32(sp),d1
     880:	    move.l 28(sp),d2
     884:	    move.l 24(sp),d3
     888:	    jsr -42(a6)
     88c:	    move.l d0,20(sp)
     890:	    move.l 20(sp),d0
     894:	    move.l d0,16(sp)
	if (bytes_read != sizeof (short)) {
     898:	    moveq #2,d0
     89a:	    cmp.l 16(sp),d0
     89e:	/-- beq.s 8ae <getSigned+0x5a>
		KPrintF("getSigned: Reading error in getSigned.\n");
     8a0:	|   pea 17d68 <PutChar+0x4a>
     8a6:	|   jsr 17254 <KPrintF>
     8ac:	|   addq.l #4,sp
	}
	f = shortSwap(f);
     8ae:	\-> move.w 14(sp),d0
     8b2:	    movea.w d0,a0
     8b4:	    move.l a0,-(sp)
     8b6:	    jsr baa <shortSwap>
     8bc:	    addq.l #4,sp
     8be:	    move.w d0,14(sp)
	return f;
     8c2:	    move.w 14(sp),d0
}
     8c6:	    movem.l (sp)+,d2-d3/a6
     8ca:	    lea 24(sp),sp
     8ce:	    rts

000008d0 <put2bytes>:

void put2bytes (int numtoput, BPTR fp) {
     8d0:	    lea -24(sp),sp
     8d4:	    move.l a6,-(sp)
     8d6:	    move.l d2,-(sp)
	FPutC( fp, (char) (numtoput / 256));
     8d8:	    move.l 40(sp),28(sp)
     8de:	    move.l 36(sp),d0
     8e2:	/-- bpl.s 8ea <put2bytes+0x1a>
     8e4:	|   addi.l #255,d0
     8ea:	\-> asr.l #8,d0
     8ec:	    move.l d0,d0
     8ee:	    ext.w d0
     8f0:	    movea.w d0,a0
     8f2:	    move.l a0,24(sp)
     8f6:	    move.l 1c9d2 <DOSBase>,d0
     8fc:	    movea.l d0,a6
     8fe:	    move.l 28(sp),d1
     902:	    move.l 24(sp),d2
     906:	    jsr -312(a6)
     90a:	    move.l d0,20(sp)
	FPutC( fp, (char) (numtoput % 256));
     90e:	    move.l 40(sp),16(sp)
     914:	    move.l 36(sp),d0
     918:	    andi.l #-2147483393,d0
     91e:	/-- bpl.s 92a <put2bytes+0x5a>
     920:	|   subq.l #1,d0
     922:	|   moveq #-1,d1
     924:	|   not.b d1
     926:	|   or.l d1,d0
     928:	|   addq.l #1,d0
     92a:	\-> move.l d0,d0
     92c:	    ext.w d0
     92e:	    movea.w d0,a0
     930:	    move.l a0,12(sp)
     934:	    move.l 1c9d2 <DOSBase>,d0
     93a:	    movea.l d0,a6
     93c:	    move.l 16(sp),d1
     940:	    move.l 12(sp),d2
     944:	    jsr -312(a6)
     948:	    move.l d0,8(sp)
}
     94c:	    nop
     94e:	    move.l (sp)+,d2
     950:	    movea.l (sp)+,a6
     952:	    lea 24(sp),sp
     956:	    rts

00000958 <put4bytes>:

void put4bytes (ULONG i, BPTR fp) {
     958:	lea -52(sp),sp
     95c:	move.l a6,-(sp)
     95e:	move.l d2,-(sp)
	//	fwrite (&i, sizeof (long int), 1, fp);
	unsigned char f1, f2, f3, f4;

	f4 = i / (256*256*256);
     960:	move.l 64(sp),d0
     964:	clr.w d0
     966:	swap d0
     968:	lsr.w #8,d0
     96a:	move.b d0,59(sp)
	i = i % (256*256*256);
     96e:	andi.l #16777215,64(sp)
	f3 = i / (256*256);
     976:	move.l 64(sp),d0
     97a:	clr.w d0
     97c:	swap d0
     97e:	move.b d0,58(sp)
	i = i % (256*256);
     982:	andi.l #65535,64(sp)
	f2 = i / 256;
     98a:	move.l 64(sp),d0
     98e:	lsr.l #8,d0
     990:	move.b d0,57(sp)
	f1 = i % 256;
     994:	move.b 67(sp),56(sp)

	FPutC (fp,f1);
     99a:	move.l 68(sp),52(sp)
     9a0:	moveq #0,d0
     9a2:	move.b 56(sp),d0
     9a6:	move.l d0,48(sp)
     9aa:	move.l 1c9d2 <DOSBase>,d0
     9b0:	movea.l d0,a6
     9b2:	move.l 52(sp),d1
     9b6:	move.l 48(sp),d2
     9ba:	jsr -312(a6)
     9be:	move.l d0,44(sp)
	FPutC (fp,f2);
     9c2:	move.l 68(sp),40(sp)
     9c8:	moveq #0,d0
     9ca:	move.b 57(sp),d0
     9ce:	move.l d0,36(sp)
     9d2:	move.l 1c9d2 <DOSBase>,d0
     9d8:	movea.l d0,a6
     9da:	move.l 40(sp),d1
     9de:	move.l 36(sp),d2
     9e2:	jsr -312(a6)
     9e6:	move.l d0,32(sp)
	FPutC (fp,f3);
     9ea:	move.l 68(sp),28(sp)
     9f0:	moveq #0,d0
     9f2:	move.b 58(sp),d0
     9f6:	move.l d0,24(sp)
     9fa:	move.l 1c9d2 <DOSBase>,d0
     a00:	movea.l d0,a6
     a02:	move.l 28(sp),d1
     a06:	move.l 24(sp),d2
     a0a:	jsr -312(a6)
     a0e:	move.l d0,20(sp)
	FPutC (fp,f4);
     a12:	move.l 68(sp),16(sp)
     a18:	moveq #0,d0
     a1a:	move.b 59(sp),d0
     a1e:	move.l d0,12(sp)
     a22:	move.l 1c9d2 <DOSBase>,d0
     a28:	movea.l d0,a6
     a2a:	move.l 16(sp),d1
     a2e:	move.l 12(sp),d2
     a32:	jsr -312(a6)
     a36:	move.l d0,8(sp)
}
     a3a:	nop
     a3c:	move.l (sp)+,d2
     a3e:	movea.l (sp)+,a6
     a40:	lea 52(sp),sp
     a44:	rts

00000a46 <putFloat>:

void putFloat (FLOAT f, BPTR fp) {
     a46:	lea -16(sp),sp
     a4a:	movem.l d2-d3/a6,-(sp)
	f = FLOATSwap(f);
     a4e:	move.l 32(sp),d0
     a52:	move.l d0,-(sp)
     a54:	jsr 690 <FLOATSwap>
     a5a:	addq.l #4,sp
     a5c:	move.l d0,32(sp)
	Write( fp, &f, sizeof (FLOAT));
     a60:	move.l 36(sp),24(sp)
     a66:	moveq #32,d0
     a68:	add.l sp,d0
     a6a:	move.l d0,20(sp)
     a6e:	moveq #4,d0
     a70:	move.l d0,16(sp)
     a74:	move.l 1c9d2 <DOSBase>,d0
     a7a:	movea.l d0,a6
     a7c:	move.l 24(sp),d1
     a80:	move.l 20(sp),d2
     a84:	move.l 16(sp),d3
     a88:	jsr -48(a6)
     a8c:	move.l d0,12(sp)
}
     a90:	nop
     a92:	movem.l (sp)+,d2-d3/a6
     a96:	lea 16(sp),sp
     a9a:	rts

00000a9c <putSigned>:

void putSigned (short f, BPTR fp) {
     a9c:	lea -20(sp),sp
     aa0:	movem.l d2-d3/a6,-(sp)
     aa4:	move.l 36(sp),d0
     aa8:	move.w d0,d0
     aaa:	move.w d0,14(sp)
	f = shortSwap(f);
     aae:	move.w 14(sp),d0
     ab2:	movea.w d0,a0
     ab4:	move.l a0,-(sp)
     ab6:	jsr baa <shortSwap>
     abc:	addq.l #4,sp
     abe:	move.w d0,14(sp)
	Write(fp, &f, sizeof(short));
     ac2:	move.l 40(sp),28(sp)
     ac8:	lea 32(sp),a0
     acc:	lea -18(a0),a0
     ad0:	move.l a0,24(sp)
     ad4:	moveq #2,d0
     ad6:	move.l d0,20(sp)
     ada:	move.l 1c9d2 <DOSBase>,d0
     ae0:	movea.l d0,a6
     ae2:	move.l 28(sp),d1
     ae6:	move.l 24(sp),d2
     aea:	move.l 20(sp),d3
     aee:	jsr -48(a6)
     af2:	move.l d0,16(sp)
}
     af6:	nop
     af8:	movem.l (sp)+,d2-d3/a6
     afc:	lea 20(sp),sp
     b00:	rts

00000b02 <readString>:

char * readString (BPTR fp) {
     b02:	          lea -32(sp),sp
     b06:	          move.l a6,-(sp)

	int a, len = get2bytes (fp);
     b08:	          move.l 40(sp),-(sp)
     b0c:	          jsr 6bc <get2bytes>
     b12:	          addq.l #4,sp
     b14:	          move.l d0,28(sp)
	//debugOut ("MOREIO: readString - len %i\n", len);
	char * s = AllocVec(len+1,MEMF_ANY);
     b18:	          move.l 28(sp),d0
     b1c:	          addq.l #1,d0
     b1e:	          move.l d0,24(sp)
     b22:	          clr.l 20(sp)
     b26:	          move.l 1c9ca <SysBase>,d0
     b2c:	          movea.l d0,a6
     b2e:	          move.l 24(sp),d0
     b32:	          move.l 20(sp),d1
     b36:	          jsr -684(a6)
     b3a:	          move.l d0,16(sp)
     b3e:	          move.l 16(sp),d0
     b42:	          move.l d0,12(sp)
	if(s == 0) return NULL;
     b46:	      /-- bne.s b4c <readString+0x4a>
     b48:	      |   moveq #0,d0
     b4a:	/-----|-- bra.s ba2 <readString+0xa0>
	for (a = 0; a < len; a ++) {
     b4c:	|     \-> clr.l 32(sp)
     b50:	|     /-- bra.s b88 <readString+0x86>
		s[a] = (char) (FGetC (fp) - 1);
     b52:	|  /--|-> move.l 40(sp),8(sp)
     b58:	|  |  |   move.l 1c9d2 <DOSBase>,d0
     b5e:	|  |  |   movea.l d0,a6
     b60:	|  |  |   move.l 8(sp),d1
     b64:	|  |  |   jsr -306(a6)
     b68:	|  |  |   move.l d0,4(sp)
     b6c:	|  |  |   move.l 4(sp),d0
     b70:	|  |  |   move.l d0,d0
     b72:	|  |  |   move.b d0,d1
     b74:	|  |  |   subq.b #1,d1
     b76:	|  |  |   move.l 32(sp),d0
     b7a:	|  |  |   movea.l 12(sp),a0
     b7e:	|  |  |   adda.l d0,a0
     b80:	|  |  |   move.b d1,d0
     b82:	|  |  |   move.b d0,(a0)
	for (a = 0; a < len; a ++) {
     b84:	|  |  |   addq.l #1,32(sp)
     b88:	|  |  \-> move.l 32(sp),d0
     b8c:	|  |      cmp.l 28(sp),d0
     b90:	|  \----- blt.s b52 <readString+0x50>
	}
	s[len] = 0;
     b92:	|         move.l 28(sp),d0
     b96:	|         movea.l 12(sp),a0
     b9a:	|         adda.l d0,a0
     b9c:	|         clr.b (a0)
	//debugOut ("MOREIO: readString: %s\n", s);
	return s;
     b9e:	|         move.l 12(sp),d0
}
     ba2:	\-------> movea.l (sp)+,a6
     ba4:	          lea 32(sp),sp
     ba8:	          rts

00000baa <shortSwap>:

short shortSwap( short s )
{
     baa:	subq.l #4,sp
     bac:	move.l 8(sp),d0
     bb0:	move.w d0,d0
     bb2:	move.w d0,(sp)
	unsigned char b1, b2;
	
	b1 = s & 255;
     bb4:	move.b 1(sp),3(sp)
	b2 = (s >> 8) & 255;
     bba:	move.w (sp),d0
     bbc:	asr.w #8,d0
     bbe:	move.b d0,2(sp)
	
	return (b1 << 8) + b2;
     bc2:	clr.w d0
     bc4:	move.b 3(sp),d0
     bc8:	move.w d0,d1
     bca:	lsl.w #8,d1
     bcc:	clr.w d0
     bce:	move.b 2(sp),d0
     bd2:	add.w d1,d0
}
     bd4:	addq.l #4,sp
     bd6:	rts

00000bd8 <writeString>:

void writeString (char * s, BPTR fp) {
     bd8:	       lea -20(sp),sp
     bdc:	       move.l a6,-(sp)
     bde:	       move.l d2,-(sp)
	int a, len = strlen (s);
     be0:	       move.l 32(sp),-(sp)
     be4:	       jsr 13ce0 <strlen>
     bea:	       addq.l #4,sp
     bec:	       move.l d0,20(sp)
	put2bytes (len, fp);
     bf0:	       move.l 36(sp),-(sp)
     bf4:	       move.l 24(sp),-(sp)
     bf8:	       jsr 8d0 <put2bytes>
     bfe:	       addq.l #8,sp
	for (a = 0; a < len; a ++) {
     c00:	       clr.l 24(sp)
     c04:	   /-- bra.s c40 <writeString+0x68>
		FPutC (fp,s[a] + 1);
     c06:	/--|-> move.l 36(sp),16(sp)
     c0c:	|  |   move.l 24(sp),d0
     c10:	|  |   movea.l 32(sp),a0
     c14:	|  |   adda.l d0,a0
     c16:	|  |   move.b (a0),d0
     c18:	|  |   ext.w d0
     c1a:	|  |   ext.l d0
     c1c:	|  |   move.l d0,d1
     c1e:	|  |   addq.l #1,d1
     c20:	|  |   move.l d1,12(sp)
     c24:	|  |   move.l 1c9d2 <DOSBase>,d0
     c2a:	|  |   movea.l d0,a6
     c2c:	|  |   move.l 16(sp),d1
     c30:	|  |   move.l 12(sp),d2
     c34:	|  |   jsr -312(a6)
     c38:	|  |   move.l d0,8(sp)
	for (a = 0; a < len; a ++) {
     c3c:	|  |   addq.l #1,24(sp)
     c40:	|  \-> move.l 24(sp),d0
     c44:	|      cmp.l 20(sp),d0
     c48:	\----- blt.s c06 <writeString+0x2e>
	}
     c4a:	       nop
     c4c:	       nop
     c4e:	       move.l (sp)+,d2
     c50:	       movea.l (sp)+,a6
     c52:	       lea 20(sp),sp
     c56:	       rts

00000c58 <displayCursor>:
int mouseCursorFrameNum = 0;
int mouseCursorCountUp = 0;

extern struct inputType input;

void displayCursor () {
     c58:	    movem.l d2-d5,-(sp)

	
	if( mouseCursorAnim->theSprites)
     c5c:	    movea.l 1c8d0 <mouseCursorAnim>,a0
     c62:	    move.l (a0),d0
     c64:	/-- beq.w d64 <displayCursor+0x10c>
	{		
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
			input.mouseY + 44 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].yhot,
			mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].height,
			(UBYTE *) mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].data);
     c68:	|   movea.l 1c8d0 <mouseCursorAnim>,a0
     c6e:	|   movea.l (a0),a0
     c70:	|   movea.l 16(a0),a1
     c74:	|   movea.l 1c8d0 <mouseCursorAnim>,a0
     c7a:	|   movea.l 4(a0),a0
     c7e:	|   move.l (a0),d0
     c80:	|   move.l d0,d1
     c82:	|   move.l d1,d0
     c84:	|   lsl.l #3,d0
     c86:	|   sub.l d1,d0
     c88:	|   add.l d0,d0
     c8a:	|   add.l d0,d0
     c8c:	|   lea (0,a1,d0.l),a0
     c90:	|   movea.l 24(a0),a1
			mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].height,
     c94:	|   movea.l 1c8d0 <mouseCursorAnim>,a0
     c9a:	|   movea.l (a0),a0
     c9c:	|   move.l 16(a0),d2
     ca0:	|   movea.l 1c8d0 <mouseCursorAnim>,a0
     ca6:	|   movea.l 4(a0),a0
     caa:	|   move.l (a0),d0
     cac:	|   move.l d0,d1
     cae:	|   move.l d1,d0
     cb0:	|   lsl.l #3,d0
     cb2:	|   sub.l d1,d0
     cb4:	|   add.l d0,d0
     cb6:	|   add.l d0,d0
     cb8:	|   movea.l d2,a0
     cba:	|   adda.l d0,a0
     cbc:	|   move.l 4(a0),d0
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
     cc0:	|   move.l d0,d0
     cc2:	|   moveq #0,d3
     cc4:	|   move.w d0,d3
			input.mouseY + 44 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].yhot,
     cc6:	|   move.l 1c98a <input+0xe>,d0
     ccc:	|   move.l d0,d2
     cce:	|   movea.l 1c8d0 <mouseCursorAnim>,a0
     cd4:	|   movea.l (a0),a0
     cd6:	|   move.l 16(a0),d4
     cda:	|   movea.l 1c8d0 <mouseCursorAnim>,a0
     ce0:	|   movea.l 4(a0),a0
     ce4:	|   move.l (a0),d0
     ce6:	|   move.l d0,d1
     ce8:	|   move.l d1,d0
     cea:	|   lsl.l #3,d0
     cec:	|   sub.l d1,d0
     cee:	|   add.l d0,d0
     cf0:	|   add.l d0,d0
     cf2:	|   movea.l d4,a0
     cf4:	|   adda.l d0,a0
     cf6:	|   move.l 12(a0),d0
     cfa:	|   move.l d0,d0
     cfc:	|   move.w d2,d1
     cfe:	|   sub.w d0,d1
     d00:	|   move.w d1,d0
     d02:	|   addi.w #44,d0
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
     d06:	|   moveq #0,d2
     d08:	|   move.w d0,d2
     d0a:	|   move.l 1c986 <input+0xa>,d0
     d10:	|   move.l d0,d4
     d12:	|   movea.l 1c8d0 <mouseCursorAnim>,a0
     d18:	|   movea.l (a0),a0
     d1a:	|   move.l 16(a0),d5
     d1e:	|   movea.l 1c8d0 <mouseCursorAnim>,a0
     d24:	|   movea.l 4(a0),a0
     d28:	|   move.l (a0),d0
     d2a:	|   move.l d0,d1
     d2c:	|   move.l d1,d0
     d2e:	|   lsl.l #3,d0
     d30:	|   sub.l d1,d0
     d32:	|   add.l d0,d0
     d34:	|   add.l d0,d0
     d36:	|   movea.l d5,a0
     d38:	|   adda.l d0,a0
     d3a:	|   move.l 8(a0),d0
     d3e:	|   move.l d0,d0
     d40:	|   move.w d4,d1
     d42:	|   sub.w d0,d1
     d44:	|   move.w d1,d0
     d46:	|   addi.w #128,d0
     d4a:	|   move.w d0,d0
     d4c:	|   andi.l #65535,d0
     d52:	|   move.l a1,-(sp)
     d54:	|   move.l d3,-(sp)
     d56:	|   move.l d2,-(sp)
     d58:	|   move.l d0,-(sp)
     d5a:	|   jsr 13ee <CstDisplayCursor>
     d60:	|   lea 16(sp),sp
	}
}
     d64:	\-> nop
     d66:	    movem.l (sp)+,d2-d5
     d6a:	    rts

00000d6c <pickAnimCursor>:

void pickAnimCursor (struct personaAnimation * pp) {
	deleteAnim (mouseCursorAnim);
     d6c:	move.l 1c8d0 <mouseCursorAnim>,d0
     d72:	move.l d0,-(sp)
     d74:	jsr 9926 <deleteAnim>
     d7a:	addq.l #4,sp
	mouseCursorAnim = pp;
     d7c:	move.l 4(sp),1c8d0 <mouseCursorAnim>
	mouseCursorFrameNum = 0;
     d84:	clr.l 1c8d4 <mouseCursorFrameNum>
	mouseCursorCountUp = 0;
     d8a:	clr.l 1c8d8 <mouseCursorCountUp>
}
     d90:	nop
     d92:	rts

00000d94 <pasteCursor>:

void pasteCursor (int x, int y, struct personaAnimation * c) {
     d94:	subq.l #8,sp

				//int fNumSign = myAnim -> frames[thisPerson -> frameNum].frameNum;
	
	struct sprite *spritetouse = &c->theSprites->bank.sprites[c->frames[0].frameNum];
     d96:	movea.l 20(sp),a0
     d9a:	movea.l (a0),a0
     d9c:	movea.l 16(a0),a0
     da0:	movea.l 20(sp),a1
     da4:	movea.l 4(a1),a1
     da8:	move.l (a1),d0
     daa:	move.l d0,d1
     dac:	move.l d1,d0
     dae:	lsl.l #3,d0
     db0:	sub.l d1,d0
     db2:	add.l d0,d0
     db4:	add.l d0,d0
     db6:	adda.l d0,a0
     db8:	move.l a0,4(sp)

	UWORD absx =  x - spritetouse->xhot;
     dbc:	move.l 12(sp),d0
     dc0:	movea.l 4(sp),a0
     dc4:	move.l 8(a0),d1
     dc8:	move.l d1,d1
     dca:	movea.w d0,a0
     dcc:	suba.w d1,a0
     dce:	move.w a0,2(sp)
	UWORD absy =  y - spritetouse->yhot;
     dd2:	move.l 16(sp),d0
     dd6:	movea.l 4(sp),a0
     dda:	move.l 12(a0),d1
     dde:	move.l d1,d1
     de0:	movea.w d0,a0
     de2:	suba.w d1,a0
     de4:	move.w a0,(sp)

	CstScaleSprite( spritetouse, (struct onScreenPerson *) NULL, absx, absy, BACKDROP);
     de6:	move.w (sp),d0
     de8:	movea.w d0,a1
     dea:	move.w 2(sp),d0
     dee:	movea.w d0,a0
     df0:	pea 2 <_start+0x2>
     df4:	move.l a1,-(sp)
     df6:	move.l a0,-(sp)
     df8:	clr.l -(sp)
     dfa:	move.l 20(sp),-(sp)
     dfe:	jsr 2d50 <CstScaleSprite>
     e04:	lea 20(sp),sp
     e08:	nop
     e0a:	addq.l #8,sp
     e0c:	rts

00000e0e <CstBlankScreen>:
    0x1900000, 0x1920000, 0x1940000, 0x1960000, 0x1980000, 0x19a0000, 0x19c0000, 0x19e0000,
    0x1a00000, 0x1a20000, 0x1a40000, 0x1a60000, 0x1a80000, 0x1aa0000, 0x1ac0000, 0x1ae0000,
    0x1b00000, 0x1b20000, 0x1b40000, 0x1b60000, 0x1b80000, 0x1ba0000, 0x1bc0000, 0x1be0000 
};

void CstBlankScreen( int width, int height) {
     e0e:	          lea -16(sp),sp
     e12:	          move.l a6,-(sp)

  KPrintF("CstBlankScreen: started\n");
     e14:	          pea 17d90 <PutChar+0x72>
     e1a:	          jsr 17254 <KPrintF>
     e20:	          addq.l #4,sp

  if( !CstBackDrop) {
     e22:	          move.l 1c8ec <CstBackDrop>,d0
     e28:	      /-- bne.s e3c <CstBlankScreen+0x2e>
    KPrintF("CstBlankScreen: Backdrop empty nothing to do\n");
     e2a:	      |   pea 17da9 <PutChar+0x8b>
     e30:	      |   jsr 17254 <KPrintF>
     e36:	      |   addq.l #4,sp
    return;
     e38:	/-----|-- bra.w fc6 <CstBlankScreen+0x1b8>
  }

  CstPaletteLoaded = 0;
     e3c:	|     \-> clr.w 1c8e6 <CstPaletteLoaded>

  volatile struct Custom *custom = (struct Custom*)0xdff000;
     e42:	|         move.l #14675968,8(sp)

  width /= 16;
     e4a:	|         move.l 24(sp),d0
     e4e:	|         movea.l d0,a0
     e50:	|         cmpa.w #0,a0
     e54:	|     /-- bge.s e5a <CstBlankScreen+0x4c>
     e56:	|     |   lea 15(a0),a0
     e5a:	|     \-> move.l a0,d0
     e5c:	|         asr.l #4,d0
     e5e:	|         move.l d0,24(sp)

  WaitBlit();
     e62:	|         move.l 1c9d6 <GfxBase>,d0
     e68:	|         movea.l d0,a6
     e6a:	|         jsr -228(a6)

  //Both Buffers need to be done
  custom->bltafwm = 0xffff;
     e6e:	|         movea.l 8(sp),a0
     e72:	|         move.w #-1,68(a0)
  custom->bltalwm = 0xffff;
     e78:	|         movea.l 8(sp),a0
     e7c:	|         move.w #-1,70(a0)
  custom->bltamod = 0;
     e82:	|         movea.l 8(sp),a0
     e86:	|         move.w #0,100(a0)
  custom->bltbmod = 0;
     e8c:	|         movea.l 8(sp),a0
     e90:	|         move.w #0,98(a0)
  custom->bltcmod = 0;
     e96:	|         movea.l 8(sp),a0
     e9a:	|         move.w #0,96(a0)
  custom->bltdmod = 0;
     ea0:	|         movea.l 8(sp),a0
     ea4:	|         move.w #0,102(a0)
  custom->bltcon1 = 0;
     eaa:	|         movea.l 8(sp),a0
     eae:	|         move.w #0,66(a0)
  custom->bltcon0 = 0x0100;
     eb4:	|         movea.l 8(sp),a0
     eb8:	|         move.w #256,64(a0)
  ULONG bltdpt = (ULONG) CstBackDrop;
     ebe:	|         move.l 1c8ec <CstBackDrop>,d0
     ec4:	|         move.l d0,16(sp)
  UWORD bltsize = height*64+width;    
     ec8:	|         move.l 28(sp),d0
     ecc:	|         lsl.w #6,d0
     ece:	|         move.l 24(sp),d1
     ed2:	|         movea.w d0,a0
     ed4:	|         adda.w d1,a0
     ed6:	|         move.w a0,6(sp)
  UWORD blitsize = width*height*2;
     eda:	|         move.l 24(sp),d1
     ede:	|         move.l 28(sp),d0
     ee2:	|         muls.w d1,d0
     ee4:	|         add.w d0,d0
     ee6:	|         move.w d0,4(sp)

  KPrintF("CstBlankScreen: Starting Blits\n");
     eea:	|         pea 17dd7 <PutChar+0xb9>
     ef0:	|         jsr 17254 <KPrintF>
     ef6:	|         addq.l #4,sp

  for(int i2=0;i2<5;i2++)
     ef8:	|         clr.l 12(sp)
     efc:	|     /-- bra.s f2e <CstBlankScreen+0x120>
  {            
    custom->bltdpt = (APTR) bltdpt;
     efe:	|  /--|-> move.l 16(sp),d0
     f02:	|  |  |   movea.l 8(sp),a0
     f06:	|  |  |   move.l d0,84(a0)
    custom->bltsize = bltsize;            
     f0a:	|  |  |   movea.l 8(sp),a0
     f0e:	|  |  |   move.w 6(sp),88(a0)
    WaitBlit();
     f14:	|  |  |   move.l 1c9d6 <GfxBase>,d0
     f1a:	|  |  |   movea.l d0,a6
     f1c:	|  |  |   jsr -228(a6)
    bltdpt += blitsize;
     f20:	|  |  |   moveq #0,d0
     f22:	|  |  |   move.w 4(sp),d0
     f26:	|  |  |   add.l d0,16(sp)
  for(int i2=0;i2<5;i2++)
     f2a:	|  |  |   addq.l #1,12(sp)
     f2e:	|  |  \-> moveq #4,d0
     f30:	|  |      cmp.l 12(sp),d0
     f34:	|  \----- bge.s efe <CstBlankScreen+0xf0>
  }

  KPrintF("CstBlankScreen: Finished Blits\n");
     f36:	|         pea 17df7 <PutChar+0xd9>
     f3c:	|         jsr 17254 <KPrintF>
     f42:	|         addq.l #4,sp

  CstApplyBackDropCounter = 2;
     f44:	|         move.w #2,1c8f8 <CstApplyBackDropCounter>

  *CstBackDropBufferApplyCursor++ = winWidth/16;
     f4c:	|         move.l 1c91e <winWidth>,d0
     f52:	|         lsr.l #4,d0
     f54:	|         movea.l 1c90e <CstBackDropBufferApplyCursor>,a0
     f5a:	|         move.l a0,d1
     f5c:	|         addq.l #2,d1
     f5e:	|         move.l d1,1c90e <CstBackDropBufferApplyCursor>
     f64:	|         move.l d0,d0
     f66:	|         move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = winHeight;
     f68:	|         move.l 1c922 <winHeight>,d0
     f6e:	|         movea.l 1c90e <CstBackDropBufferApplyCursor>,a0
     f74:	|         move.l a0,d1
     f76:	|         addq.l #2,d1
     f78:	|         move.l d1,1c90e <CstBackDropBufferApplyCursor>
     f7e:	|         move.l d0,d0
     f80:	|         move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = 0;
     f82:	|         movea.l 1c90e <CstBackDropBufferApplyCursor>,a0
     f88:	|         move.l a0,d0
     f8a:	|         addq.l #2,d0
     f8c:	|         move.l d0,1c90e <CstBackDropBufferApplyCursor>
     f92:	|         clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
     f94:	|         movea.l 1c90e <CstBackDropBufferApplyCursor>,a0
     f9a:	|         move.l a0,d0
     f9c:	|         addq.l #2,d0
     f9e:	|         move.l d0,1c90e <CstBackDropBufferApplyCursor>
     fa4:	|         clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
     fa6:	|         movea.l 1c90e <CstBackDropBufferApplyCursor>,a0
     fac:	|         move.l a0,d0
     fae:	|         addq.l #2,d0
     fb0:	|         move.l d0,1c90e <CstBackDropBufferApplyCursor>
     fb6:	|         clr.w (a0)

  KPrintF("CstBlankScreen: end\n");
     fb8:	|         pea 17e17 <PutChar+0xf9>
     fbe:	|         jsr 17254 <KPrintF>
     fc4:	|         addq.l #4,sp


}
     fc6:	\-------> movea.l (sp)+,a6
     fc8:	          lea 16(sp),sp
     fcc:	          rts

00000fce <CstCreateCopperlist>:

UWORD * CstCreateCopperlist( int width) {
     fce:	       lea -52(sp),sp
     fd2:	       move.l a6,-(sp)
     fd4:	       move.l d2,-(sp)
  
  ULONG *retval = AllocMem(  CSTCOPSIZE, MEMF_CHIP);
     fd6:	       move.l #400,32(sp)
     fde:	       moveq #2,d0
     fe0:	       move.l d0,28(sp)
     fe4:	       move.l 1c9ca <SysBase>,d0
     fea:	       movea.l d0,a6
     fec:	       move.l 32(sp),d0
     ff0:	       move.l 28(sp),d1
     ff4:	       jsr -198(a6)
     ff8:	       move.l d0,24(sp)
     ffc:	       move.l 24(sp),d0
    1000:	       move.l d0,20(sp)
  
  if( retval == 0) {
    1004:	   /-- bne.s 102e <CstCreateCopperlist+0x60>
    KPrintF("CstCreateCopperlist: Allocation of Ram for Copper failed.\n", 40);
    1006:	   |   pea 28 <_start+0x28>
    100a:	   |   pea 17e2c <PutChar+0x10e>
    1010:	   |   jsr 17254 <KPrintF>
    1016:	   |   addq.l #8,sp
    Exit(1);
    1018:	   |   moveq #1,d1
    101a:	   |   move.l d1,16(sp)
    101e:	   |   move.l 1c9d2 <DOSBase>,d0
    1024:	   |   movea.l d0,a6
    1026:	   |   move.l 16(sp),d1
    102a:	   |   jsr -144(a6)
  }
  ULONG *cl = retval;
    102e:	   \-> move.l 20(sp),56(sp)
  CstClCursor = (UWORD *)cl;
    1034:	       move.l 56(sp),1c91a <CstClCursor>

  ULONG *clpartinstruction;
  clpartinstruction = CstClSprites;
    103c:	       move.l #115240,52(sp)
  for(int i=0; i<16;i++)
    1044:	       clr.l 48(sp)
    1048:	   /-- bra.s 106e <CstCreateCopperlist+0xa0>
    *cl++ = *clpartinstruction++;
    104a:	/--|-> move.l 52(sp),d1
    104e:	|  |   move.l d1,d2
    1050:	|  |   addq.l #4,d2
    1052:	|  |   move.l d2,52(sp)
    1056:	|  |   move.l 56(sp),d0
    105a:	|  |   move.l d0,d2
    105c:	|  |   addq.l #4,d2
    105e:	|  |   move.l d2,56(sp)
    1062:	|  |   movea.l d1,a0
    1064:	|  |   move.l (a0),d1
    1066:	|  |   movea.l d0,a0
    1068:	|  |   move.l d1,(a0)
  for(int i=0; i<16;i++)
    106a:	|  |   addq.l #1,48(sp)
    106e:	|  \-> moveq #15,d0
    1070:	|      cmp.l 48(sp),d0
    1074:	\----- bge.s 104a <CstCreateCopperlist+0x7c>

  clpartinstruction = CstClScreen;
    1076:	       move.l #115304,52(sp)

  for(int i=0; i<12;i++)
    107e:	       clr.l 44(sp)
    1082:	   /-- bra.s 10a8 <CstCreateCopperlist+0xda>
    *cl++ = *clpartinstruction++;
    1084:	/--|-> move.l 52(sp),d1
    1088:	|  |   move.l d1,d2
    108a:	|  |   addq.l #4,d2
    108c:	|  |   move.l d2,52(sp)
    1090:	|  |   move.l 56(sp),d0
    1094:	|  |   move.l d0,d2
    1096:	|  |   addq.l #4,d2
    1098:	|  |   move.l d2,56(sp)
    109c:	|  |   movea.l d1,a0
    109e:	|  |   move.l (a0),d1
    10a0:	|  |   movea.l d0,a0
    10a2:	|  |   move.l d1,(a0)
  for(int i=0; i<12;i++)
    10a4:	|  |   addq.l #1,44(sp)
    10a8:	|  \-> moveq #11,d0
    10aa:	|      cmp.l 44(sp),d0
    10ae:	\----- bge.s 1084 <CstCreateCopperlist+0xb6>

  clpartinstruction = CstClBitplanes;
    10b0:	       move.l #115352,52(sp)
  for(int i=0; i<10;i++)
    10b8:	       clr.l 40(sp)
    10bc:	   /-- bra.s 10e2 <CstCreateCopperlist+0x114>
    *cl++ = *clpartinstruction++;        
    10be:	/--|-> move.l 52(sp),d1
    10c2:	|  |   move.l d1,d2
    10c4:	|  |   addq.l #4,d2
    10c6:	|  |   move.l d2,52(sp)
    10ca:	|  |   move.l 56(sp),d0
    10ce:	|  |   move.l d0,d2
    10d0:	|  |   addq.l #4,d2
    10d2:	|  |   move.l d2,56(sp)
    10d6:	|  |   movea.l d1,a0
    10d8:	|  |   move.l (a0),d1
    10da:	|  |   movea.l d0,a0
    10dc:	|  |   move.l d1,(a0)
  for(int i=0; i<10;i++)
    10de:	|  |   addq.l #1,40(sp)
    10e2:	|  \-> moveq #9,d0
    10e4:	|      cmp.l 40(sp),d0
    10e8:	\----- bge.s 10be <CstCreateCopperlist+0xf0>

  
  clpartinstruction = CstClColorTemplate;
    10ea:	       move.l #115392,52(sp)
  CstClColor = (UWORD *) cl;
    10f2:	       move.l 56(sp),1c912 <CstClColor>
  for(int i=0; i<32;i++)
    10fa:	       clr.l 36(sp)
    10fe:	   /-- bra.s 1124 <CstCreateCopperlist+0x156>
    *cl++ = *clpartinstruction++;        
    1100:	/--|-> move.l 52(sp),d1
    1104:	|  |   move.l d1,d2
    1106:	|  |   addq.l #4,d2
    1108:	|  |   move.l d2,52(sp)
    110c:	|  |   move.l 56(sp),d0
    1110:	|  |   move.l d0,d2
    1112:	|  |   addq.l #4,d2
    1114:	|  |   move.l d2,56(sp)
    1118:	|  |   movea.l d1,a0
    111a:	|  |   move.l (a0),d1
    111c:	|  |   movea.l d0,a0
    111e:	|  |   move.l d1,(a0)
  for(int i=0; i<32;i++)
    1120:	|  |   addq.l #1,36(sp)
    1124:	|  \-> moveq #31,d0
    1126:	|      cmp.l 36(sp),d0
    112a:	\----- bge.s 1100 <CstCreateCopperlist+0x132>
 
  /* Screen is bigger than real screen? Setup BPLxMod accordingly*/
  if(width > 40) {
    112c:	       moveq #40,d1
    112e:	       cmp.l 64(sp),d1
    1132:	   /-- bge.s 1190 <CstCreateCopperlist+0x1c2>
    int tmp = width - 40;
    1134:	   |   moveq #-40,d2
    1136:	   |   add.l 64(sp),d2
    113a:	   |   move.l d2,12(sp)
    UWORD *cw = (UWORD *) cl; 
    113e:	   |   move.l 56(sp),8(sp)
    *cw++ = 0x108;
    1144:	   |   move.l 8(sp),d0
    1148:	   |   move.l d0,d1
    114a:	   |   addq.l #2,d1
    114c:	   |   move.l d1,8(sp)
    1150:	   |   movea.l d0,a0
    1152:	   |   move.w #264,(a0)
    *cw++ = tmp;
    1156:	   |   move.l 8(sp),d0
    115a:	   |   move.l d0,d1
    115c:	   |   addq.l #2,d1
    115e:	   |   move.l d1,8(sp)
    1162:	   |   move.l 12(sp),d1
    1166:	   |   movea.l d0,a0
    1168:	   |   move.w d1,(a0)
    *cw++ = 0x10a;
    116a:	   |   move.l 8(sp),d0
    116e:	   |   move.l d0,d1
    1170:	   |   addq.l #2,d1
    1172:	   |   move.l d1,8(sp)
    1176:	   |   movea.l d0,a0
    1178:	   |   move.w #266,(a0)
    *cw++ = tmp;     
    117c:	   |   move.l 8(sp),d0
    1180:	   |   move.l d0,d1
    1182:	   |   addq.l #2,d1
    1184:	   |   move.l d1,8(sp)
    1188:	   |   move.l 12(sp),d1
    118c:	   |   movea.l d0,a0
    118e:	   |   move.w d1,(a0)
  }

  *cl++ = 0xfffffffe;
    1190:	   \-> move.l 56(sp),d0
    1194:	       move.l d0,d1
    1196:	       addq.l #4,d1
    1198:	       move.l d1,56(sp)
    119c:	       moveq #-2,d2
    119e:	       movea.l d0,a0
    11a0:	       move.l d2,(a0)
  return (UWORD *) retval;  
    11a2:	       move.l 20(sp),d0
}
    11a6:	       move.l (sp)+,d2
    11a8:	       movea.l (sp)+,a6
    11aa:	       lea 52(sp),sp
    11ae:	       rts

000011b0 <CstDisplayBackDrop>:

void CstDisplayBackDrop() 
{
    11b0:	                lea -40(sp),sp
    11b4:	                move.l a6,-(sp)
    11b6:	                move.l d2,-(sp)
 volatile struct Custom *custom = (struct Custom*)0xdff000;  
    11b8:	                move.l #14675968,16(sp)

  KPrintF("CstDisplayBackDrop: Started");
    11c0:	                pea 17e67 <PutChar+0x149>
    11c6:	                jsr 17254 <KPrintF>
    11cc:	                addq.l #4,sp

  CstBackDropBufferApplyCursor = CstBackDropBufferApplyStart;
    11ce:	                move.l 1c90a <CstBackDropBufferApplyStart>,d0
    11d4:	                move.l d0,1c90e <CstBackDropBufferApplyCursor>
  UWORD *cursor = CstBackDropBufferApplyStart;
    11da:	                move.l 1c90a <CstBackDropBufferApplyStart>,44(sp)
  if(!*cursor || !CstDrawBuffer) {
    11e2:	                movea.l 44(sp),a0
    11e6:	                move.w (a0),d0
    11e8:	/-------------- beq.w 13e2 <CstDisplayBackDrop+0x232>
    11ec:	|               move.l 1c8fe <CstDrawBuffer>,d0
    11f2:	+-------------- beq.w 13e2 <CstDisplayBackDrop+0x232>
    return;
  } 

  WaitBlit();
    11f6:	|               move.l 1c9d6 <GfxBase>,d0
    11fc:	|               movea.l d0,a6
    11fe:	|               jsr -228(a6)
  
  custom->bltafwm = 0xffff;
    1202:	|               movea.l 16(sp),a0
    1206:	|               move.w #-1,68(a0)
  custom->bltalwm = 0xffff;  
    120c:	|               movea.l 16(sp),a0
    1210:	|               move.w #-1,70(a0)
  custom->bltcon0 = 0x9f0;
    1216:	|               movea.l 16(sp),a0
    121a:	|               move.w #2544,64(a0)
  
  while(*cursor)
    1220:	|     /-------- bra.w 1388 <CstDisplayBackDrop+0x1d8>
  {    
    UWORD width = *cursor++;
    1224:	|  /--|-------> move.l 44(sp),d0
    1228:	|  |  |         move.l d0,d1
    122a:	|  |  |         addq.l #2,d1
    122c:	|  |  |         move.l d1,44(sp)
    1230:	|  |  |         movea.l d0,a0
    1232:	|  |  |         move.w (a0),14(sp)
    UWORD height = *cursor++;
    1236:	|  |  |         move.l 44(sp),d0
    123a:	|  |  |         move.l d0,d1
    123c:	|  |  |         addq.l #2,d1
    123e:	|  |  |         move.l d1,44(sp)
    1242:	|  |  |         movea.l d0,a0
    1244:	|  |  |         move.w (a0),12(sp)
    UWORD xpos = *cursor++;
    1248:	|  |  |         move.l 44(sp),d0
    124c:	|  |  |         move.l d0,d1
    124e:	|  |  |         addq.l #2,d1
    1250:	|  |  |         move.l d1,44(sp)
    1254:	|  |  |         movea.l d0,a0
    1256:	|  |  |         move.w (a0),10(sp)
    UWORD ypos = *cursor++;
    125a:	|  |  |         move.l 44(sp),d0
    125e:	|  |  |         move.l d0,d1
    1260:	|  |  |         addq.l #2,d1
    1262:	|  |  |         move.l d1,44(sp)
    1266:	|  |  |         movea.l d0,a0
    1268:	|  |  |         move.w (a0),8(sp)

    custom->bltamod = winWidth/8-width*2;
    126c:	|  |  |         move.l 1c91e <winWidth>,d0
    1272:	|  |  |         lsr.l #3,d0
    1274:	|  |  |         move.l d0,d1
    1276:	|  |  |         move.w 14(sp),d0
    127a:	|  |  |         add.w d0,d0
    127c:	|  |  |         sub.w d0,d1
    127e:	|  |  |         movea.l 16(sp),a0
    1282:	|  |  |         move.w d1,100(a0)
    custom->bltdmod = winWidth/8-width*2;
    1286:	|  |  |         move.l 1c91e <winWidth>,d0
    128c:	|  |  |         lsr.l #3,d0
    128e:	|  |  |         move.l d0,d1
    1290:	|  |  |         move.w 14(sp),d0
    1294:	|  |  |         add.w d0,d0
    1296:	|  |  |         sub.w d0,d1
    1298:	|  |  |         movea.l 16(sp),a0
    129c:	|  |  |         move.w d1,102(a0)
    ULONG bltapt = ((ULONG) CstBackDrop) + ypos*winWidth/8 + xpos;
    12a0:	|  |  |         moveq #0,d0
    12a2:	|  |  |         move.w 8(sp),d0
    12a6:	|  |  |         move.l 1c91e <winWidth>,d1
    12ac:	|  |  |         move.l d1,-(sp)
    12ae:	|  |  |         move.l d0,-(sp)
    12b0:	|  |  |         jsr 17c08 <__mulsi3>
    12b6:	|  |  |         addq.l #8,sp
    12b8:	|  |  |         move.l d0,d1
    12ba:	|  |  |         lsr.l #3,d1
    12bc:	|  |  |         move.l 1c8ec <CstBackDrop>,d0
    12c2:	|  |  |         add.l d0,d1
    12c4:	|  |  |         moveq #0,d0
    12c6:	|  |  |         move.w 10(sp),d0
    12ca:	|  |  |         move.l d1,d2
    12cc:	|  |  |         add.l d0,d2
    12ce:	|  |  |         move.l d2,40(sp)
    ULONG bltdpt = ((ULONG) CstDrawBuffer) + ypos*winWidth/8 + xpos;
    12d2:	|  |  |         moveq #0,d0
    12d4:	|  |  |         move.w 8(sp),d0
    12d8:	|  |  |         move.l 1c91e <winWidth>,d1
    12de:	|  |  |         move.l d1,-(sp)
    12e0:	|  |  |         move.l d0,-(sp)
    12e2:	|  |  |         jsr 17c08 <__mulsi3>
    12e8:	|  |  |         addq.l #8,sp
    12ea:	|  |  |         move.l d0,d1
    12ec:	|  |  |         lsr.l #3,d1
    12ee:	|  |  |         move.l 1c8fe <CstDrawBuffer>,d0
    12f4:	|  |  |         add.l d0,d1
    12f6:	|  |  |         moveq #0,d0
    12f8:	|  |  |         move.w 10(sp),d0
    12fc:	|  |  |         move.l d1,d2
    12fe:	|  |  |         add.l d0,d2
    1300:	|  |  |         move.l d2,36(sp)
    for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    1304:	|  |  |         clr.l 32(sp)
    1308:	|  |  |     /-- bra.s 1380 <CstDisplayBackDrop+0x1d0>
    {
      custom->bltapt = (APTR) bltapt;
    130a:	|  |  |  /--|-> move.l 40(sp),d0
    130e:	|  |  |  |  |   movea.l 16(sp),a0
    1312:	|  |  |  |  |   move.l d0,80(a0)
      custom->bltdpt = (APTR) bltdpt;
    1316:	|  |  |  |  |   move.l 36(sp),d0
    131a:	|  |  |  |  |   movea.l 16(sp),a0
    131e:	|  |  |  |  |   move.l d0,84(a0)
      custom->bltsize = (height << 6) + width;
    1322:	|  |  |  |  |   move.w 12(sp),d0
    1326:	|  |  |  |  |   lsl.w #6,d0
    1328:	|  |  |  |  |   add.w 14(sp),d0
    132c:	|  |  |  |  |   movea.l 16(sp),a0
    1330:	|  |  |  |  |   move.w d0,88(a0)
      bltapt += winWidth/8*winHeight;
    1334:	|  |  |  |  |   move.l 1c91e <winWidth>,d0
    133a:	|  |  |  |  |   lsr.l #3,d0
    133c:	|  |  |  |  |   move.l 1c922 <winHeight>,d1
    1342:	|  |  |  |  |   move.l d1,-(sp)
    1344:	|  |  |  |  |   move.l d0,-(sp)
    1346:	|  |  |  |  |   jsr 17c08 <__mulsi3>
    134c:	|  |  |  |  |   addq.l #8,sp
    134e:	|  |  |  |  |   add.l d0,40(sp)
      bltdpt += winWidth/8*winHeight;
    1352:	|  |  |  |  |   move.l 1c91e <winWidth>,d0
    1358:	|  |  |  |  |   lsr.l #3,d0
    135a:	|  |  |  |  |   move.l 1c922 <winHeight>,d1
    1360:	|  |  |  |  |   move.l d1,-(sp)
    1362:	|  |  |  |  |   move.l d0,-(sp)
    1364:	|  |  |  |  |   jsr 17c08 <__mulsi3>
    136a:	|  |  |  |  |   addq.l #8,sp
    136c:	|  |  |  |  |   add.l d0,36(sp)
      WaitBlit();
    1370:	|  |  |  |  |   move.l 1c9d6 <GfxBase>,d0
    1376:	|  |  |  |  |   movea.l d0,a6
    1378:	|  |  |  |  |   jsr -228(a6)
    for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    137c:	|  |  |  |  |   addq.l #1,32(sp)
    1380:	|  |  |  |  \-> moveq #4,d0
    1382:	|  |  |  |      cmp.l 32(sp),d0
    1386:	|  |  |  \----- bge.s 130a <CstDisplayBackDrop+0x15a>
  while(*cursor)
    1388:	|  |  \-------> movea.l 44(sp),a0
    138c:	|  |            move.w (a0),d0
    138e:	|  \----------- bne.w 1224 <CstDisplayBackDrop+0x74>
    }  
  }
  UWORD *colorpos = CstPalette;
    1392:	|               move.l 1c916 <CstPalette>,28(sp)
  
  UWORD *tmp = CstClColor;
    139a:	|               move.l 1c912 <CstClColor>,24(sp)
  for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes
    13a2:	|               clr.l 20(sp)
    13a6:	|           /-- bra.s 13d8 <CstDisplayBackDrop+0x228>
    *tmp++;
    13a8:	|        /--|-> move.l 24(sp),d0
    13ac:	|        |  |   move.l d0,d1
    13ae:	|        |  |   addq.l #2,d1
    13b0:	|        |  |   move.l d1,24(sp)
    *tmp++ = *colorpos++;
    13b4:	|        |  |   move.l 28(sp),d1
    13b8:	|        |  |   move.l d1,d2
    13ba:	|        |  |   addq.l #2,d2
    13bc:	|        |  |   move.l d2,28(sp)
    13c0:	|        |  |   move.l 24(sp),d0
    13c4:	|        |  |   move.l d0,d2
    13c6:	|        |  |   addq.l #2,d2
    13c8:	|        |  |   move.l d2,24(sp)
    13cc:	|        |  |   movea.l d1,a0
    13ce:	|        |  |   move.w (a0),d1
    13d0:	|        |  |   movea.l d0,a0
    13d2:	|        |  |   move.w d1,(a0)
  for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes
    13d4:	|        |  |   addq.l #1,20(sp)
    13d8:	|        |  \-> moveq #31,d0
    13da:	|        |      cmp.l 20(sp),d0
    13de:	|        \----- bge.s 13a8 <CstDisplayBackDrop+0x1f8>
    13e0:	|           /-- bra.s 13e4 <CstDisplayBackDrop+0x234>
    return;
    13e2:	\-----------|-> nop
  }
}
    13e4:	            \-> move.l (sp)+,d2
    13e6:	                movea.l (sp)+,a6
    13e8:	                lea 40(sp),sp
    13ec:	                rts

000013ee <CstDisplayCursor>:

void CstDisplayCursor(UWORD x, UWORD y, UWORD height, UBYTE *spritedata)
{
    13ee:	lea -20(sp),sp
    13f2:	movea.l 24(sp),a0
    13f6:	move.l 28(sp),d1
    13fa:	move.l 32(sp),d0
    13fe:	movea.w a0,a0
    1400:	move.w a0,4(sp)
    1404:	move.w d1,d1
    1406:	move.w d1,2(sp)
    140a:	move.w d0,d0
    140c:	move.w d0,(sp)
  spritedata[0] = (UBYTE) (y & 0xff); //Low 8 Bits of y
    140e:	move.w 2(sp),d0
    1412:	movea.l 36(sp),a0
    1416:	move.b d0,(a0)
  spritedata[1] = (UBYTE) (x >> 1); //High 8 Bits of x
    1418:	move.w 4(sp),d0
    141c:	lsr.w #1,d0
    141e:	movea.l 36(sp),a0
    1422:	addq.l #1,a0
    1424:	move.l d0,d0
    1426:	move.b d0,(a0)
  spritedata[2] = (UBYTE) (y+height & 0xff); //Sprite Stop Low 8 Bits
    1428:	move.w 2(sp),d1
    142c:	move.w (sp),d0
    142e:	movea.l 36(sp),a0
    1432:	addq.l #2,a0
    1434:	add.b d1,d0
    1436:	move.b d0,(a0)

  UWORD lowbitx = x & 0x1;
    1438:	move.w 4(sp),d0
    143c:	andi.w #1,d0
    1440:	move.w d0,18(sp)
  UWORD vstophighbit = ((y+height) & 0x100) >> 7;
    1444:	move.w 2(sp),d0
    1448:	add.w (sp),d0
    144a:	move.w d0,d0
    144c:	andi.l #65535,d0
    1452:	asr.l #7,d0
    1454:	move.l d0,d0
    1456:	move.w d0,d1
    1458:	andi.w #2,d1
    145c:	move.w d1,16(sp)
  UWORD vstarthighbit = (y & 0x100) >> 6;
    1460:	moveq #0,d0
    1462:	move.w 2(sp),d0
    1466:	asr.l #6,d0
    1468:	move.l d0,d0
    146a:	move.w d0,d1
    146c:	andi.w #4,d1
    1470:	move.w d1,14(sp)

  spritedata[3] = lowbitx + vstophighbit + vstarthighbit; //Low Bit X, Sprite Stop High Bit
    1474:	move.w 18(sp),d1
    1478:	move.w 16(sp),d0
    147c:	add.b d0,d1
    147e:	move.w 14(sp),d0
    1482:	movea.l 36(sp),a0
    1486:	addq.l #3,a0
    1488:	add.b d1,d0
    148a:	move.b d0,(a0)

  ULONG ptr = (ULONG) spritedata; 
    148c:	move.l 36(sp),10(sp)
  UWORD loptr = (UWORD) ptr & 0xffff;
    1492:	move.w 12(sp),8(sp)
  UWORD hiptr = ptr >> 16;
    1498:	move.l 10(sp),d0
    149c:	clr.w d0
    149e:	swap d0
    14a0:	move.w d0,6(sp)

  CstClCursor[1] = hiptr;
    14a4:	move.l 1c91a <CstClCursor>,d0
    14aa:	movea.l d0,a0
    14ac:	addq.l #2,a0
    14ae:	move.w 6(sp),(a0)
  CstClCursor[3] = loptr;
    14b2:	move.l 1c91a <CstClCursor>,d0
    14b8:	movea.l d0,a0
    14ba:	addq.l #6,a0
    14bc:	move.w 8(sp),(a0)

}
    14c0:	nop
    14c2:	lea 20(sp),sp
    14c6:	rts

000014c8 <CstDrawBackdrop>:

void CstDrawBackdrop() {  
  if(CstApplyBackDropCounter > 0) 
    14c8:	    move.w 1c8f8 <CstApplyBackDropCounter>,d0
    14ce:	/-- beq.s 14e4 <CstDrawBackdrop+0x1c>
  {
    CstDisplayBackDrop();
    14d0:	|   jsr 11b0 <CstDisplayBackDrop>
    CstApplyBackDropCounter--;
    14d6:	|   move.w 1c8f8 <CstApplyBackDropCounter>,d0
    14dc:	|   subq.w #1,d0
    14de:	|   move.w d0,1c8f8 <CstApplyBackDropCounter>
  }    
}
    14e4:	\-> nop
    14e6:	    rts

000014e8 <CstDrawZBuffer>:

UBYTE *CstDrawZBuffer( struct sprite *sprite, struct zBufferData *zbuffer, UWORD x, UWORD y) 
{
    14e8:	                         lea -88(sp),sp
    14ec:	                         move.l a6,-(sp)
    14ee:	                         move.l d2,-(sp)
    14f0:	                         move.l 108(sp),d1
    14f4:	                         move.l 112(sp),d0
    14f8:	                         move.w d1,d1
    14fa:	                         move.w d1,10(sp)
    14fe:	                         move.w d0,d0
    1500:	                         move.w d0,8(sp)
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    1504:	                         move.l #14675968,74(sp)
  //In Case nothing needs to be done return sprite mask without changes
  UBYTE *returnvalue = AllocVec( sprite->width/8*sprite->height, MEMF_CHIP); 
    150c:	                         movea.l 100(sp),a0
    1510:	                         move.l (a0),d0
    1512:	                     /-- bpl.s 1516 <CstDrawZBuffer+0x2e>
    1514:	                     |   addq.l #7,d0
    1516:	                     \-> asr.l #3,d0
    1518:	                         movea.l 100(sp),a0
    151c:	                         move.l 4(a0),d1
    1520:	                         move.l d1,-(sp)
    1522:	                         move.l d0,-(sp)
    1524:	                         jsr 17c08 <__mulsi3>
    152a:	                         addq.l #8,sp
    152c:	                         move.l d0,70(sp)
    1530:	                         moveq #2,d0
    1532:	                         move.l d0,66(sp)
    1536:	                         move.l 1c9ca <SysBase>,d0
    153c:	                         movea.l d0,a6
    153e:	                         move.l 70(sp),d0
    1542:	                         move.l 66(sp),d1
    1546:	                         jsr -684(a6)
    154a:	                         move.l d0,62(sp)
    154e:	                         move.l 62(sp),d0
    1552:	                         move.l d0,58(sp)
  UBYTE *tmpbuffer = AllocVec( (sprite->width/8+2)*sprite->height, MEMF_CHIP);               
    1556:	                         movea.l 100(sp),a0
    155a:	                         move.l (a0),d0
    155c:	                     /-- bpl.s 1560 <CstDrawZBuffer+0x78>
    155e:	                     |   addq.l #7,d0
    1560:	                     \-> asr.l #3,d0
    1562:	                         move.l d0,d1
    1564:	                         addq.l #2,d1
    1566:	                         movea.l 100(sp),a0
    156a:	                         move.l 4(a0),d0
    156e:	                         move.l d0,-(sp)
    1570:	                         move.l d1,-(sp)
    1572:	                         jsr 17c08 <__mulsi3>
    1578:	                         addq.l #8,sp
    157a:	                         move.l d0,54(sp)
    157e:	                         moveq #2,d1
    1580:	                         move.l d1,50(sp)
    1584:	                         move.l 1c9ca <SysBase>,d0
    158a:	                         movea.l d0,a6
    158c:	                         move.l 54(sp),d0
    1590:	                         move.l 50(sp),d1
    1594:	                         jsr -684(a6)
    1598:	                         move.l d0,46(sp)
    159c:	                         move.l 46(sp),d0
    15a0:	                         move.l d0,42(sp)
  WORD zbufferset = 0;
    15a4:	                         clr.w 94(sp)

  #ifdef EMULATOR
    debug_register_bitmap(returnvalue, "SpriteMask", sprite->width, sprite->height, 1, 0);
    15a8:	                         movea.l 100(sp),a0
    15ac:	                         move.l 4(a0),d0
    15b0:	                         move.l d0,d0
    15b2:	                         movea.w d0,a1
    15b4:	                         movea.l 100(sp),a0
    15b8:	                         move.l (a0),d0
    15ba:	                         move.l d0,d0
    15bc:	                         movea.w d0,a0
    15be:	                         clr.l -(sp)
    15c0:	                         pea 1 <_start+0x1>
    15c4:	                         move.l a1,-(sp)
    15c6:	                         move.l a0,-(sp)
    15c8:	                         pea 17e83 <PutChar+0x165>
    15ce:	                         move.l 78(sp),-(sp)
    15d2:	                         jsr 1733c <debug_register_bitmap>
    15d8:	                         lea 24(sp),sp
    debug_register_bitmap(tmpbuffer, "tmbpuffer", sprite->width+16, sprite->height, 1, 0);
    15dc:	                         movea.l 100(sp),a0
    15e0:	                         move.l 4(a0),d0
    15e4:	                         move.l d0,d0
    15e6:	                         movea.w d0,a1
    15e8:	                         movea.l 100(sp),a0
    15ec:	                         move.l (a0),d0
    15ee:	                         move.l d0,d0
    15f0:	                         addi.w #16,d0
    15f4:	                         movea.w d0,a0
    15f6:	                         clr.l -(sp)
    15f8:	                         pea 1 <_start+0x1>
    15fc:	                         move.l a1,-(sp)
    15fe:	                         move.l a0,-(sp)
    1600:	                         pea 17e8e <PutChar+0x170>
    1606:	                         move.l 62(sp),-(sp)
    160a:	                         jsr 1733c <debug_register_bitmap>
    1610:	                         lea 24(sp),sp
  #endif    

  while(zbuffer) 
    1614:	   /-------------------- bra.w 1b6e <CstDrawZBuffer+0x686>
  {              
    UWORD spritex1oncanvas = x;
    1618:	/--|-------------------> move.w 10(sp),36(sp)
    UWORD spritex2oncanvas = spritex1oncanvas+sprite->width;
    161e:	|  |                     movea.l 100(sp),a0
    1622:	|  |                     move.l (a0),d0
    1624:	|  |                     move.l d0,d0
    1626:	|  |                     movea.w 36(sp),a0
    162a:	|  |                     adda.w d0,a0
    162c:	|  |                     move.w a0,34(sp)
    UWORD spritey1oncanvas = y;
    1630:	|  |                     move.w 8(sp),32(sp)
    UWORD spritey2oncanvas = spritey1oncanvas + sprite->height;
    1636:	|  |                     movea.l 100(sp),a0
    163a:	|  |                     move.l 4(a0),d0
    163e:	|  |                     move.l d0,d0
    1640:	|  |                     move.w 32(sp),d1
    1644:	|  |                     add.w d0,d1
    1646:	|  |                     move.w d1,30(sp)

    UWORD zbufferx1oncanvas = zbuffer->topx;
    164a:	|  |                     movea.l 104(sp),a0
    164e:	|  |                     move.l 8(a0),d0
    1652:	|  |                     move.w d0,28(sp)
    UWORD zbufferx2oncanvas = zbufferx1oncanvas + zbuffer->width;
    1656:	|  |                     movea.l 104(sp),a0
    165a:	|  |                     move.l (a0),d0
    165c:	|  |                     move.l d0,d0
    165e:	|  |                     movea.w 28(sp),a0
    1662:	|  |                     adda.w d0,a0
    1664:	|  |                     move.w a0,26(sp)

    UWORD zbuffery1oncanvas = zbuffer->topy;
    1668:	|  |                     movea.l 104(sp),a0
    166c:	|  |                     move.l 12(a0),d0
    1670:	|  |                     move.w d0,24(sp)
    UWORD zbuffery2oncanvas = zbuffery1oncanvas + zbuffer->height;
    1674:	|  |                     movea.l 104(sp),a0
    1678:	|  |                     move.l 4(a0),d0
    167c:	|  |                     move.l d0,d0
    167e:	|  |                     move.w 24(sp),d1
    1682:	|  |                     add.w d0,d1
    1684:	|  |                     move.w d1,22(sp)
  
    BOOL zbufferfromright = FALSE;
    1688:	|  |                     clr.w 92(sp)
    BOOL zbufferfromleft = FALSE;
    168c:	|  |                     clr.w 90(sp)
    BOOL zbufferfrombottom = FALSE;
    1690:	|  |                     clr.w 88(sp)
    BOOL zbufferfromtop = FALSE;
    1694:	|  |                     clr.w 86(sp)
  
    //Sprite will be drawn behind the zBuffer. We need to do something
    if(spritey2oncanvas < zbuffer->yz) 
    1698:	|  |                     moveq #0,d0
    169a:	|  |                     move.w 30(sp),d0
    169e:	|  |                     movea.l 104(sp),a0
    16a2:	|  |                     move.l 16(a0),d1
    16a6:	|  |                     cmp.l d0,d1
    16a8:	|  +-------------------- ble.w 1b6e <CstDrawZBuffer+0x686>
    {    
      zbufferset = 1;
    16ac:	|  |                     move.w #1,94(sp)

      //sprite ------------x1+++++++++++++++++++x2-----------------*/
      /*zbuffer-------------------x1++++++++++?????????------------*/      
      if(spritex1oncanvas <= zbufferx1oncanvas && spritex2oncanvas > zbufferx1oncanvas)
    16b2:	|  |                     move.w 28(sp),d0
    16b6:	|  |                     cmp.w 36(sp),d0
    16ba:	|  |                 /-- bcs.s 16ce <CstDrawZBuffer+0x1e6>
    16bc:	|  |                 |   move.w 28(sp),d1
    16c0:	|  |                 |   cmp.w 34(sp),d1
    16c4:	|  |                 +-- bcc.s 16ce <CstDrawZBuffer+0x1e6>
        zbufferfromright = TRUE;
    16c6:	|  |                 |   move.w #1,92(sp)
    16cc:	|  |              /--|-- bra.s 16e8 <CstDrawZBuffer+0x200>
      //sprite -------------------------x1++++??????-------*/
      /*zbuffer-------------------x1+++++++++++x2----------*/  
      else if(spritex1oncanvas > zbufferx1oncanvas && spritex1oncanvas < zbufferx2oncanvas)
    16ce:	|  |              |  \-> move.w 28(sp),d0
    16d2:	|  |              |      cmp.w 36(sp),d0
    16d6:	|  |              +----- bcc.s 16e8 <CstDrawZBuffer+0x200>
    16d8:	|  |              |      move.w 26(sp),d1
    16dc:	|  |              |      cmp.w 36(sp),d1
    16e0:	|  |              +----- bls.s 16e8 <CstDrawZBuffer+0x200>
        zbufferfromleft = TRUE;       
    16e2:	|  |              |      move.w #1,90(sp)

      //Overlap on X-Axis. Now Check y-axis
      if( zbufferfromleft || zbufferfromright)         
    16e8:	|  |              \----> tst.w 90(sp)
    16ec:	|  |                 /-- bne.s 16f4 <CstDrawZBuffer+0x20c>
    16ee:	|  |                 |   tst.w 92(sp)
    16f2:	|  |              /--|-- beq.s 172a <CstDrawZBuffer+0x242>
      {
        if(spritey1oncanvas <= zbuffery1oncanvas && spritey2oncanvas > zbuffery1oncanvas)
    16f4:	|  |              |  \-> move.w 24(sp),d0
    16f8:	|  |              |      cmp.w 32(sp),d0
    16fc:	|  |              |  /-- bcs.s 1710 <CstDrawZBuffer+0x228>
    16fe:	|  |              |  |   move.w 24(sp),d1
    1702:	|  |              |  |   cmp.w 30(sp),d1
    1706:	|  |              |  +-- bcc.s 1710 <CstDrawZBuffer+0x228>
          zbufferfrombottom = TRUE;
    1708:	|  |              |  |   move.w #1,88(sp)
    170e:	|  |              +--|-- bra.s 172a <CstDrawZBuffer+0x242>

        else if(spritey1oncanvas > zbuffery1oncanvas && spritey1oncanvas < zbuffery2oncanvas)
    1710:	|  |              |  \-> move.w 24(sp),d0
    1714:	|  |              |      cmp.w 32(sp),d0
    1718:	|  |              +----- bcc.s 172a <CstDrawZBuffer+0x242>
    171a:	|  |              |      move.w 22(sp),d1
    171e:	|  |              |      cmp.w 32(sp),d1
    1722:	|  |              +----- bls.s 172a <CstDrawZBuffer+0x242>
          zbufferfromtop = TRUE;       
    1724:	|  |              |      move.w #1,86(sp)
      }

      //Overlap on both Axis
      if( (zbufferfromright || zbufferfromleft) && (zbufferfrombottom || zbufferfromtop))
    172a:	|  |              \----> tst.w 92(sp)
    172e:	|  |                 /-- bne.s 1738 <CstDrawZBuffer+0x250>
    1730:	|  |                 |   tst.w 90(sp)
    1734:	|  +-----------------|-- beq.w 1b6e <CstDrawZBuffer+0x686>
    1738:	|  |                 \-> tst.w 88(sp)
    173c:	|  |                 /-- bne.s 1746 <CstDrawZBuffer+0x25e>
    173e:	|  |                 |   tst.w 86(sp)
    1742:	|  +-----------------|-- beq.w 1b6e <CstDrawZBuffer+0x686>

        UWORD xdiff;
        UWORD xdiffbyte;          
        UWORD xdiffrest;
        UWORD bytewidth, width, rest;
        if(zbufferfromright)
    1746:	|  |                 \-> tst.w 92(sp)
    174a:	|  |        /----------- beq.w 1894 <CstDrawZBuffer+0x3ac>
        {        
          //Get Distance R
          /*sprite  ------------x1++++++++++?????????-------------------------*/    
          //zbuffer ------------------x1+++++++++++++++++++x2-----------------*/             
          
          xdiff = spritex1oncanvas - zbufferx1oncanvas;
    174e:	|  |        |            movea.w 36(sp),a0
    1752:	|  |        |            suba.w 28(sp),a0
    1756:	|  |        |            move.w a0,20(sp)
          xdiffbyte = (xdiff / 16) * 2;          
    175a:	|  |        |            move.w 20(sp),d0
    175e:	|  |        |            lsr.w #4,d0
    1760:	|  |        |            add.w d0,d0
    1762:	|  |        |            move.w d0,18(sp)
          xdiffrest = (xdiff - xdiffbyte * 8)*-1;       
    1766:	|  |        |            move.w 18(sp),d0
    176a:	|  |        |            lsl.w #3,d0
    176c:	|  |        |            move.w d0,d1
    176e:	|  |        |            sub.w 20(sp),d1
    1772:	|  |        |            move.w d1,16(sp)
          bytewidth = (sprite->width/16)*2;
    1776:	|  |        |            movea.l 100(sp),a0
    177a:	|  |        |            move.l (a0),d0
    177c:	|  |        |            movea.l d0,a0
    177e:	|  |        |            cmpa.w #0,a0
    1782:	|  |        |        /-- bge.s 1788 <CstDrawZBuffer+0x2a0>
    1784:	|  |        |        |   lea 15(a0),a0
    1788:	|  |        |        \-> move.l a0,d0
    178a:	|  |        |            asr.l #4,d0
    178c:	|  |        |            move.l d0,d0
    178e:	|  |        |            add.w d0,d0
    1790:	|  |        |            move.w d0,80(sp)

          if( zbufferx2oncanvas > spritex2oncanvas)    
    1794:	|  |        |            move.w 34(sp),d0
    1798:	|  |        |            cmp.w 26(sp),d0
    179c:	|  |        |  /-------- bcc.w 1880 <CstDrawZBuffer+0x398>
          {               
            WaitBlit();  
    17a0:	|  |        |  |         move.l 1c9d6 <GfxBase>,d0
    17a6:	|  |        |  |         movea.l d0,a6
    17a8:	|  |        |  |         jsr -228(a6)
          
            custom->bltafwm = 0xffff;
    17ac:	|  |        |  |         movea.l 74(sp),a0
    17b0:	|  |        |  |         move.w #-1,68(a0)
            custom->bltalwm = 0xffff;          
    17b6:	|  |        |  |         movea.l 74(sp),a0
    17ba:	|  |        |  |         move.w #-1,70(a0)
            custom->bltdpt = tmpbuffer;        
    17c0:	|  |        |  |         movea.l 74(sp),a0
    17c4:	|  |        |  |         move.l 42(sp),84(a0)
            custom->bltcon1 = 0;               
    17ca:	|  |        |  |         movea.l 74(sp),a0
    17ce:	|  |        |  |         move.w #0,66(a0)

            if (xdiffrest) {
    17d4:	|  |        |  |         tst.w 16(sp)
    17d8:	|  |        |  |  /----- beq.s 183a <CstDrawZBuffer+0x352>
              bytewidth += 2; 
    17da:	|  |        |  |  |      addq.w #2,80(sp)
              xdiffbyte += -2;                 
    17de:	|  |        |  |  |      subq.w #2,18(sp)
      
              bltapt = zbuffer->bitplane + xdiffbyte;          
    17e2:	|  |        |  |  |      movea.l 104(sp),a0
    17e6:	|  |        |  |  |      move.l 20(a0),d1
    17ea:	|  |        |  |  |      moveq #0,d0
    17ec:	|  |        |  |  |      move.w 18(sp),d0
    17f0:	|  |        |  |  |      add.l d1,d0
    17f2:	|  |        |  |  |      move.l d0,82(sp)
              custom->bltcon0 = (16 - xdiffrest) * 4096 + 0x9f0;              
    17f6:	|  |        |  |  |      moveq #0,d0
    17f8:	|  |        |  |  |      move.w 16(sp),d0
    17fc:	|  |        |  |  |      moveq #16,d1
    17fe:	|  |        |  |  |      sub.l d0,d1
    1800:	|  |        |  |  |      move.l d1,d0
    1802:	|  |        |  |  |      moveq #12,d1
    1804:	|  |        |  |  |      lsl.w d1,d0
    1806:	|  |        |  |  |      addi.w #2544,d0
    180a:	|  |        |  |  |      movea.l 74(sp),a0
    180e:	|  |        |  |  |      move.w d0,64(a0)
              custom->bltamod = zbuffer->width/8 - bytewidth;
    1812:	|  |        |  |  |      movea.l 104(sp),a0
    1816:	|  |        |  |  |      move.l (a0),d0
    1818:	|  |        |  |  |  /-- bpl.s 181c <CstDrawZBuffer+0x334>
    181a:	|  |        |  |  |  |   addq.l #7,d0
    181c:	|  |        |  |  |  \-> asr.l #3,d0
    181e:	|  |        |  |  |      move.l d0,d0
    1820:	|  |        |  |  |      sub.w 80(sp),d0
    1824:	|  |        |  |  |      movea.l 74(sp),a0
    1828:	|  |        |  |  |      move.w d0,100(a0)
              custom->bltdmod = 0;                                                            
    182c:	|  |        |  |  |      movea.l 74(sp),a0
    1830:	|  |        |  |  |      move.w #0,102(a0)
    1836:	|  |     /--|--|--|----- bra.w 1a04 <CstDrawZBuffer+0x51c>
            }
            else
            {             
              bltapt = zbuffer->bitplane + xdiffbyte;          
    183a:	|  |     |  |  |  \----> movea.l 104(sp),a0
    183e:	|  |     |  |  |         move.l 20(a0),d1
    1842:	|  |     |  |  |         moveq #0,d0
    1844:	|  |     |  |  |         move.w 18(sp),d0
    1848:	|  |     |  |  |         add.l d1,d0
    184a:	|  |     |  |  |         move.l d0,82(sp)
              custom->bltcon0 = 4096 + 0x9f0;              
    184e:	|  |     |  |  |         movea.l 74(sp),a0
    1852:	|  |     |  |  |         move.w #6640,64(a0)
              custom->bltamod = zbuffer->width/8 - bytewidth;
    1858:	|  |     |  |  |         movea.l 104(sp),a0
    185c:	|  |     |  |  |         move.l (a0),d0
    185e:	|  |     |  |  |     /-- bpl.s 1862 <CstDrawZBuffer+0x37a>
    1860:	|  |     |  |  |     |   addq.l #7,d0
    1862:	|  |     |  |  |     \-> asr.l #3,d0
    1864:	|  |     |  |  |         move.l d0,d0
    1866:	|  |     |  |  |         sub.w 80(sp),d0
    186a:	|  |     |  |  |         movea.l 74(sp),a0
    186e:	|  |     |  |  |         move.w d0,100(a0)
              custom->bltdmod = 2;                                                            
    1872:	|  |     |  |  |         movea.l 74(sp),a0
    1876:	|  |     |  |  |         move.w #2,102(a0)
    187c:	|  |     +--|--|-------- bra.w 1a04 <CstDrawZBuffer+0x51c>
            }                                     
          }            
          else
          {
              KPrintF("Cstdrawzbuffer: Currenz version onl supports zbuffer size equal to screen size");
    1880:	|  |     |  |  \-------> pea 17e98 <PutChar+0x17a>
    1886:	|  |     |  |            jsr 17254 <KPrintF>
    188c:	|  |     |  |            addq.l #4,sp
              return FALSE;
    188e:	|  |     |  |            moveq #0,d0
    1890:	|  |  /--|--|----------- bra.w 1c6a <CstDrawZBuffer+0x782>
        {    
          //Get Distance R
          /*sprite  ------------x1++++++++++?????????-------------------------*/    
          //zbuffer ------------------x1+++++++++++++++++++x2-----------------*/             
          
          xdiff = spritex1oncanvas - zbufferx1oncanvas;
    1894:	|  |  |  |  \----------> movea.w 36(sp),a0
    1898:	|  |  |  |               suba.w 28(sp),a0
    189c:	|  |  |  |               move.w a0,20(sp)
          xdiffbyte = (xdiff / 16) * 2;          
    18a0:	|  |  |  |               move.w 20(sp),d0
    18a4:	|  |  |  |               lsr.w #4,d0
    18a6:	|  |  |  |               add.w d0,d0
    18a8:	|  |  |  |               move.w d0,18(sp)
          xdiffrest = (xdiff - xdiffbyte * 8);    
    18ac:	|  |  |  |               move.w 18(sp),d0
    18b0:	|  |  |  |               lsl.w #3,d0
    18b2:	|  |  |  |               move.w 20(sp),d1
    18b6:	|  |  |  |               sub.w d0,d1
    18b8:	|  |  |  |               move.w d1,16(sp)

          if( zbufferx2oncanvas > spritex2oncanvas)    
    18bc:	|  |  |  |               move.w 34(sp),d0
    18c0:	|  |  |  |               cmp.w 26(sp),d0
    18c4:	|  |  |  |     /-------- bcc.w 19f0 <CstDrawZBuffer+0x508>
          {                         
            bytewidth = (sprite->width/16)*2;
    18c8:	|  |  |  |     |         movea.l 100(sp),a0
    18cc:	|  |  |  |     |         move.l (a0),d0
    18ce:	|  |  |  |     |         movea.l d0,a0
    18d0:	|  |  |  |     |         cmpa.w #0,a0
    18d4:	|  |  |  |     |     /-- bge.s 18da <CstDrawZBuffer+0x3f2>
    18d6:	|  |  |  |     |     |   lea 15(a0),a0
    18da:	|  |  |  |     |     \-> move.l a0,d0
    18dc:	|  |  |  |     |         asr.l #4,d0
    18de:	|  |  |  |     |         move.l d0,d0
    18e0:	|  |  |  |     |         add.w d0,d0
    18e2:	|  |  |  |     |         move.w d0,80(sp)
            if(sprite->height == 60) {
    18e6:	|  |  |  |     |         movea.l 100(sp),a0
    18ea:	|  |  |  |     |         move.l 4(a0),d0
    18ee:	|  |  |  |     |         moveq #60,d1
    18f0:	|  |  |  |     |         cmp.l d0,d1
    18f2:	|  |  |  |     |     /-- bne.s 18fe <CstDrawZBuffer+0x416>
              sprite->height = 60;
    18f4:	|  |  |  |     |     |   movea.l 100(sp),a0
    18f8:	|  |  |  |     |     |   moveq #60,d0
    18fa:	|  |  |  |     |     |   move.l d0,4(a0)
            }
           
            custom->bltafwm = 0xffff;
    18fe:	|  |  |  |     |     \-> movea.l 74(sp),a0
    1902:	|  |  |  |     |         move.w #-1,68(a0)
            custom->bltalwm = 0xffff;                      
    1908:	|  |  |  |     |         movea.l 74(sp),a0
    190c:	|  |  |  |     |         move.w #-1,70(a0)
            custom->bltcon1 = 0;          
    1912:	|  |  |  |     |         movea.l 74(sp),a0
    1916:	|  |  |  |     |         move.w #0,66(a0)

            if (xdiffrest) {
    191c:	|  |  |  |     |         tst.w 16(sp)
    1920:	|  |  |  |     |  /----- beq.s 1992 <CstDrawZBuffer+0x4aa>
              bytewidth += 2; 
    1922:	|  |  |  |     |  |      addq.w #2,80(sp)
              //xdiffbyte += -2;            
              bltapt = zbuffer->bitplane + xdiffbyte;  
    1926:	|  |  |  |     |  |      movea.l 104(sp),a0
    192a:	|  |  |  |     |  |      move.l 20(a0),d1
    192e:	|  |  |  |     |  |      moveq #0,d0
    1930:	|  |  |  |     |  |      move.w 18(sp),d0
    1934:	|  |  |  |     |  |      add.l d1,d0
    1936:	|  |  |  |     |  |      move.l d0,82(sp)
              WaitBlit();   
    193a:	|  |  |  |     |  |      move.l 1c9d6 <GfxBase>,d0
    1940:	|  |  |  |     |  |      movea.l d0,a6
    1942:	|  |  |  |     |  |      jsr -228(a6)
              custom->bltdpt = tmpbuffer;                
    1946:	|  |  |  |     |  |      movea.l 74(sp),a0
    194a:	|  |  |  |     |  |      move.l 42(sp),84(a0)
              custom->bltcon0 = (16 - xdiffrest) * 4096 + 0x9f0;              
    1950:	|  |  |  |     |  |      moveq #0,d0
    1952:	|  |  |  |     |  |      move.w 16(sp),d0
    1956:	|  |  |  |     |  |      moveq #16,d1
    1958:	|  |  |  |     |  |      sub.l d0,d1
    195a:	|  |  |  |     |  |      move.l d1,d0
    195c:	|  |  |  |     |  |      moveq #12,d1
    195e:	|  |  |  |     |  |      lsl.w d1,d0
    1960:	|  |  |  |     |  |      addi.w #2544,d0
    1964:	|  |  |  |     |  |      movea.l 74(sp),a0
    1968:	|  |  |  |     |  |      move.w d0,64(a0)
              custom->bltamod = zbuffer->width/8 - bytewidth;
    196c:	|  |  |  |     |  |      movea.l 104(sp),a0
    1970:	|  |  |  |     |  |      move.l (a0),d0
    1972:	|  |  |  |     |  |  /-- bpl.s 1976 <CstDrawZBuffer+0x48e>
    1974:	|  |  |  |     |  |  |   addq.l #7,d0
    1976:	|  |  |  |     |  |  \-> asr.l #3,d0
    1978:	|  |  |  |     |  |      move.l d0,d0
    197a:	|  |  |  |     |  |      sub.w 80(sp),d0
    197e:	|  |  |  |     |  |      movea.l 74(sp),a0
    1982:	|  |  |  |     |  |      move.w d0,100(a0)
              custom->bltdmod = 0;                                                            
    1986:	|  |  |  |     |  |      movea.l 74(sp),a0
    198a:	|  |  |  |     |  |      move.w #0,102(a0)
    1990:	|  |  |  +-----|--|----- bra.s 1a04 <CstDrawZBuffer+0x51c>
            }
            else
            {       
              //xdiffbyte += -2;      
              bltapt = zbuffer->bitplane + xdiffbyte;  
    1992:	|  |  |  |     |  \----> movea.l 104(sp),a0
    1996:	|  |  |  |     |         move.l 20(a0),d1
    199a:	|  |  |  |     |         moveq #0,d0
    199c:	|  |  |  |     |         move.w 18(sp),d0
    19a0:	|  |  |  |     |         add.l d1,d0
    19a2:	|  |  |  |     |         move.l d0,82(sp)
              WaitBlit();         
    19a6:	|  |  |  |     |         move.l 1c9d6 <GfxBase>,d0
    19ac:	|  |  |  |     |         movea.l d0,a6
    19ae:	|  |  |  |     |         jsr -228(a6)
              custom->bltdpt = tmpbuffer + 2;       
    19b2:	|  |  |  |     |         move.l 42(sp),d0
    19b6:	|  |  |  |     |         addq.l #2,d0
    19b8:	|  |  |  |     |         movea.l 74(sp),a0
    19bc:	|  |  |  |     |         move.l d0,84(a0)
              custom->bltcon0 = 4096 + 0x9f0;              
    19c0:	|  |  |  |     |         movea.l 74(sp),a0
    19c4:	|  |  |  |     |         move.w #6640,64(a0)
              custom->bltamod = zbuffer->width/8 - bytewidth;
    19ca:	|  |  |  |     |         movea.l 104(sp),a0
    19ce:	|  |  |  |     |         move.l (a0),d0
    19d0:	|  |  |  |     |     /-- bpl.s 19d4 <CstDrawZBuffer+0x4ec>
    19d2:	|  |  |  |     |     |   addq.l #7,d0
    19d4:	|  |  |  |     |     \-> asr.l #3,d0
    19d6:	|  |  |  |     |         move.l d0,d0
    19d8:	|  |  |  |     |         sub.w 80(sp),d0
    19dc:	|  |  |  |     |         movea.l 74(sp),a0
    19e0:	|  |  |  |     |         move.w d0,100(a0)
              custom->bltdmod = 2;                                                            
    19e4:	|  |  |  |     |         movea.l 74(sp),a0
    19e8:	|  |  |  |     |         move.w #2,102(a0)
    19ee:	|  |  |  +-----|-------- bra.s 1a04 <CstDrawZBuffer+0x51c>
            }                                     
          }            
          else
          {
              KPrintF("Cstdrawzbuffer: Currenz version onl supports zbuffer size equal to screen size");
    19f0:	|  |  |  |     \-------> pea 17e98 <PutChar+0x17a>
    19f6:	|  |  |  |               jsr 17254 <KPrintF>
    19fc:	|  |  |  |               addq.l #4,sp
              return FALSE;
    19fe:	|  |  |  |               moveq #0,d0
    1a00:	|  |  +--|-------------- bra.w 1c6a <CstDrawZBuffer+0x782>
        } 
        
        //Get Distance R
        //zbuffer ------------x1+++++++++++++++++++x2-----------------*/
        /*sprite--------------RRRRRRRRx1++++++++++?????????------------*/    
        UWORD ydiff = spritey1oncanvas - zbuffery1oncanvas;
    1a04:	|  |  |  \-------------> movea.w 32(sp),a0
    1a08:	|  |  |                  suba.w 24(sp),a0
    1a0c:	|  |  |                  move.w a0,14(sp)

        UWORD height;
        if( zbuffery2oncanvas > spritey2oncanvas) 
    1a10:	|  |  |                  move.w 30(sp),d0
    1a14:	|  |  |                  cmp.w 22(sp),d0
    1a18:	|  |  |           /----- bcc.s 1a28 <CstDrawZBuffer+0x540>
          height = sprite->height;
    1a1a:	|  |  |           |      movea.l 100(sp),a0
    1a1e:	|  |  |           |      move.l 4(a0),d0
    1a22:	|  |  |           |      move.w d0,78(sp)
    1a26:	|  |  |           |  /-- bra.s 1a34 <CstDrawZBuffer+0x54c>
        else
          height = zbuffery2oncanvas - spritey1oncanvas;
    1a28:	|  |  |           \--|-> move.w 22(sp),d1
    1a2c:	|  |  |              |   sub.w 32(sp),d1
    1a30:	|  |  |              |   move.w d1,78(sp)

        custom->bltapt = bltapt + ydiff*zbuffer->width/8; 
    1a34:	|  |  |              \-> moveq #0,d0
    1a36:	|  |  |                  move.w 14(sp),d0
    1a3a:	|  |  |                  movea.l 104(sp),a0
    1a3e:	|  |  |                  move.l (a0),d1
    1a40:	|  |  |                  move.l d1,-(sp)
    1a42:	|  |  |                  move.l d0,-(sp)
    1a44:	|  |  |                  jsr 17c08 <__mulsi3>
    1a4a:	|  |  |                  addq.l #8,sp
    1a4c:	|  |  |                  tst.l d0
    1a4e:	|  |  |              /-- bge.s 1a52 <CstDrawZBuffer+0x56a>
    1a50:	|  |  |              |   addq.l #7,d0
    1a52:	|  |  |              \-> asr.l #3,d0
    1a54:	|  |  |                  add.l 82(sp),d0
    1a58:	|  |  |                  movea.l 74(sp),a0
    1a5c:	|  |  |                  move.l d0,80(a0)
        UWORD bltsize =  height*64+bytewidth/2;          
    1a60:	|  |  |                  move.w 78(sp),d0
    1a64:	|  |  |                  move.w d0,d1
    1a66:	|  |  |                  lsl.w #6,d1
    1a68:	|  |  |                  move.w 80(sp),d0
    1a6c:	|  |  |                  lsr.w #1,d0
    1a6e:	|  |  |                  movea.w d1,a0
    1a70:	|  |  |                  adda.w d0,a0
    1a72:	|  |  |                  move.w a0,12(sp)
        custom->bltsize = height*64+bytewidth/2;
    1a76:	|  |  |                  move.w 78(sp),d0
    1a7a:	|  |  |                  move.w d0,d1
    1a7c:	|  |  |                  lsl.w #6,d1
    1a7e:	|  |  |                  move.w 80(sp),d0
    1a82:	|  |  |                  lsr.w #1,d0
    1a84:	|  |  |                  add.w d1,d0
    1a86:	|  |  |                  movea.l 74(sp),a0
    1a8a:	|  |  |                  move.w d0,88(a0)
       
        WaitBlit();
    1a8e:	|  |  |                  move.l 1c9d6 <GfxBase>,d0
    1a94:	|  |  |                  movea.l d0,a6
    1a96:	|  |  |                  jsr -228(a6)

        custom->bltafwm = 0xffff;
    1a9a:	|  |  |                  movea.l 74(sp),a0
    1a9e:	|  |  |                  move.w #-1,68(a0)
        custom->bltalwm = 0xffff;
    1aa4:	|  |  |                  movea.l 74(sp),a0
    1aa8:	|  |  |                  move.w #-1,70(a0)
        custom->bltamod = 2;
    1aae:	|  |  |                  movea.l 74(sp),a0
    1ab2:	|  |  |                  move.w #2,100(a0)
        custom->bltbmod = 0;
    1ab8:	|  |  |                  movea.l 74(sp),a0
    1abc:	|  |  |                  move.w #0,98(a0)
        custom->bltdmod = 0;
    1ac2:	|  |  |                  movea.l 74(sp),a0
    1ac6:	|  |  |                  move.w #0,102(a0)
        custom->bltcon0 = 0xd0c; //Copy A to D
    1acc:	|  |  |                  movea.l 74(sp),a0
    1ad0:	|  |  |                  move.w #3340,64(a0)
        custom->bltcon1 = 0;        
    1ad6:	|  |  |                  movea.l 74(sp),a0
    1ada:	|  |  |                  move.w #0,66(a0)

        custom->bltapt = (APTR) tmpbuffer + 2;
    1ae0:	|  |  |                  move.l 42(sp),d0
    1ae4:	|  |  |                  addq.l #2,d0
    1ae6:	|  |  |                  movea.l 74(sp),a0
    1aea:	|  |  |                  move.l d0,80(a0)
        custom->bltbpt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    1aee:	|  |  |                  movea.l 100(sp),a0
    1af2:	|  |  |                  move.l 24(a0),d2
    1af6:	|  |  |                  movea.l 100(sp),a0
    1afa:	|  |  |                  move.l (a0),d0
    1afc:	|  |  |              /-- bpl.s 1b00 <CstDrawZBuffer+0x618>
    1afe:	|  |  |              |   addq.l #7,d0
    1b00:	|  |  |              \-> asr.l #3,d0
    1b02:	|  |  |                  movea.l 100(sp),a0
    1b06:	|  |  |                  move.l 4(a0),d1
    1b0a:	|  |  |                  move.l d1,-(sp)
    1b0c:	|  |  |                  move.l d0,-(sp)
    1b0e:	|  |  |                  jsr 17c08 <__mulsi3>
    1b14:	|  |  |                  addq.l #8,sp
    1b16:	|  |  |                  move.l d0,d1
    1b18:	|  |  |                  move.l d1,d0
    1b1a:	|  |  |                  add.l d0,d0
    1b1c:	|  |  |                  add.l d0,d0
    1b1e:	|  |  |                  add.l d1,d0
    1b20:	|  |  |                  add.l d2,d0
    1b22:	|  |  |                  movea.l 74(sp),a0
    1b26:	|  |  |                  move.l d0,76(a0)
        custom->bltdpt = (APTR) returnvalue;
    1b2a:	|  |  |                  movea.l 74(sp),a0
    1b2e:	|  |  |                  move.l 58(sp),84(a0)
        custom->bltsize = (sprite->height<<6)+sprite->width/16;  
    1b34:	|  |  |                  movea.l 100(sp),a0
    1b38:	|  |  |                  move.l 4(a0),d0
    1b3c:	|  |  |                  move.l d0,d0
    1b3e:	|  |  |                  move.w d0,d1
    1b40:	|  |  |                  lsl.w #6,d1
    1b42:	|  |  |                  movea.l 100(sp),a0
    1b46:	|  |  |                  move.l (a0),d0
    1b48:	|  |  |                  movea.l d0,a0
    1b4a:	|  |  |                  cmpa.w #0,a0
    1b4e:	|  |  |              /-- bge.s 1b54 <CstDrawZBuffer+0x66c>
    1b50:	|  |  |              |   lea 15(a0),a0
    1b54:	|  |  |              \-> move.l a0,d0
    1b56:	|  |  |                  asr.l #4,d0
    1b58:	|  |  |                  move.l d0,d0
    1b5a:	|  |  |                  add.w d1,d0
    1b5c:	|  |  |                  movea.l 74(sp),a0
    1b60:	|  |  |                  move.w d0,88(a0)

        zbuffer = zbuffer->nextPanel;
    1b64:	|  |  |                  movea.l 104(sp),a0
    1b68:	|  |  |                  move.l 24(a0),104(sp)
  while(zbuffer) 
    1b6e:	|  \--|----------------> tst.l 104(sp)
    1b72:	\-----|----------------- bne.w 1618 <CstDrawZBuffer+0x130>
      }
    }
  }
  FreeVec( tmpbuffer);
    1b76:	      |                  move.l 42(sp),38(sp)
    1b7c:	      |                  move.l 1c9ca <SysBase>,d0
    1b82:	      |                  movea.l d0,a6
    1b84:	      |                  movea.l 38(sp),a1
    1b88:	      |                  jsr -690(a6)
  if(zbufferset == 0)
    1b8c:	      |                  tst.w 94(sp)
    1b90:	      |           /----- bne.w 1c66 <CstDrawZBuffer+0x77e>
  {
    WaitBlit();
    1b94:	      |           |      move.l 1c9d6 <GfxBase>,d0
    1b9a:	      |           |      movea.l d0,a6
    1b9c:	      |           |      jsr -228(a6)

    custom->bltafwm = 0xffff;
    1ba0:	      |           |      movea.l 74(sp),a0
    1ba4:	      |           |      move.w #-1,68(a0)
    custom->bltalwm = 0xffff;
    1baa:	      |           |      movea.l 74(sp),a0
    1bae:	      |           |      move.w #-1,70(a0)
    custom->bltamod = 0;
    1bb4:	      |           |      movea.l 74(sp),a0
    1bb8:	      |           |      move.w #0,100(a0)
    custom->bltbmod = 0;
    1bbe:	      |           |      movea.l 74(sp),a0
    1bc2:	      |           |      move.w #0,98(a0)
    custom->bltcmod = 0;
    1bc8:	      |           |      movea.l 74(sp),a0
    1bcc:	      |           |      move.w #0,96(a0)
    custom->bltdmod = 0;
    1bd2:	      |           |      movea.l 74(sp),a0
    1bd6:	      |           |      move.w #0,102(a0)
    custom->bltcon0 = 0x9f0; //Copy A to D
    1bdc:	      |           |      movea.l 74(sp),a0
    1be0:	      |           |      move.w #2544,64(a0)
    custom->bltcon1 = 0;        
    1be6:	      |           |      movea.l 74(sp),a0
    1bea:	      |           |      move.w #0,66(a0)

    custom->bltapt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    1bf0:	      |           |      movea.l 100(sp),a0
    1bf4:	      |           |      move.l 24(a0),d2
    1bf8:	      |           |      movea.l 100(sp),a0
    1bfc:	      |           |      move.l (a0),d0
    1bfe:	      |           |  /-- bpl.s 1c02 <CstDrawZBuffer+0x71a>
    1c00:	      |           |  |   addq.l #7,d0
    1c02:	      |           |  \-> asr.l #3,d0
    1c04:	      |           |      movea.l 100(sp),a0
    1c08:	      |           |      move.l 4(a0),d1
    1c0c:	      |           |      move.l d1,-(sp)
    1c0e:	      |           |      move.l d0,-(sp)
    1c10:	      |           |      jsr 17c08 <__mulsi3>
    1c16:	      |           |      addq.l #8,sp
    1c18:	      |           |      move.l d0,d1
    1c1a:	      |           |      move.l d1,d0
    1c1c:	      |           |      add.l d0,d0
    1c1e:	      |           |      add.l d0,d0
    1c20:	      |           |      add.l d1,d0
    1c22:	      |           |      add.l d2,d0
    1c24:	      |           |      movea.l 74(sp),a0
    1c28:	      |           |      move.l d0,80(a0)
    custom->bltdpt = (APTR) returnvalue;
    1c2c:	      |           |      movea.l 74(sp),a0
    1c30:	      |           |      move.l 58(sp),84(a0)
    custom->bltsize = (sprite->height<<6)+sprite->width/16;      
    1c36:	      |           |      movea.l 100(sp),a0
    1c3a:	      |           |      move.l 4(a0),d0
    1c3e:	      |           |      move.l d0,d0
    1c40:	      |           |      move.w d0,d1
    1c42:	      |           |      lsl.w #6,d1
    1c44:	      |           |      movea.l 100(sp),a0
    1c48:	      |           |      move.l (a0),d0
    1c4a:	      |           |      movea.l d0,a0
    1c4c:	      |           |      cmpa.w #0,a0
    1c50:	      |           |  /-- bge.s 1c56 <CstDrawZBuffer+0x76e>
    1c52:	      |           |  |   lea 15(a0),a0
    1c56:	      |           |  \-> move.l a0,d0
    1c58:	      |           |      asr.l #4,d0
    1c5a:	      |           |      move.l d0,d0
    1c5c:	      |           |      add.w d1,d0
    1c5e:	      |           |      movea.l 74(sp),a0
    1c62:	      |           |      move.w d0,88(a0)

  }

  return returnvalue;
    1c66:	      |           \----> move.l 58(sp),d0

}
    1c6a:	      \----------------> move.l (sp)+,d2
    1c6c:	                         movea.l (sp)+,a6
    1c6e:	                         lea 88(sp),sp
    1c72:	                         rts

00001c74 <CstFreeBuffer>:

void CstFreeBuffer( ) {
    1c74:	    lea -20(sp),sp
    1c78:	    move.l a6,-(sp)
  if( CstDrawBuffer) FreeVec(CstDrawBuffer);
    1c7a:	    move.l 1c8fe <CstDrawBuffer>,d0
    1c80:	/-- beq.s 1c9a <CstFreeBuffer+0x26>
    1c82:	|   move.l 1c8fe <CstDrawBuffer>,20(sp)
    1c8a:	|   move.l 1c9ca <SysBase>,d0
    1c90:	|   movea.l d0,a6
    1c92:	|   movea.l 20(sp),a1
    1c96:	|   jsr -690(a6)
  if( CstViewBuffer) FreeVec(CstViewBuffer);
    1c9a:	\-> move.l 1c8fa <CstViewBuffer>,d0
    1ca0:	/-- beq.s 1cba <CstFreeBuffer+0x46>
    1ca2:	|   move.l 1c8fa <CstViewBuffer>,16(sp)
    1caa:	|   move.l 1c9ca <SysBase>,d0
    1cb0:	|   movea.l d0,a6
    1cb2:	|   movea.l 16(sp),a1
    1cb6:	|   jsr -690(a6)
  if( CstCopperList) FreeVec(CstCopperList);  
    1cba:	\-> move.l 1c8f4 <CstCopperList>,d0
    1cc0:	/-- beq.s 1cda <CstFreeBuffer+0x66>
    1cc2:	|   move.l 1c8f4 <CstCopperList>,12(sp)
    1cca:	|   move.l 1c9ca <SysBase>,d0
    1cd0:	|   movea.l d0,a6
    1cd2:	|   movea.l 12(sp),a1
    1cd6:	|   jsr -690(a6)
  if( CstBackDrop) FreeVec(CstBackDrop);  
    1cda:	\-> move.l 1c8ec <CstBackDrop>,d0
    1ce0:	/-- beq.s 1cfa <CstFreeBuffer+0x86>
    1ce2:	|   move.l 1c8ec <CstBackDrop>,8(sp)
    1cea:	|   move.l 1c9ca <SysBase>,d0
    1cf0:	|   movea.l d0,a6
    1cf2:	|   movea.l 8(sp),a1
    1cf6:	|   jsr -690(a6)
  if( CstBackDropBackup) FreeVec(CstBackDropBackup);
    1cfa:	\-> move.l 1c8f0 <CstBackDropBackup>,d0
    1d00:	/-- beq.s 1d1a <CstFreeBuffer+0xa6>
    1d02:	|   move.l 1c8f0 <CstBackDropBackup>,4(sp)
    1d0a:	|   move.l 1c9ca <SysBase>,d0
    1d10:	|   movea.l d0,a6
    1d12:	|   movea.l 4(sp),a1
    1d16:	|   jsr -690(a6)
  CstDrawBuffer = NULL;
    1d1a:	\-> clr.l 1c8fe <CstDrawBuffer>
  CstViewBuffer = NULL;
    1d20:	    clr.l 1c8fa <CstViewBuffer>
  CstCopperList = NULL;
    1d26:	    clr.l 1c8f4 <CstCopperList>
  CstBackDrop = NULL;
    1d2c:	    clr.l 1c8ec <CstBackDrop>

}
    1d32:	    nop
    1d34:	    movea.l (sp)+,a6
    1d36:	    lea 20(sp),sp
    1d3a:	    rts

00001d3c <CstFreeze>:



void CstFreeze( ) {
    1d3c:	       lea -36(sp),sp
    1d40:	       move.l a6,-(sp)
    1d42:	       move.l d2,-(sp)

	KPrintF("CstFreeze: Freezing Background Started");  
    1d44:	       pea 17ee7 <PutChar+0x1c9>
    1d4a:	       jsr 17254 <KPrintF>
    1d50:	       addq.l #4,sp

  UWORD size = winWidth/8*winHeight*5;
    1d52:	       move.l 1c91e <winWidth>,d0
    1d58:	       lsr.l #3,d0
    1d5a:	       move.l d0,d1
    1d5c:	       move.l 1c922 <winHeight>,d0
    1d62:	       move.l d0,d0
    1d64:	       muls.w d0,d1
    1d66:	       move.w d1,d0
    1d68:	       add.w d0,d0
    1d6a:	       add.w d0,d0
    1d6c:	       move.w d0,d2
    1d6e:	       add.w d1,d2
    1d70:	       move.w d2,26(sp)

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    1d74:	       move.l #14675968,22(sp)

  //Backup Existing Backdrop to save location
  CstBackDropBackup = AllocVec(size, MEMF_ANY);
    1d7c:	       moveq #0,d0
    1d7e:	       move.w 26(sp),d0
    1d82:	       move.l d0,18(sp)
    1d86:	       clr.l 14(sp)
    1d8a:	       move.l 1c9ca <SysBase>,d0
    1d90:	       movea.l d0,a6
    1d92:	       move.l 18(sp),d0
    1d96:	       move.l 14(sp),d1
    1d9a:	       jsr -684(a6)
    1d9e:	       move.l d0,10(sp)
    1da2:	       move.l 10(sp),d0
    1da6:	       move.l d0,1c8f0 <CstBackDropBackup>
  if( !CstBackDropBackup)
    1dac:	       move.l 1c8f0 <CstBackDropBackup>,d0
    1db2:	   /-- bne.s 1dc2 <CstFreeze+0x86>
  {
    KPrintF("CstFreeze: Cannot allocate Memory for CstBackDropBackup");
    1db4:	   |   pea 17f0e <PutChar+0x1f0>
    1dba:	   |   jsr 17254 <KPrintF>
    1dc0:	   |   addq.l #4,sp
  }

#ifdef EMULATOR
  debug_register_bitmap(CstBackDropBackup, "BackDropBackup", winWidth, winHeight, 5, 0);
    1dc2:	   \-> move.l 1c922 <winHeight>,d0
    1dc8:	       move.l d0,d0
    1dca:	       movea.w d0,a1
    1dcc:	       move.l 1c91e <winWidth>,d0
    1dd2:	       move.l d0,d0
    1dd4:	       movea.w d0,a0
    1dd6:	       move.l 1c8f0 <CstBackDropBackup>,d0
    1ddc:	       clr.l -(sp)
    1dde:	       pea 5 <_start+0x5>
    1de2:	       move.l a1,-(sp)
    1de4:	       move.l a0,-(sp)
    1de6:	       pea 17f46 <PutChar+0x228>
    1dec:	       move.l d0,-(sp)
    1dee:	       jsr 1733c <debug_register_bitmap>
    1df4:	       lea 24(sp),sp
#endif  

  ULONG *src = (ULONG *) CstBackDrop;
    1df8:	       move.l 1c8ec <CstBackDrop>,40(sp)
  ULONG *dst = (ULONG *) CstBackDropBackup;
    1e00:	       move.l 1c8f0 <CstBackDropBackup>,36(sp)
  for(int i=0;i<size/4;i++) 
    1e08:	       clr.l 32(sp)
    1e0c:	   /-- bra.s 1e32 <CstFreeze+0xf6>
  {
    *dst++ = *src++;
    1e0e:	/--|-> move.l 40(sp),d1
    1e12:	|  |   move.l d1,d0
    1e14:	|  |   addq.l #4,d0
    1e16:	|  |   move.l d0,40(sp)
    1e1a:	|  |   move.l 36(sp),d0
    1e1e:	|  |   move.l d0,d2
    1e20:	|  |   addq.l #4,d2
    1e22:	|  |   move.l d2,36(sp)
    1e26:	|  |   movea.l d1,a0
    1e28:	|  |   move.l (a0),d1
    1e2a:	|  |   movea.l d0,a0
    1e2c:	|  |   move.l d1,(a0)
  for(int i=0;i<size/4;i++) 
    1e2e:	|  |   addq.l #1,32(sp)
    1e32:	|  \-> move.w 26(sp),d0
    1e36:	|      lsr.w #2,d0
    1e38:	|      move.w d0,d0
    1e3a:	|      andi.l #65535,d0
    1e40:	|      cmp.l 32(sp),d0
    1e44:	\----- bgt.s 1e0e <CstFreeze+0xd2>
  }

  //Replace existing Backdrop with ViewBuffer
  src = (ULONG *) CstViewBuffer;
    1e46:	       move.l 1c8fa <CstViewBuffer>,40(sp)
  dst = (ULONG *) CstBackDrop;
    1e4e:	       move.l 1c8ec <CstBackDrop>,36(sp)

  for(int i=0;i<size/4;i++) 
    1e56:	       clr.l 28(sp)
    1e5a:	   /-- bra.s 1e80 <CstFreeze+0x144>
  {
    *dst++ = *src++;
    1e5c:	/--|-> move.l 40(sp),d1
    1e60:	|  |   move.l d1,d0
    1e62:	|  |   addq.l #4,d0
    1e64:	|  |   move.l d0,40(sp)
    1e68:	|  |   move.l 36(sp),d0
    1e6c:	|  |   move.l d0,d2
    1e6e:	|  |   addq.l #4,d2
    1e70:	|  |   move.l d2,36(sp)
    1e74:	|  |   movea.l d1,a0
    1e76:	|  |   move.l (a0),d1
    1e78:	|  |   movea.l d0,a0
    1e7a:	|  |   move.l d1,(a0)
  for(int i=0;i<size/4;i++) 
    1e7c:	|  |   addq.l #1,28(sp)
    1e80:	|  \-> move.w 26(sp),d0
    1e84:	|      lsr.w #2,d0
    1e86:	|      move.w d0,d0
    1e88:	|      andi.l #65535,d0
    1e8e:	|      cmp.l 28(sp),d0
    1e92:	\----- bgt.s 1e5c <CstFreeze+0x120>
  }

  CstApplyBackDropCounter = 2;
    1e94:	       move.w #2,1c8f8 <CstApplyBackDropCounter>

  *CstBackDropBufferApplyCursor++ = winWidth/16;
    1e9c:	       move.l 1c91e <winWidth>,d0
    1ea2:	       lsr.l #4,d0
    1ea4:	       movea.l 1c90e <CstBackDropBufferApplyCursor>,a0
    1eaa:	       move.l a0,d1
    1eac:	       addq.l #2,d1
    1eae:	       move.l d1,1c90e <CstBackDropBufferApplyCursor>
    1eb4:	       move.l d0,d0
    1eb6:	       move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = winHeight;
    1eb8:	       move.l 1c922 <winHeight>,d0
    1ebe:	       movea.l 1c90e <CstBackDropBufferApplyCursor>,a0
    1ec4:	       move.l a0,d1
    1ec6:	       addq.l #2,d1
    1ec8:	       move.l d1,1c90e <CstBackDropBufferApplyCursor>
    1ece:	       move.l d0,d0
    1ed0:	       move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = 0;
    1ed2:	       movea.l 1c90e <CstBackDropBufferApplyCursor>,a0
    1ed8:	       move.l a0,d0
    1eda:	       addq.l #2,d0
    1edc:	       move.l d0,1c90e <CstBackDropBufferApplyCursor>
    1ee2:	       clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    1ee4:	       movea.l 1c90e <CstBackDropBufferApplyCursor>,a0
    1eea:	       move.l a0,d0
    1eec:	       addq.l #2,d0
    1eee:	       move.l d0,1c90e <CstBackDropBufferApplyCursor>
    1ef4:	       clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    1ef6:	       movea.l 1c90e <CstBackDropBufferApplyCursor>,a0
    1efc:	       move.l a0,d0
    1efe:	       addq.l #2,d0
    1f00:	       move.l d0,1c90e <CstBackDropBufferApplyCursor>
    1f06:	       clr.w (a0)

  KPrintF("CstFreeze: Finished");
    1f08:	       pea 17f55 <PutChar+0x237>
    1f0e:	       jsr 17254 <KPrintF>
    1f14:	       addq.l #4,sp

}  
    1f16:	       nop
    1f18:	       move.l (sp)+,d2
    1f1a:	       movea.l (sp)+,a6
    1f1c:	       lea 36(sp),sp
    1f20:	       rts

00001f22 <CstLoadBackdrop>:

void CstLoadBackdrop( BPTR fp, int x, int y) {
    1f22:	             lea -144(sp),sp
    1f26:	             movem.l d2-d4/a6,-(sp)

	KPrintF("CstLoadBackDrop: Loading of Background started");
    1f2a:	             pea 17f69 <PutChar+0x24b>
    1f30:	             jsr 17254 <KPrintF>
    1f36:	             addq.l #4,sp

  UWORD width = get2bytes(fp);
    1f38:	             move.l 164(sp),-(sp)
    1f3c:	             jsr 6bc <get2bytes>
    1f42:	             addq.l #4,sp
    1f44:	             move.w d0,134(sp)
  UWORD height = get2bytes(fp);  
    1f48:	             move.l 164(sp),-(sp)
    1f4c:	             jsr 6bc <get2bytes>
    1f52:	             addq.l #4,sp
    1f54:	             move.w d0,132(sp)

  UWORD widthbyteslayer = width/8;
    1f58:	             move.w 134(sp),d0
    1f5c:	             lsr.w #3,d0
    1f5e:	             move.w d0,130(sp)
  UWORD widthwordslayer = widthbyteslayer/2;  
    1f62:	             move.w 130(sp),d0
    1f66:	             lsr.w #1,d0
    1f68:	             move.w d0,128(sp)
  UWORD widthbytesbackdrop = winWidth / 8;
    1f6c:	             move.l 1c91e <winWidth>,d0
    1f72:	             lsr.l #3,d0
    1f74:	             move.w d0,126(sp)
  UWORD sizeplane =  widthbyteslayer*height;
    1f78:	             move.w 130(sp),d0
    1f7c:	             muls.w 132(sp),d0
    1f80:	             move.w d0,124(sp)
  UWORD size = sizeplane * 5; //Todo other number of bitplanes
    1f84:	             move.w 124(sp),d1
    1f88:	             move.w d1,d0
    1f8a:	             add.w d0,d0
    1f8c:	             add.w d0,d0
    1f8e:	             move.w d0,d2
    1f90:	             add.w d1,d2
    1f92:	             move.w d2,122(sp)

  //Load Palette to Copper
  if( CstPaletteLoaded == 0)
    1f96:	             move.w 1c8e6 <CstPaletteLoaded>,d0
    1f9c:	/----------- bne.w 2036 <CstLoadBackdrop+0x114>
  {    
    UWORD reg = 0x180;
    1fa0:	|            move.w #384,120(sp)

    if(CstPalette) {
    1fa6:	|            move.l 1c916 <CstPalette>,d0
    1fac:	|        /-- beq.s 1fc6 <CstLoadBackdrop+0xa4>
      FreeVec(CstPalette);
    1fae:	|        |   move.l 1c916 <CstPalette>,116(sp)
    1fb6:	|        |   move.l 1c9ca <SysBase>,d0
    1fbc:	|        |   movea.l d0,a6
    1fbe:	|        |   movea.l 116(sp),a1
    1fc2:	|        |   jsr -690(a6)
    }

    CstPalette = AllocVec(32*2,MEMF_ANY); //ToDo other number of bitplanes
    1fc6:	|        \-> moveq #64,d0
    1fc8:	|            move.l d0,112(sp)
    1fcc:	|            clr.l 108(sp)
    1fd0:	|            move.l 1c9ca <SysBase>,d0
    1fd6:	|            movea.l d0,a6
    1fd8:	|            move.l 112(sp),d0
    1fdc:	|            move.l 108(sp),d1
    1fe0:	|            jsr -684(a6)
    1fe4:	|            move.l d0,104(sp)
    1fe8:	|            move.l 104(sp),d0
    1fec:	|            move.l d0,1c916 <CstPalette>
    CstPaletteLoaded = 1;
    1ff2:	|            move.w #1,1c8e6 <CstPaletteLoaded>
    UWORD *tmp = CstPalette;
    1ffa:	|            move.l 1c916 <CstPalette>,156(sp)
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    2002:	|            clr.l 152(sp)
    2006:	|        /-- bra.s 202c <CstLoadBackdrop+0x10a>
      *tmp++ = get2bytes(fp);
    2008:	|     /--|-> move.l 164(sp),-(sp)
    200c:	|     |  |   jsr 6bc <get2bytes>
    2012:	|     |  |   addq.l #4,sp
    2014:	|     |  |   move.l d0,d1
    2016:	|     |  |   move.l 156(sp),d0
    201a:	|     |  |   move.l d0,d2
    201c:	|     |  |   addq.l #2,d2
    201e:	|     |  |   move.l d2,156(sp)
    2022:	|     |  |   move.l d1,d1
    2024:	|     |  |   movea.l d0,a0
    2026:	|     |  |   move.w d1,(a0)
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    2028:	|     |  |   addq.l #1,152(sp)
    202c:	|     |  \-> moveq #31,d0
    202e:	|     |      cmp.l 152(sp),d0
    2032:	|     \----- bge.s 2008 <CstLoadBackdrop+0xe6>
    2034:	|  /-------- bra.s 2054 <CstLoadBackdrop+0x132>
    }
  }
  else
  //There's already a palette loaded for this background. Do not load palette
  {
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    2036:	\--|-------> clr.l 148(sp)
    203a:	   |     /-- bra.s 204c <CstLoadBackdrop+0x12a>
      get2bytes(fp);
    203c:	   |  /--|-> move.l 164(sp),-(sp)
    2040:	   |  |  |   jsr 6bc <get2bytes>
    2046:	   |  |  |   addq.l #4,sp
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    2048:	   |  |  |   addq.l #1,148(sp)
    204c:	   |  |  \-> moveq #31,d2
    204e:	   |  |      cmp.l 148(sp),d2
    2052:	   |  \----- bge.s 203c <CstLoadBackdrop+0x11a>
    }
  }

  //Load Picture From Disk
  UWORD *tmpbuffer = AllocVec(size, MEMF_CHIP); //Todo other number of bitplanes
    2054:	   \-------> moveq #0,d0
    2056:	             move.w 122(sp),d0
    205a:	             move.l d0,100(sp)
    205e:	             moveq #2,d0
    2060:	             move.l d0,96(sp)
    2064:	             move.l 1c9ca <SysBase>,d0
    206a:	             movea.l d0,a6
    206c:	             move.l 100(sp),d0
    2070:	             move.l 96(sp),d1
    2074:	             jsr -684(a6)
    2078:	             move.l d0,92(sp)
    207c:	             move.l 92(sp),d0
    2080:	             move.l d0,88(sp)
  if( !tmpbuffer)
    2084:	         /-- bne.s 2094 <CstLoadBackdrop+0x172>
  {
    KPrintF("CstLoadBackDrop: Cannot allocate Memory for tmpbuffer");
    2086:	         |   pea 17f98 <PutChar+0x27a>
    208c:	         |   jsr 17254 <KPrintF>
    2092:	         |   addq.l #4,sp
  }
  UWORD *tmpmask = AllocVec(sizeplane, MEMF_CHIP);
    2094:	         \-> moveq #0,d0
    2096:	             move.w 124(sp),d0
    209a:	             move.l d0,84(sp)
    209e:	             moveq #2,d2
    20a0:	             move.l d2,80(sp)
    20a4:	             move.l 1c9ca <SysBase>,d0
    20aa:	             movea.l d0,a6
    20ac:	             move.l 84(sp),d0
    20b0:	             move.l 80(sp),d1
    20b4:	             jsr -684(a6)
    20b8:	             move.l d0,76(sp)
    20bc:	             move.l 76(sp),d0
    20c0:	             move.l d0,72(sp)
  if( !tmpmask)
    20c4:	         /-- bne.s 20d4 <CstLoadBackdrop+0x1b2>
  {
    KPrintF("CstLoadBackDrop: Cannot allocate Memory for tmpmask");
    20c6:	         |   pea 17fce <PutChar+0x2b0>
    20cc:	         |   jsr 17254 <KPrintF>
    20d2:	         |   addq.l #4,sp
  }

#ifdef EMULATOR
  debug_register_bitmap(tmpbuffer, "tmpbuffer.bpl", width, height, 5, 0);
    20d4:	         \-> move.w 132(sp),d0
    20d8:	             movea.w d0,a1
    20da:	             move.w 134(sp),d0
    20de:	             movea.w d0,a0
    20e0:	             clr.l -(sp)
    20e2:	             pea 5 <_start+0x5>
    20e6:	             move.l a1,-(sp)
    20e8:	             move.l a0,-(sp)
    20ea:	             pea 18002 <PutChar+0x2e4>
    20f0:	             move.l 108(sp),-(sp)
    20f4:	             jsr 1733c <debug_register_bitmap>
    20fa:	             lea 24(sp),sp
  debug_register_bitmap(tmpbuffer, "tmpmask.bpl", width, height, 1, 0);
    20fe:	             move.w 132(sp),d0
    2102:	             movea.w d0,a1
    2104:	             move.w 134(sp),d0
    2108:	             movea.w d0,a0
    210a:	             clr.l -(sp)
    210c:	             pea 1 <_start+0x1>
    2110:	             move.l a1,-(sp)
    2112:	             move.l a0,-(sp)
    2114:	             pea 18010 <PutChar+0x2f2>
    211a:	             move.l 108(sp),-(sp)
    211e:	             jsr 1733c <debug_register_bitmap>
    2124:	             lea 24(sp),sp
#endif  

  UWORD count = FRead( fp, tmpbuffer, 2, size/2);
    2128:	             move.l 164(sp),68(sp)
    212e:	             move.l 88(sp),64(sp)
    2134:	             moveq #2,d0
    2136:	             move.l d0,60(sp)
    213a:	             move.w 122(sp),d0
    213e:	             lsr.w #1,d0
    2140:	             move.w d0,d0
    2142:	             andi.l #65535,d0
    2148:	             move.l d0,56(sp)
    214c:	             move.l 1c9d2 <DOSBase>,d0
    2152:	             movea.l d0,a6
    2154:	             move.l 68(sp),d1
    2158:	             move.l 64(sp),d2
    215c:	             move.l 60(sp),d3
    2160:	             move.l 56(sp),d4
    2164:	             jsr -324(a6)
    2168:	             move.l d0,52(sp)
    216c:	             move.l 52(sp),d0
    2170:	             move.w d0,50(sp)
  if(!count) {
    2174:	         /-- bne.s 2188 <CstLoadBackdrop+0x266>
    KPrintF("Error while reading stream");
    2176:	         |   pea 1801c <PutChar+0x2fe>
    217c:	         |   jsr 17254 <KPrintF>
    2182:	         |   addq.l #4,sp
    return;
    2184:	   /-----|-- bra.w 23d4 <CstLoadBackdrop+0x4b2>
  }  
  count = FRead( fp, tmpmask, 2, sizeplane/2);
    2188:	   |     \-> move.l 164(sp),46(sp)
    218e:	   |         move.l 72(sp),42(sp)
    2194:	   |         moveq #2,d2
    2196:	   |         move.l d2,38(sp)
    219a:	   |         move.w 124(sp),d0
    219e:	   |         lsr.w #1,d0
    21a0:	   |         move.w d0,d0
    21a2:	   |         andi.l #65535,d0
    21a8:	   |         move.l d0,34(sp)
    21ac:	   |         move.l 1c9d2 <DOSBase>,d0
    21b2:	   |         movea.l d0,a6
    21b4:	   |         move.l 46(sp),d1
    21b8:	   |         move.l 42(sp),d2
    21bc:	   |         move.l 38(sp),d3
    21c0:	   |         move.l 34(sp),d4
    21c4:	   |         jsr -324(a6)
    21c8:	   |         move.l d0,30(sp)
    21cc:	   |         move.l 30(sp),d0
    21d0:	   |         move.w d0,50(sp)
   

  if(!count) {
    21d4:	   |     /-- bne.s 21e8 <CstLoadBackdrop+0x2c6>
    KPrintF("Error while reading stream");
    21d6:	   |     |   pea 1801c <PutChar+0x2fe>
    21dc:	   |     |   jsr 17254 <KPrintF>
    21e2:	   |     |   addq.l #4,sp
    return;
    21e4:	   +-----|-- bra.w 23d4 <CstLoadBackdrop+0x4b2>
  }

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    21e8:	   |     \-> move.l #14675968,26(sp)

  ULONG backdropcursor = (ULONG) CstBackDrop; 
    21f0:	   |         move.l 1c8ec <CstBackDrop>,d0
    21f6:	   |         move.l d0,144(sp)
  UWORD offset = widthbytesbackdrop*y + x / 8;
    21fa:	   |         move.l 172(sp),d0
    21fe:	   |         move.w d0,d1
    2200:	   |         muls.w 126(sp),d1
    2204:	   |         move.l 168(sp),d0
    2208:	   |     /-- bpl.s 220c <CstLoadBackdrop+0x2ea>
    220a:	   |     |   addq.l #7,d0
    220c:	   |     \-> asr.l #3,d0
    220e:	   |         move.l d0,d0
    2210:	   |         movea.w d1,a0
    2212:	   |         adda.w d0,a0
    2214:	   |         move.w a0,24(sp)
  backdropcursor += offset; 
    2218:	   |         moveq #0,d0
    221a:	   |         move.w 24(sp),d0
    221e:	   |         add.l d0,144(sp)

 	KPrintF("CstLoadBackDrop: Starting Blit");
    2222:	   |         pea 18037 <PutChar+0x319>
    2228:	   |         jsr 17254 <KPrintF>
    222e:	   |         addq.l #4,sp


  WaitBlit();
    2230:	   |         move.l 1c9d6 <GfxBase>,d0
    2236:	   |         movea.l d0,a6
    2238:	   |         jsr -228(a6)

  custom->bltafwm = 0xffff;
    223c:	   |         movea.l 26(sp),a0
    2240:	   |         move.w #-1,68(a0)
  custom->bltalwm = 0xffff;
    2246:	   |         movea.l 26(sp),a0
    224a:	   |         move.w #-1,70(a0)
  custom->bltamod = 0;
    2250:	   |         movea.l 26(sp),a0
    2254:	   |         move.w #0,100(a0)
  custom->bltbmod = 0;
    225a:	   |         movea.l 26(sp),a0
    225e:	   |         move.w #0,98(a0)
  custom->bltcmod = widthbytesbackdrop - widthbyteslayer;
    2264:	   |         move.w 126(sp),d0
    2268:	   |         sub.w 130(sp),d0
    226c:	   |         movea.l 26(sp),a0
    2270:	   |         move.w d0,96(a0)
  custom->bltdmod = widthbytesbackdrop - widthbyteslayer;
    2274:	   |         move.w 126(sp),d0
    2278:	   |         sub.w 130(sp),d0
    227c:	   |         movea.l 26(sp),a0
    2280:	   |         move.w d0,102(a0)
  custom->bltcon0 = 0xfca;
    2284:	   |         movea.l 26(sp),a0
    2288:	   |         move.w #4042,64(a0)
  custom->bltcon1 = 0;
    228e:	   |         movea.l 26(sp),a0
    2292:	   |         move.w #0,66(a0)
  
  ULONG tmpbuffercursor = (ULONG) tmpbuffer;
    2298:	   |         move.l 88(sp),140(sp)
  for(int i=0;i<5;i++) //Todo other number of bitplanes
    229e:	   |         clr.l 136(sp)
    22a2:	   |     /-- bra.s 2304 <CstLoadBackdrop+0x3e2>
  {    
    custom->bltapt = (APTR) tmpmask;
    22a4:	   |  /--|-> movea.l 26(sp),a0
    22a8:	   |  |  |   move.l 72(sp),80(a0)
    custom->bltbpt = (APTR) tmpbuffercursor;
    22ae:	   |  |  |   move.l 140(sp),d0
    22b2:	   |  |  |   movea.l 26(sp),a0
    22b6:	   |  |  |   move.l d0,76(a0)
    custom->bltcpt = (APTR)backdropcursor;
    22ba:	   |  |  |   move.l 144(sp),d0
    22be:	   |  |  |   movea.l 26(sp),a0
    22c2:	   |  |  |   move.l d0,72(a0)
    custom->bltdpt = (APTR) backdropcursor;
    22c6:	   |  |  |   move.l 144(sp),d0
    22ca:	   |  |  |   movea.l 26(sp),a0
    22ce:	   |  |  |   move.l d0,84(a0)
    custom->bltsize = (height<<6)+widthwordslayer;
    22d2:	   |  |  |   move.w 132(sp),d0
    22d6:	   |  |  |   lsl.w #6,d0
    22d8:	   |  |  |   add.w 128(sp),d0
    22dc:	   |  |  |   movea.l 26(sp),a0
    22e0:	   |  |  |   move.w d0,88(a0)
    tmpbuffercursor += sizeplane;
    22e4:	   |  |  |   moveq #0,d0
    22e6:	   |  |  |   move.w 124(sp),d0
    22ea:	   |  |  |   add.l d0,140(sp)
    backdropcursor += CstBackdropSizePlane;
    22ee:	   |  |  |   move.w 1c8ea <CstBackdropSizePlane>,d0
    22f4:	   |  |  |   move.w d0,d0
    22f6:	   |  |  |   andi.l #65535,d0
    22fc:	   |  |  |   add.l d0,144(sp)
  for(int i=0;i<5;i++) //Todo other number of bitplanes
    2300:	   |  |  |   addq.l #1,136(sp)
    2304:	   |  |  \-> moveq #4,d0
    2306:	   |  |      cmp.l 136(sp),d0
    230a:	   |  \----- bge.s 22a4 <CstLoadBackdrop+0x382>
  }    

  WaitBlit();
    230c:	   |         move.l 1c9d6 <GfxBase>,d0
    2312:	   |         movea.l d0,a6
    2314:	   |         jsr -228(a6)

 	KPrintF("CstLoadBackDrop: Freeing Memory");
    2318:	   |         pea 18056 <PutChar+0x338>
    231e:	   |         jsr 17254 <KPrintF>
    2324:	   |         addq.l #4,sp


  FreeVec(tmpbuffer);
    2326:	   |         move.l 88(sp),20(sp)
    232c:	   |         move.l 1c9ca <SysBase>,d0
    2332:	   |         movea.l d0,a6
    2334:	   |         movea.l 20(sp),a1
    2338:	   |         jsr -690(a6)
  FreeVec(tmpmask);
    233c:	   |         move.l 72(sp),16(sp)
    2342:	   |         move.l 1c9ca <SysBase>,d0
    2348:	   |         movea.l d0,a6
    234a:	   |         movea.l 16(sp),a1
    234e:	   |         jsr -690(a6)

  CstApplyBackDropCounter = 2;
    2352:	   |         move.w #2,1c8f8 <CstApplyBackDropCounter>

  *CstBackDropBufferApplyCursor++ = winWidth/16;
    235a:	   |         move.l 1c91e <winWidth>,d0
    2360:	   |         lsr.l #4,d0
    2362:	   |         movea.l 1c90e <CstBackDropBufferApplyCursor>,a0
    2368:	   |         move.l a0,d1
    236a:	   |         addq.l #2,d1
    236c:	   |         move.l d1,1c90e <CstBackDropBufferApplyCursor>
    2372:	   |         move.l d0,d0
    2374:	   |         move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = winHeight;
    2376:	   |         move.l 1c922 <winHeight>,d0
    237c:	   |         movea.l 1c90e <CstBackDropBufferApplyCursor>,a0
    2382:	   |         move.l a0,d1
    2384:	   |         addq.l #2,d1
    2386:	   |         move.l d1,1c90e <CstBackDropBufferApplyCursor>
    238c:	   |         move.l d0,d0
    238e:	   |         move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = 0;
    2390:	   |         movea.l 1c90e <CstBackDropBufferApplyCursor>,a0
    2396:	   |         move.l a0,d0
    2398:	   |         addq.l #2,d0
    239a:	   |         move.l d0,1c90e <CstBackDropBufferApplyCursor>
    23a0:	   |         clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    23a2:	   |         movea.l 1c90e <CstBackDropBufferApplyCursor>,a0
    23a8:	   |         move.l a0,d0
    23aa:	   |         addq.l #2,d0
    23ac:	   |         move.l d0,1c90e <CstBackDropBufferApplyCursor>
    23b2:	   |         clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    23b4:	   |         movea.l 1c90e <CstBackDropBufferApplyCursor>,a0
    23ba:	   |         move.l a0,d0
    23bc:	   |         addq.l #2,d0
    23be:	   |         move.l d0,1c90e <CstBackDropBufferApplyCursor>
    23c4:	   |         clr.w (a0)

  KPrintF("CstLoadBackDrop: Finished");
    23c6:	   |         pea 18076 <PutChar+0x358>
    23cc:	   |         jsr 17254 <KPrintF>
    23d2:	   |         addq.l #4,sp

}
    23d4:	   \-------> movem.l (sp)+,d2-d4/a6
    23d8:	             lea 144(sp),sp
    23dc:	             rts

000023de <CstPasteChar>:

ULONG test = 0;

void CstPasteChar( struct sprite *single, WORD x, WORD y)
{  
    23de:	                lea -72(sp),sp
    23e2:	                move.l a6,-(sp)
    23e4:	                move.l d2,-(sp)
    23e6:	                move.l 88(sp),d1
    23ea:	                move.l 92(sp),d0
    23ee:	                move.w d1,d1
    23f0:	                move.w d1,10(sp)
    23f4:	                move.w d0,d0
    23f6:	                move.w d0,8(sp)
  UWORD *destination = 0;
    23fa:	                clr.l 28(sp)
  CstApplyBackDropCounter = 2;
    23fe:	                move.w #2,1c8f8 <CstApplyBackDropCounter>
  destination = (UWORD *) CstBackDrop;      
    2406:	                move.l 1c8ec <CstBackDrop>,28(sp)
  ULONG ystartdst;
  ULONG ystartsrc; 
  ULONG blitheight;
  ULONG blitwidth;

  bltcon0 = 0;
    240e:	                clr.l 56(sp)

  blitwidth = single->width/16;
    2412:	                movea.l 84(sp),a0
    2416:	                move.l (a0),d0
    2418:	                movea.l d0,a0
    241a:	                cmpa.w #0,a0
    241e:	            /-- bge.s 2424 <CstPasteChar+0x46>
    2420:	            |   lea 15(a0),a0
    2424:	            \-> move.l a0,d0
    2426:	                asr.l #4,d0
    2428:	                move.l d0,40(sp)
  if(blitwidth == 0) blitwidth = 1;
    242c:	            /-- bne.s 2434 <CstPasteChar+0x56>
    242e:	            |   moveq #1,d0
    2430:	            |   move.l d0,40(sp)

  if( y < 0) {
    2434:	            \-> tst.w 8(sp)
    2438:	         /----- bge.s 2480 <CstPasteChar+0xa2>
    if(y + single->height < 0) {
    243a:	         |      movea.w 8(sp),a1
    243e:	         |      movea.l 84(sp),a0
    2442:	         |      move.l 4(a0),d0
    2446:	         |      add.l a1,d0
    2448:	         |  /-- bpl.s 245c <CstPasteChar+0x7e>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    244a:	         |  |   pea 18090 <PutChar+0x372>
    2450:	         |  |   jsr 17254 <KPrintF>
    2456:	         |  |   addq.l #4,sp
      return;
    2458:	/--------|--|-- bra.w 2b1c <CstPasteChar+0x73e>
    }
    ystartdst = 0;
    245c:	|        |  \-> clr.l 52(sp)
    ystartsrc = y*-1;
    2460:	|        |      move.w 8(sp),d0
    2464:	|        |      ext.l d0
    2466:	|        |      neg.l d0
    2468:	|        |      move.l d0,48(sp)
    blitheight = single->height+y;
    246c:	|        |      movea.l 84(sp),a0
    2470:	|        |      move.l 4(a0),d0
    2474:	|        |      movea.w 8(sp),a0
    2478:	|        |      add.l a0,d0
    247a:	|        |      move.l d0,44(sp)
    247e:	|     /--|----- bra.s 24f2 <CstPasteChar+0x114>
  } else if(y+single->height > (int) winHeight) {
    2480:	|     |  \----> movea.w 8(sp),a1
    2484:	|     |         movea.l 84(sp),a0
    2488:	|     |         move.l 4(a0),d0
    248c:	|     |         move.l a1,d1
    248e:	|     |         add.l d0,d1
    2490:	|     |         move.l 1c922 <winHeight>,d0
    2496:	|     |         cmp.l d1,d0
    2498:	|     |  /----- bge.s 24da <CstPasteChar+0xfc>
    if(y  > (int) winHeight) {
    249a:	|     |  |      movea.w 8(sp),a0
    249e:	|     |  |      move.l 1c922 <winHeight>,d0
    24a4:	|     |  |      cmp.l a0,d0
    24a6:	|     |  |  /-- bge.s 24ba <CstPasteChar+0xdc>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    24a8:	|     |  |  |   pea 18090 <PutChar+0x372>
    24ae:	|     |  |  |   jsr 17254 <KPrintF>
    24b4:	|     |  |  |   addq.l #4,sp
      return;
    24b6:	+-----|--|--|-- bra.w 2b1c <CstPasteChar+0x73e>
    }
    ystartdst = y;
    24ba:	|     |  |  \-> movea.w 8(sp),a0
    24be:	|     |  |      move.l a0,52(sp)
    ystartsrc = 0;
    24c2:	|     |  |      clr.l 48(sp)
    blitheight = winHeight-y;
    24c6:	|     |  |      move.l 1c922 <winHeight>,d0
    24cc:	|     |  |      movea.w 8(sp),a0
    24d0:	|     |  |      move.l d0,d1
    24d2:	|     |  |      sub.l a0,d1
    24d4:	|     |  |      move.l d1,44(sp)
    24d8:	|     +--|----- bra.s 24f2 <CstPasteChar+0x114>
  } else {
    ystartdst = y;
    24da:	|     |  \----> movea.w 8(sp),a0
    24de:	|     |         move.l a0,52(sp)
    ystartsrc = 0;
    24e2:	|     |         clr.l 48(sp)
    blitheight = single->height;
    24e6:	|     |         movea.l 84(sp),a0
    24ea:	|     |         move.l 4(a0),d0
    24ee:	|     |         move.l d0,44(sp)
  }


  if( x < 0) { //Leftmost part outside screen
    24f2:	|     \-------> tst.w 10(sp)
    24f6:	|        /----- bge.w 2668 <CstPasteChar+0x28a>
    if(x + single->width < 0) {
    24fa:	|        |      movea.w 10(sp),a1
    24fe:	|        |      movea.l 84(sp),a0
    2502:	|        |      move.l (a0),d0
    2504:	|        |      add.l a1,d0
    2506:	|        |  /-- bpl.s 251a <CstPasteChar+0x13c>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    2508:	|        |  |   pea 18090 <PutChar+0x372>
    250e:	|        |  |   jsr 17254 <KPrintF>
    2514:	|        |  |   addq.l #4,sp
      return;
    2516:	+--------|--|-- bra.w 2b1c <CstPasteChar+0x73e>

    }
    
    extrawords = 1;
    251a:	|        |  \-> move.w #1,78(sp)

    cutwordssource = (x*-1)/16; 
    2520:	|        |      move.w 10(sp),d0
    2524:	|        |  /-- bpl.s 252a <CstPasteChar+0x14c>
    2526:	|        |  |   addi.w #15,d0
    252a:	|        |  \-> asr.w #4,d0
    252c:	|        |      neg.w d0
    252e:	|        |      move.w d0,76(sp)
    cutmaskpixel = (x*-1)%16;     
    2532:	|        |      move.w 10(sp),d0
    2536:	|        |      ext.l d0
    2538:	|        |      neg.l d0
    253a:	|        |      andi.l #-2147483633,d0
    2540:	|        |  /-- bpl.s 254a <CstPasteChar+0x16c>
    2542:	|        |  |   subq.l #1,d0
    2544:	|        |  |   moveq #-16,d1
    2546:	|        |  |   or.l d1,d0
    2548:	|        |  |   addq.l #1,d0
    254a:	|        |  \-> move.w d0,74(sp)
    bltalwm = 0; //Last Word of this channel almost masked out
    254e:	|        |      clr.w 72(sp)
    bltapt = ((ULONG) single->data)+cutwordssource*2+ystartsrc*single->width/8;
    2552:	|        |      movea.l 84(sp),a0
    2556:	|        |      move.l 24(a0),d0
    255a:	|        |      move.l d0,d1
    255c:	|        |      moveq #0,d0
    255e:	|        |      move.w 76(sp),d0
    2562:	|        |      add.l d0,d0
    2564:	|        |      move.l d1,d2
    2566:	|        |      add.l d0,d2
    2568:	|        |      movea.l 84(sp),a0
    256c:	|        |      move.l (a0),d0
    256e:	|        |      move.l 48(sp),-(sp)
    2572:	|        |      move.l d0,-(sp)
    2574:	|        |      jsr 17c08 <__mulsi3>
    257a:	|        |      addq.l #8,sp
    257c:	|        |      lsr.l #3,d0
    257e:	|        |      move.l d2,d1
    2580:	|        |      add.l d0,d1
    2582:	|        |      move.l d1,68(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    2586:	|        |      move.l 1c91e <winWidth>,d0
    258c:	|        |      move.l 52(sp),-(sp)
    2590:	|        |      move.l d0,-(sp)
    2592:	|        |      jsr 17c08 <__mulsi3>
    2598:	|        |      addq.l #8,sp
    259a:	|        |      lsr.l #3,d0
    259c:	|        |      move.l 28(sp),d1
    25a0:	|        |      add.l d1,d0
    25a2:	|        |      move.l d0,d2
    25a4:	|        |      subq.l #2,d2
    25a6:	|        |      move.l d2,64(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    25aa:	|        |      move.l 1c91e <winWidth>,d0
    25b0:	|        |      move.l 52(sp),-(sp)
    25b4:	|        |      move.l d0,-(sp)
    25b6:	|        |      jsr 17c08 <__mulsi3>
    25bc:	|        |      addq.l #8,sp
    25be:	|        |      lsr.l #3,d0
    25c0:	|        |      move.l 28(sp),d1
    25c4:	|        |      add.l d1,d0
    25c6:	|        |      move.l d0,d1
    25c8:	|        |      subq.l #2,d1
    25ca:	|        |      move.l d1,60(sp)
    bltcon0 = ((16-cutmaskpixel) << 12);
    25ce:	|        |      moveq #0,d0
    25d0:	|        |      move.w 74(sp),d0
    25d4:	|        |      moveq #16,d1
    25d6:	|        |      sub.l d0,d1
    25d8:	|        |      move.l d1,d0
    25da:	|        |      moveq #12,d2
    25dc:	|        |      lsl.l d2,d0
    25de:	|        |      move.l d0,56(sp)

    *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    25e2:	|        |      movea.l 84(sp),a0
    25e6:	|        |      move.l (a0),d0
    25e8:	|        |      movea.l d0,a0
    25ea:	|        |      cmpa.w #0,a0
    25ee:	|        |  /-- bge.s 25f4 <CstPasteChar+0x216>
    25f0:	|        |  |   lea 15(a0),a0
    25f4:	|        |  \-> move.l a0,d0
    25f6:	|        |      asr.l #4,d0
    25f8:	|        |      move.l d0,d0
    25fa:	|        |      add.w 76(sp),d0
    25fe:	|        |      movea.l 1c90e <CstBackDropBufferApplyCursor>,a0
    2604:	|        |      move.l a0,d1
    2606:	|        |      addq.l #2,d1
    2608:	|        |      move.l d1,1c90e <CstBackDropBufferApplyCursor>
    260e:	|        |      add.w 78(sp),d0
    2612:	|        |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = blitheight;
    2614:	|        |      movea.l 1c90e <CstBackDropBufferApplyCursor>,a0
    261a:	|        |      move.l a0,d0
    261c:	|        |      addq.l #2,d0
    261e:	|        |      move.l d0,1c90e <CstBackDropBufferApplyCursor>
    2624:	|        |      move.l 44(sp),d0
    2628:	|        |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = 0;
    262a:	|        |      movea.l 1c90e <CstBackDropBufferApplyCursor>,a0
    2630:	|        |      move.l a0,d0
    2632:	|        |      addq.l #2,d0
    2634:	|        |      move.l d0,1c90e <CstBackDropBufferApplyCursor>
    263a:	|        |      clr.w (a0)
    *CstBackDropBufferApplyCursor++ = ystartdst;
    263c:	|        |      movea.l 1c90e <CstBackDropBufferApplyCursor>,a0
    2642:	|        |      move.l a0,d0
    2644:	|        |      addq.l #2,d0
    2646:	|        |      move.l d0,1c90e <CstBackDropBufferApplyCursor>
    264c:	|        |      move.l 52(sp),d0
    2650:	|        |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = 0;
    2652:	|        |      movea.l 1c90e <CstBackDropBufferApplyCursor>,a0
    2658:	|        |      move.l a0,d0
    265a:	|        |      addq.l #2,d0
    265c:	|        |      move.l d0,1c90e <CstBackDropBufferApplyCursor>
    2662:	|        |      clr.w (a0)
    2664:	|     /--|----- bra.w 297c <CstPasteChar+0x59e>

  } else if(x + single->width > (int) winWidth) { //Rightmost part outside screen   
    2668:	|     |  \----> movea.w 10(sp),a1
    266c:	|     |         movea.l 84(sp),a0
    2670:	|     |         move.l (a0),d0
    2672:	|     |         move.l a1,d1
    2674:	|     |         add.l d0,d1
    2676:	|     |         move.l 1c91e <winWidth>,d0
    267c:	|     |         cmp.l d1,d0
    267e:	|     |  /----- bge.w 281a <CstPasteChar+0x43c>

    if(x - single->width > (int) winWidth)
    2682:	|     |  |      movea.w 10(sp),a1
    2686:	|     |  |      movea.l 84(sp),a0
    268a:	|     |  |      move.l (a0),d0
    268c:	|     |  |      move.l a1,d1
    268e:	|     |  |      sub.l d0,d1
    2690:	|     |  |      move.l 1c91e <winWidth>,d0
    2696:	|     |  |      cmp.l d1,d0
    2698:	|     |  |  /-- bge.s 26ac <CstPasteChar+0x2ce>
    {    
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    269a:	|     |  |  |   pea 18090 <PutChar+0x372>
    26a0:	|     |  |  |   jsr 17254 <KPrintF>
    26a6:	|     |  |  |   addq.l #4,sp
      return;
    26a8:	+-----|--|--|-- bra.w 2b1c <CstPasteChar+0x73e>
    }
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    26ac:	|     |  |  \-> clr.w 78(sp)
    cutwordssource = (x+single->width - winWidth)/16;
    26b0:	|     |  |      movea.w 10(sp),a1
    26b4:	|     |  |      movea.l 84(sp),a0
    26b8:	|     |  |      move.l (a0),d0
    26ba:	|     |  |      add.l a1,d0
    26bc:	|     |  |      move.l d0,d1
    26be:	|     |  |      move.l 1c91e <winWidth>,d0
    26c4:	|     |  |      sub.l d0,d1
    26c6:	|     |  |      move.l d1,d0
    26c8:	|     |  |      lsr.l #4,d0
    26ca:	|     |  |      move.w d0,76(sp)
    cutmaskpixel = 0;
    26ce:	|     |  |      clr.w 74(sp)
    bltalwm = 0xffff; //Last word contains source data to be blit
    26d2:	|     |  |      move.w #-1,72(sp)
    bltapt = (ULONG) single->data+ystartsrc*single->width/8;
    26d8:	|     |  |      movea.l 84(sp),a0
    26dc:	|     |  |      move.l 24(a0),d0
    26e0:	|     |  |      move.l d0,d2
    26e2:	|     |  |      movea.l 84(sp),a0
    26e6:	|     |  |      move.l (a0),d0
    26e8:	|     |  |      move.l 48(sp),-(sp)
    26ec:	|     |  |      move.l d0,-(sp)
    26ee:	|     |  |      jsr 17c08 <__mulsi3>
    26f4:	|     |  |      addq.l #8,sp
    26f6:	|     |  |      lsr.l #3,d0
    26f8:	|     |  |      move.l d2,d1
    26fa:	|     |  |      add.l d0,d1
    26fc:	|     |  |      move.l d1,68(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    2700:	|     |  |      move.l 1c91e <winWidth>,d0
    2706:	|     |  |      move.l 52(sp),-(sp)
    270a:	|     |  |      move.l d0,-(sp)
    270c:	|     |  |      jsr 17c08 <__mulsi3>
    2712:	|     |  |      addq.l #8,sp
    2714:	|     |  |      lsr.l #3,d0
    2716:	|     |  |      move.l 28(sp),d1
    271a:	|     |  |      add.l d0,d1
    271c:	|     |  |      move.w 10(sp),d0
    2720:	|     |  |  /-- bpl.s 2726 <CstPasteChar+0x348>
    2722:	|     |  |  |   addi.w #15,d0
    2726:	|     |  |  \-> asr.w #4,d0
    2728:	|     |  |      movea.w d0,a0
    272a:	|     |  |      move.l a0,d0
    272c:	|     |  |      add.l a0,d0
    272e:	|     |  |      move.l d1,d2
    2730:	|     |  |      add.l d0,d2
    2732:	|     |  |      move.l d2,64(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    2736:	|     |  |      move.l 1c91e <winWidth>,d0
    273c:	|     |  |      move.l 52(sp),-(sp)
    2740:	|     |  |      move.l d0,-(sp)
    2742:	|     |  |      jsr 17c08 <__mulsi3>
    2748:	|     |  |      addq.l #8,sp
    274a:	|     |  |      lsr.l #3,d0
    274c:	|     |  |      move.l 28(sp),d1
    2750:	|     |  |      add.l d0,d1
    2752:	|     |  |      move.w 10(sp),d0
    2756:	|     |  |  /-- bpl.s 275c <CstPasteChar+0x37e>
    2758:	|     |  |  |   addi.w #15,d0
    275c:	|     |  |  \-> asr.w #4,d0
    275e:	|     |  |      movea.w d0,a0
    2760:	|     |  |      move.l a0,d0
    2762:	|     |  |      add.l a0,d0
    2764:	|     |  |      move.l d1,d2
    2766:	|     |  |      add.l d0,d2
    2768:	|     |  |      move.l d2,60(sp)
    bltcon0 = ((single->width%16) << 12);    
    276c:	|     |  |      movea.l 84(sp),a0
    2770:	|     |  |      move.l (a0),d0
    2772:	|     |  |      andi.l #-2147483633,d0
    2778:	|     |  |  /-- bpl.s 2782 <CstPasteChar+0x3a4>
    277a:	|     |  |  |   subq.l #1,d0
    277c:	|     |  |  |   moveq #-16,d1
    277e:	|     |  |  |   or.l d1,d0
    2780:	|     |  |  |   addq.l #1,d0
    2782:	|     |  |  \-> moveq #12,d2
    2784:	|     |  |      lsl.l d2,d0
    2786:	|     |  |      move.l d0,56(sp)
    
    *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource;
    278a:	|     |  |      movea.l 84(sp),a0
    278e:	|     |  |      move.l (a0),d0
    2790:	|     |  |      movea.l d0,a0
    2792:	|     |  |      cmpa.w #0,a0
    2796:	|     |  |  /-- bge.s 279c <CstPasteChar+0x3be>
    2798:	|     |  |  |   lea 15(a0),a0
    279c:	|     |  |  \-> move.l a0,d0
    279e:	|     |  |      asr.l #4,d0
    27a0:	|     |  |      move.l d0,d0
    27a2:	|     |  |      movea.l 1c90e <CstBackDropBufferApplyCursor>,a0
    27a8:	|     |  |      move.l a0,d1
    27aa:	|     |  |      addq.l #2,d1
    27ac:	|     |  |      move.l d1,1c90e <CstBackDropBufferApplyCursor>
    27b2:	|     |  |      add.w 76(sp),d0
    27b6:	|     |  |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = blitheight;
    27b8:	|     |  |      movea.l 1c90e <CstBackDropBufferApplyCursor>,a0
    27be:	|     |  |      move.l a0,d0
    27c0:	|     |  |      addq.l #2,d0
    27c2:	|     |  |      move.l d0,1c90e <CstBackDropBufferApplyCursor>
    27c8:	|     |  |      move.l 44(sp),d0
    27cc:	|     |  |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = (x/16)*2;
    27ce:	|     |  |      move.w 10(sp),d0
    27d2:	|     |  |  /-- bpl.s 27d8 <CstPasteChar+0x3fa>
    27d4:	|     |  |  |   addi.w #15,d0
    27d8:	|     |  |  \-> asr.w #4,d0
    27da:	|     |  |      movea.l 1c90e <CstBackDropBufferApplyCursor>,a0
    27e0:	|     |  |      move.l a0,d1
    27e2:	|     |  |      addq.l #2,d1
    27e4:	|     |  |      move.l d1,1c90e <CstBackDropBufferApplyCursor>
    27ea:	|     |  |      add.w d0,d0
    27ec:	|     |  |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = ystartdst;
    27ee:	|     |  |      movea.l 1c90e <CstBackDropBufferApplyCursor>,a0
    27f4:	|     |  |      move.l a0,d0
    27f6:	|     |  |      addq.l #2,d0
    27f8:	|     |  |      move.l d0,1c90e <CstBackDropBufferApplyCursor>
    27fe:	|     |  |      move.l 52(sp),d0
    2802:	|     |  |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = 0;
    2804:	|     |  |      movea.l 1c90e <CstBackDropBufferApplyCursor>,a0
    280a:	|     |  |      move.l a0,d0
    280c:	|     |  |      addq.l #2,d0
    280e:	|     |  |      move.l d0,1c90e <CstBackDropBufferApplyCursor>
    2814:	|     |  |      clr.w (a0)
    2816:	|     +--|----- bra.w 297c <CstPasteChar+0x59e>
    
  } else { //Whole Sprite on Screen

    extrawords = 1;
    281a:	|     |  \----> move.w #1,78(sp)
    cutwordssource = 0;
    2820:	|     |         clr.w 76(sp)
    cutmaskpixel = 0;
    2824:	|     |         clr.w 74(sp)
    bltalwm = 0; //Last Word of this channel almost masked out
    2828:	|     |         clr.w 72(sp)
    bltapt = (ULONG) single->data+ystartsrc*(single->width/16)*2;
    282c:	|     |         movea.l 84(sp),a0
    2830:	|     |         move.l 24(a0),d0
    2834:	|     |         move.l d0,d2
    2836:	|     |         movea.l 84(sp),a0
    283a:	|     |         move.l (a0),d0
    283c:	|     |         movea.l d0,a0
    283e:	|     |         cmpa.w #0,a0
    2842:	|     |     /-- bge.s 2848 <CstPasteChar+0x46a>
    2844:	|     |     |   lea 15(a0),a0
    2848:	|     |     \-> move.l a0,d0
    284a:	|     |         asr.l #4,d0
    284c:	|     |         move.l 48(sp),-(sp)
    2850:	|     |         move.l d0,-(sp)
    2852:	|     |         jsr 17c08 <__mulsi3>
    2858:	|     |         addq.l #8,sp
    285a:	|     |         add.l d0,d0
    285c:	|     |         move.l d2,d1
    285e:	|     |         add.l d0,d1
    2860:	|     |         move.l d1,68(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    2864:	|     |         move.l 1c91e <winWidth>,d0
    286a:	|     |         move.l 52(sp),-(sp)
    286e:	|     |         move.l d0,-(sp)
    2870:	|     |         jsr 17c08 <__mulsi3>
    2876:	|     |         addq.l #8,sp
    2878:	|     |         lsr.l #3,d0
    287a:	|     |         move.l 28(sp),d1
    287e:	|     |         add.l d0,d1
    2880:	|     |         move.w 10(sp),d0
    2884:	|     |     /-- bpl.s 288a <CstPasteChar+0x4ac>
    2886:	|     |     |   addi.w #15,d0
    288a:	|     |     \-> asr.w #4,d0
    288c:	|     |         movea.w d0,a0
    288e:	|     |         move.l a0,d0
    2890:	|     |         add.l a0,d0
    2892:	|     |         move.l d1,d2
    2894:	|     |         add.l d0,d2
    2896:	|     |         move.l d2,64(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    289a:	|     |         move.l 1c91e <winWidth>,d0
    28a0:	|     |         move.l 52(sp),-(sp)
    28a4:	|     |         move.l d0,-(sp)
    28a6:	|     |         jsr 17c08 <__mulsi3>
    28ac:	|     |         addq.l #8,sp
    28ae:	|     |         lsr.l #3,d0
    28b0:	|     |         move.l 28(sp),d1
    28b4:	|     |         add.l d0,d1
    28b6:	|     |         move.w 10(sp),d0
    28ba:	|     |     /-- bpl.s 28c0 <CstPasteChar+0x4e2>
    28bc:	|     |     |   addi.w #15,d0
    28c0:	|     |     \-> asr.w #4,d0
    28c2:	|     |         movea.w d0,a0
    28c4:	|     |         move.l a0,d0
    28c6:	|     |         add.l a0,d0
    28c8:	|     |         move.l d1,d2
    28ca:	|     |         add.l d0,d2
    28cc:	|     |         move.l d2,60(sp)
    bltcon0 = ((x%16) << 12);
    28d0:	|     |         move.w 10(sp),d0
    28d4:	|     |         andi.w #-32753,d0
    28d8:	|     |     /-- bpl.s 28e2 <CstPasteChar+0x504>
    28da:	|     |     |   subq.w #1,d0
    28dc:	|     |     |   ori.w #-16,d0
    28e0:	|     |     |   addq.w #1,d0
    28e2:	|     |     \-> ext.l d0
    28e4:	|     |         moveq #12,d1
    28e6:	|     |         lsl.l d1,d0
    28e8:	|     |         move.l d0,56(sp)

    *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    28ec:	|     |         movea.l 84(sp),a0
    28f0:	|     |         move.l (a0),d0
    28f2:	|     |         movea.l d0,a0
    28f4:	|     |         cmpa.w #0,a0
    28f8:	|     |     /-- bge.s 28fe <CstPasteChar+0x520>
    28fa:	|     |     |   lea 15(a0),a0
    28fe:	|     |     \-> move.l a0,d0
    2900:	|     |         asr.l #4,d0
    2902:	|     |         move.l d0,d0
    2904:	|     |         add.w 76(sp),d0
    2908:	|     |         movea.l 1c90e <CstBackDropBufferApplyCursor>,a0
    290e:	|     |         move.l a0,d1
    2910:	|     |         addq.l #2,d1
    2912:	|     |         move.l d1,1c90e <CstBackDropBufferApplyCursor>
    2918:	|     |         add.w 78(sp),d0
    291c:	|     |         move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = blitheight;
    291e:	|     |         movea.l 1c90e <CstBackDropBufferApplyCursor>,a0
    2924:	|     |         move.l a0,d0
    2926:	|     |         addq.l #2,d0
    2928:	|     |         move.l d0,1c90e <CstBackDropBufferApplyCursor>
    292e:	|     |         move.l 44(sp),d0
    2932:	|     |         move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = (x/16)*2;
    2934:	|     |         move.w 10(sp),d0
    2938:	|     |     /-- bpl.s 293e <CstPasteChar+0x560>
    293a:	|     |     |   addi.w #15,d0
    293e:	|     |     \-> asr.w #4,d0
    2940:	|     |         movea.l 1c90e <CstBackDropBufferApplyCursor>,a0
    2946:	|     |         move.l a0,d1
    2948:	|     |         addq.l #2,d1
    294a:	|     |         move.l d1,1c90e <CstBackDropBufferApplyCursor>
    2950:	|     |         add.w d0,d0
    2952:	|     |         move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = ystartdst;
    2954:	|     |         movea.l 1c90e <CstBackDropBufferApplyCursor>,a0
    295a:	|     |         move.l a0,d0
    295c:	|     |         addq.l #2,d0
    295e:	|     |         move.l d0,1c90e <CstBackDropBufferApplyCursor>
    2964:	|     |         move.l 52(sp),d0
    2968:	|     |         move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = 0;
    296a:	|     |         movea.l 1c90e <CstBackDropBufferApplyCursor>,a0
    2970:	|     |         move.l a0,d0
    2972:	|     |         addq.l #2,d0
    2974:	|     |         move.l d0,1c90e <CstBackDropBufferApplyCursor>
    297a:	|     |         clr.w (a0)
    
  }

  UWORD bltafwm = 0xffff >> cutmaskpixel;
    297c:	|     \-------> moveq #0,d0
    297e:	|               move.w 74(sp),d0
    2982:	|               moveq #0,d1
    2984:	|               not.w d1
    2986:	|               asr.l d0,d1
    2988:	|               move.w d1,26(sp)
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    298c:	|               moveq #0,d1
    298e:	|               move.w 76(sp),d1
    2992:	|               moveq #0,d0
    2994:	|               move.w 78(sp),d0
    2998:	|               sub.l d0,d1
    299a:	|               move.l d1,d0
    299c:	|               add.w d0,d0
    299e:	|               move.w d0,24(sp)
  WORD bltcmod = winWidth/8-blitwidth*2-extrawords*2+cutwordssource*2;
    29a2:	|               move.l 1c91e <winWidth>,d0
    29a8:	|               lsr.l #3,d0
    29aa:	|               move.l d0,d2
    29ac:	|               move.w 76(sp),d1
    29b0:	|               sub.w 78(sp),d1
    29b4:	|               move.l 40(sp),d0
    29b8:	|               sub.w d0,d1
    29ba:	|               move.w d1,d0
    29bc:	|               add.w d1,d0
    29be:	|               add.w d2,d0
    29c0:	|               move.w d0,22(sp)
  WORD bltdmod = winWidth/8-blitwidth*2-extrawords*2+cutwordssource*2;
    29c4:	|               move.l 1c91e <winWidth>,d0
    29ca:	|               lsr.l #3,d0
    29cc:	|               move.l d0,d2
    29ce:	|               move.w 76(sp),d1
    29d2:	|               sub.w 78(sp),d1
    29d6:	|               move.l 40(sp),d0
    29da:	|               sub.w d0,d1
    29dc:	|               move.w d1,d0
    29de:	|               add.w d1,d0
    29e0:	|               add.w d2,d0
    29e2:	|               move.w d0,20(sp)

  volatile struct Custom *custom = (struct Custom*)0xdff000;
    29e6:	|               move.l #14675968,16(sp)
  WaitBlit();
    29ee:	|               move.l 1c9d6 <GfxBase>,d0
    29f4:	|               movea.l d0,a6
    29f6:	|               jsr -228(a6)

  custom->bltafwm = bltafwm;
    29fa:	|               movea.l 16(sp),a0
    29fe:	|               move.w 26(sp),68(a0)
  custom->bltalwm = bltalwm;
    2a04:	|               movea.l 16(sp),a0
    2a08:	|               move.w 72(sp),70(a0)
  custom->bltamod = bltamod;
    2a0e:	|               move.w 24(sp),d0
    2a12:	|               movea.l 16(sp),a0
    2a16:	|               move.w d0,100(a0)
  custom->bltcmod = bltcmod;
    2a1a:	|               move.w 22(sp),d0
    2a1e:	|               movea.l 16(sp),a0
    2a22:	|               move.w d0,96(a0)
  custom->bltdmod = bltdmod;
    2a26:	|               move.w 20(sp),d0
    2a2a:	|               movea.l 16(sp),a0
    2a2e:	|               move.w d0,102(a0)

  UWORD bltcptplus = winWidth/8*winHeight;
    2a32:	|               move.l 1c91e <winWidth>,d0
    2a38:	|               lsr.l #3,d0
    2a3a:	|               move.l d0,d1
    2a3c:	|               move.l 1c922 <winHeight>,d0
    2a42:	|               move.l d0,d0
    2a44:	|               move.w d1,d2
    2a46:	|               muls.w d0,d2
    2a48:	|               move.w d2,14(sp)
  UWORD tmp = textPaletteIndex;
    2a4c:	|               move.w 1c8e4 <textPaletteIndex>,38(sp)

  UWORD minterm;
  //Apply palette color to planeblit
  //Ugly double code in the name of performance
  UWORD tmp2 = tmp & 0x01;
    2a54:	|               move.w 38(sp),d0
    2a58:	|               andi.w #1,d0
    2a5c:	|               move.w d0,12(sp)
  if(tmp2) {
    2a60:	|        /----- beq.s 2a6a <CstPasteChar+0x68c>
    minterm = 0xbfa;
    2a62:	|        |      move.w #3066,36(sp)
    2a68:	|        |  /-- bra.s 2a70 <CstPasteChar+0x692>
  } else {
    minterm = 0xb0a;
    2a6a:	|        \--|-> move.w #2826,36(sp)
  }

  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2a70:	|           \-> clr.l 32(sp)
    2a74:	|     /-------- bra.w 2b12 <CstPasteChar+0x734>
  {

    custom->bltcon0 = bltcon0 + minterm;
    2a78:	|  /--|-------> move.l 56(sp),d0
    2a7c:	|  |  |         add.w 36(sp),d0
    2a80:	|  |  |         movea.l 16(sp),a0
    2a84:	|  |  |         move.w d0,64(a0)
    custom->bltapt = (APTR) bltapt;
    2a88:	|  |  |         move.l 68(sp),d0
    2a8c:	|  |  |         movea.l 16(sp),a0
    2a90:	|  |  |         move.l d0,80(a0)
    custom->bltcpt = (APTR) bltcpt;
    2a94:	|  |  |         move.l 64(sp),d0
    2a98:	|  |  |         movea.l 16(sp),a0
    2a9c:	|  |  |         move.l d0,72(a0)
    custom->bltdpt = (APTR) bltdpt;
    2aa0:	|  |  |         move.l 60(sp),d0
    2aa4:	|  |  |         movea.l 16(sp),a0
    2aa8:	|  |  |         move.l d0,84(a0)
    custom->bltsize = (blitheight << 6) + blitwidth-cutwordssource+extrawords;
    2aac:	|  |  |         move.l 44(sp),d0
    2ab0:	|  |  |         lsl.w #6,d0
    2ab2:	|  |  |         move.l 40(sp),d1
    2ab6:	|  |  |         add.w d1,d0
    2ab8:	|  |  |         sub.w 76(sp),d0
    2abc:	|  |  |         add.w 78(sp),d0
    2ac0:	|  |  |         movea.l 16(sp),a0
    2ac4:	|  |  |         move.w d0,88(a0)
    bltcpt += bltcptplus;
    2ac8:	|  |  |         moveq #0,d0
    2aca:	|  |  |         move.w 14(sp),d0
    2ace:	|  |  |         add.l d0,64(sp)
    bltdpt += bltcptplus;
    2ad2:	|  |  |         moveq #0,d0
    2ad4:	|  |  |         move.w 14(sp),d0
    2ad8:	|  |  |         add.l d0,60(sp)

    //Apply palette color to planeblit
    //Ugly double code in the name of performance
    tmp = tmp >> 1;
    2adc:	|  |  |         move.w 38(sp),d0
    2ae0:	|  |  |         lsr.w #1,d0
    2ae2:	|  |  |         move.w d0,38(sp)
    tmp2 = tmp & 0x01;
    2ae6:	|  |  |         move.w 38(sp),d1
    2aea:	|  |  |         andi.w #1,d1
    2aee:	|  |  |         move.w d1,12(sp)
    if(tmp2) {
    2af2:	|  |  |  /----- beq.s 2afc <CstPasteChar+0x71e>
      minterm = 0xbfa;
    2af4:	|  |  |  |      move.w #3066,36(sp)
    2afa:	|  |  |  |  /-- bra.s 2b02 <CstPasteChar+0x724>
    } else {
      minterm = 0xb0a;
    2afc:	|  |  |  \--|-> move.w #2826,36(sp)
    }   

    WaitBlit();    
    2b02:	|  |  |     \-> move.l 1c9d6 <GfxBase>,d0
    2b08:	|  |  |         movea.l d0,a6
    2b0a:	|  |  |         jsr -228(a6)
  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2b0e:	|  |  |         addq.l #1,32(sp)
    2b12:	|  |  \-------> moveq #4,d2
    2b14:	|  |            cmp.l 32(sp),d2
    2b18:	|  \----------- bge.w 2a78 <CstPasteChar+0x69a>
 
  }   
}
    2b1c:	\-------------> move.l (sp)+,d2
    2b1e:	                movea.l (sp)+,a6
    2b20:	                lea 72(sp),sp
    2b24:	                rts

00002b26 <CstRestoreScreen>:


void CstRestoreScreen()
{
    2b26:	                   lea -24(sp),sp
    2b2a:	                   move.l a6,-(sp)
    2b2c:	                   move.l d2,-(sp)
  volatile struct Custom *custom = (struct Custom*)0xdff000;  
    2b2e:	                   move.l #14675968,16(sp)

  //struct CleanupQueue *cursor  = CstCleanupQueueDrawBuffer;
  if(!CstCleanupQueueDrawBuffer || !CstDrawBuffer) {
    2b36:	                   move.l 1c906 <CstCleanupQueueDrawBuffer>,d0
    2b3c:	/----------------- beq.w 2d44 <CstRestoreScreen+0x21e>
    2b40:	|                  move.l 1c8fe <CstDrawBuffer>,d0
    2b46:	+----------------- beq.w 2d44 <CstRestoreScreen+0x21e>
    return;
  } 

  WaitBlit();
    2b4a:	|                  move.l 1c9d6 <GfxBase>,d0
    2b50:	|                  movea.l d0,a6
    2b52:	|                  jsr -228(a6)
  
  custom->bltafwm = 0xffff;
    2b56:	|                  movea.l 16(sp),a0
    2b5a:	|                  move.w #-1,68(a0)
  custom->bltalwm = 0xffff;  
    2b60:	|                  movea.l 16(sp),a0
    2b64:	|                  move.w #-1,70(a0)
  custom->bltcon0 = 0x9f0;
    2b6a:	|                  movea.l 16(sp),a0
    2b6e:	|                  move.w #2544,64(a0)
  
  while(CstCleanupQueueDrawBuffer)
    2b74:	|     /----------- bra.w 2d38 <CstRestoreScreen+0x212>
  {    

    if( CstCleanupQueueDrawBuffer->person && CstCleanupQueueDrawBuffer->person->samePosCount < 3)
    2b78:	|  /--|----------> movea.l 1c906 <CstCleanupQueueDrawBuffer>,a0
    2b7e:	|  |  |            move.l 4(a0),d0
    2b82:	|  |  |  /-------- beq.w 2d06 <CstRestoreScreen+0x1e0>
    2b86:	|  |  |  |         movea.l 1c906 <CstCleanupQueueDrawBuffer>,a0
    2b8c:	|  |  |  |         movea.l 4(a0),a0
    2b90:	|  |  |  |         move.l 16(a0),d0
    2b94:	|  |  |  |         moveq #2,d1
    2b96:	|  |  |  |         cmp.l d0,d1
    2b98:	|  |  |  +-------- blt.w 2d06 <CstRestoreScreen+0x1e0>
    {
      custom->bltamod = winWidth/8-CstCleanupQueueDrawBuffer->widthinwords*2;
    2b9c:	|  |  |  |         move.l 1c91e <winWidth>,d0
    2ba2:	|  |  |  |         lsr.l #3,d0
    2ba4:	|  |  |  |         move.l d0,d1
    2ba6:	|  |  |  |         movea.l 1c906 <CstCleanupQueueDrawBuffer>,a0
    2bac:	|  |  |  |         move.w 8(a0),d0
    2bb0:	|  |  |  |         add.w d0,d0
    2bb2:	|  |  |  |         sub.w d0,d1
    2bb4:	|  |  |  |         movea.l 16(sp),a0
    2bb8:	|  |  |  |         move.w d1,100(a0)
      custom->bltdmod = winWidth/8-CstCleanupQueueDrawBuffer->widthinwords*2;
    2bbc:	|  |  |  |         move.l 1c91e <winWidth>,d0
    2bc2:	|  |  |  |         lsr.l #3,d0
    2bc4:	|  |  |  |         move.l d0,d1
    2bc6:	|  |  |  |         movea.l 1c906 <CstCleanupQueueDrawBuffer>,a0
    2bcc:	|  |  |  |         move.w 8(a0),d0
    2bd0:	|  |  |  |         add.w d0,d0
    2bd2:	|  |  |  |         sub.w d0,d1
    2bd4:	|  |  |  |         movea.l 16(sp),a0
    2bd8:	|  |  |  |         move.w d1,102(a0)
      ULONG bltapt = ((ULONG) CstBackDrop) + CstCleanupQueueDrawBuffer->starty*winWidth/8 + CstCleanupQueueDrawBuffer->startxinbytes;
    2bdc:	|  |  |  |         movea.l 1c906 <CstCleanupQueueDrawBuffer>,a0
    2be2:	|  |  |  |         move.w 14(a0),d0
    2be6:	|  |  |  |         move.w d0,d0
    2be8:	|  |  |  |         andi.l #65535,d0
    2bee:	|  |  |  |         move.l 1c91e <winWidth>,d1
    2bf4:	|  |  |  |         move.l d1,-(sp)
    2bf6:	|  |  |  |         move.l d0,-(sp)
    2bf8:	|  |  |  |         jsr 17c08 <__mulsi3>
    2bfe:	|  |  |  |         addq.l #8,sp
    2c00:	|  |  |  |         move.l d0,d1
    2c02:	|  |  |  |         lsr.l #3,d1
    2c04:	|  |  |  |         move.l 1c8ec <CstBackDrop>,d0
    2c0a:	|  |  |  |         add.l d0,d1
    2c0c:	|  |  |  |         movea.l 1c906 <CstCleanupQueueDrawBuffer>,a0
    2c12:	|  |  |  |         move.w 12(a0),d0
    2c16:	|  |  |  |         move.w d0,d0
    2c18:	|  |  |  |         andi.l #65535,d0
    2c1e:	|  |  |  |         move.l d1,d2
    2c20:	|  |  |  |         add.l d0,d2
    2c22:	|  |  |  |         move.l d2,28(sp)
      ULONG bltdpt = ((ULONG) CstDrawBuffer) + CstCleanupQueueDrawBuffer->starty*winWidth/8 + CstCleanupQueueDrawBuffer->startxinbytes;
    2c26:	|  |  |  |         movea.l 1c906 <CstCleanupQueueDrawBuffer>,a0
    2c2c:	|  |  |  |         move.w 14(a0),d0
    2c30:	|  |  |  |         move.w d0,d0
    2c32:	|  |  |  |         andi.l #65535,d0
    2c38:	|  |  |  |         move.l 1c91e <winWidth>,d1
    2c3e:	|  |  |  |         move.l d1,-(sp)
    2c40:	|  |  |  |         move.l d0,-(sp)
    2c42:	|  |  |  |         jsr 17c08 <__mulsi3>
    2c48:	|  |  |  |         addq.l #8,sp
    2c4a:	|  |  |  |         move.l d0,d1
    2c4c:	|  |  |  |         lsr.l #3,d1
    2c4e:	|  |  |  |         move.l 1c8fe <CstDrawBuffer>,d0
    2c54:	|  |  |  |         add.l d0,d1
    2c56:	|  |  |  |         movea.l 1c906 <CstCleanupQueueDrawBuffer>,a0
    2c5c:	|  |  |  |         move.w 12(a0),d0
    2c60:	|  |  |  |         move.w d0,d0
    2c62:	|  |  |  |         andi.l #65535,d0
    2c68:	|  |  |  |         move.l d1,d2
    2c6a:	|  |  |  |         add.l d0,d2
    2c6c:	|  |  |  |         move.l d2,24(sp)
      for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2c70:	|  |  |  |         clr.l 20(sp)
    2c74:	|  |  |  |     /-- bra.w 2cfc <CstRestoreScreen+0x1d6>
      {
        custom->bltapt = (APTR) bltapt;
    2c78:	|  |  |  |  /--|-> move.l 28(sp),d0
    2c7c:	|  |  |  |  |  |   movea.l 16(sp),a0
    2c80:	|  |  |  |  |  |   move.l d0,80(a0)
        custom->bltdpt = (APTR) bltdpt;
    2c84:	|  |  |  |  |  |   move.l 24(sp),d0
    2c88:	|  |  |  |  |  |   movea.l 16(sp),a0
    2c8c:	|  |  |  |  |  |   move.l d0,84(a0)
        custom->bltsize = (CstCleanupQueueDrawBuffer->height << 6) + CstCleanupQueueDrawBuffer->widthinwords;
    2c90:	|  |  |  |  |  |   movea.l 1c906 <CstCleanupQueueDrawBuffer>,a0
    2c96:	|  |  |  |  |  |   move.w 10(a0),d0
    2c9a:	|  |  |  |  |  |   lsl.w #6,d0
    2c9c:	|  |  |  |  |  |   movea.l 1c906 <CstCleanupQueueDrawBuffer>,a0
    2ca2:	|  |  |  |  |  |   move.w 8(a0),d1
    2ca6:	|  |  |  |  |  |   add.w d1,d0
    2ca8:	|  |  |  |  |  |   movea.l 16(sp),a0
    2cac:	|  |  |  |  |  |   move.w d0,88(a0)
        bltapt += winWidth/8*winHeight;
    2cb0:	|  |  |  |  |  |   move.l 1c91e <winWidth>,d0
    2cb6:	|  |  |  |  |  |   lsr.l #3,d0
    2cb8:	|  |  |  |  |  |   move.l 1c922 <winHeight>,d1
    2cbe:	|  |  |  |  |  |   move.l d1,-(sp)
    2cc0:	|  |  |  |  |  |   move.l d0,-(sp)
    2cc2:	|  |  |  |  |  |   jsr 17c08 <__mulsi3>
    2cc8:	|  |  |  |  |  |   addq.l #8,sp
    2cca:	|  |  |  |  |  |   add.l d0,28(sp)
        bltdpt += winWidth/8*winHeight;
    2cce:	|  |  |  |  |  |   move.l 1c91e <winWidth>,d0
    2cd4:	|  |  |  |  |  |   lsr.l #3,d0
    2cd6:	|  |  |  |  |  |   move.l 1c922 <winHeight>,d1
    2cdc:	|  |  |  |  |  |   move.l d1,-(sp)
    2cde:	|  |  |  |  |  |   move.l d0,-(sp)
    2ce0:	|  |  |  |  |  |   jsr 17c08 <__mulsi3>
    2ce6:	|  |  |  |  |  |   addq.l #8,sp
    2ce8:	|  |  |  |  |  |   add.l d0,24(sp)
        WaitBlit();
    2cec:	|  |  |  |  |  |   move.l 1c9d6 <GfxBase>,d0
    2cf2:	|  |  |  |  |  |   movea.l d0,a6
    2cf4:	|  |  |  |  |  |   jsr -228(a6)
      for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2cf8:	|  |  |  |  |  |   addq.l #1,20(sp)
    2cfc:	|  |  |  |  |  \-> moveq #4,d0
    2cfe:	|  |  |  |  |      cmp.l 20(sp),d0
    2d02:	|  |  |  |  \----- bge.w 2c78 <CstRestoreScreen+0x152>
      }
    }
    struct CleanupQueue *todelete = CstCleanupQueueDrawBuffer;
    2d06:	|  |  |  \-------> move.l 1c906 <CstCleanupQueueDrawBuffer>,12(sp)
    CstCleanupQueueDrawBuffer = CstCleanupQueueDrawBuffer->next;  
    2d0e:	|  |  |            movea.l 1c906 <CstCleanupQueueDrawBuffer>,a0
    2d14:	|  |  |            move.l 16(a0),d0
    2d18:	|  |  |            move.l d0,1c906 <CstCleanupQueueDrawBuffer>
    FreeVec(todelete);    
    2d1e:	|  |  |            move.l 12(sp),8(sp)
    2d24:	|  |  |            move.l 1c9ca <SysBase>,d0
    2d2a:	|  |  |            movea.l d0,a6
    2d2c:	|  |  |            movea.l 8(sp),a1
    2d30:	|  |  |            jsr -690(a6)
    todelete = NULL;
    2d34:	|  |  |            clr.l 12(sp)
  while(CstCleanupQueueDrawBuffer)
    2d38:	|  |  \----------> move.l 1c906 <CstCleanupQueueDrawBuffer>,d0
    2d3e:	|  \-------------- bne.w 2b78 <CstRestoreScreen+0x52>
    2d42:	|              /-- bra.s 2d46 <CstRestoreScreen+0x220>
    return;
    2d44:	\--------------|-> nop
  }
  
}
    2d46:	               \-> move.l (sp)+,d2
    2d48:	                   movea.l (sp)+,a6
    2d4a:	                   lea 24(sp),sp
    2d4e:	                   rts

00002d50 <CstScaleSprite>:

void CstScaleSprite( struct sprite *single, struct onScreenPerson *person, WORD x, WORD y, UWORD destinationtype)
{  
    2d50:	                lea -132(sp),sp
    2d54:	                move.l a6,-(sp)
    2d56:	                move.l d2,-(sp)
    2d58:	                movea.l 152(sp),a0
    2d5c:	                move.l 156(sp),d1
    2d60:	                move.l 160(sp),d0
    2d64:	                movea.w a0,a0
    2d66:	                move.w a0,12(sp)
    2d6a:	                move.w d1,d1
    2d6c:	                move.w d1,10(sp)
    2d70:	                move.w d0,d0
    2d72:	                move.w d0,8(sp)

  UBYTE *mask = CstDrawZBuffer( single, zBuffer, x, y);
    2d76:	                move.w 10(sp),d0
    2d7a:	                moveq #0,d1
    2d7c:	                move.w d0,d1
    2d7e:	                move.w 12(sp),d0
    2d82:	                move.w d0,d0
    2d84:	                andi.l #65535,d0
    2d8a:	                movea.l 1ca2a <zBuffer>,a0
    2d90:	                move.l d1,-(sp)
    2d92:	                move.l d0,-(sp)
    2d94:	                move.l a0,-(sp)
    2d96:	                move.l 156(sp),-(sp)
    2d9a:	                jsr 14e8 <CstDrawZBuffer>
    2da0:	                lea 16(sp),sp
    2da4:	                move.l d0,84(sp)

  UWORD *destination = 0;
    2da8:	                clr.l 136(sp)
  switch(destinationtype)
    2dac:	                moveq #0,d0
    2dae:	                move.w 8(sp),d0
    2db2:	                moveq #1,d1
    2db4:	                cmp.l d0,d1
    2db6:	            /-- beq.s 2dc0 <CstScaleSprite+0x70>
    2db8:	            |   moveq #2,d2
    2dba:	            |   cmp.l d0,d2
    2dbc:	         /--|-- beq.s 2dca <CstScaleSprite+0x7a>
    2dbe:	      /--|--|-- bra.s 2ddc <CstScaleSprite+0x8c>
  {
    case SCREEN:
      destination = (UWORD *) CstDrawBuffer;      
    2dc0:	      |  |  \-> move.l 1c8fe <CstDrawBuffer>,136(sp)
      break;
    2dc8:	      +--|----- bra.s 2ddc <CstScaleSprite+0x8c>
    case BACKDROP:      
      CstApplyBackDropCounter = 2;
    2dca:	      |  \----> move.w #2,1c8f8 <CstApplyBackDropCounter>
      destination = (UWORD *) CstBackDrop;      
    2dd2:	      |         move.l 1c8ec <CstBackDrop>,136(sp)
      break;
    2dda:	      |         nop
  ULONG bltcon1; //Shift Source
  ULONG ystartdst;
  ULONG ystartsrc; 
  ULONG blitheight;

  if( y < 0) {
    2ddc:	      \-------> tst.w 10(sp)
    2de0:	         /----- bge.s 2e28 <CstScaleSprite+0xd8>
    if(y + single->height < 0) {
    2de2:	         |      movea.w 10(sp),a1
    2de6:	         |      movea.l 144(sp),a0
    2dea:	         |      move.l 4(a0),d0
    2dee:	         |      add.l a1,d0
    2df0:	         |  /-- bpl.s 2e04 <CstScaleSprite+0xb4>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    2df2:	         |  |   pea 18090 <PutChar+0x372>
    2df8:	         |  |   jsr 17254 <KPrintF>
    2dfe:	         |  |   addq.l #4,sp
      return;
    2e00:	/--------|--|-- bra.w 383a <CstScaleSprite+0xaea>
    }
    ystartdst = 0;
    2e04:	|        |  \-> clr.l 100(sp)
    ystartsrc = y*-1;
    2e08:	|        |      move.w 10(sp),d0
    2e0c:	|        |      ext.l d0
    2e0e:	|        |      neg.l d0
    2e10:	|        |      move.l d0,96(sp)
    blitheight = single->height+y;
    2e14:	|        |      movea.l 144(sp),a0
    2e18:	|        |      move.l 4(a0),d0
    2e1c:	|        |      movea.w 10(sp),a0
    2e20:	|        |      add.l a0,d0
    2e22:	|        |      move.l d0,92(sp)
    2e26:	|     /--|----- bra.s 2e9a <CstScaleSprite+0x14a>
  } else if(y+single->height > (int) winHeight) {
    2e28:	|     |  \----> movea.w 10(sp),a1
    2e2c:	|     |         movea.l 144(sp),a0
    2e30:	|     |         move.l 4(a0),d0
    2e34:	|     |         move.l a1,d1
    2e36:	|     |         add.l d0,d1
    2e38:	|     |         move.l 1c922 <winHeight>,d0
    2e3e:	|     |         cmp.l d1,d0
    2e40:	|     |  /----- bge.s 2e82 <CstScaleSprite+0x132>
    if(y  > (int) winHeight) {
    2e42:	|     |  |      movea.w 10(sp),a0
    2e46:	|     |  |      move.l 1c922 <winHeight>,d0
    2e4c:	|     |  |      cmp.l a0,d0
    2e4e:	|     |  |  /-- bge.s 2e62 <CstScaleSprite+0x112>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    2e50:	|     |  |  |   pea 18090 <PutChar+0x372>
    2e56:	|     |  |  |   jsr 17254 <KPrintF>
    2e5c:	|     |  |  |   addq.l #4,sp
      return;
    2e5e:	+-----|--|--|-- bra.w 383a <CstScaleSprite+0xaea>
    }
    ystartdst = y;
    2e62:	|     |  |  \-> movea.w 10(sp),a0
    2e66:	|     |  |      move.l a0,100(sp)
    ystartsrc = 0;
    2e6a:	|     |  |      clr.l 96(sp)
    blitheight = winHeight-y;
    2e6e:	|     |  |      move.l 1c922 <winHeight>,d0
    2e74:	|     |  |      movea.w 10(sp),a0
    2e78:	|     |  |      move.l d0,d1
    2e7a:	|     |  |      sub.l a0,d1
    2e7c:	|     |  |      move.l d1,92(sp)
    2e80:	|     +--|----- bra.s 2e9a <CstScaleSprite+0x14a>
  } else {
    ystartdst = y;
    2e82:	|     |  \----> movea.w 10(sp),a0
    2e86:	|     |         move.l a0,100(sp)
    ystartsrc = 0;
    2e8a:	|     |         clr.l 96(sp)
    blitheight = single->height;
    2e8e:	|     |         movea.l 144(sp),a0
    2e92:	|     |         move.l 4(a0),d0
    2e96:	|     |         move.l d0,92(sp)
  }


  if( x < 0) { //Leftmost part outside screen
    2e9a:	|     \-------> tst.w 12(sp)
    2e9e:	|     /-------- bge.w 311e <CstScaleSprite+0x3ce>
    if(x + single->width < 0) {
    2ea2:	|     |         movea.w 12(sp),a1
    2ea6:	|     |         movea.l 144(sp),a0
    2eaa:	|     |         move.l (a0),d0
    2eac:	|     |         add.l a1,d0
    2eae:	|     |     /-- bpl.s 2ec2 <CstScaleSprite+0x172>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    2eb0:	|     |     |   pea 18090 <PutChar+0x372>
    2eb6:	|     |     |   jsr 17254 <KPrintF>
    2ebc:	|     |     |   addq.l #4,sp
      return;
    2ebe:	+-----|-----|-- bra.w 383a <CstScaleSprite+0xaea>

    }
    
    extrawords = 1;
    2ec2:	|     |     \-> move.w #1,134(sp)
    cutwordssource = (x*-1)/16; 
    2ec8:	|     |         move.w 12(sp),d0
    2ecc:	|     |     /-- bpl.s 2ed2 <CstScaleSprite+0x182>
    2ece:	|     |     |   addi.w #15,d0
    2ed2:	|     |     \-> asr.w #4,d0
    2ed4:	|     |         neg.w d0
    2ed6:	|     |         move.w d0,132(sp)
    cutmaskpixel = (x*-1)%16;     
    2eda:	|     |         move.w 12(sp),d0
    2ede:	|     |         ext.l d0
    2ee0:	|     |         neg.l d0
    2ee2:	|     |         andi.l #-2147483633,d0
    2ee8:	|     |     /-- bpl.s 2ef2 <CstScaleSprite+0x1a2>
    2eea:	|     |     |   subq.l #1,d0
    2eec:	|     |     |   moveq #-16,d1
    2eee:	|     |     |   or.l d1,d0
    2ef0:	|     |     |   addq.l #1,d0
    2ef2:	|     |     \-> move.w d0,130(sp)
    bltalwm = 0; //Last Word of this channel almost masked out
    2ef6:	|     |         clr.w 128(sp)
    bltapt = ((ULONG) mask)+cutwordssource*2+ystartsrc*single->width/8;
    2efa:	|     |         moveq #0,d0
    2efc:	|     |         move.w 132(sp),d0
    2f00:	|     |         add.l d0,d0
    2f02:	|     |         move.l d0,d1
    2f04:	|     |         move.l 84(sp),d0
    2f08:	|     |         move.l d1,d2
    2f0a:	|     |         add.l d0,d2
    2f0c:	|     |         movea.l 144(sp),a0
    2f10:	|     |         move.l (a0),d0
    2f12:	|     |         move.l 96(sp),-(sp)
    2f16:	|     |         move.l d0,-(sp)
    2f18:	|     |         jsr 17c08 <__mulsi3>
    2f1e:	|     |         addq.l #8,sp
    2f20:	|     |         lsr.l #3,d0
    2f22:	|     |         move.l d2,d1
    2f24:	|     |         add.l d0,d1
    2f26:	|     |         move.l d1,124(sp)
    bltbpt = ((ULONG) single->data)+cutwordssource*2+ystartsrc*single->width/8;
    2f2a:	|     |         movea.l 144(sp),a0
    2f2e:	|     |         move.l 24(a0),d0
    2f32:	|     |         move.l d0,d1
    2f34:	|     |         moveq #0,d0
    2f36:	|     |         move.w 132(sp),d0
    2f3a:	|     |         add.l d0,d0
    2f3c:	|     |         move.l d1,d2
    2f3e:	|     |         add.l d0,d2
    2f40:	|     |         movea.l 144(sp),a0
    2f44:	|     |         move.l (a0),d0
    2f46:	|     |         move.l 96(sp),-(sp)
    2f4a:	|     |         move.l d0,-(sp)
    2f4c:	|     |         jsr 17c08 <__mulsi3>
    2f52:	|     |         addq.l #8,sp
    2f54:	|     |         lsr.l #3,d0
    2f56:	|     |         move.l d2,d1
    2f58:	|     |         add.l d0,d1
    2f5a:	|     |         move.l d1,120(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    2f5e:	|     |         move.l 1c91e <winWidth>,d0
    2f64:	|     |         move.l 100(sp),-(sp)
    2f68:	|     |         move.l d0,-(sp)
    2f6a:	|     |         jsr 17c08 <__mulsi3>
    2f70:	|     |         addq.l #8,sp
    2f72:	|     |         lsr.l #3,d0
    2f74:	|     |         move.l 136(sp),d1
    2f78:	|     |         add.l d1,d0
    2f7a:	|     |         move.l d0,d2
    2f7c:	|     |         subq.l #2,d2
    2f7e:	|     |         move.l d2,116(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    2f82:	|     |         move.l 1c91e <winWidth>,d0
    2f88:	|     |         move.l 100(sp),-(sp)
    2f8c:	|     |         move.l d0,-(sp)
    2f8e:	|     |         jsr 17c08 <__mulsi3>
    2f94:	|     |         addq.l #8,sp
    2f96:	|     |         lsr.l #3,d0
    2f98:	|     |         move.l 136(sp),d1
    2f9c:	|     |         add.l d1,d0
    2f9e:	|     |         move.l d0,d1
    2fa0:	|     |         subq.l #2,d1
    2fa2:	|     |         move.l d1,112(sp)
    bltcon0 = 0xfca + ((16-cutmaskpixel) << 12);
    2fa6:	|     |         moveq #0,d0
    2fa8:	|     |         move.w 130(sp),d0
    2fac:	|     |         moveq #16,d1
    2fae:	|     |         sub.l d0,d1
    2fb0:	|     |         move.l d1,d0
    2fb2:	|     |         moveq #12,d2
    2fb4:	|     |         lsl.l d2,d0
    2fb6:	|     |         addi.l #4042,d0
    2fbc:	|     |         move.l d0,108(sp)
    bltcon1 = ((16-cutmaskpixel) << 12);
    2fc0:	|     |         moveq #0,d0
    2fc2:	|     |         move.w 130(sp),d0
    2fc6:	|     |         moveq #16,d1
    2fc8:	|     |         sub.l d0,d1
    2fca:	|     |         move.l d1,d0
    2fcc:	|     |         moveq #12,d1
    2fce:	|     |         lsl.l d1,d0
    2fd0:	|     |         move.l d0,104(sp)
    if( destinationtype == SCREEN)
    2fd4:	|     |         cmpi.w #1,8(sp)
    2fda:	|     |  /----- bne.w 3098 <CstScaleSprite+0x348>
    {      
      struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    2fde:	|     |  |      move.l 1c906 <CstCleanupQueueDrawBuffer>,48(sp)
      CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    2fe6:	|     |  |      moveq #20,d2
    2fe8:	|     |  |      move.l d2,44(sp)
    2fec:	|     |  |      clr.l 40(sp)
    2ff0:	|     |  |      move.l 1c9ca <SysBase>,d0
    2ff6:	|     |  |      movea.l d0,a6
    2ff8:	|     |  |      move.l 44(sp),d0
    2ffc:	|     |  |      move.l 40(sp),d1
    3000:	|     |  |      jsr -684(a6)
    3004:	|     |  |      move.l d0,36(sp)
    3008:	|     |  |      move.l 36(sp),d0
    300c:	|     |  |      move.l d0,1c906 <CstCleanupQueueDrawBuffer>
      CstCleanupQueueDrawBuffer->next = next;   
    3012:	|     |  |      movea.l 1c906 <CstCleanupQueueDrawBuffer>,a0
    3018:	|     |  |      move.l 48(sp),16(a0)

      CstCleanupQueueDrawBuffer->x = x;
    301e:	|     |  |      movea.l 1c906 <CstCleanupQueueDrawBuffer>,a0
    3024:	|     |  |      move.w 12(sp),d0
    3028:	|     |  |      move.w d0,(a0)
      CstCleanupQueueDrawBuffer->y = y;
    302a:	|     |  |      movea.l 1c906 <CstCleanupQueueDrawBuffer>,a0
    3030:	|     |  |      move.w 10(sp),d0
    3034:	|     |  |      move.w d0,2(a0)
      CstCleanupQueueDrawBuffer->person = person;      
    3038:	|     |  |      movea.l 1c906 <CstCleanupQueueDrawBuffer>,a0
    303e:	|     |  |      move.l 148(sp),4(a0)

      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; //Width in X Bytes
    3044:	|     |  |      movea.l 144(sp),a0
    3048:	|     |  |      move.l (a0),d0
    304a:	|     |  |      movea.l d0,a0
    304c:	|     |  |      cmpa.w #0,a0
    3050:	|     |  |  /-- bge.s 3056 <CstScaleSprite+0x306>
    3052:	|     |  |  |   lea 15(a0),a0
    3056:	|     |  |  \-> move.l a0,d0
    3058:	|     |  |      asr.l #4,d0
    305a:	|     |  |      move.l d0,d0
    305c:	|     |  |      add.w 132(sp),d0
    3060:	|     |  |      movea.l 1c906 <CstCleanupQueueDrawBuffer>,a0
    3066:	|     |  |      add.w 134(sp),d0
    306a:	|     |  |      move.w d0,8(a0)
      CstCleanupQueueDrawBuffer->height = blitheight;
    306e:	|     |  |      movea.l 1c906 <CstCleanupQueueDrawBuffer>,a0
    3074:	|     |  |      move.l 92(sp),d0
    3078:	|     |  |      move.w d0,10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes = 0;
    307c:	|     |  |      movea.l 1c906 <CstCleanupQueueDrawBuffer>,a0
    3082:	|     |  |      clr.w 12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    3086:	|     |  |      movea.l 1c906 <CstCleanupQueueDrawBuffer>,a0
    308c:	|     |  |      move.l 100(sp),d0
    3090:	|     |  |      move.w d0,14(a0)
    3094:	|  /--|--|----- bra.w 364c <CstScaleSprite+0x8fc>
    } else {
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    3098:	|  |  |  \----> movea.l 144(sp),a0
    309c:	|  |  |         move.l (a0),d0
    309e:	|  |  |         movea.l d0,a0
    30a0:	|  |  |         cmpa.w #0,a0
    30a4:	|  |  |     /-- bge.s 30aa <CstScaleSprite+0x35a>
    30a6:	|  |  |     |   lea 15(a0),a0
    30aa:	|  |  |     \-> move.l a0,d0
    30ac:	|  |  |         asr.l #4,d0
    30ae:	|  |  |         move.l d0,d0
    30b0:	|  |  |         add.w 132(sp),d0
    30b4:	|  |  |         movea.l 1c90e <CstBackDropBufferApplyCursor>,a0
    30ba:	|  |  |         move.l a0,d1
    30bc:	|  |  |         addq.l #2,d1
    30be:	|  |  |         move.l d1,1c90e <CstBackDropBufferApplyCursor>
    30c4:	|  |  |         add.w 134(sp),d0
    30c8:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    30ca:	|  |  |         movea.l 1c90e <CstBackDropBufferApplyCursor>,a0
    30d0:	|  |  |         move.l a0,d0
    30d2:	|  |  |         addq.l #2,d0
    30d4:	|  |  |         move.l d0,1c90e <CstBackDropBufferApplyCursor>
    30da:	|  |  |         move.l 92(sp),d0
    30de:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    30e0:	|  |  |         movea.l 1c90e <CstBackDropBufferApplyCursor>,a0
    30e6:	|  |  |         move.l a0,d0
    30e8:	|  |  |         addq.l #2,d0
    30ea:	|  |  |         move.l d0,1c90e <CstBackDropBufferApplyCursor>
    30f0:	|  |  |         clr.w (a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    30f2:	|  |  |         movea.l 1c90e <CstBackDropBufferApplyCursor>,a0
    30f8:	|  |  |         move.l a0,d0
    30fa:	|  |  |         addq.l #2,d0
    30fc:	|  |  |         move.l d0,1c90e <CstBackDropBufferApplyCursor>
    3102:	|  |  |         move.l 100(sp),d0
    3106:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    3108:	|  |  |         movea.l 1c90e <CstBackDropBufferApplyCursor>,a0
    310e:	|  |  |         move.l a0,d0
    3110:	|  |  |         addq.l #2,d0
    3112:	|  |  |         move.l d0,1c90e <CstBackDropBufferApplyCursor>
    3118:	|  |  |         clr.w (a0)
    311a:	|  +--|-------- bra.w 364c <CstScaleSprite+0x8fc>
    }
  } else if(x + single->width > (int) winWidth) { //Rightmost part outside screen   
    311e:	|  |  \-------> movea.w 12(sp),a1
    3122:	|  |            movea.l 144(sp),a0
    3126:	|  |            move.l (a0),d0
    3128:	|  |            move.l a1,d1
    312a:	|  |            add.l d0,d1
    312c:	|  |            move.l 1c91e <winWidth>,d0
    3132:	|  |            cmp.l d1,d0
    3134:	|  |  /-------- bge.w 33e4 <CstScaleSprite+0x694>

    if(x - single->width > (int) winWidth)
    3138:	|  |  |         movea.w 12(sp),a1
    313c:	|  |  |         movea.l 144(sp),a0
    3140:	|  |  |         move.l (a0),d0
    3142:	|  |  |         move.l a1,d1
    3144:	|  |  |         sub.l d0,d1
    3146:	|  |  |         move.l 1c91e <winWidth>,d0
    314c:	|  |  |         cmp.l d1,d0
    314e:	|  |  |     /-- bge.s 3162 <CstScaleSprite+0x412>
    {    
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    3150:	|  |  |     |   pea 18090 <PutChar+0x372>
    3156:	|  |  |     |   jsr 17254 <KPrintF>
    315c:	|  |  |     |   addq.l #4,sp
      return;
    315e:	+--|--|-----|-- bra.w 383a <CstScaleSprite+0xaea>
    }
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    3162:	|  |  |     \-> clr.w 134(sp)
    cutwordssource = (x+single->width - winWidth)/16;
    3166:	|  |  |         movea.w 12(sp),a1
    316a:	|  |  |         movea.l 144(sp),a0
    316e:	|  |  |         move.l (a0),d0
    3170:	|  |  |         add.l a1,d0
    3172:	|  |  |         move.l d0,d1
    3174:	|  |  |         move.l 1c91e <winWidth>,d0
    317a:	|  |  |         sub.l d0,d1
    317c:	|  |  |         move.l d1,d0
    317e:	|  |  |         lsr.l #4,d0
    3180:	|  |  |         move.w d0,132(sp)
    cutmaskpixel = 0;
    3184:	|  |  |         clr.w 130(sp)
    bltalwm = 0xffff; //Last word contains source data to be blit
    3188:	|  |  |         move.w #-1,128(sp)
    bltapt = ((ULONG) mask)+ystartsrc*single->width/8;
    318e:	|  |  |         movea.l 144(sp),a0
    3192:	|  |  |         move.l (a0),d0
    3194:	|  |  |         move.l 96(sp),-(sp)
    3198:	|  |  |         move.l d0,-(sp)
    319a:	|  |  |         jsr 17c08 <__mulsi3>
    31a0:	|  |  |         addq.l #8,sp
    31a2:	|  |  |         lsr.l #3,d0
    31a4:	|  |  |         move.l 84(sp),d1
    31a8:	|  |  |         move.l d0,d2
    31aa:	|  |  |         add.l d1,d2
    31ac:	|  |  |         move.l d2,124(sp)
    bltbpt = (ULONG) single->data+ystartsrc*single->width/8;
    31b0:	|  |  |         movea.l 144(sp),a0
    31b4:	|  |  |         move.l 24(a0),d0
    31b8:	|  |  |         move.l d0,d2
    31ba:	|  |  |         movea.l 144(sp),a0
    31be:	|  |  |         move.l (a0),d0
    31c0:	|  |  |         move.l 96(sp),-(sp)
    31c4:	|  |  |         move.l d0,-(sp)
    31c6:	|  |  |         jsr 17c08 <__mulsi3>
    31cc:	|  |  |         addq.l #8,sp
    31ce:	|  |  |         lsr.l #3,d0
    31d0:	|  |  |         move.l d2,d1
    31d2:	|  |  |         add.l d0,d1
    31d4:	|  |  |         move.l d1,120(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    31d8:	|  |  |         move.l 1c91e <winWidth>,d0
    31de:	|  |  |         move.l 100(sp),-(sp)
    31e2:	|  |  |         move.l d0,-(sp)
    31e4:	|  |  |         jsr 17c08 <__mulsi3>
    31ea:	|  |  |         addq.l #8,sp
    31ec:	|  |  |         lsr.l #3,d0
    31ee:	|  |  |         move.l 136(sp),d1
    31f2:	|  |  |         add.l d0,d1
    31f4:	|  |  |         move.w 12(sp),d0
    31f8:	|  |  |     /-- bpl.s 31fe <CstScaleSprite+0x4ae>
    31fa:	|  |  |     |   addi.w #15,d0
    31fe:	|  |  |     \-> asr.w #4,d0
    3200:	|  |  |         movea.w d0,a0
    3202:	|  |  |         move.l a0,d0
    3204:	|  |  |         add.l a0,d0
    3206:	|  |  |         move.l d1,d2
    3208:	|  |  |         add.l d0,d2
    320a:	|  |  |         move.l d2,116(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    320e:	|  |  |         move.l 1c91e <winWidth>,d0
    3214:	|  |  |         move.l 100(sp),-(sp)
    3218:	|  |  |         move.l d0,-(sp)
    321a:	|  |  |         jsr 17c08 <__mulsi3>
    3220:	|  |  |         addq.l #8,sp
    3222:	|  |  |         lsr.l #3,d0
    3224:	|  |  |         move.l 136(sp),d1
    3228:	|  |  |         add.l d0,d1
    322a:	|  |  |         move.w 12(sp),d0
    322e:	|  |  |     /-- bpl.s 3234 <CstScaleSprite+0x4e4>
    3230:	|  |  |     |   addi.w #15,d0
    3234:	|  |  |     \-> asr.w #4,d0
    3236:	|  |  |         movea.w d0,a0
    3238:	|  |  |         move.l a0,d0
    323a:	|  |  |         add.l a0,d0
    323c:	|  |  |         move.l d1,d2
    323e:	|  |  |         add.l d0,d2
    3240:	|  |  |         move.l d2,112(sp)
    bltcon0 = 0xfca + ((single->width%16) << 12);
    3244:	|  |  |         movea.l 144(sp),a0
    3248:	|  |  |         move.l (a0),d0
    324a:	|  |  |         andi.l #-2147483633,d0
    3250:	|  |  |     /-- bpl.s 325a <CstScaleSprite+0x50a>
    3252:	|  |  |     |   subq.l #1,d0
    3254:	|  |  |     |   moveq #-16,d1
    3256:	|  |  |     |   or.l d1,d0
    3258:	|  |  |     |   addq.l #1,d0
    325a:	|  |  |     \-> moveq #12,d2
    325c:	|  |  |         lsl.l d2,d0
    325e:	|  |  |         addi.l #4042,d0
    3264:	|  |  |         move.l d0,108(sp)
    bltcon1 = ((single->width%16) << 12);
    3268:	|  |  |         movea.l 144(sp),a0
    326c:	|  |  |         move.l (a0),d0
    326e:	|  |  |         andi.l #-2147483633,d0
    3274:	|  |  |     /-- bpl.s 327e <CstScaleSprite+0x52e>
    3276:	|  |  |     |   subq.l #1,d0
    3278:	|  |  |     |   moveq #-16,d1
    327a:	|  |  |     |   or.l d1,d0
    327c:	|  |  |     |   addq.l #1,d0
    327e:	|  |  |     \-> moveq #12,d2
    3280:	|  |  |         lsl.l d2,d0
    3282:	|  |  |         move.l d0,104(sp)
    if( destinationtype == SCREEN)
    3286:	|  |  |         cmpi.w #1,8(sp)
    328c:	|  |  |  /----- bne.w 3354 <CstScaleSprite+0x604>
    {
      struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    3290:	|  |  |  |      move.l 1c906 <CstCleanupQueueDrawBuffer>,64(sp)
      CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    3298:	|  |  |  |      moveq #20,d0
    329a:	|  |  |  |      move.l d0,60(sp)
    329e:	|  |  |  |      clr.l 56(sp)
    32a2:	|  |  |  |      move.l 1c9ca <SysBase>,d0
    32a8:	|  |  |  |      movea.l d0,a6
    32aa:	|  |  |  |      move.l 60(sp),d0
    32ae:	|  |  |  |      move.l 56(sp),d1
    32b2:	|  |  |  |      jsr -684(a6)
    32b6:	|  |  |  |      move.l d0,52(sp)
    32ba:	|  |  |  |      move.l 52(sp),d0
    32be:	|  |  |  |      move.l d0,1c906 <CstCleanupQueueDrawBuffer>
      CstCleanupQueueDrawBuffer->next = next;   
    32c4:	|  |  |  |      movea.l 1c906 <CstCleanupQueueDrawBuffer>,a0
    32ca:	|  |  |  |      move.l 64(sp),16(a0)

      CstCleanupQueueDrawBuffer->x = x;
    32d0:	|  |  |  |      movea.l 1c906 <CstCleanupQueueDrawBuffer>,a0
    32d6:	|  |  |  |      move.w 12(sp),d0
    32da:	|  |  |  |      move.w d0,(a0)
      CstCleanupQueueDrawBuffer->y = y;
    32dc:	|  |  |  |      movea.l 1c906 <CstCleanupQueueDrawBuffer>,a0
    32e2:	|  |  |  |      move.w 10(sp),d0
    32e6:	|  |  |  |      move.w d0,2(a0)
      CstCleanupQueueDrawBuffer->person = person; 
    32ea:	|  |  |  |      movea.l 1c906 <CstCleanupQueueDrawBuffer>,a0
    32f0:	|  |  |  |      move.l 148(sp),4(a0)
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource; //Width in X Bytes
    32f6:	|  |  |  |      movea.l 144(sp),a0
    32fa:	|  |  |  |      move.l (a0),d0
    32fc:	|  |  |  |      movea.l d0,a0
    32fe:	|  |  |  |      cmpa.w #0,a0
    3302:	|  |  |  |  /-- bge.s 3308 <CstScaleSprite+0x5b8>
    3304:	|  |  |  |  |   lea 15(a0),a0
    3308:	|  |  |  |  \-> move.l a0,d0
    330a:	|  |  |  |      asr.l #4,d0
    330c:	|  |  |  |      move.l d0,d0
    330e:	|  |  |  |      movea.l 1c906 <CstCleanupQueueDrawBuffer>,a0
    3314:	|  |  |  |      add.w 132(sp),d0
    3318:	|  |  |  |      move.w d0,8(a0)
      CstCleanupQueueDrawBuffer->height =  blitheight; //Height
    331c:	|  |  |  |      movea.l 1c906 <CstCleanupQueueDrawBuffer>,a0
    3322:	|  |  |  |      move.l 92(sp),d0
    3326:	|  |  |  |      move.w d0,10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; //X Start in Bytes;
    332a:	|  |  |  |      move.w 12(sp),d0
    332e:	|  |  |  |  /-- bpl.s 3334 <CstScaleSprite+0x5e4>
    3330:	|  |  |  |  |   addi.w #15,d0
    3334:	|  |  |  |  \-> asr.w #4,d0
    3336:	|  |  |  |      movea.l 1c906 <CstCleanupQueueDrawBuffer>,a0
    333c:	|  |  |  |      add.w d0,d0
    333e:	|  |  |  |      move.w d0,12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    3342:	|  |  |  |      movea.l 1c906 <CstCleanupQueueDrawBuffer>,a0
    3348:	|  |  |  |      move.l 100(sp),d0
    334c:	|  |  |  |      move.w d0,14(a0)
    3350:	|  +--|--|----- bra.w 364c <CstScaleSprite+0x8fc>
    } else {
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource;
    3354:	|  |  |  \----> movea.l 144(sp),a0
    3358:	|  |  |         move.l (a0),d0
    335a:	|  |  |         movea.l d0,a0
    335c:	|  |  |         cmpa.w #0,a0
    3360:	|  |  |     /-- bge.s 3366 <CstScaleSprite+0x616>
    3362:	|  |  |     |   lea 15(a0),a0
    3366:	|  |  |     \-> move.l a0,d0
    3368:	|  |  |         asr.l #4,d0
    336a:	|  |  |         move.l d0,d0
    336c:	|  |  |         movea.l 1c90e <CstBackDropBufferApplyCursor>,a0
    3372:	|  |  |         move.l a0,d1
    3374:	|  |  |         addq.l #2,d1
    3376:	|  |  |         move.l d1,1c90e <CstBackDropBufferApplyCursor>
    337c:	|  |  |         add.w 132(sp),d0
    3380:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    3382:	|  |  |         movea.l 1c90e <CstBackDropBufferApplyCursor>,a0
    3388:	|  |  |         move.l a0,d0
    338a:	|  |  |         addq.l #2,d0
    338c:	|  |  |         move.l d0,1c90e <CstBackDropBufferApplyCursor>
    3392:	|  |  |         move.l 92(sp),d0
    3396:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = (x/16)*2;
    3398:	|  |  |         move.w 12(sp),d0
    339c:	|  |  |     /-- bpl.s 33a2 <CstScaleSprite+0x652>
    339e:	|  |  |     |   addi.w #15,d0
    33a2:	|  |  |     \-> asr.w #4,d0
    33a4:	|  |  |         movea.l 1c90e <CstBackDropBufferApplyCursor>,a0
    33aa:	|  |  |         move.l a0,d1
    33ac:	|  |  |         addq.l #2,d1
    33ae:	|  |  |         move.l d1,1c90e <CstBackDropBufferApplyCursor>
    33b4:	|  |  |         add.w d0,d0
    33b6:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    33b8:	|  |  |         movea.l 1c90e <CstBackDropBufferApplyCursor>,a0
    33be:	|  |  |         move.l a0,d0
    33c0:	|  |  |         addq.l #2,d0
    33c2:	|  |  |         move.l d0,1c90e <CstBackDropBufferApplyCursor>
    33c8:	|  |  |         move.l 100(sp),d0
    33cc:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    33ce:	|  |  |         movea.l 1c90e <CstBackDropBufferApplyCursor>,a0
    33d4:	|  |  |         move.l a0,d0
    33d6:	|  |  |         addq.l #2,d0
    33d8:	|  |  |         move.l d0,1c90e <CstBackDropBufferApplyCursor>
    33de:	|  |  |         clr.w (a0)
    33e0:	|  +--|-------- bra.w 364c <CstScaleSprite+0x8fc>
    }
  } else { //Whole Sprite on Screen

    extrawords = 1;
    33e4:	|  |  \-------> move.w #1,134(sp)
    cutwordssource = 0;
    33ea:	|  |            clr.w 132(sp)
    cutmaskpixel = 0;
    33ee:	|  |            clr.w 130(sp)
    bltalwm = 0; //Last Word of this channel almost masked out
    33f2:	|  |            clr.w 128(sp)
    bltapt = ((ULONG) mask) +ystartsrc*single->width/8;
    33f6:	|  |            movea.l 144(sp),a0
    33fa:	|  |            move.l (a0),d0
    33fc:	|  |            move.l 96(sp),-(sp)
    3400:	|  |            move.l d0,-(sp)
    3402:	|  |            jsr 17c08 <__mulsi3>
    3408:	|  |            addq.l #8,sp
    340a:	|  |            lsr.l #3,d0
    340c:	|  |            move.l 84(sp),d1
    3410:	|  |            move.l d0,d2
    3412:	|  |            add.l d1,d2
    3414:	|  |            move.l d2,124(sp)
    bltbpt = (ULONG) single->data+ystartsrc*single->width/8;
    3418:	|  |            movea.l 144(sp),a0
    341c:	|  |            move.l 24(a0),d0
    3420:	|  |            move.l d0,d2
    3422:	|  |            movea.l 144(sp),a0
    3426:	|  |            move.l (a0),d0
    3428:	|  |            move.l 96(sp),-(sp)
    342c:	|  |            move.l d0,-(sp)
    342e:	|  |            jsr 17c08 <__mulsi3>
    3434:	|  |            addq.l #8,sp
    3436:	|  |            lsr.l #3,d0
    3438:	|  |            move.l d2,d1
    343a:	|  |            add.l d0,d1
    343c:	|  |            move.l d1,120(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    3440:	|  |            move.l 1c91e <winWidth>,d0
    3446:	|  |            move.l 100(sp),-(sp)
    344a:	|  |            move.l d0,-(sp)
    344c:	|  |            jsr 17c08 <__mulsi3>
    3452:	|  |            addq.l #8,sp
    3454:	|  |            lsr.l #3,d0
    3456:	|  |            move.l 136(sp),d1
    345a:	|  |            add.l d0,d1
    345c:	|  |            move.w 12(sp),d0
    3460:	|  |        /-- bpl.s 3466 <CstScaleSprite+0x716>
    3462:	|  |        |   addi.w #15,d0
    3466:	|  |        \-> asr.w #4,d0
    3468:	|  |            movea.w d0,a0
    346a:	|  |            move.l a0,d0
    346c:	|  |            add.l a0,d0
    346e:	|  |            move.l d1,d2
    3470:	|  |            add.l d0,d2
    3472:	|  |            move.l d2,116(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    3476:	|  |            move.l 1c91e <winWidth>,d0
    347c:	|  |            move.l 100(sp),-(sp)
    3480:	|  |            move.l d0,-(sp)
    3482:	|  |            jsr 17c08 <__mulsi3>
    3488:	|  |            addq.l #8,sp
    348a:	|  |            lsr.l #3,d0
    348c:	|  |            move.l 136(sp),d1
    3490:	|  |            add.l d0,d1
    3492:	|  |            move.w 12(sp),d0
    3496:	|  |        /-- bpl.s 349c <CstScaleSprite+0x74c>
    3498:	|  |        |   addi.w #15,d0
    349c:	|  |        \-> asr.w #4,d0
    349e:	|  |            movea.w d0,a0
    34a0:	|  |            move.l a0,d0
    34a2:	|  |            add.l a0,d0
    34a4:	|  |            move.l d1,d2
    34a6:	|  |            add.l d0,d2
    34a8:	|  |            move.l d2,112(sp)
    bltcon0 = 0xfca + ((x%16) << 12);
    34ac:	|  |            move.w 12(sp),d0
    34b0:	|  |            andi.w #-32753,d0
    34b4:	|  |        /-- bpl.s 34be <CstScaleSprite+0x76e>
    34b6:	|  |        |   subq.w #1,d0
    34b8:	|  |        |   ori.w #-16,d0
    34bc:	|  |        |   addq.w #1,d0
    34be:	|  |        \-> ext.l d0
    34c0:	|  |            moveq #12,d1
    34c2:	|  |            lsl.l d1,d0
    34c4:	|  |            addi.l #4042,d0
    34ca:	|  |            move.l d0,108(sp)
    bltcon1 = ((x%16) << 12);
    34ce:	|  |            move.w 12(sp),d0
    34d2:	|  |            andi.w #-32753,d0
    34d6:	|  |        /-- bpl.s 34e0 <CstScaleSprite+0x790>
    34d8:	|  |        |   subq.w #1,d0
    34da:	|  |        |   ori.w #-16,d0
    34de:	|  |        |   addq.w #1,d0
    34e0:	|  |        \-> ext.l d0
    34e2:	|  |            moveq #12,d2
    34e4:	|  |            lsl.l d2,d0
    34e6:	|  |            move.l d0,104(sp)
    if( destinationtype == SCREEN)
    34ea:	|  |            cmpi.w #1,8(sp)
    34f0:	|  |     /----- bne.w 35bc <CstScaleSprite+0x86c>
    {
      struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    34f4:	|  |     |      move.l 1c906 <CstCleanupQueueDrawBuffer>,80(sp)
      CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    34fc:	|  |     |      moveq #20,d0
    34fe:	|  |     |      move.l d0,76(sp)
    3502:	|  |     |      clr.l 72(sp)
    3506:	|  |     |      move.l 1c9ca <SysBase>,d0
    350c:	|  |     |      movea.l d0,a6
    350e:	|  |     |      move.l 76(sp),d0
    3512:	|  |     |      move.l 72(sp),d1
    3516:	|  |     |      jsr -684(a6)
    351a:	|  |     |      move.l d0,68(sp)
    351e:	|  |     |      move.l 68(sp),d0
    3522:	|  |     |      move.l d0,1c906 <CstCleanupQueueDrawBuffer>
      CstCleanupQueueDrawBuffer->next = next;   
    3528:	|  |     |      movea.l 1c906 <CstCleanupQueueDrawBuffer>,a0
    352e:	|  |     |      move.l 80(sp),16(a0)

      CstCleanupQueueDrawBuffer->x = x;
    3534:	|  |     |      movea.l 1c906 <CstCleanupQueueDrawBuffer>,a0
    353a:	|  |     |      move.w 12(sp),d0
    353e:	|  |     |      move.w d0,(a0)
      CstCleanupQueueDrawBuffer->y = y;
    3540:	|  |     |      movea.l 1c906 <CstCleanupQueueDrawBuffer>,a0
    3546:	|  |     |      move.w 10(sp),d0
    354a:	|  |     |      move.w d0,2(a0)
      CstCleanupQueueDrawBuffer->person = person; 
    354e:	|  |     |      movea.l 1c906 <CstCleanupQueueDrawBuffer>,a0
    3554:	|  |     |      move.l 148(sp),4(a0)
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; 
    355a:	|  |     |      movea.l 144(sp),a0
    355e:	|  |     |      move.l (a0),d0
    3560:	|  |     |      movea.l d0,a0
    3562:	|  |     |      cmpa.w #0,a0
    3566:	|  |     |  /-- bge.s 356c <CstScaleSprite+0x81c>
    3568:	|  |     |  |   lea 15(a0),a0
    356c:	|  |     |  \-> move.l a0,d0
    356e:	|  |     |      asr.l #4,d0
    3570:	|  |     |      move.l d0,d0
    3572:	|  |     |      add.w 132(sp),d0
    3576:	|  |     |      movea.l 1c906 <CstCleanupQueueDrawBuffer>,a0
    357c:	|  |     |      add.w 134(sp),d0
    3580:	|  |     |      move.w d0,8(a0)
      CstCleanupQueueDrawBuffer->height =  blitheight; 
    3584:	|  |     |      movea.l 1c906 <CstCleanupQueueDrawBuffer>,a0
    358a:	|  |     |      move.l 92(sp),d0
    358e:	|  |     |      move.w d0,10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; 
    3592:	|  |     |      move.w 12(sp),d0
    3596:	|  |     |  /-- bpl.s 359c <CstScaleSprite+0x84c>
    3598:	|  |     |  |   addi.w #15,d0
    359c:	|  |     |  \-> asr.w #4,d0
    359e:	|  |     |      movea.l 1c906 <CstCleanupQueueDrawBuffer>,a0
    35a4:	|  |     |      add.w d0,d0
    35a6:	|  |     |      move.w d0,12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    35aa:	|  |     |      movea.l 1c906 <CstCleanupQueueDrawBuffer>,a0
    35b0:	|  |     |      move.l 100(sp),d0
    35b4:	|  |     |      move.w d0,14(a0)
    35b8:	|  +-----|----- bra.w 364c <CstScaleSprite+0x8fc>
    } else
    {
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    35bc:	|  |     \----> movea.l 144(sp),a0
    35c0:	|  |            move.l (a0),d0
    35c2:	|  |            movea.l d0,a0
    35c4:	|  |            cmpa.w #0,a0
    35c8:	|  |        /-- bge.s 35ce <CstScaleSprite+0x87e>
    35ca:	|  |        |   lea 15(a0),a0
    35ce:	|  |        \-> move.l a0,d0
    35d0:	|  |            asr.l #4,d0
    35d2:	|  |            move.l d0,d0
    35d4:	|  |            add.w 132(sp),d0
    35d8:	|  |            movea.l 1c90e <CstBackDropBufferApplyCursor>,a0
    35de:	|  |            move.l a0,d1
    35e0:	|  |            addq.l #2,d1
    35e2:	|  |            move.l d1,1c90e <CstBackDropBufferApplyCursor>
    35e8:	|  |            add.w 134(sp),d0
    35ec:	|  |            move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    35ee:	|  |            movea.l 1c90e <CstBackDropBufferApplyCursor>,a0
    35f4:	|  |            move.l a0,d0
    35f6:	|  |            addq.l #2,d0
    35f8:	|  |            move.l d0,1c90e <CstBackDropBufferApplyCursor>
    35fe:	|  |            move.l 92(sp),d0
    3602:	|  |            move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = (x/16)*2;
    3604:	|  |            move.w 12(sp),d0
    3608:	|  |        /-- bpl.s 360e <CstScaleSprite+0x8be>
    360a:	|  |        |   addi.w #15,d0
    360e:	|  |        \-> asr.w #4,d0
    3610:	|  |            movea.l 1c90e <CstBackDropBufferApplyCursor>,a0
    3616:	|  |            move.l a0,d1
    3618:	|  |            addq.l #2,d1
    361a:	|  |            move.l d1,1c90e <CstBackDropBufferApplyCursor>
    3620:	|  |            add.w d0,d0
    3622:	|  |            move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    3624:	|  |            movea.l 1c90e <CstBackDropBufferApplyCursor>,a0
    362a:	|  |            move.l a0,d0
    362c:	|  |            addq.l #2,d0
    362e:	|  |            move.l d0,1c90e <CstBackDropBufferApplyCursor>
    3634:	|  |            move.l 100(sp),d0
    3638:	|  |            move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    363a:	|  |            movea.l 1c90e <CstBackDropBufferApplyCursor>,a0
    3640:	|  |            move.l a0,d0
    3642:	|  |            addq.l #2,d0
    3644:	|  |            move.l d0,1c90e <CstBackDropBufferApplyCursor>
    364a:	|  |            clr.w (a0)

 /*if(person && person->samePosCount > 3) {
    return;
  }*/

  UWORD bltafwm = 0xffff >> cutmaskpixel;
    364c:	|  \----------> moveq #0,d0
    364e:	|               move.w 130(sp),d0
    3652:	|               moveq #0,d1
    3654:	|               not.w d1
    3656:	|               asr.l d0,d1
    3658:	|               move.w d1,34(sp)
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    365c:	|               moveq #0,d1
    365e:	|               move.w 132(sp),d1
    3662:	|               moveq #0,d0
    3664:	|               move.w 134(sp),d0
    3668:	|               sub.l d0,d1
    366a:	|               move.l d1,d0
    366c:	|               add.w d0,d0
    366e:	|               move.w d0,32(sp)
  WORD bltbmod = cutwordssource*2-(extrawords*2); //Jump to next line
    3672:	|               moveq #0,d1
    3674:	|               move.w 132(sp),d1
    3678:	|               moveq #0,d0
    367a:	|               move.w 134(sp),d0
    367e:	|               sub.l d0,d1
    3680:	|               move.l d1,d0
    3682:	|               add.w d0,d0
    3684:	|               move.w d0,30(sp)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    3688:	|               move.l 1c91e <winWidth>,d0
    368e:	|               lsr.l #3,d0
    3690:	|               move.l d0,d1
    3692:	|               movea.l 144(sp),a0
    3696:	|               move.l (a0),d0
    3698:	|           /-- bpl.s 369c <CstScaleSprite+0x94c>
    369a:	|           |   addq.l #7,d0
    369c:	|           \-> asr.l #3,d0
    369e:	|               move.l d0,d0
    36a0:	|               sub.w d0,d1
    36a2:	|               move.w 132(sp),d0
    36a6:	|               sub.w 134(sp),d0
    36aa:	|               add.w d0,d0
    36ac:	|               add.w d1,d0
    36ae:	|               move.w d0,28(sp)
  WORD bltdmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    36b2:	|               move.l 1c91e <winWidth>,d0
    36b8:	|               lsr.l #3,d0
    36ba:	|               move.l d0,d1
    36bc:	|               movea.l 144(sp),a0
    36c0:	|               move.l (a0),d0
    36c2:	|           /-- bpl.s 36c6 <CstScaleSprite+0x976>
    36c4:	|           |   addq.l #7,d0
    36c6:	|           \-> asr.l #3,d0
    36c8:	|               move.l d0,d0
    36ca:	|               sub.w d0,d1
    36cc:	|               move.w 132(sp),d0
    36d0:	|               sub.w 134(sp),d0
    36d4:	|               add.w d0,d0
    36d6:	|               add.w d1,d0
    36d8:	|               move.w d0,26(sp)

  volatile struct Custom *custom = (struct Custom*)0xdff000;
    36dc:	|               move.l #14675968,22(sp)
  WaitBlit();
    36e4:	|               move.l 1c9d6 <GfxBase>,d0
    36ea:	|               movea.l d0,a6
    36ec:	|               jsr -228(a6)

  custom->bltafwm = bltafwm;
    36f0:	|               movea.l 22(sp),a0
    36f4:	|               move.w 34(sp),68(a0)
  custom->bltalwm = bltalwm;
    36fa:	|               movea.l 22(sp),a0
    36fe:	|               move.w 128(sp),70(a0)
  custom->bltamod = bltamod;
    3704:	|               move.w 32(sp),d0
    3708:	|               movea.l 22(sp),a0
    370c:	|               move.w d0,100(a0)
  custom->bltbmod = bltbmod;
    3710:	|               move.w 30(sp),d0
    3714:	|               movea.l 22(sp),a0
    3718:	|               move.w d0,98(a0)
  custom->bltcmod = bltcmod;
    371c:	|               move.w 28(sp),d0
    3720:	|               movea.l 22(sp),a0
    3724:	|               move.w d0,96(a0)
  custom->bltdmod = bltdmod;
    3728:	|               move.w 26(sp),d0
    372c:	|               movea.l 22(sp),a0
    3730:	|               move.w d0,102(a0)
  custom->bltcon0 = bltcon0;
    3734:	|               move.l 108(sp),d0
    3738:	|               movea.l 22(sp),a0
    373c:	|               move.w d0,64(a0)
  custom->bltcon1 = bltcon1;  
    3740:	|               move.l 104(sp),d0
    3744:	|               movea.l 22(sp),a0
    3748:	|               move.w d0,66(a0)

  UWORD bltbptplus = (single->width >> 3)*single->height;
    374c:	|               movea.l 144(sp),a0
    3750:	|               move.l (a0),d0
    3752:	|               asr.l #3,d0
    3754:	|               move.l d0,d1
    3756:	|               movea.l 144(sp),a0
    375a:	|               move.l 4(a0),d0
    375e:	|               move.l d0,d0
    3760:	|               move.w d1,d2
    3762:	|               muls.w d0,d2
    3764:	|               move.w d2,20(sp)
  UWORD bltcptplus = winWidth/8*winHeight;
    3768:	|               move.l 1c91e <winWidth>,d0
    376e:	|               lsr.l #3,d0
    3770:	|               move.l d0,d1
    3772:	|               move.l 1c922 <winHeight>,d0
    3778:	|               move.l d0,d0
    377a:	|               move.w d1,d2
    377c:	|               muls.w d0,d2
    377e:	|               move.w d2,18(sp)
  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    3782:	|               clr.l 88(sp)
    3786:	|        /----- bra.w 381a <CstScaleSprite+0xaca>
  {
    custom->bltapt = (APTR) bltapt;
    378a:	|     /--|----> move.l 124(sp),d0
    378e:	|     |  |      movea.l 22(sp),a0
    3792:	|     |  |      move.l d0,80(a0)
    custom->bltbpt = (APTR) bltbpt;
    3796:	|     |  |      move.l 120(sp),d0
    379a:	|     |  |      movea.l 22(sp),a0
    379e:	|     |  |      move.l d0,76(a0)
    custom->bltcpt = (APTR) bltcpt;
    37a2:	|     |  |      move.l 116(sp),d0
    37a6:	|     |  |      movea.l 22(sp),a0
    37aa:	|     |  |      move.l d0,72(a0)
    custom->bltdpt = (APTR) bltdpt;
    37ae:	|     |  |      move.l 112(sp),d0
    37b2:	|     |  |      movea.l 22(sp),a0
    37b6:	|     |  |      move.l d0,84(a0)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    37ba:	|     |  |      move.l 92(sp),d0
    37be:	|     |  |      move.w d0,d1
    37c0:	|     |  |      lsl.w #6,d1
    37c2:	|     |  |      movea.l 144(sp),a0
    37c6:	|     |  |      move.l (a0),d0
    37c8:	|     |  |      movea.l d0,a0
    37ca:	|     |  |      cmpa.w #0,a0
    37ce:	|     |  |  /-- bge.s 37d4 <CstScaleSprite+0xa84>
    37d0:	|     |  |  |   lea 15(a0),a0
    37d4:	|     |  |  \-> move.l a0,d0
    37d6:	|     |  |      asr.l #4,d0
    37d8:	|     |  |      move.l d0,d0
    37da:	|     |  |      add.w d1,d0
    37dc:	|     |  |      sub.w 132(sp),d0
    37e0:	|     |  |      add.w 134(sp),d0
    37e4:	|     |  |      movea.l 22(sp),a0
    37e8:	|     |  |      move.w d0,88(a0)
    bltbpt += bltbptplus;
    37ec:	|     |  |      moveq #0,d0
    37ee:	|     |  |      move.w 20(sp),d0
    37f2:	|     |  |      add.l d0,120(sp)
    bltcpt += bltcptplus;
    37f6:	|     |  |      moveq #0,d0
    37f8:	|     |  |      move.w 18(sp),d0
    37fc:	|     |  |      add.l d0,116(sp)
    bltdpt += bltcptplus;
    3800:	|     |  |      moveq #0,d0
    3802:	|     |  |      move.w 18(sp),d0
    3806:	|     |  |      add.l d0,112(sp)
    WaitBlit();
    380a:	|     |  |      move.l 1c9d6 <GfxBase>,d0
    3810:	|     |  |      movea.l d0,a6
    3812:	|     |  |      jsr -228(a6)
  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    3816:	|     |  |      addq.l #1,88(sp)
    381a:	|     |  \----> moveq #4,d0
    381c:	|     |         cmp.l 88(sp),d0
    3820:	|     \-------- bge.w 378a <CstScaleSprite+0xa3a>
  }   

  FreeVec(mask);
    3824:	|               move.l 84(sp),14(sp)
    382a:	|               move.l 1c9ca <SysBase>,d0
    3830:	|               movea.l d0,a6
    3832:	|               movea.l 14(sp),a1
    3836:	|               jsr -690(a6)
}
    383a:	\-------------> move.l (sp)+,d2
    383c:	                movea.l (sp)+,a6
    383e:	                lea 132(sp),sp
    3842:	                rts

00003844 <CstSetCl>:

void CstSetCl(UWORD *copperlist)
{
    3844:	subq.l #4,sp
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    3846:	move.l #14675968,(sp)
  custom->cop1lc = (ULONG) copperlist;
    384c:	move.l 8(sp),d0
    3850:	movea.l (sp),a0
    3852:	move.l d0,128(a0)
}
    3856:	nop
    3858:	addq.l #4,sp
    385a:	rts

0000385c <CstSwapBuffer>:

void CstSwapBuffer( ) {
    385c:	lea -20(sp),sp
  ULONG *tmp;
  tmp = CstViewBuffer;
    3860:	move.l 1c8fa <CstViewBuffer>,16(sp)
  CstViewBuffer = CstDrawBuffer;
    3868:	move.l 1c8fe <CstDrawBuffer>,d0
    386e:	move.l d0,1c8fa <CstViewBuffer>
  CstDrawBuffer = tmp;
    3874:	move.l 16(sp),1c8fe <CstDrawBuffer>

  struct CleanupQueue *tmp2 = CstCleanupQueueViewBuffer;
    387c:	move.l 1c902 <CstCleanupQueueViewBuffer>,12(sp)
  CstCleanupQueueViewBuffer = CstCleanupQueueDrawBuffer;
    3884:	move.l 1c906 <CstCleanupQueueDrawBuffer>,d0
    388a:	move.l d0,1c902 <CstCleanupQueueViewBuffer>
  CstCleanupQueueDrawBuffer = tmp2;
    3890:	move.l 12(sp),1c906 <CstCleanupQueueDrawBuffer>


  UWORD *copword = CstCopperList;
    3898:	move.l 1c8f4 <CstCopperList>,8(sp)
  ULONG ptr = (ULONG) CstViewBuffer;
    38a0:	move.l 1c8fa <CstViewBuffer>,d0
    38a6:	move.l d0,4(sp)
  UWORD highword = ptr >> 16;
    38aa:	move.l 4(sp),d0
    38ae:	clr.w d0
    38b0:	swap d0
    38b2:	move.w d0,2(sp)
  UWORD lowword = ptr & 0xffff;  
    38b6:	move.w 6(sp),(sp)

  copword[CSTBPL1LOW] = lowword;
    38ba:	movea.w #118,a0
    38be:	adda.l 8(sp),a0
    38c2:	move.w (sp),(a0)
  copword[CSTBPL1HIGH] = highword;
    38c4:	movea.w #114,a0
    38c8:	adda.l 8(sp),a0
    38cc:	move.w 2(sp),(a0)

  ptr +=  40*256;
    38d0:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    38d8:	move.l 4(sp),d0
    38dc:	clr.w d0
    38de:	swap d0
    38e0:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    38e4:	move.w 6(sp),(sp)

  copword[CSTBPL2LOW] = lowword;
    38e8:	movea.w #126,a0
    38ec:	adda.l 8(sp),a0
    38f0:	move.w (sp),(a0)
  copword[CSTBPL2HIGH] = highword;
    38f2:	movea.w #122,a0
    38f6:	adda.l 8(sp),a0
    38fa:	move.w 2(sp),(a0)
  
  ptr +=  40*256;
    38fe:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    3906:	move.l 4(sp),d0
    390a:	clr.w d0
    390c:	swap d0
    390e:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    3912:	move.w 6(sp),(sp)
  
  copword[CSTBPL3LOW] = lowword;
    3916:	movea.l 8(sp),a0
    391a:	lea 134(a0),a0
    391e:	move.w (sp),(a0)
  copword[CSTBPL3HIGH] = highword;
    3920:	movea.l 8(sp),a0
    3924:	lea 130(a0),a0
    3928:	move.w 2(sp),(a0)

  ptr +=  40*256;
    392c:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    3934:	move.l 4(sp),d0
    3938:	clr.w d0
    393a:	swap d0
    393c:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    3940:	move.w 6(sp),(sp)

  copword[CSTBPL4LOW] = lowword;
    3944:	movea.l 8(sp),a0
    3948:	lea 142(a0),a0
    394c:	move.w (sp),(a0)
  copword[CSTBPL4HIGH] = highword;
    394e:	movea.l 8(sp),a0
    3952:	lea 138(a0),a0
    3956:	move.w 2(sp),(a0)

  ptr +=  40*256;
    395a:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    3962:	move.l 4(sp),d0
    3966:	clr.w d0
    3968:	swap d0
    396a:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    396e:	move.w 6(sp),(sp)

  copword[CSTBPL5LOW] = lowword;
    3972:	movea.l 8(sp),a0
    3976:	lea 150(a0),a0
    397a:	move.w (sp),(a0)
  copword[CSTBPL5HIGH] = highword;
    397c:	movea.l 8(sp),a0
    3980:	lea 146(a0),a0
    3984:	move.w 2(sp),(a0)

}
    3988:	nop
    398a:	lea 20(sp),sp
    398e:	rts

00003990 <CstReserveBackdrop>:

BOOL CstReserveBackdrop(int width, int height) {
    3990:	          lea -56(sp),sp
    3994:	          move.l a6,-(sp)

 	KPrintF("CstReserveBackdrop: Begin");
    3996:	          pea 180c3 <PutChar+0x3a5>
    399c:	          jsr 17254 <KPrintF>
    39a2:	          addq.l #4,sp

  width = width / 8;
    39a4:	          move.l 64(sp),d0
    39a8:	      /-- bpl.s 39ac <CstReserveBackdrop+0x1c>
    39aa:	      |   addq.l #7,d0
    39ac:	      \-> asr.l #3,d0
    39ae:	          move.l d0,64(sp)

  if( width < 40) 
    39b2:	          moveq #39,d0
    39b4:	          cmp.l 64(sp),d0
    39b8:	      /-- blt.s 39ce <CstReserveBackdrop+0x3e>
  {
    KPrintF("CstReserveBackdrop: Screens smaller than 320px not supported.");
    39ba:	      |   pea 180dd <PutChar+0x3bf>
    39c0:	      |   jsr 17254 <KPrintF>
    39c6:	      |   addq.l #4,sp
    return FALSE;
    39c8:	      |   clr.w d0
    39ca:	/-----|-- bra.w 3d10 <CstReserveBackdrop+0x380>
  }  
  KPrintF("CstReserveBackdrop: Screen Okay");
    39ce:	|     \-> pea 1811b <PutChar+0x3fd>
    39d4:	|         jsr 17254 <KPrintF>
    39da:	|         addq.l #4,sp

  CstCopperList = CstCreateCopperlist( width);
    39dc:	|         move.l 64(sp),-(sp)
    39e0:	|         jsr fce <CstCreateCopperlist>
    39e6:	|         addq.l #4,sp
    39e8:	|         move.l d0,1c8f4 <CstCopperList>
  KPrintF("CstReserveBackdrop: Copperlist created");
    39ee:	|         pea 1813b <PutChar+0x41d>
    39f4:	|         jsr 17254 <KPrintF>
    39fa:	|         addq.l #4,sp
  CstBackdropSizePlane = width*height;
    39fc:	|         move.l 64(sp),d1
    3a00:	|         move.l 68(sp),d0
    3a04:	|         muls.w d1,d0
    3a06:	|         move.w d0,1c8ea <CstBackdropSizePlane>
  CstBackdropSize = CstBackdropSizePlane * 5; //Todo: Support other Bitplane Modes;  
    3a0c:	|         move.w 1c8ea <CstBackdropSizePlane>,d1
    3a12:	|         move.w d1,d0
    3a14:	|         add.w d0,d0
    3a16:	|         add.w d0,d0
    3a18:	|         add.w d1,d0
    3a1a:	|         move.w d0,1c8e8 <CstBackdropSize>
  

  CstBackDrop = AllocVec(CstBackdropSize,MEMF_CHIP);
    3a20:	|         move.w 1c8e8 <CstBackdropSize>,d0
    3a26:	|         move.w d0,d0
    3a28:	|         andi.l #65535,d0
    3a2e:	|         move.l d0,48(sp)
    3a32:	|         moveq #2,d1
    3a34:	|         move.l d1,44(sp)
    3a38:	|         move.l 1c9ca <SysBase>,d0
    3a3e:	|         movea.l d0,a6
    3a40:	|         move.l 48(sp),d0
    3a44:	|         move.l 44(sp),d1
    3a48:	|         jsr -684(a6)
    3a4c:	|         move.l d0,40(sp)
    3a50:	|         move.l 40(sp),d0
    3a54:	|         move.l d0,1c8ec <CstBackDrop>
  if( !CstBackDrop)
    3a5a:	|         move.l 1c8ec <CstBackDrop>,d0
    3a60:	|     /-- bne.s 3a76 <CstReserveBackdrop+0xe6>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for Backdrop");
    3a62:	|     |   pea 18162 <PutChar+0x444>
    3a68:	|     |   jsr 17254 <KPrintF>
    3a6e:	|     |   addq.l #4,sp
    return FALSE;  
    3a70:	|     |   clr.w d0
    3a72:	+-----|-- bra.w 3d10 <CstReserveBackdrop+0x380>
  }
  KPrintF("CstReserveBackdrop: Backdrop reserved");
    3a76:	|     \-> pea 1819a <PutChar+0x47c>
    3a7c:	|         jsr 17254 <KPrintF>
    3a82:	|         addq.l #4,sp

  //Initialize Buffer
  ULONG *cursor = (ULONG *)CstBackDrop;
    3a84:	|         move.l 1c8ec <CstBackDrop>,56(sp)
  for(int i=0;i<CstBackdropSize/4;i++)
    3a8c:	|         clr.l 52(sp)
    3a90:	|     /-- bra.s 3aa6 <CstReserveBackdrop+0x116>
  {
    *cursor++ = 0;
    3a92:	|  /--|-> move.l 56(sp),d0
    3a96:	|  |  |   move.l d0,d1
    3a98:	|  |  |   addq.l #4,d1
    3a9a:	|  |  |   move.l d1,56(sp)
    3a9e:	|  |  |   movea.l d0,a0
    3aa0:	|  |  |   clr.l (a0)
  for(int i=0;i<CstBackdropSize/4;i++)
    3aa2:	|  |  |   addq.l #1,52(sp)
    3aa6:	|  |  \-> move.w 1c8e8 <CstBackdropSize>,d0
    3aac:	|  |      lsr.w #2,d0
    3aae:	|  |      move.w d0,d0
    3ab0:	|  |      andi.l #65535,d0
    3ab6:	|  |      cmp.l 52(sp),d0
    3aba:	|  \----- bgt.s 3a92 <CstReserveBackdrop+0x102>
  }  
  
  CstDrawBuffer = AllocVec(CstBackdropSize+width*2,MEMF_CHIP); //Some extra size for bob routine border area
    3abc:	|         move.w 1c8e8 <CstBackdropSize>,d0
    3ac2:	|         move.w d0,d0
    3ac4:	|         andi.l #65535,d0
    3aca:	|         move.l 64(sp),d1
    3ace:	|         add.l d1,d1
    3ad0:	|         add.l d1,d0
    3ad2:	|         move.l d0,36(sp)
    3ad6:	|         moveq #2,d0
    3ad8:	|         move.l d0,32(sp)
    3adc:	|         move.l 1c9ca <SysBase>,d0
    3ae2:	|         movea.l d0,a6
    3ae4:	|         move.l 36(sp),d0
    3ae8:	|         move.l 32(sp),d1
    3aec:	|         jsr -684(a6)
    3af0:	|         move.l d0,28(sp)
    3af4:	|         move.l 28(sp),d0
    3af8:	|         move.l d0,1c8fe <CstDrawBuffer>
  if( !CstDrawBuffer)
    3afe:	|         move.l 1c8fe <CstDrawBuffer>,d0
    3b04:	|     /-- bne.s 3b1a <CstReserveBackdrop+0x18a>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for DrawBuffer");
    3b06:	|     |   pea 181c0 <PutChar+0x4a2>
    3b0c:	|     |   jsr 17254 <KPrintF>
    3b12:	|     |   addq.l #4,sp
    return FALSE;  
    3b14:	|     |   clr.w d0
    3b16:	+-----|-- bra.w 3d10 <CstReserveBackdrop+0x380>
  }
  KPrintF("CstReserveBackdrop: DrawBuffer reserved");
    3b1a:	|     \-> pea 181fa <PutChar+0x4dc>
    3b20:	|         jsr 17254 <KPrintF>
    3b26:	|         addq.l #4,sp
    
  CstBackDropBufferApplyStart = AllocVec( 1000*5*2,MEMF_ANY);
    3b28:	|         move.l #10000,24(sp)
    3b30:	|         clr.l 20(sp)
    3b34:	|         move.l 1c9ca <SysBase>,d0
    3b3a:	|         movea.l d0,a6
    3b3c:	|         move.l 24(sp),d0
    3b40:	|         move.l 20(sp),d1
    3b44:	|         jsr -684(a6)
    3b48:	|         move.l d0,16(sp)
    3b4c:	|         move.l 16(sp),d0
    3b50:	|         move.l d0,1c90a <CstBackDropBufferApplyStart>
  if( !CstBackDropBufferApplyStart)
    3b56:	|         move.l 1c90a <CstBackDropBufferApplyStart>,d0
    3b5c:	|     /-- bne.s 3b72 <CstReserveBackdrop+0x1e2>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for CstBackDropBufferApplyStart");
    3b5e:	|     |   pea 18222 <PutChar+0x504>
    3b64:	|     |   jsr 17254 <KPrintF>
    3b6a:	|     |   addq.l #4,sp
    return FALSE;  
    3b6c:	|     |   clr.w d0
    3b6e:	+-----|-- bra.w 3d10 <CstReserveBackdrop+0x380>
  }
  CstBackDropBufferApplyCursor = CstBackDropBufferApplyStart;
    3b72:	|     \-> move.l 1c90a <CstBackDropBufferApplyStart>,d0
    3b78:	|         move.l d0,1c90e <CstBackDropBufferApplyCursor>
  *CstBackDropBufferApplyStart = 0;
    3b7e:	|         movea.l 1c90a <CstBackDropBufferApplyStart>,a0
    3b84:	|         clr.w (a0)

  *CstBackDropBufferApplyStart = 0;
    3b86:	|         movea.l 1c90a <CstBackDropBufferApplyStart>,a0
    3b8c:	|         clr.w (a0)
  CstViewBuffer = AllocVec(CstBackdropSize+width*2,MEMF_CHIP); //Some extra size for bob routine border area
    3b8e:	|         move.w 1c8e8 <CstBackdropSize>,d0
    3b94:	|         move.w d0,d0
    3b96:	|         andi.l #65535,d0
    3b9c:	|         move.l 64(sp),d1
    3ba0:	|         add.l d1,d1
    3ba2:	|         add.l d1,d0
    3ba4:	|         move.l d0,12(sp)
    3ba8:	|         moveq #2,d1
    3baa:	|         move.l d1,8(sp)
    3bae:	|         move.l 1c9ca <SysBase>,d0
    3bb4:	|         movea.l d0,a6
    3bb6:	|         move.l 12(sp),d0
    3bba:	|         move.l 8(sp),d1
    3bbe:	|         jsr -684(a6)
    3bc2:	|         move.l d0,4(sp)
    3bc6:	|         move.l 4(sp),d0
    3bca:	|         move.l d0,1c8fa <CstViewBuffer>
  if( !CstViewBuffer)
    3bd0:	|         move.l 1c8fa <CstViewBuffer>,d0
    3bd6:	|     /-- bne.s 3bec <CstReserveBackdrop+0x25c>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for ViewBuffer");
    3bd8:	|     |   pea 1826d <PutChar+0x54f>
    3bde:	|     |   jsr 17254 <KPrintF>
    3be4:	|     |   addq.l #4,sp
    return FALSE;  
    3be6:	|     |   clr.w d0
    3be8:	+-----|-- bra.w 3d10 <CstReserveBackdrop+0x380>
  }
  KPrintF("CstReserveBackdrop: ViewBuffer reserved");
    3bec:	|     \-> pea 182a7 <PutChar+0x589>
    3bf2:	|         jsr 17254 <KPrintF>
    3bf8:	|         addq.l #4,sp
  
  CstDrawBuffer += width/4; //divide with 4 because pointer is ulong 
    3bfa:	|         move.l 1c8fe <CstDrawBuffer>,d1
    3c00:	|         move.l 64(sp),d0
    3c04:	|     /-- bpl.s 3c08 <CstReserveBackdrop+0x278>
    3c06:	|     |   addq.l #3,d0
    3c08:	|     \-> asr.l #2,d0
    3c0a:	|         add.l d0,d0
    3c0c:	|         add.l d0,d0
    3c0e:	|         add.l d1,d0
    3c10:	|         move.l d0,1c8fe <CstDrawBuffer>
  CstViewBuffer += width/4; //divide with 4 because pointer is ulong
    3c16:	|         move.l 1c8fa <CstViewBuffer>,d1
    3c1c:	|         move.l 64(sp),d0
    3c20:	|     /-- bpl.s 3c24 <CstReserveBackdrop+0x294>
    3c22:	|     |   addq.l #3,d0
    3c24:	|     \-> asr.l #2,d0
    3c26:	|         add.l d0,d0
    3c28:	|         add.l d0,d0
    3c2a:	|         add.l d1,d0
    3c2c:	|         move.l d0,1c8fa <CstViewBuffer>
  

#ifdef EMULATOR
 	debug_register_bitmap(CstBackDrop, "CstBackDrop.bpl", 320, 256, 5, 0);
    3c32:	|         move.l 1c8ec <CstBackDrop>,d0
    3c38:	|         clr.l -(sp)
    3c3a:	|         pea 5 <_start+0x5>
    3c3e:	|         pea 100 <copyString+0x48>
    3c42:	|         pea 140 <decodeFilename+0x28>
    3c46:	|         pea 182cf <PutChar+0x5b1>
    3c4c:	|         move.l d0,-(sp)
    3c4e:	|         jsr 1733c <debug_register_bitmap>
    3c54:	|         lea 24(sp),sp
  debug_register_bitmap(CstDrawBuffer, "drawbuffer.bpl", width*8, height, 5, 0);
    3c58:	|         move.l 68(sp),d0
    3c5c:	|         movea.w d0,a1
    3c5e:	|         move.l 64(sp),d0
    3c62:	|         lsl.w #3,d0
    3c64:	|         movea.w d0,a0
    3c66:	|         move.l 1c8fe <CstDrawBuffer>,d0
    3c6c:	|         clr.l -(sp)
    3c6e:	|         pea 5 <_start+0x5>
    3c72:	|         move.l a1,-(sp)
    3c74:	|         move.l a0,-(sp)
    3c76:	|         pea 182df <PutChar+0x5c1>
    3c7c:	|         move.l d0,-(sp)
    3c7e:	|         jsr 1733c <debug_register_bitmap>
    3c84:	|         lea 24(sp),sp
  debug_register_bitmap(CstViewBuffer, "viewbuffer.bpl", width*8, height, 5, 0);
    3c88:	|         move.l 68(sp),d0
    3c8c:	|         movea.w d0,a1
    3c8e:	|         move.l 64(sp),d0
    3c92:	|         lsl.w #3,d0
    3c94:	|         movea.w d0,a0
    3c96:	|         move.l 1c8fa <CstViewBuffer>,d0
    3c9c:	|         clr.l -(sp)
    3c9e:	|         pea 5 <_start+0x5>
    3ca2:	|         move.l a1,-(sp)
    3ca4:	|         move.l a0,-(sp)
    3ca6:	|         pea 182ee <PutChar+0x5d0>
    3cac:	|         move.l d0,-(sp)
    3cae:	|         jsr 1733c <debug_register_bitmap>
    3cb4:	|         lea 24(sp),sp
#endif

  

  if( !CstCopperList || ! CstDrawBuffer || !CstViewBuffer)
    3cb8:	|         move.l 1c8f4 <CstCopperList>,d0
    3cbe:	|     /-- beq.s 3cd0 <CstReserveBackdrop+0x340>
    3cc0:	|     |   move.l 1c8fe <CstDrawBuffer>,d0
    3cc6:	|     +-- beq.s 3cd0 <CstReserveBackdrop+0x340>
    3cc8:	|     |   move.l 1c8fa <CstViewBuffer>,d0
    3cce:	|  /--|-- bne.s 3ce2 <CstReserveBackdrop+0x352>
  {
    KPrintF("CstReserveBackdrop: Memory allocation failed");
    3cd0:	|  |  \-> pea 182fd <PutChar+0x5df>
    3cd6:	|  |      jsr 17254 <KPrintF>
    3cdc:	|  |      addq.l #4,sp
    return FALSE;
    3cde:	|  |      clr.w d0
    3ce0:	+--|----- bra.s 3d10 <CstReserveBackdrop+0x380>
  }

  KPrintF("CstReserveBackdrop: Setting Copperlist");
    3ce2:	|  \----> pea 1832a <PutChar+0x60c>
    3ce8:	|         jsr 17254 <KPrintF>
    3cee:	|         addq.l #4,sp
  CstSetCl( CstCopperList);
    3cf0:	|         move.l 1c8f4 <CstCopperList>,d0
    3cf6:	|         move.l d0,-(sp)
    3cf8:	|         jsr 3844 <CstSetCl>
    3cfe:	|         addq.l #4,sp
  KPrintF("CstReserveBackdrop: Copperlist Set");
    3d00:	|         pea 18351 <PutChar+0x633>
    3d06:	|         jsr 17254 <KPrintF>
    3d0c:	|         addq.l #4,sp
  return TRUE;
    3d0e:	|         moveq #1,d0

}
    3d10:	\-------> movea.l (sp)+,a6
    3d12:	          lea 56(sp),sp
    3d16:	          rts

00003d18 <CstUnfreeze>:

void CstUnfreeze() {
    3d18:	       lea -24(sp),sp
    3d1c:	       move.l a6,-(sp)
    3d1e:	       move.l d2,-(sp)
	KPrintF("CstUnfreeze: Unfreezing Background Started");  
    3d20:	       pea 18374 <PutChar+0x656>
    3d26:	       jsr 17254 <KPrintF>
    3d2c:	       addq.l #4,sp

  UWORD size = winWidth/8*winHeight*5;
    3d2e:	       move.l 1c91e <winWidth>,d0
    3d34:	       lsr.l #3,d0
    3d36:	       move.l d0,d1
    3d38:	       move.l 1c922 <winHeight>,d0
    3d3e:	       move.l d0,d0
    3d40:	       muls.w d0,d1
    3d42:	       move.w d1,d0
    3d44:	       add.w d0,d0
    3d46:	       add.w d0,d0
    3d48:	       move.w d0,d2
    3d4a:	       add.w d1,d2
    3d4c:	       move.w d2,18(sp)

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    3d50:	       move.l #14675968,14(sp)

#ifdef EMULATOR
  debug_register_bitmap(CstBackDropBackup, "BackDropBackup", winWidth, winHeight, 5, 0);
    3d58:	       move.l 1c922 <winHeight>,d0
    3d5e:	       move.l d0,d0
    3d60:	       movea.w d0,a1
    3d62:	       move.l 1c91e <winWidth>,d0
    3d68:	       move.l d0,d0
    3d6a:	       movea.w d0,a0
    3d6c:	       move.l 1c8f0 <CstBackDropBackup>,d0
    3d72:	       clr.l -(sp)
    3d74:	       pea 5 <_start+0x5>
    3d78:	       move.l a1,-(sp)
    3d7a:	       move.l a0,-(sp)
    3d7c:	       pea 17f46 <PutChar+0x228>
    3d82:	       move.l d0,-(sp)
    3d84:	       jsr 1733c <debug_register_bitmap>
    3d8a:	       lea 24(sp),sp
#endif  

  ULONG *src = (ULONG *) CstBackDropBackup;
    3d8e:	       move.l 1c8f0 <CstBackDropBackup>,28(sp)
  ULONG *dst = (ULONG *) CstBackDrop;
    3d96:	       move.l 1c8ec <CstBackDrop>,24(sp)
  for(int i=0;i<size/4;i++) 
    3d9e:	       clr.l 20(sp)
    3da2:	   /-- bra.s 3dc8 <CstUnfreeze+0xb0>
  {
    *dst++ = *src++;
    3da4:	/--|-> move.l 28(sp),d1
    3da8:	|  |   move.l d1,d0
    3daa:	|  |   addq.l #4,d0
    3dac:	|  |   move.l d0,28(sp)
    3db0:	|  |   move.l 24(sp),d0
    3db4:	|  |   move.l d0,d2
    3db6:	|  |   addq.l #4,d2
    3db8:	|  |   move.l d2,24(sp)
    3dbc:	|  |   movea.l d1,a0
    3dbe:	|  |   move.l (a0),d1
    3dc0:	|  |   movea.l d0,a0
    3dc2:	|  |   move.l d1,(a0)
  for(int i=0;i<size/4;i++) 
    3dc4:	|  |   addq.l #1,20(sp)
    3dc8:	|  \-> move.w 18(sp),d0
    3dcc:	|      lsr.w #2,d0
    3dce:	|      move.w d0,d0
    3dd0:	|      andi.l #65535,d0
    3dd6:	|      cmp.l 20(sp),d0
    3dda:	\----- bgt.s 3da4 <CstUnfreeze+0x8c>
  }

  CstApplyBackDropCounter = 2;
    3ddc:	       move.w #2,1c8f8 <CstApplyBackDropCounter>

  *CstBackDropBufferApplyCursor++ = winWidth/16;
    3de4:	       move.l 1c91e <winWidth>,d0
    3dea:	       lsr.l #4,d0
    3dec:	       movea.l 1c90e <CstBackDropBufferApplyCursor>,a0
    3df2:	       move.l a0,d1
    3df4:	       addq.l #2,d1
    3df6:	       move.l d1,1c90e <CstBackDropBufferApplyCursor>
    3dfc:	       move.l d0,d0
    3dfe:	       move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = winHeight;
    3e00:	       move.l 1c922 <winHeight>,d0
    3e06:	       movea.l 1c90e <CstBackDropBufferApplyCursor>,a0
    3e0c:	       move.l a0,d1
    3e0e:	       addq.l #2,d1
    3e10:	       move.l d1,1c90e <CstBackDropBufferApplyCursor>
    3e16:	       move.l d0,d0
    3e18:	       move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = 0;
    3e1a:	       movea.l 1c90e <CstBackDropBufferApplyCursor>,a0
    3e20:	       move.l a0,d0
    3e22:	       addq.l #2,d0
    3e24:	       move.l d0,1c90e <CstBackDropBufferApplyCursor>
    3e2a:	       clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    3e2c:	       movea.l 1c90e <CstBackDropBufferApplyCursor>,a0
    3e32:	       move.l a0,d0
    3e34:	       addq.l #2,d0
    3e36:	       move.l d0,1c90e <CstBackDropBufferApplyCursor>
    3e3c:	       clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    3e3e:	       movea.l 1c90e <CstBackDropBufferApplyCursor>,a0
    3e44:	       move.l a0,d0
    3e46:	       addq.l #2,d0
    3e48:	       move.l d0,1c90e <CstBackDropBufferApplyCursor>
    3e4e:	       clr.w (a0)
  
  if( !CstBackDropBackup) {
    3e50:	       move.l 1c8f0 <CstBackDropBackup>,d0
    3e56:	   /-- bne.s 3e70 <CstUnfreeze+0x158>
    FreeVec( CstBackDropBackup);
    3e58:	   |   move.l 1c8f0 <CstBackDropBackup>,10(sp)
    3e60:	   |   move.l 1c9ca <SysBase>,d0
    3e66:	   |   movea.l d0,a6
    3e68:	   |   movea.l 10(sp),a1
    3e6c:	   |   jsr -690(a6)
  }

  KPrintF("CstFreeze: Finished");
    3e70:	   \-> pea 17f55 <PutChar+0x237>
    3e76:	       jsr 17254 <KPrintF>
    3e7c:	       addq.l #4,sp

}
    3e7e:	       nop
    3e80:	       move.l (sp)+,d2
    3e82:	       movea.l (sp)+,a6
    3e84:	       lea 24(sp),sp
    3e88:	       rts

00003e8a <drawLine>:
#include "support/gcc8_c_support.h"
#include "line.h"

extern int sceneWidth, sceneHeight;

void drawLine(int x1, int y1, int x2, int y2) {
    3e8a:	       lea -20(sp),sp
	int x, y;
	BOOL backwards = FALSE;
    3e8e:	       clr.w 10(sp)
	
	if (x1 < 0)  x1 = 0;
    3e92:	       tst.l 24(sp)
    3e96:	   /-- bge.s 3e9c <drawLine+0x12>
    3e98:	   |   clr.l 24(sp)
	if (y1 < 0)  y1 = 0;
    3e9c:	   \-> tst.l 28(sp)
    3ea0:	   /-- bge.s 3ea6 <drawLine+0x1c>
    3ea2:	   |   clr.l 28(sp)
	if (x2 < 0)  x2 = 0;
    3ea6:	   \-> tst.l 32(sp)
    3eaa:	   /-- bge.s 3eb0 <drawLine+0x26>
    3eac:	   |   clr.l 32(sp)
	if (y2 < 0)  y2 = 0;
    3eb0:	   \-> tst.l 36(sp)
    3eb4:	   /-- bge.s 3eba <drawLine+0x30>
    3eb6:	   |   clr.l 36(sp)
	if (x1 > sceneWidth) x1 = sceneWidth - 1;
    3eba:	   \-> move.l 1ca66 <sceneWidth>,d0
    3ec0:	       cmp.l 24(sp),d0
    3ec4:	   /-- bge.s 3ed4 <drawLine+0x4a>
    3ec6:	   |   move.l 1ca66 <sceneWidth>,d0
    3ecc:	   |   move.l d0,d1
    3ece:	   |   subq.l #1,d1
    3ed0:	   |   move.l d1,24(sp)
	if (x2 > sceneWidth) x2 = sceneWidth - 1;
    3ed4:	   \-> move.l 1ca66 <sceneWidth>,d0
    3eda:	       cmp.l 32(sp),d0
    3ede:	   /-- bge.s 3eee <drawLine+0x64>
    3ee0:	   |   move.l 1ca66 <sceneWidth>,d0
    3ee6:	   |   move.l d0,d1
    3ee8:	   |   subq.l #1,d1
    3eea:	   |   move.l d1,32(sp)
	if (y1 > sceneHeight) y1 = sceneHeight - 1;
    3eee:	   \-> move.l 1ca6a <sceneHeight>,d0
    3ef4:	       cmp.l 28(sp),d0
    3ef8:	   /-- bge.s 3f08 <drawLine+0x7e>
    3efa:	   |   move.l 1ca6a <sceneHeight>,d0
    3f00:	   |   move.l d0,d1
    3f02:	   |   subq.l #1,d1
    3f04:	   |   move.l d1,28(sp)
	if (y2 > sceneHeight) y2 = sceneHeight - 1;
    3f08:	   \-> move.l 1ca6a <sceneHeight>,d0
    3f0e:	       cmp.l 36(sp),d0
    3f12:	   /-- bge.s 3f22 <drawLine+0x98>
    3f14:	   |   move.l 1ca6a <sceneHeight>,d0
    3f1a:	   |   move.l d0,d1
    3f1c:	   |   subq.l #1,d1
    3f1e:	   |   move.l d1,36(sp)

	if (x1 > x2) {
    3f22:	   \-> move.l 24(sp),d0
    3f26:	       cmp.l 32(sp),d0
    3f2a:	/----- ble.s 3f46 <drawLine+0xbc>
		x = x2; 
    3f2c:	|      move.l 32(sp),16(sp)
		backwards = !backwards;
    3f32:	|      tst.w 10(sp)
    3f36:	|      seq d0
    3f38:	|      neg.b d0
    3f3a:	|      move.b d0,d0
    3f3c:	|      andi.w #255,d0
    3f40:	|      move.w d0,10(sp)
    3f44:	|  /-- bra.s 3f4c <drawLine+0xc2>
	} else x = x1;
    3f46:	\--|-> move.l 24(sp),16(sp)
		
	if (y1 > y2) {
    3f4c:	   \-> move.l 28(sp),d1
    3f50:	       cmp.l 36(sp),d1
    3f54:	/----- ble.s 3f70 <drawLine+0xe6>
		y = y2; 
    3f56:	|      move.l 36(sp),12(sp)
		backwards = !backwards;
    3f5c:	|      tst.w 10(sp)
    3f60:	|      seq d0
    3f62:	|      neg.b d0
    3f64:	|      move.b d0,d0
    3f66:	|      andi.w #255,d0
    3f6a:	|      move.w d0,10(sp)
    3f6e:	|  /-- bra.s 3f76 <drawLine+0xec>
	} else y = y1;	
    3f70:	\--|-> move.l 28(sp),12(sp)
	
	int diffX = x2-x1;
    3f76:	   \-> move.l 32(sp),d0
    3f7a:	       sub.l 24(sp),d0
    3f7e:	       move.l d0,6(sp)
    diffX = diffX < 0 ? diffX * -1 : diffX;
    3f82:	       move.l 6(sp),d0
    3f86:	   /-- bpl.s 3f8a <drawLine+0x100>
    3f88:	   |   neg.l d0
    3f8a:	   \-> move.l d0,6(sp)
	int diffY = y2-y1;	
    3f8e:	       move.l 36(sp),d1
    3f92:	       sub.l 28(sp),d1
    3f96:	       move.l d1,2(sp)
    diffY = diffY < 0 ? diffY * -1 : diffY;
    3f9a:	       move.l 2(sp),d0
    3f9e:	   /-- bpl.s 3fa2 <drawLine+0x118>
    3fa0:	   |   neg.l d0
    3fa2:	   \-> move.l d0,2(sp)
	
	if (! diffX) {
    3fa6:	       tst.l 6(sp)
    3faa:	   /-- bne.s 3fce <drawLine+0x144>
		diffX = 1;
    3fac:	   |   moveq #1,d0
    3fae:	   |   move.l d0,6(sp)
		if (x == sceneWidth - 1) x = sceneWidth -2;
    3fb2:	   |   move.l 1ca66 <sceneWidth>,d0
    3fb8:	   |   subq.l #1,d0
    3fba:	   |   cmp.l 16(sp),d0
    3fbe:	   +-- bne.s 3fce <drawLine+0x144>
    3fc0:	   |   move.l 1ca66 <sceneWidth>,d0
    3fc6:	   |   move.l d0,d1
    3fc8:	   |   subq.l #2,d1
    3fca:	   |   move.l d1,16(sp)
	}
	if (! diffY) {
    3fce:	   \-> tst.l 2(sp)
    3fd2:	   /-- bne.s 3ff6 <drawLine+0x16c>
		diffY = 1;
    3fd4:	   |   moveq #1,d0
    3fd6:	   |   move.l d0,2(sp)
		if (y == sceneHeight - 1) y = sceneHeight -2;
    3fda:	   |   move.l 1ca6a <sceneHeight>,d0
    3fe0:	   |   subq.l #1,d0
    3fe2:	   |   cmp.l 12(sp),d0
    3fe6:	   +-- bne.s 3ff6 <drawLine+0x16c>
    3fe8:	   |   move.l 1ca6a <sceneHeight>,d0
    3fee:	   |   move.l d0,d1
    3ff0:	   |   subq.l #2,d1
    3ff2:	   |   move.l d1,12(sp)
	}

    KPrintF("drawLine: Not implemented on Amiga"); //Amiga Todo: Implement 	
    3ff6:	   \-> pea 1839f <PutChar+0x681>
    3ffc:	       jsr 17254 <KPrintF>
    4002:	       addq.l #4,sp
	
}
    4004:	       nop
    4006:	       lea 20(sp),sp
    400a:	       rts

0000400c <deleteTextures>:
extern int specialSettings;
struct textureList *firstTexture = NULL;
BOOL NPOT_textures = TRUE;

void deleteTextures(unsigned int n,  unsigned int * textures)
{
    400c:	                      lea -24(sp),sp
    4010:	                      move.l a6,-(sp)
	if (firstTexture == NULL) {
    4012:	                      move.l 1c926 <firstTexture>,d0
    4018:	/-------------------- beq.w 40f6 <deleteTextures+0xea>
		//debugOut("Deleting texture while list is already empty.\n");
	} else {
		for (unsigned int i = 0; i < n; i++) {
    401c:	|                     clr.l 24(sp)
    4020:	|     /-------------- bra.w 40ea <deleteTextures+0xde>
			BOOL found = FALSE;
    4024:	|  /--|-------------> clr.w 18(sp)
			struct textureList *list = firstTexture;
    4028:	|  |  |               move.l 1c926 <firstTexture>,20(sp)
			if (list->name == textures[i]) {
    4030:	|  |  |               movea.l 20(sp),a0
    4034:	|  |  |               move.l (a0),d1
    4036:	|  |  |               move.l 24(sp),d0
    403a:	|  |  |               add.l d0,d0
    403c:	|  |  |               add.l d0,d0
    403e:	|  |  |               movea.l 36(sp),a0
    4042:	|  |  |               adda.l d0,a0
    4044:	|  |  |               move.l (a0),d0
    4046:	|  |  |               cmp.l d1,d0
    4048:	|  |  |  /----------- bne.w 40dc <deleteTextures+0xd0>
				found = TRUE;
    404c:	|  |  |  |            move.w #1,18(sp)
				firstTexture = list->next;
    4052:	|  |  |  |            movea.l 20(sp),a0
    4056:	|  |  |  |            move.l 12(a0),d0
    405a:	|  |  |  |            move.l d0,1c926 <firstTexture>
				FreeVec(list);
    4060:	|  |  |  |            move.l 20(sp),6(sp)
    4066:	|  |  |  |            move.l 1c9ca <SysBase>,d0
    406c:	|  |  |  |            movea.l d0,a6
    406e:	|  |  |  |            movea.l 6(sp),a1
    4072:	|  |  |  |            jsr -690(a6)
				continue;
    4076:	|  |  |  |  /-------- bra.s 40e6 <deleteTextures+0xda>
			}

			while (list->next) {
				if (list->next->name == textures[i]) {
    4078:	|  |  |  |  |  /----> movea.l 20(sp),a0
    407c:	|  |  |  |  |  |      movea.l 12(a0),a0
    4080:	|  |  |  |  |  |      move.l (a0),d1
    4082:	|  |  |  |  |  |      move.l 24(sp),d0
    4086:	|  |  |  |  |  |      add.l d0,d0
    4088:	|  |  |  |  |  |      add.l d0,d0
    408a:	|  |  |  |  |  |      movea.l 36(sp),a0
    408e:	|  |  |  |  |  |      adda.l d0,a0
    4090:	|  |  |  |  |  |      move.l (a0),d0
    4092:	|  |  |  |  |  |      cmp.l d1,d0
    4094:	|  |  |  |  |  |  /-- bne.s 40d2 <deleteTextures+0xc6>
					found = TRUE;
    4096:	|  |  |  |  |  |  |   move.w #1,18(sp)
					struct textureList *deleteMe = list->next;
    409c:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    40a0:	|  |  |  |  |  |  |   move.l 12(a0),14(sp)
					list->next = list->next->next;
    40a6:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    40aa:	|  |  |  |  |  |  |   movea.l 12(a0),a0
    40ae:	|  |  |  |  |  |  |   move.l 12(a0),d0
    40b2:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    40b6:	|  |  |  |  |  |  |   move.l d0,12(a0)
					FreeVec(deleteMe);
    40ba:	|  |  |  |  |  |  |   move.l 14(sp),10(sp)
    40c0:	|  |  |  |  |  |  |   move.l 1c9ca <SysBase>,d0
    40c6:	|  |  |  |  |  |  |   movea.l d0,a6
    40c8:	|  |  |  |  |  |  |   movea.l 10(sp),a1
    40cc:	|  |  |  |  |  |  |   jsr -690(a6)
					break;
    40d0:	|  |  |  |  +--|--|-- bra.s 40e6 <deleteTextures+0xda>
				}
				list = list->next;
    40d2:	|  |  |  |  |  |  \-> movea.l 20(sp),a0
    40d6:	|  |  |  |  |  |      move.l 12(a0),20(sp)
			while (list->next) {
    40dc:	|  |  |  \--|--|----> movea.l 20(sp),a0
    40e0:	|  |  |     |  |      move.l 12(a0),d0
    40e4:	|  |  |     |  \----- bne.s 4078 <deleteTextures+0x6c>
		for (unsigned int i = 0; i < n; i++) {
    40e6:	|  |  |     \-------> addq.l #1,24(sp)
    40ea:	|  |  \-------------> move.l 24(sp),d0
    40ee:	|  |                  cmp.l 32(sp),d0
    40f2:	|  \----------------- bcs.w 4024 <deleteTextures+0x18>
			}
		}
	}
}
    40f6:	\-------------------> nop
    40f8:	                      movea.l (sp)+,a6
    40fa:	                      lea 24(sp),sp
    40fe:	                      rts

00004100 <setGraphicsWindow>:

void setGraphicsWindow(BOOL fullscreen) {
    4100:	subq.l #4,sp
    4102:	move.l 8(sp),d0
    4106:	move.w d0,d0
    4108:	move.w d0,2(sp)
	KPrintF("setGraphicsWindow: Not implemented on Amiga yet"); //TODO
    410c:	pea 183c2 <PutChar+0x6a4>
    4112:	jsr 17254 <KPrintF>
    4118:	addq.l #4,sp
}
    411a:	nop
    411c:	addq.l #4,sp
    411e:	rts

00004120 <resourceNameFromNum>:

extern int numResourceNames /* = 0*/;
extern char * * allResourceNames /*= NULL*/;

const char * resourceNameFromNum (int i) {
	if (i == -1) return NULL;
    4120:	       moveq #-1,d0
    4122:	       cmp.l 4(sp),d0
    4126:	   /-- bne.s 412c <resourceNameFromNum+0xc>
    4128:	   |   moveq #0,d0
    412a:	/--|-- bra.s 4164 <resourceNameFromNum+0x44>
	if (numResourceNames == 0) return "RESOURCE";
    412c:	|  \-> move.l 1c9a6 <numResourceNames>,d0
    4132:	|  /-- bne.s 413c <resourceNameFromNum+0x1c>
    4134:	|  |   move.l #99314,d0
    413a:	+--|-- bra.s 4164 <resourceNameFromNum+0x44>
	if (i < numResourceNames) return allResourceNames[i];
    413c:	|  \-> move.l 1c9a6 <numResourceNames>,d0
    4142:	|      cmp.l 4(sp),d0
    4146:	|  /-- ble.s 415e <resourceNameFromNum+0x3e>
    4148:	|  |   move.l 1c95e <allResourceNames>,d1
    414e:	|  |   move.l 4(sp),d0
    4152:	|  |   add.l d0,d0
    4154:	|  |   add.l d0,d0
    4156:	|  |   movea.l d1,a0
    4158:	|  |   adda.l d0,a0
    415a:	|  |   move.l (a0),d0
    415c:	+--|-- bra.s 4164 <resourceNameFromNum+0x44>
	return "Unknown resource";
    415e:	|  \-> move.l #99323,d0
    4164:	\----> rts

00004166 <main_sludge>:
char * gamePath = NULL;
char *bundleFolder;
int weAreDoneSoQuit;

int main_sludge(int argc, char *argv[])
{
    4166:	          lea -44(sp),sp
    416a:	          movem.l d2-d3/a6,-(sp)
	/* Dimensions of our window. */
	//AMIGA TODO: Maybe remove as there will be no windowed mode
    winWidth = 320;
    416e:	          move.l #320,1c91e <winWidth>
    winHeight = 256;
    4178:	          move.l #256,1c922 <winHeight>

	char * sludgeFile;

	if(argc == 0) {
    4182:	          tst.l 60(sp)
    4186:	      /-- bne.s 419e <main_sludge+0x38>
		bundleFolder = copyString("game/");
    4188:	      |   pea 1840c <PutChar+0x6ee>
    418e:	      |   jsr b8 <copyString>
    4194:	      |   addq.l #4,sp
    4196:	      |   move.l d0,1c936 <bundleFolder>
    419c:	   /--|-- bra.s 41b4 <main_sludge+0x4e>
	} else {
		bundleFolder = copyString(argv[0]);
    419e:	   |  \-> movea.l 64(sp),a0
    41a2:	   |      move.l (a0),d0
    41a4:	   |      move.l d0,-(sp)
    41a6:	   |      jsr b8 <copyString>
    41ac:	   |      addq.l #4,sp
    41ae:	   |      move.l d0,1c936 <bundleFolder>
	}
    
	int lastSlash = -1;
    41b4:	   \----> moveq #-1,d0
    41b6:	          move.l d0,48(sp)
	for (int i = 0; bundleFolder[i]; i ++) {
    41ba:	          clr.l 44(sp)
    41be:	   /----- bra.s 41e0 <main_sludge+0x7a>
		if (bundleFolder[i] == PATHSLASH) lastSlash = i;
    41c0:	/--|----> move.l 1c936 <bundleFolder>,d1
    41c6:	|  |      move.l 44(sp),d0
    41ca:	|  |      movea.l d1,a0
    41cc:	|  |      adda.l d0,a0
    41ce:	|  |      move.b (a0),d0
    41d0:	|  |      cmpi.b #47,d0
    41d4:	|  |  /-- bne.s 41dc <main_sludge+0x76>
    41d6:	|  |  |   move.l 44(sp),48(sp)
	for (int i = 0; bundleFolder[i]; i ++) {
    41dc:	|  |  \-> addq.l #1,44(sp)
    41e0:	|  \----> move.l 1c936 <bundleFolder>,d1
    41e6:	|         move.l 44(sp),d0
    41ea:	|         movea.l d1,a0
    41ec:	|         adda.l d0,a0
    41ee:	|         move.b (a0),d0
    41f0:	\-------- bne.s 41c0 <main_sludge+0x5a>
	}
	bundleFolder[lastSlash+1] = NULL;
    41f2:	          move.l 1c936 <bundleFolder>,d0
    41f8:	          move.l 48(sp),d1
    41fc:	          addq.l #1,d1
    41fe:	          movea.l d0,a0
    4200:	          adda.l d1,a0
    4202:	          clr.b (a0)

	if (argc > 1) {
    4204:	          moveq #1,d0
    4206:	          cmp.l 60(sp),d0
    420a:	      /-- bge.s 4226 <main_sludge+0xc0>
		sludgeFile = argv[argc - 1];
    420c:	      |   move.l 60(sp),d0
    4210:	      |   addi.l #1073741823,d0
    4216:	      |   add.l d0,d0
    4218:	      |   add.l d0,d0
    421a:	      |   movea.l 64(sp),a0
    421e:	      |   adda.l d0,a0
    4220:	      |   move.l (a0),52(sp)
    4224:	   /--|-- bra.s 4280 <main_sludge+0x11a>
	} else {
		sludgeFile = joinStrings (bundleFolder, "gamedata.slg");
    4226:	   |  \-> move.l 1c936 <bundleFolder>,d0
    422c:	   |      pea 18412 <PutChar+0x6f4>
    4232:	   |      move.l d0,-(sp)
    4234:	   |      jsr 13d20 <joinStrings>
    423a:	   |      addq.l #8,sp
    423c:	   |      move.l d0,52(sp)
		if (! ( fileExists (sludgeFile) ) ) {
    4240:	   |      move.l 52(sp),-(sp)
    4244:	   |      jsr 13c1a <fileExists>
    424a:	   |      addq.l #4,sp
    424c:	   |      tst.b d0
    424e:	   +----- bne.s 4280 <main_sludge+0x11a>
			FreeVec(sludgeFile);
    4250:	   |      move.l 52(sp),40(sp)
    4256:	   |      move.l 1c9ca <SysBase>,d0
    425c:	   |      movea.l d0,a6
    425e:	   |      movea.l 40(sp),a1
    4262:	   |      jsr -690(a6)
			sludgeFile = joinStrings (bundleFolder, "gamedata");			
    4266:	   |      move.l 1c936 <bundleFolder>,d0
    426c:	   |      pea 1841f <PutChar+0x701>
    4272:	   |      move.l d0,-(sp)
    4274:	   |      jsr 13d20 <joinStrings>
    427a:	   |      addq.l #8,sp
    427c:	   |      move.l d0,52(sp)
	//AMIGA TODO: Show arguments
	/*if (! parseCmdlineParameters(argc, argv) && !(sludgeFile) ) {
		printCmdlineUsage();
		return 0;
	}*/
	KPrintF("Game file not found.\n");
    4280:	   \----> pea 18428 <PutChar+0x70a>
    4286:	          jsr 17254 <KPrintF>
    428c:	          addq.l #4,sp
	if (! fileExists(sludgeFile) ) {	
    428e:	          move.l 52(sp),-(sp)
    4292:	          jsr 13c1a <fileExists>
    4298:	          addq.l #4,sp
    429a:	          tst.b d0
    429c:	      /-- bne.s 42f4 <main_sludge+0x18e>
		Write(Output(), (APTR)"Game file not found.\n", 21);
    429e:	      |   move.l 1c9d2 <DOSBase>,d0
    42a4:	      |   movea.l d0,a6
    42a6:	      |   jsr -60(a6)
    42aa:	      |   move.l d0,28(sp)
    42ae:	      |   move.l 28(sp),d0
    42b2:	      |   move.l d0,24(sp)
    42b6:	      |   move.l #99368,20(sp)
    42be:	      |   moveq #21,d0
    42c0:	      |   move.l d0,16(sp)
    42c4:	      |   move.l 1c9d2 <DOSBase>,d0
    42ca:	      |   movea.l d0,a6
    42cc:	      |   move.l 24(sp),d1
    42d0:	      |   move.l 20(sp),d2
    42d4:	      |   move.l 16(sp),d3
    42d8:	      |   jsr -48(a6)
    42dc:	      |   move.l d0,12(sp)
		KPrintF("Game file not found.\n");
    42e0:	      |   pea 18428 <PutChar+0x70a>
    42e6:	      |   jsr 17254 <KPrintF>
    42ec:	      |   addq.l #4,sp
		//AMIGA TODO: Show arguments
		//printCmdlineUsage();
		return 0;
    42ee:	      |   moveq #0,d0
    42f0:	/-----|-- bra.w 44f2 <main_sludge+0x38c>
	}

	KPrintF("Setgamefilepath\n");
    42f4:	|     \-> pea 1843e <PutChar+0x720>
    42fa:	|         jsr 17254 <KPrintF>
    4300:	|         addq.l #4,sp
	setGameFilePath (sludgeFile);	
    4302:	|         move.l 52(sp),-(sp)
    4306:	|         jsr 44fc <setGameFilePath>
    430c:	|         addq.l #4,sp
	if (! initSludge (sludgeFile)) return 0;
    430e:	|         move.l 52(sp),-(sp)
    4312:	|         jsr 5aaa <initSludge>
    4318:	|         addq.l #4,sp
    431a:	|         tst.w d0
    431c:	|     /-- bne.s 4324 <main_sludge+0x1be>
    431e:	|     |   moveq #0,d0
    4320:	+-----|-- bra.w 44f2 <main_sludge+0x38c>
	
	if( winWidth != 320 || winHeight != 256) {
    4324:	|     \-> move.l 1c91e <winWidth>,d0
    432a:	|         cmpi.l #320,d0
    4330:	|     /-- bne.s 4340 <main_sludge+0x1da>
    4332:	|     |   move.l 1c922 <winHeight>,d0
    4338:	|     |   cmpi.l #256,d0
    433e:	|  /--|-- beq.s 4362 <main_sludge+0x1fc>
		KPrintF("This Screen Format is currently unsupported on Amiga. Only PAL Lowres supported atm. winWidth and winHeight will be reseted.");	
    4340:	|  |  \-> pea 1844f <PutChar+0x731>
    4346:	|  |      jsr 17254 <KPrintF>
    434c:	|  |      addq.l #4,sp
		winWidth = 320;
    434e:	|  |      move.l #320,1c91e <winWidth>
		winHeight = 256;
    4358:	|  |      move.l #256,1c922 <winHeight>
	}

	KPrintF("Resizing Backdrop\n");
    4362:	|  \----> pea 184cc <PutChar+0x7ae>
    4368:	|         jsr 17254 <KPrintF>
    436e:	|         addq.l #4,sp
	if (! resizeBackdrop (winWidth, winHeight)) {
    4370:	|         move.l 1c922 <winHeight>,d0
    4376:	|         move.l d0,d1
    4378:	|         move.l 1c91e <winWidth>,d0
    437e:	|         move.l d1,-(sp)
    4380:	|         move.l d0,-(sp)
    4382:	|         jsr d41c <resizeBackdrop>
    4388:	|         addq.l #8,sp
    438a:	|         tst.w d0
    438c:	|     /-- bne.s 43a2 <main_sludge+0x23c>
		KPrintF("Couldn't allocate memory for backdrop");
    438e:	|     |   pea 184df <PutChar+0x7c1>
    4394:	|     |   jsr 17254 <KPrintF>
    439a:	|     |   addq.l #4,sp
		return FALSE;
    439c:	|     |   moveq #0,d0
    439e:	+-----|-- bra.w 44f2 <main_sludge+0x38c>
	}

	KPrintF("Init People\n");
    43a2:	|     \-> pea 18505 <PutChar+0x7e7>
    43a8:	|         jsr 17254 <KPrintF>
    43ae:	|         addq.l #4,sp
	if (! initPeople ())
    43b0:	|         jsr a984 <initPeople>
    43b6:	|         tst.w d0
    43b8:	|     /-- bne.s 43ce <main_sludge+0x268>
	{
		KPrintF("Couldn't initialise people stuff");
    43ba:	|     |   pea 18512 <PutChar+0x7f4>
    43c0:	|     |   jsr 17254 <KPrintF>
    43c6:	|     |   addq.l #4,sp
		return FALSE;
    43c8:	|     |   moveq #0,d0
    43ca:	+-----|-- bra.w 44f2 <main_sludge+0x38c>
	}

	KPrintF("Init Floor\n");
    43ce:	|     \-> pea 18533 <PutChar+0x815>
    43d4:	|         jsr 17254 <KPrintF>
    43da:	|         addq.l #4,sp
	if (! initFloor ())
    43dc:	|         jsr 1660a <initFloor>
    43e2:	|         tst.w d0
    43e4:	|     /-- bne.s 43fa <main_sludge+0x294>
	{
		KPrintF("Couldn't initialise floor stuff");
    43e6:	|     |   pea 1853f <PutChar+0x821>
    43ec:	|     |   jsr 17254 <KPrintF>
    43f2:	|     |   addq.l #4,sp
		
		return FALSE;
    43f4:	|     |   moveq #0,d0
    43f6:	+-----|-- bra.w 44f2 <main_sludge+0x38c>
	}

	KPrintF("Init Objecttype\n");
    43fa:	|     \-> pea 1855f <PutChar+0x841>
    4400:	|         jsr 17254 <KPrintF>
    4406:	|         addq.l #4,sp
	if (! initObjectTypes ())
    4408:	|         jsr d5d8 <initObjectTypes>
    440e:	|         tst.w d0
    4410:	|     /-- bne.s 4426 <main_sludge+0x2c0>
	{
		KPrintF("Couldn't initialise object type stuff");
    4412:	|     |   pea 18570 <PutChar+0x852>
    4418:	|     |   jsr 17254 <KPrintF>
    441e:	|     |   addq.l #4,sp
		return FALSE;
    4420:	|     |   moveq #0,d0
    4422:	+-----|-- bra.w 44f2 <main_sludge+0x38c>
	}

	KPrintF("Init speech\n");
    4426:	|     \-> pea 18596 <PutChar+0x878>
    442c:	|         jsr 17254 <KPrintF>
    4432:	|         addq.l #4,sp
	initSpeech ();
    4434:	|         jsr 7ecc <initSpeech>
	KPrintF("Init status bar\n");
    443a:	|         pea 185a3 <PutChar+0x885>
    4440:	|         jsr 17254 <KPrintF>
    4446:	|         addq.l #4,sp
	initStatusBar ();
    4448:	|         jsr 7990 <initStatusBar>

	KPrintF("Get numbered string\n");
    444e:	|         pea 185b4 <PutChar+0x896>
    4454:	|         jsr 17254 <KPrintF>
    445a:	|         addq.l #4,sp
	gameName = getNumberedString(1);
    445c:	|         pea 1 <_start+0x1>
    4460:	|         jsr 6ca0 <getNumberedString>
    4466:	|         addq.l #4,sp
    4468:	|         move.l d0,1c92e <gameName>
	//initSoundStuff (hMainWindow); Todo Amiga: Maybe move soundstuff here
	KPrintF("Start new function num\n");
    446e:	|         pea 185c9 <PutChar+0x8ab>
    4474:	|         jsr 17254 <KPrintF>
    447a:	|         addq.l #4,sp
	startNewFunctionNum (0, 0, NULL, noStack, TRUE);
    447c:	|         move.l 1c99a <noStack>,d0
    4482:	|         pea 1 <_start+0x1>
    4486:	|         move.l d0,-(sp)
    4488:	|         clr.l -(sp)
    448a:	|         clr.l -(sp)
    448c:	|         clr.l -(sp)
    448e:	|         jsr 6af6 <startNewFunctionNum>
    4494:	|         lea 20(sp),sp

	KPrintF("Starting main loop");
    4498:	|         pea 185e1 <PutChar+0x8c3>
    449e:	|         jsr 17254 <KPrintF>
    44a4:	|         addq.l #4,sp

	volatile struct Custom *custom = (struct Custom*)0xdff000;
    44a6:	|         move.l #14675968,36(sp)
	weAreDoneSoQuit = 0;
    44ae:	|         clr.l 1c93a <weAreDoneSoQuit>
	while ( !weAreDoneSoQuit ) {	
    44b4:	|     /-- bra.s 44d4 <main_sludge+0x36e>
		//custom->color[0] = 0xf00;			
		sludgeDisplay ();
    44b6:	|  /--|-> jsr 6a86 <sludgeDisplay>
		CsiCheckInput();
    44bc:	|  |  |   jsr cf50 <CsiCheckInput>
		walkAllPeople();
    44c2:	|  |  |   jsr bf0a <walkAllPeople>
		handleInput();
    44c8:	|  |  |   jsr 5844 <handleInput>
		//custom->color[0] = 0x000;			
		WaitVbl();
    44ce:	|  |  |   jsr 17188 <WaitVbl>
	while ( !weAreDoneSoQuit ) {	
    44d4:	|  |  \-> move.l 1c93a <weAreDoneSoQuit>,d0
    44da:	|  \----- beq.s 44b6 <main_sludge+0x350>
	}	
	//Amiga Cleanup
	FreeVec(sludgeFile);
    44dc:	|         move.l 52(sp),32(sp)
    44e2:	|         move.l 1c9ca <SysBase>,d0
    44e8:	|         movea.l d0,a6
    44ea:	|         movea.l 32(sp),a1
    44ee:	|         jsr -690(a6)
}
    44f2:	\-------> movem.l (sp)+,d2-d3/a6
    44f6:	          lea 44(sp),sp
    44fa:	          rts

000044fc <setGameFilePath>:

void setGameFilePath (char * f) {
    44fc:	          lea -1104(sp),sp
    4500:	          move.l a6,-(sp)
    4502:	          move.l d2,-(sp)
	char currentDir[1000];

	if (!GetCurrentDirName( currentDir, 998)) {
    4504:	          move.l #1112,d0
    450a:	          add.l sp,d0
    450c:	          addi.l #-1102,d0
    4512:	          move.l d0,1100(sp)
    4516:	          move.l #998,1096(sp)
    451e:	          move.l 1c9d2 <DOSBase>,d0
    4524:	          movea.l d0,a6
    4526:	          move.l 1100(sp),d1
    452a:	          move.l 1096(sp),d2
    452e:	          jsr -564(a6)
    4532:	          move.w d0,1094(sp)
    4536:	          move.w 1094(sp),d0
    453a:	      /-- bne.s 454a <setGameFilePath+0x4e>
		KPrintF("setGameFilePath:  current directory.\n");
    453c:	      |   pea 185f4 <PutChar+0x8d6>
    4542:	      |   jsr 17254 <KPrintF>
    4548:	      |   addq.l #4,sp
	}	

	int got = -1, a;	
    454a:	      \-> moveq #-1,d0
    454c:	          move.l d0,1108(sp)

	for (a = 0; f[a]; a ++) {
    4550:	          clr.l 1104(sp)
    4554:	   /----- bra.s 4572 <setGameFilePath+0x76>
		if (f[a] == PATHSLASH) got = a;
    4556:	/--|----> move.l 1104(sp),d0
    455a:	|  |      movea.l 1116(sp),a0
    455e:	|  |      adda.l d0,a0
    4560:	|  |      move.b (a0),d0
    4562:	|  |      cmpi.b #47,d0
    4566:	|  |  /-- bne.s 456e <setGameFilePath+0x72>
    4568:	|  |  |   move.l 1104(sp),1108(sp)
	for (a = 0; f[a]; a ++) {
    456e:	|  |  \-> addq.l #1,1104(sp)
    4572:	|  \----> move.l 1104(sp),d0
    4576:	|         movea.l 1116(sp),a0
    457a:	|         adda.l d0,a0
    457c:	|         move.b (a0),d0
    457e:	\-------- bne.s 4556 <setGameFilePath+0x5a>
	}

	if (got != -1) {
    4580:	          moveq #-1,d0
    4582:	          cmp.l 1108(sp),d0
    4586:	   /----- beq.s 4600 <setGameFilePath+0x104>
		f[got] = 0;	
    4588:	   |      move.l 1108(sp),d0
    458c:	   |      movea.l 1116(sp),a0
    4590:	   |      adda.l d0,a0
    4592:	   |      clr.b (a0)
		BPTR lock = Lock(f, ACCESS_READ);	
    4594:	   |      move.l 1116(sp),1090(sp)
    459a:	   |      moveq #-2,d0
    459c:	   |      move.l d0,1086(sp)
    45a0:	   |      move.l 1c9d2 <DOSBase>,d0
    45a6:	   |      movea.l d0,a6
    45a8:	   |      move.l 1090(sp),d1
    45ac:	   |      move.l 1086(sp),d2
    45b0:	   |      jsr -84(a6)
    45b4:	   |      move.l d0,1082(sp)
    45b8:	   |      move.l 1082(sp),d0
    45bc:	   |      move.l d0,1078(sp)
		if (!CurrentDir(lock)) {
    45c0:	   |      move.l 1078(sp),1074(sp)
    45c6:	   |      move.l 1c9d2 <DOSBase>,d0
    45cc:	   |      movea.l d0,a6
    45ce:	   |      move.l 1074(sp),d1
    45d2:	   |      jsr -126(a6)
    45d6:	   |      move.l d0,1070(sp)
    45da:	   |      move.l 1070(sp),d0
    45de:	   |  /-- bne.s 45f2 <setGameFilePath+0xf6>
			KPrintF("setGameFilePath:: Failed changing to directory %s\n", f);
    45e0:	   |  |   move.l 1116(sp),-(sp)
    45e4:	   |  |   pea 1861a <PutChar+0x8fc>
    45ea:	   |  |   jsr 17254 <KPrintF>
    45f0:	   |  |   addq.l #8,sp
		}
		f[got] = PATHSLASH;
    45f2:	   |  \-> move.l 1108(sp),d0
    45f6:	   |      movea.l 1116(sp),a0
    45fa:	   |      adda.l d0,a0
    45fc:	   |      move.b #47,(a0)
	}

	gamePath = AllocVec(400, MEMF_ANY);
    4600:	   \----> move.l #400,1066(sp)
    4608:	          clr.l 1062(sp)
    460c:	          move.l 1c9ca <SysBase>,d0
    4612:	          movea.l d0,a6
    4614:	          move.l 1066(sp),d0
    4618:	          move.l 1062(sp),d1
    461c:	          jsr -684(a6)
    4620:	          move.l d0,1058(sp)
    4624:	          move.l 1058(sp),d0
    4628:	          move.l d0,1c932 <gamePath>
	if (gamePath==0) {
    462e:	          move.l 1c932 <gamePath>,d0
    4634:	      /-- bne.s 4648 <setGameFilePath+0x14c>
		KPrintF("setGameFilePath: Can't reserve memory for game directory.\n");
    4636:	      |   pea 1864d <PutChar+0x92f>
    463c:	      |   jsr 17254 <KPrintF>
    4642:	      |   addq.l #4,sp
    4644:	   /--|-- bra.w 4730 <setGameFilePath+0x234>
		return;
	}

	BPTR lock = Lock(gamePath, ACCESS_READ);	
    4648:	   |  \-> move.l 1c932 <gamePath>,1054(sp)
    4650:	   |      moveq #-2,d0
    4652:	   |      move.l d0,1050(sp)
    4656:	   |      move.l 1c9d2 <DOSBase>,d0
    465c:	   |      movea.l d0,a6
    465e:	   |      move.l 1054(sp),d1
    4662:	   |      move.l 1050(sp),d2
    4666:	   |      jsr -84(a6)
    466a:	   |      move.l d0,1046(sp)
    466e:	   |      move.l 1046(sp),d0
    4672:	   |      move.l d0,1042(sp)
	if (! CurrentDir(lock)) {
    4676:	   |      move.l 1042(sp),1038(sp)
    467c:	   |      move.l 1c9d2 <DOSBase>,d0
    4682:	   |      movea.l d0,a6
    4684:	   |      move.l 1038(sp),d1
    4688:	   |      jsr -126(a6)
    468c:	   |      move.l d0,1034(sp)
    4690:	   |      move.l 1034(sp),d0
    4694:	   |  /-- bne.s 46a4 <setGameFilePath+0x1a8>
		KPrintF("setGameFilePath: Can't get game directory.\n");
    4696:	   |  |   pea 18688 <PutChar+0x96a>
    469c:	   |  |   jsr 17254 <KPrintF>
    46a2:	   |  |   addq.l #4,sp
	}
	
	lock = Lock(currentDir, ACCESS_READ);	
    46a4:	   |  \-> move.l #1112,d0
    46aa:	   |      add.l sp,d0
    46ac:	   |      addi.l #-1102,d0
    46b2:	   |      move.l d0,1030(sp)
    46b6:	   |      moveq #-2,d0
    46b8:	   |      move.l d0,1026(sp)
    46bc:	   |      move.l 1c9d2 <DOSBase>,d0
    46c2:	   |      movea.l d0,a6
    46c4:	   |      move.l 1030(sp),d1
    46c8:	   |      move.l 1026(sp),d2
    46cc:	   |      jsr -84(a6)
    46d0:	   |      move.l d0,1022(sp)
    46d4:	   |      move.l 1022(sp),d0
    46d8:	   |      move.l d0,1042(sp)
	if (!CurrentDir(lock)) {	
    46dc:	   |      move.l 1042(sp),1018(sp)
    46e2:	   |      move.l 1c9d2 <DOSBase>,d0
    46e8:	   |      movea.l d0,a6
    46ea:	   |      move.l 1018(sp),d1
    46ee:	   |      jsr -126(a6)
    46f2:	   |      move.l d0,1014(sp)
    46f6:	   |      move.l 1014(sp),d0
    46fa:	   |  /-- bne.s 4710 <setGameFilePath+0x214>
		KPrintF("setGameFilePath: Failed changing to directory %s\n", currentDir);
    46fc:	   |  |   moveq #10,d0
    46fe:	   |  |   add.l sp,d0
    4700:	   |  |   move.l d0,-(sp)
    4702:	   |  |   pea 186b4 <PutChar+0x996>
    4708:	   |  |   jsr 17254 <KPrintF>
    470e:	   |  |   addq.l #8,sp
	}

	//Free Mem
	if (gamePath != 0) FreeVec(gamePath);
    4710:	   |  \-> move.l 1c932 <gamePath>,d0
    4716:	   +----- beq.s 4730 <setGameFilePath+0x234>
    4718:	   |      move.l 1c932 <gamePath>,1010(sp)
    4720:	   |      move.l 1c9ca <SysBase>,d0
    4726:	   |      movea.l d0,a6
    4728:	   |      movea.l 1010(sp),a1
    472c:	   |      jsr -690(a6)
}
    4730:	   \----> move.l (sp)+,d2
    4732:	          movea.l (sp)+,a6
    4734:	          lea 1104(sp),sp
    4738:	          rts

0000473a <abortFunction>:
int numResourceNames = 0;
int numUserFunc = 0;
int specialSettings;


void abortFunction (struct loadedFunction * fun) {
    473a:	/-------> lea -16(sp),sp
    473e:	|         move.l a6,-(sp)
	int a;

	pauseFunction (fun);
    4740:	|         move.l 24(sp),-(sp)
    4744:	|         jsr 6868 <pauseFunction>
    474a:	|         addq.l #4,sp
	while (fun -> stack) trimStack (&fun -> stack);
    474c:	|     /-- bra.s 475e <abortFunction+0x24>
    474e:	|  /--|-> moveq #24,d0
    4750:	|  |  |   add.l 24(sp),d0
    4754:	|  |  |   move.l d0,-(sp)
    4756:	|  |  |   jsr 15178 <trimStack>
    475c:	|  |  |   addq.l #4,sp
    475e:	|  |  \-> movea.l 24(sp),a0
    4762:	|  |      move.l 24(a0),d0
    4766:	|  \----- bne.s 474e <abortFunction+0x14>
	FreeVec( fun -> compiledLines);
    4768:	|         movea.l 24(sp),a0
    476c:	|         move.l 4(a0),12(sp)
    4772:	|         move.l 1c9ca <SysBase>,d0
    4778:	|         movea.l d0,a6
    477a:	|         movea.l 12(sp),a1
    477e:	|         jsr -690(a6)
	for (a = 0; a < fun -> numLocals; a ++) unlinkVar (&(fun -> localVars[a]));
    4782:	|         clr.l 16(sp)
    4786:	|     /-- bra.s 47a6 <abortFunction+0x6c>
    4788:	|  /--|-> movea.l 24(sp),a0
    478c:	|  |  |   move.l 20(a0),d1
    4790:	|  |  |   move.l 16(sp),d0
    4794:	|  |  |   lsl.l #3,d0
    4796:	|  |  |   add.l d1,d0
    4798:	|  |  |   move.l d0,-(sp)
    479a:	|  |  |   jsr 14a42 <unlinkVar>
    47a0:	|  |  |   addq.l #4,sp
    47a2:	|  |  |   addq.l #1,16(sp)
    47a6:	|  |  \-> movea.l 24(sp),a0
    47aa:	|  |      move.l 8(a0),d0
    47ae:	|  |      cmp.l 16(sp),d0
    47b2:	|  \----- bgt.s 4788 <abortFunction+0x4e>
	FreeVec(fun -> localVars);
    47b4:	|         movea.l 24(sp),a0
    47b8:	|         move.l 20(a0),8(sp)
    47be:	|         move.l 1c9ca <SysBase>,d0
    47c4:	|         movea.l d0,a6
    47c6:	|         movea.l 8(sp),a1
    47ca:	|         jsr -690(a6)
	unlinkVar (&fun -> reg);
    47ce:	|         moveq #28,d0
    47d0:	|         add.l 24(sp),d0
    47d4:	|         move.l d0,-(sp)
    47d6:	|         jsr 14a42 <unlinkVar>
    47dc:	|         addq.l #4,sp
	if (fun -> calledBy) abortFunction (fun -> calledBy);
    47de:	|         movea.l 24(sp),a0
    47e2:	|         move.l 40(a0),d0
    47e6:	|     /-- beq.s 47f8 <abortFunction+0xbe>
    47e8:	|     |   movea.l 24(sp),a0
    47ec:	|     |   move.l 40(a0),d0
    47f0:	|     |   move.l d0,-(sp)
    47f2:	\-----|-- jsr 473a <abortFunction>(pc)
    47f6:	      |   addq.l #4,sp
	FreeVec(fun);
    47f8:	      \-> move.l 24(sp),4(sp)
    47fe:	          move.l 1c9ca <SysBase>,d0
    4804:	          movea.l d0,a6
    4806:	          movea.l 4(sp),a1
    480a:	          jsr -690(a6)
	fun = NULL;
    480e:	          clr.l 24(sp)
}
    4812:	          nop
    4814:	          movea.l (sp)+,a6
    4816:	          lea 16(sp),sp
    481a:	          rts

0000481c <cancelAFunction>:

int cancelAFunction (int funcNum, struct loadedFunction * myself, BOOL * killedMyself) {
    481c:	          subq.l #8,sp
	int n = 0;
    481e:	          clr.l 4(sp)
	*killedMyself = FALSE;
    4822:	          movea.l 20(sp),a0
    4826:	          clr.w (a0)

	struct loadedFunction * fun = allRunningFunctions;
    4828:	          move.l 1c962 <allRunningFunctions>,(sp)
	while (fun) {
    482e:	   /----- bra.s 485c <cancelAFunction+0x40>
		if (fun -> originalNumber == funcNum) {
    4830:	/--|----> movea.l (sp),a0
    4832:	|  |      move.l (a0),d0
    4834:	|  |      cmp.l 12(sp),d0
    4838:	|  |  /-- bne.s 4856 <cancelAFunction+0x3a>
			fun -> cancelMe = TRUE;
    483a:	|  |  |   movea.l (sp),a0
    483c:	|  |  |   move.w #1,54(a0)
			n++;
    4842:	|  |  |   addq.l #1,4(sp)
			if (fun == myself) *killedMyself = TRUE;
    4846:	|  |  |   move.l (sp),d0
    4848:	|  |  |   cmp.l 16(sp),d0
    484c:	|  |  +-- bne.s 4856 <cancelAFunction+0x3a>
    484e:	|  |  |   movea.l 20(sp),a0
    4852:	|  |  |   move.w #1,(a0)
		}
		fun = fun -> next;
    4856:	|  |  \-> movea.l (sp),a0
    4858:	|  |      move.l 44(a0),(sp)
	while (fun) {
    485c:	|  \----> tst.l (sp)
    485e:	\-------- bne.s 4830 <cancelAFunction+0x14>
	}
	return n;
    4860:	          move.l 4(sp),d0
}
    4864:	          addq.l #8,sp
    4866:	          rts

00004868 <completeTimers>:


void completeTimers () {
    4868:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    486a:	          move.l 1c962 <allRunningFunctions>,(sp)

	while (thisFunction) {
    4870:	   /----- bra.s 4886 <completeTimers+0x1e>
		if (thisFunction->freezerLevel == 0) thisFunction->timeLeft = 0;
    4872:	/--|----> movea.l (sp),a0
    4874:	|  |      move.b 56(a0),d0
    4878:	|  |  /-- bne.s 4880 <completeTimers+0x18>
    487a:	|  |  |   movea.l (sp),a0
    487c:	|  |  |   clr.l 12(a0)
		thisFunction = thisFunction->next;
    4880:	|  |  \-> movea.l (sp),a0
    4882:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    4886:	|  \----> tst.l (sp)
    4888:	\-------- bne.s 4872 <completeTimers+0xa>
	}
}
    488a:	          nop
    488c:	          nop
    488e:	          addq.l #4,sp
    4890:	          rts

00004892 <continueFunction>:

BOOL continueFunction (struct loadedFunction * fun) {
    4892:	                                                             lea -76(sp),sp
	BOOL keepLooping = TRUE;
    4896:	                                                             move.w #1,74(sp)
	BOOL advanceNow;
	unsigned int param;
	enum sludgeCommand com;

	if (fun -> cancelMe) {
    489c:	                                                             movea.l 80(sp),a0
    48a0:	                                                             move.w 54(a0),d0
    48a4:	/----------------------------------------------------------- beq.w 5732 <continueFunction+0xea0>
		abortFunction (fun);
    48a8:	|                                                            move.l 80(sp),-(sp)
    48ac:	|                                                            jsr 473a <abortFunction>
    48b2:	|                                                            addq.l #4,sp
		return TRUE;
    48b4:	|                                                            moveq #1,d0
    48b6:	|  /-------------------------------------------------------- bra.w 573c <continueFunction+0xeaa>
	}

	while (keepLooping) {
		advanceNow = TRUE;
    48ba:	|  |  /----------------------------------------------------> move.w #1,72(sp)
		param = fun -> compiledLines[fun -> runThisLine].param;
    48c0:	|  |  |                                                      movea.l 80(sp),a0
    48c4:	|  |  |                                                      move.l 4(a0),d1
    48c8:	|  |  |                                                      movea.l 80(sp),a0
    48cc:	|  |  |                                                      move.l 36(a0),d0
    48d0:	|  |  |                                                      lsl.l #3,d0
    48d2:	|  |  |                                                      movea.l d1,a0
    48d4:	|  |  |                                                      adda.l d0,a0
    48d6:	|  |  |                                                      move.l 4(a0),68(sp)
		com = fun -> compiledLines[fun -> runThisLine].theCommand;
    48dc:	|  |  |                                                      movea.l 80(sp),a0
    48e0:	|  |  |                                                      move.l 4(a0),d1
    48e4:	|  |  |                                                      movea.l 80(sp),a0
    48e8:	|  |  |                                                      move.l 36(a0),d0
    48ec:	|  |  |                                                      lsl.l #3,d0
    48ee:	|  |  |                                                      movea.l d1,a0
    48f0:	|  |  |                                                      adda.l d0,a0
    48f2:	|  |  |                                                      move.l (a0),64(sp)

//		fprintf (stderr, "com: %d param: %d (%s)\n", com, param,
//				(com < numSludgeCommands) ? sludgeText[com] : ERROR_UNKNOWN_MCODE); fflush(stderr);


		switch (com) {
    48f6:	|  |  |                                                      moveq #41,d0
    48f8:	|  |  |                                                      cmp.l 64(sp),d0
    48fc:	|  |  |  /-------------------------------------------------- bcs.w 56e6 <continueFunction+0xe54>
    4900:	|  |  |  |                                                   move.l 64(sp),d0
    4904:	|  |  |  |                                                   add.l d0,d0
    4906:	|  |  |  |                                                   movea.l d0,a0
    4908:	|  |  |  |                                                   adda.l #18708,a0
    490e:	|  |  |  |                                                   move.w (a0),d0
    4910:	|  |  |  |                                                   jmp (4914 <continueFunction+0x82>,pc,d0.w)
    4914:	|  |  |  |                                                   bset d6,(a2)
    4916:	|  |  |  |                                                   ori.w #2670,(a4)
    491a:	|  |  |  |                                                   eori.w #2416,d6
    491e:	|  |  |  |                                                   bchg d4,d2
    4920:	|  |  |  |                                                   bclr d4,(a4)+
    4922:	|  |  |  |                                                   andi.l #181013194,d4
    4928:	|  |  |  |                                                   .short 0x0aca
    492a:	|  |  |  |                                                   .short 0x0aca
    492c:	|  |  |  |                                                   andi.l #51251914,(-54,a2,d0.l:2)
    4934:	|  |  |  |                                                   .short 0x0aca
    4936:	|  |  |  |                                                   andi.w #906,-(a4)
    493a:	|  |  |  |                                                   bchg d1,196(a2)
    493e:	|  |  |  |                                                   bset d1,580(a4)
    4942:	|  |  |  |                                                   bclr d1,2576(a2)
    4946:	|  |  |  |                                                   andi.b #-56,2762(a2)
    494c:	|  |  |  |                                                   .short 0x0aca
    494e:	|  |  |  |                                                   eori.l #63572682,d0
    4954:	|  |  |  |                                                   .short 0x0aca
    4956:	|  |  |  |                                                   bchg d3,-(a2)
    4958:	|  |  |  |                                                   bchg #-36,(a2)
    495c:	|  |  |  |                                                   .short 0x08cc
    495e:	|  |  |  |                                                   addi.b #14,1038(a0)
    4964:	|  |  |  |                                                   .short 0x040e
    4966:	|  |  |  |                                                   bset d4,8303(a4)
			case SLU_RETURN:
			if (fun -> calledBy) {
    496a:	|  |  |  |                                                   ori.w #8232,(a0)
    496e:	|  |  |  |                                                   ori.b #78,8303(a0)
				struct loadedFunction * returnTo = fun -> calledBy;
    4974:	|  |  |  |                                                   ori.w #12136,(a0)
    4978:	|  |  |  |                                                   ori.b #44,8303(a0)
				if (fun -> returnSomething) copyVariable (&fun -> reg, &returnTo -> reg);
    497e:	|  |  |  |                                                   ori.w #12328,(a0)
    4982:	|  |  |  |                                                   ori.b #24,(28,a0,d7.w:2)
    4988:	|  |  |  |                                                   add.l 44(sp),d1
    498c:	|  |  |  |                                                   moveq #28,d0
    498e:	|  |  |  |                                                   add.l 80(sp),d0
    4992:	|  |  |  |                                                   move.l d1,-(sp)
    4994:	|  |  |  |                                                   move.l d0,-(sp)
    4996:	|  |  |  |                                                   jsr 14cae <copyVariable>
    499c:	|  |  |  |                                                   addq.l #8,sp
				finishFunction (fun);
    499e:	|  |  |  |                                                   move.l 80(sp),-(sp)
    49a2:	|  |  |  |                                                   jsr 5742 <finishFunction>
    49a8:	|  |  |  |                                                   addq.l #4,sp
				fun = returnTo;
    49aa:	|  |  |  |                                                   move.l 44(sp),80(sp)
				restartFunction (fun);
    49b0:	|  |  |  |                                                   move.l 80(sp),-(sp)
    49b4:	|  |  |  |                                                   jsr 68aa <restartFunction>
    49ba:	|  |  |  |                                                   addq.l #4,sp
			} else {
				finishFunction (fun);
				advanceNow = FALSE;		// So we don't do anything else with "fun"
				keepLooping = FALSE;	// So we drop out of the loop
			}
			break;
    49bc:	|  |  |  |  /----------------------------------------------- bra.w 571a <continueFunction+0xe88>
				finishFunction (fun);
    49c0:	|  |  |  |  |                                                move.l 80(sp),-(sp)
    49c4:	|  |  |  |  |                                                jsr 5742 <finishFunction>
    49ca:	|  |  |  |  |                                                addq.l #4,sp
				advanceNow = FALSE;		// So we don't do anything else with "fun"
    49cc:	|  |  |  |  |                                                clr.w 72(sp)
				keepLooping = FALSE;	// So we drop out of the loop
    49d0:	|  |  |  |  |                                                clr.w 74(sp)
			break;
    49d4:	|  |  |  |  +----------------------------------------------- bra.w 571a <continueFunction+0xe88>

			case SLU_CALLIT:
			switch (fun -> reg.varType) {
    49d8:	|  |  |  |  |                                                movea.l 80(sp),a0
    49dc:	|  |  |  |  |                                                move.l 28(a0),d0
    49e0:	|  |  |  |  |                                                moveq #2,d1
    49e2:	|  |  |  |  |                                                cmp.l d0,d1
    49e4:	|  |  |  |  |                                            /-- beq.s 49f0 <continueFunction+0x15e>
    49e6:	|  |  |  |  |                                            |   moveq #4,d1
    49e8:	|  |  |  |  |                                            |   cmp.l d0,d1
    49ea:	|  |  |  |  |                                         /--|-- beq.s 4a3e <continueFunction+0x1ac>
    49ec:	|  |  |  |  |                                /--------|--|-- bra.w 4b26 <continueFunction+0x294>
				case SVT_FUNC:
				pauseFunction (fun);		
    49f0:	|  |  |  |  |                                |        |  \-> move.l 80(sp),-(sp)
    49f4:	|  |  |  |  |                                |        |      jsr 6868 <pauseFunction>
    49fa:	|  |  |  |  |                                |        |      addq.l #4,sp
				if (! startNewFunctionNum (fun -> reg.varData.intValue, param, fun, &fun -> stack,TRUE)) return FALSE;
    49fc:	|  |  |  |  |                                |        |      moveq #24,d0
    49fe:	|  |  |  |  |                                |        |      add.l 80(sp),d0
    4a02:	|  |  |  |  |                                |        |      movea.l 80(sp),a0
    4a06:	|  |  |  |  |                                |        |      move.l 32(a0),d1
    4a0a:	|  |  |  |  |                                |        |      pea 1 <_start+0x1>
    4a0e:	|  |  |  |  |                                |        |      move.l d0,-(sp)
    4a10:	|  |  |  |  |                                |        |      move.l 88(sp),-(sp)
    4a14:	|  |  |  |  |                                |        |      move.l 80(sp),-(sp)
    4a18:	|  |  |  |  |                                |        |      move.l d1,-(sp)
    4a1a:	|  |  |  |  |                                |        |      jsr 6af6 <startNewFunctionNum>
    4a20:	|  |  |  |  |                                |        |      lea 20(sp),sp
    4a24:	|  |  |  |  |                                |        |      tst.l d0
    4a26:	|  |  |  |  |                                |        |  /-- bne.s 4a2e <continueFunction+0x19c>
    4a28:	|  |  |  |  |                                |        |  |   clr.w d0
    4a2a:	|  +--|--|--|--------------------------------|--------|--|-- bra.w 573c <continueFunction+0xeaa>
				fun = allRunningFunctions;
    4a2e:	|  |  |  |  |                                |        |  \-> move.l 1c962 <allRunningFunctions>,80(sp)
				advanceNow = FALSE;		// So we don't do anything else with "fun"
    4a36:	|  |  |  |  |                                |        |      clr.w 72(sp)
				break;
    4a3a:	|  |  |  |  |                                |  /-----|----- bra.w 4b3a <continueFunction+0x2a8>

				case SVT_BUILT:
					{
					//KPrintF("Loading function %ld",fun -> reg.varData.intValue);
					enum builtReturn br = callBuiltIn (fun -> reg.varData.intValue, param, fun);
    4a3e:	|  |  |  |  |                                |  |     \----> move.l 68(sp),d1
    4a42:	|  |  |  |  |                                |  |            movea.l 80(sp),a0
    4a46:	|  |  |  |  |                                |  |            move.l 32(a0),d0
    4a4a:	|  |  |  |  |                                |  |            move.l 80(sp),-(sp)
    4a4e:	|  |  |  |  |                                |  |            move.l d1,-(sp)
    4a50:	|  |  |  |  |                                |  |            move.l d0,-(sp)
    4a52:	|  |  |  |  |                                |  |            jsr 134d6 <callBuiltIn>
    4a58:	|  |  |  |  |                                |  |            lea 12(sp),sp
    4a5c:	|  |  |  |  |                                |  |            move.l d0,52(sp)
    4a60:	|  |  |  |  |                                |  |            moveq #5,d0
    4a62:	|  |  |  |  |                                |  |            cmp.l 52(sp),d0
    4a66:	|  |  |  |  |                                |  |  /-------- bcs.w 4b22 <continueFunction+0x290>
    4a6a:	|  |  |  |  |                                |  |  |         move.l 52(sp),d0
    4a6e:	|  |  |  |  |                                |  |  |         add.l d0,d0
    4a70:	|  |  |  |  |                                |  |  |         movea.l d0,a0
    4a72:	|  |  |  |  |                                |  |  |         adda.l #19070,a0
    4a78:	|  |  |  |  |                                |  |  |         move.w (a0),d0
    4a7a:	|  |  |  |  |                                |  |  |         jmp (4a7e <continueFunction+0x1ec>,pc,d0.w)
    4a7e:	|  |  |  |  |                                |  |  |         ori.b #12,164(a4)
    4a84:	|  |  |  |  |                                |  |  |         ori.b #60,-(a0)
    4a88:	|  |  |  |  |                                |  |  |         ori.b #121,(1,a2,d0.w)

					switch (br) {
						case BR_ERROR:
							KPrintF("Unknown error. This shouldn't happen. Please notify the SLUDGE developers.");
    4a8e:	|  |  |  |  |                                |  |  |         .short 0x87bc
    4a90:	|  |  |  |  |                                |  |  |         jsr 17254 <KPrintF>
    4a96:	|  |  |  |  |                                |  |  |         addq.l #4,sp
							return FALSE;
    4a98:	|  |  |  |  |                                |  |  |         clr.w d0
    4a9a:	|  +--|--|--|--------------------------------|--|--|-------- bra.w 573c <continueFunction+0xeaa>

						case BR_PAUSE:
						pauseFunction (fun);
    4a9e:	|  |  |  |  |                                |  |  |         move.l 80(sp),-(sp)
    4aa2:	|  |  |  |  |                                |  |  |         jsr 6868 <pauseFunction>
    4aa8:	|  |  |  |  |                                |  |  |         addq.l #4,sp
						[[fallthrough]];
						// No break!

						case BR_KEEP_AND_PAUSE:
						keepLooping = FALSE;
    4aaa:	|  |  |  |  |                                |  |  |         clr.w 74(sp)
						break;
    4aae:	|  |  |  |  |                                |  |  |  /----- bra.s 4b24 <continueFunction+0x292>

						case BR_ALREADY_GONE:
						keepLooping = FALSE;
    4ab0:	|  |  |  |  |                                |  |  |  |      clr.w 74(sp)
						advanceNow = FALSE;
    4ab4:	|  |  |  |  |                                |  |  |  |      clr.w 72(sp)
						break;
    4ab8:	|  |  |  |  |                                |  |  |  +----- bra.s 4b24 <continueFunction+0x292>

						case BR_CALLAFUNC:
						{
							int i = fun -> reg.varData.intValue;
    4aba:	|  |  |  |  |                                |  |  |  |      movea.l 80(sp),a0
    4abe:	|  |  |  |  |                                |  |  |  |      move.l 32(a0),48(sp)
							setVariable (&fun -> reg, SVT_INT, 1);
    4ac4:	|  |  |  |  |                                |  |  |  |      moveq #28,d0
    4ac6:	|  |  |  |  |                                |  |  |  |      add.l 80(sp),d0
    4aca:	|  |  |  |  |                                |  |  |  |      pea 1 <_start+0x1>
    4ace:	|  |  |  |  |                                |  |  |  |      pea 1 <_start+0x1>
    4ad2:	|  |  |  |  |                                |  |  |  |      move.l d0,-(sp)
    4ad4:	|  |  |  |  |                                |  |  |  |      jsr 150e6 <setVariable>
    4ada:	|  |  |  |  |                                |  |  |  |      lea 12(sp),sp
							pauseFunction (fun);							
    4ade:	|  |  |  |  |                                |  |  |  |      move.l 80(sp),-(sp)
    4ae2:	|  |  |  |  |                                |  |  |  |      jsr 6868 <pauseFunction>
    4ae8:	|  |  |  |  |                                |  |  |  |      addq.l #4,sp
							if (! startNewFunctionNum (i, 0, fun, noStack, FALSE)) return FALSE;
    4aea:	|  |  |  |  |                                |  |  |  |      move.l 1c99a <noStack>,d1
    4af0:	|  |  |  |  |                                |  |  |  |      move.l 48(sp),d0
    4af4:	|  |  |  |  |                                |  |  |  |      clr.l -(sp)
    4af6:	|  |  |  |  |                                |  |  |  |      move.l d1,-(sp)
    4af8:	|  |  |  |  |                                |  |  |  |      move.l 88(sp),-(sp)
    4afc:	|  |  |  |  |                                |  |  |  |      clr.l -(sp)
    4afe:	|  |  |  |  |                                |  |  |  |      move.l d0,-(sp)
    4b00:	|  |  |  |  |                                |  |  |  |      jsr 6af6 <startNewFunctionNum>
    4b06:	|  |  |  |  |                                |  |  |  |      lea 20(sp),sp
    4b0a:	|  |  |  |  |                                |  |  |  |      tst.l d0
    4b0c:	|  |  |  |  |                                |  |  |  |  /-- bne.s 4b14 <continueFunction+0x282>
    4b0e:	|  |  |  |  |                                |  |  |  |  |   clr.w d0
    4b10:	|  +--|--|--|--------------------------------|--|--|--|--|-- bra.w 573c <continueFunction+0xeaa>
							fun = allRunningFunctions;
    4b14:	|  |  |  |  |                                |  |  |  |  \-> move.l 1c962 <allRunningFunctions>,80(sp)
							advanceNow = FALSE;		// So we don't do anything else with "fun"
    4b1c:	|  |  |  |  |                                |  |  |  |      clr.w 72(sp)
						}
						break;
    4b20:	|  |  |  |  |                                |  |  |  +----- bra.s 4b24 <continueFunction+0x292>

						default:
						break;
    4b22:	|  |  |  |  |                                |  |  \--|----> nop
					}
				}
				break;
    4b24:	|  |  |  |  |                                |  +-----\----X bra.s 4b3a <continueFunction+0x2a8>

				default:
				KPrintF(ERROR_CALL_NONFUNCTION);
    4b26:	|  |  |  |  |                                \--|----------> pea 18807 <PutChar+0xae9>
    4b2c:	|  |  |  |  |                                   |            jsr 17254 <KPrintF>
    4b32:	|  |  |  |  |                                   |            addq.l #4,sp
				return FALSE;
    4b34:	|  |  |  |  |                                   |            clr.w d0
    4b36:	|  +--|--|--|-----------------------------------|----------- bra.w 573c <continueFunction+0xeaa>
			}
			break;
    4b3a:	|  |  |  |  +-----------------------------------\----------X bra.w 571a <continueFunction+0xe88>

			// These all grab things and shove 'em into the register

			case SLU_LOAD_NULL:
			setVariable (&fun -> reg, SVT_NULL, 0);
    4b3e:	|  |  |  |  |                                                moveq #28,d0
    4b40:	|  |  |  |  |                                                add.l 80(sp),d0
    4b44:	|  |  |  |  |                                                clr.l -(sp)
    4b46:	|  |  |  |  |                                                clr.l -(sp)
    4b48:	|  |  |  |  |                                                move.l d0,-(sp)
    4b4a:	|  |  |  |  |                                                jsr 150e6 <setVariable>
    4b50:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    4b54:	|  |  |  |  +----------------------------------------------- bra.w 571a <continueFunction+0xe88>

			case SLU_LOAD_FILE:
			setVariable (&fun -> reg, SVT_FILE, param);
    4b58:	|  |  |  |  |                                                move.l 68(sp),d1
    4b5c:	|  |  |  |  |                                                moveq #28,d0
    4b5e:	|  |  |  |  |                                                add.l 80(sp),d0
    4b62:	|  |  |  |  |                                                move.l d1,-(sp)
    4b64:	|  |  |  |  |                                                pea 5 <_start+0x5>
    4b68:	|  |  |  |  |                                                move.l d0,-(sp)
    4b6a:	|  |  |  |  |                                                jsr 150e6 <setVariable>
    4b70:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    4b74:	|  |  |  |  +----------------------------------------------- bra.w 571a <continueFunction+0xe88>

			case SLU_LOAD_VALUE:
			setVariable (&fun -> reg, SVT_INT, param);
    4b78:	|  |  |  |  |                                                move.l 68(sp),d1
    4b7c:	|  |  |  |  |                                                moveq #28,d0
    4b7e:	|  |  |  |  |                                                add.l 80(sp),d0
    4b82:	|  |  |  |  |                                                move.l d1,-(sp)
    4b84:	|  |  |  |  |                                                pea 1 <_start+0x1>
    4b88:	|  |  |  |  |                                                move.l d0,-(sp)
    4b8a:	|  |  |  |  |                                                jsr 150e6 <setVariable>
    4b90:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    4b94:	|  |  |  |  +----------------------------------------------- bra.w 571a <continueFunction+0xe88>

			case SLU_LOAD_LOCAL:
			if (! copyVariable (&(fun -> localVars[param]), &fun -> reg)) return FALSE;
    4b98:	|  |  |  |  |                                                moveq #28,d0
    4b9a:	|  |  |  |  |                                                add.l 80(sp),d0
    4b9e:	|  |  |  |  |                                                movea.l 80(sp),a0
    4ba2:	|  |  |  |  |                                                movea.l 20(a0),a0
    4ba6:	|  |  |  |  |                                                move.l 68(sp),d1
    4baa:	|  |  |  |  |                                                lsl.l #3,d1
    4bac:	|  |  |  |  |                                                add.l a0,d1
    4bae:	|  |  |  |  |                                                move.l d0,-(sp)
    4bb0:	|  |  |  |  |                                                move.l d1,-(sp)
    4bb2:	|  |  |  |  |                                                jsr 14cae <copyVariable>
    4bb8:	|  |  |  |  |                                                addq.l #8,sp
    4bba:	|  |  |  |  |                                                tst.w d0
    4bbc:	|  |  |  |  |  /-------------------------------------------- bne.w 56f8 <continueFunction+0xe66>
    4bc0:	|  |  |  |  |  |                                             clr.w d0
    4bc2:	|  +--|--|--|--|-------------------------------------------- bra.w 573c <continueFunction+0xeaa>
			break;

			case SLU_AND:
			setVariable (&fun -> reg, SVT_INT, getBoolean (&fun -> reg) && getBoolean(&(fun -> stack -> thisVar)));
    4bc6:	|  |  |  |  |  |                                             moveq #28,d0
    4bc8:	|  |  |  |  |  |                                             add.l 80(sp),d0
    4bcc:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4bce:	|  |  |  |  |  |                                             jsr 14d34 <getBoolean>
    4bd4:	|  |  |  |  |  |                                             addq.l #4,sp
    4bd6:	|  |  |  |  |  |                                             tst.w d0
    4bd8:	|  |  |  |  |  |                                      /----- beq.s 4bf4 <continueFunction+0x362>
    4bda:	|  |  |  |  |  |                                      |      movea.l 80(sp),a0
    4bde:	|  |  |  |  |  |                                      |      move.l 24(a0),d0
    4be2:	|  |  |  |  |  |                                      |      move.l d0,-(sp)
    4be4:	|  |  |  |  |  |                                      |      jsr 14d34 <getBoolean>
    4bea:	|  |  |  |  |  |                                      |      addq.l #4,sp
    4bec:	|  |  |  |  |  |                                      |      tst.w d0
    4bee:	|  |  |  |  |  |                                      +----- beq.s 4bf4 <continueFunction+0x362>
    4bf0:	|  |  |  |  |  |                                      |      moveq #1,d0
    4bf2:	|  |  |  |  |  |                                      |  /-- bra.s 4bf6 <continueFunction+0x364>
    4bf4:	|  |  |  |  |  |                                      \--|-> moveq #0,d0
    4bf6:	|  |  |  |  |  |                                         \-> moveq #28,d1
    4bf8:	|  |  |  |  |  |                                             add.l 80(sp),d1
    4bfc:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4bfe:	|  |  |  |  |  |                                             pea 1 <_start+0x1>
    4c02:	|  |  |  |  |  |                                             move.l d1,-(sp)
    4c04:	|  |  |  |  |  |                                             jsr 150e6 <setVariable>
    4c0a:	|  |  |  |  |  |                                             lea 12(sp),sp
			trimStack (&fun -> stack);
    4c0e:	|  |  |  |  |  |                                             moveq #24,d0
    4c10:	|  |  |  |  |  |                                             add.l 80(sp),d0
    4c14:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4c16:	|  |  |  |  |  |                                             jsr 15178 <trimStack>
    4c1c:	|  |  |  |  |  |                                             addq.l #4,sp
			break;
    4c1e:	|  |  |  |  +--|-------------------------------------------- bra.w 571a <continueFunction+0xe88>

			case SLU_OR:
			setVariable (&fun -> reg, SVT_INT, getBoolean (&fun -> reg) || getBoolean (&(fun -> stack -> thisVar)));
    4c22:	|  |  |  |  |  |                                             moveq #28,d0
    4c24:	|  |  |  |  |  |                                             add.l 80(sp),d0
    4c28:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4c2a:	|  |  |  |  |  |                                             jsr 14d34 <getBoolean>
    4c30:	|  |  |  |  |  |                                             addq.l #4,sp
    4c32:	|  |  |  |  |  |                                             tst.w d0
    4c34:	|  |  |  |  |  |                                         /-- bne.s 4c4c <continueFunction+0x3ba>
    4c36:	|  |  |  |  |  |                                         |   movea.l 80(sp),a0
    4c3a:	|  |  |  |  |  |                                         |   move.l 24(a0),d0
    4c3e:	|  |  |  |  |  |                                         |   move.l d0,-(sp)
    4c40:	|  |  |  |  |  |                                         |   jsr 14d34 <getBoolean>
    4c46:	|  |  |  |  |  |                                         |   addq.l #4,sp
    4c48:	|  |  |  |  |  |                                         |   tst.w d0
    4c4a:	|  |  |  |  |  |                                      /--|-- beq.s 4c50 <continueFunction+0x3be>
    4c4c:	|  |  |  |  |  |                                      |  \-> moveq #1,d0
    4c4e:	|  |  |  |  |  |                                      |  /-- bra.s 4c52 <continueFunction+0x3c0>
    4c50:	|  |  |  |  |  |                                      \--|-> moveq #0,d0
    4c52:	|  |  |  |  |  |                                         \-> moveq #28,d1
    4c54:	|  |  |  |  |  |                                             add.l 80(sp),d1
    4c58:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4c5a:	|  |  |  |  |  |                                             pea 1 <_start+0x1>
    4c5e:	|  |  |  |  |  |                                             move.l d1,-(sp)
    4c60:	|  |  |  |  |  |                                             jsr 150e6 <setVariable>
    4c66:	|  |  |  |  |  |                                             lea 12(sp),sp
			trimStack (&fun -> stack);
    4c6a:	|  |  |  |  |  |                                             moveq #24,d0
    4c6c:	|  |  |  |  |  |                                             add.l 80(sp),d0
    4c70:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4c72:	|  |  |  |  |  |                                             jsr 15178 <trimStack>
    4c78:	|  |  |  |  |  |                                             addq.l #4,sp
			break;
    4c7a:	|  |  |  |  +--|-------------------------------------------- bra.w 571a <continueFunction+0xe88>

			case SLU_LOAD_FUNC:
    		setVariable (&fun -> reg, SVT_FUNC, param);
    4c7e:	|  |  |  |  |  |                                             move.l 68(sp),d1
    4c82:	|  |  |  |  |  |                                             moveq #28,d0
    4c84:	|  |  |  |  |  |                                             add.l 80(sp),d0
    4c88:	|  |  |  |  |  |                                             move.l d1,-(sp)
    4c8a:	|  |  |  |  |  |                                             pea 2 <_start+0x2>
    4c8e:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4c90:	|  |  |  |  |  |                                             jsr 150e6 <setVariable>
    4c96:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    4c9a:	|  |  |  |  +--|-------------------------------------------- bra.w 571a <continueFunction+0xe88>

			case SLU_LOAD_BUILT:
			setVariable (&fun -> reg, SVT_BUILT, param);
    4c9e:	|  |  |  |  |  |                                             move.l 68(sp),d1
    4ca2:	|  |  |  |  |  |                                             moveq #28,d0
    4ca4:	|  |  |  |  |  |                                             add.l 80(sp),d0
    4ca8:	|  |  |  |  |  |                                             move.l d1,-(sp)
    4caa:	|  |  |  |  |  |                                             pea 4 <_start+0x4>
    4cae:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4cb0:	|  |  |  |  |  |                                             jsr 150e6 <setVariable>
    4cb6:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    4cba:	|  |  |  |  +--|-------------------------------------------- bra.w 571a <continueFunction+0xe88>

			case SLU_LOAD_OBJTYPE:
			setVariable (&fun -> reg, SVT_OBJTYPE, param);
    4cbe:	|  |  |  |  |  |                                             move.l 68(sp),d1
    4cc2:	|  |  |  |  |  |                                             moveq #28,d0
    4cc4:	|  |  |  |  |  |                                             add.l 80(sp),d0
    4cc8:	|  |  |  |  |  |                                             move.l d1,-(sp)
    4cca:	|  |  |  |  |  |                                             pea 7 <_start+0x7>
    4cce:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4cd0:	|  |  |  |  |  |                                             jsr 150e6 <setVariable>
    4cd6:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    4cda:	|  |  |  |  +--|-------------------------------------------- bra.w 571a <continueFunction+0xe88>

			case SLU_UNREG:
			if (dialogValue != 1) {
    4cde:	|  |  |  |  |  |                                             move.l 1c92a <dialogValue>,d0
    4ce4:	|  |  |  |  |  |                                             moveq #1,d1
    4ce6:	|  |  |  |  |  |                                             cmp.l d0,d1
    4ce8:	|  |  |  |  |  |  /----------------------------------------- beq.w 56fc <continueFunction+0xe6a>
				KPrintF(ERROR_HACKER);
    4cec:	|  |  |  |  |  |  |                                          pea 1881c <PutChar+0xafe>
    4cf2:	|  |  |  |  |  |  |                                          jsr 17254 <KPrintF>
    4cf8:	|  |  |  |  |  |  |                                          addq.l #4,sp
				return FALSE;
    4cfa:	|  |  |  |  |  |  |                                          clr.w d0
    4cfc:	|  +--|--|--|--|--|----------------------------------------- bra.w 573c <continueFunction+0xeaa>
			}
			break;

			case SLU_LOAD_STRING:
				if (! loadStringToVar (&fun -> reg, param)) {
    4d00:	|  |  |  |  |  |  |                                          move.l 68(sp),d1
    4d04:	|  |  |  |  |  |  |                                          moveq #28,d0
    4d06:	|  |  |  |  |  |  |                                          add.l 80(sp),d0
    4d0a:	|  |  |  |  |  |  |                                          move.l d1,-(sp)
    4d0c:	|  |  |  |  |  |  |                                          move.l d0,-(sp)
    4d0e:	|  |  |  |  |  |  |                                          jsr 14878 <loadStringToVar>
    4d14:	|  |  |  |  |  |  |                                          addq.l #8,sp
    4d16:	|  |  |  |  |  |  |                                          tst.w d0
    4d18:	|  |  |  |  |  |  |  /-------------------------------------- bne.w 5700 <continueFunction+0xe6e>
					return FALSE;
    4d1c:	|  |  |  |  |  |  |  |                                       clr.w d0
    4d1e:	|  +--|--|--|--|--|--|-------------------------------------- bra.w 573c <continueFunction+0xeaa>
			break;

			case SLU_INDEXGET:
			case SLU_INCREMENT_INDEX:
			case SLU_DECREMENT_INDEX:
			switch (fun -> stack -> thisVar.varType) {
    4d22:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    4d26:	|  |  |  |  |  |  |  |                                       movea.l 24(a0),a0
    4d2a:	|  |  |  |  |  |  |  |                                       move.l (a0),d0
    4d2c:	|  |  |  |  |  |  |  |                                       moveq #10,d1
    4d2e:	|  |  |  |  |  |  |  |                                       cmp.l d0,d1
    4d30:	|  |  |  |  |  |  |  |                                /----- beq.s 4d8e <continueFunction+0x4fc>
    4d32:	|  |  |  |  |  |  |  |                                |      moveq #10,d1
    4d34:	|  |  |  |  |  |  |  |                                |      cmp.l d0,d1
    4d36:	|  |  |  |  |  |  |  |              /-----------------|----- bcs.w 4f22 <continueFunction+0x690>
    4d3a:	|  |  |  |  |  |  |  |              |                 |      tst.l d0
    4d3c:	|  |  |  |  |  |  |  |              |                 |  /-- beq.s 4d48 <continueFunction+0x4b6>
    4d3e:	|  |  |  |  |  |  |  |              |                 |  |   moveq #6,d1
    4d40:	|  |  |  |  |  |  |  |              |                 |  |   cmp.l d0,d1
    4d42:	|  |  |  |  |  |  |  |              |                 +--|-- beq.s 4d8e <continueFunction+0x4fc>
    4d44:	|  |  |  |  |  |  |  |              +-----------------|--|-- bra.w 4f22 <continueFunction+0x690>
				case SVT_NULL:
				if (com == SLU_INDEXGET) {
    4d48:	|  |  |  |  |  |  |  |              |                 |  \-> moveq #38,d0
    4d4a:	|  |  |  |  |  |  |  |              |                 |      cmp.l 64(sp),d0
    4d4e:	|  |  |  |  |  |  |  |              |                 |  /-- bne.s 4d7a <continueFunction+0x4e8>
					setVariable (&fun -> reg, SVT_NULL, 0);
    4d50:	|  |  |  |  |  |  |  |              |                 |  |   moveq #28,d0
    4d52:	|  |  |  |  |  |  |  |              |                 |  |   add.l 80(sp),d0
    4d56:	|  |  |  |  |  |  |  |              |                 |  |   clr.l -(sp)
    4d58:	|  |  |  |  |  |  |  |              |                 |  |   clr.l -(sp)
    4d5a:	|  |  |  |  |  |  |  |              |                 |  |   move.l d0,-(sp)
    4d5c:	|  |  |  |  |  |  |  |              |                 |  |   jsr 150e6 <setVariable>
    4d62:	|  |  |  |  |  |  |  |              |                 |  |   lea 12(sp),sp
					trimStack (&fun -> stack);
    4d66:	|  |  |  |  |  |  |  |              |                 |  |   moveq #24,d0
    4d68:	|  |  |  |  |  |  |  |              |                 |  |   add.l 80(sp),d0
    4d6c:	|  |  |  |  |  |  |  |              |                 |  |   move.l d0,-(sp)
    4d6e:	|  |  |  |  |  |  |  |              |                 |  |   jsr 15178 <trimStack>
    4d74:	|  |  |  |  |  |  |  |              |                 |  |   addq.l #4,sp
				} else {
					KPrintF((ERROR_INCDEC_UNKNOWN));
					return FALSE;
				}
				break;
    4d76:	|  |  |  |  |  |  |  |              |  /--------------|--|-- bra.w 4f38 <continueFunction+0x6a6>
					KPrintF((ERROR_INCDEC_UNKNOWN));
    4d7a:	|  |  |  |  |  |  |  |              |  |              |  \-> pea 1885d <PutChar+0xb3f>
    4d80:	|  |  |  |  |  |  |  |              |  |              |      jsr 17254 <KPrintF>
    4d86:	|  |  |  |  |  |  |  |              |  |              |      addq.l #4,sp
					return FALSE;
    4d88:	|  |  |  |  |  |  |  |              |  |              |      clr.w d0
    4d8a:	|  +--|--|--|--|--|--|--------------|--|--------------|----- bra.w 573c <continueFunction+0xeaa>

				case SVT_FASTARRAY:
				case SVT_STACK:
				if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    4d8e:	|  |  |  |  |  |  |  |              |  |              \----> movea.l 80(sp),a0
    4d92:	|  |  |  |  |  |  |  |              |  |                     movea.l 24(a0),a0
    4d96:	|  |  |  |  |  |  |  |              |  |                     movea.l 4(a0),a0
    4d9a:	|  |  |  |  |  |  |  |              |  |                     move.l (a0),d0
    4d9c:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 4db2 <continueFunction+0x520>
					KPrintF((ERROR_INDEX_EMPTY));
    4d9e:	|  |  |  |  |  |  |  |              |  |                 |   pea 18899 <PutChar+0xb7b>
    4da4:	|  |  |  |  |  |  |  |              |  |                 |   jsr 17254 <KPrintF>
    4daa:	|  |  |  |  |  |  |  |              |  |                 |   addq.l #4,sp
					return FALSE;
    4dac:	|  |  |  |  |  |  |  |              |  |                 |   clr.w d0
    4dae:	|  +--|--|--|--|--|--|--------------|--|-----------------|-- bra.w 573c <continueFunction+0xeaa>
				} else {
					int ii;
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    4db2:	|  |  |  |  |  |  |  |              |  |                 \-> moveq #28,d0
    4db4:	|  |  |  |  |  |  |  |              |  |                     add.l 80(sp),d0
    4db8:	|  |  |  |  |  |  |  |              |  |                     move.l d0,-(sp)
    4dba:	|  |  |  |  |  |  |  |              |  |                     pea 1 <_start+0x1>
    4dbe:	|  |  |  |  |  |  |  |              |  |                     lea 12(sp),a0
    4dc2:	|  |  |  |  |  |  |  |              |  |                     move.l a0,-(sp)
    4dc4:	|  |  |  |  |  |  |  |              |  |                     jsr 147f4 <getValueType>
    4dca:	|  |  |  |  |  |  |  |              |  |                     lea 12(sp),sp
    4dce:	|  |  |  |  |  |  |  |              |  |                     tst.w d0
    4dd0:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 4dd8 <continueFunction+0x546>
    4dd2:	|  |  |  |  |  |  |  |              |  |                 |   clr.w d0
    4dd4:	|  +--|--|--|--|--|--|--------------|--|-----------------|-- bra.w 573c <continueFunction+0xeaa>
					struct variable * grab = (fun -> stack -> thisVar.varType == SVT_FASTARRAY) ?
    4dd8:	|  |  |  |  |  |  |  |              |  |                 \-> movea.l 80(sp),a0
    4ddc:	|  |  |  |  |  |  |  |              |  |                     movea.l 24(a0),a0
    4de0:	|  |  |  |  |  |  |  |              |  |                     move.l (a0),d0
						fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii)
							:
    4de2:	|  |  |  |  |  |  |  |              |  |                     moveq #10,d1
    4de4:	|  |  |  |  |  |  |  |              |  |                     cmp.l d0,d1
    4de6:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 4e08 <continueFunction+0x576>
						fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii)
    4de8:	|  |  |  |  |  |  |  |              |  |                 |   move.l 4(sp),d0
    4dec:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,d1
    4dee:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 80(sp),a0
    4df2:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 24(a0),a0
    4df6:	|  |  |  |  |  |  |  |              |  |                 |   move.l 4(a0),d0
    4dfa:	|  |  |  |  |  |  |  |              |  |                 |   move.l d1,-(sp)
    4dfc:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,-(sp)
    4dfe:	|  |  |  |  |  |  |  |              |  |                 |   jsr 1447e <fastArrayGetByIndex>
    4e04:	|  |  |  |  |  |  |  |              |  |                 |   addq.l #8,sp
    4e06:	|  |  |  |  |  |  |  |              |  |              /--|-- bra.s 4e28 <continueFunction+0x596>
						stackGetByIndex (fun -> stack -> thisVar.varData.theStack -> first, ii);
    4e08:	|  |  |  |  |  |  |  |              |  |              |  \-> move.l 4(sp),d0
    4e0c:	|  |  |  |  |  |  |  |              |  |              |      move.l d0,d1
    4e0e:	|  |  |  |  |  |  |  |              |  |              |      movea.l 80(sp),a0
    4e12:	|  |  |  |  |  |  |  |              |  |              |      movea.l 24(a0),a0
    4e16:	|  |  |  |  |  |  |  |              |  |              |      movea.l 4(a0),a0
    4e1a:	|  |  |  |  |  |  |  |              |  |              |      move.l (a0),d0
    4e1c:	|  |  |  |  |  |  |  |              |  |              |      move.l d1,-(sp)
    4e1e:	|  |  |  |  |  |  |  |              |  |              |      move.l d0,-(sp)
    4e20:	|  |  |  |  |  |  |  |              |  |              |      jsr 15108 <stackGetByIndex>
    4e26:	|  |  |  |  |  |  |  |              |  |              |      addq.l #8,sp
					struct variable * grab = (fun -> stack -> thisVar.varType == SVT_FASTARRAY) ?
    4e28:	|  |  |  |  |  |  |  |              |  |              \----> move.l d0,60(sp)

					trimStack (&fun -> stack);
    4e2c:	|  |  |  |  |  |  |  |              |  |                     moveq #24,d0
    4e2e:	|  |  |  |  |  |  |  |              |  |                     add.l 80(sp),d0
    4e32:	|  |  |  |  |  |  |  |              |  |                     move.l d0,-(sp)
    4e34:	|  |  |  |  |  |  |  |              |  |                     jsr 15178 <trimStack>
    4e3a:	|  |  |  |  |  |  |  |              |  |                     addq.l #4,sp

					if (! grab) {
    4e3c:	|  |  |  |  |  |  |  |              |  |                     tst.l 60(sp)
    4e40:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 4e5c <continueFunction+0x5ca>
						setVariable (&fun -> reg, SVT_NULL, 0);
    4e42:	|  |  |  |  |  |  |  |              |  |                 |   moveq #28,d0
    4e44:	|  |  |  |  |  |  |  |              |  |                 |   add.l 80(sp),d0
    4e48:	|  |  |  |  |  |  |  |              |  |                 |   clr.l -(sp)
    4e4a:	|  |  |  |  |  |  |  |              |  |                 |   clr.l -(sp)
    4e4c:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,-(sp)
    4e4e:	|  |  |  |  |  |  |  |              |  |                 |   jsr 150e6 <setVariable>
    4e54:	|  |  |  |  |  |  |  |              |  |                 |   lea 12(sp),sp
							default:
							if (! copyVariable (grab, &fun -> reg)) return FALSE;
						}
					}
				}
				break;
    4e58:	|  |  |  |  |  |  |  |              |  |  /--------------|-- bra.w 4f36 <continueFunction+0x6a4>
    4e5c:	|  |  |  |  |  |  |  |              |  |  |              \-> moveq #39,d0
    4e5e:	|  |  |  |  |  |  |  |              |  |  |                  cmp.l 64(sp),d0
    4e62:	|  |  |  |  |  |  |  |              |  |  |              /-- beq.s 4e70 <continueFunction+0x5de>
    4e64:	|  |  |  |  |  |  |  |              |  |  |              |   moveq #40,d1
    4e66:	|  |  |  |  |  |  |  |              |  |  |              |   cmp.l 64(sp),d1
    4e6a:	|  |  |  |  |  |  |  |              |  |  |           /--|-- beq.s 4eba <continueFunction+0x628>
    4e6c:	|  |  |  |  |  |  |  |              |  |  |  /--------|--|-- bra.w 4f02 <continueFunction+0x670>
							if (! getValueType (&ii, SVT_INT, grab)) return FALSE;
    4e70:	|  |  |  |  |  |  |  |              |  |  |  |        |  \-> move.l 60(sp),-(sp)
    4e74:	|  |  |  |  |  |  |  |              |  |  |  |        |      pea 1 <_start+0x1>
    4e78:	|  |  |  |  |  |  |  |              |  |  |  |        |      lea 8(sp),a0
    4e7c:	|  |  |  |  |  |  |  |              |  |  |  |        |      move.l a0,-(sp)
    4e7e:	|  |  |  |  |  |  |  |              |  |  |  |        |      jsr 147f4 <getValueType>
    4e84:	|  |  |  |  |  |  |  |              |  |  |  |        |      lea 12(sp),sp
    4e88:	|  |  |  |  |  |  |  |              |  |  |  |        |      tst.w d0
    4e8a:	|  |  |  |  |  |  |  |              |  |  |  |        |  /-- bne.s 4e92 <continueFunction+0x600>
    4e8c:	|  |  |  |  |  |  |  |              |  |  |  |        |  |   clr.w d0
    4e8e:	|  |  |  |  |  |  |  |              |  |  |  |  /-----|--|-- bra.w 4f1c <continueFunction+0x68a>
							setVariable (&fun -> reg, SVT_INT, ii);
    4e92:	|  |  |  |  |  |  |  |              |  |  |  |  |     |  \-> move.l (sp),d1
    4e94:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      moveq #28,d0
    4e96:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      add.l 80(sp),d0
    4e9a:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d1,-(sp)
    4e9c:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      pea 1 <_start+0x1>
    4ea0:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d0,-(sp)
    4ea2:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      jsr 150e6 <setVariable>
    4ea8:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      lea 12(sp),sp
							grab -> varData.intValue = ii + 1;
    4eac:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l (sp),d0
    4eae:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      addq.l #1,d0
    4eb0:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      movea.l 60(sp),a0
    4eb4:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d0,4(a0)
							break;
    4eb8:	|  |  |  |  |  |  |  |              |  |  |  |  |  /--|----- bra.s 4f20 <continueFunction+0x68e>
							if (! getValueType (&ii, SVT_INT, grab)) return FALSE;
    4eba:	|  |  |  |  |  |  |  |              |  |  |  |  |  |  \----> move.l 60(sp),-(sp)
    4ebe:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         pea 1 <_start+0x1>
    4ec2:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 8(sp),a0
    4ec6:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l a0,-(sp)
    4ec8:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         jsr 147f4 <getValueType>
    4ece:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 12(sp),sp
    4ed2:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         tst.w d0
    4ed4:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     /-- bne.s 4eda <continueFunction+0x648>
    4ed6:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     |   clr.w d0
    4ed8:	|  |  |  |  |  |  |  |              |  |  |  |  +--|-----|-- bra.s 4f1c <continueFunction+0x68a>
							setVariable (&fun -> reg, SVT_INT, ii);
    4eda:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     \-> move.l (sp),d1
    4edc:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         moveq #28,d0
    4ede:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         add.l 80(sp),d0
    4ee2:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d1,-(sp)
    4ee4:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         pea 1 <_start+0x1>
    4ee8:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d0,-(sp)
    4eea:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         jsr 150e6 <setVariable>
    4ef0:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 12(sp),sp
							grab -> varData.intValue = ii - 1;
    4ef4:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l (sp),d0
    4ef6:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         subq.l #1,d0
    4ef8:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         movea.l 60(sp),a0
    4efc:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d0,4(a0)
							break;
    4f00:	|  |  |  |  |  |  |  |              |  |  |  |  |  +-------- bra.s 4f20 <continueFunction+0x68e>
							if (! copyVariable (grab, &fun -> reg)) return FALSE;
    4f02:	|  |  |  |  |  |  |  |              |  |  |  \--|--|-------> moveq #28,d0
    4f04:	|  |  |  |  |  |  |  |              |  |  |     |  |         add.l 80(sp),d0
    4f08:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l d0,-(sp)
    4f0a:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l 64(sp),-(sp)
    4f0e:	|  |  |  |  |  |  |  |              |  |  |     |  |         jsr 14cae <copyVariable>
    4f14:	|  |  |  |  |  |  |  |              |  |  |     |  |         addq.l #8,sp
    4f16:	|  |  |  |  |  |  |  |              |  |  |     |  |         tst.w d0
    4f18:	|  |  |  |  |  |  |  |              |  |  +-----|--|-------- bne.s 4f36 <continueFunction+0x6a4>
    4f1a:	|  |  |  |  |  |  |  |              |  |  |     |  |         clr.w d0
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    4f1c:	|  +--|--|--|--|--|--|--------------|--|--|-----\--|-------X bra.w 573c <continueFunction+0xeaa>
				break;
    4f20:	|  |  |  |  |  |  |  |              |  |  +--------\-------X bra.s 4f36 <continueFunction+0x6a4>

				default:
				KPrintF((ERROR_INDEX_NONSTACK));
    4f22:	|  |  |  |  |  |  |  |              \--|--|----------------> pea 188b7 <PutChar+0xb99>
    4f28:	|  |  |  |  |  |  |  |                 |  |                  jsr 17254 <KPrintF>
    4f2e:	|  |  |  |  |  |  |  |                 |  |                  addq.l #4,sp
				return FALSE;
    4f30:	|  |  |  |  |  |  |  |                 |  |                  clr.w d0
    4f32:	|  +--|--|--|--|--|--|-----------------|--|----------------- bra.w 573c <continueFunction+0xeaa>
				break;
    4f36:	|  |  |  |  |  |  |  |                 |  \----------------> nop
			}
			break;
    4f38:	|  |  |  |  +--|--|--|-----------------\-------------------X bra.w 571a <continueFunction+0xe88>

			case SLU_INDEXSET:
			switch (fun -> stack -> thisVar.varType) {
    4f3c:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    4f40:	|  |  |  |  |  |  |  |                                       movea.l 24(a0),a0
    4f44:	|  |  |  |  |  |  |  |                                       move.l (a0),d0
    4f46:	|  |  |  |  |  |  |  |                                       moveq #6,d1
    4f48:	|  |  |  |  |  |  |  |                                       cmp.l d0,d1
    4f4a:	|  |  |  |  |  |  |  |                                   /-- beq.s 4f58 <continueFunction+0x6c6>
    4f4c:	|  |  |  |  |  |  |  |                                   |   moveq #10,d1
    4f4e:	|  |  |  |  |  |  |  |                                   |   cmp.l d0,d1
    4f50:	|  |  |  |  |  |  |  |                                /--|-- beq.w 5004 <continueFunction+0x772>
    4f54:	|  |  |  |  |  |  |  |                             /--|--|-- bra.w 5062 <continueFunction+0x7d0>
				case SVT_STACK:
				if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    4f58:	|  |  |  |  |  |  |  |                             |  |  \-> movea.l 80(sp),a0
    4f5c:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    4f60:	|  |  |  |  |  |  |  |                             |  |      movea.l 4(a0),a0
    4f64:	|  |  |  |  |  |  |  |                             |  |      move.l (a0),d0
    4f66:	|  |  |  |  |  |  |  |                             |  |  /-- bne.s 4f7c <continueFunction+0x6ea>
					KPrintF((ERROR_INDEX_EMPTY));
    4f68:	|  |  |  |  |  |  |  |                             |  |  |   pea 18899 <PutChar+0xb7b>
    4f6e:	|  |  |  |  |  |  |  |                             |  |  |   jsr 17254 <KPrintF>
    4f74:	|  |  |  |  |  |  |  |                             |  |  |   addq.l #4,sp
					return FALSE;
    4f76:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    4f78:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 573c <continueFunction+0xeaa>
				} else {
					int ii;
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    4f7c:	|  |  |  |  |  |  |  |                             |  |  \-> moveq #28,d0
    4f7e:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    4f82:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    4f84:	|  |  |  |  |  |  |  |                             |  |      pea 1 <_start+0x1>
    4f88:	|  |  |  |  |  |  |  |                             |  |      lea 16(sp),a0
    4f8c:	|  |  |  |  |  |  |  |                             |  |      move.l a0,-(sp)
    4f8e:	|  |  |  |  |  |  |  |                             |  |      jsr 147f4 <getValueType>
    4f94:	|  |  |  |  |  |  |  |                             |  |      lea 12(sp),sp
    4f98:	|  |  |  |  |  |  |  |                             |  |      tst.w d0
    4f9a:	|  |  |  |  |  |  |  |                             |  |  /-- bne.s 4fa2 <continueFunction+0x710>
    4f9c:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    4f9e:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 573c <continueFunction+0xeaa>
					if (! stackSetByIndex (fun -> stack -> thisVar.varData.theStack -> first, ii, &fun -> stack -> next -> thisVar)) {
    4fa2:	|  |  |  |  |  |  |  |                             |  |  \-> movea.l 80(sp),a0
    4fa6:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    4faa:	|  |  |  |  |  |  |  |                             |  |      move.l 8(a0),d0
    4fae:	|  |  |  |  |  |  |  |                             |  |      movea.l d0,a1
    4fb0:	|  |  |  |  |  |  |  |                             |  |      move.l 8(sp),d0
    4fb4:	|  |  |  |  |  |  |  |                             |  |      move.l d0,d1
    4fb6:	|  |  |  |  |  |  |  |                             |  |      movea.l 80(sp),a0
    4fba:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    4fbe:	|  |  |  |  |  |  |  |                             |  |      movea.l 4(a0),a0
    4fc2:	|  |  |  |  |  |  |  |                             |  |      move.l (a0),d0
    4fc4:	|  |  |  |  |  |  |  |                             |  |      move.l a1,-(sp)
    4fc6:	|  |  |  |  |  |  |  |                             |  |      move.l d1,-(sp)
    4fc8:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    4fca:	|  |  |  |  |  |  |  |                             |  |      jsr 6ab2 <stackSetByIndex>
    4fd0:	|  |  |  |  |  |  |  |                             |  |      lea 12(sp),sp
    4fd4:	|  |  |  |  |  |  |  |                             |  |      tst.w d0
    4fd6:	|  |  |  |  |  |  |  |                             |  |  /-- bne.s 4fde <continueFunction+0x74c>
						return FALSE;
    4fd8:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    4fda:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 573c <continueFunction+0xeaa>
					}
					trimStack (&fun -> stack);
    4fde:	|  |  |  |  |  |  |  |                             |  |  \-> moveq #24,d0
    4fe0:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    4fe4:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    4fe6:	|  |  |  |  |  |  |  |                             |  |      jsr 15178 <trimStack>
    4fec:	|  |  |  |  |  |  |  |                             |  |      addq.l #4,sp
					trimStack (&fun -> stack);
    4fee:	|  |  |  |  |  |  |  |                             |  |      moveq #24,d0
    4ff0:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    4ff4:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    4ff6:	|  |  |  |  |  |  |  |                             |  |      jsr 15178 <trimStack>
    4ffc:	|  |  |  |  |  |  |  |                             |  |      addq.l #4,sp
				}
				break;
    4ffe:	|  |  |  |  |  |  |  |                             |  |      nop

				default:
				KPrintF((ERROR_INDEX_NONSTACK));
				return FALSE;
			}
			break;
    5000:	|  |  |  |  +--|--|--|-----------------------------|--|----- bra.w 571a <continueFunction+0xe88>
					if (! getValueType (&ii, SVT_INT, &fun->reg)) return FALSE;
    5004:	|  |  |  |  |  |  |  |                             |  \----> moveq #28,d0
    5006:	|  |  |  |  |  |  |  |                             |         add.l 80(sp),d0
    500a:	|  |  |  |  |  |  |  |                             |         move.l d0,-(sp)
    500c:	|  |  |  |  |  |  |  |                             |         pea 1 <_start+0x1>
    5010:	|  |  |  |  |  |  |  |                             |         lea 20(sp),a0
    5014:	|  |  |  |  |  |  |  |                             |         move.l a0,-(sp)
    5016:	|  |  |  |  |  |  |  |                             |         jsr 147f4 <getValueType>
    501c:	|  |  |  |  |  |  |  |                             |         lea 12(sp),sp
    5020:	|  |  |  |  |  |  |  |                             |         tst.w d0
    5022:	|  |  |  |  |  |  |  |                             |     /-- bne.s 502a <continueFunction+0x798>
    5024:	|  |  |  |  |  |  |  |                             |     |   clr.w d0
    5026:	|  +--|--|--|--|--|--|-----------------------------|-----|-- bra.w 573c <continueFunction+0xeaa>
					struct variable * v = fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii);
    502a:	|  |  |  |  |  |  |  |                             |     \-> move.l 12(sp),d0
    502e:	|  |  |  |  |  |  |  |                             |         move.l d0,d1
    5030:	|  |  |  |  |  |  |  |                             |         movea.l 80(sp),a0
    5034:	|  |  |  |  |  |  |  |                             |         movea.l 24(a0),a0
    5038:	|  |  |  |  |  |  |  |                             |         move.l 4(a0),d0
    503c:	|  |  |  |  |  |  |  |                             |         move.l d1,-(sp)
    503e:	|  |  |  |  |  |  |  |                             |         move.l d0,-(sp)
    5040:	|  |  |  |  |  |  |  |                             |         jsr 1447e <fastArrayGetByIndex>
    5046:	|  |  |  |  |  |  |  |                             |         addq.l #8,sp
    5048:	|  |  |  |  |  |  |  |                             |         move.l d0,56(sp)
					if (v == NULL) KPrintF(("Not within bounds of fast array."));
    504c:	|  |  |  |  |  |  |  |                             |     /-- bne.s 505c <continueFunction+0x7ca>
    504e:	|  |  |  |  |  |  |  |                             |     |   pea 188db <PutChar+0xbbd>
    5054:	|  |  |  |  |  |  |  |                             |     |   jsr 17254 <KPrintF>
    505a:	|  |  |  |  |  |  |  |                             |     |   addq.l #4,sp
					return FALSE;
    505c:	|  |  |  |  |  |  |  |                             |     \-> clr.w d0
    505e:	|  +--|--|--|--|--|--|-----------------------------|-------- bra.w 573c <continueFunction+0xeaa>
				KPrintF((ERROR_INDEX_NONSTACK));
    5062:	|  |  |  |  |  |  |  |                             \-------> pea 188b7 <PutChar+0xb99>
    5068:	|  |  |  |  |  |  |  |                                       jsr 17254 <KPrintF>
    506e:	|  |  |  |  |  |  |  |                                       addq.l #4,sp
				return FALSE;
    5070:	|  |  |  |  |  |  |  |                                       clr.w d0
    5072:	|  +--|--|--|--|--|--|-------------------------------------- bra.w 573c <continueFunction+0xeaa>
			// variable, a global or onto the stack...

			case SLU_INCREMENT_LOCAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&fun -> localVars[param])) return FALSE;
    5076:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    507a:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    507e:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5082:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5084:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    5086:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5088:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    508c:	|  |  |  |  |  |  |  |                                       lea 24(sp),a0
    5090:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    5092:	|  |  |  |  |  |  |  |                                       jsr 147f4 <getValueType>
    5098:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    509c:	|  |  |  |  |  |  |  |                                       tst.w d0
    509e:	|  |  |  |  |  |  |  |                                   /-- bne.s 50a6 <continueFunction+0x814>
    50a0:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    50a2:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 573c <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    50a6:	|  |  |  |  |  |  |  |                                   \-> move.l 16(sp),d1
    50aa:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    50ac:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    50b0:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    50b2:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    50b6:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    50b8:	|  |  |  |  |  |  |  |                                       jsr 150e6 <setVariable>
    50be:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&(fun -> localVars[param]), SVT_INT, ii + 1);
    50c2:	|  |  |  |  |  |  |  |                                       move.l 16(sp),d0
    50c6:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    50c8:	|  |  |  |  |  |  |  |                                       addq.l #1,d1
    50ca:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    50ce:	|  |  |  |  |  |  |  |                                       movea.l 20(a0),a0
    50d2:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    50d6:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    50d8:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    50da:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    50dc:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    50e0:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    50e2:	|  |  |  |  |  |  |  |                                       jsr 150e6 <setVariable>
    50e8:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    50ec:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 571a <continueFunction+0xe88>

			case SLU_INCREMENT_GLOBAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&globalVars[param])) return FALSE;
    50f0:	|  |  |  |  |  |  |  |                                       move.l 1c978 <globalVars>,d1
    50f6:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    50fa:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    50fc:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    50fe:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5100:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5104:	|  |  |  |  |  |  |  |                                       lea 28(sp),a0
    5108:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    510a:	|  |  |  |  |  |  |  |                                       jsr 147f4 <getValueType>
    5110:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    5114:	|  |  |  |  |  |  |  |                                       tst.w d0
    5116:	|  |  |  |  |  |  |  |                                   /-- bne.s 511e <continueFunction+0x88c>
    5118:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    511a:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 573c <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    511e:	|  |  |  |  |  |  |  |                                   \-> move.l 20(sp),d1
    5122:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    5124:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    5128:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    512a:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    512e:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5130:	|  |  |  |  |  |  |  |                                       jsr 150e6 <setVariable>
    5136:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&globalVars[param], SVT_INT, ii + 1);
    513a:	|  |  |  |  |  |  |  |                                       move.l 20(sp),d0
    513e:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    5140:	|  |  |  |  |  |  |  |                                       addq.l #1,d1
    5142:	|  |  |  |  |  |  |  |                                       movea.l 1c978 <globalVars>,a0
    5148:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    514c:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    514e:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    5150:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5152:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5156:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5158:	|  |  |  |  |  |  |  |                                       jsr 150e6 <setVariable>
    515e:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    5162:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 571a <continueFunction+0xe88>

			case SLU_DECREMENT_LOCAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&fun -> localVars[param])) return FALSE;
    5166:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    516a:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    516e:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5172:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5174:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    5176:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5178:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    517c:	|  |  |  |  |  |  |  |                                       lea 32(sp),a0
    5180:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    5182:	|  |  |  |  |  |  |  |                                       jsr 147f4 <getValueType>
    5188:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    518c:	|  |  |  |  |  |  |  |                                       tst.w d0
    518e:	|  |  |  |  |  |  |  |                                   /-- bne.s 5196 <continueFunction+0x904>
    5190:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    5192:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 573c <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    5196:	|  |  |  |  |  |  |  |                                   \-> move.l 24(sp),d1
    519a:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    519c:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    51a0:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    51a2:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    51a6:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    51a8:	|  |  |  |  |  |  |  |                                       jsr 150e6 <setVariable>
    51ae:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&(fun -> localVars[param]), SVT_INT, ii - 1);
    51b2:	|  |  |  |  |  |  |  |                                       move.l 24(sp),d0
    51b6:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    51b8:	|  |  |  |  |  |  |  |                                       subq.l #1,d1
    51ba:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    51be:	|  |  |  |  |  |  |  |                                       movea.l 20(a0),a0
    51c2:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    51c6:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    51c8:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    51ca:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    51cc:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    51d0:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    51d2:	|  |  |  |  |  |  |  |                                       jsr 150e6 <setVariable>
    51d8:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    51dc:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 571a <continueFunction+0xe88>

			case SLU_DECREMENT_GLOBAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&globalVars[param])) return FALSE;
    51e0:	|  |  |  |  |  |  |  |                                       move.l 1c978 <globalVars>,d1
    51e6:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    51ea:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    51ec:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    51ee:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    51f0:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    51f4:	|  |  |  |  |  |  |  |                                       lea 36(sp),a0
    51f8:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    51fa:	|  |  |  |  |  |  |  |                                       jsr 147f4 <getValueType>
    5200:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    5204:	|  |  |  |  |  |  |  |                                       tst.w d0
    5206:	|  |  |  |  |  |  |  |                                   /-- bne.s 520e <continueFunction+0x97c>
    5208:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    520a:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 573c <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    520e:	|  |  |  |  |  |  |  |                                   \-> move.l 28(sp),d1
    5212:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    5214:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    5218:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    521a:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    521e:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5220:	|  |  |  |  |  |  |  |                                       jsr 150e6 <setVariable>
    5226:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&globalVars[param], SVT_INT, ii - 1);
    522a:	|  |  |  |  |  |  |  |                                       move.l 28(sp),d0
    522e:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    5230:	|  |  |  |  |  |  |  |                                       subq.l #1,d1
    5232:	|  |  |  |  |  |  |  |                                       movea.l 1c978 <globalVars>,a0
    5238:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    523c:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    523e:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    5240:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5242:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5246:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5248:	|  |  |  |  |  |  |  |                                       jsr 150e6 <setVariable>
    524e:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    5252:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 571a <continueFunction+0xe88>

			case SLU_SET_LOCAL:
			if (! copyVariable (&fun -> reg, &(fun -> localVars[param]))) return FALSE;
    5256:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    525a:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    525e:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5262:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5264:	|  |  |  |  |  |  |  |                                       add.l d0,d1
    5266:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    5268:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    526c:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    526e:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5270:	|  |  |  |  |  |  |  |                                       jsr 14cae <copyVariable>
    5276:	|  |  |  |  |  |  |  |                                       addq.l #8,sp
    5278:	|  |  |  |  |  |  |  |                                       tst.w d0
    527a:	|  |  |  |  |  |  |  |  /----------------------------------- bne.w 5704 <continueFunction+0xe72>
    527e:	|  |  |  |  |  |  |  |  |                                    clr.w d0
    5280:	|  +--|--|--|--|--|--|--|----------------------------------- bra.w 573c <continueFunction+0xeaa>
			break;

			case SLU_SET_GLOBAL:
//			newDebug ("  Copying TO global variable", param);
//			newDebug ("  Global type at the moment", globalVars[param].varType);
			if (! copyVariable (&fun -> reg, &globalVars[param])) return FALSE;
    5284:	|  |  |  |  |  |  |  |  |                                    move.l 1c978 <globalVars>,d1
    528a:	|  |  |  |  |  |  |  |  |                                    move.l 68(sp),d0
    528e:	|  |  |  |  |  |  |  |  |                                    lsl.l #3,d0
    5290:	|  |  |  |  |  |  |  |  |                                    add.l d0,d1
    5292:	|  |  |  |  |  |  |  |  |                                    moveq #28,d0
    5294:	|  |  |  |  |  |  |  |  |                                    add.l 80(sp),d0
    5298:	|  |  |  |  |  |  |  |  |                                    move.l d1,-(sp)
    529a:	|  |  |  |  |  |  |  |  |                                    move.l d0,-(sp)
    529c:	|  |  |  |  |  |  |  |  |                                    jsr 14cae <copyVariable>
    52a2:	|  |  |  |  |  |  |  |  |                                    addq.l #8,sp
    52a4:	|  |  |  |  |  |  |  |  |                                    tst.w d0
    52a6:	|  |  |  |  |  |  |  |  |  /-------------------------------- bne.w 5708 <continueFunction+0xe76>
    52aa:	|  |  |  |  |  |  |  |  |  |                                 clr.w d0
    52ac:	|  +--|--|--|--|--|--|--|--|-------------------------------- bra.w 573c <continueFunction+0xeaa>
			break;

			case SLU_LOAD_GLOBAL:
//			newDebug ("  Copying FROM global variable", param);
//			newDebug ("  Global type at the moment", globalVars[param].varType);
			if (! copyVariable (&globalVars[param], &fun -> reg)) return FALSE;
    52b0:	|  |  |  |  |  |  |  |  |  |                                 moveq #28,d0
    52b2:	|  |  |  |  |  |  |  |  |  |                                 add.l 80(sp),d0
    52b6:	|  |  |  |  |  |  |  |  |  |                                 movea.l 1c978 <globalVars>,a0
    52bc:	|  |  |  |  |  |  |  |  |  |                                 move.l 68(sp),d1
    52c0:	|  |  |  |  |  |  |  |  |  |                                 lsl.l #3,d1
    52c2:	|  |  |  |  |  |  |  |  |  |                                 add.l a0,d1
    52c4:	|  |  |  |  |  |  |  |  |  |                                 move.l d0,-(sp)
    52c6:	|  |  |  |  |  |  |  |  |  |                                 move.l d1,-(sp)
    52c8:	|  |  |  |  |  |  |  |  |  |                                 jsr 14cae <copyVariable>
    52ce:	|  |  |  |  |  |  |  |  |  |                                 addq.l #8,sp
    52d0:	|  |  |  |  |  |  |  |  |  |                                 tst.w d0
    52d2:	|  |  |  |  |  |  |  |  |  |  /----------------------------- bne.w 570c <continueFunction+0xe7a>
    52d6:	|  |  |  |  |  |  |  |  |  |  |                              clr.w d0
    52d8:	|  +--|--|--|--|--|--|--|--|--|----------------------------- bra.w 573c <continueFunction+0xeaa>
			break;

			case SLU_STACK_PUSH:
			if (! addVarToStack (&fun -> reg, &fun -> stack)) return FALSE;
    52dc:	|  |  |  |  |  |  |  |  |  |  |                              moveq #24,d1
    52de:	|  |  |  |  |  |  |  |  |  |  |                              add.l 80(sp),d1
    52e2:	|  |  |  |  |  |  |  |  |  |  |                              moveq #28,d0
    52e4:	|  |  |  |  |  |  |  |  |  |  |                              add.l 80(sp),d0
    52e8:	|  |  |  |  |  |  |  |  |  |  |                              move.l d1,-(sp)
    52ea:	|  |  |  |  |  |  |  |  |  |  |                              move.l d0,-(sp)
    52ec:	|  |  |  |  |  |  |  |  |  |  |                              jsr 14030 <addVarToStack>
    52f2:	|  |  |  |  |  |  |  |  |  |  |                              addq.l #8,sp
    52f4:	|  |  |  |  |  |  |  |  |  |  |                              tst.w d0
    52f6:	|  |  |  |  |  |  |  |  |  |  |  /-------------------------- bne.w 5710 <continueFunction+0xe7e>
    52fa:	|  |  |  |  |  |  |  |  |  |  |  |                           clr.w d0
    52fc:	|  +--|--|--|--|--|--|--|--|--|--|-------------------------- bra.w 573c <continueFunction+0xeaa>
			break;

			case SLU_QUICK_PUSH:
			if (! addVarToStackQuick (&fun -> reg, &fun -> stack)) return FALSE;
    5300:	|  |  |  |  |  |  |  |  |  |  |  |                           moveq #24,d1
    5302:	|  |  |  |  |  |  |  |  |  |  |  |                           add.l 80(sp),d1
    5306:	|  |  |  |  |  |  |  |  |  |  |  |                           moveq #28,d0
    5308:	|  |  |  |  |  |  |  |  |  |  |  |                           add.l 80(sp),d0
    530c:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l d1,-(sp)
    530e:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l d0,-(sp)
    5310:	|  |  |  |  |  |  |  |  |  |  |  |                           jsr 140b6 <addVarToStackQuick>
    5316:	|  |  |  |  |  |  |  |  |  |  |  |                           addq.l #8,sp
    5318:	|  |  |  |  |  |  |  |  |  |  |  |                           tst.w d0
    531a:	|  |  |  |  |  |  |  |  |  |  |  |  /----------------------- bne.w 5714 <continueFunction+0xe82>
    531e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        clr.w d0
    5320:	|  +--|--|--|--|--|--|--|--|--|--|--|----------------------- bra.w 573c <continueFunction+0xeaa>
			break;

			case SLU_NOT:
			setVariable (&fun -> reg, SVT_INT, ! getBoolean (&fun -> reg));
    5324:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    5326:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    532a:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    532c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 14d34 <getBoolean>
    5332:	|  |  |  |  |  |  |  |  |  |  |  |  |                        addq.l #4,sp
    5334:	|  |  |  |  |  |  |  |  |  |  |  |  |                        tst.w d0
    5336:	|  |  |  |  |  |  |  |  |  |  |  |  |                        seq d0
    5338:	|  |  |  |  |  |  |  |  |  |  |  |  |                        neg.b d0
    533a:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #0,d1
    533c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.b d0,d1
    533e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    5340:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    5344:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d1,-(sp)
    5346:	|  |  |  |  |  |  |  |  |  |  |  |  |                        pea 1 <_start+0x1>
    534a:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    534c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 150e6 <setVariable>
    5352:	|  |  |  |  |  |  |  |  |  |  |  |  |                        lea 12(sp),sp
			break;
    5356:	|  |  |  |  +--|--|--|--|--|--|--|--|----------------------- bra.w 571a <continueFunction+0xe88>

			case SLU_BR_ZERO:
			if (! getBoolean (&fun -> reg)) {
    535a:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    535c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    5360:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    5362:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 14d34 <getBoolean>
    5368:	|  |  |  |  |  |  |  |  |  |  |  |  |                        addq.l #4,sp
    536a:	|  |  |  |  |  |  |  |  |  |  |  |  |                        tst.w d0
    536c:	|  |  |  |  |  |  |  |  |  |  |  |  |  /-------------------- bne.w 5718 <continueFunction+0xe86>
				advanceNow = FALSE;
    5370:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     clr.w 72(sp)
				fun -> runThisLine = param;
    5374:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    5378:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 68(sp),36(a0)
			}
			break;
    537e:	|  |  |  |  |  |  |  |  |  |  |  |  |  +-------------------- bra.w 5718 <continueFunction+0xe86>

			case SLU_BRANCH:
			advanceNow = FALSE;
    5382:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     clr.w 72(sp)
			fun -> runThisLine = param;
    5386:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    538a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 68(sp),36(a0)
			break;
    5390:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-------------------- bra.w 571a <continueFunction+0xe88>

			case SLU_NEGATIVE:
			{
				int i;
				if (! getValueType(&i, SVT_INT,&fun -> reg)) return FALSE;
    5394:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     moveq #28,d0
    5396:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     add.l 80(sp),d0
    539a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,-(sp)
    539c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     pea 1 <_start+0x1>
    53a0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 40(sp),a0
    53a4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l a0,-(sp)
    53a6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     jsr 147f4 <getValueType>
    53ac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 12(sp),sp
    53b0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     tst.w d0
    53b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 /-- bne.s 53ba <continueFunction+0xb28>
    53b4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 |   clr.w d0
    53b6:	|  +--|--|--|--|--|--|--|--|--|--|--|--|-----------------|-- bra.w 573c <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, -i);
    53ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 \-> move.l 32(sp),d0
    53be:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,d1
    53c0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     neg.l d1
    53c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     moveq #28,d0
    53c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     add.l 80(sp),d0
    53c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d1,-(sp)
    53ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     pea 1 <_start+0x1>
    53ce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,-(sp)
    53d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     jsr 150e6 <setVariable>
    53d6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 12(sp),sp
			}
			break;
    53da:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-------------------- bra.w 571a <continueFunction+0xe88>
			case SLU_NOT_EQ:
			case SLU_LESSTHAN:
			case SLU_MORETHAN:
			case SLU_LESS_EQUAL:
			case SLU_MORE_EQUAL:
			if (fun -> stack) {
    53de:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    53e2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 24(a0),d0
    53e6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  /----------------- beq.w 56d0 <continueFunction+0xe3e>
    53ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  moveq #15,d0
    53ec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  cmp.l 64(sp),d0
    53f0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        /-------- beq.s 546c <continueFunction+0xbda>
    53f2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #15,d1
    53f4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         cmp.l 64(sp),d1
    53f8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     /--|-------- bcs.w 54b6 <continueFunction+0xc24>
    53fc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |         moveq #8,d0
    53fe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |         cmp.l 64(sp),d0
    5402:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     /-- beq.s 5410 <continueFunction+0xb7e>
    5404:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |   moveq #14,d1
    5406:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |   cmp.l 64(sp),d1
    540a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  /--|-- beq.s 543e <continueFunction+0xbac>
    540c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     +--|--|--|-- bra.w 54b6 <continueFunction+0xc24>
				int firstValue, secondValue;

				switch (com) {
					case SLU_PLUS:
					addVariablesInSecond (&fun -> stack -> thisVar, &fun -> reg);
    5410:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  \-> moveq #28,d0
    5412:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      add.l 80(sp),d0
    5416:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      movea.l 80(sp),a0
    541a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l 24(a0),d1
    541e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d0,-(sp)
    5420:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d1,-(sp)
    5422:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      jsr 1412a <addVariablesInSecond>
    5428:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      addq.l #8,sp
					trimStack (&fun -> stack);
    542a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      moveq #24,d0
    542c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      add.l 80(sp),d0
    5430:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d0,-(sp)
    5432:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      jsr 15178 <trimStack>
    5438:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      addq.l #4,sp
					break;
    543a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  /--|--|--|----- bra.w 56e4 <continueFunction+0xe52>

					case SLU_EQUALS:
					compareVariablesInSecond (&(fun -> stack -> thisVar), &fun -> reg);
    543e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \----> moveq #28,d0
    5440:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         add.l 80(sp),d0
    5444:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         movea.l 80(sp),a0
    5448:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l 24(a0),d1
    544c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d0,-(sp)
    544e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d1,-(sp)
    5450:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         jsr 141e8 <compareVariablesInSecond>
    5456:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         addq.l #8,sp
					trimStack (&fun -> stack);
    5458:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         moveq #24,d0
    545a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         add.l 80(sp),d0
    545e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d0,-(sp)
    5460:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         jsr 15178 <trimStack>
    5466:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         addq.l #4,sp
					break;
    5468:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|--|-------- bra.w 56e4 <continueFunction+0xe52>

					case SLU_NOT_EQ:
					compareVariablesInSecond (&(fun -> stack -> thisVar), &fun -> reg);
    546c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \-------> moveq #28,d0
    546e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            add.l 80(sp),d0
    5472:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    5476:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 24(a0),d1
    547a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,-(sp)
    547c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d1,-(sp)
    547e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            jsr 141e8 <compareVariablesInSecond>
    5484:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            addq.l #8,sp
					trimStack (&fun -> stack);
    5486:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            moveq #24,d0
    5488:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            add.l 80(sp),d0
    548c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,-(sp)
    548e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            jsr 15178 <trimStack>
    5494:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            addq.l #4,sp
	               	fun -> reg.varData.intValue = ! fun -> reg.varData.intValue;
    5496:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    549a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 32(a0),d0
    549e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            seq d0
    54a0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            neg.b d0
    54a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.b d0,d0
    54a4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            andi.l #255,d0
    54aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    54ae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,32(a0)
					break;
    54b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|----------- bra.w 56e4 <continueFunction+0xe52>

					default:
					if (! getValueType (&firstValue, SVT_INT, &fun->stack->thisVar)) return FALSE;
    54b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \----------> movea.l 80(sp),a0
    54ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l 24(a0),d0
    54be:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    54c0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               pea 1 <_start+0x1>
    54c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 48(sp),a0
    54c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l a0,-(sp)
    54ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 147f4 <getValueType>
    54d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 12(sp),sp
    54d4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               tst.w d0
    54d6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           /-- bne.s 54de <continueFunction+0xc4c>
    54d8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   clr.w d0
    54da:	|  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|-----------|-- bra.w 573c <continueFunction+0xeaa>
					if (! getValueType(&secondValue, SVT_INT,&fun -> reg)) return FALSE;
    54de:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           \-> moveq #28,d0
    54e0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 80(sp),d0
    54e4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    54e6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               pea 1 <_start+0x1>
    54ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 44(sp),a0
    54ee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l a0,-(sp)
    54f0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 147f4 <getValueType>
    54f6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 12(sp),sp
    54fa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               tst.w d0
    54fc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           /-- bne.s 5504 <continueFunction+0xc72>
    54fe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   clr.w d0
    5500:	|  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|-----------|-- bra.w 573c <continueFunction+0xeaa>
					trimStack (&fun -> stack);
    5504:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           \-> moveq #24,d0
    5506:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 80(sp),d0
    550a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    550c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 15178 <trimStack>
    5512:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               addq.l #4,sp
    5514:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               moveq #-9,d0
    5516:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 64(sp),d0
    551a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               moveq #23,d1
    551c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               cmp.l d0,d1
    551e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           /-- bcs.w 56e2 <continueFunction+0xe50>
    5522:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l d0,d0
    5524:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   movea.l d0,a0
    5526:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   adda.l #21810,a0
    552c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.w (a0),d0
    552e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jmp (5532 <continueFunction+0xca0>,pc,d0.w)
    5532:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   ori.w #48,-(a2)
    5536:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x00ba
    5538:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    5540:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x0088
    5542:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    554a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    5552:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(15466778,d0.w)
    555a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(21365106,d0.w)

					switch (com) {
						case SLU_MULT:
						setVariable (&fun -> reg, SVT_INT, firstValue * secondValue);
    5562:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    5566:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    556a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    556c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    556e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 17c08 <__mulsi3>
    5574:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    5576:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    5578:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    557a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    557e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5580:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    5584:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5586:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 150e6 <setVariable>
    558c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    5590:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 56e4 <continueFunction+0xe52>

						case SLU_MINUS:
						setVariable (&fun -> reg, SVT_INT, firstValue - secondValue);
    5594:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    5598:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    559c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sub.l d0,d1
    559e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    55a0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    55a4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    55a6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    55aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    55ac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 150e6 <setVariable>
    55b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    55b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 56e4 <continueFunction+0xe52>

						case SLU_MODULUS:
						setVariable (&fun -> reg, SVT_INT, firstValue % secondValue);
    55ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    55be:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    55c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    55c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    55c6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 17cb4 <__modsi3>
    55cc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    55ce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    55d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    55d2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    55d6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    55d8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    55dc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    55de:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 150e6 <setVariable>
    55e4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    55e8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 56e4 <continueFunction+0xe52>

						case SLU_DIVIDE:
						setVariable (&fun -> reg, SVT_INT, firstValue / secondValue);
    55ec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    55f0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    55f4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    55f6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    55f8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 17c86 <__divsi3>
    55fe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    5600:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    5602:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    5604:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    5608:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    560a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    560e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5610:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 150e6 <setVariable>
    5616:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    561a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 56e4 <continueFunction+0xe52>

						case SLU_LESSTHAN:
						setVariable (&fun -> reg, SVT_INT, firstValue < secondValue);
    561e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    5622:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    5626:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    5628:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sgt d0
    562a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    562c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    562e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    5630:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    5632:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    5636:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5638:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    563c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    563e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 150e6 <setVariable>
    5644:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    5648:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 56e4 <continueFunction+0xe52>

						case SLU_MORETHAN:
						setVariable (&fun -> reg, SVT_INT, firstValue > secondValue);
    564c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    5650:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    5654:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    5656:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   slt d0
    5658:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    565a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    565c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    565e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    5660:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    5664:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5666:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    566a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    566c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 150e6 <setVariable>
    5672:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    5676:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 56e4 <continueFunction+0xe52>

						case SLU_LESS_EQUAL:
						setVariable (&fun -> reg, SVT_INT, firstValue <= secondValue);
    5678:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    567c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    5680:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    5682:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sge d0
    5684:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    5686:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    5688:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    568a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    568c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    5690:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5692:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    5696:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5698:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 150e6 <setVariable>
    569e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    56a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 56e4 <continueFunction+0xe52>

						case SLU_MORE_EQUAL:
						setVariable (&fun -> reg, SVT_INT, firstValue >= secondValue);
    56a4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    56a8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    56ac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    56ae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sle d0
    56b0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    56b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    56b4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    56b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    56b8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    56bc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    56be:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    56c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    56c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 150e6 <setVariable>
    56ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    56ce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 56e4 <continueFunction+0xe52>
						default:
						break;
					}
				}
			} else {
				KPrintF((ERROR_NOSTACK));
    56d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  \--|-----------|-> pea 188fc <PutChar+0xbde>
    56d6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   jsr 17254 <KPrintF>
    56dc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   addq.l #4,sp
				return FALSE;
    56de:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   clr.w d0
    56e0:	|  +--|--|--|--|--|--|--|--|--|--|--|--|-----|-----------|-- bra.s 573c <continueFunction+0xeaa>
						break;
    56e2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           \-> nop
			}
			break;
    56e4:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-----\-------------X bra.s 571a <continueFunction+0xe88>

			default:
			KPrintF((ERROR_UNKNOWN_CODE));
    56e6:	|  |  |  \--|--|--|--|--|--|--|--|--|--|-------------------> pea 18914 <PutChar+0xbf6>
    56ec:	|  |  |     |  |  |  |  |  |  |  |  |  |                     jsr 17254 <KPrintF>
    56f2:	|  |  |     |  |  |  |  |  |  |  |  |  |                     addq.l #4,sp
			return FALSE;
    56f4:	|  |  |     |  |  |  |  |  |  |  |  |  |                     clr.w d0
    56f6:	|  +--|-----|--|--|--|--|--|--|--|--|--|-------------------- bra.s 573c <continueFunction+0xeaa>
			break;
    56f8:	|  |  |     |  \--|--|--|--|--|--|--|--|-------------------> nop
    56fa:	|  |  |     +-----|--|--|--|--|--|--|--|-------------------- bra.s 571a <continueFunction+0xe88>
			break;
    56fc:	|  |  |     |     \--|--|--|--|--|--|--|-------------------> nop
    56fe:	|  |  |     +--------|--|--|--|--|--|--|-------------------- bra.s 571a <continueFunction+0xe88>
			break;
    5700:	|  |  |     |        \--|--|--|--|--|--|-------------------> nop
    5702:	|  |  |     +-----------|--|--|--|--|--|-------------------- bra.s 571a <continueFunction+0xe88>
			break;
    5704:	|  |  |     |           \--|--|--|--|--|-------------------> nop
    5706:	|  |  |     +--------------|--|--|--|--|-------------------- bra.s 571a <continueFunction+0xe88>
			break;
    5708:	|  |  |     |              \--|--|--|--|-------------------> nop
    570a:	|  |  |     +-----------------|--|--|--|-------------------- bra.s 571a <continueFunction+0xe88>
			break;
    570c:	|  |  |     |                 \--|--|--|-------------------> nop
    570e:	|  |  |     +--------------------|--|--|-------------------- bra.s 571a <continueFunction+0xe88>
			break;
    5710:	|  |  |     |                    \--|--|-------------------> nop
    5712:	|  |  |     +-----------------------|--|-------------------- bra.s 571a <continueFunction+0xe88>
			break;
    5714:	|  |  |     |                       \--|-------------------> nop
    5716:	|  |  |     +--------------------------|-------------------- bra.s 571a <continueFunction+0xe88>
			break;
    5718:	|  |  |     |                          \-------------------> nop
		}

		if (advanceNow) fun -> runThisLine ++;
    571a:	|  |  |     \----------------------------------------------> tst.w 72(sp)
    571e:	+--|--|----------------------------------------------------- beq.s 5732 <continueFunction+0xea0>
    5720:	|  |  |                                                      movea.l 80(sp),a0
    5724:	|  |  |                                                      move.l 36(a0),d0
    5728:	|  |  |                                                      addq.l #1,d0
    572a:	|  |  |                                                      movea.l 80(sp),a0
    572e:	|  |  |                                                      move.l d0,36(a0)
	while (keepLooping) {
    5732:	\--|--|----------------------------------------------------> tst.w 74(sp)
    5736:	   |  \----------------------------------------------------- bne.w 48ba <continueFunction+0x28>

	}
	return TRUE;
    573a:	   |                                                         moveq #1,d0
}
    573c:	   \-------------------------------------------------------> lea 76(sp),sp
    5740:	                                                             rts

00005742 <finishFunction>:

void finishFunction (struct loadedFunction * fun) {
    5742:	          lea -16(sp),sp
    5746:	          move.l a6,-(sp)
	int a;

	pauseFunction (fun);
    5748:	          move.l 24(sp),-(sp)
    574c:	          jsr 6868 <pauseFunction>
    5752:	          addq.l #4,sp
	if (fun -> stack) 
    5754:	          movea.l 24(sp),a0
    5758:	          move.l 24(a0),d0
    575c:	      /-- beq.s 5770 <finishFunction+0x2e>
	{
		KPrintF("finishfunction: error non empty stack");
    575e:	      |   pea 18940 <PutChar+0xc22>
    5764:	      |   jsr 17254 <KPrintF>
    576a:	      |   addq.l #4,sp
		return;
    576c:	/-----|-- bra.w 580a <finishFunction+0xc8>
	}
	FreeVec( fun -> compiledLines);
    5770:	|     \-> movea.l 24(sp),a0
    5774:	|         move.l 4(a0),12(sp)
    577a:	|         move.l 1c9ca <SysBase>,d0
    5780:	|         movea.l d0,a6
    5782:	|         movea.l 12(sp),a1
    5786:	|         jsr -690(a6)
	for (a = 0; a < fun -> numLocals; a ++) unlinkVar (&(fun -> localVars[a]));
    578a:	|         clr.l 16(sp)
    578e:	|     /-- bra.s 57ae <finishFunction+0x6c>
    5790:	|  /--|-> movea.l 24(sp),a0
    5794:	|  |  |   move.l 20(a0),d1
    5798:	|  |  |   move.l 16(sp),d0
    579c:	|  |  |   lsl.l #3,d0
    579e:	|  |  |   add.l d1,d0
    57a0:	|  |  |   move.l d0,-(sp)
    57a2:	|  |  |   jsr 14a42 <unlinkVar>
    57a8:	|  |  |   addq.l #4,sp
    57aa:	|  |  |   addq.l #1,16(sp)
    57ae:	|  |  \-> movea.l 24(sp),a0
    57b2:	|  |      move.l 8(a0),d0
    57b6:	|  |      cmp.l 16(sp),d0
    57ba:	|  \----- bgt.s 5790 <finishFunction+0x4e>
	if( fun->numLocals > 0) {
    57bc:	|         movea.l 24(sp),a0
    57c0:	|         move.l 8(a0),d0
    57c4:	|     /-- ble.s 57e0 <finishFunction+0x9e>
		FreeVec(fun -> localVars);
    57c6:	|     |   movea.l 24(sp),a0
    57ca:	|     |   move.l 20(a0),8(sp)
    57d0:	|     |   move.l 1c9ca <SysBase>,d0
    57d6:	|     |   movea.l d0,a6
    57d8:	|     |   movea.l 8(sp),a1
    57dc:	|     |   jsr -690(a6)
	}
	unlinkVar (&fun -> reg);
    57e0:	|     \-> moveq #28,d0
    57e2:	|         add.l 24(sp),d0
    57e6:	|         move.l d0,-(sp)
    57e8:	|         jsr 14a42 <unlinkVar>
    57ee:	|         addq.l #4,sp
	FreeVec(fun);
    57f0:	|         move.l 24(sp),4(sp)
    57f6:	|         move.l 1c9ca <SysBase>,d0
    57fc:	|         movea.l d0,a6
    57fe:	|         movea.l 4(sp),a1
    5802:	|         jsr -690(a6)
	fun = NULL;
    5806:	|         clr.l 24(sp)
}
    580a:	\-------> movea.l (sp)+,a6
    580c:	          lea 16(sp),sp
    5810:	          rts

00005812 <freezeSubs>:

void freezeSubs () {
    5812:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    5814:	          move.l 1c962 <allRunningFunctions>,(sp)

	while (thisFunction) {
    581a:	   /----- bra.s 5838 <freezeSubs+0x26>
		if (thisFunction -> unfreezable) {
    581c:	/--|----> movea.l (sp),a0
    581e:	|  |      move.w 52(a0),d0
    5822:	|  |  /-- bne.s 5832 <freezeSubs+0x20>
			//msgBox ("SLUDGE debugging bollocks!", "Trying to freeze an unfreezable function!");
		} else {
			thisFunction -> freezerLevel ++;
    5824:	|  |  |   movea.l (sp),a0
    5826:	|  |  |   move.b 56(a0),d0
    582a:	|  |  |   addq.b #1,d0
    582c:	|  |  |   movea.l (sp),a0
    582e:	|  |  |   move.b d0,56(a0)
		}
		thisFunction = thisFunction -> next;
    5832:	|  |  \-> movea.l (sp),a0
    5834:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    5838:	|  \----> tst.l (sp)
    583a:	\-------- bne.s 581c <freezeSubs+0xa>
	}
}
    583c:	          nop
    583e:	          nop
    5840:	          addq.l #4,sp
    5842:	          rts

00005844 <handleInput>:

BOOL handleInput () {
    5844:	             lea -16(sp),sp
    5848:	             move.l a6,-(sp)
	//Amiga Todo: import more from orig code and adjust 

	if (! overRegion) getOverRegion ();
    584a:	             move.l 1cade <overRegion>,d0
    5850:	         /-- bne.s 5858 <handleInput+0x14>
    5852:	         |   jsr 159b0 <getOverRegion>

	if (input.justMoved) {
    5858:	         \-> move.w 1c980 <input+0x4>,d0
    585e:	         /-- beq.s 589c <handleInput+0x58>
		if (currentEvents -> moveMouseFunction) {
    5860:	         |   movea.l 1c342 <currentEvents>,a0
    5866:	         |   move.l 16(a0),d0
    586a:	         +-- beq.s 589c <handleInput+0x58>
			if (! startNewFunctionNum (currentEvents -> moveMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    586c:	         |   move.l 1c99a <noStack>,d1
    5872:	         |   movea.l 1c342 <currentEvents>,a0
    5878:	         |   move.l 16(a0),d0
    587c:	         |   pea 1 <_start+0x1>
    5880:	         |   move.l d1,-(sp)
    5882:	         |   clr.l -(sp)
    5884:	         |   clr.l -(sp)
    5886:	         |   move.l d0,-(sp)
    5888:	         |   jsr 6af6 <startNewFunctionNum>
    588e:	         |   lea 20(sp),sp
    5892:	         |   tst.l d0
    5894:	         +-- bne.s 589c <handleInput+0x58>
    5896:	         |   clr.w d0
    5898:	/--------|-- bra.w 5aa2 <handleInput+0x25e>
		}
	}
	input.justMoved = FALSE;
    589c:	|        \-> clr.w 1c980 <input+0x4>

	if (lastRegion != overRegion && currentEvents -> focusFunction) {
    58a2:	|            move.l 1c992 <lastRegion>,d1
    58a8:	|            move.l 1cade <overRegion>,d0
    58ae:	|            cmp.l d1,d0
    58b0:	|  /-------- beq.w 5988 <handleInput+0x144>
    58b4:	|  |         movea.l 1c342 <currentEvents>,a0
    58ba:	|  |         move.l 20(a0),d0
    58be:	|  +-------- beq.w 5988 <handleInput+0x144>
		struct variableStack * tempStack = AllocVec( sizeof(struct variableStack), MEMF_ANY);
    58c2:	|  |         moveq #12,d0
    58c4:	|  |         move.l d0,16(sp)
    58c8:	|  |         clr.l 12(sp)
    58cc:	|  |         move.l 1c9ca <SysBase>,d0
    58d2:	|  |         movea.l d0,a6
    58d4:	|  |         move.l 16(sp),d0
    58d8:	|  |         move.l 12(sp),d1
    58dc:	|  |         jsr -684(a6)
    58e0:	|  |         move.l d0,8(sp)
    58e4:	|  |         move.l 8(sp),d0
    58e8:	|  |         move.l d0,4(sp)
		if(!tempStack) {
    58ec:	|  |         move.l 4(sp),d0
    58f0:	|  |     /-- bne.s 5906 <handleInput+0xc2>
			KPrintF("handleInput: Cannot allocate memory for variablestack");
    58f2:	|  |     |   pea 18966 <PutChar+0xc48>
    58f8:	|  |     |   jsr 17254 <KPrintF>
    58fe:	|  |     |   addq.l #4,sp
			return FALSE;
    5900:	|  |     |   clr.w d0
    5902:	+--|-----|-- bra.w 5aa2 <handleInput+0x25e>
		}
		
		initVarNew (tempStack -> thisVar);
    5906:	|  |     \-> movea.l 4(sp),a0
    590a:	|  |         clr.l (a0)
		if (overRegion) {
    590c:	|  |         move.l 1cade <overRegion>,d0
    5912:	|  |  /----- beq.s 593a <handleInput+0xf6>
			setVariable (&tempStack -> thisVar, SVT_OBJTYPE, overRegion -> thisType -> objectNum);
    5914:	|  |  |      movea.l 1cade <overRegion>,a0
    591a:	|  |  |      movea.l 28(a0),a0
    591e:	|  |  |      move.l 4(a0),d1
    5922:	|  |  |      move.l 4(sp),d0
    5926:	|  |  |      move.l d1,-(sp)
    5928:	|  |  |      pea 7 <_start+0x7>
    592c:	|  |  |      move.l d0,-(sp)
    592e:	|  |  |      jsr 150e6 <setVariable>
    5934:	|  |  |      lea 12(sp),sp
    5938:	|  |  |  /-- bra.s 5950 <handleInput+0x10c>
		} else {
			setVariable (&tempStack -> thisVar, SVT_INT, 0);
    593a:	|  |  \--|-> move.l 4(sp),d0
    593e:	|  |     |   clr.l -(sp)
    5940:	|  |     |   pea 1 <_start+0x1>
    5944:	|  |     |   move.l d0,-(sp)
    5946:	|  |     |   jsr 150e6 <setVariable>
    594c:	|  |     |   lea 12(sp),sp
		}
		tempStack -> next = NULL;
    5950:	|  |     \-> movea.l 4(sp),a0
    5954:	|  |         clr.l 8(a0)
		if (! startNewFunctionNum (currentEvents -> focusFunction, 1, NULL, &tempStack, TRUE)) return FALSE;
    5958:	|  |         movea.l 1c342 <currentEvents>,a0
    595e:	|  |         move.l 20(a0),d0
    5962:	|  |         pea 1 <_start+0x1>
    5966:	|  |         lea 8(sp),a0
    596a:	|  |         move.l a0,-(sp)
    596c:	|  |         clr.l -(sp)
    596e:	|  |         pea 1 <_start+0x1>
    5972:	|  |         move.l d0,-(sp)
    5974:	|  |         jsr 6af6 <startNewFunctionNum>
    597a:	|  |         lea 20(sp),sp
    597e:	|  |         tst.l d0
    5980:	|  +-------- bne.s 5988 <handleInput+0x144>
    5982:	|  |         clr.w d0
    5984:	+--|-------- bra.w 5aa2 <handleInput+0x25e>
	}
	if (input.leftRelease && currentEvents -> leftMouseUpFunction)  {
    5988:	|  \-------> move.w 1c982 <input+0x6>,d0
    598e:	|        /-- beq.s 59cc <handleInput+0x188>
    5990:	|        |   movea.l 1c342 <currentEvents>,a0
    5996:	|        |   move.l 4(a0),d0
    599a:	|        +-- beq.s 59cc <handleInput+0x188>
		if (! startNewFunctionNum (currentEvents -> leftMouseUpFunction, 0, NULL, noStack, TRUE)) return FALSE;
    599c:	|        |   move.l 1c99a <noStack>,d1
    59a2:	|        |   movea.l 1c342 <currentEvents>,a0
    59a8:	|        |   move.l 4(a0),d0
    59ac:	|        |   pea 1 <_start+0x1>
    59b0:	|        |   move.l d1,-(sp)
    59b2:	|        |   clr.l -(sp)
    59b4:	|        |   clr.l -(sp)
    59b6:	|        |   move.l d0,-(sp)
    59b8:	|        |   jsr 6af6 <startNewFunctionNum>
    59be:	|        |   lea 20(sp),sp
    59c2:	|        |   tst.l d0
    59c4:	|        +-- bne.s 59cc <handleInput+0x188>
    59c6:	|        |   clr.w d0
    59c8:	+--------|-- bra.w 5aa2 <handleInput+0x25e>
	}
	if (input.rightRelease && currentEvents -> rightMouseUpFunction) {
    59cc:	|        \-> move.w 1c984 <input+0x8>,d0
    59d2:	|        /-- beq.s 5a10 <handleInput+0x1cc>
    59d4:	|        |   movea.l 1c342 <currentEvents>,a0
    59da:	|        |   move.l 12(a0),d0
    59de:	|        +-- beq.s 5a10 <handleInput+0x1cc>
		if (! startNewFunctionNum (currentEvents -> rightMouseUpFunction, 0, NULL, noStack, TRUE)) return FALSE;
    59e0:	|        |   move.l 1c99a <noStack>,d1
    59e6:	|        |   movea.l 1c342 <currentEvents>,a0
    59ec:	|        |   move.l 12(a0),d0
    59f0:	|        |   pea 1 <_start+0x1>
    59f4:	|        |   move.l d1,-(sp)
    59f6:	|        |   clr.l -(sp)
    59f8:	|        |   clr.l -(sp)
    59fa:	|        |   move.l d0,-(sp)
    59fc:	|        |   jsr 6af6 <startNewFunctionNum>
    5a02:	|        |   lea 20(sp),sp
    5a06:	|        |   tst.l d0
    5a08:	|        +-- bne.s 5a10 <handleInput+0x1cc>
    5a0a:	|        |   clr.w d0
    5a0c:	+--------|-- bra.w 5aa2 <handleInput+0x25e>
	}
	if (input.leftClick && currentEvents -> leftMouseFunction)
    5a10:	|        \-> move.w 1c97c <input>,d0
    5a16:	|        /-- beq.s 5a4e <handleInput+0x20a>
    5a18:	|        |   movea.l 1c342 <currentEvents>,a0
    5a1e:	|        |   move.l (a0),d0
    5a20:	|        +-- beq.s 5a4e <handleInput+0x20a>
		if (! startNewFunctionNum (currentEvents -> leftMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    5a22:	|        |   move.l 1c99a <noStack>,d1
    5a28:	|        |   movea.l 1c342 <currentEvents>,a0
    5a2e:	|        |   move.l (a0),d0
    5a30:	|        |   pea 1 <_start+0x1>
    5a34:	|        |   move.l d1,-(sp)
    5a36:	|        |   clr.l -(sp)
    5a38:	|        |   clr.l -(sp)
    5a3a:	|        |   move.l d0,-(sp)
    5a3c:	|        |   jsr 6af6 <startNewFunctionNum>
    5a42:	|        |   lea 20(sp),sp
    5a46:	|        |   tst.l d0
    5a48:	|        +-- bne.s 5a4e <handleInput+0x20a>
    5a4a:	|        |   clr.w d0
    5a4c:	+--------|-- bra.s 5aa2 <handleInput+0x25e>
	if (input.rightClick && currentEvents -> rightMouseFunction) {
    5a4e:	|        \-> move.w 1c97e <input+0x2>,d0
    5a54:	|        /-- beq.s 5a90 <handleInput+0x24c>
    5a56:	|        |   movea.l 1c342 <currentEvents>,a0
    5a5c:	|        |   move.l 8(a0),d0
    5a60:	|        +-- beq.s 5a90 <handleInput+0x24c>
		if (! startNewFunctionNum (currentEvents -> rightMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    5a62:	|        |   move.l 1c99a <noStack>,d1
    5a68:	|        |   movea.l 1c342 <currentEvents>,a0
    5a6e:	|        |   move.l 8(a0),d0
    5a72:	|        |   pea 1 <_start+0x1>
    5a76:	|        |   move.l d1,-(sp)
    5a78:	|        |   clr.l -(sp)
    5a7a:	|        |   clr.l -(sp)
    5a7c:	|        |   move.l d0,-(sp)
    5a7e:	|        |   jsr 6af6 <startNewFunctionNum>
    5a84:	|        |   lea 20(sp),sp
    5a88:	|        |   tst.l d0
    5a8a:	|        +-- bne.s 5a90 <handleInput+0x24c>
    5a8c:	|        |   clr.w d0
    5a8e:	+--------|-- bra.s 5aa2 <handleInput+0x25e>
	}

	lastRegion = overRegion;
    5a90:	|        \-> move.l 1cade <overRegion>,d0
    5a96:	|            move.l d0,1c992 <lastRegion>
	return runSludge ();
    5a9c:	|            jsr 68c4 <runSludge>
}
    5aa2:	\----------> movea.l (sp)+,a6
    5aa4:	             lea 16(sp),sp
    5aa8:	             rts

00005aaa <initSludge>:

BOOL initSludge (char * filename) {
    5aaa:	             lea -292(sp),sp
    5aae:	             movem.l d2-d4/a2/a6,-(sp)
	int a = 0;
    5ab2:	             clr.l 308(sp)
	mouseCursorAnim = makeNullAnim ();
    5ab6:	             jsr ad2a <makeNullAnim>
    5abc:	             move.l d0,1c8d0 <mouseCursorAnim>

	//Amiga: Attention. This was changed to a Nonpointer Type
	BPTR fp = openAndVerify (filename, 'G', 'E', ERROR_BAD_HEADER, &gameVersion);
    5ac2:	             pea 1c974 <gameVersion>
    5ac8:	             pea 1899c <PutChar+0xc7e>
    5ace:	             pea 45 <_start+0x45>
    5ad2:	             pea 47 <_start+0x47>
    5ad6:	             move.l 332(sp),-(sp)
    5ada:	             jsr 64f8 <openAndVerify>
    5ae0:	             lea 20(sp),sp
    5ae4:	             move.l d0,288(sp)
	if (! fp) return FALSE;
    5ae8:	         /-- bne.s 5af0 <initSludge+0x46>
    5aea:	         |   clr.w d0
    5aec:	/--------|-- bra.w 6218 <initSludge+0x76e>
	if (FGetC (fp)) {
    5af0:	|        \-> move.l 288(sp),284(sp)
    5af6:	|            move.l 1c9d2 <DOSBase>,d0
    5afc:	|            movea.l d0,a6
    5afe:	|            move.l 284(sp),d1
    5b02:	|            jsr -306(a6)
    5b06:	|            move.l d0,280(sp)
    5b0a:	|            move.l 280(sp),d0
    5b0e:	|  /-------- beq.w 5cb8 <initSludge+0x20e>
		numBIFNames = get2bytes (fp);
    5b12:	|  |         move.l 288(sp),-(sp)
    5b16:	|  |         jsr 6bc <get2bytes>
    5b1c:	|  |         addq.l #4,sp
    5b1e:	|  |         move.l d0,1c99e <numBIFNames>
		allBIFNames = AllocVec(numBIFNames,MEMF_ANY);
    5b24:	|  |         move.l 1c99e <numBIFNames>,d0
    5b2a:	|  |         move.l d0,276(sp)
    5b2e:	|  |         clr.l 272(sp)
    5b32:	|  |         move.l 1c9ca <SysBase>,d0
    5b38:	|  |         movea.l d0,a6
    5b3a:	|  |         move.l 276(sp),d0
    5b3e:	|  |         move.l 272(sp),d1
    5b42:	|  |         jsr -684(a6)
    5b46:	|  |         move.l d0,268(sp)
    5b4a:	|  |         move.l 268(sp),d0
    5b4e:	|  |         move.l d0,1c95a <allBIFNames>
		if(allBIFNames == 0) return FALSE;
    5b54:	|  |         move.l 1c95a <allBIFNames>,d0
    5b5a:	|  |     /-- bne.s 5b62 <initSludge+0xb8>
    5b5c:	|  |     |   clr.w d0
    5b5e:	+--|-----|-- bra.w 6218 <initSludge+0x76e>
		for (int fn = 0; fn < numBIFNames; fn ++) {
    5b62:	|  |     \-> clr.l 304(sp)
    5b66:	|  |     /-- bra.s 5b8c <initSludge+0xe2>
			allBIFNames[fn] = (char *) readString (fp);
    5b68:	|  |  /--|-> move.l 1c95a <allBIFNames>,d1
    5b6e:	|  |  |  |   move.l 304(sp),d0
    5b72:	|  |  |  |   add.l d0,d0
    5b74:	|  |  |  |   add.l d0,d0
    5b76:	|  |  |  |   movea.l d1,a2
    5b78:	|  |  |  |   adda.l d0,a2
    5b7a:	|  |  |  |   move.l 288(sp),-(sp)
    5b7e:	|  |  |  |   jsr b02 <readString>
    5b84:	|  |  |  |   addq.l #4,sp
    5b86:	|  |  |  |   move.l d0,(a2)
		for (int fn = 0; fn < numBIFNames; fn ++) {
    5b88:	|  |  |  |   addq.l #1,304(sp)
    5b8c:	|  |  |  \-> move.l 1c99e <numBIFNames>,d0
    5b92:	|  |  |      cmp.l 304(sp),d0
    5b96:	|  |  \----- bgt.s 5b68 <initSludge+0xbe>
		}
		numUserFunc = get2bytes (fp);
    5b98:	|  |         move.l 288(sp),-(sp)
    5b9c:	|  |         jsr 6bc <get2bytes>
    5ba2:	|  |         addq.l #4,sp
    5ba4:	|  |         move.l d0,1c9aa <numUserFunc>
		allUserFunc = AllocVec(numUserFunc,MEMF_ANY);
    5baa:	|  |         move.l 1c9aa <numUserFunc>,d0
    5bb0:	|  |         move.l d0,264(sp)
    5bb4:	|  |         clr.l 260(sp)
    5bb8:	|  |         move.l 1c9ca <SysBase>,d0
    5bbe:	|  |         movea.l d0,a6
    5bc0:	|  |         move.l 264(sp),d0
    5bc4:	|  |         move.l 260(sp),d1
    5bc8:	|  |         jsr -684(a6)
    5bcc:	|  |         move.l d0,256(sp)
    5bd0:	|  |         move.l 256(sp),d0
    5bd4:	|  |         move.l d0,1c966 <allUserFunc>
		if( allUserFunc == 0) return FALSE;
    5bda:	|  |         move.l 1c966 <allUserFunc>,d0
    5be0:	|  |     /-- bne.s 5be8 <initSludge+0x13e>
    5be2:	|  |     |   clr.w d0
    5be4:	+--|-----|-- bra.w 6218 <initSludge+0x76e>

		for (int fn = 0; fn < numUserFunc; fn ++) {
    5be8:	|  |     \-> clr.l 300(sp)
    5bec:	|  |     /-- bra.s 5c12 <initSludge+0x168>
			allUserFunc[fn] =   (char *) readString (fp);
    5bee:	|  |  /--|-> move.l 1c966 <allUserFunc>,d1
    5bf4:	|  |  |  |   move.l 300(sp),d0
    5bf8:	|  |  |  |   add.l d0,d0
    5bfa:	|  |  |  |   add.l d0,d0
    5bfc:	|  |  |  |   movea.l d1,a2
    5bfe:	|  |  |  |   adda.l d0,a2
    5c00:	|  |  |  |   move.l 288(sp),-(sp)
    5c04:	|  |  |  |   jsr b02 <readString>
    5c0a:	|  |  |  |   addq.l #4,sp
    5c0c:	|  |  |  |   move.l d0,(a2)
		for (int fn = 0; fn < numUserFunc; fn ++) {
    5c0e:	|  |  |  |   addq.l #1,300(sp)
    5c12:	|  |  |  \-> move.l 1c9aa <numUserFunc>,d0
    5c18:	|  |  |      cmp.l 300(sp),d0
    5c1c:	|  |  \----- bgt.s 5bee <initSludge+0x144>
		}
		if (gameVersion >= VERSION(1,3)) {
    5c1e:	|  |         move.l 1c974 <gameVersion>,d0
    5c24:	|  |         cmpi.l #258,d0
    5c2a:	|  +-------- ble.w 5cb8 <initSludge+0x20e>
			numResourceNames = get2bytes (fp);
    5c2e:	|  |         move.l 288(sp),-(sp)
    5c32:	|  |         jsr 6bc <get2bytes>
    5c38:	|  |         addq.l #4,sp
    5c3a:	|  |         move.l d0,1c9a6 <numResourceNames>
			allResourceNames = AllocVec(sizeof(char *) * numResourceNames,MEMF_ANY);
    5c40:	|  |         move.l 1c9a6 <numResourceNames>,d0
    5c46:	|  |         add.l d0,d0
    5c48:	|  |         add.l d0,d0
    5c4a:	|  |         move.l d0,252(sp)
    5c4e:	|  |         clr.l 248(sp)
    5c52:	|  |         move.l 1c9ca <SysBase>,d0
    5c58:	|  |         movea.l d0,a6
    5c5a:	|  |         move.l 252(sp),d0
    5c5e:	|  |         move.l 248(sp),d1
    5c62:	|  |         jsr -684(a6)
    5c66:	|  |         move.l d0,244(sp)
    5c6a:	|  |         move.l 244(sp),d0
    5c6e:	|  |         move.l d0,1c95e <allResourceNames>
			if(allResourceNames == 0) return FALSE;
    5c74:	|  |         move.l 1c95e <allResourceNames>,d0
    5c7a:	|  |     /-- bne.s 5c82 <initSludge+0x1d8>
    5c7c:	|  |     |   clr.w d0
    5c7e:	+--|-----|-- bra.w 6218 <initSludge+0x76e>

			for (int fn = 0; fn < numResourceNames; fn ++) {
    5c82:	|  |     \-> clr.l 296(sp)
    5c86:	|  |     /-- bra.s 5cac <initSludge+0x202>
				allResourceNames[fn] =  (char *) readString (fp);
    5c88:	|  |  /--|-> move.l 1c95e <allResourceNames>,d1
    5c8e:	|  |  |  |   move.l 296(sp),d0
    5c92:	|  |  |  |   add.l d0,d0
    5c94:	|  |  |  |   add.l d0,d0
    5c96:	|  |  |  |   movea.l d1,a2
    5c98:	|  |  |  |   adda.l d0,a2
    5c9a:	|  |  |  |   move.l 288(sp),-(sp)
    5c9e:	|  |  |  |   jsr b02 <readString>
    5ca4:	|  |  |  |   addq.l #4,sp
    5ca6:	|  |  |  |   move.l d0,(a2)
			for (int fn = 0; fn < numResourceNames; fn ++) {
    5ca8:	|  |  |  |   addq.l #1,296(sp)
    5cac:	|  |  |  \-> move.l 1c9a6 <numResourceNames>,d0
    5cb2:	|  |  |      cmp.l 296(sp),d0
    5cb6:	|  |  \----- bgt.s 5c88 <initSludge+0x1de>
			}
		}
	}

	input.mouseX = 129;
    5cb8:	|  \-------> move.l #129,1c986 <input+0xa>
	input.mouseY = 100;
    5cc2:	|            moveq #100,d0
    5cc4:	|            move.l d0,1c98a <input+0xe>
	winWidth = get2bytes (fp);
    5cca:	|            move.l 288(sp),-(sp)
    5cce:	|            jsr 6bc <get2bytes>
    5cd4:	|            addq.l #4,sp
    5cd6:	|            move.l d0,1c91e <winWidth>
	winHeight = get2bytes (fp);
    5cdc:	|            move.l 288(sp),-(sp)
    5ce0:	|            jsr 6bc <get2bytes>
    5ce6:	|            addq.l #4,sp
    5ce8:	|            move.l d0,1c922 <winHeight>
	specialSettings = FGetC (fp);
    5cee:	|            move.l 288(sp),240(sp)
    5cf4:	|            move.l 1c9d2 <DOSBase>,d0
    5cfa:	|            movea.l d0,a6
    5cfc:	|            move.l 240(sp),d1
    5d00:	|            jsr -306(a6)
    5d04:	|            move.l d0,236(sp)
    5d08:	|            move.l 236(sp),d0
    5d0c:	|            move.l d0,1c9ae <specialSettings>

	desiredfps = 1000/FGetC (fp);
    5d12:	|            move.l 288(sp),232(sp)
    5d18:	|            move.l 1c9d2 <DOSBase>,d0
    5d1e:	|            movea.l d0,a6
    5d20:	|            move.l 232(sp),d1
    5d24:	|            jsr -306(a6)
    5d28:	|            move.l d0,228(sp)
    5d2c:	|            move.l 228(sp),d0
    5d30:	|            move.l d0,-(sp)
    5d32:	|            pea 3e8 <encodeFilename+0xea>
    5d36:	|            jsr 17c86 <__divsi3>
    5d3c:	|            addq.l #8,sp
    5d3e:	|            move.l d0,1c358 <desiredfps>

	readString(fp); //Need to keep reading to stay on track. But the comented line below looks wrong.
    5d44:	|            move.l 288(sp),-(sp)
    5d48:	|            jsr b02 <readString>
    5d4e:	|            addq.l #4,sp
	//FreeVec(readString (fp));

	ULONG blocks_read = FRead( fp, &fileTime, sizeof (FILETIME), 1 ); 
    5d50:	|            move.l 288(sp),224(sp)
    5d56:	|            move.l #117100,220(sp)
    5d5e:	|            moveq #8,d1
    5d60:	|            move.l d1,216(sp)
    5d64:	|            moveq #1,d0
    5d66:	|            move.l d0,212(sp)
    5d6a:	|            move.l 1c9d2 <DOSBase>,d0
    5d70:	|            movea.l d0,a6
    5d72:	|            move.l 224(sp),d1
    5d76:	|            move.l 220(sp),d2
    5d7a:	|            move.l 216(sp),d3
    5d7e:	|            move.l 212(sp),d4
    5d82:	|            jsr -324(a6)
    5d86:	|            move.l d0,208(sp)
    5d8a:	|            move.l 208(sp),d0
    5d8e:	|            move.l d0,204(sp)
	if (blocks_read != 1) {
    5d92:	|            moveq #1,d1
    5d94:	|            cmp.l 204(sp),d1
    5d98:	|        /-- beq.s 5da8 <initSludge+0x2fe>
		KPrintF("Reading error in initSludge.\n");
    5d9a:	|        |   pea 189d5 <PutChar+0xcb7>
    5da0:	|        |   jsr 17254 <KPrintF>
    5da6:	|        |   addq.l #4,sp
	}

	char * dataFol = (gameVersion >= VERSION(1,3)) ? readString(fp) : joinStrings ("", "");
    5da8:	|        \-> move.l 1c974 <gameVersion>,d0
    5dae:	|            cmpi.l #258,d0
    5db4:	|        /-- ble.s 5dc4 <initSludge+0x31a>
    5db6:	|        |   move.l 288(sp),-(sp)
    5dba:	|        |   jsr b02 <readString>
    5dc0:	|        |   addq.l #4,sp
    5dc2:	|     /--|-- bra.s 5dd8 <initSludge+0x32e>
    5dc4:	|     |  \-> pea 189f3 <PutChar+0xcd5>
    5dca:	|     |      pea 189f3 <PutChar+0xcd5>
    5dd0:	|     |      jsr 13d20 <joinStrings>
    5dd6:	|     |      addq.l #8,sp
    5dd8:	|     \----> move.l d0,200(sp)

	gameSettings.numLanguages = (gameVersion >= VERSION(1,3)) ? (FGetC (fp)) : 0;
    5ddc:	|            move.l 1c974 <gameVersion>,d0
    5de2:	|            cmpi.l #258,d0
    5de8:	|     /----- ble.s 5e0a <initSludge+0x360>
    5dea:	|     |      move.l 288(sp),196(sp)
    5df0:	|     |      move.l 1c9d2 <DOSBase>,d0
    5df6:	|     |      movea.l d0,a6
    5df8:	|     |      move.l 196(sp),d1
    5dfc:	|     |      jsr -306(a6)
    5e00:	|     |      move.l d0,192(sp)
    5e04:	|     |      move.l 192(sp),d0
    5e08:	|     |  /-- bra.s 5e0c <initSludge+0x362>
    5e0a:	|     \--|-> moveq #0,d0
    5e0c:	|        \-> move.l d0,1caaa <gameSettings+0x4>
	makeLanguageTable (fp);
    5e12:	|            move.l 288(sp),-(sp)
    5e16:	|            jsr 136d6 <makeLanguageTable>
    5e1c:	|            addq.l #4,sp

	if (gameVersion >= VERSION(1,6))
    5e1e:	|            move.l 1c974 <gameVersion>,d0
    5e24:	|            cmpi.l #261,d0
    5e2a:	|        /-- ble.s 5e78 <initSludge+0x3ce>
	{
		FGetC(fp);
    5e2c:	|        |   move.l 288(sp),188(sp)
    5e32:	|        |   move.l 1c9d2 <DOSBase>,d0
    5e38:	|        |   movea.l d0,a6
    5e3a:	|        |   move.l 188(sp),d1
    5e3e:	|        |   jsr -306(a6)
    5e42:	|        |   move.l d0,184(sp)
		// aaLoad
		FGetC (fp);
    5e46:	|        |   move.l 288(sp),180(sp)
    5e4c:	|        |   move.l 1c9d2 <DOSBase>,d0
    5e52:	|        |   movea.l d0,a6
    5e54:	|        |   move.l 180(sp),d1
    5e58:	|        |   jsr -306(a6)
    5e5c:	|        |   move.l d0,176(sp)
		getFloat (fp);
    5e60:	|        |   move.l 288(sp),-(sp)
    5e64:	|        |   jsr 7d8 <getFloat>
    5e6a:	|        |   addq.l #4,sp
		getFloat (fp);
    5e6c:	|        |   move.l 288(sp),-(sp)
    5e70:	|        |   jsr 7d8 <getFloat>
    5e76:	|        |   addq.l #4,sp
	}

	char * checker = readString (fp);
    5e78:	|        \-> move.l 288(sp),-(sp)
    5e7c:	|            jsr b02 <readString>
    5e82:	|            addq.l #4,sp
    5e84:	|            move.l d0,172(sp)

	if (strcmp (checker, "okSoFar")) {
    5e88:	|            pea 189f4 <PutChar+0xcd6>
    5e8e:	|            move.l 176(sp),-(sp)
    5e92:	|            jsr 13ca0 <strcmp>
    5e98:	|            addq.l #8,sp
    5e9a:	|            tst.l d0
    5e9c:	|        /-- beq.s 5ea4 <initSludge+0x3fa>
		return FALSE;
    5e9e:	|        |   clr.w d0
    5ea0:	+--------|-- bra.w 6218 <initSludge+0x76e>
	}
	FreeVec( checker);
    5ea4:	|        \-> move.l 172(sp),168(sp)
    5eaa:	|            move.l 1c9ca <SysBase>,d0
    5eb0:	|            movea.l d0,a6
    5eb2:	|            movea.l 168(sp),a1
    5eb6:	|            jsr -690(a6)
	checker = NULL;
    5eba:	|            clr.l 172(sp)

    unsigned char customIconLogo = FGetC (fp);
    5ebe:	|            move.l 288(sp),164(sp)
    5ec4:	|            move.l 1c9d2 <DOSBase>,d0
    5eca:	|            movea.l d0,a6
    5ecc:	|            move.l 164(sp),d1
    5ed0:	|            jsr -306(a6)
    5ed4:	|            move.l d0,160(sp)
    5ed8:	|            move.l 160(sp),d0
    5edc:	|            move.b d0,159(sp)

	if (customIconLogo & 1) {
    5ee0:	|            moveq #0,d0
    5ee2:	|            move.b 159(sp),d0
    5ee6:	|            moveq #1,d1
    5ee8:	|            and.l d1,d0
    5eea:	|        /-- beq.s 5f42 <initSludge+0x498>
		// There is an icon - read it!
		Write(Output(), (APTR)"initsludge:Game Icon not supported on this plattform.\n", 54);
    5eec:	|        |   move.l 1c9d2 <DOSBase>,d0
    5ef2:	|        |   movea.l d0,a6
    5ef4:	|        |   jsr -60(a6)
    5ef8:	|        |   move.l d0,38(sp)
    5efc:	|        |   move.l 38(sp),d0
    5f00:	|        |   move.l d0,34(sp)
    5f04:	|        |   move.l #100860,30(sp)
    5f0c:	|        |   moveq #54,d0
    5f0e:	|        |   move.l d0,26(sp)
    5f12:	|        |   move.l 1c9d2 <DOSBase>,d0
    5f18:	|        |   movea.l d0,a6
    5f1a:	|        |   move.l 34(sp),d1
    5f1e:	|        |   move.l 30(sp),d2
    5f22:	|        |   move.l 26(sp),d3
    5f26:	|        |   jsr -48(a6)
    5f2a:	|        |   move.l d0,22(sp)
		KPrintF("initsludge: Game Icon not supported on this plattform.\n");
    5f2e:	|        |   pea 18a33 <PutChar+0xd15>
    5f34:	|        |   jsr 17254 <KPrintF>
    5f3a:	|        |   addq.l #4,sp
		return FALSE;
    5f3c:	|        |   clr.w d0
    5f3e:	+--------|-- bra.w 6218 <initSludge+0x76e>
	}

	numGlobals = get2bytes (fp);
    5f42:	|        \-> move.l 288(sp),-(sp)
    5f46:	|            jsr 6bc <get2bytes>
    5f4c:	|            addq.l #4,sp
    5f4e:	|            move.l d0,1c9a2 <numGlobals>

	globalVars = AllocVec( sizeof(struct variable) * numGlobals,MEMF_ANY);
    5f54:	|            move.l 1c9a2 <numGlobals>,d0
    5f5a:	|            lsl.l #3,d0
    5f5c:	|            move.l d0,154(sp)
    5f60:	|            clr.l 150(sp)
    5f64:	|            move.l 1c9ca <SysBase>,d0
    5f6a:	|            movea.l d0,a6
    5f6c:	|            move.l 154(sp),d0
    5f70:	|            move.l 150(sp),d1
    5f74:	|            jsr -684(a6)
    5f78:	|            move.l d0,146(sp)
    5f7c:	|            move.l 146(sp),d0
    5f80:	|            move.l d0,1c978 <globalVars>
	if(globalVars == 0 && numGlobals > 0) {
    5f86:	|            move.l 1c978 <globalVars>,d0
    5f8c:	|        /-- bne.s 5faa <initSludge+0x500>
    5f8e:	|        |   move.l 1c9a2 <numGlobals>,d0
    5f94:	|        +-- ble.s 5faa <initSludge+0x500>
		KPrintF("initsludge: Cannot allocate memory for globalvars\n");
    5f96:	|        |   pea 18a6b <PutChar+0xd4d>
    5f9c:	|        |   jsr 17254 <KPrintF>
    5fa2:	|        |   addq.l #4,sp
		return FALSE;
    5fa4:	|        |   clr.w d0
    5fa6:	+--------|-- bra.w 6218 <initSludge+0x76e>
	}		 
	for (a = 0; a < numGlobals; a ++) initVarNew (globalVars[a]);
    5faa:	|        \-> clr.l 308(sp)
    5fae:	|        /-- bra.s 5fc6 <initSludge+0x51c>
    5fb0:	|     /--|-> move.l 1c978 <globalVars>,d1
    5fb6:	|     |  |   move.l 308(sp),d0
    5fba:	|     |  |   lsl.l #3,d0
    5fbc:	|     |  |   movea.l d1,a0
    5fbe:	|     |  |   adda.l d0,a0
    5fc0:	|     |  |   clr.l (a0)
    5fc2:	|     |  |   addq.l #1,308(sp)
    5fc6:	|     |  \-> move.l 1c9a2 <numGlobals>,d0
    5fcc:	|     |      cmp.l 308(sp),d0
    5fd0:	|     \----- bgt.s 5fb0 <initSludge+0x506>

	setFileIndices (fp, gameSettings.numLanguages, 0);
    5fd2:	|            move.l 1caaa <gameSettings+0x4>,d0
    5fd8:	|            clr.l -(sp)
    5fda:	|            move.l d0,-(sp)
    5fdc:	|            move.l 296(sp),-(sp)
    5fe0:	|            jsr 6fe6 <setFileIndices>
    5fe6:	|            lea 12(sp),sp

	char * gameNameOrig = getNumberedString(1);	
    5fea:	|            pea 1 <_start+0x1>
    5fee:	|            jsr 6ca0 <getNumberedString>
    5ff4:	|            addq.l #4,sp
    5ff6:	|            move.l d0,142(sp)
	char * gameName = encodeFilename (gameNameOrig);
    5ffa:	|            move.l 142(sp),-(sp)
    5ffe:	|            jsr 2fe <encodeFilename>
    6004:	|            addq.l #4,sp
    6006:	|            move.l d0,138(sp)

	FreeVec(gameNameOrig);
    600a:	|            move.l 142(sp),134(sp)
    6010:	|            move.l 1c9ca <SysBase>,d0
    6016:	|            movea.l d0,a6
    6018:	|            movea.l 134(sp),a1
    601c:	|            jsr -690(a6)

	BPTR lock = CreateDir( gameName );
    6020:	|            move.l 138(sp),130(sp)
    6026:	|            move.l 1c9d2 <DOSBase>,d0
    602c:	|            movea.l d0,a6
    602e:	|            move.l 130(sp),d1
    6032:	|            jsr -120(a6)
    6036:	|            move.l d0,126(sp)
    603a:	|            move.l 126(sp),d0
    603e:	|            move.l d0,292(sp)
	if(lock == 0) {
    6042:	|        /-- bne.s 6070 <initSludge+0x5c6>
		//Directory does already exist
		lock = Lock(gameName, ACCESS_READ);
    6044:	|        |   move.l 138(sp),122(sp)
    604a:	|        |   moveq #-2,d1
    604c:	|        |   move.l d1,118(sp)
    6050:	|        |   move.l 1c9d2 <DOSBase>,d0
    6056:	|        |   movea.l d0,a6
    6058:	|        |   move.l 122(sp),d1
    605c:	|        |   move.l 118(sp),d2
    6060:	|        |   jsr -84(a6)
    6064:	|        |   move.l d0,114(sp)
    6068:	|        |   move.l 114(sp),d0
    606c:	|        |   move.l d0,292(sp)
	}

	if (!CurrentDir(lock)) {
    6070:	|        \-> move.l 292(sp),110(sp)
    6076:	|            move.l 1c9d2 <DOSBase>,d0
    607c:	|            movea.l d0,a6
    607e:	|            move.l 110(sp),d1
    6082:	|            jsr -126(a6)
    6086:	|            move.l d0,106(sp)
    608a:	|            move.l 106(sp),d0
    608e:	|        /-- bne.s 60ea <initSludge+0x640>
		KPrintF("initsludge: Failed changing to directory %s\n", gameName);
    6090:	|        |   move.l 138(sp),-(sp)
    6094:	|        |   pea 18a9e <PutChar+0xd80>
    609a:	|        |   jsr 17254 <KPrintF>
    60a0:	|        |   addq.l #8,sp
		Write(Output(), (APTR)"initsludge:Failed changing to directory\n", 40);
    60a2:	|        |   move.l 1c9d2 <DOSBase>,d0
    60a8:	|        |   movea.l d0,a6
    60aa:	|        |   jsr -60(a6)
    60ae:	|        |   move.l d0,58(sp)
    60b2:	|        |   move.l 58(sp),d0
    60b6:	|        |   move.l d0,54(sp)
    60ba:	|        |   move.l #101067,50(sp)
    60c2:	|        |   moveq #40,d0
    60c4:	|        |   move.l d0,46(sp)
    60c8:	|        |   move.l 1c9d2 <DOSBase>,d0
    60ce:	|        |   movea.l d0,a6
    60d0:	|        |   move.l 54(sp),d1
    60d4:	|        |   move.l 50(sp),d2
    60d8:	|        |   move.l 46(sp),d3
    60dc:	|        |   jsr -48(a6)
    60e0:	|        |   move.l d0,42(sp)
		return FALSE;
    60e4:	|        |   clr.w d0
    60e6:	+--------|-- bra.w 6218 <initSludge+0x76e>
	}

	FreeVec(gameName);
    60ea:	|        \-> move.l 138(sp),102(sp)
    60f0:	|            move.l 1c9ca <SysBase>,d0
    60f6:	|            movea.l d0,a6
    60f8:	|            movea.l 102(sp),a1
    60fc:	|            jsr -690(a6)

	readIniFile (filename);
    6100:	|            move.l 316(sp),-(sp)
    6104:	|            jsr 1380a <readIniFile>
    610a:	|            addq.l #4,sp

	// Now set file indices properly to the chosen language.
	languageNum = getLanguageForFileB ();
    610c:	|            jsr 135dc <getLanguageForFileB>
    6112:	|            move.l d0,1c346 <languageNum>
	if (languageNum < 0) KPrintF("Can't find the translation data specified!");
    6118:	|            move.l 1c346 <languageNum>,d0
    611e:	|        /-- bpl.s 612e <initSludge+0x684>
    6120:	|        |   pea 18af4 <PutChar+0xdd6>
    6126:	|        |   jsr 17254 <KPrintF>
    612c:	|        |   addq.l #4,sp
	setFileIndices (NULL, gameSettings.numLanguages, languageNum);
    612e:	|        \-> move.l 1c346 <languageNum>,d0
    6134:	|            move.l d0,d1
    6136:	|            move.l 1caaa <gameSettings+0x4>,d0
    613c:	|            move.l d1,-(sp)
    613e:	|            move.l d0,-(sp)
    6140:	|            clr.l -(sp)
    6142:	|            jsr 6fe6 <setFileIndices>
    6148:	|            lea 12(sp),sp

	if (dataFol[0]) {
    614c:	|            movea.l 200(sp),a0
    6150:	|            move.b (a0),d0
    6152:	|     /----- beq.w 61fc <initSludge+0x752>
		char *dataFolder = encodeFilename(dataFol);
    6156:	|     |      move.l 200(sp),-(sp)
    615a:	|     |      jsr 2fe <encodeFilename>
    6160:	|     |      addq.l #4,sp
    6162:	|     |      move.l d0,98(sp)
		lock = CreateDir( dataFolder );
    6166:	|     |      move.l 98(sp),94(sp)
    616c:	|     |      move.l 1c9d2 <DOSBase>,d0
    6172:	|     |      movea.l d0,a6
    6174:	|     |      move.l 94(sp),d1
    6178:	|     |      jsr -120(a6)
    617c:	|     |      move.l d0,90(sp)
    6180:	|     |      move.l 90(sp),d0
    6184:	|     |      move.l d0,292(sp)
		if(lock == 0) {
    6188:	|     |  /-- bne.s 61b6 <initSludge+0x70c>
			//Directory does already exist
			lock = Lock(dataFolder, ACCESS_READ);		
    618a:	|     |  |   move.l 98(sp),86(sp)
    6190:	|     |  |   moveq #-2,d1
    6192:	|     |  |   move.l d1,82(sp)
    6196:	|     |  |   move.l 1c9d2 <DOSBase>,d0
    619c:	|     |  |   movea.l d0,a6
    619e:	|     |  |   move.l 86(sp),d1
    61a2:	|     |  |   move.l 82(sp),d2
    61a6:	|     |  |   jsr -84(a6)
    61aa:	|     |  |   move.l d0,78(sp)
    61ae:	|     |  |   move.l 78(sp),d0
    61b2:	|     |  |   move.l d0,292(sp)
		}


		if (!CurrentDir(lock)) {
    61b6:	|     |  \-> move.l 292(sp),74(sp)
    61bc:	|     |      move.l 1c9d2 <DOSBase>,d0
    61c2:	|     |      movea.l d0,a6
    61c4:	|     |      move.l 74(sp),d1
    61c8:	|     |      jsr -126(a6)
    61cc:	|     |      move.l d0,70(sp)
    61d0:	|     |      move.l 70(sp),d0
    61d4:	|     |  /-- bne.s 61e6 <initSludge+0x73c>
			(Output(), (APTR)"initsludge:This game's data folder is inaccessible!\n", 52);
    61d6:	|     |  |   move.l 1c9d2 <DOSBase>,d0
    61dc:	|     |  |   movea.l d0,a6
    61de:	|     |  |   jsr -60(a6)
    61e2:	|     |  |   move.l d0,66(sp)
		}
		FreeVec(dataFolder);
    61e6:	|     |  \-> move.l 98(sp),62(sp)
    61ec:	|     |      move.l 1c9ca <SysBase>,d0
    61f2:	|     |      movea.l d0,a6
    61f4:	|     |      movea.l 62(sp),a1
    61f8:	|     |      jsr -690(a6)
	}

 	positionStatus (10, winHeight - 15);
    61fc:	|     \----> movea.l 1c922 <winHeight>,a0
    6202:	|            lea -15(a0),a0
    6206:	|            move.l a0,d0
    6208:	|            move.l d0,-(sp)
    620a:	|            pea a <_start+0xa>
    620e:	|            jsr 7a26 <positionStatus>
    6214:	|            addq.l #8,sp

	return TRUE;
    6216:	|            moveq #1,d0
}
    6218:	\----------> movem.l (sp)+,d2-d4/a2/a6
    621c:	             lea 292(sp),sp
    6220:	             rts

00006222 <killSpeechTimers>:

void killSpeechTimers () {
    6222:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    6224:	          move.l 1c962 <allRunningFunctions>,(sp)

	while (thisFunction) {
    622a:	   /----- bra.s 6256 <killSpeechTimers+0x34>
		if (thisFunction -> freezerLevel == 0 && thisFunction -> isSpeech && thisFunction -> timeLeft) {
    622c:	/--|----> movea.l (sp),a0
    622e:	|  |      move.b 56(a0),d0
    6232:	|  |  /-- bne.s 6250 <killSpeechTimers+0x2e>
    6234:	|  |  |   movea.l (sp),a0
    6236:	|  |  |   move.w 50(a0),d0
    623a:	|  |  +-- beq.s 6250 <killSpeechTimers+0x2e>
    623c:	|  |  |   movea.l (sp),a0
    623e:	|  |  |   move.l 12(a0),d0
    6242:	|  |  +-- beq.s 6250 <killSpeechTimers+0x2e>
			thisFunction -> timeLeft = 0;
    6244:	|  |  |   movea.l (sp),a0
    6246:	|  |  |   clr.l 12(a0)
			thisFunction -> isSpeech = FALSE;
    624a:	|  |  |   movea.l (sp),a0
    624c:	|  |  |   clr.w 50(a0)
		}
		thisFunction = thisFunction -> next;
    6250:	|  |  \-> movea.l (sp),a0
    6252:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    6256:	|  \----> tst.l (sp)
    6258:	\-------- bne.s 622c <killSpeechTimers+0xa>
	}

	killAllSpeech ();
    625a:	          jsr 7f64 <killAllSpeech>
}
    6260:	          nop
    6262:	          addq.l #4,sp
    6264:	          rts

00006266 <loadFunctionCode>:

BOOL loadFunctionCode (struct loadedFunction * newFunc) {
    6266:	             lea -52(sp),sp
    626a:	             move.l a6,-(sp)
	unsigned int numLines, numLinesRead;
	int a;

	if (! openSubSlice (newFunc -> originalNumber)) return FALSE;
    626c:	             movea.l 60(sp),a0
    6270:	             move.l (a0),d0
    6272:	             move.l d0,-(sp)
    6274:	             jsr 6f26 <openSubSlice>
    627a:	             addq.l #4,sp
    627c:	             tst.w d0
    627e:	         /-- bne.s 6286 <loadFunctionCode+0x20>
    6280:	         |   clr.w d0
    6282:	/--------|-- bra.w 6450 <loadFunctionCode+0x1ea>
	

	newFunc-> unfreezable	= FGetC (bigDataFile);
    6286:	|        \-> move.l 1c9b2 <bigDataFile>,44(sp)
    628e:	|            move.l 1c9d2 <DOSBase>,d0
    6294:	|            movea.l d0,a6
    6296:	|            move.l 44(sp),d1
    629a:	|            jsr -306(a6)
    629e:	|            move.l d0,40(sp)
    62a2:	|            move.l 40(sp),d0
    62a6:	|            move.l d0,d0
    62a8:	|            movea.l 60(sp),a0
    62ac:	|            move.w d0,52(a0)
	numLines				= get2bytes (bigDataFile);
    62b0:	|            move.l 1c9b2 <bigDataFile>,d0
    62b6:	|            move.l d0,-(sp)
    62b8:	|            jsr 6bc <get2bytes>
    62be:	|            addq.l #4,sp
    62c0:	|            move.l d0,36(sp)
	newFunc -> numArgs		= get2bytes (bigDataFile);
    62c4:	|            move.l 1c9b2 <bigDataFile>,d0
    62ca:	|            move.l d0,-(sp)
    62cc:	|            jsr 6bc <get2bytes>
    62d2:	|            addq.l #4,sp
    62d4:	|            movea.l 60(sp),a0
    62d8:	|            move.l d0,16(a0)
	newFunc -> numLocals	= get2bytes (bigDataFile);
    62dc:	|            move.l 1c9b2 <bigDataFile>,d0
    62e2:	|            move.l d0,-(sp)
    62e4:	|            jsr 6bc <get2bytes>
    62ea:	|            addq.l #4,sp
    62ec:	|            movea.l 60(sp),a0
    62f0:	|            move.l d0,8(a0)
	newFunc -> compiledLines = AllocVec( sizeof(struct lineOfCode) * numLines,MEMF_ANY);
    62f4:	|            move.l 36(sp),d0
    62f8:	|            lsl.l #3,d0
    62fa:	|            move.l d0,32(sp)
    62fe:	|            clr.l 28(sp)
    6302:	|            move.l 1c9ca <SysBase>,d0
    6308:	|            movea.l d0,a6
    630a:	|            move.l 32(sp),d0
    630e:	|            move.l 28(sp),d1
    6312:	|            jsr -684(a6)
    6316:	|            move.l d0,24(sp)
    631a:	|            move.l 24(sp),d0
    631e:	|            movea.l 60(sp),a0
    6322:	|            move.l d0,4(a0)
	if (! newFunc -> compiledLines) {
    6326:	|            movea.l 60(sp),a0
    632a:	|            move.l 4(a0),d0
    632e:	|        /-- bne.s 6344 <loadFunctionCode+0xde>
		KPrintF("loadFunctionCode: cannot allocate memory");
    6330:	|        |   pea 18b1f <PutChar+0xe01>
    6336:	|        |   jsr 17254 <KPrintF>
    633c:	|        |   addq.l #4,sp
		return FALSE;
    633e:	|        |   clr.w d0
    6340:	+--------|-- bra.w 6450 <loadFunctionCode+0x1ea>
	}

	for (numLinesRead = 0; numLinesRead < numLines; numLinesRead ++) {
    6344:	|        \-> clr.l 52(sp)
    6348:	|        /-- bra.s 63aa <loadFunctionCode+0x144>
		newFunc -> compiledLines[numLinesRead].theCommand = (enum sludgeCommand) FGetC(bigDataFile);
    634a:	|     /--|-> move.l 1c9b2 <bigDataFile>,8(sp)
    6352:	|     |  |   move.l 1c9d2 <DOSBase>,d0
    6358:	|     |  |   movea.l d0,a6
    635a:	|     |  |   move.l 8(sp),d1
    635e:	|     |  |   jsr -306(a6)
    6362:	|     |  |   move.l d0,4(sp)
    6366:	|     |  |   move.l 4(sp),d1
    636a:	|     |  |   movea.l 60(sp),a0
    636e:	|     |  |   movea.l 4(a0),a0
    6372:	|     |  |   move.l 52(sp),d0
    6376:	|     |  |   lsl.l #3,d0
    6378:	|     |  |   adda.l d0,a0
    637a:	|     |  |   move.l d1,d0
    637c:	|     |  |   move.l d0,(a0)
		newFunc -> compiledLines[numLinesRead].param = get2bytes (bigDataFile);
    637e:	|     |  |   move.l 1c9b2 <bigDataFile>,d0
    6384:	|     |  |   move.l d0,-(sp)
    6386:	|     |  |   jsr 6bc <get2bytes>
    638c:	|     |  |   addq.l #4,sp
    638e:	|     |  |   move.l d0,d1
    6390:	|     |  |   movea.l 60(sp),a0
    6394:	|     |  |   movea.l 4(a0),a0
    6398:	|     |  |   move.l 52(sp),d0
    639c:	|     |  |   lsl.l #3,d0
    639e:	|     |  |   adda.l d0,a0
    63a0:	|     |  |   move.l d1,d0
    63a2:	|     |  |   move.l d0,4(a0)
	for (numLinesRead = 0; numLinesRead < numLines; numLinesRead ++) {
    63a6:	|     |  |   addq.l #1,52(sp)
    63aa:	|     |  \-> move.l 52(sp),d0
    63ae:	|     |      cmp.l 36(sp),d0
    63b2:	|     \----- bcs.s 634a <loadFunctionCode+0xe4>
	}

	finishAccess ();
    63b4:	|            jsr 6c96 <finishAccess>

	// Now we need to reserve memory for the local variables
	if(newFunc->numLocals > 0) {
    63ba:	|            movea.l 60(sp),a0
    63be:	|            move.l 8(a0),d0
    63c2:	|  /-------- ble.w 6446 <loadFunctionCode+0x1e0>
		newFunc -> localVars = AllocVec( sizeof(struct variable) * newFunc->numLocals,MEMF_ANY);
    63c6:	|  |         movea.l 60(sp),a0
    63ca:	|  |         move.l 8(a0),d0
    63ce:	|  |         lsl.l #3,d0
    63d0:	|  |         move.l d0,20(sp)
    63d4:	|  |         clr.l 16(sp)
    63d8:	|  |         move.l 1c9ca <SysBase>,d0
    63de:	|  |         movea.l d0,a6
    63e0:	|  |         move.l 20(sp),d0
    63e4:	|  |         move.l 16(sp),d1
    63e8:	|  |         jsr -684(a6)
    63ec:	|  |         move.l d0,12(sp)
    63f0:	|  |         move.l 12(sp),d0
    63f4:	|  |         movea.l 60(sp),a0
    63f8:	|  |         move.l d0,20(a0)
		if (!newFunc -> localVars) {
    63fc:	|  |         movea.l 60(sp),a0
    6400:	|  |         move.l 20(a0),d0
    6404:	|  |     /-- bne.s 6418 <loadFunctionCode+0x1b2>
			KPrintF("loadFunctionCode: cannot allocate memory");
    6406:	|  |     |   pea 18b1f <PutChar+0xe01>
    640c:	|  |     |   jsr 17254 <KPrintF>
    6412:	|  |     |   addq.l #4,sp
			return FALSE;
    6414:	|  |     |   clr.w d0
    6416:	+--|-----|-- bra.s 6450 <loadFunctionCode+0x1ea>
		}

		for (a = 0; a < newFunc -> numLocals; a ++) {
    6418:	|  |     \-> clr.l 48(sp)
    641c:	|  |     /-- bra.s 6436 <loadFunctionCode+0x1d0>
			initVarNew (newFunc -> localVars[a]);
    641e:	|  |  /--|-> movea.l 60(sp),a0
    6422:	|  |  |  |   move.l 20(a0),d1
    6426:	|  |  |  |   move.l 48(sp),d0
    642a:	|  |  |  |   lsl.l #3,d0
    642c:	|  |  |  |   movea.l d1,a0
    642e:	|  |  |  |   adda.l d0,a0
    6430:	|  |  |  |   clr.l (a0)
		for (a = 0; a < newFunc -> numLocals; a ++) {
    6432:	|  |  |  |   addq.l #1,48(sp)
    6436:	|  |  |  \-> movea.l 60(sp),a0
    643a:	|  |  |      move.l 8(a0),d0
    643e:	|  |  |      cmp.l 48(sp),d0
    6442:	|  |  \----- bgt.s 641e <loadFunctionCode+0x1b8>
    6444:	|  |     /-- bra.s 644e <loadFunctionCode+0x1e8>
		}
	} else
	{
		newFunc->numLocals = NULL;
    6446:	|  \-----|-> movea.l 60(sp),a0
    644a:	|        |   clr.l 8(a0)
	}
	return TRUE;
    644e:	|        \-> moveq #1,d0
}
    6450:	\----------> movea.l (sp)+,a6
    6452:	             lea 52(sp),sp
    6456:	             rts

00006458 <loadHandlers>:

void loadHandlers (BPTR fp) {
    6458:	move.l a2,-(sp)
	currentEvents -> leftMouseFunction		= get2bytes (fp);
    645a:	movea.l 1c342 <currentEvents>,a2
    6460:	move.l 8(sp),-(sp)
    6464:	jsr 6bc <get2bytes>
    646a:	addq.l #4,sp
    646c:	move.l d0,(a2)
	currentEvents -> leftMouseUpFunction	= get2bytes (fp);
    646e:	movea.l 1c342 <currentEvents>,a2
    6474:	move.l 8(sp),-(sp)
    6478:	jsr 6bc <get2bytes>
    647e:	addq.l #4,sp
    6480:	move.l d0,4(a2)
	currentEvents -> rightMouseFunction		= get2bytes (fp);
    6484:	movea.l 1c342 <currentEvents>,a2
    648a:	move.l 8(sp),-(sp)
    648e:	jsr 6bc <get2bytes>
    6494:	addq.l #4,sp
    6496:	move.l d0,8(a2)
	currentEvents -> rightMouseUpFunction	= get2bytes (fp);
    649a:	movea.l 1c342 <currentEvents>,a2
    64a0:	move.l 8(sp),-(sp)
    64a4:	jsr 6bc <get2bytes>
    64aa:	addq.l #4,sp
    64ac:	move.l d0,12(a2)
	currentEvents -> moveMouseFunction		= get2bytes (fp);
    64b0:	movea.l 1c342 <currentEvents>,a2
    64b6:	move.l 8(sp),-(sp)
    64ba:	jsr 6bc <get2bytes>
    64c0:	addq.l #4,sp
    64c2:	move.l d0,16(a2)
	currentEvents -> focusFunction			= get2bytes (fp);
    64c6:	movea.l 1c342 <currentEvents>,a2
    64cc:	move.l 8(sp),-(sp)
    64d0:	jsr 6bc <get2bytes>
    64d6:	addq.l #4,sp
    64d8:	move.l d0,20(a2)
	currentEvents -> spaceFunction			= get2bytes (fp);
    64dc:	movea.l 1c342 <currentEvents>,a2
    64e2:	move.l 8(sp),-(sp)
    64e6:	jsr 6bc <get2bytes>
    64ec:	addq.l #4,sp
    64ee:	move.l d0,24(a2)
}
    64f2:	nop
    64f4:	movea.l (sp)+,a2
    64f6:	rts

000064f8 <openAndVerify>:

BPTR openAndVerify (char * filename, char extra1, char extra2, const char * er, int *fileVersion) {
    64f8:	       lea -312(sp),sp
    64fc:	       movem.l d2-d3/a6,-(sp)
    6500:	       move.l 332(sp),d1
    6504:	       move.l 336(sp),d0
    6508:	       move.b d1,d1
    650a:	       move.b d1,16(sp)
    650e:	       move.b d0,d0
    6510:	       move.b d0,14(sp)
	BPTR fp = Open(filename,MODE_OLDFILE);
    6514:	       move.l 328(sp),318(sp)
    651a:	       move.l #1005,314(sp)
    6522:	       move.l 1c9d2 <DOSBase>,d0
    6528:	       movea.l d0,a6
    652a:	       move.l 318(sp),d1
    652e:	       move.l 314(sp),d2
    6532:	       jsr -30(a6)
    6536:	       move.l d0,310(sp)
    653a:	       move.l 310(sp),d0
    653e:	       move.l d0,306(sp)

	if (! fp) {
    6542:	   /-- bne.s 659e <openAndVerify+0xa6>
		Write(Output(), (APTR)"openAndVerify: Can't open file\n", 31);
    6544:	   |   move.l 1c9d2 <DOSBase>,d0
    654a:	   |   movea.l d0,a6
    654c:	   |   jsr -60(a6)
    6550:	   |   move.l d0,154(sp)
    6554:	   |   move.l 154(sp),d0
    6558:	   |   move.l d0,150(sp)
    655c:	   |   move.l #101192,146(sp)
    6564:	   |   moveq #31,d0
    6566:	   |   move.l d0,142(sp)
    656a:	   |   move.l 1c9d2 <DOSBase>,d0
    6570:	   |   movea.l d0,a6
    6572:	   |   move.l 150(sp),d1
    6576:	   |   move.l 146(sp),d2
    657a:	   |   move.l 142(sp),d3
    657e:	   |   jsr -48(a6)
    6582:	   |   move.l d0,138(sp)
		KPrintF("openAndVerify: Can't open file", filename);
    6586:	   |   move.l 328(sp),-(sp)
    658a:	   |   pea 18b68 <PutChar+0xe4a>
    6590:	   |   jsr 17254 <KPrintF>
    6596:	   |   addq.l #8,sp
		return NULL;
    6598:	   |   moveq #0,d0
    659a:	/--|-- bra.w 685e <openAndVerify+0x366>
	}
	BOOL headerBad = FALSE;
    659e:	|  \-> clr.w 322(sp)
	if (FGetC (fp) != 'S') headerBad = TRUE;
    65a2:	|      move.l 306(sp),302(sp)
    65a8:	|      move.l 1c9d2 <DOSBase>,d0
    65ae:	|      movea.l d0,a6
    65b0:	|      move.l 302(sp),d1
    65b4:	|      jsr -306(a6)
    65b8:	|      move.l d0,298(sp)
    65bc:	|      move.l 298(sp),d0
    65c0:	|      moveq #83,d1
    65c2:	|      cmp.l d0,d1
    65c4:	|  /-- beq.s 65cc <openAndVerify+0xd4>
    65c6:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'L') headerBad = TRUE;
    65cc:	|  \-> move.l 306(sp),294(sp)
    65d2:	|      move.l 1c9d2 <DOSBase>,d0
    65d8:	|      movea.l d0,a6
    65da:	|      move.l 294(sp),d1
    65de:	|      jsr -306(a6)
    65e2:	|      move.l d0,290(sp)
    65e6:	|      move.l 290(sp),d0
    65ea:	|      moveq #76,d1
    65ec:	|      cmp.l d0,d1
    65ee:	|  /-- beq.s 65f6 <openAndVerify+0xfe>
    65f0:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'U') headerBad = TRUE;
    65f6:	|  \-> move.l 306(sp),286(sp)
    65fc:	|      move.l 1c9d2 <DOSBase>,d0
    6602:	|      movea.l d0,a6
    6604:	|      move.l 286(sp),d1
    6608:	|      jsr -306(a6)
    660c:	|      move.l d0,282(sp)
    6610:	|      move.l 282(sp),d0
    6614:	|      moveq #85,d1
    6616:	|      cmp.l d0,d1
    6618:	|  /-- beq.s 6620 <openAndVerify+0x128>
    661a:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'D') headerBad = TRUE;
    6620:	|  \-> move.l 306(sp),278(sp)
    6626:	|      move.l 1c9d2 <DOSBase>,d0
    662c:	|      movea.l d0,a6
    662e:	|      move.l 278(sp),d1
    6632:	|      jsr -306(a6)
    6636:	|      move.l d0,274(sp)
    663a:	|      move.l 274(sp),d0
    663e:	|      moveq #68,d1
    6640:	|      cmp.l d0,d1
    6642:	|  /-- beq.s 664a <openAndVerify+0x152>
    6644:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != extra1) headerBad = TRUE;
    664a:	|  \-> move.l 306(sp),270(sp)
    6650:	|      move.l 1c9d2 <DOSBase>,d0
    6656:	|      movea.l d0,a6
    6658:	|      move.l 270(sp),d1
    665c:	|      jsr -306(a6)
    6660:	|      move.l d0,266(sp)
    6664:	|      move.l 266(sp),d1
    6668:	|      move.b 16(sp),d0
    666c:	|      ext.w d0
    666e:	|      movea.w d0,a0
    6670:	|      cmpa.l d1,a0
    6672:	|  /-- beq.s 667a <openAndVerify+0x182>
    6674:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != extra2) headerBad = TRUE;
    667a:	|  \-> move.l 306(sp),262(sp)
    6680:	|      move.l 1c9d2 <DOSBase>,d0
    6686:	|      movea.l d0,a6
    6688:	|      move.l 262(sp),d1
    668c:	|      jsr -306(a6)
    6690:	|      move.l d0,258(sp)
    6694:	|      move.l 258(sp),d1
    6698:	|      move.b 14(sp),d0
    669c:	|      ext.w d0
    669e:	|      movea.w d0,a0
    66a0:	|      cmpa.l d1,a0
    66a2:	|  /-- beq.s 66aa <openAndVerify+0x1b2>
    66a4:	|  |   move.w #1,322(sp)
	if (headerBad) {
    66aa:	|  \-> tst.w 322(sp)
    66ae:	|  /-- beq.s 6706 <openAndVerify+0x20e>
		Write(Output(), (APTR)"openAndVerify: Bad Header\n", 31);
    66b0:	|  |   move.l 1c9d2 <DOSBase>,d0
    66b6:	|  |   movea.l d0,a6
    66b8:	|  |   jsr -60(a6)
    66bc:	|  |   move.l d0,174(sp)
    66c0:	|  |   move.l 174(sp),d0
    66c4:	|  |   move.l d0,170(sp)
    66c8:	|  |   move.l #101255,166(sp)
    66d0:	|  |   moveq #31,d0
    66d2:	|  |   move.l d0,162(sp)
    66d6:	|  |   move.l 1c9d2 <DOSBase>,d0
    66dc:	|  |   movea.l d0,a6
    66de:	|  |   move.l 170(sp),d1
    66e2:	|  |   move.l 166(sp),d2
    66e6:	|  |   move.l 162(sp),d3
    66ea:	|  |   jsr -48(a6)
    66ee:	|  |   move.l d0,158(sp)
		KPrintF("openAndVerify: Bad Header\n");
    66f2:	|  |   pea 18b87 <PutChar+0xe69>
    66f8:	|  |   jsr 17254 <KPrintF>
    66fe:	|  |   addq.l #4,sp
		return NULL;
    6700:	|  |   moveq #0,d0
    6702:	+--|-- bra.w 685e <openAndVerify+0x366>
	}
	FGetC (fp);
    6706:	|  \-> move.l 306(sp),254(sp)
    670c:	|      move.l 1c9d2 <DOSBase>,d0
    6712:	|      movea.l d0,a6
    6714:	|      move.l 254(sp),d1
    6718:	|      jsr -306(a6)
    671c:	|      move.l d0,250(sp)
	while (FGetC(fp)) {;}
    6720:	|      nop
    6722:	|  /-> move.l 306(sp),246(sp)
    6728:	|  |   move.l 1c9d2 <DOSBase>,d0
    672e:	|  |   movea.l d0,a6
    6730:	|  |   move.l 246(sp),d1
    6734:	|  |   jsr -306(a6)
    6738:	|  |   move.l d0,242(sp)
    673c:	|  |   move.l 242(sp),d0
    6740:	|  \-- bne.s 6722 <openAndVerify+0x22a>

	int majVersion = FGetC (fp);
    6742:	|      move.l 306(sp),238(sp)
    6748:	|      move.l 1c9d2 <DOSBase>,d0
    674e:	|      movea.l d0,a6
    6750:	|      move.l 238(sp),d1
    6754:	|      jsr -306(a6)
    6758:	|      move.l d0,234(sp)
    675c:	|      move.l 234(sp),d0
    6760:	|      move.l d0,230(sp)
	int minVersion = FGetC (fp);
    6764:	|      move.l 306(sp),226(sp)
    676a:	|      move.l 1c9d2 <DOSBase>,d0
    6770:	|      movea.l d0,a6
    6772:	|      move.l 226(sp),d1
    6776:	|      jsr -306(a6)
    677a:	|      move.l d0,222(sp)
    677e:	|      move.l 222(sp),d0
    6782:	|      move.l d0,218(sp)
	*fileVersion = majVersion * 256 + minVersion;
    6786:	|      move.l 230(sp),d0
    678a:	|      lsl.l #8,d0
    678c:	|      add.l 218(sp),d0
    6790:	|      movea.l 344(sp),a0
    6794:	|      move.l d0,(a0)

	char txtVer[120];

	if (*fileVersion > WHOLE_VERSION) {
    6796:	|      movea.l 344(sp),a0
    679a:	|      move.l (a0),d0
    679c:	|      cmpi.l #514,d0
    67a2:	|  /-- ble.s 67f8 <openAndVerify+0x300>
		//sprintf (txtVer, ERROR_VERSION_TOO_LOW_2, majVersion, minVersion);
		Write(Output(), (APTR)ERROR_VERSION_TOO_LOW_1, 100);
    67a4:	|  |   move.l 1c9d2 <DOSBase>,d0
    67aa:	|  |   movea.l d0,a6
    67ac:	|  |   jsr -60(a6)
    67b0:	|  |   move.l d0,194(sp)
    67b4:	|  |   move.l 194(sp),d0
    67b8:	|  |   move.l d0,190(sp)
    67bc:	|  |   move.l #101282,186(sp)
    67c4:	|  |   moveq #100,d1
    67c6:	|  |   move.l d1,182(sp)
    67ca:	|  |   move.l 1c9d2 <DOSBase>,d0
    67d0:	|  |   movea.l d0,a6
    67d2:	|  |   move.l 190(sp),d1
    67d6:	|  |   move.l 186(sp),d2
    67da:	|  |   move.l 182(sp),d3
    67de:	|  |   jsr -48(a6)
    67e2:	|  |   move.l d0,178(sp)
		KPrintF(ERROR_VERSION_TOO_LOW_1);
    67e6:	|  |   pea 18ba2 <PutChar+0xe84>
    67ec:	|  |   jsr 17254 <KPrintF>
    67f2:	|  |   addq.l #4,sp
		return NULL;
    67f4:	|  |   moveq #0,d0
    67f6:	+--|-- bra.s 685e <openAndVerify+0x366>
	} else if (*fileVersion < MINIM_VERSION) {
    67f8:	|  \-> movea.l 344(sp),a0
    67fc:	|      move.l (a0),d0
    67fe:	|      cmpi.l #257,d0
    6804:	|  /-- bgt.s 685a <openAndVerify+0x362>
		Write(Output(), (APTR)ERROR_VERSION_TOO_HIGH_1, 100);
    6806:	|  |   move.l 1c9d2 <DOSBase>,d0
    680c:	|  |   movea.l d0,a6
    680e:	|  |   jsr -60(a6)
    6812:	|  |   move.l d0,214(sp)
    6816:	|  |   move.l 214(sp),d0
    681a:	|  |   move.l d0,210(sp)
    681e:	|  |   move.l #101351,206(sp)
    6826:	|  |   moveq #100,d0
    6828:	|  |   move.l d0,202(sp)
    682c:	|  |   move.l 1c9d2 <DOSBase>,d0
    6832:	|  |   movea.l d0,a6
    6834:	|  |   move.l 210(sp),d1
    6838:	|  |   move.l 206(sp),d2
    683c:	|  |   move.l 202(sp),d3
    6840:	|  |   jsr -48(a6)
    6844:	|  |   move.l d0,198(sp)
		KPrintF(ERROR_VERSION_TOO_HIGH_1);
    6848:	|  |   pea 18be7 <PutChar+0xec9>
    684e:	|  |   jsr 17254 <KPrintF>
    6854:	|  |   addq.l #4,sp
		return NULL;
    6856:	|  |   moveq #0,d0
    6858:	+--|-- bra.s 685e <openAndVerify+0x366>
	}
	return fp;
    685a:	|  \-> move.l 306(sp),d0
}
    685e:	\----> movem.l (sp)+,d2-d3/a6
    6862:	       lea 312(sp),sp
    6866:	       rts

00006868 <pauseFunction>:

void pauseFunction (struct loadedFunction * fun) {
    6868:	          subq.l #4,sp
	struct loadedFunction * * huntAndDestroy = & allRunningFunctions;
    686a:	          move.l #117090,(sp)
	while (* huntAndDestroy) {
    6870:	   /----- bra.s 689c <pauseFunction+0x34>
		if (fun == * huntAndDestroy) {
    6872:	/--|----> movea.l (sp),a0
    6874:	|  |      move.l (a0),d0
    6876:	|  |      cmp.l 8(sp),d0
    687a:	|  |  /-- bne.s 6892 <pauseFunction+0x2a>
			(* huntAndDestroy) = (* huntAndDestroy) -> next;
    687c:	|  |  |   movea.l (sp),a0
    687e:	|  |  |   movea.l (a0),a0
    6880:	|  |  |   move.l 44(a0),d0
    6884:	|  |  |   movea.l (sp),a0
    6886:	|  |  |   move.l d0,(a0)
			fun->next = NULL;
    6888:	|  |  |   movea.l 8(sp),a0
    688c:	|  |  |   clr.l 44(a0)
    6890:	|  +--|-- bra.s 689c <pauseFunction+0x34>
		} else {
			huntAndDestroy = & (* huntAndDestroy) -> next;
    6892:	|  |  \-> movea.l (sp),a0
    6894:	|  |      move.l (a0),d0
    6896:	|  |      moveq #44,d1
    6898:	|  |      add.l d0,d1
    689a:	|  |      move.l d1,(sp)
	while (* huntAndDestroy) {
    689c:	|  \----> movea.l (sp),a0
    689e:	|         move.l (a0),d0
    68a0:	\-------- bne.s 6872 <pauseFunction+0xa>
		}
	}
}
    68a2:	          nop
    68a4:	          nop
    68a6:	          addq.l #4,sp
    68a8:	          rts

000068aa <restartFunction>:

void restartFunction (struct loadedFunction * fun) {
	fun -> next = allRunningFunctions;
    68aa:	move.l 1c962 <allRunningFunctions>,d0
    68b0:	movea.l 4(sp),a0
    68b4:	move.l d0,44(a0)
	allRunningFunctions = fun;
    68b8:	move.l 4(sp),1c962 <allRunningFunctions>
}
    68c0:	nop
    68c2:	rts

000068c4 <runSludge>:

BOOL runSludge () {
    68c4:	                   lea -12(sp),sp
    68c8:	                   move.l a6,-(sp)
	
	struct loadedFunction * thisFunction = allRunningFunctions;
    68ca:	                   move.l 1c962 <allRunningFunctions>,12(sp)
	struct loadedFunction * nextFunction;

	while (thisFunction) {
    68d2:	      /----------- bra.s 694e <runSludge+0x8a>
		nextFunction = thisFunction -> next;
    68d4:	   /--|----------> movea.l 12(sp),a0
    68d8:	   |  |            move.l 44(a0),4(sp)

		if (! thisFunction -> freezerLevel) {
    68de:	   |  |            movea.l 12(sp),a0
    68e2:	   |  |            move.b 56(a0),d0
    68e6:	   |  |  /-------- bne.s 6948 <runSludge+0x84>
			if (thisFunction -> timeLeft) {
    68e8:	   |  |  |         movea.l 12(sp),a0
    68ec:	   |  |  |         move.l 12(a0),d0
    68f0:	   |  |  |  /----- beq.s 691a <runSludge+0x56>
				if (thisFunction -> timeLeft < 0) {				
    68f2:	   |  |  |  |      movea.l 12(sp),a0
    68f6:	   |  |  |  |      move.l 12(a0),d0
    68fa:	   |  |  |  |  /-- bpl.s 6906 <runSludge+0x42>
					thisFunction -> timeLeft = 0;
    68fc:	   |  |  |  |  |   movea.l 12(sp),a0
    6900:	   |  |  |  |  |   clr.l 12(a0)
    6904:	   |  |  +--|--|-- bra.s 6948 <runSludge+0x84>
				} else if (! -- (thisFunction -> timeLeft)) {
    6906:	   |  |  |  |  \-> movea.l 12(sp),a0
    690a:	   |  |  |  |      move.l 12(a0),d0
    690e:	   |  |  |  |      subq.l #1,d0
    6910:	   |  |  |  |      movea.l 12(sp),a0
    6914:	   |  |  |  |      move.l d0,12(a0)
    6918:	   |  |  +--|----- bra.s 6948 <runSludge+0x84>
				}
			} else {
				if (thisFunction -> isSpeech) {
    691a:	   |  |  |  \----> movea.l 12(sp),a0
    691e:	   |  |  |         move.w 50(a0),d0
    6922:	   |  |  |     /-- beq.s 6932 <runSludge+0x6e>
					thisFunction -> isSpeech = FALSE;
    6924:	   |  |  |     |   movea.l 12(sp),a0
    6928:	   |  |  |     |   clr.w 50(a0)
					killAllSpeech ();
    692c:	   |  |  |     |   jsr 7f64 <killAllSpeech>
				}
				if (! continueFunction (thisFunction))
    6932:	   |  |  |     \-> move.l 12(sp),-(sp)
    6936:	   |  |  |         jsr 4892 <continueFunction>
    693c:	   |  |  |         addq.l #4,sp
    693e:	   |  |  |         tst.w d0
    6940:	   |  |  +-------- bne.s 6948 <runSludge+0x84>
					return FALSE;
    6942:	   |  |  |         clr.w d0
    6944:	/--|--|--|-------- bra.w 69d4 <runSludge+0x110>
			}
		}

		thisFunction = nextFunction;
    6948:	|  |  |  \-------> move.l 4(sp),12(sp)
	while (thisFunction) {
    694e:	|  |  \----------> tst.l 12(sp)
    6952:	|  \-------------- bne.s 68d4 <runSludge+0x10>
	}

	if (loadNow) {
    6954:	|                  move.l 1c996 <loadNow>,d0
    695a:	|        /-------- beq.s 69d2 <runSludge+0x10e>
		if (loadNow[0] == ':') {
    695c:	|        |         movea.l 1c996 <loadNow>,a0
    6962:	|        |         move.b (a0),d0
    6964:	|        |         cmpi.b #58,d0
    6968:	|        |  /----- bne.s 699c <runSludge+0xd8>
			saveGame (loadNow + 1);
    696a:	|        |  |      move.l 1c996 <loadNow>,d0
    6970:	|        |  |      addq.l #1,d0
    6972:	|        |  |      move.l d0,-(sp)
    6974:	|        |  |      jsr c780 <saveGame>
    697a:	|        |  |      addq.l #4,sp
			setVariable (&saverFunc->reg, SVT_INT, 1);
    697c:	|        |  |      movea.l 1ca94 <saverFunc>,a0
    6982:	|        |  |      lea 28(a0),a0
    6986:	|        |  |      pea 1 <_start+0x1>
    698a:	|        |  |      pea 1 <_start+0x1>
    698e:	|        |  |      move.l a0,-(sp)
    6990:	|        |  |      jsr 150e6 <setVariable>
    6996:	|        |  |      lea 12(sp),sp
    699a:	|        |  |  /-- bra.s 69b4 <runSludge+0xf0>
		} else {
			if (! loadGame (loadNow)) return FALSE;
    699c:	|        |  \--|-> move.l 1c996 <loadNow>,d0
    69a2:	|        |     |   move.l d0,-(sp)
    69a4:	|        |     |   jsr c2c8 <loadGame>
    69aa:	|        |     |   addq.l #4,sp
    69ac:	|        |     |   tst.w d0
    69ae:	|        |     +-- bne.s 69b4 <runSludge+0xf0>
    69b0:	|        |     |   clr.w d0
    69b2:	+--------|-----|-- bra.s 69d4 <runSludge+0x110>
		}
		FreeVec(loadNow);
    69b4:	|        |     \-> move.l 1c996 <loadNow>,8(sp)
    69bc:	|        |         move.l 1c9ca <SysBase>,d0
    69c2:	|        |         movea.l d0,a6
    69c4:	|        |         movea.l 8(sp),a1
    69c8:	|        |         jsr -690(a6)
		loadNow = NULL;
    69cc:	|        |         clr.l 1c996 <loadNow>
	}

	return TRUE;
    69d2:	|        \-------> moveq #1,d0
}
    69d4:	\----------------> movea.l (sp)+,a6
    69d6:	                   lea 12(sp),sp
    69da:	                   rts

000069dc <saveHandlers>:

void saveHandlers (BPTR fp) {
	put2bytes (currentEvents -> leftMouseFunction,		fp);
    69dc:	movea.l 1c342 <currentEvents>,a0
    69e2:	move.l (a0),d0
    69e4:	move.l 4(sp),-(sp)
    69e8:	move.l d0,-(sp)
    69ea:	jsr 8d0 <put2bytes>
    69f0:	addq.l #8,sp
	put2bytes (currentEvents -> leftMouseUpFunction,	fp);
    69f2:	movea.l 1c342 <currentEvents>,a0
    69f8:	move.l 4(a0),d0
    69fc:	move.l 4(sp),-(sp)
    6a00:	move.l d0,-(sp)
    6a02:	jsr 8d0 <put2bytes>
    6a08:	addq.l #8,sp
	put2bytes (currentEvents -> rightMouseFunction,		fp);
    6a0a:	movea.l 1c342 <currentEvents>,a0
    6a10:	move.l 8(a0),d0
    6a14:	move.l 4(sp),-(sp)
    6a18:	move.l d0,-(sp)
    6a1a:	jsr 8d0 <put2bytes>
    6a20:	addq.l #8,sp
	put2bytes (currentEvents -> rightMouseUpFunction,	fp);
    6a22:	movea.l 1c342 <currentEvents>,a0
    6a28:	move.l 12(a0),d0
    6a2c:	move.l 4(sp),-(sp)
    6a30:	move.l d0,-(sp)
    6a32:	jsr 8d0 <put2bytes>
    6a38:	addq.l #8,sp
	put2bytes (currentEvents -> moveMouseFunction,		fp);
    6a3a:	movea.l 1c342 <currentEvents>,a0
    6a40:	move.l 16(a0),d0
    6a44:	move.l 4(sp),-(sp)
    6a48:	move.l d0,-(sp)
    6a4a:	jsr 8d0 <put2bytes>
    6a50:	addq.l #8,sp
	put2bytes (currentEvents -> focusFunction,			fp);
    6a52:	movea.l 1c342 <currentEvents>,a0
    6a58:	move.l 20(a0),d0
    6a5c:	move.l 4(sp),-(sp)
    6a60:	move.l d0,-(sp)
    6a62:	jsr 8d0 <put2bytes>
    6a68:	addq.l #8,sp
	put2bytes (currentEvents -> spaceFunction,			fp);
    6a6a:	movea.l 1c342 <currentEvents>,a0
    6a70:	move.l 24(a0),d0
    6a74:	move.l 4(sp),-(sp)
    6a78:	move.l d0,-(sp)
    6a7a:	jsr 8d0 <put2bytes>
    6a80:	addq.l #8,sp
}
    6a82:	nop
    6a84:	rts

00006a86 <sludgeDisplay>:

void sludgeDisplay () {					
    6a86:	subq.l #4,sp
  	volatile struct Custom *custom = (struct Custom*)0xdff000;
    6a88:	move.l #14675968,(sp)
	displayCursor();
    6a8e:	jsr c58 <displayCursor>
	CstDrawBackdrop();
    6a94:	jsr 14c8 <CstDrawBackdrop>
	CstRestoreScreen();
    6a9a:	jsr 2b26 <CstRestoreScreen>
	drawPeople();
    6aa0:	jsr a064 <drawPeople>
	CstSwapBuffer();
    6aa6:	jsr 385c <CstSwapBuffer>
}
    6aac:	nop
    6aae:	addq.l #4,sp
    6ab0:	rts

00006ab2 <stackSetByIndex>:

BOOL stackSetByIndex (struct variableStack * vS, unsigned int theIndex, const struct variable * va) {
	while (theIndex--) {
    6ab2:	      /-- bra.s 6ad2 <stackSetByIndex+0x20>
		vS = vS->next;
    6ab4:	/-----|-> movea.l 4(sp),a0
    6ab8:	|     |   move.l 8(a0),4(sp)
		if (!vS) {
    6abe:	|     +-- bne.s 6ad2 <stackSetByIndex+0x20>
			KPrintF("Index past end of stack.");
    6ac0:	|     |   pea 18c2e <PutChar+0xf10>
    6ac6:	|     |   jsr 17254 <KPrintF>
    6acc:	|     |   addq.l #4,sp
			return FALSE;
    6ace:	|     |   clr.w d0
    6ad0:	|  /--|-- bra.s 6af4 <stackSetByIndex+0x42>
	while (theIndex--) {
    6ad2:	|  |  \-> move.l 8(sp),d0
    6ad6:	|  |      move.l d0,d1
    6ad8:	|  |      subq.l #1,d1
    6ada:	|  |      move.l d1,8(sp)
    6ade:	|  |      tst.l d0
    6ae0:	\--|----- bne.s 6ab4 <stackSetByIndex+0x2>
		}
	}
	return copyVariable(va, &(vS->thisVar));
    6ae2:	   |      move.l 4(sp),d0
    6ae6:	   |      move.l d0,-(sp)
    6ae8:	   |      move.l 16(sp),-(sp)
    6aec:	   |      jsr 14cae <copyVariable>
    6af2:	   |      addq.l #8,sp
}
    6af4:	   \----> rts

00006af6 <startNewFunctionNum>:

int startNewFunctionNum (unsigned int funcNum, unsigned int numParamsExpected, struct loadedFunction * calledBy, struct variableStack ** vStack, BOOL returnSommet) {
    6af6:	             lea -24(sp),sp
    6afa:	             move.l a6,-(sp)
    6afc:	             move.l 48(sp),d0
    6b00:	             move.w d0,d0
    6b02:	             move.w d0,6(sp)
		
	struct loadedFunction * newFunc = AllocVec(sizeof(struct loadedFunction),MEMF_ANY);
    6b06:	             moveq #58,d0
    6b08:	             move.l d0,24(sp)
    6b0c:	             clr.l 20(sp)
    6b10:	             move.l 1c9ca <SysBase>,d0
    6b16:	             movea.l d0,a6
    6b18:	             move.l 24(sp),d0
    6b1c:	             move.l 20(sp),d1
    6b20:	             jsr -684(a6)
    6b24:	             move.l d0,16(sp)
    6b28:	             move.l 16(sp),d0
    6b2c:	             move.l d0,12(sp)
	if(!newFunc) {
    6b30:	         /-- bne.s 6b46 <startNewFunctionNum+0x50>
		KPrintF("startNewFunction: Cannot allocate memory");
    6b32:	         |   pea 18c47 <PutChar+0xf29>
    6b38:	         |   jsr 17254 <KPrintF>
    6b3e:	         |   addq.l #4,sp
		return 0;
    6b40:	         |   moveq #0,d0
    6b42:	/--------|-- bra.w 6c5c <startNewFunctionNum+0x166>
	}
	newFunc -> originalNumber = funcNum;
    6b46:	|        \-> move.l 32(sp),d0
    6b4a:	|            movea.l 12(sp),a0
    6b4e:	|            move.l d0,(a0)

	loadFunctionCode (newFunc);
    6b50:	|            move.l 12(sp),-(sp)
    6b54:	|            jsr 6266 <loadFunctionCode>
    6b5a:	|            addq.l #4,sp

	if (newFunc -> numArgs != (int)numParamsExpected) {
    6b5c:	|            movea.l 12(sp),a0
    6b60:	|            move.l 16(a0),d1
    6b64:	|            move.l 36(sp),d0
    6b68:	|            cmp.l d1,d0
    6b6a:	|        /-- beq.s 6b80 <startNewFunctionNum+0x8a>
		KPrintF("Wrong number of parameters!");
    6b6c:	|        |   pea 18c70 <PutChar+0xf52>
    6b72:	|        |   jsr 17254 <KPrintF>
    6b78:	|        |   addq.l #4,sp
		return NULL; 
    6b7a:	|        |   moveq #0,d0
    6b7c:	+--------|-- bra.w 6c5c <startNewFunctionNum+0x166>
	}
	if (newFunc -> numArgs > newFunc -> numLocals)  {
    6b80:	|        \-> movea.l 12(sp),a0
    6b84:	|            move.l 16(a0),d1
    6b88:	|            movea.l 12(sp),a0
    6b8c:	|            move.l 8(a0),d0
    6b90:	|            cmp.l d1,d0
    6b92:	|  /-------- bge.s 6bfc <startNewFunctionNum+0x106>
		KPrintF ("More arguments than local variable space!");
    6b94:	|  |         pea 18c8c <PutChar+0xf6e>
    6b9a:	|  |         jsr 17254 <KPrintF>
    6ba0:	|  |         addq.l #4,sp
		return NULL; 
    6ba2:	|  |         moveq #0,d0
    6ba4:	+--|-------- bra.w 6c5c <startNewFunctionNum+0x166>
	}
	
	// Now, lets copy the parameters from the calling function's stack...

	while (numParamsExpected) {
		struct variableStack *vStacksimpleptr = *vStack;
    6ba8:	|  |  /----> movea.l 44(sp),a0
    6bac:	|  |  |      move.l (a0),8(sp)
		numParamsExpected --;
    6bb0:	|  |  |      subq.l #1,36(sp)
		if (*vStack == NULL) {
    6bb4:	|  |  |      movea.l 44(sp),a0
    6bb8:	|  |  |      move.l (a0),d0
    6bba:	|  |  |  /-- bne.s 6bd0 <startNewFunctionNum+0xda>
			KPrintF("Corrupted file! The stack's empty and there were still parameters expected");
    6bbc:	|  |  |  |   pea 18cb6 <PutChar+0xf98>
    6bc2:	|  |  |  |   jsr 17254 <KPrintF>
    6bc8:	|  |  |  |   addq.l #4,sp
			return NULL;
    6bca:	|  |  |  |   moveq #0,d0
    6bcc:	+--|--|--|-- bra.w 6c5c <startNewFunctionNum+0x166>
		}
		copyVariable (&vStacksimpleptr -> thisVar, &newFunc->localVars[numParamsExpected]);
    6bd0:	|  |  |  \-> movea.l 12(sp),a0
    6bd4:	|  |  |      move.l 20(a0),d1
    6bd8:	|  |  |      move.l 36(sp),d0
    6bdc:	|  |  |      lsl.l #3,d0
    6bde:	|  |  |      add.l d0,d1
    6be0:	|  |  |      move.l 8(sp),d0
    6be4:	|  |  |      move.l d1,-(sp)
    6be6:	|  |  |      move.l d0,-(sp)
    6be8:	|  |  |      jsr 14cae <copyVariable>
    6bee:	|  |  |      addq.l #8,sp
		trimStack ( vStack);
    6bf0:	|  |  |      move.l 44(sp),-(sp)
    6bf4:	|  |  |      jsr 15178 <trimStack>
    6bfa:	|  |  |      addq.l #4,sp
	while (numParamsExpected) {
    6bfc:	|  \--|----> tst.l 36(sp)
    6c00:	|     \----- bne.s 6ba8 <startNewFunctionNum+0xb2>
	}

	newFunc -> cancelMe = FALSE;
    6c02:	|            movea.l 12(sp),a0
    6c06:	|            clr.w 54(a0)
	newFunc -> timeLeft = 0;
    6c0a:	|            movea.l 12(sp),a0
    6c0e:	|            clr.l 12(a0)
	newFunc -> returnSomething = returnSommet;
    6c12:	|            movea.l 12(sp),a0
    6c16:	|            move.w 6(sp),48(a0)
	newFunc -> calledBy = calledBy;
    6c1c:	|            movea.l 12(sp),a0
    6c20:	|            move.l 40(sp),40(a0)
	newFunc -> stack = NULL;
    6c26:	|            movea.l 12(sp),a0
    6c2a:	|            clr.l 24(a0)
	newFunc -> freezerLevel = 0;
    6c2e:	|            movea.l 12(sp),a0
    6c32:	|            clr.b 56(a0)
	newFunc -> runThisLine = 0;
    6c36:	|            movea.l 12(sp),a0
    6c3a:	|            clr.l 36(a0)
	newFunc -> isSpeech = 0;
    6c3e:	|            movea.l 12(sp),a0
    6c42:	|            clr.w 50(a0)
	newFunc -> reg.varType = SVT_NULL;
    6c46:	|            movea.l 12(sp),a0
    6c4a:	|            clr.l 28(a0)

	restartFunction (newFunc);
    6c4e:	|            move.l 12(sp),-(sp)
    6c52:	|            jsr 68aa <restartFunction>
    6c58:	|            addq.l #4,sp
	return 1;
    6c5a:	|            moveq #1,d0
}
    6c5c:	\----------> movea.l (sp)+,a6
    6c5e:	             lea 24(sp),sp
    6c62:	             rts

00006c64 <unfreezeSubs>:

void unfreezeSubs () {
    6c64:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    6c66:	          move.l 1c962 <allRunningFunctions>,(sp)

	while (thisFunction) {
    6c6c:	   /----- bra.s 6c8a <unfreezeSubs+0x26>
		if (thisFunction -> freezerLevel) thisFunction -> freezerLevel--;
    6c6e:	/--|----> movea.l (sp),a0
    6c70:	|  |      move.b 56(a0),d0
    6c74:	|  |  /-- beq.s 6c84 <unfreezeSubs+0x20>
    6c76:	|  |  |   movea.l (sp),a0
    6c78:	|  |  |   move.b 56(a0),d0
    6c7c:	|  |  |   subq.b #1,d0
    6c7e:	|  |  |   movea.l (sp),a0
    6c80:	|  |  |   move.b d0,56(a0)
		thisFunction = thisFunction -> next;
    6c84:	|  |  \-> movea.l (sp),a0
    6c86:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    6c8a:	|  \----> tst.l (sp)
    6c8c:	\-------- bne.s 6c6e <unfreezeSubs+0xa>
	}
}
    6c8e:	          nop
    6c90:	          nop
    6c92:	          addq.l #4,sp
    6c94:	          rts

00006c96 <finishAccess>:
char * convertString(char * s) {
	return NULL;
}

void finishAccess () {
	sliceBusy = FALSE;
    6c96:	clr.w 1c34e <sliceBusy>
}
    6c9c:	nop
    6c9e:	rts

00006ca0 <getNumberedString>:

char * getNumberedString (int value) {
    6ca0:	       lea -56(sp),sp
    6ca4:	       movem.l d2-d3/a6,-(sp)

	if (sliceBusy) {
    6ca8:	       move.w 1c34e <sliceBusy>,d0
    6cae:	   /-- beq.s 6cf8 <getNumberedString+0x58>
		Write(Output(), (APTR)"getNumberedString: Can't read from data file. I'm already reading something\n", 76);        
    6cb0:	   |   move.l 1c9d2 <DOSBase>,d0
    6cb6:	   |   movea.l d0,a6
    6cb8:	   |   jsr -60(a6)
    6cbc:	   |   move.l d0,28(sp)
    6cc0:	   |   move.l 28(sp),d0
    6cc4:	   |   move.l d0,24(sp)
    6cc8:	   |   move.l #101633,20(sp)
    6cd0:	   |   moveq #76,d0
    6cd2:	   |   move.l d0,16(sp)
    6cd6:	   |   move.l 1c9d2 <DOSBase>,d0
    6cdc:	   |   movea.l d0,a6
    6cde:	   |   move.l 24(sp),d1
    6ce2:	   |   move.l 20(sp),d2
    6ce6:	   |   move.l 16(sp),d3
    6cea:	   |   jsr -48(a6)
    6cee:	   |   move.l d0,12(sp)
		return NULL;
    6cf2:	   |   moveq #0,d0
    6cf4:	/--|-- bra.w 6d94 <getNumberedString+0xf4>
	}

	Seek(bigDataFile, (value << 2) + startOfTextIndex, OFFSET_BEGINNING);
    6cf8:	|  \-> move.l 1c9b2 <bigDataFile>,64(sp)
    6d00:	|      move.l 72(sp),d0
    6d04:	|      add.l d0,d0
    6d06:	|      add.l d0,d0
    6d08:	|      move.l d0,d1
    6d0a:	|      move.l 1c9be <startOfTextIndex>,d0
    6d10:	|      add.l d1,d0
    6d12:	|      move.l d0,60(sp)
    6d16:	|      moveq #-1,d0
    6d18:	|      move.l d0,56(sp)
    6d1c:	|      move.l 1c9d2 <DOSBase>,d0
    6d22:	|      movea.l d0,a6
    6d24:	|      move.l 64(sp),d1
    6d28:	|      move.l 60(sp),d2
    6d2c:	|      move.l 56(sp),d3
    6d30:	|      jsr -66(a6)
    6d34:	|      move.l d0,52(sp)
	value = get4bytes (bigDataFile);
    6d38:	|      move.l 1c9b2 <bigDataFile>,d0
    6d3e:	|      move.l d0,-(sp)
    6d40:	|      jsr 718 <get4bytes>
    6d46:	|      addq.l #4,sp
    6d48:	|      move.l d0,72(sp)
	Seek (bigDataFile, value, OFFSET_BEGINING);
    6d4c:	|      move.l 1c9b2 <bigDataFile>,48(sp)
    6d54:	|      move.l 72(sp),44(sp)
    6d5a:	|      moveq #-1,d0
    6d5c:	|      move.l d0,40(sp)
    6d60:	|      move.l 1c9d2 <DOSBase>,d0
    6d66:	|      movea.l d0,a6
    6d68:	|      move.l 48(sp),d1
    6d6c:	|      move.l 44(sp),d2
    6d70:	|      move.l 40(sp),d3
    6d74:	|      jsr -66(a6)
    6d78:	|      move.l d0,36(sp)

	char * s = readString (bigDataFile);    
    6d7c:	|      move.l 1c9b2 <bigDataFile>,d0
    6d82:	|      move.l d0,-(sp)
    6d84:	|      jsr b02 <readString>
    6d8a:	|      addq.l #4,sp
    6d8c:	|      move.l d0,32(sp)
	
	return s;
    6d90:	|      move.l 32(sp),d0
}
    6d94:	\----> movem.l (sp)+,d2-d3/a6
    6d98:	       lea 56(sp),sp
    6d9c:	       rts

00006d9e <openFileFromNum>:

unsigned int openFileFromNum (int num) {
    6d9e:	       lea -32(sp),sp
    6da2:	       movem.l d2-d3/a6,-(sp)
//	FILE * dbug = fopen ("debuggy.txt", "at");

	if (sliceBusy) {
    6da6:	       move.w 1c34e <sliceBusy>,d0
    6dac:	   /-- beq.s 6dc8 <openFileFromNum+0x2a>
		KPrintF("Can't read from data file", "I'm already reading something");
    6dae:	   |   pea 18d4e <PutChar+0x1030>
    6db4:	   |   pea 18d6c <PutChar+0x104e>
    6dba:	   |   jsr 17254 <KPrintF>
    6dc0:	   |   addq.l #8,sp
		return 0;
    6dc2:	   |   moveq #0,d0
    6dc4:	/--|-- bra.w 6e5c <openFileFromNum+0xbe>
	}

	Seek( bigDataFile,  startOfDataIndex + (num << 2), OFFSET_BEGINING);	
    6dc8:	|  \-> move.l 1c9b2 <bigDataFile>,40(sp)
    6dd0:	|      move.l 48(sp),d0
    6dd4:	|      add.l d0,d0
    6dd6:	|      add.l d0,d0
    6dd8:	|      move.l d0,d1
    6dda:	|      move.l 1c9ba <startOfDataIndex>,d0
    6de0:	|      add.l d1,d0
    6de2:	|      move.l d0,36(sp)
    6de6:	|      moveq #-1,d0
    6de8:	|      move.l d0,32(sp)
    6dec:	|      move.l 1c9d2 <DOSBase>,d0
    6df2:	|      movea.l d0,a6
    6df4:	|      move.l 40(sp),d1
    6df8:	|      move.l 36(sp),d2
    6dfc:	|      move.l 32(sp),d3
    6e00:	|      jsr -66(a6)
    6e04:	|      move.l d0,28(sp)
	Seek( bigDataFile, get4bytes (bigDataFile), OFFSET_CURRENT);
    6e08:	|      move.l 1c9b2 <bigDataFile>,24(sp)
    6e10:	|      move.l 1c9b2 <bigDataFile>,d0
    6e16:	|      move.l d0,-(sp)
    6e18:	|      jsr 718 <get4bytes>
    6e1e:	|      addq.l #4,sp
    6e20:	|      move.l d0,20(sp)
    6e24:	|      clr.l 16(sp)
    6e28:	|      move.l 1c9d2 <DOSBase>,d0
    6e2e:	|      movea.l d0,a6
    6e30:	|      move.l 24(sp),d1
    6e34:	|      move.l 20(sp),d2
    6e38:	|      move.l 16(sp),d3
    6e3c:	|      jsr -66(a6)
    6e40:	|      move.l d0,12(sp)
//	fprintf (dbug, "Jumping to %li (for data) \n", ftell (bigDataFile));
	sliceBusy = TRUE;
    6e44:	|      move.w #1,1c34e <sliceBusy>
//	fclose (dbug);

	return get4bytes (bigDataFile);
    6e4c:	|      move.l 1c9b2 <bigDataFile>,d0
    6e52:	|      move.l d0,-(sp)
    6e54:	|      jsr 718 <get4bytes>
    6e5a:	|      addq.l #4,sp
}
    6e5c:	\----> movem.l (sp)+,d2-d3/a6
    6e60:	       lea 32(sp),sp
    6e64:	       rts

00006e66 <openObjectSlice>:

BOOL openObjectSlice (int num) {
    6e66:	       lea -32(sp),sp
    6e6a:	       movem.l d2-d3/a6,-(sp)
    // BPTR dbug = FOpen("debuggy.txt", MODE_NEWFILE);

    // FPrintf(dbug, "\nTrying to open object %i\n", num);

    if (sliceBusy) {
    6e6e:	       move.w 1c34e <sliceBusy>,d0
    6e74:	   /-- beq.s 6e90 <openObjectSlice+0x2a>
        KPrintF("Can't read from data file", "I'm already reading something");
    6e76:	   |   pea 18d4e <PutChar+0x1030>
    6e7c:	   |   pea 18d6c <PutChar+0x104e>
    6e82:	   |   jsr 17254 <KPrintF>
    6e88:	   |   addq.l #8,sp
        return FALSE;
    6e8a:	   |   clr.w d0
    6e8c:	/--|-- bra.w 6f1c <openObjectSlice+0xb6>
    }

    // FPrintf(dbug, "Going to position %ld\n", startOfObjectIndex + (num << 2));
    Seek(bigDataFile, startOfObjectIndex + (num << 2), OFFSET_BEGINNING);
    6e90:	|  \-> move.l 1c9b2 <bigDataFile>,40(sp)
    6e98:	|      move.l 48(sp),d0
    6e9c:	|      add.l d0,d0
    6e9e:	|      add.l d0,d0
    6ea0:	|      move.l d0,d1
    6ea2:	|      move.l 1c9c6 <startOfObjectIndex>,d0
    6ea8:	|      add.l d1,d0
    6eaa:	|      move.l d0,36(sp)
    6eae:	|      moveq #-1,d0
    6eb0:	|      move.l d0,32(sp)
    6eb4:	|      move.l 1c9d2 <DOSBase>,d0
    6eba:	|      movea.l d0,a6
    6ebc:	|      move.l 40(sp),d1
    6ec0:	|      move.l 36(sp),d2
    6ec4:	|      move.l 32(sp),d3
    6ec8:	|      jsr -66(a6)
    6ecc:	|      move.l d0,28(sp)
    Seek(bigDataFile, get4bytes(bigDataFile), OFFSET_BEGINNING);
    6ed0:	|      move.l 1c9b2 <bigDataFile>,24(sp)
    6ed8:	|      move.l 1c9b2 <bigDataFile>,d0
    6ede:	|      move.l d0,-(sp)
    6ee0:	|      jsr 718 <get4bytes>
    6ee6:	|      addq.l #4,sp
    6ee8:	|      move.l d0,20(sp)
    6eec:	|      moveq #-1,d0
    6eee:	|      move.l d0,16(sp)
    6ef2:	|      move.l 1c9d2 <DOSBase>,d0
    6ef8:	|      movea.l d0,a6
    6efa:	|      move.l 24(sp),d1
    6efe:	|      move.l 20(sp),d2
    6f02:	|      move.l 16(sp),d3
    6f06:	|      jsr -66(a6)
    6f0a:	|      move.l d0,12(sp)
    // FPrintf(dbug, "Told to skip forward to %ld\n", FTell(bigDataFile));
    // FClose(dbug);
    return sliceBusy = TRUE;
    6f0e:	|      move.w #1,1c34e <sliceBusy>
    6f16:	|      move.w 1c34e <sliceBusy>,d0
}
    6f1c:	\----> movem.l (sp)+,d2-d3/a6
    6f20:	       lea 32(sp),sp
    6f24:	       rts

00006f26 <openSubSlice>:

BOOL openSubSlice (int num) {
    6f26:	       lea -32(sp),sp
    6f2a:	       movem.l d2-d3/a6,-(sp)
//	FILE * dbug = fopen ("debuggy.txt", "at");

//	fprintf (dbug, "\nTrying to open sub %i\n", num);

	if (sliceBusy) {
    6f2e:	       move.w 1c34e <sliceBusy>,d0
    6f34:	   /-- beq.s 6f50 <openSubSlice+0x2a>
		KPrintF("Can't read from data file", "I'm already reading something");
    6f36:	   |   pea 18d4e <PutChar+0x1030>
    6f3c:	   |   pea 18d6c <PutChar+0x104e>
    6f42:	   |   jsr 17254 <KPrintF>
    6f48:	   |   addq.l #8,sp
		return FALSE;
    6f4a:	   |   clr.w d0
    6f4c:	/--|-- bra.w 6fdc <openSubSlice+0xb6>
	}

//	fprintf (dbug, "Going to position %li\n", startOfSubIndex + (num << 2));
	Seek(bigDataFile, startOfSubIndex + (num << 2), OFFSET_BEGINNING);
    6f50:	|  \-> move.l 1c9b2 <bigDataFile>,40(sp)
    6f58:	|      move.l 48(sp),d0
    6f5c:	|      add.l d0,d0
    6f5e:	|      add.l d0,d0
    6f60:	|      move.l d0,d1
    6f62:	|      move.l 1c9c2 <startOfSubIndex>,d0
    6f68:	|      add.l d1,d0
    6f6a:	|      move.l d0,36(sp)
    6f6e:	|      moveq #-1,d0
    6f70:	|      move.l d0,32(sp)
    6f74:	|      move.l 1c9d2 <DOSBase>,d0
    6f7a:	|      movea.l d0,a6
    6f7c:	|      move.l 40(sp),d1
    6f80:	|      move.l 36(sp),d2
    6f84:	|      move.l 32(sp),d3
    6f88:	|      jsr -66(a6)
    6f8c:	|      move.l d0,28(sp)
	Seek(bigDataFile, get4bytes (bigDataFile), OFFSET_BEGINNING);
    6f90:	|      move.l 1c9b2 <bigDataFile>,24(sp)
    6f98:	|      move.l 1c9b2 <bigDataFile>,d0
    6f9e:	|      move.l d0,-(sp)
    6fa0:	|      jsr 718 <get4bytes>
    6fa6:	|      addq.l #4,sp
    6fa8:	|      move.l d0,20(sp)
    6fac:	|      moveq #-1,d0
    6fae:	|      move.l d0,16(sp)
    6fb2:	|      move.l 1c9d2 <DOSBase>,d0
    6fb8:	|      movea.l d0,a6
    6fba:	|      move.l 24(sp),d1
    6fbe:	|      move.l 20(sp),d2
    6fc2:	|      move.l 16(sp),d3
    6fc6:	|      jsr -66(a6)
    6fca:	|      move.l d0,12(sp)
//	fprintf (dbug, "Told to skip forward to %li\n", ftell (bigDataFile));
//	fclose (dbug);
	return sliceBusy = TRUE;
    6fce:	|      move.w #1,1c34e <sliceBusy>
    6fd6:	|      move.w 1c34e <sliceBusy>,d0
}
    6fdc:	\----> movem.l (sp)+,d2-d3/a6
    6fe0:	       lea 32(sp),sp
    6fe4:	       rts

00006fe6 <setFileIndices>:

void setFileIndices (BPTR fp, unsigned int numLanguages, unsigned int skipBefore) {
    6fe6:	       lea -180(sp),sp
    6fea:	       movem.l d2-d3/a6,-(sp)
	if (fp) {
    6fee:	       tst.l 196(sp)
    6ff2:	/----- beq.s 7032 <setFileIndices+0x4c>
		// Keep hold of the file handle, and let things get at it
		bigDataFile = fp;
    6ff4:	|      move.l 196(sp),1c9b2 <bigDataFile>
		startIndex = Seek( fp, 0, OFFSET_CURRENT);
    6ffc:	|      move.l 196(sp),168(sp)
    7002:	|      clr.l 164(sp)
    7006:	|      clr.l 160(sp)
    700a:	|      move.l 1c9d2 <DOSBase>,d0
    7010:	|      movea.l d0,a6
    7012:	|      move.l 168(sp),d1
    7016:	|      move.l 164(sp),d2
    701a:	|      move.l 160(sp),d3
    701e:	|      jsr -66(a6)
    7022:	|      move.l d0,156(sp)
    7026:	|      move.l 156(sp),d0
    702a:	|      move.l d0,1c9b6 <startIndex>
    7030:	|  /-- bra.s 706c <setFileIndices+0x86>
	} else {
		// No file pointer - this means that we reuse the bigDataFile
		fp = bigDataFile;
    7032:	\--|-> move.l 1c9b2 <bigDataFile>,196(sp)
        Seek(fp, startIndex, OFFSET_BEGINNING);
    703a:	   |   move.l 196(sp),184(sp)
    7040:	   |   move.l 1c9b6 <startIndex>,d0
    7046:	   |   move.l d0,180(sp)
    704a:	   |   moveq #-1,d0
    704c:	   |   move.l d0,176(sp)
    7050:	   |   move.l 1c9d2 <DOSBase>,d0
    7056:	   |   movea.l d0,a6
    7058:	   |   move.l 184(sp),d1
    705c:	   |   move.l 180(sp),d2
    7060:	   |   move.l 176(sp),d3
    7064:	   |   jsr -66(a6)
    7068:	   |   move.l d0,172(sp)
	}
	sliceBusy = FALSE;
    706c:	   \-> clr.w 1c34e <sliceBusy>

	if (skipBefore > numLanguages) {
    7072:	       move.l 204(sp),d0
    7076:	       cmp.l 200(sp),d0
    707a:	   /-- bls.s 708e <setFileIndices+0xa8>
		KPrintF("setFileIndices: Warning: Not a valid language ID! Using default instead.");
    707c:	   |   pea 18d86 <PutChar+0x1068>
    7082:	   |   jsr 17254 <KPrintF>
    7088:	   |   addq.l #4,sp
		skipBefore = 0;
    708a:	   |   clr.l 204(sp)
	}

	// STRINGS
	int skipAfter = numLanguages - skipBefore;
    708e:	   \-> move.l 200(sp),d0
    7092:	       sub.l 204(sp),d0
    7096:	       move.l d0,188(sp)
	while (skipBefore) {
    709a:	   /-- bra.s 70d8 <setFileIndices+0xf2>
        Seek(fp, get4bytes(fp),OFFSET_BEGINING);		
    709c:	/--|-> move.l 196(sp),24(sp)
    70a2:	|  |   move.l 196(sp),-(sp)
    70a6:	|  |   jsr 718 <get4bytes>
    70ac:	|  |   addq.l #4,sp
    70ae:	|  |   move.l d0,20(sp)
    70b2:	|  |   moveq #-1,d0
    70b4:	|  |   move.l d0,16(sp)
    70b8:	|  |   move.l 1c9d2 <DOSBase>,d0
    70be:	|  |   movea.l d0,a6
    70c0:	|  |   move.l 24(sp),d1
    70c4:	|  |   move.l 20(sp),d2
    70c8:	|  |   move.l 16(sp),d3
    70cc:	|  |   jsr -66(a6)
    70d0:	|  |   move.l d0,12(sp)
		skipBefore --;
    70d4:	|  |   subq.l #1,204(sp)
	while (skipBefore) {
    70d8:	|  \-> tst.l 204(sp)
    70dc:	\----- bne.s 709c <setFileIndices+0xb6>
	}
	startOfTextIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    70de:	       move.l 196(sp),152(sp)
    70e4:	       clr.l 148(sp)
    70e8:	       clr.l 144(sp)
    70ec:	       move.l 1c9d2 <DOSBase>,d0
    70f2:	       movea.l d0,a6
    70f4:	       move.l 152(sp),d1
    70f8:	       move.l 148(sp),d2
    70fc:	       move.l 144(sp),d3
    7100:	       jsr -66(a6)
    7104:	       move.l d0,140(sp)
    7108:	       move.l 140(sp),d0
    710c:	       addq.l #4,d0
    710e:	       move.l d0,1c9be <startOfTextIndex>

	Seek(fp, get4bytes (fp), OFFSET_BEGINNING);
    7114:	       move.l 196(sp),136(sp)
    711a:	       move.l 196(sp),-(sp)
    711e:	       jsr 718 <get4bytes>
    7124:	       addq.l #4,sp
    7126:	       move.l d0,132(sp)
    712a:	       moveq #-1,d0
    712c:	       move.l d0,128(sp)
    7130:	       move.l 1c9d2 <DOSBase>,d0
    7136:	       movea.l d0,a6
    7138:	       move.l 136(sp),d1
    713c:	       move.l 132(sp),d2
    7140:	       move.l 128(sp),d3
    7144:	       jsr -66(a6)
    7148:	       move.l d0,124(sp)

	while (skipAfter) {
    714c:	   /-- bra.s 718a <setFileIndices+0x1a4>
        Seek( fp, get4bytes (fp), OFFSET_BEGINING);
    714e:	/--|-> move.l 196(sp),40(sp)
    7154:	|  |   move.l 196(sp),-(sp)
    7158:	|  |   jsr 718 <get4bytes>
    715e:	|  |   addq.l #4,sp
    7160:	|  |   move.l d0,36(sp)
    7164:	|  |   moveq #-1,d0
    7166:	|  |   move.l d0,32(sp)
    716a:	|  |   move.l 1c9d2 <DOSBase>,d0
    7170:	|  |   movea.l d0,a6
    7172:	|  |   move.l 40(sp),d1
    7176:	|  |   move.l 36(sp),d2
    717a:	|  |   move.l 32(sp),d3
    717e:	|  |   jsr -66(a6)
    7182:	|  |   move.l d0,28(sp)
		skipAfter --;
    7186:	|  |   subq.l #1,188(sp)
	while (skipAfter) {
    718a:	|  \-> tst.l 188(sp)
    718e:	\----- bne.s 714e <setFileIndices+0x168>
	}

	startOfSubIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    7190:	       move.l 196(sp),120(sp)
    7196:	       clr.l 116(sp)
    719a:	       clr.l 112(sp)
    719e:	       move.l 1c9d2 <DOSBase>,d0
    71a4:	       movea.l d0,a6
    71a6:	       move.l 120(sp),d1
    71aa:	       move.l 116(sp),d2
    71ae:	       move.l 112(sp),d3
    71b2:	       jsr -66(a6)
    71b6:	       move.l d0,108(sp)
    71ba:	       move.l 108(sp),d0
    71be:	       addq.l #4,d0
    71c0:	       move.l d0,1c9c2 <startOfSubIndex>
    Seek( fp, get4bytes (fp), OFFSET_CURRENT);
    71c6:	       move.l 196(sp),104(sp)
    71cc:	       move.l 196(sp),-(sp)
    71d0:	       jsr 718 <get4bytes>
    71d6:	       addq.l #4,sp
    71d8:	       move.l d0,100(sp)
    71dc:	       clr.l 96(sp)
    71e0:	       move.l 1c9d2 <DOSBase>,d0
    71e6:	       movea.l d0,a6
    71e8:	       move.l 104(sp),d1
    71ec:	       move.l 100(sp),d2
    71f0:	       move.l 96(sp),d3
    71f4:	       jsr -66(a6)
    71f8:	       move.l d0,92(sp)

	startOfObjectIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    71fc:	       move.l 196(sp),88(sp)
    7202:	       clr.l 84(sp)
    7206:	       clr.l 80(sp)
    720a:	       move.l 1c9d2 <DOSBase>,d0
    7210:	       movea.l d0,a6
    7212:	       move.l 88(sp),d1
    7216:	       move.l 84(sp),d2
    721a:	       move.l 80(sp),d3
    721e:	       jsr -66(a6)
    7222:	       move.l d0,76(sp)
    7226:	       move.l 76(sp),d0
    722a:	       addq.l #4,d0
    722c:	       move.l d0,1c9c6 <startOfObjectIndex>
	Seek (fp, get4bytes (fp), OFFSET_CURRENT);
    7232:	       move.l 196(sp),72(sp)
    7238:	       move.l 196(sp),-(sp)
    723c:	       jsr 718 <get4bytes>
    7242:	       addq.l #4,sp
    7244:	       move.l d0,68(sp)
    7248:	       clr.l 64(sp)
    724c:	       move.l 1c9d2 <DOSBase>,d0
    7252:	       movea.l d0,a6
    7254:	       move.l 72(sp),d1
    7258:	       move.l 68(sp),d2
    725c:	       move.l 64(sp),d3
    7260:	       jsr -66(a6)
    7264:	       move.l d0,60(sp)

	// Remember that the data section starts here
	startOfDataIndex =  Seek( fp, 0, OFFSET_CURRENT);
    7268:	       move.l 196(sp),56(sp)
    726e:	       clr.l 52(sp)
    7272:	       clr.l 48(sp)
    7276:	       move.l 1c9d2 <DOSBase>,d0
    727c:	       movea.l d0,a6
    727e:	       move.l 56(sp),d1
    7282:	       move.l 52(sp),d2
    7286:	       move.l 48(sp),d3
    728a:	       jsr -66(a6)
    728e:	       move.l d0,44(sp)
    7292:	       move.l 44(sp),d0
    7296:	       move.l d0,1c9ba <startOfDataIndex>
    729c:	       nop
    729e:	       movem.l (sp)+,d2-d3/a6
    72a2:	       lea 180(sp),sp
    72a6:	       rts

000072a8 <GetVBR>:
static volatile APTR VBR=0;
static APTR SystemIrq;
 
struct View *ActiView;

static APTR GetVBR(void) {
    72a8:	    lea -20(sp),sp
    72ac:	    move.l a6,-(sp)
    72ae:	    move.l d7,-(sp)
	APTR vbr = 0;
    72b0:	    clr.l 24(sp)
	UWORD getvbr[] = { 0x4e7a, 0x0801, 0x4e73 }; // MOVEC.L VBR,D0 RTE
    72b4:	    move.w #20090,10(sp)
    72ba:	    move.w #2049,12(sp)
    72c0:	    move.w #20083,14(sp)

	if (SysBase->AttnFlags & AFF_68010) 
    72c6:	    movea.l 1c9ca <SysBase>,a0
    72cc:	    move.w 296(a0),d0
    72d0:	    move.w d0,d0
    72d2:	    andi.l #65535,d0
    72d8:	    moveq #1,d1
    72da:	    and.l d1,d0
    72dc:	/-- beq.s 730a <GetVBR+0x62>
		vbr = (APTR)Supervisor((ULONG (*)())getvbr);
    72de:	|   lea 28(sp),a0
    72e2:	|   lea -18(a0),a0
    72e6:	|   move.l a0,20(sp)
    72ea:	|   move.l 1c9ca <SysBase>,d0
    72f0:	|   movea.l d0,a6
    72f2:	|   move.l 20(sp),d7
    72f6:	|   exg d7,a5
    72f8:	|   jsr -30(a6)
    72fc:	|   exg d7,a5
    72fe:	|   move.l d0,16(sp)
    7302:	|   move.l 16(sp),d0
    7306:	|   move.l d0,24(sp)

	return vbr;
    730a:	\-> move.l 24(sp),d0
}
    730e:	    move.l (sp)+,d7
    7310:	    movea.l (sp)+,a6
    7312:	    lea 20(sp),sp
    7316:	    rts

00007318 <SetInterruptHandler>:

void SetInterruptHandler(APTR interrupt) {
	*(volatile APTR*)(((UBYTE*)VBR)+0x6c) = interrupt;
    7318:	movea.l 1c9f0 <VBR>,a0
    731e:	lea 108(a0),a0
    7322:	move.l 4(sp),(a0)
}
    7326:	nop
    7328:	rts

0000732a <GetInterruptHandler>:

APTR GetInterruptHandler() {
	return *(volatile APTR*)(((UBYTE*)VBR)+0x6c);
    732a:	movea.l 1c9f0 <VBR>,a0
    7330:	move.l 108(a0),d0
}
    7334:	rts

00007336 <TakeSystem>:
	UWORD tst=*(volatile UWORD*)&custom->dmaconr; //for compatiblity a1000
	(void)tst;
	while (*(volatile UWORD*)&custom->dmaconr&(1<<14)) {} //blitter busy wait
}

void TakeSystem() {
    7336:	       subq.l #8,sp
    7338:	       move.l a6,-(sp)
	KPrintF("TakeSystem: Run Forbid\n");
    733a:	       pea 18dcf <PutChar+0x10b1>
    7340:	       jsr 17254 <KPrintF>
    7346:	       addq.l #4,sp
	Forbid();
    7348:	       move.l 1c9ca <SysBase>,d0
    734e:	       movea.l d0,a6
    7350:	       jsr -132(a6)
	//Save current interrupts and DMA settings so we can restore them upon exit. 
	KPrintF("TakeSystem: Saving Registers\n");
    7354:	       pea 18de7 <PutChar+0x10c9>
    735a:	       jsr 17254 <KPrintF>
    7360:	       addq.l #4,sp
	SystemADKCON=custom->adkconr;
    7362:	       movea.l 1c9ce <custom>,a0
    7368:	       move.w 16(a0),d0
    736c:	       move.w d0,1c9ee <SystemADKCON>
	SystemInts=custom->intenar;
    7372:	       movea.l 1c9ce <custom>,a0
    7378:	       move.w 28(a0),d0
    737c:	       move.w d0,1c9ea <SystemInts>
	SystemDMA=custom->dmaconr;
    7382:	       movea.l 1c9ce <custom>,a0
    7388:	       move.w 2(a0),d0
    738c:	       move.w d0,1c9ec <SystemDMA>
	ActiView=GfxBase->ActiView; //store current view
    7392:	       movea.l 1c9d6 <GfxBase>,a0
    7398:	       move.l 34(a0),d0
    739c:	       move.l d0,1c9f8 <ActiView>

	KPrintF("TakeSystem: LoadView\n");
    73a2:	       pea 18e05 <PutChar+0x10e7>
    73a8:	       jsr 17254 <KPrintF>
    73ae:	       addq.l #4,sp
	LoadView(0);
    73b0:	       clr.l 4(sp)
    73b4:	       move.l 1c9d6 <GfxBase>,d0
    73ba:	       movea.l d0,a6
    73bc:	       movea.l 4(sp),a1
    73c0:	       jsr -222(a6)
	KPrintF("TakeSystem: WaitTof\n");
    73c4:	       pea 18e1b <PutChar+0x10fd>
    73ca:	       jsr 17254 <KPrintF>
    73d0:	       addq.l #4,sp
	WaitTOF();
    73d2:	       move.l 1c9d6 <GfxBase>,d0
    73d8:	       movea.l d0,a6
    73da:	       jsr -270(a6)
	WaitTOF();
    73de:	       move.l 1c9d6 <GfxBase>,d0
    73e4:	       movea.l d0,a6
    73e6:	       jsr -270(a6)

	KPrintF("TakeSystem: WaitVBL\n");
    73ea:	       pea 18e30 <PutChar+0x1112>
    73f0:	       jsr 17254 <KPrintF>
    73f6:	       addq.l #4,sp
	WaitVbl();
    73f8:	       jsr 17188 <WaitVbl>
	WaitVbl();
    73fe:	       jsr 17188 <WaitVbl>

	KPrintF("TakeSystem: Doing Blitter Stuff\n");
    7404:	       pea 18e45 <PutChar+0x1127>
    740a:	       jsr 17254 <KPrintF>
    7410:	       addq.l #4,sp
	OwnBlitter();
    7412:	       move.l 1c9d6 <GfxBase>,d0
    7418:	       movea.l d0,a6
    741a:	       jsr -456(a6)
	WaitBlit();	
    741e:	       move.l 1c9d6 <GfxBase>,d0
    7424:	       movea.l d0,a6
    7426:	       jsr -228(a6)
	Disable();
    742a:	       move.l 1c9ca <SysBase>,d0
    7430:	       movea.l d0,a6
    7432:	       jsr -120(a6)
	
	//custom->intena=0x7fff;//disable all interrupts
	//custom->intreq=0x7fff;//Clear any interrupts that were pending
	
	KPrintF("TakeSystem: Clear DMA\n");
    7436:	       pea 18e66 <PutChar+0x1148>
    743c:	       jsr 17254 <KPrintF>
    7442:	       addq.l #4,sp
	custom->dmacon=0x7fff;//Clear all DMA channels
    7444:	       movea.l 1c9ce <custom>,a0
    744a:	       move.w #32767,150(a0)

	KPrintF("TakeSystem: Set all colors to black\n");
    7450:	       pea 18e7d <PutChar+0x115f>
    7456:	       jsr 17254 <KPrintF>
    745c:	       addq.l #4,sp
	//set all colors black
	for(int a=0;a<32;a++)
    745e:	       clr.l 8(sp)
    7462:	   /-- bra.s 7480 <TakeSystem+0x14a>
		custom->color[a]=0;
    7464:	/--|-> movea.l 1c9ce <custom>,a0
    746a:	|  |   move.l 8(sp),d0
    746e:	|  |   addi.l #192,d0
    7474:	|  |   add.l d0,d0
    7476:	|  |   move.w #0,(0,a0,d0.l)
	for(int a=0;a<32;a++)
    747c:	|  |   addq.l #1,8(sp)
    7480:	|  \-> moveq #31,d0
    7482:	|      cmp.l 8(sp),d0
    7486:	\----- bge.s 7464 <TakeSystem+0x12e>

	WaitVbl();
    7488:	       jsr 17188 <WaitVbl>
	WaitVbl();
    748e:	       jsr 17188 <WaitVbl>

	KPrintF("TakeSystem: Save System interrupts\n");
    7494:	       pea 18ea2 <PutChar+0x1184>
    749a:	       jsr 17254 <KPrintF>
    74a0:	       addq.l #4,sp
	VBR=GetVBR();
    74a2:	       jsr 72a8 <GetVBR>
    74a8:	       move.l d0,1c9f0 <VBR>
	SystemIrq=GetInterruptHandler(); //store interrupt register*/
    74ae:	       jsr 732a <GetInterruptHandler>
    74b4:	       move.l d0,1c9f4 <SystemIrq>
}
    74ba:	       nop
    74bc:	       movea.l (sp)+,a6
    74be:	       addq.l #8,sp
    74c0:	       rts

000074c2 <FreeSystem>:

void FreeSystem() { 
    74c2:	subq.l #4,sp
    74c4:	move.l a6,-(sp)
	WaitVbl();
    74c6:	jsr 17188 <WaitVbl>
	WaitBlit();
    74cc:	move.l 1c9d6 <GfxBase>,d0
    74d2:	movea.l d0,a6
    74d4:	jsr -228(a6)
	custom->intena=0x7fff;//disable all interrupts
    74d8:	movea.l 1c9ce <custom>,a0
    74de:	move.w #32767,154(a0)
	custom->intreq=0x7fff;//Clear any interrupts that were pending
    74e4:	movea.l 1c9ce <custom>,a0
    74ea:	move.w #32767,156(a0)
	custom->dmacon=0x7fff;//Clear all DMA channels
    74f0:	movea.l 1c9ce <custom>,a0
    74f6:	move.w #32767,150(a0)

	//restore interrupts
	SetInterruptHandler(SystemIrq);
    74fc:	move.l 1c9f4 <SystemIrq>,d0
    7502:	move.l d0,-(sp)
    7504:	jsr 7318 <SetInterruptHandler>
    750a:	addq.l #4,sp

	/*Restore system copper list(s). */
	custom->cop1lc=(ULONG)GfxBase->copinit;
    750c:	movea.l 1c9d6 <GfxBase>,a0
    7512:	move.l 38(a0),d0
    7516:	movea.l 1c9ce <custom>,a0
    751c:	move.l d0,128(a0)
	custom->cop2lc=(ULONG)GfxBase->LOFlist;
    7520:	movea.l 1c9d6 <GfxBase>,a0
    7526:	move.l 50(a0),d0
    752a:	movea.l 1c9ce <custom>,a0
    7530:	move.l d0,132(a0)
	custom->copjmp1=0x7fff; //start coppper
    7534:	movea.l 1c9ce <custom>,a0
    753a:	move.w #32767,136(a0)

	/*Restore all interrupts and DMA settings. */
	//custom->intena=SystemInts|0x8000;
	custom->dmacon=SystemDMA|0x8000;
    7540:	move.w 1c9ec <SystemDMA>,d0
    7546:	movea.l 1c9ce <custom>,a0
    754c:	ori.w #-32768,d0
    7550:	move.w d0,150(a0)
	custom->adkcon=SystemADKCON|0x8000;
    7554:	move.w 1c9ee <SystemADKCON>,d0
    755a:	movea.l 1c9ce <custom>,a0
    7560:	ori.w #-32768,d0
    7564:	move.w d0,158(a0)

	WaitBlit();	
    7568:	move.l 1c9d6 <GfxBase>,d0
    756e:	movea.l d0,a6
    7570:	jsr -228(a6)
	DisownBlitter();
    7574:	move.l 1c9d6 <GfxBase>,d0
    757a:	movea.l d0,a6
    757c:	jsr -462(a6)
	Enable();
    7580:	move.l 1c9ca <SysBase>,d0
    7586:	movea.l d0,a6
    7588:	jsr -126(a6)

	LoadView(ActiView);
    758c:	move.l 1c9f8 <ActiView>,4(sp)
    7594:	move.l 1c9d6 <GfxBase>,d0
    759a:	movea.l d0,a6
    759c:	movea.l 4(sp),a1
    75a0:	jsr -222(a6)
	WaitTOF();
    75a4:	move.l 1c9d6 <GfxBase>,d0
    75aa:	movea.l d0,a6
    75ac:	jsr -270(a6)
	WaitTOF();
    75b0:	move.l 1c9d6 <GfxBase>,d0
    75b6:	movea.l d0,a6
    75b8:	jsr -270(a6)

	Permit();
    75bc:	move.l 1c9ca <SysBase>,d0
    75c2:	movea.l d0,a6
    75c4:	jsr -138(a6)
}
    75c8:	nop
    75ca:	movea.l (sp)+,a6
    75cc:	addq.l #4,sp
    75ce:	rts

000075d0 <main>:
static void Wait10() { WaitLine(0x10); }
static void Wait11() { WaitLine(0x11); }
static void Wait12() { WaitLine(0x12); }
static void Wait13() { WaitLine(0x13); }

int main(int argc, char *argv[]) {
    75d0:	    lea -132(sp),sp
    75d4:	    movem.l d2-d3/a6,-(sp)

	int *bp = 0x200;
    75d8:	    move.l #512,140(sp)
  	*bp = 0;
    75e0:	    movea.l 140(sp),a0
    75e4:	    clr.l (a0)

	SysBase = *((struct ExecBase**)4UL);
    75e6:	    movea.w #4,a0
    75ea:	    move.l (a0),d0
    75ec:	    move.l d0,1c9ca <SysBase>
	custom = (struct Custom*)0xdff000;	
    75f2:	    move.l #14675968,1c9ce <custom>


	// We will use the graphics library only to locate and restore the system copper list once we are through.
	GfxBase = (struct GfxBase *)OpenLibrary((CONST_STRPTR)"graphics.library",0);
    75fc:	    move.l #102086,136(sp)
    7604:	    clr.l 132(sp)
    7608:	    move.l 1c9ca <SysBase>,d0
    760e:	    movea.l d0,a6
    7610:	    movea.l 136(sp),a1
    7614:	    move.l 132(sp),d0
    7618:	    jsr -552(a6)
    761c:	    move.l d0,128(sp)
    7620:	    move.l 128(sp),d0
    7624:	    move.l d0,1c9d6 <GfxBase>
	if (!GfxBase)
    762a:	    move.l 1c9d6 <GfxBase>,d0
    7630:	/-- bne.s 7646 <main+0x76>
		Exit(0);
    7632:	|   clr.l 124(sp)
    7636:	|   move.l 1c9d2 <DOSBase>,d0
    763c:	|   movea.l d0,a6
    763e:	|   move.l 124(sp),d1
    7642:	|   jsr -144(a6)

	// used for printing
	DOSBase = (struct DosLibrary*)OpenLibrary((CONST_STRPTR)"dos.library", 0);
    7646:	\-> move.l #102103,120(sp)
    764e:	    clr.l 116(sp)
    7652:	    move.l 1c9ca <SysBase>,d0
    7658:	    movea.l d0,a6
    765a:	    movea.l 120(sp),a1
    765e:	    move.l 116(sp),d0
    7662:	    jsr -552(a6)
    7666:	    move.l d0,112(sp)
    766a:	    move.l 112(sp),d0
    766e:	    move.l d0,1c9d2 <DOSBase>
	if (!DOSBase)
    7674:	    move.l 1c9d2 <DOSBase>,d0
    767a:	/-- bne.s 7690 <main+0xc0>
		Exit(0);
    767c:	|   clr.l 108(sp)
    7680:	|   move.l 1c9d2 <DOSBase>,d0
    7686:	|   movea.l d0,a6
    7688:	|   move.l 108(sp),d1
    768c:	|   jsr -144(a6)

	MathIeeeSingBasBase = (struct MathIEEEBase *) OpenLibrary("mathieeesingbas.library", 0);	
    7690:	\-> move.l #102115,104(sp)
    7698:	    clr.l 100(sp)
    769c:	    move.l 1c9ca <SysBase>,d0
    76a2:	    movea.l d0,a6
    76a4:	    movea.l 104(sp),a1
    76a8:	    move.l 100(sp),d0
    76ac:	    jsr -552(a6)
    76b0:	    move.l d0,96(sp)
    76b4:	    move.l 96(sp),d0
    76b8:	    move.l d0,1c9da <MathIeeeSingBasBase>
	if (!MathIeeeSingBasBase)
    76be:	    move.l 1c9da <MathIeeeSingBasBase>,d0
    76c4:	/-- bne.s 76da <main+0x10a>
		Exit(0);	
    76c6:	|   clr.l 92(sp)
    76ca:	|   move.l 1c9d2 <DOSBase>,d0
    76d0:	|   movea.l d0,a6
    76d2:	|   move.l 92(sp),d1
    76d6:	|   jsr -144(a6)

	MathIeeeSingTransBase = (struct MathIEEEBase *) OpenLibrary("mathieeesingtrans.library",0);													
    76da:	\-> move.l #102139,88(sp)
    76e2:	    clr.l 84(sp)
    76e6:	    move.l 1c9ca <SysBase>,d0
    76ec:	    movea.l d0,a6
    76ee:	    movea.l 88(sp),a1
    76f2:	    move.l 84(sp),d0
    76f6:	    jsr -552(a6)
    76fa:	    move.l d0,80(sp)
    76fe:	    move.l 80(sp),d0
    7702:	    move.l d0,1c9de <MathIeeeSingTransBase>
	if (!MathIeeeSingTransBase)
    7708:	    move.l 1c9de <MathIeeeSingTransBase>,d0
    770e:	/-- bne.s 7724 <main+0x154>
		Exit(0);
    7710:	|   clr.l 76(sp)
    7714:	|   move.l 1c9d2 <DOSBase>,d0
    771a:	|   movea.l d0,a6
    771c:	|   move.l 76(sp),d1
    7720:	|   jsr -144(a6)

	MathIeeeDoubTransBase =  (struct MathIEEEBase *) OpenLibrary("mathieeedoubtrans.library",0);
    7724:	\-> move.l #102165,72(sp)
    772c:	    clr.l 68(sp)
    7730:	    move.l 1c9ca <SysBase>,d0
    7736:	    movea.l d0,a6
    7738:	    movea.l 72(sp),a1
    773c:	    move.l 68(sp),d0
    7740:	    jsr -552(a6)
    7744:	    move.l d0,64(sp)
    7748:	    move.l 64(sp),d0
    774c:	    move.l d0,1c9e6 <MathIeeeDoubTransBase>
	if (!MathIeeeDoubTransBase)		
    7752:	    move.l 1c9e6 <MathIeeeDoubTransBase>,d0
    7758:	/-- bne.s 776e <main+0x19e>
		Exit(0);
    775a:	|   clr.l 60(sp)
    775e:	|   move.l 1c9d2 <DOSBase>,d0
    7764:	|   movea.l d0,a6
    7766:	|   move.l 60(sp),d1
    776a:	|   jsr -144(a6)

	MathIeeeDoubBasBase = (struct MathIEEEBase *) OpenLibrary("mathieeedoubbas.library",0);
    776e:	\-> move.l #102191,56(sp)
    7776:	    clr.l 52(sp)
    777a:	    move.l 1c9ca <SysBase>,d0
    7780:	    movea.l d0,a6
    7782:	    movea.l 56(sp),a1
    7786:	    move.l 52(sp),d0
    778a:	    jsr -552(a6)
    778e:	    move.l d0,48(sp)
    7792:	    move.l 48(sp),d0
    7796:	    move.l d0,1c9e2 <MathIeeeDoubBasBase>
	if( !MathIeeeDoubBasBase) 
    779c:	    move.l 1c9e2 <MathIeeeDoubBasBase>,d0
    77a2:	/-- bne.s 77b8 <main+0x1e8>
		Exit(0);
    77a4:	|   clr.l 44(sp)
    77a8:	|   move.l 1c9d2 <DOSBase>,d0
    77ae:	|   movea.l d0,a6
    77b0:	|   move.l 44(sp),d1
    77b4:	|   jsr -144(a6)
	

	KPrintF(" debugger from Amiga Test 030!\n");
    77b8:	\-> pea 18f47 <PutChar+0x1229>
    77be:	    jsr 17254 <KPrintF>
    77c4:	    addq.l #4,sp

	Write(Output(), (APTR)"Hello console Test 030!\n", 25);
    77c6:	    move.l 1c9d2 <DOSBase>,d0
    77cc:	    movea.l d0,a6
    77ce:	    jsr -60(a6)
    77d2:	    move.l d0,40(sp)
    77d6:	    move.l 40(sp),d0
    77da:	    move.l d0,36(sp)
    77de:	    move.l #102247,32(sp)
    77e6:	    moveq #25,d0
    77e8:	    move.l d0,28(sp)
    77ec:	    move.l 1c9d2 <DOSBase>,d0
    77f2:	    movea.l d0,a6
    77f4:	    move.l 36(sp),d1
    77f8:	    move.l 32(sp),d2
    77fc:	    move.l 28(sp),d3
    7800:	    jsr -48(a6)
    7804:	    move.l d0,24(sp)
	Delay(50);
    7808:	    moveq #50,d0
    780a:	    move.l d0,20(sp)
    780e:	    move.l 1c9d2 <DOSBase>,d0
    7814:	    movea.l d0,a6
    7816:	    move.l 20(sp),d1
    781a:	    jsr -198(a6)
	if(p61Init(module) != 0)
		KPrintF("p61Init failed!\n");
#endif
	warpmode(0);*/

	KPrintF("Taking System\n");
    781e:	    pea 18f80 <PutChar+0x1262>
    7824:	    jsr 17254 <KPrintF>
    782a:	    addq.l #4,sp
	TakeSystem();
    782c:	    jsr 7336 <TakeSystem>
	KPrintF("System Taken\n");
    7832:	    pea 18f8f <PutChar+0x1271>
    7838:	    jsr 17254 <KPrintF>
    783e:	    addq.l #4,sp

	custom->dmacon = 0x87ff;
    7840:	    movea.l 1c9ce <custom>,a0
    7846:	    move.w #-30721,150(a0)
	WaitVbl();
    784c:	    jsr 17188 <WaitVbl>

	KPrintF("Starting main_sludge\n");
    7852:	    pea 18f9d <PutChar+0x127f>
    7858:	    jsr 17254 <KPrintF>
    785e:	    addq.l #4,sp
	main_sludge(argc, argv);	
    7860:	    move.l 152(sp),-(sp)
    7864:	    move.l 152(sp),-(sp)
    7868:	    jsr 4166 <main_sludge>
    786e:	    addq.l #8,sp
#ifdef MUSIC
	p61End();
#endif

	// END
	FreeSystem();
    7870:	    jsr 74c2 <FreeSystem>

	CloseLibrary((struct Library*)DOSBase);
    7876:	    move.l 1c9d2 <DOSBase>,16(sp)
    787e:	    move.l 1c9ca <SysBase>,d0
    7884:	    movea.l d0,a6
    7886:	    movea.l 16(sp),a1
    788a:	    jsr -414(a6)
	CloseLibrary((struct Library*)GfxBase);
    788e:	    move.l 1c9d6 <GfxBase>,12(sp)
    7896:	    move.l 1c9ca <SysBase>,d0
    789c:	    movea.l d0,a6
    789e:	    movea.l 12(sp),a1
    78a2:	    jsr -414(a6)
    78a6:	    moveq #0,d0
}
    78a8:	    movem.l (sp)+,d2-d3/a6
    78ac:	    lea 132(sp),sp
    78b0:	    rts

000078b2 <addStatusBar>:
#include "support/gcc8_c_support.h"

struct statusStuff mainStatus;
struct statusStuff * nowStatus = & mainStatus;

void addStatusBar () {
    78b2:	    lea -16(sp),sp
    78b6:	    move.l a6,-(sp)
	struct statusBar * newStat = AllocVec(sizeof(struct statusBar), MEMF_ANY);
    78b8:	    moveq #8,d0
    78ba:	    move.l d0,16(sp)
    78be:	    clr.l 12(sp)
    78c2:	    move.l 1c9ca <SysBase>,d0
    78c8:	    movea.l d0,a6
    78ca:	    move.l 16(sp),d0
    78ce:	    move.l 12(sp),d1
    78d2:	    jsr -684(a6)
    78d6:	    move.l d0,8(sp)
    78da:	    move.l 8(sp),d0
    78de:	    move.l d0,4(sp)
	if (!newStat) {
    78e2:	/-- bne.s 7912 <addStatusBar+0x60>
		newStat -> next = nowStatus -> firstStatusBar;
    78e4:	|   movea.l 1c350 <nowStatus>,a0
    78ea:	|   move.l (a0),d0
    78ec:	|   movea.l 4(sp),a0
    78f0:	|   move.l d0,4(a0)
		newStat -> text = copyString ("");
    78f4:	|   pea 189f3 <PutChar+0xcd5>
    78fa:	|   jsr b8 <copyString>
    7900:	|   addq.l #4,sp
    7902:	|   movea.l 4(sp),a0
    7906:	|   move.l d0,(a0)
		nowStatus -> firstStatusBar = newStat;
    7908:	|   movea.l 1c350 <nowStatus>,a0
    790e:	|   move.l 4(sp),(a0)
	}
}
    7912:	\-> nop
    7914:	    movea.l (sp)+,a6
    7916:	    lea 16(sp),sp
    791a:	    rts

0000791c <clearStatusBar>:

void clearStatusBar () {
    791c:	       lea -16(sp),sp
    7920:	       move.l a6,-(sp)
	struct statusBar * stat = nowStatus -> firstStatusBar;
    7922:	       movea.l 1c350 <nowStatus>,a0
    7928:	       move.l (a0),16(sp)
	struct statusBar * kill;
	nowStatus -> litStatus = -1;
    792c:	       movea.l 1c350 <nowStatus>,a0
    7932:	       moveq #-1,d0
    7934:	       move.l d0,6(a0)
	while (stat) {
    7938:	   /-- bra.s 7978 <clearStatusBar+0x5c>
		kill = stat;
    793a:	/--|-> move.l 16(sp),12(sp)
		stat = stat -> next;
    7940:	|  |   movea.l 16(sp),a0
    7944:	|  |   move.l 4(a0),16(sp)
		FreeVec(kill -> text);
    794a:	|  |   movea.l 12(sp),a0
    794e:	|  |   move.l (a0),8(sp)
    7952:	|  |   move.l 1c9ca <SysBase>,d0
    7958:	|  |   movea.l d0,a6
    795a:	|  |   movea.l 8(sp),a1
    795e:	|  |   jsr -690(a6)
		FreeVec(kill);
    7962:	|  |   move.l 12(sp),4(sp)
    7968:	|  |   move.l 1c9ca <SysBase>,d0
    796e:	|  |   movea.l d0,a6
    7970:	|  |   movea.l 4(sp),a1
    7974:	|  |   jsr -690(a6)
	while (stat) {
    7978:	|  \-> tst.l 16(sp)
    797c:	\----- bne.s 793a <clearStatusBar+0x1e>
	}
	nowStatus -> firstStatusBar = NULL;
    797e:	       movea.l 1c350 <nowStatus>,a0
    7984:	       clr.l (a0)
}
    7986:	       nop
    7988:	       movea.l (sp)+,a6
    798a:	       lea 16(sp),sp
    798e:	       rts

00007990 <initStatusBar>:

void initStatusBar () {
	mainStatus.firstStatusBar = NULL;
    7990:	clr.l 1c9fc <mainStatus>
	mainStatus.alignStatus = IN_THE_CENTRE;
    7996:	move.w #-1,1ca00 <mainStatus+0x4>
	mainStatus.litStatus = -1;
    799e:	moveq #-1,d0
    79a0:	move.l d0,1ca02 <mainStatus+0x6>
	mainStatus.statusX = 10;
    79a6:	moveq #10,d0
    79a8:	move.l d0,1ca06 <mainStatus+0xa>
	mainStatus.statusY = winHeight - 15;
    79ae:	movea.l 1c922 <winHeight>,a0
    79b4:	lea -15(a0),a0
    79b8:	move.l a0,d0
    79ba:	move.l d0,1ca0a <mainStatus+0xe>
	//statusBarColour (255, 255, 255); Amiga Todo: Amigize this
	//statusBarLitColour (255, 255, 128); Amiga Todo: Amigize this
}
    79c0:	nop
    79c2:	rts

000079c4 <killLastStatus>:

void killLastStatus () {
    79c4:	    lea -12(sp),sp
    79c8:	    move.l a6,-(sp)
	if (nowStatus -> firstStatusBar) {
    79ca:	    movea.l 1c350 <nowStatus>,a0
    79d0:	    move.l (a0),d0
    79d2:	/-- beq.s 7a1c <killLastStatus+0x58>
		struct statusBar * kill = nowStatus -> firstStatusBar;
    79d4:	|   movea.l 1c350 <nowStatus>,a0
    79da:	|   move.l (a0),12(sp)
		nowStatus -> firstStatusBar = kill -> next;
    79de:	|   movea.l 1c350 <nowStatus>,a0
    79e4:	|   movea.l 12(sp),a1
    79e8:	|   move.l 4(a1),d0
    79ec:	|   move.l d0,(a0)
		FreeVec(kill -> text);
    79ee:	|   movea.l 12(sp),a0
    79f2:	|   move.l (a0),8(sp)
    79f6:	|   move.l 1c9ca <SysBase>,d0
    79fc:	|   movea.l d0,a6
    79fe:	|   movea.l 8(sp),a1
    7a02:	|   jsr -690(a6)
		FreeVec(kill);
    7a06:	|   move.l 12(sp),4(sp)
    7a0c:	|   move.l 1c9ca <SysBase>,d0
    7a12:	|   movea.l d0,a6
    7a14:	|   movea.l 4(sp),a1
    7a18:	|   jsr -690(a6)
	}
}
    7a1c:	\-> nop
    7a1e:	    movea.l (sp)+,a6
    7a20:	    lea 12(sp),sp
    7a24:	    rts

00007a26 <positionStatus>:
	}
	return TRUE;
}

void positionStatus (int x, int y) {
	nowStatus -> statusX = x;
    7a26:	movea.l 1c350 <nowStatus>,a0
    7a2c:	move.l 4(sp),10(a0)
	nowStatus -> statusY = y;
    7a32:	movea.l 1c350 <nowStatus>,a0
    7a38:	move.l 8(sp),14(a0)
}
    7a3e:	nop
    7a40:	rts

00007a42 <saveStatusBars>:


void saveStatusBars (BPTR fp) {
    7a42:	       lea -100(sp),sp
    7a46:	       move.l a6,-(sp)
    7a48:	       move.l d2,-(sp)
	struct statusBar * viewLine = nowStatus -> firstStatusBar;
    7a4a:	       movea.l 1c350 <nowStatus>,a0
    7a50:	       move.l (a0),104(sp)

	put2bytes (nowStatus -> alignStatus, fp);
    7a54:	       movea.l 1c350 <nowStatus>,a0
    7a5a:	       move.w 4(a0),d0
    7a5e:	       move.w d0,d0
    7a60:	       andi.l #65535,d0
    7a66:	       move.l 112(sp),-(sp)
    7a6a:	       move.l d0,-(sp)
    7a6c:	       jsr 8d0 <put2bytes>
    7a72:	       addq.l #8,sp
	putSigned (nowStatus -> litStatus, fp);
    7a74:	       movea.l 1c350 <nowStatus>,a0
    7a7a:	       move.l 6(a0),d0
    7a7e:	       move.l d0,d0
    7a80:	       movea.w d0,a0
    7a82:	       move.l 112(sp),-(sp)
    7a86:	       move.l a0,-(sp)
    7a88:	       jsr a9c <putSigned>
    7a8e:	       addq.l #8,sp
	put2bytes (nowStatus -> statusX, fp);
    7a90:	       movea.l 1c350 <nowStatus>,a0
    7a96:	       move.l 10(a0),d0
    7a9a:	       move.l 112(sp),-(sp)
    7a9e:	       move.l d0,-(sp)
    7aa0:	       jsr 8d0 <put2bytes>
    7aa6:	       addq.l #8,sp
	put2bytes (nowStatus -> statusY, fp);
    7aa8:	       movea.l 1c350 <nowStatus>,a0
    7aae:	       move.l 14(a0),d0
    7ab2:	       move.l 112(sp),-(sp)
    7ab6:	       move.l d0,-(sp)
    7ab8:	       jsr 8d0 <put2bytes>
    7abe:	       addq.l #8,sp

	FPutC (fp, nowStatus -> statusR);
    7ac0:	       move.l 112(sp),100(sp)
    7ac6:	       movea.l 1c350 <nowStatus>,a0
    7acc:	       move.l 18(a0),96(sp)
    7ad2:	       move.l 1c9d2 <DOSBase>,d0
    7ad8:	       movea.l d0,a6
    7ada:	       move.l 100(sp),d1
    7ade:	       move.l 96(sp),d2
    7ae2:	       jsr -312(a6)
    7ae6:	       move.l d0,92(sp)
	FPutC (fp, nowStatus -> statusG);
    7aea:	       move.l 112(sp),88(sp)
    7af0:	       movea.l 1c350 <nowStatus>,a0
    7af6:	       move.l 22(a0),84(sp)
    7afc:	       move.l 1c9d2 <DOSBase>,d0
    7b02:	       movea.l d0,a6
    7b04:	       move.l 88(sp),d1
    7b08:	       move.l 84(sp),d2
    7b0c:	       jsr -312(a6)
    7b10:	       move.l d0,80(sp)
	FPutC (fp, nowStatus -> statusB);
    7b14:	       move.l 112(sp),76(sp)
    7b1a:	       movea.l 1c350 <nowStatus>,a0
    7b20:	       move.l 26(a0),72(sp)
    7b26:	       move.l 1c9d2 <DOSBase>,d0
    7b2c:	       movea.l d0,a6
    7b2e:	       move.l 76(sp),d1
    7b32:	       move.l 72(sp),d2
    7b36:	       jsr -312(a6)
    7b3a:	       move.l d0,68(sp)
	FPutC (fp, nowStatus -> statusLR);
    7b3e:	       move.l 112(sp),64(sp)
    7b44:	       movea.l 1c350 <nowStatus>,a0
    7b4a:	       move.l 30(a0),60(sp)
    7b50:	       move.l 1c9d2 <DOSBase>,d0
    7b56:	       movea.l d0,a6
    7b58:	       move.l 64(sp),d1
    7b5c:	       move.l 60(sp),d2
    7b60:	       jsr -312(a6)
    7b64:	       move.l d0,56(sp)
	FPutC (fp, nowStatus -> statusLG);
    7b68:	       move.l 112(sp),52(sp)
    7b6e:	       movea.l 1c350 <nowStatus>,a0
    7b74:	       move.l 34(a0),48(sp)
    7b7a:	       move.l 1c9d2 <DOSBase>,d0
    7b80:	       movea.l d0,a6
    7b82:	       move.l 52(sp),d1
    7b86:	       move.l 48(sp),d2
    7b8a:	       jsr -312(a6)
    7b8e:	       move.l d0,44(sp)
	FPutC (fp, nowStatus -> statusLB);
    7b92:	       move.l 112(sp),40(sp)
    7b98:	       movea.l 1c350 <nowStatus>,a0
    7b9e:	       move.l 38(a0),36(sp)
    7ba4:	       move.l 1c9d2 <DOSBase>,d0
    7baa:	       movea.l d0,a6
    7bac:	       move.l 40(sp),d1
    7bb0:	       move.l 36(sp),d2
    7bb4:	       jsr -312(a6)
    7bb8:	       move.l d0,32(sp)

	// Write what's being said
	while (viewLine) {
    7bbc:	   /-- bra.s 7c00 <saveStatusBars+0x1be>
		FPutC (fp,1);
    7bbe:	/--|-> move.l 112(sp),16(sp)
    7bc4:	|  |   moveq #1,d0
    7bc6:	|  |   move.l d0,12(sp)
    7bca:	|  |   move.l 1c9d2 <DOSBase>,d0
    7bd0:	|  |   movea.l d0,a6
    7bd2:	|  |   move.l 16(sp),d1
    7bd6:	|  |   move.l 12(sp),d2
    7bda:	|  |   jsr -312(a6)
    7bde:	|  |   move.l d0,8(sp)
		writeString (viewLine -> text, fp);
    7be2:	|  |   movea.l 104(sp),a0
    7be6:	|  |   move.l (a0),d0
    7be8:	|  |   move.l 112(sp),-(sp)
    7bec:	|  |   move.l d0,-(sp)
    7bee:	|  |   jsr bd8 <writeString>
    7bf4:	|  |   addq.l #8,sp
		viewLine = viewLine -> next;
    7bf6:	|  |   movea.l 104(sp),a0
    7bfa:	|  |   move.l 4(a0),104(sp)
	while (viewLine) {
    7c00:	|  \-> tst.l 104(sp)
    7c04:	\----- bne.s 7bbe <saveStatusBars+0x17c>
	}
	FPutC (fp,0);
    7c06:	       move.l 112(sp),28(sp)
    7c0c:	       clr.l 24(sp)
    7c10:	       move.l 1c9d2 <DOSBase>,d0
    7c16:	       movea.l d0,a6
    7c18:	       move.l 28(sp),d1
    7c1c:	       move.l 24(sp),d2
    7c20:	       jsr -312(a6)
    7c24:	       move.l d0,20(sp)
}
    7c28:	       nop
    7c2a:	       move.l (sp)+,d2
    7c2c:	       movea.l (sp)+,a6
    7c2e:	       lea 100(sp),sp
    7c32:	       rts

00007c34 <setLitStatus>:

void setLitStatus (int i) {
	nowStatus -> litStatus = i;
    7c34:	movea.l 1c350 <nowStatus>,a0
    7c3a:	move.l 4(sp),6(a0)
}
    7c40:	nop
    7c42:	rts

00007c44 <setStatusBar>:

void setStatusBar (char * txt) {
    7c44:	    subq.l #4,sp
    7c46:	    move.l a6,-(sp)
    7c48:	    move.l a2,-(sp)
	if (nowStatus -> firstStatusBar) {
    7c4a:	    movea.l 1c350 <nowStatus>,a0
    7c50:	    move.l (a0),d0
    7c52:	/-- beq.s 7c86 <setStatusBar+0x42>
		FreeVec(nowStatus -> firstStatusBar -> text);
    7c54:	|   movea.l 1c350 <nowStatus>,a0
    7c5a:	|   movea.l (a0),a0
    7c5c:	|   move.l (a0),8(sp)
    7c60:	|   move.l 1c9ca <SysBase>,d0
    7c66:	|   movea.l d0,a6
    7c68:	|   movea.l 8(sp),a1
    7c6c:	|   jsr -690(a6)
		nowStatus -> firstStatusBar -> text = copyString (txt);
    7c70:	|   movea.l 1c350 <nowStatus>,a0
    7c76:	|   movea.l (a0),a2
    7c78:	|   move.l 16(sp),-(sp)
    7c7c:	|   jsr b8 <copyString>
    7c82:	|   addq.l #4,sp
    7c84:	|   move.l d0,(a2)
	}
}
    7c86:	\-> nop
    7c88:	    movea.l (sp)+,a2
    7c8a:	    movea.l (sp)+,a6
    7c8c:	    addq.l #4,sp
    7c8e:	    rts

00007c90 <statusBarText>:

const char * statusBarText () {
	if (nowStatus -> firstStatusBar) {
    7c90:	       movea.l 1c350 <nowStatus>,a0
    7c96:	       move.l (a0),d0
    7c98:	/----- beq.s 7ca6 <statusBarText+0x16>
		return nowStatus -> firstStatusBar -> text;
    7c9a:	|      movea.l 1c350 <nowStatus>,a0
    7ca0:	|      movea.l (a0),a0
    7ca2:	|      move.l (a0),d0
    7ca4:	|  /-- bra.s 7cac <statusBarText+0x1c>
	} else {
		return "";
    7ca6:	\--|-> move.l #100851,d0
	}
    7cac:	   \-> rts

00007cae <addSpeechLine>:

struct speechStruct * speech;
FLOAT speechSpeed = 1;


void addSpeechLine (char * theLine, int x, int *offset) {
    7cae:	       lea -28(sp),sp
    7cb2:	       movem.l d2-d5/a6,-(sp)
	int halfWidth = (stringWidth (theLine) >> 1)/cameraZoom;
    7cb6:	       move.l 52(sp),-(sp)
    7cba:	       jsr 158d6 <stringWidth>
    7cc0:	       addq.l #4,sp
    7cc2:	       asr.l #1,d0
    7cc4:	       move.l d0,-(sp)
    7cc6:	       jsr 17686 <__floatsisf>
    7ccc:	       addq.l #4,sp
    7cce:	       move.l d0,d1
    7cd0:	       move.l 1c368 <cameraZoom>,d0
    7cd6:	       move.l d0,-(sp)
    7cd8:	       move.l d1,-(sp)
    7cda:	       jsr 1753c <__divsf3>
    7ce0:	       addq.l #8,sp
    7ce2:	       move.l d0,-(sp)
    7ce4:	       jsr 1761e <__fixsfsi>
    7cea:	       addq.l #4,sp
    7cec:	       move.l d0,44(sp)
	int xx1 = x - (halfWidth);
    7cf0:	       move.l 56(sp),d0
    7cf4:	       sub.l 44(sp),d0
    7cf8:	       move.l d0,40(sp)
	int xx2 = x + (halfWidth);
    7cfc:	       move.l 56(sp),d0
    7d00:	       add.l 44(sp),d0
    7d04:	       move.l d0,36(sp)
	struct speechLine * newLine = AllocVec(sizeof(struct speechLine),MEMF_ANY);
    7d08:	       moveq #12,d0
    7d0a:	       move.l d0,32(sp)
    7d0e:	       clr.l 28(sp)
    7d12:	       move.l 1c9ca <SysBase>,d0
    7d18:	       movea.l d0,a6
    7d1a:	       move.l 32(sp),d0
    7d1e:	       move.l 28(sp),d1
    7d22:	       jsr -684(a6)
    7d26:	       move.l d0,24(sp)
    7d2a:	       move.l 24(sp),d0
    7d2e:	       move.l d0,20(sp)

	newLine -> next = speech -> allSpeech;
    7d32:	       movea.l 1ca26 <speech>,a0
    7d38:	       move.l 4(a0),d0
    7d3c:	       movea.l 20(sp),a0
    7d40:	       move.l d0,4(a0)
	newLine -> textLine = copyString (theLine);
    7d44:	       move.l 52(sp),-(sp)
    7d48:	       jsr b8 <copyString>
    7d4e:	       addq.l #4,sp
    7d50:	       movea.l 20(sp),a0
    7d54:	       move.l d0,(a0)
	newLine -> x = xx1;
    7d56:	       movea.l 20(sp),a0
    7d5a:	       move.l 40(sp),8(a0)
	speech -> allSpeech = newLine;
    7d60:	       movea.l 1ca26 <speech>,a0
    7d66:	       move.l 20(sp),4(a0)
	if ((xx1 < 5) && (*offset < (5 - xx1))) {
    7d6c:	       moveq #4,d0
    7d6e:	       cmp.l 40(sp),d0
    7d72:	   /-- blt.s 7d94 <addSpeechLine+0xe6>
    7d74:	   |   movea.l 60(sp),a0
    7d78:	   |   move.l (a0),d1
    7d7a:	   |   moveq #5,d0
    7d7c:	   |   sub.l 40(sp),d0
    7d80:	   |   cmp.l d1,d0
    7d82:	   +-- ble.s 7d94 <addSpeechLine+0xe6>
		*offset = 5 - xx1;
    7d84:	   |   moveq #5,d0
    7d86:	   |   sub.l 40(sp),d0
    7d8a:	   |   movea.l 60(sp),a0
    7d8e:	   |   move.l d0,(a0)
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
		*offset = (int) ((FLOAT)winWidth/cameraZoom) - 5 - xx2;
	}
}
    7d90:	/--|-- bra.w 7ec0 <addSpeechLine+0x212>
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
    7d94:	|  \-> move.l 36(sp),-(sp)
    7d98:	|      jsr 17686 <__floatsisf>
    7d9e:	|      addq.l #4,sp
    7da0:	|      move.l d0,d2
    7da2:	|      move.l 1c91e <winWidth>,d0
    7da8:	|      move.l d0,-(sp)
    7daa:	|      jsr 176ae <__floatunsisf>
    7db0:	|      addq.l #4,sp
    7db2:	|      move.l d0,d1
    7db4:	|      move.l 1c368 <cameraZoom>,d0
    7dba:	|      move.l d0,-(sp)
    7dbc:	|      move.l d1,-(sp)
    7dbe:	|      jsr 1753c <__divsf3>
    7dc4:	|      addq.l #8,sp
    7dc6:	|      move.l #1084227584,-(sp)
    7dcc:	|      move.l d0,-(sp)
    7dce:	|      jsr 1797a <__subsf3>
    7dd4:	|      addq.l #8,sp
    7dd6:	|      move.l d0,-(sp)
    7dd8:	|      move.l d2,-(sp)
    7dda:	|      jsr 1776e <__gesf2>
    7de0:	|      addq.l #8,sp
    7de2:	|      tst.l d0
    7de4:	|  /-- bge.s 7dea <addSpeechLine+0x13c>
}
    7de6:	+--|-- bra.w 7ec0 <addSpeechLine+0x212>
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
    7dea:	|  \-> movea.l 60(sp),a0
    7dee:	|      move.l (a0),d0
    7df0:	|      move.l d0,-(sp)
    7df2:	|      jsr 17686 <__floatsisf>
    7df8:	|      addq.l #4,sp
    7dfa:	|      move.l d0,-(sp)
    7dfc:	|      jsr 175a8 <__extendsfdf2>
    7e02:	|      addq.l #4,sp
    7e04:	|      move.l d0,d4
    7e06:	|      move.l d1,d5
    7e08:	|      move.l 1c91e <winWidth>,d0
    7e0e:	|      move.l d0,-(sp)
    7e10:	|      jsr 176ae <__floatunsisf>
    7e16:	|      addq.l #4,sp
    7e18:	|      move.l d0,d1
    7e1a:	|      move.l 1c368 <cameraZoom>,d0
    7e20:	|      move.l d0,-(sp)
    7e22:	|      move.l d1,-(sp)
    7e24:	|      jsr 1753c <__divsf3>
    7e2a:	|      addq.l #8,sp
    7e2c:	|      move.l d0,-(sp)
    7e2e:	|      jsr 175a8 <__extendsfdf2>
    7e34:	|      addq.l #4,sp
    7e36:	|      clr.l -(sp)
    7e38:	|      move.l #1075052544,-(sp)
    7e3e:	|      move.l d1,-(sp)
    7e40:	|      move.l d0,-(sp)
    7e42:	|      jsr 17918 <__subdf3>
    7e48:	|      lea 16(sp),sp
    7e4c:	|      move.l d0,d2
    7e4e:	|      move.l d1,d3
    7e50:	|      move.l 36(sp),-(sp)
    7e54:	|      jsr 17646 <__floatsidf>
    7e5a:	|      addq.l #4,sp
    7e5c:	|      move.l d1,-(sp)
    7e5e:	|      move.l d0,-(sp)
    7e60:	|      move.l d3,-(sp)
    7e62:	|      move.l d2,-(sp)
    7e64:	|      jsr 17918 <__subdf3>
    7e6a:	|      lea 16(sp),sp
    7e6e:	|      move.l d1,-(sp)
    7e70:	|      move.l d0,-(sp)
    7e72:	|      move.l d5,-(sp)
    7e74:	|      move.l d4,-(sp)
    7e76:	|      jsr 177a4 <__gtdf2>
    7e7c:	|      lea 16(sp),sp
    7e80:	|      tst.l d0
    7e82:	|  /-- bgt.s 7e86 <addSpeechLine+0x1d8>
}
    7e84:	+--|-- bra.s 7ec0 <addSpeechLine+0x212>
		*offset = (int) ((FLOAT)winWidth/cameraZoom) - 5 - xx2;
    7e86:	|  \-> move.l 1c91e <winWidth>,d0
    7e8c:	|      move.l d0,-(sp)
    7e8e:	|      jsr 176ae <__floatunsisf>
    7e94:	|      addq.l #4,sp
    7e96:	|      move.l d0,d1
    7e98:	|      move.l 1c368 <cameraZoom>,d0
    7e9e:	|      move.l d0,-(sp)
    7ea0:	|      move.l d1,-(sp)
    7ea2:	|      jsr 1753c <__divsf3>
    7ea8:	|      addq.l #8,sp
    7eaa:	|      move.l d0,-(sp)
    7eac:	|      jsr 1761e <__fixsfsi>
    7eb2:	|      addq.l #4,sp
    7eb4:	|      subq.l #5,d0
    7eb6:	|      sub.l 36(sp),d0
    7eba:	|      movea.l 60(sp),a0
    7ebe:	|      move.l d0,(a0)
}
    7ec0:	\----> nop
    7ec2:	       movem.l (sp)+,d2-d5/a6
    7ec6:	       lea 28(sp),sp
    7eca:	       rts

00007ecc <initSpeech>:


void initSpeech () {
    7ecc:	       lea -12(sp),sp
    7ed0:	       move.l a6,-(sp)
	speech = AllocVec(sizeof(struct speechStruct), MEMF_ANY);
    7ed2:	       moveq #20,d0
    7ed4:	       move.l d0,12(sp)
    7ed8:	       clr.l 8(sp)
    7edc:	       move.l 1c9ca <SysBase>,d0
    7ee2:	       movea.l d0,a6
    7ee4:	       move.l 12(sp),d0
    7ee8:	       move.l 8(sp),d1
    7eec:	       jsr -684(a6)
    7ef0:	       move.l d0,4(sp)
    7ef4:	       move.l 4(sp),d0
    7ef8:	       move.l d0,1ca26 <speech>
	if (speech) {
    7efe:	       move.l 1ca26 <speech>,d0
    7f04:	/----- beq.s 7f30 <initSpeech+0x64>
		speech -> currentTalker = NULL;
    7f06:	|      movea.l 1ca26 <speech>,a0
    7f0c:	|      clr.l (a0)
		speech -> allSpeech = NULL;
    7f0e:	|      movea.l 1ca26 <speech>,a0
    7f14:	|      clr.l 4(a0)
		speech -> speechY = 0;
    7f18:	|      movea.l 1ca26 <speech>,a0
    7f1e:	|      clr.l 8(a0)
		speech -> lastFile = -1;
    7f22:	|      movea.l 1ca26 <speech>,a0
    7f28:	|      moveq #-1,d0
    7f2a:	|      move.l d0,12(a0)
	} else
    {
        KPrintF("Could not allocate memory");
    }
}
    7f2e:	|  /-- bra.s 7f3e <initSpeech+0x72>
        KPrintF("Could not allocate memory");
    7f30:	\--|-> pea 18fda <PutChar+0x12bc>
    7f36:	   |   jsr 17254 <KPrintF>
    7f3c:	   |   addq.l #4,sp
}
    7f3e:	   \-> nop
    7f40:	       movea.l (sp)+,a6
    7f42:	       lea 12(sp),sp
    7f46:	       rts

00007f48 <isThereAnySpeechGoingOn>:

int isThereAnySpeechGoingOn () {
	return speech -> allSpeech ? speech -> lookWhosTalking : -1;
    7f48:	       movea.l 1ca26 <speech>,a0
    7f4e:	       move.l 4(a0),d0
    7f52:	/----- beq.s 7f60 <isThereAnySpeechGoingOn+0x18>
    7f54:	|      movea.l 1ca26 <speech>,a0
    7f5a:	|      move.l 16(a0),d0
    7f5e:	|  /-- bra.s 7f62 <isThereAnySpeechGoingOn+0x1a>
    7f60:	\--|-> moveq #-1,d0
}
    7f62:	   \-> rts

00007f64 <killAllSpeech>:

void killAllSpeech () {
    7f64:	       lea -12(sp),sp
    7f68:	       move.l a6,-(sp)
	if (speech -> lastFile != -1) {
    7f6a:	       movea.l 1ca26 <speech>,a0
    7f70:	       move.l 12(a0),d0
    7f74:	       moveq #-1,d1
    7f76:	       cmp.l d0,d1
    7f78:	   /-- beq.s 7f86 <killAllSpeech+0x22>
		//huntKillSound (speech -> lastFile); Amiga Todo: Replace?
		speech -> lastFile = -1;
    7f7a:	   |   movea.l 1ca26 <speech>,a0
    7f80:	   |   moveq #-1,d0
    7f82:	   |   move.l d0,12(a0)
	}

	if (speech -> currentTalker) {
    7f86:	   \-> movea.l 1ca26 <speech>,a0
    7f8c:	       move.l (a0),d0
    7f8e:	/----- beq.w 801a <killAllSpeech+0xb6>
		makeSilent (* (speech -> currentTalker));
    7f92:	|      movea.l 1ca26 <speech>,a0
    7f98:	|      move.l (a0),d1
    7f9a:	|      lea -132(sp),sp
    7f9e:	|      move.l sp,d0
    7fa0:	|      movea.w #132,a0
    7fa4:	|      move.l a0,-(sp)
    7fa6:	|      move.l d1,-(sp)
    7fa8:	|      move.l d0,-(sp)
    7faa:	|      jsr 17208 <memcpy>
    7fb0:	|      lea 12(sp),sp
    7fb4:	|      jsr ab5e <makeSilent>
    7fba:	|      lea 132(sp),sp
		speech -> currentTalker = NULL;
    7fbe:	|      movea.l 1ca26 <speech>,a0
    7fc4:	|      clr.l (a0)
	}
	
	struct speechLine * killMe;
	
	while (speech -> allSpeech) {
    7fc6:	+----- bra.s 801a <killAllSpeech+0xb6>
		killMe = speech -> allSpeech;
    7fc8:	|  /-> movea.l 1ca26 <speech>,a0
    7fce:	|  |   move.l 4(a0),12(sp)
		speech -> allSpeech = speech -> allSpeech -> next;
    7fd4:	|  |   movea.l 1ca26 <speech>,a0
    7fda:	|  |   movea.l 4(a0),a1
    7fde:	|  |   movea.l 1ca26 <speech>,a0
    7fe4:	|  |   move.l 4(a1),d0
    7fe8:	|  |   move.l d0,4(a0)
		FreeVec(killMe -> textLine);
    7fec:	|  |   movea.l 12(sp),a0
    7ff0:	|  |   move.l (a0),8(sp)
    7ff4:	|  |   move.l 1c9ca <SysBase>,d0
    7ffa:	|  |   movea.l d0,a6
    7ffc:	|  |   movea.l 8(sp),a1
    8000:	|  |   jsr -690(a6)
		FreeVec(killMe);
    8004:	|  |   move.l 12(sp),4(sp)
    800a:	|  |   move.l 1c9ca <SysBase>,d0
    8010:	|  |   movea.l d0,a6
    8012:	|  |   movea.l 4(sp),a1
    8016:	|  |   jsr -690(a6)
	while (speech -> allSpeech) {
    801a:	\--|-> movea.l 1ca26 <speech>,a0
    8020:	   |   move.l 4(a0),d0
    8024:	   \-- bne.s 7fc8 <killAllSpeech+0x64>
	}
}
    8026:	       nop
    8028:	       nop
    802a:	       movea.l (sp)+,a6
    802c:	       lea 12(sp),sp
    8030:	       rts

00008032 <makeTalker>:

	return TRUE;
}

void makeTalker (struct onScreenPerson *me) {
	setFrames (me, ANI_TALK);
    8032:	pea 2 <_start+0x2>
    8036:	move.l 8(sp),-(sp)
    803a:	jsr 8192 <setFrames>
    8040:	addq.l #8,sp
}
    8042:	nop
    8044:	rts

00008046 <saveSpeech>:

void saveSpeech (struct speechStruct * sS, BPTR fp) {
    8046:	       lea -52(sp),sp
    804a:	       move.l a6,-(sp)
    804c:	       move.l d2,-(sp)
	struct speechLine * viewLine = sS -> allSpeech;
    804e:	       movea.l 64(sp),a0
    8052:	       move.l 4(a0),56(sp)
	
	putFloat (speechSpeed, fp);
    8058:	       move.l 1c354 <speechSpeed>,d0
    805e:	       move.l 68(sp),-(sp)
    8062:	       move.l d0,-(sp)
    8064:	       jsr a46 <putFloat>
    806a:	       addq.l #8,sp
	
		// Write y co-ordinate
		put2bytes (sS -> speechY, fp);
    806c:	       movea.l 64(sp),a0
    8070:	       move.l 8(a0),d0
    8074:	       move.l 68(sp),-(sp)
    8078:	       move.l d0,-(sp)
    807a:	       jsr 8d0 <put2bytes>
    8080:	       addq.l #8,sp
		
		// Write which character's talking
		put2bytes (sS -> lookWhosTalking, fp);		
    8082:	       movea.l 64(sp),a0
    8086:	       move.l 16(a0),d0
    808a:	       move.l 68(sp),-(sp)
    808e:	       move.l d0,-(sp)
    8090:	       jsr 8d0 <put2bytes>
    8096:	       addq.l #8,sp
		if (sS -> currentTalker) {
    8098:	       movea.l 64(sp),a0
    809c:	       move.l (a0),d0
    809e:	   /-- beq.s 80e2 <saveSpeech+0x9c>
			FPutC (fp, 1);
    80a0:	   |   move.l 68(sp),40(sp)
    80a6:	   |   moveq #1,d0
    80a8:	   |   move.l d0,36(sp)
    80ac:	   |   move.l 1c9d2 <DOSBase>,d0
    80b2:	   |   movea.l d0,a6
    80b4:	   |   move.l 40(sp),d1
    80b8:	   |   move.l 36(sp),d2
    80bc:	   |   jsr -312(a6)
    80c0:	   |   move.l d0,32(sp)
			put2bytes (sS->currentTalker->thisType->objectNum, fp);
    80c4:	   |   movea.l 64(sp),a0
    80c8:	   |   movea.l (a0),a0
    80ca:	   |   movea.l 114(a0),a0
    80ce:	   |   move.l 4(a0),d0
    80d2:	   |   move.l 68(sp),-(sp)
    80d6:	   |   move.l d0,-(sp)
    80d8:	   |   jsr 8d0 <put2bytes>
    80de:	   |   addq.l #8,sp
    80e0:	/--|-- bra.s 815e <saveSpeech+0x118>
		} else {
			FPutC (fp, 0);
    80e2:	|  \-> move.l 68(sp),52(sp)
    80e8:	|      clr.l 48(sp)
    80ec:	|      move.l 1c9d2 <DOSBase>,d0
    80f2:	|      movea.l d0,a6
    80f4:	|      move.l 52(sp),d1
    80f8:	|      move.l 48(sp),d2
    80fc:	|      jsr -312(a6)
    8100:	|      move.l d0,44(sp)
		}
		
		// Write what's being said
		while (viewLine) {
    8104:	+----- bra.s 815e <saveSpeech+0x118>
			FPutC (fp, 1);
    8106:	|  /-> move.l 68(sp),16(sp)
    810c:	|  |   moveq #1,d0
    810e:	|  |   move.l d0,12(sp)
    8112:	|  |   move.l 1c9d2 <DOSBase>,d0
    8118:	|  |   movea.l d0,a6
    811a:	|  |   move.l 16(sp),d1
    811e:	|  |   move.l 12(sp),d2
    8122:	|  |   jsr -312(a6)
    8126:	|  |   move.l d0,8(sp)
			writeString (viewLine -> textLine, fp);
    812a:	|  |   movea.l 56(sp),a0
    812e:	|  |   move.l (a0),d0
    8130:	|  |   move.l 68(sp),-(sp)
    8134:	|  |   move.l d0,-(sp)
    8136:	|  |   jsr bd8 <writeString>
    813c:	|  |   addq.l #8,sp
			put2bytes (viewLine -> x, fp);
    813e:	|  |   movea.l 56(sp),a0
    8142:	|  |   move.l 8(a0),d0
    8146:	|  |   move.l 68(sp),-(sp)
    814a:	|  |   move.l d0,-(sp)
    814c:	|  |   jsr 8d0 <put2bytes>
    8152:	|  |   addq.l #8,sp
			viewLine = viewLine -> next;
    8154:	|  |   movea.l 56(sp),a0
    8158:	|  |   move.l 4(a0),56(sp)
		while (viewLine) {
    815e:	\--|-> tst.l 56(sp)
    8162:	   \-- bne.s 8106 <saveSpeech+0xc0>
		}
		FPutC (fp, 0);
    8164:	       move.l 68(sp),28(sp)
    816a:	       clr.l 24(sp)
    816e:	       move.l 1c9d2 <DOSBase>,d0
    8174:	       movea.l d0,a6
    8176:	       move.l 28(sp),d1
    817a:	       move.l 24(sp),d2
    817e:	       jsr -312(a6)
    8182:	       move.l d0,20(sp)
}
    8186:	       nop
    8188:	       move.l (sp)+,d2
    818a:	       movea.l (sp)+,a6
    818c:	       lea 52(sp),sp
    8190:	       rts

00008192 <setFrames>:

void setFrames (struct onScreenPerson *m, int a) {
    8192:	move.l d2,-(sp)
	m->myAnim = m->myPersona -> animation[(a * m->myPersona -> numDirections) + m->direction];
    8194:	movea.l 8(sp),a0
    8198:	movea.l 80(a0),a0
    819c:	move.l (a0),d2
    819e:	movea.l 8(sp),a0
    81a2:	movea.l 80(a0),a0
    81a6:	move.l 4(a0),d0
    81aa:	move.l 12(sp),-(sp)
    81ae:	move.l d0,-(sp)
    81b0:	jsr 17c08 <__mulsi3>
    81b6:	addq.l #8,sp
    81b8:	move.l d0,d1
    81ba:	movea.l 8(sp),a0
    81be:	move.l 106(a0),d0
    81c2:	add.l d1,d0
    81c4:	add.l d0,d0
    81c6:	add.l d0,d0
    81c8:	movea.l d2,a0
    81ca:	adda.l d0,a0
    81cc:	move.l (a0),d0
    81ce:	movea.l 8(sp),a0
    81d2:	move.l d0,72(a0)
}
    81d6:	nop
    81d8:	move.l (sp)+,d2
    81da:	rts

000081dc <wrapSpeech>:

int wrapSpeech(char * theText, int objT, int sampleFile, BOOL animPerson) {
    81dc:	       lea -20(sp),sp
    81e0:	       move.l d2,-(sp)
    81e2:	       move.l 40(sp),d0
    81e6:	       move.w d0,d0
    81e8:	       move.w d0,6(sp)
    int i;

    speech->lookWhosTalking = objT;
    81ec:	       movea.l 1ca26 <speech>,a0
    81f2:	       move.l 32(sp),16(a0)
    struct onScreenPerson * thisPerson = findPerson(objT);
    81f8:	       move.l 32(sp),-(sp)
    81fc:	       jsr a648 <findPerson>
    8202:	       addq.l #4,sp
    8204:	       move.l d0,16(sp)
    if (thisPerson) {
    8208:	   /-- beq.s 822e <wrapSpeech+0x52>
        //setObjFontColour(thisPerson->thisType); Todo Amigize this
        i = wrapSpeechPerson(theText, thisPerson, sampleFile, animPerson);
    820a:	   |   movea.w 6(sp),a0
    820e:	   |   move.l a0,-(sp)
    8210:	   |   move.l 40(sp),-(sp)
    8214:	   |   move.l 24(sp),-(sp)
    8218:	   |   move.l 40(sp),-(sp)
    821c:	   |   jsr 82f4 <wrapSpeechPerson>
    8222:	   |   lea 16(sp),sp
    8226:	   |   move.l d0,20(sp)
    822a:	/--|-- bra.w 82e8 <wrapSpeech+0x10c>
    } else {
        struct screenRegion * thisRegion = getRegionForObject(objT);
    822e:	|  \-> move.l 32(sp),-(sp)
    8232:	|      jsr 15a36 <getRegionForObject>
    8238:	|      addq.l #4,sp
    823a:	|      move.l d0,12(sp)
        if (thisRegion) {
    823e:	|  /-- beq.s 82aa <wrapSpeech+0xce>
            //setObjFontColour(thisRegion->thisType); Todo Amigize this
            i = wrapSpeechXY(theText, ((thisRegion->x1 + thisRegion->x2) >> 1) - cameraX, thisRegion->y1 - thisRegion->thisType->speechGap - cameraY, thisRegion->thisType->wrapSpeech, sampleFile);
    8240:	|  |   movea.l 12(sp),a0
    8244:	|  |   movea.l 28(a0),a0
    8248:	|  |   move.l 28(a0),d0
    824c:	|  |   movea.l 12(sp),a0
    8250:	|  |   movea.l 4(a0),a1
    8254:	|  |   movea.l 12(sp),a0
    8258:	|  |   movea.l 28(a0),a0
    825c:	|  |   move.l 20(a0),d1
    8260:	|  |   movea.l a1,a0
    8262:	|  |   suba.l d1,a0
    8264:	|  |   move.l 1ca88 <cameraY>,d1
    826a:	|  |   movea.l a0,a1
    826c:	|  |   suba.l d1,a1
    826e:	|  |   movea.l 12(sp),a0
    8272:	|  |   move.l (a0),d2
    8274:	|  |   movea.l 12(sp),a0
    8278:	|  |   move.l 8(a0),d1
    827c:	|  |   add.l d2,d1
    827e:	|  |   move.l d1,d2
    8280:	|  |   asr.l #1,d2
    8282:	|  |   move.l 1ca84 <cameraX>,d1
    8288:	|  |   movea.l d2,a0
    828a:	|  |   suba.l d1,a0
    828c:	|  |   move.l 36(sp),-(sp)
    8290:	|  |   move.l d0,-(sp)
    8292:	|  |   move.l a1,-(sp)
    8294:	|  |   move.l a0,-(sp)
    8296:	|  |   move.l 44(sp),-(sp)
    829a:	|  |   jsr 8412 <wrapSpeechXY>
    82a0:	|  |   lea 20(sp),sp
    82a4:	|  |   move.l d0,20(sp)
    82a8:	+--|-- bra.s 82e8 <wrapSpeech+0x10c>
        } else {
            struct objectType * temp = findObjectType(objT);
    82aa:	|  \-> move.l 32(sp),-(sp)
    82ae:	|      jsr d53e <findObjectType>
    82b4:	|      addq.l #4,sp
    82b6:	|      move.l d0,8(sp)
            //setObjFontColour(temp); Todo: Amigize this
            i = wrapSpeechXY(theText, winWidth >> 1, 10, temp->wrapSpeech, sampleFile);
    82ba:	|      movea.l 8(sp),a0
    82be:	|      move.l 28(a0),d1
    82c2:	|      move.l 1c91e <winWidth>,d0
    82c8:	|      lsr.l #1,d0
    82ca:	|      move.l 36(sp),-(sp)
    82ce:	|      move.l d1,-(sp)
    82d0:	|      pea a <_start+0xa>
    82d4:	|      move.l d0,-(sp)
    82d6:	|      move.l 44(sp),-(sp)
    82da:	|      jsr 8412 <wrapSpeechXY>
    82e0:	|      lea 20(sp),sp
    82e4:	|      move.l d0,20(sp)
        }
    }
    return i;
    82e8:	\----> move.l 20(sp),d0
}
    82ec:	       move.l (sp)+,d2
    82ee:	       lea 20(sp),sp
    82f2:	       rts

000082f4 <wrapSpeechPerson>:

int wrapSpeechPerson (char * theText, struct onScreenPerson *thePerson, int sampleFile, BOOL animPerson) {
    82f4:	    subq.l #8,sp
    82f6:	    movem.l d2-d4,-(sp)
    82fa:	    move.l 36(sp),d0
    82fe:	    move.w d0,d0
    8300:	    move.w d0,14(sp)
	int i = wrapSpeechXY (theText, thePerson->x - cameraX, thePerson->y - cameraY - (thePerson->scale * (thePerson->height - thePerson->floaty)) - thePerson->thisType -> speechGap, thePerson->thisType -> wrapSpeech, sampleFile);
    8304:	    movea.l 28(sp),a0
    8308:	    movea.l 114(a0),a0
    830c:	    move.l 28(a0),d2
    8310:	    movea.l 28(sp),a0
    8314:	    move.l 4(a0),d3
    8318:	    move.l 1ca88 <cameraY>,d0
    831e:	    move.l d0,-(sp)
    8320:	    jsr 17686 <__floatsisf>
    8326:	    addq.l #4,sp
    8328:	    move.l d0,-(sp)
    832a:	    move.l d3,-(sp)
    832c:	    jsr 1797a <__subsf3>
    8332:	    addq.l #8,sp
    8334:	    move.l d0,d3
    8336:	    movea.l 28(sp),a0
    833a:	    move.l 32(a0),d4
    833e:	    movea.l 28(sp),a0
    8342:	    move.l 20(a0),d1
    8346:	    movea.l 28(sp),a0
    834a:	    move.l 24(a0),d0
    834e:	    sub.l d0,d1
    8350:	    move.l d1,-(sp)
    8352:	    jsr 17686 <__floatsisf>
    8358:	    addq.l #4,sp
    835a:	    move.l d0,-(sp)
    835c:	    move.l d4,-(sp)
    835e:	    jsr 17738 <__mulsf3>
    8364:	    addq.l #8,sp
    8366:	    move.l d0,-(sp)
    8368:	    move.l d3,-(sp)
    836a:	    jsr 1797a <__subsf3>
    8370:	    addq.l #8,sp
    8372:	    move.l d0,d3
    8374:	    movea.l 28(sp),a0
    8378:	    movea.l 114(a0),a0
    837c:	    move.l 20(a0),d0
    8380:	    move.l d0,-(sp)
    8382:	    jsr 17686 <__floatsisf>
    8388:	    addq.l #4,sp
    838a:	    move.l d0,-(sp)
    838c:	    move.l d3,-(sp)
    838e:	    jsr 1797a <__subsf3>
    8394:	    addq.l #8,sp
    8396:	    move.l d0,-(sp)
    8398:	    jsr 1761e <__fixsfsi>
    839e:	    addq.l #4,sp
    83a0:	    move.l d0,d4
    83a2:	    movea.l 28(sp),a0
    83a6:	    move.l (a0),d3
    83a8:	    move.l 1ca84 <cameraX>,d0
    83ae:	    move.l d0,-(sp)
    83b0:	    jsr 17686 <__floatsisf>
    83b6:	    addq.l #4,sp
    83b8:	    move.l d0,-(sp)
    83ba:	    move.l d3,-(sp)
    83bc:	    jsr 1797a <__subsf3>
    83c2:	    addq.l #8,sp
    83c4:	    move.l d0,-(sp)
    83c6:	    jsr 1761e <__fixsfsi>
    83cc:	    addq.l #4,sp
    83ce:	    move.l 32(sp),-(sp)
    83d2:	    move.l d2,-(sp)
    83d4:	    move.l d4,-(sp)
    83d6:	    move.l d0,-(sp)
    83d8:	    move.l 40(sp),-(sp)
    83dc:	    jsr 8412 <wrapSpeechXY>
    83e2:	    lea 20(sp),sp
    83e6:	    move.l d0,16(sp)
	if (animPerson) {
    83ea:	    tst.w 14(sp)
    83ee:	/-- beq.s 8406 <wrapSpeechPerson+0x112>
		makeTalker (thePerson);
    83f0:	|   move.l 28(sp),-(sp)
    83f4:	|   jsr 8032 <makeTalker>
    83fa:	|   addq.l #4,sp
		speech -> currentTalker = thePerson;
    83fc:	|   movea.l 1ca26 <speech>,a0
    8402:	|   move.l 28(sp),(a0)
	}
	return i;
    8406:	\-> move.l 16(sp),d0
}
    840a:	    movem.l (sp)+,d2-d4
    840e:	    addq.l #8,sp
    8410:	    rts

00008412 <wrapSpeechXY>:

int wrapSpeechXY(char * theText, int x, int y, int wrap, int sampleFile) {
    8412:	                   lea -16(sp),sp
    8416:	                   movem.l d2-d4/a2,-(sp)
    int a, offset = 0;
    841a:	                   clr.l 16(sp)
    killAllSpeech();
    841e:	                   jsr 7f64 <killAllSpeech>

    int speechTime = (strlen(theText) + 20) * speechSpeed;
    8424:	                   move.l 36(sp),-(sp)
    8428:	                   jsr 13ce0 <strlen>
    842e:	                   addq.l #4,sp
    8430:	                   movea.l d0,a0
    8432:	                   lea 20(a0),a0
    8436:	                   move.l a0,-(sp)
    8438:	                   jsr 176ae <__floatunsisf>
    843e:	                   addq.l #4,sp
    8440:	                   move.l d0,d1
    8442:	                   move.l 1c354 <speechSpeed>,d0
    8448:	                   move.l d0,-(sp)
    844a:	                   move.l d1,-(sp)
    844c:	                   jsr 17738 <__mulsf3>
    8452:	                   addq.l #8,sp
    8454:	                   move.l d0,-(sp)
    8456:	                   jsr 1761e <__fixsfsi>
    845c:	                   addq.l #4,sp
    845e:	                   move.l d0,24(sp)
    if (speechTime < 1) speechTime = 1;
    8462:	               /-- bgt.s 846a <wrapSpeechXY+0x58>
    8464:	               |   moveq #1,d0
    8466:	               |   move.l d0,24(sp)

    if (sampleFile != -1) {
    846a:	               \-> moveq #-1,d1
    846c:	                   cmp.l 52(sp),d1
    8470:	               /-- beq.s 84b0 <wrapSpeechXY+0x9e>
        if (speechMode >= 1) {
    8472:	               |   move.l 1ca98 <speechMode>,d0
    8478:	               +-- ble.s 84b0 <wrapSpeechXY+0x9e>
            if (startSound(sampleFile, FALSE)) {
    847a:	               |   clr.l -(sp)
    847c:	               |   move.l 56(sp),-(sp)
    8480:	               |   jsr d208 <startSound>
    8486:	               |   addq.l #8,sp
    8488:	               |   tst.w d0
    848a:	               +-- beq.s 84b0 <wrapSpeechXY+0x9e>
                speechTime = -10;
    848c:	               |   moveq #-10,d0
    848e:	               |   move.l d0,24(sp)
                speech->lastFile = sampleFile;
    8492:	               |   movea.l 1ca26 <speech>,a0
    8498:	               |   move.l 52(sp),12(a0)
                if (speechMode == 2) return -10;
    849e:	               |   move.l 1ca98 <speechMode>,d0
    84a4:	               |   moveq #2,d1
    84a6:	               |   cmp.l d0,d1
    84a8:	               +-- bne.s 84b0 <wrapSpeechXY+0x9e>
    84aa:	               |   moveq #-10,d0
    84ac:	/--------------|-- bra.w 8736 <wrapSpeechXY+0x324>
            }
        }
    }
    speech->speechY = y;
    84b0:	|              \-> movea.l 1ca26 <speech>,a0
    84b6:	|                  move.l 44(sp),8(a0)

    while (strlen(theText) > (unsigned long) wrap) {
    84bc:	|     /----------- bra.w 8570 <wrapSpeechXY+0x15e>
        a = wrap;
    84c0:	|  /--|----------> move.l 48(sp),28(sp)
        while (theText[a] != ' ') {
    84c6:	|  |  |        /-- bra.s 84d6 <wrapSpeechXY+0xc4>
            a--;
    84c8:	|  |  |  /-----|-> subq.l #1,28(sp)
            if (a == 0) {
    84cc:	|  |  |  |     +-- bne.s 84d6 <wrapSpeechXY+0xc4>
                a = wrap;
    84ce:	|  |  |  |     |   move.l 48(sp),28(sp)
                break;
    84d4:	|  |  |  |  /--|-- bra.s 84e8 <wrapSpeechXY+0xd6>
        while (theText[a] != ' ') {
    84d6:	|  |  |  |  |  \-> move.l 28(sp),d0
    84da:	|  |  |  |  |      movea.l 36(sp),a0
    84de:	|  |  |  |  |      adda.l d0,a0
    84e0:	|  |  |  |  |      move.b (a0),d0
    84e2:	|  |  |  |  |      cmpi.b #32,d0
    84e6:	|  |  |  \--|----- bne.s 84c8 <wrapSpeechXY+0xb6>
            }
        }
        theText[a] = 0;
    84e8:	|  |  |     \----> move.l 28(sp),d0
    84ec:	|  |  |            movea.l 36(sp),a0
    84f0:	|  |  |            adda.l d0,a0
    84f2:	|  |  |            clr.b (a0)
        addSpeechLine(theText, x, &offset);
    84f4:	|  |  |            lea 16(sp),a0
    84f8:	|  |  |            move.l a0,-(sp)
    84fa:	|  |  |            move.l 44(sp),-(sp)
    84fe:	|  |  |            move.l 44(sp),-(sp)
    8502:	|  |  |            jsr 7cae <addSpeechLine>
    8508:	|  |  |            lea 12(sp),sp
        theText[a] = ' ';
    850c:	|  |  |            move.l 28(sp),d0
    8510:	|  |  |            movea.l 36(sp),a0
    8514:	|  |  |            adda.l d0,a0
    8516:	|  |  |            move.b #32,(a0)
        theText += a + 1;
    851a:	|  |  |            move.l 28(sp),d0
    851e:	|  |  |            addq.l #1,d0
    8520:	|  |  |            add.l d0,36(sp)
        y -= fontHeight / cameraZoom;
    8524:	|  |  |            move.l 44(sp),-(sp)
    8528:	|  |  |            jsr 17686 <__floatsisf>
    852e:	|  |  |            addq.l #4,sp
    8530:	|  |  |            move.l d0,d2
    8532:	|  |  |            move.l 1cac2 <fontHeight>,d0
    8538:	|  |  |            move.l d0,-(sp)
    853a:	|  |  |            jsr 17686 <__floatsisf>
    8540:	|  |  |            addq.l #4,sp
    8542:	|  |  |            move.l d0,d1
    8544:	|  |  |            move.l 1c368 <cameraZoom>,d0
    854a:	|  |  |            move.l d0,-(sp)
    854c:	|  |  |            move.l d1,-(sp)
    854e:	|  |  |            jsr 1753c <__divsf3>
    8554:	|  |  |            addq.l #8,sp
    8556:	|  |  |            move.l d0,-(sp)
    8558:	|  |  |            move.l d2,-(sp)
    855a:	|  |  |            jsr 1797a <__subsf3>
    8560:	|  |  |            addq.l #8,sp
    8562:	|  |  |            move.l d0,-(sp)
    8564:	|  |  |            jsr 1761e <__fixsfsi>
    856a:	|  |  |            addq.l #4,sp
    856c:	|  |  |            move.l d0,44(sp)
    while (strlen(theText) > (unsigned long) wrap) {
    8570:	|  |  \----------> move.l 36(sp),-(sp)
    8574:	|  |               jsr 13ce0 <strlen>
    857a:	|  |               addq.l #4,sp
    857c:	|  |               move.l d0,d1
    857e:	|  |               move.l 48(sp),d0
    8582:	|  |               cmp.l d1,d0
    8584:	|  \-------------- bcs.w 84c0 <wrapSpeechXY+0xae>
    }
    addSpeechLine(theText, x, &offset);
    8588:	|                  lea 16(sp),a0
    858c:	|                  move.l a0,-(sp)
    858e:	|                  move.l 44(sp),-(sp)
    8592:	|                  move.l 44(sp),-(sp)
    8596:	|                  jsr 7cae <addSpeechLine>
    859c:	|                  lea 12(sp),sp
    y -= fontHeight / cameraZoom;
    85a0:	|                  move.l 44(sp),-(sp)
    85a4:	|                  jsr 17686 <__floatsisf>
    85aa:	|                  addq.l #4,sp
    85ac:	|                  move.l d0,d2
    85ae:	|                  move.l 1cac2 <fontHeight>,d0
    85b4:	|                  move.l d0,-(sp)
    85b6:	|                  jsr 17686 <__floatsisf>
    85bc:	|                  addq.l #4,sp
    85be:	|                  move.l d0,d1
    85c0:	|                  move.l 1c368 <cameraZoom>,d0
    85c6:	|                  move.l d0,-(sp)
    85c8:	|                  move.l d1,-(sp)
    85ca:	|                  jsr 1753c <__divsf3>
    85d0:	|                  addq.l #8,sp
    85d2:	|                  move.l d0,-(sp)
    85d4:	|                  move.l d2,-(sp)
    85d6:	|                  jsr 1797a <__subsf3>
    85dc:	|                  addq.l #8,sp
    85de:	|                  move.l d0,-(sp)
    85e0:	|                  jsr 1761e <__fixsfsi>
    85e6:	|                  addq.l #4,sp
    85e8:	|                  move.l d0,44(sp)

    if (y < 0) speech->speechY -= y;
    85ec:	|              /-- bpl.s 860a <wrapSpeechXY+0x1f8>
    85ee:	|              |   movea.l 1ca26 <speech>,a0
    85f4:	|              |   move.l 8(a0),d0
    85f8:	|              |   movea.l 1ca26 <speech>,a0
    85fe:	|              |   sub.l 44(sp),d0
    8602:	|              |   move.l d0,8(a0)
    8606:	|           /--|-- bra.w 86f8 <wrapSpeechXY+0x2e6>
    else if (speech->speechY > cameraY + (FLOAT)(winHeight - fontHeight / 3) / cameraZoom) speech->speechY = cameraY + (FLOAT)(winHeight - fontHeight / 3) / cameraZoom;
    860a:	|           |  \-> movea.l 1ca26 <speech>,a0
    8610:	|           |      move.l 8(a0),d0
    8614:	|           |      move.l d0,-(sp)
    8616:	|           |      jsr 17686 <__floatsisf>
    861c:	|           |      addq.l #4,sp
    861e:	|           |      move.l d0,d2
    8620:	|           |      move.l 1ca88 <cameraY>,d0
    8626:	|           |      move.l d0,-(sp)
    8628:	|           |      jsr 17686 <__floatsisf>
    862e:	|           |      addq.l #4,sp
    8630:	|           |      move.l d0,d3
    8632:	|           |      move.l 1c922 <winHeight>,d4
    8638:	|           |      move.l 1cac2 <fontHeight>,d0
    863e:	|           |      pea 3 <_start+0x3>
    8642:	|           |      move.l d0,-(sp)
    8644:	|           |      jsr 17c86 <__divsi3>
    864a:	|           |      addq.l #8,sp
    864c:	|           |      move.l d4,d1
    864e:	|           |      sub.l d0,d1
    8650:	|           |      move.l d1,-(sp)
    8652:	|           |      jsr 176ae <__floatunsisf>
    8658:	|           |      addq.l #4,sp
    865a:	|           |      move.l d0,d1
    865c:	|           |      move.l 1c368 <cameraZoom>,d0
    8662:	|           |      move.l d0,-(sp)
    8664:	|           |      move.l d1,-(sp)
    8666:	|           |      jsr 1753c <__divsf3>
    866c:	|           |      addq.l #8,sp
    866e:	|           |      move.l d0,-(sp)
    8670:	|           |      move.l d3,-(sp)
    8672:	|           |      jsr 17442 <__addsf3>
    8678:	|           |      addq.l #8,sp
    867a:	|           |      move.l d0,-(sp)
    867c:	|           |      move.l d2,-(sp)
    867e:	|           |      jsr 177f2 <__gtsf2>
    8684:	|           |      addq.l #8,sp
    8686:	|           |      tst.l d0
    8688:	|           +----- ble.s 86f8 <wrapSpeechXY+0x2e6>
    868a:	|           |      move.l 1ca88 <cameraY>,d0
    8690:	|           |      move.l d0,-(sp)
    8692:	|           |      jsr 17686 <__floatsisf>
    8698:	|           |      addq.l #4,sp
    869a:	|           |      move.l d0,d2
    869c:	|           |      move.l 1c922 <winHeight>,d3
    86a2:	|           |      move.l 1cac2 <fontHeight>,d0
    86a8:	|           |      pea 3 <_start+0x3>
    86ac:	|           |      move.l d0,-(sp)
    86ae:	|           |      jsr 17c86 <__divsi3>
    86b4:	|           |      addq.l #8,sp
    86b6:	|           |      move.l d3,d1
    86b8:	|           |      sub.l d0,d1
    86ba:	|           |      move.l d1,-(sp)
    86bc:	|           |      jsr 176ae <__floatunsisf>
    86c2:	|           |      addq.l #4,sp
    86c4:	|           |      move.l d0,d1
    86c6:	|           |      move.l 1c368 <cameraZoom>,d0
    86cc:	|           |      move.l d0,-(sp)
    86ce:	|           |      move.l d1,-(sp)
    86d0:	|           |      jsr 1753c <__divsf3>
    86d6:	|           |      addq.l #8,sp
    86d8:	|           |      move.l d0,-(sp)
    86da:	|           |      move.l d2,-(sp)
    86dc:	|           |      jsr 17442 <__addsf3>
    86e2:	|           |      addq.l #8,sp
    86e4:	|           |      movea.l 1ca26 <speech>,a2
    86ea:	|           |      move.l d0,-(sp)
    86ec:	|           |      jsr 1761e <__fixsfsi>
    86f2:	|           |      addq.l #4,sp
    86f4:	|           |      move.l d0,8(a2)

    if (offset) {
    86f8:	|           \----> move.l 16(sp),d0
    86fc:	|        /-------- beq.s 8732 <wrapSpeechXY+0x320>
        struct speechLine * viewLine = speech->allSpeech;
    86fe:	|        |         movea.l 1ca26 <speech>,a0
    8704:	|        |         move.l 4(a0),20(sp)
        while (viewLine) {
    870a:	|        |     /-- bra.s 872c <wrapSpeechXY+0x31a>
            viewLine->x += offset;
    870c:	|        |  /--|-> movea.l 20(sp),a0
    8710:	|        |  |  |   move.l 8(a0),d1
    8714:	|        |  |  |   move.l 16(sp),d0
    8718:	|        |  |  |   add.l d1,d0
    871a:	|        |  |  |   movea.l 20(sp),a0
    871e:	|        |  |  |   move.l d0,8(a0)
            viewLine = viewLine->next;
    8722:	|        |  |  |   movea.l 20(sp),a0
    8726:	|        |  |  |   move.l 4(a0),20(sp)
        while (viewLine) {
    872c:	|        |  |  \-> tst.l 20(sp)
    8730:	|        |  \----- bne.s 870c <wrapSpeechXY+0x2fa>
        }
    }

    return speechTime;
    8732:	|        \-------> move.l 24(sp),d0
}
    8736:	\----------------> movem.l (sp)+,d2-d4/a2
    873a:	                   lea 16(sp),sp
    873e:	                   rts

00008740 <killZBuffer>:

#define EMULATOR

struct zBufferData *zBuffer;

void killZBuffer () {
    8740:	       lea -12(sp),sp
    8744:	       move.l a6,-(sp)
	struct zBufferData *zbuffercursor =  zBuffer;
    8746:	       move.l 1ca2a <zBuffer>,12(sp)

	while(zbuffercursor) {
    874e:	   /-- bra.s 8776 <killZBuffer+0x36>
		struct zBufferData *deleteme = zbuffercursor;
    8750:	/--|-> move.l 12(sp),8(sp)
		zbuffercursor = zbuffercursor->nextPanel;
    8756:	|  |   movea.l 12(sp),a0
    875a:	|  |   move.l 24(a0),12(sp)
		FreeVec(deleteme);
    8760:	|  |   move.l 8(sp),4(sp)
    8766:	|  |   move.l 1c9ca <SysBase>,d0
    876c:	|  |   movea.l d0,a6
    876e:	|  |   movea.l 4(sp),a1
    8772:	|  |   jsr -690(a6)
	while(zbuffercursor) {
    8776:	|  \-> tst.l 12(sp)
    877a:	\----- bne.s 8750 <killZBuffer+0x10>
	}
	zBuffer = NULL;
    877c:	       clr.l 1ca2a <zBuffer>
}
    8782:	       nop
    8784:	       movea.l (sp)+,a6
    8786:	       lea 12(sp),sp
    878a:	       rts

0000878c <setZBuffer>:

BOOL setZBuffer (unsigned int y) {
    878c:	                lea -304(sp),sp
    8790:	                movem.l d2-d4/a2/a6,-(sp)
	int x, n;
	ULONG stillToGo = 0;
    8794:	                clr.l 314(sp)
	int yPalette[16], sorted[16], sortback[16];

	killZBuffer ();	
    8798:	                jsr 8740 <killZBuffer>
	
	if (! openFileFromNum (y)) return FALSE;
    879e:	                move.l 328(sp),d0
    87a2:	                move.l d0,-(sp)
    87a4:	                jsr 6d9e <openFileFromNum>
    87aa:	                addq.l #4,sp
    87ac:	                tst.l d0
    87ae:	            /-- bne.s 87b6 <setZBuffer+0x2a>
    87b0:	            |   clr.w d0
    87b2:	/-----------|-- bra.w 8a74 <setZBuffer+0x2e8>
	
	if (FGetC (bigDataFile) != 'a' || FGetC (bigDataFile) != 's' || FGetC (bigDataFile) != 'z' || FGetC (bigDataFile) != 'b') 
    87b6:	|           \-> move.l 1c9b2 <bigDataFile>,310(sp)
    87be:	|               move.l 1c9d2 <DOSBase>,d0
    87c4:	|               movea.l d0,a6
    87c6:	|               move.l 310(sp),d1
    87ca:	|               jsr -306(a6)
    87ce:	|               move.l d0,306(sp)
    87d2:	|               move.l 306(sp),d0
    87d6:	|               moveq #97,d1
    87d8:	|               cmp.l d0,d1
    87da:	|        /----- bne.s 884e <setZBuffer+0xc2>
    87dc:	|        |      move.l 1c9b2 <bigDataFile>,302(sp)
    87e4:	|        |      move.l 1c9d2 <DOSBase>,d0
    87ea:	|        |      movea.l d0,a6
    87ec:	|        |      move.l 302(sp),d1
    87f0:	|        |      jsr -306(a6)
    87f4:	|        |      move.l d0,298(sp)
    87f8:	|        |      move.l 298(sp),d0
    87fc:	|        |      moveq #115,d1
    87fe:	|        |      cmp.l d0,d1
    8800:	|        +----- bne.s 884e <setZBuffer+0xc2>
    8802:	|        |      move.l 1c9b2 <bigDataFile>,294(sp)
    880a:	|        |      move.l 1c9d2 <DOSBase>,d0
    8810:	|        |      movea.l d0,a6
    8812:	|        |      move.l 294(sp),d1
    8816:	|        |      jsr -306(a6)
    881a:	|        |      move.l d0,290(sp)
    881e:	|        |      move.l 290(sp),d0
    8822:	|        |      moveq #122,d1
    8824:	|        |      cmp.l d0,d1
    8826:	|        +----- bne.s 884e <setZBuffer+0xc2>
    8828:	|        |      move.l 1c9b2 <bigDataFile>,286(sp)
    8830:	|        |      move.l 1c9d2 <DOSBase>,d0
    8836:	|        |      movea.l d0,a6
    8838:	|        |      move.l 286(sp),d1
    883c:	|        |      jsr -306(a6)
    8840:	|        |      move.l d0,282(sp)
    8844:	|        |      move.l 282(sp),d0
    8848:	|        |      moveq #98,d1
    884a:	|        |      cmp.l d0,d1
    884c:	|        |  /-- beq.s 8862 <setZBuffer+0xd6>
	{ 
		 KPrintF("Not a Z-buffer file");
    884e:	|        \--|-> pea 19017 <PutChar+0x12f9>
    8854:	|           |   jsr 17254 <KPrintF>
    885a:	|           |   addq.l #4,sp
		 return FALSE;
    885c:	|           |   clr.w d0
    885e:	+-----------|-- bra.w 8a74 <setZBuffer+0x2e8>
	}

	UWORD numelements = FGetC(bigDataFile);
    8862:	|           \-> move.l 1c9b2 <bigDataFile>,278(sp)
    886a:	|               move.l 1c9d2 <DOSBase>,d0
    8870:	|               movea.l d0,a6
    8872:	|               move.l 278(sp),d1
    8876:	|               jsr -306(a6)
    887a:	|               move.l d0,274(sp)
    887e:	|               move.l 274(sp),d0
    8882:	|               move.w d0,322(sp)

	UWORD size;
	UWORD count;

	zBuffer = AllocVec(sizeof(struct zBufferData), MEMF_ANY);
    8886:	|               moveq #28,d0
    8888:	|               move.l d0,270(sp)
    888c:	|               clr.l 266(sp)
    8890:	|               move.l 1c9ca <SysBase>,d0
    8896:	|               movea.l d0,a6
    8898:	|               move.l 270(sp),d0
    889c:	|               move.l 266(sp),d1
    88a0:	|               jsr -684(a6)
    88a4:	|               move.l d0,262(sp)
    88a8:	|               move.l 262(sp),d0
    88ac:	|               move.l d0,1ca2a <zBuffer>

	struct zBufferData *currentitem;
	currentitem = zBuffer;
    88b2:	|               move.l 1ca2a <zBuffer>,318(sp)

	while(numelements--)
    88ba:	|     /-------- bra.w 8a5a <setZBuffer+0x2ce>
	{		
		currentitem->width = get2bytes (bigDataFile);
    88be:	|  /--|-------> move.l 1c9b2 <bigDataFile>,d0
    88c4:	|  |  |         move.l d0,-(sp)
    88c6:	|  |  |         jsr 6bc <get2bytes>
    88cc:	|  |  |         addq.l #4,sp
    88ce:	|  |  |         movea.l 318(sp),a0
    88d2:	|  |  |         move.l d0,(a0)
		currentitem->height = get2bytes (bigDataFile);
    88d4:	|  |  |         move.l 1c9b2 <bigDataFile>,d0
    88da:	|  |  |         move.l d0,-(sp)
    88dc:	|  |  |         jsr 6bc <get2bytes>
    88e2:	|  |  |         addq.l #4,sp
    88e4:	|  |  |         movea.l 318(sp),a0
    88e8:	|  |  |         move.l d0,4(a0)

		currentitem->topx = get2bytes (bigDataFile);
    88ec:	|  |  |         move.l 1c9b2 <bigDataFile>,d0
    88f2:	|  |  |         move.l d0,-(sp)
    88f4:	|  |  |         jsr 6bc <get2bytes>
    88fa:	|  |  |         addq.l #4,sp
    88fc:	|  |  |         movea.l 318(sp),a0
    8900:	|  |  |         move.l d0,8(a0)
		currentitem->topy = get2bytes (bigDataFile);
    8904:	|  |  |         move.l 1c9b2 <bigDataFile>,d0
    890a:	|  |  |         move.l d0,-(sp)
    890c:	|  |  |         jsr 6bc <get2bytes>
    8912:	|  |  |         addq.l #4,sp
    8914:	|  |  |         movea.l 318(sp),a0
    8918:	|  |  |         move.l d0,12(a0)
		currentitem->yz = get2bytes (bigDataFile);
    891c:	|  |  |         move.l 1c9b2 <bigDataFile>,d0
    8922:	|  |  |         move.l d0,-(sp)
    8924:	|  |  |         jsr 6bc <get2bytes>
    892a:	|  |  |         addq.l #4,sp
    892c:	|  |  |         movea.l 318(sp),a0
    8930:	|  |  |         move.l d0,16(a0)

		UWORD size = currentitem->width * currentitem->height / 8;
    8934:	|  |  |         movea.l 318(sp),a0
    8938:	|  |  |         move.l (a0),d0
    893a:	|  |  |         movea.l 318(sp),a0
    893e:	|  |  |         move.l 4(a0),d1
    8942:	|  |  |         move.l d1,-(sp)
    8944:	|  |  |         move.l d0,-(sp)
    8946:	|  |  |         jsr 17c08 <__mulsi3>
    894c:	|  |  |         addq.l #8,sp
    894e:	|  |  |         tst.l d0
    8950:	|  |  |     /-- bge.s 8954 <setZBuffer+0x1c8>
    8952:	|  |  |     |   addq.l #7,d0
    8954:	|  |  |     \-> asr.l #3,d0
    8956:	|  |  |         move.w d0,260(sp)
		currentitem->bitplane = AllocVec( size, MEMF_CHIP);
    895a:	|  |  |         moveq #0,d0
    895c:	|  |  |         move.w 260(sp),d0
    8960:	|  |  |         move.l d0,256(sp)
    8964:	|  |  |         moveq #2,d1
    8966:	|  |  |         move.l d1,252(sp)
    896a:	|  |  |         move.l 1c9ca <SysBase>,d0
    8970:	|  |  |         movea.l d0,a6
    8972:	|  |  |         move.l 256(sp),d0
    8976:	|  |  |         move.l 252(sp),d1
    897a:	|  |  |         jsr -684(a6)
    897e:	|  |  |         move.l d0,248(sp)
    8982:	|  |  |         move.l 248(sp),d0
    8986:	|  |  |         movea.l 318(sp),a0
    898a:	|  |  |         move.l d0,20(a0)
		count = FRead( bigDataFile, currentitem->bitplane, 1, size);				
    898e:	|  |  |         move.l 1c9b2 <bigDataFile>,244(sp)
    8996:	|  |  |         movea.l 318(sp),a0
    899a:	|  |  |         move.l 20(a0),240(sp)
    89a0:	|  |  |         moveq #1,d0
    89a2:	|  |  |         move.l d0,236(sp)
    89a6:	|  |  |         moveq #0,d0
    89a8:	|  |  |         move.w 260(sp),d0
    89ac:	|  |  |         move.l d0,232(sp)
    89b0:	|  |  |         move.l 1c9d2 <DOSBase>,d0
    89b6:	|  |  |         movea.l d0,a6
    89b8:	|  |  |         move.l 244(sp),d1
    89bc:	|  |  |         move.l 240(sp),d2
    89c0:	|  |  |         move.l 236(sp),d3
    89c4:	|  |  |         move.l 232(sp),d4
    89c8:	|  |  |         jsr -324(a6)
    89cc:	|  |  |         move.l d0,228(sp)
    89d0:	|  |  |         move.l 228(sp),d0
    89d4:	|  |  |         move.w d0,226(sp)

		if(numelements > 0) {
    89d8:	|  |  |         tst.w 322(sp)
    89dc:	|  |  |  /----- beq.s 8a18 <setZBuffer+0x28c>
			currentitem->nextPanel = AllocVec(sizeof(struct zBufferData), MEMF_ANY);
    89de:	|  |  |  |      moveq #28,d1
    89e0:	|  |  |  |      move.l d1,222(sp)
    89e4:	|  |  |  |      clr.l 218(sp)
    89e8:	|  |  |  |      move.l 1c9ca <SysBase>,d0
    89ee:	|  |  |  |      movea.l d0,a6
    89f0:	|  |  |  |      move.l 222(sp),d0
    89f4:	|  |  |  |      move.l 218(sp),d1
    89f8:	|  |  |  |      jsr -684(a6)
    89fc:	|  |  |  |      move.l d0,214(sp)
    8a00:	|  |  |  |      move.l 214(sp),d0
    8a04:	|  |  |  |      movea.l 318(sp),a0
    8a08:	|  |  |  |      move.l d0,24(a0)
			currentitem = currentitem->nextPanel;
    8a0c:	|  |  |  |      movea.l 318(sp),a0
    8a10:	|  |  |  |      move.l 24(a0),318(sp)
    8a16:	|  |  |  |  /-- bra.s 8a20 <setZBuffer+0x294>
		} else {
			currentitem->nextPanel = NULL;
    8a18:	|  |  |  \--|-> movea.l 318(sp),a0
    8a1c:	|  |  |     |   clr.l 24(a0)
		}
		#ifdef EMULATOR  
  			debug_register_bitmap(currentitem->bitplane, "zBuffer.bpl", currentitem->width, currentitem->height , 1, 0);
    8a20:	|  |  |     \-> movea.l 318(sp),a0
    8a24:	|  |  |         move.l 4(a0),d0
    8a28:	|  |  |         move.l d0,d0
    8a2a:	|  |  |         movea.w d0,a1
    8a2c:	|  |  |         movea.l 318(sp),a0
    8a30:	|  |  |         move.l (a0),d0
    8a32:	|  |  |         move.l d0,d0
    8a34:	|  |  |         movea.w d0,a0
    8a36:	|  |  |         movea.l 318(sp),a2
    8a3a:	|  |  |         move.l 20(a2),d0
    8a3e:	|  |  |         clr.l -(sp)
    8a40:	|  |  |         pea 1 <_start+0x1>
    8a44:	|  |  |         move.l a1,-(sp)
    8a46:	|  |  |         move.l a0,-(sp)
    8a48:	|  |  |         pea 1902b <PutChar+0x130d>
    8a4e:	|  |  |         move.l d0,-(sp)
    8a50:	|  |  |         jsr 1733c <debug_register_bitmap>
    8a56:	|  |  |         lea 24(sp),sp
	while(numelements--)
    8a5a:	|  |  \-------> move.w 322(sp),d0
    8a5e:	|  |            move.w d0,d1
    8a60:	|  |            subq.w #1,d1
    8a62:	|  |            move.w d1,322(sp)
    8a66:	|  |            tst.w d0
    8a68:	|  \----------- bne.w 88be <setZBuffer+0x132>
		#endif  
		
	}


	finishAccess ();
    8a6c:	|               jsr 6c96 <finishAccess>
	
	return TRUE;
    8a72:	|               moveq #1,d0
}
    8a74:	\-------------> movem.l (sp)+,d2-d4/a2/a6
    8a78:	                lea 304(sp),sp
    8a7c:	                rts

00008a7e <forgetSpriteBank>:
extern int cameraX, cameraY;
extern struct inputType input;


void forgetSpriteBank (struct loadedSpriteBank * forgetme)
{			
    8a7e:	          lea -32(sp),sp
    8a82:	          move.l a6,-(sp)
	struct spriteBank *spritebanktoforget = &forgetme->bank;
    8a84:	          move.l 40(sp),d0
    8a88:	          addq.l #8,d0
    8a8a:	          move.l d0,24(sp)
	
	for (int i = 0; i < spritebanktoforget->total; i++) {
    8a8e:	          clr.l 32(sp)
    8a92:	   /----- bra.s 8ad8 <forgetSpriteBank+0x5a>
		struct sprite *cursprite = &spritebanktoforget->sprites[i];		
    8a94:	/--|----> movea.l 24(sp),a0
    8a98:	|  |      movea.l 8(a0),a0
    8a9c:	|  |      move.l 32(sp),d1
    8aa0:	|  |      move.l d1,d0
    8aa2:	|  |      lsl.l #3,d0
    8aa4:	|  |      sub.l d1,d0
    8aa6:	|  |      add.l d0,d0
    8aa8:	|  |      add.l d0,d0
    8aaa:	|  |      adda.l d0,a0
    8aac:	|  |      move.l a0,8(sp)
		if(cursprite->data) {		
    8ab0:	|  |      movea.l 8(sp),a0
    8ab4:	|  |      move.l 24(a0),d0
    8ab8:	|  |  /-- beq.s 8ad4 <forgetSpriteBank+0x56>
			FreeVec(cursprite->data);			
    8aba:	|  |  |   movea.l 8(sp),a0
    8abe:	|  |  |   move.l 24(a0),4(sp)
    8ac4:	|  |  |   move.l 1c9ca <SysBase>,d0
    8aca:	|  |  |   movea.l d0,a6
    8acc:	|  |  |   movea.l 4(sp),a1
    8ad0:	|  |  |   jsr -690(a6)
	for (int i = 0; i < spritebanktoforget->total; i++) {
    8ad4:	|  |  \-> addq.l #1,32(sp)
    8ad8:	|  \----> movea.l 24(sp),a0
    8adc:	|         move.l (a0),d0
    8ade:	|         cmp.l 32(sp),d0
    8ae2:	\-------- bgt.s 8a94 <forgetSpriteBank+0x16>
		}		
	}

	FreeVec(spritebanktoforget->sprites);	
    8ae4:	          movea.l 24(sp),a0
    8ae8:	          move.l 8(a0),20(sp)
    8aee:	          move.l 1c9ca <SysBase>,d0
    8af4:	          movea.l d0,a6
    8af6:	          movea.l 20(sp),a1
    8afa:	          jsr -690(a6)
	
	
	struct loadedSpriteBank *precedingbank = allLoadedBanks;
    8afe:	          move.l 1cae2 <allLoadedBanks>,28(sp)
	
	while(precedingbank->next->ID != forgetme->ID && precedingbank != NULL)
    8b06:	      /-- bra.s 8b12 <forgetSpriteBank+0x94>
	{
		precedingbank = precedingbank->next;
    8b08:	   /--|-> movea.l 28(sp),a0
    8b0c:	   |  |   move.l 22(a0),28(sp)
	while(precedingbank->next->ID != forgetme->ID && precedingbank != NULL)
    8b12:	   |  \-> movea.l 28(sp),a0
    8b16:	   |      movea.l 22(a0),a0
    8b1a:	   |      move.l (a0),d1
    8b1c:	   |      movea.l 40(sp),a0
    8b20:	   |      move.l (a0),d0
    8b22:	   |      cmp.l d1,d0
    8b24:	   |  /-- beq.s 8b2c <forgetSpriteBank+0xae>
    8b26:	   |  |   tst.l 28(sp)
    8b2a:	   \--|-- bne.s 8b08 <forgetSpriteBank+0x8a>
	}	

	if(precedingbank)
    8b2c:	      \-> tst.l 28(sp)
    8b30:	   /----- beq.s 8b5a <forgetSpriteBank+0xdc>
	{
		//Forget element in the middle of the chain or the last one
		precedingbank->next = forgetme->next;
    8b32:	   |      movea.l 40(sp),a0
    8b36:	   |      move.l 22(a0),d0
    8b3a:	   |      movea.l 28(sp),a0
    8b3e:	   |      move.l d0,22(a0)
		FreeVec( forgetme);
    8b42:	   |      move.l 40(sp),12(sp)
    8b48:	   |      move.l 1c9ca <SysBase>,d0
    8b4e:	   |      movea.l d0,a6
    8b50:	   |      movea.l 12(sp),a1
    8b54:	   |      jsr -690(a6)
	{
		//Forget first element in the chain
		allLoadedBanks = allLoadedBanks->next;
		FreeVec( forgetme);
	}	
}
    8b58:	   |  /-- bra.s 8b80 <forgetSpriteBank+0x102>
		allLoadedBanks = allLoadedBanks->next;
    8b5a:	   \--|-> movea.l 1cae2 <allLoadedBanks>,a0
    8b60:	      |   move.l 22(a0),d0
    8b64:	      |   move.l d0,1cae2 <allLoadedBanks>
		FreeVec( forgetme);
    8b6a:	      |   move.l 40(sp),16(sp)
    8b70:	      |   move.l 1c9ca <SysBase>,d0
    8b76:	      |   movea.l d0,a6
    8b78:	      |   movea.l 16(sp),a1
    8b7c:	      |   jsr -690(a6)
}
    8b80:	      \-> nop
    8b82:	          movea.l (sp)+,a6
    8b84:	          lea 32(sp),sp
    8b88:	          rts

00008b8a <loadSpriteBank>:

BOOL loadSpriteBank (int fileNum, struct spriteBank *loadhere) {
    8b8a:	                      lea -84(sp),sp
    8b8e:	                      movem.l d2-d4/a2/a6,-(sp)

	KPrintF("loadSpriteBank: Starting\n");
    8b92:	                      pea 19037 <PutChar+0x1319>
    8b98:	                      jsr 17254 <KPrintF>
    8b9e:	                      addq.l #4,sp

	int i, tex_num, total, picwidth, picheight, howmany = 0, startIndex = 0;
    8ba0:	                      clr.l 94(sp)
    8ba4:	                      clr.l 90(sp)
	int *totalwidth, *maxheight;
	int numTextures = 0;
    8ba8:	                      clr.l 86(sp)
	UBYTE *data;

	if (!openFileFromNum(fileNum)) {
    8bac:	                      move.l 108(sp),-(sp)
    8bb0:	                      jsr 6d9e <openFileFromNum>
    8bb6:	                      addq.l #4,sp
    8bb8:	                      tst.l d0
    8bba:	                  /-- bne.s 8bd0 <loadSpriteBank+0x46>
		KPrintF("loadSpriteBank: Can't open sprite bank / font");
    8bbc:	                  |   pea 19051 <PutChar+0x1333>
    8bc2:	                  |   jsr 17254 <KPrintF>
    8bc8:	                  |   addq.l #4,sp
		return FALSE;
    8bca:	                  |   clr.w d0
    8bcc:	/-----------------|-- bra.w 8fc4 <loadSpriteBank+0x43a>
	}

	get2bytes(bigDataFile); // Ignore first 2 bytes
    8bd0:	|                 \-> move.l 1c9b2 <bigDataFile>,d0
    8bd6:	|                     move.l d0,-(sp)
    8bd8:	|                     jsr 6bc <get2bytes>
    8bde:	|                     addq.l #4,sp
	loadhere->type = FGetC(bigDataFile);
    8be0:	|                     move.l 1c9b2 <bigDataFile>,82(sp)
    8be8:	|                     move.l 1c9d2 <DOSBase>,d0
    8bee:	|                     movea.l d0,a6
    8bf0:	|                     move.l 82(sp),d1
    8bf4:	|                     jsr -306(a6)
    8bf8:	|                     move.l d0,78(sp)
    8bfc:	|                     move.l 78(sp),d0
    8c00:	|                     movea.l 112(sp),a0
    8c04:	|                     move.l d0,4(a0)
	total = get2bytes(bigDataFile);
    8c08:	|                     move.l 1c9b2 <bigDataFile>,d0
    8c0e:	|                     move.l d0,-(sp)
    8c10:	|                     jsr 6bc <get2bytes>
    8c16:	|                     addq.l #4,sp
    8c18:	|                     move.l d0,74(sp)

	if (total <= 0) {
    8c1c:	|                 /-- bgt.s 8c32 <loadSpriteBank+0xa8>
		KPrintF("loadSpriteBank: No sprites in bank or invalid sprite bank file\n");
    8c1e:	|                 |   pea 1907f <PutChar+0x1361>
    8c24:	|                 |   jsr 17254 <KPrintF>
    8c2a:	|                 |   addq.l #4,sp
		return FALSE;
    8c2c:	|                 |   clr.w d0
    8c2e:	+-----------------|-- bra.w 8fc4 <loadSpriteBank+0x43a>
	}
	if (loadhere->type == 3)
    8c32:	|                 \-> movea.l 112(sp),a0
    8c36:	|                     move.l 4(a0),d0
    8c3a:	|                     moveq #3,d1
    8c3c:	|                     cmp.l d0,d1
    8c3e:	|                 /-- bne.s 8c4c <loadSpriteBank+0xc2>
	{
		loadhere->isFont = TRUE;
    8c40:	|                 |   movea.l 112(sp),a0
    8c44:	|                 |   move.w #1,12(a0)
    8c4a:	|              /--|-- bra.s 8c6e <loadSpriteBank+0xe4>
	}
	else if (loadhere->type > 3) {
    8c4c:	|              |  \-> movea.l 112(sp),a0
    8c50:	|              |      move.l 4(a0),d0
    8c54:	|              |      moveq #3,d1
    8c56:	|              |      cmp.l d0,d1
    8c58:	|              +----- bge.s 8c6e <loadSpriteBank+0xe4>
		KPrintF("loadSpriteBank: Unsupported sprite bank file format\n");
    8c5a:	|              |      pea 190bf <PutChar+0x13a1>
    8c60:	|              |      jsr 17254 <KPrintF>
    8c66:	|              |      addq.l #4,sp
		return FALSE;
    8c68:	|              |      clr.w d0
    8c6a:	+--------------|----- bra.w 8fc4 <loadSpriteBank+0x43a>
	}

	loadhere->total = total;
    8c6e:	|              \----> movea.l 112(sp),a0
    8c72:	|                     move.l 74(sp),(a0)
	loadhere->sprites = AllocVec(sizeof(struct sprite) * total, MEMF_ANY);
    8c76:	|                     move.l 74(sp),d1
    8c7a:	|                     move.l d1,d0
    8c7c:	|                     lsl.l #3,d0
    8c7e:	|                     sub.l d1,d0
    8c80:	|                     add.l d0,d0
    8c82:	|                     add.l d0,d0
    8c84:	|                     move.l d0,70(sp)
    8c88:	|                     clr.l 66(sp)
    8c8c:	|                     move.l 1c9ca <SysBase>,d0
    8c92:	|                     movea.l d0,a6
    8c94:	|                     move.l 70(sp),d0
    8c98:	|                     move.l 66(sp),d1
    8c9c:	|                     jsr -684(a6)
    8ca0:	|                     move.l d0,62(sp)
    8ca4:	|                     move.l 62(sp),d0
    8ca8:	|                     movea.l 112(sp),a0
    8cac:	|                     move.l d0,8(a0)
	if (!loadhere->sprites) return FALSE;	
    8cb0:	|                     movea.l 112(sp),a0
    8cb4:	|                     move.l 8(a0),d0
    8cb8:	|                 /-- bne.s 8cc0 <loadSpriteBank+0x136>
    8cba:	|                 |   clr.w d0
    8cbc:	+-----------------|-- bra.w 8fc4 <loadSpriteBank+0x43a>
	
	startIndex = 1;
    8cc0:	|                 \-> moveq #1,d0
    8cc2:	|                     move.l d0,90(sp)

	for (i = 0; i < total; i++) {
    8cc6:	|                     clr.l 100(sp)
    8cca:	|     /-------------- bra.w 8fa2 <loadSpriteBank+0x418>

		UWORD width = get2bytes(bigDataFile);
    8cce:	|  /--|-------------> move.l 1c9b2 <bigDataFile>,d0
    8cd4:	|  |  |               move.l d0,-(sp)
    8cd6:	|  |  |               jsr 6bc <get2bytes>
    8cdc:	|  |  |               addq.l #4,sp
    8cde:	|  |  |               move.w d0,60(sp)
		loadhere->sprites[i].width = width;
    8ce2:	|  |  |               movea.l 112(sp),a0
    8ce6:	|  |  |               movea.l 8(a0),a0
    8cea:	|  |  |               move.l 100(sp),d1
    8cee:	|  |  |               move.l d1,d0
    8cf0:	|  |  |               lsl.l #3,d0
    8cf2:	|  |  |               sub.l d1,d0
    8cf4:	|  |  |               add.l d0,d0
    8cf6:	|  |  |               add.l d0,d0
    8cf8:	|  |  |               adda.l d0,a0
    8cfa:	|  |  |               moveq #0,d0
    8cfc:	|  |  |               move.w 60(sp),d0
    8d00:	|  |  |               move.l d0,(a0)
		loadhere->sprites[i].height = get2bytes(bigDataFile);
    8d02:	|  |  |               movea.l 1c9b2 <bigDataFile>,a1
    8d08:	|  |  |               movea.l 112(sp),a0
    8d0c:	|  |  |               movea.l 8(a0),a0
    8d10:	|  |  |               move.l 100(sp),d1
    8d14:	|  |  |               move.l d1,d0
    8d16:	|  |  |               lsl.l #3,d0
    8d18:	|  |  |               sub.l d1,d0
    8d1a:	|  |  |               add.l d0,d0
    8d1c:	|  |  |               add.l d0,d0
    8d1e:	|  |  |               lea (0,a0,d0.l),a2
    8d22:	|  |  |               move.l a1,-(sp)
    8d24:	|  |  |               jsr 6bc <get2bytes>
    8d2a:	|  |  |               addq.l #4,sp
    8d2c:	|  |  |               move.l d0,4(a2)
		loadhere->sprites[i].xhot = get2bytes(bigDataFile);
    8d30:	|  |  |               movea.l 1c9b2 <bigDataFile>,a1
    8d36:	|  |  |               movea.l 112(sp),a0
    8d3a:	|  |  |               movea.l 8(a0),a0
    8d3e:	|  |  |               move.l 100(sp),d1
    8d42:	|  |  |               move.l d1,d0
    8d44:	|  |  |               lsl.l #3,d0
    8d46:	|  |  |               sub.l d1,d0
    8d48:	|  |  |               add.l d0,d0
    8d4a:	|  |  |               add.l d0,d0
    8d4c:	|  |  |               lea (0,a0,d0.l),a2
    8d50:	|  |  |               move.l a1,-(sp)
    8d52:	|  |  |               jsr 6bc <get2bytes>
    8d58:	|  |  |               addq.l #4,sp
    8d5a:	|  |  |               move.l d0,8(a2)
		loadhere->sprites[i].yhot = get2bytes(bigDataFile);
    8d5e:	|  |  |               movea.l 1c9b2 <bigDataFile>,a1
    8d64:	|  |  |               movea.l 112(sp),a0
    8d68:	|  |  |               movea.l 8(a0),a0
    8d6c:	|  |  |               move.l 100(sp),d1
    8d70:	|  |  |               move.l d1,d0
    8d72:	|  |  |               lsl.l #3,d0
    8d74:	|  |  |               sub.l d1,d0
    8d76:	|  |  |               add.l d0,d0
    8d78:	|  |  |               add.l d0,d0
    8d7a:	|  |  |               lea (0,a0,d0.l),a2
    8d7e:	|  |  |               move.l a1,-(sp)
    8d80:	|  |  |               jsr 6bc <get2bytes>
    8d86:	|  |  |               addq.l #4,sp
    8d88:	|  |  |               move.l d0,12(a2)

		UWORD size;
		
		switch( loadhere->type) 
    8d8c:	|  |  |               movea.l 112(sp),a0
    8d90:	|  |  |               move.l 4(a0),d0
    8d94:	|  |  |               moveq #3,d1
    8d96:	|  |  |               cmp.l d0,d1
    8d98:	|  |  |     /-------- beq.w 8e34 <loadSpriteBank+0x2aa>
    8d9c:	|  |  |     |         moveq #3,d1
    8d9e:	|  |  |     |         cmp.l d0,d1
    8da0:	|  |  |  /--|-------- blt.w 8eda <loadSpriteBank+0x350>
    8da4:	|  |  |  |  |         moveq #1,d1
    8da6:	|  |  |  |  |         cmp.l d0,d1
    8da8:	|  |  |  |  |     /-- beq.s 8db4 <loadSpriteBank+0x22a>
    8daa:	|  |  |  |  |     |   moveq #2,d1
    8dac:	|  |  |  |  |     |   cmp.l d0,d1
    8dae:	|  |  |  |  |  /--|-- beq.s 8de0 <loadSpriteBank+0x256>
    8db0:	|  |  |  +--|--|--|-- bra.w 8eda <loadSpriteBank+0x350>
		{
			case 1: //Sprite
				size = 4*loadhere->sprites[i].height+8;
    8db4:	|  |  |  |  |  |  \-> movea.l 112(sp),a0
    8db8:	|  |  |  |  |  |      movea.l 8(a0),a0
    8dbc:	|  |  |  |  |  |      move.l 100(sp),d1
    8dc0:	|  |  |  |  |  |      move.l d1,d0
    8dc2:	|  |  |  |  |  |      lsl.l #3,d0
    8dc4:	|  |  |  |  |  |      sub.l d1,d0
    8dc6:	|  |  |  |  |  |      add.l d0,d0
    8dc8:	|  |  |  |  |  |      add.l d0,d0
    8dca:	|  |  |  |  |  |      adda.l d0,a0
    8dcc:	|  |  |  |  |  |      move.l 4(a0),d0
    8dd0:	|  |  |  |  |  |      addq.l #2,d0
    8dd2:	|  |  |  |  |  |      move.l d0,d0
    8dd4:	|  |  |  |  |  |      add.w d0,d0
    8dd6:	|  |  |  |  |  |      add.w d0,d0
    8dd8:	|  |  |  |  |  |      move.w d0,98(sp)
				break;
    8ddc:	|  |  |  +--|--|----- bra.w 8eda <loadSpriteBank+0x350>
			case 2: //Bob
				size = loadhere->sprites[i].width / 8 * loadhere->sprites[i].height * 6;
    8de0:	|  |  |  |  |  \----> movea.l 112(sp),a0
    8de4:	|  |  |  |  |         movea.l 8(a0),a0
    8de8:	|  |  |  |  |         move.l 100(sp),d1
    8dec:	|  |  |  |  |         move.l d1,d0
    8dee:	|  |  |  |  |         lsl.l #3,d0
    8df0:	|  |  |  |  |         sub.l d1,d0
    8df2:	|  |  |  |  |         add.l d0,d0
    8df4:	|  |  |  |  |         add.l d0,d0
    8df6:	|  |  |  |  |         adda.l d0,a0
    8df8:	|  |  |  |  |         move.l (a0),d0
    8dfa:	|  |  |  |  |     /-- bpl.s 8dfe <loadSpriteBank+0x274>
    8dfc:	|  |  |  |  |     |   addq.l #7,d0
    8dfe:	|  |  |  |  |     \-> asr.l #3,d0
    8e00:	|  |  |  |  |         move.l d0,d2
    8e02:	|  |  |  |  |         movea.l 112(sp),a0
    8e06:	|  |  |  |  |         movea.l 8(a0),a0
    8e0a:	|  |  |  |  |         move.l 100(sp),d1
    8e0e:	|  |  |  |  |         move.l d1,d0
    8e10:	|  |  |  |  |         lsl.l #3,d0
    8e12:	|  |  |  |  |         sub.l d1,d0
    8e14:	|  |  |  |  |         add.l d0,d0
    8e16:	|  |  |  |  |         add.l d0,d0
    8e18:	|  |  |  |  |         adda.l d0,a0
    8e1a:	|  |  |  |  |         move.l 4(a0),d0
    8e1e:	|  |  |  |  |         move.l d0,d0
    8e20:	|  |  |  |  |         move.w d2,d1
    8e22:	|  |  |  |  |         muls.w d0,d1
    8e24:	|  |  |  |  |         move.w d1,d0
    8e26:	|  |  |  |  |         add.w d0,d0
    8e28:	|  |  |  |  |         add.w d1,d0
    8e2a:	|  |  |  |  |         add.w d0,d0
    8e2c:	|  |  |  |  |         move.w d0,98(sp)
				break;
    8e30:	|  |  |  +--|-------- bra.w 8eda <loadSpriteBank+0x350>
			case 3: //Font
				UWORD widthextra = loadhere->sprites[i].width % 16 > 0 ? 2 : 0;
    8e34:	|  |  |  |  \-------> movea.l 112(sp),a0
    8e38:	|  |  |  |            movea.l 8(a0),a0
    8e3c:	|  |  |  |            move.l 100(sp),d1
    8e40:	|  |  |  |            move.l d1,d0
    8e42:	|  |  |  |            lsl.l #3,d0
    8e44:	|  |  |  |            sub.l d1,d0
    8e46:	|  |  |  |            add.l d0,d0
    8e48:	|  |  |  |            add.l d0,d0
    8e4a:	|  |  |  |            adda.l d0,a0
    8e4c:	|  |  |  |            move.l (a0),d0
    8e4e:	|  |  |  |            andi.l #-2147483633,d0
    8e54:	|  |  |  |        /-- bpl.s 8e5e <loadSpriteBank+0x2d4>
    8e56:	|  |  |  |        |   subq.l #1,d0
    8e58:	|  |  |  |        |   moveq #-16,d1
    8e5a:	|  |  |  |        |   or.l d1,d0
    8e5c:	|  |  |  |        |   addq.l #1,d0
    8e5e:	|  |  |  |        \-> tst.l d0
    8e60:	|  |  |  |     /----- ble.s 8e66 <loadSpriteBank+0x2dc>
    8e62:	|  |  |  |     |      moveq #2,d0
    8e64:	|  |  |  |     |  /-- bra.s 8e68 <loadSpriteBank+0x2de>
    8e66:	|  |  |  |     \--|-> clr.w d0
    8e68:	|  |  |  |        \-> move.w d0,58(sp)
				size = ((loadhere->sprites[i].width  / 16) * 2 + widthextra) * loadhere->sprites[i].height;
    8e6c:	|  |  |  |            movea.l 112(sp),a0
    8e70:	|  |  |  |            movea.l 8(a0),a0
    8e74:	|  |  |  |            move.l 100(sp),d1
    8e78:	|  |  |  |            move.l d1,d0
    8e7a:	|  |  |  |            lsl.l #3,d0
    8e7c:	|  |  |  |            sub.l d1,d0
    8e7e:	|  |  |  |            add.l d0,d0
    8e80:	|  |  |  |            add.l d0,d0
    8e82:	|  |  |  |            adda.l d0,a0
    8e84:	|  |  |  |            move.l (a0),d0
    8e86:	|  |  |  |            movea.l d0,a0
    8e88:	|  |  |  |            cmpa.w #0,a0
    8e8c:	|  |  |  |        /-- bge.s 8e92 <loadSpriteBank+0x308>
    8e8e:	|  |  |  |        |   lea 15(a0),a0
    8e92:	|  |  |  |        \-> move.l a0,d0
    8e94:	|  |  |  |            asr.l #4,d0
    8e96:	|  |  |  |            add.l d0,d0
    8e98:	|  |  |  |            move.l d0,d1
    8e9a:	|  |  |  |            moveq #0,d0
    8e9c:	|  |  |  |            move.w 58(sp),d0
    8ea0:	|  |  |  |            add.l d1,d0
    8ea2:	|  |  |  |            move.l d0,d2
    8ea4:	|  |  |  |            movea.l 112(sp),a0
    8ea8:	|  |  |  |            movea.l 8(a0),a0
    8eac:	|  |  |  |            move.l 100(sp),d1
    8eb0:	|  |  |  |            move.l d1,d0
    8eb2:	|  |  |  |            lsl.l #3,d0
    8eb4:	|  |  |  |            sub.l d1,d0
    8eb6:	|  |  |  |            add.l d0,d0
    8eb8:	|  |  |  |            add.l d0,d0
    8eba:	|  |  |  |            adda.l d0,a0
    8ebc:	|  |  |  |            move.l 4(a0),d0
    8ec0:	|  |  |  |            move.l d0,d0
    8ec2:	|  |  |  |            move.w d2,d1
    8ec4:	|  |  |  |            muls.w d0,d1
    8ec6:	|  |  |  |            move.w d1,98(sp)
				if(size > 100)
    8eca:	|  |  |  |            cmpi.w #100,98(sp)
    8ed0:	|  |  |  |        /-- bls.s 8ed8 <loadSpriteBank+0x34e>
				{
					UWORD br1 = 1;
    8ed2:	|  |  |  |        |   move.w #1,56(sp)
				}
				break;
    8ed8:	|  |  |  |        \-> nop
		}

		loadhere->sprites[i].data = AllocVec(sizeof(UWORD) * size, MEMF_CHIP);
    8eda:	|  |  |  \----------> moveq #0,d0
    8edc:	|  |  |               move.w 98(sp),d0
    8ee0:	|  |  |               add.l d0,d0
    8ee2:	|  |  |               move.l d0,52(sp)
    8ee6:	|  |  |               moveq #2,d0
    8ee8:	|  |  |               move.l d0,48(sp)
    8eec:	|  |  |               move.l 1c9ca <SysBase>,d0
    8ef2:	|  |  |               movea.l d0,a6
    8ef4:	|  |  |               move.l 52(sp),d0
    8ef8:	|  |  |               move.l 48(sp),d1
    8efc:	|  |  |               jsr -684(a6)
    8f00:	|  |  |               move.l d0,44(sp)
    8f04:	|  |  |               movea.l 44(sp),a1
    8f08:	|  |  |               movea.l 112(sp),a0
    8f0c:	|  |  |               movea.l 8(a0),a0
    8f10:	|  |  |               move.l 100(sp),d1
    8f14:	|  |  |               move.l d1,d0
    8f16:	|  |  |               lsl.l #3,d0
    8f18:	|  |  |               sub.l d1,d0
    8f1a:	|  |  |               add.l d0,d0
    8f1c:	|  |  |               add.l d0,d0
    8f1e:	|  |  |               adda.l d0,a0
    8f20:	|  |  |               move.l a1,24(a0)
		UWORD count = FRead(bigDataFile, loadhere->sprites[i].data, 2, size / 2);
    8f24:	|  |  |               move.l 1c9b2 <bigDataFile>,40(sp)
    8f2c:	|  |  |               movea.l 112(sp),a0
    8f30:	|  |  |               movea.l 8(a0),a0
    8f34:	|  |  |               move.l 100(sp),d1
    8f38:	|  |  |               move.l d1,d0
    8f3a:	|  |  |               lsl.l #3,d0
    8f3c:	|  |  |               sub.l d1,d0
    8f3e:	|  |  |               add.l d0,d0
    8f40:	|  |  |               add.l d0,d0
    8f42:	|  |  |               adda.l d0,a0
    8f44:	|  |  |               move.l 24(a0),36(sp)
    8f4a:	|  |  |               moveq #2,d1
    8f4c:	|  |  |               move.l d1,32(sp)
    8f50:	|  |  |               move.w 98(sp),d0
    8f54:	|  |  |               lsr.w #1,d0
    8f56:	|  |  |               move.w d0,d0
    8f58:	|  |  |               andi.l #65535,d0
    8f5e:	|  |  |               move.l d0,28(sp)
    8f62:	|  |  |               move.l 1c9d2 <DOSBase>,d0
    8f68:	|  |  |               movea.l d0,a6
    8f6a:	|  |  |               move.l 40(sp),d1
    8f6e:	|  |  |               move.l 36(sp),d2
    8f72:	|  |  |               move.l 32(sp),d3
    8f76:	|  |  |               move.l 28(sp),d4
    8f7a:	|  |  |               jsr -324(a6)
    8f7e:	|  |  |               move.l d0,24(sp)
    8f82:	|  |  |               move.l 24(sp),d0
    8f86:	|  |  |               move.w d0,22(sp)
		if (!count) {
    8f8a:	|  |  |           /-- bne.s 8f9e <loadSpriteBank+0x414>
			KPrintF("loadSpriteBank: Cannot read sprite Data from File\n");
    8f8c:	|  |  |           |   pea 190f4 <PutChar+0x13d6>
    8f92:	|  |  |           |   jsr 17254 <KPrintF>
    8f98:	|  |  |           |   addq.l #4,sp
			return FALSE;
    8f9a:	|  |  |           |   clr.w d0
    8f9c:	+--|--|-----------|-- bra.s 8fc4 <loadSpriteBank+0x43a>
	for (i = 0; i < total; i++) {
    8f9e:	|  |  |           \-> addq.l #1,100(sp)
    8fa2:	|  |  \-------------> move.l 100(sp),d0
    8fa6:	|  |                  cmp.l 74(sp),d0
    8faa:	|  \----------------- blt.w 8cce <loadSpriteBank+0x144>
		}
	}

	finishAccess ();
    8fae:	|                     jsr 6c96 <finishAccess>

	KPrintF("loadSpriteBank: Complete\n");
    8fb4:	|                     pea 19127 <PutChar+0x1409>
    8fba:	|                     jsr 17254 <KPrintF>
    8fc0:	|                     addq.l #4,sp
	return TRUE;
    8fc2:	|                     moveq #1,d0
}
    8fc4:	\-------------------> movem.l (sp)+,d2-d4/a2/a6
    8fc8:	                      lea 84(sp),sp
    8fcc:	                      rts

00008fce <scaleSprite>:

BOOL scaleSprite (struct sprite *single, struct onScreenPerson * thisPerson, BOOL mirror) 
{
    8fce:	                   lea -16(sp),sp
    8fd2:	                   move.l 28(sp),d0
    8fd6:	                   move.w d0,d0
    8fd8:	                   move.w d0,2(sp)
	UWORD x =  (UWORD) thisPerson->x - single->xhot;
    8fdc:	                   movea.l 24(sp),a0
    8fe0:	                   move.l (a0),d0
    8fe2:	                   move.l d0,-(sp)
    8fe4:	                   jsr 179e6 <__fixunssfsi>
    8fea:	                   addq.l #4,sp
    8fec:	                   move.l d0,d0
    8fee:	                   movea.l 20(sp),a0
    8ff2:	                   move.l 8(a0),d1
    8ff6:	                   move.l d1,d1
    8ff8:	                   movea.w d0,a0
    8ffa:	                   suba.w d1,a0
    8ffc:	                   move.w a0,6(sp)
	UWORD y =  (UWORD) thisPerson->y - single->yhot;			
    9000:	                   movea.l 24(sp),a0
    9004:	                   move.l 4(a0),d0
    9008:	                   move.l d0,-(sp)
    900a:	                   jsr 179e6 <__fixunssfsi>
    9010:	                   addq.l #4,sp
    9012:	                   move.l d0,d0
    9014:	                   movea.l 20(sp),a0
    9018:	                   move.l 12(a0),d1
    901c:	                   move.l d1,d1
    901e:	                   movea.w d0,a0
    9020:	                   suba.w d1,a0
    9022:	                   move.w a0,4(sp)

	CstScaleSprite( single, thisPerson, (WORD) x, (WORD) y,SCREEN);
    9026:	                   move.w 4(sp),d0
    902a:	                   movea.w d0,a1
    902c:	                   move.w 6(sp),d0
    9030:	                   movea.w d0,a0
    9032:	                   pea 1 <_start+0x1>
    9036:	                   move.l a1,-(sp)
    9038:	                   move.l a0,-(sp)
    903a:	                   move.l 36(sp),-(sp)
    903e:	                   move.l 36(sp),-(sp)
    9042:	                   jsr 2d50 <CstScaleSprite>
    9048:	                   lea 20(sp),sp

	UWORD x1, y1, x2, y2;

	if (thisPerson -> extra & EXTRA_FIXTOSCREEN) {
    904c:	                   movea.l 24(sp),a0
    9050:	                   move.l 118(a0),d0
    9054:	                   moveq #8,d1
    9056:	                   and.l d1,d0
    9058:	   /-------------- beq.w 911a <scaleSprite+0x14c>
		if (single->xhot < 0)
    905c:	   |               movea.l 20(sp),a0
    9060:	   |               move.l 8(a0),d0
    9064:	   |  /----------- bpl.s 909c <scaleSprite+0xce>
			x1 = x - (int)(mirror ? single->width - single->xhot : single->xhot+1);
    9066:	   |  |            tst.w 2(sp)
    906a:	   |  |     /----- beq.s 9082 <scaleSprite+0xb4>
    906c:	   |  |     |      movea.l 20(sp),a0
    9070:	   |  |     |      move.l (a0),d0
    9072:	   |  |     |      move.l d0,d1
    9074:	   |  |     |      movea.l 20(sp),a0
    9078:	   |  |     |      move.l 8(a0),d0
    907c:	   |  |     |      move.l d0,d0
    907e:	   |  |     |      sub.w d0,d1
    9080:	   |  |     |  /-- bra.s 9090 <scaleSprite+0xc2>
    9082:	   |  |     \--|-> movea.l 20(sp),a0
    9086:	   |  |        |   move.l 8(a0),d0
    908a:	   |  |        |   move.l d0,d0
    908c:	   |  |        |   move.w d0,d1
    908e:	   |  |        |   addq.w #1,d1
    9090:	   |  |        \-> movea.w 6(sp),a0
    9094:	   |  |            suba.w d1,a0
    9096:	   |  |            move.w a0,14(sp)
    909a:	   |  |  /-------- bra.s 90d0 <scaleSprite+0x102>
		else
			x1 = x - (int)(mirror ? single->width - (single->xhot+1) : single->xhot);
    909c:	   |  \--|-------> tst.w 2(sp)
    90a0:	   |     |  /----- beq.s 90bc <scaleSprite+0xee>
    90a2:	   |     |  |      movea.l 20(sp),a0
    90a6:	   |     |  |      move.l (a0),d0
    90a8:	   |     |  |      move.l d0,d1
    90aa:	   |     |  |      movea.l 20(sp),a0
    90ae:	   |     |  |      move.l 8(a0),d0
    90b2:	   |     |  |      move.l d0,d0
    90b4:	   |     |  |      sub.w d0,d1
    90b6:	   |     |  |      move.w d1,d0
    90b8:	   |     |  |      subq.w #1,d0
    90ba:	   |     |  |  /-- bra.s 90c6 <scaleSprite+0xf8>
    90bc:	   |     |  \--|-> movea.l 20(sp),a0
    90c0:	   |     |     |   move.l 8(a0),d0
    90c4:	   |     |     |   move.l d0,d0
    90c6:	   |     |     \-> move.w 6(sp),d1
    90ca:	   |     |         sub.w d0,d1
    90cc:	   |     |         move.w d1,14(sp)
		
		y1 = y - (single->yhot - thisPerson->floaty);
    90d0:	   |     \-------> movea.l 24(sp),a0
    90d4:	   |               move.l 24(a0),d0
    90d8:	   |               move.l d0,d1
    90da:	   |               movea.l 20(sp),a0
    90de:	   |               move.l 12(a0),d0
    90e2:	   |               move.l d0,d0
    90e4:	   |               sub.w d0,d1
    90e6:	   |               movea.w 4(sp),a0
    90ea:	   |               adda.w d1,a0
    90ec:	   |               move.w a0,12(sp)
		x2 = x1 + single->width;
    90f0:	   |               movea.l 20(sp),a0
    90f4:	   |               move.l (a0),d0
    90f6:	   |               move.l d0,d0
    90f8:	   |               move.w 14(sp),d1
    90fc:	   |               add.w d0,d1
    90fe:	   |               move.w d1,10(sp)
		y2 = y1 + single->height;
    9102:	   |               movea.l 20(sp),a0
    9106:	   |               move.l 4(a0),d0
    910a:	   |               move.l d0,d0
    910c:	   |               movea.w 12(sp),a0
    9110:	   |               adda.w d0,a0
    9112:	   |               move.w a0,8(sp)
    9116:	/--|-------------- bra.w 91ec <scaleSprite+0x21e>
	} else {
		x -= cameraX;
    911a:	|  \-------------> move.l 1ca84 <cameraX>,d0
    9120:	|                  move.l d0,d0
    9122:	|                  sub.w d0,6(sp)
		y -= cameraY;
    9126:	|                  move.l 1ca88 <cameraY>,d0
    912c:	|                  move.l d0,d0
    912e:	|                  sub.w d0,4(sp)
		if (single->xhot < 0)
    9132:	|                  movea.l 20(sp),a0
    9136:	|                  move.l 8(a0),d0
    913a:	|     /----------- bpl.s 9172 <scaleSprite+0x1a4>
			x1 = x - (int)(mirror ? single->width - single->xhot : single->xhot+1);
    913c:	|     |            tst.w 2(sp)
    9140:	|     |     /----- beq.s 9158 <scaleSprite+0x18a>
    9142:	|     |     |      movea.l 20(sp),a0
    9146:	|     |     |      move.l (a0),d0
    9148:	|     |     |      move.l d0,d1
    914a:	|     |     |      movea.l 20(sp),a0
    914e:	|     |     |      move.l 8(a0),d0
    9152:	|     |     |      move.l d0,d0
    9154:	|     |     |      sub.w d0,d1
    9156:	|     |     |  /-- bra.s 9166 <scaleSprite+0x198>
    9158:	|     |     \--|-> movea.l 20(sp),a0
    915c:	|     |        |   move.l 8(a0),d0
    9160:	|     |        |   move.l d0,d0
    9162:	|     |        |   move.w d0,d1
    9164:	|     |        |   addq.w #1,d1
    9166:	|     |        \-> move.w 6(sp),d0
    916a:	|     |            sub.w d1,d0
    916c:	|     |            move.w d0,14(sp)
    9170:	|     |  /-------- bra.s 91a6 <scaleSprite+0x1d8>
		else
			x1 = x - (int)(mirror ? single->width - (single->xhot+1) : single->xhot);
    9172:	|     \--|-------> tst.w 2(sp)
    9176:	|        |  /----- beq.s 9192 <scaleSprite+0x1c4>
    9178:	|        |  |      movea.l 20(sp),a0
    917c:	|        |  |      move.l (a0),d0
    917e:	|        |  |      move.l d0,d1
    9180:	|        |  |      movea.l 20(sp),a0
    9184:	|        |  |      move.l 8(a0),d0
    9188:	|        |  |      move.l d0,d0
    918a:	|        |  |      sub.w d0,d1
    918c:	|        |  |      move.w d1,d0
    918e:	|        |  |      subq.w #1,d0
    9190:	|        |  |  /-- bra.s 919c <scaleSprite+0x1ce>
    9192:	|        |  \--|-> movea.l 20(sp),a0
    9196:	|        |     |   move.l 8(a0),d0
    919a:	|        |     |   move.l d0,d0
    919c:	|        |     \-> move.w 6(sp),d1
    91a0:	|        |         sub.w d0,d1
    91a2:	|        |         move.w d1,14(sp)
		
		y1 = y - (single->yhot - thisPerson->floaty);
    91a6:	|        \-------> movea.l 24(sp),a0
    91aa:	|                  move.l 24(a0),d0
    91ae:	|                  move.l d0,d1
    91b0:	|                  movea.l 20(sp),a0
    91b4:	|                  move.l 12(a0),d0
    91b8:	|                  move.l d0,d0
    91ba:	|                  sub.w d0,d1
    91bc:	|                  movea.w 4(sp),a0
    91c0:	|                  adda.w d1,a0
    91c2:	|                  move.w a0,12(sp)
		x2 = x1 + single->width;
    91c6:	|                  movea.l 20(sp),a0
    91ca:	|                  move.l (a0),d0
    91cc:	|                  move.l d0,d0
    91ce:	|                  move.w 14(sp),d1
    91d2:	|                  add.w d0,d1
    91d4:	|                  move.w d1,10(sp)
		y2 = y1 + single->height;
    91d8:	|                  movea.l 20(sp),a0
    91dc:	|                  move.l 4(a0),d0
    91e0:	|                  move.l d0,d0
    91e2:	|                  movea.w 12(sp),a0
    91e6:	|                  adda.w d0,a0
    91e8:	|                  move.w a0,8(sp)
	}

	if (input.mouseX >= x1 && input.mouseX <= x2 && input.mouseY >= y1 && input.mouseY <= y2) {
    91ec:	\----------------> move.l 1c986 <input+0xa>,d1
    91f2:	                   moveq #0,d0
    91f4:	                   move.w 14(sp),d0
    91f8:	                   cmp.l d1,d0
    91fa:	            /----- bgt.s 9230 <scaleSprite+0x262>
    91fc:	            |      move.l 1c986 <input+0xa>,d1
    9202:	            |      moveq #0,d0
    9204:	            |      move.w 10(sp),d0
    9208:	            |      cmp.l d1,d0
    920a:	            +----- blt.s 9230 <scaleSprite+0x262>
    920c:	            |      move.l 1c98a <input+0xe>,d1
    9212:	            |      moveq #0,d0
    9214:	            |      move.w 12(sp),d0
    9218:	            |      cmp.l d1,d0
    921a:	            +----- bgt.s 9230 <scaleSprite+0x262>
    921c:	            |      move.l 1c98a <input+0xe>,d1
    9222:	            |      moveq #0,d0
    9224:	            |      move.w 8(sp),d0
    9228:	            |      cmp.l d1,d0
    922a:	            +----- blt.s 9230 <scaleSprite+0x262>
		return TRUE;
    922c:	            |      moveq #1,d0
    922e:	            |  /-- bra.s 9232 <scaleSprite+0x264>
	}
	return FALSE;
    9230:	            \--|-> clr.w d0
    9232:	               \-> lea 16(sp),sp
    9236:	                   rts

00009238 <TF_abs>:

short int scaleHorizon = 75;
short int scaleDivide = 150;

int TF_abs (int a) {
	return (a > 0) ? a : -a;
    9238:	    move.l 4(sp),d0
    923c:	/-- bpl.s 9240 <TF_abs+0x8>
    923e:	|   neg.l d0
}
    9240:	\-> rts

00009242 <addPerson>:


BOOL addPerson(int x, int y, int objNum, struct persona *p) {
    9242:	             lea -28(sp),sp
    9246:	             move.l a6,-(sp)
    9248:	             move.l d2,-(sp)
    struct onScreenPerson *newPerson = AllocVec(sizeof(struct onScreenPerson), MEMF_ANY);
    924a:	             move.l #132,28(sp)
    9252:	             clr.l 24(sp)
    9256:	             move.l 1c9ca <SysBase>,d0
    925c:	             movea.l d0,a6
    925e:	             move.l 28(sp),d0
    9262:	             move.l 24(sp),d1
    9266:	             jsr -684(a6)
    926a:	             move.l d0,20(sp)
    926e:	             move.l 20(sp),d0
    9272:	             move.l d0,16(sp)
    if (!newPerson) return FALSE;
    9276:	         /-- bne.s 927e <addPerson+0x3c>
    9278:	         |   clr.w d0
    927a:	/--------|-- bra.w 94ae <addPerson+0x26c>

    // EASY STUFF
    newPerson->thisType = loadObjectType(objNum);
    927e:	|        \-> move.l 48(sp),-(sp)
    9282:	|            jsr d62e <loadObjectType>
    9288:	|            addq.l #4,sp
    928a:	|            movea.l 16(sp),a0
    928e:	|            move.l d0,114(a0)
    newPerson->scale = 1;
    9292:	|            movea.l 16(sp),a0
    9296:	|            move.l #1065353216,32(a0)
    newPerson->extra = 0;
    929e:	|            movea.l 16(sp),a0
    92a2:	|            clr.l 118(a0)
    newPerson->continueAfterWalking = NULL;
    92a6:	|            movea.l 16(sp),a0
    92aa:	|            clr.l 68(a0)
    moveAndScale(newPerson, x, y);
    92ae:	|            move.l 44(sp),-(sp)
    92b2:	|            jsr 17686 <__floatsisf>
    92b8:	|            addq.l #4,sp
    92ba:	|            move.l d0,d2
    92bc:	|            move.l 40(sp),-(sp)
    92c0:	|            jsr 17686 <__floatsisf>
    92c6:	|            addq.l #4,sp
    92c8:	|            move.l d2,-(sp)
    92ca:	|            move.l d0,-(sp)
    92cc:	|            move.l 24(sp),-(sp)
    92d0:	|            jsr ad90 <moveAndScale>
    92d6:	|            lea 12(sp),sp
    newPerson->frameNum = 0;
    92da:	|            movea.l 16(sp),a0
    92de:	|            clr.l 84(a0)
    newPerson->walkToX = x;
    92e2:	|            movea.l 16(sp),a0
    92e6:	|            move.l 40(sp),40(a0)
    newPerson->walkToY = y;
    92ec:	|            movea.l 16(sp),a0
    92f0:	|            move.l 44(sp),44(a0)
    newPerson->walking = FALSE;
    92f6:	|            movea.l 16(sp),a0
    92fa:	|            clr.w 64(a0)
    newPerson->spinning = FALSE;
    92fe:	|            movea.l 16(sp),a0
    9302:	|            clr.w 66(a0)
    newPerson->show = TRUE;
    9306:	|            movea.l 16(sp),a0
    930a:	|            move.w #1,104(a0)
    newPerson->direction = 0;
    9310:	|            movea.l 16(sp),a0
    9314:	|            clr.l 106(a0)
    newPerson->angle = 180;
    9318:	|            movea.l 16(sp),a0
    931c:	|            move.l #180,92(a0)
    newPerson->wantAngle = 180;
    9324:	|            movea.l 16(sp),a0
    9328:	|            move.l #180,96(a0)
    newPerson->angleOffset = 0;
    9330:	|            movea.l 16(sp),a0
    9334:	|            clr.l 100(a0)
    newPerson->floaty = 0;
    9338:	|            movea.l 16(sp),a0
    933c:	|            clr.l 24(a0)
    newPerson->walkSpeed = newPerson->thisType->walkSpeed;
    9340:	|            movea.l 16(sp),a0
    9344:	|            movea.l 114(a0),a0
    9348:	|            move.l 24(a0),d0
    934c:	|            movea.l 16(sp),a0
    9350:	|            move.l d0,28(a0)
    newPerson->myAnim = NULL;
    9354:	|            movea.l 16(sp),a0
    9358:	|            clr.l 72(a0)
    newPerson->spinSpeed = newPerson->thisType->spinSpeed;
    935c:	|            movea.l 16(sp),a0
    9360:	|            movea.l 114(a0),a0
    9364:	|            move.l 32(a0),d0
    9368:	|            movea.l 16(sp),a0
    936c:	|            move.l d0,122(a0)
    newPerson->r = 0;
    9370:	|            movea.l 16(sp),a0
    9374:	|            clr.b 126(a0)
    newPerson->g = 0;
    9378:	|            movea.l 16(sp),a0
    937c:	|            clr.b 127(a0)
    newPerson->b = 0;
    9380:	|            movea.l 16(sp),a0
    9384:	|            clr.b 128(a0)
    newPerson->colourmix = 0;
    9388:	|            movea.l 16(sp),a0
    938c:	|            clr.b 129(a0)
    newPerson->transparency = 0;
    9390:	|            movea.l 16(sp),a0
    9394:	|            clr.b 130(a0)
    newPerson->myPersona = p;
    9398:	|            movea.l 16(sp),a0
    939c:	|            move.l 52(sp),80(a0)

    setFrames(newPerson, ANI_STAND);
    93a2:	|            clr.l -(sp)
    93a4:	|            move.l 20(sp),-(sp)
    93a8:	|            jsr 8192 <setFrames>
    93ae:	|            addq.l #8,sp

    // HEIGHT (BASED ON 1st FRAME OF 1st ANIMATION... INC. SPECIAL CASES)
    int fNumSigned = p->animation[0]->frames[0].frameNum;
    93b0:	|            movea.l 52(sp),a0
    93b4:	|            movea.l (a0),a0
    93b6:	|            movea.l (a0),a0
    93b8:	|            movea.l 4(a0),a0
    93bc:	|            move.l (a0),12(sp)
    int fNum = fNumSigned < 0 ? fNumSigned * - 1 : 1;
    93c0:	|     /----- bpl.s 93ca <addPerson+0x188>
    93c2:	|     |      move.l 12(sp),d0
    93c6:	|     |      neg.l d0
    93c8:	|     |  /-- bra.s 93cc <addPerson+0x18a>
    93ca:	|     \--|-> moveq #1,d0
    93cc:	|        \-> move.l d0,8(sp)
    if (fNum >= p->animation[0]->theSprites->bank.total) {
    93d0:	|            movea.l 52(sp),a0
    93d4:	|            movea.l (a0),a0
    93d6:	|            movea.l (a0),a0
    93d8:	|            movea.l (a0),a0
    93da:	|            move.l 8(a0),d0
    93de:	|            cmp.l 8(sp),d0
    93e2:	|     /----- bgt.s 9414 <addPerson+0x1d2>
        if (fNumSigned < 0) {
    93e4:	|     |      tst.l 12(sp)
    93e8:	|     |  /-- bge.s 93f6 <addPerson+0x1b4>
            newPerson->height = 5;
    93ea:	|     |  |   movea.l 16(sp),a0
    93ee:	|     |  |   moveq #5,d0
    93f0:	|     |  |   move.l d0,20(a0)
    93f4:	|  /--|--|-- bra.s 9440 <addPerson+0x1fe>
        } else {
            newPerson->height = p->animation[0]->theSprites->bank.sprites[0].yhot + 5;
    93f6:	|  |  |  \-> movea.l 52(sp),a0
    93fa:	|  |  |      movea.l (a0),a0
    93fc:	|  |  |      movea.l (a0),a0
    93fe:	|  |  |      movea.l (a0),a0
    9400:	|  |  |      movea.l 16(a0),a0
    9404:	|  |  |      move.l 12(a0),d0
    9408:	|  |  |      addq.l #5,d0
    940a:	|  |  |      movea.l 16(sp),a0
    940e:	|  |  |      move.l d0,20(a0)
    9412:	|  +--|----- bra.s 9440 <addPerson+0x1fe>
        }
    } else {
        newPerson->height = p->animation[0]->theSprites->bank.sprites[fNum].yhot + 5;
    9414:	|  |  \----> movea.l 52(sp),a0
    9418:	|  |         movea.l (a0),a0
    941a:	|  |         movea.l (a0),a0
    941c:	|  |         movea.l (a0),a0
    941e:	|  |         movea.l 16(a0),a0
    9422:	|  |         move.l 8(sp),d1
    9426:	|  |         move.l d1,d0
    9428:	|  |         lsl.l #3,d0
    942a:	|  |         sub.l d1,d0
    942c:	|  |         add.l d0,d0
    942e:	|  |         add.l d0,d0
    9430:	|  |         adda.l d0,a0
    9432:	|  |         move.l 12(a0),d0
    9436:	|  |         addq.l #5,d0
    9438:	|  |         movea.l 16(sp),a0
    943c:	|  |         move.l d0,20(a0)
    }

    // NOW ADD IT IN THE RIGHT PLACE
    struct onScreenPerson **changethat = &allPeople;
    9440:	|  \-------> move.l #117294,32(sp)

    while (((*changethat) != NULL) && ((*changethat)->y < y)) {
    9448:	|        /-- bra.s 9458 <addPerson+0x216>
        changethat = &((*changethat)->next);
    944a:	|     /--|-> movea.l 32(sp),a0
    944e:	|     |  |   move.l (a0),d0
    9450:	|     |  |   moveq #36,d1
    9452:	|     |  |   add.l d0,d1
    9454:	|     |  |   move.l d1,32(sp)
    while (((*changethat) != NULL) && ((*changethat)->y < y)) {
    9458:	|     |  \-> movea.l 32(sp),a0
    945c:	|     |      move.l (a0),d0
    945e:	|     |  /-- beq.s 9486 <addPerson+0x244>
    9460:	|     |  |   movea.l 32(sp),a0
    9464:	|     |  |   movea.l (a0),a0
    9466:	|     |  |   move.l 4(a0),d2
    946a:	|     |  |   move.l 44(sp),-(sp)
    946e:	|     |  |   jsr 17686 <__floatsisf>
    9474:	|     |  |   addq.l #4,sp
    9476:	|     |  |   move.l d0,-(sp)
    9478:	|     |  |   move.l d2,-(sp)
    947a:	|     |  |   jsr 178ac <__ltsf2>
    9480:	|     |  |   addq.l #8,sp
    9482:	|     |  |   tst.l d0
    9484:	|     \--|-- blt.s 944a <addPerson+0x208>
    }

    newPerson->next = (*changethat);
    9486:	|        \-> movea.l 32(sp),a0
    948a:	|            move.l (a0),d0
    948c:	|            movea.l 16(sp),a0
    9490:	|            move.l d0,36(a0)
    (*changethat) = newPerson;
    9494:	|            movea.l 32(sp),a0
    9498:	|            move.l 16(sp),(a0)

    return (BOOL) (newPerson->thisType != NULL);
    949c:	|            movea.l 16(sp),a0
    94a0:	|            move.l 114(a0),d0
    94a4:	|            sne d0
    94a6:	|            neg.b d0
    94a8:	|            move.b d0,d0
    94aa:	|            andi.w #255,d0
}
    94ae:	\----------> move.l (sp)+,d2
    94b0:	             movea.l (sp)+,a6
    94b2:	             lea 28(sp),sp
    94b6:	             rts

000094b8 <animatePerson>:

void animatePerson (int obj, struct personaAnimation * fram) { // Set a new SINGLE animation
    94b8:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(obj);
    94ba:	       move.l 8(sp),-(sp)
    94be:	       jsr a648 <findPerson>
    94c4:	       addq.l #4,sp
    94c6:	       move.l d0,(sp)
    if (moveMe) {
    94c8:	/----- beq.s 94fc <animatePerson+0x44>
        if (moveMe -> continueAfterWalking) abortFunction(moveMe -> continueAfterWalking);
    94ca:	|      movea.l (sp),a0
    94cc:	|      move.l 68(a0),d0
    94d0:	|  /-- beq.s 94e2 <animatePerson+0x2a>
    94d2:	|  |   movea.l (sp),a0
    94d4:	|  |   move.l 68(a0),d0
    94d8:	|  |   move.l d0,-(sp)
    94da:	|  |   jsr 473a <abortFunction>
    94e0:	|  |   addq.l #4,sp
        moveMe -> continueAfterWalking = NULL;
    94e2:	|  \-> movea.l (sp),a0
    94e4:	|      clr.l 68(a0)
        moveMe -> walking = FALSE;
    94e8:	|      movea.l (sp),a0
    94ea:	|      clr.w 64(a0)
        moveMe -> spinning = FALSE;
    94ee:	|      movea.l (sp),a0
    94f0:	|      clr.w 66(a0)
        moveMe -> myAnim = fram;
    94f4:	|      movea.l (sp),a0
    94f6:	|      move.l 12(sp),72(a0)
    }
}
    94fc:	\----> nop
    94fe:	       addq.l #4,sp
    9500:	       rts

00009502 <animatePersonUsingPersona>:

void animatePersonUsingPersona (int obj, struct persona * per) { // Set a new costume
    9502:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(obj);
    9504:	       move.l 8(sp),-(sp)
    9508:	       jsr a648 <findPerson>
    950e:	       addq.l #4,sp
    9510:	       move.l d0,(sp)
    if (moveMe) {
    9512:	/----- beq.s 9554 <animatePersonUsingPersona+0x52>
        // if (moveMe -> continueAfterWalking) abortFunction (moveMe -> continueAfterWalking);
        // moveMe -> continueAfterWalking = NULL;
        // moveMe -> walking = false;
        moveMe -> spinning = FALSE;
    9514:	|      movea.l (sp),a0
    9516:	|      clr.w 66(a0)
        moveMe -> myPersona = per;
    951a:	|      movea.l (sp),a0
    951c:	|      move.l 12(sp),80(a0)
        rethinkAngle(moveMe);
    9522:	|      move.l (sp),-(sp)
    9524:	|      jsr af1e <rethinkAngle>
    952a:	|      addq.l #4,sp
        if (moveMe->walking) {
    952c:	|      movea.l (sp),a0
    952e:	|      move.w 64(a0),d0
    9532:	|  /-- beq.s 9546 <animatePersonUsingPersona+0x44>
            setFrames(moveMe, ANI_WALK);
    9534:	|  |   pea 1 <_start+0x1>
    9538:	|  |   move.l 4(sp),-(sp)
    953c:	|  |   jsr 8192 <setFrames>
    9542:	|  |   addq.l #8,sp
        } else {
            setFrames(moveMe, ANI_STAND);
        }
    }
}
    9544:	+--|-- bra.s 9554 <animatePersonUsingPersona+0x52>
            setFrames(moveMe, ANI_STAND);
    9546:	|  \-> clr.l -(sp)
    9548:	|      move.l 4(sp),-(sp)
    954c:	|      jsr 8192 <setFrames>
    9552:	|      addq.l #8,sp
}
    9554:	\----> nop
    9556:	       addq.l #4,sp
    9558:	       rts

0000955a <copyAnim>:
		thisPerson = thisPerson->next;
	}
}


struct personaAnimation * copyAnim (struct personaAnimation * orig) {
    955a:	             lea -36(sp),sp
    955e:	             move.l a6,-(sp)
	int num = orig -> numFrames;
    9560:	             movea.l 44(sp),a0
    9564:	             move.l 8(a0),32(sp)


	struct personaAnimation * newAnim	= AllocVec(sizeof( struct personaAnimation), MEMF_ANY);
    956a:	             moveq #12,d0
    956c:	             move.l d0,28(sp)
    9570:	             clr.l 24(sp)
    9574:	             move.l 1c9ca <SysBase>,d0
    957a:	             movea.l d0,a6
    957c:	             move.l 28(sp),d0
    9580:	             move.l 24(sp),d1
    9584:	             jsr -684(a6)
    9588:	             move.l d0,20(sp)
    958c:	             move.l 20(sp),d0
    9590:	             move.l d0,16(sp)
	if (!(newAnim)) {
    9594:	         /-- bne.s 95aa <copyAnim+0x50>
		KPrintF("copyAnim: Cannot allocate memory");
    9596:	         |   pea 19141 <PutChar+0x1423>
    959c:	         |   jsr 17254 <KPrintF>
    95a2:	         |   addq.l #4,sp
		return NULL;
    95a4:	         |   moveq #0,d0
    95a6:	/--------|-- bra.w 96fc <copyAnim+0x1a2>
	}

	// Copy the easy bits...
	newAnim -> theSprites		= orig -> theSprites;
    95aa:	|        \-> movea.l 44(sp),a0
    95ae:	|            move.l (a0),d0
    95b0:	|            movea.l 16(sp),a0
    95b4:	|            move.l d0,(a0)
	newAnim -> theSprites ->timesUsed++;
    95b6:	|            movea.l 16(sp),a0
    95ba:	|            movea.l (a0),a0
    95bc:	|            move.l 4(a0),d0
    95c0:	|            addq.l #1,d0
    95c2:	|            move.l d0,4(a0)
	newAnim -> numFrames		= num;
    95c6:	|            movea.l 16(sp),a0
    95ca:	|            move.l 32(sp),8(a0)

	if (num) {
    95d0:	|  /-------- beq.w 96f0 <copyAnim+0x196>

		// Argh! Frames! We need a whole NEW array of animFrame structures...

		newAnim->frames = AllocVec(sizeof(struct animFrame) * num, MEMF_ANY);
    95d4:	|  |         move.l 32(sp),d1
    95d8:	|  |         move.l d1,d0
    95da:	|  |         add.l d0,d0
    95dc:	|  |         add.l d1,d0
    95de:	|  |         add.l d0,d0
    95e0:	|  |         add.l d0,d0
    95e2:	|  |         move.l d0,12(sp)
    95e6:	|  |         clr.l 8(sp)
    95ea:	|  |         move.l 1c9ca <SysBase>,d0
    95f0:	|  |         movea.l d0,a6
    95f2:	|  |         move.l 12(sp),d0
    95f6:	|  |         move.l 8(sp),d1
    95fa:	|  |         jsr -684(a6)
    95fe:	|  |         move.l d0,4(sp)
    9602:	|  |         move.l 4(sp),d0
    9606:	|  |         movea.l 16(sp),a0
    960a:	|  |         move.l d0,4(a0)
		if (!newAnim->frames) {
    960e:	|  |         movea.l 16(sp),a0
    9612:	|  |         move.l 4(a0),d0
    9616:	|  |     /-- bne.s 962c <copyAnim+0xd2>
			KPrintF("copyAnim: Cannot allocate memory");
    9618:	|  |     |   pea 19141 <PutChar+0x1423>
    961e:	|  |     |   jsr 17254 <KPrintF>
    9624:	|  |     |   addq.l #4,sp
			return NULL;
    9626:	|  |     |   moveq #0,d0
    9628:	+--|-----|-- bra.w 96fc <copyAnim+0x1a2>
		}

		for (int a = 0; a < num; a ++) {
    962c:	|  |     \-> clr.l 36(sp)
    9630:	|  |     /-- bra.w 96e2 <copyAnim+0x188>
			newAnim -> frames[a].frameNum = orig -> frames[a].frameNum;
    9634:	|  |  /--|-> movea.l 44(sp),a0
    9638:	|  |  |  |   movea.l 4(a0),a0
    963c:	|  |  |  |   move.l 36(sp),d1
    9640:	|  |  |  |   move.l d1,d0
    9642:	|  |  |  |   add.l d0,d0
    9644:	|  |  |  |   add.l d1,d0
    9646:	|  |  |  |   add.l d0,d0
    9648:	|  |  |  |   add.l d0,d0
    964a:	|  |  |  |   lea (0,a0,d0.l),a1
    964e:	|  |  |  |   movea.l 16(sp),a0
    9652:	|  |  |  |   movea.l 4(a0),a0
    9656:	|  |  |  |   move.l 36(sp),d1
    965a:	|  |  |  |   move.l d1,d0
    965c:	|  |  |  |   add.l d0,d0
    965e:	|  |  |  |   add.l d1,d0
    9660:	|  |  |  |   add.l d0,d0
    9662:	|  |  |  |   add.l d0,d0
    9664:	|  |  |  |   adda.l d0,a0
    9666:	|  |  |  |   move.l (a1),d0
    9668:	|  |  |  |   move.l d0,(a0)
			newAnim -> frames[a].howMany = orig -> frames[a].howMany;
    966a:	|  |  |  |   movea.l 44(sp),a0
    966e:	|  |  |  |   movea.l 4(a0),a0
    9672:	|  |  |  |   move.l 36(sp),d1
    9676:	|  |  |  |   move.l d1,d0
    9678:	|  |  |  |   add.l d0,d0
    967a:	|  |  |  |   add.l d1,d0
    967c:	|  |  |  |   add.l d0,d0
    967e:	|  |  |  |   add.l d0,d0
    9680:	|  |  |  |   lea (0,a0,d0.l),a1
    9684:	|  |  |  |   movea.l 16(sp),a0
    9688:	|  |  |  |   movea.l 4(a0),a0
    968c:	|  |  |  |   move.l 36(sp),d1
    9690:	|  |  |  |   move.l d1,d0
    9692:	|  |  |  |   add.l d0,d0
    9694:	|  |  |  |   add.l d1,d0
    9696:	|  |  |  |   add.l d0,d0
    9698:	|  |  |  |   add.l d0,d0
    969a:	|  |  |  |   adda.l d0,a0
    969c:	|  |  |  |   move.l 4(a1),d0
    96a0:	|  |  |  |   move.l d0,4(a0)
			newAnim -> frames[a].noise = orig -> frames[a].noise;
    96a4:	|  |  |  |   movea.l 44(sp),a0
    96a8:	|  |  |  |   movea.l 4(a0),a0
    96ac:	|  |  |  |   move.l 36(sp),d1
    96b0:	|  |  |  |   move.l d1,d0
    96b2:	|  |  |  |   add.l d0,d0
    96b4:	|  |  |  |   add.l d1,d0
    96b6:	|  |  |  |   add.l d0,d0
    96b8:	|  |  |  |   add.l d0,d0
    96ba:	|  |  |  |   lea (0,a0,d0.l),a1
    96be:	|  |  |  |   movea.l 16(sp),a0
    96c2:	|  |  |  |   movea.l 4(a0),a0
    96c6:	|  |  |  |   move.l 36(sp),d1
    96ca:	|  |  |  |   move.l d1,d0
    96cc:	|  |  |  |   add.l d0,d0
    96ce:	|  |  |  |   add.l d1,d0
    96d0:	|  |  |  |   add.l d0,d0
    96d2:	|  |  |  |   add.l d0,d0
    96d4:	|  |  |  |   adda.l d0,a0
    96d6:	|  |  |  |   move.l 8(a1),d0
    96da:	|  |  |  |   move.l d0,8(a0)
		for (int a = 0; a < num; a ++) {
    96de:	|  |  |  |   addq.l #1,36(sp)
    96e2:	|  |  |  \-> move.l 36(sp),d0
    96e6:	|  |  |      cmp.l 32(sp),d0
    96ea:	|  |  \----- blt.w 9634 <copyAnim+0xda>
    96ee:	|  |     /-- bra.s 96f8 <copyAnim+0x19e>
		}
	} else {
		newAnim -> frames = NULL;
    96f0:	|  \-----|-> movea.l 16(sp),a0
    96f4:	|        |   clr.l 4(a0)
	}

	return newAnim;
    96f8:	|        \-> move.l 16(sp),d0
}
    96fc:	\----------> movea.l (sp)+,a6
    96fe:	             lea 36(sp),sp
    9702:	             rts

00009704 <createPersonaAnim>:


struct personaAnimation * createPersonaAnim (int num, struct variableStack **stacky) {
    9704:	                lea -44(sp),sp
    9708:	                move.l a6,-(sp)
    970a:	                move.l d2,-(sp)
	struct personaAnimation * newP = AllocVec( sizeof(struct personaAnimation), MEMF_ANY);
    970c:	                moveq #12,d0
    970e:	                move.l d0,40(sp)
    9712:	                clr.l 36(sp)
    9716:	                move.l 1c9ca <SysBase>,d0
    971c:	                movea.l d0,a6
    971e:	                move.l 40(sp),d0
    9722:	                move.l 36(sp),d1
    9726:	                jsr -684(a6)
    972a:	                move.l d0,32(sp)
    972e:	                move.l 32(sp),d0
    9732:	                move.l d0,28(sp)
	if( !newP) {
    9736:	            /-- bne.s 974c <createPersonaAnim+0x48>
		KPrintF("createPersonaAnim: Cannot allocate memory");
    9738:	            |   pea 19162 <PutChar+0x1444>
    973e:	            |   jsr 17254 <KPrintF>
    9744:	            |   addq.l #4,sp
		return NULL;
    9746:	            |   moveq #0,d0
    9748:	/-----------|-- bra.w 991c <createPersonaAnim+0x218>
	}

	newP -> numFrames = num;
    974c:	|           \-> movea.l 28(sp),a0
    9750:	|               move.l 56(sp),8(a0)
	newP -> frames = AllocVec( sizeof( struct animFrame) * num,MEMF_ANY);
    9756:	|               move.l 56(sp),d1
    975a:	|               move.l d1,d0
    975c:	|               add.l d0,d0
    975e:	|               add.l d1,d0
    9760:	|               add.l d0,d0
    9762:	|               add.l d0,d0
    9764:	|               move.l d0,24(sp)
    9768:	|               clr.l 20(sp)
    976c:	|               move.l 1c9ca <SysBase>,d0
    9772:	|               movea.l d0,a6
    9774:	|               move.l 24(sp),d0
    9778:	|               move.l 20(sp),d1
    977c:	|               jsr -684(a6)
    9780:	|               move.l d0,16(sp)
    9784:	|               move.l 16(sp),d0
    9788:	|               movea.l 28(sp),a0
    978c:	|               move.l d0,4(a0)
	if( !newP->frames) {
    9790:	|               movea.l 28(sp),a0
    9794:	|               move.l 4(a0),d0
    9798:	|           /-- bne.s 97ae <createPersonaAnim+0xaa>
		KPrintF("createPersonaAnim: Cannot allocate memory");
    979a:	|           |   pea 19162 <PutChar+0x1444>
    97a0:	|           |   jsr 17254 <KPrintF>
    97a6:	|           |   addq.l #4,sp
		return NULL;
    97a8:	|           |   moveq #0,d0
    97aa:	+-----------|-- bra.w 991c <createPersonaAnim+0x218>
	}

	int a = num, frameNum, howMany;
    97ae:	|           \-> move.l 56(sp),48(sp)

	struct variableStack *tmp = *stacky;
    97b4:	|               movea.l 60(sp),a0
    97b8:	|               move.l (a0),44(sp)
	while (a) {
    97bc:	|     /-------- bra.w 9910 <createPersonaAnim+0x20c>
		a --;
    97c0:	|  /--|-------> subq.l #1,48(sp)
		newP -> frames[a].noise = 0;
    97c4:	|  |  |         movea.l 28(sp),a0
    97c8:	|  |  |         movea.l 4(a0),a0
    97cc:	|  |  |         move.l 48(sp),d1
    97d0:	|  |  |         move.l d1,d0
    97d2:	|  |  |         add.l d0,d0
    97d4:	|  |  |         add.l d1,d0
    97d6:	|  |  |         add.l d0,d0
    97d8:	|  |  |         add.l d0,d0
    97da:	|  |  |         adda.l d0,a0
    97dc:	|  |  |         clr.l 8(a0)
		if ( tmp->thisVar.varType == SVT_FILE) {
    97e0:	|  |  |         movea.l 44(sp),a0
    97e4:	|  |  |         move.l (a0),d0
    97e6:	|  |  |         moveq #5,d1
    97e8:	|  |  |         cmp.l d0,d1
    97ea:	|  |  |     /-- bne.s 9816 <createPersonaAnim+0x112>
			newP -> frames[a].noise = tmp -> thisVar.varData.intValue;
    97ec:	|  |  |     |   movea.l 28(sp),a0
    97f0:	|  |  |     |   movea.l 4(a0),a0
    97f4:	|  |  |     |   move.l 48(sp),d1
    97f8:	|  |  |     |   move.l d1,d0
    97fa:	|  |  |     |   add.l d0,d0
    97fc:	|  |  |     |   add.l d1,d0
    97fe:	|  |  |     |   add.l d0,d0
    9800:	|  |  |     |   add.l d0,d0
    9802:	|  |  |     |   lea (0,a0,d0.l),a1
    9806:	|  |  |     |   movea.l 44(sp),a0
    980a:	|  |  |     |   move.l 4(a0),d0
    980e:	|  |  |     |   move.l d0,8(a1)
    9812:	|  |  |  /--|-- bra.w 98be <createPersonaAnim+0x1ba>
		} else if ( tmp -> thisVar.varType == SVT_FUNC) {
    9816:	|  |  |  |  \-> movea.l 44(sp),a0
    981a:	|  |  |  |      move.l (a0),d0
    981c:	|  |  |  |      moveq #2,d1
    981e:	|  |  |  |      cmp.l d0,d1
    9820:	|  |  |  |  /-- bne.s 984c <createPersonaAnim+0x148>
			newP -> frames[a].noise = - tmp -> thisVar.varData.intValue;
    9822:	|  |  |  |  |   movea.l 44(sp),a0
    9826:	|  |  |  |  |   move.l 4(a0),d2
    982a:	|  |  |  |  |   movea.l 28(sp),a0
    982e:	|  |  |  |  |   movea.l 4(a0),a0
    9832:	|  |  |  |  |   move.l 48(sp),d1
    9836:	|  |  |  |  |   move.l d1,d0
    9838:	|  |  |  |  |   add.l d0,d0
    983a:	|  |  |  |  |   add.l d1,d0
    983c:	|  |  |  |  |   add.l d0,d0
    983e:	|  |  |  |  |   add.l d0,d0
    9840:	|  |  |  |  |   adda.l d0,a0
    9842:	|  |  |  |  |   move.l d2,d0
    9844:	|  |  |  |  |   neg.l d0
    9846:	|  |  |  |  |   move.l d0,8(a0)
    984a:	|  |  |  +--|-- bra.s 98be <createPersonaAnim+0x1ba>
		} else if ( tmp -> thisVar.varType == SVT_STACK) {
    984c:	|  |  |  |  \-> movea.l 44(sp),a0
    9850:	|  |  |  |      move.l (a0),d0
    9852:	|  |  |  |      moveq #6,d1
    9854:	|  |  |  |      cmp.l d0,d1
    9856:	|  |  |  |  /-- bne.s 989e <createPersonaAnim+0x19a>
			getValueType (&frameNum, SVT_INT, &tmp->thisVar.varData.theStack -> first -> thisVar);
    9858:	|  |  |  |  |   movea.l 44(sp),a0
    985c:	|  |  |  |  |   movea.l 4(a0),a0
    9860:	|  |  |  |  |   move.l (a0),d0
    9862:	|  |  |  |  |   move.l d0,-(sp)
    9864:	|  |  |  |  |   pea 1 <_start+0x1>
    9868:	|  |  |  |  |   lea 20(sp),a0
    986c:	|  |  |  |  |   move.l a0,-(sp)
    986e:	|  |  |  |  |   jsr 147f4 <getValueType>
    9874:	|  |  |  |  |   lea 12(sp),sp
			getValueType (&howMany, SVT_INT, &tmp -> thisVar.varData.theStack -> first -> next -> thisVar);
    9878:	|  |  |  |  |   movea.l 44(sp),a0
    987c:	|  |  |  |  |   movea.l 4(a0),a0
    9880:	|  |  |  |  |   movea.l (a0),a0
    9882:	|  |  |  |  |   move.l 8(a0),d0
    9886:	|  |  |  |  |   move.l d0,-(sp)
    9888:	|  |  |  |  |   pea 1 <_start+0x1>
    988c:	|  |  |  |  |   lea 16(sp),a0
    9890:	|  |  |  |  |   move.l a0,-(sp)
    9892:	|  |  |  |  |   jsr 147f4 <getValueType>
    9898:	|  |  |  |  |   lea 12(sp),sp
    989c:	|  |  |  +--|-- bra.s 98be <createPersonaAnim+0x1ba>
		} else {
			getValueType (&frameNum, SVT_INT, &tmp -> thisVar);
    989e:	|  |  |  |  \-> move.l 44(sp),d0
    98a2:	|  |  |  |      move.l d0,-(sp)
    98a4:	|  |  |  |      pea 1 <_start+0x1>
    98a8:	|  |  |  |      lea 20(sp),a0
    98ac:	|  |  |  |      move.l a0,-(sp)
    98ae:	|  |  |  |      jsr 147f4 <getValueType>
    98b4:	|  |  |  |      lea 12(sp),sp
			howMany = 1;
    98b8:	|  |  |  |      moveq #1,d0
    98ba:	|  |  |  |      move.l d0,8(sp)
		}
		trimStack (stacky);
    98be:	|  |  |  \----> move.l 60(sp),-(sp)
    98c2:	|  |  |         jsr 15178 <trimStack>
    98c8:	|  |  |         addq.l #4,sp
		newP -> frames[a].frameNum = frameNum;
    98ca:	|  |  |         movea.l 28(sp),a0
    98ce:	|  |  |         movea.l 4(a0),a0
    98d2:	|  |  |         move.l 48(sp),d1
    98d6:	|  |  |         move.l d1,d0
    98d8:	|  |  |         add.l d0,d0
    98da:	|  |  |         add.l d1,d0
    98dc:	|  |  |         add.l d0,d0
    98de:	|  |  |         add.l d0,d0
    98e0:	|  |  |         adda.l d0,a0
    98e2:	|  |  |         move.l 12(sp),d0
    98e6:	|  |  |         move.l d0,(a0)
		newP -> frames[a].howMany = howMany;
    98e8:	|  |  |         movea.l 28(sp),a0
    98ec:	|  |  |         movea.l 4(a0),a0
    98f0:	|  |  |         move.l 48(sp),d1
    98f4:	|  |  |         move.l d1,d0
    98f6:	|  |  |         add.l d0,d0
    98f8:	|  |  |         add.l d1,d0
    98fa:	|  |  |         add.l d0,d0
    98fc:	|  |  |         add.l d0,d0
    98fe:	|  |  |         adda.l d0,a0
    9900:	|  |  |         move.l 8(sp),d0
    9904:	|  |  |         move.l d0,4(a0)
		tmp = *stacky;
    9908:	|  |  |         movea.l 60(sp),a0
    990c:	|  |  |         move.l (a0),44(sp)
	while (a) {
    9910:	|  |  \-------> tst.l 48(sp)
    9914:	|  \----------- bne.w 97c0 <createPersonaAnim+0xbc>
	}

	return newP;
    9918:	|               move.l 28(sp),d0
}
    991c:	\-------------> move.l (sp)+,d2
    991e:	                movea.l (sp)+,a6
    9920:	                lea 44(sp),sp
    9924:	                rts

00009926 <deleteAnim>:

void deleteAnim (struct personaAnimation * orig) {
    9926:	       lea -12(sp),sp
    992a:	       move.l a6,-(sp)

	if(orig->theSprites)
    992c:	       movea.l 20(sp),a0
    9930:	       move.l (a0),d0
    9932:	   /-- beq.s 995c <deleteAnim+0x36>
	{
		int timesused = --orig->theSprites->timesUsed;
    9934:	   |   movea.l 20(sp),a0
    9938:	   |   movea.l (a0),a0
    993a:	   |   move.l 4(a0),d0
    993e:	   |   subq.l #1,d0
    9940:	   |   move.l d0,4(a0)
    9944:	   |   move.l 4(a0),12(sp)
		
		if(!timesused)
    994a:	   +-- bne.s 995c <deleteAnim+0x36>
		{
			forgetSpriteBank( orig->theSprites);
    994c:	   |   movea.l 20(sp),a0
    9950:	   |   move.l (a0),d0
    9952:	   |   move.l d0,-(sp)
    9954:	   |   jsr 8a7e <forgetSpriteBank>
    995a:	   |   addq.l #4,sp
		}
	}			
	
	if (orig)
    995c:	   \-> tst.l 20(sp)
    9960:	/----- beq.s 99a0 <deleteAnim+0x7a>
	{
		if (orig -> numFrames) {
    9962:	|      movea.l 20(sp),a0
    9966:	|      move.l 8(a0),d0
    996a:	|  /-- beq.s 9986 <deleteAnim+0x60>
			FreeVec( orig->frames);
    996c:	|  |   movea.l 20(sp),a0
    9970:	|  |   move.l 4(a0),8(sp)
    9976:	|  |   move.l 1c9ca <SysBase>,d0
    997c:	|  |   movea.l d0,a6
    997e:	|  |   movea.l 8(sp),a1
    9982:	|  |   jsr -690(a6)
		}
		FreeVec(orig);
    9986:	|  \-> move.l 20(sp),4(sp)
    998c:	|      move.l 1c9ca <SysBase>,d0
    9992:	|      movea.l d0,a6
    9994:	|      movea.l 4(sp),a1
    9998:	|      jsr -690(a6)
		orig = NULL;
    999c:	|      clr.l 20(sp)
	}	
	
}
    99a0:	\----> nop
    99a2:	       movea.l (sp)+,a6
    99a4:	       lea 12(sp),sp
    99a8:	       rts

000099aa <doBorderStuff>:

BOOL doBorderStuff (struct onScreenPerson * moveMe) {
    99aa:	          lea -124(sp),sp
    99ae:	          movem.l d2-d7,-(sp)
    if (moveMe -> inPoly == moveMe -> walkToPoly) {
    99b2:	          movea.l 152(sp),a0
    99b6:	          move.l 56(a0),d1
    99ba:	          movea.l 152(sp),a0
    99be:	          move.l 60(a0),d0
    99c2:	          cmp.l d1,d0
    99c4:	      /-- bne.s 99f4 <doBorderStuff+0x4a>
        moveMe -> inPoly = -1;
    99c6:	      |   movea.l 152(sp),a0
    99ca:	      |   moveq #-1,d0
    99cc:	      |   move.l d0,56(a0)
        moveMe -> thisStepX = moveMe -> walkToX;
    99d0:	      |   movea.l 152(sp),a0
    99d4:	      |   move.l 40(a0),d0
    99d8:	      |   movea.l 152(sp),a0
    99dc:	      |   move.l d0,48(a0)
        moveMe -> thisStepY = moveMe -> walkToY;
    99e0:	      |   movea.l 152(sp),a0
    99e4:	      |   move.l 44(a0),d0
    99e8:	      |   movea.l 152(sp),a0
    99ec:	      |   move.l d0,52(a0)
    99f0:	   /--|-- bra.w 9f5a <doBorderStuff+0x5b0>
    } else {
        // The section in which we need to be next...
        int newPoly = currentFloor -> matrix[moveMe -> inPoly][moveMe -> walkToPoly];
    99f4:	   |  \-> movea.l 1cae6 <currentFloor>,a0
    99fa:	   |      move.l 16(a0),d1
    99fe:	   |      movea.l 152(sp),a0
    9a02:	   |      move.l 56(a0),d0
    9a06:	   |      add.l d0,d0
    9a08:	   |      add.l d0,d0
    9a0a:	   |      movea.l d1,a0
    9a0c:	   |      adda.l d0,a0
    9a0e:	   |      move.l (a0),d1
    9a10:	   |      movea.l 152(sp),a0
    9a14:	   |      move.l 60(a0),d0
    9a18:	   |      add.l d0,d0
    9a1a:	   |      add.l d0,d0
    9a1c:	   |      movea.l d1,a0
    9a1e:	   |      adda.l d0,a0
    9a20:	   |      move.l (a0),144(sp)
        if (newPoly == -1) return FALSE;
    9a24:	   |      moveq #-1,d0
    9a26:	   |      cmp.l 144(sp),d0
    9a2a:	   |  /-- bne.s 9a32 <doBorderStuff+0x88>
    9a2c:	   |  |   clr.w d0
    9a2e:	/--|--|-- bra.w a05a <doBorderStuff+0x6b0>

        // Grab the index of the second matching corner...
        int ID, ID2;
        if (! getMatchingCorners (&(currentFloor -> polygon[moveMe -> inPoly]), &(currentFloor -> polygon[newPoly]), &ID, &ID2))
    9a32:	|  |  \-> movea.l 1cae6 <currentFloor>,a0
    9a38:	|  |      move.l 12(a0),d1
    9a3c:	|  |      move.l 144(sp),d0
    9a40:	|  |      lsl.l #3,d0
    9a42:	|  |      add.l d0,d1
    9a44:	|  |      movea.l 1cae6 <currentFloor>,a0
    9a4a:	|  |      movea.l 12(a0),a1
    9a4e:	|  |      movea.l 152(sp),a0
    9a52:	|  |      move.l 56(a0),d0
    9a56:	|  |      lsl.l #3,d0
    9a58:	|  |      add.l a1,d0
    9a5a:	|  |      lea 40(sp),a0
    9a5e:	|  |      move.l a0,-(sp)
    9a60:	|  |      lea 48(sp),a0
    9a64:	|  |      move.l a0,-(sp)
    9a66:	|  |      move.l d1,-(sp)
    9a68:	|  |      move.l d0,-(sp)
    9a6a:	|  |      jsr 164d6 <getMatchingCorners>
    9a70:	|  |      lea 16(sp),sp
    9a74:	|  |      tst.w d0
    9a76:	|  |  /-- bne.s 9a8c <doBorderStuff+0xe2>
		{
			KPrintF ("Not a valid floor plan!");
    9a78:	|  |  |   pea 1918c <PutChar+0x146e>
    9a7e:	|  |  |   jsr 17254 <KPrintF>
    9a84:	|  |  |   addq.l #4,sp
            return FALSE;
    9a86:	|  |  |   clr.w d0
    9a88:	+--|--|-- bra.w a05a <doBorderStuff+0x6b0>
		}

        // Remember that we're walking to the new polygon...
        moveMe -> inPoly = newPoly;
    9a8c:	|  |  \-> movea.l 152(sp),a0
    9a90:	|  |      move.l 144(sp),56(a0)

        // Calculate the destination position on the coincidental line...
        int x1 = moveMe -> x, y1 = moveMe -> y;
    9a96:	|  |      movea.l 152(sp),a0
    9a9a:	|  |      move.l (a0),d0
    9a9c:	|  |      move.l d0,-(sp)
    9a9e:	|  |      jsr 1761e <__fixsfsi>
    9aa4:	|  |      addq.l #4,sp
    9aa6:	|  |      move.l d0,140(sp)
    9aaa:	|  |      movea.l 152(sp),a0
    9aae:	|  |      move.l 4(a0),d0
    9ab2:	|  |      move.l d0,-(sp)
    9ab4:	|  |      jsr 1761e <__fixsfsi>
    9aba:	|  |      addq.l #4,sp
    9abc:	|  |      move.l d0,136(sp)
        int x2 = moveMe -> walkToX, y2 = moveMe -> walkToY;
    9ac0:	|  |      movea.l 152(sp),a0
    9ac4:	|  |      move.l 40(a0),132(sp)
    9aca:	|  |      movea.l 152(sp),a0
    9ace:	|  |      move.l 44(a0),128(sp)
        int x3 = currentFloor -> vertex[ID].x, y3 = currentFloor -> vertex[ID].y;
    9ad4:	|  |      movea.l 1cae6 <currentFloor>,a0
    9ada:	|  |      move.l 4(a0),d1
    9ade:	|  |      move.l 44(sp),d0
    9ae2:	|  |      lsl.l #3,d0
    9ae4:	|  |      movea.l d1,a0
    9ae6:	|  |      adda.l d0,a0
    9ae8:	|  |      move.l (a0),124(sp)
    9aec:	|  |      movea.l 1cae6 <currentFloor>,a0
    9af2:	|  |      move.l 4(a0),d1
    9af6:	|  |      move.l 44(sp),d0
    9afa:	|  |      lsl.l #3,d0
    9afc:	|  |      movea.l d1,a0
    9afe:	|  |      adda.l d0,a0
    9b00:	|  |      move.l 4(a0),120(sp)
        int x4 = currentFloor -> vertex[ID2].x, y4 = currentFloor -> vertex[ID2].y;
    9b06:	|  |      movea.l 1cae6 <currentFloor>,a0
    9b0c:	|  |      move.l 4(a0),d1
    9b10:	|  |      move.l 40(sp),d0
    9b14:	|  |      lsl.l #3,d0
    9b16:	|  |      movea.l d1,a0
    9b18:	|  |      adda.l d0,a0
    9b1a:	|  |      move.l (a0),116(sp)
    9b1e:	|  |      movea.l 1cae6 <currentFloor>,a0
    9b24:	|  |      move.l 4(a0),d1
    9b28:	|  |      move.l 40(sp),d0
    9b2c:	|  |      lsl.l #3,d0
    9b2e:	|  |      movea.l d1,a0
    9b30:	|  |      adda.l d0,a0
    9b32:	|  |      move.l 4(a0),112(sp)

        int xAB = x1 - x2;
    9b38:	|  |      move.l 140(sp),d0
    9b3c:	|  |      sub.l 132(sp),d0
    9b40:	|  |      move.l d0,108(sp)
        int yAB = y1 - y2;
    9b44:	|  |      move.l 136(sp),d0
    9b48:	|  |      sub.l 128(sp),d0
    9b4c:	|  |      move.l d0,104(sp)
        int xCD = x4 - x3;
    9b50:	|  |      move.l 116(sp),d0
    9b54:	|  |      sub.l 124(sp),d0
    9b58:	|  |      move.l d0,100(sp)
        int yCD = y4 - y3;
    9b5c:	|  |      move.l 112(sp),d0
    9b60:	|  |      sub.l 120(sp),d0
    9b64:	|  |      move.l d0,96(sp)

        double m = (yAB * (x3 - x1) - xAB * (y3 - y1));
    9b68:	|  |      move.l 124(sp),d0
    9b6c:	|  |      sub.l 140(sp),d0
    9b70:	|  |      move.l 104(sp),-(sp)
    9b74:	|  |      move.l d0,-(sp)
    9b76:	|  |      jsr 17c08 <__mulsi3>
    9b7c:	|  |      addq.l #8,sp
    9b7e:	|  |      move.l d0,d2
    9b80:	|  |      move.l 120(sp),d0
    9b84:	|  |      sub.l 136(sp),d0
    9b88:	|  |      move.l 108(sp),-(sp)
    9b8c:	|  |      move.l d0,-(sp)
    9b8e:	|  |      jsr 17c08 <__mulsi3>
    9b94:	|  |      addq.l #8,sp
    9b96:	|  |      move.l d2,d1
    9b98:	|  |      sub.l d0,d1
    9b9a:	|  |      move.l d1,-(sp)
    9b9c:	|  |      jsr 17646 <__floatsidf>
    9ba2:	|  |      addq.l #4,sp
    9ba4:	|  |      move.l d0,32(sp)
    9ba8:	|  |      move.l d1,36(sp)
    9bac:	|  |      move.l 32(sp),88(sp)
    9bb2:	|  |      move.l 36(sp),92(sp)
        m /= ((xAB * yCD) - (yAB * xCD));
    9bb8:	|  |      move.l 96(sp),-(sp)
    9bbc:	|  |      move.l 112(sp),-(sp)
    9bc0:	|  |      jsr 17c08 <__mulsi3>
    9bc6:	|  |      addq.l #8,sp
    9bc8:	|  |      move.l d0,d2
    9bca:	|  |      move.l 100(sp),-(sp)
    9bce:	|  |      move.l 108(sp),-(sp)
    9bd2:	|  |      jsr 17c08 <__mulsi3>
    9bd8:	|  |      addq.l #8,sp
    9bda:	|  |      move.l d2,d1
    9bdc:	|  |      sub.l d0,d1
    9bde:	|  |      move.l d1,-(sp)
    9be0:	|  |      jsr 17646 <__floatsidf>
    9be6:	|  |      addq.l #4,sp
    9be8:	|  |      move.l d1,-(sp)
    9bea:	|  |      move.l d0,-(sp)
    9bec:	|  |      move.l 100(sp),-(sp)
    9bf0:	|  |      move.l 100(sp),-(sp)
    9bf4:	|  |      jsr 174da <__divdf3>
    9bfa:	|  |      lea 16(sp),sp
    9bfe:	|  |      move.l d0,24(sp)
    9c02:	|  |      move.l d1,28(sp)
    9c06:	|  |      move.l 24(sp),88(sp)
    9c0c:	|  |      move.l 28(sp),92(sp)

        if (m > 0 && m < 1) {
    9c12:	|  |      clr.l -(sp)
    9c14:	|  |      clr.l -(sp)
    9c16:	|  |      move.l 100(sp),-(sp)
    9c1a:	|  |      move.l 100(sp),-(sp)
    9c1e:	|  |      jsr 177a4 <__gtdf2>
    9c24:	|  |      lea 16(sp),sp
    9c28:	|  |      tst.l d0
    9c2a:	|  |  /-- ble.w 9d02 <doBorderStuff+0x358>
    9c2e:	|  |  |   clr.l -(sp)
    9c30:	|  |  |   move.l #1072693248,-(sp)
    9c36:	|  |  |   move.l 100(sp),-(sp)
    9c3a:	|  |  |   move.l 100(sp),-(sp)
    9c3e:	|  |  |   jsr 1785e <__ltdf2>
    9c44:	|  |  |   lea 16(sp),sp
    9c48:	|  |  |   tst.l d0
    9c4a:	|  |  +-- bge.w 9d02 <doBorderStuff+0x358>
            moveMe -> thisStepX = x3 + m * xCD;
    9c4e:	|  |  |   move.l 124(sp),-(sp)
    9c52:	|  |  |   jsr 17646 <__floatsidf>
    9c58:	|  |  |   addq.l #4,sp
    9c5a:	|  |  |   move.l d0,d2
    9c5c:	|  |  |   move.l d1,d3
    9c5e:	|  |  |   move.l 100(sp),-(sp)
    9c62:	|  |  |   jsr 17646 <__floatsidf>
    9c68:	|  |  |   addq.l #4,sp
    9c6a:	|  |  |   move.l 92(sp),-(sp)
    9c6e:	|  |  |   move.l 92(sp),-(sp)
    9c72:	|  |  |   move.l d1,-(sp)
    9c74:	|  |  |   move.l d0,-(sp)
    9c76:	|  |  |   jsr 176d6 <__muldf3>
    9c7c:	|  |  |   lea 16(sp),sp
    9c80:	|  |  |   move.l d1,-(sp)
    9c82:	|  |  |   move.l d0,-(sp)
    9c84:	|  |  |   move.l d3,-(sp)
    9c86:	|  |  |   move.l d2,-(sp)
    9c88:	|  |  |   jsr 17478 <__adddf3>
    9c8e:	|  |  |   lea 16(sp),sp
    9c92:	|  |  |   move.l d1,-(sp)
    9c94:	|  |  |   move.l d0,-(sp)
    9c96:	|  |  |   jsr 175e8 <__fixdfsi>
    9c9c:	|  |  |   addq.l #8,sp
    9c9e:	|  |  |   movea.l 152(sp),a0
    9ca2:	|  |  |   move.l d0,48(a0)
            moveMe -> thisStepY = y3 + m * yCD;
    9ca6:	|  |  |   move.l 120(sp),-(sp)
    9caa:	|  |  |   jsr 17646 <__floatsidf>
    9cb0:	|  |  |   addq.l #4,sp
    9cb2:	|  |  |   move.l d0,d2
    9cb4:	|  |  |   move.l d1,d3
    9cb6:	|  |  |   move.l 96(sp),-(sp)
    9cba:	|  |  |   jsr 17646 <__floatsidf>
    9cc0:	|  |  |   addq.l #4,sp
    9cc2:	|  |  |   move.l 92(sp),-(sp)
    9cc6:	|  |  |   move.l 92(sp),-(sp)
    9cca:	|  |  |   move.l d1,-(sp)
    9ccc:	|  |  |   move.l d0,-(sp)
    9cce:	|  |  |   jsr 176d6 <__muldf3>
    9cd4:	|  |  |   lea 16(sp),sp
    9cd8:	|  |  |   move.l d1,-(sp)
    9cda:	|  |  |   move.l d0,-(sp)
    9cdc:	|  |  |   move.l d3,-(sp)
    9cde:	|  |  |   move.l d2,-(sp)
    9ce0:	|  |  |   jsr 17478 <__adddf3>
    9ce6:	|  |  |   lea 16(sp),sp
    9cea:	|  |  |   move.l d1,-(sp)
    9cec:	|  |  |   move.l d0,-(sp)
    9cee:	|  |  |   jsr 175e8 <__fixdfsi>
    9cf4:	|  |  |   addq.l #8,sp
    9cf6:	|  |  |   movea.l 152(sp),a0
    9cfa:	|  |  |   move.l d0,52(a0)
    9cfe:	|  +--|-- bra.w 9f5a <doBorderStuff+0x5b0>
        } else {
            int dx13 = x1 - x3, dx14 = x1 - x4, dx23 = x2 - x3, dx24 = x2 - x4;
    9d02:	|  |  \-> move.l 140(sp),d0
    9d06:	|  |      sub.l 124(sp),d0
    9d0a:	|  |      move.l d0,84(sp)
    9d0e:	|  |      move.l 140(sp),d0
    9d12:	|  |      sub.l 116(sp),d0
    9d16:	|  |      move.l d0,80(sp)
    9d1a:	|  |      move.l 132(sp),d0
    9d1e:	|  |      sub.l 124(sp),d0
    9d22:	|  |      move.l d0,76(sp)
    9d26:	|  |      move.l 132(sp),d0
    9d2a:	|  |      sub.l 116(sp),d0
    9d2e:	|  |      move.l d0,72(sp)
            int dy13 = y1 - y3, dy14 = y1 - y4, dy23 = y2 - y3, dy24 = y2 - y4;
    9d32:	|  |      move.l 136(sp),d0
    9d36:	|  |      sub.l 120(sp),d0
    9d3a:	|  |      move.l d0,68(sp)
    9d3e:	|  |      move.l 136(sp),d0
    9d42:	|  |      sub.l 112(sp),d0
    9d46:	|  |      move.l d0,64(sp)
    9d4a:	|  |      move.l 128(sp),d0
    9d4e:	|  |      sub.l 120(sp),d0
    9d52:	|  |      move.l d0,60(sp)
    9d56:	|  |      move.l 128(sp),d0
    9d5a:	|  |      sub.l 112(sp),d0
    9d5e:	|  |      move.l d0,56(sp)

            dx13 *= dx13; dx14 *= dx14; dx23 *= dx23; dx24 *= dx24;
    9d62:	|  |      move.l 84(sp),-(sp)
    9d66:	|  |      move.l 88(sp),-(sp)
    9d6a:	|  |      jsr 17c08 <__mulsi3>
    9d70:	|  |      addq.l #8,sp
    9d72:	|  |      move.l d0,84(sp)
    9d76:	|  |      move.l 80(sp),-(sp)
    9d7a:	|  |      move.l 84(sp),-(sp)
    9d7e:	|  |      jsr 17c08 <__mulsi3>
    9d84:	|  |      addq.l #8,sp
    9d86:	|  |      move.l d0,80(sp)
    9d8a:	|  |      move.l 76(sp),-(sp)
    9d8e:	|  |      move.l 80(sp),-(sp)
    9d92:	|  |      jsr 17c08 <__mulsi3>
    9d98:	|  |      addq.l #8,sp
    9d9a:	|  |      move.l d0,76(sp)
    9d9e:	|  |      move.l 72(sp),-(sp)
    9da2:	|  |      move.l 76(sp),-(sp)
    9da6:	|  |      jsr 17c08 <__mulsi3>
    9dac:	|  |      addq.l #8,sp
    9dae:	|  |      move.l d0,72(sp)
            dy13 *= dy13; dy14 *= dy14; dy23 *= dy23; dy24 *= dy24;
    9db2:	|  |      move.l 68(sp),-(sp)
    9db6:	|  |      move.l 72(sp),-(sp)
    9dba:	|  |      jsr 17c08 <__mulsi3>
    9dc0:	|  |      addq.l #8,sp
    9dc2:	|  |      move.l d0,68(sp)
    9dc6:	|  |      move.l 64(sp),-(sp)
    9dca:	|  |      move.l 68(sp),-(sp)
    9dce:	|  |      jsr 17c08 <__mulsi3>
    9dd4:	|  |      addq.l #8,sp
    9dd6:	|  |      move.l d0,64(sp)
    9dda:	|  |      move.l 60(sp),-(sp)
    9dde:	|  |      move.l 64(sp),-(sp)
    9de2:	|  |      jsr 17c08 <__mulsi3>
    9de8:	|  |      addq.l #8,sp
    9dea:	|  |      move.l d0,60(sp)
    9dee:	|  |      move.l 56(sp),-(sp)
    9df2:	|  |      move.l 60(sp),-(sp)
    9df6:	|  |      jsr 17c08 <__mulsi3>
    9dfc:	|  |      addq.l #8,sp
    9dfe:	|  |      move.l d0,56(sp)

            if (sqrt((double) dx13 + dy13) + sqrt((double) dx23 + dy23) <
    9e02:	|  |      move.l 84(sp),-(sp)
    9e06:	|  |      jsr 17646 <__floatsidf>
    9e0c:	|  |      addq.l #4,sp
    9e0e:	|  |      move.l d0,d2
    9e10:	|  |      move.l d1,d3
    9e12:	|  |      move.l 68(sp),-(sp)
    9e16:	|  |      jsr 17646 <__floatsidf>
    9e1c:	|  |      addq.l #4,sp
    9e1e:	|  |      move.l d1,-(sp)
    9e20:	|  |      move.l d0,-(sp)
    9e22:	|  |      move.l d3,-(sp)
    9e24:	|  |      move.l d2,-(sp)
    9e26:	|  |      jsr 17478 <__adddf3>
    9e2c:	|  |      lea 16(sp),sp
    9e30:	|  |      move.l d1,-(sp)
    9e32:	|  |      move.l d0,-(sp)
    9e34:	|  |      jsr 17bbe <sqrt>
    9e3a:	|  |      addq.l #8,sp
    9e3c:	|  |      move.l d0,d2
    9e3e:	|  |      move.l d1,d3
    9e40:	|  |      move.l 76(sp),-(sp)
    9e44:	|  |      jsr 17646 <__floatsidf>
    9e4a:	|  |      addq.l #4,sp
    9e4c:	|  |      move.l d0,d4
    9e4e:	|  |      move.l d1,d5
    9e50:	|  |      move.l 60(sp),-(sp)
    9e54:	|  |      jsr 17646 <__floatsidf>
    9e5a:	|  |      addq.l #4,sp
    9e5c:	|  |      move.l d1,-(sp)
    9e5e:	|  |      move.l d0,-(sp)
    9e60:	|  |      move.l d5,-(sp)
    9e62:	|  |      move.l d4,-(sp)
    9e64:	|  |      jsr 17478 <__adddf3>
    9e6a:	|  |      lea 16(sp),sp
    9e6e:	|  |      move.l d1,-(sp)
    9e70:	|  |      move.l d0,-(sp)
    9e72:	|  |      jsr 17bbe <sqrt>
    9e78:	|  |      addq.l #8,sp
    9e7a:	|  |      move.l d1,-(sp)
    9e7c:	|  |      move.l d0,-(sp)
    9e7e:	|  |      move.l d3,-(sp)
    9e80:	|  |      move.l d2,-(sp)
    9e82:	|  |      jsr 17478 <__adddf3>
    9e88:	|  |      lea 16(sp),sp
    9e8c:	|  |      move.l d0,d2
    9e8e:	|  |      move.l d1,d3
                sqrt((double) dx14 + dy14) + sqrt((double) dx24 + dy24)) {
    9e90:	|  |      move.l 80(sp),-(sp)
    9e94:	|  |      jsr 17646 <__floatsidf>
    9e9a:	|  |      addq.l #4,sp
    9e9c:	|  |      move.l d0,d4
    9e9e:	|  |      move.l d1,d5
    9ea0:	|  |      move.l 64(sp),-(sp)
    9ea4:	|  |      jsr 17646 <__floatsidf>
    9eaa:	|  |      addq.l #4,sp
    9eac:	|  |      move.l d1,-(sp)
    9eae:	|  |      move.l d0,-(sp)
    9eb0:	|  |      move.l d5,-(sp)
    9eb2:	|  |      move.l d4,-(sp)
    9eb4:	|  |      jsr 17478 <__adddf3>
    9eba:	|  |      lea 16(sp),sp
    9ebe:	|  |      move.l d1,-(sp)
    9ec0:	|  |      move.l d0,-(sp)
    9ec2:	|  |      jsr 17bbe <sqrt>
    9ec8:	|  |      addq.l #8,sp
    9eca:	|  |      move.l d0,d4
    9ecc:	|  |      move.l d1,d5
    9ece:	|  |      move.l 72(sp),-(sp)
    9ed2:	|  |      jsr 17646 <__floatsidf>
    9ed8:	|  |      addq.l #4,sp
    9eda:	|  |      move.l d0,d6
    9edc:	|  |      move.l d1,d7
    9ede:	|  |      move.l 56(sp),-(sp)
    9ee2:	|  |      jsr 17646 <__floatsidf>
    9ee8:	|  |      addq.l #4,sp
    9eea:	|  |      move.l d1,-(sp)
    9eec:	|  |      move.l d0,-(sp)
    9eee:	|  |      move.l d7,-(sp)
    9ef0:	|  |      move.l d6,-(sp)
    9ef2:	|  |      jsr 17478 <__adddf3>
    9ef8:	|  |      lea 16(sp),sp
    9efc:	|  |      move.l d1,-(sp)
    9efe:	|  |      move.l d0,-(sp)
    9f00:	|  |      jsr 17bbe <sqrt>
    9f06:	|  |      addq.l #8,sp
    9f08:	|  |      move.l d1,-(sp)
    9f0a:	|  |      move.l d0,-(sp)
    9f0c:	|  |      move.l d5,-(sp)
    9f0e:	|  |      move.l d4,-(sp)
    9f10:	|  |      jsr 17478 <__adddf3>
    9f16:	|  |      lea 16(sp),sp
            if (sqrt((double) dx13 + dy13) + sqrt((double) dx23 + dy23) <
    9f1a:	|  |      move.l d1,-(sp)
    9f1c:	|  |      move.l d0,-(sp)
    9f1e:	|  |      move.l d3,-(sp)
    9f20:	|  |      move.l d2,-(sp)
    9f22:	|  |      jsr 1785e <__ltdf2>
    9f28:	|  |      lea 16(sp),sp
    9f2c:	|  |      tst.l d0
    9f2e:	|  |  /-- bge.s 9f46 <doBorderStuff+0x59c>
                moveMe -> thisStepX = x3;
    9f30:	|  |  |   movea.l 152(sp),a0
    9f34:	|  |  |   move.l 124(sp),48(a0)
                moveMe -> thisStepY = y3;
    9f3a:	|  |  |   movea.l 152(sp),a0
    9f3e:	|  |  |   move.l 120(sp),52(a0)
    9f44:	|  +--|-- bra.s 9f5a <doBorderStuff+0x5b0>
            } else {
                moveMe -> thisStepX = x4;
    9f46:	|  |  \-> movea.l 152(sp),a0
    9f4a:	|  |      move.l 116(sp),48(a0)
                moveMe -> thisStepY = y4;
    9f50:	|  |      movea.l 152(sp),a0
    9f54:	|  |      move.l 112(sp),52(a0)
            }
        }
    }

    float yDiff = moveMe -> thisStepY - moveMe -> y;
    9f5a:	|  \----> movea.l 152(sp),a0
    9f5e:	|         move.l 52(a0),d0
    9f62:	|         move.l d0,-(sp)
    9f64:	|         jsr 17686 <__floatsisf>
    9f6a:	|         addq.l #4,sp
    9f6c:	|         move.l d0,d1
    9f6e:	|         movea.l 152(sp),a0
    9f72:	|         move.l 4(a0),d0
    9f76:	|         move.l d0,-(sp)
    9f78:	|         move.l d1,-(sp)
    9f7a:	|         jsr 1797a <__subsf3>
    9f80:	|         addq.l #8,sp
    9f82:	|         move.l d0,52(sp)
    float xDiff = moveMe -> x - moveMe -> thisStepX;
    9f86:	|         movea.l 152(sp),a0
    9f8a:	|         move.l (a0),d2
    9f8c:	|         movea.l 152(sp),a0
    9f90:	|         move.l 48(a0),d0
    9f94:	|         move.l d0,-(sp)
    9f96:	|         jsr 17686 <__floatsisf>
    9f9c:	|         addq.l #4,sp
    9f9e:	|         move.l d0,-(sp)
    9fa0:	|         move.l d2,-(sp)
    9fa2:	|         jsr 1797a <__subsf3>
    9fa8:	|         addq.l #8,sp
    9faa:	|         move.l d0,48(sp)
    if (xDiff || yDiff) {
    9fae:	|         clr.l -(sp)
    9fb0:	|         move.l 52(sp),-(sp)
    9fb4:	|         jsr 178e2 <__nesf2>
    9fba:	|         addq.l #8,sp
    9fbc:	|         tst.l d0
    9fbe:	|     /-- bne.s 9fd2 <doBorderStuff+0x628>
    9fc0:	|     |   clr.l -(sp)
    9fc2:	|     |   move.l 56(sp),-(sp)
    9fc6:	|     |   jsr 178e2 <__nesf2>
    9fcc:	|     |   addq.l #8,sp
    9fce:	|     |   tst.l d0
    9fd0:	|  /--|-- beq.s a048 <doBorderStuff+0x69e>
        moveMe -> wantAngle = 180 + ANGLEFIX * atan2f(xDiff, yDiff * 2);
    9fd2:	|  |  \-> move.l 52(sp),d0
    9fd6:	|  |      move.l d0,-(sp)
    9fd8:	|  |      move.l d0,-(sp)
    9fda:	|  |      jsr 17442 <__addsf3>
    9fe0:	|  |      addq.l #8,sp
    9fe2:	|  |      move.l d0,-(sp)
    9fe4:	|  |      move.l 52(sp),-(sp)
    9fe8:	|  |      jsr 17a0e <atan2f>
    9fee:	|  |      addq.l #8,sp
    9ff0:	|  |      move.l d0,-(sp)
    9ff2:	|  |      jsr 175a8 <__extendsfdf2>
    9ff8:	|  |      addq.l #4,sp
    9ffa:	|  |      move.l #-1540411785,-(sp)
    a000:	|  |      move.l #1078765033,-(sp)
    a006:	|  |      move.l d1,-(sp)
    a008:	|  |      move.l d0,-(sp)
    a00a:	|  |      jsr 176d6 <__muldf3>
    a010:	|  |      lea 16(sp),sp
    a014:	|  |      clr.l -(sp)
    a016:	|  |      move.l #1080459264,-(sp)
    a01c:	|  |      move.l d1,-(sp)
    a01e:	|  |      move.l d0,-(sp)
    a020:	|  |      jsr 17478 <__adddf3>
    a026:	|  |      lea 16(sp),sp
    a02a:	|  |      move.l d1,-(sp)
    a02c:	|  |      move.l d0,-(sp)
    a02e:	|  |      jsr 175e8 <__fixdfsi>
    a034:	|  |      addq.l #8,sp
    a036:	|  |      movea.l 152(sp),a0
    a03a:	|  |      move.l d0,96(a0)
        moveMe -> spinning = TRUE;
    a03e:	|  |      movea.l 152(sp),a0
    a042:	|  |      move.w #1,66(a0)
    }

    setFrames (moveMe, ANI_WALK);
    a048:	|  \----> pea 1 <_start+0x1>
    a04c:	|         move.l 156(sp),-(sp)
    a050:	|         jsr 8192 <setFrames>
    a056:	|         addq.l #8,sp
    return TRUE;
    a058:	|         moveq #1,d0
}
    a05a:	\-------> movem.l (sp)+,d2-d7
    a05e:	          lea 124(sp),sp
    a062:	          rts

0000a064 <drawPeople>:

void drawPeople () {
    a064:	                   lea -24(sp),sp
    a068:	                   move.l d2,-(sp)

	shufflePeople ();
    a06a:	                   jsr bb00 <shufflePeople>

	struct onScreenPerson * thisPerson = allPeople;
    a070:	                   move.l 1ca2e <allPeople>,24(sp)
	struct personaAnimation * myAnim = NULL;
    a078:	                   clr.l 20(sp)
	overRegion = NULL;
    a07c:	                   clr.l 1cade <overRegion>

	while (thisPerson) {
    a082:	   /-------------- bra.w a634 <drawPeople+0x5d0>
		if (thisPerson -> show) {
    a086:	/--|-------------> movea.l 24(sp),a0
    a08a:	|  |               move.w 104(a0),d0
    a08e:	|  |  /----------- beq.w a3e8 <drawPeople+0x384>
			myAnim = thisPerson -> myAnim;
    a092:	|  |  |            movea.l 24(sp),a0
    a096:	|  |  |            move.l 72(a0),20(sp)
			if (myAnim != thisPerson -> lastUsedAnim) {
    a09c:	|  |  |            movea.l 24(sp),a0
    a0a0:	|  |  |            move.l 76(a0),d0
    a0a4:	|  |  |            cmp.l 20(sp),d0
    a0a8:	|  |  |  /-------- beq.w a276 <drawPeople+0x212>
				thisPerson -> samePosCount = 0;
    a0ac:	|  |  |  |         movea.l 24(sp),a0
    a0b0:	|  |  |  |         clr.l 16(a0)
				thisPerson -> lastUsedAnim = myAnim;
    a0b4:	|  |  |  |         movea.l 24(sp),a0
    a0b8:	|  |  |  |         move.l 20(sp),76(a0)
				thisPerson -> frameNum = 0;
    a0be:	|  |  |  |         movea.l 24(sp),a0
    a0c2:	|  |  |  |         clr.l 84(a0)
				thisPerson -> frameTick = myAnim -> frames[0].howMany;
    a0c6:	|  |  |  |         movea.l 20(sp),a0
    a0ca:	|  |  |  |         movea.l 4(a0),a0
    a0ce:	|  |  |  |         move.l 4(a0),d0
    a0d2:	|  |  |  |         movea.l 24(sp),a0
    a0d6:	|  |  |  |         move.l d0,88(a0)
				if (myAnim -> frames[thisPerson -> frameNum].noise > 0) {
    a0da:	|  |  |  |         movea.l 20(sp),a0
    a0de:	|  |  |  |         movea.l 4(a0),a1
    a0e2:	|  |  |  |         movea.l 24(sp),a0
    a0e6:	|  |  |  |         move.l 84(a0),d0
    a0ea:	|  |  |  |         move.l d0,d1
    a0ec:	|  |  |  |         move.l d1,d0
    a0ee:	|  |  |  |         add.l d0,d0
    a0f0:	|  |  |  |         add.l d1,d0
    a0f2:	|  |  |  |         add.l d0,d0
    a0f4:	|  |  |  |         add.l d0,d0
    a0f6:	|  |  |  |         lea (0,a1,d0.l),a0
    a0fa:	|  |  |  |         move.l 8(a0),d0
    a0fe:	|  |  |  |     /-- ble.w a1a0 <drawPeople+0x13c>
					startSound(myAnim -> frames[thisPerson -> frameNum].noise, FALSE);
    a102:	|  |  |  |     |   movea.l 20(sp),a0
    a106:	|  |  |  |     |   movea.l 4(a0),a1
    a10a:	|  |  |  |     |   movea.l 24(sp),a0
    a10e:	|  |  |  |     |   move.l 84(a0),d0
    a112:	|  |  |  |     |   move.l d0,d1
    a114:	|  |  |  |     |   move.l d1,d0
    a116:	|  |  |  |     |   add.l d0,d0
    a118:	|  |  |  |     |   add.l d1,d0
    a11a:	|  |  |  |     |   add.l d0,d0
    a11c:	|  |  |  |     |   add.l d0,d0
    a11e:	|  |  |  |     |   lea (0,a1,d0.l),a0
    a122:	|  |  |  |     |   move.l 8(a0),d0
    a126:	|  |  |  |     |   clr.l -(sp)
    a128:	|  |  |  |     |   move.l d0,-(sp)
    a12a:	|  |  |  |     |   jsr d208 <startSound>
    a130:	|  |  |  |     |   addq.l #8,sp
					thisPerson -> frameNum ++;
    a132:	|  |  |  |     |   movea.l 24(sp),a0
    a136:	|  |  |  |     |   move.l 84(a0),d0
    a13a:	|  |  |  |     |   addq.l #1,d0
    a13c:	|  |  |  |     |   movea.l 24(sp),a0
    a140:	|  |  |  |     |   move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a144:	|  |  |  |     |   movea.l 24(sp),a0
    a148:	|  |  |  |     |   move.l 84(a0),d0
    a14c:	|  |  |  |     |   movea.l 24(sp),a0
    a150:	|  |  |  |     |   movea.l 72(a0),a0
    a154:	|  |  |  |     |   move.l 8(a0),d1
    a158:	|  |  |  |     |   move.l d1,-(sp)
    a15a:	|  |  |  |     |   move.l d0,-(sp)
    a15c:	|  |  |  |     |   jsr 17cb4 <__modsi3>
    a162:	|  |  |  |     |   addq.l #8,sp
    a164:	|  |  |  |     |   movea.l 24(sp),a0
    a168:	|  |  |  |     |   move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a16c:	|  |  |  |     |   movea.l 24(sp),a0
    a170:	|  |  |  |     |   movea.l 72(a0),a0
    a174:	|  |  |  |     |   movea.l 4(a0),a1
    a178:	|  |  |  |     |   movea.l 24(sp),a0
    a17c:	|  |  |  |     |   move.l 84(a0),d0
    a180:	|  |  |  |     |   move.l d0,d1
    a182:	|  |  |  |     |   move.l d1,d0
    a184:	|  |  |  |     |   add.l d0,d0
    a186:	|  |  |  |     |   add.l d1,d0
    a188:	|  |  |  |     |   add.l d0,d0
    a18a:	|  |  |  |     |   add.l d0,d0
    a18c:	|  |  |  |     |   lea (0,a1,d0.l),a0
    a190:	|  |  |  |     |   move.l 4(a0),d0
    a194:	|  |  |  |     |   movea.l 24(sp),a0
    a198:	|  |  |  |     |   move.l d0,88(a0)
    a19c:	|  |  |  |  /--|-- bra.w a2de <drawPeople+0x27a>
				} else if (myAnim -> frames[thisPerson -> frameNum].noise) {
    a1a0:	|  |  |  |  |  \-> movea.l 20(sp),a0
    a1a4:	|  |  |  |  |      movea.l 4(a0),a1
    a1a8:	|  |  |  |  |      movea.l 24(sp),a0
    a1ac:	|  |  |  |  |      move.l 84(a0),d0
    a1b0:	|  |  |  |  |      move.l d0,d1
    a1b2:	|  |  |  |  |      move.l d1,d0
    a1b4:	|  |  |  |  |      add.l d0,d0
    a1b6:	|  |  |  |  |      add.l d1,d0
    a1b8:	|  |  |  |  |      add.l d0,d0
    a1ba:	|  |  |  |  |      add.l d0,d0
    a1bc:	|  |  |  |  |      lea (0,a1,d0.l),a0
    a1c0:	|  |  |  |  |      move.l 8(a0),d0
    a1c4:	|  |  |  |  +----- beq.w a2de <drawPeople+0x27a>
					startNewFunctionNum (- myAnim -> frames[thisPerson -> frameNum].noise, 0, NULL, noStack, TRUE);
    a1c8:	|  |  |  |  |      movea.l 1c99a <noStack>,a1
    a1ce:	|  |  |  |  |      movea.l 20(sp),a0
    a1d2:	|  |  |  |  |      move.l 4(a0),d2
    a1d6:	|  |  |  |  |      movea.l 24(sp),a0
    a1da:	|  |  |  |  |      move.l 84(a0),d0
    a1de:	|  |  |  |  |      move.l d0,d1
    a1e0:	|  |  |  |  |      move.l d1,d0
    a1e2:	|  |  |  |  |      add.l d0,d0
    a1e4:	|  |  |  |  |      add.l d1,d0
    a1e6:	|  |  |  |  |      add.l d0,d0
    a1e8:	|  |  |  |  |      add.l d0,d0
    a1ea:	|  |  |  |  |      movea.l d2,a0
    a1ec:	|  |  |  |  |      adda.l d0,a0
    a1ee:	|  |  |  |  |      move.l 8(a0),d0
    a1f2:	|  |  |  |  |      neg.l d0
    a1f4:	|  |  |  |  |      pea 1 <_start+0x1>
    a1f8:	|  |  |  |  |      move.l a1,-(sp)
    a1fa:	|  |  |  |  |      clr.l -(sp)
    a1fc:	|  |  |  |  |      clr.l -(sp)
    a1fe:	|  |  |  |  |      move.l d0,-(sp)
    a200:	|  |  |  |  |      jsr 6af6 <startNewFunctionNum>
    a206:	|  |  |  |  |      lea 20(sp),sp
					thisPerson -> frameNum ++;
    a20a:	|  |  |  |  |      movea.l 24(sp),a0
    a20e:	|  |  |  |  |      move.l 84(a0),d0
    a212:	|  |  |  |  |      addq.l #1,d0
    a214:	|  |  |  |  |      movea.l 24(sp),a0
    a218:	|  |  |  |  |      move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a21c:	|  |  |  |  |      movea.l 24(sp),a0
    a220:	|  |  |  |  |      move.l 84(a0),d0
    a224:	|  |  |  |  |      movea.l 24(sp),a0
    a228:	|  |  |  |  |      movea.l 72(a0),a0
    a22c:	|  |  |  |  |      move.l 8(a0),d1
    a230:	|  |  |  |  |      move.l d1,-(sp)
    a232:	|  |  |  |  |      move.l d0,-(sp)
    a234:	|  |  |  |  |      jsr 17cb4 <__modsi3>
    a23a:	|  |  |  |  |      addq.l #8,sp
    a23c:	|  |  |  |  |      movea.l 24(sp),a0
    a240:	|  |  |  |  |      move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a244:	|  |  |  |  |      movea.l 24(sp),a0
    a248:	|  |  |  |  |      movea.l 72(a0),a0
    a24c:	|  |  |  |  |      movea.l 4(a0),a1
    a250:	|  |  |  |  |      movea.l 24(sp),a0
    a254:	|  |  |  |  |      move.l 84(a0),d0
    a258:	|  |  |  |  |      move.l d0,d1
    a25a:	|  |  |  |  |      move.l d1,d0
    a25c:	|  |  |  |  |      add.l d0,d0
    a25e:	|  |  |  |  |      add.l d1,d0
    a260:	|  |  |  |  |      add.l d0,d0
    a262:	|  |  |  |  |      add.l d0,d0
    a264:	|  |  |  |  |      lea (0,a1,d0.l),a0
    a268:	|  |  |  |  |      move.l 4(a0),d0
    a26c:	|  |  |  |  |      movea.l 24(sp),a0
    a270:	|  |  |  |  |      move.l d0,88(a0)
    a274:	|  |  |  |  +----- bra.s a2de <drawPeople+0x27a>
				}
			} else {
				if(thisPerson->x == thisPerson->oldx && thisPerson->y == thisPerson->oldy && myAnim->numFrames == 1)
    a276:	|  |  |  \--|----> movea.l 24(sp),a0
    a27a:	|  |  |     |      move.l (a0),d0
    a27c:	|  |  |     |      movea.l 24(sp),a0
    a280:	|  |  |     |      move.l 8(a0),d1
    a284:	|  |  |     |      move.l d1,-(sp)
    a286:	|  |  |     |      move.l d0,-(sp)
    a288:	|  |  |     |      jsr 17572 <__eqsf2>
    a28e:	|  |  |     |      addq.l #8,sp
    a290:	|  |  |     |      tst.l d0
    a292:	|  |  |     |  /-- bne.s a2d6 <drawPeople+0x272>
    a294:	|  |  |     |  |   movea.l 24(sp),a0
    a298:	|  |  |     |  |   move.l 4(a0),d0
    a29c:	|  |  |     |  |   movea.l 24(sp),a0
    a2a0:	|  |  |     |  |   move.l 12(a0),d1
    a2a4:	|  |  |     |  |   move.l d1,-(sp)
    a2a6:	|  |  |     |  |   move.l d0,-(sp)
    a2a8:	|  |  |     |  |   jsr 17572 <__eqsf2>
    a2ae:	|  |  |     |  |   addq.l #8,sp
    a2b0:	|  |  |     |  |   tst.l d0
    a2b2:	|  |  |     |  +-- bne.s a2d6 <drawPeople+0x272>
    a2b4:	|  |  |     |  |   movea.l 20(sp),a0
    a2b8:	|  |  |     |  |   move.l 8(a0),d0
    a2bc:	|  |  |     |  |   moveq #1,d1
    a2be:	|  |  |     |  |   cmp.l d0,d1
    a2c0:	|  |  |     |  +-- bne.s a2d6 <drawPeople+0x272>
				{
					thisPerson->samePosCount++;
    a2c2:	|  |  |     |  |   movea.l 24(sp),a0
    a2c6:	|  |  |     |  |   move.l 16(a0),d0
    a2ca:	|  |  |     |  |   addq.l #1,d0
    a2cc:	|  |  |     |  |   movea.l 24(sp),a0
    a2d0:	|  |  |     |  |   move.l d0,16(a0)
    a2d4:	|  |  |     +--|-- bra.s a2de <drawPeople+0x27a>
				} else
				{
					thisPerson->samePosCount = 0;
    a2d6:	|  |  |     |  \-> movea.l 24(sp),a0
    a2da:	|  |  |     |      clr.l 16(a0)
				}
			}

			thisPerson->oldx = thisPerson->x;
    a2de:	|  |  |     \----> movea.l 24(sp),a0
    a2e2:	|  |  |            move.l (a0),d0
    a2e4:	|  |  |            movea.l 24(sp),a0
    a2e8:	|  |  |            move.l d0,8(a0)
			thisPerson->oldy = thisPerson->y;
    a2ec:	|  |  |            movea.l 24(sp),a0
    a2f0:	|  |  |            move.l 4(a0),d0
    a2f4:	|  |  |            movea.l 24(sp),a0
    a2f8:	|  |  |            move.l d0,12(a0)
			int fNumSign = myAnim -> frames[thisPerson -> frameNum].frameNum;
    a2fc:	|  |  |            movea.l 20(sp),a0
    a300:	|  |  |            movea.l 4(a0),a1
    a304:	|  |  |            movea.l 24(sp),a0
    a308:	|  |  |            move.l 84(a0),d0
    a30c:	|  |  |            move.l d0,d1
    a30e:	|  |  |            move.l d1,d0
    a310:	|  |  |            add.l d0,d0
    a312:	|  |  |            add.l d1,d0
    a314:	|  |  |            add.l d0,d0
    a316:	|  |  |            add.l d0,d0
    a318:	|  |  |            lea (0,a1,d0.l),a0
    a31c:	|  |  |            move.l (a0),8(sp)
			int m = fNumSign < 0;
    a320:	|  |  |            move.l 8(sp),d0
    a324:	|  |  |            add.l d0,d0
    a326:	|  |  |            subx.l d0,d0
    a328:	|  |  |            neg.l d0
    a32a:	|  |  |            move.b d0,d0
    a32c:	|  |  |            move.b d0,d0
    a32e:	|  |  |            andi.l #255,d0
    a334:	|  |  |            move.l d0,16(sp)
			int fNum = TF_abs(fNumSign);
    a338:	|  |  |            move.l 8(sp),-(sp)
    a33c:	|  |  |            jsr 9238 <TF_abs>
    a342:	|  |  |            addq.l #4,sp
    a344:	|  |  |            move.l d0,12(sp)
			if (fNum >= myAnim -> theSprites -> bank.total) {
    a348:	|  |  |            movea.l 20(sp),a0
    a34c:	|  |  |            movea.l (a0),a0
    a34e:	|  |  |            move.l 8(a0),d0
    a352:	|  |  |            cmp.l 12(sp),d0
    a356:	|  |  |        /-- bgt.s a366 <drawPeople+0x302>
				fNum = 0;
    a358:	|  |  |        |   clr.l 12(sp)
				m = 2 - m;
    a35c:	|  |  |        |   moveq #2,d0
    a35e:	|  |  |        |   sub.l 16(sp),d0
    a362:	|  |  |        |   move.l d0,16(sp)
			}
			if (m != 2) {
    a366:	|  |  |        \-> moveq #2,d1
    a368:	|  |  |            cmp.l 16(sp),d1
    a36c:	|  |  +----------- beq.s a3e8 <drawPeople+0x384>
				BOOL r = FALSE;
    a36e:	|  |  |            clr.w 6(sp)

				r = scaleSprite ( &myAnim->theSprites->bank.sprites[fNum], thisPerson, m);
    a372:	|  |  |            move.l 16(sp),d0
    a376:	|  |  |            movea.w d0,a0
    a378:	|  |  |            movea.l 20(sp),a1
    a37c:	|  |  |            movea.l (a1),a1
    a37e:	|  |  |            movea.l 16(a1),a1
    a382:	|  |  |            move.l 12(sp),d1
    a386:	|  |  |            move.l d1,d0
    a388:	|  |  |            lsl.l #3,d0
    a38a:	|  |  |            sub.l d1,d0
    a38c:	|  |  |            add.l d0,d0
    a38e:	|  |  |            add.l d0,d0
    a390:	|  |  |            add.l a1,d0
    a392:	|  |  |            move.l a0,-(sp)
    a394:	|  |  |            move.l 28(sp),-(sp)
    a398:	|  |  |            move.l d0,-(sp)
    a39a:	|  |  |            jsr 8fce <scaleSprite>
    a3a0:	|  |  |            lea 12(sp),sp
    a3a4:	|  |  |            move.w d0,6(sp)
				if (r) {
    a3a8:	|  |  +----------- beq.s a3e8 <drawPeople+0x384>
					if (thisPerson -> thisType -> screenName[0]) {
    a3aa:	|  |  |            movea.l 24(sp),a0
    a3ae:	|  |  |            movea.l 114(a0),a0
    a3b2:	|  |  |            movea.l (a0),a0
    a3b4:	|  |  |            move.b (a0),d0
    a3b6:	|  |  +----------- beq.s a3e8 <drawPeople+0x384>
						if (personRegion.thisType != thisPerson -> thisType) lastRegion = NULL;
    a3b8:	|  |  |            move.l 1ca4e <personRegion+0x1c>,d1
    a3be:	|  |  |            movea.l 24(sp),a0
    a3c2:	|  |  |            move.l 114(a0),d0
    a3c6:	|  |  |            cmp.l d1,d0
    a3c8:	|  |  |        /-- beq.s a3d0 <drawPeople+0x36c>
    a3ca:	|  |  |        |   clr.l 1c992 <lastRegion>
						personRegion.thisType = thisPerson -> thisType;
    a3d0:	|  |  |        \-> movea.l 24(sp),a0
    a3d4:	|  |  |            move.l 114(a0),d0
    a3d8:	|  |  |            move.l d0,1ca4e <personRegion+0x1c>
						overRegion = & personRegion;
    a3de:	|  |  |            move.l #117298,1cade <overRegion>
					}
				}
			}
		}
		if (! -- thisPerson -> frameTick) {
    a3e8:	|  |  \----------> movea.l 24(sp),a0
    a3ec:	|  |               move.l 88(a0),d0
    a3f0:	|  |               subq.l #1,d0
    a3f2:	|  |               movea.l 24(sp),a0
    a3f6:	|  |               move.l d0,88(a0)
    a3fa:	|  |               movea.l 24(sp),a0
    a3fe:	|  |               move.l 88(a0),d0
    a402:	|  |        /----- bne.w a62a <drawPeople+0x5c6>
			thisPerson -> frameNum ++;
    a406:	|  |        |      movea.l 24(sp),a0
    a40a:	|  |        |      move.l 84(a0),d0
    a40e:	|  |        |      addq.l #1,d0
    a410:	|  |        |      movea.l 24(sp),a0
    a414:	|  |        |      move.l d0,84(a0)
			thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a418:	|  |        |      movea.l 24(sp),a0
    a41c:	|  |        |      move.l 84(a0),d0
    a420:	|  |        |      movea.l 24(sp),a0
    a424:	|  |        |      movea.l 72(a0),a0
    a428:	|  |        |      move.l 8(a0),d1
    a42c:	|  |        |      move.l d1,-(sp)
    a42e:	|  |        |      move.l d0,-(sp)
    a430:	|  |        |      jsr 17cb4 <__modsi3>
    a436:	|  |        |      addq.l #8,sp
    a438:	|  |        |      movea.l 24(sp),a0
    a43c:	|  |        |      move.l d0,84(a0)
			thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a440:	|  |        |      movea.l 24(sp),a0
    a444:	|  |        |      movea.l 72(a0),a0
    a448:	|  |        |      movea.l 4(a0),a1
    a44c:	|  |        |      movea.l 24(sp),a0
    a450:	|  |        |      move.l 84(a0),d0
    a454:	|  |        |      move.l d0,d1
    a456:	|  |        |      move.l d1,d0
    a458:	|  |        |      add.l d0,d0
    a45a:	|  |        |      add.l d1,d0
    a45c:	|  |        |      add.l d0,d0
    a45e:	|  |        |      add.l d0,d0
    a460:	|  |        |      lea (0,a1,d0.l),a0
    a464:	|  |        |      move.l 4(a0),d0
    a468:	|  |        |      movea.l 24(sp),a0
    a46c:	|  |        |      move.l d0,88(a0)
			if (thisPerson -> show && myAnim && myAnim -> frames) {
    a470:	|  |        |      movea.l 24(sp),a0
    a474:	|  |        |      move.w 104(a0),d0
    a478:	|  |        +----- beq.w a62a <drawPeople+0x5c6>
    a47c:	|  |        |      tst.l 20(sp)
    a480:	|  |        +----- beq.w a62a <drawPeople+0x5c6>
    a484:	|  |        |      movea.l 20(sp),a0
    a488:	|  |        |      move.l 4(a0),d0
    a48c:	|  |        +----- beq.w a62a <drawPeople+0x5c6>
				if (myAnim -> frames[thisPerson -> frameNum].noise > 0) {
    a490:	|  |        |      movea.l 20(sp),a0
    a494:	|  |        |      movea.l 4(a0),a1
    a498:	|  |        |      movea.l 24(sp),a0
    a49c:	|  |        |      move.l 84(a0),d0
    a4a0:	|  |        |      move.l d0,d1
    a4a2:	|  |        |      move.l d1,d0
    a4a4:	|  |        |      add.l d0,d0
    a4a6:	|  |        |      add.l d1,d0
    a4a8:	|  |        |      add.l d0,d0
    a4aa:	|  |        |      add.l d0,d0
    a4ac:	|  |        |      lea (0,a1,d0.l),a0
    a4b0:	|  |        |      move.l 8(a0),d0
    a4b4:	|  |        |  /-- ble.w a556 <drawPeople+0x4f2>
					startSound(myAnim -> frames[thisPerson -> frameNum].noise, FALSE);
    a4b8:	|  |        |  |   movea.l 20(sp),a0
    a4bc:	|  |        |  |   movea.l 4(a0),a1
    a4c0:	|  |        |  |   movea.l 24(sp),a0
    a4c4:	|  |        |  |   move.l 84(a0),d0
    a4c8:	|  |        |  |   move.l d0,d1
    a4ca:	|  |        |  |   move.l d1,d0
    a4cc:	|  |        |  |   add.l d0,d0
    a4ce:	|  |        |  |   add.l d1,d0
    a4d0:	|  |        |  |   add.l d0,d0
    a4d2:	|  |        |  |   add.l d0,d0
    a4d4:	|  |        |  |   lea (0,a1,d0.l),a0
    a4d8:	|  |        |  |   move.l 8(a0),d0
    a4dc:	|  |        |  |   clr.l -(sp)
    a4de:	|  |        |  |   move.l d0,-(sp)
    a4e0:	|  |        |  |   jsr d208 <startSound>
    a4e6:	|  |        |  |   addq.l #8,sp
					thisPerson -> frameNum ++;
    a4e8:	|  |        |  |   movea.l 24(sp),a0
    a4ec:	|  |        |  |   move.l 84(a0),d0
    a4f0:	|  |        |  |   addq.l #1,d0
    a4f2:	|  |        |  |   movea.l 24(sp),a0
    a4f6:	|  |        |  |   move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a4fa:	|  |        |  |   movea.l 24(sp),a0
    a4fe:	|  |        |  |   move.l 84(a0),d0
    a502:	|  |        |  |   movea.l 24(sp),a0
    a506:	|  |        |  |   movea.l 72(a0),a0
    a50a:	|  |        |  |   move.l 8(a0),d1
    a50e:	|  |        |  |   move.l d1,-(sp)
    a510:	|  |        |  |   move.l d0,-(sp)
    a512:	|  |        |  |   jsr 17cb4 <__modsi3>
    a518:	|  |        |  |   addq.l #8,sp
    a51a:	|  |        |  |   movea.l 24(sp),a0
    a51e:	|  |        |  |   move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a522:	|  |        |  |   movea.l 24(sp),a0
    a526:	|  |        |  |   movea.l 72(a0),a0
    a52a:	|  |        |  |   movea.l 4(a0),a1
    a52e:	|  |        |  |   movea.l 24(sp),a0
    a532:	|  |        |  |   move.l 84(a0),d0
    a536:	|  |        |  |   move.l d0,d1
    a538:	|  |        |  |   move.l d1,d0
    a53a:	|  |        |  |   add.l d0,d0
    a53c:	|  |        |  |   add.l d1,d0
    a53e:	|  |        |  |   add.l d0,d0
    a540:	|  |        |  |   add.l d0,d0
    a542:	|  |        |  |   lea (0,a1,d0.l),a0
    a546:	|  |        |  |   move.l 4(a0),d0
    a54a:	|  |        |  |   movea.l 24(sp),a0
    a54e:	|  |        |  |   move.l d0,88(a0)
    a552:	|  |        +--|-- bra.w a62a <drawPeople+0x5c6>
				} else if (myAnim -> frames[thisPerson -> frameNum].noise) {
    a556:	|  |        |  \-> movea.l 20(sp),a0
    a55a:	|  |        |      movea.l 4(a0),a1
    a55e:	|  |        |      movea.l 24(sp),a0
    a562:	|  |        |      move.l 84(a0),d0
    a566:	|  |        |      move.l d0,d1
    a568:	|  |        |      move.l d1,d0
    a56a:	|  |        |      add.l d0,d0
    a56c:	|  |        |      add.l d1,d0
    a56e:	|  |        |      add.l d0,d0
    a570:	|  |        |      add.l d0,d0
    a572:	|  |        |      lea (0,a1,d0.l),a0
    a576:	|  |        |      move.l 8(a0),d0
    a57a:	|  |        +----- beq.w a62a <drawPeople+0x5c6>
					startNewFunctionNum (- myAnim -> frames[thisPerson -> frameNum].noise, 0, NULL, noStack, TRUE);
    a57e:	|  |        |      movea.l 1c99a <noStack>,a1
    a584:	|  |        |      movea.l 20(sp),a0
    a588:	|  |        |      move.l 4(a0),d2
    a58c:	|  |        |      movea.l 24(sp),a0
    a590:	|  |        |      move.l 84(a0),d0
    a594:	|  |        |      move.l d0,d1
    a596:	|  |        |      move.l d1,d0
    a598:	|  |        |      add.l d0,d0
    a59a:	|  |        |      add.l d1,d0
    a59c:	|  |        |      add.l d0,d0
    a59e:	|  |        |      add.l d0,d0
    a5a0:	|  |        |      movea.l d2,a0
    a5a2:	|  |        |      adda.l d0,a0
    a5a4:	|  |        |      move.l 8(a0),d0
    a5a8:	|  |        |      neg.l d0
    a5aa:	|  |        |      pea 1 <_start+0x1>
    a5ae:	|  |        |      move.l a1,-(sp)
    a5b0:	|  |        |      clr.l -(sp)
    a5b2:	|  |        |      clr.l -(sp)
    a5b4:	|  |        |      move.l d0,-(sp)
    a5b6:	|  |        |      jsr 6af6 <startNewFunctionNum>
    a5bc:	|  |        |      lea 20(sp),sp
					thisPerson -> frameNum ++;
    a5c0:	|  |        |      movea.l 24(sp),a0
    a5c4:	|  |        |      move.l 84(a0),d0
    a5c8:	|  |        |      addq.l #1,d0
    a5ca:	|  |        |      movea.l 24(sp),a0
    a5ce:	|  |        |      move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a5d2:	|  |        |      movea.l 24(sp),a0
    a5d6:	|  |        |      move.l 84(a0),d0
    a5da:	|  |        |      movea.l 24(sp),a0
    a5de:	|  |        |      movea.l 72(a0),a0
    a5e2:	|  |        |      move.l 8(a0),d1
    a5e6:	|  |        |      move.l d1,-(sp)
    a5e8:	|  |        |      move.l d0,-(sp)
    a5ea:	|  |        |      jsr 17cb4 <__modsi3>
    a5f0:	|  |        |      addq.l #8,sp
    a5f2:	|  |        |      movea.l 24(sp),a0
    a5f6:	|  |        |      move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a5fa:	|  |        |      movea.l 24(sp),a0
    a5fe:	|  |        |      movea.l 72(a0),a0
    a602:	|  |        |      movea.l 4(a0),a1
    a606:	|  |        |      movea.l 24(sp),a0
    a60a:	|  |        |      move.l 84(a0),d0
    a60e:	|  |        |      move.l d0,d1
    a610:	|  |        |      move.l d1,d0
    a612:	|  |        |      add.l d0,d0
    a614:	|  |        |      add.l d1,d0
    a616:	|  |        |      add.l d0,d0
    a618:	|  |        |      add.l d0,d0
    a61a:	|  |        |      lea (0,a1,d0.l),a0
    a61e:	|  |        |      move.l 4(a0),d0
    a622:	|  |        |      movea.l 24(sp),a0
    a626:	|  |        |      move.l d0,88(a0)
				}
			}
		}
		thisPerson = thisPerson -> next;
    a62a:	|  |        \----> movea.l 24(sp),a0
    a62e:	|  |               move.l 36(a0),24(sp)
	while (thisPerson) {
    a634:	|  \-------------> tst.l 24(sp)
    a638:	\----------------- bne.w a086 <drawPeople+0x22>
	}
}
    a63c:	                   nop
    a63e:	                   nop
    a640:	                   move.l (sp)+,d2
    a642:	                   lea 24(sp),sp
    a646:	                   rts

0000a648 <findPerson>:


struct onScreenPerson * findPerson (int v) {
    a648:	          subq.l #4,sp
	struct onScreenPerson * thisPerson = allPeople;
    a64a:	          move.l 1ca2e <allPeople>,(sp)
	while (thisPerson) {
    a650:	      /-- bra.s a668 <findPerson+0x20>
		if (v == thisPerson -> thisType -> objectNum) break;
    a652:	/-----|-> movea.l (sp),a0
    a654:	|     |   movea.l 114(a0),a0
    a658:	|     |   move.l 4(a0),d0
    a65c:	|     |   cmp.l 8(sp),d0
    a660:	|  /--|-- beq.s a66e <findPerson+0x26>
		thisPerson = thisPerson -> next;
    a662:	|  |  |   movea.l (sp),a0
    a664:	|  |  |   move.l 36(a0),(sp)
	while (thisPerson) {
    a668:	|  |  \-> tst.l (sp)
    a66a:	\--|----- bne.s a652 <findPerson+0xa>
    a66c:	   |  /-- bra.s a670 <findPerson+0x28>
		if (v == thisPerson -> thisType -> objectNum) break;
    a66e:	   \--|-> nop
	}
	return thisPerson;
    a670:	      \-> move.l (sp),d0
}
    a672:	          addq.l #4,sp
    a674:	          rts

0000a676 <floatCharacter>:

BOOL floatCharacter (int f, int objNum) {
    a676:	       subq.l #4,sp
	struct onScreenPerson * moveMe = findPerson (objNum);
    a678:	       move.l 12(sp),-(sp)
    a67c:	       jsr a648 <findPerson>
    a682:	       addq.l #4,sp
    a684:	       move.l d0,(sp)
	if (! moveMe) return FALSE;
    a686:	   /-- bne.s a68c <floatCharacter+0x16>
    a688:	   |   clr.w d0
    a68a:	/--|-- bra.s a696 <floatCharacter+0x20>
	moveMe -> floaty = f;
    a68c:	|  \-> movea.l (sp),a0
    a68e:	|      move.l 8(sp),24(a0)
	return TRUE;
    a694:	|      moveq #1,d0
}
    a696:	\----> addq.l #4,sp
    a698:	       rts

0000a69a <forceWalkingPerson>:

BOOL forceWalkingPerson (int x, int y, int objNum, struct loadedFunction * func, int di) {
    a69a:	          subq.l #4,sp
    if (x == 0 && y == 0) return FALSE;
    a69c:	          tst.l 8(sp)
    a6a0:	      /-- bne.s a6ae <forceWalkingPerson+0x14>
    a6a2:	      |   tst.l 12(sp)
    a6a6:	      +-- bne.s a6ae <forceWalkingPerson+0x14>
    a6a8:	      |   clr.w d0
    a6aa:	/-----|-- bra.w a740 <forceWalkingPerson+0xa6>
    struct onScreenPerson * moveMe = findPerson(objNum);
    a6ae:	|     \-> move.l 16(sp),-(sp)
    a6b2:	|         jsr a648 <findPerson>
    a6b8:	|         addq.l #4,sp
    a6ba:	|         move.l d0,(sp)
    if (!moveMe) return FALSE;
    a6bc:	|     /-- bne.s a6c2 <forceWalkingPerson+0x28>
    a6be:	|     |   clr.w d0
    a6c0:	+-----|-- bra.s a740 <forceWalkingPerson+0xa6>

    if (moveMe->continueAfterWalking) abortFunction(moveMe->continueAfterWalking);
    a6c2:	|     \-> movea.l (sp),a0
    a6c4:	|         move.l 68(a0),d0
    a6c8:	|     /-- beq.s a6da <forceWalkingPerson+0x40>
    a6ca:	|     |   movea.l (sp),a0
    a6cc:	|     |   move.l 68(a0),d0
    a6d0:	|     |   move.l d0,-(sp)
    a6d2:	|     |   jsr 473a <abortFunction>
    a6d8:	|     |   addq.l #4,sp
    moveMe->walking = TRUE;
    a6da:	|     \-> movea.l (sp),a0
    a6dc:	|         move.w #1,64(a0)
    moveMe->continueAfterWalking = NULL;
    a6e2:	|         movea.l (sp),a0
    a6e4:	|         clr.l 68(a0)
    moveMe->directionWhenDoneWalking = di;
    a6e8:	|         movea.l (sp),a0
    a6ea:	|         move.l 24(sp),110(a0)

    moveMe->walkToX = x;
    a6f0:	|         movea.l (sp),a0
    a6f2:	|         move.l 8(sp),40(a0)
    moveMe->walkToY = y;
    a6f8:	|         movea.l (sp),a0
    a6fa:	|         move.l 12(sp),44(a0)

    // Let's pretend the start and end points are both in the same
    // polygon (which one isn't important)
    moveMe->inPoly = 0;
    a700:	|         movea.l (sp),a0
    a702:	|         clr.l 56(a0)
    moveMe->walkToPoly = 0;
    a706:	|         movea.l (sp),a0
    a708:	|         clr.l 60(a0)

    doBorderStuff(moveMe);
    a70c:	|         move.l (sp),-(sp)
    a70e:	|         jsr 99aa <doBorderStuff>
    a714:	|         addq.l #4,sp
    if (walkMe(moveMe, TRUE) || moveMe->spinning) {
    a716:	|         pea 1 <_start+0x1>
    a71a:	|         move.l 4(sp),-(sp)
    a71e:	|         jsr bf8e <walkMe>
    a724:	|         addq.l #8,sp
    a726:	|         tst.w d0
    a728:	|     /-- bne.s a732 <forceWalkingPerson+0x98>
    a72a:	|     |   movea.l (sp),a0
    a72c:	|     |   move.w 66(a0),d0
    a730:	|  /--|-- beq.s a73e <forceWalkingPerson+0xa4>
        moveMe->continueAfterWalking = func;
    a732:	|  |  \-> movea.l (sp),a0
    a734:	|  |      move.l 20(sp),68(a0)
        return TRUE;
    a73a:	|  |      moveq #1,d0
    a73c:	+--|----- bra.s a740 <forceWalkingPerson+0xa6>
    } else {
        return FALSE;
    a73e:	|  \----> clr.w d0
    }
}
    a740:	\-------> addq.l #4,sp
    a742:	          rts

0000a744 <handleClosestPoint>:

BOOL handleClosestPoint (int * setX, int * setY, int * setPoly) {
    a744:	                lea -56(sp),sp
    a748:	                move.l d2,-(sp)
	int gotX = 320, gotY = 200, gotPoly = -1, i, j, xTest1, yTest1,
    a74a:	                move.l #320,56(sp)
    a752:	                move.l #200,52(sp)
    a75a:	                moveq #-1,d0
    a75c:	                move.l d0,48(sp)
		xTest2, yTest2, closestX, closestY, oldJ, currentDistance = 0xFFFFF,
    a760:	                move.l #1048575,32(sp)
		thisDistance;

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
    a768:	                clr.l 44(sp)
    a76c:	   /----------- bra.w a944 <handleClosestPoint+0x200>
		oldJ = currentFloor -> polygon[i].numVertices - 1;
    a770:	/--|----------> movea.l 1cae6 <currentFloor>,a0
    a776:	|  |            move.l 12(a0),d1
    a77a:	|  |            move.l 44(sp),d0
    a77e:	|  |            lsl.l #3,d0
    a780:	|  |            movea.l d1,a0
    a782:	|  |            adda.l d0,a0
    a784:	|  |            move.l (a0),d0
    a786:	|  |            move.l d0,d1
    a788:	|  |            subq.l #1,d1
    a78a:	|  |            move.l d1,36(sp)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
    a78e:	|  |            clr.l 40(sp)
    a792:	|  |     /----- bra.w a922 <handleClosestPoint+0x1de>
			xTest1 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[j]].x;
    a796:	|  |  /--|----> movea.l 1cae6 <currentFloor>,a0
    a79c:	|  |  |  |      move.l 4(a0),d1
    a7a0:	|  |  |  |      movea.l 1cae6 <currentFloor>,a0
    a7a6:	|  |  |  |      movea.l 12(a0),a0
    a7aa:	|  |  |  |      move.l 44(sp),d0
    a7ae:	|  |  |  |      lsl.l #3,d0
    a7b0:	|  |  |  |      adda.l d0,a0
    a7b2:	|  |  |  |      movea.l 4(a0),a0
    a7b6:	|  |  |  |      move.l 40(sp),d0
    a7ba:	|  |  |  |      add.l d0,d0
    a7bc:	|  |  |  |      add.l d0,d0
    a7be:	|  |  |  |      adda.l d0,a0
    a7c0:	|  |  |  |      move.l (a0),d0
    a7c2:	|  |  |  |      lsl.l #3,d0
    a7c4:	|  |  |  |      movea.l d1,a0
    a7c6:	|  |  |  |      adda.l d0,a0
    a7c8:	|  |  |  |      move.l (a0),28(sp)
			yTest1 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[j]].y;
    a7cc:	|  |  |  |      movea.l 1cae6 <currentFloor>,a0
    a7d2:	|  |  |  |      move.l 4(a0),d1
    a7d6:	|  |  |  |      movea.l 1cae6 <currentFloor>,a0
    a7dc:	|  |  |  |      movea.l 12(a0),a0
    a7e0:	|  |  |  |      move.l 44(sp),d0
    a7e4:	|  |  |  |      lsl.l #3,d0
    a7e6:	|  |  |  |      adda.l d0,a0
    a7e8:	|  |  |  |      movea.l 4(a0),a0
    a7ec:	|  |  |  |      move.l 40(sp),d0
    a7f0:	|  |  |  |      add.l d0,d0
    a7f2:	|  |  |  |      add.l d0,d0
    a7f4:	|  |  |  |      adda.l d0,a0
    a7f6:	|  |  |  |      move.l (a0),d0
    a7f8:	|  |  |  |      lsl.l #3,d0
    a7fa:	|  |  |  |      movea.l d1,a0
    a7fc:	|  |  |  |      adda.l d0,a0
    a7fe:	|  |  |  |      move.l 4(a0),24(sp)
			xTest2 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[oldJ]].x;
    a804:	|  |  |  |      movea.l 1cae6 <currentFloor>,a0
    a80a:	|  |  |  |      move.l 4(a0),d1
    a80e:	|  |  |  |      movea.l 1cae6 <currentFloor>,a0
    a814:	|  |  |  |      movea.l 12(a0),a0
    a818:	|  |  |  |      move.l 44(sp),d0
    a81c:	|  |  |  |      lsl.l #3,d0
    a81e:	|  |  |  |      adda.l d0,a0
    a820:	|  |  |  |      movea.l 4(a0),a0
    a824:	|  |  |  |      move.l 36(sp),d0
    a828:	|  |  |  |      add.l d0,d0
    a82a:	|  |  |  |      add.l d0,d0
    a82c:	|  |  |  |      adda.l d0,a0
    a82e:	|  |  |  |      move.l (a0),d0
    a830:	|  |  |  |      lsl.l #3,d0
    a832:	|  |  |  |      movea.l d1,a0
    a834:	|  |  |  |      adda.l d0,a0
    a836:	|  |  |  |      move.l (a0),20(sp)
			yTest2 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[oldJ]].y;
    a83a:	|  |  |  |      movea.l 1cae6 <currentFloor>,a0
    a840:	|  |  |  |      move.l 4(a0),d1
    a844:	|  |  |  |      movea.l 1cae6 <currentFloor>,a0
    a84a:	|  |  |  |      movea.l 12(a0),a0
    a84e:	|  |  |  |      move.l 44(sp),d0
    a852:	|  |  |  |      lsl.l #3,d0
    a854:	|  |  |  |      adda.l d0,a0
    a856:	|  |  |  |      movea.l 4(a0),a0
    a85a:	|  |  |  |      move.l 36(sp),d0
    a85e:	|  |  |  |      add.l d0,d0
    a860:	|  |  |  |      add.l d0,d0
    a862:	|  |  |  |      adda.l d0,a0
    a864:	|  |  |  |      move.l (a0),d0
    a866:	|  |  |  |      lsl.l #3,d0
    a868:	|  |  |  |      movea.l d1,a0
    a86a:	|  |  |  |      adda.l d0,a0
    a86c:	|  |  |  |      move.l 4(a0),16(sp)
			closestPointOnLine (&closestX, &closestY, xTest1, yTest1, xTest2, yTest2, *setX, *setY);
    a872:	|  |  |  |      movea.l 68(sp),a0
    a876:	|  |  |  |      move.l (a0),d1
    a878:	|  |  |  |      movea.l 64(sp),a0
    a87c:	|  |  |  |      move.l (a0),d0
    a87e:	|  |  |  |      move.l d1,-(sp)
    a880:	|  |  |  |      move.l d0,-(sp)
    a882:	|  |  |  |      move.l 24(sp),-(sp)
    a886:	|  |  |  |      move.l 32(sp),-(sp)
    a88a:	|  |  |  |      move.l 40(sp),-(sp)
    a88e:	|  |  |  |      move.l 48(sp),-(sp)
    a892:	|  |  |  |      lea 28(sp),a0
    a896:	|  |  |  |      move.l a0,-(sp)
    a898:	|  |  |  |      lea 36(sp),a0
    a89c:	|  |  |  |      move.l a0,-(sp)
    a89e:	|  |  |  |      jsr 1606e <closestPointOnLine>
    a8a4:	|  |  |  |      lea 32(sp),sp

			xTest1 = *setX - closestX;
    a8a8:	|  |  |  |      movea.l 64(sp),a0
    a8ac:	|  |  |  |      move.l (a0),d0
    a8ae:	|  |  |  |      move.l 8(sp),d1
    a8b2:	|  |  |  |      move.l d0,d2
    a8b4:	|  |  |  |      sub.l d1,d2
    a8b6:	|  |  |  |      move.l d2,28(sp)
			yTest1 = *setY - closestY;
    a8ba:	|  |  |  |      movea.l 68(sp),a0
    a8be:	|  |  |  |      move.l (a0),d0
    a8c0:	|  |  |  |      move.l 4(sp),d1
    a8c4:	|  |  |  |      move.l d0,d2
    a8c6:	|  |  |  |      sub.l d1,d2
    a8c8:	|  |  |  |      move.l d2,24(sp)
			thisDistance = xTest1 * xTest1 + yTest1 * yTest1;
    a8cc:	|  |  |  |      move.l 28(sp),-(sp)
    a8d0:	|  |  |  |      move.l 32(sp),-(sp)
    a8d4:	|  |  |  |      jsr 17c08 <__mulsi3>
    a8da:	|  |  |  |      addq.l #8,sp
    a8dc:	|  |  |  |      move.l d0,d2
    a8de:	|  |  |  |      move.l 24(sp),-(sp)
    a8e2:	|  |  |  |      move.l 28(sp),-(sp)
    a8e6:	|  |  |  |      jsr 17c08 <__mulsi3>
    a8ec:	|  |  |  |      addq.l #8,sp
    a8ee:	|  |  |  |      move.l d2,d1
    a8f0:	|  |  |  |      add.l d0,d1
    a8f2:	|  |  |  |      move.l d1,12(sp)


			if (thisDistance < currentDistance) {
    a8f6:	|  |  |  |      move.l 12(sp),d2
    a8fa:	|  |  |  |      cmp.l 32(sp),d2
    a8fe:	|  |  |  |  /-- bge.s a918 <handleClosestPoint+0x1d4>

				currentDistance = thisDistance;
    a900:	|  |  |  |  |   move.l 12(sp),32(sp)
				gotX = closestX;
    a906:	|  |  |  |  |   move.l 8(sp),56(sp)
				gotY = closestY;
    a90c:	|  |  |  |  |   move.l 4(sp),52(sp)
				gotPoly = i;
    a912:	|  |  |  |  |   move.l 44(sp),48(sp)
			}
			oldJ = j;
    a918:	|  |  |  |  \-> move.l 40(sp),36(sp)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
    a91e:	|  |  |  |      addq.l #1,40(sp)
    a922:	|  |  |  \----> movea.l 1cae6 <currentFloor>,a0
    a928:	|  |  |         move.l 12(a0),d1
    a92c:	|  |  |         move.l 44(sp),d0
    a930:	|  |  |         lsl.l #3,d0
    a932:	|  |  |         movea.l d1,a0
    a934:	|  |  |         adda.l d0,a0
    a936:	|  |  |         move.l (a0),d0
    a938:	|  |  |         cmp.l 40(sp),d0
    a93c:	|  |  \-------- bgt.w a796 <handleClosestPoint+0x52>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
    a940:	|  |            addq.l #1,44(sp)
    a944:	|  \----------> movea.l 1cae6 <currentFloor>,a0
    a94a:	|               move.l 8(a0),d0
    a94e:	|               cmp.l 44(sp),d0
    a952:	\-------------- bgt.w a770 <handleClosestPoint+0x2c>
		}
	}

	if (gotPoly == -1) return FALSE;
    a956:	                moveq #-1,d0
    a958:	                cmp.l 48(sp),d0
    a95c:	            /-- bne.s a962 <handleClosestPoint+0x21e>
    a95e:	            |   clr.w d0
    a960:	         /--|-- bra.s a97c <handleClosestPoint+0x238>
	*setX = gotX;
    a962:	         |  \-> movea.l 64(sp),a0
    a966:	         |      move.l 56(sp),(a0)
	*setY = gotY;
    a96a:	         |      movea.l 68(sp),a0
    a96e:	         |      move.l 52(sp),(a0)
	*setPoly = gotPoly;
    a972:	         |      movea.l 72(sp),a0
    a976:	         |      move.l 48(sp),(a0)

	return TRUE;
    a97a:	         |      moveq #1,d0
}
    a97c:	         \----> move.l (sp)+,d2
    a97e:	                lea 56(sp),sp
    a982:	                rts

0000a984 <initPeople>:


BOOL initPeople () {
	personRegion.sX = 0;
    a984:	clr.l 1ca42 <personRegion+0x10>
	personRegion.sY = 0;
    a98a:	clr.l 1ca46 <personRegion+0x14>
	personRegion.di = -1;
    a990:	moveq #-1,d0
    a992:	move.l d0,1ca4a <personRegion+0x18>
	allScreenRegions = NULL;
    a998:	clr.l 1cada <allScreenRegions>

	return TRUE;
    a99e:	moveq #1,d0
}
    a9a0:	rts

0000a9a2 <jumpPerson>:

void jumpPerson (int x, int y, int objNum) {
    a9a2:	          subq.l #4,sp
    a9a4:	          move.l d2,-(sp)
    if (x == 0 && y == 0) return;
    a9a6:	          tst.l 12(sp)
    a9aa:	      /-- bne.s a9b2 <jumpPerson+0x10>
    a9ac:	      |   tst.l 16(sp)
    a9b0:	/-----|-- beq.s aa26 <jumpPerson+0x84>
    struct onScreenPerson * moveMe = findPerson(objNum);
    a9b2:	|     \-> move.l 20(sp),-(sp)
    a9b6:	|         jsr a648 <findPerson>
    a9bc:	|         addq.l #4,sp
    a9be:	|         move.l d0,4(sp)
    if (!moveMe) return;
    a9c2:	|  /----- beq.s aa2a <jumpPerson+0x88>
    if (moveMe->continueAfterWalking) abortFunction(moveMe->continueAfterWalking);
    a9c4:	|  |      movea.l 4(sp),a0
    a9c8:	|  |      move.l 68(a0),d0
    a9cc:	|  |  /-- beq.s a9e0 <jumpPerson+0x3e>
    a9ce:	|  |  |   movea.l 4(sp),a0
    a9d2:	|  |  |   move.l 68(a0),d0
    a9d6:	|  |  |   move.l d0,-(sp)
    a9d8:	|  |  |   jsr 473a <abortFunction>
    a9de:	|  |  |   addq.l #4,sp
    moveMe->continueAfterWalking = NULL;
    a9e0:	|  |  \-> movea.l 4(sp),a0
    a9e4:	|  |      clr.l 68(a0)
    moveMe->walking = FALSE;
    a9e8:	|  |      movea.l 4(sp),a0
    a9ec:	|  |      clr.w 64(a0)
    moveMe->spinning = FALSE;
    a9f0:	|  |      movea.l 4(sp),a0
    a9f4:	|  |      clr.w 66(a0)
    moveAndScale(moveMe, x, y);
    a9f8:	|  |      move.l 16(sp),-(sp)
    a9fc:	|  |      jsr 17686 <__floatsisf>
    aa02:	|  |      addq.l #4,sp
    aa04:	|  |      move.l d0,d2
    aa06:	|  |      move.l 12(sp),-(sp)
    aa0a:	|  |      jsr 17686 <__floatsisf>
    aa10:	|  |      addq.l #4,sp
    aa12:	|  |      move.l d2,-(sp)
    aa14:	|  |      move.l d0,-(sp)
    aa16:	|  |      move.l 12(sp),-(sp)
    aa1a:	|  |      jsr ad90 <moveAndScale>
    aa20:	|  |      lea 12(sp),sp
    aa24:	|  |  /-- bra.s aa2c <jumpPerson+0x8a>
    if (x == 0 && y == 0) return;
    aa26:	\--|--|-> nop
    aa28:	   |  +-- bra.s aa2c <jumpPerson+0x8a>
    if (!moveMe) return;
    aa2a:	   \--|-> nop
}
    aa2c:	      \-> move.l (sp)+,d2
    aa2e:	          addq.l #4,sp
    aa30:	          rts

0000aa32 <killAllPeople>:


void killAllPeople () {
    aa32:	          subq.l #8,sp
    aa34:	          move.l a6,-(sp)
	struct onScreenPerson * killPeople;
	while (allPeople) {
    aa36:	   /----- bra.s aaa2 <killAllPeople+0x70>
		if (allPeople -> continueAfterWalking) abortFunction (allPeople -> continueAfterWalking);
    aa38:	/--|----> movea.l 1ca2e <allPeople>,a0
    aa3e:	|  |      move.l 68(a0),d0
    aa42:	|  |  /-- beq.s aa58 <killAllPeople+0x26>
    aa44:	|  |  |   movea.l 1ca2e <allPeople>,a0
    aa4a:	|  |  |   move.l 68(a0),d0
    aa4e:	|  |  |   move.l d0,-(sp)
    aa50:	|  |  |   jsr 473a <abortFunction>
    aa56:	|  |  |   addq.l #4,sp
		allPeople -> continueAfterWalking = NULL;
    aa58:	|  |  \-> movea.l 1ca2e <allPeople>,a0
    aa5e:	|  |      clr.l 68(a0)
		killPeople = allPeople;
    aa62:	|  |      move.l 1ca2e <allPeople>,8(sp)
		allPeople = allPeople -> next;
    aa6a:	|  |      movea.l 1ca2e <allPeople>,a0
    aa70:	|  |      move.l 36(a0),d0
    aa74:	|  |      move.l d0,1ca2e <allPeople>
		removeObjectType (killPeople -> thisType);
    aa7a:	|  |      movea.l 8(sp),a0
    aa7e:	|  |      move.l 114(a0),d0
    aa82:	|  |      move.l d0,-(sp)
    aa84:	|  |      jsr d8e6 <removeObjectType>
    aa8a:	|  |      addq.l #4,sp
		FreeVec(killPeople);
    aa8c:	|  |      move.l 8(sp),4(sp)
    aa92:	|  |      move.l 1c9ca <SysBase>,d0
    aa98:	|  |      movea.l d0,a6
    aa9a:	|  |      movea.l 4(sp),a1
    aa9e:	|  |      jsr -690(a6)
	while (allPeople) {
    aaa2:	|  \----> move.l 1ca2e <allPeople>,d0
    aaa8:	\-------- bne.s aa38 <killAllPeople+0x6>
	}
}
    aaaa:	          nop
    aaac:	          nop
    aaae:	          movea.l (sp)+,a6
    aab0:	          addq.l #8,sp
    aab2:	          rts

0000aab4 <killMostPeople>:

void killMostPeople() {
    aab4:	          lea -12(sp),sp
    aab8:	          move.l a6,-(sp)
    struct onScreenPerson *killPeople;
    struct onScreenPerson **lookyHere = &allPeople;
    aaba:	          move.l #117294,12(sp)

    while (*lookyHere) {
    aac2:	   /----- bra.w ab48 <killMostPeople+0x94>
        if ((*lookyHere)->extra & EXTRA_NOREMOVE) {
    aac6:	/--|----> movea.l 12(sp),a0
    aaca:	|  |      movea.l (a0),a0
    aacc:	|  |      move.l 118(a0),d0
    aad0:	|  |      moveq #32,d1
    aad2:	|  |      and.l d1,d0
    aad4:	|  |  /-- beq.s aae6 <killMostPeople+0x32>
            lookyHere = &(*lookyHere)->next;
    aad6:	|  |  |   movea.l 12(sp),a0
    aada:	|  |  |   move.l (a0),d0
    aadc:	|  |  |   moveq #36,d1
    aade:	|  |  |   add.l d0,d1
    aae0:	|  |  |   move.l d1,12(sp)
    aae4:	|  +--|-- bra.s ab48 <killMostPeople+0x94>
        } else {
            killPeople = (*lookyHere);
    aae6:	|  |  \-> movea.l 12(sp),a0
    aaea:	|  |      move.l (a0),8(sp)

            // Change last pointer to NEXT in the list instead
            (*lookyHere) = killPeople->next;
    aaee:	|  |      movea.l 8(sp),a0
    aaf2:	|  |      move.l 36(a0),d0
    aaf6:	|  |      movea.l 12(sp),a0
    aafa:	|  |      move.l d0,(a0)

            // Gone from the list... now free some memory
            if (killPeople->continueAfterWalking) abortFunction(killPeople->continueAfterWalking);
    aafc:	|  |      movea.l 8(sp),a0
    ab00:	|  |      move.l 68(a0),d0
    ab04:	|  |  /-- beq.s ab18 <killMostPeople+0x64>
    ab06:	|  |  |   movea.l 8(sp),a0
    ab0a:	|  |  |   move.l 68(a0),d0
    ab0e:	|  |  |   move.l d0,-(sp)
    ab10:	|  |  |   jsr 473a <abortFunction>
    ab16:	|  |  |   addq.l #4,sp
            killPeople->continueAfterWalking = NULL;
    ab18:	|  |  \-> movea.l 8(sp),a0
    ab1c:	|  |      clr.l 68(a0)
            removeObjectType(killPeople->thisType);
    ab20:	|  |      movea.l 8(sp),a0
    ab24:	|  |      move.l 114(a0),d0
    ab28:	|  |      move.l d0,-(sp)
    ab2a:	|  |      jsr d8e6 <removeObjectType>
    ab30:	|  |      addq.l #4,sp
            FreeVec(killPeople);
    ab32:	|  |      move.l 8(sp),4(sp)
    ab38:	|  |      move.l 1c9ca <SysBase>,d0
    ab3e:	|  |      movea.l d0,a6
    ab40:	|  |      movea.l 4(sp),a1
    ab44:	|  |      jsr -690(a6)
    while (*lookyHere) {
    ab48:	|  \----> movea.l 12(sp),a0
    ab4c:	|         move.l (a0),d0
    ab4e:	\-------- bne.w aac6 <killMostPeople+0x12>
        }
    }
}
    ab52:	          nop
    ab54:	          nop
    ab56:	          movea.l (sp)+,a6
    ab58:	          lea 12(sp),sp
    ab5c:	          rts

0000ab5e <makeSilent>:
//	db ("End of loadPeople");
	return TRUE;
}

void makeSilent (struct onScreenPerson me) {
	setFrames (&me, ANI_STAND);
    ab5e:	clr.l -(sp)
    ab60:	move.l sp,d0
    ab62:	addq.l #8,d0
    ab64:	move.l d0,-(sp)
    ab66:	jsr 8192 <setFrames>
    ab6c:	addq.l #8,sp
}
    ab6e:	nop
    ab70:	rts

0000ab72 <makeWalkingPerson>:

BOOL makeWalkingPerson (int x, int y, int objNum, struct loadedFunction * func, int di) {
    ab72:	          lea -12(sp),sp
    ab76:	          move.l d2,-(sp)
	if (x == 0 && y == 0) return FALSE;
    ab78:	          tst.l 20(sp)
    ab7c:	      /-- bne.s ab8a <makeWalkingPerson+0x18>
    ab7e:	      |   tst.l 24(sp)
    ab82:	      +-- bne.s ab8a <makeWalkingPerson+0x18>
    ab84:	      |   clr.w d0
    ab86:	/-----|-- bra.w ad22 <makeWalkingPerson+0x1b0>
	if (currentFloor -> numPolygons == 0) return FALSE;
    ab8a:	|     \-> movea.l 1cae6 <currentFloor>,a0
    ab90:	|         move.l 8(a0),d0
    ab94:	|     /-- bne.s ab9c <makeWalkingPerson+0x2a>
    ab96:	|     |   clr.w d0
    ab98:	+-----|-- bra.w ad22 <makeWalkingPerson+0x1b0>
	struct onScreenPerson * moveMe = findPerson (objNum);
    ab9c:	|     \-> move.l 28(sp),-(sp)
    aba0:	|         jsr a648 <findPerson>
    aba6:	|         addq.l #4,sp
    aba8:	|         move.l d0,12(sp)
	if (! moveMe) return FALSE;
    abac:	|     /-- bne.s abb4 <makeWalkingPerson+0x42>
    abae:	|     |   clr.w d0
    abb0:	+-----|-- bra.w ad22 <makeWalkingPerson+0x1b0>

	if (moveMe -> continueAfterWalking) abortFunction (moveMe -> continueAfterWalking);
    abb4:	|     \-> movea.l 12(sp),a0
    abb8:	|         move.l 68(a0),d0
    abbc:	|     /-- beq.s abd0 <makeWalkingPerson+0x5e>
    abbe:	|     |   movea.l 12(sp),a0
    abc2:	|     |   move.l 68(a0),d0
    abc6:	|     |   move.l d0,-(sp)
    abc8:	|     |   jsr 473a <abortFunction>
    abce:	|     |   addq.l #4,sp
	moveMe -> continueAfterWalking = NULL;
    abd0:	|     \-> movea.l 12(sp),a0
    abd4:	|         clr.l 68(a0)
	moveMe -> walking = TRUE;
    abd8:	|         movea.l 12(sp),a0
    abdc:	|         move.w #1,64(a0)
	moveMe -> directionWhenDoneWalking = di;
    abe2:	|         movea.l 12(sp),a0
    abe6:	|         move.l 36(sp),110(a0)

	moveMe -> walkToX = x;
    abec:	|         movea.l 12(sp),a0
    abf0:	|         move.l 20(sp),40(a0)
	moveMe -> walkToY = y;
    abf6:	|         movea.l 12(sp),a0
    abfa:	|         move.l 24(sp),44(a0)
	moveMe -> walkToPoly = inFloor (x, y);
    ac00:	|         move.l 24(sp),-(sp)
    ac04:	|         move.l 24(sp),-(sp)
    ac08:	|         jsr 165b6 <inFloor>
    ac0e:	|         addq.l #8,sp
    ac10:	|         movea.l 12(sp),a0
    ac14:	|         move.l d0,60(a0)
	if (moveMe -> walkToPoly == -1) {
    ac18:	|         movea.l 12(sp),a0
    ac1c:	|         move.l 60(a0),d0
    ac20:	|         moveq #-1,d1
    ac22:	|         cmp.l d0,d1
    ac24:	|     /-- bne.s ac54 <makeWalkingPerson+0xe2>
		if (! handleClosestPoint (&moveMe -> walkToX, &moveMe -> walkToY, &moveMe -> walkToPoly)) return FALSE;
    ac26:	|     |   movea.w #60,a0
    ac2a:	|     |   adda.l 12(sp),a0
    ac2e:	|     |   moveq #44,d1
    ac30:	|     |   add.l 12(sp),d1
    ac34:	|     |   moveq #40,d0
    ac36:	|     |   add.l 12(sp),d0
    ac3a:	|     |   move.l a0,-(sp)
    ac3c:	|     |   move.l d1,-(sp)
    ac3e:	|     |   move.l d0,-(sp)
    ac40:	|     |   jsr a744 <handleClosestPoint>
    ac46:	|     |   lea 12(sp),sp
    ac4a:	|     |   tst.w d0
    ac4c:	|     +-- bne.s ac54 <makeWalkingPerson+0xe2>
    ac4e:	|     |   clr.w d0
    ac50:	+-----|-- bra.w ad22 <makeWalkingPerson+0x1b0>
	}

	moveMe -> inPoly = inFloor (moveMe -> x, moveMe -> y);
    ac54:	|     \-> movea.l 12(sp),a0
    ac58:	|         move.l 4(a0),d0
    ac5c:	|         move.l d0,-(sp)
    ac5e:	|         jsr 1761e <__fixsfsi>
    ac64:	|         addq.l #4,sp
    ac66:	|         move.l d0,d2
    ac68:	|         movea.l 12(sp),a0
    ac6c:	|         move.l (a0),d0
    ac6e:	|         move.l d0,-(sp)
    ac70:	|         jsr 1761e <__fixsfsi>
    ac76:	|         addq.l #4,sp
    ac78:	|         move.l d2,-(sp)
    ac7a:	|         move.l d0,-(sp)
    ac7c:	|         jsr 165b6 <inFloor>
    ac82:	|         addq.l #8,sp
    ac84:	|         movea.l 12(sp),a0
    ac88:	|         move.l d0,56(a0)
	if (moveMe -> inPoly == -1) {
    ac8c:	|         movea.l 12(sp),a0
    ac90:	|         move.l 56(a0),d0
    ac94:	|         moveq #-1,d1
    ac96:	|         cmp.l d0,d1
    ac98:	|     /-- bne.s acea <makeWalkingPerson+0x178>
		int xxx = moveMe -> x, yyy = moveMe -> y;
    ac9a:	|     |   movea.l 12(sp),a0
    ac9e:	|     |   move.l (a0),d0
    aca0:	|     |   move.l d0,-(sp)
    aca2:	|     |   jsr 1761e <__fixsfsi>
    aca8:	|     |   addq.l #4,sp
    acaa:	|     |   move.l d0,8(sp)
    acae:	|     |   movea.l 12(sp),a0
    acb2:	|     |   move.l 4(a0),d0
    acb6:	|     |   move.l d0,-(sp)
    acb8:	|     |   jsr 1761e <__fixsfsi>
    acbe:	|     |   addq.l #4,sp
    acc0:	|     |   move.l d0,4(sp)
		if (! handleClosestPoint (&xxx, &yyy, &moveMe -> inPoly)) return FALSE;
    acc4:	|     |   moveq #56,d0
    acc6:	|     |   add.l 12(sp),d0
    acca:	|     |   move.l d0,-(sp)
    accc:	|     |   lea 8(sp),a0
    acd0:	|     |   move.l a0,-(sp)
    acd2:	|     |   moveq #16,d0
    acd4:	|     |   add.l sp,d0
    acd6:	|     |   move.l d0,-(sp)
    acd8:	|     |   jsr a744 <handleClosestPoint>
    acde:	|     |   lea 12(sp),sp
    ace2:	|     |   tst.w d0
    ace4:	|     +-- bne.s acea <makeWalkingPerson+0x178>
    ace6:	|     |   clr.w d0
    ace8:	+-----|-- bra.s ad22 <makeWalkingPerson+0x1b0>
	}

	doBorderStuff (moveMe);
    acea:	|     \-> move.l 12(sp),-(sp)
    acee:	|         jsr 99aa <doBorderStuff>
    acf4:	|         addq.l #4,sp
	if (walkMe (moveMe, FALSE) || moveMe -> spinning) {
    acf6:	|         clr.l -(sp)
    acf8:	|         move.l 16(sp),-(sp)
    acfc:	|         jsr bf8e <walkMe>
    ad02:	|         addq.l #8,sp
    ad04:	|         tst.w d0
    ad06:	|     /-- bne.s ad12 <makeWalkingPerson+0x1a0>
    ad08:	|     |   movea.l 12(sp),a0
    ad0c:	|     |   move.w 66(a0),d0
    ad10:	|  /--|-- beq.s ad20 <makeWalkingPerson+0x1ae>
		moveMe -> continueAfterWalking = func;
    ad12:	|  |  \-> movea.l 12(sp),a0
    ad16:	|  |      move.l 32(sp),68(a0)
		return TRUE;
    ad1c:	|  |      moveq #1,d0
    ad1e:	+--|----- bra.s ad22 <makeWalkingPerson+0x1b0>
	} else {
		return FALSE;
    ad20:	|  \----> clr.w d0
	}
}
    ad22:	\-------> move.l (sp)+,d2
    ad24:	          lea 12(sp),sp
    ad28:	          rts

0000ad2a <makeNullAnim>:


struct personaAnimation * makeNullAnim () {
    ad2a:	       lea -16(sp),sp
    ad2e:	       move.l a6,-(sp)

	struct personaAnimation * newAnim	= AllocVec(sizeof(struct personaAnimation),MEMF_ANY);
    ad30:	       moveq #12,d0
    ad32:	       move.l d0,16(sp)
    ad36:	       clr.l 12(sp)
    ad3a:	       move.l 1c9ca <SysBase>,d0
    ad40:	       movea.l d0,a6
    ad42:	       move.l 16(sp),d0
    ad46:	       move.l 12(sp),d1
    ad4a:	       jsr -684(a6)
    ad4e:	       move.l d0,8(sp)
    ad52:	       move.l 8(sp),d0
    ad56:	       move.l d0,4(sp)
    if(newAnim == 0) {
    ad5a:	   /-- bne.s ad6e <makeNullAnim+0x44>
     	KPrintF("makeNullAnim: Can't reserve Memory\n");
    ad5c:	   |   pea 1920c <PutChar+0x14ee>
    ad62:	   |   jsr 17254 <KPrintF>
    ad68:	   |   addq.l #4,sp
        return NULL;    
    ad6a:	   |   moveq #0,d0
    ad6c:	/--|-- bra.s ad88 <makeNullAnim+0x5e>
    }  

	newAnim -> theSprites		= NULL;
    ad6e:	|  \-> movea.l 4(sp),a0
    ad72:	|      clr.l (a0)
	newAnim -> numFrames		= 0;
    ad74:	|      movea.l 4(sp),a0
    ad78:	|      clr.l 8(a0)
	newAnim -> frames			= NULL;
    ad7c:	|      movea.l 4(sp),a0
    ad80:	|      clr.l 4(a0)
	return newAnim;
    ad84:	|      move.l 4(sp),d0
}
    ad88:	\----> movea.l (sp)+,a6
    ad8a:	       lea 16(sp),sp
    ad8e:	       rts

0000ad90 <moveAndScale>:

void moveAndScale (struct onScreenPerson *me, FLOAT x, FLOAT y) {
    ad90:	    move.l d2,-(sp)
	me->x = x;
    ad92:	    movea.l 8(sp),a0
    ad96:	    move.l 12(sp),(a0)
	me->y = y;
    ad9a:	    movea.l 8(sp),a0
    ad9e:	    move.l 16(sp),4(a0)
	me->oldx = 0;
    ada4:	    movea.l 8(sp),a0
    ada8:	    clr.l 8(a0)
	me->oldy = 0;
    adac:	    movea.l 8(sp),a0
    adb0:	    clr.l 12(a0)
	if (! (me->extra & EXTRA_NOSCALE) && scaleDivide) me->scale = (me->y - scaleHorizon) / scaleDivide;
    adb4:	    movea.l 8(sp),a0
    adb8:	    move.l 118(a0),d0
    adbc:	    moveq #2,d1
    adbe:	    and.l d1,d0
    adc0:	/-- bne.s ae18 <moveAndScale+0x88>
    adc2:	|   move.w 1c35e <scaleDivide>,d0
    adc8:	+-- beq.s ae18 <moveAndScale+0x88>
    adca:	|   movea.l 8(sp),a0
    adce:	|   move.l 4(a0),d2
    add2:	|   move.w 1c35c <scaleHorizon>,d0
    add8:	|   movea.w d0,a0
    adda:	|   move.l a0,-(sp)
    addc:	|   jsr 17686 <__floatsisf>
    ade2:	|   addq.l #4,sp
    ade4:	|   move.l d0,-(sp)
    ade6:	|   move.l d2,-(sp)
    ade8:	|   jsr 1797a <__subsf3>
    adee:	|   addq.l #8,sp
    adf0:	|   move.l d0,d2
    adf2:	|   move.w 1c35e <scaleDivide>,d0
    adf8:	|   movea.w d0,a0
    adfa:	|   move.l a0,-(sp)
    adfc:	|   jsr 17686 <__floatsisf>
    ae02:	|   addq.l #4,sp
    ae04:	|   move.l d0,-(sp)
    ae06:	|   move.l d2,-(sp)
    ae08:	|   jsr 1753c <__divsf3>
    ae0e:	|   addq.l #8,sp
    ae10:	|   movea.l 8(sp),a0
    ae14:	|   move.l d0,32(a0)
}
    ae18:	\-> nop
    ae1a:	    move.l (sp)+,d2
    ae1c:	    rts

0000ae1e <removeOneCharacter>:

void removeOneCharacter (int i) {
    ae1e:	          lea -16(sp),sp
    ae22:	          move.l a6,-(sp)
    struct onScreenPerson * p = findPerson(i);	
    ae24:	          move.l 24(sp),-(sp)
    ae28:	          jsr a648 <findPerson>
    ae2e:	          addq.l #4,sp
    ae30:	          move.l d0,8(sp)

    if (p) {
    ae34:	/-------- beq.w af14 <removeOneCharacter+0xf6>
		/*if( p->myAnim->numFrames == 0) {
			CstRestoreScreen(p->x, p->y, &p->myAnim->theSprites->bank.sprites[0].width, &p->myAnim->theSprites->bank.sprites[0].height );
		} ToDo: Remove this*/


        if (overRegion == &personRegion && overRegion->thisType == p->thisType) {
    ae38:	|         move.l 1cade <overRegion>,d0
    ae3e:	|         cmpi.l #117298,d0
    ae44:	|     /-- bne.s ae62 <removeOneCharacter+0x44>
    ae46:	|     |   movea.l 1cade <overRegion>,a0
    ae4c:	|     |   move.l 28(a0),d1
    ae50:	|     |   movea.l 8(sp),a0
    ae54:	|     |   move.l 114(a0),d0
    ae58:	|     |   cmp.l d1,d0
    ae5a:	|     +-- bne.s ae62 <removeOneCharacter+0x44>
            overRegion = NULL;
    ae5c:	|     |   clr.l 1cade <overRegion>
        }

        if (p->continueAfterWalking) abortFunction(p->continueAfterWalking);
    ae62:	|     \-> movea.l 8(sp),a0
    ae66:	|         move.l 68(a0),d0
    ae6a:	|     /-- beq.s ae7e <removeOneCharacter+0x60>
    ae6c:	|     |   movea.l 8(sp),a0
    ae70:	|     |   move.l 68(a0),d0
    ae74:	|     |   move.l d0,-(sp)
    ae76:	|     |   jsr 473a <abortFunction>
    ae7c:	|     |   addq.l #4,sp
        p->continueAfterWalking = NULL;
    ae7e:	|     \-> movea.l 8(sp),a0
    ae82:	|         clr.l 68(a0)
        struct onScreenPerson ** killPeople;

		for(int i=0; i<3;i++)
    ae86:	|         clr.l 12(sp)
    ae8a:	|     /-- bra.s aeb2 <removeOneCharacter+0x94>
		{
			deleteAnim( p->myPersona->animation[i]);
    ae8c:	|  /--|-> movea.l 8(sp),a0
    ae90:	|  |  |   movea.l 80(a0),a0
    ae94:	|  |  |   move.l (a0),d1
    ae96:	|  |  |   move.l 12(sp),d0
    ae9a:	|  |  |   add.l d0,d0
    ae9c:	|  |  |   add.l d0,d0
    ae9e:	|  |  |   movea.l d1,a0
    aea0:	|  |  |   adda.l d0,a0
    aea2:	|  |  |   move.l (a0),d0
    aea4:	|  |  |   move.l d0,-(sp)
    aea6:	|  |  |   jsr 9926 <deleteAnim>
    aeac:	|  |  |   addq.l #4,sp
		for(int i=0; i<3;i++)
    aeae:	|  |  |   addq.l #1,12(sp)
    aeb2:	|  |  \-> moveq #2,d0
    aeb4:	|  |      cmp.l 12(sp),d0
    aeb8:	|  \----- bge.s ae8c <removeOneCharacter+0x6e>
		}

        for (killPeople = &allPeople;
    aeba:	|         move.l #117294,16(sp)
    aec2:	|     /-- bra.s aed2 <removeOneCharacter+0xb4>
            *killPeople != p;
            killPeople = &((*killPeople)->next)) {;}
    aec4:	|  /--|-> movea.l 16(sp),a0
    aec8:	|  |  |   move.l (a0),d0
    aeca:	|  |  |   moveq #36,d1
    aecc:	|  |  |   add.l d0,d1
    aece:	|  |  |   move.l d1,16(sp)
            *killPeople != p;
    aed2:	|  |  \-> movea.l 16(sp),a0
    aed6:	|  |      move.l (a0),d0
    aed8:	|  |      cmp.l 8(sp),d0
    aedc:	|  \----- bne.s aec4 <removeOneCharacter+0xa6>

        *killPeople = p->next;
    aede:	|         movea.l 8(sp),a0
    aee2:	|         move.l 36(a0),d0
    aee6:	|         movea.l 16(sp),a0
    aeea:	|         move.l d0,(a0)
        removeObjectType(p->thisType);
    aeec:	|         movea.l 8(sp),a0
    aef0:	|         move.l 114(a0),d0
    aef4:	|         move.l d0,-(sp)
    aef6:	|         jsr d8e6 <removeObjectType>
    aefc:	|         addq.l #4,sp
        FreeVec(p);
    aefe:	|         move.l 8(sp),4(sp)
    af04:	|         move.l 1c9ca <SysBase>,d0
    af0a:	|         movea.l d0,a6
    af0c:	|         movea.l 4(sp),a1
    af10:	|         jsr -690(a6)
    }
}
    af14:	\-------> nop
    af16:	          movea.l (sp)+,a6
    af18:	          lea 16(sp),sp
    af1c:	          rts

0000af1e <rethinkAngle>:

void rethinkAngle (struct onScreenPerson * thisPerson) {
    af1e:	       subq.l #8,sp
    af20:	       move.l d2,-(sp)
	int d = thisPerson -> myPersona -> numDirections;
    af22:	       movea.l 16(sp),a0
    af26:	       movea.l 80(a0),a0
    af2a:	       move.l 4(a0),4(sp)
	int direc = thisPerson -> angle + (180 / d) + 180 + thisPerson -> angleOffset;
    af30:	       movea.l 16(sp),a0
    af34:	       move.l 92(a0),d2
    af38:	       move.l 4(sp),-(sp)
    af3c:	       pea b4 <_start+0xb4>
    af40:	       jsr 17c86 <__divsi3>
    af46:	       addq.l #8,sp
    af48:	       add.l d2,d0
    af4a:	       move.l d0,d1
    af4c:	       addi.l #180,d1
    af52:	       movea.l 16(sp),a0
    af56:	       move.l 100(a0),d0
    af5a:	       move.l d1,d2
    af5c:	       add.l d0,d2
    af5e:	       move.l d2,8(sp)
	while (direc >= 360) direc -= 360;
    af62:	   /-- bra.s af6c <rethinkAngle+0x4e>
    af64:	/--|-> addi.l #-360,8(sp)
    af6c:	|  \-> cmpi.l #359,8(sp)
    af74:	\----- bgt.s af64 <rethinkAngle+0x46>
	thisPerson -> direction = (direc * d) / 360;
    af76:	       move.l 4(sp),-(sp)
    af7a:	       move.l 12(sp),-(sp)
    af7e:	       jsr 17c08 <__mulsi3>
    af84:	       addq.l #8,sp
    af86:	       pea 168 <decodeFilename+0x50>
    af8a:	       move.l d0,-(sp)
    af8c:	       jsr 17c86 <__divsi3>
    af92:	       addq.l #8,sp
    af94:	       movea.l 16(sp),a0
    af98:	       move.l d0,106(a0)
}
    af9c:	       nop
    af9e:	       move.l (sp)+,d2
    afa0:	       addq.l #8,sp
    afa2:	       rts

0000afa4 <saveAnim>:


BOOL saveAnim (struct personaAnimation * p, BPTR fp) {
    afa4:	          subq.l #4,sp
	put2bytes (p -> numFrames, fp);
    afa6:	          movea.l 8(sp),a0
    afaa:	          move.l 8(a0),d0
    afae:	          move.l 12(sp),-(sp)
    afb2:	          move.l d0,-(sp)
    afb4:	          jsr 8d0 <put2bytes>
    afba:	          addq.l #8,sp
	if (p -> numFrames) {
    afbc:	          movea.l 8(sp),a0
    afc0:	          move.l 8(a0),d0
    afc4:	/-------- beq.w b068 <saveAnim+0xc4>
		put4bytes (p -> theSprites -> ID, fp);
    afc8:	|         movea.l 8(sp),a0
    afcc:	|         movea.l (a0),a0
    afce:	|         move.l (a0),d0
    afd0:	|         move.l 12(sp),-(sp)
    afd4:	|         move.l d0,-(sp)
    afd6:	|         jsr 958 <put4bytes>
    afdc:	|         addq.l #8,sp

		for (int a = 0; a < p -> numFrames; a ++) {
    afde:	|         clr.l (sp)
    afe0:	|     /-- bra.s b05a <saveAnim+0xb6>
			put4bytes (p -> frames[a].frameNum, fp);
    afe2:	|  /--|-> movea.l 8(sp),a0
    afe6:	|  |  |   movea.l 4(a0),a0
    afea:	|  |  |   move.l (sp),d1
    afec:	|  |  |   move.l d1,d0
    afee:	|  |  |   add.l d0,d0
    aff0:	|  |  |   add.l d1,d0
    aff2:	|  |  |   add.l d0,d0
    aff4:	|  |  |   add.l d0,d0
    aff6:	|  |  |   adda.l d0,a0
    aff8:	|  |  |   move.l (a0),d0
    affa:	|  |  |   move.l 12(sp),-(sp)
    affe:	|  |  |   move.l d0,-(sp)
    b000:	|  |  |   jsr 958 <put4bytes>
    b006:	|  |  |   addq.l #8,sp
			put4bytes (p -> frames[a].howMany, fp);
    b008:	|  |  |   movea.l 8(sp),a0
    b00c:	|  |  |   movea.l 4(a0),a0
    b010:	|  |  |   move.l (sp),d1
    b012:	|  |  |   move.l d1,d0
    b014:	|  |  |   add.l d0,d0
    b016:	|  |  |   add.l d1,d0
    b018:	|  |  |   add.l d0,d0
    b01a:	|  |  |   add.l d0,d0
    b01c:	|  |  |   adda.l d0,a0
    b01e:	|  |  |   move.l 4(a0),d0
    b022:	|  |  |   move.l 12(sp),-(sp)
    b026:	|  |  |   move.l d0,-(sp)
    b028:	|  |  |   jsr 958 <put4bytes>
    b02e:	|  |  |   addq.l #8,sp
			put4bytes (p -> frames[a].noise, fp);
    b030:	|  |  |   movea.l 8(sp),a0
    b034:	|  |  |   movea.l 4(a0),a0
    b038:	|  |  |   move.l (sp),d1
    b03a:	|  |  |   move.l d1,d0
    b03c:	|  |  |   add.l d0,d0
    b03e:	|  |  |   add.l d1,d0
    b040:	|  |  |   add.l d0,d0
    b042:	|  |  |   add.l d0,d0
    b044:	|  |  |   adda.l d0,a0
    b046:	|  |  |   move.l 8(a0),d0
    b04a:	|  |  |   move.l 12(sp),-(sp)
    b04e:	|  |  |   move.l d0,-(sp)
    b050:	|  |  |   jsr 958 <put4bytes>
    b056:	|  |  |   addq.l #8,sp
		for (int a = 0; a < p -> numFrames; a ++) {
    b058:	|  |  |   addq.l #1,(sp)
    b05a:	|  |  \-> movea.l 8(sp),a0
    b05e:	|  |      move.l 8(a0),d0
    b062:	|  |      cmp.l (sp),d0
    b064:	|  \----- bgt.w afe2 <saveAnim+0x3e>
		}
	}
	return TRUE;
    b068:	\-------> moveq #1,d0
}
    b06a:	          addq.l #4,sp
    b06c:	          rts

0000b06e <saveCostume>:

BOOL saveCostume (struct persona * cossy, BPTR fp) {
    b06e:	             subq.l #4,sp
	int a;
	put2bytes (cossy -> numDirections, fp);
    b070:	             movea.l 8(sp),a0
    b074:	             move.l 4(a0),d0
    b078:	             move.l 12(sp),-(sp)
    b07c:	             move.l d0,-(sp)
    b07e:	             jsr 8d0 <put2bytes>
    b084:	             addq.l #8,sp
	for (a = 0; a < cossy -> numDirections * 3; a ++) {
    b086:	             clr.l (sp)
    b088:	   /-------- bra.s b0b4 <saveCostume+0x46>
		if (! saveAnim (cossy -> animation[a], fp)) return FALSE;
    b08a:	/--|-------> movea.l 8(sp),a0
    b08e:	|  |         move.l (a0),d1
    b090:	|  |         move.l (sp),d0
    b092:	|  |         add.l d0,d0
    b094:	|  |         add.l d0,d0
    b096:	|  |         movea.l d1,a0
    b098:	|  |         adda.l d0,a0
    b09a:	|  |         move.l (a0),d0
    b09c:	|  |         move.l 12(sp),-(sp)
    b0a0:	|  |         move.l d0,-(sp)
    b0a2:	|  |         jsr afa4 <saveAnim>
    b0a8:	|  |         addq.l #8,sp
    b0aa:	|  |         tst.w d0
    b0ac:	|  |     /-- bne.s b0b2 <saveCostume+0x44>
    b0ae:	|  |     |   clr.w d0
    b0b0:	|  |  /--|-- bra.s b0c8 <saveCostume+0x5a>
	for (a = 0; a < cossy -> numDirections * 3; a ++) {
    b0b2:	|  |  |  \-> addq.l #1,(sp)
    b0b4:	|  \--|----> movea.l 8(sp),a0
    b0b8:	|     |      move.l 4(a0),d1
    b0bc:	|     |      move.l d1,d0
    b0be:	|     |      add.l d0,d0
    b0c0:	|     |      add.l d1,d0
    b0c2:	|     |      cmp.l (sp),d0
    b0c4:	\-----|----- bgt.s b08a <saveCostume+0x1c>
	}

	return TRUE;
    b0c6:	      |      moveq #1,d0
}
    b0c8:	      \----> addq.l #4,sp
    b0ca:	             rts

0000b0cc <savePeople>:

BOOL savePeople (BPTR fp) {
    b0cc:	             lea -144(sp),sp
    b0d0:	             move.l a6,-(sp)
    b0d2:	             move.l d2,-(sp)
	struct onScreenPerson * me = allPeople;
    b0d4:	             move.l 1ca2e <allPeople>,148(sp)
	int countPeople = 0, a;
    b0dc:	             clr.l 144(sp)

	putSigned (scaleHorizon, fp);
    b0e0:	             move.w 1c35c <scaleHorizon>,d0
    b0e6:	             movea.w d0,a0
    b0e8:	             move.l 156(sp),-(sp)
    b0ec:	             move.l a0,-(sp)
    b0ee:	             jsr a9c <putSigned>
    b0f4:	             addq.l #8,sp
	putSigned (scaleDivide, fp);
    b0f6:	             move.w 1c35e <scaleDivide>,d0
    b0fc:	             movea.w d0,a0
    b0fe:	             move.l 156(sp),-(sp)
    b102:	             move.l a0,-(sp)
    b104:	             jsr a9c <putSigned>
    b10a:	             addq.l #8,sp

	while (me) {
    b10c:	         /-- bra.s b11c <savePeople+0x50>
		countPeople ++;
    b10e:	      /--|-> addq.l #1,144(sp)
		me = me -> next;
    b112:	      |  |   movea.l 148(sp),a0
    b116:	      |  |   move.l 36(a0),148(sp)
	while (me) {
    b11c:	      |  \-> tst.l 148(sp)
    b120:	      \----- bne.s b10e <savePeople+0x42>
	}

	put2bytes (countPeople, fp);
    b122:	             move.l 156(sp),-(sp)
    b126:	             move.l 148(sp),-(sp)
    b12a:	             jsr 8d0 <put2bytes>
    b130:	             addq.l #8,sp

	me = allPeople;
    b132:	             move.l 1ca2e <allPeople>,148(sp)
	for (a = 0; a < countPeople; a ++) {
    b13a:	             clr.l 140(sp)
    b13e:	   /-------- bra.w b596 <savePeople+0x4ca>

		putFloat (me -> x, fp);
    b142:	/--|-------> movea.l 148(sp),a0
    b146:	|  |         move.l (a0),d0
    b148:	|  |         move.l 156(sp),-(sp)
    b14c:	|  |         move.l d0,-(sp)
    b14e:	|  |         jsr a46 <putFloat>
    b154:	|  |         addq.l #8,sp
		putFloat (me -> y, fp);
    b156:	|  |         movea.l 148(sp),a0
    b15a:	|  |         move.l 4(a0),d0
    b15e:	|  |         move.l 156(sp),-(sp)
    b162:	|  |         move.l d0,-(sp)
    b164:	|  |         jsr a46 <putFloat>
    b16a:	|  |         addq.l #8,sp

		saveCostume (me -> myPersona, fp);
    b16c:	|  |         movea.l 148(sp),a0
    b170:	|  |         move.l 80(a0),d0
    b174:	|  |         move.l 156(sp),-(sp)
    b178:	|  |         move.l d0,-(sp)
    b17a:	|  |         jsr b06e <saveCostume>
    b180:	|  |         addq.l #8,sp
		saveAnim (me -> myAnim, fp);
    b182:	|  |         movea.l 148(sp),a0
    b186:	|  |         move.l 72(a0),d0
    b18a:	|  |         move.l 156(sp),-(sp)
    b18e:	|  |         move.l d0,-(sp)
    b190:	|  |         jsr afa4 <saveAnim>
    b196:	|  |         addq.l #8,sp
		FPutC( fp, me -> myAnim == me -> lastUsedAnim);
    b198:	|  |         move.l 156(sp),136(sp)
    b19e:	|  |         movea.l 148(sp),a0
    b1a2:	|  |         move.l 72(a0),d1
    b1a6:	|  |         movea.l 148(sp),a0
    b1aa:	|  |         move.l 76(a0),d0
    b1ae:	|  |         cmp.l d1,d0
    b1b0:	|  |         seq d0
    b1b2:	|  |         neg.b d0
    b1b4:	|  |         move.b d0,d0
    b1b6:	|  |         andi.l #255,d0
    b1bc:	|  |         move.l d0,132(sp)
    b1c0:	|  |         move.l 1c9d2 <DOSBase>,d0
    b1c6:	|  |         movea.l d0,a6
    b1c8:	|  |         move.l 136(sp),d1
    b1cc:	|  |         move.l 132(sp),d2
    b1d0:	|  |         jsr -312(a6)
    b1d4:	|  |         move.l d0,128(sp)

		putFloat (me -> scale, fp);
    b1d8:	|  |         movea.l 148(sp),a0
    b1dc:	|  |         move.l 32(a0),d0
    b1e0:	|  |         move.l 156(sp),-(sp)
    b1e4:	|  |         move.l d0,-(sp)
    b1e6:	|  |         jsr a46 <putFloat>
    b1ec:	|  |         addq.l #8,sp

		put2bytes (me -> extra, fp);
    b1ee:	|  |         movea.l 148(sp),a0
    b1f2:	|  |         move.l 118(a0),d0
    b1f6:	|  |         move.l 156(sp),-(sp)
    b1fa:	|  |         move.l d0,-(sp)
    b1fc:	|  |         jsr 8d0 <put2bytes>
    b202:	|  |         addq.l #8,sp
		put2bytes (me -> height, fp);
    b204:	|  |         movea.l 148(sp),a0
    b208:	|  |         move.l 20(a0),d0
    b20c:	|  |         move.l 156(sp),-(sp)
    b210:	|  |         move.l d0,-(sp)
    b212:	|  |         jsr 8d0 <put2bytes>
    b218:	|  |         addq.l #8,sp
		put2bytes (me -> walkToX, fp);
    b21a:	|  |         movea.l 148(sp),a0
    b21e:	|  |         move.l 40(a0),d0
    b222:	|  |         move.l 156(sp),-(sp)
    b226:	|  |         move.l d0,-(sp)
    b228:	|  |         jsr 8d0 <put2bytes>
    b22e:	|  |         addq.l #8,sp
		put2bytes (me -> walkToY, fp);
    b230:	|  |         movea.l 148(sp),a0
    b234:	|  |         move.l 44(a0),d0
    b238:	|  |         move.l 156(sp),-(sp)
    b23c:	|  |         move.l d0,-(sp)
    b23e:	|  |         jsr 8d0 <put2bytes>
    b244:	|  |         addq.l #8,sp
		put2bytes (me -> thisStepX, fp);
    b246:	|  |         movea.l 148(sp),a0
    b24a:	|  |         move.l 48(a0),d0
    b24e:	|  |         move.l 156(sp),-(sp)
    b252:	|  |         move.l d0,-(sp)
    b254:	|  |         jsr 8d0 <put2bytes>
    b25a:	|  |         addq.l #8,sp
		put2bytes (me -> thisStepY, fp);
    b25c:	|  |         movea.l 148(sp),a0
    b260:	|  |         move.l 52(a0),d0
    b264:	|  |         move.l 156(sp),-(sp)
    b268:	|  |         move.l d0,-(sp)
    b26a:	|  |         jsr 8d0 <put2bytes>
    b270:	|  |         addq.l #8,sp
		put2bytes (me -> frameNum, fp);
    b272:	|  |         movea.l 148(sp),a0
    b276:	|  |         move.l 84(a0),d0
    b27a:	|  |         move.l 156(sp),-(sp)
    b27e:	|  |         move.l d0,-(sp)
    b280:	|  |         jsr 8d0 <put2bytes>
    b286:	|  |         addq.l #8,sp
		put2bytes (me -> frameTick, fp);
    b288:	|  |         movea.l 148(sp),a0
    b28c:	|  |         move.l 88(a0),d0
    b290:	|  |         move.l 156(sp),-(sp)
    b294:	|  |         move.l d0,-(sp)
    b296:	|  |         jsr 8d0 <put2bytes>
    b29c:	|  |         addq.l #8,sp
		put2bytes (me -> walkSpeed, fp);
    b29e:	|  |         movea.l 148(sp),a0
    b2a2:	|  |         move.l 28(a0),d0
    b2a6:	|  |         move.l 156(sp),-(sp)
    b2aa:	|  |         move.l d0,-(sp)
    b2ac:	|  |         jsr 8d0 <put2bytes>
    b2b2:	|  |         addq.l #8,sp
		put2bytes (me -> spinSpeed, fp);
    b2b4:	|  |         movea.l 148(sp),a0
    b2b8:	|  |         move.l 122(a0),d0
    b2bc:	|  |         move.l 156(sp),-(sp)
    b2c0:	|  |         move.l d0,-(sp)
    b2c2:	|  |         jsr 8d0 <put2bytes>
    b2c8:	|  |         addq.l #8,sp
		putSigned (me -> floaty, fp);
    b2ca:	|  |         movea.l 148(sp),a0
    b2ce:	|  |         move.l 24(a0),d0
    b2d2:	|  |         move.l d0,d0
    b2d4:	|  |         movea.w d0,a0
    b2d6:	|  |         move.l 156(sp),-(sp)
    b2da:	|  |         move.l a0,-(sp)
    b2dc:	|  |         jsr a9c <putSigned>
    b2e2:	|  |         addq.l #8,sp
		FPutC (fp, me -> show);
    b2e4:	|  |         move.l 156(sp),124(sp)
    b2ea:	|  |         movea.l 148(sp),a0
    b2ee:	|  |         move.w 104(a0),d0
    b2f2:	|  |         movea.w d0,a0
    b2f4:	|  |         move.l a0,120(sp)
    b2f8:	|  |         move.l 1c9d2 <DOSBase>,d0
    b2fe:	|  |         movea.l d0,a6
    b300:	|  |         move.l 124(sp),d1
    b304:	|  |         move.l 120(sp),d2
    b308:	|  |         jsr -312(a6)
    b30c:	|  |         move.l d0,116(sp)
		FPutC (fp, me -> walking);
    b310:	|  |         move.l 156(sp),112(sp)
    b316:	|  |         movea.l 148(sp),a0
    b31a:	|  |         move.w 64(a0),d0
    b31e:	|  |         movea.w d0,a0
    b320:	|  |         move.l a0,108(sp)
    b324:	|  |         move.l 1c9d2 <DOSBase>,d0
    b32a:	|  |         movea.l d0,a6
    b32c:	|  |         move.l 112(sp),d1
    b330:	|  |         move.l 108(sp),d2
    b334:	|  |         jsr -312(a6)
    b338:	|  |         move.l d0,104(sp)
		FPutC (fp, me -> spinning);
    b33c:	|  |         move.l 156(sp),100(sp)
    b342:	|  |         movea.l 148(sp),a0
    b346:	|  |         move.w 66(a0),d0
    b34a:	|  |         movea.w d0,a0
    b34c:	|  |         move.l a0,96(sp)
    b350:	|  |         move.l 1c9d2 <DOSBase>,d0
    b356:	|  |         movea.l d0,a6
    b358:	|  |         move.l 100(sp),d1
    b35c:	|  |         move.l 96(sp),d2
    b360:	|  |         jsr -312(a6)
    b364:	|  |         move.l d0,92(sp)
		if (me -> continueAfterWalking) {
    b368:	|  |         movea.l 148(sp),a0
    b36c:	|  |         move.l 68(a0),d0
    b370:	|  |  /----- beq.s b3ae <savePeople+0x2e2>
			FPutC (fp, 1);
    b372:	|  |  |      move.l 156(sp),76(sp)
    b378:	|  |  |      moveq #1,d0
    b37a:	|  |  |      move.l d0,72(sp)
    b37e:	|  |  |      move.l 1c9d2 <DOSBase>,d0
    b384:	|  |  |      movea.l d0,a6
    b386:	|  |  |      move.l 76(sp),d1
    b38a:	|  |  |      move.l 72(sp),d2
    b38e:	|  |  |      jsr -312(a6)
    b392:	|  |  |      move.l d0,68(sp)
			saveFunction (me -> continueAfterWalking, fp);
    b396:	|  |  |      movea.l 148(sp),a0
    b39a:	|  |  |      move.l 68(a0),d0
    b39e:	|  |  |      move.l 156(sp),-(sp)
    b3a2:	|  |  |      move.l d0,-(sp)
    b3a4:	|  |  |      jsr c5c8 <saveFunction>
    b3aa:	|  |  |      addq.l #8,sp
    b3ac:	|  |  |  /-- bra.s b3d2 <savePeople+0x306>
		} else {
			FPutC (fp, 1);
    b3ae:	|  |  \--|-> move.l 156(sp),88(sp)
    b3b4:	|  |     |   moveq #1,d0
    b3b6:	|  |     |   move.l d0,84(sp)
    b3ba:	|  |     |   move.l 1c9d2 <DOSBase>,d0
    b3c0:	|  |     |   movea.l d0,a6
    b3c2:	|  |     |   move.l 88(sp),d1
    b3c6:	|  |     |   move.l 84(sp),d2
    b3ca:	|  |     |   jsr -312(a6)
    b3ce:	|  |     |   move.l d0,80(sp)
		}
		put2bytes (me -> direction, fp);
    b3d2:	|  |     \-> movea.l 148(sp),a0
    b3d6:	|  |         move.l 106(a0),d0
    b3da:	|  |         move.l 156(sp),-(sp)
    b3de:	|  |         move.l d0,-(sp)
    b3e0:	|  |         jsr 8d0 <put2bytes>
    b3e6:	|  |         addq.l #8,sp
		put2bytes (me -> angle, fp);
    b3e8:	|  |         movea.l 148(sp),a0
    b3ec:	|  |         move.l 92(a0),d0
    b3f0:	|  |         move.l 156(sp),-(sp)
    b3f4:	|  |         move.l d0,-(sp)
    b3f6:	|  |         jsr 8d0 <put2bytes>
    b3fc:	|  |         addq.l #8,sp
		put2bytes (me -> angleOffset, fp);
    b3fe:	|  |         movea.l 148(sp),a0
    b402:	|  |         move.l 100(a0),d0
    b406:	|  |         move.l 156(sp),-(sp)
    b40a:	|  |         move.l d0,-(sp)
    b40c:	|  |         jsr 8d0 <put2bytes>
    b412:	|  |         addq.l #8,sp
		put2bytes (me -> wantAngle, fp);
    b414:	|  |         movea.l 148(sp),a0
    b418:	|  |         move.l 96(a0),d0
    b41c:	|  |         move.l 156(sp),-(sp)
    b420:	|  |         move.l d0,-(sp)
    b422:	|  |         jsr 8d0 <put2bytes>
    b428:	|  |         addq.l #8,sp
		putSigned (me -> directionWhenDoneWalking, fp);
    b42a:	|  |         movea.l 148(sp),a0
    b42e:	|  |         move.l 110(a0),d0
    b432:	|  |         move.l d0,d0
    b434:	|  |         movea.w d0,a0
    b436:	|  |         move.l 156(sp),-(sp)
    b43a:	|  |         move.l a0,-(sp)
    b43c:	|  |         jsr a9c <putSigned>
    b442:	|  |         addq.l #8,sp
		putSigned (me -> inPoly, fp);
    b444:	|  |         movea.l 148(sp),a0
    b448:	|  |         move.l 56(a0),d0
    b44c:	|  |         move.l d0,d0
    b44e:	|  |         movea.w d0,a0
    b450:	|  |         move.l 156(sp),-(sp)
    b454:	|  |         move.l a0,-(sp)
    b456:	|  |         jsr a9c <putSigned>
    b45c:	|  |         addq.l #8,sp
		putSigned (me -> walkToPoly, fp);
    b45e:	|  |         movea.l 148(sp),a0
    b462:	|  |         move.l 60(a0),d0
    b466:	|  |         move.l d0,d0
    b468:	|  |         movea.w d0,a0
    b46a:	|  |         move.l 156(sp),-(sp)
    b46e:	|  |         move.l a0,-(sp)
    b470:	|  |         jsr a9c <putSigned>
    b476:	|  |         addq.l #8,sp

		FPutC (fp, me -> r);
    b478:	|  |         move.l 156(sp),64(sp)
    b47e:	|  |         movea.l 148(sp),a0
    b482:	|  |         move.b 126(a0),d0
    b486:	|  |         move.b d0,d0
    b488:	|  |         andi.l #255,d0
    b48e:	|  |         move.l d0,60(sp)
    b492:	|  |         move.l 1c9d2 <DOSBase>,d0
    b498:	|  |         movea.l d0,a6
    b49a:	|  |         move.l 64(sp),d1
    b49e:	|  |         move.l 60(sp),d2
    b4a2:	|  |         jsr -312(a6)
    b4a6:	|  |         move.l d0,56(sp)
		FPutC (fp, me -> g);
    b4aa:	|  |         move.l 156(sp),52(sp)
    b4b0:	|  |         movea.l 148(sp),a0
    b4b4:	|  |         move.b 127(a0),d0
    b4b8:	|  |         move.b d0,d0
    b4ba:	|  |         andi.l #255,d0
    b4c0:	|  |         move.l d0,48(sp)
    b4c4:	|  |         move.l 1c9d2 <DOSBase>,d0
    b4ca:	|  |         movea.l d0,a6
    b4cc:	|  |         move.l 52(sp),d1
    b4d0:	|  |         move.l 48(sp),d2
    b4d4:	|  |         jsr -312(a6)
    b4d8:	|  |         move.l d0,44(sp)
		FPutC (fp, me -> b);
    b4dc:	|  |         move.l 156(sp),40(sp)
    b4e2:	|  |         movea.l 148(sp),a0
    b4e6:	|  |         move.b 128(a0),d0
    b4ea:	|  |         move.b d0,d0
    b4ec:	|  |         andi.l #255,d0
    b4f2:	|  |         move.l d0,36(sp)
    b4f6:	|  |         move.l 1c9d2 <DOSBase>,d0
    b4fc:	|  |         movea.l d0,a6
    b4fe:	|  |         move.l 40(sp),d1
    b502:	|  |         move.l 36(sp),d2
    b506:	|  |         jsr -312(a6)
    b50a:	|  |         move.l d0,32(sp)
		FPutC (fp, me -> colourmix);
    b50e:	|  |         move.l 156(sp),28(sp)
    b514:	|  |         movea.l 148(sp),a0
    b518:	|  |         move.b 129(a0),d0
    b51c:	|  |         move.b d0,d0
    b51e:	|  |         andi.l #255,d0
    b524:	|  |         move.l d0,24(sp)
    b528:	|  |         move.l 1c9d2 <DOSBase>,d0
    b52e:	|  |         movea.l d0,a6
    b530:	|  |         move.l 28(sp),d1
    b534:	|  |         move.l 24(sp),d2
    b538:	|  |         jsr -312(a6)
    b53c:	|  |         move.l d0,20(sp)
		FPutC (fp, me -> transparency);
    b540:	|  |         move.l 156(sp),16(sp)
    b546:	|  |         movea.l 148(sp),a0
    b54a:	|  |         move.b 130(a0),d0
    b54e:	|  |         move.b d0,d0
    b550:	|  |         andi.l #255,d0
    b556:	|  |         move.l d0,12(sp)
    b55a:	|  |         move.l 1c9d2 <DOSBase>,d0
    b560:	|  |         movea.l d0,a6
    b562:	|  |         move.l 16(sp),d1
    b566:	|  |         move.l 12(sp),d2
    b56a:	|  |         jsr -312(a6)
    b56e:	|  |         move.l d0,8(sp)
		
		saveObjectRef (me -> thisType, fp);
    b572:	|  |         movea.l 148(sp),a0
    b576:	|  |         move.l 114(a0),d0
    b57a:	|  |         move.l 156(sp),-(sp)
    b57e:	|  |         move.l d0,-(sp)
    b580:	|  |         jsr d986 <saveObjectRef>
    b586:	|  |         addq.l #8,sp

		me = me -> next;
    b588:	|  |         movea.l 148(sp),a0
    b58c:	|  |         move.l 36(a0),148(sp)
	for (a = 0; a < countPeople; a ++) {
    b592:	|  |         addq.l #1,140(sp)
    b596:	|  \-------> movea.l 140(sp),a0
    b59a:	|            cmpa.l 144(sp),a0
    b59e:	\----------- blt.w b142 <savePeople+0x76>
	}
	return TRUE;
    b5a2:	             moveq #1,d0
}
    b5a4:	             move.l (sp)+,d2
    b5a6:	             movea.l (sp)+,a6
    b5a8:	             lea 144(sp),sp
    b5ac:	             rts

0000b5ae <setBankFile>:

void setBankFile (struct personaAnimation * newP, struct loadedSpriteBank * sB) { 
	newP -> theSprites = sB; 
    b5ae:	movea.l 4(sp),a0
    b5b2:	move.l 8(sp),(a0)
}
    b5b6:	nop
    b5b8:	rts

0000b5ba <setDrawMode>:


void setDrawMode (int h, int ob) {
    b5ba:	       subq.l #4,sp
	struct onScreenPerson * moveMe = findPerson (ob);
    b5bc:	       move.l 12(sp),-(sp)
    b5c0:	       jsr a648 <findPerson>
    b5c6:	       addq.l #4,sp
    b5c8:	       move.l d0,(sp)
	if (! moveMe) return;
    b5ca:	/----- beq.s b5de <setDrawMode+0x24>
		
	setMyDrawMode (moveMe, h);
    b5cc:	|      move.l 8(sp),-(sp)
    b5d0:	|      move.l 4(sp),-(sp)
    b5d4:	|      jsr b5e4 <setMyDrawMode>
    b5da:	|      addq.l #8,sp
    b5dc:	|  /-- bra.s b5e0 <setDrawMode+0x26>
	if (! moveMe) return;
    b5de:	\--|-> nop
}
    b5e0:	   \-> addq.l #4,sp
    b5e2:	       rts

0000b5e4 <setMyDrawMode>:
	drawModeInvisible,
	numDrawModes
};

void setMyDrawMode (struct onScreenPerson *moveMe, int h) {
	switch (h) {
    b5e4:	       moveq #19,d0
    b5e6:	       cmp.l 8(sp),d0
    b5ea:	/----- bcs.w bac2 <setMyDrawMode+0x4de>
    b5ee:	|      move.l 8(sp),d0
    b5f2:	|      add.l d0,d0
    b5f4:	|      movea.l d0,a0
    b5f6:	|      adda.l #46594,a0
    b5fc:	|      move.w (a0),d0
    b5fe:	|      jmp (b602 <setMyDrawMode+0x1e>,pc,d0.w)
    b602:	|      .short 0x04c0
    b604:	|      ori.l #6684712,-(a4)
    b60a:	|      btst d0,-(a0)
    b60c:	|      bchg d0,(a6)+
    b60e:	|      bclr d0,(a4)+
    b610:	|      bset d0,(a2)+
    b612:	|      andi.b #84,(a6)
    b616:	|      andi.l #55575312,(a2)
    b61c:	|      .short 0x02d0
    b61e:	|      bclr d1,(a0)
    b620:	|      .short 0x044a
    b622:	|      .short 0x040c
    b624:	|      movep.l d1,1158(a6)
    b628:	|      .short 0x00e2
		case drawModeTransparent3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b62a:	|      movea.l 4(sp),a0
    b62e:	|      clr.b 128(a0)
    b632:	|      movea.l 4(sp),a0
    b636:	|      move.b 128(a0),d0
    b63a:	|      movea.l 4(sp),a0
    b63e:	|      move.b d0,127(a0)
    b642:	|      movea.l 4(sp),a0
    b646:	|      move.b 127(a0),d0
    b64a:	|      movea.l 4(sp),a0
    b64e:	|      move.b d0,126(a0)
			moveMe->colourmix = 0;
    b652:	|      movea.l 4(sp),a0
    b656:	|      clr.b 129(a0)
			moveMe->transparency = 64;
    b65a:	|      movea.l 4(sp),a0
    b65e:	|      move.b #64,130(a0)
			break;
    b664:	|  /-- bra.w bafc <setMyDrawMode+0x518>
		case drawModeTransparent2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b668:	|  |   movea.l 4(sp),a0
    b66c:	|  |   clr.b 128(a0)
    b670:	|  |   movea.l 4(sp),a0
    b674:	|  |   move.b 128(a0),d0
    b678:	|  |   movea.l 4(sp),a0
    b67c:	|  |   move.b d0,127(a0)
    b680:	|  |   movea.l 4(sp),a0
    b684:	|  |   move.b 127(a0),d0
    b688:	|  |   movea.l 4(sp),a0
    b68c:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    b690:	|  |   movea.l 4(sp),a0
    b694:	|  |   clr.b 129(a0)
			moveMe->transparency = 128;
    b698:	|  |   movea.l 4(sp),a0
    b69c:	|  |   move.b #-128,130(a0)
			break;
    b6a2:	|  +-- bra.w bafc <setMyDrawMode+0x518>
		case drawModeTransparent1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b6a6:	|  |   movea.l 4(sp),a0
    b6aa:	|  |   clr.b 128(a0)
    b6ae:	|  |   movea.l 4(sp),a0
    b6b2:	|  |   move.b 128(a0),d0
    b6b6:	|  |   movea.l 4(sp),a0
    b6ba:	|  |   move.b d0,127(a0)
    b6be:	|  |   movea.l 4(sp),a0
    b6c2:	|  |   move.b 127(a0),d0
    b6c6:	|  |   movea.l 4(sp),a0
    b6ca:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    b6ce:	|  |   movea.l 4(sp),a0
    b6d2:	|  |   clr.b 129(a0)
			moveMe->transparency = 192;
    b6d6:	|  |   movea.l 4(sp),a0
    b6da:	|  |   move.b #-64,130(a0)
			break;
    b6e0:	|  +-- bra.w bafc <setMyDrawMode+0x518>
		case drawModeInvisible:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b6e4:	|  |   movea.l 4(sp),a0
    b6e8:	|  |   clr.b 128(a0)
    b6ec:	|  |   movea.l 4(sp),a0
    b6f0:	|  |   move.b 128(a0),d0
    b6f4:	|  |   movea.l 4(sp),a0
    b6f8:	|  |   move.b d0,127(a0)
    b6fc:	|  |   movea.l 4(sp),a0
    b700:	|  |   move.b 127(a0),d0
    b704:	|  |   movea.l 4(sp),a0
    b708:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    b70c:	|  |   movea.l 4(sp),a0
    b710:	|  |   clr.b 129(a0)
			moveMe->transparency = 254;
    b714:	|  |   movea.l 4(sp),a0
    b718:	|  |   move.b #-2,130(a0)
			break;
    b71e:	|  +-- bra.w bafc <setMyDrawMode+0x518>
		case drawModeDark1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b722:	|  |   movea.l 4(sp),a0
    b726:	|  |   clr.b 128(a0)
    b72a:	|  |   movea.l 4(sp),a0
    b72e:	|  |   move.b 128(a0),d0
    b732:	|  |   movea.l 4(sp),a0
    b736:	|  |   move.b d0,127(a0)
    b73a:	|  |   movea.l 4(sp),a0
    b73e:	|  |   move.b 127(a0),d0
    b742:	|  |   movea.l 4(sp),a0
    b746:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    b74a:	|  |   movea.l 4(sp),a0
    b74e:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    b754:	|  |   movea.l 4(sp),a0
    b758:	|  |   clr.b 130(a0)
			break;
    b75c:	|  +-- bra.w bafc <setMyDrawMode+0x518>
		case drawModeDark2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b760:	|  |   movea.l 4(sp),a0
    b764:	|  |   clr.b 128(a0)
    b768:	|  |   movea.l 4(sp),a0
    b76c:	|  |   move.b 128(a0),d0
    b770:	|  |   movea.l 4(sp),a0
    b774:	|  |   move.b d0,127(a0)
    b778:	|  |   movea.l 4(sp),a0
    b77c:	|  |   move.b 127(a0),d0
    b780:	|  |   movea.l 4(sp),a0
    b784:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    b788:	|  |   movea.l 4(sp),a0
    b78c:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    b792:	|  |   movea.l 4(sp),a0
    b796:	|  |   clr.b 130(a0)
			break;
    b79a:	|  +-- bra.w bafc <setMyDrawMode+0x518>
		case drawModeDark3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b79e:	|  |   movea.l 4(sp),a0
    b7a2:	|  |   clr.b 128(a0)
    b7a6:	|  |   movea.l 4(sp),a0
    b7aa:	|  |   move.b 128(a0),d0
    b7ae:	|  |   movea.l 4(sp),a0
    b7b2:	|  |   move.b d0,127(a0)
    b7b6:	|  |   movea.l 4(sp),a0
    b7ba:	|  |   move.b 127(a0),d0
    b7be:	|  |   movea.l 4(sp),a0
    b7c2:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    b7c6:	|  |   movea.l 4(sp),a0
    b7ca:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    b7d0:	|  |   movea.l 4(sp),a0
    b7d4:	|  |   clr.b 130(a0)
			break;
    b7d8:	|  +-- bra.w bafc <setMyDrawMode+0x518>
		case drawModeBlack:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b7dc:	|  |   movea.l 4(sp),a0
    b7e0:	|  |   clr.b 128(a0)
    b7e4:	|  |   movea.l 4(sp),a0
    b7e8:	|  |   move.b 128(a0),d0
    b7ec:	|  |   movea.l 4(sp),a0
    b7f0:	|  |   move.b d0,127(a0)
    b7f4:	|  |   movea.l 4(sp),a0
    b7f8:	|  |   move.b 127(a0),d0
    b7fc:	|  |   movea.l 4(sp),a0
    b800:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b804:	|  |   movea.l 4(sp),a0
    b808:	|  |   st 129(a0)
			moveMe->transparency = 0;
    b80c:	|  |   movea.l 4(sp),a0
    b810:	|  |   clr.b 130(a0)
			break;
    b814:	|  +-- bra.w bafc <setMyDrawMode+0x518>
		case drawModeShadow1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b818:	|  |   movea.l 4(sp),a0
    b81c:	|  |   clr.b 128(a0)
    b820:	|  |   movea.l 4(sp),a0
    b824:	|  |   move.b 128(a0),d0
    b828:	|  |   movea.l 4(sp),a0
    b82c:	|  |   move.b d0,127(a0)
    b830:	|  |   movea.l 4(sp),a0
    b834:	|  |   move.b 127(a0),d0
    b838:	|  |   movea.l 4(sp),a0
    b83c:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b840:	|  |   movea.l 4(sp),a0
    b844:	|  |   st 129(a0)
			moveMe->transparency = 64;
    b848:	|  |   movea.l 4(sp),a0
    b84c:	|  |   move.b #64,130(a0)
			break;
    b852:	|  +-- bra.w bafc <setMyDrawMode+0x518>
		case drawModeShadow2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b856:	|  |   movea.l 4(sp),a0
    b85a:	|  |   clr.b 128(a0)
    b85e:	|  |   movea.l 4(sp),a0
    b862:	|  |   move.b 128(a0),d0
    b866:	|  |   movea.l 4(sp),a0
    b86a:	|  |   move.b d0,127(a0)
    b86e:	|  |   movea.l 4(sp),a0
    b872:	|  |   move.b 127(a0),d0
    b876:	|  |   movea.l 4(sp),a0
    b87a:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b87e:	|  |   movea.l 4(sp),a0
    b882:	|  |   st 129(a0)
			moveMe->transparency = 128;
    b886:	|  |   movea.l 4(sp),a0
    b88a:	|  |   move.b #-128,130(a0)
			break;
    b890:	|  +-- bra.w bafc <setMyDrawMode+0x518>
		case drawModeShadow3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b894:	|  |   movea.l 4(sp),a0
    b898:	|  |   clr.b 128(a0)
    b89c:	|  |   movea.l 4(sp),a0
    b8a0:	|  |   move.b 128(a0),d0
    b8a4:	|  |   movea.l 4(sp),a0
    b8a8:	|  |   move.b d0,127(a0)
    b8ac:	|  |   movea.l 4(sp),a0
    b8b0:	|  |   move.b 127(a0),d0
    b8b4:	|  |   movea.l 4(sp),a0
    b8b8:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b8bc:	|  |   movea.l 4(sp),a0
    b8c0:	|  |   st 129(a0)
			moveMe->transparency = 192;
    b8c4:	|  |   movea.l 4(sp),a0
    b8c8:	|  |   move.b #-64,130(a0)
			break;
    b8ce:	|  +-- bra.w bafc <setMyDrawMode+0x518>
		case drawModeFoggy3:
			moveMe->r = moveMe->g = moveMe->b = 128;
    b8d2:	|  |   movea.l 4(sp),a0
    b8d6:	|  |   move.b #-128,128(a0)
    b8dc:	|  |   movea.l 4(sp),a0
    b8e0:	|  |   move.b 128(a0),d0
    b8e4:	|  |   movea.l 4(sp),a0
    b8e8:	|  |   move.b d0,127(a0)
    b8ec:	|  |   movea.l 4(sp),a0
    b8f0:	|  |   move.b 127(a0),d0
    b8f4:	|  |   movea.l 4(sp),a0
    b8f8:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    b8fc:	|  |   movea.l 4(sp),a0
    b900:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    b906:	|  |   movea.l 4(sp),a0
    b90a:	|  |   clr.b 130(a0)
			break;
    b90e:	|  +-- bra.w bafc <setMyDrawMode+0x518>
		case drawModeFoggy2:
			moveMe->r = moveMe->g = moveMe->b = 128;
    b912:	|  |   movea.l 4(sp),a0
    b916:	|  |   move.b #-128,128(a0)
    b91c:	|  |   movea.l 4(sp),a0
    b920:	|  |   move.b 128(a0),d0
    b924:	|  |   movea.l 4(sp),a0
    b928:	|  |   move.b d0,127(a0)
    b92c:	|  |   movea.l 4(sp),a0
    b930:	|  |   move.b 127(a0),d0
    b934:	|  |   movea.l 4(sp),a0
    b938:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    b93c:	|  |   movea.l 4(sp),a0
    b940:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    b946:	|  |   movea.l 4(sp),a0
    b94a:	|  |   clr.b 130(a0)
			break;
    b94e:	|  +-- bra.w bafc <setMyDrawMode+0x518>
		case drawModeFoggy1:
			moveMe->r = moveMe->g = moveMe->b = 128;
    b952:	|  |   movea.l 4(sp),a0
    b956:	|  |   move.b #-128,128(a0)
    b95c:	|  |   movea.l 4(sp),a0
    b960:	|  |   move.b 128(a0),d0
    b964:	|  |   movea.l 4(sp),a0
    b968:	|  |   move.b d0,127(a0)
    b96c:	|  |   movea.l 4(sp),a0
    b970:	|  |   move.b 127(a0),d0
    b974:	|  |   movea.l 4(sp),a0
    b978:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    b97c:	|  |   movea.l 4(sp),a0
    b980:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    b986:	|  |   movea.l 4(sp),a0
    b98a:	|  |   clr.b 130(a0)
			break;
    b98e:	|  +-- bra.w bafc <setMyDrawMode+0x518>
		case drawModeFoggy4:
			moveMe->r = moveMe->g = moveMe->b = 128;
    b992:	|  |   movea.l 4(sp),a0
    b996:	|  |   move.b #-128,128(a0)
    b99c:	|  |   movea.l 4(sp),a0
    b9a0:	|  |   move.b 128(a0),d0
    b9a4:	|  |   movea.l 4(sp),a0
    b9a8:	|  |   move.b d0,127(a0)
    b9ac:	|  |   movea.l 4(sp),a0
    b9b0:	|  |   move.b 127(a0),d0
    b9b4:	|  |   movea.l 4(sp),a0
    b9b8:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b9bc:	|  |   movea.l 4(sp),a0
    b9c0:	|  |   st 129(a0)
			moveMe->transparency = 0;
    b9c4:	|  |   movea.l 4(sp),a0
    b9c8:	|  |   clr.b 130(a0)
			break;
    b9cc:	|  +-- bra.w bafc <setMyDrawMode+0x518>
		case drawModeGlow3:
			moveMe->r = moveMe->g = moveMe->b = 255;
    b9d0:	|  |   movea.l 4(sp),a0
    b9d4:	|  |   st 128(a0)
    b9d8:	|  |   movea.l 4(sp),a0
    b9dc:	|  |   move.b 128(a0),d0
    b9e0:	|  |   movea.l 4(sp),a0
    b9e4:	|  |   move.b d0,127(a0)
    b9e8:	|  |   movea.l 4(sp),a0
    b9ec:	|  |   move.b 127(a0),d0
    b9f0:	|  |   movea.l 4(sp),a0
    b9f4:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    b9f8:	|  |   movea.l 4(sp),a0
    b9fc:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    ba02:	|  |   movea.l 4(sp),a0
    ba06:	|  |   clr.b 130(a0)
			break;
    ba0a:	|  +-- bra.w bafc <setMyDrawMode+0x518>
		case drawModeGlow2:
			moveMe->r = moveMe->g = moveMe->b = 255;
    ba0e:	|  |   movea.l 4(sp),a0
    ba12:	|  |   st 128(a0)
    ba16:	|  |   movea.l 4(sp),a0
    ba1a:	|  |   move.b 128(a0),d0
    ba1e:	|  |   movea.l 4(sp),a0
    ba22:	|  |   move.b d0,127(a0)
    ba26:	|  |   movea.l 4(sp),a0
    ba2a:	|  |   move.b 127(a0),d0
    ba2e:	|  |   movea.l 4(sp),a0
    ba32:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    ba36:	|  |   movea.l 4(sp),a0
    ba3a:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    ba40:	|  |   movea.l 4(sp),a0
    ba44:	|  |   clr.b 130(a0)
			break;
    ba48:	|  +-- bra.w bafc <setMyDrawMode+0x518>
		case drawModeGlow1:
			moveMe->r = moveMe->g = moveMe->b = 255;
    ba4c:	|  |   movea.l 4(sp),a0
    ba50:	|  |   st 128(a0)
    ba54:	|  |   movea.l 4(sp),a0
    ba58:	|  |   move.b 128(a0),d0
    ba5c:	|  |   movea.l 4(sp),a0
    ba60:	|  |   move.b d0,127(a0)
    ba64:	|  |   movea.l 4(sp),a0
    ba68:	|  |   move.b 127(a0),d0
    ba6c:	|  |   movea.l 4(sp),a0
    ba70:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    ba74:	|  |   movea.l 4(sp),a0
    ba78:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    ba7e:	|  |   movea.l 4(sp),a0
    ba82:	|  |   clr.b 130(a0)
			break;
    ba86:	|  +-- bra.s bafc <setMyDrawMode+0x518>
		case drawModeGlow4:
			moveMe->r = moveMe->g = moveMe->b = 255;
    ba88:	|  |   movea.l 4(sp),a0
    ba8c:	|  |   st 128(a0)
    ba90:	|  |   movea.l 4(sp),a0
    ba94:	|  |   move.b 128(a0),d0
    ba98:	|  |   movea.l 4(sp),a0
    ba9c:	|  |   move.b d0,127(a0)
    baa0:	|  |   movea.l 4(sp),a0
    baa4:	|  |   move.b 127(a0),d0
    baa8:	|  |   movea.l 4(sp),a0
    baac:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    bab0:	|  |   movea.l 4(sp),a0
    bab4:	|  |   st 129(a0)
			moveMe->transparency = 0;
    bab8:	|  |   movea.l 4(sp),a0
    babc:	|  |   clr.b 130(a0)
			break;
    bac0:	|  +-- bra.s bafc <setMyDrawMode+0x518>
		default:
			moveMe->r = moveMe->g = moveMe->b = 0;
    bac2:	\--|-> movea.l 4(sp),a0
    bac6:	   |   clr.b 128(a0)
    baca:	   |   movea.l 4(sp),a0
    bace:	   |   move.b 128(a0),d0
    bad2:	   |   movea.l 4(sp),a0
    bad6:	   |   move.b d0,127(a0)
    bada:	   |   movea.l 4(sp),a0
    bade:	   |   move.b 127(a0),d0
    bae2:	   |   movea.l 4(sp),a0
    bae6:	   |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    baea:	   |   movea.l 4(sp),a0
    baee:	   |   clr.b 129(a0)
			moveMe->transparency = 0;
    baf2:	   |   movea.l 4(sp),a0
    baf6:	   |   clr.b 130(a0)
			break;
    bafa:	   |   nop
	}
}
    bafc:	   \-> nop
    bafe:	       rts

0000bb00 <shufflePeople>:

void shufflePeople () {
    bb00:	             lea -20(sp),sp
	struct onScreenPerson ** thisReference = &allPeople;
    bb04:	             move.l #117294,16(sp)
	struct onScreenPerson * A, * B;

	if (!allPeople) return;
    bb0c:	             move.l 1ca2e <allPeople>,d0
    bb12:	/----------- beq.w bbe8 <shufflePeople+0xe8>

	while ((*thisReference)->next) {
    bb16:	|     /----- bra.w bbd8 <shufflePeople+0xd8>
		float y1 = (*thisReference)->y;
    bb1a:	|  /--|----> movea.l 16(sp),a0
    bb1e:	|  |  |      movea.l (a0),a0
    bb20:	|  |  |      move.l 4(a0),12(sp)
		if ((*thisReference)->extra & EXTRA_FRONT) y1 += 1000;
    bb26:	|  |  |      movea.l 16(sp),a0
    bb2a:	|  |  |      movea.l (a0),a0
    bb2c:	|  |  |      move.l 118(a0),d0
    bb30:	|  |  |      moveq #1,d1
    bb32:	|  |  |      and.l d1,d0
    bb34:	|  |  |  /-- beq.s bb4c <shufflePeople+0x4c>
    bb36:	|  |  |  |   move.l #1148846080,-(sp)
    bb3c:	|  |  |  |   move.l 16(sp),-(sp)
    bb40:	|  |  |  |   jsr 17442 <__addsf3>
    bb46:	|  |  |  |   addq.l #8,sp
    bb48:	|  |  |  |   move.l d0,12(sp)

		float y2 = (*thisReference)->next->y;
    bb4c:	|  |  |  \-> movea.l 16(sp),a0
    bb50:	|  |  |      movea.l (a0),a0
    bb52:	|  |  |      movea.l 36(a0),a0
    bb56:	|  |  |      move.l 4(a0),8(sp)
		if ((*thisReference)->next->extra & EXTRA_FRONT) y2 += 1000;
    bb5c:	|  |  |      movea.l 16(sp),a0
    bb60:	|  |  |      movea.l (a0),a0
    bb62:	|  |  |      movea.l 36(a0),a0
    bb66:	|  |  |      move.l 118(a0),d0
    bb6a:	|  |  |      moveq #1,d1
    bb6c:	|  |  |      and.l d1,d0
    bb6e:	|  |  |  /-- beq.s bb86 <shufflePeople+0x86>
    bb70:	|  |  |  |   move.l #1148846080,-(sp)
    bb76:	|  |  |  |   move.l 12(sp),-(sp)
    bb7a:	|  |  |  |   jsr 17442 <__addsf3>
    bb80:	|  |  |  |   addq.l #8,sp
    bb82:	|  |  |  |   move.l d0,8(sp)

		if (y1 > y2) {
    bb86:	|  |  |  \-> move.l 8(sp),-(sp)
    bb8a:	|  |  |      move.l 16(sp),-(sp)
    bb8e:	|  |  |      jsr 177f2 <__gtsf2>
    bb94:	|  |  |      addq.l #8,sp
    bb96:	|  |  |      tst.l d0
    bb98:	|  |  |  /-- ble.s bbca <shufflePeople+0xca>
			A = (*thisReference);
    bb9a:	|  |  |  |   movea.l 16(sp),a0
    bb9e:	|  |  |  |   move.l (a0),4(sp)
			B = (*thisReference)->next;
    bba2:	|  |  |  |   movea.l 16(sp),a0
    bba6:	|  |  |  |   movea.l (a0),a0
    bba8:	|  |  |  |   move.l 36(a0),(sp)
			A->next = B->next;
    bbac:	|  |  |  |   movea.l (sp),a0
    bbae:	|  |  |  |   move.l 36(a0),d0
    bbb2:	|  |  |  |   movea.l 4(sp),a0
    bbb6:	|  |  |  |   move.l d0,36(a0)
			B->next = A;
    bbba:	|  |  |  |   movea.l (sp),a0
    bbbc:	|  |  |  |   move.l 4(sp),36(a0)
			(*thisReference) = B;
    bbc2:	|  |  |  |   movea.l 16(sp),a0
    bbc6:	|  |  |  |   move.l (sp),(a0)
    bbc8:	|  |  +--|-- bra.s bbd8 <shufflePeople+0xd8>
		} else {
			thisReference = &((*thisReference)->next);
    bbca:	|  |  |  \-> movea.l 16(sp),a0
    bbce:	|  |  |      move.l (a0),d0
    bbd0:	|  |  |      moveq #36,d1
    bbd2:	|  |  |      add.l d0,d1
    bbd4:	|  |  |      move.l d1,16(sp)
	while ((*thisReference)->next) {
    bbd8:	|  |  \----> movea.l 16(sp),a0
    bbdc:	|  |         movea.l (a0),a0
    bbde:	|  |         move.l 36(a0),d0
    bbe2:	|  \-------- bne.w bb1a <shufflePeople+0x1a>
    bbe6:	|        /-- bra.s bbea <shufflePeople+0xea>
	if (!allPeople) return;
    bbe8:	\--------|-> nop
		}
	}
}
    bbea:	         \-> lea 20(sp),sp
    bbee:	             rts

0000bbf0 <setCharacterWalkSpeed>:


BOOL setCharacterWalkSpeed (int f, int objNum) {
    bbf0:	       subq.l #4,sp
	if (f <= 0) return FALSE;
    bbf2:	       tst.l 8(sp)
    bbf6:	   /-- bgt.s bbfc <setCharacterWalkSpeed+0xc>
    bbf8:	   |   clr.w d0
    bbfa:	/--|-- bra.s bc1a <setCharacterWalkSpeed+0x2a>
	struct onScreenPerson * moveMe = findPerson (objNum);
    bbfc:	|  \-> move.l 12(sp),-(sp)
    bc00:	|      jsr a648 <findPerson>
    bc06:	|      addq.l #4,sp
    bc08:	|      move.l d0,(sp)
	if (! moveMe) return FALSE;
    bc0a:	|  /-- bne.s bc10 <setCharacterWalkSpeed+0x20>
    bc0c:	|  |   clr.w d0
    bc0e:	+--|-- bra.s bc1a <setCharacterWalkSpeed+0x2a>
	moveMe -> walkSpeed = f;
    bc10:	|  \-> movea.l (sp),a0
    bc12:	|      move.l 8(sp),28(a0)
	return TRUE;
    bc18:	|      moveq #1,d0
}
    bc1a:	\----> addq.l #4,sp
    bc1c:	       rts

0000bc1e <setPersonExtra>:

BOOL setPersonExtra (int thisNum, int extra) {
    bc1e:	       subq.l #4,sp
    struct onScreenPerson * thisPerson = findPerson(thisNum);
    bc20:	       move.l 8(sp),-(sp)
    bc24:	       jsr a648 <findPerson>
    bc2a:	       addq.l #4,sp
    bc2c:	       move.l d0,(sp)
    if (thisPerson) {
    bc2e:	/----- beq.s bc4e <setPersonExtra+0x30>
        thisPerson -> extra = extra;
    bc30:	|      movea.l (sp),a0
    bc32:	|      move.l 12(sp),118(a0)
        if (extra & EXTRA_NOSCALE) thisPerson -> scale = 1;
    bc38:	|      moveq #2,d0
    bc3a:	|      and.l 12(sp),d0
    bc3e:	|  /-- beq.s bc4a <setPersonExtra+0x2c>
    bc40:	|  |   movea.l (sp),a0
    bc42:	|  |   move.l #1065353216,32(a0)
        return TRUE;
    bc4a:	|  \-> moveq #1,d0
    bc4c:	|  /-- bra.s bc50 <setPersonExtra+0x32>
    }
    return FALSE;
    bc4e:	\--|-> clr.w d0
}
    bc50:	   \-> addq.l #4,sp
    bc52:	       rts

0000bc54 <setScale>:


void setScale (short int h, short int d) {
    bc54:	subq.l #4,sp
    bc56:	move.l 8(sp),d1
    bc5a:	move.l 12(sp),d0
    bc5e:	move.w d1,d1
    bc60:	move.w d1,2(sp)
    bc64:	move.w d0,d0
    bc66:	move.w d0,(sp)
	scaleHorizon = h;
    bc68:	move.w 2(sp),1c35c <scaleHorizon>
	scaleDivide = d;
    bc70:	move.w (sp),1c35e <scaleDivide>
}
    bc76:	nop
    bc78:	addq.l #4,sp
    bc7a:	rts

0000bc7c <setShown>:

void setShown (BOOL h, int ob) {
    bc7c:	    subq.l #8,sp
    bc7e:	    move.l 12(sp),d0
    bc82:	    move.w d0,d0
    bc84:	    move.w d0,2(sp)
	struct onScreenPerson * moveMe = findPerson (ob);
    bc88:	    move.l 16(sp),-(sp)
    bc8c:	    jsr a648 <findPerson>
    bc92:	    addq.l #4,sp
    bc94:	    move.l d0,4(sp)
	if (moveMe) moveMe -> show = h;
    bc98:	/-- beq.s bca4 <setShown+0x28>
    bc9a:	|   movea.l 4(sp),a0
    bc9e:	|   move.w 2(sp),104(a0)
}
    bca4:	\-> nop
    bca6:	    addq.l #8,sp
    bca8:	    rts

0000bcaa <spinStep>:

void spinStep (struct onScreenPerson * thisPerson) {
    bcaa:	       subq.l #8,sp
    bcac:	       move.l d2,-(sp)
	int diff = (thisPerson->angle + 360) - thisPerson->wantAngle;
    bcae:	       movea.l 16(sp),a0
    bcb2:	       move.l 92(a0),d0
    bcb6:	       move.l d0,d1
    bcb8:	       addi.l #360,d1
    bcbe:	       movea.l 16(sp),a0
    bcc2:	       move.l 96(a0),d0
    bcc6:	       move.l d1,d2
    bcc8:	       sub.l d0,d2
    bcca:	       move.l d2,8(sp)
	int eachSlice = thisPerson->spinSpeed ? thisPerson->spinSpeed : (360 / thisPerson->myPersona->numDirections);
    bcce:	       movea.l 16(sp),a0
    bcd2:	       move.l 122(a0),d0
    bcd6:	   /-- beq.s bce2 <spinStep+0x38>
    bcd8:	   |   movea.l 16(sp),a0
    bcdc:	   |   move.l 122(a0),d0
    bce0:	/--|-- bra.s bcfc <spinStep+0x52>
    bce2:	|  \-> movea.l 16(sp),a0
    bce6:	|      movea.l 80(a0),a0
    bcea:	|      move.l 4(a0),d0
    bcee:	|      move.l d0,-(sp)
    bcf0:	|      pea 168 <decodeFilename+0x50>
    bcf4:	|      jsr 17c86 <__divsi3>
    bcfa:	|      addq.l #8,sp
    bcfc:	\----> move.l d0,4(sp)
	while (diff > 180) {
    bd00:	   /-- bra.s bd0a <spinStep+0x60>
		diff -= 360;
    bd02:	/--|-> addi.l #-360,8(sp)
	while (diff > 180) {
    bd0a:	|  \-> cmpi.l #180,8(sp)
    bd12:	\----- bgt.s bd02 <spinStep+0x58>
	}

	if (diff >= eachSlice) {
    bd14:	       move.l 8(sp),d0
    bd18:	       cmp.l 4(sp),d0
    bd1c:	   /-- blt.s bd3a <spinStep+0x90>
		turnMeAngle(thisPerson, thisPerson->angle - eachSlice);
    bd1e:	   |   movea.l 16(sp),a0
    bd22:	   |   move.l 92(a0),d0
    bd26:	   |   sub.l 4(sp),d0
    bd2a:	   |   move.l d0,-(sp)
    bd2c:	   |   move.l 20(sp),-(sp)
    bd30:	   |   jsr be1a <turnMeAngle>
    bd36:	   |   addq.l #8,sp
		turnMeAngle(thisPerson, thisPerson->angle + eachSlice);
	} else {
		turnMeAngle(thisPerson, thisPerson->wantAngle);
		thisPerson->spinning = FALSE;
	}
}
    bd38:	/--|-- bra.s bd80 <spinStep+0xd6>
	} else if (diff <= -eachSlice) {
    bd3a:	|  \-> move.l 4(sp),d0
    bd3e:	|      neg.l d0
    bd40:	|      cmp.l 8(sp),d0
    bd44:	|  /-- blt.s bd62 <spinStep+0xb8>
		turnMeAngle(thisPerson, thisPerson->angle + eachSlice);
    bd46:	|  |   movea.l 16(sp),a0
    bd4a:	|  |   move.l 92(a0),d0
    bd4e:	|  |   add.l 4(sp),d0
    bd52:	|  |   move.l d0,-(sp)
    bd54:	|  |   move.l 20(sp),-(sp)
    bd58:	|  |   jsr be1a <turnMeAngle>
    bd5e:	|  |   addq.l #8,sp
}
    bd60:	+--|-- bra.s bd80 <spinStep+0xd6>
		turnMeAngle(thisPerson, thisPerson->wantAngle);
    bd62:	|  \-> movea.l 16(sp),a0
    bd66:	|      move.l 96(a0),d0
    bd6a:	|      move.l d0,-(sp)
    bd6c:	|      move.l 20(sp),-(sp)
    bd70:	|      jsr be1a <turnMeAngle>
    bd76:	|      addq.l #8,sp
		thisPerson->spinning = FALSE;
    bd78:	|      movea.l 16(sp),a0
    bd7c:	|      clr.w 66(a0)
}
    bd80:	\----> nop
    bd82:	       move.l (sp)+,d2
    bd84:	       addq.l #8,sp
    bd86:	       rts

0000bd88 <stopPerson>:


BOOL stopPerson (int o) {
    bd88:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(o);
    bd8a:	       move.l 8(sp),-(sp)
    bd8e:	       jsr a648 <findPerson>
    bd94:	       addq.l #4,sp
    bd96:	       move.l d0,(sp)
    if (moveMe)
    bd98:	/----- beq.s bdd6 <stopPerson+0x4e>
        if (moveMe -> continueAfterWalking) {
    bd9a:	|      movea.l (sp),a0
    bd9c:	|      move.l 68(a0),d0
    bda0:	+----- beq.s bdd6 <stopPerson+0x4e>
            abortFunction(moveMe -> continueAfterWalking);
    bda2:	|      movea.l (sp),a0
    bda4:	|      move.l 68(a0),d0
    bda8:	|      move.l d0,-(sp)
    bdaa:	|      jsr 473a <abortFunction>
    bdb0:	|      addq.l #4,sp
            moveMe -> continueAfterWalking = NULL;
    bdb2:	|      movea.l (sp),a0
    bdb4:	|      clr.l 68(a0)
            moveMe -> walking = FALSE;
    bdb8:	|      movea.l (sp),a0
    bdba:	|      clr.w 64(a0)
            moveMe -> spinning = FALSE;
    bdbe:	|      movea.l (sp),a0
    bdc0:	|      clr.w 66(a0)
            setFrames(moveMe, ANI_STAND);
    bdc4:	|      clr.l -(sp)
    bdc6:	|      move.l 4(sp),-(sp)
    bdca:	|      jsr 8192 <setFrames>
    bdd0:	|      addq.l #8,sp
            return TRUE;
    bdd2:	|      moveq #1,d0
    bdd4:	|  /-- bra.s bdd8 <stopPerson+0x50>
        }
    return FALSE;
    bdd6:	\--|-> clr.w d0
}
    bdd8:	   \-> addq.l #4,sp
    bdda:	       rts

0000bddc <timeForAnim>:


int timeForAnim (struct personaAnimation * fram) {
    bddc:	       subq.l #8,sp
	int total = 0;
    bdde:	       clr.l 4(sp)
	for (int a = 0; a < fram -> numFrames; a ++) {
    bde2:	       clr.l (sp)
    bde4:	   /-- bra.s be06 <timeForAnim+0x2a>
		total += fram -> frames[a].howMany;
    bde6:	/--|-> movea.l 12(sp),a0
    bdea:	|  |   movea.l 4(a0),a0
    bdee:	|  |   move.l (sp),d1
    bdf0:	|  |   move.l d1,d0
    bdf2:	|  |   add.l d0,d0
    bdf4:	|  |   add.l d1,d0
    bdf6:	|  |   add.l d0,d0
    bdf8:	|  |   add.l d0,d0
    bdfa:	|  |   adda.l d0,a0
    bdfc:	|  |   move.l 4(a0),d0
    be00:	|  |   add.l d0,4(sp)
	for (int a = 0; a < fram -> numFrames; a ++) {
    be04:	|  |   addq.l #1,(sp)
    be06:	|  \-> movea.l 12(sp),a0
    be0a:	|      move.l 8(a0),d0
    be0e:	|      cmp.l (sp),d0
    be10:	\----- bgt.s bde6 <timeForAnim+0xa>
	}
	return total;
    be12:	       move.l 4(sp),d0
}
    be16:	       addq.l #8,sp
    be18:	       rts

0000be1a <turnMeAngle>:

void turnMeAngle (struct onScreenPerson * thisPerson, int direc) {
    be1a:	       subq.l #4,sp
	int d = thisPerson -> myPersona -> numDirections;
    be1c:	       movea.l 8(sp),a0
    be20:	       movea.l 80(a0),a0
    be24:	       move.l 4(a0),(sp)
	thisPerson -> angle = direc;
    be28:	       movea.l 8(sp),a0
    be2c:	       move.l 12(sp),92(a0)
	direc += (180 / d) + 180 + thisPerson -> angleOffset;
    be32:	       move.l (sp),-(sp)
    be34:	       pea b4 <_start+0xb4>
    be38:	       jsr 17c86 <__divsi3>
    be3e:	       addq.l #8,sp
    be40:	       move.l d0,d1
    be42:	       addi.l #180,d1
    be48:	       movea.l 8(sp),a0
    be4c:	       move.l 100(a0),d0
    be50:	       add.l d1,d0
    be52:	       add.l d0,12(sp)
	while (direc >= 360) direc -= 360;
    be56:	   /-- bra.s be60 <turnMeAngle+0x46>
    be58:	/--|-> addi.l #-360,12(sp)
    be60:	|  \-> cmpi.l #359,12(sp)
    be68:	\----- bgt.s be58 <turnMeAngle+0x3e>
	thisPerson -> direction = (direc * d) / 360;
    be6a:	       move.l (sp),-(sp)
    be6c:	       move.l 16(sp),-(sp)
    be70:	       jsr 17c08 <__mulsi3>
    be76:	       addq.l #8,sp
    be78:	       pea 168 <decodeFilename+0x50>
    be7c:	       move.l d0,-(sp)
    be7e:	       jsr 17c86 <__divsi3>
    be84:	       addq.l #8,sp
    be86:	       movea.l 8(sp),a0
    be8a:	       move.l d0,106(a0)
}
    be8e:	       nop
    be90:	       addq.l #4,sp
    be92:	       rts

0000be94 <turnPersonToFace>:

BOOL turnPersonToFace (int thisNum, int direc) {
    be94:	          subq.l #4,sp
    struct onScreenPerson * thisPerson = findPerson(thisNum);
    be96:	          move.l 8(sp),-(sp)
    be9a:	          jsr a648 <findPerson>
    bea0:	          addq.l #4,sp
    bea2:	          move.l d0,(sp)
    if (thisPerson) {
    bea4:	/-------- beq.s bf04 <turnPersonToFace+0x70>
        if (thisPerson -> continueAfterWalking) abortFunction(thisPerson -> continueAfterWalking);
    bea6:	|         movea.l (sp),a0
    bea8:	|         move.l 68(a0),d0
    beac:	|     /-- beq.s bebe <turnPersonToFace+0x2a>
    beae:	|     |   movea.l (sp),a0
    beb0:	|     |   move.l 68(a0),d0
    beb4:	|     |   move.l d0,-(sp)
    beb6:	|     |   jsr 473a <abortFunction>
    bebc:	|     |   addq.l #4,sp
        thisPerson -> continueAfterWalking = NULL;
    bebe:	|     \-> movea.l (sp),a0
    bec0:	|         clr.l 68(a0)
        thisPerson -> walking = FALSE;
    bec4:	|         movea.l (sp),a0
    bec6:	|         clr.w 64(a0)
        thisPerson -> spinning = FALSE;
    beca:	|         movea.l (sp),a0
    becc:	|         clr.w 66(a0)
        turnMeAngle(thisPerson, direc);
    bed0:	|         move.l 12(sp),-(sp)
    bed4:	|         move.l 4(sp),-(sp)
    bed8:	|         jsr be1a <turnMeAngle>
    bede:	|         addq.l #8,sp
        setFrames(thisPerson, (thisPerson == speech->currentTalker) ? ANI_TALK : ANI_STAND);
    bee0:	|         movea.l 1ca26 <speech>,a0
    bee6:	|         move.l (a0),d0
    bee8:	|         cmp.l (sp),d0
    beea:	|  /----- bne.s bef0 <turnPersonToFace+0x5c>
    beec:	|  |      moveq #2,d0
    beee:	|  |  /-- bra.s bef2 <turnPersonToFace+0x5e>
    bef0:	|  \--|-> moveq #0,d0
    bef2:	|     \-> move.l d0,-(sp)
    bef4:	|         move.l 4(sp),-(sp)
    bef8:	|         jsr 8192 <setFrames>
    befe:	|         addq.l #8,sp
        return TRUE;
    bf00:	|         moveq #1,d0
    bf02:	|     /-- bra.s bf06 <turnPersonToFace+0x72>
    }
    return FALSE;
    bf04:	\-----|-> clr.w d0
}
    bf06:	      \-> addq.l #4,sp
    bf08:	          rts

0000bf0a <walkAllPeople>:

void walkAllPeople() {
    bf0a:	             subq.l #4,sp
	struct onScreenPerson *thisPerson = allPeople;
    bf0c:	             move.l 1ca2e <allPeople>,(sp)

	while (thisPerson) {
    bf12:	   /-------- bra.s bf82 <walkAllPeople+0x78>
		if (thisPerson->walking) {
    bf14:	/--|-------> movea.l (sp),a0
    bf16:	|  |         move.w 64(a0),d0
    bf1a:	|  |     /-- beq.s bf2e <walkAllPeople+0x24>
			walkMe(thisPerson, TRUE);
    bf1c:	|  |     |   pea 1 <_start+0x1>
    bf20:	|  |     |   move.l 4(sp),-(sp)
    bf24:	|  |     |   jsr bf8e <walkMe>
    bf2a:	|  |     |   addq.l #8,sp
    bf2c:	|  |  /--|-- bra.s bf4e <walkAllPeople+0x44>
		} else if (thisPerson->spinning) {
    bf2e:	|  |  |  \-> movea.l (sp),a0
    bf30:	|  |  |      move.w 66(a0),d0
    bf34:	|  |  +----- beq.s bf4e <walkAllPeople+0x44>
			spinStep(thisPerson);
    bf36:	|  |  |      move.l (sp),-(sp)
    bf38:	|  |  |      jsr bcaa <spinStep>
    bf3e:	|  |  |      addq.l #4,sp
			setFrames(thisPerson, ANI_STAND);
    bf40:	|  |  |      clr.l -(sp)
    bf42:	|  |  |      move.l 4(sp),-(sp)
    bf46:	|  |  |      jsr 8192 <setFrames>
    bf4c:	|  |  |      addq.l #8,sp
		}
		if ((!thisPerson->walking) && (!thisPerson->spinning) && thisPerson->continueAfterWalking) {
    bf4e:	|  |  \----> movea.l (sp),a0
    bf50:	|  |         move.w 64(a0),d0
    bf54:	|  |     /-- bne.s bf7c <walkAllPeople+0x72>
    bf56:	|  |     |   movea.l (sp),a0
    bf58:	|  |     |   move.w 66(a0),d0
    bf5c:	|  |     +-- bne.s bf7c <walkAllPeople+0x72>
    bf5e:	|  |     |   movea.l (sp),a0
    bf60:	|  |     |   move.l 68(a0),d0
    bf64:	|  |     +-- beq.s bf7c <walkAllPeople+0x72>
			restartFunction(thisPerson->continueAfterWalking);
    bf66:	|  |     |   movea.l (sp),a0
    bf68:	|  |     |   move.l 68(a0),d0
    bf6c:	|  |     |   move.l d0,-(sp)
    bf6e:	|  |     |   jsr 68aa <restartFunction>
    bf74:	|  |     |   addq.l #4,sp
			thisPerson->continueAfterWalking = NULL;
    bf76:	|  |     |   movea.l (sp),a0
    bf78:	|  |     |   clr.l 68(a0)
		}
		thisPerson = thisPerson->next;
    bf7c:	|  |     \-> movea.l (sp),a0
    bf7e:	|  |         move.l 36(a0),(sp)
	while (thisPerson) {
    bf82:	|  \-------> tst.l (sp)
    bf84:	\----------- bne.s bf14 <walkAllPeople+0xa>
	}
}
    bf86:	             nop
    bf88:	             nop
    bf8a:	             addq.l #4,sp
    bf8c:	             rts

0000bf8e <walkMe>:

BOOL walkMe (struct onScreenPerson * thisPerson, BOOL move) {
    bf8e:	                lea -20(sp),sp
    bf92:	                move.l d3,-(sp)
    bf94:	                move.l d2,-(sp)
    bf96:	                move.l 36(sp),d0
    bf9a:	                move.w d0,d0
    bf9c:	                move.w d0,10(sp)
	float xDiff, yDiff, maxDiff, s;

	if (move == -1) move = TRUE;  // Initialize default value for move
    bfa0:	                cmpi.w #-1,10(sp)
    bfa6:	/-------------- bne.s bfae <walkMe+0x20>
    bfa8:	|               move.w #1,10(sp)

	for (;;) {
		xDiff = thisPerson->thisStepX - thisPerson->x;
    bfae:	>-------------> movea.l 32(sp),a0
    bfb2:	|               move.l 48(a0),d0
    bfb6:	|               move.l d0,-(sp)
    bfb8:	|               jsr 17686 <__floatsisf>
    bfbe:	|               addq.l #4,sp
    bfc0:	|               move.l d0,d1
    bfc2:	|               movea.l 32(sp),a0
    bfc6:	|               move.l (a0),d0
    bfc8:	|               move.l d0,-(sp)
    bfca:	|               move.l d1,-(sp)
    bfcc:	|               jsr 1797a <__subsf3>
    bfd2:	|               addq.l #8,sp
    bfd4:	|               move.l d0,20(sp)
		yDiff = (thisPerson->thisStepY - thisPerson->y) * 2;
    bfd8:	|               movea.l 32(sp),a0
    bfdc:	|               move.l 52(a0),d0
    bfe0:	|               move.l d0,-(sp)
    bfe2:	|               jsr 17686 <__floatsisf>
    bfe8:	|               addq.l #4,sp
    bfea:	|               move.l d0,d1
    bfec:	|               movea.l 32(sp),a0
    bff0:	|               move.l 4(a0),d0
    bff4:	|               move.l d0,-(sp)
    bff6:	|               move.l d1,-(sp)
    bff8:	|               jsr 1797a <__subsf3>
    bffe:	|               addq.l #8,sp
    c000:	|               move.l d0,-(sp)
    c002:	|               move.l d0,-(sp)
    c004:	|               jsr 17442 <__addsf3>
    c00a:	|               addq.l #8,sp
    c00c:	|               move.l d0,16(sp)
		s = thisPerson->scale * thisPerson->walkSpeed;
    c010:	|               movea.l 32(sp),a0
    c014:	|               move.l 32(a0),d2
    c018:	|               movea.l 32(sp),a0
    c01c:	|               move.l 28(a0),d0
    c020:	|               move.l d0,-(sp)
    c022:	|               jsr 17686 <__floatsisf>
    c028:	|               addq.l #4,sp
    c02a:	|               move.l d0,-(sp)
    c02c:	|               move.l d2,-(sp)
    c02e:	|               jsr 17738 <__mulsf3>
    c034:	|               addq.l #8,sp
    c036:	|               move.l d0,24(sp)
		if (s < 0.2) s = 0.2;
    c03a:	|               move.l 24(sp),-(sp)
    c03e:	|               jsr 175a8 <__extendsfdf2>
    c044:	|               addq.l #4,sp
    c046:	|               move.l #-1717986918,-(sp)
    c04c:	|               move.l #1070176665,-(sp)
    c052:	|               move.l d1,-(sp)
    c054:	|               move.l d0,-(sp)
    c056:	|               jsr 1785e <__ltdf2>
    c05c:	|               lea 16(sp),sp
    c060:	|               tst.l d0
    c062:	|           /-- bge.s c06c <walkMe+0xde>
    c064:	|           |   move.l #1045220557,24(sp)

		maxDiff = (TF_abs(xDiff) >= TF_abs(yDiff)) ? TF_abs(xDiff) : TF_abs(yDiff);
    c06c:	|           \-> move.l 20(sp),-(sp)
    c070:	|               jsr 1761e <__fixsfsi>
    c076:	|               addq.l #4,sp
    c078:	|               move.l d0,-(sp)
    c07a:	|               jsr 9238 <TF_abs>
    c080:	|               addq.l #4,sp
    c082:	|               move.l d0,d2
    c084:	|               move.l 16(sp),-(sp)
    c088:	|               jsr 1761e <__fixsfsi>
    c08e:	|               addq.l #4,sp
    c090:	|               move.l d0,-(sp)
    c092:	|               jsr 9238 <TF_abs>
    c098:	|               addq.l #4,sp
    c09a:	|               cmp.l d2,d0
    c09c:	|        /----- bgt.s c0c0 <walkMe+0x132>
    c09e:	|        |      move.l 20(sp),-(sp)
    c0a2:	|        |      jsr 1761e <__fixsfsi>
    c0a8:	|        |      addq.l #4,sp
    c0aa:	|        |      move.l d0,-(sp)
    c0ac:	|        |      jsr 9238 <TF_abs>
    c0b2:	|        |      addq.l #4,sp
    c0b4:	|        |      move.l d0,-(sp)
    c0b6:	|        |      jsr 17686 <__floatsisf>
    c0bc:	|        |      addq.l #4,sp
    c0be:	|        |  /-- bra.s c0e0 <walkMe+0x152>
    c0c0:	|        \--|-> move.l 16(sp),-(sp)
    c0c4:	|           |   jsr 1761e <__fixsfsi>
    c0ca:	|           |   addq.l #4,sp
    c0cc:	|           |   move.l d0,-(sp)
    c0ce:	|           |   jsr 9238 <TF_abs>
    c0d4:	|           |   addq.l #4,sp
    c0d6:	|           |   move.l d0,-(sp)
    c0d8:	|           |   jsr 17686 <__floatsisf>
    c0de:	|           |   addq.l #4,sp
    c0e0:	|           \-> move.l d0,12(sp)

		if (TF_abs(maxDiff) > s) {
    c0e4:	|               move.l 12(sp),-(sp)
    c0e8:	|               jsr 1761e <__fixsfsi>
    c0ee:	|               addq.l #4,sp
    c0f0:	|               move.l d0,-(sp)
    c0f2:	|               jsr 9238 <TF_abs>
    c0f8:	|               addq.l #4,sp
    c0fa:	|               move.l d0,-(sp)
    c0fc:	|               jsr 17686 <__floatsisf>
    c102:	|               addq.l #4,sp
    c104:	|               move.l d0,-(sp)
    c106:	|               move.l 28(sp),-(sp)
    c10a:	|               jsr 178ac <__ltsf2>
    c110:	|               addq.l #8,sp
    c112:	|               tst.l d0
    c114:	|        /----- bge.w c1c6 <walkMe+0x238>
			if (thisPerson->spinning) {
    c118:	|        |      movea.l 32(sp),a0
    c11c:	|        |      move.w 66(a0),d0
    c120:	|        |  /-- beq.s c13e <walkMe+0x1b0>
				spinStep(thisPerson);
    c122:	|        |  |   move.l 32(sp),-(sp)
    c126:	|        |  |   jsr bcaa <spinStep>
    c12c:	|        |  |   addq.l #4,sp
				setFrames(thisPerson, ANI_WALK);
    c12e:	|        |  |   pea 1 <_start+0x1>
    c132:	|        |  |   move.l 36(sp),-(sp)
    c136:	|        |  |   jsr 8192 <setFrames>
    c13c:	|        |  |   addq.l #8,sp
			}
			s = maxDiff / s;
    c13e:	|        |  \-> move.l 24(sp),-(sp)
    c142:	|        |      move.l 16(sp),-(sp)
    c146:	|        |      jsr 1753c <__divsf3>
    c14c:	|        |      addq.l #8,sp
    c14e:	|        |      move.l d0,24(sp)
			if (move)
    c152:	|        |      tst.w 10(sp)
    c156:	|        |  /-- beq.s c1c0 <walkMe+0x232>
				moveAndScale(thisPerson,
							 thisPerson->x + xDiff / s,
							 thisPerson->y + yDiff / (s * 2));
    c158:	|        |  |   movea.l 32(sp),a0
    c15c:	|        |  |   move.l 4(a0),d2
    c160:	|        |  |   move.l 24(sp),d0
    c164:	|        |  |   move.l d0,-(sp)
    c166:	|        |  |   move.l d0,-(sp)
    c168:	|        |  |   jsr 17442 <__addsf3>
    c16e:	|        |  |   addq.l #8,sp
    c170:	|        |  |   move.l d0,-(sp)
    c172:	|        |  |   move.l 20(sp),-(sp)
    c176:	|        |  |   jsr 1753c <__divsf3>
    c17c:	|        |  |   addq.l #8,sp
				moveAndScale(thisPerson,
    c17e:	|        |  |   move.l d0,-(sp)
    c180:	|        |  |   move.l d2,-(sp)
    c182:	|        |  |   jsr 17442 <__addsf3>
    c188:	|        |  |   addq.l #8,sp
    c18a:	|        |  |   move.l d0,d2
							 thisPerson->x + xDiff / s,
    c18c:	|        |  |   movea.l 32(sp),a0
    c190:	|        |  |   move.l (a0),d3
    c192:	|        |  |   move.l 24(sp),-(sp)
    c196:	|        |  |   move.l 24(sp),-(sp)
    c19a:	|        |  |   jsr 1753c <__divsf3>
    c1a0:	|        |  |   addq.l #8,sp
				moveAndScale(thisPerson,
    c1a2:	|        |  |   move.l d0,-(sp)
    c1a4:	|        |  |   move.l d3,-(sp)
    c1a6:	|        |  |   jsr 17442 <__addsf3>
    c1ac:	|        |  |   addq.l #8,sp
    c1ae:	|        |  |   move.l d2,-(sp)
    c1b0:	|        |  |   move.l d0,-(sp)
    c1b2:	|        |  |   move.l 40(sp),-(sp)
    c1b6:	|        |  |   jsr ad90 <moveAndScale>
    c1bc:	|        |  |   lea 12(sp),sp
			return TRUE;
    c1c0:	|        |  \-> moveq #1,d0
    c1c2:	|  /-----|----- bra.w c274 <walkMe+0x2e6>
		}

		if (thisPerson->inPoly == -1) {
    c1c6:	|  |     \----> movea.l 32(sp),a0
    c1ca:	|  |            move.l 56(a0),d0
    c1ce:	|  |            moveq #-1,d1
    c1d0:	|  |            cmp.l d0,d1
    c1d2:	|  |        /-- bne.s c20a <walkMe+0x27c>
			if (thisPerson->directionWhenDoneWalking != -1) {
    c1d4:	|  |        |   movea.l 32(sp),a0
    c1d8:	|  |        |   move.l 110(a0),d0
    c1dc:	|  |        |   moveq #-1,d1
    c1de:	|  |        |   cmp.l d0,d1
    c1e0:	|  |  /-----|-- beq.s c21e <walkMe+0x290>
				thisPerson->wantAngle = thisPerson->directionWhenDoneWalking;
    c1e2:	|  |  |     |   movea.l 32(sp),a0
    c1e6:	|  |  |     |   move.l 110(a0),d0
    c1ea:	|  |  |     |   movea.l 32(sp),a0
    c1ee:	|  |  |     |   move.l d0,96(a0)
				thisPerson->spinning = TRUE;
    c1f2:	|  |  |     |   movea.l 32(sp),a0
    c1f6:	|  |  |     |   move.w #1,66(a0)
				spinStep(thisPerson);
    c1fc:	|  |  |     |   move.l 32(sp),-(sp)
    c200:	|  |  |     |   jsr bcaa <spinStep>
    c206:	|  |  |     |   addq.l #4,sp
			}
			break;
    c208:	|  |  +-----|-- bra.s c21e <walkMe+0x290>
		}
		if (!doBorderStuff(thisPerson)) break;
    c20a:	|  |  |     \-> move.l 32(sp),-(sp)
    c20e:	|  |  |         jsr 99aa <doBorderStuff>
    c214:	|  |  |         addq.l #4,sp
    c216:	|  |  |         tst.w d0
    c218:	|  |  |  /----- beq.s c222 <walkMe+0x294>
		xDiff = thisPerson->thisStepX - thisPerson->x;
    c21a:	\--|--|--|----- bra.w bfae <walkMe+0x20>
			break;
    c21e:	   |  \--|----> nop
    c220:	   |     |  /-- bra.s c224 <walkMe+0x296>
		if (!doBorderStuff(thisPerson)) break;
    c222:	   |     \--|-> nop
	}

	thisPerson->walking = FALSE;
    c224:	   |        \-> movea.l 32(sp),a0
    c228:	   |            clr.w 64(a0)
	setFrames(thisPerson, ANI_STAND);
    c22c:	   |            clr.l -(sp)
    c22e:	   |            move.l 36(sp),-(sp)
    c232:	   |            jsr 8192 <setFrames>
    c238:	   |            addq.l #8,sp
	moveAndScale(thisPerson,
				 thisPerson->walkToX,
				 thisPerson->walkToY);
    c23a:	   |            movea.l 32(sp),a0
    c23e:	   |            move.l 44(a0),d0
	moveAndScale(thisPerson,
    c242:	   |            move.l d0,-(sp)
    c244:	   |            jsr 17686 <__floatsisf>
    c24a:	   |            addq.l #4,sp
    c24c:	   |            move.l d0,d2
				 thisPerson->walkToX,
    c24e:	   |            movea.l 32(sp),a0
    c252:	   |            move.l 40(a0),d0
	moveAndScale(thisPerson,
    c256:	   |            move.l d0,-(sp)
    c258:	   |            jsr 17686 <__floatsisf>
    c25e:	   |            addq.l #4,sp
    c260:	   |            move.l d2,-(sp)
    c262:	   |            move.l d0,-(sp)
    c264:	   |            move.l 40(sp),-(sp)
    c268:	   |            jsr ad90 <moveAndScale>
    c26e:	   |            lea 12(sp),sp
	return FALSE;
    c272:	   |            clr.w d0
}
    c274:	   \----------> move.l (sp)+,d2
    c276:	                move.l (sp)+,d3
    c278:	                lea 20(sp),sp
    c27c:	                rts

0000c27e <clearStackLib>:
};

int stackLibTotal = 0;
struct stackLibrary * stackLib = NULL;

void clearStackLib () {
    c27e:	       subq.l #8,sp
    c280:	       move.l a6,-(sp)
	struct stackLibrary * k;
	while (stackLib) {
    c282:	   /-- bra.s c2b2 <clearStackLib+0x34>
		k = stackLib;
    c284:	/--|-> move.l 1ca5a <stackLib>,8(sp)
		stackLib = stackLib -> next;
    c28c:	|  |   movea.l 1ca5a <stackLib>,a0
    c292:	|  |   move.l 4(a0),d0
    c296:	|  |   move.l d0,1ca5a <stackLib>
		FreeVec(k);
    c29c:	|  |   move.l 8(sp),4(sp)
    c2a2:	|  |   move.l 1c9ca <SysBase>,d0
    c2a8:	|  |   movea.l d0,a6
    c2aa:	|  |   movea.l 4(sp),a1
    c2ae:	|  |   jsr -690(a6)
	while (stackLib) {
    c2b2:	|  \-> move.l 1ca5a <stackLib>,d0
    c2b8:	\----- bne.s c284 <clearStackLib+0x6>
	}
	stackLibTotal = 0;
    c2ba:	       clr.l 1ca56 <stackLibTotal>
}
    c2c0:	       nop
    c2c2:	       movea.l (sp)+,a6
    c2c4:	       addq.l #8,sp
    c2c6:	       rts

0000c2c8 <loadGame>:
	}

	return buildFunc;
}

BOOL loadGame (char * fname) {
    c2c8:	          lea -128(sp),sp
    c2cc:	          movem.l d2-d3/a6,-(sp)
	BPTR fp;
	FILETIME savedGameTime;
	int a;

	while (allRunningFunctions) finishFunction (allRunningFunctions);
    c2d0:	      /-- bra.s c2e2 <loadGame+0x1a>
    c2d2:	   /--|-> move.l 1c962 <allRunningFunctions>,d0
    c2d8:	   |  |   move.l d0,-(sp)
    c2da:	   |  |   jsr 5742 <finishFunction>
    c2e0:	   |  |   addq.l #4,sp
    c2e2:	   |  \-> move.l 1c962 <allRunningFunctions>,d0
    c2e8:	   \----- bne.s c2d2 <loadGame+0xa>

	fp = openAndVerify (fname, 'S', 'A', ERROR_GAME_LOAD_NO, &ssgVersion);
    c2ea:	          pea 1ca5e <ssgVersion>
    c2f0:	          pea 19255 <PutChar+0x1537>
    c2f6:	          pea 41 <_start+0x41>
    c2fa:	          pea 53 <_start+0x53>
    c2fe:	          move.l 160(sp),-(sp)
    c302:	          jsr 64f8 <openAndVerify>
    c308:	          lea 20(sp),sp
    c30c:	          move.l d0,112(sp)
	if (fp == NULL) return FALSE;
    c310:	      /-- bne.s c318 <loadGame+0x50>
    c312:	      |   clr.w d0
    c314:	/-----|-- bra.w c5be <loadGame+0x2f6>

	unsigned int bytes_read = Read( fp, &savedGameTime, sizeof (FILETIME));
    c318:	|     \-> move.l 112(sp),108(sp)
    c31e:	|         lea 140(sp),a0
    c322:	|         lea -126(a0),a0
    c326:	|         move.l a0,120(sp)
    c32a:	|         moveq #8,d0
    c32c:	|         move.l d0,116(sp)
    c330:	|         move.l 1c9d2 <DOSBase>,d0
    c336:	|         movea.l d0,a6
    c338:	|         move.l 108(sp),d1
    c33c:	|         move.l 120(sp),d2
    c340:	|         move.l 116(sp),d3
    c344:	|         jsr -42(a6)
    c348:	|         move.l d0,132(sp)
    c34c:	|         move.l 132(sp),d0
    c350:	|         move.l d0,128(sp)
	
	if (bytes_read != sizeof (FILETIME)) {
    c354:	|         moveq #8,d0
    c356:	|         cmp.l 128(sp),d0
    c35a:	|     /-- beq.s c36a <loadGame+0xa2>
		KPrintF("Reading error in loadGame.\n");
    c35c:	|     |   pea 19276 <PutChar+0x1558>
    c362:	|     |   jsr 17254 <KPrintF>
    c368:	|     |   addq.l #4,sp
	}

	if (savedGameTime.dwLowDateTime != fileTime.dwLowDateTime ||
    c36a:	|     \-> move.l 14(sp),d1
    c36e:	|         move.l 1c96c <fileTime>,d0
    c374:	|         cmp.l d1,d0
    c376:	|     /-- bne.s c386 <loadGame+0xbe>
		savedGameTime.dwHighDateTime != fileTime.dwHighDateTime) {
    c378:	|     |   move.l 18(sp),d1
    c37c:	|     |   move.l 1c970 <fileTime+0x4>,d0
	if (savedGameTime.dwLowDateTime != fileTime.dwLowDateTime ||
    c382:	|     |   cmp.l d1,d0
    c384:	|  /--|-- beq.s c3a6 <loadGame+0xde>
		KPrintF("loadgame:", ERROR_GAME_LOAD_WRONG, fname);
    c386:	|  |  \-> move.l 144(sp),-(sp)
    c38a:	|  |      pea 19292 <PutChar+0x1574>
    c390:	|  |      pea 19359 <PutChar+0x163b>
    c396:	|  |      jsr 17254 <KPrintF>
    c39c:	|  |      lea 12(sp),sp
		return FALSE; 
    c3a0:	|  |      clr.w d0
    c3a2:	+--|----- bra.w c5be <loadGame+0x2f6>
	}

	// DON'T ADD ANYTHING NEW BEFORE THIS POINT!

	allowAnyFilename = FGetC (fp);
    c3a6:	|  \----> move.l 112(sp),124(sp)
    c3ac:	|         move.l 1c9d2 <DOSBase>,d0
    c3b2:	|         movea.l d0,a6
    c3b4:	|         move.l 124(sp),d1
    c3b8:	|         jsr -306(a6)
    c3bc:	|         move.l d0,136(sp)
    c3c0:	|         move.l 136(sp),d0
    c3c4:	|         move.l d0,d0
    c3c6:	|         move.w d0,1c226 <allowAnyFilename>
	captureAllKeys = FGetC (fp);
    c3cc:	|         move.l 112(sp),100(sp)
    c3d2:	|         move.l 1c9d2 <DOSBase>,d0
    c3d8:	|         movea.l d0,a6
    c3da:	|         move.l 100(sp),d1
    c3de:	|         jsr -306(a6)
    c3e2:	|         move.l d0,96(sp)
    c3e6:	|         move.l 96(sp),d0
    c3ea:	|         move.l d0,d0
    c3ec:	|         move.w d0,1c96a <captureAllKeys>
	FGetC (fp); // updateDisplay (part of movie playing)
    c3f2:	|         move.l 112(sp),92(sp)
    c3f8:	|         move.l 1c9d2 <DOSBase>,d0
    c3fe:	|         movea.l d0,a6
    c400:	|         move.l 92(sp),d1
    c404:	|         jsr -306(a6)
    c408:	|         move.l d0,88(sp)

	BOOL fontLoaded = FGetC (fp);
    c40c:	|         move.l 112(sp),84(sp)
    c412:	|         move.l 1c9d2 <DOSBase>,d0
    c418:	|         movea.l d0,a6
    c41a:	|         move.l 84(sp),d1
    c41e:	|         jsr -306(a6)
    c422:	|         move.l d0,80(sp)
    c426:	|         move.l 80(sp),d0
    c42a:	|         move.w d0,78(sp)
	int fontNum;
	char * charOrder;
	if (fontLoaded) {
    c42e:	|     /-- beq.s c462 <loadGame+0x19a>
		fontNum = get2bytes (fp);
    c430:	|     |   move.l 112(sp),-(sp)
    c434:	|     |   jsr 6bc <get2bytes>
    c43a:	|     |   addq.l #4,sp
    c43c:	|     |   move.l d0,74(sp)
		fontHeight = get2bytes (fp);		
    c440:	|     |   move.l 112(sp),-(sp)
    c444:	|     |   jsr 6bc <get2bytes>
    c44a:	|     |   addq.l #4,sp
    c44c:	|     |   move.l d0,1cac2 <fontHeight>
		charOrder = readString(fp);		
    c452:	|     |   move.l 112(sp),-(sp)
    c456:	|     |   jsr b02 <readString>
    c45c:	|     |   addq.l #4,sp
    c45e:	|     |   move.l d0,104(sp)
	}
	//loadFont (fontNum, charOrder, fontHeight); Amiga Todo: Implement Graphics stuff
	FreeVec(charOrder);
    c462:	|     \-> move.l 104(sp),70(sp)
    c468:	|         move.l 1c9ca <SysBase>,d0
    c46e:	|         movea.l d0,a6
    c470:	|         movea.l 70(sp),a1
    c474:	|         jsr -690(a6)
	
	fontSpace = getSigned (fp);
    c478:	|         move.l 112(sp),-(sp)
    c47c:	|         jsr 854 <getSigned>
    c482:	|         addq.l #4,sp
    c484:	|         move.w d0,1c8ce <fontSpace>

	killAllPeople ();
    c48a:	|         jsr aa32 <killAllPeople>
	killAllRegions ();
    c490:	|         jsr 15a64 <killAllRegions>

	int camerX = get2bytes (fp);
    c496:	|         move.l 112(sp),-(sp)
    c49a:	|         jsr 6bc <get2bytes>
    c4a0:	|         addq.l #4,sp
    c4a2:	|         move.l d0,66(sp)
	int camerY = get2bytes (fp);
    c4a6:	|         move.l 112(sp),-(sp)
    c4aa:	|         jsr 6bc <get2bytes>
    c4b0:	|         addq.l #4,sp
    c4b2:	|         move.l d0,62(sp)
	FLOAT camerZ;
	camerZ = getFloat(fp);
    c4b6:	|         move.l 112(sp),-(sp)
    c4ba:	|         jsr 7d8 <getFloat>
    c4c0:	|         addq.l #4,sp
    c4c2:	|         move.l d0,58(sp)

	brightnessLevel = FGetC (fp);
    c4c6:	|         move.l 112(sp),54(sp)
    c4cc:	|         move.l 1c9d2 <DOSBase>,d0
    c4d2:	|         movea.l d0,a6
    c4d4:	|         move.l 54(sp),d1
    c4d8:	|         jsr -306(a6)
    c4dc:	|         move.l d0,50(sp)
    c4e0:	|         move.l 50(sp),d0
    c4e4:	|         move.l d0,d0
    c4e6:	|         move.b d0,1c340 <brightnessLevel>

	loadHandlers (fp);
    c4ec:	|         move.l 112(sp),-(sp)
    c4f0:	|         jsr 6458 <loadHandlers>
    c4f6:	|         addq.l #4,sp
	loadRegions (fp);
    c4f8:	|         move.l 112(sp),-(sp)
    c4fc:	|         jsr 15ac0 <loadRegions>
    c502:	|         addq.l #4,sp

	mouseCursorAnim = AllocVec( sizeof( struct personaAnimation), MEMF_ANY);
    c504:	|         moveq #12,d0
    c506:	|         move.l d0,46(sp)
    c50a:	|         clr.l 42(sp)
    c50e:	|         move.l 1c9ca <SysBase>,d0
    c514:	|         movea.l d0,a6
    c516:	|         move.l 46(sp),d0
    c51a:	|         move.l 42(sp),d1
    c51e:	|         jsr -684(a6)
    c522:	|         move.l d0,38(sp)
    c526:	|         move.l 38(sp),d0
    c52a:	|         move.l d0,1c8d0 <mouseCursorAnim>
	if (! mouseCursorAnim) {
    c530:	|         move.l 1c8d0 <mouseCursorAnim>,d0
    c536:	|     /-- bne.s c54a <loadGame+0x282>
		KPrintF("loadGame: Cannot allocate memory");
    c538:	|     |   pea 19363 <PutChar+0x1645>
    c53e:	|     |   jsr 17254 <KPrintF>
    c544:	|     |   addq.l #4,sp
		return FALSE;
    c546:	|     |   clr.w d0
    c548:	+-----|-- bra.s c5be <loadGame+0x2f6>
			languageNum = selectedLanguage;
			setFileIndices (NULL, gameSettings.numLanguages, languageNum);
		}
	}

	nosnapshot ();
    c54a:	|     \-> jsr d3d8 <nosnapshot>
	if (FGetC (fp)) {
    c550:	|         move.l 112(sp),34(sp)
    c556:	|         move.l 1c9d2 <DOSBase>,d0
    c55c:	|         movea.l d0,a6
    c55e:	|         move.l 34(sp),d1
    c562:	|         jsr -306(a6)
    c566:	|         move.l d0,30(sp)
    c56a:	|         move.l 30(sp),d0
    c56e:	|     /-- beq.s c584 <loadGame+0x2bc>
		if (! restoreSnapshot (fp)) return FALSE;
    c570:	|     |   move.l 112(sp),-(sp)
    c574:	|     |   jsr d458 <restoreSnapshot>
    c57a:	|     |   addq.l #4,sp
    c57c:	|     |   tst.w d0
    c57e:	|     +-- bne.s c584 <loadGame+0x2bc>
    c580:	|     |   clr.w d0
    c582:	+-----|-- bra.s c5be <loadGame+0x2f6>
	}

	Close (fp);
    c584:	|     \-> move.l 112(sp),26(sp)
    c58a:	|         move.l 1c9d2 <DOSBase>,d0
    c590:	|         movea.l d0,a6
    c592:	|         move.l 26(sp),d1
    c596:	|         jsr -36(a6)
    c59a:	|         move.l d0,22(sp)
	clearStackLib ();
    c59e:	|         jsr c27e <clearStackLib>

	cameraX = camerX;
    c5a4:	|         move.l 66(sp),1ca84 <cameraX>
	cameraY = camerY;
    c5ac:	|         move.l 62(sp),1ca88 <cameraY>
	cameraZoom = camerZ;
    c5b4:	|         move.l 58(sp),1c368 <cameraZoom>

	return TRUE;
    c5bc:	|         moveq #1,d0
}
    c5be:	\-------> movem.l (sp)+,d2-d3/a6
    c5c2:	          lea 128(sp),sp
    c5c6:	          rts

0000c5c8 <saveFunction>:

void saveFunction (struct loadedFunction * fun, BPTR fp) {
    c5c8:	   /-> lea -64(sp),sp
    c5cc:	   |   move.l a6,-(sp)
    c5ce:	   |   move.l d2,-(sp)
	int a;
	put2bytes (fun -> originalNumber, fp);
    c5d0:	   |   movea.l 76(sp),a0
    c5d4:	   |   move.l (a0),d0
    c5d6:	   |   move.l 80(sp),-(sp)
    c5da:	   |   move.l d0,-(sp)
    c5dc:	   |   jsr 8d0 <put2bytes>
    c5e2:	   |   addq.l #8,sp
	if (fun -> calledBy) {
    c5e4:	   |   movea.l 76(sp),a0
    c5e8:	   |   move.l 40(a0),d0
    c5ec:	/--|-- beq.s c628 <saveFunction+0x60>
		FPutC (fp, 1);
    c5ee:	|  |   move.l 80(sp),52(sp)
    c5f4:	|  |   moveq #1,d0
    c5f6:	|  |   move.l d0,48(sp)
    c5fa:	|  |   move.l 1c9d2 <DOSBase>,d0
    c600:	|  |   movea.l d0,a6
    c602:	|  |   move.l 52(sp),d1
    c606:	|  |   move.l 48(sp),d2
    c60a:	|  |   jsr -312(a6)
    c60e:	|  |   move.l d0,44(sp)
		saveFunction (fun -> calledBy, fp);
    c612:	|  |   movea.l 76(sp),a0
    c616:	|  |   move.l 40(a0),d0
    c61a:	|  |   move.l 80(sp),-(sp)
    c61e:	|  |   move.l d0,-(sp)
    c620:	|  \-- jsr c5c8 <saveFunction>(pc)
    c624:	|      addq.l #8,sp
    c626:	|  /-- bra.s c64a <saveFunction+0x82>
	} else {
		FPutC (fp, 0);
    c628:	\--|-> move.l 80(sp),64(sp)
    c62e:	   |   clr.l 60(sp)
    c632:	   |   move.l 1c9d2 <DOSBase>,d0
    c638:	   |   movea.l d0,a6
    c63a:	   |   move.l 64(sp),d1
    c63e:	   |   move.l 60(sp),d2
    c642:	   |   jsr -312(a6)
    c646:	   |   move.l d0,56(sp)
	}
	put4bytes (fun -> timeLeft, fp);
    c64a:	   \-> movea.l 76(sp),a0
    c64e:	       move.l 12(a0),d0
    c652:	       move.l 80(sp),-(sp)
    c656:	       move.l d0,-(sp)
    c658:	       jsr 958 <put4bytes>
    c65e:	       addq.l #8,sp
	put2bytes (fun -> runThisLine, fp);
    c660:	       movea.l 76(sp),a0
    c664:	       move.l 36(a0),d0
    c668:	       move.l 80(sp),-(sp)
    c66c:	       move.l d0,-(sp)
    c66e:	       jsr 8d0 <put2bytes>
    c674:	       addq.l #8,sp
	FPutC (fp, fun -> cancelMe);
    c676:	       move.l 80(sp),40(sp)
    c67c:	       movea.l 76(sp),a0
    c680:	       move.w 54(a0),d0
    c684:	       movea.w d0,a0
    c686:	       move.l a0,36(sp)
    c68a:	       move.l 1c9d2 <DOSBase>,d0
    c690:	       movea.l d0,a6
    c692:	       move.l 40(sp),d1
    c696:	       move.l 36(sp),d2
    c69a:	       jsr -312(a6)
    c69e:	       move.l d0,32(sp)
	FPutC (fp, fun -> returnSomething);
    c6a2:	       move.l 80(sp),28(sp)
    c6a8:	       movea.l 76(sp),a0
    c6ac:	       move.w 48(a0),d0
    c6b0:	       movea.w d0,a0
    c6b2:	       move.l a0,24(sp)
    c6b6:	       move.l 1c9d2 <DOSBase>,d0
    c6bc:	       movea.l d0,a6
    c6be:	       move.l 28(sp),d1
    c6c2:	       move.l 24(sp),d2
    c6c6:	       jsr -312(a6)
    c6ca:	       move.l d0,20(sp)
	FPutC (fp, fun -> isSpeech);
    c6ce:	       move.l 80(sp),16(sp)
    c6d4:	       movea.l 76(sp),a0
    c6d8:	       move.w 50(a0),d0
    c6dc:	       movea.w d0,a0
    c6de:	       move.l a0,12(sp)
    c6e2:	       move.l 1c9d2 <DOSBase>,d0
    c6e8:	       movea.l d0,a6
    c6ea:	       move.l 16(sp),d1
    c6ee:	       move.l 12(sp),d2
    c6f2:	       jsr -312(a6)
    c6f6:	       move.l d0,8(sp)
	saveVariable (&fun -> reg, fp);
    c6fa:	       moveq #28,d0
    c6fc:	       add.l 76(sp),d0
    c700:	       move.l 80(sp),-(sp)
    c704:	       move.l d0,-(sp)
    c706:	       jsr ce20 <saveVariable>
    c70c:	       addq.l #8,sp

	if (fun -> freezerLevel) {
    c70e:	       movea.l 76(sp),a0
    c712:	       move.b 56(a0),d0
    c716:	   /-- beq.s c726 <saveFunction+0x15e>
		KPrintF(ERROR_GAME_SAVE_FROZEN);		
    c718:	   |   pea 19384 <PutChar+0x1666>
    c71e:	   |   jsr 17254 <KPrintF>
    c724:	   |   addq.l #4,sp
	}
	saveStack (fun -> stack, fp);
    c726:	   \-> movea.l 76(sp),a0
    c72a:	       move.l 24(a0),d0
    c72e:	       move.l 80(sp),-(sp)
    c732:	       move.l d0,-(sp)
    c734:	       jsr cc94 <saveStack>
    c73a:	       addq.l #8,sp
	for (a = 0; a < fun -> numLocals; a ++) {
    c73c:	       clr.l 68(sp)
    c740:	   /-- bra.s c764 <saveFunction+0x19c>
		saveVariable (& (fun -> localVars[a]), fp);
    c742:	/--|-> movea.l 76(sp),a0
    c746:	|  |   move.l 20(a0),d1
    c74a:	|  |   move.l 68(sp),d0
    c74e:	|  |   lsl.l #3,d0
    c750:	|  |   add.l d1,d0
    c752:	|  |   move.l 80(sp),-(sp)
    c756:	|  |   move.l d0,-(sp)
    c758:	|  |   jsr ce20 <saveVariable>
    c75e:	|  |   addq.l #8,sp
	for (a = 0; a < fun -> numLocals; a ++) {
    c760:	|  |   addq.l #1,68(sp)
    c764:	|  \-> movea.l 76(sp),a0
    c768:	|      move.l 8(a0),d0
    c76c:	|      cmp.l 68(sp),d0
    c770:	\----- bgt.s c742 <saveFunction+0x17a>
	}
}
    c772:	       nop
    c774:	       nop
    c776:	       move.l (sp)+,d2
    c778:	       movea.l (sp)+,a6
    c77a:	       lea 64(sp),sp
    c77e:	       rts

0000c780 <saveGame>:

BOOL saveGame (char * fname) {
    c780:	          lea -248(sp),sp
    c784:	          movem.l d2-d3/a6,-(sp)
	int a;

	BPTR fp = Open( fname, MODE_NEWFILE);
    c788:	          move.l 264(sp),244(sp)
    c78e:	          move.l #1006,240(sp)
    c796:	          move.l 1c9d2 <DOSBase>,d0
    c79c:	          movea.l d0,a6
    c79e:	          move.l 244(sp),d1
    c7a2:	          move.l 240(sp),d2
    c7a6:	          jsr -30(a6)
    c7aa:	          move.l d0,236(sp)
    c7ae:	          move.l 236(sp),d0
    c7b2:	          move.l d0,232(sp)
	if (fp == NULL) {
    c7b6:	      /-- bne.s c7cc <saveGame+0x4c>
		KPrintF("saveGame: Cannot create file");
    c7b8:	      |   pea 193a6 <PutChar+0x1688>
    c7be:	      |   jsr 17254 <KPrintF>
    c7c4:	      |   addq.l #4,sp
		return FALSE;
    c7c6:	      |   clr.w d0
    c7c8:	/-----|-- bra.w cc8a <saveGame+0x50a>
	}

	Write( fp, &"SLUDSA", 6);
    c7cc:	|     \-> move.l 232(sp),228(sp)
    c7d2:	|         move.l #103363,224(sp)
    c7da:	|         moveq #6,d0
    c7dc:	|         move.l d0,220(sp)
    c7e0:	|         move.l 1c9d2 <DOSBase>,d0
    c7e6:	|         movea.l d0,a6
    c7e8:	|         move.l 228(sp),d1
    c7ec:	|         move.l 224(sp),d2
    c7f0:	|         move.l 220(sp),d3
    c7f4:	|         jsr -48(a6)
    c7f8:	|         move.l d0,216(sp)
	FPutC (fp, 0);
    c7fc:	|         move.l 232(sp),212(sp)
    c802:	|         clr.l 208(sp)
    c806:	|         move.l 1c9d2 <DOSBase>,d0
    c80c:	|         movea.l d0,a6
    c80e:	|         move.l 212(sp),d1
    c812:	|         move.l 208(sp),d2
    c816:	|         jsr -312(a6)
    c81a:	|         move.l d0,204(sp)
	FPutC (fp, 0);
    c81e:	|         move.l 232(sp),200(sp)
    c824:	|         clr.l 196(sp)
    c828:	|         move.l 1c9d2 <DOSBase>,d0
    c82e:	|         movea.l d0,a6
    c830:	|         move.l 200(sp),d1
    c834:	|         move.l 196(sp),d2
    c838:	|         jsr -312(a6)
    c83c:	|         move.l d0,192(sp)
	FPutC (fp, MAJOR_VERSION);
    c840:	|         move.l 232(sp),188(sp)
    c846:	|         moveq #2,d0
    c848:	|         move.l d0,184(sp)
    c84c:	|         move.l 1c9d2 <DOSBase>,d0
    c852:	|         movea.l d0,a6
    c854:	|         move.l 188(sp),d1
    c858:	|         move.l 184(sp),d2
    c85c:	|         jsr -312(a6)
    c860:	|         move.l d0,180(sp)
	FPutC (fp, MINOR_VERSION);
    c864:	|         move.l 232(sp),176(sp)
    c86a:	|         moveq #2,d0
    c86c:	|         move.l d0,172(sp)
    c870:	|         move.l 1c9d2 <DOSBase>,d0
    c876:	|         movea.l d0,a6
    c878:	|         move.l 176(sp),d1
    c87c:	|         move.l 172(sp),d2
    c880:	|         jsr -312(a6)
    c884:	|         move.l d0,168(sp)

	Write ( fp, &fileTime, sizeof(FILETIME));
    c888:	|         move.l 232(sp),164(sp)
    c88e:	|         move.l #117100,160(sp)
    c896:	|         moveq #8,d0
    c898:	|         move.l d0,156(sp)
    c89c:	|         move.l 1c9d2 <DOSBase>,d0
    c8a2:	|         movea.l d0,a6
    c8a4:	|         move.l 164(sp),d1
    c8a8:	|         move.l 160(sp),d2
    c8ac:	|         move.l 156(sp),d3
    c8b0:	|         jsr -48(a6)
    c8b4:	|         move.l d0,152(sp)

	// DON'T ADD ANYTHING NEW BEFORE THIS POINT!

	FPutC (fp, allowAnyFilename);
    c8b8:	|         move.l 232(sp),148(sp)
    c8be:	|         move.w 1c226 <allowAnyFilename>,d0
    c8c4:	|         movea.w d0,a0
    c8c6:	|         move.l a0,144(sp)
    c8ca:	|         move.l 1c9d2 <DOSBase>,d0
    c8d0:	|         movea.l d0,a6
    c8d2:	|         move.l 148(sp),d1
    c8d6:	|         move.l 144(sp),d2
    c8da:	|         jsr -312(a6)
    c8de:	|         move.l d0,140(sp)
	FPutC (fp, captureAllKeys);
    c8e2:	|         move.l 232(sp),136(sp)
    c8e8:	|         move.w 1c96a <captureAllKeys>,d0
    c8ee:	|         movea.w d0,a0
    c8f0:	|         move.l a0,132(sp)
    c8f4:	|         move.l 1c9d2 <DOSBase>,d0
    c8fa:	|         movea.l d0,a6
    c8fc:	|         move.l 136(sp),d1
    c900:	|         move.l 132(sp),d2
    c904:	|         jsr -312(a6)
    c908:	|         move.l d0,128(sp)
	FPutC (fp, TRUE); // updateDisplay
    c90c:	|         move.l 232(sp),124(sp)
    c912:	|         moveq #1,d0
    c914:	|         move.l d0,120(sp)
    c918:	|         move.l 1c9d2 <DOSBase>,d0
    c91e:	|         movea.l d0,a6
    c920:	|         move.l 124(sp),d1
    c924:	|         move.l 120(sp),d2
    c928:	|         jsr -312(a6)
    c92c:	|         move.l d0,116(sp)
	FPutC (fp, fontTableSize>0);
    c930:	|         move.l 232(sp),112(sp)
    c936:	|         move.l 1cad2 <fontTableSize>,d0
    c93c:	|         sgt d0
    c93e:	|         neg.b d0
    c940:	|         move.b d0,d0
    c942:	|         andi.l #255,d0
    c948:	|         move.l d0,108(sp)
    c94c:	|         move.l 1c9d2 <DOSBase>,d0
    c952:	|         movea.l d0,a6
    c954:	|         move.l 112(sp),d1
    c958:	|         move.l 108(sp),d2
    c95c:	|         jsr -312(a6)
    c960:	|         move.l d0,104(sp)

	if (fontTableSize>0) {
    c964:	|         move.l 1cad2 <fontTableSize>,d0
    c96a:	|     /-- ble.s c9a8 <saveGame+0x228>
		put2bytes (loadedFontNum, fp);
    c96c:	|     |   move.l 1cac6 <loadedFontNum>,d0
    c972:	|     |   move.l 232(sp),-(sp)
    c976:	|     |   move.l d0,-(sp)
    c978:	|     |   jsr 8d0 <put2bytes>
    c97e:	|     |   addq.l #8,sp
		put2bytes (fontHeight, fp);
    c980:	|     |   move.l 1cac2 <fontHeight>,d0
    c986:	|     |   move.l 232(sp),-(sp)
    c98a:	|     |   move.l d0,-(sp)
    c98c:	|     |   jsr 8d0 <put2bytes>
    c992:	|     |   addq.l #8,sp
		writeString(fontOrderString, fp);
    c994:	|     |   move.l 1caca <fontOrderString>,d0
    c99a:	|     |   move.l 232(sp),-(sp)
    c99e:	|     |   move.l d0,-(sp)
    c9a0:	|     |   jsr bd8 <writeString>
    c9a6:	|     |   addq.l #8,sp
	}
	putSigned (fontSpace, fp);
    c9a8:	|     \-> move.w 1c8ce <fontSpace>,d0
    c9ae:	|         movea.w d0,a0
    c9b0:	|         move.l 232(sp),-(sp)
    c9b4:	|         move.l a0,-(sp)
    c9b6:	|         jsr a9c <putSigned>
    c9bc:	|         addq.l #8,sp

	// Save backdrop
	put2bytes (cameraX, fp);
    c9be:	|         move.l 1ca84 <cameraX>,d0
    c9c4:	|         move.l 232(sp),-(sp)
    c9c8:	|         move.l d0,-(sp)
    c9ca:	|         jsr 8d0 <put2bytes>
    c9d0:	|         addq.l #8,sp
	put2bytes (cameraY, fp);
    c9d2:	|         move.l 1ca88 <cameraY>,d0
    c9d8:	|         move.l 232(sp),-(sp)
    c9dc:	|         move.l d0,-(sp)
    c9de:	|         jsr 8d0 <put2bytes>
    c9e4:	|         addq.l #8,sp
	putFloat(cameraZoom, fp);
    c9e6:	|         move.l 1c368 <cameraZoom>,d0
    c9ec:	|         move.l 232(sp),-(sp)
    c9f0:	|         move.l d0,-(sp)
    c9f2:	|         jsr a46 <putFloat>
    c9f8:	|         addq.l #8,sp

	FPutC (fp, brightnessLevel);
    c9fa:	|         move.l 232(sp),100(sp)
    ca00:	|         move.b 1c340 <brightnessLevel>,d0
    ca06:	|         move.b d0,d0
    ca08:	|         andi.l #255,d0
    ca0e:	|         move.l d0,96(sp)
    ca12:	|         move.l 1c9d2 <DOSBase>,d0
    ca18:	|         movea.l d0,a6
    ca1a:	|         move.l 100(sp),d1
    ca1e:	|         move.l 96(sp),d2
    ca22:	|         jsr -312(a6)
    ca26:	|         move.l d0,92(sp)

	// Save event handlers
	saveHandlers (fp);
    ca2a:	|         move.l 232(sp),-(sp)
    ca2e:	|         jsr 69dc <saveHandlers>
    ca34:	|         addq.l #4,sp

	// Save regions
	saveRegions (fp);
    ca36:	|         move.l 232(sp),-(sp)
    ca3a:	|         jsr 15c7a <saveRegions>
    ca40:	|         addq.l #4,sp

	saveAnim (mouseCursorAnim, fp);
    ca42:	|         move.l 1c8d0 <mouseCursorAnim>,d0
    ca48:	|         move.l 232(sp),-(sp)
    ca4c:	|         move.l d0,-(sp)
    ca4e:	|         jsr afa4 <saveAnim>
    ca54:	|         addq.l #8,sp
	put2bytes (mouseCursorFrameNum, fp);
    ca56:	|         move.l 1c8d4 <mouseCursorFrameNum>,d0
    ca5c:	|         move.l 232(sp),-(sp)
    ca60:	|         move.l d0,-(sp)
    ca62:	|         jsr 8d0 <put2bytes>
    ca68:	|         addq.l #8,sp

	// Save functions
	struct loadedFunction * thisFunction = allRunningFunctions;
    ca6a:	|         move.l 1c962 <allRunningFunctions>,252(sp)
	int countFunctions = 0;
    ca72:	|         clr.l 248(sp)
	while (thisFunction) {
    ca76:	|     /-- bra.s ca86 <saveGame+0x306>
		countFunctions ++;
    ca78:	|  /--|-> addq.l #1,248(sp)
		thisFunction = thisFunction -> next;
    ca7c:	|  |  |   movea.l 252(sp),a0
    ca80:	|  |  |   move.l 44(a0),252(sp)
	while (thisFunction) {
    ca86:	|  |  \-> tst.l 252(sp)
    ca8a:	|  \----- bne.s ca78 <saveGame+0x2f8>
	}
	put2bytes (countFunctions, fp);
    ca8c:	|         move.l 232(sp),-(sp)
    ca90:	|         move.l 252(sp),-(sp)
    ca94:	|         jsr 8d0 <put2bytes>
    ca9a:	|         addq.l #8,sp

	thisFunction = allRunningFunctions;
    ca9c:	|         move.l 1c962 <allRunningFunctions>,252(sp)
	while (thisFunction) {
    caa4:	|     /-- bra.s cac0 <saveGame+0x340>
		saveFunction (thisFunction, fp);
    caa6:	|  /--|-> move.l 232(sp),-(sp)
    caaa:	|  |  |   move.l 256(sp),-(sp)
    caae:	|  |  |   jsr c5c8 <saveFunction>
    cab4:	|  |  |   addq.l #8,sp
		thisFunction = thisFunction -> next;
    cab6:	|  |  |   movea.l 252(sp),a0
    caba:	|  |  |   move.l 44(a0),252(sp)
	while (thisFunction) {
    cac0:	|  |  \-> tst.l 252(sp)
    cac4:	|  \----- bne.s caa6 <saveGame+0x326>
	}

	for (a = 0; a < numGlobals; a ++) {
    cac6:	|         clr.l 256(sp)
    caca:	|     /-- bra.s caec <saveGame+0x36c>
		saveVariable (& globalVars[a], fp);
    cacc:	|  /--|-> move.l 1c978 <globalVars>,d1
    cad2:	|  |  |   move.l 256(sp),d0
    cad6:	|  |  |   lsl.l #3,d0
    cad8:	|  |  |   add.l d1,d0
    cada:	|  |  |   move.l 232(sp),-(sp)
    cade:	|  |  |   move.l d0,-(sp)
    cae0:	|  |  |   jsr ce20 <saveVariable>
    cae6:	|  |  |   addq.l #8,sp
	for (a = 0; a < numGlobals; a ++) {
    cae8:	|  |  |   addq.l #1,256(sp)
    caec:	|  |  \-> move.l 1c9a2 <numGlobals>,d0
    caf2:	|  |      cmp.l 256(sp),d0
    caf6:	|  \----- bgt.s cacc <saveGame+0x34c>
	}

	savePeople (fp);
    caf8:	|         move.l 232(sp),-(sp)
    cafc:	|         jsr b0cc <savePeople>
    cb02:	|         addq.l #4,sp

	if (currentFloor -> numPolygons) {
    cb04:	|         movea.l 1cae6 <currentFloor>,a0
    cb0a:	|         move.l 8(a0),d0
    cb0e:	|  /----- beq.s cb4c <saveGame+0x3cc>
		FPutC (fp, 1);
    cb10:	|  |      move.l 232(sp),76(sp)
    cb16:	|  |      moveq #1,d0
    cb18:	|  |      move.l d0,72(sp)
    cb1c:	|  |      move.l 1c9d2 <DOSBase>,d0
    cb22:	|  |      movea.l d0,a6
    cb24:	|  |      move.l 76(sp),d1
    cb28:	|  |      move.l 72(sp),d2
    cb2c:	|  |      jsr -312(a6)
    cb30:	|  |      move.l d0,68(sp)
		put2bytes (currentFloor -> originalNum, fp);
    cb34:	|  |      movea.l 1cae6 <currentFloor>,a0
    cb3a:	|  |      move.l (a0),d0
    cb3c:	|  |      move.l 232(sp),-(sp)
    cb40:	|  |      move.l d0,-(sp)
    cb42:	|  |      jsr 8d0 <put2bytes>
    cb48:	|  |      addq.l #8,sp
    cb4a:	|  |  /-- bra.s cb6e <saveGame+0x3ee>
	} else FPutC (fp, 0);
    cb4c:	|  \--|-> move.l 232(sp),88(sp)
    cb52:	|     |   clr.l 84(sp)
    cb56:	|     |   move.l 1c9d2 <DOSBase>,d0
    cb5c:	|     |   movea.l d0,a6
    cb5e:	|     |   move.l 88(sp),d1
    cb62:	|     |   move.l 84(sp),d2
    cb66:	|     |   jsr -312(a6)
    cb6a:	|     |   move.l d0,80(sp)
	/*if (zBuffer.tex) {
		FPutC (fp, 1);
		put2bytes (zBuffer.originalNum, fp);
	} else FPutC (fp,0);*/ 

	FPutC (fp, speechMode);
    cb6e:	|     \-> move.l 232(sp),64(sp)
    cb74:	|         move.l 1ca98 <speechMode>,60(sp)
    cb7c:	|         move.l 1c9d2 <DOSBase>,d0
    cb82:	|         movea.l d0,a6
    cb84:	|         move.l 64(sp),d1
    cb88:	|         move.l 60(sp),d2
    cb8c:	|         jsr -312(a6)
    cb90:	|         move.l d0,56(sp)
	FPutC (fadeMode, fp);
    cb94:	|         move.b 1c8a4 <fadeMode>,d0
    cb9a:	|         move.b d0,d0
    cb9c:	|         andi.l #255,d0
    cba2:	|         move.l d0,52(sp)
    cba6:	|         move.l 232(sp),48(sp)
    cbac:	|         move.l 1c9d2 <DOSBase>,d0
    cbb2:	|         movea.l d0,a6
    cbb4:	|         move.l 52(sp),d1
    cbb8:	|         move.l 48(sp),d2
    cbbc:	|         jsr -312(a6)
    cbc0:	|         move.l d0,44(sp)
	saveSpeech (speech, fp);
    cbc4:	|         move.l 1ca26 <speech>,d0
    cbca:	|         move.l 232(sp),-(sp)
    cbce:	|         move.l d0,-(sp)
    cbd0:	|         jsr 8046 <saveSpeech>
    cbd6:	|         addq.l #8,sp
	saveStatusBars (fp);
    cbd8:	|         move.l 232(sp),-(sp)
    cbdc:	|         jsr 7a42 <saveStatusBars>
    cbe2:	|         addq.l #4,sp
	saveSounds (fp);
    cbe4:	|         move.l 232(sp),-(sp)
    cbe8:	|         jsr d186 <saveSounds>
    cbee:	|         addq.l #4,sp

	put2bytes (saveEncoding, fp);
    cbf0:	|         move.w 1ca82 <saveEncoding>,d0
    cbf6:	|         move.w d0,d0
    cbf8:	|         andi.l #65535,d0
    cbfe:	|         move.l 232(sp),-(sp)
    cc02:	|         move.l d0,-(sp)
    cc04:	|         jsr 8d0 <put2bytes>
    cc0a:	|         addq.l #8,sp

	saveParallaxRecursive (parallaxStuff, fp);
    cc0c:	|         move.l 1ca74 <parallaxStuff>,d0
    cc12:	|         move.l 232(sp),-(sp)
    cc16:	|         move.l d0,-(sp)
    cc18:	|         jsr d47e <saveParallaxRecursive>
    cc1e:	|         addq.l #8,sp
	FPutC (fp, 0);
    cc20:	|         move.l 232(sp),40(sp)
    cc26:	|         clr.l 36(sp)
    cc2a:	|         move.l 1c9d2 <DOSBase>,d0
    cc30:	|         movea.l d0,a6
    cc32:	|         move.l 40(sp),d1
    cc36:	|         move.l 36(sp),d2
    cc3a:	|         jsr -312(a6)
    cc3e:	|         move.l d0,32(sp)

	FPutC(fp, languageNum);	// Selected language
    cc42:	|         move.l 232(sp),28(sp)
    cc48:	|         move.l 1c346 <languageNum>,24(sp)
    cc50:	|         move.l 1c9d2 <DOSBase>,d0
    cc56:	|         movea.l d0,a6
    cc58:	|         move.l 28(sp),d1
    cc5c:	|         move.l 24(sp),d2
    cc60:	|         jsr -312(a6)
    cc64:	|         move.l d0,20(sp)

	Close(fp);
    cc68:	|         move.l 232(sp),16(sp)
    cc6e:	|         move.l 1c9d2 <DOSBase>,d0
    cc74:	|         movea.l d0,a6
    cc76:	|         move.l 16(sp),d1
    cc7a:	|         jsr -36(a6)
    cc7e:	|         move.l d0,12(sp)
	clearStackLib ();
    cc82:	|         jsr c27e <clearStackLib>
	return TRUE;
    cc88:	|         moveq #1,d0
}
    cc8a:	\-------> movem.l (sp)+,d2-d3/a6
    cc8e:	          lea 248(sp),sp
    cc92:	          rts

0000cc94 <saveStack>:

//----------------------------------------------------------------------
// For saving and loading stacks...
//----------------------------------------------------------------------

void saveStack (struct variableStack * vs, BPTR fp) {
    cc94:	       lea -12(sp),sp
	int elements = 0;
    cc98:	       clr.l 8(sp)
	int a;

	struct variableStack * search = vs;
    cc9c:	       move.l 16(sp),(sp)
	while (search) {
    cca0:	   /-- bra.s ccac <saveStack+0x18>
		elements ++;
    cca2:	/--|-> addq.l #1,8(sp)
		search = search -> next;
    cca6:	|  |   movea.l (sp),a0
    cca8:	|  |   move.l 8(a0),(sp)
	while (search) {
    ccac:	|  \-> tst.l (sp)
    ccae:	\----- bne.s cca2 <saveStack+0xe>
	}

	put2bytes (elements, fp);
    ccb0:	       move.l 20(sp),-(sp)
    ccb4:	       move.l 12(sp),-(sp)
    ccb8:	       jsr 8d0 <put2bytes>
    ccbe:	       addq.l #8,sp
	search = vs;
    ccc0:	       move.l 16(sp),(sp)
	for (a = 0; a < elements; a ++) {
    ccc4:	       clr.l 4(sp)
    ccc8:	   /-- bra.s cce4 <saveStack+0x50>
		saveVariable (& search -> thisVar, fp);
    ccca:	/--|-> move.l (sp),d0
    cccc:	|  |   move.l 20(sp),-(sp)
    ccd0:	|  |   move.l d0,-(sp)
    ccd2:	|  |   jsr ce20 <saveVariable>
    ccd8:	|  |   addq.l #8,sp
		search = search -> next;
    ccda:	|  |   movea.l (sp),a0
    ccdc:	|  |   move.l 8(a0),(sp)
	for (a = 0; a < elements; a ++) {
    cce0:	|  |   addq.l #1,4(sp)
    cce4:	|  \-> move.l 4(sp),d0
    cce8:	|      cmp.l 8(sp),d0
    ccec:	\----- blt.s ccca <saveStack+0x36>
	}
}
    ccee:	       nop
    ccf0:	       nop
    ccf2:	       lea 12(sp),sp
    ccf6:	       rts

0000ccf8 <saveStackRef>:


BOOL saveStackRef (struct stackHandler * vs, BPTR fp) {
    ccf8:	             lea -44(sp),sp
    ccfc:	             move.l a6,-(sp)
    ccfe:	             move.l d2,-(sp)
	struct stackLibrary * s = stackLib;
    cd00:	             move.l 1ca5a <stackLib>,48(sp)
	int a = 0;
    cd08:	             clr.l 44(sp)
	while (s) {
    cd0c:	      /----- bra.s cd6a <saveStackRef+0x72>
		if (s -> stack == vs) {
    cd0e:	   /--|----> movea.l 48(sp),a0
    cd12:	   |  |      move.l (a0),d0
    cd14:	   |  |      cmp.l 56(sp),d0
    cd18:	   |  |  /-- bne.s cd5c <saveStackRef+0x64>
			FPutC (fp, 1);
    cd1a:	   |  |  |   move.l 60(sp),16(sp)
    cd20:	   |  |  |   moveq #1,d0
    cd22:	   |  |  |   move.l d0,12(sp)
    cd26:	   |  |  |   move.l 1c9d2 <DOSBase>,d0
    cd2c:	   |  |  |   movea.l d0,a6
    cd2e:	   |  |  |   move.l 16(sp),d1
    cd32:	   |  |  |   move.l 12(sp),d2
    cd36:	   |  |  |   jsr -312(a6)
    cd3a:	   |  |  |   move.l d0,8(sp)
			put2bytes (stackLibTotal - a, fp);
    cd3e:	   |  |  |   move.l 1ca56 <stackLibTotal>,d0
    cd44:	   |  |  |   sub.l 44(sp),d0
    cd48:	   |  |  |   move.l 60(sp),-(sp)
    cd4c:	   |  |  |   move.l d0,-(sp)
    cd4e:	   |  |  |   jsr 8d0 <put2bytes>
    cd54:	   |  |  |   addq.l #8,sp
			return TRUE;
    cd56:	   |  |  |   moveq #1,d0
    cd58:	/--|--|--|-- bra.w ce16 <saveStackRef+0x11e>
		}
		s = s -> next;
    cd5c:	|  |  |  \-> movea.l 48(sp),a0
    cd60:	|  |  |      move.l 4(a0),48(sp)
		a ++;
    cd66:	|  |  |      addq.l #1,44(sp)
	while (s) {
    cd6a:	|  |  \----> tst.l 48(sp)
    cd6e:	|  \-------- bne.s cd0e <saveStackRef+0x16>
	}
	FPutC (fp, 0);
    cd70:	|            move.l 60(sp),40(sp)
    cd76:	|            clr.l 36(sp)
    cd7a:	|            move.l 1c9d2 <DOSBase>,d0
    cd80:	|            movea.l d0,a6
    cd82:	|            move.l 40(sp),d1
    cd86:	|            move.l 36(sp),d2
    cd8a:	|            jsr -312(a6)
    cd8e:	|            move.l d0,32(sp)
	saveStack (vs -> first, fp);
    cd92:	|            movea.l 56(sp),a0
    cd96:	|            move.l (a0),d0
    cd98:	|            move.l 60(sp),-(sp)
    cd9c:	|            move.l d0,-(sp)
    cd9e:	|            jsr cc94 <saveStack>
    cda4:	|            addq.l #8,sp
	s = AllocVec( sizeof(struct stackLibrary), MEMF_ANY);
    cda6:	|            moveq #8,d0
    cda8:	|            move.l d0,28(sp)
    cdac:	|            clr.l 24(sp)
    cdb0:	|            move.l 1c9ca <SysBase>,d0
    cdb6:	|            movea.l d0,a6
    cdb8:	|            move.l 28(sp),d0
    cdbc:	|            move.l 24(sp),d1
    cdc0:	|            jsr -684(a6)
    cdc4:	|            move.l d0,20(sp)
    cdc8:	|            move.l 20(sp),d0
    cdcc:	|            move.l d0,48(sp)
	stackLibTotal ++;
    cdd0:	|            move.l 1ca56 <stackLibTotal>,d0
    cdd6:	|            addq.l #1,d0
    cdd8:	|            move.l d0,1ca56 <stackLibTotal>
	if (! s) {
    cdde:	|            tst.l 48(sp)
    cde2:	|        /-- bne.s cdf6 <saveStackRef+0xfe>
		KPrintF("saveStackRef: Cannot allocate memory");
    cde4:	|        |   pea 193f2 <PutChar+0x16d4>
    cdea:	|        |   jsr 17254 <KPrintF>
    cdf0:	|        |   addq.l #4,sp
		return FALSE;
    cdf2:	|        |   clr.w d0
    cdf4:	+--------|-- bra.s ce16 <saveStackRef+0x11e>
	}
	s -> next = stackLib;
    cdf6:	|        \-> move.l 1ca5a <stackLib>,d0
    cdfc:	|            movea.l 48(sp),a0
    ce00:	|            move.l d0,4(a0)
	s -> stack = vs;
    ce04:	|            movea.l 48(sp),a0
    ce08:	|            move.l 56(sp),(a0)
	stackLib = s;
    ce0c:	|            move.l 48(sp),1ca5a <stackLib>
	return TRUE;
    ce14:	|            moveq #1,d0
}
    ce16:	\----------> move.l (sp)+,d2
    ce18:	             movea.l (sp)+,a6
    ce1a:	             lea 44(sp),sp
    ce1e:	             rts

0000ce20 <saveVariable>:

BOOL saveVariable (struct variable * from, BPTR fp)
{
    ce20:	          lea -12(sp),sp
    ce24:	          move.l a6,-(sp)
    ce26:	          move.l d2,-(sp)
	FPutC (fp,from -> varType);
    ce28:	          move.l 28(sp),16(sp)
    ce2e:	          movea.l 24(sp),a0
    ce32:	          move.l (a0),d0
    ce34:	          move.l d0,12(sp)
    ce38:	          move.l 1c9d2 <DOSBase>,d0
    ce3e:	          movea.l d0,a6
    ce40:	          move.l 16(sp),d1
    ce44:	          move.l 12(sp),d2
    ce48:	          jsr -312(a6)
    ce4c:	          move.l d0,8(sp)
	switch (from -> varType) {
    ce50:	          movea.l 24(sp),a0
    ce54:	          move.l (a0),d0
    ce56:	          moveq #9,d1
    ce58:	          cmp.l d0,d1
    ce5a:	      /-- bcs.w cf0a <saveVariable+0xea>
    ce5e:	      |   add.l d0,d0
    ce60:	      |   movea.l d0,a0
    ce62:	      |   adda.l #52846,a0
    ce68:	      |   move.w (a0),d0
    ce6a:	      |   jmp (ce6e <saveVariable+0x4e>,pc,d0.w)
    ce6e:	      |   ori.l #1310740,(a0)+
    ce74:	      |   ori.b #20,(20,a0,d0.w)
    ce7a:	      |   .short 0x004c
    ce7c:	      |   ori.b #126,(a4)
    ce80:	      |   ori.w #8303,-(a4)
		case SVT_INT:
		case SVT_FUNC:
		case SVT_BUILT:
		case SVT_FILE:
		case SVT_OBJTYPE:
		put4bytes (from -> varData.intValue, fp);
    ce84:	      |   ori.b #40,(a0)+
    ce88:	      |   ori.b #47,d4
    ce8c:	      |   ori.b #0,(a4)+
    ce90:	      |   jsr 958 <put4bytes>
    ce96:	      |   addq.l #8,sp
		return TRUE;
    ce98:	      |   moveq #1,d0
    ce9a:	/-----|-- bra.w cf46 <saveVariable+0x126>

		case SVT_STRING:
		writeString (from -> varData.theString, fp);
    ce9e:	|     |   movea.l 24(sp),a0
    cea2:	|     |   move.l 4(a0),d0
    cea6:	|     |   move.l 28(sp),-(sp)
    ceaa:	|     |   move.l d0,-(sp)
    ceac:	|     |   jsr bd8 <writeString>
    ceb2:	|     |   addq.l #8,sp
		return TRUE;
    ceb4:	|     |   moveq #1,d0
    ceb6:	+-----|-- bra.w cf46 <saveVariable+0x126>

		case SVT_STACK:
		return saveStackRef (from -> varData.theStack, fp);
    ceba:	|     |   movea.l 24(sp),a0
    cebe:	|     |   move.l 4(a0),d0
    cec2:	|     |   move.l 28(sp),-(sp)
    cec6:	|     |   move.l d0,-(sp)
    cec8:	|     |   jsr ccf8 <saveStackRef>
    cece:	|     |   addq.l #8,sp
    ced0:	+-----|-- bra.s cf46 <saveVariable+0x126>

		case SVT_COSTUME:
		saveCostume (from -> varData.costumeHandler, fp);
    ced2:	|     |   movea.l 24(sp),a0
    ced6:	|     |   move.l 4(a0),d0
    ceda:	|     |   move.l 28(sp),-(sp)
    cede:	|     |   move.l d0,-(sp)
    cee0:	|     |   jsr b06e <saveCostume>
    cee6:	|     |   addq.l #8,sp
		return FALSE;
    cee8:	|     |   clr.w d0
    ceea:	+-----|-- bra.s cf46 <saveVariable+0x126>

		case SVT_ANIM:
		saveAnim (from -> varData.animHandler, fp);
    ceec:	|     |   movea.l 24(sp),a0
    cef0:	|     |   move.l 4(a0),d0
    cef4:	|     |   move.l 28(sp),-(sp)
    cef8:	|     |   move.l d0,-(sp)
    cefa:	|     |   jsr afa4 <saveAnim>
    cf00:	|     |   addq.l #8,sp
		return FALSE;
    cf02:	|     |   clr.w d0
    cf04:	+-----|-- bra.s cf46 <saveVariable+0x126>

		case SVT_NULL:
		return FALSE;
    cf06:	|     |   clr.w d0
    cf08:	+-----|-- bra.s cf46 <saveVariable+0x126>

		default:
		KPrintF("Can't save variables of this type:",
					(from->varType < SVT_NUM_TYPES) ?
    cf0a:	|     \-> movea.l 24(sp),a0
    cf0e:	|         move.l (a0),d0
		KPrintF("Can't save variables of this type:",
    cf10:	|         moveq #10,d1
    cf12:	|         cmp.l d0,d1
    cf14:	|  /----- bcs.s cf2e <saveVariable+0x10e>
						typeName[from->varType] :
    cf16:	|  |      movea.l 24(sp),a0
    cf1a:	|  |      move.l (a0),d0
		KPrintF("Can't save variables of this type:",
    cf1c:	|  |      add.l d0,d0
    cf1e:	|  |      movea.l d0,a1
    cf20:	|  |      adda.l d0,a1
    cf22:	|  |      lea 1c8a6 <typeName>,a0
    cf28:	|  |      move.l (0,a1,a0.l),d0
    cf2c:	|  |  /-- bra.s cf34 <saveVariable+0x114>
    cf2e:	|  \--|-> move.l #103447,d0
    cf34:	|     \-> move.l d0,-(sp)
    cf36:	|         pea 1941e <PutChar+0x1700>
    cf3c:	|         jsr 17254 <KPrintF>
    cf42:	|         addq.l #8,sp
						"bad ID");						
	}
	return TRUE;
    cf44:	|         moveq #1,d0
    cf46:	\-------> move.l (sp)+,d2
    cf48:	          movea.l (sp)+,a6
    cf4a:	          lea 12(sp),sp
    cf4e:	          rts

0000cf50 <CsiCheckInput>:
extern struct inputType input;

UWORD counterx_old = 0;
UWORD countery_old = 0;

void CsiCheckInput() {
    cf50:	          lea -12(sp),sp
    volatile struct Custom *custom = (struct Custom*)0xdff000;
    cf54:	          move.l #14675968,4(sp)
    UWORD value = custom->joy0dat;
    cf5c:	          movea.l 4(sp),a0
    cf60:	          move.w 10(a0),2(sp)
    UBYTE countery_new = (UBYTE) (custom->joy0dat >> 8);
    cf66:	          movea.l 4(sp),a0
    cf6a:	          move.w 10(a0),d0
    cf6e:	          lsr.w #8,d0
    cf70:	          move.b d0,1(sp)
    UBYTE counterx_new = (UBYTE) (custom->joy0dat & 0xffff);
    cf74:	          movea.l 4(sp),a0
    cf78:	          move.w 10(a0),d0
    cf7c:	          move.b d0,(sp)

    if(counterx_new)
    cf7e:	/-------- beq.w d024 <CsiCheckInput+0xd4>
    {
        WORD counterx_diff = counterx_new - counterx_old;
    cf82:	|         clr.w d1
    cf84:	|         move.b (sp),d1
    cf86:	|         move.w 1ca62 <counterx_old>,d0
    cf8c:	|         sub.w d0,d1
    cf8e:	|         move.w d1,10(sp)

        if(counterx_diff > 127) {
    cf92:	|         cmpi.w #128,10(sp)
    cf98:	|     /-- blt.s cfb0 <CsiCheckInput+0x60>
            input.justMoved = TRUE;                
    cf9a:	|     |   move.w #1,1c980 <input+0x4>
            counterx_diff -= 256;    
    cfa2:	|     |   move.w 10(sp),d0
    cfa6:	|     |   addi.w #-256,d0
    cfaa:	|     |   move.w d0,10(sp)
    cfae:	|  /--|-- bra.s cfdc <CsiCheckInput+0x8c>
        } else if (counterx_diff < -128) {
    cfb0:	|  |  \-> cmpi.w #-129,10(sp)
    cfb6:	|  |  /-- bgt.s cfce <CsiCheckInput+0x7e>
            counterx_diff += 256;
    cfb8:	|  |  |   move.w 10(sp),d0
    cfbc:	|  |  |   addi.w #256,d0
    cfc0:	|  |  |   move.w d0,10(sp)
            input.justMoved = TRUE;
    cfc4:	|  |  |   move.w #1,1c980 <input+0x4>
    cfcc:	|  +--|-- bra.s cfdc <CsiCheckInput+0x8c>
        } else if (counterx_diff) {
    cfce:	|  |  \-> tst.w 10(sp)
    cfd2:	|  +----- beq.s cfdc <CsiCheckInput+0x8c>
            input.justMoved = TRUE;
    cfd4:	|  |      move.w #1,1c980 <input+0x4>
        }

        input.mouseX += counterx_diff;
    cfdc:	|  \----> move.l 1c986 <input+0xa>,d0
    cfe2:	|         movea.w 10(sp),a0
    cfe6:	|         add.l a0,d0
    cfe8:	|         move.l d0,1c986 <input+0xa>

        if( input.mouseX > (int) winWidth) {
    cfee:	|         move.l 1c986 <input+0xa>,d1
    cff4:	|         move.l 1c91e <winWidth>,d0
    cffa:	|         cmp.l d1,d0
    cffc:	|     /-- bge.s d00c <CsiCheckInput+0xbc>
            input.mouseX = winWidth;            
    cffe:	|     |   move.l 1c91e <winWidth>,d0
    d004:	|     |   move.l d0,1c986 <input+0xa>
    d00a:	|  /--|-- bra.s d01a <CsiCheckInput+0xca>
        }
        else if(input.mouseX < 0) {
    d00c:	|  |  \-> move.l 1c986 <input+0xa>,d0
    d012:	|  +----- bpl.s d01a <CsiCheckInput+0xca>
            input.mouseX = 0;
    d014:	|  |      clr.l 1c986 <input+0xa>
        }

        //KPrintF("CsiCheckInput: MouseX = %d\n", input.mouseX);
        counterx_old = counterx_new;
    d01a:	|  \----> clr.w d0
    d01c:	|         move.b (sp),d0
    d01e:	|         move.w d0,1ca62 <counterx_old>
    }    

    if(countery_new)
    d024:	\-------> tst.b 1(sp)
    d028:	/-------- beq.w d0d2 <CsiCheckInput+0x182>
    {
        WORD countery_diff = countery_new - countery_old;
    d02c:	|         clr.w d1
    d02e:	|         move.b 1(sp),d1
    d032:	|         move.w 1ca64 <countery_old>,d0
    d038:	|         sub.w d0,d1
    d03a:	|         move.w d1,8(sp)

        if(countery_diff > 127) {
    d03e:	|         cmpi.w #128,8(sp)
    d044:	|     /-- blt.s d05c <CsiCheckInput+0x10c>
            input.justMoved = TRUE;                
    d046:	|     |   move.w #1,1c980 <input+0x4>
            countery_diff -= 256;    
    d04e:	|     |   move.w 8(sp),d0
    d052:	|     |   addi.w #-256,d0
    d056:	|     |   move.w d0,8(sp)
    d05a:	|  /--|-- bra.s d088 <CsiCheckInput+0x138>
        } else if (countery_diff < -128) {
    d05c:	|  |  \-> cmpi.w #-129,8(sp)
    d062:	|  |  /-- bgt.s d07a <CsiCheckInput+0x12a>
            input.justMoved = TRUE;                
    d064:	|  |  |   move.w #1,1c980 <input+0x4>
            countery_diff += 256;
    d06c:	|  |  |   move.w 8(sp),d0
    d070:	|  |  |   addi.w #256,d0
    d074:	|  |  |   move.w d0,8(sp)
    d078:	|  +--|-- bra.s d088 <CsiCheckInput+0x138>
        } else if (countery_diff) {
    d07a:	|  |  \-> tst.w 8(sp)
    d07e:	|  +----- beq.s d088 <CsiCheckInput+0x138>
            input.justMoved = TRUE;
    d080:	|  |      move.w #1,1c980 <input+0x4>
        }

        input.mouseY += countery_diff;
    d088:	|  \----> move.l 1c98a <input+0xe>,d0
    d08e:	|         movea.w 8(sp),a0
    d092:	|         add.l a0,d0
    d094:	|         move.l d0,1c98a <input+0xe>

        if( input.mouseY > (int) winHeight) {
    d09a:	|         move.l 1c98a <input+0xe>,d1
    d0a0:	|         move.l 1c922 <winHeight>,d0
    d0a6:	|         cmp.l d1,d0
    d0a8:	|     /-- bge.s d0b8 <CsiCheckInput+0x168>
            input.mouseY = winHeight;            
    d0aa:	|     |   move.l 1c922 <winHeight>,d0
    d0b0:	|     |   move.l d0,1c98a <input+0xe>
    d0b6:	|  /--|-- bra.s d0c6 <CsiCheckInput+0x176>
        }
        else if(input.mouseY < 0) {
    d0b8:	|  |  \-> move.l 1c98a <input+0xe>,d0
    d0be:	|  +----- bpl.s d0c6 <CsiCheckInput+0x176>
            input.mouseY = 0;
    d0c0:	|  |      clr.l 1c98a <input+0xe>
        }

        //KPrintF("CsiCheckInput: MouseX = %d\n", input.mouseX);
        countery_old = countery_new;
    d0c6:	|  \----> clr.w d0
    d0c8:	|         move.b 1(sp),d0
    d0cc:	|         move.w d0,1ca64 <countery_old>
    } 

    if(input.leftClick && ((*(volatile UBYTE*)0xbfe001)&64))
    d0d2:	\-------> move.w 1c97c <input>,d0
    d0d8:	      /-- beq.s d0fe <CsiCheckInput+0x1ae>
    d0da:	      |   movea.l #12574721,a0
    d0e0:	      |   move.b (a0),d0
    d0e2:	      |   move.b d0,d0
    d0e4:	      |   andi.l #255,d0
    d0ea:	      |   moveq #64,d1
    d0ec:	      |   and.l d1,d0
    d0ee:	      +-- beq.s d0fe <CsiCheckInput+0x1ae>
    {
        input.leftClick = FALSE;
    d0f0:	      |   clr.w 1c97c <input>
        input.leftRelease = TRUE;
    d0f6:	      |   move.w #1,1c982 <input+0x6>
    }

    if(input.rightClick && ((*(volatile UWORD*)0xdff016)&(1<<10)))
    d0fe:	      \-> move.w 1c97e <input+0x2>,d0
    d104:	      /-- beq.s d12c <CsiCheckInput+0x1dc>
    d106:	      |   movea.l #14675990,a0
    d10c:	      |   move.w (a0),d0
    d10e:	      |   move.w d0,d0
    d110:	      |   andi.l #65535,d0
    d116:	      |   andi.l #1024,d0
    d11c:	      +-- beq.s d12c <CsiCheckInput+0x1dc>
    {
        input.rightClick = FALSE;
    d11e:	      |   clr.w 1c97e <input+0x2>
        input.rightRelease = TRUE;
    d124:	      |   move.w #1,1c984 <input+0x8>
    }


    if(!((*(volatile UBYTE*)0xbfe001)&64)) {
    d12c:	      \-> movea.l #12574721,a0
    d132:	          move.b (a0),d0
    d134:	          move.b d0,d0
    d136:	          andi.l #255,d0
    d13c:	          moveq #64,d1
    d13e:	          and.l d1,d0
    d140:	      /-- bne.s d14a <CsiCheckInput+0x1fa>
        input.leftClick = TRUE;        
    d142:	      |   move.w #1,1c97c <input>
    } 
    if(!((*(volatile UWORD*)0xdff016)&(1<<10)) ) {
    d14a:	      \-> movea.l #14675990,a0
    d150:	          move.w (a0),d0
    d152:	          move.w d0,d0
    d154:	          andi.l #65535,d0
    d15a:	          andi.l #1024,d0
    d160:	      /-- bne.s d16a <CsiCheckInput+0x21a>
        input.rightClick = TRUE;
    d162:	      |   move.w #1,1c97e <input+0x2>
    }

    d16a:	      \-> nop
    d16c:	          lea 12(sp),sp
    d170:	          rts

0000d172 <cacheSound>:

struct soundThing soundCache[MAX_SAMPLES];

int cacheSound (int f) {
//#pragma unused (f)
	return 0;
    d172:	moveq #0,d0
}
    d174:	rts

0000d176 <huntKillFreeSound>:

void huntKillFreeSound (int filenum) {
//#pragma unused(filenum)
}
    d176:	nop
    d178:	rts

0000d17a <huntKillSound>:

void huntKillSound (int filenum) {
//#pragma unused(filenum)
}
    d17a:	nop
    d17c:	rts

0000d17e <playMOD>:
	defVol = get2bytes (fp);
}

BOOL playMOD (int f, int a, int fromTrack) {
//#pragma unused (f,a,fromTrack)
    return TRUE;
    d17e:	moveq #1,d0
}
    d180:	rts

0000d182 <playSoundList>:

void playSoundList(struct soundList *s) {
}
    d182:	nop
    d184:	rts

0000d186 <saveSounds>:

void saveSounds (BPTR fp) {
    d186:	lea -12(sp),sp
    d18a:	move.l a6,-(sp)
    d18c:	move.l d2,-(sp)
	FPutC (fp,0);
    d18e:	move.l 24(sp),16(sp)
    d194:	clr.l 12(sp)
    d198:	move.l 1c9d2 <DOSBase>,d0
    d19e:	movea.l d0,a6
    d1a0:	move.l 16(sp),d1
    d1a4:	move.l 12(sp),d2
    d1a8:	jsr -312(a6)
    d1ac:	move.l d0,8(sp)
	put2bytes (defSoundVol, fp);
    d1b0:	move.l 1c364 <defSoundVol>,d0
    d1b6:	move.l 24(sp),-(sp)
    d1ba:	move.l d0,-(sp)
    d1bc:	jsr 8d0 <put2bytes>
    d1c2:	addq.l #8,sp
	put2bytes (defVol, fp);
    d1c4:	move.l 1c360 <defVol>,d0
    d1ca:	move.l 24(sp),-(sp)
    d1ce:	move.l d0,-(sp)
    d1d0:	jsr 8d0 <put2bytes>
    d1d6:	addq.l #8,sp
}
    d1d8:	nop
    d1da:	move.l (sp)+,d2
    d1dc:	movea.l (sp)+,a6
    d1de:	lea 12(sp),sp
    d1e2:	rts

0000d1e4 <setDefaultMusicVolume>:

void setDefaultMusicVolume (int v) {
	defVol = v;
    d1e4:	move.l 4(sp),1c360 <defVol>
}
    d1ec:	nop
    d1ee:	rts

0000d1f0 <setDefaultSoundVolume>:

void setDefaultSoundVolume (int v) {
	defSoundVol = v;
    d1f0:	move.l 4(sp),1c364 <defSoundVol>
}
    d1f8:	nop
    d1fa:	rts

0000d1fc <setSoundLoop>:

void setSoundLoop (int a, int s, int e) {
//#pragma unused (a,s,e)
}
    d1fc:	nop
    d1fe:	rts

0000d200 <setMusicVolume>:

void setMusicVolume (int a, int v) {
//#pragma unused (a,v)
}
    d200:	nop
    d202:	rts

0000d204 <setSoundVolume>:

void setSoundVolume (int a, int v) {
//#pragma unused (a,v)
}
    d204:	nop
    d206:	rts

0000d208 <startSound>:

BOOL startSound (int f, BOOL loopy) {	
    d208:	subq.l #4,sp
    d20a:	move.l 12(sp),d0
    d20e:	move.w d0,d0
    d210:	move.w d0,2(sp)
//#pragma unused (f,loopy)
	return TRUE;
    d214:	moveq #1,d0
}
    d216:	addq.l #4,sp
    d218:	rts

0000d21a <stopMOD>:

void stopMOD (int i) {
//#pragma unused(i)
    d21a:	nop
    d21c:	rts

0000d21e <blankScreen>:
int viewportWidth = 320;
int viewportOffsetX = 0, viewportOffsetY = 0;
unsigned int snapshotTextureName = 0;

void blankScreen(int x1, int y1, int x2, int y2) {
	CstBlankScreen(x2, y2);
    d21e:	move.l 16(sp),-(sp)
    d222:	move.l 16(sp),-(sp)
    d226:	jsr e0e <CstBlankScreen>
    d22c:	addq.l #8,sp
}
    d22e:	nop
    d230:	rts

0000d232 <darkScreen>:

void darkScreen () {
	KPrintF("darkScreen: Amiga: Graphics Display not implemented yet."); //Todo: Amigize this
    d232:	pea 19441 <PutChar+0x1723>
    d238:	jsr 17254 <KPrintF>
    d23e:	addq.l #4,sp
}
    d240:	nop
    d242:	rts

0000d244 <drawHorizontalLine>:
	//Amiga todo: Maybe some parallaxstuff here?
	//}
}

void drawHorizontalLine (unsigned int x1, unsigned int y, unsigned int x2) {
	drawLine (x1, y, x2, y);
    d244:	movea.l 8(sp),a1
    d248:	movea.l 12(sp),a0
    d24c:	move.l 8(sp),d1
    d250:	move.l 4(sp),d0
    d254:	move.l a1,-(sp)
    d256:	move.l a0,-(sp)
    d258:	move.l d1,-(sp)
    d25a:	move.l d0,-(sp)
    d25c:	jsr 3e8a <drawLine>
    d262:	lea 16(sp),sp
}
    d266:	nop
    d268:	rts

0000d26a <drawVerticalLine>:


void drawVerticalLine (unsigned int x, unsigned int y1, unsigned int y2) {
	drawLine (x, y1, x, y2);
    d26a:	movea.l 12(sp),a1
    d26e:	movea.l 4(sp),a0
    d272:	move.l 8(sp),d1
    d276:	move.l 4(sp),d0
    d27a:	move.l a1,-(sp)
    d27c:	move.l a0,-(sp)
    d27e:	move.l d1,-(sp)
    d280:	move.l d0,-(sp)
    d282:	jsr 3e8a <drawLine>
    d288:	lea 16(sp),sp
}
    d28c:	nop
    d28e:	rts

0000d290 <hardScroll>:

void hardScroll (int distance) {
   	KPrintF("Amiga: Function not implemented."); //Todo: Amigize this
    d290:	pea 1947a <PutChar+0x175c>
    d296:	jsr 17254 <KPrintF>
    d29c:	addq.l #4,sp
}
    d29e:	nop
    d2a0:	rts

0000d2a2 <killBackDrop>:


void killBackDrop () {
	CstFreeBuffer();
    d2a2:	jsr 1c74 <CstFreeBuffer>
	deleteTextures (1, &backdropTextureName);
    d2a8:	pea 1ca6e <backdropTextureName>
    d2ae:	pea 1 <_start+0x1>
    d2b2:	jsr 400c <deleteTextures>
    d2b8:	addq.l #8,sp
	backdropTextureName = 0;
    d2ba:	clr.l 1ca6e <backdropTextureName>
	backdropExists = FALSE;
    d2c0:	clr.w 1ca72 <backdropExists>
}
    d2c6:	nop
    d2c8:	rts

0000d2ca <killParallax>:

void killParallax () {
    d2ca:	          lea -12(sp),sp
    d2ce:	          move.l a6,-(sp)
	while (parallaxStuff) {
    d2d0:	   /----- bra.s d33c <killParallax+0x72>

		struct parallaxLayer * k = parallaxStuff;
    d2d2:	/--|----> move.l 1ca74 <parallaxStuff>,12(sp)
		parallaxStuff = k->next;
    d2da:	|  |      movea.l 12(sp),a0
    d2de:	|  |      move.l 42(a0),d0
    d2e2:	|  |      move.l d0,1ca74 <parallaxStuff>

		// Now kill the image
		deleteTextures (1, &k->textureName);
    d2e8:	|  |      move.l 12(sp),d0
    d2ec:	|  |      addq.l #4,d0
    d2ee:	|  |      move.l d0,-(sp)
    d2f0:	|  |      pea 1 <_start+0x1>
    d2f4:	|  |      jsr 400c <deleteTextures>
    d2fa:	|  |      addq.l #8,sp
		if( k->texture) FreeVec(k->texture);
    d2fc:	|  |      movea.l 12(sp),a0
    d300:	|  |      move.l (a0),d0
    d302:	|  |  /-- beq.s d31c <killParallax+0x52>
    d304:	|  |  |   movea.l 12(sp),a0
    d308:	|  |  |   move.l (a0),8(sp)
    d30c:	|  |  |   move.l 1c9ca <SysBase>,d0
    d312:	|  |  |   movea.l d0,a6
    d314:	|  |  |   movea.l 8(sp),a1
    d318:	|  |  |   jsr -690(a6)
		if( k) FreeVec(k);
    d31c:	|  |  \-> tst.l 12(sp)
    d320:	|  |  /-- beq.s d338 <killParallax+0x6e>
    d322:	|  |  |   move.l 12(sp),4(sp)
    d328:	|  |  |   move.l 1c9ca <SysBase>,d0
    d32e:	|  |  |   movea.l d0,a6
    d330:	|  |  |   movea.l 4(sp),a1
    d334:	|  |  |   jsr -690(a6)
		k = NULL;
    d338:	|  |  \-> clr.l 12(sp)
	while (parallaxStuff) {
    d33c:	|  \----> move.l 1ca74 <parallaxStuff>,d0
    d342:	\-------- bne.s d2d2 <killParallax+0x8>
	}
}
    d344:	          nop
    d346:	          nop
    d348:	          movea.l (sp)+,a6
    d34a:	          lea 12(sp),sp
    d34e:	          rts

0000d350 <loadBackDrop>:

void loadBackDrop (int fileNum, int x, int y) {
	if (! openFileFromNum (fileNum)) {
    d350:	       move.l 4(sp),-(sp)
    d354:	       jsr 6d9e <openFileFromNum>
    d35a:	       addq.l #4,sp
    d35c:	       tst.l d0
    d35e:	   /-- bne.s d370 <loadBackDrop+0x20>
		KPrintF("Can't load overlay image");
    d360:	   |   pea 1949b <PutChar+0x177d>
    d366:	   |   jsr 17254 <KPrintF>
    d36c:	   |   addq.l #4,sp
		return;
    d36e:	/--|-- bra.s d390 <loadBackDrop+0x40>
	}
	CstLoadBackdrop( bigDataFile, x, y);
    d370:	|  \-> move.l 1c9b2 <bigDataFile>,d0
    d376:	|      move.l 12(sp),-(sp)
    d37a:	|      move.l 12(sp),-(sp)
    d37e:	|      move.l d0,-(sp)
    d380:	|      jsr 1f22 <CstLoadBackdrop>
    d386:	|      lea 12(sp),sp
	finishAccess ();
    d38a:	|      jsr 6c96 <finishAccess>
	
}
    d390:	\----> rts

0000d392 <loadParallax>:
	
	backdropExists = TRUE;
	return TRUE;
}

BOOL loadParallax (unsigned short v, unsigned short fracX, unsigned short fracY) {
    d392:	subq.l #8,sp
    d394:	movea.l 12(sp),a0
    d398:	move.l 16(sp),d1
    d39c:	move.l 20(sp),d0
    d3a0:	movea.w a0,a0
    d3a2:	move.w a0,6(sp)
    d3a6:	move.w d1,d1
    d3a8:	move.w d1,4(sp)
    d3ac:	move.w d0,d0
    d3ae:	move.w d0,2(sp)
	KPrintF("loadParallax: Not implemented yet."); //Amiga Todo: Amigize this	
    d3b2:	pea 194ea <PutChar+0x17cc>
    d3b8:	jsr 17254 <KPrintF>
    d3be:	addq.l #4,sp

}
    d3c0:	nop
    d3c2:	addq.l #8,sp
    d3c4:	rts

0000d3c6 <mixBackDrop>:

void mixBackDrop (int fileNum, int x, int y) {
	KPrintF("mixBackdrop: Amiga Graphics Display not implemented yet."); //Todo: Amigize this	
    d3c6:	pea 1950d <PutChar+0x17ef>
    d3cc:	jsr 17254 <KPrintF>
    d3d2:	addq.l #4,sp
}
    d3d4:	nop
    d3d6:	rts

0000d3d8 <nosnapshot>:

void nosnapshot () {
	deleteTextures (1, &snapshotTextureName);
    d3d8:	pea 1ca78 <snapshotTextureName>
    d3de:	pea 1 <_start+0x1>
    d3e2:	jsr 400c <deleteTextures>
    d3e8:	addq.l #8,sp
	snapshotTextureName = 0;
    d3ea:	clr.l 1ca78 <snapshotTextureName>
}
    d3f0:	nop
    d3f2:	rts

0000d3f4 <reserveBackdrop>:

BOOL reserveBackdrop () {	
	cameraX = 0;
    d3f4:	clr.l 1ca84 <cameraX>
	cameraY = 0;
    d3fa:	clr.l 1ca88 <cameraY>
	
	return CstReserveBackdrop(sceneWidth, sceneHeight);
    d400:	move.l 1ca6a <sceneHeight>,d0
    d406:	move.l d0,d1
    d408:	move.l 1ca66 <sceneWidth>,d0
    d40e:	move.l d1,-(sp)
    d410:	move.l d0,-(sp)
    d412:	jsr 3990 <CstReserveBackdrop>
    d418:	addq.l #8,sp
}
    d41a:	rts

0000d41c <resizeBackdrop>:

BOOL resizeBackdrop (int x, int y) {
    killBackDrop ();
    d41c:	jsr d2a2 <killBackDrop>
	killParallax ();
    d422:	jsr d2ca <killParallax>
	killZBuffer ();
    d428:	jsr 8740 <killZBuffer>
	sceneWidth = x;
    d42e:	move.l 4(sp),d0
    d432:	move.l d0,1ca66 <sceneWidth>
	sceneHeight = y;
    d438:	move.l 8(sp),d0
    d43c:	move.l d0,1ca6a <sceneHeight>
	KPrintF("resizeBackdrop: Reserving new Backdrop");
    d442:	pea 19546 <PutChar+0x1828>
    d448:	jsr 17254 <KPrintF>
    d44e:	addq.l #4,sp
	return reserveBackdrop();
    d450:	jsr d3f4 <reserveBackdrop>
	KPrintF("resizeBackdrop: Backdrop reserved");	
}
    d456:	rts

0000d458 <restoreSnapshot>:

BOOL restoreSnapshot (BPTR fp) {
    d458:	subq.l #8,sp
	unsigned int picWidth = get2bytes (fp);
    d45a:	move.l 12(sp),-(sp)
    d45e:	jsr 6bc <get2bytes>
    d464:	addq.l #4,sp
    d466:	move.l d0,4(sp)
	unsigned int picHeight = get2bytes (fp);
    d46a:	move.l 12(sp),-(sp)
    d46e:	jsr 6bc <get2bytes>
    d474:	addq.l #4,sp
    d476:	move.l d0,(sp)

	//Todo: Amigize this?

	return TRUE;
    d478:	moveq #1,d0
}
    d47a:	addq.l #8,sp
    d47c:	rts

0000d47e <saveParallaxRecursive>:

void saveParallaxRecursive (struct parallaxLayer * me, BPTR fp) {
    d47e:	   /-> lea -12(sp),sp
    d482:	   |   move.l a6,-(sp)
    d484:	   |   move.l d2,-(sp)
	if (me) {
    d486:	   |   tst.l 24(sp)
    d48a:	/--|-- beq.w d520 <saveParallaxRecursive+0xa2>
		saveParallaxRecursive (me -> next, fp);
    d48e:	|  |   movea.l 24(sp),a0
    d492:	|  |   move.l 42(a0),d0
    d496:	|  |   move.l 28(sp),-(sp)
    d49a:	|  |   move.l d0,-(sp)
    d49c:	|  \-- jsr d47e <saveParallaxRecursive>(pc)
    d4a0:	|      addq.l #8,sp
		FPutC (fp, 1);
    d4a2:	|      move.l 28(sp),16(sp)
    d4a8:	|      moveq #1,d0
    d4aa:	|      move.l d0,12(sp)
    d4ae:	|      move.l 1c9d2 <DOSBase>,d0
    d4b4:	|      movea.l d0,a6
    d4b6:	|      move.l 16(sp),d1
    d4ba:	|      move.l 12(sp),d2
    d4be:	|      jsr -312(a6)
    d4c2:	|      move.l d0,8(sp)
		put2bytes (me->fileNum, fp);
    d4c6:	|      movea.l 24(sp),a0
    d4ca:	|      move.w 28(a0),d0
    d4ce:	|      move.w d0,d0
    d4d0:	|      andi.l #65535,d0
    d4d6:	|      move.l 28(sp),-(sp)
    d4da:	|      move.l d0,-(sp)
    d4dc:	|      jsr 8d0 <put2bytes>
    d4e2:	|      addq.l #8,sp
		put2bytes (me ->fractionX, fp);
    d4e4:	|      movea.l 24(sp),a0
    d4e8:	|      move.w 30(a0),d0
    d4ec:	|      move.w d0,d0
    d4ee:	|      andi.l #65535,d0
    d4f4:	|      move.l 28(sp),-(sp)
    d4f8:	|      move.l d0,-(sp)
    d4fa:	|      jsr 8d0 <put2bytes>
    d500:	|      addq.l #8,sp
		put2bytes (me->fractionY, fp);
    d502:	|      movea.l 24(sp),a0
    d506:	|      move.w 32(a0),d0
    d50a:	|      move.w d0,d0
    d50c:	|      andi.l #65535,d0
    d512:	|      move.l 28(sp),-(sp)
    d516:	|      move.l d0,-(sp)
    d518:	|      jsr 8d0 <put2bytes>
    d51e:	|      addq.l #8,sp
	}
}
    d520:	\----> nop
    d522:	       move.l (sp)+,d2
    d524:	       movea.l (sp)+,a6
    d526:	       lea 12(sp),sp
    d52a:	       rts

0000d52c <snapshot>:

BOOL snapshot () {

	KPrintF("snapshot: Not yet implemented on Amiga"); //Todo
    d52c:	pea 1956d <PutChar+0x184f>
    d532:	jsr 17254 <KPrintF>
    d538:	addq.l #4,sp
	return TRUE;
    d53a:	moveq #1,d0
    d53c:	rts

0000d53e <findObjectType>:
#include "moreio.h"
#include "support/gcc8_c_support.h"

struct objectType * allObjectTypes = NULL;

struct objectType * findObjectType (int i) {
    d53e:	             subq.l #4,sp
	struct objectType * huntType = allObjectTypes;
    d540:	             move.l 1ca7c <allObjectTypes>,(sp)

	while (huntType) {
    d546:	      /----- bra.s d55e <findObjectType+0x20>
		if (huntType -> objectNum == i) return huntType;
    d548:	   /--|----> movea.l (sp),a0
    d54a:	   |  |      move.l 4(a0),d0
    d54e:	   |  |      cmp.l 8(sp),d0
    d552:	   |  |  /-- bne.s d558 <findObjectType+0x1a>
    d554:	   |  |  |   move.l (sp),d0
    d556:	/--|--|--|-- bra.s d56e <findObjectType+0x30>
		huntType = huntType -> next;
    d558:	|  |  |  \-> movea.l (sp),a0
    d55a:	|  |  |      move.l 8(a0),(sp)
	while (huntType) {
    d55e:	|  |  \----> tst.l (sp)
    d560:	|  \-------- bne.s d548 <findObjectType+0xa>
	}

	return loadObjectType (i);
    d562:	|            move.l 8(sp),-(sp)
    d566:	|            jsr d62e <loadObjectType>
    d56c:	|            addq.l #4,sp
}
    d56e:	\----------> addq.l #4,sp
    d570:	             rts

0000d572 <getCombinationFunction>:

int getCombinationFunction (int withThis, int thisObject) {
    d572:	             lea -12(sp),sp
	int i, num = 0;
    d576:	             clr.l 4(sp)
	struct objectType * obj = findObjectType (thisObject);
    d57a:	             move.l 20(sp),-(sp)
    d57e:	             jsr d53e <findObjectType>
    d584:	             addq.l #4,sp
    d586:	             move.l d0,(sp)

	for (i = 0; i < obj -> numCom; i ++) {
    d588:	             clr.l 8(sp)
    d58c:	   /-------- bra.s d5c2 <getCombinationFunction+0x50>
		if (obj -> allCombis[i].withObj == withThis)
    d58e:	/--|-------> movea.l (sp),a0
    d590:	|  |         move.l 38(a0),d1
    d594:	|  |         move.l 8(sp),d0
    d598:	|  |         lsl.l #3,d0
    d59a:	|  |         movea.l d1,a0
    d59c:	|  |         adda.l d0,a0
    d59e:	|  |         move.l (a0),d0
    d5a0:	|  |         cmp.l 16(sp),d0
    d5a4:	|  |  /----- bne.s d5be <getCombinationFunction+0x4c>
		{
			num = obj -> allCombis[i].funcNum;
    d5a6:	|  |  |      movea.l (sp),a0
    d5a8:	|  |  |      move.l 38(a0),d1
    d5ac:	|  |  |      move.l 8(sp),d0
    d5b0:	|  |  |      lsl.l #3,d0
    d5b2:	|  |  |      movea.l d1,a0
    d5b4:	|  |  |      adda.l d0,a0
    d5b6:	|  |  |      move.l 4(a0),4(sp)
			break;
    d5bc:	|  |  |  /-- bra.s d5ce <getCombinationFunction+0x5c>
	for (i = 0; i < obj -> numCom; i ++) {
    d5be:	|  |  \--|-> addq.l #1,8(sp)
    d5c2:	|  \-----|-> movea.l (sp),a0
    d5c4:	|        |   move.l 16(a0),d0
    d5c8:	|        |   cmp.l 8(sp),d0
    d5cc:	\--------|-- bgt.s d58e <getCombinationFunction+0x1c>
		}
	}

	return num;
    d5ce:	         \-> move.l 4(sp),d0
}
    d5d2:	             lea 12(sp),sp
    d5d6:	             rts

0000d5d8 <initObjectTypes>:

BOOL initObjectTypes () {
	return TRUE;
    d5d8:	moveq #1,d0
}
    d5da:	rts

0000d5dc <loadObjectRef>:

struct objectType * loadObjectRef (BPTR fp) {
    d5dc:	subq.l #8,sp
    d5de:	move.l a6,-(sp)
	struct objectType * r = loadObjectType (get2bytes (fp));
    d5e0:	move.l 16(sp),-(sp)
    d5e4:	jsr 6bc <get2bytes>
    d5ea:	addq.l #4,sp
    d5ec:	move.l d0,-(sp)
    d5ee:	jsr d62e <loadObjectType>
    d5f4:	addq.l #4,sp
    d5f6:	move.l d0,8(sp)
	FreeVec(r -> screenName);
    d5fa:	movea.l 8(sp),a0
    d5fe:	move.l (a0),4(sp)
    d602:	move.l 1c9ca <SysBase>,d0
    d608:	movea.l d0,a6
    d60a:	movea.l 4(sp),a1
    d60e:	jsr -690(a6)
	r -> screenName = readString (fp);
    d612:	move.l 16(sp),-(sp)
    d616:	jsr b02 <readString>
    d61c:	addq.l #4,sp
    d61e:	movea.l 8(sp),a0
    d622:	move.l d0,(a0)
	return r;
    d624:	move.l 8(sp),d0
}
    d628:	movea.l (sp)+,a6
    d62a:	addq.l #8,sp
    d62c:	rts

0000d62e <loadObjectType>:

struct objectType * loadObjectType (int i) {
    d62e:	          lea -84(sp),sp
    d632:	          move.l a6,-(sp)
    d634:	          move.l a2,-(sp)
    int a, nameNum;
    struct objectType * newType = AllocVec(sizeof(struct objectType), MEMF_ANY);
    d636:	          moveq #42,d0
    d638:	          move.l d0,84(sp)
    d63c:	          clr.l 80(sp)
    d640:	          move.l 1c9ca <SysBase>,d0
    d646:	          movea.l d0,a6
    d648:	          move.l 84(sp),d0
    d64c:	          move.l 80(sp),d1
    d650:	          jsr -684(a6)
    d654:	          move.l d0,76(sp)
    d658:	          move.l 76(sp),d0
    d65c:	          move.l d0,72(sp)

    if (newType) {
    d660:	/-------- beq.w d8da <loadObjectType+0x2ac>
        if (openObjectSlice(i)) {
    d664:	|         move.l 96(sp),-(sp)
    d668:	|         jsr 6e66 <openObjectSlice>
    d66e:	|         addq.l #4,sp
    d670:	|         tst.w d0
    d672:	+-------- beq.w d8da <loadObjectType+0x2ac>
            nameNum = get2bytes(bigDataFile);
    d676:	|         move.l 1c9b2 <bigDataFile>,d0
    d67c:	|         move.l d0,-(sp)
    d67e:	|         jsr 6bc <get2bytes>
    d684:	|         addq.l #4,sp
    d686:	|         move.l d0,68(sp)
            newType->r = (BYTE) FGetC(bigDataFile);
    d68a:	|         move.l 1c9b2 <bigDataFile>,64(sp)
    d692:	|         move.l 1c9d2 <DOSBase>,d0
    d698:	|         movea.l d0,a6
    d69a:	|         move.l 64(sp),d1
    d69e:	|         jsr -306(a6)
    d6a2:	|         move.l d0,60(sp)
    d6a6:	|         move.l 60(sp),d0
    d6aa:	|         move.l d0,d0
    d6ac:	|         movea.l 72(sp),a0
    d6b0:	|         move.b d0,12(a0)
            newType->g = (BYTE) FGetC(bigDataFile);
    d6b4:	|         move.l 1c9b2 <bigDataFile>,56(sp)
    d6bc:	|         move.l 1c9d2 <DOSBase>,d0
    d6c2:	|         movea.l d0,a6
    d6c4:	|         move.l 56(sp),d1
    d6c8:	|         jsr -306(a6)
    d6cc:	|         move.l d0,52(sp)
    d6d0:	|         move.l 52(sp),d0
    d6d4:	|         move.l d0,d0
    d6d6:	|         movea.l 72(sp),a0
    d6da:	|         move.b d0,13(a0)
            newType->b = (BYTE) FGetC(bigDataFile);
    d6de:	|         move.l 1c9b2 <bigDataFile>,48(sp)
    d6e6:	|         move.l 1c9d2 <DOSBase>,d0
    d6ec:	|         movea.l d0,a6
    d6ee:	|         move.l 48(sp),d1
    d6f2:	|         jsr -306(a6)
    d6f6:	|         move.l d0,44(sp)
    d6fa:	|         move.l 44(sp),d0
    d6fe:	|         move.l d0,d0
    d700:	|         movea.l 72(sp),a0
    d704:	|         move.b d0,14(a0)
            newType->speechGap = FGetC(bigDataFile);
    d708:	|         move.l 1c9b2 <bigDataFile>,40(sp)
    d710:	|         move.l 1c9d2 <DOSBase>,d0
    d716:	|         movea.l d0,a6
    d718:	|         move.l 40(sp),d1
    d71c:	|         jsr -306(a6)
    d720:	|         move.l d0,36(sp)
    d724:	|         move.l 36(sp),d0
    d728:	|         movea.l 72(sp),a0
    d72c:	|         move.l d0,20(a0)
            newType->walkSpeed = FGetC(bigDataFile);
    d730:	|         move.l 1c9b2 <bigDataFile>,32(sp)
    d738:	|         move.l 1c9d2 <DOSBase>,d0
    d73e:	|         movea.l d0,a6
    d740:	|         move.l 32(sp),d1
    d744:	|         jsr -306(a6)
    d748:	|         move.l d0,28(sp)
    d74c:	|         move.l 28(sp),d0
    d750:	|         movea.l 72(sp),a0
    d754:	|         move.l d0,24(a0)
            newType->wrapSpeech = get4bytes(bigDataFile);
    d758:	|         move.l 1c9b2 <bigDataFile>,d0
    d75e:	|         move.l d0,-(sp)
    d760:	|         jsr 718 <get4bytes>
    d766:	|         addq.l #4,sp
    d768:	|         movea.l 72(sp),a0
    d76c:	|         move.l d0,28(a0)
            newType->spinSpeed = get2bytes(bigDataFile);
    d770:	|         move.l 1c9b2 <bigDataFile>,d0
    d776:	|         move.l d0,-(sp)
    d778:	|         jsr 6bc <get2bytes>
    d77e:	|         addq.l #4,sp
    d780:	|         movea.l 72(sp),a0
    d784:	|         move.l d0,32(a0)

            FGetC(bigDataFile);
    d788:	|         move.l 1c9b2 <bigDataFile>,24(sp)
    d790:	|         move.l 1c9d2 <DOSBase>,d0
    d796:	|         movea.l d0,a6
    d798:	|         move.l 24(sp),d1
    d79c:	|         jsr -306(a6)
    d7a0:	|         move.l d0,20(sp)
            getFloat(bigDataFile);
    d7a4:	|         move.l 1c9b2 <bigDataFile>,d0
    d7aa:	|         move.l d0,-(sp)
    d7ac:	|         jsr 7d8 <getFloat>
    d7b2:	|         addq.l #4,sp
            getFloat(bigDataFile);
    d7b4:	|         move.l 1c9b2 <bigDataFile>,d0
    d7ba:	|         move.l d0,-(sp)
    d7bc:	|         jsr 7d8 <getFloat>
    d7c2:	|         addq.l #4,sp

            newType->flags = get2bytes(bigDataFile);
    d7c4:	|         move.l 1c9b2 <bigDataFile>,d0
    d7ca:	|         move.l d0,-(sp)
    d7cc:	|         jsr 6bc <get2bytes>
    d7d2:	|         addq.l #4,sp
    d7d4:	|         move.l d0,d0
    d7d6:	|         movea.l 72(sp),a0
    d7da:	|         move.w d0,36(a0)

            newType->numCom = get2bytes(bigDataFile);
    d7de:	|         move.l 1c9b2 <bigDataFile>,d0
    d7e4:	|         move.l d0,-(sp)
    d7e6:	|         jsr 6bc <get2bytes>
    d7ec:	|         addq.l #4,sp
    d7ee:	|         movea.l 72(sp),a0
    d7f2:	|         move.l d0,16(a0)
            newType->allCombis = (newType->numCom) ? AllocVec(sizeof(struct combination) * newType->numCom, MEMF_ANY) : NULL;
    d7f6:	|         movea.l 72(sp),a0
    d7fa:	|         move.l 16(a0),d0
    d7fe:	|  /----- beq.s d830 <loadObjectType+0x202>
    d800:	|  |      movea.l 72(sp),a0
    d804:	|  |      move.l 16(a0),d0
    d808:	|  |      lsl.l #3,d0
    d80a:	|  |      move.l d0,16(sp)
    d80e:	|  |      clr.l 12(sp)
    d812:	|  |      move.l 1c9ca <SysBase>,d0
    d818:	|  |      movea.l d0,a6
    d81a:	|  |      move.l 16(sp),d0
    d81e:	|  |      move.l 12(sp),d1
    d822:	|  |      jsr -684(a6)
    d826:	|  |      move.l d0,8(sp)
    d82a:	|  |      move.l 8(sp),d0
    d82e:	|  |  /-- bra.s d832 <loadObjectType+0x204>
    d830:	|  \--|-> moveq #0,d0
    d832:	|     \-> movea.l 72(sp),a0
    d836:	|         move.l d0,38(a0)

            for (a = 0; a < newType->numCom; a++) {
    d83a:	|         clr.l 88(sp)
    d83e:	|     /-- bra.s d88e <loadObjectType+0x260>
                newType->allCombis[a].withObj = get2bytes(bigDataFile);
    d840:	|  /--|-> move.l 1c9b2 <bigDataFile>,d1
    d846:	|  |  |   movea.l 72(sp),a0
    d84a:	|  |  |   movea.l 38(a0),a0
    d84e:	|  |  |   move.l 88(sp),d0
    d852:	|  |  |   lsl.l #3,d0
    d854:	|  |  |   lea (0,a0,d0.l),a2
    d858:	|  |  |   move.l d1,-(sp)
    d85a:	|  |  |   jsr 6bc <get2bytes>
    d860:	|  |  |   addq.l #4,sp
    d862:	|  |  |   move.l d0,(a2)
                newType->allCombis[a].funcNum = get2bytes(bigDataFile);
    d864:	|  |  |   move.l 1c9b2 <bigDataFile>,d1
    d86a:	|  |  |   movea.l 72(sp),a0
    d86e:	|  |  |   movea.l 38(a0),a0
    d872:	|  |  |   move.l 88(sp),d0
    d876:	|  |  |   lsl.l #3,d0
    d878:	|  |  |   lea (0,a0,d0.l),a2
    d87c:	|  |  |   move.l d1,-(sp)
    d87e:	|  |  |   jsr 6bc <get2bytes>
    d884:	|  |  |   addq.l #4,sp
    d886:	|  |  |   move.l d0,4(a2)
            for (a = 0; a < newType->numCom; a++) {
    d88a:	|  |  |   addq.l #1,88(sp)
    d88e:	|  |  \-> movea.l 72(sp),a0
    d892:	|  |      move.l 16(a0),d0
    d896:	|  |      cmp.l 88(sp),d0
    d89a:	|  \----- bgt.s d840 <loadObjectType+0x212>
            }
            finishAccess();
    d89c:	|         jsr 6c96 <finishAccess>
            newType->screenName = getNumberedString(nameNum);
    d8a2:	|         move.l 68(sp),-(sp)
    d8a6:	|         jsr 6ca0 <getNumberedString>
    d8ac:	|         addq.l #4,sp
    d8ae:	|         movea.l 72(sp),a0
    d8b2:	|         move.l d0,(a0)
            newType->objectNum = i;
    d8b4:	|         movea.l 72(sp),a0
    d8b8:	|         move.l 96(sp),4(a0)
            newType->next = allObjectTypes;
    d8be:	|         move.l 1ca7c <allObjectTypes>,d0
    d8c4:	|         movea.l 72(sp),a0
    d8c8:	|         move.l d0,8(a0)
            allObjectTypes = newType;
    d8cc:	|         move.l 72(sp),1ca7c <allObjectTypes>
            return newType;
    d8d4:	|         move.l 72(sp),d0
    d8d8:	|     /-- bra.s d8dc <loadObjectType+0x2ae>
        }
    }
    return NULL;
    d8da:	\-----|-> moveq #0,d0
}
    d8dc:	      \-> movea.l (sp)+,a2
    d8de:	          movea.l (sp)+,a6
    d8e0:	          lea 84(sp),sp
    d8e4:	          rts

0000d8e6 <removeObjectType>:


void removeObjectType (struct objectType * oT) {
    d8e6:	             lea -16(sp),sp
    d8ea:	             move.l a6,-(sp)
	struct objectType * * huntRegion = &allObjectTypes;
    d8ec:	             move.l #117372,16(sp)

	while (* huntRegion) {
    d8f4:	   /-------- bra.s d968 <removeObjectType+0x82>
		if ((* huntRegion) == oT) {
    d8f6:	/--|-------> movea.l 16(sp),a0
    d8fa:	|  |         move.l (a0),d0
    d8fc:	|  |         cmp.l 24(sp),d0
    d900:	|  |  /----- bne.s d95a <removeObjectType+0x74>
//			FILE * debuggy2 = fopen ("debug.txt", "at");
//			fprintf (debuggy2, "DELETING OBJECT TYPE: %p %s\n", oT, oT -> screenName);
//			fclose (debuggy2);

			* huntRegion = oT -> next;
    d902:	|  |  |      movea.l 24(sp),a0
    d906:	|  |  |      move.l 8(a0),d0
    d90a:	|  |  |      movea.l 16(sp),a0
    d90e:	|  |  |      move.l d0,(a0)
			FreeVec(oT -> allCombis);
    d910:	|  |  |      movea.l 24(sp),a0
    d914:	|  |  |      move.l 38(a0),12(sp)
    d91a:	|  |  |      move.l 1c9ca <SysBase>,d0
    d920:	|  |  |      movea.l d0,a6
    d922:	|  |  |      movea.l 12(sp),a1
    d926:	|  |  |      jsr -690(a6)
			FreeVec(oT -> screenName);
    d92a:	|  |  |      movea.l 24(sp),a0
    d92e:	|  |  |      move.l (a0),8(sp)
    d932:	|  |  |      move.l 1c9ca <SysBase>,d0
    d938:	|  |  |      movea.l d0,a6
    d93a:	|  |  |      movea.l 8(sp),a1
    d93e:	|  |  |      jsr -690(a6)
			FreeVec(oT);
    d942:	|  |  |      move.l 24(sp),4(sp)
    d948:	|  |  |      move.l 1c9ca <SysBase>,d0
    d94e:	|  |  |      movea.l d0,a6
    d950:	|  |  |      movea.l 4(sp),a1
    d954:	|  |  |      jsr -690(a6)
			return;
    d958:	|  |  |  /-- bra.s d97e <removeObjectType+0x98>
		} else {
			huntRegion = & ((* huntRegion) -> next);
    d95a:	|  |  \--|-> movea.l 16(sp),a0
    d95e:	|  |     |   move.l (a0),d0
    d960:	|  |     |   move.l d0,d1
    d962:	|  |     |   addq.l #8,d1
    d964:	|  |     |   move.l d1,16(sp)
	while (* huntRegion) {
    d968:	|  \-----|-> movea.l 16(sp),a0
    d96c:	|        |   move.l (a0),d0
    d96e:	\--------|-- bne.s d8f6 <removeObjectType+0x10>
		}
	}
	KPrintF("Can't delete object type: bad pointer");
    d970:	         |   pea 19594 <PutChar+0x1876>
    d976:	         |   jsr 17254 <KPrintF>
    d97c:	         |   addq.l #4,sp
}
    d97e:	         \-> movea.l (sp)+,a6
    d980:	             lea 16(sp),sp
    d984:	             rts

0000d986 <saveObjectRef>:

void saveObjectRef (struct objectType * r, BPTR fp) {
	put2bytes (r -> objectNum, fp);
    d986:	movea.l 4(sp),a0
    d98a:	move.l 4(a0),d0
    d98e:	move.l 8(sp),-(sp)
    d992:	move.l d0,-(sp)
    d994:	jsr 8d0 <put2bytes>
    d99a:	addq.l #8,sp
	writeString (r -> screenName, fp);
    d99c:	movea.l 4(sp),a0
    d9a0:	move.l (a0),d0
    d9a2:	move.l 8(sp),-(sp)
    d9a6:	move.l d0,-(sp)
    d9a8:	jsr bd8 <writeString>
    d9ae:	addq.l #8,sp
    d9b0:	nop
    d9b2:	rts

0000d9b4 <fileToStack>:

char encode1 = 0;
char encode2 = 0;
unsigned short saveEncoding = FALSE;

BOOL fileToStack(char *filename, struct stackHandler *sH) {
    d9b4:	                         lea -112(sp),sp
    d9b8:	                         move.l a6,-(sp)
    d9ba:	                         move.l d2,-(sp)
    struct variable stringVar;
    stringVar.varType = SVT_NULL;
    d9bc:	                         clr.l 10(sp)
    const char *checker = saveEncoding ? "[Custom data (encoded)]\r\n" : "[Custom data (ASCII)]\n";
    d9c0:	                         move.w 1ca82 <saveEncoding>,d0
    d9c6:	                  /----- beq.s d9d0 <fileToStack+0x1c>
    d9c8:	                  |      move.l #103866,d0
    d9ce:	                  |  /-- bra.s d9d6 <fileToStack+0x22>
    d9d0:	                  \--|-> move.l #103892,d0
    d9d6:	                     \-> move.l d0,116(sp)

    BPTR fp = Open(filename, MODE_OLDFILE);
    d9da:	                         move.l 124(sp),112(sp)
    d9e0:	                         move.l #1005,108(sp)
    d9e8:	                         move.l 1c9d2 <DOSBase>,d0
    d9ee:	                         movea.l d0,a6
    d9f0:	                         move.l 112(sp),d1
    d9f4:	                         move.l 108(sp),d2
    d9f8:	                         jsr -30(a6)
    d9fc:	                         move.l d0,104(sp)
    da00:	                         move.l 104(sp),d0
    da04:	                         move.l d0,100(sp)
    if (!fp) {
    da08:	                     /-- bne.s da22 <fileToStack+0x6e>
        KPrintF("No such file", filename);
    da0a:	                     |   move.l 124(sp),-(sp)
    da0e:	                     |   pea 195eb <PutChar+0x18cd>
    da14:	                     |   jsr 17254 <KPrintF>
    da1a:	                     |   addq.l #8,sp
        return FALSE;
    da1c:	                     |   clr.w d0
    da1e:	/--------------------|-- bra.w dd18 <fileToStack+0x364>
    }

    encode1 = (unsigned char)saveEncoding & 255;
    da22:	|                    \-> move.w 1ca82 <saveEncoding>,d0
    da28:	|                        move.l d0,d0
    da2a:	|                        move.b d0,1ca80 <encode1>
    encode2 = (unsigned char)(saveEncoding >> 8);
    da30:	|                        move.w 1ca82 <saveEncoding>,d0
    da36:	|                        lsr.w #8,d0
    da38:	|                        move.l d0,d0
    da3a:	|                        move.b d0,1ca81 <encode2>

    while (*checker) {
    da40:	|                 /----- bra.s daa4 <fileToStack+0xf0>
        if (FGetC(fp) != *checker) {
    da42:	|              /--|----> move.l 100(sp),30(sp)
    da48:	|              |  |      move.l 1c9d2 <DOSBase>,d0
    da4e:	|              |  |      movea.l d0,a6
    da50:	|              |  |      move.l 30(sp),d1
    da54:	|              |  |      jsr -306(a6)
    da58:	|              |  |      move.l d0,26(sp)
    da5c:	|              |  |      move.l 26(sp),d1
    da60:	|              |  |      movea.l 116(sp),a0
    da64:	|              |  |      move.b (a0),d0
    da66:	|              |  |      ext.w d0
    da68:	|              |  |      movea.w d0,a0
    da6a:	|              |  |      cmpa.l d1,a0
    da6c:	|              |  |  /-- beq.s daa0 <fileToStack+0xec>
            Close(fp);
    da6e:	|              |  |  |   move.l 100(sp),22(sp)
    da74:	|              |  |  |   move.l 1c9d2 <DOSBase>,d0
    da7a:	|              |  |  |   movea.l d0,a6
    da7c:	|              |  |  |   move.l 22(sp),d1
    da80:	|              |  |  |   jsr -36(a6)
    da84:	|              |  |  |   move.l d0,18(sp)
            KPrintF(LOAD_ERROR "This isn't a SLUDGE custom data file:", filename);
    da88:	|              |  |  |   move.l 124(sp),-(sp)
    da8c:	|              |  |  |   pea 195f8 <PutChar+0x18da>
    da92:	|              |  |  |   jsr 17254 <KPrintF>
    da98:	|              |  |  |   addq.l #8,sp
            return FALSE;
    da9a:	|              |  |  |   clr.w d0
    da9c:	+--------------|--|--|-- bra.w dd18 <fileToStack+0x364>
        }
        checker++;
    daa0:	|              |  |  \-> addq.l #1,116(sp)
    while (*checker) {
    daa4:	|              |  \----> movea.l 116(sp),a0
    daa8:	|              |         move.b (a0),d0
    daaa:	|              \-------- bne.s da42 <fileToStack+0x8e>
    }

    if (saveEncoding) {
    daac:	|                        move.w 1ca82 <saveEncoding>,d0
    dab2:	|  /-------------------- beq.s db26 <fileToStack+0x172>
        char *checker = readStringEncoded(fp);
    dab4:	|  |                     move.l 100(sp),-(sp)
    dab8:	|  |                     jsr dd22 <readStringEncoded>
    dabe:	|  |                     addq.l #4,sp
    dac0:	|  |                     move.l d0,96(sp)
        if (strcmp(checker, "UN�LO�CKED")) {
    dac4:	|  |                     pea 19639 <PutChar+0x191b>
    daca:	|  |                     move.l 100(sp),-(sp)
    dace:	|  |                     jsr 13ca0 <strcmp>
    dad4:	|  |                     addq.l #8,sp
    dad6:	|  |                     tst.l d0
    dad8:	|  |                 /-- beq.s db0c <fileToStack+0x158>
            Close(fp);
    dada:	|  |                 |   move.l 100(sp),88(sp)
    dae0:	|  |                 |   move.l 1c9d2 <DOSBase>,d0
    dae6:	|  |                 |   movea.l d0,a6
    dae8:	|  |                 |   move.l 88(sp),d1
    daec:	|  |                 |   jsr -36(a6)
    daf0:	|  |                 |   move.l d0,84(sp)
            KPrintF(LOAD_ERROR "The current file encoding setting does not match the encoding setting used when this file was created:", filename);
    daf4:	|  |                 |   move.l 124(sp),-(sp)
    daf8:	|  |                 |   pea 19648 <PutChar+0x192a>
    dafe:	|  |                 |   jsr 17254 <KPrintF>
    db04:	|  |                 |   addq.l #8,sp
            return FALSE;
    db06:	|  |                 |   clr.w d0
    db08:	+--|-----------------|-- bra.w dd18 <fileToStack+0x364>
        }
        FreeVec(checker);
    db0c:	|  |                 \-> move.l 96(sp),92(sp)
    db12:	|  |                     move.l 1c9ca <SysBase>,d0
    db18:	|  |                     movea.l d0,a6
    db1a:	|  |                     movea.l 92(sp),a1
    db1e:	|  |                     jsr -690(a6)
        checker = NULL;
    db22:	|  |                     clr.l 96(sp)
    }

    for (;;) {
        if (saveEncoding) {
    db26:	|  >-------------------> move.w 1ca82 <saveEncoding>,d0
    db2c:	|  |     /-------------- beq.w dc60 <fileToStack+0x2ac>
            LONG tmp = FGetC(fp) ^ encode1;
    db30:	|  |     |               move.l 100(sp),76(sp)
    db36:	|  |     |               move.l 1c9d2 <DOSBase>,d0
    db3c:	|  |     |               movea.l d0,a6
    db3e:	|  |     |               move.l 76(sp),d1
    db42:	|  |     |               jsr -306(a6)
    db46:	|  |     |               move.l d0,72(sp)
    db4a:	|  |     |               move.l 72(sp),d0
    db4e:	|  |     |               move.b 1ca80 <encode1>,d1
    db54:	|  |     |               ext.w d1
    db56:	|  |     |               ext.l d1
    db58:	|  |     |               move.l d0,d2
    db5a:	|  |     |               eor.l d1,d2
    db5c:	|  |     |               move.l d2,68(sp)

            if (tmp == -1) break;
    db60:	|  |     |               moveq #-1,d0
    db62:	|  |     |               cmp.l 68(sp),d0
    db66:	|  |  /--|-------------- beq.w dcf6 <fileToStack+0x342>

            char i = (char) tmp;
    db6a:	|  |  |  |               move.b 71(sp),67(sp)

            switch (i) {
    db70:	|  |  |  |               move.b 67(sp),d0
    db74:	|  |  |  |               ext.w d0
    db76:	|  |  |  |               movea.w d0,a0
    db78:	|  |  |  |               moveq #2,d2
    db7a:	|  |  |  |               cmp.l a0,d2
    db7c:	|  |  |  |     /-------- beq.s dbf8 <fileToStack+0x244>
    db7e:	|  |  |  |     |         moveq #2,d0
    db80:	|  |  |  |     |         cmp.l a0,d0
    db82:	|  |  |  |  /--|-------- blt.w dc2e <fileToStack+0x27a>
    db86:	|  |  |  |  |  |         cmpa.w #0,a0
    db8a:	|  |  |  |  |  |     /-- beq.s db96 <fileToStack+0x1e2>
    db8c:	|  |  |  |  |  |     |   moveq #1,d2
    db8e:	|  |  |  |  |  |     |   cmp.l a0,d2
    db90:	|  |  |  |  |  |  /--|-- beq.s dbd2 <fileToStack+0x21e>
    db92:	|  |  |  |  +--|--|--|-- bra.w dc2e <fileToStack+0x27a>
                case 0: {
                    char *g = readStringEncoded(fp);
    db96:	|  |  |  |  |  |  |  \-> move.l 100(sp),-(sp)
    db9a:	|  |  |  |  |  |  |      jsr dd22 <readStringEncoded>
    dba0:	|  |  |  |  |  |  |      addq.l #4,sp
    dba2:	|  |  |  |  |  |  |      move.l d0,54(sp)
                    makeTextVar(&stringVar, g);
    dba6:	|  |  |  |  |  |  |      move.l 54(sp),-(sp)
    dbaa:	|  |  |  |  |  |  |      lea 14(sp),a0
    dbae:	|  |  |  |  |  |  |      move.l a0,-(sp)
    dbb0:	|  |  |  |  |  |  |      jsr 14a16 <makeTextVar>
    dbb6:	|  |  |  |  |  |  |      addq.l #8,sp
                    FreeVec(g);
    dbb8:	|  |  |  |  |  |  |      move.l 54(sp),50(sp)
    dbbe:	|  |  |  |  |  |  |      move.l 1c9ca <SysBase>,d0
    dbc4:	|  |  |  |  |  |  |      movea.l d0,a6
    dbc6:	|  |  |  |  |  |  |      movea.l 50(sp),a1
    dbca:	|  |  |  |  |  |  |      jsr -690(a6)
                }
                break;
    dbce:	|  |  |  |  |  |  |  /-- bra.w dc86 <fileToStack+0x2d2>

                case 1:
                    setVariable(&stringVar, SVT_INT, get4bytes(fp));
    dbd2:	|  |  |  |  |  |  \--|-> move.l 100(sp),-(sp)
    dbd6:	|  |  |  |  |  |     |   jsr 718 <get4bytes>
    dbdc:	|  |  |  |  |  |     |   addq.l #4,sp
    dbde:	|  |  |  |  |  |     |   move.l d0,-(sp)
    dbe0:	|  |  |  |  |  |     |   pea 1 <_start+0x1>
    dbe4:	|  |  |  |  |  |     |   lea 18(sp),a0
    dbe8:	|  |  |  |  |  |     |   move.l a0,-(sp)
    dbea:	|  |  |  |  |  |     |   jsr 150e6 <setVariable>
    dbf0:	|  |  |  |  |  |     |   lea 12(sp),sp
                    break;
    dbf4:	|  |  |  |  |  |     +-- bra.w dc86 <fileToStack+0x2d2>

                case 2:
                    setVariable(&stringVar, SVT_INT, FGetC(fp));
    dbf8:	|  |  |  |  |  \-----|-> move.l 100(sp),62(sp)
    dbfe:	|  |  |  |  |        |   move.l 1c9d2 <DOSBase>,d0
    dc04:	|  |  |  |  |        |   movea.l d0,a6
    dc06:	|  |  |  |  |        |   move.l 62(sp),d1
    dc0a:	|  |  |  |  |        |   jsr -306(a6)
    dc0e:	|  |  |  |  |        |   move.l d0,58(sp)
    dc12:	|  |  |  |  |        |   move.l 58(sp),d0
    dc16:	|  |  |  |  |        |   move.l d0,-(sp)
    dc18:	|  |  |  |  |        |   pea 1 <_start+0x1>
    dc1c:	|  |  |  |  |        |   lea 18(sp),a0
    dc20:	|  |  |  |  |        |   move.l a0,-(sp)
    dc22:	|  |  |  |  |        |   jsr 150e6 <setVariable>
    dc28:	|  |  |  |  |        |   lea 12(sp),sp
                    break;
    dc2c:	|  |  |  |  |        +-- bra.s dc86 <fileToStack+0x2d2>

                default:
                    KPrintF(LOAD_ERROR "Corrupt custom data file:", filename);
    dc2e:	|  |  |  |  \--------|-> move.l 124(sp),-(sp)
    dc32:	|  |  |  |           |   pea 196ca <PutChar+0x19ac>
    dc38:	|  |  |  |           |   jsr 17254 <KPrintF>
    dc3e:	|  |  |  |           |   addq.l #8,sp
                    Close(fp);
    dc40:	|  |  |  |           |   move.l 100(sp),46(sp)
    dc46:	|  |  |  |           |   move.l 1c9d2 <DOSBase>,d0
    dc4c:	|  |  |  |           |   movea.l d0,a6
    dc4e:	|  |  |  |           |   move.l 46(sp),d1
    dc52:	|  |  |  |           |   jsr -36(a6)
    dc56:	|  |  |  |           |   move.l d0,42(sp)
                    return FALSE;
    dc5a:	|  |  |  |           |   clr.w d0
    dc5c:	+--|--|--|-----------|-- bra.w dd18 <fileToStack+0x364>
            }
        } else {
            char *line = readTextPlain(fp);
    dc60:	|  |  |  \-----------|-> move.l 100(sp),-(sp)
    dc64:	|  |  |              |   jsr dde8 <readTextPlain>
    dc6a:	|  |  |              |   addq.l #4,sp
    dc6c:	|  |  |              |   move.l d0,80(sp)
            if (!line) break;
    dc70:	|  |  |        /-----|-- beq.w dcfa <fileToStack+0x346>
            makeTextVar(&stringVar, line);
    dc74:	|  |  |        |     |   move.l 80(sp),-(sp)
    dc78:	|  |  |        |     |   lea 14(sp),a0
    dc7c:	|  |  |        |     |   move.l a0,-(sp)
    dc7e:	|  |  |        |     |   jsr 14a16 <makeTextVar>
    dc84:	|  |  |        |     |   addq.l #8,sp
        }

        if (sH->first == NULL) {
    dc86:	|  |  |        |     \-> movea.l 128(sp),a0
    dc8a:	|  |  |        |         move.l (a0),d0
    dc8c:	|  |  |        |  /----- bne.s dcbc <fileToStack+0x308>
            // Adds to the TOP of the array... oops!
            if (!addVarToStackQuick(&stringVar, &sH->first)) return FALSE;
    dc8e:	|  |  |        |  |      move.l 128(sp),d0
    dc92:	|  |  |        |  |      move.l d0,-(sp)
    dc94:	|  |  |        |  |      lea 14(sp),a0
    dc98:	|  |  |        |  |      move.l a0,-(sp)
    dc9a:	|  |  |        |  |      jsr 140b6 <addVarToStackQuick>
    dca0:	|  |  |        |  |      addq.l #8,sp
    dca2:	|  |  |        |  |      tst.w d0
    dca4:	|  |  |        |  |  /-- bne.s dcaa <fileToStack+0x2f6>
    dca6:	|  |  |        |  |  |   clr.w d0
    dca8:	+--|--|--------|--|--|-- bra.s dd18 <fileToStack+0x364>
            sH->last = sH->first;
    dcaa:	|  |  |        |  |  \-> movea.l 128(sp),a0
    dcae:	|  |  |        |  |      move.l (a0),d0
    dcb0:	|  |  |        |  |      movea.l 128(sp),a0
    dcb4:	|  |  |        |  |      move.l d0,4(a0)
    dcb8:	|  +--|--------|--|----- bra.w db26 <fileToStack+0x172>
        } else {
            // Adds to the END of the array... much better
            if (!addVarToStackQuick(&stringVar, &sH->last->next)) return FALSE;
    dcbc:	|  |  |        |  \----> movea.l 128(sp),a0
    dcc0:	|  |  |        |         move.l 4(a0),d0
    dcc4:	|  |  |        |         addq.l #8,d0
    dcc6:	|  |  |        |         move.l d0,-(sp)
    dcc8:	|  |  |        |         lea 14(sp),a0
    dccc:	|  |  |        |         move.l a0,-(sp)
    dcce:	|  |  |        |         jsr 140b6 <addVarToStackQuick>
    dcd4:	|  |  |        |         addq.l #8,sp
    dcd6:	|  |  |        |         tst.w d0
    dcd8:	|  |  |        |     /-- bne.s dcde <fileToStack+0x32a>
    dcda:	|  |  |        |     |   clr.w d0
    dcdc:	+--|--|--------|-----|-- bra.s dd18 <fileToStack+0x364>
            sH->last = sH->last->next;
    dcde:	|  |  |        |     \-> movea.l 128(sp),a0
    dce2:	|  |  |        |         movea.l 4(a0),a0
    dce6:	|  |  |        |         move.l 8(a0),d0
    dcea:	|  |  |        |         movea.l 128(sp),a0
    dcee:	|  |  |        |         move.l d0,4(a0)
        if (saveEncoding) {
    dcf2:	|  \--|--------|-------- bra.w db26 <fileToStack+0x172>
            if (tmp == -1) break;
    dcf6:	|     \--------|-------> nop
    dcf8:	|              |     /-- bra.s dcfc <fileToStack+0x348>
            if (!line) break;
    dcfa:	|              \-----|-> nop
        }
    }
    Close(fp);
    dcfc:	|                    \-> move.l 100(sp),38(sp)
    dd02:	|                        move.l 1c9d2 <DOSBase>,d0
    dd08:	|                        movea.l d0,a6
    dd0a:	|                        move.l 38(sp),d1
    dd0e:	|                        jsr -36(a6)
    dd12:	|                        move.l d0,34(sp)
    return TRUE;
    dd16:	|                        moveq #1,d0
}
    dd18:	\----------------------> move.l (sp)+,d2
    dd1a:	                         movea.l (sp)+,a6
    dd1c:	                         lea 112(sp),sp
    dd20:	                         rts

0000dd22 <readStringEncoded>:

char *readStringEncoded(BPTR fp) {
    dd22:	          lea -32(sp),sp
    dd26:	          move.l a6,-(sp)
    dd28:	          move.l d2,-(sp)
    int a, len = get2bytes(fp);
    dd2a:	          move.l 44(sp),-(sp)
    dd2e:	          jsr 6bc <get2bytes>
    dd34:	          addq.l #4,sp
    dd36:	          move.l d0,32(sp)
    char *s = AllocVec(len + 1, MEMF_ANY);
    dd3a:	          move.l 32(sp),d0
    dd3e:	          addq.l #1,d0
    dd40:	          move.l d0,28(sp)
    dd44:	          clr.l 24(sp)
    dd48:	          move.l 1c9ca <SysBase>,d0
    dd4e:	          movea.l d0,a6
    dd50:	          move.l 28(sp),d0
    dd54:	          move.l 24(sp),d1
    dd58:	          jsr -684(a6)
    dd5c:	          move.l d0,20(sp)
    dd60:	          move.l 20(sp),d0
    dd64:	          move.l d0,16(sp)
    if (!s) return NULL;
    dd68:	      /-- bne.s dd6e <readStringEncoded+0x4c>
    dd6a:	      |   moveq #0,d0
    dd6c:	/-----|-- bra.s ddde <readStringEncoded+0xbc>
    for (a = 0; a < len; a++) {
    dd6e:	|     \-> clr.l 36(sp)
    dd72:	|     /-- bra.s ddc4 <readStringEncoded+0xa2>
        s[a] = (char)(FGetC(fp) ^ encode1);
    dd74:	|  /--|-> move.l 44(sp),12(sp)
    dd7a:	|  |  |   move.l 1c9d2 <DOSBase>,d0
    dd80:	|  |  |   movea.l d0,a6
    dd82:	|  |  |   move.l 12(sp),d1
    dd86:	|  |  |   jsr -306(a6)
    dd8a:	|  |  |   move.l d0,8(sp)
    dd8e:	|  |  |   move.l 8(sp),d0
    dd92:	|  |  |   move.l d0,d1
    dd94:	|  |  |   move.b 1ca80 <encode1>,d2
    dd9a:	|  |  |   move.l 36(sp),d0
    dd9e:	|  |  |   movea.l 16(sp),a0
    dda2:	|  |  |   adda.l d0,a0
    dda4:	|  |  |   move.b d1,d0
    dda6:	|  |  |   eor.b d2,d0
    dda8:	|  |  |   move.b d0,(a0)
        encode1 += encode2;
    ddaa:	|  |  |   move.b 1ca80 <encode1>,d0
    ddb0:	|  |  |   move.b d0,d1
    ddb2:	|  |  |   move.b 1ca81 <encode2>,d0
    ddb8:	|  |  |   add.b d1,d0
    ddba:	|  |  |   move.b d0,1ca80 <encode1>
    for (a = 0; a < len; a++) {
    ddc0:	|  |  |   addq.l #1,36(sp)
    ddc4:	|  |  \-> move.l 36(sp),d0
    ddc8:	|  |      cmp.l 32(sp),d0
    ddcc:	|  \----- blt.s dd74 <readStringEncoded+0x52>
    }
    s[len] = 0;
    ddce:	|         move.l 32(sp),d0
    ddd2:	|         movea.l 16(sp),a0
    ddd6:	|         adda.l d0,a0
    ddd8:	|         clr.b (a0)
    return s;
    ddda:	|         move.l 16(sp),d0
}
    ddde:	\-------> move.l (sp)+,d2
    dde0:	          movea.l (sp)+,a6
    dde2:	          lea 32(sp),sp
    dde6:	          rts

0000dde8 <readTextPlain>:

char *readTextPlain(BPTR fp) {
    dde8:	             lea -104(sp),sp
    ddec:	             movem.l d2-d4/a6,-(sp)
    ULONG startPos;
    int stringSize = 0;
    ddf0:	             clr.l 116(sp)
    BOOL keepGoing = TRUE;
    ddf4:	             move.w #1,114(sp)
    char gotChar;
    char *reply;

    startPos = Seek(fp, 0, OFFSET_CURRENT);
    ddfa:	             move.l 124(sp),106(sp)
    de00:	             clr.l 102(sp)
    de04:	             clr.l 98(sp)
    de08:	             move.l 1c9d2 <DOSBase>,d0
    de0e:	             movea.l d0,a6
    de10:	             move.l 106(sp),d1
    de14:	             move.l 102(sp),d2
    de18:	             move.l 98(sp),d3
    de1c:	             jsr -66(a6)
    de20:	             move.l d0,94(sp)
    de24:	             move.l 94(sp),d0
    de28:	             move.l d0,90(sp)

    LONG tmp;
    while (keepGoing) {
    de2c:	   /-------- bra.s de70 <readTextPlain+0x88>
        tmp = FGetC(fp);
    de2e:	/--|-------> move.l 124(sp),22(sp)
    de34:	|  |         move.l 1c9d2 <DOSBase>,d0
    de3a:	|  |         movea.l d0,a6
    de3c:	|  |         move.l 22(sp),d1
    de40:	|  |         jsr -306(a6)
    de44:	|  |         move.l d0,18(sp)
    de48:	|  |         move.l 18(sp),d0
    de4c:	|  |         move.l d0,110(sp)
        char gotChar = (char) tmp;
    de50:	|  |         move.b 113(sp),17(sp)
        if (gotChar == '\n' || tmp == -1) {
    de56:	|  |         cmpi.b #10,17(sp)
    de5c:	|  |  /----- beq.s de66 <readTextPlain+0x7e>
    de5e:	|  |  |      moveq #-1,d0
    de60:	|  |  |      cmp.l 110(sp),d0
    de64:	|  |  |  /-- bne.s de6c <readTextPlain+0x84>
            keepGoing = FALSE;
    de66:	|  |  \--|-> clr.w 114(sp)
    de6a:	|  +-----|-- bra.s de70 <readTextPlain+0x88>
        } else {
            stringSize++;
    de6c:	|  |     \-> addq.l #1,116(sp)
    while (keepGoing) {
    de70:	|  \-------> tst.w 114(sp)
    de74:	\----------- bne.s de2e <readTextPlain+0x46>
        }
    }

    if ((stringSize == 0) && tmp == -1) {
    de76:	             tst.l 116(sp)
    de7a:	         /-- bne.s de8a <readTextPlain+0xa2>
    de7c:	         |   moveq #-1,d0
    de7e:	         |   cmp.l 110(sp),d0
    de82:	         +-- bne.s de8a <readTextPlain+0xa2>
        return NULL;
    de84:	         |   moveq #0,d0
    de86:	      /--|-- bra.w df70 <readTextPlain+0x188>
    } else {
        Seek(fp, startPos, OFFSET_BEGINNING);
    de8a:	      |  \-> move.l 124(sp),86(sp)
    de90:	      |      move.l 90(sp),82(sp)
    de96:	      |      moveq #-1,d0
    de98:	      |      move.l d0,78(sp)
    de9c:	      |      move.l 1c9d2 <DOSBase>,d0
    dea2:	      |      movea.l d0,a6
    dea4:	      |      move.l 86(sp),d1
    dea8:	      |      move.l 82(sp),d2
    deac:	      |      move.l 78(sp),d3
    deb0:	      |      jsr -66(a6)
    deb4:	      |      move.l d0,74(sp)
        reply = AllocVec(stringSize + 1, MEMF_ANY);
    deb8:	      |      move.l 116(sp),d0
    debc:	      |      addq.l #1,d0
    debe:	      |      move.l d0,70(sp)
    dec2:	      |      clr.l 66(sp)
    dec6:	      |      move.l 1c9ca <SysBase>,d0
    decc:	      |      movea.l d0,a6
    dece:	      |      move.l 70(sp),d0
    ded2:	      |      move.l 66(sp),d1
    ded6:	      |      jsr -684(a6)
    deda:	      |      move.l d0,62(sp)
    dede:	      |      move.l 62(sp),d0
    dee2:	      |      move.l d0,58(sp)
        if (reply == NULL) return NULL;
    dee6:	      |  /-- bne.s deee <readTextPlain+0x106>
    dee8:	      |  |   moveq #0,d0
    deea:	      +--|-- bra.w df70 <readTextPlain+0x188>
        int bytesRead = FRead(fp, reply, 1, stringSize);
    deee:	      |  \-> move.l 124(sp),54(sp)
    def4:	      |      move.l 58(sp),50(sp)
    defa:	      |      moveq #1,d0
    defc:	      |      move.l d0,46(sp)
    df00:	      |      move.l 116(sp),42(sp)
    df06:	      |      move.l 1c9d2 <DOSBase>,d0
    df0c:	      |      movea.l d0,a6
    df0e:	      |      move.l 54(sp),d1
    df12:	      |      move.l 50(sp),d2
    df16:	      |      move.l 46(sp),d3
    df1a:	      |      move.l 42(sp),d4
    df1e:	      |      jsr -324(a6)
    df22:	      |      move.l d0,38(sp)
    df26:	      |      move.l 38(sp),d0
    df2a:	      |      move.l d0,34(sp)
        if (bytesRead != stringSize) {
    df2e:	      |      move.l 34(sp),d0
    df32:	      |      cmp.l 116(sp),d0
    df36:	      |  /-- beq.s df46 <readTextPlain+0x15e>
            KPrintF("Reading error in readTextPlain.\n");
    df38:	      |  |   pea 196ff <PutChar+0x19e1>
    df3e:	      |  |   jsr 17254 <KPrintF>
    df44:	      |  |   addq.l #4,sp
        }
        FGetC(fp); // Skip the newline character
    df46:	      |  \-> move.l 124(sp),30(sp)
    df4c:	      |      move.l 1c9d2 <DOSBase>,d0
    df52:	      |      movea.l d0,a6
    df54:	      |      move.l 30(sp),d1
    df58:	      |      jsr -306(a6)
    df5c:	      |      move.l d0,26(sp)
        reply[stringSize] = 0;
    df60:	      |      move.l 116(sp),d0
    df64:	      |      movea.l 58(sp),a0
    df68:	      |      adda.l d0,a0
    df6a:	      |      clr.b (a0)
    }

    return reply;
    df6c:	      |      move.l 58(sp),d0
}
    df70:	      \----> movem.l (sp)+,d2-d4/a6
    df74:	             lea 104(sp),sp
    df78:	             rts

0000df7a <stackToFile>:


BOOL stackToFile (char * filename, const struct variable * from) {
    df7a:	                      lea -144(sp),sp
    df7e:	                      movem.l d2-d3/a6,-(sp)
    BPTR fp = Open( filename, MODE_NEWFILE);
    df82:	                      move.l 160(sp),148(sp)
    df88:	                      move.l #1006,144(sp)
    df90:	                      move.l 1c9d2 <DOSBase>,d0
    df96:	                      movea.l d0,a6
    df98:	                      move.l 148(sp),d1
    df9c:	                      move.l 144(sp),d2
    dfa0:	                      jsr -30(a6)
    dfa4:	                      move.l d0,140(sp)
    dfa8:	                      move.l 140(sp),d0
    dfac:	                      move.l d0,136(sp)

    if (!fp) {
    dfb0:	                  /-- bne.s dfca <stackToFile+0x50>
        KPrintF("Can't create file", filename);
    dfb2:	                  |   move.l 160(sp),-(sp)
    dfb6:	                  |   pea 19720 <PutChar+0x1a02>
    dfbc:	                  |   jsr 17254 <KPrintF>
    dfc2:	                  |   addq.l #8,sp
        return FALSE;
    dfc4:	                  |   clr.w d0
    dfc6:	/-----------------|-- bra.w e286 <stackToFile+0x30c>
    }

    struct variableStack * hereWeAre = from->varData.theStack->first;
    dfca:	|                 \-> movea.l 164(sp),a0
    dfce:	|                     movea.l 4(a0),a0
    dfd2:	|                     move.l (a0),152(sp)

    encode1 = (unsigned char) saveEncoding & 255;
    dfd6:	|                     move.w 1ca82 <saveEncoding>,d0
    dfdc:	|                     move.l d0,d0
    dfde:	|                     move.b d0,1ca80 <encode1>
    encode2 = (unsigned char) (saveEncoding >> 8);
    dfe4:	|                     move.w 1ca82 <saveEncoding>,d0
    dfea:	|                     lsr.w #8,d0
    dfec:	|                     move.l d0,d0
    dfee:	|                     move.b d0,1ca81 <encode2>

    if (saveEncoding) {
    dff4:	|                     move.w 1ca82 <saveEncoding>,d0
    dffa:	|                 /-- beq.s e04c <stackToFile+0xd2>
        FPrintf(fp, "[Custom data (encoded)]\r\n");
    dffc:	|                 |   move.l 136(sp),116(sp)
    e002:	|                 |   move.l #103866,112(sp)
    e00a:	|                 |   moveq #99,d0
    e00c:	|                 |   not.b d0
    e00e:	|                 |   add.l sp,d0
    e010:	|                 |   addi.l #-144,d0
    e016:	|                 |   move.l d0,108(sp)
    e01a:	|                 |   move.l 1c9d2 <DOSBase>,d0
    e020:	|                 |   movea.l d0,a6
    e022:	|                 |   move.l 116(sp),d1
    e026:	|                 |   move.l 112(sp),d2
    e02a:	|                 |   move.l 108(sp),d3
    e02e:	|                 |   jsr -354(a6)
    e032:	|                 |   move.l d0,104(sp)
        writeStringEncoded("UN�LO�CKED", fp);
    e036:	|                 |   move.l 136(sp),-(sp)
    e03a:	|                 |   pea 19639 <PutChar+0x191b>
    e040:	|                 |   jsr e290 <writeStringEncoded>
    e046:	|                 |   addq.l #8,sp
    e048:	|  /--------------|-- bra.w e25e <stackToFile+0x2e4>
    } else {
        FPrintf(fp, "[Custom data (ASCII)]\n");
    e04c:	|  |              \-> move.l 136(sp),132(sp)
    e052:	|  |                  move.l #103892,128(sp)
    e05a:	|  |                  moveq #99,d1
    e05c:	|  |                  not.b d1
    e05e:	|  |                  add.l sp,d1
    e060:	|  |                  addi.l #-144,d1
    e066:	|  |                  move.l d1,124(sp)
    e06a:	|  |                  move.l 1c9d2 <DOSBase>,d0
    e070:	|  |                  movea.l d0,a6
    e072:	|  |                  move.l 132(sp),d1
    e076:	|  |                  move.l 128(sp),d2
    e07a:	|  |                  move.l 124(sp),d3
    e07e:	|  |                  jsr -354(a6)
    e082:	|  |                  move.l d0,120(sp)
    }

    while (hereWeAre) {
    e086:	|  +----------------- bra.w e25e <stackToFile+0x2e4>
        if (saveEncoding) {
    e08a:	|  |  /-------------> move.w 1ca82 <saveEncoding>,d0
    e090:	|  |  |     /-------- beq.w e1e2 <stackToFile+0x268>
            switch (hereWeAre->thisVar.varType) {
    e094:	|  |  |     |         movea.l 152(sp),a0
    e098:	|  |  |     |         move.l (a0),d0
    e09a:	|  |  |     |         moveq #1,d1
    e09c:	|  |  |     |         cmp.l d0,d1
    e09e:	|  |  |     |     /-- beq.s e0ee <stackToFile+0x174>
    e0a0:	|  |  |     |     |   moveq #3,d1
    e0a2:	|  |  |     |     |   cmp.l d0,d1
    e0a4:	|  |  |     |  /--|-- bne.w e1b0 <stackToFile+0x236>
                case SVT_STRING:
                    FPutC(fp, encode1);
    e0a8:	|  |  |     |  |  |   move.l 136(sp),76(sp)
    e0ae:	|  |  |     |  |  |   move.b 1ca80 <encode1>,d0
    e0b4:	|  |  |     |  |  |   ext.w d0
    e0b6:	|  |  |     |  |  |   movea.w d0,a0
    e0b8:	|  |  |     |  |  |   move.l a0,72(sp)
    e0bc:	|  |  |     |  |  |   move.l 1c9d2 <DOSBase>,d0
    e0c2:	|  |  |     |  |  |   movea.l d0,a6
    e0c4:	|  |  |     |  |  |   move.l 76(sp),d1
    e0c8:	|  |  |     |  |  |   move.l 72(sp),d2
    e0cc:	|  |  |     |  |  |   jsr -312(a6)
    e0d0:	|  |  |     |  |  |   move.l d0,68(sp)
                    writeStringEncoded(hereWeAre->thisVar.varData.theString, fp);
    e0d4:	|  |  |     |  |  |   movea.l 152(sp),a0
    e0d8:	|  |  |     |  |  |   move.l 4(a0),d0
    e0dc:	|  |  |     |  |  |   move.l 136(sp),-(sp)
    e0e0:	|  |  |     |  |  |   move.l d0,-(sp)
    e0e2:	|  |  |     |  |  |   jsr e290 <writeStringEncoded>
    e0e8:	|  |  |     |  |  |   addq.l #8,sp
                    break;
    e0ea:	|  |  |  /--|--|--|-- bra.w e254 <stackToFile+0x2da>

                case SVT_INT:
                    // Small enough to be stored as a char
                    if (hereWeAre->thisVar.varData.intValue >= 0 && hereWeAre->thisVar.varData.intValue < 256) {
    e0ee:	|  |  |  |  |  |  \-> movea.l 152(sp),a0
    e0f2:	|  |  |  |  |  |      move.l 4(a0),d0
    e0f6:	|  |  |  |  |  |  /-- bmi.s e166 <stackToFile+0x1ec>
    e0f8:	|  |  |  |  |  |  |   movea.l 152(sp),a0
    e0fc:	|  |  |  |  |  |  |   move.l 4(a0),d0
    e100:	|  |  |  |  |  |  |   cmpi.l #255,d0
    e106:	|  |  |  |  |  |  +-- bgt.s e166 <stackToFile+0x1ec>
                        FPutC(fp, 2 ^ encode1);
    e108:	|  |  |  |  |  |  |   move.l 136(sp),64(sp)
    e10e:	|  |  |  |  |  |  |   move.b 1ca80 <encode1>,d0
    e114:	|  |  |  |  |  |  |   eori.b #2,d0
    e118:	|  |  |  |  |  |  |   ext.w d0
    e11a:	|  |  |  |  |  |  |   movea.w d0,a0
    e11c:	|  |  |  |  |  |  |   move.l a0,60(sp)
    e120:	|  |  |  |  |  |  |   move.l 1c9d2 <DOSBase>,d0
    e126:	|  |  |  |  |  |  |   movea.l d0,a6
    e128:	|  |  |  |  |  |  |   move.l 64(sp),d1
    e12c:	|  |  |  |  |  |  |   move.l 60(sp),d2
    e130:	|  |  |  |  |  |  |   jsr -312(a6)
    e134:	|  |  |  |  |  |  |   move.l d0,56(sp)
                        FPutC(fp, hereWeAre->thisVar.varData.intValue);
    e138:	|  |  |  |  |  |  |   move.l 136(sp),52(sp)
    e13e:	|  |  |  |  |  |  |   movea.l 152(sp),a0
    e142:	|  |  |  |  |  |  |   move.l 4(a0),48(sp)
    e148:	|  |  |  |  |  |  |   move.l 1c9d2 <DOSBase>,d0
    e14e:	|  |  |  |  |  |  |   movea.l d0,a6
    e150:	|  |  |  |  |  |  |   move.l 52(sp),d1
    e154:	|  |  |  |  |  |  |   move.l 48(sp),d2
    e158:	|  |  |  |  |  |  |   jsr -312(a6)
    e15c:	|  |  |  |  |  |  |   move.l d0,44(sp)
    e160:	|  |  |  |  |  |  |   nop
                    } else {
                        FPutC(fp, 1 ^ encode1);
                        put4bytes(hereWeAre->thisVar.varData.intValue, fp);
                    }
                    break;
    e162:	|  |  |  +--|--|--|-- bra.w e254 <stackToFile+0x2da>
                        FPutC(fp, 1 ^ encode1);
    e166:	|  |  |  |  |  |  \-> move.l 136(sp),40(sp)
    e16c:	|  |  |  |  |  |      move.b 1ca80 <encode1>,d0
    e172:	|  |  |  |  |  |      eori.b #1,d0
    e176:	|  |  |  |  |  |      ext.w d0
    e178:	|  |  |  |  |  |      movea.w d0,a0
    e17a:	|  |  |  |  |  |      move.l a0,36(sp)
    e17e:	|  |  |  |  |  |      move.l 1c9d2 <DOSBase>,d0
    e184:	|  |  |  |  |  |      movea.l d0,a6
    e186:	|  |  |  |  |  |      move.l 40(sp),d1
    e18a:	|  |  |  |  |  |      move.l 36(sp),d2
    e18e:	|  |  |  |  |  |      jsr -312(a6)
    e192:	|  |  |  |  |  |      move.l d0,32(sp)
                        put4bytes(hereWeAre->thisVar.varData.intValue, fp);
    e196:	|  |  |  |  |  |      movea.l 152(sp),a0
    e19a:	|  |  |  |  |  |      move.l 4(a0),d0
    e19e:	|  |  |  |  |  |      move.l 136(sp),-(sp)
    e1a2:	|  |  |  |  |  |      move.l d0,-(sp)
    e1a4:	|  |  |  |  |  |      jsr 958 <put4bytes>
    e1aa:	|  |  |  |  |  |      addq.l #8,sp
                    break;
    e1ac:	|  |  |  +--|--|----- bra.w e254 <stackToFile+0x2da>

                default:
                    KPrintF("Can't create an encoded custom data file containing anything other than numbers and strings", filename);
    e1b0:	|  |  |  |  |  \----> move.l 160(sp),-(sp)
    e1b4:	|  |  |  |  |         pea 19732 <PutChar+0x1a14>
    e1ba:	|  |  |  |  |         jsr 17254 <KPrintF>
    e1c0:	|  |  |  |  |         addq.l #8,sp
                    Close(fp);
    e1c2:	|  |  |  |  |         move.l 136(sp),28(sp)
    e1c8:	|  |  |  |  |         move.l 1c9d2 <DOSBase>,d0
    e1ce:	|  |  |  |  |         movea.l d0,a6
    e1d0:	|  |  |  |  |         move.l 28(sp),d1
    e1d4:	|  |  |  |  |         jsr -36(a6)
    e1d8:	|  |  |  |  |         move.l d0,24(sp)
                    return FALSE;
    e1dc:	|  |  |  |  |         clr.w d0
    e1de:	+--|--|--|--|-------- bra.w e286 <stackToFile+0x30c>
            }
        } else {
            char * makeSureItsText = getTextFromAnyVar(&hereWeAre->thisVar);
    e1e2:	|  |  |  |  \-------> move.l 152(sp),d0
    e1e6:	|  |  |  |            move.l d0,-(sp)
    e1e8:	|  |  |  |            jsr 14dca <getTextFromAnyVar>
    e1ee:	|  |  |  |            addq.l #4,sp
    e1f0:	|  |  |  |            move.l d0,100(sp)
            if (makeSureItsText == NULL) break;
    e1f4:	|  |  |  |     /----- beq.s e268 <stackToFile+0x2ee>
            FPrintf(fp, "%s\n", *makeSureItsText);
    e1f6:	|  |  |  |     |      movea.l 100(sp),a0
    e1fa:	|  |  |  |     |      move.b (a0),d0
    e1fc:	|  |  |  |     |      ext.w d0
    e1fe:	|  |  |  |     |      movea.w d0,a0
    e200:	|  |  |  |     |      move.l a0,12(sp)
    e204:	|  |  |  |     |      move.l 136(sp),96(sp)
    e20a:	|  |  |  |     |      move.l #104334,92(sp)
    e212:	|  |  |  |     |      moveq #99,d0
    e214:	|  |  |  |     |      not.b d0
    e216:	|  |  |  |     |      add.l sp,d0
    e218:	|  |  |  |     |      addi.l #-144,d0
    e21e:	|  |  |  |     |      move.l d0,88(sp)
    e222:	|  |  |  |     |      move.l 1c9d2 <DOSBase>,d0
    e228:	|  |  |  |     |      movea.l d0,a6
    e22a:	|  |  |  |     |      move.l 96(sp),d1
    e22e:	|  |  |  |     |      move.l 92(sp),d2
    e232:	|  |  |  |     |      move.l 88(sp),d3
    e236:	|  |  |  |     |      jsr -354(a6)
    e23a:	|  |  |  |     |      move.l d0,84(sp)
            FreeVec(makeSureItsText);
    e23e:	|  |  |  |     |      move.l 100(sp),80(sp)
    e244:	|  |  |  |     |      move.l 1c9ca <SysBase>,d0
    e24a:	|  |  |  |     |      movea.l d0,a6
    e24c:	|  |  |  |     |      movea.l 80(sp),a1
    e250:	|  |  |  |     |      jsr -690(a6)
        }

        hereWeAre = hereWeAre->next;
    e254:	|  |  |  \-----|----> movea.l 152(sp),a0
    e258:	|  |  |        |      move.l 8(a0),152(sp)
    while (hereWeAre) {
    e25e:	|  \--|--------|----> tst.l 152(sp)
    e262:	|     \--------|----- bne.w e08a <stackToFile+0x110>
    e266:	|              |  /-- bra.s e26a <stackToFile+0x2f0>
            if (makeSureItsText == NULL) break;
    e268:	|              \--|-> nop
    }
    Close(fp);
    e26a:	|                 \-> move.l 136(sp),20(sp)
    e270:	|                     move.l 1c9d2 <DOSBase>,d0
    e276:	|                     movea.l d0,a6
    e278:	|                     move.l 20(sp),d1
    e27c:	|                     jsr -36(a6)
    e280:	|                     move.l d0,16(sp)
    return TRUE;
    e284:	|                     moveq #1,d0
}
    e286:	\-------------------> movem.l (sp)+,d2-d3/a6
    e28a:	                      lea 144(sp),sp
    e28e:	                      rts

0000e290 <writeStringEncoded>:

void writeStringEncoded (const char * s, BPTR fp) {
    e290:	       lea -20(sp),sp
    e294:	       move.l a6,-(sp)
    e296:	       move.l d2,-(sp)
	int a, len = strlen (s);
    e298:	       move.l 32(sp),-(sp)
    e29c:	       jsr 13ce0 <strlen>
    e2a2:	       addq.l #4,sp
    e2a4:	       move.l d0,20(sp)

	put2bytes (len, fp);
    e2a8:	       move.l 36(sp),-(sp)
    e2ac:	       move.l 24(sp),-(sp)
    e2b0:	       jsr 8d0 <put2bytes>
    e2b6:	       addq.l #8,sp
	for (a = 0; a < len; a ++) {
    e2b8:	       clr.l 24(sp)
    e2bc:	   /-- bra.s e312 <writeStringEncoded+0x82>
		FPutC (fp, s[a] ^ encode1);
    e2be:	/--|-> move.l 36(sp),16(sp)
    e2c4:	|  |   move.l 24(sp),d0
    e2c8:	|  |   movea.l 32(sp),a0
    e2cc:	|  |   adda.l d0,a0
    e2ce:	|  |   move.b (a0),d1
    e2d0:	|  |   move.b 1ca80 <encode1>,d0
    e2d6:	|  |   eor.b d1,d0
    e2d8:	|  |   ext.w d0
    e2da:	|  |   movea.w d0,a0
    e2dc:	|  |   move.l a0,12(sp)
    e2e0:	|  |   move.l 1c9d2 <DOSBase>,d0
    e2e6:	|  |   movea.l d0,a6
    e2e8:	|  |   move.l 16(sp),d1
    e2ec:	|  |   move.l 12(sp),d2
    e2f0:	|  |   jsr -312(a6)
    e2f4:	|  |   move.l d0,8(sp)
		encode1 += encode2;
    e2f8:	|  |   move.b 1ca80 <encode1>,d0
    e2fe:	|  |   move.b d0,d1
    e300:	|  |   move.b 1ca81 <encode2>,d0
    e306:	|  |   add.b d1,d0
    e308:	|  |   move.b d0,1ca80 <encode1>
	for (a = 0; a < len; a ++) {
    e30e:	|  |   addq.l #1,24(sp)
    e312:	|  \-> move.l 24(sp),d0
    e316:	|      cmp.l 20(sp),d0
    e31a:	\----- blt.s e2be <writeStringEncoded+0x2e>
	}
}
    e31c:	       nop
    e31e:	       nop
    e320:	       move.l (sp)+,d2
    e322:	       movea.l (sp)+,a6
    e324:	       lea 20(sp),sp
    e328:	       rts

0000e32a <failSecurityCheck>:

#define builtIn(a) 			static enum builtReturn builtIn_ ## a (int numParams, struct loadedFunction * fun)

#define UNUSEDALL		 	(void) (0 && sizeof(numParams) && sizeof (fun));

BOOL failSecurityCheck(char * fn) {
    e32a:	                   subq.l #4,sp
	if (fn == NULL) return TRUE;
    e32c:	                   tst.l 8(sp)
    e330:	               /-- bne.s e336 <failSecurityCheck+0xc>
    e332:	               |   moveq #1,d0
    e334:	/--------------|-- bra.s e3b4 <failSecurityCheck+0x8a>

	int a = 0;
    e336:	|              \-> clr.l (sp)

	while (fn[a]) {
    e338:	|     /----------- bra.s e3a6 <failSecurityCheck+0x7c>
		switch (fn[a]) {
    e33a:	|  /--|----------> move.l (sp),d0
    e33c:	|  |  |            movea.l 8(sp),a0
    e340:	|  |  |            adda.l d0,a0
    e342:	|  |  |            move.b (a0),d0
    e344:	|  |  |            ext.w d0
    e346:	|  |  |            movea.w d0,a0
    e348:	|  |  |            moveq #124,d0
    e34a:	|  |  |            cmp.l a0,d0
    e34c:	|  |  |     /----- beq.s e38e <failSecurityCheck+0x64>
    e34e:	|  |  |     |      moveq #124,d1
    e350:	|  |  |     |      cmp.l a0,d1
    e352:	|  |  |  /--|----- blt.s e3a4 <failSecurityCheck+0x7a>
    e354:	|  |  |  |  |      moveq #92,d0
    e356:	|  |  |  |  |      cmp.l a0,d0
    e358:	|  |  |  |  +----- beq.s e38e <failSecurityCheck+0x64>
    e35a:	|  |  |  |  |      moveq #92,d1
    e35c:	|  |  |  |  |      cmp.l a0,d1
    e35e:	|  |  |  +--|----- blt.s e3a4 <failSecurityCheck+0x7a>
    e360:	|  |  |  |  |      moveq #60,d0
    e362:	|  |  |  |  |      cmp.l a0,d0
    e364:	|  |  |  |  |  /-- blt.s e384 <failSecurityCheck+0x5a>
    e366:	|  |  |  |  |  |   moveq #34,d1
    e368:	|  |  |  |  |  |   cmp.l a0,d1
    e36a:	|  |  |  +--|--|-- bgt.s e3a4 <failSecurityCheck+0x7a>
    e36c:	|  |  |  |  |  |   moveq #-34,d1
    e36e:	|  |  |  |  |  |   add.l a0,d1
    e370:	|  |  |  |  |  |   move.l #83894529,d0
    e376:	|  |  |  |  |  |   lsr.l d1,d0
    e378:	|  |  |  |  |  |   moveq #1,d1
    e37a:	|  |  |  |  |  |   and.l d1,d0
    e37c:	|  |  |  |  |  |   sne d0
    e37e:	|  |  |  |  |  |   neg.b d0
    e380:	|  |  |  |  +--|-- bne.s e38e <failSecurityCheck+0x64>
    e382:	|  |  |  +--|--|-- bra.s e3a4 <failSecurityCheck+0x7a>
    e384:	|  |  |  |  |  \-> lea -62(a0),a0
    e388:	|  |  |  |  |      moveq #1,d0
    e38a:	|  |  |  |  |      cmp.l a0,d0
    e38c:	|  |  |  +--|----- bcs.s e3a4 <failSecurityCheck+0x7a>
			case '?':
			case '"':
			case '<':
			case '>':
			case '|':
				KPrintF("Filenames may not contain the following characters: \n\n\\  /  :  \"  <  >  |  ?  *\n\nConsequently, the following filename is not allowed:", fn);
    e38e:	|  |  |  |  \----> move.l 8(sp),-(sp)
    e392:	|  |  |  |         pea 19792 <PutChar+0x1a74>
    e398:	|  |  |  |         jsr 17254 <KPrintF>
    e39e:	|  |  |  |         addq.l #8,sp
				return TRUE;
    e3a0:	|  |  |  |         moveq #1,d0
    e3a2:	+--|--|--|-------- bra.s e3b4 <failSecurityCheck+0x8a>
		}
		a++;
    e3a4:	|  |  |  \-------> addq.l #1,(sp)
	while (fn[a]) {
    e3a6:	|  |  \----------> move.l (sp),d0
    e3a8:	|  |               movea.l 8(sp),a0
    e3ac:	|  |               adda.l d0,a0
    e3ae:	|  |               move.b (a0),d0
    e3b0:	|  \-------------- bne.s e33a <failSecurityCheck+0x10>
	}
	return FALSE;
    e3b2:	|                  clr.w d0
}
    e3b4:	\----------------> addq.l #4,sp
    e3b6:	                   rts

0000e3b8 <sayCore>:

static enum builtReturn sayCore (int numParams, struct loadedFunction * fun, BOOL sayIt)
{
    e3b8:	             lea -24(sp),sp
    e3bc:	             move.l a6,-(sp)
    e3be:	             move.l 40(sp),d0
    e3c2:	             move.w d0,d0
    e3c4:	             move.w d0,6(sp)
	int fileNum = -1;
    e3c8:	             moveq #-1,d0
    e3ca:	             move.l d0,12(sp)
	char * newText;
	int objT, p;
	killSpeechTimers ();
    e3ce:	             jsr 6222 <killSpeechTimers>

	switch (numParams) {
    e3d4:	             moveq #2,d0
    e3d6:	             cmp.l 32(sp),d0
    e3da:	      /----- beq.s e41e <sayCore+0x66>
    e3dc:	      |      moveq #3,d0
    e3de:	      |      cmp.l 32(sp),d0
    e3e2:	/-----|----- bne.w e500 <sayCore+0x148>
		case 3:
			if (! getValueType (&fileNum, SVT_FILE, &fun->stack->thisVar)) return BR_ERROR;
    e3e6:	|     |      movea.l 36(sp),a0
    e3ea:	|     |      move.l 24(a0),d0
    e3ee:	|     |      move.l d0,-(sp)
    e3f0:	|     |      pea 5 <_start+0x5>
    e3f4:	|     |      lea 20(sp),a0
    e3f8:	|     |      move.l a0,-(sp)
    e3fa:	|     |      jsr 147f4 <getValueType>
    e400:	|     |      lea 12(sp),sp
    e404:	|     |      tst.w d0
    e406:	|     |  /-- bne.s e40e <sayCore+0x56>
    e408:	|     |  |   moveq #1,d0
    e40a:	|  /--|--|-- bra.w e510 <sayCore+0x158>
			trimStack (&fun -> stack);
    e40e:	|  |  |  \-> moveq #24,d0
    e410:	|  |  |      add.l 36(sp),d0
    e414:	|  |  |      move.l d0,-(sp)
    e416:	|  |  |      jsr 15178 <trimStack>
    e41c:	|  |  |      addq.l #4,sp
			[[fallthrough]];

		case 2:
			newText = getTextFromAnyVar (&(fun -> stack->thisVar));
    e41e:	|  |  \----> movea.l 36(sp),a0
    e422:	|  |         move.l 24(a0),d0
    e426:	|  |         move.l d0,-(sp)
    e428:	|  |         jsr 14dca <getTextFromAnyVar>
    e42e:	|  |         addq.l #4,sp
    e430:	|  |         move.l d0,24(sp)
			if (! newText) return BR_ERROR;
    e434:	|  |     /-- bne.s e43c <sayCore+0x84>
    e436:	|  |     |   moveq #1,d0
    e438:	|  +-----|-- bra.w e510 <sayCore+0x158>
			trimStack (&fun -> stack);
    e43c:	|  |     \-> moveq #24,d0
    e43e:	|  |         add.l 36(sp),d0
    e442:	|  |         move.l d0,-(sp)
    e444:	|  |         jsr 15178 <trimStack>
    e44a:	|  |         addq.l #4,sp
			if (! getValueType(&objT, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e44c:	|  |         movea.l 36(sp),a0
    e450:	|  |         move.l 24(a0),d0
    e454:	|  |         move.l d0,-(sp)
    e456:	|  |         pea 7 <_start+0x7>
    e45a:	|  |         lea 16(sp),a0
    e45e:	|  |         move.l a0,-(sp)
    e460:	|  |         jsr 147f4 <getValueType>
    e466:	|  |         lea 12(sp),sp
    e46a:	|  |         tst.w d0
    e46c:	|  |     /-- bne.s e474 <sayCore+0xbc>
    e46e:	|  |     |   moveq #1,d0
    e470:	|  +-----|-- bra.w e510 <sayCore+0x158>
			if (! getValueType(&objT, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e474:	|  |     \-> movea.l 36(sp),a0
    e478:	|  |         move.l 24(a0),d0
    e47c:	|  |         move.l d0,-(sp)
    e47e:	|  |         pea 7 <_start+0x7>
    e482:	|  |         lea 16(sp),a0
    e486:	|  |         move.l a0,-(sp)
    e488:	|  |         jsr 147f4 <getValueType>
    e48e:	|  |         lea 12(sp),sp
    e492:	|  |         tst.w d0
    e494:	|  |     /-- bne.s e49a <sayCore+0xe2>
    e496:	|  |     |   moveq #1,d0
    e498:	|  +-----|-- bra.s e510 <sayCore+0x158>
			trimStack (&fun -> stack);
    e49a:	|  |     \-> moveq #24,d0
    e49c:	|  |         add.l 36(sp),d0
    e4a0:	|  |         move.l d0,-(sp)
    e4a2:	|  |         jsr 15178 <trimStack>
    e4a8:	|  |         addq.l #4,sp
			p = wrapSpeech (newText, objT, fileNum, sayIt);
    e4aa:	|  |         movea.w 6(sp),a0
    e4ae:	|  |         move.l 12(sp),d1
    e4b2:	|  |         move.l 8(sp),d0
    e4b6:	|  |         move.l a0,-(sp)
    e4b8:	|  |         move.l d1,-(sp)
    e4ba:	|  |         move.l d0,-(sp)
    e4bc:	|  |         move.l 36(sp),-(sp)
    e4c0:	|  |         jsr 81dc <wrapSpeech>
    e4c6:	|  |         lea 16(sp),sp
    e4ca:	|  |         move.l d0,20(sp)
			fun -> timeLeft = p;
    e4ce:	|  |         movea.l 36(sp),a0
    e4d2:	|  |         move.l 20(sp),12(a0)
			//debugOut ("BUILTIN: sayCore: %s (%i)\n", newText, p);
			fun -> isSpeech = TRUE;
    e4d8:	|  |         movea.l 36(sp),a0
    e4dc:	|  |         move.w #1,50(a0)
			FreeVec(newText);
    e4e2:	|  |         move.l 24(sp),16(sp)
    e4e8:	|  |         move.l 1c9ca <SysBase>,d0
    e4ee:	|  |         movea.l d0,a6
    e4f0:	|  |         movea.l 16(sp),a1
    e4f4:	|  |         jsr -690(a6)
			newText = NULL;
    e4f8:	|  |         clr.l 24(sp)
			return BR_KEEP_AND_PAUSE;
    e4fc:	|  |         moveq #0,d0
    e4fe:	|  +-------- bra.s e510 <sayCore+0x158>
	}

	KPrintF("Function should have either 2 or 3 parameters");
    e500:	\--|-------> pea 19818 <PutChar+0x1afa>
    e506:	   |         jsr 17254 <KPrintF>
    e50c:	   |         addq.l #4,sp
	return BR_ERROR;
    e50e:	   |         moveq #1,d0
}
    e510:	   \-------> movea.l (sp)+,a6
    e512:	             lea 24(sp),sp
    e516:	             rts

0000e518 <builtIn_say>:

builtIn(say)
{
	UNUSEDALL
	return sayCore (numParams, fun, TRUE);
    e518:	pea 1 <_start+0x1>
    e51c:	move.l 12(sp),-(sp)
    e520:	move.l 12(sp),-(sp)
    e524:	jsr e3b8 <sayCore>
    e52a:	lea 12(sp),sp
}
    e52e:	rts

0000e530 <builtIn_think>:

builtIn(think)
{
	UNUSEDALL
	return sayCore (numParams, fun, FALSE);
    e530:	clr.l -(sp)
    e532:	move.l 12(sp),-(sp)
    e536:	move.l 12(sp),-(sp)
    e53a:	jsr e3b8 <sayCore>
    e540:	lea 12(sp),sp
}
    e544:	rts

0000e546 <builtIn_freeze>:

builtIn(freeze)
{
	UNUSEDALL
	freeze ();
    e546:	jsr 151c0 <freeze>
	freezeSubs (); 
    e54c:	jsr 5812 <freezeSubs>
	fun -> freezerLevel = 0;
    e552:	movea.l 8(sp),a0
    e556:	clr.b 56(a0)
	return BR_CONTINUE;
    e55a:	moveq #2,d0
}
    e55c:	rts

0000e55e <builtIn_unfreeze>:

builtIn(unfreeze)
{
	UNUSEDALL
	unfreeze ();
    e55e:	jsr 153bc <unfreeze>
	unfreezeSubs (); 
    e564:	jsr 6c64 <unfreezeSubs>
	return BR_CONTINUE;
    e56a:	moveq #2,d0
}
    e56c:	rts

0000e56e <builtIn_howFrozen>:

builtIn(howFrozen)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, howFrozen ());
    e56e:	jsr 15398 <howFrozen>
    e574:	move.l d0,d1
    e576:	moveq #28,d0
    e578:	add.l 8(sp),d0
    e57c:	move.l d1,-(sp)
    e57e:	pea 1 <_start+0x1>
    e582:	move.l d0,-(sp)
    e584:	jsr 150e6 <setVariable>
    e58a:	lea 12(sp),sp
	return BR_CONTINUE; 
    e58e:	moveq #2,d0
}
    e590:	rts

0000e592 <builtIn_setCursor>:

builtIn(setCursor)
{
    e592:	subq.l #4,sp
	UNUSEDALL
	struct personaAnimation * aa = getAnimationFromVar (&(fun -> stack -> thisVar));
    e594:	movea.l 12(sp),a0
    e598:	move.l 24(a0),d0
    e59c:	move.l d0,-(sp)
    e59e:	jsr 14ccc <getAnimationFromVar>
    e5a4:	addq.l #4,sp
    e5a6:	move.l d0,(sp)
	pickAnimCursor (aa);
    e5a8:	move.l (sp),-(sp)
    e5aa:	jsr d6c <pickAnimCursor>
    e5b0:	addq.l #4,sp
	trimStack (&fun -> stack);
    e5b2:	moveq #24,d0
    e5b4:	add.l 12(sp),d0
    e5b8:	move.l d0,-(sp)
    e5ba:	jsr 15178 <trimStack>
    e5c0:	addq.l #4,sp
	return BR_CONTINUE;
    e5c2:	moveq #2,d0
}
    e5c4:	addq.l #4,sp
    e5c6:	rts

0000e5c8 <builtIn_getMouseX>:

builtIn(getMouseX)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseX + cameraX);
    e5c8:	move.l 1c986 <input+0xa>,d1
    e5ce:	move.l 1ca84 <cameraX>,d0
    e5d4:	add.l d0,d1
    e5d6:	moveq #28,d0
    e5d8:	add.l 8(sp),d0
    e5dc:	move.l d1,-(sp)
    e5de:	pea 1 <_start+0x1>
    e5e2:	move.l d0,-(sp)
    e5e4:	jsr 150e6 <setVariable>
    e5ea:	lea 12(sp),sp
	return BR_CONTINUE;
    e5ee:	moveq #2,d0
}
    e5f0:	rts

0000e5f2 <builtIn_getMouseY>:

builtIn(getMouseY)
{

	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseY + cameraY);
    e5f2:	move.l 1c98a <input+0xe>,d1
    e5f8:	move.l 1ca88 <cameraY>,d0
    e5fe:	add.l d0,d1
    e600:	moveq #28,d0
    e602:	add.l 8(sp),d0
    e606:	move.l d1,-(sp)
    e608:	pea 1 <_start+0x1>
    e60c:	move.l d0,-(sp)
    e60e:	jsr 150e6 <setVariable>
    e614:	lea 12(sp),sp
	return BR_CONTINUE;
    e618:	moveq #2,d0
}
    e61a:	rts

0000e61c <builtIn_getMouseScreenX>:

builtIn(getMouseScreenX)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseX*cameraZoom);
    e61c:	move.l 1c986 <input+0xa>,d0
    e622:	move.l d0,-(sp)
    e624:	jsr 17686 <__floatsisf>
    e62a:	addq.l #4,sp
    e62c:	move.l d0,d1
    e62e:	move.l 1c368 <cameraZoom>,d0
    e634:	move.l d0,-(sp)
    e636:	move.l d1,-(sp)
    e638:	jsr 17738 <__mulsf3>
    e63e:	addq.l #8,sp
    e640:	move.l d0,-(sp)
    e642:	jsr 1761e <__fixsfsi>
    e648:	addq.l #4,sp
    e64a:	move.l d0,d1
    e64c:	moveq #28,d0
    e64e:	add.l 8(sp),d0
    e652:	move.l d1,-(sp)
    e654:	pea 1 <_start+0x1>
    e658:	move.l d0,-(sp)
    e65a:	jsr 150e6 <setVariable>
    e660:	lea 12(sp),sp
	return BR_CONTINUE;
    e664:	moveq #2,d0
}
    e666:	rts

0000e668 <builtIn_getMouseScreenY>:

builtIn(getMouseScreenY)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseY*cameraZoom);
    e668:	move.l 1c98a <input+0xe>,d0
    e66e:	move.l d0,-(sp)
    e670:	jsr 17686 <__floatsisf>
    e676:	addq.l #4,sp
    e678:	move.l d0,d1
    e67a:	move.l 1c368 <cameraZoom>,d0
    e680:	move.l d0,-(sp)
    e682:	move.l d1,-(sp)
    e684:	jsr 17738 <__mulsf3>
    e68a:	addq.l #8,sp
    e68c:	move.l d0,-(sp)
    e68e:	jsr 1761e <__fixsfsi>
    e694:	addq.l #4,sp
    e696:	move.l d0,d1
    e698:	moveq #28,d0
    e69a:	add.l 8(sp),d0
    e69e:	move.l d1,-(sp)
    e6a0:	pea 1 <_start+0x1>
    e6a4:	move.l d0,-(sp)
    e6a6:	jsr 150e6 <setVariable>
    e6ac:	lea 12(sp),sp
	return BR_CONTINUE;
    e6b0:	moveq #2,d0
}
    e6b2:	rts

0000e6b4 <builtIn_getStatusText>:

builtIn(getStatusText)
{
	UNUSEDALL
	makeTextVar (&fun -> reg, statusBarText ());
    e6b4:	jsr 7c90 <statusBarText>
    e6ba:	move.l d0,d1
    e6bc:	moveq #28,d0
    e6be:	add.l 8(sp),d0
    e6c2:	move.l d1,-(sp)
    e6c4:	move.l d0,-(sp)
    e6c6:	jsr 14a16 <makeTextVar>
    e6cc:	addq.l #8,sp
	return BR_CONTINUE;
    e6ce:	moveq #2,d0
}
    e6d0:	rts

0000e6d2 <builtIn_getMatchingFiles>:

builtIn(getMatchingFiles)
{
    e6d2:	       lea -20(sp),sp
    e6d6:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    e6d8:	       movea.l 32(sp),a0
    e6dc:	       move.l 24(a0),d0
    e6e0:	       move.l d0,-(sp)
    e6e2:	       jsr 14dca <getTextFromAnyVar>
    e6e8:	       addq.l #4,sp
    e6ea:	       move.l d0,20(sp)
	if (! newText) return BR_ERROR;
    e6ee:	   /-- bne.s e6f6 <builtIn_getMatchingFiles+0x24>
    e6f0:	   |   moveq #1,d0
    e6f2:	/--|-- bra.w e7b8 <builtIn_getMatchingFiles+0xe6>
	trimStack (&fun -> stack);
    e6f6:	|  \-> moveq #24,d0
    e6f8:	|      add.l 32(sp),d0
    e6fc:	|      move.l d0,-(sp)
    e6fe:	|      jsr 15178 <trimStack>
    e704:	|      addq.l #4,sp
	unlinkVar (&fun -> reg);
    e706:	|      moveq #28,d0
    e708:	|      add.l 32(sp),d0
    e70c:	|      move.l d0,-(sp)
    e70e:	|      jsr 14a42 <unlinkVar>
    e714:	|      addq.l #4,sp

	// Return value
	fun -> reg.varType = SVT_STACK;
    e716:	|      movea.l 32(sp),a0
    e71a:	|      moveq #6,d0
    e71c:	|      move.l d0,28(a0)
	fun -> reg.varData.theStack = AllocVec(sizeof( struct stackHandler),MEMF_ANY);
    e720:	|      moveq #12,d0
    e722:	|      move.l d0,16(sp)
    e726:	|      clr.l 12(sp)
    e72a:	|      move.l 1c9ca <SysBase>,d0
    e730:	|      movea.l d0,a6
    e732:	|      move.l 16(sp),d0
    e736:	|      move.l 12(sp),d1
    e73a:	|      jsr -684(a6)
    e73e:	|      move.l d0,8(sp)
    e742:	|      move.l 8(sp),d0
    e746:	|      movea.l 32(sp),a0
    e74a:	|      move.l d0,32(a0)
	if (!(&fun -> reg.varData.theStack)) return BR_ERROR;
    e74e:	|      moveq #32,d0
    e750:	|      add.l 32(sp),d0
    e754:	|  /-- bne.s e75a <builtIn_getMatchingFiles+0x88>
    e756:	|  |   moveq #1,d0
    e758:	+--|-- bra.s e7b8 <builtIn_getMatchingFiles+0xe6>
	fun -> reg.varData.theStack -> first = NULL;
    e75a:	|  \-> movea.l 32(sp),a0
    e75e:	|      movea.l 32(a0),a0
    e762:	|      clr.l (a0)
	fun -> reg.varData.theStack -> last = NULL;
    e764:	|      movea.l 32(sp),a0
    e768:	|      movea.l 32(a0),a0
    e76c:	|      clr.l 4(a0)
	fun -> reg.varData.theStack -> timesUsed = 1;
    e770:	|      movea.l 32(sp),a0
    e774:	|      movea.l 32(a0),a0
    e778:	|      moveq #1,d0
    e77a:	|      move.l d0,8(a0)
	if (! getSavedGamesStack (fun -> reg.varData.theStack, newText)) return BR_ERROR;
    e77e:	|      movea.l 32(sp),a0
    e782:	|      move.l 32(a0),d0
    e786:	|      move.l 20(sp),-(sp)
    e78a:	|      move.l d0,-(sp)
    e78c:	|      jsr 145b0 <getSavedGamesStack>
    e792:	|      addq.l #8,sp
    e794:	|      tst.w d0
    e796:	|  /-- bne.s e79c <builtIn_getMatchingFiles+0xca>
    e798:	|  |   moveq #1,d0
    e79a:	+--|-- bra.s e7b8 <builtIn_getMatchingFiles+0xe6>
	FreeVec(newText);
    e79c:	|  \-> move.l 20(sp),4(sp)
    e7a2:	|      move.l 1c9ca <SysBase>,d0
    e7a8:	|      movea.l d0,a6
    e7aa:	|      movea.l 4(sp),a1
    e7ae:	|      jsr -690(a6)
	newText = NULL;
    e7b2:	|      clr.l 20(sp)
	return BR_CONTINUE;
    e7b6:	|      moveq #2,d0
}
    e7b8:	\----> movea.l (sp)+,a6
    e7ba:	       lea 20(sp),sp
    e7be:	       rts

0000e7c0 <builtIn_saveGame>:

builtIn(saveGame)
{
    e7c0:	       lea -12(sp),sp
    e7c4:	       move.l a6,-(sp)

    /*if (frozenStuff) {
        fatal ("Can't save game state while the engine is frozen");
    }*/

    loadNow = getTextFromAnyVar(&(fun->stack->thisVar));
    e7c6:	       movea.l 24(sp),a0
    e7ca:	       move.l 24(a0),d0
    e7ce:	       move.l d0,-(sp)
    e7d0:	       jsr 14dca <getTextFromAnyVar>
    e7d6:	       addq.l #4,sp
    e7d8:	       move.l d0,1c996 <loadNow>
    trimStack(&fun->stack);
    e7de:	       moveq #24,d0
    e7e0:	       add.l 24(sp),d0
    e7e4:	       move.l d0,-(sp)
    e7e6:	       jsr 15178 <trimStack>
    e7ec:	       addq.l #4,sp

    char *aaaaa = encodeFilename(loadNow);
    e7ee:	       move.l 1c996 <loadNow>,d0
    e7f4:	       move.l d0,-(sp)
    e7f6:	       jsr 2fe <encodeFilename>
    e7fc:	       addq.l #4,sp
    e7fe:	       move.l d0,12(sp)
    FreeVec(loadNow);
    e802:	       move.l 1c996 <loadNow>,8(sp)
    e80a:	       move.l 1c9ca <SysBase>,d0
    e810:	       movea.l d0,a6
    e812:	       movea.l 8(sp),a1
    e816:	       jsr -690(a6)
    if (failSecurityCheck(aaaaa)) return BR_ERROR; // Won't fail if encoded, how cool is that? OK, not very.
    e81a:	       move.l 12(sp),-(sp)
    e81e:	       jsr e32a <failSecurityCheck>
    e824:	       addq.l #4,sp
    e826:	       tst.w d0
    e828:	   /-- beq.s e82e <builtIn_saveGame+0x6e>
    e82a:	   |   moveq #1,d0
    e82c:	/--|-- bra.s e87e <builtIn_saveGame+0xbe>

    loadNow = joinStrings(":", aaaaa);
    e82e:	|  \-> move.l 12(sp),-(sp)
    e832:	|      pea 19846 <PutChar+0x1b28>
    e838:	|      jsr 13d20 <joinStrings>
    e83e:	|      addq.l #8,sp
    e840:	|      move.l d0,1c996 <loadNow>
    FreeVec(aaaaa);
    e846:	|      move.l 12(sp),4(sp)
    e84c:	|      move.l 1c9ca <SysBase>,d0
    e852:	|      movea.l d0,a6
    e854:	|      movea.l 4(sp),a1
    e858:	|      jsr -690(a6)

    setVariable(&fun->reg, SVT_INT, 0);
    e85c:	|      moveq #28,d0
    e85e:	|      add.l 24(sp),d0
    e862:	|      clr.l -(sp)
    e864:	|      pea 1 <_start+0x1>
    e868:	|      move.l d0,-(sp)
    e86a:	|      jsr 150e6 <setVariable>
    e870:	|      lea 12(sp),sp
    saverFunc = fun;
    e874:	|      move.l 24(sp),1ca94 <saverFunc>
    return BR_KEEP_AND_PAUSE;
    e87c:	|      moveq #0,d0
}
    e87e:	\----> movea.l (sp)+,a6
    e880:	       lea 12(sp),sp
    e884:	       rts

0000e886 <builtIn_fileExists>:

builtIn(fileExists)
{
    e886:	       lea -36(sp),sp
    e88a:	       move.l a6,-(sp)
    e88c:	       move.l d2,-(sp)
    UNUSEDALL
    loadNow = getTextFromAnyVar(&(fun->stack->thisVar));
    e88e:	       movea.l 52(sp),a0
    e892:	       move.l 24(a0),d0
    e896:	       move.l d0,-(sp)
    e898:	       jsr 14dca <getTextFromAnyVar>
    e89e:	       addq.l #4,sp
    e8a0:	       move.l d0,1c996 <loadNow>
    trimStack(&fun->stack);
    e8a6:	       moveq #24,d0
    e8a8:	       add.l 52(sp),d0
    e8ac:	       move.l d0,-(sp)
    e8ae:	       jsr 15178 <trimStack>
    e8b4:	       addq.l #4,sp
    char *aaaaa = encodeFilename(loadNow);
    e8b6:	       move.l 1c996 <loadNow>,d0
    e8bc:	       move.l d0,-(sp)
    e8be:	       jsr 2fe <encodeFilename>
    e8c4:	       addq.l #4,sp
    e8c6:	       move.l d0,40(sp)
    FreeVec(loadNow);
    e8ca:	       move.l 1c996 <loadNow>,36(sp)
    e8d2:	       move.l 1c9ca <SysBase>,d0
    e8d8:	       movea.l d0,a6
    e8da:	       movea.l 36(sp),a1
    e8de:	       jsr -690(a6)
    if (failSecurityCheck(aaaaa)) return BR_ERROR;
    e8e2:	       move.l 40(sp),-(sp)
    e8e6:	       jsr e32a <failSecurityCheck>
    e8ec:	       addq.l #4,sp
    e8ee:	       tst.w d0
    e8f0:	   /-- beq.s e8f8 <builtIn_fileExists+0x72>
    e8f2:	   |   moveq #1,d0
    e8f4:	/--|-- bra.w e998 <builtIn_fileExists+0x112>
    BPTR fp = Open(aaaaa, MODE_OLDFILE);
    e8f8:	|  \-> move.l 40(sp),32(sp)
    e8fe:	|      move.l #1005,28(sp)
    e906:	|      move.l 1c9d2 <DOSBase>,d0
    e90c:	|      movea.l d0,a6
    e90e:	|      move.l 32(sp),d1
    e912:	|      move.l 28(sp),d2
    e916:	|      jsr -30(a6)
    e91a:	|      move.l d0,24(sp)
    e91e:	|      move.l 24(sp),d0
    e922:	|      move.l d0,20(sp)
    if (!fp) {        
    e926:	|  /-- bne.s e936 <builtIn_fileExists+0xb0>
        KPrintF("Can't get current directory.\n");      
    e928:	|  |   pea 19848 <PutChar+0x1b2a>
    e92e:	|  |   jsr 17254 <KPrintF>
    e934:	|  |   addq.l #4,sp
    }
    // Return value
    setVariable(&fun->reg, SVT_INT, (fp != NULL));
    e936:	|  \-> tst.l 20(sp)
    e93a:	|      sne d0
    e93c:	|      neg.b d0
    e93e:	|      moveq #0,d1
    e940:	|      move.b d0,d1
    e942:	|      moveq #28,d0
    e944:	|      add.l 52(sp),d0
    e948:	|      move.l d1,-(sp)
    e94a:	|      pea 1 <_start+0x1>
    e94e:	|      move.l d0,-(sp)
    e950:	|      jsr 150e6 <setVariable>
    e956:	|      lea 12(sp),sp
    if (fp) Close(fp);
    e95a:	|      tst.l 20(sp)
    e95e:	|  /-- beq.s e97a <builtIn_fileExists+0xf4>
    e960:	|  |   move.l 20(sp),16(sp)
    e966:	|  |   move.l 1c9d2 <DOSBase>,d0
    e96c:	|  |   movea.l d0,a6
    e96e:	|  |   move.l 16(sp),d1
    e972:	|  |   jsr -36(a6)
    e976:	|  |   move.l d0,12(sp)
    FreeVec(aaaaa);
    e97a:	|  \-> move.l 40(sp),8(sp)
    e980:	|      move.l 1c9ca <SysBase>,d0
    e986:	|      movea.l d0,a6
    e988:	|      movea.l 8(sp),a1
    e98c:	|      jsr -690(a6)
    loadNow = NULL;
    e990:	|      clr.l 1c996 <loadNow>
    return BR_CONTINUE;
    e996:	|      moveq #2,d0
}
    e998:	\----> move.l (sp)+,d2
    e99a:	       movea.l (sp)+,a6
    e99c:	       lea 36(sp),sp
    e9a0:	       rts

0000e9a2 <builtIn_loadGame>:

builtIn(loadGame)
{
    e9a2:	       lea -36(sp),sp
    e9a6:	       move.l a6,-(sp)
    e9a8:	       move.l d2,-(sp)
    UNUSEDALL
    char *aaaaa = getTextFromAnyVar(&(fun->stack->thisVar));
    e9aa:	       movea.l 52(sp),a0
    e9ae:	       move.l 24(a0),d0
    e9b2:	       move.l d0,-(sp)
    e9b4:	       jsr 14dca <getTextFromAnyVar>
    e9ba:	       addq.l #4,sp
    e9bc:	       move.l d0,40(sp)
    trimStack(&fun->stack);
    e9c0:	       moveq #24,d0
    e9c2:	       add.l 52(sp),d0
    e9c6:	       move.l d0,-(sp)
    e9c8:	       jsr 15178 <trimStack>
    e9ce:	       addq.l #4,sp
    loadNow = encodeFilename(aaaaa);
    e9d0:	       move.l 40(sp),-(sp)
    e9d4:	       jsr 2fe <encodeFilename>
    e9da:	       addq.l #4,sp
    e9dc:	       move.l d0,1c996 <loadNow>
    FreeVec(aaaaa);
    e9e2:	       move.l 40(sp),36(sp)
    e9e8:	       move.l 1c9ca <SysBase>,d0
    e9ee:	       movea.l d0,a6
    e9f0:	       movea.l 36(sp),a1
    e9f4:	       jsr -690(a6)

    /*if (frozenStuff) {
        fatal("Can't load a saved game while the engine is frozen");
    }*/

    if (failSecurityCheck(loadNow)) return BR_ERROR;
    e9f8:	       move.l 1c996 <loadNow>,d0
    e9fe:	       move.l d0,-(sp)
    ea00:	       jsr e32a <failSecurityCheck>
    ea06:	       addq.l #4,sp
    ea08:	       tst.w d0
    ea0a:	   /-- beq.s ea10 <builtIn_loadGame+0x6e>
    ea0c:	   |   moveq #1,d0
    ea0e:	/--|-- bra.s ea80 <builtIn_loadGame+0xde>
    BPTR fp = Open(loadNow, MODE_OLDFILE);
    ea10:	|  \-> move.l 1c996 <loadNow>,32(sp)
    ea18:	|      move.l #1005,28(sp)
    ea20:	|      move.l 1c9d2 <DOSBase>,d0
    ea26:	|      movea.l d0,a6
    ea28:	|      move.l 32(sp),d1
    ea2c:	|      move.l 28(sp),d2
    ea30:	|      jsr -30(a6)
    ea34:	|      move.l d0,24(sp)
    ea38:	|      move.l 24(sp),d0
    ea3c:	|      move.l d0,20(sp)
    if (fp) {
    ea40:	|  /-- beq.s ea60 <builtIn_loadGame+0xbe>
        Close(fp);
    ea42:	|  |   move.l 20(sp),12(sp)
    ea48:	|  |   move.l 1c9d2 <DOSBase>,d0
    ea4e:	|  |   movea.l d0,a6
    ea50:	|  |   move.l 12(sp),d1
    ea54:	|  |   jsr -36(a6)
    ea58:	|  |   move.l d0,8(sp)
        return BR_KEEP_AND_PAUSE;
    ea5c:	|  |   moveq #0,d0
    ea5e:	+--|-- bra.s ea80 <builtIn_loadGame+0xde>
    }
    FreeVec(loadNow);
    ea60:	|  \-> move.l 1c996 <loadNow>,16(sp)
    ea68:	|      move.l 1c9ca <SysBase>,d0
    ea6e:	|      movea.l d0,a6
    ea70:	|      movea.l 16(sp),a1
    ea74:	|      jsr -690(a6)
    loadNow = NULL;
    ea78:	|      clr.l 1c996 <loadNow>
    return BR_CONTINUE;
    ea7e:	|      moveq #2,d0
}
    ea80:	\----> move.l (sp)+,d2
    ea82:	       movea.l (sp)+,a6
    ea84:	       lea 36(sp),sp
    ea88:	       rts

0000ea8a <builtIn_blankScreen>:
#pragma mark Background image - Painting

builtIn(blankScreen)
{
	UNUSEDALL
	blankScreen (0, 0, sceneWidth, sceneHeight);
    ea8a:	move.l 1ca6a <sceneHeight>,d0
    ea90:	move.l d0,d1
    ea92:	move.l 1ca66 <sceneWidth>,d0
    ea98:	move.l d1,-(sp)
    ea9a:	move.l d0,-(sp)
    ea9c:	clr.l -(sp)
    ea9e:	clr.l -(sp)
    eaa0:	jsr d21e <blankScreen>
    eaa6:	lea 16(sp),sp
	return BR_CONTINUE;
    eaaa:	moveq #2,d0
}
    eaac:	rts

0000eaae <builtIn_blankArea>:

builtIn(blankArea)
{
    eaae:	       lea -16(sp),sp
	UNUSEDALL
	int x1, y1, x2, y2;
	if (! getValueType (&y2, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    eab2:	       movea.l 24(sp),a0
    eab6:	       move.l 24(a0),d0
    eaba:	       move.l d0,-(sp)
    eabc:	       pea 1 <_start+0x1>
    eac0:	       lea 8(sp),a0
    eac4:	       move.l a0,-(sp)
    eac6:	       jsr 147f4 <getValueType>
    eacc:	       lea 12(sp),sp
    ead0:	       tst.w d0
    ead2:	   /-- bne.s eada <builtIn_blankArea+0x2c>
    ead4:	   |   moveq #1,d0
    ead6:	/--|-- bra.w ebb0 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    eada:	|  \-> moveq #24,d0
    eadc:	|      add.l 24(sp),d0
    eae0:	|      move.l d0,-(sp)
    eae2:	|      jsr 15178 <trimStack>
    eae8:	|      addq.l #4,sp
	if (! getValueType (&x2, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    eaea:	|      movea.l 24(sp),a0
    eaee:	|      move.l 24(a0),d0
    eaf2:	|      move.l d0,-(sp)
    eaf4:	|      pea 1 <_start+0x1>
    eaf8:	|      lea 12(sp),a0
    eafc:	|      move.l a0,-(sp)
    eafe:	|      jsr 147f4 <getValueType>
    eb04:	|      lea 12(sp),sp
    eb08:	|      tst.w d0
    eb0a:	|  /-- bne.s eb12 <builtIn_blankArea+0x64>
    eb0c:	|  |   moveq #1,d0
    eb0e:	+--|-- bra.w ebb0 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    eb12:	|  \-> moveq #24,d0
    eb14:	|      add.l 24(sp),d0
    eb18:	|      move.l d0,-(sp)
    eb1a:	|      jsr 15178 <trimStack>
    eb20:	|      addq.l #4,sp
	if (! getValueType (&y1, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    eb22:	|      movea.l 24(sp),a0
    eb26:	|      move.l 24(a0),d0
    eb2a:	|      move.l d0,-(sp)
    eb2c:	|      pea 1 <_start+0x1>
    eb30:	|      moveq #16,d0
    eb32:	|      add.l sp,d0
    eb34:	|      move.l d0,-(sp)
    eb36:	|      jsr 147f4 <getValueType>
    eb3c:	|      lea 12(sp),sp
    eb40:	|      tst.w d0
    eb42:	|  /-- bne.s eb48 <builtIn_blankArea+0x9a>
    eb44:	|  |   moveq #1,d0
    eb46:	+--|-- bra.s ebb0 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    eb48:	|  \-> moveq #24,d0
    eb4a:	|      add.l 24(sp),d0
    eb4e:	|      move.l d0,-(sp)
    eb50:	|      jsr 15178 <trimStack>
    eb56:	|      addq.l #4,sp
	if (! getValueType (&x1, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    eb58:	|      movea.l 24(sp),a0
    eb5c:	|      move.l 24(a0),d0
    eb60:	|      move.l d0,-(sp)
    eb62:	|      pea 1 <_start+0x1>
    eb66:	|      moveq #20,d0
    eb68:	|      add.l sp,d0
    eb6a:	|      move.l d0,-(sp)
    eb6c:	|      jsr 147f4 <getValueType>
    eb72:	|      lea 12(sp),sp
    eb76:	|      tst.w d0
    eb78:	|  /-- bne.s eb7e <builtIn_blankArea+0xd0>
    eb7a:	|  |   moveq #1,d0
    eb7c:	+--|-- bra.s ebb0 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    eb7e:	|  \-> moveq #24,d0
    eb80:	|      add.l 24(sp),d0
    eb84:	|      move.l d0,-(sp)
    eb86:	|      jsr 15178 <trimStack>
    eb8c:	|      addq.l #4,sp
	blankScreen (x1, y1, x2, y2);
    eb8e:	|      movea.l (sp),a1
    eb90:	|      movea.l 4(sp),a0
    eb94:	|      move.l 8(sp),d1
    eb98:	|      move.l 12(sp),d0
    eb9c:	|      move.l a1,-(sp)
    eb9e:	|      move.l a0,-(sp)
    eba0:	|      move.l d1,-(sp)
    eba2:	|      move.l d0,-(sp)
    eba4:	|      jsr d21e <blankScreen>
    ebaa:	|      lea 16(sp),sp
	return BR_CONTINUE;
    ebae:	|      moveq #2,d0
}
    ebb0:	\----> lea 16(sp),sp
    ebb4:	       rts

0000ebb6 <builtIn_darkBackground>:

builtIn(darkBackground)
{
	UNUSEDALL
	darkScreen ();
    ebb6:	jsr d232 <darkScreen>
	return BR_CONTINUE;
    ebbc:	moveq #2,d0
}
    ebbe:	rts

0000ebc0 <builtIn_addOverlay>:

builtIn(addOverlay)
{
    ebc0:	       lea -12(sp),sp
	UNUSEDALL
	int fileNumber, xPos, yPos;
	if (! getValueType(&yPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ebc4:	       movea.l 20(sp),a0
    ebc8:	       move.l 24(a0),d0
    ebcc:	       move.l d0,-(sp)
    ebce:	       pea 1 <_start+0x1>
    ebd2:	       lea 8(sp),a0
    ebd6:	       move.l a0,-(sp)
    ebd8:	       jsr 147f4 <getValueType>
    ebde:	       lea 12(sp),sp
    ebe2:	       tst.w d0
    ebe4:	   /-- bne.s ebec <builtIn_addOverlay+0x2c>
    ebe6:	   |   moveq #1,d0
    ebe8:	/--|-- bra.w ec84 <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    ebec:	|  \-> moveq #24,d0
    ebee:	|      add.l 20(sp),d0
    ebf2:	|      move.l d0,-(sp)
    ebf4:	|      jsr 15178 <trimStack>
    ebfa:	|      addq.l #4,sp
	if (! getValueType(&xPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ebfc:	|      movea.l 20(sp),a0
    ec00:	|      move.l 24(a0),d0
    ec04:	|      move.l d0,-(sp)
    ec06:	|      pea 1 <_start+0x1>
    ec0a:	|      moveq #12,d0
    ec0c:	|      add.l sp,d0
    ec0e:	|      move.l d0,-(sp)
    ec10:	|      jsr 147f4 <getValueType>
    ec16:	|      lea 12(sp),sp
    ec1a:	|      tst.w d0
    ec1c:	|  /-- bne.s ec22 <builtIn_addOverlay+0x62>
    ec1e:	|  |   moveq #1,d0
    ec20:	+--|-- bra.s ec84 <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    ec22:	|  \-> moveq #24,d0
    ec24:	|      add.l 20(sp),d0
    ec28:	|      move.l d0,-(sp)
    ec2a:	|      jsr 15178 <trimStack>
    ec30:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    ec32:	|      movea.l 20(sp),a0
    ec36:	|      move.l 24(a0),d0
    ec3a:	|      move.l d0,-(sp)
    ec3c:	|      pea 5 <_start+0x5>
    ec40:	|      moveq #16,d0
    ec42:	|      add.l sp,d0
    ec44:	|      move.l d0,-(sp)
    ec46:	|      jsr 147f4 <getValueType>
    ec4c:	|      lea 12(sp),sp
    ec50:	|      tst.w d0
    ec52:	|  /-- bne.s ec58 <builtIn_addOverlay+0x98>
    ec54:	|  |   moveq #1,d0
    ec56:	+--|-- bra.s ec84 <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    ec58:	|  \-> moveq #24,d0
    ec5a:	|      add.l 20(sp),d0
    ec5e:	|      move.l d0,-(sp)
    ec60:	|      jsr 15178 <trimStack>
    ec66:	|      addq.l #4,sp
	loadBackDrop (fileNumber, xPos, yPos);
    ec68:	|      movea.l (sp),a0
    ec6a:	|      move.l 4(sp),d1
    ec6e:	|      move.l 8(sp),d0
    ec72:	|      move.l a0,-(sp)
    ec74:	|      move.l d1,-(sp)
    ec76:	|      move.l d0,-(sp)
    ec78:	|      jsr d350 <loadBackDrop>
    ec7e:	|      lea 12(sp),sp
	return BR_CONTINUE;
    ec82:	|      moveq #2,d0
}
    ec84:	\----> lea 12(sp),sp
    ec88:	       rts

0000ec8a <builtIn_mixOverlay>:

builtIn(mixOverlay)
{
    ec8a:	       lea -12(sp),sp
	UNUSEDALL
	int fileNumber, xPos, yPos;
	if (! getValueType(&yPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ec8e:	       movea.l 20(sp),a0
    ec92:	       move.l 24(a0),d0
    ec96:	       move.l d0,-(sp)
    ec98:	       pea 1 <_start+0x1>
    ec9c:	       lea 8(sp),a0
    eca0:	       move.l a0,-(sp)
    eca2:	       jsr 147f4 <getValueType>
    eca8:	       lea 12(sp),sp
    ecac:	       tst.w d0
    ecae:	   /-- bne.s ecb6 <builtIn_mixOverlay+0x2c>
    ecb0:	   |   moveq #1,d0
    ecb2:	/--|-- bra.w ed4e <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    ecb6:	|  \-> moveq #24,d0
    ecb8:	|      add.l 20(sp),d0
    ecbc:	|      move.l d0,-(sp)
    ecbe:	|      jsr 15178 <trimStack>
    ecc4:	|      addq.l #4,sp
	if (! getValueType(&xPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ecc6:	|      movea.l 20(sp),a0
    ecca:	|      move.l 24(a0),d0
    ecce:	|      move.l d0,-(sp)
    ecd0:	|      pea 1 <_start+0x1>
    ecd4:	|      moveq #12,d0
    ecd6:	|      add.l sp,d0
    ecd8:	|      move.l d0,-(sp)
    ecda:	|      jsr 147f4 <getValueType>
    ece0:	|      lea 12(sp),sp
    ece4:	|      tst.w d0
    ece6:	|  /-- bne.s ecec <builtIn_mixOverlay+0x62>
    ece8:	|  |   moveq #1,d0
    ecea:	+--|-- bra.s ed4e <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    ecec:	|  \-> moveq #24,d0
    ecee:	|      add.l 20(sp),d0
    ecf2:	|      move.l d0,-(sp)
    ecf4:	|      jsr 15178 <trimStack>
    ecfa:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    ecfc:	|      movea.l 20(sp),a0
    ed00:	|      move.l 24(a0),d0
    ed04:	|      move.l d0,-(sp)
    ed06:	|      pea 5 <_start+0x5>
    ed0a:	|      moveq #16,d0
    ed0c:	|      add.l sp,d0
    ed0e:	|      move.l d0,-(sp)
    ed10:	|      jsr 147f4 <getValueType>
    ed16:	|      lea 12(sp),sp
    ed1a:	|      tst.w d0
    ed1c:	|  /-- bne.s ed22 <builtIn_mixOverlay+0x98>
    ed1e:	|  |   moveq #1,d0
    ed20:	+--|-- bra.s ed4e <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    ed22:	|  \-> moveq #24,d0
    ed24:	|      add.l 20(sp),d0
    ed28:	|      move.l d0,-(sp)
    ed2a:	|      jsr 15178 <trimStack>
    ed30:	|      addq.l #4,sp
	mixBackDrop (fileNumber, xPos, yPos);
    ed32:	|      movea.l (sp),a0
    ed34:	|      move.l 4(sp),d1
    ed38:	|      move.l 8(sp),d0
    ed3c:	|      move.l a0,-(sp)
    ed3e:	|      move.l d1,-(sp)
    ed40:	|      move.l d0,-(sp)
    ed42:	|      jsr d3c6 <mixBackDrop>
    ed48:	|      lea 12(sp),sp
	return BR_CONTINUE;
    ed4c:	|      moveq #2,d0
}
    ed4e:	\----> lea 12(sp),sp
    ed52:	       rts

0000ed54 <builtIn_pasteImage>:

builtIn(pasteImage)
{
    ed54:	       lea -12(sp),sp
	UNUSEDALL
	KPrintF("pasteimage: Started\n");
    ed58:	       pea 19866 <PutChar+0x1b48>
    ed5e:	       jsr 17254 <KPrintF>
    ed64:	       addq.l #4,sp
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ed66:	       movea.l 20(sp),a0
    ed6a:	       move.l 24(a0),d0
    ed6e:	       move.l d0,-(sp)
    ed70:	       pea 1 <_start+0x1>
    ed74:	       lea 8(sp),a0
    ed78:	       move.l a0,-(sp)
    ed7a:	       jsr 147f4 <getValueType>
    ed80:	       lea 12(sp),sp
    ed84:	       tst.w d0
    ed86:	   /-- bne.s ed8e <builtIn_pasteImage+0x3a>
    ed88:	   |   moveq #1,d0
    ed8a:	/--|-- bra.w ee2c <builtIn_pasteImage+0xd8>
	trimStack (&fun -> stack);
    ed8e:	|  \-> moveq #24,d0
    ed90:	|      add.l 20(sp),d0
    ed94:	|      move.l d0,-(sp)
    ed96:	|      jsr 15178 <trimStack>
    ed9c:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ed9e:	|      movea.l 20(sp),a0
    eda2:	|      move.l 24(a0),d0
    eda6:	|      move.l d0,-(sp)
    eda8:	|      pea 1 <_start+0x1>
    edac:	|      moveq #12,d0
    edae:	|      add.l sp,d0
    edb0:	|      move.l d0,-(sp)
    edb2:	|      jsr 147f4 <getValueType>
    edb8:	|      lea 12(sp),sp
    edbc:	|      tst.w d0
    edbe:	|  /-- bne.s edc4 <builtIn_pasteImage+0x70>
    edc0:	|  |   moveq #1,d0
    edc2:	+--|-- bra.s ee2c <builtIn_pasteImage+0xd8>
	trimStack (&fun -> stack);
    edc4:	|  \-> moveq #24,d0
    edc6:	|      add.l 20(sp),d0
    edca:	|      move.l d0,-(sp)
    edcc:	|      jsr 15178 <trimStack>
    edd2:	|      addq.l #4,sp
	struct personaAnimation * pp = getAnimationFromVar (&(fun -> stack -> thisVar));
    edd4:	|      movea.l 20(sp),a0
    edd8:	|      move.l 24(a0),d0
    eddc:	|      move.l d0,-(sp)
    edde:	|      jsr 14ccc <getAnimationFromVar>
    ede4:	|      addq.l #4,sp
    ede6:	|      move.l d0,8(sp)
	trimStack (&fun -> stack);
    edea:	|      moveq #24,d0
    edec:	|      add.l 20(sp),d0
    edf0:	|      move.l d0,-(sp)
    edf2:	|      jsr 15178 <trimStack>
    edf8:	|      addq.l #4,sp
	if (pp == NULL) return BR_CONTINUE;
    edfa:	|      tst.l 8(sp)
    edfe:	|  /-- bne.s ee04 <builtIn_pasteImage+0xb0>
    ee00:	|  |   moveq #2,d0
    ee02:	+--|-- bra.s ee2c <builtIn_pasteImage+0xd8>

	pasteCursor (x, y, pp);
    ee04:	|  \-> move.l (sp),d1
    ee06:	|      move.l 4(sp),d0
    ee0a:	|      move.l 8(sp),-(sp)
    ee0e:	|      move.l d1,-(sp)
    ee10:	|      move.l d0,-(sp)
    ee12:	|      jsr d94 <pasteCursor>
    ee18:	|      lea 12(sp),sp
	KPrintF("pasteimage: Finished\n");
    ee1c:	|      pea 1987b <PutChar+0x1b5d>
    ee22:	|      jsr 17254 <KPrintF>
    ee28:	|      addq.l #4,sp
	return BR_CONTINUE;	
    ee2a:	|      moveq #2,d0
}
    ee2c:	\----> lea 12(sp),sp
    ee30:	       rts

0000ee32 <builtIn_setSceneDimensions>:

#pragma mark -
#pragma mark Background Image - Scrolling

builtIn(setSceneDimensions)
{
    ee32:	       subq.l #8,sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ee34:	       movea.l 16(sp),a0
    ee38:	       move.l 24(a0),d0
    ee3c:	       move.l d0,-(sp)
    ee3e:	       pea 1 <_start+0x1>
    ee42:	       move.l sp,d0
    ee44:	       addq.l #8,d0
    ee46:	       move.l d0,-(sp)
    ee48:	       jsr 147f4 <getValueType>
    ee4e:	       lea 12(sp),sp
    ee52:	       tst.w d0
    ee54:	   /-- bne.s ee5c <builtIn_setSceneDimensions+0x2a>
    ee56:	   |   moveq #1,d0
    ee58:	/--|-- bra.w eee4 <builtIn_setSceneDimensions+0xb2>
	trimStack (&fun -> stack);
    ee5c:	|  \-> moveq #24,d0
    ee5e:	|      add.l 16(sp),d0
    ee62:	|      move.l d0,-(sp)
    ee64:	|      jsr 15178 <trimStack>
    ee6a:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ee6c:	|      movea.l 16(sp),a0
    ee70:	|      move.l 24(a0),d0
    ee74:	|      move.l d0,-(sp)
    ee76:	|      pea 1 <_start+0x1>
    ee7a:	|      moveq #12,d0
    ee7c:	|      add.l sp,d0
    ee7e:	|      move.l d0,-(sp)
    ee80:	|      jsr 147f4 <getValueType>
    ee86:	|      lea 12(sp),sp
    ee8a:	|      tst.w d0
    ee8c:	|  /-- bne.s ee92 <builtIn_setSceneDimensions+0x60>
    ee8e:	|  |   moveq #1,d0
    ee90:	+--|-- bra.s eee4 <builtIn_setSceneDimensions+0xb2>
	trimStack (&fun -> stack);
    ee92:	|  \-> moveq #24,d0
    ee94:	|      add.l 16(sp),d0
    ee98:	|      move.l d0,-(sp)
    ee9a:	|      jsr 15178 <trimStack>
    eea0:	|      addq.l #4,sp
	if (resizeBackdrop (x, y)) {
    eea2:	|      move.l (sp),d1
    eea4:	|      move.l 4(sp),d0
    eea8:	|      move.l d1,-(sp)
    eeaa:	|      move.l d0,-(sp)
    eeac:	|      jsr d41c <resizeBackdrop>
    eeb2:	|      addq.l #8,sp
    eeb4:	|      tst.w d0
    eeb6:	|  /-- beq.s eed4 <builtIn_setSceneDimensions+0xa2>
		blankScreen (0, 0, x, y);
    eeb8:	|  |   move.l (sp),d1
    eeba:	|  |   move.l 4(sp),d0
    eebe:	|  |   move.l d1,-(sp)
    eec0:	|  |   move.l d0,-(sp)
    eec2:	|  |   clr.l -(sp)
    eec4:	|  |   clr.l -(sp)
    eec6:	|  |   jsr d21e <blankScreen>
    eecc:	|  |   lea 16(sp),sp
		return BR_CONTINUE;
    eed0:	|  |   moveq #2,d0
    eed2:	+--|-- bra.s eee4 <builtIn_setSceneDimensions+0xb2>
	}
	KPrintF("Out of memory creating new backdrop.");
    eed4:	|  \-> pea 19891 <PutChar+0x1b73>
    eeda:	|      jsr 17254 <KPrintF>
    eee0:	|      addq.l #4,sp
	return BR_ERROR;
    eee2:	|      moveq #1,d0
}
    eee4:	\----> addq.l #8,sp
    eee6:	       rts

0000eee8 <builtIn_aimCamera>:

builtIn(aimCamera)
{
    eee8:	          move.l d3,-(sp)
    eeea:	          move.l d2,-(sp)
	UNUSEDALL
	if (! getValueType(&cameraY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    eeec:	          movea.l 16(sp),a0
    eef0:	          move.l 24(a0),d0
    eef4:	          move.l d0,-(sp)
    eef6:	          pea 1 <_start+0x1>
    eefa:	          pea 1ca88 <cameraY>
    ef00:	          jsr 147f4 <getValueType>
    ef06:	          lea 12(sp),sp
    ef0a:	          tst.w d0
    ef0c:	      /-- bne.s ef14 <builtIn_aimCamera+0x2c>
    ef0e:	      |   moveq #1,d0
    ef10:	/-----|-- bra.w f196 <builtIn_aimCamera+0x2ae>
	trimStack (&fun -> stack);
    ef14:	|     \-> moveq #24,d0
    ef16:	|         add.l 16(sp),d0
    ef1a:	|         move.l d0,-(sp)
    ef1c:	|         jsr 15178 <trimStack>
    ef22:	|         addq.l #4,sp
	if (! getValueType(&cameraX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ef24:	|         movea.l 16(sp),a0
    ef28:	|         move.l 24(a0),d0
    ef2c:	|         move.l d0,-(sp)
    ef2e:	|         pea 1 <_start+0x1>
    ef32:	|         pea 1ca84 <cameraX>
    ef38:	|         jsr 147f4 <getValueType>
    ef3e:	|         lea 12(sp),sp
    ef42:	|         tst.w d0
    ef44:	|     /-- bne.s ef4c <builtIn_aimCamera+0x64>
    ef46:	|     |   moveq #1,d0
    ef48:	+-----|-- bra.w f196 <builtIn_aimCamera+0x2ae>
	trimStack (&fun -> stack);
    ef4c:	|     \-> moveq #24,d0
    ef4e:	|         add.l 16(sp),d0
    ef52:	|         move.l d0,-(sp)
    ef54:	|         jsr 15178 <trimStack>
    ef5a:	|         addq.l #4,sp

	cameraX -= (FLOAT)(winWidth >> 1)/ cameraZoom;
    ef5c:	|         move.l 1ca84 <cameraX>,d0
    ef62:	|         move.l d0,-(sp)
    ef64:	|         jsr 17686 <__floatsisf>
    ef6a:	|         addq.l #4,sp
    ef6c:	|         move.l d0,d2
    ef6e:	|         move.l 1c91e <winWidth>,d0
    ef74:	|         lsr.l #1,d0
    ef76:	|         move.l d0,-(sp)
    ef78:	|         jsr 176ae <__floatunsisf>
    ef7e:	|         addq.l #4,sp
    ef80:	|         move.l d0,d1
    ef82:	|         move.l 1c368 <cameraZoom>,d0
    ef88:	|         move.l d0,-(sp)
    ef8a:	|         move.l d1,-(sp)
    ef8c:	|         jsr 1753c <__divsf3>
    ef92:	|         addq.l #8,sp
    ef94:	|         move.l d0,-(sp)
    ef96:	|         move.l d2,-(sp)
    ef98:	|         jsr 1797a <__subsf3>
    ef9e:	|         addq.l #8,sp
    efa0:	|         move.l d0,-(sp)
    efa2:	|         jsr 1761e <__fixsfsi>
    efa8:	|         addq.l #4,sp
    efaa:	|         move.l d0,1ca84 <cameraX>
	cameraY -= (FLOAT)(winHeight >> 1)/ cameraZoom;
    efb0:	|         move.l 1ca88 <cameraY>,d0
    efb6:	|         move.l d0,-(sp)
    efb8:	|         jsr 17686 <__floatsisf>
    efbe:	|         addq.l #4,sp
    efc0:	|         move.l d0,d2
    efc2:	|         move.l 1c922 <winHeight>,d0
    efc8:	|         lsr.l #1,d0
    efca:	|         move.l d0,-(sp)
    efcc:	|         jsr 176ae <__floatunsisf>
    efd2:	|         addq.l #4,sp
    efd4:	|         move.l d0,d1
    efd6:	|         move.l 1c368 <cameraZoom>,d0
    efdc:	|         move.l d0,-(sp)
    efde:	|         move.l d1,-(sp)
    efe0:	|         jsr 1753c <__divsf3>
    efe6:	|         addq.l #8,sp
    efe8:	|         move.l d0,-(sp)
    efea:	|         move.l d2,-(sp)
    efec:	|         jsr 1797a <__subsf3>
    eff2:	|         addq.l #8,sp
    eff4:	|         move.l d0,-(sp)
    eff6:	|         jsr 1761e <__fixsfsi>
    effc:	|         addq.l #4,sp
    effe:	|         move.l d0,1ca88 <cameraY>

	if (cameraX < 0) cameraX = 0;
    f004:	|         move.l 1ca84 <cameraX>,d0
    f00a:	|     /-- bpl.s f016 <builtIn_aimCamera+0x12e>
    f00c:	|     |   clr.l 1ca84 <cameraX>
    f012:	|  /--|-- bra.w f0cc <builtIn_aimCamera+0x1e4>
	else if (cameraX > sceneWidth - (FLOAT)winWidth/ cameraZoom) cameraX = sceneWidth - (FLOAT)winWidth/ cameraZoom;
    f016:	|  |  \-> move.l 1ca84 <cameraX>,d0
    f01c:	|  |      move.l d0,-(sp)
    f01e:	|  |      jsr 17686 <__floatsisf>
    f024:	|  |      addq.l #4,sp
    f026:	|  |      move.l d0,d2
    f028:	|  |      move.l 1ca66 <sceneWidth>,d0
    f02e:	|  |      move.l d0,-(sp)
    f030:	|  |      jsr 176ae <__floatunsisf>
    f036:	|  |      addq.l #4,sp
    f038:	|  |      move.l d0,d3
    f03a:	|  |      move.l 1c91e <winWidth>,d0
    f040:	|  |      move.l d0,-(sp)
    f042:	|  |      jsr 176ae <__floatunsisf>
    f048:	|  |      addq.l #4,sp
    f04a:	|  |      move.l d0,d1
    f04c:	|  |      move.l 1c368 <cameraZoom>,d0
    f052:	|  |      move.l d0,-(sp)
    f054:	|  |      move.l d1,-(sp)
    f056:	|  |      jsr 1753c <__divsf3>
    f05c:	|  |      addq.l #8,sp
    f05e:	|  |      move.l d0,-(sp)
    f060:	|  |      move.l d3,-(sp)
    f062:	|  |      jsr 1797a <__subsf3>
    f068:	|  |      addq.l #8,sp
    f06a:	|  |      move.l d0,-(sp)
    f06c:	|  |      move.l d2,-(sp)
    f06e:	|  |      jsr 177f2 <__gtsf2>
    f074:	|  |      addq.l #8,sp
    f076:	|  |      tst.l d0
    f078:	|  +----- ble.s f0cc <builtIn_aimCamera+0x1e4>
    f07a:	|  |      move.l 1ca66 <sceneWidth>,d0
    f080:	|  |      move.l d0,-(sp)
    f082:	|  |      jsr 176ae <__floatunsisf>
    f088:	|  |      addq.l #4,sp
    f08a:	|  |      move.l d0,d2
    f08c:	|  |      move.l 1c91e <winWidth>,d0
    f092:	|  |      move.l d0,-(sp)
    f094:	|  |      jsr 176ae <__floatunsisf>
    f09a:	|  |      addq.l #4,sp
    f09c:	|  |      move.l d0,d1
    f09e:	|  |      move.l 1c368 <cameraZoom>,d0
    f0a4:	|  |      move.l d0,-(sp)
    f0a6:	|  |      move.l d1,-(sp)
    f0a8:	|  |      jsr 1753c <__divsf3>
    f0ae:	|  |      addq.l #8,sp
    f0b0:	|  |      move.l d0,-(sp)
    f0b2:	|  |      move.l d2,-(sp)
    f0b4:	|  |      jsr 1797a <__subsf3>
    f0ba:	|  |      addq.l #8,sp
    f0bc:	|  |      move.l d0,-(sp)
    f0be:	|  |      jsr 1761e <__fixsfsi>
    f0c4:	|  |      addq.l #4,sp
    f0c6:	|  |      move.l d0,1ca84 <cameraX>
	if (cameraY < 0) cameraY = 0;
    f0cc:	|  \----> move.l 1ca88 <cameraY>,d0
    f0d2:	|     /-- bpl.s f0de <builtIn_aimCamera+0x1f6>
    f0d4:	|     |   clr.l 1ca88 <cameraY>
    f0da:	|  /--|-- bra.w f194 <builtIn_aimCamera+0x2ac>
	else if (cameraY > sceneHeight - (FLOAT)winHeight/ cameraZoom) cameraY = sceneHeight - (FLOAT)winHeight/ cameraZoom;
    f0de:	|  |  \-> move.l 1ca88 <cameraY>,d0
    f0e4:	|  |      move.l d0,-(sp)
    f0e6:	|  |      jsr 17686 <__floatsisf>
    f0ec:	|  |      addq.l #4,sp
    f0ee:	|  |      move.l d0,d2
    f0f0:	|  |      move.l 1ca6a <sceneHeight>,d0
    f0f6:	|  |      move.l d0,-(sp)
    f0f8:	|  |      jsr 176ae <__floatunsisf>
    f0fe:	|  |      addq.l #4,sp
    f100:	|  |      move.l d0,d3
    f102:	|  |      move.l 1c922 <winHeight>,d0
    f108:	|  |      move.l d0,-(sp)
    f10a:	|  |      jsr 176ae <__floatunsisf>
    f110:	|  |      addq.l #4,sp
    f112:	|  |      move.l d0,d1
    f114:	|  |      move.l 1c368 <cameraZoom>,d0
    f11a:	|  |      move.l d0,-(sp)
    f11c:	|  |      move.l d1,-(sp)
    f11e:	|  |      jsr 1753c <__divsf3>
    f124:	|  |      addq.l #8,sp
    f126:	|  |      move.l d0,-(sp)
    f128:	|  |      move.l d3,-(sp)
    f12a:	|  |      jsr 1797a <__subsf3>
    f130:	|  |      addq.l #8,sp
    f132:	|  |      move.l d0,-(sp)
    f134:	|  |      move.l d2,-(sp)
    f136:	|  |      jsr 177f2 <__gtsf2>
    f13c:	|  |      addq.l #8,sp
    f13e:	|  |      tst.l d0
    f140:	|  +----- ble.s f194 <builtIn_aimCamera+0x2ac>
    f142:	|  |      move.l 1ca6a <sceneHeight>,d0
    f148:	|  |      move.l d0,-(sp)
    f14a:	|  |      jsr 176ae <__floatunsisf>
    f150:	|  |      addq.l #4,sp
    f152:	|  |      move.l d0,d2
    f154:	|  |      move.l 1c922 <winHeight>,d0
    f15a:	|  |      move.l d0,-(sp)
    f15c:	|  |      jsr 176ae <__floatunsisf>
    f162:	|  |      addq.l #4,sp
    f164:	|  |      move.l d0,d1
    f166:	|  |      move.l 1c368 <cameraZoom>,d0
    f16c:	|  |      move.l d0,-(sp)
    f16e:	|  |      move.l d1,-(sp)
    f170:	|  |      jsr 1753c <__divsf3>
    f176:	|  |      addq.l #8,sp
    f178:	|  |      move.l d0,-(sp)
    f17a:	|  |      move.l d2,-(sp)
    f17c:	|  |      jsr 1797a <__subsf3>
    f182:	|  |      addq.l #8,sp
    f184:	|  |      move.l d0,-(sp)
    f186:	|  |      jsr 1761e <__fixsfsi>
    f18c:	|  |      addq.l #4,sp
    f18e:	|  |      move.l d0,1ca88 <cameraY>
	return BR_CONTINUE;
    f194:	|  \----> moveq #2,d0
}
    f196:	\-------> move.l (sp)+,d2
    f198:	          move.l (sp)+,d3
    f19a:	          rts

0000f19c <builtIn_zoomCamera>:


builtIn(zoomCamera)
{
    f19c:	       subq.l #4,sp
    f19e:	       move.l d2,-(sp)
	UNUSEDALL
	int z;
	if (! getValueType(&z, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f1a0:	       movea.l 16(sp),a0
    f1a4:	       move.l 24(a0),d0
    f1a8:	       move.l d0,-(sp)
    f1aa:	       pea 1 <_start+0x1>
    f1ae:	       moveq #12,d0
    f1b0:	       add.l sp,d0
    f1b2:	       move.l d0,-(sp)
    f1b4:	       jsr 147f4 <getValueType>
    f1ba:	       lea 12(sp),sp
    f1be:	       tst.w d0
    f1c0:	   /-- bne.s f1c8 <builtIn_zoomCamera+0x2c>
    f1c2:	   |   moveq #1,d0
    f1c4:	/--|-- bra.w f3c2 <builtIn_zoomCamera+0x226>
	trimStack (&fun -> stack);
    f1c8:	|  \-> moveq #24,d0
    f1ca:	|      add.l 16(sp),d0
    f1ce:	|      move.l d0,-(sp)
    f1d0:	|      jsr 15178 <trimStack>
    f1d6:	|      addq.l #4,sp

	input.mouseX = input.mouseX * cameraZoom;
    f1d8:	|      move.l 1c986 <input+0xa>,d0
    f1de:	|      move.l d0,-(sp)
    f1e0:	|      jsr 17686 <__floatsisf>
    f1e6:	|      addq.l #4,sp
    f1e8:	|      move.l d0,d1
    f1ea:	|      move.l 1c368 <cameraZoom>,d0
    f1f0:	|      move.l d0,-(sp)
    f1f2:	|      move.l d1,-(sp)
    f1f4:	|      jsr 17738 <__mulsf3>
    f1fa:	|      addq.l #8,sp
    f1fc:	|      move.l d0,-(sp)
    f1fe:	|      jsr 1761e <__fixsfsi>
    f204:	|      addq.l #4,sp
    f206:	|      move.l d0,1c986 <input+0xa>
	input.mouseY = input.mouseY * cameraZoom;
    f20c:	|      move.l 1c98a <input+0xe>,d0
    f212:	|      move.l d0,-(sp)
    f214:	|      jsr 17686 <__floatsisf>
    f21a:	|      addq.l #4,sp
    f21c:	|      move.l d0,d1
    f21e:	|      move.l 1c368 <cameraZoom>,d0
    f224:	|      move.l d0,-(sp)
    f226:	|      move.l d1,-(sp)
    f228:	|      jsr 17738 <__mulsf3>
    f22e:	|      addq.l #8,sp
    f230:	|      move.l d0,-(sp)
    f232:	|      jsr 1761e <__fixsfsi>
    f238:	|      addq.l #4,sp
    f23a:	|      move.l d0,1c98a <input+0xe>


	cameraZoom = (FLOAT) z * (FLOAT) 0.01;
    f240:	|      move.l 4(sp),d0
    f244:	|      move.l d0,-(sp)
    f246:	|      jsr 17686 <__floatsisf>
    f24c:	|      addq.l #4,sp
    f24e:	|      move.l #1008981770,-(sp)
    f254:	|      move.l d0,-(sp)
    f256:	|      jsr 17738 <__mulsf3>
    f25c:	|      addq.l #8,sp
    f25e:	|      move.l d0,1c368 <cameraZoom>
	if ((FLOAT) winWidth / cameraZoom > sceneWidth) cameraZoom = (FLOAT)winWidth / sceneWidth;
    f264:	|      move.l 1c91e <winWidth>,d0
    f26a:	|      move.l d0,-(sp)
    f26c:	|      jsr 176ae <__floatunsisf>
    f272:	|      addq.l #4,sp
    f274:	|      move.l d0,d1
    f276:	|      move.l 1c368 <cameraZoom>,d0
    f27c:	|      move.l d0,-(sp)
    f27e:	|      move.l d1,-(sp)
    f280:	|      jsr 1753c <__divsf3>
    f286:	|      addq.l #8,sp
    f288:	|      move.l d0,d2
    f28a:	|      move.l 1ca66 <sceneWidth>,d0
    f290:	|      move.l d0,-(sp)
    f292:	|      jsr 176ae <__floatunsisf>
    f298:	|      addq.l #4,sp
    f29a:	|      move.l d0,-(sp)
    f29c:	|      move.l d2,-(sp)
    f29e:	|      jsr 177f2 <__gtsf2>
    f2a4:	|      addq.l #8,sp
    f2a6:	|      tst.l d0
    f2a8:	|  /-- ble.s f2de <builtIn_zoomCamera+0x142>
    f2aa:	|  |   move.l 1c91e <winWidth>,d0
    f2b0:	|  |   move.l d0,-(sp)
    f2b2:	|  |   jsr 176ae <__floatunsisf>
    f2b8:	|  |   addq.l #4,sp
    f2ba:	|  |   move.l d0,d2
    f2bc:	|  |   move.l 1ca66 <sceneWidth>,d0
    f2c2:	|  |   move.l d0,-(sp)
    f2c4:	|  |   jsr 176ae <__floatunsisf>
    f2ca:	|  |   addq.l #4,sp
    f2cc:	|  |   move.l d0,-(sp)
    f2ce:	|  |   move.l d2,-(sp)
    f2d0:	|  |   jsr 1753c <__divsf3>
    f2d6:	|  |   addq.l #8,sp
    f2d8:	|  |   move.l d0,1c368 <cameraZoom>
	if ((FLOAT) winHeight / cameraZoom > sceneHeight) cameraZoom = (FLOAT)winHeight / sceneHeight;
    f2de:	|  \-> move.l 1c922 <winHeight>,d0
    f2e4:	|      move.l d0,-(sp)
    f2e6:	|      jsr 176ae <__floatunsisf>
    f2ec:	|      addq.l #4,sp
    f2ee:	|      move.l d0,d1
    f2f0:	|      move.l 1c368 <cameraZoom>,d0
    f2f6:	|      move.l d0,-(sp)
    f2f8:	|      move.l d1,-(sp)
    f2fa:	|      jsr 1753c <__divsf3>
    f300:	|      addq.l #8,sp
    f302:	|      move.l d0,d2
    f304:	|      move.l 1ca6a <sceneHeight>,d0
    f30a:	|      move.l d0,-(sp)
    f30c:	|      jsr 176ae <__floatunsisf>
    f312:	|      addq.l #4,sp
    f314:	|      move.l d0,-(sp)
    f316:	|      move.l d2,-(sp)
    f318:	|      jsr 177f2 <__gtsf2>
    f31e:	|      addq.l #8,sp
    f320:	|      tst.l d0
    f322:	|  /-- ble.s f358 <builtIn_zoomCamera+0x1bc>
    f324:	|  |   move.l 1c922 <winHeight>,d0
    f32a:	|  |   move.l d0,-(sp)
    f32c:	|  |   jsr 176ae <__floatunsisf>
    f332:	|  |   addq.l #4,sp
    f334:	|  |   move.l d0,d2
    f336:	|  |   move.l 1ca6a <sceneHeight>,d0
    f33c:	|  |   move.l d0,-(sp)
    f33e:	|  |   jsr 176ae <__floatunsisf>
    f344:	|  |   addq.l #4,sp
    f346:	|  |   move.l d0,-(sp)
    f348:	|  |   move.l d2,-(sp)
    f34a:	|  |   jsr 1753c <__divsf3>
    f350:	|  |   addq.l #8,sp
    f352:	|  |   move.l d0,1c368 <cameraZoom>
	//setPixelCoords (FALSE); Todo: Amigize this

	input.mouseX = input.mouseX / cameraZoom;
    f358:	|  \-> move.l 1c986 <input+0xa>,d0
    f35e:	|      move.l d0,-(sp)
    f360:	|      jsr 17686 <__floatsisf>
    f366:	|      addq.l #4,sp
    f368:	|      move.l d0,d1
    f36a:	|      move.l 1c368 <cameraZoom>,d0
    f370:	|      move.l d0,-(sp)
    f372:	|      move.l d1,-(sp)
    f374:	|      jsr 1753c <__divsf3>
    f37a:	|      addq.l #8,sp
    f37c:	|      move.l d0,-(sp)
    f37e:	|      jsr 1761e <__fixsfsi>
    f384:	|      addq.l #4,sp
    f386:	|      move.l d0,1c986 <input+0xa>
	input.mouseY = input.mouseY / cameraZoom;
    f38c:	|      move.l 1c98a <input+0xe>,d0
    f392:	|      move.l d0,-(sp)
    f394:	|      jsr 17686 <__floatsisf>
    f39a:	|      addq.l #4,sp
    f39c:	|      move.l d0,d1
    f39e:	|      move.l 1c368 <cameraZoom>,d0
    f3a4:	|      move.l d0,-(sp)
    f3a6:	|      move.l d1,-(sp)
    f3a8:	|      jsr 1753c <__divsf3>
    f3ae:	|      addq.l #8,sp
    f3b0:	|      move.l d0,-(sp)
    f3b2:	|      jsr 1761e <__fixsfsi>
    f3b8:	|      addq.l #4,sp
    f3ba:	|      move.l d0,1c98a <input+0xe>

	return BR_CONTINUE;
    f3c0:	|      moveq #2,d0
}
    f3c2:	\----> move.l (sp)+,d2
    f3c4:	       addq.l #4,sp
    f3c6:	       rts

0000f3c8 <builtIn_pickOne>:
#pragma mark -
#pragma mark Variables


builtIn(pickOne)
{
    f3c8:	             subq.l #4,sp
	UNUSEDALL
	if (! numParams) {
    f3ca:	             tst.l 8(sp)
    f3ce:	         /-- bne.s f3e2 <builtIn_pickOne+0x1a>
		KPrintF ("Built-in function should have at least 1 parameter");
    f3d0:	         |   pea 198b6 <PutChar+0x1b98>
    f3d6:	         |   jsr 17254 <KPrintF>
    f3dc:	         |   addq.l #4,sp
		return BR_ERROR;
    f3de:	         |   moveq #1,d0
    f3e0:	/--------|-- bra.s f442 <builtIn_pickOne+0x7a>
	}
	int i = rand() % numParams;
    f3e2:	|        \-> jsr 15e14 <rand>
    f3e8:	|            move.l d0,d1
    f3ea:	|            move.l 8(sp),d0
    f3ee:	|            move.l d0,-(sp)
    f3f0:	|            move.l d1,-(sp)
    f3f2:	|            jsr 17ce2 <__umodsi3>
    f3f8:	|            addq.l #8,sp
    f3fa:	|            move.l d0,(sp)

	// Return value
	while (numParams --) {
    f3fc:	|     /----- bra.s f430 <builtIn_pickOne+0x68>
		if (i == numParams) copyVariable (&(fun -> stack -> thisVar), &fun -> reg);
    f3fe:	|  /--|----> move.l (sp),d0
    f400:	|  |  |      cmp.l 8(sp),d0
    f404:	|  |  |  /-- bne.s f420 <builtIn_pickOne+0x58>
    f406:	|  |  |  |   moveq #28,d0
    f408:	|  |  |  |   add.l 12(sp),d0
    f40c:	|  |  |  |   movea.l 12(sp),a0
    f410:	|  |  |  |   move.l 24(a0),d1
    f414:	|  |  |  |   move.l d0,-(sp)
    f416:	|  |  |  |   move.l d1,-(sp)
    f418:	|  |  |  |   jsr 14cae <copyVariable>
    f41e:	|  |  |  |   addq.l #8,sp
		trimStack (&fun -> stack);
    f420:	|  |  |  \-> moveq #24,d0
    f422:	|  |  |      add.l 12(sp),d0
    f426:	|  |  |      move.l d0,-(sp)
    f428:	|  |  |      jsr 15178 <trimStack>
    f42e:	|  |  |      addq.l #4,sp
	while (numParams --) {
    f430:	|  |  \----> move.l 8(sp),d0
    f434:	|  |         move.l d0,d1
    f436:	|  |         subq.l #1,d1
    f438:	|  |         move.l d1,8(sp)
    f43c:	|  |         tst.l d0
    f43e:	|  \-------- bne.s f3fe <builtIn_pickOne+0x36>
	}
	return BR_CONTINUE;
    f440:	|            moveq #2,d0
}
    f442:	\----------> addq.l #4,sp
    f444:	             rts

0000f446 <builtIn_substring>:

builtIn(substring)
{
    f446:	       lea -40(sp),sp
    f44a:	       move.l a6,-(sp)
    f44c:	       move.l d2,-(sp)
    char *newString;
    int start, length;

    //debugOut ("BUILTIN: substring\n");

    if (!getValueType(&length, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    f44e:	       movea.l 56(sp),a0
    f452:	       move.l 24(a0),d0
    f456:	       move.l d0,-(sp)
    f458:	       pea 1 <_start+0x1>
    f45c:	       lea 16(sp),a0
    f460:	       move.l a0,-(sp)
    f462:	       jsr 147f4 <getValueType>
    f468:	       lea 12(sp),sp
    f46c:	       tst.w d0
    f46e:	   /-- bne.s f476 <builtIn_substring+0x30>
    f470:	   |   moveq #1,d0
    f472:	/--|-- bra.w f5ee <builtIn_substring+0x1a8>
    trimStack(&fun->stack);
    f476:	|  \-> moveq #24,d0
    f478:	|      add.l 56(sp),d0
    f47c:	|      move.l d0,-(sp)
    f47e:	|      jsr 15178 <trimStack>
    f484:	|      addq.l #4,sp
    if (!getValueType(&start, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    f486:	|      movea.l 56(sp),a0
    f48a:	|      move.l 24(a0),d0
    f48e:	|      move.l d0,-(sp)
    f490:	|      pea 1 <_start+0x1>
    f494:	|      lea 20(sp),a0
    f498:	|      move.l a0,-(sp)
    f49a:	|      jsr 147f4 <getValueType>
    f4a0:	|      lea 12(sp),sp
    f4a4:	|      tst.w d0
    f4a6:	|  /-- bne.s f4ae <builtIn_substring+0x68>
    f4a8:	|  |   moveq #1,d0
    f4aa:	+--|-- bra.w f5ee <builtIn_substring+0x1a8>
    trimStack(&fun->stack);
    f4ae:	|  \-> moveq #24,d0
    f4b0:	|      add.l 56(sp),d0
    f4b4:	|      move.l d0,-(sp)
    f4b6:	|      jsr 15178 <trimStack>
    f4bc:	|      addq.l #4,sp
    wholeString = getTextFromAnyVar(&(fun->stack->thisVar));
    f4be:	|      movea.l 56(sp),a0
    f4c2:	|      move.l 24(a0),d0
    f4c6:	|      move.l d0,-(sp)
    f4c8:	|      jsr 14dca <getTextFromAnyVar>
    f4ce:	|      addq.l #4,sp
    f4d0:	|      move.l d0,44(sp)
    trimStack(&fun->stack);
    f4d4:	|      moveq #24,d0
    f4d6:	|      add.l 56(sp),d0
    f4da:	|      move.l d0,-(sp)
    f4dc:	|      jsr 15178 <trimStack>
    f4e2:	|      addq.l #4,sp
    
    if (strlen(wholeString) < (ULONG) start + length) {
    f4e4:	|      move.l 44(sp),-(sp)
    f4e8:	|      jsr 13ce0 <strlen>
    f4ee:	|      addq.l #4,sp
    f4f0:	|      move.l d0,d1
    f4f2:	|      move.l 12(sp),d0
    f4f6:	|      movea.l d0,a0
    f4f8:	|      move.l 8(sp),d0
    f4fc:	|      add.l a0,d0
    f4fe:	|      cmp.l d1,d0
    f500:	|  /-- bls.s f536 <builtIn_substring+0xf0>
        length = strlen(wholeString) - start;
    f502:	|  |   move.l 44(sp),-(sp)
    f506:	|  |   jsr 13ce0 <strlen>
    f50c:	|  |   addq.l #4,sp
    f50e:	|  |   move.l d0,d1
    f510:	|  |   move.l 12(sp),d0
    f514:	|  |   sub.l d0,d1
    f516:	|  |   move.l d1,d0
    f518:	|  |   move.l d0,8(sp)
        if (strlen(wholeString) < (ULONG) start) {
    f51c:	|  |   move.l 44(sp),-(sp)
    f520:	|  |   jsr 13ce0 <strlen>
    f526:	|  |   addq.l #4,sp
    f528:	|  |   move.l d0,d1
    f52a:	|  |   move.l 12(sp),d0
    f52e:	|  |   cmp.l d1,d0
    f530:	|  +-- bls.s f536 <builtIn_substring+0xf0>
            start = 0;
    f532:	|  |   clr.l 12(sp)
        }
    }
    if (length < 0) {
    f536:	|  \-> move.l 8(sp),d0
    f53a:	|  /-- bpl.s f540 <builtIn_substring+0xfa>
        length = 0;
    f53c:	|  |   clr.l 8(sp)
    }
    
    int startoffset = start;
    f540:	|  \-> move.l 12(sp),40(sp)
    int endoffset = start + length;
    f546:	|      move.l 12(sp),d1
    f54a:	|      move.l 8(sp),d0
    f54e:	|      move.l d1,d2
    f550:	|      add.l d0,d2
    f552:	|      move.l d2,36(sp)

    newString = AllocVec(endoffset - startoffset + 1, MEMF_ANY);
    f556:	|      move.l 36(sp),d0
    f55a:	|      sub.l 40(sp),d0
    f55e:	|      addq.l #1,d0
    f560:	|      move.l d0,32(sp)
    f564:	|      clr.l 28(sp)
    f568:	|      move.l 1c9ca <SysBase>,d0
    f56e:	|      movea.l d0,a6
    f570:	|      move.l 32(sp),d0
    f574:	|      move.l 28(sp),d1
    f578:	|      jsr -684(a6)
    f57c:	|      move.l d0,24(sp)
    f580:	|      move.l 24(sp),d0
    f584:	|      move.l d0,20(sp)
    if (!newString) {
    f588:	|  /-- bne.s f58e <builtIn_substring+0x148>
        return BR_ERROR;
    f58a:	|  |   moveq #1,d0
    f58c:	+--|-- bra.s f5ee <builtIn_substring+0x1a8>
    }
    
    memcpy(newString, wholeString + startoffset, endoffset - startoffset);
    f58e:	|  \-> move.l 36(sp),d0
    f592:	|      sub.l 40(sp),d0
    f596:	|      move.l d0,d1
    f598:	|      move.l 40(sp),d0
    f59c:	|      add.l 44(sp),d0
    f5a0:	|      move.l d1,-(sp)
    f5a2:	|      move.l d0,-(sp)
    f5a4:	|      move.l 28(sp),-(sp)
    f5a8:	|      jsr 17208 <memcpy>
    f5ae:	|      lea 12(sp),sp
    newString[endoffset - startoffset] = 0;
    f5b2:	|      move.l 36(sp),d0
    f5b6:	|      sub.l 40(sp),d0
    f5ba:	|      movea.l 20(sp),a0
    f5be:	|      adda.l d0,a0
    f5c0:	|      clr.b (a0)
    
    makeTextVar(&fun->reg, newString);
    f5c2:	|      moveq #28,d0
    f5c4:	|      add.l 56(sp),d0
    f5c8:	|      move.l 20(sp),-(sp)
    f5cc:	|      move.l d0,-(sp)
    f5ce:	|      jsr 14a16 <makeTextVar>
    f5d4:	|      addq.l #8,sp
    FreeVec(newString);
    f5d6:	|      move.l 20(sp),16(sp)
    f5dc:	|      move.l 1c9ca <SysBase>,d0
    f5e2:	|      movea.l d0,a6
    f5e4:	|      movea.l 16(sp),a1
    f5e8:	|      jsr -690(a6)
    return BR_CONTINUE;
    f5ec:	|      moveq #2,d0
}
    f5ee:	\----> move.l (sp)+,d2
    f5f0:	       movea.l (sp)+,a6
    f5f2:	       lea 40(sp),sp
    f5f6:	       rts

0000f5f8 <builtIn_stringLength>:

builtIn(stringLength)
{
    f5f8:	subq.l #8,sp
    f5fa:	move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    f5fc:	movea.l 20(sp),a0
    f600:	move.l 24(a0),d0
    f604:	move.l d0,-(sp)
    f606:	jsr 14dca <getTextFromAnyVar>
    f60c:	addq.l #4,sp
    f60e:	move.l d0,8(sp)
	trimStack (&fun -> stack);
    f612:	moveq #24,d0
    f614:	add.l 20(sp),d0
    f618:	move.l d0,-(sp)
    f61a:	jsr 15178 <trimStack>
    f620:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, strlen(newText));
    f622:	move.l 8(sp),-(sp)
    f626:	jsr 13ce0 <strlen>
    f62c:	addq.l #4,sp
    f62e:	move.l d0,d1
    f630:	moveq #28,d0
    f632:	add.l 20(sp),d0
    f636:	move.l d1,-(sp)
    f638:	pea 1 <_start+0x1>
    f63c:	move.l d0,-(sp)
    f63e:	jsr 150e6 <setVariable>
    f644:	lea 12(sp),sp
	FreeVec(newText);
    f648:	move.l 8(sp),4(sp)
    f64e:	move.l 1c9ca <SysBase>,d0
    f654:	movea.l d0,a6
    f656:	movea.l 4(sp),a1
    f65a:	jsr -690(a6)
	return BR_CONTINUE;
    f65e:	moveq #2,d0
}
    f660:	movea.l (sp)+,a6
    f662:	addq.l #8,sp
    f664:	rts

0000f666 <builtIn_newStack>:

builtIn(newStack)
{
    f666:	             lea -12(sp),sp
    f66a:	             move.l a6,-(sp)
    UNUSEDALL
    unlinkVar(&fun->reg);
    f66c:	             moveq #28,d0
    f66e:	             add.l 24(sp),d0
    f672:	             move.l d0,-(sp)
    f674:	             jsr 14a42 <unlinkVar>
    f67a:	             addq.l #4,sp

    // Return value
    fun->reg.varType = SVT_STACK;
    f67c:	             movea.l 24(sp),a0
    f680:	             moveq #6,d0
    f682:	             move.l d0,28(a0)
    fun->reg.varData.theStack = AllocVec(sizeof(struct stackHandler), MEMF_ANY);
    f686:	             moveq #12,d1
    f688:	             move.l d1,12(sp)
    f68c:	             clr.l 8(sp)
    f690:	             move.l 1c9ca <SysBase>,d0
    f696:	             movea.l d0,a6
    f698:	             move.l 12(sp),d0
    f69c:	             move.l 8(sp),d1
    f6a0:	             jsr -684(a6)
    f6a4:	             move.l d0,4(sp)
    f6a8:	             move.l 4(sp),d0
    f6ac:	             movea.l 24(sp),a0
    f6b0:	             move.l d0,32(a0)
    if (!fun->reg.varData.theStack) return BR_ERROR;
    f6b4:	             movea.l 24(sp),a0
    f6b8:	             move.l 32(a0),d0
    f6bc:	         /-- bne.s f6c4 <builtIn_newStack+0x5e>
    f6be:	         |   moveq #1,d0
    f6c0:	/--------|-- bra.w f756 <builtIn_newStack+0xf0>
    fun->reg.varData.theStack->first = NULL;
    f6c4:	|        \-> movea.l 24(sp),a0
    f6c8:	|            movea.l 32(a0),a0
    f6cc:	|            clr.l (a0)
    fun->reg.varData.theStack->last = NULL;
    f6ce:	|            movea.l 24(sp),a0
    f6d2:	|            movea.l 32(a0),a0
    f6d6:	|            clr.l 4(a0)
    fun->reg.varData.theStack->timesUsed = 1;
    f6da:	|            movea.l 24(sp),a0
    f6de:	|            movea.l 32(a0),a0
    f6e2:	|            moveq #1,d0
    f6e4:	|            move.l d0,8(a0)
    
    while (numParams--) {
    f6e8:	|     /----- bra.s f744 <builtIn_newStack+0xde>
        if (!addVarToStack(&fun->stack->thisVar, &fun->reg.varData.theStack->first)) return BR_ERROR;
    f6ea:	|  /--|----> movea.l 24(sp),a0
    f6ee:	|  |  |      move.l 32(a0),d0
    f6f2:	|  |  |      move.l d0,d1
    f6f4:	|  |  |      movea.l 24(sp),a0
    f6f8:	|  |  |      move.l 24(a0),d0
    f6fc:	|  |  |      move.l d1,-(sp)
    f6fe:	|  |  |      move.l d0,-(sp)
    f700:	|  |  |      jsr 14030 <addVarToStack>
    f706:	|  |  |      addq.l #8,sp
    f708:	|  |  |      tst.w d0
    f70a:	|  |  |  /-- bne.s f710 <builtIn_newStack+0xaa>
    f70c:	|  |  |  |   moveq #1,d0
    f70e:	+--|--|--|-- bra.s f756 <builtIn_newStack+0xf0>
        if (fun->reg.varData.theStack->last == NULL) {
    f710:	|  |  |  \-> movea.l 24(sp),a0
    f714:	|  |  |      movea.l 32(a0),a0
    f718:	|  |  |      move.l 4(a0),d0
    f71c:	|  |  |  /-- bne.s f734 <builtIn_newStack+0xce>
            fun->reg.varData.theStack->last = fun->reg.varData.theStack->first;
    f71e:	|  |  |  |   movea.l 24(sp),a0
    f722:	|  |  |  |   movea.l 32(a0),a1
    f726:	|  |  |  |   movea.l 24(sp),a0
    f72a:	|  |  |  |   movea.l 32(a0),a0
    f72e:	|  |  |  |   move.l (a1),d0
    f730:	|  |  |  |   move.l d0,4(a0)
        }
        trimStack(&fun->stack);
    f734:	|  |  |  \-> moveq #24,d0
    f736:	|  |  |      add.l 24(sp),d0
    f73a:	|  |  |      move.l d0,-(sp)
    f73c:	|  |  |      jsr 15178 <trimStack>
    f742:	|  |  |      addq.l #4,sp
    while (numParams--) {
    f744:	|  |  \----> move.l 20(sp),d0
    f748:	|  |         move.l d0,d1
    f74a:	|  |         subq.l #1,d1
    f74c:	|  |         move.l d1,20(sp)
    f750:	|  |         tst.l d0
    f752:	|  \-------- bne.s f6ea <builtIn_newStack+0x84>
    }
    return BR_CONTINUE;
    f754:	|            moveq #2,d0
}
    f756:	\----------> movea.l (sp)+,a6
    f758:	             lea 12(sp),sp
    f75c:	             rts

0000f75e <builtIn_stackSize>:
#define builtIn_wait builtIn_newStack

builtIn(stackSize)
{
	UNUSEDALL
	switch (fun -> stack -> thisVar.varType) {
    f75e:	          movea.l 8(sp),a0
    f762:	          movea.l 24(a0),a0
    f766:	          move.l (a0),d0
    f768:	          moveq #6,d1
    f76a:	          cmp.l d0,d1
    f76c:	      /-- beq.s f788 <builtIn_stackSize+0x2a>
    f76e:	      |   moveq #10,d1
    f770:	      |   cmp.l d0,d1
    f772:	   /--|-- beq.s f7cc <builtIn_stackSize+0x6e>
			setVariable (&fun -> reg, SVT_INT, fun -> stack -> thisVar.varData.fastArray -> size);
			trimStack (&fun -> stack);
			return BR_CONTINUE;

		default:
			break;
    f774:	   |  |   nop
	}
	KPrintF ("Parameter isn't a stack or a fast array.");
    f776:	   |  |   pea 198e9 <PutChar+0x1bcb>
    f77c:	   |  |   jsr 17254 <KPrintF>
    f782:	   |  |   addq.l #4,sp
	return BR_ERROR;
    f784:	   |  |   moveq #1,d0
    f786:	/--|--|-- bra.s f806 <builtIn_stackSize+0xa8>
			setVariable (&fun -> reg, SVT_INT, stackSize (fun -> stack -> thisVar.varData.theStack));
    f788:	|  |  \-> movea.l 8(sp),a0
    f78c:	|  |      movea.l 24(a0),a0
    f790:	|  |      move.l 4(a0),d0
    f794:	|  |      move.l d0,-(sp)
    f796:	|  |      jsr 15154 <stackSize>
    f79c:	|  |      addq.l #4,sp
    f79e:	|  |      move.l d0,d1
    f7a0:	|  |      moveq #28,d0
    f7a2:	|  |      add.l 8(sp),d0
    f7a6:	|  |      move.l d1,-(sp)
    f7a8:	|  |      pea 1 <_start+0x1>
    f7ac:	|  |      move.l d0,-(sp)
    f7ae:	|  |      jsr 150e6 <setVariable>
    f7b4:	|  |      lea 12(sp),sp
			trimStack (&fun -> stack);
    f7b8:	|  |      moveq #24,d0
    f7ba:	|  |      add.l 8(sp),d0
    f7be:	|  |      move.l d0,-(sp)
    f7c0:	|  |      jsr 15178 <trimStack>
    f7c6:	|  |      addq.l #4,sp
			return BR_CONTINUE;
    f7c8:	|  |      moveq #2,d0
    f7ca:	+--|----- bra.s f806 <builtIn_stackSize+0xa8>
			setVariable (&fun -> reg, SVT_INT, fun -> stack -> thisVar.varData.fastArray -> size);
    f7cc:	|  \----> movea.l 8(sp),a0
    f7d0:	|         movea.l 24(a0),a0
    f7d4:	|         movea.l 4(a0),a0
    f7d8:	|         move.l 4(a0),d1
    f7dc:	|         moveq #28,d0
    f7de:	|         add.l 8(sp),d0
    f7e2:	|         move.l d1,-(sp)
    f7e4:	|         pea 1 <_start+0x1>
    f7e8:	|         move.l d0,-(sp)
    f7ea:	|         jsr 150e6 <setVariable>
    f7f0:	|         lea 12(sp),sp
			trimStack (&fun -> stack);
    f7f4:	|         moveq #24,d0
    f7f6:	|         add.l 8(sp),d0
    f7fa:	|         move.l d0,-(sp)
    f7fc:	|         jsr 15178 <trimStack>
    f802:	|         addq.l #4,sp
			return BR_CONTINUE;
    f804:	|         moveq #2,d0
}
    f806:	\-------> rts

0000f808 <builtIn_copyStack>:

builtIn(copyStack)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    f808:	       movea.l 8(sp),a0
    f80c:	       movea.l 24(a0),a0
    f810:	       move.l (a0),d0
    f812:	       moveq #6,d1
    f814:	       cmp.l d0,d1
    f816:	   /-- beq.s f82a <builtIn_copyStack+0x22>
		KPrintF ("Parameter isn't a stack.");
    f818:	   |   pea 19912 <PutChar+0x1bf4>
    f81e:	   |   jsr 17254 <KPrintF>
    f824:	   |   addq.l #4,sp
		return BR_ERROR;
    f826:	   |   moveq #1,d0
    f828:	/--|-- bra.s f85e <builtIn_copyStack+0x56>
	}
	// Return value
	if (! copyStack (&fun -> stack -> thisVar, &fun -> reg)) return BR_ERROR;
    f82a:	|  \-> moveq #28,d0
    f82c:	|      add.l 8(sp),d0
    f830:	|      movea.l 8(sp),a0
    f834:	|      move.l 24(a0),d1
    f838:	|      move.l d0,-(sp)
    f83a:	|      move.l d1,-(sp)
    f83c:	|      jsr 142fa <copyStack>
    f842:	|      addq.l #8,sp
    f844:	|      tst.w d0
    f846:	|  /-- bne.s f84c <builtIn_copyStack+0x44>
    f848:	|  |   moveq #1,d0
    f84a:	+--|-- bra.s f85e <builtIn_copyStack+0x56>
	trimStack (&fun -> stack);
    f84c:	|  \-> moveq #24,d0
    f84e:	|      add.l 8(sp),d0
    f852:	|      move.l d0,-(sp)
    f854:	|      jsr 15178 <trimStack>
    f85a:	|      addq.l #4,sp
	return BR_CONTINUE;
    f85c:	|      moveq #2,d0
}
    f85e:	\----> rts

0000f860 <builtIn_pushToStack>:

builtIn(pushToStack)
{
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    f860:	       movea.l 8(sp),a0
    f864:	       movea.l 24(a0),a0
    f868:	       movea.l 8(a0),a0
    f86c:	       move.l (a0),d0
    f86e:	       moveq #6,d1
    f870:	       cmp.l d0,d1
    f872:	   /-- beq.s f888 <builtIn_pushToStack+0x28>
		KPrintF("Parameter isn't a stack");
    f874:	   |   pea 1992b <PutChar+0x1c0d>
    f87a:	   |   jsr 17254 <KPrintF>
    f880:	   |   addq.l #4,sp
		return BR_ERROR;
    f882:	   |   moveq #1,d0
    f884:	/--|-- bra.w f916 <builtIn_pushToStack+0xb6>
	}

	if (! addVarToStack (&fun -> stack -> thisVar, &fun -> stack -> next -> thisVar.varData.theStack -> first))
    f888:	|  \-> movea.l 8(sp),a0
    f88c:	|      movea.l 24(a0),a0
    f890:	|      movea.l 8(a0),a0
    f894:	|      move.l 4(a0),d0
    f898:	|      move.l d0,d1
    f89a:	|      movea.l 8(sp),a0
    f89e:	|      move.l 24(a0),d0
    f8a2:	|      move.l d1,-(sp)
    f8a4:	|      move.l d0,-(sp)
    f8a6:	|      jsr 14030 <addVarToStack>
    f8ac:	|      addq.l #8,sp
    f8ae:	|      tst.w d0
    f8b0:	|  /-- bne.s f8b6 <builtIn_pushToStack+0x56>
		return BR_ERROR;
    f8b2:	|  |   moveq #1,d0
    f8b4:	+--|-- bra.s f916 <builtIn_pushToStack+0xb6>

	if (fun -> stack -> next -> thisVar.varData.theStack -> first -> next == NULL)
    f8b6:	|  \-> movea.l 8(sp),a0
    f8ba:	|      movea.l 24(a0),a0
    f8be:	|      movea.l 8(a0),a0
    f8c2:	|      movea.l 4(a0),a0
    f8c6:	|      movea.l (a0),a0
    f8c8:	|      move.l 8(a0),d0
    f8cc:	|  /-- bne.s f8f4 <builtIn_pushToStack+0x94>
		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> first;
    f8ce:	|  |   movea.l 8(sp),a0
    f8d2:	|  |   movea.l 24(a0),a0
    f8d6:	|  |   movea.l 8(a0),a0
    f8da:	|  |   movea.l 4(a0),a1
    f8de:	|  |   movea.l 8(sp),a0
    f8e2:	|  |   movea.l 24(a0),a0
    f8e6:	|  |   movea.l 8(a0),a0
    f8ea:	|  |   movea.l 4(a0),a0
    f8ee:	|  |   move.l (a1),d0
    f8f0:	|  |   move.l d0,4(a0)

	trimStack (&fun -> stack);
    f8f4:	|  \-> moveq #24,d0
    f8f6:	|      add.l 8(sp),d0
    f8fa:	|      move.l d0,-(sp)
    f8fc:	|      jsr 15178 <trimStack>
    f902:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    f904:	|      moveq #24,d0
    f906:	|      add.l 8(sp),d0
    f90a:	|      move.l d0,-(sp)
    f90c:	|      jsr 15178 <trimStack>
    f912:	|      addq.l #4,sp
	return BR_CONTINUE;
    f914:	|      moveq #2,d0
}
    f916:	\----> rts

0000f918 <builtIn_enqueue>:

builtIn(enqueue)
{
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    f918:	             movea.l 8(sp),a0
    f91c:	             movea.l 24(a0),a0
    f920:	             movea.l 8(a0),a0
    f924:	             move.l (a0),d0
    f926:	             moveq #6,d1
    f928:	             cmp.l d0,d1
    f92a:	         /-- beq.s f940 <builtIn_enqueue+0x28>
		KPrintF ("Parameter isn't a stack");
    f92c:	         |   pea 1992b <PutChar+0x1c0d>
    f932:	         |   jsr 17254 <KPrintF>
    f938:	         |   addq.l #4,sp
		return BR_ERROR;
    f93a:	         |   moveq #1,d0
    f93c:	/--------|-- bra.w fa2e <builtIn_enqueue+0x116>
	}

	if (fun -> stack -> next -> thisVar.varData.theStack -> first == NULL)
    f940:	|        \-> movea.l 8(sp),a0
    f944:	|            movea.l 24(a0),a0
    f948:	|            movea.l 8(a0),a0
    f94c:	|            movea.l 4(a0),a0
    f950:	|            move.l (a0),d0
    f952:	|     /----- bne.s f9ac <builtIn_enqueue+0x94>
	{
		if (! addVarToStack (&fun -> stack -> thisVar, &fun -> stack -> next -> thisVar.varData.theStack -> first))
    f954:	|     |      movea.l 8(sp),a0
    f958:	|     |      movea.l 24(a0),a0
    f95c:	|     |      movea.l 8(a0),a0
    f960:	|     |      move.l 4(a0),d0
    f964:	|     |      move.l d0,d1
    f966:	|     |      movea.l 8(sp),a0
    f96a:	|     |      move.l 24(a0),d0
    f96e:	|     |      move.l d1,-(sp)
    f970:	|     |      move.l d0,-(sp)
    f972:	|     |      jsr 14030 <addVarToStack>
    f978:	|     |      addq.l #8,sp
    f97a:	|     |      tst.w d0
    f97c:	|     |  /-- bne.s f984 <builtIn_enqueue+0x6c>
			return BR_ERROR;
    f97e:	|     |  |   moveq #1,d0
    f980:	+-----|--|-- bra.w fa2e <builtIn_enqueue+0x116>

		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> first;
    f984:	|     |  \-> movea.l 8(sp),a0
    f988:	|     |      movea.l 24(a0),a0
    f98c:	|     |      movea.l 8(a0),a0
    f990:	|     |      movea.l 4(a0),a1
    f994:	|     |      movea.l 8(sp),a0
    f998:	|     |      movea.l 24(a0),a0
    f99c:	|     |      movea.l 8(a0),a0
    f9a0:	|     |      movea.l 4(a0),a0
    f9a4:	|     |      move.l (a1),d0
    f9a6:	|     |      move.l d0,4(a0)
    f9aa:	|  /--|----- bra.s fa0c <builtIn_enqueue+0xf4>
	}
	else
	{
		if (! addVarToStack (&fun -> stack -> thisVar,
							 &fun -> stack -> next -> thisVar.varData.theStack -> last -> next))
    f9ac:	|  |  \----> movea.l 8(sp),a0
    f9b0:	|  |         movea.l 24(a0),a0
    f9b4:	|  |         movea.l 8(a0),a0
    f9b8:	|  |         movea.l 4(a0),a0
    f9bc:	|  |         move.l 4(a0),d0
		if (! addVarToStack (&fun -> stack -> thisVar,
    f9c0:	|  |         move.l d0,d1
    f9c2:	|  |         addq.l #8,d1
    f9c4:	|  |         movea.l 8(sp),a0
    f9c8:	|  |         move.l 24(a0),d0
    f9cc:	|  |         move.l d1,-(sp)
    f9ce:	|  |         move.l d0,-(sp)
    f9d0:	|  |         jsr 14030 <addVarToStack>
    f9d6:	|  |         addq.l #8,sp
    f9d8:	|  |         tst.w d0
    f9da:	|  |     /-- bne.s f9e0 <builtIn_enqueue+0xc8>
			return BR_ERROR;
    f9dc:	|  |     |   moveq #1,d0
    f9de:	+--|-----|-- bra.s fa2e <builtIn_enqueue+0x116>
		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> last -> next;
    f9e0:	|  |     \-> movea.l 8(sp),a0
    f9e4:	|  |         movea.l 24(a0),a0
    f9e8:	|  |         movea.l 8(a0),a0
    f9ec:	|  |         movea.l 4(a0),a0
    f9f0:	|  |         movea.l 4(a0),a1
    f9f4:	|  |         movea.l 8(sp),a0
    f9f8:	|  |         movea.l 24(a0),a0
    f9fc:	|  |         movea.l 8(a0),a0
    fa00:	|  |         movea.l 4(a0),a0
    fa04:	|  |         move.l 8(a1),d0
    fa08:	|  |         move.l d0,4(a0)
	}

	trimStack (&fun -> stack);
    fa0c:	|  \-------> moveq #24,d0
    fa0e:	|            add.l 8(sp),d0
    fa12:	|            move.l d0,-(sp)
    fa14:	|            jsr 15178 <trimStack>
    fa1a:	|            addq.l #4,sp
	trimStack (&fun -> stack);
    fa1c:	|            moveq #24,d0
    fa1e:	|            add.l 8(sp),d0
    fa22:	|            move.l d0,-(sp)
    fa24:	|            jsr 15178 <trimStack>
    fa2a:	|            addq.l #4,sp
	return BR_CONTINUE;
    fa2c:	|            moveq #2,d0
}
    fa2e:	\----------> rts

0000fa30 <builtIn_deleteFromStack>:

builtIn(deleteFromStack)
{
    fa30:	       move.l a2,-(sp)
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    fa32:	       movea.l 12(sp),a0
    fa36:	       movea.l 24(a0),a0
    fa3a:	       movea.l 8(a0),a0
    fa3e:	       move.l (a0),d0
    fa40:	       moveq #6,d1
    fa42:	       cmp.l d0,d1
    fa44:	   /-- beq.s fa5a <builtIn_deleteFromStack+0x2a>
		KPrintF ("Parameter isn't a stack.");
    fa46:	   |   pea 19912 <PutChar+0x1bf4>
    fa4c:	   |   jsr 17254 <KPrintF>
    fa52:	   |   addq.l #4,sp
		return BR_ERROR;
    fa54:	   |   moveq #1,d0
    fa56:	/--|-- bra.w faf0 <builtIn_deleteFromStack+0xc0>
	}

	// Return value
	setVariable (&fun -> reg, SVT_INT,
				 deleteVarFromStack (&fun -> stack -> thisVar,
									 &fun -> stack -> next -> thisVar.varData.theStack -> first, FALSE));
    fa5a:	|  \-> movea.l 12(sp),a0
    fa5e:	|      movea.l 24(a0),a0
    fa62:	|      movea.l 8(a0),a0
    fa66:	|      move.l 4(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    fa6a:	|      move.l d0,d1
				 deleteVarFromStack (&fun -> stack -> thisVar,
    fa6c:	|      movea.l 12(sp),a0
    fa70:	|      move.l 24(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    fa74:	|      clr.l -(sp)
    fa76:	|      move.l d1,-(sp)
    fa78:	|      move.l d0,-(sp)
    fa7a:	|      jsr 143d0 <deleteVarFromStack>
    fa80:	|      lea 12(sp),sp
    fa84:	|      move.l d0,d1
    fa86:	|      moveq #28,d0
    fa88:	|      add.l 12(sp),d0
    fa8c:	|      move.l d1,-(sp)
    fa8e:	|      pea 1 <_start+0x1>
    fa92:	|      move.l d0,-(sp)
    fa94:	|      jsr 150e6 <setVariable>
    fa9a:	|      lea 12(sp),sp

	// Horrible hacking because 'last' value might now be wrong!
	fun->stack->next->thisVar.varData.theStack->last = stackFindLast (fun->stack->next->thisVar.varData.theStack->first);
    fa9e:	|      movea.l 12(sp),a0
    faa2:	|      movea.l 24(a0),a0
    faa6:	|      movea.l 8(a0),a0
    faaa:	|      movea.l 4(a0),a0
    faae:	|      move.l (a0),d0
    fab0:	|      movea.l 12(sp),a0
    fab4:	|      movea.l 24(a0),a0
    fab8:	|      movea.l 8(a0),a0
    fabc:	|      movea.l 4(a0),a2
    fac0:	|      move.l d0,-(sp)
    fac2:	|      jsr 15130 <stackFindLast>
    fac8:	|      addq.l #4,sp
    faca:	|      move.l d0,4(a2)

	trimStack (&fun -> stack);
    face:	|      moveq #24,d0
    fad0:	|      add.l 12(sp),d0
    fad4:	|      move.l d0,-(sp)
    fad6:	|      jsr 15178 <trimStack>
    fadc:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    fade:	|      moveq #24,d0
    fae0:	|      add.l 12(sp),d0
    fae4:	|      move.l d0,-(sp)
    fae6:	|      jsr 15178 <trimStack>
    faec:	|      addq.l #4,sp
	return BR_CONTINUE;
    faee:	|      moveq #2,d0
}
    faf0:	\----> movea.l (sp)+,a2
    faf2:	       rts

0000faf4 <builtIn_deleteAllFromStack>:

builtIn(deleteAllFromStack)
{
    faf4:	       move.l a2,-(sp)
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    faf6:	       movea.l 12(sp),a0
    fafa:	       movea.l 24(a0),a0
    fafe:	       movea.l 8(a0),a0
    fb02:	       move.l (a0),d0
    fb04:	       moveq #6,d1
    fb06:	       cmp.l d0,d1
    fb08:	   /-- beq.s fb1e <builtIn_deleteAllFromStack+0x2a>
		KPrintF ("Parameter isn't a stack.");
    fb0a:	   |   pea 19912 <PutChar+0x1bf4>
    fb10:	   |   jsr 17254 <KPrintF>
    fb16:	   |   addq.l #4,sp
		return BR_ERROR;
    fb18:	   |   moveq #1,d0
    fb1a:	/--|-- bra.w fbb6 <builtIn_deleteAllFromStack+0xc2>
	}

	// Return value
	setVariable (&fun -> reg, SVT_INT,
				 deleteVarFromStack (&fun -> stack -> thisVar,
									 &fun -> stack -> next -> thisVar.varData.theStack -> first, TRUE));
    fb1e:	|  \-> movea.l 12(sp),a0
    fb22:	|      movea.l 24(a0),a0
    fb26:	|      movea.l 8(a0),a0
    fb2a:	|      move.l 4(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    fb2e:	|      move.l d0,d1
				 deleteVarFromStack (&fun -> stack -> thisVar,
    fb30:	|      movea.l 12(sp),a0
    fb34:	|      move.l 24(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    fb38:	|      pea 1 <_start+0x1>
    fb3c:	|      move.l d1,-(sp)
    fb3e:	|      move.l d0,-(sp)
    fb40:	|      jsr 143d0 <deleteVarFromStack>
    fb46:	|      lea 12(sp),sp
    fb4a:	|      move.l d0,d1
    fb4c:	|      moveq #28,d0
    fb4e:	|      add.l 12(sp),d0
    fb52:	|      move.l d1,-(sp)
    fb54:	|      pea 1 <_start+0x1>
    fb58:	|      move.l d0,-(sp)
    fb5a:	|      jsr 150e6 <setVariable>
    fb60:	|      lea 12(sp),sp

	// Horrible hacking because 'last' value might now be wrong!
	fun->stack->next->thisVar.varData.theStack->last = stackFindLast (fun->stack->next->thisVar.varData.theStack->first);
    fb64:	|      movea.l 12(sp),a0
    fb68:	|      movea.l 24(a0),a0
    fb6c:	|      movea.l 8(a0),a0
    fb70:	|      movea.l 4(a0),a0
    fb74:	|      move.l (a0),d0
    fb76:	|      movea.l 12(sp),a0
    fb7a:	|      movea.l 24(a0),a0
    fb7e:	|      movea.l 8(a0),a0
    fb82:	|      movea.l 4(a0),a2
    fb86:	|      move.l d0,-(sp)
    fb88:	|      jsr 15130 <stackFindLast>
    fb8e:	|      addq.l #4,sp
    fb90:	|      move.l d0,4(a2)

	trimStack (&fun -> stack);
    fb94:	|      moveq #24,d0
    fb96:	|      add.l 12(sp),d0
    fb9a:	|      move.l d0,-(sp)
    fb9c:	|      jsr 15178 <trimStack>
    fba2:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    fba4:	|      moveq #24,d0
    fba6:	|      add.l 12(sp),d0
    fbaa:	|      move.l d0,-(sp)
    fbac:	|      jsr 15178 <trimStack>
    fbb2:	|      addq.l #4,sp
	return BR_CONTINUE;
    fbb4:	|      moveq #2,d0
}
    fbb6:	\----> movea.l (sp)+,a2
    fbb8:	       rts

0000fbba <builtIn_popFromStack>:

builtIn(popFromStack)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    fbba:	       movea.l 8(sp),a0
    fbbe:	       movea.l 24(a0),a0
    fbc2:	       move.l (a0),d0
    fbc4:	       moveq #6,d1
    fbc6:	       cmp.l d0,d1
    fbc8:	   /-- beq.s fbdc <builtIn_popFromStack+0x22>
		KPrintF ("Parameter isn't a stack.");
    fbca:	   |   pea 19912 <PutChar+0x1bf4>
    fbd0:	   |   jsr 17254 <KPrintF>
    fbd6:	   |   addq.l #4,sp
		return BR_ERROR;
    fbd8:	   |   moveq #1,d0
    fbda:	/--|-- bra.s fc46 <builtIn_popFromStack+0x8c>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    fbdc:	|  \-> movea.l 8(sp),a0
    fbe0:	|      movea.l 24(a0),a0
    fbe4:	|      movea.l 4(a0),a0
    fbe8:	|      move.l (a0),d0
    fbea:	|  /-- bne.s fbfe <builtIn_popFromStack+0x44>
		KPrintF ("The stack's empty.");
    fbec:	|  |   pea 19943 <PutChar+0x1c25>
    fbf2:	|  |   jsr 17254 <KPrintF>
    fbf8:	|  |   addq.l #4,sp
		return BR_ERROR;
    fbfa:	|  |   moveq #1,d0
    fbfc:	+--|-- bra.s fc46 <builtIn_popFromStack+0x8c>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> first -> thisVar), &fun -> reg);
    fbfe:	|  \-> moveq #28,d0
    fc00:	|      add.l 8(sp),d0
    fc04:	|      movea.l 8(sp),a0
    fc08:	|      movea.l 24(a0),a0
    fc0c:	|      movea.l 4(a0),a0
    fc10:	|      move.l (a0),d1
    fc12:	|      move.l d0,-(sp)
    fc14:	|      move.l d1,-(sp)
    fc16:	|      jsr 14cae <copyVariable>
    fc1c:	|      addq.l #8,sp
	trimStack (&fun -> stack -> thisVar.varData.theStack -> first);
    fc1e:	|      movea.l 8(sp),a0
    fc22:	|      movea.l 24(a0),a0
    fc26:	|      move.l 4(a0),d0
    fc2a:	|      move.l d0,-(sp)
    fc2c:	|      jsr 15178 <trimStack>
    fc32:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    fc34:	|      moveq #24,d0
    fc36:	|      add.l 8(sp),d0
    fc3a:	|      move.l d0,-(sp)
    fc3c:	|      jsr 15178 <trimStack>
    fc42:	|      addq.l #4,sp
	return BR_CONTINUE;
    fc44:	|      moveq #2,d0
}
    fc46:	\----> rts

0000fc48 <builtIn_peekStart>:

builtIn(peekStart)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    fc48:	       movea.l 8(sp),a0
    fc4c:	       movea.l 24(a0),a0
    fc50:	       move.l (a0),d0
    fc52:	       moveq #6,d1
    fc54:	       cmp.l d0,d1
    fc56:	   /-- beq.s fc6a <builtIn_peekStart+0x22>
		KPrintF ("Parameter isn't a stack.");
    fc58:	   |   pea 19912 <PutChar+0x1bf4>
    fc5e:	   |   jsr 17254 <KPrintF>
    fc64:	   |   addq.l #4,sp
		return BR_ERROR;
    fc66:	   |   moveq #1,d0
    fc68:	/--|-- bra.s fcbe <builtIn_peekStart+0x76>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    fc6a:	|  \-> movea.l 8(sp),a0
    fc6e:	|      movea.l 24(a0),a0
    fc72:	|      movea.l 4(a0),a0
    fc76:	|      move.l (a0),d0
    fc78:	|  /-- bne.s fc8c <builtIn_peekStart+0x44>
		KPrintF ("The stack's empty.");
    fc7a:	|  |   pea 19943 <PutChar+0x1c25>
    fc80:	|  |   jsr 17254 <KPrintF>
    fc86:	|  |   addq.l #4,sp
		return BR_ERROR;
    fc88:	|  |   moveq #1,d0
    fc8a:	+--|-- bra.s fcbe <builtIn_peekStart+0x76>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> first -> thisVar), &fun -> reg);
    fc8c:	|  \-> moveq #28,d0
    fc8e:	|      add.l 8(sp),d0
    fc92:	|      movea.l 8(sp),a0
    fc96:	|      movea.l 24(a0),a0
    fc9a:	|      movea.l 4(a0),a0
    fc9e:	|      move.l (a0),d1
    fca0:	|      move.l d0,-(sp)
    fca2:	|      move.l d1,-(sp)
    fca4:	|      jsr 14cae <copyVariable>
    fcaa:	|      addq.l #8,sp
	trimStack (&fun -> stack);
    fcac:	|      moveq #24,d0
    fcae:	|      add.l 8(sp),d0
    fcb2:	|      move.l d0,-(sp)
    fcb4:	|      jsr 15178 <trimStack>
    fcba:	|      addq.l #4,sp
	return BR_CONTINUE;
    fcbc:	|      moveq #2,d0
}
    fcbe:	\----> rts

0000fcc0 <builtIn_peekEnd>:

builtIn(peekEnd)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    fcc0:	       movea.l 8(sp),a0
    fcc4:	       movea.l 24(a0),a0
    fcc8:	       move.l (a0),d0
    fcca:	       moveq #6,d1
    fccc:	       cmp.l d0,d1
    fcce:	   /-- beq.s fce2 <builtIn_peekEnd+0x22>
		KPrintF ("Parameter isn't a stack.");
    fcd0:	   |   pea 19912 <PutChar+0x1bf4>
    fcd6:	   |   jsr 17254 <KPrintF>
    fcdc:	   |   addq.l #4,sp
		return BR_ERROR;
    fcde:	   |   moveq #1,d0
    fce0:	/--|-- bra.s fd38 <builtIn_peekEnd+0x78>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    fce2:	|  \-> movea.l 8(sp),a0
    fce6:	|      movea.l 24(a0),a0
    fcea:	|      movea.l 4(a0),a0
    fcee:	|      move.l (a0),d0
    fcf0:	|  /-- bne.s fd04 <builtIn_peekEnd+0x44>
		KPrintF ("The stack's empty.");
    fcf2:	|  |   pea 19943 <PutChar+0x1c25>
    fcf8:	|  |   jsr 17254 <KPrintF>
    fcfe:	|  |   addq.l #4,sp
		return BR_ERROR;
    fd00:	|  |   moveq #1,d0
    fd02:	+--|-- bra.s fd38 <builtIn_peekEnd+0x78>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> last -> thisVar), &fun -> reg);
    fd04:	|  \-> moveq #28,d0
    fd06:	|      add.l 8(sp),d0
    fd0a:	|      movea.l 8(sp),a0
    fd0e:	|      movea.l 24(a0),a0
    fd12:	|      movea.l 4(a0),a0
    fd16:	|      move.l 4(a0),d1
    fd1a:	|      move.l d0,-(sp)
    fd1c:	|      move.l d1,-(sp)
    fd1e:	|      jsr 14cae <copyVariable>
    fd24:	|      addq.l #8,sp
	trimStack (&fun -> stack);
    fd26:	|      moveq #24,d0
    fd28:	|      add.l 8(sp),d0
    fd2c:	|      move.l d0,-(sp)
    fd2e:	|      jsr 15178 <trimStack>
    fd34:	|      addq.l #4,sp
	return BR_CONTINUE;
    fd36:	|      moveq #2,d0
}
    fd38:	\----> rts

0000fd3a <builtIn_random>:

builtIn(random)
{
    fd3a:	       subq.l #4,sp
	UNUSEDALL
	int num;

	if (! getValueType(&num, SVT_INT,&fun -> stack -> thisVar))
    fd3c:	       movea.l 12(sp),a0
    fd40:	       move.l 24(a0),d0
    fd44:	       move.l d0,-(sp)
    fd46:	       pea 1 <_start+0x1>
    fd4a:	       move.l sp,d0
    fd4c:	       addq.l #8,d0
    fd4e:	       move.l d0,-(sp)
    fd50:	       jsr 147f4 <getValueType>
    fd56:	       lea 12(sp),sp
    fd5a:	       tst.w d0
    fd5c:	   /-- bne.s fd62 <builtIn_random+0x28>
		return BR_ERROR;
    fd5e:	   |   moveq #1,d0
    fd60:	/--|-- bra.s fdac <builtIn_random+0x72>

	trimStack (&fun -> stack);
    fd62:	|  \-> moveq #24,d0
    fd64:	|      add.l 12(sp),d0
    fd68:	|      move.l d0,-(sp)
    fd6a:	|      jsr 15178 <trimStack>
    fd70:	|      addq.l #4,sp
	if (num <= 0) num = 1;
    fd72:	|      move.l (sp),d0
    fd74:	|  /-- bgt.s fd7a <builtIn_random+0x40>
    fd76:	|  |   moveq #1,d0
    fd78:	|  |   move.l d0,(sp)
	setVariable (&fun -> reg, SVT_INT, rand() % num);
    fd7a:	|  \-> jsr 15e14 <rand>
    fd80:	|      move.l d0,d1
    fd82:	|      move.l (sp),d0
    fd84:	|      move.l d0,-(sp)
    fd86:	|      move.l d1,-(sp)
    fd88:	|      jsr 17ce2 <__umodsi3>
    fd8e:	|      addq.l #8,sp
    fd90:	|      move.l d0,d1
    fd92:	|      moveq #28,d0
    fd94:	|      add.l 12(sp),d0
    fd98:	|      move.l d1,-(sp)
    fd9a:	|      pea 1 <_start+0x1>
    fd9e:	|      move.l d0,-(sp)
    fda0:	|      jsr 150e6 <setVariable>
    fda6:	|      lea 12(sp),sp
	return BR_CONTINUE;
    fdaa:	|      moveq #2,d0
}
    fdac:	\----> addq.l #4,sp
    fdae:	       rts

0000fdb0 <builtIn_setStatusColour>:
	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	statusBarColour ((byte) red, (byte) green, (byte) blue);
	return BR_CONTINUE; ToDo amigize this?*/
}
    fdb0:	nop
    fdb2:	rts

0000fdb4 <builtIn_setLitStatusColour>:

	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	statusBarLitColour ((byte) red, (byte) green, (byte) blue);Todo - Amigize this?*/
	return BR_CONTINUE;
    fdb4:	moveq #2,d0
}
    fdb6:	rts

0000fdb8 <builtIn_setPasteColour>:

builtIn (setPasteColour)
{
    fdb8:	       subq.l #4,sp
	UNUSEDALL
	int index;

	if (! getValueType ( &index, SVT_INT, &fun -> stack -> thisVar)) {
    fdba:	       movea.l 12(sp),a0
    fdbe:	       move.l 24(a0),d0
    fdc2:	       move.l d0,-(sp)
    fdc4:	       pea 1 <_start+0x1>
    fdc8:	       move.l sp,d0
    fdca:	       addq.l #8,d0
    fdcc:	       move.l d0,-(sp)
    fdce:	       jsr 147f4 <getValueType>
    fdd4:	       lea 12(sp),sp
    fdd8:	       tst.w d0
    fdda:	   /-- bne.s fdee <builtIn_setPasteColour+0x36>
		KPrintF ("setPasteColour: Parameter not a number");
    fddc:	   |   pea 19956 <PutChar+0x1c38>
    fde2:	   |   jsr 17254 <KPrintF>
    fde8:	   |   addq.l #4,sp
		return BR_ERROR;
    fdea:	   |   moveq #1,d0
    fdec:	/--|-- bra.s fe2e <builtIn_setPasteColour+0x76>
	}
	trimStack (&fun -> stack);
    fdee:	|  \-> moveq #24,d0
    fdf0:	|      add.l 12(sp),d0
    fdf4:	|      move.l d0,-(sp)
    fdf6:	|      jsr 15178 <trimStack>
    fdfc:	|      addq.l #4,sp


	textPaletteIndex = (UWORD)index;
    fdfe:	|      move.l (sp),d0
    fe00:	|      move.l d0,d0
    fe02:	|      move.w d0,1c8e4 <textPaletteIndex>

	if( textPaletteIndex > 31) {
    fe08:	|      move.w 1c8e4 <textPaletteIndex>,d0
    fe0e:	|      cmpi.w #31,d0
    fe12:	|  /-- bls.s fe2c <builtIn_setPasteColour+0x74>
		KPrintF ("setPasteColour: Paletteindex out of Range");
    fe14:	|  |   pea 1997d <PutChar+0x1c5f>
    fe1a:	|  |   jsr 17254 <KPrintF>
    fe20:	|  |   addq.l #4,sp
		textPaletteIndex = 0;
    fe22:	|  |   clr.w 1c8e4 <textPaletteIndex>
		return BR_ERROR;
    fe28:	|  |   moveq #1,d0
    fe2a:	+--|-- bra.s fe2e <builtIn_setPasteColour+0x76>
	}

	//setFontColour (pastePalette, (byte) red, (byte) green, (byte) blue);
	return BR_CONTINUE;
    fe2c:	|  \-> moveq #2,d0
}
    fe2e:	\----> addq.l #4,sp
    fe30:	       rts

0000fe32 <builtIn_setBlankColour>:
	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	currentBlankColour = makeColour (red & 255, green & 255, blue & 255);
	setVariable (&fun -> reg, SVT_INT, 1);Todo Amigize this?*/
	return BR_CONTINUE;
    fe32:	moveq #2,d0
}
    fe34:	rts

0000fe36 <builtIn_setBurnColour>:

	currentBurnR = red;
	currentBurnG = green;
	currentBurnB = blue;
	setVariable (&fun -> reg, SVT_INT, 1);Todo Amigize this?*/
	return BR_CONTINUE;
    fe36:	moveq #2,d0
}
    fe38:	rts

0000fe3a <builtIn_setFont>:


builtIn(setFont)
{
    fe3a:	       lea -16(sp),sp
    fe3e:	       move.l a6,-(sp)
    UNUSEDALL
    int fileNumber, newHeight;
    if (!getValueType(&newHeight, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    fe40:	       movea.l 28(sp),a0
    fe44:	       move.l 24(a0),d0
    fe48:	       move.l d0,-(sp)
    fe4a:	       pea 1 <_start+0x1>
    fe4e:	       lea 12(sp),a0
    fe52:	       move.l a0,-(sp)
    fe54:	       jsr 147f4 <getValueType>
    fe5a:	       lea 12(sp),sp
    fe5e:	       tst.w d0
    fe60:	   /-- bne.s fe68 <builtIn_setFont+0x2e>
    fe62:	   |   moveq #1,d0
    fe64:	/--|-- bra.w ff16 <builtIn_setFont+0xdc>
    //              KPrintF("  Height: %d\n", newHeight);
    trimStack(&fun->stack);
    fe68:	|  \-> moveq #24,d0
    fe6a:	|      add.l 28(sp),d0
    fe6e:	|      move.l d0,-(sp)
    fe70:	|      jsr 15178 <trimStack>
    fe76:	|      addq.l #4,sp
    char *newText = getTextFromAnyVar(&(fun->stack->thisVar));
    fe78:	|      movea.l 28(sp),a0
    fe7c:	|      move.l 24(a0),d0
    fe80:	|      move.l d0,-(sp)
    fe82:	|      jsr 14dca <getTextFromAnyVar>
    fe88:	|      addq.l #4,sp
    fe8a:	|      move.l d0,16(sp)
    if (!newText) return BR_ERROR;
    fe8e:	|  /-- bne.s fe96 <builtIn_setFont+0x5c>
    fe90:	|  |   moveq #1,d0
    fe92:	+--|-- bra.w ff16 <builtIn_setFont+0xdc>
    //              KPrintF("  Character supported: %s\n", newText);
    trimStack(&fun->stack);
    fe96:	|  \-> moveq #24,d0
    fe98:	|      add.l 28(sp),d0
    fe9c:	|      move.l d0,-(sp)
    fe9e:	|      jsr 15178 <trimStack>
    fea4:	|      addq.l #4,sp
    if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) return BR_ERROR;
    fea6:	|      movea.l 28(sp),a0
    feaa:	|      move.l 24(a0),d0
    feae:	|      move.l d0,-(sp)
    feb0:	|      pea 5 <_start+0x5>
    feb4:	|      lea 16(sp),a0
    feb8:	|      move.l a0,-(sp)
    feba:	|      jsr 147f4 <getValueType>
    fec0:	|      lea 12(sp),sp
    fec4:	|      tst.w d0
    fec6:	|  /-- bne.s fecc <builtIn_setFont+0x92>
    fec8:	|  |   moveq #1,d0
    feca:	+--|-- bra.s ff16 <builtIn_setFont+0xdc>
    //              KPrintF("  File: %d\n", fileNumber);
    trimStack(&fun->stack);
    fecc:	|  \-> moveq #24,d0
    fece:	|      add.l 28(sp),d0
    fed2:	|      move.l d0,-(sp)
    fed4:	|      jsr 15178 <trimStack>
    feda:	|      addq.l #4,sp
    if (!loadFont(fileNumber, newText, newHeight)) return BR_ERROR;
    fedc:	|      move.l 4(sp),d1
    fee0:	|      move.l 8(sp),d0
    fee4:	|      move.l d1,-(sp)
    fee6:	|      move.l 20(sp),-(sp)
    feea:	|      move.l d0,-(sp)
    feec:	|      jsr 15624 <loadFont>
    fef2:	|      lea 12(sp),sp
    fef6:	|      tst.w d0
    fef8:	|  /-- bne.s fefe <builtIn_setFont+0xc4>
    fefa:	|  |   moveq #1,d0
    fefc:	+--|-- bra.s ff16 <builtIn_setFont+0xdc>
    //              KPrintF("  Done!\n");
    FreeVec(newText);
    fefe:	|  \-> move.l 16(sp),12(sp)
    ff04:	|      move.l 1c9ca <SysBase>,d0
    ff0a:	|      movea.l d0,a6
    ff0c:	|      movea.l 12(sp),a1
    ff10:	|      jsr -690(a6)

    return BR_CONTINUE;
    ff14:	|      moveq #2,d0
}
    ff16:	\----> movea.l (sp)+,a6
    ff18:	       lea 16(sp),sp
    ff1c:	       rts

0000ff1e <builtIn_inFont>:

builtIn(inFont)
{
    ff1e:	       subq.l #4,sp
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    ff20:	       movea.l 12(sp),a0
    ff24:	       move.l 24(a0),d0
    ff28:	       move.l d0,-(sp)
    ff2a:	       jsr 14dca <getTextFromAnyVar>
    ff30:	       addq.l #4,sp
    ff32:	       move.l d0,(sp)
	if (! newText) return BR_ERROR;
    ff34:	   /-- bne.s ff3a <builtIn_inFont+0x1c>
    ff36:	   |   moveq #1,d0
    ff38:	/--|-- bra.s ff70 <builtIn_inFont+0x52>
	trimStack (&fun -> stack);
    ff3a:	|  \-> moveq #24,d0
    ff3c:	|      add.l 12(sp),d0
    ff40:	|      move.l d0,-(sp)
    ff42:	|      jsr 15178 <trimStack>
    ff48:	|      addq.l #4,sp

	// Return value
	
	setVariable (&fun -> reg, SVT_INT, isInFont(newText));
    ff4a:	|      move.l (sp),-(sp)
    ff4c:	|      jsr 15612 <isInFont>
    ff52:	|      addq.l #4,sp
    ff54:	|      movea.w d0,a0
    ff56:	|      moveq #28,d0
    ff58:	|      add.l 12(sp),d0
    ff5c:	|      move.l a0,-(sp)
    ff5e:	|      pea 1 <_start+0x1>
    ff62:	|      move.l d0,-(sp)
    ff64:	|      jsr 150e6 <setVariable>
    ff6a:	|      lea 12(sp),sp
	return BR_CONTINUE;
    ff6e:	|      moveq #2,d0
}
    ff70:	\----> addq.l #4,sp
    ff72:	       rts

0000ff74 <builtIn_pasteString>:

builtIn(pasteString)
{
    ff74:	       lea -16(sp),sp
    ff78:	       move.l a6,-(sp)
    ff7a:	       move.l d2,-(sp)
    UNUSEDALL
    char *newText = getTextFromAnyVar(&(fun->stack->thisVar));
    ff7c:	       movea.l 32(sp),a0
    ff80:	       move.l 24(a0),d0
    ff84:	       move.l d0,-(sp)
    ff86:	       jsr 14dca <getTextFromAnyVar>
    ff8c:	       addq.l #4,sp
    ff8e:	       move.l d0,20(sp)
    trimStack(&fun->stack);
    ff92:	       moveq #24,d0
    ff94:	       add.l 32(sp),d0
    ff98:	       move.l d0,-(sp)
    ff9a:	       jsr 15178 <trimStack>
    ffa0:	       addq.l #4,sp
    int y, x;
    if (!getValueType(&y, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    ffa2:	       movea.l 32(sp),a0
    ffa6:	       move.l 24(a0),d0
    ffaa:	       move.l d0,-(sp)
    ffac:	       pea 1 <_start+0x1>
    ffb0:	       lea 20(sp),a0
    ffb4:	       move.l a0,-(sp)
    ffb6:	       jsr 147f4 <getValueType>
    ffbc:	       lea 12(sp),sp
    ffc0:	       tst.w d0
    ffc2:	   /-- bne.s ffca <builtIn_pasteString+0x56>
    ffc4:	   |   moveq #1,d0
    ffc6:	/--|-- bra.w 1006c <builtIn_pasteString+0xf8>
    trimStack(&fun->stack);
    ffca:	|  \-> moveq #24,d0
    ffcc:	|      add.l 32(sp),d0
    ffd0:	|      move.l d0,-(sp)
    ffd2:	|      jsr 15178 <trimStack>
    ffd8:	|      addq.l #4,sp
    if (!getValueType(&x, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    ffda:	|      movea.l 32(sp),a0
    ffde:	|      move.l 24(a0),d0
    ffe2:	|      move.l d0,-(sp)
    ffe4:	|      pea 1 <_start+0x1>
    ffe8:	|      lea 16(sp),a0
    ffec:	|      move.l a0,-(sp)
    ffee:	|      jsr 147f4 <getValueType>
    fff4:	|      lea 12(sp),sp
    fff8:	|      tst.w d0
    fffa:	|  /-- bne.s 10000 <builtIn_pasteString+0x8c>
    fffc:	|  |   moveq #1,d0
    fffe:	+--|-- bra.s 1006c <builtIn_pasteString+0xf8>
    trimStack(&fun->stack);
   10000:	|  \-> moveq #24,d0
   10002:	|      add.l 32(sp),d0
   10006:	|      move.l d0,-(sp)
   10008:	|      jsr 15178 <trimStack>
   1000e:	|      addq.l #4,sp
    if (x == IN_THE_CENTRE) x = (winWidth - stringWidth(newText)) >> 1;
   10010:	|      move.l 8(sp),d0
   10014:	|      cmpi.l #65535,d0
   1001a:	|  /-- bne.s 1003a <builtIn_pasteString+0xc6>
   1001c:	|  |   move.l 1c91e <winWidth>,d2
   10022:	|  |   move.l 20(sp),-(sp)
   10026:	|  |   jsr 158d6 <stringWidth>
   1002c:	|  |   addq.l #4,sp
   1002e:	|  |   move.l d2,d1
   10030:	|  |   sub.l d0,d1
   10032:	|  |   move.l d1,d0
   10034:	|  |   lsr.l #1,d0
   10036:	|  |   move.l d0,8(sp)
    //fixFont(pastePalette); //Todo: Amigize this
    pasteStringToBackdrop(newText, x, y); 
   1003a:	|  \-> move.l 12(sp),d1
   1003e:	|      move.l 8(sp),d0
   10042:	|      move.l d1,-(sp)
   10044:	|      move.l d0,-(sp)
   10046:	|      move.l 28(sp),-(sp)
   1004a:	|      jsr 157f8 <pasteStringToBackdrop>
   10050:	|      lea 12(sp),sp
    FreeVec(newText); 
   10054:	|      move.l 20(sp),16(sp)
   1005a:	|      move.l 1c9ca <SysBase>,d0
   10060:	|      movea.l d0,a6
   10062:	|      movea.l 16(sp),a1
   10066:	|      jsr -690(a6)
    return BR_CONTINUE;
   1006a:	|      moveq #2,d0
}
   1006c:	\----> move.l (sp)+,d2
   1006e:	       movea.l (sp)+,a6
   10070:	       lea 16(sp),sp
   10074:	       rts

00010076 <builtIn_anim>:

builtIn(anim)
{
   10076:	       lea -12(sp),sp
	UNUSEDALL
	if (numParams < 2) {
   1007a:	       moveq #1,d0
   1007c:	       cmp.l 16(sp),d0
   10080:	   /-- blt.s 10096 <builtIn_anim+0x20>
		KPrintF("Built-in function anim() must have at least 2 parameters.");
   10082:	   |   pea 199a7 <line.c.05397aaf+0x1b>
   10088:	   |   jsr 17254 <KPrintF>
   1008e:	   |   addq.l #4,sp
		return BR_ERROR;
   10090:	   |   moveq #1,d0
   10092:	/--|-- bra.w 10124 <builtIn_anim+0xae>
	}


	// First store the frame numbers and take 'em off the stack
	struct personaAnimation * ba = createPersonaAnim (numParams - 1, &fun -> stack);
   10096:	|  \-> moveq #24,d1
   10098:	|      add.l 20(sp),d1
   1009c:	|      move.l 16(sp),d0
   100a0:	|      subq.l #1,d0
   100a2:	|      move.l d1,-(sp)
   100a4:	|      move.l d0,-(sp)
   100a6:	|      jsr 9704 <createPersonaAnim>
   100ac:	|      addq.l #8,sp
   100ae:	|      move.l d0,8(sp)

	// Only remaining paramter is the file number
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   100b2:	|      movea.l 20(sp),a0
   100b6:	|      move.l 24(a0),d0
   100ba:	|      move.l d0,-(sp)
   100bc:	|      pea 5 <_start+0x5>
   100c0:	|      lea 8(sp),a0
   100c4:	|      move.l a0,-(sp)
   100c6:	|      jsr 147f4 <getValueType>
   100cc:	|      lea 12(sp),sp
   100d0:	|      tst.w d0
   100d2:	|  /-- bne.s 100d8 <builtIn_anim+0x62>
   100d4:	|  |   moveq #1,d0
   100d6:	+--|-- bra.s 10124 <builtIn_anim+0xae>
	trimStack (&fun -> stack);
   100d8:	|  \-> moveq #24,d0
   100da:	|      add.l 20(sp),d0
   100de:	|      move.l d0,-(sp)
   100e0:	|      jsr 15178 <trimStack>
   100e6:	|      addq.l #4,sp

	// Load the required sprite bank
	struct loadedSpriteBank * sprBanky = loadBankForAnim (fileNumber);
   100e8:	|      move.l (sp),d0
   100ea:	|      move.l d0,-(sp)
   100ec:	|      jsr 15f76 <loadBankForAnim>
   100f2:	|      addq.l #4,sp
   100f4:	|      move.l d0,4(sp)
	if (! sprBanky) return BR_ERROR;	// File not found, fatal done already
   100f8:	|  /-- bne.s 100fe <builtIn_anim+0x88>
   100fa:	|  |   moveq #1,d0
   100fc:	+--|-- bra.s 10124 <builtIn_anim+0xae>
	setBankFile (ba, sprBanky);
   100fe:	|  \-> move.l 4(sp),-(sp)
   10102:	|      move.l 12(sp),-(sp)
   10106:	|      jsr b5ae <setBankFile>
   1010c:	|      addq.l #8,sp

	// Return value
	newAnimationVariable (&fun -> reg, ba);
   1010e:	|      moveq #28,d0
   10110:	|      add.l 20(sp),d0
   10114:	|      move.l 8(sp),-(sp)
   10118:	|      move.l d0,-(sp)
   1011a:	|      jsr 150a2 <newAnimationVariable>
   10120:	|      addq.l #8,sp
	return BR_CONTINUE;
   10122:	|      moveq #2,d0
}
   10124:	\----> lea 12(sp),sp
   10128:	       rts

0001012a <builtIn_costume>:

builtIn(costume)
{
   1012a:	          lea -32(sp),sp
   1012e:	          move.l a6,-(sp)
   10130:	          move.l a2,-(sp)
    UNUSEDALL
    struct persona * newPersona = AllocVec(sizeof(struct persona), MEMF_ANY);
   10132:	          moveq #8,d0
   10134:	          move.l d0,32(sp)
   10138:	          clr.l 28(sp)
   1013c:	          move.l 1c9ca <SysBase>,d0
   10142:	          movea.l d0,a6
   10144:	          move.l 32(sp),d0
   10148:	          move.l 28(sp),d1
   1014c:	          jsr -684(a6)
   10150:	          move.l d0,24(sp)
   10154:	          move.l 24(sp),d0
   10158:	          move.l d0,20(sp)
    if (!newPersona) return BR_ERROR;
   1015c:	      /-- bne.s 10164 <builtIn_costume+0x3a>
   1015e:	      |   moveq #1,d0
   10160:	/-----|-- bra.w 1024c <builtIn_costume+0x122>
    newPersona->numDirections = numParams / 3;
   10164:	|     \-> move.l 44(sp),d0
   10168:	|         pea 3 <_start+0x3>
   1016c:	|         move.l d0,-(sp)
   1016e:	|         jsr 17c86 <__divsi3>
   10174:	|         addq.l #8,sp
   10176:	|         movea.l 20(sp),a0
   1017a:	|         move.l d0,4(a0)
    if (numParams == 0 || newPersona->numDirections * 3 != numParams) {
   1017e:	|         tst.l 44(sp)
   10182:	|     /-- beq.s 10198 <builtIn_costume+0x6e>
   10184:	|     |   movea.l 20(sp),a0
   10188:	|     |   move.l 4(a0),d1
   1018c:	|     |   move.l d1,d0
   1018e:	|     |   add.l d0,d0
   10190:	|     |   add.l d1,d0
   10192:	|     |   cmp.l 44(sp),d0
   10196:	|  /--|-- beq.s 101ac <builtIn_costume+0x82>
        KPrintF("Illegal number of parameters (should be greater than 0 and divisible by 3)");
   10198:	|  |  \-> pea 199e1 <line.c.05397aaf+0x55>
   1019e:	|  |      jsr 17254 <KPrintF>
   101a4:	|  |      addq.l #4,sp
        return BR_ERROR;
   101a6:	|  |      moveq #1,d0
   101a8:	+--|----- bra.w 1024c <builtIn_costume+0x122>
    }
    int iii;
    newPersona->animation = AllocVec(sizeof(struct personaAnimation *) * numParams, MEMF_ANY);
   101ac:	|  \----> move.l 44(sp),d0
   101b0:	|         add.l d0,d0
   101b2:	|         add.l d0,d0
   101b4:	|         move.l d0,16(sp)
   101b8:	|         clr.l 12(sp)
   101bc:	|         move.l 1c9ca <SysBase>,d0
   101c2:	|         movea.l d0,a6
   101c4:	|         move.l 16(sp),d0
   101c8:	|         move.l 12(sp),d1
   101cc:	|         jsr -684(a6)
   101d0:	|         move.l d0,8(sp)
   101d4:	|         move.l 8(sp),d0
   101d8:	|         movea.l 20(sp),a0
   101dc:	|         move.l d0,(a0)
    if (!newPersona->animation) return BR_ERROR;
   101de:	|         movea.l 20(sp),a0
   101e2:	|         move.l (a0),d0
   101e4:	|     /-- bne.s 101ea <builtIn_costume+0xc0>
   101e6:	|     |   moveq #1,d0
   101e8:	+-----|-- bra.s 1024c <builtIn_costume+0x122>
    for (iii = numParams - 1; iii >= 0; iii--) {
   101ea:	|     \-> move.l 44(sp),d0
   101ee:	|         subq.l #1,d0
   101f0:	|         move.l d0,36(sp)
   101f4:	|     /-- bra.s 10230 <builtIn_costume+0x106>
        newPersona->animation[iii] = getAnimationFromVar(&(fun->stack->thisVar));
   101f6:	|  /--|-> movea.l 48(sp),a0
   101fa:	|  |  |   move.l 24(a0),d0
   101fe:	|  |  |   movea.l 20(sp),a0
   10202:	|  |  |   movea.l (a0),a0
   10204:	|  |  |   move.l 36(sp),d1
   10208:	|  |  |   add.l d1,d1
   1020a:	|  |  |   add.l d1,d1
   1020c:	|  |  |   lea (0,a0,d1.l),a2
   10210:	|  |  |   move.l d0,-(sp)
   10212:	|  |  |   jsr 14ccc <getAnimationFromVar>
   10218:	|  |  |   addq.l #4,sp
   1021a:	|  |  |   move.l d0,(a2)
        trimStack(&fun->stack);
   1021c:	|  |  |   moveq #24,d0
   1021e:	|  |  |   add.l 48(sp),d0
   10222:	|  |  |   move.l d0,-(sp)
   10224:	|  |  |   jsr 15178 <trimStack>
   1022a:	|  |  |   addq.l #4,sp
    for (iii = numParams - 1; iii >= 0; iii--) {
   1022c:	|  |  |   subq.l #1,36(sp)
   10230:	|  |  \-> tst.l 36(sp)
   10234:	|  \----- bge.s 101f6 <builtIn_costume+0xcc>
    }

    // Return value
    newCostumeVariable(&fun->reg, newPersona);
   10236:	|         moveq #28,d0
   10238:	|         add.l 48(sp),d0
   1023c:	|         move.l 20(sp),-(sp)
   10240:	|         move.l d0,-(sp)
   10242:	|         jsr 150c4 <newCostumeVariable>
   10248:	|         addq.l #8,sp
    return BR_CONTINUE;
   1024a:	|         moveq #2,d0
}
   1024c:	\-------> movea.l (sp)+,a2
   1024e:	          movea.l (sp)+,a6
   10250:	          lea 32(sp),sp
   10254:	          rts

00010256 <builtIn_launch>:

builtIn(launch)
{
   10256:	          lea -20(sp),sp
   1025a:	          move.l a6,-(sp)
    UNUSEDALL
    char * newTextA = getTextFromAnyVar(&(fun->stack->thisVar));
   1025c:	          movea.l 32(sp),a0
   10260:	          move.l 24(a0),d0
   10264:	          move.l d0,-(sp)
   10266:	          jsr 14dca <getTextFromAnyVar>
   1026c:	          addq.l #4,sp
   1026e:	          move.l d0,20(sp)
    if (!newTextA) return BR_ERROR;
   10272:	      /-- bne.s 1027a <builtIn_launch+0x24>
   10274:	      |   moveq #1,d0
   10276:	/-----|-- bra.w 103a8 <builtIn_launch+0x152>

    char * newText = encodeFilename(newTextA);
   1027a:	|     \-> move.l 20(sp),-(sp)
   1027e:	|         jsr 2fe <encodeFilename>
   10284:	|         addq.l #4,sp
   10286:	|         move.l d0,16(sp)

    trimStack(&fun->stack);
   1028a:	|         moveq #24,d0
   1028c:	|         add.l 32(sp),d0
   10290:	|         move.l d0,-(sp)
   10292:	|         jsr 15178 <trimStack>
   10298:	|         addq.l #4,sp
    if (newTextA[0] == 'h' &&
   1029a:	|         movea.l 20(sp),a0
   1029e:	|         move.b (a0),d0
   102a0:	|         cmpi.b #104,d0
   102a4:	|  /----- bne.s 1030e <builtIn_launch+0xb8>
        newTextA[1] == 't' &&
   102a6:	|  |      movea.l 20(sp),a0
   102aa:	|  |      addq.l #1,a0
   102ac:	|  |      move.b (a0),d0
    if (newTextA[0] == 'h' &&
   102ae:	|  |      cmpi.b #116,d0
   102b2:	|  +----- bne.s 1030e <builtIn_launch+0xb8>
        newTextA[2] == 't' &&
   102b4:	|  |      movea.l 20(sp),a0
   102b8:	|  |      addq.l #2,a0
   102ba:	|  |      move.b (a0),d0
        newTextA[1] == 't' &&
   102bc:	|  |      cmpi.b #116,d0
   102c0:	|  +----- bne.s 1030e <builtIn_launch+0xb8>
        newTextA[3] == 'p' &&
   102c2:	|  |      movea.l 20(sp),a0
   102c6:	|  |      addq.l #3,a0
   102c8:	|  |      move.b (a0),d0
        newTextA[2] == 't' &&
   102ca:	|  |      cmpi.b #112,d0
   102ce:	|  +----- bne.s 1030e <builtIn_launch+0xb8>
        (newTextA[4] == ':' || (newTextA[4] == 's' && newTextA[5] == ':'))) {
   102d0:	|  |      movea.l 20(sp),a0
   102d4:	|  |      addq.l #4,a0
   102d6:	|  |      move.b (a0),d0
        newTextA[3] == 'p' &&
   102d8:	|  |      cmpi.b #58,d0
   102dc:	|  |  /-- beq.s 102fa <builtIn_launch+0xa4>
        (newTextA[4] == ':' || (newTextA[4] == 's' && newTextA[5] == ':'))) {
   102de:	|  |  |   movea.l 20(sp),a0
   102e2:	|  |  |   addq.l #4,a0
   102e4:	|  |  |   move.b (a0),d0
   102e6:	|  |  |   cmpi.b #115,d0
   102ea:	|  +--|-- bne.s 1030e <builtIn_launch+0xb8>
   102ec:	|  |  |   movea.l 20(sp),a0
   102f0:	|  |  |   addq.l #5,a0
   102f2:	|  |  |   move.b (a0),d0
   102f4:	|  |  |   cmpi.b #58,d0
   102f8:	|  +--|-- bne.s 1030e <builtIn_launch+0xb8>

        // IT'S A WEBSITE!
        launchMe = copyString(newTextA);
   102fa:	|  |  \-> move.l 20(sp),-(sp)
   102fe:	|  |      jsr b8 <copyString>
   10304:	|  |      addq.l #4,sp
   10306:	|  |      move.l d0,1ca8c <launchMe>
   1030c:	|  |  /-- bra.s 10360 <builtIn_launch+0x10a>
    } else {
        char *gameDir;
        gameDir = joinStrings(gamePath, "/");
   1030e:	|  \--|-> move.l 1c932 <gamePath>,d0
   10314:	|     |   pea 19a2c <line.c.05397aaf+0xa0>
   1031a:	|     |   move.l d0,-(sp)
   1031c:	|     |   jsr 13d20 <joinStrings>
   10322:	|     |   addq.l #8,sp
   10324:	|     |   move.l d0,12(sp)

        launchMe = joinStrings(gameDir, newText);
   10328:	|     |   move.l 16(sp),-(sp)
   1032c:	|     |   move.l 16(sp),-(sp)
   10330:	|     |   jsr 13d20 <joinStrings>
   10336:	|     |   addq.l #8,sp
   10338:	|     |   move.l d0,1ca8c <launchMe>
        FreeVec(newText);
   1033e:	|     |   move.l 16(sp),8(sp)
   10344:	|     |   move.l 1c9ca <SysBase>,d0
   1034a:	|     |   movea.l d0,a6
   1034c:	|     |   movea.l 8(sp),a1
   10350:	|     |   jsr -690(a6)
        if (!launchMe) return BR_ERROR;
   10354:	|     |   move.l 1ca8c <launchMe>,d0
   1035a:	|     +-- bne.s 10360 <builtIn_launch+0x10a>
   1035c:	|     |   moveq #1,d0
   1035e:	+-----|-- bra.s 103a8 <builtIn_launch+0x152>
    }
    FreeVec(newTextA);
   10360:	|     \-> move.l 20(sp),4(sp)
   10366:	|         move.l 1c9ca <SysBase>,d0
   1036c:	|         movea.l d0,a6
   1036e:	|         movea.l 4(sp),a1
   10372:	|         jsr -690(a6)
    setGraphicsWindow(FALSE);
   10376:	|         clr.l -(sp)
   10378:	|         jsr 4100 <setGraphicsWindow>
   1037e:	|         addq.l #4,sp
    setVariable(&fun->reg, SVT_INT, 1);
   10380:	|         moveq #28,d0
   10382:	|         add.l 32(sp),d0
   10386:	|         pea 1 <_start+0x1>
   1038a:	|         pea 1 <_start+0x1>
   1038e:	|         move.l d0,-(sp)
   10390:	|         jsr 150e6 <setVariable>
   10396:	|         lea 12(sp),sp
    launchResult = &fun->reg;
   1039a:	|         moveq #28,d0
   1039c:	|         add.l 32(sp),d0
   103a0:	|         move.l d0,1ca90 <launchResult>

    return BR_KEEP_AND_PAUSE;
   103a6:	|         moveq #0,d0
}
   103a8:	\-------> movea.l (sp)+,a6
   103aa:	          lea 20(sp),sp
   103ae:	          rts

000103b0 <builtIn_pause>:

builtIn(pause)
{
   103b0:	       subq.l #4,sp
	UNUSEDALL
	int theTime;
	if (! getValueType(&theTime, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   103b2:	       movea.l 12(sp),a0
   103b6:	       move.l 24(a0),d0
   103ba:	       move.l d0,-(sp)
   103bc:	       pea 1 <_start+0x1>
   103c0:	       move.l sp,d0
   103c2:	       addq.l #8,d0
   103c4:	       move.l d0,-(sp)
   103c6:	       jsr 147f4 <getValueType>
   103cc:	       lea 12(sp),sp
   103d0:	       tst.w d0
   103d2:	   /-- bne.s 103d8 <builtIn_pause+0x28>
   103d4:	   |   moveq #1,d0
   103d6:	/--|-- bra.s 10406 <builtIn_pause+0x56>
	trimStack (&fun -> stack);
   103d8:	|  \-> moveq #24,d0
   103da:	|      add.l 12(sp),d0
   103de:	|      move.l d0,-(sp)
   103e0:	|      jsr 15178 <trimStack>
   103e6:	|      addq.l #4,sp
	if (theTime > 0) {
   103e8:	|      move.l (sp),d0
   103ea:	|  /-- ble.s 10404 <builtIn_pause+0x54>
		fun -> timeLeft = theTime - 1;
   103ec:	|  |   move.l (sp),d0
   103ee:	|  |   subq.l #1,d0
   103f0:	|  |   movea.l 12(sp),a0
   103f4:	|  |   move.l d0,12(a0)
		fun -> isSpeech = FALSE;
   103f8:	|  |   movea.l 12(sp),a0
   103fc:	|  |   clr.w 50(a0)
		return BR_KEEP_AND_PAUSE;
   10400:	|  |   moveq #0,d0
   10402:	+--|-- bra.s 10406 <builtIn_pause+0x56>
	}
	return BR_CONTINUE;
   10404:	|  \-> moveq #2,d0
}
   10406:	\----> addq.l #4,sp
   10408:	       rts

0001040a <builtIn_completeTimers>:

builtIn(completeTimers)
{
	UNUSEDALL
	completeTimers();
   1040a:	jsr 4868 <completeTimers>
	return BR_CONTINUE;
   10410:	moveq #2,d0
}
   10412:	rts

00010414 <builtIn_callEvent>:

builtIn(callEvent)
{
   10414:	       lea -12(sp),sp
	UNUSEDALL
	int obj1, obj2;
	if (! getValueType(&obj2, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10418:	       movea.l 20(sp),a0
   1041c:	       move.l 24(a0),d0
   10420:	       move.l d0,-(sp)
   10422:	       pea 7 <_start+0x7>
   10426:	       lea 8(sp),a0
   1042a:	       move.l a0,-(sp)
   1042c:	       jsr 147f4 <getValueType>
   10432:	       lea 12(sp),sp
   10436:	       tst.w d0
   10438:	   /-- bne.s 10440 <builtIn_callEvent+0x2c>
   1043a:	   |   moveq #1,d0
   1043c:	/--|-- bra.w 104d6 <builtIn_callEvent+0xc2>
	trimStack (&fun -> stack);
   10440:	|  \-> moveq #24,d0
   10442:	|      add.l 20(sp),d0
   10446:	|      move.l d0,-(sp)
   10448:	|      jsr 15178 <trimStack>
   1044e:	|      addq.l #4,sp
	if (! getValueType(&obj1, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10450:	|      movea.l 20(sp),a0
   10454:	|      move.l 24(a0),d0
   10458:	|      move.l d0,-(sp)
   1045a:	|      pea 7 <_start+0x7>
   1045e:	|      moveq #12,d0
   10460:	|      add.l sp,d0
   10462:	|      move.l d0,-(sp)
   10464:	|      jsr 147f4 <getValueType>
   1046a:	|      lea 12(sp),sp
   1046e:	|      tst.w d0
   10470:	|  /-- bne.s 10476 <builtIn_callEvent+0x62>
   10472:	|  |   moveq #1,d0
   10474:	+--|-- bra.s 104d6 <builtIn_callEvent+0xc2>
	trimStack (&fun -> stack);
   10476:	|  \-> moveq #24,d0
   10478:	|      add.l 20(sp),d0
   1047c:	|      move.l d0,-(sp)
   1047e:	|      jsr 15178 <trimStack>
   10484:	|      addq.l #4,sp

	int fNum = getCombinationFunction (obj1, obj2);
   10486:	|      move.l (sp),d1
   10488:	|      move.l 4(sp),d0
   1048c:	|      move.l d1,-(sp)
   1048e:	|      move.l d0,-(sp)
   10490:	|      jsr d572 <getCombinationFunction>
   10496:	|      addq.l #8,sp
   10498:	|      move.l d0,8(sp)

	// Return value
	if (fNum) {
   1049c:	|  /-- beq.s 104bc <builtIn_callEvent+0xa8>
		setVariable (&fun -> reg, SVT_FUNC, fNum);
   1049e:	|  |   moveq #28,d0
   104a0:	|  |   add.l 20(sp),d0
   104a4:	|  |   move.l 8(sp),-(sp)
   104a8:	|  |   pea 2 <_start+0x2>
   104ac:	|  |   move.l d0,-(sp)
   104ae:	|  |   jsr 150e6 <setVariable>
   104b4:	|  |   lea 12(sp),sp
		return BR_CALLAFUNC;
   104b8:	|  |   moveq #4,d0
   104ba:	+--|-- bra.s 104d6 <builtIn_callEvent+0xc2>
	}
	setVariable (&fun -> reg, SVT_INT, 0);
   104bc:	|  \-> moveq #28,d0
   104be:	|      add.l 20(sp),d0
   104c2:	|      clr.l -(sp)
   104c4:	|      pea 1 <_start+0x1>
   104c8:	|      move.l d0,-(sp)
   104ca:	|      jsr 150e6 <setVariable>
   104d0:	|      lea 12(sp),sp
	return BR_CONTINUE;
   104d4:	|      moveq #2,d0
}
   104d6:	\----> lea 12(sp),sp
   104da:	       rts

000104dc <builtIn_quitGame>:
BOOL reallyWantToQuit = FALSE;

builtIn(quitGame)
{
	UNUSEDALL
	reallyWantToQuit = TRUE;
   104dc:	move.w #1,1ca9c <reallyWantToQuit>
	//quit_event.type=SDL_QUIT; Todo: Amigize
	//SDL_PushEvent(&quit_event);
	return BR_CONTINUE;
   104e4:	moveq #2,d0
}
   104e6:	rts

000104e8 <builtIn__rem_movieStart>:

// The old movie functions are deprecated and does nothing.
builtIn(_rem_movieStart)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   104e8:	moveq #24,d0
   104ea:	add.l 8(sp),d0
   104ee:	move.l d0,-(sp)
   104f0:	jsr 15178 <trimStack>
   104f6:	addq.l #4,sp
	KPrintF("Movie Stuff not supported on Amiga");
   104f8:	pea 19a2e <line.c.05397aaf+0xa2>
   104fe:	jsr 17254 <KPrintF>
   10504:	addq.l #4,sp
	return BR_CONTINUE;
   10506:	moveq #2,d0
}
   10508:	rts

0001050a <builtIn__rem_movieAbort>:

builtIn(_rem_movieAbort)
{
	UNUSEDALL
	//setVariable (&fun -> reg, SVT_INT, 0);
	KPrintF("Movie Stuff not supported on Amiga");
   1050a:	pea 19a2e <line.c.05397aaf+0xa2>
   10510:	jsr 17254 <KPrintF>
   10516:	addq.l #4,sp
	return BR_CONTINUE;
   10518:	moveq #2,d0
}
   1051a:	rts

0001051c <builtIn__rem_moviePlaying>:

builtIn(_rem_moviePlaying)
{
	UNUSEDALL
	KPrintF("Movie Stuff not supported on Amiga");
   1051c:	pea 19a2e <line.c.05397aaf+0xa2>
   10522:	jsr 17254 <KPrintF>
   10528:	addq.l #4,sp
	//setVariable (&fun -> reg, SVT_INT, 0);
	return BR_CONTINUE;
   1052a:	moveq #2,d0
}
   1052c:	rts

0001052e <builtIn_playMovie>:
	
	if (r && (! fun->next)) {
		restartFunction (fun);
		return BR_ALREADY_GONE;
	}*/
	KPrintF("Movie Stuff not supported on Amiga");
   1052e:	pea 19a2e <line.c.05397aaf+0xa2>
   10534:	jsr 17254 <KPrintF>
   1053a:	addq.l #4,sp
	return BR_CONTINUE;
   1053c:	moveq #2,d0
}
   1053e:	rts

00010540 <builtIn_stopMovie>:
	/*int r;
	
	r = stopMovie();
	
	setVariable (&fun -> reg, SVT_INT, 0);*/
	KPrintF("Movie Stuff not supported on Amiga");
   10540:	pea 19a2e <line.c.05397aaf+0xa2>
   10546:	jsr 17254 <KPrintF>
   1054c:	addq.l #4,sp
	return BR_CONTINUE;
   1054e:	moveq #2,d0
}
   10550:	rts

00010552 <builtIn_pauseMovie>:
	/*int r;
	
	r = pauseMovie();
	
	setVariable (&fun -> reg, SVT_INT, 0);*/
	KPrintF("Movie Stuff not supported on Amiga");
   10552:	pea 19a2e <line.c.05397aaf+0xa2>
   10558:	jsr 17254 <KPrintF>
   1055e:	addq.l #4,sp
	return BR_CONTINUE;
   10560:	moveq #2,d0
}
   10562:	rts

00010564 <builtIn_startMusic>:

#pragma mark -
#pragma mark Audio functions

builtIn(startMusic)
{
   10564:	       lea -12(sp),sp
	UNUSEDALL
	int fromTrack, musChan, fileNumber;
	if (! getValueType(&fromTrack, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10568:	       movea.l 20(sp),a0
   1056c:	       move.l 24(a0),d0
   10570:	       move.l d0,-(sp)
   10572:	       pea 1 <_start+0x1>
   10576:	       moveq #16,d0
   10578:	       add.l sp,d0
   1057a:	       move.l d0,-(sp)
   1057c:	       jsr 147f4 <getValueType>
   10582:	       lea 12(sp),sp
   10586:	       tst.w d0
   10588:	   /-- bne.s 10590 <builtIn_startMusic+0x2c>
   1058a:	   |   moveq #1,d0
   1058c:	/--|-- bra.w 10630 <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
   10590:	|  \-> moveq #24,d0
   10592:	|      add.l 20(sp),d0
   10596:	|      move.l d0,-(sp)
   10598:	|      jsr 15178 <trimStack>
   1059e:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   105a0:	|      movea.l 20(sp),a0
   105a4:	|      move.l 24(a0),d0
   105a8:	|      move.l d0,-(sp)
   105aa:	|      pea 1 <_start+0x1>
   105ae:	|      moveq #12,d0
   105b0:	|      add.l sp,d0
   105b2:	|      move.l d0,-(sp)
   105b4:	|      jsr 147f4 <getValueType>
   105ba:	|      lea 12(sp),sp
   105be:	|      tst.w d0
   105c0:	|  /-- bne.s 105c6 <builtIn_startMusic+0x62>
   105c2:	|  |   moveq #1,d0
   105c4:	+--|-- bra.s 10630 <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
   105c6:	|  \-> moveq #24,d0
   105c8:	|      add.l 20(sp),d0
   105cc:	|      move.l d0,-(sp)
   105ce:	|      jsr 15178 <trimStack>
   105d4:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   105d6:	|      movea.l 20(sp),a0
   105da:	|      move.l 24(a0),d0
   105de:	|      move.l d0,-(sp)
   105e0:	|      pea 5 <_start+0x5>
   105e4:	|      lea 8(sp),a0
   105e8:	|      move.l a0,-(sp)
   105ea:	|      jsr 147f4 <getValueType>
   105f0:	|      lea 12(sp),sp
   105f4:	|      tst.w d0
   105f6:	|  /-- bne.s 105fc <builtIn_startMusic+0x98>
   105f8:	|  |   moveq #1,d0
   105fa:	+--|-- bra.s 10630 <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
   105fc:	|  \-> moveq #24,d0
   105fe:	|      add.l 20(sp),d0
   10602:	|      move.l d0,-(sp)
   10604:	|      jsr 15178 <trimStack>
   1060a:	|      addq.l #4,sp
	if (! playMOD (fileNumber, musChan, fromTrack)) return BR_CONTINUE; //BR_ERROR;
   1060c:	|      movea.l 8(sp),a0
   10610:	|      move.l 4(sp),d1
   10614:	|      move.l (sp),d0
   10616:	|      move.l a0,-(sp)
   10618:	|      move.l d1,-(sp)
   1061a:	|      move.l d0,-(sp)
   1061c:	|      jsr d17e <playMOD>
   10622:	|      lea 12(sp),sp
   10626:	|      tst.w d0
   10628:	|  /-- bne.s 1062e <builtIn_startMusic+0xca>
   1062a:	|  |   moveq #2,d0
   1062c:	+--|-- bra.s 10630 <builtIn_startMusic+0xcc>
	return BR_CONTINUE;
   1062e:	|  \-> moveq #2,d0
}
   10630:	\----> lea 12(sp),sp
   10634:	       rts

00010636 <builtIn_stopMusic>:

builtIn(stopMusic)
{
   10636:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10638:	       movea.l 12(sp),a0
   1063c:	       move.l 24(a0),d0
   10640:	       move.l d0,-(sp)
   10642:	       pea 1 <_start+0x1>
   10646:	       move.l sp,d0
   10648:	       addq.l #8,d0
   1064a:	       move.l d0,-(sp)
   1064c:	       jsr 147f4 <getValueType>
   10652:	       lea 12(sp),sp
   10656:	       tst.w d0
   10658:	   /-- bne.s 1065e <builtIn_stopMusic+0x28>
   1065a:	   |   moveq #1,d0
   1065c:	/--|-- bra.s 1067c <builtIn_stopMusic+0x46>
	trimStack (&fun -> stack);
   1065e:	|  \-> moveq #24,d0
   10660:	|      add.l 12(sp),d0
   10664:	|      move.l d0,-(sp)
   10666:	|      jsr 15178 <trimStack>
   1066c:	|      addq.l #4,sp
	stopMOD (v);
   1066e:	|      move.l (sp),d0
   10670:	|      move.l d0,-(sp)
   10672:	|      jsr d21a <stopMOD>
   10678:	|      addq.l #4,sp
	return BR_CONTINUE;
   1067a:	|      moveq #2,d0
}
   1067c:	\----> addq.l #4,sp
   1067e:	       rts

00010680 <builtIn_setMusicVolume>:

builtIn(setMusicVolume)
{
   10680:	       subq.l #8,sp
	UNUSEDALL
	int musChan, v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10682:	       movea.l 16(sp),a0
   10686:	       move.l 24(a0),d0
   1068a:	       move.l d0,-(sp)
   1068c:	       pea 1 <_start+0x1>
   10690:	       move.l sp,d0
   10692:	       addq.l #8,d0
   10694:	       move.l d0,-(sp)
   10696:	       jsr 147f4 <getValueType>
   1069c:	       lea 12(sp),sp
   106a0:	       tst.w d0
   106a2:	   /-- bne.s 106a8 <builtIn_setMusicVolume+0x28>
   106a4:	   |   moveq #1,d0
   106a6:	/--|-- bra.s 10702 <builtIn_setMusicVolume+0x82>
	trimStack (&fun -> stack);
   106a8:	|  \-> moveq #24,d0
   106aa:	|      add.l 16(sp),d0
   106ae:	|      move.l d0,-(sp)
   106b0:	|      jsr 15178 <trimStack>
   106b6:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   106b8:	|      movea.l 16(sp),a0
   106bc:	|      move.l 24(a0),d0
   106c0:	|      move.l d0,-(sp)
   106c2:	|      pea 1 <_start+0x1>
   106c6:	|      moveq #12,d0
   106c8:	|      add.l sp,d0
   106ca:	|      move.l d0,-(sp)
   106cc:	|      jsr 147f4 <getValueType>
   106d2:	|      lea 12(sp),sp
   106d6:	|      tst.w d0
   106d8:	|  /-- bne.s 106de <builtIn_setMusicVolume+0x5e>
   106da:	|  |   moveq #1,d0
   106dc:	+--|-- bra.s 10702 <builtIn_setMusicVolume+0x82>
	trimStack (&fun -> stack);
   106de:	|  \-> moveq #24,d0
   106e0:	|      add.l 16(sp),d0
   106e4:	|      move.l d0,-(sp)
   106e6:	|      jsr 15178 <trimStack>
   106ec:	|      addq.l #4,sp
	setMusicVolume (musChan, v);
   106ee:	|      move.l (sp),d1
   106f0:	|      move.l 4(sp),d0
   106f4:	|      move.l d1,-(sp)
   106f6:	|      move.l d0,-(sp)
   106f8:	|      jsr d200 <setMusicVolume>
   106fe:	|      addq.l #8,sp
	return BR_CONTINUE;
   10700:	|      moveq #2,d0
}
   10702:	\----> addq.l #8,sp
   10704:	       rts

00010706 <builtIn_setDefaultMusicVolume>:

builtIn(setDefaultMusicVolume)
{
   10706:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10708:	       movea.l 12(sp),a0
   1070c:	       move.l 24(a0),d0
   10710:	       move.l d0,-(sp)
   10712:	       pea 1 <_start+0x1>
   10716:	       move.l sp,d0
   10718:	       addq.l #8,d0
   1071a:	       move.l d0,-(sp)
   1071c:	       jsr 147f4 <getValueType>
   10722:	       lea 12(sp),sp
   10726:	       tst.w d0
   10728:	   /-- bne.s 1072e <builtIn_setDefaultMusicVolume+0x28>
   1072a:	   |   moveq #1,d0
   1072c:	/--|-- bra.s 1074c <builtIn_setDefaultMusicVolume+0x46>
	trimStack (&fun -> stack);
   1072e:	|  \-> moveq #24,d0
   10730:	|      add.l 12(sp),d0
   10734:	|      move.l d0,-(sp)
   10736:	|      jsr 15178 <trimStack>
   1073c:	|      addq.l #4,sp
	setDefaultMusicVolume (v);
   1073e:	|      move.l (sp),d0
   10740:	|      move.l d0,-(sp)
   10742:	|      jsr d1e4 <setDefaultMusicVolume>
   10748:	|      addq.l #4,sp
	return BR_CONTINUE;
   1074a:	|      moveq #2,d0
}
   1074c:	\----> addq.l #4,sp
   1074e:	       rts

00010750 <builtIn_playSound>:

builtIn(playSound)
{
   10750:	       subq.l #4,sp


	UNUSEDALL
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   10752:	       movea.l 12(sp),a0
   10756:	       move.l 24(a0),d0
   1075a:	       move.l d0,-(sp)
   1075c:	       pea 5 <_start+0x5>
   10760:	       move.l sp,d0
   10762:	       addq.l #8,d0
   10764:	       move.l d0,-(sp)
   10766:	       jsr 147f4 <getValueType>
   1076c:	       lea 12(sp),sp
   10770:	       tst.w d0
   10772:	   /-- bne.s 10778 <builtIn_playSound+0x28>
   10774:	   |   moveq #1,d0
   10776:	/--|-- bra.s 107a0 <builtIn_playSound+0x50>
	trimStack (&fun -> stack);
   10778:	|  \-> moveq #24,d0
   1077a:	|      add.l 12(sp),d0
   1077e:	|      move.l d0,-(sp)
   10780:	|      jsr 15178 <trimStack>
   10786:	|      addq.l #4,sp
	if (! startSound (fileNumber, FALSE)) return BR_CONTINUE;	// Was BR_ERROR
   10788:	|      move.l (sp),d0
   1078a:	|      clr.l -(sp)
   1078c:	|      move.l d0,-(sp)
   1078e:	|      jsr d208 <startSound>
   10794:	|      addq.l #8,sp
   10796:	|      tst.w d0
   10798:	|  /-- bne.s 1079e <builtIn_playSound+0x4e>
   1079a:	|  |   moveq #2,d0
   1079c:	+--|-- bra.s 107a0 <builtIn_playSound+0x50>
	return BR_CONTINUE;
   1079e:	|  \-> moveq #2,d0
}
   107a0:	\----> addq.l #4,sp
   107a2:	       rts

000107a4 <builtIn_loopSound>:

builtIn(loopSound)
{
   107a4:	             lea -28(sp),sp
   107a8:	             move.l a6,-(sp)
	UNUSEDALL
	int fileNumber;

	if (numParams < 1) {
   107aa:	             tst.l 36(sp)
   107ae:	         /-- bgt.s 107c4 <builtIn_loopSound+0x20>
		KPrintF("Built-in function loopSound() must have at least 1 parameter.");
   107b0:	         |   pea 19a51 <line.c.05397aaf+0xc5>
   107b6:	         |   jsr 17254 <KPrintF>
   107bc:	         |   addq.l #4,sp
		return BR_ERROR;
   107be:	         |   moveq #1,d0
   107c0:	/--------|-- bra.w 10980 <builtIn_loopSound+0x1dc>
	} else if (numParams < 2) {
   107c4:	|        \-> moveq #1,d0
   107c6:	|            cmp.l 36(sp),d0
   107ca:	|     /----- blt.s 10826 <builtIn_loopSound+0x82>

		if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) return BR_ERROR;
   107cc:	|     |      movea.l 40(sp),a0
   107d0:	|     |      move.l 24(a0),d0
   107d4:	|     |      move.l d0,-(sp)
   107d6:	|     |      pea 5 <_start+0x5>
   107da:	|     |      lea 16(sp),a0
   107de:	|     |      move.l a0,-(sp)
   107e0:	|     |      jsr 147f4 <getValueType>
   107e6:	|     |      lea 12(sp),sp
   107ea:	|     |      tst.w d0
   107ec:	|     |  /-- bne.s 107f4 <builtIn_loopSound+0x50>
   107ee:	|     |  |   moveq #1,d0
   107f0:	+-----|--|-- bra.w 10980 <builtIn_loopSound+0x1dc>
		trimStack(&fun->stack);
   107f4:	|     |  \-> moveq #24,d0
   107f6:	|     |      add.l 40(sp),d0
   107fa:	|     |      move.l d0,-(sp)
   107fc:	|     |      jsr 15178 <trimStack>
   10802:	|     |      addq.l #4,sp
		if (!startSound(fileNumber, TRUE)) return BR_CONTINUE;	// Was BR_ERROR
   10804:	|     |      move.l 8(sp),d0
   10808:	|     |      pea 1 <_start+0x1>
   1080c:	|     |      move.l d0,-(sp)
   1080e:	|     |      jsr d208 <startSound>
   10814:	|     |      addq.l #8,sp
   10816:	|     |      tst.w d0
   10818:	|     |  /-- bne.s 10820 <builtIn_loopSound+0x7c>
   1081a:	|     |  |   moveq #2,d0
   1081c:	+-----|--|-- bra.w 10980 <builtIn_loopSound+0x1dc>
		return BR_CONTINUE;
   10820:	|     |  \-> moveq #2,d0
   10822:	+-----|----- bra.w 10980 <builtIn_loopSound+0x1dc>
	} else {
		// We have more than one sound to play!

		int doLoop = 2;
   10826:	|     \----> moveq #2,d1
   10828:	|            move.l d1,4(sp)
		struct soundList *s = NULL;
   1082c:	|            clr.l 28(sp)
		struct soundList *old = NULL;
   10830:	|            clr.l 24(sp)

		// Should we loop?
		if (fun->stack->thisVar.varType != SVT_FILE) {
   10834:	|            movea.l 40(sp),a0
   10838:	|            movea.l 24(a0),a0
   1083c:	|            move.l (a0),d0
   1083e:	|            moveq #5,d1
   10840:	|            cmp.l d0,d1
   10842:	|  /-------- beq.w 1091a <builtIn_loopSound+0x176>
			getValueType(&doLoop, SVT_INT,&fun->stack->thisVar);
   10846:	|  |         movea.l 40(sp),a0
   1084a:	|  |         move.l 24(a0),d0
   1084e:	|  |         move.l d0,-(sp)
   10850:	|  |         pea 1 <_start+0x1>
   10854:	|  |         lea 12(sp),a0
   10858:	|  |         move.l a0,-(sp)
   1085a:	|  |         jsr 147f4 <getValueType>
   10860:	|  |         lea 12(sp),sp
			trimStack(&fun->stack);
   10864:	|  |         moveq #24,d0
   10866:	|  |         add.l 40(sp),d0
   1086a:	|  |         move.l d0,-(sp)
   1086c:	|  |         jsr 15178 <trimStack>
   10872:	|  |         addq.l #4,sp
			numParams--;
   10874:	|  |         subq.l #1,36(sp)
		}
		while (numParams) {
   10878:	|  +-------- bra.w 1091a <builtIn_loopSound+0x176>
			if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) {
   1087c:	|  |  /----> movea.l 40(sp),a0
   10880:	|  |  |      move.l 24(a0),d0
   10884:	|  |  |      move.l d0,-(sp)
   10886:	|  |  |      pea 5 <_start+0x5>
   1088a:	|  |  |      lea 16(sp),a0
   1088e:	|  |  |      move.l a0,-(sp)
   10890:	|  |  |      jsr 147f4 <getValueType>
   10896:	|  |  |      lea 12(sp),sp
   1089a:	|  |  |      tst.w d0
   1089c:	|  |  |  /-- bne.s 108b2 <builtIn_loopSound+0x10e>
				KPrintF("Illegal parameter given built-in function loopSound().");
   1089e:	|  |  |  |   pea 19a8f <line.c.05397aaf+0x103>
   108a4:	|  |  |  |   jsr 17254 <KPrintF>
   108aa:	|  |  |  |   addq.l #4,sp
				return BR_ERROR;
   108ac:	|  |  |  |   moveq #1,d0
   108ae:	+--|--|--|-- bra.w 10980 <builtIn_loopSound+0x1dc>
			}
			s = AllocVec(sizeof(struct soundList), MEMF_ANY);
   108b2:	|  |  |  \-> moveq #20,d0
   108b4:	|  |  |      move.l d0,20(sp)
   108b8:	|  |  |      clr.l 16(sp)
   108bc:	|  |  |      move.l 1c9ca <SysBase>,d0
   108c2:	|  |  |      movea.l d0,a6
   108c4:	|  |  |      move.l 20(sp),d0
   108c8:	|  |  |      move.l 16(sp),d1
   108cc:	|  |  |      jsr -684(a6)
   108d0:	|  |  |      move.l d0,12(sp)
   108d4:	|  |  |      move.l 12(sp),d0
   108d8:	|  |  |      move.l d0,28(sp)
			if (!s) return BR_ERROR;
   108dc:	|  |  |  /-- bne.s 108e4 <builtIn_loopSound+0x140>
   108de:	|  |  |  |   moveq #1,d0
   108e0:	+--|--|--|-- bra.w 10980 <builtIn_loopSound+0x1dc>

			s->next = old;
   108e4:	|  |  |  \-> movea.l 28(sp),a0
   108e8:	|  |  |      move.l 24(sp),4(a0)
			s->prev = NULL;
   108ee:	|  |  |      movea.l 28(sp),a0
   108f2:	|  |  |      clr.l 8(a0)
			s->sound = fileNumber;
   108f6:	|  |  |      move.l 8(sp),d0
   108fa:	|  |  |      movea.l 28(sp),a0
   108fe:	|  |  |      move.l d0,(a0)
			old = s;
   10900:	|  |  |      move.l 28(sp),24(sp)

			trimStack(&fun->stack);
   10906:	|  |  |      moveq #24,d0
   10908:	|  |  |      add.l 40(sp),d0
   1090c:	|  |  |      move.l d0,-(sp)
   1090e:	|  |  |      jsr 15178 <trimStack>
   10914:	|  |  |      addq.l #4,sp
			numParams--;
   10916:	|  |  |      subq.l #1,36(sp)
		while (numParams) {
   1091a:	|  \--|----> tst.l 36(sp)
   1091e:	|     \----- bne.w 1087c <builtIn_loopSound+0xd8>
		}
		while (s->next) s = s->next;
   10922:	|        /-- bra.s 1092e <builtIn_loopSound+0x18a>
   10924:	|     /--|-> movea.l 28(sp),a0
   10928:	|     |  |   move.l 4(a0),28(sp)
   1092e:	|     |  \-> movea.l 28(sp),a0
   10932:	|     |      move.l 4(a0),d0
   10936:	|     \----- bne.s 10924 <builtIn_loopSound+0x180>
		if (doLoop > 1) {
   10938:	|            move.l 4(sp),d0
   1093c:	|            moveq #1,d1
   1093e:	|            cmp.l d0,d1
   10940:	|     /----- bge.s 10958 <builtIn_loopSound+0x1b4>
			s->next = old;
   10942:	|     |      movea.l 28(sp),a0
   10946:	|     |      move.l 24(sp),4(a0)
			old->prev = s;
   1094c:	|     |      movea.l 24(sp),a0
   10950:	|     |      move.l 28(sp),8(a0)
   10956:	|     |  /-- bra.s 10968 <builtIn_loopSound+0x1c4>
		} else if (doLoop) {
   10958:	|     \--|-> move.l 4(sp),d0
   1095c:	|        +-- beq.s 10968 <builtIn_loopSound+0x1c4>
			s->next = s;
   1095e:	|        |   movea.l 28(sp),a0
   10962:	|        |   move.l 28(sp),4(a0)
		}
		old->vol = -1;
   10968:	|        \-> movea.l 24(sp),a0
   1096c:	|            moveq #-1,d0
   1096e:	|            move.l d0,16(a0)
		playSoundList(old);
   10972:	|            move.l 24(sp),-(sp)
   10976:	|            jsr d182 <playSoundList>
   1097c:	|            addq.l #4,sp
		return BR_CONTINUE;
   1097e:	|            moveq #2,d0
	}
}
   10980:	\----------> movea.l (sp)+,a6
   10982:	             lea 28(sp),sp
   10986:	             rts

00010988 <builtIn_stopSound>:

builtIn(stopSound)
{
   10988:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   1098a:	       movea.l 12(sp),a0
   1098e:	       move.l 24(a0),d0
   10992:	       move.l d0,-(sp)
   10994:	       pea 5 <_start+0x5>
   10998:	       move.l sp,d0
   1099a:	       addq.l #8,d0
   1099c:	       move.l d0,-(sp)
   1099e:	       jsr 147f4 <getValueType>
   109a4:	       lea 12(sp),sp
   109a8:	       tst.w d0
   109aa:	   /-- bne.s 109b0 <builtIn_stopSound+0x28>
   109ac:	   |   moveq #1,d0
   109ae:	/--|-- bra.s 109ce <builtIn_stopSound+0x46>
	trimStack (&fun -> stack);
   109b0:	|  \-> moveq #24,d0
   109b2:	|      add.l 12(sp),d0
   109b6:	|      move.l d0,-(sp)
   109b8:	|      jsr 15178 <trimStack>
   109be:	|      addq.l #4,sp
	huntKillSound (v);
   109c0:	|      move.l (sp),d0
   109c2:	|      move.l d0,-(sp)
   109c4:	|      jsr d17a <huntKillSound>
   109ca:	|      addq.l #4,sp
	return BR_CONTINUE;
   109cc:	|      moveq #2,d0
}
   109ce:	\----> addq.l #4,sp
   109d0:	       rts

000109d2 <builtIn_setDefaultSoundVolume>:

builtIn(setDefaultSoundVolume)
{
   109d2:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   109d4:	       movea.l 12(sp),a0
   109d8:	       move.l 24(a0),d0
   109dc:	       move.l d0,-(sp)
   109de:	       pea 1 <_start+0x1>
   109e2:	       move.l sp,d0
   109e4:	       addq.l #8,d0
   109e6:	       move.l d0,-(sp)
   109e8:	       jsr 147f4 <getValueType>
   109ee:	       lea 12(sp),sp
   109f2:	       tst.w d0
   109f4:	   /-- bne.s 109fa <builtIn_setDefaultSoundVolume+0x28>
   109f6:	   |   moveq #1,d0
   109f8:	/--|-- bra.s 10a18 <builtIn_setDefaultSoundVolume+0x46>
	trimStack (&fun -> stack);
   109fa:	|  \-> moveq #24,d0
   109fc:	|      add.l 12(sp),d0
   10a00:	|      move.l d0,-(sp)
   10a02:	|      jsr 15178 <trimStack>
   10a08:	|      addq.l #4,sp
	setDefaultSoundVolume (v);
   10a0a:	|      move.l (sp),d0
   10a0c:	|      move.l d0,-(sp)
   10a0e:	|      jsr d1f0 <setDefaultSoundVolume>
   10a14:	|      addq.l #4,sp
	return BR_CONTINUE;
   10a16:	|      moveq #2,d0
}
   10a18:	\----> addq.l #4,sp
   10a1a:	       rts

00010a1c <builtIn_setSoundVolume>:

builtIn(setSoundVolume)
{
   10a1c:	       subq.l #8,sp
	UNUSEDALL
	int musChan, v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10a1e:	       movea.l 16(sp),a0
   10a22:	       move.l 24(a0),d0
   10a26:	       move.l d0,-(sp)
   10a28:	       pea 1 <_start+0x1>
   10a2c:	       move.l sp,d0
   10a2e:	       addq.l #8,d0
   10a30:	       move.l d0,-(sp)
   10a32:	       jsr 147f4 <getValueType>
   10a38:	       lea 12(sp),sp
   10a3c:	       tst.w d0
   10a3e:	   /-- bne.s 10a44 <builtIn_setSoundVolume+0x28>
   10a40:	   |   moveq #1,d0
   10a42:	/--|-- bra.s 10a9e <builtIn_setSoundVolume+0x82>
	trimStack (&fun -> stack);
   10a44:	|  \-> moveq #24,d0
   10a46:	|      add.l 16(sp),d0
   10a4a:	|      move.l d0,-(sp)
   10a4c:	|      jsr 15178 <trimStack>
   10a52:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   10a54:	|      movea.l 16(sp),a0
   10a58:	|      move.l 24(a0),d0
   10a5c:	|      move.l d0,-(sp)
   10a5e:	|      pea 5 <_start+0x5>
   10a62:	|      moveq #12,d0
   10a64:	|      add.l sp,d0
   10a66:	|      move.l d0,-(sp)
   10a68:	|      jsr 147f4 <getValueType>
   10a6e:	|      lea 12(sp),sp
   10a72:	|      tst.w d0
   10a74:	|  /-- bne.s 10a7a <builtIn_setSoundVolume+0x5e>
   10a76:	|  |   moveq #1,d0
   10a78:	+--|-- bra.s 10a9e <builtIn_setSoundVolume+0x82>
	trimStack (&fun -> stack);
   10a7a:	|  \-> moveq #24,d0
   10a7c:	|      add.l 16(sp),d0
   10a80:	|      move.l d0,-(sp)
   10a82:	|      jsr 15178 <trimStack>
   10a88:	|      addq.l #4,sp
	setSoundVolume (musChan, v);
   10a8a:	|      move.l (sp),d1
   10a8c:	|      move.l 4(sp),d0
   10a90:	|      move.l d1,-(sp)
   10a92:	|      move.l d0,-(sp)
   10a94:	|      jsr d204 <setSoundVolume>
   10a9a:	|      addq.l #8,sp
	return BR_CONTINUE;
   10a9c:	|      moveq #2,d0
}
   10a9e:	\----> addq.l #8,sp
   10aa0:	       rts

00010aa2 <builtIn_setSoundLoopPoints>:


builtIn(setSoundLoopPoints)
{
   10aa2:	       lea -12(sp),sp
	UNUSEDALL
	int musChan, theEnd, theStart;
	if (! getValueType(&theEnd, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10aa6:	       movea.l 20(sp),a0
   10aaa:	       move.l 24(a0),d0
   10aae:	       move.l d0,-(sp)
   10ab0:	       pea 1 <_start+0x1>
   10ab4:	       moveq #12,d0
   10ab6:	       add.l sp,d0
   10ab8:	       move.l d0,-(sp)
   10aba:	       jsr 147f4 <getValueType>
   10ac0:	       lea 12(sp),sp
   10ac4:	       tst.w d0
   10ac6:	   /-- bne.s 10ace <builtIn_setSoundLoopPoints+0x2c>
   10ac8:	   |   moveq #1,d0
   10aca:	/--|-- bra.w 10b66 <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
   10ace:	|  \-> moveq #24,d0
   10ad0:	|      add.l 20(sp),d0
   10ad4:	|      move.l d0,-(sp)
   10ad6:	|      jsr 15178 <trimStack>
   10adc:	|      addq.l #4,sp
	if (! getValueType(&theStart, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10ade:	|      movea.l 20(sp),a0
   10ae2:	|      move.l 24(a0),d0
   10ae6:	|      move.l d0,-(sp)
   10ae8:	|      pea 1 <_start+0x1>
   10aec:	|      lea 8(sp),a0
   10af0:	|      move.l a0,-(sp)
   10af2:	|      jsr 147f4 <getValueType>
   10af8:	|      lea 12(sp),sp
   10afc:	|      tst.w d0
   10afe:	|  /-- bne.s 10b04 <builtIn_setSoundLoopPoints+0x62>
   10b00:	|  |   moveq #1,d0
   10b02:	+--|-- bra.s 10b66 <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
   10b04:	|  \-> moveq #24,d0
   10b06:	|      add.l 20(sp),d0
   10b0a:	|      move.l d0,-(sp)
   10b0c:	|      jsr 15178 <trimStack>
   10b12:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   10b14:	|      movea.l 20(sp),a0
   10b18:	|      move.l 24(a0),d0
   10b1c:	|      move.l d0,-(sp)
   10b1e:	|      pea 5 <_start+0x5>
   10b22:	|      moveq #16,d0
   10b24:	|      add.l sp,d0
   10b26:	|      move.l d0,-(sp)
   10b28:	|      jsr 147f4 <getValueType>
   10b2e:	|      lea 12(sp),sp
   10b32:	|      tst.w d0
   10b34:	|  /-- bne.s 10b3a <builtIn_setSoundLoopPoints+0x98>
   10b36:	|  |   moveq #1,d0
   10b38:	+--|-- bra.s 10b66 <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
   10b3a:	|  \-> moveq #24,d0
   10b3c:	|      add.l 20(sp),d0
   10b40:	|      move.l d0,-(sp)
   10b42:	|      jsr 15178 <trimStack>
   10b48:	|      addq.l #4,sp
	setSoundLoop (musChan, theStart, theEnd);
   10b4a:	|      movea.l 4(sp),a0
   10b4e:	|      move.l (sp),d1
   10b50:	|      move.l 8(sp),d0
   10b54:	|      move.l a0,-(sp)
   10b56:	|      move.l d1,-(sp)
   10b58:	|      move.l d0,-(sp)
   10b5a:	|      jsr d1fc <setSoundLoop>
   10b60:	|      lea 12(sp),sp
	return BR_CONTINUE;
   10b64:	|      moveq #2,d0
}
   10b66:	\----> lea 12(sp),sp
   10b6a:	       rts

00010b6c <builtIn_setFloor>:

#pragma mark -
#pragma mark Extra room bits

builtIn(setFloor)
{
   10b6c:	          subq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType == SVT_FILE) {
   10b6e:	          movea.l 12(sp),a0
   10b72:	          movea.l 24(a0),a0
   10b76:	          move.l (a0),d0
   10b78:	          moveq #5,d1
   10b7a:	          cmp.l d0,d1
   10b7c:	/-------- bne.s 10bc0 <builtIn_setFloor+0x54>
		int v;
		getValueType(&v, SVT_FILE,&fun -> stack -> thisVar);
   10b7e:	|         movea.l 12(sp),a0
   10b82:	|         move.l 24(a0),d0
   10b86:	|         move.l d0,-(sp)
   10b88:	|         pea 5 <_start+0x5>
   10b8c:	|         move.l sp,d0
   10b8e:	|         addq.l #8,d0
   10b90:	|         move.l d0,-(sp)
   10b92:	|         jsr 147f4 <getValueType>
   10b98:	|         lea 12(sp),sp
		trimStack (&fun -> stack);
   10b9c:	|         moveq #24,d0
   10b9e:	|         add.l 12(sp),d0
   10ba2:	|         move.l d0,-(sp)
   10ba4:	|         jsr 15178 <trimStack>
   10baa:	|         addq.l #4,sp
		if (! setFloor (v)) return BR_ERROR;
   10bac:	|         move.l (sp),d0
   10bae:	|         move.l d0,-(sp)
   10bb0:	|         jsr 169fe <setFloor>
   10bb6:	|         addq.l #4,sp
   10bb8:	|         tst.w d0
   10bba:	|  /----- bne.s 10bd6 <builtIn_setFloor+0x6a>
   10bbc:	|  |      moveq #1,d0
   10bbe:	|  |  /-- bra.s 10bd8 <builtIn_setFloor+0x6c>
	} else {
		trimStack (&fun -> stack);
   10bc0:	\--|--|-> moveq #24,d0
   10bc2:	   |  |   add.l 12(sp),d0
   10bc6:	   |  |   move.l d0,-(sp)
   10bc8:	   |  |   jsr 15178 <trimStack>
   10bce:	   |  |   addq.l #4,sp
		setFloorNull ();
   10bd0:	   |  |   jsr 17178 <setFloorNull>
	}
	return BR_CONTINUE;
   10bd6:	   \--|-> moveq #2,d0
}
   10bd8:	      \-> addq.l #4,sp
   10bda:	          rts

00010bdc <builtIn_showFloor>:

builtIn(showFloor)
{
	UNUSEDALL
	drawFloor ();
   10bdc:	jsr 16296 <drawFloor>
	return BR_CONTINUE;
   10be2:	moveq #2,d0
}
   10be4:	rts

00010be6 <builtIn_setZBuffer>:

builtIn(setZBuffer)
{
   10be6:	          subq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType == SVT_FILE) {
   10be8:	          movea.l 12(sp),a0
   10bec:	          movea.l 24(a0),a0
   10bf0:	          move.l (a0),d0
   10bf2:	          moveq #5,d1
   10bf4:	          cmp.l d0,d1
   10bf6:	/-------- bne.s 10c3a <builtIn_setZBuffer+0x54>
		int v;
		getValueType(&v, SVT_FILE,&fun -> stack -> thisVar);
   10bf8:	|         movea.l 12(sp),a0
   10bfc:	|         move.l 24(a0),d0
   10c00:	|         move.l d0,-(sp)
   10c02:	|         pea 5 <_start+0x5>
   10c06:	|         move.l sp,d0
   10c08:	|         addq.l #8,d0
   10c0a:	|         move.l d0,-(sp)
   10c0c:	|         jsr 147f4 <getValueType>
   10c12:	|         lea 12(sp),sp
		trimStack (&fun -> stack);
   10c16:	|         moveq #24,d0
   10c18:	|         add.l 12(sp),d0
   10c1c:	|         move.l d0,-(sp)
   10c1e:	|         jsr 15178 <trimStack>
   10c24:	|         addq.l #4,sp
		if (! setZBuffer (v)) return BR_ERROR;
   10c26:	|         move.l (sp),d0
   10c28:	|         move.l d0,-(sp)
   10c2a:	|         jsr 878c <setZBuffer>
   10c30:	|         addq.l #4,sp
   10c32:	|         tst.w d0
   10c34:	|  /----- bne.s 10c50 <builtIn_setZBuffer+0x6a>
   10c36:	|  |      moveq #1,d0
   10c38:	|  |  /-- bra.s 10c52 <builtIn_setZBuffer+0x6c>
	} else {
		trimStack (&fun -> stack);
   10c3a:	\--|--|-> moveq #24,d0
   10c3c:	   |  |   add.l 12(sp),d0
   10c40:	   |  |   move.l d0,-(sp)
   10c42:	   |  |   jsr 15178 <trimStack>
   10c48:	   |  |   addq.l #4,sp
		killZBuffer ();
   10c4a:	   |  |   jsr 8740 <killZBuffer>
	}
	return BR_CONTINUE;
   10c50:	   \--|-> moveq #2,d0
}
   10c52:	      \-> addq.l #4,sp
   10c54:	          rts

00010c56 <builtIn_setLightMap>:

		default:
			fatal ("Function should have either 2 or 3 parameters");
			return BR_ERROR;
	}*/
	KPrintF("Not implemented on Amiga");
   10c56:	pea 19ac6 <line.c.05397aaf+0x13a>
   10c5c:	jsr 17254 <KPrintF>
   10c62:	addq.l #4,sp
	return BR_CONTINUE;
   10c64:	moveq #2,d0
}
   10c66:	rts

00010c68 <builtIn_setSpeechMode>:
#pragma mark Objects

builtIn(setSpeechMode)
{
	UNUSEDALL
	if (! getValueType(&speechMode, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10c68:	          movea.l 8(sp),a0
   10c6c:	          move.l 24(a0),d0
   10c70:	          move.l d0,-(sp)
   10c72:	          pea 1 <_start+0x1>
   10c76:	          pea 1ca98 <speechMode>
   10c7c:	          jsr 147f4 <getValueType>
   10c82:	          lea 12(sp),sp
   10c86:	          tst.w d0
   10c88:	      /-- bne.s 10c8e <builtIn_setSpeechMode+0x26>
   10c8a:	      |   moveq #1,d0
   10c8c:	/-----|-- bra.s 10cc6 <builtIn_setSpeechMode+0x5e>
	trimStack (&fun -> stack);
   10c8e:	|     \-> moveq #24,d0
   10c90:	|         add.l 8(sp),d0
   10c94:	|         move.l d0,-(sp)
   10c96:	|         jsr 15178 <trimStack>
   10c9c:	|         addq.l #4,sp
	if (speechMode < 0 || speechMode > 2) {
   10c9e:	|         move.l 1ca98 <speechMode>,d0
   10ca4:	|     /-- bmi.s 10cb2 <builtIn_setSpeechMode+0x4a>
   10ca6:	|     |   move.l 1ca98 <speechMode>,d0
   10cac:	|     |   moveq #2,d1
   10cae:	|     |   cmp.l d0,d1
   10cb0:	|  /--|-- bge.s 10cc4 <builtIn_setSpeechMode+0x5c>
		KPrintF ("Valid parameters are be SPEECHANDTEXT, SPEECHONLY or TEXTONLY");
   10cb2:	|  |  \-> pea 19adf <line.c.05397aaf+0x153>
   10cb8:	|  |      jsr 17254 <KPrintF>
   10cbe:	|  |      addq.l #4,sp
		return BR_ERROR;
   10cc0:	|  |      moveq #1,d0
   10cc2:	+--|----- bra.s 10cc6 <builtIn_setSpeechMode+0x5e>
	}
	return BR_CONTINUE;
   10cc4:	|  \----> moveq #2,d0
}
   10cc6:	\-------> rts

00010cc8 <builtIn_somethingSpeaking>:

builtIn(somethingSpeaking)
{
   10cc8:	       subq.l #4,sp
	UNUSEDALL
	int i = isThereAnySpeechGoingOn ();
   10cca:	       jsr 7f48 <isThereAnySpeechGoingOn>
   10cd0:	       move.l d0,(sp)
	if (i == -1) {
   10cd2:	       moveq #-1,d0
   10cd4:	       cmp.l (sp),d0
   10cd6:	/----- bne.s 10cf2 <builtIn_somethingSpeaking+0x2a>
		setVariable (&fun -> reg, SVT_INT, 0);
   10cd8:	|      moveq #28,d0
   10cda:	|      add.l 12(sp),d0
   10cde:	|      clr.l -(sp)
   10ce0:	|      pea 1 <_start+0x1>
   10ce4:	|      move.l d0,-(sp)
   10ce6:	|      jsr 150e6 <setVariable>
   10cec:	|      lea 12(sp),sp
   10cf0:	|  /-- bra.s 10d0a <builtIn_somethingSpeaking+0x42>
	} else {
		setVariable (&fun -> reg, SVT_OBJTYPE, i);
   10cf2:	\--|-> moveq #28,d0
   10cf4:	   |   add.l 12(sp),d0
   10cf8:	   |   move.l (sp),-(sp)
   10cfa:	   |   pea 7 <_start+0x7>
   10cfe:	   |   move.l d0,-(sp)
   10d00:	   |   jsr 150e6 <setVariable>
   10d06:	   |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   10d0a:	   \-> moveq #2,d0
}
   10d0c:	       addq.l #4,sp
   10d0e:	       rts

00010d10 <builtIn_skipSpeech>:

builtIn(skipSpeech)
{
	UNUSEDALL
	killSpeechTimers ();
   10d10:	jsr 6222 <killSpeechTimers>
	return BR_CONTINUE;
   10d16:	moveq #2,d0
}
   10d18:	rts

00010d1a <builtIn_getOverObject>:

builtIn(getOverObject)
{
	UNUSEDALL
	if (overRegion)
   10d1a:	       move.l 1cade <overRegion>,d0
   10d20:	/----- beq.s 10d4a <builtIn_getOverObject+0x30>
		// Return value
		setVariable (&fun -> reg, SVT_OBJTYPE, overRegion -> thisType -> objectNum);
   10d22:	|      movea.l 1cade <overRegion>,a0
   10d28:	|      movea.l 28(a0),a0
   10d2c:	|      move.l 4(a0),d1
   10d30:	|      moveq #28,d0
   10d32:	|      add.l 8(sp),d0
   10d36:	|      move.l d1,-(sp)
   10d38:	|      pea 7 <_start+0x7>
   10d3c:	|      move.l d0,-(sp)
   10d3e:	|      jsr 150e6 <setVariable>
   10d44:	|      lea 12(sp),sp
   10d48:	|  /-- bra.s 10d62 <builtIn_getOverObject+0x48>
	else
		// Return value
		setVariable (&fun -> reg, SVT_INT, 0);
   10d4a:	\--|-> moveq #28,d0
   10d4c:	   |   add.l 8(sp),d0
   10d50:	   |   clr.l -(sp)
   10d52:	   |   pea 1 <_start+0x1>
   10d56:	   |   move.l d0,-(sp)
   10d58:	   |   jsr 150e6 <setVariable>
   10d5e:	   |   lea 12(sp),sp
	return BR_CONTINUE;
   10d62:	   \-> moveq #2,d0
}
   10d64:	       rts

00010d66 <builtIn_rename>:

builtIn(rename)
{
   10d66:	       lea -16(sp),sp
   10d6a:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar(&(fun->stack->thisVar));
   10d6c:	       movea.l 28(sp),a0
   10d70:	       move.l 24(a0),d0
   10d74:	       move.l d0,-(sp)
   10d76:	       jsr 14dca <getTextFromAnyVar>
   10d7c:	       addq.l #4,sp
   10d7e:	       move.l d0,16(sp)
	int objT;
	if (!newText) return BR_ERROR;
   10d82:	   /-- bne.s 10d88 <builtIn_rename+0x22>
   10d84:	   |   moveq #1,d0
   10d86:	/--|-- bra.s 10e02 <builtIn_rename+0x9c>
	trimStack(&fun->stack);
   10d88:	|  \-> moveq #24,d0
   10d8a:	|      add.l 28(sp),d0
   10d8e:	|      move.l d0,-(sp)
   10d90:	|      jsr 15178 <trimStack>
   10d96:	|      addq.l #4,sp
	if (!getValueType(&objT, SVT_OBJTYPE, &fun->stack->thisVar)) return BR_ERROR;
   10d98:	|      movea.l 28(sp),a0
   10d9c:	|      move.l 24(a0),d0
   10da0:	|      move.l d0,-(sp)
   10da2:	|      pea 7 <_start+0x7>
   10da6:	|      lea 12(sp),a0
   10daa:	|      move.l a0,-(sp)
   10dac:	|      jsr 147f4 <getValueType>
   10db2:	|      lea 12(sp),sp
   10db6:	|      tst.w d0
   10db8:	|  /-- bne.s 10dbe <builtIn_rename+0x58>
   10dba:	|  |   moveq #1,d0
   10dbc:	+--|-- bra.s 10e02 <builtIn_rename+0x9c>
	trimStack(&fun->stack);
   10dbe:	|  \-> moveq #24,d0
   10dc0:	|      add.l 28(sp),d0
   10dc4:	|      move.l d0,-(sp)
   10dc6:	|      jsr 15178 <trimStack>
   10dcc:	|      addq.l #4,sp
	struct objectType * o = findObjectType(objT);
   10dce:	|      move.l 4(sp),d0
   10dd2:	|      move.l d0,-(sp)
   10dd4:	|      jsr d53e <findObjectType>
   10dda:	|      addq.l #4,sp
   10ddc:	|      move.l d0,12(sp)
	FreeVec(o->screenName);
   10de0:	|      movea.l 12(sp),a0
   10de4:	|      move.l (a0),8(sp)
   10de8:	|      move.l 1c9ca <SysBase>,d0
   10dee:	|      movea.l d0,a6
   10df0:	|      movea.l 8(sp),a1
   10df4:	|      jsr -690(a6)
	o->screenName = newText;
   10df8:	|      movea.l 12(sp),a0
   10dfc:	|      move.l 16(sp),(a0)
	return BR_CONTINUE;
   10e00:	|      moveq #2,d0
}
   10e02:	\----> movea.l (sp)+,a6
   10e04:	       lea 16(sp),sp
   10e08:	       rts

00010e0a <builtIn_getObjectX>:

builtIn (getObjectX)
{
   10e0a:	          lea -12(sp),sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10e0e:	          movea.l 20(sp),a0
   10e12:	          move.l 24(a0),d0
   10e16:	          move.l d0,-(sp)
   10e18:	          pea 7 <_start+0x7>
   10e1c:	          lea 8(sp),a0
   10e20:	          move.l a0,-(sp)
   10e22:	          jsr 147f4 <getValueType>
   10e28:	          lea 12(sp),sp
   10e2c:	          tst.w d0
   10e2e:	      /-- bne.s 10e36 <builtIn_getObjectX+0x2c>
   10e30:	      |   moveq #1,d0
   10e32:	/-----|-- bra.w 10ed2 <builtIn_getObjectX+0xc8>
	trimStack (&fun -> stack);
   10e36:	|     \-> moveq #24,d0
   10e38:	|         add.l 20(sp),d0
   10e3c:	|         move.l d0,-(sp)
   10e3e:	|         jsr 15178 <trimStack>
   10e44:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   10e46:	|         move.l (sp),d0
   10e48:	|         move.l d0,-(sp)
   10e4a:	|         jsr a648 <findPerson>
   10e50:	|         addq.l #4,sp
   10e52:	|         move.l d0,8(sp)
	if (pers) {
   10e56:	|     /-- beq.s 10e84 <builtIn_getObjectX+0x7a>
		setVariable (&fun -> reg, SVT_INT, pers -> x);
   10e58:	|     |   movea.l 8(sp),a0
   10e5c:	|     |   move.l (a0),d0
   10e5e:	|     |   move.l d0,-(sp)
   10e60:	|     |   jsr 1761e <__fixsfsi>
   10e66:	|     |   addq.l #4,sp
   10e68:	|     |   move.l d0,d1
   10e6a:	|     |   moveq #28,d0
   10e6c:	|     |   add.l 20(sp),d0
   10e70:	|     |   move.l d1,-(sp)
   10e72:	|     |   pea 1 <_start+0x1>
   10e76:	|     |   move.l d0,-(sp)
   10e78:	|     |   jsr 150e6 <setVariable>
   10e7e:	|     |   lea 12(sp),sp
   10e82:	|  /--|-- bra.s 10ed0 <builtIn_getObjectX+0xc6>
	} else {
		struct screenRegion * la = getRegionForObject (objectNumber);
   10e84:	|  |  \-> move.l (sp),d0
   10e86:	|  |      move.l d0,-(sp)
   10e88:	|  |      jsr 15a36 <getRegionForObject>
   10e8e:	|  |      addq.l #4,sp
   10e90:	|  |      move.l d0,4(sp)
		if (la) {
   10e94:	|  |  /-- beq.s 10eb8 <builtIn_getObjectX+0xae>
			setVariable (&fun -> reg, SVT_INT, la -> sX);
   10e96:	|  |  |   movea.l 4(sp),a0
   10e9a:	|  |  |   move.l 16(a0),d1
   10e9e:	|  |  |   moveq #28,d0
   10ea0:	|  |  |   add.l 20(sp),d0
   10ea4:	|  |  |   move.l d1,-(sp)
   10ea6:	|  |  |   pea 1 <_start+0x1>
   10eaa:	|  |  |   move.l d0,-(sp)
   10eac:	|  |  |   jsr 150e6 <setVariable>
   10eb2:	|  |  |   lea 12(sp),sp
   10eb6:	|  +--|-- bra.s 10ed0 <builtIn_getObjectX+0xc6>
		} else {
			setVariable (&fun -> reg, SVT_INT, 0);
   10eb8:	|  |  \-> moveq #28,d0
   10eba:	|  |      add.l 20(sp),d0
   10ebe:	|  |      clr.l -(sp)
   10ec0:	|  |      pea 1 <_start+0x1>
   10ec4:	|  |      move.l d0,-(sp)
   10ec6:	|  |      jsr 150e6 <setVariable>
   10ecc:	|  |      lea 12(sp),sp
		}
	}
	return BR_CONTINUE;
   10ed0:	|  \----> moveq #2,d0
}
   10ed2:	\-------> lea 12(sp),sp
   10ed6:	          rts

00010ed8 <builtIn_getObjectY>:

builtIn (getObjectY)
{
   10ed8:	          lea -12(sp),sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10edc:	          movea.l 20(sp),a0
   10ee0:	          move.l 24(a0),d0
   10ee4:	          move.l d0,-(sp)
   10ee6:	          pea 7 <_start+0x7>
   10eea:	          lea 8(sp),a0
   10eee:	          move.l a0,-(sp)
   10ef0:	          jsr 147f4 <getValueType>
   10ef6:	          lea 12(sp),sp
   10efa:	          tst.w d0
   10efc:	      /-- bne.s 10f04 <builtIn_getObjectY+0x2c>
   10efe:	      |   moveq #1,d0
   10f00:	/-----|-- bra.w 10fa2 <builtIn_getObjectY+0xca>
	trimStack (&fun -> stack);
   10f04:	|     \-> moveq #24,d0
   10f06:	|         add.l 20(sp),d0
   10f0a:	|         move.l d0,-(sp)
   10f0c:	|         jsr 15178 <trimStack>
   10f12:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   10f14:	|         move.l (sp),d0
   10f16:	|         move.l d0,-(sp)
   10f18:	|         jsr a648 <findPerson>
   10f1e:	|         addq.l #4,sp
   10f20:	|         move.l d0,8(sp)
	if (pers) {
   10f24:	|     /-- beq.s 10f54 <builtIn_getObjectY+0x7c>
		setVariable (&fun -> reg, SVT_INT, pers -> y);
   10f26:	|     |   movea.l 8(sp),a0
   10f2a:	|     |   move.l 4(a0),d0
   10f2e:	|     |   move.l d0,-(sp)
   10f30:	|     |   jsr 1761e <__fixsfsi>
   10f36:	|     |   addq.l #4,sp
   10f38:	|     |   move.l d0,d1
   10f3a:	|     |   moveq #28,d0
   10f3c:	|     |   add.l 20(sp),d0
   10f40:	|     |   move.l d1,-(sp)
   10f42:	|     |   pea 1 <_start+0x1>
   10f46:	|     |   move.l d0,-(sp)
   10f48:	|     |   jsr 150e6 <setVariable>
   10f4e:	|     |   lea 12(sp),sp
   10f52:	|  /--|-- bra.s 10fa0 <builtIn_getObjectY+0xc8>
	} else {
		struct screenRegion * la = getRegionForObject (objectNumber);
   10f54:	|  |  \-> move.l (sp),d0
   10f56:	|  |      move.l d0,-(sp)
   10f58:	|  |      jsr 15a36 <getRegionForObject>
   10f5e:	|  |      addq.l #4,sp
   10f60:	|  |      move.l d0,4(sp)
		if (la) {
   10f64:	|  |  /-- beq.s 10f88 <builtIn_getObjectY+0xb0>
			setVariable (&fun -> reg, SVT_INT, la -> sY);
   10f66:	|  |  |   movea.l 4(sp),a0
   10f6a:	|  |  |   move.l 20(a0),d1
   10f6e:	|  |  |   moveq #28,d0
   10f70:	|  |  |   add.l 20(sp),d0
   10f74:	|  |  |   move.l d1,-(sp)
   10f76:	|  |  |   pea 1 <_start+0x1>
   10f7a:	|  |  |   move.l d0,-(sp)
   10f7c:	|  |  |   jsr 150e6 <setVariable>
   10f82:	|  |  |   lea 12(sp),sp
   10f86:	|  +--|-- bra.s 10fa0 <builtIn_getObjectY+0xc8>
		} else {
			setVariable (&fun -> reg, SVT_INT, 0);
   10f88:	|  |  \-> moveq #28,d0
   10f8a:	|  |      add.l 20(sp),d0
   10f8e:	|  |      clr.l -(sp)
   10f90:	|  |      pea 1 <_start+0x1>
   10f94:	|  |      move.l d0,-(sp)
   10f96:	|  |      jsr 150e6 <setVariable>
   10f9c:	|  |      lea 12(sp),sp
		}
	}
	return BR_CONTINUE;
   10fa0:	|  \----> moveq #2,d0
}
   10fa2:	\-------> lea 12(sp),sp
   10fa6:	          rts

00010fa8 <builtIn_addScreenRegion>:


builtIn(addScreenRegion)
{
   10fa8:	       lea -32(sp),sp
   10fac:	       movem.l d2-d5,-(sp)
	UNUSEDALL
	int sX, sY, x1, y1, x2, y2, di, objectNumber;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10fb0:	       movea.l 56(sp),a0
   10fb4:	       move.l 24(a0),d0
   10fb8:	       move.l d0,-(sp)
   10fba:	       pea 1 <_start+0x1>
   10fbe:	       lea 28(sp),a0
   10fc2:	       move.l a0,-(sp)
   10fc4:	       jsr 147f4 <getValueType>
   10fca:	       lea 12(sp),sp
   10fce:	       tst.w d0
   10fd0:	   /-- bne.s 10fd8 <builtIn_addScreenRegion+0x30>
   10fd2:	   |   moveq #1,d0
   10fd4:	/--|-- bra.w 111b2 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   10fd8:	|  \-> moveq #24,d0
   10fda:	|      add.l 56(sp),d0
   10fde:	|      move.l d0,-(sp)
   10fe0:	|      jsr 15178 <trimStack>
   10fe6:	|      addq.l #4,sp
	if (! getValueType(&sY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10fe8:	|      movea.l 56(sp),a0
   10fec:	|      move.l 24(a0),d0
   10ff0:	|      move.l d0,-(sp)
   10ff2:	|      pea 1 <_start+0x1>
   10ff6:	|      moveq #48,d0
   10ff8:	|      add.l sp,d0
   10ffa:	|      move.l d0,-(sp)
   10ffc:	|      jsr 147f4 <getValueType>
   11002:	|      lea 12(sp),sp
   11006:	|      tst.w d0
   11008:	|  /-- bne.s 11010 <builtIn_addScreenRegion+0x68>
   1100a:	|  |   moveq #1,d0
   1100c:	+--|-- bra.w 111b2 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   11010:	|  \-> moveq #24,d0
   11012:	|      add.l 56(sp),d0
   11016:	|      move.l d0,-(sp)
   11018:	|      jsr 15178 <trimStack>
   1101e:	|      addq.l #4,sp
	if (! getValueType(&sX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11020:	|      movea.l 56(sp),a0
   11024:	|      move.l 24(a0),d0
   11028:	|      move.l d0,-(sp)
   1102a:	|      pea 1 <_start+0x1>
   1102e:	|      moveq #52,d0
   11030:	|      add.l sp,d0
   11032:	|      move.l d0,-(sp)
   11034:	|      jsr 147f4 <getValueType>
   1103a:	|      lea 12(sp),sp
   1103e:	|      tst.w d0
   11040:	|  /-- bne.s 11048 <builtIn_addScreenRegion+0xa0>
   11042:	|  |   moveq #1,d0
   11044:	+--|-- bra.w 111b2 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   11048:	|  \-> moveq #24,d0
   1104a:	|      add.l 56(sp),d0
   1104e:	|      move.l d0,-(sp)
   11050:	|      jsr 15178 <trimStack>
   11056:	|      addq.l #4,sp
	if (! getValueType(&y2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11058:	|      movea.l 56(sp),a0
   1105c:	|      move.l 24(a0),d0
   11060:	|      move.l d0,-(sp)
   11062:	|      pea 1 <_start+0x1>
   11066:	|      lea 32(sp),a0
   1106a:	|      move.l a0,-(sp)
   1106c:	|      jsr 147f4 <getValueType>
   11072:	|      lea 12(sp),sp
   11076:	|      tst.w d0
   11078:	|  /-- bne.s 11080 <builtIn_addScreenRegion+0xd8>
   1107a:	|  |   moveq #1,d0
   1107c:	+--|-- bra.w 111b2 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   11080:	|  \-> moveq #24,d0
   11082:	|      add.l 56(sp),d0
   11086:	|      move.l d0,-(sp)
   11088:	|      jsr 15178 <trimStack>
   1108e:	|      addq.l #4,sp
	if (! getValueType(&x2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11090:	|      movea.l 56(sp),a0
   11094:	|      move.l 24(a0),d0
   11098:	|      move.l d0,-(sp)
   1109a:	|      pea 1 <_start+0x1>
   1109e:	|      lea 36(sp),a0
   110a2:	|      move.l a0,-(sp)
   110a4:	|      jsr 147f4 <getValueType>
   110aa:	|      lea 12(sp),sp
   110ae:	|      tst.w d0
   110b0:	|  /-- bne.s 110b8 <builtIn_addScreenRegion+0x110>
   110b2:	|  |   moveq #1,d0
   110b4:	+--|-- bra.w 111b2 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   110b8:	|  \-> moveq #24,d0
   110ba:	|      add.l 56(sp),d0
   110be:	|      move.l d0,-(sp)
   110c0:	|      jsr 15178 <trimStack>
   110c6:	|      addq.l #4,sp
	if (! getValueType(&y1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   110c8:	|      movea.l 56(sp),a0
   110cc:	|      move.l 24(a0),d0
   110d0:	|      move.l d0,-(sp)
   110d2:	|      pea 1 <_start+0x1>
   110d6:	|      lea 40(sp),a0
   110da:	|      move.l a0,-(sp)
   110dc:	|      jsr 147f4 <getValueType>
   110e2:	|      lea 12(sp),sp
   110e6:	|      tst.w d0
   110e8:	|  /-- bne.s 110f0 <builtIn_addScreenRegion+0x148>
   110ea:	|  |   moveq #1,d0
   110ec:	+--|-- bra.w 111b2 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   110f0:	|  \-> moveq #24,d0
   110f2:	|      add.l 56(sp),d0
   110f6:	|      move.l d0,-(sp)
   110f8:	|      jsr 15178 <trimStack>
   110fe:	|      addq.l #4,sp
	if (! getValueType(&x1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11100:	|      movea.l 56(sp),a0
   11104:	|      move.l 24(a0),d0
   11108:	|      move.l d0,-(sp)
   1110a:	|      pea 1 <_start+0x1>
   1110e:	|      lea 44(sp),a0
   11112:	|      move.l a0,-(sp)
   11114:	|      jsr 147f4 <getValueType>
   1111a:	|      lea 12(sp),sp
   1111e:	|      tst.w d0
   11120:	|  /-- bne.s 11128 <builtIn_addScreenRegion+0x180>
   11122:	|  |   moveq #1,d0
   11124:	+--|-- bra.w 111b2 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   11128:	|  \-> moveq #24,d0
   1112a:	|      add.l 56(sp),d0
   1112e:	|      move.l d0,-(sp)
   11130:	|      jsr 15178 <trimStack>
   11136:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11138:	|      movea.l 56(sp),a0
   1113c:	|      move.l 24(a0),d0
   11140:	|      move.l d0,-(sp)
   11142:	|      pea 7 <_start+0x7>
   11146:	|      lea 24(sp),a0
   1114a:	|      move.l a0,-(sp)
   1114c:	|      jsr 147f4 <getValueType>
   11152:	|      lea 12(sp),sp
   11156:	|      tst.w d0
   11158:	|  /-- bne.s 1115e <builtIn_addScreenRegion+0x1b6>
   1115a:	|  |   moveq #1,d0
   1115c:	+--|-- bra.s 111b2 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   1115e:	|  \-> moveq #24,d0
   11160:	|      add.l 56(sp),d0
   11164:	|      move.l d0,-(sp)
   11166:	|      jsr 15178 <trimStack>
   1116c:	|      addq.l #4,sp
	if (addScreenRegion (x1, y1, x2, y2, sX, sY, di, objectNumber)) return BR_CONTINUE;
   1116e:	|      move.l 16(sp),d5
   11172:	|      move.l 20(sp),d4
   11176:	|      move.l 40(sp),d3
   1117a:	|      move.l 44(sp),d2
   1117e:	|      movea.l 24(sp),a1
   11182:	|      movea.l 28(sp),a0
   11186:	|      move.l 32(sp),d1
   1118a:	|      move.l 36(sp),d0
   1118e:	|      move.l d5,-(sp)
   11190:	|      move.l d4,-(sp)
   11192:	|      move.l d3,-(sp)
   11194:	|      move.l d2,-(sp)
   11196:	|      move.l a1,-(sp)
   11198:	|      move.l a0,-(sp)
   1119a:	|      move.l d1,-(sp)
   1119c:	|      move.l d0,-(sp)
   1119e:	|      jsr 158f0 <addScreenRegion>
   111a4:	|      lea 32(sp),sp
   111a8:	|      tst.w d0
   111aa:	|  /-- beq.s 111b0 <builtIn_addScreenRegion+0x208>
   111ac:	|  |   moveq #2,d0
   111ae:	+--|-- bra.s 111b2 <builtIn_addScreenRegion+0x20a>
	return BR_ERROR;
   111b0:	|  \-> moveq #1,d0

}
   111b2:	\----> movem.l (sp)+,d2-d5
   111b6:	       lea 32(sp),sp
   111ba:	       rts

000111bc <builtIn_removeScreenRegion>:

builtIn(removeScreenRegion)
{
   111bc:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   111be:	       movea.l 12(sp),a0
   111c2:	       move.l 24(a0),d0
   111c6:	       move.l d0,-(sp)
   111c8:	       pea 7 <_start+0x7>
   111cc:	       move.l sp,d0
   111ce:	       addq.l #8,d0
   111d0:	       move.l d0,-(sp)
   111d2:	       jsr 147f4 <getValueType>
   111d8:	       lea 12(sp),sp
   111dc:	       tst.w d0
   111de:	   /-- bne.s 111e4 <builtIn_removeScreenRegion+0x28>
   111e0:	   |   moveq #1,d0
   111e2:	/--|-- bra.s 11202 <builtIn_removeScreenRegion+0x46>
	trimStack (&fun -> stack);
   111e4:	|  \-> moveq #24,d0
   111e6:	|      add.l 12(sp),d0
   111ea:	|      move.l d0,-(sp)
   111ec:	|      jsr 15178 <trimStack>
   111f2:	|      addq.l #4,sp
	removeScreenRegion (objectNumber);
   111f4:	|      move.l (sp),d0
   111f6:	|      move.l d0,-(sp)
   111f8:	|      jsr 15bde <removeScreenRegion>
   111fe:	|      addq.l #4,sp
	return BR_CONTINUE;
   11200:	|      moveq #2,d0
}
   11202:	\----> addq.l #4,sp
   11204:	       rts

00011206 <builtIn_showBoxes>:

builtIn(showBoxes)
{
	UNUSEDALL
	showBoxes ();
   11206:	jsr 15d62 <showBoxes>
	return BR_CONTINUE;
   1120c:	moveq #2,d0
}
   1120e:	rts

00011210 <builtIn_removeAllScreenRegions>:

builtIn(removeAllScreenRegions)
{
	UNUSEDALL
	killAllRegions ();
   11210:	jsr 15a64 <killAllRegions>
	return BR_CONTINUE;
   11216:	moveq #2,d0
}
   11218:	rts

0001121a <builtIn_addCharacter>:

builtIn(addCharacter)
{
   1121a:	       lea -16(sp),sp
	UNUSEDALL
	struct persona * p;
	int x, y, objectNumber;

	p = getCostumeFromVar (&(fun -> stack -> thisVar));
   1121e:	       movea.l 24(sp),a0
   11222:	       move.l 24(a0),d0
   11226:	       move.l d0,-(sp)
   11228:	       jsr 144a0 <getCostumeFromVar>
   1122e:	       addq.l #4,sp
   11230:	       move.l d0,12(sp)
	if (p == NULL) return BR_ERROR;
   11234:	   /-- bne.s 1123c <builtIn_addCharacter+0x22>
   11236:	   |   moveq #1,d0
   11238:	/--|-- bra.w 11318 <builtIn_addCharacter+0xfe>

	trimStack (&fun -> stack);
   1123c:	|  \-> moveq #24,d0
   1123e:	|      add.l 24(sp),d0
   11242:	|      move.l d0,-(sp)
   11244:	|      jsr 15178 <trimStack>
   1124a:	|      addq.l #4,sp
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1124c:	|      movea.l 24(sp),a0
   11250:	|      move.l 24(a0),d0
   11254:	|      move.l d0,-(sp)
   11256:	|      pea 1 <_start+0x1>
   1125a:	|      lea 12(sp),a0
   1125e:	|      move.l a0,-(sp)
   11260:	|      jsr 147f4 <getValueType>
   11266:	|      lea 12(sp),sp
   1126a:	|      tst.w d0
   1126c:	|  /-- bne.s 11274 <builtIn_addCharacter+0x5a>
   1126e:	|  |   moveq #1,d0
   11270:	+--|-- bra.w 11318 <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
   11274:	|  \-> moveq #24,d0
   11276:	|      add.l 24(sp),d0
   1127a:	|      move.l d0,-(sp)
   1127c:	|      jsr 15178 <trimStack>
   11282:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11284:	|      movea.l 24(sp),a0
   11288:	|      move.l 24(a0),d0
   1128c:	|      move.l d0,-(sp)
   1128e:	|      pea 1 <_start+0x1>
   11292:	|      moveq #16,d0
   11294:	|      add.l sp,d0
   11296:	|      move.l d0,-(sp)
   11298:	|      jsr 147f4 <getValueType>
   1129e:	|      lea 12(sp),sp
   112a2:	|      tst.w d0
   112a4:	|  /-- bne.s 112aa <builtIn_addCharacter+0x90>
   112a6:	|  |   moveq #1,d0
   112a8:	+--|-- bra.s 11318 <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
   112aa:	|  \-> moveq #24,d0
   112ac:	|      add.l 24(sp),d0
   112b0:	|      move.l d0,-(sp)
   112b2:	|      jsr 15178 <trimStack>
   112b8:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   112ba:	|      movea.l 24(sp),a0
   112be:	|      move.l 24(a0),d0
   112c2:	|      move.l d0,-(sp)
   112c4:	|      pea 7 <_start+0x7>
   112c8:	|      lea 8(sp),a0
   112cc:	|      move.l a0,-(sp)
   112ce:	|      jsr 147f4 <getValueType>
   112d4:	|      lea 12(sp),sp
   112d8:	|      tst.w d0
   112da:	|  /-- bne.s 112e0 <builtIn_addCharacter+0xc6>
   112dc:	|  |   moveq #1,d0
   112de:	+--|-- bra.s 11318 <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
   112e0:	|  \-> moveq #24,d0
   112e2:	|      add.l 24(sp),d0
   112e6:	|      move.l d0,-(sp)
   112e8:	|      jsr 15178 <trimStack>
   112ee:	|      addq.l #4,sp
	if (addPerson (x, y, objectNumber, p)) return BR_CONTINUE;
   112f0:	|      movea.l (sp),a0
   112f2:	|      move.l 4(sp),d1
   112f6:	|      move.l 8(sp),d0
   112fa:	|      move.l 12(sp),-(sp)
   112fe:	|      move.l a0,-(sp)
   11300:	|      move.l d1,-(sp)
   11302:	|      move.l d0,-(sp)
   11304:	|      jsr 9242 <addPerson>
   1130a:	|      lea 16(sp),sp
   1130e:	|      tst.w d0
   11310:	|  /-- beq.s 11316 <builtIn_addCharacter+0xfc>
   11312:	|  |   moveq #2,d0
   11314:	+--|-- bra.s 11318 <builtIn_addCharacter+0xfe>
	return BR_ERROR;
   11316:	|  \-> moveq #1,d0
}
   11318:	\----> lea 16(sp),sp
   1131c:	       rts

0001131e <builtIn_hideCharacter>:

builtIn(hideCharacter)
{
   1131e:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11320:	       movea.l 12(sp),a0
   11324:	       move.l 24(a0),d0
   11328:	       move.l d0,-(sp)
   1132a:	       pea 7 <_start+0x7>
   1132e:	       move.l sp,d0
   11330:	       addq.l #8,d0
   11332:	       move.l d0,-(sp)
   11334:	       jsr 147f4 <getValueType>
   1133a:	       lea 12(sp),sp
   1133e:	       tst.w d0
   11340:	   /-- bne.s 11346 <builtIn_hideCharacter+0x28>
   11342:	   |   moveq #1,d0
   11344:	/--|-- bra.s 11366 <builtIn_hideCharacter+0x48>
	trimStack (&fun -> stack);
   11346:	|  \-> moveq #24,d0
   11348:	|      add.l 12(sp),d0
   1134c:	|      move.l d0,-(sp)
   1134e:	|      jsr 15178 <trimStack>
   11354:	|      addq.l #4,sp
	setShown (FALSE, objectNumber);
   11356:	|      move.l (sp),d0
   11358:	|      move.l d0,-(sp)
   1135a:	|      clr.l -(sp)
   1135c:	|      jsr bc7c <setShown>
   11362:	|      addq.l #8,sp
	return BR_CONTINUE;
   11364:	|      moveq #2,d0
}
   11366:	\----> addq.l #4,sp
   11368:	       rts

0001136a <builtIn_showCharacter>:

builtIn(showCharacter)
{
   1136a:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1136c:	       movea.l 12(sp),a0
   11370:	       move.l 24(a0),d0
   11374:	       move.l d0,-(sp)
   11376:	       pea 7 <_start+0x7>
   1137a:	       move.l sp,d0
   1137c:	       addq.l #8,d0
   1137e:	       move.l d0,-(sp)
   11380:	       jsr 147f4 <getValueType>
   11386:	       lea 12(sp),sp
   1138a:	       tst.w d0
   1138c:	   /-- bne.s 11392 <builtIn_showCharacter+0x28>
   1138e:	   |   moveq #1,d0
   11390:	/--|-- bra.s 113b4 <builtIn_showCharacter+0x4a>
	trimStack (&fun -> stack);
   11392:	|  \-> moveq #24,d0
   11394:	|      add.l 12(sp),d0
   11398:	|      move.l d0,-(sp)
   1139a:	|      jsr 15178 <trimStack>
   113a0:	|      addq.l #4,sp
	setShown (TRUE, objectNumber);
   113a2:	|      move.l (sp),d0
   113a4:	|      move.l d0,-(sp)
   113a6:	|      pea 1 <_start+0x1>
   113aa:	|      jsr bc7c <setShown>
   113b0:	|      addq.l #8,sp
	return BR_CONTINUE;
   113b2:	|      moveq #2,d0
}
   113b4:	\----> addq.l #4,sp
   113b6:	       rts

000113b8 <builtIn_removeAllCharacters>:

builtIn(removeAllCharacters)
{
	UNUSEDALL
	killSpeechTimers ();
   113b8:	jsr 6222 <killSpeechTimers>
	killMostPeople ();
   113be:	jsr aab4 <killMostPeople>
	return BR_CONTINUE;
   113c4:	moveq #2,d0
}
   113c6:	rts

000113c8 <builtIn_setCharacterDrawMode>:

builtIn(setCharacterDrawMode)
{
   113c8:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   113ca:	       movea.l 16(sp),a0
   113ce:	       move.l 24(a0),d0
   113d2:	       move.l d0,-(sp)
   113d4:	       pea 1 <_start+0x1>
   113d8:	       move.l sp,d0
   113da:	       addq.l #8,d0
   113dc:	       move.l d0,-(sp)
   113de:	       jsr 147f4 <getValueType>
   113e4:	       lea 12(sp),sp
   113e8:	       tst.w d0
   113ea:	   /-- bne.s 113f0 <builtIn_setCharacterDrawMode+0x28>
   113ec:	   |   moveq #1,d0
   113ee:	/--|-- bra.s 1144a <builtIn_setCharacterDrawMode+0x82>
	trimStack (&fun -> stack);
   113f0:	|  \-> moveq #24,d0
   113f2:	|      add.l 16(sp),d0
   113f6:	|      move.l d0,-(sp)
   113f8:	|      jsr 15178 <trimStack>
   113fe:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11400:	|      movea.l 16(sp),a0
   11404:	|      move.l 24(a0),d0
   11408:	|      move.l d0,-(sp)
   1140a:	|      pea 7 <_start+0x7>
   1140e:	|      moveq #12,d0
   11410:	|      add.l sp,d0
   11412:	|      move.l d0,-(sp)
   11414:	|      jsr 147f4 <getValueType>
   1141a:	|      lea 12(sp),sp
   1141e:	|      tst.w d0
   11420:	|  /-- bne.s 11426 <builtIn_setCharacterDrawMode+0x5e>
   11422:	|  |   moveq #1,d0
   11424:	+--|-- bra.s 1144a <builtIn_setCharacterDrawMode+0x82>
	trimStack (&fun -> stack);
   11426:	|  \-> moveq #24,d0
   11428:	|      add.l 16(sp),d0
   1142c:	|      move.l d0,-(sp)
   1142e:	|      jsr 15178 <trimStack>
   11434:	|      addq.l #4,sp
	setDrawMode (di, obj);
   11436:	|      move.l 4(sp),d1
   1143a:	|      move.l (sp),d0
   1143c:	|      move.l d1,-(sp)
   1143e:	|      move.l d0,-(sp)
   11440:	|      jsr b5ba <setDrawMode>
   11446:	|      addq.l #8,sp
	return BR_CONTINUE;
   11448:	|      moveq #2,d0
}
   1144a:	\----> addq.l #8,sp
   1144c:	       rts

0001144e <builtIn_setCharacterTransparency>:

builtIn(setCharacterTransparency)
{
	UNUSEDALL
	KPrintF("setCharacterTransparency: Not implemented on Amiga");
   1144e:	pea 19b1d <line.c.05397aaf+0x191>
   11454:	jsr 17254 <KPrintF>
   1145a:	addq.l #4,sp
	return BR_CONTINUE;
   1145c:	moveq #2,d0
}
   1145e:	rts

00011460 <builtIn_setCharacterColourise>:

builtIn(setCharacterColourise)
{
	UNUSEDALL
	KPrintF("setCharacterColourise: Currently not implemented on Amiga");
   11460:	pea 19b50 <line.c.05397aaf+0x1c4>
   11466:	jsr 17254 <KPrintF>
   1146c:	addq.l #4,sp
	if (! getValueType(&r, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
	trimStack (&fun -> stack);
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
	trimStack (&fun -> stack);
	setPersonColourise (obj, r, g, b, mix);*/
	return BR_CONTINUE;
   1146e:	moveq #2,d0
}
   11470:	rts

00011472 <builtIn_setScale>:

builtIn(setScale)
{
   11472:	       subq.l #8,sp
	UNUSEDALL
	int val1, val2;
	if (! getValueType(&val2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11474:	       movea.l 16(sp),a0
   11478:	       move.l 24(a0),d0
   1147c:	       move.l d0,-(sp)
   1147e:	       pea 1 <_start+0x1>
   11482:	       move.l sp,d0
   11484:	       addq.l #8,d0
   11486:	       move.l d0,-(sp)
   11488:	       jsr 147f4 <getValueType>
   1148e:	       lea 12(sp),sp
   11492:	       tst.w d0
   11494:	   /-- bne.s 1149a <builtIn_setScale+0x28>
   11496:	   |   moveq #1,d0
   11498:	/--|-- bra.s 114fc <builtIn_setScale+0x8a>
	trimStack (&fun -> stack);
   1149a:	|  \-> moveq #24,d0
   1149c:	|      add.l 16(sp),d0
   114a0:	|      move.l d0,-(sp)
   114a2:	|      jsr 15178 <trimStack>
   114a8:	|      addq.l #4,sp
	if (! getValueType(&val1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   114aa:	|      movea.l 16(sp),a0
   114ae:	|      move.l 24(a0),d0
   114b2:	|      move.l d0,-(sp)
   114b4:	|      pea 1 <_start+0x1>
   114b8:	|      moveq #12,d0
   114ba:	|      add.l sp,d0
   114bc:	|      move.l d0,-(sp)
   114be:	|      jsr 147f4 <getValueType>
   114c4:	|      lea 12(sp),sp
   114c8:	|      tst.w d0
   114ca:	|  /-- bne.s 114d0 <builtIn_setScale+0x5e>
   114cc:	|  |   moveq #1,d0
   114ce:	+--|-- bra.s 114fc <builtIn_setScale+0x8a>
	trimStack (&fun -> stack);
   114d0:	|  \-> moveq #24,d0
   114d2:	|      add.l 16(sp),d0
   114d6:	|      move.l d0,-(sp)
   114d8:	|      jsr 15178 <trimStack>
   114de:	|      addq.l #4,sp
	setScale ((short int) val1, (short int) val2);
   114e0:	|      move.l (sp),d0
   114e2:	|      move.l d0,d0
   114e4:	|      movea.w d0,a1
   114e6:	|      move.l 4(sp),d0
   114ea:	|      move.l d0,d0
   114ec:	|      movea.w d0,a0
   114ee:	|      move.l a1,-(sp)
   114f0:	|      move.l a0,-(sp)
   114f2:	|      jsr bc54 <setScale>
   114f8:	|      addq.l #8,sp
	return BR_CONTINUE;
   114fa:	|      moveq #2,d0
}
   114fc:	\----> addq.l #8,sp
   114fe:	       rts

00011500 <builtIn_stopCharacter>:

builtIn(stopCharacter)
{
   11500:	       subq.l #4,sp
	UNUSEDALL
	int obj;
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11502:	       movea.l 12(sp),a0
   11506:	       move.l 24(a0),d0
   1150a:	       move.l d0,-(sp)
   1150c:	       pea 7 <_start+0x7>
   11510:	       move.l sp,d0
   11512:	       addq.l #8,d0
   11514:	       move.l d0,-(sp)
   11516:	       jsr 147f4 <getValueType>
   1151c:	       lea 12(sp),sp
   11520:	       tst.w d0
   11522:	   /-- bne.s 11528 <builtIn_stopCharacter+0x28>
   11524:	   |   moveq #1,d0
   11526:	/--|-- bra.s 11560 <builtIn_stopCharacter+0x60>
	trimStack (&fun -> stack);
   11528:	|  \-> moveq #24,d0
   1152a:	|      add.l 12(sp),d0
   1152e:	|      move.l d0,-(sp)
   11530:	|      jsr 15178 <trimStack>
   11536:	|      addq.l #4,sp

	// Return value
	setVariable (&fun -> reg, SVT_INT, stopPerson (obj));
   11538:	|      move.l (sp),d0
   1153a:	|      move.l d0,-(sp)
   1153c:	|      jsr bd88 <stopPerson>
   11542:	|      addq.l #4,sp
   11544:	|      movea.w d0,a0
   11546:	|      moveq #28,d0
   11548:	|      add.l 12(sp),d0
   1154c:	|      move.l a0,-(sp)
   1154e:	|      pea 1 <_start+0x1>
   11552:	|      move.l d0,-(sp)
   11554:	|      jsr 150e6 <setVariable>
   1155a:	|      lea 12(sp),sp
	return BR_CONTINUE;
   1155e:	|      moveq #2,d0
}
   11560:	\----> addq.l #4,sp
   11562:	       rts

00011564 <builtIn_pasteCharacter>:
		fixScaleSprite (thisPerson -> x, thisPerson -> y, myAnim -> theSprites -> bank.sprites[abs (fNum)], myAnim -> theSprites -> bank.myPalette, thisPerson, 0, 0, fNum < 0);
		setVariable (&fun -> reg, SVT_INT, 1);
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
	} Todo: Amigize this*/
	KPrintF("Not implemented yet for Amiga");
   11564:	pea 19b8a <line.c.05397aaf+0x1fe>
   1156a:	jsr 17254 <KPrintF>
   11570:	addq.l #4,sp
	return BR_CONTINUE;
   11572:	moveq #2,d0
}
   11574:	rts

00011576 <builtIn_animate>:

builtIn(animate)
{
   11576:	       subq.l #8,sp
	UNUSEDALL
	int obj;
	struct personaAnimation * pp = getAnimationFromVar (&(fun -> stack -> thisVar));
   11578:	       movea.l 16(sp),a0
   1157c:	       move.l 24(a0),d0
   11580:	       move.l d0,-(sp)
   11582:	       jsr 14ccc <getAnimationFromVar>
   11588:	       addq.l #4,sp
   1158a:	       move.l d0,4(sp)
	if (pp == NULL) return BR_ERROR;
   1158e:	   /-- bne.s 11594 <builtIn_animate+0x1e>
   11590:	   |   moveq #1,d0
   11592:	/--|-- bra.s 11612 <builtIn_animate+0x9c>
	trimStack (&fun -> stack);
   11594:	|  \-> moveq #24,d0
   11596:	|      add.l 16(sp),d0
   1159a:	|      move.l d0,-(sp)
   1159c:	|      jsr 15178 <trimStack>
   115a2:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   115a4:	|      movea.l 16(sp),a0
   115a8:	|      move.l 24(a0),d0
   115ac:	|      move.l d0,-(sp)
   115ae:	|      pea 7 <_start+0x7>
   115b2:	|      move.l sp,d0
   115b4:	|      addq.l #8,d0
   115b6:	|      move.l d0,-(sp)
   115b8:	|      jsr 147f4 <getValueType>
   115be:	|      lea 12(sp),sp
   115c2:	|      tst.w d0
   115c4:	|  /-- bne.s 115ca <builtIn_animate+0x54>
   115c6:	|  |   moveq #1,d0
   115c8:	+--|-- bra.s 11612 <builtIn_animate+0x9c>
	trimStack (&fun -> stack);
   115ca:	|  \-> moveq #24,d0
   115cc:	|      add.l 16(sp),d0
   115d0:	|      move.l d0,-(sp)
   115d2:	|      jsr 15178 <trimStack>
   115d8:	|      addq.l #4,sp
	animatePerson (obj, pp);
   115da:	|      move.l (sp),d0
   115dc:	|      move.l 4(sp),-(sp)
   115e0:	|      move.l d0,-(sp)
   115e2:	|      jsr 94b8 <animatePerson>
   115e8:	|      addq.l #8,sp
	setVariable (&fun -> reg, SVT_INT, timeForAnim (pp));
   115ea:	|      move.l 4(sp),-(sp)
   115ee:	|      jsr bddc <timeForAnim>
   115f4:	|      addq.l #4,sp
   115f6:	|      move.l d0,d1
   115f8:	|      moveq #28,d0
   115fa:	|      add.l 16(sp),d0
   115fe:	|      move.l d1,-(sp)
   11600:	|      pea 1 <_start+0x1>
   11604:	|      move.l d0,-(sp)
   11606:	|      jsr 150e6 <setVariable>
   1160c:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11610:	|      moveq #2,d0
}
   11612:	\----> addq.l #8,sp
   11614:	       rts

00011616 <builtIn_setCostume>:

builtIn(setCostume)
{
   11616:	       subq.l #8,sp
	UNUSEDALL
	int obj;
	struct persona * pp = getCostumeFromVar(&(fun -> stack -> thisVar));
   11618:	       movea.l 16(sp),a0
   1161c:	       move.l 24(a0),d0
   11620:	       move.l d0,-(sp)
   11622:	       jsr 144a0 <getCostumeFromVar>
   11628:	       addq.l #4,sp
   1162a:	       move.l d0,4(sp)
	if (pp == NULL) return BR_ERROR;
   1162e:	   /-- bne.s 11634 <builtIn_setCostume+0x1e>
   11630:	   |   moveq #1,d0
   11632:	/--|-- bra.s 1168c <builtIn_setCostume+0x76>
	trimStack (&fun -> stack);
   11634:	|  \-> moveq #24,d0
   11636:	|      add.l 16(sp),d0
   1163a:	|      move.l d0,-(sp)
   1163c:	|      jsr 15178 <trimStack>
   11642:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11644:	|      movea.l 16(sp),a0
   11648:	|      move.l 24(a0),d0
   1164c:	|      move.l d0,-(sp)
   1164e:	|      pea 7 <_start+0x7>
   11652:	|      move.l sp,d0
   11654:	|      addq.l #8,d0
   11656:	|      move.l d0,-(sp)
   11658:	|      jsr 147f4 <getValueType>
   1165e:	|      lea 12(sp),sp
   11662:	|      tst.w d0
   11664:	|  /-- bne.s 1166a <builtIn_setCostume+0x54>
   11666:	|  |   moveq #1,d0
   11668:	+--|-- bra.s 1168c <builtIn_setCostume+0x76>
	trimStack (&fun -> stack);
   1166a:	|  \-> moveq #24,d0
   1166c:	|      add.l 16(sp),d0
   11670:	|      move.l d0,-(sp)
   11672:	|      jsr 15178 <trimStack>
   11678:	|      addq.l #4,sp
	animatePersonUsingPersona(obj, pp);
   1167a:	|      move.l (sp),d0
   1167c:	|      move.l 4(sp),-(sp)
   11680:	|      move.l d0,-(sp)
   11682:	|      jsr 9502 <animatePersonUsingPersona>
   11688:	|      addq.l #8,sp
	return BR_CONTINUE;
   1168a:	|      moveq #2,d0
}
   1168c:	\----> addq.l #8,sp
   1168e:	       rts

00011690 <builtIn_floatCharacter>:

builtIn(floatCharacter)
{
   11690:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11692:	       movea.l 16(sp),a0
   11696:	       move.l 24(a0),d0
   1169a:	       move.l d0,-(sp)
   1169c:	       pea 1 <_start+0x1>
   116a0:	       move.l sp,d0
   116a2:	       addq.l #8,d0
   116a4:	       move.l d0,-(sp)
   116a6:	       jsr 147f4 <getValueType>
   116ac:	       lea 12(sp),sp
   116b0:	       tst.w d0
   116b2:	   /-- bne.s 116b8 <builtIn_floatCharacter+0x28>
   116b4:	   |   moveq #1,d0
   116b6:	/--|-- bra.s 1172c <builtIn_floatCharacter+0x9c>
	trimStack (&fun -> stack);
   116b8:	|  \-> moveq #24,d0
   116ba:	|      add.l 16(sp),d0
   116be:	|      move.l d0,-(sp)
   116c0:	|      jsr 15178 <trimStack>
   116c6:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   116c8:	|      movea.l 16(sp),a0
   116cc:	|      move.l 24(a0),d0
   116d0:	|      move.l d0,-(sp)
   116d2:	|      pea 7 <_start+0x7>
   116d6:	|      moveq #12,d0
   116d8:	|      add.l sp,d0
   116da:	|      move.l d0,-(sp)
   116dc:	|      jsr 147f4 <getValueType>
   116e2:	|      lea 12(sp),sp
   116e6:	|      tst.w d0
   116e8:	|  /-- bne.s 116ee <builtIn_floatCharacter+0x5e>
   116ea:	|  |   moveq #1,d0
   116ec:	+--|-- bra.s 1172c <builtIn_floatCharacter+0x9c>
	trimStack (&fun -> stack);
   116ee:	|  \-> moveq #24,d0
   116f0:	|      add.l 16(sp),d0
   116f4:	|      move.l d0,-(sp)
   116f6:	|      jsr 15178 <trimStack>
   116fc:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, floatCharacter (di, obj));
   116fe:	|      move.l 4(sp),d1
   11702:	|      move.l (sp),d0
   11704:	|      move.l d1,-(sp)
   11706:	|      move.l d0,-(sp)
   11708:	|      jsr a676 <floatCharacter>
   1170e:	|      addq.l #8,sp
   11710:	|      movea.w d0,a0
   11712:	|      moveq #28,d0
   11714:	|      add.l 16(sp),d0
   11718:	|      move.l a0,-(sp)
   1171a:	|      pea 1 <_start+0x1>
   1171e:	|      move.l d0,-(sp)
   11720:	|      jsr 150e6 <setVariable>
   11726:	|      lea 12(sp),sp
	return BR_CONTINUE;
   1172a:	|      moveq #2,d0
}
   1172c:	\----> addq.l #8,sp
   1172e:	       rts

00011730 <builtIn_setCharacterWalkSpeed>:

builtIn(setCharacterWalkSpeed)
{
   11730:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11732:	       movea.l 16(sp),a0
   11736:	       move.l 24(a0),d0
   1173a:	       move.l d0,-(sp)
   1173c:	       pea 1 <_start+0x1>
   11740:	       move.l sp,d0
   11742:	       addq.l #8,d0
   11744:	       move.l d0,-(sp)
   11746:	       jsr 147f4 <getValueType>
   1174c:	       lea 12(sp),sp
   11750:	       tst.w d0
   11752:	   /-- bne.s 11758 <builtIn_setCharacterWalkSpeed+0x28>
   11754:	   |   moveq #1,d0
   11756:	/--|-- bra.s 117cc <builtIn_setCharacterWalkSpeed+0x9c>
	trimStack (&fun -> stack);
   11758:	|  \-> moveq #24,d0
   1175a:	|      add.l 16(sp),d0
   1175e:	|      move.l d0,-(sp)
   11760:	|      jsr 15178 <trimStack>
   11766:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11768:	|      movea.l 16(sp),a0
   1176c:	|      move.l 24(a0),d0
   11770:	|      move.l d0,-(sp)
   11772:	|      pea 7 <_start+0x7>
   11776:	|      moveq #12,d0
   11778:	|      add.l sp,d0
   1177a:	|      move.l d0,-(sp)
   1177c:	|      jsr 147f4 <getValueType>
   11782:	|      lea 12(sp),sp
   11786:	|      tst.w d0
   11788:	|  /-- bne.s 1178e <builtIn_setCharacterWalkSpeed+0x5e>
   1178a:	|  |   moveq #1,d0
   1178c:	+--|-- bra.s 117cc <builtIn_setCharacterWalkSpeed+0x9c>
	trimStack (&fun -> stack);
   1178e:	|  \-> moveq #24,d0
   11790:	|      add.l 16(sp),d0
   11794:	|      move.l d0,-(sp)
   11796:	|      jsr 15178 <trimStack>
   1179c:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, setCharacterWalkSpeed (di, obj));
   1179e:	|      move.l 4(sp),d1
   117a2:	|      move.l (sp),d0
   117a4:	|      move.l d1,-(sp)
   117a6:	|      move.l d0,-(sp)
   117a8:	|      jsr bbf0 <setCharacterWalkSpeed>
   117ae:	|      addq.l #8,sp
   117b0:	|      movea.w d0,a0
   117b2:	|      moveq #28,d0
   117b4:	|      add.l 16(sp),d0
   117b8:	|      move.l a0,-(sp)
   117ba:	|      pea 1 <_start+0x1>
   117be:	|      move.l d0,-(sp)
   117c0:	|      jsr 150e6 <setVariable>
   117c6:	|      lea 12(sp),sp
	return BR_CONTINUE;
   117ca:	|      moveq #2,d0
}
   117cc:	\----> addq.l #8,sp
   117ce:	       rts

000117d0 <builtIn_turnCharacter>:

builtIn(turnCharacter)
{
   117d0:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   117d2:	       movea.l 16(sp),a0
   117d6:	       move.l 24(a0),d0
   117da:	       move.l d0,-(sp)
   117dc:	       pea 1 <_start+0x1>
   117e0:	       move.l sp,d0
   117e2:	       addq.l #8,d0
   117e4:	       move.l d0,-(sp)
   117e6:	       jsr 147f4 <getValueType>
   117ec:	       lea 12(sp),sp
   117f0:	       tst.w d0
   117f2:	   /-- bne.s 117f8 <builtIn_turnCharacter+0x28>
   117f4:	   |   moveq #1,d0
   117f6:	/--|-- bra.s 1186c <builtIn_turnCharacter+0x9c>
	trimStack (&fun -> stack);
   117f8:	|  \-> moveq #24,d0
   117fa:	|      add.l 16(sp),d0
   117fe:	|      move.l d0,-(sp)
   11800:	|      jsr 15178 <trimStack>
   11806:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11808:	|      movea.l 16(sp),a0
   1180c:	|      move.l 24(a0),d0
   11810:	|      move.l d0,-(sp)
   11812:	|      pea 7 <_start+0x7>
   11816:	|      moveq #12,d0
   11818:	|      add.l sp,d0
   1181a:	|      move.l d0,-(sp)
   1181c:	|      jsr 147f4 <getValueType>
   11822:	|      lea 12(sp),sp
   11826:	|      tst.w d0
   11828:	|  /-- bne.s 1182e <builtIn_turnCharacter+0x5e>
   1182a:	|  |   moveq #1,d0
   1182c:	+--|-- bra.s 1186c <builtIn_turnCharacter+0x9c>
	trimStack (&fun -> stack);
   1182e:	|  \-> moveq #24,d0
   11830:	|      add.l 16(sp),d0
   11834:	|      move.l d0,-(sp)
   11836:	|      jsr 15178 <trimStack>
   1183c:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, turnPersonToFace (obj, di));
   1183e:	|      move.l (sp),d1
   11840:	|      move.l 4(sp),d0
   11844:	|      move.l d1,-(sp)
   11846:	|      move.l d0,-(sp)
   11848:	|      jsr be94 <turnPersonToFace>
   1184e:	|      addq.l #8,sp
   11850:	|      movea.w d0,a0
   11852:	|      moveq #28,d0
   11854:	|      add.l 16(sp),d0
   11858:	|      move.l a0,-(sp)
   1185a:	|      pea 1 <_start+0x1>
   1185e:	|      move.l d0,-(sp)
   11860:	|      jsr 150e6 <setVariable>
   11866:	|      lea 12(sp),sp
	return BR_CONTINUE;
   1186a:	|      moveq #2,d0
}
   1186c:	\----> addq.l #8,sp
   1186e:	       rts

00011870 <builtIn_setCharacterExtra>:

builtIn(setCharacterExtra)
{
   11870:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11872:	       movea.l 16(sp),a0
   11876:	       move.l 24(a0),d0
   1187a:	       move.l d0,-(sp)
   1187c:	       pea 1 <_start+0x1>
   11880:	       move.l sp,d0
   11882:	       addq.l #8,d0
   11884:	       move.l d0,-(sp)
   11886:	       jsr 147f4 <getValueType>
   1188c:	       lea 12(sp),sp
   11890:	       tst.w d0
   11892:	   /-- bne.s 11898 <builtIn_setCharacterExtra+0x28>
   11894:	   |   moveq #1,d0
   11896:	/--|-- bra.s 1190c <builtIn_setCharacterExtra+0x9c>
	trimStack (&fun -> stack);
   11898:	|  \-> moveq #24,d0
   1189a:	|      add.l 16(sp),d0
   1189e:	|      move.l d0,-(sp)
   118a0:	|      jsr 15178 <trimStack>
   118a6:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   118a8:	|      movea.l 16(sp),a0
   118ac:	|      move.l 24(a0),d0
   118b0:	|      move.l d0,-(sp)
   118b2:	|      pea 7 <_start+0x7>
   118b6:	|      moveq #12,d0
   118b8:	|      add.l sp,d0
   118ba:	|      move.l d0,-(sp)
   118bc:	|      jsr 147f4 <getValueType>
   118c2:	|      lea 12(sp),sp
   118c6:	|      tst.w d0
   118c8:	|  /-- bne.s 118ce <builtIn_setCharacterExtra+0x5e>
   118ca:	|  |   moveq #1,d0
   118cc:	+--|-- bra.s 1190c <builtIn_setCharacterExtra+0x9c>
	trimStack (&fun -> stack);
   118ce:	|  \-> moveq #24,d0
   118d0:	|      add.l 16(sp),d0
   118d4:	|      move.l d0,-(sp)
   118d6:	|      jsr 15178 <trimStack>
   118dc:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, setPersonExtra (obj, di));
   118de:	|      move.l (sp),d1
   118e0:	|      move.l 4(sp),d0
   118e4:	|      move.l d1,-(sp)
   118e6:	|      move.l d0,-(sp)
   118e8:	|      jsr bc1e <setPersonExtra>
   118ee:	|      addq.l #8,sp
   118f0:	|      movea.w d0,a0
   118f2:	|      moveq #28,d0
   118f4:	|      add.l 16(sp),d0
   118f8:	|      move.l a0,-(sp)
   118fa:	|      pea 1 <_start+0x1>
   118fe:	|      move.l d0,-(sp)
   11900:	|      jsr 150e6 <setVariable>
   11906:	|      lea 12(sp),sp
	return BR_CONTINUE;
   1190a:	|      moveq #2,d0
}
   1190c:	\----> addq.l #8,sp
   1190e:	       rts

00011910 <builtIn_removeCharacter>:

builtIn(removeCharacter)
{	
   11910:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11912:	       movea.l 12(sp),a0
   11916:	       move.l 24(a0),d0
   1191a:	       move.l d0,-(sp)
   1191c:	       pea 7 <_start+0x7>
   11920:	       move.l sp,d0
   11922:	       addq.l #8,d0
   11924:	       move.l d0,-(sp)
   11926:	       jsr 147f4 <getValueType>
   1192c:	       lea 12(sp),sp
   11930:	       tst.w d0
   11932:	   /-- bne.s 11938 <builtIn_removeCharacter+0x28>
   11934:	   |   moveq #1,d0
   11936:	/--|-- bra.s 11956 <builtIn_removeCharacter+0x46>
	trimStack (&fun -> stack);
   11938:	|  \-> moveq #24,d0
   1193a:	|      add.l 12(sp),d0
   1193e:	|      move.l d0,-(sp)
   11940:	|      jsr 15178 <trimStack>
   11946:	|      addq.l #4,sp
	removeOneCharacter (objectNumber);
   11948:	|      move.l (sp),d0
   1194a:	|      move.l d0,-(sp)
   1194c:	|      jsr ae1e <removeOneCharacter>
   11952:	|      addq.l #4,sp
	return BR_CONTINUE;
   11954:	|      moveq #2,d0
}
   11956:	\----> addq.l #4,sp
   11958:	       rts

0001195a <moveChr>:

static enum builtReturn moveChr(int numParams, struct loadedFunction * fun, BOOL force, BOOL immediate)
{
   1195a:	                lea -28(sp),sp
   1195e:	                move.l d2,-(sp)
   11960:	                move.l 44(sp),d1
   11964:	                move.l 48(sp),d0
   11968:	                move.w d1,d1
   1196a:	                move.w d1,6(sp)
   1196e:	                move.w d0,d0
   11970:	                move.w d0,4(sp)
	switch (numParams) {
   11974:	                moveq #2,d0
   11976:	                cmp.l 36(sp),d0
   1197a:	      /-------- beq.w 11abc <moveChr+0x162>
   1197e:	      |         moveq #3,d0
   11980:	      |         cmp.l 36(sp),d0
   11984:	/-----|-------- bne.w 11bf0 <moveChr+0x296>
		case 3:
		{
			int x, y, objectNumber;

			if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11988:	|     |         movea.l 40(sp),a0
   1198c:	|     |         move.l 24(a0),d0
   11990:	|     |         move.l d0,-(sp)
   11992:	|     |         pea 1 <_start+0x1>
   11996:	|     |         lea 20(sp),a0
   1199a:	|     |         move.l a0,-(sp)
   1199c:	|     |         jsr 147f4 <getValueType>
   119a2:	|     |         lea 12(sp),sp
   119a6:	|     |         tst.w d0
   119a8:	|     |     /-- bne.s 119b0 <moveChr+0x56>
   119aa:	|     |     |   moveq #1,d0
   119ac:	|  /--|-----|-- bra.w 11c00 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   119b0:	|  |  |     \-> moveq #24,d0
   119b2:	|  |  |         add.l 40(sp),d0
   119b6:	|  |  |         move.l d0,-(sp)
   119b8:	|  |  |         jsr 15178 <trimStack>
   119be:	|  |  |         addq.l #4,sp
			if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   119c0:	|  |  |         movea.l 40(sp),a0
   119c4:	|  |  |         move.l 24(a0),d0
   119c8:	|  |  |         move.l d0,-(sp)
   119ca:	|  |  |         pea 1 <_start+0x1>
   119ce:	|  |  |         lea 24(sp),a0
   119d2:	|  |  |         move.l a0,-(sp)
   119d4:	|  |  |         jsr 147f4 <getValueType>
   119da:	|  |  |         lea 12(sp),sp
   119de:	|  |  |         tst.w d0
   119e0:	|  |  |     /-- bne.s 119e8 <moveChr+0x8e>
   119e2:	|  |  |     |   moveq #1,d0
   119e4:	|  +--|-----|-- bra.w 11c00 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   119e8:	|  |  |     \-> moveq #24,d0
   119ea:	|  |  |         add.l 40(sp),d0
   119ee:	|  |  |         move.l d0,-(sp)
   119f0:	|  |  |         jsr 15178 <trimStack>
   119f6:	|  |  |         addq.l #4,sp
			if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   119f8:	|  |  |         movea.l 40(sp),a0
   119fc:	|  |  |         move.l 24(a0),d0
   11a00:	|  |  |         move.l d0,-(sp)
   11a02:	|  |  |         pea 7 <_start+0x7>
   11a06:	|  |  |         lea 16(sp),a0
   11a0a:	|  |  |         move.l a0,-(sp)
   11a0c:	|  |  |         jsr 147f4 <getValueType>
   11a12:	|  |  |         lea 12(sp),sp
   11a16:	|  |  |         tst.w d0
   11a18:	|  |  |     /-- bne.s 11a20 <moveChr+0xc6>
   11a1a:	|  |  |     |   moveq #1,d0
   11a1c:	|  +--|-----|-- bra.w 11c00 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   11a20:	|  |  |     \-> moveq #24,d0
   11a22:	|  |  |         add.l 40(sp),d0
   11a26:	|  |  |         move.l d0,-(sp)
   11a28:	|  |  |         jsr 15178 <trimStack>
   11a2e:	|  |  |         addq.l #4,sp

			if (force) {
   11a30:	|  |  |         tst.w 6(sp)
   11a34:	|  |  |     /-- beq.s 11a64 <moveChr+0x10a>
				if (forceWalkingPerson (x, y, objectNumber, fun, -1)) return BR_PAUSE;
   11a36:	|  |  |     |   movea.l 8(sp),a0
   11a3a:	|  |  |     |   move.l 12(sp),d1
   11a3e:	|  |  |     |   move.l 16(sp),d0
   11a42:	|  |  |     |   pea ffffffff <gcc8_c_support.c.1fed348d+0xfffb4d7e>
   11a46:	|  |  |     |   move.l 44(sp),-(sp)
   11a4a:	|  |  |     |   move.l a0,-(sp)
   11a4c:	|  |  |     |   move.l d1,-(sp)
   11a4e:	|  |  |     |   move.l d0,-(sp)
   11a50:	|  |  |     |   jsr a69a <forceWalkingPerson>
   11a56:	|  |  |     |   lea 20(sp),sp
   11a5a:	|  |  |     |   tst.w d0
   11a5c:	|  |  |  /--|-- beq.s 11ab6 <moveChr+0x15c>
   11a5e:	|  |  |  |  |   moveq #3,d0
   11a60:	|  +--|--|--|-- bra.w 11c00 <moveChr+0x2a6>
			} else if (immediate) {
   11a64:	|  |  |  |  \-> tst.w 4(sp)
   11a68:	|  |  |  |  /-- beq.s 11a88 <moveChr+0x12e>
				jumpPerson (x, y, objectNumber);
   11a6a:	|  |  |  |  |   movea.l 8(sp),a0
   11a6e:	|  |  |  |  |   move.l 12(sp),d1
   11a72:	|  |  |  |  |   move.l 16(sp),d0
   11a76:	|  |  |  |  |   move.l a0,-(sp)
   11a78:	|  |  |  |  |   move.l d1,-(sp)
   11a7a:	|  |  |  |  |   move.l d0,-(sp)
   11a7c:	|  |  |  |  |   jsr a9a2 <jumpPerson>
   11a82:	|  |  |  |  |   lea 12(sp),sp
   11a86:	|  |  |  +--|-- bra.s 11ab6 <moveChr+0x15c>
			} else {
				if (makeWalkingPerson (x, y, objectNumber, fun, -1)) return BR_PAUSE;
   11a88:	|  |  |  |  \-> movea.l 8(sp),a0
   11a8c:	|  |  |  |      move.l 12(sp),d1
   11a90:	|  |  |  |      move.l 16(sp),d0
   11a94:	|  |  |  |      pea ffffffff <gcc8_c_support.c.1fed348d+0xfffb4d7e>
   11a98:	|  |  |  |      move.l 44(sp),-(sp)
   11a9c:	|  |  |  |      move.l a0,-(sp)
   11a9e:	|  |  |  |      move.l d1,-(sp)
   11aa0:	|  |  |  |      move.l d0,-(sp)
   11aa2:	|  |  |  |      jsr ab72 <makeWalkingPerson>
   11aa8:	|  |  |  |      lea 20(sp),sp
   11aac:	|  |  |  |      tst.w d0
   11aae:	|  |  |  +----- beq.s 11ab6 <moveChr+0x15c>
   11ab0:	|  |  |  |      moveq #3,d0
   11ab2:	|  +--|--|----- bra.w 11c00 <moveChr+0x2a6>
			}
			return BR_CONTINUE;
   11ab6:	|  |  |  \----> moveq #2,d0
   11ab8:	|  +--|-------- bra.w 11c00 <moveChr+0x2a6>
		case 2:
		{
			int toObj, objectNumber;
			struct screenRegion * reggie;

			if (! getValueType(&toObj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11abc:	|  |  \-------> movea.l 40(sp),a0
   11ac0:	|  |            move.l 24(a0),d0
   11ac4:	|  |            move.l d0,-(sp)
   11ac6:	|  |            pea 7 <_start+0x7>
   11aca:	|  |            moveq #32,d0
   11acc:	|  |            add.l sp,d0
   11ace:	|  |            move.l d0,-(sp)
   11ad0:	|  |            jsr 147f4 <getValueType>
   11ad6:	|  |            lea 12(sp),sp
   11ada:	|  |            tst.w d0
   11adc:	|  |        /-- bne.s 11ae4 <moveChr+0x18a>
   11ade:	|  |        |   moveq #1,d0
   11ae0:	|  +--------|-- bra.w 11c00 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   11ae4:	|  |        \-> moveq #24,d0
   11ae6:	|  |            add.l 40(sp),d0
   11aea:	|  |            move.l d0,-(sp)
   11aec:	|  |            jsr 15178 <trimStack>
   11af2:	|  |            addq.l #4,sp
			if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11af4:	|  |            movea.l 40(sp),a0
   11af8:	|  |            move.l 24(a0),d0
   11afc:	|  |            move.l d0,-(sp)
   11afe:	|  |            pea 7 <_start+0x7>
   11b02:	|  |            lea 28(sp),a0
   11b06:	|  |            move.l a0,-(sp)
   11b08:	|  |            jsr 147f4 <getValueType>
   11b0e:	|  |            lea 12(sp),sp
   11b12:	|  |            tst.w d0
   11b14:	|  |        /-- bne.s 11b1c <moveChr+0x1c2>
   11b16:	|  |        |   moveq #1,d0
   11b18:	|  +--------|-- bra.w 11c00 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   11b1c:	|  |        \-> moveq #24,d0
   11b1e:	|  |            add.l 40(sp),d0
   11b22:	|  |            move.l d0,-(sp)
   11b24:	|  |            jsr 15178 <trimStack>
   11b2a:	|  |            addq.l #4,sp
			reggie = getRegionForObject (toObj);
   11b2c:	|  |            move.l 24(sp),d0
   11b30:	|  |            move.l d0,-(sp)
   11b32:	|  |            jsr 15a36 <getRegionForObject>
   11b38:	|  |            addq.l #4,sp
   11b3a:	|  |            move.l d0,28(sp)
			if (reggie == NULL) return BR_CONTINUE;
   11b3e:	|  |        /-- bne.s 11b46 <moveChr+0x1ec>
   11b40:	|  |        |   moveq #2,d0
   11b42:	|  +--------|-- bra.w 11c00 <moveChr+0x2a6>

			if (force)
   11b46:	|  |        \-> tst.w 6(sp)
   11b4a:	|  |        /-- beq.s 11b86 <moveChr+0x22c>
			{
				if (forceWalkingPerson (reggie -> sX, reggie -> sY,	objectNumber, fun, reggie -> di)) return BR_PAUSE;
   11b4c:	|  |        |   movea.l 28(sp),a0
   11b50:	|  |        |   move.l 24(a0),d2
   11b54:	|  |        |   movea.l 20(sp),a1
   11b58:	|  |        |   movea.l 28(sp),a0
   11b5c:	|  |        |   move.l 20(a0),d1
   11b60:	|  |        |   movea.l 28(sp),a0
   11b64:	|  |        |   move.l 16(a0),d0
   11b68:	|  |        |   move.l d2,-(sp)
   11b6a:	|  |        |   move.l 44(sp),-(sp)
   11b6e:	|  |        |   move.l a1,-(sp)
   11b70:	|  |        |   move.l d1,-(sp)
   11b72:	|  |        |   move.l d0,-(sp)
   11b74:	|  |        |   jsr a69a <forceWalkingPerson>
   11b7a:	|  |        |   lea 20(sp),sp
   11b7e:	|  |        |   tst.w d0
   11b80:	|  |     /--|-- beq.s 11bec <moveChr+0x292>
   11b82:	|  |     |  |   moveq #3,d0
   11b84:	|  +-----|--|-- bra.s 11c00 <moveChr+0x2a6>
			}
			else if (immediate)
   11b86:	|  |     |  \-> tst.w 4(sp)
   11b8a:	|  |     |  /-- beq.s 11bb2 <moveChr+0x258>
			{
				jumpPerson (reggie -> sX, reggie -> sY,	objectNumber);
   11b8c:	|  |     |  |   movea.l 20(sp),a1
   11b90:	|  |     |  |   movea.l 28(sp),a0
   11b94:	|  |     |  |   move.l 20(a0),d1
   11b98:	|  |     |  |   movea.l 28(sp),a0
   11b9c:	|  |     |  |   move.l 16(a0),d0
   11ba0:	|  |     |  |   move.l a1,-(sp)
   11ba2:	|  |     |  |   move.l d1,-(sp)
   11ba4:	|  |     |  |   move.l d0,-(sp)
   11ba6:	|  |     |  |   jsr a9a2 <jumpPerson>
   11bac:	|  |     |  |   lea 12(sp),sp
   11bb0:	|  |     +--|-- bra.s 11bec <moveChr+0x292>
			}
			else
			{
				if (makeWalkingPerson (reggie -> sX, reggie -> sY, objectNumber, fun, reggie -> di)) return BR_PAUSE;
   11bb2:	|  |     |  \-> movea.l 28(sp),a0
   11bb6:	|  |     |      move.l 24(a0),d2
   11bba:	|  |     |      movea.l 20(sp),a1
   11bbe:	|  |     |      movea.l 28(sp),a0
   11bc2:	|  |     |      move.l 20(a0),d1
   11bc6:	|  |     |      movea.l 28(sp),a0
   11bca:	|  |     |      move.l 16(a0),d0
   11bce:	|  |     |      move.l d2,-(sp)
   11bd0:	|  |     |      move.l 44(sp),-(sp)
   11bd4:	|  |     |      move.l a1,-(sp)
   11bd6:	|  |     |      move.l d1,-(sp)
   11bd8:	|  |     |      move.l d0,-(sp)
   11bda:	|  |     |      jsr ab72 <makeWalkingPerson>
   11be0:	|  |     |      lea 20(sp),sp
   11be4:	|  |     |      tst.w d0
   11be6:	|  |     +----- beq.s 11bec <moveChr+0x292>
   11be8:	|  |     |      moveq #3,d0
   11bea:	|  +-----|----- bra.s 11c00 <moveChr+0x2a6>
			}
			return BR_CONTINUE;
   11bec:	|  |     \----> moveq #2,d0
   11bee:	|  +----------- bra.s 11c00 <moveChr+0x2a6>
		}

		default:
			KPrintF ("Built-in function must have either 2 or 3 parameters.");
   11bf0:	\--|----------> pea 19ba8 <line.c.05397aaf+0x21c>
   11bf6:	   |            jsr 17254 <KPrintF>
   11bfc:	   |            addq.l #4,sp
			return BR_ERROR;
   11bfe:	   |            moveq #1,d0
	}
}
   11c00:	   \----------> move.l (sp)+,d2
   11c02:	                lea 28(sp),sp
   11c06:	                rts

00011c08 <builtIn_moveCharacter>:

builtIn(moveCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, FALSE, FALSE);
   11c08:	clr.l -(sp)
   11c0a:	clr.l -(sp)
   11c0c:	move.l 16(sp),-(sp)
   11c10:	move.l 16(sp),-(sp)
   11c14:	jsr 1195a <moveChr>
   11c1a:	lea 16(sp),sp
}
   11c1e:	rts

00011c20 <builtIn_forceCharacter>:

builtIn(forceCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, TRUE, FALSE);
   11c20:	clr.l -(sp)
   11c22:	pea 1 <_start+0x1>
   11c26:	move.l 16(sp),-(sp)
   11c2a:	move.l 16(sp),-(sp)
   11c2e:	jsr 1195a <moveChr>
   11c34:	lea 16(sp),sp
}
   11c38:	rts

00011c3a <builtIn_jumpCharacter>:

builtIn(jumpCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, FALSE, TRUE);
   11c3a:	pea 1 <_start+0x1>
   11c3e:	clr.l -(sp)
   11c40:	move.l 16(sp),-(sp)
   11c44:	move.l 16(sp),-(sp)
   11c48:	jsr 1195a <moveChr>
   11c4e:	lea 16(sp),sp
}
   11c52:	rts

00011c54 <builtIn_clearStatus>:

builtIn(clearStatus)
{
	UNUSEDALL
	clearStatusBar ();
   11c54:	jsr 791c <clearStatusBar>
	return BR_CONTINUE;
   11c5a:	moveq #2,d0
}
   11c5c:	rts

00011c5e <builtIn_removeLastStatus>:

builtIn(removeLastStatus)
{
	UNUSEDALL
	killLastStatus ();
   11c5e:	jsr 79c4 <killLastStatus>
	return BR_CONTINUE;
   11c64:	moveq #2,d0
}
   11c66:	rts

00011c68 <builtIn_addStatus>:

builtIn(addStatus)
{
	UNUSEDALL
	addStatusBar ();
   11c68:	jsr 78b2 <addStatusBar>
	return BR_CONTINUE;
   11c6e:	moveq #2,d0
}
   11c70:	rts

00011c72 <builtIn_statusText>:

builtIn(statusText)
{
   11c72:	       subq.l #8,sp
   11c74:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar(&(fun->stack->thisVar));
   11c76:	       movea.l 20(sp),a0
   11c7a:	       move.l 24(a0),d0
   11c7e:	       move.l d0,-(sp)
   11c80:	       jsr 14dca <getTextFromAnyVar>
   11c86:	       addq.l #4,sp
   11c88:	       move.l d0,8(sp)
	if (!newText) return BR_ERROR;
   11c8c:	   /-- bne.s 11c92 <builtIn_statusText+0x20>
   11c8e:	   |   moveq #1,d0
   11c90:	/--|-- bra.s 11cc6 <builtIn_statusText+0x54>
	trimStack(&fun->stack);
   11c92:	|  \-> moveq #24,d0
   11c94:	|      add.l 20(sp),d0
   11c98:	|      move.l d0,-(sp)
   11c9a:	|      jsr 15178 <trimStack>
   11ca0:	|      addq.l #4,sp
	setStatusBar(newText);
   11ca2:	|      move.l 8(sp),-(sp)
   11ca6:	|      jsr 7c44 <setStatusBar>
   11cac:	|      addq.l #4,sp
	FreeVec(newText);
   11cae:	|      move.l 8(sp),4(sp)
   11cb4:	|      move.l 1c9ca <SysBase>,d0
   11cba:	|      movea.l d0,a6
   11cbc:	|      movea.l 4(sp),a1
   11cc0:	|      jsr -690(a6)
	return BR_CONTINUE;
   11cc4:	|      moveq #2,d0
}
   11cc6:	\----> movea.l (sp)+,a6
   11cc8:	       addq.l #8,sp
   11cca:	       rts

00011ccc <builtIn_lightStatus>:

builtIn(lightStatus)
{
   11ccc:	       subq.l #4,sp
	UNUSEDALL
	int val;
	if (! getValueType(&val, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11cce:	       movea.l 12(sp),a0
   11cd2:	       move.l 24(a0),d0
   11cd6:	       move.l d0,-(sp)
   11cd8:	       pea 1 <_start+0x1>
   11cdc:	       move.l sp,d0
   11cde:	       addq.l #8,d0
   11ce0:	       move.l d0,-(sp)
   11ce2:	       jsr 147f4 <getValueType>
   11ce8:	       lea 12(sp),sp
   11cec:	       tst.w d0
   11cee:	   /-- bne.s 11cf4 <builtIn_lightStatus+0x28>
   11cf0:	   |   moveq #1,d0
   11cf2:	/--|-- bra.s 11d12 <builtIn_lightStatus+0x46>
	trimStack (&fun -> stack);
   11cf4:	|  \-> moveq #24,d0
   11cf6:	|      add.l 12(sp),d0
   11cfa:	|      move.l d0,-(sp)
   11cfc:	|      jsr 15178 <trimStack>
   11d02:	|      addq.l #4,sp
	setLitStatus (val);
   11d04:	|      move.l (sp),d0
   11d06:	|      move.l d0,-(sp)
   11d08:	|      jsr 7c34 <setLitStatus>
   11d0e:	|      addq.l #4,sp
	return BR_CONTINUE;
   11d10:	|      moveq #2,d0
}
   11d12:	\----> addq.l #4,sp
   11d14:	       rts

00011d16 <builtIn_positionStatus>:

builtIn(positionStatus)
{
   11d16:	       subq.l #8,sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11d18:	       movea.l 16(sp),a0
   11d1c:	       move.l 24(a0),d0
   11d20:	       move.l d0,-(sp)
   11d22:	       pea 1 <_start+0x1>
   11d26:	       move.l sp,d0
   11d28:	       addq.l #8,d0
   11d2a:	       move.l d0,-(sp)
   11d2c:	       jsr 147f4 <getValueType>
   11d32:	       lea 12(sp),sp
   11d36:	       tst.w d0
   11d38:	   /-- bne.s 11d3e <builtIn_positionStatus+0x28>
   11d3a:	   |   moveq #1,d0
   11d3c:	/--|-- bra.s 11d98 <builtIn_positionStatus+0x82>
	trimStack (&fun -> stack);
   11d3e:	|  \-> moveq #24,d0
   11d40:	|      add.l 16(sp),d0
   11d44:	|      move.l d0,-(sp)
   11d46:	|      jsr 15178 <trimStack>
   11d4c:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11d4e:	|      movea.l 16(sp),a0
   11d52:	|      move.l 24(a0),d0
   11d56:	|      move.l d0,-(sp)
   11d58:	|      pea 1 <_start+0x1>
   11d5c:	|      moveq #12,d0
   11d5e:	|      add.l sp,d0
   11d60:	|      move.l d0,-(sp)
   11d62:	|      jsr 147f4 <getValueType>
   11d68:	|      lea 12(sp),sp
   11d6c:	|      tst.w d0
   11d6e:	|  /-- bne.s 11d74 <builtIn_positionStatus+0x5e>
   11d70:	|  |   moveq #1,d0
   11d72:	+--|-- bra.s 11d98 <builtIn_positionStatus+0x82>
	trimStack (&fun -> stack);
   11d74:	|  \-> moveq #24,d0
   11d76:	|      add.l 16(sp),d0
   11d7a:	|      move.l d0,-(sp)
   11d7c:	|      jsr 15178 <trimStack>
   11d82:	|      addq.l #4,sp
	positionStatus (x, y);
   11d84:	|      move.l (sp),d1
   11d86:	|      move.l 4(sp),d0
   11d8a:	|      move.l d1,-(sp)
   11d8c:	|      move.l d0,-(sp)
   11d8e:	|      jsr 7a26 <positionStatus>
   11d94:	|      addq.l #8,sp
	return BR_CONTINUE;
   11d96:	|      moveq #2,d0
}
   11d98:	\----> addq.l #8,sp
   11d9a:	       rts

00011d9c <builtIn_alignStatus>:

builtIn(alignStatus)
{
   11d9c:	       subq.l #4,sp
	UNUSEDALL
	int val;
	if (! getValueType(&val, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11d9e:	       movea.l 12(sp),a0
   11da2:	       move.l 24(a0),d0
   11da6:	       move.l d0,-(sp)
   11da8:	       pea 1 <_start+0x1>
   11dac:	       move.l sp,d0
   11dae:	       addq.l #8,d0
   11db0:	       move.l d0,-(sp)
   11db2:	       jsr 147f4 <getValueType>
   11db8:	       lea 12(sp),sp
   11dbc:	       tst.w d0
   11dbe:	   /-- bne.s 11dc4 <builtIn_alignStatus+0x28>
   11dc0:	   |   moveq #1,d0
   11dc2:	/--|-- bra.s 11de4 <builtIn_alignStatus+0x48>
	trimStack (&fun -> stack);
   11dc4:	|  \-> moveq #24,d0
   11dc6:	|      add.l 12(sp),d0
   11dca:	|      move.l d0,-(sp)
   11dcc:	|      jsr 15178 <trimStack>
   11dd2:	|      addq.l #4,sp
	nowStatus -> alignStatus = (short) val;
   11dd4:	|      move.l (sp),d0
   11dd6:	|      movea.l 1c350 <nowStatus>,a0
   11ddc:	|      move.l d0,d0
   11dde:	|      move.w d0,4(a0)
	return BR_CONTINUE;
   11de2:	|      moveq #2,d0
}
   11de4:	\----> addq.l #4,sp
   11de6:	       rts

00011de8 <getFuncNumForCallback>:

static BOOL getFuncNumForCallback(int numParams, struct loadedFunction * fun, int *functionNum)
{
	switch (numParams) {
   11de8:	             tst.l 4(sp)
   11dec:	      /----- beq.s 11df8 <getFuncNumForCallback+0x10>
   11dee:	      |      moveq #1,d0
   11df0:	      |      cmp.l 4(sp),d0
   11df4:	      |  /-- beq.s 11dfe <getFuncNumForCallback+0x16>
   11df6:	   /--|--|-- bra.s 11e34 <getFuncNumForCallback+0x4c>
		case 0:
			functionNum = 0;
   11df8:	   |  \--|-> clr.l 12(sp)
			break;
   11dfc:	/--|-----|-- bra.s 11e46 <getFuncNumForCallback+0x5e>

		case 1:
			if (! getValueType(functionNum, SVT_FUNC,&fun -> stack -> thisVar)) return FALSE;
   11dfe:	|  |     \-> movea.l 8(sp),a0
   11e02:	|  |         move.l 24(a0),d0
   11e06:	|  |         move.l d0,-(sp)
   11e08:	|  |         pea 2 <_start+0x2>
   11e0c:	|  |         move.l 20(sp),-(sp)
   11e10:	|  |         jsr 147f4 <getValueType>
   11e16:	|  |         lea 12(sp),sp
   11e1a:	|  |         tst.w d0
   11e1c:	|  |     /-- bne.s 11e22 <getFuncNumForCallback+0x3a>
   11e1e:	|  |     |   clr.w d0
   11e20:	|  |  /--|-- bra.s 11e48 <getFuncNumForCallback+0x60>
			trimStack (&fun -> stack);
   11e22:	|  |  |  \-> moveq #24,d0
   11e24:	|  |  |      add.l 8(sp),d0
   11e28:	|  |  |      move.l d0,-(sp)
   11e2a:	|  |  |      jsr 15178 <trimStack>
   11e30:	|  |  |      addq.l #4,sp
			break;
   11e32:	+--|--|----- bra.s 11e46 <getFuncNumForCallback+0x5e>

		default:
			KPrintF ("Too many parameters.");
   11e34:	|  \--|----> pea 19bde <line.c.05397aaf+0x252>
   11e3a:	|     |      jsr 17254 <KPrintF>
   11e40:	|     |      addq.l #4,sp
			return FALSE;
   11e42:	|     |      clr.w d0
   11e44:	|     +----- bra.s 11e48 <getFuncNumForCallback+0x60>
	}
	return TRUE;
   11e46:	\-----|----> moveq #1,d0
}
   11e48:	      \----> rts

00011e4a <builtIn_onLeftMouse>:

builtIn (onLeftMouse)
{
   11e4a:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11e4c:	       move.l sp,d0
   11e4e:	       move.l d0,-(sp)
   11e50:	       move.l 16(sp),-(sp)
   11e54:	       move.l 16(sp),-(sp)
   11e58:	       jsr 11de8 <getFuncNumForCallback>
   11e5e:	       lea 12(sp),sp
   11e62:	       tst.w d0
   11e64:	/----- beq.s 11e74 <builtIn_onLeftMouse+0x2a>
	{
		currentEvents -> leftMouseFunction = functionNum;
   11e66:	|      movea.l 1c342 <currentEvents>,a0
   11e6c:	|      move.l (sp),d0
   11e6e:	|      move.l d0,(a0)
		return BR_CONTINUE;
   11e70:	|      moveq #2,d0
   11e72:	|  /-- bra.s 11e76 <builtIn_onLeftMouse+0x2c>
	}
	return BR_ERROR;
   11e74:	\--|-> moveq #1,d0
}
   11e76:	   \-> addq.l #4,sp
   11e78:	       rts

00011e7a <builtIn_onLeftMouseUp>:

builtIn (onLeftMouseUp)
{
   11e7a:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11e7c:	       move.l sp,d0
   11e7e:	       move.l d0,-(sp)
   11e80:	       move.l 16(sp),-(sp)
   11e84:	       move.l 16(sp),-(sp)
   11e88:	       jsr 11de8 <getFuncNumForCallback>
   11e8e:	       lea 12(sp),sp
   11e92:	       tst.w d0
   11e94:	/----- beq.s 11ea6 <builtIn_onLeftMouseUp+0x2c>
	{
		currentEvents -> leftMouseUpFunction = functionNum;
   11e96:	|      movea.l 1c342 <currentEvents>,a0
   11e9c:	|      move.l (sp),d0
   11e9e:	|      move.l d0,4(a0)
		return BR_CONTINUE;
   11ea2:	|      moveq #2,d0
   11ea4:	|  /-- bra.s 11ea8 <builtIn_onLeftMouseUp+0x2e>
	}
	return BR_ERROR;
   11ea6:	\--|-> moveq #1,d0
}
   11ea8:	   \-> addq.l #4,sp
   11eaa:	       rts

00011eac <builtIn_onRightMouse>:

builtIn (onRightMouse)
{
   11eac:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11eae:	       move.l sp,d0
   11eb0:	       move.l d0,-(sp)
   11eb2:	       move.l 16(sp),-(sp)
   11eb6:	       move.l 16(sp),-(sp)
   11eba:	       jsr 11de8 <getFuncNumForCallback>
   11ec0:	       lea 12(sp),sp
   11ec4:	       tst.w d0
   11ec6:	/----- beq.s 11ed8 <builtIn_onRightMouse+0x2c>
	{
		currentEvents -> rightMouseFunction = functionNum;
   11ec8:	|      movea.l 1c342 <currentEvents>,a0
   11ece:	|      move.l (sp),d0
   11ed0:	|      move.l d0,8(a0)
		return BR_CONTINUE;
   11ed4:	|      moveq #2,d0
   11ed6:	|  /-- bra.s 11eda <builtIn_onRightMouse+0x2e>
	}
	return BR_ERROR;
   11ed8:	\--|-> moveq #1,d0
}
   11eda:	   \-> addq.l #4,sp
   11edc:	       rts

00011ede <builtIn_onRightMouseUp>:

builtIn (onRightMouseUp)
{
   11ede:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11ee0:	       move.l sp,d0
   11ee2:	       move.l d0,-(sp)
   11ee4:	       move.l 16(sp),-(sp)
   11ee8:	       move.l 16(sp),-(sp)
   11eec:	       jsr 11de8 <getFuncNumForCallback>
   11ef2:	       lea 12(sp),sp
   11ef6:	       tst.w d0
   11ef8:	/----- beq.s 11f0a <builtIn_onRightMouseUp+0x2c>
	{
		currentEvents -> rightMouseUpFunction = functionNum;
   11efa:	|      movea.l 1c342 <currentEvents>,a0
   11f00:	|      move.l (sp),d0
   11f02:	|      move.l d0,12(a0)
		return BR_CONTINUE;
   11f06:	|      moveq #2,d0
   11f08:	|  /-- bra.s 11f0c <builtIn_onRightMouseUp+0x2e>
	}
	return BR_ERROR;
   11f0a:	\--|-> moveq #1,d0
}
   11f0c:	   \-> addq.l #4,sp
   11f0e:	       rts

00011f10 <builtIn_onFocusChange>:

builtIn (onFocusChange)
{
   11f10:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11f12:	       move.l sp,d0
   11f14:	       move.l d0,-(sp)
   11f16:	       move.l 16(sp),-(sp)
   11f1a:	       move.l 16(sp),-(sp)
   11f1e:	       jsr 11de8 <getFuncNumForCallback>
   11f24:	       lea 12(sp),sp
   11f28:	       tst.w d0
   11f2a:	/----- beq.s 11f3c <builtIn_onFocusChange+0x2c>
	{
		currentEvents -> focusFunction = functionNum;
   11f2c:	|      movea.l 1c342 <currentEvents>,a0
   11f32:	|      move.l (sp),d0
   11f34:	|      move.l d0,20(a0)
		return BR_CONTINUE;
   11f38:	|      moveq #2,d0
   11f3a:	|  /-- bra.s 11f3e <builtIn_onFocusChange+0x2e>
	}
	return BR_ERROR;
   11f3c:	\--|-> moveq #1,d0
}
   11f3e:	   \-> addq.l #4,sp
   11f40:	       rts

00011f42 <builtIn_onMoveMouse>:

builtIn (onMoveMouse)
{
   11f42:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11f44:	       move.l sp,d0
   11f46:	       move.l d0,-(sp)
   11f48:	       move.l 16(sp),-(sp)
   11f4c:	       move.l 16(sp),-(sp)
   11f50:	       jsr 11de8 <getFuncNumForCallback>
   11f56:	       lea 12(sp),sp
   11f5a:	       tst.w d0
   11f5c:	/----- beq.s 11f6e <builtIn_onMoveMouse+0x2c>
	{
		currentEvents -> moveMouseFunction = functionNum;
   11f5e:	|      movea.l 1c342 <currentEvents>,a0
   11f64:	|      move.l (sp),d0
   11f66:	|      move.l d0,16(a0)
		return BR_CONTINUE;
   11f6a:	|      moveq #2,d0
   11f6c:	|  /-- bra.s 11f70 <builtIn_onMoveMouse+0x2e>
	}
	return BR_ERROR;
   11f6e:	\--|-> moveq #1,d0
}
   11f70:	   \-> addq.l #4,sp
   11f72:	       rts

00011f74 <builtIn_onKeyboard>:

builtIn (onKeyboard)
{
   11f74:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11f76:	       move.l sp,d0
   11f78:	       move.l d0,-(sp)
   11f7a:	       move.l 16(sp),-(sp)
   11f7e:	       move.l 16(sp),-(sp)
   11f82:	       jsr 11de8 <getFuncNumForCallback>
   11f88:	       lea 12(sp),sp
   11f8c:	       tst.w d0
   11f8e:	/----- beq.s 11fa0 <builtIn_onKeyboard+0x2c>
	{
		currentEvents -> spaceFunction = functionNum;
   11f90:	|      movea.l 1c342 <currentEvents>,a0
   11f96:	|      move.l (sp),d0
   11f98:	|      move.l d0,24(a0)
		return BR_CONTINUE;
   11f9c:	|      moveq #2,d0
   11f9e:	|  /-- bra.s 11fa2 <builtIn_onKeyboard+0x2e>
	}
	return BR_ERROR;
   11fa0:	\--|-> moveq #1,d0
}
   11fa2:	   \-> addq.l #4,sp
   11fa4:	       rts

00011fa6 <builtIn_spawnSub>:

builtIn (spawnSub)
{
   11fa6:	          subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11fa8:	          move.l sp,d0
   11faa:	          move.l d0,-(sp)
   11fac:	          move.l 16(sp),-(sp)
   11fb0:	          move.l 16(sp),-(sp)
   11fb4:	          jsr 11de8 <getFuncNumForCallback>
   11fba:	          lea 12(sp),sp
   11fbe:	          tst.w d0
   11fc0:	/-------- beq.s 11fec <builtIn_spawnSub+0x46>
	{
		if (! startNewFunctionNum (functionNum, 0, NULL, noStack, TRUE)) return BR_ERROR;
   11fc2:	|         move.l 1c99a <noStack>,d1
   11fc8:	|         move.l (sp),d0
   11fca:	|         pea 1 <_start+0x1>
   11fce:	|         move.l d1,-(sp)
   11fd0:	|         clr.l -(sp)
   11fd2:	|         clr.l -(sp)
   11fd4:	|         move.l d0,-(sp)
   11fd6:	|         jsr 6af6 <startNewFunctionNum>
   11fdc:	|         lea 20(sp),sp
   11fe0:	|         tst.l d0
   11fe2:	|     /-- bne.s 11fe8 <builtIn_spawnSub+0x42>
   11fe4:	|     |   moveq #1,d0
   11fe6:	|  /--|-- bra.s 11fee <builtIn_spawnSub+0x48>
		return BR_CONTINUE;
   11fe8:	|  |  \-> moveq #2,d0
   11fea:	|  +----- bra.s 11fee <builtIn_spawnSub+0x48>
	}
	return BR_ERROR;
   11fec:	\--|----> moveq #1,d0
}
   11fee:	   \----> addq.l #4,sp
   11ff0:	          rts

00011ff2 <builtIn_cancelSub>:

builtIn (cancelSub)
{
   11ff2:	          subq.l #8,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11ff4:	          move.l sp,d0
   11ff6:	          addq.l #4,d0
   11ff8:	          move.l d0,-(sp)
   11ffa:	          move.l 20(sp),-(sp)
   11ffe:	          move.l 20(sp),-(sp)
   12002:	          jsr 11de8 <getFuncNumForCallback>
   12008:	          lea 12(sp),sp
   1200c:	          tst.w d0
   1200e:	/-------- beq.s 12044 <builtIn_cancelSub+0x52>
	{
		BOOL killedMyself;
		cancelAFunction (functionNum, fun, &killedMyself);
   12010:	|         move.l 4(sp),d1
   12014:	|         move.l sp,d0
   12016:	|         addq.l #2,d0
   12018:	|         move.l d0,-(sp)
   1201a:	|         move.l 20(sp),-(sp)
   1201e:	|         move.l d1,-(sp)
   12020:	|         jsr 481c <cancelAFunction>
   12026:	|         lea 12(sp),sp
		if (killedMyself) {
   1202a:	|         move.w 2(sp),d0
   1202e:	|  /----- beq.s 12040 <builtIn_cancelSub+0x4e>
			abortFunction (fun);
   12030:	|  |      move.l 16(sp),-(sp)
   12034:	|  |      jsr 473a <abortFunction>
   1203a:	|  |      addq.l #4,sp
			return BR_ALREADY_GONE;
   1203c:	|  |      moveq #5,d0
   1203e:	|  |  /-- bra.s 12046 <builtIn_cancelSub+0x54>
		}
		return BR_CONTINUE;
   12040:	|  \--|-> moveq #2,d0
   12042:	|     +-- bra.s 12046 <builtIn_cancelSub+0x54>
	}
	return BR_ERROR;
   12044:	\-----|-> moveq #1,d0
}
   12046:	      \-> addq.l #8,sp
   12048:	          rts

0001204a <builtIn_stringWidth>:

builtIn(stringWidth)
{
   1204a:	       subq.l #8,sp
   1204c:	       move.l a6,-(sp)
	UNUSEDALL
	char * theText = getTextFromAnyVar(&(fun->stack->thisVar));
   1204e:	       movea.l 20(sp),a0
   12052:	       move.l 24(a0),d0
   12056:	       move.l d0,-(sp)
   12058:	       jsr 14dca <getTextFromAnyVar>
   1205e:	       addq.l #4,sp
   12060:	       move.l d0,8(sp)
	if (!theText) return BR_ERROR;
   12064:	   /-- bne.s 1206a <builtIn_stringWidth+0x20>
   12066:	   |   moveq #1,d0
   12068:	/--|-- bra.s 120b8 <builtIn_stringWidth+0x6e>
	trimStack(&fun->stack);
   1206a:	|  \-> moveq #24,d0
   1206c:	|      add.l 20(sp),d0
   12070:	|      move.l d0,-(sp)
   12072:	|      jsr 15178 <trimStack>
   12078:	|      addq.l #4,sp

	// Return value
	setVariable(&fun->reg, SVT_INT, stringWidth(theText));
   1207a:	|      move.l 8(sp),-(sp)
   1207e:	|      jsr 158d6 <stringWidth>
   12084:	|      addq.l #4,sp
   12086:	|      move.l d0,d1
   12088:	|      moveq #28,d0
   1208a:	|      add.l 20(sp),d0
   1208e:	|      move.l d1,-(sp)
   12090:	|      pea 1 <_start+0x1>
   12094:	|      move.l d0,-(sp)
   12096:	|      jsr 150e6 <setVariable>
   1209c:	|      lea 12(sp),sp
	FreeVec(theText);
   120a0:	|      move.l 8(sp),4(sp)
   120a6:	|      move.l 1c9ca <SysBase>,d0
   120ac:	|      movea.l d0,a6
   120ae:	|      movea.l 4(sp),a1
   120b2:	|      jsr -690(a6)
	return BR_CONTINUE;
   120b6:	|      moveq #2,d0
}
   120b8:	\----> movea.l (sp)+,a6
   120ba:	       addq.l #8,sp
   120bc:	       rts

000120be <builtIn_hardScroll>:

builtIn(hardScroll)
{
   120be:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   120c0:	       movea.l 12(sp),a0
   120c4:	       move.l 24(a0),d0
   120c8:	       move.l d0,-(sp)
   120ca:	       pea 1 <_start+0x1>
   120ce:	       move.l sp,d0
   120d0:	       addq.l #8,d0
   120d2:	       move.l d0,-(sp)
   120d4:	       jsr 147f4 <getValueType>
   120da:	       lea 12(sp),sp
   120de:	       tst.w d0
   120e0:	   /-- bne.s 120e6 <builtIn_hardScroll+0x28>
   120e2:	   |   moveq #1,d0
   120e4:	/--|-- bra.s 12104 <builtIn_hardScroll+0x46>
	trimStack (&fun -> stack);
   120e6:	|  \-> moveq #24,d0
   120e8:	|      add.l 12(sp),d0
   120ec:	|      move.l d0,-(sp)
   120ee:	|      jsr 15178 <trimStack>
   120f4:	|      addq.l #4,sp
	hardScroll (v);
   120f6:	|      move.l (sp),d0
   120f8:	|      move.l d0,-(sp)
   120fa:	|      jsr d290 <hardScroll>
   12100:	|      addq.l #4,sp
	return BR_CONTINUE;
   12102:	|      moveq #2,d0
}
   12104:	\----> addq.l #4,sp
   12106:	       rts

00012108 <builtIn_isScreenRegion>:


builtIn(isScreenRegion)
{
   12108:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1210a:	       movea.l 12(sp),a0
   1210e:	       move.l 24(a0),d0
   12112:	       move.l d0,-(sp)
   12114:	       pea 7 <_start+0x7>
   12118:	       move.l sp,d0
   1211a:	       addq.l #8,d0
   1211c:	       move.l d0,-(sp)
   1211e:	       jsr 147f4 <getValueType>
   12124:	       lea 12(sp),sp
   12128:	       tst.w d0
   1212a:	   /-- bne.s 12130 <builtIn_isScreenRegion+0x28>
   1212c:	   |   moveq #1,d0
   1212e:	/--|-- bra.s 12170 <builtIn_isScreenRegion+0x68>
	trimStack (&fun -> stack);
   12130:	|  \-> moveq #24,d0
   12132:	|      add.l 12(sp),d0
   12136:	|      move.l d0,-(sp)
   12138:	|      jsr 15178 <trimStack>
   1213e:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, getRegionForObject (objectNumber) != NULL);
   12140:	|      move.l (sp),d0
   12142:	|      move.l d0,-(sp)
   12144:	|      jsr 15a36 <getRegionForObject>
   1214a:	|      addq.l #4,sp
   1214c:	|      tst.l d0
   1214e:	|      sne d0
   12150:	|      neg.b d0
   12152:	|      moveq #0,d1
   12154:	|      move.b d0,d1
   12156:	|      moveq #28,d0
   12158:	|      add.l 12(sp),d0
   1215c:	|      move.l d1,-(sp)
   1215e:	|      pea 1 <_start+0x1>
   12162:	|      move.l d0,-(sp)
   12164:	|      jsr 150e6 <setVariable>
   1216a:	|      lea 12(sp),sp
	return BR_CONTINUE;
   1216e:	|      moveq #2,d0
}
   12170:	\----> addq.l #4,sp
   12172:	       rts

00012174 <builtIn_setSpeechSpeed>:

builtIn(setSpeechSpeed)
{
   12174:	       subq.l #4,sp
	UNUSEDALL
	int number;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12176:	       movea.l 12(sp),a0
   1217a:	       move.l 24(a0),d0
   1217e:	       move.l d0,-(sp)
   12180:	       pea 1 <_start+0x1>
   12184:	       move.l sp,d0
   12186:	       addq.l #8,d0
   12188:	       move.l d0,-(sp)
   1218a:	       jsr 147f4 <getValueType>
   12190:	       lea 12(sp),sp
   12194:	       tst.w d0
   12196:	   /-- bne.s 1219c <builtIn_setSpeechSpeed+0x28>
   12198:	   |   moveq #1,d0
   1219a:	/--|-- bra.s 121ea <builtIn_setSpeechSpeed+0x76>
	trimStack (&fun -> stack);
   1219c:	|  \-> moveq #24,d0
   1219e:	|      add.l 12(sp),d0
   121a2:	|      move.l d0,-(sp)
   121a4:	|      jsr 15178 <trimStack>
   121aa:	|      addq.l #4,sp
	speechSpeed = number * (FLOAT) 0.01;
   121ac:	|      move.l (sp),d0
   121ae:	|      move.l d0,-(sp)
   121b0:	|      jsr 17686 <__floatsisf>
   121b6:	|      addq.l #4,sp
   121b8:	|      move.l #1008981770,-(sp)
   121be:	|      move.l d0,-(sp)
   121c0:	|      jsr 17738 <__mulsf3>
   121c6:	|      addq.l #8,sp
   121c8:	|      move.l d0,1c354 <speechSpeed>
	setVariable (&fun -> reg, SVT_INT, 1);
   121ce:	|      moveq #28,d0
   121d0:	|      add.l 12(sp),d0
   121d4:	|      pea 1 <_start+0x1>
   121d8:	|      pea 1 <_start+0x1>
   121dc:	|      move.l d0,-(sp)
   121de:	|      jsr 150e6 <setVariable>
   121e4:	|      lea 12(sp),sp
	return BR_CONTINUE;
   121e8:	|      moveq #2,d0
}
   121ea:	\----> addq.l #4,sp
   121ec:	       rts

000121ee <builtIn_setFontSpacing>:

builtIn(setFontSpacing)
{
   121ee:	       subq.l #4,sp
	UNUSEDALL
	int fontSpaceI;
	if (! getValueType(&fontSpaceI, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   121f0:	       movea.l 12(sp),a0
   121f4:	       move.l 24(a0),d0
   121f8:	       move.l d0,-(sp)
   121fa:	       pea 1 <_start+0x1>
   121fe:	       move.l sp,d0
   12200:	       addq.l #8,d0
   12202:	       move.l d0,-(sp)
   12204:	       jsr 147f4 <getValueType>
   1220a:	       lea 12(sp),sp
   1220e:	       tst.w d0
   12210:	   /-- bne.s 12216 <builtIn_setFontSpacing+0x28>
   12212:	   |   moveq #1,d0
   12214:	/--|-- bra.s 1224c <builtIn_setFontSpacing+0x5e>
	fontSpace = fontSpaceI;
   12216:	|  \-> move.l (sp),d0
   12218:	|      move.l d0,d0
   1221a:	|      move.w d0,1c8ce <fontSpace>
	trimStack (&fun -> stack);
   12220:	|      moveq #24,d0
   12222:	|      add.l 12(sp),d0
   12226:	|      move.l d0,-(sp)
   12228:	|      jsr 15178 <trimStack>
   1222e:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   12230:	|      moveq #28,d0
   12232:	|      add.l 12(sp),d0
   12236:	|      pea 1 <_start+0x1>
   1223a:	|      pea 1 <_start+0x1>
   1223e:	|      move.l d0,-(sp)
   12240:	|      jsr 150e6 <setVariable>
   12246:	|      lea 12(sp),sp
	return BR_CONTINUE;
   1224a:	|      moveq #2,d0
}
   1224c:	\----> addq.l #4,sp
   1224e:	       rts

00012250 <builtIn_transitionLevel>:

builtIn(transitionLevel)
{
   12250:	          subq.l #4,sp
	UNUSEDALL
	int number;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12252:	          movea.l 12(sp),a0
   12256:	          move.l 24(a0),d0
   1225a:	          move.l d0,-(sp)
   1225c:	          pea 1 <_start+0x1>
   12260:	          move.l sp,d0
   12262:	          addq.l #8,d0
   12264:	          move.l d0,-(sp)
   12266:	          jsr 147f4 <getValueType>
   1226c:	          lea 12(sp),sp
   12270:	          tst.w d0
   12272:	      /-- bne.s 12278 <builtIn_transitionLevel+0x28>
   12274:	      |   moveq #1,d0
   12276:	/-----|-- bra.s 122cc <builtIn_transitionLevel+0x7c>
	trimStack (&fun -> stack);
   12278:	|     \-> moveq #24,d0
   1227a:	|         add.l 12(sp),d0
   1227e:	|         move.l d0,-(sp)
   12280:	|         jsr 15178 <trimStack>
   12286:	|         addq.l #4,sp

	if (number < 0)
   12288:	|         move.l (sp),d0
   1228a:	|     /-- bpl.s 12294 <builtIn_transitionLevel+0x44>
		brightnessLevel = 0;
   1228c:	|     |   clr.b 1c340 <brightnessLevel>
   12292:	|  /--|-- bra.s 122b0 <builtIn_transitionLevel+0x60>
	else if (number > 255)
   12294:	|  |  \-> move.l (sp),d0
   12296:	|  |      cmpi.l #255,d0
   1229c:	|  |  /-- ble.s 122a6 <builtIn_transitionLevel+0x56>
		brightnessLevel = 255;
   1229e:	|  |  |   st 1c340 <brightnessLevel>
   122a4:	|  +--|-- bra.s 122b0 <builtIn_transitionLevel+0x60>
	else
		brightnessLevel = number;
   122a6:	|  |  \-> move.l (sp),d0
   122a8:	|  |      move.l d0,d0
   122aa:	|  |      move.b d0,1c340 <brightnessLevel>

	setVariable (&fun -> reg, SVT_INT, 1);
   122b0:	|  \----> moveq #28,d0
   122b2:	|         add.l 12(sp),d0
   122b6:	|         pea 1 <_start+0x1>
   122ba:	|         pea 1 <_start+0x1>
   122be:	|         move.l d0,-(sp)
   122c0:	|         jsr 150e6 <setVariable>
   122c6:	|         lea 12(sp),sp
	return BR_CONTINUE;
   122ca:	|         moveq #2,d0
}
   122cc:	\-------> addq.l #4,sp
   122ce:	          rts

000122d0 <builtIn_captureAllKeys>:

builtIn(captureAllKeys)
{
	UNUSEDALL
	captureAllKeys = getBoolean(&(fun -> stack -> thisVar));
   122d0:	movea.l 8(sp),a0
   122d4:	move.l 24(a0),d0
   122d8:	move.l d0,-(sp)
   122da:	jsr 14d34 <getBoolean>
   122e0:	addq.l #4,sp
   122e2:	move.w d0,1c96a <captureAllKeys>
	trimStack (&fun -> stack);
   122e8:	moveq #24,d0
   122ea:	add.l 8(sp),d0
   122ee:	move.l d0,-(sp)
   122f0:	jsr 15178 <trimStack>
   122f6:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, captureAllKeys);
   122f8:	move.w 1c96a <captureAllKeys>,d0
   122fe:	movea.w d0,a0
   12300:	moveq #28,d0
   12302:	add.l 8(sp),d0
   12306:	move.l a0,-(sp)
   12308:	pea 1 <_start+0x1>
   1230c:	move.l d0,-(sp)
   1230e:	jsr 150e6 <setVariable>
   12314:	lea 12(sp),sp
	return BR_CONTINUE;
   12318:	moveq #2,d0
}
   1231a:	rts

0001231c <builtIn_spinCharacter>:


builtIn(spinCharacter)
{
   1231c:	       lea -12(sp),sp
	UNUSEDALL
	int number, objectNumber;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12320:	       movea.l 20(sp),a0
   12324:	       move.l 24(a0),d0
   12328:	       move.l d0,-(sp)
   1232a:	       pea 1 <_start+0x1>
   1232e:	       moveq #12,d0
   12330:	       add.l sp,d0
   12332:	       move.l d0,-(sp)
   12334:	       jsr 147f4 <getValueType>
   1233a:	       lea 12(sp),sp
   1233e:	       tst.w d0
   12340:	   /-- bne.s 12348 <builtIn_spinCharacter+0x2c>
   12342:	   |   moveq #1,d0
   12344:	/--|-- bra.w 123f8 <builtIn_spinCharacter+0xdc>
	trimStack (&fun -> stack);
   12348:	|  \-> moveq #24,d0
   1234a:	|      add.l 20(sp),d0
   1234e:	|      move.l d0,-(sp)
   12350:	|      jsr 15178 <trimStack>
   12356:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12358:	|      movea.l 20(sp),a0
   1235c:	|      move.l 24(a0),d0
   12360:	|      move.l d0,-(sp)
   12362:	|      pea 7 <_start+0x7>
   12366:	|      lea 8(sp),a0
   1236a:	|      move.l a0,-(sp)
   1236c:	|      jsr 147f4 <getValueType>
   12372:	|      lea 12(sp),sp
   12376:	|      tst.w d0
   12378:	|  /-- bne.s 1237e <builtIn_spinCharacter+0x62>
   1237a:	|  |   moveq #1,d0
   1237c:	+--|-- bra.s 123f8 <builtIn_spinCharacter+0xdc>
	trimStack (&fun -> stack);
   1237e:	|  \-> moveq #24,d0
   12380:	|      add.l 20(sp),d0
   12384:	|      move.l d0,-(sp)
   12386:	|      jsr 15178 <trimStack>
   1238c:	|      addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   1238e:	|      move.l (sp),d0
   12390:	|      move.l d0,-(sp)
   12392:	|      jsr a648 <findPerson>
   12398:	|      addq.l #4,sp
   1239a:	|      move.l d0,8(sp)
	if (thisPerson) {
   1239e:	|  /-- beq.s 123de <builtIn_spinCharacter+0xc2>
		thisPerson -> wantAngle = number;
   123a0:	|  |   move.l 4(sp),d0
   123a4:	|  |   movea.l 8(sp),a0
   123a8:	|  |   move.l d0,96(a0)
		thisPerson -> spinning = TRUE;
   123ac:	|  |   movea.l 8(sp),a0
   123b0:	|  |   move.w #1,66(a0)
		thisPerson -> continueAfterWalking = fun;
   123b6:	|  |   movea.l 8(sp),a0
   123ba:	|  |   move.l 20(sp),68(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   123c0:	|  |   moveq #28,d0
   123c2:	|  |   add.l 20(sp),d0
   123c6:	|  |   pea 1 <_start+0x1>
   123ca:	|  |   pea 1 <_start+0x1>
   123ce:	|  |   move.l d0,-(sp)
   123d0:	|  |   jsr 150e6 <setVariable>
   123d6:	|  |   lea 12(sp),sp
		return BR_PAUSE;
   123da:	|  |   moveq #3,d0
   123dc:	+--|-- bra.s 123f8 <builtIn_spinCharacter+0xdc>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   123de:	|  \-> moveq #28,d0
   123e0:	|      add.l 20(sp),d0
   123e4:	|      clr.l -(sp)
   123e6:	|      pea 1 <_start+0x1>
   123ea:	|      move.l d0,-(sp)
   123ec:	|      jsr 150e6 <setVariable>
   123f2:	|      lea 12(sp),sp
		return BR_CONTINUE;
   123f6:	|      moveq #2,d0
	}
}
   123f8:	\----> lea 12(sp),sp
   123fc:	       rts

000123fe <builtIn_getCharacterDirection>:

builtIn(getCharacterDirection)
{
   123fe:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12400:	          movea.l 16(sp),a0
   12404:	          move.l 24(a0),d0
   12408:	          move.l d0,-(sp)
   1240a:	          pea 7 <_start+0x7>
   1240e:	          move.l sp,d0
   12410:	          addq.l #8,d0
   12412:	          move.l d0,-(sp)
   12414:	          jsr 147f4 <getValueType>
   1241a:	          lea 12(sp),sp
   1241e:	          tst.w d0
   12420:	      /-- bne.s 12426 <builtIn_getCharacterDirection+0x28>
   12422:	      |   moveq #1,d0
   12424:	/-----|-- bra.s 12484 <builtIn_getCharacterDirection+0x86>
	trimStack (&fun -> stack);
   12426:	|     \-> moveq #24,d0
   12428:	|         add.l 16(sp),d0
   1242c:	|         move.l d0,-(sp)
   1242e:	|         jsr 15178 <trimStack>
   12434:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   12436:	|         move.l (sp),d0
   12438:	|         move.l d0,-(sp)
   1243a:	|         jsr a648 <findPerson>
   12440:	|         addq.l #4,sp
   12442:	|         move.l d0,4(sp)
	if (thisPerson) {
   12446:	|  /----- beq.s 1246a <builtIn_getCharacterDirection+0x6c>
		setVariable (&fun -> reg, SVT_INT, thisPerson -> direction);
   12448:	|  |      movea.l 4(sp),a0
   1244c:	|  |      move.l 106(a0),d1
   12450:	|  |      moveq #28,d0
   12452:	|  |      add.l 16(sp),d0
   12456:	|  |      move.l d1,-(sp)
   12458:	|  |      pea 1 <_start+0x1>
   1245c:	|  |      move.l d0,-(sp)
   1245e:	|  |      jsr 150e6 <setVariable>
   12464:	|  |      lea 12(sp),sp
   12468:	|  |  /-- bra.s 12482 <builtIn_getCharacterDirection+0x84>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   1246a:	|  \--|-> moveq #28,d0
   1246c:	|     |   add.l 16(sp),d0
   12470:	|     |   clr.l -(sp)
   12472:	|     |   pea 1 <_start+0x1>
   12476:	|     |   move.l d0,-(sp)
   12478:	|     |   jsr 150e6 <setVariable>
   1247e:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   12482:	|     \-> moveq #2,d0
}
   12484:	\-------> addq.l #8,sp
   12486:	          rts

00012488 <builtIn_isCharacter>:

builtIn(isCharacter)
{
   12488:	       subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1248a:	       movea.l 16(sp),a0
   1248e:	       move.l 24(a0),d0
   12492:	       move.l d0,-(sp)
   12494:	       pea 7 <_start+0x7>
   12498:	       move.l sp,d0
   1249a:	       addq.l #8,d0
   1249c:	       move.l d0,-(sp)
   1249e:	       jsr 147f4 <getValueType>
   124a4:	       lea 12(sp),sp
   124a8:	       tst.w d0
   124aa:	   /-- bne.s 124b0 <builtIn_isCharacter+0x28>
   124ac:	   |   moveq #1,d0
   124ae:	/--|-- bra.s 124f2 <builtIn_isCharacter+0x6a>
	trimStack (&fun -> stack);
   124b0:	|  \-> moveq #24,d0
   124b2:	|      add.l 16(sp),d0
   124b6:	|      move.l d0,-(sp)
   124b8:	|      jsr 15178 <trimStack>
   124be:	|      addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   124c0:	|      move.l (sp),d0
   124c2:	|      move.l d0,-(sp)
   124c4:	|      jsr a648 <findPerson>
   124ca:	|      addq.l #4,sp
   124cc:	|      move.l d0,4(sp)
	setVariable (&fun -> reg, SVT_INT, thisPerson != NULL);
   124d0:	|      sne d0
   124d2:	|      neg.b d0
   124d4:	|      moveq #0,d1
   124d6:	|      move.b d0,d1
   124d8:	|      moveq #28,d0
   124da:	|      add.l 16(sp),d0
   124de:	|      move.l d1,-(sp)
   124e0:	|      pea 1 <_start+0x1>
   124e4:	|      move.l d0,-(sp)
   124e6:	|      jsr 150e6 <setVariable>
   124ec:	|      lea 12(sp),sp
	return BR_CONTINUE;
   124f0:	|      moveq #2,d0
}
   124f2:	\----> addq.l #8,sp
   124f4:	       rts

000124f6 <builtIn_normalCharacter>:

builtIn(normalCharacter)
{
   124f6:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   124f8:	          movea.l 16(sp),a0
   124fc:	          move.l 24(a0),d0
   12500:	          move.l d0,-(sp)
   12502:	          pea 7 <_start+0x7>
   12506:	          move.l sp,d0
   12508:	          addq.l #8,d0
   1250a:	          move.l d0,-(sp)
   1250c:	          jsr 147f4 <getValueType>
   12512:	          lea 12(sp),sp
   12516:	          tst.w d0
   12518:	      /-- bne.s 1251e <builtIn_normalCharacter+0x28>
   1251a:	      |   moveq #1,d0
   1251c:	/-----|-- bra.s 1259a <builtIn_normalCharacter+0xa4>
	trimStack (&fun -> stack);
   1251e:	|     \-> moveq #24,d0
   12520:	|         add.l 16(sp),d0
   12524:	|         move.l d0,-(sp)
   12526:	|         jsr 15178 <trimStack>
   1252c:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   1252e:	|         move.l (sp),d0
   12530:	|         move.l d0,-(sp)
   12532:	|         jsr a648 <findPerson>
   12538:	|         addq.l #4,sp
   1253a:	|         move.l d0,4(sp)
	if (thisPerson)
   1253e:	|  /----- beq.s 12580 <builtIn_normalCharacter+0x8a>
	{
		thisPerson -> myAnim = thisPerson -> myPersona -> animation[thisPerson -> direction];
   12540:	|  |      movea.l 4(sp),a0
   12544:	|  |      movea.l 80(a0),a0
   12548:	|  |      move.l (a0),d1
   1254a:	|  |      movea.l 4(sp),a0
   1254e:	|  |      move.l 106(a0),d0
   12552:	|  |      add.l d0,d0
   12554:	|  |      add.l d0,d0
   12556:	|  |      movea.l d1,a0
   12558:	|  |      adda.l d0,a0
   1255a:	|  |      move.l (a0),d0
   1255c:	|  |      movea.l 4(sp),a0
   12560:	|  |      move.l d0,72(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   12564:	|  |      moveq #28,d0
   12566:	|  |      add.l 16(sp),d0
   1256a:	|  |      pea 1 <_start+0x1>
   1256e:	|  |      pea 1 <_start+0x1>
   12572:	|  |      move.l d0,-(sp)
   12574:	|  |      jsr 150e6 <setVariable>
   1257a:	|  |      lea 12(sp),sp
   1257e:	|  |  /-- bra.s 12598 <builtIn_normalCharacter+0xa2>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   12580:	|  \--|-> moveq #28,d0
   12582:	|     |   add.l 16(sp),d0
   12586:	|     |   clr.l -(sp)
   12588:	|     |   pea 1 <_start+0x1>
   1258c:	|     |   move.l d0,-(sp)
   1258e:	|     |   jsr 150e6 <setVariable>
   12594:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   12598:	|     \-> moveq #2,d0
}
   1259a:	\-------> addq.l #8,sp
   1259c:	          rts

0001259e <builtIn_isMoving>:

builtIn(isMoving)
{
   1259e:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   125a0:	          movea.l 16(sp),a0
   125a4:	          move.l 24(a0),d0
   125a8:	          move.l d0,-(sp)
   125aa:	          pea 7 <_start+0x7>
   125ae:	          move.l sp,d0
   125b0:	          addq.l #8,d0
   125b2:	          move.l d0,-(sp)
   125b4:	          jsr 147f4 <getValueType>
   125ba:	          lea 12(sp),sp
   125be:	          tst.w d0
   125c0:	      /-- bne.s 125c6 <builtIn_isMoving+0x28>
   125c2:	      |   moveq #1,d0
   125c4:	/-----|-- bra.s 12626 <builtIn_isMoving+0x88>
	trimStack (&fun -> stack);
   125c6:	|     \-> moveq #24,d0
   125c8:	|         add.l 16(sp),d0
   125cc:	|         move.l d0,-(sp)
   125ce:	|         jsr 15178 <trimStack>
   125d4:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   125d6:	|         move.l (sp),d0
   125d8:	|         move.l d0,-(sp)
   125da:	|         jsr a648 <findPerson>
   125e0:	|         addq.l #4,sp
   125e2:	|         move.l d0,4(sp)
	if (thisPerson)
   125e6:	|  /----- beq.s 1260c <builtIn_isMoving+0x6e>
	{
		setVariable (&fun -> reg, SVT_INT, thisPerson -> walking);
   125e8:	|  |      movea.l 4(sp),a0
   125ec:	|  |      move.w 64(a0),d0
   125f0:	|  |      movea.w d0,a0
   125f2:	|  |      moveq #28,d0
   125f4:	|  |      add.l 16(sp),d0
   125f8:	|  |      move.l a0,-(sp)
   125fa:	|  |      pea 1 <_start+0x1>
   125fe:	|  |      move.l d0,-(sp)
   12600:	|  |      jsr 150e6 <setVariable>
   12606:	|  |      lea 12(sp),sp
   1260a:	|  |  /-- bra.s 12624 <builtIn_isMoving+0x86>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   1260c:	|  \--|-> moveq #28,d0
   1260e:	|     |   add.l 16(sp),d0
   12612:	|     |   clr.l -(sp)
   12614:	|     |   pea 1 <_start+0x1>
   12618:	|     |   move.l d0,-(sp)
   1261a:	|     |   jsr 150e6 <setVariable>
   12620:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   12624:	|     \-> moveq #2,d0
}
   12626:	\-------> addq.l #8,sp
   12628:	          rts

0001262a <builtIn_fetchEvent>:

builtIn(fetchEvent)
{
   1262a:	          lea -12(sp),sp
	UNUSEDALL
	int obj1, obj2;
	if (! getValueType(&obj2, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1262e:	          movea.l 20(sp),a0
   12632:	          move.l 24(a0),d0
   12636:	          move.l d0,-(sp)
   12638:	          pea 7 <_start+0x7>
   1263c:	          lea 8(sp),a0
   12640:	          move.l a0,-(sp)
   12642:	          jsr 147f4 <getValueType>
   12648:	          lea 12(sp),sp
   1264c:	          tst.w d0
   1264e:	      /-- bne.s 12656 <builtIn_fetchEvent+0x2c>
   12650:	      |   moveq #1,d0
   12652:	/-----|-- bra.w 126ea <builtIn_fetchEvent+0xc0>
	trimStack (&fun -> stack);
   12656:	|     \-> moveq #24,d0
   12658:	|         add.l 20(sp),d0
   1265c:	|         move.l d0,-(sp)
   1265e:	|         jsr 15178 <trimStack>
   12664:	|         addq.l #4,sp
	if (! getValueType(&obj1, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12666:	|         movea.l 20(sp),a0
   1266a:	|         move.l 24(a0),d0
   1266e:	|         move.l d0,-(sp)
   12670:	|         pea 7 <_start+0x7>
   12674:	|         moveq #12,d0
   12676:	|         add.l sp,d0
   12678:	|         move.l d0,-(sp)
   1267a:	|         jsr 147f4 <getValueType>
   12680:	|         lea 12(sp),sp
   12684:	|         tst.w d0
   12686:	|     /-- bne.s 1268c <builtIn_fetchEvent+0x62>
   12688:	|     |   moveq #1,d0
   1268a:	+-----|-- bra.s 126ea <builtIn_fetchEvent+0xc0>
	trimStack (&fun -> stack);
   1268c:	|     \-> moveq #24,d0
   1268e:	|         add.l 20(sp),d0
   12692:	|         move.l d0,-(sp)
   12694:	|         jsr 15178 <trimStack>
   1269a:	|         addq.l #4,sp

	int fNum = getCombinationFunction (obj1, obj2);
   1269c:	|         move.l (sp),d1
   1269e:	|         move.l 4(sp),d0
   126a2:	|         move.l d1,-(sp)
   126a4:	|         move.l d0,-(sp)
   126a6:	|         jsr d572 <getCombinationFunction>
   126ac:	|         addq.l #8,sp
   126ae:	|         move.l d0,8(sp)

	// Return value
	if (fNum) {
   126b2:	|  /----- beq.s 126d0 <builtIn_fetchEvent+0xa6>
		setVariable (&fun -> reg, SVT_FUNC, fNum);
   126b4:	|  |      moveq #28,d0
   126b6:	|  |      add.l 20(sp),d0
   126ba:	|  |      move.l 8(sp),-(sp)
   126be:	|  |      pea 2 <_start+0x2>
   126c2:	|  |      move.l d0,-(sp)
   126c4:	|  |      jsr 150e6 <setVariable>
   126ca:	|  |      lea 12(sp),sp
   126ce:	|  |  /-- bra.s 126e8 <builtIn_fetchEvent+0xbe>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   126d0:	|  \--|-> moveq #28,d0
   126d2:	|     |   add.l 20(sp),d0
   126d6:	|     |   clr.l -(sp)
   126d8:	|     |   pea 1 <_start+0x1>
   126dc:	|     |   move.l d0,-(sp)
   126de:	|     |   jsr 150e6 <setVariable>
   126e4:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   126e8:	|     \-> moveq #2,d0
}
   126ea:	\-------> lea 12(sp),sp
   126ee:	          rts

000126f0 <builtIn_deleteFile>:

builtIn(deleteFile)
{
   126f0:	       lea -24(sp),sp
   126f4:	       move.l a6,-(sp)
    UNUSEDALL

    char *namNormal = getTextFromAnyVar(&(fun->stack->thisVar));
   126f6:	       movea.l 36(sp),a0
   126fa:	       move.l 24(a0),d0
   126fe:	       move.l d0,-(sp)
   12700:	       jsr 14dca <getTextFromAnyVar>
   12706:	       addq.l #4,sp
   12708:	       move.l d0,24(sp)
    trimStack(&fun->stack);
   1270c:	       moveq #24,d0
   1270e:	       add.l 36(sp),d0
   12712:	       move.l d0,-(sp)
   12714:	       jsr 15178 <trimStack>
   1271a:	       addq.l #4,sp
    char *nam = encodeFilename(namNormal);
   1271c:	       move.l 24(sp),-(sp)
   12720:	       jsr 2fe <encodeFilename>
   12726:	       addq.l #4,sp
   12728:	       move.l d0,20(sp)
    FreeVec(namNormal);
   1272c:	       move.l 24(sp),16(sp)
   12732:	       move.l 1c9ca <SysBase>,d0
   12738:	       movea.l d0,a6
   1273a:	       movea.l 16(sp),a1
   1273e:	       jsr -690(a6)
    if (failSecurityCheck(nam)) return BR_ERROR;
   12742:	       move.l 20(sp),-(sp)
   12746:	       jsr e32a <failSecurityCheck>
   1274c:	       addq.l #4,sp
   1274e:	       tst.w d0
   12750:	   /-- beq.s 12756 <builtIn_deleteFile+0x66>
   12752:	   |   moveq #1,d0
   12754:	/--|-- bra.s 127a4 <builtIn_deleteFile+0xb4>
    setVariable(&fun->reg, SVT_INT, DeleteFile(nam));
   12756:	|  \-> move.l 20(sp),12(sp)
   1275c:	|      move.l 1c9d2 <DOSBase>,d0
   12762:	|      movea.l d0,a6
   12764:	|      move.l 12(sp),d1
   12768:	|      jsr -72(a6)
   1276c:	|      move.l d0,8(sp)
   12770:	|      move.l 8(sp),d1
   12774:	|      moveq #28,d0
   12776:	|      add.l 36(sp),d0
   1277a:	|      move.l d1,-(sp)
   1277c:	|      pea 1 <_start+0x1>
   12780:	|      move.l d0,-(sp)
   12782:	|      jsr 150e6 <setVariable>
   12788:	|      lea 12(sp),sp
    FreeVec(nam);
   1278c:	|      move.l 20(sp),4(sp)
   12792:	|      move.l 1c9ca <SysBase>,d0
   12798:	|      movea.l d0,a6
   1279a:	|      movea.l 4(sp),a1
   1279e:	|      jsr -690(a6)

    return BR_CONTINUE;
   127a2:	|      moveq #2,d0
}
   127a4:	\----> movea.l (sp)+,a6
   127a6:	       lea 24(sp),sp
   127aa:	       rts

000127ac <builtIn_renameFile>:

builtIn(renameFile)
{
   127ac:	       lea -40(sp),sp
   127b0:	       move.l a6,-(sp)
   127b2:	       move.l d2,-(sp)
	UNUSEDALL
	char * temp;

	temp = getTextFromAnyVar(&(fun->stack->thisVar));
   127b4:	       movea.l 56(sp),a0
   127b8:	       move.l 24(a0),d0
   127bc:	       move.l d0,-(sp)
   127be:	       jsr 14dca <getTextFromAnyVar>
   127c4:	       addq.l #4,sp
   127c6:	       move.l d0,44(sp)
	char * newnam = encodeFilename(temp);
   127ca:	       move.l 44(sp),-(sp)
   127ce:	       jsr 2fe <encodeFilename>
   127d4:	       addq.l #4,sp
   127d6:	       move.l d0,40(sp)
	trimStack(&fun->stack);
   127da:	       moveq #24,d0
   127dc:	       add.l 56(sp),d0
   127e0:	       move.l d0,-(sp)
   127e2:	       jsr 15178 <trimStack>
   127e8:	       addq.l #4,sp
	if (failSecurityCheck(newnam)) return BR_ERROR;
   127ea:	       move.l 40(sp),-(sp)
   127ee:	       jsr e32a <failSecurityCheck>
   127f4:	       addq.l #4,sp
   127f6:	       tst.w d0
   127f8:	   /-- beq.s 12800 <builtIn_renameFile+0x54>
   127fa:	   |   moveq #1,d0
   127fc:	/--|-- bra.w 128e6 <builtIn_renameFile+0x13a>
	FreeVec(temp);
   12800:	|  \-> move.l 44(sp),36(sp)
   12806:	|      move.l 1c9ca <SysBase>,d0
   1280c:	|      movea.l d0,a6
   1280e:	|      movea.l 36(sp),a1
   12812:	|      jsr -690(a6)

	temp = getTextFromAnyVar(&(fun->stack->thisVar));
   12816:	|      movea.l 56(sp),a0
   1281a:	|      move.l 24(a0),d0
   1281e:	|      move.l d0,-(sp)
   12820:	|      jsr 14dca <getTextFromAnyVar>
   12826:	|      addq.l #4,sp
   12828:	|      move.l d0,44(sp)
	char * nam = encodeFilename(temp);
   1282c:	|      move.l 44(sp),-(sp)
   12830:	|      jsr 2fe <encodeFilename>
   12836:	|      addq.l #4,sp
   12838:	|      move.l d0,32(sp)
	trimStack(&fun->stack);
   1283c:	|      moveq #24,d0
   1283e:	|      add.l 56(sp),d0
   12842:	|      move.l d0,-(sp)
   12844:	|      jsr 15178 <trimStack>
   1284a:	|      addq.l #4,sp
	if (failSecurityCheck(nam)) return BR_ERROR;
   1284c:	|      move.l 32(sp),-(sp)
   12850:	|      jsr e32a <failSecurityCheck>
   12856:	|      addq.l #4,sp
   12858:	|      tst.w d0
   1285a:	|  /-- beq.s 12862 <builtIn_renameFile+0xb6>
   1285c:	|  |   moveq #1,d0
   1285e:	+--|-- bra.w 128e6 <builtIn_renameFile+0x13a>
	FreeVec(temp);
   12862:	|  \-> move.l 44(sp),28(sp)
   12868:	|      move.l 1c9ca <SysBase>,d0
   1286e:	|      movea.l d0,a6
   12870:	|      movea.l 28(sp),a1
   12874:	|      jsr -690(a6)

	setVariable(&fun->reg, SVT_INT, Rename(nam, newnam));
   12878:	|      move.l 32(sp),24(sp)
   1287e:	|      move.l 40(sp),20(sp)
   12884:	|      move.l 1c9d2 <DOSBase>,d0
   1288a:	|      movea.l d0,a6
   1288c:	|      move.l 24(sp),d1
   12890:	|      move.l 20(sp),d2
   12894:	|      jsr -78(a6)
   12898:	|      move.l d0,16(sp)
   1289c:	|      move.l 16(sp),d1
   128a0:	|      moveq #28,d0
   128a2:	|      add.l 56(sp),d0
   128a6:	|      move.l d1,-(sp)
   128a8:	|      pea 1 <_start+0x1>
   128ac:	|      move.l d0,-(sp)
   128ae:	|      jsr 150e6 <setVariable>
   128b4:	|      lea 12(sp),sp
	FreeVec(nam);
   128b8:	|      move.l 32(sp),12(sp)
   128be:	|      move.l 1c9ca <SysBase>,d0
   128c4:	|      movea.l d0,a6
   128c6:	|      movea.l 12(sp),a1
   128ca:	|      jsr -690(a6)
	FreeVec(newnam);
   128ce:	|      move.l 40(sp),8(sp)
   128d4:	|      move.l 1c9ca <SysBase>,d0
   128da:	|      movea.l d0,a6
   128dc:	|      movea.l 8(sp),a1
   128e0:	|      jsr -690(a6)

	return BR_CONTINUE;
   128e4:	|      moveq #2,d0
}
   128e6:	\----> move.l (sp)+,d2
   128e8:	       movea.l (sp)+,a6
   128ea:	       lea 40(sp),sp
   128ee:	       rts

000128f0 <builtIn_cacheSound>:

builtIn(cacheSound)
{
   128f0:	       subq.l #4,sp
	UNUSEDALL
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   128f2:	       movea.l 12(sp),a0
   128f6:	       move.l 24(a0),d0
   128fa:	       move.l d0,-(sp)
   128fc:	       pea 5 <_start+0x5>
   12900:	       move.l sp,d0
   12902:	       addq.l #8,d0
   12904:	       move.l d0,-(sp)
   12906:	       jsr 147f4 <getValueType>
   1290c:	       lea 12(sp),sp
   12910:	       tst.w d0
   12912:	   /-- bne.s 12918 <builtIn_cacheSound+0x28>
   12914:	   |   moveq #1,d0
   12916:	/--|-- bra.s 12940 <builtIn_cacheSound+0x50>
	trimStack (&fun -> stack);
   12918:	|  \-> moveq #24,d0
   1291a:	|      add.l 12(sp),d0
   1291e:	|      move.l d0,-(sp)
   12920:	|      jsr 15178 <trimStack>
   12926:	|      addq.l #4,sp
	if (cacheSound (fileNumber) == -1) return BR_ERROR;
   12928:	|      move.l (sp),d0
   1292a:	|      move.l d0,-(sp)
   1292c:	|      jsr d172 <cacheSound>
   12932:	|      addq.l #4,sp
   12934:	|      moveq #-1,d1
   12936:	|      cmp.l d0,d1
   12938:	|  /-- bne.s 1293e <builtIn_cacheSound+0x4e>
   1293a:	|  |   moveq #1,d0
   1293c:	+--|-- bra.s 12940 <builtIn_cacheSound+0x50>
	return BR_CONTINUE;
   1293e:	|  \-> moveq #2,d0
}
   12940:	\----> addq.l #4,sp
   12942:	       rts

00012944 <builtIn_burnString>:
	trimStack (&fun -> stack);
	if (x == IN_THE_CENTRE) x = (winWidth - stringWidth (newText)) >> 1;
	fixFont (pastePalette);
	burnStringToBackdrop (newText, x, y, pastePalette);
	delete[] newText; Todo: Amigize this*/
	KPrintF("burnString: Not implemented for Amiga yet");
   12944:	pea 19bf3 <graphics.c.1c13408a+0xb>
   1294a:	jsr 17254 <KPrintF>
   12950:	addq.l #4,sp
	return BR_CONTINUE;
   12952:	moveq #2,d0
}
   12954:	rts

00012956 <builtIn_setCharacterSpinSpeed>:

builtIn(setCharacterSpinSpeed)
{
   12956:	          lea -12(sp),sp
	UNUSEDALL
	int speed, who;
	if (! getValueType(&speed, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1295a:	          movea.l 20(sp),a0
   1295e:	          move.l 24(a0),d0
   12962:	          move.l d0,-(sp)
   12964:	          pea 1 <_start+0x1>
   12968:	          moveq #12,d0
   1296a:	          add.l sp,d0
   1296c:	          move.l d0,-(sp)
   1296e:	          jsr 147f4 <getValueType>
   12974:	          lea 12(sp),sp
   12978:	          tst.w d0
   1297a:	      /-- bne.s 12982 <builtIn_setCharacterSpinSpeed+0x2c>
   1297c:	      |   moveq #1,d0
   1297e:	/-----|-- bra.w 12a1c <builtIn_setCharacterSpinSpeed+0xc6>
	trimStack (&fun -> stack);
   12982:	|     \-> moveq #24,d0
   12984:	|         add.l 20(sp),d0
   12988:	|         move.l d0,-(sp)
   1298a:	|         jsr 15178 <trimStack>
   12990:	|         addq.l #4,sp
	if (! getValueType(&who, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12992:	|         movea.l 20(sp),a0
   12996:	|         move.l 24(a0),d0
   1299a:	|         move.l d0,-(sp)
   1299c:	|         pea 7 <_start+0x7>
   129a0:	|         lea 8(sp),a0
   129a4:	|         move.l a0,-(sp)
   129a6:	|         jsr 147f4 <getValueType>
   129ac:	|         lea 12(sp),sp
   129b0:	|         tst.w d0
   129b2:	|     /-- bne.s 129b8 <builtIn_setCharacterSpinSpeed+0x62>
   129b4:	|     |   moveq #1,d0
   129b6:	+-----|-- bra.s 12a1c <builtIn_setCharacterSpinSpeed+0xc6>
	trimStack (&fun -> stack);
   129b8:	|     \-> moveq #24,d0
   129ba:	|         add.l 20(sp),d0
   129be:	|         move.l d0,-(sp)
   129c0:	|         jsr 15178 <trimStack>
   129c6:	|         addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (who);
   129c8:	|         move.l (sp),d0
   129ca:	|         move.l d0,-(sp)
   129cc:	|         jsr a648 <findPerson>
   129d2:	|         addq.l #4,sp
   129d4:	|         move.l d0,8(sp)

	if (thisPerson) {
   129d8:	|  /----- beq.s 12a02 <builtIn_setCharacterSpinSpeed+0xac>
		thisPerson -> spinSpeed = speed;
   129da:	|  |      move.l 4(sp),d0
   129de:	|  |      movea.l 8(sp),a0
   129e2:	|  |      move.l d0,122(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   129e6:	|  |      moveq #28,d0
   129e8:	|  |      add.l 20(sp),d0
   129ec:	|  |      pea 1 <_start+0x1>
   129f0:	|  |      pea 1 <_start+0x1>
   129f4:	|  |      move.l d0,-(sp)
   129f6:	|  |      jsr 150e6 <setVariable>
   129fc:	|  |      lea 12(sp),sp
   12a00:	|  |  /-- bra.s 12a1a <builtIn_setCharacterSpinSpeed+0xc4>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   12a02:	|  \--|-> moveq #28,d0
   12a04:	|     |   add.l 20(sp),d0
   12a08:	|     |   clr.l -(sp)
   12a0a:	|     |   pea 1 <_start+0x1>
   12a0e:	|     |   move.l d0,-(sp)
   12a10:	|     |   jsr 150e6 <setVariable>
   12a16:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   12a1a:	|     \-> moveq #2,d0
}
   12a1c:	\-------> lea 12(sp),sp
   12a20:	          rts

00012a22 <builtIn_setCharacterAngleOffset>:

builtIn(setCharacterAngleOffset)
{
   12a22:	          lea -12(sp),sp
	UNUSEDALL
	int angle, who;
	if (! getValueType(&angle, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12a26:	          movea.l 20(sp),a0
   12a2a:	          move.l 24(a0),d0
   12a2e:	          move.l d0,-(sp)
   12a30:	          pea 1 <_start+0x1>
   12a34:	          moveq #12,d0
   12a36:	          add.l sp,d0
   12a38:	          move.l d0,-(sp)
   12a3a:	          jsr 147f4 <getValueType>
   12a40:	          lea 12(sp),sp
   12a44:	          tst.w d0
   12a46:	      /-- bne.s 12a4e <builtIn_setCharacterAngleOffset+0x2c>
   12a48:	      |   moveq #1,d0
   12a4a:	/-----|-- bra.w 12ae8 <builtIn_setCharacterAngleOffset+0xc6>
	trimStack (&fun -> stack);
   12a4e:	|     \-> moveq #24,d0
   12a50:	|         add.l 20(sp),d0
   12a54:	|         move.l d0,-(sp)
   12a56:	|         jsr 15178 <trimStack>
   12a5c:	|         addq.l #4,sp
	if (! getValueType(&who, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12a5e:	|         movea.l 20(sp),a0
   12a62:	|         move.l 24(a0),d0
   12a66:	|         move.l d0,-(sp)
   12a68:	|         pea 7 <_start+0x7>
   12a6c:	|         lea 8(sp),a0
   12a70:	|         move.l a0,-(sp)
   12a72:	|         jsr 147f4 <getValueType>
   12a78:	|         lea 12(sp),sp
   12a7c:	|         tst.w d0
   12a7e:	|     /-- bne.s 12a84 <builtIn_setCharacterAngleOffset+0x62>
   12a80:	|     |   moveq #1,d0
   12a82:	+-----|-- bra.s 12ae8 <builtIn_setCharacterAngleOffset+0xc6>
	trimStack (&fun -> stack);
   12a84:	|     \-> moveq #24,d0
   12a86:	|         add.l 20(sp),d0
   12a8a:	|         move.l d0,-(sp)
   12a8c:	|         jsr 15178 <trimStack>
   12a92:	|         addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (who);
   12a94:	|         move.l (sp),d0
   12a96:	|         move.l d0,-(sp)
   12a98:	|         jsr a648 <findPerson>
   12a9e:	|         addq.l #4,sp
   12aa0:	|         move.l d0,8(sp)

	if (thisPerson) {
   12aa4:	|  /----- beq.s 12ace <builtIn_setCharacterAngleOffset+0xac>
		thisPerson -> angleOffset = angle;
   12aa6:	|  |      move.l 4(sp),d0
   12aaa:	|  |      movea.l 8(sp),a0
   12aae:	|  |      move.l d0,100(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   12ab2:	|  |      moveq #28,d0
   12ab4:	|  |      add.l 20(sp),d0
   12ab8:	|  |      pea 1 <_start+0x1>
   12abc:	|  |      pea 1 <_start+0x1>
   12ac0:	|  |      move.l d0,-(sp)
   12ac2:	|  |      jsr 150e6 <setVariable>
   12ac8:	|  |      lea 12(sp),sp
   12acc:	|  |  /-- bra.s 12ae6 <builtIn_setCharacterAngleOffset+0xc4>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   12ace:	|  \--|-> moveq #28,d0
   12ad0:	|     |   add.l 20(sp),d0
   12ad4:	|     |   clr.l -(sp)
   12ad6:	|     |   pea 1 <_start+0x1>
   12ada:	|     |   move.l d0,-(sp)
   12adc:	|     |   jsr 150e6 <setVariable>
   12ae2:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   12ae6:	|     \-> moveq #2,d0
}
   12ae8:	\-------> lea 12(sp),sp
   12aec:	          rts

00012aee <builtIn_transitionMode>:


builtIn(transitionMode)
{
   12aee:	       subq.l #4,sp
	UNUSEDALL
	int n;
	if (! getValueType(&n, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12af0:	       movea.l 12(sp),a0
   12af4:	       move.l 24(a0),d0
   12af8:	       move.l d0,-(sp)
   12afa:	       pea 1 <_start+0x1>
   12afe:	       move.l sp,d0
   12b00:	       addq.l #8,d0
   12b02:	       move.l d0,-(sp)
   12b04:	       jsr 147f4 <getValueType>
   12b0a:	       lea 12(sp),sp
   12b0e:	       tst.w d0
   12b10:	   /-- bne.s 12b16 <builtIn_transitionMode+0x28>
   12b12:	   |   moveq #1,d0
   12b14:	/--|-- bra.s 12b4c <builtIn_transitionMode+0x5e>
	fadeMode = n;
   12b16:	|  \-> move.l (sp),d0
   12b18:	|      move.l d0,d0
   12b1a:	|      move.b d0,1c8a4 <fadeMode>
	trimStack (&fun -> stack);
   12b20:	|      moveq #24,d0
   12b22:	|      add.l 12(sp),d0
   12b26:	|      move.l d0,-(sp)
   12b28:	|      jsr 15178 <trimStack>
   12b2e:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   12b30:	|      moveq #28,d0
   12b32:	|      add.l 12(sp),d0
   12b36:	|      pea 1 <_start+0x1>
   12b3a:	|      pea 1 <_start+0x1>
   12b3e:	|      move.l d0,-(sp)
   12b40:	|      jsr 150e6 <setVariable>
   12b46:	|      lea 12(sp),sp
	return BR_CONTINUE;
   12b4a:	|      moveq #2,d0
}
   12b4c:	\----> addq.l #4,sp
   12b4e:	       rts

00012b50 <builtIn__rem_updateDisplay>:

// Removed function - does nothing
builtIn(_rem_updateDisplay)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   12b50:	moveq #24,d0
   12b52:	add.l 8(sp),d0
   12b56:	move.l d0,-(sp)
   12b58:	jsr 15178 <trimStack>
   12b5e:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, TRUE);
   12b60:	moveq #28,d0
   12b62:	add.l 8(sp),d0
   12b66:	pea 1 <_start+0x1>
   12b6a:	pea 1 <_start+0x1>
   12b6e:	move.l d0,-(sp)
   12b70:	jsr 150e6 <setVariable>
   12b76:	lea 12(sp),sp
	return BR_CONTINUE;
   12b7a:	moveq #2,d0
}
   12b7c:	rts

00012b7e <builtIn_getSoundCache>:
	if (! checkNew (&fun -> reg.varData.theStack)) return BR_ERROR;
	fun -> reg.varData.theStack -> first = NULL;
	fun -> reg.varData.theStack -> last = NULL;
	fun -> reg.varData.theStack -> timesUsed = 1;
	if (! getSoundCacheStack (&fun -> reg.varData.theStack)) return BR_ERROR; Todo: Amigize this?*/
	KPrintF("getSoundCache: Not implemented yet for Amiga");
   12b7e:	pea 19c1d <graphics.c.1c13408a+0x35>
   12b84:	jsr 17254 <KPrintF>
   12b8a:	addq.l #4,sp
	return BR_CONTINUE;
   12b8c:	moveq #2,d0
}
   12b8e:	rts

00012b90 <builtIn_saveCustomData>:

builtIn(saveCustomData)
{
   12b90:	       lea -16(sp),sp
   12b94:	       move.l a6,-(sp)
	UNUSEDALL
	// saveCustomData (thisStack, fileName);
	char * fileNameB = getTextFromAnyVar(&(fun->stack->thisVar));
   12b96:	       movea.l 28(sp),a0
   12b9a:	       move.l 24(a0),d0
   12b9e:	       move.l d0,-(sp)
   12ba0:	       jsr 14dca <getTextFromAnyVar>
   12ba6:	       addq.l #4,sp
   12ba8:	       move.l d0,16(sp)
	if (!fileNameB) return BR_ERROR;
   12bac:	   /-- bne.s 12bb4 <builtIn_saveCustomData+0x24>
   12bae:	   |   moveq #1,d0
   12bb0:	/--|-- bra.w 12c66 <builtIn_saveCustomData+0xd6>

	char * fileName = encodeFilename(fileNameB);
   12bb4:	|  \-> move.l 16(sp),-(sp)
   12bb8:	|      jsr 2fe <encodeFilename>
   12bbe:	|      addq.l #4,sp
   12bc0:	|      move.l d0,12(sp)
	FreeVec(fileNameB);
   12bc4:	|      move.l 16(sp),8(sp)
   12bca:	|      move.l 1c9ca <SysBase>,d0
   12bd0:	|      movea.l d0,a6
   12bd2:	|      movea.l 8(sp),a1
   12bd6:	|      jsr -690(a6)

	if (failSecurityCheck(fileName)) return BR_ERROR;
   12bda:	|      move.l 12(sp),-(sp)
   12bde:	|      jsr e32a <failSecurityCheck>
   12be4:	|      addq.l #4,sp
   12be6:	|      tst.w d0
   12be8:	|  /-- beq.s 12bee <builtIn_saveCustomData+0x5e>
   12bea:	|  |   moveq #1,d0
   12bec:	+--|-- bra.s 12c66 <builtIn_saveCustomData+0xd6>
	trimStack(&fun->stack);
   12bee:	|  \-> moveq #24,d0
   12bf0:	|      add.l 28(sp),d0
   12bf4:	|      move.l d0,-(sp)
   12bf6:	|      jsr 15178 <trimStack>
   12bfc:	|      addq.l #4,sp

	if (fun->stack->thisVar.varType != SVT_STACK) {
   12bfe:	|      movea.l 28(sp),a0
   12c02:	|      movea.l 24(a0),a0
   12c06:	|      move.l (a0),d0
   12c08:	|      moveq #6,d1
   12c0a:	|      cmp.l d0,d1
   12c0c:	|  /-- beq.s 12c20 <builtIn_saveCustomData+0x90>
		KPrintF("First parameter isn't a stack");
   12c0e:	|  |   pea 19c4a <graphics.c.1c13408a+0x62>
   12c14:	|  |   jsr 17254 <KPrintF>
   12c1a:	|  |   addq.l #4,sp
		return BR_ERROR;
   12c1c:	|  |   moveq #1,d0
   12c1e:	+--|-- bra.s 12c66 <builtIn_saveCustomData+0xd6>
	}
	if (!stackToFile(fileName, &fun->stack->thisVar)) return BR_ERROR;
   12c20:	|  \-> movea.l 28(sp),a0
   12c24:	|      move.l 24(a0),d0
   12c28:	|      move.l d0,-(sp)
   12c2a:	|      move.l 16(sp),-(sp)
   12c2e:	|      jsr df7a <stackToFile>
   12c34:	|      addq.l #8,sp
   12c36:	|      tst.w d0
   12c38:	|  /-- bne.s 12c3e <builtIn_saveCustomData+0xae>
   12c3a:	|  |   moveq #1,d0
   12c3c:	+--|-- bra.s 12c66 <builtIn_saveCustomData+0xd6>
	trimStack(&fun->stack);
   12c3e:	|  \-> moveq #24,d0
   12c40:	|      add.l 28(sp),d0
   12c44:	|      move.l d0,-(sp)
   12c46:	|      jsr 15178 <trimStack>
   12c4c:	|      addq.l #4,sp
	FreeVec(fileName);
   12c4e:	|      move.l 12(sp),4(sp)
   12c54:	|      move.l 1c9ca <SysBase>,d0
   12c5a:	|      movea.l d0,a6
   12c5c:	|      movea.l 4(sp),a1
   12c60:	|      jsr -690(a6)
	return BR_CONTINUE;
   12c64:	|      moveq #2,d0
}
   12c66:	\----> movea.l (sp)+,a6
   12c68:	       lea 16(sp),sp
   12c6c:	       rts

00012c6e <builtIn_loadCustomData>:

builtIn(loadCustomData)
{
   12c6e:	       lea -28(sp),sp
   12c72:	       move.l a6,-(sp)
	UNUSEDALL

	char * newTextA = getTextFromAnyVar(&(fun->stack->thisVar));
   12c74:	       movea.l 40(sp),a0
   12c78:	       move.l 24(a0),d0
   12c7c:	       move.l d0,-(sp)
   12c7e:	       jsr 14dca <getTextFromAnyVar>
   12c84:	       addq.l #4,sp
   12c86:	       move.l d0,28(sp)
	if (!newTextA) return BR_ERROR;
   12c8a:	   /-- bne.s 12c92 <builtIn_loadCustomData+0x24>
   12c8c:	   |   moveq #1,d0
   12c8e:	/--|-- bra.w 12d8e <builtIn_loadCustomData+0x120>

	char * newText = encodeFilename(newTextA);
   12c92:	|  \-> move.l 28(sp),-(sp)
   12c96:	|      jsr 2fe <encodeFilename>
   12c9c:	|      addq.l #4,sp
   12c9e:	|      move.l d0,24(sp)
	FreeVec(newTextA);
   12ca2:	|      move.l 28(sp),20(sp)
   12ca8:	|      move.l 1c9ca <SysBase>,d0
   12cae:	|      movea.l d0,a6
   12cb0:	|      movea.l 20(sp),a1
   12cb4:	|      jsr -690(a6)

	if (failSecurityCheck(newText)) return BR_ERROR;
   12cb8:	|      move.l 24(sp),-(sp)
   12cbc:	|      jsr e32a <failSecurityCheck>
   12cc2:	|      addq.l #4,sp
   12cc4:	|      tst.w d0
   12cc6:	|  /-- beq.s 12cce <builtIn_loadCustomData+0x60>
   12cc8:	|  |   moveq #1,d0
   12cca:	+--|-- bra.w 12d8e <builtIn_loadCustomData+0x120>
	trimStack(&fun->stack);
   12cce:	|  \-> moveq #24,d0
   12cd0:	|      add.l 40(sp),d0
   12cd4:	|      move.l d0,-(sp)
   12cd6:	|      jsr 15178 <trimStack>
   12cdc:	|      addq.l #4,sp

	unlinkVar(&fun->reg);
   12cde:	|      moveq #28,d0
   12ce0:	|      add.l 40(sp),d0
   12ce4:	|      move.l d0,-(sp)
   12ce6:	|      jsr 14a42 <unlinkVar>
   12cec:	|      addq.l #4,sp
	fun->reg.varType = SVT_STACK;
   12cee:	|      movea.l 40(sp),a0
   12cf2:	|      moveq #6,d0
   12cf4:	|      move.l d0,28(a0)
	fun->reg.varData.theStack = AllocVec(sizeof(struct stackHandler), MEMF_ANY);
   12cf8:	|      moveq #12,d0
   12cfa:	|      move.l d0,16(sp)
   12cfe:	|      clr.l 12(sp)
   12d02:	|      move.l 1c9ca <SysBase>,d0
   12d08:	|      movea.l d0,a6
   12d0a:	|      move.l 16(sp),d0
   12d0e:	|      move.l 12(sp),d1
   12d12:	|      jsr -684(a6)
   12d16:	|      move.l d0,8(sp)
   12d1a:	|      move.l 8(sp),d0
   12d1e:	|      movea.l 40(sp),a0
   12d22:	|      move.l d0,32(a0)
	if (!fun->reg.varData.theStack) return BR_ERROR;
   12d26:	|      movea.l 40(sp),a0
   12d2a:	|      move.l 32(a0),d0
   12d2e:	|  /-- bne.s 12d34 <builtIn_loadCustomData+0xc6>
   12d30:	|  |   moveq #1,d0
   12d32:	+--|-- bra.s 12d8e <builtIn_loadCustomData+0x120>
	fun->reg.varData.theStack->first = NULL;
   12d34:	|  \-> movea.l 40(sp),a0
   12d38:	|      movea.l 32(a0),a0
   12d3c:	|      clr.l (a0)
	fun->reg.varData.theStack->last = NULL;
   12d3e:	|      movea.l 40(sp),a0
   12d42:	|      movea.l 32(a0),a0
   12d46:	|      clr.l 4(a0)
	fun->reg.varData.theStack->timesUsed = 1;
   12d4a:	|      movea.l 40(sp),a0
   12d4e:	|      movea.l 32(a0),a0
   12d52:	|      moveq #1,d0
   12d54:	|      move.l d0,8(a0)
	if (!fileToStack(newText, fun->reg.varData.theStack)) return BR_ERROR;
   12d58:	|      movea.l 40(sp),a0
   12d5c:	|      move.l 32(a0),d0
   12d60:	|      move.l d0,-(sp)
   12d62:	|      move.l 28(sp),-(sp)
   12d66:	|      jsr d9b4 <fileToStack>
   12d6c:	|      addq.l #8,sp
   12d6e:	|      tst.w d0
   12d70:	|  /-- bne.s 12d76 <builtIn_loadCustomData+0x108>
   12d72:	|  |   moveq #1,d0
   12d74:	+--|-- bra.s 12d8e <builtIn_loadCustomData+0x120>
	FreeVec(newText);
   12d76:	|  \-> move.l 24(sp),4(sp)
   12d7c:	|      move.l 1c9ca <SysBase>,d0
   12d82:	|      movea.l d0,a6
   12d84:	|      movea.l 4(sp),a1
   12d88:	|      jsr -690(a6)
	return BR_CONTINUE;
   12d8c:	|      moveq #2,d0
}
   12d8e:	\----> movea.l (sp)+,a6
   12d90:	       lea 28(sp),sp
   12d94:	       rts

00012d96 <builtIn_setCustomEncoding>:

builtIn(setCustomEncoding)
{
   12d96:	       subq.l #4,sp
	UNUSEDALL
	int n;
	if (! getValueType(&n, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12d98:	       movea.l 12(sp),a0
   12d9c:	       move.l 24(a0),d0
   12da0:	       move.l d0,-(sp)
   12da2:	       pea 1 <_start+0x1>
   12da6:	       move.l sp,d0
   12da8:	       addq.l #8,d0
   12daa:	       move.l d0,-(sp)
   12dac:	       jsr 147f4 <getValueType>
   12db2:	       lea 12(sp),sp
   12db6:	       tst.w d0
   12db8:	   /-- bne.s 12dbe <builtIn_setCustomEncoding+0x28>
   12dba:	   |   moveq #1,d0
   12dbc:	/--|-- bra.s 12df4 <builtIn_setCustomEncoding+0x5e>
	saveEncoding = n;
   12dbe:	|  \-> move.l (sp),d0
   12dc0:	|      move.l d0,d0
   12dc2:	|      move.w d0,1ca82 <saveEncoding>
	trimStack (&fun -> stack);
   12dc8:	|      moveq #24,d0
   12dca:	|      add.l 12(sp),d0
   12dce:	|      move.l d0,-(sp)
   12dd0:	|      jsr 15178 <trimStack>
   12dd6:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   12dd8:	|      moveq #28,d0
   12dda:	|      add.l 12(sp),d0
   12dde:	|      pea 1 <_start+0x1>
   12de2:	|      pea 1 <_start+0x1>
   12de6:	|      move.l d0,-(sp)
   12de8:	|      jsr 150e6 <setVariable>
   12dee:	|      lea 12(sp),sp
	return BR_CONTINUE;
   12df2:	|      moveq #2,d0
}
   12df4:	\----> addq.l #4,sp
   12df6:	       rts

00012df8 <builtIn_freeSound>:

builtIn(freeSound)
{
   12df8:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   12dfa:	       movea.l 12(sp),a0
   12dfe:	       move.l 24(a0),d0
   12e02:	       move.l d0,-(sp)
   12e04:	       pea 5 <_start+0x5>
   12e08:	       move.l sp,d0
   12e0a:	       addq.l #8,d0
   12e0c:	       move.l d0,-(sp)
   12e0e:	       jsr 147f4 <getValueType>
   12e14:	       lea 12(sp),sp
   12e18:	       tst.w d0
   12e1a:	   /-- bne.s 12e20 <builtIn_freeSound+0x28>
   12e1c:	   |   moveq #1,d0
   12e1e:	/--|-- bra.s 12e3e <builtIn_freeSound+0x46>
	trimStack (&fun -> stack);
   12e20:	|  \-> moveq #24,d0
   12e22:	|      add.l 12(sp),d0
   12e26:	|      move.l d0,-(sp)
   12e28:	|      jsr 15178 <trimStack>
   12e2e:	|      addq.l #4,sp
	huntKillFreeSound (v);
   12e30:	|      move.l (sp),d0
   12e32:	|      move.l d0,-(sp)
   12e34:	|      jsr d176 <huntKillFreeSound>
   12e3a:	|      addq.l #4,sp
	return BR_CONTINUE;
   12e3c:	|      moveq #2,d0
}
   12e3e:	\----> addq.l #4,sp
   12e40:	       rts

00012e42 <builtIn_parallaxAdd>:

builtIn(parallaxAdd)
{
   12e42:	       lea -12(sp),sp
   12e46:	       move.l d2,-(sp)
	/*if (frozenStuff) {
		fatal ("Can't set background parallax image while frozen");
		return BR_ERROR;
	} else { Todo: Amigize this*/
		int wrapX, wrapY, v;
		if (! getValueType(&wrapY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12e48:	       movea.l 24(sp),a0
   12e4c:	       move.l 24(a0),d0
   12e50:	       move.l d0,-(sp)
   12e52:	       pea 1 <_start+0x1>
   12e56:	       moveq #16,d0
   12e58:	       add.l sp,d0
   12e5a:	       move.l d0,-(sp)
   12e5c:	       jsr 147f4 <getValueType>
   12e62:	       lea 12(sp),sp
   12e66:	       tst.w d0
   12e68:	   /-- bne.s 12e70 <builtIn_parallaxAdd+0x2e>
   12e6a:	   |   moveq #1,d0
   12e6c:	/--|-- bra.w 12f44 <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   12e70:	|  \-> moveq #24,d0
   12e72:	|      add.l 24(sp),d0
   12e76:	|      move.l d0,-(sp)
   12e78:	|      jsr 15178 <trimStack>
   12e7e:	|      addq.l #4,sp
		if (! getValueType(&wrapX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12e80:	|      movea.l 24(sp),a0
   12e84:	|      move.l 24(a0),d0
   12e88:	|      move.l d0,-(sp)
   12e8a:	|      pea 1 <_start+0x1>
   12e8e:	|      moveq #20,d0
   12e90:	|      add.l sp,d0
   12e92:	|      move.l d0,-(sp)
   12e94:	|      jsr 147f4 <getValueType>
   12e9a:	|      lea 12(sp),sp
   12e9e:	|      tst.w d0
   12ea0:	|  /-- bne.s 12ea8 <builtIn_parallaxAdd+0x66>
   12ea2:	|  |   moveq #1,d0
   12ea4:	+--|-- bra.w 12f44 <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   12ea8:	|  \-> moveq #24,d0
   12eaa:	|      add.l 24(sp),d0
   12eae:	|      move.l d0,-(sp)
   12eb0:	|      jsr 15178 <trimStack>
   12eb6:	|      addq.l #4,sp
		if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   12eb8:	|      movea.l 24(sp),a0
   12ebc:	|      move.l 24(a0),d0
   12ec0:	|      move.l d0,-(sp)
   12ec2:	|      pea 5 <_start+0x5>
   12ec6:	|      lea 12(sp),a0
   12eca:	|      move.l a0,-(sp)
   12ecc:	|      jsr 147f4 <getValueType>
   12ed2:	|      lea 12(sp),sp
   12ed6:	|      tst.w d0
   12ed8:	|  /-- bne.s 12ede <builtIn_parallaxAdd+0x9c>
   12eda:	|  |   moveq #1,d0
   12edc:	+--|-- bra.s 12f44 <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   12ede:	|  \-> moveq #24,d0
   12ee0:	|      add.l 24(sp),d0
   12ee4:	|      move.l d0,-(sp)
   12ee6:	|      jsr 15178 <trimStack>
   12eec:	|      addq.l #4,sp

		if (! loadParallax (v, wrapX, wrapY)) return BR_ERROR;
   12eee:	|      move.l 8(sp),d0
   12ef2:	|      move.l d0,d0
   12ef4:	|      moveq #0,d2
   12ef6:	|      move.w d0,d2
   12ef8:	|      move.l 12(sp),d0
   12efc:	|      move.l d0,d0
   12efe:	|      moveq #0,d1
   12f00:	|      move.w d0,d1
   12f02:	|      move.l 4(sp),d0
   12f06:	|      move.l d0,d0
   12f08:	|      move.w d0,d0
   12f0a:	|      andi.l #65535,d0
   12f10:	|      move.l d2,-(sp)
   12f12:	|      move.l d1,-(sp)
   12f14:	|      move.l d0,-(sp)
   12f16:	|      jsr d392 <loadParallax>
   12f1c:	|      lea 12(sp),sp
   12f20:	|      tst.w d0
   12f22:	|  /-- bne.s 12f28 <builtIn_parallaxAdd+0xe6>
   12f24:	|  |   moveq #1,d0
   12f26:	+--|-- bra.s 12f44 <builtIn_parallaxAdd+0x102>
		setVariable (&fun -> reg, SVT_INT, 1);
   12f28:	|  \-> moveq #28,d0
   12f2a:	|      add.l 24(sp),d0
   12f2e:	|      pea 1 <_start+0x1>
   12f32:	|      pea 1 <_start+0x1>
   12f36:	|      move.l d0,-(sp)
   12f38:	|      jsr 150e6 <setVariable>
   12f3e:	|      lea 12(sp),sp
	//}
	return BR_CONTINUE;
   12f42:	|      moveq #2,d0
}
   12f44:	\----> move.l (sp)+,d2
   12f46:	       lea 12(sp),sp
   12f4a:	       rts

00012f4c <builtIn_parallaxClear>:

builtIn(parallaxClear)
{
	UNUSEDALL
	killParallax ();
   12f4c:	jsr d2ca <killParallax>
	setVariable (&fun -> reg, SVT_INT, 1);
   12f52:	moveq #28,d0
   12f54:	add.l 8(sp),d0
   12f58:	pea 1 <_start+0x1>
   12f5c:	pea 1 <_start+0x1>
   12f60:	move.l d0,-(sp)
   12f62:	jsr 150e6 <setVariable>
   12f68:	lea 12(sp),sp
	return BR_CONTINUE;
   12f6c:	moveq #2,d0
}
   12f6e:	rts

00012f70 <builtIn_getPixelColour>:
	if (! checkNew (&fun -> reg.varData.theStack)) return BR_ERROR;
	fun -> reg.varData.theStack -> first = NULL;
	fun -> reg.varData.theStack -> last = NULL;
	fun -> reg.varData.theStack -> timesUsed = 1;
	if (! getRGBIntoStack (x, y, &fun -> reg.varData.theStack)) return BR_ERROR; Todo: Amigize this*/
	KPrintF("getPixelColor: Not implemented for Amiga");
   12f70:	pea 19c68 <graphics.c.1c13408a+0x80>
   12f76:	jsr 17254 <KPrintF>
   12f7c:	addq.l #4,sp

	return BR_CONTINUE;
   12f7e:	moveq #2,d0
}
   12f80:	rts

00012f82 <builtIn_makeFastArray>:

builtIn(makeFastArray)
{
   12f82:	             subq.l #8,sp
	UNUSEDALL
	switch (fun -> stack -> thisVar.varType) {
   12f84:	             movea.l 16(sp),a0
   12f88:	             movea.l 24(a0),a0
   12f8c:	             move.l (a0),d0
   12f8e:	             moveq #1,d1
   12f90:	             cmp.l d0,d1
   12f92:	      /----- beq.s 12fda <builtIn_makeFastArray+0x58>
   12f94:	      |      moveq #6,d1
   12f96:	      |      cmp.l d0,d1
   12f98:	/-----|----- bne.s 13018 <builtIn_makeFastArray+0x96>
		case SVT_STACK:
		{
			BOOL success = makeFastArrayFromStack (&fun -> reg, fun -> stack -> thisVar.varData.theStack);
   12f9a:	|     |      movea.l 16(sp),a0
   12f9e:	|     |      movea.l 24(a0),a0
   12fa2:	|     |      move.l 4(a0),d1
   12fa6:	|     |      moveq #28,d0
   12fa8:	|     |      add.l 16(sp),d0
   12fac:	|     |      move.l d1,-(sp)
   12fae:	|     |      move.l d0,-(sp)
   12fb0:	|     |      jsr 148a6 <makeFastArrayFromStack>
   12fb6:	|     |      addq.l #8,sp
   12fb8:	|     |      move.w d0,6(sp)
			trimStack (&fun -> stack);
   12fbc:	|     |      moveq #24,d0
   12fbe:	|     |      add.l 16(sp),d0
   12fc2:	|     |      move.l d0,-(sp)
   12fc4:	|     |      jsr 15178 <trimStack>
   12fca:	|     |      addq.l #4,sp
			return success ? BR_CONTINUE : BR_ERROR;
   12fcc:	|     |      tst.w 6(sp)
   12fd0:	|     |  /-- beq.s 12fd6 <builtIn_makeFastArray+0x54>
   12fd2:	|     |  |   moveq #2,d0
   12fd4:	|  /--|--|-- bra.s 1302a <builtIn_makeFastArray+0xa8>
   12fd6:	|  |  |  \-> moveq #1,d0
   12fd8:	|  +--|----- bra.s 1302a <builtIn_makeFastArray+0xa8>
		}
			break;

		case SVT_INT:
		{
			int i = fun -> stack -> thisVar.varData.intValue;
   12fda:	|  |  \----> movea.l 16(sp),a0
   12fde:	|  |         movea.l 24(a0),a0
   12fe2:	|  |         move.l 4(a0),2(sp)
			trimStack (&fun -> stack);
   12fe8:	|  |         moveq #24,d0
   12fea:	|  |         add.l 16(sp),d0
   12fee:	|  |         move.l d0,-(sp)
   12ff0:	|  |         jsr 15178 <trimStack>
   12ff6:	|  |         addq.l #4,sp
			return makeFastArraySize (&fun -> reg, i) ? BR_CONTINUE : BR_ERROR;
   12ff8:	|  |         moveq #28,d0
   12ffa:	|  |         add.l 16(sp),d0
   12ffe:	|  |         move.l 2(sp),-(sp)
   13002:	|  |         move.l d0,-(sp)
   13004:	|  |         jsr 14910 <makeFastArraySize>
   1300a:	|  |         addq.l #8,sp
   1300c:	|  |         tst.w d0
   1300e:	|  |     /-- beq.s 13014 <builtIn_makeFastArray+0x92>
   13010:	|  |     |   moveq #2,d0
   13012:	|  +-----|-- bra.s 1302a <builtIn_makeFastArray+0xa8>
   13014:	|  |     \-> moveq #1,d0
   13016:	|  +-------- bra.s 1302a <builtIn_makeFastArray+0xa8>
		}
			break;

		default:
			break;
   13018:	\--|-------> nop
	}
	KPrintF ("Parameter must be a number or a stack.");
   1301a:	   |         pea 19c91 <graphics.c.1c13408a+0xa9>
   13020:	   |         jsr 17254 <KPrintF>
   13026:	   |         addq.l #4,sp
	return BR_ERROR;
   13028:	   |         moveq #1,d0
}
   1302a:	   \-------> addq.l #8,sp
   1302c:	             rts

0001302e <builtIn_getCharacterScale>:

builtIn(getCharacterScale)
{
   1302e:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   13030:	          movea.l 16(sp),a0
   13034:	          move.l 24(a0),d0
   13038:	          move.l d0,-(sp)
   1303a:	          pea 7 <_start+0x7>
   1303e:	          move.l sp,d0
   13040:	          addq.l #8,d0
   13042:	          move.l d0,-(sp)
   13044:	          jsr 147f4 <getValueType>
   1304a:	          lea 12(sp),sp
   1304e:	          tst.w d0
   13050:	      /-- bne.s 13056 <builtIn_getCharacterScale+0x28>
   13052:	      |   moveq #1,d0
   13054:	/-----|-- bra.s 130d0 <builtIn_getCharacterScale+0xa2>
	trimStack (&fun -> stack);
   13056:	|     \-> moveq #24,d0
   13058:	|         add.l 16(sp),d0
   1305c:	|         move.l d0,-(sp)
   1305e:	|         jsr 15178 <trimStack>
   13064:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   13066:	|         move.l (sp),d0
   13068:	|         move.l d0,-(sp)
   1306a:	|         jsr a648 <findPerson>
   13070:	|         addq.l #4,sp
   13072:	|         move.l d0,4(sp)
	if (pers) {
   13076:	|  /----- beq.s 130b6 <builtIn_getCharacterScale+0x88>
		setVariable (&fun -> reg, SVT_INT, pers -> scale * (FLOAT) 100); 
   13078:	|  |      movea.l 4(sp),a0
   1307c:	|  |      move.l 32(a0),d0
   13080:	|  |      move.l #1120403456,-(sp)
   13086:	|  |      move.l d0,-(sp)
   13088:	|  |      jsr 17738 <__mulsf3>
   1308e:	|  |      addq.l #8,sp
   13090:	|  |      move.l d0,-(sp)
   13092:	|  |      jsr 1761e <__fixsfsi>
   13098:	|  |      addq.l #4,sp
   1309a:	|  |      move.l d0,d1
   1309c:	|  |      moveq #28,d0
   1309e:	|  |      add.l 16(sp),d0
   130a2:	|  |      move.l d1,-(sp)
   130a4:	|  |      pea 1 <_start+0x1>
   130a8:	|  |      move.l d0,-(sp)
   130aa:	|  |      jsr 150e6 <setVariable>
   130b0:	|  |      lea 12(sp),sp
   130b4:	|  |  /-- bra.s 130ce <builtIn_getCharacterScale+0xa0>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   130b6:	|  \--|-> moveq #28,d0
   130b8:	|     |   add.l 16(sp),d0
   130bc:	|     |   clr.l -(sp)
   130be:	|     |   pea 1 <_start+0x1>
   130c2:	|     |   move.l d0,-(sp)
   130c4:	|     |   jsr 150e6 <setVariable>
   130ca:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   130ce:	|     \-> moveq #2,d0
}
   130d0:	\-------> addq.l #8,sp
   130d2:	          rts

000130d4 <builtIn_getLanguageID>:

builtIn(getLanguageID)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, gameSettings.languageID);
   130d4:	move.l 1caa6 <gameSettings>,d0
   130da:	move.l d0,d1
   130dc:	moveq #28,d0
   130de:	add.l 8(sp),d0
   130e2:	move.l d1,-(sp)
   130e4:	pea 1 <_start+0x1>
   130e8:	move.l d0,-(sp)
   130ea:	jsr 150e6 <setVariable>
   130f0:	lea 12(sp),sp
	return BR_CONTINUE;
   130f4:	moveq #2,d0
}
   130f6:	rts

000130f8 <builtIn__rem_launchWith>:
// Removed function
builtIn(_rem_launchWith)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   130f8:	moveq #24,d0
   130fa:	add.l 8(sp),d0
   130fe:	move.l d0,-(sp)
   13100:	jsr 15178 <trimStack>
   13106:	addq.l #4,sp
	trimStack (&fun -> stack);
   13108:	moveq #24,d0
   1310a:	add.l 8(sp),d0
   1310e:	move.l d0,-(sp)
   13110:	jsr 15178 <trimStack>
   13116:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, FALSE);
   13118:	moveq #28,d0
   1311a:	add.l 8(sp),d0
   1311e:	clr.l -(sp)
   13120:	pea 1 <_start+0x1>
   13124:	move.l d0,-(sp)
   13126:	jsr 150e6 <setVariable>
   1312c:	lea 12(sp),sp

	return BR_CONTINUE;
   13130:	moveq #2,d0

}
   13132:	rts

00013134 <builtIn_getFramesPerSecond>:

builtIn(getFramesPerSecond)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, lastFramesPerSecond);
   13134:	move.l 1c34a <lastFramesPerSecond>,d1
   1313a:	moveq #28,d0
   1313c:	add.l 8(sp),d0
   13140:	move.l d1,-(sp)
   13142:	pea 1 <_start+0x1>
   13146:	move.l d0,-(sp)
   13148:	jsr 150e6 <setVariable>
   1314e:	lea 12(sp),sp
	return BR_CONTINUE;
   13152:	moveq #2,d0
}
   13154:	rts

00013156 <builtIn_showThumbnail>:
	//				deb ("aaaaa is still ", aaaaa);
	delete[] aaaaa;
	//				deb ("Deleted", "aaaaa");
	showThumbnail (file, x, y);
	delete[] file; Todo Amigize this?*/
	return BR_CONTINUE;
   13156:	moveq #2,d0
}
   13158:	rts

0001315a <builtIn_setThumbnailSize>:

builtIn(setThumbnailSize)
{
   1315a:	          lea -52(sp),sp
	UNUSEDALL
	if (! getValueType(&thumbHeight, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1315e:	          movea.l 60(sp),a0
   13162:	          move.l 24(a0),d0
   13166:	          move.l d0,-(sp)
   13168:	          pea 1 <_start+0x1>
   1316c:	          pea 1c8e0 <thumbHeight>
   13172:	          jsr 147f4 <getValueType>
   13178:	          lea 12(sp),sp
   1317c:	          tst.w d0
   1317e:	      /-- bne.s 13186 <builtIn_setThumbnailSize+0x2c>
   13180:	      |   moveq #1,d0
   13182:	/-----|-- bra.w 13242 <builtIn_setThumbnailSize+0xe8>
	trimStack (&fun -> stack);
   13186:	|     \-> moveq #24,d0
   13188:	|         add.l 60(sp),d0
   1318c:	|         move.l d0,-(sp)
   1318e:	|         jsr 15178 <trimStack>
   13194:	|         addq.l #4,sp
	if (! getValueType(&thumbWidth, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   13196:	|         movea.l 60(sp),a0
   1319a:	|         move.l 24(a0),d0
   1319e:	|         move.l d0,-(sp)
   131a0:	|         pea 1 <_start+0x1>
   131a4:	|         pea 1c8dc <thumbWidth>
   131aa:	|         jsr 147f4 <getValueType>
   131b0:	|         lea 12(sp),sp
   131b4:	|         tst.w d0
   131b6:	|     /-- bne.s 131be <builtIn_setThumbnailSize+0x64>
   131b8:	|     |   moveq #1,d0
   131ba:	+-----|-- bra.w 13242 <builtIn_setThumbnailSize+0xe8>
	trimStack (&fun -> stack);
   131be:	|     \-> moveq #24,d0
   131c0:	|         add.l 60(sp),d0
   131c4:	|         move.l d0,-(sp)
   131c6:	|         jsr 15178 <trimStack>
   131cc:	|         addq.l #4,sp
	if (thumbWidth < 0 || thumbHeight < 0 || (unsigned int) thumbWidth > winWidth || (unsigned int) thumbHeight > winHeight) {
   131ce:	|         move.l 1c8dc <thumbWidth>,d0
   131d4:	|     /-- bmi.s 13202 <builtIn_setThumbnailSize+0xa8>
   131d6:	|     |   move.l 1c8e0 <thumbHeight>,d0
   131dc:	|     +-- bmi.s 13202 <builtIn_setThumbnailSize+0xa8>
   131de:	|     |   move.l 1c8dc <thumbWidth>,d0
   131e4:	|     |   move.l d0,d1
   131e6:	|     |   move.l 1c91e <winWidth>,d0
   131ec:	|     |   cmp.l d1,d0
   131ee:	|     +-- bcs.s 13202 <builtIn_setThumbnailSize+0xa8>
   131f0:	|     |   move.l 1c8e0 <thumbHeight>,d0
   131f6:	|     |   move.l d0,d1
   131f8:	|     |   move.l 1c922 <winHeight>,d0
   131fe:	|     |   cmp.l d1,d0
   13200:	|  /--|-- bcc.s 13240 <builtIn_setThumbnailSize+0xe6>
		char buff[50];
		sprintf (buff, "%d x %d", thumbWidth, thumbHeight);
   13202:	|  |  \-> move.l 1c8e0 <thumbHeight>,d1
   13208:	|  |      move.l 1c8dc <thumbWidth>,d0
   1320e:	|  |      move.l d1,-(sp)
   13210:	|  |      move.l d0,-(sp)
   13212:	|  |      pea 19cb8 <graphics.c.1c13408a+0xd0>
   13218:	|  |      lea 14(sp),a0
   1321c:	|  |      move.l a0,-(sp)
   1321e:	|  |      jsr 13ffe <sprintf>
   13224:	|  |      lea 16(sp),sp
		KPrintF ("Invalid thumbnail size", buff);
   13228:	|  |      lea 2(sp),a0
   1322c:	|  |      move.l a0,-(sp)
   1322e:	|  |      pea 19cc0 <graphics.c.1c13408a+0xd8>
   13234:	|  |      jsr 17254 <KPrintF>
   1323a:	|  |      addq.l #8,sp
		return BR_ERROR;
   1323c:	|  |      moveq #1,d0
   1323e:	+--|----- bra.s 13242 <builtIn_setThumbnailSize+0xe8>
	}
	return BR_CONTINUE;
   13240:	|  \----> moveq #2,d0
}
   13242:	\-------> lea 52(sp),sp
   13246:	          rts

00013248 <builtIn_hasFlag>:

builtIn(hasFlag)
{
   13248:	       lea -12(sp),sp
   1324c:	       move.l d2,-(sp)
	UNUSEDALL
	int objNum, flagIndex;
	if (! getValueType(&flagIndex, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1324e:	       movea.l 24(sp),a0
   13252:	       move.l 24(a0),d0
   13256:	       move.l d0,-(sp)
   13258:	       pea 1 <_start+0x1>
   1325c:	       lea 12(sp),a0
   13260:	       move.l a0,-(sp)
   13262:	       jsr 147f4 <getValueType>
   13268:	       lea 12(sp),sp
   1326c:	       tst.w d0
   1326e:	   /-- bne.s 13276 <builtIn_hasFlag+0x2e>
   13270:	   |   moveq #1,d0
   13272:	/--|-- bra.w 13306 <builtIn_hasFlag+0xbe>
	trimStack (&fun -> stack);
   13276:	|  \-> moveq #24,d0
   13278:	|      add.l 24(sp),d0
   1327c:	|      move.l d0,-(sp)
   1327e:	|      jsr 15178 <trimStack>
   13284:	|      addq.l #4,sp
	if (! getValueType(&objNum, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   13286:	|      movea.l 24(sp),a0
   1328a:	|      move.l 24(a0),d0
   1328e:	|      move.l d0,-(sp)
   13290:	|      pea 7 <_start+0x7>
   13294:	|      moveq #16,d0
   13296:	|      add.l sp,d0
   13298:	|      move.l d0,-(sp)
   1329a:	|      jsr 147f4 <getValueType>
   132a0:	|      lea 12(sp),sp
   132a4:	|      tst.w d0
   132a6:	|  /-- bne.s 132ac <builtIn_hasFlag+0x64>
   132a8:	|  |   moveq #1,d0
   132aa:	+--|-- bra.s 13306 <builtIn_hasFlag+0xbe>
	trimStack (&fun -> stack);
   132ac:	|  \-> moveq #24,d0
   132ae:	|      add.l 24(sp),d0
   132b2:	|      move.l d0,-(sp)
   132b4:	|      jsr 15178 <trimStack>
   132ba:	|      addq.l #4,sp
	struct objectType * objT = findObjectType (objNum);
   132bc:	|      move.l 8(sp),d0
   132c0:	|      move.l d0,-(sp)
   132c2:	|      jsr d53e <findObjectType>
   132c8:	|      addq.l #4,sp
   132ca:	|      move.l d0,12(sp)
	if (! objT) return BR_ERROR;
   132ce:	|  /-- bne.s 132d4 <builtIn_hasFlag+0x8c>
   132d0:	|  |   moveq #1,d0
   132d2:	+--|-- bra.s 13306 <builtIn_hasFlag+0xbe>
	setVariable (&fun -> reg, SVT_INT, objT->flags & (1 << flagIndex));
   132d4:	|  \-> movea.l 12(sp),a0
   132d8:	|      move.w 36(a0),d0
   132dc:	|      moveq #0,d2
   132de:	|      move.w d0,d2
   132e0:	|      move.l 4(sp),d1
   132e4:	|      moveq #1,d0
   132e6:	|      lsl.l d1,d0
   132e8:	|      move.l d2,d1
   132ea:	|      and.l d0,d1
   132ec:	|      moveq #28,d0
   132ee:	|      add.l 24(sp),d0
   132f2:	|      move.l d1,-(sp)
   132f4:	|      pea 1 <_start+0x1>
   132f8:	|      move.l d0,-(sp)
   132fa:	|      jsr 150e6 <setVariable>
   13300:	|      lea 12(sp),sp
	return BR_CONTINUE;
   13304:	|      moveq #2,d0
}
   13306:	\----> move.l (sp)+,d2
   13308:	       lea 12(sp),sp
   1330c:	       rts

0001330e <builtIn_snapshotGrab>:

builtIn(snapshotGrab)
{
	UNUSEDALL
	return snapshot () ? BR_CONTINUE : BR_ERROR;
   1330e:	       jsr d52c <snapshot>
   13314:	       tst.w d0
   13316:	/----- beq.s 1331c <builtIn_snapshotGrab+0xe>
   13318:	|      moveq #2,d0
   1331a:	|  /-- bra.s 1331e <builtIn_snapshotGrab+0x10>
   1331c:	\--|-> moveq #1,d0
}
   1331e:	   \-> rts

00013320 <builtIn_snapshotClear>:

builtIn(snapshotClear)
{
	UNUSEDALL
	nosnapshot ();
   13320:	jsr d3d8 <nosnapshot>
	return BR_CONTINUE;
   13326:	moveq #2,d0
}
   13328:	rts

0001332a <builtIn_bodgeFilenames>:

builtIn(bodgeFilenames)
{
   1332a:	subq.l #4,sp
	UNUSEDALL
	BOOL lastValue = allowAnyFilename;
   1332c:	move.w 1c226 <allowAnyFilename>,2(sp)
	allowAnyFilename = getBoolean(&(fun -> stack -> thisVar));
   13334:	movea.l 12(sp),a0
   13338:	move.l 24(a0),d0
   1333c:	move.l d0,-(sp)
   1333e:	jsr 14d34 <getBoolean>
   13344:	addq.l #4,sp
   13346:	move.w d0,1c226 <allowAnyFilename>
	trimStack (&fun -> stack);
   1334c:	moveq #24,d0
   1334e:	add.l 12(sp),d0
   13352:	move.l d0,-(sp)
   13354:	jsr 15178 <trimStack>
   1335a:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, lastValue);
   1335c:	movea.w 2(sp),a0
   13360:	moveq #28,d0
   13362:	add.l 12(sp),d0
   13366:	move.l a0,-(sp)
   13368:	pea 1 <_start+0x1>
   1336c:	move.l d0,-(sp)
   1336e:	jsr 150e6 <setVariable>
   13374:	lea 12(sp),sp
	return BR_CONTINUE;
   13378:	moveq #2,d0
}
   1337a:	addq.l #4,sp
   1337c:	rts

0001337e <builtIn__rem_registryGetString>:

// Deprecated - does nothing.
builtIn(_rem_registryGetString)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   1337e:	moveq #24,d0
   13380:	add.l 8(sp),d0
   13384:	move.l d0,-(sp)
   13386:	jsr 15178 <trimStack>
   1338c:	addq.l #4,sp
	trimStack (&fun -> stack);
   1338e:	moveq #24,d0
   13390:	add.l 8(sp),d0
   13394:	move.l d0,-(sp)
   13396:	jsr 15178 <trimStack>
   1339c:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 0);
   1339e:	moveq #28,d0
   133a0:	add.l 8(sp),d0
   133a4:	clr.l -(sp)
   133a6:	pea 1 <_start+0x1>
   133aa:	move.l d0,-(sp)
   133ac:	jsr 150e6 <setVariable>
   133b2:	lea 12(sp),sp

	return BR_CONTINUE;
   133b6:	moveq #2,d0
}
   133b8:	rts

000133ba <builtIn_quitWithFatalError>:

builtIn(quitWithFatalError)
{
   133ba:	subq.l #4,sp
	UNUSEDALL
	char * mess = getTextFromAnyVar(&(fun -> stack -> thisVar));
   133bc:	movea.l 12(sp),a0
   133c0:	move.l 24(a0),d0
   133c4:	move.l d0,-(sp)
   133c6:	jsr 14dca <getTextFromAnyVar>
   133cc:	addq.l #4,sp
   133ce:	move.l d0,(sp)
	trimStack (&fun -> stack);
   133d0:	moveq #24,d0
   133d2:	add.l 12(sp),d0
   133d6:	move.l d0,-(sp)
   133d8:	jsr 15178 <trimStack>
   133de:	addq.l #4,sp
	KPrintF (mess);
   133e0:	move.l (sp),-(sp)
   133e2:	jsr 17254 <KPrintF>
   133e8:	addq.l #4,sp
	return BR_ERROR;
   133ea:	moveq #1,d0
}
   133ec:	addq.l #4,sp
   133ee:	rts

000133f0 <builtIn__rem_setCharacterAA>:

builtIn(_rem_setCharacterAA)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   133f0:	moveq #24,d0
   133f2:	add.l 8(sp),d0
   133f6:	move.l d0,-(sp)
   133f8:	jsr 15178 <trimStack>
   133fe:	addq.l #4,sp
	trimStack (&fun -> stack);
   13400:	moveq #24,d0
   13402:	add.l 8(sp),d0
   13406:	move.l d0,-(sp)
   13408:	jsr 15178 <trimStack>
   1340e:	addq.l #4,sp
	trimStack (&fun -> stack);
   13410:	moveq #24,d0
   13412:	add.l 8(sp),d0
   13416:	move.l d0,-(sp)
   13418:	jsr 15178 <trimStack>
   1341e:	addq.l #4,sp
	trimStack (&fun -> stack);
   13420:	moveq #24,d0
   13422:	add.l 8(sp),d0
   13426:	move.l d0,-(sp)
   13428:	jsr 15178 <trimStack>
   1342e:	addq.l #4,sp

	return BR_CONTINUE;
   13430:	moveq #2,d0
}
   13432:	rts

00013434 <builtIn__rem_setMaximumAA>:

builtIn(_rem_setMaximumAA)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   13434:	moveq #24,d0
   13436:	add.l 8(sp),d0
   1343a:	move.l d0,-(sp)
   1343c:	jsr 15178 <trimStack>
   13442:	addq.l #4,sp
	trimStack (&fun -> stack);
   13444:	moveq #24,d0
   13446:	add.l 8(sp),d0
   1344a:	move.l d0,-(sp)
   1344c:	jsr 15178 <trimStack>
   13452:	addq.l #4,sp
	trimStack (&fun -> stack);
   13454:	moveq #24,d0
   13456:	add.l 8(sp),d0
   1345a:	move.l d0,-(sp)
   1345c:	jsr 15178 <trimStack>
   13462:	addq.l #4,sp

	return BR_CONTINUE;
   13464:	moveq #2,d0

}
   13466:	rts

00013468 <builtIn_setBackgroundEffect>:

builtIn(setBackgroundEffect)
{
   13468:	subq.l #4,sp
	UNUSEDALL
	BOOL done = TRUE;
   1346a:	move.w #1,2(sp)
	//BOOL done = blur_createSettings(numParams, fun->stack); Amiga Todo: Amigize?
	setVariable (&fun -> reg, SVT_INT, done ? 1 : 0);
   13470:	sne d0
   13472:	neg.b d0
   13474:	moveq #0,d1
   13476:	move.b d0,d1
   13478:	moveq #28,d0
   1347a:	add.l 12(sp),d0
   1347e:	move.l d1,-(sp)
   13480:	pea 1 <_start+0x1>
   13484:	move.l d0,-(sp)
   13486:	jsr 150e6 <setVariable>
   1348c:	lea 12(sp),sp
	return BR_CONTINUE;
   13490:	moveq #2,d0
}
   13492:	addq.l #4,sp
   13494:	rts

00013496 <builtIn_doBackgroundEffect>:

builtIn(doBackgroundEffect)
{
   13496:	subq.l #4,sp
	UNUSEDALL
	//BOOL done = blurScreen ();
	BOOL done = TRUE;
   13498:	move.w #1,2(sp)
	KPrintF("doBackgroundEffect: Function not implemented on Amiga");
   1349e:	pea 19cd7 <graphics.c.1c13408a+0xef>
   134a4:	jsr 17254 <KPrintF>
   134aa:	addq.l #4,sp
	//Amiga Todo: Amigize this
	setVariable (&fun -> reg, SVT_INT, done ? 1 : 0);
   134ac:	tst.w 2(sp)
   134b0:	sne d0
   134b2:	neg.b d0
   134b4:	moveq #0,d1
   134b6:	move.b d0,d1
   134b8:	moveq #28,d0
   134ba:	add.l 12(sp),d0
   134be:	move.l d1,-(sp)
   134c0:	pea 1 <_start+0x1>
   134c4:	move.l d0,-(sp)
   134c6:	jsr 150e6 <setVariable>
   134cc:	lea 12(sp),sp
	return BR_CONTINUE;
   134d0:	moveq #2,d0
}
   134d2:	addq.l #4,sp
   134d4:	rts

000134d6 <callBuiltIn>:
#undef FUNC

#define NUM_FUNCS			(sizeof (builtInFunctionArray) / sizeof (builtInFunctionArray[0]))


enum builtReturn callBuiltIn (int whichFunc, int numParams, struct loadedFunction * fun) {
   134d6:	             lea -100(sp),sp
   // fprintf (stderr, "Calling function %d: %s\n", whichFunc, builtInFunctionNames[whichFunc]);    fflush (stderr);

	if ((unsigned int)whichFunc < NUM_FUNCS) {
   134da:	             move.l 104(sp),d0
   134de:	             cmpi.l #166,d0
   134e4:	/----------- bhi.w 135c6 <callBuiltIn+0xf0>
		if (paramNum[whichFunc] != -1) {
   134e8:	|            move.l 104(sp),d0
   134ec:	|            add.l d0,d0
   134ee:	|            movea.l d0,a1
   134f0:	|            adda.l d0,a1
   134f2:	|            lea 1c36c <paramNum>,a0
   134f8:	|            move.l (0,a1,a0.l),d0
   134fc:	|            moveq #-1,d1
   134fe:	|            cmp.l d0,d1
   13500:	|  /-------- beq.w 1358e <callBuiltIn+0xb8>
			if (paramNum[whichFunc] != numParams) {
   13504:	|  |         move.l 104(sp),d0
   13508:	|  |         add.l d0,d0
   1350a:	|  |         movea.l d0,a1
   1350c:	|  |         adda.l d0,a1
   1350e:	|  |         lea 1c36c <paramNum>,a0
   13514:	|  |         move.l (0,a1,a0.l),d0
   13518:	|  |         cmp.l 108(sp),d0
   1351c:	|  +-------- beq.s 1358e <callBuiltIn+0xb8>
				char buff[100];
				sprintf (buff, "Built in function must have %i parameter%s",
						 paramNum[whichFunc],
						 (paramNum[whichFunc] == 1) ? "" : "s");
   1351e:	|  |         move.l 104(sp),d0
   13522:	|  |         add.l d0,d0
   13524:	|  |         movea.l d0,a1
   13526:	|  |         adda.l d0,a1
   13528:	|  |         lea 1c36c <paramNum>,a0
   1352e:	|  |         move.l (0,a1,a0.l),d0
				sprintf (buff, "Built in function must have %i parameter%s",
   13532:	|  |         moveq #1,d1
   13534:	|  |         cmp.l d0,d1
   13536:	|  |  /----- bne.s 13540 <callBuiltIn+0x6a>
   13538:	|  |  |      move.l #100851,d0
   1353e:	|  |  |  /-- bra.s 13546 <callBuiltIn+0x70>
   13540:	|  |  \--|-> move.l #105741,d0
   13546:	|  |     \-> move.l 104(sp),d1
   1354a:	|  |         add.l d1,d1
   1354c:	|  |         movea.l d1,a1
   1354e:	|  |         adda.l d1,a1
   13550:	|  |         lea 1c36c <paramNum>,a0
   13556:	|  |         move.l (0,a1,a0.l),d1
   1355a:	|  |         move.l d0,-(sp)
   1355c:	|  |         move.l d1,-(sp)
   1355e:	|  |         pea 19d0f <graphics.c.1c13408a+0x127>
   13564:	|  |         lea 12(sp),a0
   13568:	|  |         move.l a0,-(sp)
   1356a:	|  |         jsr 13ffe <sprintf>
   13570:	|  |         lea 16(sp),sp

				KPrintF(copyString (buff));
   13574:	|  |         movea.l sp,a0
   13576:	|  |         move.l a0,-(sp)
   13578:	|  |         jsr b8 <copyString>
   1357e:	|  |         addq.l #4,sp
   13580:	|  |         move.l d0,-(sp)
   13582:	|  |         jsr 17254 <KPrintF>
   13588:	|  |         addq.l #4,sp
				return BR_ERROR;
   1358a:	|  |         moveq #1,d0
   1358c:	|  |     /-- bra.s 135d6 <callBuiltIn+0x100>
			}
		}

		if (builtInFunctionArray[whichFunc].func)
   1358e:	|  \-----|-> move.l 104(sp),d0
   13592:	|        |   add.l d0,d0
   13594:	|        |   movea.l d0,a1
   13596:	|        |   adda.l d0,a1
   13598:	|        |   lea 1c608 <builtInFunctionArray>,a0
   1359e:	|        |   move.l (0,a1,a0.l),d0
   135a2:	+--------|-- beq.s 135c6 <callBuiltIn+0xf0>
		{
			//fprintf (stderr, "Calling %i: %s\n", whichFunc, builtInFunctionNames[whichFunc]);
			return builtInFunctionArray[whichFunc].func (numParams, fun);
   135a4:	|        |   move.l 104(sp),d0
   135a8:	|        |   add.l d0,d0
   135aa:	|        |   movea.l d0,a1
   135ac:	|        |   adda.l d0,a1
   135ae:	|        |   lea 1c608 <builtInFunctionArray>,a0
   135b4:	|        |   movea.l (0,a1,a0.l),a0
   135b8:	|        |   move.l 112(sp),-(sp)
   135bc:	|        |   move.l 112(sp),-(sp)
   135c0:	|        |   jsr (a0)
   135c2:	|        |   addq.l #8,sp
   135c4:	|        +-- bra.s 135d6 <callBuiltIn+0x100>
		}
	}

	KPrintF("Unknown / unimplemented built-in function.");
   135c6:	\--------|-> pea 19d3a <graphics.c.1c13408a+0x152>
   135cc:	         |   jsr 17254 <KPrintF>
   135d2:	         |   addq.l #4,sp
	return BR_ERROR;
   135d4:	         |   moveq #1,d0
}
   135d6:	         \-> lea 100(sp),sp
   135da:	             rts

000135dc <getLanguageForFileB>:
int *languageTable;
char **languageName;
struct settingsStruct gameSettings;

int getLanguageForFileB ()
{
   135dc:	          subq.l #8,sp
	int indexNum = -1;
   135de:	          moveq #-1,d0
   135e0:	          move.l d0,4(sp)

	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   135e4:	          clr.l (sp)
   135e6:	   /----- bra.s 1360c <getLanguageForFileB+0x30>
		if ((unsigned int) languageTable[i] == gameSettings.languageID) indexNum = i;
   135e8:	/--|----> move.l 1ca9e <languageTable>,d1
   135ee:	|  |      move.l (sp),d0
   135f0:	|  |      add.l d0,d0
   135f2:	|  |      add.l d0,d0
   135f4:	|  |      movea.l d1,a0
   135f6:	|  |      adda.l d0,a0
   135f8:	|  |      move.l (a0),d0
   135fa:	|  |      move.l d0,d1
   135fc:	|  |      move.l 1caa6 <gameSettings>,d0
   13602:	|  |      cmp.l d1,d0
   13604:	|  |  /-- bne.s 1360a <getLanguageForFileB+0x2e>
   13606:	|  |  |   move.l (sp),4(sp)
	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   1360a:	|  |  \-> addq.l #1,(sp)
   1360c:	|  \----> move.l 1caaa <gameSettings+0x4>,d0
   13612:	|         cmp.l (sp),d0
   13614:	\-------- bcc.s 135e8 <getLanguageForFileB+0xc>
	}

	return indexNum;
   13616:	          move.l 4(sp),d0
}
   1361a:	          addq.l #8,sp
   1361c:	          rts

0001361e <getPrefsFilename>:

char * getPrefsFilename (char * filename) {
   1361e:	          lea -20(sp),sp
   13622:	          move.l a6,-(sp)
	// Yes, this trashes the original string, but
	// we also free it at the end (warning!)...

	int n, i;

	n = strlen (filename);
   13624:	          move.l 28(sp),-(sp)
   13628:	          jsr 13ce0 <strlen>
   1362e:	          addq.l #4,sp
   13630:	          move.l d0,12(sp)


	if (n > 4 && filename[n-4] == '.') {
   13634:	          moveq #4,d0
   13636:	          cmp.l 12(sp),d0
   1363a:	      /-- bge.s 1365e <getPrefsFilename+0x40>
   1363c:	      |   move.l 12(sp),d0
   13640:	      |   subq.l #4,d0
   13642:	      |   movea.l 28(sp),a0
   13646:	      |   adda.l d0,a0
   13648:	      |   move.b (a0),d0
   1364a:	      |   cmpi.b #46,d0
   1364e:	      +-- bne.s 1365e <getPrefsFilename+0x40>
		filename[n-4] = 0;
   13650:	      |   move.l 12(sp),d0
   13654:	      |   subq.l #4,d0
   13656:	      |   movea.l 28(sp),a0
   1365a:	      |   adda.l d0,a0
   1365c:	      |   clr.b (a0)
	}

	char * f = filename;
   1365e:	      \-> move.l 28(sp),16(sp)
	for (i = 0; i<n; i++) {
   13664:	          clr.l 20(sp)
   13668:	   /----- bra.s 13690 <getPrefsFilename+0x72>
		if (filename[i] == '/') f = filename + i + 1;
   1366a:	/--|----> move.l 20(sp),d0
   1366e:	|  |      movea.l 28(sp),a0
   13672:	|  |      adda.l d0,a0
   13674:	|  |      move.b (a0),d0
   13676:	|  |      cmpi.b #47,d0
   1367a:	|  |  /-- bne.s 1368c <getPrefsFilename+0x6e>
   1367c:	|  |  |   move.l 20(sp),d0
   13680:	|  |  |   addq.l #1,d0
   13682:	|  |  |   move.l 28(sp),d1
   13686:	|  |  |   add.l d0,d1
   13688:	|  |  |   move.l d1,16(sp)
	for (i = 0; i<n; i++) {
   1368c:	|  |  \-> addq.l #1,20(sp)
   13690:	|  \----> move.l 20(sp),d0
   13694:	|         cmp.l 12(sp),d0
   13698:	\-------- blt.s 1366a <getPrefsFilename+0x4c>
	}

	char * joined = joinStrings (f, ".ini");
   1369a:	          pea 19d65 <graphics.c.1c13408a+0x17d>
   136a0:	          move.l 20(sp),-(sp)
   136a4:	          jsr 13d20 <joinStrings>
   136aa:	          addq.l #8,sp
   136ac:	          move.l d0,8(sp)

	FreeVec(filename);
   136b0:	          move.l 28(sp),4(sp)
   136b6:	          move.l 1c9ca <SysBase>,d0
   136bc:	          movea.l d0,a6
   136be:	          movea.l 4(sp),a1
   136c2:	          jsr -690(a6)
	filename = NULL;
   136c6:	          clr.l 28(sp)
	return joined;
   136ca:	          move.l 8(sp),d0
}
   136ce:	          movea.l (sp)+,a6
   136d0:	          lea 20(sp),sp
   136d4:	          rts

000136d6 <makeLanguageTable>:

void makeLanguageTable (BPTR table)
{
   136d6:	             lea -28(sp),sp
   136da:	             move.l a6,-(sp)
   136dc:	             move.l a2,-(sp)
	languageTable = AllocVec(gameSettings.numLanguages + 1,MEMF_ANY);
   136de:	             move.l 1caaa <gameSettings+0x4>,d0
   136e4:	             move.l d0,d1
   136e6:	             addq.l #1,d1
   136e8:	             move.l d1,28(sp)
   136ec:	             clr.l 24(sp)
   136f0:	             move.l 1c9ca <SysBase>,d0
   136f6:	             movea.l d0,a6
   136f8:	             move.l 28(sp),d0
   136fc:	             move.l 24(sp),d1
   13700:	             jsr -684(a6)
   13704:	             move.l d0,20(sp)
   13708:	             move.l 20(sp),d0
   1370c:	             move.l d0,1ca9e <languageTable>
    if( languageTable == 0) {
   13712:	             move.l 1ca9e <languageTable>,d0
   13718:	         /-- bne.s 13728 <makeLanguageTable+0x52>
        KPrintF("makeLanguageTable: Cannot Alloc Mem for languageTable");
   1371a:	         |   pea 19d6a <graphics.c.1c13408a+0x182>
   13720:	         |   jsr 17254 <KPrintF>
   13726:	         |   addq.l #4,sp
    }

	languageName = AllocVec(gameSettings.numLanguages + 1,MEMF_ANY);
   13728:	         \-> move.l 1caaa <gameSettings+0x4>,d0
   1372e:	             move.l d0,d1
   13730:	             addq.l #1,d1
   13732:	             move.l d1,16(sp)
   13736:	             clr.l 12(sp)
   1373a:	             move.l 1c9ca <SysBase>,d0
   13740:	             movea.l d0,a6
   13742:	             move.l 16(sp),d0
   13746:	             move.l 12(sp),d1
   1374a:	             jsr -684(a6)
   1374e:	             move.l d0,8(sp)
   13752:	             move.l 8(sp),d0
   13756:	             move.l d0,1caa2 <languageName>
	if( languageName == 0) {
   1375c:	             move.l 1caa2 <languageName>,d0
   13762:	         /-- bne.s 13772 <makeLanguageTable+0x9c>
        KPrintF("makeLanguageName: Cannot Alloc Mem for languageName");
   13764:	         |   pea 19da0 <graphics.c.1c13408a+0x1b8>
   1376a:	         |   jsr 17254 <KPrintF>
   13770:	         |   addq.l #4,sp
    }

	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   13772:	         \-> clr.l 32(sp)
   13776:	   /-------- bra.s 137ee <makeLanguageTable+0x118>
		languageTable[i] = i ? get2bytes (table) : 0;
   13778:	/--|-------> tst.l 32(sp)
   1377c:	|  |  /----- beq.s 1378c <makeLanguageTable+0xb6>
   1377e:	|  |  |      move.l 40(sp),-(sp)
   13782:	|  |  |      jsr 6bc <get2bytes>
   13788:	|  |  |      addq.l #4,sp
   1378a:	|  |  |  /-- bra.s 1378e <makeLanguageTable+0xb8>
   1378c:	|  |  \--|-> moveq #0,d0
   1378e:	|  |     \-> movea.l 1ca9e <languageTable>,a0
   13794:	|  |         move.l 32(sp),d1
   13798:	|  |         add.l d1,d1
   1379a:	|  |         add.l d1,d1
   1379c:	|  |         adda.l d1,a0
   1379e:	|  |         move.l d0,(a0)
		languageName[i] = 0;
   137a0:	|  |         move.l 1caa2 <languageName>,d1
   137a6:	|  |         move.l 32(sp),d0
   137aa:	|  |         add.l d0,d0
   137ac:	|  |         add.l d0,d0
   137ae:	|  |         movea.l d1,a0
   137b0:	|  |         adda.l d0,a0
   137b2:	|  |         clr.l (a0)
		if (gameVersion >= VERSION(2,0)) {
   137b4:	|  |         move.l 1c974 <gameVersion>,d0
   137ba:	|  |         cmpi.l #511,d0
   137c0:	|  |     /-- ble.s 137ea <makeLanguageTable+0x114>
			if (gameSettings.numLanguages)
   137c2:	|  |     |   move.l 1caaa <gameSettings+0x4>,d0
   137c8:	|  |     +-- beq.s 137ea <makeLanguageTable+0x114>
				languageName[i] = readString (table);
   137ca:	|  |     |   move.l 1caa2 <languageName>,d1
   137d0:	|  |     |   move.l 32(sp),d0
   137d4:	|  |     |   add.l d0,d0
   137d6:	|  |     |   add.l d0,d0
   137d8:	|  |     |   movea.l d1,a2
   137da:	|  |     |   adda.l d0,a2
   137dc:	|  |     |   move.l 40(sp),-(sp)
   137e0:	|  |     |   jsr b02 <readString>
   137e6:	|  |     |   addq.l #4,sp
   137e8:	|  |     |   move.l d0,(a2)
	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   137ea:	|  |     \-> addq.l #1,32(sp)
   137ee:	|  \-------> move.l 1caaa <gameSettings+0x4>,d0
   137f4:	|            cmp.l 32(sp),d0
   137f8:	\----------- bcc.w 13778 <makeLanguageTable+0xa2>
		}
	}
}
   137fc:	             nop
   137fe:	             nop
   13800:	             movea.l (sp)+,a2
   13802:	             movea.l (sp)+,a6
   13804:	             lea 28(sp),sp
   13808:	             rts

0001380a <readIniFile>:

void readIniFile (char * filename) {
   1380a:	                      lea -564(sp),sp
   1380e:	                      move.l a6,-(sp)
   13810:	                      move.l d2,-(sp)
	char * langName = getPrefsFilename (copyString (filename));
   13812:	                      move.l 576(sp),-(sp)
   13816:	                      jsr b8 <copyString>
   1381c:	                      addq.l #4,sp
   1381e:	                      move.l d0,-(sp)
   13820:	                      jsr 1361e <getPrefsFilename>
   13826:	                      addq.l #4,sp
   13828:	                      move.l d0,562(sp)

	BPTR fp = Open(langName,MODE_OLDFILE);	
   1382c:	                      move.l 562(sp),558(sp)
   13832:	                      move.l #1005,554(sp)
   1383a:	                      move.l 1c9d2 <DOSBase>,d0
   13840:	                      movea.l d0,a6
   13842:	                      move.l 558(sp),d1
   13846:	                      move.l 554(sp),d2
   1384a:	                      jsr -30(a6)
   1384e:	                      move.l d0,550(sp)
   13852:	                      move.l 550(sp),d0
   13856:	                      move.l d0,546(sp)

	gameSettings.languageID = 0;
   1385a:	                      clr.l 1caa6 <gameSettings>
	gameSettings.userFullScreen = TRUE; //Always fullscreen on AMIGA
   13860:	                      move.w #1,1caae <gameSettings+0x8>
	gameSettings.refreshRate = 0;
   13868:	                      clr.l 1cab0 <gameSettings+0xa>
	gameSettings.antiAlias = 1;
   1386e:	                      moveq #1,d0
   13870:	                      move.l d0,1cab4 <gameSettings+0xe>
	gameSettings.fixedPixels = FALSE;
   13876:	                      clr.w 1cab8 <gameSettings+0x12>
	gameSettings.noStartWindow = FALSE;
   1387c:	                      clr.w 1caba <gameSettings+0x14>
	gameSettings.debugMode = FALSE;
   13882:	                      clr.w 1cabc <gameSettings+0x16>

	FreeVec(langName);
   13888:	                      move.l 562(sp),542(sp)
   1388e:	                      move.l 1c9ca <SysBase>,d0
   13894:	                      movea.l d0,a6
   13896:	                      movea.l 542(sp),a1
   1389a:	                      jsr -690(a6)
	langName = NULL;
   1389e:	                      clr.l 562(sp)

	if (fp) {
   138a2:	                      tst.l 546(sp)
   138a6:	/-------------------- beq.w 13b84 <readIniFile+0x37a>
		char lineSoFar[257] = "";
   138aa:	|                     move.l sp,d0
   138ac:	|                     addi.l #265,d0
   138b2:	|                     move.l #257,d1
   138b8:	|                     move.l d1,-(sp)
   138ba:	|                     clr.l -(sp)
   138bc:	|                     move.l d0,-(sp)
   138be:	|                     jsr 171d8 <memset>
   138c4:	|                     lea 12(sp),sp
		char secondSoFar[257] = "";
   138c8:	|                     move.l sp,d0
   138ca:	|                     addq.l #8,d0
   138cc:	|                     move.l #257,d1
   138d2:	|                     move.l d1,-(sp)
   138d4:	|                     clr.l -(sp)
   138d6:	|                     move.l d0,-(sp)
   138d8:	|                     jsr 171d8 <memset>
   138de:	|                     lea 12(sp),sp
		unsigned char here = 0;
   138e2:	|                     clr.b 571(sp)
		char readChar = ' ';
   138e6:	|                     move.b #32,570(sp)
		BOOL keepGoing = TRUE;
   138ec:	|                     move.w #1,568(sp)
		BOOL doingSecond = FALSE;
   138f2:	|                     clr.w 566(sp)
		LONG tmp = 0;
   138f6:	|                     clr.l 538(sp)

		do {

			tmp = FGetC (fp);
   138fa:	|  /----------------> move.l 546(sp),534(sp)
   13900:	|  |                  move.l 1c9d2 <DOSBase>,d0
   13906:	|  |                  movea.l d0,a6
   13908:	|  |                  move.l 534(sp),d1
   1390c:	|  |                  jsr -306(a6)
   13910:	|  |                  move.l d0,530(sp)
   13914:	|  |                  move.l 530(sp),d0
   13918:	|  |                  move.l d0,538(sp)
			if (tmp == - 1) {
   1391c:	|  |                  moveq #-1,d1
   1391e:	|  |                  cmp.l 538(sp),d1
   13922:	|  |           /----- bne.s 13930 <readIniFile+0x126>
				readChar = '\n';
   13924:	|  |           |      move.b #10,570(sp)
				keepGoing = FALSE;
   1392a:	|  |           |      clr.w 568(sp)
   1392e:	|  |           |  /-- bra.s 13936 <readIniFile+0x12c>
			} else {
				readChar = (char) tmp;
   13930:	|  |           \--|-> move.b 541(sp),570(sp)
			}

			switch (readChar) {
   13936:	|  |              \-> move.b 570(sp),d0
   1393a:	|  |                  ext.w d0
   1393c:	|  |                  movea.w d0,a0
   1393e:	|  |                  moveq #61,d0
   13940:	|  |                  cmp.l a0,d0
   13942:	|  |     /----------- beq.w 13aec <readIniFile+0x2e2>
   13946:	|  |     |            moveq #61,d1
   13948:	|  |     |            cmp.l a0,d1
   1394a:	|  |  /--|----------- blt.w 13af8 <readIniFile+0x2ee>
   1394e:	|  |  |  |            moveq #10,d0
   13950:	|  |  |  |            cmp.l a0,d0
   13952:	|  |  |  |        /-- beq.s 1395c <readIniFile+0x152>
   13954:	|  |  |  |        |   moveq #13,d1
   13956:	|  |  |  |        |   cmp.l a0,d1
   13958:	|  |  +--|--------|-- bne.w 13af8 <readIniFile+0x2ee>
				case '\n':
				case '\r':
				if (doingSecond) {
   1395c:	|  |  |  |        \-> tst.w 566(sp)
   13960:	|  |  |  |     /----- beq.w 13ada <readIniFile+0x2d0>
					if (strcmp (lineSoFar, "LANGUAGE") == 0)
   13964:	|  |  |  |     |      pea 19dd4 <graphics.c.1c13408a+0x1ec>
   1396a:	|  |  |  |     |      move.l sp,d0
   1396c:	|  |  |  |     |      addi.l #269,d0
   13972:	|  |  |  |     |      move.l d0,-(sp)
   13974:	|  |  |  |     |      jsr 13ca0 <strcmp>
   1397a:	|  |  |  |     |      addq.l #8,sp
   1397c:	|  |  |  |     |      tst.l d0
   1397e:	|  |  |  |     |  /-- bne.s 13998 <readIniFile+0x18e>
					{
						gameSettings.languageID = stringToInt (secondSoFar);
   13980:	|  |  |  |     |  |   move.l sp,d0
   13982:	|  |  |  |     |  |   addq.l #8,d0
   13984:	|  |  |  |     |  |   move.l d0,-(sp)
   13986:	|  |  |  |     |  |   jsr 13b90 <stringToInt>
   1398c:	|  |  |  |     |  |   addq.l #4,sp
   1398e:	|  |  |  |     |  |   move.l d0,1caa6 <gameSettings>
   13994:	|  |  |  |     +--|-- bra.w 13ada <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "WINDOW") == 0)
   13998:	|  |  |  |     |  \-> pea 19ddd <graphics.c.1c13408a+0x1f5>
   1399e:	|  |  |  |     |      move.l sp,d0
   139a0:	|  |  |  |     |      addi.l #269,d0
   139a6:	|  |  |  |     |      move.l d0,-(sp)
   139a8:	|  |  |  |     |      jsr 13ca0 <strcmp>
   139ae:	|  |  |  |     |      addq.l #8,sp
   139b0:	|  |  |  |     |      tst.l d0
   139b2:	|  |  |  |     |  /-- bne.s 139d8 <readIniFile+0x1ce>
					{
						gameSettings.userFullScreen = ! stringToInt (secondSoFar);
   139b4:	|  |  |  |     |  |   move.l sp,d0
   139b6:	|  |  |  |     |  |   addq.l #8,d0
   139b8:	|  |  |  |     |  |   move.l d0,-(sp)
   139ba:	|  |  |  |     |  |   jsr 13b90 <stringToInt>
   139c0:	|  |  |  |     |  |   addq.l #4,sp
   139c2:	|  |  |  |     |  |   tst.l d0
   139c4:	|  |  |  |     |  |   seq d0
   139c6:	|  |  |  |     |  |   neg.b d0
   139c8:	|  |  |  |     |  |   move.b d0,d0
   139ca:	|  |  |  |     |  |   andi.w #255,d0
   139ce:	|  |  |  |     |  |   move.w d0,1caae <gameSettings+0x8>
   139d4:	|  |  |  |     +--|-- bra.w 13ada <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "REFRESH") == 0)
   139d8:	|  |  |  |     |  \-> pea 19de4 <graphics.c.1c13408a+0x1fc>
   139de:	|  |  |  |     |      move.l sp,d0
   139e0:	|  |  |  |     |      addi.l #269,d0
   139e6:	|  |  |  |     |      move.l d0,-(sp)
   139e8:	|  |  |  |     |      jsr 13ca0 <strcmp>
   139ee:	|  |  |  |     |      addq.l #8,sp
   139f0:	|  |  |  |     |      tst.l d0
   139f2:	|  |  |  |     |  /-- bne.s 13a0c <readIniFile+0x202>
					{
						gameSettings.refreshRate = stringToInt (secondSoFar);
   139f4:	|  |  |  |     |  |   move.l sp,d0
   139f6:	|  |  |  |     |  |   addq.l #8,d0
   139f8:	|  |  |  |     |  |   move.l d0,-(sp)
   139fa:	|  |  |  |     |  |   jsr 13b90 <stringToInt>
   13a00:	|  |  |  |     |  |   addq.l #4,sp
   13a02:	|  |  |  |     |  |   move.l d0,1cab0 <gameSettings+0xa>
   13a08:	|  |  |  |     +--|-- bra.w 13ada <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "ANTIALIAS") == 0)
   13a0c:	|  |  |  |     |  \-> pea 19dec <graphics.c.1c13408a+0x204>
   13a12:	|  |  |  |     |      move.l sp,d0
   13a14:	|  |  |  |     |      addi.l #269,d0
   13a1a:	|  |  |  |     |      move.l d0,-(sp)
   13a1c:	|  |  |  |     |      jsr 13ca0 <strcmp>
   13a22:	|  |  |  |     |      addq.l #8,sp
   13a24:	|  |  |  |     |      tst.l d0
   13a26:	|  |  |  |     |  /-- bne.s 13a40 <readIniFile+0x236>
					{
						gameSettings.antiAlias = stringToInt (secondSoFar);
   13a28:	|  |  |  |     |  |   move.l sp,d0
   13a2a:	|  |  |  |     |  |   addq.l #8,d0
   13a2c:	|  |  |  |     |  |   move.l d0,-(sp)
   13a2e:	|  |  |  |     |  |   jsr 13b90 <stringToInt>
   13a34:	|  |  |  |     |  |   addq.l #4,sp
   13a36:	|  |  |  |     |  |   move.l d0,1cab4 <gameSettings+0xe>
   13a3c:	|  |  |  |     +--|-- bra.w 13ada <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "FIXEDPIXELS") == 0)
   13a40:	|  |  |  |     |  \-> pea 19df6 <graphics.c.1c13408a+0x20e>
   13a46:	|  |  |  |     |      move.l sp,d0
   13a48:	|  |  |  |     |      addi.l #269,d0
   13a4e:	|  |  |  |     |      move.l d0,-(sp)
   13a50:	|  |  |  |     |      jsr 13ca0 <strcmp>
   13a56:	|  |  |  |     |      addq.l #8,sp
   13a58:	|  |  |  |     |      tst.l d0
   13a5a:	|  |  |  |     |  /-- bne.s 13a74 <readIniFile+0x26a>
					{
						gameSettings.fixedPixels = stringToInt (secondSoFar);
   13a5c:	|  |  |  |     |  |   move.l sp,d0
   13a5e:	|  |  |  |     |  |   addq.l #8,d0
   13a60:	|  |  |  |     |  |   move.l d0,-(sp)
   13a62:	|  |  |  |     |  |   jsr 13b90 <stringToInt>
   13a68:	|  |  |  |     |  |   addq.l #4,sp
   13a6a:	|  |  |  |     |  |   move.l d0,d0
   13a6c:	|  |  |  |     |  |   move.w d0,1cab8 <gameSettings+0x12>
   13a72:	|  |  |  |     +--|-- bra.s 13ada <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "NOSTARTWINDOW") == 0)
   13a74:	|  |  |  |     |  \-> pea 19e02 <graphics.c.1c13408a+0x21a>
   13a7a:	|  |  |  |     |      move.l sp,d0
   13a7c:	|  |  |  |     |      addi.l #269,d0
   13a82:	|  |  |  |     |      move.l d0,-(sp)
   13a84:	|  |  |  |     |      jsr 13ca0 <strcmp>
   13a8a:	|  |  |  |     |      addq.l #8,sp
   13a8c:	|  |  |  |     |      tst.l d0
   13a8e:	|  |  |  |     |  /-- bne.s 13aa8 <readIniFile+0x29e>
					{
						gameSettings.noStartWindow = stringToInt (secondSoFar);
   13a90:	|  |  |  |     |  |   move.l sp,d0
   13a92:	|  |  |  |     |  |   addq.l #8,d0
   13a94:	|  |  |  |     |  |   move.l d0,-(sp)
   13a96:	|  |  |  |     |  |   jsr 13b90 <stringToInt>
   13a9c:	|  |  |  |     |  |   addq.l #4,sp
   13a9e:	|  |  |  |     |  |   move.l d0,d0
   13aa0:	|  |  |  |     |  |   move.w d0,1caba <gameSettings+0x14>
   13aa6:	|  |  |  |     +--|-- bra.s 13ada <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "DEBUGMODE") == 0)
   13aa8:	|  |  |  |     |  \-> pea 19e10 <graphics.c.1c13408a+0x228>
   13aae:	|  |  |  |     |      move.l sp,d0
   13ab0:	|  |  |  |     |      addi.l #269,d0
   13ab6:	|  |  |  |     |      move.l d0,-(sp)
   13ab8:	|  |  |  |     |      jsr 13ca0 <strcmp>
   13abe:	|  |  |  |     |      addq.l #8,sp
   13ac0:	|  |  |  |     |      tst.l d0
   13ac2:	|  |  |  |     +----- bne.s 13ada <readIniFile+0x2d0>
					{
						gameSettings.debugMode = stringToInt (secondSoFar);
   13ac4:	|  |  |  |     |      move.l sp,d0
   13ac6:	|  |  |  |     |      addq.l #8,d0
   13ac8:	|  |  |  |     |      move.l d0,-(sp)
   13aca:	|  |  |  |     |      jsr 13b90 <stringToInt>
   13ad0:	|  |  |  |     |      addq.l #4,sp
   13ad2:	|  |  |  |     |      move.l d0,d0
   13ad4:	|  |  |  |     |      move.w d0,1cabc <gameSettings+0x16>
					}
				}
				here = 0;
   13ada:	|  |  |  |     \----> clr.b 571(sp)
				doingSecond = FALSE;
   13ade:	|  |  |  |            clr.w 566(sp)
				lineSoFar[0] = 0;
   13ae2:	|  |  |  |            clr.b 265(sp)
				secondSoFar[0] = 0;
   13ae6:	|  |  |  |            clr.b 8(sp)
				break;
   13aea:	|  |  |  |  /-------- bra.s 13b62 <readIniFile+0x358>

				case '=':
				doingSecond = TRUE;
   13aec:	|  |  |  \--|-------> move.w #1,566(sp)
				here = 0;
   13af2:	|  |  |     |         clr.b 571(sp)
				break;
   13af6:	|  |  |     +-------- bra.s 13b62 <readIniFile+0x358>

				default:
				if (doingSecond) {
   13af8:	|  |  \-----|-------> tst.w 566(sp)
   13afc:	|  |        |  /----- beq.s 13b30 <readIniFile+0x326>
					secondSoFar[here ++] = readChar;
   13afe:	|  |        |  |      move.b 571(sp),d0
   13b02:	|  |        |  |      move.b d0,d1
   13b04:	|  |        |  |      addq.b #1,d1
   13b06:	|  |        |  |      move.b d1,571(sp)
   13b0a:	|  |        |  |      move.b d0,d0
   13b0c:	|  |        |  |      andi.l #255,d0
   13b12:	|  |        |  |      lea 572(sp),a0
   13b16:	|  |        |  |      adda.l d0,a0
   13b18:	|  |        |  |      move.b 570(sp),-564(a0)
					secondSoFar[here] = 0;
   13b1e:	|  |        |  |      moveq #0,d0
   13b20:	|  |        |  |      move.b 571(sp),d0
   13b24:	|  |        |  |      lea 572(sp),a0
   13b28:	|  |        |  |      adda.l d0,a0
   13b2a:	|  |        |  |      clr.b -564(a0)
				} else {
					lineSoFar[here ++] = readChar;
					lineSoFar[here] = 0;
				}
				break;
   13b2e:	|  |        |  |  /-- bra.s 13b60 <readIniFile+0x356>
					lineSoFar[here ++] = readChar;
   13b30:	|  |        |  \--|-> move.b 571(sp),d0
   13b34:	|  |        |     |   move.b d0,d1
   13b36:	|  |        |     |   addq.b #1,d1
   13b38:	|  |        |     |   move.b d1,571(sp)
   13b3c:	|  |        |     |   move.b d0,d0
   13b3e:	|  |        |     |   andi.l #255,d0
   13b44:	|  |        |     |   lea 572(sp),a0
   13b48:	|  |        |     |   adda.l d0,a0
   13b4a:	|  |        |     |   move.b 570(sp),-307(a0)
					lineSoFar[here] = 0;
   13b50:	|  |        |     |   moveq #0,d0
   13b52:	|  |        |     |   move.b 571(sp),d0
   13b56:	|  |        |     |   lea 572(sp),a0
   13b5a:	|  |        |     |   adda.l d0,a0
   13b5c:	|  |        |     |   clr.b -307(a0)
				break;
   13b60:	|  |        |     \-> nop
			}
		} while (keepGoing);
   13b62:	|  |        \-------> tst.w 568(sp)
   13b66:	|  \----------------- bne.w 138fa <readIniFile+0xf0>

		Close(fp);
   13b6a:	|                     move.l 546(sp),526(sp)
   13b70:	|                     move.l 1c9d2 <DOSBase>,d0
   13b76:	|                     movea.l d0,a6
   13b78:	|                     move.l 526(sp),d1
   13b7c:	|                     jsr -36(a6)
   13b80:	|                     move.l d0,522(sp)
	}
}
   13b84:	\-------------------> nop
   13b86:	                      move.l (sp)+,d2
   13b88:	                      movea.l (sp)+,a6
   13b8a:	                      lea 564(sp),sp
   13b8e:	                      rts

00013b90 <stringToInt>:

unsigned int stringToInt (char * s) {
   13b90:	             subq.l #8,sp
	int i = 0;
   13b92:	             clr.l 4(sp)
	BOOL negative = FALSE;
   13b96:	             clr.w 2(sp)
	for (;;) {
		if (*s >= '0' && *s <= '9') {
   13b9a:	/----------> movea.l 12(sp),a0
   13b9e:	|            move.b (a0),d0
   13ba0:	|            cmpi.b #47,d0
   13ba4:	|        /-- ble.s 13bdc <stringToInt+0x4c>
   13ba6:	|        |   movea.l 12(sp),a0
   13baa:	|        |   move.b (a0),d0
   13bac:	|        |   cmpi.b #57,d0
   13bb0:	|        +-- bgt.s 13bdc <stringToInt+0x4c>
			i *= 10;
   13bb2:	|        |   move.l 4(sp),d1
   13bb6:	|        |   move.l d1,d0
   13bb8:	|        |   add.l d0,d0
   13bba:	|        |   add.l d0,d0
   13bbc:	|        |   add.l d1,d0
   13bbe:	|        |   add.l d0,d0
   13bc0:	|        |   move.l d0,4(sp)
			i += *s - '0';
   13bc4:	|        |   movea.l 12(sp),a0
   13bc8:	|        |   move.b (a0),d0
   13bca:	|        |   ext.w d0
   13bcc:	|        |   movea.w d0,a0
   13bce:	|        |   moveq #-48,d0
   13bd0:	|        |   add.l a0,d0
   13bd2:	|        |   add.l d0,4(sp)
			s ++;
   13bd6:	|        |   addq.l #1,12(sp)
   13bda:	|  /-----|-- bra.s 13c14 <stringToInt+0x84>
		} else if (*s == '-') {
   13bdc:	|  |     \-> movea.l 12(sp),a0
   13be0:	|  |         move.b (a0),d0
   13be2:	|  |         cmpi.b #45,d0
   13be6:	|  |     /-- bne.s 13c00 <stringToInt+0x70>
			negative = ! negative;
   13be8:	|  |     |   tst.w 2(sp)
   13bec:	|  |     |   seq d0
   13bee:	|  |     |   neg.b d0
   13bf0:	|  |     |   move.b d0,d0
   13bf2:	|  |     |   andi.w #255,d0
   13bf6:	|  |     |   move.w d0,2(sp)
			s++;
   13bfa:	|  |     |   addq.l #1,12(sp)
   13bfe:	+--|-----|-- bra.s 13b9a <stringToInt+0xa>
		} else {
			if (negative)
   13c00:	|  |     \-> tst.w 2(sp)
   13c04:	|  |     /-- beq.s 13c0e <stringToInt+0x7e>
				return -i;
   13c06:	|  |     |   move.l 4(sp),d0
   13c0a:	|  |     |   neg.l d0
   13c0c:	|  |  /--|-- bra.s 13c16 <stringToInt+0x86>
			return i;
   13c0e:	|  |  |  \-> move.l 4(sp),d0
   13c12:	|  |  +----- bra.s 13c16 <stringToInt+0x86>
		if (*s >= '0' && *s <= '9') {
   13c14:	\--\--|----X bra.s 13b9a <stringToInt+0xa>
		}
	}
   13c16:	      \----> addq.l #8,sp
   13c18:	             rts

00013c1a <fileExists>:
 */
#include <proto/dos.h>
#include "helpers.h"
#include "support/gcc8_c_support.h"

BYTE fileExists(const char * file) {
   13c1a:	    lea -28(sp),sp
   13c1e:	    move.l a6,-(sp)
   13c20:	    move.l d2,-(sp)
	KPrintF("fileexists: Checking File");
   13c22:	    pea 19e1a <graphics.c.1c13408a+0x232>
   13c28:	    jsr 17254 <KPrintF>
   13c2e:	    addq.l #4,sp
	BPTR tester;
	BYTE retval = 0;
   13c30:	    clr.b 35(sp)
	tester = Open(file, MODE_OLDFILE);
   13c34:	    move.l 40(sp),30(sp)
   13c3a:	    move.l #1005,26(sp)
   13c42:	    move.l 1c9d2 <DOSBase>,d0
   13c48:	    movea.l d0,a6
   13c4a:	    move.l 30(sp),d1
   13c4e:	    move.l 26(sp),d2
   13c52:	    jsr -30(a6)
   13c56:	    move.l d0,22(sp)
   13c5a:	    move.l 22(sp),d0
   13c5e:	    move.l d0,18(sp)
	if (tester) {
   13c62:	/-- beq.s 13c92 <fileExists+0x78>
		KPrintF("fileexists: File exists");
   13c64:	|   pea 19e34 <graphics.c.1c13408a+0x24c>
   13c6a:	|   jsr 17254 <KPrintF>
   13c70:	|   addq.l #4,sp
		retval = 1;
   13c72:	|   move.b #1,35(sp)
		Close(tester);
   13c78:	|   move.l 18(sp),14(sp)
   13c7e:	|   move.l 1c9d2 <DOSBase>,d0
   13c84:	|   movea.l d0,a6
   13c86:	|   move.l 14(sp),d1
   13c8a:	|   jsr -36(a6)
   13c8e:	|   move.l d0,10(sp)
	}
	return retval;
   13c92:	\-> move.b 35(sp),d0
   13c96:	    move.l (sp)+,d2
   13c98:	    movea.l (sp)+,a6
   13c9a:	    lea 28(sp),sp
   13c9e:	    rts

00013ca0 <strcmp>:
#endif


int strcmp(const char* s1, const char* s2)
{
    while(*s1 && (*s1 == *s2))
   13ca0:	   /-- bra.s 13caa <strcmp+0xa>
    {
        s1++;
   13ca2:	/--|-> addq.l #1,4(sp)
        s2++;
   13ca6:	|  |   addq.l #1,8(sp)
    while(*s1 && (*s1 == *s2))
   13caa:	|  \-> movea.l 4(sp),a0
   13cae:	|      move.b (a0),d0
   13cb0:	|  /-- beq.s 13cc2 <strcmp+0x22>
   13cb2:	|  |   movea.l 4(sp),a0
   13cb6:	|  |   move.b (a0),d1
   13cb8:	|  |   movea.l 8(sp),a0
   13cbc:	|  |   move.b (a0),d0
   13cbe:	|  |   cmp.b d1,d0
   13cc0:	\--|-- beq.s 13ca2 <strcmp+0x2>
    }
    return *(const unsigned char*)s1 - *(const unsigned char*)s2;
   13cc2:	   \-> movea.l 4(sp),a0
   13cc6:	       move.b (a0),d0
   13cc8:	       moveq #0,d1
   13cca:	       move.b d0,d1
   13ccc:	       movea.l 8(sp),a0
   13cd0:	       move.b (a0),d0
   13cd2:	       move.b d0,d0
   13cd4:	       andi.l #255,d0
   13cda:	       sub.l d0,d1
   13cdc:	       move.l d1,d0
}
   13cde:	       rts

00013ce0 <strlen>:

long unsigned int strlen (const char *s) 
{  
   13ce0:	       subq.l #4,sp
	long unsigned int i = 0;
   13ce2:	       clr.l (sp)
	while(s[i]) i++; 
   13ce4:	   /-- bra.s 13ce8 <strlen+0x8>
   13ce6:	/--|-> addq.l #1,(sp)
   13ce8:	|  \-> movea.l 8(sp),a0
   13cec:	|      adda.l (sp),a0
   13cee:	|      move.b (a0),d0
   13cf0:	\----- bne.s 13ce6 <strlen+0x6>
	return(i);
   13cf2:	       move.l (sp),d0
}
   13cf4:	       addq.l #4,sp
   13cf6:	       rts

00013cf8 <strcpy>:

char *strcpy(char *t, const char *s) 
{
	while(*t++ = *s++);
   13cf8:	    nop
   13cfa:	/-> move.l 8(sp),d0
   13cfe:	|   move.l d0,d1
   13d00:	|   addq.l #1,d1
   13d02:	|   move.l d1,8(sp)
   13d06:	|   movea.l 4(sp),a0
   13d0a:	|   lea 1(a0),a1
   13d0e:	|   move.l a1,4(sp)
   13d12:	|   movea.l d0,a1
   13d14:	|   move.b (a1),d0
   13d16:	|   move.b d0,(a0)
   13d18:	|   move.b (a0),d0
   13d1a:	\-- bne.s 13cfa <strcpy+0x2>
}
   13d1c:	    nop
   13d1e:	    rts

00013d20 <joinStrings>:

char * joinStrings (const char * s1, const char * s2) {
   13d20:	    lea -20(sp),sp
   13d24:	    move.l a6,-(sp)
   13d26:	    move.l d2,-(sp)
	char * newString = AllocVec(strlen (s1) + strlen (s2) + 1, MEMF_ANY); 
   13d28:	    move.l 32(sp),-(sp)
   13d2c:	    jsr 13ce0 <strlen>
   13d32:	    addq.l #4,sp
   13d34:	    move.l d0,d2
   13d36:	    move.l 36(sp),-(sp)
   13d3a:	    jsr 13ce0 <strlen>
   13d40:	    addq.l #4,sp
   13d42:	    add.l d2,d0
   13d44:	    move.l d0,d1
   13d46:	    addq.l #1,d1
   13d48:	    move.l d1,20(sp)
   13d4c:	    clr.l 16(sp)
   13d50:	    move.l 1c9ca <SysBase>,d0
   13d56:	    movea.l d0,a6
   13d58:	    move.l 20(sp),d0
   13d5c:	    move.l 16(sp),d1
   13d60:	    jsr -684(a6)
   13d64:	    move.l d0,12(sp)
   13d68:	    move.l 12(sp),d0
   13d6c:	    move.l d0,8(sp)
	char * t = newString;
   13d70:	    move.l 8(sp),24(sp)

	while(*t++ = *s1++);
   13d76:	    nop
   13d78:	/-> move.l 32(sp),d0
   13d7c:	|   move.l d0,d1
   13d7e:	|   addq.l #1,d1
   13d80:	|   move.l d1,32(sp)
   13d84:	|   movea.l 24(sp),a0
   13d88:	|   lea 1(a0),a1
   13d8c:	|   move.l a1,24(sp)
   13d90:	|   movea.l d0,a1
   13d92:	|   move.b (a1),d0
   13d94:	|   move.b d0,(a0)
   13d96:	|   move.b (a0),d0
   13d98:	\-- bne.s 13d78 <joinStrings+0x58>
	t--;
   13d9a:	    subq.l #1,24(sp)
	while(*t++ = *s2++);
   13d9e:	    nop
   13da0:	/-> move.l 36(sp),d0
   13da4:	|   move.l d0,d1
   13da6:	|   addq.l #1,d1
   13da8:	|   move.l d1,36(sp)
   13dac:	|   movea.l 24(sp),a0
   13db0:	|   lea 1(a0),a1
   13db4:	|   move.l a1,24(sp)
   13db8:	|   movea.l d0,a1
   13dba:	|   move.b (a1),d0
   13dbc:	|   move.b d0,(a0)
   13dbe:	|   move.b (a0),d0
   13dc0:	\-- bne.s 13da0 <joinStrings+0x80>

	return newString;
   13dc2:	    move.l 8(sp),d0
}
   13dc6:	    move.l (sp)+,d2
   13dc8:	    movea.l (sp)+,a6
   13dca:	    lea 20(sp),sp
   13dce:	    rts

00013dd0 <itoa>:

#define va_start(ap, last) (ap = (va_list)&last + sizeof(last))
#define va_arg(ap, type) (*(type*)(ap += sizeof(type)) - 1)
#define va_end(ap) (ap = (va_list)0)

char* itoa(int value, char* str, int base) {
   13dd0:	       lea -16(sp),sp
    char* rc;
    char* ptr;
    char* low;
    // Set '-' for negative decimals.
    if (base == 10 && value < 0) {
   13dd4:	       moveq #10,d0
   13dd6:	       cmp.l 28(sp),d0
   13dda:	   /-- bne.s 13df8 <itoa+0x28>
   13ddc:	   |   tst.l 20(sp)
   13de0:	   +-- bge.s 13df8 <itoa+0x28>
        *str++ = '-';
   13de2:	   |   move.l 24(sp),d0
   13de6:	   |   move.l d0,d1
   13de8:	   |   addq.l #1,d1
   13dea:	   |   move.l d1,24(sp)
   13dee:	   |   movea.l d0,a0
   13df0:	   |   move.b #45,(a0)
        value *= -1;
   13df4:	   |   neg.l 20(sp)
    }
    rc = ptr = str;
   13df8:	   \-> move.l 24(sp),12(sp)
   13dfe:	       move.l 12(sp),4(sp)
    // Set pointer to last digit's place.
    do {
        *ptr++ = "0123456789abcdef"[value % base];
   13e04:	   /-> move.l 20(sp),d0
   13e08:	   |   move.l 28(sp),-(sp)
   13e0c:	   |   move.l d0,-(sp)
   13e0e:	   |   jsr 17cb4 <__modsi3>
   13e14:	   |   addq.l #8,sp
   13e16:	   |   movea.l d0,a1
   13e18:	   |   move.l 12(sp),d0
   13e1c:	   |   move.l d0,d1
   13e1e:	   |   addq.l #1,d1
   13e20:	   |   move.l d1,12(sp)
   13e24:	   |   lea 19e4c <graphics.c.1c13408a+0x264>,a0
   13e2a:	   |   move.b (0,a1,a0.l),d1
   13e2e:	   |   movea.l d0,a0
   13e30:	   |   move.b d1,(a0)
        value /= base;
   13e32:	   |   move.l 28(sp),-(sp)
   13e36:	   |   move.l 24(sp),-(sp)
   13e3a:	   |   jsr 17c86 <__divsi3>
   13e40:	   |   addq.l #8,sp
   13e42:	   |   move.l d0,20(sp)
    } while (value);
   13e46:	   \-- bne.s 13e04 <itoa+0x34>
    // Null-terminate string.
    *ptr-- = '\0';
   13e48:	       move.l 12(sp),d0
   13e4c:	       move.l d0,d1
   13e4e:	       subq.l #1,d1
   13e50:	       move.l d1,12(sp)
   13e54:	       movea.l d0,a0
   13e56:	       clr.b (a0)
    // Reverse string.
    for (low = rc; low < ptr; low++, ptr--) {
   13e58:	       move.l 4(sp),8(sp)
   13e5e:	   /-- bra.s 13e84 <itoa+0xb4>
        char temp = *low;
   13e60:	/--|-> movea.l 8(sp),a0
   13e64:	|  |   move.b (a0),3(sp)
        *low = *ptr;
   13e68:	|  |   movea.l 12(sp),a0
   13e6c:	|  |   move.b (a0),d0
   13e6e:	|  |   movea.l 8(sp),a0
   13e72:	|  |   move.b d0,(a0)
        *ptr = temp;
   13e74:	|  |   movea.l 12(sp),a0
   13e78:	|  |   move.b 3(sp),(a0)
    for (low = rc; low < ptr; low++, ptr--) {
   13e7c:	|  |   addq.l #1,8(sp)
   13e80:	|  |   subq.l #1,12(sp)
   13e84:	|  \-> move.l 8(sp),d0
   13e88:	|      cmp.l 12(sp),d0
   13e8c:	\----- bcs.s 13e60 <itoa+0x90>
    }
    return rc;
   13e8e:	       move.l 4(sp),d0
}
   13e92:	       lea 16(sp),sp
   13e96:	       rts

00013e98 <vsprintf2>:

int vsprintf2(char* str, const char* format, va_list args) {
   13e98:	                            lea -40(sp),sp
   13e9c:	                            move.l d2,-(sp)
    char* s = str;
   13e9e:	                            move.l 48(sp),40(sp)
    const char* p = format;
   13ea4:	                            move.l 52(sp),36(sp)
    int i;
    char* sval;
    char buffer[20];

    while (*p) {
   13eaa:	   /----------------------- bra.w 13fde <vsprintf2+0x146>
        if (*p == '%') {
   13eae:	/--|----------------------> movea.l 36(sp),a0
   13eb2:	|  |                        move.b (a0),d0
   13eb4:	|  |                        cmpi.b #37,d0
   13eb8:	|  |  /-------------------- bne.w 13fc4 <vsprintf2+0x12c>
            switch (*++p) {
   13ebc:	|  |  |                     addq.l #1,36(sp)
   13ec0:	|  |  |                     movea.l 36(sp),a0
   13ec4:	|  |  |                     move.b (a0),d0
   13ec6:	|  |  |                     ext.w d0
   13ec8:	|  |  |                     movea.w d0,a0
   13eca:	|  |  |                     moveq #115,d0
   13ecc:	|  |  |                     cmp.l a0,d0
   13ece:	|  |  |           /-------- beq.s 13f46 <vsprintf2+0xae>
   13ed0:	|  |  |           |         moveq #115,d1
   13ed2:	|  |  |           |         cmp.l a0,d1
   13ed4:	|  |  |  /--------|-------- blt.w 13fac <vsprintf2+0x114>
   13ed8:	|  |  |  |        |         moveq #99,d2
   13eda:	|  |  |  |        |         cmp.l a0,d2
   13edc:	|  |  |  |  /-----|-------- beq.w 13f84 <vsprintf2+0xec>
   13ee0:	|  |  |  |  |     |         moveq #100,d0
   13ee2:	|  |  |  |  |     |         cmp.l a0,d0
   13ee4:	|  |  |  +--|-----|-------- bne.w 13fac <vsprintf2+0x114>
                case 'd':
                    i = va_arg(args, int);
   13ee8:	|  |  |  |  |     |         addq.l #4,56(sp)
   13eec:	|  |  |  |  |     |         movea.l 56(sp),a0
   13ef0:	|  |  |  |  |     |         move.l (a0),d0
   13ef2:	|  |  |  |  |     |         move.l d0,d1
   13ef4:	|  |  |  |  |     |         subq.l #1,d1
   13ef6:	|  |  |  |  |     |         move.l d1,24(sp)
                    itoa(i, buffer, 10);
   13efa:	|  |  |  |  |     |         pea a <_start+0xa>
   13efe:	|  |  |  |  |     |         lea 8(sp),a0
   13f02:	|  |  |  |  |     |         move.l a0,-(sp)
   13f04:	|  |  |  |  |     |         move.l 32(sp),-(sp)
   13f08:	|  |  |  |  |     |         jsr 13dd0 <itoa>
   13f0e:	|  |  |  |  |     |         lea 12(sp),sp
					for (char* b = buffer; *b; b++) {
   13f12:	|  |  |  |  |     |         lea 44(sp),a0
   13f16:	|  |  |  |  |     |         lea -40(a0),a0
   13f1a:	|  |  |  |  |     |         move.l a0,28(sp)
   13f1e:	|  |  |  |  |     |     /-- bra.s 13f3a <vsprintf2+0xa2>
                        *s++ = *b;
   13f20:	|  |  |  |  |     |  /--|-> move.l 40(sp),d0
   13f24:	|  |  |  |  |     |  |  |   move.l d0,d1
   13f26:	|  |  |  |  |     |  |  |   addq.l #1,d1
   13f28:	|  |  |  |  |     |  |  |   move.l d1,40(sp)
   13f2c:	|  |  |  |  |     |  |  |   movea.l 28(sp),a0
   13f30:	|  |  |  |  |     |  |  |   move.b (a0),d1
   13f32:	|  |  |  |  |     |  |  |   movea.l d0,a0
   13f34:	|  |  |  |  |     |  |  |   move.b d1,(a0)
					for (char* b = buffer; *b; b++) {
   13f36:	|  |  |  |  |     |  |  |   addq.l #1,28(sp)
   13f3a:	|  |  |  |  |     |  |  \-> movea.l 28(sp),a0
   13f3e:	|  |  |  |  |     |  |      move.b (a0),d0
   13f40:	|  |  |  |  |     |  \----- bne.s 13f20 <vsprintf2+0x88>
                    }
                    break;
   13f42:	|  |  |  |  |  /--|-------- bra.w 13fda <vsprintf2+0x142>
                case 's':
                    sval = va_arg(args, char*);
   13f46:	|  |  |  |  |  |  \-------> addq.l #4,56(sp)
   13f4a:	|  |  |  |  |  |            movea.l 56(sp),a0
   13f4e:	|  |  |  |  |  |            move.l (a0),d0
   13f50:	|  |  |  |  |  |            move.l d0,d1
   13f52:	|  |  |  |  |  |            subq.l #1,d1
   13f54:	|  |  |  |  |  |            move.l d1,32(sp)
                    while (*sval) {
   13f58:	|  |  |  |  |  |        /-- bra.s 13f7a <vsprintf2+0xe2>
                        *s++ = *sval++;
   13f5a:	|  |  |  |  |  |     /--|-> move.l 32(sp),d1
   13f5e:	|  |  |  |  |  |     |  |   move.l d1,d2
   13f60:	|  |  |  |  |  |     |  |   addq.l #1,d2
   13f62:	|  |  |  |  |  |     |  |   move.l d2,32(sp)
   13f66:	|  |  |  |  |  |     |  |   move.l 40(sp),d0
   13f6a:	|  |  |  |  |  |     |  |   move.l d0,d2
   13f6c:	|  |  |  |  |  |     |  |   addq.l #1,d2
   13f6e:	|  |  |  |  |  |     |  |   move.l d2,40(sp)
   13f72:	|  |  |  |  |  |     |  |   movea.l d1,a0
   13f74:	|  |  |  |  |  |     |  |   move.b (a0),d1
   13f76:	|  |  |  |  |  |     |  |   movea.l d0,a0
   13f78:	|  |  |  |  |  |     |  |   move.b d1,(a0)
                    while (*sval) {
   13f7a:	|  |  |  |  |  |     |  \-> movea.l 32(sp),a0
   13f7e:	|  |  |  |  |  |     |      move.b (a0),d0
   13f80:	|  |  |  |  |  |     \----- bne.s 13f5a <vsprintf2+0xc2>
                    }
                    break;
   13f82:	|  |  |  |  |  +----------- bra.s 13fda <vsprintf2+0x142>
                case 'c':
                    i = va_arg(args, int);
   13f84:	|  |  |  |  \--|----------> addq.l #4,56(sp)
   13f88:	|  |  |  |     |            movea.l 56(sp),a0
   13f8c:	|  |  |  |     |            move.l (a0),d0
   13f8e:	|  |  |  |     |            move.l d0,d1
   13f90:	|  |  |  |     |            subq.l #1,d1
   13f92:	|  |  |  |     |            move.l d1,24(sp)
                    *s++ = (char)i;
   13f96:	|  |  |  |     |            move.l 40(sp),d0
   13f9a:	|  |  |  |     |            move.l d0,d2
   13f9c:	|  |  |  |     |            addq.l #1,d2
   13f9e:	|  |  |  |     |            move.l d2,40(sp)
   13fa2:	|  |  |  |     |            move.l 24(sp),d1
   13fa6:	|  |  |  |     |            movea.l d0,a0
   13fa8:	|  |  |  |     |            move.b d1,(a0)
                    break;
   13faa:	|  |  |  |     +----------- bra.s 13fda <vsprintf2+0x142>
                default:
                    *s++ = *p;
   13fac:	|  |  |  \-----|----------> move.l 40(sp),d0
   13fb0:	|  |  |        |            move.l d0,d1
   13fb2:	|  |  |        |            addq.l #1,d1
   13fb4:	|  |  |        |            move.l d1,40(sp)
   13fb8:	|  |  |        |            movea.l 36(sp),a0
   13fbc:	|  |  |        |            move.b (a0),d1
   13fbe:	|  |  |        |            movea.l d0,a0
   13fc0:	|  |  |        |            move.b d1,(a0)
                    break;
   13fc2:	|  |  |        +----------- bra.s 13fda <vsprintf2+0x142>
            }
        } else {
            *s++ = *p;
   13fc4:	|  |  \--------|----------> move.l 40(sp),d0
   13fc8:	|  |           |            move.l d0,d1
   13fca:	|  |           |            addq.l #1,d1
   13fcc:	|  |           |            move.l d1,40(sp)
   13fd0:	|  |           |            movea.l 36(sp),a0
   13fd4:	|  |           |            move.b (a0),d1
   13fd6:	|  |           |            movea.l d0,a0
   13fd8:	|  |           |            move.b d1,(a0)
        }
        p++;
   13fda:	|  |           \----------> addq.l #1,36(sp)
    while (*p) {
   13fde:	|  \----------------------> movea.l 36(sp),a0
   13fe2:	|                           move.b (a0),d0
   13fe4:	\-------------------------- bne.w 13eae <vsprintf2+0x16>
    }
    *s = '\0';
   13fe8:	                            movea.l 40(sp),a0
   13fec:	                            clr.b (a0)
    return s - str;
   13fee:	                            move.l 40(sp),d0
   13ff2:	                            sub.l 48(sp),d0
}
   13ff6:	                            move.l (sp)+,d2
   13ff8:	                            lea 40(sp),sp
   13ffc:	                            rts

00013ffe <sprintf>:

int sprintf(char* str, const char* format, ...) {
   13ffe:	subq.l #8,sp
    va_list args;
    int done;

    va_start(args, format);
   14000:	moveq #16,d0
   14002:	add.l sp,d0
   14004:	move.l d0,d1
   14006:	addq.l #4,d1
   14008:	move.l d1,4(sp)
    done = vsprintf2(str, format, args);
   1400c:	move.l 16(sp),d0
   14010:	move.l 4(sp),-(sp)
   14014:	move.l d0,-(sp)
   14016:	move.l 20(sp),-(sp)
   1401a:	jsr 13e98 <vsprintf2>
   14020:	lea 12(sp),sp
   14024:	move.l d0,(sp)
    va_end(args);
   14026:	clr.l 4(sp)

    return done;
   1402a:	move.l (sp),d0
}
   1402c:	addq.l #8,sp
   1402e:	rts

00014030 <addVarToStack>:
const char * typeName[] = {"undefined", "number", "user function", "string",
							"built-in function", "file", "stack",
							"object type", "animation", "costume"};


BOOL addVarToStack(const struct variable * va, struct variableStack ** thisStack) {
   14030:	       lea -20(sp),sp
   14034:	       move.l a6,-(sp)
    struct variableStack * newStack = (struct variableStack *)AllocVec(sizeof(struct variableStack), MEMF_ANY);
   14036:	       moveq #12,d0
   14038:	       move.l d0,20(sp)
   1403c:	       clr.l 16(sp)
   14040:	       move.l 1c9ca <SysBase>,d0
   14046:	       movea.l d0,a6
   14048:	       move.l 20(sp),d0
   1404c:	       move.l 16(sp),d1
   14050:	       jsr -684(a6)
   14054:	       move.l d0,12(sp)
   14058:	       move.l 12(sp),d0
   1405c:	       move.l d0,8(sp)
    if (!newStack) return FALSE;
   14060:	   /-- bne.s 14066 <addVarToStack+0x36>
   14062:	   |   clr.w d0
   14064:	/--|-- bra.s 140ae <addVarToStack+0x7e>

    if (!copyMain(va, &newStack->thisVar)) {
   14066:	|  \-> move.l 8(sp),d0
   1406a:	|      move.l d0,-(sp)
   1406c:	|      move.l 32(sp),-(sp)
   14070:	|      jsr 14b92 <copyMain>
   14076:	|      addq.l #8,sp
   14078:	|      tst.w d0
   1407a:	|  /-- bne.s 14096 <addVarToStack+0x66>
        FreeVec(newStack);
   1407c:	|  |   move.l 8(sp),4(sp)
   14082:	|  |   move.l 1c9ca <SysBase>,d0
   14088:	|  |   movea.l d0,a6
   1408a:	|  |   movea.l 4(sp),a1
   1408e:	|  |   jsr -690(a6)
        return FALSE;
   14092:	|  |   clr.w d0
   14094:	+--|-- bra.s 140ae <addVarToStack+0x7e>
    }

    newStack->next = *thisStack;
   14096:	|  \-> movea.l 32(sp),a0
   1409a:	|      move.l (a0),d0
   1409c:	|      movea.l 8(sp),a0
   140a0:	|      move.l d0,8(a0)
    *thisStack = newStack;
   140a4:	|      movea.l 32(sp),a0
   140a8:	|      move.l 8(sp),(a0)
    return TRUE;
   140ac:	|      moveq #1,d0
}
   140ae:	\----> movea.l (sp)+,a6
   140b0:	       lea 20(sp),sp
   140b4:	       rts

000140b6 <addVarToStackQuick>:

BOOL addVarToStackQuick(struct variable *va, struct variableStack **thisStack) {
   140b6:	       lea -16(sp),sp
   140ba:	       move.l a6,-(sp)
    struct variableStack *newStack = AllocVec(sizeof(struct variableStack), MEMF_ANY);
   140bc:	       moveq #12,d0
   140be:	       move.l d0,16(sp)
   140c2:	       clr.l 12(sp)
   140c6:	       move.l 1c9ca <SysBase>,d0
   140cc:	       movea.l d0,a6
   140ce:	       move.l 16(sp),d0
   140d2:	       move.l 12(sp),d1
   140d6:	       jsr -684(a6)
   140da:	       move.l d0,8(sp)
   140de:	       move.l 8(sp),d0
   140e2:	       move.l d0,4(sp)
    if (!newStack) return FALSE;
   140e6:	   /-- bne.s 140ec <addVarToStackQuick+0x36>
   140e8:	   |   clr.w d0
   140ea:	/--|-- bra.s 14122 <addVarToStackQuick+0x6c>

//    if (!copyMain(va, &newStack->thisVar)) return FALSE;

    memcpy(&(newStack->thisVar), va, sizeof(struct variable));
   140ec:	|  \-> move.l 4(sp),d0
   140f0:	|      pea 8 <_start+0x8>
   140f4:	|      move.l 28(sp),-(sp)
   140f8:	|      move.l d0,-(sp)
   140fa:	|      jsr 17208 <memcpy>
   14100:	|      lea 12(sp),sp
    va->varType = SVT_NULL;
   14104:	|      movea.l 24(sp),a0
   14108:	|      clr.l (a0)

    newStack->next = *thisStack;
   1410a:	|      movea.l 28(sp),a0
   1410e:	|      move.l (a0),d0
   14110:	|      movea.l 4(sp),a0
   14114:	|      move.l d0,8(a0)
    *thisStack = newStack;
   14118:	|      movea.l 28(sp),a0
   1411c:	|      move.l 4(sp),(a0)
    return TRUE;
   14120:	|      moveq #1,d0
}
   14122:	\----> movea.l (sp)+,a6
   14124:	       lea 16(sp),sp
   14128:	       rts

0001412a <addVariablesInSecond>:

void addVariablesInSecond(struct variable * var1, struct variable * var2) {
   1412a:	       lea -16(sp),sp
   1412e:	       move.l a6,-(sp)
	if (var1->varType == SVT_INT && var2->varType == SVT_INT) {
   14130:	       movea.l 24(sp),a0
   14134:	       move.l (a0),d0
   14136:	       moveq #1,d1
   14138:	       cmp.l d0,d1
   1413a:	   /-- bne.s 14164 <addVariablesInSecond+0x3a>
   1413c:	   |   movea.l 28(sp),a0
   14140:	   |   move.l (a0),d0
   14142:	   |   moveq #1,d1
   14144:	   |   cmp.l d0,d1
   14146:	   +-- bne.s 14164 <addVariablesInSecond+0x3a>
		var2->varData.intValue += var1->varData.intValue;
   14148:	   |   movea.l 28(sp),a0
   1414c:	   |   move.l 4(a0),d1
   14150:	   |   movea.l 24(sp),a0
   14154:	   |   move.l 4(a0),d0
   14158:	   |   add.l d1,d0
   1415a:	   |   movea.l 28(sp),a0
   1415e:	   |   move.l d0,4(a0)
   14162:	/--|-- bra.s 141de <addVariablesInSecond+0xb4>
	} else {
		char * string1 = getTextFromAnyVar(var1);
   14164:	|  \-> move.l 24(sp),-(sp)
   14168:	|      jsr 14dca <getTextFromAnyVar>
   1416e:	|      addq.l #4,sp
   14170:	|      move.l d0,16(sp)
		char * string2 = getTextFromAnyVar(var2);
   14174:	|      move.l 28(sp),-(sp)
   14178:	|      jsr 14dca <getTextFromAnyVar>
   1417e:	|      addq.l #4,sp
   14180:	|      move.l d0,12(sp)

		unlinkVar(var2);
   14184:	|      move.l 28(sp),-(sp)
   14188:	|      jsr 14a42 <unlinkVar>
   1418e:	|      addq.l #4,sp
		var2->varData.theString = joinStrings(string1, string2);
   14190:	|      move.l 12(sp),-(sp)
   14194:	|      move.l 20(sp),-(sp)
   14198:	|      jsr 13d20 <joinStrings>
   1419e:	|      addq.l #8,sp
   141a0:	|      movea.l 28(sp),a0
   141a4:	|      move.l d0,4(a0)
		var2->varType = SVT_STRING;
   141a8:	|      movea.l 28(sp),a0
   141ac:	|      moveq #3,d0
   141ae:	|      move.l d0,(a0)
		FreeVec(string1);
   141b0:	|      move.l 16(sp),8(sp)
   141b6:	|      move.l 1c9ca <SysBase>,d0
   141bc:	|      movea.l d0,a6
   141be:	|      movea.l 8(sp),a1
   141c2:	|      jsr -690(a6)
		FreeVec(string2);
   141c6:	|      move.l 12(sp),4(sp)
   141cc:	|      move.l 1c9ca <SysBase>,d0
   141d2:	|      movea.l d0,a6
   141d4:	|      movea.l 4(sp),a1
   141d8:	|      jsr -690(a6)
	}
}
   141dc:	|      nop
   141de:	\----> nop
   141e0:	       movea.l (sp)+,a6
   141e2:	       lea 16(sp),sp
   141e6:	       rts

000141e8 <compareVariablesInSecond>:

void compareVariablesInSecond (const struct variable *var1, struct variable *var2) {	
	setVariable (var2, SVT_INT, compareVars (*var1, *var2));
   141e8:	movea.l 8(sp),a0
   141ec:	move.l 4(a0),-(sp)
   141f0:	move.l (a0),-(sp)
   141f2:	movea.l 12(sp),a0
   141f6:	move.l 4(a0),-(sp)
   141fa:	move.l (a0),-(sp)
   141fc:	jsr 1421e <compareVars>
   14202:	lea 16(sp),sp
   14206:	move.l d0,-(sp)
   14208:	pea 1 <_start+0x1>
   1420c:	move.l 16(sp),-(sp)
   14210:	jsr 150e6 <setVariable>
   14216:	lea 12(sp),sp
}
   1421a:	nop
   1421c:	rts

0001421e <compareVars>:


int compareVars (const struct variable var1, const struct variable var2) {
   1421e:	       subq.l #4,sp
	int re = 0;
   14220:	       clr.l (sp)
	if (var1.varType == var2.varType) {
   14222:	       move.l 8(sp),d1
   14226:	       move.l 16(sp),d0
   1422a:	       cmp.l d1,d0
   1422c:	/----- bne.w 142f4 <compareVars+0xd6>
		switch (var1.varType) {
   14230:	|      move.l 8(sp),d0
   14234:	|      moveq #9,d1
   14236:	|      cmp.l d0,d1
   14238:	|  /-- bcs.w 142dc <compareVars+0xbe>
   1423c:	|  |   add.l d0,d0
   1423e:	|  |   movea.l d0,a0
   14240:	|  |   adda.l #82508,a0
   14246:	|  |   move.w (a0),d0
   14248:	|  |   jmp (1424c <compareVars+0x2e>,pc,d0.w)
   1424c:	|  |   ori.b #-112,(a4)
   14250:	|  |   ori.l #5243024,(a0)
   14256:	|  |   ori.l #7733392,(a0)
   1425c:	|  |   ori.b #28,(1,a6,d7.w)
			case SVT_NULL:
			re = 1;
   14262:	|  |   move.l d0,(sp)
			break;
   14264:	+--|-- bra.w 142f4 <compareVars+0xd6>

			case SVT_COSTUME:
			re = (var1.varData.costumeHandler == var2.varData.costumeHandler);
   14268:	|  |   move.l 12(sp),d1
   1426c:	|  |   move.l 20(sp),d0
   14270:	|  |   cmp.l d1,d0
   14272:	|  |   seq d0
   14274:	|  |   neg.b d0
   14276:	|  |   move.b d0,d0
   14278:	|  |   andi.l #255,d0
   1427e:	|  |   move.l d0,(sp)
			break;
   14280:	+--|-- bra.s 142f4 <compareVars+0xd6>

			case SVT_ANIM:
			re = (var1.varData.animHandler == var2.varData.animHandler);
   14282:	|  |   move.l 12(sp),d1
   14286:	|  |   move.l 20(sp),d0
   1428a:	|  |   cmp.l d1,d0
   1428c:	|  |   seq d0
   1428e:	|  |   neg.b d0
   14290:	|  |   move.b d0,d0
   14292:	|  |   andi.l #255,d0
   14298:	|  |   move.l d0,(sp)
			break;
   1429a:	+--|-- bra.s 142f4 <compareVars+0xd6>

			case SVT_STRING:

			re = (strcmp (var1.varData.theString, var2.varData.theString) == 0);
   1429c:	|  |   move.l 20(sp),d1
   142a0:	|  |   move.l 12(sp),d0
   142a4:	|  |   move.l d1,-(sp)
   142a6:	|  |   move.l d0,-(sp)
   142a8:	|  |   jsr 13ca0 <strcmp>
   142ae:	|  |   addq.l #8,sp
   142b0:	|  |   tst.l d0
   142b2:	|  |   seq d0
   142b4:	|  |   neg.b d0
   142b6:	|  |   move.b d0,d0
   142b8:	|  |   andi.l #255,d0
   142be:	|  |   move.l d0,(sp)
			break;
   142c0:	+--|-- bra.s 142f4 <compareVars+0xd6>

			case SVT_STACK:
			re = (var1.varData.theStack == var2.varData.theStack);
   142c2:	|  |   move.l 12(sp),d1
   142c6:	|  |   move.l 20(sp),d0
   142ca:	|  |   cmp.l d1,d0
   142cc:	|  |   seq d0
   142ce:	|  |   neg.b d0
   142d0:	|  |   move.b d0,d0
   142d2:	|  |   andi.l #255,d0
   142d8:	|  |   move.l d0,(sp)
			break;
   142da:	+--|-- bra.s 142f4 <compareVars+0xd6>

			default:
			re = (var1.varData.intValue == var2.varData.intValue);
   142dc:	|  \-> move.l 12(sp),d1
   142e0:	|      move.l 20(sp),d0
   142e4:	|      cmp.l d1,d0
   142e6:	|      seq d0
   142e8:	|      neg.b d0
   142ea:	|      move.b d0,d0
   142ec:	|      andi.l #255,d0
   142f2:	|      move.l d0,(sp)
		}
	}
	return re;
   142f4:	\----> move.l (sp),d0
}
   142f6:	       addq.l #4,sp
   142f8:	       rts

000142fa <copyStack>:

BOOL copyStack (const struct variable * from, struct variable * to) {
   142fa:	             lea -16(sp),sp
   142fe:	             move.l a6,-(sp)
	to->varType = SVT_STACK;
   14300:	             movea.l 28(sp),a0
   14304:	             moveq #6,d0
   14306:	             move.l d0,(a0)
	to->varData.theStack = (struct stackHandler *)AllocVec(sizeof(struct stackHandler), MEMF_ANY);
   14308:	             moveq #12,d0
   1430a:	             move.l d0,12(sp)
   1430e:	             clr.l 8(sp)
   14312:	             move.l 1c9ca <SysBase>,d0
   14318:	             movea.l d0,a6
   1431a:	             move.l 12(sp),d0
   1431e:	             move.l 8(sp),d1
   14322:	             jsr -684(a6)
   14326:	             move.l d0,4(sp)
   1432a:	             move.l 4(sp),d0
   1432e:	             movea.l 28(sp),a0
   14332:	             move.l d0,4(a0)
	if (!to->varData.theStack) return FALSE;
   14336:	             movea.l 28(sp),a0
   1433a:	             move.l 4(a0),d0
   1433e:	         /-- bne.s 14346 <copyStack+0x4c>
   14340:	         |   clr.w d0
   14342:	/--------|-- bra.w 143c8 <copyStack+0xce>
	to->varData.theStack->first = NULL;
   14346:	|        \-> movea.l 28(sp),a0
   1434a:	|            movea.l 4(a0),a0
   1434e:	|            clr.l (a0)
	to->varData.theStack->last = NULL;
   14350:	|            movea.l 28(sp),a0
   14354:	|            movea.l 4(a0),a0
   14358:	|            clr.l 4(a0)
	to->varData.theStack->timesUsed = 1;
   1435c:	|            movea.l 28(sp),a0
   14360:	|            movea.l 4(a0),a0
   14364:	|            moveq #1,d0
   14366:	|            move.l d0,8(a0)
	struct variableStack * a = from->varData.theStack->first;
   1436a:	|            movea.l 24(sp),a0
   1436e:	|            movea.l 4(a0),a0
   14372:	|            move.l (a0),16(sp)

	while (a) {
   14376:	|     /----- bra.s 143c0 <copyStack+0xc6>
		addVarToStack(&a->thisVar, &(to->varData.theStack->first));
   14378:	|  /--|----> movea.l 28(sp),a0
   1437c:	|  |  |      move.l 4(a0),d0
   14380:	|  |  |      move.l d0,d1
   14382:	|  |  |      move.l 16(sp),d0
   14386:	|  |  |      move.l d1,-(sp)
   14388:	|  |  |      move.l d0,-(sp)
   1438a:	|  |  |      jsr 14030 <addVarToStack>
   14390:	|  |  |      addq.l #8,sp
		if (to->varData.theStack->last == NULL) {
   14392:	|  |  |      movea.l 28(sp),a0
   14396:	|  |  |      movea.l 4(a0),a0
   1439a:	|  |  |      move.l 4(a0),d0
   1439e:	|  |  |  /-- bne.s 143b6 <copyStack+0xbc>
			to->varData.theStack->last = to->varData.theStack->first;
   143a0:	|  |  |  |   movea.l 28(sp),a0
   143a4:	|  |  |  |   movea.l 4(a0),a1
   143a8:	|  |  |  |   movea.l 28(sp),a0
   143ac:	|  |  |  |   movea.l 4(a0),a0
   143b0:	|  |  |  |   move.l (a1),d0
   143b2:	|  |  |  |   move.l d0,4(a0)
		}
		a = a->next;
   143b6:	|  |  |  \-> movea.l 16(sp),a0
   143ba:	|  |  |      move.l 8(a0),16(sp)
	while (a) {
   143c0:	|  |  \----> tst.l 16(sp)
   143c4:	|  \-------- bne.s 14378 <copyStack+0x7e>
	}

	return TRUE;
   143c6:	|            moveq #1,d0
}
   143c8:	\----------> movea.l (sp)+,a6
   143ca:	             lea 16(sp),sp
   143ce:	             rts

000143d0 <deleteVarFromStack>:

int deleteVarFromStack (const struct variable * va, struct variableStack ** thisStack, BOOL allOfEm) {
   143d0:	                lea -20(sp),sp
   143d4:	                move.l a6,-(sp)
   143d6:	                move.l 36(sp),d0
   143da:	                move.w d0,d0
   143dc:	                move.w d0,6(sp)
    struct variableStack ** huntVar = thisStack;
   143e0:	                move.l 32(sp),20(sp)
    struct variableStack * killMe;
    int reply = 0;
   143e6:	                clr.l 16(sp)

    while (*huntVar) {
   143ea:	   /----------- bra.s 14468 <deleteVarFromStack+0x98>
        if (compareVars((*huntVar)->thisVar, *va)) {
   143ec:	/--|----------> movea.l 20(sp),a0
   143f0:	|  |            movea.l (a0),a0
   143f2:	|  |            movea.l 28(sp),a1
   143f6:	|  |            move.l 4(a1),-(sp)
   143fa:	|  |            move.l (a1),-(sp)
   143fc:	|  |            move.l 4(a0),-(sp)
   14400:	|  |            move.l (a0),-(sp)
   14402:	|  |            jsr 1421e <compareVars>
   14408:	|  |            lea 16(sp),sp
   1440c:	|  |            tst.l d0
   1440e:	|  |  /-------- beq.s 1445a <deleteVarFromStack+0x8a>
            killMe = *huntVar;
   14410:	|  |  |         movea.l 20(sp),a0
   14414:	|  |  |         move.l (a0),12(sp)
            *huntVar = killMe->next;
   14418:	|  |  |         movea.l 12(sp),a0
   1441c:	|  |  |         move.l 8(a0),d0
   14420:	|  |  |         movea.l 20(sp),a0
   14424:	|  |  |         move.l d0,(a0)
            unlinkVar(&killMe->thisVar);
   14426:	|  |  |         move.l 12(sp),d0
   1442a:	|  |  |         move.l d0,-(sp)
   1442c:	|  |  |         jsr 14a42 <unlinkVar>
   14432:	|  |  |         addq.l #4,sp
            FreeVec(killMe);
   14434:	|  |  |         move.l 12(sp),8(sp)
   1443a:	|  |  |         move.l 1c9ca <SysBase>,d0
   14440:	|  |  |         movea.l d0,a6
   14442:	|  |  |         movea.l 8(sp),a1
   14446:	|  |  |         jsr -690(a6)
            if (!allOfEm) return 1;
   1444a:	|  |  |         tst.w 6(sp)
   1444e:	|  |  |     /-- bne.s 14454 <deleteVarFromStack+0x84>
   14450:	|  |  |     |   moveq #1,d0
   14452:	|  |  |  /--|-- bra.s 14476 <deleteVarFromStack+0xa6>
            reply++;
   14454:	|  |  |  |  \-> addq.l #1,16(sp)
   14458:	|  +--|--|----- bra.s 14468 <deleteVarFromStack+0x98>
        } else {
            huntVar = &((*huntVar)->next);
   1445a:	|  |  \--|----> movea.l 20(sp),a0
   1445e:	|  |     |      move.l (a0),d0
   14460:	|  |     |      move.l d0,d1
   14462:	|  |     |      addq.l #8,d1
   14464:	|  |     |      move.l d1,20(sp)
    while (*huntVar) {
   14468:	|  \-----|----> movea.l 20(sp),a0
   1446c:	|        |      move.l (a0),d0
   1446e:	\--------|----- bne.w 143ec <deleteVarFromStack+0x1c>
        }
    }

    return reply;
   14472:	         |      move.l 16(sp),d0
}
   14476:	         \----> movea.l (sp)+,a6
   14478:	                lea 20(sp),sp
   1447c:	                rts

0001447e <fastArrayGetByIndex>:


struct variable * fastArrayGetByIndex (struct fastArrayHandler * vS, unsigned int theIndex) {
	if (theIndex >= (unsigned int) vS -> size) return NULL;
   1447e:	       movea.l 4(sp),a0
   14482:	       move.l 4(a0),d0
   14486:	       cmp.l 8(sp),d0
   1448a:	   /-- bhi.s 14490 <fastArrayGetByIndex+0x12>
   1448c:	   |   moveq #0,d0
   1448e:	/--|-- bra.s 1449e <fastArrayGetByIndex+0x20>
	return & vS -> fastVariables[theIndex];
   14490:	|  \-> movea.l 4(sp),a0
   14494:	|      move.l (a0),d1
   14496:	|      move.l 8(sp),d0
   1449a:	|      lsl.l #3,d0
   1449c:	|      add.l d1,d0
}
   1449e:	\----> rts

000144a0 <getCostumeFromVar>:

struct persona * getCostumeFromVar(struct variable *thisVar) {
   144a0:	                lea -32(sp),sp
   144a4:	                move.l a6,-(sp)
   144a6:	                move.l a2,-(sp)
    struct persona *p = NULL;
   144a8:	                clr.l 36(sp)

    switch (thisVar->varType) {
   144ac:	                movea.l 44(sp),a0
   144b0:	                move.l (a0),d0
   144b2:	                moveq #8,d1
   144b4:	                cmp.l d0,d1
   144b6:	            /-- beq.s 144c4 <getCostumeFromVar+0x24>
   144b8:	            |   moveq #9,d1
   144ba:	            |   cmp.l d0,d1
   144bc:	   /--------|-- beq.w 14572 <getCostumeFromVar+0xd2>
   144c0:	/--|--------|-- bra.w 1457c <getCostumeFromVar+0xdc>
        case SVT_ANIM:
            p = AllocVec(sizeof(struct persona), MEMF_ANY);
   144c4:	|  |        \-> moveq #8,d0
   144c6:	|  |            move.l d0,28(sp)
   144ca:	|  |            clr.l 24(sp)
   144ce:	|  |            move.l 1c9ca <SysBase>,d0
   144d4:	|  |            movea.l d0,a6
   144d6:	|  |            move.l 28(sp),d0
   144da:	|  |            move.l 24(sp),d1
   144de:	|  |            jsr -684(a6)
   144e2:	|  |            move.l d0,20(sp)
   144e6:	|  |            move.l 20(sp),d0
   144ea:	|  |            move.l d0,36(sp)
            if (!p) return NULL;
   144ee:	|  |        /-- bne.s 144f6 <getCostumeFromVar+0x56>
   144f0:	|  |        |   moveq #0,d0
   144f2:	|  |  /-----|-- bra.w 145a6 <getCostumeFromVar+0x106>
            p->numDirections = 1;
   144f6:	|  |  |     \-> movea.l 36(sp),a0
   144fa:	|  |  |         moveq #1,d1
   144fc:	|  |  |         move.l d1,4(a0)
            p->animation = AllocVec(3 * sizeof(struct personaAnimation *), MEMF_ANY);
   14500:	|  |  |         moveq #12,d0
   14502:	|  |  |         move.l d0,16(sp)
   14506:	|  |  |         clr.l 12(sp)
   1450a:	|  |  |         move.l 1c9ca <SysBase>,d0
   14510:	|  |  |         movea.l d0,a6
   14512:	|  |  |         move.l 16(sp),d0
   14516:	|  |  |         move.l 12(sp),d1
   1451a:	|  |  |         jsr -684(a6)
   1451e:	|  |  |         move.l d0,8(sp)
   14522:	|  |  |         move.l 8(sp),d0
   14526:	|  |  |         movea.l 36(sp),a0
   1452a:	|  |  |         move.l d0,(a0)
            if (!p->animation) return NULL;
   1452c:	|  |  |         movea.l 36(sp),a0
   14530:	|  |  |         move.l (a0),d0
   14532:	|  |  |     /-- bne.s 14538 <getCostumeFromVar+0x98>
   14534:	|  |  |     |   moveq #0,d0
   14536:	|  |  +-----|-- bra.s 145a6 <getCostumeFromVar+0x106>

            for (int iii = 0; iii < 3; iii++) {
   14538:	|  |  |     \-> clr.l 32(sp)
   1453c:	|  |  |     /-- bra.s 14568 <getCostumeFromVar+0xc8>
                p->animation[iii] = copyAnim(thisVar->varData.animHandler);
   1453e:	|  |  |  /--|-> movea.l 44(sp),a0
   14542:	|  |  |  |  |   move.l 4(a0),d0
   14546:	|  |  |  |  |   movea.l 36(sp),a0
   1454a:	|  |  |  |  |   movea.l (a0),a0
   1454c:	|  |  |  |  |   move.l 32(sp),d1
   14550:	|  |  |  |  |   add.l d1,d1
   14552:	|  |  |  |  |   add.l d1,d1
   14554:	|  |  |  |  |   lea (0,a0,d1.l),a2
   14558:	|  |  |  |  |   move.l d0,-(sp)
   1455a:	|  |  |  |  |   jsr 955a <copyAnim>
   14560:	|  |  |  |  |   addq.l #4,sp
   14562:	|  |  |  |  |   move.l d0,(a2)
            for (int iii = 0; iii < 3; iii++) {
   14564:	|  |  |  |  |   addq.l #1,32(sp)
   14568:	|  |  |  |  \-> moveq #2,d1
   1456a:	|  |  |  |      cmp.l 32(sp),d1
   1456e:	|  |  |  \----- bge.s 1453e <getCostumeFromVar+0x9e>
            }
            break;
   14570:	|  |  |     /-- bra.s 145a2 <getCostumeFromVar+0x102>

        case SVT_COSTUME:
            return thisVar->varData.costumeHandler;
   14572:	|  \--|-----|-> movea.l 44(sp),a0
   14576:	|     |     |   move.l 4(a0),d0
   1457a:	|     +-----|-- bra.s 145a6 <getCostumeFromVar+0x106>
            break;

        default:
            KPrintF("Expecting an animation variable; found variable of type", typeName[thisVar->varType]);
   1457c:	\-----|-----|-> movea.l 44(sp),a0
   14580:	      |     |   move.l (a0),d0
   14582:	      |     |   add.l d0,d0
   14584:	      |     |   movea.l d0,a1
   14586:	      |     |   adda.l d0,a1
   14588:	      |     |   lea 1c8a6 <typeName>,a0
   1458e:	      |     |   move.l (0,a1,a0.l),d0
   14592:	      |     |   move.l d0,-(sp)
   14594:	      |     |   pea 19ebe <graphics.c.1c13408a+0x2d6>
   1459a:	      |     |   jsr 17254 <KPrintF>
   145a0:	      |     |   addq.l #8,sp
    }

    return p;
   145a2:	      |     \-> move.l 36(sp),d0
}
   145a6:	      \-------> movea.l (sp)+,a2
   145a8:	                movea.l (sp)+,a6
   145aa:	                lea 32(sp),sp
   145ae:	                rts

000145b0 <getSavedGamesStack>:

BOOL getSavedGamesStack(struct stackHandler * sH, char * ext) {
   145b0:	                lea -96(sp),sp
   145b4:	                movem.l d2-d3/a6,-(sp)
	char * pattern = joinStrings("*", ext);
   145b8:	                move.l 116(sp),-(sp)
   145bc:	                pea 19ef6 <graphics.c.1c13408a+0x30e>
   145c2:	                jsr 13d20 <joinStrings>
   145c8:	                addq.l #8,sp
   145ca:	                move.l d0,102(sp)
	if (!pattern) return FALSE;
   145ce:	            /-- bne.s 145d6 <getSavedGamesStack+0x26>
   145d0:	            |   clr.w d0
   145d2:	/-----------|-- bra.w 147ea <getSavedGamesStack+0x23a>

	struct variable newName;
	newName.varType = SVT_NULL;
   145d6:	|           \-> clr.l 14(sp)

	BPTR dirLock = Lock(".", ACCESS_READ);
   145da:	|               move.l #106232,98(sp)
   145e2:	|               moveq #-2,d0
   145e4:	|               move.l d0,94(sp)
   145e8:	|               move.l 1c9d2 <DOSBase>,d0
   145ee:	|               movea.l d0,a6
   145f0:	|               move.l 98(sp),d1
   145f4:	|               move.l 94(sp),d2
   145f8:	|               jsr -84(a6)
   145fc:	|               move.l d0,90(sp)
   14600:	|               move.l 90(sp),d0
   14604:	|               move.l d0,86(sp)
	if (!dirLock) return FALSE;
   14608:	|           /-- bne.s 14610 <getSavedGamesStack+0x60>
   1460a:	|           |   clr.w d0
   1460c:	+-----------|-- bra.w 147ea <getSavedGamesStack+0x23a>

	struct FileInfoBlock *fib = (struct FileInfoBlock *)AllocVec(sizeof(struct FileInfoBlock), MEMF_CLEAR);
   14610:	|           \-> move.l #260,82(sp)
   14618:	|               move.l #65536,78(sp)
   14620:	|               move.l 1c9ca <SysBase>,d0
   14626:	|               movea.l d0,a6
   14628:	|               move.l 82(sp),d0
   1462c:	|               move.l 78(sp),d1
   14630:	|               jsr -684(a6)
   14634:	|               move.l d0,74(sp)
   14638:	|               move.l 74(sp),d0
   1463c:	|               move.l d0,70(sp)
	if (!fib) {
   14640:	|           /-- bne.s 1465e <getSavedGamesStack+0xae>
		UnLock(dirLock);
   14642:	|           |   move.l 86(sp),22(sp)
   14648:	|           |   move.l 1c9d2 <DOSBase>,d0
   1464e:	|           |   movea.l d0,a6
   14650:	|           |   move.l 22(sp),d1
   14654:	|           |   jsr -90(a6)
		return FALSE;
   14658:	|           |   clr.w d0
   1465a:	+-----------|-- bra.w 147ea <getSavedGamesStack+0x23a>
	}

	BOOL result = FALSE;
   1465e:	|           \-> clr.w 106(sp)
	if (Examine(dirLock, fib)) {
   14662:	|               move.l 86(sp),66(sp)
   14668:	|               move.l 70(sp),62(sp)
   1466e:	|               move.l 1c9d2 <DOSBase>,d0
   14674:	|               movea.l d0,a6
   14676:	|               move.l 66(sp),d1
   1467a:	|               move.l 62(sp),d2
   1467e:	|               jsr -102(a6)
   14682:	|               move.l d0,58(sp)
   14686:	|               move.l 58(sp),d0
   1468a:	|  /----------- beq.w 1479e <getSavedGamesStack+0x1ee>
		while (ExNext(dirLock, fib)) {
   1468e:	|  |        /-- bra.w 1476a <getSavedGamesStack+0x1ba>
			if (!strcmp(fib->fib_FileName + strlen(fib->fib_FileName) - strlen(ext), ext)) {
   14692:	|  |  /-----|-> move.l 70(sp),d2
   14696:	|  |  |     |   addq.l #8,d2
   14698:	|  |  |     |   move.l 70(sp),d0
   1469c:	|  |  |     |   addq.l #8,d0
   1469e:	|  |  |     |   move.l d0,-(sp)
   146a0:	|  |  |     |   jsr 13ce0 <strlen>
   146a6:	|  |  |     |   addq.l #4,sp
   146a8:	|  |  |     |   move.l d0,d3
   146aa:	|  |  |     |   move.l 116(sp),-(sp)
   146ae:	|  |  |     |   jsr 13ce0 <strlen>
   146b4:	|  |  |     |   addq.l #4,sp
   146b6:	|  |  |     |   move.l d3,d1
   146b8:	|  |  |     |   sub.l d0,d1
   146ba:	|  |  |     |   move.l d2,d0
   146bc:	|  |  |     |   add.l d1,d0
   146be:	|  |  |     |   move.l 116(sp),-(sp)
   146c2:	|  |  |     |   move.l d0,-(sp)
   146c4:	|  |  |     |   jsr 13ca0 <strcmp>
   146ca:	|  |  |     |   addq.l #8,sp
   146cc:	|  |  |     |   tst.l d0
   146ce:	|  |  |     +-- bne.w 1476a <getSavedGamesStack+0x1ba>
				fib->fib_FileName[strlen(fib->fib_FileName) - strlen(ext)] = 0;
   146d2:	|  |  |     |   move.l 70(sp),d0
   146d6:	|  |  |     |   addq.l #8,d0
   146d8:	|  |  |     |   move.l d0,-(sp)
   146da:	|  |  |     |   jsr 13ce0 <strlen>
   146e0:	|  |  |     |   addq.l #4,sp
   146e2:	|  |  |     |   move.l d0,d2
   146e4:	|  |  |     |   move.l 116(sp),-(sp)
   146e8:	|  |  |     |   jsr 13ce0 <strlen>
   146ee:	|  |  |     |   addq.l #4,sp
   146f0:	|  |  |     |   move.l d0,d1
   146f2:	|  |  |     |   move.l d2,d0
   146f4:	|  |  |     |   sub.l d1,d0
   146f6:	|  |  |     |   movea.l 70(sp),a0
   146fa:	|  |  |     |   clr.b (8,a0,d0.l)
				char * decoded = decodeFilename(fib->fib_FileName);
   146fe:	|  |  |     |   move.l 70(sp),d0
   14702:	|  |  |     |   addq.l #8,d0
   14704:	|  |  |     |   move.l d0,-(sp)
   14706:	|  |  |     |   jsr 118 <decodeFilename>
   1470c:	|  |  |     |   addq.l #4,sp
   1470e:	|  |  |     |   move.l d0,42(sp)
				makeTextVar(&newName, decoded);
   14712:	|  |  |     |   move.l 42(sp),-(sp)
   14716:	|  |  |     |   lea 18(sp),a0
   1471a:	|  |  |     |   move.l a0,-(sp)
   1471c:	|  |  |     |   jsr 14a16 <makeTextVar>
   14722:	|  |  |     |   addq.l #8,sp
				FreeVec(decoded);
   14724:	|  |  |     |   move.l 42(sp),38(sp)
   1472a:	|  |  |     |   move.l 1c9ca <SysBase>,d0
   14730:	|  |  |     |   movea.l d0,a6
   14732:	|  |  |     |   movea.l 38(sp),a1
   14736:	|  |  |     |   jsr -690(a6)
				if (!addVarToStack(&newName, &sH->first)) goto cleanup;
   1473a:	|  |  |     |   move.l 112(sp),d0
   1473e:	|  |  |     |   move.l d0,-(sp)
   14740:	|  |  |     |   lea 18(sp),a0
   14744:	|  |  |     |   move.l a0,-(sp)
   14746:	|  |  |     |   jsr 14030 <addVarToStack>
   1474c:	|  |  |     |   addq.l #8,sp
   1474e:	|  |  |     |   tst.w d0
   14750:	|  |  |  /--|-- beq.s 147a2 <getSavedGamesStack+0x1f2>
				if (sH->last == NULL) sH->last = sH->first;
   14752:	|  |  |  |  |   movea.l 112(sp),a0
   14756:	|  |  |  |  |   move.l 4(a0),d0
   1475a:	|  |  |  |  +-- bne.s 1476a <getSavedGamesStack+0x1ba>
   1475c:	|  |  |  |  |   movea.l 112(sp),a0
   14760:	|  |  |  |  |   move.l (a0),d0
   14762:	|  |  |  |  |   movea.l 112(sp),a0
   14766:	|  |  |  |  |   move.l d0,4(a0)
		while (ExNext(dirLock, fib)) {
   1476a:	|  |  |  |  \-> move.l 86(sp),54(sp)
   14770:	|  |  |  |      move.l 70(sp),50(sp)
   14776:	|  |  |  |      move.l 1c9d2 <DOSBase>,d0
   1477c:	|  |  |  |      movea.l d0,a6
   1477e:	|  |  |  |      move.l 54(sp),d1
   14782:	|  |  |  |      move.l 50(sp),d2
   14786:	|  |  |  |      jsr -108(a6)
   1478a:	|  |  |  |      move.l d0,46(sp)
   1478e:	|  |  |  |      move.l 46(sp),d0
   14792:	|  |  \--|----- bne.w 14692 <getSavedGamesStack+0xe2>
			}
		}
		result = TRUE;
   14796:	|  |     |      move.w #1,106(sp)
   1479c:	|  |     |  /-- bra.s 147a4 <getSavedGamesStack+0x1f4>
	}

cleanup:
   1479e:	|  \-----|--|-> nop
   147a0:	|        |  +-- bra.s 147a4 <getSavedGamesStack+0x1f4>
				if (!addVarToStack(&newName, &sH->first)) goto cleanup;
   147a2:	|        \--|-> nop
	FreeVec(fib);
   147a4:	|           \-> move.l 70(sp),34(sp)
   147aa:	|               move.l 1c9ca <SysBase>,d0
   147b0:	|               movea.l d0,a6
   147b2:	|               movea.l 34(sp),a1
   147b6:	|               jsr -690(a6)
	UnLock(dirLock);
   147ba:	|               move.l 86(sp),30(sp)
   147c0:	|               move.l 1c9d2 <DOSBase>,d0
   147c6:	|               movea.l d0,a6
   147c8:	|               move.l 30(sp),d1
   147cc:	|               jsr -90(a6)
	FreeVec(pattern);
   147d0:	|               move.l 102(sp),26(sp)
   147d6:	|               move.l 1c9ca <SysBase>,d0
   147dc:	|               movea.l d0,a6
   147de:	|               movea.l 26(sp),a1
   147e2:	|               jsr -690(a6)
	return result;
   147e6:	|               move.w 106(sp),d0
}
   147ea:	\-------------> movem.l (sp)+,d2-d3/a6
   147ee:	                lea 96(sp),sp
   147f2:	                rts

000147f4 <getValueType>:


BOOL getValueType (int *toHere, enum variableType vT, const struct variable *v) {
   147f4:	       subq.l #8,sp
	//if (! v) return false;
	if (v->varType != vT) {
   147f6:	       movea.l 20(sp),a0
   147fa:	       move.l (a0),d0
   147fc:	       cmp.l 16(sp),d0
   14800:	/----- beq.s 14864 <getValueType+0x70>
		char * e1 = joinStrings ("Can only perform specified operation on a value which is of type ", typeName[vT]);
   14802:	|      move.l 16(sp),d0
   14806:	|      add.l d0,d0
   14808:	|      movea.l d0,a1
   1480a:	|      adda.l d0,a1
   1480c:	|      lea 1c8a6 <typeName>,a0
   14812:	|      move.l (0,a1,a0.l),d0
   14816:	|      move.l d0,-(sp)
   14818:	|      pea 19efa <graphics.c.1c13408a+0x312>
   1481e:	|      jsr 13d20 <joinStrings>
   14824:	|      addq.l #8,sp
   14826:	|      move.l d0,4(sp)
		char * e2 = joinStrings ("... value supplied was of type ", typeName[v->varType]);
   1482a:	|      movea.l 20(sp),a0
   1482e:	|      move.l (a0),d0
   14830:	|      add.l d0,d0
   14832:	|      movea.l d0,a1
   14834:	|      adda.l d0,a1
   14836:	|      lea 1c8a6 <typeName>,a0
   1483c:	|      move.l (0,a1,a0.l),d0
   14840:	|      move.l d0,-(sp)
   14842:	|      pea 19f3c <graphics.c.1c13408a+0x354>
   14848:	|      jsr 13d20 <joinStrings>
   1484e:	|      addq.l #8,sp
   14850:	|      move.l d0,(sp)
		KPrintF(e1, e2);
   14852:	|      move.l (sp),-(sp)
   14854:	|      move.l 8(sp),-(sp)
   14858:	|      jsr 17254 <KPrintF>
   1485e:	|      addq.l #8,sp

		return FALSE;
   14860:	|      clr.w d0
   14862:	|  /-- bra.s 14874 <getValueType+0x80>
	}
	*toHere = v->varData.intValue;
   14864:	\--|-> movea.l 20(sp),a0
   14868:	   |   move.l 4(a0),d0
   1486c:	   |   movea.l 12(sp),a0
   14870:	   |   move.l d0,(a0)
	return TRUE;
   14872:	   |   moveq #1,d0
}
   14874:	   \-> addq.l #8,sp
   14876:	       rts

00014878 <loadStringToVar>:

BOOL loadStringToVar (struct variable *thisVar, int value) {
	makeTextVar (thisVar, getNumberedString (value));
   14878:	move.l 8(sp),-(sp)
   1487c:	jsr 6ca0 <getNumberedString>
   14882:	addq.l #4,sp
   14884:	move.l d0,-(sp)
   14886:	move.l 8(sp),-(sp)
   1488a:	jsr 14a16 <makeTextVar>
   14890:	addq.l #8,sp
	return (BOOL) (thisVar->varData.theString != NULL);
   14892:	movea.l 4(sp),a0
   14896:	move.l 4(a0),d0
   1489a:	sne d0
   1489c:	neg.b d0
   1489e:	move.b d0,d0
   148a0:	andi.w #255,d0
}
   148a4:	rts

000148a6 <makeFastArrayFromStack>:
		break;
	}
	return TRUE;
}

BOOL makeFastArrayFromStack (struct variable *to, const struct stackHandler *stacky) {
   148a6:	          subq.l #8,sp
    int size = stackSize(stacky);
   148a8:	          move.l 16(sp),-(sp)
   148ac:	          jsr 15154 <stackSize>
   148b2:	          addq.l #4,sp
   148b4:	          move.l d0,4(sp)
    if (!makeFastArraySize(to, size)) return FALSE;
   148b8:	          move.l 4(sp),-(sp)
   148bc:	          move.l 16(sp),-(sp)
   148c0:	          jsr 14910 <makeFastArraySize>
   148c6:	          addq.l #8,sp
   148c8:	          tst.w d0
   148ca:	      /-- bne.s 148d0 <makeFastArrayFromStack+0x2a>
   148cc:	      |   clr.w d0
   148ce:	/-----|-- bra.s 1490c <makeFastArrayFromStack+0x66>

    // Now let's fill up the new array

    struct variableStack *allV = stacky->first;
   148d0:	|     \-> movea.l 16(sp),a0
   148d4:	|         move.l (a0),(sp)
    size = 0;
   148d6:	|         clr.l 4(sp)
    while (allV) {
   148da:	|     /-- bra.s 14906 <makeFastArrayFromStack+0x60>
        copyMain(&allV->thisVar, &to->varData.fastArray->fastVariables[size]);
   148dc:	|  /--|-> movea.l 12(sp),a0
   148e0:	|  |  |   movea.l 4(a0),a0
   148e4:	|  |  |   move.l (a0),d1
   148e6:	|  |  |   move.l 4(sp),d0
   148ea:	|  |  |   lsl.l #3,d0
   148ec:	|  |  |   add.l d0,d1
   148ee:	|  |  |   move.l (sp),d0
   148f0:	|  |  |   move.l d1,-(sp)
   148f2:	|  |  |   move.l d0,-(sp)
   148f4:	|  |  |   jsr 14b92 <copyMain>
   148fa:	|  |  |   addq.l #8,sp
        size++;
   148fc:	|  |  |   addq.l #1,4(sp)
        allV = allV->next;
   14900:	|  |  |   movea.l (sp),a0
   14902:	|  |  |   move.l 8(a0),(sp)
    while (allV) {
   14906:	|  |  \-> tst.l (sp)
   14908:	|  \----- bne.s 148dc <makeFastArrayFromStack+0x36>
    }
    return TRUE;
   1490a:	|         moveq #1,d0
}
   1490c:	\-------> addq.l #8,sp
   1490e:	          rts

00014910 <makeFastArraySize>:


BOOL makeFastArraySize (struct variable *to, int size) {
   14910:	          lea -28(sp),sp
   14914:	          move.l a6,-(sp)
    if (size < 0) {
   14916:	          tst.l 40(sp)
   1491a:	      /-- bge.s 14930 <makeFastArraySize+0x20>
		KPrintF("makeFastArraySize: Can't create a fast array with a negative number of elements!");
   1491c:	      |   pea 19f81 <graphics.c.1c13408a+0x399>
   14922:	      |   jsr 17254 <KPrintF>
   14928:	      |   addq.l #4,sp
		return FALSE;
   1492a:	      |   clr.w d0
   1492c:	/-----|-- bra.w 14a0e <makeFastArraySize+0xfe>
	}		
    unlinkVar(to);
   14930:	|     \-> move.l 36(sp),-(sp)
   14934:	|         jsr 14a42 <unlinkVar>
   1493a:	|         addq.l #4,sp
    to->varType = SVT_FASTARRAY;
   1493c:	|         movea.l 36(sp),a0
   14940:	|         moveq #10,d0
   14942:	|         move.l d0,(a0)
    to->varData.fastArray = AllocVec(sizeof(struct fastArrayHandler), MEMF_ANY);
   14944:	|         moveq #12,d0
   14946:	|         move.l d0,24(sp)
   1494a:	|         clr.l 20(sp)
   1494e:	|         move.l 1c9ca <SysBase>,d0
   14954:	|         movea.l d0,a6
   14956:	|         move.l 24(sp),d0
   1495a:	|         move.l 20(sp),d1
   1495e:	|         jsr -684(a6)
   14962:	|         move.l d0,16(sp)
   14966:	|         move.l 16(sp),d0
   1496a:	|         movea.l 36(sp),a0
   1496e:	|         move.l d0,4(a0)
    if (!to->varData.fastArray) return FALSE;
   14972:	|         movea.l 36(sp),a0
   14976:	|         move.l 4(a0),d0
   1497a:	|     /-- bne.s 14982 <makeFastArraySize+0x72>
   1497c:	|     |   clr.w d0
   1497e:	+-----|-- bra.w 14a0e <makeFastArraySize+0xfe>
    to->varData.fastArray->fastVariables = AllocVec(size * sizeof(struct variable), MEMF_ANY);
   14982:	|     \-> move.l 40(sp),d0
   14986:	|         lsl.l #3,d0
   14988:	|         move.l d0,12(sp)
   1498c:	|         clr.l 8(sp)
   14990:	|         move.l 1c9ca <SysBase>,d0
   14996:	|         movea.l d0,a6
   14998:	|         move.l 12(sp),d0
   1499c:	|         move.l 8(sp),d1
   149a0:	|         jsr -684(a6)
   149a4:	|         move.l d0,4(sp)
   149a8:	|         move.l 4(sp),d0
   149ac:	|         movea.l 36(sp),a0
   149b0:	|         movea.l 4(a0),a0
   149b4:	|         move.l d0,(a0)
    if (!to->varData.fastArray->fastVariables) return FALSE;
   149b6:	|         movea.l 36(sp),a0
   149ba:	|         movea.l 4(a0),a0
   149be:	|         move.l (a0),d0
   149c0:	|     /-- bne.s 149c6 <makeFastArraySize+0xb6>
   149c2:	|     |   clr.w d0
   149c4:	+-----|-- bra.s 14a0e <makeFastArraySize+0xfe>
    for (int i = 0; i < size; i++) {
   149c6:	|     \-> clr.l 28(sp)
   149ca:	|     /-- bra.s 149e6 <makeFastArraySize+0xd6>
        to->varData.fastArray->fastVariables[i].varType = SVT_NULL;
   149cc:	|  /--|-> movea.l 36(sp),a0
   149d0:	|  |  |   movea.l 4(a0),a0
   149d4:	|  |  |   move.l (a0),d1
   149d6:	|  |  |   move.l 28(sp),d0
   149da:	|  |  |   lsl.l #3,d0
   149dc:	|  |  |   movea.l d1,a0
   149de:	|  |  |   adda.l d0,a0
   149e0:	|  |  |   clr.l (a0)
    for (int i = 0; i < size; i++) {
   149e2:	|  |  |   addq.l #1,28(sp)
   149e6:	|  |  \-> move.l 28(sp),d0
   149ea:	|  |      cmp.l 40(sp),d0
   149ee:	|  \----- blt.s 149cc <makeFastArraySize+0xbc>
    }
    to->varData.fastArray->size = size;
   149f0:	|         movea.l 36(sp),a0
   149f4:	|         movea.l 4(a0),a0
   149f8:	|         move.l 40(sp),4(a0)
    to->varData.fastArray->timesUsed = 1;
   149fe:	|         movea.l 36(sp),a0
   14a02:	|         movea.l 4(a0),a0
   14a06:	|         moveq #1,d0
   14a08:	|         move.l d0,8(a0)
    return TRUE;
   14a0c:	|         moveq #1,d0
}
   14a0e:	\-------> movea.l (sp)+,a6
   14a10:	          lea 28(sp),sp
   14a14:	          rts

00014a16 <makeTextVar>:

void makeTextVar (struct variable *thisVar, const char * txt) {
	unlinkVar (thisVar);
   14a16:	move.l 4(sp),-(sp)
   14a1a:	jsr 14a42 <unlinkVar>
   14a20:	addq.l #4,sp
	thisVar->varType = SVT_STRING;
   14a22:	movea.l 4(sp),a0
   14a26:	moveq #3,d0
   14a28:	move.l d0,(a0)
	thisVar->varData.theString = copyString (txt);
   14a2a:	move.l 8(sp),-(sp)
   14a2e:	jsr b8 <copyString>
   14a34:	addq.l #4,sp
   14a36:	movea.l 4(sp),a0
   14a3a:	move.l d0,4(a0)
}
   14a3e:	nop
   14a40:	rts

00014a42 <unlinkVar>:

void unlinkVar (struct variable *thisVar) {
   14a42:	                      lea -16(sp),sp
   14a46:	                      move.l a6,-(sp)

	switch (thisVar->varType) {
   14a48:	                      movea.l 24(sp),a0
   14a4c:	                      move.l (a0),d0
   14a4e:	                      moveq #10,d1
   14a50:	                      cmp.l d0,d1
   14a52:	            /-------- beq.w 14b0a <unlinkVar+0xc8>
   14a56:	            |         moveq #10,d1
   14a58:	            |         cmp.l d0,d1
   14a5a:	/-----------|-------- bcs.w 14b7e <unlinkVar+0x13c>
   14a5e:	|           |         moveq #8,d1
   14a60:	|           |         cmp.l d0,d1
   14a62:	|  /--------|-------- beq.w 14b6a <unlinkVar+0x128>
   14a66:	|  |        |         moveq #8,d1
   14a68:	|  |        |         cmp.l d0,d1
   14a6a:	+--|--------|-------- bcs.w 14b7e <unlinkVar+0x13c>
   14a6e:	|  |        |         moveq #3,d1
   14a70:	|  |        |         cmp.l d0,d1
   14a72:	|  |        |     /-- beq.s 14a7e <unlinkVar+0x3c>
   14a74:	|  |        |     |   moveq #6,d1
   14a76:	|  |        |     |   cmp.l d0,d1
   14a78:	|  |        |  /--|-- beq.s 14aa4 <unlinkVar+0x62>
		case SVT_ANIM:
		deleteAnim (thisVar->varData.animHandler);
		break;

		default:
		break;
   14a7a:	+--|--------|--|--|-- bra.w 14b7e <unlinkVar+0x13c>
        FreeVec(thisVar->varData.theString);
   14a7e:	|  |        |  |  \-> movea.l 24(sp),a0
   14a82:	|  |        |  |      move.l 4(a0),4(sp)
   14a88:	|  |        |  |      move.l 1c9ca <SysBase>,d0
   14a8e:	|  |        |  |      movea.l d0,a6
   14a90:	|  |        |  |      movea.l 4(sp),a1
   14a94:	|  |        |  |      jsr -690(a6)
		thisVar->varData.theString = NULL;
   14a98:	|  |        |  |      movea.l 24(sp),a0
   14a9c:	|  |        |  |      clr.l 4(a0)
		break;
   14aa0:	|  |  /-----|--|----- bra.w 14b88 <unlinkVar+0x146>
		thisVar->varData.theStack -> timesUsed --;
   14aa4:	|  |  |     |  \----> movea.l 24(sp),a0
   14aa8:	|  |  |     |         movea.l 4(a0),a0
   14aac:	|  |  |     |         move.l 8(a0),d0
   14ab0:	|  |  |     |         subq.l #1,d0
   14ab2:	|  |  |     |         move.l d0,8(a0)
		if (thisVar->varData.theStack -> timesUsed <= 0) {
   14ab6:	|  |  |     |         movea.l 24(sp),a0
   14aba:	|  |  |     |         movea.l 4(a0),a0
   14abe:	|  |  |     |         move.l 8(a0),d0
   14ac2:	|  |  |  /--|-------- bgt.w 14b82 <unlinkVar+0x140>
			while (thisVar->varData.theStack -> first) trimStack (&thisVar->varData.theStack -> first);
   14ac6:	|  |  |  |  |     /-- bra.s 14ada <unlinkVar+0x98>
   14ac8:	|  |  |  |  |  /--|-> movea.l 24(sp),a0
   14acc:	|  |  |  |  |  |  |   move.l 4(a0),d0
   14ad0:	|  |  |  |  |  |  |   move.l d0,-(sp)
   14ad2:	|  |  |  |  |  |  |   jsr 15178 <trimStack>
   14ad8:	|  |  |  |  |  |  |   addq.l #4,sp
   14ada:	|  |  |  |  |  |  \-> movea.l 24(sp),a0
   14ade:	|  |  |  |  |  |      movea.l 4(a0),a0
   14ae2:	|  |  |  |  |  |      move.l (a0),d0
   14ae4:	|  |  |  |  |  \----- bne.s 14ac8 <unlinkVar+0x86>
			FreeVec(thisVar->varData.theStack);
   14ae6:	|  |  |  |  |         movea.l 24(sp),a0
   14aea:	|  |  |  |  |         move.l 4(a0),8(sp)
   14af0:	|  |  |  |  |         move.l 1c9ca <SysBase>,d0
   14af6:	|  |  |  |  |         movea.l d0,a6
   14af8:	|  |  |  |  |         movea.l 8(sp),a1
   14afc:	|  |  |  |  |         jsr -690(a6)
			thisVar->varData.theStack = NULL;
   14b00:	|  |  |  |  |         movea.l 24(sp),a0
   14b04:	|  |  |  |  |         clr.l 4(a0)
		break;
   14b08:	|  |  |  +--|-------- bra.s 14b82 <unlinkVar+0x140>
		thisVar->varData.fastArray -> timesUsed --;
   14b0a:	|  |  |  |  \-------> movea.l 24(sp),a0
   14b0e:	|  |  |  |            movea.l 4(a0),a0
   14b12:	|  |  |  |            move.l 8(a0),d0
   14b16:	|  |  |  |            subq.l #1,d0
   14b18:	|  |  |  |            move.l d0,8(a0)
		if (thisVar->varData.theStack -> timesUsed <= 0) {
   14b1c:	|  |  |  |            movea.l 24(sp),a0
   14b20:	|  |  |  |            movea.l 4(a0),a0
   14b24:	|  |  |  |            move.l 8(a0),d0
   14b28:	|  |  |  |        /-- bgt.s 14b86 <unlinkVar+0x144>
            FreeVec( thisVar->varData.fastArray -> fastVariables);
   14b2a:	|  |  |  |        |   movea.l 24(sp),a0
   14b2e:	|  |  |  |        |   movea.l 4(a0),a0
   14b32:	|  |  |  |        |   move.l (a0),16(sp)
   14b36:	|  |  |  |        |   move.l 1c9ca <SysBase>,d0
   14b3c:	|  |  |  |        |   movea.l d0,a6
   14b3e:	|  |  |  |        |   movea.l 16(sp),a1
   14b42:	|  |  |  |        |   jsr -690(a6)
			FreeVec(thisVar->varData.fastArray);
   14b46:	|  |  |  |        |   movea.l 24(sp),a0
   14b4a:	|  |  |  |        |   move.l 4(a0),12(sp)
   14b50:	|  |  |  |        |   move.l 1c9ca <SysBase>,d0
   14b56:	|  |  |  |        |   movea.l d0,a6
   14b58:	|  |  |  |        |   movea.l 12(sp),a1
   14b5c:	|  |  |  |        |   jsr -690(a6)
			thisVar->varData.fastArray = NULL;
   14b60:	|  |  |  |        |   movea.l 24(sp),a0
   14b64:	|  |  |  |        |   clr.l 4(a0)
		break;
   14b68:	|  |  |  |        +-- bra.s 14b86 <unlinkVar+0x144>
		deleteAnim (thisVar->varData.animHandler);
   14b6a:	|  \--|--|--------|-> movea.l 24(sp),a0
   14b6e:	|     |  |        |   move.l 4(a0),d0
   14b72:	|     |  |        |   move.l d0,-(sp)
   14b74:	|     |  |        |   jsr 9926 <deleteAnim>
   14b7a:	|     |  |        |   addq.l #4,sp
		break;
   14b7c:	|     +--|--------|-- bra.s 14b88 <unlinkVar+0x146>
		break;
   14b7e:	\-----|--|--------|-> nop
   14b80:	      +--|--------|-- bra.s 14b88 <unlinkVar+0x146>
		break;
   14b82:	      |  \--------|-> nop
   14b84:	      +-----------|-- bra.s 14b88 <unlinkVar+0x146>
		break;
   14b86:	      |           \-> nop
	}
}
   14b88:	      \-------------> nop
   14b8a:	                      movea.l (sp)+,a6
   14b8c:	                      lea 16(sp),sp
   14b90:	                      rts

00014b92 <copyMain>:

BOOL copyMain (const struct variable *from, struct variable *to) {
	to->varType = from->varType;
   14b92:	       movea.l 4(sp),a0
   14b96:	       move.l (a0),d0
   14b98:	       movea.l 8(sp),a0
   14b9c:	       move.l d0,(a0)
	switch (to->varType) {
   14b9e:	       movea.l 8(sp),a0
   14ba2:	       move.l (a0),d0
   14ba4:	       moveq #10,d1
   14ba6:	       cmp.l d0,d1
   14ba8:	/----- bcs.w 14c9a <copyMain+0x108>
   14bac:	|      add.l d0,d0
   14bae:	|      movea.l d0,a0
   14bb0:	|      adda.l #84924,a0
   14bb6:	|      move.w (a0),d0
   14bb8:	|      jmp (14bbc <copyMain+0x2a>,pc,d0.w)
   14bbc:	|      .short 0x00da
   14bbe:	|      ori.b #22,(a6)
   14bc2:	|      ori.w #22,(a4)
   14bc6:	|      ori.b #-126,(a6)
   14bca:	|      ori.b #-68,(a6)
   14bce:	|      ori.l #2891887,4(a0)
		case SVT_INT:
		case SVT_FUNC:
		case SVT_BUILT:
		case SVT_FILE:
		case SVT_OBJTYPE:
		to->varData.intValue = from->varData.intValue;
   14bd6:	|      move.l 4(a0),d0
   14bda:	|      movea.l 8(sp),a0
   14bde:	|      move.l d0,4(a0)
		return TRUE;
   14be2:	|      moveq #1,d0
   14be4:	|  /-- bra.w 14cac <copyMain+0x11a>

		case SVT_FASTARRAY:
		to->varData.fastArray = from->varData.fastArray;
   14be8:	|  |   movea.l 4(sp),a0
   14bec:	|  |   move.l 4(a0),d0
   14bf0:	|  |   movea.l 8(sp),a0
   14bf4:	|  |   move.l d0,4(a0)
		to->varData.fastArray -> timesUsed ++;
   14bf8:	|  |   movea.l 8(sp),a0
   14bfc:	|  |   movea.l 4(a0),a0
   14c00:	|  |   move.l 8(a0),d0
   14c04:	|  |   addq.l #1,d0
   14c06:	|  |   move.l d0,8(a0)
		return TRUE;
   14c0a:	|  |   moveq #1,d0
   14c0c:	|  +-- bra.w 14cac <copyMain+0x11a>

		case SVT_STRING:
		to->varData.theString = copyString (from->varData.theString);
   14c10:	|  |   movea.l 4(sp),a0
   14c14:	|  |   move.l 4(a0),d0
   14c18:	|  |   move.l d0,-(sp)
   14c1a:	|  |   jsr b8 <copyString>
   14c20:	|  |   addq.l #4,sp
   14c22:	|  |   movea.l 8(sp),a0
   14c26:	|  |   move.l d0,4(a0)
		return to->varData.theString ? TRUE : FALSE;
   14c2a:	|  |   movea.l 8(sp),a0
   14c2e:	|  |   move.l 4(a0),d0
   14c32:	|  |   sne d0
   14c34:	|  |   neg.b d0
   14c36:	|  |   move.b d0,d0
   14c38:	|  |   andi.w #255,d0
   14c3c:	|  +-- bra.s 14cac <copyMain+0x11a>

		case SVT_STACK:
		to->varData.theStack = from->varData.theStack;
   14c3e:	|  |   movea.l 4(sp),a0
   14c42:	|  |   move.l 4(a0),d0
   14c46:	|  |   movea.l 8(sp),a0
   14c4a:	|  |   move.l d0,4(a0)
		to->varData.theStack -> timesUsed ++;
   14c4e:	|  |   movea.l 8(sp),a0
   14c52:	|  |   movea.l 4(a0),a0
   14c56:	|  |   move.l 8(a0),d0
   14c5a:	|  |   addq.l #1,d0
   14c5c:	|  |   move.l d0,8(a0)
		return TRUE;
   14c60:	|  |   moveq #1,d0
   14c62:	|  +-- bra.s 14cac <copyMain+0x11a>

		case SVT_COSTUME:
		to->varData.costumeHandler = from->varData.costumeHandler;
   14c64:	|  |   movea.l 4(sp),a0
   14c68:	|  |   move.l 4(a0),d0
   14c6c:	|  |   movea.l 8(sp),a0
   14c70:	|  |   move.l d0,4(a0)
		return TRUE;
   14c74:	|  |   moveq #1,d0
   14c76:	|  +-- bra.s 14cac <copyMain+0x11a>

		case SVT_ANIM:
		to->varData.animHandler = copyAnim (from->varData.animHandler);
   14c78:	|  |   movea.l 4(sp),a0
   14c7c:	|  |   move.l 4(a0),d0
   14c80:	|  |   move.l d0,-(sp)
   14c82:	|  |   jsr 955a <copyAnim>
   14c88:	|  |   addq.l #4,sp
   14c8a:	|  |   movea.l 8(sp),a0
   14c8e:	|  |   move.l d0,4(a0)
		return TRUE;
   14c92:	|  |   moveq #1,d0
   14c94:	|  +-- bra.s 14cac <copyMain+0x11a>

		case SVT_NULL:
		return TRUE;
   14c96:	|  |   moveq #1,d0
   14c98:	|  +-- bra.s 14cac <copyMain+0x11a>

		default:
		break;
   14c9a:	\--|-> nop
	}
	KPrintF("Unknown value type");
   14c9c:	   |   pea 19fd2 <graphics.c.1c13408a+0x3ea>
   14ca2:	   |   jsr 17254 <KPrintF>
   14ca8:	   |   addq.l #4,sp
	return FALSE;
   14caa:	   |   clr.w d0
}
   14cac:	   \-> rts

00014cae <copyVariable>:

BOOL copyVariable (const struct variable *from, struct variable *to) {
	unlinkVar (to);
   14cae:	move.l 8(sp),-(sp)
   14cb2:	jsr 14a42 <unlinkVar>
   14cb8:	addq.l #4,sp
	return copyMain(from, to);
   14cba:	move.l 8(sp),-(sp)
   14cbe:	move.l 8(sp),-(sp)
   14cc2:	jsr 14b92 <copyMain>
   14cc8:	addq.l #8,sp
}
   14cca:	rts

00014ccc <getAnimationFromVar>:

struct personaAnimation * getAnimationFromVar (struct variable *thisVar) {
	if (thisVar->varType == SVT_ANIM)
   14ccc:	       movea.l 4(sp),a0
   14cd0:	       move.l (a0),d0
   14cd2:	       moveq #8,d1
   14cd4:	       cmp.l d0,d1
   14cd6:	   /-- bne.s 14cec <getAnimationFromVar+0x20>
		return copyAnim (thisVar->varData.animHandler);
   14cd8:	   |   movea.l 4(sp),a0
   14cdc:	   |   move.l 4(a0),d0
   14ce0:	   |   move.l d0,-(sp)
   14ce2:	   |   jsr 955a <copyAnim>
   14ce8:	   |   addq.l #4,sp
   14cea:	/--|-- bra.s 14d32 <getAnimationFromVar+0x66>

	if (thisVar->varType == SVT_INT && thisVar->varData.intValue == 0)
   14cec:	|  \-> movea.l 4(sp),a0
   14cf0:	|      move.l (a0),d0
   14cf2:	|      moveq #1,d1
   14cf4:	|      cmp.l d0,d1
   14cf6:	|  /-- bne.s 14d0a <getAnimationFromVar+0x3e>
   14cf8:	|  |   movea.l 4(sp),a0
   14cfc:	|  |   move.l 4(a0),d0
   14d00:	|  +-- bne.s 14d0a <getAnimationFromVar+0x3e>
		return makeNullAnim();
   14d02:	|  |   jsr ad2a <makeNullAnim>
   14d08:	+--|-- bra.s 14d32 <getAnimationFromVar+0x66>

	KPrintF("Expecting an animation variable; found variable of type", typeName[thisVar->varType]);
   14d0a:	|  \-> movea.l 4(sp),a0
   14d0e:	|      move.l (a0),d0
   14d10:	|      add.l d0,d0
   14d12:	|      movea.l d0,a1
   14d14:	|      adda.l d0,a1
   14d16:	|      lea 1c8a6 <typeName>,a0
   14d1c:	|      move.l (0,a1,a0.l),d0
   14d20:	|      move.l d0,-(sp)
   14d22:	|      pea 19ebe <graphics.c.1c13408a+0x2d6>
   14d28:	|      jsr 17254 <KPrintF>
   14d2e:	|      addq.l #8,sp
	return NULL;
   14d30:	|      moveq #0,d0
}
   14d32:	\----> rts

00014d34 <getBoolean>:

BOOL getBoolean (const struct variable *from) {
	switch (from->varType) {
   14d34:	       movea.l 4(sp),a0
   14d38:	       move.l (a0),d0
   14d3a:	       moveq #10,d1
   14d3c:	       cmp.l d0,d1
   14d3e:	/----- bcs.w 14dc4 <getBoolean+0x90>
   14d42:	|      add.l d0,d0
   14d44:	|      movea.l d0,a0
   14d46:	|      adda.l #85330,a0
   14d4c:	|      move.w (a0),d0
   14d4e:	|      jmp (14d52 <getBoolean+0x1e>,pc,d0.w)
   14d52:	|      ori.b #26,(a6)
   14d56:	|      ori.w #68,(114,a2,d0.w)
   14d5c:	|      ori.w #46,(114,a2,d0.w)
   14d62:	|      ori.w #114,(90,a2,d0.w)
		case SVT_NULL:
		return FALSE;
   14d68:	|      clr.w d0
   14d6a:	|  /-- bra.s 14dc8 <getBoolean+0x94>

		case SVT_INT:
		return (BOOL) (from->varData.intValue != 0);
   14d6c:	|  |   movea.l 4(sp),a0
   14d70:	|  |   move.l 4(a0),d0
   14d74:	|  |   sne d0
   14d76:	|  |   neg.b d0
   14d78:	|  |   move.b d0,d0
   14d7a:	|  |   andi.w #255,d0
   14d7e:	|  +-- bra.s 14dc8 <getBoolean+0x94>

		case SVT_STACK:
		return (BOOL) (from->varData.theStack -> first != NULL);
   14d80:	|  |   movea.l 4(sp),a0
   14d84:	|  |   movea.l 4(a0),a0
   14d88:	|  |   move.l (a0),d0
   14d8a:	|  |   sne d0
   14d8c:	|  |   neg.b d0
   14d8e:	|  |   move.b d0,d0
   14d90:	|  |   andi.w #255,d0
   14d94:	|  +-- bra.s 14dc8 <getBoolean+0x94>

		case SVT_STRING:
		return (BOOL) (from->varData.theString[0] != 0);
   14d96:	|  |   movea.l 4(sp),a0
   14d9a:	|  |   movea.l 4(a0),a0
   14d9e:	|  |   move.b (a0),d0
   14da0:	|  |   sne d0
   14da2:	|  |   neg.b d0
   14da4:	|  |   move.b d0,d0
   14da6:	|  |   andi.w #255,d0
   14daa:	|  +-- bra.s 14dc8 <getBoolean+0x94>

		case SVT_FASTARRAY:
		return (BOOL) (from->varData.fastArray -> size != 0);
   14dac:	|  |   movea.l 4(sp),a0
   14db0:	|  |   movea.l 4(a0),a0
   14db4:	|  |   move.l 4(a0),d0
   14db8:	|  |   sne d0
   14dba:	|  |   neg.b d0
   14dbc:	|  |   move.b d0,d0
   14dbe:	|  |   andi.w #255,d0
   14dc2:	|  +-- bra.s 14dc8 <getBoolean+0x94>

		default:
		break;
   14dc4:	\--|-> nop
	}
	return TRUE;
   14dc6:	   |   moveq #1,d0
}
   14dc8:	   \-> rts

00014dca <getTextFromAnyVar>:

char * getTextFromAnyVar (const struct variable *from) {
   14dca:	      /----------> lea -76(sp),sp
   14dce:	      |            move.l a6,-(sp)
	switch (from->varType) {
   14dd0:	      |            movea.l 84(sp),a0
   14dd4:	      |            move.l (a0),d0
   14dd6:	      |            moveq #10,d1
   14dd8:	      |            cmp.l d0,d1
   14dda:	/-----|----------- bcs.w 15078 <getTextFromAnyVar+0x2ae>
   14dde:	|     |            add.l d0,d0
   14de0:	|     |            movea.l d0,a0
   14de2:	|     |            adda.l #85486,a0
   14de8:	|     |            move.w (a0),d0
   14dea:	|     |            jmp (14dee <getTextFromAnyVar+0x24>,pc,d0.w)
   14dee:	|     |            .short 0x028a
   14df0:	|     |            bset d0,(a0)+
   14df2:	|     |            .short 0x028a
   14df4:	|     |            ori.b #-118,(a6)
   14df8:	|     |            andi.b #8,ccr
   14dfc:	|     |            andi.w #650,-(a0)
   14e00:	|     |            .short 0x028a
   14e02:	|     |            ori.b #111,84(a4)
		case SVT_STRING:
		return copyString (from->varData.theString);
   14e08:	|     |            move.l 4(a0),d0
   14e0c:	|     |            move.l d0,-(sp)
   14e0e:	|     |            jsr b8 <copyString>
   14e14:	|     |            addq.l #4,sp
   14e16:	|  /--|----------- bra.w 1509a <getTextFromAnyVar+0x2d0>

		case SVT_FASTARRAY:
		{
			char * builder = copyString ("FAST:");
   14e1a:	|  |  |            pea 19fe5 <graphics.c.1c13408a+0x3fd>
   14e20:	|  |  |            jsr b8 <copyString>
   14e26:	|  |  |            addq.l #4,sp
   14e28:	|  |  |            move.l d0,76(sp)
			char * builder2;
			char * grabText;

			for (int i = 0; i < from->varData.fastArray -> size; i ++) {
   14e2c:	|  |  |            clr.l 72(sp)
   14e30:	|  |  |     /----- bra.w 14eda <getTextFromAnyVar+0x110>
				builder2 = joinStrings (builder, " ");
   14e34:	|  |  |  /--|----> pea 19feb <newfatal.c.307beca7+0x3>
   14e3a:	|  |  |  |  |      move.l 80(sp),-(sp)
   14e3e:	|  |  |  |  |      jsr 13d20 <joinStrings>
   14e44:	|  |  |  |  |      addq.l #8,sp
   14e46:	|  |  |  |  |      move.l d0,60(sp)
				if (! builder2) return NULL;
   14e4a:	|  |  |  |  |  /-- bne.s 14e52 <getTextFromAnyVar+0x88>
   14e4c:	|  |  |  |  |  |   moveq #0,d0
   14e4e:	|  +--|--|--|--|-- bra.w 1509a <getTextFromAnyVar+0x2d0>
				FreeVec(builder);
   14e52:	|  |  |  |  |  \-> move.l 76(sp),56(sp)
   14e58:	|  |  |  |  |      move.l 1c9ca <SysBase>,d0
   14e5e:	|  |  |  |  |      movea.l d0,a6
   14e60:	|  |  |  |  |      movea.l 56(sp),a1
   14e64:	|  |  |  |  |      jsr -690(a6)
				grabText = getTextFromAnyVar (&from->varData.fastArray -> fastVariables[i]);
   14e68:	|  |  |  |  |      movea.l 84(sp),a0
   14e6c:	|  |  |  |  |      movea.l 4(a0),a0
   14e70:	|  |  |  |  |      move.l (a0),d1
   14e72:	|  |  |  |  |      move.l 72(sp),d0
   14e76:	|  |  |  |  |      lsl.l #3,d0
   14e78:	|  |  |  |  |      add.l d1,d0
   14e7a:	|  |  |  |  |      move.l d0,-(sp)
   14e7c:	|  |  +--|--|----- jsr 14dca <getTextFromAnyVar>(pc)
   14e80:	|  |  |  |  |      addq.l #4,sp
   14e82:	|  |  |  |  |      move.l d0,52(sp)
				builder = joinStrings (builder2, grabText);
   14e86:	|  |  |  |  |      move.l 52(sp),-(sp)
   14e8a:	|  |  |  |  |      move.l 64(sp),-(sp)
   14e8e:	|  |  |  |  |      jsr 13d20 <joinStrings>
   14e94:	|  |  |  |  |      addq.l #8,sp
   14e96:	|  |  |  |  |      move.l d0,76(sp)
				if (! builder) return NULL;
   14e9a:	|  |  |  |  |  /-- bne.s 14ea2 <getTextFromAnyVar+0xd8>
   14e9c:	|  |  |  |  |  |   moveq #0,d0
   14e9e:	|  +--|--|--|--|-- bra.w 1509a <getTextFromAnyVar+0x2d0>
				FreeVec(grabText);
   14ea2:	|  |  |  |  |  \-> move.l 52(sp),48(sp)
   14ea8:	|  |  |  |  |      move.l 1c9ca <SysBase>,d0
   14eae:	|  |  |  |  |      movea.l d0,a6
   14eb0:	|  |  |  |  |      movea.l 48(sp),a1
   14eb4:	|  |  |  |  |      jsr -690(a6)
				grabText = NULL;
   14eb8:	|  |  |  |  |      clr.l 52(sp)
				FreeVec(builder2);
   14ebc:	|  |  |  |  |      move.l 60(sp),44(sp)
   14ec2:	|  |  |  |  |      move.l 1c9ca <SysBase>,d0
   14ec8:	|  |  |  |  |      movea.l d0,a6
   14eca:	|  |  |  |  |      movea.l 44(sp),a1
   14ece:	|  |  |  |  |      jsr -690(a6)
				builder2 = NULL;
   14ed2:	|  |  |  |  |      clr.l 60(sp)
			for (int i = 0; i < from->varData.fastArray -> size; i ++) {
   14ed6:	|  |  |  |  |      addq.l #1,72(sp)
   14eda:	|  |  |  |  \----> movea.l 84(sp),a0
   14ede:	|  |  |  |         movea.l 4(a0),a0
   14ee2:	|  |  |  |         move.l 4(a0),d0
   14ee6:	|  |  |  |         cmp.l 72(sp),d0
   14eea:	|  |  |  \-------- bgt.w 14e34 <getTextFromAnyVar+0x6a>
			}
			return builder;
   14eee:	|  |  |            move.l 76(sp),d0
   14ef2:	|  +--|----------- bra.w 1509a <getTextFromAnyVar+0x2d0>
		}

		case SVT_STACK:
		{
			char * builder = copyString ("ARRAY:");
   14ef6:	|  |  |            pea 19fed <newfatal.c.307beca7+0x5>
   14efc:	|  |  |            jsr b8 <copyString>
   14f02:	|  |  |            addq.l #4,sp
   14f04:	|  |  |            move.l d0,68(sp)
			char * builder2;
			char * grabText;

			struct variableStack * stacky = from->varData.theStack -> first;
   14f08:	|  |  |            movea.l 84(sp),a0
   14f0c:	|  |  |            movea.l 4(a0),a0
   14f10:	|  |  |            move.l (a0),64(sp)

			while (stacky) {
   14f14:	|  |  |     /----- bra.w 14fb6 <getTextFromAnyVar+0x1ec>
				builder2 = joinStrings (builder, " ");
   14f18:	|  |  |  /--|----> pea 19feb <newfatal.c.307beca7+0x3>
   14f1e:	|  |  |  |  |      move.l 72(sp),-(sp)
   14f22:	|  |  |  |  |      jsr 13d20 <joinStrings>
   14f28:	|  |  |  |  |      addq.l #8,sp
   14f2a:	|  |  |  |  |      move.l d0,36(sp)
				if (! builder2) return NULL;
   14f2e:	|  |  |  |  |  /-- bne.s 14f36 <getTextFromAnyVar+0x16c>
   14f30:	|  |  |  |  |  |   moveq #0,d0
   14f32:	|  +--|--|--|--|-- bra.w 1509a <getTextFromAnyVar+0x2d0>
				FreeVec(builder);
   14f36:	|  |  |  |  |  \-> move.l 68(sp),32(sp)
   14f3c:	|  |  |  |  |      move.l 1c9ca <SysBase>,d0
   14f42:	|  |  |  |  |      movea.l d0,a6
   14f44:	|  |  |  |  |      movea.l 32(sp),a1
   14f48:	|  |  |  |  |      jsr -690(a6)
				grabText = getTextFromAnyVar (&stacky -> thisVar);
   14f4c:	|  |  |  |  |      move.l 64(sp),d0
   14f50:	|  |  |  |  |      move.l d0,-(sp)
   14f52:	|  |  \--|--|----- jsr 14dca <getTextFromAnyVar>(pc)
   14f56:	|  |     |  |      addq.l #4,sp
   14f58:	|  |     |  |      move.l d0,28(sp)
				builder = joinStrings (builder2, grabText);
   14f5c:	|  |     |  |      move.l 28(sp),-(sp)
   14f60:	|  |     |  |      move.l 40(sp),-(sp)
   14f64:	|  |     |  |      jsr 13d20 <joinStrings>
   14f6a:	|  |     |  |      addq.l #8,sp
   14f6c:	|  |     |  |      move.l d0,68(sp)
				if (! builder) return NULL;
   14f70:	|  |     |  |  /-- bne.s 14f78 <getTextFromAnyVar+0x1ae>
   14f72:	|  |     |  |  |   moveq #0,d0
   14f74:	|  +-----|--|--|-- bra.w 1509a <getTextFromAnyVar+0x2d0>
				FreeVec(grabText);
   14f78:	|  |     |  |  \-> move.l 28(sp),24(sp)
   14f7e:	|  |     |  |      move.l 1c9ca <SysBase>,d0
   14f84:	|  |     |  |      movea.l d0,a6
   14f86:	|  |     |  |      movea.l 24(sp),a1
   14f8a:	|  |     |  |      jsr -690(a6)
				grabText = NULL;
   14f8e:	|  |     |  |      clr.l 28(sp)
				FreeVec(builder2);
   14f92:	|  |     |  |      move.l 36(sp),20(sp)
   14f98:	|  |     |  |      move.l 1c9ca <SysBase>,d0
   14f9e:	|  |     |  |      movea.l d0,a6
   14fa0:	|  |     |  |      movea.l 20(sp),a1
   14fa4:	|  |     |  |      jsr -690(a6)
				builder2 = NULL;
   14fa8:	|  |     |  |      clr.l 36(sp)
				stacky = stacky -> next;
   14fac:	|  |     |  |      movea.l 64(sp),a0
   14fb0:	|  |     |  |      move.l 8(a0),64(sp)
			while (stacky) {
   14fb6:	|  |     |  \----> tst.l 64(sp)
   14fba:	|  |     \-------- bne.w 14f18 <getTextFromAnyVar+0x14e>
			}
			return builder;
   14fbe:	|  |               move.l 68(sp),d0
   14fc2:	|  +-------------- bra.w 1509a <getTextFromAnyVar+0x2d0>
		}

		case SVT_INT:
		{
			char * buff = AllocVec(10, MEMF_ANY);
   14fc6:	|  |               moveq #10,d0
   14fc8:	|  |               move.l d0,16(sp)
   14fcc:	|  |               clr.l 12(sp)
   14fd0:	|  |               move.l 1c9ca <SysBase>,d0
   14fd6:	|  |               movea.l d0,a6
   14fd8:	|  |               move.l 16(sp),d0
   14fdc:	|  |               move.l 12(sp),d1
   14fe0:	|  |               jsr -684(a6)
   14fe4:	|  |               move.l d0,8(sp)
   14fe8:	|  |               move.l 8(sp),d0
   14fec:	|  |               move.l d0,4(sp)
			if (! buff) {
   14ff0:	|  |           /-- bne.s 15006 <getTextFromAnyVar+0x23c>
				KPrintF("getTextFromAnyVar: Cannot allocate Memory");
   14ff2:	|  |           |   pea 19ff4 <newfatal.c.307beca7+0xc>
   14ff8:	|  |           |   jsr 17254 <KPrintF>
   14ffe:	|  |           |   addq.l #4,sp
				return NULL;
   15000:	|  |           |   moveq #0,d0
   15002:	|  +-----------|-- bra.w 1509a <getTextFromAnyVar+0x2d0>
			}
			sprintf (buff, "%i", from->varData.intValue);
   15006:	|  |           \-> movea.l 84(sp),a0
   1500a:	|  |               move.l 4(a0),d0
   1500e:	|  |               move.l d0,-(sp)
   15010:	|  |               pea 1a01e <newfatal.c.307beca7+0x36>
   15016:	|  |               move.l 12(sp),-(sp)
   1501a:	|  |               jsr 13ffe <sprintf>
   15020:	|  |               lea 12(sp),sp
			return buff;
   15024:	|  |               move.l 4(sp),d0
   15028:	|  +-------------- bra.s 1509a <getTextFromAnyVar+0x2d0>
		}

		case SVT_FILE:
		{

			return joinStrings ("", resourceNameFromNum (from->varData.intValue));
   1502a:	|  |               movea.l 84(sp),a0
   1502e:	|  |               move.l 4(a0),d0
   15032:	|  |               move.l d0,-(sp)
   15034:	|  |               jsr 4120 <resourceNameFromNum>
   1503a:	|  |               addq.l #4,sp
   1503c:	|  |               move.l d0,-(sp)
   1503e:	|  |               pea 189f3 <PutChar+0xcd5>
   15044:	|  |               jsr 13d20 <joinStrings>
   1504a:	|  |               addq.l #8,sp
   1504c:	|  +-------------- bra.s 1509a <getTextFromAnyVar+0x2d0>
		}

		case SVT_OBJTYPE:
		{
			struct objectType * thisType = findObjectType (from->varData.intValue);
   1504e:	|  |               movea.l 84(sp),a0
   15052:	|  |               move.l 4(a0),d0
   15056:	|  |               move.l d0,-(sp)
   15058:	|  |               jsr d53e <findObjectType>
   1505e:	|  |               addq.l #4,sp
   15060:	|  |               move.l d0,40(sp)
			if (thisType) return copyString (thisType -> screenName);
   15064:	+--|-------------- beq.s 15078 <getTextFromAnyVar+0x2ae>
   15066:	|  |               movea.l 40(sp),a0
   1506a:	|  |               move.l (a0),d0
   1506c:	|  |               move.l d0,-(sp)
   1506e:	|  |               jsr b8 <copyString>
   15074:	|  |               addq.l #4,sp
   15076:	|  +-------------- bra.s 1509a <getTextFromAnyVar+0x2d0>
		}

		default:
		break;
   15078:	\--|-------------> nop
	}

	return copyString (typeName[from->varType]);
   1507a:	   |               movea.l 84(sp),a0
   1507e:	   |               move.l (a0),d0
   15080:	   |               add.l d0,d0
   15082:	   |               movea.l d0,a1
   15084:	   |               adda.l d0,a1
   15086:	   |               lea 1c8a6 <typeName>,a0
   1508c:	   |               move.l (0,a1,a0.l),d0
   15090:	   |               move.l d0,-(sp)
   15092:	   |               jsr b8 <copyString>
   15098:	   |               addq.l #4,sp
}
   1509a:	   \-------------> movea.l (sp)+,a6
   1509c:	                   lea 76(sp),sp
   150a0:	                   rts

000150a2 <newAnimationVariable>:


void newAnimationVariable (struct variable *thisVar, struct personaAnimation * i) {
	unlinkVar (thisVar);
   150a2:	move.l 4(sp),-(sp)
   150a6:	jsr 14a42 <unlinkVar>
   150ac:	addq.l #4,sp
	thisVar->varType = SVT_ANIM;
   150ae:	movea.l 4(sp),a0
   150b2:	moveq #8,d0
   150b4:	move.l d0,(a0)
	thisVar->varData.animHandler = i;
   150b6:	movea.l 4(sp),a0
   150ba:	move.l 8(sp),4(a0)
}
   150c0:	nop
   150c2:	rts

000150c4 <newCostumeVariable>:

void newCostumeVariable (struct variable * thisVar, struct persona * i) {
	unlinkVar(thisVar);
   150c4:	move.l 4(sp),-(sp)
   150c8:	jsr 14a42 <unlinkVar>
   150ce:	addq.l #4,sp
	thisVar->varType = SVT_COSTUME;
   150d0:	movea.l 4(sp),a0
   150d4:	moveq #9,d0
   150d6:	move.l d0,(a0)
	thisVar->varData.costumeHandler = i;
   150d8:	movea.l 4(sp),a0
   150dc:	move.l 8(sp),4(a0)
}
   150e2:	nop
   150e4:	rts

000150e6 <setVariable>:

void setVariable (struct variable *thisVar, enum variableType vT, int value) {
	unlinkVar (thisVar);
   150e6:	move.l 4(sp),-(sp)
   150ea:	jsr 14a42 <unlinkVar>
   150f0:	addq.l #4,sp
	thisVar->varType = vT;
   150f2:	movea.l 4(sp),a0
   150f6:	move.l 8(sp),(a0)
	thisVar->varData.intValue = value;
   150fa:	movea.l 4(sp),a0
   150fe:	move.l 12(sp),4(a0)
}
   15104:	nop
   15106:	rts

00015108 <stackGetByIndex>:

struct variable * stackGetByIndex (struct variableStack * vS, unsigned int theIndex) {
    while (theIndex--) {
   15108:	      /-- bra.s 1511a <stackGetByIndex+0x12>
        vS = vS->next;
   1510a:	/-----|-> movea.l 4(sp),a0
   1510e:	|     |   move.l 8(a0),4(sp)
        if (!vS) {
   15114:	|     +-- bne.s 1511a <stackGetByIndex+0x12>
            return NULL;
   15116:	|     |   moveq #0,d0
   15118:	|  /--|-- bra.s 1512e <stackGetByIndex+0x26>
    while (theIndex--) {
   1511a:	|  |  \-> move.l 8(sp),d0
   1511e:	|  |      move.l d0,d1
   15120:	|  |      subq.l #1,d1
   15122:	|  |      move.l d1,8(sp)
   15126:	|  |      tst.l d0
   15128:	\--|----- bne.s 1510a <stackGetByIndex+0x2>
        }
    }
    return &(vS->thisVar);
   1512a:	   |      move.l 4(sp),d0
}
   1512e:	   \----> rts

00015130 <stackFindLast>:

// Would be a LOT better just to keep this up to date in deletevarfromstack function... ah well
struct variableStack * stackFindLast (struct variableStack * hunt) {
	if (hunt == NULL)
   15130:	          tst.l 4(sp)
   15134:	      /-- bne.s 15144 <stackFindLast+0x14>
		return NULL;
   15136:	      |   moveq #0,d0
   15138:	/-----|-- bra.s 15152 <stackFindLast+0x22>

	while (hunt->next)
		hunt = hunt->next;
   1513a:	|  /--|-> movea.l 4(sp),a0
   1513e:	|  |  |   move.l 8(a0),4(sp)
	while (hunt->next)
   15144:	|  |  \-> movea.l 4(sp),a0
   15148:	|  |      move.l 8(a0),d0
   1514c:	|  \----- bne.s 1513a <stackFindLast+0xa>

	return hunt;
   1514e:	|         move.l 4(sp),d0
}
   15152:	\-------> rts

00015154 <stackSize>:

int stackSize (const struct stackHandler * me) {
   15154:	       subq.l #8,sp
	int r = 0;
   15156:	       clr.l 4(sp)
	struct variableStack * a = me -> first;
   1515a:	       movea.l 12(sp),a0
   1515e:	       move.l (a0),(sp)
	while (a) {
   15160:	   /-- bra.s 1516c <stackSize+0x18>
		r ++;
   15162:	/--|-> addq.l #1,4(sp)
		a = a -> next;
   15166:	|  |   movea.l (sp),a0
   15168:	|  |   move.l 8(a0),(sp)
	while (a) {
   1516c:	|  \-> tst.l (sp)
   1516e:	\----- bne.s 15162 <stackSize+0xe>
	}
	return r;
   15170:	       move.l 4(sp),d0
}
   15174:	       addq.l #8,sp
   15176:	       rts

00015178 <trimStack>:

void trimStack (struct variableStack ** stack) {
   15178:	subq.l #8,sp
   1517a:	move.l a6,-(sp)

	struct variableStack* killMe = *stack;
   1517c:	movea.l 16(sp),a0
   15180:	move.l (a0),8(sp)

	*stack = (*stack)->next;
   15184:	movea.l 16(sp),a0
   15188:	movea.l (a0),a0
   1518a:	move.l 8(a0),d0
   1518e:	movea.l 16(sp),a0
   15192:	move.l d0,(a0)

	// When calling this, we've ALWAYS checked that stack != NULL
	unlinkVar (&(killMe -> thisVar));
   15194:	move.l 8(sp),d0
   15198:	move.l d0,-(sp)
   1519a:	jsr 14a42 <unlinkVar>
   151a0:	addq.l #4,sp
	FreeVec(killMe);
   151a2:	move.l 8(sp),4(sp)
   151a8:	move.l 1c9ca <SysBase>,d0
   151ae:	movea.l d0,a6
   151b0:	movea.l 4(sp),a1
   151b4:	jsr -690(a6)
   151b8:	nop
   151ba:	movea.l (sp)+,a6
   151bc:	addq.l #8,sp
   151be:	rts

000151c0 <freeze>:
extern BOOL backdropExists;

struct frozenStuffStruct * frozenStuff = NULL;


BOOL freeze () {
   151c0:	       lea -52(sp),sp
   151c4:	       move.l a6,-(sp)
	KPrintF("calling freeze()\n");
   151c6:	       pea 1a021 <newfatal.c.307beca7+0x39>
   151cc:	       jsr 17254 <KPrintF>
   151d2:	       addq.l #4,sp

	struct frozenStuffStruct * newFreezer = (struct frozenStuffStruct *) AllocVec(sizeof(struct frozenStuffStruct), MEMF_ANY);
   151d4:	       moveq #68,d0
   151d6:	       move.l d0,52(sp)
   151da:	       clr.l 48(sp)
   151de:	       move.l 1c9ca <SysBase>,d0
   151e4:	       movea.l d0,a6
   151e6:	       move.l 52(sp),d0
   151ea:	       move.l 48(sp),d1
   151ee:	       jsr -684(a6)
   151f2:	       move.l d0,44(sp)
   151f6:	       move.l 44(sp),d0
   151fa:	       move.l d0,40(sp)
	if (!newFreezer) return FALSE;
   151fe:	   /-- bne.s 15206 <freeze+0x46>
   15200:	   |   clr.w d0
   15202:	/--|-- bra.w 15390 <freeze+0x1d0>

	CstFreeze();
   15206:	|  \-> jsr 1d3c <CstFreeze>

	// Grab a copy of the current scene
	//ToDo: Amiga Graphics handling here	

	int picWidth = sceneWidth;
   1520c:	|      move.l 1ca66 <sceneWidth>,d0
   15212:	|      move.l d0,36(sp)
	int picHeight = sceneHeight;	
   15216:	|      move.l 1ca6a <sceneHeight>,d0
   1521c:	|      move.l d0,32(sp)



	newFreezer -> sceneWidth = sceneWidth;
   15220:	|      move.l 1ca66 <sceneWidth>,d0
   15226:	|      movea.l 40(sp),a0
   1522a:	|      move.l d0,48(a0)
	newFreezer -> sceneHeight = sceneHeight;
   1522e:	|      move.l 1ca6a <sceneHeight>,d0
   15234:	|      movea.l 40(sp),a0
   15238:	|      move.l d0,52(a0)
	newFreezer -> cameraX = cameraX;
   1523c:	|      move.l 1ca84 <cameraX>,d0
   15242:	|      movea.l 40(sp),a0
   15246:	|      move.l d0,40(a0)
	newFreezer -> cameraY = cameraY;
   1524a:	|      move.l 1ca88 <cameraY>,d0
   15250:	|      movea.l 40(sp),a0
   15254:	|      move.l d0,44(a0)
	newFreezer -> cameraZoom = cameraZoom;
   15258:	|      move.l 1c368 <cameraZoom>,d0
   1525e:	|      movea.l 40(sp),a0
   15262:	|      move.l d0,56(a0)
	// resizeBackdrop kills parallax stuff, light map, z-buffer...
	/*if (! resizeBackdrop (winWidth, winHeight)) {
		KPrintF("Can't create new temporary backdrop buffer");
	}*/

	backdropExists = TRUE;
   15266:	|      move.w #1,1ca72 <backdropExists>

	newFreezer -> allPeople = allPeople;
   1526e:	|      move.l 1ca2e <allPeople>,d0
   15274:	|      movea.l 40(sp),a0
   15278:	|      move.l d0,(a0)
	allPeople = NULL;
   1527a:	|      clr.l 1ca2e <allPeople>

	struct statusStuff * newStatusStuff = (struct statusStuff *) AllocVec(sizeof(struct statusStuff), MEMF_ANY);
   15280:	|      moveq #42,d0
   15282:	|      move.l d0,28(sp)
   15286:	|      clr.l 24(sp)
   1528a:	|      move.l 1c9ca <SysBase>,d0
   15290:	|      movea.l d0,a6
   15292:	|      move.l 28(sp),d0
   15296:	|      move.l 24(sp),d1
   1529a:	|      jsr -684(a6)
   1529e:	|      move.l d0,20(sp)
   152a2:	|      move.l 20(sp),d0
   152a6:	|      move.l d0,16(sp)
	if (!newStatusStuff) return FALSE;	
   152aa:	|  /-- bne.s 152b2 <freeze+0xf2>
   152ac:	|  |   clr.w d0
   152ae:	+--|-- bra.w 15390 <freeze+0x1d0>

	newFreezer -> allScreenRegions = allScreenRegions;
   152b2:	|  \-> move.l 1cada <allScreenRegions>,d0
   152b8:	|      movea.l 40(sp),a0
   152bc:	|      move.l d0,4(a0)
	allScreenRegions = NULL;
   152c0:	|      clr.l 1cada <allScreenRegions>
	overRegion = NULL;
   152c6:	|      clr.l 1cade <overRegion>

	newFreezer -> mouseCursorAnim = mouseCursorAnim;
   152cc:	|      move.l 1c8d0 <mouseCursorAnim>,d0
   152d2:	|      movea.l 40(sp),a0
   152d6:	|      move.l d0,32(a0)
	newFreezer -> mouseCursorFrameNum = mouseCursorFrameNum;
   152da:	|      move.l 1c8d4 <mouseCursorFrameNum>,d0
   152e0:	|      movea.l 40(sp),a0
   152e4:	|      move.l d0,36(a0)
	mouseCursorAnim = makeNullAnim ();
   152e8:	|      jsr ad2a <makeNullAnim>
   152ee:	|      move.l d0,1c8d0 <mouseCursorAnim>
	mouseCursorFrameNum = 0;
   152f4:	|      clr.l 1c8d4 <mouseCursorFrameNum>

	newFreezer -> zBuffer = zBuffer;
   152fa:	|      move.l 1ca2a <zBuffer>,d0
   15300:	|      movea.l 40(sp),a0
   15304:	|      move.l d0,60(a0)
	zBuffer = NULL;
   15308:	|      clr.l 1ca2a <zBuffer>

	newFreezer -> speech = speech;
   1530e:	|      move.l 1ca26 <speech>,d0
   15314:	|      movea.l 40(sp),a0
   15318:	|      move.l d0,20(a0)
	initSpeech ();
   1531c:	|      jsr 7ecc <initSpeech>

	newFreezer -> currentEvents = (struct eventhandlers *) AllocVec(sizeof(struct eventHandlers), MEMF_ANY);
   15322:	|      moveq #28,d0
   15324:	|      move.l d0,12(sp)
   15328:	|      clr.l 8(sp)
   1532c:	|      move.l 1c9ca <SysBase>,d0
   15332:	|      movea.l d0,a6
   15334:	|      move.l 12(sp),d0
   15338:	|      move.l 8(sp),d1
   1533c:	|      jsr -684(a6)
   15340:	|      move.l d0,4(sp)
   15344:	|      move.l 4(sp),d0
   15348:	|      movea.l 40(sp),a0
   1534c:	|      move.l d0,28(a0)
	if (!newFreezer -> currentEvents) return FALSE;
   15350:	|      movea.l 40(sp),a0
   15354:	|      move.l 28(a0),d0
   15358:	|  /-- bne.s 1535e <freeze+0x19e>
   1535a:	|  |   clr.w d0
   1535c:	+--|-- bra.s 15390 <freeze+0x1d0>
	memset (newFreezer -> currentEvents, 0, sizeof(struct eventHandlers));
   1535e:	|  \-> movea.l 40(sp),a0
   15362:	|      move.l 28(a0),d0
   15366:	|      pea 1c <_start+0x1c>
   1536a:	|      clr.l -(sp)
   1536c:	|      move.l d0,-(sp)
   1536e:	|      jsr 171d8 <memset>
   15374:	|      lea 12(sp),sp

	newFreezer -> next = frozenStuff;
   15378:	|      move.l 1cabe <frozenStuff>,d0
   1537e:	|      movea.l 40(sp),a0
   15382:	|      move.l d0,64(a0)
	frozenStuff = newFreezer;
   15386:	|      move.l 40(sp),1cabe <frozenStuff>

	return TRUE;
   1538e:	|      moveq #1,d0
}
   15390:	\----> movea.l (sp)+,a6
   15392:	       lea 52(sp),sp
   15396:	       rts

00015398 <howFrozen>:

int howFrozen () {
   15398:	       subq.l #8,sp
	int a = 0;
   1539a:	       clr.l 4(sp)
	struct frozenStuffStruct * f = frozenStuff;
   1539e:	       move.l 1cabe <frozenStuff>,(sp)
	while (f) {
   153a4:	   /-- bra.s 153b0 <howFrozen+0x18>
		a ++;
   153a6:	/--|-> addq.l #1,4(sp)
		f = f -> next;
   153aa:	|  |   movea.l (sp),a0
   153ac:	|  |   move.l 64(a0),(sp)
	while (f) {
   153b0:	|  \-> tst.l (sp)
   153b2:	\----- bne.s 153a6 <howFrozen+0xe>
	}
	return a;
   153b4:	       move.l 4(sp),d0
}
   153b8:	       addq.l #8,sp
   153ba:	       rts

000153bc <unfreeze>:

void unfreeze () {
   153bc:	       lea -16(sp),sp
   153c0:	       move.l a6,-(sp)
	struct frozenStuffStruct * killMe = frozenStuff;
   153c2:	       move.l 1cabe <frozenStuff>,16(sp)

	if (! frozenStuff) return;
   153ca:	       move.l 1cabe <frozenStuff>,d0
   153d0:	/----- beq.w 15608 <unfreeze+0x24c>

	CstUnfreeze();
   153d4:	|      jsr 3d18 <CstUnfreeze>

	sceneWidth = frozenStuff -> sceneWidth;
   153da:	|      movea.l 1cabe <frozenStuff>,a0
   153e0:	|      move.l 48(a0),d0
   153e4:	|      move.l d0,1ca66 <sceneWidth>
	sceneHeight = frozenStuff -> sceneHeight;
   153ea:	|      movea.l 1cabe <frozenStuff>,a0
   153f0:	|      move.l 52(a0),d0
   153f4:	|      move.l d0,1ca6a <sceneHeight>

	cameraX = frozenStuff -> cameraX;
   153fa:	|      movea.l 1cabe <frozenStuff>,a0
   15400:	|      move.l 40(a0),d0
   15404:	|      move.l d0,1ca84 <cameraX>
	cameraY = frozenStuff -> cameraY;
   1540a:	|      movea.l 1cabe <frozenStuff>,a0
   15410:	|      move.l 44(a0),d0
   15414:	|      move.l d0,1ca88 <cameraY>
	input.mouseX = (int)(input.mouseX * cameraZoom);
   1541a:	|      move.l 1c986 <input+0xa>,d0
   15420:	|      move.l d0,-(sp)
   15422:	|      jsr 17686 <__floatsisf>
   15428:	|      addq.l #4,sp
   1542a:	|      move.l d0,d1
   1542c:	|      move.l 1c368 <cameraZoom>,d0
   15432:	|      move.l d0,-(sp)
   15434:	|      move.l d1,-(sp)
   15436:	|      jsr 17738 <__mulsf3>
   1543c:	|      addq.l #8,sp
   1543e:	|      move.l d0,-(sp)
   15440:	|      jsr 1761e <__fixsfsi>
   15446:	|      addq.l #4,sp
   15448:	|      move.l d0,1c986 <input+0xa>
	input.mouseY = (int)(input.mouseY * cameraZoom);
   1544e:	|      move.l 1c98a <input+0xe>,d0
   15454:	|      move.l d0,-(sp)
   15456:	|      jsr 17686 <__floatsisf>
   1545c:	|      addq.l #4,sp
   1545e:	|      move.l d0,d1
   15460:	|      move.l 1c368 <cameraZoom>,d0
   15466:	|      move.l d0,-(sp)
   15468:	|      move.l d1,-(sp)
   1546a:	|      jsr 17738 <__mulsf3>
   15470:	|      addq.l #8,sp
   15472:	|      move.l d0,-(sp)
   15474:	|      jsr 1761e <__fixsfsi>
   1547a:	|      addq.l #4,sp
   1547c:	|      move.l d0,1c98a <input+0xe>
	cameraZoom = frozenStuff -> cameraZoom;
   15482:	|      movea.l 1cabe <frozenStuff>,a0
   15488:	|      move.l 56(a0),d0
   1548c:	|      move.l d0,1c368 <cameraZoom>
	input.mouseX = (int)(input.mouseX / cameraZoom);
   15492:	|      move.l 1c986 <input+0xa>,d0
   15498:	|      move.l d0,-(sp)
   1549a:	|      jsr 17686 <__floatsisf>
   154a0:	|      addq.l #4,sp
   154a2:	|      move.l d0,d1
   154a4:	|      move.l 1c368 <cameraZoom>,d0
   154aa:	|      move.l d0,-(sp)
   154ac:	|      move.l d1,-(sp)
   154ae:	|      jsr 1753c <__divsf3>
   154b4:	|      addq.l #8,sp
   154b6:	|      move.l d0,-(sp)
   154b8:	|      jsr 1761e <__fixsfsi>
   154be:	|      addq.l #4,sp
   154c0:	|      move.l d0,1c986 <input+0xa>
	input.mouseY = (int)(input.mouseY / cameraZoom);
   154c6:	|      move.l 1c98a <input+0xe>,d0
   154cc:	|      move.l d0,-(sp)
   154ce:	|      jsr 17686 <__floatsisf>
   154d4:	|      addq.l #4,sp
   154d6:	|      move.l d0,d1
   154d8:	|      move.l 1c368 <cameraZoom>,d0
   154de:	|      move.l d0,-(sp)
   154e0:	|      move.l d1,-(sp)
   154e2:	|      jsr 1753c <__divsf3>
   154e8:	|      addq.l #8,sp
   154ea:	|      move.l d0,-(sp)
   154ec:	|      jsr 1761e <__fixsfsi>
   154f2:	|      addq.l #4,sp
   154f4:	|      move.l d0,1c98a <input+0xe>

	killAllPeople ();
   154fa:	|      jsr aa32 <killAllPeople>
	allPeople = frozenStuff -> allPeople;
   15500:	|      movea.l 1cabe <frozenStuff>,a0
   15506:	|      move.l (a0),d0
   15508:	|      move.l d0,1ca2e <allPeople>

	killAllRegions ();
   1550e:	|      jsr 15a64 <killAllRegions>
	allScreenRegions = frozenStuff -> allScreenRegions;
   15514:	|      movea.l 1cabe <frozenStuff>,a0
   1551a:	|      move.l 4(a0),d0
   1551e:	|      move.l d0,1cada <allScreenRegions>
	
	deleteAnim (mouseCursorAnim);  
   15524:	|      move.l 1c8d0 <mouseCursorAnim>,d0
   1552a:	|      move.l d0,-(sp)
   1552c:	|      jsr 9926 <deleteAnim>
   15532:	|      addq.l #4,sp
	mouseCursorAnim = frozenStuff -> mouseCursorAnim;
   15534:	|      movea.l 1cabe <frozenStuff>,a0
   1553a:	|      move.l 32(a0),d0
   1553e:	|      move.l d0,1c8d0 <mouseCursorAnim>
	mouseCursorFrameNum = frozenStuff -> mouseCursorFrameNum;	
   15544:	|      movea.l 1cabe <frozenStuff>,a0
   1554a:	|      move.l 36(a0),d0
   1554e:	|      move.l d0,1c8d4 <mouseCursorFrameNum>

	killZBuffer ();
   15554:	|      jsr 8740 <killZBuffer>
	zBuffer = frozenStuff->zBuffer;
   1555a:	|      movea.l 1cabe <frozenStuff>,a0
   15560:	|      move.l 60(a0),d0
   15564:	|      move.l d0,1ca2a <zBuffer>

	if (currentEvents) FreeVec(currentEvents);
   1556a:	|      move.l 1c342 <currentEvents>,d0
   15570:	|  /-- beq.s 1558a <unfreeze+0x1ce>
   15572:	|  |   move.l 1c342 <currentEvents>,12(sp)
   1557a:	|  |   move.l 1c9ca <SysBase>,d0
   15580:	|  |   movea.l d0,a6
   15582:	|  |   movea.l 12(sp),a1
   15586:	|  |   jsr -690(a6)
	currentEvents = frozenStuff -> currentEvents;
   1558a:	|  \-> movea.l 1cabe <frozenStuff>,a0
   15590:	|      move.l 28(a0),d0
   15594:	|      move.l d0,1c342 <currentEvents>

	killAllSpeech ();
   1559a:	|      jsr 7f64 <killAllSpeech>
	if (speech) FreeVec(speech);
   155a0:	|      move.l 1ca26 <speech>,d0
   155a6:	|  /-- beq.s 155c0 <unfreeze+0x204>
   155a8:	|  |   move.l 1ca26 <speech>,8(sp)
   155b0:	|  |   move.l 1c9ca <SysBase>,d0
   155b6:	|  |   movea.l d0,a6
   155b8:	|  |   movea.l 8(sp),a1
   155bc:	|  |   jsr -690(a6)
	speech = frozenStuff -> speech;
   155c0:	|  \-> movea.l 1cabe <frozenStuff>,a0
   155c6:	|      move.l 20(a0),d0
   155ca:	|      move.l d0,1ca26 <speech>

	frozenStuff = frozenStuff -> next;
   155d0:	|      movea.l 1cabe <frozenStuff>,a0
   155d6:	|      move.l 64(a0),d0
   155da:	|      move.l d0,1cabe <frozenStuff>

	overRegion = NULL;
   155e0:	|      clr.l 1cade <overRegion>
	if (killMe) FreeVec(killMe);
   155e6:	|      tst.l 16(sp)
   155ea:	|  /-- beq.s 15602 <unfreeze+0x246>
   155ec:	|  |   move.l 16(sp),4(sp)
   155f2:	|  |   move.l 1c9ca <SysBase>,d0
   155f8:	|  |   movea.l d0,a6
   155fa:	|  |   movea.l 4(sp),a1
   155fe:	|  |   jsr -690(a6)
	killMe = NULL;
   15602:	|  \-> clr.l 16(sp)
   15606:	|  /-- bra.s 1560a <unfreeze+0x24e>
	if (! frozenStuff) return;
   15608:	\--|-> nop
}
   1560a:	   \-> movea.l (sp)+,a6
   1560c:	       lea 16(sp),sp
   15610:	       rts

00015612 <isInFont>:
unsigned int fontTableSize = 0;
struct loadedSpriteBank *theFont;


BOOL isInFont (char * theText) {
	KPrintF("isInFont: Not implemented yet on Amiga"); //Todo: Implement on Amiga
   15612:	pea 1a033 <newfatal.c.307beca7+0x4b>
   15618:	jsr 17254 <KPrintF>
   1561e:	addq.l #4,sp
	return FALSE;
   15620:	clr.w d0
}
   15622:	rts

00015624 <loadFont>:

BOOL loadFont (int filenum, char * charOrder, int h) {
   15624:	          lea -32(sp),sp
   15628:	          move.l a6,-(sp)
   1562a:	          move.l d2,-(sp)
	unsigned int a = 0;
   1562c:	          clr.l 36(sp)
	ULONG c;

	if( fontOrderString) FreeVec(fontOrderString);
   15630:	          move.l 1caca <fontOrderString>,d0
   15636:	      /-- beq.s 15650 <loadFont+0x2c>
   15638:	      |   move.l 1caca <fontOrderString>,24(sp)
   15640:	      |   move.l 1c9ca <SysBase>,d0
   15646:	      |   movea.l d0,a6
   15648:	      |   movea.l 24(sp),a1
   1564c:	      |   jsr -690(a6)
	fontOrderString = copyString(charOrder);
   15650:	      \-> move.l 48(sp),-(sp)
   15654:	          jsr b8 <copyString>
   1565a:	          addq.l #4,sp
   1565c:	          move.l d0,1caca <fontOrderString>
	if( theFont) forgetSpriteBank(theFont);	
   15662:	          move.l 1cad6 <theFont>,d0
   15668:	      /-- beq.s 1567a <loadFont+0x56>
   1566a:	      |   move.l 1cad6 <theFont>,d0
   15670:	      |   move.l d0,-(sp)
   15672:	      |   jsr 8a7e <forgetSpriteBank>
   15678:	      |   addq.l #4,sp
	theFont = NULL;
   1567a:	      \-> clr.l 1cad6 <theFont>

	loadedFontNum = filenum;
   15680:	          move.l 44(sp),1cac6 <loadedFontNum>

	fontTableSize = 0;
   15688:	          clr.l 1cad2 <fontTableSize>
	char *tmp = charOrder;
   1568e:	          move.l 48(sp),32(sp)
	while (*tmp) {        
   15694:	   /----- bra.s 156d0 <loadFont+0xac>
		if (*tmp > (UBYTE) fontTableSize) fontTableSize = *tmp;
   15696:	/--|----> movea.l 32(sp),a0
   1569a:	|  |      move.b (a0),d0
   1569c:	|  |      ext.w d0
   1569e:	|  |      movea.w d0,a0
   156a0:	|  |      move.l 1cad2 <fontTableSize>,d0
   156a6:	|  |      move.l d0,d0
   156a8:	|  |      move.b d0,d0
   156aa:	|  |      andi.l #255,d0
   156b0:	|  |      cmp.l a0,d0
   156b2:	|  |  /-- bge.s 156c4 <loadFont+0xa0>
   156b4:	|  |  |   movea.l 32(sp),a0
   156b8:	|  |  |   move.b (a0),d0
   156ba:	|  |  |   ext.w d0
   156bc:	|  |  |   movea.w d0,a0
   156be:	|  |  |   move.l a0,1cad2 <fontTableSize>
		*tmp++;
   156c4:	|  |  \-> move.l 32(sp),d0
   156c8:	|  |      move.l d0,d1
   156ca:	|  |      addq.l #1,d1
   156cc:	|  |      move.l d1,32(sp)
	while (*tmp) {        
   156d0:	|  \----> movea.l 32(sp),a0
   156d4:	|         move.b (a0),d0
   156d6:	\-------- bne.s 15696 <loadFont+0x72>
	}
	fontTableSize++;
   156d8:	          move.l 1cad2 <fontTableSize>,d0
   156de:	          addq.l #1,d0
   156e0:	          move.l d0,1cad2 <fontTableSize>

	if( fontTable) FreeVec(fontTable);
   156e6:	          move.l 1cace <fontTable>,d0
   156ec:	      /-- beq.s 15706 <loadFont+0xe2>
   156ee:	      |   move.l 1cace <fontTable>,20(sp)
   156f6:	      |   move.l 1c9ca <SysBase>,d0
   156fc:	      |   movea.l d0,a6
   156fe:	      |   movea.l 20(sp),a1
   15702:	      |   jsr -690(a6)
	fontTable = AllocVec(sizeof(ULONG) * fontTableSize, MEMF_ANY);
   15706:	      \-> move.l 1cad2 <fontTableSize>,d0
   1570c:	          add.l d0,d0
   1570e:	          add.l d0,d0
   15710:	          move.l d0,16(sp)
   15714:	          clr.l 12(sp)
   15718:	          move.l 1c9ca <SysBase>,d0
   1571e:	          movea.l d0,a6
   15720:	          move.l 16(sp),d0
   15724:	          move.l 12(sp),d1
   15728:	          jsr -684(a6)
   1572c:	          move.l d0,8(sp)
   15730:	          move.l 8(sp),d0
   15734:	          move.l d0,1cace <fontTable>
	if (!fontTable) return FALSE;
   1573a:	          move.l 1cace <fontTable>,d0
   15740:	      /-- bne.s 15748 <loadFont+0x124>
   15742:	      |   clr.w d0
   15744:	/-----|-- bra.w 157ee <loadFont+0x1ca>

	for (a = 0;  a < fontTableSize; a++) {
   15748:	|     \-> clr.l 36(sp)
   1574c:	|     /-- bra.s 15766 <loadFont+0x142>
		fontTable[a] = 0;
   1574e:	|  /--|-> move.l 1cace <fontTable>,d1
   15754:	|  |  |   move.l 36(sp),d0
   15758:	|  |  |   add.l d0,d0
   1575a:	|  |  |   add.l d0,d0
   1575c:	|  |  |   movea.l d1,a0
   1575e:	|  |  |   adda.l d0,a0
   15760:	|  |  |   clr.l (a0)
	for (a = 0;  a < fontTableSize; a++) {
   15762:	|  |  |   addq.l #1,36(sp)
   15766:	|  |  \-> move.l 1cad2 <fontTableSize>,d0
   1576c:	|  |      cmp.l 36(sp),d0
   15770:	|  \----- bhi.s 1574e <loadFont+0x12a>
	}
	a = 0;
   15772:	|         clr.l 36(sp)
	int i = 0;
   15776:	|         clr.l 28(sp)
	tmp = charOrder;
   1577a:	|         move.l 48(sp),32(sp)
	while (*tmp) {
   15780:	|     /-- bra.s 157b0 <loadFont+0x18c>
		fontTable[*tmp++] = i;
   15782:	|  /--|-> move.l 1cace <fontTable>,d1
   15788:	|  |  |   move.l 32(sp),d0
   1578c:	|  |  |   move.l d0,d2
   1578e:	|  |  |   addq.l #1,d2
   15790:	|  |  |   move.l d2,32(sp)
   15794:	|  |  |   movea.l d0,a0
   15796:	|  |  |   move.b (a0),d0
   15798:	|  |  |   ext.w d0
   1579a:	|  |  |   movea.w d0,a0
   1579c:	|  |  |   move.l a0,d0
   1579e:	|  |  |   add.l a0,d0
   157a0:	|  |  |   add.l d0,d0
   157a2:	|  |  |   movea.l d1,a0
   157a4:	|  |  |   adda.l d0,a0
   157a6:	|  |  |   move.l 28(sp),d0
   157aa:	|  |  |   move.l d0,(a0)
		i++;
   157ac:	|  |  |   addq.l #1,28(sp)
	while (*tmp) {
   157b0:	|  |  \-> movea.l 32(sp),a0
   157b4:	|  |      move.b (a0),d0
   157b6:	|  \----- bne.s 15782 <loadFont+0x15e>
	}
	
	theFont = loadBankForAnim(filenum);
   157b8:	|         move.l 44(sp),-(sp)
   157bc:	|         jsr 15f76 <loadBankForAnim>
   157c2:	|         addq.l #4,sp
   157c4:	|         move.l d0,1cad6 <theFont>
	if (!theFont) {
   157ca:	|         move.l 1cad6 <theFont>,d0
   157d0:	|     /-- bne.s 157e4 <loadFont+0x1c0>
		KPrintF("loadFont: Can't load font");
   157d2:	|     |   pea 1a05a <newfatal.c.307beca7+0x72>
   157d8:	|     |   jsr 17254 <KPrintF>
   157de:	|     |   addq.l #4,sp
		return FALSE;
   157e0:	|     |   clr.w d0
   157e2:	+-----|-- bra.s 157ee <loadFont+0x1ca>
	}
	fontHeight = h;
   157e4:	|     \-> move.l 52(sp),1cac2 <fontHeight>
	return TRUE;
   157ec:	|         moveq #1,d0
}
   157ee:	\-------> move.l (sp)+,d2
   157f0:	          movea.l (sp)+,a6
   157f2:	          lea 32(sp),sp
   157f6:	          rts

000157f8 <pasteStringToBackdrop>:

void pasteStringToBackdrop(char *theText, int xOff, int y) {
   157f8:	                lea -12(sp),sp
    struct sprite *mySprite;
    int a = 0;
   157fc:	                clr.l 4(sp)

    if (!fontTableSize) return;
   15800:	                move.l 1cad2 <fontTableSize>,d0
   15806:	/-------------- beq.w 158ce <pasteStringToBackdrop+0xd6>

    xOff += fontSpace >> 1;
   1580a:	|               move.w 1c8ce <fontSpace>,d0
   15810:	|               asr.w #1,d0
   15812:	|               ext.l d0
   15814:	|               add.l d0,20(sp)
	char *tmp = theText;
   15818:	|               move.l 16(sp),8(sp)
    while (*tmp) {        
   1581e:	|     /-------- bra.w 158c2 <pasteStringToBackdrop+0xca>
        mySprite = &theFont->bank.sprites[fontInTable( (UBYTE) *tmp)];
   15822:	|  /--|-------> movea.l 1cad6 <theFont>,a0
   15828:	|  |  |         movea.l 16(a0),a0
   1582c:	|  |  |         movea.l 8(sp),a1
   15830:	|  |  |         move.b (a1),d0
   15832:	|  |  |         move.b d0,d0
   15834:	|  |  |         andi.l #255,d0
   1583a:	|  |  |         move.l 1cad2 <fontTableSize>,d1
   15840:	|  |  |         cmp.l d0,d1
   15842:	|  |  |  /----- bls.s 1586e <pasteStringToBackdrop+0x76>
   15844:	|  |  |  |      move.l 1cace <fontTable>,d1
   1584a:	|  |  |  |      movea.l 8(sp),a1
   1584e:	|  |  |  |      move.b (a1),d0
   15850:	|  |  |  |      move.b d0,d0
   15852:	|  |  |  |      andi.l #255,d0
   15858:	|  |  |  |      add.l d0,d0
   1585a:	|  |  |  |      add.l d0,d0
   1585c:	|  |  |  |      movea.l d1,a1
   1585e:	|  |  |  |      adda.l d0,a1
   15860:	|  |  |  |      move.l (a1),d1
   15862:	|  |  |  |      move.l d1,d0
   15864:	|  |  |  |      lsl.l #3,d0
   15866:	|  |  |  |      sub.l d1,d0
   15868:	|  |  |  |      add.l d0,d0
   1586a:	|  |  |  |      add.l d0,d0
   1586c:	|  |  |  |  /-- bra.s 15870 <pasteStringToBackdrop+0x78>
   1586e:	|  |  |  \--|-> moveq #0,d0
   15870:	|  |  |     \-> adda.l d0,a0
   15872:	|  |  |         move.l a0,(sp)
        CstPasteChar( mySprite, xOff - mySprite->xhot, y - mySprite->yhot);
   15874:	|  |  |         move.l 24(sp),d1
   15878:	|  |  |         movea.l (sp),a0
   1587a:	|  |  |         move.l 12(a0),d0
   1587e:	|  |  |         move.l d0,d0
   15880:	|  |  |         sub.w d0,d1
   15882:	|  |  |         move.w d1,d0
   15884:	|  |  |         movea.w d0,a1
   15886:	|  |  |         move.l 20(sp),d1
   1588a:	|  |  |         movea.l (sp),a0
   1588c:	|  |  |         move.l 8(a0),d0
   15890:	|  |  |         move.l d0,d0
   15892:	|  |  |         sub.w d0,d1
   15894:	|  |  |         move.w d1,d0
   15896:	|  |  |         movea.w d0,a0
   15898:	|  |  |         move.l a1,-(sp)
   1589a:	|  |  |         move.l a0,-(sp)
   1589c:	|  |  |         move.l 8(sp),-(sp)
   158a0:	|  |  |         jsr 23de <CstPasteChar>
   158a6:	|  |  |         lea 12(sp),sp
        xOff += mySprite->width + fontSpace;
   158aa:	|  |  |         movea.l (sp),a0
   158ac:	|  |  |         move.l (a0),d1
   158ae:	|  |  |         move.w 1c8ce <fontSpace>,d0
   158b4:	|  |  |         movea.w d0,a0
   158b6:	|  |  |         move.l d1,d0
   158b8:	|  |  |         add.l a0,d0
   158ba:	|  |  |         add.l d0,20(sp)
		tmp++;
   158be:	|  |  |         addq.l #1,8(sp)
    while (*tmp) {        
   158c2:	|  |  \-------> movea.l 8(sp),a0
   158c6:	|  |            move.b (a0),d0
   158c8:	|  \----------- bne.w 15822 <pasteStringToBackdrop+0x2a>
   158cc:	|           /-- bra.s 158d0 <pasteStringToBackdrop+0xd8>
    if (!fontTableSize) return;
   158ce:	\-----------|-> nop
    }
}
   158d0:	            \-> lea 12(sp),sp
   158d4:	                rts

000158d6 <stringWidth>:


int stringWidth (char * theText) {
   158d6:	       subq.l #8,sp
	int a = 0;
   158d8:	       clr.l 4(sp)
    ULONG c;
	int xOff = 0;
   158dc:	       clr.l (sp)

	if (! fontTableSize) return 0;
   158de:	       move.l 1cad2 <fontTableSize>,d0
   158e4:	/----- bne.s 158ea <stringWidth+0x14>
   158e6:	|      moveq #0,d0
   158e8:	|  /-- bra.s 158ec <stringWidth+0x16>
	/*while (theText[a]) {
        c = u8_nextchar(theText, &a);
		xOff += theFont.sprites[fontInTable(c)].width + fontSpace;
	}Todo: Amigize this*/
	
	return xOff;
   158ea:	\--|-> move.l (sp),d0
}
   158ec:	   \-> addq.l #8,sp
   158ee:	       rts

000158f0 <addScreenRegion>:
struct screenRegion * allScreenRegions = NULL;
struct screenRegion * overRegion = NULL;



BOOL addScreenRegion(int x1, int y1, int x2, int y2, int sX, int sY, int di, int objectNum) {
   158f0:	       lea -16(sp),sp
   158f4:	       move.l a6,-(sp)
    struct screenRegion *newRegion = AllocVec(sizeof(struct screenRegion), MEMF_ANY);
   158f6:	       moveq #36,d0
   158f8:	       move.l d0,16(sp)
   158fc:	       clr.l 12(sp)
   15900:	       move.l 1c9ca <SysBase>,d0
   15906:	       movea.l d0,a6
   15908:	       move.l 16(sp),d0
   1590c:	       move.l 12(sp),d1
   15910:	       jsr -684(a6)
   15914:	       move.l d0,8(sp)
   15918:	       move.l 8(sp),d0
   1591c:	       move.l d0,4(sp)
    if (!newRegion) return FALSE;
   15920:	   /-- bne.s 15928 <addScreenRegion+0x38>
   15922:	   |   clr.w d0
   15924:	/--|-- bra.w 159a8 <addScreenRegion+0xb8>
    newRegion->di = di;
   15928:	|  \-> movea.l 4(sp),a0
   1592c:	|      move.l 48(sp),24(a0)
    newRegion->x1 = x1;
   15932:	|      movea.l 4(sp),a0
   15936:	|      move.l 24(sp),(a0)
    newRegion->y1 = y1;
   1593a:	|      movea.l 4(sp),a0
   1593e:	|      move.l 28(sp),4(a0)
    newRegion->x2 = x2;
   15944:	|      movea.l 4(sp),a0
   15948:	|      move.l 32(sp),8(a0)
    newRegion->y2 = y2;
   1594e:	|      movea.l 4(sp),a0
   15952:	|      move.l 36(sp),12(a0)
    newRegion->sX = sX;
   15958:	|      movea.l 4(sp),a0
   1595c:	|      move.l 40(sp),16(a0)
    newRegion->sY = sY;
   15962:	|      movea.l 4(sp),a0
   15966:	|      move.l 44(sp),20(a0)
    newRegion->thisType = loadObjectType(objectNum);
   1596c:	|      move.l 52(sp),-(sp)
   15970:	|      jsr d62e <loadObjectType>
   15976:	|      addq.l #4,sp
   15978:	|      movea.l 4(sp),a0
   1597c:	|      move.l d0,28(a0)
    newRegion->next = allScreenRegions;
   15980:	|      move.l 1cada <allScreenRegions>,d0
   15986:	|      movea.l 4(sp),a0
   1598a:	|      move.l d0,32(a0)
    allScreenRegions = newRegion;
   1598e:	|      move.l 4(sp),1cada <allScreenRegions>
    return (BOOL) (newRegion->thisType != NULL);
   15996:	|      movea.l 4(sp),a0
   1599a:	|      move.l 28(a0),d0
   1599e:	|      sne d0
   159a0:	|      neg.b d0
   159a2:	|      move.b d0,d0
   159a4:	|      andi.w #255,d0
}
   159a8:	\----> movea.l (sp)+,a6
   159aa:	       lea 16(sp),sp
   159ae:	       rts

000159b0 <getOverRegion>:

void getOverRegion () {
   159b0:	             subq.l #4,sp
	struct screenRegion * thisRegion = allScreenRegions;
   159b2:	             move.l 1cada <allScreenRegions>,(sp)
	while (thisRegion) {
   159b8:	   /-------- bra.s 15a26 <getOverRegion+0x76>
		if ((input.mouseX >= thisRegion -> x1 - cameraX) && (input.mouseY >= thisRegion -> y1 - cameraY) &&
   159ba:	/--|-------> move.l 1c986 <input+0xa>,d0
   159c0:	|  |         movea.l (sp),a0
   159c2:	|  |         movea.l (a0),a0
   159c4:	|  |         move.l 1ca84 <cameraX>,d1
   159ca:	|  |         suba.l d1,a0
   159cc:	|  |         cmpa.l d0,a0
   159ce:	|  |  /----- bgt.s 15a20 <getOverRegion+0x70>
   159d0:	|  |  |      move.l 1c98a <input+0xe>,d0
   159d6:	|  |  |      movea.l (sp),a0
   159d8:	|  |  |      movea.l 4(a0),a0
   159dc:	|  |  |      move.l 1ca88 <cameraY>,d1
   159e2:	|  |  |      suba.l d1,a0
   159e4:	|  |  |      cmpa.l d0,a0
   159e6:	|  |  +----- bgt.s 15a20 <getOverRegion+0x70>
			 (input.mouseX <= thisRegion -> x2 - cameraX) && (input.mouseY <= thisRegion -> y2 - cameraY)) {
   159e8:	|  |  |      move.l 1c986 <input+0xa>,d0
   159ee:	|  |  |      movea.l (sp),a0
   159f0:	|  |  |      movea.l 8(a0),a0
   159f4:	|  |  |      move.l 1ca84 <cameraX>,d1
   159fa:	|  |  |      suba.l d1,a0
		if ((input.mouseX >= thisRegion -> x1 - cameraX) && (input.mouseY >= thisRegion -> y1 - cameraY) &&
   159fc:	|  |  |      cmpa.l d0,a0
   159fe:	|  |  +----- blt.s 15a20 <getOverRegion+0x70>
			 (input.mouseX <= thisRegion -> x2 - cameraX) && (input.mouseY <= thisRegion -> y2 - cameraY)) {
   15a00:	|  |  |      move.l 1c98a <input+0xe>,d0
   15a06:	|  |  |      movea.l (sp),a0
   15a08:	|  |  |      movea.l 12(a0),a0
   15a0c:	|  |  |      move.l 1ca88 <cameraY>,d1
   15a12:	|  |  |      suba.l d1,a0
   15a14:	|  |  |      cmpa.l d0,a0
   15a16:	|  |  +----- blt.s 15a20 <getOverRegion+0x70>
			overRegion = thisRegion;
   15a18:	|  |  |      move.l (sp),1cade <overRegion>
			return;
   15a1e:	|  |  |  /-- bra.s 15a32 <getOverRegion+0x82>
		}
		thisRegion = thisRegion -> next;
   15a20:	|  |  \--|-> movea.l (sp),a0
   15a22:	|  |     |   move.l 32(a0),(sp)
	while (thisRegion) {
   15a26:	|  \-----|-> tst.l (sp)
   15a28:	\--------|-- bne.s 159ba <getOverRegion+0xa>
	}
	overRegion = NULL;
   15a2a:	         |   clr.l 1cade <overRegion>
	return;
   15a30:	         |   nop
}
   15a32:	         \-> addq.l #4,sp
   15a34:	             rts

00015a36 <getRegionForObject>:


struct screenRegion * getRegionForObject (int obj) {
   15a36:	             subq.l #4,sp
	struct screenRegion * thisRegion = allScreenRegions;
   15a38:	             move.l 1cada <allScreenRegions>,(sp)

	while (thisRegion) {
   15a3e:	   /-------- bra.s 15a5a <getRegionForObject+0x24>
		if (obj == thisRegion -> thisType -> objectNum) {
   15a40:	/--|-------> movea.l (sp),a0
   15a42:	|  |         movea.l 28(a0),a0
   15a46:	|  |         move.l 4(a0),d0
   15a4a:	|  |         cmp.l 8(sp),d0
   15a4e:	|  |     /-- bne.s 15a54 <getRegionForObject+0x1e>
			return thisRegion;
   15a50:	|  |     |   move.l (sp),d0
   15a52:	|  |  /--|-- bra.s 15a60 <getRegionForObject+0x2a>
		}
		thisRegion = thisRegion -> next;
   15a54:	|  |  |  \-> movea.l (sp),a0
   15a56:	|  |  |      move.l 32(a0),(sp)
	while (thisRegion) {
   15a5a:	|  \--|----> tst.l (sp)
   15a5c:	\-----|----- bne.s 15a40 <getRegionForObject+0xa>
	}

	return NULL;
   15a5e:	      |      moveq #0,d0
}
   15a60:	      \----> addq.l #4,sp
   15a62:	             rts

00015a64 <killAllRegions>:

void killAllRegions () {
   15a64:	       subq.l #8,sp
   15a66:	       move.l a6,-(sp)
	struct screenRegion * killRegion;
	while (allScreenRegions) {
   15a68:	   /-- bra.s 15aaa <killAllRegions+0x46>
		killRegion = allScreenRegions;
   15a6a:	/--|-> move.l 1cada <allScreenRegions>,8(sp)
		allScreenRegions = allScreenRegions -> next;
   15a72:	|  |   movea.l 1cada <allScreenRegions>,a0
   15a78:	|  |   move.l 32(a0),d0
   15a7c:	|  |   move.l d0,1cada <allScreenRegions>
		removeObjectType (killRegion -> thisType);
   15a82:	|  |   movea.l 8(sp),a0
   15a86:	|  |   move.l 28(a0),d0
   15a8a:	|  |   move.l d0,-(sp)
   15a8c:	|  |   jsr d8e6 <removeObjectType>
   15a92:	|  |   addq.l #4,sp
		FreeVec(killRegion);
   15a94:	|  |   move.l 8(sp),4(sp)
   15a9a:	|  |   move.l 1c9ca <SysBase>,d0
   15aa0:	|  |   movea.l d0,a6
   15aa2:	|  |   movea.l 4(sp),a1
   15aa6:	|  |   jsr -690(a6)
	while (allScreenRegions) {
   15aaa:	|  \-> move.l 1cada <allScreenRegions>,d0
   15ab0:	\----- bne.s 15a6a <killAllRegions+0x6>
	}
	overRegion = NULL;
   15ab2:	       clr.l 1cade <overRegion>
}
   15ab8:	       nop
   15aba:	       movea.l (sp)+,a6
   15abc:	       addq.l #8,sp
   15abe:	       rts

00015ac0 <loadRegions>:

void loadRegions (BPTR fp) {
   15ac0:	       lea -24(sp),sp
   15ac4:	       move.l a6,-(sp)
	int numRegions = get2bytes (fp);
   15ac6:	       move.l 32(sp),-(sp)
   15aca:	       jsr 6bc <get2bytes>
   15ad0:	       addq.l #4,sp
   15ad2:	       move.l d0,24(sp)

	struct screenRegion * newRegion;
	struct screenRegion * * pointy = & allScreenRegions;
   15ad6:	       move.l #117466,20(sp)

	while (numRegions --) {
   15ade:	   /-- bra.w 15bbc <loadRegions+0xfc>
		newRegion = AllocVec( sizeof(struct screenRegion),MEMF_ANY);
   15ae2:	/--|-> moveq #36,d0
   15ae4:	|  |   move.l d0,16(sp)
   15ae8:	|  |   clr.l 12(sp)
   15aec:	|  |   move.l 1c9ca <SysBase>,d0
   15af2:	|  |   movea.l d0,a6
   15af4:	|  |   move.l 16(sp),d0
   15af8:	|  |   move.l 12(sp),d1
   15afc:	|  |   jsr -684(a6)
   15b00:	|  |   move.l d0,8(sp)
   15b04:	|  |   move.l 8(sp),d0
   15b08:	|  |   move.l d0,4(sp)
		* pointy = newRegion;
   15b0c:	|  |   movea.l 20(sp),a0
   15b10:	|  |   move.l 4(sp),(a0)
		pointy = & (newRegion -> next);
   15b14:	|  |   moveq #32,d1
   15b16:	|  |   add.l 4(sp),d1
   15b1a:	|  |   move.l d1,20(sp)

		newRegion -> x1 = get2bytes (fp);
   15b1e:	|  |   move.l 32(sp),-(sp)
   15b22:	|  |   jsr 6bc <get2bytes>
   15b28:	|  |   addq.l #4,sp
   15b2a:	|  |   movea.l 4(sp),a0
   15b2e:	|  |   move.l d0,(a0)
		newRegion -> y1 = get2bytes (fp);
   15b30:	|  |   move.l 32(sp),-(sp)
   15b34:	|  |   jsr 6bc <get2bytes>
   15b3a:	|  |   addq.l #4,sp
   15b3c:	|  |   movea.l 4(sp),a0
   15b40:	|  |   move.l d0,4(a0)
		newRegion -> x2 = get2bytes (fp);
   15b44:	|  |   move.l 32(sp),-(sp)
   15b48:	|  |   jsr 6bc <get2bytes>
   15b4e:	|  |   addq.l #4,sp
   15b50:	|  |   movea.l 4(sp),a0
   15b54:	|  |   move.l d0,8(a0)
		newRegion -> y2 = get2bytes (fp);
   15b58:	|  |   move.l 32(sp),-(sp)
   15b5c:	|  |   jsr 6bc <get2bytes>
   15b62:	|  |   addq.l #4,sp
   15b64:	|  |   movea.l 4(sp),a0
   15b68:	|  |   move.l d0,12(a0)
		newRegion -> sX = get2bytes (fp);
   15b6c:	|  |   move.l 32(sp),-(sp)
   15b70:	|  |   jsr 6bc <get2bytes>
   15b76:	|  |   addq.l #4,sp
   15b78:	|  |   movea.l 4(sp),a0
   15b7c:	|  |   move.l d0,16(a0)
		newRegion -> sY = get2bytes (fp);
   15b80:	|  |   move.l 32(sp),-(sp)
   15b84:	|  |   jsr 6bc <get2bytes>
   15b8a:	|  |   addq.l #4,sp
   15b8c:	|  |   movea.l 4(sp),a0
   15b90:	|  |   move.l d0,20(a0)
		newRegion -> di = get2bytes (fp);
   15b94:	|  |   move.l 32(sp),-(sp)
   15b98:	|  |   jsr 6bc <get2bytes>
   15b9e:	|  |   addq.l #4,sp
   15ba0:	|  |   movea.l 4(sp),a0
   15ba4:	|  |   move.l d0,24(a0)
		newRegion -> thisType = loadObjectRef (fp);
   15ba8:	|  |   move.l 32(sp),-(sp)
   15bac:	|  |   jsr d5dc <loadObjectRef>
   15bb2:	|  |   addq.l #4,sp
   15bb4:	|  |   movea.l 4(sp),a0
   15bb8:	|  |   move.l d0,28(a0)
	while (numRegions --) {
   15bbc:	|  \-> move.l 24(sp),d0
   15bc0:	|      move.l d0,d1
   15bc2:	|      subq.l #1,d1
   15bc4:	|      move.l d1,24(sp)
   15bc8:	|      tst.l d0
   15bca:	\----- bne.w 15ae2 <loadRegions+0x22>
	}
	* pointy = NULL;
   15bce:	       movea.l 20(sp),a0
   15bd2:	       clr.l (a0)
}
   15bd4:	       nop
   15bd6:	       movea.l (sp)+,a6
   15bd8:	       lea 24(sp),sp
   15bdc:	       rts

00015bde <removeScreenRegion>:

void removeScreenRegion (int objectNum) {
   15bde:	             lea -12(sp),sp
   15be2:	             move.l a6,-(sp)
    struct screenRegion ** huntRegion = &allScreenRegions;
   15be4:	             move.l #117466,12(sp)
    struct screenRegion * killMe;

    while (*huntRegion) {
   15bec:	   /-------- bra.s 15c66 <removeScreenRegion+0x88>
        if ((*huntRegion)->thisType->objectNum == objectNum) {
   15bee:	/--|-------> movea.l 12(sp),a0
   15bf2:	|  |         movea.l (a0),a0
   15bf4:	|  |         movea.l 28(a0),a0
   15bf8:	|  |         move.l 4(a0),d0
   15bfc:	|  |         cmp.l 20(sp),d0
   15c00:	|  |  /----- bne.s 15c58 <removeScreenRegion+0x7a>
            killMe = *huntRegion;
   15c02:	|  |  |      movea.l 12(sp),a0
   15c06:	|  |  |      move.l (a0),8(sp)
            *huntRegion = killMe->next;
   15c0a:	|  |  |      movea.l 8(sp),a0
   15c0e:	|  |  |      move.l 32(a0),d0
   15c12:	|  |  |      movea.l 12(sp),a0
   15c16:	|  |  |      move.l d0,(a0)
            removeObjectType(killMe->thisType);
   15c18:	|  |  |      movea.l 8(sp),a0
   15c1c:	|  |  |      move.l 28(a0),d0
   15c20:	|  |  |      move.l d0,-(sp)
   15c22:	|  |  |      jsr d8e6 <removeObjectType>
   15c28:	|  |  |      addq.l #4,sp
            if (killMe == overRegion) overRegion = NULL;
   15c2a:	|  |  |      move.l 1cade <overRegion>,d0
   15c30:	|  |  |      cmp.l 8(sp),d0
   15c34:	|  |  |  /-- bne.s 15c3c <removeScreenRegion+0x5e>
   15c36:	|  |  |  |   clr.l 1cade <overRegion>
            FreeVec(killMe);
   15c3c:	|  |  |  \-> move.l 8(sp),4(sp)
   15c42:	|  |  |      move.l 1c9ca <SysBase>,d0
   15c48:	|  |  |      movea.l d0,a6
   15c4a:	|  |  |      movea.l 4(sp),a1
   15c4e:	|  |  |      jsr -690(a6)
            killMe = NULL;
   15c52:	|  |  |      clr.l 8(sp)
   15c56:	|  +--|----- bra.s 15c66 <removeScreenRegion+0x88>
        } else {
            huntRegion = &((*huntRegion)->next);
   15c58:	|  |  \----> movea.l 12(sp),a0
   15c5c:	|  |         move.l (a0),d0
   15c5e:	|  |         moveq #32,d1
   15c60:	|  |         add.l d0,d1
   15c62:	|  |         move.l d1,12(sp)
    while (*huntRegion) {
   15c66:	|  \-------> movea.l 12(sp),a0
   15c6a:	|            move.l (a0),d0
   15c6c:	\----------- bne.s 15bee <removeScreenRegion+0x10>
        }
    }
}
   15c6e:	             nop
   15c70:	             nop
   15c72:	             movea.l (sp)+,a6
   15c74:	             lea 12(sp),sp
   15c78:	             rts

00015c7a <saveRegions>:

void saveRegions (BPTR fp) {
   15c7a:	       subq.l #8,sp
	int numRegions = 0;
   15c7c:	       clr.l 4(sp)
	struct screenRegion * thisRegion = allScreenRegions;
   15c80:	       move.l 1cada <allScreenRegions>,(sp)
	while (thisRegion) {
   15c86:	   /-- bra.s 15c92 <saveRegions+0x18>
		thisRegion = thisRegion -> next;
   15c88:	/--|-> movea.l (sp),a0
   15c8a:	|  |   move.l 32(a0),(sp)
		numRegions ++;
   15c8e:	|  |   addq.l #1,4(sp)
	while (thisRegion) {
   15c92:	|  \-> tst.l (sp)
   15c94:	\----- bne.s 15c88 <saveRegions+0xe>
	}
	put2bytes (numRegions, fp);
   15c96:	       move.l 12(sp),-(sp)
   15c9a:	       move.l 8(sp),-(sp)
   15c9e:	       jsr 8d0 <put2bytes>
   15ca4:	       addq.l #8,sp
	thisRegion = allScreenRegions;
   15ca6:	       move.l 1cada <allScreenRegions>,(sp)
	while (thisRegion) {
   15cac:	/----- bra.w 15d54 <saveRegions+0xda>
		put2bytes (thisRegion -> x1, fp);
   15cb0:	|  /-> movea.l (sp),a0
   15cb2:	|  |   move.l (a0),d0
   15cb4:	|  |   move.l 12(sp),-(sp)
   15cb8:	|  |   move.l d0,-(sp)
   15cba:	|  |   jsr 8d0 <put2bytes>
   15cc0:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> y1, fp);
   15cc2:	|  |   movea.l (sp),a0
   15cc4:	|  |   move.l 4(a0),d0
   15cc8:	|  |   move.l 12(sp),-(sp)
   15ccc:	|  |   move.l d0,-(sp)
   15cce:	|  |   jsr 8d0 <put2bytes>
   15cd4:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> x2, fp);
   15cd6:	|  |   movea.l (sp),a0
   15cd8:	|  |   move.l 8(a0),d0
   15cdc:	|  |   move.l 12(sp),-(sp)
   15ce0:	|  |   move.l d0,-(sp)
   15ce2:	|  |   jsr 8d0 <put2bytes>
   15ce8:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> y2, fp);
   15cea:	|  |   movea.l (sp),a0
   15cec:	|  |   move.l 12(a0),d0
   15cf0:	|  |   move.l 12(sp),-(sp)
   15cf4:	|  |   move.l d0,-(sp)
   15cf6:	|  |   jsr 8d0 <put2bytes>
   15cfc:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> sX, fp);
   15cfe:	|  |   movea.l (sp),a0
   15d00:	|  |   move.l 16(a0),d0
   15d04:	|  |   move.l 12(sp),-(sp)
   15d08:	|  |   move.l d0,-(sp)
   15d0a:	|  |   jsr 8d0 <put2bytes>
   15d10:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> sY, fp);
   15d12:	|  |   movea.l (sp),a0
   15d14:	|  |   move.l 20(a0),d0
   15d18:	|  |   move.l 12(sp),-(sp)
   15d1c:	|  |   move.l d0,-(sp)
   15d1e:	|  |   jsr 8d0 <put2bytes>
   15d24:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> di, fp);
   15d26:	|  |   movea.l (sp),a0
   15d28:	|  |   move.l 24(a0),d0
   15d2c:	|  |   move.l 12(sp),-(sp)
   15d30:	|  |   move.l d0,-(sp)
   15d32:	|  |   jsr 8d0 <put2bytes>
   15d38:	|  |   addq.l #8,sp
		saveObjectRef (thisRegion -> thisType, fp);
   15d3a:	|  |   movea.l (sp),a0
   15d3c:	|  |   move.l 28(a0),d0
   15d40:	|  |   move.l 12(sp),-(sp)
   15d44:	|  |   move.l d0,-(sp)
   15d46:	|  |   jsr d986 <saveObjectRef>
   15d4c:	|  |   addq.l #8,sp

		thisRegion = thisRegion -> next;
   15d4e:	|  |   movea.l (sp),a0
   15d50:	|  |   move.l 32(a0),(sp)
	while (thisRegion) {
   15d54:	\--|-> tst.l (sp)
   15d56:	   \-- bne.w 15cb0 <saveRegions+0x36>
	}
}
   15d5a:	       nop
   15d5c:	       nop
   15d5e:	       addq.l #8,sp
   15d60:	       rts

00015d62 <showBoxes>:

void showBoxes () {
   15d62:	       subq.l #4,sp
	struct screenRegion * huntRegion = allScreenRegions;
   15d64:	       move.l 1cada <allScreenRegions>,(sp)

	while (huntRegion) {
   15d6a:	/----- bra.w 15e06 <showBoxes+0xa4>
		drawVerticalLine (huntRegion -> x1, huntRegion -> y1, huntRegion -> y2);
   15d6e:	|  /-> movea.l (sp),a0
   15d70:	|  |   move.l 12(a0),d0
   15d74:	|  |   movea.l d0,a1
   15d76:	|  |   movea.l (sp),a0
   15d78:	|  |   move.l 4(a0),d0
   15d7c:	|  |   move.l d0,d1
   15d7e:	|  |   movea.l (sp),a0
   15d80:	|  |   move.l (a0),d0
   15d82:	|  |   move.l a1,-(sp)
   15d84:	|  |   move.l d1,-(sp)
   15d86:	|  |   move.l d0,-(sp)
   15d88:	|  |   jsr d26a <drawVerticalLine>
   15d8e:	|  |   lea 12(sp),sp
		drawVerticalLine (huntRegion -> x2, huntRegion -> y1, huntRegion -> y2);
   15d92:	|  |   movea.l (sp),a0
   15d94:	|  |   move.l 12(a0),d0
   15d98:	|  |   movea.l d0,a1
   15d9a:	|  |   movea.l (sp),a0
   15d9c:	|  |   move.l 4(a0),d0
   15da0:	|  |   move.l d0,d1
   15da2:	|  |   movea.l (sp),a0
   15da4:	|  |   move.l 8(a0),d0
   15da8:	|  |   move.l a1,-(sp)
   15daa:	|  |   move.l d1,-(sp)
   15dac:	|  |   move.l d0,-(sp)
   15dae:	|  |   jsr d26a <drawVerticalLine>
   15db4:	|  |   lea 12(sp),sp
		drawHorizontalLine (huntRegion -> x1, huntRegion -> y1, huntRegion -> x2);
   15db8:	|  |   movea.l (sp),a0
   15dba:	|  |   move.l 8(a0),d0
   15dbe:	|  |   movea.l d0,a1
   15dc0:	|  |   movea.l (sp),a0
   15dc2:	|  |   move.l 4(a0),d0
   15dc6:	|  |   move.l d0,d1
   15dc8:	|  |   movea.l (sp),a0
   15dca:	|  |   move.l (a0),d0
   15dcc:	|  |   move.l a1,-(sp)
   15dce:	|  |   move.l d1,-(sp)
   15dd0:	|  |   move.l d0,-(sp)
   15dd2:	|  |   jsr d244 <drawHorizontalLine>
   15dd8:	|  |   lea 12(sp),sp
		drawHorizontalLine (huntRegion -> x1, huntRegion -> y2, huntRegion -> x2);
   15ddc:	|  |   movea.l (sp),a0
   15dde:	|  |   move.l 8(a0),d0
   15de2:	|  |   movea.l d0,a1
   15de4:	|  |   movea.l (sp),a0
   15de6:	|  |   move.l 12(a0),d0
   15dea:	|  |   move.l d0,d1
   15dec:	|  |   movea.l (sp),a0
   15dee:	|  |   move.l (a0),d0
   15df0:	|  |   move.l a1,-(sp)
   15df2:	|  |   move.l d1,-(sp)
   15df4:	|  |   move.l d0,-(sp)
   15df6:	|  |   jsr d244 <drawHorizontalLine>
   15dfc:	|  |   lea 12(sp),sp
		huntRegion = huntRegion -> next;
   15e00:	|  |   movea.l (sp),a0
   15e02:	|  |   move.l 32(a0),(sp)
	while (huntRegion) {
   15e06:	\--|-> tst.l (sp)
   15e08:	   \-- bne.w 15d6e <showBoxes+0xc>
	}
   15e0c:	       nop
   15e0e:	       nop
   15e10:	       addq.l #4,sp
   15e12:	       rts

00015e14 <rand>:
// Define constants for LCG
#define MULTIPLIER 1103515245UL
#define INCREMENT 12345UL
#define MODULUS 0x7FFFFFFFUL

ULONG rand() {
   15e14:	       lea -88(sp),sp
   15e18:	       move.l a6,-(sp)
    struct timerequest *timereq;

    struct MsgPort *timerport = CreateMsgPort();
   15e1a:	       move.l 1c9ca <SysBase>,d0
   15e20:	       movea.l d0,a6
   15e22:	       jsr -666(a6)
   15e26:	       move.l d0,88(sp)
   15e2a:	       move.l 88(sp),d0
   15e2e:	       move.l d0,84(sp)

    timereq = CreateIORequest(timerport, sizeof(struct timerequest));
   15e32:	       move.l 84(sp),80(sp)
   15e38:	       moveq #40,d0
   15e3a:	       move.l d0,76(sp)
   15e3e:	       move.l 1c9ca <SysBase>,d0
   15e44:	       movea.l d0,a6
   15e46:	       movea.l 80(sp),a0
   15e4a:	       move.l 76(sp),d0
   15e4e:	       jsr -654(a6)
   15e52:	       move.l d0,72(sp)
   15e56:	       move.l 72(sp),d0
   15e5a:	       move.l d0,68(sp)
    struct IORequest* ioreq = (struct IORequest*)timereq;
   15e5e:	       move.l 68(sp),64(sp)
    if (OpenDevice(TIMERNAME, UNIT_MICROHZ, ioreq, 0)) {
   15e64:	       move.l #106612,60(sp)
   15e6c:	       clr.l 56(sp)
   15e70:	       move.l 64(sp),52(sp)
   15e76:	       clr.l 48(sp)
   15e7a:	       move.l 1c9ca <SysBase>,d0
   15e80:	       movea.l d0,a6
   15e82:	       movea.l 60(sp),a0
   15e86:	       move.l 56(sp),d0
   15e8a:	       movea.l 52(sp),a1
   15e8e:	       move.l 48(sp),d1
   15e92:	       jsr -444(a6)
   15e96:	       move.b d0,47(sp)
   15e9a:	       move.b 47(sp),d0
   15e9e:	   /-- beq.s 15eb4 <rand+0xa0>
        KPrintF("Unable to open timer device\n");
   15ea0:	   |   pea 1a081 <newfatal.c.307beca7+0x99>
   15ea6:	   |   jsr 17254 <KPrintF>
   15eac:	   |   addq.l #4,sp
        return 0;
   15eae:	   |   moveq #0,d0
   15eb0:	/--|-- bra.w 15f6e <rand+0x15a>
    }
    struct Device* TimerBase = ioreq->io_Device;
   15eb4:	|  \-> movea.l 64(sp),a0
   15eb8:	|      move.l 20(a0),42(sp)

    struct EClockVal eclock;
    ReadEClock(&eclock);
   15ebe:	|      lea 92(sp),a0
   15ec2:	|      lea -86(a0),a0
   15ec6:	|      move.l a0,38(sp)
   15eca:	|      movea.l 42(sp),a6
   15ece:	|      movea.l 38(sp),a0
   15ed2:	|      jsr -60(a6)
   15ed6:	|      move.l d0,34(sp)

    ULONG seed = eclock.ev_lo; // Using the lower part of EClock value as seed
   15eda:	|      move.l 10(sp),30(sp)
    seed = (seed * MULTIPLIER + INCREMENT) & 0x7fffffff; // Simple LCG
   15ee0:	|      move.l #1103515245,-(sp)
   15ee6:	|      move.l 34(sp),-(sp)
   15eea:	|      jsr 17c08 <__mulsi3>
   15ef0:	|      addq.l #8,sp
   15ef2:	|      addi.l #12345,d0
   15ef8:	|      move.l d0,d1
   15efa:	|      bclr #31,d1
   15efe:	|      move.l d1,30(sp)

    // Transform the seed to a random number
    int random_number = seed % 100; // For example, a random number between 0 and 99
   15f02:	|      move.l 30(sp),d0
   15f06:	|      pea 64 <_start+0x64>
   15f0a:	|      move.l d0,-(sp)
   15f0c:	|      jsr 17ce2 <__umodsi3>
   15f12:	|      addq.l #8,sp
   15f14:	|      move.l d0,26(sp)
    KPrintF("Random Number: %d\n", random_number);
   15f18:	|      move.l 26(sp),-(sp)
   15f1c:	|      pea 1a09e <newfatal.c.307beca7+0xb6>
   15f22:	|      jsr 17254 <KPrintF>
   15f28:	|      addq.l #8,sp

    CloseDevice(ioreq);
   15f2a:	|      move.l 64(sp),22(sp)
   15f30:	|      move.l 1c9ca <SysBase>,d0
   15f36:	|      movea.l d0,a6
   15f38:	|      movea.l 22(sp),a1
   15f3c:	|      jsr -450(a6)
    DeleteIORequest(ioreq);
   15f40:	|      move.l 64(sp),18(sp)
   15f46:	|      move.l 1c9ca <SysBase>,d0
   15f4c:	|      movea.l d0,a6
   15f4e:	|      movea.l 18(sp),a0
   15f52:	|      jsr -660(a6)
    DeleteMsgPort(timerport);
   15f56:	|      move.l 84(sp),14(sp)
   15f5c:	|      move.l 1c9ca <SysBase>,d0
   15f62:	|      movea.l d0,a6
   15f64:	|      movea.l 14(sp),a0
   15f68:	|      jsr -672(a6)
    return 0;
   15f6c:	|      moveq #0,d0
   15f6e:	\----> movea.l (sp)+,a6
   15f70:	       lea 88(sp),sp
   15f74:	       rts

00015f76 <loadBankForAnim>:
#include "sprbanks.h"
#include "support/gcc8_c_support.h"

struct loadedSpriteBank * allLoadedBanks = NULL;

struct loadedSpriteBank * loadBankForAnim (int ID) {
   15f76:	             lea -20(sp),sp
   15f7a:	             move.l a6,-(sp)
	// KPrintF("loadBankForAnim: Looking for sprite bank with ID %d\n", ID);	
	struct loadedSpriteBank * returnMe = allLoadedBanks;
   15f7c:	             move.l 1cae2 <allLoadedBanks>,20(sp)
	while (returnMe) {
   15f84:	      /----- bra.s 15fb6 <loadBankForAnim+0x40>
		if (returnMe->ID == ID) {
   15f86:	   /--|----> movea.l 20(sp),a0
   15f8a:	   |  |      move.l (a0),d0
   15f8c:	   |  |      cmp.l 28(sp),d0
   15f90:	   |  |  /-- bne.s 15fac <loadBankForAnim+0x36>
			// KPrintF("loadBankForAnim: Found existing sprite bank with ID %d\n", returnMe->ID);
			returnMe->timesUsed++;
   15f92:	   |  |  |   movea.l 20(sp),a0
   15f96:	   |  |  |   move.l 4(a0),d0
   15f9a:	   |  |  |   addq.l #1,d0
   15f9c:	   |  |  |   movea.l 20(sp),a0
   15fa0:	   |  |  |   move.l d0,4(a0)
			return returnMe;			
   15fa4:	   |  |  |   move.l 20(sp),d0
   15fa8:	/--|--|--|-- bra.w 16066 <loadBankForAnim+0xf0>
		}		
		returnMe = returnMe->next;
   15fac:	|  |  |  \-> movea.l 20(sp),a0
   15fb0:	|  |  |      move.l 22(a0),20(sp)
	while (returnMe) {
   15fb6:	|  |  \----> tst.l 20(sp)
   15fba:	|  \-------- bne.s 15f86 <loadBankForAnim+0x10>
	}
	returnMe = AllocVec(sizeof(struct loadedSpriteBank), MEMF_ANY);
   15fbc:	|            moveq #26,d0
   15fbe:	|            move.l d0,16(sp)
   15fc2:	|            clr.l 12(sp)
   15fc6:	|            move.l 1c9ca <SysBase>,d0
   15fcc:	|            movea.l d0,a6
   15fce:	|            move.l 16(sp),d0
   15fd2:	|            move.l 12(sp),d1
   15fd6:	|            jsr -684(a6)
   15fda:	|            move.l d0,8(sp)
   15fde:	|            move.l 8(sp),d0
   15fe2:	|            move.l d0,20(sp)
	// KPrintF("loadBankForAnim: No existing sprite bank with ID %d\n", ID);
	if (returnMe) {
   15fe6:	|     /----- beq.s 16064 <loadBankForAnim+0xee>
		returnMe->ID = ID;
   15fe8:	|     |      movea.l 20(sp),a0
   15fec:	|     |      move.l 28(sp),(a0)
		if (loadSpriteBank(ID, &returnMe->bank)) {
   15ff0:	|     |      move.l 20(sp),d0
   15ff4:	|     |      addq.l #8,d0
   15ff6:	|     |      move.l d0,-(sp)
   15ff8:	|     |      move.l 32(sp),-(sp)
   15ffc:	|     |      jsr 8b8a <loadSpriteBank>
   16002:	|     |      addq.l #8,sp
   16004:	|     |      tst.w d0
   16006:	|     |  /-- beq.s 1603c <loadBankForAnim+0xc6>
			returnMe->timesUsed = 1;
   16008:	|     |  |   movea.l 20(sp),a0
   1600c:	|     |  |   moveq #1,d0
   1600e:	|     |  |   move.l d0,4(a0)
			returnMe->next = allLoadedBanks;
   16012:	|     |  |   move.l 1cae2 <allLoadedBanks>,d0
   16018:	|     |  |   movea.l 20(sp),a0
   1601c:	|     |  |   move.l d0,22(a0)
			allLoadedBanks = returnMe;
   16020:	|     |  |   move.l 20(sp),1cae2 <allLoadedBanks>
			KPrintF("loadBankForAnim: New sprite bank created OK\n");
   16028:	|     |  |   pea 1a0b1 <newfatal.c.307beca7+0xc9>
   1602e:	|     |  |   jsr 17254 <KPrintF>
   16034:	|     |  |   addq.l #4,sp
			return returnMe;
   16036:	|     |  |   move.l 20(sp),d0
   1603a:	+-----|--|-- bra.s 16066 <loadBankForAnim+0xf0>
		} else {
			KPrintF("loadBankForAnim: I guess I couldn't load the sprites...\n");
   1603c:	|     |  \-> pea 1a0de <newfatal.c.307beca7+0xf6>
   16042:	|     |      jsr 17254 <KPrintF>
   16048:	|     |      addq.l #4,sp
			FreeVec(returnMe);
   1604a:	|     |      move.l 20(sp),4(sp)
   16050:	|     |      move.l 1c9ca <SysBase>,d0
   16056:	|     |      movea.l d0,a6
   16058:	|     |      movea.l 4(sp),a1
   1605c:	|     |      jsr -690(a6)
			return NULL;
   16060:	|     |      moveq #0,d0
   16062:	+-----|----- bra.s 16066 <loadBankForAnim+0xf0>
		}
	} else return NULL;
   16064:	|     \----> moveq #0,d0
}
   16066:	\----------> movea.l (sp)+,a6
   16068:	             lea 20(sp),sp
   1606c:	             rts

0001606e <closestPointOnLine>:
#include "support/gcc8_c_support.h"
#include "line.h"

struct flor * currentFloor = NULL;

BOOL closestPointOnLine (int * closestX, int * closestY, int x1, int y1, int x2, int y2, int xP, int yP) {
   1606e:	       lea -60(sp),sp
   16072:	       move.l d3,-(sp)
   16074:	       move.l d2,-(sp)
 	DOUBLE xDiff = x2 - x1;
   16076:	       move.l 88(sp),d0
   1607a:	       sub.l 80(sp),d0
   1607e:	       move.l d0,-(sp)
   16080:	       jsr 17646 <__floatsidf>
   16086:	       addq.l #4,sp
   16088:	       move.l d0,32(sp)
   1608c:	       move.l d1,36(sp)
   16090:	       move.l 32(sp),60(sp)
   16096:	       move.l 36(sp),64(sp)
	int yDiff = y2 - y1;
   1609c:	       move.l 92(sp),d0
   160a0:	       sub.l 84(sp),d0
   160a4:	       move.l d0,56(sp)

	DOUBLE m = xDiff * (xP - x1) + yDiff * (yP - y1);
   160a8:	       move.l 96(sp),d0
   160ac:	       sub.l 80(sp),d0
   160b0:	       move.l d0,-(sp)
   160b2:	       jsr 17646 <__floatsidf>
   160b8:	       addq.l #4,sp
   160ba:	       move.l 64(sp),-(sp)
   160be:	       move.l 64(sp),-(sp)
   160c2:	       move.l d1,-(sp)
   160c4:	       move.l d0,-(sp)
   160c6:	       jsr 176d6 <__muldf3>
   160cc:	       lea 16(sp),sp
   160d0:	       move.l d0,d2
   160d2:	       move.l d1,d3
   160d4:	       move.l 100(sp),d0
   160d8:	       sub.l 84(sp),d0
   160dc:	       move.l 56(sp),-(sp)
   160e0:	       move.l d0,-(sp)
   160e2:	       jsr 17c08 <__mulsi3>
   160e8:	       addq.l #8,sp
   160ea:	       move.l d0,-(sp)
   160ec:	       jsr 17646 <__floatsidf>
   160f2:	       addq.l #4,sp
   160f4:	       move.l d1,-(sp)
   160f6:	       move.l d0,-(sp)
   160f8:	       move.l d3,-(sp)
   160fa:	       move.l d2,-(sp)
   160fc:	       jsr 17478 <__adddf3>
   16102:	       lea 16(sp),sp
   16106:	       move.l d0,24(sp)
   1610a:	       move.l d1,28(sp)
   1610e:	       move.l 24(sp),48(sp)
   16114:	       move.l 28(sp),52(sp)
	m /= (xDiff * xDiff) + (yDiff * yDiff);
   1611a:	       move.l 64(sp),-(sp)
   1611e:	       move.l 64(sp),-(sp)
   16122:	       move.l 72(sp),-(sp)
   16126:	       move.l 72(sp),-(sp)
   1612a:	       jsr 176d6 <__muldf3>
   16130:	       lea 16(sp),sp
   16134:	       move.l d0,d2
   16136:	       move.l d1,d3
   16138:	       move.l 56(sp),-(sp)
   1613c:	       move.l 60(sp),-(sp)
   16140:	       jsr 17c08 <__mulsi3>
   16146:	       addq.l #8,sp
   16148:	       move.l d0,-(sp)
   1614a:	       jsr 17646 <__floatsidf>
   16150:	       addq.l #4,sp
   16152:	       move.l d1,-(sp)
   16154:	       move.l d0,-(sp)
   16156:	       move.l d3,-(sp)
   16158:	       move.l d2,-(sp)
   1615a:	       jsr 17478 <__adddf3>
   16160:	       lea 16(sp),sp
   16164:	       move.l d1,-(sp)
   16166:	       move.l d0,-(sp)
   16168:	       move.l 60(sp),-(sp)
   1616c:	       move.l 60(sp),-(sp)
   16170:	       jsr 174da <__divdf3>
   16176:	       lea 16(sp),sp
   1617a:	       move.l d0,16(sp)
   1617e:	       move.l d1,20(sp)
   16182:	       move.l 16(sp),48(sp)
   16188:	       move.l 20(sp),52(sp)

	if (m < 0) {		
   1618e:	       clr.l -(sp)
   16190:	       clr.l -(sp)
   16192:	       move.l 60(sp),-(sp)
   16196:	       move.l 60(sp),-(sp)
   1619a:	       jsr 1785e <__ltdf2>
   161a0:	       lea 16(sp),sp
   161a4:	       tst.l d0
   161a6:	   /-- bge.s 161bc <closestPointOnLine+0x14e>
		*closestX = x1;
   161a8:	   |   movea.l 72(sp),a0
   161ac:	   |   move.l 80(sp),(a0)
		*closestY = y1;
   161b0:	   |   movea.l 76(sp),a0
   161b4:	   |   move.l 84(sp),(a0)
   161b8:	/--|-- bra.w 1628a <closestPointOnLine+0x21c>
	} else if (m > 1) {
   161bc:	|  \-> clr.l -(sp)
   161be:	|      move.l #1072693248,-(sp)
   161c4:	|      move.l 60(sp),-(sp)
   161c8:	|      move.l 60(sp),-(sp)
   161cc:	|      jsr 177a4 <__gtdf2>
   161d2:	|      lea 16(sp),sp
   161d6:	|      tst.l d0
   161d8:	|  /-- ble.s 161ee <closestPointOnLine+0x180>
		*closestX = x2;
   161da:	|  |   movea.l 72(sp),a0
   161de:	|  |   move.l 88(sp),(a0)
		*closestY = y2;
   161e2:	|  |   movea.l 76(sp),a0
   161e6:	|  |   move.l 92(sp),(a0)
   161ea:	+--|-- bra.w 1628a <closestPointOnLine+0x21c>
	} else {
		DOUBLE tmp = m * xDiff; 
   161ee:	|  \-> move.l 64(sp),-(sp)
   161f2:	|      move.l 64(sp),-(sp)
   161f6:	|      move.l 60(sp),-(sp)
   161fa:	|      move.l 60(sp),-(sp)
   161fe:	|      jsr 176d6 <__muldf3>
   16204:	|      lea 16(sp),sp
   16208:	|      move.l d0,8(sp)
   1620c:	|      move.l d1,12(sp)
   16210:	|      move.l 8(sp),40(sp)
   16216:	|      move.l 12(sp),44(sp)
		*closestX = (int) tmp;
   1621c:	|      move.l 44(sp),-(sp)
   16220:	|      move.l 44(sp),-(sp)
   16224:	|      jsr 175e8 <__fixdfsi>
   1622a:	|      addq.l #8,sp
   1622c:	|      movea.l 72(sp),a0
   16230:	|      move.l d0,(a0)
		*closestX += x1;
   16232:	|      movea.l 72(sp),a0
   16236:	|      move.l (a0),d0
   16238:	|      add.l 80(sp),d0
   1623c:	|      movea.l 72(sp),a0
   16240:	|      move.l d0,(a0)
		*closestY = m * yDiff;
   16242:	|      move.l 56(sp),-(sp)
   16246:	|      jsr 17646 <__floatsidf>
   1624c:	|      addq.l #4,sp
   1624e:	|      move.l 52(sp),-(sp)
   16252:	|      move.l 52(sp),-(sp)
   16256:	|      move.l d1,-(sp)
   16258:	|      move.l d0,-(sp)
   1625a:	|      jsr 176d6 <__muldf3>
   16260:	|      lea 16(sp),sp
   16264:	|      move.l d1,-(sp)
   16266:	|      move.l d0,-(sp)
   16268:	|      jsr 175e8 <__fixdfsi>
   1626e:	|      addq.l #8,sp
   16270:	|      movea.l 76(sp),a0
   16274:	|      move.l d0,(a0)
		*closestY += y1;
   16276:	|      movea.l 76(sp),a0
   1627a:	|      move.l (a0),d0
   1627c:	|      add.l 84(sp),d0
   16280:	|      movea.l 76(sp),a0
   16284:	|      move.l d0,(a0)
		return TRUE;
   16286:	|      moveq #1,d0
   16288:	|  /-- bra.s 1628c <closestPointOnLine+0x21e>
	}
	return FALSE;
   1628a:	\--|-> clr.w d0
}
   1628c:	   \-> move.l (sp)+,d2
   1628e:	       move.l (sp)+,d3
   16290:	       lea 60(sp),sp
   16294:	       rts

00016296 <drawFloor>:

void drawFloor() {
   16296:	                lea -12(sp),sp
   1629a:	                move.l d3,-(sp)
   1629c:	                move.l d2,-(sp)
    int i, j, nV;
    for (i = 0; i < currentFloor->numPolygons; i++) {
   1629e:	                clr.l 16(sp)
   162a2:	   /----------- bra.w 164b6 <drawFloor+0x220>
        nV = currentFloor->polygon[i].numVertices;
   162a6:	/--|----------> movea.l 1cae6 <currentFloor>,a0
   162ac:	|  |            move.l 12(a0),d1
   162b0:	|  |            move.l 16(sp),d0
   162b4:	|  |            lsl.l #3,d0
   162b6:	|  |            movea.l d1,a0
   162b8:	|  |            adda.l d0,a0
   162ba:	|  |            move.l (a0),8(sp)
        if (nV > 1) {
   162be:	|  |            moveq #1,d0
   162c0:	|  |            cmp.l 8(sp),d0
   162c4:	|  |  /-------- bge.w 164b2 <drawFloor+0x21c>
            for (j = 1; j < nV; j++) {
   162c8:	|  |  |         moveq #1,d0
   162ca:	|  |  |         move.l d0,12(sp)
   162ce:	|  |  |     /-- bra.w 163c8 <drawFloor+0x132>
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].y,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].x,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].y);
   162d2:	|  |  |  /--|-> movea.l 1cae6 <currentFloor>,a0
   162d8:	|  |  |  |  |   move.l 4(a0),d1
   162dc:	|  |  |  |  |   movea.l 1cae6 <currentFloor>,a0
   162e2:	|  |  |  |  |   movea.l 12(a0),a0
   162e6:	|  |  |  |  |   move.l 16(sp),d0
   162ea:	|  |  |  |  |   lsl.l #3,d0
   162ec:	|  |  |  |  |   adda.l d0,a0
   162ee:	|  |  |  |  |   movea.l 4(a0),a0
   162f2:	|  |  |  |  |   move.l 12(sp),d0
   162f6:	|  |  |  |  |   add.l d0,d0
   162f8:	|  |  |  |  |   add.l d0,d0
   162fa:	|  |  |  |  |   adda.l d0,a0
   162fc:	|  |  |  |  |   move.l (a0),d0
   162fe:	|  |  |  |  |   lsl.l #3,d0
   16300:	|  |  |  |  |   movea.l d1,a0
   16302:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   16304:	|  |  |  |  |   move.l 4(a0),d2
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].x,
   16308:	|  |  |  |  |   movea.l 1cae6 <currentFloor>,a0
   1630e:	|  |  |  |  |   move.l 4(a0),d1
   16312:	|  |  |  |  |   movea.l 1cae6 <currentFloor>,a0
   16318:	|  |  |  |  |   movea.l 12(a0),a0
   1631c:	|  |  |  |  |   move.l 16(sp),d0
   16320:	|  |  |  |  |   lsl.l #3,d0
   16322:	|  |  |  |  |   adda.l d0,a0
   16324:	|  |  |  |  |   movea.l 4(a0),a0
   16328:	|  |  |  |  |   move.l 12(sp),d0
   1632c:	|  |  |  |  |   add.l d0,d0
   1632e:	|  |  |  |  |   add.l d0,d0
   16330:	|  |  |  |  |   adda.l d0,a0
   16332:	|  |  |  |  |   move.l (a0),d0
   16334:	|  |  |  |  |   lsl.l #3,d0
   16336:	|  |  |  |  |   movea.l d1,a0
   16338:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   1633a:	|  |  |  |  |   movea.l (a0),a1
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].y,
   1633c:	|  |  |  |  |   movea.l 1cae6 <currentFloor>,a0
   16342:	|  |  |  |  |   move.l 4(a0),d1
   16346:	|  |  |  |  |   movea.l 1cae6 <currentFloor>,a0
   1634c:	|  |  |  |  |   movea.l 12(a0),a0
   16350:	|  |  |  |  |   move.l 16(sp),d0
   16354:	|  |  |  |  |   lsl.l #3,d0
   16356:	|  |  |  |  |   adda.l d0,a0
   16358:	|  |  |  |  |   movea.l 4(a0),a0
   1635c:	|  |  |  |  |   move.l 12(sp),d0
   16360:	|  |  |  |  |   addi.l #1073741823,d0
   16366:	|  |  |  |  |   add.l d0,d0
   16368:	|  |  |  |  |   add.l d0,d0
   1636a:	|  |  |  |  |   adda.l d0,a0
   1636c:	|  |  |  |  |   move.l (a0),d0
   1636e:	|  |  |  |  |   lsl.l #3,d0
   16370:	|  |  |  |  |   movea.l d1,a0
   16372:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   16374:	|  |  |  |  |   move.l 4(a0),d1
   16378:	|  |  |  |  |   movea.l 1cae6 <currentFloor>,a0
   1637e:	|  |  |  |  |   move.l 4(a0),d3
   16382:	|  |  |  |  |   movea.l 1cae6 <currentFloor>,a0
   16388:	|  |  |  |  |   movea.l 12(a0),a0
   1638c:	|  |  |  |  |   move.l 16(sp),d0
   16390:	|  |  |  |  |   lsl.l #3,d0
   16392:	|  |  |  |  |   adda.l d0,a0
   16394:	|  |  |  |  |   movea.l 4(a0),a0
   16398:	|  |  |  |  |   move.l 12(sp),d0
   1639c:	|  |  |  |  |   addi.l #1073741823,d0
   163a2:	|  |  |  |  |   add.l d0,d0
   163a4:	|  |  |  |  |   add.l d0,d0
   163a6:	|  |  |  |  |   adda.l d0,a0
   163a8:	|  |  |  |  |   move.l (a0),d0
   163aa:	|  |  |  |  |   lsl.l #3,d0
   163ac:	|  |  |  |  |   movea.l d3,a0
   163ae:	|  |  |  |  |   adda.l d0,a0
   163b0:	|  |  |  |  |   move.l (a0),d0
   163b2:	|  |  |  |  |   move.l d2,-(sp)
   163b4:	|  |  |  |  |   move.l a1,-(sp)
   163b6:	|  |  |  |  |   move.l d1,-(sp)
   163b8:	|  |  |  |  |   move.l d0,-(sp)
   163ba:	|  |  |  |  |   jsr 3e8a <drawLine>
   163c0:	|  |  |  |  |   lea 16(sp),sp
            for (j = 1; j < nV; j++) {
   163c4:	|  |  |  |  |   addq.l #1,12(sp)
   163c8:	|  |  |  |  \-> move.l 12(sp),d0
   163cc:	|  |  |  |      cmp.l 8(sp),d0
   163d0:	|  |  |  \----- blt.w 162d2 <drawFloor+0x3c>
            }
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].y,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].x,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].y);
   163d4:	|  |  |         movea.l 1cae6 <currentFloor>,a0
   163da:	|  |  |         move.l 4(a0),d1
   163de:	|  |  |         movea.l 1cae6 <currentFloor>,a0
   163e4:	|  |  |         movea.l 12(a0),a0
   163e8:	|  |  |         move.l 16(sp),d0
   163ec:	|  |  |         lsl.l #3,d0
   163ee:	|  |  |         adda.l d0,a0
   163f0:	|  |  |         movea.l 4(a0),a0
   163f4:	|  |  |         move.l 8(sp),d0
   163f8:	|  |  |         addi.l #1073741823,d0
   163fe:	|  |  |         add.l d0,d0
   16400:	|  |  |         add.l d0,d0
   16402:	|  |  |         adda.l d0,a0
   16404:	|  |  |         move.l (a0),d0
   16406:	|  |  |         lsl.l #3,d0
   16408:	|  |  |         movea.l d1,a0
   1640a:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   1640c:	|  |  |         move.l 4(a0),d2
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].x,
   16410:	|  |  |         movea.l 1cae6 <currentFloor>,a0
   16416:	|  |  |         move.l 4(a0),d1
   1641a:	|  |  |         movea.l 1cae6 <currentFloor>,a0
   16420:	|  |  |         movea.l 12(a0),a0
   16424:	|  |  |         move.l 16(sp),d0
   16428:	|  |  |         lsl.l #3,d0
   1642a:	|  |  |         adda.l d0,a0
   1642c:	|  |  |         movea.l 4(a0),a0
   16430:	|  |  |         move.l 8(sp),d0
   16434:	|  |  |         addi.l #1073741823,d0
   1643a:	|  |  |         add.l d0,d0
   1643c:	|  |  |         add.l d0,d0
   1643e:	|  |  |         adda.l d0,a0
   16440:	|  |  |         move.l (a0),d0
   16442:	|  |  |         lsl.l #3,d0
   16444:	|  |  |         movea.l d1,a0
   16446:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   16448:	|  |  |         movea.l (a0),a1
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].y,
   1644a:	|  |  |         movea.l 1cae6 <currentFloor>,a0
   16450:	|  |  |         move.l 4(a0),d1
   16454:	|  |  |         movea.l 1cae6 <currentFloor>,a0
   1645a:	|  |  |         movea.l 12(a0),a0
   1645e:	|  |  |         move.l 16(sp),d0
   16462:	|  |  |         lsl.l #3,d0
   16464:	|  |  |         adda.l d0,a0
   16466:	|  |  |         movea.l 4(a0),a0
   1646a:	|  |  |         move.l (a0),d0
   1646c:	|  |  |         lsl.l #3,d0
   1646e:	|  |  |         movea.l d1,a0
   16470:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   16472:	|  |  |         move.l 4(a0),d1
   16476:	|  |  |         movea.l 1cae6 <currentFloor>,a0
   1647c:	|  |  |         move.l 4(a0),d3
   16480:	|  |  |         movea.l 1cae6 <currentFloor>,a0
   16486:	|  |  |         movea.l 12(a0),a0
   1648a:	|  |  |         move.l 16(sp),d0
   1648e:	|  |  |         lsl.l #3,d0
   16490:	|  |  |         adda.l d0,a0
   16492:	|  |  |         movea.l 4(a0),a0
   16496:	|  |  |         move.l (a0),d0
   16498:	|  |  |         lsl.l #3,d0
   1649a:	|  |  |         movea.l d3,a0
   1649c:	|  |  |         adda.l d0,a0
   1649e:	|  |  |         move.l (a0),d0
   164a0:	|  |  |         move.l d2,-(sp)
   164a2:	|  |  |         move.l a1,-(sp)
   164a4:	|  |  |         move.l d1,-(sp)
   164a6:	|  |  |         move.l d0,-(sp)
   164a8:	|  |  |         jsr 3e8a <drawLine>
   164ae:	|  |  |         lea 16(sp),sp
    for (i = 0; i < currentFloor->numPolygons; i++) {
   164b2:	|  |  \-------> addq.l #1,16(sp)
   164b6:	|  \----------> movea.l 1cae6 <currentFloor>,a0
   164bc:	|               move.l 8(a0),d0
   164c0:	|               cmp.l 16(sp),d0
   164c4:	\-------------- bgt.w 162a6 <drawFloor+0x10>
        }
    }
}
   164c8:	                nop
   164ca:	                nop
   164cc:	                move.l (sp)+,d2
   164ce:	                move.l (sp)+,d3
   164d0:	                lea 12(sp),sp
   164d4:	                rts

000164d6 <getMatchingCorners>:

BOOL getMatchingCorners(struct floorPolygon *a, struct floorPolygon *b, int *cornerA, int *cornerB) {
   164d6:	                      lea -12(sp),sp
    int sharedVertices = 0;
   164da:	                      clr.l 8(sp)
    int i, j;

    for (i = 0; i < a->numVertices; i++) {
   164de:	                      clr.l 4(sp)
   164e2:	   /----------------- bra.w 16574 <getMatchingCorners+0x9e>
        for (j = 0; j < b->numVertices; j++) {
   164e6:	/--|----------------> clr.l (sp)
   164e8:	|  |     /----------- bra.s 16564 <getMatchingCorners+0x8e>
            if (a->vertexID[i] == b->vertexID[j]) {
   164ea:	|  |  /--|----------> movea.l 16(sp),a0
   164ee:	|  |  |  |            move.l 4(a0),d1
   164f2:	|  |  |  |            move.l 4(sp),d0
   164f6:	|  |  |  |            add.l d0,d0
   164f8:	|  |  |  |            add.l d0,d0
   164fa:	|  |  |  |            movea.l d1,a0
   164fc:	|  |  |  |            adda.l d0,a0
   164fe:	|  |  |  |            move.l (a0),d1
   16500:	|  |  |  |            movea.l 20(sp),a0
   16504:	|  |  |  |            movea.l 4(a0),a0
   16508:	|  |  |  |            move.l (sp),d0
   1650a:	|  |  |  |            add.l d0,d0
   1650c:	|  |  |  |            add.l d0,d0
   1650e:	|  |  |  |            adda.l d0,a0
   16510:	|  |  |  |            move.l (a0),d0
   16512:	|  |  |  |            cmp.l d1,d0
   16514:	|  |  |  |  /-------- bne.s 16562 <getMatchingCorners+0x8c>
                if (sharedVertices++) {
   16516:	|  |  |  |  |         move.l 8(sp),d0
   1651a:	|  |  |  |  |         move.l d0,d1
   1651c:	|  |  |  |  |         addq.l #1,d1
   1651e:	|  |  |  |  |         move.l d1,8(sp)
   16522:	|  |  |  |  |         tst.l d0
   16524:	|  |  |  |  |     /-- beq.s 16546 <getMatchingCorners+0x70>
                    *cornerB = a->vertexID[i];
   16526:	|  |  |  |  |     |   movea.l 16(sp),a0
   1652a:	|  |  |  |  |     |   move.l 4(a0),d1
   1652e:	|  |  |  |  |     |   move.l 4(sp),d0
   16532:	|  |  |  |  |     |   add.l d0,d0
   16534:	|  |  |  |  |     |   add.l d0,d0
   16536:	|  |  |  |  |     |   movea.l d1,a0
   16538:	|  |  |  |  |     |   adda.l d0,a0
   1653a:	|  |  |  |  |     |   move.l (a0),d0
   1653c:	|  |  |  |  |     |   movea.l 28(sp),a0
   16540:	|  |  |  |  |     |   move.l d0,(a0)
                    return TRUE;
   16542:	|  |  |  |  |     |   moveq #1,d0
   16544:	|  |  |  |  |  /--|-- bra.s 16584 <getMatchingCorners+0xae>
                } else {
                    *cornerA = a->vertexID[i];
   16546:	|  |  |  |  |  |  \-> movea.l 16(sp),a0
   1654a:	|  |  |  |  |  |      move.l 4(a0),d1
   1654e:	|  |  |  |  |  |      move.l 4(sp),d0
   16552:	|  |  |  |  |  |      add.l d0,d0
   16554:	|  |  |  |  |  |      add.l d0,d0
   16556:	|  |  |  |  |  |      movea.l d1,a0
   16558:	|  |  |  |  |  |      adda.l d0,a0
   1655a:	|  |  |  |  |  |      move.l (a0),d0
   1655c:	|  |  |  |  |  |      movea.l 24(sp),a0
   16560:	|  |  |  |  |  |      move.l d0,(a0)
        for (j = 0; j < b->numVertices; j++) {
   16562:	|  |  |  |  \--|----> addq.l #1,(sp)
   16564:	|  |  |  \-----|----> movea.l 20(sp),a0
   16568:	|  |  |        |      move.l (a0),d0
   1656a:	|  |  |        |      cmp.l (sp),d0
   1656c:	|  |  \--------|----- bgt.w 164ea <getMatchingCorners+0x14>
    for (i = 0; i < a->numVertices; i++) {
   16570:	|  |           |      addq.l #1,4(sp)
   16574:	|  \-----------|----> movea.l 16(sp),a0
   16578:	|              |      move.l (a0),d0
   1657a:	|              |      cmp.l 4(sp),d0
   1657e:	\--------------|----- bgt.w 164e6 <getMatchingCorners+0x10>
                }
            }
        }
    }

    return FALSE;
   16582:	               |      clr.w d0
}
   16584:	               \----> lea 12(sp),sp
   16588:	                      rts

0001658a <noFloor>:



void noFloor () {
	currentFloor -> numPolygons = 0;
   1658a:	movea.l 1cae6 <currentFloor>,a0
   16590:	clr.l 8(a0)
	currentFloor -> polygon = NULL;
   16594:	movea.l 1cae6 <currentFloor>,a0
   1659a:	clr.l 12(a0)
	currentFloor -> vertex = NULL;
   1659e:	movea.l 1cae6 <currentFloor>,a0
   165a4:	clr.l 4(a0)
	currentFloor -> matrix = NULL;
   165a8:	movea.l 1cae6 <currentFloor>,a0
   165ae:	clr.l 16(a0)
}
   165b2:	nop
   165b4:	rts

000165b6 <inFloor>:

int inFloor (int x, int y) {
   165b6:	          subq.l #8,sp
	int i, r = -1;
   165b8:	          moveq #-1,d0
   165ba:	          move.l d0,(sp)

	for (i = 0; i < currentFloor -> numPolygons; i ++)
   165bc:	          clr.l 4(sp)
   165c0:	   /----- bra.s 165f4 <inFloor+0x3e>
		if (pointInFloorPolygon (&currentFloor -> polygon[i], x, y))
   165c2:	/--|----> movea.l 1cae6 <currentFloor>,a0
   165c8:	|  |      move.l 12(a0),d1
   165cc:	|  |      move.l 4(sp),d0
   165d0:	|  |      lsl.l #3,d0
   165d2:	|  |      add.l d1,d0
   165d4:	|  |      move.l 16(sp),-(sp)
   165d8:	|  |      move.l 16(sp),-(sp)
   165dc:	|  |      move.l d0,-(sp)
   165de:	|  |      jsr 167c0 <pointInFloorPolygon>
   165e4:	|  |      lea 12(sp),sp
   165e8:	|  |      tst.w d0
   165ea:	|  |  /-- beq.s 165f0 <inFloor+0x3a>
			r = i;
   165ec:	|  |  |   move.l 4(sp),(sp)
	for (i = 0; i < currentFloor -> numPolygons; i ++)
   165f0:	|  |  \-> addq.l #1,4(sp)
   165f4:	|  \----> movea.l 1cae6 <currentFloor>,a0
   165fa:	|         move.l 8(a0),d0
   165fe:	|         cmp.l 4(sp),d0
   16602:	\-------- bgt.s 165c2 <inFloor+0xc>

	return r;
   16604:	          move.l (sp),d0
}
   16606:	          addq.l #8,sp
   16608:	          rts

0001660a <initFloor>:

BOOL initFloor () {
   1660a:	       lea -12(sp),sp
   1660e:	       move.l a6,-(sp)
	currentFloor = AllocVec(sizeof(struct flor), MEMF_ANY);
   16610:	       moveq #20,d0
   16612:	       move.l d0,12(sp)
   16616:	       clr.l 8(sp)
   1661a:	       move.l 1c9ca <SysBase>,d0
   16620:	       movea.l d0,a6
   16622:	       move.l 12(sp),d0
   16626:	       move.l 8(sp),d1
   1662a:	       jsr -684(a6)
   1662e:	       move.l d0,4(sp)
   16632:	       move.l 4(sp),d0
   16636:	       move.l d0,1cae6 <currentFloor>

    if(currentFloor == 0) {
   1663c:	       move.l 1cae6 <currentFloor>,d0
   16642:	/----- bne.s 16656 <initFloor+0x4c>
        KPrintF("initFloor: Could not initialize Mem");
   16644:	|      pea 1a117 <newfatal.c.307beca7+0x12f>
   1664a:	|      jsr 17254 <KPrintF>
   16650:	|      addq.l #4,sp
        return FALSE;
   16652:	|      clr.w d0
   16654:	|  /-- bra.s 1665e <initFloor+0x54>
    }

	noFloor ();
   16656:	\--|-> jsr 1658a <noFloor>
	return TRUE;
   1665c:	   |   moveq #1,d0
}
   1665e:	   \-> movea.l (sp)+,a6
   16660:	       lea 12(sp),sp
   16664:	       rts

00016666 <killFloor>:

void killFloor () {
   16666:	       lea -24(sp),sp
   1666a:	       move.l a6,-(sp)
	for (int i = 0; i < currentFloor -> numPolygons; i ++) {
   1666c:	       clr.l 24(sp)
   16670:	   /-- bra.s 166ca <killFloor+0x64>
		FreeVec(currentFloor -> polygon[i].vertexID);
   16672:	/--|-> movea.l 1cae6 <currentFloor>,a0
   16678:	|  |   move.l 12(a0),d1
   1667c:	|  |   move.l 24(sp),d0
   16680:	|  |   lsl.l #3,d0
   16682:	|  |   movea.l d1,a0
   16684:	|  |   adda.l d0,a0
   16686:	|  |   move.l 4(a0),8(sp)
   1668c:	|  |   move.l 1c9ca <SysBase>,d0
   16692:	|  |   movea.l d0,a6
   16694:	|  |   movea.l 8(sp),a1
   16698:	|  |   jsr -690(a6)
		FreeVec(currentFloor -> matrix[i]);
   1669c:	|  |   movea.l 1cae6 <currentFloor>,a0
   166a2:	|  |   move.l 16(a0),d1
   166a6:	|  |   move.l 24(sp),d0
   166aa:	|  |   add.l d0,d0
   166ac:	|  |   add.l d0,d0
   166ae:	|  |   movea.l d1,a0
   166b0:	|  |   adda.l d0,a0
   166b2:	|  |   move.l (a0),4(sp)
   166b6:	|  |   move.l 1c9ca <SysBase>,d0
   166bc:	|  |   movea.l d0,a6
   166be:	|  |   movea.l 4(sp),a1
   166c2:	|  |   jsr -690(a6)
	for (int i = 0; i < currentFloor -> numPolygons; i ++) {
   166c6:	|  |   addq.l #1,24(sp)
   166ca:	|  \-> movea.l 1cae6 <currentFloor>,a0
   166d0:	|      move.l 8(a0),d0
   166d4:	|      cmp.l 24(sp),d0
   166d8:	\----- bgt.s 16672 <killFloor+0xc>
	}
	FreeVec(currentFloor -> polygon);
   166da:	       movea.l 1cae6 <currentFloor>,a0
   166e0:	       move.l 12(a0),20(sp)
   166e6:	       move.l 1c9ca <SysBase>,d0
   166ec:	       movea.l d0,a6
   166ee:	       movea.l 20(sp),a1
   166f2:	       jsr -690(a6)
	currentFloor -> polygon = NULL;
   166f6:	       movea.l 1cae6 <currentFloor>,a0
   166fc:	       clr.l 12(a0)
	FreeVec(currentFloor -> vertex);
   16700:	       movea.l 1cae6 <currentFloor>,a0
   16706:	       move.l 4(a0),16(sp)
   1670c:	       move.l 1c9ca <SysBase>,d0
   16712:	       movea.l d0,a6
   16714:	       movea.l 16(sp),a1
   16718:	       jsr -690(a6)
	currentFloor -> vertex = NULL;
   1671c:	       movea.l 1cae6 <currentFloor>,a0
   16722:	       clr.l 4(a0)
	FreeVec(currentFloor -> matrix);
   16726:	       movea.l 1cae6 <currentFloor>,a0
   1672c:	       move.l 16(a0),12(sp)
   16732:	       move.l 1c9ca <SysBase>,d0
   16738:	       movea.l d0,a6
   1673a:	       movea.l 12(sp),a1
   1673e:	       jsr -690(a6)
	currentFloor -> matrix = NULL;
   16742:	       movea.l 1cae6 <currentFloor>,a0
   16748:	       clr.l 16(a0)
}
   1674c:	       nop
   1674e:	       movea.l (sp)+,a6
   16750:	       lea 24(sp),sp
   16754:	       rts

00016756 <polysShareSide>:

BOOL polysShareSide (struct floorPolygon a, struct floorPolygon b) {
   16756:	                   lea -12(sp),sp
	int sharedVertices = 0;
   1675a:	                   clr.l 8(sp)
	int i, j;

	for (i = 0; i < a.numVertices; i ++) {
   1675e:	                   clr.l 4(sp)
   16762:	   /-------------- bra.s 167ae <polysShareSide+0x58>
		for (j = 0; j < b.numVertices; j ++) {
   16764:	/--|-------------> clr.l (sp)
   16766:	|  |     /-------- bra.s 167a2 <polysShareSide+0x4c>
			if (a.vertexID[i] == b.vertexID[j]) {
   16768:	|  |  /--|-------> move.l 20(sp),d1
   1676c:	|  |  |  |         move.l 4(sp),d0
   16770:	|  |  |  |         add.l d0,d0
   16772:	|  |  |  |         add.l d0,d0
   16774:	|  |  |  |         movea.l d1,a0
   16776:	|  |  |  |         adda.l d0,a0
   16778:	|  |  |  |         move.l (a0),d1
   1677a:	|  |  |  |         movea.l 28(sp),a0
   1677e:	|  |  |  |         move.l (sp),d0
   16780:	|  |  |  |         add.l d0,d0
   16782:	|  |  |  |         add.l d0,d0
   16784:	|  |  |  |         adda.l d0,a0
   16786:	|  |  |  |         move.l (a0),d0
   16788:	|  |  |  |         cmp.l d1,d0
   1678a:	|  |  |  |     /-- bne.s 167a0 <polysShareSide+0x4a>
				if (sharedVertices ++) return TRUE;
   1678c:	|  |  |  |     |   move.l 8(sp),d0
   16790:	|  |  |  |     |   move.l d0,d1
   16792:	|  |  |  |     |   addq.l #1,d1
   16794:	|  |  |  |     |   move.l d1,8(sp)
   16798:	|  |  |  |     |   tst.l d0
   1679a:	|  |  |  |     +-- beq.s 167a0 <polysShareSide+0x4a>
   1679c:	|  |  |  |     |   moveq #1,d0
   1679e:	|  |  |  |  /--|-- bra.s 167ba <polysShareSide+0x64>
		for (j = 0; j < b.numVertices; j ++) {
   167a0:	|  |  |  |  |  \-> addq.l #1,(sp)
   167a2:	|  |  |  \--|----> move.l 24(sp),d0
   167a6:	|  |  |     |      cmp.l (sp),d0
   167a8:	|  |  \-----|----- bgt.s 16768 <polysShareSide+0x12>
	for (i = 0; i < a.numVertices; i ++) {
   167aa:	|  |        |      addq.l #1,4(sp)
   167ae:	|  \--------|----> move.l 16(sp),d0
   167b2:	|           |      cmp.l 4(sp),d0
   167b6:	\-----------|----- bgt.s 16764 <polysShareSide+0xe>
			}
		}
	}

	return FALSE;
   167b8:	            |      clr.w d0
}
   167ba:	            \----> lea 12(sp),sp
   167be:	                   rts

000167c0 <pointInFloorPolygon>:

BOOL pointInFloorPolygon (struct floorPolygon * floorPoly, int x, int y) {
   167c0:	             lea -28(sp),sp
   167c4:	             move.l d3,-(sp)
   167c6:	             move.l d2,-(sp)
	int i = 0, j, c = 0;
   167c8:	             clr.l 32(sp)
   167cc:	             clr.l 24(sp)
	float xp_i, yp_i;
	float xp_j, yp_j;

	for (j = floorPoly->numVertices - 1; i < floorPoly->numVertices; j = i++) {
   167d0:	             movea.l 40(sp),a0
   167d4:	             move.l (a0),d0
   167d6:	             move.l d0,d1
   167d8:	             subq.l #1,d1
   167da:	             move.l d1,28(sp)
   167de:	   /-------- bra.w 169d8 <pointInFloorPolygon+0x218>

		xp_i = currentFloor->vertex[floorPoly->vertexID[i]].x;
   167e2:	/--|-------> movea.l 1cae6 <currentFloor>,a0
   167e8:	|  |         move.l 4(a0),d1
   167ec:	|  |         movea.l 40(sp),a0
   167f0:	|  |         movea.l 4(a0),a0
   167f4:	|  |         move.l 32(sp),d0
   167f8:	|  |         add.l d0,d0
   167fa:	|  |         add.l d0,d0
   167fc:	|  |         adda.l d0,a0
   167fe:	|  |         move.l (a0),d0
   16800:	|  |         lsl.l #3,d0
   16802:	|  |         movea.l d1,a0
   16804:	|  |         adda.l d0,a0
   16806:	|  |         move.l (a0),d0
   16808:	|  |         move.l d0,-(sp)
   1680a:	|  |         jsr 17686 <__floatsisf>
   16810:	|  |         addq.l #4,sp
   16812:	|  |         move.l d0,20(sp)
		yp_i = currentFloor->vertex[floorPoly->vertexID[i]].y;
   16816:	|  |         movea.l 1cae6 <currentFloor>,a0
   1681c:	|  |         move.l 4(a0),d1
   16820:	|  |         movea.l 40(sp),a0
   16824:	|  |         movea.l 4(a0),a0
   16828:	|  |         move.l 32(sp),d0
   1682c:	|  |         add.l d0,d0
   1682e:	|  |         add.l d0,d0
   16830:	|  |         adda.l d0,a0
   16832:	|  |         move.l (a0),d0
   16834:	|  |         lsl.l #3,d0
   16836:	|  |         movea.l d1,a0
   16838:	|  |         adda.l d0,a0
   1683a:	|  |         move.l 4(a0),d0
   1683e:	|  |         move.l d0,-(sp)
   16840:	|  |         jsr 17686 <__floatsisf>
   16846:	|  |         addq.l #4,sp
   16848:	|  |         move.l d0,16(sp)
		xp_j = currentFloor->vertex[floorPoly->vertexID[j]].x;
   1684c:	|  |         movea.l 1cae6 <currentFloor>,a0
   16852:	|  |         move.l 4(a0),d1
   16856:	|  |         movea.l 40(sp),a0
   1685a:	|  |         movea.l 4(a0),a0
   1685e:	|  |         move.l 28(sp),d0
   16862:	|  |         add.l d0,d0
   16864:	|  |         add.l d0,d0
   16866:	|  |         adda.l d0,a0
   16868:	|  |         move.l (a0),d0
   1686a:	|  |         lsl.l #3,d0
   1686c:	|  |         movea.l d1,a0
   1686e:	|  |         adda.l d0,a0
   16870:	|  |         move.l (a0),d0
   16872:	|  |         move.l d0,-(sp)
   16874:	|  |         jsr 17686 <__floatsisf>
   1687a:	|  |         addq.l #4,sp
   1687c:	|  |         move.l d0,12(sp)
		yp_j = currentFloor->vertex[floorPoly->vertexID[j]].y;
   16880:	|  |         movea.l 1cae6 <currentFloor>,a0
   16886:	|  |         move.l 4(a0),d1
   1688a:	|  |         movea.l 40(sp),a0
   1688e:	|  |         movea.l 4(a0),a0
   16892:	|  |         move.l 28(sp),d0
   16896:	|  |         add.l d0,d0
   16898:	|  |         add.l d0,d0
   1689a:	|  |         adda.l d0,a0
   1689c:	|  |         move.l (a0),d0
   1689e:	|  |         lsl.l #3,d0
   168a0:	|  |         movea.l d1,a0
   168a2:	|  |         adda.l d0,a0
   168a4:	|  |         move.l 4(a0),d0
   168a8:	|  |         move.l d0,-(sp)
   168aa:	|  |         jsr 17686 <__floatsisf>
   168b0:	|  |         addq.l #4,sp
   168b2:	|  |         move.l d0,8(sp)

		if ((((yp_i <= y) && (y < yp_j)) || ((yp_j <= y) && (y < yp_i))) &&
   168b6:	|  |         move.l 48(sp),-(sp)
   168ba:	|  |         jsr 17686 <__floatsisf>
   168c0:	|  |         addq.l #4,sp
   168c2:	|  |         move.l d0,-(sp)
   168c4:	|  |         move.l 20(sp),-(sp)
   168c8:	|  |         jsr 17828 <__lesf2>
   168ce:	|  |         addq.l #8,sp
   168d0:	|  |         tst.l d0
   168d2:	|  |     /-- bgt.s 168f2 <pointInFloorPolygon+0x132>
   168d4:	|  |     |   move.l 48(sp),-(sp)
   168d8:	|  |     |   jsr 17686 <__floatsisf>
   168de:	|  |     |   addq.l #4,sp
   168e0:	|  |     |   move.l d0,-(sp)
   168e2:	|  |     |   move.l 12(sp),-(sp)
   168e6:	|  |     |   jsr 177f2 <__gtsf2>
   168ec:	|  |     |   addq.l #8,sp
   168ee:	|  |     |   tst.l d0
   168f0:	|  |  /--|-- bgt.s 16932 <pointInFloorPolygon+0x172>
   168f2:	|  |  |  \-> move.l 48(sp),-(sp)
   168f6:	|  |  |      jsr 17686 <__floatsisf>
   168fc:	|  |  |      addq.l #4,sp
   168fe:	|  |  |      move.l d0,-(sp)
   16900:	|  |  |      move.l 12(sp),-(sp)
   16904:	|  |  |      jsr 17828 <__lesf2>
   1690a:	|  |  |      addq.l #8,sp
   1690c:	|  |  |      tst.l d0
   1690e:	|  |  |  /-- bgt.w 169c8 <pointInFloorPolygon+0x208>
   16912:	|  |  |  |   move.l 48(sp),-(sp)
   16916:	|  |  |  |   jsr 17686 <__floatsisf>
   1691c:	|  |  |  |   addq.l #4,sp
   1691e:	|  |  |  |   move.l d0,-(sp)
   16920:	|  |  |  |   move.l 20(sp),-(sp)
   16924:	|  |  |  |   jsr 177f2 <__gtsf2>
   1692a:	|  |  |  |   addq.l #8,sp
   1692c:	|  |  |  |   tst.l d0
   1692e:	|  |  |  +-- ble.w 169c8 <pointInFloorPolygon+0x208>
			(x < (xp_j - xp_i) * (y - yp_i) / (yp_j - yp_i) + xp_i)) {
   16932:	|  |  \--|-> move.l 44(sp),-(sp)
   16936:	|  |     |   jsr 17686 <__floatsisf>
   1693c:	|  |     |   addq.l #4,sp
   1693e:	|  |     |   move.l d0,d3
   16940:	|  |     |   move.l 20(sp),-(sp)
   16944:	|  |     |   move.l 16(sp),-(sp)
   16948:	|  |     |   jsr 1797a <__subsf3>
   1694e:	|  |     |   addq.l #8,sp
   16950:	|  |     |   move.l d0,d2
   16952:	|  |     |   move.l 48(sp),-(sp)
   16956:	|  |     |   jsr 17686 <__floatsisf>
   1695c:	|  |     |   addq.l #4,sp
   1695e:	|  |     |   move.l 16(sp),-(sp)
   16962:	|  |     |   move.l d0,-(sp)
   16964:	|  |     |   jsr 1797a <__subsf3>
   1696a:	|  |     |   addq.l #8,sp
   1696c:	|  |     |   move.l d0,-(sp)
   1696e:	|  |     |   move.l d2,-(sp)
   16970:	|  |     |   jsr 17738 <__mulsf3>
   16976:	|  |     |   addq.l #8,sp
   16978:	|  |     |   move.l d0,d2
   1697a:	|  |     |   move.l 16(sp),-(sp)
   1697e:	|  |     |   move.l 12(sp),-(sp)
   16982:	|  |     |   jsr 1797a <__subsf3>
   16988:	|  |     |   addq.l #8,sp
   1698a:	|  |     |   move.l d0,-(sp)
   1698c:	|  |     |   move.l d2,-(sp)
   1698e:	|  |     |   jsr 1753c <__divsf3>
   16994:	|  |     |   addq.l #8,sp
   16996:	|  |     |   move.l 20(sp),-(sp)
   1699a:	|  |     |   move.l d0,-(sp)
   1699c:	|  |     |   jsr 17442 <__addsf3>
   169a2:	|  |     |   addq.l #8,sp
		if ((((yp_i <= y) && (y < yp_j)) || ((yp_j <= y) && (y < yp_i))) &&
   169a4:	|  |     |   move.l d0,-(sp)
   169a6:	|  |     |   move.l d3,-(sp)
   169a8:	|  |     |   jsr 178ac <__ltsf2>
   169ae:	|  |     |   addq.l #8,sp
   169b0:	|  |     |   tst.l d0
   169b2:	|  |     +-- bge.s 169c8 <pointInFloorPolygon+0x208>

			c = !c;
   169b4:	|  |     |   tst.l 24(sp)
   169b8:	|  |     |   seq d0
   169ba:	|  |     |   neg.b d0
   169bc:	|  |     |   move.b d0,d0
   169be:	|  |     |   andi.l #255,d0
   169c4:	|  |     |   move.l d0,24(sp)
	for (j = floorPoly->numVertices - 1; i < floorPoly->numVertices; j = i++) {
   169c8:	|  |     \-> move.l 32(sp),d0
   169cc:	|  |         move.l d0,d1
   169ce:	|  |         addq.l #1,d1
   169d0:	|  |         move.l d1,32(sp)
   169d4:	|  |         move.l d0,28(sp)
   169d8:	|  \-------> movea.l 40(sp),a0
   169dc:	|            move.l (a0),d0
   169de:	|            cmp.l 32(sp),d0
   169e2:	\----------- bgt.w 167e2 <pointInFloorPolygon+0x22>
		}
	}
	return c ? TRUE : FALSE;
   169e6:	             tst.l 24(sp)
   169ea:	             sne d0
   169ec:	             neg.b d0
   169ee:	             move.b d0,d0
   169f0:	             andi.w #255,d0
}
   169f4:	             move.l (sp)+,d2
   169f6:	             move.l (sp)+,d3
   169f8:	             lea 28(sp),sp
   169fc:	             rts

000169fe <setFloor>:

BOOL setFloor (int fileNum) {
   169fe:	                               lea -132(sp),sp
   16a02:	                               move.l a6,-(sp)
   16a04:	                               move.l a2,-(sp)
	int i, j;

	killFloor ();
   16a06:	                               jsr 16666 <killFloor>

	if (! openFileFromNum (fileNum)) return FALSE;
   16a0c:	                               move.l 144(sp),-(sp)
   16a10:	                               jsr 6d9e <openFileFromNum>
   16a16:	                               addq.l #4,sp
   16a18:	                               tst.l d0
   16a1a:	                           /-- bne.s 16a22 <setFloor+0x24>
   16a1c:	                           |   clr.w d0
   16a1e:	/--------------------------|-- bra.w 1716e <setFloor+0x770>

	// Find out how many polygons there are and reserve memory

	currentFloor -> originalNum = fileNum;
   16a22:	|                          \-> movea.l 1cae6 <currentFloor>,a0
   16a28:	|                              move.l 144(sp),(a0)
	currentFloor -> numPolygons = FGetC (bigDataFile);
   16a2c:	|                              move.l 1c9b2 <bigDataFile>,118(sp)
   16a34:	|                              move.l 1c9d2 <DOSBase>,d0
   16a3a:	|                              movea.l d0,a6
   16a3c:	|                              move.l 118(sp),d1
   16a40:	|                              jsr -306(a6)
   16a44:	|                              move.l d0,114(sp)
   16a48:	|                              move.l 114(sp),d0
   16a4c:	|                              movea.l 1cae6 <currentFloor>,a0
   16a52:	|                              move.l d0,8(a0)
	currentFloor -> polygon = AllocVec(  sizeof( struct floorPolygon) * currentFloor -> numPolygons, MEMF_ANY);
   16a56:	|                              movea.l 1cae6 <currentFloor>,a0
   16a5c:	|                              move.l 8(a0),d0
   16a60:	|                              lsl.l #3,d0
   16a62:	|                              move.l d0,110(sp)
   16a66:	|                              clr.l 106(sp)
   16a6a:	|                              move.l 1c9ca <SysBase>,d0
   16a70:	|                              movea.l d0,a6
   16a72:	|                              move.l 110(sp),d0
   16a76:	|                              move.l 106(sp),d1
   16a7a:	|                              jsr -684(a6)
   16a7e:	|                              move.l d0,102(sp)
   16a82:	|                              move.l 102(sp),d0
   16a86:	|                              movea.l 1cae6 <currentFloor>,a0
   16a8c:	|                              move.l d0,12(a0)
	if (!(currentFloor -> polygon)) {
   16a90:	|                              movea.l 1cae6 <currentFloor>,a0
   16a96:	|                              move.l 12(a0),d0
   16a9a:	|                          /-- bne.s 16ab0 <setFloor+0xb2>
		KPrintF("setFloor: Cannot allocate memory");
   16a9c:	|                          |   pea 1a13b <newfatal.c.307beca7+0x153>
   16aa2:	|                          |   jsr 17254 <KPrintF>
   16aa8:	|                          |   addq.l #4,sp
		return FALSE;
   16aaa:	|                          |   clr.w d0
   16aac:	+--------------------------|-- bra.w 1716e <setFloor+0x770>
	}

	// Read in each polygon

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16ab0:	|                          \-> clr.l 136(sp)
   16ab4:	|                    /-------- bra.w 16bcc <setFloor+0x1ce>

		// Find out how many vertex IDs there are and reserve memory

		currentFloor -> polygon[i].numVertices = FGetC (bigDataFile);
   16ab8:	|                 /--|-------> move.l 1c9b2 <bigDataFile>,26(sp)
   16ac0:	|                 |  |         move.l 1c9d2 <DOSBase>,d0
   16ac6:	|                 |  |         movea.l d0,a6
   16ac8:	|                 |  |         move.l 26(sp),d1
   16acc:	|                 |  |         jsr -306(a6)
   16ad0:	|                 |  |         move.l d0,22(sp)
   16ad4:	|                 |  |         move.l 22(sp),d1
   16ad8:	|                 |  |         movea.l 1cae6 <currentFloor>,a0
   16ade:	|                 |  |         movea.l 12(a0),a0
   16ae2:	|                 |  |         move.l 136(sp),d0
   16ae6:	|                 |  |         lsl.l #3,d0
   16ae8:	|                 |  |         adda.l d0,a0
   16aea:	|                 |  |         move.l d1,(a0)
		currentFloor -> polygon[i].vertexID = AllocVec(sizeof (int) * currentFloor -> polygon[i].numVertices, MEMF_ANY);
   16aec:	|                 |  |         movea.l 1cae6 <currentFloor>,a0
   16af2:	|                 |  |         move.l 12(a0),d1
   16af6:	|                 |  |         move.l 136(sp),d0
   16afa:	|                 |  |         lsl.l #3,d0
   16afc:	|                 |  |         movea.l d1,a0
   16afe:	|                 |  |         adda.l d0,a0
   16b00:	|                 |  |         move.l (a0),d0
   16b02:	|                 |  |         add.l d0,d0
   16b04:	|                 |  |         add.l d0,d0
   16b06:	|                 |  |         move.l d0,18(sp)
   16b0a:	|                 |  |         clr.l 14(sp)
   16b0e:	|                 |  |         move.l 1c9ca <SysBase>,d0
   16b14:	|                 |  |         movea.l d0,a6
   16b16:	|                 |  |         move.l 18(sp),d0
   16b1a:	|                 |  |         move.l 14(sp),d1
   16b1e:	|                 |  |         jsr -684(a6)
   16b22:	|                 |  |         move.l d0,10(sp)
   16b26:	|                 |  |         move.l 10(sp),d1
   16b2a:	|                 |  |         movea.l 1cae6 <currentFloor>,a0
   16b30:	|                 |  |         movea.l 12(a0),a0
   16b34:	|                 |  |         move.l 136(sp),d0
   16b38:	|                 |  |         lsl.l #3,d0
   16b3a:	|                 |  |         adda.l d0,a0
   16b3c:	|                 |  |         move.l d1,4(a0)
		if (!(currentFloor -> polygon[i].vertexID)) {
   16b40:	|                 |  |         movea.l 1cae6 <currentFloor>,a0
   16b46:	|                 |  |         move.l 12(a0),d1
   16b4a:	|                 |  |         move.l 136(sp),d0
   16b4e:	|                 |  |         lsl.l #3,d0
   16b50:	|                 |  |         movea.l d1,a0
   16b52:	|                 |  |         adda.l d0,a0
   16b54:	|                 |  |         move.l 4(a0),d0
   16b58:	|                 |  |     /-- bne.s 16b6e <setFloor+0x170>
			KPrintF("setFloor: Cannot allocate memory");
   16b5a:	|                 |  |     |   pea 1a13b <newfatal.c.307beca7+0x153>
   16b60:	|                 |  |     |   jsr 17254 <KPrintF>
   16b66:	|                 |  |     |   addq.l #4,sp
			return FALSE;
   16b68:	|                 |  |     |   clr.w d0
   16b6a:	+-----------------|--|-----|-- bra.w 1716e <setFloor+0x770>
		}

		// Read in each vertex ID

		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
   16b6e:	|                 |  |     \-> clr.l 132(sp)
   16b72:	|                 |  |     /-- bra.s 16bac <setFloor+0x1ae>
			currentFloor -> polygon[i].vertexID[j] = get2bytes (bigDataFile);
   16b74:	|                 |  |  /--|-> move.l 1c9b2 <bigDataFile>,d1
   16b7a:	|                 |  |  |  |   movea.l 1cae6 <currentFloor>,a0
   16b80:	|                 |  |  |  |   movea.l 12(a0),a0
   16b84:	|                 |  |  |  |   move.l 136(sp),d0
   16b88:	|                 |  |  |  |   lsl.l #3,d0
   16b8a:	|                 |  |  |  |   adda.l d0,a0
   16b8c:	|                 |  |  |  |   movea.l 4(a0),a0
   16b90:	|                 |  |  |  |   move.l 132(sp),d0
   16b94:	|                 |  |  |  |   add.l d0,d0
   16b96:	|                 |  |  |  |   add.l d0,d0
   16b98:	|                 |  |  |  |   lea (0,a0,d0.l),a2
   16b9c:	|                 |  |  |  |   move.l d1,-(sp)
   16b9e:	|                 |  |  |  |   jsr 6bc <get2bytes>
   16ba4:	|                 |  |  |  |   addq.l #4,sp
   16ba6:	|                 |  |  |  |   move.l d0,(a2)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
   16ba8:	|                 |  |  |  |   addq.l #1,132(sp)
   16bac:	|                 |  |  |  \-> movea.l 1cae6 <currentFloor>,a0
   16bb2:	|                 |  |  |      move.l 12(a0),d1
   16bb6:	|                 |  |  |      move.l 136(sp),d0
   16bba:	|                 |  |  |      lsl.l #3,d0
   16bbc:	|                 |  |  |      movea.l d1,a0
   16bbe:	|                 |  |  |      adda.l d0,a0
   16bc0:	|                 |  |  |      move.l (a0),d0
   16bc2:	|                 |  |  |      cmp.l 132(sp),d0
   16bc6:	|                 |  |  \----- bgt.s 16b74 <setFloor+0x176>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16bc8:	|                 |  |         addq.l #1,136(sp)
   16bcc:	|                 |  \-------> movea.l 1cae6 <currentFloor>,a0
   16bd2:	|                 |            move.l 8(a0),d0
   16bd6:	|                 |            cmp.l 136(sp),d0
   16bda:	|                 \----------- bgt.w 16ab8 <setFloor+0xba>
		}
	}

	// Find out how many vertices there are and reserve memory

	i = get2bytes (bigDataFile);
   16bde:	|                              move.l 1c9b2 <bigDataFile>,d0
   16be4:	|                              move.l d0,-(sp)
   16be6:	|                              jsr 6bc <get2bytes>
   16bec:	|                              addq.l #4,sp
   16bee:	|                              move.l d0,136(sp)
	currentFloor -> vertex = AllocVec( sizeof(struct POINT)*i,MEMF_ANY);
   16bf2:	|                              move.l 136(sp),d0
   16bf6:	|                              lsl.l #3,d0
   16bf8:	|                              move.l d0,98(sp)
   16bfc:	|                              clr.l 94(sp)
   16c00:	|                              move.l 1c9ca <SysBase>,d0
   16c06:	|                              movea.l d0,a6
   16c08:	|                              move.l 98(sp),d0
   16c0c:	|                              move.l 94(sp),d1
   16c10:	|                              jsr -684(a6)
   16c14:	|                              move.l d0,90(sp)
   16c18:	|                              move.l 90(sp),d0
   16c1c:	|                              movea.l 1cae6 <currentFloor>,a0
   16c22:	|                              move.l d0,4(a0)

	if (!(currentFloor -> vertex)) {
   16c26:	|                              movea.l 1cae6 <currentFloor>,a0
   16c2c:	|                              move.l 4(a0),d0
   16c30:	|                          /-- bne.s 16c46 <setFloor+0x248>
		KPrintF("setFloor: Cannot allocate memory");
   16c32:	|                          |   pea 1a13b <newfatal.c.307beca7+0x153>
   16c38:	|                          |   jsr 17254 <KPrintF>
   16c3e:	|                          |   addq.l #4,sp
		return FALSE;
   16c40:	|                          |   clr.w d0
   16c42:	+--------------------------|-- bra.w 1716e <setFloor+0x770>
	}

	for (j = 0; j < i; j ++) {
   16c46:	|                          \-> clr.l 132(sp)
   16c4a:	|                          /-- bra.s 16c9e <setFloor+0x2a0>
		currentFloor -> vertex[j].x = get2bytes (bigDataFile);
   16c4c:	|                       /--|-> move.l 1c9b2 <bigDataFile>,d1
   16c52:	|                       |  |   movea.l 1cae6 <currentFloor>,a0
   16c58:	|                       |  |   movea.l 4(a0),a0
   16c5c:	|                       |  |   move.l 132(sp),d0
   16c60:	|                       |  |   lsl.l #3,d0
   16c62:	|                       |  |   lea (0,a0,d0.l),a2
   16c66:	|                       |  |   move.l d1,-(sp)
   16c68:	|                       |  |   jsr 6bc <get2bytes>
   16c6e:	|                       |  |   addq.l #4,sp
   16c70:	|                       |  |   move.l d0,(a2)
		currentFloor -> vertex[j].y = get2bytes (bigDataFile);
   16c72:	|                       |  |   move.l 1c9b2 <bigDataFile>,d1
   16c78:	|                       |  |   movea.l 1cae6 <currentFloor>,a0
   16c7e:	|                       |  |   movea.l 4(a0),a0
   16c82:	|                       |  |   move.l 132(sp),d0
   16c86:	|                       |  |   lsl.l #3,d0
   16c88:	|                       |  |   lea (0,a0,d0.l),a2
   16c8c:	|                       |  |   move.l d1,-(sp)
   16c8e:	|                       |  |   jsr 6bc <get2bytes>
   16c94:	|                       |  |   addq.l #4,sp
   16c96:	|                       |  |   move.l d0,4(a2)
	for (j = 0; j < i; j ++) {
   16c9a:	|                       |  |   addq.l #1,132(sp)
   16c9e:	|                       |  \-> move.l 132(sp),d0
   16ca2:	|                       |      cmp.l 136(sp),d0
   16ca6:	|                       \----- blt.s 16c4c <setFloor+0x24e>
	}

	finishAccess ();
   16ca8:	|                              jsr 6c96 <finishAccess>

	// Now build the movement martix

	currentFloor -> matrix = AllocVec( sizeof(int) * currentFloor -> numPolygons, MEMF_ANY);
   16cae:	|                              movea.l 1cae6 <currentFloor>,a0
   16cb4:	|                              move.l 8(a0),d0
   16cb8:	|                              add.l d0,d0
   16cba:	|                              add.l d0,d0
   16cbc:	|                              move.l d0,86(sp)
   16cc0:	|                              clr.l 82(sp)
   16cc4:	|                              move.l 1c9ca <SysBase>,d0
   16cca:	|                              movea.l d0,a6
   16ccc:	|                              move.l 86(sp),d0
   16cd0:	|                              move.l 82(sp),d1
   16cd4:	|                              jsr -684(a6)
   16cd8:	|                              move.l d0,78(sp)
   16cdc:	|                              move.l 78(sp),d0
   16ce0:	|                              movea.l 1cae6 <currentFloor>,a0
   16ce6:	|                              move.l d0,16(a0)
	int * * distanceMatrix = AllocVec( sizeof(int) * currentFloor -> numPolygons, MEMF_ANY);
   16cea:	|                              movea.l 1cae6 <currentFloor>,a0
   16cf0:	|                              move.l 8(a0),d0
   16cf4:	|                              add.l d0,d0
   16cf6:	|                              add.l d0,d0
   16cf8:	|                              move.l d0,74(sp)
   16cfc:	|                              clr.l 70(sp)
   16d00:	|                              move.l 1c9ca <SysBase>,d0
   16d06:	|                              movea.l d0,a6
   16d08:	|                              move.l 74(sp),d0
   16d0c:	|                              move.l 70(sp),d1
   16d10:	|                              jsr -684(a6)
   16d14:	|                              move.l d0,66(sp)
   16d18:	|                              move.l 66(sp),d0
   16d1c:	|                              move.l d0,62(sp)


	if (!(currentFloor -> matrix)) {
   16d20:	|                              movea.l 1cae6 <currentFloor>,a0
   16d26:	|                              move.l 16(a0),d0
   16d2a:	|                          /-- bne.s 16d40 <setFloor+0x342>
		KPrintF("setFloor: Cannot allocate memory");
   16d2c:	|                          |   pea 1a13b <newfatal.c.307beca7+0x153>
   16d32:	|                          |   jsr 17254 <KPrintF>
   16d38:	|                          |   addq.l #4,sp
		return FALSE;
   16d3a:	|                          |   clr.w d0
   16d3c:	+--------------------------|-- bra.w 1716e <setFloor+0x770>
	}

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16d40:	|                          \-> clr.l 136(sp)
   16d44:	|                    /-------- bra.w 16e68 <setFloor+0x46a>
		currentFloor -> matrix[i] = AllocVec( sizeof(int) * currentFloor -> numPolygons,MEMF_ANY);
   16d48:	|                 /--|-------> movea.l 1cae6 <currentFloor>,a0
   16d4e:	|                 |  |         move.l 8(a0),d0
   16d52:	|                 |  |         add.l d0,d0
   16d54:	|                 |  |         add.l d0,d0
   16d56:	|                 |  |         move.l d0,50(sp)
   16d5a:	|                 |  |         clr.l 46(sp)
   16d5e:	|                 |  |         move.l 1c9ca <SysBase>,d0
   16d64:	|                 |  |         movea.l d0,a6
   16d66:	|                 |  |         move.l 50(sp),d0
   16d6a:	|                 |  |         move.l 46(sp),d1
   16d6e:	|                 |  |         jsr -684(a6)
   16d72:	|                 |  |         move.l d0,42(sp)
   16d76:	|                 |  |         move.l 42(sp),d0
   16d7a:	|                 |  |         movea.l 1cae6 <currentFloor>,a0
   16d80:	|                 |  |         movea.l 16(a0),a0
   16d84:	|                 |  |         move.l 136(sp),d1
   16d88:	|                 |  |         add.l d1,d1
   16d8a:	|                 |  |         add.l d1,d1
   16d8c:	|                 |  |         adda.l d1,a0
   16d8e:	|                 |  |         move.l d0,(a0)
		distanceMatrix        [i] = AllocVec( sizeof(int) * currentFloor -> numPolygons,MEMF_ANY);
   16d90:	|                 |  |         movea.l 1cae6 <currentFloor>,a0
   16d96:	|                 |  |         move.l 8(a0),d0
   16d9a:	|                 |  |         add.l d0,d0
   16d9c:	|                 |  |         add.l d0,d0
   16d9e:	|                 |  |         move.l d0,38(sp)
   16da2:	|                 |  |         clr.l 34(sp)
   16da6:	|                 |  |         move.l 1c9ca <SysBase>,d0
   16dac:	|                 |  |         movea.l d0,a6
   16dae:	|                 |  |         move.l 38(sp),d0
   16db2:	|                 |  |         move.l 34(sp),d1
   16db6:	|                 |  |         jsr -684(a6)
   16dba:	|                 |  |         move.l d0,30(sp)
   16dbe:	|                 |  |         move.l 30(sp),d1
   16dc2:	|                 |  |         move.l 136(sp),d0
   16dc6:	|                 |  |         add.l d0,d0
   16dc8:	|                 |  |         add.l d0,d0
   16dca:	|                 |  |         movea.l 62(sp),a0
   16dce:	|                 |  |         adda.l d0,a0
   16dd0:	|                 |  |         move.l d1,(a0)
		if (!(currentFloor -> matrix[i])) { 
   16dd2:	|                 |  |         movea.l 1cae6 <currentFloor>,a0
   16dd8:	|                 |  |         move.l 16(a0),d1
   16ddc:	|                 |  |         move.l 136(sp),d0
   16de0:	|                 |  |         add.l d0,d0
   16de2:	|                 |  |         add.l d0,d0
   16de4:	|                 |  |         movea.l d1,a0
   16de6:	|                 |  |         adda.l d0,a0
   16de8:	|                 |  |         move.l (a0),d0
   16dea:	|                 |  |     /-- bne.s 16e00 <setFloor+0x402>
			KPrintF("setFloor: Cannot allocate memory");
   16dec:	|                 |  |     |   pea 1a13b <newfatal.c.307beca7+0x153>
   16df2:	|                 |  |     |   jsr 17254 <KPrintF>
   16df8:	|                 |  |     |   addq.l #4,sp
			return FALSE;
   16dfa:	|                 |  |     |   clr.w d0
   16dfc:	+-----------------|--|-----|-- bra.w 1716e <setFloor+0x770>
		}
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   16e00:	|                 |  |     \-> clr.l 132(sp)
   16e04:	|                 |  |     /-- bra.s 16e54 <setFloor+0x456>
			currentFloor -> matrix[i][j] = -1;
   16e06:	|                 |  |  /--|-> movea.l 1cae6 <currentFloor>,a0
   16e0c:	|                 |  |  |  |   move.l 16(a0),d1
   16e10:	|                 |  |  |  |   move.l 136(sp),d0
   16e14:	|                 |  |  |  |   add.l d0,d0
   16e16:	|                 |  |  |  |   add.l d0,d0
   16e18:	|                 |  |  |  |   movea.l d1,a0
   16e1a:	|                 |  |  |  |   adda.l d0,a0
   16e1c:	|                 |  |  |  |   move.l (a0),d1
   16e1e:	|                 |  |  |  |   move.l 132(sp),d0
   16e22:	|                 |  |  |  |   add.l d0,d0
   16e24:	|                 |  |  |  |   add.l d0,d0
   16e26:	|                 |  |  |  |   movea.l d1,a0
   16e28:	|                 |  |  |  |   adda.l d0,a0
   16e2a:	|                 |  |  |  |   moveq #-1,d1
   16e2c:	|                 |  |  |  |   move.l d1,(a0)
			distanceMatrix        [i][j] = 10000;
   16e2e:	|                 |  |  |  |   move.l 136(sp),d0
   16e32:	|                 |  |  |  |   add.l d0,d0
   16e34:	|                 |  |  |  |   add.l d0,d0
   16e36:	|                 |  |  |  |   movea.l 62(sp),a0
   16e3a:	|                 |  |  |  |   adda.l d0,a0
   16e3c:	|                 |  |  |  |   move.l (a0),d1
   16e3e:	|                 |  |  |  |   move.l 132(sp),d0
   16e42:	|                 |  |  |  |   add.l d0,d0
   16e44:	|                 |  |  |  |   add.l d0,d0
   16e46:	|                 |  |  |  |   movea.l d1,a0
   16e48:	|                 |  |  |  |   adda.l d0,a0
   16e4a:	|                 |  |  |  |   move.l #10000,(a0)
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   16e50:	|                 |  |  |  |   addq.l #1,132(sp)
   16e54:	|                 |  |  |  \-> movea.l 1cae6 <currentFloor>,a0
   16e5a:	|                 |  |  |      move.l 8(a0),d0
   16e5e:	|                 |  |  |      cmp.l 132(sp),d0
   16e62:	|                 |  |  \----- bgt.s 16e06 <setFloor+0x408>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16e64:	|                 |  |         addq.l #1,136(sp)
   16e68:	|                 |  \-------> movea.l 1cae6 <currentFloor>,a0
   16e6e:	|                 |            move.l 8(a0),d0
   16e72:	|                 |            cmp.l 136(sp),d0
   16e76:	|                 \----------- bgt.w 16d48 <setFloor+0x34a>
		}
	}

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16e7a:	|                              clr.l 136(sp)
   16e7e:	|              /-------------- bra.w 16f84 <setFloor+0x586>
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   16e82:	|           /--|-------------> clr.l 132(sp)
   16e86:	|           |  |     /-------- bra.w 16f6e <setFloor+0x570>
			if (i != j) {
   16e8a:	|           |  |  /--|-------> move.l 136(sp),d0
   16e8e:	|           |  |  |  |         cmp.l 132(sp),d0
   16e92:	|           |  |  |  |     /-- beq.w 16f24 <setFloor+0x526>
				if (polysShareSide (currentFloor -> polygon[i], currentFloor -> polygon[j])) {
   16e96:	|           |  |  |  |     |   movea.l 1cae6 <currentFloor>,a0
   16e9c:	|           |  |  |  |     |   move.l 12(a0),d1
   16ea0:	|           |  |  |  |     |   move.l 132(sp),d0
   16ea4:	|           |  |  |  |     |   lsl.l #3,d0
   16ea6:	|           |  |  |  |     |   movea.l d1,a1
   16ea8:	|           |  |  |  |     |   adda.l d0,a1
   16eaa:	|           |  |  |  |     |   movea.l 1cae6 <currentFloor>,a0
   16eb0:	|           |  |  |  |     |   move.l 12(a0),d1
   16eb4:	|           |  |  |  |     |   move.l 136(sp),d0
   16eb8:	|           |  |  |  |     |   lsl.l #3,d0
   16eba:	|           |  |  |  |     |   movea.l d1,a0
   16ebc:	|           |  |  |  |     |   adda.l d0,a0
   16ebe:	|           |  |  |  |     |   move.l 4(a1),-(sp)
   16ec2:	|           |  |  |  |     |   move.l (a1),-(sp)
   16ec4:	|           |  |  |  |     |   move.l 4(a0),-(sp)
   16ec8:	|           |  |  |  |     |   move.l (a0),-(sp)
   16eca:	|           |  |  |  |     |   jsr 16756 <polysShareSide>
   16ed0:	|           |  |  |  |     |   lea 16(sp),sp
   16ed4:	|           |  |  |  |     |   tst.w d0
   16ed6:	|           |  |  |  |  /--|-- beq.w 16f6a <setFloor+0x56c>
					currentFloor -> matrix[i][j] = j;
   16eda:	|           |  |  |  |  |  |   movea.l 1cae6 <currentFloor>,a0
   16ee0:	|           |  |  |  |  |  |   move.l 16(a0),d1
   16ee4:	|           |  |  |  |  |  |   move.l 136(sp),d0
   16ee8:	|           |  |  |  |  |  |   add.l d0,d0
   16eea:	|           |  |  |  |  |  |   add.l d0,d0
   16eec:	|           |  |  |  |  |  |   movea.l d1,a0
   16eee:	|           |  |  |  |  |  |   adda.l d0,a0
   16ef0:	|           |  |  |  |  |  |   move.l (a0),d1
   16ef2:	|           |  |  |  |  |  |   move.l 132(sp),d0
   16ef6:	|           |  |  |  |  |  |   add.l d0,d0
   16ef8:	|           |  |  |  |  |  |   add.l d0,d0
   16efa:	|           |  |  |  |  |  |   movea.l d1,a0
   16efc:	|           |  |  |  |  |  |   adda.l d0,a0
   16efe:	|           |  |  |  |  |  |   move.l 132(sp),(a0)
					distanceMatrix        [i][j] = 1;
   16f02:	|           |  |  |  |  |  |   move.l 136(sp),d0
   16f06:	|           |  |  |  |  |  |   add.l d0,d0
   16f08:	|           |  |  |  |  |  |   add.l d0,d0
   16f0a:	|           |  |  |  |  |  |   movea.l 62(sp),a0
   16f0e:	|           |  |  |  |  |  |   adda.l d0,a0
   16f10:	|           |  |  |  |  |  |   move.l (a0),d1
   16f12:	|           |  |  |  |  |  |   move.l 132(sp),d0
   16f16:	|           |  |  |  |  |  |   add.l d0,d0
   16f18:	|           |  |  |  |  |  |   add.l d0,d0
   16f1a:	|           |  |  |  |  |  |   movea.l d1,a0
   16f1c:	|           |  |  |  |  |  |   adda.l d0,a0
   16f1e:	|           |  |  |  |  |  |   moveq #1,d1
   16f20:	|           |  |  |  |  |  |   move.l d1,(a0)
   16f22:	|           |  |  |  |  +--|-- bra.s 16f6a <setFloor+0x56c>
				}
			} else {
				currentFloor -> matrix[i][j] = -2;
   16f24:	|           |  |  |  |  |  \-> movea.l 1cae6 <currentFloor>,a0
   16f2a:	|           |  |  |  |  |      move.l 16(a0),d1
   16f2e:	|           |  |  |  |  |      move.l 136(sp),d0
   16f32:	|           |  |  |  |  |      add.l d0,d0
   16f34:	|           |  |  |  |  |      add.l d0,d0
   16f36:	|           |  |  |  |  |      movea.l d1,a0
   16f38:	|           |  |  |  |  |      adda.l d0,a0
   16f3a:	|           |  |  |  |  |      move.l (a0),d1
   16f3c:	|           |  |  |  |  |      move.l 132(sp),d0
   16f40:	|           |  |  |  |  |      add.l d0,d0
   16f42:	|           |  |  |  |  |      add.l d0,d0
   16f44:	|           |  |  |  |  |      movea.l d1,a0
   16f46:	|           |  |  |  |  |      adda.l d0,a0
   16f48:	|           |  |  |  |  |      moveq #-2,d0
   16f4a:	|           |  |  |  |  |      move.l d0,(a0)
				distanceMatrix        [i][j] = 0;
   16f4c:	|           |  |  |  |  |      move.l 136(sp),d0
   16f50:	|           |  |  |  |  |      add.l d0,d0
   16f52:	|           |  |  |  |  |      add.l d0,d0
   16f54:	|           |  |  |  |  |      movea.l 62(sp),a0
   16f58:	|           |  |  |  |  |      adda.l d0,a0
   16f5a:	|           |  |  |  |  |      move.l (a0),d1
   16f5c:	|           |  |  |  |  |      move.l 132(sp),d0
   16f60:	|           |  |  |  |  |      add.l d0,d0
   16f62:	|           |  |  |  |  |      add.l d0,d0
   16f64:	|           |  |  |  |  |      movea.l d1,a0
   16f66:	|           |  |  |  |  |      adda.l d0,a0
   16f68:	|           |  |  |  |  |      clr.l (a0)
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   16f6a:	|           |  |  |  |  \----> addq.l #1,132(sp)
   16f6e:	|           |  |  |  \-------> movea.l 1cae6 <currentFloor>,a0
   16f74:	|           |  |  |            move.l 8(a0),d0
   16f78:	|           |  |  |            cmp.l 132(sp),d0
   16f7c:	|           |  |  \----------- bgt.w 16e8a <setFloor+0x48c>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16f80:	|           |  |               addq.l #1,136(sp)
   16f84:	|           |  \-------------> movea.l 1cae6 <currentFloor>,a0
   16f8a:	|           |                  move.l 8(a0),d0
   16f8e:	|           |                  cmp.l 136(sp),d0
   16f92:	|           \----------------- bgt.w 16e82 <setFloor+0x484>
			}
		}
	}

	BOOL madeChange;
	int lookForDistance = 0;
   16f96:	|                              clr.l 126(sp)

	do {
		lookForDistance ++;
   16f9a:	|  /-------------------------> addq.l #1,126(sp)
//		debugMatrix ();
		madeChange = FALSE;
   16f9e:	|  |                           clr.w 130(sp)
		for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16fa2:	|  |                           clr.l 136(sp)
   16fa6:	|  |     /-------------------- bra.w 170fc <setFloor+0x6fe>
			for (j = 0; j < currentFloor -> numPolygons; j ++) {
   16faa:	|  |  /--|-------------------> clr.l 132(sp)
   16fae:	|  |  |  |     /-------------- bra.w 170e6 <setFloor+0x6e8>
				if (currentFloor -> matrix[i][j] == -1) {
   16fb2:	|  |  |  |  /--|-------------> movea.l 1cae6 <currentFloor>,a0
   16fb8:	|  |  |  |  |  |               move.l 16(a0),d1
   16fbc:	|  |  |  |  |  |               move.l 136(sp),d0
   16fc0:	|  |  |  |  |  |               add.l d0,d0
   16fc2:	|  |  |  |  |  |               add.l d0,d0
   16fc4:	|  |  |  |  |  |               movea.l d1,a0
   16fc6:	|  |  |  |  |  |               adda.l d0,a0
   16fc8:	|  |  |  |  |  |               move.l (a0),d1
   16fca:	|  |  |  |  |  |               move.l 132(sp),d0
   16fce:	|  |  |  |  |  |               add.l d0,d0
   16fd0:	|  |  |  |  |  |               add.l d0,d0
   16fd2:	|  |  |  |  |  |               movea.l d1,a0
   16fd4:	|  |  |  |  |  |               adda.l d0,a0
   16fd6:	|  |  |  |  |  |               move.l (a0),d0
   16fd8:	|  |  |  |  |  |               moveq #-1,d1
   16fda:	|  |  |  |  |  |               cmp.l d0,d1
   16fdc:	|  |  |  |  |  |  /----------- bne.w 170e2 <setFloor+0x6e4>

					// OK, so we don't know how to get from i to j...
					for (int d = 0; d < currentFloor -> numPolygons; d ++) {
   16fe0:	|  |  |  |  |  |  |            clr.l 122(sp)
   16fe4:	|  |  |  |  |  |  |     /----- bra.w 170d0 <setFloor+0x6d2>
						if (d != i && d != j) {
   16fe8:	|  |  |  |  |  |  |  /--|----> move.l 122(sp),d0
   16fec:	|  |  |  |  |  |  |  |  |      cmp.l 136(sp),d0
   16ff0:	|  |  |  |  |  |  |  |  |  /-- beq.w 170cc <setFloor+0x6ce>
   16ff4:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d1
   16ff8:	|  |  |  |  |  |  |  |  |  |   cmp.l 132(sp),d1
   16ffc:	|  |  |  |  |  |  |  |  |  +-- beq.w 170cc <setFloor+0x6ce>
							if (currentFloor -> matrix[i][d] == d &&
   17000:	|  |  |  |  |  |  |  |  |  |   movea.l 1cae6 <currentFloor>,a0
   17006:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   1700a:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   1700e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17010:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17012:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   17014:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   17016:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   17018:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   1701c:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1701e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17020:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   17022:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   17024:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
   17026:	|  |  |  |  |  |  |  |  |  |   cmp.l 122(sp),d0
   1702a:	|  |  |  |  |  |  |  |  |  +-- bne.w 170cc <setFloor+0x6ce>
								currentFloor -> matrix[d][j] >= 0 &&
   1702e:	|  |  |  |  |  |  |  |  |  |   movea.l 1cae6 <currentFloor>,a0
   17034:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   17038:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   1703c:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1703e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17040:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   17042:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   17044:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   17046:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   1704a:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1704c:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1704e:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   17050:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   17052:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
							if (currentFloor -> matrix[i][d] == d &&
   17054:	|  |  |  |  |  |  |  |  |  +-- bmi.s 170cc <setFloor+0x6ce>
								distanceMatrix        [d][j] <= lookForDistance) {
   17056:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   1705a:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1705c:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1705e:	|  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a0
   17062:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   17064:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   17066:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   1706a:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1706c:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1706e:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   17070:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   17072:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
								currentFloor -> matrix[d][j] >= 0 &&
   17074:	|  |  |  |  |  |  |  |  |  |   cmp.l 126(sp),d0
   17078:	|  |  |  |  |  |  |  |  |  +-- bgt.s 170cc <setFloor+0x6ce>

								 currentFloor -> matrix[i][j] = d;
   1707a:	|  |  |  |  |  |  |  |  |  |   movea.l 1cae6 <currentFloor>,a0
   17080:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   17084:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   17088:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1708a:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1708c:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   1708e:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   17090:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   17092:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   17096:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17098:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1709a:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   1709c:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   1709e:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),(a0)
								 distanceMatrix		  [i][j] = lookForDistance + 1;
   170a2:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   170a6:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   170a8:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   170aa:	|  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a0
   170ae:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   170b0:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   170b2:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   170b6:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   170b8:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   170ba:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   170bc:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   170be:	|  |  |  |  |  |  |  |  |  |   move.l 126(sp),d0
   170c2:	|  |  |  |  |  |  |  |  |  |   addq.l #1,d0
   170c4:	|  |  |  |  |  |  |  |  |  |   move.l d0,(a0)
								 madeChange = TRUE;
   170c6:	|  |  |  |  |  |  |  |  |  |   move.w #1,130(sp)
					for (int d = 0; d < currentFloor -> numPolygons; d ++) {
   170cc:	|  |  |  |  |  |  |  |  |  \-> addq.l #1,122(sp)
   170d0:	|  |  |  |  |  |  |  |  \----> movea.l 1cae6 <currentFloor>,a0
   170d6:	|  |  |  |  |  |  |  |         move.l 8(a0),d0
   170da:	|  |  |  |  |  |  |  |         cmp.l 122(sp),d0
   170de:	|  |  |  |  |  |  |  \-------- bgt.w 16fe8 <setFloor+0x5ea>
			for (j = 0; j < currentFloor -> numPolygons; j ++) {
   170e2:	|  |  |  |  |  |  \----------> addq.l #1,132(sp)
   170e6:	|  |  |  |  |  \-------------> movea.l 1cae6 <currentFloor>,a0
   170ec:	|  |  |  |  |                  move.l 8(a0),d0
   170f0:	|  |  |  |  |                  cmp.l 132(sp),d0
   170f4:	|  |  |  |  \----------------- bgt.w 16fb2 <setFloor+0x5b4>
		for (i = 0; i < currentFloor -> numPolygons; i ++) {
   170f8:	|  |  |  |                     addq.l #1,136(sp)
   170fc:	|  |  |  \-------------------> movea.l 1cae6 <currentFloor>,a0
   17102:	|  |  |                        move.l 8(a0),d0
   17106:	|  |  |                        cmp.l 136(sp),d0
   1710a:	|  |  \----------------------- bgt.w 16faa <setFloor+0x5ac>
						}
					}
				}
			}
		}
	} while (madeChange);
   1710e:	|  |                           tst.w 130(sp)
   17112:	|  \-------------------------- bne.w 16f9a <setFloor+0x59c>

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   17116:	|                              clr.l 136(sp)
   1711a:	|                          /-- bra.s 17142 <setFloor+0x744>
		FreeVec(distanceMatrix [i]);
   1711c:	|                       /--|-> move.l 136(sp),d0
   17120:	|                       |  |   add.l d0,d0
   17122:	|                       |  |   add.l d0,d0
   17124:	|                       |  |   movea.l 62(sp),a0
   17128:	|                       |  |   adda.l d0,a0
   1712a:	|                       |  |   move.l (a0),54(sp)
   1712e:	|                       |  |   move.l 1c9ca <SysBase>,d0
   17134:	|                       |  |   movea.l d0,a6
   17136:	|                       |  |   movea.l 54(sp),a1
   1713a:	|                       |  |   jsr -690(a6)
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   1713e:	|                       |  |   addq.l #1,136(sp)
   17142:	|                       |  \-> movea.l 1cae6 <currentFloor>,a0
   17148:	|                       |      move.l 8(a0),d0
   1714c:	|                       |      cmp.l 136(sp),d0
   17150:	|                       \----- bgt.s 1711c <setFloor+0x71e>
	}

	FreeVec(distanceMatrix);
   17152:	|                              move.l 62(sp),58(sp)
   17158:	|                              move.l 1c9ca <SysBase>,d0
   1715e:	|                              movea.l d0,a6
   17160:	|                              movea.l 58(sp),a1
   17164:	|                              jsr -690(a6)
	distanceMatrix = NULL;	
   17168:	|                              clr.l 62(sp)

	return TRUE;
   1716c:	|                              moveq #1,d0
}
   1716e:	\----------------------------> movea.l (sp)+,a2
   17170:	                               movea.l (sp)+,a6
   17172:	                               lea 132(sp),sp
   17176:	                               rts

00017178 <setFloorNull>:

void setFloorNull () {
	killFloor ();
   17178:	jsr 16666 <killFloor>
	noFloor ();
   1717e:	jsr 1658a <noFloor>
   17184:	nop
   17186:	rts

00017188 <WaitVbl>:
void WaitVbl() {
   17188:	       subq.l #8,sp
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
   1718a:	   /-> movea.l #14675972,a0
   17190:	   |   move.l (a0),d0
   17192:	   |   move.l d0,(sp)
		vpos&=0x1ff00;
   17194:	   |   move.l (sp),d0
   17196:	   |   andi.l #130816,d0
   1719c:	   |   move.l d0,(sp)
		if (vpos!=(300<<8))
   1719e:	   |   move.l (sp),d0
   171a0:	   |   cmpi.l #76800,d0
   171a6:	   \-- beq.s 1718a <WaitVbl+0x2>
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
   171a8:	/----> movea.l #14675972,a0
   171ae:	|      move.l (a0),d0
   171b0:	|      move.l d0,4(sp)
		vpos&=0x1ff00;
   171b4:	|      move.l 4(sp),d0
   171b8:	|      andi.l #130816,d0
   171be:	|      move.l d0,4(sp)
		if (vpos==(300<<8))
   171c2:	|      move.l 4(sp),d0
   171c6:	|      cmpi.l #76800,d0
   171cc:	|  /-- beq.s 171d0 <WaitVbl+0x48>
	while (1) {
   171ce:	\--|-- bra.s 171a8 <WaitVbl+0x20>
			break;
   171d0:	   \-> nop
}
   171d2:	       nop
   171d4:	       addq.l #8,sp
   171d6:	       rts

000171d8 <memset>:
void* memset(void *dest, int val, unsigned long len) {
   171d8:	       subq.l #4,sp
	unsigned char *ptr = (unsigned char *)dest;
   171da:	       move.l 8(sp),(sp)
	while(len-- > 0)
   171de:	   /-- bra.s 171f0 <memset+0x18>
		*ptr++ = val;
   171e0:	/--|-> move.l (sp),d0
   171e2:	|  |   move.l d0,d1
   171e4:	|  |   addq.l #1,d1
   171e6:	|  |   move.l d1,(sp)
   171e8:	|  |   move.l 12(sp),d1
   171ec:	|  |   movea.l d0,a0
   171ee:	|  |   move.b d1,(a0)
	while(len-- > 0)
   171f0:	|  \-> move.l 16(sp),d0
   171f4:	|      move.l d0,d1
   171f6:	|      subq.l #1,d1
   171f8:	|      move.l d1,16(sp)
   171fc:	|      tst.l d0
   171fe:	\----- bne.s 171e0 <memset+0x8>
	return dest;
   17200:	       move.l 8(sp),d0
}
   17204:	       addq.l #4,sp
   17206:	       rts

00017208 <memcpy>:
void* memcpy(void *dest, const void *src, unsigned long len) {
   17208:	       subq.l #8,sp
   1720a:	       move.l d2,-(sp)
	char *d = (char *)dest;
   1720c:	       move.l 16(sp),8(sp)
	const char *s = (const char *)src;
   17212:	       move.l 20(sp),4(sp)
	while(len--)
   17218:	   /-- bra.s 1723a <memcpy+0x32>
		*d++ = *s++;
   1721a:	/--|-> move.l 4(sp),d1
   1721e:	|  |   move.l d1,d0
   17220:	|  |   addq.l #1,d0
   17222:	|  |   move.l d0,4(sp)
   17226:	|  |   move.l 8(sp),d0
   1722a:	|  |   move.l d0,d2
   1722c:	|  |   addq.l #1,d2
   1722e:	|  |   move.l d2,8(sp)
   17232:	|  |   movea.l d1,a0
   17234:	|  |   move.b (a0),d1
   17236:	|  |   movea.l d0,a0
   17238:	|  |   move.b d1,(a0)
	while(len--)
   1723a:	|  \-> move.l 24(sp),d0
   1723e:	|      move.l d0,d1
   17240:	|      subq.l #1,d1
   17242:	|      move.l d1,24(sp)
   17246:	|      tst.l d0
   17248:	\----- bne.s 1721a <memcpy+0x12>
	return dest;
   1724a:	       move.l 16(sp),d0
}
   1724e:	       move.l (sp)+,d2
   17250:	       addq.l #8,sp
   17252:	       rts

00017254 <KPrintF>:
void KPrintF(const char* fmt, ...) {
   17254:	       lea -128(sp),sp
   17258:	       movem.l a2-a3/a6,-(sp)
	if(*((UWORD *)UaeDbgLog) == 0x4eb9 || *((UWORD *)UaeDbgLog) == 0xa00e) {
   1725c:	       move.w f0ff60 <gcc8_c_support.c.1fed348d+0xec4cdf>,d0
   17262:	       cmpi.w #20153,d0
   17266:	   /-- beq.s 1728a <KPrintF+0x36>
   17268:	   |   cmpi.w #-24562,d0
   1726c:	   +-- beq.s 1728a <KPrintF+0x36>
		RawDoFmt((CONST_STRPTR)fmt, vl, KPutCharX, 0);
   1726e:	   |   movea.l 1c9ca <SysBase>,a6
   17274:	   |   movea.l 144(sp),a0
   17278:	   |   lea 148(sp),a1
   1727c:	   |   lea 17d10 <KPutCharX>,a2
   17282:	   |   suba.l a3,a3
   17284:	   |   jsr -522(a6)
}
   17288:	/--|-- bra.s 172b4 <KPrintF+0x60>
		RawDoFmt((CONST_STRPTR)fmt, vl, PutChar, temp);
   1728a:	|  \-> movea.l 1c9ca <SysBase>,a6
   17290:	|      movea.l 144(sp),a0
   17294:	|      lea 148(sp),a1
   17298:	|      lea 17d1e <PutChar>,a2
   1729e:	|      lea 12(sp),a3
   172a2:	|      jsr -522(a6)
		UaeDbgLog(86, temp);
   172a6:	|      move.l a3,-(sp)
   172a8:	|      pea 56 <_start+0x56>
   172ac:	|      jsr f0ff60 <gcc8_c_support.c.1fed348d+0xec4cdf>
	if(*((UWORD *)UaeDbgLog) == 0x4eb9 || *((UWORD *)UaeDbgLog) == 0xa00e) {
   172b2:	|      addq.l #8,sp
}
   172b4:	\----> movem.l (sp)+,a2-a3/a6
   172b8:	       lea 128(sp),sp
   172bc:	       rts

000172be <debug_cmd>:
		UaeConf(82, -1, on ? "blitter_cycle_exact false" : "blitter_cycle_exact true", 0, &outbuf, 1);
		UaeConf(82, -1, on ? "warp true" : "warp false", 0, &outbuf, 1);
	}
}

static void debug_cmd(unsigned int arg1, unsigned int arg2, unsigned int arg3, unsigned int arg4) {
   172be:	       subq.l #4,sp
	long(*UaeLib)(unsigned int arg0, unsigned int arg1, unsigned int arg2, unsigned int arg3, unsigned int arg4);
	UaeLib = (long(*)(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int))0xf0ff60;
   172c0:	       move.l #15794016,(sp)
	if(*((UWORD *)UaeLib) == 0x4eb9 || *((UWORD *)UaeLib) == 0xa00e) {
   172c6:	       movea.l (sp),a0
   172c8:	       move.w (a0),d0
   172ca:	       cmpi.w #20153,d0
   172ce:	   /-- beq.s 172da <debug_cmd+0x1c>
   172d0:	   |   movea.l (sp),a0
   172d2:	   |   move.w (a0),d0
   172d4:	   |   cmpi.w #-24562,d0
   172d8:	/--|-- bne.s 172f8 <debug_cmd+0x3a>
		UaeLib(88, arg1, arg2, arg3, arg4);
   172da:	|  \-> move.l 20(sp),-(sp)
   172de:	|      move.l 20(sp),-(sp)
   172e2:	|      move.l 20(sp),-(sp)
   172e6:	|      move.l 20(sp),-(sp)
   172ea:	|      pea 58 <_start+0x58>
   172ee:	|      movea.l 20(sp),a0
   172f2:	|      jsr (a0)
   172f4:	|      lea 20(sp),sp
	}
}
   172f8:	\----> nop
   172fa:	       addq.l #4,sp
   172fc:	       rts

000172fe <my_strncpy>:
void debug_stop_idle() {
	debug_cmd(barto_cmd_set_idle, 0, 0, 0);
}

// gfx debugger
static void my_strncpy(char* destination, const char* source, unsigned long num) {
   172fe:	       move.l d2,-(sp)
	while(*source && --num > 0)
   17300:	   /-- bra.s 17322 <my_strncpy+0x24>
		*destination++ = *source++;
   17302:	/--|-> move.l 12(sp),d1
   17306:	|  |   move.l d1,d0
   17308:	|  |   addq.l #1,d0
   1730a:	|  |   move.l d0,12(sp)
   1730e:	|  |   move.l 8(sp),d0
   17312:	|  |   move.l d0,d2
   17314:	|  |   addq.l #1,d2
   17316:	|  |   move.l d2,8(sp)
   1731a:	|  |   movea.l d1,a0
   1731c:	|  |   move.b (a0),d1
   1731e:	|  |   movea.l d0,a0
   17320:	|  |   move.b d1,(a0)
	while(*source && --num > 0)
   17322:	|  \-> movea.l 12(sp),a0
   17326:	|      move.b (a0),d0
   17328:	|  /-- beq.s 17330 <my_strncpy+0x32>
   1732a:	|  |   subq.l #1,16(sp)
   1732e:	\--|-- bne.s 17302 <my_strncpy+0x4>
	*destination = '\0';
   17330:	   \-> movea.l 8(sp),a0
   17334:	       clr.b (a0)
}
   17336:	       nop
   17338:	       move.l (sp)+,d2
   1733a:	       rts

0001733c <debug_register_bitmap>:

void debug_register_bitmap(const void* addr, const char* name, short width, short height, short numPlanes, unsigned short flags) {
   1733c:	    lea -60(sp),sp
   17340:	    movea.l 72(sp),a1
   17344:	    movea.l 76(sp),a0
   17348:	    move.l 80(sp),d1
   1734c:	    move.l 84(sp),d0
   17350:	    movea.w a1,a1
   17352:	    move.w a1,8(sp)
   17356:	    movea.w a0,a0
   17358:	    move.w a0,6(sp)
   1735c:	    move.w d1,d1
   1735e:	    move.w d1,4(sp)
   17362:	    move.w d0,d0
   17364:	    move.w d0,2(sp)
	struct debug_resource resource = {
   17368:	    lea 10(sp),a0
   1736c:	    clr.l (a0)
   1736e:	    addq.l #4,a0
   17370:	    clr.l (a0)
   17372:	    addq.l #4,a0
   17374:	    clr.l (a0)
   17376:	    addq.l #4,a0
   17378:	    clr.l (a0)
   1737a:	    addq.l #4,a0
   1737c:	    clr.l (a0)
   1737e:	    addq.l #4,a0
   17380:	    clr.l (a0)
   17382:	    addq.l #4,a0
   17384:	    clr.l (a0)
   17386:	    addq.l #4,a0
   17388:	    clr.l (a0)
   1738a:	    addq.l #4,a0
   1738c:	    clr.l (a0)
   1738e:	    addq.l #4,a0
   17390:	    clr.l (a0)
   17392:	    addq.l #4,a0
   17394:	    clr.l (a0)
   17396:	    addq.l #4,a0
   17398:	    clr.l (a0)
   1739a:	    addq.l #4,a0
   1739c:	    clr.w (a0)
   1739e:	    addq.l #2,a0
		.address = (unsigned int)addr,
   173a0:	    move.l 64(sp),d0
	struct debug_resource resource = {
   173a4:	    move.l d0,10(sp)
		.size = width / 8 * height * numPlanes,
   173a8:	    move.w 8(sp),d0
   173ac:	/-- bpl.s 173b0 <debug_register_bitmap+0x74>
   173ae:	|   addq.w #7,d0
   173b0:	\-> asr.w #3,d0
   173b2:	    movea.w d0,a0
   173b4:	    movea.w 6(sp),a1
   173b8:	    move.l a1,-(sp)
   173ba:	    move.l a0,-(sp)
   173bc:	    jsr 17c08 <__mulsi3>
   173c2:	    addq.l #8,sp
   173c4:	    movea.w 4(sp),a0
   173c8:	    move.l a0,-(sp)
   173ca:	    move.l d0,-(sp)
   173cc:	    jsr 17c08 <__mulsi3>
   173d2:	    addq.l #8,sp
	struct debug_resource resource = {
   173d4:	    move.l d0,14(sp)
   173d8:	    move.w 2(sp),52(sp)
   173de:	    move.w 8(sp),54(sp)
   173e4:	    move.w 6(sp),56(sp)
   173ea:	    move.w 4(sp),58(sp)
		.type = debug_resource_type_bitmap,
		.flags = flags,
		.bitmap = { width, height, numPlanes }
	};

	if (flags & debug_resource_bitmap_masked)
   173f0:	    moveq #0,d0
   173f2:	    move.w 2(sp),d0
   173f6:	    moveq #2,d1
   173f8:	    and.l d1,d0
   173fa:	/-- beq.s 17406 <debug_register_bitmap+0xca>
		resource.size *= 2;
   173fc:	|   move.l 14(sp),d0
   17400:	|   add.l d0,d0
   17402:	|   move.l d0,14(sp)

	my_strncpy(resource.name, name, sizeof(resource.name));
   17406:	\-> pea 20 <_start+0x20>
   1740a:	    move.l 72(sp),-(sp)
   1740e:	    lea 18(sp),a0
   17412:	    move.l a0,d0
   17414:	    addq.l #8,d0
   17416:	    move.l d0,-(sp)
   17418:	    jsr 172fe <my_strncpy>
   1741e:	    lea 12(sp),sp
	debug_cmd(barto_cmd_register_resource, (unsigned int)&resource, 0, 0);
   17422:	    lea 10(sp),a0
   17426:	    clr.l -(sp)
   17428:	    clr.l -(sp)
   1742a:	    move.l a0,-(sp)
   1742c:	    pea 4 <_start+0x4>
   17430:	    jsr 172be <debug_cmd>
   17436:	    lea 16(sp),sp
}
   1743a:	    nop
   1743c:	    lea 60(sp),sp
   17440:	    rts

00017442 <__addsf3>:
	};
	my_strncpy(resource.name, name, sizeof(resource.name));
	debug_cmd(barto_cmd_save, (unsigned int)&resource, 0, 0);
}

FLOAT __addsf3( FLOAT a, FLOAT b) {
   17442:	lea -12(sp),sp
   17446:	move.l a6,-(sp)
	return IEEESPAdd( a, b);
   17448:	move.l 20(sp),12(sp)
   1744e:	move.l 24(sp),8(sp)
   17454:	move.l 1c9da <MathIeeeSingBasBase>,d0
   1745a:	movea.l d0,a6
   1745c:	move.l 12(sp),d0
   17460:	move.l 8(sp),d1
   17464:	jsr -66(a6)
   17468:	move.l d0,4(sp)
   1746c:	move.l 4(sp),d0
}
   17470:	movea.l (sp)+,a6
   17472:	lea 12(sp),sp
   17476:	rts

00017478 <__adddf3>:

DOUBLE __adddf3( DOUBLE a, DOUBLE b) {
   17478:	lea -32(sp),sp
   1747c:	movem.l d2-d3/a6,-(sp)
	return IEEEDPAdd( a, b);
   17480:	move.l 48(sp),36(sp)
   17486:	move.l 52(sp),40(sp)
   1748c:	move.l 56(sp),28(sp)
   17492:	move.l 60(sp),32(sp)
   17498:	move.l 1c9e2 <MathIeeeDoubBasBase>,d0
   1749e:	movea.l d0,a6
   174a0:	move.l 36(sp),d0
   174a4:	move.l 40(sp),d1
   174a8:	move.l 28(sp),d2
   174ac:	move.l 32(sp),d3
   174b0:	jsr -66(a6)
   174b4:	move.l d0,12(sp)
   174b8:	move.l d1,16(sp)
   174bc:	move.l 12(sp),20(sp)
   174c2:	move.l 16(sp),24(sp)
   174c8:	move.l 20(sp),d0
   174cc:	move.l 24(sp),d1
}
   174d0:	movem.l (sp)+,d2-d3/a6
   174d4:	lea 32(sp),sp
   174d8:	rts

000174da <__divdf3>:

DOUBLE __divdf3( DOUBLE a, DOUBLE b) {
   174da:	lea -32(sp),sp
   174de:	movem.l d2-d3/a6,-(sp)
	return IEEEDPDiv( a, b);
   174e2:	move.l 48(sp),36(sp)
   174e8:	move.l 52(sp),40(sp)
   174ee:	move.l 56(sp),28(sp)
   174f4:	move.l 60(sp),32(sp)
   174fa:	move.l 1c9e2 <MathIeeeDoubBasBase>,d0
   17500:	movea.l d0,a6
   17502:	move.l 36(sp),d0
   17506:	move.l 40(sp),d1
   1750a:	move.l 28(sp),d2
   1750e:	move.l 32(sp),d3
   17512:	jsr -84(a6)
   17516:	move.l d0,12(sp)
   1751a:	move.l d1,16(sp)
   1751e:	move.l 12(sp),20(sp)
   17524:	move.l 16(sp),24(sp)
   1752a:	move.l 20(sp),d0
   1752e:	move.l 24(sp),d1
}
   17532:	movem.l (sp)+,d2-d3/a6
   17536:	lea 32(sp),sp
   1753a:	rts

0001753c <__divsf3>:

FLOAT __divsf3( FLOAT a, FLOAT b) {
   1753c:	lea -12(sp),sp
   17540:	move.l a6,-(sp)
	return IEEESPDiv( a, b);
   17542:	move.l 20(sp),12(sp)
   17548:	move.l 24(sp),8(sp)
   1754e:	move.l 1c9da <MathIeeeSingBasBase>,d0
   17554:	movea.l d0,a6
   17556:	move.l 12(sp),d0
   1755a:	move.l 8(sp),d1
   1755e:	jsr -84(a6)
   17562:	move.l d0,4(sp)
   17566:	move.l 4(sp),d0
}
   1756a:	movea.l (sp)+,a6
   1756c:	lea 12(sp),sp
   17570:	rts

00017572 <__eqsf2>:

int __eqsf2( FLOAT a, FLOAT b) {
   17572:	lea -12(sp),sp
   17576:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   17578:	move.l 20(sp),12(sp)
   1757e:	move.l 24(sp),8(sp)
   17584:	move.l 1c9da <MathIeeeSingBasBase>,d0
   1758a:	movea.l d0,a6
   1758c:	move.l 12(sp),d0
   17590:	move.l 8(sp),d1
   17594:	jsr -42(a6)
   17598:	move.l d0,4(sp)
   1759c:	move.l 4(sp),d0
}
   175a0:	movea.l (sp)+,a6
   175a2:	lea 12(sp),sp
   175a6:	rts

000175a8 <__extendsfdf2>:

DOUBLE __extendsfdf2 (FLOAT a) {
   175a8:	lea -20(sp),sp
   175ac:	move.l a6,-(sp)
	return IEEEDPFieee( a );
   175ae:	move.l 28(sp),20(sp)
   175b4:	move.l 1c9e6 <MathIeeeDoubTransBase>,d0
   175ba:	movea.l d0,a6
   175bc:	move.l 20(sp),d0
   175c0:	jsr -108(a6)
   175c4:	move.l d0,4(sp)
   175c8:	move.l d1,8(sp)
   175cc:	move.l 4(sp),12(sp)
   175d2:	move.l 8(sp),16(sp)
   175d8:	move.l 12(sp),d0
   175dc:	move.l 16(sp),d1
}
   175e0:	movea.l (sp)+,a6
   175e2:	lea 20(sp),sp
   175e6:	rts

000175e8 <__fixdfsi>:

LONG __fixdfsi(DOUBLE value) {
   175e8:	lea -12(sp),sp
   175ec:	move.l a6,-(sp)
	return IEEEDPFix(value);
   175ee:	move.l 20(sp),8(sp)
   175f4:	move.l 24(sp),12(sp)
   175fa:	move.l 1c9e2 <MathIeeeDoubBasBase>,d0
   17600:	movea.l d0,a6
   17602:	move.l 8(sp),d0
   17606:	move.l 12(sp),d1
   1760a:	jsr -30(a6)
   1760e:	move.l d0,4(sp)
   17612:	move.l 4(sp),d0
}
   17616:	movea.l (sp)+,a6
   17618:	lea 12(sp),sp
   1761c:	rts

0001761e <__fixsfsi>:

LONG __fixsfsi(FLOAT value) {
   1761e:	subq.l #8,sp
   17620:	move.l a6,-(sp)
	return IEEESPFix(value);
   17622:	move.l 16(sp),8(sp)
   17628:	move.l 1c9da <MathIeeeSingBasBase>,d0
   1762e:	movea.l d0,a6
   17630:	move.l 8(sp),d0
   17634:	jsr -30(a6)
   17638:	move.l d0,4(sp)
   1763c:	move.l 4(sp),d0
}
   17640:	movea.l (sp)+,a6
   17642:	addq.l #8,sp
   17644:	rts

00017646 <__floatsidf>:


DOUBLE __floatsidf (int i) {
   17646:	lea -20(sp),sp
   1764a:	move.l a6,-(sp)
	return IEEEDPFlt((LONG) i);  
   1764c:	move.l 28(sp),20(sp)
   17652:	move.l 1c9e2 <MathIeeeDoubBasBase>,d0
   17658:	movea.l d0,a6
   1765a:	move.l 20(sp),d0
   1765e:	jsr -36(a6)
   17662:	move.l d0,4(sp)
   17666:	move.l d1,8(sp)
   1766a:	move.l 4(sp),12(sp)
   17670:	move.l 8(sp),16(sp)
   17676:	move.l 12(sp),d0
   1767a:	move.l 16(sp),d1
}
   1767e:	movea.l (sp)+,a6
   17680:	lea 20(sp),sp
   17684:	rts

00017686 <__floatsisf>:

FLOAT __floatsisf(int i) {
   17686:	subq.l #8,sp
   17688:	move.l a6,-(sp)
	return IEEESPFlt((LONG) i); 
   1768a:	move.l 16(sp),8(sp)
   17690:	move.l 1c9da <MathIeeeSingBasBase>,d0
   17696:	movea.l d0,a6
   17698:	move.l 8(sp),d0
   1769c:	jsr -36(a6)
   176a0:	move.l d0,4(sp)
   176a4:	move.l 4(sp),d0
}
   176a8:	movea.l (sp)+,a6
   176aa:	addq.l #8,sp
   176ac:	rts

000176ae <__floatunsisf>:

FLOAT __floatunsisf(unsigned int i) {	
   176ae:	subq.l #8,sp
   176b0:	move.l a6,-(sp)
	return IEEESPFlt((LONG) i); 
   176b2:	move.l 16(sp),8(sp)
   176b8:	move.l 1c9da <MathIeeeSingBasBase>,d0
   176be:	movea.l d0,a6
   176c0:	move.l 8(sp),d0
   176c4:	jsr -36(a6)
   176c8:	move.l d0,4(sp)
   176cc:	move.l 4(sp),d0
}
   176d0:	movea.l (sp)+,a6
   176d2:	addq.l #8,sp
   176d4:	rts

000176d6 <__muldf3>:

DOUBLE __muldf3( DOUBLE leftParm, DOUBLE rightParm ) {
   176d6:	lea -32(sp),sp
   176da:	movem.l d2-d3/a6,-(sp)
	return IEEEDPMul( leftParm, rightParm);
   176de:	move.l 48(sp),36(sp)
   176e4:	move.l 52(sp),40(sp)
   176ea:	move.l 56(sp),28(sp)
   176f0:	move.l 60(sp),32(sp)
   176f6:	move.l 1c9e2 <MathIeeeDoubBasBase>,d0
   176fc:	movea.l d0,a6
   176fe:	move.l 36(sp),d0
   17702:	move.l 40(sp),d1
   17706:	move.l 28(sp),d2
   1770a:	move.l 32(sp),d3
   1770e:	jsr -78(a6)
   17712:	move.l d0,12(sp)
   17716:	move.l d1,16(sp)
   1771a:	move.l 12(sp),20(sp)
   17720:	move.l 16(sp),24(sp)
   17726:	move.l 20(sp),d0
   1772a:	move.l 24(sp),d1
}
   1772e:	movem.l (sp)+,d2-d3/a6
   17732:	lea 32(sp),sp
   17736:	rts

00017738 <__mulsf3>:

 //FLOAT IEEESPMul( FLOAT leftParm, FLOAT rightParm );
FLOAT __mulsf3( FLOAT leftParm, FLOAT rightParm ) {
   17738:	lea -12(sp),sp
   1773c:	move.l a6,-(sp)
	return IEEESPMul( leftParm, rightParm);
   1773e:	move.l 20(sp),12(sp)
   17744:	move.l 24(sp),8(sp)
   1774a:	move.l 1c9da <MathIeeeSingBasBase>,d0
   17750:	movea.l d0,a6
   17752:	move.l 12(sp),d0
   17756:	move.l 8(sp),d1
   1775a:	jsr -78(a6)
   1775e:	move.l d0,4(sp)
   17762:	move.l 4(sp),d0
}
   17766:	movea.l (sp)+,a6
   17768:	lea 12(sp),sp
   1776c:	rts

0001776e <__gesf2>:


int __gesf2( FLOAT a, FLOAT b) {
   1776e:	lea -12(sp),sp
   17772:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   17774:	move.l 20(sp),12(sp)
   1777a:	move.l 24(sp),8(sp)
   17780:	move.l 1c9da <MathIeeeSingBasBase>,d0
   17786:	movea.l d0,a6
   17788:	move.l 12(sp),d0
   1778c:	move.l 8(sp),d1
   17790:	jsr -42(a6)
   17794:	move.l d0,4(sp)
   17798:	move.l 4(sp),d0
}
   1779c:	movea.l (sp)+,a6
   1779e:	lea 12(sp),sp
   177a2:	rts

000177a4 <__gtdf2>:

int __gtdf2( DOUBLE a, DOUBLE b) {
   177a4:	lea -20(sp),sp
   177a8:	movem.l d2-d3/a6,-(sp)
	return IEEEDPCmp( a, b);
   177ac:	move.l 36(sp),24(sp)
   177b2:	move.l 40(sp),28(sp)
   177b8:	move.l 44(sp),16(sp)
   177be:	move.l 48(sp),20(sp)
   177c4:	move.l 1c9e2 <MathIeeeDoubBasBase>,d0
   177ca:	movea.l d0,a6
   177cc:	move.l 24(sp),d0
   177d0:	move.l 28(sp),d1
   177d4:	move.l 16(sp),d2
   177d8:	move.l 20(sp),d3
   177dc:	jsr -42(a6)
   177e0:	move.l d0,12(sp)
   177e4:	move.l 12(sp),d0
}
   177e8:	movem.l (sp)+,d2-d3/a6
   177ec:	lea 20(sp),sp
   177f0:	rts

000177f2 <__gtsf2>:

int __gtsf2( FLOAT a, FLOAT b) {
   177f2:	lea -12(sp),sp
   177f6:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   177f8:	move.l 20(sp),12(sp)
   177fe:	move.l 24(sp),8(sp)
   17804:	move.l 1c9da <MathIeeeSingBasBase>,d0
   1780a:	movea.l d0,a6
   1780c:	move.l 12(sp),d0
   17810:	move.l 8(sp),d1
   17814:	jsr -42(a6)
   17818:	move.l d0,4(sp)
   1781c:	move.l 4(sp),d0
}
   17820:	movea.l (sp)+,a6
   17822:	lea 12(sp),sp
   17826:	rts

00017828 <__lesf2>:

int __lesf2( FLOAT a, FLOAT b) {
   17828:	lea -12(sp),sp
   1782c:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   1782e:	move.l 20(sp),12(sp)
   17834:	move.l 24(sp),8(sp)
   1783a:	move.l 1c9da <MathIeeeSingBasBase>,d0
   17840:	movea.l d0,a6
   17842:	move.l 12(sp),d0
   17846:	move.l 8(sp),d1
   1784a:	jsr -42(a6)
   1784e:	move.l d0,4(sp)
   17852:	move.l 4(sp),d0
}
   17856:	movea.l (sp)+,a6
   17858:	lea 12(sp),sp
   1785c:	rts

0001785e <__ltdf2>:

int __ltdf2( DOUBLE a, DOUBLE b) {
   1785e:	lea -20(sp),sp
   17862:	movem.l d2-d3/a6,-(sp)
	return IEEEDPCmp( a, b);
   17866:	move.l 36(sp),24(sp)
   1786c:	move.l 40(sp),28(sp)
   17872:	move.l 44(sp),16(sp)
   17878:	move.l 48(sp),20(sp)
   1787e:	move.l 1c9e2 <MathIeeeDoubBasBase>,d0
   17884:	movea.l d0,a6
   17886:	move.l 24(sp),d0
   1788a:	move.l 28(sp),d1
   1788e:	move.l 16(sp),d2
   17892:	move.l 20(sp),d3
   17896:	jsr -42(a6)
   1789a:	move.l d0,12(sp)
   1789e:	move.l 12(sp),d0
}
   178a2:	movem.l (sp)+,d2-d3/a6
   178a6:	lea 20(sp),sp
   178aa:	rts

000178ac <__ltsf2>:

int __ltsf2( FLOAT a, FLOAT b) {
   178ac:	lea -12(sp),sp
   178b0:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   178b2:	move.l 20(sp),12(sp)
   178b8:	move.l 24(sp),8(sp)
   178be:	move.l 1c9da <MathIeeeSingBasBase>,d0
   178c4:	movea.l d0,a6
   178c6:	move.l 12(sp),d0
   178ca:	move.l 8(sp),d1
   178ce:	jsr -42(a6)
   178d2:	move.l d0,4(sp)
   178d6:	move.l 4(sp),d0
}
   178da:	movea.l (sp)+,a6
   178dc:	lea 12(sp),sp
   178e0:	rts

000178e2 <__nesf2>:

int __nesf2( FLOAT a, FLOAT b) {
   178e2:	lea -12(sp),sp
   178e6:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   178e8:	move.l 20(sp),12(sp)
   178ee:	move.l 24(sp),8(sp)
   178f4:	move.l 1c9da <MathIeeeSingBasBase>,d0
   178fa:	movea.l d0,a6
   178fc:	move.l 12(sp),d0
   17900:	move.l 8(sp),d1
   17904:	jsr -42(a6)
   17908:	move.l d0,4(sp)
   1790c:	move.l 4(sp),d0
}
   17910:	movea.l (sp)+,a6
   17912:	lea 12(sp),sp
   17916:	rts

00017918 <__subdf3>:

DOUBLE __subdf3 (DOUBLE a, DOUBLE b) {
   17918:	lea -32(sp),sp
   1791c:	movem.l d2-d3/a6,-(sp)
	return IEEEDPSub( a, b);
   17920:	move.l 48(sp),36(sp)
   17926:	move.l 52(sp),40(sp)
   1792c:	move.l 56(sp),28(sp)
   17932:	move.l 60(sp),32(sp)
   17938:	move.l 1c9e2 <MathIeeeDoubBasBase>,d0
   1793e:	movea.l d0,a6
   17940:	move.l 36(sp),d0
   17944:	move.l 40(sp),d1
   17948:	move.l 28(sp),d2
   1794c:	move.l 32(sp),d3
   17950:	jsr -72(a6)
   17954:	move.l d0,12(sp)
   17958:	move.l d1,16(sp)
   1795c:	move.l 12(sp),20(sp)
   17962:	move.l 16(sp),24(sp)
   17968:	move.l 20(sp),d0
   1796c:	move.l 24(sp),d1
}
   17970:	movem.l (sp)+,d2-d3/a6
   17974:	lea 32(sp),sp
   17978:	rts

0001797a <__subsf3>:

FLOAT __subsf3 (float a, float b) {
   1797a:	lea -12(sp),sp
   1797e:	move.l a6,-(sp)
	return IEEESPSub( a, b);
   17980:	move.l 20(sp),12(sp)
   17986:	move.l 24(sp),8(sp)
   1798c:	move.l 1c9da <MathIeeeSingBasBase>,d0
   17992:	movea.l d0,a6
   17994:	move.l 12(sp),d0
   17998:	move.l 8(sp),d1
   1799c:	jsr -72(a6)
   179a0:	move.l d0,4(sp)
   179a4:	move.l 4(sp),d0
}
   179a8:	movea.l (sp)+,a6
   179aa:	lea 12(sp),sp
   179ae:	rts

000179b0 <__truncdfsf2>:

FLOAT __truncdfsf2(DOUBLE a) {
   179b0:	lea -12(sp),sp
   179b4:	move.l a6,-(sp)
	return IEEEDPTieee( a);
   179b6:	move.l 20(sp),8(sp)
   179bc:	move.l 24(sp),12(sp)
   179c2:	move.l 1c9e6 <MathIeeeDoubTransBase>,d0
   179c8:	movea.l d0,a6
   179ca:	move.l 8(sp),d0
   179ce:	move.l 12(sp),d1
   179d2:	jsr -102(a6)
   179d6:	move.l d0,4(sp)
   179da:	move.l 4(sp),d0
}
   179de:	movea.l (sp)+,a6
   179e0:	lea 12(sp),sp
   179e4:	rts

000179e6 <__fixunssfsi>:

unsigned int __fixunssfsi (float a) {
   179e6:	subq.l #8,sp
   179e8:	move.l a6,-(sp)
	return IEEESPFix(a);
   179ea:	move.l 16(sp),8(sp)
   179f0:	move.l 1c9da <MathIeeeSingBasBase>,d0
   179f6:	movea.l d0,a6
   179f8:	move.l 8(sp),d0
   179fc:	jsr -30(a6)
   17a00:	move.l d0,4(sp)
   17a04:	move.l 4(sp),d0
}
   17a08:	movea.l (sp)+,a6
   17a0a:	addq.l #8,sp
   17a0c:	rts

00017a0e <atan2f>:

FLOAT atan2f(FLOAT y, FLOAT x) {
   17a0e:	       lea -24(sp),sp
   17a12:	       move.l a6,-(sp)
    if (x > 0) {
   17a14:	       clr.l -(sp)
   17a16:	       move.l 40(sp),-(sp)
   17a1a:	       jsr 177f2 <__gtsf2>
   17a20:	       addq.l #8,sp
   17a22:	       tst.l d0
   17a24:	   /-- ble.s 17a56 <atan2f+0x48>
        return IEEESPAtan(y / x);
   17a26:	   |   move.l 36(sp),-(sp)
   17a2a:	   |   move.l 36(sp),-(sp)
   17a2e:	   |   jsr 1753c <__divsf3>
   17a34:	   |   addq.l #8,sp
   17a36:	   |   move.l d0,8(sp)
   17a3a:	   |   move.l 1c9de <MathIeeeSingTransBase>,d0
   17a40:	   |   movea.l d0,a6
   17a42:	   |   move.l 8(sp),d0
   17a46:	   |   jsr -30(a6)
   17a4a:	   |   move.l d0,4(sp)
   17a4e:	   |   move.l 4(sp),d0
   17a52:	/--|-- bra.w 17bb6 <atan2f+0x1a8>
    } else if (x < 0 && y >= 0) {
   17a56:	|  \-> clr.l -(sp)
   17a58:	|      move.l 40(sp),-(sp)
   17a5c:	|      jsr 178ac <__ltsf2>
   17a62:	|      addq.l #8,sp
   17a64:	|      tst.l d0
   17a66:	|  /-- bge.s 17ada <atan2f+0xcc>
   17a68:	|  |   clr.l -(sp)
   17a6a:	|  |   move.l 36(sp),-(sp)
   17a6e:	|  |   jsr 1776e <__gesf2>
   17a74:	|  |   addq.l #8,sp
   17a76:	|  |   tst.l d0
   17a78:	|  +-- blt.s 17ada <atan2f+0xcc>
        return IEEESPAtan(y / x) + PI;
   17a7a:	|  |   move.l 36(sp),-(sp)
   17a7e:	|  |   move.l 36(sp),-(sp)
   17a82:	|  |   jsr 1753c <__divsf3>
   17a88:	|  |   addq.l #8,sp
   17a8a:	|  |   move.l d0,24(sp)
   17a8e:	|  |   move.l 1c9de <MathIeeeSingTransBase>,d0
   17a94:	|  |   movea.l d0,a6
   17a96:	|  |   move.l 24(sp),d0
   17a9a:	|  |   jsr -30(a6)
   17a9e:	|  |   move.l d0,20(sp)
   17aa2:	|  |   move.l 20(sp),d0
   17aa6:	|  |   move.l d0,-(sp)
   17aa8:	|  |   jsr 175a8 <__extendsfdf2>
   17aae:	|  |   addq.l #4,sp
   17ab0:	|  |   move.l #1413754136,-(sp)
   17ab6:	|  |   move.l #1074340347,-(sp)
   17abc:	|  |   move.l d1,-(sp)
   17abe:	|  |   move.l d0,-(sp)
   17ac0:	|  |   jsr 17478 <__adddf3>
   17ac6:	|  |   lea 16(sp),sp
   17aca:	|  |   move.l d1,-(sp)
   17acc:	|  |   move.l d0,-(sp)
   17ace:	|  |   jsr 179b0 <__truncdfsf2>
   17ad4:	|  |   addq.l #8,sp
   17ad6:	+--|-- bra.w 17bb6 <atan2f+0x1a8>
    } else if (x < 0 && y < 0) {
   17ada:	|  \-> clr.l -(sp)
   17adc:	|      move.l 40(sp),-(sp)
   17ae0:	|      jsr 178ac <__ltsf2>
   17ae6:	|      addq.l #8,sp
   17ae8:	|      tst.l d0
   17aea:	|  /-- bge.s 17b5c <atan2f+0x14e>
   17aec:	|  |   clr.l -(sp)
   17aee:	|  |   move.l 36(sp),-(sp)
   17af2:	|  |   jsr 178ac <__ltsf2>
   17af8:	|  |   addq.l #8,sp
   17afa:	|  |   tst.l d0
   17afc:	|  +-- bge.s 17b5c <atan2f+0x14e>
        return IEEESPAtan(y / x) - PI;
   17afe:	|  |   move.l 36(sp),-(sp)
   17b02:	|  |   move.l 36(sp),-(sp)
   17b06:	|  |   jsr 1753c <__divsf3>
   17b0c:	|  |   addq.l #8,sp
   17b0e:	|  |   move.l d0,16(sp)
   17b12:	|  |   move.l 1c9de <MathIeeeSingTransBase>,d0
   17b18:	|  |   movea.l d0,a6
   17b1a:	|  |   move.l 16(sp),d0
   17b1e:	|  |   jsr -30(a6)
   17b22:	|  |   move.l d0,12(sp)
   17b26:	|  |   move.l 12(sp),d0
   17b2a:	|  |   move.l d0,-(sp)
   17b2c:	|  |   jsr 175a8 <__extendsfdf2>
   17b32:	|  |   addq.l #4,sp
   17b34:	|  |   move.l #1413754136,-(sp)
   17b3a:	|  |   move.l #1074340347,-(sp)
   17b40:	|  |   move.l d1,-(sp)
   17b42:	|  |   move.l d0,-(sp)
   17b44:	|  |   jsr 17918 <__subdf3>
   17b4a:	|  |   lea 16(sp),sp
   17b4e:	|  |   move.l d1,-(sp)
   17b50:	|  |   move.l d0,-(sp)
   17b52:	|  |   jsr 179b0 <__truncdfsf2>
   17b58:	|  |   addq.l #8,sp
   17b5a:	+--|-- bra.s 17bb6 <atan2f+0x1a8>
    } else if (x == 0 && y > 0) {
   17b5c:	|  \-> clr.l -(sp)
   17b5e:	|      move.l 40(sp),-(sp)
   17b62:	|      jsr 17572 <__eqsf2>
   17b68:	|      addq.l #8,sp
   17b6a:	|      tst.l d0
   17b6c:	|  /-- bne.s 17b88 <atan2f+0x17a>
   17b6e:	|  |   clr.l -(sp)
   17b70:	|  |   move.l 36(sp),-(sp)
   17b74:	|  |   jsr 177f2 <__gtsf2>
   17b7a:	|  |   addq.l #8,sp
   17b7c:	|  |   tst.l d0
   17b7e:	|  +-- ble.s 17b88 <atan2f+0x17a>
        return PI / 2;
   17b80:	|  |   move.l #1070141403,d0
   17b86:	+--|-- bra.s 17bb6 <atan2f+0x1a8>
    } else if (x == 0 && y < 0) {
   17b88:	|  \-> clr.l -(sp)
   17b8a:	|      move.l 40(sp),-(sp)
   17b8e:	|      jsr 17572 <__eqsf2>
   17b94:	|      addq.l #8,sp
   17b96:	|      tst.l d0
   17b98:	|  /-- bne.s 17bb4 <atan2f+0x1a6>
   17b9a:	|  |   clr.l -(sp)
   17b9c:	|  |   move.l 36(sp),-(sp)
   17ba0:	|  |   jsr 178ac <__ltsf2>
   17ba6:	|  |   addq.l #8,sp
   17ba8:	|  |   tst.l d0
   17baa:	|  +-- bge.s 17bb4 <atan2f+0x1a6>
        return -PI / 2;
   17bac:	|  |   move.l #-1077342245,d0
   17bb2:	+--|-- bra.s 17bb6 <atan2f+0x1a8>
    } else {
        // This case is x == 0 and y == 0, atan2(0, 0) is undefined, but often treated as 0.
        return 0;
   17bb4:	|  \-> moveq #0,d0
    }
}
   17bb6:	\----> movea.l (sp)+,a6
   17bb8:	       lea 24(sp),sp
   17bbc:	       rts

00017bbe <sqrt>:

DOUBLE sqrt( DOUBLE input) {
   17bbe:	lea -24(sp),sp
   17bc2:	move.l a6,-(sp)
	return IEEEDPSqrt(input);
   17bc4:	move.l 32(sp),20(sp)
   17bca:	move.l 36(sp),24(sp)
   17bd0:	move.l 1c9e6 <MathIeeeDoubTransBase>,d0
   17bd6:	movea.l d0,a6
   17bd8:	move.l 20(sp),d0
   17bdc:	move.l 24(sp),d1
   17be0:	jsr -96(a6)
   17be4:	move.l d0,4(sp)
   17be8:	move.l d1,8(sp)
   17bec:	move.l 4(sp),12(sp)
   17bf2:	move.l 8(sp),16(sp)
   17bf8:	move.l 12(sp),d0
   17bfc:	move.l 16(sp),d1
}
   17c00:	movea.l (sp)+,a6
   17c02:	lea 24(sp),sp
   17c06:	rts

00017c08 <__mulsi3>:
	.section .text.__mulsi3,"ax",@progbits
	.type __mulsi3, function
	.globl	__mulsi3
__mulsi3:
	.cfi_startproc
	movew	sp@(4), d0	/* x0 -> d0 */
   17c08:	move.w 4(sp),d0
	muluw	sp@(10), d0	/* x0*y1 */
   17c0c:	mulu.w 10(sp),d0
	movew	sp@(6), d1	/* x1 -> d1 */
   17c10:	move.w 6(sp),d1
	muluw	sp@(8), d1	/* x1*y0 */
   17c14:	mulu.w 8(sp),d1
	addw	d1, d0
   17c18:	add.w d1,d0
	swap	d0
   17c1a:	swap d0
	clrw	d0
   17c1c:	clr.w d0
	movew	sp@(6), d1	/* x1 -> d1 */
   17c1e:	move.w 6(sp),d1
	muluw	sp@(10), d1	/* x1*y1 */
   17c22:	mulu.w 10(sp),d1
	addl	d1, d0
   17c26:	add.l d1,d0
	rts
   17c28:	rts

00017c2a <__udivsi3>:
	.section .text.__udivsi3,"ax",@progbits
	.type __udivsi3, function
	.globl	__udivsi3
__udivsi3:
	.cfi_startproc
	movel	d2, sp@-
   17c2a:	       move.l d2,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	sp@(12), d1	/* d1 = divisor */
   17c2c:	       move.l 12(sp),d1
	movel	sp@(8), d0	/* d0 = dividend */
   17c30:	       move.l 8(sp),d0

	cmpl	#0x10000, d1 /* divisor >= 2 ^ 16 ?   */
   17c34:	       cmpi.l #65536,d1
	jcc	3f		/* then try next algorithm */
   17c3a:	   /-- bcc.s 17c52 <__udivsi3+0x28>
	movel	d0, d2
   17c3c:	   |   move.l d0,d2
	clrw	d2
   17c3e:	   |   clr.w d2
	swap	d2
   17c40:	   |   swap d2
	divu	d1, d2          /* high quotient in lower word */
   17c42:	   |   divu.w d1,d2
	movew	d2, d0		/* save high quotient */
   17c44:	   |   move.w d2,d0
	swap	d0
   17c46:	   |   swap d0
	movew	sp@(10), d2	/* get low dividend + high rest */
   17c48:	   |   move.w 10(sp),d2
	divu	d1, d2		/* low quotient */
   17c4c:	   |   divu.w d1,d2
	movew	d2, d0
   17c4e:	   |   move.w d2,d0
	jra	6f
   17c50:	/--|-- bra.s 17c82 <__udivsi3+0x58>

3:	movel	d1, d2		/* use d2 as divisor backup */
   17c52:	|  \-> move.l d1,d2
4:	lsrl	#1, d1	/* shift divisor */
   17c54:	|  /-> lsr.l #1,d1
	lsrl	#1, d0	/* shift dividend */
   17c56:	|  |   lsr.l #1,d0
	cmpl	#0x10000, d1 /* still divisor >= 2 ^ 16 ?  */
   17c58:	|  |   cmpi.l #65536,d1
	jcc	4b
   17c5e:	|  \-- bcc.s 17c54 <__udivsi3+0x2a>
	divu	d1, d0		/* now we have 16-bit divisor */
   17c60:	|      divu.w d1,d0
	andl	#0xffff, d0 /* mask out divisor, ignore remainder */
   17c62:	|      andi.l #65535,d0

/* Multiply the 16-bit tentative quotient with the 32-bit divisor.  Because of
   the operand ranges, this might give a 33-bit product.  If this product is
   greater than the dividend, the tentative quotient was too large. */
	movel	d2, d1
   17c68:	|      move.l d2,d1
	mulu	d0, d1		/* low part, 32 bits */
   17c6a:	|      mulu.w d0,d1
	swap	d2
   17c6c:	|      swap d2
	mulu	d0, d2		/* high part, at most 17 bits */
   17c6e:	|      mulu.w d0,d2
	swap	d2		/* align high part with low part */
   17c70:	|      swap d2
	tstw	d2		/* high part 17 bits? */
   17c72:	|      tst.w d2
	jne	5f		/* if 17 bits, quotient was too large */
   17c74:	|  /-- bne.s 17c80 <__udivsi3+0x56>
	addl	d2, d1		/* add parts */
   17c76:	|  |   add.l d2,d1
	jcs	5f		/* if sum is 33 bits, quotient was too large */
   17c78:	|  +-- bcs.s 17c80 <__udivsi3+0x56>
	cmpl	sp@(8), d1	/* compare the sum with the dividend */
   17c7a:	|  |   cmp.l 8(sp),d1
	jls	6f		/* if sum > dividend, quotient was too large */
   17c7e:	+--|-- bls.s 17c82 <__udivsi3+0x58>
5:	subql	#1, d0	/* adjust quotient */
   17c80:	|  \-> subq.l #1,d0

6:	movel	sp@+, d2
   17c82:	\----> move.l (sp)+,d2
	.cfi_adjust_cfa_offset -4
	rts
   17c84:	       rts

00017c86 <__divsi3>:
	.section .text.__divsi3,"ax",@progbits
	.type __divsi3, function
	.globl	__divsi3
 __divsi3:
 	.cfi_startproc
	movel	d2, sp@-
   17c86:	    move.l d2,-(sp)
	.cfi_adjust_cfa_offset 4

	moveq	#1, d2	/* sign of result stored in d2 (=1 or =-1) */
   17c88:	    moveq #1,d2
	movel	sp@(12), d1	/* d1 = divisor */
   17c8a:	    move.l 12(sp),d1
	jpl	1f
   17c8e:	/-- bpl.s 17c94 <__divsi3+0xe>
	negl	d1
   17c90:	|   neg.l d1
	negb	d2		/* change sign because divisor <0  */
   17c92:	|   neg.b d2
1:	movel	sp@(8), d0	/* d0 = dividend */
   17c94:	\-> move.l 8(sp),d0
	jpl	2f
   17c98:	/-- bpl.s 17c9e <__divsi3+0x18>
	negl	d0
   17c9a:	|   neg.l d0
	negb	d2
   17c9c:	|   neg.b d2

2:	movel	d1, sp@-
   17c9e:	\-> move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   17ca0:	    move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__udivsi3	/* divide abs(dividend) by abs(divisor) */
   17ca2:	    jsr 17c2a <__udivsi3>
	addql	#8, sp
   17ca8:	    addq.l #8,sp
	.cfi_adjust_cfa_offset -8

	tstb	d2
   17caa:	    tst.b d2
	jpl	3f
   17cac:	/-- bpl.s 17cb0 <__divsi3+0x2a>
	negl	d0
   17cae:	|   neg.l d0

3:	movel	sp@+, d2
   17cb0:	\-> move.l (sp)+,d2
	.cfi_adjust_cfa_offset -4
	rts
   17cb2:	    rts

00017cb4 <__modsi3>:
	.section .text.__modsi3,"ax",@progbits
	.type __modsi3, function
	.globl	__modsi3
__modsi3:
	.cfi_startproc
	movel	sp@(8), d1	/* d1 = divisor */
   17cb4:	move.l 8(sp),d1
	movel	sp@(4), d0	/* d0 = dividend */
   17cb8:	move.l 4(sp),d0
	movel	d1, sp@-
   17cbc:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   17cbe:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__divsi3
   17cc0:	jsr 17c86 <__divsi3>
	addql	#8, sp
   17cc6:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(8), d1	/* d1 = divisor */
   17cc8:	move.l 8(sp),d1
	movel	d1, sp@-
   17ccc:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   17cce:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__mulsi3	/* d0 = (a/b)*b */
   17cd0:	jsr 17c08 <__mulsi3>
	addql	#8, sp
   17cd6:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(4), d1	/* d1 = dividend */
   17cd8:	move.l 4(sp),d1
	subl	d0, d1		/* d1 = a - (a/b)*b */
   17cdc:	sub.l d0,d1
	movel	d1, d0
   17cde:	move.l d1,d0
	rts
   17ce0:	rts

00017ce2 <__umodsi3>:
	.section .text.__umodsi3,"ax",@progbits
	.type __umodsi3, function
	.globl	__umodsi3
__umodsi3:
	.cfi_startproc
	movel	sp@(8), d1	/* d1 = divisor */
   17ce2:	move.l 8(sp),d1
	movel	sp@(4), d0	/* d0 = dividend */
   17ce6:	move.l 4(sp),d0
	movel	d1, sp@-
   17cea:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   17cec:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__udivsi3
   17cee:	jsr 17c2a <__udivsi3>
	addql	#8, sp
   17cf4:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(8), d1	/* d1 = divisor */
   17cf6:	move.l 8(sp),d1
	movel	d1, sp@-
   17cfa:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   17cfc:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__mulsi3	/* d0 = (a/b)*b */
   17cfe:	jsr 17c08 <__mulsi3>
	addql	#8, sp
   17d04:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(4), d1	/* d1 = dividend */
   17d06:	move.l 4(sp),d1
	subl	d0, d1		/* d1 = a - (a/b)*b */
   17d0a:	sub.l d0,d1
	movel	d1, d0
   17d0c:	move.l d1,d0
	rts
   17d0e:	rts

00017d10 <KPutCharX>:
	.type KPutCharX, function
	.globl	KPutCharX

KPutCharX:
	.cfi_startproc
    move.l  a6, -(sp)
   17d10:	move.l a6,-(sp)
	.cfi_adjust_cfa_offset 4
    move.l  4.w, a6
   17d12:	movea.l 4 <_start+0x4>,a6
    jsr     -0x204(a6)
   17d16:	jsr -516(a6)
    move.l (sp)+, a6
   17d1a:	movea.l (sp)+,a6
	.cfi_adjust_cfa_offset -4
    rts
   17d1c:	rts

00017d1e <PutChar>:
	.type PutChar, function
	.globl	PutChar

PutChar:
	.cfi_startproc
	move.b d0, (a3)+
   17d1e:	move.b d0,(a3)+
	rts
   17d20:	rts
