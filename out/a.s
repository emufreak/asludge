
out/a.elf:     file format elf32-m68k


Disassembly of section .text:

00000000 <_start>:
extern void (*__init_array_start[])() __attribute__((weak));
extern void (*__init_array_end[])() __attribute__((weak));
extern void (*__fini_array_start[])() __attribute__((weak));
extern void (*__fini_array_end[])() __attribute__((weak));

__attribute__((used)) __attribute__((section(".text.unlikely"))) void _start() {
       0:	       subq.l #8,sp
	// initialize globals, ctors etc.
	unsigned long count;
	unsigned long i;

	count = __preinit_array_end - __preinit_array_start;
       2:	       move.l #114872,d0
       8:	       subi.l #114872,d0
       e:	       asr.l #2,d0
      10:	       move.l d0,(sp)
	for (i = 0; i < count; i++)
      12:	       clr.l 4(sp)
      16:	   /-- bra.s 32 <_start+0x32>
		__preinit_array_start[i]();
      18:	/--|-> move.l 4(sp),d0
      1c:	|  |   add.l d0,d0
      1e:	|  |   movea.l d0,a1
      20:	|  |   adda.l d0,a1
      22:	|  |   lea 1c0b8 <allowAnyFilename>,a0
      28:	|  |   movea.l (0,a1,a0.l),a0
      2c:	|  |   jsr (a0)
	for (i = 0; i < count; i++)
      2e:	|  |   addq.l #1,4(sp)
      32:	|  \-> move.l 4(sp),d0
      36:	|      cmp.l (sp),d0
      38:	\----- bcs.s 18 <_start+0x18>

	count = __init_array_end - __init_array_start;
      3a:	       move.l #114872,d0
      40:	       subi.l #114872,d0
      46:	       asr.l #2,d0
      48:	       move.l d0,(sp)
	for (i = 0; i < count; i++)
      4a:	       clr.l 4(sp)
      4e:	   /-- bra.s 6a <_start+0x6a>
		__init_array_start[i]();
      50:	/--|-> move.l 4(sp),d0
      54:	|  |   add.l d0,d0
      56:	|  |   movea.l d0,a1
      58:	|  |   adda.l d0,a1
      5a:	|  |   lea 1c0b8 <allowAnyFilename>,a0
      60:	|  |   movea.l (0,a1,a0.l),a0
      64:	|  |   jsr (a0)
	for (i = 0; i < count; i++)
      66:	|  |   addq.l #1,4(sp)
      6a:	|  \-> move.l 4(sp),d0
      6e:	|      cmp.l (sp),d0
      70:	\----- bcs.s 50 <_start+0x50>

	main();
      72:	       jsr 7622 <main>

	// call dtors
	count = __fini_array_end - __fini_array_start;
      78:	       move.l #114872,d0
      7e:	       subi.l #114872,d0
      84:	       asr.l #2,d0
      86:	       move.l d0,(sp)
	for (i = count; i > 0; i--)
      88:	       move.l (sp),4(sp)
      8c:	   /-- bra.s aa <_start+0xaa>
		__fini_array_start[i - 1]();
      8e:	/--|-> move.l 4(sp),d0
      92:	|  |   subq.l #1,d0
      94:	|  |   add.l d0,d0
      96:	|  |   movea.l d0,a1
      98:	|  |   adda.l d0,a1
      9a:	|  |   lea 1c0b8 <allowAnyFilename>,a0
      a0:	|  |   movea.l (0,a1,a0.l),a0
      a4:	|  |   jsr (a0)
	for (i = count; i > 0; i--)
      a6:	|  |   subq.l #1,4(sp)
      aa:	|  \-> tst.l 4(sp)
      ae:	\----- bne.s 8e <_start+0x8e>
}
      b0:	       nop
      b2:	       nop
      b4:	       addq.l #8,sp
      b6:	       rts

000000b8 <copyString>:
#include "support/gcc8_c_support.h"
#include "moreio.h"

BOOL allowAnyFilename = TRUE;

char * copyString(const char * c) {
      b8:	       lea -16(sp),sp
      bc:	       move.l a6,-(sp)
    char * r = (char *)AllocVec(strlen(c) + 1, MEMF_ANY);
      be:	       move.l 24(sp),-(sp)
      c2:	       jsr 13c3a <strlen>
      c8:	       addq.l #4,sp
      ca:	       move.l d0,d1
      cc:	       addq.l #1,d1
      ce:	       move.l d1,16(sp)
      d2:	       clr.l 12(sp)
      d6:	       move.l 1c85c <SysBase>,d0
      dc:	       movea.l d0,a6
      de:	       move.l 16(sp),d0
      e2:	       move.l 12(sp),d1
      e6:	       jsr -684(a6)
      ea:	       move.l d0,8(sp)
      ee:	       move.l 8(sp),d0
      f2:	       move.l d0,4(sp)
    if (!r) return NULL;
      f6:	   /-- bne.s fc <copyString+0x44>
      f8:	   |   moveq #0,d0
      fa:	/--|-- bra.s 110 <copyString+0x58>
    strcpy(r, c);
      fc:	|  \-> move.l 24(sp),-(sp)
     100:	|      move.l 8(sp),-(sp)
     104:	|      jsr 13c52 <strcpy>
     10a:	|      addq.l #8,sp
    return r;
     10c:	|      move.l 4(sp),d0
}
     110:	\----> movea.l (sp)+,a6
     112:	       lea 16(sp),sp
     116:	       rts

00000118 <decodeFilename>:

char * decodeFilename(char * nameIn) {
     118:	                      lea -20(sp),sp
     11c:	                      move.l a6,-(sp)
	if (allowAnyFilename) {
     11e:	                      move.w 1c0b8 <allowAnyFilename>,d0
     124:	/-------------------- beq.w 2ea <decodeFilename+0x1d2>
		char * newName = (char *)AllocVec(strlen(nameIn) + 1, MEMF_ANY);
     128:	|                     move.l 28(sp),-(sp)
     12c:	|                     jsr 13c3a <strlen>
     132:	|                     addq.l #4,sp
     134:	|                     move.l d0,d1
     136:	|                     addq.l #1,d1
     138:	|                     move.l d1,16(sp)
     13c:	|                     clr.l 12(sp)
     140:	|                     move.l 1c85c <SysBase>,d0
     146:	|                     movea.l d0,a6
     148:	|                     move.l 16(sp),d0
     14c:	|                     move.l 12(sp),d1
     150:	|                     jsr -684(a6)
     154:	|                     move.l d0,8(sp)
     158:	|                     move.l 8(sp),d0
     15c:	|                     move.l d0,4(sp)
		if (!newName) return NULL;
     160:	|                 /-- bne.s 168 <decodeFilename+0x50>
     162:	|                 |   moveq #0,d0
     164:	|  /--------------|-- bra.w 2f6 <decodeFilename+0x1de>

		int i = 0;
     168:	|  |              \-> clr.l 20(sp)
		while (*nameIn) {
     16c:	|  |     /----------- bra.w 2ce <decodeFilename+0x1b6>
			if (*nameIn == '_') {
     170:	|  |  /--|----------> movea.l 28(sp),a0
     174:	|  |  |  |            move.b (a0),d0
     176:	|  |  |  |            cmpi.b #95,d0
     17a:	|  |  |  |  /-------- bne.w 2b4 <decodeFilename+0x19c>
				nameIn++;
     17e:	|  |  |  |  |         addq.l #1,28(sp)
				switch (*nameIn) {
     182:	|  |  |  |  |         movea.l 28(sp),a0
     186:	|  |  |  |  |         move.b (a0),d0
     188:	|  |  |  |  |         ext.w d0
     18a:	|  |  |  |  |         movea.w d0,a0
     18c:	|  |  |  |  |         moveq #-65,d0
     18e:	|  |  |  |  |         add.l a0,d0
     190:	|  |  |  |  |         moveq #20,d1
     192:	|  |  |  |  |         cmp.l d0,d1
     194:	|  |  |  |  |  /----- bcs.w 2a4 <decodeFilename+0x18c>
     198:	|  |  |  |  |  |      add.l d0,d0
     19a:	|  |  |  |  |  |      movea.l d0,a0
     19c:	|  |  |  |  |  |      adda.l #424,a0
     1a2:	|  |  |  |  |  |      move.w (a0),d0
     1a4:	|  |  |  |  |  |      jmp (1a8 <decodeFilename+0x90>,pc,d0.w)
     1a8:	|  |  |  |  |  |      .short 0x00d4
     1aa:	|  |  |  |  |  |      ori.l #12583164,(a0)+
     1b0:	|  |  |  |  |  |      .short 0x00fc
     1b2:	|  |  |  |  |  |      ori.l #4194556,252(a4)
     1ba:	|  |  |  |  |  |      .short 0x00fc
     1bc:	|  |  |  |  |  |      .short 0x00fc
     1be:	|  |  |  |  |  |      ori.b #-4,252(a2)
     1c4:	|  |  |  |  |  |      .short 0x00fc
     1c6:	|  |  |  |  |  |      ori.w #232,(a6)
     1ca:	|  |  |  |  |  |      .short 0x00fc
     1cc:	|  |  |  |  |  |      ori.l #16515180,d2
					case 'L':	newName[i] = '<';	nameIn++;	break;
     1d2:	|  |  |  |  |  |      move.l 20(sp),d0
     1d6:	|  |  |  |  |  |      movea.l 4(sp),a0
     1da:	|  |  |  |  |  |      adda.l d0,a0
     1dc:	|  |  |  |  |  |      move.b #60,(a0)
     1e0:	|  |  |  |  |  |      addq.l #1,28(sp)
     1e4:	|  |  |  |  |  |  /-- bra.w 2ca <decodeFilename+0x1b2>
					case 'G':	newName[i] = '>';	nameIn++;	break;
     1e8:	|  |  |  |  |  |  |   move.l 20(sp),d0
     1ec:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     1f0:	|  |  |  |  |  |  |   adda.l d0,a0
     1f2:	|  |  |  |  |  |  |   move.b #62,(a0)
     1f6:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     1fa:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'P':	newName[i] = '|';	nameIn++;	break;
     1fe:	|  |  |  |  |  |  |   move.l 20(sp),d0
     202:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     206:	|  |  |  |  |  |  |   adda.l d0,a0
     208:	|  |  |  |  |  |  |   move.b #124,(a0)
     20c:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     210:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'U':	newName[i] = '_';	nameIn++;	break;
     214:	|  |  |  |  |  |  |   move.l 20(sp),d0
     218:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     21c:	|  |  |  |  |  |  |   adda.l d0,a0
     21e:	|  |  |  |  |  |  |   move.b #95,(a0)
     222:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     226:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'S':	newName[i] = '\"';	nameIn++;	break;
     22a:	|  |  |  |  |  |  |   move.l 20(sp),d0
     22e:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     232:	|  |  |  |  |  |  |   adda.l d0,a0
     234:	|  |  |  |  |  |  |   move.b #34,(a0)
     238:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     23c:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'B':	newName[i] = '\\';	nameIn++;	break;
     240:	|  |  |  |  |  |  |   move.l 20(sp),d0
     244:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     248:	|  |  |  |  |  |  |   adda.l d0,a0
     24a:	|  |  |  |  |  |  |   move.b #92,(a0)
     24e:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     252:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'F':	newName[i] = '/';	nameIn++;	break;
     254:	|  |  |  |  |  |  |   move.l 20(sp),d0
     258:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     25c:	|  |  |  |  |  |  |   adda.l d0,a0
     25e:	|  |  |  |  |  |  |   move.b #47,(a0)
     262:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     266:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'C':	newName[i] = ':';	nameIn++;	break;
     268:	|  |  |  |  |  |  |   move.l 20(sp),d0
     26c:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     270:	|  |  |  |  |  |  |   adda.l d0,a0
     272:	|  |  |  |  |  |  |   move.b #58,(a0)
     276:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     27a:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'A':	newName[i] = '*';	nameIn++;	break;
     27c:	|  |  |  |  |  |  |   move.l 20(sp),d0
     280:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     284:	|  |  |  |  |  |  |   adda.l d0,a0
     286:	|  |  |  |  |  |  |   move.b #42,(a0)
     28a:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     28e:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'Q':	newName[i] = '?';	nameIn++;	break;
     290:	|  |  |  |  |  |  |   move.l 20(sp),d0
     294:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     298:	|  |  |  |  |  |  |   adda.l d0,a0
     29a:	|  |  |  |  |  |  |   move.b #63,(a0)
     29e:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     2a2:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					default:	newName[i] = '_';
     2a4:	|  |  |  |  |  \--|-> move.l 20(sp),d0
     2a8:	|  |  |  |  |     |   movea.l 4(sp),a0
     2ac:	|  |  |  |  |     |   adda.l d0,a0
     2ae:	|  |  |  |  |     |   move.b #95,(a0)
     2b2:	|  |  |  |  |     +-- bra.s 2ca <decodeFilename+0x1b2>
				}
			} else {
				newName[i] = *nameIn;
     2b4:	|  |  |  |  \-----|-> move.l 20(sp),d0
     2b8:	|  |  |  |        |   movea.l 4(sp),a0
     2bc:	|  |  |  |        |   adda.l d0,a0
     2be:	|  |  |  |        |   movea.l 28(sp),a1
     2c2:	|  |  |  |        |   move.b (a1),d0
     2c4:	|  |  |  |        |   move.b d0,(a0)
				nameIn++;
     2c6:	|  |  |  |        |   addq.l #1,28(sp)
			}
			i++;
     2ca:	|  |  |  |        \-> addq.l #1,20(sp)
		while (*nameIn) {
     2ce:	|  |  |  \----------> movea.l 28(sp),a0
     2d2:	|  |  |               move.b (a0),d0
     2d4:	|  |  \-------------- bne.w 170 <decodeFilename+0x58>
		}
		newName[i] = 0;
     2d8:	|  |                  move.l 20(sp),d0
     2dc:	|  |                  movea.l 4(sp),a0
     2e0:	|  |                  adda.l d0,a0
     2e2:	|  |                  clr.b (a0)
		return newName;
     2e4:	|  |                  move.l 4(sp),d0
     2e8:	|  +----------------- bra.s 2f6 <decodeFilename+0x1de>
	} else {
		return copyString(nameIn);
     2ea:	\--|----------------> move.l 28(sp),-(sp)
     2ee:	   |                  jsr b8 <copyString>
     2f4:	   |                  addq.l #4,sp
	}
}
     2f6:	   \----------------> movea.l (sp)+,a6
     2f8:	                      lea 20(sp),sp
     2fc:	                      rts

000002fe <encodeFilename>:

char * encodeFilename (char * nameIn) {
     2fe:	                      lea -24(sp),sp
     302:	                      move.l a6,-(sp)
	if (! nameIn) return NULL;
     304:	                      tst.l 32(sp)
     308:	                  /-- bne.s 310 <encodeFilename+0x12>
     30a:	                  |   moveq #0,d0
     30c:	/-----------------|-- bra.w 688 <encodeFilename+0x38a>
	if (allowAnyFilename) {
     310:	|                 \-> move.w 1c0b8 <allowAnyFilename>,d0
     316:	|  /----------------- beq.w 644 <encodeFilename+0x346>
		char * newName = AllocVec( strlen(nameIn)*2+1,MEMF_ANY);
     31a:	|  |                  move.l 32(sp),-(sp)
     31e:	|  |                  jsr 13c3a <strlen>
     324:	|  |                  addq.l #4,sp
     326:	|  |                  add.l d0,d0
     328:	|  |                  move.l d0,d1
     32a:	|  |                  addq.l #1,d1
     32c:	|  |                  move.l d1,16(sp)
     330:	|  |                  clr.l 12(sp)
     334:	|  |                  move.l 1c85c <SysBase>,d0
     33a:	|  |                  movea.l d0,a6
     33c:	|  |                  move.l 16(sp),d0
     340:	|  |                  move.l 12(sp),d1
     344:	|  |                  jsr -684(a6)
     348:	|  |                  move.l d0,8(sp)
     34c:	|  |                  move.l 8(sp),d0
     350:	|  |                  move.l d0,4(sp)
		if(newName == 0) {
     354:	|  |              /-- bne.s 36a <encodeFilename+0x6c>
			KPrintF( "encodefilename: Could not allocate Memory");
     356:	|  |              |   pea 17c4e <PutChar+0x4>
     35c:	|  |              |   jsr 17176 <KPrintF>
     362:	|  |              |   addq.l #4,sp
			return NULL;
     364:	|  |              |   moveq #0,d0
     366:	+--|--------------|-- bra.w 688 <encodeFilename+0x38a>
		}

		int i = 0;
     36a:	|  |              \-> clr.l 24(sp)
		while (*nameIn) {
     36e:	|  |     /----------- bra.w 634 <encodeFilename+0x336>
			switch (*nameIn) {
     372:	|  |  /--|----------> movea.l 32(sp),a0
     376:	|  |  |  |            move.b (a0),d0
     378:	|  |  |  |            ext.w d0
     37a:	|  |  |  |            movea.w d0,a0
     37c:	|  |  |  |            moveq #95,d0
     37e:	|  |  |  |            cmp.l a0,d0
     380:	|  |  |  |        /-- blt.w 424 <encodeFilename+0x126>
     384:	|  |  |  |        |   moveq #34,d1
     386:	|  |  |  |        |   cmp.l a0,d1
     388:	|  |  |  |  /-----|-- bgt.w 608 <encodeFilename+0x30a>
     38c:	|  |  |  |  |     |   moveq #-34,d0
     38e:	|  |  |  |  |     |   add.l a0,d0
     390:	|  |  |  |  |     |   moveq #61,d1
     392:	|  |  |  |  |     |   cmp.l d0,d1
     394:	|  |  |  |  +-----|-- bcs.w 608 <encodeFilename+0x30a>
     398:	|  |  |  |  |     |   add.l d0,d0
     39a:	|  |  |  |  |     |   movea.l d0,a0
     39c:	|  |  |  |  |     |   adda.l #936,a0
     3a2:	|  |  |  |  |     |   move.w (a0),d0
     3a4:	|  |  |  |  |     |   jmp (3a8 <encodeFilename+0xaa>,pc,d0.w)
     3a8:	|  |  |  |  |     |   bchg d0,d6
     3aa:	|  |  |  |  |     |   andi.w #608,-(a0)
     3ae:	|  |  |  |  |     |   andi.w #608,-(a0)
     3b2:	|  |  |  |  |     |   andi.w #608,-(a0)
     3b6:	|  |  |  |  |     |   andi.w #516,-(a0)
     3ba:	|  |  |  |  |     |   andi.w #608,-(a0)
     3be:	|  |  |  |  |     |   andi.w #608,-(a0)
     3c2:	|  |  |  |  |     |   bclr d0,-(a6)
     3c4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3c8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3cc:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d0:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d8:	|  |  |  |  |     |   bset d0,(a6)
     3da:	|  |  |  |  |     |   andi.w #134,-(a0)
     3de:	|  |  |  |  |     |   andi.w #182,-(a0)
     3e2:	|  |  |  |  |     |   andi.b #96,(96,a2,d0.w:2)
     3e8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3ec:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f0:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3fc:	|  |  |  |  |     |   andi.w #608,-(a0)
     400:	|  |  |  |  |     |   andi.w #608,-(a0)
     404:	|  |  |  |  |     |   andi.w #608,-(a0)
     408:	|  |  |  |  |     |   andi.w #608,-(a0)
     40c:	|  |  |  |  |     |   andi.w #608,-(a0)
     410:	|  |  |  |  |     |   andi.w #608,-(a0)
     414:	|  |  |  |  |     |   andi.w #608,-(a0)
     418:	|  |  |  |  |     |   andi.w #608,-(a0)
     41c:	|  |  |  |  |     |   bchg d0,(96,a6,d0.w:2)
     420:	|  |  |  |  |     |   andi.w #278,-(a0)
     424:	|  |  |  |  |     \-> moveq #124,d0
     426:	|  |  |  |  |         cmp.l a0,d0
     428:	|  |  |  |  |     /-- beq.s 48e <encodeFilename+0x190>
     42a:	|  |  |  |  +-----|-- bra.w 608 <encodeFilename+0x30a>
				case '<':	newName[i++] = '_';		newName[i++] = 'L';		break;
     42e:	|  |  |  |  |     |   move.l 24(sp),d0
     432:	|  |  |  |  |     |   move.l d0,d1
     434:	|  |  |  |  |     |   addq.l #1,d1
     436:	|  |  |  |  |     |   move.l d1,24(sp)
     43a:	|  |  |  |  |     |   movea.l 4(sp),a0
     43e:	|  |  |  |  |     |   adda.l d0,a0
     440:	|  |  |  |  |     |   move.b #95,(a0)
     444:	|  |  |  |  |     |   move.l 24(sp),d0
     448:	|  |  |  |  |     |   move.l d0,d1
     44a:	|  |  |  |  |     |   addq.l #1,d1
     44c:	|  |  |  |  |     |   move.l d1,24(sp)
     450:	|  |  |  |  |     |   movea.l 4(sp),a0
     454:	|  |  |  |  |     |   adda.l d0,a0
     456:	|  |  |  |  |     |   move.b #76,(a0)
     45a:	|  |  |  |  |  /--|-- bra.w 624 <encodeFilename+0x326>
				case '>':	newName[i++] = '_';		newName[i++] = 'G';		break;
     45e:	|  |  |  |  |  |  |   move.l 24(sp),d0
     462:	|  |  |  |  |  |  |   move.l d0,d1
     464:	|  |  |  |  |  |  |   addq.l #1,d1
     466:	|  |  |  |  |  |  |   move.l d1,24(sp)
     46a:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     46e:	|  |  |  |  |  |  |   adda.l d0,a0
     470:	|  |  |  |  |  |  |   move.b #95,(a0)
     474:	|  |  |  |  |  |  |   move.l 24(sp),d0
     478:	|  |  |  |  |  |  |   move.l d0,d1
     47a:	|  |  |  |  |  |  |   addq.l #1,d1
     47c:	|  |  |  |  |  |  |   move.l d1,24(sp)
     480:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     484:	|  |  |  |  |  |  |   adda.l d0,a0
     486:	|  |  |  |  |  |  |   move.b #71,(a0)
     48a:	|  |  |  |  |  +--|-- bra.w 624 <encodeFilename+0x326>
				case '|':	newName[i++] = '_';		newName[i++] = 'P';		break;
     48e:	|  |  |  |  |  |  \-> move.l 24(sp),d0
     492:	|  |  |  |  |  |      move.l d0,d1
     494:	|  |  |  |  |  |      addq.l #1,d1
     496:	|  |  |  |  |  |      move.l d1,24(sp)
     49a:	|  |  |  |  |  |      movea.l 4(sp),a0
     49e:	|  |  |  |  |  |      adda.l d0,a0
     4a0:	|  |  |  |  |  |      move.b #95,(a0)
     4a4:	|  |  |  |  |  |      move.l 24(sp),d0
     4a8:	|  |  |  |  |  |      move.l d0,d1
     4aa:	|  |  |  |  |  |      addq.l #1,d1
     4ac:	|  |  |  |  |  |      move.l d1,24(sp)
     4b0:	|  |  |  |  |  |      movea.l 4(sp),a0
     4b4:	|  |  |  |  |  |      adda.l d0,a0
     4b6:	|  |  |  |  |  |      move.b #80,(a0)
     4ba:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '_':	newName[i++] = '_';		newName[i++] = 'U';		break;
     4be:	|  |  |  |  |  |      move.l 24(sp),d0
     4c2:	|  |  |  |  |  |      move.l d0,d1
     4c4:	|  |  |  |  |  |      addq.l #1,d1
     4c6:	|  |  |  |  |  |      move.l d1,24(sp)
     4ca:	|  |  |  |  |  |      movea.l 4(sp),a0
     4ce:	|  |  |  |  |  |      adda.l d0,a0
     4d0:	|  |  |  |  |  |      move.b #95,(a0)
     4d4:	|  |  |  |  |  |      move.l 24(sp),d0
     4d8:	|  |  |  |  |  |      move.l d0,d1
     4da:	|  |  |  |  |  |      addq.l #1,d1
     4dc:	|  |  |  |  |  |      move.l d1,24(sp)
     4e0:	|  |  |  |  |  |      movea.l 4(sp),a0
     4e4:	|  |  |  |  |  |      adda.l d0,a0
     4e6:	|  |  |  |  |  |      move.b #85,(a0)
     4ea:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '\"':	newName[i++] = '_';		newName[i++] = 'S';		break;
     4ee:	|  |  |  |  |  |      move.l 24(sp),d0
     4f2:	|  |  |  |  |  |      move.l d0,d1
     4f4:	|  |  |  |  |  |      addq.l #1,d1
     4f6:	|  |  |  |  |  |      move.l d1,24(sp)
     4fa:	|  |  |  |  |  |      movea.l 4(sp),a0
     4fe:	|  |  |  |  |  |      adda.l d0,a0
     500:	|  |  |  |  |  |      move.b #95,(a0)
     504:	|  |  |  |  |  |      move.l 24(sp),d0
     508:	|  |  |  |  |  |      move.l d0,d1
     50a:	|  |  |  |  |  |      addq.l #1,d1
     50c:	|  |  |  |  |  |      move.l d1,24(sp)
     510:	|  |  |  |  |  |      movea.l 4(sp),a0
     514:	|  |  |  |  |  |      adda.l d0,a0
     516:	|  |  |  |  |  |      move.b #83,(a0)
     51a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '\\':	newName[i++] = '_';		newName[i++] = 'B';		break;
     51e:	|  |  |  |  |  |      move.l 24(sp),d0
     522:	|  |  |  |  |  |      move.l d0,d1
     524:	|  |  |  |  |  |      addq.l #1,d1
     526:	|  |  |  |  |  |      move.l d1,24(sp)
     52a:	|  |  |  |  |  |      movea.l 4(sp),a0
     52e:	|  |  |  |  |  |      adda.l d0,a0
     530:	|  |  |  |  |  |      move.b #95,(a0)
     534:	|  |  |  |  |  |      move.l 24(sp),d0
     538:	|  |  |  |  |  |      move.l d0,d1
     53a:	|  |  |  |  |  |      addq.l #1,d1
     53c:	|  |  |  |  |  |      move.l d1,24(sp)
     540:	|  |  |  |  |  |      movea.l 4(sp),a0
     544:	|  |  |  |  |  |      adda.l d0,a0
     546:	|  |  |  |  |  |      move.b #66,(a0)
     54a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '/':	newName[i++] = '_';		newName[i++] = 'F';		break;
     54e:	|  |  |  |  |  |      move.l 24(sp),d0
     552:	|  |  |  |  |  |      move.l d0,d1
     554:	|  |  |  |  |  |      addq.l #1,d1
     556:	|  |  |  |  |  |      move.l d1,24(sp)
     55a:	|  |  |  |  |  |      movea.l 4(sp),a0
     55e:	|  |  |  |  |  |      adda.l d0,a0
     560:	|  |  |  |  |  |      move.b #95,(a0)
     564:	|  |  |  |  |  |      move.l 24(sp),d0
     568:	|  |  |  |  |  |      move.l d0,d1
     56a:	|  |  |  |  |  |      addq.l #1,d1
     56c:	|  |  |  |  |  |      move.l d1,24(sp)
     570:	|  |  |  |  |  |      movea.l 4(sp),a0
     574:	|  |  |  |  |  |      adda.l d0,a0
     576:	|  |  |  |  |  |      move.b #70,(a0)
     57a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case ':':	newName[i++] = '_';		newName[i++] = 'C';		break;
     57e:	|  |  |  |  |  |      move.l 24(sp),d0
     582:	|  |  |  |  |  |      move.l d0,d1
     584:	|  |  |  |  |  |      addq.l #1,d1
     586:	|  |  |  |  |  |      move.l d1,24(sp)
     58a:	|  |  |  |  |  |      movea.l 4(sp),a0
     58e:	|  |  |  |  |  |      adda.l d0,a0
     590:	|  |  |  |  |  |      move.b #95,(a0)
     594:	|  |  |  |  |  |      move.l 24(sp),d0
     598:	|  |  |  |  |  |      move.l d0,d1
     59a:	|  |  |  |  |  |      addq.l #1,d1
     59c:	|  |  |  |  |  |      move.l d1,24(sp)
     5a0:	|  |  |  |  |  |      movea.l 4(sp),a0
     5a4:	|  |  |  |  |  |      adda.l d0,a0
     5a6:	|  |  |  |  |  |      move.b #67,(a0)
     5aa:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>
				case '*':	newName[i++] = '_';		newName[i++] = 'A';		break;
     5ac:	|  |  |  |  |  |      move.l 24(sp),d0
     5b0:	|  |  |  |  |  |      move.l d0,d1
     5b2:	|  |  |  |  |  |      addq.l #1,d1
     5b4:	|  |  |  |  |  |      move.l d1,24(sp)
     5b8:	|  |  |  |  |  |      movea.l 4(sp),a0
     5bc:	|  |  |  |  |  |      adda.l d0,a0
     5be:	|  |  |  |  |  |      move.b #95,(a0)
     5c2:	|  |  |  |  |  |      move.l 24(sp),d0
     5c6:	|  |  |  |  |  |      move.l d0,d1
     5c8:	|  |  |  |  |  |      addq.l #1,d1
     5ca:	|  |  |  |  |  |      move.l d1,24(sp)
     5ce:	|  |  |  |  |  |      movea.l 4(sp),a0
     5d2:	|  |  |  |  |  |      adda.l d0,a0
     5d4:	|  |  |  |  |  |      move.b #65,(a0)
     5d8:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>
				case '?':	newName[i++] = '_';		newName[i++] = 'Q';		break;
     5da:	|  |  |  |  |  |      move.l 24(sp),d0
     5de:	|  |  |  |  |  |      move.l d0,d1
     5e0:	|  |  |  |  |  |      addq.l #1,d1
     5e2:	|  |  |  |  |  |      move.l d1,24(sp)
     5e6:	|  |  |  |  |  |      movea.l 4(sp),a0
     5ea:	|  |  |  |  |  |      adda.l d0,a0
     5ec:	|  |  |  |  |  |      move.b #95,(a0)
     5f0:	|  |  |  |  |  |      move.l 24(sp),d0
     5f4:	|  |  |  |  |  |      move.l d0,d1
     5f6:	|  |  |  |  |  |      addq.l #1,d1
     5f8:	|  |  |  |  |  |      move.l d1,24(sp)
     5fc:	|  |  |  |  |  |      movea.l 4(sp),a0
     600:	|  |  |  |  |  |      adda.l d0,a0
     602:	|  |  |  |  |  |      move.b #81,(a0)
     606:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>

				default:	newName[i++] = *nameIn;							break;
     608:	|  |  |  |  \--|----> move.l 24(sp),d0
     60c:	|  |  |  |     |      move.l d0,d1
     60e:	|  |  |  |     |      addq.l #1,d1
     610:	|  |  |  |     |      move.l d1,24(sp)
     614:	|  |  |  |     |      movea.l 4(sp),a0
     618:	|  |  |  |     |      adda.l d0,a0
     61a:	|  |  |  |     |      movea.l 32(sp),a1
     61e:	|  |  |  |     |      move.b (a1),d0
     620:	|  |  |  |     |      move.b d0,(a0)
     622:	|  |  |  |     |      nop
			}
			newName[i] = 0;
     624:	|  |  |  |     \----> move.l 24(sp),d0
     628:	|  |  |  |            movea.l 4(sp),a0
     62c:	|  |  |  |            adda.l d0,a0
     62e:	|  |  |  |            clr.b (a0)
			nameIn ++;
     630:	|  |  |  |            addq.l #1,32(sp)
		while (*nameIn) {
     634:	|  |  |  \----------> movea.l 32(sp),a0
     638:	|  |  |               move.b (a0),d0
     63a:	|  |  \-------------- bne.w 372 <encodeFilename+0x74>
		}
		return newName;
     63e:	|  |                  move.l 4(sp),d0
     642:	+--|----------------- bra.s 688 <encodeFilename+0x38a>
	} else {
		int a;
		for (a = 0; nameIn[a]; a ++) {
     644:	|  \----------------> clr.l 20(sp)
     648:	|              /----- bra.s 66e <encodeFilename+0x370>
			if (nameIn[a] == '\\') nameIn[a] ='/';
     64a:	|           /--|----> move.l 20(sp),d0
     64e:	|           |  |      movea.l 32(sp),a0
     652:	|           |  |      adda.l d0,a0
     654:	|           |  |      move.b (a0),d0
     656:	|           |  |      cmpi.b #92,d0
     65a:	|           |  |  /-- bne.s 66a <encodeFilename+0x36c>
     65c:	|           |  |  |   move.l 20(sp),d0
     660:	|           |  |  |   movea.l 32(sp),a0
     664:	|           |  |  |   adda.l d0,a0
     666:	|           |  |  |   move.b #47,(a0)
		for (a = 0; nameIn[a]; a ++) {
     66a:	|           |  |  \-> addq.l #1,20(sp)
     66e:	|           |  \----> move.l 20(sp),d0
     672:	|           |         movea.l 32(sp),a0
     676:	|           |         adda.l d0,a0
     678:	|           |         move.b (a0),d0
     67a:	|           \-------- bne.s 64a <encodeFilename+0x34c>
		}

		return copyString (nameIn);
     67c:	|                     move.l 32(sp),-(sp)
     680:	|                     jsr b8 <copyString>
     686:	|                     addq.l #4,sp
	}
}
     688:	\-------------------> movea.l (sp)+,a6
     68a:	                      lea 24(sp),sp
     68e:	                      rts

00000690 <FLOATSwap>:

FLOAT FLOATSwap( FLOAT f )
{
     690:	subq.l #8,sp
	{
		FLOAT f;
		unsigned char b[4];
	} dat1, dat2;

	dat1.f = f;
     692:	move.l 12(sp),4(sp)
	dat2.b[0] = dat1.b[3];
     698:	move.b 7(sp),d0
     69c:	move.b d0,(sp)
	dat2.b[1] = dat1.b[2];
     69e:	move.b 6(sp),d0
     6a2:	move.b d0,1(sp)
	dat2.b[2] = dat1.b[1];
     6a6:	move.b 5(sp),d0
     6aa:	move.b d0,2(sp)
	dat2.b[3] = dat1.b[0];
     6ae:	move.b 4(sp),d0
     6b2:	move.b d0,3(sp)
	return dat2.f;
     6b6:	move.l (sp),d0
}
     6b8:	addq.l #8,sp
     6ba:	rts

000006bc <get2bytes>:

int get2bytes (BPTR fp) {
     6bc:	lea -24(sp),sp
     6c0:	move.l a6,-(sp)
	int f1, f2;

	f1 = FGetC (fp);
     6c2:	move.l 32(sp),24(sp)
     6c8:	move.l 1c864 <DOSBase>,d0
     6ce:	movea.l d0,a6
     6d0:	move.l 24(sp),d1
     6d4:	jsr -306(a6)
     6d8:	move.l d0,20(sp)
     6dc:	move.l 20(sp),d0
     6e0:	move.l d0,16(sp)
	f2 = FGetC (fp);
     6e4:	move.l 32(sp),12(sp)
     6ea:	move.l 1c864 <DOSBase>,d0
     6f0:	movea.l d0,a6
     6f2:	move.l 12(sp),d1
     6f6:	jsr -306(a6)
     6fa:	move.l d0,8(sp)
     6fe:	move.l 8(sp),d0
     702:	move.l d0,4(sp)

	return (f1 * 256 + f2);
     706:	move.l 16(sp),d0
     70a:	lsl.l #8,d0
     70c:	add.l 4(sp),d0
}
     710:	movea.l (sp)+,a6
     712:	lea 24(sp),sp
     716:	rts

00000718 <get4bytes>:

ULONG get4bytes (BPTR fp) {
     718:	lea -52(sp),sp
     71c:	move.l a6,-(sp)
	int f1, f2, f3, f4;

	f1 = FGetC (fp);
     71e:	move.l 60(sp),52(sp)
     724:	move.l 1c864 <DOSBase>,d0
     72a:	movea.l d0,a6
     72c:	move.l 52(sp),d1
     730:	jsr -306(a6)
     734:	move.l d0,48(sp)
     738:	move.l 48(sp),d0
     73c:	move.l d0,44(sp)
	f2 = FGetC (fp);
     740:	move.l 60(sp),40(sp)
     746:	move.l 1c864 <DOSBase>,d0
     74c:	movea.l d0,a6
     74e:	move.l 40(sp),d1
     752:	jsr -306(a6)
     756:	move.l d0,36(sp)
     75a:	move.l 36(sp),d0
     75e:	move.l d0,32(sp)
	f3 = FGetC (fp);
     762:	move.l 60(sp),28(sp)
     768:	move.l 1c864 <DOSBase>,d0
     76e:	movea.l d0,a6
     770:	move.l 28(sp),d1
     774:	jsr -306(a6)
     778:	move.l d0,24(sp)
     77c:	move.l 24(sp),d0
     780:	move.l d0,20(sp)
	f4 = FGetC (fp);
     784:	move.l 60(sp),16(sp)
     78a:	move.l 1c864 <DOSBase>,d0
     790:	movea.l d0,a6
     792:	move.l 16(sp),d1
     796:	jsr -306(a6)
     79a:	move.l d0,12(sp)
     79e:	move.l 12(sp),d0
     7a2:	move.l d0,8(sp)

	ULONG x = f1 + f2*256 + f3*256*256 + f4*256*256*256;
     7a6:	move.l 32(sp),d0
     7aa:	lsl.l #8,d0
     7ac:	move.l d0,d1
     7ae:	add.l 44(sp),d1
     7b2:	move.l 20(sp),d0
     7b6:	swap d0
     7b8:	clr.w d0
     7ba:	add.l d0,d1
     7bc:	move.l 8(sp),d0
     7c0:	lsl.w #8,d0
     7c2:	swap d0
     7c4:	clr.w d0
     7c6:	add.l d1,d0
     7c8:	move.l d0,4(sp)

	return x;
     7cc:	move.l 4(sp),d0
}
     7d0:	movea.l (sp)+,a6
     7d2:	lea 52(sp),sp
     7d6:	rts

000007d8 <getFloat>:

FLOAT getFloat (BPTR fp) {
     7d8:	    lea -28(sp),sp
     7dc:	    movem.l d2-d4/a6,-(sp)
	FLOAT f;
	LONG blocks_read = FRead( fp, &f, sizeof (FLOAT), 1 ); 
     7e0:	    move.l 48(sp),40(sp)
     7e6:	    lea 44(sp),a0
     7ea:	    lea -28(a0),a0
     7ee:	    move.l a0,36(sp)
     7f2:	    moveq #4,d0
     7f4:	    move.l d0,32(sp)
     7f8:	    moveq #1,d0
     7fa:	    move.l d0,28(sp)
     7fe:	    move.l 1c864 <DOSBase>,d0
     804:	    movea.l d0,a6
     806:	    move.l 40(sp),d1
     80a:	    move.l 36(sp),d2
     80e:	    move.l 32(sp),d3
     812:	    move.l 28(sp),d4
     816:	    jsr -324(a6)
     81a:	    move.l d0,24(sp)
     81e:	    move.l 24(sp),d0
     822:	    move.l d0,20(sp)
	if (blocks_read != 1) {
     826:	    moveq #1,d0
     828:	    cmp.l 20(sp),d0
     82c:	/-- beq.s 83c <getFloat+0x64>
		KPrintF("Reading error in getFloat.\n");
     82e:	|   pea 17c78 <PutChar+0x2e>
     834:	|   jsr 17176 <KPrintF>
     83a:	|   addq.l #4,sp
	}
	return FLOATSwap(f);
     83c:	\-> move.l 16(sp),d0
     840:	    move.l d0,-(sp)
     842:	    jsr 690 <FLOATSwap>
     848:	    addq.l #4,sp
	return f;
}
     84a:	    movem.l (sp)+,d2-d4/a6
     84e:	    lea 28(sp),sp
     852:	    rts

00000854 <getSigned>:

short getSigned (BPTR fp) {
     854:	    lea -24(sp),sp
     858:	    movem.l d2-d3/a6,-(sp)
	short f;
	LONG bytes_read = Read(fp, &f, sizeof(short));
     85c:	    move.l 40(sp),32(sp)
     862:	    lea 36(sp),a0
     866:	    lea -22(a0),a0
     86a:	    move.l a0,28(sp)
     86e:	    moveq #2,d0
     870:	    move.l d0,24(sp)
     874:	    move.l 1c864 <DOSBase>,d0
     87a:	    movea.l d0,a6
     87c:	    move.l 32(sp),d1
     880:	    move.l 28(sp),d2
     884:	    move.l 24(sp),d3
     888:	    jsr -42(a6)
     88c:	    move.l d0,20(sp)
     890:	    move.l 20(sp),d0
     894:	    move.l d0,16(sp)
	if (bytes_read != sizeof (short)) {
     898:	    moveq #2,d0
     89a:	    cmp.l 16(sp),d0
     89e:	/-- beq.s 8ae <getSigned+0x5a>
		KPrintF("getSigned: Reading error in getSigned.\n");
     8a0:	|   pea 17c94 <PutChar+0x4a>
     8a6:	|   jsr 17176 <KPrintF>
     8ac:	|   addq.l #4,sp
	}
	f = shortSwap(f);
     8ae:	\-> move.w 14(sp),d0
     8b2:	    movea.w d0,a0
     8b4:	    move.l a0,-(sp)
     8b6:	    jsr baa <shortSwap>
     8bc:	    addq.l #4,sp
     8be:	    move.w d0,14(sp)
	return f;
     8c2:	    move.w 14(sp),d0
}
     8c6:	    movem.l (sp)+,d2-d3/a6
     8ca:	    lea 24(sp),sp
     8ce:	    rts

000008d0 <put2bytes>:

void put2bytes (int numtoput, BPTR fp) {
     8d0:	    lea -24(sp),sp
     8d4:	    move.l a6,-(sp)
     8d6:	    move.l d2,-(sp)
	FPutC( fp, (char) (numtoput / 256));
     8d8:	    move.l 40(sp),28(sp)
     8de:	    move.l 36(sp),d0
     8e2:	/-- bpl.s 8ea <put2bytes+0x1a>
     8e4:	|   addi.l #255,d0
     8ea:	\-> asr.l #8,d0
     8ec:	    move.l d0,d0
     8ee:	    ext.w d0
     8f0:	    movea.w d0,a0
     8f2:	    move.l a0,24(sp)
     8f6:	    move.l 1c864 <DOSBase>,d0
     8fc:	    movea.l d0,a6
     8fe:	    move.l 28(sp),d1
     902:	    move.l 24(sp),d2
     906:	    jsr -312(a6)
     90a:	    move.l d0,20(sp)
	FPutC( fp, (char) (numtoput % 256));
     90e:	    move.l 40(sp),16(sp)
     914:	    move.l 36(sp),d0
     918:	    andi.l #-2147483393,d0
     91e:	/-- bpl.s 92a <put2bytes+0x5a>
     920:	|   subq.l #1,d0
     922:	|   moveq #-1,d1
     924:	|   not.b d1
     926:	|   or.l d1,d0
     928:	|   addq.l #1,d0
     92a:	\-> move.l d0,d0
     92c:	    ext.w d0
     92e:	    movea.w d0,a0
     930:	    move.l a0,12(sp)
     934:	    move.l 1c864 <DOSBase>,d0
     93a:	    movea.l d0,a6
     93c:	    move.l 16(sp),d1
     940:	    move.l 12(sp),d2
     944:	    jsr -312(a6)
     948:	    move.l d0,8(sp)
}
     94c:	    nop
     94e:	    move.l (sp)+,d2
     950:	    movea.l (sp)+,a6
     952:	    lea 24(sp),sp
     956:	    rts

00000958 <put4bytes>:

void put4bytes (ULONG i, BPTR fp) {
     958:	lea -52(sp),sp
     95c:	move.l a6,-(sp)
     95e:	move.l d2,-(sp)
	//	fwrite (&i, sizeof (long int), 1, fp);
	unsigned char f1, f2, f3, f4;

	f4 = i / (256*256*256);
     960:	move.l 64(sp),d0
     964:	clr.w d0
     966:	swap d0
     968:	lsr.w #8,d0
     96a:	move.b d0,59(sp)
	i = i % (256*256*256);
     96e:	andi.l #16777215,64(sp)
	f3 = i / (256*256);
     976:	move.l 64(sp),d0
     97a:	clr.w d0
     97c:	swap d0
     97e:	move.b d0,58(sp)
	i = i % (256*256);
     982:	andi.l #65535,64(sp)
	f2 = i / 256;
     98a:	move.l 64(sp),d0
     98e:	lsr.l #8,d0
     990:	move.b d0,57(sp)
	f1 = i % 256;
     994:	move.b 67(sp),56(sp)

	FPutC (fp,f1);
     99a:	move.l 68(sp),52(sp)
     9a0:	moveq #0,d0
     9a2:	move.b 56(sp),d0
     9a6:	move.l d0,48(sp)
     9aa:	move.l 1c864 <DOSBase>,d0
     9b0:	movea.l d0,a6
     9b2:	move.l 52(sp),d1
     9b6:	move.l 48(sp),d2
     9ba:	jsr -312(a6)
     9be:	move.l d0,44(sp)
	FPutC (fp,f2);
     9c2:	move.l 68(sp),40(sp)
     9c8:	moveq #0,d0
     9ca:	move.b 57(sp),d0
     9ce:	move.l d0,36(sp)
     9d2:	move.l 1c864 <DOSBase>,d0
     9d8:	movea.l d0,a6
     9da:	move.l 40(sp),d1
     9de:	move.l 36(sp),d2
     9e2:	jsr -312(a6)
     9e6:	move.l d0,32(sp)
	FPutC (fp,f3);
     9ea:	move.l 68(sp),28(sp)
     9f0:	moveq #0,d0
     9f2:	move.b 58(sp),d0
     9f6:	move.l d0,24(sp)
     9fa:	move.l 1c864 <DOSBase>,d0
     a00:	movea.l d0,a6
     a02:	move.l 28(sp),d1
     a06:	move.l 24(sp),d2
     a0a:	jsr -312(a6)
     a0e:	move.l d0,20(sp)
	FPutC (fp,f4);
     a12:	move.l 68(sp),16(sp)
     a18:	moveq #0,d0
     a1a:	move.b 59(sp),d0
     a1e:	move.l d0,12(sp)
     a22:	move.l 1c864 <DOSBase>,d0
     a28:	movea.l d0,a6
     a2a:	move.l 16(sp),d1
     a2e:	move.l 12(sp),d2
     a32:	jsr -312(a6)
     a36:	move.l d0,8(sp)
}
     a3a:	nop
     a3c:	move.l (sp)+,d2
     a3e:	movea.l (sp)+,a6
     a40:	lea 52(sp),sp
     a44:	rts

00000a46 <putFloat>:

void putFloat (FLOAT f, BPTR fp) {
     a46:	lea -16(sp),sp
     a4a:	movem.l d2-d3/a6,-(sp)
	f = FLOATSwap(f);
     a4e:	move.l 32(sp),d0
     a52:	move.l d0,-(sp)
     a54:	jsr 690 <FLOATSwap>
     a5a:	addq.l #4,sp
     a5c:	move.l d0,32(sp)
	Write( fp, &f, sizeof (FLOAT));
     a60:	move.l 36(sp),24(sp)
     a66:	moveq #32,d0
     a68:	add.l sp,d0
     a6a:	move.l d0,20(sp)
     a6e:	moveq #4,d0
     a70:	move.l d0,16(sp)
     a74:	move.l 1c864 <DOSBase>,d0
     a7a:	movea.l d0,a6
     a7c:	move.l 24(sp),d1
     a80:	move.l 20(sp),d2
     a84:	move.l 16(sp),d3
     a88:	jsr -48(a6)
     a8c:	move.l d0,12(sp)
}
     a90:	nop
     a92:	movem.l (sp)+,d2-d3/a6
     a96:	lea 16(sp),sp
     a9a:	rts

00000a9c <putSigned>:

void putSigned (short f, BPTR fp) {
     a9c:	lea -20(sp),sp
     aa0:	movem.l d2-d3/a6,-(sp)
     aa4:	move.l 36(sp),d0
     aa8:	move.w d0,d0
     aaa:	move.w d0,14(sp)
	f = shortSwap(f);
     aae:	move.w 14(sp),d0
     ab2:	movea.w d0,a0
     ab4:	move.l a0,-(sp)
     ab6:	jsr baa <shortSwap>
     abc:	addq.l #4,sp
     abe:	move.w d0,14(sp)
	Write(fp, &f, sizeof(short));
     ac2:	move.l 40(sp),28(sp)
     ac8:	lea 32(sp),a0
     acc:	lea -18(a0),a0
     ad0:	move.l a0,24(sp)
     ad4:	moveq #2,d0
     ad6:	move.l d0,20(sp)
     ada:	move.l 1c864 <DOSBase>,d0
     ae0:	movea.l d0,a6
     ae2:	move.l 28(sp),d1
     ae6:	move.l 24(sp),d2
     aea:	move.l 20(sp),d3
     aee:	jsr -48(a6)
     af2:	move.l d0,16(sp)
}
     af6:	nop
     af8:	movem.l (sp)+,d2-d3/a6
     afc:	lea 20(sp),sp
     b00:	rts

00000b02 <readString>:

char * readString (BPTR fp) {
     b02:	          lea -32(sp),sp
     b06:	          move.l a6,-(sp)

	int a, len = get2bytes (fp);
     b08:	          move.l 40(sp),-(sp)
     b0c:	          jsr 6bc <get2bytes>
     b12:	          addq.l #4,sp
     b14:	          move.l d0,28(sp)
	//debugOut ("MOREIO: readString - len %i\n", len);
	char * s = AllocVec(len+1,MEMF_ANY);
     b18:	          move.l 28(sp),d0
     b1c:	          addq.l #1,d0
     b1e:	          move.l d0,24(sp)
     b22:	          clr.l 20(sp)
     b26:	          move.l 1c85c <SysBase>,d0
     b2c:	          movea.l d0,a6
     b2e:	          move.l 24(sp),d0
     b32:	          move.l 20(sp),d1
     b36:	          jsr -684(a6)
     b3a:	          move.l d0,16(sp)
     b3e:	          move.l 16(sp),d0
     b42:	          move.l d0,12(sp)
	if(s == 0) return NULL;
     b46:	      /-- bne.s b4c <readString+0x4a>
     b48:	      |   moveq #0,d0
     b4a:	/-----|-- bra.s ba2 <readString+0xa0>
	for (a = 0; a < len; a ++) {
     b4c:	|     \-> clr.l 32(sp)
     b50:	|     /-- bra.s b88 <readString+0x86>
		s[a] = (char) (FGetC (fp) - 1);
     b52:	|  /--|-> move.l 40(sp),8(sp)
     b58:	|  |  |   move.l 1c864 <DOSBase>,d0
     b5e:	|  |  |   movea.l d0,a6
     b60:	|  |  |   move.l 8(sp),d1
     b64:	|  |  |   jsr -306(a6)
     b68:	|  |  |   move.l d0,4(sp)
     b6c:	|  |  |   move.l 4(sp),d0
     b70:	|  |  |   move.l d0,d0
     b72:	|  |  |   move.b d0,d1
     b74:	|  |  |   subq.b #1,d1
     b76:	|  |  |   move.l 32(sp),d0
     b7a:	|  |  |   movea.l 12(sp),a0
     b7e:	|  |  |   adda.l d0,a0
     b80:	|  |  |   move.b d1,d0
     b82:	|  |  |   move.b d0,(a0)
	for (a = 0; a < len; a ++) {
     b84:	|  |  |   addq.l #1,32(sp)
     b88:	|  |  \-> move.l 32(sp),d0
     b8c:	|  |      cmp.l 28(sp),d0
     b90:	|  \----- blt.s b52 <readString+0x50>
	}
	s[len] = 0;
     b92:	|         move.l 28(sp),d0
     b96:	|         movea.l 12(sp),a0
     b9a:	|         adda.l d0,a0
     b9c:	|         clr.b (a0)
	//debugOut ("MOREIO: readString: %s\n", s);
	return s;
     b9e:	|         move.l 12(sp),d0
}
     ba2:	\-------> movea.l (sp)+,a6
     ba4:	          lea 32(sp),sp
     ba8:	          rts

00000baa <shortSwap>:

short shortSwap( short s )
{
     baa:	subq.l #4,sp
     bac:	move.l 8(sp),d0
     bb0:	move.w d0,d0
     bb2:	move.w d0,(sp)
	unsigned char b1, b2;
	
	b1 = s & 255;
     bb4:	move.b 1(sp),3(sp)
	b2 = (s >> 8) & 255;
     bba:	move.w (sp),d0
     bbc:	asr.w #8,d0
     bbe:	move.b d0,2(sp)
	
	return (b1 << 8) + b2;
     bc2:	clr.w d0
     bc4:	move.b 3(sp),d0
     bc8:	move.w d0,d1
     bca:	lsl.w #8,d1
     bcc:	clr.w d0
     bce:	move.b 2(sp),d0
     bd2:	add.w d1,d0
}
     bd4:	addq.l #4,sp
     bd6:	rts

00000bd8 <writeString>:

void writeString (char * s, BPTR fp) {
     bd8:	       lea -20(sp),sp
     bdc:	       move.l a6,-(sp)
     bde:	       move.l d2,-(sp)
	int a, len = strlen (s);
     be0:	       move.l 32(sp),-(sp)
     be4:	       jsr 13c3a <strlen>
     bea:	       addq.l #4,sp
     bec:	       move.l d0,20(sp)
	put2bytes (len, fp);
     bf0:	       move.l 36(sp),-(sp)
     bf4:	       move.l 24(sp),-(sp)
     bf8:	       jsr 8d0 <put2bytes>
     bfe:	       addq.l #8,sp
	for (a = 0; a < len; a ++) {
     c00:	       clr.l 24(sp)
     c04:	   /-- bra.s c40 <writeString+0x68>
		FPutC (fp,s[a] + 1);
     c06:	/--|-> move.l 36(sp),16(sp)
     c0c:	|  |   move.l 24(sp),d0
     c10:	|  |   movea.l 32(sp),a0
     c14:	|  |   adda.l d0,a0
     c16:	|  |   move.b (a0),d0
     c18:	|  |   ext.w d0
     c1a:	|  |   ext.l d0
     c1c:	|  |   move.l d0,d1
     c1e:	|  |   addq.l #1,d1
     c20:	|  |   move.l d1,12(sp)
     c24:	|  |   move.l 1c864 <DOSBase>,d0
     c2a:	|  |   movea.l d0,a6
     c2c:	|  |   move.l 16(sp),d1
     c30:	|  |   move.l 12(sp),d2
     c34:	|  |   jsr -312(a6)
     c38:	|  |   move.l d0,8(sp)
	for (a = 0; a < len; a ++) {
     c3c:	|  |   addq.l #1,24(sp)
     c40:	|  \-> move.l 24(sp),d0
     c44:	|      cmp.l 20(sp),d0
     c48:	\----- blt.s c06 <writeString+0x2e>
	}
     c4a:	       nop
     c4c:	       nop
     c4e:	       move.l (sp)+,d2
     c50:	       movea.l (sp)+,a6
     c52:	       lea 20(sp),sp
     c56:	       rts

00000c58 <displayCursor>:
int mouseCursorFrameNum = 0;
int mouseCursorCountUp = 0;

extern struct inputType input;

void displayCursor () {
     c58:	    movem.l d2-d5,-(sp)

	
	if( mouseCursorAnim->theSprites)
     c5c:	    movea.l 1c762 <mouseCursorAnim>,a0
     c62:	    move.l (a0),d0
     c64:	/-- beq.w d64 <displayCursor+0x10c>
	{		
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
			input.mouseY + 44 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].yhot,
			mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].height,
			(UBYTE *) mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].data);
     c68:	|   movea.l 1c762 <mouseCursorAnim>,a0
     c6e:	|   movea.l (a0),a0
     c70:	|   movea.l 16(a0),a1
     c74:	|   movea.l 1c762 <mouseCursorAnim>,a0
     c7a:	|   movea.l 4(a0),a0
     c7e:	|   move.l (a0),d0
     c80:	|   move.l d0,d1
     c82:	|   move.l d1,d0
     c84:	|   lsl.l #3,d0
     c86:	|   sub.l d1,d0
     c88:	|   add.l d0,d0
     c8a:	|   add.l d0,d0
     c8c:	|   lea (0,a1,d0.l),a0
     c90:	|   movea.l 24(a0),a1
			mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].height,
     c94:	|   movea.l 1c762 <mouseCursorAnim>,a0
     c9a:	|   movea.l (a0),a0
     c9c:	|   move.l 16(a0),d2
     ca0:	|   movea.l 1c762 <mouseCursorAnim>,a0
     ca6:	|   movea.l 4(a0),a0
     caa:	|   move.l (a0),d0
     cac:	|   move.l d0,d1
     cae:	|   move.l d1,d0
     cb0:	|   lsl.l #3,d0
     cb2:	|   sub.l d1,d0
     cb4:	|   add.l d0,d0
     cb6:	|   add.l d0,d0
     cb8:	|   movea.l d2,a0
     cba:	|   adda.l d0,a0
     cbc:	|   move.l 4(a0),d0
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
     cc0:	|   move.l d0,d0
     cc2:	|   moveq #0,d3
     cc4:	|   move.w d0,d3
			input.mouseY + 44 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].yhot,
     cc6:	|   move.l 1c81c <input+0xe>,d0
     ccc:	|   move.l d0,d2
     cce:	|   movea.l 1c762 <mouseCursorAnim>,a0
     cd4:	|   movea.l (a0),a0
     cd6:	|   move.l 16(a0),d4
     cda:	|   movea.l 1c762 <mouseCursorAnim>,a0
     ce0:	|   movea.l 4(a0),a0
     ce4:	|   move.l (a0),d0
     ce6:	|   move.l d0,d1
     ce8:	|   move.l d1,d0
     cea:	|   lsl.l #3,d0
     cec:	|   sub.l d1,d0
     cee:	|   add.l d0,d0
     cf0:	|   add.l d0,d0
     cf2:	|   movea.l d4,a0
     cf4:	|   adda.l d0,a0
     cf6:	|   move.l 12(a0),d0
     cfa:	|   move.l d0,d0
     cfc:	|   move.w d2,d1
     cfe:	|   sub.w d0,d1
     d00:	|   move.w d1,d0
     d02:	|   addi.w #44,d0
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
     d06:	|   moveq #0,d2
     d08:	|   move.w d0,d2
     d0a:	|   move.l 1c818 <input+0xa>,d0
     d10:	|   move.l d0,d4
     d12:	|   movea.l 1c762 <mouseCursorAnim>,a0
     d18:	|   movea.l (a0),a0
     d1a:	|   move.l 16(a0),d5
     d1e:	|   movea.l 1c762 <mouseCursorAnim>,a0
     d24:	|   movea.l 4(a0),a0
     d28:	|   move.l (a0),d0
     d2a:	|   move.l d0,d1
     d2c:	|   move.l d1,d0
     d2e:	|   lsl.l #3,d0
     d30:	|   sub.l d1,d0
     d32:	|   add.l d0,d0
     d34:	|   add.l d0,d0
     d36:	|   movea.l d5,a0
     d38:	|   adda.l d0,a0
     d3a:	|   move.l 8(a0),d0
     d3e:	|   move.l d0,d0
     d40:	|   move.w d4,d1
     d42:	|   sub.w d0,d1
     d44:	|   move.w d1,d0
     d46:	|   addi.w #128,d0
     d4a:	|   move.w d0,d0
     d4c:	|   andi.l #65535,d0
     d52:	|   move.l a1,-(sp)
     d54:	|   move.l d3,-(sp)
     d56:	|   move.l d2,-(sp)
     d58:	|   move.l d0,-(sp)
     d5a:	|   jsr 13ee <CstDisplayCursor>
     d60:	|   lea 16(sp),sp
	}
}
     d64:	\-> nop
     d66:	    movem.l (sp)+,d2-d5
     d6a:	    rts

00000d6c <pickAnimCursor>:

void pickAnimCursor (struct personaAnimation * pp) {
	deleteAnim (mouseCursorAnim);
     d6c:	move.l 1c762 <mouseCursorAnim>,d0
     d72:	move.l d0,-(sp)
     d74:	jsr 9924 <deleteAnim>
     d7a:	addq.l #4,sp
	mouseCursorAnim = pp;
     d7c:	move.l 4(sp),1c762 <mouseCursorAnim>
	mouseCursorFrameNum = 0;
     d84:	clr.l 1c766 <mouseCursorFrameNum>
	mouseCursorCountUp = 0;
     d8a:	clr.l 1c76a <mouseCursorCountUp>
}
     d90:	nop
     d92:	rts

00000d94 <pasteCursor>:

void pasteCursor (int x, int y, struct personaAnimation * c) {
     d94:	subq.l #8,sp

				//int fNumSign = myAnim -> frames[thisPerson -> frameNum].frameNum;
	
	struct sprite *spritetouse = &c->theSprites->bank.sprites[c->frames[0].frameNum];
     d96:	movea.l 20(sp),a0
     d9a:	movea.l (a0),a0
     d9c:	movea.l 16(a0),a0
     da0:	movea.l 20(sp),a1
     da4:	movea.l 4(a1),a1
     da8:	move.l (a1),d0
     daa:	move.l d0,d1
     dac:	move.l d1,d0
     dae:	lsl.l #3,d0
     db0:	sub.l d1,d0
     db2:	add.l d0,d0
     db4:	add.l d0,d0
     db6:	adda.l d0,a0
     db8:	move.l a0,4(sp)

	UWORD absx =  x - spritetouse->xhot;
     dbc:	move.l 12(sp),d0
     dc0:	movea.l 4(sp),a0
     dc4:	move.l 8(a0),d1
     dc8:	move.l d1,d1
     dca:	movea.w d0,a0
     dcc:	suba.w d1,a0
     dce:	move.w a0,2(sp)
	UWORD absy =  y - spritetouse->yhot;
     dd2:	move.l 16(sp),d0
     dd6:	movea.l 4(sp),a0
     dda:	move.l 12(a0),d1
     dde:	move.l d1,d1
     de0:	movea.w d0,a0
     de2:	suba.w d1,a0
     de4:	move.w a0,(sp)

	CstScaleSprite( spritetouse, (struct onScreenPerson *) NULL, absx, absy, BACKDROP);
     de6:	move.w (sp),d0
     de8:	movea.w d0,a1
     dea:	move.w 2(sp),d0
     dee:	movea.w d0,a0
     df0:	pea 2 <_start+0x2>
     df4:	move.l a1,-(sp)
     df6:	move.l a0,-(sp)
     df8:	clr.l -(sp)
     dfa:	move.l 20(sp),-(sp)
     dfe:	jsr 2da8 <CstScaleSprite>
     e04:	lea 20(sp),sp
     e08:	nop
     e0a:	addq.l #8,sp
     e0c:	rts

00000e0e <CstBlankScreen>:
    0x1900000, 0x1920000, 0x1940000, 0x1960000, 0x1980000, 0x19a0000, 0x19c0000, 0x19e0000,
    0x1a00000, 0x1a20000, 0x1a40000, 0x1a60000, 0x1a80000, 0x1aa0000, 0x1ac0000, 0x1ae0000,
    0x1b00000, 0x1b20000, 0x1b40000, 0x1b60000, 0x1b80000, 0x1ba0000, 0x1bc0000, 0x1be0000 
};

void CstBlankScreen( int width, int height) {
     e0e:	          lea -16(sp),sp
     e12:	          move.l a6,-(sp)

  KPrintF("CstBlankScreen: started\n");
     e14:	          pea 17cbc <PutChar+0x72>
     e1a:	          jsr 17176 <KPrintF>
     e20:	          addq.l #4,sp

  if( !CstBackDrop) {
     e22:	          move.l 1c77e <CstBackDrop>,d0
     e28:	      /-- bne.s e3c <CstBlankScreen+0x2e>
    KPrintF("CstBlankScreen: Backdrop empty nothing to do\n");
     e2a:	      |   pea 17cd5 <PutChar+0x8b>
     e30:	      |   jsr 17176 <KPrintF>
     e36:	      |   addq.l #4,sp
    return;
     e38:	/-----|-- bra.w fc6 <CstBlankScreen+0x1b8>
  }

  CstPaletteLoaded = 0;
     e3c:	|     \-> clr.w 1c778 <CstPaletteLoaded>

  volatile struct Custom *custom = (struct Custom*)0xdff000;
     e42:	|         move.l #14675968,8(sp)

  width /= 16;
     e4a:	|         move.l 24(sp),d0
     e4e:	|         movea.l d0,a0
     e50:	|         cmpa.w #0,a0
     e54:	|     /-- bge.s e5a <CstBlankScreen+0x4c>
     e56:	|     |   lea 15(a0),a0
     e5a:	|     \-> move.l a0,d0
     e5c:	|         asr.l #4,d0
     e5e:	|         move.l d0,24(sp)

  WaitBlit();
     e62:	|         move.l 1c868 <GfxBase>,d0
     e68:	|         movea.l d0,a6
     e6a:	|         jsr -228(a6)

  //Both Buffers need to be done
  custom->bltafwm = 0xffff;
     e6e:	|         movea.l 8(sp),a0
     e72:	|         move.w #-1,68(a0)
  custom->bltalwm = 0xffff;
     e78:	|         movea.l 8(sp),a0
     e7c:	|         move.w #-1,70(a0)
  custom->bltamod = 0;
     e82:	|         movea.l 8(sp),a0
     e86:	|         move.w #0,100(a0)
  custom->bltbmod = 0;
     e8c:	|         movea.l 8(sp),a0
     e90:	|         move.w #0,98(a0)
  custom->bltcmod = 0;
     e96:	|         movea.l 8(sp),a0
     e9a:	|         move.w #0,96(a0)
  custom->bltdmod = 0;
     ea0:	|         movea.l 8(sp),a0
     ea4:	|         move.w #0,102(a0)
  custom->bltcon1 = 0;
     eaa:	|         movea.l 8(sp),a0
     eae:	|         move.w #0,66(a0)
  custom->bltcon0 = 0x0100;
     eb4:	|         movea.l 8(sp),a0
     eb8:	|         move.w #256,64(a0)
  ULONG bltdpt = (ULONG) CstBackDrop;
     ebe:	|         move.l 1c77e <CstBackDrop>,d0
     ec4:	|         move.l d0,16(sp)
  UWORD bltsize = height*64+width;    
     ec8:	|         move.l 28(sp),d0
     ecc:	|         lsl.w #6,d0
     ece:	|         move.l 24(sp),d1
     ed2:	|         movea.w d0,a0
     ed4:	|         adda.w d1,a0
     ed6:	|         move.w a0,6(sp)
  UWORD blitsize = width*height*2;
     eda:	|         move.l 24(sp),d1
     ede:	|         move.l 28(sp),d0
     ee2:	|         muls.w d1,d0
     ee4:	|         add.w d0,d0
     ee6:	|         move.w d0,4(sp)

  KPrintF("CstBlankScreen: Starting Blits\n");
     eea:	|         pea 17d03 <PutChar+0xb9>
     ef0:	|         jsr 17176 <KPrintF>
     ef6:	|         addq.l #4,sp

  for(int i2=0;i2<5;i2++)
     ef8:	|         clr.l 12(sp)
     efc:	|     /-- bra.s f2e <CstBlankScreen+0x120>
  {            
    custom->bltdpt = (APTR) bltdpt;
     efe:	|  /--|-> move.l 16(sp),d0
     f02:	|  |  |   movea.l 8(sp),a0
     f06:	|  |  |   move.l d0,84(a0)
    custom->bltsize = bltsize;            
     f0a:	|  |  |   movea.l 8(sp),a0
     f0e:	|  |  |   move.w 6(sp),88(a0)
    WaitBlit();
     f14:	|  |  |   move.l 1c868 <GfxBase>,d0
     f1a:	|  |  |   movea.l d0,a6
     f1c:	|  |  |   jsr -228(a6)
    bltdpt += blitsize;
     f20:	|  |  |   moveq #0,d0
     f22:	|  |  |   move.w 4(sp),d0
     f26:	|  |  |   add.l d0,16(sp)
  for(int i2=0;i2<5;i2++)
     f2a:	|  |  |   addq.l #1,12(sp)
     f2e:	|  |  \-> moveq #4,d0
     f30:	|  |      cmp.l 12(sp),d0
     f34:	|  \----- bge.s efe <CstBlankScreen+0xf0>
  }

  KPrintF("CstBlankScreen: Finished Blits\n");
     f36:	|         pea 17d23 <PutChar+0xd9>
     f3c:	|         jsr 17176 <KPrintF>
     f42:	|         addq.l #4,sp

  CstApplyBackDropCounter = 2;
     f44:	|         move.w #2,1c78a <CstApplyBackDropCounter>

  *CstBackDropBufferApplyCursor++ = winWidth/16;
     f4c:	|         move.l 1c7b0 <winWidth>,d0
     f52:	|         lsr.l #4,d0
     f54:	|         movea.l 1c7a0 <CstBackDropBufferApplyCursor>,a0
     f5a:	|         move.l a0,d1
     f5c:	|         addq.l #2,d1
     f5e:	|         move.l d1,1c7a0 <CstBackDropBufferApplyCursor>
     f64:	|         move.l d0,d0
     f66:	|         move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = winHeight;
     f68:	|         move.l 1c7b4 <winHeight>,d0
     f6e:	|         movea.l 1c7a0 <CstBackDropBufferApplyCursor>,a0
     f74:	|         move.l a0,d1
     f76:	|         addq.l #2,d1
     f78:	|         move.l d1,1c7a0 <CstBackDropBufferApplyCursor>
     f7e:	|         move.l d0,d0
     f80:	|         move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = 0;
     f82:	|         movea.l 1c7a0 <CstBackDropBufferApplyCursor>,a0
     f88:	|         move.l a0,d0
     f8a:	|         addq.l #2,d0
     f8c:	|         move.l d0,1c7a0 <CstBackDropBufferApplyCursor>
     f92:	|         clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
     f94:	|         movea.l 1c7a0 <CstBackDropBufferApplyCursor>,a0
     f9a:	|         move.l a0,d0
     f9c:	|         addq.l #2,d0
     f9e:	|         move.l d0,1c7a0 <CstBackDropBufferApplyCursor>
     fa4:	|         clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
     fa6:	|         movea.l 1c7a0 <CstBackDropBufferApplyCursor>,a0
     fac:	|         move.l a0,d0
     fae:	|         addq.l #2,d0
     fb0:	|         move.l d0,1c7a0 <CstBackDropBufferApplyCursor>
     fb6:	|         clr.w (a0)

  KPrintF("CstBlankScreen: end\n");
     fb8:	|         pea 17d43 <PutChar+0xf9>
     fbe:	|         jsr 17176 <KPrintF>
     fc4:	|         addq.l #4,sp


}
     fc6:	\-------> movea.l (sp)+,a6
     fc8:	          lea 16(sp),sp
     fcc:	          rts

00000fce <CstCreateCopperlist>:

UWORD * CstCreateCopperlist( int width) {
     fce:	       lea -52(sp),sp
     fd2:	       move.l a6,-(sp)
     fd4:	       move.l d2,-(sp)
  
  ULONG *retval = AllocMem(  CSTCOPSIZE, MEMF_CHIP);
     fd6:	       move.l #400,32(sp)
     fde:	       moveq #2,d0
     fe0:	       move.l d0,28(sp)
     fe4:	       move.l 1c85c <SysBase>,d0
     fea:	       movea.l d0,a6
     fec:	       move.l 32(sp),d0
     ff0:	       move.l 28(sp),d1
     ff4:	       jsr -198(a6)
     ff8:	       move.l d0,24(sp)
     ffc:	       move.l 24(sp),d0
    1000:	       move.l d0,20(sp)
  
  if( retval == 0) {
    1004:	   /-- bne.s 102e <CstCreateCopperlist+0x60>
    KPrintF("CstCreateCopperlist: Allocation of Ram for Copper failed.\n", 40);
    1006:	   |   pea 28 <_start+0x28>
    100a:	   |   pea 17d58 <PutChar+0x10e>
    1010:	   |   jsr 17176 <KPrintF>
    1016:	   |   addq.l #8,sp
    Exit(1);
    1018:	   |   moveq #1,d1
    101a:	   |   move.l d1,16(sp)
    101e:	   |   move.l 1c864 <DOSBase>,d0
    1024:	   |   movea.l d0,a6
    1026:	   |   move.l 16(sp),d1
    102a:	   |   jsr -144(a6)
  }
  ULONG *cl = retval;
    102e:	   \-> move.l 20(sp),56(sp)
  CstClCursor = (UWORD *)cl;
    1034:	       move.l 56(sp),1c7ac <CstClCursor>

  ULONG *clpartinstruction;
  clpartinstruction = CstClSprites;
    103c:	       move.l #114874,52(sp)
  for(int i=0; i<16;i++)
    1044:	       clr.l 48(sp)
    1048:	   /-- bra.s 106e <CstCreateCopperlist+0xa0>
    *cl++ = *clpartinstruction++;
    104a:	/--|-> move.l 52(sp),d1
    104e:	|  |   move.l d1,d2
    1050:	|  |   addq.l #4,d2
    1052:	|  |   move.l d2,52(sp)
    1056:	|  |   move.l 56(sp),d0
    105a:	|  |   move.l d0,d2
    105c:	|  |   addq.l #4,d2
    105e:	|  |   move.l d2,56(sp)
    1062:	|  |   movea.l d1,a0
    1064:	|  |   move.l (a0),d1
    1066:	|  |   movea.l d0,a0
    1068:	|  |   move.l d1,(a0)
  for(int i=0; i<16;i++)
    106a:	|  |   addq.l #1,48(sp)
    106e:	|  \-> moveq #15,d0
    1070:	|      cmp.l 48(sp),d0
    1074:	\----- bge.s 104a <CstCreateCopperlist+0x7c>

  clpartinstruction = CstClScreen;
    1076:	       move.l #114938,52(sp)

  for(int i=0; i<12;i++)
    107e:	       clr.l 44(sp)
    1082:	   /-- bra.s 10a8 <CstCreateCopperlist+0xda>
    *cl++ = *clpartinstruction++;
    1084:	/--|-> move.l 52(sp),d1
    1088:	|  |   move.l d1,d2
    108a:	|  |   addq.l #4,d2
    108c:	|  |   move.l d2,52(sp)
    1090:	|  |   move.l 56(sp),d0
    1094:	|  |   move.l d0,d2
    1096:	|  |   addq.l #4,d2
    1098:	|  |   move.l d2,56(sp)
    109c:	|  |   movea.l d1,a0
    109e:	|  |   move.l (a0),d1
    10a0:	|  |   movea.l d0,a0
    10a2:	|  |   move.l d1,(a0)
  for(int i=0; i<12;i++)
    10a4:	|  |   addq.l #1,44(sp)
    10a8:	|  \-> moveq #11,d0
    10aa:	|      cmp.l 44(sp),d0
    10ae:	\----- bge.s 1084 <CstCreateCopperlist+0xb6>

  clpartinstruction = CstClBitplanes;
    10b0:	       move.l #114986,52(sp)
  for(int i=0; i<10;i++)
    10b8:	       clr.l 40(sp)
    10bc:	   /-- bra.s 10e2 <CstCreateCopperlist+0x114>
    *cl++ = *clpartinstruction++;        
    10be:	/--|-> move.l 52(sp),d1
    10c2:	|  |   move.l d1,d2
    10c4:	|  |   addq.l #4,d2
    10c6:	|  |   move.l d2,52(sp)
    10ca:	|  |   move.l 56(sp),d0
    10ce:	|  |   move.l d0,d2
    10d0:	|  |   addq.l #4,d2
    10d2:	|  |   move.l d2,56(sp)
    10d6:	|  |   movea.l d1,a0
    10d8:	|  |   move.l (a0),d1
    10da:	|  |   movea.l d0,a0
    10dc:	|  |   move.l d1,(a0)
  for(int i=0; i<10;i++)
    10de:	|  |   addq.l #1,40(sp)
    10e2:	|  \-> moveq #9,d0
    10e4:	|      cmp.l 40(sp),d0
    10e8:	\----- bge.s 10be <CstCreateCopperlist+0xf0>

  
  clpartinstruction = CstClColorTemplate;
    10ea:	       move.l #115026,52(sp)
  CstClColor = (UWORD *) cl;
    10f2:	       move.l 56(sp),1c7a4 <CstClColor>
  for(int i=0; i<32;i++)
    10fa:	       clr.l 36(sp)
    10fe:	   /-- bra.s 1124 <CstCreateCopperlist+0x156>
    *cl++ = *clpartinstruction++;        
    1100:	/--|-> move.l 52(sp),d1
    1104:	|  |   move.l d1,d2
    1106:	|  |   addq.l #4,d2
    1108:	|  |   move.l d2,52(sp)
    110c:	|  |   move.l 56(sp),d0
    1110:	|  |   move.l d0,d2
    1112:	|  |   addq.l #4,d2
    1114:	|  |   move.l d2,56(sp)
    1118:	|  |   movea.l d1,a0
    111a:	|  |   move.l (a0),d1
    111c:	|  |   movea.l d0,a0
    111e:	|  |   move.l d1,(a0)
  for(int i=0; i<32;i++)
    1120:	|  |   addq.l #1,36(sp)
    1124:	|  \-> moveq #31,d0
    1126:	|      cmp.l 36(sp),d0
    112a:	\----- bge.s 1100 <CstCreateCopperlist+0x132>
 
  /* Screen is bigger than real screen? Setup BPLxMod accordingly*/
  if(width > 40) {
    112c:	       moveq #40,d1
    112e:	       cmp.l 64(sp),d1
    1132:	   /-- bge.s 1190 <CstCreateCopperlist+0x1c2>
    int tmp = width - 40;
    1134:	   |   moveq #-40,d2
    1136:	   |   add.l 64(sp),d2
    113a:	   |   move.l d2,12(sp)
    UWORD *cw = (UWORD *) cl; 
    113e:	   |   move.l 56(sp),8(sp)
    *cw++ = 0x108;
    1144:	   |   move.l 8(sp),d0
    1148:	   |   move.l d0,d1
    114a:	   |   addq.l #2,d1
    114c:	   |   move.l d1,8(sp)
    1150:	   |   movea.l d0,a0
    1152:	   |   move.w #264,(a0)
    *cw++ = tmp;
    1156:	   |   move.l 8(sp),d0
    115a:	   |   move.l d0,d1
    115c:	   |   addq.l #2,d1
    115e:	   |   move.l d1,8(sp)
    1162:	   |   move.l 12(sp),d1
    1166:	   |   movea.l d0,a0
    1168:	   |   move.w d1,(a0)
    *cw++ = 0x10a;
    116a:	   |   move.l 8(sp),d0
    116e:	   |   move.l d0,d1
    1170:	   |   addq.l #2,d1
    1172:	   |   move.l d1,8(sp)
    1176:	   |   movea.l d0,a0
    1178:	   |   move.w #266,(a0)
    *cw++ = tmp;     
    117c:	   |   move.l 8(sp),d0
    1180:	   |   move.l d0,d1
    1182:	   |   addq.l #2,d1
    1184:	   |   move.l d1,8(sp)
    1188:	   |   move.l 12(sp),d1
    118c:	   |   movea.l d0,a0
    118e:	   |   move.w d1,(a0)
  }

  *cl++ = 0xfffffffe;
    1190:	   \-> move.l 56(sp),d0
    1194:	       move.l d0,d1
    1196:	       addq.l #4,d1
    1198:	       move.l d1,56(sp)
    119c:	       moveq #-2,d2
    119e:	       movea.l d0,a0
    11a0:	       move.l d2,(a0)
  return (UWORD *) retval;  
    11a2:	       move.l 20(sp),d0
}
    11a6:	       move.l (sp)+,d2
    11a8:	       movea.l (sp)+,a6
    11aa:	       lea 52(sp),sp
    11ae:	       rts

000011b0 <CstDisplayBackDrop>:

void CstDisplayBackDrop() 
{
    11b0:	                lea -40(sp),sp
    11b4:	                move.l a6,-(sp)
    11b6:	                move.l d2,-(sp)
 volatile struct Custom *custom = (struct Custom*)0xdff000;  
    11b8:	                move.l #14675968,16(sp)

  KPrintF("CstDisplayBackDrop: Started");
    11c0:	                pea 17d93 <PutChar+0x149>
    11c6:	                jsr 17176 <KPrintF>
    11cc:	                addq.l #4,sp

  CstBackDropBufferApplyCursor = CstBackDropBufferApplyStart;
    11ce:	                move.l 1c79c <CstBackDropBufferApplyStart>,d0
    11d4:	                move.l d0,1c7a0 <CstBackDropBufferApplyCursor>
  UWORD *cursor = CstBackDropBufferApplyStart;
    11da:	                move.l 1c79c <CstBackDropBufferApplyStart>,44(sp)
  if(!*cursor || !CstDrawBuffer) {
    11e2:	                movea.l 44(sp),a0
    11e6:	                move.w (a0),d0
    11e8:	/-------------- beq.w 13e2 <CstDisplayBackDrop+0x232>
    11ec:	|               move.l 1c790 <CstDrawBuffer>,d0
    11f2:	+-------------- beq.w 13e2 <CstDisplayBackDrop+0x232>
    return;
  } 

  WaitBlit();
    11f6:	|               move.l 1c868 <GfxBase>,d0
    11fc:	|               movea.l d0,a6
    11fe:	|               jsr -228(a6)
  
  custom->bltafwm = 0xffff;
    1202:	|               movea.l 16(sp),a0
    1206:	|               move.w #-1,68(a0)
  custom->bltalwm = 0xffff;  
    120c:	|               movea.l 16(sp),a0
    1210:	|               move.w #-1,70(a0)
  custom->bltcon0 = 0x9f0;
    1216:	|               movea.l 16(sp),a0
    121a:	|               move.w #2544,64(a0)
  
  while(*cursor)
    1220:	|     /-------- bra.w 1388 <CstDisplayBackDrop+0x1d8>
  {    
    UWORD width = *cursor++;
    1224:	|  /--|-------> move.l 44(sp),d0
    1228:	|  |  |         move.l d0,d1
    122a:	|  |  |         addq.l #2,d1
    122c:	|  |  |         move.l d1,44(sp)
    1230:	|  |  |         movea.l d0,a0
    1232:	|  |  |         move.w (a0),14(sp)
    UWORD height = *cursor++;
    1236:	|  |  |         move.l 44(sp),d0
    123a:	|  |  |         move.l d0,d1
    123c:	|  |  |         addq.l #2,d1
    123e:	|  |  |         move.l d1,44(sp)
    1242:	|  |  |         movea.l d0,a0
    1244:	|  |  |         move.w (a0),12(sp)
    UWORD xpos = *cursor++;
    1248:	|  |  |         move.l 44(sp),d0
    124c:	|  |  |         move.l d0,d1
    124e:	|  |  |         addq.l #2,d1
    1250:	|  |  |         move.l d1,44(sp)
    1254:	|  |  |         movea.l d0,a0
    1256:	|  |  |         move.w (a0),10(sp)
    UWORD ypos = *cursor++;
    125a:	|  |  |         move.l 44(sp),d0
    125e:	|  |  |         move.l d0,d1
    1260:	|  |  |         addq.l #2,d1
    1262:	|  |  |         move.l d1,44(sp)
    1266:	|  |  |         movea.l d0,a0
    1268:	|  |  |         move.w (a0),8(sp)

    custom->bltamod = winWidth/8-width*2;
    126c:	|  |  |         move.l 1c7b0 <winWidth>,d0
    1272:	|  |  |         lsr.l #3,d0
    1274:	|  |  |         move.l d0,d1
    1276:	|  |  |         move.w 14(sp),d0
    127a:	|  |  |         add.w d0,d0
    127c:	|  |  |         sub.w d0,d1
    127e:	|  |  |         movea.l 16(sp),a0
    1282:	|  |  |         move.w d1,100(a0)
    custom->bltdmod = winWidth/8-width*2;
    1286:	|  |  |         move.l 1c7b0 <winWidth>,d0
    128c:	|  |  |         lsr.l #3,d0
    128e:	|  |  |         move.l d0,d1
    1290:	|  |  |         move.w 14(sp),d0
    1294:	|  |  |         add.w d0,d0
    1296:	|  |  |         sub.w d0,d1
    1298:	|  |  |         movea.l 16(sp),a0
    129c:	|  |  |         move.w d1,102(a0)
    ULONG bltapt = ((ULONG) CstBackDrop) + ypos*winWidth/8 + xpos;
    12a0:	|  |  |         moveq #0,d0
    12a2:	|  |  |         move.w 8(sp),d0
    12a6:	|  |  |         move.l 1c7b0 <winWidth>,d1
    12ac:	|  |  |         move.l d1,-(sp)
    12ae:	|  |  |         move.l d0,-(sp)
    12b0:	|  |  |         jsr 17b34 <__mulsi3>
    12b6:	|  |  |         addq.l #8,sp
    12b8:	|  |  |         move.l d0,d1
    12ba:	|  |  |         lsr.l #3,d1
    12bc:	|  |  |         move.l 1c77e <CstBackDrop>,d0
    12c2:	|  |  |         add.l d0,d1
    12c4:	|  |  |         moveq #0,d0
    12c6:	|  |  |         move.w 10(sp),d0
    12ca:	|  |  |         move.l d1,d2
    12cc:	|  |  |         add.l d0,d2
    12ce:	|  |  |         move.l d2,40(sp)
    ULONG bltdpt = ((ULONG) CstDrawBuffer) + ypos*winWidth/8 + xpos;
    12d2:	|  |  |         moveq #0,d0
    12d4:	|  |  |         move.w 8(sp),d0
    12d8:	|  |  |         move.l 1c7b0 <winWidth>,d1
    12de:	|  |  |         move.l d1,-(sp)
    12e0:	|  |  |         move.l d0,-(sp)
    12e2:	|  |  |         jsr 17b34 <__mulsi3>
    12e8:	|  |  |         addq.l #8,sp
    12ea:	|  |  |         move.l d0,d1
    12ec:	|  |  |         lsr.l #3,d1
    12ee:	|  |  |         move.l 1c790 <CstDrawBuffer>,d0
    12f4:	|  |  |         add.l d0,d1
    12f6:	|  |  |         moveq #0,d0
    12f8:	|  |  |         move.w 10(sp),d0
    12fc:	|  |  |         move.l d1,d2
    12fe:	|  |  |         add.l d0,d2
    1300:	|  |  |         move.l d2,36(sp)
    for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    1304:	|  |  |         clr.l 32(sp)
    1308:	|  |  |     /-- bra.s 1380 <CstDisplayBackDrop+0x1d0>
    {
      custom->bltapt = (APTR) bltapt;
    130a:	|  |  |  /--|-> move.l 40(sp),d0
    130e:	|  |  |  |  |   movea.l 16(sp),a0
    1312:	|  |  |  |  |   move.l d0,80(a0)
      custom->bltdpt = (APTR) bltdpt;
    1316:	|  |  |  |  |   move.l 36(sp),d0
    131a:	|  |  |  |  |   movea.l 16(sp),a0
    131e:	|  |  |  |  |   move.l d0,84(a0)
      custom->bltsize = (height << 6) + width;
    1322:	|  |  |  |  |   move.w 12(sp),d0
    1326:	|  |  |  |  |   lsl.w #6,d0
    1328:	|  |  |  |  |   add.w 14(sp),d0
    132c:	|  |  |  |  |   movea.l 16(sp),a0
    1330:	|  |  |  |  |   move.w d0,88(a0)
      bltapt += winWidth/8*winHeight;
    1334:	|  |  |  |  |   move.l 1c7b0 <winWidth>,d0
    133a:	|  |  |  |  |   lsr.l #3,d0
    133c:	|  |  |  |  |   move.l 1c7b4 <winHeight>,d1
    1342:	|  |  |  |  |   move.l d1,-(sp)
    1344:	|  |  |  |  |   move.l d0,-(sp)
    1346:	|  |  |  |  |   jsr 17b34 <__mulsi3>
    134c:	|  |  |  |  |   addq.l #8,sp
    134e:	|  |  |  |  |   add.l d0,40(sp)
      bltdpt += winWidth/8*winHeight;
    1352:	|  |  |  |  |   move.l 1c7b0 <winWidth>,d0
    1358:	|  |  |  |  |   lsr.l #3,d0
    135a:	|  |  |  |  |   move.l 1c7b4 <winHeight>,d1
    1360:	|  |  |  |  |   move.l d1,-(sp)
    1362:	|  |  |  |  |   move.l d0,-(sp)
    1364:	|  |  |  |  |   jsr 17b34 <__mulsi3>
    136a:	|  |  |  |  |   addq.l #8,sp
    136c:	|  |  |  |  |   add.l d0,36(sp)
      WaitBlit();
    1370:	|  |  |  |  |   move.l 1c868 <GfxBase>,d0
    1376:	|  |  |  |  |   movea.l d0,a6
    1378:	|  |  |  |  |   jsr -228(a6)
    for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    137c:	|  |  |  |  |   addq.l #1,32(sp)
    1380:	|  |  |  |  \-> moveq #4,d0
    1382:	|  |  |  |      cmp.l 32(sp),d0
    1386:	|  |  |  \----- bge.s 130a <CstDisplayBackDrop+0x15a>
  while(*cursor)
    1388:	|  |  \-------> movea.l 44(sp),a0
    138c:	|  |            move.w (a0),d0
    138e:	|  \----------- bne.w 1224 <CstDisplayBackDrop+0x74>
    }  
  }
  UWORD *colorpos = CstPalette;
    1392:	|               move.l 1c7a8 <CstPalette>,28(sp)
  
  UWORD *tmp = CstClColor;
    139a:	|               move.l 1c7a4 <CstClColor>,24(sp)
  for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes
    13a2:	|               clr.l 20(sp)
    13a6:	|           /-- bra.s 13d8 <CstDisplayBackDrop+0x228>
    *tmp++;
    13a8:	|        /--|-> move.l 24(sp),d0
    13ac:	|        |  |   move.l d0,d1
    13ae:	|        |  |   addq.l #2,d1
    13b0:	|        |  |   move.l d1,24(sp)
    *tmp++ = *colorpos++;
    13b4:	|        |  |   move.l 28(sp),d1
    13b8:	|        |  |   move.l d1,d2
    13ba:	|        |  |   addq.l #2,d2
    13bc:	|        |  |   move.l d2,28(sp)
    13c0:	|        |  |   move.l 24(sp),d0
    13c4:	|        |  |   move.l d0,d2
    13c6:	|        |  |   addq.l #2,d2
    13c8:	|        |  |   move.l d2,24(sp)
    13cc:	|        |  |   movea.l d1,a0
    13ce:	|        |  |   move.w (a0),d1
    13d0:	|        |  |   movea.l d0,a0
    13d2:	|        |  |   move.w d1,(a0)
  for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes
    13d4:	|        |  |   addq.l #1,20(sp)
    13d8:	|        |  \-> moveq #31,d0
    13da:	|        |      cmp.l 20(sp),d0
    13de:	|        \----- bge.s 13a8 <CstDisplayBackDrop+0x1f8>
    13e0:	|           /-- bra.s 13e4 <CstDisplayBackDrop+0x234>
    return;
    13e2:	\-----------|-> nop
  }
}
    13e4:	            \-> move.l (sp)+,d2
    13e6:	                movea.l (sp)+,a6
    13e8:	                lea 40(sp),sp
    13ec:	                rts

000013ee <CstDisplayCursor>:

void CstDisplayCursor(UWORD x, UWORD y, UWORD height, UBYTE *spritedata)
{
    13ee:	lea -20(sp),sp
    13f2:	movea.l 24(sp),a0
    13f6:	move.l 28(sp),d1
    13fa:	move.l 32(sp),d0
    13fe:	movea.w a0,a0
    1400:	move.w a0,4(sp)
    1404:	move.w d1,d1
    1406:	move.w d1,2(sp)
    140a:	move.w d0,d0
    140c:	move.w d0,(sp)
  spritedata[0] = (UBYTE) (y & 0xff); //Low 8 Bits of y
    140e:	move.w 2(sp),d0
    1412:	movea.l 36(sp),a0
    1416:	move.b d0,(a0)
  spritedata[1] = (UBYTE) (x >> 1); //High 8 Bits of x
    1418:	move.w 4(sp),d0
    141c:	lsr.w #1,d0
    141e:	movea.l 36(sp),a0
    1422:	addq.l #1,a0
    1424:	move.l d0,d0
    1426:	move.b d0,(a0)
  spritedata[2] = (UBYTE) (y+height & 0xff); //Sprite Stop Low 8 Bits
    1428:	move.w 2(sp),d1
    142c:	move.w (sp),d0
    142e:	movea.l 36(sp),a0
    1432:	addq.l #2,a0
    1434:	add.b d1,d0
    1436:	move.b d0,(a0)

  UWORD lowbitx = x & 0x1;
    1438:	move.w 4(sp),d0
    143c:	andi.w #1,d0
    1440:	move.w d0,18(sp)
  UWORD vstophighbit = ((y+height) & 0x100) >> 7;
    1444:	move.w 2(sp),d0
    1448:	add.w (sp),d0
    144a:	move.w d0,d0
    144c:	andi.l #65535,d0
    1452:	asr.l #7,d0
    1454:	move.l d0,d0
    1456:	move.w d0,d1
    1458:	andi.w #2,d1
    145c:	move.w d1,16(sp)
  UWORD vstarthighbit = (y & 0x100) >> 6;
    1460:	moveq #0,d0
    1462:	move.w 2(sp),d0
    1466:	asr.l #6,d0
    1468:	move.l d0,d0
    146a:	move.w d0,d1
    146c:	andi.w #4,d1
    1470:	move.w d1,14(sp)

  spritedata[3] = lowbitx + vstophighbit + vstarthighbit; //Low Bit X, Sprite Stop High Bit
    1474:	move.w 18(sp),d1
    1478:	move.w 16(sp),d0
    147c:	add.b d0,d1
    147e:	move.w 14(sp),d0
    1482:	movea.l 36(sp),a0
    1486:	addq.l #3,a0
    1488:	add.b d1,d0
    148a:	move.b d0,(a0)

  ULONG ptr = (ULONG) spritedata; 
    148c:	move.l 36(sp),10(sp)
  UWORD loptr = (UWORD) ptr & 0xffff;
    1492:	move.w 12(sp),8(sp)
  UWORD hiptr = ptr >> 16;
    1498:	move.l 10(sp),d0
    149c:	clr.w d0
    149e:	swap d0
    14a0:	move.w d0,6(sp)

  CstClCursor[1] = hiptr;
    14a4:	move.l 1c7ac <CstClCursor>,d0
    14aa:	movea.l d0,a0
    14ac:	addq.l #2,a0
    14ae:	move.w 6(sp),(a0)
  CstClCursor[3] = loptr;
    14b2:	move.l 1c7ac <CstClCursor>,d0
    14b8:	movea.l d0,a0
    14ba:	addq.l #6,a0
    14bc:	move.w 8(sp),(a0)

}
    14c0:	nop
    14c2:	lea 20(sp),sp
    14c6:	rts

000014c8 <CstDrawBackdrop>:

void CstDrawBackdrop() {  
  if(CstApplyBackDropCounter > 0) 
    14c8:	    move.w 1c78a <CstApplyBackDropCounter>,d0
    14ce:	/-- beq.s 14e4 <CstDrawBackdrop+0x1c>
  {
    CstDisplayBackDrop();
    14d0:	|   jsr 11b0 <CstDisplayBackDrop>
    CstApplyBackDropCounter--;
    14d6:	|   move.w 1c78a <CstApplyBackDropCounter>,d0
    14dc:	|   subq.w #1,d0
    14de:	|   move.w d0,1c78a <CstApplyBackDropCounter>
  }    
}
    14e4:	\-> nop
    14e6:	    rts

000014e8 <CstDrawZBuffer>:

 UBYTE *CstDrawZBuffer( struct sprite *sprite, struct zBufferData *zbuffer, UWORD x, UWORD y) {
    14e8:	                      lea -88(sp),sp
    14ec:	                      move.l a6,-(sp)
    14ee:	                      move.l d2,-(sp)
    14f0:	                      move.l 108(sp),d1
    14f4:	                      move.l 112(sp),d0
    14f8:	                      move.w d1,d1
    14fa:	                      move.w d1,10(sp)
    14fe:	                      move.w d0,d0
    1500:	                      move.w d0,8(sp)

  volatile struct Custom *custom = (struct Custom*)0xdff000;
    1504:	                      move.l #14675968,68(sp)
  //In Case nothing needs to be done return sprite mask without changes
  UBYTE *returnvalue = AllocVec( sprite->width/8*sprite->height, MEMF_CHIP);
    150c:	                      movea.l 100(sp),a0
    1510:	                      move.l (a0),d0
    1512:	                  /-- bpl.s 1516 <CstDrawZBuffer+0x2e>
    1514:	                  |   addq.l #7,d0
    1516:	                  \-> asr.l #3,d0
    1518:	                      movea.l 100(sp),a0
    151c:	                      move.l 4(a0),d1
    1520:	                      move.l d1,-(sp)
    1522:	                      move.l d0,-(sp)
    1524:	                      jsr 17b34 <__mulsi3>
    152a:	                      addq.l #8,sp
    152c:	                      move.l d0,64(sp)
    1530:	                      moveq #2,d0
    1532:	                      move.l d0,60(sp)
    1536:	                      move.l 1c85c <SysBase>,d0
    153c:	                      movea.l d0,a6
    153e:	                      move.l 64(sp),d0
    1542:	                      move.l 60(sp),d1
    1546:	                      jsr -684(a6)
    154a:	                      move.l d0,56(sp)
    154e:	                      move.l 56(sp),d0
    1552:	                      move.l d0,52(sp)

  #ifdef EMULATOR
    debug_register_bitmap(returnvalue, "SpriteMask", sprite->width, sprite->height, 1, 0);
    1556:	                      movea.l 100(sp),a0
    155a:	                      move.l 4(a0),d0
    155e:	                      move.l d0,d0
    1560:	                      movea.w d0,a1
    1562:	                      movea.l 100(sp),a0
    1566:	                      move.l (a0),d0
    1568:	                      move.l d0,d0
    156a:	                      movea.w d0,a0
    156c:	                      clr.l -(sp)
    156e:	                      pea 1 <_start+0x1>
    1572:	                      move.l a1,-(sp)
    1574:	                      move.l a0,-(sp)
    1576:	                      pea 17daf <PutChar+0x165>
    157c:	                      move.l 72(sp),-(sp)
    1580:	                      jsr 1725e <debug_register_bitmap>
    1586:	                      lea 24(sp),sp
  #endif  

  WaitBlit();
    158a:	                      move.l 1c868 <GfxBase>,d0
    1590:	                      movea.l d0,a6
    1592:	                      jsr -228(a6)

  custom->bltafwm = 0xffff;
    1596:	                      movea.l 68(sp),a0
    159a:	                      move.w #-1,68(a0)
  custom->bltalwm = 0xffff;
    15a0:	                      movea.l 68(sp),a0
    15a4:	                      move.w #-1,70(a0)
  custom->bltamod = 0;
    15aa:	                      movea.l 68(sp),a0
    15ae:	                      move.w #0,100(a0)
  custom->bltbmod = 0;
    15b4:	                      movea.l 68(sp),a0
    15b8:	                      move.w #0,98(a0)
  custom->bltcmod = 0;
    15be:	                      movea.l 68(sp),a0
    15c2:	                      move.w #0,96(a0)
  custom->bltdmod = 0;
    15c8:	                      movea.l 68(sp),a0
    15cc:	                      move.w #0,102(a0)
  custom->bltcon0 = 0x9f0; //Copy A to D
    15d2:	                      movea.l 68(sp),a0
    15d6:	                      move.w #2544,64(a0)
  custom->bltcon1 = 0;        
    15dc:	                      movea.l 68(sp),a0
    15e0:	                      move.w #0,66(a0)

  custom->bltapt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    15e6:	                      movea.l 100(sp),a0
    15ea:	                      move.l 24(a0),d2
    15ee:	                      movea.l 100(sp),a0
    15f2:	                      move.l (a0),d0
    15f4:	                  /-- bpl.s 15f8 <CstDrawZBuffer+0x110>
    15f6:	                  |   addq.l #7,d0
    15f8:	                  \-> asr.l #3,d0
    15fa:	                      movea.l 100(sp),a0
    15fe:	                      move.l 4(a0),d1
    1602:	                      move.l d1,-(sp)
    1604:	                      move.l d0,-(sp)
    1606:	                      jsr 17b34 <__mulsi3>
    160c:	                      addq.l #8,sp
    160e:	                      move.l d0,d1
    1610:	                      move.l d1,d0
    1612:	                      add.l d0,d0
    1614:	                      add.l d0,d0
    1616:	                      add.l d1,d0
    1618:	                      add.l d2,d0
    161a:	                      movea.l 68(sp),a0
    161e:	                      move.l d0,80(a0)
  custom->bltdpt = (APTR) returnvalue;
    1622:	                      movea.l 68(sp),a0
    1626:	                      move.l 52(sp),84(a0)
  custom->bltsize = (sprite->height<<6)+sprite->width/16;      
    162c:	                      movea.l 100(sp),a0
    1630:	                      move.l 4(a0),d0
    1634:	                      move.l d0,d0
    1636:	                      move.w d0,d1
    1638:	                      lsl.w #6,d1
    163a:	                      movea.l 100(sp),a0
    163e:	                      move.l (a0),d0
    1640:	                      movea.l d0,a0
    1642:	                      cmpa.w #0,a0
    1646:	                  /-- bge.s 164c <CstDrawZBuffer+0x164>
    1648:	                  |   lea 15(a0),a0
    164c:	                  \-> move.l a0,d0
    164e:	                      asr.l #4,d0
    1650:	                      move.l d0,d0
    1652:	                      add.w d1,d0
    1654:	                      movea.l 68(sp),a0
    1658:	                      move.w d0,88(a0)

  while(zbuffer) 
    165c:	   /----------------- bra.w 1cb6 <CstDrawZBuffer+0x7ce>
  {

    UWORD spritex1oncanvas = x+sprite->xhot;
    1660:	/--|----------------> movea.l 100(sp),a0
    1664:	|  |                  move.l 8(a0),d0
    1668:	|  |                  move.l d0,d0
    166a:	|  |                  move.w 10(sp),d1
    166e:	|  |                  add.w d0,d1
    1670:	|  |                  move.w d1,50(sp)
    UWORD spritex2oncanvas = spritex1oncanvas+sprite->width;
    1674:	|  |                  movea.l 100(sp),a0
    1678:	|  |                  move.l (a0),d0
    167a:	|  |                  move.l d0,d0
    167c:	|  |                  move.w 50(sp),d1
    1680:	|  |                  add.w d0,d1
    1682:	|  |                  move.w d1,48(sp)
    UWORD spritey1oncanvas = y+sprite->yhot;
    1686:	|  |                  movea.l 100(sp),a0
    168a:	|  |                  move.l 12(a0),d0
    168e:	|  |                  move.l d0,d0
    1690:	|  |                  move.w 8(sp),d1
    1694:	|  |                  add.w d0,d1
    1696:	|  |                  move.w d1,46(sp)
    UWORD spritey2oncanvas = spritey1oncanvas + sprite->height;
    169a:	|  |                  movea.l 100(sp),a0
    169e:	|  |                  move.l 4(a0),d0
    16a2:	|  |                  move.l d0,d0
    16a4:	|  |                  move.w 46(sp),d1
    16a8:	|  |                  add.w d0,d1
    16aa:	|  |                  move.w d1,44(sp)

    UWORD zbufferx1oncanvas = zbuffer->topx;
    16ae:	|  |                  movea.l 104(sp),a0
    16b2:	|  |                  move.l 8(a0),d0
    16b6:	|  |                  move.w d0,42(sp)
    UWORD zbufferx2oncanvas = zbufferx1oncanvas + zbuffer->width;
    16ba:	|  |                  movea.l 104(sp),a0
    16be:	|  |                  move.l (a0),d0
    16c0:	|  |                  move.l d0,d0
    16c2:	|  |                  move.w 42(sp),d1
    16c6:	|  |                  add.w d0,d1
    16c8:	|  |                  move.w d1,40(sp)

    UWORD zbuffery1oncanvas = zbuffer->topy;
    16cc:	|  |                  movea.l 104(sp),a0
    16d0:	|  |                  move.l 12(a0),d0
    16d4:	|  |                  move.w d0,38(sp)
    UWORD zbuffery2oncanvas = zbuffery1oncanvas + zbuffer->height;
    16d8:	|  |                  movea.l 104(sp),a0
    16dc:	|  |                  move.l 4(a0),d0
    16e0:	|  |                  move.l d0,d0
    16e2:	|  |                  move.w 38(sp),d1
    16e6:	|  |                  add.w d0,d1
    16e8:	|  |                  move.w d1,36(sp)
  
    BOOL zbufferfromright = FALSE;
    16ec:	|  |                  clr.w 94(sp)
    BOOL zbufferfromleft = FALSE;
    16f0:	|  |                  clr.w 92(sp)
    BOOL zbufferfrombottom = FALSE;
    16f4:	|  |                  clr.w 90(sp)
    BOOL zbufferfromtop = FALSE;
    16f8:	|  |                  clr.w 88(sp)

    //Sprite will be drawn behind the zBuffer. We need to do something
    if(spritey2oncanvas < zbuffer->yz) {
    16fc:	|  |                  moveq #0,d0
    16fe:	|  |                  move.w 44(sp),d0
    1702:	|  |                  movea.l 104(sp),a0
    1706:	|  |                  move.l 16(a0),d1
    170a:	|  |                  cmp.l d0,d1
    170c:	|  +----------------- ble.w 1cb6 <CstDrawZBuffer+0x7ce>
      //sprite ------------x1+++++++++++++++++++x2-----------------*/
      /*zbuffer-------------------x1++++++++++?????????------------*/      
      if(spritex1oncanvas <= zbufferx1oncanvas && spritex2oncanvas > zbufferx1oncanvas)
    1710:	|  |                  move.w 42(sp),d0
    1714:	|  |                  cmp.w 50(sp),d0
    1718:	|  |              /-- bcs.s 172c <CstDrawZBuffer+0x244>
    171a:	|  |              |   move.w 42(sp),d1
    171e:	|  |              |   cmp.w 48(sp),d1
    1722:	|  |              +-- bcc.s 172c <CstDrawZBuffer+0x244>
        zbufferfromright = TRUE;
    1724:	|  |              |   move.w #1,94(sp)
    172a:	|  |           /--|-- bra.s 1746 <CstDrawZBuffer+0x25e>
      //sprite -------------------------x1++++??????-------*/
      /*zbuffer-------------------x1+++++++++++x2----------*/  
      else if(spritex1oncanvas > zbufferx1oncanvas && spritex1oncanvas < zbufferx2oncanvas)
    172c:	|  |           |  \-> move.w 42(sp),d0
    1730:	|  |           |      cmp.w 50(sp),d0
    1734:	|  |           +----- bcc.s 1746 <CstDrawZBuffer+0x25e>
    1736:	|  |           |      move.w 40(sp),d1
    173a:	|  |           |      cmp.w 50(sp),d1
    173e:	|  |           +----- bls.s 1746 <CstDrawZBuffer+0x25e>
        zbufferfromleft = TRUE;       
    1740:	|  |           |      move.w #1,92(sp)

      //Overlap on X-Axis. Now Check y-axis
      if( zbufferfromleft || zbufferfromright)         
    1746:	|  |           \----> tst.w 92(sp)
    174a:	|  |              /-- bne.s 1752 <CstDrawZBuffer+0x26a>
    174c:	|  |              |   tst.w 94(sp)
    1750:	|  |           /--|-- beq.s 1788 <CstDrawZBuffer+0x2a0>
      {
        if(spritey1oncanvas <= zbuffery1oncanvas && spritey2oncanvas > zbuffery1oncanvas)
    1752:	|  |           |  \-> move.w 38(sp),d0
    1756:	|  |           |      cmp.w 46(sp),d0
    175a:	|  |           |  /-- bcs.s 176e <CstDrawZBuffer+0x286>
    175c:	|  |           |  |   move.w 38(sp),d1
    1760:	|  |           |  |   cmp.w 44(sp),d1
    1764:	|  |           |  +-- bcc.s 176e <CstDrawZBuffer+0x286>
          zbufferfrombottom = TRUE;
    1766:	|  |           |  |   move.w #1,90(sp)
    176c:	|  |           +--|-- bra.s 1788 <CstDrawZBuffer+0x2a0>

        else if(spritey1oncanvas > zbuffery1oncanvas && spritey1oncanvas < zbuffery2oncanvas)
    176e:	|  |           |  \-> move.w 38(sp),d0
    1772:	|  |           |      cmp.w 46(sp),d0
    1776:	|  |           +----- bcc.s 1788 <CstDrawZBuffer+0x2a0>
    1778:	|  |           |      move.w 36(sp),d1
    177c:	|  |           |      cmp.w 46(sp),d1
    1780:	|  |           +----- bls.s 1788 <CstDrawZBuffer+0x2a0>
          zbufferfromtop = TRUE;       
    1782:	|  |           |      move.w #1,88(sp)
      }

      //Overlap on both Axis
      if( (zbufferfromright || zbufferfromleft) && (zbufferfrombottom || zbufferfromtop))
    1788:	|  |           \----> tst.w 94(sp)
    178c:	|  |              /-- bne.s 1796 <CstDrawZBuffer+0x2ae>
    178e:	|  |              |   tst.w 92(sp)
    1792:	|  |  /-----------|-- beq.w 1cac <CstDrawZBuffer+0x7c4>
    1796:	|  |  |           \-> tst.w 90(sp)
    179a:	|  |  |           /-- bne.s 17a4 <CstDrawZBuffer+0x2bc>
    179c:	|  |  |           |   tst.w 88(sp)
    17a0:	|  |  +-----------|-- beq.w 1cac <CstDrawZBuffer+0x7c4>
      {      

        ULONG bltapt;

        if(zbufferfromright)
    17a4:	|  |  |           \-> tst.w 94(sp)
    17a8:	|  |  |  /----------- beq.w 1a04 <CstDrawZBuffer+0x51c>
        {        
          //Get Distance R
          /*sprite  ------------x1++++++++++?????????-------------------------*/    
          //zbuffer ------------------x1+++++++++++++++++++x2-----------------*/             
          
          UWORD xdiff = spritex1oncanvas - zbufferx1oncanvas;
    17ac:	|  |  |  |            move.w 50(sp),d0
    17b0:	|  |  |  |            sub.w 42(sp),d0
    17b4:	|  |  |  |            move.w d0,22(sp)
          UWORD xdiffbyte = (xdiff / 16) * 2;          
    17b8:	|  |  |  |            move.w 22(sp),d0
    17bc:	|  |  |  |            lsr.w #4,d0
    17be:	|  |  |  |            add.w d0,d0
    17c0:	|  |  |  |            move.w d0,20(sp)
          UWORD xdiffrest = xdiff - xdiffbyte * 8;
    17c4:	|  |  |  |            move.w 20(sp),d0
    17c8:	|  |  |  |            lsl.w #3,d0
    17ca:	|  |  |  |            move.w 22(sp),d1
    17ce:	|  |  |  |            sub.w d0,d1
    17d0:	|  |  |  |            move.w d1,18(sp)
          UWORD bytewidth, width, rest;


          if( zbufferx2oncanvas > spritex2oncanvas)    
    17d4:	|  |  |  |            move.w 48(sp),d0
    17d8:	|  |  |  |            cmp.w 40(sp),d0
    17dc:	|  |  |  |     /----- bcc.w 18c0 <CstDrawZBuffer+0x3d8>
            //Width       ----------------++++++++++++++++++++++++++++----
            //BWidth      ----------------++++++++++++++++++++++++++++++++
            //ShiftB      ------------------------------------------------

         
            width = spritex2oncanvas - zbufferx1oncanvas;
    17e0:	|  |  |  |     |      move.w 48(sp),d1
    17e4:	|  |  |  |     |      sub.w 42(sp),d1
    17e8:	|  |  |  |     |      move.w d1,16(sp)
            bytewidth = (width/16)*2;
    17ec:	|  |  |  |     |      move.w 16(sp),d0
    17f0:	|  |  |  |     |      lsr.w #4,d0
    17f2:	|  |  |  |     |      add.w d0,d0
    17f4:	|  |  |  |     |      move.w d0,82(sp)

            WaitBlit();
    17f8:	|  |  |  |     |      move.l 1c868 <GfxBase>,d0
    17fe:	|  |  |  |     |      movea.l d0,a6
    1800:	|  |  |  |     |      jsr -228(a6)

            bltapt = zbuffer->bitplane;
    1804:	|  |  |  |     |      movea.l 104(sp),a0
    1808:	|  |  |  |     |      move.l 20(a0),d0
    180c:	|  |  |  |     |      move.l d0,84(sp)
            if( xdiffrest) {
    1810:	|  |  |  |     |      tst.w 18(sp)
    1814:	|  |  |  |     |  /-- beq.s 181a <CstDrawZBuffer+0x332>
              bytewidth += 2;            
    1816:	|  |  |  |     |  |   addq.w #2,82(sp)
            } 

            custom->bltalwm = 0xffff << xdiffrest;
    181a:	|  |  |  |     |  \-> moveq #0,d0
    181c:	|  |  |  |     |      move.w 18(sp),d0
    1820:	|  |  |  |     |      moveq #0,d1
    1822:	|  |  |  |     |      not.w d1
    1824:	|  |  |  |     |      lsl.l d0,d1
    1826:	|  |  |  |     |      move.l d1,d0
    1828:	|  |  |  |     |      movea.l 68(sp),a0
    182c:	|  |  |  |     |      move.w d0,70(a0)
            custom->bltcon0 = xdiffrest * 4096 + 0xd0c;              
    1830:	|  |  |  |     |      move.w 18(sp),d0
    1834:	|  |  |  |     |      moveq #12,d1
    1836:	|  |  |  |     |      lsl.w d1,d0
    1838:	|  |  |  |     |      addi.w #3340,d0
    183c:	|  |  |  |     |      movea.l 68(sp),a0
    1840:	|  |  |  |     |      move.w d0,64(a0)
            custom->bltbpt = returnvalue + bytewidth;
    1844:	|  |  |  |     |      moveq #0,d0
    1846:	|  |  |  |     |      move.w 82(sp),d0
    184a:	|  |  |  |     |      add.l 52(sp),d0
    184e:	|  |  |  |     |      movea.l 68(sp),a0
    1852:	|  |  |  |     |      move.l d0,76(a0)
            custom->bltdpt = returnvalue + bytewidth;
    1856:	|  |  |  |     |      moveq #0,d0
    1858:	|  |  |  |     |      move.w 82(sp),d0
    185c:	|  |  |  |     |      add.l 52(sp),d0
    1860:	|  |  |  |     |      movea.l 68(sp),a0
    1864:	|  |  |  |     |      move.l d0,84(a0)
            custom->bltafwm = 0xffff;
    1868:	|  |  |  |     |      movea.l 68(sp),a0
    186c:	|  |  |  |     |      move.w #-1,68(a0)
            custom->bltbmod = sprite->width/8 - bytewidth;
    1872:	|  |  |  |     |      movea.l 100(sp),a0
    1876:	|  |  |  |     |      move.l (a0),d0
    1878:	|  |  |  |     |  /-- bpl.s 187c <CstDrawZBuffer+0x394>
    187a:	|  |  |  |     |  |   addq.l #7,d0
    187c:	|  |  |  |     |  \-> asr.l #3,d0
    187e:	|  |  |  |     |      move.l d0,d0
    1880:	|  |  |  |     |      sub.w 82(sp),d0
    1884:	|  |  |  |     |      movea.l 68(sp),a0
    1888:	|  |  |  |     |      move.w d0,98(a0)
            custom->bltamod = zbuffer->width/8 - bytewidth;
    188c:	|  |  |  |     |      movea.l 104(sp),a0
    1890:	|  |  |  |     |      move.l (a0),d0
    1892:	|  |  |  |     |  /-- bpl.s 1896 <CstDrawZBuffer+0x3ae>
    1894:	|  |  |  |     |  |   addq.l #7,d0
    1896:	|  |  |  |     |  \-> asr.l #3,d0
    1898:	|  |  |  |     |      move.l d0,d0
    189a:	|  |  |  |     |      sub.w 82(sp),d0
    189e:	|  |  |  |     |      movea.l 68(sp),a0
    18a2:	|  |  |  |     |      move.w d0,100(a0)
            custom->bltdmod = sprite->width/8 - bytewidth;                      
    18a6:	|  |  |  |     |      movea.l 100(sp),a0
    18aa:	|  |  |  |     |      move.l (a0),d0
    18ac:	|  |  |  |     |  /-- bpl.s 18b0 <CstDrawZBuffer+0x3c8>
    18ae:	|  |  |  |     |  |   addq.l #7,d0
    18b0:	|  |  |  |     |  \-> asr.l #3,d0
    18b2:	|  |  |  |     |      move.l d0,d0
    18b4:	|  |  |  |     |      sub.w 82(sp),d0
    18b8:	|  |  |  |     |      movea.l 68(sp),a0
    18bc:	|  |  |  |     |      move.w d0,102(a0)
          }
          
          if(zbufferfromtop)
    18c0:	|  |  |  |     \----> tst.w 88(sp)
    18c4:	|  |  |  |  /-------- beq.w 194c <CstDrawZBuffer+0x464>
          {
            //Get Distance R
            //zbuffer ------------x1+++++++++++++++++++x2-----------------*/
            /*sprite--------------RRRRRRRRx1++++++++++?????????------------*/    
            UWORD ydiff = spritey1oncanvas - zbuffery1oncanvas;
    18c8:	|  |  |  |  |         move.w 46(sp),d0
    18cc:	|  |  |  |  |         sub.w 38(sp),d0
    18d0:	|  |  |  |  |         move.w d0,12(sp)

            UWORD height;
            if( zbuffery2oncanvas > spritey2oncanvas) 
    18d4:	|  |  |  |  |         move.w 44(sp),d1
    18d8:	|  |  |  |  |         cmp.w 36(sp),d1
    18dc:	|  |  |  |  |  /----- bcc.s 18ec <CstDrawZBuffer+0x404>
              height = sprite->height;
    18de:	|  |  |  |  |  |      movea.l 100(sp),a0
    18e2:	|  |  |  |  |  |      move.l 4(a0),d0
    18e6:	|  |  |  |  |  |      move.w d0,80(sp)
    18ea:	|  |  |  |  |  |  /-- bra.s 18f8 <CstDrawZBuffer+0x410>
            else
              height = zbuffery2oncanvas - spritey1oncanvas;
    18ec:	|  |  |  |  |  \--|-> move.w 36(sp),d0
    18f0:	|  |  |  |  |     |   sub.w 46(sp),d0
    18f4:	|  |  |  |  |     |   move.w d0,80(sp)

            WaitBlit();
    18f8:	|  |  |  |  |     \-> move.l 1c868 <GfxBase>,d0
    18fe:	|  |  |  |  |         movea.l d0,a6
    1900:	|  |  |  |  |         jsr -228(a6)

            custom->bltapt = bltapt + ydiff*zbuffer->width/8;            
    1904:	|  |  |  |  |         moveq #0,d0
    1906:	|  |  |  |  |         move.w 12(sp),d0
    190a:	|  |  |  |  |         movea.l 104(sp),a0
    190e:	|  |  |  |  |         move.l (a0),d1
    1910:	|  |  |  |  |         move.l d1,-(sp)
    1912:	|  |  |  |  |         move.l d0,-(sp)
    1914:	|  |  |  |  |         jsr 17b34 <__mulsi3>
    191a:	|  |  |  |  |         addq.l #8,sp
    191c:	|  |  |  |  |         tst.l d0
    191e:	|  |  |  |  |     /-- bge.s 1922 <CstDrawZBuffer+0x43a>
    1920:	|  |  |  |  |     |   addq.l #7,d0
    1922:	|  |  |  |  |     \-> asr.l #3,d0
    1924:	|  |  |  |  |         add.l 84(sp),d0
    1928:	|  |  |  |  |         movea.l 68(sp),a0
    192c:	|  |  |  |  |         move.l d0,80(a0)
            custom->bltsize = height*64+bytewidth/2;
    1930:	|  |  |  |  |         move.w 80(sp),d0
    1934:	|  |  |  |  |         move.w d0,d1
    1936:	|  |  |  |  |         lsl.w #6,d1
    1938:	|  |  |  |  |         move.w 82(sp),d0
    193c:	|  |  |  |  |         lsr.w #1,d0
    193e:	|  |  |  |  |         add.w d1,d0
    1940:	|  |  |  |  |         movea.l 68(sp),a0
    1944:	|  |  |  |  |         move.w d0,88(a0)
    1948:	|  |  +--|--|-------- bra.w 1cac <CstDrawZBuffer+0x7c4>
          //Zbufferfrombottom
          {
           //Get Distance R
            //sprite ------------x1+++++++++++++++++++x2-----------------*/
            /*zbuffer------------RRRRRRRRx1++++++++++?????????------------*/    
            UWORD ydiff = zbuffery1oncanvas - spritey1oncanvas; 
    194c:	|  |  |  |  \-------> move.w 38(sp),d1
    1950:	|  |  |  |            sub.w 46(sp),d1
    1954:	|  |  |  |            move.w d1,14(sp)

            UWORD height;
            if( zbuffery2oncanvas > spritey2oncanvas) 
    1958:	|  |  |  |            move.w 44(sp),d0
    195c:	|  |  |  |            cmp.w 36(sp),d0
    1960:	|  |  |  |     /----- bcc.s 1970 <CstDrawZBuffer+0x488>
              height = spritey2oncanvas - zbuffery1oncanvas; 
    1962:	|  |  |  |     |      move.w 44(sp),d1
    1966:	|  |  |  |     |      sub.w 38(sp),d1
    196a:	|  |  |  |     |      move.w d1,78(sp)
    196e:	|  |  |  |     |  /-- bra.s 197c <CstDrawZBuffer+0x494>
            else
              height = zbuffer->height;
    1970:	|  |  |  |     \--|-> movea.l 104(sp),a0
    1974:	|  |  |  |        |   move.l 4(a0),d0
    1978:	|  |  |  |        |   move.w d0,78(sp)

            WaitBlit();
    197c:	|  |  |  |        \-> move.l 1c868 <GfxBase>,d0
    1982:	|  |  |  |            movea.l d0,a6
    1984:	|  |  |  |            jsr -228(a6)

            custom->bltbpt = returnvalue+xdiffbyte+ydiff*sprite->width/8;            
    1988:	|  |  |  |            moveq #0,d2
    198a:	|  |  |  |            move.w 20(sp),d2
    198e:	|  |  |  |            moveq #0,d0
    1990:	|  |  |  |            move.w 14(sp),d0
    1994:	|  |  |  |            movea.l 100(sp),a0
    1998:	|  |  |  |            move.l (a0),d1
    199a:	|  |  |  |            move.l d1,-(sp)
    199c:	|  |  |  |            move.l d0,-(sp)
    199e:	|  |  |  |            jsr 17b34 <__mulsi3>
    19a4:	|  |  |  |            addq.l #8,sp
    19a6:	|  |  |  |            tst.l d0
    19a8:	|  |  |  |        /-- bge.s 19ac <CstDrawZBuffer+0x4c4>
    19aa:	|  |  |  |        |   addq.l #7,d0
    19ac:	|  |  |  |        \-> asr.l #3,d0
    19ae:	|  |  |  |            add.l d2,d0
    19b0:	|  |  |  |            add.l 52(sp),d0
    19b4:	|  |  |  |            movea.l 68(sp),a0
    19b8:	|  |  |  |            move.l d0,76(a0)
            custom->bltdpt = returnvalue+xdiffbyte+ydiff*sprite->width;          
    19bc:	|  |  |  |            moveq #0,d2
    19be:	|  |  |  |            move.w 20(sp),d2
    19c2:	|  |  |  |            moveq #0,d0
    19c4:	|  |  |  |            move.w 14(sp),d0
    19c8:	|  |  |  |            movea.l 100(sp),a0
    19cc:	|  |  |  |            move.l (a0),d1
    19ce:	|  |  |  |            move.l d1,-(sp)
    19d0:	|  |  |  |            move.l d0,-(sp)
    19d2:	|  |  |  |            jsr 17b34 <__mulsi3>
    19d8:	|  |  |  |            addq.l #8,sp
    19da:	|  |  |  |            add.l d2,d0
    19dc:	|  |  |  |            add.l 52(sp),d0
    19e0:	|  |  |  |            movea.l 68(sp),a0
    19e4:	|  |  |  |            move.l d0,84(a0)
            custom->bltsize = height*64+bytewidth/2;
    19e8:	|  |  |  |            move.w 78(sp),d0
    19ec:	|  |  |  |            move.w d0,d1
    19ee:	|  |  |  |            lsl.w #6,d1
    19f0:	|  |  |  |            move.w 82(sp),d0
    19f4:	|  |  |  |            lsr.w #1,d0
    19f6:	|  |  |  |            add.w d1,d0
    19f8:	|  |  |  |            movea.l 68(sp),a0
    19fc:	|  |  |  |            move.w d0,88(a0)
    1a00:	|  |  +--|----------- bra.w 1cac <CstDrawZBuffer+0x7c4>
        {
          //Get Distance R
          /*sprite  ------------RRRRRRRRx1++++++++++?????????------------*/    
          //zbuffer ------------x1+++++++++++++++++++x2-----------------*/                    
          
          UWORD xdiff = spritex1oncanvas - zbufferx1oncanvas;
    1a04:	|  |  |  \----------> move.w 50(sp),d0
    1a08:	|  |  |               sub.w 42(sp),d0
    1a0c:	|  |  |               move.w d0,34(sp)
          UWORD xdiffbyte = (xdiff / 16) * 2;          
    1a10:	|  |  |               move.w 34(sp),d0
    1a14:	|  |  |               lsr.w #4,d0
    1a16:	|  |  |               add.w d0,d0
    1a18:	|  |  |               move.w d0,32(sp)
          UWORD xdiffrest = xdiff - xdiffbyte * 8;
    1a1c:	|  |  |               move.w 32(sp),d0
    1a20:	|  |  |               lsl.w #3,d0
    1a22:	|  |  |               move.w 34(sp),d1
    1a26:	|  |  |               sub.w d0,d1
    1a28:	|  |  |               move.w d1,30(sp)
          UWORD bytewidth, width, rest;


          if( zbufferx2oncanvas > spritex2oncanvas)    
    1a2c:	|  |  |               move.w 48(sp),d0
    1a30:	|  |  |               cmp.w 40(sp),d0
    1a34:	|  |  |     /-------- bcc.w 1b6c <CstDrawZBuffer+0x684>
                            //Data        KKKKKKKKKKKKKKKKCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
                            //BltBpt      +---------------------------------------------------------------
                            //BlBmod      NNNNNNNNNNNNNNNN------------------------------------------------
                            //ShiftB      ----------------------------------------------------------------
         
            width = spritex2oncanvas - spritex1oncanvas; 
    1a38:	|  |  |     |         move.w 48(sp),d1
    1a3c:	|  |  |     |         sub.w 50(sp),d1
    1a40:	|  |  |     |         move.w d1,28(sp)
            bytewidth = (width/16)*2;
    1a44:	|  |  |     |         move.w 28(sp),d0
    1a48:	|  |  |     |         lsr.w #4,d0
    1a4a:	|  |  |     |         add.w d0,d0
    1a4c:	|  |  |     |         move.w d0,76(sp)

            WaitBlit();
    1a50:	|  |  |     |         move.l 1c868 <GfxBase>,d0
    1a56:	|  |  |     |         movea.l d0,a6
    1a58:	|  |  |     |         jsr -228(a6)

            bltapt = zbuffer->bitplane + xdiffbyte;
    1a5c:	|  |  |     |         movea.l 104(sp),a0
    1a60:	|  |  |     |         move.l 20(a0),d1
    1a64:	|  |  |     |         moveq #0,d0
    1a66:	|  |  |     |         move.w 32(sp),d0
    1a6a:	|  |  |     |         add.l d1,d0
    1a6c:	|  |  |     |         move.l d0,84(sp)
            if( xdiffrest) {
    1a70:	|  |  |     |         tst.w 30(sp)
    1a74:	|  |  |     |  /----- beq.s 1ae8 <CstDrawZBuffer+0x600>
              bytewidth += 2;
    1a76:	|  |  |     |  |      addq.w #2,76(sp)
              bltapt += -2;
    1a7a:	|  |  |     |  |      subq.l #2,84(sp)
              custom->bltcon0 = (16 - xdiffrest) * 4096 + 0xd0c;
    1a7e:	|  |  |     |  |      moveq #0,d0
    1a80:	|  |  |     |  |      move.w 30(sp),d0
    1a84:	|  |  |     |  |      moveq #16,d1
    1a86:	|  |  |     |  |      sub.l d0,d1
    1a88:	|  |  |     |  |      move.l d1,d0
    1a8a:	|  |  |     |  |      moveq #12,d1
    1a8c:	|  |  |     |  |      lsl.w d1,d0
    1a8e:	|  |  |     |  |      addi.w #3340,d0
    1a92:	|  |  |     |  |      movea.l 68(sp),a0
    1a96:	|  |  |     |  |      move.w d0,64(a0)
              custom->bltafwm = 0xffff >> (16 - xdiffrest);
    1a9a:	|  |  |     |  |      moveq #0,d0
    1a9c:	|  |  |     |  |      move.w 30(sp),d0
    1aa0:	|  |  |     |  |      moveq #16,d1
    1aa2:	|  |  |     |  |      sub.l d0,d1
    1aa4:	|  |  |     |  |      moveq #0,d0
    1aa6:	|  |  |     |  |      not.w d0
    1aa8:	|  |  |     |  |      asr.l d1,d0
    1aaa:	|  |  |     |  |      move.l d0,d0
    1aac:	|  |  |     |  |      movea.l 68(sp),a0
    1ab0:	|  |  |     |  |      move.w d0,68(a0)
              custom->bltalwm = 0xffff << xdiffrest;
    1ab4:	|  |  |     |  |      moveq #0,d0
    1ab6:	|  |  |     |  |      move.w 30(sp),d0
    1aba:	|  |  |     |  |      moveq #0,d1
    1abc:	|  |  |     |  |      not.w d1
    1abe:	|  |  |     |  |      lsl.l d0,d1
    1ac0:	|  |  |     |  |      move.l d1,d0
    1ac2:	|  |  |     |  |      movea.l 68(sp),a0
    1ac6:	|  |  |     |  |      move.w d0,70(a0)
              custom->bltbpt = returnvalue - 2;
    1aca:	|  |  |     |  |      move.l 52(sp),d0
    1ace:	|  |  |     |  |      subq.l #2,d0
    1ad0:	|  |  |     |  |      movea.l 68(sp),a0
    1ad4:	|  |  |     |  |      move.l d0,76(a0)
              custom->bltdpt = returnvalue - 2;
    1ad8:	|  |  |     |  |      move.l 52(sp),d0
    1adc:	|  |  |     |  |      subq.l #2,d0
    1ade:	|  |  |     |  |      movea.l 68(sp),a0
    1ae2:	|  |  |     |  |      move.l d0,84(a0)
    1ae6:	|  |  |     |  |  /-- bra.s 1b1e <CstDrawZBuffer+0x636>
            } else {
              bytewidth += 2;
    1ae8:	|  |  |     |  \--|-> addq.w #2,76(sp)
              custom->bltcon0 = 0xd0c;
    1aec:	|  |  |     |     |   movea.l 68(sp),a0
    1af0:	|  |  |     |     |   move.w #3340,64(a0)
              custom->bltafwm = 0xffff;
    1af6:	|  |  |     |     |   movea.l 68(sp),a0
    1afa:	|  |  |     |     |   move.w #-1,68(a0)
              custom->bltalwm = 0xffff;
    1b00:	|  |  |     |     |   movea.l 68(sp),a0
    1b04:	|  |  |     |     |   move.w #-1,70(a0)
              custom->bltbpt = returnvalue;
    1b0a:	|  |  |     |     |   movea.l 68(sp),a0
    1b0e:	|  |  |     |     |   move.l 52(sp),76(a0)
              custom->bltdpt = returnvalue;
    1b14:	|  |  |     |     |   movea.l 68(sp),a0
    1b18:	|  |  |     |     |   move.l 52(sp),84(a0)
            }

            custom->bltbmod = sprite->width/8 - bytewidth;
    1b1e:	|  |  |     |     \-> movea.l 100(sp),a0
    1b22:	|  |  |     |         move.l (a0),d0
    1b24:	|  |  |     |     /-- bpl.s 1b28 <CstDrawZBuffer+0x640>
    1b26:	|  |  |     |     |   addq.l #7,d0
    1b28:	|  |  |     |     \-> asr.l #3,d0
    1b2a:	|  |  |     |         move.l d0,d0
    1b2c:	|  |  |     |         sub.w 76(sp),d0
    1b30:	|  |  |     |         movea.l 68(sp),a0
    1b34:	|  |  |     |         move.w d0,98(a0)
            custom->bltamod = zbuffer->width/8 - bytewidth;
    1b38:	|  |  |     |         movea.l 104(sp),a0
    1b3c:	|  |  |     |         move.l (a0),d0
    1b3e:	|  |  |     |     /-- bpl.s 1b42 <CstDrawZBuffer+0x65a>
    1b40:	|  |  |     |     |   addq.l #7,d0
    1b42:	|  |  |     |     \-> asr.l #3,d0
    1b44:	|  |  |     |         move.l d0,d0
    1b46:	|  |  |     |         sub.w 76(sp),d0
    1b4a:	|  |  |     |         movea.l 68(sp),a0
    1b4e:	|  |  |     |         move.w d0,100(a0)
            custom->bltdmod = sprite->width/8 - bytewidth;                      
    1b52:	|  |  |     |         movea.l 100(sp),a0
    1b56:	|  |  |     |         move.l (a0),d0
    1b58:	|  |  |     |     /-- bpl.s 1b5c <CstDrawZBuffer+0x674>
    1b5a:	|  |  |     |     |   addq.l #7,d0
    1b5c:	|  |  |     |     \-> asr.l #3,d0
    1b5e:	|  |  |     |         move.l d0,d0
    1b60:	|  |  |     |         sub.w 76(sp),d0
    1b64:	|  |  |     |         movea.l 68(sp),a0
    1b68:	|  |  |     |         move.w d0,102(a0)
          }
          
          if(zbufferfromtop)
    1b6c:	|  |  |     \-------> tst.w 88(sp)
    1b70:	|  |  |     /-------- beq.w 1bf8 <CstDrawZBuffer+0x710>
          {
            //Get Distance R
            //zbuffer ------------x1+++++++++++++++++++x2-----------------*/
            /*sprite--------------RRRRRRRRx1++++++++++?????????------------*/    
            UWORD ydiff = spritey1oncanvas - zbuffery1oncanvas;
    1b74:	|  |  |     |         move.w 46(sp),d0
    1b78:	|  |  |     |         sub.w 38(sp),d0
    1b7c:	|  |  |     |         move.w d0,24(sp)

            UWORD height;
            if( zbuffery2oncanvas > spritey2oncanvas) 
    1b80:	|  |  |     |         move.w 44(sp),d1
    1b84:	|  |  |     |         cmp.w 36(sp),d1
    1b88:	|  |  |     |  /----- bcc.s 1b98 <CstDrawZBuffer+0x6b0>
              height = sprite->height;
    1b8a:	|  |  |     |  |      movea.l 100(sp),a0
    1b8e:	|  |  |     |  |      move.l 4(a0),d0
    1b92:	|  |  |     |  |      move.w d0,74(sp)
    1b96:	|  |  |     |  |  /-- bra.s 1ba4 <CstDrawZBuffer+0x6bc>
            else
              height = zbuffery2oncanvas - spritey1oncanvas;
    1b98:	|  |  |     |  \--|-> move.w 36(sp),d0
    1b9c:	|  |  |     |     |   sub.w 46(sp),d0
    1ba0:	|  |  |     |     |   move.w d0,74(sp)

            WaitBlit();
    1ba4:	|  |  |     |     \-> move.l 1c868 <GfxBase>,d0
    1baa:	|  |  |     |         movea.l d0,a6
    1bac:	|  |  |     |         jsr -228(a6)

            custom->bltapt = bltapt + ydiff*zbuffer->width/8;            
    1bb0:	|  |  |     |         moveq #0,d0
    1bb2:	|  |  |     |         move.w 24(sp),d0
    1bb6:	|  |  |     |         movea.l 104(sp),a0
    1bba:	|  |  |     |         move.l (a0),d1
    1bbc:	|  |  |     |         move.l d1,-(sp)
    1bbe:	|  |  |     |         move.l d0,-(sp)
    1bc0:	|  |  |     |         jsr 17b34 <__mulsi3>
    1bc6:	|  |  |     |         addq.l #8,sp
    1bc8:	|  |  |     |         tst.l d0
    1bca:	|  |  |     |     /-- bge.s 1bce <CstDrawZBuffer+0x6e6>
    1bcc:	|  |  |     |     |   addq.l #7,d0
    1bce:	|  |  |     |     \-> asr.l #3,d0
    1bd0:	|  |  |     |         add.l 84(sp),d0
    1bd4:	|  |  |     |         movea.l 68(sp),a0
    1bd8:	|  |  |     |         move.l d0,80(a0)
            custom->bltsize = height*64+bytewidth/2;
    1bdc:	|  |  |     |         move.w 74(sp),d0
    1be0:	|  |  |     |         move.w d0,d1
    1be2:	|  |  |     |         lsl.w #6,d1
    1be4:	|  |  |     |         move.w 76(sp),d0
    1be8:	|  |  |     |         lsr.w #1,d0
    1bea:	|  |  |     |         add.w d1,d0
    1bec:	|  |  |     |         movea.l 68(sp),a0
    1bf0:	|  |  |     |         move.w d0,88(a0)
    1bf4:	|  |  +-----|-------- bra.w 1cac <CstDrawZBuffer+0x7c4>
          //Zbufferfrombottom
          {
           //Get Distance R
            //sprite ------------x1+++++++++++++++++++x2-----------------*/
            /*zbuffer------------RRRRRRRRx1++++++++++?????????------------*/    
            UWORD ydiff = zbuffery1oncanvas - spritey1oncanvas; 
    1bf8:	|  |  |     \-------> move.w 38(sp),d1
    1bfc:	|  |  |               sub.w 46(sp),d1
    1c00:	|  |  |               move.w d1,26(sp)

            UWORD height;
            if( zbuffery2oncanvas > spritey2oncanvas) 
    1c04:	|  |  |               move.w 44(sp),d0
    1c08:	|  |  |               cmp.w 36(sp),d0
    1c0c:	|  |  |        /----- bcc.s 1c1c <CstDrawZBuffer+0x734>
              height = spritey2oncanvas - zbuffery1oncanvas; 
    1c0e:	|  |  |        |      move.w 44(sp),d1
    1c12:	|  |  |        |      sub.w 38(sp),d1
    1c16:	|  |  |        |      move.w d1,72(sp)
    1c1a:	|  |  |        |  /-- bra.s 1c28 <CstDrawZBuffer+0x740>
            else
              height = zbuffer->height;
    1c1c:	|  |  |        \--|-> movea.l 104(sp),a0
    1c20:	|  |  |           |   move.l 4(a0),d0
    1c24:	|  |  |           |   move.w d0,72(sp)

            WaitBlit();
    1c28:	|  |  |           \-> move.l 1c868 <GfxBase>,d0
    1c2e:	|  |  |               movea.l d0,a6
    1c30:	|  |  |               jsr -228(a6)

            custom->bltbpt = returnvalue+xdiffbyte+ydiff*sprite->width/8;            
    1c34:	|  |  |               moveq #0,d2
    1c36:	|  |  |               move.w 32(sp),d2
    1c3a:	|  |  |               moveq #0,d0
    1c3c:	|  |  |               move.w 26(sp),d0
    1c40:	|  |  |               movea.l 100(sp),a0
    1c44:	|  |  |               move.l (a0),d1
    1c46:	|  |  |               move.l d1,-(sp)
    1c48:	|  |  |               move.l d0,-(sp)
    1c4a:	|  |  |               jsr 17b34 <__mulsi3>
    1c50:	|  |  |               addq.l #8,sp
    1c52:	|  |  |               tst.l d0
    1c54:	|  |  |           /-- bge.s 1c58 <CstDrawZBuffer+0x770>
    1c56:	|  |  |           |   addq.l #7,d0
    1c58:	|  |  |           \-> asr.l #3,d0
    1c5a:	|  |  |               add.l d2,d0
    1c5c:	|  |  |               add.l 52(sp),d0
    1c60:	|  |  |               movea.l 68(sp),a0
    1c64:	|  |  |               move.l d0,76(a0)
            custom->bltdpt = returnvalue+xdiffbyte+ydiff*sprite->width;          
    1c68:	|  |  |               moveq #0,d2
    1c6a:	|  |  |               move.w 32(sp),d2
    1c6e:	|  |  |               moveq #0,d0
    1c70:	|  |  |               move.w 26(sp),d0
    1c74:	|  |  |               movea.l 100(sp),a0
    1c78:	|  |  |               move.l (a0),d1
    1c7a:	|  |  |               move.l d1,-(sp)
    1c7c:	|  |  |               move.l d0,-(sp)
    1c7e:	|  |  |               jsr 17b34 <__mulsi3>
    1c84:	|  |  |               addq.l #8,sp
    1c86:	|  |  |               add.l d2,d0
    1c88:	|  |  |               add.l 52(sp),d0
    1c8c:	|  |  |               movea.l 68(sp),a0
    1c90:	|  |  |               move.l d0,84(a0)
            custom->bltsize = height*64+bytewidth/2;
    1c94:	|  |  |               move.w 72(sp),d0
    1c98:	|  |  |               move.w d0,d1
    1c9a:	|  |  |               lsl.w #6,d1
    1c9c:	|  |  |               move.w 76(sp),d0
    1ca0:	|  |  |               lsr.w #1,d0
    1ca2:	|  |  |               add.w d1,d0
    1ca4:	|  |  |               movea.l 68(sp),a0
    1ca8:	|  |  |               move.w d0,88(a0)
          }
        }     
      }
      zbuffer = zbuffer->nextPanel;
    1cac:	|  |  \-------------> movea.l 104(sp),a0
    1cb0:	|  |                  move.l 24(a0),104(sp)
  while(zbuffer) 
    1cb6:	|  \----------------> tst.l 104(sp)
    1cba:	\-------------------- bne.w 1660 <CstDrawZBuffer+0x178>
    }
  }

  return returnvalue;
    1cbe:	                      move.l 52(sp),d0

}
    1cc2:	                      move.l (sp)+,d2
    1cc4:	                      movea.l (sp)+,a6
    1cc6:	                      lea 88(sp),sp
    1cca:	                      rts

00001ccc <CstFreeBuffer>:

void CstFreeBuffer( ) {
    1ccc:	    lea -20(sp),sp
    1cd0:	    move.l a6,-(sp)
  if( CstDrawBuffer) FreeVec(CstDrawBuffer);
    1cd2:	    move.l 1c790 <CstDrawBuffer>,d0
    1cd8:	/-- beq.s 1cf2 <CstFreeBuffer+0x26>
    1cda:	|   move.l 1c790 <CstDrawBuffer>,20(sp)
    1ce2:	|   move.l 1c85c <SysBase>,d0
    1ce8:	|   movea.l d0,a6
    1cea:	|   movea.l 20(sp),a1
    1cee:	|   jsr -690(a6)
  if( CstViewBuffer) FreeVec(CstViewBuffer);
    1cf2:	\-> move.l 1c78c <CstViewBuffer>,d0
    1cf8:	/-- beq.s 1d12 <CstFreeBuffer+0x46>
    1cfa:	|   move.l 1c78c <CstViewBuffer>,16(sp)
    1d02:	|   move.l 1c85c <SysBase>,d0
    1d08:	|   movea.l d0,a6
    1d0a:	|   movea.l 16(sp),a1
    1d0e:	|   jsr -690(a6)
  if( CstCopperList) FreeVec(CstCopperList);  
    1d12:	\-> move.l 1c786 <CstCopperList>,d0
    1d18:	/-- beq.s 1d32 <CstFreeBuffer+0x66>
    1d1a:	|   move.l 1c786 <CstCopperList>,12(sp)
    1d22:	|   move.l 1c85c <SysBase>,d0
    1d28:	|   movea.l d0,a6
    1d2a:	|   movea.l 12(sp),a1
    1d2e:	|   jsr -690(a6)
  if( CstBackDrop) FreeVec(CstBackDrop);  
    1d32:	\-> move.l 1c77e <CstBackDrop>,d0
    1d38:	/-- beq.s 1d52 <CstFreeBuffer+0x86>
    1d3a:	|   move.l 1c77e <CstBackDrop>,8(sp)
    1d42:	|   move.l 1c85c <SysBase>,d0
    1d48:	|   movea.l d0,a6
    1d4a:	|   movea.l 8(sp),a1
    1d4e:	|   jsr -690(a6)
  if( CstBackDropBackup) FreeVec(CstBackDropBackup);
    1d52:	\-> move.l 1c782 <CstBackDropBackup>,d0
    1d58:	/-- beq.s 1d72 <CstFreeBuffer+0xa6>
    1d5a:	|   move.l 1c782 <CstBackDropBackup>,4(sp)
    1d62:	|   move.l 1c85c <SysBase>,d0
    1d68:	|   movea.l d0,a6
    1d6a:	|   movea.l 4(sp),a1
    1d6e:	|   jsr -690(a6)
  CstDrawBuffer = NULL;
    1d72:	\-> clr.l 1c790 <CstDrawBuffer>
  CstViewBuffer = NULL;
    1d78:	    clr.l 1c78c <CstViewBuffer>
  CstCopperList = NULL;
    1d7e:	    clr.l 1c786 <CstCopperList>
  CstBackDrop = NULL;
    1d84:	    clr.l 1c77e <CstBackDrop>

}
    1d8a:	    nop
    1d8c:	    movea.l (sp)+,a6
    1d8e:	    lea 20(sp),sp
    1d92:	    rts

00001d94 <CstFreeze>:



void CstFreeze( ) {
    1d94:	       lea -36(sp),sp
    1d98:	       move.l a6,-(sp)
    1d9a:	       move.l d2,-(sp)

	KPrintF("CstFreeze: Freezing Background Started");  
    1d9c:	       pea 17dba <PutChar+0x170>
    1da2:	       jsr 17176 <KPrintF>
    1da8:	       addq.l #4,sp

  UWORD size = winWidth/8*winHeight*5;
    1daa:	       move.l 1c7b0 <winWidth>,d0
    1db0:	       lsr.l #3,d0
    1db2:	       move.l d0,d1
    1db4:	       move.l 1c7b4 <winHeight>,d0
    1dba:	       move.l d0,d0
    1dbc:	       muls.w d0,d1
    1dbe:	       move.w d1,d0
    1dc0:	       add.w d0,d0
    1dc2:	       add.w d0,d0
    1dc4:	       move.w d0,d2
    1dc6:	       add.w d1,d2
    1dc8:	       move.w d2,26(sp)

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    1dcc:	       move.l #14675968,22(sp)

  //Backup Existing Backdrop to save location
  CstBackDropBackup = AllocVec(size, MEMF_ANY);
    1dd4:	       moveq #0,d0
    1dd6:	       move.w 26(sp),d0
    1dda:	       move.l d0,18(sp)
    1dde:	       clr.l 14(sp)
    1de2:	       move.l 1c85c <SysBase>,d0
    1de8:	       movea.l d0,a6
    1dea:	       move.l 18(sp),d0
    1dee:	       move.l 14(sp),d1
    1df2:	       jsr -684(a6)
    1df6:	       move.l d0,10(sp)
    1dfa:	       move.l 10(sp),d0
    1dfe:	       move.l d0,1c782 <CstBackDropBackup>
  if( !CstBackDropBackup)
    1e04:	       move.l 1c782 <CstBackDropBackup>,d0
    1e0a:	   /-- bne.s 1e1a <CstFreeze+0x86>
  {
    KPrintF("CstFreeze: Cannot allocate Memory for CstBackDropBackup");
    1e0c:	   |   pea 17de1 <PutChar+0x197>
    1e12:	   |   jsr 17176 <KPrintF>
    1e18:	   |   addq.l #4,sp
  }

#ifdef EMULATOR
  debug_register_bitmap(CstBackDropBackup, "BackDropBackup", winWidth, winHeight, 5, 0);
    1e1a:	   \-> move.l 1c7b4 <winHeight>,d0
    1e20:	       move.l d0,d0
    1e22:	       movea.w d0,a1
    1e24:	       move.l 1c7b0 <winWidth>,d0
    1e2a:	       move.l d0,d0
    1e2c:	       movea.w d0,a0
    1e2e:	       move.l 1c782 <CstBackDropBackup>,d0
    1e34:	       clr.l -(sp)
    1e36:	       pea 5 <_start+0x5>
    1e3a:	       move.l a1,-(sp)
    1e3c:	       move.l a0,-(sp)
    1e3e:	       pea 17e19 <PutChar+0x1cf>
    1e44:	       move.l d0,-(sp)
    1e46:	       jsr 1725e <debug_register_bitmap>
    1e4c:	       lea 24(sp),sp
#endif  

  ULONG *src = (ULONG *) CstBackDrop;
    1e50:	       move.l 1c77e <CstBackDrop>,40(sp)
  ULONG *dst = (ULONG *) CstBackDropBackup;
    1e58:	       move.l 1c782 <CstBackDropBackup>,36(sp)
  for(int i=0;i<size/4;i++) 
    1e60:	       clr.l 32(sp)
    1e64:	   /-- bra.s 1e8a <CstFreeze+0xf6>
  {
    *dst++ = *src++;
    1e66:	/--|-> move.l 40(sp),d1
    1e6a:	|  |   move.l d1,d0
    1e6c:	|  |   addq.l #4,d0
    1e6e:	|  |   move.l d0,40(sp)
    1e72:	|  |   move.l 36(sp),d0
    1e76:	|  |   move.l d0,d2
    1e78:	|  |   addq.l #4,d2
    1e7a:	|  |   move.l d2,36(sp)
    1e7e:	|  |   movea.l d1,a0
    1e80:	|  |   move.l (a0),d1
    1e82:	|  |   movea.l d0,a0
    1e84:	|  |   move.l d1,(a0)
  for(int i=0;i<size/4;i++) 
    1e86:	|  |   addq.l #1,32(sp)
    1e8a:	|  \-> move.w 26(sp),d0
    1e8e:	|      lsr.w #2,d0
    1e90:	|      move.w d0,d0
    1e92:	|      andi.l #65535,d0
    1e98:	|      cmp.l 32(sp),d0
    1e9c:	\----- bgt.s 1e66 <CstFreeze+0xd2>
  }

  //Replace existing Backdrop with ViewBuffer
  src = (ULONG *) CstViewBuffer;
    1e9e:	       move.l 1c78c <CstViewBuffer>,40(sp)
  dst = (ULONG *) CstBackDrop;
    1ea6:	       move.l 1c77e <CstBackDrop>,36(sp)

  for(int i=0;i<size/4;i++) 
    1eae:	       clr.l 28(sp)
    1eb2:	   /-- bra.s 1ed8 <CstFreeze+0x144>
  {
    *dst++ = *src++;
    1eb4:	/--|-> move.l 40(sp),d1
    1eb8:	|  |   move.l d1,d0
    1eba:	|  |   addq.l #4,d0
    1ebc:	|  |   move.l d0,40(sp)
    1ec0:	|  |   move.l 36(sp),d0
    1ec4:	|  |   move.l d0,d2
    1ec6:	|  |   addq.l #4,d2
    1ec8:	|  |   move.l d2,36(sp)
    1ecc:	|  |   movea.l d1,a0
    1ece:	|  |   move.l (a0),d1
    1ed0:	|  |   movea.l d0,a0
    1ed2:	|  |   move.l d1,(a0)
  for(int i=0;i<size/4;i++) 
    1ed4:	|  |   addq.l #1,28(sp)
    1ed8:	|  \-> move.w 26(sp),d0
    1edc:	|      lsr.w #2,d0
    1ede:	|      move.w d0,d0
    1ee0:	|      andi.l #65535,d0
    1ee6:	|      cmp.l 28(sp),d0
    1eea:	\----- bgt.s 1eb4 <CstFreeze+0x120>
  }

  CstApplyBackDropCounter = 2;
    1eec:	       move.w #2,1c78a <CstApplyBackDropCounter>

  *CstBackDropBufferApplyCursor++ = winWidth/16;
    1ef4:	       move.l 1c7b0 <winWidth>,d0
    1efa:	       lsr.l #4,d0
    1efc:	       movea.l 1c7a0 <CstBackDropBufferApplyCursor>,a0
    1f02:	       move.l a0,d1
    1f04:	       addq.l #2,d1
    1f06:	       move.l d1,1c7a0 <CstBackDropBufferApplyCursor>
    1f0c:	       move.l d0,d0
    1f0e:	       move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = winHeight;
    1f10:	       move.l 1c7b4 <winHeight>,d0
    1f16:	       movea.l 1c7a0 <CstBackDropBufferApplyCursor>,a0
    1f1c:	       move.l a0,d1
    1f1e:	       addq.l #2,d1
    1f20:	       move.l d1,1c7a0 <CstBackDropBufferApplyCursor>
    1f26:	       move.l d0,d0
    1f28:	       move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = 0;
    1f2a:	       movea.l 1c7a0 <CstBackDropBufferApplyCursor>,a0
    1f30:	       move.l a0,d0
    1f32:	       addq.l #2,d0
    1f34:	       move.l d0,1c7a0 <CstBackDropBufferApplyCursor>
    1f3a:	       clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    1f3c:	       movea.l 1c7a0 <CstBackDropBufferApplyCursor>,a0
    1f42:	       move.l a0,d0
    1f44:	       addq.l #2,d0
    1f46:	       move.l d0,1c7a0 <CstBackDropBufferApplyCursor>
    1f4c:	       clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    1f4e:	       movea.l 1c7a0 <CstBackDropBufferApplyCursor>,a0
    1f54:	       move.l a0,d0
    1f56:	       addq.l #2,d0
    1f58:	       move.l d0,1c7a0 <CstBackDropBufferApplyCursor>
    1f5e:	       clr.w (a0)

  KPrintF("CstFreeze: Finished");
    1f60:	       pea 17e28 <PutChar+0x1de>
    1f66:	       jsr 17176 <KPrintF>
    1f6c:	       addq.l #4,sp

}  
    1f6e:	       nop
    1f70:	       move.l (sp)+,d2
    1f72:	       movea.l (sp)+,a6
    1f74:	       lea 36(sp),sp
    1f78:	       rts

00001f7a <CstLoadBackdrop>:

void CstLoadBackdrop( BPTR fp, int x, int y) {
    1f7a:	             lea -144(sp),sp
    1f7e:	             movem.l d2-d4/a6,-(sp)

	KPrintF("CstLoadBackDrop: Loading of Background started");
    1f82:	             pea 17e3c <PutChar+0x1f2>
    1f88:	             jsr 17176 <KPrintF>
    1f8e:	             addq.l #4,sp

  UWORD width = get2bytes(fp);
    1f90:	             move.l 164(sp),-(sp)
    1f94:	             jsr 6bc <get2bytes>
    1f9a:	             addq.l #4,sp
    1f9c:	             move.w d0,134(sp)
  UWORD height = get2bytes(fp);  
    1fa0:	             move.l 164(sp),-(sp)
    1fa4:	             jsr 6bc <get2bytes>
    1faa:	             addq.l #4,sp
    1fac:	             move.w d0,132(sp)

  UWORD widthbyteslayer = width/8;
    1fb0:	             move.w 134(sp),d0
    1fb4:	             lsr.w #3,d0
    1fb6:	             move.w d0,130(sp)
  UWORD widthwordslayer = widthbyteslayer/2;  
    1fba:	             move.w 130(sp),d0
    1fbe:	             lsr.w #1,d0
    1fc0:	             move.w d0,128(sp)
  UWORD widthbytesbackdrop = winWidth / 8;
    1fc4:	             move.l 1c7b0 <winWidth>,d0
    1fca:	             lsr.l #3,d0
    1fcc:	             move.w d0,126(sp)
  UWORD sizeplane =  widthbyteslayer*height;
    1fd0:	             move.w 130(sp),d0
    1fd4:	             muls.w 132(sp),d0
    1fd8:	             move.w d0,124(sp)
  UWORD size = sizeplane * 5; //Todo other number of bitplanes
    1fdc:	             move.w 124(sp),d1
    1fe0:	             move.w d1,d0
    1fe2:	             add.w d0,d0
    1fe4:	             add.w d0,d0
    1fe6:	             move.w d0,d2
    1fe8:	             add.w d1,d2
    1fea:	             move.w d2,122(sp)

  //Load Palette to Copper
  if( CstPaletteLoaded == 0)
    1fee:	             move.w 1c778 <CstPaletteLoaded>,d0
    1ff4:	/----------- bne.w 208e <CstLoadBackdrop+0x114>
  {    
    UWORD reg = 0x180;
    1ff8:	|            move.w #384,120(sp)

    if(CstPalette) {
    1ffe:	|            move.l 1c7a8 <CstPalette>,d0
    2004:	|        /-- beq.s 201e <CstLoadBackdrop+0xa4>
      FreeVec(CstPalette);
    2006:	|        |   move.l 1c7a8 <CstPalette>,116(sp)
    200e:	|        |   move.l 1c85c <SysBase>,d0
    2014:	|        |   movea.l d0,a6
    2016:	|        |   movea.l 116(sp),a1
    201a:	|        |   jsr -690(a6)
    }

    CstPalette = AllocVec(32*2,MEMF_ANY); //ToDo other number of bitplanes
    201e:	|        \-> moveq #64,d0
    2020:	|            move.l d0,112(sp)
    2024:	|            clr.l 108(sp)
    2028:	|            move.l 1c85c <SysBase>,d0
    202e:	|            movea.l d0,a6
    2030:	|            move.l 112(sp),d0
    2034:	|            move.l 108(sp),d1
    2038:	|            jsr -684(a6)
    203c:	|            move.l d0,104(sp)
    2040:	|            move.l 104(sp),d0
    2044:	|            move.l d0,1c7a8 <CstPalette>
    CstPaletteLoaded = 1;
    204a:	|            move.w #1,1c778 <CstPaletteLoaded>
    UWORD *tmp = CstPalette;
    2052:	|            move.l 1c7a8 <CstPalette>,156(sp)
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    205a:	|            clr.l 152(sp)
    205e:	|        /-- bra.s 2084 <CstLoadBackdrop+0x10a>
      *tmp++ = get2bytes(fp);
    2060:	|     /--|-> move.l 164(sp),-(sp)
    2064:	|     |  |   jsr 6bc <get2bytes>
    206a:	|     |  |   addq.l #4,sp
    206c:	|     |  |   move.l d0,d1
    206e:	|     |  |   move.l 156(sp),d0
    2072:	|     |  |   move.l d0,d2
    2074:	|     |  |   addq.l #2,d2
    2076:	|     |  |   move.l d2,156(sp)
    207a:	|     |  |   move.l d1,d1
    207c:	|     |  |   movea.l d0,a0
    207e:	|     |  |   move.w d1,(a0)
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    2080:	|     |  |   addq.l #1,152(sp)
    2084:	|     |  \-> moveq #31,d0
    2086:	|     |      cmp.l 152(sp),d0
    208a:	|     \----- bge.s 2060 <CstLoadBackdrop+0xe6>
    208c:	|  /-------- bra.s 20ac <CstLoadBackdrop+0x132>
    }
  }
  else
  //There's already a palette loaded for this background. Do not load palette
  {
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    208e:	\--|-------> clr.l 148(sp)
    2092:	   |     /-- bra.s 20a4 <CstLoadBackdrop+0x12a>
      get2bytes(fp);
    2094:	   |  /--|-> move.l 164(sp),-(sp)
    2098:	   |  |  |   jsr 6bc <get2bytes>
    209e:	   |  |  |   addq.l #4,sp
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    20a0:	   |  |  |   addq.l #1,148(sp)
    20a4:	   |  |  \-> moveq #31,d2
    20a6:	   |  |      cmp.l 148(sp),d2
    20aa:	   |  \----- bge.s 2094 <CstLoadBackdrop+0x11a>
    }
  }

  //Load Picture From Disk
  UWORD *tmpbuffer = AllocVec(size, MEMF_CHIP); //Todo other number of bitplanes
    20ac:	   \-------> moveq #0,d0
    20ae:	             move.w 122(sp),d0
    20b2:	             move.l d0,100(sp)
    20b6:	             moveq #2,d0
    20b8:	             move.l d0,96(sp)
    20bc:	             move.l 1c85c <SysBase>,d0
    20c2:	             movea.l d0,a6
    20c4:	             move.l 100(sp),d0
    20c8:	             move.l 96(sp),d1
    20cc:	             jsr -684(a6)
    20d0:	             move.l d0,92(sp)
    20d4:	             move.l 92(sp),d0
    20d8:	             move.l d0,88(sp)
  if( !tmpbuffer)
    20dc:	         /-- bne.s 20ec <CstLoadBackdrop+0x172>
  {
    KPrintF("CstLoadBackDrop: Cannot allocate Memory for tmpbuffer");
    20de:	         |   pea 17e6b <PutChar+0x221>
    20e4:	         |   jsr 17176 <KPrintF>
    20ea:	         |   addq.l #4,sp
  }
  UWORD *tmpmask = AllocVec(sizeplane, MEMF_CHIP);
    20ec:	         \-> moveq #0,d0
    20ee:	             move.w 124(sp),d0
    20f2:	             move.l d0,84(sp)
    20f6:	             moveq #2,d2
    20f8:	             move.l d2,80(sp)
    20fc:	             move.l 1c85c <SysBase>,d0
    2102:	             movea.l d0,a6
    2104:	             move.l 84(sp),d0
    2108:	             move.l 80(sp),d1
    210c:	             jsr -684(a6)
    2110:	             move.l d0,76(sp)
    2114:	             move.l 76(sp),d0
    2118:	             move.l d0,72(sp)
  if( !tmpmask)
    211c:	         /-- bne.s 212c <CstLoadBackdrop+0x1b2>
  {
    KPrintF("CstLoadBackDrop: Cannot allocate Memory for tmpmask");
    211e:	         |   pea 17ea1 <PutChar+0x257>
    2124:	         |   jsr 17176 <KPrintF>
    212a:	         |   addq.l #4,sp
  }

#ifdef EMULATOR
  debug_register_bitmap(tmpbuffer, "tmpbuffer.bpl", width, height, 5, 0);
    212c:	         \-> move.w 132(sp),d0
    2130:	             movea.w d0,a1
    2132:	             move.w 134(sp),d0
    2136:	             movea.w d0,a0
    2138:	             clr.l -(sp)
    213a:	             pea 5 <_start+0x5>
    213e:	             move.l a1,-(sp)
    2140:	             move.l a0,-(sp)
    2142:	             pea 17ed5 <PutChar+0x28b>
    2148:	             move.l 108(sp),-(sp)
    214c:	             jsr 1725e <debug_register_bitmap>
    2152:	             lea 24(sp),sp
  debug_register_bitmap(tmpbuffer, "tmpmask.bpl", width, height, 1, 0);
    2156:	             move.w 132(sp),d0
    215a:	             movea.w d0,a1
    215c:	             move.w 134(sp),d0
    2160:	             movea.w d0,a0
    2162:	             clr.l -(sp)
    2164:	             pea 1 <_start+0x1>
    2168:	             move.l a1,-(sp)
    216a:	             move.l a0,-(sp)
    216c:	             pea 17ee3 <PutChar+0x299>
    2172:	             move.l 108(sp),-(sp)
    2176:	             jsr 1725e <debug_register_bitmap>
    217c:	             lea 24(sp),sp
#endif  

  UWORD count = FRead( fp, tmpbuffer, 2, size/2);
    2180:	             move.l 164(sp),68(sp)
    2186:	             move.l 88(sp),64(sp)
    218c:	             moveq #2,d0
    218e:	             move.l d0,60(sp)
    2192:	             move.w 122(sp),d0
    2196:	             lsr.w #1,d0
    2198:	             move.w d0,d0
    219a:	             andi.l #65535,d0
    21a0:	             move.l d0,56(sp)
    21a4:	             move.l 1c864 <DOSBase>,d0
    21aa:	             movea.l d0,a6
    21ac:	             move.l 68(sp),d1
    21b0:	             move.l 64(sp),d2
    21b4:	             move.l 60(sp),d3
    21b8:	             move.l 56(sp),d4
    21bc:	             jsr -324(a6)
    21c0:	             move.l d0,52(sp)
    21c4:	             move.l 52(sp),d0
    21c8:	             move.w d0,50(sp)
  if(!count) {
    21cc:	         /-- bne.s 21e0 <CstLoadBackdrop+0x266>
    KPrintF("Error while reading stream");
    21ce:	         |   pea 17eef <PutChar+0x2a5>
    21d4:	         |   jsr 17176 <KPrintF>
    21da:	         |   addq.l #4,sp
    return;
    21dc:	   /-----|-- bra.w 242c <CstLoadBackdrop+0x4b2>
  }  
  count = FRead( fp, tmpmask, 2, sizeplane/2);
    21e0:	   |     \-> move.l 164(sp),46(sp)
    21e6:	   |         move.l 72(sp),42(sp)
    21ec:	   |         moveq #2,d2
    21ee:	   |         move.l d2,38(sp)
    21f2:	   |         move.w 124(sp),d0
    21f6:	   |         lsr.w #1,d0
    21f8:	   |         move.w d0,d0
    21fa:	   |         andi.l #65535,d0
    2200:	   |         move.l d0,34(sp)
    2204:	   |         move.l 1c864 <DOSBase>,d0
    220a:	   |         movea.l d0,a6
    220c:	   |         move.l 46(sp),d1
    2210:	   |         move.l 42(sp),d2
    2214:	   |         move.l 38(sp),d3
    2218:	   |         move.l 34(sp),d4
    221c:	   |         jsr -324(a6)
    2220:	   |         move.l d0,30(sp)
    2224:	   |         move.l 30(sp),d0
    2228:	   |         move.w d0,50(sp)
   

  if(!count) {
    222c:	   |     /-- bne.s 2240 <CstLoadBackdrop+0x2c6>
    KPrintF("Error while reading stream");
    222e:	   |     |   pea 17eef <PutChar+0x2a5>
    2234:	   |     |   jsr 17176 <KPrintF>
    223a:	   |     |   addq.l #4,sp
    return;
    223c:	   +-----|-- bra.w 242c <CstLoadBackdrop+0x4b2>
  }

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    2240:	   |     \-> move.l #14675968,26(sp)

  ULONG backdropcursor = (ULONG) CstBackDrop; 
    2248:	   |         move.l 1c77e <CstBackDrop>,d0
    224e:	   |         move.l d0,144(sp)
  UWORD offset = widthbytesbackdrop*y + x / 8;
    2252:	   |         move.l 172(sp),d0
    2256:	   |         move.w d0,d1
    2258:	   |         muls.w 126(sp),d1
    225c:	   |         move.l 168(sp),d0
    2260:	   |     /-- bpl.s 2264 <CstLoadBackdrop+0x2ea>
    2262:	   |     |   addq.l #7,d0
    2264:	   |     \-> asr.l #3,d0
    2266:	   |         move.l d0,d0
    2268:	   |         movea.w d1,a0
    226a:	   |         adda.w d0,a0
    226c:	   |         move.w a0,24(sp)
  backdropcursor += offset; 
    2270:	   |         moveq #0,d0
    2272:	   |         move.w 24(sp),d0
    2276:	   |         add.l d0,144(sp)

 	KPrintF("CstLoadBackDrop: Starting Blit");
    227a:	   |         pea 17f0a <PutChar+0x2c0>
    2280:	   |         jsr 17176 <KPrintF>
    2286:	   |         addq.l #4,sp


  WaitBlit();
    2288:	   |         move.l 1c868 <GfxBase>,d0
    228e:	   |         movea.l d0,a6
    2290:	   |         jsr -228(a6)

  custom->bltafwm = 0xffff;
    2294:	   |         movea.l 26(sp),a0
    2298:	   |         move.w #-1,68(a0)
  custom->bltalwm = 0xffff;
    229e:	   |         movea.l 26(sp),a0
    22a2:	   |         move.w #-1,70(a0)
  custom->bltamod = 0;
    22a8:	   |         movea.l 26(sp),a0
    22ac:	   |         move.w #0,100(a0)
  custom->bltbmod = 0;
    22b2:	   |         movea.l 26(sp),a0
    22b6:	   |         move.w #0,98(a0)
  custom->bltcmod = widthbytesbackdrop - widthbyteslayer;
    22bc:	   |         move.w 126(sp),d0
    22c0:	   |         sub.w 130(sp),d0
    22c4:	   |         movea.l 26(sp),a0
    22c8:	   |         move.w d0,96(a0)
  custom->bltdmod = widthbytesbackdrop - widthbyteslayer;
    22cc:	   |         move.w 126(sp),d0
    22d0:	   |         sub.w 130(sp),d0
    22d4:	   |         movea.l 26(sp),a0
    22d8:	   |         move.w d0,102(a0)
  custom->bltcon0 = 0xfca;
    22dc:	   |         movea.l 26(sp),a0
    22e0:	   |         move.w #4042,64(a0)
  custom->bltcon1 = 0;
    22e6:	   |         movea.l 26(sp),a0
    22ea:	   |         move.w #0,66(a0)
  
  ULONG tmpbuffercursor = (ULONG) tmpbuffer;
    22f0:	   |         move.l 88(sp),140(sp)
  for(int i=0;i<5;i++) //Todo other number of bitplanes
    22f6:	   |         clr.l 136(sp)
    22fa:	   |     /-- bra.s 235c <CstLoadBackdrop+0x3e2>
  {    
    custom->bltapt = (APTR) tmpmask;
    22fc:	   |  /--|-> movea.l 26(sp),a0
    2300:	   |  |  |   move.l 72(sp),80(a0)
    custom->bltbpt = (APTR) tmpbuffercursor;
    2306:	   |  |  |   move.l 140(sp),d0
    230a:	   |  |  |   movea.l 26(sp),a0
    230e:	   |  |  |   move.l d0,76(a0)
    custom->bltcpt = (APTR)backdropcursor;
    2312:	   |  |  |   move.l 144(sp),d0
    2316:	   |  |  |   movea.l 26(sp),a0
    231a:	   |  |  |   move.l d0,72(a0)
    custom->bltdpt = (APTR) backdropcursor;
    231e:	   |  |  |   move.l 144(sp),d0
    2322:	   |  |  |   movea.l 26(sp),a0
    2326:	   |  |  |   move.l d0,84(a0)
    custom->bltsize = (height<<6)+widthwordslayer;
    232a:	   |  |  |   move.w 132(sp),d0
    232e:	   |  |  |   lsl.w #6,d0
    2330:	   |  |  |   add.w 128(sp),d0
    2334:	   |  |  |   movea.l 26(sp),a0
    2338:	   |  |  |   move.w d0,88(a0)
    tmpbuffercursor += sizeplane;
    233c:	   |  |  |   moveq #0,d0
    233e:	   |  |  |   move.w 124(sp),d0
    2342:	   |  |  |   add.l d0,140(sp)
    backdropcursor += CstBackdropSizePlane;
    2346:	   |  |  |   move.w 1c77c <CstBackdropSizePlane>,d0
    234c:	   |  |  |   move.w d0,d0
    234e:	   |  |  |   andi.l #65535,d0
    2354:	   |  |  |   add.l d0,144(sp)
  for(int i=0;i<5;i++) //Todo other number of bitplanes
    2358:	   |  |  |   addq.l #1,136(sp)
    235c:	   |  |  \-> moveq #4,d0
    235e:	   |  |      cmp.l 136(sp),d0
    2362:	   |  \----- bge.s 22fc <CstLoadBackdrop+0x382>
  }    

  WaitBlit();
    2364:	   |         move.l 1c868 <GfxBase>,d0
    236a:	   |         movea.l d0,a6
    236c:	   |         jsr -228(a6)

 	KPrintF("CstLoadBackDrop: Freeing Memory");
    2370:	   |         pea 17f29 <PutChar+0x2df>
    2376:	   |         jsr 17176 <KPrintF>
    237c:	   |         addq.l #4,sp


  FreeVec(tmpbuffer);
    237e:	   |         move.l 88(sp),20(sp)
    2384:	   |         move.l 1c85c <SysBase>,d0
    238a:	   |         movea.l d0,a6
    238c:	   |         movea.l 20(sp),a1
    2390:	   |         jsr -690(a6)
  FreeVec(tmpmask);
    2394:	   |         move.l 72(sp),16(sp)
    239a:	   |         move.l 1c85c <SysBase>,d0
    23a0:	   |         movea.l d0,a6
    23a2:	   |         movea.l 16(sp),a1
    23a6:	   |         jsr -690(a6)

  CstApplyBackDropCounter = 2;
    23aa:	   |         move.w #2,1c78a <CstApplyBackDropCounter>

  *CstBackDropBufferApplyCursor++ = winWidth/16;
    23b2:	   |         move.l 1c7b0 <winWidth>,d0
    23b8:	   |         lsr.l #4,d0
    23ba:	   |         movea.l 1c7a0 <CstBackDropBufferApplyCursor>,a0
    23c0:	   |         move.l a0,d1
    23c2:	   |         addq.l #2,d1
    23c4:	   |         move.l d1,1c7a0 <CstBackDropBufferApplyCursor>
    23ca:	   |         move.l d0,d0
    23cc:	   |         move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = winHeight;
    23ce:	   |         move.l 1c7b4 <winHeight>,d0
    23d4:	   |         movea.l 1c7a0 <CstBackDropBufferApplyCursor>,a0
    23da:	   |         move.l a0,d1
    23dc:	   |         addq.l #2,d1
    23de:	   |         move.l d1,1c7a0 <CstBackDropBufferApplyCursor>
    23e4:	   |         move.l d0,d0
    23e6:	   |         move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = 0;
    23e8:	   |         movea.l 1c7a0 <CstBackDropBufferApplyCursor>,a0
    23ee:	   |         move.l a0,d0
    23f0:	   |         addq.l #2,d0
    23f2:	   |         move.l d0,1c7a0 <CstBackDropBufferApplyCursor>
    23f8:	   |         clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    23fa:	   |         movea.l 1c7a0 <CstBackDropBufferApplyCursor>,a0
    2400:	   |         move.l a0,d0
    2402:	   |         addq.l #2,d0
    2404:	   |         move.l d0,1c7a0 <CstBackDropBufferApplyCursor>
    240a:	   |         clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    240c:	   |         movea.l 1c7a0 <CstBackDropBufferApplyCursor>,a0
    2412:	   |         move.l a0,d0
    2414:	   |         addq.l #2,d0
    2416:	   |         move.l d0,1c7a0 <CstBackDropBufferApplyCursor>
    241c:	   |         clr.w (a0)

  KPrintF("CstLoadBackDrop: Finished");
    241e:	   |         pea 17f49 <PutChar+0x2ff>
    2424:	   |         jsr 17176 <KPrintF>
    242a:	   |         addq.l #4,sp

}
    242c:	   \-------> movem.l (sp)+,d2-d4/a6
    2430:	             lea 144(sp),sp
    2434:	             rts

00002436 <CstPasteChar>:

ULONG test = 0;

void CstPasteChar( struct sprite *single, WORD x, WORD y)
{  
    2436:	                lea -72(sp),sp
    243a:	                move.l a6,-(sp)
    243c:	                move.l d2,-(sp)
    243e:	                move.l 88(sp),d1
    2442:	                move.l 92(sp),d0
    2446:	                move.w d1,d1
    2448:	                move.w d1,10(sp)
    244c:	                move.w d0,d0
    244e:	                move.w d0,8(sp)
  UWORD *destination = 0;
    2452:	                clr.l 28(sp)
  CstApplyBackDropCounter = 2;
    2456:	                move.w #2,1c78a <CstApplyBackDropCounter>
  destination = (UWORD *) CstBackDrop;      
    245e:	                move.l 1c77e <CstBackDrop>,28(sp)
  ULONG ystartdst;
  ULONG ystartsrc; 
  ULONG blitheight;
  ULONG blitwidth;

  bltcon0 = 0;
    2466:	                clr.l 56(sp)

  blitwidth = single->width/16;
    246a:	                movea.l 84(sp),a0
    246e:	                move.l (a0),d0
    2470:	                movea.l d0,a0
    2472:	                cmpa.w #0,a0
    2476:	            /-- bge.s 247c <CstPasteChar+0x46>
    2478:	            |   lea 15(a0),a0
    247c:	            \-> move.l a0,d0
    247e:	                asr.l #4,d0
    2480:	                move.l d0,40(sp)
  if(blitwidth == 0) blitwidth = 1;
    2484:	            /-- bne.s 248c <CstPasteChar+0x56>
    2486:	            |   moveq #1,d0
    2488:	            |   move.l d0,40(sp)

  if( y < 0) {
    248c:	            \-> tst.w 8(sp)
    2490:	         /----- bge.s 24d8 <CstPasteChar+0xa2>
    if(y + single->height < 0) {
    2492:	         |      movea.w 8(sp),a1
    2496:	         |      movea.l 84(sp),a0
    249a:	         |      move.l 4(a0),d0
    249e:	         |      add.l a1,d0
    24a0:	         |  /-- bpl.s 24b4 <CstPasteChar+0x7e>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    24a2:	         |  |   pea 17f63 <PutChar+0x319>
    24a8:	         |  |   jsr 17176 <KPrintF>
    24ae:	         |  |   addq.l #4,sp
      return;
    24b0:	/--------|--|-- bra.w 2b74 <CstPasteChar+0x73e>
    }
    ystartdst = 0;
    24b4:	|        |  \-> clr.l 52(sp)
    ystartsrc = y*-1;
    24b8:	|        |      move.w 8(sp),d0
    24bc:	|        |      ext.l d0
    24be:	|        |      neg.l d0
    24c0:	|        |      move.l d0,48(sp)
    blitheight = single->height+y;
    24c4:	|        |      movea.l 84(sp),a0
    24c8:	|        |      move.l 4(a0),d0
    24cc:	|        |      movea.w 8(sp),a0
    24d0:	|        |      add.l a0,d0
    24d2:	|        |      move.l d0,44(sp)
    24d6:	|     /--|----- bra.s 254a <CstPasteChar+0x114>
  } else if(y+single->height > (int) winHeight) {
    24d8:	|     |  \----> movea.w 8(sp),a1
    24dc:	|     |         movea.l 84(sp),a0
    24e0:	|     |         move.l 4(a0),d0
    24e4:	|     |         move.l a1,d1
    24e6:	|     |         add.l d0,d1
    24e8:	|     |         move.l 1c7b4 <winHeight>,d0
    24ee:	|     |         cmp.l d1,d0
    24f0:	|     |  /----- bge.s 2532 <CstPasteChar+0xfc>
    if(y  > (int) winHeight) {
    24f2:	|     |  |      movea.w 8(sp),a0
    24f6:	|     |  |      move.l 1c7b4 <winHeight>,d0
    24fc:	|     |  |      cmp.l a0,d0
    24fe:	|     |  |  /-- bge.s 2512 <CstPasteChar+0xdc>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    2500:	|     |  |  |   pea 17f63 <PutChar+0x319>
    2506:	|     |  |  |   jsr 17176 <KPrintF>
    250c:	|     |  |  |   addq.l #4,sp
      return;
    250e:	+-----|--|--|-- bra.w 2b74 <CstPasteChar+0x73e>
    }
    ystartdst = y;
    2512:	|     |  |  \-> movea.w 8(sp),a0
    2516:	|     |  |      move.l a0,52(sp)
    ystartsrc = 0;
    251a:	|     |  |      clr.l 48(sp)
    blitheight = winHeight-y;
    251e:	|     |  |      move.l 1c7b4 <winHeight>,d0
    2524:	|     |  |      movea.w 8(sp),a0
    2528:	|     |  |      move.l d0,d1
    252a:	|     |  |      sub.l a0,d1
    252c:	|     |  |      move.l d1,44(sp)
    2530:	|     +--|----- bra.s 254a <CstPasteChar+0x114>
  } else {
    ystartdst = y;
    2532:	|     |  \----> movea.w 8(sp),a0
    2536:	|     |         move.l a0,52(sp)
    ystartsrc = 0;
    253a:	|     |         clr.l 48(sp)
    blitheight = single->height;
    253e:	|     |         movea.l 84(sp),a0
    2542:	|     |         move.l 4(a0),d0
    2546:	|     |         move.l d0,44(sp)
  }


  if( x < 0) { //Leftmost part outside screen
    254a:	|     \-------> tst.w 10(sp)
    254e:	|        /----- bge.w 26c0 <CstPasteChar+0x28a>
    if(x + single->width < 0) {
    2552:	|        |      movea.w 10(sp),a1
    2556:	|        |      movea.l 84(sp),a0
    255a:	|        |      move.l (a0),d0
    255c:	|        |      add.l a1,d0
    255e:	|        |  /-- bpl.s 2572 <CstPasteChar+0x13c>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    2560:	|        |  |   pea 17f63 <PutChar+0x319>
    2566:	|        |  |   jsr 17176 <KPrintF>
    256c:	|        |  |   addq.l #4,sp
      return;
    256e:	+--------|--|-- bra.w 2b74 <CstPasteChar+0x73e>

    }
    
    extrawords = 1;
    2572:	|        |  \-> move.w #1,78(sp)

    cutwordssource = (x*-1)/16; 
    2578:	|        |      move.w 10(sp),d0
    257c:	|        |  /-- bpl.s 2582 <CstPasteChar+0x14c>
    257e:	|        |  |   addi.w #15,d0
    2582:	|        |  \-> asr.w #4,d0
    2584:	|        |      neg.w d0
    2586:	|        |      move.w d0,76(sp)
    cutmaskpixel = (x*-1)%16;     
    258a:	|        |      move.w 10(sp),d0
    258e:	|        |      ext.l d0
    2590:	|        |      neg.l d0
    2592:	|        |      andi.l #-2147483633,d0
    2598:	|        |  /-- bpl.s 25a2 <CstPasteChar+0x16c>
    259a:	|        |  |   subq.l #1,d0
    259c:	|        |  |   moveq #-16,d1
    259e:	|        |  |   or.l d1,d0
    25a0:	|        |  |   addq.l #1,d0
    25a2:	|        |  \-> move.w d0,74(sp)
    bltalwm = 0; //Last Word of this channel almost masked out
    25a6:	|        |      clr.w 72(sp)
    bltapt = ((ULONG) single->data)+cutwordssource*2+ystartsrc*single->width/8;
    25aa:	|        |      movea.l 84(sp),a0
    25ae:	|        |      move.l 24(a0),d0
    25b2:	|        |      move.l d0,d1
    25b4:	|        |      moveq #0,d0
    25b6:	|        |      move.w 76(sp),d0
    25ba:	|        |      add.l d0,d0
    25bc:	|        |      move.l d1,d2
    25be:	|        |      add.l d0,d2
    25c0:	|        |      movea.l 84(sp),a0
    25c4:	|        |      move.l (a0),d0
    25c6:	|        |      move.l 48(sp),-(sp)
    25ca:	|        |      move.l d0,-(sp)
    25cc:	|        |      jsr 17b34 <__mulsi3>
    25d2:	|        |      addq.l #8,sp
    25d4:	|        |      lsr.l #3,d0
    25d6:	|        |      move.l d2,d1
    25d8:	|        |      add.l d0,d1
    25da:	|        |      move.l d1,68(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    25de:	|        |      move.l 1c7b0 <winWidth>,d0
    25e4:	|        |      move.l 52(sp),-(sp)
    25e8:	|        |      move.l d0,-(sp)
    25ea:	|        |      jsr 17b34 <__mulsi3>
    25f0:	|        |      addq.l #8,sp
    25f2:	|        |      lsr.l #3,d0
    25f4:	|        |      move.l 28(sp),d1
    25f8:	|        |      add.l d1,d0
    25fa:	|        |      move.l d0,d2
    25fc:	|        |      subq.l #2,d2
    25fe:	|        |      move.l d2,64(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    2602:	|        |      move.l 1c7b0 <winWidth>,d0
    2608:	|        |      move.l 52(sp),-(sp)
    260c:	|        |      move.l d0,-(sp)
    260e:	|        |      jsr 17b34 <__mulsi3>
    2614:	|        |      addq.l #8,sp
    2616:	|        |      lsr.l #3,d0
    2618:	|        |      move.l 28(sp),d1
    261c:	|        |      add.l d1,d0
    261e:	|        |      move.l d0,d1
    2620:	|        |      subq.l #2,d1
    2622:	|        |      move.l d1,60(sp)
    bltcon0 = ((16-cutmaskpixel) << 12);
    2626:	|        |      moveq #0,d0
    2628:	|        |      move.w 74(sp),d0
    262c:	|        |      moveq #16,d1
    262e:	|        |      sub.l d0,d1
    2630:	|        |      move.l d1,d0
    2632:	|        |      moveq #12,d2
    2634:	|        |      lsl.l d2,d0
    2636:	|        |      move.l d0,56(sp)

    *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    263a:	|        |      movea.l 84(sp),a0
    263e:	|        |      move.l (a0),d0
    2640:	|        |      movea.l d0,a0
    2642:	|        |      cmpa.w #0,a0
    2646:	|        |  /-- bge.s 264c <CstPasteChar+0x216>
    2648:	|        |  |   lea 15(a0),a0
    264c:	|        |  \-> move.l a0,d0
    264e:	|        |      asr.l #4,d0
    2650:	|        |      move.l d0,d0
    2652:	|        |      add.w 76(sp),d0
    2656:	|        |      movea.l 1c7a0 <CstBackDropBufferApplyCursor>,a0
    265c:	|        |      move.l a0,d1
    265e:	|        |      addq.l #2,d1
    2660:	|        |      move.l d1,1c7a0 <CstBackDropBufferApplyCursor>
    2666:	|        |      add.w 78(sp),d0
    266a:	|        |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = blitheight;
    266c:	|        |      movea.l 1c7a0 <CstBackDropBufferApplyCursor>,a0
    2672:	|        |      move.l a0,d0
    2674:	|        |      addq.l #2,d0
    2676:	|        |      move.l d0,1c7a0 <CstBackDropBufferApplyCursor>
    267c:	|        |      move.l 44(sp),d0
    2680:	|        |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = 0;
    2682:	|        |      movea.l 1c7a0 <CstBackDropBufferApplyCursor>,a0
    2688:	|        |      move.l a0,d0
    268a:	|        |      addq.l #2,d0
    268c:	|        |      move.l d0,1c7a0 <CstBackDropBufferApplyCursor>
    2692:	|        |      clr.w (a0)
    *CstBackDropBufferApplyCursor++ = ystartdst;
    2694:	|        |      movea.l 1c7a0 <CstBackDropBufferApplyCursor>,a0
    269a:	|        |      move.l a0,d0
    269c:	|        |      addq.l #2,d0
    269e:	|        |      move.l d0,1c7a0 <CstBackDropBufferApplyCursor>
    26a4:	|        |      move.l 52(sp),d0
    26a8:	|        |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = 0;
    26aa:	|        |      movea.l 1c7a0 <CstBackDropBufferApplyCursor>,a0
    26b0:	|        |      move.l a0,d0
    26b2:	|        |      addq.l #2,d0
    26b4:	|        |      move.l d0,1c7a0 <CstBackDropBufferApplyCursor>
    26ba:	|        |      clr.w (a0)
    26bc:	|     /--|----- bra.w 29d4 <CstPasteChar+0x59e>

  } else if(x + single->width > (int) winWidth) { //Rightmost part outside screen   
    26c0:	|     |  \----> movea.w 10(sp),a1
    26c4:	|     |         movea.l 84(sp),a0
    26c8:	|     |         move.l (a0),d0
    26ca:	|     |         move.l a1,d1
    26cc:	|     |         add.l d0,d1
    26ce:	|     |         move.l 1c7b0 <winWidth>,d0
    26d4:	|     |         cmp.l d1,d0
    26d6:	|     |  /----- bge.w 2872 <CstPasteChar+0x43c>

    if(x - single->width > (int) winWidth)
    26da:	|     |  |      movea.w 10(sp),a1
    26de:	|     |  |      movea.l 84(sp),a0
    26e2:	|     |  |      move.l (a0),d0
    26e4:	|     |  |      move.l a1,d1
    26e6:	|     |  |      sub.l d0,d1
    26e8:	|     |  |      move.l 1c7b0 <winWidth>,d0
    26ee:	|     |  |      cmp.l d1,d0
    26f0:	|     |  |  /-- bge.s 2704 <CstPasteChar+0x2ce>
    {    
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    26f2:	|     |  |  |   pea 17f63 <PutChar+0x319>
    26f8:	|     |  |  |   jsr 17176 <KPrintF>
    26fe:	|     |  |  |   addq.l #4,sp
      return;
    2700:	+-----|--|--|-- bra.w 2b74 <CstPasteChar+0x73e>
    }
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    2704:	|     |  |  \-> clr.w 78(sp)
    cutwordssource = (x+single->width - winWidth)/16;
    2708:	|     |  |      movea.w 10(sp),a1
    270c:	|     |  |      movea.l 84(sp),a0
    2710:	|     |  |      move.l (a0),d0
    2712:	|     |  |      add.l a1,d0
    2714:	|     |  |      move.l d0,d1
    2716:	|     |  |      move.l 1c7b0 <winWidth>,d0
    271c:	|     |  |      sub.l d0,d1
    271e:	|     |  |      move.l d1,d0
    2720:	|     |  |      lsr.l #4,d0
    2722:	|     |  |      move.w d0,76(sp)
    cutmaskpixel = 0;
    2726:	|     |  |      clr.w 74(sp)
    bltalwm = 0xffff; //Last word contains source data to be blit
    272a:	|     |  |      move.w #-1,72(sp)
    bltapt = (ULONG) single->data+ystartsrc*single->width/8;
    2730:	|     |  |      movea.l 84(sp),a0
    2734:	|     |  |      move.l 24(a0),d0
    2738:	|     |  |      move.l d0,d2
    273a:	|     |  |      movea.l 84(sp),a0
    273e:	|     |  |      move.l (a0),d0
    2740:	|     |  |      move.l 48(sp),-(sp)
    2744:	|     |  |      move.l d0,-(sp)
    2746:	|     |  |      jsr 17b34 <__mulsi3>
    274c:	|     |  |      addq.l #8,sp
    274e:	|     |  |      lsr.l #3,d0
    2750:	|     |  |      move.l d2,d1
    2752:	|     |  |      add.l d0,d1
    2754:	|     |  |      move.l d1,68(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    2758:	|     |  |      move.l 1c7b0 <winWidth>,d0
    275e:	|     |  |      move.l 52(sp),-(sp)
    2762:	|     |  |      move.l d0,-(sp)
    2764:	|     |  |      jsr 17b34 <__mulsi3>
    276a:	|     |  |      addq.l #8,sp
    276c:	|     |  |      lsr.l #3,d0
    276e:	|     |  |      move.l 28(sp),d1
    2772:	|     |  |      add.l d0,d1
    2774:	|     |  |      move.w 10(sp),d0
    2778:	|     |  |  /-- bpl.s 277e <CstPasteChar+0x348>
    277a:	|     |  |  |   addi.w #15,d0
    277e:	|     |  |  \-> asr.w #4,d0
    2780:	|     |  |      movea.w d0,a0
    2782:	|     |  |      move.l a0,d0
    2784:	|     |  |      add.l a0,d0
    2786:	|     |  |      move.l d1,d2
    2788:	|     |  |      add.l d0,d2
    278a:	|     |  |      move.l d2,64(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    278e:	|     |  |      move.l 1c7b0 <winWidth>,d0
    2794:	|     |  |      move.l 52(sp),-(sp)
    2798:	|     |  |      move.l d0,-(sp)
    279a:	|     |  |      jsr 17b34 <__mulsi3>
    27a0:	|     |  |      addq.l #8,sp
    27a2:	|     |  |      lsr.l #3,d0
    27a4:	|     |  |      move.l 28(sp),d1
    27a8:	|     |  |      add.l d0,d1
    27aa:	|     |  |      move.w 10(sp),d0
    27ae:	|     |  |  /-- bpl.s 27b4 <CstPasteChar+0x37e>
    27b0:	|     |  |  |   addi.w #15,d0
    27b4:	|     |  |  \-> asr.w #4,d0
    27b6:	|     |  |      movea.w d0,a0
    27b8:	|     |  |      move.l a0,d0
    27ba:	|     |  |      add.l a0,d0
    27bc:	|     |  |      move.l d1,d2
    27be:	|     |  |      add.l d0,d2
    27c0:	|     |  |      move.l d2,60(sp)
    bltcon0 = ((single->width%16) << 12);    
    27c4:	|     |  |      movea.l 84(sp),a0
    27c8:	|     |  |      move.l (a0),d0
    27ca:	|     |  |      andi.l #-2147483633,d0
    27d0:	|     |  |  /-- bpl.s 27da <CstPasteChar+0x3a4>
    27d2:	|     |  |  |   subq.l #1,d0
    27d4:	|     |  |  |   moveq #-16,d1
    27d6:	|     |  |  |   or.l d1,d0
    27d8:	|     |  |  |   addq.l #1,d0
    27da:	|     |  |  \-> moveq #12,d2
    27dc:	|     |  |      lsl.l d2,d0
    27de:	|     |  |      move.l d0,56(sp)
    
    *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource;
    27e2:	|     |  |      movea.l 84(sp),a0
    27e6:	|     |  |      move.l (a0),d0
    27e8:	|     |  |      movea.l d0,a0
    27ea:	|     |  |      cmpa.w #0,a0
    27ee:	|     |  |  /-- bge.s 27f4 <CstPasteChar+0x3be>
    27f0:	|     |  |  |   lea 15(a0),a0
    27f4:	|     |  |  \-> move.l a0,d0
    27f6:	|     |  |      asr.l #4,d0
    27f8:	|     |  |      move.l d0,d0
    27fa:	|     |  |      movea.l 1c7a0 <CstBackDropBufferApplyCursor>,a0
    2800:	|     |  |      move.l a0,d1
    2802:	|     |  |      addq.l #2,d1
    2804:	|     |  |      move.l d1,1c7a0 <CstBackDropBufferApplyCursor>
    280a:	|     |  |      add.w 76(sp),d0
    280e:	|     |  |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = blitheight;
    2810:	|     |  |      movea.l 1c7a0 <CstBackDropBufferApplyCursor>,a0
    2816:	|     |  |      move.l a0,d0
    2818:	|     |  |      addq.l #2,d0
    281a:	|     |  |      move.l d0,1c7a0 <CstBackDropBufferApplyCursor>
    2820:	|     |  |      move.l 44(sp),d0
    2824:	|     |  |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = (x/16)*2;
    2826:	|     |  |      move.w 10(sp),d0
    282a:	|     |  |  /-- bpl.s 2830 <CstPasteChar+0x3fa>
    282c:	|     |  |  |   addi.w #15,d0
    2830:	|     |  |  \-> asr.w #4,d0
    2832:	|     |  |      movea.l 1c7a0 <CstBackDropBufferApplyCursor>,a0
    2838:	|     |  |      move.l a0,d1
    283a:	|     |  |      addq.l #2,d1
    283c:	|     |  |      move.l d1,1c7a0 <CstBackDropBufferApplyCursor>
    2842:	|     |  |      add.w d0,d0
    2844:	|     |  |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = ystartdst;
    2846:	|     |  |      movea.l 1c7a0 <CstBackDropBufferApplyCursor>,a0
    284c:	|     |  |      move.l a0,d0
    284e:	|     |  |      addq.l #2,d0
    2850:	|     |  |      move.l d0,1c7a0 <CstBackDropBufferApplyCursor>
    2856:	|     |  |      move.l 52(sp),d0
    285a:	|     |  |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = 0;
    285c:	|     |  |      movea.l 1c7a0 <CstBackDropBufferApplyCursor>,a0
    2862:	|     |  |      move.l a0,d0
    2864:	|     |  |      addq.l #2,d0
    2866:	|     |  |      move.l d0,1c7a0 <CstBackDropBufferApplyCursor>
    286c:	|     |  |      clr.w (a0)
    286e:	|     +--|----- bra.w 29d4 <CstPasteChar+0x59e>
    
  } else { //Whole Sprite on Screen

    extrawords = 1;
    2872:	|     |  \----> move.w #1,78(sp)
    cutwordssource = 0;
    2878:	|     |         clr.w 76(sp)
    cutmaskpixel = 0;
    287c:	|     |         clr.w 74(sp)
    bltalwm = 0; //Last Word of this channel almost masked out
    2880:	|     |         clr.w 72(sp)
    bltapt = (ULONG) single->data+ystartsrc*(single->width/16)*2;
    2884:	|     |         movea.l 84(sp),a0
    2888:	|     |         move.l 24(a0),d0
    288c:	|     |         move.l d0,d2
    288e:	|     |         movea.l 84(sp),a0
    2892:	|     |         move.l (a0),d0
    2894:	|     |         movea.l d0,a0
    2896:	|     |         cmpa.w #0,a0
    289a:	|     |     /-- bge.s 28a0 <CstPasteChar+0x46a>
    289c:	|     |     |   lea 15(a0),a0
    28a0:	|     |     \-> move.l a0,d0
    28a2:	|     |         asr.l #4,d0
    28a4:	|     |         move.l 48(sp),-(sp)
    28a8:	|     |         move.l d0,-(sp)
    28aa:	|     |         jsr 17b34 <__mulsi3>
    28b0:	|     |         addq.l #8,sp
    28b2:	|     |         add.l d0,d0
    28b4:	|     |         move.l d2,d1
    28b6:	|     |         add.l d0,d1
    28b8:	|     |         move.l d1,68(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    28bc:	|     |         move.l 1c7b0 <winWidth>,d0
    28c2:	|     |         move.l 52(sp),-(sp)
    28c6:	|     |         move.l d0,-(sp)
    28c8:	|     |         jsr 17b34 <__mulsi3>
    28ce:	|     |         addq.l #8,sp
    28d0:	|     |         lsr.l #3,d0
    28d2:	|     |         move.l 28(sp),d1
    28d6:	|     |         add.l d0,d1
    28d8:	|     |         move.w 10(sp),d0
    28dc:	|     |     /-- bpl.s 28e2 <CstPasteChar+0x4ac>
    28de:	|     |     |   addi.w #15,d0
    28e2:	|     |     \-> asr.w #4,d0
    28e4:	|     |         movea.w d0,a0
    28e6:	|     |         move.l a0,d0
    28e8:	|     |         add.l a0,d0
    28ea:	|     |         move.l d1,d2
    28ec:	|     |         add.l d0,d2
    28ee:	|     |         move.l d2,64(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    28f2:	|     |         move.l 1c7b0 <winWidth>,d0
    28f8:	|     |         move.l 52(sp),-(sp)
    28fc:	|     |         move.l d0,-(sp)
    28fe:	|     |         jsr 17b34 <__mulsi3>
    2904:	|     |         addq.l #8,sp
    2906:	|     |         lsr.l #3,d0
    2908:	|     |         move.l 28(sp),d1
    290c:	|     |         add.l d0,d1
    290e:	|     |         move.w 10(sp),d0
    2912:	|     |     /-- bpl.s 2918 <CstPasteChar+0x4e2>
    2914:	|     |     |   addi.w #15,d0
    2918:	|     |     \-> asr.w #4,d0
    291a:	|     |         movea.w d0,a0
    291c:	|     |         move.l a0,d0
    291e:	|     |         add.l a0,d0
    2920:	|     |         move.l d1,d2
    2922:	|     |         add.l d0,d2
    2924:	|     |         move.l d2,60(sp)
    bltcon0 = ((x%16) << 12);
    2928:	|     |         move.w 10(sp),d0
    292c:	|     |         andi.w #-32753,d0
    2930:	|     |     /-- bpl.s 293a <CstPasteChar+0x504>
    2932:	|     |     |   subq.w #1,d0
    2934:	|     |     |   ori.w #-16,d0
    2938:	|     |     |   addq.w #1,d0
    293a:	|     |     \-> ext.l d0
    293c:	|     |         moveq #12,d1
    293e:	|     |         lsl.l d1,d0
    2940:	|     |         move.l d0,56(sp)

    *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    2944:	|     |         movea.l 84(sp),a0
    2948:	|     |         move.l (a0),d0
    294a:	|     |         movea.l d0,a0
    294c:	|     |         cmpa.w #0,a0
    2950:	|     |     /-- bge.s 2956 <CstPasteChar+0x520>
    2952:	|     |     |   lea 15(a0),a0
    2956:	|     |     \-> move.l a0,d0
    2958:	|     |         asr.l #4,d0
    295a:	|     |         move.l d0,d0
    295c:	|     |         add.w 76(sp),d0
    2960:	|     |         movea.l 1c7a0 <CstBackDropBufferApplyCursor>,a0
    2966:	|     |         move.l a0,d1
    2968:	|     |         addq.l #2,d1
    296a:	|     |         move.l d1,1c7a0 <CstBackDropBufferApplyCursor>
    2970:	|     |         add.w 78(sp),d0
    2974:	|     |         move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = blitheight;
    2976:	|     |         movea.l 1c7a0 <CstBackDropBufferApplyCursor>,a0
    297c:	|     |         move.l a0,d0
    297e:	|     |         addq.l #2,d0
    2980:	|     |         move.l d0,1c7a0 <CstBackDropBufferApplyCursor>
    2986:	|     |         move.l 44(sp),d0
    298a:	|     |         move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = (x/16)*2;
    298c:	|     |         move.w 10(sp),d0
    2990:	|     |     /-- bpl.s 2996 <CstPasteChar+0x560>
    2992:	|     |     |   addi.w #15,d0
    2996:	|     |     \-> asr.w #4,d0
    2998:	|     |         movea.l 1c7a0 <CstBackDropBufferApplyCursor>,a0
    299e:	|     |         move.l a0,d1
    29a0:	|     |         addq.l #2,d1
    29a2:	|     |         move.l d1,1c7a0 <CstBackDropBufferApplyCursor>
    29a8:	|     |         add.w d0,d0
    29aa:	|     |         move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = ystartdst;
    29ac:	|     |         movea.l 1c7a0 <CstBackDropBufferApplyCursor>,a0
    29b2:	|     |         move.l a0,d0
    29b4:	|     |         addq.l #2,d0
    29b6:	|     |         move.l d0,1c7a0 <CstBackDropBufferApplyCursor>
    29bc:	|     |         move.l 52(sp),d0
    29c0:	|     |         move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = 0;
    29c2:	|     |         movea.l 1c7a0 <CstBackDropBufferApplyCursor>,a0
    29c8:	|     |         move.l a0,d0
    29ca:	|     |         addq.l #2,d0
    29cc:	|     |         move.l d0,1c7a0 <CstBackDropBufferApplyCursor>
    29d2:	|     |         clr.w (a0)
    
  }

  UWORD bltafwm = 0xffff >> cutmaskpixel;
    29d4:	|     \-------> moveq #0,d0
    29d6:	|               move.w 74(sp),d0
    29da:	|               moveq #0,d1
    29dc:	|               not.w d1
    29de:	|               asr.l d0,d1
    29e0:	|               move.w d1,26(sp)
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    29e4:	|               moveq #0,d1
    29e6:	|               move.w 76(sp),d1
    29ea:	|               moveq #0,d0
    29ec:	|               move.w 78(sp),d0
    29f0:	|               sub.l d0,d1
    29f2:	|               move.l d1,d0
    29f4:	|               add.w d0,d0
    29f6:	|               move.w d0,24(sp)
  WORD bltcmod = winWidth/8-blitwidth*2-extrawords*2+cutwordssource*2;
    29fa:	|               move.l 1c7b0 <winWidth>,d0
    2a00:	|               lsr.l #3,d0
    2a02:	|               move.l d0,d2
    2a04:	|               move.w 76(sp),d1
    2a08:	|               sub.w 78(sp),d1
    2a0c:	|               move.l 40(sp),d0
    2a10:	|               sub.w d0,d1
    2a12:	|               move.w d1,d0
    2a14:	|               add.w d1,d0
    2a16:	|               add.w d2,d0
    2a18:	|               move.w d0,22(sp)
  WORD bltdmod = winWidth/8-blitwidth*2-extrawords*2+cutwordssource*2;
    2a1c:	|               move.l 1c7b0 <winWidth>,d0
    2a22:	|               lsr.l #3,d0
    2a24:	|               move.l d0,d2
    2a26:	|               move.w 76(sp),d1
    2a2a:	|               sub.w 78(sp),d1
    2a2e:	|               move.l 40(sp),d0
    2a32:	|               sub.w d0,d1
    2a34:	|               move.w d1,d0
    2a36:	|               add.w d1,d0
    2a38:	|               add.w d2,d0
    2a3a:	|               move.w d0,20(sp)

  volatile struct Custom *custom = (struct Custom*)0xdff000;
    2a3e:	|               move.l #14675968,16(sp)
  WaitBlit();
    2a46:	|               move.l 1c868 <GfxBase>,d0
    2a4c:	|               movea.l d0,a6
    2a4e:	|               jsr -228(a6)

  custom->bltafwm = bltafwm;
    2a52:	|               movea.l 16(sp),a0
    2a56:	|               move.w 26(sp),68(a0)
  custom->bltalwm = bltalwm;
    2a5c:	|               movea.l 16(sp),a0
    2a60:	|               move.w 72(sp),70(a0)
  custom->bltamod = bltamod;
    2a66:	|               move.w 24(sp),d0
    2a6a:	|               movea.l 16(sp),a0
    2a6e:	|               move.w d0,100(a0)
  custom->bltcmod = bltcmod;
    2a72:	|               move.w 22(sp),d0
    2a76:	|               movea.l 16(sp),a0
    2a7a:	|               move.w d0,96(a0)
  custom->bltdmod = bltdmod;
    2a7e:	|               move.w 20(sp),d0
    2a82:	|               movea.l 16(sp),a0
    2a86:	|               move.w d0,102(a0)

  UWORD bltcptplus = winWidth/8*winHeight;
    2a8a:	|               move.l 1c7b0 <winWidth>,d0
    2a90:	|               lsr.l #3,d0
    2a92:	|               move.l d0,d1
    2a94:	|               move.l 1c7b4 <winHeight>,d0
    2a9a:	|               move.l d0,d0
    2a9c:	|               move.w d1,d2
    2a9e:	|               muls.w d0,d2
    2aa0:	|               move.w d2,14(sp)
  UWORD tmp = textPaletteIndex;
    2aa4:	|               move.w 1c776 <textPaletteIndex>,38(sp)

  UWORD minterm;
  //Apply palette color to planeblit
  //Ugly double code in the name of performance
  UWORD tmp2 = tmp & 0x01;
    2aac:	|               move.w 38(sp),d0
    2ab0:	|               andi.w #1,d0
    2ab4:	|               move.w d0,12(sp)
  if(tmp2) {
    2ab8:	|        /----- beq.s 2ac2 <CstPasteChar+0x68c>
    minterm = 0xbfa;
    2aba:	|        |      move.w #3066,36(sp)
    2ac0:	|        |  /-- bra.s 2ac8 <CstPasteChar+0x692>
  } else {
    minterm = 0xb0a;
    2ac2:	|        \--|-> move.w #2826,36(sp)
  }

  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2ac8:	|           \-> clr.l 32(sp)
    2acc:	|     /-------- bra.w 2b6a <CstPasteChar+0x734>
  {

    custom->bltcon0 = bltcon0 + minterm;
    2ad0:	|  /--|-------> move.l 56(sp),d0
    2ad4:	|  |  |         add.w 36(sp),d0
    2ad8:	|  |  |         movea.l 16(sp),a0
    2adc:	|  |  |         move.w d0,64(a0)
    custom->bltapt = (APTR) bltapt;
    2ae0:	|  |  |         move.l 68(sp),d0
    2ae4:	|  |  |         movea.l 16(sp),a0
    2ae8:	|  |  |         move.l d0,80(a0)
    custom->bltcpt = (APTR) bltcpt;
    2aec:	|  |  |         move.l 64(sp),d0
    2af0:	|  |  |         movea.l 16(sp),a0
    2af4:	|  |  |         move.l d0,72(a0)
    custom->bltdpt = (APTR) bltdpt;
    2af8:	|  |  |         move.l 60(sp),d0
    2afc:	|  |  |         movea.l 16(sp),a0
    2b00:	|  |  |         move.l d0,84(a0)
    custom->bltsize = (blitheight << 6) + blitwidth-cutwordssource+extrawords;
    2b04:	|  |  |         move.l 44(sp),d0
    2b08:	|  |  |         lsl.w #6,d0
    2b0a:	|  |  |         move.l 40(sp),d1
    2b0e:	|  |  |         add.w d1,d0
    2b10:	|  |  |         sub.w 76(sp),d0
    2b14:	|  |  |         add.w 78(sp),d0
    2b18:	|  |  |         movea.l 16(sp),a0
    2b1c:	|  |  |         move.w d0,88(a0)
    bltcpt += bltcptplus;
    2b20:	|  |  |         moveq #0,d0
    2b22:	|  |  |         move.w 14(sp),d0
    2b26:	|  |  |         add.l d0,64(sp)
    bltdpt += bltcptplus;
    2b2a:	|  |  |         moveq #0,d0
    2b2c:	|  |  |         move.w 14(sp),d0
    2b30:	|  |  |         add.l d0,60(sp)

    //Apply palette color to planeblit
    //Ugly double code in the name of performance
    tmp = tmp >> 1;
    2b34:	|  |  |         move.w 38(sp),d0
    2b38:	|  |  |         lsr.w #1,d0
    2b3a:	|  |  |         move.w d0,38(sp)
    tmp2 = tmp & 0x01;
    2b3e:	|  |  |         move.w 38(sp),d1
    2b42:	|  |  |         andi.w #1,d1
    2b46:	|  |  |         move.w d1,12(sp)
    if(tmp2) {
    2b4a:	|  |  |  /----- beq.s 2b54 <CstPasteChar+0x71e>
      minterm = 0xbfa;
    2b4c:	|  |  |  |      move.w #3066,36(sp)
    2b52:	|  |  |  |  /-- bra.s 2b5a <CstPasteChar+0x724>
    } else {
      minterm = 0xb0a;
    2b54:	|  |  |  \--|-> move.w #2826,36(sp)
    }   

    WaitBlit();    
    2b5a:	|  |  |     \-> move.l 1c868 <GfxBase>,d0
    2b60:	|  |  |         movea.l d0,a6
    2b62:	|  |  |         jsr -228(a6)
  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2b66:	|  |  |         addq.l #1,32(sp)
    2b6a:	|  |  \-------> moveq #4,d2
    2b6c:	|  |            cmp.l 32(sp),d2
    2b70:	|  \----------- bge.w 2ad0 <CstPasteChar+0x69a>
 
  }   
}
    2b74:	\-------------> move.l (sp)+,d2
    2b76:	                movea.l (sp)+,a6
    2b78:	                lea 72(sp),sp
    2b7c:	                rts

00002b7e <CstRestoreScreen>:


void CstRestoreScreen()
{
    2b7e:	                   lea -24(sp),sp
    2b82:	                   move.l a6,-(sp)
    2b84:	                   move.l d2,-(sp)
  volatile struct Custom *custom = (struct Custom*)0xdff000;  
    2b86:	                   move.l #14675968,16(sp)

  //struct CleanupQueue *cursor  = CstCleanupQueueDrawBuffer;
  if(!CstCleanupQueueDrawBuffer || !CstDrawBuffer) {
    2b8e:	                   move.l 1c798 <CstCleanupQueueDrawBuffer>,d0
    2b94:	/----------------- beq.w 2d9c <CstRestoreScreen+0x21e>
    2b98:	|                  move.l 1c790 <CstDrawBuffer>,d0
    2b9e:	+----------------- beq.w 2d9c <CstRestoreScreen+0x21e>
    return;
  } 

  WaitBlit();
    2ba2:	|                  move.l 1c868 <GfxBase>,d0
    2ba8:	|                  movea.l d0,a6
    2baa:	|                  jsr -228(a6)
  
  custom->bltafwm = 0xffff;
    2bae:	|                  movea.l 16(sp),a0
    2bb2:	|                  move.w #-1,68(a0)
  custom->bltalwm = 0xffff;  
    2bb8:	|                  movea.l 16(sp),a0
    2bbc:	|                  move.w #-1,70(a0)
  custom->bltcon0 = 0x9f0;
    2bc2:	|                  movea.l 16(sp),a0
    2bc6:	|                  move.w #2544,64(a0)
  
  while(CstCleanupQueueDrawBuffer)
    2bcc:	|     /----------- bra.w 2d90 <CstRestoreScreen+0x212>
  {    

    if( CstCleanupQueueDrawBuffer->person && CstCleanupQueueDrawBuffer->person->samePosCount < 3)
    2bd0:	|  /--|----------> movea.l 1c798 <CstCleanupQueueDrawBuffer>,a0
    2bd6:	|  |  |            move.l 4(a0),d0
    2bda:	|  |  |  /-------- beq.w 2d5e <CstRestoreScreen+0x1e0>
    2bde:	|  |  |  |         movea.l 1c798 <CstCleanupQueueDrawBuffer>,a0
    2be4:	|  |  |  |         movea.l 4(a0),a0
    2be8:	|  |  |  |         move.l 16(a0),d0
    2bec:	|  |  |  |         moveq #2,d1
    2bee:	|  |  |  |         cmp.l d0,d1
    2bf0:	|  |  |  +-------- blt.w 2d5e <CstRestoreScreen+0x1e0>
    {
      custom->bltamod = winWidth/8-CstCleanupQueueDrawBuffer->widthinwords*2;
    2bf4:	|  |  |  |         move.l 1c7b0 <winWidth>,d0
    2bfa:	|  |  |  |         lsr.l #3,d0
    2bfc:	|  |  |  |         move.l d0,d1
    2bfe:	|  |  |  |         movea.l 1c798 <CstCleanupQueueDrawBuffer>,a0
    2c04:	|  |  |  |         move.w 8(a0),d0
    2c08:	|  |  |  |         add.w d0,d0
    2c0a:	|  |  |  |         sub.w d0,d1
    2c0c:	|  |  |  |         movea.l 16(sp),a0
    2c10:	|  |  |  |         move.w d1,100(a0)
      custom->bltdmod = winWidth/8-CstCleanupQueueDrawBuffer->widthinwords*2;
    2c14:	|  |  |  |         move.l 1c7b0 <winWidth>,d0
    2c1a:	|  |  |  |         lsr.l #3,d0
    2c1c:	|  |  |  |         move.l d0,d1
    2c1e:	|  |  |  |         movea.l 1c798 <CstCleanupQueueDrawBuffer>,a0
    2c24:	|  |  |  |         move.w 8(a0),d0
    2c28:	|  |  |  |         add.w d0,d0
    2c2a:	|  |  |  |         sub.w d0,d1
    2c2c:	|  |  |  |         movea.l 16(sp),a0
    2c30:	|  |  |  |         move.w d1,102(a0)
      ULONG bltapt = ((ULONG) CstBackDrop) + CstCleanupQueueDrawBuffer->starty*winWidth/8 + CstCleanupQueueDrawBuffer->startxinbytes;
    2c34:	|  |  |  |         movea.l 1c798 <CstCleanupQueueDrawBuffer>,a0
    2c3a:	|  |  |  |         move.w 14(a0),d0
    2c3e:	|  |  |  |         move.w d0,d0
    2c40:	|  |  |  |         andi.l #65535,d0
    2c46:	|  |  |  |         move.l 1c7b0 <winWidth>,d1
    2c4c:	|  |  |  |         move.l d1,-(sp)
    2c4e:	|  |  |  |         move.l d0,-(sp)
    2c50:	|  |  |  |         jsr 17b34 <__mulsi3>
    2c56:	|  |  |  |         addq.l #8,sp
    2c58:	|  |  |  |         move.l d0,d1
    2c5a:	|  |  |  |         lsr.l #3,d1
    2c5c:	|  |  |  |         move.l 1c77e <CstBackDrop>,d0
    2c62:	|  |  |  |         add.l d0,d1
    2c64:	|  |  |  |         movea.l 1c798 <CstCleanupQueueDrawBuffer>,a0
    2c6a:	|  |  |  |         move.w 12(a0),d0
    2c6e:	|  |  |  |         move.w d0,d0
    2c70:	|  |  |  |         andi.l #65535,d0
    2c76:	|  |  |  |         move.l d1,d2
    2c78:	|  |  |  |         add.l d0,d2
    2c7a:	|  |  |  |         move.l d2,28(sp)
      ULONG bltdpt = ((ULONG) CstDrawBuffer) + CstCleanupQueueDrawBuffer->starty*winWidth/8 + CstCleanupQueueDrawBuffer->startxinbytes;
    2c7e:	|  |  |  |         movea.l 1c798 <CstCleanupQueueDrawBuffer>,a0
    2c84:	|  |  |  |         move.w 14(a0),d0
    2c88:	|  |  |  |         move.w d0,d0
    2c8a:	|  |  |  |         andi.l #65535,d0
    2c90:	|  |  |  |         move.l 1c7b0 <winWidth>,d1
    2c96:	|  |  |  |         move.l d1,-(sp)
    2c98:	|  |  |  |         move.l d0,-(sp)
    2c9a:	|  |  |  |         jsr 17b34 <__mulsi3>
    2ca0:	|  |  |  |         addq.l #8,sp
    2ca2:	|  |  |  |         move.l d0,d1
    2ca4:	|  |  |  |         lsr.l #3,d1
    2ca6:	|  |  |  |         move.l 1c790 <CstDrawBuffer>,d0
    2cac:	|  |  |  |         add.l d0,d1
    2cae:	|  |  |  |         movea.l 1c798 <CstCleanupQueueDrawBuffer>,a0
    2cb4:	|  |  |  |         move.w 12(a0),d0
    2cb8:	|  |  |  |         move.w d0,d0
    2cba:	|  |  |  |         andi.l #65535,d0
    2cc0:	|  |  |  |         move.l d1,d2
    2cc2:	|  |  |  |         add.l d0,d2
    2cc4:	|  |  |  |         move.l d2,24(sp)
      for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2cc8:	|  |  |  |         clr.l 20(sp)
    2ccc:	|  |  |  |     /-- bra.w 2d54 <CstRestoreScreen+0x1d6>
      {
        custom->bltapt = (APTR) bltapt;
    2cd0:	|  |  |  |  /--|-> move.l 28(sp),d0
    2cd4:	|  |  |  |  |  |   movea.l 16(sp),a0
    2cd8:	|  |  |  |  |  |   move.l d0,80(a0)
        custom->bltdpt = (APTR) bltdpt;
    2cdc:	|  |  |  |  |  |   move.l 24(sp),d0
    2ce0:	|  |  |  |  |  |   movea.l 16(sp),a0
    2ce4:	|  |  |  |  |  |   move.l d0,84(a0)
        custom->bltsize = (CstCleanupQueueDrawBuffer->height << 6) + CstCleanupQueueDrawBuffer->widthinwords;
    2ce8:	|  |  |  |  |  |   movea.l 1c798 <CstCleanupQueueDrawBuffer>,a0
    2cee:	|  |  |  |  |  |   move.w 10(a0),d0
    2cf2:	|  |  |  |  |  |   lsl.w #6,d0
    2cf4:	|  |  |  |  |  |   movea.l 1c798 <CstCleanupQueueDrawBuffer>,a0
    2cfa:	|  |  |  |  |  |   move.w 8(a0),d1
    2cfe:	|  |  |  |  |  |   add.w d1,d0
    2d00:	|  |  |  |  |  |   movea.l 16(sp),a0
    2d04:	|  |  |  |  |  |   move.w d0,88(a0)
        bltapt += winWidth/8*winHeight;
    2d08:	|  |  |  |  |  |   move.l 1c7b0 <winWidth>,d0
    2d0e:	|  |  |  |  |  |   lsr.l #3,d0
    2d10:	|  |  |  |  |  |   move.l 1c7b4 <winHeight>,d1
    2d16:	|  |  |  |  |  |   move.l d1,-(sp)
    2d18:	|  |  |  |  |  |   move.l d0,-(sp)
    2d1a:	|  |  |  |  |  |   jsr 17b34 <__mulsi3>
    2d20:	|  |  |  |  |  |   addq.l #8,sp
    2d22:	|  |  |  |  |  |   add.l d0,28(sp)
        bltdpt += winWidth/8*winHeight;
    2d26:	|  |  |  |  |  |   move.l 1c7b0 <winWidth>,d0
    2d2c:	|  |  |  |  |  |   lsr.l #3,d0
    2d2e:	|  |  |  |  |  |   move.l 1c7b4 <winHeight>,d1
    2d34:	|  |  |  |  |  |   move.l d1,-(sp)
    2d36:	|  |  |  |  |  |   move.l d0,-(sp)
    2d38:	|  |  |  |  |  |   jsr 17b34 <__mulsi3>
    2d3e:	|  |  |  |  |  |   addq.l #8,sp
    2d40:	|  |  |  |  |  |   add.l d0,24(sp)
        WaitBlit();
    2d44:	|  |  |  |  |  |   move.l 1c868 <GfxBase>,d0
    2d4a:	|  |  |  |  |  |   movea.l d0,a6
    2d4c:	|  |  |  |  |  |   jsr -228(a6)
      for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2d50:	|  |  |  |  |  |   addq.l #1,20(sp)
    2d54:	|  |  |  |  |  \-> moveq #4,d0
    2d56:	|  |  |  |  |      cmp.l 20(sp),d0
    2d5a:	|  |  |  |  \----- bge.w 2cd0 <CstRestoreScreen+0x152>
      }
    }
    struct CleanupQueue *todelete = CstCleanupQueueDrawBuffer;
    2d5e:	|  |  |  \-------> move.l 1c798 <CstCleanupQueueDrawBuffer>,12(sp)
    CstCleanupQueueDrawBuffer = CstCleanupQueueDrawBuffer->next;  
    2d66:	|  |  |            movea.l 1c798 <CstCleanupQueueDrawBuffer>,a0
    2d6c:	|  |  |            move.l 16(a0),d0
    2d70:	|  |  |            move.l d0,1c798 <CstCleanupQueueDrawBuffer>
    FreeVec(todelete);    
    2d76:	|  |  |            move.l 12(sp),8(sp)
    2d7c:	|  |  |            move.l 1c85c <SysBase>,d0
    2d82:	|  |  |            movea.l d0,a6
    2d84:	|  |  |            movea.l 8(sp),a1
    2d88:	|  |  |            jsr -690(a6)
    todelete = NULL;
    2d8c:	|  |  |            clr.l 12(sp)
  while(CstCleanupQueueDrawBuffer)
    2d90:	|  |  \----------> move.l 1c798 <CstCleanupQueueDrawBuffer>,d0
    2d96:	|  \-------------- bne.w 2bd0 <CstRestoreScreen+0x52>
    2d9a:	|              /-- bra.s 2d9e <CstRestoreScreen+0x220>
    return;
    2d9c:	\--------------|-> nop
  }
  
}
    2d9e:	               \-> move.l (sp)+,d2
    2da0:	                   movea.l (sp)+,a6
    2da2:	                   lea 24(sp),sp
    2da6:	                   rts

00002da8 <CstScaleSprite>:

void CstScaleSprite( struct sprite *single, struct onScreenPerson *person, WORD x, WORD y, UWORD destinationtype)
{  
    2da8:	                lea -132(sp),sp
    2dac:	                move.l a6,-(sp)
    2dae:	                move.l d2,-(sp)
    2db0:	                movea.l 152(sp),a0
    2db4:	                move.l 156(sp),d1
    2db8:	                move.l 160(sp),d0
    2dbc:	                movea.w a0,a0
    2dbe:	                move.w a0,12(sp)
    2dc2:	                move.w d1,d1
    2dc4:	                move.w d1,10(sp)
    2dc8:	                move.w d0,d0
    2dca:	                move.w d0,8(sp)

  UBYTE *mask = CstDrawZBuffer( single, zBuffer, x, y);
    2dce:	                move.w 10(sp),d0
    2dd2:	                moveq #0,d1
    2dd4:	                move.w d0,d1
    2dd6:	                move.w 12(sp),d0
    2dda:	                move.w d0,d0
    2ddc:	                andi.l #65535,d0
    2de2:	                movea.l 1c8bc <zBuffer>,a0
    2de8:	                move.l d1,-(sp)
    2dea:	                move.l d0,-(sp)
    2dec:	                move.l a0,-(sp)
    2dee:	                move.l 156(sp),-(sp)
    2df2:	                jsr 14e8 <CstDrawZBuffer>
    2df8:	                lea 16(sp),sp
    2dfc:	                move.l d0,84(sp)

  UWORD *destination = 0;
    2e00:	                clr.l 136(sp)
  switch(destinationtype)
    2e04:	                moveq #0,d0
    2e06:	                move.w 8(sp),d0
    2e0a:	                moveq #1,d1
    2e0c:	                cmp.l d0,d1
    2e0e:	            /-- beq.s 2e18 <CstScaleSprite+0x70>
    2e10:	            |   moveq #2,d2
    2e12:	            |   cmp.l d0,d2
    2e14:	         /--|-- beq.s 2e22 <CstScaleSprite+0x7a>
    2e16:	      /--|--|-- bra.s 2e34 <CstScaleSprite+0x8c>
  {
    case SCREEN:
      destination = (UWORD *) CstDrawBuffer;      
    2e18:	      |  |  \-> move.l 1c790 <CstDrawBuffer>,136(sp)
      break;
    2e20:	      +--|----- bra.s 2e34 <CstScaleSprite+0x8c>
    case BACKDROP:      
      CstApplyBackDropCounter = 2;
    2e22:	      |  \----> move.w #2,1c78a <CstApplyBackDropCounter>
      destination = (UWORD *) CstBackDrop;      
    2e2a:	      |         move.l 1c77e <CstBackDrop>,136(sp)
      break;
    2e32:	      |         nop
  ULONG bltcon1; //Shift Source
  ULONG ystartdst;
  ULONG ystartsrc; 
  ULONG blitheight;

  if( y < 0) {
    2e34:	      \-------> tst.w 10(sp)
    2e38:	         /----- bge.s 2e80 <CstScaleSprite+0xd8>
    if(y + single->height < 0) {
    2e3a:	         |      movea.w 10(sp),a1
    2e3e:	         |      movea.l 144(sp),a0
    2e42:	         |      move.l 4(a0),d0
    2e46:	         |      add.l a1,d0
    2e48:	         |  /-- bpl.s 2e5c <CstScaleSprite+0xb4>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    2e4a:	         |  |   pea 17f63 <PutChar+0x319>
    2e50:	         |  |   jsr 17176 <KPrintF>
    2e56:	         |  |   addq.l #4,sp
      return;
    2e58:	/--------|--|-- bra.w 3892 <CstScaleSprite+0xaea>
    }
    ystartdst = 0;
    2e5c:	|        |  \-> clr.l 100(sp)
    ystartsrc = y*-1;
    2e60:	|        |      move.w 10(sp),d0
    2e64:	|        |      ext.l d0
    2e66:	|        |      neg.l d0
    2e68:	|        |      move.l d0,96(sp)
    blitheight = single->height+y;
    2e6c:	|        |      movea.l 144(sp),a0
    2e70:	|        |      move.l 4(a0),d0
    2e74:	|        |      movea.w 10(sp),a0
    2e78:	|        |      add.l a0,d0
    2e7a:	|        |      move.l d0,92(sp)
    2e7e:	|     /--|----- bra.s 2ef2 <CstScaleSprite+0x14a>
  } else if(y+single->height > (int) winHeight) {
    2e80:	|     |  \----> movea.w 10(sp),a1
    2e84:	|     |         movea.l 144(sp),a0
    2e88:	|     |         move.l 4(a0),d0
    2e8c:	|     |         move.l a1,d1
    2e8e:	|     |         add.l d0,d1
    2e90:	|     |         move.l 1c7b4 <winHeight>,d0
    2e96:	|     |         cmp.l d1,d0
    2e98:	|     |  /----- bge.s 2eda <CstScaleSprite+0x132>
    if(y  > (int) winHeight) {
    2e9a:	|     |  |      movea.w 10(sp),a0
    2e9e:	|     |  |      move.l 1c7b4 <winHeight>,d0
    2ea4:	|     |  |      cmp.l a0,d0
    2ea6:	|     |  |  /-- bge.s 2eba <CstScaleSprite+0x112>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    2ea8:	|     |  |  |   pea 17f63 <PutChar+0x319>
    2eae:	|     |  |  |   jsr 17176 <KPrintF>
    2eb4:	|     |  |  |   addq.l #4,sp
      return;
    2eb6:	+-----|--|--|-- bra.w 3892 <CstScaleSprite+0xaea>
    }
    ystartdst = y;
    2eba:	|     |  |  \-> movea.w 10(sp),a0
    2ebe:	|     |  |      move.l a0,100(sp)
    ystartsrc = 0;
    2ec2:	|     |  |      clr.l 96(sp)
    blitheight = winHeight-y;
    2ec6:	|     |  |      move.l 1c7b4 <winHeight>,d0
    2ecc:	|     |  |      movea.w 10(sp),a0
    2ed0:	|     |  |      move.l d0,d1
    2ed2:	|     |  |      sub.l a0,d1
    2ed4:	|     |  |      move.l d1,92(sp)
    2ed8:	|     +--|----- bra.s 2ef2 <CstScaleSprite+0x14a>
  } else {
    ystartdst = y;
    2eda:	|     |  \----> movea.w 10(sp),a0
    2ede:	|     |         move.l a0,100(sp)
    ystartsrc = 0;
    2ee2:	|     |         clr.l 96(sp)
    blitheight = single->height;
    2ee6:	|     |         movea.l 144(sp),a0
    2eea:	|     |         move.l 4(a0),d0
    2eee:	|     |         move.l d0,92(sp)
  }


  if( x < 0) { //Leftmost part outside screen
    2ef2:	|     \-------> tst.w 12(sp)
    2ef6:	|     /-------- bge.w 3176 <CstScaleSprite+0x3ce>
    if(x + single->width < 0) {
    2efa:	|     |         movea.w 12(sp),a1
    2efe:	|     |         movea.l 144(sp),a0
    2f02:	|     |         move.l (a0),d0
    2f04:	|     |         add.l a1,d0
    2f06:	|     |     /-- bpl.s 2f1a <CstScaleSprite+0x172>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    2f08:	|     |     |   pea 17f63 <PutChar+0x319>
    2f0e:	|     |     |   jsr 17176 <KPrintF>
    2f14:	|     |     |   addq.l #4,sp
      return;
    2f16:	+-----|-----|-- bra.w 3892 <CstScaleSprite+0xaea>

    }
    
    extrawords = 1;
    2f1a:	|     |     \-> move.w #1,134(sp)
    cutwordssource = (x*-1)/16; 
    2f20:	|     |         move.w 12(sp),d0
    2f24:	|     |     /-- bpl.s 2f2a <CstScaleSprite+0x182>
    2f26:	|     |     |   addi.w #15,d0
    2f2a:	|     |     \-> asr.w #4,d0
    2f2c:	|     |         neg.w d0
    2f2e:	|     |         move.w d0,132(sp)
    cutmaskpixel = (x*-1)%16;     
    2f32:	|     |         move.w 12(sp),d0
    2f36:	|     |         ext.l d0
    2f38:	|     |         neg.l d0
    2f3a:	|     |         andi.l #-2147483633,d0
    2f40:	|     |     /-- bpl.s 2f4a <CstScaleSprite+0x1a2>
    2f42:	|     |     |   subq.l #1,d0
    2f44:	|     |     |   moveq #-16,d1
    2f46:	|     |     |   or.l d1,d0
    2f48:	|     |     |   addq.l #1,d0
    2f4a:	|     |     \-> move.w d0,130(sp)
    bltalwm = 0; //Last Word of this channel almost masked out
    2f4e:	|     |         clr.w 128(sp)
    bltapt = ((ULONG) mask)+cutwordssource*2+ystartsrc*single->width/8;
    2f52:	|     |         moveq #0,d0
    2f54:	|     |         move.w 132(sp),d0
    2f58:	|     |         add.l d0,d0
    2f5a:	|     |         move.l d0,d1
    2f5c:	|     |         move.l 84(sp),d0
    2f60:	|     |         move.l d1,d2
    2f62:	|     |         add.l d0,d2
    2f64:	|     |         movea.l 144(sp),a0
    2f68:	|     |         move.l (a0),d0
    2f6a:	|     |         move.l 96(sp),-(sp)
    2f6e:	|     |         move.l d0,-(sp)
    2f70:	|     |         jsr 17b34 <__mulsi3>
    2f76:	|     |         addq.l #8,sp
    2f78:	|     |         lsr.l #3,d0
    2f7a:	|     |         move.l d2,d1
    2f7c:	|     |         add.l d0,d1
    2f7e:	|     |         move.l d1,124(sp)
    bltbpt = ((ULONG) single->data)+cutwordssource*2+ystartsrc*single->width/8;
    2f82:	|     |         movea.l 144(sp),a0
    2f86:	|     |         move.l 24(a0),d0
    2f8a:	|     |         move.l d0,d1
    2f8c:	|     |         moveq #0,d0
    2f8e:	|     |         move.w 132(sp),d0
    2f92:	|     |         add.l d0,d0
    2f94:	|     |         move.l d1,d2
    2f96:	|     |         add.l d0,d2
    2f98:	|     |         movea.l 144(sp),a0
    2f9c:	|     |         move.l (a0),d0
    2f9e:	|     |         move.l 96(sp),-(sp)
    2fa2:	|     |         move.l d0,-(sp)
    2fa4:	|     |         jsr 17b34 <__mulsi3>
    2faa:	|     |         addq.l #8,sp
    2fac:	|     |         lsr.l #3,d0
    2fae:	|     |         move.l d2,d1
    2fb0:	|     |         add.l d0,d1
    2fb2:	|     |         move.l d1,120(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    2fb6:	|     |         move.l 1c7b0 <winWidth>,d0
    2fbc:	|     |         move.l 100(sp),-(sp)
    2fc0:	|     |         move.l d0,-(sp)
    2fc2:	|     |         jsr 17b34 <__mulsi3>
    2fc8:	|     |         addq.l #8,sp
    2fca:	|     |         lsr.l #3,d0
    2fcc:	|     |         move.l 136(sp),d1
    2fd0:	|     |         add.l d1,d0
    2fd2:	|     |         move.l d0,d2
    2fd4:	|     |         subq.l #2,d2
    2fd6:	|     |         move.l d2,116(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    2fda:	|     |         move.l 1c7b0 <winWidth>,d0
    2fe0:	|     |         move.l 100(sp),-(sp)
    2fe4:	|     |         move.l d0,-(sp)
    2fe6:	|     |         jsr 17b34 <__mulsi3>
    2fec:	|     |         addq.l #8,sp
    2fee:	|     |         lsr.l #3,d0
    2ff0:	|     |         move.l 136(sp),d1
    2ff4:	|     |         add.l d1,d0
    2ff6:	|     |         move.l d0,d1
    2ff8:	|     |         subq.l #2,d1
    2ffa:	|     |         move.l d1,112(sp)
    bltcon0 = 0xfca + ((16-cutmaskpixel) << 12);
    2ffe:	|     |         moveq #0,d0
    3000:	|     |         move.w 130(sp),d0
    3004:	|     |         moveq #16,d1
    3006:	|     |         sub.l d0,d1
    3008:	|     |         move.l d1,d0
    300a:	|     |         moveq #12,d2
    300c:	|     |         lsl.l d2,d0
    300e:	|     |         addi.l #4042,d0
    3014:	|     |         move.l d0,108(sp)
    bltcon1 = ((16-cutmaskpixel) << 12);
    3018:	|     |         moveq #0,d0
    301a:	|     |         move.w 130(sp),d0
    301e:	|     |         moveq #16,d1
    3020:	|     |         sub.l d0,d1
    3022:	|     |         move.l d1,d0
    3024:	|     |         moveq #12,d1
    3026:	|     |         lsl.l d1,d0
    3028:	|     |         move.l d0,104(sp)
    if( destinationtype == SCREEN)
    302c:	|     |         cmpi.w #1,8(sp)
    3032:	|     |  /----- bne.w 30f0 <CstScaleSprite+0x348>
    {      
      struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    3036:	|     |  |      move.l 1c798 <CstCleanupQueueDrawBuffer>,48(sp)
      CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    303e:	|     |  |      moveq #20,d2
    3040:	|     |  |      move.l d2,44(sp)
    3044:	|     |  |      clr.l 40(sp)
    3048:	|     |  |      move.l 1c85c <SysBase>,d0
    304e:	|     |  |      movea.l d0,a6
    3050:	|     |  |      move.l 44(sp),d0
    3054:	|     |  |      move.l 40(sp),d1
    3058:	|     |  |      jsr -684(a6)
    305c:	|     |  |      move.l d0,36(sp)
    3060:	|     |  |      move.l 36(sp),d0
    3064:	|     |  |      move.l d0,1c798 <CstCleanupQueueDrawBuffer>
      CstCleanupQueueDrawBuffer->next = next;   
    306a:	|     |  |      movea.l 1c798 <CstCleanupQueueDrawBuffer>,a0
    3070:	|     |  |      move.l 48(sp),16(a0)

      CstCleanupQueueDrawBuffer->x = x;
    3076:	|     |  |      movea.l 1c798 <CstCleanupQueueDrawBuffer>,a0
    307c:	|     |  |      move.w 12(sp),d0
    3080:	|     |  |      move.w d0,(a0)
      CstCleanupQueueDrawBuffer->y = y;
    3082:	|     |  |      movea.l 1c798 <CstCleanupQueueDrawBuffer>,a0
    3088:	|     |  |      move.w 10(sp),d0
    308c:	|     |  |      move.w d0,2(a0)
      CstCleanupQueueDrawBuffer->person = person;      
    3090:	|     |  |      movea.l 1c798 <CstCleanupQueueDrawBuffer>,a0
    3096:	|     |  |      move.l 148(sp),4(a0)

      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; //Width in X Bytes
    309c:	|     |  |      movea.l 144(sp),a0
    30a0:	|     |  |      move.l (a0),d0
    30a2:	|     |  |      movea.l d0,a0
    30a4:	|     |  |      cmpa.w #0,a0
    30a8:	|     |  |  /-- bge.s 30ae <CstScaleSprite+0x306>
    30aa:	|     |  |  |   lea 15(a0),a0
    30ae:	|     |  |  \-> move.l a0,d0
    30b0:	|     |  |      asr.l #4,d0
    30b2:	|     |  |      move.l d0,d0
    30b4:	|     |  |      add.w 132(sp),d0
    30b8:	|     |  |      movea.l 1c798 <CstCleanupQueueDrawBuffer>,a0
    30be:	|     |  |      add.w 134(sp),d0
    30c2:	|     |  |      move.w d0,8(a0)
      CstCleanupQueueDrawBuffer->height = blitheight;
    30c6:	|     |  |      movea.l 1c798 <CstCleanupQueueDrawBuffer>,a0
    30cc:	|     |  |      move.l 92(sp),d0
    30d0:	|     |  |      move.w d0,10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes = 0;
    30d4:	|     |  |      movea.l 1c798 <CstCleanupQueueDrawBuffer>,a0
    30da:	|     |  |      clr.w 12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    30de:	|     |  |      movea.l 1c798 <CstCleanupQueueDrawBuffer>,a0
    30e4:	|     |  |      move.l 100(sp),d0
    30e8:	|     |  |      move.w d0,14(a0)
    30ec:	|  /--|--|----- bra.w 36a4 <CstScaleSprite+0x8fc>
    } else {
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    30f0:	|  |  |  \----> movea.l 144(sp),a0
    30f4:	|  |  |         move.l (a0),d0
    30f6:	|  |  |         movea.l d0,a0
    30f8:	|  |  |         cmpa.w #0,a0
    30fc:	|  |  |     /-- bge.s 3102 <CstScaleSprite+0x35a>
    30fe:	|  |  |     |   lea 15(a0),a0
    3102:	|  |  |     \-> move.l a0,d0
    3104:	|  |  |         asr.l #4,d0
    3106:	|  |  |         move.l d0,d0
    3108:	|  |  |         add.w 132(sp),d0
    310c:	|  |  |         movea.l 1c7a0 <CstBackDropBufferApplyCursor>,a0
    3112:	|  |  |         move.l a0,d1
    3114:	|  |  |         addq.l #2,d1
    3116:	|  |  |         move.l d1,1c7a0 <CstBackDropBufferApplyCursor>
    311c:	|  |  |         add.w 134(sp),d0
    3120:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    3122:	|  |  |         movea.l 1c7a0 <CstBackDropBufferApplyCursor>,a0
    3128:	|  |  |         move.l a0,d0
    312a:	|  |  |         addq.l #2,d0
    312c:	|  |  |         move.l d0,1c7a0 <CstBackDropBufferApplyCursor>
    3132:	|  |  |         move.l 92(sp),d0
    3136:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    3138:	|  |  |         movea.l 1c7a0 <CstBackDropBufferApplyCursor>,a0
    313e:	|  |  |         move.l a0,d0
    3140:	|  |  |         addq.l #2,d0
    3142:	|  |  |         move.l d0,1c7a0 <CstBackDropBufferApplyCursor>
    3148:	|  |  |         clr.w (a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    314a:	|  |  |         movea.l 1c7a0 <CstBackDropBufferApplyCursor>,a0
    3150:	|  |  |         move.l a0,d0
    3152:	|  |  |         addq.l #2,d0
    3154:	|  |  |         move.l d0,1c7a0 <CstBackDropBufferApplyCursor>
    315a:	|  |  |         move.l 100(sp),d0
    315e:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    3160:	|  |  |         movea.l 1c7a0 <CstBackDropBufferApplyCursor>,a0
    3166:	|  |  |         move.l a0,d0
    3168:	|  |  |         addq.l #2,d0
    316a:	|  |  |         move.l d0,1c7a0 <CstBackDropBufferApplyCursor>
    3170:	|  |  |         clr.w (a0)
    3172:	|  +--|-------- bra.w 36a4 <CstScaleSprite+0x8fc>
    }
  } else if(x + single->width > (int) winWidth) { //Rightmost part outside screen   
    3176:	|  |  \-------> movea.w 12(sp),a1
    317a:	|  |            movea.l 144(sp),a0
    317e:	|  |            move.l (a0),d0
    3180:	|  |            move.l a1,d1
    3182:	|  |            add.l d0,d1
    3184:	|  |            move.l 1c7b0 <winWidth>,d0
    318a:	|  |            cmp.l d1,d0
    318c:	|  |  /-------- bge.w 343c <CstScaleSprite+0x694>

    if(x - single->width > (int) winWidth)
    3190:	|  |  |         movea.w 12(sp),a1
    3194:	|  |  |         movea.l 144(sp),a0
    3198:	|  |  |         move.l (a0),d0
    319a:	|  |  |         move.l a1,d1
    319c:	|  |  |         sub.l d0,d1
    319e:	|  |  |         move.l 1c7b0 <winWidth>,d0
    31a4:	|  |  |         cmp.l d1,d0
    31a6:	|  |  |     /-- bge.s 31ba <CstScaleSprite+0x412>
    {    
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    31a8:	|  |  |     |   pea 17f63 <PutChar+0x319>
    31ae:	|  |  |     |   jsr 17176 <KPrintF>
    31b4:	|  |  |     |   addq.l #4,sp
      return;
    31b6:	+--|--|-----|-- bra.w 3892 <CstScaleSprite+0xaea>
    }
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    31ba:	|  |  |     \-> clr.w 134(sp)
    cutwordssource = (x+single->width - winWidth)/16;
    31be:	|  |  |         movea.w 12(sp),a1
    31c2:	|  |  |         movea.l 144(sp),a0
    31c6:	|  |  |         move.l (a0),d0
    31c8:	|  |  |         add.l a1,d0
    31ca:	|  |  |         move.l d0,d1
    31cc:	|  |  |         move.l 1c7b0 <winWidth>,d0
    31d2:	|  |  |         sub.l d0,d1
    31d4:	|  |  |         move.l d1,d0
    31d6:	|  |  |         lsr.l #4,d0
    31d8:	|  |  |         move.w d0,132(sp)
    cutmaskpixel = 0;
    31dc:	|  |  |         clr.w 130(sp)
    bltalwm = 0xffff; //Last word contains source data to be blit
    31e0:	|  |  |         move.w #-1,128(sp)
    bltapt = ((ULONG) mask)+ystartsrc*single->width/8;
    31e6:	|  |  |         movea.l 144(sp),a0
    31ea:	|  |  |         move.l (a0),d0
    31ec:	|  |  |         move.l 96(sp),-(sp)
    31f0:	|  |  |         move.l d0,-(sp)
    31f2:	|  |  |         jsr 17b34 <__mulsi3>
    31f8:	|  |  |         addq.l #8,sp
    31fa:	|  |  |         lsr.l #3,d0
    31fc:	|  |  |         move.l 84(sp),d1
    3200:	|  |  |         move.l d0,d2
    3202:	|  |  |         add.l d1,d2
    3204:	|  |  |         move.l d2,124(sp)
    bltbpt = (ULONG) single->data+ystartsrc*single->width/8;
    3208:	|  |  |         movea.l 144(sp),a0
    320c:	|  |  |         move.l 24(a0),d0
    3210:	|  |  |         move.l d0,d2
    3212:	|  |  |         movea.l 144(sp),a0
    3216:	|  |  |         move.l (a0),d0
    3218:	|  |  |         move.l 96(sp),-(sp)
    321c:	|  |  |         move.l d0,-(sp)
    321e:	|  |  |         jsr 17b34 <__mulsi3>
    3224:	|  |  |         addq.l #8,sp
    3226:	|  |  |         lsr.l #3,d0
    3228:	|  |  |         move.l d2,d1
    322a:	|  |  |         add.l d0,d1
    322c:	|  |  |         move.l d1,120(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    3230:	|  |  |         move.l 1c7b0 <winWidth>,d0
    3236:	|  |  |         move.l 100(sp),-(sp)
    323a:	|  |  |         move.l d0,-(sp)
    323c:	|  |  |         jsr 17b34 <__mulsi3>
    3242:	|  |  |         addq.l #8,sp
    3244:	|  |  |         lsr.l #3,d0
    3246:	|  |  |         move.l 136(sp),d1
    324a:	|  |  |         add.l d0,d1
    324c:	|  |  |         move.w 12(sp),d0
    3250:	|  |  |     /-- bpl.s 3256 <CstScaleSprite+0x4ae>
    3252:	|  |  |     |   addi.w #15,d0
    3256:	|  |  |     \-> asr.w #4,d0
    3258:	|  |  |         movea.w d0,a0
    325a:	|  |  |         move.l a0,d0
    325c:	|  |  |         add.l a0,d0
    325e:	|  |  |         move.l d1,d2
    3260:	|  |  |         add.l d0,d2
    3262:	|  |  |         move.l d2,116(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    3266:	|  |  |         move.l 1c7b0 <winWidth>,d0
    326c:	|  |  |         move.l 100(sp),-(sp)
    3270:	|  |  |         move.l d0,-(sp)
    3272:	|  |  |         jsr 17b34 <__mulsi3>
    3278:	|  |  |         addq.l #8,sp
    327a:	|  |  |         lsr.l #3,d0
    327c:	|  |  |         move.l 136(sp),d1
    3280:	|  |  |         add.l d0,d1
    3282:	|  |  |         move.w 12(sp),d0
    3286:	|  |  |     /-- bpl.s 328c <CstScaleSprite+0x4e4>
    3288:	|  |  |     |   addi.w #15,d0
    328c:	|  |  |     \-> asr.w #4,d0
    328e:	|  |  |         movea.w d0,a0
    3290:	|  |  |         move.l a0,d0
    3292:	|  |  |         add.l a0,d0
    3294:	|  |  |         move.l d1,d2
    3296:	|  |  |         add.l d0,d2
    3298:	|  |  |         move.l d2,112(sp)
    bltcon0 = 0xfca + ((single->width%16) << 12);
    329c:	|  |  |         movea.l 144(sp),a0
    32a0:	|  |  |         move.l (a0),d0
    32a2:	|  |  |         andi.l #-2147483633,d0
    32a8:	|  |  |     /-- bpl.s 32b2 <CstScaleSprite+0x50a>
    32aa:	|  |  |     |   subq.l #1,d0
    32ac:	|  |  |     |   moveq #-16,d1
    32ae:	|  |  |     |   or.l d1,d0
    32b0:	|  |  |     |   addq.l #1,d0
    32b2:	|  |  |     \-> moveq #12,d2
    32b4:	|  |  |         lsl.l d2,d0
    32b6:	|  |  |         addi.l #4042,d0
    32bc:	|  |  |         move.l d0,108(sp)
    bltcon1 = ((single->width%16) << 12);
    32c0:	|  |  |         movea.l 144(sp),a0
    32c4:	|  |  |         move.l (a0),d0
    32c6:	|  |  |         andi.l #-2147483633,d0
    32cc:	|  |  |     /-- bpl.s 32d6 <CstScaleSprite+0x52e>
    32ce:	|  |  |     |   subq.l #1,d0
    32d0:	|  |  |     |   moveq #-16,d1
    32d2:	|  |  |     |   or.l d1,d0
    32d4:	|  |  |     |   addq.l #1,d0
    32d6:	|  |  |     \-> moveq #12,d2
    32d8:	|  |  |         lsl.l d2,d0
    32da:	|  |  |         move.l d0,104(sp)
    if( destinationtype == SCREEN)
    32de:	|  |  |         cmpi.w #1,8(sp)
    32e4:	|  |  |  /----- bne.w 33ac <CstScaleSprite+0x604>
    {
      struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    32e8:	|  |  |  |      move.l 1c798 <CstCleanupQueueDrawBuffer>,64(sp)
      CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    32f0:	|  |  |  |      moveq #20,d0
    32f2:	|  |  |  |      move.l d0,60(sp)
    32f6:	|  |  |  |      clr.l 56(sp)
    32fa:	|  |  |  |      move.l 1c85c <SysBase>,d0
    3300:	|  |  |  |      movea.l d0,a6
    3302:	|  |  |  |      move.l 60(sp),d0
    3306:	|  |  |  |      move.l 56(sp),d1
    330a:	|  |  |  |      jsr -684(a6)
    330e:	|  |  |  |      move.l d0,52(sp)
    3312:	|  |  |  |      move.l 52(sp),d0
    3316:	|  |  |  |      move.l d0,1c798 <CstCleanupQueueDrawBuffer>
      CstCleanupQueueDrawBuffer->next = next;   
    331c:	|  |  |  |      movea.l 1c798 <CstCleanupQueueDrawBuffer>,a0
    3322:	|  |  |  |      move.l 64(sp),16(a0)

      CstCleanupQueueDrawBuffer->x = x;
    3328:	|  |  |  |      movea.l 1c798 <CstCleanupQueueDrawBuffer>,a0
    332e:	|  |  |  |      move.w 12(sp),d0
    3332:	|  |  |  |      move.w d0,(a0)
      CstCleanupQueueDrawBuffer->y = y;
    3334:	|  |  |  |      movea.l 1c798 <CstCleanupQueueDrawBuffer>,a0
    333a:	|  |  |  |      move.w 10(sp),d0
    333e:	|  |  |  |      move.w d0,2(a0)
      CstCleanupQueueDrawBuffer->person = person; 
    3342:	|  |  |  |      movea.l 1c798 <CstCleanupQueueDrawBuffer>,a0
    3348:	|  |  |  |      move.l 148(sp),4(a0)
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource; //Width in X Bytes
    334e:	|  |  |  |      movea.l 144(sp),a0
    3352:	|  |  |  |      move.l (a0),d0
    3354:	|  |  |  |      movea.l d0,a0
    3356:	|  |  |  |      cmpa.w #0,a0
    335a:	|  |  |  |  /-- bge.s 3360 <CstScaleSprite+0x5b8>
    335c:	|  |  |  |  |   lea 15(a0),a0
    3360:	|  |  |  |  \-> move.l a0,d0
    3362:	|  |  |  |      asr.l #4,d0
    3364:	|  |  |  |      move.l d0,d0
    3366:	|  |  |  |      movea.l 1c798 <CstCleanupQueueDrawBuffer>,a0
    336c:	|  |  |  |      add.w 132(sp),d0
    3370:	|  |  |  |      move.w d0,8(a0)
      CstCleanupQueueDrawBuffer->height =  blitheight; //Height
    3374:	|  |  |  |      movea.l 1c798 <CstCleanupQueueDrawBuffer>,a0
    337a:	|  |  |  |      move.l 92(sp),d0
    337e:	|  |  |  |      move.w d0,10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; //X Start in Bytes;
    3382:	|  |  |  |      move.w 12(sp),d0
    3386:	|  |  |  |  /-- bpl.s 338c <CstScaleSprite+0x5e4>
    3388:	|  |  |  |  |   addi.w #15,d0
    338c:	|  |  |  |  \-> asr.w #4,d0
    338e:	|  |  |  |      movea.l 1c798 <CstCleanupQueueDrawBuffer>,a0
    3394:	|  |  |  |      add.w d0,d0
    3396:	|  |  |  |      move.w d0,12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    339a:	|  |  |  |      movea.l 1c798 <CstCleanupQueueDrawBuffer>,a0
    33a0:	|  |  |  |      move.l 100(sp),d0
    33a4:	|  |  |  |      move.w d0,14(a0)
    33a8:	|  +--|--|----- bra.w 36a4 <CstScaleSprite+0x8fc>
    } else {
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource;
    33ac:	|  |  |  \----> movea.l 144(sp),a0
    33b0:	|  |  |         move.l (a0),d0
    33b2:	|  |  |         movea.l d0,a0
    33b4:	|  |  |         cmpa.w #0,a0
    33b8:	|  |  |     /-- bge.s 33be <CstScaleSprite+0x616>
    33ba:	|  |  |     |   lea 15(a0),a0
    33be:	|  |  |     \-> move.l a0,d0
    33c0:	|  |  |         asr.l #4,d0
    33c2:	|  |  |         move.l d0,d0
    33c4:	|  |  |         movea.l 1c7a0 <CstBackDropBufferApplyCursor>,a0
    33ca:	|  |  |         move.l a0,d1
    33cc:	|  |  |         addq.l #2,d1
    33ce:	|  |  |         move.l d1,1c7a0 <CstBackDropBufferApplyCursor>
    33d4:	|  |  |         add.w 132(sp),d0
    33d8:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    33da:	|  |  |         movea.l 1c7a0 <CstBackDropBufferApplyCursor>,a0
    33e0:	|  |  |         move.l a0,d0
    33e2:	|  |  |         addq.l #2,d0
    33e4:	|  |  |         move.l d0,1c7a0 <CstBackDropBufferApplyCursor>
    33ea:	|  |  |         move.l 92(sp),d0
    33ee:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = (x/16)*2;
    33f0:	|  |  |         move.w 12(sp),d0
    33f4:	|  |  |     /-- bpl.s 33fa <CstScaleSprite+0x652>
    33f6:	|  |  |     |   addi.w #15,d0
    33fa:	|  |  |     \-> asr.w #4,d0
    33fc:	|  |  |         movea.l 1c7a0 <CstBackDropBufferApplyCursor>,a0
    3402:	|  |  |         move.l a0,d1
    3404:	|  |  |         addq.l #2,d1
    3406:	|  |  |         move.l d1,1c7a0 <CstBackDropBufferApplyCursor>
    340c:	|  |  |         add.w d0,d0
    340e:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    3410:	|  |  |         movea.l 1c7a0 <CstBackDropBufferApplyCursor>,a0
    3416:	|  |  |         move.l a0,d0
    3418:	|  |  |         addq.l #2,d0
    341a:	|  |  |         move.l d0,1c7a0 <CstBackDropBufferApplyCursor>
    3420:	|  |  |         move.l 100(sp),d0
    3424:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    3426:	|  |  |         movea.l 1c7a0 <CstBackDropBufferApplyCursor>,a0
    342c:	|  |  |         move.l a0,d0
    342e:	|  |  |         addq.l #2,d0
    3430:	|  |  |         move.l d0,1c7a0 <CstBackDropBufferApplyCursor>
    3436:	|  |  |         clr.w (a0)
    3438:	|  +--|-------- bra.w 36a4 <CstScaleSprite+0x8fc>
    }
  } else { //Whole Sprite on Screen

    extrawords = 1;
    343c:	|  |  \-------> move.w #1,134(sp)
    cutwordssource = 0;
    3442:	|  |            clr.w 132(sp)
    cutmaskpixel = 0;
    3446:	|  |            clr.w 130(sp)
    bltalwm = 0; //Last Word of this channel almost masked out
    344a:	|  |            clr.w 128(sp)
    bltapt = ((ULONG) mask) +ystartsrc*single->width/8;
    344e:	|  |            movea.l 144(sp),a0
    3452:	|  |            move.l (a0),d0
    3454:	|  |            move.l 96(sp),-(sp)
    3458:	|  |            move.l d0,-(sp)
    345a:	|  |            jsr 17b34 <__mulsi3>
    3460:	|  |            addq.l #8,sp
    3462:	|  |            lsr.l #3,d0
    3464:	|  |            move.l 84(sp),d1
    3468:	|  |            move.l d0,d2
    346a:	|  |            add.l d1,d2
    346c:	|  |            move.l d2,124(sp)
    bltbpt = (ULONG) single->data+ystartsrc*single->width/8;
    3470:	|  |            movea.l 144(sp),a0
    3474:	|  |            move.l 24(a0),d0
    3478:	|  |            move.l d0,d2
    347a:	|  |            movea.l 144(sp),a0
    347e:	|  |            move.l (a0),d0
    3480:	|  |            move.l 96(sp),-(sp)
    3484:	|  |            move.l d0,-(sp)
    3486:	|  |            jsr 17b34 <__mulsi3>
    348c:	|  |            addq.l #8,sp
    348e:	|  |            lsr.l #3,d0
    3490:	|  |            move.l d2,d1
    3492:	|  |            add.l d0,d1
    3494:	|  |            move.l d1,120(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    3498:	|  |            move.l 1c7b0 <winWidth>,d0
    349e:	|  |            move.l 100(sp),-(sp)
    34a2:	|  |            move.l d0,-(sp)
    34a4:	|  |            jsr 17b34 <__mulsi3>
    34aa:	|  |            addq.l #8,sp
    34ac:	|  |            lsr.l #3,d0
    34ae:	|  |            move.l 136(sp),d1
    34b2:	|  |            add.l d0,d1
    34b4:	|  |            move.w 12(sp),d0
    34b8:	|  |        /-- bpl.s 34be <CstScaleSprite+0x716>
    34ba:	|  |        |   addi.w #15,d0
    34be:	|  |        \-> asr.w #4,d0
    34c0:	|  |            movea.w d0,a0
    34c2:	|  |            move.l a0,d0
    34c4:	|  |            add.l a0,d0
    34c6:	|  |            move.l d1,d2
    34c8:	|  |            add.l d0,d2
    34ca:	|  |            move.l d2,116(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    34ce:	|  |            move.l 1c7b0 <winWidth>,d0
    34d4:	|  |            move.l 100(sp),-(sp)
    34d8:	|  |            move.l d0,-(sp)
    34da:	|  |            jsr 17b34 <__mulsi3>
    34e0:	|  |            addq.l #8,sp
    34e2:	|  |            lsr.l #3,d0
    34e4:	|  |            move.l 136(sp),d1
    34e8:	|  |            add.l d0,d1
    34ea:	|  |            move.w 12(sp),d0
    34ee:	|  |        /-- bpl.s 34f4 <CstScaleSprite+0x74c>
    34f0:	|  |        |   addi.w #15,d0
    34f4:	|  |        \-> asr.w #4,d0
    34f6:	|  |            movea.w d0,a0
    34f8:	|  |            move.l a0,d0
    34fa:	|  |            add.l a0,d0
    34fc:	|  |            move.l d1,d2
    34fe:	|  |            add.l d0,d2
    3500:	|  |            move.l d2,112(sp)
    bltcon0 = 0xfca + ((x%16) << 12);
    3504:	|  |            move.w 12(sp),d0
    3508:	|  |            andi.w #-32753,d0
    350c:	|  |        /-- bpl.s 3516 <CstScaleSprite+0x76e>
    350e:	|  |        |   subq.w #1,d0
    3510:	|  |        |   ori.w #-16,d0
    3514:	|  |        |   addq.w #1,d0
    3516:	|  |        \-> ext.l d0
    3518:	|  |            moveq #12,d1
    351a:	|  |            lsl.l d1,d0
    351c:	|  |            addi.l #4042,d0
    3522:	|  |            move.l d0,108(sp)
    bltcon1 = ((x%16) << 12);
    3526:	|  |            move.w 12(sp),d0
    352a:	|  |            andi.w #-32753,d0
    352e:	|  |        /-- bpl.s 3538 <CstScaleSprite+0x790>
    3530:	|  |        |   subq.w #1,d0
    3532:	|  |        |   ori.w #-16,d0
    3536:	|  |        |   addq.w #1,d0
    3538:	|  |        \-> ext.l d0
    353a:	|  |            moveq #12,d2
    353c:	|  |            lsl.l d2,d0
    353e:	|  |            move.l d0,104(sp)
    if( destinationtype == SCREEN)
    3542:	|  |            cmpi.w #1,8(sp)
    3548:	|  |     /----- bne.w 3614 <CstScaleSprite+0x86c>
    {
      struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    354c:	|  |     |      move.l 1c798 <CstCleanupQueueDrawBuffer>,80(sp)
      CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    3554:	|  |     |      moveq #20,d0
    3556:	|  |     |      move.l d0,76(sp)
    355a:	|  |     |      clr.l 72(sp)
    355e:	|  |     |      move.l 1c85c <SysBase>,d0
    3564:	|  |     |      movea.l d0,a6
    3566:	|  |     |      move.l 76(sp),d0
    356a:	|  |     |      move.l 72(sp),d1
    356e:	|  |     |      jsr -684(a6)
    3572:	|  |     |      move.l d0,68(sp)
    3576:	|  |     |      move.l 68(sp),d0
    357a:	|  |     |      move.l d0,1c798 <CstCleanupQueueDrawBuffer>
      CstCleanupQueueDrawBuffer->next = next;   
    3580:	|  |     |      movea.l 1c798 <CstCleanupQueueDrawBuffer>,a0
    3586:	|  |     |      move.l 80(sp),16(a0)

      CstCleanupQueueDrawBuffer->x = x;
    358c:	|  |     |      movea.l 1c798 <CstCleanupQueueDrawBuffer>,a0
    3592:	|  |     |      move.w 12(sp),d0
    3596:	|  |     |      move.w d0,(a0)
      CstCleanupQueueDrawBuffer->y = y;
    3598:	|  |     |      movea.l 1c798 <CstCleanupQueueDrawBuffer>,a0
    359e:	|  |     |      move.w 10(sp),d0
    35a2:	|  |     |      move.w d0,2(a0)
      CstCleanupQueueDrawBuffer->person = person; 
    35a6:	|  |     |      movea.l 1c798 <CstCleanupQueueDrawBuffer>,a0
    35ac:	|  |     |      move.l 148(sp),4(a0)
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; 
    35b2:	|  |     |      movea.l 144(sp),a0
    35b6:	|  |     |      move.l (a0),d0
    35b8:	|  |     |      movea.l d0,a0
    35ba:	|  |     |      cmpa.w #0,a0
    35be:	|  |     |  /-- bge.s 35c4 <CstScaleSprite+0x81c>
    35c0:	|  |     |  |   lea 15(a0),a0
    35c4:	|  |     |  \-> move.l a0,d0
    35c6:	|  |     |      asr.l #4,d0
    35c8:	|  |     |      move.l d0,d0
    35ca:	|  |     |      add.w 132(sp),d0
    35ce:	|  |     |      movea.l 1c798 <CstCleanupQueueDrawBuffer>,a0
    35d4:	|  |     |      add.w 134(sp),d0
    35d8:	|  |     |      move.w d0,8(a0)
      CstCleanupQueueDrawBuffer->height =  blitheight; 
    35dc:	|  |     |      movea.l 1c798 <CstCleanupQueueDrawBuffer>,a0
    35e2:	|  |     |      move.l 92(sp),d0
    35e6:	|  |     |      move.w d0,10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; 
    35ea:	|  |     |      move.w 12(sp),d0
    35ee:	|  |     |  /-- bpl.s 35f4 <CstScaleSprite+0x84c>
    35f0:	|  |     |  |   addi.w #15,d0
    35f4:	|  |     |  \-> asr.w #4,d0
    35f6:	|  |     |      movea.l 1c798 <CstCleanupQueueDrawBuffer>,a0
    35fc:	|  |     |      add.w d0,d0
    35fe:	|  |     |      move.w d0,12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    3602:	|  |     |      movea.l 1c798 <CstCleanupQueueDrawBuffer>,a0
    3608:	|  |     |      move.l 100(sp),d0
    360c:	|  |     |      move.w d0,14(a0)
    3610:	|  +-----|----- bra.w 36a4 <CstScaleSprite+0x8fc>
    } else
    {
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    3614:	|  |     \----> movea.l 144(sp),a0
    3618:	|  |            move.l (a0),d0
    361a:	|  |            movea.l d0,a0
    361c:	|  |            cmpa.w #0,a0
    3620:	|  |        /-- bge.s 3626 <CstScaleSprite+0x87e>
    3622:	|  |        |   lea 15(a0),a0
    3626:	|  |        \-> move.l a0,d0
    3628:	|  |            asr.l #4,d0
    362a:	|  |            move.l d0,d0
    362c:	|  |            add.w 132(sp),d0
    3630:	|  |            movea.l 1c7a0 <CstBackDropBufferApplyCursor>,a0
    3636:	|  |            move.l a0,d1
    3638:	|  |            addq.l #2,d1
    363a:	|  |            move.l d1,1c7a0 <CstBackDropBufferApplyCursor>
    3640:	|  |            add.w 134(sp),d0
    3644:	|  |            move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    3646:	|  |            movea.l 1c7a0 <CstBackDropBufferApplyCursor>,a0
    364c:	|  |            move.l a0,d0
    364e:	|  |            addq.l #2,d0
    3650:	|  |            move.l d0,1c7a0 <CstBackDropBufferApplyCursor>
    3656:	|  |            move.l 92(sp),d0
    365a:	|  |            move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = (x/16)*2;
    365c:	|  |            move.w 12(sp),d0
    3660:	|  |        /-- bpl.s 3666 <CstScaleSprite+0x8be>
    3662:	|  |        |   addi.w #15,d0
    3666:	|  |        \-> asr.w #4,d0
    3668:	|  |            movea.l 1c7a0 <CstBackDropBufferApplyCursor>,a0
    366e:	|  |            move.l a0,d1
    3670:	|  |            addq.l #2,d1
    3672:	|  |            move.l d1,1c7a0 <CstBackDropBufferApplyCursor>
    3678:	|  |            add.w d0,d0
    367a:	|  |            move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    367c:	|  |            movea.l 1c7a0 <CstBackDropBufferApplyCursor>,a0
    3682:	|  |            move.l a0,d0
    3684:	|  |            addq.l #2,d0
    3686:	|  |            move.l d0,1c7a0 <CstBackDropBufferApplyCursor>
    368c:	|  |            move.l 100(sp),d0
    3690:	|  |            move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    3692:	|  |            movea.l 1c7a0 <CstBackDropBufferApplyCursor>,a0
    3698:	|  |            move.l a0,d0
    369a:	|  |            addq.l #2,d0
    369c:	|  |            move.l d0,1c7a0 <CstBackDropBufferApplyCursor>
    36a2:	|  |            clr.w (a0)

 /*if(person && person->samePosCount > 3) {
    return;
  }*/

  UWORD bltafwm = 0xffff >> cutmaskpixel;
    36a4:	|  \----------> moveq #0,d0
    36a6:	|               move.w 130(sp),d0
    36aa:	|               moveq #0,d1
    36ac:	|               not.w d1
    36ae:	|               asr.l d0,d1
    36b0:	|               move.w d1,34(sp)
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    36b4:	|               moveq #0,d1
    36b6:	|               move.w 132(sp),d1
    36ba:	|               moveq #0,d0
    36bc:	|               move.w 134(sp),d0
    36c0:	|               sub.l d0,d1
    36c2:	|               move.l d1,d0
    36c4:	|               add.w d0,d0
    36c6:	|               move.w d0,32(sp)
  WORD bltbmod = cutwordssource*2-(extrawords*2); //Jump to next line
    36ca:	|               moveq #0,d1
    36cc:	|               move.w 132(sp),d1
    36d0:	|               moveq #0,d0
    36d2:	|               move.w 134(sp),d0
    36d6:	|               sub.l d0,d1
    36d8:	|               move.l d1,d0
    36da:	|               add.w d0,d0
    36dc:	|               move.w d0,30(sp)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    36e0:	|               move.l 1c7b0 <winWidth>,d0
    36e6:	|               lsr.l #3,d0
    36e8:	|               move.l d0,d1
    36ea:	|               movea.l 144(sp),a0
    36ee:	|               move.l (a0),d0
    36f0:	|           /-- bpl.s 36f4 <CstScaleSprite+0x94c>
    36f2:	|           |   addq.l #7,d0
    36f4:	|           \-> asr.l #3,d0
    36f6:	|               move.l d0,d0
    36f8:	|               sub.w d0,d1
    36fa:	|               move.w 132(sp),d0
    36fe:	|               sub.w 134(sp),d0
    3702:	|               add.w d0,d0
    3704:	|               add.w d1,d0
    3706:	|               move.w d0,28(sp)
  WORD bltdmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    370a:	|               move.l 1c7b0 <winWidth>,d0
    3710:	|               lsr.l #3,d0
    3712:	|               move.l d0,d1
    3714:	|               movea.l 144(sp),a0
    3718:	|               move.l (a0),d0
    371a:	|           /-- bpl.s 371e <CstScaleSprite+0x976>
    371c:	|           |   addq.l #7,d0
    371e:	|           \-> asr.l #3,d0
    3720:	|               move.l d0,d0
    3722:	|               sub.w d0,d1
    3724:	|               move.w 132(sp),d0
    3728:	|               sub.w 134(sp),d0
    372c:	|               add.w d0,d0
    372e:	|               add.w d1,d0
    3730:	|               move.w d0,26(sp)

  volatile struct Custom *custom = (struct Custom*)0xdff000;
    3734:	|               move.l #14675968,22(sp)
  WaitBlit();
    373c:	|               move.l 1c868 <GfxBase>,d0
    3742:	|               movea.l d0,a6
    3744:	|               jsr -228(a6)

  custom->bltafwm = bltafwm;
    3748:	|               movea.l 22(sp),a0
    374c:	|               move.w 34(sp),68(a0)
  custom->bltalwm = bltalwm;
    3752:	|               movea.l 22(sp),a0
    3756:	|               move.w 128(sp),70(a0)
  custom->bltamod = bltamod;
    375c:	|               move.w 32(sp),d0
    3760:	|               movea.l 22(sp),a0
    3764:	|               move.w d0,100(a0)
  custom->bltbmod = bltbmod;
    3768:	|               move.w 30(sp),d0
    376c:	|               movea.l 22(sp),a0
    3770:	|               move.w d0,98(a0)
  custom->bltcmod = bltcmod;
    3774:	|               move.w 28(sp),d0
    3778:	|               movea.l 22(sp),a0
    377c:	|               move.w d0,96(a0)
  custom->bltdmod = bltdmod;
    3780:	|               move.w 26(sp),d0
    3784:	|               movea.l 22(sp),a0
    3788:	|               move.w d0,102(a0)
  custom->bltcon0 = bltcon0;
    378c:	|               move.l 108(sp),d0
    3790:	|               movea.l 22(sp),a0
    3794:	|               move.w d0,64(a0)
  custom->bltcon1 = bltcon1;  
    3798:	|               move.l 104(sp),d0
    379c:	|               movea.l 22(sp),a0
    37a0:	|               move.w d0,66(a0)

  UWORD bltbptplus = (single->width >> 3)*single->height;
    37a4:	|               movea.l 144(sp),a0
    37a8:	|               move.l (a0),d0
    37aa:	|               asr.l #3,d0
    37ac:	|               move.l d0,d1
    37ae:	|               movea.l 144(sp),a0
    37b2:	|               move.l 4(a0),d0
    37b6:	|               move.l d0,d0
    37b8:	|               move.w d1,d2
    37ba:	|               muls.w d0,d2
    37bc:	|               move.w d2,20(sp)
  UWORD bltcptplus = winWidth/8*winHeight;
    37c0:	|               move.l 1c7b0 <winWidth>,d0
    37c6:	|               lsr.l #3,d0
    37c8:	|               move.l d0,d1
    37ca:	|               move.l 1c7b4 <winHeight>,d0
    37d0:	|               move.l d0,d0
    37d2:	|               move.w d1,d2
    37d4:	|               muls.w d0,d2
    37d6:	|               move.w d2,18(sp)
  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    37da:	|               clr.l 88(sp)
    37de:	|        /----- bra.w 3872 <CstScaleSprite+0xaca>
  {
    custom->bltapt = (APTR) bltapt;
    37e2:	|     /--|----> move.l 124(sp),d0
    37e6:	|     |  |      movea.l 22(sp),a0
    37ea:	|     |  |      move.l d0,80(a0)
    custom->bltbpt = (APTR) bltbpt;
    37ee:	|     |  |      move.l 120(sp),d0
    37f2:	|     |  |      movea.l 22(sp),a0
    37f6:	|     |  |      move.l d0,76(a0)
    custom->bltcpt = (APTR) bltcpt;
    37fa:	|     |  |      move.l 116(sp),d0
    37fe:	|     |  |      movea.l 22(sp),a0
    3802:	|     |  |      move.l d0,72(a0)
    custom->bltdpt = (APTR) bltdpt;
    3806:	|     |  |      move.l 112(sp),d0
    380a:	|     |  |      movea.l 22(sp),a0
    380e:	|     |  |      move.l d0,84(a0)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3812:	|     |  |      move.l 92(sp),d0
    3816:	|     |  |      move.w d0,d1
    3818:	|     |  |      lsl.w #6,d1
    381a:	|     |  |      movea.l 144(sp),a0
    381e:	|     |  |      move.l (a0),d0
    3820:	|     |  |      movea.l d0,a0
    3822:	|     |  |      cmpa.w #0,a0
    3826:	|     |  |  /-- bge.s 382c <CstScaleSprite+0xa84>
    3828:	|     |  |  |   lea 15(a0),a0
    382c:	|     |  |  \-> move.l a0,d0
    382e:	|     |  |      asr.l #4,d0
    3830:	|     |  |      move.l d0,d0
    3832:	|     |  |      add.w d1,d0
    3834:	|     |  |      sub.w 132(sp),d0
    3838:	|     |  |      add.w 134(sp),d0
    383c:	|     |  |      movea.l 22(sp),a0
    3840:	|     |  |      move.w d0,88(a0)
    bltbpt += bltbptplus;
    3844:	|     |  |      moveq #0,d0
    3846:	|     |  |      move.w 20(sp),d0
    384a:	|     |  |      add.l d0,120(sp)
    bltcpt += bltcptplus;
    384e:	|     |  |      moveq #0,d0
    3850:	|     |  |      move.w 18(sp),d0
    3854:	|     |  |      add.l d0,116(sp)
    bltdpt += bltcptplus;
    3858:	|     |  |      moveq #0,d0
    385a:	|     |  |      move.w 18(sp),d0
    385e:	|     |  |      add.l d0,112(sp)
    WaitBlit();
    3862:	|     |  |      move.l 1c868 <GfxBase>,d0
    3868:	|     |  |      movea.l d0,a6
    386a:	|     |  |      jsr -228(a6)
  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    386e:	|     |  |      addq.l #1,88(sp)
    3872:	|     |  \----> moveq #4,d0
    3874:	|     |         cmp.l 88(sp),d0
    3878:	|     \-------- bge.w 37e2 <CstScaleSprite+0xa3a>
  }   

  FreeVec(mask);
    387c:	|               move.l 84(sp),14(sp)
    3882:	|               move.l 1c85c <SysBase>,d0
    3888:	|               movea.l d0,a6
    388a:	|               movea.l 14(sp),a1
    388e:	|               jsr -690(a6)
}
    3892:	\-------------> move.l (sp)+,d2
    3894:	                movea.l (sp)+,a6
    3896:	                lea 132(sp),sp
    389a:	                rts

0000389c <CstSetCl>:

void CstSetCl(UWORD *copperlist)
{
    389c:	subq.l #4,sp
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    389e:	move.l #14675968,(sp)
  custom->cop1lc = (ULONG) copperlist;
    38a4:	move.l 8(sp),d0
    38a8:	movea.l (sp),a0
    38aa:	move.l d0,128(a0)
}
    38ae:	nop
    38b0:	addq.l #4,sp
    38b2:	rts

000038b4 <CstSwapBuffer>:

void CstSwapBuffer( ) {
    38b4:	lea -20(sp),sp
  ULONG *tmp;
  tmp = CstViewBuffer;
    38b8:	move.l 1c78c <CstViewBuffer>,16(sp)
  CstViewBuffer = CstDrawBuffer;
    38c0:	move.l 1c790 <CstDrawBuffer>,d0
    38c6:	move.l d0,1c78c <CstViewBuffer>
  CstDrawBuffer = tmp;
    38cc:	move.l 16(sp),1c790 <CstDrawBuffer>

  struct CleanupQueue *tmp2 = CstCleanupQueueViewBuffer;
    38d4:	move.l 1c794 <CstCleanupQueueViewBuffer>,12(sp)
  CstCleanupQueueViewBuffer = CstCleanupQueueDrawBuffer;
    38dc:	move.l 1c798 <CstCleanupQueueDrawBuffer>,d0
    38e2:	move.l d0,1c794 <CstCleanupQueueViewBuffer>
  CstCleanupQueueDrawBuffer = tmp2;
    38e8:	move.l 12(sp),1c798 <CstCleanupQueueDrawBuffer>


  UWORD *copword = CstCopperList;
    38f0:	move.l 1c786 <CstCopperList>,8(sp)
  ULONG ptr = (ULONG) CstViewBuffer;
    38f8:	move.l 1c78c <CstViewBuffer>,d0
    38fe:	move.l d0,4(sp)
  UWORD highword = ptr >> 16;
    3902:	move.l 4(sp),d0
    3906:	clr.w d0
    3908:	swap d0
    390a:	move.w d0,2(sp)
  UWORD lowword = ptr & 0xffff;  
    390e:	move.w 6(sp),(sp)

  copword[CSTBPL1LOW] = lowword;
    3912:	movea.w #118,a0
    3916:	adda.l 8(sp),a0
    391a:	move.w (sp),(a0)
  copword[CSTBPL1HIGH] = highword;
    391c:	movea.w #114,a0
    3920:	adda.l 8(sp),a0
    3924:	move.w 2(sp),(a0)

  ptr +=  40*256;
    3928:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    3930:	move.l 4(sp),d0
    3934:	clr.w d0
    3936:	swap d0
    3938:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    393c:	move.w 6(sp),(sp)

  copword[CSTBPL2LOW] = lowword;
    3940:	movea.w #126,a0
    3944:	adda.l 8(sp),a0
    3948:	move.w (sp),(a0)
  copword[CSTBPL2HIGH] = highword;
    394a:	movea.w #122,a0
    394e:	adda.l 8(sp),a0
    3952:	move.w 2(sp),(a0)
  
  ptr +=  40*256;
    3956:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    395e:	move.l 4(sp),d0
    3962:	clr.w d0
    3964:	swap d0
    3966:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    396a:	move.w 6(sp),(sp)
  
  copword[CSTBPL3LOW] = lowword;
    396e:	movea.l 8(sp),a0
    3972:	lea 134(a0),a0
    3976:	move.w (sp),(a0)
  copword[CSTBPL3HIGH] = highword;
    3978:	movea.l 8(sp),a0
    397c:	lea 130(a0),a0
    3980:	move.w 2(sp),(a0)

  ptr +=  40*256;
    3984:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    398c:	move.l 4(sp),d0
    3990:	clr.w d0
    3992:	swap d0
    3994:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    3998:	move.w 6(sp),(sp)

  copword[CSTBPL4LOW] = lowword;
    399c:	movea.l 8(sp),a0
    39a0:	lea 142(a0),a0
    39a4:	move.w (sp),(a0)
  copword[CSTBPL4HIGH] = highword;
    39a6:	movea.l 8(sp),a0
    39aa:	lea 138(a0),a0
    39ae:	move.w 2(sp),(a0)

  ptr +=  40*256;
    39b2:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    39ba:	move.l 4(sp),d0
    39be:	clr.w d0
    39c0:	swap d0
    39c2:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    39c6:	move.w 6(sp),(sp)

  copword[CSTBPL5LOW] = lowword;
    39ca:	movea.l 8(sp),a0
    39ce:	lea 150(a0),a0
    39d2:	move.w (sp),(a0)
  copword[CSTBPL5HIGH] = highword;
    39d4:	movea.l 8(sp),a0
    39d8:	lea 146(a0),a0
    39dc:	move.w 2(sp),(a0)

}
    39e0:	nop
    39e2:	lea 20(sp),sp
    39e6:	rts

000039e8 <CstReserveBackdrop>:

BOOL CstReserveBackdrop(int width, int height) {
    39e8:	          lea -56(sp),sp
    39ec:	          move.l a6,-(sp)

 	KPrintF("CstReserveBackdrop: Begin");
    39ee:	          pea 17f96 <PutChar+0x34c>
    39f4:	          jsr 17176 <KPrintF>
    39fa:	          addq.l #4,sp

  width = width / 8;
    39fc:	          move.l 64(sp),d0
    3a00:	      /-- bpl.s 3a04 <CstReserveBackdrop+0x1c>
    3a02:	      |   addq.l #7,d0
    3a04:	      \-> asr.l #3,d0
    3a06:	          move.l d0,64(sp)

  if( width < 40) 
    3a0a:	          moveq #39,d0
    3a0c:	          cmp.l 64(sp),d0
    3a10:	      /-- blt.s 3a26 <CstReserveBackdrop+0x3e>
  {
    KPrintF("CstReserveBackdrop: Screens smaller than 320px not supported.");
    3a12:	      |   pea 17fb0 <PutChar+0x366>
    3a18:	      |   jsr 17176 <KPrintF>
    3a1e:	      |   addq.l #4,sp
    return FALSE;
    3a20:	      |   clr.w d0
    3a22:	/-----|-- bra.w 3d68 <CstReserveBackdrop+0x380>
  }  
  KPrintF("CstReserveBackdrop: Screen Okay");
    3a26:	|     \-> pea 17fee <PutChar+0x3a4>
    3a2c:	|         jsr 17176 <KPrintF>
    3a32:	|         addq.l #4,sp

  CstCopperList = CstCreateCopperlist( width);
    3a34:	|         move.l 64(sp),-(sp)
    3a38:	|         jsr fce <CstCreateCopperlist>
    3a3e:	|         addq.l #4,sp
    3a40:	|         move.l d0,1c786 <CstCopperList>
  KPrintF("CstReserveBackdrop: Copperlist created");
    3a46:	|         pea 1800e <PutChar+0x3c4>
    3a4c:	|         jsr 17176 <KPrintF>
    3a52:	|         addq.l #4,sp
  CstBackdropSizePlane = width*height;
    3a54:	|         move.l 64(sp),d1
    3a58:	|         move.l 68(sp),d0
    3a5c:	|         muls.w d1,d0
    3a5e:	|         move.w d0,1c77c <CstBackdropSizePlane>
  CstBackdropSize = CstBackdropSizePlane * 5; //Todo: Support other Bitplane Modes;  
    3a64:	|         move.w 1c77c <CstBackdropSizePlane>,d1
    3a6a:	|         move.w d1,d0
    3a6c:	|         add.w d0,d0
    3a6e:	|         add.w d0,d0
    3a70:	|         add.w d1,d0
    3a72:	|         move.w d0,1c77a <CstBackdropSize>
  

  CstBackDrop = AllocVec(CstBackdropSize,MEMF_CHIP);
    3a78:	|         move.w 1c77a <CstBackdropSize>,d0
    3a7e:	|         move.w d0,d0
    3a80:	|         andi.l #65535,d0
    3a86:	|         move.l d0,48(sp)
    3a8a:	|         moveq #2,d1
    3a8c:	|         move.l d1,44(sp)
    3a90:	|         move.l 1c85c <SysBase>,d0
    3a96:	|         movea.l d0,a6
    3a98:	|         move.l 48(sp),d0
    3a9c:	|         move.l 44(sp),d1
    3aa0:	|         jsr -684(a6)
    3aa4:	|         move.l d0,40(sp)
    3aa8:	|         move.l 40(sp),d0
    3aac:	|         move.l d0,1c77e <CstBackDrop>
  if( !CstBackDrop)
    3ab2:	|         move.l 1c77e <CstBackDrop>,d0
    3ab8:	|     /-- bne.s 3ace <CstReserveBackdrop+0xe6>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for Backdrop");
    3aba:	|     |   pea 18035 <PutChar+0x3eb>
    3ac0:	|     |   jsr 17176 <KPrintF>
    3ac6:	|     |   addq.l #4,sp
    return FALSE;  
    3ac8:	|     |   clr.w d0
    3aca:	+-----|-- bra.w 3d68 <CstReserveBackdrop+0x380>
  }
  KPrintF("CstReserveBackdrop: Backdrop reserved");
    3ace:	|     \-> pea 1806d <PutChar+0x423>
    3ad4:	|         jsr 17176 <KPrintF>
    3ada:	|         addq.l #4,sp

  //Initialize Buffer
  ULONG *cursor = (ULONG *)CstBackDrop;
    3adc:	|         move.l 1c77e <CstBackDrop>,56(sp)
  for(int i=0;i<CstBackdropSize/4;i++)
    3ae4:	|         clr.l 52(sp)
    3ae8:	|     /-- bra.s 3afe <CstReserveBackdrop+0x116>
  {
    *cursor++ = 0;
    3aea:	|  /--|-> move.l 56(sp),d0
    3aee:	|  |  |   move.l d0,d1
    3af0:	|  |  |   addq.l #4,d1
    3af2:	|  |  |   move.l d1,56(sp)
    3af6:	|  |  |   movea.l d0,a0
    3af8:	|  |  |   clr.l (a0)
  for(int i=0;i<CstBackdropSize/4;i++)
    3afa:	|  |  |   addq.l #1,52(sp)
    3afe:	|  |  \-> move.w 1c77a <CstBackdropSize>,d0
    3b04:	|  |      lsr.w #2,d0
    3b06:	|  |      move.w d0,d0
    3b08:	|  |      andi.l #65535,d0
    3b0e:	|  |      cmp.l 52(sp),d0
    3b12:	|  \----- bgt.s 3aea <CstReserveBackdrop+0x102>
  }  
  
  CstDrawBuffer = AllocVec(CstBackdropSize+width*2,MEMF_CHIP); //Some extra size for bob routine border area
    3b14:	|         move.w 1c77a <CstBackdropSize>,d0
    3b1a:	|         move.w d0,d0
    3b1c:	|         andi.l #65535,d0
    3b22:	|         move.l 64(sp),d1
    3b26:	|         add.l d1,d1
    3b28:	|         add.l d1,d0
    3b2a:	|         move.l d0,36(sp)
    3b2e:	|         moveq #2,d0
    3b30:	|         move.l d0,32(sp)
    3b34:	|         move.l 1c85c <SysBase>,d0
    3b3a:	|         movea.l d0,a6
    3b3c:	|         move.l 36(sp),d0
    3b40:	|         move.l 32(sp),d1
    3b44:	|         jsr -684(a6)
    3b48:	|         move.l d0,28(sp)
    3b4c:	|         move.l 28(sp),d0
    3b50:	|         move.l d0,1c790 <CstDrawBuffer>
  if( !CstDrawBuffer)
    3b56:	|         move.l 1c790 <CstDrawBuffer>,d0
    3b5c:	|     /-- bne.s 3b72 <CstReserveBackdrop+0x18a>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for DrawBuffer");
    3b5e:	|     |   pea 18093 <PutChar+0x449>
    3b64:	|     |   jsr 17176 <KPrintF>
    3b6a:	|     |   addq.l #4,sp
    return FALSE;  
    3b6c:	|     |   clr.w d0
    3b6e:	+-----|-- bra.w 3d68 <CstReserveBackdrop+0x380>
  }
  KPrintF("CstReserveBackdrop: DrawBuffer reserved");
    3b72:	|     \-> pea 180cd <PutChar+0x483>
    3b78:	|         jsr 17176 <KPrintF>
    3b7e:	|         addq.l #4,sp
    
  CstBackDropBufferApplyStart = AllocVec( 1000*5*2,MEMF_ANY);
    3b80:	|         move.l #10000,24(sp)
    3b88:	|         clr.l 20(sp)
    3b8c:	|         move.l 1c85c <SysBase>,d0
    3b92:	|         movea.l d0,a6
    3b94:	|         move.l 24(sp),d0
    3b98:	|         move.l 20(sp),d1
    3b9c:	|         jsr -684(a6)
    3ba0:	|         move.l d0,16(sp)
    3ba4:	|         move.l 16(sp),d0
    3ba8:	|         move.l d0,1c79c <CstBackDropBufferApplyStart>
  if( !CstBackDropBufferApplyStart)
    3bae:	|         move.l 1c79c <CstBackDropBufferApplyStart>,d0
    3bb4:	|     /-- bne.s 3bca <CstReserveBackdrop+0x1e2>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for CstBackDropBufferApplyStart");
    3bb6:	|     |   pea 180f5 <PutChar+0x4ab>
    3bbc:	|     |   jsr 17176 <KPrintF>
    3bc2:	|     |   addq.l #4,sp
    return FALSE;  
    3bc4:	|     |   clr.w d0
    3bc6:	+-----|-- bra.w 3d68 <CstReserveBackdrop+0x380>
  }
  CstBackDropBufferApplyCursor = CstBackDropBufferApplyStart;
    3bca:	|     \-> move.l 1c79c <CstBackDropBufferApplyStart>,d0
    3bd0:	|         move.l d0,1c7a0 <CstBackDropBufferApplyCursor>
  *CstBackDropBufferApplyStart = 0;
    3bd6:	|         movea.l 1c79c <CstBackDropBufferApplyStart>,a0
    3bdc:	|         clr.w (a0)

  *CstBackDropBufferApplyStart = 0;
    3bde:	|         movea.l 1c79c <CstBackDropBufferApplyStart>,a0
    3be4:	|         clr.w (a0)
  CstViewBuffer = AllocVec(CstBackdropSize+width*2,MEMF_CHIP); //Some extra size for bob routine border area
    3be6:	|         move.w 1c77a <CstBackdropSize>,d0
    3bec:	|         move.w d0,d0
    3bee:	|         andi.l #65535,d0
    3bf4:	|         move.l 64(sp),d1
    3bf8:	|         add.l d1,d1
    3bfa:	|         add.l d1,d0
    3bfc:	|         move.l d0,12(sp)
    3c00:	|         moveq #2,d1
    3c02:	|         move.l d1,8(sp)
    3c06:	|         move.l 1c85c <SysBase>,d0
    3c0c:	|         movea.l d0,a6
    3c0e:	|         move.l 12(sp),d0
    3c12:	|         move.l 8(sp),d1
    3c16:	|         jsr -684(a6)
    3c1a:	|         move.l d0,4(sp)
    3c1e:	|         move.l 4(sp),d0
    3c22:	|         move.l d0,1c78c <CstViewBuffer>
  if( !CstViewBuffer)
    3c28:	|         move.l 1c78c <CstViewBuffer>,d0
    3c2e:	|     /-- bne.s 3c44 <CstReserveBackdrop+0x25c>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for ViewBuffer");
    3c30:	|     |   pea 18140 <PutChar+0x4f6>
    3c36:	|     |   jsr 17176 <KPrintF>
    3c3c:	|     |   addq.l #4,sp
    return FALSE;  
    3c3e:	|     |   clr.w d0
    3c40:	+-----|-- bra.w 3d68 <CstReserveBackdrop+0x380>
  }
  KPrintF("CstReserveBackdrop: ViewBuffer reserved");
    3c44:	|     \-> pea 1817a <PutChar+0x530>
    3c4a:	|         jsr 17176 <KPrintF>
    3c50:	|         addq.l #4,sp
  
  CstDrawBuffer += width/4; //divide with 4 because pointer is ulong 
    3c52:	|         move.l 1c790 <CstDrawBuffer>,d1
    3c58:	|         move.l 64(sp),d0
    3c5c:	|     /-- bpl.s 3c60 <CstReserveBackdrop+0x278>
    3c5e:	|     |   addq.l #3,d0
    3c60:	|     \-> asr.l #2,d0
    3c62:	|         add.l d0,d0
    3c64:	|         add.l d0,d0
    3c66:	|         add.l d1,d0
    3c68:	|         move.l d0,1c790 <CstDrawBuffer>
  CstViewBuffer += width/4; //divide with 4 because pointer is ulong
    3c6e:	|         move.l 1c78c <CstViewBuffer>,d1
    3c74:	|         move.l 64(sp),d0
    3c78:	|     /-- bpl.s 3c7c <CstReserveBackdrop+0x294>
    3c7a:	|     |   addq.l #3,d0
    3c7c:	|     \-> asr.l #2,d0
    3c7e:	|         add.l d0,d0
    3c80:	|         add.l d0,d0
    3c82:	|         add.l d1,d0
    3c84:	|         move.l d0,1c78c <CstViewBuffer>
  

#ifdef EMULATOR
 	debug_register_bitmap(CstBackDrop, "CstBackDrop.bpl", 320, 256, 5, 0);
    3c8a:	|         move.l 1c77e <CstBackDrop>,d0
    3c90:	|         clr.l -(sp)
    3c92:	|         pea 5 <_start+0x5>
    3c96:	|         pea 100 <copyString+0x48>
    3c9a:	|         pea 140 <decodeFilename+0x28>
    3c9e:	|         pea 181a2 <PutChar+0x558>
    3ca4:	|         move.l d0,-(sp)
    3ca6:	|         jsr 1725e <debug_register_bitmap>
    3cac:	|         lea 24(sp),sp
  debug_register_bitmap(CstDrawBuffer, "drawbuffer.bpl", width*8, height, 5, 0);
    3cb0:	|         move.l 68(sp),d0
    3cb4:	|         movea.w d0,a1
    3cb6:	|         move.l 64(sp),d0
    3cba:	|         lsl.w #3,d0
    3cbc:	|         movea.w d0,a0
    3cbe:	|         move.l 1c790 <CstDrawBuffer>,d0
    3cc4:	|         clr.l -(sp)
    3cc6:	|         pea 5 <_start+0x5>
    3cca:	|         move.l a1,-(sp)
    3ccc:	|         move.l a0,-(sp)
    3cce:	|         pea 181b2 <PutChar+0x568>
    3cd4:	|         move.l d0,-(sp)
    3cd6:	|         jsr 1725e <debug_register_bitmap>
    3cdc:	|         lea 24(sp),sp
  debug_register_bitmap(CstViewBuffer, "viewbuffer.bpl", width*8, height, 5, 0);
    3ce0:	|         move.l 68(sp),d0
    3ce4:	|         movea.w d0,a1
    3ce6:	|         move.l 64(sp),d0
    3cea:	|         lsl.w #3,d0
    3cec:	|         movea.w d0,a0
    3cee:	|         move.l 1c78c <CstViewBuffer>,d0
    3cf4:	|         clr.l -(sp)
    3cf6:	|         pea 5 <_start+0x5>
    3cfa:	|         move.l a1,-(sp)
    3cfc:	|         move.l a0,-(sp)
    3cfe:	|         pea 181c1 <PutChar+0x577>
    3d04:	|         move.l d0,-(sp)
    3d06:	|         jsr 1725e <debug_register_bitmap>
    3d0c:	|         lea 24(sp),sp
#endif

  

  if( !CstCopperList || ! CstDrawBuffer || !CstViewBuffer)
    3d10:	|         move.l 1c786 <CstCopperList>,d0
    3d16:	|     /-- beq.s 3d28 <CstReserveBackdrop+0x340>
    3d18:	|     |   move.l 1c790 <CstDrawBuffer>,d0
    3d1e:	|     +-- beq.s 3d28 <CstReserveBackdrop+0x340>
    3d20:	|     |   move.l 1c78c <CstViewBuffer>,d0
    3d26:	|  /--|-- bne.s 3d3a <CstReserveBackdrop+0x352>
  {
    KPrintF("CstReserveBackdrop: Memory allocation failed");
    3d28:	|  |  \-> pea 181d0 <PutChar+0x586>
    3d2e:	|  |      jsr 17176 <KPrintF>
    3d34:	|  |      addq.l #4,sp
    return FALSE;
    3d36:	|  |      clr.w d0
    3d38:	+--|----- bra.s 3d68 <CstReserveBackdrop+0x380>
  }

  KPrintF("CstReserveBackdrop: Setting Copperlist");
    3d3a:	|  \----> pea 181fd <PutChar+0x5b3>
    3d40:	|         jsr 17176 <KPrintF>
    3d46:	|         addq.l #4,sp
  CstSetCl( CstCopperList);
    3d48:	|         move.l 1c786 <CstCopperList>,d0
    3d4e:	|         move.l d0,-(sp)
    3d50:	|         jsr 389c <CstSetCl>
    3d56:	|         addq.l #4,sp
  KPrintF("CstReserveBackdrop: Copperlist Set");
    3d58:	|         pea 18224 <PutChar+0x5da>
    3d5e:	|         jsr 17176 <KPrintF>
    3d64:	|         addq.l #4,sp
  return TRUE;
    3d66:	|         moveq #1,d0

}
    3d68:	\-------> movea.l (sp)+,a6
    3d6a:	          lea 56(sp),sp
    3d6e:	          rts

00003d70 <CstUnfreeze>:

void CstUnfreeze() {
    3d70:	       lea -24(sp),sp
    3d74:	       move.l a6,-(sp)
    3d76:	       move.l d2,-(sp)
	KPrintF("CstUnfreeze: Unfreezing Background Started");  
    3d78:	       pea 18247 <PutChar+0x5fd>
    3d7e:	       jsr 17176 <KPrintF>
    3d84:	       addq.l #4,sp

  UWORD size = winWidth/8*winHeight*5;
    3d86:	       move.l 1c7b0 <winWidth>,d0
    3d8c:	       lsr.l #3,d0
    3d8e:	       move.l d0,d1
    3d90:	       move.l 1c7b4 <winHeight>,d0
    3d96:	       move.l d0,d0
    3d98:	       muls.w d0,d1
    3d9a:	       move.w d1,d0
    3d9c:	       add.w d0,d0
    3d9e:	       add.w d0,d0
    3da0:	       move.w d0,d2
    3da2:	       add.w d1,d2
    3da4:	       move.w d2,18(sp)

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    3da8:	       move.l #14675968,14(sp)

#ifdef EMULATOR
  debug_register_bitmap(CstBackDropBackup, "BackDropBackup", winWidth, winHeight, 5, 0);
    3db0:	       move.l 1c7b4 <winHeight>,d0
    3db6:	       move.l d0,d0
    3db8:	       movea.w d0,a1
    3dba:	       move.l 1c7b0 <winWidth>,d0
    3dc0:	       move.l d0,d0
    3dc2:	       movea.w d0,a0
    3dc4:	       move.l 1c782 <CstBackDropBackup>,d0
    3dca:	       clr.l -(sp)
    3dcc:	       pea 5 <_start+0x5>
    3dd0:	       move.l a1,-(sp)
    3dd2:	       move.l a0,-(sp)
    3dd4:	       pea 17e19 <PutChar+0x1cf>
    3dda:	       move.l d0,-(sp)
    3ddc:	       jsr 1725e <debug_register_bitmap>
    3de2:	       lea 24(sp),sp
#endif  

  ULONG *src = (ULONG *) CstBackDropBackup;
    3de6:	       move.l 1c782 <CstBackDropBackup>,28(sp)
  ULONG *dst = (ULONG *) CstBackDrop;
    3dee:	       move.l 1c77e <CstBackDrop>,24(sp)
  for(int i=0;i<size/4;i++) 
    3df6:	       clr.l 20(sp)
    3dfa:	   /-- bra.s 3e20 <CstUnfreeze+0xb0>
  {
    *dst++ = *src++;
    3dfc:	/--|-> move.l 28(sp),d1
    3e00:	|  |   move.l d1,d0
    3e02:	|  |   addq.l #4,d0
    3e04:	|  |   move.l d0,28(sp)
    3e08:	|  |   move.l 24(sp),d0
    3e0c:	|  |   move.l d0,d2
    3e0e:	|  |   addq.l #4,d2
    3e10:	|  |   move.l d2,24(sp)
    3e14:	|  |   movea.l d1,a0
    3e16:	|  |   move.l (a0),d1
    3e18:	|  |   movea.l d0,a0
    3e1a:	|  |   move.l d1,(a0)
  for(int i=0;i<size/4;i++) 
    3e1c:	|  |   addq.l #1,20(sp)
    3e20:	|  \-> move.w 18(sp),d0
    3e24:	|      lsr.w #2,d0
    3e26:	|      move.w d0,d0
    3e28:	|      andi.l #65535,d0
    3e2e:	|      cmp.l 20(sp),d0
    3e32:	\----- bgt.s 3dfc <CstUnfreeze+0x8c>
  }

  CstApplyBackDropCounter = 2;
    3e34:	       move.w #2,1c78a <CstApplyBackDropCounter>

  *CstBackDropBufferApplyCursor++ = winWidth/16;
    3e3c:	       move.l 1c7b0 <winWidth>,d0
    3e42:	       lsr.l #4,d0
    3e44:	       movea.l 1c7a0 <CstBackDropBufferApplyCursor>,a0
    3e4a:	       move.l a0,d1
    3e4c:	       addq.l #2,d1
    3e4e:	       move.l d1,1c7a0 <CstBackDropBufferApplyCursor>
    3e54:	       move.l d0,d0
    3e56:	       move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = winHeight;
    3e58:	       move.l 1c7b4 <winHeight>,d0
    3e5e:	       movea.l 1c7a0 <CstBackDropBufferApplyCursor>,a0
    3e64:	       move.l a0,d1
    3e66:	       addq.l #2,d1
    3e68:	       move.l d1,1c7a0 <CstBackDropBufferApplyCursor>
    3e6e:	       move.l d0,d0
    3e70:	       move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = 0;
    3e72:	       movea.l 1c7a0 <CstBackDropBufferApplyCursor>,a0
    3e78:	       move.l a0,d0
    3e7a:	       addq.l #2,d0
    3e7c:	       move.l d0,1c7a0 <CstBackDropBufferApplyCursor>
    3e82:	       clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    3e84:	       movea.l 1c7a0 <CstBackDropBufferApplyCursor>,a0
    3e8a:	       move.l a0,d0
    3e8c:	       addq.l #2,d0
    3e8e:	       move.l d0,1c7a0 <CstBackDropBufferApplyCursor>
    3e94:	       clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    3e96:	       movea.l 1c7a0 <CstBackDropBufferApplyCursor>,a0
    3e9c:	       move.l a0,d0
    3e9e:	       addq.l #2,d0
    3ea0:	       move.l d0,1c7a0 <CstBackDropBufferApplyCursor>
    3ea6:	       clr.w (a0)
  
  if( !CstBackDropBackup) {
    3ea8:	       move.l 1c782 <CstBackDropBackup>,d0
    3eae:	   /-- bne.s 3ec8 <CstUnfreeze+0x158>
    FreeVec( CstBackDropBackup);
    3eb0:	   |   move.l 1c782 <CstBackDropBackup>,10(sp)
    3eb8:	   |   move.l 1c85c <SysBase>,d0
    3ebe:	   |   movea.l d0,a6
    3ec0:	   |   movea.l 10(sp),a1
    3ec4:	   |   jsr -690(a6)
  }

  KPrintF("CstFreeze: Finished");
    3ec8:	   \-> pea 17e28 <PutChar+0x1de>
    3ece:	       jsr 17176 <KPrintF>
    3ed4:	       addq.l #4,sp

}
    3ed6:	       nop
    3ed8:	       move.l (sp)+,d2
    3eda:	       movea.l (sp)+,a6
    3edc:	       lea 24(sp),sp
    3ee0:	       rts

00003ee2 <drawLine>:
#include "support/gcc8_c_support.h"
#include "line.h"

extern int sceneWidth, sceneHeight;

void drawLine(int x1, int y1, int x2, int y2) {
    3ee2:	       lea -20(sp),sp
	int x, y;
	BOOL backwards = FALSE;
    3ee6:	       clr.w 10(sp)
	
	if (x1 < 0)  x1 = 0;
    3eea:	       tst.l 24(sp)
    3eee:	   /-- bge.s 3ef4 <drawLine+0x12>
    3ef0:	   |   clr.l 24(sp)
	if (y1 < 0)  y1 = 0;
    3ef4:	   \-> tst.l 28(sp)
    3ef8:	   /-- bge.s 3efe <drawLine+0x1c>
    3efa:	   |   clr.l 28(sp)
	if (x2 < 0)  x2 = 0;
    3efe:	   \-> tst.l 32(sp)
    3f02:	   /-- bge.s 3f08 <drawLine+0x26>
    3f04:	   |   clr.l 32(sp)
	if (y2 < 0)  y2 = 0;
    3f08:	   \-> tst.l 36(sp)
    3f0c:	   /-- bge.s 3f12 <drawLine+0x30>
    3f0e:	   |   clr.l 36(sp)
	if (x1 > sceneWidth) x1 = sceneWidth - 1;
    3f12:	   \-> move.l 1c8f8 <sceneWidth>,d0
    3f18:	       cmp.l 24(sp),d0
    3f1c:	   /-- bge.s 3f2c <drawLine+0x4a>
    3f1e:	   |   move.l 1c8f8 <sceneWidth>,d0
    3f24:	   |   move.l d0,d1
    3f26:	   |   subq.l #1,d1
    3f28:	   |   move.l d1,24(sp)
	if (x2 > sceneWidth) x2 = sceneWidth - 1;
    3f2c:	   \-> move.l 1c8f8 <sceneWidth>,d0
    3f32:	       cmp.l 32(sp),d0
    3f36:	   /-- bge.s 3f46 <drawLine+0x64>
    3f38:	   |   move.l 1c8f8 <sceneWidth>,d0
    3f3e:	   |   move.l d0,d1
    3f40:	   |   subq.l #1,d1
    3f42:	   |   move.l d1,32(sp)
	if (y1 > sceneHeight) y1 = sceneHeight - 1;
    3f46:	   \-> move.l 1c8fc <sceneHeight>,d0
    3f4c:	       cmp.l 28(sp),d0
    3f50:	   /-- bge.s 3f60 <drawLine+0x7e>
    3f52:	   |   move.l 1c8fc <sceneHeight>,d0
    3f58:	   |   move.l d0,d1
    3f5a:	   |   subq.l #1,d1
    3f5c:	   |   move.l d1,28(sp)
	if (y2 > sceneHeight) y2 = sceneHeight - 1;
    3f60:	   \-> move.l 1c8fc <sceneHeight>,d0
    3f66:	       cmp.l 36(sp),d0
    3f6a:	   /-- bge.s 3f7a <drawLine+0x98>
    3f6c:	   |   move.l 1c8fc <sceneHeight>,d0
    3f72:	   |   move.l d0,d1
    3f74:	   |   subq.l #1,d1
    3f76:	   |   move.l d1,36(sp)

	if (x1 > x2) {
    3f7a:	   \-> move.l 24(sp),d0
    3f7e:	       cmp.l 32(sp),d0
    3f82:	/----- ble.s 3f9e <drawLine+0xbc>
		x = x2; 
    3f84:	|      move.l 32(sp),16(sp)
		backwards = !backwards;
    3f8a:	|      tst.w 10(sp)
    3f8e:	|      seq d0
    3f90:	|      neg.b d0
    3f92:	|      move.b d0,d0
    3f94:	|      andi.w #255,d0
    3f98:	|      move.w d0,10(sp)
    3f9c:	|  /-- bra.s 3fa4 <drawLine+0xc2>
	} else x = x1;
    3f9e:	\--|-> move.l 24(sp),16(sp)
		
	if (y1 > y2) {
    3fa4:	   \-> move.l 28(sp),d1
    3fa8:	       cmp.l 36(sp),d1
    3fac:	/----- ble.s 3fc8 <drawLine+0xe6>
		y = y2; 
    3fae:	|      move.l 36(sp),12(sp)
		backwards = !backwards;
    3fb4:	|      tst.w 10(sp)
    3fb8:	|      seq d0
    3fba:	|      neg.b d0
    3fbc:	|      move.b d0,d0
    3fbe:	|      andi.w #255,d0
    3fc2:	|      move.w d0,10(sp)
    3fc6:	|  /-- bra.s 3fce <drawLine+0xec>
	} else y = y1;	
    3fc8:	\--|-> move.l 28(sp),12(sp)
	
	int diffX = x2-x1;
    3fce:	   \-> move.l 32(sp),d0
    3fd2:	       sub.l 24(sp),d0
    3fd6:	       move.l d0,6(sp)
    diffX = diffX < 0 ? diffX * -1 : diffX;
    3fda:	       move.l 6(sp),d0
    3fde:	   /-- bpl.s 3fe2 <drawLine+0x100>
    3fe0:	   |   neg.l d0
    3fe2:	   \-> move.l d0,6(sp)
	int diffY = y2-y1;	
    3fe6:	       move.l 36(sp),d1
    3fea:	       sub.l 28(sp),d1
    3fee:	       move.l d1,2(sp)
    diffY = diffY < 0 ? diffY * -1 : diffY;
    3ff2:	       move.l 2(sp),d0
    3ff6:	   /-- bpl.s 3ffa <drawLine+0x118>
    3ff8:	   |   neg.l d0
    3ffa:	   \-> move.l d0,2(sp)
	
	if (! diffX) {
    3ffe:	       tst.l 6(sp)
    4002:	   /-- bne.s 4026 <drawLine+0x144>
		diffX = 1;
    4004:	   |   moveq #1,d0
    4006:	   |   move.l d0,6(sp)
		if (x == sceneWidth - 1) x = sceneWidth -2;
    400a:	   |   move.l 1c8f8 <sceneWidth>,d0
    4010:	   |   subq.l #1,d0
    4012:	   |   cmp.l 16(sp),d0
    4016:	   +-- bne.s 4026 <drawLine+0x144>
    4018:	   |   move.l 1c8f8 <sceneWidth>,d0
    401e:	   |   move.l d0,d1
    4020:	   |   subq.l #2,d1
    4022:	   |   move.l d1,16(sp)
	}
	if (! diffY) {
    4026:	   \-> tst.l 2(sp)
    402a:	   /-- bne.s 404e <drawLine+0x16c>
		diffY = 1;
    402c:	   |   moveq #1,d0
    402e:	   |   move.l d0,2(sp)
		if (y == sceneHeight - 1) y = sceneHeight -2;
    4032:	   |   move.l 1c8fc <sceneHeight>,d0
    4038:	   |   subq.l #1,d0
    403a:	   |   cmp.l 12(sp),d0
    403e:	   +-- bne.s 404e <drawLine+0x16c>
    4040:	   |   move.l 1c8fc <sceneHeight>,d0
    4046:	   |   move.l d0,d1
    4048:	   |   subq.l #2,d1
    404a:	   |   move.l d1,12(sp)
	}

    KPrintF("drawLine: Not implemented on Amiga"); //Amiga Todo: Implement 	
    404e:	   \-> pea 18272 <PutChar+0x628>
    4054:	       jsr 17176 <KPrintF>
    405a:	       addq.l #4,sp
	
}
    405c:	       nop
    405e:	       lea 20(sp),sp
    4062:	       rts

00004064 <deleteTextures>:
extern int specialSettings;
struct textureList *firstTexture = NULL;
BOOL NPOT_textures = TRUE;

void deleteTextures(unsigned int n,  unsigned int * textures)
{
    4064:	                      lea -24(sp),sp
    4068:	                      move.l a6,-(sp)
	if (firstTexture == NULL) {
    406a:	                      move.l 1c7b8 <firstTexture>,d0
    4070:	/-------------------- beq.w 414e <deleteTextures+0xea>
		//debugOut("Deleting texture while list is already empty.\n");
	} else {
		for (unsigned int i = 0; i < n; i++) {
    4074:	|                     clr.l 24(sp)
    4078:	|     /-------------- bra.w 4142 <deleteTextures+0xde>
			BOOL found = FALSE;
    407c:	|  /--|-------------> clr.w 18(sp)
			struct textureList *list = firstTexture;
    4080:	|  |  |               move.l 1c7b8 <firstTexture>,20(sp)
			if (list->name == textures[i]) {
    4088:	|  |  |               movea.l 20(sp),a0
    408c:	|  |  |               move.l (a0),d1
    408e:	|  |  |               move.l 24(sp),d0
    4092:	|  |  |               add.l d0,d0
    4094:	|  |  |               add.l d0,d0
    4096:	|  |  |               movea.l 36(sp),a0
    409a:	|  |  |               adda.l d0,a0
    409c:	|  |  |               move.l (a0),d0
    409e:	|  |  |               cmp.l d1,d0
    40a0:	|  |  |  /----------- bne.w 4134 <deleteTextures+0xd0>
				found = TRUE;
    40a4:	|  |  |  |            move.w #1,18(sp)
				firstTexture = list->next;
    40aa:	|  |  |  |            movea.l 20(sp),a0
    40ae:	|  |  |  |            move.l 12(a0),d0
    40b2:	|  |  |  |            move.l d0,1c7b8 <firstTexture>
				FreeVec(list);
    40b8:	|  |  |  |            move.l 20(sp),6(sp)
    40be:	|  |  |  |            move.l 1c85c <SysBase>,d0
    40c4:	|  |  |  |            movea.l d0,a6
    40c6:	|  |  |  |            movea.l 6(sp),a1
    40ca:	|  |  |  |            jsr -690(a6)
				continue;
    40ce:	|  |  |  |  /-------- bra.s 413e <deleteTextures+0xda>
			}

			while (list->next) {
				if (list->next->name == textures[i]) {
    40d0:	|  |  |  |  |  /----> movea.l 20(sp),a0
    40d4:	|  |  |  |  |  |      movea.l 12(a0),a0
    40d8:	|  |  |  |  |  |      move.l (a0),d1
    40da:	|  |  |  |  |  |      move.l 24(sp),d0
    40de:	|  |  |  |  |  |      add.l d0,d0
    40e0:	|  |  |  |  |  |      add.l d0,d0
    40e2:	|  |  |  |  |  |      movea.l 36(sp),a0
    40e6:	|  |  |  |  |  |      adda.l d0,a0
    40e8:	|  |  |  |  |  |      move.l (a0),d0
    40ea:	|  |  |  |  |  |      cmp.l d1,d0
    40ec:	|  |  |  |  |  |  /-- bne.s 412a <deleteTextures+0xc6>
					found = TRUE;
    40ee:	|  |  |  |  |  |  |   move.w #1,18(sp)
					struct textureList *deleteMe = list->next;
    40f4:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    40f8:	|  |  |  |  |  |  |   move.l 12(a0),14(sp)
					list->next = list->next->next;
    40fe:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    4102:	|  |  |  |  |  |  |   movea.l 12(a0),a0
    4106:	|  |  |  |  |  |  |   move.l 12(a0),d0
    410a:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    410e:	|  |  |  |  |  |  |   move.l d0,12(a0)
					FreeVec(deleteMe);
    4112:	|  |  |  |  |  |  |   move.l 14(sp),10(sp)
    4118:	|  |  |  |  |  |  |   move.l 1c85c <SysBase>,d0
    411e:	|  |  |  |  |  |  |   movea.l d0,a6
    4120:	|  |  |  |  |  |  |   movea.l 10(sp),a1
    4124:	|  |  |  |  |  |  |   jsr -690(a6)
					break;
    4128:	|  |  |  |  +--|--|-- bra.s 413e <deleteTextures+0xda>
				}
				list = list->next;
    412a:	|  |  |  |  |  |  \-> movea.l 20(sp),a0
    412e:	|  |  |  |  |  |      move.l 12(a0),20(sp)
			while (list->next) {
    4134:	|  |  |  \--|--|----> movea.l 20(sp),a0
    4138:	|  |  |     |  |      move.l 12(a0),d0
    413c:	|  |  |     |  \----- bne.s 40d0 <deleteTextures+0x6c>
		for (unsigned int i = 0; i < n; i++) {
    413e:	|  |  |     \-------> addq.l #1,24(sp)
    4142:	|  |  \-------------> move.l 24(sp),d0
    4146:	|  |                  cmp.l 32(sp),d0
    414a:	|  \----------------- bcs.w 407c <deleteTextures+0x18>
			}
		}
	}
}
    414e:	\-------------------> nop
    4150:	                      movea.l (sp)+,a6
    4152:	                      lea 24(sp),sp
    4156:	                      rts

00004158 <setGraphicsWindow>:

void setGraphicsWindow(BOOL fullscreen) {
    4158:	subq.l #4,sp
    415a:	move.l 8(sp),d0
    415e:	move.w d0,d0
    4160:	move.w d0,2(sp)
	KPrintF("setGraphicsWindow: Not implemented on Amiga yet"); //TODO
    4164:	pea 18295 <PutChar+0x64b>
    416a:	jsr 17176 <KPrintF>
    4170:	addq.l #4,sp
}
    4172:	nop
    4174:	addq.l #4,sp
    4176:	rts

00004178 <resourceNameFromNum>:

extern int numResourceNames /* = 0*/;
extern char * * allResourceNames /*= NULL*/;

const char * resourceNameFromNum (int i) {
	if (i == -1) return NULL;
    4178:	       moveq #-1,d0
    417a:	       cmp.l 4(sp),d0
    417e:	   /-- bne.s 4184 <resourceNameFromNum+0xc>
    4180:	   |   moveq #0,d0
    4182:	/--|-- bra.s 41bc <resourceNameFromNum+0x44>
	if (numResourceNames == 0) return "RESOURCE";
    4184:	|  \-> move.l 1c838 <numResourceNames>,d0
    418a:	|  /-- bne.s 4194 <resourceNameFromNum+0x1c>
    418c:	|  |   move.l #99013,d0
    4192:	+--|-- bra.s 41bc <resourceNameFromNum+0x44>
	if (i < numResourceNames) return allResourceNames[i];
    4194:	|  \-> move.l 1c838 <numResourceNames>,d0
    419a:	|      cmp.l 4(sp),d0
    419e:	|  /-- ble.s 41b6 <resourceNameFromNum+0x3e>
    41a0:	|  |   move.l 1c7f0 <allResourceNames>,d1
    41a6:	|  |   move.l 4(sp),d0
    41aa:	|  |   add.l d0,d0
    41ac:	|  |   add.l d0,d0
    41ae:	|  |   movea.l d1,a0
    41b0:	|  |   adda.l d0,a0
    41b2:	|  |   move.l (a0),d0
    41b4:	+--|-- bra.s 41bc <resourceNameFromNum+0x44>
	return "Unknown resource";
    41b6:	|  \-> move.l #99022,d0
    41bc:	\----> rts

000041be <main_sludge>:
char * gamePath = NULL;
char *bundleFolder;
int weAreDoneSoQuit;

int main_sludge(int argc, char *argv[])
{
    41be:	          lea -44(sp),sp
    41c2:	          movem.l d2-d3/a6,-(sp)
	/* Dimensions of our window. */
	//AMIGA TODO: Maybe remove as there will be no windowed mode
    winWidth = 320;
    41c6:	          move.l #320,1c7b0 <winWidth>
    winHeight = 256;
    41d0:	          move.l #256,1c7b4 <winHeight>

	char * sludgeFile;

	if(argc == 0) {
    41da:	          tst.l 60(sp)
    41de:	      /-- bne.s 41f6 <main_sludge+0x38>
		bundleFolder = copyString("game/");
    41e0:	      |   pea 182df <PutChar+0x695>
    41e6:	      |   jsr b8 <copyString>
    41ec:	      |   addq.l #4,sp
    41ee:	      |   move.l d0,1c7c8 <bundleFolder>
    41f4:	   /--|-- bra.s 420c <main_sludge+0x4e>
	} else {
		bundleFolder = copyString(argv[0]);
    41f6:	   |  \-> movea.l 64(sp),a0
    41fa:	   |      move.l (a0),d0
    41fc:	   |      move.l d0,-(sp)
    41fe:	   |      jsr b8 <copyString>
    4204:	   |      addq.l #4,sp
    4206:	   |      move.l d0,1c7c8 <bundleFolder>
	}
    
	int lastSlash = -1;
    420c:	   \----> moveq #-1,d0
    420e:	          move.l d0,48(sp)
	for (int i = 0; bundleFolder[i]; i ++) {
    4212:	          clr.l 44(sp)
    4216:	   /----- bra.s 4238 <main_sludge+0x7a>
		if (bundleFolder[i] == PATHSLASH) lastSlash = i;
    4218:	/--|----> move.l 1c7c8 <bundleFolder>,d1
    421e:	|  |      move.l 44(sp),d0
    4222:	|  |      movea.l d1,a0
    4224:	|  |      adda.l d0,a0
    4226:	|  |      move.b (a0),d0
    4228:	|  |      cmpi.b #47,d0
    422c:	|  |  /-- bne.s 4234 <main_sludge+0x76>
    422e:	|  |  |   move.l 44(sp),48(sp)
	for (int i = 0; bundleFolder[i]; i ++) {
    4234:	|  |  \-> addq.l #1,44(sp)
    4238:	|  \----> move.l 1c7c8 <bundleFolder>,d1
    423e:	|         move.l 44(sp),d0
    4242:	|         movea.l d1,a0
    4244:	|         adda.l d0,a0
    4246:	|         move.b (a0),d0
    4248:	\-------- bne.s 4218 <main_sludge+0x5a>
	}
	bundleFolder[lastSlash+1] = NULL;
    424a:	          move.l 1c7c8 <bundleFolder>,d0
    4250:	          move.l 48(sp),d1
    4254:	          addq.l #1,d1
    4256:	          movea.l d0,a0
    4258:	          adda.l d1,a0
    425a:	          clr.b (a0)

	if (argc > 1) {
    425c:	          moveq #1,d0
    425e:	          cmp.l 60(sp),d0
    4262:	      /-- bge.s 427e <main_sludge+0xc0>
		sludgeFile = argv[argc - 1];
    4264:	      |   move.l 60(sp),d0
    4268:	      |   addi.l #1073741823,d0
    426e:	      |   add.l d0,d0
    4270:	      |   add.l d0,d0
    4272:	      |   movea.l 64(sp),a0
    4276:	      |   adda.l d0,a0
    4278:	      |   move.l (a0),52(sp)
    427c:	   /--|-- bra.s 42d8 <main_sludge+0x11a>
	} else {
		sludgeFile = joinStrings (bundleFolder, "gamedata.slg");
    427e:	   |  \-> move.l 1c7c8 <bundleFolder>,d0
    4284:	   |      pea 182e5 <PutChar+0x69b>
    428a:	   |      move.l d0,-(sp)
    428c:	   |      jsr 13c7a <joinStrings>
    4292:	   |      addq.l #8,sp
    4294:	   |      move.l d0,52(sp)
		if (! ( fileExists (sludgeFile) ) ) {
    4298:	   |      move.l 52(sp),-(sp)
    429c:	   |      jsr 13b74 <fileExists>
    42a2:	   |      addq.l #4,sp
    42a4:	   |      tst.b d0
    42a6:	   +----- bne.s 42d8 <main_sludge+0x11a>
			FreeVec(sludgeFile);
    42a8:	   |      move.l 52(sp),40(sp)
    42ae:	   |      move.l 1c85c <SysBase>,d0
    42b4:	   |      movea.l d0,a6
    42b6:	   |      movea.l 40(sp),a1
    42ba:	   |      jsr -690(a6)
			sludgeFile = joinStrings (bundleFolder, "gamedata");			
    42be:	   |      move.l 1c7c8 <bundleFolder>,d0
    42c4:	   |      pea 182f2 <PutChar+0x6a8>
    42ca:	   |      move.l d0,-(sp)
    42cc:	   |      jsr 13c7a <joinStrings>
    42d2:	   |      addq.l #8,sp
    42d4:	   |      move.l d0,52(sp)
	//AMIGA TODO: Show arguments
	/*if (! parseCmdlineParameters(argc, argv) && !(sludgeFile) ) {
		printCmdlineUsage();
		return 0;
	}*/
	KPrintF("Game file not found.\n");
    42d8:	   \----> pea 182fb <PutChar+0x6b1>
    42de:	          jsr 17176 <KPrintF>
    42e4:	          addq.l #4,sp
	if (! fileExists(sludgeFile) ) {	
    42e6:	          move.l 52(sp),-(sp)
    42ea:	          jsr 13b74 <fileExists>
    42f0:	          addq.l #4,sp
    42f2:	          tst.b d0
    42f4:	      /-- bne.s 434c <main_sludge+0x18e>
		Write(Output(), (APTR)"Game file not found.\n", 21);
    42f6:	      |   move.l 1c864 <DOSBase>,d0
    42fc:	      |   movea.l d0,a6
    42fe:	      |   jsr -60(a6)
    4302:	      |   move.l d0,28(sp)
    4306:	      |   move.l 28(sp),d0
    430a:	      |   move.l d0,24(sp)
    430e:	      |   move.l #99067,20(sp)
    4316:	      |   moveq #21,d0
    4318:	      |   move.l d0,16(sp)
    431c:	      |   move.l 1c864 <DOSBase>,d0
    4322:	      |   movea.l d0,a6
    4324:	      |   move.l 24(sp),d1
    4328:	      |   move.l 20(sp),d2
    432c:	      |   move.l 16(sp),d3
    4330:	      |   jsr -48(a6)
    4334:	      |   move.l d0,12(sp)
		KPrintF("Game file not found.\n");
    4338:	      |   pea 182fb <PutChar+0x6b1>
    433e:	      |   jsr 17176 <KPrintF>
    4344:	      |   addq.l #4,sp
		//AMIGA TODO: Show arguments
		//printCmdlineUsage();
		return 0;
    4346:	      |   moveq #0,d0
    4348:	/-----|-- bra.w 4544 <main_sludge+0x386>
	}

	KPrintF("Setgamefilepath\n");
    434c:	|     \-> pea 18311 <PutChar+0x6c7>
    4352:	|         jsr 17176 <KPrintF>
    4358:	|         addq.l #4,sp
	setGameFilePath (sludgeFile);	
    435a:	|         move.l 52(sp),-(sp)
    435e:	|         jsr 454e <setGameFilePath>
    4364:	|         addq.l #4,sp
	if (! initSludge (sludgeFile)) return 0;
    4366:	|         move.l 52(sp),-(sp)
    436a:	|         jsr 5afc <initSludge>
    4370:	|         addq.l #4,sp
    4372:	|         tst.w d0
    4374:	|     /-- bne.s 437c <main_sludge+0x1be>
    4376:	|     |   moveq #0,d0
    4378:	+-----|-- bra.w 4544 <main_sludge+0x386>
	
	if( winWidth != 320 || winHeight != 256) {
    437c:	|     \-> move.l 1c7b0 <winWidth>,d0
    4382:	|         cmpi.l #320,d0
    4388:	|     /-- bne.s 4398 <main_sludge+0x1da>
    438a:	|     |   move.l 1c7b4 <winHeight>,d0
    4390:	|     |   cmpi.l #256,d0
    4396:	|  /--|-- beq.s 43ba <main_sludge+0x1fc>
		KPrintF("This Screen Format is currently unsupported on Amiga. Only PAL Lowres supported atm. winWidth and winHeight will be reseted.");	
    4398:	|  |  \-> pea 18322 <PutChar+0x6d8>
    439e:	|  |      jsr 17176 <KPrintF>
    43a4:	|  |      addq.l #4,sp
		winWidth = 320;
    43a6:	|  |      move.l #320,1c7b0 <winWidth>
		winHeight = 256;
    43b0:	|  |      move.l #256,1c7b4 <winHeight>
	}

	KPrintF("Resizing Backdrop\n");
    43ba:	|  \----> pea 1839f <PutChar+0x755>
    43c0:	|         jsr 17176 <KPrintF>
    43c6:	|         addq.l #4,sp
	if (! resizeBackdrop (winWidth, winHeight)) {
    43c8:	|         move.l 1c7b4 <winHeight>,d0
    43ce:	|         move.l d0,d1
    43d0:	|         move.l 1c7b0 <winWidth>,d0
    43d6:	|         move.l d1,-(sp)
    43d8:	|         move.l d0,-(sp)
    43da:	|         jsr d396 <resizeBackdrop>
    43e0:	|         addq.l #8,sp
    43e2:	|         tst.w d0
    43e4:	|     /-- bne.s 43fa <main_sludge+0x23c>
		KPrintF("Couldn't allocate memory for backdrop");
    43e6:	|     |   pea 183b2 <PutChar+0x768>
    43ec:	|     |   jsr 17176 <KPrintF>
    43f2:	|     |   addq.l #4,sp
		return FALSE;
    43f4:	|     |   moveq #0,d0
    43f6:	+-----|-- bra.w 4544 <main_sludge+0x386>
	}

	KPrintF("Init People\n");
    43fa:	|     \-> pea 183d8 <PutChar+0x78e>
    4400:	|         jsr 17176 <KPrintF>
    4406:	|         addq.l #4,sp
	if (! initPeople ())
    4408:	|         jsr a982 <initPeople>
    440e:	|         tst.w d0
    4410:	|     /-- bne.s 4426 <main_sludge+0x268>
	{
		KPrintF("Couldn't initialise people stuff");
    4412:	|     |   pea 183e5 <PutChar+0x79b>
    4418:	|     |   jsr 17176 <KPrintF>
    441e:	|     |   addq.l #4,sp
		return FALSE;
    4420:	|     |   moveq #0,d0
    4422:	+-----|-- bra.w 4544 <main_sludge+0x386>
	}

	KPrintF("Init Floor\n");
    4426:	|     \-> pea 18406 <PutChar+0x7bc>
    442c:	|         jsr 17176 <KPrintF>
    4432:	|         addq.l #4,sp
	if (! initFloor ())
    4434:	|         jsr 1652c <initFloor>
    443a:	|         tst.w d0
    443c:	|     /-- bne.s 4452 <main_sludge+0x294>
	{
		KPrintF("Couldn't initialise floor stuff");
    443e:	|     |   pea 18412 <PutChar+0x7c8>
    4444:	|     |   jsr 17176 <KPrintF>
    444a:	|     |   addq.l #4,sp
		
		return FALSE;
    444c:	|     |   moveq #0,d0
    444e:	+-----|-- bra.w 4544 <main_sludge+0x386>
	}

	KPrintF("Init Objecttype\n");
    4452:	|     \-> pea 18432 <PutChar+0x7e8>
    4458:	|         jsr 17176 <KPrintF>
    445e:	|         addq.l #4,sp
	if (! initObjectTypes ())
    4460:	|         jsr d552 <initObjectTypes>
    4466:	|         tst.w d0
    4468:	|     /-- bne.s 447e <main_sludge+0x2c0>
	{
		KPrintF("Couldn't initialise object type stuff");
    446a:	|     |   pea 18443 <PutChar+0x7f9>
    4470:	|     |   jsr 17176 <KPrintF>
    4476:	|     |   addq.l #4,sp
		return FALSE;
    4478:	|     |   moveq #0,d0
    447a:	+-----|-- bra.w 4544 <main_sludge+0x386>
	}

	KPrintF("Init speech\n");
    447e:	|     \-> pea 18469 <PutChar+0x81f>
    4484:	|         jsr 17176 <KPrintF>
    448a:	|         addq.l #4,sp
	initSpeech ();
    448c:	|         jsr 7f1e <initSpeech>
	KPrintF("Init status bar\n");
    4492:	|         pea 18476 <PutChar+0x82c>
    4498:	|         jsr 17176 <KPrintF>
    449e:	|         addq.l #4,sp
	initStatusBar ();
    44a0:	|         jsr 79e2 <initStatusBar>

	KPrintF("Get numbered string\n");
    44a6:	|         pea 18487 <PutChar+0x83d>
    44ac:	|         jsr 17176 <KPrintF>
    44b2:	|         addq.l #4,sp
	gameName = getNumberedString(1);
    44b4:	|         pea 1 <_start+0x1>
    44b8:	|         jsr 6cf2 <getNumberedString>
    44be:	|         addq.l #4,sp
    44c0:	|         move.l d0,1c7c0 <gameName>
	//initSoundStuff (hMainWindow); Todo Amiga: Maybe move soundstuff here
	KPrintF("Start new function num\n");
    44c6:	|         pea 1849c <PutChar+0x852>
    44cc:	|         jsr 17176 <KPrintF>
    44d2:	|         addq.l #4,sp
	startNewFunctionNum (0, 0, NULL, noStack, TRUE);
    44d4:	|         move.l 1c82c <noStack>,d0
    44da:	|         pea 1 <_start+0x1>
    44de:	|         move.l d0,-(sp)
    44e0:	|         clr.l -(sp)
    44e2:	|         clr.l -(sp)
    44e4:	|         clr.l -(sp)
    44e6:	|         jsr 6b48 <startNewFunctionNum>
    44ec:	|         lea 20(sp),sp

	KPrintF("Starting main loop");
    44f0:	|         pea 184b4 <PutChar+0x86a>
    44f6:	|         jsr 17176 <KPrintF>
    44fc:	|         addq.l #4,sp

	volatile struct Custom *custom = (struct Custom*)0xdff000;
    44fe:	|         move.l #14675968,36(sp)
	weAreDoneSoQuit = 0;
    4506:	|         clr.l 1c7cc <weAreDoneSoQuit>
	while ( !weAreDoneSoQuit ) {	
    450c:	|     /-- bra.s 4526 <main_sludge+0x368>
		//custom->color[0] = 0xf00;			
		sludgeDisplay ();
    450e:	|  /--|-> jsr 6ad8 <sludgeDisplay>
		CsiCheckInput();
    4514:	|  |  |   jsr ceca <CsiCheckInput>
		handleInput();
    451a:	|  |  |   jsr 5896 <handleInput>
		//custom->color[0] = 0x000;			
		WaitVbl();
    4520:	|  |  |   jsr 170aa <WaitVbl>
	while ( !weAreDoneSoQuit ) {	
    4526:	|  |  \-> move.l 1c7cc <weAreDoneSoQuit>,d0
    452c:	|  \----- beq.s 450e <main_sludge+0x350>
	}	
	//Amiga Cleanup
	FreeVec(sludgeFile);
    452e:	|         move.l 52(sp),32(sp)
    4534:	|         move.l 1c85c <SysBase>,d0
    453a:	|         movea.l d0,a6
    453c:	|         movea.l 32(sp),a1
    4540:	|         jsr -690(a6)
}
    4544:	\-------> movem.l (sp)+,d2-d3/a6
    4548:	          lea 44(sp),sp
    454c:	          rts

0000454e <setGameFilePath>:

void setGameFilePath (char * f) {
    454e:	          lea -1104(sp),sp
    4552:	          move.l a6,-(sp)
    4554:	          move.l d2,-(sp)
	char currentDir[1000];

	if (!GetCurrentDirName( currentDir, 998)) {
    4556:	          move.l #1112,d0
    455c:	          add.l sp,d0
    455e:	          addi.l #-1102,d0
    4564:	          move.l d0,1100(sp)
    4568:	          move.l #998,1096(sp)
    4570:	          move.l 1c864 <DOSBase>,d0
    4576:	          movea.l d0,a6
    4578:	          move.l 1100(sp),d1
    457c:	          move.l 1096(sp),d2
    4580:	          jsr -564(a6)
    4584:	          move.w d0,1094(sp)
    4588:	          move.w 1094(sp),d0
    458c:	      /-- bne.s 459c <setGameFilePath+0x4e>
		KPrintF("setGameFilePath:  current directory.\n");
    458e:	      |   pea 184c7 <PutChar+0x87d>
    4594:	      |   jsr 17176 <KPrintF>
    459a:	      |   addq.l #4,sp
	}	

	int got = -1, a;	
    459c:	      \-> moveq #-1,d0
    459e:	          move.l d0,1108(sp)

	for (a = 0; f[a]; a ++) {
    45a2:	          clr.l 1104(sp)
    45a6:	   /----- bra.s 45c4 <setGameFilePath+0x76>
		if (f[a] == PATHSLASH) got = a;
    45a8:	/--|----> move.l 1104(sp),d0
    45ac:	|  |      movea.l 1116(sp),a0
    45b0:	|  |      adda.l d0,a0
    45b2:	|  |      move.b (a0),d0
    45b4:	|  |      cmpi.b #47,d0
    45b8:	|  |  /-- bne.s 45c0 <setGameFilePath+0x72>
    45ba:	|  |  |   move.l 1104(sp),1108(sp)
	for (a = 0; f[a]; a ++) {
    45c0:	|  |  \-> addq.l #1,1104(sp)
    45c4:	|  \----> move.l 1104(sp),d0
    45c8:	|         movea.l 1116(sp),a0
    45cc:	|         adda.l d0,a0
    45ce:	|         move.b (a0),d0
    45d0:	\-------- bne.s 45a8 <setGameFilePath+0x5a>
	}

	if (got != -1) {
    45d2:	          moveq #-1,d0
    45d4:	          cmp.l 1108(sp),d0
    45d8:	   /----- beq.s 4652 <setGameFilePath+0x104>
		f[got] = 0;	
    45da:	   |      move.l 1108(sp),d0
    45de:	   |      movea.l 1116(sp),a0
    45e2:	   |      adda.l d0,a0
    45e4:	   |      clr.b (a0)
		BPTR lock = Lock(f, ACCESS_READ);	
    45e6:	   |      move.l 1116(sp),1090(sp)
    45ec:	   |      moveq #-2,d0
    45ee:	   |      move.l d0,1086(sp)
    45f2:	   |      move.l 1c864 <DOSBase>,d0
    45f8:	   |      movea.l d0,a6
    45fa:	   |      move.l 1090(sp),d1
    45fe:	   |      move.l 1086(sp),d2
    4602:	   |      jsr -84(a6)
    4606:	   |      move.l d0,1082(sp)
    460a:	   |      move.l 1082(sp),d0
    460e:	   |      move.l d0,1078(sp)
		if (!CurrentDir(lock)) {
    4612:	   |      move.l 1078(sp),1074(sp)
    4618:	   |      move.l 1c864 <DOSBase>,d0
    461e:	   |      movea.l d0,a6
    4620:	   |      move.l 1074(sp),d1
    4624:	   |      jsr -126(a6)
    4628:	   |      move.l d0,1070(sp)
    462c:	   |      move.l 1070(sp),d0
    4630:	   |  /-- bne.s 4644 <setGameFilePath+0xf6>
			KPrintF("setGameFilePath:: Failed changing to directory %s\n", f);
    4632:	   |  |   move.l 1116(sp),-(sp)
    4636:	   |  |   pea 184ed <PutChar+0x8a3>
    463c:	   |  |   jsr 17176 <KPrintF>
    4642:	   |  |   addq.l #8,sp
		}
		f[got] = PATHSLASH;
    4644:	   |  \-> move.l 1108(sp),d0
    4648:	   |      movea.l 1116(sp),a0
    464c:	   |      adda.l d0,a0
    464e:	   |      move.b #47,(a0)
	}

	gamePath = AllocVec(400, MEMF_ANY);
    4652:	   \----> move.l #400,1066(sp)
    465a:	          clr.l 1062(sp)
    465e:	          move.l 1c85c <SysBase>,d0
    4664:	          movea.l d0,a6
    4666:	          move.l 1066(sp),d0
    466a:	          move.l 1062(sp),d1
    466e:	          jsr -684(a6)
    4672:	          move.l d0,1058(sp)
    4676:	          move.l 1058(sp),d0
    467a:	          move.l d0,1c7c4 <gamePath>
	if (gamePath==0) {
    4680:	          move.l 1c7c4 <gamePath>,d0
    4686:	      /-- bne.s 469a <setGameFilePath+0x14c>
		KPrintF("setGameFilePath: Can't reserve memory for game directory.\n");
    4688:	      |   pea 18520 <PutChar+0x8d6>
    468e:	      |   jsr 17176 <KPrintF>
    4694:	      |   addq.l #4,sp
    4696:	   /--|-- bra.w 4782 <setGameFilePath+0x234>
		return;
	}

	BPTR lock = Lock(gamePath, ACCESS_READ);	
    469a:	   |  \-> move.l 1c7c4 <gamePath>,1054(sp)
    46a2:	   |      moveq #-2,d0
    46a4:	   |      move.l d0,1050(sp)
    46a8:	   |      move.l 1c864 <DOSBase>,d0
    46ae:	   |      movea.l d0,a6
    46b0:	   |      move.l 1054(sp),d1
    46b4:	   |      move.l 1050(sp),d2
    46b8:	   |      jsr -84(a6)
    46bc:	   |      move.l d0,1046(sp)
    46c0:	   |      move.l 1046(sp),d0
    46c4:	   |      move.l d0,1042(sp)
	if (! CurrentDir(lock)) {
    46c8:	   |      move.l 1042(sp),1038(sp)
    46ce:	   |      move.l 1c864 <DOSBase>,d0
    46d4:	   |      movea.l d0,a6
    46d6:	   |      move.l 1038(sp),d1
    46da:	   |      jsr -126(a6)
    46de:	   |      move.l d0,1034(sp)
    46e2:	   |      move.l 1034(sp),d0
    46e6:	   |  /-- bne.s 46f6 <setGameFilePath+0x1a8>
		KPrintF("setGameFilePath: Can't get game directory.\n");
    46e8:	   |  |   pea 1855b <PutChar+0x911>
    46ee:	   |  |   jsr 17176 <KPrintF>
    46f4:	   |  |   addq.l #4,sp
	}
	
	lock = Lock(currentDir, ACCESS_READ);	
    46f6:	   |  \-> move.l #1112,d0
    46fc:	   |      add.l sp,d0
    46fe:	   |      addi.l #-1102,d0
    4704:	   |      move.l d0,1030(sp)
    4708:	   |      moveq #-2,d0
    470a:	   |      move.l d0,1026(sp)
    470e:	   |      move.l 1c864 <DOSBase>,d0
    4714:	   |      movea.l d0,a6
    4716:	   |      move.l 1030(sp),d1
    471a:	   |      move.l 1026(sp),d2
    471e:	   |      jsr -84(a6)
    4722:	   |      move.l d0,1022(sp)
    4726:	   |      move.l 1022(sp),d0
    472a:	   |      move.l d0,1042(sp)
	if (!CurrentDir(lock)) {	
    472e:	   |      move.l 1042(sp),1018(sp)
    4734:	   |      move.l 1c864 <DOSBase>,d0
    473a:	   |      movea.l d0,a6
    473c:	   |      move.l 1018(sp),d1
    4740:	   |      jsr -126(a6)
    4744:	   |      move.l d0,1014(sp)
    4748:	   |      move.l 1014(sp),d0
    474c:	   |  /-- bne.s 4762 <setGameFilePath+0x214>
		KPrintF("setGameFilePath: Failed changing to directory %s\n", currentDir);
    474e:	   |  |   moveq #10,d0
    4750:	   |  |   add.l sp,d0
    4752:	   |  |   move.l d0,-(sp)
    4754:	   |  |   pea 18587 <PutChar+0x93d>
    475a:	   |  |   jsr 17176 <KPrintF>
    4760:	   |  |   addq.l #8,sp
	}

	//Free Mem
	if (gamePath != 0) FreeVec(gamePath);
    4762:	   |  \-> move.l 1c7c4 <gamePath>,d0
    4768:	   +----- beq.s 4782 <setGameFilePath+0x234>
    476a:	   |      move.l 1c7c4 <gamePath>,1010(sp)
    4772:	   |      move.l 1c85c <SysBase>,d0
    4778:	   |      movea.l d0,a6
    477a:	   |      movea.l 1010(sp),a1
    477e:	   |      jsr -690(a6)
}
    4782:	   \----> move.l (sp)+,d2
    4784:	          movea.l (sp)+,a6
    4786:	          lea 1104(sp),sp
    478a:	          rts

0000478c <abortFunction>:
int numResourceNames = 0;
int numUserFunc = 0;
int specialSettings;


void abortFunction (struct loadedFunction * fun) {
    478c:	/-------> lea -16(sp),sp
    4790:	|         move.l a6,-(sp)
	int a;

	pauseFunction (fun);
    4792:	|         move.l 24(sp),-(sp)
    4796:	|         jsr 68ba <pauseFunction>
    479c:	|         addq.l #4,sp
	while (fun -> stack) trimStack (&fun -> stack);
    479e:	|     /-- bra.s 47b0 <abortFunction+0x24>
    47a0:	|  /--|-> moveq #24,d0
    47a2:	|  |  |   add.l 24(sp),d0
    47a6:	|  |  |   move.l d0,-(sp)
    47a8:	|  |  |   jsr 150d2 <trimStack>
    47ae:	|  |  |   addq.l #4,sp
    47b0:	|  |  \-> movea.l 24(sp),a0
    47b4:	|  |      move.l 24(a0),d0
    47b8:	|  \----- bne.s 47a0 <abortFunction+0x14>
	FreeVec( fun -> compiledLines);
    47ba:	|         movea.l 24(sp),a0
    47be:	|         move.l 4(a0),12(sp)
    47c4:	|         move.l 1c85c <SysBase>,d0
    47ca:	|         movea.l d0,a6
    47cc:	|         movea.l 12(sp),a1
    47d0:	|         jsr -690(a6)
	for (a = 0; a < fun -> numLocals; a ++) unlinkVar (&(fun -> localVars[a]));
    47d4:	|         clr.l 16(sp)
    47d8:	|     /-- bra.s 47f8 <abortFunction+0x6c>
    47da:	|  /--|-> movea.l 24(sp),a0
    47de:	|  |  |   move.l 20(a0),d1
    47e2:	|  |  |   move.l 16(sp),d0
    47e6:	|  |  |   lsl.l #3,d0
    47e8:	|  |  |   add.l d1,d0
    47ea:	|  |  |   move.l d0,-(sp)
    47ec:	|  |  |   jsr 1499c <unlinkVar>
    47f2:	|  |  |   addq.l #4,sp
    47f4:	|  |  |   addq.l #1,16(sp)
    47f8:	|  |  \-> movea.l 24(sp),a0
    47fc:	|  |      move.l 8(a0),d0
    4800:	|  |      cmp.l 16(sp),d0
    4804:	|  \----- bgt.s 47da <abortFunction+0x4e>
	FreeVec(fun -> localVars);
    4806:	|         movea.l 24(sp),a0
    480a:	|         move.l 20(a0),8(sp)
    4810:	|         move.l 1c85c <SysBase>,d0
    4816:	|         movea.l d0,a6
    4818:	|         movea.l 8(sp),a1
    481c:	|         jsr -690(a6)
	unlinkVar (&fun -> reg);
    4820:	|         moveq #28,d0
    4822:	|         add.l 24(sp),d0
    4826:	|         move.l d0,-(sp)
    4828:	|         jsr 1499c <unlinkVar>
    482e:	|         addq.l #4,sp
	if (fun -> calledBy) abortFunction (fun -> calledBy);
    4830:	|         movea.l 24(sp),a0
    4834:	|         move.l 40(a0),d0
    4838:	|     /-- beq.s 484a <abortFunction+0xbe>
    483a:	|     |   movea.l 24(sp),a0
    483e:	|     |   move.l 40(a0),d0
    4842:	|     |   move.l d0,-(sp)
    4844:	\-----|-- jsr 478c <abortFunction>(pc)
    4848:	      |   addq.l #4,sp
	FreeVec(fun);
    484a:	      \-> move.l 24(sp),4(sp)
    4850:	          move.l 1c85c <SysBase>,d0
    4856:	          movea.l d0,a6
    4858:	          movea.l 4(sp),a1
    485c:	          jsr -690(a6)
	fun = NULL;
    4860:	          clr.l 24(sp)
}
    4864:	          nop
    4866:	          movea.l (sp)+,a6
    4868:	          lea 16(sp),sp
    486c:	          rts

0000486e <cancelAFunction>:

int cancelAFunction (int funcNum, struct loadedFunction * myself, BOOL * killedMyself) {
    486e:	          subq.l #8,sp
	int n = 0;
    4870:	          clr.l 4(sp)
	*killedMyself = FALSE;
    4874:	          movea.l 20(sp),a0
    4878:	          clr.w (a0)

	struct loadedFunction * fun = allRunningFunctions;
    487a:	          move.l 1c7f4 <allRunningFunctions>,(sp)
	while (fun) {
    4880:	   /----- bra.s 48ae <cancelAFunction+0x40>
		if (fun -> originalNumber == funcNum) {
    4882:	/--|----> movea.l (sp),a0
    4884:	|  |      move.l (a0),d0
    4886:	|  |      cmp.l 12(sp),d0
    488a:	|  |  /-- bne.s 48a8 <cancelAFunction+0x3a>
			fun -> cancelMe = TRUE;
    488c:	|  |  |   movea.l (sp),a0
    488e:	|  |  |   move.w #1,54(a0)
			n++;
    4894:	|  |  |   addq.l #1,4(sp)
			if (fun == myself) *killedMyself = TRUE;
    4898:	|  |  |   move.l (sp),d0
    489a:	|  |  |   cmp.l 16(sp),d0
    489e:	|  |  +-- bne.s 48a8 <cancelAFunction+0x3a>
    48a0:	|  |  |   movea.l 20(sp),a0
    48a4:	|  |  |   move.w #1,(a0)
		}
		fun = fun -> next;
    48a8:	|  |  \-> movea.l (sp),a0
    48aa:	|  |      move.l 44(a0),(sp)
	while (fun) {
    48ae:	|  \----> tst.l (sp)
    48b0:	\-------- bne.s 4882 <cancelAFunction+0x14>
	}
	return n;
    48b2:	          move.l 4(sp),d0
}
    48b6:	          addq.l #8,sp
    48b8:	          rts

000048ba <completeTimers>:


void completeTimers () {
    48ba:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    48bc:	          move.l 1c7f4 <allRunningFunctions>,(sp)

	while (thisFunction) {
    48c2:	   /----- bra.s 48d8 <completeTimers+0x1e>
		if (thisFunction->freezerLevel == 0) thisFunction->timeLeft = 0;
    48c4:	/--|----> movea.l (sp),a0
    48c6:	|  |      move.b 56(a0),d0
    48ca:	|  |  /-- bne.s 48d2 <completeTimers+0x18>
    48cc:	|  |  |   movea.l (sp),a0
    48ce:	|  |  |   clr.l 12(a0)
		thisFunction = thisFunction->next;
    48d2:	|  |  \-> movea.l (sp),a0
    48d4:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    48d8:	|  \----> tst.l (sp)
    48da:	\-------- bne.s 48c4 <completeTimers+0xa>
	}
}
    48dc:	          nop
    48de:	          nop
    48e0:	          addq.l #4,sp
    48e2:	          rts

000048e4 <continueFunction>:

BOOL continueFunction (struct loadedFunction * fun) {
    48e4:	                                                             lea -76(sp),sp
	BOOL keepLooping = TRUE;
    48e8:	                                                             move.w #1,74(sp)
	BOOL advanceNow;
	unsigned int param;
	enum sludgeCommand com;

	if (fun -> cancelMe) {
    48ee:	                                                             movea.l 80(sp),a0
    48f2:	                                                             move.w 54(a0),d0
    48f6:	/----------------------------------------------------------- beq.w 5784 <continueFunction+0xea0>
		abortFunction (fun);
    48fa:	|                                                            move.l 80(sp),-(sp)
    48fe:	|                                                            jsr 478c <abortFunction>
    4904:	|                                                            addq.l #4,sp
		return TRUE;
    4906:	|                                                            moveq #1,d0
    4908:	|  /-------------------------------------------------------- bra.w 578e <continueFunction+0xeaa>
	}

	while (keepLooping) {
		advanceNow = TRUE;
    490c:	|  |  /----------------------------------------------------> move.w #1,72(sp)
		param = fun -> compiledLines[fun -> runThisLine].param;
    4912:	|  |  |                                                      movea.l 80(sp),a0
    4916:	|  |  |                                                      move.l 4(a0),d1
    491a:	|  |  |                                                      movea.l 80(sp),a0
    491e:	|  |  |                                                      move.l 36(a0),d0
    4922:	|  |  |                                                      lsl.l #3,d0
    4924:	|  |  |                                                      movea.l d1,a0
    4926:	|  |  |                                                      adda.l d0,a0
    4928:	|  |  |                                                      move.l 4(a0),68(sp)
		com = fun -> compiledLines[fun -> runThisLine].theCommand;
    492e:	|  |  |                                                      movea.l 80(sp),a0
    4932:	|  |  |                                                      move.l 4(a0),d1
    4936:	|  |  |                                                      movea.l 80(sp),a0
    493a:	|  |  |                                                      move.l 36(a0),d0
    493e:	|  |  |                                                      lsl.l #3,d0
    4940:	|  |  |                                                      movea.l d1,a0
    4942:	|  |  |                                                      adda.l d0,a0
    4944:	|  |  |                                                      move.l (a0),64(sp)

//		fprintf (stderr, "com: %d param: %d (%s)\n", com, param,
//				(com < numSludgeCommands) ? sludgeText[com] : ERROR_UNKNOWN_MCODE); fflush(stderr);


		switch (com) {
    4948:	|  |  |                                                      moveq #41,d0
    494a:	|  |  |                                                      cmp.l 64(sp),d0
    494e:	|  |  |  /-------------------------------------------------- bcs.w 5738 <continueFunction+0xe54>
    4952:	|  |  |  |                                                   move.l 64(sp),d0
    4956:	|  |  |  |                                                   add.l d0,d0
    4958:	|  |  |  |                                                   movea.l d0,a0
    495a:	|  |  |  |                                                   adda.l #18790,a0
    4960:	|  |  |  |                                                   move.w (a0),d0
    4962:	|  |  |  |                                                   jmp (4966 <continueFunction+0x82>,pc,d0.w)
    4966:	|  |  |  |                                                   bset d6,(a2)
    4968:	|  |  |  |                                                   ori.w #2670,(a4)
    496c:	|  |  |  |                                                   eori.w #2416,d6
    4970:	|  |  |  |                                                   bchg d4,d2
    4972:	|  |  |  |                                                   bclr d4,(a4)+
    4974:	|  |  |  |                                                   andi.l #181013194,d4
    497a:	|  |  |  |                                                   .short 0x0aca
    497c:	|  |  |  |                                                   .short 0x0aca
    497e:	|  |  |  |                                                   andi.l #51251914,(-54,a2,d0.l:2)
    4986:	|  |  |  |                                                   .short 0x0aca
    4988:	|  |  |  |                                                   andi.w #906,-(a4)
    498c:	|  |  |  |                                                   bchg d1,196(a2)
    4990:	|  |  |  |                                                   bset d1,580(a4)
    4994:	|  |  |  |                                                   bclr d1,2576(a2)
    4998:	|  |  |  |                                                   andi.b #-56,2762(a2)
    499e:	|  |  |  |                                                   .short 0x0aca
    49a0:	|  |  |  |                                                   eori.l #63572682,d0
    49a6:	|  |  |  |                                                   .short 0x0aca
    49a8:	|  |  |  |                                                   bchg d3,-(a2)
    49aa:	|  |  |  |                                                   bchg #-36,(a2)
    49ae:	|  |  |  |                                                   .short 0x08cc
    49b0:	|  |  |  |                                                   addi.b #14,1038(a0)
    49b6:	|  |  |  |                                                   .short 0x040e
    49b8:	|  |  |  |                                                   bset d4,8303(a4)
			case SLU_RETURN:
			if (fun -> calledBy) {
    49bc:	|  |  |  |                                                   ori.w #8232,(a0)
    49c0:	|  |  |  |                                                   ori.b #78,8303(a0)
				struct loadedFunction * returnTo = fun -> calledBy;
    49c6:	|  |  |  |                                                   ori.w #12136,(a0)
    49ca:	|  |  |  |                                                   ori.b #44,8303(a0)
				if (fun -> returnSomething) copyVariable (&fun -> reg, &returnTo -> reg);
    49d0:	|  |  |  |                                                   ori.w #12328,(a0)
    49d4:	|  |  |  |                                                   ori.b #24,(28,a0,d7.w:2)
    49da:	|  |  |  |                                                   add.l 44(sp),d1
    49de:	|  |  |  |                                                   moveq #28,d0
    49e0:	|  |  |  |                                                   add.l 80(sp),d0
    49e4:	|  |  |  |                                                   move.l d1,-(sp)
    49e6:	|  |  |  |                                                   move.l d0,-(sp)
    49e8:	|  |  |  |                                                   jsr 14c08 <copyVariable>
    49ee:	|  |  |  |                                                   addq.l #8,sp
				finishFunction (fun);
    49f0:	|  |  |  |                                                   move.l 80(sp),-(sp)
    49f4:	|  |  |  |                                                   jsr 5794 <finishFunction>
    49fa:	|  |  |  |                                                   addq.l #4,sp
				fun = returnTo;
    49fc:	|  |  |  |                                                   move.l 44(sp),80(sp)
				restartFunction (fun);
    4a02:	|  |  |  |                                                   move.l 80(sp),-(sp)
    4a06:	|  |  |  |                                                   jsr 68fc <restartFunction>
    4a0c:	|  |  |  |                                                   addq.l #4,sp
			} else {
				finishFunction (fun);
				advanceNow = FALSE;		// So we don't do anything else with "fun"
				keepLooping = FALSE;	// So we drop out of the loop
			}
			break;
    4a0e:	|  |  |  |  /----------------------------------------------- bra.w 576c <continueFunction+0xe88>
				finishFunction (fun);
    4a12:	|  |  |  |  |                                                move.l 80(sp),-(sp)
    4a16:	|  |  |  |  |                                                jsr 5794 <finishFunction>
    4a1c:	|  |  |  |  |                                                addq.l #4,sp
				advanceNow = FALSE;		// So we don't do anything else with "fun"
    4a1e:	|  |  |  |  |                                                clr.w 72(sp)
				keepLooping = FALSE;	// So we drop out of the loop
    4a22:	|  |  |  |  |                                                clr.w 74(sp)
			break;
    4a26:	|  |  |  |  +----------------------------------------------- bra.w 576c <continueFunction+0xe88>

			case SLU_CALLIT:
			switch (fun -> reg.varType) {
    4a2a:	|  |  |  |  |                                                movea.l 80(sp),a0
    4a2e:	|  |  |  |  |                                                move.l 28(a0),d0
    4a32:	|  |  |  |  |                                                moveq #2,d1
    4a34:	|  |  |  |  |                                                cmp.l d0,d1
    4a36:	|  |  |  |  |                                            /-- beq.s 4a42 <continueFunction+0x15e>
    4a38:	|  |  |  |  |                                            |   moveq #4,d1
    4a3a:	|  |  |  |  |                                            |   cmp.l d0,d1
    4a3c:	|  |  |  |  |                                         /--|-- beq.s 4a90 <continueFunction+0x1ac>
    4a3e:	|  |  |  |  |                                /--------|--|-- bra.w 4b78 <continueFunction+0x294>
				case SVT_FUNC:
				pauseFunction (fun);		
    4a42:	|  |  |  |  |                                |        |  \-> move.l 80(sp),-(sp)
    4a46:	|  |  |  |  |                                |        |      jsr 68ba <pauseFunction>
    4a4c:	|  |  |  |  |                                |        |      addq.l #4,sp
				if (! startNewFunctionNum (fun -> reg.varData.intValue, param, fun, &fun -> stack,TRUE)) return FALSE;
    4a4e:	|  |  |  |  |                                |        |      moveq #24,d0
    4a50:	|  |  |  |  |                                |        |      add.l 80(sp),d0
    4a54:	|  |  |  |  |                                |        |      movea.l 80(sp),a0
    4a58:	|  |  |  |  |                                |        |      move.l 32(a0),d1
    4a5c:	|  |  |  |  |                                |        |      pea 1 <_start+0x1>
    4a60:	|  |  |  |  |                                |        |      move.l d0,-(sp)
    4a62:	|  |  |  |  |                                |        |      move.l 88(sp),-(sp)
    4a66:	|  |  |  |  |                                |        |      move.l 80(sp),-(sp)
    4a6a:	|  |  |  |  |                                |        |      move.l d1,-(sp)
    4a6c:	|  |  |  |  |                                |        |      jsr 6b48 <startNewFunctionNum>
    4a72:	|  |  |  |  |                                |        |      lea 20(sp),sp
    4a76:	|  |  |  |  |                                |        |      tst.l d0
    4a78:	|  |  |  |  |                                |        |  /-- bne.s 4a80 <continueFunction+0x19c>
    4a7a:	|  |  |  |  |                                |        |  |   clr.w d0
    4a7c:	|  +--|--|--|--------------------------------|--------|--|-- bra.w 578e <continueFunction+0xeaa>
				fun = allRunningFunctions;
    4a80:	|  |  |  |  |                                |        |  \-> move.l 1c7f4 <allRunningFunctions>,80(sp)
				advanceNow = FALSE;		// So we don't do anything else with "fun"
    4a88:	|  |  |  |  |                                |        |      clr.w 72(sp)
				break;
    4a8c:	|  |  |  |  |                                |  /-----|----- bra.w 4b8c <continueFunction+0x2a8>

				case SVT_BUILT:
					{
					//KPrintF("Loading function %ld",fun -> reg.varData.intValue);
					enum builtReturn br = callBuiltIn (fun -> reg.varData.intValue, param, fun);
    4a90:	|  |  |  |  |                                |  |     \----> move.l 68(sp),d1
    4a94:	|  |  |  |  |                                |  |            movea.l 80(sp),a0
    4a98:	|  |  |  |  |                                |  |            move.l 32(a0),d0
    4a9c:	|  |  |  |  |                                |  |            move.l 80(sp),-(sp)
    4aa0:	|  |  |  |  |                                |  |            move.l d1,-(sp)
    4aa2:	|  |  |  |  |                                |  |            move.l d0,-(sp)
    4aa4:	|  |  |  |  |                                |  |            jsr 13430 <callBuiltIn>
    4aaa:	|  |  |  |  |                                |  |            lea 12(sp),sp
    4aae:	|  |  |  |  |                                |  |            move.l d0,52(sp)
    4ab2:	|  |  |  |  |                                |  |            moveq #5,d0
    4ab4:	|  |  |  |  |                                |  |            cmp.l 52(sp),d0
    4ab8:	|  |  |  |  |                                |  |  /-------- bcs.w 4b74 <continueFunction+0x290>
    4abc:	|  |  |  |  |                                |  |  |         move.l 52(sp),d0
    4ac0:	|  |  |  |  |                                |  |  |         add.l d0,d0
    4ac2:	|  |  |  |  |                                |  |  |         movea.l d0,a0
    4ac4:	|  |  |  |  |                                |  |  |         adda.l #19152,a0
    4aca:	|  |  |  |  |                                |  |  |         move.w (a0),d0
    4acc:	|  |  |  |  |                                |  |  |         jmp (4ad0 <continueFunction+0x1ec>,pc,d0.w)
    4ad0:	|  |  |  |  |                                |  |  |         ori.b #12,164(a4)
    4ad6:	|  |  |  |  |                                |  |  |         ori.b #60,-(a0)
    4ada:	|  |  |  |  |                                |  |  |         ori.b #121,(1,a2,d0.w)

					switch (br) {
						case BR_ERROR:
							KPrintF("Unknown error. This shouldn't happen. Please notify the SLUDGE developers.");
    4ae0:	|  |  |  |  |                                |  |  |         .short 0x868f
    4ae2:	|  |  |  |  |                                |  |  |         jsr 17176 <KPrintF>
    4ae8:	|  |  |  |  |                                |  |  |         addq.l #4,sp
							return FALSE;
    4aea:	|  |  |  |  |                                |  |  |         clr.w d0
    4aec:	|  +--|--|--|--------------------------------|--|--|-------- bra.w 578e <continueFunction+0xeaa>

						case BR_PAUSE:
						pauseFunction (fun);
    4af0:	|  |  |  |  |                                |  |  |         move.l 80(sp),-(sp)
    4af4:	|  |  |  |  |                                |  |  |         jsr 68ba <pauseFunction>
    4afa:	|  |  |  |  |                                |  |  |         addq.l #4,sp
						[[fallthrough]];
						// No break!

						case BR_KEEP_AND_PAUSE:
						keepLooping = FALSE;
    4afc:	|  |  |  |  |                                |  |  |         clr.w 74(sp)
						break;
    4b00:	|  |  |  |  |                                |  |  |  /----- bra.s 4b76 <continueFunction+0x292>

						case BR_ALREADY_GONE:
						keepLooping = FALSE;
    4b02:	|  |  |  |  |                                |  |  |  |      clr.w 74(sp)
						advanceNow = FALSE;
    4b06:	|  |  |  |  |                                |  |  |  |      clr.w 72(sp)
						break;
    4b0a:	|  |  |  |  |                                |  |  |  +----- bra.s 4b76 <continueFunction+0x292>

						case BR_CALLAFUNC:
						{
							int i = fun -> reg.varData.intValue;
    4b0c:	|  |  |  |  |                                |  |  |  |      movea.l 80(sp),a0
    4b10:	|  |  |  |  |                                |  |  |  |      move.l 32(a0),48(sp)
							setVariable (&fun -> reg, SVT_INT, 1);
    4b16:	|  |  |  |  |                                |  |  |  |      moveq #28,d0
    4b18:	|  |  |  |  |                                |  |  |  |      add.l 80(sp),d0
    4b1c:	|  |  |  |  |                                |  |  |  |      pea 1 <_start+0x1>
    4b20:	|  |  |  |  |                                |  |  |  |      pea 1 <_start+0x1>
    4b24:	|  |  |  |  |                                |  |  |  |      move.l d0,-(sp)
    4b26:	|  |  |  |  |                                |  |  |  |      jsr 15040 <setVariable>
    4b2c:	|  |  |  |  |                                |  |  |  |      lea 12(sp),sp
							pauseFunction (fun);							
    4b30:	|  |  |  |  |                                |  |  |  |      move.l 80(sp),-(sp)
    4b34:	|  |  |  |  |                                |  |  |  |      jsr 68ba <pauseFunction>
    4b3a:	|  |  |  |  |                                |  |  |  |      addq.l #4,sp
							if (! startNewFunctionNum (i, 0, fun, noStack, FALSE)) return FALSE;
    4b3c:	|  |  |  |  |                                |  |  |  |      move.l 1c82c <noStack>,d1
    4b42:	|  |  |  |  |                                |  |  |  |      move.l 48(sp),d0
    4b46:	|  |  |  |  |                                |  |  |  |      clr.l -(sp)
    4b48:	|  |  |  |  |                                |  |  |  |      move.l d1,-(sp)
    4b4a:	|  |  |  |  |                                |  |  |  |      move.l 88(sp),-(sp)
    4b4e:	|  |  |  |  |                                |  |  |  |      clr.l -(sp)
    4b50:	|  |  |  |  |                                |  |  |  |      move.l d0,-(sp)
    4b52:	|  |  |  |  |                                |  |  |  |      jsr 6b48 <startNewFunctionNum>
    4b58:	|  |  |  |  |                                |  |  |  |      lea 20(sp),sp
    4b5c:	|  |  |  |  |                                |  |  |  |      tst.l d0
    4b5e:	|  |  |  |  |                                |  |  |  |  /-- bne.s 4b66 <continueFunction+0x282>
    4b60:	|  |  |  |  |                                |  |  |  |  |   clr.w d0
    4b62:	|  +--|--|--|--------------------------------|--|--|--|--|-- bra.w 578e <continueFunction+0xeaa>
							fun = allRunningFunctions;
    4b66:	|  |  |  |  |                                |  |  |  |  \-> move.l 1c7f4 <allRunningFunctions>,80(sp)
							advanceNow = FALSE;		// So we don't do anything else with "fun"
    4b6e:	|  |  |  |  |                                |  |  |  |      clr.w 72(sp)
						}
						break;
    4b72:	|  |  |  |  |                                |  |  |  +----- bra.s 4b76 <continueFunction+0x292>

						default:
						break;
    4b74:	|  |  |  |  |                                |  |  \--|----> nop
					}
				}
				break;
    4b76:	|  |  |  |  |                                |  +-----\----X bra.s 4b8c <continueFunction+0x2a8>

				default:
				KPrintF(ERROR_CALL_NONFUNCTION);
    4b78:	|  |  |  |  |                                \--|----------> pea 186da <PutChar+0xa90>
    4b7e:	|  |  |  |  |                                   |            jsr 17176 <KPrintF>
    4b84:	|  |  |  |  |                                   |            addq.l #4,sp
				return FALSE;
    4b86:	|  |  |  |  |                                   |            clr.w d0
    4b88:	|  +--|--|--|-----------------------------------|----------- bra.w 578e <continueFunction+0xeaa>
			}
			break;
    4b8c:	|  |  |  |  +-----------------------------------\----------X bra.w 576c <continueFunction+0xe88>

			// These all grab things and shove 'em into the register

			case SLU_LOAD_NULL:
			setVariable (&fun -> reg, SVT_NULL, 0);
    4b90:	|  |  |  |  |                                                moveq #28,d0
    4b92:	|  |  |  |  |                                                add.l 80(sp),d0
    4b96:	|  |  |  |  |                                                clr.l -(sp)
    4b98:	|  |  |  |  |                                                clr.l -(sp)
    4b9a:	|  |  |  |  |                                                move.l d0,-(sp)
    4b9c:	|  |  |  |  |                                                jsr 15040 <setVariable>
    4ba2:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    4ba6:	|  |  |  |  +----------------------------------------------- bra.w 576c <continueFunction+0xe88>

			case SLU_LOAD_FILE:
			setVariable (&fun -> reg, SVT_FILE, param);
    4baa:	|  |  |  |  |                                                move.l 68(sp),d1
    4bae:	|  |  |  |  |                                                moveq #28,d0
    4bb0:	|  |  |  |  |                                                add.l 80(sp),d0
    4bb4:	|  |  |  |  |                                                move.l d1,-(sp)
    4bb6:	|  |  |  |  |                                                pea 5 <_start+0x5>
    4bba:	|  |  |  |  |                                                move.l d0,-(sp)
    4bbc:	|  |  |  |  |                                                jsr 15040 <setVariable>
    4bc2:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    4bc6:	|  |  |  |  +----------------------------------------------- bra.w 576c <continueFunction+0xe88>

			case SLU_LOAD_VALUE:
			setVariable (&fun -> reg, SVT_INT, param);
    4bca:	|  |  |  |  |                                                move.l 68(sp),d1
    4bce:	|  |  |  |  |                                                moveq #28,d0
    4bd0:	|  |  |  |  |                                                add.l 80(sp),d0
    4bd4:	|  |  |  |  |                                                move.l d1,-(sp)
    4bd6:	|  |  |  |  |                                                pea 1 <_start+0x1>
    4bda:	|  |  |  |  |                                                move.l d0,-(sp)
    4bdc:	|  |  |  |  |                                                jsr 15040 <setVariable>
    4be2:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    4be6:	|  |  |  |  +----------------------------------------------- bra.w 576c <continueFunction+0xe88>

			case SLU_LOAD_LOCAL:
			if (! copyVariable (&(fun -> localVars[param]), &fun -> reg)) return FALSE;
    4bea:	|  |  |  |  |                                                moveq #28,d0
    4bec:	|  |  |  |  |                                                add.l 80(sp),d0
    4bf0:	|  |  |  |  |                                                movea.l 80(sp),a0
    4bf4:	|  |  |  |  |                                                movea.l 20(a0),a0
    4bf8:	|  |  |  |  |                                                move.l 68(sp),d1
    4bfc:	|  |  |  |  |                                                lsl.l #3,d1
    4bfe:	|  |  |  |  |                                                add.l a0,d1
    4c00:	|  |  |  |  |                                                move.l d0,-(sp)
    4c02:	|  |  |  |  |                                                move.l d1,-(sp)
    4c04:	|  |  |  |  |                                                jsr 14c08 <copyVariable>
    4c0a:	|  |  |  |  |                                                addq.l #8,sp
    4c0c:	|  |  |  |  |                                                tst.w d0
    4c0e:	|  |  |  |  |  /-------------------------------------------- bne.w 574a <continueFunction+0xe66>
    4c12:	|  |  |  |  |  |                                             clr.w d0
    4c14:	|  +--|--|--|--|-------------------------------------------- bra.w 578e <continueFunction+0xeaa>
			break;

			case SLU_AND:
			setVariable (&fun -> reg, SVT_INT, getBoolean (&fun -> reg) && getBoolean(&(fun -> stack -> thisVar)));
    4c18:	|  |  |  |  |  |                                             moveq #28,d0
    4c1a:	|  |  |  |  |  |                                             add.l 80(sp),d0
    4c1e:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4c20:	|  |  |  |  |  |                                             jsr 14c8e <getBoolean>
    4c26:	|  |  |  |  |  |                                             addq.l #4,sp
    4c28:	|  |  |  |  |  |                                             tst.w d0
    4c2a:	|  |  |  |  |  |                                      /----- beq.s 4c46 <continueFunction+0x362>
    4c2c:	|  |  |  |  |  |                                      |      movea.l 80(sp),a0
    4c30:	|  |  |  |  |  |                                      |      move.l 24(a0),d0
    4c34:	|  |  |  |  |  |                                      |      move.l d0,-(sp)
    4c36:	|  |  |  |  |  |                                      |      jsr 14c8e <getBoolean>
    4c3c:	|  |  |  |  |  |                                      |      addq.l #4,sp
    4c3e:	|  |  |  |  |  |                                      |      tst.w d0
    4c40:	|  |  |  |  |  |                                      +----- beq.s 4c46 <continueFunction+0x362>
    4c42:	|  |  |  |  |  |                                      |      moveq #1,d0
    4c44:	|  |  |  |  |  |                                      |  /-- bra.s 4c48 <continueFunction+0x364>
    4c46:	|  |  |  |  |  |                                      \--|-> moveq #0,d0
    4c48:	|  |  |  |  |  |                                         \-> moveq #28,d1
    4c4a:	|  |  |  |  |  |                                             add.l 80(sp),d1
    4c4e:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4c50:	|  |  |  |  |  |                                             pea 1 <_start+0x1>
    4c54:	|  |  |  |  |  |                                             move.l d1,-(sp)
    4c56:	|  |  |  |  |  |                                             jsr 15040 <setVariable>
    4c5c:	|  |  |  |  |  |                                             lea 12(sp),sp
			trimStack (&fun -> stack);
    4c60:	|  |  |  |  |  |                                             moveq #24,d0
    4c62:	|  |  |  |  |  |                                             add.l 80(sp),d0
    4c66:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4c68:	|  |  |  |  |  |                                             jsr 150d2 <trimStack>
    4c6e:	|  |  |  |  |  |                                             addq.l #4,sp
			break;
    4c70:	|  |  |  |  +--|-------------------------------------------- bra.w 576c <continueFunction+0xe88>

			case SLU_OR:
			setVariable (&fun -> reg, SVT_INT, getBoolean (&fun -> reg) || getBoolean (&(fun -> stack -> thisVar)));
    4c74:	|  |  |  |  |  |                                             moveq #28,d0
    4c76:	|  |  |  |  |  |                                             add.l 80(sp),d0
    4c7a:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4c7c:	|  |  |  |  |  |                                             jsr 14c8e <getBoolean>
    4c82:	|  |  |  |  |  |                                             addq.l #4,sp
    4c84:	|  |  |  |  |  |                                             tst.w d0
    4c86:	|  |  |  |  |  |                                         /-- bne.s 4c9e <continueFunction+0x3ba>
    4c88:	|  |  |  |  |  |                                         |   movea.l 80(sp),a0
    4c8c:	|  |  |  |  |  |                                         |   move.l 24(a0),d0
    4c90:	|  |  |  |  |  |                                         |   move.l d0,-(sp)
    4c92:	|  |  |  |  |  |                                         |   jsr 14c8e <getBoolean>
    4c98:	|  |  |  |  |  |                                         |   addq.l #4,sp
    4c9a:	|  |  |  |  |  |                                         |   tst.w d0
    4c9c:	|  |  |  |  |  |                                      /--|-- beq.s 4ca2 <continueFunction+0x3be>
    4c9e:	|  |  |  |  |  |                                      |  \-> moveq #1,d0
    4ca0:	|  |  |  |  |  |                                      |  /-- bra.s 4ca4 <continueFunction+0x3c0>
    4ca2:	|  |  |  |  |  |                                      \--|-> moveq #0,d0
    4ca4:	|  |  |  |  |  |                                         \-> moveq #28,d1
    4ca6:	|  |  |  |  |  |                                             add.l 80(sp),d1
    4caa:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4cac:	|  |  |  |  |  |                                             pea 1 <_start+0x1>
    4cb0:	|  |  |  |  |  |                                             move.l d1,-(sp)
    4cb2:	|  |  |  |  |  |                                             jsr 15040 <setVariable>
    4cb8:	|  |  |  |  |  |                                             lea 12(sp),sp
			trimStack (&fun -> stack);
    4cbc:	|  |  |  |  |  |                                             moveq #24,d0
    4cbe:	|  |  |  |  |  |                                             add.l 80(sp),d0
    4cc2:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4cc4:	|  |  |  |  |  |                                             jsr 150d2 <trimStack>
    4cca:	|  |  |  |  |  |                                             addq.l #4,sp
			break;
    4ccc:	|  |  |  |  +--|-------------------------------------------- bra.w 576c <continueFunction+0xe88>

			case SLU_LOAD_FUNC:
    		setVariable (&fun -> reg, SVT_FUNC, param);
    4cd0:	|  |  |  |  |  |                                             move.l 68(sp),d1
    4cd4:	|  |  |  |  |  |                                             moveq #28,d0
    4cd6:	|  |  |  |  |  |                                             add.l 80(sp),d0
    4cda:	|  |  |  |  |  |                                             move.l d1,-(sp)
    4cdc:	|  |  |  |  |  |                                             pea 2 <_start+0x2>
    4ce0:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4ce2:	|  |  |  |  |  |                                             jsr 15040 <setVariable>
    4ce8:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    4cec:	|  |  |  |  +--|-------------------------------------------- bra.w 576c <continueFunction+0xe88>

			case SLU_LOAD_BUILT:
			setVariable (&fun -> reg, SVT_BUILT, param);
    4cf0:	|  |  |  |  |  |                                             move.l 68(sp),d1
    4cf4:	|  |  |  |  |  |                                             moveq #28,d0
    4cf6:	|  |  |  |  |  |                                             add.l 80(sp),d0
    4cfa:	|  |  |  |  |  |                                             move.l d1,-(sp)
    4cfc:	|  |  |  |  |  |                                             pea 4 <_start+0x4>
    4d00:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4d02:	|  |  |  |  |  |                                             jsr 15040 <setVariable>
    4d08:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    4d0c:	|  |  |  |  +--|-------------------------------------------- bra.w 576c <continueFunction+0xe88>

			case SLU_LOAD_OBJTYPE:
			setVariable (&fun -> reg, SVT_OBJTYPE, param);
    4d10:	|  |  |  |  |  |                                             move.l 68(sp),d1
    4d14:	|  |  |  |  |  |                                             moveq #28,d0
    4d16:	|  |  |  |  |  |                                             add.l 80(sp),d0
    4d1a:	|  |  |  |  |  |                                             move.l d1,-(sp)
    4d1c:	|  |  |  |  |  |                                             pea 7 <_start+0x7>
    4d20:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4d22:	|  |  |  |  |  |                                             jsr 15040 <setVariable>
    4d28:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    4d2c:	|  |  |  |  +--|-------------------------------------------- bra.w 576c <continueFunction+0xe88>

			case SLU_UNREG:
			if (dialogValue != 1) {
    4d30:	|  |  |  |  |  |                                             move.l 1c7bc <dialogValue>,d0
    4d36:	|  |  |  |  |  |                                             moveq #1,d1
    4d38:	|  |  |  |  |  |                                             cmp.l d0,d1
    4d3a:	|  |  |  |  |  |  /----------------------------------------- beq.w 574e <continueFunction+0xe6a>
				KPrintF(ERROR_HACKER);
    4d3e:	|  |  |  |  |  |  |                                          pea 186ef <PutChar+0xaa5>
    4d44:	|  |  |  |  |  |  |                                          jsr 17176 <KPrintF>
    4d4a:	|  |  |  |  |  |  |                                          addq.l #4,sp
				return FALSE;
    4d4c:	|  |  |  |  |  |  |                                          clr.w d0
    4d4e:	|  +--|--|--|--|--|----------------------------------------- bra.w 578e <continueFunction+0xeaa>
			}
			break;

			case SLU_LOAD_STRING:
				if (! loadStringToVar (&fun -> reg, param)) {
    4d52:	|  |  |  |  |  |  |                                          move.l 68(sp),d1
    4d56:	|  |  |  |  |  |  |                                          moveq #28,d0
    4d58:	|  |  |  |  |  |  |                                          add.l 80(sp),d0
    4d5c:	|  |  |  |  |  |  |                                          move.l d1,-(sp)
    4d5e:	|  |  |  |  |  |  |                                          move.l d0,-(sp)
    4d60:	|  |  |  |  |  |  |                                          jsr 147d2 <loadStringToVar>
    4d66:	|  |  |  |  |  |  |                                          addq.l #8,sp
    4d68:	|  |  |  |  |  |  |                                          tst.w d0
    4d6a:	|  |  |  |  |  |  |  /-------------------------------------- bne.w 5752 <continueFunction+0xe6e>
					return FALSE;
    4d6e:	|  |  |  |  |  |  |  |                                       clr.w d0
    4d70:	|  +--|--|--|--|--|--|-------------------------------------- bra.w 578e <continueFunction+0xeaa>
			break;

			case SLU_INDEXGET:
			case SLU_INCREMENT_INDEX:
			case SLU_DECREMENT_INDEX:
			switch (fun -> stack -> thisVar.varType) {
    4d74:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    4d78:	|  |  |  |  |  |  |  |                                       movea.l 24(a0),a0
    4d7c:	|  |  |  |  |  |  |  |                                       move.l (a0),d0
    4d7e:	|  |  |  |  |  |  |  |                                       moveq #10,d1
    4d80:	|  |  |  |  |  |  |  |                                       cmp.l d0,d1
    4d82:	|  |  |  |  |  |  |  |                                /----- beq.s 4de0 <continueFunction+0x4fc>
    4d84:	|  |  |  |  |  |  |  |                                |      moveq #10,d1
    4d86:	|  |  |  |  |  |  |  |                                |      cmp.l d0,d1
    4d88:	|  |  |  |  |  |  |  |              /-----------------|----- bcs.w 4f74 <continueFunction+0x690>
    4d8c:	|  |  |  |  |  |  |  |              |                 |      tst.l d0
    4d8e:	|  |  |  |  |  |  |  |              |                 |  /-- beq.s 4d9a <continueFunction+0x4b6>
    4d90:	|  |  |  |  |  |  |  |              |                 |  |   moveq #6,d1
    4d92:	|  |  |  |  |  |  |  |              |                 |  |   cmp.l d0,d1
    4d94:	|  |  |  |  |  |  |  |              |                 +--|-- beq.s 4de0 <continueFunction+0x4fc>
    4d96:	|  |  |  |  |  |  |  |              +-----------------|--|-- bra.w 4f74 <continueFunction+0x690>
				case SVT_NULL:
				if (com == SLU_INDEXGET) {
    4d9a:	|  |  |  |  |  |  |  |              |                 |  \-> moveq #38,d0
    4d9c:	|  |  |  |  |  |  |  |              |                 |      cmp.l 64(sp),d0
    4da0:	|  |  |  |  |  |  |  |              |                 |  /-- bne.s 4dcc <continueFunction+0x4e8>
					setVariable (&fun -> reg, SVT_NULL, 0);
    4da2:	|  |  |  |  |  |  |  |              |                 |  |   moveq #28,d0
    4da4:	|  |  |  |  |  |  |  |              |                 |  |   add.l 80(sp),d0
    4da8:	|  |  |  |  |  |  |  |              |                 |  |   clr.l -(sp)
    4daa:	|  |  |  |  |  |  |  |              |                 |  |   clr.l -(sp)
    4dac:	|  |  |  |  |  |  |  |              |                 |  |   move.l d0,-(sp)
    4dae:	|  |  |  |  |  |  |  |              |                 |  |   jsr 15040 <setVariable>
    4db4:	|  |  |  |  |  |  |  |              |                 |  |   lea 12(sp),sp
					trimStack (&fun -> stack);
    4db8:	|  |  |  |  |  |  |  |              |                 |  |   moveq #24,d0
    4dba:	|  |  |  |  |  |  |  |              |                 |  |   add.l 80(sp),d0
    4dbe:	|  |  |  |  |  |  |  |              |                 |  |   move.l d0,-(sp)
    4dc0:	|  |  |  |  |  |  |  |              |                 |  |   jsr 150d2 <trimStack>
    4dc6:	|  |  |  |  |  |  |  |              |                 |  |   addq.l #4,sp
				} else {
					KPrintF((ERROR_INCDEC_UNKNOWN));
					return FALSE;
				}
				break;
    4dc8:	|  |  |  |  |  |  |  |              |  /--------------|--|-- bra.w 4f8a <continueFunction+0x6a6>
					KPrintF((ERROR_INCDEC_UNKNOWN));
    4dcc:	|  |  |  |  |  |  |  |              |  |              |  \-> pea 18730 <PutChar+0xae6>
    4dd2:	|  |  |  |  |  |  |  |              |  |              |      jsr 17176 <KPrintF>
    4dd8:	|  |  |  |  |  |  |  |              |  |              |      addq.l #4,sp
					return FALSE;
    4dda:	|  |  |  |  |  |  |  |              |  |              |      clr.w d0
    4ddc:	|  +--|--|--|--|--|--|--------------|--|--------------|----- bra.w 578e <continueFunction+0xeaa>

				case SVT_FASTARRAY:
				case SVT_STACK:
				if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    4de0:	|  |  |  |  |  |  |  |              |  |              \----> movea.l 80(sp),a0
    4de4:	|  |  |  |  |  |  |  |              |  |                     movea.l 24(a0),a0
    4de8:	|  |  |  |  |  |  |  |              |  |                     movea.l 4(a0),a0
    4dec:	|  |  |  |  |  |  |  |              |  |                     move.l (a0),d0
    4dee:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 4e04 <continueFunction+0x520>
					KPrintF((ERROR_INDEX_EMPTY));
    4df0:	|  |  |  |  |  |  |  |              |  |                 |   pea 1876c <PutChar+0xb22>
    4df6:	|  |  |  |  |  |  |  |              |  |                 |   jsr 17176 <KPrintF>
    4dfc:	|  |  |  |  |  |  |  |              |  |                 |   addq.l #4,sp
					return FALSE;
    4dfe:	|  |  |  |  |  |  |  |              |  |                 |   clr.w d0
    4e00:	|  +--|--|--|--|--|--|--------------|--|-----------------|-- bra.w 578e <continueFunction+0xeaa>
				} else {
					int ii;
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    4e04:	|  |  |  |  |  |  |  |              |  |                 \-> moveq #28,d0
    4e06:	|  |  |  |  |  |  |  |              |  |                     add.l 80(sp),d0
    4e0a:	|  |  |  |  |  |  |  |              |  |                     move.l d0,-(sp)
    4e0c:	|  |  |  |  |  |  |  |              |  |                     pea 1 <_start+0x1>
    4e10:	|  |  |  |  |  |  |  |              |  |                     lea 12(sp),a0
    4e14:	|  |  |  |  |  |  |  |              |  |                     move.l a0,-(sp)
    4e16:	|  |  |  |  |  |  |  |              |  |                     jsr 1474e <getValueType>
    4e1c:	|  |  |  |  |  |  |  |              |  |                     lea 12(sp),sp
    4e20:	|  |  |  |  |  |  |  |              |  |                     tst.w d0
    4e22:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 4e2a <continueFunction+0x546>
    4e24:	|  |  |  |  |  |  |  |              |  |                 |   clr.w d0
    4e26:	|  +--|--|--|--|--|--|--------------|--|-----------------|-- bra.w 578e <continueFunction+0xeaa>
					struct variable * grab = (fun -> stack -> thisVar.varType == SVT_FASTARRAY) ?
    4e2a:	|  |  |  |  |  |  |  |              |  |                 \-> movea.l 80(sp),a0
    4e2e:	|  |  |  |  |  |  |  |              |  |                     movea.l 24(a0),a0
    4e32:	|  |  |  |  |  |  |  |              |  |                     move.l (a0),d0
						fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii)
							:
    4e34:	|  |  |  |  |  |  |  |              |  |                     moveq #10,d1
    4e36:	|  |  |  |  |  |  |  |              |  |                     cmp.l d0,d1
    4e38:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 4e5a <continueFunction+0x576>
						fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii)
    4e3a:	|  |  |  |  |  |  |  |              |  |                 |   move.l 4(sp),d0
    4e3e:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,d1
    4e40:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 80(sp),a0
    4e44:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 24(a0),a0
    4e48:	|  |  |  |  |  |  |  |              |  |                 |   move.l 4(a0),d0
    4e4c:	|  |  |  |  |  |  |  |              |  |                 |   move.l d1,-(sp)
    4e4e:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,-(sp)
    4e50:	|  |  |  |  |  |  |  |              |  |                 |   jsr 143d8 <fastArrayGetByIndex>
    4e56:	|  |  |  |  |  |  |  |              |  |                 |   addq.l #8,sp
    4e58:	|  |  |  |  |  |  |  |              |  |              /--|-- bra.s 4e7a <continueFunction+0x596>
						stackGetByIndex (fun -> stack -> thisVar.varData.theStack -> first, ii);
    4e5a:	|  |  |  |  |  |  |  |              |  |              |  \-> move.l 4(sp),d0
    4e5e:	|  |  |  |  |  |  |  |              |  |              |      move.l d0,d1
    4e60:	|  |  |  |  |  |  |  |              |  |              |      movea.l 80(sp),a0
    4e64:	|  |  |  |  |  |  |  |              |  |              |      movea.l 24(a0),a0
    4e68:	|  |  |  |  |  |  |  |              |  |              |      movea.l 4(a0),a0
    4e6c:	|  |  |  |  |  |  |  |              |  |              |      move.l (a0),d0
    4e6e:	|  |  |  |  |  |  |  |              |  |              |      move.l d1,-(sp)
    4e70:	|  |  |  |  |  |  |  |              |  |              |      move.l d0,-(sp)
    4e72:	|  |  |  |  |  |  |  |              |  |              |      jsr 15062 <stackGetByIndex>
    4e78:	|  |  |  |  |  |  |  |              |  |              |      addq.l #8,sp
					struct variable * grab = (fun -> stack -> thisVar.varType == SVT_FASTARRAY) ?
    4e7a:	|  |  |  |  |  |  |  |              |  |              \----> move.l d0,60(sp)

					trimStack (&fun -> stack);
    4e7e:	|  |  |  |  |  |  |  |              |  |                     moveq #24,d0
    4e80:	|  |  |  |  |  |  |  |              |  |                     add.l 80(sp),d0
    4e84:	|  |  |  |  |  |  |  |              |  |                     move.l d0,-(sp)
    4e86:	|  |  |  |  |  |  |  |              |  |                     jsr 150d2 <trimStack>
    4e8c:	|  |  |  |  |  |  |  |              |  |                     addq.l #4,sp

					if (! grab) {
    4e8e:	|  |  |  |  |  |  |  |              |  |                     tst.l 60(sp)
    4e92:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 4eae <continueFunction+0x5ca>
						setVariable (&fun -> reg, SVT_NULL, 0);
    4e94:	|  |  |  |  |  |  |  |              |  |                 |   moveq #28,d0
    4e96:	|  |  |  |  |  |  |  |              |  |                 |   add.l 80(sp),d0
    4e9a:	|  |  |  |  |  |  |  |              |  |                 |   clr.l -(sp)
    4e9c:	|  |  |  |  |  |  |  |              |  |                 |   clr.l -(sp)
    4e9e:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,-(sp)
    4ea0:	|  |  |  |  |  |  |  |              |  |                 |   jsr 15040 <setVariable>
    4ea6:	|  |  |  |  |  |  |  |              |  |                 |   lea 12(sp),sp
							default:
							if (! copyVariable (grab, &fun -> reg)) return FALSE;
						}
					}
				}
				break;
    4eaa:	|  |  |  |  |  |  |  |              |  |  /--------------|-- bra.w 4f88 <continueFunction+0x6a4>
    4eae:	|  |  |  |  |  |  |  |              |  |  |              \-> moveq #39,d0
    4eb0:	|  |  |  |  |  |  |  |              |  |  |                  cmp.l 64(sp),d0
    4eb4:	|  |  |  |  |  |  |  |              |  |  |              /-- beq.s 4ec2 <continueFunction+0x5de>
    4eb6:	|  |  |  |  |  |  |  |              |  |  |              |   moveq #40,d1
    4eb8:	|  |  |  |  |  |  |  |              |  |  |              |   cmp.l 64(sp),d1
    4ebc:	|  |  |  |  |  |  |  |              |  |  |           /--|-- beq.s 4f0c <continueFunction+0x628>
    4ebe:	|  |  |  |  |  |  |  |              |  |  |  /--------|--|-- bra.w 4f54 <continueFunction+0x670>
							if (! getValueType (&ii, SVT_INT, grab)) return FALSE;
    4ec2:	|  |  |  |  |  |  |  |              |  |  |  |        |  \-> move.l 60(sp),-(sp)
    4ec6:	|  |  |  |  |  |  |  |              |  |  |  |        |      pea 1 <_start+0x1>
    4eca:	|  |  |  |  |  |  |  |              |  |  |  |        |      lea 8(sp),a0
    4ece:	|  |  |  |  |  |  |  |              |  |  |  |        |      move.l a0,-(sp)
    4ed0:	|  |  |  |  |  |  |  |              |  |  |  |        |      jsr 1474e <getValueType>
    4ed6:	|  |  |  |  |  |  |  |              |  |  |  |        |      lea 12(sp),sp
    4eda:	|  |  |  |  |  |  |  |              |  |  |  |        |      tst.w d0
    4edc:	|  |  |  |  |  |  |  |              |  |  |  |        |  /-- bne.s 4ee4 <continueFunction+0x600>
    4ede:	|  |  |  |  |  |  |  |              |  |  |  |        |  |   clr.w d0
    4ee0:	|  |  |  |  |  |  |  |              |  |  |  |  /-----|--|-- bra.w 4f6e <continueFunction+0x68a>
							setVariable (&fun -> reg, SVT_INT, ii);
    4ee4:	|  |  |  |  |  |  |  |              |  |  |  |  |     |  \-> move.l (sp),d1
    4ee6:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      moveq #28,d0
    4ee8:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      add.l 80(sp),d0
    4eec:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d1,-(sp)
    4eee:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      pea 1 <_start+0x1>
    4ef2:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d0,-(sp)
    4ef4:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      jsr 15040 <setVariable>
    4efa:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      lea 12(sp),sp
							grab -> varData.intValue = ii + 1;
    4efe:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l (sp),d0
    4f00:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      addq.l #1,d0
    4f02:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      movea.l 60(sp),a0
    4f06:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d0,4(a0)
							break;
    4f0a:	|  |  |  |  |  |  |  |              |  |  |  |  |  /--|----- bra.s 4f72 <continueFunction+0x68e>
							if (! getValueType (&ii, SVT_INT, grab)) return FALSE;
    4f0c:	|  |  |  |  |  |  |  |              |  |  |  |  |  |  \----> move.l 60(sp),-(sp)
    4f10:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         pea 1 <_start+0x1>
    4f14:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 8(sp),a0
    4f18:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l a0,-(sp)
    4f1a:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         jsr 1474e <getValueType>
    4f20:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 12(sp),sp
    4f24:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         tst.w d0
    4f26:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     /-- bne.s 4f2c <continueFunction+0x648>
    4f28:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     |   clr.w d0
    4f2a:	|  |  |  |  |  |  |  |              |  |  |  |  +--|-----|-- bra.s 4f6e <continueFunction+0x68a>
							setVariable (&fun -> reg, SVT_INT, ii);
    4f2c:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     \-> move.l (sp),d1
    4f2e:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         moveq #28,d0
    4f30:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         add.l 80(sp),d0
    4f34:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d1,-(sp)
    4f36:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         pea 1 <_start+0x1>
    4f3a:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d0,-(sp)
    4f3c:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         jsr 15040 <setVariable>
    4f42:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 12(sp),sp
							grab -> varData.intValue = ii - 1;
    4f46:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l (sp),d0
    4f48:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         subq.l #1,d0
    4f4a:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         movea.l 60(sp),a0
    4f4e:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d0,4(a0)
							break;
    4f52:	|  |  |  |  |  |  |  |              |  |  |  |  |  +-------- bra.s 4f72 <continueFunction+0x68e>
							if (! copyVariable (grab, &fun -> reg)) return FALSE;
    4f54:	|  |  |  |  |  |  |  |              |  |  |  \--|--|-------> moveq #28,d0
    4f56:	|  |  |  |  |  |  |  |              |  |  |     |  |         add.l 80(sp),d0
    4f5a:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l d0,-(sp)
    4f5c:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l 64(sp),-(sp)
    4f60:	|  |  |  |  |  |  |  |              |  |  |     |  |         jsr 14c08 <copyVariable>
    4f66:	|  |  |  |  |  |  |  |              |  |  |     |  |         addq.l #8,sp
    4f68:	|  |  |  |  |  |  |  |              |  |  |     |  |         tst.w d0
    4f6a:	|  |  |  |  |  |  |  |              |  |  +-----|--|-------- bne.s 4f88 <continueFunction+0x6a4>
    4f6c:	|  |  |  |  |  |  |  |              |  |  |     |  |         clr.w d0
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    4f6e:	|  +--|--|--|--|--|--|--------------|--|--|-----\--|-------X bra.w 578e <continueFunction+0xeaa>
				break;
    4f72:	|  |  |  |  |  |  |  |              |  |  +--------\-------X bra.s 4f88 <continueFunction+0x6a4>

				default:
				KPrintF((ERROR_INDEX_NONSTACK));
    4f74:	|  |  |  |  |  |  |  |              \--|--|----------------> pea 1878a <PutChar+0xb40>
    4f7a:	|  |  |  |  |  |  |  |                 |  |                  jsr 17176 <KPrintF>
    4f80:	|  |  |  |  |  |  |  |                 |  |                  addq.l #4,sp
				return FALSE;
    4f82:	|  |  |  |  |  |  |  |                 |  |                  clr.w d0
    4f84:	|  +--|--|--|--|--|--|-----------------|--|----------------- bra.w 578e <continueFunction+0xeaa>
				break;
    4f88:	|  |  |  |  |  |  |  |                 |  \----------------> nop
			}
			break;
    4f8a:	|  |  |  |  +--|--|--|-----------------\-------------------X bra.w 576c <continueFunction+0xe88>

			case SLU_INDEXSET:
			switch (fun -> stack -> thisVar.varType) {
    4f8e:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    4f92:	|  |  |  |  |  |  |  |                                       movea.l 24(a0),a0
    4f96:	|  |  |  |  |  |  |  |                                       move.l (a0),d0
    4f98:	|  |  |  |  |  |  |  |                                       moveq #6,d1
    4f9a:	|  |  |  |  |  |  |  |                                       cmp.l d0,d1
    4f9c:	|  |  |  |  |  |  |  |                                   /-- beq.s 4faa <continueFunction+0x6c6>
    4f9e:	|  |  |  |  |  |  |  |                                   |   moveq #10,d1
    4fa0:	|  |  |  |  |  |  |  |                                   |   cmp.l d0,d1
    4fa2:	|  |  |  |  |  |  |  |                                /--|-- beq.w 5056 <continueFunction+0x772>
    4fa6:	|  |  |  |  |  |  |  |                             /--|--|-- bra.w 50b4 <continueFunction+0x7d0>
				case SVT_STACK:
				if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    4faa:	|  |  |  |  |  |  |  |                             |  |  \-> movea.l 80(sp),a0
    4fae:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    4fb2:	|  |  |  |  |  |  |  |                             |  |      movea.l 4(a0),a0
    4fb6:	|  |  |  |  |  |  |  |                             |  |      move.l (a0),d0
    4fb8:	|  |  |  |  |  |  |  |                             |  |  /-- bne.s 4fce <continueFunction+0x6ea>
					KPrintF((ERROR_INDEX_EMPTY));
    4fba:	|  |  |  |  |  |  |  |                             |  |  |   pea 1876c <PutChar+0xb22>
    4fc0:	|  |  |  |  |  |  |  |                             |  |  |   jsr 17176 <KPrintF>
    4fc6:	|  |  |  |  |  |  |  |                             |  |  |   addq.l #4,sp
					return FALSE;
    4fc8:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    4fca:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 578e <continueFunction+0xeaa>
				} else {
					int ii;
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    4fce:	|  |  |  |  |  |  |  |                             |  |  \-> moveq #28,d0
    4fd0:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    4fd4:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    4fd6:	|  |  |  |  |  |  |  |                             |  |      pea 1 <_start+0x1>
    4fda:	|  |  |  |  |  |  |  |                             |  |      lea 16(sp),a0
    4fde:	|  |  |  |  |  |  |  |                             |  |      move.l a0,-(sp)
    4fe0:	|  |  |  |  |  |  |  |                             |  |      jsr 1474e <getValueType>
    4fe6:	|  |  |  |  |  |  |  |                             |  |      lea 12(sp),sp
    4fea:	|  |  |  |  |  |  |  |                             |  |      tst.w d0
    4fec:	|  |  |  |  |  |  |  |                             |  |  /-- bne.s 4ff4 <continueFunction+0x710>
    4fee:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    4ff0:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 578e <continueFunction+0xeaa>
					if (! stackSetByIndex (fun -> stack -> thisVar.varData.theStack -> first, ii, &fun -> stack -> next -> thisVar)) {
    4ff4:	|  |  |  |  |  |  |  |                             |  |  \-> movea.l 80(sp),a0
    4ff8:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    4ffc:	|  |  |  |  |  |  |  |                             |  |      move.l 8(a0),d0
    5000:	|  |  |  |  |  |  |  |                             |  |      movea.l d0,a1
    5002:	|  |  |  |  |  |  |  |                             |  |      move.l 8(sp),d0
    5006:	|  |  |  |  |  |  |  |                             |  |      move.l d0,d1
    5008:	|  |  |  |  |  |  |  |                             |  |      movea.l 80(sp),a0
    500c:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    5010:	|  |  |  |  |  |  |  |                             |  |      movea.l 4(a0),a0
    5014:	|  |  |  |  |  |  |  |                             |  |      move.l (a0),d0
    5016:	|  |  |  |  |  |  |  |                             |  |      move.l a1,-(sp)
    5018:	|  |  |  |  |  |  |  |                             |  |      move.l d1,-(sp)
    501a:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    501c:	|  |  |  |  |  |  |  |                             |  |      jsr 6b04 <stackSetByIndex>
    5022:	|  |  |  |  |  |  |  |                             |  |      lea 12(sp),sp
    5026:	|  |  |  |  |  |  |  |                             |  |      tst.w d0
    5028:	|  |  |  |  |  |  |  |                             |  |  /-- bne.s 5030 <continueFunction+0x74c>
						return FALSE;
    502a:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    502c:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 578e <continueFunction+0xeaa>
					}
					trimStack (&fun -> stack);
    5030:	|  |  |  |  |  |  |  |                             |  |  \-> moveq #24,d0
    5032:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    5036:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    5038:	|  |  |  |  |  |  |  |                             |  |      jsr 150d2 <trimStack>
    503e:	|  |  |  |  |  |  |  |                             |  |      addq.l #4,sp
					trimStack (&fun -> stack);
    5040:	|  |  |  |  |  |  |  |                             |  |      moveq #24,d0
    5042:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    5046:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    5048:	|  |  |  |  |  |  |  |                             |  |      jsr 150d2 <trimStack>
    504e:	|  |  |  |  |  |  |  |                             |  |      addq.l #4,sp
				}
				break;
    5050:	|  |  |  |  |  |  |  |                             |  |      nop

				default:
				KPrintF((ERROR_INDEX_NONSTACK));
				return FALSE;
			}
			break;
    5052:	|  |  |  |  +--|--|--|-----------------------------|--|----- bra.w 576c <continueFunction+0xe88>
					if (! getValueType (&ii, SVT_INT, &fun->reg)) return FALSE;
    5056:	|  |  |  |  |  |  |  |                             |  \----> moveq #28,d0
    5058:	|  |  |  |  |  |  |  |                             |         add.l 80(sp),d0
    505c:	|  |  |  |  |  |  |  |                             |         move.l d0,-(sp)
    505e:	|  |  |  |  |  |  |  |                             |         pea 1 <_start+0x1>
    5062:	|  |  |  |  |  |  |  |                             |         lea 20(sp),a0
    5066:	|  |  |  |  |  |  |  |                             |         move.l a0,-(sp)
    5068:	|  |  |  |  |  |  |  |                             |         jsr 1474e <getValueType>
    506e:	|  |  |  |  |  |  |  |                             |         lea 12(sp),sp
    5072:	|  |  |  |  |  |  |  |                             |         tst.w d0
    5074:	|  |  |  |  |  |  |  |                             |     /-- bne.s 507c <continueFunction+0x798>
    5076:	|  |  |  |  |  |  |  |                             |     |   clr.w d0
    5078:	|  +--|--|--|--|--|--|-----------------------------|-----|-- bra.w 578e <continueFunction+0xeaa>
					struct variable * v = fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii);
    507c:	|  |  |  |  |  |  |  |                             |     \-> move.l 12(sp),d0
    5080:	|  |  |  |  |  |  |  |                             |         move.l d0,d1
    5082:	|  |  |  |  |  |  |  |                             |         movea.l 80(sp),a0
    5086:	|  |  |  |  |  |  |  |                             |         movea.l 24(a0),a0
    508a:	|  |  |  |  |  |  |  |                             |         move.l 4(a0),d0
    508e:	|  |  |  |  |  |  |  |                             |         move.l d1,-(sp)
    5090:	|  |  |  |  |  |  |  |                             |         move.l d0,-(sp)
    5092:	|  |  |  |  |  |  |  |                             |         jsr 143d8 <fastArrayGetByIndex>
    5098:	|  |  |  |  |  |  |  |                             |         addq.l #8,sp
    509a:	|  |  |  |  |  |  |  |                             |         move.l d0,56(sp)
					if (v == NULL) KPrintF(("Not within bounds of fast array."));
    509e:	|  |  |  |  |  |  |  |                             |     /-- bne.s 50ae <continueFunction+0x7ca>
    50a0:	|  |  |  |  |  |  |  |                             |     |   pea 187ae <PutChar+0xb64>
    50a6:	|  |  |  |  |  |  |  |                             |     |   jsr 17176 <KPrintF>
    50ac:	|  |  |  |  |  |  |  |                             |     |   addq.l #4,sp
					return FALSE;
    50ae:	|  |  |  |  |  |  |  |                             |     \-> clr.w d0
    50b0:	|  +--|--|--|--|--|--|-----------------------------|-------- bra.w 578e <continueFunction+0xeaa>
				KPrintF((ERROR_INDEX_NONSTACK));
    50b4:	|  |  |  |  |  |  |  |                             \-------> pea 1878a <PutChar+0xb40>
    50ba:	|  |  |  |  |  |  |  |                                       jsr 17176 <KPrintF>
    50c0:	|  |  |  |  |  |  |  |                                       addq.l #4,sp
				return FALSE;
    50c2:	|  |  |  |  |  |  |  |                                       clr.w d0
    50c4:	|  +--|--|--|--|--|--|-------------------------------------- bra.w 578e <continueFunction+0xeaa>
			// variable, a global or onto the stack...

			case SLU_INCREMENT_LOCAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&fun -> localVars[param])) return FALSE;
    50c8:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    50cc:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    50d0:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    50d4:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    50d6:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    50d8:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    50da:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    50de:	|  |  |  |  |  |  |  |                                       lea 24(sp),a0
    50e2:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    50e4:	|  |  |  |  |  |  |  |                                       jsr 1474e <getValueType>
    50ea:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    50ee:	|  |  |  |  |  |  |  |                                       tst.w d0
    50f0:	|  |  |  |  |  |  |  |                                   /-- bne.s 50f8 <continueFunction+0x814>
    50f2:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    50f4:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 578e <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    50f8:	|  |  |  |  |  |  |  |                                   \-> move.l 16(sp),d1
    50fc:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    50fe:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    5102:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5104:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5108:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    510a:	|  |  |  |  |  |  |  |                                       jsr 15040 <setVariable>
    5110:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&(fun -> localVars[param]), SVT_INT, ii + 1);
    5114:	|  |  |  |  |  |  |  |                                       move.l 16(sp),d0
    5118:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    511a:	|  |  |  |  |  |  |  |                                       addq.l #1,d1
    511c:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    5120:	|  |  |  |  |  |  |  |                                       movea.l 20(a0),a0
    5124:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5128:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    512a:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    512c:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    512e:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5132:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5134:	|  |  |  |  |  |  |  |                                       jsr 15040 <setVariable>
    513a:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    513e:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 576c <continueFunction+0xe88>

			case SLU_INCREMENT_GLOBAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&globalVars[param])) return FALSE;
    5142:	|  |  |  |  |  |  |  |                                       move.l 1c80a <globalVars>,d1
    5148:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    514c:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    514e:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    5150:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5152:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5156:	|  |  |  |  |  |  |  |                                       lea 28(sp),a0
    515a:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    515c:	|  |  |  |  |  |  |  |                                       jsr 1474e <getValueType>
    5162:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    5166:	|  |  |  |  |  |  |  |                                       tst.w d0
    5168:	|  |  |  |  |  |  |  |                                   /-- bne.s 5170 <continueFunction+0x88c>
    516a:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    516c:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 578e <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    5170:	|  |  |  |  |  |  |  |                                   \-> move.l 20(sp),d1
    5174:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    5176:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    517a:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    517c:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5180:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5182:	|  |  |  |  |  |  |  |                                       jsr 15040 <setVariable>
    5188:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&globalVars[param], SVT_INT, ii + 1);
    518c:	|  |  |  |  |  |  |  |                                       move.l 20(sp),d0
    5190:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    5192:	|  |  |  |  |  |  |  |                                       addq.l #1,d1
    5194:	|  |  |  |  |  |  |  |                                       movea.l 1c80a <globalVars>,a0
    519a:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    519e:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    51a0:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    51a2:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    51a4:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    51a8:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    51aa:	|  |  |  |  |  |  |  |                                       jsr 15040 <setVariable>
    51b0:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    51b4:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 576c <continueFunction+0xe88>

			case SLU_DECREMENT_LOCAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&fun -> localVars[param])) return FALSE;
    51b8:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    51bc:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    51c0:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    51c4:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    51c6:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    51c8:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    51ca:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    51ce:	|  |  |  |  |  |  |  |                                       lea 32(sp),a0
    51d2:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    51d4:	|  |  |  |  |  |  |  |                                       jsr 1474e <getValueType>
    51da:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    51de:	|  |  |  |  |  |  |  |                                       tst.w d0
    51e0:	|  |  |  |  |  |  |  |                                   /-- bne.s 51e8 <continueFunction+0x904>
    51e2:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    51e4:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 578e <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    51e8:	|  |  |  |  |  |  |  |                                   \-> move.l 24(sp),d1
    51ec:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    51ee:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    51f2:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    51f4:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    51f8:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    51fa:	|  |  |  |  |  |  |  |                                       jsr 15040 <setVariable>
    5200:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&(fun -> localVars[param]), SVT_INT, ii - 1);
    5204:	|  |  |  |  |  |  |  |                                       move.l 24(sp),d0
    5208:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    520a:	|  |  |  |  |  |  |  |                                       subq.l #1,d1
    520c:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    5210:	|  |  |  |  |  |  |  |                                       movea.l 20(a0),a0
    5214:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5218:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    521a:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    521c:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    521e:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5222:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5224:	|  |  |  |  |  |  |  |                                       jsr 15040 <setVariable>
    522a:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    522e:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 576c <continueFunction+0xe88>

			case SLU_DECREMENT_GLOBAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&globalVars[param])) return FALSE;
    5232:	|  |  |  |  |  |  |  |                                       move.l 1c80a <globalVars>,d1
    5238:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    523c:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    523e:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    5240:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5242:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5246:	|  |  |  |  |  |  |  |                                       lea 36(sp),a0
    524a:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    524c:	|  |  |  |  |  |  |  |                                       jsr 1474e <getValueType>
    5252:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    5256:	|  |  |  |  |  |  |  |                                       tst.w d0
    5258:	|  |  |  |  |  |  |  |                                   /-- bne.s 5260 <continueFunction+0x97c>
    525a:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    525c:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 578e <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    5260:	|  |  |  |  |  |  |  |                                   \-> move.l 28(sp),d1
    5264:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    5266:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    526a:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    526c:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5270:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5272:	|  |  |  |  |  |  |  |                                       jsr 15040 <setVariable>
    5278:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&globalVars[param], SVT_INT, ii - 1);
    527c:	|  |  |  |  |  |  |  |                                       move.l 28(sp),d0
    5280:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    5282:	|  |  |  |  |  |  |  |                                       subq.l #1,d1
    5284:	|  |  |  |  |  |  |  |                                       movea.l 1c80a <globalVars>,a0
    528a:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    528e:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5290:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    5292:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5294:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5298:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    529a:	|  |  |  |  |  |  |  |                                       jsr 15040 <setVariable>
    52a0:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    52a4:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 576c <continueFunction+0xe88>

			case SLU_SET_LOCAL:
			if (! copyVariable (&fun -> reg, &(fun -> localVars[param]))) return FALSE;
    52a8:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    52ac:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    52b0:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    52b4:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    52b6:	|  |  |  |  |  |  |  |                                       add.l d0,d1
    52b8:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    52ba:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    52be:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    52c0:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    52c2:	|  |  |  |  |  |  |  |                                       jsr 14c08 <copyVariable>
    52c8:	|  |  |  |  |  |  |  |                                       addq.l #8,sp
    52ca:	|  |  |  |  |  |  |  |                                       tst.w d0
    52cc:	|  |  |  |  |  |  |  |  /----------------------------------- bne.w 5756 <continueFunction+0xe72>
    52d0:	|  |  |  |  |  |  |  |  |                                    clr.w d0
    52d2:	|  +--|--|--|--|--|--|--|----------------------------------- bra.w 578e <continueFunction+0xeaa>
			break;

			case SLU_SET_GLOBAL:
//			newDebug ("  Copying TO global variable", param);
//			newDebug ("  Global type at the moment", globalVars[param].varType);
			if (! copyVariable (&fun -> reg, &globalVars[param])) return FALSE;
    52d6:	|  |  |  |  |  |  |  |  |                                    move.l 1c80a <globalVars>,d1
    52dc:	|  |  |  |  |  |  |  |  |                                    move.l 68(sp),d0
    52e0:	|  |  |  |  |  |  |  |  |                                    lsl.l #3,d0
    52e2:	|  |  |  |  |  |  |  |  |                                    add.l d0,d1
    52e4:	|  |  |  |  |  |  |  |  |                                    moveq #28,d0
    52e6:	|  |  |  |  |  |  |  |  |                                    add.l 80(sp),d0
    52ea:	|  |  |  |  |  |  |  |  |                                    move.l d1,-(sp)
    52ec:	|  |  |  |  |  |  |  |  |                                    move.l d0,-(sp)
    52ee:	|  |  |  |  |  |  |  |  |                                    jsr 14c08 <copyVariable>
    52f4:	|  |  |  |  |  |  |  |  |                                    addq.l #8,sp
    52f6:	|  |  |  |  |  |  |  |  |                                    tst.w d0
    52f8:	|  |  |  |  |  |  |  |  |  /-------------------------------- bne.w 575a <continueFunction+0xe76>
    52fc:	|  |  |  |  |  |  |  |  |  |                                 clr.w d0
    52fe:	|  +--|--|--|--|--|--|--|--|-------------------------------- bra.w 578e <continueFunction+0xeaa>
			break;

			case SLU_LOAD_GLOBAL:
//			newDebug ("  Copying FROM global variable", param);
//			newDebug ("  Global type at the moment", globalVars[param].varType);
			if (! copyVariable (&globalVars[param], &fun -> reg)) return FALSE;
    5302:	|  |  |  |  |  |  |  |  |  |                                 moveq #28,d0
    5304:	|  |  |  |  |  |  |  |  |  |                                 add.l 80(sp),d0
    5308:	|  |  |  |  |  |  |  |  |  |                                 movea.l 1c80a <globalVars>,a0
    530e:	|  |  |  |  |  |  |  |  |  |                                 move.l 68(sp),d1
    5312:	|  |  |  |  |  |  |  |  |  |                                 lsl.l #3,d1
    5314:	|  |  |  |  |  |  |  |  |  |                                 add.l a0,d1
    5316:	|  |  |  |  |  |  |  |  |  |                                 move.l d0,-(sp)
    5318:	|  |  |  |  |  |  |  |  |  |                                 move.l d1,-(sp)
    531a:	|  |  |  |  |  |  |  |  |  |                                 jsr 14c08 <copyVariable>
    5320:	|  |  |  |  |  |  |  |  |  |                                 addq.l #8,sp
    5322:	|  |  |  |  |  |  |  |  |  |                                 tst.w d0
    5324:	|  |  |  |  |  |  |  |  |  |  /----------------------------- bne.w 575e <continueFunction+0xe7a>
    5328:	|  |  |  |  |  |  |  |  |  |  |                              clr.w d0
    532a:	|  +--|--|--|--|--|--|--|--|--|----------------------------- bra.w 578e <continueFunction+0xeaa>
			break;

			case SLU_STACK_PUSH:
			if (! addVarToStack (&fun -> reg, &fun -> stack)) return FALSE;
    532e:	|  |  |  |  |  |  |  |  |  |  |                              moveq #24,d1
    5330:	|  |  |  |  |  |  |  |  |  |  |                              add.l 80(sp),d1
    5334:	|  |  |  |  |  |  |  |  |  |  |                              moveq #28,d0
    5336:	|  |  |  |  |  |  |  |  |  |  |                              add.l 80(sp),d0
    533a:	|  |  |  |  |  |  |  |  |  |  |                              move.l d1,-(sp)
    533c:	|  |  |  |  |  |  |  |  |  |  |                              move.l d0,-(sp)
    533e:	|  |  |  |  |  |  |  |  |  |  |                              jsr 13f8a <addVarToStack>
    5344:	|  |  |  |  |  |  |  |  |  |  |                              addq.l #8,sp
    5346:	|  |  |  |  |  |  |  |  |  |  |                              tst.w d0
    5348:	|  |  |  |  |  |  |  |  |  |  |  /-------------------------- bne.w 5762 <continueFunction+0xe7e>
    534c:	|  |  |  |  |  |  |  |  |  |  |  |                           clr.w d0
    534e:	|  +--|--|--|--|--|--|--|--|--|--|-------------------------- bra.w 578e <continueFunction+0xeaa>
			break;

			case SLU_QUICK_PUSH:
			if (! addVarToStackQuick (&fun -> reg, &fun -> stack)) return FALSE;
    5352:	|  |  |  |  |  |  |  |  |  |  |  |                           moveq #24,d1
    5354:	|  |  |  |  |  |  |  |  |  |  |  |                           add.l 80(sp),d1
    5358:	|  |  |  |  |  |  |  |  |  |  |  |                           moveq #28,d0
    535a:	|  |  |  |  |  |  |  |  |  |  |  |                           add.l 80(sp),d0
    535e:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l d1,-(sp)
    5360:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l d0,-(sp)
    5362:	|  |  |  |  |  |  |  |  |  |  |  |                           jsr 14010 <addVarToStackQuick>
    5368:	|  |  |  |  |  |  |  |  |  |  |  |                           addq.l #8,sp
    536a:	|  |  |  |  |  |  |  |  |  |  |  |                           tst.w d0
    536c:	|  |  |  |  |  |  |  |  |  |  |  |  /----------------------- bne.w 5766 <continueFunction+0xe82>
    5370:	|  |  |  |  |  |  |  |  |  |  |  |  |                        clr.w d0
    5372:	|  +--|--|--|--|--|--|--|--|--|--|--|----------------------- bra.w 578e <continueFunction+0xeaa>
			break;

			case SLU_NOT:
			setVariable (&fun -> reg, SVT_INT, ! getBoolean (&fun -> reg));
    5376:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    5378:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    537c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    537e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 14c8e <getBoolean>
    5384:	|  |  |  |  |  |  |  |  |  |  |  |  |                        addq.l #4,sp
    5386:	|  |  |  |  |  |  |  |  |  |  |  |  |                        tst.w d0
    5388:	|  |  |  |  |  |  |  |  |  |  |  |  |                        seq d0
    538a:	|  |  |  |  |  |  |  |  |  |  |  |  |                        neg.b d0
    538c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #0,d1
    538e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.b d0,d1
    5390:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    5392:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    5396:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d1,-(sp)
    5398:	|  |  |  |  |  |  |  |  |  |  |  |  |                        pea 1 <_start+0x1>
    539c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    539e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 15040 <setVariable>
    53a4:	|  |  |  |  |  |  |  |  |  |  |  |  |                        lea 12(sp),sp
			break;
    53a8:	|  |  |  |  +--|--|--|--|--|--|--|--|----------------------- bra.w 576c <continueFunction+0xe88>

			case SLU_BR_ZERO:
			if (! getBoolean (&fun -> reg)) {
    53ac:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    53ae:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    53b2:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    53b4:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 14c8e <getBoolean>
    53ba:	|  |  |  |  |  |  |  |  |  |  |  |  |                        addq.l #4,sp
    53bc:	|  |  |  |  |  |  |  |  |  |  |  |  |                        tst.w d0
    53be:	|  |  |  |  |  |  |  |  |  |  |  |  |  /-------------------- bne.w 576a <continueFunction+0xe86>
				advanceNow = FALSE;
    53c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     clr.w 72(sp)
				fun -> runThisLine = param;
    53c6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    53ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 68(sp),36(a0)
			}
			break;
    53d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  +-------------------- bra.w 576a <continueFunction+0xe86>

			case SLU_BRANCH:
			advanceNow = FALSE;
    53d4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     clr.w 72(sp)
			fun -> runThisLine = param;
    53d8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    53dc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 68(sp),36(a0)
			break;
    53e2:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-------------------- bra.w 576c <continueFunction+0xe88>

			case SLU_NEGATIVE:
			{
				int i;
				if (! getValueType(&i, SVT_INT,&fun -> reg)) return FALSE;
    53e6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     moveq #28,d0
    53e8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     add.l 80(sp),d0
    53ec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,-(sp)
    53ee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     pea 1 <_start+0x1>
    53f2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 40(sp),a0
    53f6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l a0,-(sp)
    53f8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     jsr 1474e <getValueType>
    53fe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 12(sp),sp
    5402:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     tst.w d0
    5404:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 /-- bne.s 540c <continueFunction+0xb28>
    5406:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 |   clr.w d0
    5408:	|  +--|--|--|--|--|--|--|--|--|--|--|--|-----------------|-- bra.w 578e <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, -i);
    540c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 \-> move.l 32(sp),d0
    5410:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,d1
    5412:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     neg.l d1
    5414:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     moveq #28,d0
    5416:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     add.l 80(sp),d0
    541a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d1,-(sp)
    541c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     pea 1 <_start+0x1>
    5420:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,-(sp)
    5422:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     jsr 15040 <setVariable>
    5428:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 12(sp),sp
			}
			break;
    542c:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-------------------- bra.w 576c <continueFunction+0xe88>
			case SLU_NOT_EQ:
			case SLU_LESSTHAN:
			case SLU_MORETHAN:
			case SLU_LESS_EQUAL:
			case SLU_MORE_EQUAL:
			if (fun -> stack) {
    5430:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    5434:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 24(a0),d0
    5438:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  /----------------- beq.w 5722 <continueFunction+0xe3e>
    543c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  moveq #15,d0
    543e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  cmp.l 64(sp),d0
    5442:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        /-------- beq.s 54be <continueFunction+0xbda>
    5444:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #15,d1
    5446:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         cmp.l 64(sp),d1
    544a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     /--|-------- bcs.w 5508 <continueFunction+0xc24>
    544e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |         moveq #8,d0
    5450:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |         cmp.l 64(sp),d0
    5454:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     /-- beq.s 5462 <continueFunction+0xb7e>
    5456:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |   moveq #14,d1
    5458:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |   cmp.l 64(sp),d1
    545c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  /--|-- beq.s 5490 <continueFunction+0xbac>
    545e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     +--|--|--|-- bra.w 5508 <continueFunction+0xc24>
				int firstValue, secondValue;

				switch (com) {
					case SLU_PLUS:
					addVariablesInSecond (&fun -> stack -> thisVar, &fun -> reg);
    5462:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  \-> moveq #28,d0
    5464:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      add.l 80(sp),d0
    5468:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      movea.l 80(sp),a0
    546c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l 24(a0),d1
    5470:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d0,-(sp)
    5472:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d1,-(sp)
    5474:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      jsr 14084 <addVariablesInSecond>
    547a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      addq.l #8,sp
					trimStack (&fun -> stack);
    547c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      moveq #24,d0
    547e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      add.l 80(sp),d0
    5482:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d0,-(sp)
    5484:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      jsr 150d2 <trimStack>
    548a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      addq.l #4,sp
					break;
    548c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  /--|--|--|----- bra.w 5736 <continueFunction+0xe52>

					case SLU_EQUALS:
					compareVariablesInSecond (&(fun -> stack -> thisVar), &fun -> reg);
    5490:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \----> moveq #28,d0
    5492:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         add.l 80(sp),d0
    5496:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         movea.l 80(sp),a0
    549a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l 24(a0),d1
    549e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d0,-(sp)
    54a0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d1,-(sp)
    54a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         jsr 14142 <compareVariablesInSecond>
    54a8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         addq.l #8,sp
					trimStack (&fun -> stack);
    54aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         moveq #24,d0
    54ac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         add.l 80(sp),d0
    54b0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d0,-(sp)
    54b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         jsr 150d2 <trimStack>
    54b8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         addq.l #4,sp
					break;
    54ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|--|-------- bra.w 5736 <continueFunction+0xe52>

					case SLU_NOT_EQ:
					compareVariablesInSecond (&(fun -> stack -> thisVar), &fun -> reg);
    54be:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \-------> moveq #28,d0
    54c0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            add.l 80(sp),d0
    54c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    54c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 24(a0),d1
    54cc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,-(sp)
    54ce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d1,-(sp)
    54d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            jsr 14142 <compareVariablesInSecond>
    54d6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            addq.l #8,sp
					trimStack (&fun -> stack);
    54d8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            moveq #24,d0
    54da:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            add.l 80(sp),d0
    54de:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,-(sp)
    54e0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            jsr 150d2 <trimStack>
    54e6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            addq.l #4,sp
	               	fun -> reg.varData.intValue = ! fun -> reg.varData.intValue;
    54e8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    54ec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 32(a0),d0
    54f0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            seq d0
    54f2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            neg.b d0
    54f4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.b d0,d0
    54f6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            andi.l #255,d0
    54fc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    5500:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,32(a0)
					break;
    5504:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|----------- bra.w 5736 <continueFunction+0xe52>

					default:
					if (! getValueType (&firstValue, SVT_INT, &fun->stack->thisVar)) return FALSE;
    5508:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \----------> movea.l 80(sp),a0
    550c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l 24(a0),d0
    5510:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    5512:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               pea 1 <_start+0x1>
    5516:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 48(sp),a0
    551a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l a0,-(sp)
    551c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 1474e <getValueType>
    5522:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 12(sp),sp
    5526:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               tst.w d0
    5528:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           /-- bne.s 5530 <continueFunction+0xc4c>
    552a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   clr.w d0
    552c:	|  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|-----------|-- bra.w 578e <continueFunction+0xeaa>
					if (! getValueType(&secondValue, SVT_INT,&fun -> reg)) return FALSE;
    5530:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           \-> moveq #28,d0
    5532:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 80(sp),d0
    5536:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    5538:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               pea 1 <_start+0x1>
    553c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 44(sp),a0
    5540:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l a0,-(sp)
    5542:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 1474e <getValueType>
    5548:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 12(sp),sp
    554c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               tst.w d0
    554e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           /-- bne.s 5556 <continueFunction+0xc72>
    5550:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   clr.w d0
    5552:	|  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|-----------|-- bra.w 578e <continueFunction+0xeaa>
					trimStack (&fun -> stack);
    5556:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           \-> moveq #24,d0
    5558:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 80(sp),d0
    555c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    555e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 150d2 <trimStack>
    5564:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               addq.l #4,sp
    5566:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               moveq #-9,d0
    5568:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 64(sp),d0
    556c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               moveq #23,d1
    556e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               cmp.l d0,d1
    5570:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           /-- bcs.w 5734 <continueFunction+0xe50>
    5574:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l d0,d0
    5576:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   movea.l d0,a0
    5578:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   adda.l #21892,a0
    557e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.w (a0),d0
    5580:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jmp (5584 <continueFunction+0xca0>,pc,d0.w)
    5584:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   ori.w #48,-(a2)
    5588:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x00ba
    558a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    5592:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x0088
    5594:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    559c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    55a4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(15466778,d0.w)
    55ac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(21365106,d0.w)

					switch (com) {
						case SLU_MULT:
						setVariable (&fun -> reg, SVT_INT, firstValue * secondValue);
    55b4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    55b8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    55bc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    55be:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    55c0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 17b34 <__mulsi3>
    55c6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    55c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    55ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    55cc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    55d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    55d2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    55d6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    55d8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 15040 <setVariable>
    55de:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    55e2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 5736 <continueFunction+0xe52>

						case SLU_MINUS:
						setVariable (&fun -> reg, SVT_INT, firstValue - secondValue);
    55e6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    55ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    55ee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sub.l d0,d1
    55f0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    55f2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    55f6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    55f8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    55fc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    55fe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 15040 <setVariable>
    5604:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    5608:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 5736 <continueFunction+0xe52>

						case SLU_MODULUS:
						setVariable (&fun -> reg, SVT_INT, firstValue % secondValue);
    560c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    5610:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    5614:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5616:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5618:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 17be0 <__modsi3>
    561e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    5620:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    5622:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    5624:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    5628:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    562a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    562e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5630:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 15040 <setVariable>
    5636:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    563a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 5736 <continueFunction+0xe52>

						case SLU_DIVIDE:
						setVariable (&fun -> reg, SVT_INT, firstValue / secondValue);
    563e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    5642:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    5646:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5648:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    564a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 17bb2 <__divsi3>
    5650:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    5652:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    5654:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    5656:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    565a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    565c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    5660:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5662:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 15040 <setVariable>
    5668:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    566c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 5736 <continueFunction+0xe52>

						case SLU_LESSTHAN:
						setVariable (&fun -> reg, SVT_INT, firstValue < secondValue);
    5670:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    5674:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    5678:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    567a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sgt d0
    567c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    567e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    5680:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    5682:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    5684:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    5688:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    568a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    568e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5690:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 15040 <setVariable>
    5696:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    569a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 5736 <continueFunction+0xe52>

						case SLU_MORETHAN:
						setVariable (&fun -> reg, SVT_INT, firstValue > secondValue);
    569e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    56a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    56a6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    56a8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   slt d0
    56aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    56ac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    56ae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    56b0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    56b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    56b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    56b8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    56bc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    56be:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 15040 <setVariable>
    56c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    56c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 5736 <continueFunction+0xe52>

						case SLU_LESS_EQUAL:
						setVariable (&fun -> reg, SVT_INT, firstValue <= secondValue);
    56ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    56ce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    56d2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    56d4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sge d0
    56d6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    56d8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    56da:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    56dc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    56de:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    56e2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    56e4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    56e8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    56ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 15040 <setVariable>
    56f0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    56f4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 5736 <continueFunction+0xe52>

						case SLU_MORE_EQUAL:
						setVariable (&fun -> reg, SVT_INT, firstValue >= secondValue);
    56f6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    56fa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    56fe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    5700:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sle d0
    5702:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    5704:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    5706:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    5708:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    570a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    570e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5710:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    5714:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5716:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 15040 <setVariable>
    571c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    5720:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 5736 <continueFunction+0xe52>
						default:
						break;
					}
				}
			} else {
				KPrintF((ERROR_NOSTACK));
    5722:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  \--|-----------|-> pea 187cf <PutChar+0xb85>
    5728:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   jsr 17176 <KPrintF>
    572e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   addq.l #4,sp
				return FALSE;
    5730:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   clr.w d0
    5732:	|  +--|--|--|--|--|--|--|--|--|--|--|--|-----|-----------|-- bra.s 578e <continueFunction+0xeaa>
						break;
    5734:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           \-> nop
			}
			break;
    5736:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-----\-------------X bra.s 576c <continueFunction+0xe88>

			default:
			KPrintF((ERROR_UNKNOWN_CODE));
    5738:	|  |  |  \--|--|--|--|--|--|--|--|--|--|-------------------> pea 187e7 <PutChar+0xb9d>
    573e:	|  |  |     |  |  |  |  |  |  |  |  |  |                     jsr 17176 <KPrintF>
    5744:	|  |  |     |  |  |  |  |  |  |  |  |  |                     addq.l #4,sp
			return FALSE;
    5746:	|  |  |     |  |  |  |  |  |  |  |  |  |                     clr.w d0
    5748:	|  +--|-----|--|--|--|--|--|--|--|--|--|-------------------- bra.s 578e <continueFunction+0xeaa>
			break;
    574a:	|  |  |     |  \--|--|--|--|--|--|--|--|-------------------> nop
    574c:	|  |  |     +-----|--|--|--|--|--|--|--|-------------------- bra.s 576c <continueFunction+0xe88>
			break;
    574e:	|  |  |     |     \--|--|--|--|--|--|--|-------------------> nop
    5750:	|  |  |     +--------|--|--|--|--|--|--|-------------------- bra.s 576c <continueFunction+0xe88>
			break;
    5752:	|  |  |     |        \--|--|--|--|--|--|-------------------> nop
    5754:	|  |  |     +-----------|--|--|--|--|--|-------------------- bra.s 576c <continueFunction+0xe88>
			break;
    5756:	|  |  |     |           \--|--|--|--|--|-------------------> nop
    5758:	|  |  |     +--------------|--|--|--|--|-------------------- bra.s 576c <continueFunction+0xe88>
			break;
    575a:	|  |  |     |              \--|--|--|--|-------------------> nop
    575c:	|  |  |     +-----------------|--|--|--|-------------------- bra.s 576c <continueFunction+0xe88>
			break;
    575e:	|  |  |     |                 \--|--|--|-------------------> nop
    5760:	|  |  |     +--------------------|--|--|-------------------- bra.s 576c <continueFunction+0xe88>
			break;
    5762:	|  |  |     |                    \--|--|-------------------> nop
    5764:	|  |  |     +-----------------------|--|-------------------- bra.s 576c <continueFunction+0xe88>
			break;
    5766:	|  |  |     |                       \--|-------------------> nop
    5768:	|  |  |     +--------------------------|-------------------- bra.s 576c <continueFunction+0xe88>
			break;
    576a:	|  |  |     |                          \-------------------> nop
		}

		if (advanceNow) fun -> runThisLine ++;
    576c:	|  |  |     \----------------------------------------------> tst.w 72(sp)
    5770:	+--|--|----------------------------------------------------- beq.s 5784 <continueFunction+0xea0>
    5772:	|  |  |                                                      movea.l 80(sp),a0
    5776:	|  |  |                                                      move.l 36(a0),d0
    577a:	|  |  |                                                      addq.l #1,d0
    577c:	|  |  |                                                      movea.l 80(sp),a0
    5780:	|  |  |                                                      move.l d0,36(a0)
	while (keepLooping) {
    5784:	\--|--|----------------------------------------------------> tst.w 74(sp)
    5788:	   |  \----------------------------------------------------- bne.w 490c <continueFunction+0x28>

	}
	return TRUE;
    578c:	   |                                                         moveq #1,d0
}
    578e:	   \-------------------------------------------------------> lea 76(sp),sp
    5792:	                                                             rts

00005794 <finishFunction>:

void finishFunction (struct loadedFunction * fun) {
    5794:	          lea -16(sp),sp
    5798:	          move.l a6,-(sp)
	int a;

	pauseFunction (fun);
    579a:	          move.l 24(sp),-(sp)
    579e:	          jsr 68ba <pauseFunction>
    57a4:	          addq.l #4,sp
	if (fun -> stack) 
    57a6:	          movea.l 24(sp),a0
    57aa:	          move.l 24(a0),d0
    57ae:	      /-- beq.s 57c2 <finishFunction+0x2e>
	{
		KPrintF("finishfunction: error non empty stack");
    57b0:	      |   pea 18813 <PutChar+0xbc9>
    57b6:	      |   jsr 17176 <KPrintF>
    57bc:	      |   addq.l #4,sp
		return;
    57be:	/-----|-- bra.w 585c <finishFunction+0xc8>
	}
	FreeVec( fun -> compiledLines);
    57c2:	|     \-> movea.l 24(sp),a0
    57c6:	|         move.l 4(a0),12(sp)
    57cc:	|         move.l 1c85c <SysBase>,d0
    57d2:	|         movea.l d0,a6
    57d4:	|         movea.l 12(sp),a1
    57d8:	|         jsr -690(a6)
	for (a = 0; a < fun -> numLocals; a ++) unlinkVar (&(fun -> localVars[a]));
    57dc:	|         clr.l 16(sp)
    57e0:	|     /-- bra.s 5800 <finishFunction+0x6c>
    57e2:	|  /--|-> movea.l 24(sp),a0
    57e6:	|  |  |   move.l 20(a0),d1
    57ea:	|  |  |   move.l 16(sp),d0
    57ee:	|  |  |   lsl.l #3,d0
    57f0:	|  |  |   add.l d1,d0
    57f2:	|  |  |   move.l d0,-(sp)
    57f4:	|  |  |   jsr 1499c <unlinkVar>
    57fa:	|  |  |   addq.l #4,sp
    57fc:	|  |  |   addq.l #1,16(sp)
    5800:	|  |  \-> movea.l 24(sp),a0
    5804:	|  |      move.l 8(a0),d0
    5808:	|  |      cmp.l 16(sp),d0
    580c:	|  \----- bgt.s 57e2 <finishFunction+0x4e>
	if( fun->numLocals > 0) {
    580e:	|         movea.l 24(sp),a0
    5812:	|         move.l 8(a0),d0
    5816:	|     /-- ble.s 5832 <finishFunction+0x9e>
		FreeVec(fun -> localVars);
    5818:	|     |   movea.l 24(sp),a0
    581c:	|     |   move.l 20(a0),8(sp)
    5822:	|     |   move.l 1c85c <SysBase>,d0
    5828:	|     |   movea.l d0,a6
    582a:	|     |   movea.l 8(sp),a1
    582e:	|     |   jsr -690(a6)
	}
	unlinkVar (&fun -> reg);
    5832:	|     \-> moveq #28,d0
    5834:	|         add.l 24(sp),d0
    5838:	|         move.l d0,-(sp)
    583a:	|         jsr 1499c <unlinkVar>
    5840:	|         addq.l #4,sp
	FreeVec(fun);
    5842:	|         move.l 24(sp),4(sp)
    5848:	|         move.l 1c85c <SysBase>,d0
    584e:	|         movea.l d0,a6
    5850:	|         movea.l 4(sp),a1
    5854:	|         jsr -690(a6)
	fun = NULL;
    5858:	|         clr.l 24(sp)
}
    585c:	\-------> movea.l (sp)+,a6
    585e:	          lea 16(sp),sp
    5862:	          rts

00005864 <freezeSubs>:

void freezeSubs () {
    5864:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    5866:	          move.l 1c7f4 <allRunningFunctions>,(sp)

	while (thisFunction) {
    586c:	   /----- bra.s 588a <freezeSubs+0x26>
		if (thisFunction -> unfreezable) {
    586e:	/--|----> movea.l (sp),a0
    5870:	|  |      move.w 52(a0),d0
    5874:	|  |  /-- bne.s 5884 <freezeSubs+0x20>
			//msgBox ("SLUDGE debugging bollocks!", "Trying to freeze an unfreezable function!");
		} else {
			thisFunction -> freezerLevel ++;
    5876:	|  |  |   movea.l (sp),a0
    5878:	|  |  |   move.b 56(a0),d0
    587c:	|  |  |   addq.b #1,d0
    587e:	|  |  |   movea.l (sp),a0
    5880:	|  |  |   move.b d0,56(a0)
		}
		thisFunction = thisFunction -> next;
    5884:	|  |  \-> movea.l (sp),a0
    5886:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    588a:	|  \----> tst.l (sp)
    588c:	\-------- bne.s 586e <freezeSubs+0xa>
	}
}
    588e:	          nop
    5890:	          nop
    5892:	          addq.l #4,sp
    5894:	          rts

00005896 <handleInput>:

BOOL handleInput () {
    5896:	             lea -16(sp),sp
    589a:	             move.l a6,-(sp)
	//Amiga Todo: import more from orig code and adjust 

	if (! overRegion) getOverRegion ();
    589c:	             move.l 1c970 <overRegion>,d0
    58a2:	         /-- bne.s 58aa <handleInput+0x14>
    58a4:	         |   jsr 15912 <getOverRegion>

	if (input.justMoved) {
    58aa:	         \-> move.w 1c812 <input+0x4>,d0
    58b0:	         /-- beq.s 58ee <handleInput+0x58>
		if (currentEvents -> moveMouseFunction) {
    58b2:	         |   movea.l 1c1d4 <currentEvents>,a0
    58b8:	         |   move.l 16(a0),d0
    58bc:	         +-- beq.s 58ee <handleInput+0x58>
			if (! startNewFunctionNum (currentEvents -> moveMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    58be:	         |   move.l 1c82c <noStack>,d1
    58c4:	         |   movea.l 1c1d4 <currentEvents>,a0
    58ca:	         |   move.l 16(a0),d0
    58ce:	         |   pea 1 <_start+0x1>
    58d2:	         |   move.l d1,-(sp)
    58d4:	         |   clr.l -(sp)
    58d6:	         |   clr.l -(sp)
    58d8:	         |   move.l d0,-(sp)
    58da:	         |   jsr 6b48 <startNewFunctionNum>
    58e0:	         |   lea 20(sp),sp
    58e4:	         |   tst.l d0
    58e6:	         +-- bne.s 58ee <handleInput+0x58>
    58e8:	         |   clr.w d0
    58ea:	/--------|-- bra.w 5af4 <handleInput+0x25e>
		}
	}
	input.justMoved = FALSE;
    58ee:	|        \-> clr.w 1c812 <input+0x4>

	if (lastRegion != overRegion && currentEvents -> focusFunction) {
    58f4:	|            move.l 1c824 <lastRegion>,d1
    58fa:	|            move.l 1c970 <overRegion>,d0
    5900:	|            cmp.l d1,d0
    5902:	|  /-------- beq.w 59da <handleInput+0x144>
    5906:	|  |         movea.l 1c1d4 <currentEvents>,a0
    590c:	|  |         move.l 20(a0),d0
    5910:	|  +-------- beq.w 59da <handleInput+0x144>
		struct variableStack * tempStack = AllocVec( sizeof(struct variableStack), MEMF_ANY);
    5914:	|  |         moveq #12,d0
    5916:	|  |         move.l d0,16(sp)
    591a:	|  |         clr.l 12(sp)
    591e:	|  |         move.l 1c85c <SysBase>,d0
    5924:	|  |         movea.l d0,a6
    5926:	|  |         move.l 16(sp),d0
    592a:	|  |         move.l 12(sp),d1
    592e:	|  |         jsr -684(a6)
    5932:	|  |         move.l d0,8(sp)
    5936:	|  |         move.l 8(sp),d0
    593a:	|  |         move.l d0,4(sp)
		if(!tempStack) {
    593e:	|  |         move.l 4(sp),d0
    5942:	|  |     /-- bne.s 5958 <handleInput+0xc2>
			KPrintF("handleInput: Cannot allocate memory for variablestack");
    5944:	|  |     |   pea 18839 <PutChar+0xbef>
    594a:	|  |     |   jsr 17176 <KPrintF>
    5950:	|  |     |   addq.l #4,sp
			return FALSE;
    5952:	|  |     |   clr.w d0
    5954:	+--|-----|-- bra.w 5af4 <handleInput+0x25e>
		}
		
		initVarNew (tempStack -> thisVar);
    5958:	|  |     \-> movea.l 4(sp),a0
    595c:	|  |         clr.l (a0)
		if (overRegion) {
    595e:	|  |         move.l 1c970 <overRegion>,d0
    5964:	|  |  /----- beq.s 598c <handleInput+0xf6>
			setVariable (&tempStack -> thisVar, SVT_OBJTYPE, overRegion -> thisType -> objectNum);
    5966:	|  |  |      movea.l 1c970 <overRegion>,a0
    596c:	|  |  |      movea.l 28(a0),a0
    5970:	|  |  |      move.l 4(a0),d1
    5974:	|  |  |      move.l 4(sp),d0
    5978:	|  |  |      move.l d1,-(sp)
    597a:	|  |  |      pea 7 <_start+0x7>
    597e:	|  |  |      move.l d0,-(sp)
    5980:	|  |  |      jsr 15040 <setVariable>
    5986:	|  |  |      lea 12(sp),sp
    598a:	|  |  |  /-- bra.s 59a2 <handleInput+0x10c>
		} else {
			setVariable (&tempStack -> thisVar, SVT_INT, 0);
    598c:	|  |  \--|-> move.l 4(sp),d0
    5990:	|  |     |   clr.l -(sp)
    5992:	|  |     |   pea 1 <_start+0x1>
    5996:	|  |     |   move.l d0,-(sp)
    5998:	|  |     |   jsr 15040 <setVariable>
    599e:	|  |     |   lea 12(sp),sp
		}
		tempStack -> next = NULL;
    59a2:	|  |     \-> movea.l 4(sp),a0
    59a6:	|  |         clr.l 8(a0)
		if (! startNewFunctionNum (currentEvents -> focusFunction, 1, NULL, &tempStack, TRUE)) return FALSE;
    59aa:	|  |         movea.l 1c1d4 <currentEvents>,a0
    59b0:	|  |         move.l 20(a0),d0
    59b4:	|  |         pea 1 <_start+0x1>
    59b8:	|  |         lea 8(sp),a0
    59bc:	|  |         move.l a0,-(sp)
    59be:	|  |         clr.l -(sp)
    59c0:	|  |         pea 1 <_start+0x1>
    59c4:	|  |         move.l d0,-(sp)
    59c6:	|  |         jsr 6b48 <startNewFunctionNum>
    59cc:	|  |         lea 20(sp),sp
    59d0:	|  |         tst.l d0
    59d2:	|  +-------- bne.s 59da <handleInput+0x144>
    59d4:	|  |         clr.w d0
    59d6:	+--|-------- bra.w 5af4 <handleInput+0x25e>
	}
	if (input.leftRelease && currentEvents -> leftMouseUpFunction)  {
    59da:	|  \-------> move.w 1c814 <input+0x6>,d0
    59e0:	|        /-- beq.s 5a1e <handleInput+0x188>
    59e2:	|        |   movea.l 1c1d4 <currentEvents>,a0
    59e8:	|        |   move.l 4(a0),d0
    59ec:	|        +-- beq.s 5a1e <handleInput+0x188>
		if (! startNewFunctionNum (currentEvents -> leftMouseUpFunction, 0, NULL, noStack, TRUE)) return FALSE;
    59ee:	|        |   move.l 1c82c <noStack>,d1
    59f4:	|        |   movea.l 1c1d4 <currentEvents>,a0
    59fa:	|        |   move.l 4(a0),d0
    59fe:	|        |   pea 1 <_start+0x1>
    5a02:	|        |   move.l d1,-(sp)
    5a04:	|        |   clr.l -(sp)
    5a06:	|        |   clr.l -(sp)
    5a08:	|        |   move.l d0,-(sp)
    5a0a:	|        |   jsr 6b48 <startNewFunctionNum>
    5a10:	|        |   lea 20(sp),sp
    5a14:	|        |   tst.l d0
    5a16:	|        +-- bne.s 5a1e <handleInput+0x188>
    5a18:	|        |   clr.w d0
    5a1a:	+--------|-- bra.w 5af4 <handleInput+0x25e>
	}
	if (input.rightRelease && currentEvents -> rightMouseUpFunction) {
    5a1e:	|        \-> move.w 1c816 <input+0x8>,d0
    5a24:	|        /-- beq.s 5a62 <handleInput+0x1cc>
    5a26:	|        |   movea.l 1c1d4 <currentEvents>,a0
    5a2c:	|        |   move.l 12(a0),d0
    5a30:	|        +-- beq.s 5a62 <handleInput+0x1cc>
		if (! startNewFunctionNum (currentEvents -> rightMouseUpFunction, 0, NULL, noStack, TRUE)) return FALSE;
    5a32:	|        |   move.l 1c82c <noStack>,d1
    5a38:	|        |   movea.l 1c1d4 <currentEvents>,a0
    5a3e:	|        |   move.l 12(a0),d0
    5a42:	|        |   pea 1 <_start+0x1>
    5a46:	|        |   move.l d1,-(sp)
    5a48:	|        |   clr.l -(sp)
    5a4a:	|        |   clr.l -(sp)
    5a4c:	|        |   move.l d0,-(sp)
    5a4e:	|        |   jsr 6b48 <startNewFunctionNum>
    5a54:	|        |   lea 20(sp),sp
    5a58:	|        |   tst.l d0
    5a5a:	|        +-- bne.s 5a62 <handleInput+0x1cc>
    5a5c:	|        |   clr.w d0
    5a5e:	+--------|-- bra.w 5af4 <handleInput+0x25e>
	}
	if (input.leftClick && currentEvents -> leftMouseFunction)
    5a62:	|        \-> move.w 1c80e <input>,d0
    5a68:	|        /-- beq.s 5aa0 <handleInput+0x20a>
    5a6a:	|        |   movea.l 1c1d4 <currentEvents>,a0
    5a70:	|        |   move.l (a0),d0
    5a72:	|        +-- beq.s 5aa0 <handleInput+0x20a>
		if (! startNewFunctionNum (currentEvents -> leftMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    5a74:	|        |   move.l 1c82c <noStack>,d1
    5a7a:	|        |   movea.l 1c1d4 <currentEvents>,a0
    5a80:	|        |   move.l (a0),d0
    5a82:	|        |   pea 1 <_start+0x1>
    5a86:	|        |   move.l d1,-(sp)
    5a88:	|        |   clr.l -(sp)
    5a8a:	|        |   clr.l -(sp)
    5a8c:	|        |   move.l d0,-(sp)
    5a8e:	|        |   jsr 6b48 <startNewFunctionNum>
    5a94:	|        |   lea 20(sp),sp
    5a98:	|        |   tst.l d0
    5a9a:	|        +-- bne.s 5aa0 <handleInput+0x20a>
    5a9c:	|        |   clr.w d0
    5a9e:	+--------|-- bra.s 5af4 <handleInput+0x25e>
	if (input.rightClick && currentEvents -> rightMouseFunction) {
    5aa0:	|        \-> move.w 1c810 <input+0x2>,d0
    5aa6:	|        /-- beq.s 5ae2 <handleInput+0x24c>
    5aa8:	|        |   movea.l 1c1d4 <currentEvents>,a0
    5aae:	|        |   move.l 8(a0),d0
    5ab2:	|        +-- beq.s 5ae2 <handleInput+0x24c>
		if (! startNewFunctionNum (currentEvents -> rightMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    5ab4:	|        |   move.l 1c82c <noStack>,d1
    5aba:	|        |   movea.l 1c1d4 <currentEvents>,a0
    5ac0:	|        |   move.l 8(a0),d0
    5ac4:	|        |   pea 1 <_start+0x1>
    5ac8:	|        |   move.l d1,-(sp)
    5aca:	|        |   clr.l -(sp)
    5acc:	|        |   clr.l -(sp)
    5ace:	|        |   move.l d0,-(sp)
    5ad0:	|        |   jsr 6b48 <startNewFunctionNum>
    5ad6:	|        |   lea 20(sp),sp
    5ada:	|        |   tst.l d0
    5adc:	|        +-- bne.s 5ae2 <handleInput+0x24c>
    5ade:	|        |   clr.w d0
    5ae0:	+--------|-- bra.s 5af4 <handleInput+0x25e>
	}

	lastRegion = overRegion;
    5ae2:	|        \-> move.l 1c970 <overRegion>,d0
    5ae8:	|            move.l d0,1c824 <lastRegion>
	return runSludge ();
    5aee:	|            jsr 6916 <runSludge>
}
    5af4:	\----------> movea.l (sp)+,a6
    5af6:	             lea 16(sp),sp
    5afa:	             rts

00005afc <initSludge>:

BOOL initSludge (char * filename) {
    5afc:	             lea -292(sp),sp
    5b00:	             movem.l d2-d4/a2/a6,-(sp)
	int a = 0;
    5b04:	             clr.l 308(sp)
	mouseCursorAnim = makeNullAnim ();
    5b08:	             jsr ad28 <makeNullAnim>
    5b0e:	             move.l d0,1c762 <mouseCursorAnim>

	//Amiga: Attention. This was changed to a Nonpointer Type
	BPTR fp = openAndVerify (filename, 'G', 'E', ERROR_BAD_HEADER, &gameVersion);
    5b14:	             pea 1c806 <gameVersion>
    5b1a:	             pea 1886f <PutChar+0xc25>
    5b20:	             pea 45 <_start+0x45>
    5b24:	             pea 47 <_start+0x47>
    5b28:	             move.l 332(sp),-(sp)
    5b2c:	             jsr 654a <openAndVerify>
    5b32:	             lea 20(sp),sp
    5b36:	             move.l d0,288(sp)
	if (! fp) return FALSE;
    5b3a:	         /-- bne.s 5b42 <initSludge+0x46>
    5b3c:	         |   clr.w d0
    5b3e:	/--------|-- bra.w 626a <initSludge+0x76e>
	if (FGetC (fp)) {
    5b42:	|        \-> move.l 288(sp),284(sp)
    5b48:	|            move.l 1c864 <DOSBase>,d0
    5b4e:	|            movea.l d0,a6
    5b50:	|            move.l 284(sp),d1
    5b54:	|            jsr -306(a6)
    5b58:	|            move.l d0,280(sp)
    5b5c:	|            move.l 280(sp),d0
    5b60:	|  /-------- beq.w 5d0a <initSludge+0x20e>
		numBIFNames = get2bytes (fp);
    5b64:	|  |         move.l 288(sp),-(sp)
    5b68:	|  |         jsr 6bc <get2bytes>
    5b6e:	|  |         addq.l #4,sp
    5b70:	|  |         move.l d0,1c830 <numBIFNames>
		allBIFNames = AllocVec(numBIFNames,MEMF_ANY);
    5b76:	|  |         move.l 1c830 <numBIFNames>,d0
    5b7c:	|  |         move.l d0,276(sp)
    5b80:	|  |         clr.l 272(sp)
    5b84:	|  |         move.l 1c85c <SysBase>,d0
    5b8a:	|  |         movea.l d0,a6
    5b8c:	|  |         move.l 276(sp),d0
    5b90:	|  |         move.l 272(sp),d1
    5b94:	|  |         jsr -684(a6)
    5b98:	|  |         move.l d0,268(sp)
    5b9c:	|  |         move.l 268(sp),d0
    5ba0:	|  |         move.l d0,1c7ec <allBIFNames>
		if(allBIFNames == 0) return FALSE;
    5ba6:	|  |         move.l 1c7ec <allBIFNames>,d0
    5bac:	|  |     /-- bne.s 5bb4 <initSludge+0xb8>
    5bae:	|  |     |   clr.w d0
    5bb0:	+--|-----|-- bra.w 626a <initSludge+0x76e>
		for (int fn = 0; fn < numBIFNames; fn ++) {
    5bb4:	|  |     \-> clr.l 304(sp)
    5bb8:	|  |     /-- bra.s 5bde <initSludge+0xe2>
			allBIFNames[fn] = (char *) readString (fp);
    5bba:	|  |  /--|-> move.l 1c7ec <allBIFNames>,d1
    5bc0:	|  |  |  |   move.l 304(sp),d0
    5bc4:	|  |  |  |   add.l d0,d0
    5bc6:	|  |  |  |   add.l d0,d0
    5bc8:	|  |  |  |   movea.l d1,a2
    5bca:	|  |  |  |   adda.l d0,a2
    5bcc:	|  |  |  |   move.l 288(sp),-(sp)
    5bd0:	|  |  |  |   jsr b02 <readString>
    5bd6:	|  |  |  |   addq.l #4,sp
    5bd8:	|  |  |  |   move.l d0,(a2)
		for (int fn = 0; fn < numBIFNames; fn ++) {
    5bda:	|  |  |  |   addq.l #1,304(sp)
    5bde:	|  |  |  \-> move.l 1c830 <numBIFNames>,d0
    5be4:	|  |  |      cmp.l 304(sp),d0
    5be8:	|  |  \----- bgt.s 5bba <initSludge+0xbe>
		}
		numUserFunc = get2bytes (fp);
    5bea:	|  |         move.l 288(sp),-(sp)
    5bee:	|  |         jsr 6bc <get2bytes>
    5bf4:	|  |         addq.l #4,sp
    5bf6:	|  |         move.l d0,1c83c <numUserFunc>
		allUserFunc = AllocVec(numUserFunc,MEMF_ANY);
    5bfc:	|  |         move.l 1c83c <numUserFunc>,d0
    5c02:	|  |         move.l d0,264(sp)
    5c06:	|  |         clr.l 260(sp)
    5c0a:	|  |         move.l 1c85c <SysBase>,d0
    5c10:	|  |         movea.l d0,a6
    5c12:	|  |         move.l 264(sp),d0
    5c16:	|  |         move.l 260(sp),d1
    5c1a:	|  |         jsr -684(a6)
    5c1e:	|  |         move.l d0,256(sp)
    5c22:	|  |         move.l 256(sp),d0
    5c26:	|  |         move.l d0,1c7f8 <allUserFunc>
		if( allUserFunc == 0) return FALSE;
    5c2c:	|  |         move.l 1c7f8 <allUserFunc>,d0
    5c32:	|  |     /-- bne.s 5c3a <initSludge+0x13e>
    5c34:	|  |     |   clr.w d0
    5c36:	+--|-----|-- bra.w 626a <initSludge+0x76e>

		for (int fn = 0; fn < numUserFunc; fn ++) {
    5c3a:	|  |     \-> clr.l 300(sp)
    5c3e:	|  |     /-- bra.s 5c64 <initSludge+0x168>
			allUserFunc[fn] =   (char *) readString (fp);
    5c40:	|  |  /--|-> move.l 1c7f8 <allUserFunc>,d1
    5c46:	|  |  |  |   move.l 300(sp),d0
    5c4a:	|  |  |  |   add.l d0,d0
    5c4c:	|  |  |  |   add.l d0,d0
    5c4e:	|  |  |  |   movea.l d1,a2
    5c50:	|  |  |  |   adda.l d0,a2
    5c52:	|  |  |  |   move.l 288(sp),-(sp)
    5c56:	|  |  |  |   jsr b02 <readString>
    5c5c:	|  |  |  |   addq.l #4,sp
    5c5e:	|  |  |  |   move.l d0,(a2)
		for (int fn = 0; fn < numUserFunc; fn ++) {
    5c60:	|  |  |  |   addq.l #1,300(sp)
    5c64:	|  |  |  \-> move.l 1c83c <numUserFunc>,d0
    5c6a:	|  |  |      cmp.l 300(sp),d0
    5c6e:	|  |  \----- bgt.s 5c40 <initSludge+0x144>
		}
		if (gameVersion >= VERSION(1,3)) {
    5c70:	|  |         move.l 1c806 <gameVersion>,d0
    5c76:	|  |         cmpi.l #258,d0
    5c7c:	|  +-------- ble.w 5d0a <initSludge+0x20e>
			numResourceNames = get2bytes (fp);
    5c80:	|  |         move.l 288(sp),-(sp)
    5c84:	|  |         jsr 6bc <get2bytes>
    5c8a:	|  |         addq.l #4,sp
    5c8c:	|  |         move.l d0,1c838 <numResourceNames>
			allResourceNames = AllocVec(sizeof(char *) * numResourceNames,MEMF_ANY);
    5c92:	|  |         move.l 1c838 <numResourceNames>,d0
    5c98:	|  |         add.l d0,d0
    5c9a:	|  |         add.l d0,d0
    5c9c:	|  |         move.l d0,252(sp)
    5ca0:	|  |         clr.l 248(sp)
    5ca4:	|  |         move.l 1c85c <SysBase>,d0
    5caa:	|  |         movea.l d0,a6
    5cac:	|  |         move.l 252(sp),d0
    5cb0:	|  |         move.l 248(sp),d1
    5cb4:	|  |         jsr -684(a6)
    5cb8:	|  |         move.l d0,244(sp)
    5cbc:	|  |         move.l 244(sp),d0
    5cc0:	|  |         move.l d0,1c7f0 <allResourceNames>
			if(allResourceNames == 0) return FALSE;
    5cc6:	|  |         move.l 1c7f0 <allResourceNames>,d0
    5ccc:	|  |     /-- bne.s 5cd4 <initSludge+0x1d8>
    5cce:	|  |     |   clr.w d0
    5cd0:	+--|-----|-- bra.w 626a <initSludge+0x76e>

			for (int fn = 0; fn < numResourceNames; fn ++) {
    5cd4:	|  |     \-> clr.l 296(sp)
    5cd8:	|  |     /-- bra.s 5cfe <initSludge+0x202>
				allResourceNames[fn] =  (char *) readString (fp);
    5cda:	|  |  /--|-> move.l 1c7f0 <allResourceNames>,d1
    5ce0:	|  |  |  |   move.l 296(sp),d0
    5ce4:	|  |  |  |   add.l d0,d0
    5ce6:	|  |  |  |   add.l d0,d0
    5ce8:	|  |  |  |   movea.l d1,a2
    5cea:	|  |  |  |   adda.l d0,a2
    5cec:	|  |  |  |   move.l 288(sp),-(sp)
    5cf0:	|  |  |  |   jsr b02 <readString>
    5cf6:	|  |  |  |   addq.l #4,sp
    5cf8:	|  |  |  |   move.l d0,(a2)
			for (int fn = 0; fn < numResourceNames; fn ++) {
    5cfa:	|  |  |  |   addq.l #1,296(sp)
    5cfe:	|  |  |  \-> move.l 1c838 <numResourceNames>,d0
    5d04:	|  |  |      cmp.l 296(sp),d0
    5d08:	|  |  \----- bgt.s 5cda <initSludge+0x1de>
			}
		}
	}

	input.mouseX = 129;
    5d0a:	|  \-------> move.l #129,1c818 <input+0xa>
	input.mouseY = 100;
    5d14:	|            moveq #100,d0
    5d16:	|            move.l d0,1c81c <input+0xe>
	winWidth = get2bytes (fp);
    5d1c:	|            move.l 288(sp),-(sp)
    5d20:	|            jsr 6bc <get2bytes>
    5d26:	|            addq.l #4,sp
    5d28:	|            move.l d0,1c7b0 <winWidth>
	winHeight = get2bytes (fp);
    5d2e:	|            move.l 288(sp),-(sp)
    5d32:	|            jsr 6bc <get2bytes>
    5d38:	|            addq.l #4,sp
    5d3a:	|            move.l d0,1c7b4 <winHeight>
	specialSettings = FGetC (fp);
    5d40:	|            move.l 288(sp),240(sp)
    5d46:	|            move.l 1c864 <DOSBase>,d0
    5d4c:	|            movea.l d0,a6
    5d4e:	|            move.l 240(sp),d1
    5d52:	|            jsr -306(a6)
    5d56:	|            move.l d0,236(sp)
    5d5a:	|            move.l 236(sp),d0
    5d5e:	|            move.l d0,1c840 <specialSettings>

	desiredfps = 1000/FGetC (fp);
    5d64:	|            move.l 288(sp),232(sp)
    5d6a:	|            move.l 1c864 <DOSBase>,d0
    5d70:	|            movea.l d0,a6
    5d72:	|            move.l 232(sp),d1
    5d76:	|            jsr -306(a6)
    5d7a:	|            move.l d0,228(sp)
    5d7e:	|            move.l 228(sp),d0
    5d82:	|            move.l d0,-(sp)
    5d84:	|            pea 3e8 <encodeFilename+0xea>
    5d88:	|            jsr 17bb2 <__divsi3>
    5d8e:	|            addq.l #8,sp
    5d90:	|            move.l d0,1c1ea <desiredfps>

	readString(fp); //Need to keep reading to stay on track. But the comented line below looks wrong.
    5d96:	|            move.l 288(sp),-(sp)
    5d9a:	|            jsr b02 <readString>
    5da0:	|            addq.l #4,sp
	//FreeVec(readString (fp));

	ULONG blocks_read = FRead( fp, &fileTime, sizeof (FILETIME), 1 ); 
    5da2:	|            move.l 288(sp),224(sp)
    5da8:	|            move.l #116734,220(sp)
    5db0:	|            moveq #8,d1
    5db2:	|            move.l d1,216(sp)
    5db6:	|            moveq #1,d0
    5db8:	|            move.l d0,212(sp)
    5dbc:	|            move.l 1c864 <DOSBase>,d0
    5dc2:	|            movea.l d0,a6
    5dc4:	|            move.l 224(sp),d1
    5dc8:	|            move.l 220(sp),d2
    5dcc:	|            move.l 216(sp),d3
    5dd0:	|            move.l 212(sp),d4
    5dd4:	|            jsr -324(a6)
    5dd8:	|            move.l d0,208(sp)
    5ddc:	|            move.l 208(sp),d0
    5de0:	|            move.l d0,204(sp)
	if (blocks_read != 1) {
    5de4:	|            moveq #1,d1
    5de6:	|            cmp.l 204(sp),d1
    5dea:	|        /-- beq.s 5dfa <initSludge+0x2fe>
		KPrintF("Reading error in initSludge.\n");
    5dec:	|        |   pea 188a8 <PutChar+0xc5e>
    5df2:	|        |   jsr 17176 <KPrintF>
    5df8:	|        |   addq.l #4,sp
	}

	char * dataFol = (gameVersion >= VERSION(1,3)) ? readString(fp) : joinStrings ("", "");
    5dfa:	|        \-> move.l 1c806 <gameVersion>,d0
    5e00:	|            cmpi.l #258,d0
    5e06:	|        /-- ble.s 5e16 <initSludge+0x31a>
    5e08:	|        |   move.l 288(sp),-(sp)
    5e0c:	|        |   jsr b02 <readString>
    5e12:	|        |   addq.l #4,sp
    5e14:	|     /--|-- bra.s 5e2a <initSludge+0x32e>
    5e16:	|     |  \-> pea 188c6 <PutChar+0xc7c>
    5e1c:	|     |      pea 188c6 <PutChar+0xc7c>
    5e22:	|     |      jsr 13c7a <joinStrings>
    5e28:	|     |      addq.l #8,sp
    5e2a:	|     \----> move.l d0,200(sp)

	gameSettings.numLanguages = (gameVersion >= VERSION(1,3)) ? (FGetC (fp)) : 0;
    5e2e:	|            move.l 1c806 <gameVersion>,d0
    5e34:	|            cmpi.l #258,d0
    5e3a:	|     /----- ble.s 5e5c <initSludge+0x360>
    5e3c:	|     |      move.l 288(sp),196(sp)
    5e42:	|     |      move.l 1c864 <DOSBase>,d0
    5e48:	|     |      movea.l d0,a6
    5e4a:	|     |      move.l 196(sp),d1
    5e4e:	|     |      jsr -306(a6)
    5e52:	|     |      move.l d0,192(sp)
    5e56:	|     |      move.l 192(sp),d0
    5e5a:	|     |  /-- bra.s 5e5e <initSludge+0x362>
    5e5c:	|     \--|-> moveq #0,d0
    5e5e:	|        \-> move.l d0,1c93c <gameSettings+0x4>
	makeLanguageTable (fp);
    5e64:	|            move.l 288(sp),-(sp)
    5e68:	|            jsr 13630 <makeLanguageTable>
    5e6e:	|            addq.l #4,sp

	if (gameVersion >= VERSION(1,6))
    5e70:	|            move.l 1c806 <gameVersion>,d0
    5e76:	|            cmpi.l #261,d0
    5e7c:	|        /-- ble.s 5eca <initSludge+0x3ce>
	{
		FGetC(fp);
    5e7e:	|        |   move.l 288(sp),188(sp)
    5e84:	|        |   move.l 1c864 <DOSBase>,d0
    5e8a:	|        |   movea.l d0,a6
    5e8c:	|        |   move.l 188(sp),d1
    5e90:	|        |   jsr -306(a6)
    5e94:	|        |   move.l d0,184(sp)
		// aaLoad
		FGetC (fp);
    5e98:	|        |   move.l 288(sp),180(sp)
    5e9e:	|        |   move.l 1c864 <DOSBase>,d0
    5ea4:	|        |   movea.l d0,a6
    5ea6:	|        |   move.l 180(sp),d1
    5eaa:	|        |   jsr -306(a6)
    5eae:	|        |   move.l d0,176(sp)
		getFloat (fp);
    5eb2:	|        |   move.l 288(sp),-(sp)
    5eb6:	|        |   jsr 7d8 <getFloat>
    5ebc:	|        |   addq.l #4,sp
		getFloat (fp);
    5ebe:	|        |   move.l 288(sp),-(sp)
    5ec2:	|        |   jsr 7d8 <getFloat>
    5ec8:	|        |   addq.l #4,sp
	}

	char * checker = readString (fp);
    5eca:	|        \-> move.l 288(sp),-(sp)
    5ece:	|            jsr b02 <readString>
    5ed4:	|            addq.l #4,sp
    5ed6:	|            move.l d0,172(sp)

	if (strcmp (checker, "okSoFar")) {
    5eda:	|            pea 188c7 <PutChar+0xc7d>
    5ee0:	|            move.l 176(sp),-(sp)
    5ee4:	|            jsr 13bfa <strcmp>
    5eea:	|            addq.l #8,sp
    5eec:	|            tst.l d0
    5eee:	|        /-- beq.s 5ef6 <initSludge+0x3fa>
		return FALSE;
    5ef0:	|        |   clr.w d0
    5ef2:	+--------|-- bra.w 626a <initSludge+0x76e>
	}
	FreeVec( checker);
    5ef6:	|        \-> move.l 172(sp),168(sp)
    5efc:	|            move.l 1c85c <SysBase>,d0
    5f02:	|            movea.l d0,a6
    5f04:	|            movea.l 168(sp),a1
    5f08:	|            jsr -690(a6)
	checker = NULL;
    5f0c:	|            clr.l 172(sp)

    unsigned char customIconLogo = FGetC (fp);
    5f10:	|            move.l 288(sp),164(sp)
    5f16:	|            move.l 1c864 <DOSBase>,d0
    5f1c:	|            movea.l d0,a6
    5f1e:	|            move.l 164(sp),d1
    5f22:	|            jsr -306(a6)
    5f26:	|            move.l d0,160(sp)
    5f2a:	|            move.l 160(sp),d0
    5f2e:	|            move.b d0,159(sp)

	if (customIconLogo & 1) {
    5f32:	|            moveq #0,d0
    5f34:	|            move.b 159(sp),d0
    5f38:	|            moveq #1,d1
    5f3a:	|            and.l d1,d0
    5f3c:	|        /-- beq.s 5f94 <initSludge+0x498>
		// There is an icon - read it!
		Write(Output(), (APTR)"initsludge:Game Icon not supported on this plattform.\n", 54);
    5f3e:	|        |   move.l 1c864 <DOSBase>,d0
    5f44:	|        |   movea.l d0,a6
    5f46:	|        |   jsr -60(a6)
    5f4a:	|        |   move.l d0,38(sp)
    5f4e:	|        |   move.l 38(sp),d0
    5f52:	|        |   move.l d0,34(sp)
    5f56:	|        |   move.l #100559,30(sp)
    5f5e:	|        |   moveq #54,d0
    5f60:	|        |   move.l d0,26(sp)
    5f64:	|        |   move.l 1c864 <DOSBase>,d0
    5f6a:	|        |   movea.l d0,a6
    5f6c:	|        |   move.l 34(sp),d1
    5f70:	|        |   move.l 30(sp),d2
    5f74:	|        |   move.l 26(sp),d3
    5f78:	|        |   jsr -48(a6)
    5f7c:	|        |   move.l d0,22(sp)
		KPrintF("initsludge: Game Icon not supported on this plattform.\n");
    5f80:	|        |   pea 18906 <PutChar+0xcbc>
    5f86:	|        |   jsr 17176 <KPrintF>
    5f8c:	|        |   addq.l #4,sp
		return FALSE;
    5f8e:	|        |   clr.w d0
    5f90:	+--------|-- bra.w 626a <initSludge+0x76e>
	}

	numGlobals = get2bytes (fp);
    5f94:	|        \-> move.l 288(sp),-(sp)
    5f98:	|            jsr 6bc <get2bytes>
    5f9e:	|            addq.l #4,sp
    5fa0:	|            move.l d0,1c834 <numGlobals>

	globalVars = AllocVec( sizeof(struct variable) * numGlobals,MEMF_ANY);
    5fa6:	|            move.l 1c834 <numGlobals>,d0
    5fac:	|            lsl.l #3,d0
    5fae:	|            move.l d0,154(sp)
    5fb2:	|            clr.l 150(sp)
    5fb6:	|            move.l 1c85c <SysBase>,d0
    5fbc:	|            movea.l d0,a6
    5fbe:	|            move.l 154(sp),d0
    5fc2:	|            move.l 150(sp),d1
    5fc6:	|            jsr -684(a6)
    5fca:	|            move.l d0,146(sp)
    5fce:	|            move.l 146(sp),d0
    5fd2:	|            move.l d0,1c80a <globalVars>
	if(globalVars == 0 && numGlobals > 0) {
    5fd8:	|            move.l 1c80a <globalVars>,d0
    5fde:	|        /-- bne.s 5ffc <initSludge+0x500>
    5fe0:	|        |   move.l 1c834 <numGlobals>,d0
    5fe6:	|        +-- ble.s 5ffc <initSludge+0x500>
		KPrintF("initsludge: Cannot allocate memory for globalvars\n");
    5fe8:	|        |   pea 1893e <PutChar+0xcf4>
    5fee:	|        |   jsr 17176 <KPrintF>
    5ff4:	|        |   addq.l #4,sp
		return FALSE;
    5ff6:	|        |   clr.w d0
    5ff8:	+--------|-- bra.w 626a <initSludge+0x76e>
	}		 
	for (a = 0; a < numGlobals; a ++) initVarNew (globalVars[a]);
    5ffc:	|        \-> clr.l 308(sp)
    6000:	|        /-- bra.s 6018 <initSludge+0x51c>
    6002:	|     /--|-> move.l 1c80a <globalVars>,d1
    6008:	|     |  |   move.l 308(sp),d0
    600c:	|     |  |   lsl.l #3,d0
    600e:	|     |  |   movea.l d1,a0
    6010:	|     |  |   adda.l d0,a0
    6012:	|     |  |   clr.l (a0)
    6014:	|     |  |   addq.l #1,308(sp)
    6018:	|     |  \-> move.l 1c834 <numGlobals>,d0
    601e:	|     |      cmp.l 308(sp),d0
    6022:	|     \----- bgt.s 6002 <initSludge+0x506>

	setFileIndices (fp, gameSettings.numLanguages, 0);
    6024:	|            move.l 1c93c <gameSettings+0x4>,d0
    602a:	|            clr.l -(sp)
    602c:	|            move.l d0,-(sp)
    602e:	|            move.l 296(sp),-(sp)
    6032:	|            jsr 7038 <setFileIndices>
    6038:	|            lea 12(sp),sp

	char * gameNameOrig = getNumberedString(1);	
    603c:	|            pea 1 <_start+0x1>
    6040:	|            jsr 6cf2 <getNumberedString>
    6046:	|            addq.l #4,sp
    6048:	|            move.l d0,142(sp)
	char * gameName = encodeFilename (gameNameOrig);
    604c:	|            move.l 142(sp),-(sp)
    6050:	|            jsr 2fe <encodeFilename>
    6056:	|            addq.l #4,sp
    6058:	|            move.l d0,138(sp)

	FreeVec(gameNameOrig);
    605c:	|            move.l 142(sp),134(sp)
    6062:	|            move.l 1c85c <SysBase>,d0
    6068:	|            movea.l d0,a6
    606a:	|            movea.l 134(sp),a1
    606e:	|            jsr -690(a6)

	BPTR lock = CreateDir( gameName );
    6072:	|            move.l 138(sp),130(sp)
    6078:	|            move.l 1c864 <DOSBase>,d0
    607e:	|            movea.l d0,a6
    6080:	|            move.l 130(sp),d1
    6084:	|            jsr -120(a6)
    6088:	|            move.l d0,126(sp)
    608c:	|            move.l 126(sp),d0
    6090:	|            move.l d0,292(sp)
	if(lock == 0) {
    6094:	|        /-- bne.s 60c2 <initSludge+0x5c6>
		//Directory does already exist
		lock = Lock(gameName, ACCESS_READ);
    6096:	|        |   move.l 138(sp),122(sp)
    609c:	|        |   moveq #-2,d1
    609e:	|        |   move.l d1,118(sp)
    60a2:	|        |   move.l 1c864 <DOSBase>,d0
    60a8:	|        |   movea.l d0,a6
    60aa:	|        |   move.l 122(sp),d1
    60ae:	|        |   move.l 118(sp),d2
    60b2:	|        |   jsr -84(a6)
    60b6:	|        |   move.l d0,114(sp)
    60ba:	|        |   move.l 114(sp),d0
    60be:	|        |   move.l d0,292(sp)
	}

	if (!CurrentDir(lock)) {
    60c2:	|        \-> move.l 292(sp),110(sp)
    60c8:	|            move.l 1c864 <DOSBase>,d0
    60ce:	|            movea.l d0,a6
    60d0:	|            move.l 110(sp),d1
    60d4:	|            jsr -126(a6)
    60d8:	|            move.l d0,106(sp)
    60dc:	|            move.l 106(sp),d0
    60e0:	|        /-- bne.s 613c <initSludge+0x640>
		KPrintF("initsludge: Failed changing to directory %s\n", gameName);
    60e2:	|        |   move.l 138(sp),-(sp)
    60e6:	|        |   pea 18971 <PutChar+0xd27>
    60ec:	|        |   jsr 17176 <KPrintF>
    60f2:	|        |   addq.l #8,sp
		Write(Output(), (APTR)"initsludge:Failed changing to directory\n", 40);
    60f4:	|        |   move.l 1c864 <DOSBase>,d0
    60fa:	|        |   movea.l d0,a6
    60fc:	|        |   jsr -60(a6)
    6100:	|        |   move.l d0,58(sp)
    6104:	|        |   move.l 58(sp),d0
    6108:	|        |   move.l d0,54(sp)
    610c:	|        |   move.l #100766,50(sp)
    6114:	|        |   moveq #40,d0
    6116:	|        |   move.l d0,46(sp)
    611a:	|        |   move.l 1c864 <DOSBase>,d0
    6120:	|        |   movea.l d0,a6
    6122:	|        |   move.l 54(sp),d1
    6126:	|        |   move.l 50(sp),d2
    612a:	|        |   move.l 46(sp),d3
    612e:	|        |   jsr -48(a6)
    6132:	|        |   move.l d0,42(sp)
		return FALSE;
    6136:	|        |   clr.w d0
    6138:	+--------|-- bra.w 626a <initSludge+0x76e>
	}

	FreeVec(gameName);
    613c:	|        \-> move.l 138(sp),102(sp)
    6142:	|            move.l 1c85c <SysBase>,d0
    6148:	|            movea.l d0,a6
    614a:	|            movea.l 102(sp),a1
    614e:	|            jsr -690(a6)

	readIniFile (filename);
    6152:	|            move.l 316(sp),-(sp)
    6156:	|            jsr 13764 <readIniFile>
    615c:	|            addq.l #4,sp

	// Now set file indices properly to the chosen language.
	languageNum = getLanguageForFileB ();
    615e:	|            jsr 13536 <getLanguageForFileB>
    6164:	|            move.l d0,1c1d8 <languageNum>
	if (languageNum < 0) KPrintF("Can't find the translation data specified!");
    616a:	|            move.l 1c1d8 <languageNum>,d0
    6170:	|        /-- bpl.s 6180 <initSludge+0x684>
    6172:	|        |   pea 189c7 <PutChar+0xd7d>
    6178:	|        |   jsr 17176 <KPrintF>
    617e:	|        |   addq.l #4,sp
	setFileIndices (NULL, gameSettings.numLanguages, languageNum);
    6180:	|        \-> move.l 1c1d8 <languageNum>,d0
    6186:	|            move.l d0,d1
    6188:	|            move.l 1c93c <gameSettings+0x4>,d0
    618e:	|            move.l d1,-(sp)
    6190:	|            move.l d0,-(sp)
    6192:	|            clr.l -(sp)
    6194:	|            jsr 7038 <setFileIndices>
    619a:	|            lea 12(sp),sp

	if (dataFol[0]) {
    619e:	|            movea.l 200(sp),a0
    61a2:	|            move.b (a0),d0
    61a4:	|     /----- beq.w 624e <initSludge+0x752>
		char *dataFolder = encodeFilename(dataFol);
    61a8:	|     |      move.l 200(sp),-(sp)
    61ac:	|     |      jsr 2fe <encodeFilename>
    61b2:	|     |      addq.l #4,sp
    61b4:	|     |      move.l d0,98(sp)
		lock = CreateDir( dataFolder );
    61b8:	|     |      move.l 98(sp),94(sp)
    61be:	|     |      move.l 1c864 <DOSBase>,d0
    61c4:	|     |      movea.l d0,a6
    61c6:	|     |      move.l 94(sp),d1
    61ca:	|     |      jsr -120(a6)
    61ce:	|     |      move.l d0,90(sp)
    61d2:	|     |      move.l 90(sp),d0
    61d6:	|     |      move.l d0,292(sp)
		if(lock == 0) {
    61da:	|     |  /-- bne.s 6208 <initSludge+0x70c>
			//Directory does already exist
			lock = Lock(dataFolder, ACCESS_READ);		
    61dc:	|     |  |   move.l 98(sp),86(sp)
    61e2:	|     |  |   moveq #-2,d1
    61e4:	|     |  |   move.l d1,82(sp)
    61e8:	|     |  |   move.l 1c864 <DOSBase>,d0
    61ee:	|     |  |   movea.l d0,a6
    61f0:	|     |  |   move.l 86(sp),d1
    61f4:	|     |  |   move.l 82(sp),d2
    61f8:	|     |  |   jsr -84(a6)
    61fc:	|     |  |   move.l d0,78(sp)
    6200:	|     |  |   move.l 78(sp),d0
    6204:	|     |  |   move.l d0,292(sp)
		}


		if (!CurrentDir(lock)) {
    6208:	|     |  \-> move.l 292(sp),74(sp)
    620e:	|     |      move.l 1c864 <DOSBase>,d0
    6214:	|     |      movea.l d0,a6
    6216:	|     |      move.l 74(sp),d1
    621a:	|     |      jsr -126(a6)
    621e:	|     |      move.l d0,70(sp)
    6222:	|     |      move.l 70(sp),d0
    6226:	|     |  /-- bne.s 6238 <initSludge+0x73c>
			(Output(), (APTR)"initsludge:This game's data folder is inaccessible!\n", 52);
    6228:	|     |  |   move.l 1c864 <DOSBase>,d0
    622e:	|     |  |   movea.l d0,a6
    6230:	|     |  |   jsr -60(a6)
    6234:	|     |  |   move.l d0,66(sp)
		}
		FreeVec(dataFolder);
    6238:	|     |  \-> move.l 98(sp),62(sp)
    623e:	|     |      move.l 1c85c <SysBase>,d0
    6244:	|     |      movea.l d0,a6
    6246:	|     |      movea.l 62(sp),a1
    624a:	|     |      jsr -690(a6)
	}

 	positionStatus (10, winHeight - 15);
    624e:	|     \----> movea.l 1c7b4 <winHeight>,a0
    6254:	|            lea -15(a0),a0
    6258:	|            move.l a0,d0
    625a:	|            move.l d0,-(sp)
    625c:	|            pea a <_start+0xa>
    6260:	|            jsr 7a78 <positionStatus>
    6266:	|            addq.l #8,sp

	return TRUE;
    6268:	|            moveq #1,d0
}
    626a:	\----------> movem.l (sp)+,d2-d4/a2/a6
    626e:	             lea 292(sp),sp
    6272:	             rts

00006274 <killSpeechTimers>:

void killSpeechTimers () {
    6274:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    6276:	          move.l 1c7f4 <allRunningFunctions>,(sp)

	while (thisFunction) {
    627c:	   /----- bra.s 62a8 <killSpeechTimers+0x34>
		if (thisFunction -> freezerLevel == 0 && thisFunction -> isSpeech && thisFunction -> timeLeft) {
    627e:	/--|----> movea.l (sp),a0
    6280:	|  |      move.b 56(a0),d0
    6284:	|  |  /-- bne.s 62a2 <killSpeechTimers+0x2e>
    6286:	|  |  |   movea.l (sp),a0
    6288:	|  |  |   move.w 50(a0),d0
    628c:	|  |  +-- beq.s 62a2 <killSpeechTimers+0x2e>
    628e:	|  |  |   movea.l (sp),a0
    6290:	|  |  |   move.l 12(a0),d0
    6294:	|  |  +-- beq.s 62a2 <killSpeechTimers+0x2e>
			thisFunction -> timeLeft = 0;
    6296:	|  |  |   movea.l (sp),a0
    6298:	|  |  |   clr.l 12(a0)
			thisFunction -> isSpeech = FALSE;
    629c:	|  |  |   movea.l (sp),a0
    629e:	|  |  |   clr.w 50(a0)
		}
		thisFunction = thisFunction -> next;
    62a2:	|  |  \-> movea.l (sp),a0
    62a4:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    62a8:	|  \----> tst.l (sp)
    62aa:	\-------- bne.s 627e <killSpeechTimers+0xa>
	}

	killAllSpeech ();
    62ac:	          jsr 7fb6 <killAllSpeech>
}
    62b2:	          nop
    62b4:	          addq.l #4,sp
    62b6:	          rts

000062b8 <loadFunctionCode>:

BOOL loadFunctionCode (struct loadedFunction * newFunc) {
    62b8:	             lea -52(sp),sp
    62bc:	             move.l a6,-(sp)
	unsigned int numLines, numLinesRead;
	int a;

	if (! openSubSlice (newFunc -> originalNumber)) return FALSE;
    62be:	             movea.l 60(sp),a0
    62c2:	             move.l (a0),d0
    62c4:	             move.l d0,-(sp)
    62c6:	             jsr 6f78 <openSubSlice>
    62cc:	             addq.l #4,sp
    62ce:	             tst.w d0
    62d0:	         /-- bne.s 62d8 <loadFunctionCode+0x20>
    62d2:	         |   clr.w d0
    62d4:	/--------|-- bra.w 64a2 <loadFunctionCode+0x1ea>
	

	newFunc-> unfreezable	= FGetC (bigDataFile);
    62d8:	|        \-> move.l 1c844 <bigDataFile>,44(sp)
    62e0:	|            move.l 1c864 <DOSBase>,d0
    62e6:	|            movea.l d0,a6
    62e8:	|            move.l 44(sp),d1
    62ec:	|            jsr -306(a6)
    62f0:	|            move.l d0,40(sp)
    62f4:	|            move.l 40(sp),d0
    62f8:	|            move.l d0,d0
    62fa:	|            movea.l 60(sp),a0
    62fe:	|            move.w d0,52(a0)
	numLines				= get2bytes (bigDataFile);
    6302:	|            move.l 1c844 <bigDataFile>,d0
    6308:	|            move.l d0,-(sp)
    630a:	|            jsr 6bc <get2bytes>
    6310:	|            addq.l #4,sp
    6312:	|            move.l d0,36(sp)
	newFunc -> numArgs		= get2bytes (bigDataFile);
    6316:	|            move.l 1c844 <bigDataFile>,d0
    631c:	|            move.l d0,-(sp)
    631e:	|            jsr 6bc <get2bytes>
    6324:	|            addq.l #4,sp
    6326:	|            movea.l 60(sp),a0
    632a:	|            move.l d0,16(a0)
	newFunc -> numLocals	= get2bytes (bigDataFile);
    632e:	|            move.l 1c844 <bigDataFile>,d0
    6334:	|            move.l d0,-(sp)
    6336:	|            jsr 6bc <get2bytes>
    633c:	|            addq.l #4,sp
    633e:	|            movea.l 60(sp),a0
    6342:	|            move.l d0,8(a0)
	newFunc -> compiledLines = AllocVec( sizeof(struct lineOfCode) * numLines,MEMF_ANY);
    6346:	|            move.l 36(sp),d0
    634a:	|            lsl.l #3,d0
    634c:	|            move.l d0,32(sp)
    6350:	|            clr.l 28(sp)
    6354:	|            move.l 1c85c <SysBase>,d0
    635a:	|            movea.l d0,a6
    635c:	|            move.l 32(sp),d0
    6360:	|            move.l 28(sp),d1
    6364:	|            jsr -684(a6)
    6368:	|            move.l d0,24(sp)
    636c:	|            move.l 24(sp),d0
    6370:	|            movea.l 60(sp),a0
    6374:	|            move.l d0,4(a0)
	if (! newFunc -> compiledLines) {
    6378:	|            movea.l 60(sp),a0
    637c:	|            move.l 4(a0),d0
    6380:	|        /-- bne.s 6396 <loadFunctionCode+0xde>
		KPrintF("loadFunctionCode: cannot allocate memory");
    6382:	|        |   pea 189f2 <PutChar+0xda8>
    6388:	|        |   jsr 17176 <KPrintF>
    638e:	|        |   addq.l #4,sp
		return FALSE;
    6390:	|        |   clr.w d0
    6392:	+--------|-- bra.w 64a2 <loadFunctionCode+0x1ea>
	}

	for (numLinesRead = 0; numLinesRead < numLines; numLinesRead ++) {
    6396:	|        \-> clr.l 52(sp)
    639a:	|        /-- bra.s 63fc <loadFunctionCode+0x144>
		newFunc -> compiledLines[numLinesRead].theCommand = (enum sludgeCommand) FGetC(bigDataFile);
    639c:	|     /--|-> move.l 1c844 <bigDataFile>,8(sp)
    63a4:	|     |  |   move.l 1c864 <DOSBase>,d0
    63aa:	|     |  |   movea.l d0,a6
    63ac:	|     |  |   move.l 8(sp),d1
    63b0:	|     |  |   jsr -306(a6)
    63b4:	|     |  |   move.l d0,4(sp)
    63b8:	|     |  |   move.l 4(sp),d1
    63bc:	|     |  |   movea.l 60(sp),a0
    63c0:	|     |  |   movea.l 4(a0),a0
    63c4:	|     |  |   move.l 52(sp),d0
    63c8:	|     |  |   lsl.l #3,d0
    63ca:	|     |  |   adda.l d0,a0
    63cc:	|     |  |   move.l d1,d0
    63ce:	|     |  |   move.l d0,(a0)
		newFunc -> compiledLines[numLinesRead].param = get2bytes (bigDataFile);
    63d0:	|     |  |   move.l 1c844 <bigDataFile>,d0
    63d6:	|     |  |   move.l d0,-(sp)
    63d8:	|     |  |   jsr 6bc <get2bytes>
    63de:	|     |  |   addq.l #4,sp
    63e0:	|     |  |   move.l d0,d1
    63e2:	|     |  |   movea.l 60(sp),a0
    63e6:	|     |  |   movea.l 4(a0),a0
    63ea:	|     |  |   move.l 52(sp),d0
    63ee:	|     |  |   lsl.l #3,d0
    63f0:	|     |  |   adda.l d0,a0
    63f2:	|     |  |   move.l d1,d0
    63f4:	|     |  |   move.l d0,4(a0)
	for (numLinesRead = 0; numLinesRead < numLines; numLinesRead ++) {
    63f8:	|     |  |   addq.l #1,52(sp)
    63fc:	|     |  \-> move.l 52(sp),d0
    6400:	|     |      cmp.l 36(sp),d0
    6404:	|     \----- bcs.s 639c <loadFunctionCode+0xe4>
	}

	finishAccess ();
    6406:	|            jsr 6ce8 <finishAccess>

	// Now we need to reserve memory for the local variables
	if(newFunc->numLocals > 0) {
    640c:	|            movea.l 60(sp),a0
    6410:	|            move.l 8(a0),d0
    6414:	|  /-------- ble.w 6498 <loadFunctionCode+0x1e0>
		newFunc -> localVars = AllocVec( sizeof(struct variable) * newFunc->numLocals,MEMF_ANY);
    6418:	|  |         movea.l 60(sp),a0
    641c:	|  |         move.l 8(a0),d0
    6420:	|  |         lsl.l #3,d0
    6422:	|  |         move.l d0,20(sp)
    6426:	|  |         clr.l 16(sp)
    642a:	|  |         move.l 1c85c <SysBase>,d0
    6430:	|  |         movea.l d0,a6
    6432:	|  |         move.l 20(sp),d0
    6436:	|  |         move.l 16(sp),d1
    643a:	|  |         jsr -684(a6)
    643e:	|  |         move.l d0,12(sp)
    6442:	|  |         move.l 12(sp),d0
    6446:	|  |         movea.l 60(sp),a0
    644a:	|  |         move.l d0,20(a0)
		if (!newFunc -> localVars) {
    644e:	|  |         movea.l 60(sp),a0
    6452:	|  |         move.l 20(a0),d0
    6456:	|  |     /-- bne.s 646a <loadFunctionCode+0x1b2>
			KPrintF("loadFunctionCode: cannot allocate memory");
    6458:	|  |     |   pea 189f2 <PutChar+0xda8>
    645e:	|  |     |   jsr 17176 <KPrintF>
    6464:	|  |     |   addq.l #4,sp
			return FALSE;
    6466:	|  |     |   clr.w d0
    6468:	+--|-----|-- bra.s 64a2 <loadFunctionCode+0x1ea>
		}

		for (a = 0; a < newFunc -> numLocals; a ++) {
    646a:	|  |     \-> clr.l 48(sp)
    646e:	|  |     /-- bra.s 6488 <loadFunctionCode+0x1d0>
			initVarNew (newFunc -> localVars[a]);
    6470:	|  |  /--|-> movea.l 60(sp),a0
    6474:	|  |  |  |   move.l 20(a0),d1
    6478:	|  |  |  |   move.l 48(sp),d0
    647c:	|  |  |  |   lsl.l #3,d0
    647e:	|  |  |  |   movea.l d1,a0
    6480:	|  |  |  |   adda.l d0,a0
    6482:	|  |  |  |   clr.l (a0)
		for (a = 0; a < newFunc -> numLocals; a ++) {
    6484:	|  |  |  |   addq.l #1,48(sp)
    6488:	|  |  |  \-> movea.l 60(sp),a0
    648c:	|  |  |      move.l 8(a0),d0
    6490:	|  |  |      cmp.l 48(sp),d0
    6494:	|  |  \----- bgt.s 6470 <loadFunctionCode+0x1b8>
    6496:	|  |     /-- bra.s 64a0 <loadFunctionCode+0x1e8>
		}
	} else
	{
		newFunc->numLocals = NULL;
    6498:	|  \-----|-> movea.l 60(sp),a0
    649c:	|        |   clr.l 8(a0)
	}
	return TRUE;
    64a0:	|        \-> moveq #1,d0
}
    64a2:	\----------> movea.l (sp)+,a6
    64a4:	             lea 52(sp),sp
    64a8:	             rts

000064aa <loadHandlers>:

void loadHandlers (BPTR fp) {
    64aa:	move.l a2,-(sp)
	currentEvents -> leftMouseFunction		= get2bytes (fp);
    64ac:	movea.l 1c1d4 <currentEvents>,a2
    64b2:	move.l 8(sp),-(sp)
    64b6:	jsr 6bc <get2bytes>
    64bc:	addq.l #4,sp
    64be:	move.l d0,(a2)
	currentEvents -> leftMouseUpFunction	= get2bytes (fp);
    64c0:	movea.l 1c1d4 <currentEvents>,a2
    64c6:	move.l 8(sp),-(sp)
    64ca:	jsr 6bc <get2bytes>
    64d0:	addq.l #4,sp
    64d2:	move.l d0,4(a2)
	currentEvents -> rightMouseFunction		= get2bytes (fp);
    64d6:	movea.l 1c1d4 <currentEvents>,a2
    64dc:	move.l 8(sp),-(sp)
    64e0:	jsr 6bc <get2bytes>
    64e6:	addq.l #4,sp
    64e8:	move.l d0,8(a2)
	currentEvents -> rightMouseUpFunction	= get2bytes (fp);
    64ec:	movea.l 1c1d4 <currentEvents>,a2
    64f2:	move.l 8(sp),-(sp)
    64f6:	jsr 6bc <get2bytes>
    64fc:	addq.l #4,sp
    64fe:	move.l d0,12(a2)
	currentEvents -> moveMouseFunction		= get2bytes (fp);
    6502:	movea.l 1c1d4 <currentEvents>,a2
    6508:	move.l 8(sp),-(sp)
    650c:	jsr 6bc <get2bytes>
    6512:	addq.l #4,sp
    6514:	move.l d0,16(a2)
	currentEvents -> focusFunction			= get2bytes (fp);
    6518:	movea.l 1c1d4 <currentEvents>,a2
    651e:	move.l 8(sp),-(sp)
    6522:	jsr 6bc <get2bytes>
    6528:	addq.l #4,sp
    652a:	move.l d0,20(a2)
	currentEvents -> spaceFunction			= get2bytes (fp);
    652e:	movea.l 1c1d4 <currentEvents>,a2
    6534:	move.l 8(sp),-(sp)
    6538:	jsr 6bc <get2bytes>
    653e:	addq.l #4,sp
    6540:	move.l d0,24(a2)
}
    6544:	nop
    6546:	movea.l (sp)+,a2
    6548:	rts

0000654a <openAndVerify>:

BPTR openAndVerify (char * filename, char extra1, char extra2, const char * er, int *fileVersion) {
    654a:	       lea -312(sp),sp
    654e:	       movem.l d2-d3/a6,-(sp)
    6552:	       move.l 332(sp),d1
    6556:	       move.l 336(sp),d0
    655a:	       move.b d1,d1
    655c:	       move.b d1,16(sp)
    6560:	       move.b d0,d0
    6562:	       move.b d0,14(sp)
	BPTR fp = Open(filename,MODE_OLDFILE);
    6566:	       move.l 328(sp),318(sp)
    656c:	       move.l #1005,314(sp)
    6574:	       move.l 1c864 <DOSBase>,d0
    657a:	       movea.l d0,a6
    657c:	       move.l 318(sp),d1
    6580:	       move.l 314(sp),d2
    6584:	       jsr -30(a6)
    6588:	       move.l d0,310(sp)
    658c:	       move.l 310(sp),d0
    6590:	       move.l d0,306(sp)

	if (! fp) {
    6594:	   /-- bne.s 65f0 <openAndVerify+0xa6>
		Write(Output(), (APTR)"openAndVerify: Can't open file\n", 31);
    6596:	   |   move.l 1c864 <DOSBase>,d0
    659c:	   |   movea.l d0,a6
    659e:	   |   jsr -60(a6)
    65a2:	   |   move.l d0,154(sp)
    65a6:	   |   move.l 154(sp),d0
    65aa:	   |   move.l d0,150(sp)
    65ae:	   |   move.l #100891,146(sp)
    65b6:	   |   moveq #31,d0
    65b8:	   |   move.l d0,142(sp)
    65bc:	   |   move.l 1c864 <DOSBase>,d0
    65c2:	   |   movea.l d0,a6
    65c4:	   |   move.l 150(sp),d1
    65c8:	   |   move.l 146(sp),d2
    65cc:	   |   move.l 142(sp),d3
    65d0:	   |   jsr -48(a6)
    65d4:	   |   move.l d0,138(sp)
		KPrintF("openAndVerify: Can't open file", filename);
    65d8:	   |   move.l 328(sp),-(sp)
    65dc:	   |   pea 18a3b <PutChar+0xdf1>
    65e2:	   |   jsr 17176 <KPrintF>
    65e8:	   |   addq.l #8,sp
		return NULL;
    65ea:	   |   moveq #0,d0
    65ec:	/--|-- bra.w 68b0 <openAndVerify+0x366>
	}
	BOOL headerBad = FALSE;
    65f0:	|  \-> clr.w 322(sp)
	if (FGetC (fp) != 'S') headerBad = TRUE;
    65f4:	|      move.l 306(sp),302(sp)
    65fa:	|      move.l 1c864 <DOSBase>,d0
    6600:	|      movea.l d0,a6
    6602:	|      move.l 302(sp),d1
    6606:	|      jsr -306(a6)
    660a:	|      move.l d0,298(sp)
    660e:	|      move.l 298(sp),d0
    6612:	|      moveq #83,d1
    6614:	|      cmp.l d0,d1
    6616:	|  /-- beq.s 661e <openAndVerify+0xd4>
    6618:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'L') headerBad = TRUE;
    661e:	|  \-> move.l 306(sp),294(sp)
    6624:	|      move.l 1c864 <DOSBase>,d0
    662a:	|      movea.l d0,a6
    662c:	|      move.l 294(sp),d1
    6630:	|      jsr -306(a6)
    6634:	|      move.l d0,290(sp)
    6638:	|      move.l 290(sp),d0
    663c:	|      moveq #76,d1
    663e:	|      cmp.l d0,d1
    6640:	|  /-- beq.s 6648 <openAndVerify+0xfe>
    6642:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'U') headerBad = TRUE;
    6648:	|  \-> move.l 306(sp),286(sp)
    664e:	|      move.l 1c864 <DOSBase>,d0
    6654:	|      movea.l d0,a6
    6656:	|      move.l 286(sp),d1
    665a:	|      jsr -306(a6)
    665e:	|      move.l d0,282(sp)
    6662:	|      move.l 282(sp),d0
    6666:	|      moveq #85,d1
    6668:	|      cmp.l d0,d1
    666a:	|  /-- beq.s 6672 <openAndVerify+0x128>
    666c:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'D') headerBad = TRUE;
    6672:	|  \-> move.l 306(sp),278(sp)
    6678:	|      move.l 1c864 <DOSBase>,d0
    667e:	|      movea.l d0,a6
    6680:	|      move.l 278(sp),d1
    6684:	|      jsr -306(a6)
    6688:	|      move.l d0,274(sp)
    668c:	|      move.l 274(sp),d0
    6690:	|      moveq #68,d1
    6692:	|      cmp.l d0,d1
    6694:	|  /-- beq.s 669c <openAndVerify+0x152>
    6696:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != extra1) headerBad = TRUE;
    669c:	|  \-> move.l 306(sp),270(sp)
    66a2:	|      move.l 1c864 <DOSBase>,d0
    66a8:	|      movea.l d0,a6
    66aa:	|      move.l 270(sp),d1
    66ae:	|      jsr -306(a6)
    66b2:	|      move.l d0,266(sp)
    66b6:	|      move.l 266(sp),d1
    66ba:	|      move.b 16(sp),d0
    66be:	|      ext.w d0
    66c0:	|      movea.w d0,a0
    66c2:	|      cmpa.l d1,a0
    66c4:	|  /-- beq.s 66cc <openAndVerify+0x182>
    66c6:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != extra2) headerBad = TRUE;
    66cc:	|  \-> move.l 306(sp),262(sp)
    66d2:	|      move.l 1c864 <DOSBase>,d0
    66d8:	|      movea.l d0,a6
    66da:	|      move.l 262(sp),d1
    66de:	|      jsr -306(a6)
    66e2:	|      move.l d0,258(sp)
    66e6:	|      move.l 258(sp),d1
    66ea:	|      move.b 14(sp),d0
    66ee:	|      ext.w d0
    66f0:	|      movea.w d0,a0
    66f2:	|      cmpa.l d1,a0
    66f4:	|  /-- beq.s 66fc <openAndVerify+0x1b2>
    66f6:	|  |   move.w #1,322(sp)
	if (headerBad) {
    66fc:	|  \-> tst.w 322(sp)
    6700:	|  /-- beq.s 6758 <openAndVerify+0x20e>
		Write(Output(), (APTR)"openAndVerify: Bad Header\n", 31);
    6702:	|  |   move.l 1c864 <DOSBase>,d0
    6708:	|  |   movea.l d0,a6
    670a:	|  |   jsr -60(a6)
    670e:	|  |   move.l d0,174(sp)
    6712:	|  |   move.l 174(sp),d0
    6716:	|  |   move.l d0,170(sp)
    671a:	|  |   move.l #100954,166(sp)
    6722:	|  |   moveq #31,d0
    6724:	|  |   move.l d0,162(sp)
    6728:	|  |   move.l 1c864 <DOSBase>,d0
    672e:	|  |   movea.l d0,a6
    6730:	|  |   move.l 170(sp),d1
    6734:	|  |   move.l 166(sp),d2
    6738:	|  |   move.l 162(sp),d3
    673c:	|  |   jsr -48(a6)
    6740:	|  |   move.l d0,158(sp)
		KPrintF("openAndVerify: Bad Header\n");
    6744:	|  |   pea 18a5a <PutChar+0xe10>
    674a:	|  |   jsr 17176 <KPrintF>
    6750:	|  |   addq.l #4,sp
		return NULL;
    6752:	|  |   moveq #0,d0
    6754:	+--|-- bra.w 68b0 <openAndVerify+0x366>
	}
	FGetC (fp);
    6758:	|  \-> move.l 306(sp),254(sp)
    675e:	|      move.l 1c864 <DOSBase>,d0
    6764:	|      movea.l d0,a6
    6766:	|      move.l 254(sp),d1
    676a:	|      jsr -306(a6)
    676e:	|      move.l d0,250(sp)
	while (FGetC(fp)) {;}
    6772:	|      nop
    6774:	|  /-> move.l 306(sp),246(sp)
    677a:	|  |   move.l 1c864 <DOSBase>,d0
    6780:	|  |   movea.l d0,a6
    6782:	|  |   move.l 246(sp),d1
    6786:	|  |   jsr -306(a6)
    678a:	|  |   move.l d0,242(sp)
    678e:	|  |   move.l 242(sp),d0
    6792:	|  \-- bne.s 6774 <openAndVerify+0x22a>

	int majVersion = FGetC (fp);
    6794:	|      move.l 306(sp),238(sp)
    679a:	|      move.l 1c864 <DOSBase>,d0
    67a0:	|      movea.l d0,a6
    67a2:	|      move.l 238(sp),d1
    67a6:	|      jsr -306(a6)
    67aa:	|      move.l d0,234(sp)
    67ae:	|      move.l 234(sp),d0
    67b2:	|      move.l d0,230(sp)
	int minVersion = FGetC (fp);
    67b6:	|      move.l 306(sp),226(sp)
    67bc:	|      move.l 1c864 <DOSBase>,d0
    67c2:	|      movea.l d0,a6
    67c4:	|      move.l 226(sp),d1
    67c8:	|      jsr -306(a6)
    67cc:	|      move.l d0,222(sp)
    67d0:	|      move.l 222(sp),d0
    67d4:	|      move.l d0,218(sp)
	*fileVersion = majVersion * 256 + minVersion;
    67d8:	|      move.l 230(sp),d0
    67dc:	|      lsl.l #8,d0
    67de:	|      add.l 218(sp),d0
    67e2:	|      movea.l 344(sp),a0
    67e6:	|      move.l d0,(a0)

	char txtVer[120];

	if (*fileVersion > WHOLE_VERSION) {
    67e8:	|      movea.l 344(sp),a0
    67ec:	|      move.l (a0),d0
    67ee:	|      cmpi.l #514,d0
    67f4:	|  /-- ble.s 684a <openAndVerify+0x300>
		//sprintf (txtVer, ERROR_VERSION_TOO_LOW_2, majVersion, minVersion);
		Write(Output(), (APTR)ERROR_VERSION_TOO_LOW_1, 100);
    67f6:	|  |   move.l 1c864 <DOSBase>,d0
    67fc:	|  |   movea.l d0,a6
    67fe:	|  |   jsr -60(a6)
    6802:	|  |   move.l d0,194(sp)
    6806:	|  |   move.l 194(sp),d0
    680a:	|  |   move.l d0,190(sp)
    680e:	|  |   move.l #100981,186(sp)
    6816:	|  |   moveq #100,d1
    6818:	|  |   move.l d1,182(sp)
    681c:	|  |   move.l 1c864 <DOSBase>,d0
    6822:	|  |   movea.l d0,a6
    6824:	|  |   move.l 190(sp),d1
    6828:	|  |   move.l 186(sp),d2
    682c:	|  |   move.l 182(sp),d3
    6830:	|  |   jsr -48(a6)
    6834:	|  |   move.l d0,178(sp)
		KPrintF(ERROR_VERSION_TOO_LOW_1);
    6838:	|  |   pea 18a75 <PutChar+0xe2b>
    683e:	|  |   jsr 17176 <KPrintF>
    6844:	|  |   addq.l #4,sp
		return NULL;
    6846:	|  |   moveq #0,d0
    6848:	+--|-- bra.s 68b0 <openAndVerify+0x366>
	} else if (*fileVersion < MINIM_VERSION) {
    684a:	|  \-> movea.l 344(sp),a0
    684e:	|      move.l (a0),d0
    6850:	|      cmpi.l #257,d0
    6856:	|  /-- bgt.s 68ac <openAndVerify+0x362>
		Write(Output(), (APTR)ERROR_VERSION_TOO_HIGH_1, 100);
    6858:	|  |   move.l 1c864 <DOSBase>,d0
    685e:	|  |   movea.l d0,a6
    6860:	|  |   jsr -60(a6)
    6864:	|  |   move.l d0,214(sp)
    6868:	|  |   move.l 214(sp),d0
    686c:	|  |   move.l d0,210(sp)
    6870:	|  |   move.l #101050,206(sp)
    6878:	|  |   moveq #100,d0
    687a:	|  |   move.l d0,202(sp)
    687e:	|  |   move.l 1c864 <DOSBase>,d0
    6884:	|  |   movea.l d0,a6
    6886:	|  |   move.l 210(sp),d1
    688a:	|  |   move.l 206(sp),d2
    688e:	|  |   move.l 202(sp),d3
    6892:	|  |   jsr -48(a6)
    6896:	|  |   move.l d0,198(sp)
		KPrintF(ERROR_VERSION_TOO_HIGH_1);
    689a:	|  |   pea 18aba <PutChar+0xe70>
    68a0:	|  |   jsr 17176 <KPrintF>
    68a6:	|  |   addq.l #4,sp
		return NULL;
    68a8:	|  |   moveq #0,d0
    68aa:	+--|-- bra.s 68b0 <openAndVerify+0x366>
	}
	return fp;
    68ac:	|  \-> move.l 306(sp),d0
}
    68b0:	\----> movem.l (sp)+,d2-d3/a6
    68b4:	       lea 312(sp),sp
    68b8:	       rts

000068ba <pauseFunction>:

void pauseFunction (struct loadedFunction * fun) {
    68ba:	          subq.l #4,sp
	struct loadedFunction * * huntAndDestroy = & allRunningFunctions;
    68bc:	          move.l #116724,(sp)
	while (* huntAndDestroy) {
    68c2:	   /----- bra.s 68ee <pauseFunction+0x34>
		if (fun == * huntAndDestroy) {
    68c4:	/--|----> movea.l (sp),a0
    68c6:	|  |      move.l (a0),d0
    68c8:	|  |      cmp.l 8(sp),d0
    68cc:	|  |  /-- bne.s 68e4 <pauseFunction+0x2a>
			(* huntAndDestroy) = (* huntAndDestroy) -> next;
    68ce:	|  |  |   movea.l (sp),a0
    68d0:	|  |  |   movea.l (a0),a0
    68d2:	|  |  |   move.l 44(a0),d0
    68d6:	|  |  |   movea.l (sp),a0
    68d8:	|  |  |   move.l d0,(a0)
			fun->next = NULL;
    68da:	|  |  |   movea.l 8(sp),a0
    68de:	|  |  |   clr.l 44(a0)
    68e2:	|  +--|-- bra.s 68ee <pauseFunction+0x34>
		} else {
			huntAndDestroy = & (* huntAndDestroy) -> next;
    68e4:	|  |  \-> movea.l (sp),a0
    68e6:	|  |      move.l (a0),d0
    68e8:	|  |      moveq #44,d1
    68ea:	|  |      add.l d0,d1
    68ec:	|  |      move.l d1,(sp)
	while (* huntAndDestroy) {
    68ee:	|  \----> movea.l (sp),a0
    68f0:	|         move.l (a0),d0
    68f2:	\-------- bne.s 68c4 <pauseFunction+0xa>
		}
	}
}
    68f4:	          nop
    68f6:	          nop
    68f8:	          addq.l #4,sp
    68fa:	          rts

000068fc <restartFunction>:

void restartFunction (struct loadedFunction * fun) {
	fun -> next = allRunningFunctions;
    68fc:	move.l 1c7f4 <allRunningFunctions>,d0
    6902:	movea.l 4(sp),a0
    6906:	move.l d0,44(a0)
	allRunningFunctions = fun;
    690a:	move.l 4(sp),1c7f4 <allRunningFunctions>
}
    6912:	nop
    6914:	rts

00006916 <runSludge>:

BOOL runSludge () {
    6916:	                   lea -12(sp),sp
    691a:	                   move.l a6,-(sp)
	
	struct loadedFunction * thisFunction = allRunningFunctions;
    691c:	                   move.l 1c7f4 <allRunningFunctions>,12(sp)
	struct loadedFunction * nextFunction;

	while (thisFunction) {
    6924:	      /----------- bra.s 69a0 <runSludge+0x8a>
		nextFunction = thisFunction -> next;
    6926:	   /--|----------> movea.l 12(sp),a0
    692a:	   |  |            move.l 44(a0),4(sp)

		if (! thisFunction -> freezerLevel) {
    6930:	   |  |            movea.l 12(sp),a0
    6934:	   |  |            move.b 56(a0),d0
    6938:	   |  |  /-------- bne.s 699a <runSludge+0x84>
			if (thisFunction -> timeLeft) {
    693a:	   |  |  |         movea.l 12(sp),a0
    693e:	   |  |  |         move.l 12(a0),d0
    6942:	   |  |  |  /----- beq.s 696c <runSludge+0x56>
				if (thisFunction -> timeLeft < 0) {				
    6944:	   |  |  |  |      movea.l 12(sp),a0
    6948:	   |  |  |  |      move.l 12(a0),d0
    694c:	   |  |  |  |  /-- bpl.s 6958 <runSludge+0x42>
					thisFunction -> timeLeft = 0;
    694e:	   |  |  |  |  |   movea.l 12(sp),a0
    6952:	   |  |  |  |  |   clr.l 12(a0)
    6956:	   |  |  +--|--|-- bra.s 699a <runSludge+0x84>
				} else if (! -- (thisFunction -> timeLeft)) {
    6958:	   |  |  |  |  \-> movea.l 12(sp),a0
    695c:	   |  |  |  |      move.l 12(a0),d0
    6960:	   |  |  |  |      subq.l #1,d0
    6962:	   |  |  |  |      movea.l 12(sp),a0
    6966:	   |  |  |  |      move.l d0,12(a0)
    696a:	   |  |  +--|----- bra.s 699a <runSludge+0x84>
				}
			} else {
				if (thisFunction -> isSpeech) {
    696c:	   |  |  |  \----> movea.l 12(sp),a0
    6970:	   |  |  |         move.w 50(a0),d0
    6974:	   |  |  |     /-- beq.s 6984 <runSludge+0x6e>
					thisFunction -> isSpeech = FALSE;
    6976:	   |  |  |     |   movea.l 12(sp),a0
    697a:	   |  |  |     |   clr.w 50(a0)
					killAllSpeech ();
    697e:	   |  |  |     |   jsr 7fb6 <killAllSpeech>
				}
				if (! continueFunction (thisFunction))
    6984:	   |  |  |     \-> move.l 12(sp),-(sp)
    6988:	   |  |  |         jsr 48e4 <continueFunction>
    698e:	   |  |  |         addq.l #4,sp
    6990:	   |  |  |         tst.w d0
    6992:	   |  |  +-------- bne.s 699a <runSludge+0x84>
					return FALSE;
    6994:	   |  |  |         clr.w d0
    6996:	/--|--|--|-------- bra.w 6a26 <runSludge+0x110>
			}
		}

		thisFunction = nextFunction;
    699a:	|  |  |  \-------> move.l 4(sp),12(sp)
	while (thisFunction) {
    69a0:	|  |  \----------> tst.l 12(sp)
    69a4:	|  \-------------- bne.s 6926 <runSludge+0x10>
	}

	if (loadNow) {
    69a6:	|                  move.l 1c828 <loadNow>,d0
    69ac:	|        /-------- beq.s 6a24 <runSludge+0x10e>
		if (loadNow[0] == ':') {
    69ae:	|        |         movea.l 1c828 <loadNow>,a0
    69b4:	|        |         move.b (a0),d0
    69b6:	|        |         cmpi.b #58,d0
    69ba:	|        |  /----- bne.s 69ee <runSludge+0xd8>
			saveGame (loadNow + 1);
    69bc:	|        |  |      move.l 1c828 <loadNow>,d0
    69c2:	|        |  |      addq.l #1,d0
    69c4:	|        |  |      move.l d0,-(sp)
    69c6:	|        |  |      jsr c6fa <saveGame>
    69cc:	|        |  |      addq.l #4,sp
			setVariable (&saverFunc->reg, SVT_INT, 1);
    69ce:	|        |  |      movea.l 1c926 <saverFunc>,a0
    69d4:	|        |  |      lea 28(a0),a0
    69d8:	|        |  |      pea 1 <_start+0x1>
    69dc:	|        |  |      pea 1 <_start+0x1>
    69e0:	|        |  |      move.l a0,-(sp)
    69e2:	|        |  |      jsr 15040 <setVariable>
    69e8:	|        |  |      lea 12(sp),sp
    69ec:	|        |  |  /-- bra.s 6a06 <runSludge+0xf0>
		} else {
			if (! loadGame (loadNow)) return FALSE;
    69ee:	|        |  \--|-> move.l 1c828 <loadNow>,d0
    69f4:	|        |     |   move.l d0,-(sp)
    69f6:	|        |     |   jsr c242 <loadGame>
    69fc:	|        |     |   addq.l #4,sp
    69fe:	|        |     |   tst.w d0
    6a00:	|        |     +-- bne.s 6a06 <runSludge+0xf0>
    6a02:	|        |     |   clr.w d0
    6a04:	+--------|-----|-- bra.s 6a26 <runSludge+0x110>
		}
		FreeVec(loadNow);
    6a06:	|        |     \-> move.l 1c828 <loadNow>,8(sp)
    6a0e:	|        |         move.l 1c85c <SysBase>,d0
    6a14:	|        |         movea.l d0,a6
    6a16:	|        |         movea.l 8(sp),a1
    6a1a:	|        |         jsr -690(a6)
		loadNow = NULL;
    6a1e:	|        |         clr.l 1c828 <loadNow>
	}

	return TRUE;
    6a24:	|        \-------> moveq #1,d0
}
    6a26:	\----------------> movea.l (sp)+,a6
    6a28:	                   lea 12(sp),sp
    6a2c:	                   rts

00006a2e <saveHandlers>:

void saveHandlers (BPTR fp) {
	put2bytes (currentEvents -> leftMouseFunction,		fp);
    6a2e:	movea.l 1c1d4 <currentEvents>,a0
    6a34:	move.l (a0),d0
    6a36:	move.l 4(sp),-(sp)
    6a3a:	move.l d0,-(sp)
    6a3c:	jsr 8d0 <put2bytes>
    6a42:	addq.l #8,sp
	put2bytes (currentEvents -> leftMouseUpFunction,	fp);
    6a44:	movea.l 1c1d4 <currentEvents>,a0
    6a4a:	move.l 4(a0),d0
    6a4e:	move.l 4(sp),-(sp)
    6a52:	move.l d0,-(sp)
    6a54:	jsr 8d0 <put2bytes>
    6a5a:	addq.l #8,sp
	put2bytes (currentEvents -> rightMouseFunction,		fp);
    6a5c:	movea.l 1c1d4 <currentEvents>,a0
    6a62:	move.l 8(a0),d0
    6a66:	move.l 4(sp),-(sp)
    6a6a:	move.l d0,-(sp)
    6a6c:	jsr 8d0 <put2bytes>
    6a72:	addq.l #8,sp
	put2bytes (currentEvents -> rightMouseUpFunction,	fp);
    6a74:	movea.l 1c1d4 <currentEvents>,a0
    6a7a:	move.l 12(a0),d0
    6a7e:	move.l 4(sp),-(sp)
    6a82:	move.l d0,-(sp)
    6a84:	jsr 8d0 <put2bytes>
    6a8a:	addq.l #8,sp
	put2bytes (currentEvents -> moveMouseFunction,		fp);
    6a8c:	movea.l 1c1d4 <currentEvents>,a0
    6a92:	move.l 16(a0),d0
    6a96:	move.l 4(sp),-(sp)
    6a9a:	move.l d0,-(sp)
    6a9c:	jsr 8d0 <put2bytes>
    6aa2:	addq.l #8,sp
	put2bytes (currentEvents -> focusFunction,			fp);
    6aa4:	movea.l 1c1d4 <currentEvents>,a0
    6aaa:	move.l 20(a0),d0
    6aae:	move.l 4(sp),-(sp)
    6ab2:	move.l d0,-(sp)
    6ab4:	jsr 8d0 <put2bytes>
    6aba:	addq.l #8,sp
	put2bytes (currentEvents -> spaceFunction,			fp);
    6abc:	movea.l 1c1d4 <currentEvents>,a0
    6ac2:	move.l 24(a0),d0
    6ac6:	move.l 4(sp),-(sp)
    6aca:	move.l d0,-(sp)
    6acc:	jsr 8d0 <put2bytes>
    6ad2:	addq.l #8,sp
}
    6ad4:	nop
    6ad6:	rts

00006ad8 <sludgeDisplay>:

void sludgeDisplay () {					
    6ad8:	subq.l #4,sp
  	volatile struct Custom *custom = (struct Custom*)0xdff000;
    6ada:	move.l #14675968,(sp)
	displayCursor();
    6ae0:	jsr c58 <displayCursor>
	CstDrawBackdrop();
    6ae6:	jsr 14c8 <CstDrawBackdrop>
	CstRestoreScreen();
    6aec:	jsr 2b7e <CstRestoreScreen>
	drawPeople();
    6af2:	jsr a062 <drawPeople>
	CstSwapBuffer();
    6af8:	jsr 38b4 <CstSwapBuffer>
}
    6afe:	nop
    6b00:	addq.l #4,sp
    6b02:	rts

00006b04 <stackSetByIndex>:

BOOL stackSetByIndex (struct variableStack * vS, unsigned int theIndex, const struct variable * va) {
	while (theIndex--) {
    6b04:	      /-- bra.s 6b24 <stackSetByIndex+0x20>
		vS = vS->next;
    6b06:	/-----|-> movea.l 4(sp),a0
    6b0a:	|     |   move.l 8(a0),4(sp)
		if (!vS) {
    6b10:	|     +-- bne.s 6b24 <stackSetByIndex+0x20>
			KPrintF("Index past end of stack.");
    6b12:	|     |   pea 18b01 <PutChar+0xeb7>
    6b18:	|     |   jsr 17176 <KPrintF>
    6b1e:	|     |   addq.l #4,sp
			return FALSE;
    6b20:	|     |   clr.w d0
    6b22:	|  /--|-- bra.s 6b46 <stackSetByIndex+0x42>
	while (theIndex--) {
    6b24:	|  |  \-> move.l 8(sp),d0
    6b28:	|  |      move.l d0,d1
    6b2a:	|  |      subq.l #1,d1
    6b2c:	|  |      move.l d1,8(sp)
    6b30:	|  |      tst.l d0
    6b32:	\--|----- bne.s 6b06 <stackSetByIndex+0x2>
		}
	}
	return copyVariable(va, &(vS->thisVar));
    6b34:	   |      move.l 4(sp),d0
    6b38:	   |      move.l d0,-(sp)
    6b3a:	   |      move.l 16(sp),-(sp)
    6b3e:	   |      jsr 14c08 <copyVariable>
    6b44:	   |      addq.l #8,sp
}
    6b46:	   \----> rts

00006b48 <startNewFunctionNum>:

int startNewFunctionNum (unsigned int funcNum, unsigned int numParamsExpected, struct loadedFunction * calledBy, struct variableStack ** vStack, BOOL returnSommet) {
    6b48:	             lea -24(sp),sp
    6b4c:	             move.l a6,-(sp)
    6b4e:	             move.l 48(sp),d0
    6b52:	             move.w d0,d0
    6b54:	             move.w d0,6(sp)
		
	struct loadedFunction * newFunc = AllocVec(sizeof(struct loadedFunction),MEMF_ANY);
    6b58:	             moveq #58,d0
    6b5a:	             move.l d0,24(sp)
    6b5e:	             clr.l 20(sp)
    6b62:	             move.l 1c85c <SysBase>,d0
    6b68:	             movea.l d0,a6
    6b6a:	             move.l 24(sp),d0
    6b6e:	             move.l 20(sp),d1
    6b72:	             jsr -684(a6)
    6b76:	             move.l d0,16(sp)
    6b7a:	             move.l 16(sp),d0
    6b7e:	             move.l d0,12(sp)
	if(!newFunc) {
    6b82:	         /-- bne.s 6b98 <startNewFunctionNum+0x50>
		KPrintF("startNewFunction: Cannot allocate memory");
    6b84:	         |   pea 18b1a <PutChar+0xed0>
    6b8a:	         |   jsr 17176 <KPrintF>
    6b90:	         |   addq.l #4,sp
		return 0;
    6b92:	         |   moveq #0,d0
    6b94:	/--------|-- bra.w 6cae <startNewFunctionNum+0x166>
	}
	newFunc -> originalNumber = funcNum;
    6b98:	|        \-> move.l 32(sp),d0
    6b9c:	|            movea.l 12(sp),a0
    6ba0:	|            move.l d0,(a0)

	loadFunctionCode (newFunc);
    6ba2:	|            move.l 12(sp),-(sp)
    6ba6:	|            jsr 62b8 <loadFunctionCode>
    6bac:	|            addq.l #4,sp

	if (newFunc -> numArgs != (int)numParamsExpected) {
    6bae:	|            movea.l 12(sp),a0
    6bb2:	|            move.l 16(a0),d1
    6bb6:	|            move.l 36(sp),d0
    6bba:	|            cmp.l d1,d0
    6bbc:	|        /-- beq.s 6bd2 <startNewFunctionNum+0x8a>
		KPrintF("Wrong number of parameters!");
    6bbe:	|        |   pea 18b43 <PutChar+0xef9>
    6bc4:	|        |   jsr 17176 <KPrintF>
    6bca:	|        |   addq.l #4,sp
		return NULL; 
    6bcc:	|        |   moveq #0,d0
    6bce:	+--------|-- bra.w 6cae <startNewFunctionNum+0x166>
	}
	if (newFunc -> numArgs > newFunc -> numLocals)  {
    6bd2:	|        \-> movea.l 12(sp),a0
    6bd6:	|            move.l 16(a0),d1
    6bda:	|            movea.l 12(sp),a0
    6bde:	|            move.l 8(a0),d0
    6be2:	|            cmp.l d1,d0
    6be4:	|  /-------- bge.s 6c4e <startNewFunctionNum+0x106>
		KPrintF ("More arguments than local variable space!");
    6be6:	|  |         pea 18b5f <PutChar+0xf15>
    6bec:	|  |         jsr 17176 <KPrintF>
    6bf2:	|  |         addq.l #4,sp
		return NULL; 
    6bf4:	|  |         moveq #0,d0
    6bf6:	+--|-------- bra.w 6cae <startNewFunctionNum+0x166>
	}
	
	// Now, lets copy the parameters from the calling function's stack...

	while (numParamsExpected) {
		struct variableStack *vStacksimpleptr = *vStack;
    6bfa:	|  |  /----> movea.l 44(sp),a0
    6bfe:	|  |  |      move.l (a0),8(sp)
		numParamsExpected --;
    6c02:	|  |  |      subq.l #1,36(sp)
		if (*vStack == NULL) {
    6c06:	|  |  |      movea.l 44(sp),a0
    6c0a:	|  |  |      move.l (a0),d0
    6c0c:	|  |  |  /-- bne.s 6c22 <startNewFunctionNum+0xda>
			KPrintF("Corrupted file! The stack's empty and there were still parameters expected");
    6c0e:	|  |  |  |   pea 18b89 <PutChar+0xf3f>
    6c14:	|  |  |  |   jsr 17176 <KPrintF>
    6c1a:	|  |  |  |   addq.l #4,sp
			return NULL;
    6c1c:	|  |  |  |   moveq #0,d0
    6c1e:	+--|--|--|-- bra.w 6cae <startNewFunctionNum+0x166>
		}
		copyVariable (&vStacksimpleptr -> thisVar, &newFunc->localVars[numParamsExpected]);
    6c22:	|  |  |  \-> movea.l 12(sp),a0
    6c26:	|  |  |      move.l 20(a0),d1
    6c2a:	|  |  |      move.l 36(sp),d0
    6c2e:	|  |  |      lsl.l #3,d0
    6c30:	|  |  |      add.l d0,d1
    6c32:	|  |  |      move.l 8(sp),d0
    6c36:	|  |  |      move.l d1,-(sp)
    6c38:	|  |  |      move.l d0,-(sp)
    6c3a:	|  |  |      jsr 14c08 <copyVariable>
    6c40:	|  |  |      addq.l #8,sp
		trimStack ( vStack);
    6c42:	|  |  |      move.l 44(sp),-(sp)
    6c46:	|  |  |      jsr 150d2 <trimStack>
    6c4c:	|  |  |      addq.l #4,sp
	while (numParamsExpected) {
    6c4e:	|  \--|----> tst.l 36(sp)
    6c52:	|     \----- bne.s 6bfa <startNewFunctionNum+0xb2>
	}

	newFunc -> cancelMe = FALSE;
    6c54:	|            movea.l 12(sp),a0
    6c58:	|            clr.w 54(a0)
	newFunc -> timeLeft = 0;
    6c5c:	|            movea.l 12(sp),a0
    6c60:	|            clr.l 12(a0)
	newFunc -> returnSomething = returnSommet;
    6c64:	|            movea.l 12(sp),a0
    6c68:	|            move.w 6(sp),48(a0)
	newFunc -> calledBy = calledBy;
    6c6e:	|            movea.l 12(sp),a0
    6c72:	|            move.l 40(sp),40(a0)
	newFunc -> stack = NULL;
    6c78:	|            movea.l 12(sp),a0
    6c7c:	|            clr.l 24(a0)
	newFunc -> freezerLevel = 0;
    6c80:	|            movea.l 12(sp),a0
    6c84:	|            clr.b 56(a0)
	newFunc -> runThisLine = 0;
    6c88:	|            movea.l 12(sp),a0
    6c8c:	|            clr.l 36(a0)
	newFunc -> isSpeech = 0;
    6c90:	|            movea.l 12(sp),a0
    6c94:	|            clr.w 50(a0)
	newFunc -> reg.varType = SVT_NULL;
    6c98:	|            movea.l 12(sp),a0
    6c9c:	|            clr.l 28(a0)

	restartFunction (newFunc);
    6ca0:	|            move.l 12(sp),-(sp)
    6ca4:	|            jsr 68fc <restartFunction>
    6caa:	|            addq.l #4,sp
	return 1;
    6cac:	|            moveq #1,d0
}
    6cae:	\----------> movea.l (sp)+,a6
    6cb0:	             lea 24(sp),sp
    6cb4:	             rts

00006cb6 <unfreezeSubs>:

void unfreezeSubs () {
    6cb6:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    6cb8:	          move.l 1c7f4 <allRunningFunctions>,(sp)

	while (thisFunction) {
    6cbe:	   /----- bra.s 6cdc <unfreezeSubs+0x26>
		if (thisFunction -> freezerLevel) thisFunction -> freezerLevel--;
    6cc0:	/--|----> movea.l (sp),a0
    6cc2:	|  |      move.b 56(a0),d0
    6cc6:	|  |  /-- beq.s 6cd6 <unfreezeSubs+0x20>
    6cc8:	|  |  |   movea.l (sp),a0
    6cca:	|  |  |   move.b 56(a0),d0
    6cce:	|  |  |   subq.b #1,d0
    6cd0:	|  |  |   movea.l (sp),a0
    6cd2:	|  |  |   move.b d0,56(a0)
		thisFunction = thisFunction -> next;
    6cd6:	|  |  \-> movea.l (sp),a0
    6cd8:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    6cdc:	|  \----> tst.l (sp)
    6cde:	\-------- bne.s 6cc0 <unfreezeSubs+0xa>
	}
}
    6ce0:	          nop
    6ce2:	          nop
    6ce4:	          addq.l #4,sp
    6ce6:	          rts

00006ce8 <finishAccess>:
char * convertString(char * s) {
	return NULL;
}

void finishAccess () {
	sliceBusy = FALSE;
    6ce8:	clr.w 1c1e0 <sliceBusy>
}
    6cee:	nop
    6cf0:	rts

00006cf2 <getNumberedString>:

char * getNumberedString (int value) {
    6cf2:	       lea -56(sp),sp
    6cf6:	       movem.l d2-d3/a6,-(sp)

	if (sliceBusy) {
    6cfa:	       move.w 1c1e0 <sliceBusy>,d0
    6d00:	   /-- beq.s 6d4a <getNumberedString+0x58>
		Write(Output(), (APTR)"getNumberedString: Can't read from data file. I'm already reading something\n", 76);        
    6d02:	   |   move.l 1c864 <DOSBase>,d0
    6d08:	   |   movea.l d0,a6
    6d0a:	   |   jsr -60(a6)
    6d0e:	   |   move.l d0,28(sp)
    6d12:	   |   move.l 28(sp),d0
    6d16:	   |   move.l d0,24(sp)
    6d1a:	   |   move.l #101332,20(sp)
    6d22:	   |   moveq #76,d0
    6d24:	   |   move.l d0,16(sp)
    6d28:	   |   move.l 1c864 <DOSBase>,d0
    6d2e:	   |   movea.l d0,a6
    6d30:	   |   move.l 24(sp),d1
    6d34:	   |   move.l 20(sp),d2
    6d38:	   |   move.l 16(sp),d3
    6d3c:	   |   jsr -48(a6)
    6d40:	   |   move.l d0,12(sp)
		return NULL;
    6d44:	   |   moveq #0,d0
    6d46:	/--|-- bra.w 6de6 <getNumberedString+0xf4>
	}

	Seek(bigDataFile, (value << 2) + startOfTextIndex, OFFSET_BEGINNING);
    6d4a:	|  \-> move.l 1c844 <bigDataFile>,64(sp)
    6d52:	|      move.l 72(sp),d0
    6d56:	|      add.l d0,d0
    6d58:	|      add.l d0,d0
    6d5a:	|      move.l d0,d1
    6d5c:	|      move.l 1c850 <startOfTextIndex>,d0
    6d62:	|      add.l d1,d0
    6d64:	|      move.l d0,60(sp)
    6d68:	|      moveq #-1,d0
    6d6a:	|      move.l d0,56(sp)
    6d6e:	|      move.l 1c864 <DOSBase>,d0
    6d74:	|      movea.l d0,a6
    6d76:	|      move.l 64(sp),d1
    6d7a:	|      move.l 60(sp),d2
    6d7e:	|      move.l 56(sp),d3
    6d82:	|      jsr -66(a6)
    6d86:	|      move.l d0,52(sp)
	value = get4bytes (bigDataFile);
    6d8a:	|      move.l 1c844 <bigDataFile>,d0
    6d90:	|      move.l d0,-(sp)
    6d92:	|      jsr 718 <get4bytes>
    6d98:	|      addq.l #4,sp
    6d9a:	|      move.l d0,72(sp)
	Seek (bigDataFile, value, OFFSET_BEGINING);
    6d9e:	|      move.l 1c844 <bigDataFile>,48(sp)
    6da6:	|      move.l 72(sp),44(sp)
    6dac:	|      moveq #-1,d0
    6dae:	|      move.l d0,40(sp)
    6db2:	|      move.l 1c864 <DOSBase>,d0
    6db8:	|      movea.l d0,a6
    6dba:	|      move.l 48(sp),d1
    6dbe:	|      move.l 44(sp),d2
    6dc2:	|      move.l 40(sp),d3
    6dc6:	|      jsr -66(a6)
    6dca:	|      move.l d0,36(sp)

	char * s = readString (bigDataFile);    
    6dce:	|      move.l 1c844 <bigDataFile>,d0
    6dd4:	|      move.l d0,-(sp)
    6dd6:	|      jsr b02 <readString>
    6ddc:	|      addq.l #4,sp
    6dde:	|      move.l d0,32(sp)
	
	return s;
    6de2:	|      move.l 32(sp),d0
}
    6de6:	\----> movem.l (sp)+,d2-d3/a6
    6dea:	       lea 56(sp),sp
    6dee:	       rts

00006df0 <openFileFromNum>:

unsigned int openFileFromNum (int num) {
    6df0:	       lea -32(sp),sp
    6df4:	       movem.l d2-d3/a6,-(sp)
//	FILE * dbug = fopen ("debuggy.txt", "at");

	if (sliceBusy) {
    6df8:	       move.w 1c1e0 <sliceBusy>,d0
    6dfe:	   /-- beq.s 6e1a <openFileFromNum+0x2a>
		KPrintF("Can't read from data file", "I'm already reading something");
    6e00:	   |   pea 18c21 <PutChar+0xfd7>
    6e06:	   |   pea 18c3f <PutChar+0xff5>
    6e0c:	   |   jsr 17176 <KPrintF>
    6e12:	   |   addq.l #8,sp
		return 0;
    6e14:	   |   moveq #0,d0
    6e16:	/--|-- bra.w 6eae <openFileFromNum+0xbe>
	}

	Seek( bigDataFile,  startOfDataIndex + (num << 2), OFFSET_BEGINING);	
    6e1a:	|  \-> move.l 1c844 <bigDataFile>,40(sp)
    6e22:	|      move.l 48(sp),d0
    6e26:	|      add.l d0,d0
    6e28:	|      add.l d0,d0
    6e2a:	|      move.l d0,d1
    6e2c:	|      move.l 1c84c <startOfDataIndex>,d0
    6e32:	|      add.l d1,d0
    6e34:	|      move.l d0,36(sp)
    6e38:	|      moveq #-1,d0
    6e3a:	|      move.l d0,32(sp)
    6e3e:	|      move.l 1c864 <DOSBase>,d0
    6e44:	|      movea.l d0,a6
    6e46:	|      move.l 40(sp),d1
    6e4a:	|      move.l 36(sp),d2
    6e4e:	|      move.l 32(sp),d3
    6e52:	|      jsr -66(a6)
    6e56:	|      move.l d0,28(sp)
	Seek( bigDataFile, get4bytes (bigDataFile), OFFSET_CURRENT);
    6e5a:	|      move.l 1c844 <bigDataFile>,24(sp)
    6e62:	|      move.l 1c844 <bigDataFile>,d0
    6e68:	|      move.l d0,-(sp)
    6e6a:	|      jsr 718 <get4bytes>
    6e70:	|      addq.l #4,sp
    6e72:	|      move.l d0,20(sp)
    6e76:	|      clr.l 16(sp)
    6e7a:	|      move.l 1c864 <DOSBase>,d0
    6e80:	|      movea.l d0,a6
    6e82:	|      move.l 24(sp),d1
    6e86:	|      move.l 20(sp),d2
    6e8a:	|      move.l 16(sp),d3
    6e8e:	|      jsr -66(a6)
    6e92:	|      move.l d0,12(sp)
//	fprintf (dbug, "Jumping to %li (for data) \n", ftell (bigDataFile));
	sliceBusy = TRUE;
    6e96:	|      move.w #1,1c1e0 <sliceBusy>
//	fclose (dbug);

	return get4bytes (bigDataFile);
    6e9e:	|      move.l 1c844 <bigDataFile>,d0
    6ea4:	|      move.l d0,-(sp)
    6ea6:	|      jsr 718 <get4bytes>
    6eac:	|      addq.l #4,sp
}
    6eae:	\----> movem.l (sp)+,d2-d3/a6
    6eb2:	       lea 32(sp),sp
    6eb6:	       rts

00006eb8 <openObjectSlice>:

BOOL openObjectSlice (int num) {
    6eb8:	       lea -32(sp),sp
    6ebc:	       movem.l d2-d3/a6,-(sp)
    // BPTR dbug = FOpen("debuggy.txt", MODE_NEWFILE);

    // FPrintf(dbug, "\nTrying to open object %i\n", num);

    if (sliceBusy) {
    6ec0:	       move.w 1c1e0 <sliceBusy>,d0
    6ec6:	   /-- beq.s 6ee2 <openObjectSlice+0x2a>
        KPrintF("Can't read from data file", "I'm already reading something");
    6ec8:	   |   pea 18c21 <PutChar+0xfd7>
    6ece:	   |   pea 18c3f <PutChar+0xff5>
    6ed4:	   |   jsr 17176 <KPrintF>
    6eda:	   |   addq.l #8,sp
        return FALSE;
    6edc:	   |   clr.w d0
    6ede:	/--|-- bra.w 6f6e <openObjectSlice+0xb6>
    }

    // FPrintf(dbug, "Going to position %ld\n", startOfObjectIndex + (num << 2));
    Seek(bigDataFile, startOfObjectIndex + (num << 2), OFFSET_BEGINNING);
    6ee2:	|  \-> move.l 1c844 <bigDataFile>,40(sp)
    6eea:	|      move.l 48(sp),d0
    6eee:	|      add.l d0,d0
    6ef0:	|      add.l d0,d0
    6ef2:	|      move.l d0,d1
    6ef4:	|      move.l 1c858 <startOfObjectIndex>,d0
    6efa:	|      add.l d1,d0
    6efc:	|      move.l d0,36(sp)
    6f00:	|      moveq #-1,d0
    6f02:	|      move.l d0,32(sp)
    6f06:	|      move.l 1c864 <DOSBase>,d0
    6f0c:	|      movea.l d0,a6
    6f0e:	|      move.l 40(sp),d1
    6f12:	|      move.l 36(sp),d2
    6f16:	|      move.l 32(sp),d3
    6f1a:	|      jsr -66(a6)
    6f1e:	|      move.l d0,28(sp)
    Seek(bigDataFile, get4bytes(bigDataFile), OFFSET_BEGINNING);
    6f22:	|      move.l 1c844 <bigDataFile>,24(sp)
    6f2a:	|      move.l 1c844 <bigDataFile>,d0
    6f30:	|      move.l d0,-(sp)
    6f32:	|      jsr 718 <get4bytes>
    6f38:	|      addq.l #4,sp
    6f3a:	|      move.l d0,20(sp)
    6f3e:	|      moveq #-1,d0
    6f40:	|      move.l d0,16(sp)
    6f44:	|      move.l 1c864 <DOSBase>,d0
    6f4a:	|      movea.l d0,a6
    6f4c:	|      move.l 24(sp),d1
    6f50:	|      move.l 20(sp),d2
    6f54:	|      move.l 16(sp),d3
    6f58:	|      jsr -66(a6)
    6f5c:	|      move.l d0,12(sp)
    // FPrintf(dbug, "Told to skip forward to %ld\n", FTell(bigDataFile));
    // FClose(dbug);
    return sliceBusy = TRUE;
    6f60:	|      move.w #1,1c1e0 <sliceBusy>
    6f68:	|      move.w 1c1e0 <sliceBusy>,d0
}
    6f6e:	\----> movem.l (sp)+,d2-d3/a6
    6f72:	       lea 32(sp),sp
    6f76:	       rts

00006f78 <openSubSlice>:

BOOL openSubSlice (int num) {
    6f78:	       lea -32(sp),sp
    6f7c:	       movem.l d2-d3/a6,-(sp)
//	FILE * dbug = fopen ("debuggy.txt", "at");

//	fprintf (dbug, "\nTrying to open sub %i\n", num);

	if (sliceBusy) {
    6f80:	       move.w 1c1e0 <sliceBusy>,d0
    6f86:	   /-- beq.s 6fa2 <openSubSlice+0x2a>
		KPrintF("Can't read from data file", "I'm already reading something");
    6f88:	   |   pea 18c21 <PutChar+0xfd7>
    6f8e:	   |   pea 18c3f <PutChar+0xff5>
    6f94:	   |   jsr 17176 <KPrintF>
    6f9a:	   |   addq.l #8,sp
		return FALSE;
    6f9c:	   |   clr.w d0
    6f9e:	/--|-- bra.w 702e <openSubSlice+0xb6>
	}

//	fprintf (dbug, "Going to position %li\n", startOfSubIndex + (num << 2));
	Seek(bigDataFile, startOfSubIndex + (num << 2), OFFSET_BEGINNING);
    6fa2:	|  \-> move.l 1c844 <bigDataFile>,40(sp)
    6faa:	|      move.l 48(sp),d0
    6fae:	|      add.l d0,d0
    6fb0:	|      add.l d0,d0
    6fb2:	|      move.l d0,d1
    6fb4:	|      move.l 1c854 <startOfSubIndex>,d0
    6fba:	|      add.l d1,d0
    6fbc:	|      move.l d0,36(sp)
    6fc0:	|      moveq #-1,d0
    6fc2:	|      move.l d0,32(sp)
    6fc6:	|      move.l 1c864 <DOSBase>,d0
    6fcc:	|      movea.l d0,a6
    6fce:	|      move.l 40(sp),d1
    6fd2:	|      move.l 36(sp),d2
    6fd6:	|      move.l 32(sp),d3
    6fda:	|      jsr -66(a6)
    6fde:	|      move.l d0,28(sp)
	Seek(bigDataFile, get4bytes (bigDataFile), OFFSET_BEGINNING);
    6fe2:	|      move.l 1c844 <bigDataFile>,24(sp)
    6fea:	|      move.l 1c844 <bigDataFile>,d0
    6ff0:	|      move.l d0,-(sp)
    6ff2:	|      jsr 718 <get4bytes>
    6ff8:	|      addq.l #4,sp
    6ffa:	|      move.l d0,20(sp)
    6ffe:	|      moveq #-1,d0
    7000:	|      move.l d0,16(sp)
    7004:	|      move.l 1c864 <DOSBase>,d0
    700a:	|      movea.l d0,a6
    700c:	|      move.l 24(sp),d1
    7010:	|      move.l 20(sp),d2
    7014:	|      move.l 16(sp),d3
    7018:	|      jsr -66(a6)
    701c:	|      move.l d0,12(sp)
//	fprintf (dbug, "Told to skip forward to %li\n", ftell (bigDataFile));
//	fclose (dbug);
	return sliceBusy = TRUE;
    7020:	|      move.w #1,1c1e0 <sliceBusy>
    7028:	|      move.w 1c1e0 <sliceBusy>,d0
}
    702e:	\----> movem.l (sp)+,d2-d3/a6
    7032:	       lea 32(sp),sp
    7036:	       rts

00007038 <setFileIndices>:

void setFileIndices (BPTR fp, unsigned int numLanguages, unsigned int skipBefore) {
    7038:	       lea -180(sp),sp
    703c:	       movem.l d2-d3/a6,-(sp)
	if (fp) {
    7040:	       tst.l 196(sp)
    7044:	/----- beq.s 7084 <setFileIndices+0x4c>
		// Keep hold of the file handle, and let things get at it
		bigDataFile = fp;
    7046:	|      move.l 196(sp),1c844 <bigDataFile>
		startIndex = Seek( fp, 0, OFFSET_CURRENT);
    704e:	|      move.l 196(sp),168(sp)
    7054:	|      clr.l 164(sp)
    7058:	|      clr.l 160(sp)
    705c:	|      move.l 1c864 <DOSBase>,d0
    7062:	|      movea.l d0,a6
    7064:	|      move.l 168(sp),d1
    7068:	|      move.l 164(sp),d2
    706c:	|      move.l 160(sp),d3
    7070:	|      jsr -66(a6)
    7074:	|      move.l d0,156(sp)
    7078:	|      move.l 156(sp),d0
    707c:	|      move.l d0,1c848 <startIndex>
    7082:	|  /-- bra.s 70be <setFileIndices+0x86>
	} else {
		// No file pointer - this means that we reuse the bigDataFile
		fp = bigDataFile;
    7084:	\--|-> move.l 1c844 <bigDataFile>,196(sp)
        Seek(fp, startIndex, OFFSET_BEGINNING);
    708c:	   |   move.l 196(sp),184(sp)
    7092:	   |   move.l 1c848 <startIndex>,d0
    7098:	   |   move.l d0,180(sp)
    709c:	   |   moveq #-1,d0
    709e:	   |   move.l d0,176(sp)
    70a2:	   |   move.l 1c864 <DOSBase>,d0
    70a8:	   |   movea.l d0,a6
    70aa:	   |   move.l 184(sp),d1
    70ae:	   |   move.l 180(sp),d2
    70b2:	   |   move.l 176(sp),d3
    70b6:	   |   jsr -66(a6)
    70ba:	   |   move.l d0,172(sp)
	}
	sliceBusy = FALSE;
    70be:	   \-> clr.w 1c1e0 <sliceBusy>

	if (skipBefore > numLanguages) {
    70c4:	       move.l 204(sp),d0
    70c8:	       cmp.l 200(sp),d0
    70cc:	   /-- bls.s 70e0 <setFileIndices+0xa8>
		KPrintF("setFileIndices: Warning: Not a valid language ID! Using default instead.");
    70ce:	   |   pea 18c59 <PutChar+0x100f>
    70d4:	   |   jsr 17176 <KPrintF>
    70da:	   |   addq.l #4,sp
		skipBefore = 0;
    70dc:	   |   clr.l 204(sp)
	}

	// STRINGS
	int skipAfter = numLanguages - skipBefore;
    70e0:	   \-> move.l 200(sp),d0
    70e4:	       sub.l 204(sp),d0
    70e8:	       move.l d0,188(sp)
	while (skipBefore) {
    70ec:	   /-- bra.s 712a <setFileIndices+0xf2>
        Seek(fp, get4bytes(fp),OFFSET_BEGINING);		
    70ee:	/--|-> move.l 196(sp),24(sp)
    70f4:	|  |   move.l 196(sp),-(sp)
    70f8:	|  |   jsr 718 <get4bytes>
    70fe:	|  |   addq.l #4,sp
    7100:	|  |   move.l d0,20(sp)
    7104:	|  |   moveq #-1,d0
    7106:	|  |   move.l d0,16(sp)
    710a:	|  |   move.l 1c864 <DOSBase>,d0
    7110:	|  |   movea.l d0,a6
    7112:	|  |   move.l 24(sp),d1
    7116:	|  |   move.l 20(sp),d2
    711a:	|  |   move.l 16(sp),d3
    711e:	|  |   jsr -66(a6)
    7122:	|  |   move.l d0,12(sp)
		skipBefore --;
    7126:	|  |   subq.l #1,204(sp)
	while (skipBefore) {
    712a:	|  \-> tst.l 204(sp)
    712e:	\----- bne.s 70ee <setFileIndices+0xb6>
	}
	startOfTextIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    7130:	       move.l 196(sp),152(sp)
    7136:	       clr.l 148(sp)
    713a:	       clr.l 144(sp)
    713e:	       move.l 1c864 <DOSBase>,d0
    7144:	       movea.l d0,a6
    7146:	       move.l 152(sp),d1
    714a:	       move.l 148(sp),d2
    714e:	       move.l 144(sp),d3
    7152:	       jsr -66(a6)
    7156:	       move.l d0,140(sp)
    715a:	       move.l 140(sp),d0
    715e:	       addq.l #4,d0
    7160:	       move.l d0,1c850 <startOfTextIndex>

	Seek(fp, get4bytes (fp), OFFSET_BEGINNING);
    7166:	       move.l 196(sp),136(sp)
    716c:	       move.l 196(sp),-(sp)
    7170:	       jsr 718 <get4bytes>
    7176:	       addq.l #4,sp
    7178:	       move.l d0,132(sp)
    717c:	       moveq #-1,d0
    717e:	       move.l d0,128(sp)
    7182:	       move.l 1c864 <DOSBase>,d0
    7188:	       movea.l d0,a6
    718a:	       move.l 136(sp),d1
    718e:	       move.l 132(sp),d2
    7192:	       move.l 128(sp),d3
    7196:	       jsr -66(a6)
    719a:	       move.l d0,124(sp)

	while (skipAfter) {
    719e:	   /-- bra.s 71dc <setFileIndices+0x1a4>
        Seek( fp, get4bytes (fp), OFFSET_BEGINING);
    71a0:	/--|-> move.l 196(sp),40(sp)
    71a6:	|  |   move.l 196(sp),-(sp)
    71aa:	|  |   jsr 718 <get4bytes>
    71b0:	|  |   addq.l #4,sp
    71b2:	|  |   move.l d0,36(sp)
    71b6:	|  |   moveq #-1,d0
    71b8:	|  |   move.l d0,32(sp)
    71bc:	|  |   move.l 1c864 <DOSBase>,d0
    71c2:	|  |   movea.l d0,a6
    71c4:	|  |   move.l 40(sp),d1
    71c8:	|  |   move.l 36(sp),d2
    71cc:	|  |   move.l 32(sp),d3
    71d0:	|  |   jsr -66(a6)
    71d4:	|  |   move.l d0,28(sp)
		skipAfter --;
    71d8:	|  |   subq.l #1,188(sp)
	while (skipAfter) {
    71dc:	|  \-> tst.l 188(sp)
    71e0:	\----- bne.s 71a0 <setFileIndices+0x168>
	}

	startOfSubIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    71e2:	       move.l 196(sp),120(sp)
    71e8:	       clr.l 116(sp)
    71ec:	       clr.l 112(sp)
    71f0:	       move.l 1c864 <DOSBase>,d0
    71f6:	       movea.l d0,a6
    71f8:	       move.l 120(sp),d1
    71fc:	       move.l 116(sp),d2
    7200:	       move.l 112(sp),d3
    7204:	       jsr -66(a6)
    7208:	       move.l d0,108(sp)
    720c:	       move.l 108(sp),d0
    7210:	       addq.l #4,d0
    7212:	       move.l d0,1c854 <startOfSubIndex>
    Seek( fp, get4bytes (fp), OFFSET_CURRENT);
    7218:	       move.l 196(sp),104(sp)
    721e:	       move.l 196(sp),-(sp)
    7222:	       jsr 718 <get4bytes>
    7228:	       addq.l #4,sp
    722a:	       move.l d0,100(sp)
    722e:	       clr.l 96(sp)
    7232:	       move.l 1c864 <DOSBase>,d0
    7238:	       movea.l d0,a6
    723a:	       move.l 104(sp),d1
    723e:	       move.l 100(sp),d2
    7242:	       move.l 96(sp),d3
    7246:	       jsr -66(a6)
    724a:	       move.l d0,92(sp)

	startOfObjectIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    724e:	       move.l 196(sp),88(sp)
    7254:	       clr.l 84(sp)
    7258:	       clr.l 80(sp)
    725c:	       move.l 1c864 <DOSBase>,d0
    7262:	       movea.l d0,a6
    7264:	       move.l 88(sp),d1
    7268:	       move.l 84(sp),d2
    726c:	       move.l 80(sp),d3
    7270:	       jsr -66(a6)
    7274:	       move.l d0,76(sp)
    7278:	       move.l 76(sp),d0
    727c:	       addq.l #4,d0
    727e:	       move.l d0,1c858 <startOfObjectIndex>
	Seek (fp, get4bytes (fp), OFFSET_CURRENT);
    7284:	       move.l 196(sp),72(sp)
    728a:	       move.l 196(sp),-(sp)
    728e:	       jsr 718 <get4bytes>
    7294:	       addq.l #4,sp
    7296:	       move.l d0,68(sp)
    729a:	       clr.l 64(sp)
    729e:	       move.l 1c864 <DOSBase>,d0
    72a4:	       movea.l d0,a6
    72a6:	       move.l 72(sp),d1
    72aa:	       move.l 68(sp),d2
    72ae:	       move.l 64(sp),d3
    72b2:	       jsr -66(a6)
    72b6:	       move.l d0,60(sp)

	// Remember that the data section starts here
	startOfDataIndex =  Seek( fp, 0, OFFSET_CURRENT);
    72ba:	       move.l 196(sp),56(sp)
    72c0:	       clr.l 52(sp)
    72c4:	       clr.l 48(sp)
    72c8:	       move.l 1c864 <DOSBase>,d0
    72ce:	       movea.l d0,a6
    72d0:	       move.l 56(sp),d1
    72d4:	       move.l 52(sp),d2
    72d8:	       move.l 48(sp),d3
    72dc:	       jsr -66(a6)
    72e0:	       move.l d0,44(sp)
    72e4:	       move.l 44(sp),d0
    72e8:	       move.l d0,1c84c <startOfDataIndex>
    72ee:	       nop
    72f0:	       movem.l (sp)+,d2-d3/a6
    72f4:	       lea 180(sp),sp
    72f8:	       rts

000072fa <GetVBR>:
static volatile APTR VBR=0;
static APTR SystemIrq;
 
struct View *ActiView;

static APTR GetVBR(void) {
    72fa:	    lea -20(sp),sp
    72fe:	    move.l a6,-(sp)
    7300:	    move.l d7,-(sp)
	APTR vbr = 0;
    7302:	    clr.l 24(sp)
	UWORD getvbr[] = { 0x4e7a, 0x0801, 0x4e73 }; // MOVEC.L VBR,D0 RTE
    7306:	    move.w #20090,10(sp)
    730c:	    move.w #2049,12(sp)
    7312:	    move.w #20083,14(sp)

	if (SysBase->AttnFlags & AFF_68010) 
    7318:	    movea.l 1c85c <SysBase>,a0
    731e:	    move.w 296(a0),d0
    7322:	    move.w d0,d0
    7324:	    andi.l #65535,d0
    732a:	    moveq #1,d1
    732c:	    and.l d1,d0
    732e:	/-- beq.s 735c <GetVBR+0x62>
		vbr = (APTR)Supervisor((ULONG (*)())getvbr);
    7330:	|   lea 28(sp),a0
    7334:	|   lea -18(a0),a0
    7338:	|   move.l a0,20(sp)
    733c:	|   move.l 1c85c <SysBase>,d0
    7342:	|   movea.l d0,a6
    7344:	|   move.l 20(sp),d7
    7348:	|   exg d7,a5
    734a:	|   jsr -30(a6)
    734e:	|   exg d7,a5
    7350:	|   move.l d0,16(sp)
    7354:	|   move.l 16(sp),d0
    7358:	|   move.l d0,24(sp)

	return vbr;
    735c:	\-> move.l 24(sp),d0
}
    7360:	    move.l (sp)+,d7
    7362:	    movea.l (sp)+,a6
    7364:	    lea 20(sp),sp
    7368:	    rts

0000736a <SetInterruptHandler>:

void SetInterruptHandler(APTR interrupt) {
	*(volatile APTR*)(((UBYTE*)VBR)+0x6c) = interrupt;
    736a:	movea.l 1c882 <VBR>,a0
    7370:	lea 108(a0),a0
    7374:	move.l 4(sp),(a0)
}
    7378:	nop
    737a:	rts

0000737c <GetInterruptHandler>:

APTR GetInterruptHandler() {
	return *(volatile APTR*)(((UBYTE*)VBR)+0x6c);
    737c:	movea.l 1c882 <VBR>,a0
    7382:	move.l 108(a0),d0
}
    7386:	rts

00007388 <TakeSystem>:
	UWORD tst=*(volatile UWORD*)&custom->dmaconr; //for compatiblity a1000
	(void)tst;
	while (*(volatile UWORD*)&custom->dmaconr&(1<<14)) {} //blitter busy wait
}

void TakeSystem() {
    7388:	       subq.l #8,sp
    738a:	       move.l a6,-(sp)
	KPrintF("TakeSystem: Run Forbid\n");
    738c:	       pea 18ca2 <PutChar+0x1058>
    7392:	       jsr 17176 <KPrintF>
    7398:	       addq.l #4,sp
	Forbid();
    739a:	       move.l 1c85c <SysBase>,d0
    73a0:	       movea.l d0,a6
    73a2:	       jsr -132(a6)
	//Save current interrupts and DMA settings so we can restore them upon exit. 
	KPrintF("TakeSystem: Saving Registers\n");
    73a6:	       pea 18cba <PutChar+0x1070>
    73ac:	       jsr 17176 <KPrintF>
    73b2:	       addq.l #4,sp
	SystemADKCON=custom->adkconr;
    73b4:	       movea.l 1c860 <custom>,a0
    73ba:	       move.w 16(a0),d0
    73be:	       move.w d0,1c880 <SystemADKCON>
	SystemInts=custom->intenar;
    73c4:	       movea.l 1c860 <custom>,a0
    73ca:	       move.w 28(a0),d0
    73ce:	       move.w d0,1c87c <SystemInts>
	SystemDMA=custom->dmaconr;
    73d4:	       movea.l 1c860 <custom>,a0
    73da:	       move.w 2(a0),d0
    73de:	       move.w d0,1c87e <SystemDMA>
	ActiView=GfxBase->ActiView; //store current view
    73e4:	       movea.l 1c868 <GfxBase>,a0
    73ea:	       move.l 34(a0),d0
    73ee:	       move.l d0,1c88a <ActiView>

	KPrintF("TakeSystem: LoadView\n");
    73f4:	       pea 18cd8 <PutChar+0x108e>
    73fa:	       jsr 17176 <KPrintF>
    7400:	       addq.l #4,sp
	LoadView(0);
    7402:	       clr.l 4(sp)
    7406:	       move.l 1c868 <GfxBase>,d0
    740c:	       movea.l d0,a6
    740e:	       movea.l 4(sp),a1
    7412:	       jsr -222(a6)
	KPrintF("TakeSystem: WaitTof\n");
    7416:	       pea 18cee <PutChar+0x10a4>
    741c:	       jsr 17176 <KPrintF>
    7422:	       addq.l #4,sp
	WaitTOF();
    7424:	       move.l 1c868 <GfxBase>,d0
    742a:	       movea.l d0,a6
    742c:	       jsr -270(a6)
	WaitTOF();
    7430:	       move.l 1c868 <GfxBase>,d0
    7436:	       movea.l d0,a6
    7438:	       jsr -270(a6)

	KPrintF("TakeSystem: WaitVBL\n");
    743c:	       pea 18d03 <PutChar+0x10b9>
    7442:	       jsr 17176 <KPrintF>
    7448:	       addq.l #4,sp
	WaitVbl();
    744a:	       jsr 170aa <WaitVbl>
	WaitVbl();
    7450:	       jsr 170aa <WaitVbl>

	KPrintF("TakeSystem: Doing Blitter Stuff\n");
    7456:	       pea 18d18 <PutChar+0x10ce>
    745c:	       jsr 17176 <KPrintF>
    7462:	       addq.l #4,sp
	OwnBlitter();
    7464:	       move.l 1c868 <GfxBase>,d0
    746a:	       movea.l d0,a6
    746c:	       jsr -456(a6)
	WaitBlit();	
    7470:	       move.l 1c868 <GfxBase>,d0
    7476:	       movea.l d0,a6
    7478:	       jsr -228(a6)
	Disable();
    747c:	       move.l 1c85c <SysBase>,d0
    7482:	       movea.l d0,a6
    7484:	       jsr -120(a6)
	
	//custom->intena=0x7fff;//disable all interrupts
	//custom->intreq=0x7fff;//Clear any interrupts that were pending
	
	KPrintF("TakeSystem: Clear DMA\n");
    7488:	       pea 18d39 <PutChar+0x10ef>
    748e:	       jsr 17176 <KPrintF>
    7494:	       addq.l #4,sp
	custom->dmacon=0x7fff;//Clear all DMA channels
    7496:	       movea.l 1c860 <custom>,a0
    749c:	       move.w #32767,150(a0)

	KPrintF("TakeSystem: Set all colors to black\n");
    74a2:	       pea 18d50 <PutChar+0x1106>
    74a8:	       jsr 17176 <KPrintF>
    74ae:	       addq.l #4,sp
	//set all colors black
	for(int a=0;a<32;a++)
    74b0:	       clr.l 8(sp)
    74b4:	   /-- bra.s 74d2 <TakeSystem+0x14a>
		custom->color[a]=0;
    74b6:	/--|-> movea.l 1c860 <custom>,a0
    74bc:	|  |   move.l 8(sp),d0
    74c0:	|  |   addi.l #192,d0
    74c6:	|  |   add.l d0,d0
    74c8:	|  |   move.w #0,(0,a0,d0.l)
	for(int a=0;a<32;a++)
    74ce:	|  |   addq.l #1,8(sp)
    74d2:	|  \-> moveq #31,d0
    74d4:	|      cmp.l 8(sp),d0
    74d8:	\----- bge.s 74b6 <TakeSystem+0x12e>

	WaitVbl();
    74da:	       jsr 170aa <WaitVbl>
	WaitVbl();
    74e0:	       jsr 170aa <WaitVbl>

	KPrintF("TakeSystem: Save System interrupts\n");
    74e6:	       pea 18d75 <PutChar+0x112b>
    74ec:	       jsr 17176 <KPrintF>
    74f2:	       addq.l #4,sp
	VBR=GetVBR();
    74f4:	       jsr 72fa <GetVBR>
    74fa:	       move.l d0,1c882 <VBR>
	SystemIrq=GetInterruptHandler(); //store interrupt register*/
    7500:	       jsr 737c <GetInterruptHandler>
    7506:	       move.l d0,1c886 <SystemIrq>
}
    750c:	       nop
    750e:	       movea.l (sp)+,a6
    7510:	       addq.l #8,sp
    7512:	       rts

00007514 <FreeSystem>:

void FreeSystem() { 
    7514:	subq.l #4,sp
    7516:	move.l a6,-(sp)
	WaitVbl();
    7518:	jsr 170aa <WaitVbl>
	WaitBlit();
    751e:	move.l 1c868 <GfxBase>,d0
    7524:	movea.l d0,a6
    7526:	jsr -228(a6)
	custom->intena=0x7fff;//disable all interrupts
    752a:	movea.l 1c860 <custom>,a0
    7530:	move.w #32767,154(a0)
	custom->intreq=0x7fff;//Clear any interrupts that were pending
    7536:	movea.l 1c860 <custom>,a0
    753c:	move.w #32767,156(a0)
	custom->dmacon=0x7fff;//Clear all DMA channels
    7542:	movea.l 1c860 <custom>,a0
    7548:	move.w #32767,150(a0)

	//restore interrupts
	SetInterruptHandler(SystemIrq);
    754e:	move.l 1c886 <SystemIrq>,d0
    7554:	move.l d0,-(sp)
    7556:	jsr 736a <SetInterruptHandler>
    755c:	addq.l #4,sp

	/*Restore system copper list(s). */
	custom->cop1lc=(ULONG)GfxBase->copinit;
    755e:	movea.l 1c868 <GfxBase>,a0
    7564:	move.l 38(a0),d0
    7568:	movea.l 1c860 <custom>,a0
    756e:	move.l d0,128(a0)
	custom->cop2lc=(ULONG)GfxBase->LOFlist;
    7572:	movea.l 1c868 <GfxBase>,a0
    7578:	move.l 50(a0),d0
    757c:	movea.l 1c860 <custom>,a0
    7582:	move.l d0,132(a0)
	custom->copjmp1=0x7fff; //start coppper
    7586:	movea.l 1c860 <custom>,a0
    758c:	move.w #32767,136(a0)

	/*Restore all interrupts and DMA settings. */
	//custom->intena=SystemInts|0x8000;
	custom->dmacon=SystemDMA|0x8000;
    7592:	move.w 1c87e <SystemDMA>,d0
    7598:	movea.l 1c860 <custom>,a0
    759e:	ori.w #-32768,d0
    75a2:	move.w d0,150(a0)
	custom->adkcon=SystemADKCON|0x8000;
    75a6:	move.w 1c880 <SystemADKCON>,d0
    75ac:	movea.l 1c860 <custom>,a0
    75b2:	ori.w #-32768,d0
    75b6:	move.w d0,158(a0)

	WaitBlit();	
    75ba:	move.l 1c868 <GfxBase>,d0
    75c0:	movea.l d0,a6
    75c2:	jsr -228(a6)
	DisownBlitter();
    75c6:	move.l 1c868 <GfxBase>,d0
    75cc:	movea.l d0,a6
    75ce:	jsr -462(a6)
	Enable();
    75d2:	move.l 1c85c <SysBase>,d0
    75d8:	movea.l d0,a6
    75da:	jsr -126(a6)

	LoadView(ActiView);
    75de:	move.l 1c88a <ActiView>,4(sp)
    75e6:	move.l 1c868 <GfxBase>,d0
    75ec:	movea.l d0,a6
    75ee:	movea.l 4(sp),a1
    75f2:	jsr -222(a6)
	WaitTOF();
    75f6:	move.l 1c868 <GfxBase>,d0
    75fc:	movea.l d0,a6
    75fe:	jsr -270(a6)
	WaitTOF();
    7602:	move.l 1c868 <GfxBase>,d0
    7608:	movea.l d0,a6
    760a:	jsr -270(a6)

	Permit();
    760e:	move.l 1c85c <SysBase>,d0
    7614:	movea.l d0,a6
    7616:	jsr -138(a6)
}
    761a:	nop
    761c:	movea.l (sp)+,a6
    761e:	addq.l #4,sp
    7620:	rts

00007622 <main>:
static void Wait10() { WaitLine(0x10); }
static void Wait11() { WaitLine(0x11); }
static void Wait12() { WaitLine(0x12); }
static void Wait13() { WaitLine(0x13); }

int main(int argc, char *argv[]) {
    7622:	    lea -132(sp),sp
    7626:	    movem.l d2-d3/a6,-(sp)

	int *bp = 0x200;
    762a:	    move.l #512,140(sp)
  	*bp = 0;
    7632:	    movea.l 140(sp),a0
    7636:	    clr.l (a0)

	SysBase = *((struct ExecBase**)4UL);
    7638:	    movea.w #4,a0
    763c:	    move.l (a0),d0
    763e:	    move.l d0,1c85c <SysBase>
	custom = (struct Custom*)0xdff000;	
    7644:	    move.l #14675968,1c860 <custom>


	// We will use the graphics library only to locate and restore the system copper list once we are through.
	GfxBase = (struct GfxBase *)OpenLibrary((CONST_STRPTR)"graphics.library",0);
    764e:	    move.l #101785,136(sp)
    7656:	    clr.l 132(sp)
    765a:	    move.l 1c85c <SysBase>,d0
    7660:	    movea.l d0,a6
    7662:	    movea.l 136(sp),a1
    7666:	    move.l 132(sp),d0
    766a:	    jsr -552(a6)
    766e:	    move.l d0,128(sp)
    7672:	    move.l 128(sp),d0
    7676:	    move.l d0,1c868 <GfxBase>
	if (!GfxBase)
    767c:	    move.l 1c868 <GfxBase>,d0
    7682:	/-- bne.s 7698 <main+0x76>
		Exit(0);
    7684:	|   clr.l 124(sp)
    7688:	|   move.l 1c864 <DOSBase>,d0
    768e:	|   movea.l d0,a6
    7690:	|   move.l 124(sp),d1
    7694:	|   jsr -144(a6)

	// used for printing
	DOSBase = (struct DosLibrary*)OpenLibrary((CONST_STRPTR)"dos.library", 0);
    7698:	\-> move.l #101802,120(sp)
    76a0:	    clr.l 116(sp)
    76a4:	    move.l 1c85c <SysBase>,d0
    76aa:	    movea.l d0,a6
    76ac:	    movea.l 120(sp),a1
    76b0:	    move.l 116(sp),d0
    76b4:	    jsr -552(a6)
    76b8:	    move.l d0,112(sp)
    76bc:	    move.l 112(sp),d0
    76c0:	    move.l d0,1c864 <DOSBase>
	if (!DOSBase)
    76c6:	    move.l 1c864 <DOSBase>,d0
    76cc:	/-- bne.s 76e2 <main+0xc0>
		Exit(0);
    76ce:	|   clr.l 108(sp)
    76d2:	|   move.l 1c864 <DOSBase>,d0
    76d8:	|   movea.l d0,a6
    76da:	|   move.l 108(sp),d1
    76de:	|   jsr -144(a6)

	MathIeeeSingBasBase = (struct MathIEEEBase *) OpenLibrary("mathieeesingbas.library", 0);	
    76e2:	\-> move.l #101814,104(sp)
    76ea:	    clr.l 100(sp)
    76ee:	    move.l 1c85c <SysBase>,d0
    76f4:	    movea.l d0,a6
    76f6:	    movea.l 104(sp),a1
    76fa:	    move.l 100(sp),d0
    76fe:	    jsr -552(a6)
    7702:	    move.l d0,96(sp)
    7706:	    move.l 96(sp),d0
    770a:	    move.l d0,1c86c <MathIeeeSingBasBase>
	if (!MathIeeeSingBasBase)
    7710:	    move.l 1c86c <MathIeeeSingBasBase>,d0
    7716:	/-- bne.s 772c <main+0x10a>
		Exit(0);	
    7718:	|   clr.l 92(sp)
    771c:	|   move.l 1c864 <DOSBase>,d0
    7722:	|   movea.l d0,a6
    7724:	|   move.l 92(sp),d1
    7728:	|   jsr -144(a6)

	MathIeeeSingTransBase = (struct MathIEEEBase *) OpenLibrary("mathieeesingtrans.library",0);													
    772c:	\-> move.l #101838,88(sp)
    7734:	    clr.l 84(sp)
    7738:	    move.l 1c85c <SysBase>,d0
    773e:	    movea.l d0,a6
    7740:	    movea.l 88(sp),a1
    7744:	    move.l 84(sp),d0
    7748:	    jsr -552(a6)
    774c:	    move.l d0,80(sp)
    7750:	    move.l 80(sp),d0
    7754:	    move.l d0,1c870 <MathIeeeSingTransBase>
	if (!MathIeeeSingTransBase)
    775a:	    move.l 1c870 <MathIeeeSingTransBase>,d0
    7760:	/-- bne.s 7776 <main+0x154>
		Exit(0);
    7762:	|   clr.l 76(sp)
    7766:	|   move.l 1c864 <DOSBase>,d0
    776c:	|   movea.l d0,a6
    776e:	|   move.l 76(sp),d1
    7772:	|   jsr -144(a6)

	MathIeeeDoubTransBase =  (struct MathIEEEBase *) OpenLibrary("mathieeedoubtrans.library",0);
    7776:	\-> move.l #101864,72(sp)
    777e:	    clr.l 68(sp)
    7782:	    move.l 1c85c <SysBase>,d0
    7788:	    movea.l d0,a6
    778a:	    movea.l 72(sp),a1
    778e:	    move.l 68(sp),d0
    7792:	    jsr -552(a6)
    7796:	    move.l d0,64(sp)
    779a:	    move.l 64(sp),d0
    779e:	    move.l d0,1c878 <MathIeeeDoubTransBase>
	if (!MathIeeeDoubTransBase)		
    77a4:	    move.l 1c878 <MathIeeeDoubTransBase>,d0
    77aa:	/-- bne.s 77c0 <main+0x19e>
		Exit(0);
    77ac:	|   clr.l 60(sp)
    77b0:	|   move.l 1c864 <DOSBase>,d0
    77b6:	|   movea.l d0,a6
    77b8:	|   move.l 60(sp),d1
    77bc:	|   jsr -144(a6)

	MathIeeeDoubBasBase = (struct MathIEEEBase *) OpenLibrary("mathieeedoubbas.library",0);
    77c0:	\-> move.l #101890,56(sp)
    77c8:	    clr.l 52(sp)
    77cc:	    move.l 1c85c <SysBase>,d0
    77d2:	    movea.l d0,a6
    77d4:	    movea.l 56(sp),a1
    77d8:	    move.l 52(sp),d0
    77dc:	    jsr -552(a6)
    77e0:	    move.l d0,48(sp)
    77e4:	    move.l 48(sp),d0
    77e8:	    move.l d0,1c874 <MathIeeeDoubBasBase>
	if( !MathIeeeDoubBasBase) 
    77ee:	    move.l 1c874 <MathIeeeDoubBasBase>,d0
    77f4:	/-- bne.s 780a <main+0x1e8>
		Exit(0);
    77f6:	|   clr.l 44(sp)
    77fa:	|   move.l 1c864 <DOSBase>,d0
    7800:	|   movea.l d0,a6
    7802:	|   move.l 44(sp),d1
    7806:	|   jsr -144(a6)
	

	KPrintF(" debugger from Amiga Test 027!\n");
    780a:	\-> pea 18e1a <PutChar+0x11d0>
    7810:	    jsr 17176 <KPrintF>
    7816:	    addq.l #4,sp

	Write(Output(), (APTR)"Hello console Test 027!\n", 25);
    7818:	    move.l 1c864 <DOSBase>,d0
    781e:	    movea.l d0,a6
    7820:	    jsr -60(a6)
    7824:	    move.l d0,40(sp)
    7828:	    move.l 40(sp),d0
    782c:	    move.l d0,36(sp)
    7830:	    move.l #101946,32(sp)
    7838:	    moveq #25,d0
    783a:	    move.l d0,28(sp)
    783e:	    move.l 1c864 <DOSBase>,d0
    7844:	    movea.l d0,a6
    7846:	    move.l 36(sp),d1
    784a:	    move.l 32(sp),d2
    784e:	    move.l 28(sp),d3
    7852:	    jsr -48(a6)
    7856:	    move.l d0,24(sp)
	Delay(50);
    785a:	    moveq #50,d0
    785c:	    move.l d0,20(sp)
    7860:	    move.l 1c864 <DOSBase>,d0
    7866:	    movea.l d0,a6
    7868:	    move.l 20(sp),d1
    786c:	    jsr -198(a6)
	if(p61Init(module) != 0)
		KPrintF("p61Init failed!\n");
#endif
	warpmode(0);*/

	KPrintF("Taking System\n");
    7870:	    pea 18e53 <PutChar+0x1209>
    7876:	    jsr 17176 <KPrintF>
    787c:	    addq.l #4,sp
	TakeSystem();
    787e:	    jsr 7388 <TakeSystem>
	KPrintF("System Taken\n");
    7884:	    pea 18e62 <PutChar+0x1218>
    788a:	    jsr 17176 <KPrintF>
    7890:	    addq.l #4,sp

	custom->dmacon = 0x87ff;
    7892:	    movea.l 1c860 <custom>,a0
    7898:	    move.w #-30721,150(a0)
	WaitVbl();
    789e:	    jsr 170aa <WaitVbl>

	KPrintF("Starting main_sludge\n");
    78a4:	    pea 18e70 <PutChar+0x1226>
    78aa:	    jsr 17176 <KPrintF>
    78b0:	    addq.l #4,sp
	main_sludge(argc, argv);	
    78b2:	    move.l 152(sp),-(sp)
    78b6:	    move.l 152(sp),-(sp)
    78ba:	    jsr 41be <main_sludge>
    78c0:	    addq.l #8,sp
#ifdef MUSIC
	p61End();
#endif

	// END
	FreeSystem();
    78c2:	    jsr 7514 <FreeSystem>

	CloseLibrary((struct Library*)DOSBase);
    78c8:	    move.l 1c864 <DOSBase>,16(sp)
    78d0:	    move.l 1c85c <SysBase>,d0
    78d6:	    movea.l d0,a6
    78d8:	    movea.l 16(sp),a1
    78dc:	    jsr -414(a6)
	CloseLibrary((struct Library*)GfxBase);
    78e0:	    move.l 1c868 <GfxBase>,12(sp)
    78e8:	    move.l 1c85c <SysBase>,d0
    78ee:	    movea.l d0,a6
    78f0:	    movea.l 12(sp),a1
    78f4:	    jsr -414(a6)
    78f8:	    moveq #0,d0
}
    78fa:	    movem.l (sp)+,d2-d3/a6
    78fe:	    lea 132(sp),sp
    7902:	    rts

00007904 <addStatusBar>:
#include "support/gcc8_c_support.h"

struct statusStuff mainStatus;
struct statusStuff * nowStatus = & mainStatus;

void addStatusBar () {
    7904:	    lea -16(sp),sp
    7908:	    move.l a6,-(sp)
	struct statusBar * newStat = AllocVec(sizeof(struct statusBar), MEMF_ANY);
    790a:	    moveq #8,d0
    790c:	    move.l d0,16(sp)
    7910:	    clr.l 12(sp)
    7914:	    move.l 1c85c <SysBase>,d0
    791a:	    movea.l d0,a6
    791c:	    move.l 16(sp),d0
    7920:	    move.l 12(sp),d1
    7924:	    jsr -684(a6)
    7928:	    move.l d0,8(sp)
    792c:	    move.l 8(sp),d0
    7930:	    move.l d0,4(sp)
	if (!newStat) {
    7934:	/-- bne.s 7964 <addStatusBar+0x60>
		newStat -> next = nowStatus -> firstStatusBar;
    7936:	|   movea.l 1c1e2 <nowStatus>,a0
    793c:	|   move.l (a0),d0
    793e:	|   movea.l 4(sp),a0
    7942:	|   move.l d0,4(a0)
		newStat -> text = copyString ("");
    7946:	|   pea 188c6 <PutChar+0xc7c>
    794c:	|   jsr b8 <copyString>
    7952:	|   addq.l #4,sp
    7954:	|   movea.l 4(sp),a0
    7958:	|   move.l d0,(a0)
		nowStatus -> firstStatusBar = newStat;
    795a:	|   movea.l 1c1e2 <nowStatus>,a0
    7960:	|   move.l 4(sp),(a0)
	}
}
    7964:	\-> nop
    7966:	    movea.l (sp)+,a6
    7968:	    lea 16(sp),sp
    796c:	    rts

0000796e <clearStatusBar>:

void clearStatusBar () {
    796e:	       lea -16(sp),sp
    7972:	       move.l a6,-(sp)
	struct statusBar * stat = nowStatus -> firstStatusBar;
    7974:	       movea.l 1c1e2 <nowStatus>,a0
    797a:	       move.l (a0),16(sp)
	struct statusBar * kill;
	nowStatus -> litStatus = -1;
    797e:	       movea.l 1c1e2 <nowStatus>,a0
    7984:	       moveq #-1,d0
    7986:	       move.l d0,6(a0)
	while (stat) {
    798a:	   /-- bra.s 79ca <clearStatusBar+0x5c>
		kill = stat;
    798c:	/--|-> move.l 16(sp),12(sp)
		stat = stat -> next;
    7992:	|  |   movea.l 16(sp),a0
    7996:	|  |   move.l 4(a0),16(sp)
		FreeVec(kill -> text);
    799c:	|  |   movea.l 12(sp),a0
    79a0:	|  |   move.l (a0),8(sp)
    79a4:	|  |   move.l 1c85c <SysBase>,d0
    79aa:	|  |   movea.l d0,a6
    79ac:	|  |   movea.l 8(sp),a1
    79b0:	|  |   jsr -690(a6)
		FreeVec(kill);
    79b4:	|  |   move.l 12(sp),4(sp)
    79ba:	|  |   move.l 1c85c <SysBase>,d0
    79c0:	|  |   movea.l d0,a6
    79c2:	|  |   movea.l 4(sp),a1
    79c6:	|  |   jsr -690(a6)
	while (stat) {
    79ca:	|  \-> tst.l 16(sp)
    79ce:	\----- bne.s 798c <clearStatusBar+0x1e>
	}
	nowStatus -> firstStatusBar = NULL;
    79d0:	       movea.l 1c1e2 <nowStatus>,a0
    79d6:	       clr.l (a0)
}
    79d8:	       nop
    79da:	       movea.l (sp)+,a6
    79dc:	       lea 16(sp),sp
    79e0:	       rts

000079e2 <initStatusBar>:

void initStatusBar () {
	mainStatus.firstStatusBar = NULL;
    79e2:	clr.l 1c88e <mainStatus>
	mainStatus.alignStatus = IN_THE_CENTRE;
    79e8:	move.w #-1,1c892 <mainStatus+0x4>
	mainStatus.litStatus = -1;
    79f0:	moveq #-1,d0
    79f2:	move.l d0,1c894 <mainStatus+0x6>
	mainStatus.statusX = 10;
    79f8:	moveq #10,d0
    79fa:	move.l d0,1c898 <mainStatus+0xa>
	mainStatus.statusY = winHeight - 15;
    7a00:	movea.l 1c7b4 <winHeight>,a0
    7a06:	lea -15(a0),a0
    7a0a:	move.l a0,d0
    7a0c:	move.l d0,1c89c <mainStatus+0xe>
	//statusBarColour (255, 255, 255); Amiga Todo: Amigize this
	//statusBarLitColour (255, 255, 128); Amiga Todo: Amigize this
}
    7a12:	nop
    7a14:	rts

00007a16 <killLastStatus>:

void killLastStatus () {
    7a16:	    lea -12(sp),sp
    7a1a:	    move.l a6,-(sp)
	if (nowStatus -> firstStatusBar) {
    7a1c:	    movea.l 1c1e2 <nowStatus>,a0
    7a22:	    move.l (a0),d0
    7a24:	/-- beq.s 7a6e <killLastStatus+0x58>
		struct statusBar * kill = nowStatus -> firstStatusBar;
    7a26:	|   movea.l 1c1e2 <nowStatus>,a0
    7a2c:	|   move.l (a0),12(sp)
		nowStatus -> firstStatusBar = kill -> next;
    7a30:	|   movea.l 1c1e2 <nowStatus>,a0
    7a36:	|   movea.l 12(sp),a1
    7a3a:	|   move.l 4(a1),d0
    7a3e:	|   move.l d0,(a0)
		FreeVec(kill -> text);
    7a40:	|   movea.l 12(sp),a0
    7a44:	|   move.l (a0),8(sp)
    7a48:	|   move.l 1c85c <SysBase>,d0
    7a4e:	|   movea.l d0,a6
    7a50:	|   movea.l 8(sp),a1
    7a54:	|   jsr -690(a6)
		FreeVec(kill);
    7a58:	|   move.l 12(sp),4(sp)
    7a5e:	|   move.l 1c85c <SysBase>,d0
    7a64:	|   movea.l d0,a6
    7a66:	|   movea.l 4(sp),a1
    7a6a:	|   jsr -690(a6)
	}
}
    7a6e:	\-> nop
    7a70:	    movea.l (sp)+,a6
    7a72:	    lea 12(sp),sp
    7a76:	    rts

00007a78 <positionStatus>:
	}
	return TRUE;
}

void positionStatus (int x, int y) {
	nowStatus -> statusX = x;
    7a78:	movea.l 1c1e2 <nowStatus>,a0
    7a7e:	move.l 4(sp),10(a0)
	nowStatus -> statusY = y;
    7a84:	movea.l 1c1e2 <nowStatus>,a0
    7a8a:	move.l 8(sp),14(a0)
}
    7a90:	nop
    7a92:	rts

00007a94 <saveStatusBars>:


void saveStatusBars (BPTR fp) {
    7a94:	       lea -100(sp),sp
    7a98:	       move.l a6,-(sp)
    7a9a:	       move.l d2,-(sp)
	struct statusBar * viewLine = nowStatus -> firstStatusBar;
    7a9c:	       movea.l 1c1e2 <nowStatus>,a0
    7aa2:	       move.l (a0),104(sp)

	put2bytes (nowStatus -> alignStatus, fp);
    7aa6:	       movea.l 1c1e2 <nowStatus>,a0
    7aac:	       move.w 4(a0),d0
    7ab0:	       move.w d0,d0
    7ab2:	       andi.l #65535,d0
    7ab8:	       move.l 112(sp),-(sp)
    7abc:	       move.l d0,-(sp)
    7abe:	       jsr 8d0 <put2bytes>
    7ac4:	       addq.l #8,sp
	putSigned (nowStatus -> litStatus, fp);
    7ac6:	       movea.l 1c1e2 <nowStatus>,a0
    7acc:	       move.l 6(a0),d0
    7ad0:	       move.l d0,d0
    7ad2:	       movea.w d0,a0
    7ad4:	       move.l 112(sp),-(sp)
    7ad8:	       move.l a0,-(sp)
    7ada:	       jsr a9c <putSigned>
    7ae0:	       addq.l #8,sp
	put2bytes (nowStatus -> statusX, fp);
    7ae2:	       movea.l 1c1e2 <nowStatus>,a0
    7ae8:	       move.l 10(a0),d0
    7aec:	       move.l 112(sp),-(sp)
    7af0:	       move.l d0,-(sp)
    7af2:	       jsr 8d0 <put2bytes>
    7af8:	       addq.l #8,sp
	put2bytes (nowStatus -> statusY, fp);
    7afa:	       movea.l 1c1e2 <nowStatus>,a0
    7b00:	       move.l 14(a0),d0
    7b04:	       move.l 112(sp),-(sp)
    7b08:	       move.l d0,-(sp)
    7b0a:	       jsr 8d0 <put2bytes>
    7b10:	       addq.l #8,sp

	FPutC (fp, nowStatus -> statusR);
    7b12:	       move.l 112(sp),100(sp)
    7b18:	       movea.l 1c1e2 <nowStatus>,a0
    7b1e:	       move.l 18(a0),96(sp)
    7b24:	       move.l 1c864 <DOSBase>,d0
    7b2a:	       movea.l d0,a6
    7b2c:	       move.l 100(sp),d1
    7b30:	       move.l 96(sp),d2
    7b34:	       jsr -312(a6)
    7b38:	       move.l d0,92(sp)
	FPutC (fp, nowStatus -> statusG);
    7b3c:	       move.l 112(sp),88(sp)
    7b42:	       movea.l 1c1e2 <nowStatus>,a0
    7b48:	       move.l 22(a0),84(sp)
    7b4e:	       move.l 1c864 <DOSBase>,d0
    7b54:	       movea.l d0,a6
    7b56:	       move.l 88(sp),d1
    7b5a:	       move.l 84(sp),d2
    7b5e:	       jsr -312(a6)
    7b62:	       move.l d0,80(sp)
	FPutC (fp, nowStatus -> statusB);
    7b66:	       move.l 112(sp),76(sp)
    7b6c:	       movea.l 1c1e2 <nowStatus>,a0
    7b72:	       move.l 26(a0),72(sp)
    7b78:	       move.l 1c864 <DOSBase>,d0
    7b7e:	       movea.l d0,a6
    7b80:	       move.l 76(sp),d1
    7b84:	       move.l 72(sp),d2
    7b88:	       jsr -312(a6)
    7b8c:	       move.l d0,68(sp)
	FPutC (fp, nowStatus -> statusLR);
    7b90:	       move.l 112(sp),64(sp)
    7b96:	       movea.l 1c1e2 <nowStatus>,a0
    7b9c:	       move.l 30(a0),60(sp)
    7ba2:	       move.l 1c864 <DOSBase>,d0
    7ba8:	       movea.l d0,a6
    7baa:	       move.l 64(sp),d1
    7bae:	       move.l 60(sp),d2
    7bb2:	       jsr -312(a6)
    7bb6:	       move.l d0,56(sp)
	FPutC (fp, nowStatus -> statusLG);
    7bba:	       move.l 112(sp),52(sp)
    7bc0:	       movea.l 1c1e2 <nowStatus>,a0
    7bc6:	       move.l 34(a0),48(sp)
    7bcc:	       move.l 1c864 <DOSBase>,d0
    7bd2:	       movea.l d0,a6
    7bd4:	       move.l 52(sp),d1
    7bd8:	       move.l 48(sp),d2
    7bdc:	       jsr -312(a6)
    7be0:	       move.l d0,44(sp)
	FPutC (fp, nowStatus -> statusLB);
    7be4:	       move.l 112(sp),40(sp)
    7bea:	       movea.l 1c1e2 <nowStatus>,a0
    7bf0:	       move.l 38(a0),36(sp)
    7bf6:	       move.l 1c864 <DOSBase>,d0
    7bfc:	       movea.l d0,a6
    7bfe:	       move.l 40(sp),d1
    7c02:	       move.l 36(sp),d2
    7c06:	       jsr -312(a6)
    7c0a:	       move.l d0,32(sp)

	// Write what's being said
	while (viewLine) {
    7c0e:	   /-- bra.s 7c52 <saveStatusBars+0x1be>
		FPutC (fp,1);
    7c10:	/--|-> move.l 112(sp),16(sp)
    7c16:	|  |   moveq #1,d0
    7c18:	|  |   move.l d0,12(sp)
    7c1c:	|  |   move.l 1c864 <DOSBase>,d0
    7c22:	|  |   movea.l d0,a6
    7c24:	|  |   move.l 16(sp),d1
    7c28:	|  |   move.l 12(sp),d2
    7c2c:	|  |   jsr -312(a6)
    7c30:	|  |   move.l d0,8(sp)
		writeString (viewLine -> text, fp);
    7c34:	|  |   movea.l 104(sp),a0
    7c38:	|  |   move.l (a0),d0
    7c3a:	|  |   move.l 112(sp),-(sp)
    7c3e:	|  |   move.l d0,-(sp)
    7c40:	|  |   jsr bd8 <writeString>
    7c46:	|  |   addq.l #8,sp
		viewLine = viewLine -> next;
    7c48:	|  |   movea.l 104(sp),a0
    7c4c:	|  |   move.l 4(a0),104(sp)
	while (viewLine) {
    7c52:	|  \-> tst.l 104(sp)
    7c56:	\----- bne.s 7c10 <saveStatusBars+0x17c>
	}
	FPutC (fp,0);
    7c58:	       move.l 112(sp),28(sp)
    7c5e:	       clr.l 24(sp)
    7c62:	       move.l 1c864 <DOSBase>,d0
    7c68:	       movea.l d0,a6
    7c6a:	       move.l 28(sp),d1
    7c6e:	       move.l 24(sp),d2
    7c72:	       jsr -312(a6)
    7c76:	       move.l d0,20(sp)
}
    7c7a:	       nop
    7c7c:	       move.l (sp)+,d2
    7c7e:	       movea.l (sp)+,a6
    7c80:	       lea 100(sp),sp
    7c84:	       rts

00007c86 <setLitStatus>:

void setLitStatus (int i) {
	nowStatus -> litStatus = i;
    7c86:	movea.l 1c1e2 <nowStatus>,a0
    7c8c:	move.l 4(sp),6(a0)
}
    7c92:	nop
    7c94:	rts

00007c96 <setStatusBar>:

void setStatusBar (char * txt) {
    7c96:	    subq.l #4,sp
    7c98:	    move.l a6,-(sp)
    7c9a:	    move.l a2,-(sp)
	if (nowStatus -> firstStatusBar) {
    7c9c:	    movea.l 1c1e2 <nowStatus>,a0
    7ca2:	    move.l (a0),d0
    7ca4:	/-- beq.s 7cd8 <setStatusBar+0x42>
		FreeVec(nowStatus -> firstStatusBar -> text);
    7ca6:	|   movea.l 1c1e2 <nowStatus>,a0
    7cac:	|   movea.l (a0),a0
    7cae:	|   move.l (a0),8(sp)
    7cb2:	|   move.l 1c85c <SysBase>,d0
    7cb8:	|   movea.l d0,a6
    7cba:	|   movea.l 8(sp),a1
    7cbe:	|   jsr -690(a6)
		nowStatus -> firstStatusBar -> text = copyString (txt);
    7cc2:	|   movea.l 1c1e2 <nowStatus>,a0
    7cc8:	|   movea.l (a0),a2
    7cca:	|   move.l 16(sp),-(sp)
    7cce:	|   jsr b8 <copyString>
    7cd4:	|   addq.l #4,sp
    7cd6:	|   move.l d0,(a2)
	}
}
    7cd8:	\-> nop
    7cda:	    movea.l (sp)+,a2
    7cdc:	    movea.l (sp)+,a6
    7cde:	    addq.l #4,sp
    7ce0:	    rts

00007ce2 <statusBarText>:

const char * statusBarText () {
	if (nowStatus -> firstStatusBar) {
    7ce2:	       movea.l 1c1e2 <nowStatus>,a0
    7ce8:	       move.l (a0),d0
    7cea:	/----- beq.s 7cf8 <statusBarText+0x16>
		return nowStatus -> firstStatusBar -> text;
    7cec:	|      movea.l 1c1e2 <nowStatus>,a0
    7cf2:	|      movea.l (a0),a0
    7cf4:	|      move.l (a0),d0
    7cf6:	|  /-- bra.s 7cfe <statusBarText+0x1c>
	} else {
		return "";
    7cf8:	\--|-> move.l #100550,d0
	}
    7cfe:	   \-> rts

00007d00 <addSpeechLine>:

struct speechStruct * speech;
FLOAT speechSpeed = 1;


void addSpeechLine (char * theLine, int x, int *offset) {
    7d00:	       lea -28(sp),sp
    7d04:	       movem.l d2-d5/a6,-(sp)
	int halfWidth = (stringWidth (theLine) >> 1)/cameraZoom;
    7d08:	       move.l 52(sp),-(sp)
    7d0c:	       jsr 15838 <stringWidth>
    7d12:	       addq.l #4,sp
    7d14:	       asr.l #1,d0
    7d16:	       move.l d0,-(sp)
    7d18:	       jsr 175b2 <__floatsisf>
    7d1e:	       addq.l #4,sp
    7d20:	       move.l d0,d1
    7d22:	       move.l 1c1fa <cameraZoom>,d0
    7d28:	       move.l d0,-(sp)
    7d2a:	       move.l d1,-(sp)
    7d2c:	       jsr 1745e <__divsf3>
    7d32:	       addq.l #8,sp
    7d34:	       move.l d0,-(sp)
    7d36:	       jsr 1754a <__fixsfsi>
    7d3c:	       addq.l #4,sp
    7d3e:	       move.l d0,44(sp)
	int xx1 = x - (halfWidth);
    7d42:	       move.l 56(sp),d0
    7d46:	       sub.l 44(sp),d0
    7d4a:	       move.l d0,40(sp)
	int xx2 = x + (halfWidth);
    7d4e:	       move.l 56(sp),d0
    7d52:	       add.l 44(sp),d0
    7d56:	       move.l d0,36(sp)
	struct speechLine * newLine = AllocVec(sizeof(struct speechLine),MEMF_ANY);
    7d5a:	       moveq #12,d0
    7d5c:	       move.l d0,32(sp)
    7d60:	       clr.l 28(sp)
    7d64:	       move.l 1c85c <SysBase>,d0
    7d6a:	       movea.l d0,a6
    7d6c:	       move.l 32(sp),d0
    7d70:	       move.l 28(sp),d1
    7d74:	       jsr -684(a6)
    7d78:	       move.l d0,24(sp)
    7d7c:	       move.l 24(sp),d0
    7d80:	       move.l d0,20(sp)

	newLine -> next = speech -> allSpeech;
    7d84:	       movea.l 1c8b8 <speech>,a0
    7d8a:	       move.l 4(a0),d0
    7d8e:	       movea.l 20(sp),a0
    7d92:	       move.l d0,4(a0)
	newLine -> textLine = copyString (theLine);
    7d96:	       move.l 52(sp),-(sp)
    7d9a:	       jsr b8 <copyString>
    7da0:	       addq.l #4,sp
    7da2:	       movea.l 20(sp),a0
    7da6:	       move.l d0,(a0)
	newLine -> x = xx1;
    7da8:	       movea.l 20(sp),a0
    7dac:	       move.l 40(sp),8(a0)
	speech -> allSpeech = newLine;
    7db2:	       movea.l 1c8b8 <speech>,a0
    7db8:	       move.l 20(sp),4(a0)
	if ((xx1 < 5) && (*offset < (5 - xx1))) {
    7dbe:	       moveq #4,d0
    7dc0:	       cmp.l 40(sp),d0
    7dc4:	   /-- blt.s 7de6 <addSpeechLine+0xe6>
    7dc6:	   |   movea.l 60(sp),a0
    7dca:	   |   move.l (a0),d1
    7dcc:	   |   moveq #5,d0
    7dce:	   |   sub.l 40(sp),d0
    7dd2:	   |   cmp.l d1,d0
    7dd4:	   +-- ble.s 7de6 <addSpeechLine+0xe6>
		*offset = 5 - xx1;
    7dd6:	   |   moveq #5,d0
    7dd8:	   |   sub.l 40(sp),d0
    7ddc:	   |   movea.l 60(sp),a0
    7de0:	   |   move.l d0,(a0)
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
		*offset = (int) ((FLOAT)winWidth/cameraZoom) - 5 - xx2;
	}
}
    7de2:	/--|-- bra.w 7f12 <addSpeechLine+0x212>
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
    7de6:	|  \-> move.l 36(sp),-(sp)
    7dea:	|      jsr 175b2 <__floatsisf>
    7df0:	|      addq.l #4,sp
    7df2:	|      move.l d0,d2
    7df4:	|      move.l 1c7b0 <winWidth>,d0
    7dfa:	|      move.l d0,-(sp)
    7dfc:	|      jsr 175da <__floatunsisf>
    7e02:	|      addq.l #4,sp
    7e04:	|      move.l d0,d1
    7e06:	|      move.l 1c1fa <cameraZoom>,d0
    7e0c:	|      move.l d0,-(sp)
    7e0e:	|      move.l d1,-(sp)
    7e10:	|      jsr 1745e <__divsf3>
    7e16:	|      addq.l #8,sp
    7e18:	|      move.l #1084227584,-(sp)
    7e1e:	|      move.l d0,-(sp)
    7e20:	|      jsr 178a6 <__subsf3>
    7e26:	|      addq.l #8,sp
    7e28:	|      move.l d0,-(sp)
    7e2a:	|      move.l d2,-(sp)
    7e2c:	|      jsr 1769a <__gesf2>
    7e32:	|      addq.l #8,sp
    7e34:	|      tst.l d0
    7e36:	|  /-- bge.s 7e3c <addSpeechLine+0x13c>
}
    7e38:	+--|-- bra.w 7f12 <addSpeechLine+0x212>
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
    7e3c:	|  \-> movea.l 60(sp),a0
    7e40:	|      move.l (a0),d0
    7e42:	|      move.l d0,-(sp)
    7e44:	|      jsr 175b2 <__floatsisf>
    7e4a:	|      addq.l #4,sp
    7e4c:	|      move.l d0,-(sp)
    7e4e:	|      jsr 174ca <__extendsfdf2>
    7e54:	|      addq.l #4,sp
    7e56:	|      move.l d0,d4
    7e58:	|      move.l d1,d5
    7e5a:	|      move.l 1c7b0 <winWidth>,d0
    7e60:	|      move.l d0,-(sp)
    7e62:	|      jsr 175da <__floatunsisf>
    7e68:	|      addq.l #4,sp
    7e6a:	|      move.l d0,d1
    7e6c:	|      move.l 1c1fa <cameraZoom>,d0
    7e72:	|      move.l d0,-(sp)
    7e74:	|      move.l d1,-(sp)
    7e76:	|      jsr 1745e <__divsf3>
    7e7c:	|      addq.l #8,sp
    7e7e:	|      move.l d0,-(sp)
    7e80:	|      jsr 174ca <__extendsfdf2>
    7e86:	|      addq.l #4,sp
    7e88:	|      clr.l -(sp)
    7e8a:	|      move.l #1075052544,-(sp)
    7e90:	|      move.l d1,-(sp)
    7e92:	|      move.l d0,-(sp)
    7e94:	|      jsr 17844 <__subdf3>
    7e9a:	|      lea 16(sp),sp
    7e9e:	|      move.l d0,d2
    7ea0:	|      move.l d1,d3
    7ea2:	|      move.l 36(sp),-(sp)
    7ea6:	|      jsr 17572 <__floatsidf>
    7eac:	|      addq.l #4,sp
    7eae:	|      move.l d1,-(sp)
    7eb0:	|      move.l d0,-(sp)
    7eb2:	|      move.l d3,-(sp)
    7eb4:	|      move.l d2,-(sp)
    7eb6:	|      jsr 17844 <__subdf3>
    7ebc:	|      lea 16(sp),sp
    7ec0:	|      move.l d1,-(sp)
    7ec2:	|      move.l d0,-(sp)
    7ec4:	|      move.l d5,-(sp)
    7ec6:	|      move.l d4,-(sp)
    7ec8:	|      jsr 176d0 <__gtdf2>
    7ece:	|      lea 16(sp),sp
    7ed2:	|      tst.l d0
    7ed4:	|  /-- bgt.s 7ed8 <addSpeechLine+0x1d8>
}
    7ed6:	+--|-- bra.s 7f12 <addSpeechLine+0x212>
		*offset = (int) ((FLOAT)winWidth/cameraZoom) - 5 - xx2;
    7ed8:	|  \-> move.l 1c7b0 <winWidth>,d0
    7ede:	|      move.l d0,-(sp)
    7ee0:	|      jsr 175da <__floatunsisf>
    7ee6:	|      addq.l #4,sp
    7ee8:	|      move.l d0,d1
    7eea:	|      move.l 1c1fa <cameraZoom>,d0
    7ef0:	|      move.l d0,-(sp)
    7ef2:	|      move.l d1,-(sp)
    7ef4:	|      jsr 1745e <__divsf3>
    7efa:	|      addq.l #8,sp
    7efc:	|      move.l d0,-(sp)
    7efe:	|      jsr 1754a <__fixsfsi>
    7f04:	|      addq.l #4,sp
    7f06:	|      subq.l #5,d0
    7f08:	|      sub.l 36(sp),d0
    7f0c:	|      movea.l 60(sp),a0
    7f10:	|      move.l d0,(a0)
}
    7f12:	\----> nop
    7f14:	       movem.l (sp)+,d2-d5/a6
    7f18:	       lea 28(sp),sp
    7f1c:	       rts

00007f1e <initSpeech>:


void initSpeech () {
    7f1e:	       lea -12(sp),sp
    7f22:	       move.l a6,-(sp)
	speech = AllocVec(sizeof(struct speechStruct), MEMF_ANY);
    7f24:	       moveq #20,d0
    7f26:	       move.l d0,12(sp)
    7f2a:	       clr.l 8(sp)
    7f2e:	       move.l 1c85c <SysBase>,d0
    7f34:	       movea.l d0,a6
    7f36:	       move.l 12(sp),d0
    7f3a:	       move.l 8(sp),d1
    7f3e:	       jsr -684(a6)
    7f42:	       move.l d0,4(sp)
    7f46:	       move.l 4(sp),d0
    7f4a:	       move.l d0,1c8b8 <speech>
	if (speech) {
    7f50:	       move.l 1c8b8 <speech>,d0
    7f56:	/----- beq.s 7f82 <initSpeech+0x64>
		speech -> currentTalker = NULL;
    7f58:	|      movea.l 1c8b8 <speech>,a0
    7f5e:	|      clr.l (a0)
		speech -> allSpeech = NULL;
    7f60:	|      movea.l 1c8b8 <speech>,a0
    7f66:	|      clr.l 4(a0)
		speech -> speechY = 0;
    7f6a:	|      movea.l 1c8b8 <speech>,a0
    7f70:	|      clr.l 8(a0)
		speech -> lastFile = -1;
    7f74:	|      movea.l 1c8b8 <speech>,a0
    7f7a:	|      moveq #-1,d0
    7f7c:	|      move.l d0,12(a0)
	} else
    {
        KPrintF("Could not allocate memory");
    }
}
    7f80:	|  /-- bra.s 7f90 <initSpeech+0x72>
        KPrintF("Could not allocate memory");
    7f82:	\--|-> pea 18ead <PutChar+0x1263>
    7f88:	   |   jsr 17176 <KPrintF>
    7f8e:	   |   addq.l #4,sp
}
    7f90:	   \-> nop
    7f92:	       movea.l (sp)+,a6
    7f94:	       lea 12(sp),sp
    7f98:	       rts

00007f9a <isThereAnySpeechGoingOn>:

int isThereAnySpeechGoingOn () {
	return speech -> allSpeech ? speech -> lookWhosTalking : -1;
    7f9a:	       movea.l 1c8b8 <speech>,a0
    7fa0:	       move.l 4(a0),d0
    7fa4:	/----- beq.s 7fb2 <isThereAnySpeechGoingOn+0x18>
    7fa6:	|      movea.l 1c8b8 <speech>,a0
    7fac:	|      move.l 16(a0),d0
    7fb0:	|  /-- bra.s 7fb4 <isThereAnySpeechGoingOn+0x1a>
    7fb2:	\--|-> moveq #-1,d0
}
    7fb4:	   \-> rts

00007fb6 <killAllSpeech>:

void killAllSpeech () {
    7fb6:	       lea -12(sp),sp
    7fba:	       move.l a6,-(sp)
	if (speech -> lastFile != -1) {
    7fbc:	       movea.l 1c8b8 <speech>,a0
    7fc2:	       move.l 12(a0),d0
    7fc6:	       moveq #-1,d1
    7fc8:	       cmp.l d0,d1
    7fca:	   /-- beq.s 7fd8 <killAllSpeech+0x22>
		//huntKillSound (speech -> lastFile); Amiga Todo: Replace?
		speech -> lastFile = -1;
    7fcc:	   |   movea.l 1c8b8 <speech>,a0
    7fd2:	   |   moveq #-1,d0
    7fd4:	   |   move.l d0,12(a0)
	}

	if (speech -> currentTalker) {
    7fd8:	   \-> movea.l 1c8b8 <speech>,a0
    7fde:	       move.l (a0),d0
    7fe0:	/----- beq.w 806c <killAllSpeech+0xb6>
		makeSilent (* (speech -> currentTalker));
    7fe4:	|      movea.l 1c8b8 <speech>,a0
    7fea:	|      move.l (a0),d1
    7fec:	|      lea -132(sp),sp
    7ff0:	|      move.l sp,d0
    7ff2:	|      movea.w #132,a0
    7ff6:	|      move.l a0,-(sp)
    7ff8:	|      move.l d1,-(sp)
    7ffa:	|      move.l d0,-(sp)
    7ffc:	|      jsr 1712a <memcpy>
    8002:	|      lea 12(sp),sp
    8006:	|      jsr ab5c <makeSilent>
    800c:	|      lea 132(sp),sp
		speech -> currentTalker = NULL;
    8010:	|      movea.l 1c8b8 <speech>,a0
    8016:	|      clr.l (a0)
	}
	
	struct speechLine * killMe;
	
	while (speech -> allSpeech) {
    8018:	+----- bra.s 806c <killAllSpeech+0xb6>
		killMe = speech -> allSpeech;
    801a:	|  /-> movea.l 1c8b8 <speech>,a0
    8020:	|  |   move.l 4(a0),12(sp)
		speech -> allSpeech = speech -> allSpeech -> next;
    8026:	|  |   movea.l 1c8b8 <speech>,a0
    802c:	|  |   movea.l 4(a0),a1
    8030:	|  |   movea.l 1c8b8 <speech>,a0
    8036:	|  |   move.l 4(a1),d0
    803a:	|  |   move.l d0,4(a0)
		FreeVec(killMe -> textLine);
    803e:	|  |   movea.l 12(sp),a0
    8042:	|  |   move.l (a0),8(sp)
    8046:	|  |   move.l 1c85c <SysBase>,d0
    804c:	|  |   movea.l d0,a6
    804e:	|  |   movea.l 8(sp),a1
    8052:	|  |   jsr -690(a6)
		FreeVec(killMe);
    8056:	|  |   move.l 12(sp),4(sp)
    805c:	|  |   move.l 1c85c <SysBase>,d0
    8062:	|  |   movea.l d0,a6
    8064:	|  |   movea.l 4(sp),a1
    8068:	|  |   jsr -690(a6)
	while (speech -> allSpeech) {
    806c:	\--|-> movea.l 1c8b8 <speech>,a0
    8072:	   |   move.l 4(a0),d0
    8076:	   \-- bne.s 801a <killAllSpeech+0x64>
	}
}
    8078:	       nop
    807a:	       nop
    807c:	       movea.l (sp)+,a6
    807e:	       lea 12(sp),sp
    8082:	       rts

00008084 <makeTalker>:

	return TRUE;
}

void makeTalker (struct onScreenPerson *me) {
	setFrames (me, ANI_TALK);
    8084:	pea 2 <_start+0x2>
    8088:	move.l 8(sp),-(sp)
    808c:	jsr 81e4 <setFrames>
    8092:	addq.l #8,sp
}
    8094:	nop
    8096:	rts

00008098 <saveSpeech>:

void saveSpeech (struct speechStruct * sS, BPTR fp) {
    8098:	       lea -52(sp),sp
    809c:	       move.l a6,-(sp)
    809e:	       move.l d2,-(sp)
	struct speechLine * viewLine = sS -> allSpeech;
    80a0:	       movea.l 64(sp),a0
    80a4:	       move.l 4(a0),56(sp)
	
	putFloat (speechSpeed, fp);
    80aa:	       move.l 1c1e6 <speechSpeed>,d0
    80b0:	       move.l 68(sp),-(sp)
    80b4:	       move.l d0,-(sp)
    80b6:	       jsr a46 <putFloat>
    80bc:	       addq.l #8,sp
	
		// Write y co-ordinate
		put2bytes (sS -> speechY, fp);
    80be:	       movea.l 64(sp),a0
    80c2:	       move.l 8(a0),d0
    80c6:	       move.l 68(sp),-(sp)
    80ca:	       move.l d0,-(sp)
    80cc:	       jsr 8d0 <put2bytes>
    80d2:	       addq.l #8,sp
		
		// Write which character's talking
		put2bytes (sS -> lookWhosTalking, fp);		
    80d4:	       movea.l 64(sp),a0
    80d8:	       move.l 16(a0),d0
    80dc:	       move.l 68(sp),-(sp)
    80e0:	       move.l d0,-(sp)
    80e2:	       jsr 8d0 <put2bytes>
    80e8:	       addq.l #8,sp
		if (sS -> currentTalker) {
    80ea:	       movea.l 64(sp),a0
    80ee:	       move.l (a0),d0
    80f0:	   /-- beq.s 8134 <saveSpeech+0x9c>
			FPutC (fp, 1);
    80f2:	   |   move.l 68(sp),40(sp)
    80f8:	   |   moveq #1,d0
    80fa:	   |   move.l d0,36(sp)
    80fe:	   |   move.l 1c864 <DOSBase>,d0
    8104:	   |   movea.l d0,a6
    8106:	   |   move.l 40(sp),d1
    810a:	   |   move.l 36(sp),d2
    810e:	   |   jsr -312(a6)
    8112:	   |   move.l d0,32(sp)
			put2bytes (sS->currentTalker->thisType->objectNum, fp);
    8116:	   |   movea.l 64(sp),a0
    811a:	   |   movea.l (a0),a0
    811c:	   |   movea.l 114(a0),a0
    8120:	   |   move.l 4(a0),d0
    8124:	   |   move.l 68(sp),-(sp)
    8128:	   |   move.l d0,-(sp)
    812a:	   |   jsr 8d0 <put2bytes>
    8130:	   |   addq.l #8,sp
    8132:	/--|-- bra.s 81b0 <saveSpeech+0x118>
		} else {
			FPutC (fp, 0);
    8134:	|  \-> move.l 68(sp),52(sp)
    813a:	|      clr.l 48(sp)
    813e:	|      move.l 1c864 <DOSBase>,d0
    8144:	|      movea.l d0,a6
    8146:	|      move.l 52(sp),d1
    814a:	|      move.l 48(sp),d2
    814e:	|      jsr -312(a6)
    8152:	|      move.l d0,44(sp)
		}
		
		// Write what's being said
		while (viewLine) {
    8156:	+----- bra.s 81b0 <saveSpeech+0x118>
			FPutC (fp, 1);
    8158:	|  /-> move.l 68(sp),16(sp)
    815e:	|  |   moveq #1,d0
    8160:	|  |   move.l d0,12(sp)
    8164:	|  |   move.l 1c864 <DOSBase>,d0
    816a:	|  |   movea.l d0,a6
    816c:	|  |   move.l 16(sp),d1
    8170:	|  |   move.l 12(sp),d2
    8174:	|  |   jsr -312(a6)
    8178:	|  |   move.l d0,8(sp)
			writeString (viewLine -> textLine, fp);
    817c:	|  |   movea.l 56(sp),a0
    8180:	|  |   move.l (a0),d0
    8182:	|  |   move.l 68(sp),-(sp)
    8186:	|  |   move.l d0,-(sp)
    8188:	|  |   jsr bd8 <writeString>
    818e:	|  |   addq.l #8,sp
			put2bytes (viewLine -> x, fp);
    8190:	|  |   movea.l 56(sp),a0
    8194:	|  |   move.l 8(a0),d0
    8198:	|  |   move.l 68(sp),-(sp)
    819c:	|  |   move.l d0,-(sp)
    819e:	|  |   jsr 8d0 <put2bytes>
    81a4:	|  |   addq.l #8,sp
			viewLine = viewLine -> next;
    81a6:	|  |   movea.l 56(sp),a0
    81aa:	|  |   move.l 4(a0),56(sp)
		while (viewLine) {
    81b0:	\--|-> tst.l 56(sp)
    81b4:	   \-- bne.s 8158 <saveSpeech+0xc0>
		}
		FPutC (fp, 0);
    81b6:	       move.l 68(sp),28(sp)
    81bc:	       clr.l 24(sp)
    81c0:	       move.l 1c864 <DOSBase>,d0
    81c6:	       movea.l d0,a6
    81c8:	       move.l 28(sp),d1
    81cc:	       move.l 24(sp),d2
    81d0:	       jsr -312(a6)
    81d4:	       move.l d0,20(sp)
}
    81d8:	       nop
    81da:	       move.l (sp)+,d2
    81dc:	       movea.l (sp)+,a6
    81de:	       lea 52(sp),sp
    81e2:	       rts

000081e4 <setFrames>:

void setFrames (struct onScreenPerson *m, int a) {
    81e4:	move.l d2,-(sp)
	m->myAnim = m->myPersona -> animation[(a * m->myPersona -> numDirections) + m->direction];
    81e6:	movea.l 8(sp),a0
    81ea:	movea.l 80(a0),a0
    81ee:	move.l (a0),d2
    81f0:	movea.l 8(sp),a0
    81f4:	movea.l 80(a0),a0
    81f8:	move.l 4(a0),d0
    81fc:	move.l 12(sp),-(sp)
    8200:	move.l d0,-(sp)
    8202:	jsr 17b34 <__mulsi3>
    8208:	addq.l #8,sp
    820a:	move.l d0,d1
    820c:	movea.l 8(sp),a0
    8210:	move.l 106(a0),d0
    8214:	add.l d1,d0
    8216:	add.l d0,d0
    8218:	add.l d0,d0
    821a:	movea.l d2,a0
    821c:	adda.l d0,a0
    821e:	move.l (a0),d0
    8220:	movea.l 8(sp),a0
    8224:	move.l d0,72(a0)
}
    8228:	nop
    822a:	move.l (sp)+,d2
    822c:	rts

0000822e <wrapSpeech>:

int wrapSpeech(char * theText, int objT, int sampleFile, BOOL animPerson) {
    822e:	       lea -20(sp),sp
    8232:	       move.l d2,-(sp)
    8234:	       move.l 40(sp),d0
    8238:	       move.w d0,d0
    823a:	       move.w d0,6(sp)
    int i;

    speech->lookWhosTalking = objT;
    823e:	       movea.l 1c8b8 <speech>,a0
    8244:	       move.l 32(sp),16(a0)
    struct onScreenPerson * thisPerson = findPerson(objT);
    824a:	       move.l 32(sp),-(sp)
    824e:	       jsr a646 <findPerson>
    8254:	       addq.l #4,sp
    8256:	       move.l d0,16(sp)
    if (thisPerson) {
    825a:	   /-- beq.s 8280 <wrapSpeech+0x52>
        //setObjFontColour(thisPerson->thisType); Todo Amigize this
        i = wrapSpeechPerson(theText, thisPerson, sampleFile, animPerson);
    825c:	   |   movea.w 6(sp),a0
    8260:	   |   move.l a0,-(sp)
    8262:	   |   move.l 40(sp),-(sp)
    8266:	   |   move.l 24(sp),-(sp)
    826a:	   |   move.l 40(sp),-(sp)
    826e:	   |   jsr 8346 <wrapSpeechPerson>
    8274:	   |   lea 16(sp),sp
    8278:	   |   move.l d0,20(sp)
    827c:	/--|-- bra.w 833a <wrapSpeech+0x10c>
    } else {
        struct screenRegion * thisRegion = getRegionForObject(objT);
    8280:	|  \-> move.l 32(sp),-(sp)
    8284:	|      jsr 15998 <getRegionForObject>
    828a:	|      addq.l #4,sp
    828c:	|      move.l d0,12(sp)
        if (thisRegion) {
    8290:	|  /-- beq.s 82fc <wrapSpeech+0xce>
            //setObjFontColour(thisRegion->thisType); Todo Amigize this
            i = wrapSpeechXY(theText, ((thisRegion->x1 + thisRegion->x2) >> 1) - cameraX, thisRegion->y1 - thisRegion->thisType->speechGap - cameraY, thisRegion->thisType->wrapSpeech, sampleFile);
    8292:	|  |   movea.l 12(sp),a0
    8296:	|  |   movea.l 28(a0),a0
    829a:	|  |   move.l 28(a0),d0
    829e:	|  |   movea.l 12(sp),a0
    82a2:	|  |   movea.l 4(a0),a1
    82a6:	|  |   movea.l 12(sp),a0
    82aa:	|  |   movea.l 28(a0),a0
    82ae:	|  |   move.l 20(a0),d1
    82b2:	|  |   movea.l a1,a0
    82b4:	|  |   suba.l d1,a0
    82b6:	|  |   move.l 1c91a <cameraY>,d1
    82bc:	|  |   movea.l a0,a1
    82be:	|  |   suba.l d1,a1
    82c0:	|  |   movea.l 12(sp),a0
    82c4:	|  |   move.l (a0),d2
    82c6:	|  |   movea.l 12(sp),a0
    82ca:	|  |   move.l 8(a0),d1
    82ce:	|  |   add.l d2,d1
    82d0:	|  |   move.l d1,d2
    82d2:	|  |   asr.l #1,d2
    82d4:	|  |   move.l 1c916 <cameraX>,d1
    82da:	|  |   movea.l d2,a0
    82dc:	|  |   suba.l d1,a0
    82de:	|  |   move.l 36(sp),-(sp)
    82e2:	|  |   move.l d0,-(sp)
    82e4:	|  |   move.l a1,-(sp)
    82e6:	|  |   move.l a0,-(sp)
    82e8:	|  |   move.l 44(sp),-(sp)
    82ec:	|  |   jsr 8464 <wrapSpeechXY>
    82f2:	|  |   lea 20(sp),sp
    82f6:	|  |   move.l d0,20(sp)
    82fa:	+--|-- bra.s 833a <wrapSpeech+0x10c>
        } else {
            struct objectType * temp = findObjectType(objT);
    82fc:	|  \-> move.l 32(sp),-(sp)
    8300:	|      jsr d4b8 <findObjectType>
    8306:	|      addq.l #4,sp
    8308:	|      move.l d0,8(sp)
            //setObjFontColour(temp); Todo: Amigize this
            i = wrapSpeechXY(theText, winWidth >> 1, 10, temp->wrapSpeech, sampleFile);
    830c:	|      movea.l 8(sp),a0
    8310:	|      move.l 28(a0),d1
    8314:	|      move.l 1c7b0 <winWidth>,d0
    831a:	|      lsr.l #1,d0
    831c:	|      move.l 36(sp),-(sp)
    8320:	|      move.l d1,-(sp)
    8322:	|      pea a <_start+0xa>
    8326:	|      move.l d0,-(sp)
    8328:	|      move.l 44(sp),-(sp)
    832c:	|      jsr 8464 <wrapSpeechXY>
    8332:	|      lea 20(sp),sp
    8336:	|      move.l d0,20(sp)
        }
    }
    return i;
    833a:	\----> move.l 20(sp),d0
}
    833e:	       move.l (sp)+,d2
    8340:	       lea 20(sp),sp
    8344:	       rts

00008346 <wrapSpeechPerson>:

int wrapSpeechPerson (char * theText, struct onScreenPerson *thePerson, int sampleFile, BOOL animPerson) {
    8346:	    subq.l #8,sp
    8348:	    movem.l d2-d4,-(sp)
    834c:	    move.l 36(sp),d0
    8350:	    move.w d0,d0
    8352:	    move.w d0,14(sp)
	int i = wrapSpeechXY (theText, thePerson->x - cameraX, thePerson->y - cameraY - (thePerson->scale * (thePerson->height - thePerson->floaty)) - thePerson->thisType -> speechGap, thePerson->thisType -> wrapSpeech, sampleFile);
    8356:	    movea.l 28(sp),a0
    835a:	    movea.l 114(a0),a0
    835e:	    move.l 28(a0),d2
    8362:	    movea.l 28(sp),a0
    8366:	    move.l 4(a0),d3
    836a:	    move.l 1c91a <cameraY>,d0
    8370:	    move.l d0,-(sp)
    8372:	    jsr 175b2 <__floatsisf>
    8378:	    addq.l #4,sp
    837a:	    move.l d0,-(sp)
    837c:	    move.l d3,-(sp)
    837e:	    jsr 178a6 <__subsf3>
    8384:	    addq.l #8,sp
    8386:	    move.l d0,d3
    8388:	    movea.l 28(sp),a0
    838c:	    move.l 32(a0),d4
    8390:	    movea.l 28(sp),a0
    8394:	    move.l 20(a0),d1
    8398:	    movea.l 28(sp),a0
    839c:	    move.l 24(a0),d0
    83a0:	    sub.l d0,d1
    83a2:	    move.l d1,-(sp)
    83a4:	    jsr 175b2 <__floatsisf>
    83aa:	    addq.l #4,sp
    83ac:	    move.l d0,-(sp)
    83ae:	    move.l d4,-(sp)
    83b0:	    jsr 17664 <__mulsf3>
    83b6:	    addq.l #8,sp
    83b8:	    move.l d0,-(sp)
    83ba:	    move.l d3,-(sp)
    83bc:	    jsr 178a6 <__subsf3>
    83c2:	    addq.l #8,sp
    83c4:	    move.l d0,d3
    83c6:	    movea.l 28(sp),a0
    83ca:	    movea.l 114(a0),a0
    83ce:	    move.l 20(a0),d0
    83d2:	    move.l d0,-(sp)
    83d4:	    jsr 175b2 <__floatsisf>
    83da:	    addq.l #4,sp
    83dc:	    move.l d0,-(sp)
    83de:	    move.l d3,-(sp)
    83e0:	    jsr 178a6 <__subsf3>
    83e6:	    addq.l #8,sp
    83e8:	    move.l d0,-(sp)
    83ea:	    jsr 1754a <__fixsfsi>
    83f0:	    addq.l #4,sp
    83f2:	    move.l d0,d4
    83f4:	    movea.l 28(sp),a0
    83f8:	    move.l (a0),d3
    83fa:	    move.l 1c916 <cameraX>,d0
    8400:	    move.l d0,-(sp)
    8402:	    jsr 175b2 <__floatsisf>
    8408:	    addq.l #4,sp
    840a:	    move.l d0,-(sp)
    840c:	    move.l d3,-(sp)
    840e:	    jsr 178a6 <__subsf3>
    8414:	    addq.l #8,sp
    8416:	    move.l d0,-(sp)
    8418:	    jsr 1754a <__fixsfsi>
    841e:	    addq.l #4,sp
    8420:	    move.l 32(sp),-(sp)
    8424:	    move.l d2,-(sp)
    8426:	    move.l d4,-(sp)
    8428:	    move.l d0,-(sp)
    842a:	    move.l 40(sp),-(sp)
    842e:	    jsr 8464 <wrapSpeechXY>
    8434:	    lea 20(sp),sp
    8438:	    move.l d0,16(sp)
	if (animPerson) {
    843c:	    tst.w 14(sp)
    8440:	/-- beq.s 8458 <wrapSpeechPerson+0x112>
		makeTalker (thePerson);
    8442:	|   move.l 28(sp),-(sp)
    8446:	|   jsr 8084 <makeTalker>
    844c:	|   addq.l #4,sp
		speech -> currentTalker = thePerson;
    844e:	|   movea.l 1c8b8 <speech>,a0
    8454:	|   move.l 28(sp),(a0)
	}
	return i;
    8458:	\-> move.l 16(sp),d0
}
    845c:	    movem.l (sp)+,d2-d4
    8460:	    addq.l #8,sp
    8462:	    rts

00008464 <wrapSpeechXY>:

int wrapSpeechXY(char * theText, int x, int y, int wrap, int sampleFile) {
    8464:	                   lea -16(sp),sp
    8468:	                   movem.l d2-d4/a2,-(sp)
    int a, offset = 0;
    846c:	                   clr.l 16(sp)
    killAllSpeech();
    8470:	                   jsr 7fb6 <killAllSpeech>

    int speechTime = (strlen(theText) + 20) * speechSpeed;
    8476:	                   move.l 36(sp),-(sp)
    847a:	                   jsr 13c3a <strlen>
    8480:	                   addq.l #4,sp
    8482:	                   movea.l d0,a0
    8484:	                   lea 20(a0),a0
    8488:	                   move.l a0,-(sp)
    848a:	                   jsr 175da <__floatunsisf>
    8490:	                   addq.l #4,sp
    8492:	                   move.l d0,d1
    8494:	                   move.l 1c1e6 <speechSpeed>,d0
    849a:	                   move.l d0,-(sp)
    849c:	                   move.l d1,-(sp)
    849e:	                   jsr 17664 <__mulsf3>
    84a4:	                   addq.l #8,sp
    84a6:	                   move.l d0,-(sp)
    84a8:	                   jsr 1754a <__fixsfsi>
    84ae:	                   addq.l #4,sp
    84b0:	                   move.l d0,24(sp)
    if (speechTime < 1) speechTime = 1;
    84b4:	               /-- bgt.s 84bc <wrapSpeechXY+0x58>
    84b6:	               |   moveq #1,d0
    84b8:	               |   move.l d0,24(sp)

    if (sampleFile != -1) {
    84bc:	               \-> moveq #-1,d1
    84be:	                   cmp.l 52(sp),d1
    84c2:	               /-- beq.s 8502 <wrapSpeechXY+0x9e>
        if (speechMode >= 1) {
    84c4:	               |   move.l 1c92a <speechMode>,d0
    84ca:	               +-- ble.s 8502 <wrapSpeechXY+0x9e>
            if (startSound(sampleFile, FALSE)) {
    84cc:	               |   clr.l -(sp)
    84ce:	               |   move.l 56(sp),-(sp)
    84d2:	               |   jsr d182 <startSound>
    84d8:	               |   addq.l #8,sp
    84da:	               |   tst.w d0
    84dc:	               +-- beq.s 8502 <wrapSpeechXY+0x9e>
                speechTime = -10;
    84de:	               |   moveq #-10,d0
    84e0:	               |   move.l d0,24(sp)
                speech->lastFile = sampleFile;
    84e4:	               |   movea.l 1c8b8 <speech>,a0
    84ea:	               |   move.l 52(sp),12(a0)
                if (speechMode == 2) return -10;
    84f0:	               |   move.l 1c92a <speechMode>,d0
    84f6:	               |   moveq #2,d1
    84f8:	               |   cmp.l d0,d1
    84fa:	               +-- bne.s 8502 <wrapSpeechXY+0x9e>
    84fc:	               |   moveq #-10,d0
    84fe:	/--------------|-- bra.w 8788 <wrapSpeechXY+0x324>
            }
        }
    }
    speech->speechY = y;
    8502:	|              \-> movea.l 1c8b8 <speech>,a0
    8508:	|                  move.l 44(sp),8(a0)

    while (strlen(theText) > (unsigned long) wrap) {
    850e:	|     /----------- bra.w 85c2 <wrapSpeechXY+0x15e>
        a = wrap;
    8512:	|  /--|----------> move.l 48(sp),28(sp)
        while (theText[a] != ' ') {
    8518:	|  |  |        /-- bra.s 8528 <wrapSpeechXY+0xc4>
            a--;
    851a:	|  |  |  /-----|-> subq.l #1,28(sp)
            if (a == 0) {
    851e:	|  |  |  |     +-- bne.s 8528 <wrapSpeechXY+0xc4>
                a = wrap;
    8520:	|  |  |  |     |   move.l 48(sp),28(sp)
                break;
    8526:	|  |  |  |  /--|-- bra.s 853a <wrapSpeechXY+0xd6>
        while (theText[a] != ' ') {
    8528:	|  |  |  |  |  \-> move.l 28(sp),d0
    852c:	|  |  |  |  |      movea.l 36(sp),a0
    8530:	|  |  |  |  |      adda.l d0,a0
    8532:	|  |  |  |  |      move.b (a0),d0
    8534:	|  |  |  |  |      cmpi.b #32,d0
    8538:	|  |  |  \--|----- bne.s 851a <wrapSpeechXY+0xb6>
            }
        }
        theText[a] = 0;
    853a:	|  |  |     \----> move.l 28(sp),d0
    853e:	|  |  |            movea.l 36(sp),a0
    8542:	|  |  |            adda.l d0,a0
    8544:	|  |  |            clr.b (a0)
        addSpeechLine(theText, x, &offset);
    8546:	|  |  |            lea 16(sp),a0
    854a:	|  |  |            move.l a0,-(sp)
    854c:	|  |  |            move.l 44(sp),-(sp)
    8550:	|  |  |            move.l 44(sp),-(sp)
    8554:	|  |  |            jsr 7d00 <addSpeechLine>
    855a:	|  |  |            lea 12(sp),sp
        theText[a] = ' ';
    855e:	|  |  |            move.l 28(sp),d0
    8562:	|  |  |            movea.l 36(sp),a0
    8566:	|  |  |            adda.l d0,a0
    8568:	|  |  |            move.b #32,(a0)
        theText += a + 1;
    856c:	|  |  |            move.l 28(sp),d0
    8570:	|  |  |            addq.l #1,d0
    8572:	|  |  |            add.l d0,36(sp)
        y -= fontHeight / cameraZoom;
    8576:	|  |  |            move.l 44(sp),-(sp)
    857a:	|  |  |            jsr 175b2 <__floatsisf>
    8580:	|  |  |            addq.l #4,sp
    8582:	|  |  |            move.l d0,d2
    8584:	|  |  |            move.l 1c954 <fontHeight>,d0
    858a:	|  |  |            move.l d0,-(sp)
    858c:	|  |  |            jsr 175b2 <__floatsisf>
    8592:	|  |  |            addq.l #4,sp
    8594:	|  |  |            move.l d0,d1
    8596:	|  |  |            move.l 1c1fa <cameraZoom>,d0
    859c:	|  |  |            move.l d0,-(sp)
    859e:	|  |  |            move.l d1,-(sp)
    85a0:	|  |  |            jsr 1745e <__divsf3>
    85a6:	|  |  |            addq.l #8,sp
    85a8:	|  |  |            move.l d0,-(sp)
    85aa:	|  |  |            move.l d2,-(sp)
    85ac:	|  |  |            jsr 178a6 <__subsf3>
    85b2:	|  |  |            addq.l #8,sp
    85b4:	|  |  |            move.l d0,-(sp)
    85b6:	|  |  |            jsr 1754a <__fixsfsi>
    85bc:	|  |  |            addq.l #4,sp
    85be:	|  |  |            move.l d0,44(sp)
    while (strlen(theText) > (unsigned long) wrap) {
    85c2:	|  |  \----------> move.l 36(sp),-(sp)
    85c6:	|  |               jsr 13c3a <strlen>
    85cc:	|  |               addq.l #4,sp
    85ce:	|  |               move.l d0,d1
    85d0:	|  |               move.l 48(sp),d0
    85d4:	|  |               cmp.l d1,d0
    85d6:	|  \-------------- bcs.w 8512 <wrapSpeechXY+0xae>
    }
    addSpeechLine(theText, x, &offset);
    85da:	|                  lea 16(sp),a0
    85de:	|                  move.l a0,-(sp)
    85e0:	|                  move.l 44(sp),-(sp)
    85e4:	|                  move.l 44(sp),-(sp)
    85e8:	|                  jsr 7d00 <addSpeechLine>
    85ee:	|                  lea 12(sp),sp
    y -= fontHeight / cameraZoom;
    85f2:	|                  move.l 44(sp),-(sp)
    85f6:	|                  jsr 175b2 <__floatsisf>
    85fc:	|                  addq.l #4,sp
    85fe:	|                  move.l d0,d2
    8600:	|                  move.l 1c954 <fontHeight>,d0
    8606:	|                  move.l d0,-(sp)
    8608:	|                  jsr 175b2 <__floatsisf>
    860e:	|                  addq.l #4,sp
    8610:	|                  move.l d0,d1
    8612:	|                  move.l 1c1fa <cameraZoom>,d0
    8618:	|                  move.l d0,-(sp)
    861a:	|                  move.l d1,-(sp)
    861c:	|                  jsr 1745e <__divsf3>
    8622:	|                  addq.l #8,sp
    8624:	|                  move.l d0,-(sp)
    8626:	|                  move.l d2,-(sp)
    8628:	|                  jsr 178a6 <__subsf3>
    862e:	|                  addq.l #8,sp
    8630:	|                  move.l d0,-(sp)
    8632:	|                  jsr 1754a <__fixsfsi>
    8638:	|                  addq.l #4,sp
    863a:	|                  move.l d0,44(sp)

    if (y < 0) speech->speechY -= y;
    863e:	|              /-- bpl.s 865c <wrapSpeechXY+0x1f8>
    8640:	|              |   movea.l 1c8b8 <speech>,a0
    8646:	|              |   move.l 8(a0),d0
    864a:	|              |   movea.l 1c8b8 <speech>,a0
    8650:	|              |   sub.l 44(sp),d0
    8654:	|              |   move.l d0,8(a0)
    8658:	|           /--|-- bra.w 874a <wrapSpeechXY+0x2e6>
    else if (speech->speechY > cameraY + (FLOAT)(winHeight - fontHeight / 3) / cameraZoom) speech->speechY = cameraY + (FLOAT)(winHeight - fontHeight / 3) / cameraZoom;
    865c:	|           |  \-> movea.l 1c8b8 <speech>,a0
    8662:	|           |      move.l 8(a0),d0
    8666:	|           |      move.l d0,-(sp)
    8668:	|           |      jsr 175b2 <__floatsisf>
    866e:	|           |      addq.l #4,sp
    8670:	|           |      move.l d0,d2
    8672:	|           |      move.l 1c91a <cameraY>,d0
    8678:	|           |      move.l d0,-(sp)
    867a:	|           |      jsr 175b2 <__floatsisf>
    8680:	|           |      addq.l #4,sp
    8682:	|           |      move.l d0,d3
    8684:	|           |      move.l 1c7b4 <winHeight>,d4
    868a:	|           |      move.l 1c954 <fontHeight>,d0
    8690:	|           |      pea 3 <_start+0x3>
    8694:	|           |      move.l d0,-(sp)
    8696:	|           |      jsr 17bb2 <__divsi3>
    869c:	|           |      addq.l #8,sp
    869e:	|           |      move.l d4,d1
    86a0:	|           |      sub.l d0,d1
    86a2:	|           |      move.l d1,-(sp)
    86a4:	|           |      jsr 175da <__floatunsisf>
    86aa:	|           |      addq.l #4,sp
    86ac:	|           |      move.l d0,d1
    86ae:	|           |      move.l 1c1fa <cameraZoom>,d0
    86b4:	|           |      move.l d0,-(sp)
    86b6:	|           |      move.l d1,-(sp)
    86b8:	|           |      jsr 1745e <__divsf3>
    86be:	|           |      addq.l #8,sp
    86c0:	|           |      move.l d0,-(sp)
    86c2:	|           |      move.l d3,-(sp)
    86c4:	|           |      jsr 17364 <__addsf3>
    86ca:	|           |      addq.l #8,sp
    86cc:	|           |      move.l d0,-(sp)
    86ce:	|           |      move.l d2,-(sp)
    86d0:	|           |      jsr 1771e <__gtsf2>
    86d6:	|           |      addq.l #8,sp
    86d8:	|           |      tst.l d0
    86da:	|           +----- ble.s 874a <wrapSpeechXY+0x2e6>
    86dc:	|           |      move.l 1c91a <cameraY>,d0
    86e2:	|           |      move.l d0,-(sp)
    86e4:	|           |      jsr 175b2 <__floatsisf>
    86ea:	|           |      addq.l #4,sp
    86ec:	|           |      move.l d0,d2
    86ee:	|           |      move.l 1c7b4 <winHeight>,d3
    86f4:	|           |      move.l 1c954 <fontHeight>,d0
    86fa:	|           |      pea 3 <_start+0x3>
    86fe:	|           |      move.l d0,-(sp)
    8700:	|           |      jsr 17bb2 <__divsi3>
    8706:	|           |      addq.l #8,sp
    8708:	|           |      move.l d3,d1
    870a:	|           |      sub.l d0,d1
    870c:	|           |      move.l d1,-(sp)
    870e:	|           |      jsr 175da <__floatunsisf>
    8714:	|           |      addq.l #4,sp
    8716:	|           |      move.l d0,d1
    8718:	|           |      move.l 1c1fa <cameraZoom>,d0
    871e:	|           |      move.l d0,-(sp)
    8720:	|           |      move.l d1,-(sp)
    8722:	|           |      jsr 1745e <__divsf3>
    8728:	|           |      addq.l #8,sp
    872a:	|           |      move.l d0,-(sp)
    872c:	|           |      move.l d2,-(sp)
    872e:	|           |      jsr 17364 <__addsf3>
    8734:	|           |      addq.l #8,sp
    8736:	|           |      movea.l 1c8b8 <speech>,a2
    873c:	|           |      move.l d0,-(sp)
    873e:	|           |      jsr 1754a <__fixsfsi>
    8744:	|           |      addq.l #4,sp
    8746:	|           |      move.l d0,8(a2)

    if (offset) {
    874a:	|           \----> move.l 16(sp),d0
    874e:	|        /-------- beq.s 8784 <wrapSpeechXY+0x320>
        struct speechLine * viewLine = speech->allSpeech;
    8750:	|        |         movea.l 1c8b8 <speech>,a0
    8756:	|        |         move.l 4(a0),20(sp)
        while (viewLine) {
    875c:	|        |     /-- bra.s 877e <wrapSpeechXY+0x31a>
            viewLine->x += offset;
    875e:	|        |  /--|-> movea.l 20(sp),a0
    8762:	|        |  |  |   move.l 8(a0),d1
    8766:	|        |  |  |   move.l 16(sp),d0
    876a:	|        |  |  |   add.l d1,d0
    876c:	|        |  |  |   movea.l 20(sp),a0
    8770:	|        |  |  |   move.l d0,8(a0)
            viewLine = viewLine->next;
    8774:	|        |  |  |   movea.l 20(sp),a0
    8778:	|        |  |  |   move.l 4(a0),20(sp)
        while (viewLine) {
    877e:	|        |  |  \-> tst.l 20(sp)
    8782:	|        |  \----- bne.s 875e <wrapSpeechXY+0x2fa>
        }
    }

    return speechTime;
    8784:	|        \-------> move.l 24(sp),d0
}
    8788:	\----------------> movem.l (sp)+,d2-d4/a2
    878c:	                   lea 16(sp),sp
    8790:	                   rts

00008792 <killZBuffer>:
#include "stringy.h"
#include "support/gcc8_c_support.h"

struct zBufferData *zBuffer;

void killZBuffer () {
    8792:	       lea -12(sp),sp
    8796:	       move.l a6,-(sp)
	struct zBufferData *zbuffercursor =  zBuffer;
    8798:	       move.l 1c8bc <zBuffer>,12(sp)

	while(zbuffercursor) {
    87a0:	   /-- bra.s 87c8 <killZBuffer+0x36>
		struct zBufferData *deleteme = zbuffercursor;
    87a2:	/--|-> move.l 12(sp),8(sp)
		zbuffercursor = zbuffercursor->nextPanel;
    87a8:	|  |   movea.l 12(sp),a0
    87ac:	|  |   move.l 24(a0),12(sp)
		FreeVec(deleteme);
    87b2:	|  |   move.l 8(sp),4(sp)
    87b8:	|  |   move.l 1c85c <SysBase>,d0
    87be:	|  |   movea.l d0,a6
    87c0:	|  |   movea.l 4(sp),a1
    87c4:	|  |   jsr -690(a6)
	while(zbuffercursor) {
    87c8:	|  \-> tst.l 12(sp)
    87cc:	\----- bne.s 87a2 <killZBuffer+0x10>
	}
	zBuffer = NULL;
    87ce:	       clr.l 1c8bc <zBuffer>
}
    87d4:	       nop
    87d6:	       movea.l (sp)+,a6
    87d8:	       lea 12(sp),sp
    87dc:	       rts

000087de <setZBuffer>:

BOOL setZBuffer (unsigned int y) {
    87de:	             lea -304(sp),sp
    87e2:	             movem.l d2-d4/a6,-(sp)
	int x, n;
	ULONG stillToGo = 0;
    87e6:	             clr.l 310(sp)
	int yPalette[16], sorted[16], sortback[16];

	killZBuffer ();	
    87ea:	             jsr 8792 <killZBuffer>
	
	if (! openFileFromNum (y)) return FALSE;
    87f0:	             move.l 324(sp),d0
    87f4:	             move.l d0,-(sp)
    87f6:	             jsr 6df0 <openFileFromNum>
    87fc:	             addq.l #4,sp
    87fe:	             tst.l d0
    8800:	         /-- bne.s 8808 <setZBuffer+0x2a>
    8802:	         |   clr.w d0
    8804:	/--------|-- bra.w 8a8c <setZBuffer+0x2ae>
	
	if (FGetC (bigDataFile) != 'a' || FGetC (bigDataFile) != 's' || FGetC (bigDataFile) != 'z' || FGetC (bigDataFile) != 'b') 
    8808:	|        \-> move.l 1c844 <bigDataFile>,306(sp)
    8810:	|            move.l 1c864 <DOSBase>,d0
    8816:	|            movea.l d0,a6
    8818:	|            move.l 306(sp),d1
    881c:	|            jsr -306(a6)
    8820:	|            move.l d0,302(sp)
    8824:	|            move.l 302(sp),d0
    8828:	|            moveq #97,d1
    882a:	|            cmp.l d0,d1
    882c:	|     /----- bne.s 88a0 <setZBuffer+0xc2>
    882e:	|     |      move.l 1c844 <bigDataFile>,298(sp)
    8836:	|     |      move.l 1c864 <DOSBase>,d0
    883c:	|     |      movea.l d0,a6
    883e:	|     |      move.l 298(sp),d1
    8842:	|     |      jsr -306(a6)
    8846:	|     |      move.l d0,294(sp)
    884a:	|     |      move.l 294(sp),d0
    884e:	|     |      moveq #115,d1
    8850:	|     |      cmp.l d0,d1
    8852:	|     +----- bne.s 88a0 <setZBuffer+0xc2>
    8854:	|     |      move.l 1c844 <bigDataFile>,290(sp)
    885c:	|     |      move.l 1c864 <DOSBase>,d0
    8862:	|     |      movea.l d0,a6
    8864:	|     |      move.l 290(sp),d1
    8868:	|     |      jsr -306(a6)
    886c:	|     |      move.l d0,286(sp)
    8870:	|     |      move.l 286(sp),d0
    8874:	|     |      moveq #122,d1
    8876:	|     |      cmp.l d0,d1
    8878:	|     +----- bne.s 88a0 <setZBuffer+0xc2>
    887a:	|     |      move.l 1c844 <bigDataFile>,282(sp)
    8882:	|     |      move.l 1c864 <DOSBase>,d0
    8888:	|     |      movea.l d0,a6
    888a:	|     |      move.l 282(sp),d1
    888e:	|     |      jsr -306(a6)
    8892:	|     |      move.l d0,278(sp)
    8896:	|     |      move.l 278(sp),d0
    889a:	|     |      moveq #98,d1
    889c:	|     |      cmp.l d0,d1
    889e:	|     |  /-- beq.s 88b4 <setZBuffer+0xd6>
	{ 
		 KPrintF("Not a Z-buffer file");
    88a0:	|     \--|-> pea 18eea <PutChar+0x12a0>
    88a6:	|        |   jsr 17176 <KPrintF>
    88ac:	|        |   addq.l #4,sp
		 return FALSE;
    88ae:	|        |   clr.w d0
    88b0:	+--------|-- bra.w 8a8c <setZBuffer+0x2ae>
	}

	UWORD numelements = FGetC(bigDataFile);
    88b4:	|        \-> move.l 1c844 <bigDataFile>,274(sp)
    88bc:	|            move.l 1c864 <DOSBase>,d0
    88c2:	|            movea.l d0,a6
    88c4:	|            move.l 274(sp),d1
    88c8:	|            jsr -306(a6)
    88cc:	|            move.l d0,270(sp)
    88d0:	|            move.l 270(sp),d0
    88d4:	|            move.w d0,318(sp)

	UWORD size;
	UWORD count;

	zBuffer = AllocVec(sizeof(struct zBufferData), MEMF_ANY);
    88d8:	|            moveq #28,d0
    88da:	|            move.l d0,266(sp)
    88de:	|            clr.l 262(sp)
    88e2:	|            move.l 1c85c <SysBase>,d0
    88e8:	|            movea.l d0,a6
    88ea:	|            move.l 266(sp),d0
    88ee:	|            move.l 262(sp),d1
    88f2:	|            jsr -684(a6)
    88f6:	|            move.l d0,258(sp)
    88fa:	|            move.l 258(sp),d0
    88fe:	|            move.l d0,1c8bc <zBuffer>

	struct zBufferData *currentitem;
	currentitem = zBuffer;
    8904:	|            move.l 1c8bc <zBuffer>,314(sp)

	while(numelements--)
    890c:	|     /----- bra.w 8a72 <setZBuffer+0x294>
	{		
		currentitem->width = get2bytes (bigDataFile);
    8910:	|  /--|----> move.l 1c844 <bigDataFile>,d0
    8916:	|  |  |      move.l d0,-(sp)
    8918:	|  |  |      jsr 6bc <get2bytes>
    891e:	|  |  |      addq.l #4,sp
    8920:	|  |  |      movea.l 314(sp),a0
    8924:	|  |  |      move.l d0,(a0)
		currentitem->height = get2bytes (bigDataFile);
    8926:	|  |  |      move.l 1c844 <bigDataFile>,d0
    892c:	|  |  |      move.l d0,-(sp)
    892e:	|  |  |      jsr 6bc <get2bytes>
    8934:	|  |  |      addq.l #4,sp
    8936:	|  |  |      movea.l 314(sp),a0
    893a:	|  |  |      move.l d0,4(a0)

		currentitem->topx = get2bytes (bigDataFile);
    893e:	|  |  |      move.l 1c844 <bigDataFile>,d0
    8944:	|  |  |      move.l d0,-(sp)
    8946:	|  |  |      jsr 6bc <get2bytes>
    894c:	|  |  |      addq.l #4,sp
    894e:	|  |  |      movea.l 314(sp),a0
    8952:	|  |  |      move.l d0,8(a0)
		currentitem->topy = get2bytes (bigDataFile);
    8956:	|  |  |      move.l 1c844 <bigDataFile>,d0
    895c:	|  |  |      move.l d0,-(sp)
    895e:	|  |  |      jsr 6bc <get2bytes>
    8964:	|  |  |      addq.l #4,sp
    8966:	|  |  |      movea.l 314(sp),a0
    896a:	|  |  |      move.l d0,12(a0)
		currentitem->yz = get2bytes (bigDataFile);
    896e:	|  |  |      move.l 1c844 <bigDataFile>,d0
    8974:	|  |  |      move.l d0,-(sp)
    8976:	|  |  |      jsr 6bc <get2bytes>
    897c:	|  |  |      addq.l #4,sp
    897e:	|  |  |      movea.l 314(sp),a0
    8982:	|  |  |      move.l d0,16(a0)

		UWORD size = currentitem->width * currentitem->height / 8;
    8986:	|  |  |      movea.l 314(sp),a0
    898a:	|  |  |      move.l (a0),d0
    898c:	|  |  |      movea.l 314(sp),a0
    8990:	|  |  |      move.l 4(a0),d1
    8994:	|  |  |      move.l d1,-(sp)
    8996:	|  |  |      move.l d0,-(sp)
    8998:	|  |  |      jsr 17b34 <__mulsi3>
    899e:	|  |  |      addq.l #8,sp
    89a0:	|  |  |      tst.l d0
    89a2:	|  |  |  /-- bge.s 89a6 <setZBuffer+0x1c8>
    89a4:	|  |  |  |   addq.l #7,d0
    89a6:	|  |  |  \-> asr.l #3,d0
    89a8:	|  |  |      move.w d0,256(sp)
		currentitem->bitplane = AllocVec( size, MEMF_CHIP);
    89ac:	|  |  |      moveq #0,d0
    89ae:	|  |  |      move.w 256(sp),d0
    89b2:	|  |  |      move.l d0,252(sp)
    89b6:	|  |  |      moveq #2,d1
    89b8:	|  |  |      move.l d1,248(sp)
    89bc:	|  |  |      move.l 1c85c <SysBase>,d0
    89c2:	|  |  |      movea.l d0,a6
    89c4:	|  |  |      move.l 252(sp),d0
    89c8:	|  |  |      move.l 248(sp),d1
    89cc:	|  |  |      jsr -684(a6)
    89d0:	|  |  |      move.l d0,244(sp)
    89d4:	|  |  |      move.l 244(sp),d0
    89d8:	|  |  |      movea.l 314(sp),a0
    89dc:	|  |  |      move.l d0,20(a0)
		count = FRead( bigDataFile, currentitem->bitplane, 1, size);				
    89e0:	|  |  |      move.l 1c844 <bigDataFile>,240(sp)
    89e8:	|  |  |      movea.l 314(sp),a0
    89ec:	|  |  |      move.l 20(a0),236(sp)
    89f2:	|  |  |      moveq #1,d0
    89f4:	|  |  |      move.l d0,232(sp)
    89f8:	|  |  |      moveq #0,d0
    89fa:	|  |  |      move.w 256(sp),d0
    89fe:	|  |  |      move.l d0,228(sp)
    8a02:	|  |  |      move.l 1c864 <DOSBase>,d0
    8a08:	|  |  |      movea.l d0,a6
    8a0a:	|  |  |      move.l 240(sp),d1
    8a0e:	|  |  |      move.l 236(sp),d2
    8a12:	|  |  |      move.l 232(sp),d3
    8a16:	|  |  |      move.l 228(sp),d4
    8a1a:	|  |  |      jsr -324(a6)
    8a1e:	|  |  |      move.l d0,224(sp)
    8a22:	|  |  |      move.l 224(sp),d0
    8a26:	|  |  |      move.w d0,222(sp)

		if(numelements > 0) {
    8a2a:	|  |  |      tst.w 318(sp)
    8a2e:	|  |  |  /-- beq.s 8a6a <setZBuffer+0x28c>
			currentitem->nextPanel = AllocVec(sizeof(struct zBufferData), MEMF_ANY);
    8a30:	|  |  |  |   moveq #28,d1
    8a32:	|  |  |  |   move.l d1,218(sp)
    8a36:	|  |  |  |   clr.l 214(sp)
    8a3a:	|  |  |  |   move.l 1c85c <SysBase>,d0
    8a40:	|  |  |  |   movea.l d0,a6
    8a42:	|  |  |  |   move.l 218(sp),d0
    8a46:	|  |  |  |   move.l 214(sp),d1
    8a4a:	|  |  |  |   jsr -684(a6)
    8a4e:	|  |  |  |   move.l d0,210(sp)
    8a52:	|  |  |  |   move.l 210(sp),d0
    8a56:	|  |  |  |   movea.l 314(sp),a0
    8a5a:	|  |  |  |   move.l d0,24(a0)
			currentitem = currentitem->nextPanel;
    8a5e:	|  |  |  |   movea.l 314(sp),a0
    8a62:	|  |  |  |   move.l 24(a0),314(sp)
    8a68:	|  |  +--|-- bra.s 8a72 <setZBuffer+0x294>
		} else {
			currentitem->nextPanel = NULL;
    8a6a:	|  |  |  \-> movea.l 314(sp),a0
    8a6e:	|  |  |      clr.l 24(a0)
	while(numelements--)
    8a72:	|  |  \----> move.w 318(sp),d0
    8a76:	|  |         move.w d0,d1
    8a78:	|  |         subq.w #1,d1
    8a7a:	|  |         move.w d1,318(sp)
    8a7e:	|  |         tst.w d0
    8a80:	|  \-------- bne.w 8910 <setZBuffer+0x132>
		}

	}
	
	finishAccess ();
    8a84:	|            jsr 6ce8 <finishAccess>
	
	return TRUE;
    8a8a:	|            moveq #1,d0
}
    8a8c:	\----------> movem.l (sp)+,d2-d4/a6
    8a90:	             lea 304(sp),sp
    8a94:	             rts

00008a96 <forgetSpriteBank>:
extern int cameraX, cameraY;
extern struct inputType input;


void forgetSpriteBank (struct loadedSpriteBank * forgetme)
{			
    8a96:	          lea -36(sp),sp
    8a9a:	          move.l a6,-(sp)
	struct spriteBank *spritebanktoforget = &forgetme->bank;
    8a9c:	          move.l 44(sp),d0
    8aa0:	          addq.l #8,d0
    8aa2:	          move.l d0,28(sp)
	
	for (int i = 0; i < spritebanktoforget->total; i++) {
    8aa6:	          clr.l 36(sp)
    8aaa:	   /----- bra.s 8af0 <forgetSpriteBank+0x5a>
		struct sprite *cursprite = &spritebanktoforget->sprites[i];		
    8aac:	/--|----> movea.l 28(sp),a0
    8ab0:	|  |      movea.l 8(a0),a0
    8ab4:	|  |      move.l 36(sp),d1
    8ab8:	|  |      move.l d1,d0
    8aba:	|  |      lsl.l #3,d0
    8abc:	|  |      sub.l d1,d0
    8abe:	|  |      add.l d0,d0
    8ac0:	|  |      add.l d0,d0
    8ac2:	|  |      adda.l d0,a0
    8ac4:	|  |      move.l a0,8(sp)
		if(cursprite->data) {		
    8ac8:	|  |      movea.l 8(sp),a0
    8acc:	|  |      move.l 24(a0),d0
    8ad0:	|  |  /-- beq.s 8aec <forgetSpriteBank+0x56>
			FreeVec(cursprite->data);			
    8ad2:	|  |  |   movea.l 8(sp),a0
    8ad6:	|  |  |   move.l 24(a0),4(sp)
    8adc:	|  |  |   move.l 1c85c <SysBase>,d0
    8ae2:	|  |  |   movea.l d0,a6
    8ae4:	|  |  |   movea.l 4(sp),a1
    8ae8:	|  |  |   jsr -690(a6)
	for (int i = 0; i < spritebanktoforget->total; i++) {
    8aec:	|  |  \-> addq.l #1,36(sp)
    8af0:	|  \----> movea.l 28(sp),a0
    8af4:	|         move.l (a0),d0
    8af6:	|         cmp.l 36(sp),d0
    8afa:	\-------- bgt.s 8aac <forgetSpriteBank+0x16>
		}
	}
	FreeVec(spritebanktoforget->sprites);
    8afc:	          movea.l 28(sp),a0
    8b00:	          move.l 8(a0),24(sp)
    8b06:	          move.l 1c85c <SysBase>,d0
    8b0c:	          movea.l d0,a6
    8b0e:	          movea.l 24(sp),a1
    8b12:	          jsr -690(a6)
	FreeVec(spritebanktoforget);
    8b16:	          move.l 28(sp),20(sp)
    8b1c:	          move.l 1c85c <SysBase>,d0
    8b22:	          movea.l d0,a6
    8b24:	          movea.l 20(sp),a1
    8b28:	          jsr -690(a6)
	
	struct loadedSpriteBank *precedingbank = allLoadedBanks;
    8b2c:	          move.l 1c974 <allLoadedBanks>,32(sp)
	
	while(precedingbank->next->ID != forgetme->ID && precedingbank != NULL)
    8b34:	      /-- bra.s 8b40 <forgetSpriteBank+0xaa>
	{
		precedingbank = precedingbank->next;
    8b36:	   /--|-> movea.l 32(sp),a0
    8b3a:	   |  |   move.l 22(a0),32(sp)
	while(precedingbank->next->ID != forgetme->ID && precedingbank != NULL)
    8b40:	   |  \-> movea.l 32(sp),a0
    8b44:	   |      movea.l 22(a0),a0
    8b48:	   |      move.l (a0),d1
    8b4a:	   |      movea.l 44(sp),a0
    8b4e:	   |      move.l (a0),d0
    8b50:	   |      cmp.l d1,d0
    8b52:	   |  /-- beq.s 8b5a <forgetSpriteBank+0xc4>
    8b54:	   |  |   tst.l 32(sp)
    8b58:	   \--|-- bne.s 8b36 <forgetSpriteBank+0xa0>
	}	

	if(precedingbank)
    8b5a:	      \-> tst.l 32(sp)
    8b5e:	   /----- beq.s 8b88 <forgetSpriteBank+0xf2>
	{
		//Forget element in the middle of the chain or the last one
		precedingbank->next = forgetme->next;
    8b60:	   |      movea.l 44(sp),a0
    8b64:	   |      move.l 22(a0),d0
    8b68:	   |      movea.l 32(sp),a0
    8b6c:	   |      move.l d0,22(a0)
		FreeVec( forgetme);
    8b70:	   |      move.l 44(sp),12(sp)
    8b76:	   |      move.l 1c85c <SysBase>,d0
    8b7c:	   |      movea.l d0,a6
    8b7e:	   |      movea.l 12(sp),a1
    8b82:	   |      jsr -690(a6)
	{
		//Forget first element in the chain
		allLoadedBanks = allLoadedBanks->next;
		FreeVec( forgetme);
	}	
}
    8b86:	   |  /-- bra.s 8bae <forgetSpriteBank+0x118>
		allLoadedBanks = allLoadedBanks->next;
    8b88:	   \--|-> movea.l 1c974 <allLoadedBanks>,a0
    8b8e:	      |   move.l 22(a0),d0
    8b92:	      |   move.l d0,1c974 <allLoadedBanks>
		FreeVec( forgetme);
    8b98:	      |   move.l 44(sp),16(sp)
    8b9e:	      |   move.l 1c85c <SysBase>,d0
    8ba4:	      |   movea.l d0,a6
    8ba6:	      |   movea.l 16(sp),a1
    8baa:	      |   jsr -690(a6)
}
    8bae:	      \-> nop
    8bb0:	          movea.l (sp)+,a6
    8bb2:	          lea 36(sp),sp
    8bb6:	          rts

00008bb8 <loadSpriteBank>:

BOOL loadSpriteBank (int fileNum, struct spriteBank *loadhere, BOOL isFont) {
    8bb8:	                      lea -84(sp),sp
    8bbc:	                      movem.l d2-d4/a2/a6,-(sp)
    8bc0:	                      move.l 116(sp),d0
    8bc4:	                      move.w d0,d0
    8bc6:	                      move.w d0,22(sp)
	int i, tex_num, total, picwidth, picheight, howmany = 0, startIndex = 0;
    8bca:	                      clr.l 94(sp)
    8bce:	                      clr.l 90(sp)
	int *totalwidth, *maxheight;
	int numTextures = 0;
    8bd2:	                      clr.l 86(sp)
	UBYTE *data;

	if (!openFileFromNum(fileNum)) {
    8bd6:	                      move.l 108(sp),-(sp)
    8bda:	                      jsr 6df0 <openFileFromNum>
    8be0:	                      addq.l #4,sp
    8be2:	                      tst.l d0
    8be4:	                  /-- bne.s 8bfa <loadSpriteBank+0x42>
		KPrintF("loadSpriteBank: Can't open sprite bank / font");
    8be6:	                  |   pea 18efe <PutChar+0x12b4>
    8bec:	                  |   jsr 17176 <KPrintF>
    8bf2:	                  |   addq.l #4,sp
		return FALSE;
    8bf4:	                  |   clr.w d0
    8bf6:	/-----------------|-- bra.w 8fc2 <loadSpriteBank+0x40a>
	}

	loadhere->isFont = isFont;
    8bfa:	|                 \-> movea.l 112(sp),a0
    8bfe:	|                     move.w 22(sp),12(a0)

	get2bytes(bigDataFile); // Ignore first 2 bytes
    8c04:	|                     move.l 1c844 <bigDataFile>,d0
    8c0a:	|                     move.l d0,-(sp)
    8c0c:	|                     jsr 6bc <get2bytes>
    8c12:	|                     addq.l #4,sp
	loadhere->type = FGetC(bigDataFile);
    8c14:	|                     move.l 1c844 <bigDataFile>,82(sp)
    8c1c:	|                     move.l 1c864 <DOSBase>,d0
    8c22:	|                     movea.l d0,a6
    8c24:	|                     move.l 82(sp),d1
    8c28:	|                     jsr -306(a6)
    8c2c:	|                     move.l d0,78(sp)
    8c30:	|                     move.l 78(sp),d0
    8c34:	|                     movea.l 112(sp),a0
    8c38:	|                     move.l d0,4(a0)
	total = get2bytes(bigDataFile);
    8c3c:	|                     move.l 1c844 <bigDataFile>,d0
    8c42:	|                     move.l d0,-(sp)
    8c44:	|                     jsr 6bc <get2bytes>
    8c4a:	|                     addq.l #4,sp
    8c4c:	|                     move.l d0,74(sp)

	if (total <= 0) {
    8c50:	|                 /-- bgt.s 8c66 <loadSpriteBank+0xae>
		KPrintF("loadSpriteBank: No sprites in bank or invalid sprite bank file\n");
    8c52:	|                 |   pea 18f2c <PutChar+0x12e2>
    8c58:	|                 |   jsr 17176 <KPrintF>
    8c5e:	|                 |   addq.l #4,sp
		return FALSE;
    8c60:	|                 |   clr.w d0
    8c62:	+-----------------|-- bra.w 8fc2 <loadSpriteBank+0x40a>
	}
	if (loadhere->type > 3) {
    8c66:	|                 \-> movea.l 112(sp),a0
    8c6a:	|                     move.l 4(a0),d0
    8c6e:	|                     moveq #3,d1
    8c70:	|                     cmp.l d0,d1
    8c72:	|                 /-- bge.s 8c88 <loadSpriteBank+0xd0>
		KPrintF("loadSpriteBank: Unsupported sprite bank file format\n");
    8c74:	|                 |   pea 18f6c <PutChar+0x1322>
    8c7a:	|                 |   jsr 17176 <KPrintF>
    8c80:	|                 |   addq.l #4,sp
		return FALSE;
    8c82:	|                 |   clr.w d0
    8c84:	+-----------------|-- bra.w 8fc2 <loadSpriteBank+0x40a>
	}

	loadhere->total = total;
    8c88:	|                 \-> movea.l 112(sp),a0
    8c8c:	|                     move.l 74(sp),(a0)
	loadhere->sprites = AllocVec(sizeof(struct sprite) * total, MEMF_ANY);
    8c90:	|                     move.l 74(sp),d1
    8c94:	|                     move.l d1,d0
    8c96:	|                     lsl.l #3,d0
    8c98:	|                     sub.l d1,d0
    8c9a:	|                     add.l d0,d0
    8c9c:	|                     add.l d0,d0
    8c9e:	|                     move.l d0,70(sp)
    8ca2:	|                     clr.l 66(sp)
    8ca6:	|                     move.l 1c85c <SysBase>,d0
    8cac:	|                     movea.l d0,a6
    8cae:	|                     move.l 70(sp),d0
    8cb2:	|                     move.l 66(sp),d1
    8cb6:	|                     jsr -684(a6)
    8cba:	|                     move.l d0,62(sp)
    8cbe:	|                     move.l 62(sp),d0
    8cc2:	|                     movea.l 112(sp),a0
    8cc6:	|                     move.l d0,8(a0)
	if (!loadhere->sprites) return FALSE;	
    8cca:	|                     movea.l 112(sp),a0
    8cce:	|                     move.l 8(a0),d0
    8cd2:	|                 /-- bne.s 8cda <loadSpriteBank+0x122>
    8cd4:	|                 |   clr.w d0
    8cd6:	+-----------------|-- bra.w 8fc2 <loadSpriteBank+0x40a>
	
	startIndex = 1;
    8cda:	|                 \-> moveq #1,d0
    8cdc:	|                     move.l d0,90(sp)

	for (i = 0; i < total; i++) {
    8ce0:	|                     clr.l 100(sp)
    8ce4:	|     /-------------- bra.w 8fae <loadSpriteBank+0x3f6>
		UWORD width = get2bytes(bigDataFile);
    8ce8:	|  /--|-------------> move.l 1c844 <bigDataFile>,d0
    8cee:	|  |  |               move.l d0,-(sp)
    8cf0:	|  |  |               jsr 6bc <get2bytes>
    8cf6:	|  |  |               addq.l #4,sp
    8cf8:	|  |  |               move.w d0,60(sp)
		loadhere->sprites[i].width = width;
    8cfc:	|  |  |               movea.l 112(sp),a0
    8d00:	|  |  |               movea.l 8(a0),a0
    8d04:	|  |  |               move.l 100(sp),d1
    8d08:	|  |  |               move.l d1,d0
    8d0a:	|  |  |               lsl.l #3,d0
    8d0c:	|  |  |               sub.l d1,d0
    8d0e:	|  |  |               add.l d0,d0
    8d10:	|  |  |               add.l d0,d0
    8d12:	|  |  |               adda.l d0,a0
    8d14:	|  |  |               moveq #0,d0
    8d16:	|  |  |               move.w 60(sp),d0
    8d1a:	|  |  |               move.l d0,(a0)
		loadhere->sprites[i].height = get2bytes(bigDataFile);
    8d1c:	|  |  |               movea.l 1c844 <bigDataFile>,a1
    8d22:	|  |  |               movea.l 112(sp),a0
    8d26:	|  |  |               movea.l 8(a0),a0
    8d2a:	|  |  |               move.l 100(sp),d1
    8d2e:	|  |  |               move.l d1,d0
    8d30:	|  |  |               lsl.l #3,d0
    8d32:	|  |  |               sub.l d1,d0
    8d34:	|  |  |               add.l d0,d0
    8d36:	|  |  |               add.l d0,d0
    8d38:	|  |  |               lea (0,a0,d0.l),a2
    8d3c:	|  |  |               move.l a1,-(sp)
    8d3e:	|  |  |               jsr 6bc <get2bytes>
    8d44:	|  |  |               addq.l #4,sp
    8d46:	|  |  |               move.l d0,4(a2)
		loadhere->sprites[i].xhot = get2bytes(bigDataFile);
    8d4a:	|  |  |               movea.l 1c844 <bigDataFile>,a1
    8d50:	|  |  |               movea.l 112(sp),a0
    8d54:	|  |  |               movea.l 8(a0),a0
    8d58:	|  |  |               move.l 100(sp),d1
    8d5c:	|  |  |               move.l d1,d0
    8d5e:	|  |  |               lsl.l #3,d0
    8d60:	|  |  |               sub.l d1,d0
    8d62:	|  |  |               add.l d0,d0
    8d64:	|  |  |               add.l d0,d0
    8d66:	|  |  |               lea (0,a0,d0.l),a2
    8d6a:	|  |  |               move.l a1,-(sp)
    8d6c:	|  |  |               jsr 6bc <get2bytes>
    8d72:	|  |  |               addq.l #4,sp
    8d74:	|  |  |               move.l d0,8(a2)
		loadhere->sprites[i].yhot = get2bytes(bigDataFile);
    8d78:	|  |  |               movea.l 1c844 <bigDataFile>,a1
    8d7e:	|  |  |               movea.l 112(sp),a0
    8d82:	|  |  |               movea.l 8(a0),a0
    8d86:	|  |  |               move.l 100(sp),d1
    8d8a:	|  |  |               move.l d1,d0
    8d8c:	|  |  |               lsl.l #3,d0
    8d8e:	|  |  |               sub.l d1,d0
    8d90:	|  |  |               add.l d0,d0
    8d92:	|  |  |               add.l d0,d0
    8d94:	|  |  |               lea (0,a0,d0.l),a2
    8d98:	|  |  |               move.l a1,-(sp)
    8d9a:	|  |  |               jsr 6bc <get2bytes>
    8da0:	|  |  |               addq.l #4,sp
    8da2:	|  |  |               move.l d0,12(a2)

		UWORD size;
		
		switch( loadhere->type) 
    8da6:	|  |  |               movea.l 112(sp),a0
    8daa:	|  |  |               move.l 4(a0),d0
    8dae:	|  |  |               moveq #3,d1
    8db0:	|  |  |               cmp.l d0,d1
    8db2:	|  |  |     /-------- beq.w 8e4e <loadSpriteBank+0x296>
    8db6:	|  |  |     |         moveq #3,d1
    8db8:	|  |  |     |         cmp.l d0,d1
    8dba:	|  |  |  /--|-------- blt.w 8ee6 <loadSpriteBank+0x32e>
    8dbe:	|  |  |  |  |         moveq #1,d1
    8dc0:	|  |  |  |  |         cmp.l d0,d1
    8dc2:	|  |  |  |  |     /-- beq.s 8dce <loadSpriteBank+0x216>
    8dc4:	|  |  |  |  |     |   moveq #2,d1
    8dc6:	|  |  |  |  |     |   cmp.l d0,d1
    8dc8:	|  |  |  |  |  /--|-- beq.s 8dfa <loadSpriteBank+0x242>
    8dca:	|  |  |  +--|--|--|-- bra.w 8ee6 <loadSpriteBank+0x32e>
		{
			case 1: //Sprite
				size = 4*loadhere->sprites[i].height+8;
    8dce:	|  |  |  |  |  |  \-> movea.l 112(sp),a0
    8dd2:	|  |  |  |  |  |      movea.l 8(a0),a0
    8dd6:	|  |  |  |  |  |      move.l 100(sp),d1
    8dda:	|  |  |  |  |  |      move.l d1,d0
    8ddc:	|  |  |  |  |  |      lsl.l #3,d0
    8dde:	|  |  |  |  |  |      sub.l d1,d0
    8de0:	|  |  |  |  |  |      add.l d0,d0
    8de2:	|  |  |  |  |  |      add.l d0,d0
    8de4:	|  |  |  |  |  |      adda.l d0,a0
    8de6:	|  |  |  |  |  |      move.l 4(a0),d0
    8dea:	|  |  |  |  |  |      addq.l #2,d0
    8dec:	|  |  |  |  |  |      move.l d0,d0
    8dee:	|  |  |  |  |  |      add.w d0,d0
    8df0:	|  |  |  |  |  |      add.w d0,d0
    8df2:	|  |  |  |  |  |      move.w d0,98(sp)
				break;
    8df6:	|  |  |  +--|--|----- bra.w 8ee6 <loadSpriteBank+0x32e>
			case 2: //Bob
				size = loadhere->sprites[i].width / 8 * loadhere->sprites[i].height * 6;
    8dfa:	|  |  |  |  |  \----> movea.l 112(sp),a0
    8dfe:	|  |  |  |  |         movea.l 8(a0),a0
    8e02:	|  |  |  |  |         move.l 100(sp),d1
    8e06:	|  |  |  |  |         move.l d1,d0
    8e08:	|  |  |  |  |         lsl.l #3,d0
    8e0a:	|  |  |  |  |         sub.l d1,d0
    8e0c:	|  |  |  |  |         add.l d0,d0
    8e0e:	|  |  |  |  |         add.l d0,d0
    8e10:	|  |  |  |  |         adda.l d0,a0
    8e12:	|  |  |  |  |         move.l (a0),d0
    8e14:	|  |  |  |  |     /-- bpl.s 8e18 <loadSpriteBank+0x260>
    8e16:	|  |  |  |  |     |   addq.l #7,d0
    8e18:	|  |  |  |  |     \-> asr.l #3,d0
    8e1a:	|  |  |  |  |         move.l d0,d2
    8e1c:	|  |  |  |  |         movea.l 112(sp),a0
    8e20:	|  |  |  |  |         movea.l 8(a0),a0
    8e24:	|  |  |  |  |         move.l 100(sp),d1
    8e28:	|  |  |  |  |         move.l d1,d0
    8e2a:	|  |  |  |  |         lsl.l #3,d0
    8e2c:	|  |  |  |  |         sub.l d1,d0
    8e2e:	|  |  |  |  |         add.l d0,d0
    8e30:	|  |  |  |  |         add.l d0,d0
    8e32:	|  |  |  |  |         adda.l d0,a0
    8e34:	|  |  |  |  |         move.l 4(a0),d0
    8e38:	|  |  |  |  |         move.l d0,d0
    8e3a:	|  |  |  |  |         move.w d2,d1
    8e3c:	|  |  |  |  |         muls.w d0,d1
    8e3e:	|  |  |  |  |         move.w d1,d0
    8e40:	|  |  |  |  |         add.w d0,d0
    8e42:	|  |  |  |  |         add.w d1,d0
    8e44:	|  |  |  |  |         add.w d0,d0
    8e46:	|  |  |  |  |         move.w d0,98(sp)
				break;
    8e4a:	|  |  |  +--|-------- bra.w 8ee6 <loadSpriteBank+0x32e>
			case 3: //Font
				UWORD widthextra = loadhere->sprites[i].width % 16 > 0 ? 2 : 0;
    8e4e:	|  |  |  |  \-------> movea.l 112(sp),a0
    8e52:	|  |  |  |            movea.l 8(a0),a0
    8e56:	|  |  |  |            move.l 100(sp),d1
    8e5a:	|  |  |  |            move.l d1,d0
    8e5c:	|  |  |  |            lsl.l #3,d0
    8e5e:	|  |  |  |            sub.l d1,d0
    8e60:	|  |  |  |            add.l d0,d0
    8e62:	|  |  |  |            add.l d0,d0
    8e64:	|  |  |  |            adda.l d0,a0
    8e66:	|  |  |  |            move.l (a0),d0
    8e68:	|  |  |  |            andi.l #-2147483633,d0
    8e6e:	|  |  |  |        /-- bpl.s 8e78 <loadSpriteBank+0x2c0>
    8e70:	|  |  |  |        |   subq.l #1,d0
    8e72:	|  |  |  |        |   moveq #-16,d1
    8e74:	|  |  |  |        |   or.l d1,d0
    8e76:	|  |  |  |        |   addq.l #1,d0
    8e78:	|  |  |  |        \-> tst.l d0
    8e7a:	|  |  |  |     /----- ble.s 8e80 <loadSpriteBank+0x2c8>
    8e7c:	|  |  |  |     |      moveq #2,d0
    8e7e:	|  |  |  |     |  /-- bra.s 8e82 <loadSpriteBank+0x2ca>
    8e80:	|  |  |  |     \--|-> clr.w d0
    8e82:	|  |  |  |        \-> move.w d0,58(sp)
				size = ((loadhere->sprites[i].width  / 16) * 2 + widthextra) * loadhere->sprites[i].height;
    8e86:	|  |  |  |            movea.l 112(sp),a0
    8e8a:	|  |  |  |            movea.l 8(a0),a0
    8e8e:	|  |  |  |            move.l 100(sp),d1
    8e92:	|  |  |  |            move.l d1,d0
    8e94:	|  |  |  |            lsl.l #3,d0
    8e96:	|  |  |  |            sub.l d1,d0
    8e98:	|  |  |  |            add.l d0,d0
    8e9a:	|  |  |  |            add.l d0,d0
    8e9c:	|  |  |  |            adda.l d0,a0
    8e9e:	|  |  |  |            move.l (a0),d0
    8ea0:	|  |  |  |            movea.l d0,a0
    8ea2:	|  |  |  |            cmpa.w #0,a0
    8ea6:	|  |  |  |        /-- bge.s 8eac <loadSpriteBank+0x2f4>
    8ea8:	|  |  |  |        |   lea 15(a0),a0
    8eac:	|  |  |  |        \-> move.l a0,d0
    8eae:	|  |  |  |            asr.l #4,d0
    8eb0:	|  |  |  |            add.l d0,d0
    8eb2:	|  |  |  |            move.l d0,d1
    8eb4:	|  |  |  |            moveq #0,d0
    8eb6:	|  |  |  |            move.w 58(sp),d0
    8eba:	|  |  |  |            add.l d1,d0
    8ebc:	|  |  |  |            move.l d0,d2
    8ebe:	|  |  |  |            movea.l 112(sp),a0
    8ec2:	|  |  |  |            movea.l 8(a0),a0
    8ec6:	|  |  |  |            move.l 100(sp),d1
    8eca:	|  |  |  |            move.l d1,d0
    8ecc:	|  |  |  |            lsl.l #3,d0
    8ece:	|  |  |  |            sub.l d1,d0
    8ed0:	|  |  |  |            add.l d0,d0
    8ed2:	|  |  |  |            add.l d0,d0
    8ed4:	|  |  |  |            adda.l d0,a0
    8ed6:	|  |  |  |            move.l 4(a0),d0
    8eda:	|  |  |  |            move.l d0,d0
    8edc:	|  |  |  |            move.w d2,d1
    8ede:	|  |  |  |            muls.w d0,d1
    8ee0:	|  |  |  |            move.w d1,98(sp)
				break;
    8ee4:	|  |  |  |            nop
		}

		loadhere->sprites[i].data = AllocVec(sizeof(UWORD) * size, MEMF_CHIP);
    8ee6:	|  |  |  \----------> moveq #0,d0
    8ee8:	|  |  |               move.w 98(sp),d0
    8eec:	|  |  |               add.l d0,d0
    8eee:	|  |  |               move.l d0,54(sp)
    8ef2:	|  |  |               moveq #2,d0
    8ef4:	|  |  |               move.l d0,50(sp)
    8ef8:	|  |  |               move.l 1c85c <SysBase>,d0
    8efe:	|  |  |               movea.l d0,a6
    8f00:	|  |  |               move.l 54(sp),d0
    8f04:	|  |  |               move.l 50(sp),d1
    8f08:	|  |  |               jsr -684(a6)
    8f0c:	|  |  |               move.l d0,46(sp)
    8f10:	|  |  |               movea.l 46(sp),a1
    8f14:	|  |  |               movea.l 112(sp),a0
    8f18:	|  |  |               movea.l 8(a0),a0
    8f1c:	|  |  |               move.l 100(sp),d1
    8f20:	|  |  |               move.l d1,d0
    8f22:	|  |  |               lsl.l #3,d0
    8f24:	|  |  |               sub.l d1,d0
    8f26:	|  |  |               add.l d0,d0
    8f28:	|  |  |               add.l d0,d0
    8f2a:	|  |  |               adda.l d0,a0
    8f2c:	|  |  |               move.l a1,24(a0)
		UWORD count = FRead(bigDataFile, loadhere->sprites[i].data, 2, size / 2);
    8f30:	|  |  |               move.l 1c844 <bigDataFile>,42(sp)
    8f38:	|  |  |               movea.l 112(sp),a0
    8f3c:	|  |  |               movea.l 8(a0),a0
    8f40:	|  |  |               move.l 100(sp),d1
    8f44:	|  |  |               move.l d1,d0
    8f46:	|  |  |               lsl.l #3,d0
    8f48:	|  |  |               sub.l d1,d0
    8f4a:	|  |  |               add.l d0,d0
    8f4c:	|  |  |               add.l d0,d0
    8f4e:	|  |  |               adda.l d0,a0
    8f50:	|  |  |               move.l 24(a0),38(sp)
    8f56:	|  |  |               moveq #2,d1
    8f58:	|  |  |               move.l d1,34(sp)
    8f5c:	|  |  |               move.w 98(sp),d0
    8f60:	|  |  |               lsr.w #1,d0
    8f62:	|  |  |               move.w d0,d0
    8f64:	|  |  |               andi.l #65535,d0
    8f6a:	|  |  |               move.l d0,30(sp)
    8f6e:	|  |  |               move.l 1c864 <DOSBase>,d0
    8f74:	|  |  |               movea.l d0,a6
    8f76:	|  |  |               move.l 42(sp),d1
    8f7a:	|  |  |               move.l 38(sp),d2
    8f7e:	|  |  |               move.l 34(sp),d3
    8f82:	|  |  |               move.l 30(sp),d4
    8f86:	|  |  |               jsr -324(a6)
    8f8a:	|  |  |               move.l d0,26(sp)
    8f8e:	|  |  |               move.l 26(sp),d0
    8f92:	|  |  |               move.w d0,24(sp)
		if (!count) {
    8f96:	|  |  |           /-- bne.s 8faa <loadSpriteBank+0x3f2>
			KPrintF("loadSpriteBank: Cannot read sprite Data from File\n");
    8f98:	|  |  |           |   pea 18fa1 <PutChar+0x1357>
    8f9e:	|  |  |           |   jsr 17176 <KPrintF>
    8fa4:	|  |  |           |   addq.l #4,sp
			return FALSE;
    8fa6:	|  |  |           |   clr.w d0
    8fa8:	+--|--|-----------|-- bra.s 8fc2 <loadSpriteBank+0x40a>
	for (i = 0; i < total; i++) {
    8faa:	|  |  |           \-> addq.l #1,100(sp)
    8fae:	|  |  \-------------> move.l 100(sp),d0
    8fb2:	|  |                  cmp.l 74(sp),d0
    8fb6:	|  \----------------- blt.w 8ce8 <loadSpriteBank+0x130>
		}
	}

	finishAccess ();
    8fba:	|                     jsr 6ce8 <finishAccess>

	return TRUE;
    8fc0:	|                     moveq #1,d0
}
    8fc2:	\-------------------> movem.l (sp)+,d2-d4/a2/a6
    8fc6:	                      lea 84(sp),sp
    8fca:	                      rts

00008fcc <scaleSprite>:

BOOL scaleSprite (struct sprite *single, struct onScreenPerson * thisPerson, BOOL mirror) 
{
    8fcc:	                   lea -16(sp),sp
    8fd0:	                   move.l 28(sp),d0
    8fd4:	                   move.w d0,d0
    8fd6:	                   move.w d0,2(sp)
	UWORD x =  (UWORD) thisPerson->x - single->xhot;
    8fda:	                   movea.l 24(sp),a0
    8fde:	                   move.l (a0),d0
    8fe0:	                   move.l d0,-(sp)
    8fe2:	                   jsr 17912 <__fixunssfsi>
    8fe8:	                   addq.l #4,sp
    8fea:	                   move.l d0,d0
    8fec:	                   movea.l 20(sp),a0
    8ff0:	                   move.l 8(a0),d1
    8ff4:	                   move.l d1,d1
    8ff6:	                   movea.w d0,a0
    8ff8:	                   suba.w d1,a0
    8ffa:	                   move.w a0,6(sp)
	UWORD y =  (UWORD) thisPerson->y - single->yhot;			
    8ffe:	                   movea.l 24(sp),a0
    9002:	                   move.l 4(a0),d0
    9006:	                   move.l d0,-(sp)
    9008:	                   jsr 17912 <__fixunssfsi>
    900e:	                   addq.l #4,sp
    9010:	                   move.l d0,d0
    9012:	                   movea.l 20(sp),a0
    9016:	                   move.l 12(a0),d1
    901a:	                   move.l d1,d1
    901c:	                   movea.w d0,a0
    901e:	                   suba.w d1,a0
    9020:	                   move.w a0,4(sp)

	CstScaleSprite( single, thisPerson, (WORD) x, (WORD) y,SCREEN);
    9024:	                   move.w 4(sp),d0
    9028:	                   movea.w d0,a1
    902a:	                   move.w 6(sp),d0
    902e:	                   movea.w d0,a0
    9030:	                   pea 1 <_start+0x1>
    9034:	                   move.l a1,-(sp)
    9036:	                   move.l a0,-(sp)
    9038:	                   move.l 36(sp),-(sp)
    903c:	                   move.l 36(sp),-(sp)
    9040:	                   jsr 2da8 <CstScaleSprite>
    9046:	                   lea 20(sp),sp

	UWORD x1, y1, x2, y2;

	if (thisPerson -> extra & EXTRA_FIXTOSCREEN) {
    904a:	                   movea.l 24(sp),a0
    904e:	                   move.l 118(a0),d0
    9052:	                   moveq #8,d1
    9054:	                   and.l d1,d0
    9056:	   /-------------- beq.w 9118 <scaleSprite+0x14c>
		if (single->xhot < 0)
    905a:	   |               movea.l 20(sp),a0
    905e:	   |               move.l 8(a0),d0
    9062:	   |  /----------- bpl.s 909a <scaleSprite+0xce>
			x1 = x - (int)(mirror ? single->width - single->xhot : single->xhot+1);
    9064:	   |  |            tst.w 2(sp)
    9068:	   |  |     /----- beq.s 9080 <scaleSprite+0xb4>
    906a:	   |  |     |      movea.l 20(sp),a0
    906e:	   |  |     |      move.l (a0),d0
    9070:	   |  |     |      move.l d0,d1
    9072:	   |  |     |      movea.l 20(sp),a0
    9076:	   |  |     |      move.l 8(a0),d0
    907a:	   |  |     |      move.l d0,d0
    907c:	   |  |     |      sub.w d0,d1
    907e:	   |  |     |  /-- bra.s 908e <scaleSprite+0xc2>
    9080:	   |  |     \--|-> movea.l 20(sp),a0
    9084:	   |  |        |   move.l 8(a0),d0
    9088:	   |  |        |   move.l d0,d0
    908a:	   |  |        |   move.w d0,d1
    908c:	   |  |        |   addq.w #1,d1
    908e:	   |  |        \-> movea.w 6(sp),a0
    9092:	   |  |            suba.w d1,a0
    9094:	   |  |            move.w a0,14(sp)
    9098:	   |  |  /-------- bra.s 90ce <scaleSprite+0x102>
		else
			x1 = x - (int)(mirror ? single->width - (single->xhot+1) : single->xhot);
    909a:	   |  \--|-------> tst.w 2(sp)
    909e:	   |     |  /----- beq.s 90ba <scaleSprite+0xee>
    90a0:	   |     |  |      movea.l 20(sp),a0
    90a4:	   |     |  |      move.l (a0),d0
    90a6:	   |     |  |      move.l d0,d1
    90a8:	   |     |  |      movea.l 20(sp),a0
    90ac:	   |     |  |      move.l 8(a0),d0
    90b0:	   |     |  |      move.l d0,d0
    90b2:	   |     |  |      sub.w d0,d1
    90b4:	   |     |  |      move.w d1,d0
    90b6:	   |     |  |      subq.w #1,d0
    90b8:	   |     |  |  /-- bra.s 90c4 <scaleSprite+0xf8>
    90ba:	   |     |  \--|-> movea.l 20(sp),a0
    90be:	   |     |     |   move.l 8(a0),d0
    90c2:	   |     |     |   move.l d0,d0
    90c4:	   |     |     \-> move.w 6(sp),d1
    90c8:	   |     |         sub.w d0,d1
    90ca:	   |     |         move.w d1,14(sp)
		
		y1 = y - (single->yhot - thisPerson->floaty);
    90ce:	   |     \-------> movea.l 24(sp),a0
    90d2:	   |               move.l 24(a0),d0
    90d6:	   |               move.l d0,d1
    90d8:	   |               movea.l 20(sp),a0
    90dc:	   |               move.l 12(a0),d0
    90e0:	   |               move.l d0,d0
    90e2:	   |               sub.w d0,d1
    90e4:	   |               movea.w 4(sp),a0
    90e8:	   |               adda.w d1,a0
    90ea:	   |               move.w a0,12(sp)
		x2 = x1 + single->width;
    90ee:	   |               movea.l 20(sp),a0
    90f2:	   |               move.l (a0),d0
    90f4:	   |               move.l d0,d0
    90f6:	   |               move.w 14(sp),d1
    90fa:	   |               add.w d0,d1
    90fc:	   |               move.w d1,10(sp)
		y2 = y1 + single->height;
    9100:	   |               movea.l 20(sp),a0
    9104:	   |               move.l 4(a0),d0
    9108:	   |               move.l d0,d0
    910a:	   |               movea.w 12(sp),a0
    910e:	   |               adda.w d0,a0
    9110:	   |               move.w a0,8(sp)
    9114:	/--|-------------- bra.w 91ea <scaleSprite+0x21e>
	} else {
		x -= cameraX;
    9118:	|  \-------------> move.l 1c916 <cameraX>,d0
    911e:	|                  move.l d0,d0
    9120:	|                  sub.w d0,6(sp)
		y -= cameraY;
    9124:	|                  move.l 1c91a <cameraY>,d0
    912a:	|                  move.l d0,d0
    912c:	|                  sub.w d0,4(sp)
		if (single->xhot < 0)
    9130:	|                  movea.l 20(sp),a0
    9134:	|                  move.l 8(a0),d0
    9138:	|     /----------- bpl.s 9170 <scaleSprite+0x1a4>
			x1 = x - (int)(mirror ? single->width - single->xhot : single->xhot+1);
    913a:	|     |            tst.w 2(sp)
    913e:	|     |     /----- beq.s 9156 <scaleSprite+0x18a>
    9140:	|     |     |      movea.l 20(sp),a0
    9144:	|     |     |      move.l (a0),d0
    9146:	|     |     |      move.l d0,d1
    9148:	|     |     |      movea.l 20(sp),a0
    914c:	|     |     |      move.l 8(a0),d0
    9150:	|     |     |      move.l d0,d0
    9152:	|     |     |      sub.w d0,d1
    9154:	|     |     |  /-- bra.s 9164 <scaleSprite+0x198>
    9156:	|     |     \--|-> movea.l 20(sp),a0
    915a:	|     |        |   move.l 8(a0),d0
    915e:	|     |        |   move.l d0,d0
    9160:	|     |        |   move.w d0,d1
    9162:	|     |        |   addq.w #1,d1
    9164:	|     |        \-> move.w 6(sp),d0
    9168:	|     |            sub.w d1,d0
    916a:	|     |            move.w d0,14(sp)
    916e:	|     |  /-------- bra.s 91a4 <scaleSprite+0x1d8>
		else
			x1 = x - (int)(mirror ? single->width - (single->xhot+1) : single->xhot);
    9170:	|     \--|-------> tst.w 2(sp)
    9174:	|        |  /----- beq.s 9190 <scaleSprite+0x1c4>
    9176:	|        |  |      movea.l 20(sp),a0
    917a:	|        |  |      move.l (a0),d0
    917c:	|        |  |      move.l d0,d1
    917e:	|        |  |      movea.l 20(sp),a0
    9182:	|        |  |      move.l 8(a0),d0
    9186:	|        |  |      move.l d0,d0
    9188:	|        |  |      sub.w d0,d1
    918a:	|        |  |      move.w d1,d0
    918c:	|        |  |      subq.w #1,d0
    918e:	|        |  |  /-- bra.s 919a <scaleSprite+0x1ce>
    9190:	|        |  \--|-> movea.l 20(sp),a0
    9194:	|        |     |   move.l 8(a0),d0
    9198:	|        |     |   move.l d0,d0
    919a:	|        |     \-> move.w 6(sp),d1
    919e:	|        |         sub.w d0,d1
    91a0:	|        |         move.w d1,14(sp)
		
		y1 = y - (single->yhot - thisPerson->floaty);
    91a4:	|        \-------> movea.l 24(sp),a0
    91a8:	|                  move.l 24(a0),d0
    91ac:	|                  move.l d0,d1
    91ae:	|                  movea.l 20(sp),a0
    91b2:	|                  move.l 12(a0),d0
    91b6:	|                  move.l d0,d0
    91b8:	|                  sub.w d0,d1
    91ba:	|                  movea.w 4(sp),a0
    91be:	|                  adda.w d1,a0
    91c0:	|                  move.w a0,12(sp)
		x2 = x1 + single->width;
    91c4:	|                  movea.l 20(sp),a0
    91c8:	|                  move.l (a0),d0
    91ca:	|                  move.l d0,d0
    91cc:	|                  move.w 14(sp),d1
    91d0:	|                  add.w d0,d1
    91d2:	|                  move.w d1,10(sp)
		y2 = y1 + single->height;
    91d6:	|                  movea.l 20(sp),a0
    91da:	|                  move.l 4(a0),d0
    91de:	|                  move.l d0,d0
    91e0:	|                  movea.w 12(sp),a0
    91e4:	|                  adda.w d0,a0
    91e6:	|                  move.w a0,8(sp)
	}

	if (input.mouseX >= x1 && input.mouseX <= x2 && input.mouseY >= y1 && input.mouseY <= y2) {
    91ea:	\----------------> move.l 1c818 <input+0xa>,d1
    91f0:	                   moveq #0,d0
    91f2:	                   move.w 14(sp),d0
    91f6:	                   cmp.l d1,d0
    91f8:	            /----- bgt.s 922e <scaleSprite+0x262>
    91fa:	            |      move.l 1c818 <input+0xa>,d1
    9200:	            |      moveq #0,d0
    9202:	            |      move.w 10(sp),d0
    9206:	            |      cmp.l d1,d0
    9208:	            +----- blt.s 922e <scaleSprite+0x262>
    920a:	            |      move.l 1c81c <input+0xe>,d1
    9210:	            |      moveq #0,d0
    9212:	            |      move.w 12(sp),d0
    9216:	            |      cmp.l d1,d0
    9218:	            +----- bgt.s 922e <scaleSprite+0x262>
    921a:	            |      move.l 1c81c <input+0xe>,d1
    9220:	            |      moveq #0,d0
    9222:	            |      move.w 8(sp),d0
    9226:	            |      cmp.l d1,d0
    9228:	            +----- blt.s 922e <scaleSprite+0x262>
		return TRUE;
    922a:	            |      moveq #1,d0
    922c:	            |  /-- bra.s 9230 <scaleSprite+0x264>
	}
	return FALSE;
    922e:	            \--|-> clr.w d0
    9230:	               \-> lea 16(sp),sp
    9234:	                   rts

00009236 <TF_abs>:

short int scaleHorizon = 75;
short int scaleDivide = 150;

int TF_abs (int a) {
	return (a > 0) ? a : -a;
    9236:	    move.l 4(sp),d0
    923a:	/-- bpl.s 923e <TF_abs+0x8>
    923c:	|   neg.l d0
}
    923e:	\-> rts

00009240 <addPerson>:


BOOL addPerson(int x, int y, int objNum, struct persona *p) {
    9240:	             lea -28(sp),sp
    9244:	             move.l a6,-(sp)
    9246:	             move.l d2,-(sp)
    struct onScreenPerson *newPerson = AllocVec(sizeof(struct onScreenPerson), MEMF_ANY);
    9248:	             move.l #132,28(sp)
    9250:	             clr.l 24(sp)
    9254:	             move.l 1c85c <SysBase>,d0
    925a:	             movea.l d0,a6
    925c:	             move.l 28(sp),d0
    9260:	             move.l 24(sp),d1
    9264:	             jsr -684(a6)
    9268:	             move.l d0,20(sp)
    926c:	             move.l 20(sp),d0
    9270:	             move.l d0,16(sp)
    if (!newPerson) return FALSE;
    9274:	         /-- bne.s 927c <addPerson+0x3c>
    9276:	         |   clr.w d0
    9278:	/--------|-- bra.w 94ac <addPerson+0x26c>

    // EASY STUFF
    newPerson->thisType = loadObjectType(objNum);
    927c:	|        \-> move.l 48(sp),-(sp)
    9280:	|            jsr d5a8 <loadObjectType>
    9286:	|            addq.l #4,sp
    9288:	|            movea.l 16(sp),a0
    928c:	|            move.l d0,114(a0)
    newPerson->scale = 1;
    9290:	|            movea.l 16(sp),a0
    9294:	|            move.l #1065353216,32(a0)
    newPerson->extra = 0;
    929c:	|            movea.l 16(sp),a0
    92a0:	|            clr.l 118(a0)
    newPerson->continueAfterWalking = NULL;
    92a4:	|            movea.l 16(sp),a0
    92a8:	|            clr.l 68(a0)
    moveAndScale(newPerson, x, y);
    92ac:	|            move.l 44(sp),-(sp)
    92b0:	|            jsr 175b2 <__floatsisf>
    92b6:	|            addq.l #4,sp
    92b8:	|            move.l d0,d2
    92ba:	|            move.l 40(sp),-(sp)
    92be:	|            jsr 175b2 <__floatsisf>
    92c4:	|            addq.l #4,sp
    92c6:	|            move.l d2,-(sp)
    92c8:	|            move.l d0,-(sp)
    92ca:	|            move.l 24(sp),-(sp)
    92ce:	|            jsr ad8e <moveAndScale>
    92d4:	|            lea 12(sp),sp
    newPerson->frameNum = 0;
    92d8:	|            movea.l 16(sp),a0
    92dc:	|            clr.l 84(a0)
    newPerson->walkToX = x;
    92e0:	|            movea.l 16(sp),a0
    92e4:	|            move.l 40(sp),40(a0)
    newPerson->walkToY = y;
    92ea:	|            movea.l 16(sp),a0
    92ee:	|            move.l 44(sp),44(a0)
    newPerson->walking = FALSE;
    92f4:	|            movea.l 16(sp),a0
    92f8:	|            clr.w 64(a0)
    newPerson->spinning = FALSE;
    92fc:	|            movea.l 16(sp),a0
    9300:	|            clr.w 66(a0)
    newPerson->show = TRUE;
    9304:	|            movea.l 16(sp),a0
    9308:	|            move.w #1,104(a0)
    newPerson->direction = 0;
    930e:	|            movea.l 16(sp),a0
    9312:	|            clr.l 106(a0)
    newPerson->angle = 180;
    9316:	|            movea.l 16(sp),a0
    931a:	|            move.l #180,92(a0)
    newPerson->wantAngle = 180;
    9322:	|            movea.l 16(sp),a0
    9326:	|            move.l #180,96(a0)
    newPerson->angleOffset = 0;
    932e:	|            movea.l 16(sp),a0
    9332:	|            clr.l 100(a0)
    newPerson->floaty = 0;
    9336:	|            movea.l 16(sp),a0
    933a:	|            clr.l 24(a0)
    newPerson->walkSpeed = newPerson->thisType->walkSpeed;
    933e:	|            movea.l 16(sp),a0
    9342:	|            movea.l 114(a0),a0
    9346:	|            move.l 24(a0),d0
    934a:	|            movea.l 16(sp),a0
    934e:	|            move.l d0,28(a0)
    newPerson->myAnim = NULL;
    9352:	|            movea.l 16(sp),a0
    9356:	|            clr.l 72(a0)
    newPerson->spinSpeed = newPerson->thisType->spinSpeed;
    935a:	|            movea.l 16(sp),a0
    935e:	|            movea.l 114(a0),a0
    9362:	|            move.l 32(a0),d0
    9366:	|            movea.l 16(sp),a0
    936a:	|            move.l d0,122(a0)
    newPerson->r = 0;
    936e:	|            movea.l 16(sp),a0
    9372:	|            clr.b 126(a0)
    newPerson->g = 0;
    9376:	|            movea.l 16(sp),a0
    937a:	|            clr.b 127(a0)
    newPerson->b = 0;
    937e:	|            movea.l 16(sp),a0
    9382:	|            clr.b 128(a0)
    newPerson->colourmix = 0;
    9386:	|            movea.l 16(sp),a0
    938a:	|            clr.b 129(a0)
    newPerson->transparency = 0;
    938e:	|            movea.l 16(sp),a0
    9392:	|            clr.b 130(a0)
    newPerson->myPersona = p;
    9396:	|            movea.l 16(sp),a0
    939a:	|            move.l 52(sp),80(a0)

    setFrames(newPerson, ANI_STAND);
    93a0:	|            clr.l -(sp)
    93a2:	|            move.l 20(sp),-(sp)
    93a6:	|            jsr 81e4 <setFrames>
    93ac:	|            addq.l #8,sp

    // HEIGHT (BASED ON 1st FRAME OF 1st ANIMATION... INC. SPECIAL CASES)
    int fNumSigned = p->animation[0]->frames[0].frameNum;
    93ae:	|            movea.l 52(sp),a0
    93b2:	|            movea.l (a0),a0
    93b4:	|            movea.l (a0),a0
    93b6:	|            movea.l 4(a0),a0
    93ba:	|            move.l (a0),12(sp)
    int fNum = fNumSigned < 0 ? fNumSigned * - 1 : 1;
    93be:	|     /----- bpl.s 93c8 <addPerson+0x188>
    93c0:	|     |      move.l 12(sp),d0
    93c4:	|     |      neg.l d0
    93c6:	|     |  /-- bra.s 93ca <addPerson+0x18a>
    93c8:	|     \--|-> moveq #1,d0
    93ca:	|        \-> move.l d0,8(sp)
    if (fNum >= p->animation[0]->theSprites->bank.total) {
    93ce:	|            movea.l 52(sp),a0
    93d2:	|            movea.l (a0),a0
    93d4:	|            movea.l (a0),a0
    93d6:	|            movea.l (a0),a0
    93d8:	|            move.l 8(a0),d0
    93dc:	|            cmp.l 8(sp),d0
    93e0:	|     /----- bgt.s 9412 <addPerson+0x1d2>
        if (fNumSigned < 0) {
    93e2:	|     |      tst.l 12(sp)
    93e6:	|     |  /-- bge.s 93f4 <addPerson+0x1b4>
            newPerson->height = 5;
    93e8:	|     |  |   movea.l 16(sp),a0
    93ec:	|     |  |   moveq #5,d0
    93ee:	|     |  |   move.l d0,20(a0)
    93f2:	|  /--|--|-- bra.s 943e <addPerson+0x1fe>
        } else {
            newPerson->height = p->animation[0]->theSprites->bank.sprites[0].yhot + 5;
    93f4:	|  |  |  \-> movea.l 52(sp),a0
    93f8:	|  |  |      movea.l (a0),a0
    93fa:	|  |  |      movea.l (a0),a0
    93fc:	|  |  |      movea.l (a0),a0
    93fe:	|  |  |      movea.l 16(a0),a0
    9402:	|  |  |      move.l 12(a0),d0
    9406:	|  |  |      addq.l #5,d0
    9408:	|  |  |      movea.l 16(sp),a0
    940c:	|  |  |      move.l d0,20(a0)
    9410:	|  +--|----- bra.s 943e <addPerson+0x1fe>
        }
    } else {
        newPerson->height = p->animation[0]->theSprites->bank.sprites[fNum].yhot + 5;
    9412:	|  |  \----> movea.l 52(sp),a0
    9416:	|  |         movea.l (a0),a0
    9418:	|  |         movea.l (a0),a0
    941a:	|  |         movea.l (a0),a0
    941c:	|  |         movea.l 16(a0),a0
    9420:	|  |         move.l 8(sp),d1
    9424:	|  |         move.l d1,d0
    9426:	|  |         lsl.l #3,d0
    9428:	|  |         sub.l d1,d0
    942a:	|  |         add.l d0,d0
    942c:	|  |         add.l d0,d0
    942e:	|  |         adda.l d0,a0
    9430:	|  |         move.l 12(a0),d0
    9434:	|  |         addq.l #5,d0
    9436:	|  |         movea.l 16(sp),a0
    943a:	|  |         move.l d0,20(a0)
    }

    // NOW ADD IT IN THE RIGHT PLACE
    struct onScreenPerson **changethat = &allPeople;
    943e:	|  \-------> move.l #116928,32(sp)

    while (((*changethat) != NULL) && ((*changethat)->y < y)) {
    9446:	|        /-- bra.s 9456 <addPerson+0x216>
        changethat = &((*changethat)->next);
    9448:	|     /--|-> movea.l 32(sp),a0
    944c:	|     |  |   move.l (a0),d0
    944e:	|     |  |   moveq #36,d1
    9450:	|     |  |   add.l d0,d1
    9452:	|     |  |   move.l d1,32(sp)
    while (((*changethat) != NULL) && ((*changethat)->y < y)) {
    9456:	|     |  \-> movea.l 32(sp),a0
    945a:	|     |      move.l (a0),d0
    945c:	|     |  /-- beq.s 9484 <addPerson+0x244>
    945e:	|     |  |   movea.l 32(sp),a0
    9462:	|     |  |   movea.l (a0),a0
    9464:	|     |  |   move.l 4(a0),d2
    9468:	|     |  |   move.l 44(sp),-(sp)
    946c:	|     |  |   jsr 175b2 <__floatsisf>
    9472:	|     |  |   addq.l #4,sp
    9474:	|     |  |   move.l d0,-(sp)
    9476:	|     |  |   move.l d2,-(sp)
    9478:	|     |  |   jsr 177d8 <__ltsf2>
    947e:	|     |  |   addq.l #8,sp
    9480:	|     |  |   tst.l d0
    9482:	|     \--|-- blt.s 9448 <addPerson+0x208>
    }

    newPerson->next = (*changethat);
    9484:	|        \-> movea.l 32(sp),a0
    9488:	|            move.l (a0),d0
    948a:	|            movea.l 16(sp),a0
    948e:	|            move.l d0,36(a0)
    (*changethat) = newPerson;
    9492:	|            movea.l 32(sp),a0
    9496:	|            move.l 16(sp),(a0)

    return (BOOL) (newPerson->thisType != NULL);
    949a:	|            movea.l 16(sp),a0
    949e:	|            move.l 114(a0),d0
    94a2:	|            sne d0
    94a4:	|            neg.b d0
    94a6:	|            move.b d0,d0
    94a8:	|            andi.w #255,d0
}
    94ac:	\----------> move.l (sp)+,d2
    94ae:	             movea.l (sp)+,a6
    94b0:	             lea 28(sp),sp
    94b4:	             rts

000094b6 <animatePerson>:

void animatePerson (int obj, struct personaAnimation * fram) { // Set a new SINGLE animation
    94b6:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(obj);
    94b8:	       move.l 8(sp),-(sp)
    94bc:	       jsr a646 <findPerson>
    94c2:	       addq.l #4,sp
    94c4:	       move.l d0,(sp)
    if (moveMe) {
    94c6:	/----- beq.s 94fa <animatePerson+0x44>
        if (moveMe -> continueAfterWalking) abortFunction(moveMe -> continueAfterWalking);
    94c8:	|      movea.l (sp),a0
    94ca:	|      move.l 68(a0),d0
    94ce:	|  /-- beq.s 94e0 <animatePerson+0x2a>
    94d0:	|  |   movea.l (sp),a0
    94d2:	|  |   move.l 68(a0),d0
    94d6:	|  |   move.l d0,-(sp)
    94d8:	|  |   jsr 478c <abortFunction>
    94de:	|  |   addq.l #4,sp
        moveMe -> continueAfterWalking = NULL;
    94e0:	|  \-> movea.l (sp),a0
    94e2:	|      clr.l 68(a0)
        moveMe -> walking = FALSE;
    94e6:	|      movea.l (sp),a0
    94e8:	|      clr.w 64(a0)
        moveMe -> spinning = FALSE;
    94ec:	|      movea.l (sp),a0
    94ee:	|      clr.w 66(a0)
        moveMe -> myAnim = fram;
    94f2:	|      movea.l (sp),a0
    94f4:	|      move.l 12(sp),72(a0)
    }
}
    94fa:	\----> nop
    94fc:	       addq.l #4,sp
    94fe:	       rts

00009500 <animatePersonUsingPersona>:

void animatePersonUsingPersona (int obj, struct persona * per) { // Set a new costume
    9500:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(obj);
    9502:	       move.l 8(sp),-(sp)
    9506:	       jsr a646 <findPerson>
    950c:	       addq.l #4,sp
    950e:	       move.l d0,(sp)
    if (moveMe) {
    9510:	/----- beq.s 9552 <animatePersonUsingPersona+0x52>
        // if (moveMe -> continueAfterWalking) abortFunction (moveMe -> continueAfterWalking);
        // moveMe -> continueAfterWalking = NULL;
        // moveMe -> walking = false;
        moveMe -> spinning = FALSE;
    9512:	|      movea.l (sp),a0
    9514:	|      clr.w 66(a0)
        moveMe -> myPersona = per;
    9518:	|      movea.l (sp),a0
    951a:	|      move.l 12(sp),80(a0)
        rethinkAngle(moveMe);
    9520:	|      move.l (sp),-(sp)
    9522:	|      jsr af1c <rethinkAngle>
    9528:	|      addq.l #4,sp
        if (moveMe->walking) {
    952a:	|      movea.l (sp),a0
    952c:	|      move.w 64(a0),d0
    9530:	|  /-- beq.s 9544 <animatePersonUsingPersona+0x44>
            setFrames(moveMe, ANI_WALK);
    9532:	|  |   pea 1 <_start+0x1>
    9536:	|  |   move.l 4(sp),-(sp)
    953a:	|  |   jsr 81e4 <setFrames>
    9540:	|  |   addq.l #8,sp
        } else {
            setFrames(moveMe, ANI_STAND);
        }
    }
}
    9542:	+--|-- bra.s 9552 <animatePersonUsingPersona+0x52>
            setFrames(moveMe, ANI_STAND);
    9544:	|  \-> clr.l -(sp)
    9546:	|      move.l 4(sp),-(sp)
    954a:	|      jsr 81e4 <setFrames>
    9550:	|      addq.l #8,sp
}
    9552:	\----> nop
    9554:	       addq.l #4,sp
    9556:	       rts

00009558 <copyAnim>:
		thisPerson = thisPerson->next;
	}
}


struct personaAnimation * copyAnim (struct personaAnimation * orig) {
    9558:	             lea -36(sp),sp
    955c:	             move.l a6,-(sp)
	int num = orig -> numFrames;
    955e:	             movea.l 44(sp),a0
    9562:	             move.l 8(a0),32(sp)


	struct personaAnimation * newAnim	= AllocVec(sizeof( struct personaAnimation), MEMF_ANY);
    9568:	             moveq #12,d0
    956a:	             move.l d0,28(sp)
    956e:	             clr.l 24(sp)
    9572:	             move.l 1c85c <SysBase>,d0
    9578:	             movea.l d0,a6
    957a:	             move.l 28(sp),d0
    957e:	             move.l 24(sp),d1
    9582:	             jsr -684(a6)
    9586:	             move.l d0,20(sp)
    958a:	             move.l 20(sp),d0
    958e:	             move.l d0,16(sp)
	if (!(newAnim)) {
    9592:	         /-- bne.s 95a8 <copyAnim+0x50>
		KPrintF("copyAnim: Cannot allocate memory");
    9594:	         |   pea 18fd4 <PutChar+0x138a>
    959a:	         |   jsr 17176 <KPrintF>
    95a0:	         |   addq.l #4,sp
		return NULL;
    95a2:	         |   moveq #0,d0
    95a4:	/--------|-- bra.w 96fa <copyAnim+0x1a2>
	}

	// Copy the easy bits...
	newAnim -> theSprites		= orig -> theSprites;
    95a8:	|        \-> movea.l 44(sp),a0
    95ac:	|            move.l (a0),d0
    95ae:	|            movea.l 16(sp),a0
    95b2:	|            move.l d0,(a0)
	newAnim -> theSprites ->timesUsed++;
    95b4:	|            movea.l 16(sp),a0
    95b8:	|            movea.l (a0),a0
    95ba:	|            move.l 4(a0),d0
    95be:	|            addq.l #1,d0
    95c0:	|            move.l d0,4(a0)
	newAnim -> numFrames		= num;
    95c4:	|            movea.l 16(sp),a0
    95c8:	|            move.l 32(sp),8(a0)

	if (num) {
    95ce:	|  /-------- beq.w 96ee <copyAnim+0x196>

		// Argh! Frames! We need a whole NEW array of animFrame structures...

		newAnim->frames = AllocVec(sizeof(struct animFrame) * num, MEMF_ANY);
    95d2:	|  |         move.l 32(sp),d1
    95d6:	|  |         move.l d1,d0
    95d8:	|  |         add.l d0,d0
    95da:	|  |         add.l d1,d0
    95dc:	|  |         add.l d0,d0
    95de:	|  |         add.l d0,d0
    95e0:	|  |         move.l d0,12(sp)
    95e4:	|  |         clr.l 8(sp)
    95e8:	|  |         move.l 1c85c <SysBase>,d0
    95ee:	|  |         movea.l d0,a6
    95f0:	|  |         move.l 12(sp),d0
    95f4:	|  |         move.l 8(sp),d1
    95f8:	|  |         jsr -684(a6)
    95fc:	|  |         move.l d0,4(sp)
    9600:	|  |         move.l 4(sp),d0
    9604:	|  |         movea.l 16(sp),a0
    9608:	|  |         move.l d0,4(a0)
		if (!newAnim->frames) {
    960c:	|  |         movea.l 16(sp),a0
    9610:	|  |         move.l 4(a0),d0
    9614:	|  |     /-- bne.s 962a <copyAnim+0xd2>
			KPrintF("copyAnim: Cannot allocate memory");
    9616:	|  |     |   pea 18fd4 <PutChar+0x138a>
    961c:	|  |     |   jsr 17176 <KPrintF>
    9622:	|  |     |   addq.l #4,sp
			return NULL;
    9624:	|  |     |   moveq #0,d0
    9626:	+--|-----|-- bra.w 96fa <copyAnim+0x1a2>
		}

		for (int a = 0; a < num; a ++) {
    962a:	|  |     \-> clr.l 36(sp)
    962e:	|  |     /-- bra.w 96e0 <copyAnim+0x188>
			newAnim -> frames[a].frameNum = orig -> frames[a].frameNum;
    9632:	|  |  /--|-> movea.l 44(sp),a0
    9636:	|  |  |  |   movea.l 4(a0),a0
    963a:	|  |  |  |   move.l 36(sp),d1
    963e:	|  |  |  |   move.l d1,d0
    9640:	|  |  |  |   add.l d0,d0
    9642:	|  |  |  |   add.l d1,d0
    9644:	|  |  |  |   add.l d0,d0
    9646:	|  |  |  |   add.l d0,d0
    9648:	|  |  |  |   lea (0,a0,d0.l),a1
    964c:	|  |  |  |   movea.l 16(sp),a0
    9650:	|  |  |  |   movea.l 4(a0),a0
    9654:	|  |  |  |   move.l 36(sp),d1
    9658:	|  |  |  |   move.l d1,d0
    965a:	|  |  |  |   add.l d0,d0
    965c:	|  |  |  |   add.l d1,d0
    965e:	|  |  |  |   add.l d0,d0
    9660:	|  |  |  |   add.l d0,d0
    9662:	|  |  |  |   adda.l d0,a0
    9664:	|  |  |  |   move.l (a1),d0
    9666:	|  |  |  |   move.l d0,(a0)
			newAnim -> frames[a].howMany = orig -> frames[a].howMany;
    9668:	|  |  |  |   movea.l 44(sp),a0
    966c:	|  |  |  |   movea.l 4(a0),a0
    9670:	|  |  |  |   move.l 36(sp),d1
    9674:	|  |  |  |   move.l d1,d0
    9676:	|  |  |  |   add.l d0,d0
    9678:	|  |  |  |   add.l d1,d0
    967a:	|  |  |  |   add.l d0,d0
    967c:	|  |  |  |   add.l d0,d0
    967e:	|  |  |  |   lea (0,a0,d0.l),a1
    9682:	|  |  |  |   movea.l 16(sp),a0
    9686:	|  |  |  |   movea.l 4(a0),a0
    968a:	|  |  |  |   move.l 36(sp),d1
    968e:	|  |  |  |   move.l d1,d0
    9690:	|  |  |  |   add.l d0,d0
    9692:	|  |  |  |   add.l d1,d0
    9694:	|  |  |  |   add.l d0,d0
    9696:	|  |  |  |   add.l d0,d0
    9698:	|  |  |  |   adda.l d0,a0
    969a:	|  |  |  |   move.l 4(a1),d0
    969e:	|  |  |  |   move.l d0,4(a0)
			newAnim -> frames[a].noise = orig -> frames[a].noise;
    96a2:	|  |  |  |   movea.l 44(sp),a0
    96a6:	|  |  |  |   movea.l 4(a0),a0
    96aa:	|  |  |  |   move.l 36(sp),d1
    96ae:	|  |  |  |   move.l d1,d0
    96b0:	|  |  |  |   add.l d0,d0
    96b2:	|  |  |  |   add.l d1,d0
    96b4:	|  |  |  |   add.l d0,d0
    96b6:	|  |  |  |   add.l d0,d0
    96b8:	|  |  |  |   lea (0,a0,d0.l),a1
    96bc:	|  |  |  |   movea.l 16(sp),a0
    96c0:	|  |  |  |   movea.l 4(a0),a0
    96c4:	|  |  |  |   move.l 36(sp),d1
    96c8:	|  |  |  |   move.l d1,d0
    96ca:	|  |  |  |   add.l d0,d0
    96cc:	|  |  |  |   add.l d1,d0
    96ce:	|  |  |  |   add.l d0,d0
    96d0:	|  |  |  |   add.l d0,d0
    96d2:	|  |  |  |   adda.l d0,a0
    96d4:	|  |  |  |   move.l 8(a1),d0
    96d8:	|  |  |  |   move.l d0,8(a0)
		for (int a = 0; a < num; a ++) {
    96dc:	|  |  |  |   addq.l #1,36(sp)
    96e0:	|  |  |  \-> move.l 36(sp),d0
    96e4:	|  |  |      cmp.l 32(sp),d0
    96e8:	|  |  \----- blt.w 9632 <copyAnim+0xda>
    96ec:	|  |     /-- bra.s 96f6 <copyAnim+0x19e>
		}
	} else {
		newAnim -> frames = NULL;
    96ee:	|  \-----|-> movea.l 16(sp),a0
    96f2:	|        |   clr.l 4(a0)
	}

	return newAnim;
    96f6:	|        \-> move.l 16(sp),d0
}
    96fa:	\----------> movea.l (sp)+,a6
    96fc:	             lea 36(sp),sp
    9700:	             rts

00009702 <createPersonaAnim>:


struct personaAnimation * createPersonaAnim (int num, struct variableStack **stacky) {
    9702:	                lea -44(sp),sp
    9706:	                move.l a6,-(sp)
    9708:	                move.l d2,-(sp)
	struct personaAnimation * newP = AllocVec( sizeof(struct personaAnimation), MEMF_ANY);
    970a:	                moveq #12,d0
    970c:	                move.l d0,40(sp)
    9710:	                clr.l 36(sp)
    9714:	                move.l 1c85c <SysBase>,d0
    971a:	                movea.l d0,a6
    971c:	                move.l 40(sp),d0
    9720:	                move.l 36(sp),d1
    9724:	                jsr -684(a6)
    9728:	                move.l d0,32(sp)
    972c:	                move.l 32(sp),d0
    9730:	                move.l d0,28(sp)
	if( !newP) {
    9734:	            /-- bne.s 974a <createPersonaAnim+0x48>
		KPrintF("createPersonaAnim: Cannot allocate memory");
    9736:	            |   pea 18ff5 <PutChar+0x13ab>
    973c:	            |   jsr 17176 <KPrintF>
    9742:	            |   addq.l #4,sp
		return NULL;
    9744:	            |   moveq #0,d0
    9746:	/-----------|-- bra.w 991a <createPersonaAnim+0x218>
	}

	newP -> numFrames = num;
    974a:	|           \-> movea.l 28(sp),a0
    974e:	|               move.l 56(sp),8(a0)
	newP -> frames = AllocVec( sizeof( struct animFrame) * num,MEMF_ANY);
    9754:	|               move.l 56(sp),d1
    9758:	|               move.l d1,d0
    975a:	|               add.l d0,d0
    975c:	|               add.l d1,d0
    975e:	|               add.l d0,d0
    9760:	|               add.l d0,d0
    9762:	|               move.l d0,24(sp)
    9766:	|               clr.l 20(sp)
    976a:	|               move.l 1c85c <SysBase>,d0
    9770:	|               movea.l d0,a6
    9772:	|               move.l 24(sp),d0
    9776:	|               move.l 20(sp),d1
    977a:	|               jsr -684(a6)
    977e:	|               move.l d0,16(sp)
    9782:	|               move.l 16(sp),d0
    9786:	|               movea.l 28(sp),a0
    978a:	|               move.l d0,4(a0)
	if( !newP->frames) {
    978e:	|               movea.l 28(sp),a0
    9792:	|               move.l 4(a0),d0
    9796:	|           /-- bne.s 97ac <createPersonaAnim+0xaa>
		KPrintF("createPersonaAnim: Cannot allocate memory");
    9798:	|           |   pea 18ff5 <PutChar+0x13ab>
    979e:	|           |   jsr 17176 <KPrintF>
    97a4:	|           |   addq.l #4,sp
		return NULL;
    97a6:	|           |   moveq #0,d0
    97a8:	+-----------|-- bra.w 991a <createPersonaAnim+0x218>
	}

	int a = num, frameNum, howMany;
    97ac:	|           \-> move.l 56(sp),48(sp)

	struct variableStack *tmp = *stacky;
    97b2:	|               movea.l 60(sp),a0
    97b6:	|               move.l (a0),44(sp)
	while (a) {
    97ba:	|     /-------- bra.w 990e <createPersonaAnim+0x20c>
		a --;
    97be:	|  /--|-------> subq.l #1,48(sp)
		newP -> frames[a].noise = 0;
    97c2:	|  |  |         movea.l 28(sp),a0
    97c6:	|  |  |         movea.l 4(a0),a0
    97ca:	|  |  |         move.l 48(sp),d1
    97ce:	|  |  |         move.l d1,d0
    97d0:	|  |  |         add.l d0,d0
    97d2:	|  |  |         add.l d1,d0
    97d4:	|  |  |         add.l d0,d0
    97d6:	|  |  |         add.l d0,d0
    97d8:	|  |  |         adda.l d0,a0
    97da:	|  |  |         clr.l 8(a0)
		if ( tmp->thisVar.varType == SVT_FILE) {
    97de:	|  |  |         movea.l 44(sp),a0
    97e2:	|  |  |         move.l (a0),d0
    97e4:	|  |  |         moveq #5,d1
    97e6:	|  |  |         cmp.l d0,d1
    97e8:	|  |  |     /-- bne.s 9814 <createPersonaAnim+0x112>
			newP -> frames[a].noise = tmp -> thisVar.varData.intValue;
    97ea:	|  |  |     |   movea.l 28(sp),a0
    97ee:	|  |  |     |   movea.l 4(a0),a0
    97f2:	|  |  |     |   move.l 48(sp),d1
    97f6:	|  |  |     |   move.l d1,d0
    97f8:	|  |  |     |   add.l d0,d0
    97fa:	|  |  |     |   add.l d1,d0
    97fc:	|  |  |     |   add.l d0,d0
    97fe:	|  |  |     |   add.l d0,d0
    9800:	|  |  |     |   lea (0,a0,d0.l),a1
    9804:	|  |  |     |   movea.l 44(sp),a0
    9808:	|  |  |     |   move.l 4(a0),d0
    980c:	|  |  |     |   move.l d0,8(a1)
    9810:	|  |  |  /--|-- bra.w 98bc <createPersonaAnim+0x1ba>
		} else if ( tmp -> thisVar.varType == SVT_FUNC) {
    9814:	|  |  |  |  \-> movea.l 44(sp),a0
    9818:	|  |  |  |      move.l (a0),d0
    981a:	|  |  |  |      moveq #2,d1
    981c:	|  |  |  |      cmp.l d0,d1
    981e:	|  |  |  |  /-- bne.s 984a <createPersonaAnim+0x148>
			newP -> frames[a].noise = - tmp -> thisVar.varData.intValue;
    9820:	|  |  |  |  |   movea.l 44(sp),a0
    9824:	|  |  |  |  |   move.l 4(a0),d2
    9828:	|  |  |  |  |   movea.l 28(sp),a0
    982c:	|  |  |  |  |   movea.l 4(a0),a0
    9830:	|  |  |  |  |   move.l 48(sp),d1
    9834:	|  |  |  |  |   move.l d1,d0
    9836:	|  |  |  |  |   add.l d0,d0
    9838:	|  |  |  |  |   add.l d1,d0
    983a:	|  |  |  |  |   add.l d0,d0
    983c:	|  |  |  |  |   add.l d0,d0
    983e:	|  |  |  |  |   adda.l d0,a0
    9840:	|  |  |  |  |   move.l d2,d0
    9842:	|  |  |  |  |   neg.l d0
    9844:	|  |  |  |  |   move.l d0,8(a0)
    9848:	|  |  |  +--|-- bra.s 98bc <createPersonaAnim+0x1ba>
		} else if ( tmp -> thisVar.varType == SVT_STACK) {
    984a:	|  |  |  |  \-> movea.l 44(sp),a0
    984e:	|  |  |  |      move.l (a0),d0
    9850:	|  |  |  |      moveq #6,d1
    9852:	|  |  |  |      cmp.l d0,d1
    9854:	|  |  |  |  /-- bne.s 989c <createPersonaAnim+0x19a>
			getValueType (&frameNum, SVT_INT, &tmp->thisVar.varData.theStack -> first -> thisVar);
    9856:	|  |  |  |  |   movea.l 44(sp),a0
    985a:	|  |  |  |  |   movea.l 4(a0),a0
    985e:	|  |  |  |  |   move.l (a0),d0
    9860:	|  |  |  |  |   move.l d0,-(sp)
    9862:	|  |  |  |  |   pea 1 <_start+0x1>
    9866:	|  |  |  |  |   lea 20(sp),a0
    986a:	|  |  |  |  |   move.l a0,-(sp)
    986c:	|  |  |  |  |   jsr 1474e <getValueType>
    9872:	|  |  |  |  |   lea 12(sp),sp
			getValueType (&howMany, SVT_INT, &tmp -> thisVar.varData.theStack -> first -> next -> thisVar);
    9876:	|  |  |  |  |   movea.l 44(sp),a0
    987a:	|  |  |  |  |   movea.l 4(a0),a0
    987e:	|  |  |  |  |   movea.l (a0),a0
    9880:	|  |  |  |  |   move.l 8(a0),d0
    9884:	|  |  |  |  |   move.l d0,-(sp)
    9886:	|  |  |  |  |   pea 1 <_start+0x1>
    988a:	|  |  |  |  |   lea 16(sp),a0
    988e:	|  |  |  |  |   move.l a0,-(sp)
    9890:	|  |  |  |  |   jsr 1474e <getValueType>
    9896:	|  |  |  |  |   lea 12(sp),sp
    989a:	|  |  |  +--|-- bra.s 98bc <createPersonaAnim+0x1ba>
		} else {
			getValueType (&frameNum, SVT_INT, &tmp -> thisVar);
    989c:	|  |  |  |  \-> move.l 44(sp),d0
    98a0:	|  |  |  |      move.l d0,-(sp)
    98a2:	|  |  |  |      pea 1 <_start+0x1>
    98a6:	|  |  |  |      lea 20(sp),a0
    98aa:	|  |  |  |      move.l a0,-(sp)
    98ac:	|  |  |  |      jsr 1474e <getValueType>
    98b2:	|  |  |  |      lea 12(sp),sp
			howMany = 1;
    98b6:	|  |  |  |      moveq #1,d0
    98b8:	|  |  |  |      move.l d0,8(sp)
		}
		trimStack (stacky);
    98bc:	|  |  |  \----> move.l 60(sp),-(sp)
    98c0:	|  |  |         jsr 150d2 <trimStack>
    98c6:	|  |  |         addq.l #4,sp
		newP -> frames[a].frameNum = frameNum;
    98c8:	|  |  |         movea.l 28(sp),a0
    98cc:	|  |  |         movea.l 4(a0),a0
    98d0:	|  |  |         move.l 48(sp),d1
    98d4:	|  |  |         move.l d1,d0
    98d6:	|  |  |         add.l d0,d0
    98d8:	|  |  |         add.l d1,d0
    98da:	|  |  |         add.l d0,d0
    98dc:	|  |  |         add.l d0,d0
    98de:	|  |  |         adda.l d0,a0
    98e0:	|  |  |         move.l 12(sp),d0
    98e4:	|  |  |         move.l d0,(a0)
		newP -> frames[a].howMany = howMany;
    98e6:	|  |  |         movea.l 28(sp),a0
    98ea:	|  |  |         movea.l 4(a0),a0
    98ee:	|  |  |         move.l 48(sp),d1
    98f2:	|  |  |         move.l d1,d0
    98f4:	|  |  |         add.l d0,d0
    98f6:	|  |  |         add.l d1,d0
    98f8:	|  |  |         add.l d0,d0
    98fa:	|  |  |         add.l d0,d0
    98fc:	|  |  |         adda.l d0,a0
    98fe:	|  |  |         move.l 8(sp),d0
    9902:	|  |  |         move.l d0,4(a0)
		tmp = *stacky;
    9906:	|  |  |         movea.l 60(sp),a0
    990a:	|  |  |         move.l (a0),44(sp)
	while (a) {
    990e:	|  |  \-------> tst.l 48(sp)
    9912:	|  \----------- bne.w 97be <createPersonaAnim+0xbc>
	}

	return newP;
    9916:	|               move.l 28(sp),d0
}
    991a:	\-------------> move.l (sp)+,d2
    991c:	                movea.l (sp)+,a6
    991e:	                lea 44(sp),sp
    9922:	                rts

00009924 <deleteAnim>:

void deleteAnim (struct personaAnimation * orig) {
    9924:	       lea -12(sp),sp
    9928:	       move.l a6,-(sp)

	if(orig->theSprites)
    992a:	       movea.l 20(sp),a0
    992e:	       move.l (a0),d0
    9930:	   /-- beq.s 995a <deleteAnim+0x36>
	{
		int timesused = --orig->theSprites->timesUsed;
    9932:	   |   movea.l 20(sp),a0
    9936:	   |   movea.l (a0),a0
    9938:	   |   move.l 4(a0),d0
    993c:	   |   subq.l #1,d0
    993e:	   |   move.l d0,4(a0)
    9942:	   |   move.l 4(a0),12(sp)
		
		if(!timesused)
    9948:	   +-- bne.s 995a <deleteAnim+0x36>
		{
			forgetSpriteBank( orig->theSprites);
    994a:	   |   movea.l 20(sp),a0
    994e:	   |   move.l (a0),d0
    9950:	   |   move.l d0,-(sp)
    9952:	   |   jsr 8a96 <forgetSpriteBank>
    9958:	   |   addq.l #4,sp
		}
	}			
	
	if (orig)
    995a:	   \-> tst.l 20(sp)
    995e:	/----- beq.s 999e <deleteAnim+0x7a>
	{
		if (orig -> numFrames) {
    9960:	|      movea.l 20(sp),a0
    9964:	|      move.l 8(a0),d0
    9968:	|  /-- beq.s 9984 <deleteAnim+0x60>
			FreeVec( orig->frames);
    996a:	|  |   movea.l 20(sp),a0
    996e:	|  |   move.l 4(a0),8(sp)
    9974:	|  |   move.l 1c85c <SysBase>,d0
    997a:	|  |   movea.l d0,a6
    997c:	|  |   movea.l 8(sp),a1
    9980:	|  |   jsr -690(a6)
		}
		FreeVec(orig);
    9984:	|  \-> move.l 20(sp),4(sp)
    998a:	|      move.l 1c85c <SysBase>,d0
    9990:	|      movea.l d0,a6
    9992:	|      movea.l 4(sp),a1
    9996:	|      jsr -690(a6)
		orig = NULL;
    999a:	|      clr.l 20(sp)
	}	
	
}
    999e:	\----> nop
    99a0:	       movea.l (sp)+,a6
    99a2:	       lea 12(sp),sp
    99a6:	       rts

000099a8 <doBorderStuff>:

BOOL doBorderStuff (struct onScreenPerson * moveMe) {
    99a8:	          lea -124(sp),sp
    99ac:	          movem.l d2-d7,-(sp)
    if (moveMe -> inPoly == moveMe -> walkToPoly) {
    99b0:	          movea.l 152(sp),a0
    99b4:	          move.l 56(a0),d1
    99b8:	          movea.l 152(sp),a0
    99bc:	          move.l 60(a0),d0
    99c0:	          cmp.l d1,d0
    99c2:	      /-- bne.s 99f2 <doBorderStuff+0x4a>
        moveMe -> inPoly = -1;
    99c4:	      |   movea.l 152(sp),a0
    99c8:	      |   moveq #-1,d0
    99ca:	      |   move.l d0,56(a0)
        moveMe -> thisStepX = moveMe -> walkToX;
    99ce:	      |   movea.l 152(sp),a0
    99d2:	      |   move.l 40(a0),d0
    99d6:	      |   movea.l 152(sp),a0
    99da:	      |   move.l d0,48(a0)
        moveMe -> thisStepY = moveMe -> walkToY;
    99de:	      |   movea.l 152(sp),a0
    99e2:	      |   move.l 44(a0),d0
    99e6:	      |   movea.l 152(sp),a0
    99ea:	      |   move.l d0,52(a0)
    99ee:	   /--|-- bra.w 9f58 <doBorderStuff+0x5b0>
    } else {
        // The section in which we need to be next...
        int newPoly = currentFloor -> matrix[moveMe -> inPoly][moveMe -> walkToPoly];
    99f2:	   |  \-> movea.l 1c978 <currentFloor>,a0
    99f8:	   |      move.l 16(a0),d1
    99fc:	   |      movea.l 152(sp),a0
    9a00:	   |      move.l 56(a0),d0
    9a04:	   |      add.l d0,d0
    9a06:	   |      add.l d0,d0
    9a08:	   |      movea.l d1,a0
    9a0a:	   |      adda.l d0,a0
    9a0c:	   |      move.l (a0),d1
    9a0e:	   |      movea.l 152(sp),a0
    9a12:	   |      move.l 60(a0),d0
    9a16:	   |      add.l d0,d0
    9a18:	   |      add.l d0,d0
    9a1a:	   |      movea.l d1,a0
    9a1c:	   |      adda.l d0,a0
    9a1e:	   |      move.l (a0),144(sp)
        if (newPoly == -1) return FALSE;
    9a22:	   |      moveq #-1,d0
    9a24:	   |      cmp.l 144(sp),d0
    9a28:	   |  /-- bne.s 9a30 <doBorderStuff+0x88>
    9a2a:	   |  |   clr.w d0
    9a2c:	/--|--|-- bra.w a058 <doBorderStuff+0x6b0>

        // Grab the index of the second matching corner...
        int ID, ID2;
        if (! getMatchingCorners (&(currentFloor -> polygon[moveMe -> inPoly]), &(currentFloor -> polygon[newPoly]), &ID, &ID2))
    9a30:	|  |  \-> movea.l 1c978 <currentFloor>,a0
    9a36:	|  |      move.l 12(a0),d1
    9a3a:	|  |      move.l 144(sp),d0
    9a3e:	|  |      lsl.l #3,d0
    9a40:	|  |      add.l d0,d1
    9a42:	|  |      movea.l 1c978 <currentFloor>,a0
    9a48:	|  |      movea.l 12(a0),a1
    9a4c:	|  |      movea.l 152(sp),a0
    9a50:	|  |      move.l 56(a0),d0
    9a54:	|  |      lsl.l #3,d0
    9a56:	|  |      add.l a1,d0
    9a58:	|  |      lea 40(sp),a0
    9a5c:	|  |      move.l a0,-(sp)
    9a5e:	|  |      lea 48(sp),a0
    9a62:	|  |      move.l a0,-(sp)
    9a64:	|  |      move.l d1,-(sp)
    9a66:	|  |      move.l d0,-(sp)
    9a68:	|  |      jsr 163f8 <getMatchingCorners>
    9a6e:	|  |      lea 16(sp),sp
    9a72:	|  |      tst.w d0
    9a74:	|  |  /-- bne.s 9a8a <doBorderStuff+0xe2>
		{
			KPrintF ("Not a valid floor plan!");
    9a76:	|  |  |   pea 1901f <PutChar+0x13d5>
    9a7c:	|  |  |   jsr 17176 <KPrintF>
    9a82:	|  |  |   addq.l #4,sp
            return FALSE;
    9a84:	|  |  |   clr.w d0
    9a86:	+--|--|-- bra.w a058 <doBorderStuff+0x6b0>
		}

        // Remember that we're walking to the new polygon...
        moveMe -> inPoly = newPoly;
    9a8a:	|  |  \-> movea.l 152(sp),a0
    9a8e:	|  |      move.l 144(sp),56(a0)

        // Calculate the destination position on the coincidental line...
        int x1 = moveMe -> x, y1 = moveMe -> y;
    9a94:	|  |      movea.l 152(sp),a0
    9a98:	|  |      move.l (a0),d0
    9a9a:	|  |      move.l d0,-(sp)
    9a9c:	|  |      jsr 1754a <__fixsfsi>
    9aa2:	|  |      addq.l #4,sp
    9aa4:	|  |      move.l d0,140(sp)
    9aa8:	|  |      movea.l 152(sp),a0
    9aac:	|  |      move.l 4(a0),d0
    9ab0:	|  |      move.l d0,-(sp)
    9ab2:	|  |      jsr 1754a <__fixsfsi>
    9ab8:	|  |      addq.l #4,sp
    9aba:	|  |      move.l d0,136(sp)
        int x2 = moveMe -> walkToX, y2 = moveMe -> walkToY;
    9abe:	|  |      movea.l 152(sp),a0
    9ac2:	|  |      move.l 40(a0),132(sp)
    9ac8:	|  |      movea.l 152(sp),a0
    9acc:	|  |      move.l 44(a0),128(sp)
        int x3 = currentFloor -> vertex[ID].x, y3 = currentFloor -> vertex[ID].y;
    9ad2:	|  |      movea.l 1c978 <currentFloor>,a0
    9ad8:	|  |      move.l 4(a0),d1
    9adc:	|  |      move.l 44(sp),d0
    9ae0:	|  |      lsl.l #3,d0
    9ae2:	|  |      movea.l d1,a0
    9ae4:	|  |      adda.l d0,a0
    9ae6:	|  |      move.l (a0),124(sp)
    9aea:	|  |      movea.l 1c978 <currentFloor>,a0
    9af0:	|  |      move.l 4(a0),d1
    9af4:	|  |      move.l 44(sp),d0
    9af8:	|  |      lsl.l #3,d0
    9afa:	|  |      movea.l d1,a0
    9afc:	|  |      adda.l d0,a0
    9afe:	|  |      move.l 4(a0),120(sp)
        int x4 = currentFloor -> vertex[ID2].x, y4 = currentFloor -> vertex[ID2].y;
    9b04:	|  |      movea.l 1c978 <currentFloor>,a0
    9b0a:	|  |      move.l 4(a0),d1
    9b0e:	|  |      move.l 40(sp),d0
    9b12:	|  |      lsl.l #3,d0
    9b14:	|  |      movea.l d1,a0
    9b16:	|  |      adda.l d0,a0
    9b18:	|  |      move.l (a0),116(sp)
    9b1c:	|  |      movea.l 1c978 <currentFloor>,a0
    9b22:	|  |      move.l 4(a0),d1
    9b26:	|  |      move.l 40(sp),d0
    9b2a:	|  |      lsl.l #3,d0
    9b2c:	|  |      movea.l d1,a0
    9b2e:	|  |      adda.l d0,a0
    9b30:	|  |      move.l 4(a0),112(sp)

        int xAB = x1 - x2;
    9b36:	|  |      move.l 140(sp),d0
    9b3a:	|  |      sub.l 132(sp),d0
    9b3e:	|  |      move.l d0,108(sp)
        int yAB = y1 - y2;
    9b42:	|  |      move.l 136(sp),d0
    9b46:	|  |      sub.l 128(sp),d0
    9b4a:	|  |      move.l d0,104(sp)
        int xCD = x4 - x3;
    9b4e:	|  |      move.l 116(sp),d0
    9b52:	|  |      sub.l 124(sp),d0
    9b56:	|  |      move.l d0,100(sp)
        int yCD = y4 - y3;
    9b5a:	|  |      move.l 112(sp),d0
    9b5e:	|  |      sub.l 120(sp),d0
    9b62:	|  |      move.l d0,96(sp)

        double m = (yAB * (x3 - x1) - xAB * (y3 - y1));
    9b66:	|  |      move.l 124(sp),d0
    9b6a:	|  |      sub.l 140(sp),d0
    9b6e:	|  |      move.l 104(sp),-(sp)
    9b72:	|  |      move.l d0,-(sp)
    9b74:	|  |      jsr 17b34 <__mulsi3>
    9b7a:	|  |      addq.l #8,sp
    9b7c:	|  |      move.l d0,d2
    9b7e:	|  |      move.l 120(sp),d0
    9b82:	|  |      sub.l 136(sp),d0
    9b86:	|  |      move.l 108(sp),-(sp)
    9b8a:	|  |      move.l d0,-(sp)
    9b8c:	|  |      jsr 17b34 <__mulsi3>
    9b92:	|  |      addq.l #8,sp
    9b94:	|  |      move.l d2,d1
    9b96:	|  |      sub.l d0,d1
    9b98:	|  |      move.l d1,-(sp)
    9b9a:	|  |      jsr 17572 <__floatsidf>
    9ba0:	|  |      addq.l #4,sp
    9ba2:	|  |      move.l d0,32(sp)
    9ba6:	|  |      move.l d1,36(sp)
    9baa:	|  |      move.l 32(sp),88(sp)
    9bb0:	|  |      move.l 36(sp),92(sp)
        m /= ((xAB * yCD) - (yAB * xCD));
    9bb6:	|  |      move.l 96(sp),-(sp)
    9bba:	|  |      move.l 112(sp),-(sp)
    9bbe:	|  |      jsr 17b34 <__mulsi3>
    9bc4:	|  |      addq.l #8,sp
    9bc6:	|  |      move.l d0,d2
    9bc8:	|  |      move.l 100(sp),-(sp)
    9bcc:	|  |      move.l 108(sp),-(sp)
    9bd0:	|  |      jsr 17b34 <__mulsi3>
    9bd6:	|  |      addq.l #8,sp
    9bd8:	|  |      move.l d2,d1
    9bda:	|  |      sub.l d0,d1
    9bdc:	|  |      move.l d1,-(sp)
    9bde:	|  |      jsr 17572 <__floatsidf>
    9be4:	|  |      addq.l #4,sp
    9be6:	|  |      move.l d1,-(sp)
    9be8:	|  |      move.l d0,-(sp)
    9bea:	|  |      move.l 100(sp),-(sp)
    9bee:	|  |      move.l 100(sp),-(sp)
    9bf2:	|  |      jsr 173fc <__divdf3>
    9bf8:	|  |      lea 16(sp),sp
    9bfc:	|  |      move.l d0,24(sp)
    9c00:	|  |      move.l d1,28(sp)
    9c04:	|  |      move.l 24(sp),88(sp)
    9c0a:	|  |      move.l 28(sp),92(sp)

        if (m > 0 && m < 1) {
    9c10:	|  |      clr.l -(sp)
    9c12:	|  |      clr.l -(sp)
    9c14:	|  |      move.l 100(sp),-(sp)
    9c18:	|  |      move.l 100(sp),-(sp)
    9c1c:	|  |      jsr 176d0 <__gtdf2>
    9c22:	|  |      lea 16(sp),sp
    9c26:	|  |      tst.l d0
    9c28:	|  |  /-- ble.w 9d00 <doBorderStuff+0x358>
    9c2c:	|  |  |   clr.l -(sp)
    9c2e:	|  |  |   move.l #1072693248,-(sp)
    9c34:	|  |  |   move.l 100(sp),-(sp)
    9c38:	|  |  |   move.l 100(sp),-(sp)
    9c3c:	|  |  |   jsr 1778a <__ltdf2>
    9c42:	|  |  |   lea 16(sp),sp
    9c46:	|  |  |   tst.l d0
    9c48:	|  |  +-- bge.w 9d00 <doBorderStuff+0x358>
            moveMe -> thisStepX = x3 + m * xCD;
    9c4c:	|  |  |   move.l 124(sp),-(sp)
    9c50:	|  |  |   jsr 17572 <__floatsidf>
    9c56:	|  |  |   addq.l #4,sp
    9c58:	|  |  |   move.l d0,d2
    9c5a:	|  |  |   move.l d1,d3
    9c5c:	|  |  |   move.l 100(sp),-(sp)
    9c60:	|  |  |   jsr 17572 <__floatsidf>
    9c66:	|  |  |   addq.l #4,sp
    9c68:	|  |  |   move.l 92(sp),-(sp)
    9c6c:	|  |  |   move.l 92(sp),-(sp)
    9c70:	|  |  |   move.l d1,-(sp)
    9c72:	|  |  |   move.l d0,-(sp)
    9c74:	|  |  |   jsr 17602 <__muldf3>
    9c7a:	|  |  |   lea 16(sp),sp
    9c7e:	|  |  |   move.l d1,-(sp)
    9c80:	|  |  |   move.l d0,-(sp)
    9c82:	|  |  |   move.l d3,-(sp)
    9c84:	|  |  |   move.l d2,-(sp)
    9c86:	|  |  |   jsr 1739a <__adddf3>
    9c8c:	|  |  |   lea 16(sp),sp
    9c90:	|  |  |   move.l d1,-(sp)
    9c92:	|  |  |   move.l d0,-(sp)
    9c94:	|  |  |   jsr 1750a <__fixdfsi>
    9c9a:	|  |  |   addq.l #8,sp
    9c9c:	|  |  |   movea.l 152(sp),a0
    9ca0:	|  |  |   move.l d0,48(a0)
            moveMe -> thisStepY = y3 + m * yCD;
    9ca4:	|  |  |   move.l 120(sp),-(sp)
    9ca8:	|  |  |   jsr 17572 <__floatsidf>
    9cae:	|  |  |   addq.l #4,sp
    9cb0:	|  |  |   move.l d0,d2
    9cb2:	|  |  |   move.l d1,d3
    9cb4:	|  |  |   move.l 96(sp),-(sp)
    9cb8:	|  |  |   jsr 17572 <__floatsidf>
    9cbe:	|  |  |   addq.l #4,sp
    9cc0:	|  |  |   move.l 92(sp),-(sp)
    9cc4:	|  |  |   move.l 92(sp),-(sp)
    9cc8:	|  |  |   move.l d1,-(sp)
    9cca:	|  |  |   move.l d0,-(sp)
    9ccc:	|  |  |   jsr 17602 <__muldf3>
    9cd2:	|  |  |   lea 16(sp),sp
    9cd6:	|  |  |   move.l d1,-(sp)
    9cd8:	|  |  |   move.l d0,-(sp)
    9cda:	|  |  |   move.l d3,-(sp)
    9cdc:	|  |  |   move.l d2,-(sp)
    9cde:	|  |  |   jsr 1739a <__adddf3>
    9ce4:	|  |  |   lea 16(sp),sp
    9ce8:	|  |  |   move.l d1,-(sp)
    9cea:	|  |  |   move.l d0,-(sp)
    9cec:	|  |  |   jsr 1750a <__fixdfsi>
    9cf2:	|  |  |   addq.l #8,sp
    9cf4:	|  |  |   movea.l 152(sp),a0
    9cf8:	|  |  |   move.l d0,52(a0)
    9cfc:	|  +--|-- bra.w 9f58 <doBorderStuff+0x5b0>
        } else {
            int dx13 = x1 - x3, dx14 = x1 - x4, dx23 = x2 - x3, dx24 = x2 - x4;
    9d00:	|  |  \-> move.l 140(sp),d0
    9d04:	|  |      sub.l 124(sp),d0
    9d08:	|  |      move.l d0,84(sp)
    9d0c:	|  |      move.l 140(sp),d0
    9d10:	|  |      sub.l 116(sp),d0
    9d14:	|  |      move.l d0,80(sp)
    9d18:	|  |      move.l 132(sp),d0
    9d1c:	|  |      sub.l 124(sp),d0
    9d20:	|  |      move.l d0,76(sp)
    9d24:	|  |      move.l 132(sp),d0
    9d28:	|  |      sub.l 116(sp),d0
    9d2c:	|  |      move.l d0,72(sp)
            int dy13 = y1 - y3, dy14 = y1 - y4, dy23 = y2 - y3, dy24 = y2 - y4;
    9d30:	|  |      move.l 136(sp),d0
    9d34:	|  |      sub.l 120(sp),d0
    9d38:	|  |      move.l d0,68(sp)
    9d3c:	|  |      move.l 136(sp),d0
    9d40:	|  |      sub.l 112(sp),d0
    9d44:	|  |      move.l d0,64(sp)
    9d48:	|  |      move.l 128(sp),d0
    9d4c:	|  |      sub.l 120(sp),d0
    9d50:	|  |      move.l d0,60(sp)
    9d54:	|  |      move.l 128(sp),d0
    9d58:	|  |      sub.l 112(sp),d0
    9d5c:	|  |      move.l d0,56(sp)

            dx13 *= dx13; dx14 *= dx14; dx23 *= dx23; dx24 *= dx24;
    9d60:	|  |      move.l 84(sp),-(sp)
    9d64:	|  |      move.l 88(sp),-(sp)
    9d68:	|  |      jsr 17b34 <__mulsi3>
    9d6e:	|  |      addq.l #8,sp
    9d70:	|  |      move.l d0,84(sp)
    9d74:	|  |      move.l 80(sp),-(sp)
    9d78:	|  |      move.l 84(sp),-(sp)
    9d7c:	|  |      jsr 17b34 <__mulsi3>
    9d82:	|  |      addq.l #8,sp
    9d84:	|  |      move.l d0,80(sp)
    9d88:	|  |      move.l 76(sp),-(sp)
    9d8c:	|  |      move.l 80(sp),-(sp)
    9d90:	|  |      jsr 17b34 <__mulsi3>
    9d96:	|  |      addq.l #8,sp
    9d98:	|  |      move.l d0,76(sp)
    9d9c:	|  |      move.l 72(sp),-(sp)
    9da0:	|  |      move.l 76(sp),-(sp)
    9da4:	|  |      jsr 17b34 <__mulsi3>
    9daa:	|  |      addq.l #8,sp
    9dac:	|  |      move.l d0,72(sp)
            dy13 *= dy13; dy14 *= dy14; dy23 *= dy23; dy24 *= dy24;
    9db0:	|  |      move.l 68(sp),-(sp)
    9db4:	|  |      move.l 72(sp),-(sp)
    9db8:	|  |      jsr 17b34 <__mulsi3>
    9dbe:	|  |      addq.l #8,sp
    9dc0:	|  |      move.l d0,68(sp)
    9dc4:	|  |      move.l 64(sp),-(sp)
    9dc8:	|  |      move.l 68(sp),-(sp)
    9dcc:	|  |      jsr 17b34 <__mulsi3>
    9dd2:	|  |      addq.l #8,sp
    9dd4:	|  |      move.l d0,64(sp)
    9dd8:	|  |      move.l 60(sp),-(sp)
    9ddc:	|  |      move.l 64(sp),-(sp)
    9de0:	|  |      jsr 17b34 <__mulsi3>
    9de6:	|  |      addq.l #8,sp
    9de8:	|  |      move.l d0,60(sp)
    9dec:	|  |      move.l 56(sp),-(sp)
    9df0:	|  |      move.l 60(sp),-(sp)
    9df4:	|  |      jsr 17b34 <__mulsi3>
    9dfa:	|  |      addq.l #8,sp
    9dfc:	|  |      move.l d0,56(sp)

            if (sqrt((double) dx13 + dy13) + sqrt((double) dx23 + dy23) <
    9e00:	|  |      move.l 84(sp),-(sp)
    9e04:	|  |      jsr 17572 <__floatsidf>
    9e0a:	|  |      addq.l #4,sp
    9e0c:	|  |      move.l d0,d2
    9e0e:	|  |      move.l d1,d3
    9e10:	|  |      move.l 68(sp),-(sp)
    9e14:	|  |      jsr 17572 <__floatsidf>
    9e1a:	|  |      addq.l #4,sp
    9e1c:	|  |      move.l d1,-(sp)
    9e1e:	|  |      move.l d0,-(sp)
    9e20:	|  |      move.l d3,-(sp)
    9e22:	|  |      move.l d2,-(sp)
    9e24:	|  |      jsr 1739a <__adddf3>
    9e2a:	|  |      lea 16(sp),sp
    9e2e:	|  |      move.l d1,-(sp)
    9e30:	|  |      move.l d0,-(sp)
    9e32:	|  |      jsr 17aea <sqrt>
    9e38:	|  |      addq.l #8,sp
    9e3a:	|  |      move.l d0,d2
    9e3c:	|  |      move.l d1,d3
    9e3e:	|  |      move.l 76(sp),-(sp)
    9e42:	|  |      jsr 17572 <__floatsidf>
    9e48:	|  |      addq.l #4,sp
    9e4a:	|  |      move.l d0,d4
    9e4c:	|  |      move.l d1,d5
    9e4e:	|  |      move.l 60(sp),-(sp)
    9e52:	|  |      jsr 17572 <__floatsidf>
    9e58:	|  |      addq.l #4,sp
    9e5a:	|  |      move.l d1,-(sp)
    9e5c:	|  |      move.l d0,-(sp)
    9e5e:	|  |      move.l d5,-(sp)
    9e60:	|  |      move.l d4,-(sp)
    9e62:	|  |      jsr 1739a <__adddf3>
    9e68:	|  |      lea 16(sp),sp
    9e6c:	|  |      move.l d1,-(sp)
    9e6e:	|  |      move.l d0,-(sp)
    9e70:	|  |      jsr 17aea <sqrt>
    9e76:	|  |      addq.l #8,sp
    9e78:	|  |      move.l d1,-(sp)
    9e7a:	|  |      move.l d0,-(sp)
    9e7c:	|  |      move.l d3,-(sp)
    9e7e:	|  |      move.l d2,-(sp)
    9e80:	|  |      jsr 1739a <__adddf3>
    9e86:	|  |      lea 16(sp),sp
    9e8a:	|  |      move.l d0,d2
    9e8c:	|  |      move.l d1,d3
                sqrt((double) dx14 + dy14) + sqrt((double) dx24 + dy24)) {
    9e8e:	|  |      move.l 80(sp),-(sp)
    9e92:	|  |      jsr 17572 <__floatsidf>
    9e98:	|  |      addq.l #4,sp
    9e9a:	|  |      move.l d0,d4
    9e9c:	|  |      move.l d1,d5
    9e9e:	|  |      move.l 64(sp),-(sp)
    9ea2:	|  |      jsr 17572 <__floatsidf>
    9ea8:	|  |      addq.l #4,sp
    9eaa:	|  |      move.l d1,-(sp)
    9eac:	|  |      move.l d0,-(sp)
    9eae:	|  |      move.l d5,-(sp)
    9eb0:	|  |      move.l d4,-(sp)
    9eb2:	|  |      jsr 1739a <__adddf3>
    9eb8:	|  |      lea 16(sp),sp
    9ebc:	|  |      move.l d1,-(sp)
    9ebe:	|  |      move.l d0,-(sp)
    9ec0:	|  |      jsr 17aea <sqrt>
    9ec6:	|  |      addq.l #8,sp
    9ec8:	|  |      move.l d0,d4
    9eca:	|  |      move.l d1,d5
    9ecc:	|  |      move.l 72(sp),-(sp)
    9ed0:	|  |      jsr 17572 <__floatsidf>
    9ed6:	|  |      addq.l #4,sp
    9ed8:	|  |      move.l d0,d6
    9eda:	|  |      move.l d1,d7
    9edc:	|  |      move.l 56(sp),-(sp)
    9ee0:	|  |      jsr 17572 <__floatsidf>
    9ee6:	|  |      addq.l #4,sp
    9ee8:	|  |      move.l d1,-(sp)
    9eea:	|  |      move.l d0,-(sp)
    9eec:	|  |      move.l d7,-(sp)
    9eee:	|  |      move.l d6,-(sp)
    9ef0:	|  |      jsr 1739a <__adddf3>
    9ef6:	|  |      lea 16(sp),sp
    9efa:	|  |      move.l d1,-(sp)
    9efc:	|  |      move.l d0,-(sp)
    9efe:	|  |      jsr 17aea <sqrt>
    9f04:	|  |      addq.l #8,sp
    9f06:	|  |      move.l d1,-(sp)
    9f08:	|  |      move.l d0,-(sp)
    9f0a:	|  |      move.l d5,-(sp)
    9f0c:	|  |      move.l d4,-(sp)
    9f0e:	|  |      jsr 1739a <__adddf3>
    9f14:	|  |      lea 16(sp),sp
            if (sqrt((double) dx13 + dy13) + sqrt((double) dx23 + dy23) <
    9f18:	|  |      move.l d1,-(sp)
    9f1a:	|  |      move.l d0,-(sp)
    9f1c:	|  |      move.l d3,-(sp)
    9f1e:	|  |      move.l d2,-(sp)
    9f20:	|  |      jsr 1778a <__ltdf2>
    9f26:	|  |      lea 16(sp),sp
    9f2a:	|  |      tst.l d0
    9f2c:	|  |  /-- bge.s 9f44 <doBorderStuff+0x59c>
                moveMe -> thisStepX = x3;
    9f2e:	|  |  |   movea.l 152(sp),a0
    9f32:	|  |  |   move.l 124(sp),48(a0)
                moveMe -> thisStepY = y3;
    9f38:	|  |  |   movea.l 152(sp),a0
    9f3c:	|  |  |   move.l 120(sp),52(a0)
    9f42:	|  +--|-- bra.s 9f58 <doBorderStuff+0x5b0>
            } else {
                moveMe -> thisStepX = x4;
    9f44:	|  |  \-> movea.l 152(sp),a0
    9f48:	|  |      move.l 116(sp),48(a0)
                moveMe -> thisStepY = y4;
    9f4e:	|  |      movea.l 152(sp),a0
    9f52:	|  |      move.l 112(sp),52(a0)
            }
        }
    }

    float yDiff = moveMe -> thisStepY - moveMe -> y;
    9f58:	|  \----> movea.l 152(sp),a0
    9f5c:	|         move.l 52(a0),d0
    9f60:	|         move.l d0,-(sp)
    9f62:	|         jsr 175b2 <__floatsisf>
    9f68:	|         addq.l #4,sp
    9f6a:	|         move.l d0,d1
    9f6c:	|         movea.l 152(sp),a0
    9f70:	|         move.l 4(a0),d0
    9f74:	|         move.l d0,-(sp)
    9f76:	|         move.l d1,-(sp)
    9f78:	|         jsr 178a6 <__subsf3>
    9f7e:	|         addq.l #8,sp
    9f80:	|         move.l d0,52(sp)
    float xDiff = moveMe -> x - moveMe -> thisStepX;
    9f84:	|         movea.l 152(sp),a0
    9f88:	|         move.l (a0),d2
    9f8a:	|         movea.l 152(sp),a0
    9f8e:	|         move.l 48(a0),d0
    9f92:	|         move.l d0,-(sp)
    9f94:	|         jsr 175b2 <__floatsisf>
    9f9a:	|         addq.l #4,sp
    9f9c:	|         move.l d0,-(sp)
    9f9e:	|         move.l d2,-(sp)
    9fa0:	|         jsr 178a6 <__subsf3>
    9fa6:	|         addq.l #8,sp
    9fa8:	|         move.l d0,48(sp)
    if (xDiff || yDiff) {
    9fac:	|         clr.l -(sp)
    9fae:	|         move.l 52(sp),-(sp)
    9fb2:	|         jsr 1780e <__nesf2>
    9fb8:	|         addq.l #8,sp
    9fba:	|         tst.l d0
    9fbc:	|     /-- bne.s 9fd0 <doBorderStuff+0x628>
    9fbe:	|     |   clr.l -(sp)
    9fc0:	|     |   move.l 56(sp),-(sp)
    9fc4:	|     |   jsr 1780e <__nesf2>
    9fca:	|     |   addq.l #8,sp
    9fcc:	|     |   tst.l d0
    9fce:	|  /--|-- beq.s a046 <doBorderStuff+0x69e>
        moveMe -> wantAngle = 180 + ANGLEFIX * atan2f(xDiff, yDiff * 2);
    9fd0:	|  |  \-> move.l 52(sp),d0
    9fd4:	|  |      move.l d0,-(sp)
    9fd6:	|  |      move.l d0,-(sp)
    9fd8:	|  |      jsr 17364 <__addsf3>
    9fde:	|  |      addq.l #8,sp
    9fe0:	|  |      move.l d0,-(sp)
    9fe2:	|  |      move.l 52(sp),-(sp)
    9fe6:	|  |      jsr 1793a <atan2f>
    9fec:	|  |      addq.l #8,sp
    9fee:	|  |      move.l d0,-(sp)
    9ff0:	|  |      jsr 174ca <__extendsfdf2>
    9ff6:	|  |      addq.l #4,sp
    9ff8:	|  |      move.l #-1540411785,-(sp)
    9ffe:	|  |      move.l #1078765033,-(sp)
    a004:	|  |      move.l d1,-(sp)
    a006:	|  |      move.l d0,-(sp)
    a008:	|  |      jsr 17602 <__muldf3>
    a00e:	|  |      lea 16(sp),sp
    a012:	|  |      clr.l -(sp)
    a014:	|  |      move.l #1080459264,-(sp)
    a01a:	|  |      move.l d1,-(sp)
    a01c:	|  |      move.l d0,-(sp)
    a01e:	|  |      jsr 1739a <__adddf3>
    a024:	|  |      lea 16(sp),sp
    a028:	|  |      move.l d1,-(sp)
    a02a:	|  |      move.l d0,-(sp)
    a02c:	|  |      jsr 1750a <__fixdfsi>
    a032:	|  |      addq.l #8,sp
    a034:	|  |      movea.l 152(sp),a0
    a038:	|  |      move.l d0,96(a0)
        moveMe -> spinning = TRUE;
    a03c:	|  |      movea.l 152(sp),a0
    a040:	|  |      move.w #1,66(a0)
    }

    setFrames (moveMe, ANI_WALK);
    a046:	|  \----> pea 1 <_start+0x1>
    a04a:	|         move.l 156(sp),-(sp)
    a04e:	|         jsr 81e4 <setFrames>
    a054:	|         addq.l #8,sp
    return TRUE;
    a056:	|         moveq #1,d0
}
    a058:	\-------> movem.l (sp)+,d2-d7
    a05c:	          lea 124(sp),sp
    a060:	          rts

0000a062 <drawPeople>:

void drawPeople () {
    a062:	                   lea -24(sp),sp
    a066:	                   move.l d2,-(sp)

	shufflePeople ();
    a068:	                   jsr bafe <shufflePeople>

	struct onScreenPerson * thisPerson = allPeople;
    a06e:	                   move.l 1c8c0 <allPeople>,24(sp)
	struct personaAnimation * myAnim = NULL;
    a076:	                   clr.l 20(sp)
	overRegion = NULL;
    a07a:	                   clr.l 1c970 <overRegion>

	while (thisPerson) {
    a080:	   /-------------- bra.w a632 <drawPeople+0x5d0>
		if (thisPerson -> show) {
    a084:	/--|-------------> movea.l 24(sp),a0
    a088:	|  |               move.w 104(a0),d0
    a08c:	|  |  /----------- beq.w a3e6 <drawPeople+0x384>
			myAnim = thisPerson -> myAnim;
    a090:	|  |  |            movea.l 24(sp),a0
    a094:	|  |  |            move.l 72(a0),20(sp)
			if (myAnim != thisPerson -> lastUsedAnim) {
    a09a:	|  |  |            movea.l 24(sp),a0
    a09e:	|  |  |            move.l 76(a0),d0
    a0a2:	|  |  |            cmp.l 20(sp),d0
    a0a6:	|  |  |  /-------- beq.w a274 <drawPeople+0x212>
				thisPerson -> samePosCount = 0;
    a0aa:	|  |  |  |         movea.l 24(sp),a0
    a0ae:	|  |  |  |         clr.l 16(a0)
				thisPerson -> lastUsedAnim = myAnim;
    a0b2:	|  |  |  |         movea.l 24(sp),a0
    a0b6:	|  |  |  |         move.l 20(sp),76(a0)
				thisPerson -> frameNum = 0;
    a0bc:	|  |  |  |         movea.l 24(sp),a0
    a0c0:	|  |  |  |         clr.l 84(a0)
				thisPerson -> frameTick = myAnim -> frames[0].howMany;
    a0c4:	|  |  |  |         movea.l 20(sp),a0
    a0c8:	|  |  |  |         movea.l 4(a0),a0
    a0cc:	|  |  |  |         move.l 4(a0),d0
    a0d0:	|  |  |  |         movea.l 24(sp),a0
    a0d4:	|  |  |  |         move.l d0,88(a0)
				if (myAnim -> frames[thisPerson -> frameNum].noise > 0) {
    a0d8:	|  |  |  |         movea.l 20(sp),a0
    a0dc:	|  |  |  |         movea.l 4(a0),a1
    a0e0:	|  |  |  |         movea.l 24(sp),a0
    a0e4:	|  |  |  |         move.l 84(a0),d0
    a0e8:	|  |  |  |         move.l d0,d1
    a0ea:	|  |  |  |         move.l d1,d0
    a0ec:	|  |  |  |         add.l d0,d0
    a0ee:	|  |  |  |         add.l d1,d0
    a0f0:	|  |  |  |         add.l d0,d0
    a0f2:	|  |  |  |         add.l d0,d0
    a0f4:	|  |  |  |         lea (0,a1,d0.l),a0
    a0f8:	|  |  |  |         move.l 8(a0),d0
    a0fc:	|  |  |  |     /-- ble.w a19e <drawPeople+0x13c>
					startSound(myAnim -> frames[thisPerson -> frameNum].noise, FALSE);
    a100:	|  |  |  |     |   movea.l 20(sp),a0
    a104:	|  |  |  |     |   movea.l 4(a0),a1
    a108:	|  |  |  |     |   movea.l 24(sp),a0
    a10c:	|  |  |  |     |   move.l 84(a0),d0
    a110:	|  |  |  |     |   move.l d0,d1
    a112:	|  |  |  |     |   move.l d1,d0
    a114:	|  |  |  |     |   add.l d0,d0
    a116:	|  |  |  |     |   add.l d1,d0
    a118:	|  |  |  |     |   add.l d0,d0
    a11a:	|  |  |  |     |   add.l d0,d0
    a11c:	|  |  |  |     |   lea (0,a1,d0.l),a0
    a120:	|  |  |  |     |   move.l 8(a0),d0
    a124:	|  |  |  |     |   clr.l -(sp)
    a126:	|  |  |  |     |   move.l d0,-(sp)
    a128:	|  |  |  |     |   jsr d182 <startSound>
    a12e:	|  |  |  |     |   addq.l #8,sp
					thisPerson -> frameNum ++;
    a130:	|  |  |  |     |   movea.l 24(sp),a0
    a134:	|  |  |  |     |   move.l 84(a0),d0
    a138:	|  |  |  |     |   addq.l #1,d0
    a13a:	|  |  |  |     |   movea.l 24(sp),a0
    a13e:	|  |  |  |     |   move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a142:	|  |  |  |     |   movea.l 24(sp),a0
    a146:	|  |  |  |     |   move.l 84(a0),d0
    a14a:	|  |  |  |     |   movea.l 24(sp),a0
    a14e:	|  |  |  |     |   movea.l 72(a0),a0
    a152:	|  |  |  |     |   move.l 8(a0),d1
    a156:	|  |  |  |     |   move.l d1,-(sp)
    a158:	|  |  |  |     |   move.l d0,-(sp)
    a15a:	|  |  |  |     |   jsr 17be0 <__modsi3>
    a160:	|  |  |  |     |   addq.l #8,sp
    a162:	|  |  |  |     |   movea.l 24(sp),a0
    a166:	|  |  |  |     |   move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a16a:	|  |  |  |     |   movea.l 24(sp),a0
    a16e:	|  |  |  |     |   movea.l 72(a0),a0
    a172:	|  |  |  |     |   movea.l 4(a0),a1
    a176:	|  |  |  |     |   movea.l 24(sp),a0
    a17a:	|  |  |  |     |   move.l 84(a0),d0
    a17e:	|  |  |  |     |   move.l d0,d1
    a180:	|  |  |  |     |   move.l d1,d0
    a182:	|  |  |  |     |   add.l d0,d0
    a184:	|  |  |  |     |   add.l d1,d0
    a186:	|  |  |  |     |   add.l d0,d0
    a188:	|  |  |  |     |   add.l d0,d0
    a18a:	|  |  |  |     |   lea (0,a1,d0.l),a0
    a18e:	|  |  |  |     |   move.l 4(a0),d0
    a192:	|  |  |  |     |   movea.l 24(sp),a0
    a196:	|  |  |  |     |   move.l d0,88(a0)
    a19a:	|  |  |  |  /--|-- bra.w a2dc <drawPeople+0x27a>
				} else if (myAnim -> frames[thisPerson -> frameNum].noise) {
    a19e:	|  |  |  |  |  \-> movea.l 20(sp),a0
    a1a2:	|  |  |  |  |      movea.l 4(a0),a1
    a1a6:	|  |  |  |  |      movea.l 24(sp),a0
    a1aa:	|  |  |  |  |      move.l 84(a0),d0
    a1ae:	|  |  |  |  |      move.l d0,d1
    a1b0:	|  |  |  |  |      move.l d1,d0
    a1b2:	|  |  |  |  |      add.l d0,d0
    a1b4:	|  |  |  |  |      add.l d1,d0
    a1b6:	|  |  |  |  |      add.l d0,d0
    a1b8:	|  |  |  |  |      add.l d0,d0
    a1ba:	|  |  |  |  |      lea (0,a1,d0.l),a0
    a1be:	|  |  |  |  |      move.l 8(a0),d0
    a1c2:	|  |  |  |  +----- beq.w a2dc <drawPeople+0x27a>
					startNewFunctionNum (- myAnim -> frames[thisPerson -> frameNum].noise, 0, NULL, noStack, TRUE);
    a1c6:	|  |  |  |  |      movea.l 1c82c <noStack>,a1
    a1cc:	|  |  |  |  |      movea.l 20(sp),a0
    a1d0:	|  |  |  |  |      move.l 4(a0),d2
    a1d4:	|  |  |  |  |      movea.l 24(sp),a0
    a1d8:	|  |  |  |  |      move.l 84(a0),d0
    a1dc:	|  |  |  |  |      move.l d0,d1
    a1de:	|  |  |  |  |      move.l d1,d0
    a1e0:	|  |  |  |  |      add.l d0,d0
    a1e2:	|  |  |  |  |      add.l d1,d0
    a1e4:	|  |  |  |  |      add.l d0,d0
    a1e6:	|  |  |  |  |      add.l d0,d0
    a1e8:	|  |  |  |  |      movea.l d2,a0
    a1ea:	|  |  |  |  |      adda.l d0,a0
    a1ec:	|  |  |  |  |      move.l 8(a0),d0
    a1f0:	|  |  |  |  |      neg.l d0
    a1f2:	|  |  |  |  |      pea 1 <_start+0x1>
    a1f6:	|  |  |  |  |      move.l a1,-(sp)
    a1f8:	|  |  |  |  |      clr.l -(sp)
    a1fa:	|  |  |  |  |      clr.l -(sp)
    a1fc:	|  |  |  |  |      move.l d0,-(sp)
    a1fe:	|  |  |  |  |      jsr 6b48 <startNewFunctionNum>
    a204:	|  |  |  |  |      lea 20(sp),sp
					thisPerson -> frameNum ++;
    a208:	|  |  |  |  |      movea.l 24(sp),a0
    a20c:	|  |  |  |  |      move.l 84(a0),d0
    a210:	|  |  |  |  |      addq.l #1,d0
    a212:	|  |  |  |  |      movea.l 24(sp),a0
    a216:	|  |  |  |  |      move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a21a:	|  |  |  |  |      movea.l 24(sp),a0
    a21e:	|  |  |  |  |      move.l 84(a0),d0
    a222:	|  |  |  |  |      movea.l 24(sp),a0
    a226:	|  |  |  |  |      movea.l 72(a0),a0
    a22a:	|  |  |  |  |      move.l 8(a0),d1
    a22e:	|  |  |  |  |      move.l d1,-(sp)
    a230:	|  |  |  |  |      move.l d0,-(sp)
    a232:	|  |  |  |  |      jsr 17be0 <__modsi3>
    a238:	|  |  |  |  |      addq.l #8,sp
    a23a:	|  |  |  |  |      movea.l 24(sp),a0
    a23e:	|  |  |  |  |      move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a242:	|  |  |  |  |      movea.l 24(sp),a0
    a246:	|  |  |  |  |      movea.l 72(a0),a0
    a24a:	|  |  |  |  |      movea.l 4(a0),a1
    a24e:	|  |  |  |  |      movea.l 24(sp),a0
    a252:	|  |  |  |  |      move.l 84(a0),d0
    a256:	|  |  |  |  |      move.l d0,d1
    a258:	|  |  |  |  |      move.l d1,d0
    a25a:	|  |  |  |  |      add.l d0,d0
    a25c:	|  |  |  |  |      add.l d1,d0
    a25e:	|  |  |  |  |      add.l d0,d0
    a260:	|  |  |  |  |      add.l d0,d0
    a262:	|  |  |  |  |      lea (0,a1,d0.l),a0
    a266:	|  |  |  |  |      move.l 4(a0),d0
    a26a:	|  |  |  |  |      movea.l 24(sp),a0
    a26e:	|  |  |  |  |      move.l d0,88(a0)
    a272:	|  |  |  |  +----- bra.s a2dc <drawPeople+0x27a>
				}
			} else {
				if(thisPerson->x == thisPerson->oldx && thisPerson->y == thisPerson->oldy && myAnim->numFrames == 1)
    a274:	|  |  |  \--|----> movea.l 24(sp),a0
    a278:	|  |  |     |      move.l (a0),d0
    a27a:	|  |  |     |      movea.l 24(sp),a0
    a27e:	|  |  |     |      move.l 8(a0),d1
    a282:	|  |  |     |      move.l d1,-(sp)
    a284:	|  |  |     |      move.l d0,-(sp)
    a286:	|  |  |     |      jsr 17494 <__eqsf2>
    a28c:	|  |  |     |      addq.l #8,sp
    a28e:	|  |  |     |      tst.l d0
    a290:	|  |  |     |  /-- bne.s a2d4 <drawPeople+0x272>
    a292:	|  |  |     |  |   movea.l 24(sp),a0
    a296:	|  |  |     |  |   move.l 4(a0),d0
    a29a:	|  |  |     |  |   movea.l 24(sp),a0
    a29e:	|  |  |     |  |   move.l 12(a0),d1
    a2a2:	|  |  |     |  |   move.l d1,-(sp)
    a2a4:	|  |  |     |  |   move.l d0,-(sp)
    a2a6:	|  |  |     |  |   jsr 17494 <__eqsf2>
    a2ac:	|  |  |     |  |   addq.l #8,sp
    a2ae:	|  |  |     |  |   tst.l d0
    a2b0:	|  |  |     |  +-- bne.s a2d4 <drawPeople+0x272>
    a2b2:	|  |  |     |  |   movea.l 20(sp),a0
    a2b6:	|  |  |     |  |   move.l 8(a0),d0
    a2ba:	|  |  |     |  |   moveq #1,d1
    a2bc:	|  |  |     |  |   cmp.l d0,d1
    a2be:	|  |  |     |  +-- bne.s a2d4 <drawPeople+0x272>
				{
					thisPerson->samePosCount++;
    a2c0:	|  |  |     |  |   movea.l 24(sp),a0
    a2c4:	|  |  |     |  |   move.l 16(a0),d0
    a2c8:	|  |  |     |  |   addq.l #1,d0
    a2ca:	|  |  |     |  |   movea.l 24(sp),a0
    a2ce:	|  |  |     |  |   move.l d0,16(a0)
    a2d2:	|  |  |     +--|-- bra.s a2dc <drawPeople+0x27a>
				} else
				{
					thisPerson->samePosCount = 0;
    a2d4:	|  |  |     |  \-> movea.l 24(sp),a0
    a2d8:	|  |  |     |      clr.l 16(a0)
				}
			}

			thisPerson->oldx = thisPerson->x;
    a2dc:	|  |  |     \----> movea.l 24(sp),a0
    a2e0:	|  |  |            move.l (a0),d0
    a2e2:	|  |  |            movea.l 24(sp),a0
    a2e6:	|  |  |            move.l d0,8(a0)
			thisPerson->oldy = thisPerson->y;
    a2ea:	|  |  |            movea.l 24(sp),a0
    a2ee:	|  |  |            move.l 4(a0),d0
    a2f2:	|  |  |            movea.l 24(sp),a0
    a2f6:	|  |  |            move.l d0,12(a0)
			int fNumSign = myAnim -> frames[thisPerson -> frameNum].frameNum;
    a2fa:	|  |  |            movea.l 20(sp),a0
    a2fe:	|  |  |            movea.l 4(a0),a1
    a302:	|  |  |            movea.l 24(sp),a0
    a306:	|  |  |            move.l 84(a0),d0
    a30a:	|  |  |            move.l d0,d1
    a30c:	|  |  |            move.l d1,d0
    a30e:	|  |  |            add.l d0,d0
    a310:	|  |  |            add.l d1,d0
    a312:	|  |  |            add.l d0,d0
    a314:	|  |  |            add.l d0,d0
    a316:	|  |  |            lea (0,a1,d0.l),a0
    a31a:	|  |  |            move.l (a0),8(sp)
			int m = fNumSign < 0;
    a31e:	|  |  |            move.l 8(sp),d0
    a322:	|  |  |            add.l d0,d0
    a324:	|  |  |            subx.l d0,d0
    a326:	|  |  |            neg.l d0
    a328:	|  |  |            move.b d0,d0
    a32a:	|  |  |            move.b d0,d0
    a32c:	|  |  |            andi.l #255,d0
    a332:	|  |  |            move.l d0,16(sp)
			int fNum = TF_abs(fNumSign);
    a336:	|  |  |            move.l 8(sp),-(sp)
    a33a:	|  |  |            jsr 9236 <TF_abs>
    a340:	|  |  |            addq.l #4,sp
    a342:	|  |  |            move.l d0,12(sp)
			if (fNum >= myAnim -> theSprites -> bank.total) {
    a346:	|  |  |            movea.l 20(sp),a0
    a34a:	|  |  |            movea.l (a0),a0
    a34c:	|  |  |            move.l 8(a0),d0
    a350:	|  |  |            cmp.l 12(sp),d0
    a354:	|  |  |        /-- bgt.s a364 <drawPeople+0x302>
				fNum = 0;
    a356:	|  |  |        |   clr.l 12(sp)
				m = 2 - m;
    a35a:	|  |  |        |   moveq #2,d0
    a35c:	|  |  |        |   sub.l 16(sp),d0
    a360:	|  |  |        |   move.l d0,16(sp)
			}
			if (m != 2) {
    a364:	|  |  |        \-> moveq #2,d1
    a366:	|  |  |            cmp.l 16(sp),d1
    a36a:	|  |  +----------- beq.s a3e6 <drawPeople+0x384>
				BOOL r = FALSE;
    a36c:	|  |  |            clr.w 6(sp)

				r = scaleSprite ( &myAnim->theSprites->bank.sprites[fNum], thisPerson, m);
    a370:	|  |  |            move.l 16(sp),d0
    a374:	|  |  |            movea.w d0,a0
    a376:	|  |  |            movea.l 20(sp),a1
    a37a:	|  |  |            movea.l (a1),a1
    a37c:	|  |  |            movea.l 16(a1),a1
    a380:	|  |  |            move.l 12(sp),d1
    a384:	|  |  |            move.l d1,d0
    a386:	|  |  |            lsl.l #3,d0
    a388:	|  |  |            sub.l d1,d0
    a38a:	|  |  |            add.l d0,d0
    a38c:	|  |  |            add.l d0,d0
    a38e:	|  |  |            add.l a1,d0
    a390:	|  |  |            move.l a0,-(sp)
    a392:	|  |  |            move.l 28(sp),-(sp)
    a396:	|  |  |            move.l d0,-(sp)
    a398:	|  |  |            jsr 8fcc <scaleSprite>
    a39e:	|  |  |            lea 12(sp),sp
    a3a2:	|  |  |            move.w d0,6(sp)
				if (r) {
    a3a6:	|  |  +----------- beq.s a3e6 <drawPeople+0x384>
					if (thisPerson -> thisType -> screenName[0]) {
    a3a8:	|  |  |            movea.l 24(sp),a0
    a3ac:	|  |  |            movea.l 114(a0),a0
    a3b0:	|  |  |            movea.l (a0),a0
    a3b2:	|  |  |            move.b (a0),d0
    a3b4:	|  |  +----------- beq.s a3e6 <drawPeople+0x384>
						if (personRegion.thisType != thisPerson -> thisType) lastRegion = NULL;
    a3b6:	|  |  |            move.l 1c8e0 <personRegion+0x1c>,d1
    a3bc:	|  |  |            movea.l 24(sp),a0
    a3c0:	|  |  |            move.l 114(a0),d0
    a3c4:	|  |  |            cmp.l d1,d0
    a3c6:	|  |  |        /-- beq.s a3ce <drawPeople+0x36c>
    a3c8:	|  |  |        |   clr.l 1c824 <lastRegion>
						personRegion.thisType = thisPerson -> thisType;
    a3ce:	|  |  |        \-> movea.l 24(sp),a0
    a3d2:	|  |  |            move.l 114(a0),d0
    a3d6:	|  |  |            move.l d0,1c8e0 <personRegion+0x1c>
						overRegion = & personRegion;
    a3dc:	|  |  |            move.l #116932,1c970 <overRegion>
					}
				}
			}
		}
		if (! -- thisPerson -> frameTick) {
    a3e6:	|  |  \----------> movea.l 24(sp),a0
    a3ea:	|  |               move.l 88(a0),d0
    a3ee:	|  |               subq.l #1,d0
    a3f0:	|  |               movea.l 24(sp),a0
    a3f4:	|  |               move.l d0,88(a0)
    a3f8:	|  |               movea.l 24(sp),a0
    a3fc:	|  |               move.l 88(a0),d0
    a400:	|  |        /----- bne.w a628 <drawPeople+0x5c6>
			thisPerson -> frameNum ++;
    a404:	|  |        |      movea.l 24(sp),a0
    a408:	|  |        |      move.l 84(a0),d0
    a40c:	|  |        |      addq.l #1,d0
    a40e:	|  |        |      movea.l 24(sp),a0
    a412:	|  |        |      move.l d0,84(a0)
			thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a416:	|  |        |      movea.l 24(sp),a0
    a41a:	|  |        |      move.l 84(a0),d0
    a41e:	|  |        |      movea.l 24(sp),a0
    a422:	|  |        |      movea.l 72(a0),a0
    a426:	|  |        |      move.l 8(a0),d1
    a42a:	|  |        |      move.l d1,-(sp)
    a42c:	|  |        |      move.l d0,-(sp)
    a42e:	|  |        |      jsr 17be0 <__modsi3>
    a434:	|  |        |      addq.l #8,sp
    a436:	|  |        |      movea.l 24(sp),a0
    a43a:	|  |        |      move.l d0,84(a0)
			thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a43e:	|  |        |      movea.l 24(sp),a0
    a442:	|  |        |      movea.l 72(a0),a0
    a446:	|  |        |      movea.l 4(a0),a1
    a44a:	|  |        |      movea.l 24(sp),a0
    a44e:	|  |        |      move.l 84(a0),d0
    a452:	|  |        |      move.l d0,d1
    a454:	|  |        |      move.l d1,d0
    a456:	|  |        |      add.l d0,d0
    a458:	|  |        |      add.l d1,d0
    a45a:	|  |        |      add.l d0,d0
    a45c:	|  |        |      add.l d0,d0
    a45e:	|  |        |      lea (0,a1,d0.l),a0
    a462:	|  |        |      move.l 4(a0),d0
    a466:	|  |        |      movea.l 24(sp),a0
    a46a:	|  |        |      move.l d0,88(a0)
			if (thisPerson -> show && myAnim && myAnim -> frames) {
    a46e:	|  |        |      movea.l 24(sp),a0
    a472:	|  |        |      move.w 104(a0),d0
    a476:	|  |        +----- beq.w a628 <drawPeople+0x5c6>
    a47a:	|  |        |      tst.l 20(sp)
    a47e:	|  |        +----- beq.w a628 <drawPeople+0x5c6>
    a482:	|  |        |      movea.l 20(sp),a0
    a486:	|  |        |      move.l 4(a0),d0
    a48a:	|  |        +----- beq.w a628 <drawPeople+0x5c6>
				if (myAnim -> frames[thisPerson -> frameNum].noise > 0) {
    a48e:	|  |        |      movea.l 20(sp),a0
    a492:	|  |        |      movea.l 4(a0),a1
    a496:	|  |        |      movea.l 24(sp),a0
    a49a:	|  |        |      move.l 84(a0),d0
    a49e:	|  |        |      move.l d0,d1
    a4a0:	|  |        |      move.l d1,d0
    a4a2:	|  |        |      add.l d0,d0
    a4a4:	|  |        |      add.l d1,d0
    a4a6:	|  |        |      add.l d0,d0
    a4a8:	|  |        |      add.l d0,d0
    a4aa:	|  |        |      lea (0,a1,d0.l),a0
    a4ae:	|  |        |      move.l 8(a0),d0
    a4b2:	|  |        |  /-- ble.w a554 <drawPeople+0x4f2>
					startSound(myAnim -> frames[thisPerson -> frameNum].noise, FALSE);
    a4b6:	|  |        |  |   movea.l 20(sp),a0
    a4ba:	|  |        |  |   movea.l 4(a0),a1
    a4be:	|  |        |  |   movea.l 24(sp),a0
    a4c2:	|  |        |  |   move.l 84(a0),d0
    a4c6:	|  |        |  |   move.l d0,d1
    a4c8:	|  |        |  |   move.l d1,d0
    a4ca:	|  |        |  |   add.l d0,d0
    a4cc:	|  |        |  |   add.l d1,d0
    a4ce:	|  |        |  |   add.l d0,d0
    a4d0:	|  |        |  |   add.l d0,d0
    a4d2:	|  |        |  |   lea (0,a1,d0.l),a0
    a4d6:	|  |        |  |   move.l 8(a0),d0
    a4da:	|  |        |  |   clr.l -(sp)
    a4dc:	|  |        |  |   move.l d0,-(sp)
    a4de:	|  |        |  |   jsr d182 <startSound>
    a4e4:	|  |        |  |   addq.l #8,sp
					thisPerson -> frameNum ++;
    a4e6:	|  |        |  |   movea.l 24(sp),a0
    a4ea:	|  |        |  |   move.l 84(a0),d0
    a4ee:	|  |        |  |   addq.l #1,d0
    a4f0:	|  |        |  |   movea.l 24(sp),a0
    a4f4:	|  |        |  |   move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a4f8:	|  |        |  |   movea.l 24(sp),a0
    a4fc:	|  |        |  |   move.l 84(a0),d0
    a500:	|  |        |  |   movea.l 24(sp),a0
    a504:	|  |        |  |   movea.l 72(a0),a0
    a508:	|  |        |  |   move.l 8(a0),d1
    a50c:	|  |        |  |   move.l d1,-(sp)
    a50e:	|  |        |  |   move.l d0,-(sp)
    a510:	|  |        |  |   jsr 17be0 <__modsi3>
    a516:	|  |        |  |   addq.l #8,sp
    a518:	|  |        |  |   movea.l 24(sp),a0
    a51c:	|  |        |  |   move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a520:	|  |        |  |   movea.l 24(sp),a0
    a524:	|  |        |  |   movea.l 72(a0),a0
    a528:	|  |        |  |   movea.l 4(a0),a1
    a52c:	|  |        |  |   movea.l 24(sp),a0
    a530:	|  |        |  |   move.l 84(a0),d0
    a534:	|  |        |  |   move.l d0,d1
    a536:	|  |        |  |   move.l d1,d0
    a538:	|  |        |  |   add.l d0,d0
    a53a:	|  |        |  |   add.l d1,d0
    a53c:	|  |        |  |   add.l d0,d0
    a53e:	|  |        |  |   add.l d0,d0
    a540:	|  |        |  |   lea (0,a1,d0.l),a0
    a544:	|  |        |  |   move.l 4(a0),d0
    a548:	|  |        |  |   movea.l 24(sp),a0
    a54c:	|  |        |  |   move.l d0,88(a0)
    a550:	|  |        +--|-- bra.w a628 <drawPeople+0x5c6>
				} else if (myAnim -> frames[thisPerson -> frameNum].noise) {
    a554:	|  |        |  \-> movea.l 20(sp),a0
    a558:	|  |        |      movea.l 4(a0),a1
    a55c:	|  |        |      movea.l 24(sp),a0
    a560:	|  |        |      move.l 84(a0),d0
    a564:	|  |        |      move.l d0,d1
    a566:	|  |        |      move.l d1,d0
    a568:	|  |        |      add.l d0,d0
    a56a:	|  |        |      add.l d1,d0
    a56c:	|  |        |      add.l d0,d0
    a56e:	|  |        |      add.l d0,d0
    a570:	|  |        |      lea (0,a1,d0.l),a0
    a574:	|  |        |      move.l 8(a0),d0
    a578:	|  |        +----- beq.w a628 <drawPeople+0x5c6>
					startNewFunctionNum (- myAnim -> frames[thisPerson -> frameNum].noise, 0, NULL, noStack, TRUE);
    a57c:	|  |        |      movea.l 1c82c <noStack>,a1
    a582:	|  |        |      movea.l 20(sp),a0
    a586:	|  |        |      move.l 4(a0),d2
    a58a:	|  |        |      movea.l 24(sp),a0
    a58e:	|  |        |      move.l 84(a0),d0
    a592:	|  |        |      move.l d0,d1
    a594:	|  |        |      move.l d1,d0
    a596:	|  |        |      add.l d0,d0
    a598:	|  |        |      add.l d1,d0
    a59a:	|  |        |      add.l d0,d0
    a59c:	|  |        |      add.l d0,d0
    a59e:	|  |        |      movea.l d2,a0
    a5a0:	|  |        |      adda.l d0,a0
    a5a2:	|  |        |      move.l 8(a0),d0
    a5a6:	|  |        |      neg.l d0
    a5a8:	|  |        |      pea 1 <_start+0x1>
    a5ac:	|  |        |      move.l a1,-(sp)
    a5ae:	|  |        |      clr.l -(sp)
    a5b0:	|  |        |      clr.l -(sp)
    a5b2:	|  |        |      move.l d0,-(sp)
    a5b4:	|  |        |      jsr 6b48 <startNewFunctionNum>
    a5ba:	|  |        |      lea 20(sp),sp
					thisPerson -> frameNum ++;
    a5be:	|  |        |      movea.l 24(sp),a0
    a5c2:	|  |        |      move.l 84(a0),d0
    a5c6:	|  |        |      addq.l #1,d0
    a5c8:	|  |        |      movea.l 24(sp),a0
    a5cc:	|  |        |      move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a5d0:	|  |        |      movea.l 24(sp),a0
    a5d4:	|  |        |      move.l 84(a0),d0
    a5d8:	|  |        |      movea.l 24(sp),a0
    a5dc:	|  |        |      movea.l 72(a0),a0
    a5e0:	|  |        |      move.l 8(a0),d1
    a5e4:	|  |        |      move.l d1,-(sp)
    a5e6:	|  |        |      move.l d0,-(sp)
    a5e8:	|  |        |      jsr 17be0 <__modsi3>
    a5ee:	|  |        |      addq.l #8,sp
    a5f0:	|  |        |      movea.l 24(sp),a0
    a5f4:	|  |        |      move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a5f8:	|  |        |      movea.l 24(sp),a0
    a5fc:	|  |        |      movea.l 72(a0),a0
    a600:	|  |        |      movea.l 4(a0),a1
    a604:	|  |        |      movea.l 24(sp),a0
    a608:	|  |        |      move.l 84(a0),d0
    a60c:	|  |        |      move.l d0,d1
    a60e:	|  |        |      move.l d1,d0
    a610:	|  |        |      add.l d0,d0
    a612:	|  |        |      add.l d1,d0
    a614:	|  |        |      add.l d0,d0
    a616:	|  |        |      add.l d0,d0
    a618:	|  |        |      lea (0,a1,d0.l),a0
    a61c:	|  |        |      move.l 4(a0),d0
    a620:	|  |        |      movea.l 24(sp),a0
    a624:	|  |        |      move.l d0,88(a0)
				}
			}
		}
		thisPerson = thisPerson -> next;
    a628:	|  |        \----> movea.l 24(sp),a0
    a62c:	|  |               move.l 36(a0),24(sp)
	while (thisPerson) {
    a632:	|  \-------------> tst.l 24(sp)
    a636:	\----------------- bne.w a084 <drawPeople+0x22>
	}
}
    a63a:	                   nop
    a63c:	                   nop
    a63e:	                   move.l (sp)+,d2
    a640:	                   lea 24(sp),sp
    a644:	                   rts

0000a646 <findPerson>:


struct onScreenPerson * findPerson (int v) {
    a646:	          subq.l #4,sp
	struct onScreenPerson * thisPerson = allPeople;
    a648:	          move.l 1c8c0 <allPeople>,(sp)
	while (thisPerson) {
    a64e:	      /-- bra.s a666 <findPerson+0x20>
		if (v == thisPerson -> thisType -> objectNum) break;
    a650:	/-----|-> movea.l (sp),a0
    a652:	|     |   movea.l 114(a0),a0
    a656:	|     |   move.l 4(a0),d0
    a65a:	|     |   cmp.l 8(sp),d0
    a65e:	|  /--|-- beq.s a66c <findPerson+0x26>
		thisPerson = thisPerson -> next;
    a660:	|  |  |   movea.l (sp),a0
    a662:	|  |  |   move.l 36(a0),(sp)
	while (thisPerson) {
    a666:	|  |  \-> tst.l (sp)
    a668:	\--|----- bne.s a650 <findPerson+0xa>
    a66a:	   |  /-- bra.s a66e <findPerson+0x28>
		if (v == thisPerson -> thisType -> objectNum) break;
    a66c:	   \--|-> nop
	}
	return thisPerson;
    a66e:	      \-> move.l (sp),d0
}
    a670:	          addq.l #4,sp
    a672:	          rts

0000a674 <floatCharacter>:

BOOL floatCharacter (int f, int objNum) {
    a674:	       subq.l #4,sp
	struct onScreenPerson * moveMe = findPerson (objNum);
    a676:	       move.l 12(sp),-(sp)
    a67a:	       jsr a646 <findPerson>
    a680:	       addq.l #4,sp
    a682:	       move.l d0,(sp)
	if (! moveMe) return FALSE;
    a684:	   /-- bne.s a68a <floatCharacter+0x16>
    a686:	   |   clr.w d0
    a688:	/--|-- bra.s a694 <floatCharacter+0x20>
	moveMe -> floaty = f;
    a68a:	|  \-> movea.l (sp),a0
    a68c:	|      move.l 8(sp),24(a0)
	return TRUE;
    a692:	|      moveq #1,d0
}
    a694:	\----> addq.l #4,sp
    a696:	       rts

0000a698 <forceWalkingPerson>:

BOOL forceWalkingPerson (int x, int y, int objNum, struct loadedFunction * func, int di) {
    a698:	          subq.l #4,sp
    if (x == 0 && y == 0) return FALSE;
    a69a:	          tst.l 8(sp)
    a69e:	      /-- bne.s a6ac <forceWalkingPerson+0x14>
    a6a0:	      |   tst.l 12(sp)
    a6a4:	      +-- bne.s a6ac <forceWalkingPerson+0x14>
    a6a6:	      |   clr.w d0
    a6a8:	/-----|-- bra.w a73e <forceWalkingPerson+0xa6>
    struct onScreenPerson * moveMe = findPerson(objNum);
    a6ac:	|     \-> move.l 16(sp),-(sp)
    a6b0:	|         jsr a646 <findPerson>
    a6b6:	|         addq.l #4,sp
    a6b8:	|         move.l d0,(sp)
    if (!moveMe) return FALSE;
    a6ba:	|     /-- bne.s a6c0 <forceWalkingPerson+0x28>
    a6bc:	|     |   clr.w d0
    a6be:	+-----|-- bra.s a73e <forceWalkingPerson+0xa6>

    if (moveMe->continueAfterWalking) abortFunction(moveMe->continueAfterWalking);
    a6c0:	|     \-> movea.l (sp),a0
    a6c2:	|         move.l 68(a0),d0
    a6c6:	|     /-- beq.s a6d8 <forceWalkingPerson+0x40>
    a6c8:	|     |   movea.l (sp),a0
    a6ca:	|     |   move.l 68(a0),d0
    a6ce:	|     |   move.l d0,-(sp)
    a6d0:	|     |   jsr 478c <abortFunction>
    a6d6:	|     |   addq.l #4,sp
    moveMe->walking = TRUE;
    a6d8:	|     \-> movea.l (sp),a0
    a6da:	|         move.w #1,64(a0)
    moveMe->continueAfterWalking = NULL;
    a6e0:	|         movea.l (sp),a0
    a6e2:	|         clr.l 68(a0)
    moveMe->directionWhenDoneWalking = di;
    a6e6:	|         movea.l (sp),a0
    a6e8:	|         move.l 24(sp),110(a0)

    moveMe->walkToX = x;
    a6ee:	|         movea.l (sp),a0
    a6f0:	|         move.l 8(sp),40(a0)
    moveMe->walkToY = y;
    a6f6:	|         movea.l (sp),a0
    a6f8:	|         move.l 12(sp),44(a0)

    // Let's pretend the start and end points are both in the same
    // polygon (which one isn't important)
    moveMe->inPoly = 0;
    a6fe:	|         movea.l (sp),a0
    a700:	|         clr.l 56(a0)
    moveMe->walkToPoly = 0;
    a704:	|         movea.l (sp),a0
    a706:	|         clr.l 60(a0)

    doBorderStuff(moveMe);
    a70a:	|         move.l (sp),-(sp)
    a70c:	|         jsr 99a8 <doBorderStuff>
    a712:	|         addq.l #4,sp
    if (walkMe(moveMe, TRUE) || moveMe->spinning) {
    a714:	|         pea 1 <_start+0x1>
    a718:	|         move.l 4(sp),-(sp)
    a71c:	|         jsr bf08 <walkMe>
    a722:	|         addq.l #8,sp
    a724:	|         tst.w d0
    a726:	|     /-- bne.s a730 <forceWalkingPerson+0x98>
    a728:	|     |   movea.l (sp),a0
    a72a:	|     |   move.w 66(a0),d0
    a72e:	|  /--|-- beq.s a73c <forceWalkingPerson+0xa4>
        moveMe->continueAfterWalking = func;
    a730:	|  |  \-> movea.l (sp),a0
    a732:	|  |      move.l 20(sp),68(a0)
        return TRUE;
    a738:	|  |      moveq #1,d0
    a73a:	+--|----- bra.s a73e <forceWalkingPerson+0xa6>
    } else {
        return FALSE;
    a73c:	|  \----> clr.w d0
    }
}
    a73e:	\-------> addq.l #4,sp
    a740:	          rts

0000a742 <handleClosestPoint>:

BOOL handleClosestPoint (int * setX, int * setY, int * setPoly) {
    a742:	                lea -56(sp),sp
    a746:	                move.l d2,-(sp)
	int gotX = 320, gotY = 200, gotPoly = -1, i, j, xTest1, yTest1,
    a748:	                move.l #320,56(sp)
    a750:	                move.l #200,52(sp)
    a758:	                moveq #-1,d0
    a75a:	                move.l d0,48(sp)
		xTest2, yTest2, closestX, closestY, oldJ, currentDistance = 0xFFFFF,
    a75e:	                move.l #1048575,32(sp)
		thisDistance;

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
    a766:	                clr.l 44(sp)
    a76a:	   /----------- bra.w a942 <handleClosestPoint+0x200>
		oldJ = currentFloor -> polygon[i].numVertices - 1;
    a76e:	/--|----------> movea.l 1c978 <currentFloor>,a0
    a774:	|  |            move.l 12(a0),d1
    a778:	|  |            move.l 44(sp),d0
    a77c:	|  |            lsl.l #3,d0
    a77e:	|  |            movea.l d1,a0
    a780:	|  |            adda.l d0,a0
    a782:	|  |            move.l (a0),d0
    a784:	|  |            move.l d0,d1
    a786:	|  |            subq.l #1,d1
    a788:	|  |            move.l d1,36(sp)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
    a78c:	|  |            clr.l 40(sp)
    a790:	|  |     /----- bra.w a920 <handleClosestPoint+0x1de>
			xTest1 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[j]].x;
    a794:	|  |  /--|----> movea.l 1c978 <currentFloor>,a0
    a79a:	|  |  |  |      move.l 4(a0),d1
    a79e:	|  |  |  |      movea.l 1c978 <currentFloor>,a0
    a7a4:	|  |  |  |      movea.l 12(a0),a0
    a7a8:	|  |  |  |      move.l 44(sp),d0
    a7ac:	|  |  |  |      lsl.l #3,d0
    a7ae:	|  |  |  |      adda.l d0,a0
    a7b0:	|  |  |  |      movea.l 4(a0),a0
    a7b4:	|  |  |  |      move.l 40(sp),d0
    a7b8:	|  |  |  |      add.l d0,d0
    a7ba:	|  |  |  |      add.l d0,d0
    a7bc:	|  |  |  |      adda.l d0,a0
    a7be:	|  |  |  |      move.l (a0),d0
    a7c0:	|  |  |  |      lsl.l #3,d0
    a7c2:	|  |  |  |      movea.l d1,a0
    a7c4:	|  |  |  |      adda.l d0,a0
    a7c6:	|  |  |  |      move.l (a0),28(sp)
			yTest1 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[j]].y;
    a7ca:	|  |  |  |      movea.l 1c978 <currentFloor>,a0
    a7d0:	|  |  |  |      move.l 4(a0),d1
    a7d4:	|  |  |  |      movea.l 1c978 <currentFloor>,a0
    a7da:	|  |  |  |      movea.l 12(a0),a0
    a7de:	|  |  |  |      move.l 44(sp),d0
    a7e2:	|  |  |  |      lsl.l #3,d0
    a7e4:	|  |  |  |      adda.l d0,a0
    a7e6:	|  |  |  |      movea.l 4(a0),a0
    a7ea:	|  |  |  |      move.l 40(sp),d0
    a7ee:	|  |  |  |      add.l d0,d0
    a7f0:	|  |  |  |      add.l d0,d0
    a7f2:	|  |  |  |      adda.l d0,a0
    a7f4:	|  |  |  |      move.l (a0),d0
    a7f6:	|  |  |  |      lsl.l #3,d0
    a7f8:	|  |  |  |      movea.l d1,a0
    a7fa:	|  |  |  |      adda.l d0,a0
    a7fc:	|  |  |  |      move.l 4(a0),24(sp)
			xTest2 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[oldJ]].x;
    a802:	|  |  |  |      movea.l 1c978 <currentFloor>,a0
    a808:	|  |  |  |      move.l 4(a0),d1
    a80c:	|  |  |  |      movea.l 1c978 <currentFloor>,a0
    a812:	|  |  |  |      movea.l 12(a0),a0
    a816:	|  |  |  |      move.l 44(sp),d0
    a81a:	|  |  |  |      lsl.l #3,d0
    a81c:	|  |  |  |      adda.l d0,a0
    a81e:	|  |  |  |      movea.l 4(a0),a0
    a822:	|  |  |  |      move.l 36(sp),d0
    a826:	|  |  |  |      add.l d0,d0
    a828:	|  |  |  |      add.l d0,d0
    a82a:	|  |  |  |      adda.l d0,a0
    a82c:	|  |  |  |      move.l (a0),d0
    a82e:	|  |  |  |      lsl.l #3,d0
    a830:	|  |  |  |      movea.l d1,a0
    a832:	|  |  |  |      adda.l d0,a0
    a834:	|  |  |  |      move.l (a0),20(sp)
			yTest2 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[oldJ]].y;
    a838:	|  |  |  |      movea.l 1c978 <currentFloor>,a0
    a83e:	|  |  |  |      move.l 4(a0),d1
    a842:	|  |  |  |      movea.l 1c978 <currentFloor>,a0
    a848:	|  |  |  |      movea.l 12(a0),a0
    a84c:	|  |  |  |      move.l 44(sp),d0
    a850:	|  |  |  |      lsl.l #3,d0
    a852:	|  |  |  |      adda.l d0,a0
    a854:	|  |  |  |      movea.l 4(a0),a0
    a858:	|  |  |  |      move.l 36(sp),d0
    a85c:	|  |  |  |      add.l d0,d0
    a85e:	|  |  |  |      add.l d0,d0
    a860:	|  |  |  |      adda.l d0,a0
    a862:	|  |  |  |      move.l (a0),d0
    a864:	|  |  |  |      lsl.l #3,d0
    a866:	|  |  |  |      movea.l d1,a0
    a868:	|  |  |  |      adda.l d0,a0
    a86a:	|  |  |  |      move.l 4(a0),16(sp)
			closestPointOnLine (&closestX, &closestY, xTest1, yTest1, xTest2, yTest2, *setX, *setY);
    a870:	|  |  |  |      movea.l 68(sp),a0
    a874:	|  |  |  |      move.l (a0),d1
    a876:	|  |  |  |      movea.l 64(sp),a0
    a87a:	|  |  |  |      move.l (a0),d0
    a87c:	|  |  |  |      move.l d1,-(sp)
    a87e:	|  |  |  |      move.l d0,-(sp)
    a880:	|  |  |  |      move.l 24(sp),-(sp)
    a884:	|  |  |  |      move.l 32(sp),-(sp)
    a888:	|  |  |  |      move.l 40(sp),-(sp)
    a88c:	|  |  |  |      move.l 48(sp),-(sp)
    a890:	|  |  |  |      lea 28(sp),a0
    a894:	|  |  |  |      move.l a0,-(sp)
    a896:	|  |  |  |      lea 36(sp),a0
    a89a:	|  |  |  |      move.l a0,-(sp)
    a89c:	|  |  |  |      jsr 15fd6 <closestPointOnLine>
    a8a2:	|  |  |  |      lea 32(sp),sp

			xTest1 = *setX - closestX;
    a8a6:	|  |  |  |      movea.l 64(sp),a0
    a8aa:	|  |  |  |      move.l (a0),d0
    a8ac:	|  |  |  |      move.l 8(sp),d1
    a8b0:	|  |  |  |      move.l d0,d2
    a8b2:	|  |  |  |      sub.l d1,d2
    a8b4:	|  |  |  |      move.l d2,28(sp)
			yTest1 = *setY - closestY;
    a8b8:	|  |  |  |      movea.l 68(sp),a0
    a8bc:	|  |  |  |      move.l (a0),d0
    a8be:	|  |  |  |      move.l 4(sp),d1
    a8c2:	|  |  |  |      move.l d0,d2
    a8c4:	|  |  |  |      sub.l d1,d2
    a8c6:	|  |  |  |      move.l d2,24(sp)
			thisDistance = xTest1 * xTest1 + yTest1 * yTest1;
    a8ca:	|  |  |  |      move.l 28(sp),-(sp)
    a8ce:	|  |  |  |      move.l 32(sp),-(sp)
    a8d2:	|  |  |  |      jsr 17b34 <__mulsi3>
    a8d8:	|  |  |  |      addq.l #8,sp
    a8da:	|  |  |  |      move.l d0,d2
    a8dc:	|  |  |  |      move.l 24(sp),-(sp)
    a8e0:	|  |  |  |      move.l 28(sp),-(sp)
    a8e4:	|  |  |  |      jsr 17b34 <__mulsi3>
    a8ea:	|  |  |  |      addq.l #8,sp
    a8ec:	|  |  |  |      move.l d2,d1
    a8ee:	|  |  |  |      add.l d0,d1
    a8f0:	|  |  |  |      move.l d1,12(sp)


			if (thisDistance < currentDistance) {
    a8f4:	|  |  |  |      move.l 12(sp),d2
    a8f8:	|  |  |  |      cmp.l 32(sp),d2
    a8fc:	|  |  |  |  /-- bge.s a916 <handleClosestPoint+0x1d4>

				currentDistance = thisDistance;
    a8fe:	|  |  |  |  |   move.l 12(sp),32(sp)
				gotX = closestX;
    a904:	|  |  |  |  |   move.l 8(sp),56(sp)
				gotY = closestY;
    a90a:	|  |  |  |  |   move.l 4(sp),52(sp)
				gotPoly = i;
    a910:	|  |  |  |  |   move.l 44(sp),48(sp)
			}
			oldJ = j;
    a916:	|  |  |  |  \-> move.l 40(sp),36(sp)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
    a91c:	|  |  |  |      addq.l #1,40(sp)
    a920:	|  |  |  \----> movea.l 1c978 <currentFloor>,a0
    a926:	|  |  |         move.l 12(a0),d1
    a92a:	|  |  |         move.l 44(sp),d0
    a92e:	|  |  |         lsl.l #3,d0
    a930:	|  |  |         movea.l d1,a0
    a932:	|  |  |         adda.l d0,a0
    a934:	|  |  |         move.l (a0),d0
    a936:	|  |  |         cmp.l 40(sp),d0
    a93a:	|  |  \-------- bgt.w a794 <handleClosestPoint+0x52>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
    a93e:	|  |            addq.l #1,44(sp)
    a942:	|  \----------> movea.l 1c978 <currentFloor>,a0
    a948:	|               move.l 8(a0),d0
    a94c:	|               cmp.l 44(sp),d0
    a950:	\-------------- bgt.w a76e <handleClosestPoint+0x2c>
		}
	}

	if (gotPoly == -1) return FALSE;
    a954:	                moveq #-1,d0
    a956:	                cmp.l 48(sp),d0
    a95a:	            /-- bne.s a960 <handleClosestPoint+0x21e>
    a95c:	            |   clr.w d0
    a95e:	         /--|-- bra.s a97a <handleClosestPoint+0x238>
	*setX = gotX;
    a960:	         |  \-> movea.l 64(sp),a0
    a964:	         |      move.l 56(sp),(a0)
	*setY = gotY;
    a968:	         |      movea.l 68(sp),a0
    a96c:	         |      move.l 52(sp),(a0)
	*setPoly = gotPoly;
    a970:	         |      movea.l 72(sp),a0
    a974:	         |      move.l 48(sp),(a0)

	return TRUE;
    a978:	         |      moveq #1,d0
}
    a97a:	         \----> move.l (sp)+,d2
    a97c:	                lea 56(sp),sp
    a980:	                rts

0000a982 <initPeople>:


BOOL initPeople () {
	personRegion.sX = 0;
    a982:	clr.l 1c8d4 <personRegion+0x10>
	personRegion.sY = 0;
    a988:	clr.l 1c8d8 <personRegion+0x14>
	personRegion.di = -1;
    a98e:	moveq #-1,d0
    a990:	move.l d0,1c8dc <personRegion+0x18>
	allScreenRegions = NULL;
    a996:	clr.l 1c96c <allScreenRegions>

	return TRUE;
    a99c:	moveq #1,d0
}
    a99e:	rts

0000a9a0 <jumpPerson>:

void jumpPerson (int x, int y, int objNum) {
    a9a0:	          subq.l #4,sp
    a9a2:	          move.l d2,-(sp)
    if (x == 0 && y == 0) return;
    a9a4:	          tst.l 12(sp)
    a9a8:	      /-- bne.s a9b0 <jumpPerson+0x10>
    a9aa:	      |   tst.l 16(sp)
    a9ae:	/-----|-- beq.s aa24 <jumpPerson+0x84>
    struct onScreenPerson * moveMe = findPerson(objNum);
    a9b0:	|     \-> move.l 20(sp),-(sp)
    a9b4:	|         jsr a646 <findPerson>
    a9ba:	|         addq.l #4,sp
    a9bc:	|         move.l d0,4(sp)
    if (!moveMe) return;
    a9c0:	|  /----- beq.s aa28 <jumpPerson+0x88>
    if (moveMe->continueAfterWalking) abortFunction(moveMe->continueAfterWalking);
    a9c2:	|  |      movea.l 4(sp),a0
    a9c6:	|  |      move.l 68(a0),d0
    a9ca:	|  |  /-- beq.s a9de <jumpPerson+0x3e>
    a9cc:	|  |  |   movea.l 4(sp),a0
    a9d0:	|  |  |   move.l 68(a0),d0
    a9d4:	|  |  |   move.l d0,-(sp)
    a9d6:	|  |  |   jsr 478c <abortFunction>
    a9dc:	|  |  |   addq.l #4,sp
    moveMe->continueAfterWalking = NULL;
    a9de:	|  |  \-> movea.l 4(sp),a0
    a9e2:	|  |      clr.l 68(a0)
    moveMe->walking = FALSE;
    a9e6:	|  |      movea.l 4(sp),a0
    a9ea:	|  |      clr.w 64(a0)
    moveMe->spinning = FALSE;
    a9ee:	|  |      movea.l 4(sp),a0
    a9f2:	|  |      clr.w 66(a0)
    moveAndScale(moveMe, x, y);
    a9f6:	|  |      move.l 16(sp),-(sp)
    a9fa:	|  |      jsr 175b2 <__floatsisf>
    aa00:	|  |      addq.l #4,sp
    aa02:	|  |      move.l d0,d2
    aa04:	|  |      move.l 12(sp),-(sp)
    aa08:	|  |      jsr 175b2 <__floatsisf>
    aa0e:	|  |      addq.l #4,sp
    aa10:	|  |      move.l d2,-(sp)
    aa12:	|  |      move.l d0,-(sp)
    aa14:	|  |      move.l 12(sp),-(sp)
    aa18:	|  |      jsr ad8e <moveAndScale>
    aa1e:	|  |      lea 12(sp),sp
    aa22:	|  |  /-- bra.s aa2a <jumpPerson+0x8a>
    if (x == 0 && y == 0) return;
    aa24:	\--|--|-> nop
    aa26:	   |  +-- bra.s aa2a <jumpPerson+0x8a>
    if (!moveMe) return;
    aa28:	   \--|-> nop
}
    aa2a:	      \-> move.l (sp)+,d2
    aa2c:	          addq.l #4,sp
    aa2e:	          rts

0000aa30 <killAllPeople>:


void killAllPeople () {
    aa30:	          subq.l #8,sp
    aa32:	          move.l a6,-(sp)
	struct onScreenPerson * killPeople;
	while (allPeople) {
    aa34:	   /----- bra.s aaa0 <killAllPeople+0x70>
		if (allPeople -> continueAfterWalking) abortFunction (allPeople -> continueAfterWalking);
    aa36:	/--|----> movea.l 1c8c0 <allPeople>,a0
    aa3c:	|  |      move.l 68(a0),d0
    aa40:	|  |  /-- beq.s aa56 <killAllPeople+0x26>
    aa42:	|  |  |   movea.l 1c8c0 <allPeople>,a0
    aa48:	|  |  |   move.l 68(a0),d0
    aa4c:	|  |  |   move.l d0,-(sp)
    aa4e:	|  |  |   jsr 478c <abortFunction>
    aa54:	|  |  |   addq.l #4,sp
		allPeople -> continueAfterWalking = NULL;
    aa56:	|  |  \-> movea.l 1c8c0 <allPeople>,a0
    aa5c:	|  |      clr.l 68(a0)
		killPeople = allPeople;
    aa60:	|  |      move.l 1c8c0 <allPeople>,8(sp)
		allPeople = allPeople -> next;
    aa68:	|  |      movea.l 1c8c0 <allPeople>,a0
    aa6e:	|  |      move.l 36(a0),d0
    aa72:	|  |      move.l d0,1c8c0 <allPeople>
		removeObjectType (killPeople -> thisType);
    aa78:	|  |      movea.l 8(sp),a0
    aa7c:	|  |      move.l 114(a0),d0
    aa80:	|  |      move.l d0,-(sp)
    aa82:	|  |      jsr d860 <removeObjectType>
    aa88:	|  |      addq.l #4,sp
		FreeVec(killPeople);
    aa8a:	|  |      move.l 8(sp),4(sp)
    aa90:	|  |      move.l 1c85c <SysBase>,d0
    aa96:	|  |      movea.l d0,a6
    aa98:	|  |      movea.l 4(sp),a1
    aa9c:	|  |      jsr -690(a6)
	while (allPeople) {
    aaa0:	|  \----> move.l 1c8c0 <allPeople>,d0
    aaa6:	\-------- bne.s aa36 <killAllPeople+0x6>
	}
}
    aaa8:	          nop
    aaaa:	          nop
    aaac:	          movea.l (sp)+,a6
    aaae:	          addq.l #8,sp
    aab0:	          rts

0000aab2 <killMostPeople>:

void killMostPeople() {
    aab2:	          lea -12(sp),sp
    aab6:	          move.l a6,-(sp)
    struct onScreenPerson *killPeople;
    struct onScreenPerson **lookyHere = &allPeople;
    aab8:	          move.l #116928,12(sp)

    while (*lookyHere) {
    aac0:	   /----- bra.w ab46 <killMostPeople+0x94>
        if ((*lookyHere)->extra & EXTRA_NOREMOVE) {
    aac4:	/--|----> movea.l 12(sp),a0
    aac8:	|  |      movea.l (a0),a0
    aaca:	|  |      move.l 118(a0),d0
    aace:	|  |      moveq #32,d1
    aad0:	|  |      and.l d1,d0
    aad2:	|  |  /-- beq.s aae4 <killMostPeople+0x32>
            lookyHere = &(*lookyHere)->next;
    aad4:	|  |  |   movea.l 12(sp),a0
    aad8:	|  |  |   move.l (a0),d0
    aada:	|  |  |   moveq #36,d1
    aadc:	|  |  |   add.l d0,d1
    aade:	|  |  |   move.l d1,12(sp)
    aae2:	|  +--|-- bra.s ab46 <killMostPeople+0x94>
        } else {
            killPeople = (*lookyHere);
    aae4:	|  |  \-> movea.l 12(sp),a0
    aae8:	|  |      move.l (a0),8(sp)

            // Change last pointer to NEXT in the list instead
            (*lookyHere) = killPeople->next;
    aaec:	|  |      movea.l 8(sp),a0
    aaf0:	|  |      move.l 36(a0),d0
    aaf4:	|  |      movea.l 12(sp),a0
    aaf8:	|  |      move.l d0,(a0)

            // Gone from the list... now free some memory
            if (killPeople->continueAfterWalking) abortFunction(killPeople->continueAfterWalking);
    aafa:	|  |      movea.l 8(sp),a0
    aafe:	|  |      move.l 68(a0),d0
    ab02:	|  |  /-- beq.s ab16 <killMostPeople+0x64>
    ab04:	|  |  |   movea.l 8(sp),a0
    ab08:	|  |  |   move.l 68(a0),d0
    ab0c:	|  |  |   move.l d0,-(sp)
    ab0e:	|  |  |   jsr 478c <abortFunction>
    ab14:	|  |  |   addq.l #4,sp
            killPeople->continueAfterWalking = NULL;
    ab16:	|  |  \-> movea.l 8(sp),a0
    ab1a:	|  |      clr.l 68(a0)
            removeObjectType(killPeople->thisType);
    ab1e:	|  |      movea.l 8(sp),a0
    ab22:	|  |      move.l 114(a0),d0
    ab26:	|  |      move.l d0,-(sp)
    ab28:	|  |      jsr d860 <removeObjectType>
    ab2e:	|  |      addq.l #4,sp
            FreeVec(killPeople);
    ab30:	|  |      move.l 8(sp),4(sp)
    ab36:	|  |      move.l 1c85c <SysBase>,d0
    ab3c:	|  |      movea.l d0,a6
    ab3e:	|  |      movea.l 4(sp),a1
    ab42:	|  |      jsr -690(a6)
    while (*lookyHere) {
    ab46:	|  \----> movea.l 12(sp),a0
    ab4a:	|         move.l (a0),d0
    ab4c:	\-------- bne.w aac4 <killMostPeople+0x12>
        }
    }
}
    ab50:	          nop
    ab52:	          nop
    ab54:	          movea.l (sp)+,a6
    ab56:	          lea 12(sp),sp
    ab5a:	          rts

0000ab5c <makeSilent>:
//	db ("End of loadPeople");
	return TRUE;
}

void makeSilent (struct onScreenPerson me) {
	setFrames (&me, ANI_STAND);
    ab5c:	clr.l -(sp)
    ab5e:	move.l sp,d0
    ab60:	addq.l #8,d0
    ab62:	move.l d0,-(sp)
    ab64:	jsr 81e4 <setFrames>
    ab6a:	addq.l #8,sp
}
    ab6c:	nop
    ab6e:	rts

0000ab70 <makeWalkingPerson>:

BOOL makeWalkingPerson (int x, int y, int objNum, struct loadedFunction * func, int di) {
    ab70:	          lea -12(sp),sp
    ab74:	          move.l d2,-(sp)
	if (x == 0 && y == 0) return FALSE;
    ab76:	          tst.l 20(sp)
    ab7a:	      /-- bne.s ab88 <makeWalkingPerson+0x18>
    ab7c:	      |   tst.l 24(sp)
    ab80:	      +-- bne.s ab88 <makeWalkingPerson+0x18>
    ab82:	      |   clr.w d0
    ab84:	/-----|-- bra.w ad20 <makeWalkingPerson+0x1b0>
	if (currentFloor -> numPolygons == 0) return FALSE;
    ab88:	|     \-> movea.l 1c978 <currentFloor>,a0
    ab8e:	|         move.l 8(a0),d0
    ab92:	|     /-- bne.s ab9a <makeWalkingPerson+0x2a>
    ab94:	|     |   clr.w d0
    ab96:	+-----|-- bra.w ad20 <makeWalkingPerson+0x1b0>
	struct onScreenPerson * moveMe = findPerson (objNum);
    ab9a:	|     \-> move.l 28(sp),-(sp)
    ab9e:	|         jsr a646 <findPerson>
    aba4:	|         addq.l #4,sp
    aba6:	|         move.l d0,12(sp)
	if (! moveMe) return FALSE;
    abaa:	|     /-- bne.s abb2 <makeWalkingPerson+0x42>
    abac:	|     |   clr.w d0
    abae:	+-----|-- bra.w ad20 <makeWalkingPerson+0x1b0>

	if (moveMe -> continueAfterWalking) abortFunction (moveMe -> continueAfterWalking);
    abb2:	|     \-> movea.l 12(sp),a0
    abb6:	|         move.l 68(a0),d0
    abba:	|     /-- beq.s abce <makeWalkingPerson+0x5e>
    abbc:	|     |   movea.l 12(sp),a0
    abc0:	|     |   move.l 68(a0),d0
    abc4:	|     |   move.l d0,-(sp)
    abc6:	|     |   jsr 478c <abortFunction>
    abcc:	|     |   addq.l #4,sp
	moveMe -> continueAfterWalking = NULL;
    abce:	|     \-> movea.l 12(sp),a0
    abd2:	|         clr.l 68(a0)
	moveMe -> walking = TRUE;
    abd6:	|         movea.l 12(sp),a0
    abda:	|         move.w #1,64(a0)
	moveMe -> directionWhenDoneWalking = di;
    abe0:	|         movea.l 12(sp),a0
    abe4:	|         move.l 36(sp),110(a0)

	moveMe -> walkToX = x;
    abea:	|         movea.l 12(sp),a0
    abee:	|         move.l 20(sp),40(a0)
	moveMe -> walkToY = y;
    abf4:	|         movea.l 12(sp),a0
    abf8:	|         move.l 24(sp),44(a0)
	moveMe -> walkToPoly = inFloor (x, y);
    abfe:	|         move.l 24(sp),-(sp)
    ac02:	|         move.l 24(sp),-(sp)
    ac06:	|         jsr 164d8 <inFloor>
    ac0c:	|         addq.l #8,sp
    ac0e:	|         movea.l 12(sp),a0
    ac12:	|         move.l d0,60(a0)
	if (moveMe -> walkToPoly == -1) {
    ac16:	|         movea.l 12(sp),a0
    ac1a:	|         move.l 60(a0),d0
    ac1e:	|         moveq #-1,d1
    ac20:	|         cmp.l d0,d1
    ac22:	|     /-- bne.s ac52 <makeWalkingPerson+0xe2>
		if (! handleClosestPoint (&moveMe -> walkToX, &moveMe -> walkToY, &moveMe -> walkToPoly)) return FALSE;
    ac24:	|     |   movea.w #60,a0
    ac28:	|     |   adda.l 12(sp),a0
    ac2c:	|     |   moveq #44,d1
    ac2e:	|     |   add.l 12(sp),d1
    ac32:	|     |   moveq #40,d0
    ac34:	|     |   add.l 12(sp),d0
    ac38:	|     |   move.l a0,-(sp)
    ac3a:	|     |   move.l d1,-(sp)
    ac3c:	|     |   move.l d0,-(sp)
    ac3e:	|     |   jsr a742 <handleClosestPoint>
    ac44:	|     |   lea 12(sp),sp
    ac48:	|     |   tst.w d0
    ac4a:	|     +-- bne.s ac52 <makeWalkingPerson+0xe2>
    ac4c:	|     |   clr.w d0
    ac4e:	+-----|-- bra.w ad20 <makeWalkingPerson+0x1b0>
	}

	moveMe -> inPoly = inFloor (moveMe -> x, moveMe -> y);
    ac52:	|     \-> movea.l 12(sp),a0
    ac56:	|         move.l 4(a0),d0
    ac5a:	|         move.l d0,-(sp)
    ac5c:	|         jsr 1754a <__fixsfsi>
    ac62:	|         addq.l #4,sp
    ac64:	|         move.l d0,d2
    ac66:	|         movea.l 12(sp),a0
    ac6a:	|         move.l (a0),d0
    ac6c:	|         move.l d0,-(sp)
    ac6e:	|         jsr 1754a <__fixsfsi>
    ac74:	|         addq.l #4,sp
    ac76:	|         move.l d2,-(sp)
    ac78:	|         move.l d0,-(sp)
    ac7a:	|         jsr 164d8 <inFloor>
    ac80:	|         addq.l #8,sp
    ac82:	|         movea.l 12(sp),a0
    ac86:	|         move.l d0,56(a0)
	if (moveMe -> inPoly == -1) {
    ac8a:	|         movea.l 12(sp),a0
    ac8e:	|         move.l 56(a0),d0
    ac92:	|         moveq #-1,d1
    ac94:	|         cmp.l d0,d1
    ac96:	|     /-- bne.s ace8 <makeWalkingPerson+0x178>
		int xxx = moveMe -> x, yyy = moveMe -> y;
    ac98:	|     |   movea.l 12(sp),a0
    ac9c:	|     |   move.l (a0),d0
    ac9e:	|     |   move.l d0,-(sp)
    aca0:	|     |   jsr 1754a <__fixsfsi>
    aca6:	|     |   addq.l #4,sp
    aca8:	|     |   move.l d0,8(sp)
    acac:	|     |   movea.l 12(sp),a0
    acb0:	|     |   move.l 4(a0),d0
    acb4:	|     |   move.l d0,-(sp)
    acb6:	|     |   jsr 1754a <__fixsfsi>
    acbc:	|     |   addq.l #4,sp
    acbe:	|     |   move.l d0,4(sp)
		if (! handleClosestPoint (&xxx, &yyy, &moveMe -> inPoly)) return FALSE;
    acc2:	|     |   moveq #56,d0
    acc4:	|     |   add.l 12(sp),d0
    acc8:	|     |   move.l d0,-(sp)
    acca:	|     |   lea 8(sp),a0
    acce:	|     |   move.l a0,-(sp)
    acd0:	|     |   moveq #16,d0
    acd2:	|     |   add.l sp,d0
    acd4:	|     |   move.l d0,-(sp)
    acd6:	|     |   jsr a742 <handleClosestPoint>
    acdc:	|     |   lea 12(sp),sp
    ace0:	|     |   tst.w d0
    ace2:	|     +-- bne.s ace8 <makeWalkingPerson+0x178>
    ace4:	|     |   clr.w d0
    ace6:	+-----|-- bra.s ad20 <makeWalkingPerson+0x1b0>
	}

	doBorderStuff (moveMe);
    ace8:	|     \-> move.l 12(sp),-(sp)
    acec:	|         jsr 99a8 <doBorderStuff>
    acf2:	|         addq.l #4,sp
	if (walkMe (moveMe, FALSE) || moveMe -> spinning) {
    acf4:	|         clr.l -(sp)
    acf6:	|         move.l 16(sp),-(sp)
    acfa:	|         jsr bf08 <walkMe>
    ad00:	|         addq.l #8,sp
    ad02:	|         tst.w d0
    ad04:	|     /-- bne.s ad10 <makeWalkingPerson+0x1a0>
    ad06:	|     |   movea.l 12(sp),a0
    ad0a:	|     |   move.w 66(a0),d0
    ad0e:	|  /--|-- beq.s ad1e <makeWalkingPerson+0x1ae>
		moveMe -> continueAfterWalking = func;
    ad10:	|  |  \-> movea.l 12(sp),a0
    ad14:	|  |      move.l 32(sp),68(a0)
		return TRUE;
    ad1a:	|  |      moveq #1,d0
    ad1c:	+--|----- bra.s ad20 <makeWalkingPerson+0x1b0>
	} else {
		return FALSE;
    ad1e:	|  \----> clr.w d0
	}
}
    ad20:	\-------> move.l (sp)+,d2
    ad22:	          lea 12(sp),sp
    ad26:	          rts

0000ad28 <makeNullAnim>:


struct personaAnimation * makeNullAnim () {
    ad28:	       lea -16(sp),sp
    ad2c:	       move.l a6,-(sp)

	struct personaAnimation * newAnim	= AllocVec(sizeof(struct personaAnimation),MEMF_ANY);
    ad2e:	       moveq #12,d0
    ad30:	       move.l d0,16(sp)
    ad34:	       clr.l 12(sp)
    ad38:	       move.l 1c85c <SysBase>,d0
    ad3e:	       movea.l d0,a6
    ad40:	       move.l 16(sp),d0
    ad44:	       move.l 12(sp),d1
    ad48:	       jsr -684(a6)
    ad4c:	       move.l d0,8(sp)
    ad50:	       move.l 8(sp),d0
    ad54:	       move.l d0,4(sp)
    if(newAnim == 0) {
    ad58:	   /-- bne.s ad6c <makeNullAnim+0x44>
     	KPrintF("makeNullAnim: Can't reserve Memory\n");
    ad5a:	   |   pea 1909f <PutChar+0x1455>
    ad60:	   |   jsr 17176 <KPrintF>
    ad66:	   |   addq.l #4,sp
        return NULL;    
    ad68:	   |   moveq #0,d0
    ad6a:	/--|-- bra.s ad86 <makeNullAnim+0x5e>
    }  

	newAnim -> theSprites		= NULL;
    ad6c:	|  \-> movea.l 4(sp),a0
    ad70:	|      clr.l (a0)
	newAnim -> numFrames		= 0;
    ad72:	|      movea.l 4(sp),a0
    ad76:	|      clr.l 8(a0)
	newAnim -> frames			= NULL;
    ad7a:	|      movea.l 4(sp),a0
    ad7e:	|      clr.l 4(a0)
	return newAnim;
    ad82:	|      move.l 4(sp),d0
}
    ad86:	\----> movea.l (sp)+,a6
    ad88:	       lea 16(sp),sp
    ad8c:	       rts

0000ad8e <moveAndScale>:

void moveAndScale (struct onScreenPerson *me, FLOAT x, FLOAT y) {
    ad8e:	    move.l d2,-(sp)
	me->x = x;
    ad90:	    movea.l 8(sp),a0
    ad94:	    move.l 12(sp),(a0)
	me->y = y;
    ad98:	    movea.l 8(sp),a0
    ad9c:	    move.l 16(sp),4(a0)
	me->oldx = 0;
    ada2:	    movea.l 8(sp),a0
    ada6:	    clr.l 8(a0)
	me->oldy = 0;
    adaa:	    movea.l 8(sp),a0
    adae:	    clr.l 12(a0)
	if (! (me->extra & EXTRA_NOSCALE) && scaleDivide) me->scale = (me->y - scaleHorizon) / scaleDivide;
    adb2:	    movea.l 8(sp),a0
    adb6:	    move.l 118(a0),d0
    adba:	    moveq #2,d1
    adbc:	    and.l d1,d0
    adbe:	/-- bne.s ae16 <moveAndScale+0x88>
    adc0:	|   move.w 1c1f0 <scaleDivide>,d0
    adc6:	+-- beq.s ae16 <moveAndScale+0x88>
    adc8:	|   movea.l 8(sp),a0
    adcc:	|   move.l 4(a0),d2
    add0:	|   move.w 1c1ee <scaleHorizon>,d0
    add6:	|   movea.w d0,a0
    add8:	|   move.l a0,-(sp)
    adda:	|   jsr 175b2 <__floatsisf>
    ade0:	|   addq.l #4,sp
    ade2:	|   move.l d0,-(sp)
    ade4:	|   move.l d2,-(sp)
    ade6:	|   jsr 178a6 <__subsf3>
    adec:	|   addq.l #8,sp
    adee:	|   move.l d0,d2
    adf0:	|   move.w 1c1f0 <scaleDivide>,d0
    adf6:	|   movea.w d0,a0
    adf8:	|   move.l a0,-(sp)
    adfa:	|   jsr 175b2 <__floatsisf>
    ae00:	|   addq.l #4,sp
    ae02:	|   move.l d0,-(sp)
    ae04:	|   move.l d2,-(sp)
    ae06:	|   jsr 1745e <__divsf3>
    ae0c:	|   addq.l #8,sp
    ae0e:	|   movea.l 8(sp),a0
    ae12:	|   move.l d0,32(a0)
}
    ae16:	\-> nop
    ae18:	    move.l (sp)+,d2
    ae1a:	    rts

0000ae1c <removeOneCharacter>:

void removeOneCharacter (int i) {
    ae1c:	          lea -16(sp),sp
    ae20:	          move.l a6,-(sp)
    struct onScreenPerson * p = findPerson(i);	
    ae22:	          move.l 24(sp),-(sp)
    ae26:	          jsr a646 <findPerson>
    ae2c:	          addq.l #4,sp
    ae2e:	          move.l d0,8(sp)

    if (p) {
    ae32:	/-------- beq.w af12 <removeOneCharacter+0xf6>
		/*if( p->myAnim->numFrames == 0) {
			CstRestoreScreen(p->x, p->y, &p->myAnim->theSprites->bank.sprites[0].width, &p->myAnim->theSprites->bank.sprites[0].height );
		} ToDo: Remove this*/


        if (overRegion == &personRegion && overRegion->thisType == p->thisType) {
    ae36:	|         move.l 1c970 <overRegion>,d0
    ae3c:	|         cmpi.l #116932,d0
    ae42:	|     /-- bne.s ae60 <removeOneCharacter+0x44>
    ae44:	|     |   movea.l 1c970 <overRegion>,a0
    ae4a:	|     |   move.l 28(a0),d1
    ae4e:	|     |   movea.l 8(sp),a0
    ae52:	|     |   move.l 114(a0),d0
    ae56:	|     |   cmp.l d1,d0
    ae58:	|     +-- bne.s ae60 <removeOneCharacter+0x44>
            overRegion = NULL;
    ae5a:	|     |   clr.l 1c970 <overRegion>
        }

        if (p->continueAfterWalking) abortFunction(p->continueAfterWalking);
    ae60:	|     \-> movea.l 8(sp),a0
    ae64:	|         move.l 68(a0),d0
    ae68:	|     /-- beq.s ae7c <removeOneCharacter+0x60>
    ae6a:	|     |   movea.l 8(sp),a0
    ae6e:	|     |   move.l 68(a0),d0
    ae72:	|     |   move.l d0,-(sp)
    ae74:	|     |   jsr 478c <abortFunction>
    ae7a:	|     |   addq.l #4,sp
        p->continueAfterWalking = NULL;
    ae7c:	|     \-> movea.l 8(sp),a0
    ae80:	|         clr.l 68(a0)
        struct onScreenPerson ** killPeople;

		for(int i=0; i<3;i++)
    ae84:	|         clr.l 12(sp)
    ae88:	|     /-- bra.s aeb0 <removeOneCharacter+0x94>
		{
			deleteAnim( p->myPersona->animation[i]);
    ae8a:	|  /--|-> movea.l 8(sp),a0
    ae8e:	|  |  |   movea.l 80(a0),a0
    ae92:	|  |  |   move.l (a0),d1
    ae94:	|  |  |   move.l 12(sp),d0
    ae98:	|  |  |   add.l d0,d0
    ae9a:	|  |  |   add.l d0,d0
    ae9c:	|  |  |   movea.l d1,a0
    ae9e:	|  |  |   adda.l d0,a0
    aea0:	|  |  |   move.l (a0),d0
    aea2:	|  |  |   move.l d0,-(sp)
    aea4:	|  |  |   jsr 9924 <deleteAnim>
    aeaa:	|  |  |   addq.l #4,sp
		for(int i=0; i<3;i++)
    aeac:	|  |  |   addq.l #1,12(sp)
    aeb0:	|  |  \-> moveq #2,d0
    aeb2:	|  |      cmp.l 12(sp),d0
    aeb6:	|  \----- bge.s ae8a <removeOneCharacter+0x6e>
		}

        for (killPeople = &allPeople;
    aeb8:	|         move.l #116928,16(sp)
    aec0:	|     /-- bra.s aed0 <removeOneCharacter+0xb4>
            *killPeople != p;
            killPeople = &((*killPeople)->next)) {;}
    aec2:	|  /--|-> movea.l 16(sp),a0
    aec6:	|  |  |   move.l (a0),d0
    aec8:	|  |  |   moveq #36,d1
    aeca:	|  |  |   add.l d0,d1
    aecc:	|  |  |   move.l d1,16(sp)
            *killPeople != p;
    aed0:	|  |  \-> movea.l 16(sp),a0
    aed4:	|  |      move.l (a0),d0
    aed6:	|  |      cmp.l 8(sp),d0
    aeda:	|  \----- bne.s aec2 <removeOneCharacter+0xa6>

        *killPeople = p->next;
    aedc:	|         movea.l 8(sp),a0
    aee0:	|         move.l 36(a0),d0
    aee4:	|         movea.l 16(sp),a0
    aee8:	|         move.l d0,(a0)
        removeObjectType(p->thisType);
    aeea:	|         movea.l 8(sp),a0
    aeee:	|         move.l 114(a0),d0
    aef2:	|         move.l d0,-(sp)
    aef4:	|         jsr d860 <removeObjectType>
    aefa:	|         addq.l #4,sp
        FreeVec(p);
    aefc:	|         move.l 8(sp),4(sp)
    af02:	|         move.l 1c85c <SysBase>,d0
    af08:	|         movea.l d0,a6
    af0a:	|         movea.l 4(sp),a1
    af0e:	|         jsr -690(a6)
    }
}
    af12:	\-------> nop
    af14:	          movea.l (sp)+,a6
    af16:	          lea 16(sp),sp
    af1a:	          rts

0000af1c <rethinkAngle>:

void rethinkAngle (struct onScreenPerson * thisPerson) {
    af1c:	       subq.l #8,sp
    af1e:	       move.l d2,-(sp)
	int d = thisPerson -> myPersona -> numDirections;
    af20:	       movea.l 16(sp),a0
    af24:	       movea.l 80(a0),a0
    af28:	       move.l 4(a0),4(sp)
	int direc = thisPerson -> angle + (180 / d) + 180 + thisPerson -> angleOffset;
    af2e:	       movea.l 16(sp),a0
    af32:	       move.l 92(a0),d2
    af36:	       move.l 4(sp),-(sp)
    af3a:	       pea b4 <_start+0xb4>
    af3e:	       jsr 17bb2 <__divsi3>
    af44:	       addq.l #8,sp
    af46:	       add.l d2,d0
    af48:	       move.l d0,d1
    af4a:	       addi.l #180,d1
    af50:	       movea.l 16(sp),a0
    af54:	       move.l 100(a0),d0
    af58:	       move.l d1,d2
    af5a:	       add.l d0,d2
    af5c:	       move.l d2,8(sp)
	while (direc >= 360) direc -= 360;
    af60:	   /-- bra.s af6a <rethinkAngle+0x4e>
    af62:	/--|-> addi.l #-360,8(sp)
    af6a:	|  \-> cmpi.l #359,8(sp)
    af72:	\----- bgt.s af62 <rethinkAngle+0x46>
	thisPerson -> direction = (direc * d) / 360;
    af74:	       move.l 4(sp),-(sp)
    af78:	       move.l 12(sp),-(sp)
    af7c:	       jsr 17b34 <__mulsi3>
    af82:	       addq.l #8,sp
    af84:	       pea 168 <decodeFilename+0x50>
    af88:	       move.l d0,-(sp)
    af8a:	       jsr 17bb2 <__divsi3>
    af90:	       addq.l #8,sp
    af92:	       movea.l 16(sp),a0
    af96:	       move.l d0,106(a0)
}
    af9a:	       nop
    af9c:	       move.l (sp)+,d2
    af9e:	       addq.l #8,sp
    afa0:	       rts

0000afa2 <saveAnim>:


BOOL saveAnim (struct personaAnimation * p, BPTR fp) {
    afa2:	          subq.l #4,sp
	put2bytes (p -> numFrames, fp);
    afa4:	          movea.l 8(sp),a0
    afa8:	          move.l 8(a0),d0
    afac:	          move.l 12(sp),-(sp)
    afb0:	          move.l d0,-(sp)
    afb2:	          jsr 8d0 <put2bytes>
    afb8:	          addq.l #8,sp
	if (p -> numFrames) {
    afba:	          movea.l 8(sp),a0
    afbe:	          move.l 8(a0),d0
    afc2:	/-------- beq.w b066 <saveAnim+0xc4>
		put4bytes (p -> theSprites -> ID, fp);
    afc6:	|         movea.l 8(sp),a0
    afca:	|         movea.l (a0),a0
    afcc:	|         move.l (a0),d0
    afce:	|         move.l 12(sp),-(sp)
    afd2:	|         move.l d0,-(sp)
    afd4:	|         jsr 958 <put4bytes>
    afda:	|         addq.l #8,sp

		for (int a = 0; a < p -> numFrames; a ++) {
    afdc:	|         clr.l (sp)
    afde:	|     /-- bra.s b058 <saveAnim+0xb6>
			put4bytes (p -> frames[a].frameNum, fp);
    afe0:	|  /--|-> movea.l 8(sp),a0
    afe4:	|  |  |   movea.l 4(a0),a0
    afe8:	|  |  |   move.l (sp),d1
    afea:	|  |  |   move.l d1,d0
    afec:	|  |  |   add.l d0,d0
    afee:	|  |  |   add.l d1,d0
    aff0:	|  |  |   add.l d0,d0
    aff2:	|  |  |   add.l d0,d0
    aff4:	|  |  |   adda.l d0,a0
    aff6:	|  |  |   move.l (a0),d0
    aff8:	|  |  |   move.l 12(sp),-(sp)
    affc:	|  |  |   move.l d0,-(sp)
    affe:	|  |  |   jsr 958 <put4bytes>
    b004:	|  |  |   addq.l #8,sp
			put4bytes (p -> frames[a].howMany, fp);
    b006:	|  |  |   movea.l 8(sp),a0
    b00a:	|  |  |   movea.l 4(a0),a0
    b00e:	|  |  |   move.l (sp),d1
    b010:	|  |  |   move.l d1,d0
    b012:	|  |  |   add.l d0,d0
    b014:	|  |  |   add.l d1,d0
    b016:	|  |  |   add.l d0,d0
    b018:	|  |  |   add.l d0,d0
    b01a:	|  |  |   adda.l d0,a0
    b01c:	|  |  |   move.l 4(a0),d0
    b020:	|  |  |   move.l 12(sp),-(sp)
    b024:	|  |  |   move.l d0,-(sp)
    b026:	|  |  |   jsr 958 <put4bytes>
    b02c:	|  |  |   addq.l #8,sp
			put4bytes (p -> frames[a].noise, fp);
    b02e:	|  |  |   movea.l 8(sp),a0
    b032:	|  |  |   movea.l 4(a0),a0
    b036:	|  |  |   move.l (sp),d1
    b038:	|  |  |   move.l d1,d0
    b03a:	|  |  |   add.l d0,d0
    b03c:	|  |  |   add.l d1,d0
    b03e:	|  |  |   add.l d0,d0
    b040:	|  |  |   add.l d0,d0
    b042:	|  |  |   adda.l d0,a0
    b044:	|  |  |   move.l 8(a0),d0
    b048:	|  |  |   move.l 12(sp),-(sp)
    b04c:	|  |  |   move.l d0,-(sp)
    b04e:	|  |  |   jsr 958 <put4bytes>
    b054:	|  |  |   addq.l #8,sp
		for (int a = 0; a < p -> numFrames; a ++) {
    b056:	|  |  |   addq.l #1,(sp)
    b058:	|  |  \-> movea.l 8(sp),a0
    b05c:	|  |      move.l 8(a0),d0
    b060:	|  |      cmp.l (sp),d0
    b062:	|  \----- bgt.w afe0 <saveAnim+0x3e>
		}
	}
	return TRUE;
    b066:	\-------> moveq #1,d0
}
    b068:	          addq.l #4,sp
    b06a:	          rts

0000b06c <saveCostume>:

BOOL saveCostume (struct persona * cossy, BPTR fp) {
    b06c:	             subq.l #4,sp
	int a;
	put2bytes (cossy -> numDirections, fp);
    b06e:	             movea.l 8(sp),a0
    b072:	             move.l 4(a0),d0
    b076:	             move.l 12(sp),-(sp)
    b07a:	             move.l d0,-(sp)
    b07c:	             jsr 8d0 <put2bytes>
    b082:	             addq.l #8,sp
	for (a = 0; a < cossy -> numDirections * 3; a ++) {
    b084:	             clr.l (sp)
    b086:	   /-------- bra.s b0b2 <saveCostume+0x46>
		if (! saveAnim (cossy -> animation[a], fp)) return FALSE;
    b088:	/--|-------> movea.l 8(sp),a0
    b08c:	|  |         move.l (a0),d1
    b08e:	|  |         move.l (sp),d0
    b090:	|  |         add.l d0,d0
    b092:	|  |         add.l d0,d0
    b094:	|  |         movea.l d1,a0
    b096:	|  |         adda.l d0,a0
    b098:	|  |         move.l (a0),d0
    b09a:	|  |         move.l 12(sp),-(sp)
    b09e:	|  |         move.l d0,-(sp)
    b0a0:	|  |         jsr afa2 <saveAnim>
    b0a6:	|  |         addq.l #8,sp
    b0a8:	|  |         tst.w d0
    b0aa:	|  |     /-- bne.s b0b0 <saveCostume+0x44>
    b0ac:	|  |     |   clr.w d0
    b0ae:	|  |  /--|-- bra.s b0c6 <saveCostume+0x5a>
	for (a = 0; a < cossy -> numDirections * 3; a ++) {
    b0b0:	|  |  |  \-> addq.l #1,(sp)
    b0b2:	|  \--|----> movea.l 8(sp),a0
    b0b6:	|     |      move.l 4(a0),d1
    b0ba:	|     |      move.l d1,d0
    b0bc:	|     |      add.l d0,d0
    b0be:	|     |      add.l d1,d0
    b0c0:	|     |      cmp.l (sp),d0
    b0c2:	\-----|----- bgt.s b088 <saveCostume+0x1c>
	}

	return TRUE;
    b0c4:	      |      moveq #1,d0
}
    b0c6:	      \----> addq.l #4,sp
    b0c8:	             rts

0000b0ca <savePeople>:

BOOL savePeople (BPTR fp) {
    b0ca:	             lea -144(sp),sp
    b0ce:	             move.l a6,-(sp)
    b0d0:	             move.l d2,-(sp)
	struct onScreenPerson * me = allPeople;
    b0d2:	             move.l 1c8c0 <allPeople>,148(sp)
	int countPeople = 0, a;
    b0da:	             clr.l 144(sp)

	putSigned (scaleHorizon, fp);
    b0de:	             move.w 1c1ee <scaleHorizon>,d0
    b0e4:	             movea.w d0,a0
    b0e6:	             move.l 156(sp),-(sp)
    b0ea:	             move.l a0,-(sp)
    b0ec:	             jsr a9c <putSigned>
    b0f2:	             addq.l #8,sp
	putSigned (scaleDivide, fp);
    b0f4:	             move.w 1c1f0 <scaleDivide>,d0
    b0fa:	             movea.w d0,a0
    b0fc:	             move.l 156(sp),-(sp)
    b100:	             move.l a0,-(sp)
    b102:	             jsr a9c <putSigned>
    b108:	             addq.l #8,sp

	while (me) {
    b10a:	         /-- bra.s b11a <savePeople+0x50>
		countPeople ++;
    b10c:	      /--|-> addq.l #1,144(sp)
		me = me -> next;
    b110:	      |  |   movea.l 148(sp),a0
    b114:	      |  |   move.l 36(a0),148(sp)
	while (me) {
    b11a:	      |  \-> tst.l 148(sp)
    b11e:	      \----- bne.s b10c <savePeople+0x42>
	}

	put2bytes (countPeople, fp);
    b120:	             move.l 156(sp),-(sp)
    b124:	             move.l 148(sp),-(sp)
    b128:	             jsr 8d0 <put2bytes>
    b12e:	             addq.l #8,sp

	me = allPeople;
    b130:	             move.l 1c8c0 <allPeople>,148(sp)
	for (a = 0; a < countPeople; a ++) {
    b138:	             clr.l 140(sp)
    b13c:	   /-------- bra.w b594 <savePeople+0x4ca>

		putFloat (me -> x, fp);
    b140:	/--|-------> movea.l 148(sp),a0
    b144:	|  |         move.l (a0),d0
    b146:	|  |         move.l 156(sp),-(sp)
    b14a:	|  |         move.l d0,-(sp)
    b14c:	|  |         jsr a46 <putFloat>
    b152:	|  |         addq.l #8,sp
		putFloat (me -> y, fp);
    b154:	|  |         movea.l 148(sp),a0
    b158:	|  |         move.l 4(a0),d0
    b15c:	|  |         move.l 156(sp),-(sp)
    b160:	|  |         move.l d0,-(sp)
    b162:	|  |         jsr a46 <putFloat>
    b168:	|  |         addq.l #8,sp

		saveCostume (me -> myPersona, fp);
    b16a:	|  |         movea.l 148(sp),a0
    b16e:	|  |         move.l 80(a0),d0
    b172:	|  |         move.l 156(sp),-(sp)
    b176:	|  |         move.l d0,-(sp)
    b178:	|  |         jsr b06c <saveCostume>
    b17e:	|  |         addq.l #8,sp
		saveAnim (me -> myAnim, fp);
    b180:	|  |         movea.l 148(sp),a0
    b184:	|  |         move.l 72(a0),d0
    b188:	|  |         move.l 156(sp),-(sp)
    b18c:	|  |         move.l d0,-(sp)
    b18e:	|  |         jsr afa2 <saveAnim>
    b194:	|  |         addq.l #8,sp
		FPutC( fp, me -> myAnim == me -> lastUsedAnim);
    b196:	|  |         move.l 156(sp),136(sp)
    b19c:	|  |         movea.l 148(sp),a0
    b1a0:	|  |         move.l 72(a0),d1
    b1a4:	|  |         movea.l 148(sp),a0
    b1a8:	|  |         move.l 76(a0),d0
    b1ac:	|  |         cmp.l d1,d0
    b1ae:	|  |         seq d0
    b1b0:	|  |         neg.b d0
    b1b2:	|  |         move.b d0,d0
    b1b4:	|  |         andi.l #255,d0
    b1ba:	|  |         move.l d0,132(sp)
    b1be:	|  |         move.l 1c864 <DOSBase>,d0
    b1c4:	|  |         movea.l d0,a6
    b1c6:	|  |         move.l 136(sp),d1
    b1ca:	|  |         move.l 132(sp),d2
    b1ce:	|  |         jsr -312(a6)
    b1d2:	|  |         move.l d0,128(sp)

		putFloat (me -> scale, fp);
    b1d6:	|  |         movea.l 148(sp),a0
    b1da:	|  |         move.l 32(a0),d0
    b1de:	|  |         move.l 156(sp),-(sp)
    b1e2:	|  |         move.l d0,-(sp)
    b1e4:	|  |         jsr a46 <putFloat>
    b1ea:	|  |         addq.l #8,sp

		put2bytes (me -> extra, fp);
    b1ec:	|  |         movea.l 148(sp),a0
    b1f0:	|  |         move.l 118(a0),d0
    b1f4:	|  |         move.l 156(sp),-(sp)
    b1f8:	|  |         move.l d0,-(sp)
    b1fa:	|  |         jsr 8d0 <put2bytes>
    b200:	|  |         addq.l #8,sp
		put2bytes (me -> height, fp);
    b202:	|  |         movea.l 148(sp),a0
    b206:	|  |         move.l 20(a0),d0
    b20a:	|  |         move.l 156(sp),-(sp)
    b20e:	|  |         move.l d0,-(sp)
    b210:	|  |         jsr 8d0 <put2bytes>
    b216:	|  |         addq.l #8,sp
		put2bytes (me -> walkToX, fp);
    b218:	|  |         movea.l 148(sp),a0
    b21c:	|  |         move.l 40(a0),d0
    b220:	|  |         move.l 156(sp),-(sp)
    b224:	|  |         move.l d0,-(sp)
    b226:	|  |         jsr 8d0 <put2bytes>
    b22c:	|  |         addq.l #8,sp
		put2bytes (me -> walkToY, fp);
    b22e:	|  |         movea.l 148(sp),a0
    b232:	|  |         move.l 44(a0),d0
    b236:	|  |         move.l 156(sp),-(sp)
    b23a:	|  |         move.l d0,-(sp)
    b23c:	|  |         jsr 8d0 <put2bytes>
    b242:	|  |         addq.l #8,sp
		put2bytes (me -> thisStepX, fp);
    b244:	|  |         movea.l 148(sp),a0
    b248:	|  |         move.l 48(a0),d0
    b24c:	|  |         move.l 156(sp),-(sp)
    b250:	|  |         move.l d0,-(sp)
    b252:	|  |         jsr 8d0 <put2bytes>
    b258:	|  |         addq.l #8,sp
		put2bytes (me -> thisStepY, fp);
    b25a:	|  |         movea.l 148(sp),a0
    b25e:	|  |         move.l 52(a0),d0
    b262:	|  |         move.l 156(sp),-(sp)
    b266:	|  |         move.l d0,-(sp)
    b268:	|  |         jsr 8d0 <put2bytes>
    b26e:	|  |         addq.l #8,sp
		put2bytes (me -> frameNum, fp);
    b270:	|  |         movea.l 148(sp),a0
    b274:	|  |         move.l 84(a0),d0
    b278:	|  |         move.l 156(sp),-(sp)
    b27c:	|  |         move.l d0,-(sp)
    b27e:	|  |         jsr 8d0 <put2bytes>
    b284:	|  |         addq.l #8,sp
		put2bytes (me -> frameTick, fp);
    b286:	|  |         movea.l 148(sp),a0
    b28a:	|  |         move.l 88(a0),d0
    b28e:	|  |         move.l 156(sp),-(sp)
    b292:	|  |         move.l d0,-(sp)
    b294:	|  |         jsr 8d0 <put2bytes>
    b29a:	|  |         addq.l #8,sp
		put2bytes (me -> walkSpeed, fp);
    b29c:	|  |         movea.l 148(sp),a0
    b2a0:	|  |         move.l 28(a0),d0
    b2a4:	|  |         move.l 156(sp),-(sp)
    b2a8:	|  |         move.l d0,-(sp)
    b2aa:	|  |         jsr 8d0 <put2bytes>
    b2b0:	|  |         addq.l #8,sp
		put2bytes (me -> spinSpeed, fp);
    b2b2:	|  |         movea.l 148(sp),a0
    b2b6:	|  |         move.l 122(a0),d0
    b2ba:	|  |         move.l 156(sp),-(sp)
    b2be:	|  |         move.l d0,-(sp)
    b2c0:	|  |         jsr 8d0 <put2bytes>
    b2c6:	|  |         addq.l #8,sp
		putSigned (me -> floaty, fp);
    b2c8:	|  |         movea.l 148(sp),a0
    b2cc:	|  |         move.l 24(a0),d0
    b2d0:	|  |         move.l d0,d0
    b2d2:	|  |         movea.w d0,a0
    b2d4:	|  |         move.l 156(sp),-(sp)
    b2d8:	|  |         move.l a0,-(sp)
    b2da:	|  |         jsr a9c <putSigned>
    b2e0:	|  |         addq.l #8,sp
		FPutC (fp, me -> show);
    b2e2:	|  |         move.l 156(sp),124(sp)
    b2e8:	|  |         movea.l 148(sp),a0
    b2ec:	|  |         move.w 104(a0),d0
    b2f0:	|  |         movea.w d0,a0
    b2f2:	|  |         move.l a0,120(sp)
    b2f6:	|  |         move.l 1c864 <DOSBase>,d0
    b2fc:	|  |         movea.l d0,a6
    b2fe:	|  |         move.l 124(sp),d1
    b302:	|  |         move.l 120(sp),d2
    b306:	|  |         jsr -312(a6)
    b30a:	|  |         move.l d0,116(sp)
		FPutC (fp, me -> walking);
    b30e:	|  |         move.l 156(sp),112(sp)
    b314:	|  |         movea.l 148(sp),a0
    b318:	|  |         move.w 64(a0),d0
    b31c:	|  |         movea.w d0,a0
    b31e:	|  |         move.l a0,108(sp)
    b322:	|  |         move.l 1c864 <DOSBase>,d0
    b328:	|  |         movea.l d0,a6
    b32a:	|  |         move.l 112(sp),d1
    b32e:	|  |         move.l 108(sp),d2
    b332:	|  |         jsr -312(a6)
    b336:	|  |         move.l d0,104(sp)
		FPutC (fp, me -> spinning);
    b33a:	|  |         move.l 156(sp),100(sp)
    b340:	|  |         movea.l 148(sp),a0
    b344:	|  |         move.w 66(a0),d0
    b348:	|  |         movea.w d0,a0
    b34a:	|  |         move.l a0,96(sp)
    b34e:	|  |         move.l 1c864 <DOSBase>,d0
    b354:	|  |         movea.l d0,a6
    b356:	|  |         move.l 100(sp),d1
    b35a:	|  |         move.l 96(sp),d2
    b35e:	|  |         jsr -312(a6)
    b362:	|  |         move.l d0,92(sp)
		if (me -> continueAfterWalking) {
    b366:	|  |         movea.l 148(sp),a0
    b36a:	|  |         move.l 68(a0),d0
    b36e:	|  |  /----- beq.s b3ac <savePeople+0x2e2>
			FPutC (fp, 1);
    b370:	|  |  |      move.l 156(sp),76(sp)
    b376:	|  |  |      moveq #1,d0
    b378:	|  |  |      move.l d0,72(sp)
    b37c:	|  |  |      move.l 1c864 <DOSBase>,d0
    b382:	|  |  |      movea.l d0,a6
    b384:	|  |  |      move.l 76(sp),d1
    b388:	|  |  |      move.l 72(sp),d2
    b38c:	|  |  |      jsr -312(a6)
    b390:	|  |  |      move.l d0,68(sp)
			saveFunction (me -> continueAfterWalking, fp);
    b394:	|  |  |      movea.l 148(sp),a0
    b398:	|  |  |      move.l 68(a0),d0
    b39c:	|  |  |      move.l 156(sp),-(sp)
    b3a0:	|  |  |      move.l d0,-(sp)
    b3a2:	|  |  |      jsr c542 <saveFunction>
    b3a8:	|  |  |      addq.l #8,sp
    b3aa:	|  |  |  /-- bra.s b3d0 <savePeople+0x306>
		} else {
			FPutC (fp, 1);
    b3ac:	|  |  \--|-> move.l 156(sp),88(sp)
    b3b2:	|  |     |   moveq #1,d0
    b3b4:	|  |     |   move.l d0,84(sp)
    b3b8:	|  |     |   move.l 1c864 <DOSBase>,d0
    b3be:	|  |     |   movea.l d0,a6
    b3c0:	|  |     |   move.l 88(sp),d1
    b3c4:	|  |     |   move.l 84(sp),d2
    b3c8:	|  |     |   jsr -312(a6)
    b3cc:	|  |     |   move.l d0,80(sp)
		}
		put2bytes (me -> direction, fp);
    b3d0:	|  |     \-> movea.l 148(sp),a0
    b3d4:	|  |         move.l 106(a0),d0
    b3d8:	|  |         move.l 156(sp),-(sp)
    b3dc:	|  |         move.l d0,-(sp)
    b3de:	|  |         jsr 8d0 <put2bytes>
    b3e4:	|  |         addq.l #8,sp
		put2bytes (me -> angle, fp);
    b3e6:	|  |         movea.l 148(sp),a0
    b3ea:	|  |         move.l 92(a0),d0
    b3ee:	|  |         move.l 156(sp),-(sp)
    b3f2:	|  |         move.l d0,-(sp)
    b3f4:	|  |         jsr 8d0 <put2bytes>
    b3fa:	|  |         addq.l #8,sp
		put2bytes (me -> angleOffset, fp);
    b3fc:	|  |         movea.l 148(sp),a0
    b400:	|  |         move.l 100(a0),d0
    b404:	|  |         move.l 156(sp),-(sp)
    b408:	|  |         move.l d0,-(sp)
    b40a:	|  |         jsr 8d0 <put2bytes>
    b410:	|  |         addq.l #8,sp
		put2bytes (me -> wantAngle, fp);
    b412:	|  |         movea.l 148(sp),a0
    b416:	|  |         move.l 96(a0),d0
    b41a:	|  |         move.l 156(sp),-(sp)
    b41e:	|  |         move.l d0,-(sp)
    b420:	|  |         jsr 8d0 <put2bytes>
    b426:	|  |         addq.l #8,sp
		putSigned (me -> directionWhenDoneWalking, fp);
    b428:	|  |         movea.l 148(sp),a0
    b42c:	|  |         move.l 110(a0),d0
    b430:	|  |         move.l d0,d0
    b432:	|  |         movea.w d0,a0
    b434:	|  |         move.l 156(sp),-(sp)
    b438:	|  |         move.l a0,-(sp)
    b43a:	|  |         jsr a9c <putSigned>
    b440:	|  |         addq.l #8,sp
		putSigned (me -> inPoly, fp);
    b442:	|  |         movea.l 148(sp),a0
    b446:	|  |         move.l 56(a0),d0
    b44a:	|  |         move.l d0,d0
    b44c:	|  |         movea.w d0,a0
    b44e:	|  |         move.l 156(sp),-(sp)
    b452:	|  |         move.l a0,-(sp)
    b454:	|  |         jsr a9c <putSigned>
    b45a:	|  |         addq.l #8,sp
		putSigned (me -> walkToPoly, fp);
    b45c:	|  |         movea.l 148(sp),a0
    b460:	|  |         move.l 60(a0),d0
    b464:	|  |         move.l d0,d0
    b466:	|  |         movea.w d0,a0
    b468:	|  |         move.l 156(sp),-(sp)
    b46c:	|  |         move.l a0,-(sp)
    b46e:	|  |         jsr a9c <putSigned>
    b474:	|  |         addq.l #8,sp

		FPutC (fp, me -> r);
    b476:	|  |         move.l 156(sp),64(sp)
    b47c:	|  |         movea.l 148(sp),a0
    b480:	|  |         move.b 126(a0),d0
    b484:	|  |         move.b d0,d0
    b486:	|  |         andi.l #255,d0
    b48c:	|  |         move.l d0,60(sp)
    b490:	|  |         move.l 1c864 <DOSBase>,d0
    b496:	|  |         movea.l d0,a6
    b498:	|  |         move.l 64(sp),d1
    b49c:	|  |         move.l 60(sp),d2
    b4a0:	|  |         jsr -312(a6)
    b4a4:	|  |         move.l d0,56(sp)
		FPutC (fp, me -> g);
    b4a8:	|  |         move.l 156(sp),52(sp)
    b4ae:	|  |         movea.l 148(sp),a0
    b4b2:	|  |         move.b 127(a0),d0
    b4b6:	|  |         move.b d0,d0
    b4b8:	|  |         andi.l #255,d0
    b4be:	|  |         move.l d0,48(sp)
    b4c2:	|  |         move.l 1c864 <DOSBase>,d0
    b4c8:	|  |         movea.l d0,a6
    b4ca:	|  |         move.l 52(sp),d1
    b4ce:	|  |         move.l 48(sp),d2
    b4d2:	|  |         jsr -312(a6)
    b4d6:	|  |         move.l d0,44(sp)
		FPutC (fp, me -> b);
    b4da:	|  |         move.l 156(sp),40(sp)
    b4e0:	|  |         movea.l 148(sp),a0
    b4e4:	|  |         move.b 128(a0),d0
    b4e8:	|  |         move.b d0,d0
    b4ea:	|  |         andi.l #255,d0
    b4f0:	|  |         move.l d0,36(sp)
    b4f4:	|  |         move.l 1c864 <DOSBase>,d0
    b4fa:	|  |         movea.l d0,a6
    b4fc:	|  |         move.l 40(sp),d1
    b500:	|  |         move.l 36(sp),d2
    b504:	|  |         jsr -312(a6)
    b508:	|  |         move.l d0,32(sp)
		FPutC (fp, me -> colourmix);
    b50c:	|  |         move.l 156(sp),28(sp)
    b512:	|  |         movea.l 148(sp),a0
    b516:	|  |         move.b 129(a0),d0
    b51a:	|  |         move.b d0,d0
    b51c:	|  |         andi.l #255,d0
    b522:	|  |         move.l d0,24(sp)
    b526:	|  |         move.l 1c864 <DOSBase>,d0
    b52c:	|  |         movea.l d0,a6
    b52e:	|  |         move.l 28(sp),d1
    b532:	|  |         move.l 24(sp),d2
    b536:	|  |         jsr -312(a6)
    b53a:	|  |         move.l d0,20(sp)
		FPutC (fp, me -> transparency);
    b53e:	|  |         move.l 156(sp),16(sp)
    b544:	|  |         movea.l 148(sp),a0
    b548:	|  |         move.b 130(a0),d0
    b54c:	|  |         move.b d0,d0
    b54e:	|  |         andi.l #255,d0
    b554:	|  |         move.l d0,12(sp)
    b558:	|  |         move.l 1c864 <DOSBase>,d0
    b55e:	|  |         movea.l d0,a6
    b560:	|  |         move.l 16(sp),d1
    b564:	|  |         move.l 12(sp),d2
    b568:	|  |         jsr -312(a6)
    b56c:	|  |         move.l d0,8(sp)
		
		saveObjectRef (me -> thisType, fp);
    b570:	|  |         movea.l 148(sp),a0
    b574:	|  |         move.l 114(a0),d0
    b578:	|  |         move.l 156(sp),-(sp)
    b57c:	|  |         move.l d0,-(sp)
    b57e:	|  |         jsr d900 <saveObjectRef>
    b584:	|  |         addq.l #8,sp

		me = me -> next;
    b586:	|  |         movea.l 148(sp),a0
    b58a:	|  |         move.l 36(a0),148(sp)
	for (a = 0; a < countPeople; a ++) {
    b590:	|  |         addq.l #1,140(sp)
    b594:	|  \-------> movea.l 140(sp),a0
    b598:	|            cmpa.l 144(sp),a0
    b59c:	\----------- blt.w b140 <savePeople+0x76>
	}
	return TRUE;
    b5a0:	             moveq #1,d0
}
    b5a2:	             move.l (sp)+,d2
    b5a4:	             movea.l (sp)+,a6
    b5a6:	             lea 144(sp),sp
    b5aa:	             rts

0000b5ac <setBankFile>:

void setBankFile (struct personaAnimation * newP, struct loadedSpriteBank * sB) { 
	newP -> theSprites = sB; 
    b5ac:	movea.l 4(sp),a0
    b5b0:	move.l 8(sp),(a0)
}
    b5b4:	nop
    b5b6:	rts

0000b5b8 <setDrawMode>:


void setDrawMode (int h, int ob) {
    b5b8:	       subq.l #4,sp
	struct onScreenPerson * moveMe = findPerson (ob);
    b5ba:	       move.l 12(sp),-(sp)
    b5be:	       jsr a646 <findPerson>
    b5c4:	       addq.l #4,sp
    b5c6:	       move.l d0,(sp)
	if (! moveMe) return;
    b5c8:	/----- beq.s b5dc <setDrawMode+0x24>
		
	setMyDrawMode (moveMe, h);
    b5ca:	|      move.l 8(sp),-(sp)
    b5ce:	|      move.l 4(sp),-(sp)
    b5d2:	|      jsr b5e2 <setMyDrawMode>
    b5d8:	|      addq.l #8,sp
    b5da:	|  /-- bra.s b5de <setDrawMode+0x26>
	if (! moveMe) return;
    b5dc:	\--|-> nop
}
    b5de:	   \-> addq.l #4,sp
    b5e0:	       rts

0000b5e2 <setMyDrawMode>:
	drawModeInvisible,
	numDrawModes
};

void setMyDrawMode (struct onScreenPerson *moveMe, int h) {
	switch (h) {
    b5e2:	       moveq #19,d0
    b5e4:	       cmp.l 8(sp),d0
    b5e8:	/----- bcs.w bac0 <setMyDrawMode+0x4de>
    b5ec:	|      move.l 8(sp),d0
    b5f0:	|      add.l d0,d0
    b5f2:	|      movea.l d0,a0
    b5f4:	|      adda.l #46592,a0
    b5fa:	|      move.w (a0),d0
    b5fc:	|      jmp (b600 <setMyDrawMode+0x1e>,pc,d0.w)
    b600:	|      .short 0x04c0
    b602:	|      ori.l #6684712,-(a4)
    b608:	|      btst d0,-(a0)
    b60a:	|      bchg d0,(a6)+
    b60c:	|      bclr d0,(a4)+
    b60e:	|      bset d0,(a2)+
    b610:	|      andi.b #84,(a6)
    b614:	|      andi.l #55575312,(a2)
    b61a:	|      .short 0x02d0
    b61c:	|      bclr d1,(a0)
    b61e:	|      .short 0x044a
    b620:	|      .short 0x040c
    b622:	|      movep.l d1,1158(a6)
    b626:	|      .short 0x00e2
		case drawModeTransparent3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b628:	|      movea.l 4(sp),a0
    b62c:	|      clr.b 128(a0)
    b630:	|      movea.l 4(sp),a0
    b634:	|      move.b 128(a0),d0
    b638:	|      movea.l 4(sp),a0
    b63c:	|      move.b d0,127(a0)
    b640:	|      movea.l 4(sp),a0
    b644:	|      move.b 127(a0),d0
    b648:	|      movea.l 4(sp),a0
    b64c:	|      move.b d0,126(a0)
			moveMe->colourmix = 0;
    b650:	|      movea.l 4(sp),a0
    b654:	|      clr.b 129(a0)
			moveMe->transparency = 64;
    b658:	|      movea.l 4(sp),a0
    b65c:	|      move.b #64,130(a0)
			break;
    b662:	|  /-- bra.w bafa <setMyDrawMode+0x518>
		case drawModeTransparent2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b666:	|  |   movea.l 4(sp),a0
    b66a:	|  |   clr.b 128(a0)
    b66e:	|  |   movea.l 4(sp),a0
    b672:	|  |   move.b 128(a0),d0
    b676:	|  |   movea.l 4(sp),a0
    b67a:	|  |   move.b d0,127(a0)
    b67e:	|  |   movea.l 4(sp),a0
    b682:	|  |   move.b 127(a0),d0
    b686:	|  |   movea.l 4(sp),a0
    b68a:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    b68e:	|  |   movea.l 4(sp),a0
    b692:	|  |   clr.b 129(a0)
			moveMe->transparency = 128;
    b696:	|  |   movea.l 4(sp),a0
    b69a:	|  |   move.b #-128,130(a0)
			break;
    b6a0:	|  +-- bra.w bafa <setMyDrawMode+0x518>
		case drawModeTransparent1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b6a4:	|  |   movea.l 4(sp),a0
    b6a8:	|  |   clr.b 128(a0)
    b6ac:	|  |   movea.l 4(sp),a0
    b6b0:	|  |   move.b 128(a0),d0
    b6b4:	|  |   movea.l 4(sp),a0
    b6b8:	|  |   move.b d0,127(a0)
    b6bc:	|  |   movea.l 4(sp),a0
    b6c0:	|  |   move.b 127(a0),d0
    b6c4:	|  |   movea.l 4(sp),a0
    b6c8:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    b6cc:	|  |   movea.l 4(sp),a0
    b6d0:	|  |   clr.b 129(a0)
			moveMe->transparency = 192;
    b6d4:	|  |   movea.l 4(sp),a0
    b6d8:	|  |   move.b #-64,130(a0)
			break;
    b6de:	|  +-- bra.w bafa <setMyDrawMode+0x518>
		case drawModeInvisible:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b6e2:	|  |   movea.l 4(sp),a0
    b6e6:	|  |   clr.b 128(a0)
    b6ea:	|  |   movea.l 4(sp),a0
    b6ee:	|  |   move.b 128(a0),d0
    b6f2:	|  |   movea.l 4(sp),a0
    b6f6:	|  |   move.b d0,127(a0)
    b6fa:	|  |   movea.l 4(sp),a0
    b6fe:	|  |   move.b 127(a0),d0
    b702:	|  |   movea.l 4(sp),a0
    b706:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    b70a:	|  |   movea.l 4(sp),a0
    b70e:	|  |   clr.b 129(a0)
			moveMe->transparency = 254;
    b712:	|  |   movea.l 4(sp),a0
    b716:	|  |   move.b #-2,130(a0)
			break;
    b71c:	|  +-- bra.w bafa <setMyDrawMode+0x518>
		case drawModeDark1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b720:	|  |   movea.l 4(sp),a0
    b724:	|  |   clr.b 128(a0)
    b728:	|  |   movea.l 4(sp),a0
    b72c:	|  |   move.b 128(a0),d0
    b730:	|  |   movea.l 4(sp),a0
    b734:	|  |   move.b d0,127(a0)
    b738:	|  |   movea.l 4(sp),a0
    b73c:	|  |   move.b 127(a0),d0
    b740:	|  |   movea.l 4(sp),a0
    b744:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    b748:	|  |   movea.l 4(sp),a0
    b74c:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    b752:	|  |   movea.l 4(sp),a0
    b756:	|  |   clr.b 130(a0)
			break;
    b75a:	|  +-- bra.w bafa <setMyDrawMode+0x518>
		case drawModeDark2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b75e:	|  |   movea.l 4(sp),a0
    b762:	|  |   clr.b 128(a0)
    b766:	|  |   movea.l 4(sp),a0
    b76a:	|  |   move.b 128(a0),d0
    b76e:	|  |   movea.l 4(sp),a0
    b772:	|  |   move.b d0,127(a0)
    b776:	|  |   movea.l 4(sp),a0
    b77a:	|  |   move.b 127(a0),d0
    b77e:	|  |   movea.l 4(sp),a0
    b782:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    b786:	|  |   movea.l 4(sp),a0
    b78a:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    b790:	|  |   movea.l 4(sp),a0
    b794:	|  |   clr.b 130(a0)
			break;
    b798:	|  +-- bra.w bafa <setMyDrawMode+0x518>
		case drawModeDark3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b79c:	|  |   movea.l 4(sp),a0
    b7a0:	|  |   clr.b 128(a0)
    b7a4:	|  |   movea.l 4(sp),a0
    b7a8:	|  |   move.b 128(a0),d0
    b7ac:	|  |   movea.l 4(sp),a0
    b7b0:	|  |   move.b d0,127(a0)
    b7b4:	|  |   movea.l 4(sp),a0
    b7b8:	|  |   move.b 127(a0),d0
    b7bc:	|  |   movea.l 4(sp),a0
    b7c0:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    b7c4:	|  |   movea.l 4(sp),a0
    b7c8:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    b7ce:	|  |   movea.l 4(sp),a0
    b7d2:	|  |   clr.b 130(a0)
			break;
    b7d6:	|  +-- bra.w bafa <setMyDrawMode+0x518>
		case drawModeBlack:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b7da:	|  |   movea.l 4(sp),a0
    b7de:	|  |   clr.b 128(a0)
    b7e2:	|  |   movea.l 4(sp),a0
    b7e6:	|  |   move.b 128(a0),d0
    b7ea:	|  |   movea.l 4(sp),a0
    b7ee:	|  |   move.b d0,127(a0)
    b7f2:	|  |   movea.l 4(sp),a0
    b7f6:	|  |   move.b 127(a0),d0
    b7fa:	|  |   movea.l 4(sp),a0
    b7fe:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b802:	|  |   movea.l 4(sp),a0
    b806:	|  |   st 129(a0)
			moveMe->transparency = 0;
    b80a:	|  |   movea.l 4(sp),a0
    b80e:	|  |   clr.b 130(a0)
			break;
    b812:	|  +-- bra.w bafa <setMyDrawMode+0x518>
		case drawModeShadow1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b816:	|  |   movea.l 4(sp),a0
    b81a:	|  |   clr.b 128(a0)
    b81e:	|  |   movea.l 4(sp),a0
    b822:	|  |   move.b 128(a0),d0
    b826:	|  |   movea.l 4(sp),a0
    b82a:	|  |   move.b d0,127(a0)
    b82e:	|  |   movea.l 4(sp),a0
    b832:	|  |   move.b 127(a0),d0
    b836:	|  |   movea.l 4(sp),a0
    b83a:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b83e:	|  |   movea.l 4(sp),a0
    b842:	|  |   st 129(a0)
			moveMe->transparency = 64;
    b846:	|  |   movea.l 4(sp),a0
    b84a:	|  |   move.b #64,130(a0)
			break;
    b850:	|  +-- bra.w bafa <setMyDrawMode+0x518>
		case drawModeShadow2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b854:	|  |   movea.l 4(sp),a0
    b858:	|  |   clr.b 128(a0)
    b85c:	|  |   movea.l 4(sp),a0
    b860:	|  |   move.b 128(a0),d0
    b864:	|  |   movea.l 4(sp),a0
    b868:	|  |   move.b d0,127(a0)
    b86c:	|  |   movea.l 4(sp),a0
    b870:	|  |   move.b 127(a0),d0
    b874:	|  |   movea.l 4(sp),a0
    b878:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b87c:	|  |   movea.l 4(sp),a0
    b880:	|  |   st 129(a0)
			moveMe->transparency = 128;
    b884:	|  |   movea.l 4(sp),a0
    b888:	|  |   move.b #-128,130(a0)
			break;
    b88e:	|  +-- bra.w bafa <setMyDrawMode+0x518>
		case drawModeShadow3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b892:	|  |   movea.l 4(sp),a0
    b896:	|  |   clr.b 128(a0)
    b89a:	|  |   movea.l 4(sp),a0
    b89e:	|  |   move.b 128(a0),d0
    b8a2:	|  |   movea.l 4(sp),a0
    b8a6:	|  |   move.b d0,127(a0)
    b8aa:	|  |   movea.l 4(sp),a0
    b8ae:	|  |   move.b 127(a0),d0
    b8b2:	|  |   movea.l 4(sp),a0
    b8b6:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b8ba:	|  |   movea.l 4(sp),a0
    b8be:	|  |   st 129(a0)
			moveMe->transparency = 192;
    b8c2:	|  |   movea.l 4(sp),a0
    b8c6:	|  |   move.b #-64,130(a0)
			break;
    b8cc:	|  +-- bra.w bafa <setMyDrawMode+0x518>
		case drawModeFoggy3:
			moveMe->r = moveMe->g = moveMe->b = 128;
    b8d0:	|  |   movea.l 4(sp),a0
    b8d4:	|  |   move.b #-128,128(a0)
    b8da:	|  |   movea.l 4(sp),a0
    b8de:	|  |   move.b 128(a0),d0
    b8e2:	|  |   movea.l 4(sp),a0
    b8e6:	|  |   move.b d0,127(a0)
    b8ea:	|  |   movea.l 4(sp),a0
    b8ee:	|  |   move.b 127(a0),d0
    b8f2:	|  |   movea.l 4(sp),a0
    b8f6:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    b8fa:	|  |   movea.l 4(sp),a0
    b8fe:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    b904:	|  |   movea.l 4(sp),a0
    b908:	|  |   clr.b 130(a0)
			break;
    b90c:	|  +-- bra.w bafa <setMyDrawMode+0x518>
		case drawModeFoggy2:
			moveMe->r = moveMe->g = moveMe->b = 128;
    b910:	|  |   movea.l 4(sp),a0
    b914:	|  |   move.b #-128,128(a0)
    b91a:	|  |   movea.l 4(sp),a0
    b91e:	|  |   move.b 128(a0),d0
    b922:	|  |   movea.l 4(sp),a0
    b926:	|  |   move.b d0,127(a0)
    b92a:	|  |   movea.l 4(sp),a0
    b92e:	|  |   move.b 127(a0),d0
    b932:	|  |   movea.l 4(sp),a0
    b936:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    b93a:	|  |   movea.l 4(sp),a0
    b93e:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    b944:	|  |   movea.l 4(sp),a0
    b948:	|  |   clr.b 130(a0)
			break;
    b94c:	|  +-- bra.w bafa <setMyDrawMode+0x518>
		case drawModeFoggy1:
			moveMe->r = moveMe->g = moveMe->b = 128;
    b950:	|  |   movea.l 4(sp),a0
    b954:	|  |   move.b #-128,128(a0)
    b95a:	|  |   movea.l 4(sp),a0
    b95e:	|  |   move.b 128(a0),d0
    b962:	|  |   movea.l 4(sp),a0
    b966:	|  |   move.b d0,127(a0)
    b96a:	|  |   movea.l 4(sp),a0
    b96e:	|  |   move.b 127(a0),d0
    b972:	|  |   movea.l 4(sp),a0
    b976:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    b97a:	|  |   movea.l 4(sp),a0
    b97e:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    b984:	|  |   movea.l 4(sp),a0
    b988:	|  |   clr.b 130(a0)
			break;
    b98c:	|  +-- bra.w bafa <setMyDrawMode+0x518>
		case drawModeFoggy4:
			moveMe->r = moveMe->g = moveMe->b = 128;
    b990:	|  |   movea.l 4(sp),a0
    b994:	|  |   move.b #-128,128(a0)
    b99a:	|  |   movea.l 4(sp),a0
    b99e:	|  |   move.b 128(a0),d0
    b9a2:	|  |   movea.l 4(sp),a0
    b9a6:	|  |   move.b d0,127(a0)
    b9aa:	|  |   movea.l 4(sp),a0
    b9ae:	|  |   move.b 127(a0),d0
    b9b2:	|  |   movea.l 4(sp),a0
    b9b6:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b9ba:	|  |   movea.l 4(sp),a0
    b9be:	|  |   st 129(a0)
			moveMe->transparency = 0;
    b9c2:	|  |   movea.l 4(sp),a0
    b9c6:	|  |   clr.b 130(a0)
			break;
    b9ca:	|  +-- bra.w bafa <setMyDrawMode+0x518>
		case drawModeGlow3:
			moveMe->r = moveMe->g = moveMe->b = 255;
    b9ce:	|  |   movea.l 4(sp),a0
    b9d2:	|  |   st 128(a0)
    b9d6:	|  |   movea.l 4(sp),a0
    b9da:	|  |   move.b 128(a0),d0
    b9de:	|  |   movea.l 4(sp),a0
    b9e2:	|  |   move.b d0,127(a0)
    b9e6:	|  |   movea.l 4(sp),a0
    b9ea:	|  |   move.b 127(a0),d0
    b9ee:	|  |   movea.l 4(sp),a0
    b9f2:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    b9f6:	|  |   movea.l 4(sp),a0
    b9fa:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    ba00:	|  |   movea.l 4(sp),a0
    ba04:	|  |   clr.b 130(a0)
			break;
    ba08:	|  +-- bra.w bafa <setMyDrawMode+0x518>
		case drawModeGlow2:
			moveMe->r = moveMe->g = moveMe->b = 255;
    ba0c:	|  |   movea.l 4(sp),a0
    ba10:	|  |   st 128(a0)
    ba14:	|  |   movea.l 4(sp),a0
    ba18:	|  |   move.b 128(a0),d0
    ba1c:	|  |   movea.l 4(sp),a0
    ba20:	|  |   move.b d0,127(a0)
    ba24:	|  |   movea.l 4(sp),a0
    ba28:	|  |   move.b 127(a0),d0
    ba2c:	|  |   movea.l 4(sp),a0
    ba30:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    ba34:	|  |   movea.l 4(sp),a0
    ba38:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    ba3e:	|  |   movea.l 4(sp),a0
    ba42:	|  |   clr.b 130(a0)
			break;
    ba46:	|  +-- bra.w bafa <setMyDrawMode+0x518>
		case drawModeGlow1:
			moveMe->r = moveMe->g = moveMe->b = 255;
    ba4a:	|  |   movea.l 4(sp),a0
    ba4e:	|  |   st 128(a0)
    ba52:	|  |   movea.l 4(sp),a0
    ba56:	|  |   move.b 128(a0),d0
    ba5a:	|  |   movea.l 4(sp),a0
    ba5e:	|  |   move.b d0,127(a0)
    ba62:	|  |   movea.l 4(sp),a0
    ba66:	|  |   move.b 127(a0),d0
    ba6a:	|  |   movea.l 4(sp),a0
    ba6e:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    ba72:	|  |   movea.l 4(sp),a0
    ba76:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    ba7c:	|  |   movea.l 4(sp),a0
    ba80:	|  |   clr.b 130(a0)
			break;
    ba84:	|  +-- bra.s bafa <setMyDrawMode+0x518>
		case drawModeGlow4:
			moveMe->r = moveMe->g = moveMe->b = 255;
    ba86:	|  |   movea.l 4(sp),a0
    ba8a:	|  |   st 128(a0)
    ba8e:	|  |   movea.l 4(sp),a0
    ba92:	|  |   move.b 128(a0),d0
    ba96:	|  |   movea.l 4(sp),a0
    ba9a:	|  |   move.b d0,127(a0)
    ba9e:	|  |   movea.l 4(sp),a0
    baa2:	|  |   move.b 127(a0),d0
    baa6:	|  |   movea.l 4(sp),a0
    baaa:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    baae:	|  |   movea.l 4(sp),a0
    bab2:	|  |   st 129(a0)
			moveMe->transparency = 0;
    bab6:	|  |   movea.l 4(sp),a0
    baba:	|  |   clr.b 130(a0)
			break;
    babe:	|  +-- bra.s bafa <setMyDrawMode+0x518>
		default:
			moveMe->r = moveMe->g = moveMe->b = 0;
    bac0:	\--|-> movea.l 4(sp),a0
    bac4:	   |   clr.b 128(a0)
    bac8:	   |   movea.l 4(sp),a0
    bacc:	   |   move.b 128(a0),d0
    bad0:	   |   movea.l 4(sp),a0
    bad4:	   |   move.b d0,127(a0)
    bad8:	   |   movea.l 4(sp),a0
    badc:	   |   move.b 127(a0),d0
    bae0:	   |   movea.l 4(sp),a0
    bae4:	   |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    bae8:	   |   movea.l 4(sp),a0
    baec:	   |   clr.b 129(a0)
			moveMe->transparency = 0;
    baf0:	   |   movea.l 4(sp),a0
    baf4:	   |   clr.b 130(a0)
			break;
    baf8:	   |   nop
	}
}
    bafa:	   \-> nop
    bafc:	       rts

0000bafe <shufflePeople>:

void shufflePeople () {
    bafe:	             lea -20(sp),sp
	struct onScreenPerson ** thisReference = &allPeople;
    bb02:	             move.l #116928,16(sp)
	struct onScreenPerson * A, * B;

	if (!allPeople) return;
    bb0a:	             move.l 1c8c0 <allPeople>,d0
    bb10:	/----------- beq.w bbe6 <shufflePeople+0xe8>

	while ((*thisReference)->next) {
    bb14:	|     /----- bra.w bbd6 <shufflePeople+0xd8>
		float y1 = (*thisReference)->y;
    bb18:	|  /--|----> movea.l 16(sp),a0
    bb1c:	|  |  |      movea.l (a0),a0
    bb1e:	|  |  |      move.l 4(a0),12(sp)
		if ((*thisReference)->extra & EXTRA_FRONT) y1 += 1000;
    bb24:	|  |  |      movea.l 16(sp),a0
    bb28:	|  |  |      movea.l (a0),a0
    bb2a:	|  |  |      move.l 118(a0),d0
    bb2e:	|  |  |      moveq #1,d1
    bb30:	|  |  |      and.l d1,d0
    bb32:	|  |  |  /-- beq.s bb4a <shufflePeople+0x4c>
    bb34:	|  |  |  |   move.l #1148846080,-(sp)
    bb3a:	|  |  |  |   move.l 16(sp),-(sp)
    bb3e:	|  |  |  |   jsr 17364 <__addsf3>
    bb44:	|  |  |  |   addq.l #8,sp
    bb46:	|  |  |  |   move.l d0,12(sp)

		float y2 = (*thisReference)->next->y;
    bb4a:	|  |  |  \-> movea.l 16(sp),a0
    bb4e:	|  |  |      movea.l (a0),a0
    bb50:	|  |  |      movea.l 36(a0),a0
    bb54:	|  |  |      move.l 4(a0),8(sp)
		if ((*thisReference)->next->extra & EXTRA_FRONT) y2 += 1000;
    bb5a:	|  |  |      movea.l 16(sp),a0
    bb5e:	|  |  |      movea.l (a0),a0
    bb60:	|  |  |      movea.l 36(a0),a0
    bb64:	|  |  |      move.l 118(a0),d0
    bb68:	|  |  |      moveq #1,d1
    bb6a:	|  |  |      and.l d1,d0
    bb6c:	|  |  |  /-- beq.s bb84 <shufflePeople+0x86>
    bb6e:	|  |  |  |   move.l #1148846080,-(sp)
    bb74:	|  |  |  |   move.l 12(sp),-(sp)
    bb78:	|  |  |  |   jsr 17364 <__addsf3>
    bb7e:	|  |  |  |   addq.l #8,sp
    bb80:	|  |  |  |   move.l d0,8(sp)

		if (y1 > y2) {
    bb84:	|  |  |  \-> move.l 8(sp),-(sp)
    bb88:	|  |  |      move.l 16(sp),-(sp)
    bb8c:	|  |  |      jsr 1771e <__gtsf2>
    bb92:	|  |  |      addq.l #8,sp
    bb94:	|  |  |      tst.l d0
    bb96:	|  |  |  /-- ble.s bbc8 <shufflePeople+0xca>
			A = (*thisReference);
    bb98:	|  |  |  |   movea.l 16(sp),a0
    bb9c:	|  |  |  |   move.l (a0),4(sp)
			B = (*thisReference)->next;
    bba0:	|  |  |  |   movea.l 16(sp),a0
    bba4:	|  |  |  |   movea.l (a0),a0
    bba6:	|  |  |  |   move.l 36(a0),(sp)
			A->next = B->next;
    bbaa:	|  |  |  |   movea.l (sp),a0
    bbac:	|  |  |  |   move.l 36(a0),d0
    bbb0:	|  |  |  |   movea.l 4(sp),a0
    bbb4:	|  |  |  |   move.l d0,36(a0)
			B->next = A;
    bbb8:	|  |  |  |   movea.l (sp),a0
    bbba:	|  |  |  |   move.l 4(sp),36(a0)
			(*thisReference) = B;
    bbc0:	|  |  |  |   movea.l 16(sp),a0
    bbc4:	|  |  |  |   move.l (sp),(a0)
    bbc6:	|  |  +--|-- bra.s bbd6 <shufflePeople+0xd8>
		} else {
			thisReference = &((*thisReference)->next);
    bbc8:	|  |  |  \-> movea.l 16(sp),a0
    bbcc:	|  |  |      move.l (a0),d0
    bbce:	|  |  |      moveq #36,d1
    bbd0:	|  |  |      add.l d0,d1
    bbd2:	|  |  |      move.l d1,16(sp)
	while ((*thisReference)->next) {
    bbd6:	|  |  \----> movea.l 16(sp),a0
    bbda:	|  |         movea.l (a0),a0
    bbdc:	|  |         move.l 36(a0),d0
    bbe0:	|  \-------- bne.w bb18 <shufflePeople+0x1a>
    bbe4:	|        /-- bra.s bbe8 <shufflePeople+0xea>
	if (!allPeople) return;
    bbe6:	\--------|-> nop
		}
	}
}
    bbe8:	         \-> lea 20(sp),sp
    bbec:	             rts

0000bbee <setCharacterWalkSpeed>:


BOOL setCharacterWalkSpeed (int f, int objNum) {
    bbee:	       subq.l #4,sp
	if (f <= 0) return FALSE;
    bbf0:	       tst.l 8(sp)
    bbf4:	   /-- bgt.s bbfa <setCharacterWalkSpeed+0xc>
    bbf6:	   |   clr.w d0
    bbf8:	/--|-- bra.s bc18 <setCharacterWalkSpeed+0x2a>
	struct onScreenPerson * moveMe = findPerson (objNum);
    bbfa:	|  \-> move.l 12(sp),-(sp)
    bbfe:	|      jsr a646 <findPerson>
    bc04:	|      addq.l #4,sp
    bc06:	|      move.l d0,(sp)
	if (! moveMe) return FALSE;
    bc08:	|  /-- bne.s bc0e <setCharacterWalkSpeed+0x20>
    bc0a:	|  |   clr.w d0
    bc0c:	+--|-- bra.s bc18 <setCharacterWalkSpeed+0x2a>
	moveMe -> walkSpeed = f;
    bc0e:	|  \-> movea.l (sp),a0
    bc10:	|      move.l 8(sp),28(a0)
	return TRUE;
    bc16:	|      moveq #1,d0
}
    bc18:	\----> addq.l #4,sp
    bc1a:	       rts

0000bc1c <setPersonExtra>:

BOOL setPersonExtra (int thisNum, int extra) {
    bc1c:	       subq.l #4,sp
    struct onScreenPerson * thisPerson = findPerson(thisNum);
    bc1e:	       move.l 8(sp),-(sp)
    bc22:	       jsr a646 <findPerson>
    bc28:	       addq.l #4,sp
    bc2a:	       move.l d0,(sp)
    if (thisPerson) {
    bc2c:	/----- beq.s bc4c <setPersonExtra+0x30>
        thisPerson -> extra = extra;
    bc2e:	|      movea.l (sp),a0
    bc30:	|      move.l 12(sp),118(a0)
        if (extra & EXTRA_NOSCALE) thisPerson -> scale = 1;
    bc36:	|      moveq #2,d0
    bc38:	|      and.l 12(sp),d0
    bc3c:	|  /-- beq.s bc48 <setPersonExtra+0x2c>
    bc3e:	|  |   movea.l (sp),a0
    bc40:	|  |   move.l #1065353216,32(a0)
        return TRUE;
    bc48:	|  \-> moveq #1,d0
    bc4a:	|  /-- bra.s bc4e <setPersonExtra+0x32>
    }
    return FALSE;
    bc4c:	\--|-> clr.w d0
}
    bc4e:	   \-> addq.l #4,sp
    bc50:	       rts

0000bc52 <setScale>:


void setScale (short int h, short int d) {
    bc52:	subq.l #4,sp
    bc54:	move.l 8(sp),d1
    bc58:	move.l 12(sp),d0
    bc5c:	move.w d1,d1
    bc5e:	move.w d1,2(sp)
    bc62:	move.w d0,d0
    bc64:	move.w d0,(sp)
	scaleHorizon = h;
    bc66:	move.w 2(sp),1c1ee <scaleHorizon>
	scaleDivide = d;
    bc6e:	move.w (sp),1c1f0 <scaleDivide>
}
    bc74:	nop
    bc76:	addq.l #4,sp
    bc78:	rts

0000bc7a <setShown>:

void setShown (BOOL h, int ob) {
    bc7a:	    subq.l #8,sp
    bc7c:	    move.l 12(sp),d0
    bc80:	    move.w d0,d0
    bc82:	    move.w d0,2(sp)
	struct onScreenPerson * moveMe = findPerson (ob);
    bc86:	    move.l 16(sp),-(sp)
    bc8a:	    jsr a646 <findPerson>
    bc90:	    addq.l #4,sp
    bc92:	    move.l d0,4(sp)
	if (moveMe) moveMe -> show = h;
    bc96:	/-- beq.s bca2 <setShown+0x28>
    bc98:	|   movea.l 4(sp),a0
    bc9c:	|   move.w 2(sp),104(a0)
}
    bca2:	\-> nop
    bca4:	    addq.l #8,sp
    bca6:	    rts

0000bca8 <spinStep>:

void spinStep (struct onScreenPerson * thisPerson) {
    bca8:	       subq.l #8,sp
    bcaa:	       move.l d2,-(sp)
	int diff = (thisPerson->angle + 360) - thisPerson->wantAngle;
    bcac:	       movea.l 16(sp),a0
    bcb0:	       move.l 92(a0),d0
    bcb4:	       move.l d0,d1
    bcb6:	       addi.l #360,d1
    bcbc:	       movea.l 16(sp),a0
    bcc0:	       move.l 96(a0),d0
    bcc4:	       move.l d1,d2
    bcc6:	       sub.l d0,d2
    bcc8:	       move.l d2,8(sp)
	int eachSlice = thisPerson->spinSpeed ? thisPerson->spinSpeed : (360 / thisPerson->myPersona->numDirections);
    bccc:	       movea.l 16(sp),a0
    bcd0:	       move.l 122(a0),d0
    bcd4:	   /-- beq.s bce0 <spinStep+0x38>
    bcd6:	   |   movea.l 16(sp),a0
    bcda:	   |   move.l 122(a0),d0
    bcde:	/--|-- bra.s bcfa <spinStep+0x52>
    bce0:	|  \-> movea.l 16(sp),a0
    bce4:	|      movea.l 80(a0),a0
    bce8:	|      move.l 4(a0),d0
    bcec:	|      move.l d0,-(sp)
    bcee:	|      pea 168 <decodeFilename+0x50>
    bcf2:	|      jsr 17bb2 <__divsi3>
    bcf8:	|      addq.l #8,sp
    bcfa:	\----> move.l d0,4(sp)
	while (diff > 180) {
    bcfe:	   /-- bra.s bd08 <spinStep+0x60>
		diff -= 360;
    bd00:	/--|-> addi.l #-360,8(sp)
	while (diff > 180) {
    bd08:	|  \-> cmpi.l #180,8(sp)
    bd10:	\----- bgt.s bd00 <spinStep+0x58>
	}

	if (diff >= eachSlice) {
    bd12:	       move.l 8(sp),d0
    bd16:	       cmp.l 4(sp),d0
    bd1a:	   /-- blt.s bd38 <spinStep+0x90>
		turnMeAngle(thisPerson, thisPerson->angle - eachSlice);
    bd1c:	   |   movea.l 16(sp),a0
    bd20:	   |   move.l 92(a0),d0
    bd24:	   |   sub.l 4(sp),d0
    bd28:	   |   move.l d0,-(sp)
    bd2a:	   |   move.l 20(sp),-(sp)
    bd2e:	   |   jsr be18 <turnMeAngle>
    bd34:	   |   addq.l #8,sp
		turnMeAngle(thisPerson, thisPerson->angle + eachSlice);
	} else {
		turnMeAngle(thisPerson, thisPerson->wantAngle);
		thisPerson->spinning = FALSE;
	}
}
    bd36:	/--|-- bra.s bd7e <spinStep+0xd6>
	} else if (diff <= -eachSlice) {
    bd38:	|  \-> move.l 4(sp),d0
    bd3c:	|      neg.l d0
    bd3e:	|      cmp.l 8(sp),d0
    bd42:	|  /-- blt.s bd60 <spinStep+0xb8>
		turnMeAngle(thisPerson, thisPerson->angle + eachSlice);
    bd44:	|  |   movea.l 16(sp),a0
    bd48:	|  |   move.l 92(a0),d0
    bd4c:	|  |   add.l 4(sp),d0
    bd50:	|  |   move.l d0,-(sp)
    bd52:	|  |   move.l 20(sp),-(sp)
    bd56:	|  |   jsr be18 <turnMeAngle>
    bd5c:	|  |   addq.l #8,sp
}
    bd5e:	+--|-- bra.s bd7e <spinStep+0xd6>
		turnMeAngle(thisPerson, thisPerson->wantAngle);
    bd60:	|  \-> movea.l 16(sp),a0
    bd64:	|      move.l 96(a0),d0
    bd68:	|      move.l d0,-(sp)
    bd6a:	|      move.l 20(sp),-(sp)
    bd6e:	|      jsr be18 <turnMeAngle>
    bd74:	|      addq.l #8,sp
		thisPerson->spinning = FALSE;
    bd76:	|      movea.l 16(sp),a0
    bd7a:	|      clr.w 66(a0)
}
    bd7e:	\----> nop
    bd80:	       move.l (sp)+,d2
    bd82:	       addq.l #8,sp
    bd84:	       rts

0000bd86 <stopPerson>:


BOOL stopPerson (int o) {
    bd86:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(o);
    bd88:	       move.l 8(sp),-(sp)
    bd8c:	       jsr a646 <findPerson>
    bd92:	       addq.l #4,sp
    bd94:	       move.l d0,(sp)
    if (moveMe)
    bd96:	/----- beq.s bdd4 <stopPerson+0x4e>
        if (moveMe -> continueAfterWalking) {
    bd98:	|      movea.l (sp),a0
    bd9a:	|      move.l 68(a0),d0
    bd9e:	+----- beq.s bdd4 <stopPerson+0x4e>
            abortFunction(moveMe -> continueAfterWalking);
    bda0:	|      movea.l (sp),a0
    bda2:	|      move.l 68(a0),d0
    bda6:	|      move.l d0,-(sp)
    bda8:	|      jsr 478c <abortFunction>
    bdae:	|      addq.l #4,sp
            moveMe -> continueAfterWalking = NULL;
    bdb0:	|      movea.l (sp),a0
    bdb2:	|      clr.l 68(a0)
            moveMe -> walking = FALSE;
    bdb6:	|      movea.l (sp),a0
    bdb8:	|      clr.w 64(a0)
            moveMe -> spinning = FALSE;
    bdbc:	|      movea.l (sp),a0
    bdbe:	|      clr.w 66(a0)
            setFrames(moveMe, ANI_STAND);
    bdc2:	|      clr.l -(sp)
    bdc4:	|      move.l 4(sp),-(sp)
    bdc8:	|      jsr 81e4 <setFrames>
    bdce:	|      addq.l #8,sp
            return TRUE;
    bdd0:	|      moveq #1,d0
    bdd2:	|  /-- bra.s bdd6 <stopPerson+0x50>
        }
    return FALSE;
    bdd4:	\--|-> clr.w d0
}
    bdd6:	   \-> addq.l #4,sp
    bdd8:	       rts

0000bdda <timeForAnim>:


int timeForAnim (struct personaAnimation * fram) {
    bdda:	       subq.l #8,sp
	int total = 0;
    bddc:	       clr.l 4(sp)
	for (int a = 0; a < fram -> numFrames; a ++) {
    bde0:	       clr.l (sp)
    bde2:	   /-- bra.s be04 <timeForAnim+0x2a>
		total += fram -> frames[a].howMany;
    bde4:	/--|-> movea.l 12(sp),a0
    bde8:	|  |   movea.l 4(a0),a0
    bdec:	|  |   move.l (sp),d1
    bdee:	|  |   move.l d1,d0
    bdf0:	|  |   add.l d0,d0
    bdf2:	|  |   add.l d1,d0
    bdf4:	|  |   add.l d0,d0
    bdf6:	|  |   add.l d0,d0
    bdf8:	|  |   adda.l d0,a0
    bdfa:	|  |   move.l 4(a0),d0
    bdfe:	|  |   add.l d0,4(sp)
	for (int a = 0; a < fram -> numFrames; a ++) {
    be02:	|  |   addq.l #1,(sp)
    be04:	|  \-> movea.l 12(sp),a0
    be08:	|      move.l 8(a0),d0
    be0c:	|      cmp.l (sp),d0
    be0e:	\----- bgt.s bde4 <timeForAnim+0xa>
	}
	return total;
    be10:	       move.l 4(sp),d0
}
    be14:	       addq.l #8,sp
    be16:	       rts

0000be18 <turnMeAngle>:

void turnMeAngle (struct onScreenPerson * thisPerson, int direc) {
    be18:	       subq.l #4,sp
	int d = thisPerson -> myPersona -> numDirections;
    be1a:	       movea.l 8(sp),a0
    be1e:	       movea.l 80(a0),a0
    be22:	       move.l 4(a0),(sp)
	thisPerson -> angle = direc;
    be26:	       movea.l 8(sp),a0
    be2a:	       move.l 12(sp),92(a0)
	direc += (180 / d) + 180 + thisPerson -> angleOffset;
    be30:	       move.l (sp),-(sp)
    be32:	       pea b4 <_start+0xb4>
    be36:	       jsr 17bb2 <__divsi3>
    be3c:	       addq.l #8,sp
    be3e:	       move.l d0,d1
    be40:	       addi.l #180,d1
    be46:	       movea.l 8(sp),a0
    be4a:	       move.l 100(a0),d0
    be4e:	       add.l d1,d0
    be50:	       add.l d0,12(sp)
	while (direc >= 360) direc -= 360;
    be54:	   /-- bra.s be5e <turnMeAngle+0x46>
    be56:	/--|-> addi.l #-360,12(sp)
    be5e:	|  \-> cmpi.l #359,12(sp)
    be66:	\----- bgt.s be56 <turnMeAngle+0x3e>
	thisPerson -> direction = (direc * d) / 360;
    be68:	       move.l (sp),-(sp)
    be6a:	       move.l 16(sp),-(sp)
    be6e:	       jsr 17b34 <__mulsi3>
    be74:	       addq.l #8,sp
    be76:	       pea 168 <decodeFilename+0x50>
    be7a:	       move.l d0,-(sp)
    be7c:	       jsr 17bb2 <__divsi3>
    be82:	       addq.l #8,sp
    be84:	       movea.l 8(sp),a0
    be88:	       move.l d0,106(a0)
}
    be8c:	       nop
    be8e:	       addq.l #4,sp
    be90:	       rts

0000be92 <turnPersonToFace>:

BOOL turnPersonToFace (int thisNum, int direc) {
    be92:	          subq.l #4,sp
    struct onScreenPerson * thisPerson = findPerson(thisNum);
    be94:	          move.l 8(sp),-(sp)
    be98:	          jsr a646 <findPerson>
    be9e:	          addq.l #4,sp
    bea0:	          move.l d0,(sp)
    if (thisPerson) {
    bea2:	/-------- beq.s bf02 <turnPersonToFace+0x70>
        if (thisPerson -> continueAfterWalking) abortFunction(thisPerson -> continueAfterWalking);
    bea4:	|         movea.l (sp),a0
    bea6:	|         move.l 68(a0),d0
    beaa:	|     /-- beq.s bebc <turnPersonToFace+0x2a>
    beac:	|     |   movea.l (sp),a0
    beae:	|     |   move.l 68(a0),d0
    beb2:	|     |   move.l d0,-(sp)
    beb4:	|     |   jsr 478c <abortFunction>
    beba:	|     |   addq.l #4,sp
        thisPerson -> continueAfterWalking = NULL;
    bebc:	|     \-> movea.l (sp),a0
    bebe:	|         clr.l 68(a0)
        thisPerson -> walking = FALSE;
    bec2:	|         movea.l (sp),a0
    bec4:	|         clr.w 64(a0)
        thisPerson -> spinning = FALSE;
    bec8:	|         movea.l (sp),a0
    beca:	|         clr.w 66(a0)
        turnMeAngle(thisPerson, direc);
    bece:	|         move.l 12(sp),-(sp)
    bed2:	|         move.l 4(sp),-(sp)
    bed6:	|         jsr be18 <turnMeAngle>
    bedc:	|         addq.l #8,sp
        setFrames(thisPerson, (thisPerson == speech->currentTalker) ? ANI_TALK : ANI_STAND);
    bede:	|         movea.l 1c8b8 <speech>,a0
    bee4:	|         move.l (a0),d0
    bee6:	|         cmp.l (sp),d0
    bee8:	|  /----- bne.s beee <turnPersonToFace+0x5c>
    beea:	|  |      moveq #2,d0
    beec:	|  |  /-- bra.s bef0 <turnPersonToFace+0x5e>
    beee:	|  \--|-> moveq #0,d0
    bef0:	|     \-> move.l d0,-(sp)
    bef2:	|         move.l 4(sp),-(sp)
    bef6:	|         jsr 81e4 <setFrames>
    befc:	|         addq.l #8,sp
        return TRUE;
    befe:	|         moveq #1,d0
    bf00:	|     /-- bra.s bf04 <turnPersonToFace+0x72>
    }
    return FALSE;
    bf02:	\-----|-> clr.w d0
}
    bf04:	      \-> addq.l #4,sp
    bf06:	          rts

0000bf08 <walkMe>:

BOOL walkMe (struct onScreenPerson * thisPerson, BOOL move) {
    bf08:	                lea -20(sp),sp
    bf0c:	                move.l d3,-(sp)
    bf0e:	                move.l d2,-(sp)
    bf10:	                move.l 36(sp),d0
    bf14:	                move.w d0,d0
    bf16:	                move.w d0,10(sp)
	float xDiff, yDiff, maxDiff, s;

	if (move == -1) move = TRUE;  // Initialize default value for move
    bf1a:	                cmpi.w #-1,10(sp)
    bf20:	/-------------- bne.s bf28 <walkMe+0x20>
    bf22:	|               move.w #1,10(sp)

	for (;;) {
		xDiff = thisPerson->thisStepX - thisPerson->x;
    bf28:	>-------------> movea.l 32(sp),a0
    bf2c:	|               move.l 48(a0),d0
    bf30:	|               move.l d0,-(sp)
    bf32:	|               jsr 175b2 <__floatsisf>
    bf38:	|               addq.l #4,sp
    bf3a:	|               move.l d0,d1
    bf3c:	|               movea.l 32(sp),a0
    bf40:	|               move.l (a0),d0
    bf42:	|               move.l d0,-(sp)
    bf44:	|               move.l d1,-(sp)
    bf46:	|               jsr 178a6 <__subsf3>
    bf4c:	|               addq.l #8,sp
    bf4e:	|               move.l d0,20(sp)
		yDiff = (thisPerson->thisStepY - thisPerson->y) * 2;
    bf52:	|               movea.l 32(sp),a0
    bf56:	|               move.l 52(a0),d0
    bf5a:	|               move.l d0,-(sp)
    bf5c:	|               jsr 175b2 <__floatsisf>
    bf62:	|               addq.l #4,sp
    bf64:	|               move.l d0,d1
    bf66:	|               movea.l 32(sp),a0
    bf6a:	|               move.l 4(a0),d0
    bf6e:	|               move.l d0,-(sp)
    bf70:	|               move.l d1,-(sp)
    bf72:	|               jsr 178a6 <__subsf3>
    bf78:	|               addq.l #8,sp
    bf7a:	|               move.l d0,-(sp)
    bf7c:	|               move.l d0,-(sp)
    bf7e:	|               jsr 17364 <__addsf3>
    bf84:	|               addq.l #8,sp
    bf86:	|               move.l d0,16(sp)
		s = thisPerson->scale * thisPerson->walkSpeed;
    bf8a:	|               movea.l 32(sp),a0
    bf8e:	|               move.l 32(a0),d2
    bf92:	|               movea.l 32(sp),a0
    bf96:	|               move.l 28(a0),d0
    bf9a:	|               move.l d0,-(sp)
    bf9c:	|               jsr 175b2 <__floatsisf>
    bfa2:	|               addq.l #4,sp
    bfa4:	|               move.l d0,-(sp)
    bfa6:	|               move.l d2,-(sp)
    bfa8:	|               jsr 17664 <__mulsf3>
    bfae:	|               addq.l #8,sp
    bfb0:	|               move.l d0,24(sp)
		if (s < 0.2) s = 0.2;
    bfb4:	|               move.l 24(sp),-(sp)
    bfb8:	|               jsr 174ca <__extendsfdf2>
    bfbe:	|               addq.l #4,sp
    bfc0:	|               move.l #-1717986918,-(sp)
    bfc6:	|               move.l #1070176665,-(sp)
    bfcc:	|               move.l d1,-(sp)
    bfce:	|               move.l d0,-(sp)
    bfd0:	|               jsr 1778a <__ltdf2>
    bfd6:	|               lea 16(sp),sp
    bfda:	|               tst.l d0
    bfdc:	|           /-- bge.s bfe6 <walkMe+0xde>
    bfde:	|           |   move.l #1045220557,24(sp)

		maxDiff = (TF_abs(xDiff) >= TF_abs(yDiff)) ? TF_abs(xDiff) : TF_abs(yDiff);
    bfe6:	|           \-> move.l 20(sp),-(sp)
    bfea:	|               jsr 1754a <__fixsfsi>
    bff0:	|               addq.l #4,sp
    bff2:	|               move.l d0,-(sp)
    bff4:	|               jsr 9236 <TF_abs>
    bffa:	|               addq.l #4,sp
    bffc:	|               move.l d0,d2
    bffe:	|               move.l 16(sp),-(sp)
    c002:	|               jsr 1754a <__fixsfsi>
    c008:	|               addq.l #4,sp
    c00a:	|               move.l d0,-(sp)
    c00c:	|               jsr 9236 <TF_abs>
    c012:	|               addq.l #4,sp
    c014:	|               cmp.l d2,d0
    c016:	|        /----- bgt.s c03a <walkMe+0x132>
    c018:	|        |      move.l 20(sp),-(sp)
    c01c:	|        |      jsr 1754a <__fixsfsi>
    c022:	|        |      addq.l #4,sp
    c024:	|        |      move.l d0,-(sp)
    c026:	|        |      jsr 9236 <TF_abs>
    c02c:	|        |      addq.l #4,sp
    c02e:	|        |      move.l d0,-(sp)
    c030:	|        |      jsr 175b2 <__floatsisf>
    c036:	|        |      addq.l #4,sp
    c038:	|        |  /-- bra.s c05a <walkMe+0x152>
    c03a:	|        \--|-> move.l 16(sp),-(sp)
    c03e:	|           |   jsr 1754a <__fixsfsi>
    c044:	|           |   addq.l #4,sp
    c046:	|           |   move.l d0,-(sp)
    c048:	|           |   jsr 9236 <TF_abs>
    c04e:	|           |   addq.l #4,sp
    c050:	|           |   move.l d0,-(sp)
    c052:	|           |   jsr 175b2 <__floatsisf>
    c058:	|           |   addq.l #4,sp
    c05a:	|           \-> move.l d0,12(sp)

		if (TF_abs(maxDiff) > s) {
    c05e:	|               move.l 12(sp),-(sp)
    c062:	|               jsr 1754a <__fixsfsi>
    c068:	|               addq.l #4,sp
    c06a:	|               move.l d0,-(sp)
    c06c:	|               jsr 9236 <TF_abs>
    c072:	|               addq.l #4,sp
    c074:	|               move.l d0,-(sp)
    c076:	|               jsr 175b2 <__floatsisf>
    c07c:	|               addq.l #4,sp
    c07e:	|               move.l d0,-(sp)
    c080:	|               move.l 28(sp),-(sp)
    c084:	|               jsr 177d8 <__ltsf2>
    c08a:	|               addq.l #8,sp
    c08c:	|               tst.l d0
    c08e:	|        /----- bge.w c140 <walkMe+0x238>
			if (thisPerson->spinning) {
    c092:	|        |      movea.l 32(sp),a0
    c096:	|        |      move.w 66(a0),d0
    c09a:	|        |  /-- beq.s c0b8 <walkMe+0x1b0>
				spinStep(thisPerson);
    c09c:	|        |  |   move.l 32(sp),-(sp)
    c0a0:	|        |  |   jsr bca8 <spinStep>
    c0a6:	|        |  |   addq.l #4,sp
				setFrames(thisPerson, ANI_WALK);
    c0a8:	|        |  |   pea 1 <_start+0x1>
    c0ac:	|        |  |   move.l 36(sp),-(sp)
    c0b0:	|        |  |   jsr 81e4 <setFrames>
    c0b6:	|        |  |   addq.l #8,sp
			}
			s = maxDiff / s;
    c0b8:	|        |  \-> move.l 24(sp),-(sp)
    c0bc:	|        |      move.l 16(sp),-(sp)
    c0c0:	|        |      jsr 1745e <__divsf3>
    c0c6:	|        |      addq.l #8,sp
    c0c8:	|        |      move.l d0,24(sp)
			if (move)
    c0cc:	|        |      tst.w 10(sp)
    c0d0:	|        |  /-- beq.s c13a <walkMe+0x232>
				moveAndScale(thisPerson,
							 thisPerson->x + xDiff / s,
							 thisPerson->y + yDiff / (s * 2));
    c0d2:	|        |  |   movea.l 32(sp),a0
    c0d6:	|        |  |   move.l 4(a0),d2
    c0da:	|        |  |   move.l 24(sp),d0
    c0de:	|        |  |   move.l d0,-(sp)
    c0e0:	|        |  |   move.l d0,-(sp)
    c0e2:	|        |  |   jsr 17364 <__addsf3>
    c0e8:	|        |  |   addq.l #8,sp
    c0ea:	|        |  |   move.l d0,-(sp)
    c0ec:	|        |  |   move.l 20(sp),-(sp)
    c0f0:	|        |  |   jsr 1745e <__divsf3>
    c0f6:	|        |  |   addq.l #8,sp
				moveAndScale(thisPerson,
    c0f8:	|        |  |   move.l d0,-(sp)
    c0fa:	|        |  |   move.l d2,-(sp)
    c0fc:	|        |  |   jsr 17364 <__addsf3>
    c102:	|        |  |   addq.l #8,sp
    c104:	|        |  |   move.l d0,d2
							 thisPerson->x + xDiff / s,
    c106:	|        |  |   movea.l 32(sp),a0
    c10a:	|        |  |   move.l (a0),d3
    c10c:	|        |  |   move.l 24(sp),-(sp)
    c110:	|        |  |   move.l 24(sp),-(sp)
    c114:	|        |  |   jsr 1745e <__divsf3>
    c11a:	|        |  |   addq.l #8,sp
				moveAndScale(thisPerson,
    c11c:	|        |  |   move.l d0,-(sp)
    c11e:	|        |  |   move.l d3,-(sp)
    c120:	|        |  |   jsr 17364 <__addsf3>
    c126:	|        |  |   addq.l #8,sp
    c128:	|        |  |   move.l d2,-(sp)
    c12a:	|        |  |   move.l d0,-(sp)
    c12c:	|        |  |   move.l 40(sp),-(sp)
    c130:	|        |  |   jsr ad8e <moveAndScale>
    c136:	|        |  |   lea 12(sp),sp
			return TRUE;
    c13a:	|        |  \-> moveq #1,d0
    c13c:	|  /-----|----- bra.w c1ee <walkMe+0x2e6>
		}

		if (thisPerson->inPoly == -1) {
    c140:	|  |     \----> movea.l 32(sp),a0
    c144:	|  |            move.l 56(a0),d0
    c148:	|  |            moveq #-1,d1
    c14a:	|  |            cmp.l d0,d1
    c14c:	|  |        /-- bne.s c184 <walkMe+0x27c>
			if (thisPerson->directionWhenDoneWalking != -1) {
    c14e:	|  |        |   movea.l 32(sp),a0
    c152:	|  |        |   move.l 110(a0),d0
    c156:	|  |        |   moveq #-1,d1
    c158:	|  |        |   cmp.l d0,d1
    c15a:	|  |  /-----|-- beq.s c198 <walkMe+0x290>
				thisPerson->wantAngle = thisPerson->directionWhenDoneWalking;
    c15c:	|  |  |     |   movea.l 32(sp),a0
    c160:	|  |  |     |   move.l 110(a0),d0
    c164:	|  |  |     |   movea.l 32(sp),a0
    c168:	|  |  |     |   move.l d0,96(a0)
				thisPerson->spinning = TRUE;
    c16c:	|  |  |     |   movea.l 32(sp),a0
    c170:	|  |  |     |   move.w #1,66(a0)
				spinStep(thisPerson);
    c176:	|  |  |     |   move.l 32(sp),-(sp)
    c17a:	|  |  |     |   jsr bca8 <spinStep>
    c180:	|  |  |     |   addq.l #4,sp
			}
			break;
    c182:	|  |  +-----|-- bra.s c198 <walkMe+0x290>
		}
		if (!doBorderStuff(thisPerson)) break;
    c184:	|  |  |     \-> move.l 32(sp),-(sp)
    c188:	|  |  |         jsr 99a8 <doBorderStuff>
    c18e:	|  |  |         addq.l #4,sp
    c190:	|  |  |         tst.w d0
    c192:	|  |  |  /----- beq.s c19c <walkMe+0x294>
		xDiff = thisPerson->thisStepX - thisPerson->x;
    c194:	\--|--|--|----- bra.w bf28 <walkMe+0x20>
			break;
    c198:	   |  \--|----> nop
    c19a:	   |     |  /-- bra.s c19e <walkMe+0x296>
		if (!doBorderStuff(thisPerson)) break;
    c19c:	   |     \--|-> nop
	}

	thisPerson->walking = FALSE;
    c19e:	   |        \-> movea.l 32(sp),a0
    c1a2:	   |            clr.w 64(a0)
	setFrames(thisPerson, ANI_STAND);
    c1a6:	   |            clr.l -(sp)
    c1a8:	   |            move.l 36(sp),-(sp)
    c1ac:	   |            jsr 81e4 <setFrames>
    c1b2:	   |            addq.l #8,sp
	moveAndScale(thisPerson,
				 thisPerson->walkToX,
				 thisPerson->walkToY);
    c1b4:	   |            movea.l 32(sp),a0
    c1b8:	   |            move.l 44(a0),d0
	moveAndScale(thisPerson,
    c1bc:	   |            move.l d0,-(sp)
    c1be:	   |            jsr 175b2 <__floatsisf>
    c1c4:	   |            addq.l #4,sp
    c1c6:	   |            move.l d0,d2
				 thisPerson->walkToX,
    c1c8:	   |            movea.l 32(sp),a0
    c1cc:	   |            move.l 40(a0),d0
	moveAndScale(thisPerson,
    c1d0:	   |            move.l d0,-(sp)
    c1d2:	   |            jsr 175b2 <__floatsisf>
    c1d8:	   |            addq.l #4,sp
    c1da:	   |            move.l d2,-(sp)
    c1dc:	   |            move.l d0,-(sp)
    c1de:	   |            move.l 40(sp),-(sp)
    c1e2:	   |            jsr ad8e <moveAndScale>
    c1e8:	   |            lea 12(sp),sp
	return FALSE;
    c1ec:	   |            clr.w d0
}
    c1ee:	   \----------> move.l (sp)+,d2
    c1f0:	                move.l (sp)+,d3
    c1f2:	                lea 20(sp),sp
    c1f6:	                rts

0000c1f8 <clearStackLib>:
};

int stackLibTotal = 0;
struct stackLibrary * stackLib = NULL;

void clearStackLib () {
    c1f8:	       subq.l #8,sp
    c1fa:	       move.l a6,-(sp)
	struct stackLibrary * k;
	while (stackLib) {
    c1fc:	   /-- bra.s c22c <clearStackLib+0x34>
		k = stackLib;
    c1fe:	/--|-> move.l 1c8ec <stackLib>,8(sp)
		stackLib = stackLib -> next;
    c206:	|  |   movea.l 1c8ec <stackLib>,a0
    c20c:	|  |   move.l 4(a0),d0
    c210:	|  |   move.l d0,1c8ec <stackLib>
		FreeVec(k);
    c216:	|  |   move.l 8(sp),4(sp)
    c21c:	|  |   move.l 1c85c <SysBase>,d0
    c222:	|  |   movea.l d0,a6
    c224:	|  |   movea.l 4(sp),a1
    c228:	|  |   jsr -690(a6)
	while (stackLib) {
    c22c:	|  \-> move.l 1c8ec <stackLib>,d0
    c232:	\----- bne.s c1fe <clearStackLib+0x6>
	}
	stackLibTotal = 0;
    c234:	       clr.l 1c8e8 <stackLibTotal>
}
    c23a:	       nop
    c23c:	       movea.l (sp)+,a6
    c23e:	       addq.l #8,sp
    c240:	       rts

0000c242 <loadGame>:
	}

	return buildFunc;
}

BOOL loadGame (char * fname) {
    c242:	          lea -128(sp),sp
    c246:	          movem.l d2-d3/a6,-(sp)
	BPTR fp;
	FILETIME savedGameTime;
	int a;

	while (allRunningFunctions) finishFunction (allRunningFunctions);
    c24a:	      /-- bra.s c25c <loadGame+0x1a>
    c24c:	   /--|-> move.l 1c7f4 <allRunningFunctions>,d0
    c252:	   |  |   move.l d0,-(sp)
    c254:	   |  |   jsr 5794 <finishFunction>
    c25a:	   |  |   addq.l #4,sp
    c25c:	   |  \-> move.l 1c7f4 <allRunningFunctions>,d0
    c262:	   \----- bne.s c24c <loadGame+0xa>

	fp = openAndVerify (fname, 'S', 'A', ERROR_GAME_LOAD_NO, &ssgVersion);
    c264:	          pea 1c8f0 <ssgVersion>
    c26a:	          pea 190e8 <PutChar+0x149e>
    c270:	          pea 41 <_start+0x41>
    c274:	          pea 53 <_start+0x53>
    c278:	          move.l 160(sp),-(sp)
    c27c:	          jsr 654a <openAndVerify>
    c282:	          lea 20(sp),sp
    c286:	          move.l d0,112(sp)
	if (fp == NULL) return FALSE;
    c28a:	      /-- bne.s c292 <loadGame+0x50>
    c28c:	      |   clr.w d0
    c28e:	/-----|-- bra.w c538 <loadGame+0x2f6>

	unsigned int bytes_read = Read( fp, &savedGameTime, sizeof (FILETIME));
    c292:	|     \-> move.l 112(sp),108(sp)
    c298:	|         lea 140(sp),a0
    c29c:	|         lea -126(a0),a0
    c2a0:	|         move.l a0,120(sp)
    c2a4:	|         moveq #8,d0
    c2a6:	|         move.l d0,116(sp)
    c2aa:	|         move.l 1c864 <DOSBase>,d0
    c2b0:	|         movea.l d0,a6
    c2b2:	|         move.l 108(sp),d1
    c2b6:	|         move.l 120(sp),d2
    c2ba:	|         move.l 116(sp),d3
    c2be:	|         jsr -42(a6)
    c2c2:	|         move.l d0,132(sp)
    c2c6:	|         move.l 132(sp),d0
    c2ca:	|         move.l d0,128(sp)
	
	if (bytes_read != sizeof (FILETIME)) {
    c2ce:	|         moveq #8,d0
    c2d0:	|         cmp.l 128(sp),d0
    c2d4:	|     /-- beq.s c2e4 <loadGame+0xa2>
		KPrintF("Reading error in loadGame.\n");
    c2d6:	|     |   pea 19109 <PutChar+0x14bf>
    c2dc:	|     |   jsr 17176 <KPrintF>
    c2e2:	|     |   addq.l #4,sp
	}

	if (savedGameTime.dwLowDateTime != fileTime.dwLowDateTime ||
    c2e4:	|     \-> move.l 14(sp),d1
    c2e8:	|         move.l 1c7fe <fileTime>,d0
    c2ee:	|         cmp.l d1,d0
    c2f0:	|     /-- bne.s c300 <loadGame+0xbe>
		savedGameTime.dwHighDateTime != fileTime.dwHighDateTime) {
    c2f2:	|     |   move.l 18(sp),d1
    c2f6:	|     |   move.l 1c802 <fileTime+0x4>,d0
	if (savedGameTime.dwLowDateTime != fileTime.dwLowDateTime ||
    c2fc:	|     |   cmp.l d1,d0
    c2fe:	|  /--|-- beq.s c320 <loadGame+0xde>
		KPrintF("loadgame:", ERROR_GAME_LOAD_WRONG, fname);
    c300:	|  |  \-> move.l 144(sp),-(sp)
    c304:	|  |      pea 19125 <PutChar+0x14db>
    c30a:	|  |      pea 191ec <PutChar+0x15a2>
    c310:	|  |      jsr 17176 <KPrintF>
    c316:	|  |      lea 12(sp),sp
		return FALSE; 
    c31a:	|  |      clr.w d0
    c31c:	+--|----- bra.w c538 <loadGame+0x2f6>
	}

	// DON'T ADD ANYTHING NEW BEFORE THIS POINT!

	allowAnyFilename = FGetC (fp);
    c320:	|  \----> move.l 112(sp),124(sp)
    c326:	|         move.l 1c864 <DOSBase>,d0
    c32c:	|         movea.l d0,a6
    c32e:	|         move.l 124(sp),d1
    c332:	|         jsr -306(a6)
    c336:	|         move.l d0,136(sp)
    c33a:	|         move.l 136(sp),d0
    c33e:	|         move.l d0,d0
    c340:	|         move.w d0,1c0b8 <allowAnyFilename>
	captureAllKeys = FGetC (fp);
    c346:	|         move.l 112(sp),100(sp)
    c34c:	|         move.l 1c864 <DOSBase>,d0
    c352:	|         movea.l d0,a6
    c354:	|         move.l 100(sp),d1
    c358:	|         jsr -306(a6)
    c35c:	|         move.l d0,96(sp)
    c360:	|         move.l 96(sp),d0
    c364:	|         move.l d0,d0
    c366:	|         move.w d0,1c7fc <captureAllKeys>
	FGetC (fp); // updateDisplay (part of movie playing)
    c36c:	|         move.l 112(sp),92(sp)
    c372:	|         move.l 1c864 <DOSBase>,d0
    c378:	|         movea.l d0,a6
    c37a:	|         move.l 92(sp),d1
    c37e:	|         jsr -306(a6)
    c382:	|         move.l d0,88(sp)

	BOOL fontLoaded = FGetC (fp);
    c386:	|         move.l 112(sp),84(sp)
    c38c:	|         move.l 1c864 <DOSBase>,d0
    c392:	|         movea.l d0,a6
    c394:	|         move.l 84(sp),d1
    c398:	|         jsr -306(a6)
    c39c:	|         move.l d0,80(sp)
    c3a0:	|         move.l 80(sp),d0
    c3a4:	|         move.w d0,78(sp)
	int fontNum;
	char * charOrder;
	if (fontLoaded) {
    c3a8:	|     /-- beq.s c3dc <loadGame+0x19a>
		fontNum = get2bytes (fp);
    c3aa:	|     |   move.l 112(sp),-(sp)
    c3ae:	|     |   jsr 6bc <get2bytes>
    c3b4:	|     |   addq.l #4,sp
    c3b6:	|     |   move.l d0,74(sp)
		fontHeight = get2bytes (fp);		
    c3ba:	|     |   move.l 112(sp),-(sp)
    c3be:	|     |   jsr 6bc <get2bytes>
    c3c4:	|     |   addq.l #4,sp
    c3c6:	|     |   move.l d0,1c954 <fontHeight>
		charOrder = readString(fp);		
    c3cc:	|     |   move.l 112(sp),-(sp)
    c3d0:	|     |   jsr b02 <readString>
    c3d6:	|     |   addq.l #4,sp
    c3d8:	|     |   move.l d0,104(sp)
	}
	//loadFont (fontNum, charOrder, fontHeight); Amiga Todo: Implement Graphics stuff
	FreeVec(charOrder);
    c3dc:	|     \-> move.l 104(sp),70(sp)
    c3e2:	|         move.l 1c85c <SysBase>,d0
    c3e8:	|         movea.l d0,a6
    c3ea:	|         movea.l 70(sp),a1
    c3ee:	|         jsr -690(a6)
	
	fontSpace = getSigned (fp);
    c3f2:	|         move.l 112(sp),-(sp)
    c3f6:	|         jsr 854 <getSigned>
    c3fc:	|         addq.l #4,sp
    c3fe:	|         move.w d0,1c760 <fontSpace>

	killAllPeople ();
    c404:	|         jsr aa30 <killAllPeople>
	killAllRegions ();
    c40a:	|         jsr 159c6 <killAllRegions>

	int camerX = get2bytes (fp);
    c410:	|         move.l 112(sp),-(sp)
    c414:	|         jsr 6bc <get2bytes>
    c41a:	|         addq.l #4,sp
    c41c:	|         move.l d0,66(sp)
	int camerY = get2bytes (fp);
    c420:	|         move.l 112(sp),-(sp)
    c424:	|         jsr 6bc <get2bytes>
    c42a:	|         addq.l #4,sp
    c42c:	|         move.l d0,62(sp)
	FLOAT camerZ;
	camerZ = getFloat(fp);
    c430:	|         move.l 112(sp),-(sp)
    c434:	|         jsr 7d8 <getFloat>
    c43a:	|         addq.l #4,sp
    c43c:	|         move.l d0,58(sp)

	brightnessLevel = FGetC (fp);
    c440:	|         move.l 112(sp),54(sp)
    c446:	|         move.l 1c864 <DOSBase>,d0
    c44c:	|         movea.l d0,a6
    c44e:	|         move.l 54(sp),d1
    c452:	|         jsr -306(a6)
    c456:	|         move.l d0,50(sp)
    c45a:	|         move.l 50(sp),d0
    c45e:	|         move.l d0,d0
    c460:	|         move.b d0,1c1d2 <brightnessLevel>

	loadHandlers (fp);
    c466:	|         move.l 112(sp),-(sp)
    c46a:	|         jsr 64aa <loadHandlers>
    c470:	|         addq.l #4,sp
	loadRegions (fp);
    c472:	|         move.l 112(sp),-(sp)
    c476:	|         jsr 15a22 <loadRegions>
    c47c:	|         addq.l #4,sp

	mouseCursorAnim = AllocVec( sizeof( struct personaAnimation), MEMF_ANY);
    c47e:	|         moveq #12,d0
    c480:	|         move.l d0,46(sp)
    c484:	|         clr.l 42(sp)
    c488:	|         move.l 1c85c <SysBase>,d0
    c48e:	|         movea.l d0,a6
    c490:	|         move.l 46(sp),d0
    c494:	|         move.l 42(sp),d1
    c498:	|         jsr -684(a6)
    c49c:	|         move.l d0,38(sp)
    c4a0:	|         move.l 38(sp),d0
    c4a4:	|         move.l d0,1c762 <mouseCursorAnim>
	if (! mouseCursorAnim) {
    c4aa:	|         move.l 1c762 <mouseCursorAnim>,d0
    c4b0:	|     /-- bne.s c4c4 <loadGame+0x282>
		KPrintF("loadGame: Cannot allocate memory");
    c4b2:	|     |   pea 191f6 <PutChar+0x15ac>
    c4b8:	|     |   jsr 17176 <KPrintF>
    c4be:	|     |   addq.l #4,sp
		return FALSE;
    c4c0:	|     |   clr.w d0
    c4c2:	+-----|-- bra.s c538 <loadGame+0x2f6>
			languageNum = selectedLanguage;
			setFileIndices (NULL, gameSettings.numLanguages, languageNum);
		}
	}

	nosnapshot ();
    c4c4:	|     \-> jsr d352 <nosnapshot>
	if (FGetC (fp)) {
    c4ca:	|         move.l 112(sp),34(sp)
    c4d0:	|         move.l 1c864 <DOSBase>,d0
    c4d6:	|         movea.l d0,a6
    c4d8:	|         move.l 34(sp),d1
    c4dc:	|         jsr -306(a6)
    c4e0:	|         move.l d0,30(sp)
    c4e4:	|         move.l 30(sp),d0
    c4e8:	|     /-- beq.s c4fe <loadGame+0x2bc>
		if (! restoreSnapshot (fp)) return FALSE;
    c4ea:	|     |   move.l 112(sp),-(sp)
    c4ee:	|     |   jsr d3d2 <restoreSnapshot>
    c4f4:	|     |   addq.l #4,sp
    c4f6:	|     |   tst.w d0
    c4f8:	|     +-- bne.s c4fe <loadGame+0x2bc>
    c4fa:	|     |   clr.w d0
    c4fc:	+-----|-- bra.s c538 <loadGame+0x2f6>
	}

	Close (fp);
    c4fe:	|     \-> move.l 112(sp),26(sp)
    c504:	|         move.l 1c864 <DOSBase>,d0
    c50a:	|         movea.l d0,a6
    c50c:	|         move.l 26(sp),d1
    c510:	|         jsr -36(a6)
    c514:	|         move.l d0,22(sp)
	clearStackLib ();
    c518:	|         jsr c1f8 <clearStackLib>

	cameraX = camerX;
    c51e:	|         move.l 66(sp),1c916 <cameraX>
	cameraY = camerY;
    c526:	|         move.l 62(sp),1c91a <cameraY>
	cameraZoom = camerZ;
    c52e:	|         move.l 58(sp),1c1fa <cameraZoom>

	return TRUE;
    c536:	|         moveq #1,d0
}
    c538:	\-------> movem.l (sp)+,d2-d3/a6
    c53c:	          lea 128(sp),sp
    c540:	          rts

0000c542 <saveFunction>:

void saveFunction (struct loadedFunction * fun, BPTR fp) {
    c542:	   /-> lea -64(sp),sp
    c546:	   |   move.l a6,-(sp)
    c548:	   |   move.l d2,-(sp)
	int a;
	put2bytes (fun -> originalNumber, fp);
    c54a:	   |   movea.l 76(sp),a0
    c54e:	   |   move.l (a0),d0
    c550:	   |   move.l 80(sp),-(sp)
    c554:	   |   move.l d0,-(sp)
    c556:	   |   jsr 8d0 <put2bytes>
    c55c:	   |   addq.l #8,sp
	if (fun -> calledBy) {
    c55e:	   |   movea.l 76(sp),a0
    c562:	   |   move.l 40(a0),d0
    c566:	/--|-- beq.s c5a2 <saveFunction+0x60>
		FPutC (fp, 1);
    c568:	|  |   move.l 80(sp),52(sp)
    c56e:	|  |   moveq #1,d0
    c570:	|  |   move.l d0,48(sp)
    c574:	|  |   move.l 1c864 <DOSBase>,d0
    c57a:	|  |   movea.l d0,a6
    c57c:	|  |   move.l 52(sp),d1
    c580:	|  |   move.l 48(sp),d2
    c584:	|  |   jsr -312(a6)
    c588:	|  |   move.l d0,44(sp)
		saveFunction (fun -> calledBy, fp);
    c58c:	|  |   movea.l 76(sp),a0
    c590:	|  |   move.l 40(a0),d0
    c594:	|  |   move.l 80(sp),-(sp)
    c598:	|  |   move.l d0,-(sp)
    c59a:	|  \-- jsr c542 <saveFunction>(pc)
    c59e:	|      addq.l #8,sp
    c5a0:	|  /-- bra.s c5c4 <saveFunction+0x82>
	} else {
		FPutC (fp, 0);
    c5a2:	\--|-> move.l 80(sp),64(sp)
    c5a8:	   |   clr.l 60(sp)
    c5ac:	   |   move.l 1c864 <DOSBase>,d0
    c5b2:	   |   movea.l d0,a6
    c5b4:	   |   move.l 64(sp),d1
    c5b8:	   |   move.l 60(sp),d2
    c5bc:	   |   jsr -312(a6)
    c5c0:	   |   move.l d0,56(sp)
	}
	put4bytes (fun -> timeLeft, fp);
    c5c4:	   \-> movea.l 76(sp),a0
    c5c8:	       move.l 12(a0),d0
    c5cc:	       move.l 80(sp),-(sp)
    c5d0:	       move.l d0,-(sp)
    c5d2:	       jsr 958 <put4bytes>
    c5d8:	       addq.l #8,sp
	put2bytes (fun -> runThisLine, fp);
    c5da:	       movea.l 76(sp),a0
    c5de:	       move.l 36(a0),d0
    c5e2:	       move.l 80(sp),-(sp)
    c5e6:	       move.l d0,-(sp)
    c5e8:	       jsr 8d0 <put2bytes>
    c5ee:	       addq.l #8,sp
	FPutC (fp, fun -> cancelMe);
    c5f0:	       move.l 80(sp),40(sp)
    c5f6:	       movea.l 76(sp),a0
    c5fa:	       move.w 54(a0),d0
    c5fe:	       movea.w d0,a0
    c600:	       move.l a0,36(sp)
    c604:	       move.l 1c864 <DOSBase>,d0
    c60a:	       movea.l d0,a6
    c60c:	       move.l 40(sp),d1
    c610:	       move.l 36(sp),d2
    c614:	       jsr -312(a6)
    c618:	       move.l d0,32(sp)
	FPutC (fp, fun -> returnSomething);
    c61c:	       move.l 80(sp),28(sp)
    c622:	       movea.l 76(sp),a0
    c626:	       move.w 48(a0),d0
    c62a:	       movea.w d0,a0
    c62c:	       move.l a0,24(sp)
    c630:	       move.l 1c864 <DOSBase>,d0
    c636:	       movea.l d0,a6
    c638:	       move.l 28(sp),d1
    c63c:	       move.l 24(sp),d2
    c640:	       jsr -312(a6)
    c644:	       move.l d0,20(sp)
	FPutC (fp, fun -> isSpeech);
    c648:	       move.l 80(sp),16(sp)
    c64e:	       movea.l 76(sp),a0
    c652:	       move.w 50(a0),d0
    c656:	       movea.w d0,a0
    c658:	       move.l a0,12(sp)
    c65c:	       move.l 1c864 <DOSBase>,d0
    c662:	       movea.l d0,a6
    c664:	       move.l 16(sp),d1
    c668:	       move.l 12(sp),d2
    c66c:	       jsr -312(a6)
    c670:	       move.l d0,8(sp)
	saveVariable (&fun -> reg, fp);
    c674:	       moveq #28,d0
    c676:	       add.l 76(sp),d0
    c67a:	       move.l 80(sp),-(sp)
    c67e:	       move.l d0,-(sp)
    c680:	       jsr cd9a <saveVariable>
    c686:	       addq.l #8,sp

	if (fun -> freezerLevel) {
    c688:	       movea.l 76(sp),a0
    c68c:	       move.b 56(a0),d0
    c690:	   /-- beq.s c6a0 <saveFunction+0x15e>
		KPrintF(ERROR_GAME_SAVE_FROZEN);		
    c692:	   |   pea 19217 <PutChar+0x15cd>
    c698:	   |   jsr 17176 <KPrintF>
    c69e:	   |   addq.l #4,sp
	}
	saveStack (fun -> stack, fp);
    c6a0:	   \-> movea.l 76(sp),a0
    c6a4:	       move.l 24(a0),d0
    c6a8:	       move.l 80(sp),-(sp)
    c6ac:	       move.l d0,-(sp)
    c6ae:	       jsr cc0e <saveStack>
    c6b4:	       addq.l #8,sp
	for (a = 0; a < fun -> numLocals; a ++) {
    c6b6:	       clr.l 68(sp)
    c6ba:	   /-- bra.s c6de <saveFunction+0x19c>
		saveVariable (& (fun -> localVars[a]), fp);
    c6bc:	/--|-> movea.l 76(sp),a0
    c6c0:	|  |   move.l 20(a0),d1
    c6c4:	|  |   move.l 68(sp),d0
    c6c8:	|  |   lsl.l #3,d0
    c6ca:	|  |   add.l d1,d0
    c6cc:	|  |   move.l 80(sp),-(sp)
    c6d0:	|  |   move.l d0,-(sp)
    c6d2:	|  |   jsr cd9a <saveVariable>
    c6d8:	|  |   addq.l #8,sp
	for (a = 0; a < fun -> numLocals; a ++) {
    c6da:	|  |   addq.l #1,68(sp)
    c6de:	|  \-> movea.l 76(sp),a0
    c6e2:	|      move.l 8(a0),d0
    c6e6:	|      cmp.l 68(sp),d0
    c6ea:	\----- bgt.s c6bc <saveFunction+0x17a>
	}
}
    c6ec:	       nop
    c6ee:	       nop
    c6f0:	       move.l (sp)+,d2
    c6f2:	       movea.l (sp)+,a6
    c6f4:	       lea 64(sp),sp
    c6f8:	       rts

0000c6fa <saveGame>:

BOOL saveGame (char * fname) {
    c6fa:	          lea -248(sp),sp
    c6fe:	          movem.l d2-d3/a6,-(sp)
	int a;

	BPTR fp = Open( fname, MODE_NEWFILE);
    c702:	          move.l 264(sp),244(sp)
    c708:	          move.l #1006,240(sp)
    c710:	          move.l 1c864 <DOSBase>,d0
    c716:	          movea.l d0,a6
    c718:	          move.l 244(sp),d1
    c71c:	          move.l 240(sp),d2
    c720:	          jsr -30(a6)
    c724:	          move.l d0,236(sp)
    c728:	          move.l 236(sp),d0
    c72c:	          move.l d0,232(sp)
	if (fp == NULL) {
    c730:	      /-- bne.s c746 <saveGame+0x4c>
		KPrintF("saveGame: Cannot create file");
    c732:	      |   pea 19239 <PutChar+0x15ef>
    c738:	      |   jsr 17176 <KPrintF>
    c73e:	      |   addq.l #4,sp
		return FALSE;
    c740:	      |   clr.w d0
    c742:	/-----|-- bra.w cc04 <saveGame+0x50a>
	}

	Write( fp, &"SLUDSA", 6);
    c746:	|     \-> move.l 232(sp),228(sp)
    c74c:	|         move.l #102998,224(sp)
    c754:	|         moveq #6,d0
    c756:	|         move.l d0,220(sp)
    c75a:	|         move.l 1c864 <DOSBase>,d0
    c760:	|         movea.l d0,a6
    c762:	|         move.l 228(sp),d1
    c766:	|         move.l 224(sp),d2
    c76a:	|         move.l 220(sp),d3
    c76e:	|         jsr -48(a6)
    c772:	|         move.l d0,216(sp)
	FPutC (fp, 0);
    c776:	|         move.l 232(sp),212(sp)
    c77c:	|         clr.l 208(sp)
    c780:	|         move.l 1c864 <DOSBase>,d0
    c786:	|         movea.l d0,a6
    c788:	|         move.l 212(sp),d1
    c78c:	|         move.l 208(sp),d2
    c790:	|         jsr -312(a6)
    c794:	|         move.l d0,204(sp)
	FPutC (fp, 0);
    c798:	|         move.l 232(sp),200(sp)
    c79e:	|         clr.l 196(sp)
    c7a2:	|         move.l 1c864 <DOSBase>,d0
    c7a8:	|         movea.l d0,a6
    c7aa:	|         move.l 200(sp),d1
    c7ae:	|         move.l 196(sp),d2
    c7b2:	|         jsr -312(a6)
    c7b6:	|         move.l d0,192(sp)
	FPutC (fp, MAJOR_VERSION);
    c7ba:	|         move.l 232(sp),188(sp)
    c7c0:	|         moveq #2,d0
    c7c2:	|         move.l d0,184(sp)
    c7c6:	|         move.l 1c864 <DOSBase>,d0
    c7cc:	|         movea.l d0,a6
    c7ce:	|         move.l 188(sp),d1
    c7d2:	|         move.l 184(sp),d2
    c7d6:	|         jsr -312(a6)
    c7da:	|         move.l d0,180(sp)
	FPutC (fp, MINOR_VERSION);
    c7de:	|         move.l 232(sp),176(sp)
    c7e4:	|         moveq #2,d0
    c7e6:	|         move.l d0,172(sp)
    c7ea:	|         move.l 1c864 <DOSBase>,d0
    c7f0:	|         movea.l d0,a6
    c7f2:	|         move.l 176(sp),d1
    c7f6:	|         move.l 172(sp),d2
    c7fa:	|         jsr -312(a6)
    c7fe:	|         move.l d0,168(sp)

	Write ( fp, &fileTime, sizeof(FILETIME));
    c802:	|         move.l 232(sp),164(sp)
    c808:	|         move.l #116734,160(sp)
    c810:	|         moveq #8,d0
    c812:	|         move.l d0,156(sp)
    c816:	|         move.l 1c864 <DOSBase>,d0
    c81c:	|         movea.l d0,a6
    c81e:	|         move.l 164(sp),d1
    c822:	|         move.l 160(sp),d2
    c826:	|         move.l 156(sp),d3
    c82a:	|         jsr -48(a6)
    c82e:	|         move.l d0,152(sp)

	// DON'T ADD ANYTHING NEW BEFORE THIS POINT!

	FPutC (fp, allowAnyFilename);
    c832:	|         move.l 232(sp),148(sp)
    c838:	|         move.w 1c0b8 <allowAnyFilename>,d0
    c83e:	|         movea.w d0,a0
    c840:	|         move.l a0,144(sp)
    c844:	|         move.l 1c864 <DOSBase>,d0
    c84a:	|         movea.l d0,a6
    c84c:	|         move.l 148(sp),d1
    c850:	|         move.l 144(sp),d2
    c854:	|         jsr -312(a6)
    c858:	|         move.l d0,140(sp)
	FPutC (fp, captureAllKeys);
    c85c:	|         move.l 232(sp),136(sp)
    c862:	|         move.w 1c7fc <captureAllKeys>,d0
    c868:	|         movea.w d0,a0
    c86a:	|         move.l a0,132(sp)
    c86e:	|         move.l 1c864 <DOSBase>,d0
    c874:	|         movea.l d0,a6
    c876:	|         move.l 136(sp),d1
    c87a:	|         move.l 132(sp),d2
    c87e:	|         jsr -312(a6)
    c882:	|         move.l d0,128(sp)
	FPutC (fp, TRUE); // updateDisplay
    c886:	|         move.l 232(sp),124(sp)
    c88c:	|         moveq #1,d0
    c88e:	|         move.l d0,120(sp)
    c892:	|         move.l 1c864 <DOSBase>,d0
    c898:	|         movea.l d0,a6
    c89a:	|         move.l 124(sp),d1
    c89e:	|         move.l 120(sp),d2
    c8a2:	|         jsr -312(a6)
    c8a6:	|         move.l d0,116(sp)
	FPutC (fp, fontTableSize>0);
    c8aa:	|         move.l 232(sp),112(sp)
    c8b0:	|         move.l 1c964 <fontTableSize>,d0
    c8b6:	|         sgt d0
    c8b8:	|         neg.b d0
    c8ba:	|         move.b d0,d0
    c8bc:	|         andi.l #255,d0
    c8c2:	|         move.l d0,108(sp)
    c8c6:	|         move.l 1c864 <DOSBase>,d0
    c8cc:	|         movea.l d0,a6
    c8ce:	|         move.l 112(sp),d1
    c8d2:	|         move.l 108(sp),d2
    c8d6:	|         jsr -312(a6)
    c8da:	|         move.l d0,104(sp)

	if (fontTableSize>0) {
    c8de:	|         move.l 1c964 <fontTableSize>,d0
    c8e4:	|     /-- ble.s c922 <saveGame+0x228>
		put2bytes (loadedFontNum, fp);
    c8e6:	|     |   move.l 1c958 <loadedFontNum>,d0
    c8ec:	|     |   move.l 232(sp),-(sp)
    c8f0:	|     |   move.l d0,-(sp)
    c8f2:	|     |   jsr 8d0 <put2bytes>
    c8f8:	|     |   addq.l #8,sp
		put2bytes (fontHeight, fp);
    c8fa:	|     |   move.l 1c954 <fontHeight>,d0
    c900:	|     |   move.l 232(sp),-(sp)
    c904:	|     |   move.l d0,-(sp)
    c906:	|     |   jsr 8d0 <put2bytes>
    c90c:	|     |   addq.l #8,sp
		writeString(fontOrderString, fp);
    c90e:	|     |   move.l 1c95c <fontOrderString>,d0
    c914:	|     |   move.l 232(sp),-(sp)
    c918:	|     |   move.l d0,-(sp)
    c91a:	|     |   jsr bd8 <writeString>
    c920:	|     |   addq.l #8,sp
	}
	putSigned (fontSpace, fp);
    c922:	|     \-> move.w 1c760 <fontSpace>,d0
    c928:	|         movea.w d0,a0
    c92a:	|         move.l 232(sp),-(sp)
    c92e:	|         move.l a0,-(sp)
    c930:	|         jsr a9c <putSigned>
    c936:	|         addq.l #8,sp

	// Save backdrop
	put2bytes (cameraX, fp);
    c938:	|         move.l 1c916 <cameraX>,d0
    c93e:	|         move.l 232(sp),-(sp)
    c942:	|         move.l d0,-(sp)
    c944:	|         jsr 8d0 <put2bytes>
    c94a:	|         addq.l #8,sp
	put2bytes (cameraY, fp);
    c94c:	|         move.l 1c91a <cameraY>,d0
    c952:	|         move.l 232(sp),-(sp)
    c956:	|         move.l d0,-(sp)
    c958:	|         jsr 8d0 <put2bytes>
    c95e:	|         addq.l #8,sp
	putFloat(cameraZoom, fp);
    c960:	|         move.l 1c1fa <cameraZoom>,d0
    c966:	|         move.l 232(sp),-(sp)
    c96a:	|         move.l d0,-(sp)
    c96c:	|         jsr a46 <putFloat>
    c972:	|         addq.l #8,sp

	FPutC (fp, brightnessLevel);
    c974:	|         move.l 232(sp),100(sp)
    c97a:	|         move.b 1c1d2 <brightnessLevel>,d0
    c980:	|         move.b d0,d0
    c982:	|         andi.l #255,d0
    c988:	|         move.l d0,96(sp)
    c98c:	|         move.l 1c864 <DOSBase>,d0
    c992:	|         movea.l d0,a6
    c994:	|         move.l 100(sp),d1
    c998:	|         move.l 96(sp),d2
    c99c:	|         jsr -312(a6)
    c9a0:	|         move.l d0,92(sp)

	// Save event handlers
	saveHandlers (fp);
    c9a4:	|         move.l 232(sp),-(sp)
    c9a8:	|         jsr 6a2e <saveHandlers>
    c9ae:	|         addq.l #4,sp

	// Save regions
	saveRegions (fp);
    c9b0:	|         move.l 232(sp),-(sp)
    c9b4:	|         jsr 15bdc <saveRegions>
    c9ba:	|         addq.l #4,sp

	saveAnim (mouseCursorAnim, fp);
    c9bc:	|         move.l 1c762 <mouseCursorAnim>,d0
    c9c2:	|         move.l 232(sp),-(sp)
    c9c6:	|         move.l d0,-(sp)
    c9c8:	|         jsr afa2 <saveAnim>
    c9ce:	|         addq.l #8,sp
	put2bytes (mouseCursorFrameNum, fp);
    c9d0:	|         move.l 1c766 <mouseCursorFrameNum>,d0
    c9d6:	|         move.l 232(sp),-(sp)
    c9da:	|         move.l d0,-(sp)
    c9dc:	|         jsr 8d0 <put2bytes>
    c9e2:	|         addq.l #8,sp

	// Save functions
	struct loadedFunction * thisFunction = allRunningFunctions;
    c9e4:	|         move.l 1c7f4 <allRunningFunctions>,252(sp)
	int countFunctions = 0;
    c9ec:	|         clr.l 248(sp)
	while (thisFunction) {
    c9f0:	|     /-- bra.s ca00 <saveGame+0x306>
		countFunctions ++;
    c9f2:	|  /--|-> addq.l #1,248(sp)
		thisFunction = thisFunction -> next;
    c9f6:	|  |  |   movea.l 252(sp),a0
    c9fa:	|  |  |   move.l 44(a0),252(sp)
	while (thisFunction) {
    ca00:	|  |  \-> tst.l 252(sp)
    ca04:	|  \----- bne.s c9f2 <saveGame+0x2f8>
	}
	put2bytes (countFunctions, fp);
    ca06:	|         move.l 232(sp),-(sp)
    ca0a:	|         move.l 252(sp),-(sp)
    ca0e:	|         jsr 8d0 <put2bytes>
    ca14:	|         addq.l #8,sp

	thisFunction = allRunningFunctions;
    ca16:	|         move.l 1c7f4 <allRunningFunctions>,252(sp)
	while (thisFunction) {
    ca1e:	|     /-- bra.s ca3a <saveGame+0x340>
		saveFunction (thisFunction, fp);
    ca20:	|  /--|-> move.l 232(sp),-(sp)
    ca24:	|  |  |   move.l 256(sp),-(sp)
    ca28:	|  |  |   jsr c542 <saveFunction>
    ca2e:	|  |  |   addq.l #8,sp
		thisFunction = thisFunction -> next;
    ca30:	|  |  |   movea.l 252(sp),a0
    ca34:	|  |  |   move.l 44(a0),252(sp)
	while (thisFunction) {
    ca3a:	|  |  \-> tst.l 252(sp)
    ca3e:	|  \----- bne.s ca20 <saveGame+0x326>
	}

	for (a = 0; a < numGlobals; a ++) {
    ca40:	|         clr.l 256(sp)
    ca44:	|     /-- bra.s ca66 <saveGame+0x36c>
		saveVariable (& globalVars[a], fp);
    ca46:	|  /--|-> move.l 1c80a <globalVars>,d1
    ca4c:	|  |  |   move.l 256(sp),d0
    ca50:	|  |  |   lsl.l #3,d0
    ca52:	|  |  |   add.l d1,d0
    ca54:	|  |  |   move.l 232(sp),-(sp)
    ca58:	|  |  |   move.l d0,-(sp)
    ca5a:	|  |  |   jsr cd9a <saveVariable>
    ca60:	|  |  |   addq.l #8,sp
	for (a = 0; a < numGlobals; a ++) {
    ca62:	|  |  |   addq.l #1,256(sp)
    ca66:	|  |  \-> move.l 1c834 <numGlobals>,d0
    ca6c:	|  |      cmp.l 256(sp),d0
    ca70:	|  \----- bgt.s ca46 <saveGame+0x34c>
	}

	savePeople (fp);
    ca72:	|         move.l 232(sp),-(sp)
    ca76:	|         jsr b0ca <savePeople>
    ca7c:	|         addq.l #4,sp

	if (currentFloor -> numPolygons) {
    ca7e:	|         movea.l 1c978 <currentFloor>,a0
    ca84:	|         move.l 8(a0),d0
    ca88:	|  /----- beq.s cac6 <saveGame+0x3cc>
		FPutC (fp, 1);
    ca8a:	|  |      move.l 232(sp),76(sp)
    ca90:	|  |      moveq #1,d0
    ca92:	|  |      move.l d0,72(sp)
    ca96:	|  |      move.l 1c864 <DOSBase>,d0
    ca9c:	|  |      movea.l d0,a6
    ca9e:	|  |      move.l 76(sp),d1
    caa2:	|  |      move.l 72(sp),d2
    caa6:	|  |      jsr -312(a6)
    caaa:	|  |      move.l d0,68(sp)
		put2bytes (currentFloor -> originalNum, fp);
    caae:	|  |      movea.l 1c978 <currentFloor>,a0
    cab4:	|  |      move.l (a0),d0
    cab6:	|  |      move.l 232(sp),-(sp)
    caba:	|  |      move.l d0,-(sp)
    cabc:	|  |      jsr 8d0 <put2bytes>
    cac2:	|  |      addq.l #8,sp
    cac4:	|  |  /-- bra.s cae8 <saveGame+0x3ee>
	} else FPutC (fp, 0);
    cac6:	|  \--|-> move.l 232(sp),88(sp)
    cacc:	|     |   clr.l 84(sp)
    cad0:	|     |   move.l 1c864 <DOSBase>,d0
    cad6:	|     |   movea.l d0,a6
    cad8:	|     |   move.l 88(sp),d1
    cadc:	|     |   move.l 84(sp),d2
    cae0:	|     |   jsr -312(a6)
    cae4:	|     |   move.l d0,80(sp)
	/*if (zBuffer.tex) {
		FPutC (fp, 1);
		put2bytes (zBuffer.originalNum, fp);
	} else FPutC (fp,0);*/ 

	FPutC (fp, speechMode);
    cae8:	|     \-> move.l 232(sp),64(sp)
    caee:	|         move.l 1c92a <speechMode>,60(sp)
    caf6:	|         move.l 1c864 <DOSBase>,d0
    cafc:	|         movea.l d0,a6
    cafe:	|         move.l 64(sp),d1
    cb02:	|         move.l 60(sp),d2
    cb06:	|         jsr -312(a6)
    cb0a:	|         move.l d0,56(sp)
	FPutC (fadeMode, fp);
    cb0e:	|         move.b 1c736 <fadeMode>,d0
    cb14:	|         move.b d0,d0
    cb16:	|         andi.l #255,d0
    cb1c:	|         move.l d0,52(sp)
    cb20:	|         move.l 232(sp),48(sp)
    cb26:	|         move.l 1c864 <DOSBase>,d0
    cb2c:	|         movea.l d0,a6
    cb2e:	|         move.l 52(sp),d1
    cb32:	|         move.l 48(sp),d2
    cb36:	|         jsr -312(a6)
    cb3a:	|         move.l d0,44(sp)
	saveSpeech (speech, fp);
    cb3e:	|         move.l 1c8b8 <speech>,d0
    cb44:	|         move.l 232(sp),-(sp)
    cb48:	|         move.l d0,-(sp)
    cb4a:	|         jsr 8098 <saveSpeech>
    cb50:	|         addq.l #8,sp
	saveStatusBars (fp);
    cb52:	|         move.l 232(sp),-(sp)
    cb56:	|         jsr 7a94 <saveStatusBars>
    cb5c:	|         addq.l #4,sp
	saveSounds (fp);
    cb5e:	|         move.l 232(sp),-(sp)
    cb62:	|         jsr d100 <saveSounds>
    cb68:	|         addq.l #4,sp

	put2bytes (saveEncoding, fp);
    cb6a:	|         move.w 1c914 <saveEncoding>,d0
    cb70:	|         move.w d0,d0
    cb72:	|         andi.l #65535,d0
    cb78:	|         move.l 232(sp),-(sp)
    cb7c:	|         move.l d0,-(sp)
    cb7e:	|         jsr 8d0 <put2bytes>
    cb84:	|         addq.l #8,sp

	saveParallaxRecursive (parallaxStuff, fp);
    cb86:	|         move.l 1c906 <parallaxStuff>,d0
    cb8c:	|         move.l 232(sp),-(sp)
    cb90:	|         move.l d0,-(sp)
    cb92:	|         jsr d3f8 <saveParallaxRecursive>
    cb98:	|         addq.l #8,sp
	FPutC (fp, 0);
    cb9a:	|         move.l 232(sp),40(sp)
    cba0:	|         clr.l 36(sp)
    cba4:	|         move.l 1c864 <DOSBase>,d0
    cbaa:	|         movea.l d0,a6
    cbac:	|         move.l 40(sp),d1
    cbb0:	|         move.l 36(sp),d2
    cbb4:	|         jsr -312(a6)
    cbb8:	|         move.l d0,32(sp)

	FPutC(fp, languageNum);	// Selected language
    cbbc:	|         move.l 232(sp),28(sp)
    cbc2:	|         move.l 1c1d8 <languageNum>,24(sp)
    cbca:	|         move.l 1c864 <DOSBase>,d0
    cbd0:	|         movea.l d0,a6
    cbd2:	|         move.l 28(sp),d1
    cbd6:	|         move.l 24(sp),d2
    cbda:	|         jsr -312(a6)
    cbde:	|         move.l d0,20(sp)

	Close(fp);
    cbe2:	|         move.l 232(sp),16(sp)
    cbe8:	|         move.l 1c864 <DOSBase>,d0
    cbee:	|         movea.l d0,a6
    cbf0:	|         move.l 16(sp),d1
    cbf4:	|         jsr -36(a6)
    cbf8:	|         move.l d0,12(sp)
	clearStackLib ();
    cbfc:	|         jsr c1f8 <clearStackLib>
	return TRUE;
    cc02:	|         moveq #1,d0
}
    cc04:	\-------> movem.l (sp)+,d2-d3/a6
    cc08:	          lea 248(sp),sp
    cc0c:	          rts

0000cc0e <saveStack>:

//----------------------------------------------------------------------
// For saving and loading stacks...
//----------------------------------------------------------------------

void saveStack (struct variableStack * vs, BPTR fp) {
    cc0e:	       lea -12(sp),sp
	int elements = 0;
    cc12:	       clr.l 8(sp)
	int a;

	struct variableStack * search = vs;
    cc16:	       move.l 16(sp),(sp)
	while (search) {
    cc1a:	   /-- bra.s cc26 <saveStack+0x18>
		elements ++;
    cc1c:	/--|-> addq.l #1,8(sp)
		search = search -> next;
    cc20:	|  |   movea.l (sp),a0
    cc22:	|  |   move.l 8(a0),(sp)
	while (search) {
    cc26:	|  \-> tst.l (sp)
    cc28:	\----- bne.s cc1c <saveStack+0xe>
	}

	put2bytes (elements, fp);
    cc2a:	       move.l 20(sp),-(sp)
    cc2e:	       move.l 12(sp),-(sp)
    cc32:	       jsr 8d0 <put2bytes>
    cc38:	       addq.l #8,sp
	search = vs;
    cc3a:	       move.l 16(sp),(sp)
	for (a = 0; a < elements; a ++) {
    cc3e:	       clr.l 4(sp)
    cc42:	   /-- bra.s cc5e <saveStack+0x50>
		saveVariable (& search -> thisVar, fp);
    cc44:	/--|-> move.l (sp),d0
    cc46:	|  |   move.l 20(sp),-(sp)
    cc4a:	|  |   move.l d0,-(sp)
    cc4c:	|  |   jsr cd9a <saveVariable>
    cc52:	|  |   addq.l #8,sp
		search = search -> next;
    cc54:	|  |   movea.l (sp),a0
    cc56:	|  |   move.l 8(a0),(sp)
	for (a = 0; a < elements; a ++) {
    cc5a:	|  |   addq.l #1,4(sp)
    cc5e:	|  \-> move.l 4(sp),d0
    cc62:	|      cmp.l 8(sp),d0
    cc66:	\----- blt.s cc44 <saveStack+0x36>
	}
}
    cc68:	       nop
    cc6a:	       nop
    cc6c:	       lea 12(sp),sp
    cc70:	       rts

0000cc72 <saveStackRef>:


BOOL saveStackRef (struct stackHandler * vs, BPTR fp) {
    cc72:	             lea -44(sp),sp
    cc76:	             move.l a6,-(sp)
    cc78:	             move.l d2,-(sp)
	struct stackLibrary * s = stackLib;
    cc7a:	             move.l 1c8ec <stackLib>,48(sp)
	int a = 0;
    cc82:	             clr.l 44(sp)
	while (s) {
    cc86:	      /----- bra.s cce4 <saveStackRef+0x72>
		if (s -> stack == vs) {
    cc88:	   /--|----> movea.l 48(sp),a0
    cc8c:	   |  |      move.l (a0),d0
    cc8e:	   |  |      cmp.l 56(sp),d0
    cc92:	   |  |  /-- bne.s ccd6 <saveStackRef+0x64>
			FPutC (fp, 1);
    cc94:	   |  |  |   move.l 60(sp),16(sp)
    cc9a:	   |  |  |   moveq #1,d0
    cc9c:	   |  |  |   move.l d0,12(sp)
    cca0:	   |  |  |   move.l 1c864 <DOSBase>,d0
    cca6:	   |  |  |   movea.l d0,a6
    cca8:	   |  |  |   move.l 16(sp),d1
    ccac:	   |  |  |   move.l 12(sp),d2
    ccb0:	   |  |  |   jsr -312(a6)
    ccb4:	   |  |  |   move.l d0,8(sp)
			put2bytes (stackLibTotal - a, fp);
    ccb8:	   |  |  |   move.l 1c8e8 <stackLibTotal>,d0
    ccbe:	   |  |  |   sub.l 44(sp),d0
    ccc2:	   |  |  |   move.l 60(sp),-(sp)
    ccc6:	   |  |  |   move.l d0,-(sp)
    ccc8:	   |  |  |   jsr 8d0 <put2bytes>
    ccce:	   |  |  |   addq.l #8,sp
			return TRUE;
    ccd0:	   |  |  |   moveq #1,d0
    ccd2:	/--|--|--|-- bra.w cd90 <saveStackRef+0x11e>
		}
		s = s -> next;
    ccd6:	|  |  |  \-> movea.l 48(sp),a0
    ccda:	|  |  |      move.l 4(a0),48(sp)
		a ++;
    cce0:	|  |  |      addq.l #1,44(sp)
	while (s) {
    cce4:	|  |  \----> tst.l 48(sp)
    cce8:	|  \-------- bne.s cc88 <saveStackRef+0x16>
	}
	FPutC (fp, 0);
    ccea:	|            move.l 60(sp),40(sp)
    ccf0:	|            clr.l 36(sp)
    ccf4:	|            move.l 1c864 <DOSBase>,d0
    ccfa:	|            movea.l d0,a6
    ccfc:	|            move.l 40(sp),d1
    cd00:	|            move.l 36(sp),d2
    cd04:	|            jsr -312(a6)
    cd08:	|            move.l d0,32(sp)
	saveStack (vs -> first, fp);
    cd0c:	|            movea.l 56(sp),a0
    cd10:	|            move.l (a0),d0
    cd12:	|            move.l 60(sp),-(sp)
    cd16:	|            move.l d0,-(sp)
    cd18:	|            jsr cc0e <saveStack>
    cd1e:	|            addq.l #8,sp
	s = AllocVec( sizeof(struct stackLibrary), MEMF_ANY);
    cd20:	|            moveq #8,d0
    cd22:	|            move.l d0,28(sp)
    cd26:	|            clr.l 24(sp)
    cd2a:	|            move.l 1c85c <SysBase>,d0
    cd30:	|            movea.l d0,a6
    cd32:	|            move.l 28(sp),d0
    cd36:	|            move.l 24(sp),d1
    cd3a:	|            jsr -684(a6)
    cd3e:	|            move.l d0,20(sp)
    cd42:	|            move.l 20(sp),d0
    cd46:	|            move.l d0,48(sp)
	stackLibTotal ++;
    cd4a:	|            move.l 1c8e8 <stackLibTotal>,d0
    cd50:	|            addq.l #1,d0
    cd52:	|            move.l d0,1c8e8 <stackLibTotal>
	if (! s) {
    cd58:	|            tst.l 48(sp)
    cd5c:	|        /-- bne.s cd70 <saveStackRef+0xfe>
		KPrintF("saveStackRef: Cannot allocate memory");
    cd5e:	|        |   pea 19285 <PutChar+0x163b>
    cd64:	|        |   jsr 17176 <KPrintF>
    cd6a:	|        |   addq.l #4,sp
		return FALSE;
    cd6c:	|        |   clr.w d0
    cd6e:	+--------|-- bra.s cd90 <saveStackRef+0x11e>
	}
	s -> next = stackLib;
    cd70:	|        \-> move.l 1c8ec <stackLib>,d0
    cd76:	|            movea.l 48(sp),a0
    cd7a:	|            move.l d0,4(a0)
	s -> stack = vs;
    cd7e:	|            movea.l 48(sp),a0
    cd82:	|            move.l 56(sp),(a0)
	stackLib = s;
    cd86:	|            move.l 48(sp),1c8ec <stackLib>
	return TRUE;
    cd8e:	|            moveq #1,d0
}
    cd90:	\----------> move.l (sp)+,d2
    cd92:	             movea.l (sp)+,a6
    cd94:	             lea 44(sp),sp
    cd98:	             rts

0000cd9a <saveVariable>:

BOOL saveVariable (struct variable * from, BPTR fp)
{
    cd9a:	          lea -12(sp),sp
    cd9e:	          move.l a6,-(sp)
    cda0:	          move.l d2,-(sp)
	FPutC (fp,from -> varType);
    cda2:	          move.l 28(sp),16(sp)
    cda8:	          movea.l 24(sp),a0
    cdac:	          move.l (a0),d0
    cdae:	          move.l d0,12(sp)
    cdb2:	          move.l 1c864 <DOSBase>,d0
    cdb8:	          movea.l d0,a6
    cdba:	          move.l 16(sp),d1
    cdbe:	          move.l 12(sp),d2
    cdc2:	          jsr -312(a6)
    cdc6:	          move.l d0,8(sp)
	switch (from -> varType) {
    cdca:	          movea.l 24(sp),a0
    cdce:	          move.l (a0),d0
    cdd0:	          moveq #9,d1
    cdd2:	          cmp.l d0,d1
    cdd4:	      /-- bcs.w ce84 <saveVariable+0xea>
    cdd8:	      |   add.l d0,d0
    cdda:	      |   movea.l d0,a0
    cddc:	      |   adda.l #52712,a0
    cde2:	      |   move.w (a0),d0
    cde4:	      |   jmp (cde8 <saveVariable+0x4e>,pc,d0.w)
    cde8:	      |   ori.l #1310740,(a0)+
    cdee:	      |   ori.b #20,(20,a0,d0.w)
    cdf4:	      |   .short 0x004c
    cdf6:	      |   ori.b #126,(a4)
    cdfa:	      |   ori.w #8303,-(a4)
		case SVT_INT:
		case SVT_FUNC:
		case SVT_BUILT:
		case SVT_FILE:
		case SVT_OBJTYPE:
		put4bytes (from -> varData.intValue, fp);
    cdfe:	      |   ori.b #40,(a0)+
    ce02:	      |   ori.b #47,d4
    ce06:	      |   ori.b #0,(a4)+
    ce0a:	      |   jsr 958 <put4bytes>
    ce10:	      |   addq.l #8,sp
		return TRUE;
    ce12:	      |   moveq #1,d0
    ce14:	/-----|-- bra.w cec0 <saveVariable+0x126>

		case SVT_STRING:
		writeString (from -> varData.theString, fp);
    ce18:	|     |   movea.l 24(sp),a0
    ce1c:	|     |   move.l 4(a0),d0
    ce20:	|     |   move.l 28(sp),-(sp)
    ce24:	|     |   move.l d0,-(sp)
    ce26:	|     |   jsr bd8 <writeString>
    ce2c:	|     |   addq.l #8,sp
		return TRUE;
    ce2e:	|     |   moveq #1,d0
    ce30:	+-----|-- bra.w cec0 <saveVariable+0x126>

		case SVT_STACK:
		return saveStackRef (from -> varData.theStack, fp);
    ce34:	|     |   movea.l 24(sp),a0
    ce38:	|     |   move.l 4(a0),d0
    ce3c:	|     |   move.l 28(sp),-(sp)
    ce40:	|     |   move.l d0,-(sp)
    ce42:	|     |   jsr cc72 <saveStackRef>
    ce48:	|     |   addq.l #8,sp
    ce4a:	+-----|-- bra.s cec0 <saveVariable+0x126>

		case SVT_COSTUME:
		saveCostume (from -> varData.costumeHandler, fp);
    ce4c:	|     |   movea.l 24(sp),a0
    ce50:	|     |   move.l 4(a0),d0
    ce54:	|     |   move.l 28(sp),-(sp)
    ce58:	|     |   move.l d0,-(sp)
    ce5a:	|     |   jsr b06c <saveCostume>
    ce60:	|     |   addq.l #8,sp
		return FALSE;
    ce62:	|     |   clr.w d0
    ce64:	+-----|-- bra.s cec0 <saveVariable+0x126>

		case SVT_ANIM:
		saveAnim (from -> varData.animHandler, fp);
    ce66:	|     |   movea.l 24(sp),a0
    ce6a:	|     |   move.l 4(a0),d0
    ce6e:	|     |   move.l 28(sp),-(sp)
    ce72:	|     |   move.l d0,-(sp)
    ce74:	|     |   jsr afa2 <saveAnim>
    ce7a:	|     |   addq.l #8,sp
		return FALSE;
    ce7c:	|     |   clr.w d0
    ce7e:	+-----|-- bra.s cec0 <saveVariable+0x126>

		case SVT_NULL:
		return FALSE;
    ce80:	|     |   clr.w d0
    ce82:	+-----|-- bra.s cec0 <saveVariable+0x126>

		default:
		KPrintF("Can't save variables of this type:",
					(from->varType < SVT_NUM_TYPES) ?
    ce84:	|     \-> movea.l 24(sp),a0
    ce88:	|         move.l (a0),d0
		KPrintF("Can't save variables of this type:",
    ce8a:	|         moveq #10,d1
    ce8c:	|         cmp.l d0,d1
    ce8e:	|  /----- bcs.s cea8 <saveVariable+0x10e>
						typeName[from->varType] :
    ce90:	|  |      movea.l 24(sp),a0
    ce94:	|  |      move.l (a0),d0
		KPrintF("Can't save variables of this type:",
    ce96:	|  |      add.l d0,d0
    ce98:	|  |      movea.l d0,a1
    ce9a:	|  |      adda.l d0,a1
    ce9c:	|  |      lea 1c738 <typeName>,a0
    cea2:	|  |      move.l (0,a1,a0.l),d0
    cea6:	|  |  /-- bra.s ceae <saveVariable+0x114>
    cea8:	|  \--|-> move.l #103082,d0
    ceae:	|     \-> move.l d0,-(sp)
    ceb0:	|         pea 192b1 <PutChar+0x1667>
    ceb6:	|         jsr 17176 <KPrintF>
    cebc:	|         addq.l #8,sp
						"bad ID");						
	}
	return TRUE;
    cebe:	|         moveq #1,d0
    cec0:	\-------> move.l (sp)+,d2
    cec2:	          movea.l (sp)+,a6
    cec4:	          lea 12(sp),sp
    cec8:	          rts

0000ceca <CsiCheckInput>:
extern struct inputType input;

UWORD counterx_old = 0;
UWORD countery_old = 0;

void CsiCheckInput() {
    ceca:	          lea -12(sp),sp
    volatile struct Custom *custom = (struct Custom*)0xdff000;
    cece:	          move.l #14675968,4(sp)
    UWORD value = custom->joy0dat;
    ced6:	          movea.l 4(sp),a0
    ceda:	          move.w 10(a0),2(sp)
    UBYTE countery_new = (UBYTE) (custom->joy0dat >> 8);
    cee0:	          movea.l 4(sp),a0
    cee4:	          move.w 10(a0),d0
    cee8:	          lsr.w #8,d0
    ceea:	          move.b d0,1(sp)
    UBYTE counterx_new = (UBYTE) (custom->joy0dat & 0xffff);
    ceee:	          movea.l 4(sp),a0
    cef2:	          move.w 10(a0),d0
    cef6:	          move.b d0,(sp)

    if(counterx_new)
    cef8:	/-------- beq.w cf9e <CsiCheckInput+0xd4>
    {
        WORD counterx_diff = counterx_new - counterx_old;
    cefc:	|         clr.w d1
    cefe:	|         move.b (sp),d1
    cf00:	|         move.w 1c8f4 <counterx_old>,d0
    cf06:	|         sub.w d0,d1
    cf08:	|         move.w d1,10(sp)

        if(counterx_diff > 127) {
    cf0c:	|         cmpi.w #128,10(sp)
    cf12:	|     /-- blt.s cf2a <CsiCheckInput+0x60>
            input.justMoved = TRUE;                
    cf14:	|     |   move.w #1,1c812 <input+0x4>
            counterx_diff -= 256;    
    cf1c:	|     |   move.w 10(sp),d0
    cf20:	|     |   addi.w #-256,d0
    cf24:	|     |   move.w d0,10(sp)
    cf28:	|  /--|-- bra.s cf56 <CsiCheckInput+0x8c>
        } else if (counterx_diff < -128) {
    cf2a:	|  |  \-> cmpi.w #-129,10(sp)
    cf30:	|  |  /-- bgt.s cf48 <CsiCheckInput+0x7e>
            counterx_diff += 256;
    cf32:	|  |  |   move.w 10(sp),d0
    cf36:	|  |  |   addi.w #256,d0
    cf3a:	|  |  |   move.w d0,10(sp)
            input.justMoved = TRUE;
    cf3e:	|  |  |   move.w #1,1c812 <input+0x4>
    cf46:	|  +--|-- bra.s cf56 <CsiCheckInput+0x8c>
        } else if (counterx_diff) {
    cf48:	|  |  \-> tst.w 10(sp)
    cf4c:	|  +----- beq.s cf56 <CsiCheckInput+0x8c>
            input.justMoved = TRUE;
    cf4e:	|  |      move.w #1,1c812 <input+0x4>
        }

        input.mouseX += counterx_diff;
    cf56:	|  \----> move.l 1c818 <input+0xa>,d0
    cf5c:	|         movea.w 10(sp),a0
    cf60:	|         add.l a0,d0
    cf62:	|         move.l d0,1c818 <input+0xa>

        if( input.mouseX > (int) winWidth) {
    cf68:	|         move.l 1c818 <input+0xa>,d1
    cf6e:	|         move.l 1c7b0 <winWidth>,d0
    cf74:	|         cmp.l d1,d0
    cf76:	|     /-- bge.s cf86 <CsiCheckInput+0xbc>
            input.mouseX = winWidth;            
    cf78:	|     |   move.l 1c7b0 <winWidth>,d0
    cf7e:	|     |   move.l d0,1c818 <input+0xa>
    cf84:	|  /--|-- bra.s cf94 <CsiCheckInput+0xca>
        }
        else if(input.mouseX < 0) {
    cf86:	|  |  \-> move.l 1c818 <input+0xa>,d0
    cf8c:	|  +----- bpl.s cf94 <CsiCheckInput+0xca>
            input.mouseX = 0;
    cf8e:	|  |      clr.l 1c818 <input+0xa>
        }

        //KPrintF("CsiCheckInput: MouseX = %d\n", input.mouseX);
        counterx_old = counterx_new;
    cf94:	|  \----> clr.w d0
    cf96:	|         move.b (sp),d0
    cf98:	|         move.w d0,1c8f4 <counterx_old>
    }    

    if(countery_new)
    cf9e:	\-------> tst.b 1(sp)
    cfa2:	/-------- beq.w d04c <CsiCheckInput+0x182>
    {
        WORD countery_diff = countery_new - countery_old;
    cfa6:	|         clr.w d1
    cfa8:	|         move.b 1(sp),d1
    cfac:	|         move.w 1c8f6 <countery_old>,d0
    cfb2:	|         sub.w d0,d1
    cfb4:	|         move.w d1,8(sp)

        if(countery_diff > 127) {
    cfb8:	|         cmpi.w #128,8(sp)
    cfbe:	|     /-- blt.s cfd6 <CsiCheckInput+0x10c>
            input.justMoved = TRUE;                
    cfc0:	|     |   move.w #1,1c812 <input+0x4>
            countery_diff -= 256;    
    cfc8:	|     |   move.w 8(sp),d0
    cfcc:	|     |   addi.w #-256,d0
    cfd0:	|     |   move.w d0,8(sp)
    cfd4:	|  /--|-- bra.s d002 <CsiCheckInput+0x138>
        } else if (countery_diff < -128) {
    cfd6:	|  |  \-> cmpi.w #-129,8(sp)
    cfdc:	|  |  /-- bgt.s cff4 <CsiCheckInput+0x12a>
            input.justMoved = TRUE;                
    cfde:	|  |  |   move.w #1,1c812 <input+0x4>
            countery_diff += 256;
    cfe6:	|  |  |   move.w 8(sp),d0
    cfea:	|  |  |   addi.w #256,d0
    cfee:	|  |  |   move.w d0,8(sp)
    cff2:	|  +--|-- bra.s d002 <CsiCheckInput+0x138>
        } else if (countery_diff) {
    cff4:	|  |  \-> tst.w 8(sp)
    cff8:	|  +----- beq.s d002 <CsiCheckInput+0x138>
            input.justMoved = TRUE;
    cffa:	|  |      move.w #1,1c812 <input+0x4>
        }

        input.mouseY += countery_diff;
    d002:	|  \----> move.l 1c81c <input+0xe>,d0
    d008:	|         movea.w 8(sp),a0
    d00c:	|         add.l a0,d0
    d00e:	|         move.l d0,1c81c <input+0xe>

        if( input.mouseY > (int) winHeight) {
    d014:	|         move.l 1c81c <input+0xe>,d1
    d01a:	|         move.l 1c7b4 <winHeight>,d0
    d020:	|         cmp.l d1,d0
    d022:	|     /-- bge.s d032 <CsiCheckInput+0x168>
            input.mouseY = winHeight;            
    d024:	|     |   move.l 1c7b4 <winHeight>,d0
    d02a:	|     |   move.l d0,1c81c <input+0xe>
    d030:	|  /--|-- bra.s d040 <CsiCheckInput+0x176>
        }
        else if(input.mouseY < 0) {
    d032:	|  |  \-> move.l 1c81c <input+0xe>,d0
    d038:	|  +----- bpl.s d040 <CsiCheckInput+0x176>
            input.mouseY = 0;
    d03a:	|  |      clr.l 1c81c <input+0xe>
        }

        //KPrintF("CsiCheckInput: MouseX = %d\n", input.mouseX);
        countery_old = countery_new;
    d040:	|  \----> clr.w d0
    d042:	|         move.b 1(sp),d0
    d046:	|         move.w d0,1c8f6 <countery_old>
    } 

    if(input.leftClick && ((*(volatile UBYTE*)0xbfe001)&64))
    d04c:	\-------> move.w 1c80e <input>,d0
    d052:	      /-- beq.s d078 <CsiCheckInput+0x1ae>
    d054:	      |   movea.l #12574721,a0
    d05a:	      |   move.b (a0),d0
    d05c:	      |   move.b d0,d0
    d05e:	      |   andi.l #255,d0
    d064:	      |   moveq #64,d1
    d066:	      |   and.l d1,d0
    d068:	      +-- beq.s d078 <CsiCheckInput+0x1ae>
    {
        input.leftClick = FALSE;
    d06a:	      |   clr.w 1c80e <input>
        input.leftRelease = TRUE;
    d070:	      |   move.w #1,1c814 <input+0x6>
    }

    if(input.rightClick && ((*(volatile UWORD*)0xdff016)&(1<<10)))
    d078:	      \-> move.w 1c810 <input+0x2>,d0
    d07e:	      /-- beq.s d0a6 <CsiCheckInput+0x1dc>
    d080:	      |   movea.l #14675990,a0
    d086:	      |   move.w (a0),d0
    d088:	      |   move.w d0,d0
    d08a:	      |   andi.l #65535,d0
    d090:	      |   andi.l #1024,d0
    d096:	      +-- beq.s d0a6 <CsiCheckInput+0x1dc>
    {
        input.rightClick = FALSE;
    d098:	      |   clr.w 1c810 <input+0x2>
        input.rightRelease = TRUE;
    d09e:	      |   move.w #1,1c816 <input+0x8>
    }


    if(!((*(volatile UBYTE*)0xbfe001)&64)) {
    d0a6:	      \-> movea.l #12574721,a0
    d0ac:	          move.b (a0),d0
    d0ae:	          move.b d0,d0
    d0b0:	          andi.l #255,d0
    d0b6:	          moveq #64,d1
    d0b8:	          and.l d1,d0
    d0ba:	      /-- bne.s d0c4 <CsiCheckInput+0x1fa>
        input.leftClick = TRUE;        
    d0bc:	      |   move.w #1,1c80e <input>
    } 
    if(!((*(volatile UWORD*)0xdff016)&(1<<10)) ) {
    d0c4:	      \-> movea.l #14675990,a0
    d0ca:	          move.w (a0),d0
    d0cc:	          move.w d0,d0
    d0ce:	          andi.l #65535,d0
    d0d4:	          andi.l #1024,d0
    d0da:	      /-- bne.s d0e4 <CsiCheckInput+0x21a>
        input.rightClick = TRUE;
    d0dc:	      |   move.w #1,1c810 <input+0x2>
    }

    d0e4:	      \-> nop
    d0e6:	          lea 12(sp),sp
    d0ea:	          rts

0000d0ec <cacheSound>:

struct soundThing soundCache[MAX_SAMPLES];

int cacheSound (int f) {
//#pragma unused (f)
	return 0;
    d0ec:	moveq #0,d0
}
    d0ee:	rts

0000d0f0 <huntKillFreeSound>:

void huntKillFreeSound (int filenum) {
//#pragma unused(filenum)
}
    d0f0:	nop
    d0f2:	rts

0000d0f4 <huntKillSound>:

void huntKillSound (int filenum) {
//#pragma unused(filenum)
}
    d0f4:	nop
    d0f6:	rts

0000d0f8 <playMOD>:
	defVol = get2bytes (fp);
}

BOOL playMOD (int f, int a, int fromTrack) {
//#pragma unused (f,a,fromTrack)
    return TRUE;
    d0f8:	moveq #1,d0
}
    d0fa:	rts

0000d0fc <playSoundList>:

void playSoundList(struct soundList *s) {
}
    d0fc:	nop
    d0fe:	rts

0000d100 <saveSounds>:

void saveSounds (BPTR fp) {
    d100:	lea -12(sp),sp
    d104:	move.l a6,-(sp)
    d106:	move.l d2,-(sp)
	FPutC (fp,0);
    d108:	move.l 24(sp),16(sp)
    d10e:	clr.l 12(sp)
    d112:	move.l 1c864 <DOSBase>,d0
    d118:	movea.l d0,a6
    d11a:	move.l 16(sp),d1
    d11e:	move.l 12(sp),d2
    d122:	jsr -312(a6)
    d126:	move.l d0,8(sp)
	put2bytes (defSoundVol, fp);
    d12a:	move.l 1c1f6 <defSoundVol>,d0
    d130:	move.l 24(sp),-(sp)
    d134:	move.l d0,-(sp)
    d136:	jsr 8d0 <put2bytes>
    d13c:	addq.l #8,sp
	put2bytes (defVol, fp);
    d13e:	move.l 1c1f2 <defVol>,d0
    d144:	move.l 24(sp),-(sp)
    d148:	move.l d0,-(sp)
    d14a:	jsr 8d0 <put2bytes>
    d150:	addq.l #8,sp
}
    d152:	nop
    d154:	move.l (sp)+,d2
    d156:	movea.l (sp)+,a6
    d158:	lea 12(sp),sp
    d15c:	rts

0000d15e <setDefaultMusicVolume>:

void setDefaultMusicVolume (int v) {
	defVol = v;
    d15e:	move.l 4(sp),1c1f2 <defVol>
}
    d166:	nop
    d168:	rts

0000d16a <setDefaultSoundVolume>:

void setDefaultSoundVolume (int v) {
	defSoundVol = v;
    d16a:	move.l 4(sp),1c1f6 <defSoundVol>
}
    d172:	nop
    d174:	rts

0000d176 <setSoundLoop>:

void setSoundLoop (int a, int s, int e) {
//#pragma unused (a,s,e)
}
    d176:	nop
    d178:	rts

0000d17a <setMusicVolume>:

void setMusicVolume (int a, int v) {
//#pragma unused (a,v)
}
    d17a:	nop
    d17c:	rts

0000d17e <setSoundVolume>:

void setSoundVolume (int a, int v) {
//#pragma unused (a,v)
}
    d17e:	nop
    d180:	rts

0000d182 <startSound>:

BOOL startSound (int f, BOOL loopy) {	
    d182:	subq.l #4,sp
    d184:	move.l 12(sp),d0
    d188:	move.w d0,d0
    d18a:	move.w d0,2(sp)
//#pragma unused (f,loopy)
	return TRUE;
    d18e:	moveq #1,d0
}
    d190:	addq.l #4,sp
    d192:	rts

0000d194 <stopMOD>:

void stopMOD (int i) {
//#pragma unused(i)
    d194:	nop
    d196:	rts

0000d198 <blankScreen>:
int viewportWidth = 320;
int viewportOffsetX = 0, viewportOffsetY = 0;
unsigned int snapshotTextureName = 0;

void blankScreen(int x1, int y1, int x2, int y2) {
	CstBlankScreen(x2, y2);
    d198:	move.l 16(sp),-(sp)
    d19c:	move.l 16(sp),-(sp)
    d1a0:	jsr e0e <CstBlankScreen>
    d1a6:	addq.l #8,sp
}
    d1a8:	nop
    d1aa:	rts

0000d1ac <darkScreen>:

void darkScreen () {
	KPrintF("darkScreen: Amiga: Graphics Display not implemented yet."); //Todo: Amigize this
    d1ac:	pea 192d4 <PutChar+0x168a>
    d1b2:	jsr 17176 <KPrintF>
    d1b8:	addq.l #4,sp
}
    d1ba:	nop
    d1bc:	rts

0000d1be <drawHorizontalLine>:
	//Amiga todo: Maybe some parallaxstuff here?
	//}
}

void drawHorizontalLine (unsigned int x1, unsigned int y, unsigned int x2) {
	drawLine (x1, y, x2, y);
    d1be:	movea.l 8(sp),a1
    d1c2:	movea.l 12(sp),a0
    d1c6:	move.l 8(sp),d1
    d1ca:	move.l 4(sp),d0
    d1ce:	move.l a1,-(sp)
    d1d0:	move.l a0,-(sp)
    d1d2:	move.l d1,-(sp)
    d1d4:	move.l d0,-(sp)
    d1d6:	jsr 3ee2 <drawLine>
    d1dc:	lea 16(sp),sp
}
    d1e0:	nop
    d1e2:	rts

0000d1e4 <drawVerticalLine>:


void drawVerticalLine (unsigned int x, unsigned int y1, unsigned int y2) {
	drawLine (x, y1, x, y2);
    d1e4:	movea.l 12(sp),a1
    d1e8:	movea.l 4(sp),a0
    d1ec:	move.l 8(sp),d1
    d1f0:	move.l 4(sp),d0
    d1f4:	move.l a1,-(sp)
    d1f6:	move.l a0,-(sp)
    d1f8:	move.l d1,-(sp)
    d1fa:	move.l d0,-(sp)
    d1fc:	jsr 3ee2 <drawLine>
    d202:	lea 16(sp),sp
}
    d206:	nop
    d208:	rts

0000d20a <hardScroll>:

void hardScroll (int distance) {
   	KPrintF("Amiga: Function not implemented."); //Todo: Amigize this
    d20a:	pea 1930d <PutChar+0x16c3>
    d210:	jsr 17176 <KPrintF>
    d216:	addq.l #4,sp
}
    d218:	nop
    d21a:	rts

0000d21c <killBackDrop>:


void killBackDrop () {
	CstFreeBuffer();
    d21c:	jsr 1ccc <CstFreeBuffer>
	deleteTextures (1, &backdropTextureName);
    d222:	pea 1c900 <backdropTextureName>
    d228:	pea 1 <_start+0x1>
    d22c:	jsr 4064 <deleteTextures>
    d232:	addq.l #8,sp
	backdropTextureName = 0;
    d234:	clr.l 1c900 <backdropTextureName>
	backdropExists = FALSE;
    d23a:	clr.w 1c904 <backdropExists>
}
    d240:	nop
    d242:	rts

0000d244 <killParallax>:

void killParallax () {
    d244:	          lea -12(sp),sp
    d248:	          move.l a6,-(sp)
	while (parallaxStuff) {
    d24a:	   /----- bra.s d2b6 <killParallax+0x72>

		struct parallaxLayer * k = parallaxStuff;
    d24c:	/--|----> move.l 1c906 <parallaxStuff>,12(sp)
		parallaxStuff = k->next;
    d254:	|  |      movea.l 12(sp),a0
    d258:	|  |      move.l 42(a0),d0
    d25c:	|  |      move.l d0,1c906 <parallaxStuff>

		// Now kill the image
		deleteTextures (1, &k->textureName);
    d262:	|  |      move.l 12(sp),d0
    d266:	|  |      addq.l #4,d0
    d268:	|  |      move.l d0,-(sp)
    d26a:	|  |      pea 1 <_start+0x1>
    d26e:	|  |      jsr 4064 <deleteTextures>
    d274:	|  |      addq.l #8,sp
		if( k->texture) FreeVec(k->texture);
    d276:	|  |      movea.l 12(sp),a0
    d27a:	|  |      move.l (a0),d0
    d27c:	|  |  /-- beq.s d296 <killParallax+0x52>
    d27e:	|  |  |   movea.l 12(sp),a0
    d282:	|  |  |   move.l (a0),8(sp)
    d286:	|  |  |   move.l 1c85c <SysBase>,d0
    d28c:	|  |  |   movea.l d0,a6
    d28e:	|  |  |   movea.l 8(sp),a1
    d292:	|  |  |   jsr -690(a6)
		if( k) FreeVec(k);
    d296:	|  |  \-> tst.l 12(sp)
    d29a:	|  |  /-- beq.s d2b2 <killParallax+0x6e>
    d29c:	|  |  |   move.l 12(sp),4(sp)
    d2a2:	|  |  |   move.l 1c85c <SysBase>,d0
    d2a8:	|  |  |   movea.l d0,a6
    d2aa:	|  |  |   movea.l 4(sp),a1
    d2ae:	|  |  |   jsr -690(a6)
		k = NULL;
    d2b2:	|  |  \-> clr.l 12(sp)
	while (parallaxStuff) {
    d2b6:	|  \----> move.l 1c906 <parallaxStuff>,d0
    d2bc:	\-------- bne.s d24c <killParallax+0x8>
	}
}
    d2be:	          nop
    d2c0:	          nop
    d2c2:	          movea.l (sp)+,a6
    d2c4:	          lea 12(sp),sp
    d2c8:	          rts

0000d2ca <loadBackDrop>:

void loadBackDrop (int fileNum, int x, int y) {
	if (! openFileFromNum (fileNum)) {
    d2ca:	       move.l 4(sp),-(sp)
    d2ce:	       jsr 6df0 <openFileFromNum>
    d2d4:	       addq.l #4,sp
    d2d6:	       tst.l d0
    d2d8:	   /-- bne.s d2ea <loadBackDrop+0x20>
		KPrintF("Can't load overlay image");
    d2da:	   |   pea 1932e <PutChar+0x16e4>
    d2e0:	   |   jsr 17176 <KPrintF>
    d2e6:	   |   addq.l #4,sp
		return;
    d2e8:	/--|-- bra.s d30a <loadBackDrop+0x40>
	}
	CstLoadBackdrop( bigDataFile, x, y);
    d2ea:	|  \-> move.l 1c844 <bigDataFile>,d0
    d2f0:	|      move.l 12(sp),-(sp)
    d2f4:	|      move.l 12(sp),-(sp)
    d2f8:	|      move.l d0,-(sp)
    d2fa:	|      jsr 1f7a <CstLoadBackdrop>
    d300:	|      lea 12(sp),sp
	finishAccess ();
    d304:	|      jsr 6ce8 <finishAccess>
	
}
    d30a:	\----> rts

0000d30c <loadParallax>:
	
	backdropExists = TRUE;
	return TRUE;
}

BOOL loadParallax (unsigned short v, unsigned short fracX, unsigned short fracY) {
    d30c:	subq.l #8,sp
    d30e:	movea.l 12(sp),a0
    d312:	move.l 16(sp),d1
    d316:	move.l 20(sp),d0
    d31a:	movea.w a0,a0
    d31c:	move.w a0,6(sp)
    d320:	move.w d1,d1
    d322:	move.w d1,4(sp)
    d326:	move.w d0,d0
    d328:	move.w d0,2(sp)
	KPrintF("loadParallax: Not implemented yet."); //Amiga Todo: Amigize this	
    d32c:	pea 1937d <PutChar+0x1733>
    d332:	jsr 17176 <KPrintF>
    d338:	addq.l #4,sp

}
    d33a:	nop
    d33c:	addq.l #8,sp
    d33e:	rts

0000d340 <mixBackDrop>:

void mixBackDrop (int fileNum, int x, int y) {
	KPrintF("mixBackdrop: Amiga Graphics Display not implemented yet."); //Todo: Amigize this	
    d340:	pea 193a0 <PutChar+0x1756>
    d346:	jsr 17176 <KPrintF>
    d34c:	addq.l #4,sp
}
    d34e:	nop
    d350:	rts

0000d352 <nosnapshot>:

void nosnapshot () {
	deleteTextures (1, &snapshotTextureName);
    d352:	pea 1c90a <snapshotTextureName>
    d358:	pea 1 <_start+0x1>
    d35c:	jsr 4064 <deleteTextures>
    d362:	addq.l #8,sp
	snapshotTextureName = 0;
    d364:	clr.l 1c90a <snapshotTextureName>
}
    d36a:	nop
    d36c:	rts

0000d36e <reserveBackdrop>:

BOOL reserveBackdrop () {	
	cameraX = 0;
    d36e:	clr.l 1c916 <cameraX>
	cameraY = 0;
    d374:	clr.l 1c91a <cameraY>
	
	return CstReserveBackdrop(sceneWidth, sceneHeight);
    d37a:	move.l 1c8fc <sceneHeight>,d0
    d380:	move.l d0,d1
    d382:	move.l 1c8f8 <sceneWidth>,d0
    d388:	move.l d1,-(sp)
    d38a:	move.l d0,-(sp)
    d38c:	jsr 39e8 <CstReserveBackdrop>
    d392:	addq.l #8,sp
}
    d394:	rts

0000d396 <resizeBackdrop>:

BOOL resizeBackdrop (int x, int y) {
    killBackDrop ();
    d396:	jsr d21c <killBackDrop>
	killParallax ();
    d39c:	jsr d244 <killParallax>
	killZBuffer ();
    d3a2:	jsr 8792 <killZBuffer>
	sceneWidth = x;
    d3a8:	move.l 4(sp),d0
    d3ac:	move.l d0,1c8f8 <sceneWidth>
	sceneHeight = y;
    d3b2:	move.l 8(sp),d0
    d3b6:	move.l d0,1c8fc <sceneHeight>
	KPrintF("resizeBackdrop: Reserving new Backdrop");
    d3bc:	pea 193d9 <PutChar+0x178f>
    d3c2:	jsr 17176 <KPrintF>
    d3c8:	addq.l #4,sp
	return reserveBackdrop();
    d3ca:	jsr d36e <reserveBackdrop>
	KPrintF("resizeBackdrop: Backdrop reserved");	
}
    d3d0:	rts

0000d3d2 <restoreSnapshot>:

BOOL restoreSnapshot (BPTR fp) {
    d3d2:	subq.l #8,sp
	unsigned int picWidth = get2bytes (fp);
    d3d4:	move.l 12(sp),-(sp)
    d3d8:	jsr 6bc <get2bytes>
    d3de:	addq.l #4,sp
    d3e0:	move.l d0,4(sp)
	unsigned int picHeight = get2bytes (fp);
    d3e4:	move.l 12(sp),-(sp)
    d3e8:	jsr 6bc <get2bytes>
    d3ee:	addq.l #4,sp
    d3f0:	move.l d0,(sp)

	//Todo: Amigize this?

	return TRUE;
    d3f2:	moveq #1,d0
}
    d3f4:	addq.l #8,sp
    d3f6:	rts

0000d3f8 <saveParallaxRecursive>:

void saveParallaxRecursive (struct parallaxLayer * me, BPTR fp) {
    d3f8:	   /-> lea -12(sp),sp
    d3fc:	   |   move.l a6,-(sp)
    d3fe:	   |   move.l d2,-(sp)
	if (me) {
    d400:	   |   tst.l 24(sp)
    d404:	/--|-- beq.w d49a <saveParallaxRecursive+0xa2>
		saveParallaxRecursive (me -> next, fp);
    d408:	|  |   movea.l 24(sp),a0
    d40c:	|  |   move.l 42(a0),d0
    d410:	|  |   move.l 28(sp),-(sp)
    d414:	|  |   move.l d0,-(sp)
    d416:	|  \-- jsr d3f8 <saveParallaxRecursive>(pc)
    d41a:	|      addq.l #8,sp
		FPutC (fp, 1);
    d41c:	|      move.l 28(sp),16(sp)
    d422:	|      moveq #1,d0
    d424:	|      move.l d0,12(sp)
    d428:	|      move.l 1c864 <DOSBase>,d0
    d42e:	|      movea.l d0,a6
    d430:	|      move.l 16(sp),d1
    d434:	|      move.l 12(sp),d2
    d438:	|      jsr -312(a6)
    d43c:	|      move.l d0,8(sp)
		put2bytes (me->fileNum, fp);
    d440:	|      movea.l 24(sp),a0
    d444:	|      move.w 28(a0),d0
    d448:	|      move.w d0,d0
    d44a:	|      andi.l #65535,d0
    d450:	|      move.l 28(sp),-(sp)
    d454:	|      move.l d0,-(sp)
    d456:	|      jsr 8d0 <put2bytes>
    d45c:	|      addq.l #8,sp
		put2bytes (me ->fractionX, fp);
    d45e:	|      movea.l 24(sp),a0
    d462:	|      move.w 30(a0),d0
    d466:	|      move.w d0,d0
    d468:	|      andi.l #65535,d0
    d46e:	|      move.l 28(sp),-(sp)
    d472:	|      move.l d0,-(sp)
    d474:	|      jsr 8d0 <put2bytes>
    d47a:	|      addq.l #8,sp
		put2bytes (me->fractionY, fp);
    d47c:	|      movea.l 24(sp),a0
    d480:	|      move.w 32(a0),d0
    d484:	|      move.w d0,d0
    d486:	|      andi.l #65535,d0
    d48c:	|      move.l 28(sp),-(sp)
    d490:	|      move.l d0,-(sp)
    d492:	|      jsr 8d0 <put2bytes>
    d498:	|      addq.l #8,sp
	}
}
    d49a:	\----> nop
    d49c:	       move.l (sp)+,d2
    d49e:	       movea.l (sp)+,a6
    d4a0:	       lea 12(sp),sp
    d4a4:	       rts

0000d4a6 <snapshot>:

BOOL snapshot () {

	KPrintF("snapshot: Not yet implemented on Amiga"); //Todo
    d4a6:	pea 19400 <PutChar+0x17b6>
    d4ac:	jsr 17176 <KPrintF>
    d4b2:	addq.l #4,sp
	return TRUE;
    d4b4:	moveq #1,d0
    d4b6:	rts

0000d4b8 <findObjectType>:
#include "moreio.h"
#include "support/gcc8_c_support.h"

struct objectType * allObjectTypes = NULL;

struct objectType * findObjectType (int i) {
    d4b8:	             subq.l #4,sp
	struct objectType * huntType = allObjectTypes;
    d4ba:	             move.l 1c90e <allObjectTypes>,(sp)

	while (huntType) {
    d4c0:	      /----- bra.s d4d8 <findObjectType+0x20>
		if (huntType -> objectNum == i) return huntType;
    d4c2:	   /--|----> movea.l (sp),a0
    d4c4:	   |  |      move.l 4(a0),d0
    d4c8:	   |  |      cmp.l 8(sp),d0
    d4cc:	   |  |  /-- bne.s d4d2 <findObjectType+0x1a>
    d4ce:	   |  |  |   move.l (sp),d0
    d4d0:	/--|--|--|-- bra.s d4e8 <findObjectType+0x30>
		huntType = huntType -> next;
    d4d2:	|  |  |  \-> movea.l (sp),a0
    d4d4:	|  |  |      move.l 8(a0),(sp)
	while (huntType) {
    d4d8:	|  |  \----> tst.l (sp)
    d4da:	|  \-------- bne.s d4c2 <findObjectType+0xa>
	}

	return loadObjectType (i);
    d4dc:	|            move.l 8(sp),-(sp)
    d4e0:	|            jsr d5a8 <loadObjectType>
    d4e6:	|            addq.l #4,sp
}
    d4e8:	\----------> addq.l #4,sp
    d4ea:	             rts

0000d4ec <getCombinationFunction>:

int getCombinationFunction (int withThis, int thisObject) {
    d4ec:	             lea -12(sp),sp
	int i, num = 0;
    d4f0:	             clr.l 4(sp)
	struct objectType * obj = findObjectType (thisObject);
    d4f4:	             move.l 20(sp),-(sp)
    d4f8:	             jsr d4b8 <findObjectType>
    d4fe:	             addq.l #4,sp
    d500:	             move.l d0,(sp)

	for (i = 0; i < obj -> numCom; i ++) {
    d502:	             clr.l 8(sp)
    d506:	   /-------- bra.s d53c <getCombinationFunction+0x50>
		if (obj -> allCombis[i].withObj == withThis)
    d508:	/--|-------> movea.l (sp),a0
    d50a:	|  |         move.l 38(a0),d1
    d50e:	|  |         move.l 8(sp),d0
    d512:	|  |         lsl.l #3,d0
    d514:	|  |         movea.l d1,a0
    d516:	|  |         adda.l d0,a0
    d518:	|  |         move.l (a0),d0
    d51a:	|  |         cmp.l 16(sp),d0
    d51e:	|  |  /----- bne.s d538 <getCombinationFunction+0x4c>
		{
			num = obj -> allCombis[i].funcNum;
    d520:	|  |  |      movea.l (sp),a0
    d522:	|  |  |      move.l 38(a0),d1
    d526:	|  |  |      move.l 8(sp),d0
    d52a:	|  |  |      lsl.l #3,d0
    d52c:	|  |  |      movea.l d1,a0
    d52e:	|  |  |      adda.l d0,a0
    d530:	|  |  |      move.l 4(a0),4(sp)
			break;
    d536:	|  |  |  /-- bra.s d548 <getCombinationFunction+0x5c>
	for (i = 0; i < obj -> numCom; i ++) {
    d538:	|  |  \--|-> addq.l #1,8(sp)
    d53c:	|  \-----|-> movea.l (sp),a0
    d53e:	|        |   move.l 16(a0),d0
    d542:	|        |   cmp.l 8(sp),d0
    d546:	\--------|-- bgt.s d508 <getCombinationFunction+0x1c>
		}
	}

	return num;
    d548:	         \-> move.l 4(sp),d0
}
    d54c:	             lea 12(sp),sp
    d550:	             rts

0000d552 <initObjectTypes>:

BOOL initObjectTypes () {
	return TRUE;
    d552:	moveq #1,d0
}
    d554:	rts

0000d556 <loadObjectRef>:

struct objectType * loadObjectRef (BPTR fp) {
    d556:	subq.l #8,sp
    d558:	move.l a6,-(sp)
	struct objectType * r = loadObjectType (get2bytes (fp));
    d55a:	move.l 16(sp),-(sp)
    d55e:	jsr 6bc <get2bytes>
    d564:	addq.l #4,sp
    d566:	move.l d0,-(sp)
    d568:	jsr d5a8 <loadObjectType>
    d56e:	addq.l #4,sp
    d570:	move.l d0,8(sp)
	FreeVec(r -> screenName);
    d574:	movea.l 8(sp),a0
    d578:	move.l (a0),4(sp)
    d57c:	move.l 1c85c <SysBase>,d0
    d582:	movea.l d0,a6
    d584:	movea.l 4(sp),a1
    d588:	jsr -690(a6)
	r -> screenName = readString (fp);
    d58c:	move.l 16(sp),-(sp)
    d590:	jsr b02 <readString>
    d596:	addq.l #4,sp
    d598:	movea.l 8(sp),a0
    d59c:	move.l d0,(a0)
	return r;
    d59e:	move.l 8(sp),d0
}
    d5a2:	movea.l (sp)+,a6
    d5a4:	addq.l #8,sp
    d5a6:	rts

0000d5a8 <loadObjectType>:

struct objectType * loadObjectType (int i) {
    d5a8:	          lea -84(sp),sp
    d5ac:	          move.l a6,-(sp)
    d5ae:	          move.l a2,-(sp)
    int a, nameNum;
    struct objectType * newType = AllocVec(sizeof(struct objectType), MEMF_ANY);
    d5b0:	          moveq #42,d0
    d5b2:	          move.l d0,84(sp)
    d5b6:	          clr.l 80(sp)
    d5ba:	          move.l 1c85c <SysBase>,d0
    d5c0:	          movea.l d0,a6
    d5c2:	          move.l 84(sp),d0
    d5c6:	          move.l 80(sp),d1
    d5ca:	          jsr -684(a6)
    d5ce:	          move.l d0,76(sp)
    d5d2:	          move.l 76(sp),d0
    d5d6:	          move.l d0,72(sp)

    if (newType) {
    d5da:	/-------- beq.w d854 <loadObjectType+0x2ac>
        if (openObjectSlice(i)) {
    d5de:	|         move.l 96(sp),-(sp)
    d5e2:	|         jsr 6eb8 <openObjectSlice>
    d5e8:	|         addq.l #4,sp
    d5ea:	|         tst.w d0
    d5ec:	+-------- beq.w d854 <loadObjectType+0x2ac>
            nameNum = get2bytes(bigDataFile);
    d5f0:	|         move.l 1c844 <bigDataFile>,d0
    d5f6:	|         move.l d0,-(sp)
    d5f8:	|         jsr 6bc <get2bytes>
    d5fe:	|         addq.l #4,sp
    d600:	|         move.l d0,68(sp)
            newType->r = (BYTE) FGetC(bigDataFile);
    d604:	|         move.l 1c844 <bigDataFile>,64(sp)
    d60c:	|         move.l 1c864 <DOSBase>,d0
    d612:	|         movea.l d0,a6
    d614:	|         move.l 64(sp),d1
    d618:	|         jsr -306(a6)
    d61c:	|         move.l d0,60(sp)
    d620:	|         move.l 60(sp),d0
    d624:	|         move.l d0,d0
    d626:	|         movea.l 72(sp),a0
    d62a:	|         move.b d0,12(a0)
            newType->g = (BYTE) FGetC(bigDataFile);
    d62e:	|         move.l 1c844 <bigDataFile>,56(sp)
    d636:	|         move.l 1c864 <DOSBase>,d0
    d63c:	|         movea.l d0,a6
    d63e:	|         move.l 56(sp),d1
    d642:	|         jsr -306(a6)
    d646:	|         move.l d0,52(sp)
    d64a:	|         move.l 52(sp),d0
    d64e:	|         move.l d0,d0
    d650:	|         movea.l 72(sp),a0
    d654:	|         move.b d0,13(a0)
            newType->b = (BYTE) FGetC(bigDataFile);
    d658:	|         move.l 1c844 <bigDataFile>,48(sp)
    d660:	|         move.l 1c864 <DOSBase>,d0
    d666:	|         movea.l d0,a6
    d668:	|         move.l 48(sp),d1
    d66c:	|         jsr -306(a6)
    d670:	|         move.l d0,44(sp)
    d674:	|         move.l 44(sp),d0
    d678:	|         move.l d0,d0
    d67a:	|         movea.l 72(sp),a0
    d67e:	|         move.b d0,14(a0)
            newType->speechGap = FGetC(bigDataFile);
    d682:	|         move.l 1c844 <bigDataFile>,40(sp)
    d68a:	|         move.l 1c864 <DOSBase>,d0
    d690:	|         movea.l d0,a6
    d692:	|         move.l 40(sp),d1
    d696:	|         jsr -306(a6)
    d69a:	|         move.l d0,36(sp)
    d69e:	|         move.l 36(sp),d0
    d6a2:	|         movea.l 72(sp),a0
    d6a6:	|         move.l d0,20(a0)
            newType->walkSpeed = FGetC(bigDataFile);
    d6aa:	|         move.l 1c844 <bigDataFile>,32(sp)
    d6b2:	|         move.l 1c864 <DOSBase>,d0
    d6b8:	|         movea.l d0,a6
    d6ba:	|         move.l 32(sp),d1
    d6be:	|         jsr -306(a6)
    d6c2:	|         move.l d0,28(sp)
    d6c6:	|         move.l 28(sp),d0
    d6ca:	|         movea.l 72(sp),a0
    d6ce:	|         move.l d0,24(a0)
            newType->wrapSpeech = get4bytes(bigDataFile);
    d6d2:	|         move.l 1c844 <bigDataFile>,d0
    d6d8:	|         move.l d0,-(sp)
    d6da:	|         jsr 718 <get4bytes>
    d6e0:	|         addq.l #4,sp
    d6e2:	|         movea.l 72(sp),a0
    d6e6:	|         move.l d0,28(a0)
            newType->spinSpeed = get2bytes(bigDataFile);
    d6ea:	|         move.l 1c844 <bigDataFile>,d0
    d6f0:	|         move.l d0,-(sp)
    d6f2:	|         jsr 6bc <get2bytes>
    d6f8:	|         addq.l #4,sp
    d6fa:	|         movea.l 72(sp),a0
    d6fe:	|         move.l d0,32(a0)

            FGetC(bigDataFile);
    d702:	|         move.l 1c844 <bigDataFile>,24(sp)
    d70a:	|         move.l 1c864 <DOSBase>,d0
    d710:	|         movea.l d0,a6
    d712:	|         move.l 24(sp),d1
    d716:	|         jsr -306(a6)
    d71a:	|         move.l d0,20(sp)
            getFloat(bigDataFile);
    d71e:	|         move.l 1c844 <bigDataFile>,d0
    d724:	|         move.l d0,-(sp)
    d726:	|         jsr 7d8 <getFloat>
    d72c:	|         addq.l #4,sp
            getFloat(bigDataFile);
    d72e:	|         move.l 1c844 <bigDataFile>,d0
    d734:	|         move.l d0,-(sp)
    d736:	|         jsr 7d8 <getFloat>
    d73c:	|         addq.l #4,sp

            newType->flags = get2bytes(bigDataFile);
    d73e:	|         move.l 1c844 <bigDataFile>,d0
    d744:	|         move.l d0,-(sp)
    d746:	|         jsr 6bc <get2bytes>
    d74c:	|         addq.l #4,sp
    d74e:	|         move.l d0,d0
    d750:	|         movea.l 72(sp),a0
    d754:	|         move.w d0,36(a0)

            newType->numCom = get2bytes(bigDataFile);
    d758:	|         move.l 1c844 <bigDataFile>,d0
    d75e:	|         move.l d0,-(sp)
    d760:	|         jsr 6bc <get2bytes>
    d766:	|         addq.l #4,sp
    d768:	|         movea.l 72(sp),a0
    d76c:	|         move.l d0,16(a0)
            newType->allCombis = (newType->numCom) ? AllocVec(sizeof(struct combination) * newType->numCom, MEMF_ANY) : NULL;
    d770:	|         movea.l 72(sp),a0
    d774:	|         move.l 16(a0),d0
    d778:	|  /----- beq.s d7aa <loadObjectType+0x202>
    d77a:	|  |      movea.l 72(sp),a0
    d77e:	|  |      move.l 16(a0),d0
    d782:	|  |      lsl.l #3,d0
    d784:	|  |      move.l d0,16(sp)
    d788:	|  |      clr.l 12(sp)
    d78c:	|  |      move.l 1c85c <SysBase>,d0
    d792:	|  |      movea.l d0,a6
    d794:	|  |      move.l 16(sp),d0
    d798:	|  |      move.l 12(sp),d1
    d79c:	|  |      jsr -684(a6)
    d7a0:	|  |      move.l d0,8(sp)
    d7a4:	|  |      move.l 8(sp),d0
    d7a8:	|  |  /-- bra.s d7ac <loadObjectType+0x204>
    d7aa:	|  \--|-> moveq #0,d0
    d7ac:	|     \-> movea.l 72(sp),a0
    d7b0:	|         move.l d0,38(a0)

            for (a = 0; a < newType->numCom; a++) {
    d7b4:	|         clr.l 88(sp)
    d7b8:	|     /-- bra.s d808 <loadObjectType+0x260>
                newType->allCombis[a].withObj = get2bytes(bigDataFile);
    d7ba:	|  /--|-> move.l 1c844 <bigDataFile>,d1
    d7c0:	|  |  |   movea.l 72(sp),a0
    d7c4:	|  |  |   movea.l 38(a0),a0
    d7c8:	|  |  |   move.l 88(sp),d0
    d7cc:	|  |  |   lsl.l #3,d0
    d7ce:	|  |  |   lea (0,a0,d0.l),a2
    d7d2:	|  |  |   move.l d1,-(sp)
    d7d4:	|  |  |   jsr 6bc <get2bytes>
    d7da:	|  |  |   addq.l #4,sp
    d7dc:	|  |  |   move.l d0,(a2)
                newType->allCombis[a].funcNum = get2bytes(bigDataFile);
    d7de:	|  |  |   move.l 1c844 <bigDataFile>,d1
    d7e4:	|  |  |   movea.l 72(sp),a0
    d7e8:	|  |  |   movea.l 38(a0),a0
    d7ec:	|  |  |   move.l 88(sp),d0
    d7f0:	|  |  |   lsl.l #3,d0
    d7f2:	|  |  |   lea (0,a0,d0.l),a2
    d7f6:	|  |  |   move.l d1,-(sp)
    d7f8:	|  |  |   jsr 6bc <get2bytes>
    d7fe:	|  |  |   addq.l #4,sp
    d800:	|  |  |   move.l d0,4(a2)
            for (a = 0; a < newType->numCom; a++) {
    d804:	|  |  |   addq.l #1,88(sp)
    d808:	|  |  \-> movea.l 72(sp),a0
    d80c:	|  |      move.l 16(a0),d0
    d810:	|  |      cmp.l 88(sp),d0
    d814:	|  \----- bgt.s d7ba <loadObjectType+0x212>
            }
            finishAccess();
    d816:	|         jsr 6ce8 <finishAccess>
            newType->screenName = getNumberedString(nameNum);
    d81c:	|         move.l 68(sp),-(sp)
    d820:	|         jsr 6cf2 <getNumberedString>
    d826:	|         addq.l #4,sp
    d828:	|         movea.l 72(sp),a0
    d82c:	|         move.l d0,(a0)
            newType->objectNum = i;
    d82e:	|         movea.l 72(sp),a0
    d832:	|         move.l 96(sp),4(a0)
            newType->next = allObjectTypes;
    d838:	|         move.l 1c90e <allObjectTypes>,d0
    d83e:	|         movea.l 72(sp),a0
    d842:	|         move.l d0,8(a0)
            allObjectTypes = newType;
    d846:	|         move.l 72(sp),1c90e <allObjectTypes>
            return newType;
    d84e:	|         move.l 72(sp),d0
    d852:	|     /-- bra.s d856 <loadObjectType+0x2ae>
        }
    }
    return NULL;
    d854:	\-----|-> moveq #0,d0
}
    d856:	      \-> movea.l (sp)+,a2
    d858:	          movea.l (sp)+,a6
    d85a:	          lea 84(sp),sp
    d85e:	          rts

0000d860 <removeObjectType>:


void removeObjectType (struct objectType * oT) {
    d860:	             lea -16(sp),sp
    d864:	             move.l a6,-(sp)
	struct objectType * * huntRegion = &allObjectTypes;
    d866:	             move.l #117006,16(sp)

	while (* huntRegion) {
    d86e:	   /-------- bra.s d8e2 <removeObjectType+0x82>
		if ((* huntRegion) == oT) {
    d870:	/--|-------> movea.l 16(sp),a0
    d874:	|  |         move.l (a0),d0
    d876:	|  |         cmp.l 24(sp),d0
    d87a:	|  |  /----- bne.s d8d4 <removeObjectType+0x74>
//			FILE * debuggy2 = fopen ("debug.txt", "at");
//			fprintf (debuggy2, "DELETING OBJECT TYPE: %p %s\n", oT, oT -> screenName);
//			fclose (debuggy2);

			* huntRegion = oT -> next;
    d87c:	|  |  |      movea.l 24(sp),a0
    d880:	|  |  |      move.l 8(a0),d0
    d884:	|  |  |      movea.l 16(sp),a0
    d888:	|  |  |      move.l d0,(a0)
			FreeVec(oT -> allCombis);
    d88a:	|  |  |      movea.l 24(sp),a0
    d88e:	|  |  |      move.l 38(a0),12(sp)
    d894:	|  |  |      move.l 1c85c <SysBase>,d0
    d89a:	|  |  |      movea.l d0,a6
    d89c:	|  |  |      movea.l 12(sp),a1
    d8a0:	|  |  |      jsr -690(a6)
			FreeVec(oT -> screenName);
    d8a4:	|  |  |      movea.l 24(sp),a0
    d8a8:	|  |  |      move.l (a0),8(sp)
    d8ac:	|  |  |      move.l 1c85c <SysBase>,d0
    d8b2:	|  |  |      movea.l d0,a6
    d8b4:	|  |  |      movea.l 8(sp),a1
    d8b8:	|  |  |      jsr -690(a6)
			FreeVec(oT);
    d8bc:	|  |  |      move.l 24(sp),4(sp)
    d8c2:	|  |  |      move.l 1c85c <SysBase>,d0
    d8c8:	|  |  |      movea.l d0,a6
    d8ca:	|  |  |      movea.l 4(sp),a1
    d8ce:	|  |  |      jsr -690(a6)
			return;
    d8d2:	|  |  |  /-- bra.s d8f8 <removeObjectType+0x98>
		} else {
			huntRegion = & ((* huntRegion) -> next);
    d8d4:	|  |  \--|-> movea.l 16(sp),a0
    d8d8:	|  |     |   move.l (a0),d0
    d8da:	|  |     |   move.l d0,d1
    d8dc:	|  |     |   addq.l #8,d1
    d8de:	|  |     |   move.l d1,16(sp)
	while (* huntRegion) {
    d8e2:	|  \-----|-> movea.l 16(sp),a0
    d8e6:	|        |   move.l (a0),d0
    d8e8:	\--------|-- bne.s d870 <removeObjectType+0x10>
		}
	}
	KPrintF("Can't delete object type: bad pointer");
    d8ea:	         |   pea 19427 <PutChar+0x17dd>
    d8f0:	         |   jsr 17176 <KPrintF>
    d8f6:	         |   addq.l #4,sp
}
    d8f8:	         \-> movea.l (sp)+,a6
    d8fa:	             lea 16(sp),sp
    d8fe:	             rts

0000d900 <saveObjectRef>:

void saveObjectRef (struct objectType * r, BPTR fp) {
	put2bytes (r -> objectNum, fp);
    d900:	movea.l 4(sp),a0
    d904:	move.l 4(a0),d0
    d908:	move.l 8(sp),-(sp)
    d90c:	move.l d0,-(sp)
    d90e:	jsr 8d0 <put2bytes>
    d914:	addq.l #8,sp
	writeString (r -> screenName, fp);
    d916:	movea.l 4(sp),a0
    d91a:	move.l (a0),d0
    d91c:	move.l 8(sp),-(sp)
    d920:	move.l d0,-(sp)
    d922:	jsr bd8 <writeString>
    d928:	addq.l #8,sp
    d92a:	nop
    d92c:	rts

0000d92e <fileToStack>:

char encode1 = 0;
char encode2 = 0;
unsigned short saveEncoding = FALSE;

BOOL fileToStack(char *filename, struct stackHandler *sH) {
    d92e:	                         lea -112(sp),sp
    d932:	                         move.l a6,-(sp)
    d934:	                         move.l d2,-(sp)
    struct variable stringVar;
    stringVar.varType = SVT_NULL;
    d936:	                         clr.l 10(sp)
    const char *checker = saveEncoding ? "[Custom data (encoded)]\r\n" : "[Custom data (ASCII)]\n";
    d93a:	                         move.w 1c914 <saveEncoding>,d0
    d940:	                  /----- beq.s d94a <fileToStack+0x1c>
    d942:	                  |      move.l #103501,d0
    d948:	                  |  /-- bra.s d950 <fileToStack+0x22>
    d94a:	                  \--|-> move.l #103527,d0
    d950:	                     \-> move.l d0,116(sp)

    BPTR fp = Open(filename, MODE_OLDFILE);
    d954:	                         move.l 124(sp),112(sp)
    d95a:	                         move.l #1005,108(sp)
    d962:	                         move.l 1c864 <DOSBase>,d0
    d968:	                         movea.l d0,a6
    d96a:	                         move.l 112(sp),d1
    d96e:	                         move.l 108(sp),d2
    d972:	                         jsr -30(a6)
    d976:	                         move.l d0,104(sp)
    d97a:	                         move.l 104(sp),d0
    d97e:	                         move.l d0,100(sp)
    if (!fp) {
    d982:	                     /-- bne.s d99c <fileToStack+0x6e>
        KPrintF("No such file", filename);
    d984:	                     |   move.l 124(sp),-(sp)
    d988:	                     |   pea 1947e <PutChar+0x1834>
    d98e:	                     |   jsr 17176 <KPrintF>
    d994:	                     |   addq.l #8,sp
        return FALSE;
    d996:	                     |   clr.w d0
    d998:	/--------------------|-- bra.w dc92 <fileToStack+0x364>
    }

    encode1 = (unsigned char)saveEncoding & 255;
    d99c:	|                    \-> move.w 1c914 <saveEncoding>,d0
    d9a2:	|                        move.l d0,d0
    d9a4:	|                        move.b d0,1c912 <encode1>
    encode2 = (unsigned char)(saveEncoding >> 8);
    d9aa:	|                        move.w 1c914 <saveEncoding>,d0
    d9b0:	|                        lsr.w #8,d0
    d9b2:	|                        move.l d0,d0
    d9b4:	|                        move.b d0,1c913 <encode2>

    while (*checker) {
    d9ba:	|                 /----- bra.s da1e <fileToStack+0xf0>
        if (FGetC(fp) != *checker) {
    d9bc:	|              /--|----> move.l 100(sp),30(sp)
    d9c2:	|              |  |      move.l 1c864 <DOSBase>,d0
    d9c8:	|              |  |      movea.l d0,a6
    d9ca:	|              |  |      move.l 30(sp),d1
    d9ce:	|              |  |      jsr -306(a6)
    d9d2:	|              |  |      move.l d0,26(sp)
    d9d6:	|              |  |      move.l 26(sp),d1
    d9da:	|              |  |      movea.l 116(sp),a0
    d9de:	|              |  |      move.b (a0),d0
    d9e0:	|              |  |      ext.w d0
    d9e2:	|              |  |      movea.w d0,a0
    d9e4:	|              |  |      cmpa.l d1,a0
    d9e6:	|              |  |  /-- beq.s da1a <fileToStack+0xec>
            Close(fp);
    d9e8:	|              |  |  |   move.l 100(sp),22(sp)
    d9ee:	|              |  |  |   move.l 1c864 <DOSBase>,d0
    d9f4:	|              |  |  |   movea.l d0,a6
    d9f6:	|              |  |  |   move.l 22(sp),d1
    d9fa:	|              |  |  |   jsr -36(a6)
    d9fe:	|              |  |  |   move.l d0,18(sp)
            KPrintF(LOAD_ERROR "This isn't a SLUDGE custom data file:", filename);
    da02:	|              |  |  |   move.l 124(sp),-(sp)
    da06:	|              |  |  |   pea 1948b <PutChar+0x1841>
    da0c:	|              |  |  |   jsr 17176 <KPrintF>
    da12:	|              |  |  |   addq.l #8,sp
            return FALSE;
    da14:	|              |  |  |   clr.w d0
    da16:	+--------------|--|--|-- bra.w dc92 <fileToStack+0x364>
        }
        checker++;
    da1a:	|              |  |  \-> addq.l #1,116(sp)
    while (*checker) {
    da1e:	|              |  \----> movea.l 116(sp),a0
    da22:	|              |         move.b (a0),d0
    da24:	|              \-------- bne.s d9bc <fileToStack+0x8e>
    }

    if (saveEncoding) {
    da26:	|                        move.w 1c914 <saveEncoding>,d0
    da2c:	|  /-------------------- beq.s daa0 <fileToStack+0x172>
        char *checker = readStringEncoded(fp);
    da2e:	|  |                     move.l 100(sp),-(sp)
    da32:	|  |                     jsr dc9c <readStringEncoded>
    da38:	|  |                     addq.l #4,sp
    da3a:	|  |                     move.l d0,96(sp)
        if (strcmp(checker, "UN�LO�CKED")) {
    da3e:	|  |                     pea 194cc <PutChar+0x1882>
    da44:	|  |                     move.l 100(sp),-(sp)
    da48:	|  |                     jsr 13bfa <strcmp>
    da4e:	|  |                     addq.l #8,sp
    da50:	|  |                     tst.l d0
    da52:	|  |                 /-- beq.s da86 <fileToStack+0x158>
            Close(fp);
    da54:	|  |                 |   move.l 100(sp),88(sp)
    da5a:	|  |                 |   move.l 1c864 <DOSBase>,d0
    da60:	|  |                 |   movea.l d0,a6
    da62:	|  |                 |   move.l 88(sp),d1
    da66:	|  |                 |   jsr -36(a6)
    da6a:	|  |                 |   move.l d0,84(sp)
            KPrintF(LOAD_ERROR "The current file encoding setting does not match the encoding setting used when this file was created:", filename);
    da6e:	|  |                 |   move.l 124(sp),-(sp)
    da72:	|  |                 |   pea 194db <PutChar+0x1891>
    da78:	|  |                 |   jsr 17176 <KPrintF>
    da7e:	|  |                 |   addq.l #8,sp
            return FALSE;
    da80:	|  |                 |   clr.w d0
    da82:	+--|-----------------|-- bra.w dc92 <fileToStack+0x364>
        }
        FreeVec(checker);
    da86:	|  |                 \-> move.l 96(sp),92(sp)
    da8c:	|  |                     move.l 1c85c <SysBase>,d0
    da92:	|  |                     movea.l d0,a6
    da94:	|  |                     movea.l 92(sp),a1
    da98:	|  |                     jsr -690(a6)
        checker = NULL;
    da9c:	|  |                     clr.l 96(sp)
    }

    for (;;) {
        if (saveEncoding) {
    daa0:	|  >-------------------> move.w 1c914 <saveEncoding>,d0
    daa6:	|  |     /-------------- beq.w dbda <fileToStack+0x2ac>
            LONG tmp = FGetC(fp) ^ encode1;
    daaa:	|  |     |               move.l 100(sp),76(sp)
    dab0:	|  |     |               move.l 1c864 <DOSBase>,d0
    dab6:	|  |     |               movea.l d0,a6
    dab8:	|  |     |               move.l 76(sp),d1
    dabc:	|  |     |               jsr -306(a6)
    dac0:	|  |     |               move.l d0,72(sp)
    dac4:	|  |     |               move.l 72(sp),d0
    dac8:	|  |     |               move.b 1c912 <encode1>,d1
    dace:	|  |     |               ext.w d1
    dad0:	|  |     |               ext.l d1
    dad2:	|  |     |               move.l d0,d2
    dad4:	|  |     |               eor.l d1,d2
    dad6:	|  |     |               move.l d2,68(sp)

            if (tmp == -1) break;
    dada:	|  |     |               moveq #-1,d0
    dadc:	|  |     |               cmp.l 68(sp),d0
    dae0:	|  |  /--|-------------- beq.w dc70 <fileToStack+0x342>

            char i = (char) tmp;
    dae4:	|  |  |  |               move.b 71(sp),67(sp)

            switch (i) {
    daea:	|  |  |  |               move.b 67(sp),d0
    daee:	|  |  |  |               ext.w d0
    daf0:	|  |  |  |               movea.w d0,a0
    daf2:	|  |  |  |               moveq #2,d2
    daf4:	|  |  |  |               cmp.l a0,d2
    daf6:	|  |  |  |     /-------- beq.s db72 <fileToStack+0x244>
    daf8:	|  |  |  |     |         moveq #2,d0
    dafa:	|  |  |  |     |         cmp.l a0,d0
    dafc:	|  |  |  |  /--|-------- blt.w dba8 <fileToStack+0x27a>
    db00:	|  |  |  |  |  |         cmpa.w #0,a0
    db04:	|  |  |  |  |  |     /-- beq.s db10 <fileToStack+0x1e2>
    db06:	|  |  |  |  |  |     |   moveq #1,d2
    db08:	|  |  |  |  |  |     |   cmp.l a0,d2
    db0a:	|  |  |  |  |  |  /--|-- beq.s db4c <fileToStack+0x21e>
    db0c:	|  |  |  |  +--|--|--|-- bra.w dba8 <fileToStack+0x27a>
                case 0: {
                    char *g = readStringEncoded(fp);
    db10:	|  |  |  |  |  |  |  \-> move.l 100(sp),-(sp)
    db14:	|  |  |  |  |  |  |      jsr dc9c <readStringEncoded>
    db1a:	|  |  |  |  |  |  |      addq.l #4,sp
    db1c:	|  |  |  |  |  |  |      move.l d0,54(sp)
                    makeTextVar(&stringVar, g);
    db20:	|  |  |  |  |  |  |      move.l 54(sp),-(sp)
    db24:	|  |  |  |  |  |  |      lea 14(sp),a0
    db28:	|  |  |  |  |  |  |      move.l a0,-(sp)
    db2a:	|  |  |  |  |  |  |      jsr 14970 <makeTextVar>
    db30:	|  |  |  |  |  |  |      addq.l #8,sp
                    FreeVec(g);
    db32:	|  |  |  |  |  |  |      move.l 54(sp),50(sp)
    db38:	|  |  |  |  |  |  |      move.l 1c85c <SysBase>,d0
    db3e:	|  |  |  |  |  |  |      movea.l d0,a6
    db40:	|  |  |  |  |  |  |      movea.l 50(sp),a1
    db44:	|  |  |  |  |  |  |      jsr -690(a6)
                }
                break;
    db48:	|  |  |  |  |  |  |  /-- bra.w dc00 <fileToStack+0x2d2>

                case 1:
                    setVariable(&stringVar, SVT_INT, get4bytes(fp));
    db4c:	|  |  |  |  |  |  \--|-> move.l 100(sp),-(sp)
    db50:	|  |  |  |  |  |     |   jsr 718 <get4bytes>
    db56:	|  |  |  |  |  |     |   addq.l #4,sp
    db58:	|  |  |  |  |  |     |   move.l d0,-(sp)
    db5a:	|  |  |  |  |  |     |   pea 1 <_start+0x1>
    db5e:	|  |  |  |  |  |     |   lea 18(sp),a0
    db62:	|  |  |  |  |  |     |   move.l a0,-(sp)
    db64:	|  |  |  |  |  |     |   jsr 15040 <setVariable>
    db6a:	|  |  |  |  |  |     |   lea 12(sp),sp
                    break;
    db6e:	|  |  |  |  |  |     +-- bra.w dc00 <fileToStack+0x2d2>

                case 2:
                    setVariable(&stringVar, SVT_INT, FGetC(fp));
    db72:	|  |  |  |  |  \-----|-> move.l 100(sp),62(sp)
    db78:	|  |  |  |  |        |   move.l 1c864 <DOSBase>,d0
    db7e:	|  |  |  |  |        |   movea.l d0,a6
    db80:	|  |  |  |  |        |   move.l 62(sp),d1
    db84:	|  |  |  |  |        |   jsr -306(a6)
    db88:	|  |  |  |  |        |   move.l d0,58(sp)
    db8c:	|  |  |  |  |        |   move.l 58(sp),d0
    db90:	|  |  |  |  |        |   move.l d0,-(sp)
    db92:	|  |  |  |  |        |   pea 1 <_start+0x1>
    db96:	|  |  |  |  |        |   lea 18(sp),a0
    db9a:	|  |  |  |  |        |   move.l a0,-(sp)
    db9c:	|  |  |  |  |        |   jsr 15040 <setVariable>
    dba2:	|  |  |  |  |        |   lea 12(sp),sp
                    break;
    dba6:	|  |  |  |  |        +-- bra.s dc00 <fileToStack+0x2d2>

                default:
                    KPrintF(LOAD_ERROR "Corrupt custom data file:", filename);
    dba8:	|  |  |  |  \--------|-> move.l 124(sp),-(sp)
    dbac:	|  |  |  |           |   pea 1955d <PutChar+0x1913>
    dbb2:	|  |  |  |           |   jsr 17176 <KPrintF>
    dbb8:	|  |  |  |           |   addq.l #8,sp
                    Close(fp);
    dbba:	|  |  |  |           |   move.l 100(sp),46(sp)
    dbc0:	|  |  |  |           |   move.l 1c864 <DOSBase>,d0
    dbc6:	|  |  |  |           |   movea.l d0,a6
    dbc8:	|  |  |  |           |   move.l 46(sp),d1
    dbcc:	|  |  |  |           |   jsr -36(a6)
    dbd0:	|  |  |  |           |   move.l d0,42(sp)
                    return FALSE;
    dbd4:	|  |  |  |           |   clr.w d0
    dbd6:	+--|--|--|-----------|-- bra.w dc92 <fileToStack+0x364>
            }
        } else {
            char *line = readTextPlain(fp);
    dbda:	|  |  |  \-----------|-> move.l 100(sp),-(sp)
    dbde:	|  |  |              |   jsr dd62 <readTextPlain>
    dbe4:	|  |  |              |   addq.l #4,sp
    dbe6:	|  |  |              |   move.l d0,80(sp)
            if (!line) break;
    dbea:	|  |  |        /-----|-- beq.w dc74 <fileToStack+0x346>
            makeTextVar(&stringVar, line);
    dbee:	|  |  |        |     |   move.l 80(sp),-(sp)
    dbf2:	|  |  |        |     |   lea 14(sp),a0
    dbf6:	|  |  |        |     |   move.l a0,-(sp)
    dbf8:	|  |  |        |     |   jsr 14970 <makeTextVar>
    dbfe:	|  |  |        |     |   addq.l #8,sp
        }

        if (sH->first == NULL) {
    dc00:	|  |  |        |     \-> movea.l 128(sp),a0
    dc04:	|  |  |        |         move.l (a0),d0
    dc06:	|  |  |        |  /----- bne.s dc36 <fileToStack+0x308>
            // Adds to the TOP of the array... oops!
            if (!addVarToStackQuick(&stringVar, &sH->first)) return FALSE;
    dc08:	|  |  |        |  |      move.l 128(sp),d0
    dc0c:	|  |  |        |  |      move.l d0,-(sp)
    dc0e:	|  |  |        |  |      lea 14(sp),a0
    dc12:	|  |  |        |  |      move.l a0,-(sp)
    dc14:	|  |  |        |  |      jsr 14010 <addVarToStackQuick>
    dc1a:	|  |  |        |  |      addq.l #8,sp
    dc1c:	|  |  |        |  |      tst.w d0
    dc1e:	|  |  |        |  |  /-- bne.s dc24 <fileToStack+0x2f6>
    dc20:	|  |  |        |  |  |   clr.w d0
    dc22:	+--|--|--------|--|--|-- bra.s dc92 <fileToStack+0x364>
            sH->last = sH->first;
    dc24:	|  |  |        |  |  \-> movea.l 128(sp),a0
    dc28:	|  |  |        |  |      move.l (a0),d0
    dc2a:	|  |  |        |  |      movea.l 128(sp),a0
    dc2e:	|  |  |        |  |      move.l d0,4(a0)
    dc32:	|  +--|--------|--|----- bra.w daa0 <fileToStack+0x172>
        } else {
            // Adds to the END of the array... much better
            if (!addVarToStackQuick(&stringVar, &sH->last->next)) return FALSE;
    dc36:	|  |  |        |  \----> movea.l 128(sp),a0
    dc3a:	|  |  |        |         move.l 4(a0),d0
    dc3e:	|  |  |        |         addq.l #8,d0
    dc40:	|  |  |        |         move.l d0,-(sp)
    dc42:	|  |  |        |         lea 14(sp),a0
    dc46:	|  |  |        |         move.l a0,-(sp)
    dc48:	|  |  |        |         jsr 14010 <addVarToStackQuick>
    dc4e:	|  |  |        |         addq.l #8,sp
    dc50:	|  |  |        |         tst.w d0
    dc52:	|  |  |        |     /-- bne.s dc58 <fileToStack+0x32a>
    dc54:	|  |  |        |     |   clr.w d0
    dc56:	+--|--|--------|-----|-- bra.s dc92 <fileToStack+0x364>
            sH->last = sH->last->next;
    dc58:	|  |  |        |     \-> movea.l 128(sp),a0
    dc5c:	|  |  |        |         movea.l 4(a0),a0
    dc60:	|  |  |        |         move.l 8(a0),d0
    dc64:	|  |  |        |         movea.l 128(sp),a0
    dc68:	|  |  |        |         move.l d0,4(a0)
        if (saveEncoding) {
    dc6c:	|  \--|--------|-------- bra.w daa0 <fileToStack+0x172>
            if (tmp == -1) break;
    dc70:	|     \--------|-------> nop
    dc72:	|              |     /-- bra.s dc76 <fileToStack+0x348>
            if (!line) break;
    dc74:	|              \-----|-> nop
        }
    }
    Close(fp);
    dc76:	|                    \-> move.l 100(sp),38(sp)
    dc7c:	|                        move.l 1c864 <DOSBase>,d0
    dc82:	|                        movea.l d0,a6
    dc84:	|                        move.l 38(sp),d1
    dc88:	|                        jsr -36(a6)
    dc8c:	|                        move.l d0,34(sp)
    return TRUE;
    dc90:	|                        moveq #1,d0
}
    dc92:	\----------------------> move.l (sp)+,d2
    dc94:	                         movea.l (sp)+,a6
    dc96:	                         lea 112(sp),sp
    dc9a:	                         rts

0000dc9c <readStringEncoded>:

char *readStringEncoded(BPTR fp) {
    dc9c:	          lea -32(sp),sp
    dca0:	          move.l a6,-(sp)
    dca2:	          move.l d2,-(sp)
    int a, len = get2bytes(fp);
    dca4:	          move.l 44(sp),-(sp)
    dca8:	          jsr 6bc <get2bytes>
    dcae:	          addq.l #4,sp
    dcb0:	          move.l d0,32(sp)
    char *s = AllocVec(len + 1, MEMF_ANY);
    dcb4:	          move.l 32(sp),d0
    dcb8:	          addq.l #1,d0
    dcba:	          move.l d0,28(sp)
    dcbe:	          clr.l 24(sp)
    dcc2:	          move.l 1c85c <SysBase>,d0
    dcc8:	          movea.l d0,a6
    dcca:	          move.l 28(sp),d0
    dcce:	          move.l 24(sp),d1
    dcd2:	          jsr -684(a6)
    dcd6:	          move.l d0,20(sp)
    dcda:	          move.l 20(sp),d0
    dcde:	          move.l d0,16(sp)
    if (!s) return NULL;
    dce2:	      /-- bne.s dce8 <readStringEncoded+0x4c>
    dce4:	      |   moveq #0,d0
    dce6:	/-----|-- bra.s dd58 <readStringEncoded+0xbc>
    for (a = 0; a < len; a++) {
    dce8:	|     \-> clr.l 36(sp)
    dcec:	|     /-- bra.s dd3e <readStringEncoded+0xa2>
        s[a] = (char)(FGetC(fp) ^ encode1);
    dcee:	|  /--|-> move.l 44(sp),12(sp)
    dcf4:	|  |  |   move.l 1c864 <DOSBase>,d0
    dcfa:	|  |  |   movea.l d0,a6
    dcfc:	|  |  |   move.l 12(sp),d1
    dd00:	|  |  |   jsr -306(a6)
    dd04:	|  |  |   move.l d0,8(sp)
    dd08:	|  |  |   move.l 8(sp),d0
    dd0c:	|  |  |   move.l d0,d1
    dd0e:	|  |  |   move.b 1c912 <encode1>,d2
    dd14:	|  |  |   move.l 36(sp),d0
    dd18:	|  |  |   movea.l 16(sp),a0
    dd1c:	|  |  |   adda.l d0,a0
    dd1e:	|  |  |   move.b d1,d0
    dd20:	|  |  |   eor.b d2,d0
    dd22:	|  |  |   move.b d0,(a0)
        encode1 += encode2;
    dd24:	|  |  |   move.b 1c912 <encode1>,d0
    dd2a:	|  |  |   move.b d0,d1
    dd2c:	|  |  |   move.b 1c913 <encode2>,d0
    dd32:	|  |  |   add.b d1,d0
    dd34:	|  |  |   move.b d0,1c912 <encode1>
    for (a = 0; a < len; a++) {
    dd3a:	|  |  |   addq.l #1,36(sp)
    dd3e:	|  |  \-> move.l 36(sp),d0
    dd42:	|  |      cmp.l 32(sp),d0
    dd46:	|  \----- blt.s dcee <readStringEncoded+0x52>
    }
    s[len] = 0;
    dd48:	|         move.l 32(sp),d0
    dd4c:	|         movea.l 16(sp),a0
    dd50:	|         adda.l d0,a0
    dd52:	|         clr.b (a0)
    return s;
    dd54:	|         move.l 16(sp),d0
}
    dd58:	\-------> move.l (sp)+,d2
    dd5a:	          movea.l (sp)+,a6
    dd5c:	          lea 32(sp),sp
    dd60:	          rts

0000dd62 <readTextPlain>:

char *readTextPlain(BPTR fp) {
    dd62:	             lea -104(sp),sp
    dd66:	             movem.l d2-d4/a6,-(sp)
    ULONG startPos;
    int stringSize = 0;
    dd6a:	             clr.l 116(sp)
    BOOL keepGoing = TRUE;
    dd6e:	             move.w #1,114(sp)
    char gotChar;
    char *reply;

    startPos = Seek(fp, 0, OFFSET_CURRENT);
    dd74:	             move.l 124(sp),106(sp)
    dd7a:	             clr.l 102(sp)
    dd7e:	             clr.l 98(sp)
    dd82:	             move.l 1c864 <DOSBase>,d0
    dd88:	             movea.l d0,a6
    dd8a:	             move.l 106(sp),d1
    dd8e:	             move.l 102(sp),d2
    dd92:	             move.l 98(sp),d3
    dd96:	             jsr -66(a6)
    dd9a:	             move.l d0,94(sp)
    dd9e:	             move.l 94(sp),d0
    dda2:	             move.l d0,90(sp)

    LONG tmp;
    while (keepGoing) {
    dda6:	   /-------- bra.s ddea <readTextPlain+0x88>
        tmp = FGetC(fp);
    dda8:	/--|-------> move.l 124(sp),22(sp)
    ddae:	|  |         move.l 1c864 <DOSBase>,d0
    ddb4:	|  |         movea.l d0,a6
    ddb6:	|  |         move.l 22(sp),d1
    ddba:	|  |         jsr -306(a6)
    ddbe:	|  |         move.l d0,18(sp)
    ddc2:	|  |         move.l 18(sp),d0
    ddc6:	|  |         move.l d0,110(sp)
        char gotChar = (char) tmp;
    ddca:	|  |         move.b 113(sp),17(sp)
        if (gotChar == '\n' || tmp == -1) {
    ddd0:	|  |         cmpi.b #10,17(sp)
    ddd6:	|  |  /----- beq.s dde0 <readTextPlain+0x7e>
    ddd8:	|  |  |      moveq #-1,d0
    ddda:	|  |  |      cmp.l 110(sp),d0
    ddde:	|  |  |  /-- bne.s dde6 <readTextPlain+0x84>
            keepGoing = FALSE;
    dde0:	|  |  \--|-> clr.w 114(sp)
    dde4:	|  +-----|-- bra.s ddea <readTextPlain+0x88>
        } else {
            stringSize++;
    dde6:	|  |     \-> addq.l #1,116(sp)
    while (keepGoing) {
    ddea:	|  \-------> tst.w 114(sp)
    ddee:	\----------- bne.s dda8 <readTextPlain+0x46>
        }
    }

    if ((stringSize == 0) && tmp == -1) {
    ddf0:	             tst.l 116(sp)
    ddf4:	         /-- bne.s de04 <readTextPlain+0xa2>
    ddf6:	         |   moveq #-1,d0
    ddf8:	         |   cmp.l 110(sp),d0
    ddfc:	         +-- bne.s de04 <readTextPlain+0xa2>
        return NULL;
    ddfe:	         |   moveq #0,d0
    de00:	      /--|-- bra.w deea <readTextPlain+0x188>
    } else {
        Seek(fp, startPos, OFFSET_BEGINNING);
    de04:	      |  \-> move.l 124(sp),86(sp)
    de0a:	      |      move.l 90(sp),82(sp)
    de10:	      |      moveq #-1,d0
    de12:	      |      move.l d0,78(sp)
    de16:	      |      move.l 1c864 <DOSBase>,d0
    de1c:	      |      movea.l d0,a6
    de1e:	      |      move.l 86(sp),d1
    de22:	      |      move.l 82(sp),d2
    de26:	      |      move.l 78(sp),d3
    de2a:	      |      jsr -66(a6)
    de2e:	      |      move.l d0,74(sp)
        reply = AllocVec(stringSize + 1, MEMF_ANY);
    de32:	      |      move.l 116(sp),d0
    de36:	      |      addq.l #1,d0
    de38:	      |      move.l d0,70(sp)
    de3c:	      |      clr.l 66(sp)
    de40:	      |      move.l 1c85c <SysBase>,d0
    de46:	      |      movea.l d0,a6
    de48:	      |      move.l 70(sp),d0
    de4c:	      |      move.l 66(sp),d1
    de50:	      |      jsr -684(a6)
    de54:	      |      move.l d0,62(sp)
    de58:	      |      move.l 62(sp),d0
    de5c:	      |      move.l d0,58(sp)
        if (reply == NULL) return NULL;
    de60:	      |  /-- bne.s de68 <readTextPlain+0x106>
    de62:	      |  |   moveq #0,d0
    de64:	      +--|-- bra.w deea <readTextPlain+0x188>
        int bytesRead = FRead(fp, reply, 1, stringSize);
    de68:	      |  \-> move.l 124(sp),54(sp)
    de6e:	      |      move.l 58(sp),50(sp)
    de74:	      |      moveq #1,d0
    de76:	      |      move.l d0,46(sp)
    de7a:	      |      move.l 116(sp),42(sp)
    de80:	      |      move.l 1c864 <DOSBase>,d0
    de86:	      |      movea.l d0,a6
    de88:	      |      move.l 54(sp),d1
    de8c:	      |      move.l 50(sp),d2
    de90:	      |      move.l 46(sp),d3
    de94:	      |      move.l 42(sp),d4
    de98:	      |      jsr -324(a6)
    de9c:	      |      move.l d0,38(sp)
    dea0:	      |      move.l 38(sp),d0
    dea4:	      |      move.l d0,34(sp)
        if (bytesRead != stringSize) {
    dea8:	      |      move.l 34(sp),d0
    deac:	      |      cmp.l 116(sp),d0
    deb0:	      |  /-- beq.s dec0 <readTextPlain+0x15e>
            KPrintF("Reading error in readTextPlain.\n");
    deb2:	      |  |   pea 19592 <PutChar+0x1948>
    deb8:	      |  |   jsr 17176 <KPrintF>
    debe:	      |  |   addq.l #4,sp
        }
        FGetC(fp); // Skip the newline character
    dec0:	      |  \-> move.l 124(sp),30(sp)
    dec6:	      |      move.l 1c864 <DOSBase>,d0
    decc:	      |      movea.l d0,a6
    dece:	      |      move.l 30(sp),d1
    ded2:	      |      jsr -306(a6)
    ded6:	      |      move.l d0,26(sp)
        reply[stringSize] = 0;
    deda:	      |      move.l 116(sp),d0
    dede:	      |      movea.l 58(sp),a0
    dee2:	      |      adda.l d0,a0
    dee4:	      |      clr.b (a0)
    }

    return reply;
    dee6:	      |      move.l 58(sp),d0
}
    deea:	      \----> movem.l (sp)+,d2-d4/a6
    deee:	             lea 104(sp),sp
    def2:	             rts

0000def4 <stackToFile>:


BOOL stackToFile (char * filename, const struct variable * from) {
    def4:	                      lea -144(sp),sp
    def8:	                      movem.l d2-d3/a6,-(sp)
    BPTR fp = Open( filename, MODE_NEWFILE);
    defc:	                      move.l 160(sp),148(sp)
    df02:	                      move.l #1006,144(sp)
    df0a:	                      move.l 1c864 <DOSBase>,d0
    df10:	                      movea.l d0,a6
    df12:	                      move.l 148(sp),d1
    df16:	                      move.l 144(sp),d2
    df1a:	                      jsr -30(a6)
    df1e:	                      move.l d0,140(sp)
    df22:	                      move.l 140(sp),d0
    df26:	                      move.l d0,136(sp)

    if (!fp) {
    df2a:	                  /-- bne.s df44 <stackToFile+0x50>
        KPrintF("Can't create file", filename);
    df2c:	                  |   move.l 160(sp),-(sp)
    df30:	                  |   pea 195b3 <PutChar+0x1969>
    df36:	                  |   jsr 17176 <KPrintF>
    df3c:	                  |   addq.l #8,sp
        return FALSE;
    df3e:	                  |   clr.w d0
    df40:	/-----------------|-- bra.w e200 <stackToFile+0x30c>
    }

    struct variableStack * hereWeAre = from->varData.theStack->first;
    df44:	|                 \-> movea.l 164(sp),a0
    df48:	|                     movea.l 4(a0),a0
    df4c:	|                     move.l (a0),152(sp)

    encode1 = (unsigned char) saveEncoding & 255;
    df50:	|                     move.w 1c914 <saveEncoding>,d0
    df56:	|                     move.l d0,d0
    df58:	|                     move.b d0,1c912 <encode1>
    encode2 = (unsigned char) (saveEncoding >> 8);
    df5e:	|                     move.w 1c914 <saveEncoding>,d0
    df64:	|                     lsr.w #8,d0
    df66:	|                     move.l d0,d0
    df68:	|                     move.b d0,1c913 <encode2>

    if (saveEncoding) {
    df6e:	|                     move.w 1c914 <saveEncoding>,d0
    df74:	|                 /-- beq.s dfc6 <stackToFile+0xd2>
        FPrintf(fp, "[Custom data (encoded)]\r\n");
    df76:	|                 |   move.l 136(sp),116(sp)
    df7c:	|                 |   move.l #103501,112(sp)
    df84:	|                 |   moveq #99,d0
    df86:	|                 |   not.b d0
    df88:	|                 |   add.l sp,d0
    df8a:	|                 |   addi.l #-144,d0
    df90:	|                 |   move.l d0,108(sp)
    df94:	|                 |   move.l 1c864 <DOSBase>,d0
    df9a:	|                 |   movea.l d0,a6
    df9c:	|                 |   move.l 116(sp),d1
    dfa0:	|                 |   move.l 112(sp),d2
    dfa4:	|                 |   move.l 108(sp),d3
    dfa8:	|                 |   jsr -354(a6)
    dfac:	|                 |   move.l d0,104(sp)
        writeStringEncoded("UN�LO�CKED", fp);
    dfb0:	|                 |   move.l 136(sp),-(sp)
    dfb4:	|                 |   pea 194cc <PutChar+0x1882>
    dfba:	|                 |   jsr e20a <writeStringEncoded>
    dfc0:	|                 |   addq.l #8,sp
    dfc2:	|  /--------------|-- bra.w e1d8 <stackToFile+0x2e4>
    } else {
        FPrintf(fp, "[Custom data (ASCII)]\n");
    dfc6:	|  |              \-> move.l 136(sp),132(sp)
    dfcc:	|  |                  move.l #103527,128(sp)
    dfd4:	|  |                  moveq #99,d1
    dfd6:	|  |                  not.b d1
    dfd8:	|  |                  add.l sp,d1
    dfda:	|  |                  addi.l #-144,d1
    dfe0:	|  |                  move.l d1,124(sp)
    dfe4:	|  |                  move.l 1c864 <DOSBase>,d0
    dfea:	|  |                  movea.l d0,a6
    dfec:	|  |                  move.l 132(sp),d1
    dff0:	|  |                  move.l 128(sp),d2
    dff4:	|  |                  move.l 124(sp),d3
    dff8:	|  |                  jsr -354(a6)
    dffc:	|  |                  move.l d0,120(sp)
    }

    while (hereWeAre) {
    e000:	|  +----------------- bra.w e1d8 <stackToFile+0x2e4>
        if (saveEncoding) {
    e004:	|  |  /-------------> move.w 1c914 <saveEncoding>,d0
    e00a:	|  |  |     /-------- beq.w e15c <stackToFile+0x268>
            switch (hereWeAre->thisVar.varType) {
    e00e:	|  |  |     |         movea.l 152(sp),a0
    e012:	|  |  |     |         move.l (a0),d0
    e014:	|  |  |     |         moveq #1,d1
    e016:	|  |  |     |         cmp.l d0,d1
    e018:	|  |  |     |     /-- beq.s e068 <stackToFile+0x174>
    e01a:	|  |  |     |     |   moveq #3,d1
    e01c:	|  |  |     |     |   cmp.l d0,d1
    e01e:	|  |  |     |  /--|-- bne.w e12a <stackToFile+0x236>
                case SVT_STRING:
                    FPutC(fp, encode1);
    e022:	|  |  |     |  |  |   move.l 136(sp),76(sp)
    e028:	|  |  |     |  |  |   move.b 1c912 <encode1>,d0
    e02e:	|  |  |     |  |  |   ext.w d0
    e030:	|  |  |     |  |  |   movea.w d0,a0
    e032:	|  |  |     |  |  |   move.l a0,72(sp)
    e036:	|  |  |     |  |  |   move.l 1c864 <DOSBase>,d0
    e03c:	|  |  |     |  |  |   movea.l d0,a6
    e03e:	|  |  |     |  |  |   move.l 76(sp),d1
    e042:	|  |  |     |  |  |   move.l 72(sp),d2
    e046:	|  |  |     |  |  |   jsr -312(a6)
    e04a:	|  |  |     |  |  |   move.l d0,68(sp)
                    writeStringEncoded(hereWeAre->thisVar.varData.theString, fp);
    e04e:	|  |  |     |  |  |   movea.l 152(sp),a0
    e052:	|  |  |     |  |  |   move.l 4(a0),d0
    e056:	|  |  |     |  |  |   move.l 136(sp),-(sp)
    e05a:	|  |  |     |  |  |   move.l d0,-(sp)
    e05c:	|  |  |     |  |  |   jsr e20a <writeStringEncoded>
    e062:	|  |  |     |  |  |   addq.l #8,sp
                    break;
    e064:	|  |  |  /--|--|--|-- bra.w e1ce <stackToFile+0x2da>

                case SVT_INT:
                    // Small enough to be stored as a char
                    if (hereWeAre->thisVar.varData.intValue >= 0 && hereWeAre->thisVar.varData.intValue < 256) {
    e068:	|  |  |  |  |  |  \-> movea.l 152(sp),a0
    e06c:	|  |  |  |  |  |      move.l 4(a0),d0
    e070:	|  |  |  |  |  |  /-- bmi.s e0e0 <stackToFile+0x1ec>
    e072:	|  |  |  |  |  |  |   movea.l 152(sp),a0
    e076:	|  |  |  |  |  |  |   move.l 4(a0),d0
    e07a:	|  |  |  |  |  |  |   cmpi.l #255,d0
    e080:	|  |  |  |  |  |  +-- bgt.s e0e0 <stackToFile+0x1ec>
                        FPutC(fp, 2 ^ encode1);
    e082:	|  |  |  |  |  |  |   move.l 136(sp),64(sp)
    e088:	|  |  |  |  |  |  |   move.b 1c912 <encode1>,d0
    e08e:	|  |  |  |  |  |  |   eori.b #2,d0
    e092:	|  |  |  |  |  |  |   ext.w d0
    e094:	|  |  |  |  |  |  |   movea.w d0,a0
    e096:	|  |  |  |  |  |  |   move.l a0,60(sp)
    e09a:	|  |  |  |  |  |  |   move.l 1c864 <DOSBase>,d0
    e0a0:	|  |  |  |  |  |  |   movea.l d0,a6
    e0a2:	|  |  |  |  |  |  |   move.l 64(sp),d1
    e0a6:	|  |  |  |  |  |  |   move.l 60(sp),d2
    e0aa:	|  |  |  |  |  |  |   jsr -312(a6)
    e0ae:	|  |  |  |  |  |  |   move.l d0,56(sp)
                        FPutC(fp, hereWeAre->thisVar.varData.intValue);
    e0b2:	|  |  |  |  |  |  |   move.l 136(sp),52(sp)
    e0b8:	|  |  |  |  |  |  |   movea.l 152(sp),a0
    e0bc:	|  |  |  |  |  |  |   move.l 4(a0),48(sp)
    e0c2:	|  |  |  |  |  |  |   move.l 1c864 <DOSBase>,d0
    e0c8:	|  |  |  |  |  |  |   movea.l d0,a6
    e0ca:	|  |  |  |  |  |  |   move.l 52(sp),d1
    e0ce:	|  |  |  |  |  |  |   move.l 48(sp),d2
    e0d2:	|  |  |  |  |  |  |   jsr -312(a6)
    e0d6:	|  |  |  |  |  |  |   move.l d0,44(sp)
    e0da:	|  |  |  |  |  |  |   nop
                    } else {
                        FPutC(fp, 1 ^ encode1);
                        put4bytes(hereWeAre->thisVar.varData.intValue, fp);
                    }
                    break;
    e0dc:	|  |  |  +--|--|--|-- bra.w e1ce <stackToFile+0x2da>
                        FPutC(fp, 1 ^ encode1);
    e0e0:	|  |  |  |  |  |  \-> move.l 136(sp),40(sp)
    e0e6:	|  |  |  |  |  |      move.b 1c912 <encode1>,d0
    e0ec:	|  |  |  |  |  |      eori.b #1,d0
    e0f0:	|  |  |  |  |  |      ext.w d0
    e0f2:	|  |  |  |  |  |      movea.w d0,a0
    e0f4:	|  |  |  |  |  |      move.l a0,36(sp)
    e0f8:	|  |  |  |  |  |      move.l 1c864 <DOSBase>,d0
    e0fe:	|  |  |  |  |  |      movea.l d0,a6
    e100:	|  |  |  |  |  |      move.l 40(sp),d1
    e104:	|  |  |  |  |  |      move.l 36(sp),d2
    e108:	|  |  |  |  |  |      jsr -312(a6)
    e10c:	|  |  |  |  |  |      move.l d0,32(sp)
                        put4bytes(hereWeAre->thisVar.varData.intValue, fp);
    e110:	|  |  |  |  |  |      movea.l 152(sp),a0
    e114:	|  |  |  |  |  |      move.l 4(a0),d0
    e118:	|  |  |  |  |  |      move.l 136(sp),-(sp)
    e11c:	|  |  |  |  |  |      move.l d0,-(sp)
    e11e:	|  |  |  |  |  |      jsr 958 <put4bytes>
    e124:	|  |  |  |  |  |      addq.l #8,sp
                    break;
    e126:	|  |  |  +--|--|----- bra.w e1ce <stackToFile+0x2da>

                default:
                    KPrintF("Can't create an encoded custom data file containing anything other than numbers and strings", filename);
    e12a:	|  |  |  |  |  \----> move.l 160(sp),-(sp)
    e12e:	|  |  |  |  |         pea 195c5 <PutChar+0x197b>
    e134:	|  |  |  |  |         jsr 17176 <KPrintF>
    e13a:	|  |  |  |  |         addq.l #8,sp
                    Close(fp);
    e13c:	|  |  |  |  |         move.l 136(sp),28(sp)
    e142:	|  |  |  |  |         move.l 1c864 <DOSBase>,d0
    e148:	|  |  |  |  |         movea.l d0,a6
    e14a:	|  |  |  |  |         move.l 28(sp),d1
    e14e:	|  |  |  |  |         jsr -36(a6)
    e152:	|  |  |  |  |         move.l d0,24(sp)
                    return FALSE;
    e156:	|  |  |  |  |         clr.w d0
    e158:	+--|--|--|--|-------- bra.w e200 <stackToFile+0x30c>
            }
        } else {
            char * makeSureItsText = getTextFromAnyVar(&hereWeAre->thisVar);
    e15c:	|  |  |  |  \-------> move.l 152(sp),d0
    e160:	|  |  |  |            move.l d0,-(sp)
    e162:	|  |  |  |            jsr 14d24 <getTextFromAnyVar>
    e168:	|  |  |  |            addq.l #4,sp
    e16a:	|  |  |  |            move.l d0,100(sp)
            if (makeSureItsText == NULL) break;
    e16e:	|  |  |  |     /----- beq.s e1e2 <stackToFile+0x2ee>
            FPrintf(fp, "%s\n", *makeSureItsText);
    e170:	|  |  |  |     |      movea.l 100(sp),a0
    e174:	|  |  |  |     |      move.b (a0),d0
    e176:	|  |  |  |     |      ext.w d0
    e178:	|  |  |  |     |      movea.w d0,a0
    e17a:	|  |  |  |     |      move.l a0,12(sp)
    e17e:	|  |  |  |     |      move.l 136(sp),96(sp)
    e184:	|  |  |  |     |      move.l #103969,92(sp)
    e18c:	|  |  |  |     |      moveq #99,d0
    e18e:	|  |  |  |     |      not.b d0
    e190:	|  |  |  |     |      add.l sp,d0
    e192:	|  |  |  |     |      addi.l #-144,d0
    e198:	|  |  |  |     |      move.l d0,88(sp)
    e19c:	|  |  |  |     |      move.l 1c864 <DOSBase>,d0
    e1a2:	|  |  |  |     |      movea.l d0,a6
    e1a4:	|  |  |  |     |      move.l 96(sp),d1
    e1a8:	|  |  |  |     |      move.l 92(sp),d2
    e1ac:	|  |  |  |     |      move.l 88(sp),d3
    e1b0:	|  |  |  |     |      jsr -354(a6)
    e1b4:	|  |  |  |     |      move.l d0,84(sp)
            FreeVec(makeSureItsText);
    e1b8:	|  |  |  |     |      move.l 100(sp),80(sp)
    e1be:	|  |  |  |     |      move.l 1c85c <SysBase>,d0
    e1c4:	|  |  |  |     |      movea.l d0,a6
    e1c6:	|  |  |  |     |      movea.l 80(sp),a1
    e1ca:	|  |  |  |     |      jsr -690(a6)
        }

        hereWeAre = hereWeAre->next;
    e1ce:	|  |  |  \-----|----> movea.l 152(sp),a0
    e1d2:	|  |  |        |      move.l 8(a0),152(sp)
    while (hereWeAre) {
    e1d8:	|  \--|--------|----> tst.l 152(sp)
    e1dc:	|     \--------|----- bne.w e004 <stackToFile+0x110>
    e1e0:	|              |  /-- bra.s e1e4 <stackToFile+0x2f0>
            if (makeSureItsText == NULL) break;
    e1e2:	|              \--|-> nop
    }
    Close(fp);
    e1e4:	|                 \-> move.l 136(sp),20(sp)
    e1ea:	|                     move.l 1c864 <DOSBase>,d0
    e1f0:	|                     movea.l d0,a6
    e1f2:	|                     move.l 20(sp),d1
    e1f6:	|                     jsr -36(a6)
    e1fa:	|                     move.l d0,16(sp)
    return TRUE;
    e1fe:	|                     moveq #1,d0
}
    e200:	\-------------------> movem.l (sp)+,d2-d3/a6
    e204:	                      lea 144(sp),sp
    e208:	                      rts

0000e20a <writeStringEncoded>:

void writeStringEncoded (const char * s, BPTR fp) {
    e20a:	       lea -20(sp),sp
    e20e:	       move.l a6,-(sp)
    e210:	       move.l d2,-(sp)
	int a, len = strlen (s);
    e212:	       move.l 32(sp),-(sp)
    e216:	       jsr 13c3a <strlen>
    e21c:	       addq.l #4,sp
    e21e:	       move.l d0,20(sp)

	put2bytes (len, fp);
    e222:	       move.l 36(sp),-(sp)
    e226:	       move.l 24(sp),-(sp)
    e22a:	       jsr 8d0 <put2bytes>
    e230:	       addq.l #8,sp
	for (a = 0; a < len; a ++) {
    e232:	       clr.l 24(sp)
    e236:	   /-- bra.s e28c <writeStringEncoded+0x82>
		FPutC (fp, s[a] ^ encode1);
    e238:	/--|-> move.l 36(sp),16(sp)
    e23e:	|  |   move.l 24(sp),d0
    e242:	|  |   movea.l 32(sp),a0
    e246:	|  |   adda.l d0,a0
    e248:	|  |   move.b (a0),d1
    e24a:	|  |   move.b 1c912 <encode1>,d0
    e250:	|  |   eor.b d1,d0
    e252:	|  |   ext.w d0
    e254:	|  |   movea.w d0,a0
    e256:	|  |   move.l a0,12(sp)
    e25a:	|  |   move.l 1c864 <DOSBase>,d0
    e260:	|  |   movea.l d0,a6
    e262:	|  |   move.l 16(sp),d1
    e266:	|  |   move.l 12(sp),d2
    e26a:	|  |   jsr -312(a6)
    e26e:	|  |   move.l d0,8(sp)
		encode1 += encode2;
    e272:	|  |   move.b 1c912 <encode1>,d0
    e278:	|  |   move.b d0,d1
    e27a:	|  |   move.b 1c913 <encode2>,d0
    e280:	|  |   add.b d1,d0
    e282:	|  |   move.b d0,1c912 <encode1>
	for (a = 0; a < len; a ++) {
    e288:	|  |   addq.l #1,24(sp)
    e28c:	|  \-> move.l 24(sp),d0
    e290:	|      cmp.l 20(sp),d0
    e294:	\----- blt.s e238 <writeStringEncoded+0x2e>
	}
}
    e296:	       nop
    e298:	       nop
    e29a:	       move.l (sp)+,d2
    e29c:	       movea.l (sp)+,a6
    e29e:	       lea 20(sp),sp
    e2a2:	       rts

0000e2a4 <failSecurityCheck>:

#define builtIn(a) 			static enum builtReturn builtIn_ ## a (int numParams, struct loadedFunction * fun)

#define UNUSEDALL		 	(void) (0 && sizeof(numParams) && sizeof (fun));

BOOL failSecurityCheck(char * fn) {
    e2a4:	                   subq.l #4,sp
	if (fn == NULL) return TRUE;
    e2a6:	                   tst.l 8(sp)
    e2aa:	               /-- bne.s e2b0 <failSecurityCheck+0xc>
    e2ac:	               |   moveq #1,d0
    e2ae:	/--------------|-- bra.s e32e <failSecurityCheck+0x8a>

	int a = 0;
    e2b0:	|              \-> clr.l (sp)

	while (fn[a]) {
    e2b2:	|     /----------- bra.s e320 <failSecurityCheck+0x7c>
		switch (fn[a]) {
    e2b4:	|  /--|----------> move.l (sp),d0
    e2b6:	|  |  |            movea.l 8(sp),a0
    e2ba:	|  |  |            adda.l d0,a0
    e2bc:	|  |  |            move.b (a0),d0
    e2be:	|  |  |            ext.w d0
    e2c0:	|  |  |            movea.w d0,a0
    e2c2:	|  |  |            moveq #124,d0
    e2c4:	|  |  |            cmp.l a0,d0
    e2c6:	|  |  |     /----- beq.s e308 <failSecurityCheck+0x64>
    e2c8:	|  |  |     |      moveq #124,d1
    e2ca:	|  |  |     |      cmp.l a0,d1
    e2cc:	|  |  |  /--|----- blt.s e31e <failSecurityCheck+0x7a>
    e2ce:	|  |  |  |  |      moveq #92,d0
    e2d0:	|  |  |  |  |      cmp.l a0,d0
    e2d2:	|  |  |  |  +----- beq.s e308 <failSecurityCheck+0x64>
    e2d4:	|  |  |  |  |      moveq #92,d1
    e2d6:	|  |  |  |  |      cmp.l a0,d1
    e2d8:	|  |  |  +--|----- blt.s e31e <failSecurityCheck+0x7a>
    e2da:	|  |  |  |  |      moveq #60,d0
    e2dc:	|  |  |  |  |      cmp.l a0,d0
    e2de:	|  |  |  |  |  /-- blt.s e2fe <failSecurityCheck+0x5a>
    e2e0:	|  |  |  |  |  |   moveq #34,d1
    e2e2:	|  |  |  |  |  |   cmp.l a0,d1
    e2e4:	|  |  |  +--|--|-- bgt.s e31e <failSecurityCheck+0x7a>
    e2e6:	|  |  |  |  |  |   moveq #-34,d1
    e2e8:	|  |  |  |  |  |   add.l a0,d1
    e2ea:	|  |  |  |  |  |   move.l #83894529,d0
    e2f0:	|  |  |  |  |  |   lsr.l d1,d0
    e2f2:	|  |  |  |  |  |   moveq #1,d1
    e2f4:	|  |  |  |  |  |   and.l d1,d0
    e2f6:	|  |  |  |  |  |   sne d0
    e2f8:	|  |  |  |  |  |   neg.b d0
    e2fa:	|  |  |  |  +--|-- bne.s e308 <failSecurityCheck+0x64>
    e2fc:	|  |  |  +--|--|-- bra.s e31e <failSecurityCheck+0x7a>
    e2fe:	|  |  |  |  |  \-> lea -62(a0),a0
    e302:	|  |  |  |  |      moveq #1,d0
    e304:	|  |  |  |  |      cmp.l a0,d0
    e306:	|  |  |  +--|----- bcs.s e31e <failSecurityCheck+0x7a>
			case '?':
			case '"':
			case '<':
			case '>':
			case '|':
				KPrintF("Filenames may not contain the following characters: \n\n\\  /  :  \"  <  >  |  ?  *\n\nConsequently, the following filename is not allowed:", fn);
    e308:	|  |  |  |  \----> move.l 8(sp),-(sp)
    e30c:	|  |  |  |         pea 19625 <PutChar+0x19db>
    e312:	|  |  |  |         jsr 17176 <KPrintF>
    e318:	|  |  |  |         addq.l #8,sp
				return TRUE;
    e31a:	|  |  |  |         moveq #1,d0
    e31c:	+--|--|--|-------- bra.s e32e <failSecurityCheck+0x8a>
		}
		a++;
    e31e:	|  |  |  \-------> addq.l #1,(sp)
	while (fn[a]) {
    e320:	|  |  \----------> move.l (sp),d0
    e322:	|  |               movea.l 8(sp),a0
    e326:	|  |               adda.l d0,a0
    e328:	|  |               move.b (a0),d0
    e32a:	|  \-------------- bne.s e2b4 <failSecurityCheck+0x10>
	}
	return FALSE;
    e32c:	|                  clr.w d0
}
    e32e:	\----------------> addq.l #4,sp
    e330:	                   rts

0000e332 <sayCore>:

static enum builtReturn sayCore (int numParams, struct loadedFunction * fun, BOOL sayIt)
{
    e332:	             lea -24(sp),sp
    e336:	             move.l a6,-(sp)
    e338:	             move.l 40(sp),d0
    e33c:	             move.w d0,d0
    e33e:	             move.w d0,6(sp)
	int fileNum = -1;
    e342:	             moveq #-1,d0
    e344:	             move.l d0,12(sp)
	char * newText;
	int objT, p;
	killSpeechTimers ();
    e348:	             jsr 6274 <killSpeechTimers>

	switch (numParams) {
    e34e:	             moveq #2,d0
    e350:	             cmp.l 32(sp),d0
    e354:	      /----- beq.s e398 <sayCore+0x66>
    e356:	      |      moveq #3,d0
    e358:	      |      cmp.l 32(sp),d0
    e35c:	/-----|----- bne.w e47a <sayCore+0x148>
		case 3:
			if (! getValueType (&fileNum, SVT_FILE, &fun->stack->thisVar)) return BR_ERROR;
    e360:	|     |      movea.l 36(sp),a0
    e364:	|     |      move.l 24(a0),d0
    e368:	|     |      move.l d0,-(sp)
    e36a:	|     |      pea 5 <_start+0x5>
    e36e:	|     |      lea 20(sp),a0
    e372:	|     |      move.l a0,-(sp)
    e374:	|     |      jsr 1474e <getValueType>
    e37a:	|     |      lea 12(sp),sp
    e37e:	|     |      tst.w d0
    e380:	|     |  /-- bne.s e388 <sayCore+0x56>
    e382:	|     |  |   moveq #1,d0
    e384:	|  /--|--|-- bra.w e48a <sayCore+0x158>
			trimStack (&fun -> stack);
    e388:	|  |  |  \-> moveq #24,d0
    e38a:	|  |  |      add.l 36(sp),d0
    e38e:	|  |  |      move.l d0,-(sp)
    e390:	|  |  |      jsr 150d2 <trimStack>
    e396:	|  |  |      addq.l #4,sp
			[[fallthrough]];

		case 2:
			newText = getTextFromAnyVar (&(fun -> stack->thisVar));
    e398:	|  |  \----> movea.l 36(sp),a0
    e39c:	|  |         move.l 24(a0),d0
    e3a0:	|  |         move.l d0,-(sp)
    e3a2:	|  |         jsr 14d24 <getTextFromAnyVar>
    e3a8:	|  |         addq.l #4,sp
    e3aa:	|  |         move.l d0,24(sp)
			if (! newText) return BR_ERROR;
    e3ae:	|  |     /-- bne.s e3b6 <sayCore+0x84>
    e3b0:	|  |     |   moveq #1,d0
    e3b2:	|  +-----|-- bra.w e48a <sayCore+0x158>
			trimStack (&fun -> stack);
    e3b6:	|  |     \-> moveq #24,d0
    e3b8:	|  |         add.l 36(sp),d0
    e3bc:	|  |         move.l d0,-(sp)
    e3be:	|  |         jsr 150d2 <trimStack>
    e3c4:	|  |         addq.l #4,sp
			if (! getValueType(&objT, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e3c6:	|  |         movea.l 36(sp),a0
    e3ca:	|  |         move.l 24(a0),d0
    e3ce:	|  |         move.l d0,-(sp)
    e3d0:	|  |         pea 7 <_start+0x7>
    e3d4:	|  |         lea 16(sp),a0
    e3d8:	|  |         move.l a0,-(sp)
    e3da:	|  |         jsr 1474e <getValueType>
    e3e0:	|  |         lea 12(sp),sp
    e3e4:	|  |         tst.w d0
    e3e6:	|  |     /-- bne.s e3ee <sayCore+0xbc>
    e3e8:	|  |     |   moveq #1,d0
    e3ea:	|  +-----|-- bra.w e48a <sayCore+0x158>
			if (! getValueType(&objT, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e3ee:	|  |     \-> movea.l 36(sp),a0
    e3f2:	|  |         move.l 24(a0),d0
    e3f6:	|  |         move.l d0,-(sp)
    e3f8:	|  |         pea 7 <_start+0x7>
    e3fc:	|  |         lea 16(sp),a0
    e400:	|  |         move.l a0,-(sp)
    e402:	|  |         jsr 1474e <getValueType>
    e408:	|  |         lea 12(sp),sp
    e40c:	|  |         tst.w d0
    e40e:	|  |     /-- bne.s e414 <sayCore+0xe2>
    e410:	|  |     |   moveq #1,d0
    e412:	|  +-----|-- bra.s e48a <sayCore+0x158>
			trimStack (&fun -> stack);
    e414:	|  |     \-> moveq #24,d0
    e416:	|  |         add.l 36(sp),d0
    e41a:	|  |         move.l d0,-(sp)
    e41c:	|  |         jsr 150d2 <trimStack>
    e422:	|  |         addq.l #4,sp
			p = wrapSpeech (newText, objT, fileNum, sayIt);
    e424:	|  |         movea.w 6(sp),a0
    e428:	|  |         move.l 12(sp),d1
    e42c:	|  |         move.l 8(sp),d0
    e430:	|  |         move.l a0,-(sp)
    e432:	|  |         move.l d1,-(sp)
    e434:	|  |         move.l d0,-(sp)
    e436:	|  |         move.l 36(sp),-(sp)
    e43a:	|  |         jsr 822e <wrapSpeech>
    e440:	|  |         lea 16(sp),sp
    e444:	|  |         move.l d0,20(sp)
			fun -> timeLeft = p;
    e448:	|  |         movea.l 36(sp),a0
    e44c:	|  |         move.l 20(sp),12(a0)
			//debugOut ("BUILTIN: sayCore: %s (%i)\n", newText, p);
			fun -> isSpeech = TRUE;
    e452:	|  |         movea.l 36(sp),a0
    e456:	|  |         move.w #1,50(a0)
			FreeVec(newText);
    e45c:	|  |         move.l 24(sp),16(sp)
    e462:	|  |         move.l 1c85c <SysBase>,d0
    e468:	|  |         movea.l d0,a6
    e46a:	|  |         movea.l 16(sp),a1
    e46e:	|  |         jsr -690(a6)
			newText = NULL;
    e472:	|  |         clr.l 24(sp)
			return BR_KEEP_AND_PAUSE;
    e476:	|  |         moveq #0,d0
    e478:	|  +-------- bra.s e48a <sayCore+0x158>
	}

	KPrintF("Function should have either 2 or 3 parameters");
    e47a:	\--|-------> pea 196ab <PutChar+0x1a61>
    e480:	   |         jsr 17176 <KPrintF>
    e486:	   |         addq.l #4,sp
	return BR_ERROR;
    e488:	   |         moveq #1,d0
}
    e48a:	   \-------> movea.l (sp)+,a6
    e48c:	             lea 24(sp),sp
    e490:	             rts

0000e492 <builtIn_say>:

builtIn(say)
{
	UNUSEDALL
	return sayCore (numParams, fun, TRUE);
    e492:	pea 1 <_start+0x1>
    e496:	move.l 12(sp),-(sp)
    e49a:	move.l 12(sp),-(sp)
    e49e:	jsr e332 <sayCore>
    e4a4:	lea 12(sp),sp
}
    e4a8:	rts

0000e4aa <builtIn_think>:

builtIn(think)
{
	UNUSEDALL
	return sayCore (numParams, fun, FALSE);
    e4aa:	clr.l -(sp)
    e4ac:	move.l 12(sp),-(sp)
    e4b0:	move.l 12(sp),-(sp)
    e4b4:	jsr e332 <sayCore>
    e4ba:	lea 12(sp),sp
}
    e4be:	rts

0000e4c0 <builtIn_freeze>:

builtIn(freeze)
{
	UNUSEDALL
	freeze ();
    e4c0:	jsr 1511a <freeze>
	freezeSubs (); 
    e4c6:	jsr 5864 <freezeSubs>
	fun -> freezerLevel = 0;
    e4cc:	movea.l 8(sp),a0
    e4d0:	clr.b 56(a0)
	return BR_CONTINUE;
    e4d4:	moveq #2,d0
}
    e4d6:	rts

0000e4d8 <builtIn_unfreeze>:

builtIn(unfreeze)
{
	UNUSEDALL
	unfreeze ();
    e4d8:	jsr 152f2 <unfreeze>
	unfreezeSubs (); 
    e4de:	jsr 6cb6 <unfreezeSubs>
	return BR_CONTINUE;
    e4e4:	moveq #2,d0
}
    e4e6:	rts

0000e4e8 <builtIn_howFrozen>:
builtIn(howFrozen)
{
	UNUSEDALL
	/*setVariable (&fun -> reg, SVT_INT, howFrozen ());
	return BR_CONTINUE; Amiga todo implement*/
}
    e4e8:	nop
    e4ea:	rts

0000e4ec <builtIn_setCursor>:

builtIn(setCursor)
{
    e4ec:	subq.l #4,sp
	UNUSEDALL
	struct personaAnimation * aa = getAnimationFromVar (&(fun -> stack -> thisVar));
    e4ee:	movea.l 12(sp),a0
    e4f2:	move.l 24(a0),d0
    e4f6:	move.l d0,-(sp)
    e4f8:	jsr 14c26 <getAnimationFromVar>
    e4fe:	addq.l #4,sp
    e500:	move.l d0,(sp)
	pickAnimCursor (aa);
    e502:	move.l (sp),-(sp)
    e504:	jsr d6c <pickAnimCursor>
    e50a:	addq.l #4,sp
	trimStack (&fun -> stack);
    e50c:	moveq #24,d0
    e50e:	add.l 12(sp),d0
    e512:	move.l d0,-(sp)
    e514:	jsr 150d2 <trimStack>
    e51a:	addq.l #4,sp
	return BR_CONTINUE;
    e51c:	moveq #2,d0
}
    e51e:	addq.l #4,sp
    e520:	rts

0000e522 <builtIn_getMouseX>:

builtIn(getMouseX)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseX + cameraX);
    e522:	move.l 1c818 <input+0xa>,d1
    e528:	move.l 1c916 <cameraX>,d0
    e52e:	add.l d0,d1
    e530:	moveq #28,d0
    e532:	add.l 8(sp),d0
    e536:	move.l d1,-(sp)
    e538:	pea 1 <_start+0x1>
    e53c:	move.l d0,-(sp)
    e53e:	jsr 15040 <setVariable>
    e544:	lea 12(sp),sp
	return BR_CONTINUE;
    e548:	moveq #2,d0
}
    e54a:	rts

0000e54c <builtIn_getMouseY>:

builtIn(getMouseY)
{

	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseY + cameraY);
    e54c:	move.l 1c81c <input+0xe>,d1
    e552:	move.l 1c91a <cameraY>,d0
    e558:	add.l d0,d1
    e55a:	moveq #28,d0
    e55c:	add.l 8(sp),d0
    e560:	move.l d1,-(sp)
    e562:	pea 1 <_start+0x1>
    e566:	move.l d0,-(sp)
    e568:	jsr 15040 <setVariable>
    e56e:	lea 12(sp),sp
	return BR_CONTINUE;
    e572:	moveq #2,d0
}
    e574:	rts

0000e576 <builtIn_getMouseScreenX>:

builtIn(getMouseScreenX)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseX*cameraZoom);
    e576:	move.l 1c818 <input+0xa>,d0
    e57c:	move.l d0,-(sp)
    e57e:	jsr 175b2 <__floatsisf>
    e584:	addq.l #4,sp
    e586:	move.l d0,d1
    e588:	move.l 1c1fa <cameraZoom>,d0
    e58e:	move.l d0,-(sp)
    e590:	move.l d1,-(sp)
    e592:	jsr 17664 <__mulsf3>
    e598:	addq.l #8,sp
    e59a:	move.l d0,-(sp)
    e59c:	jsr 1754a <__fixsfsi>
    e5a2:	addq.l #4,sp
    e5a4:	move.l d0,d1
    e5a6:	moveq #28,d0
    e5a8:	add.l 8(sp),d0
    e5ac:	move.l d1,-(sp)
    e5ae:	pea 1 <_start+0x1>
    e5b2:	move.l d0,-(sp)
    e5b4:	jsr 15040 <setVariable>
    e5ba:	lea 12(sp),sp
	return BR_CONTINUE;
    e5be:	moveq #2,d0
}
    e5c0:	rts

0000e5c2 <builtIn_getMouseScreenY>:

builtIn(getMouseScreenY)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseY*cameraZoom);
    e5c2:	move.l 1c81c <input+0xe>,d0
    e5c8:	move.l d0,-(sp)
    e5ca:	jsr 175b2 <__floatsisf>
    e5d0:	addq.l #4,sp
    e5d2:	move.l d0,d1
    e5d4:	move.l 1c1fa <cameraZoom>,d0
    e5da:	move.l d0,-(sp)
    e5dc:	move.l d1,-(sp)
    e5de:	jsr 17664 <__mulsf3>
    e5e4:	addq.l #8,sp
    e5e6:	move.l d0,-(sp)
    e5e8:	jsr 1754a <__fixsfsi>
    e5ee:	addq.l #4,sp
    e5f0:	move.l d0,d1
    e5f2:	moveq #28,d0
    e5f4:	add.l 8(sp),d0
    e5f8:	move.l d1,-(sp)
    e5fa:	pea 1 <_start+0x1>
    e5fe:	move.l d0,-(sp)
    e600:	jsr 15040 <setVariable>
    e606:	lea 12(sp),sp
	return BR_CONTINUE;
    e60a:	moveq #2,d0
}
    e60c:	rts

0000e60e <builtIn_getStatusText>:

builtIn(getStatusText)
{
	UNUSEDALL
	makeTextVar (&fun -> reg, statusBarText ());
    e60e:	jsr 7ce2 <statusBarText>
    e614:	move.l d0,d1
    e616:	moveq #28,d0
    e618:	add.l 8(sp),d0
    e61c:	move.l d1,-(sp)
    e61e:	move.l d0,-(sp)
    e620:	jsr 14970 <makeTextVar>
    e626:	addq.l #8,sp
	return BR_CONTINUE;
    e628:	moveq #2,d0
}
    e62a:	rts

0000e62c <builtIn_getMatchingFiles>:

builtIn(getMatchingFiles)
{
    e62c:	       lea -20(sp),sp
    e630:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    e632:	       movea.l 32(sp),a0
    e636:	       move.l 24(a0),d0
    e63a:	       move.l d0,-(sp)
    e63c:	       jsr 14d24 <getTextFromAnyVar>
    e642:	       addq.l #4,sp
    e644:	       move.l d0,20(sp)
	if (! newText) return BR_ERROR;
    e648:	   /-- bne.s e650 <builtIn_getMatchingFiles+0x24>
    e64a:	   |   moveq #1,d0
    e64c:	/--|-- bra.w e712 <builtIn_getMatchingFiles+0xe6>
	trimStack (&fun -> stack);
    e650:	|  \-> moveq #24,d0
    e652:	|      add.l 32(sp),d0
    e656:	|      move.l d0,-(sp)
    e658:	|      jsr 150d2 <trimStack>
    e65e:	|      addq.l #4,sp
	unlinkVar (&fun -> reg);
    e660:	|      moveq #28,d0
    e662:	|      add.l 32(sp),d0
    e666:	|      move.l d0,-(sp)
    e668:	|      jsr 1499c <unlinkVar>
    e66e:	|      addq.l #4,sp

	// Return value
	fun -> reg.varType = SVT_STACK;
    e670:	|      movea.l 32(sp),a0
    e674:	|      moveq #6,d0
    e676:	|      move.l d0,28(a0)
	fun -> reg.varData.theStack = AllocVec(sizeof( struct stackHandler),MEMF_ANY);
    e67a:	|      moveq #12,d0
    e67c:	|      move.l d0,16(sp)
    e680:	|      clr.l 12(sp)
    e684:	|      move.l 1c85c <SysBase>,d0
    e68a:	|      movea.l d0,a6
    e68c:	|      move.l 16(sp),d0
    e690:	|      move.l 12(sp),d1
    e694:	|      jsr -684(a6)
    e698:	|      move.l d0,8(sp)
    e69c:	|      move.l 8(sp),d0
    e6a0:	|      movea.l 32(sp),a0
    e6a4:	|      move.l d0,32(a0)
	if (!(&fun -> reg.varData.theStack)) return BR_ERROR;
    e6a8:	|      moveq #32,d0
    e6aa:	|      add.l 32(sp),d0
    e6ae:	|  /-- bne.s e6b4 <builtIn_getMatchingFiles+0x88>
    e6b0:	|  |   moveq #1,d0
    e6b2:	+--|-- bra.s e712 <builtIn_getMatchingFiles+0xe6>
	fun -> reg.varData.theStack -> first = NULL;
    e6b4:	|  \-> movea.l 32(sp),a0
    e6b8:	|      movea.l 32(a0),a0
    e6bc:	|      clr.l (a0)
	fun -> reg.varData.theStack -> last = NULL;
    e6be:	|      movea.l 32(sp),a0
    e6c2:	|      movea.l 32(a0),a0
    e6c6:	|      clr.l 4(a0)
	fun -> reg.varData.theStack -> timesUsed = 1;
    e6ca:	|      movea.l 32(sp),a0
    e6ce:	|      movea.l 32(a0),a0
    e6d2:	|      moveq #1,d0
    e6d4:	|      move.l d0,8(a0)
	if (! getSavedGamesStack (fun -> reg.varData.theStack, newText)) return BR_ERROR;
    e6d8:	|      movea.l 32(sp),a0
    e6dc:	|      move.l 32(a0),d0
    e6e0:	|      move.l 20(sp),-(sp)
    e6e4:	|      move.l d0,-(sp)
    e6e6:	|      jsr 1450a <getSavedGamesStack>
    e6ec:	|      addq.l #8,sp
    e6ee:	|      tst.w d0
    e6f0:	|  /-- bne.s e6f6 <builtIn_getMatchingFiles+0xca>
    e6f2:	|  |   moveq #1,d0
    e6f4:	+--|-- bra.s e712 <builtIn_getMatchingFiles+0xe6>
	FreeVec(newText);
    e6f6:	|  \-> move.l 20(sp),4(sp)
    e6fc:	|      move.l 1c85c <SysBase>,d0
    e702:	|      movea.l d0,a6
    e704:	|      movea.l 4(sp),a1
    e708:	|      jsr -690(a6)
	newText = NULL;
    e70c:	|      clr.l 20(sp)
	return BR_CONTINUE;
    e710:	|      moveq #2,d0
}
    e712:	\----> movea.l (sp)+,a6
    e714:	       lea 20(sp),sp
    e718:	       rts

0000e71a <builtIn_saveGame>:

builtIn(saveGame)
{
    e71a:	       lea -12(sp),sp
    e71e:	       move.l a6,-(sp)

    /*if (frozenStuff) {
        fatal ("Can't save game state while the engine is frozen");
    }*/

    loadNow = getTextFromAnyVar(&(fun->stack->thisVar));
    e720:	       movea.l 24(sp),a0
    e724:	       move.l 24(a0),d0
    e728:	       move.l d0,-(sp)
    e72a:	       jsr 14d24 <getTextFromAnyVar>
    e730:	       addq.l #4,sp
    e732:	       move.l d0,1c828 <loadNow>
    trimStack(&fun->stack);
    e738:	       moveq #24,d0
    e73a:	       add.l 24(sp),d0
    e73e:	       move.l d0,-(sp)
    e740:	       jsr 150d2 <trimStack>
    e746:	       addq.l #4,sp

    char *aaaaa = encodeFilename(loadNow);
    e748:	       move.l 1c828 <loadNow>,d0
    e74e:	       move.l d0,-(sp)
    e750:	       jsr 2fe <encodeFilename>
    e756:	       addq.l #4,sp
    e758:	       move.l d0,12(sp)
    FreeVec(loadNow);
    e75c:	       move.l 1c828 <loadNow>,8(sp)
    e764:	       move.l 1c85c <SysBase>,d0
    e76a:	       movea.l d0,a6
    e76c:	       movea.l 8(sp),a1
    e770:	       jsr -690(a6)
    if (failSecurityCheck(aaaaa)) return BR_ERROR; // Won't fail if encoded, how cool is that? OK, not very.
    e774:	       move.l 12(sp),-(sp)
    e778:	       jsr e2a4 <failSecurityCheck>
    e77e:	       addq.l #4,sp
    e780:	       tst.w d0
    e782:	   /-- beq.s e788 <builtIn_saveGame+0x6e>
    e784:	   |   moveq #1,d0
    e786:	/--|-- bra.s e7d8 <builtIn_saveGame+0xbe>

    loadNow = joinStrings(":", aaaaa);
    e788:	|  \-> move.l 12(sp),-(sp)
    e78c:	|      pea 196d9 <PutChar+0x1a8f>
    e792:	|      jsr 13c7a <joinStrings>
    e798:	|      addq.l #8,sp
    e79a:	|      move.l d0,1c828 <loadNow>
    FreeVec(aaaaa);
    e7a0:	|      move.l 12(sp),4(sp)
    e7a6:	|      move.l 1c85c <SysBase>,d0
    e7ac:	|      movea.l d0,a6
    e7ae:	|      movea.l 4(sp),a1
    e7b2:	|      jsr -690(a6)

    setVariable(&fun->reg, SVT_INT, 0);
    e7b6:	|      moveq #28,d0
    e7b8:	|      add.l 24(sp),d0
    e7bc:	|      clr.l -(sp)
    e7be:	|      pea 1 <_start+0x1>
    e7c2:	|      move.l d0,-(sp)
    e7c4:	|      jsr 15040 <setVariable>
    e7ca:	|      lea 12(sp),sp
    saverFunc = fun;
    e7ce:	|      move.l 24(sp),1c926 <saverFunc>
    return BR_KEEP_AND_PAUSE;
    e7d6:	|      moveq #0,d0
}
    e7d8:	\----> movea.l (sp)+,a6
    e7da:	       lea 12(sp),sp
    e7de:	       rts

0000e7e0 <builtIn_fileExists>:

builtIn(fileExists)
{
    e7e0:	       lea -36(sp),sp
    e7e4:	       move.l a6,-(sp)
    e7e6:	       move.l d2,-(sp)
    UNUSEDALL
    loadNow = getTextFromAnyVar(&(fun->stack->thisVar));
    e7e8:	       movea.l 52(sp),a0
    e7ec:	       move.l 24(a0),d0
    e7f0:	       move.l d0,-(sp)
    e7f2:	       jsr 14d24 <getTextFromAnyVar>
    e7f8:	       addq.l #4,sp
    e7fa:	       move.l d0,1c828 <loadNow>
    trimStack(&fun->stack);
    e800:	       moveq #24,d0
    e802:	       add.l 52(sp),d0
    e806:	       move.l d0,-(sp)
    e808:	       jsr 150d2 <trimStack>
    e80e:	       addq.l #4,sp
    char *aaaaa = encodeFilename(loadNow);
    e810:	       move.l 1c828 <loadNow>,d0
    e816:	       move.l d0,-(sp)
    e818:	       jsr 2fe <encodeFilename>
    e81e:	       addq.l #4,sp
    e820:	       move.l d0,40(sp)
    FreeVec(loadNow);
    e824:	       move.l 1c828 <loadNow>,36(sp)
    e82c:	       move.l 1c85c <SysBase>,d0
    e832:	       movea.l d0,a6
    e834:	       movea.l 36(sp),a1
    e838:	       jsr -690(a6)
    if (failSecurityCheck(aaaaa)) return BR_ERROR;
    e83c:	       move.l 40(sp),-(sp)
    e840:	       jsr e2a4 <failSecurityCheck>
    e846:	       addq.l #4,sp
    e848:	       tst.w d0
    e84a:	   /-- beq.s e852 <builtIn_fileExists+0x72>
    e84c:	   |   moveq #1,d0
    e84e:	/--|-- bra.w e8f2 <builtIn_fileExists+0x112>
    BPTR fp = Open(aaaaa, MODE_OLDFILE);
    e852:	|  \-> move.l 40(sp),32(sp)
    e858:	|      move.l #1005,28(sp)
    e860:	|      move.l 1c864 <DOSBase>,d0
    e866:	|      movea.l d0,a6
    e868:	|      move.l 32(sp),d1
    e86c:	|      move.l 28(sp),d2
    e870:	|      jsr -30(a6)
    e874:	|      move.l d0,24(sp)
    e878:	|      move.l 24(sp),d0
    e87c:	|      move.l d0,20(sp)
    if (!fp) {        
    e880:	|  /-- bne.s e890 <builtIn_fileExists+0xb0>
        KPrintF("Can't get current directory.\n");      
    e882:	|  |   pea 196db <PutChar+0x1a91>
    e888:	|  |   jsr 17176 <KPrintF>
    e88e:	|  |   addq.l #4,sp
    }
    // Return value
    setVariable(&fun->reg, SVT_INT, (fp != NULL));
    e890:	|  \-> tst.l 20(sp)
    e894:	|      sne d0
    e896:	|      neg.b d0
    e898:	|      moveq #0,d1
    e89a:	|      move.b d0,d1
    e89c:	|      moveq #28,d0
    e89e:	|      add.l 52(sp),d0
    e8a2:	|      move.l d1,-(sp)
    e8a4:	|      pea 1 <_start+0x1>
    e8a8:	|      move.l d0,-(sp)
    e8aa:	|      jsr 15040 <setVariable>
    e8b0:	|      lea 12(sp),sp
    if (fp) Close(fp);
    e8b4:	|      tst.l 20(sp)
    e8b8:	|  /-- beq.s e8d4 <builtIn_fileExists+0xf4>
    e8ba:	|  |   move.l 20(sp),16(sp)
    e8c0:	|  |   move.l 1c864 <DOSBase>,d0
    e8c6:	|  |   movea.l d0,a6
    e8c8:	|  |   move.l 16(sp),d1
    e8cc:	|  |   jsr -36(a6)
    e8d0:	|  |   move.l d0,12(sp)
    FreeVec(aaaaa);
    e8d4:	|  \-> move.l 40(sp),8(sp)
    e8da:	|      move.l 1c85c <SysBase>,d0
    e8e0:	|      movea.l d0,a6
    e8e2:	|      movea.l 8(sp),a1
    e8e6:	|      jsr -690(a6)
    loadNow = NULL;
    e8ea:	|      clr.l 1c828 <loadNow>
    return BR_CONTINUE;
    e8f0:	|      moveq #2,d0
}
    e8f2:	\----> move.l (sp)+,d2
    e8f4:	       movea.l (sp)+,a6
    e8f6:	       lea 36(sp),sp
    e8fa:	       rts

0000e8fc <builtIn_loadGame>:

builtIn(loadGame)
{
    e8fc:	       lea -36(sp),sp
    e900:	       move.l a6,-(sp)
    e902:	       move.l d2,-(sp)
    UNUSEDALL
    char *aaaaa = getTextFromAnyVar(&(fun->stack->thisVar));
    e904:	       movea.l 52(sp),a0
    e908:	       move.l 24(a0),d0
    e90c:	       move.l d0,-(sp)
    e90e:	       jsr 14d24 <getTextFromAnyVar>
    e914:	       addq.l #4,sp
    e916:	       move.l d0,40(sp)
    trimStack(&fun->stack);
    e91a:	       moveq #24,d0
    e91c:	       add.l 52(sp),d0
    e920:	       move.l d0,-(sp)
    e922:	       jsr 150d2 <trimStack>
    e928:	       addq.l #4,sp
    loadNow = encodeFilename(aaaaa);
    e92a:	       move.l 40(sp),-(sp)
    e92e:	       jsr 2fe <encodeFilename>
    e934:	       addq.l #4,sp
    e936:	       move.l d0,1c828 <loadNow>
    FreeVec(aaaaa);
    e93c:	       move.l 40(sp),36(sp)
    e942:	       move.l 1c85c <SysBase>,d0
    e948:	       movea.l d0,a6
    e94a:	       movea.l 36(sp),a1
    e94e:	       jsr -690(a6)

    /*if (frozenStuff) {
        fatal("Can't load a saved game while the engine is frozen");
    }*/

    if (failSecurityCheck(loadNow)) return BR_ERROR;
    e952:	       move.l 1c828 <loadNow>,d0
    e958:	       move.l d0,-(sp)
    e95a:	       jsr e2a4 <failSecurityCheck>
    e960:	       addq.l #4,sp
    e962:	       tst.w d0
    e964:	   /-- beq.s e96a <builtIn_loadGame+0x6e>
    e966:	   |   moveq #1,d0
    e968:	/--|-- bra.s e9da <builtIn_loadGame+0xde>
    BPTR fp = Open(loadNow, MODE_OLDFILE);
    e96a:	|  \-> move.l 1c828 <loadNow>,32(sp)
    e972:	|      move.l #1005,28(sp)
    e97a:	|      move.l 1c864 <DOSBase>,d0
    e980:	|      movea.l d0,a6
    e982:	|      move.l 32(sp),d1
    e986:	|      move.l 28(sp),d2
    e98a:	|      jsr -30(a6)
    e98e:	|      move.l d0,24(sp)
    e992:	|      move.l 24(sp),d0
    e996:	|      move.l d0,20(sp)
    if (fp) {
    e99a:	|  /-- beq.s e9ba <builtIn_loadGame+0xbe>
        Close(fp);
    e99c:	|  |   move.l 20(sp),12(sp)
    e9a2:	|  |   move.l 1c864 <DOSBase>,d0
    e9a8:	|  |   movea.l d0,a6
    e9aa:	|  |   move.l 12(sp),d1
    e9ae:	|  |   jsr -36(a6)
    e9b2:	|  |   move.l d0,8(sp)
        return BR_KEEP_AND_PAUSE;
    e9b6:	|  |   moveq #0,d0
    e9b8:	+--|-- bra.s e9da <builtIn_loadGame+0xde>
    }
    FreeVec(loadNow);
    e9ba:	|  \-> move.l 1c828 <loadNow>,16(sp)
    e9c2:	|      move.l 1c85c <SysBase>,d0
    e9c8:	|      movea.l d0,a6
    e9ca:	|      movea.l 16(sp),a1
    e9ce:	|      jsr -690(a6)
    loadNow = NULL;
    e9d2:	|      clr.l 1c828 <loadNow>
    return BR_CONTINUE;
    e9d8:	|      moveq #2,d0
}
    e9da:	\----> move.l (sp)+,d2
    e9dc:	       movea.l (sp)+,a6
    e9de:	       lea 36(sp),sp
    e9e2:	       rts

0000e9e4 <builtIn_blankScreen>:
#pragma mark Background image - Painting

builtIn(blankScreen)
{
	UNUSEDALL
	blankScreen (0, 0, sceneWidth, sceneHeight);
    e9e4:	move.l 1c8fc <sceneHeight>,d0
    e9ea:	move.l d0,d1
    e9ec:	move.l 1c8f8 <sceneWidth>,d0
    e9f2:	move.l d1,-(sp)
    e9f4:	move.l d0,-(sp)
    e9f6:	clr.l -(sp)
    e9f8:	clr.l -(sp)
    e9fa:	jsr d198 <blankScreen>
    ea00:	lea 16(sp),sp
	return BR_CONTINUE;
    ea04:	moveq #2,d0
}
    ea06:	rts

0000ea08 <builtIn_blankArea>:

builtIn(blankArea)
{
    ea08:	       lea -16(sp),sp
	UNUSEDALL
	int x1, y1, x2, y2;
	if (! getValueType (&y2, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    ea0c:	       movea.l 24(sp),a0
    ea10:	       move.l 24(a0),d0
    ea14:	       move.l d0,-(sp)
    ea16:	       pea 1 <_start+0x1>
    ea1a:	       lea 8(sp),a0
    ea1e:	       move.l a0,-(sp)
    ea20:	       jsr 1474e <getValueType>
    ea26:	       lea 12(sp),sp
    ea2a:	       tst.w d0
    ea2c:	   /-- bne.s ea34 <builtIn_blankArea+0x2c>
    ea2e:	   |   moveq #1,d0
    ea30:	/--|-- bra.w eb0a <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    ea34:	|  \-> moveq #24,d0
    ea36:	|      add.l 24(sp),d0
    ea3a:	|      move.l d0,-(sp)
    ea3c:	|      jsr 150d2 <trimStack>
    ea42:	|      addq.l #4,sp
	if (! getValueType (&x2, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    ea44:	|      movea.l 24(sp),a0
    ea48:	|      move.l 24(a0),d0
    ea4c:	|      move.l d0,-(sp)
    ea4e:	|      pea 1 <_start+0x1>
    ea52:	|      lea 12(sp),a0
    ea56:	|      move.l a0,-(sp)
    ea58:	|      jsr 1474e <getValueType>
    ea5e:	|      lea 12(sp),sp
    ea62:	|      tst.w d0
    ea64:	|  /-- bne.s ea6c <builtIn_blankArea+0x64>
    ea66:	|  |   moveq #1,d0
    ea68:	+--|-- bra.w eb0a <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    ea6c:	|  \-> moveq #24,d0
    ea6e:	|      add.l 24(sp),d0
    ea72:	|      move.l d0,-(sp)
    ea74:	|      jsr 150d2 <trimStack>
    ea7a:	|      addq.l #4,sp
	if (! getValueType (&y1, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    ea7c:	|      movea.l 24(sp),a0
    ea80:	|      move.l 24(a0),d0
    ea84:	|      move.l d0,-(sp)
    ea86:	|      pea 1 <_start+0x1>
    ea8a:	|      moveq #16,d0
    ea8c:	|      add.l sp,d0
    ea8e:	|      move.l d0,-(sp)
    ea90:	|      jsr 1474e <getValueType>
    ea96:	|      lea 12(sp),sp
    ea9a:	|      tst.w d0
    ea9c:	|  /-- bne.s eaa2 <builtIn_blankArea+0x9a>
    ea9e:	|  |   moveq #1,d0
    eaa0:	+--|-- bra.s eb0a <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    eaa2:	|  \-> moveq #24,d0
    eaa4:	|      add.l 24(sp),d0
    eaa8:	|      move.l d0,-(sp)
    eaaa:	|      jsr 150d2 <trimStack>
    eab0:	|      addq.l #4,sp
	if (! getValueType (&x1, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    eab2:	|      movea.l 24(sp),a0
    eab6:	|      move.l 24(a0),d0
    eaba:	|      move.l d0,-(sp)
    eabc:	|      pea 1 <_start+0x1>
    eac0:	|      moveq #20,d0
    eac2:	|      add.l sp,d0
    eac4:	|      move.l d0,-(sp)
    eac6:	|      jsr 1474e <getValueType>
    eacc:	|      lea 12(sp),sp
    ead0:	|      tst.w d0
    ead2:	|  /-- bne.s ead8 <builtIn_blankArea+0xd0>
    ead4:	|  |   moveq #1,d0
    ead6:	+--|-- bra.s eb0a <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    ead8:	|  \-> moveq #24,d0
    eada:	|      add.l 24(sp),d0
    eade:	|      move.l d0,-(sp)
    eae0:	|      jsr 150d2 <trimStack>
    eae6:	|      addq.l #4,sp
	blankScreen (x1, y1, x2, y2);
    eae8:	|      movea.l (sp),a1
    eaea:	|      movea.l 4(sp),a0
    eaee:	|      move.l 8(sp),d1
    eaf2:	|      move.l 12(sp),d0
    eaf6:	|      move.l a1,-(sp)
    eaf8:	|      move.l a0,-(sp)
    eafa:	|      move.l d1,-(sp)
    eafc:	|      move.l d0,-(sp)
    eafe:	|      jsr d198 <blankScreen>
    eb04:	|      lea 16(sp),sp
	return BR_CONTINUE;
    eb08:	|      moveq #2,d0
}
    eb0a:	\----> lea 16(sp),sp
    eb0e:	       rts

0000eb10 <builtIn_darkBackground>:

builtIn(darkBackground)
{
	UNUSEDALL
	darkScreen ();
    eb10:	jsr d1ac <darkScreen>
	return BR_CONTINUE;
    eb16:	moveq #2,d0
}
    eb18:	rts

0000eb1a <builtIn_addOverlay>:

builtIn(addOverlay)
{
    eb1a:	       lea -12(sp),sp
	UNUSEDALL
	int fileNumber, xPos, yPos;
	if (! getValueType(&yPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    eb1e:	       movea.l 20(sp),a0
    eb22:	       move.l 24(a0),d0
    eb26:	       move.l d0,-(sp)
    eb28:	       pea 1 <_start+0x1>
    eb2c:	       lea 8(sp),a0
    eb30:	       move.l a0,-(sp)
    eb32:	       jsr 1474e <getValueType>
    eb38:	       lea 12(sp),sp
    eb3c:	       tst.w d0
    eb3e:	   /-- bne.s eb46 <builtIn_addOverlay+0x2c>
    eb40:	   |   moveq #1,d0
    eb42:	/--|-- bra.w ebde <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    eb46:	|  \-> moveq #24,d0
    eb48:	|      add.l 20(sp),d0
    eb4c:	|      move.l d0,-(sp)
    eb4e:	|      jsr 150d2 <trimStack>
    eb54:	|      addq.l #4,sp
	if (! getValueType(&xPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    eb56:	|      movea.l 20(sp),a0
    eb5a:	|      move.l 24(a0),d0
    eb5e:	|      move.l d0,-(sp)
    eb60:	|      pea 1 <_start+0x1>
    eb64:	|      moveq #12,d0
    eb66:	|      add.l sp,d0
    eb68:	|      move.l d0,-(sp)
    eb6a:	|      jsr 1474e <getValueType>
    eb70:	|      lea 12(sp),sp
    eb74:	|      tst.w d0
    eb76:	|  /-- bne.s eb7c <builtIn_addOverlay+0x62>
    eb78:	|  |   moveq #1,d0
    eb7a:	+--|-- bra.s ebde <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    eb7c:	|  \-> moveq #24,d0
    eb7e:	|      add.l 20(sp),d0
    eb82:	|      move.l d0,-(sp)
    eb84:	|      jsr 150d2 <trimStack>
    eb8a:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    eb8c:	|      movea.l 20(sp),a0
    eb90:	|      move.l 24(a0),d0
    eb94:	|      move.l d0,-(sp)
    eb96:	|      pea 5 <_start+0x5>
    eb9a:	|      moveq #16,d0
    eb9c:	|      add.l sp,d0
    eb9e:	|      move.l d0,-(sp)
    eba0:	|      jsr 1474e <getValueType>
    eba6:	|      lea 12(sp),sp
    ebaa:	|      tst.w d0
    ebac:	|  /-- bne.s ebb2 <builtIn_addOverlay+0x98>
    ebae:	|  |   moveq #1,d0
    ebb0:	+--|-- bra.s ebde <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    ebb2:	|  \-> moveq #24,d0
    ebb4:	|      add.l 20(sp),d0
    ebb8:	|      move.l d0,-(sp)
    ebba:	|      jsr 150d2 <trimStack>
    ebc0:	|      addq.l #4,sp
	loadBackDrop (fileNumber, xPos, yPos);
    ebc2:	|      movea.l (sp),a0
    ebc4:	|      move.l 4(sp),d1
    ebc8:	|      move.l 8(sp),d0
    ebcc:	|      move.l a0,-(sp)
    ebce:	|      move.l d1,-(sp)
    ebd0:	|      move.l d0,-(sp)
    ebd2:	|      jsr d2ca <loadBackDrop>
    ebd8:	|      lea 12(sp),sp
	return BR_CONTINUE;
    ebdc:	|      moveq #2,d0
}
    ebde:	\----> lea 12(sp),sp
    ebe2:	       rts

0000ebe4 <builtIn_mixOverlay>:

builtIn(mixOverlay)
{
    ebe4:	       lea -12(sp),sp
	UNUSEDALL
	int fileNumber, xPos, yPos;
	if (! getValueType(&yPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ebe8:	       movea.l 20(sp),a0
    ebec:	       move.l 24(a0),d0
    ebf0:	       move.l d0,-(sp)
    ebf2:	       pea 1 <_start+0x1>
    ebf6:	       lea 8(sp),a0
    ebfa:	       move.l a0,-(sp)
    ebfc:	       jsr 1474e <getValueType>
    ec02:	       lea 12(sp),sp
    ec06:	       tst.w d0
    ec08:	   /-- bne.s ec10 <builtIn_mixOverlay+0x2c>
    ec0a:	   |   moveq #1,d0
    ec0c:	/--|-- bra.w eca8 <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    ec10:	|  \-> moveq #24,d0
    ec12:	|      add.l 20(sp),d0
    ec16:	|      move.l d0,-(sp)
    ec18:	|      jsr 150d2 <trimStack>
    ec1e:	|      addq.l #4,sp
	if (! getValueType(&xPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ec20:	|      movea.l 20(sp),a0
    ec24:	|      move.l 24(a0),d0
    ec28:	|      move.l d0,-(sp)
    ec2a:	|      pea 1 <_start+0x1>
    ec2e:	|      moveq #12,d0
    ec30:	|      add.l sp,d0
    ec32:	|      move.l d0,-(sp)
    ec34:	|      jsr 1474e <getValueType>
    ec3a:	|      lea 12(sp),sp
    ec3e:	|      tst.w d0
    ec40:	|  /-- bne.s ec46 <builtIn_mixOverlay+0x62>
    ec42:	|  |   moveq #1,d0
    ec44:	+--|-- bra.s eca8 <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    ec46:	|  \-> moveq #24,d0
    ec48:	|      add.l 20(sp),d0
    ec4c:	|      move.l d0,-(sp)
    ec4e:	|      jsr 150d2 <trimStack>
    ec54:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    ec56:	|      movea.l 20(sp),a0
    ec5a:	|      move.l 24(a0),d0
    ec5e:	|      move.l d0,-(sp)
    ec60:	|      pea 5 <_start+0x5>
    ec64:	|      moveq #16,d0
    ec66:	|      add.l sp,d0
    ec68:	|      move.l d0,-(sp)
    ec6a:	|      jsr 1474e <getValueType>
    ec70:	|      lea 12(sp),sp
    ec74:	|      tst.w d0
    ec76:	|  /-- bne.s ec7c <builtIn_mixOverlay+0x98>
    ec78:	|  |   moveq #1,d0
    ec7a:	+--|-- bra.s eca8 <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    ec7c:	|  \-> moveq #24,d0
    ec7e:	|      add.l 20(sp),d0
    ec82:	|      move.l d0,-(sp)
    ec84:	|      jsr 150d2 <trimStack>
    ec8a:	|      addq.l #4,sp
	mixBackDrop (fileNumber, xPos, yPos);
    ec8c:	|      movea.l (sp),a0
    ec8e:	|      move.l 4(sp),d1
    ec92:	|      move.l 8(sp),d0
    ec96:	|      move.l a0,-(sp)
    ec98:	|      move.l d1,-(sp)
    ec9a:	|      move.l d0,-(sp)
    ec9c:	|      jsr d340 <mixBackDrop>
    eca2:	|      lea 12(sp),sp
	return BR_CONTINUE;
    eca6:	|      moveq #2,d0
}
    eca8:	\----> lea 12(sp),sp
    ecac:	       rts

0000ecae <builtIn_pasteImage>:

builtIn(pasteImage)
{
    ecae:	       lea -12(sp),sp
	UNUSEDALL
	KPrintF("pasteimage: Started\n");
    ecb2:	       pea 196f9 <PutChar+0x1aaf>
    ecb8:	       jsr 17176 <KPrintF>
    ecbe:	       addq.l #4,sp
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ecc0:	       movea.l 20(sp),a0
    ecc4:	       move.l 24(a0),d0
    ecc8:	       move.l d0,-(sp)
    ecca:	       pea 1 <_start+0x1>
    ecce:	       lea 8(sp),a0
    ecd2:	       move.l a0,-(sp)
    ecd4:	       jsr 1474e <getValueType>
    ecda:	       lea 12(sp),sp
    ecde:	       tst.w d0
    ece0:	   /-- bne.s ece8 <builtIn_pasteImage+0x3a>
    ece2:	   |   moveq #1,d0
    ece4:	/--|-- bra.w ed86 <builtIn_pasteImage+0xd8>
	trimStack (&fun -> stack);
    ece8:	|  \-> moveq #24,d0
    ecea:	|      add.l 20(sp),d0
    ecee:	|      move.l d0,-(sp)
    ecf0:	|      jsr 150d2 <trimStack>
    ecf6:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ecf8:	|      movea.l 20(sp),a0
    ecfc:	|      move.l 24(a0),d0
    ed00:	|      move.l d0,-(sp)
    ed02:	|      pea 1 <_start+0x1>
    ed06:	|      moveq #12,d0
    ed08:	|      add.l sp,d0
    ed0a:	|      move.l d0,-(sp)
    ed0c:	|      jsr 1474e <getValueType>
    ed12:	|      lea 12(sp),sp
    ed16:	|      tst.w d0
    ed18:	|  /-- bne.s ed1e <builtIn_pasteImage+0x70>
    ed1a:	|  |   moveq #1,d0
    ed1c:	+--|-- bra.s ed86 <builtIn_pasteImage+0xd8>
	trimStack (&fun -> stack);
    ed1e:	|  \-> moveq #24,d0
    ed20:	|      add.l 20(sp),d0
    ed24:	|      move.l d0,-(sp)
    ed26:	|      jsr 150d2 <trimStack>
    ed2c:	|      addq.l #4,sp
	struct personaAnimation * pp = getAnimationFromVar (&(fun -> stack -> thisVar));
    ed2e:	|      movea.l 20(sp),a0
    ed32:	|      move.l 24(a0),d0
    ed36:	|      move.l d0,-(sp)
    ed38:	|      jsr 14c26 <getAnimationFromVar>
    ed3e:	|      addq.l #4,sp
    ed40:	|      move.l d0,8(sp)
	trimStack (&fun -> stack);
    ed44:	|      moveq #24,d0
    ed46:	|      add.l 20(sp),d0
    ed4a:	|      move.l d0,-(sp)
    ed4c:	|      jsr 150d2 <trimStack>
    ed52:	|      addq.l #4,sp
	if (pp == NULL) return BR_CONTINUE;
    ed54:	|      tst.l 8(sp)
    ed58:	|  /-- bne.s ed5e <builtIn_pasteImage+0xb0>
    ed5a:	|  |   moveq #2,d0
    ed5c:	+--|-- bra.s ed86 <builtIn_pasteImage+0xd8>

	pasteCursor (x, y, pp);
    ed5e:	|  \-> move.l (sp),d1
    ed60:	|      move.l 4(sp),d0
    ed64:	|      move.l 8(sp),-(sp)
    ed68:	|      move.l d1,-(sp)
    ed6a:	|      move.l d0,-(sp)
    ed6c:	|      jsr d94 <pasteCursor>
    ed72:	|      lea 12(sp),sp
	KPrintF("pasteimage: Finished\n");
    ed76:	|      pea 1970e <PutChar+0x1ac4>
    ed7c:	|      jsr 17176 <KPrintF>
    ed82:	|      addq.l #4,sp
	return BR_CONTINUE;	
    ed84:	|      moveq #2,d0
}
    ed86:	\----> lea 12(sp),sp
    ed8a:	       rts

0000ed8c <builtIn_setSceneDimensions>:

#pragma mark -
#pragma mark Background Image - Scrolling

builtIn(setSceneDimensions)
{
    ed8c:	       subq.l #8,sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ed8e:	       movea.l 16(sp),a0
    ed92:	       move.l 24(a0),d0
    ed96:	       move.l d0,-(sp)
    ed98:	       pea 1 <_start+0x1>
    ed9c:	       move.l sp,d0
    ed9e:	       addq.l #8,d0
    eda0:	       move.l d0,-(sp)
    eda2:	       jsr 1474e <getValueType>
    eda8:	       lea 12(sp),sp
    edac:	       tst.w d0
    edae:	   /-- bne.s edb6 <builtIn_setSceneDimensions+0x2a>
    edb0:	   |   moveq #1,d0
    edb2:	/--|-- bra.w ee3e <builtIn_setSceneDimensions+0xb2>
	trimStack (&fun -> stack);
    edb6:	|  \-> moveq #24,d0
    edb8:	|      add.l 16(sp),d0
    edbc:	|      move.l d0,-(sp)
    edbe:	|      jsr 150d2 <trimStack>
    edc4:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    edc6:	|      movea.l 16(sp),a0
    edca:	|      move.l 24(a0),d0
    edce:	|      move.l d0,-(sp)
    edd0:	|      pea 1 <_start+0x1>
    edd4:	|      moveq #12,d0
    edd6:	|      add.l sp,d0
    edd8:	|      move.l d0,-(sp)
    edda:	|      jsr 1474e <getValueType>
    ede0:	|      lea 12(sp),sp
    ede4:	|      tst.w d0
    ede6:	|  /-- bne.s edec <builtIn_setSceneDimensions+0x60>
    ede8:	|  |   moveq #1,d0
    edea:	+--|-- bra.s ee3e <builtIn_setSceneDimensions+0xb2>
	trimStack (&fun -> stack);
    edec:	|  \-> moveq #24,d0
    edee:	|      add.l 16(sp),d0
    edf2:	|      move.l d0,-(sp)
    edf4:	|      jsr 150d2 <trimStack>
    edfa:	|      addq.l #4,sp
	if (resizeBackdrop (x, y)) {
    edfc:	|      move.l (sp),d1
    edfe:	|      move.l 4(sp),d0
    ee02:	|      move.l d1,-(sp)
    ee04:	|      move.l d0,-(sp)
    ee06:	|      jsr d396 <resizeBackdrop>
    ee0c:	|      addq.l #8,sp
    ee0e:	|      tst.w d0
    ee10:	|  /-- beq.s ee2e <builtIn_setSceneDimensions+0xa2>
		blankScreen (0, 0, x, y);
    ee12:	|  |   move.l (sp),d1
    ee14:	|  |   move.l 4(sp),d0
    ee18:	|  |   move.l d1,-(sp)
    ee1a:	|  |   move.l d0,-(sp)
    ee1c:	|  |   clr.l -(sp)
    ee1e:	|  |   clr.l -(sp)
    ee20:	|  |   jsr d198 <blankScreen>
    ee26:	|  |   lea 16(sp),sp
		return BR_CONTINUE;
    ee2a:	|  |   moveq #2,d0
    ee2c:	+--|-- bra.s ee3e <builtIn_setSceneDimensions+0xb2>
	}
	KPrintF("Out of memory creating new backdrop.");
    ee2e:	|  \-> pea 19724 <PutChar+0x1ada>
    ee34:	|      jsr 17176 <KPrintF>
    ee3a:	|      addq.l #4,sp
	return BR_ERROR;
    ee3c:	|      moveq #1,d0
}
    ee3e:	\----> addq.l #8,sp
    ee40:	       rts

0000ee42 <builtIn_aimCamera>:

builtIn(aimCamera)
{
    ee42:	          move.l d3,-(sp)
    ee44:	          move.l d2,-(sp)
	UNUSEDALL
	if (! getValueType(&cameraY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ee46:	          movea.l 16(sp),a0
    ee4a:	          move.l 24(a0),d0
    ee4e:	          move.l d0,-(sp)
    ee50:	          pea 1 <_start+0x1>
    ee54:	          pea 1c91a <cameraY>
    ee5a:	          jsr 1474e <getValueType>
    ee60:	          lea 12(sp),sp
    ee64:	          tst.w d0
    ee66:	      /-- bne.s ee6e <builtIn_aimCamera+0x2c>
    ee68:	      |   moveq #1,d0
    ee6a:	/-----|-- bra.w f0f0 <builtIn_aimCamera+0x2ae>
	trimStack (&fun -> stack);
    ee6e:	|     \-> moveq #24,d0
    ee70:	|         add.l 16(sp),d0
    ee74:	|         move.l d0,-(sp)
    ee76:	|         jsr 150d2 <trimStack>
    ee7c:	|         addq.l #4,sp
	if (! getValueType(&cameraX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ee7e:	|         movea.l 16(sp),a0
    ee82:	|         move.l 24(a0),d0
    ee86:	|         move.l d0,-(sp)
    ee88:	|         pea 1 <_start+0x1>
    ee8c:	|         pea 1c916 <cameraX>
    ee92:	|         jsr 1474e <getValueType>
    ee98:	|         lea 12(sp),sp
    ee9c:	|         tst.w d0
    ee9e:	|     /-- bne.s eea6 <builtIn_aimCamera+0x64>
    eea0:	|     |   moveq #1,d0
    eea2:	+-----|-- bra.w f0f0 <builtIn_aimCamera+0x2ae>
	trimStack (&fun -> stack);
    eea6:	|     \-> moveq #24,d0
    eea8:	|         add.l 16(sp),d0
    eeac:	|         move.l d0,-(sp)
    eeae:	|         jsr 150d2 <trimStack>
    eeb4:	|         addq.l #4,sp

	cameraX -= (FLOAT)(winWidth >> 1)/ cameraZoom;
    eeb6:	|         move.l 1c916 <cameraX>,d0
    eebc:	|         move.l d0,-(sp)
    eebe:	|         jsr 175b2 <__floatsisf>
    eec4:	|         addq.l #4,sp
    eec6:	|         move.l d0,d2
    eec8:	|         move.l 1c7b0 <winWidth>,d0
    eece:	|         lsr.l #1,d0
    eed0:	|         move.l d0,-(sp)
    eed2:	|         jsr 175da <__floatunsisf>
    eed8:	|         addq.l #4,sp
    eeda:	|         move.l d0,d1
    eedc:	|         move.l 1c1fa <cameraZoom>,d0
    eee2:	|         move.l d0,-(sp)
    eee4:	|         move.l d1,-(sp)
    eee6:	|         jsr 1745e <__divsf3>
    eeec:	|         addq.l #8,sp
    eeee:	|         move.l d0,-(sp)
    eef0:	|         move.l d2,-(sp)
    eef2:	|         jsr 178a6 <__subsf3>
    eef8:	|         addq.l #8,sp
    eefa:	|         move.l d0,-(sp)
    eefc:	|         jsr 1754a <__fixsfsi>
    ef02:	|         addq.l #4,sp
    ef04:	|         move.l d0,1c916 <cameraX>
	cameraY -= (FLOAT)(winHeight >> 1)/ cameraZoom;
    ef0a:	|         move.l 1c91a <cameraY>,d0
    ef10:	|         move.l d0,-(sp)
    ef12:	|         jsr 175b2 <__floatsisf>
    ef18:	|         addq.l #4,sp
    ef1a:	|         move.l d0,d2
    ef1c:	|         move.l 1c7b4 <winHeight>,d0
    ef22:	|         lsr.l #1,d0
    ef24:	|         move.l d0,-(sp)
    ef26:	|         jsr 175da <__floatunsisf>
    ef2c:	|         addq.l #4,sp
    ef2e:	|         move.l d0,d1
    ef30:	|         move.l 1c1fa <cameraZoom>,d0
    ef36:	|         move.l d0,-(sp)
    ef38:	|         move.l d1,-(sp)
    ef3a:	|         jsr 1745e <__divsf3>
    ef40:	|         addq.l #8,sp
    ef42:	|         move.l d0,-(sp)
    ef44:	|         move.l d2,-(sp)
    ef46:	|         jsr 178a6 <__subsf3>
    ef4c:	|         addq.l #8,sp
    ef4e:	|         move.l d0,-(sp)
    ef50:	|         jsr 1754a <__fixsfsi>
    ef56:	|         addq.l #4,sp
    ef58:	|         move.l d0,1c91a <cameraY>

	if (cameraX < 0) cameraX = 0;
    ef5e:	|         move.l 1c916 <cameraX>,d0
    ef64:	|     /-- bpl.s ef70 <builtIn_aimCamera+0x12e>
    ef66:	|     |   clr.l 1c916 <cameraX>
    ef6c:	|  /--|-- bra.w f026 <builtIn_aimCamera+0x1e4>
	else if (cameraX > sceneWidth - (FLOAT)winWidth/ cameraZoom) cameraX = sceneWidth - (FLOAT)winWidth/ cameraZoom;
    ef70:	|  |  \-> move.l 1c916 <cameraX>,d0
    ef76:	|  |      move.l d0,-(sp)
    ef78:	|  |      jsr 175b2 <__floatsisf>
    ef7e:	|  |      addq.l #4,sp
    ef80:	|  |      move.l d0,d2
    ef82:	|  |      move.l 1c8f8 <sceneWidth>,d0
    ef88:	|  |      move.l d0,-(sp)
    ef8a:	|  |      jsr 175da <__floatunsisf>
    ef90:	|  |      addq.l #4,sp
    ef92:	|  |      move.l d0,d3
    ef94:	|  |      move.l 1c7b0 <winWidth>,d0
    ef9a:	|  |      move.l d0,-(sp)
    ef9c:	|  |      jsr 175da <__floatunsisf>
    efa2:	|  |      addq.l #4,sp
    efa4:	|  |      move.l d0,d1
    efa6:	|  |      move.l 1c1fa <cameraZoom>,d0
    efac:	|  |      move.l d0,-(sp)
    efae:	|  |      move.l d1,-(sp)
    efb0:	|  |      jsr 1745e <__divsf3>
    efb6:	|  |      addq.l #8,sp
    efb8:	|  |      move.l d0,-(sp)
    efba:	|  |      move.l d3,-(sp)
    efbc:	|  |      jsr 178a6 <__subsf3>
    efc2:	|  |      addq.l #8,sp
    efc4:	|  |      move.l d0,-(sp)
    efc6:	|  |      move.l d2,-(sp)
    efc8:	|  |      jsr 1771e <__gtsf2>
    efce:	|  |      addq.l #8,sp
    efd0:	|  |      tst.l d0
    efd2:	|  +----- ble.s f026 <builtIn_aimCamera+0x1e4>
    efd4:	|  |      move.l 1c8f8 <sceneWidth>,d0
    efda:	|  |      move.l d0,-(sp)
    efdc:	|  |      jsr 175da <__floatunsisf>
    efe2:	|  |      addq.l #4,sp
    efe4:	|  |      move.l d0,d2
    efe6:	|  |      move.l 1c7b0 <winWidth>,d0
    efec:	|  |      move.l d0,-(sp)
    efee:	|  |      jsr 175da <__floatunsisf>
    eff4:	|  |      addq.l #4,sp
    eff6:	|  |      move.l d0,d1
    eff8:	|  |      move.l 1c1fa <cameraZoom>,d0
    effe:	|  |      move.l d0,-(sp)
    f000:	|  |      move.l d1,-(sp)
    f002:	|  |      jsr 1745e <__divsf3>
    f008:	|  |      addq.l #8,sp
    f00a:	|  |      move.l d0,-(sp)
    f00c:	|  |      move.l d2,-(sp)
    f00e:	|  |      jsr 178a6 <__subsf3>
    f014:	|  |      addq.l #8,sp
    f016:	|  |      move.l d0,-(sp)
    f018:	|  |      jsr 1754a <__fixsfsi>
    f01e:	|  |      addq.l #4,sp
    f020:	|  |      move.l d0,1c916 <cameraX>
	if (cameraY < 0) cameraY = 0;
    f026:	|  \----> move.l 1c91a <cameraY>,d0
    f02c:	|     /-- bpl.s f038 <builtIn_aimCamera+0x1f6>
    f02e:	|     |   clr.l 1c91a <cameraY>
    f034:	|  /--|-- bra.w f0ee <builtIn_aimCamera+0x2ac>
	else if (cameraY > sceneHeight - (FLOAT)winHeight/ cameraZoom) cameraY = sceneHeight - (FLOAT)winHeight/ cameraZoom;
    f038:	|  |  \-> move.l 1c91a <cameraY>,d0
    f03e:	|  |      move.l d0,-(sp)
    f040:	|  |      jsr 175b2 <__floatsisf>
    f046:	|  |      addq.l #4,sp
    f048:	|  |      move.l d0,d2
    f04a:	|  |      move.l 1c8fc <sceneHeight>,d0
    f050:	|  |      move.l d0,-(sp)
    f052:	|  |      jsr 175da <__floatunsisf>
    f058:	|  |      addq.l #4,sp
    f05a:	|  |      move.l d0,d3
    f05c:	|  |      move.l 1c7b4 <winHeight>,d0
    f062:	|  |      move.l d0,-(sp)
    f064:	|  |      jsr 175da <__floatunsisf>
    f06a:	|  |      addq.l #4,sp
    f06c:	|  |      move.l d0,d1
    f06e:	|  |      move.l 1c1fa <cameraZoom>,d0
    f074:	|  |      move.l d0,-(sp)
    f076:	|  |      move.l d1,-(sp)
    f078:	|  |      jsr 1745e <__divsf3>
    f07e:	|  |      addq.l #8,sp
    f080:	|  |      move.l d0,-(sp)
    f082:	|  |      move.l d3,-(sp)
    f084:	|  |      jsr 178a6 <__subsf3>
    f08a:	|  |      addq.l #8,sp
    f08c:	|  |      move.l d0,-(sp)
    f08e:	|  |      move.l d2,-(sp)
    f090:	|  |      jsr 1771e <__gtsf2>
    f096:	|  |      addq.l #8,sp
    f098:	|  |      tst.l d0
    f09a:	|  +----- ble.s f0ee <builtIn_aimCamera+0x2ac>
    f09c:	|  |      move.l 1c8fc <sceneHeight>,d0
    f0a2:	|  |      move.l d0,-(sp)
    f0a4:	|  |      jsr 175da <__floatunsisf>
    f0aa:	|  |      addq.l #4,sp
    f0ac:	|  |      move.l d0,d2
    f0ae:	|  |      move.l 1c7b4 <winHeight>,d0
    f0b4:	|  |      move.l d0,-(sp)
    f0b6:	|  |      jsr 175da <__floatunsisf>
    f0bc:	|  |      addq.l #4,sp
    f0be:	|  |      move.l d0,d1
    f0c0:	|  |      move.l 1c1fa <cameraZoom>,d0
    f0c6:	|  |      move.l d0,-(sp)
    f0c8:	|  |      move.l d1,-(sp)
    f0ca:	|  |      jsr 1745e <__divsf3>
    f0d0:	|  |      addq.l #8,sp
    f0d2:	|  |      move.l d0,-(sp)
    f0d4:	|  |      move.l d2,-(sp)
    f0d6:	|  |      jsr 178a6 <__subsf3>
    f0dc:	|  |      addq.l #8,sp
    f0de:	|  |      move.l d0,-(sp)
    f0e0:	|  |      jsr 1754a <__fixsfsi>
    f0e6:	|  |      addq.l #4,sp
    f0e8:	|  |      move.l d0,1c91a <cameraY>
	return BR_CONTINUE;
    f0ee:	|  \----> moveq #2,d0
}
    f0f0:	\-------> move.l (sp)+,d2
    f0f2:	          move.l (sp)+,d3
    f0f4:	          rts

0000f0f6 <builtIn_zoomCamera>:


builtIn(zoomCamera)
{
    f0f6:	       subq.l #4,sp
    f0f8:	       move.l d2,-(sp)
	UNUSEDALL
	int z;
	if (! getValueType(&z, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f0fa:	       movea.l 16(sp),a0
    f0fe:	       move.l 24(a0),d0
    f102:	       move.l d0,-(sp)
    f104:	       pea 1 <_start+0x1>
    f108:	       moveq #12,d0
    f10a:	       add.l sp,d0
    f10c:	       move.l d0,-(sp)
    f10e:	       jsr 1474e <getValueType>
    f114:	       lea 12(sp),sp
    f118:	       tst.w d0
    f11a:	   /-- bne.s f122 <builtIn_zoomCamera+0x2c>
    f11c:	   |   moveq #1,d0
    f11e:	/--|-- bra.w f31c <builtIn_zoomCamera+0x226>
	trimStack (&fun -> stack);
    f122:	|  \-> moveq #24,d0
    f124:	|      add.l 16(sp),d0
    f128:	|      move.l d0,-(sp)
    f12a:	|      jsr 150d2 <trimStack>
    f130:	|      addq.l #4,sp

	input.mouseX = input.mouseX * cameraZoom;
    f132:	|      move.l 1c818 <input+0xa>,d0
    f138:	|      move.l d0,-(sp)
    f13a:	|      jsr 175b2 <__floatsisf>
    f140:	|      addq.l #4,sp
    f142:	|      move.l d0,d1
    f144:	|      move.l 1c1fa <cameraZoom>,d0
    f14a:	|      move.l d0,-(sp)
    f14c:	|      move.l d1,-(sp)
    f14e:	|      jsr 17664 <__mulsf3>
    f154:	|      addq.l #8,sp
    f156:	|      move.l d0,-(sp)
    f158:	|      jsr 1754a <__fixsfsi>
    f15e:	|      addq.l #4,sp
    f160:	|      move.l d0,1c818 <input+0xa>
	input.mouseY = input.mouseY * cameraZoom;
    f166:	|      move.l 1c81c <input+0xe>,d0
    f16c:	|      move.l d0,-(sp)
    f16e:	|      jsr 175b2 <__floatsisf>
    f174:	|      addq.l #4,sp
    f176:	|      move.l d0,d1
    f178:	|      move.l 1c1fa <cameraZoom>,d0
    f17e:	|      move.l d0,-(sp)
    f180:	|      move.l d1,-(sp)
    f182:	|      jsr 17664 <__mulsf3>
    f188:	|      addq.l #8,sp
    f18a:	|      move.l d0,-(sp)
    f18c:	|      jsr 1754a <__fixsfsi>
    f192:	|      addq.l #4,sp
    f194:	|      move.l d0,1c81c <input+0xe>


	cameraZoom = (FLOAT) z * (FLOAT) 0.01;
    f19a:	|      move.l 4(sp),d0
    f19e:	|      move.l d0,-(sp)
    f1a0:	|      jsr 175b2 <__floatsisf>
    f1a6:	|      addq.l #4,sp
    f1a8:	|      move.l #1008981770,-(sp)
    f1ae:	|      move.l d0,-(sp)
    f1b0:	|      jsr 17664 <__mulsf3>
    f1b6:	|      addq.l #8,sp
    f1b8:	|      move.l d0,1c1fa <cameraZoom>
	if ((FLOAT) winWidth / cameraZoom > sceneWidth) cameraZoom = (FLOAT)winWidth / sceneWidth;
    f1be:	|      move.l 1c7b0 <winWidth>,d0
    f1c4:	|      move.l d0,-(sp)
    f1c6:	|      jsr 175da <__floatunsisf>
    f1cc:	|      addq.l #4,sp
    f1ce:	|      move.l d0,d1
    f1d0:	|      move.l 1c1fa <cameraZoom>,d0
    f1d6:	|      move.l d0,-(sp)
    f1d8:	|      move.l d1,-(sp)
    f1da:	|      jsr 1745e <__divsf3>
    f1e0:	|      addq.l #8,sp
    f1e2:	|      move.l d0,d2
    f1e4:	|      move.l 1c8f8 <sceneWidth>,d0
    f1ea:	|      move.l d0,-(sp)
    f1ec:	|      jsr 175da <__floatunsisf>
    f1f2:	|      addq.l #4,sp
    f1f4:	|      move.l d0,-(sp)
    f1f6:	|      move.l d2,-(sp)
    f1f8:	|      jsr 1771e <__gtsf2>
    f1fe:	|      addq.l #8,sp
    f200:	|      tst.l d0
    f202:	|  /-- ble.s f238 <builtIn_zoomCamera+0x142>
    f204:	|  |   move.l 1c7b0 <winWidth>,d0
    f20a:	|  |   move.l d0,-(sp)
    f20c:	|  |   jsr 175da <__floatunsisf>
    f212:	|  |   addq.l #4,sp
    f214:	|  |   move.l d0,d2
    f216:	|  |   move.l 1c8f8 <sceneWidth>,d0
    f21c:	|  |   move.l d0,-(sp)
    f21e:	|  |   jsr 175da <__floatunsisf>
    f224:	|  |   addq.l #4,sp
    f226:	|  |   move.l d0,-(sp)
    f228:	|  |   move.l d2,-(sp)
    f22a:	|  |   jsr 1745e <__divsf3>
    f230:	|  |   addq.l #8,sp
    f232:	|  |   move.l d0,1c1fa <cameraZoom>
	if ((FLOAT) winHeight / cameraZoom > sceneHeight) cameraZoom = (FLOAT)winHeight / sceneHeight;
    f238:	|  \-> move.l 1c7b4 <winHeight>,d0
    f23e:	|      move.l d0,-(sp)
    f240:	|      jsr 175da <__floatunsisf>
    f246:	|      addq.l #4,sp
    f248:	|      move.l d0,d1
    f24a:	|      move.l 1c1fa <cameraZoom>,d0
    f250:	|      move.l d0,-(sp)
    f252:	|      move.l d1,-(sp)
    f254:	|      jsr 1745e <__divsf3>
    f25a:	|      addq.l #8,sp
    f25c:	|      move.l d0,d2
    f25e:	|      move.l 1c8fc <sceneHeight>,d0
    f264:	|      move.l d0,-(sp)
    f266:	|      jsr 175da <__floatunsisf>
    f26c:	|      addq.l #4,sp
    f26e:	|      move.l d0,-(sp)
    f270:	|      move.l d2,-(sp)
    f272:	|      jsr 1771e <__gtsf2>
    f278:	|      addq.l #8,sp
    f27a:	|      tst.l d0
    f27c:	|  /-- ble.s f2b2 <builtIn_zoomCamera+0x1bc>
    f27e:	|  |   move.l 1c7b4 <winHeight>,d0
    f284:	|  |   move.l d0,-(sp)
    f286:	|  |   jsr 175da <__floatunsisf>
    f28c:	|  |   addq.l #4,sp
    f28e:	|  |   move.l d0,d2
    f290:	|  |   move.l 1c8fc <sceneHeight>,d0
    f296:	|  |   move.l d0,-(sp)
    f298:	|  |   jsr 175da <__floatunsisf>
    f29e:	|  |   addq.l #4,sp
    f2a0:	|  |   move.l d0,-(sp)
    f2a2:	|  |   move.l d2,-(sp)
    f2a4:	|  |   jsr 1745e <__divsf3>
    f2aa:	|  |   addq.l #8,sp
    f2ac:	|  |   move.l d0,1c1fa <cameraZoom>
	//setPixelCoords (FALSE); Todo: Amigize this

	input.mouseX = input.mouseX / cameraZoom;
    f2b2:	|  \-> move.l 1c818 <input+0xa>,d0
    f2b8:	|      move.l d0,-(sp)
    f2ba:	|      jsr 175b2 <__floatsisf>
    f2c0:	|      addq.l #4,sp
    f2c2:	|      move.l d0,d1
    f2c4:	|      move.l 1c1fa <cameraZoom>,d0
    f2ca:	|      move.l d0,-(sp)
    f2cc:	|      move.l d1,-(sp)
    f2ce:	|      jsr 1745e <__divsf3>
    f2d4:	|      addq.l #8,sp
    f2d6:	|      move.l d0,-(sp)
    f2d8:	|      jsr 1754a <__fixsfsi>
    f2de:	|      addq.l #4,sp
    f2e0:	|      move.l d0,1c818 <input+0xa>
	input.mouseY = input.mouseY / cameraZoom;
    f2e6:	|      move.l 1c81c <input+0xe>,d0
    f2ec:	|      move.l d0,-(sp)
    f2ee:	|      jsr 175b2 <__floatsisf>
    f2f4:	|      addq.l #4,sp
    f2f6:	|      move.l d0,d1
    f2f8:	|      move.l 1c1fa <cameraZoom>,d0
    f2fe:	|      move.l d0,-(sp)
    f300:	|      move.l d1,-(sp)
    f302:	|      jsr 1745e <__divsf3>
    f308:	|      addq.l #8,sp
    f30a:	|      move.l d0,-(sp)
    f30c:	|      jsr 1754a <__fixsfsi>
    f312:	|      addq.l #4,sp
    f314:	|      move.l d0,1c81c <input+0xe>

	return BR_CONTINUE;
    f31a:	|      moveq #2,d0
}
    f31c:	\----> move.l (sp)+,d2
    f31e:	       addq.l #4,sp
    f320:	       rts

0000f322 <builtIn_pickOne>:
#pragma mark -
#pragma mark Variables


builtIn(pickOne)
{
    f322:	             subq.l #4,sp
	UNUSEDALL
	if (! numParams) {
    f324:	             tst.l 8(sp)
    f328:	         /-- bne.s f33c <builtIn_pickOne+0x1a>
		KPrintF ("Built-in function should have at least 1 parameter");
    f32a:	         |   pea 19749 <PutChar+0x1aff>
    f330:	         |   jsr 17176 <KPrintF>
    f336:	         |   addq.l #4,sp
		return BR_ERROR;
    f338:	         |   moveq #1,d0
    f33a:	/--------|-- bra.s f39c <builtIn_pickOne+0x7a>
	}
	int i = rand() % numParams;
    f33c:	|        \-> jsr 15d76 <rand>
    f342:	|            move.l d0,d1
    f344:	|            move.l 8(sp),d0
    f348:	|            move.l d0,-(sp)
    f34a:	|            move.l d1,-(sp)
    f34c:	|            jsr 17c0e <__umodsi3>
    f352:	|            addq.l #8,sp
    f354:	|            move.l d0,(sp)

	// Return value
	while (numParams --) {
    f356:	|     /----- bra.s f38a <builtIn_pickOne+0x68>
		if (i == numParams) copyVariable (&(fun -> stack -> thisVar), &fun -> reg);
    f358:	|  /--|----> move.l (sp),d0
    f35a:	|  |  |      cmp.l 8(sp),d0
    f35e:	|  |  |  /-- bne.s f37a <builtIn_pickOne+0x58>
    f360:	|  |  |  |   moveq #28,d0
    f362:	|  |  |  |   add.l 12(sp),d0
    f366:	|  |  |  |   movea.l 12(sp),a0
    f36a:	|  |  |  |   move.l 24(a0),d1
    f36e:	|  |  |  |   move.l d0,-(sp)
    f370:	|  |  |  |   move.l d1,-(sp)
    f372:	|  |  |  |   jsr 14c08 <copyVariable>
    f378:	|  |  |  |   addq.l #8,sp
		trimStack (&fun -> stack);
    f37a:	|  |  |  \-> moveq #24,d0
    f37c:	|  |  |      add.l 12(sp),d0
    f380:	|  |  |      move.l d0,-(sp)
    f382:	|  |  |      jsr 150d2 <trimStack>
    f388:	|  |  |      addq.l #4,sp
	while (numParams --) {
    f38a:	|  |  \----> move.l 8(sp),d0
    f38e:	|  |         move.l d0,d1
    f390:	|  |         subq.l #1,d1
    f392:	|  |         move.l d1,8(sp)
    f396:	|  |         tst.l d0
    f398:	|  \-------- bne.s f358 <builtIn_pickOne+0x36>
	}
	return BR_CONTINUE;
    f39a:	|            moveq #2,d0
}
    f39c:	\----------> addq.l #4,sp
    f39e:	             rts

0000f3a0 <builtIn_substring>:

builtIn(substring)
{
    f3a0:	       lea -40(sp),sp
    f3a4:	       move.l a6,-(sp)
    f3a6:	       move.l d2,-(sp)
    char *newString;
    int start, length;

    //debugOut ("BUILTIN: substring\n");

    if (!getValueType(&length, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    f3a8:	       movea.l 56(sp),a0
    f3ac:	       move.l 24(a0),d0
    f3b0:	       move.l d0,-(sp)
    f3b2:	       pea 1 <_start+0x1>
    f3b6:	       lea 16(sp),a0
    f3ba:	       move.l a0,-(sp)
    f3bc:	       jsr 1474e <getValueType>
    f3c2:	       lea 12(sp),sp
    f3c6:	       tst.w d0
    f3c8:	   /-- bne.s f3d0 <builtIn_substring+0x30>
    f3ca:	   |   moveq #1,d0
    f3cc:	/--|-- bra.w f548 <builtIn_substring+0x1a8>
    trimStack(&fun->stack);
    f3d0:	|  \-> moveq #24,d0
    f3d2:	|      add.l 56(sp),d0
    f3d6:	|      move.l d0,-(sp)
    f3d8:	|      jsr 150d2 <trimStack>
    f3de:	|      addq.l #4,sp
    if (!getValueType(&start, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    f3e0:	|      movea.l 56(sp),a0
    f3e4:	|      move.l 24(a0),d0
    f3e8:	|      move.l d0,-(sp)
    f3ea:	|      pea 1 <_start+0x1>
    f3ee:	|      lea 20(sp),a0
    f3f2:	|      move.l a0,-(sp)
    f3f4:	|      jsr 1474e <getValueType>
    f3fa:	|      lea 12(sp),sp
    f3fe:	|      tst.w d0
    f400:	|  /-- bne.s f408 <builtIn_substring+0x68>
    f402:	|  |   moveq #1,d0
    f404:	+--|-- bra.w f548 <builtIn_substring+0x1a8>
    trimStack(&fun->stack);
    f408:	|  \-> moveq #24,d0
    f40a:	|      add.l 56(sp),d0
    f40e:	|      move.l d0,-(sp)
    f410:	|      jsr 150d2 <trimStack>
    f416:	|      addq.l #4,sp
    wholeString = getTextFromAnyVar(&(fun->stack->thisVar));
    f418:	|      movea.l 56(sp),a0
    f41c:	|      move.l 24(a0),d0
    f420:	|      move.l d0,-(sp)
    f422:	|      jsr 14d24 <getTextFromAnyVar>
    f428:	|      addq.l #4,sp
    f42a:	|      move.l d0,44(sp)
    trimStack(&fun->stack);
    f42e:	|      moveq #24,d0
    f430:	|      add.l 56(sp),d0
    f434:	|      move.l d0,-(sp)
    f436:	|      jsr 150d2 <trimStack>
    f43c:	|      addq.l #4,sp
    
    if (strlen(wholeString) < (ULONG) start + length) {
    f43e:	|      move.l 44(sp),-(sp)
    f442:	|      jsr 13c3a <strlen>
    f448:	|      addq.l #4,sp
    f44a:	|      move.l d0,d1
    f44c:	|      move.l 12(sp),d0
    f450:	|      movea.l d0,a0
    f452:	|      move.l 8(sp),d0
    f456:	|      add.l a0,d0
    f458:	|      cmp.l d1,d0
    f45a:	|  /-- bls.s f490 <builtIn_substring+0xf0>
        length = strlen(wholeString) - start;
    f45c:	|  |   move.l 44(sp),-(sp)
    f460:	|  |   jsr 13c3a <strlen>
    f466:	|  |   addq.l #4,sp
    f468:	|  |   move.l d0,d1
    f46a:	|  |   move.l 12(sp),d0
    f46e:	|  |   sub.l d0,d1
    f470:	|  |   move.l d1,d0
    f472:	|  |   move.l d0,8(sp)
        if (strlen(wholeString) < (ULONG) start) {
    f476:	|  |   move.l 44(sp),-(sp)
    f47a:	|  |   jsr 13c3a <strlen>
    f480:	|  |   addq.l #4,sp
    f482:	|  |   move.l d0,d1
    f484:	|  |   move.l 12(sp),d0
    f488:	|  |   cmp.l d1,d0
    f48a:	|  +-- bls.s f490 <builtIn_substring+0xf0>
            start = 0;
    f48c:	|  |   clr.l 12(sp)
        }
    }
    if (length < 0) {
    f490:	|  \-> move.l 8(sp),d0
    f494:	|  /-- bpl.s f49a <builtIn_substring+0xfa>
        length = 0;
    f496:	|  |   clr.l 8(sp)
    }
    
    int startoffset = start;
    f49a:	|  \-> move.l 12(sp),40(sp)
    int endoffset = start + length;
    f4a0:	|      move.l 12(sp),d1
    f4a4:	|      move.l 8(sp),d0
    f4a8:	|      move.l d1,d2
    f4aa:	|      add.l d0,d2
    f4ac:	|      move.l d2,36(sp)

    newString = AllocVec(endoffset - startoffset + 1, MEMF_ANY);
    f4b0:	|      move.l 36(sp),d0
    f4b4:	|      sub.l 40(sp),d0
    f4b8:	|      addq.l #1,d0
    f4ba:	|      move.l d0,32(sp)
    f4be:	|      clr.l 28(sp)
    f4c2:	|      move.l 1c85c <SysBase>,d0
    f4c8:	|      movea.l d0,a6
    f4ca:	|      move.l 32(sp),d0
    f4ce:	|      move.l 28(sp),d1
    f4d2:	|      jsr -684(a6)
    f4d6:	|      move.l d0,24(sp)
    f4da:	|      move.l 24(sp),d0
    f4de:	|      move.l d0,20(sp)
    if (!newString) {
    f4e2:	|  /-- bne.s f4e8 <builtIn_substring+0x148>
        return BR_ERROR;
    f4e4:	|  |   moveq #1,d0
    f4e6:	+--|-- bra.s f548 <builtIn_substring+0x1a8>
    }
    
    memcpy(newString, wholeString + startoffset, endoffset - startoffset);
    f4e8:	|  \-> move.l 36(sp),d0
    f4ec:	|      sub.l 40(sp),d0
    f4f0:	|      move.l d0,d1
    f4f2:	|      move.l 40(sp),d0
    f4f6:	|      add.l 44(sp),d0
    f4fa:	|      move.l d1,-(sp)
    f4fc:	|      move.l d0,-(sp)
    f4fe:	|      move.l 28(sp),-(sp)
    f502:	|      jsr 1712a <memcpy>
    f508:	|      lea 12(sp),sp
    newString[endoffset - startoffset] = 0;
    f50c:	|      move.l 36(sp),d0
    f510:	|      sub.l 40(sp),d0
    f514:	|      movea.l 20(sp),a0
    f518:	|      adda.l d0,a0
    f51a:	|      clr.b (a0)
    
    makeTextVar(&fun->reg, newString);
    f51c:	|      moveq #28,d0
    f51e:	|      add.l 56(sp),d0
    f522:	|      move.l 20(sp),-(sp)
    f526:	|      move.l d0,-(sp)
    f528:	|      jsr 14970 <makeTextVar>
    f52e:	|      addq.l #8,sp
    FreeVec(newString);
    f530:	|      move.l 20(sp),16(sp)
    f536:	|      move.l 1c85c <SysBase>,d0
    f53c:	|      movea.l d0,a6
    f53e:	|      movea.l 16(sp),a1
    f542:	|      jsr -690(a6)
    return BR_CONTINUE;
    f546:	|      moveq #2,d0
}
    f548:	\----> move.l (sp)+,d2
    f54a:	       movea.l (sp)+,a6
    f54c:	       lea 40(sp),sp
    f550:	       rts

0000f552 <builtIn_stringLength>:

builtIn(stringLength)
{
    f552:	subq.l #8,sp
    f554:	move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    f556:	movea.l 20(sp),a0
    f55a:	move.l 24(a0),d0
    f55e:	move.l d0,-(sp)
    f560:	jsr 14d24 <getTextFromAnyVar>
    f566:	addq.l #4,sp
    f568:	move.l d0,8(sp)
	trimStack (&fun -> stack);
    f56c:	moveq #24,d0
    f56e:	add.l 20(sp),d0
    f572:	move.l d0,-(sp)
    f574:	jsr 150d2 <trimStack>
    f57a:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, strlen(newText));
    f57c:	move.l 8(sp),-(sp)
    f580:	jsr 13c3a <strlen>
    f586:	addq.l #4,sp
    f588:	move.l d0,d1
    f58a:	moveq #28,d0
    f58c:	add.l 20(sp),d0
    f590:	move.l d1,-(sp)
    f592:	pea 1 <_start+0x1>
    f596:	move.l d0,-(sp)
    f598:	jsr 15040 <setVariable>
    f59e:	lea 12(sp),sp
	FreeVec(newText);
    f5a2:	move.l 8(sp),4(sp)
    f5a8:	move.l 1c85c <SysBase>,d0
    f5ae:	movea.l d0,a6
    f5b0:	movea.l 4(sp),a1
    f5b4:	jsr -690(a6)
	return BR_CONTINUE;
    f5b8:	moveq #2,d0
}
    f5ba:	movea.l (sp)+,a6
    f5bc:	addq.l #8,sp
    f5be:	rts

0000f5c0 <builtIn_newStack>:

builtIn(newStack)
{
    f5c0:	             lea -12(sp),sp
    f5c4:	             move.l a6,-(sp)
    UNUSEDALL
    unlinkVar(&fun->reg);
    f5c6:	             moveq #28,d0
    f5c8:	             add.l 24(sp),d0
    f5cc:	             move.l d0,-(sp)
    f5ce:	             jsr 1499c <unlinkVar>
    f5d4:	             addq.l #4,sp

    // Return value
    fun->reg.varType = SVT_STACK;
    f5d6:	             movea.l 24(sp),a0
    f5da:	             moveq #6,d0
    f5dc:	             move.l d0,28(a0)
    fun->reg.varData.theStack = AllocVec(sizeof(struct stackHandler), MEMF_ANY);
    f5e0:	             moveq #12,d1
    f5e2:	             move.l d1,12(sp)
    f5e6:	             clr.l 8(sp)
    f5ea:	             move.l 1c85c <SysBase>,d0
    f5f0:	             movea.l d0,a6
    f5f2:	             move.l 12(sp),d0
    f5f6:	             move.l 8(sp),d1
    f5fa:	             jsr -684(a6)
    f5fe:	             move.l d0,4(sp)
    f602:	             move.l 4(sp),d0
    f606:	             movea.l 24(sp),a0
    f60a:	             move.l d0,32(a0)
    if (!fun->reg.varData.theStack) return BR_ERROR;
    f60e:	             movea.l 24(sp),a0
    f612:	             move.l 32(a0),d0
    f616:	         /-- bne.s f61e <builtIn_newStack+0x5e>
    f618:	         |   moveq #1,d0
    f61a:	/--------|-- bra.w f6b0 <builtIn_newStack+0xf0>
    fun->reg.varData.theStack->first = NULL;
    f61e:	|        \-> movea.l 24(sp),a0
    f622:	|            movea.l 32(a0),a0
    f626:	|            clr.l (a0)
    fun->reg.varData.theStack->last = NULL;
    f628:	|            movea.l 24(sp),a0
    f62c:	|            movea.l 32(a0),a0
    f630:	|            clr.l 4(a0)
    fun->reg.varData.theStack->timesUsed = 1;
    f634:	|            movea.l 24(sp),a0
    f638:	|            movea.l 32(a0),a0
    f63c:	|            moveq #1,d0
    f63e:	|            move.l d0,8(a0)
    
    while (numParams--) {
    f642:	|     /----- bra.s f69e <builtIn_newStack+0xde>
        if (!addVarToStack(&fun->stack->thisVar, &fun->reg.varData.theStack->first)) return BR_ERROR;
    f644:	|  /--|----> movea.l 24(sp),a0
    f648:	|  |  |      move.l 32(a0),d0
    f64c:	|  |  |      move.l d0,d1
    f64e:	|  |  |      movea.l 24(sp),a0
    f652:	|  |  |      move.l 24(a0),d0
    f656:	|  |  |      move.l d1,-(sp)
    f658:	|  |  |      move.l d0,-(sp)
    f65a:	|  |  |      jsr 13f8a <addVarToStack>
    f660:	|  |  |      addq.l #8,sp
    f662:	|  |  |      tst.w d0
    f664:	|  |  |  /-- bne.s f66a <builtIn_newStack+0xaa>
    f666:	|  |  |  |   moveq #1,d0
    f668:	+--|--|--|-- bra.s f6b0 <builtIn_newStack+0xf0>
        if (fun->reg.varData.theStack->last == NULL) {
    f66a:	|  |  |  \-> movea.l 24(sp),a0
    f66e:	|  |  |      movea.l 32(a0),a0
    f672:	|  |  |      move.l 4(a0),d0
    f676:	|  |  |  /-- bne.s f68e <builtIn_newStack+0xce>
            fun->reg.varData.theStack->last = fun->reg.varData.theStack->first;
    f678:	|  |  |  |   movea.l 24(sp),a0
    f67c:	|  |  |  |   movea.l 32(a0),a1
    f680:	|  |  |  |   movea.l 24(sp),a0
    f684:	|  |  |  |   movea.l 32(a0),a0
    f688:	|  |  |  |   move.l (a1),d0
    f68a:	|  |  |  |   move.l d0,4(a0)
        }
        trimStack(&fun->stack);
    f68e:	|  |  |  \-> moveq #24,d0
    f690:	|  |  |      add.l 24(sp),d0
    f694:	|  |  |      move.l d0,-(sp)
    f696:	|  |  |      jsr 150d2 <trimStack>
    f69c:	|  |  |      addq.l #4,sp
    while (numParams--) {
    f69e:	|  |  \----> move.l 20(sp),d0
    f6a2:	|  |         move.l d0,d1
    f6a4:	|  |         subq.l #1,d1
    f6a6:	|  |         move.l d1,20(sp)
    f6aa:	|  |         tst.l d0
    f6ac:	|  \-------- bne.s f644 <builtIn_newStack+0x84>
    }
    return BR_CONTINUE;
    f6ae:	|            moveq #2,d0
}
    f6b0:	\----------> movea.l (sp)+,a6
    f6b2:	             lea 12(sp),sp
    f6b6:	             rts

0000f6b8 <builtIn_stackSize>:
#define builtIn_wait builtIn_newStack

builtIn(stackSize)
{
	UNUSEDALL
	switch (fun -> stack -> thisVar.varType) {
    f6b8:	          movea.l 8(sp),a0
    f6bc:	          movea.l 24(a0),a0
    f6c0:	          move.l (a0),d0
    f6c2:	          moveq #6,d1
    f6c4:	          cmp.l d0,d1
    f6c6:	      /-- beq.s f6e2 <builtIn_stackSize+0x2a>
    f6c8:	      |   moveq #10,d1
    f6ca:	      |   cmp.l d0,d1
    f6cc:	   /--|-- beq.s f726 <builtIn_stackSize+0x6e>
			setVariable (&fun -> reg, SVT_INT, fun -> stack -> thisVar.varData.fastArray -> size);
			trimStack (&fun -> stack);
			return BR_CONTINUE;

		default:
			break;
    f6ce:	   |  |   nop
	}
	KPrintF ("Parameter isn't a stack or a fast array.");
    f6d0:	   |  |   pea 1977c <PutChar+0x1b32>
    f6d6:	   |  |   jsr 17176 <KPrintF>
    f6dc:	   |  |   addq.l #4,sp
	return BR_ERROR;
    f6de:	   |  |   moveq #1,d0
    f6e0:	/--|--|-- bra.s f760 <builtIn_stackSize+0xa8>
			setVariable (&fun -> reg, SVT_INT, stackSize (fun -> stack -> thisVar.varData.theStack));
    f6e2:	|  |  \-> movea.l 8(sp),a0
    f6e6:	|  |      movea.l 24(a0),a0
    f6ea:	|  |      move.l 4(a0),d0
    f6ee:	|  |      move.l d0,-(sp)
    f6f0:	|  |      jsr 150ae <stackSize>
    f6f6:	|  |      addq.l #4,sp
    f6f8:	|  |      move.l d0,d1
    f6fa:	|  |      moveq #28,d0
    f6fc:	|  |      add.l 8(sp),d0
    f700:	|  |      move.l d1,-(sp)
    f702:	|  |      pea 1 <_start+0x1>
    f706:	|  |      move.l d0,-(sp)
    f708:	|  |      jsr 15040 <setVariable>
    f70e:	|  |      lea 12(sp),sp
			trimStack (&fun -> stack);
    f712:	|  |      moveq #24,d0
    f714:	|  |      add.l 8(sp),d0
    f718:	|  |      move.l d0,-(sp)
    f71a:	|  |      jsr 150d2 <trimStack>
    f720:	|  |      addq.l #4,sp
			return BR_CONTINUE;
    f722:	|  |      moveq #2,d0
    f724:	+--|----- bra.s f760 <builtIn_stackSize+0xa8>
			setVariable (&fun -> reg, SVT_INT, fun -> stack -> thisVar.varData.fastArray -> size);
    f726:	|  \----> movea.l 8(sp),a0
    f72a:	|         movea.l 24(a0),a0
    f72e:	|         movea.l 4(a0),a0
    f732:	|         move.l 4(a0),d1
    f736:	|         moveq #28,d0
    f738:	|         add.l 8(sp),d0
    f73c:	|         move.l d1,-(sp)
    f73e:	|         pea 1 <_start+0x1>
    f742:	|         move.l d0,-(sp)
    f744:	|         jsr 15040 <setVariable>
    f74a:	|         lea 12(sp),sp
			trimStack (&fun -> stack);
    f74e:	|         moveq #24,d0
    f750:	|         add.l 8(sp),d0
    f754:	|         move.l d0,-(sp)
    f756:	|         jsr 150d2 <trimStack>
    f75c:	|         addq.l #4,sp
			return BR_CONTINUE;
    f75e:	|         moveq #2,d0
}
    f760:	\-------> rts

0000f762 <builtIn_copyStack>:

builtIn(copyStack)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    f762:	       movea.l 8(sp),a0
    f766:	       movea.l 24(a0),a0
    f76a:	       move.l (a0),d0
    f76c:	       moveq #6,d1
    f76e:	       cmp.l d0,d1
    f770:	   /-- beq.s f784 <builtIn_copyStack+0x22>
		KPrintF ("Parameter isn't a stack.");
    f772:	   |   pea 197a5 <PutChar+0x1b5b>
    f778:	   |   jsr 17176 <KPrintF>
    f77e:	   |   addq.l #4,sp
		return BR_ERROR;
    f780:	   |   moveq #1,d0
    f782:	/--|-- bra.s f7b8 <builtIn_copyStack+0x56>
	}
	// Return value
	if (! copyStack (&fun -> stack -> thisVar, &fun -> reg)) return BR_ERROR;
    f784:	|  \-> moveq #28,d0
    f786:	|      add.l 8(sp),d0
    f78a:	|      movea.l 8(sp),a0
    f78e:	|      move.l 24(a0),d1
    f792:	|      move.l d0,-(sp)
    f794:	|      move.l d1,-(sp)
    f796:	|      jsr 14254 <copyStack>
    f79c:	|      addq.l #8,sp
    f79e:	|      tst.w d0
    f7a0:	|  /-- bne.s f7a6 <builtIn_copyStack+0x44>
    f7a2:	|  |   moveq #1,d0
    f7a4:	+--|-- bra.s f7b8 <builtIn_copyStack+0x56>
	trimStack (&fun -> stack);
    f7a6:	|  \-> moveq #24,d0
    f7a8:	|      add.l 8(sp),d0
    f7ac:	|      move.l d0,-(sp)
    f7ae:	|      jsr 150d2 <trimStack>
    f7b4:	|      addq.l #4,sp
	return BR_CONTINUE;
    f7b6:	|      moveq #2,d0
}
    f7b8:	\----> rts

0000f7ba <builtIn_pushToStack>:

builtIn(pushToStack)
{
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    f7ba:	       movea.l 8(sp),a0
    f7be:	       movea.l 24(a0),a0
    f7c2:	       movea.l 8(a0),a0
    f7c6:	       move.l (a0),d0
    f7c8:	       moveq #6,d1
    f7ca:	       cmp.l d0,d1
    f7cc:	   /-- beq.s f7e2 <builtIn_pushToStack+0x28>
		KPrintF("Parameter isn't a stack");
    f7ce:	   |   pea 197be <PutChar+0x1b74>
    f7d4:	   |   jsr 17176 <KPrintF>
    f7da:	   |   addq.l #4,sp
		return BR_ERROR;
    f7dc:	   |   moveq #1,d0
    f7de:	/--|-- bra.w f870 <builtIn_pushToStack+0xb6>
	}

	if (! addVarToStack (&fun -> stack -> thisVar, &fun -> stack -> next -> thisVar.varData.theStack -> first))
    f7e2:	|  \-> movea.l 8(sp),a0
    f7e6:	|      movea.l 24(a0),a0
    f7ea:	|      movea.l 8(a0),a0
    f7ee:	|      move.l 4(a0),d0
    f7f2:	|      move.l d0,d1
    f7f4:	|      movea.l 8(sp),a0
    f7f8:	|      move.l 24(a0),d0
    f7fc:	|      move.l d1,-(sp)
    f7fe:	|      move.l d0,-(sp)
    f800:	|      jsr 13f8a <addVarToStack>
    f806:	|      addq.l #8,sp
    f808:	|      tst.w d0
    f80a:	|  /-- bne.s f810 <builtIn_pushToStack+0x56>
		return BR_ERROR;
    f80c:	|  |   moveq #1,d0
    f80e:	+--|-- bra.s f870 <builtIn_pushToStack+0xb6>

	if (fun -> stack -> next -> thisVar.varData.theStack -> first -> next == NULL)
    f810:	|  \-> movea.l 8(sp),a0
    f814:	|      movea.l 24(a0),a0
    f818:	|      movea.l 8(a0),a0
    f81c:	|      movea.l 4(a0),a0
    f820:	|      movea.l (a0),a0
    f822:	|      move.l 8(a0),d0
    f826:	|  /-- bne.s f84e <builtIn_pushToStack+0x94>
		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> first;
    f828:	|  |   movea.l 8(sp),a0
    f82c:	|  |   movea.l 24(a0),a0
    f830:	|  |   movea.l 8(a0),a0
    f834:	|  |   movea.l 4(a0),a1
    f838:	|  |   movea.l 8(sp),a0
    f83c:	|  |   movea.l 24(a0),a0
    f840:	|  |   movea.l 8(a0),a0
    f844:	|  |   movea.l 4(a0),a0
    f848:	|  |   move.l (a1),d0
    f84a:	|  |   move.l d0,4(a0)

	trimStack (&fun -> stack);
    f84e:	|  \-> moveq #24,d0
    f850:	|      add.l 8(sp),d0
    f854:	|      move.l d0,-(sp)
    f856:	|      jsr 150d2 <trimStack>
    f85c:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    f85e:	|      moveq #24,d0
    f860:	|      add.l 8(sp),d0
    f864:	|      move.l d0,-(sp)
    f866:	|      jsr 150d2 <trimStack>
    f86c:	|      addq.l #4,sp
	return BR_CONTINUE;
    f86e:	|      moveq #2,d0
}
    f870:	\----> rts

0000f872 <builtIn_enqueue>:

builtIn(enqueue)
{
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    f872:	             movea.l 8(sp),a0
    f876:	             movea.l 24(a0),a0
    f87a:	             movea.l 8(a0),a0
    f87e:	             move.l (a0),d0
    f880:	             moveq #6,d1
    f882:	             cmp.l d0,d1
    f884:	         /-- beq.s f89a <builtIn_enqueue+0x28>
		KPrintF ("Parameter isn't a stack");
    f886:	         |   pea 197be <PutChar+0x1b74>
    f88c:	         |   jsr 17176 <KPrintF>
    f892:	         |   addq.l #4,sp
		return BR_ERROR;
    f894:	         |   moveq #1,d0
    f896:	/--------|-- bra.w f988 <builtIn_enqueue+0x116>
	}

	if (fun -> stack -> next -> thisVar.varData.theStack -> first == NULL)
    f89a:	|        \-> movea.l 8(sp),a0
    f89e:	|            movea.l 24(a0),a0
    f8a2:	|            movea.l 8(a0),a0
    f8a6:	|            movea.l 4(a0),a0
    f8aa:	|            move.l (a0),d0
    f8ac:	|     /----- bne.s f906 <builtIn_enqueue+0x94>
	{
		if (! addVarToStack (&fun -> stack -> thisVar, &fun -> stack -> next -> thisVar.varData.theStack -> first))
    f8ae:	|     |      movea.l 8(sp),a0
    f8b2:	|     |      movea.l 24(a0),a0
    f8b6:	|     |      movea.l 8(a0),a0
    f8ba:	|     |      move.l 4(a0),d0
    f8be:	|     |      move.l d0,d1
    f8c0:	|     |      movea.l 8(sp),a0
    f8c4:	|     |      move.l 24(a0),d0
    f8c8:	|     |      move.l d1,-(sp)
    f8ca:	|     |      move.l d0,-(sp)
    f8cc:	|     |      jsr 13f8a <addVarToStack>
    f8d2:	|     |      addq.l #8,sp
    f8d4:	|     |      tst.w d0
    f8d6:	|     |  /-- bne.s f8de <builtIn_enqueue+0x6c>
			return BR_ERROR;
    f8d8:	|     |  |   moveq #1,d0
    f8da:	+-----|--|-- bra.w f988 <builtIn_enqueue+0x116>

		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> first;
    f8de:	|     |  \-> movea.l 8(sp),a0
    f8e2:	|     |      movea.l 24(a0),a0
    f8e6:	|     |      movea.l 8(a0),a0
    f8ea:	|     |      movea.l 4(a0),a1
    f8ee:	|     |      movea.l 8(sp),a0
    f8f2:	|     |      movea.l 24(a0),a0
    f8f6:	|     |      movea.l 8(a0),a0
    f8fa:	|     |      movea.l 4(a0),a0
    f8fe:	|     |      move.l (a1),d0
    f900:	|     |      move.l d0,4(a0)
    f904:	|  /--|----- bra.s f966 <builtIn_enqueue+0xf4>
	}
	else
	{
		if (! addVarToStack (&fun -> stack -> thisVar,
							 &fun -> stack -> next -> thisVar.varData.theStack -> last -> next))
    f906:	|  |  \----> movea.l 8(sp),a0
    f90a:	|  |         movea.l 24(a0),a0
    f90e:	|  |         movea.l 8(a0),a0
    f912:	|  |         movea.l 4(a0),a0
    f916:	|  |         move.l 4(a0),d0
		if (! addVarToStack (&fun -> stack -> thisVar,
    f91a:	|  |         move.l d0,d1
    f91c:	|  |         addq.l #8,d1
    f91e:	|  |         movea.l 8(sp),a0
    f922:	|  |         move.l 24(a0),d0
    f926:	|  |         move.l d1,-(sp)
    f928:	|  |         move.l d0,-(sp)
    f92a:	|  |         jsr 13f8a <addVarToStack>
    f930:	|  |         addq.l #8,sp
    f932:	|  |         tst.w d0
    f934:	|  |     /-- bne.s f93a <builtIn_enqueue+0xc8>
			return BR_ERROR;
    f936:	|  |     |   moveq #1,d0
    f938:	+--|-----|-- bra.s f988 <builtIn_enqueue+0x116>
		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> last -> next;
    f93a:	|  |     \-> movea.l 8(sp),a0
    f93e:	|  |         movea.l 24(a0),a0
    f942:	|  |         movea.l 8(a0),a0
    f946:	|  |         movea.l 4(a0),a0
    f94a:	|  |         movea.l 4(a0),a1
    f94e:	|  |         movea.l 8(sp),a0
    f952:	|  |         movea.l 24(a0),a0
    f956:	|  |         movea.l 8(a0),a0
    f95a:	|  |         movea.l 4(a0),a0
    f95e:	|  |         move.l 8(a1),d0
    f962:	|  |         move.l d0,4(a0)
	}

	trimStack (&fun -> stack);
    f966:	|  \-------> moveq #24,d0
    f968:	|            add.l 8(sp),d0
    f96c:	|            move.l d0,-(sp)
    f96e:	|            jsr 150d2 <trimStack>
    f974:	|            addq.l #4,sp
	trimStack (&fun -> stack);
    f976:	|            moveq #24,d0
    f978:	|            add.l 8(sp),d0
    f97c:	|            move.l d0,-(sp)
    f97e:	|            jsr 150d2 <trimStack>
    f984:	|            addq.l #4,sp
	return BR_CONTINUE;
    f986:	|            moveq #2,d0
}
    f988:	\----------> rts

0000f98a <builtIn_deleteFromStack>:

builtIn(deleteFromStack)
{
    f98a:	       move.l a2,-(sp)
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    f98c:	       movea.l 12(sp),a0
    f990:	       movea.l 24(a0),a0
    f994:	       movea.l 8(a0),a0
    f998:	       move.l (a0),d0
    f99a:	       moveq #6,d1
    f99c:	       cmp.l d0,d1
    f99e:	   /-- beq.s f9b4 <builtIn_deleteFromStack+0x2a>
		KPrintF ("Parameter isn't a stack.");
    f9a0:	   |   pea 197a5 <PutChar+0x1b5b>
    f9a6:	   |   jsr 17176 <KPrintF>
    f9ac:	   |   addq.l #4,sp
		return BR_ERROR;
    f9ae:	   |   moveq #1,d0
    f9b0:	/--|-- bra.w fa4a <builtIn_deleteFromStack+0xc0>
	}

	// Return value
	setVariable (&fun -> reg, SVT_INT,
				 deleteVarFromStack (&fun -> stack -> thisVar,
									 &fun -> stack -> next -> thisVar.varData.theStack -> first, FALSE));
    f9b4:	|  \-> movea.l 12(sp),a0
    f9b8:	|      movea.l 24(a0),a0
    f9bc:	|      movea.l 8(a0),a0
    f9c0:	|      move.l 4(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    f9c4:	|      move.l d0,d1
				 deleteVarFromStack (&fun -> stack -> thisVar,
    f9c6:	|      movea.l 12(sp),a0
    f9ca:	|      move.l 24(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    f9ce:	|      clr.l -(sp)
    f9d0:	|      move.l d1,-(sp)
    f9d2:	|      move.l d0,-(sp)
    f9d4:	|      jsr 1432a <deleteVarFromStack>
    f9da:	|      lea 12(sp),sp
    f9de:	|      move.l d0,d1
    f9e0:	|      moveq #28,d0
    f9e2:	|      add.l 12(sp),d0
    f9e6:	|      move.l d1,-(sp)
    f9e8:	|      pea 1 <_start+0x1>
    f9ec:	|      move.l d0,-(sp)
    f9ee:	|      jsr 15040 <setVariable>
    f9f4:	|      lea 12(sp),sp

	// Horrible hacking because 'last' value might now be wrong!
	fun->stack->next->thisVar.varData.theStack->last = stackFindLast (fun->stack->next->thisVar.varData.theStack->first);
    f9f8:	|      movea.l 12(sp),a0
    f9fc:	|      movea.l 24(a0),a0
    fa00:	|      movea.l 8(a0),a0
    fa04:	|      movea.l 4(a0),a0
    fa08:	|      move.l (a0),d0
    fa0a:	|      movea.l 12(sp),a0
    fa0e:	|      movea.l 24(a0),a0
    fa12:	|      movea.l 8(a0),a0
    fa16:	|      movea.l 4(a0),a2
    fa1a:	|      move.l d0,-(sp)
    fa1c:	|      jsr 1508a <stackFindLast>
    fa22:	|      addq.l #4,sp
    fa24:	|      move.l d0,4(a2)

	trimStack (&fun -> stack);
    fa28:	|      moveq #24,d0
    fa2a:	|      add.l 12(sp),d0
    fa2e:	|      move.l d0,-(sp)
    fa30:	|      jsr 150d2 <trimStack>
    fa36:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    fa38:	|      moveq #24,d0
    fa3a:	|      add.l 12(sp),d0
    fa3e:	|      move.l d0,-(sp)
    fa40:	|      jsr 150d2 <trimStack>
    fa46:	|      addq.l #4,sp
	return BR_CONTINUE;
    fa48:	|      moveq #2,d0
}
    fa4a:	\----> movea.l (sp)+,a2
    fa4c:	       rts

0000fa4e <builtIn_deleteAllFromStack>:

builtIn(deleteAllFromStack)
{
    fa4e:	       move.l a2,-(sp)
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    fa50:	       movea.l 12(sp),a0
    fa54:	       movea.l 24(a0),a0
    fa58:	       movea.l 8(a0),a0
    fa5c:	       move.l (a0),d0
    fa5e:	       moveq #6,d1
    fa60:	       cmp.l d0,d1
    fa62:	   /-- beq.s fa78 <builtIn_deleteAllFromStack+0x2a>
		KPrintF ("Parameter isn't a stack.");
    fa64:	   |   pea 197a5 <PutChar+0x1b5b>
    fa6a:	   |   jsr 17176 <KPrintF>
    fa70:	   |   addq.l #4,sp
		return BR_ERROR;
    fa72:	   |   moveq #1,d0
    fa74:	/--|-- bra.w fb10 <builtIn_deleteAllFromStack+0xc2>
	}

	// Return value
	setVariable (&fun -> reg, SVT_INT,
				 deleteVarFromStack (&fun -> stack -> thisVar,
									 &fun -> stack -> next -> thisVar.varData.theStack -> first, TRUE));
    fa78:	|  \-> movea.l 12(sp),a0
    fa7c:	|      movea.l 24(a0),a0
    fa80:	|      movea.l 8(a0),a0
    fa84:	|      move.l 4(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    fa88:	|      move.l d0,d1
				 deleteVarFromStack (&fun -> stack -> thisVar,
    fa8a:	|      movea.l 12(sp),a0
    fa8e:	|      move.l 24(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    fa92:	|      pea 1 <_start+0x1>
    fa96:	|      move.l d1,-(sp)
    fa98:	|      move.l d0,-(sp)
    fa9a:	|      jsr 1432a <deleteVarFromStack>
    faa0:	|      lea 12(sp),sp
    faa4:	|      move.l d0,d1
    faa6:	|      moveq #28,d0
    faa8:	|      add.l 12(sp),d0
    faac:	|      move.l d1,-(sp)
    faae:	|      pea 1 <_start+0x1>
    fab2:	|      move.l d0,-(sp)
    fab4:	|      jsr 15040 <setVariable>
    faba:	|      lea 12(sp),sp

	// Horrible hacking because 'last' value might now be wrong!
	fun->stack->next->thisVar.varData.theStack->last = stackFindLast (fun->stack->next->thisVar.varData.theStack->first);
    fabe:	|      movea.l 12(sp),a0
    fac2:	|      movea.l 24(a0),a0
    fac6:	|      movea.l 8(a0),a0
    faca:	|      movea.l 4(a0),a0
    face:	|      move.l (a0),d0
    fad0:	|      movea.l 12(sp),a0
    fad4:	|      movea.l 24(a0),a0
    fad8:	|      movea.l 8(a0),a0
    fadc:	|      movea.l 4(a0),a2
    fae0:	|      move.l d0,-(sp)
    fae2:	|      jsr 1508a <stackFindLast>
    fae8:	|      addq.l #4,sp
    faea:	|      move.l d0,4(a2)

	trimStack (&fun -> stack);
    faee:	|      moveq #24,d0
    faf0:	|      add.l 12(sp),d0
    faf4:	|      move.l d0,-(sp)
    faf6:	|      jsr 150d2 <trimStack>
    fafc:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    fafe:	|      moveq #24,d0
    fb00:	|      add.l 12(sp),d0
    fb04:	|      move.l d0,-(sp)
    fb06:	|      jsr 150d2 <trimStack>
    fb0c:	|      addq.l #4,sp
	return BR_CONTINUE;
    fb0e:	|      moveq #2,d0
}
    fb10:	\----> movea.l (sp)+,a2
    fb12:	       rts

0000fb14 <builtIn_popFromStack>:

builtIn(popFromStack)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    fb14:	       movea.l 8(sp),a0
    fb18:	       movea.l 24(a0),a0
    fb1c:	       move.l (a0),d0
    fb1e:	       moveq #6,d1
    fb20:	       cmp.l d0,d1
    fb22:	   /-- beq.s fb36 <builtIn_popFromStack+0x22>
		KPrintF ("Parameter isn't a stack.");
    fb24:	   |   pea 197a5 <PutChar+0x1b5b>
    fb2a:	   |   jsr 17176 <KPrintF>
    fb30:	   |   addq.l #4,sp
		return BR_ERROR;
    fb32:	   |   moveq #1,d0
    fb34:	/--|-- bra.s fba0 <builtIn_popFromStack+0x8c>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    fb36:	|  \-> movea.l 8(sp),a0
    fb3a:	|      movea.l 24(a0),a0
    fb3e:	|      movea.l 4(a0),a0
    fb42:	|      move.l (a0),d0
    fb44:	|  /-- bne.s fb58 <builtIn_popFromStack+0x44>
		KPrintF ("The stack's empty.");
    fb46:	|  |   pea 197d6 <PutChar+0x1b8c>
    fb4c:	|  |   jsr 17176 <KPrintF>
    fb52:	|  |   addq.l #4,sp
		return BR_ERROR;
    fb54:	|  |   moveq #1,d0
    fb56:	+--|-- bra.s fba0 <builtIn_popFromStack+0x8c>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> first -> thisVar), &fun -> reg);
    fb58:	|  \-> moveq #28,d0
    fb5a:	|      add.l 8(sp),d0
    fb5e:	|      movea.l 8(sp),a0
    fb62:	|      movea.l 24(a0),a0
    fb66:	|      movea.l 4(a0),a0
    fb6a:	|      move.l (a0),d1
    fb6c:	|      move.l d0,-(sp)
    fb6e:	|      move.l d1,-(sp)
    fb70:	|      jsr 14c08 <copyVariable>
    fb76:	|      addq.l #8,sp
	trimStack (&fun -> stack -> thisVar.varData.theStack -> first);
    fb78:	|      movea.l 8(sp),a0
    fb7c:	|      movea.l 24(a0),a0
    fb80:	|      move.l 4(a0),d0
    fb84:	|      move.l d0,-(sp)
    fb86:	|      jsr 150d2 <trimStack>
    fb8c:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    fb8e:	|      moveq #24,d0
    fb90:	|      add.l 8(sp),d0
    fb94:	|      move.l d0,-(sp)
    fb96:	|      jsr 150d2 <trimStack>
    fb9c:	|      addq.l #4,sp
	return BR_CONTINUE;
    fb9e:	|      moveq #2,d0
}
    fba0:	\----> rts

0000fba2 <builtIn_peekStart>:

builtIn(peekStart)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    fba2:	       movea.l 8(sp),a0
    fba6:	       movea.l 24(a0),a0
    fbaa:	       move.l (a0),d0
    fbac:	       moveq #6,d1
    fbae:	       cmp.l d0,d1
    fbb0:	   /-- beq.s fbc4 <builtIn_peekStart+0x22>
		KPrintF ("Parameter isn't a stack.");
    fbb2:	   |   pea 197a5 <PutChar+0x1b5b>
    fbb8:	   |   jsr 17176 <KPrintF>
    fbbe:	   |   addq.l #4,sp
		return BR_ERROR;
    fbc0:	   |   moveq #1,d0
    fbc2:	/--|-- bra.s fc18 <builtIn_peekStart+0x76>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    fbc4:	|  \-> movea.l 8(sp),a0
    fbc8:	|      movea.l 24(a0),a0
    fbcc:	|      movea.l 4(a0),a0
    fbd0:	|      move.l (a0),d0
    fbd2:	|  /-- bne.s fbe6 <builtIn_peekStart+0x44>
		KPrintF ("The stack's empty.");
    fbd4:	|  |   pea 197d6 <PutChar+0x1b8c>
    fbda:	|  |   jsr 17176 <KPrintF>
    fbe0:	|  |   addq.l #4,sp
		return BR_ERROR;
    fbe2:	|  |   moveq #1,d0
    fbe4:	+--|-- bra.s fc18 <builtIn_peekStart+0x76>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> first -> thisVar), &fun -> reg);
    fbe6:	|  \-> moveq #28,d0
    fbe8:	|      add.l 8(sp),d0
    fbec:	|      movea.l 8(sp),a0
    fbf0:	|      movea.l 24(a0),a0
    fbf4:	|      movea.l 4(a0),a0
    fbf8:	|      move.l (a0),d1
    fbfa:	|      move.l d0,-(sp)
    fbfc:	|      move.l d1,-(sp)
    fbfe:	|      jsr 14c08 <copyVariable>
    fc04:	|      addq.l #8,sp
	trimStack (&fun -> stack);
    fc06:	|      moveq #24,d0
    fc08:	|      add.l 8(sp),d0
    fc0c:	|      move.l d0,-(sp)
    fc0e:	|      jsr 150d2 <trimStack>
    fc14:	|      addq.l #4,sp
	return BR_CONTINUE;
    fc16:	|      moveq #2,d0
}
    fc18:	\----> rts

0000fc1a <builtIn_peekEnd>:

builtIn(peekEnd)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    fc1a:	       movea.l 8(sp),a0
    fc1e:	       movea.l 24(a0),a0
    fc22:	       move.l (a0),d0
    fc24:	       moveq #6,d1
    fc26:	       cmp.l d0,d1
    fc28:	   /-- beq.s fc3c <builtIn_peekEnd+0x22>
		KPrintF ("Parameter isn't a stack.");
    fc2a:	   |   pea 197a5 <PutChar+0x1b5b>
    fc30:	   |   jsr 17176 <KPrintF>
    fc36:	   |   addq.l #4,sp
		return BR_ERROR;
    fc38:	   |   moveq #1,d0
    fc3a:	/--|-- bra.s fc92 <builtIn_peekEnd+0x78>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    fc3c:	|  \-> movea.l 8(sp),a0
    fc40:	|      movea.l 24(a0),a0
    fc44:	|      movea.l 4(a0),a0
    fc48:	|      move.l (a0),d0
    fc4a:	|  /-- bne.s fc5e <builtIn_peekEnd+0x44>
		KPrintF ("The stack's empty.");
    fc4c:	|  |   pea 197d6 <PutChar+0x1b8c>
    fc52:	|  |   jsr 17176 <KPrintF>
    fc58:	|  |   addq.l #4,sp
		return BR_ERROR;
    fc5a:	|  |   moveq #1,d0
    fc5c:	+--|-- bra.s fc92 <builtIn_peekEnd+0x78>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> last -> thisVar), &fun -> reg);
    fc5e:	|  \-> moveq #28,d0
    fc60:	|      add.l 8(sp),d0
    fc64:	|      movea.l 8(sp),a0
    fc68:	|      movea.l 24(a0),a0
    fc6c:	|      movea.l 4(a0),a0
    fc70:	|      move.l 4(a0),d1
    fc74:	|      move.l d0,-(sp)
    fc76:	|      move.l d1,-(sp)
    fc78:	|      jsr 14c08 <copyVariable>
    fc7e:	|      addq.l #8,sp
	trimStack (&fun -> stack);
    fc80:	|      moveq #24,d0
    fc82:	|      add.l 8(sp),d0
    fc86:	|      move.l d0,-(sp)
    fc88:	|      jsr 150d2 <trimStack>
    fc8e:	|      addq.l #4,sp
	return BR_CONTINUE;
    fc90:	|      moveq #2,d0
}
    fc92:	\----> rts

0000fc94 <builtIn_random>:

builtIn(random)
{
    fc94:	       subq.l #4,sp
	UNUSEDALL
	int num;

	if (! getValueType(&num, SVT_INT,&fun -> stack -> thisVar))
    fc96:	       movea.l 12(sp),a0
    fc9a:	       move.l 24(a0),d0
    fc9e:	       move.l d0,-(sp)
    fca0:	       pea 1 <_start+0x1>
    fca4:	       move.l sp,d0
    fca6:	       addq.l #8,d0
    fca8:	       move.l d0,-(sp)
    fcaa:	       jsr 1474e <getValueType>
    fcb0:	       lea 12(sp),sp
    fcb4:	       tst.w d0
    fcb6:	   /-- bne.s fcbc <builtIn_random+0x28>
		return BR_ERROR;
    fcb8:	   |   moveq #1,d0
    fcba:	/--|-- bra.s fd06 <builtIn_random+0x72>

	trimStack (&fun -> stack);
    fcbc:	|  \-> moveq #24,d0
    fcbe:	|      add.l 12(sp),d0
    fcc2:	|      move.l d0,-(sp)
    fcc4:	|      jsr 150d2 <trimStack>
    fcca:	|      addq.l #4,sp
	if (num <= 0) num = 1;
    fccc:	|      move.l (sp),d0
    fcce:	|  /-- bgt.s fcd4 <builtIn_random+0x40>
    fcd0:	|  |   moveq #1,d0
    fcd2:	|  |   move.l d0,(sp)
	setVariable (&fun -> reg, SVT_INT, rand() % num);
    fcd4:	|  \-> jsr 15d76 <rand>
    fcda:	|      move.l d0,d1
    fcdc:	|      move.l (sp),d0
    fcde:	|      move.l d0,-(sp)
    fce0:	|      move.l d1,-(sp)
    fce2:	|      jsr 17c0e <__umodsi3>
    fce8:	|      addq.l #8,sp
    fcea:	|      move.l d0,d1
    fcec:	|      moveq #28,d0
    fcee:	|      add.l 12(sp),d0
    fcf2:	|      move.l d1,-(sp)
    fcf4:	|      pea 1 <_start+0x1>
    fcf8:	|      move.l d0,-(sp)
    fcfa:	|      jsr 15040 <setVariable>
    fd00:	|      lea 12(sp),sp
	return BR_CONTINUE;
    fd04:	|      moveq #2,d0
}
    fd06:	\----> addq.l #4,sp
    fd08:	       rts

0000fd0a <builtIn_setStatusColour>:
	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	statusBarColour ((byte) red, (byte) green, (byte) blue);
	return BR_CONTINUE; ToDo amigize this?*/
}
    fd0a:	nop
    fd0c:	rts

0000fd0e <builtIn_setLitStatusColour>:

	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	statusBarLitColour ((byte) red, (byte) green, (byte) blue);Todo - Amigize this?*/
	return BR_CONTINUE;
    fd0e:	moveq #2,d0
}
    fd10:	rts

0000fd12 <builtIn_setPasteColour>:

builtIn (setPasteColour)
{
    fd12:	       subq.l #4,sp
	UNUSEDALL
	int index;

	if (! getValueType ( &index, SVT_INT, &fun -> stack -> thisVar)) {
    fd14:	       movea.l 12(sp),a0
    fd18:	       move.l 24(a0),d0
    fd1c:	       move.l d0,-(sp)
    fd1e:	       pea 1 <_start+0x1>
    fd22:	       move.l sp,d0
    fd24:	       addq.l #8,d0
    fd26:	       move.l d0,-(sp)
    fd28:	       jsr 1474e <getValueType>
    fd2e:	       lea 12(sp),sp
    fd32:	       tst.w d0
    fd34:	   /-- bne.s fd48 <builtIn_setPasteColour+0x36>
		KPrintF ("setPasteColour: Parameter not a number");
    fd36:	   |   pea 197e9 <PutChar+0x1b9f>
    fd3c:	   |   jsr 17176 <KPrintF>
    fd42:	   |   addq.l #4,sp
		return BR_ERROR;
    fd44:	   |   moveq #1,d0
    fd46:	/--|-- bra.s fd88 <builtIn_setPasteColour+0x76>
	}
	trimStack (&fun -> stack);
    fd48:	|  \-> moveq #24,d0
    fd4a:	|      add.l 12(sp),d0
    fd4e:	|      move.l d0,-(sp)
    fd50:	|      jsr 150d2 <trimStack>
    fd56:	|      addq.l #4,sp


	textPaletteIndex = (UWORD)index;
    fd58:	|      move.l (sp),d0
    fd5a:	|      move.l d0,d0
    fd5c:	|      move.w d0,1c776 <textPaletteIndex>

	if( textPaletteIndex > 31) {
    fd62:	|      move.w 1c776 <textPaletteIndex>,d0
    fd68:	|      cmpi.w #31,d0
    fd6c:	|  /-- bls.s fd86 <builtIn_setPasteColour+0x74>
		KPrintF ("setPasteColour: Paletteindex out of Range");
    fd6e:	|  |   pea 19810 <PutChar+0x1bc6>
    fd74:	|  |   jsr 17176 <KPrintF>
    fd7a:	|  |   addq.l #4,sp
		textPaletteIndex = 0;
    fd7c:	|  |   clr.w 1c776 <textPaletteIndex>
		return BR_ERROR;
    fd82:	|  |   moveq #1,d0
    fd84:	+--|-- bra.s fd88 <builtIn_setPasteColour+0x76>
	}

	//setFontColour (pastePalette, (byte) red, (byte) green, (byte) blue);
	return BR_CONTINUE;
    fd86:	|  \-> moveq #2,d0
}
    fd88:	\----> addq.l #4,sp
    fd8a:	       rts

0000fd8c <builtIn_setBlankColour>:
	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	currentBlankColour = makeColour (red & 255, green & 255, blue & 255);
	setVariable (&fun -> reg, SVT_INT, 1);Todo Amigize this?*/
	return BR_CONTINUE;
    fd8c:	moveq #2,d0
}
    fd8e:	rts

0000fd90 <builtIn_setBurnColour>:

	currentBurnR = red;
	currentBurnG = green;
	currentBurnB = blue;
	setVariable (&fun -> reg, SVT_INT, 1);Todo Amigize this?*/
	return BR_CONTINUE;
    fd90:	moveq #2,d0
}
    fd92:	rts

0000fd94 <builtIn_setFont>:


builtIn(setFont)
{
    fd94:	       lea -16(sp),sp
    fd98:	       move.l a6,-(sp)
    UNUSEDALL
    int fileNumber, newHeight;
    if (!getValueType(&newHeight, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    fd9a:	       movea.l 28(sp),a0
    fd9e:	       move.l 24(a0),d0
    fda2:	       move.l d0,-(sp)
    fda4:	       pea 1 <_start+0x1>
    fda8:	       lea 12(sp),a0
    fdac:	       move.l a0,-(sp)
    fdae:	       jsr 1474e <getValueType>
    fdb4:	       lea 12(sp),sp
    fdb8:	       tst.w d0
    fdba:	   /-- bne.s fdc2 <builtIn_setFont+0x2e>
    fdbc:	   |   moveq #1,d0
    fdbe:	/--|-- bra.w fe70 <builtIn_setFont+0xdc>
    //              KPrintF("  Height: %d\n", newHeight);
    trimStack(&fun->stack);
    fdc2:	|  \-> moveq #24,d0
    fdc4:	|      add.l 28(sp),d0
    fdc8:	|      move.l d0,-(sp)
    fdca:	|      jsr 150d2 <trimStack>
    fdd0:	|      addq.l #4,sp
    char *newText = getTextFromAnyVar(&(fun->stack->thisVar));
    fdd2:	|      movea.l 28(sp),a0
    fdd6:	|      move.l 24(a0),d0
    fdda:	|      move.l d0,-(sp)
    fddc:	|      jsr 14d24 <getTextFromAnyVar>
    fde2:	|      addq.l #4,sp
    fde4:	|      move.l d0,16(sp)
    if (!newText) return BR_ERROR;
    fde8:	|  /-- bne.s fdf0 <builtIn_setFont+0x5c>
    fdea:	|  |   moveq #1,d0
    fdec:	+--|-- bra.w fe70 <builtIn_setFont+0xdc>
    //              KPrintF("  Character supported: %s\n", newText);
    trimStack(&fun->stack);
    fdf0:	|  \-> moveq #24,d0
    fdf2:	|      add.l 28(sp),d0
    fdf6:	|      move.l d0,-(sp)
    fdf8:	|      jsr 150d2 <trimStack>
    fdfe:	|      addq.l #4,sp
    if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) return BR_ERROR;
    fe00:	|      movea.l 28(sp),a0
    fe04:	|      move.l 24(a0),d0
    fe08:	|      move.l d0,-(sp)
    fe0a:	|      pea 5 <_start+0x5>
    fe0e:	|      lea 16(sp),a0
    fe12:	|      move.l a0,-(sp)
    fe14:	|      jsr 1474e <getValueType>
    fe1a:	|      lea 12(sp),sp
    fe1e:	|      tst.w d0
    fe20:	|  /-- bne.s fe26 <builtIn_setFont+0x92>
    fe22:	|  |   moveq #1,d0
    fe24:	+--|-- bra.s fe70 <builtIn_setFont+0xdc>
    //              KPrintF("  File: %d\n", fileNumber);
    trimStack(&fun->stack);
    fe26:	|  \-> moveq #24,d0
    fe28:	|      add.l 28(sp),d0
    fe2c:	|      move.l d0,-(sp)
    fe2e:	|      jsr 150d2 <trimStack>
    fe34:	|      addq.l #4,sp
    if (!loadFont(fileNumber, newText, newHeight)) return BR_ERROR;
    fe36:	|      move.l 4(sp),d1
    fe3a:	|      move.l 8(sp),d0
    fe3e:	|      move.l d1,-(sp)
    fe40:	|      move.l 20(sp),-(sp)
    fe44:	|      move.l d0,-(sp)
    fe46:	|      jsr 1555a <loadFont>
    fe4c:	|      lea 12(sp),sp
    fe50:	|      tst.w d0
    fe52:	|  /-- bne.s fe58 <builtIn_setFont+0xc4>
    fe54:	|  |   moveq #1,d0
    fe56:	+--|-- bra.s fe70 <builtIn_setFont+0xdc>
    //              KPrintF("  Done!\n");
    FreeVec(newText);
    fe58:	|  \-> move.l 16(sp),12(sp)
    fe5e:	|      move.l 1c85c <SysBase>,d0
    fe64:	|      movea.l d0,a6
    fe66:	|      movea.l 12(sp),a1
    fe6a:	|      jsr -690(a6)

    return BR_CONTINUE;
    fe6e:	|      moveq #2,d0
}
    fe70:	\----> movea.l (sp)+,a6
    fe72:	       lea 16(sp),sp
    fe76:	       rts

0000fe78 <builtIn_inFont>:

builtIn(inFont)
{
    fe78:	       subq.l #4,sp
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    fe7a:	       movea.l 12(sp),a0
    fe7e:	       move.l 24(a0),d0
    fe82:	       move.l d0,-(sp)
    fe84:	       jsr 14d24 <getTextFromAnyVar>
    fe8a:	       addq.l #4,sp
    fe8c:	       move.l d0,(sp)
	if (! newText) return BR_ERROR;
    fe8e:	   /-- bne.s fe94 <builtIn_inFont+0x1c>
    fe90:	   |   moveq #1,d0
    fe92:	/--|-- bra.s feca <builtIn_inFont+0x52>
	trimStack (&fun -> stack);
    fe94:	|  \-> moveq #24,d0
    fe96:	|      add.l 12(sp),d0
    fe9a:	|      move.l d0,-(sp)
    fe9c:	|      jsr 150d2 <trimStack>
    fea2:	|      addq.l #4,sp

	// Return value
	
	setVariable (&fun -> reg, SVT_INT, isInFont(newText));
    fea4:	|      move.l (sp),-(sp)
    fea6:	|      jsr 15548 <isInFont>
    feac:	|      addq.l #4,sp
    feae:	|      movea.w d0,a0
    feb0:	|      moveq #28,d0
    feb2:	|      add.l 12(sp),d0
    feb6:	|      move.l a0,-(sp)
    feb8:	|      pea 1 <_start+0x1>
    febc:	|      move.l d0,-(sp)
    febe:	|      jsr 15040 <setVariable>
    fec4:	|      lea 12(sp),sp
	return BR_CONTINUE;
    fec8:	|      moveq #2,d0
}
    feca:	\----> addq.l #4,sp
    fecc:	       rts

0000fece <builtIn_pasteString>:

builtIn(pasteString)
{
    fece:	       lea -16(sp),sp
    fed2:	       move.l a6,-(sp)
    fed4:	       move.l d2,-(sp)
    UNUSEDALL
    char *newText = getTextFromAnyVar(&(fun->stack->thisVar));
    fed6:	       movea.l 32(sp),a0
    feda:	       move.l 24(a0),d0
    fede:	       move.l d0,-(sp)
    fee0:	       jsr 14d24 <getTextFromAnyVar>
    fee6:	       addq.l #4,sp
    fee8:	       move.l d0,20(sp)
    trimStack(&fun->stack);
    feec:	       moveq #24,d0
    feee:	       add.l 32(sp),d0
    fef2:	       move.l d0,-(sp)
    fef4:	       jsr 150d2 <trimStack>
    fefa:	       addq.l #4,sp
    int y, x;
    if (!getValueType(&y, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    fefc:	       movea.l 32(sp),a0
    ff00:	       move.l 24(a0),d0
    ff04:	       move.l d0,-(sp)
    ff06:	       pea 1 <_start+0x1>
    ff0a:	       lea 20(sp),a0
    ff0e:	       move.l a0,-(sp)
    ff10:	       jsr 1474e <getValueType>
    ff16:	       lea 12(sp),sp
    ff1a:	       tst.w d0
    ff1c:	   /-- bne.s ff24 <builtIn_pasteString+0x56>
    ff1e:	   |   moveq #1,d0
    ff20:	/--|-- bra.w ffc6 <builtIn_pasteString+0xf8>
    trimStack(&fun->stack);
    ff24:	|  \-> moveq #24,d0
    ff26:	|      add.l 32(sp),d0
    ff2a:	|      move.l d0,-(sp)
    ff2c:	|      jsr 150d2 <trimStack>
    ff32:	|      addq.l #4,sp
    if (!getValueType(&x, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    ff34:	|      movea.l 32(sp),a0
    ff38:	|      move.l 24(a0),d0
    ff3c:	|      move.l d0,-(sp)
    ff3e:	|      pea 1 <_start+0x1>
    ff42:	|      lea 16(sp),a0
    ff46:	|      move.l a0,-(sp)
    ff48:	|      jsr 1474e <getValueType>
    ff4e:	|      lea 12(sp),sp
    ff52:	|      tst.w d0
    ff54:	|  /-- bne.s ff5a <builtIn_pasteString+0x8c>
    ff56:	|  |   moveq #1,d0
    ff58:	+--|-- bra.s ffc6 <builtIn_pasteString+0xf8>
    trimStack(&fun->stack);
    ff5a:	|  \-> moveq #24,d0
    ff5c:	|      add.l 32(sp),d0
    ff60:	|      move.l d0,-(sp)
    ff62:	|      jsr 150d2 <trimStack>
    ff68:	|      addq.l #4,sp
    if (x == IN_THE_CENTRE) x = (winWidth - stringWidth(newText)) >> 1;
    ff6a:	|      move.l 8(sp),d0
    ff6e:	|      cmpi.l #65535,d0
    ff74:	|  /-- bne.s ff94 <builtIn_pasteString+0xc6>
    ff76:	|  |   move.l 1c7b0 <winWidth>,d2
    ff7c:	|  |   move.l 20(sp),-(sp)
    ff80:	|  |   jsr 15838 <stringWidth>
    ff86:	|  |   addq.l #4,sp
    ff88:	|  |   move.l d2,d1
    ff8a:	|  |   sub.l d0,d1
    ff8c:	|  |   move.l d1,d0
    ff8e:	|  |   lsr.l #1,d0
    ff90:	|  |   move.l d0,8(sp)
    //fixFont(pastePalette); //Todo: Amigize this
    pasteStringToBackdrop(newText, x, y); 
    ff94:	|  \-> move.l 12(sp),d1
    ff98:	|      move.l 8(sp),d0
    ff9c:	|      move.l d1,-(sp)
    ff9e:	|      move.l d0,-(sp)
    ffa0:	|      move.l 28(sp),-(sp)
    ffa4:	|      jsr 1575a <pasteStringToBackdrop>
    ffaa:	|      lea 12(sp),sp
    FreeVec(newText); 
    ffae:	|      move.l 20(sp),16(sp)
    ffb4:	|      move.l 1c85c <SysBase>,d0
    ffba:	|      movea.l d0,a6
    ffbc:	|      movea.l 16(sp),a1
    ffc0:	|      jsr -690(a6)
    return BR_CONTINUE;
    ffc4:	|      moveq #2,d0
}
    ffc6:	\----> move.l (sp)+,d2
    ffc8:	       movea.l (sp)+,a6
    ffca:	       lea 16(sp),sp
    ffce:	       rts

0000ffd0 <builtIn_anim>:

builtIn(anim)
{
    ffd0:	       lea -12(sp),sp
	UNUSEDALL
	if (numParams < 2) {
    ffd4:	       moveq #1,d0
    ffd6:	       cmp.l 16(sp),d0
    ffda:	   /-- blt.s fff0 <builtIn_anim+0x20>
		KPrintF("Built-in function anim() must have at least 2 parameters.");
    ffdc:	   |   pea 1983a <PutChar+0x1bf0>
    ffe2:	   |   jsr 17176 <KPrintF>
    ffe8:	   |   addq.l #4,sp
		return BR_ERROR;
    ffea:	   |   moveq #1,d0
    ffec:	/--|-- bra.w 1007e <builtIn_anim+0xae>
	}


	// First store the frame numbers and take 'em off the stack
	struct personaAnimation * ba = createPersonaAnim (numParams - 1, &fun -> stack);
    fff0:	|  \-> moveq #24,d1
    fff2:	|      add.l 20(sp),d1
    fff6:	|      move.l 16(sp),d0
    fffa:	|      subq.l #1,d0
    fffc:	|      move.l d1,-(sp)
    fffe:	|      move.l d0,-(sp)
   10000:	|      jsr 9702 <createPersonaAnim>
   10006:	|      addq.l #8,sp
   10008:	|      move.l d0,8(sp)

	// Only remaining paramter is the file number
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   1000c:	|      movea.l 20(sp),a0
   10010:	|      move.l 24(a0),d0
   10014:	|      move.l d0,-(sp)
   10016:	|      pea 5 <_start+0x5>
   1001a:	|      lea 8(sp),a0
   1001e:	|      move.l a0,-(sp)
   10020:	|      jsr 1474e <getValueType>
   10026:	|      lea 12(sp),sp
   1002a:	|      tst.w d0
   1002c:	|  /-- bne.s 10032 <builtIn_anim+0x62>
   1002e:	|  |   moveq #1,d0
   10030:	+--|-- bra.s 1007e <builtIn_anim+0xae>
	trimStack (&fun -> stack);
   10032:	|  \-> moveq #24,d0
   10034:	|      add.l 20(sp),d0
   10038:	|      move.l d0,-(sp)
   1003a:	|      jsr 150d2 <trimStack>
   10040:	|      addq.l #4,sp

	// Load the required sprite bank
	struct loadedSpriteBank * sprBanky = loadBankForAnim (fileNumber);
   10042:	|      move.l (sp),d0
   10044:	|      move.l d0,-(sp)
   10046:	|      jsr 15ed8 <loadBankForAnim>
   1004c:	|      addq.l #4,sp
   1004e:	|      move.l d0,4(sp)
	if (! sprBanky) return BR_ERROR;	// File not found, fatal done already
   10052:	|  /-- bne.s 10058 <builtIn_anim+0x88>
   10054:	|  |   moveq #1,d0
   10056:	+--|-- bra.s 1007e <builtIn_anim+0xae>
	setBankFile (ba, sprBanky);
   10058:	|  \-> move.l 4(sp),-(sp)
   1005c:	|      move.l 12(sp),-(sp)
   10060:	|      jsr b5ac <setBankFile>
   10066:	|      addq.l #8,sp

	// Return value
	newAnimationVariable (&fun -> reg, ba);
   10068:	|      moveq #28,d0
   1006a:	|      add.l 20(sp),d0
   1006e:	|      move.l 8(sp),-(sp)
   10072:	|      move.l d0,-(sp)
   10074:	|      jsr 14ffc <newAnimationVariable>
   1007a:	|      addq.l #8,sp
	return BR_CONTINUE;
   1007c:	|      moveq #2,d0
}
   1007e:	\----> lea 12(sp),sp
   10082:	       rts

00010084 <builtIn_costume>:

builtIn(costume)
{
   10084:	          lea -32(sp),sp
   10088:	          move.l a6,-(sp)
   1008a:	          move.l a2,-(sp)
    UNUSEDALL
    struct persona * newPersona = AllocVec(sizeof(struct persona), MEMF_ANY);
   1008c:	          moveq #8,d0
   1008e:	          move.l d0,32(sp)
   10092:	          clr.l 28(sp)
   10096:	          move.l 1c85c <SysBase>,d0
   1009c:	          movea.l d0,a6
   1009e:	          move.l 32(sp),d0
   100a2:	          move.l 28(sp),d1
   100a6:	          jsr -684(a6)
   100aa:	          move.l d0,24(sp)
   100ae:	          move.l 24(sp),d0
   100b2:	          move.l d0,20(sp)
    if (!newPersona) return BR_ERROR;
   100b6:	      /-- bne.s 100be <builtIn_costume+0x3a>
   100b8:	      |   moveq #1,d0
   100ba:	/-----|-- bra.w 101a6 <builtIn_costume+0x122>
    newPersona->numDirections = numParams / 3;
   100be:	|     \-> move.l 44(sp),d0
   100c2:	|         pea 3 <_start+0x3>
   100c6:	|         move.l d0,-(sp)
   100c8:	|         jsr 17bb2 <__divsi3>
   100ce:	|         addq.l #8,sp
   100d0:	|         movea.l 20(sp),a0
   100d4:	|         move.l d0,4(a0)
    if (numParams == 0 || newPersona->numDirections * 3 != numParams) {
   100d8:	|         tst.l 44(sp)
   100dc:	|     /-- beq.s 100f2 <builtIn_costume+0x6e>
   100de:	|     |   movea.l 20(sp),a0
   100e2:	|     |   move.l 4(a0),d1
   100e6:	|     |   move.l d1,d0
   100e8:	|     |   add.l d0,d0
   100ea:	|     |   add.l d1,d0
   100ec:	|     |   cmp.l 44(sp),d0
   100f0:	|  /--|-- beq.s 10106 <builtIn_costume+0x82>
        KPrintF("Illegal number of parameters (should be greater than 0 and divisible by 3)");
   100f2:	|  |  \-> pea 19874 <PutChar+0x1c2a>
   100f8:	|  |      jsr 17176 <KPrintF>
   100fe:	|  |      addq.l #4,sp
        return BR_ERROR;
   10100:	|  |      moveq #1,d0
   10102:	+--|----- bra.w 101a6 <builtIn_costume+0x122>
    }
    int iii;
    newPersona->animation = AllocVec(sizeof(struct personaAnimation *) * numParams, MEMF_ANY);
   10106:	|  \----> move.l 44(sp),d0
   1010a:	|         add.l d0,d0
   1010c:	|         add.l d0,d0
   1010e:	|         move.l d0,16(sp)
   10112:	|         clr.l 12(sp)
   10116:	|         move.l 1c85c <SysBase>,d0
   1011c:	|         movea.l d0,a6
   1011e:	|         move.l 16(sp),d0
   10122:	|         move.l 12(sp),d1
   10126:	|         jsr -684(a6)
   1012a:	|         move.l d0,8(sp)
   1012e:	|         move.l 8(sp),d0
   10132:	|         movea.l 20(sp),a0
   10136:	|         move.l d0,(a0)
    if (!newPersona->animation) return BR_ERROR;
   10138:	|         movea.l 20(sp),a0
   1013c:	|         move.l (a0),d0
   1013e:	|     /-- bne.s 10144 <builtIn_costume+0xc0>
   10140:	|     |   moveq #1,d0
   10142:	+-----|-- bra.s 101a6 <builtIn_costume+0x122>
    for (iii = numParams - 1; iii >= 0; iii--) {
   10144:	|     \-> move.l 44(sp),d0
   10148:	|         subq.l #1,d0
   1014a:	|         move.l d0,36(sp)
   1014e:	|     /-- bra.s 1018a <builtIn_costume+0x106>
        newPersona->animation[iii] = getAnimationFromVar(&(fun->stack->thisVar));
   10150:	|  /--|-> movea.l 48(sp),a0
   10154:	|  |  |   move.l 24(a0),d0
   10158:	|  |  |   movea.l 20(sp),a0
   1015c:	|  |  |   movea.l (a0),a0
   1015e:	|  |  |   move.l 36(sp),d1
   10162:	|  |  |   add.l d1,d1
   10164:	|  |  |   add.l d1,d1
   10166:	|  |  |   lea (0,a0,d1.l),a2
   1016a:	|  |  |   move.l d0,-(sp)
   1016c:	|  |  |   jsr 14c26 <getAnimationFromVar>
   10172:	|  |  |   addq.l #4,sp
   10174:	|  |  |   move.l d0,(a2)
        trimStack(&fun->stack);
   10176:	|  |  |   moveq #24,d0
   10178:	|  |  |   add.l 48(sp),d0
   1017c:	|  |  |   move.l d0,-(sp)
   1017e:	|  |  |   jsr 150d2 <trimStack>
   10184:	|  |  |   addq.l #4,sp
    for (iii = numParams - 1; iii >= 0; iii--) {
   10186:	|  |  |   subq.l #1,36(sp)
   1018a:	|  |  \-> tst.l 36(sp)
   1018e:	|  \----- bge.s 10150 <builtIn_costume+0xcc>
    }

    // Return value
    newCostumeVariable(&fun->reg, newPersona);
   10190:	|         moveq #28,d0
   10192:	|         add.l 48(sp),d0
   10196:	|         move.l 20(sp),-(sp)
   1019a:	|         move.l d0,-(sp)
   1019c:	|         jsr 1501e <newCostumeVariable>
   101a2:	|         addq.l #8,sp
    return BR_CONTINUE;
   101a4:	|         moveq #2,d0
}
   101a6:	\-------> movea.l (sp)+,a2
   101a8:	          movea.l (sp)+,a6
   101aa:	          lea 32(sp),sp
   101ae:	          rts

000101b0 <builtIn_launch>:

builtIn(launch)
{
   101b0:	          lea -20(sp),sp
   101b4:	          move.l a6,-(sp)
    UNUSEDALL
    char * newTextA = getTextFromAnyVar(&(fun->stack->thisVar));
   101b6:	          movea.l 32(sp),a0
   101ba:	          move.l 24(a0),d0
   101be:	          move.l d0,-(sp)
   101c0:	          jsr 14d24 <getTextFromAnyVar>
   101c6:	          addq.l #4,sp
   101c8:	          move.l d0,20(sp)
    if (!newTextA) return BR_ERROR;
   101cc:	      /-- bne.s 101d4 <builtIn_launch+0x24>
   101ce:	      |   moveq #1,d0
   101d0:	/-----|-- bra.w 10302 <builtIn_launch+0x152>

    char * newText = encodeFilename(newTextA);
   101d4:	|     \-> move.l 20(sp),-(sp)
   101d8:	|         jsr 2fe <encodeFilename>
   101de:	|         addq.l #4,sp
   101e0:	|         move.l d0,16(sp)

    trimStack(&fun->stack);
   101e4:	|         moveq #24,d0
   101e6:	|         add.l 32(sp),d0
   101ea:	|         move.l d0,-(sp)
   101ec:	|         jsr 150d2 <trimStack>
   101f2:	|         addq.l #4,sp
    if (newTextA[0] == 'h' &&
   101f4:	|         movea.l 20(sp),a0
   101f8:	|         move.b (a0),d0
   101fa:	|         cmpi.b #104,d0
   101fe:	|  /----- bne.s 10268 <builtIn_launch+0xb8>
        newTextA[1] == 't' &&
   10200:	|  |      movea.l 20(sp),a0
   10204:	|  |      addq.l #1,a0
   10206:	|  |      move.b (a0),d0
    if (newTextA[0] == 'h' &&
   10208:	|  |      cmpi.b #116,d0
   1020c:	|  +----- bne.s 10268 <builtIn_launch+0xb8>
        newTextA[2] == 't' &&
   1020e:	|  |      movea.l 20(sp),a0
   10212:	|  |      addq.l #2,a0
   10214:	|  |      move.b (a0),d0
        newTextA[1] == 't' &&
   10216:	|  |      cmpi.b #116,d0
   1021a:	|  +----- bne.s 10268 <builtIn_launch+0xb8>
        newTextA[3] == 'p' &&
   1021c:	|  |      movea.l 20(sp),a0
   10220:	|  |      addq.l #3,a0
   10222:	|  |      move.b (a0),d0
        newTextA[2] == 't' &&
   10224:	|  |      cmpi.b #112,d0
   10228:	|  +----- bne.s 10268 <builtIn_launch+0xb8>
        (newTextA[4] == ':' || (newTextA[4] == 's' && newTextA[5] == ':'))) {
   1022a:	|  |      movea.l 20(sp),a0
   1022e:	|  |      addq.l #4,a0
   10230:	|  |      move.b (a0),d0
        newTextA[3] == 'p' &&
   10232:	|  |      cmpi.b #58,d0
   10236:	|  |  /-- beq.s 10254 <builtIn_launch+0xa4>
        (newTextA[4] == ':' || (newTextA[4] == 's' && newTextA[5] == ':'))) {
   10238:	|  |  |   movea.l 20(sp),a0
   1023c:	|  |  |   addq.l #4,a0
   1023e:	|  |  |   move.b (a0),d0
   10240:	|  |  |   cmpi.b #115,d0
   10244:	|  +--|-- bne.s 10268 <builtIn_launch+0xb8>
   10246:	|  |  |   movea.l 20(sp),a0
   1024a:	|  |  |   addq.l #5,a0
   1024c:	|  |  |   move.b (a0),d0
   1024e:	|  |  |   cmpi.b #58,d0
   10252:	|  +--|-- bne.s 10268 <builtIn_launch+0xb8>

        // IT'S A WEBSITE!
        launchMe = copyString(newTextA);
   10254:	|  |  \-> move.l 20(sp),-(sp)
   10258:	|  |      jsr b8 <copyString>
   1025e:	|  |      addq.l #4,sp
   10260:	|  |      move.l d0,1c91e <launchMe>
   10266:	|  |  /-- bra.s 102ba <builtIn_launch+0x10a>
    } else {
        char *gameDir;
        gameDir = joinStrings(gamePath, "/");
   10268:	|  \--|-> move.l 1c7c4 <gamePath>,d0
   1026e:	|     |   pea 198bf <PutChar+0x1c75>
   10274:	|     |   move.l d0,-(sp)
   10276:	|     |   jsr 13c7a <joinStrings>
   1027c:	|     |   addq.l #8,sp
   1027e:	|     |   move.l d0,12(sp)

        launchMe = joinStrings(gameDir, newText);
   10282:	|     |   move.l 16(sp),-(sp)
   10286:	|     |   move.l 16(sp),-(sp)
   1028a:	|     |   jsr 13c7a <joinStrings>
   10290:	|     |   addq.l #8,sp
   10292:	|     |   move.l d0,1c91e <launchMe>
        FreeVec(newText);
   10298:	|     |   move.l 16(sp),8(sp)
   1029e:	|     |   move.l 1c85c <SysBase>,d0
   102a4:	|     |   movea.l d0,a6
   102a6:	|     |   movea.l 8(sp),a1
   102aa:	|     |   jsr -690(a6)
        if (!launchMe) return BR_ERROR;
   102ae:	|     |   move.l 1c91e <launchMe>,d0
   102b4:	|     +-- bne.s 102ba <builtIn_launch+0x10a>
   102b6:	|     |   moveq #1,d0
   102b8:	+-----|-- bra.s 10302 <builtIn_launch+0x152>
    }
    FreeVec(newTextA);
   102ba:	|     \-> move.l 20(sp),4(sp)
   102c0:	|         move.l 1c85c <SysBase>,d0
   102c6:	|         movea.l d0,a6
   102c8:	|         movea.l 4(sp),a1
   102cc:	|         jsr -690(a6)
    setGraphicsWindow(FALSE);
   102d0:	|         clr.l -(sp)
   102d2:	|         jsr 4158 <setGraphicsWindow>
   102d8:	|         addq.l #4,sp
    setVariable(&fun->reg, SVT_INT, 1);
   102da:	|         moveq #28,d0
   102dc:	|         add.l 32(sp),d0
   102e0:	|         pea 1 <_start+0x1>
   102e4:	|         pea 1 <_start+0x1>
   102e8:	|         move.l d0,-(sp)
   102ea:	|         jsr 15040 <setVariable>
   102f0:	|         lea 12(sp),sp
    launchResult = &fun->reg;
   102f4:	|         moveq #28,d0
   102f6:	|         add.l 32(sp),d0
   102fa:	|         move.l d0,1c922 <launchResult>

    return BR_KEEP_AND_PAUSE;
   10300:	|         moveq #0,d0
}
   10302:	\-------> movea.l (sp)+,a6
   10304:	          lea 20(sp),sp
   10308:	          rts

0001030a <builtIn_pause>:

builtIn(pause)
{
   1030a:	       subq.l #4,sp
	UNUSEDALL
	int theTime;
	if (! getValueType(&theTime, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1030c:	       movea.l 12(sp),a0
   10310:	       move.l 24(a0),d0
   10314:	       move.l d0,-(sp)
   10316:	       pea 1 <_start+0x1>
   1031a:	       move.l sp,d0
   1031c:	       addq.l #8,d0
   1031e:	       move.l d0,-(sp)
   10320:	       jsr 1474e <getValueType>
   10326:	       lea 12(sp),sp
   1032a:	       tst.w d0
   1032c:	   /-- bne.s 10332 <builtIn_pause+0x28>
   1032e:	   |   moveq #1,d0
   10330:	/--|-- bra.s 10360 <builtIn_pause+0x56>
	trimStack (&fun -> stack);
   10332:	|  \-> moveq #24,d0
   10334:	|      add.l 12(sp),d0
   10338:	|      move.l d0,-(sp)
   1033a:	|      jsr 150d2 <trimStack>
   10340:	|      addq.l #4,sp
	if (theTime > 0) {
   10342:	|      move.l (sp),d0
   10344:	|  /-- ble.s 1035e <builtIn_pause+0x54>
		fun -> timeLeft = theTime - 1;
   10346:	|  |   move.l (sp),d0
   10348:	|  |   subq.l #1,d0
   1034a:	|  |   movea.l 12(sp),a0
   1034e:	|  |   move.l d0,12(a0)
		fun -> isSpeech = FALSE;
   10352:	|  |   movea.l 12(sp),a0
   10356:	|  |   clr.w 50(a0)
		return BR_KEEP_AND_PAUSE;
   1035a:	|  |   moveq #0,d0
   1035c:	+--|-- bra.s 10360 <builtIn_pause+0x56>
	}
	return BR_CONTINUE;
   1035e:	|  \-> moveq #2,d0
}
   10360:	\----> addq.l #4,sp
   10362:	       rts

00010364 <builtIn_completeTimers>:

builtIn(completeTimers)
{
	UNUSEDALL
	completeTimers();
   10364:	jsr 48ba <completeTimers>
	return BR_CONTINUE;
   1036a:	moveq #2,d0
}
   1036c:	rts

0001036e <builtIn_callEvent>:

builtIn(callEvent)
{
   1036e:	       lea -12(sp),sp
	UNUSEDALL
	int obj1, obj2;
	if (! getValueType(&obj2, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10372:	       movea.l 20(sp),a0
   10376:	       move.l 24(a0),d0
   1037a:	       move.l d0,-(sp)
   1037c:	       pea 7 <_start+0x7>
   10380:	       lea 8(sp),a0
   10384:	       move.l a0,-(sp)
   10386:	       jsr 1474e <getValueType>
   1038c:	       lea 12(sp),sp
   10390:	       tst.w d0
   10392:	   /-- bne.s 1039a <builtIn_callEvent+0x2c>
   10394:	   |   moveq #1,d0
   10396:	/--|-- bra.w 10430 <builtIn_callEvent+0xc2>
	trimStack (&fun -> stack);
   1039a:	|  \-> moveq #24,d0
   1039c:	|      add.l 20(sp),d0
   103a0:	|      move.l d0,-(sp)
   103a2:	|      jsr 150d2 <trimStack>
   103a8:	|      addq.l #4,sp
	if (! getValueType(&obj1, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   103aa:	|      movea.l 20(sp),a0
   103ae:	|      move.l 24(a0),d0
   103b2:	|      move.l d0,-(sp)
   103b4:	|      pea 7 <_start+0x7>
   103b8:	|      moveq #12,d0
   103ba:	|      add.l sp,d0
   103bc:	|      move.l d0,-(sp)
   103be:	|      jsr 1474e <getValueType>
   103c4:	|      lea 12(sp),sp
   103c8:	|      tst.w d0
   103ca:	|  /-- bne.s 103d0 <builtIn_callEvent+0x62>
   103cc:	|  |   moveq #1,d0
   103ce:	+--|-- bra.s 10430 <builtIn_callEvent+0xc2>
	trimStack (&fun -> stack);
   103d0:	|  \-> moveq #24,d0
   103d2:	|      add.l 20(sp),d0
   103d6:	|      move.l d0,-(sp)
   103d8:	|      jsr 150d2 <trimStack>
   103de:	|      addq.l #4,sp

	int fNum = getCombinationFunction (obj1, obj2);
   103e0:	|      move.l (sp),d1
   103e2:	|      move.l 4(sp),d0
   103e6:	|      move.l d1,-(sp)
   103e8:	|      move.l d0,-(sp)
   103ea:	|      jsr d4ec <getCombinationFunction>
   103f0:	|      addq.l #8,sp
   103f2:	|      move.l d0,8(sp)

	// Return value
	if (fNum) {
   103f6:	|  /-- beq.s 10416 <builtIn_callEvent+0xa8>
		setVariable (&fun -> reg, SVT_FUNC, fNum);
   103f8:	|  |   moveq #28,d0
   103fa:	|  |   add.l 20(sp),d0
   103fe:	|  |   move.l 8(sp),-(sp)
   10402:	|  |   pea 2 <_start+0x2>
   10406:	|  |   move.l d0,-(sp)
   10408:	|  |   jsr 15040 <setVariable>
   1040e:	|  |   lea 12(sp),sp
		return BR_CALLAFUNC;
   10412:	|  |   moveq #4,d0
   10414:	+--|-- bra.s 10430 <builtIn_callEvent+0xc2>
	}
	setVariable (&fun -> reg, SVT_INT, 0);
   10416:	|  \-> moveq #28,d0
   10418:	|      add.l 20(sp),d0
   1041c:	|      clr.l -(sp)
   1041e:	|      pea 1 <_start+0x1>
   10422:	|      move.l d0,-(sp)
   10424:	|      jsr 15040 <setVariable>
   1042a:	|      lea 12(sp),sp
	return BR_CONTINUE;
   1042e:	|      moveq #2,d0
}
   10430:	\----> lea 12(sp),sp
   10434:	       rts

00010436 <builtIn_quitGame>:
BOOL reallyWantToQuit = FALSE;

builtIn(quitGame)
{
	UNUSEDALL
	reallyWantToQuit = TRUE;
   10436:	move.w #1,1c92e <reallyWantToQuit>
	//quit_event.type=SDL_QUIT; Todo: Amigize
	//SDL_PushEvent(&quit_event);
	return BR_CONTINUE;
   1043e:	moveq #2,d0
}
   10440:	rts

00010442 <builtIn__rem_movieStart>:

// The old movie functions are deprecated and does nothing.
builtIn(_rem_movieStart)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   10442:	moveq #24,d0
   10444:	add.l 8(sp),d0
   10448:	move.l d0,-(sp)
   1044a:	jsr 150d2 <trimStack>
   10450:	addq.l #4,sp
	KPrintF("Movie Stuff not supported on Amiga");
   10452:	pea 198c1 <PutChar+0x1c77>
   10458:	jsr 17176 <KPrintF>
   1045e:	addq.l #4,sp
	return BR_CONTINUE;
   10460:	moveq #2,d0
}
   10462:	rts

00010464 <builtIn__rem_movieAbort>:

builtIn(_rem_movieAbort)
{
	UNUSEDALL
	//setVariable (&fun -> reg, SVT_INT, 0);
	KPrintF("Movie Stuff not supported on Amiga");
   10464:	pea 198c1 <PutChar+0x1c77>
   1046a:	jsr 17176 <KPrintF>
   10470:	addq.l #4,sp
	return BR_CONTINUE;
   10472:	moveq #2,d0
}
   10474:	rts

00010476 <builtIn__rem_moviePlaying>:

builtIn(_rem_moviePlaying)
{
	UNUSEDALL
	KPrintF("Movie Stuff not supported on Amiga");
   10476:	pea 198c1 <PutChar+0x1c77>
   1047c:	jsr 17176 <KPrintF>
   10482:	addq.l #4,sp
	//setVariable (&fun -> reg, SVT_INT, 0);
	return BR_CONTINUE;
   10484:	moveq #2,d0
}
   10486:	rts

00010488 <builtIn_playMovie>:
	
	if (r && (! fun->next)) {
		restartFunction (fun);
		return BR_ALREADY_GONE;
	}*/
	KPrintF("Movie Stuff not supported on Amiga");
   10488:	pea 198c1 <PutChar+0x1c77>
   1048e:	jsr 17176 <KPrintF>
   10494:	addq.l #4,sp
	return BR_CONTINUE;
   10496:	moveq #2,d0
}
   10498:	rts

0001049a <builtIn_stopMovie>:
	/*int r;
	
	r = stopMovie();
	
	setVariable (&fun -> reg, SVT_INT, 0);*/
	KPrintF("Movie Stuff not supported on Amiga");
   1049a:	pea 198c1 <PutChar+0x1c77>
   104a0:	jsr 17176 <KPrintF>
   104a6:	addq.l #4,sp
	return BR_CONTINUE;
   104a8:	moveq #2,d0
}
   104aa:	rts

000104ac <builtIn_pauseMovie>:
	/*int r;
	
	r = pauseMovie();
	
	setVariable (&fun -> reg, SVT_INT, 0);*/
	KPrintF("Movie Stuff not supported on Amiga");
   104ac:	pea 198c1 <PutChar+0x1c77>
   104b2:	jsr 17176 <KPrintF>
   104b8:	addq.l #4,sp
	return BR_CONTINUE;
   104ba:	moveq #2,d0
}
   104bc:	rts

000104be <builtIn_startMusic>:

#pragma mark -
#pragma mark Audio functions

builtIn(startMusic)
{
   104be:	       lea -12(sp),sp
	UNUSEDALL
	int fromTrack, musChan, fileNumber;
	if (! getValueType(&fromTrack, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   104c2:	       movea.l 20(sp),a0
   104c6:	       move.l 24(a0),d0
   104ca:	       move.l d0,-(sp)
   104cc:	       pea 1 <_start+0x1>
   104d0:	       moveq #16,d0
   104d2:	       add.l sp,d0
   104d4:	       move.l d0,-(sp)
   104d6:	       jsr 1474e <getValueType>
   104dc:	       lea 12(sp),sp
   104e0:	       tst.w d0
   104e2:	   /-- bne.s 104ea <builtIn_startMusic+0x2c>
   104e4:	   |   moveq #1,d0
   104e6:	/--|-- bra.w 1058a <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
   104ea:	|  \-> moveq #24,d0
   104ec:	|      add.l 20(sp),d0
   104f0:	|      move.l d0,-(sp)
   104f2:	|      jsr 150d2 <trimStack>
   104f8:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   104fa:	|      movea.l 20(sp),a0
   104fe:	|      move.l 24(a0),d0
   10502:	|      move.l d0,-(sp)
   10504:	|      pea 1 <_start+0x1>
   10508:	|      moveq #12,d0
   1050a:	|      add.l sp,d0
   1050c:	|      move.l d0,-(sp)
   1050e:	|      jsr 1474e <getValueType>
   10514:	|      lea 12(sp),sp
   10518:	|      tst.w d0
   1051a:	|  /-- bne.s 10520 <builtIn_startMusic+0x62>
   1051c:	|  |   moveq #1,d0
   1051e:	+--|-- bra.s 1058a <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
   10520:	|  \-> moveq #24,d0
   10522:	|      add.l 20(sp),d0
   10526:	|      move.l d0,-(sp)
   10528:	|      jsr 150d2 <trimStack>
   1052e:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   10530:	|      movea.l 20(sp),a0
   10534:	|      move.l 24(a0),d0
   10538:	|      move.l d0,-(sp)
   1053a:	|      pea 5 <_start+0x5>
   1053e:	|      lea 8(sp),a0
   10542:	|      move.l a0,-(sp)
   10544:	|      jsr 1474e <getValueType>
   1054a:	|      lea 12(sp),sp
   1054e:	|      tst.w d0
   10550:	|  /-- bne.s 10556 <builtIn_startMusic+0x98>
   10552:	|  |   moveq #1,d0
   10554:	+--|-- bra.s 1058a <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
   10556:	|  \-> moveq #24,d0
   10558:	|      add.l 20(sp),d0
   1055c:	|      move.l d0,-(sp)
   1055e:	|      jsr 150d2 <trimStack>
   10564:	|      addq.l #4,sp
	if (! playMOD (fileNumber, musChan, fromTrack)) return BR_CONTINUE; //BR_ERROR;
   10566:	|      movea.l 8(sp),a0
   1056a:	|      move.l 4(sp),d1
   1056e:	|      move.l (sp),d0
   10570:	|      move.l a0,-(sp)
   10572:	|      move.l d1,-(sp)
   10574:	|      move.l d0,-(sp)
   10576:	|      jsr d0f8 <playMOD>
   1057c:	|      lea 12(sp),sp
   10580:	|      tst.w d0
   10582:	|  /-- bne.s 10588 <builtIn_startMusic+0xca>
   10584:	|  |   moveq #2,d0
   10586:	+--|-- bra.s 1058a <builtIn_startMusic+0xcc>
	return BR_CONTINUE;
   10588:	|  \-> moveq #2,d0
}
   1058a:	\----> lea 12(sp),sp
   1058e:	       rts

00010590 <builtIn_stopMusic>:

builtIn(stopMusic)
{
   10590:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10592:	       movea.l 12(sp),a0
   10596:	       move.l 24(a0),d0
   1059a:	       move.l d0,-(sp)
   1059c:	       pea 1 <_start+0x1>
   105a0:	       move.l sp,d0
   105a2:	       addq.l #8,d0
   105a4:	       move.l d0,-(sp)
   105a6:	       jsr 1474e <getValueType>
   105ac:	       lea 12(sp),sp
   105b0:	       tst.w d0
   105b2:	   /-- bne.s 105b8 <builtIn_stopMusic+0x28>
   105b4:	   |   moveq #1,d0
   105b6:	/--|-- bra.s 105d6 <builtIn_stopMusic+0x46>
	trimStack (&fun -> stack);
   105b8:	|  \-> moveq #24,d0
   105ba:	|      add.l 12(sp),d0
   105be:	|      move.l d0,-(sp)
   105c0:	|      jsr 150d2 <trimStack>
   105c6:	|      addq.l #4,sp
	stopMOD (v);
   105c8:	|      move.l (sp),d0
   105ca:	|      move.l d0,-(sp)
   105cc:	|      jsr d194 <stopMOD>
   105d2:	|      addq.l #4,sp
	return BR_CONTINUE;
   105d4:	|      moveq #2,d0
}
   105d6:	\----> addq.l #4,sp
   105d8:	       rts

000105da <builtIn_setMusicVolume>:

builtIn(setMusicVolume)
{
   105da:	       subq.l #8,sp
	UNUSEDALL
	int musChan, v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   105dc:	       movea.l 16(sp),a0
   105e0:	       move.l 24(a0),d0
   105e4:	       move.l d0,-(sp)
   105e6:	       pea 1 <_start+0x1>
   105ea:	       move.l sp,d0
   105ec:	       addq.l #8,d0
   105ee:	       move.l d0,-(sp)
   105f0:	       jsr 1474e <getValueType>
   105f6:	       lea 12(sp),sp
   105fa:	       tst.w d0
   105fc:	   /-- bne.s 10602 <builtIn_setMusicVolume+0x28>
   105fe:	   |   moveq #1,d0
   10600:	/--|-- bra.s 1065c <builtIn_setMusicVolume+0x82>
	trimStack (&fun -> stack);
   10602:	|  \-> moveq #24,d0
   10604:	|      add.l 16(sp),d0
   10608:	|      move.l d0,-(sp)
   1060a:	|      jsr 150d2 <trimStack>
   10610:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10612:	|      movea.l 16(sp),a0
   10616:	|      move.l 24(a0),d0
   1061a:	|      move.l d0,-(sp)
   1061c:	|      pea 1 <_start+0x1>
   10620:	|      moveq #12,d0
   10622:	|      add.l sp,d0
   10624:	|      move.l d0,-(sp)
   10626:	|      jsr 1474e <getValueType>
   1062c:	|      lea 12(sp),sp
   10630:	|      tst.w d0
   10632:	|  /-- bne.s 10638 <builtIn_setMusicVolume+0x5e>
   10634:	|  |   moveq #1,d0
   10636:	+--|-- bra.s 1065c <builtIn_setMusicVolume+0x82>
	trimStack (&fun -> stack);
   10638:	|  \-> moveq #24,d0
   1063a:	|      add.l 16(sp),d0
   1063e:	|      move.l d0,-(sp)
   10640:	|      jsr 150d2 <trimStack>
   10646:	|      addq.l #4,sp
	setMusicVolume (musChan, v);
   10648:	|      move.l (sp),d1
   1064a:	|      move.l 4(sp),d0
   1064e:	|      move.l d1,-(sp)
   10650:	|      move.l d0,-(sp)
   10652:	|      jsr d17a <setMusicVolume>
   10658:	|      addq.l #8,sp
	return BR_CONTINUE;
   1065a:	|      moveq #2,d0
}
   1065c:	\----> addq.l #8,sp
   1065e:	       rts

00010660 <builtIn_setDefaultMusicVolume>:

builtIn(setDefaultMusicVolume)
{
   10660:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10662:	       movea.l 12(sp),a0
   10666:	       move.l 24(a0),d0
   1066a:	       move.l d0,-(sp)
   1066c:	       pea 1 <_start+0x1>
   10670:	       move.l sp,d0
   10672:	       addq.l #8,d0
   10674:	       move.l d0,-(sp)
   10676:	       jsr 1474e <getValueType>
   1067c:	       lea 12(sp),sp
   10680:	       tst.w d0
   10682:	   /-- bne.s 10688 <builtIn_setDefaultMusicVolume+0x28>
   10684:	   |   moveq #1,d0
   10686:	/--|-- bra.s 106a6 <builtIn_setDefaultMusicVolume+0x46>
	trimStack (&fun -> stack);
   10688:	|  \-> moveq #24,d0
   1068a:	|      add.l 12(sp),d0
   1068e:	|      move.l d0,-(sp)
   10690:	|      jsr 150d2 <trimStack>
   10696:	|      addq.l #4,sp
	setDefaultMusicVolume (v);
   10698:	|      move.l (sp),d0
   1069a:	|      move.l d0,-(sp)
   1069c:	|      jsr d15e <setDefaultMusicVolume>
   106a2:	|      addq.l #4,sp
	return BR_CONTINUE;
   106a4:	|      moveq #2,d0
}
   106a6:	\----> addq.l #4,sp
   106a8:	       rts

000106aa <builtIn_playSound>:

builtIn(playSound)
{
   106aa:	       subq.l #4,sp


	UNUSEDALL
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   106ac:	       movea.l 12(sp),a0
   106b0:	       move.l 24(a0),d0
   106b4:	       move.l d0,-(sp)
   106b6:	       pea 5 <_start+0x5>
   106ba:	       move.l sp,d0
   106bc:	       addq.l #8,d0
   106be:	       move.l d0,-(sp)
   106c0:	       jsr 1474e <getValueType>
   106c6:	       lea 12(sp),sp
   106ca:	       tst.w d0
   106cc:	   /-- bne.s 106d2 <builtIn_playSound+0x28>
   106ce:	   |   moveq #1,d0
   106d0:	/--|-- bra.s 106fa <builtIn_playSound+0x50>
	trimStack (&fun -> stack);
   106d2:	|  \-> moveq #24,d0
   106d4:	|      add.l 12(sp),d0
   106d8:	|      move.l d0,-(sp)
   106da:	|      jsr 150d2 <trimStack>
   106e0:	|      addq.l #4,sp
	if (! startSound (fileNumber, FALSE)) return BR_CONTINUE;	// Was BR_ERROR
   106e2:	|      move.l (sp),d0
   106e4:	|      clr.l -(sp)
   106e6:	|      move.l d0,-(sp)
   106e8:	|      jsr d182 <startSound>
   106ee:	|      addq.l #8,sp
   106f0:	|      tst.w d0
   106f2:	|  /-- bne.s 106f8 <builtIn_playSound+0x4e>
   106f4:	|  |   moveq #2,d0
   106f6:	+--|-- bra.s 106fa <builtIn_playSound+0x50>
	return BR_CONTINUE;
   106f8:	|  \-> moveq #2,d0
}
   106fa:	\----> addq.l #4,sp
   106fc:	       rts

000106fe <builtIn_loopSound>:

builtIn(loopSound)
{
   106fe:	             lea -28(sp),sp
   10702:	             move.l a6,-(sp)
	UNUSEDALL
	int fileNumber;

	if (numParams < 1) {
   10704:	             tst.l 36(sp)
   10708:	         /-- bgt.s 1071e <builtIn_loopSound+0x20>
		KPrintF("Built-in function loopSound() must have at least 1 parameter.");
   1070a:	         |   pea 198e4 <PutChar+0x1c9a>
   10710:	         |   jsr 17176 <KPrintF>
   10716:	         |   addq.l #4,sp
		return BR_ERROR;
   10718:	         |   moveq #1,d0
   1071a:	/--------|-- bra.w 108da <builtIn_loopSound+0x1dc>
	} else if (numParams < 2) {
   1071e:	|        \-> moveq #1,d0
   10720:	|            cmp.l 36(sp),d0
   10724:	|     /----- blt.s 10780 <builtIn_loopSound+0x82>

		if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) return BR_ERROR;
   10726:	|     |      movea.l 40(sp),a0
   1072a:	|     |      move.l 24(a0),d0
   1072e:	|     |      move.l d0,-(sp)
   10730:	|     |      pea 5 <_start+0x5>
   10734:	|     |      lea 16(sp),a0
   10738:	|     |      move.l a0,-(sp)
   1073a:	|     |      jsr 1474e <getValueType>
   10740:	|     |      lea 12(sp),sp
   10744:	|     |      tst.w d0
   10746:	|     |  /-- bne.s 1074e <builtIn_loopSound+0x50>
   10748:	|     |  |   moveq #1,d0
   1074a:	+-----|--|-- bra.w 108da <builtIn_loopSound+0x1dc>
		trimStack(&fun->stack);
   1074e:	|     |  \-> moveq #24,d0
   10750:	|     |      add.l 40(sp),d0
   10754:	|     |      move.l d0,-(sp)
   10756:	|     |      jsr 150d2 <trimStack>
   1075c:	|     |      addq.l #4,sp
		if (!startSound(fileNumber, TRUE)) return BR_CONTINUE;	// Was BR_ERROR
   1075e:	|     |      move.l 8(sp),d0
   10762:	|     |      pea 1 <_start+0x1>
   10766:	|     |      move.l d0,-(sp)
   10768:	|     |      jsr d182 <startSound>
   1076e:	|     |      addq.l #8,sp
   10770:	|     |      tst.w d0
   10772:	|     |  /-- bne.s 1077a <builtIn_loopSound+0x7c>
   10774:	|     |  |   moveq #2,d0
   10776:	+-----|--|-- bra.w 108da <builtIn_loopSound+0x1dc>
		return BR_CONTINUE;
   1077a:	|     |  \-> moveq #2,d0
   1077c:	+-----|----- bra.w 108da <builtIn_loopSound+0x1dc>
	} else {
		// We have more than one sound to play!

		int doLoop = 2;
   10780:	|     \----> moveq #2,d1
   10782:	|            move.l d1,4(sp)
		struct soundList *s = NULL;
   10786:	|            clr.l 28(sp)
		struct soundList *old = NULL;
   1078a:	|            clr.l 24(sp)

		// Should we loop?
		if (fun->stack->thisVar.varType != SVT_FILE) {
   1078e:	|            movea.l 40(sp),a0
   10792:	|            movea.l 24(a0),a0
   10796:	|            move.l (a0),d0
   10798:	|            moveq #5,d1
   1079a:	|            cmp.l d0,d1
   1079c:	|  /-------- beq.w 10874 <builtIn_loopSound+0x176>
			getValueType(&doLoop, SVT_INT,&fun->stack->thisVar);
   107a0:	|  |         movea.l 40(sp),a0
   107a4:	|  |         move.l 24(a0),d0
   107a8:	|  |         move.l d0,-(sp)
   107aa:	|  |         pea 1 <_start+0x1>
   107ae:	|  |         lea 12(sp),a0
   107b2:	|  |         move.l a0,-(sp)
   107b4:	|  |         jsr 1474e <getValueType>
   107ba:	|  |         lea 12(sp),sp
			trimStack(&fun->stack);
   107be:	|  |         moveq #24,d0
   107c0:	|  |         add.l 40(sp),d0
   107c4:	|  |         move.l d0,-(sp)
   107c6:	|  |         jsr 150d2 <trimStack>
   107cc:	|  |         addq.l #4,sp
			numParams--;
   107ce:	|  |         subq.l #1,36(sp)
		}
		while (numParams) {
   107d2:	|  +-------- bra.w 10874 <builtIn_loopSound+0x176>
			if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) {
   107d6:	|  |  /----> movea.l 40(sp),a0
   107da:	|  |  |      move.l 24(a0),d0
   107de:	|  |  |      move.l d0,-(sp)
   107e0:	|  |  |      pea 5 <_start+0x5>
   107e4:	|  |  |      lea 16(sp),a0
   107e8:	|  |  |      move.l a0,-(sp)
   107ea:	|  |  |      jsr 1474e <getValueType>
   107f0:	|  |  |      lea 12(sp),sp
   107f4:	|  |  |      tst.w d0
   107f6:	|  |  |  /-- bne.s 1080c <builtIn_loopSound+0x10e>
				KPrintF("Illegal parameter given built-in function loopSound().");
   107f8:	|  |  |  |   pea 19922 <PutChar+0x1cd8>
   107fe:	|  |  |  |   jsr 17176 <KPrintF>
   10804:	|  |  |  |   addq.l #4,sp
				return BR_ERROR;
   10806:	|  |  |  |   moveq #1,d0
   10808:	+--|--|--|-- bra.w 108da <builtIn_loopSound+0x1dc>
			}
			s = AllocVec(sizeof(struct soundList), MEMF_ANY);
   1080c:	|  |  |  \-> moveq #20,d0
   1080e:	|  |  |      move.l d0,20(sp)
   10812:	|  |  |      clr.l 16(sp)
   10816:	|  |  |      move.l 1c85c <SysBase>,d0
   1081c:	|  |  |      movea.l d0,a6
   1081e:	|  |  |      move.l 20(sp),d0
   10822:	|  |  |      move.l 16(sp),d1
   10826:	|  |  |      jsr -684(a6)
   1082a:	|  |  |      move.l d0,12(sp)
   1082e:	|  |  |      move.l 12(sp),d0
   10832:	|  |  |      move.l d0,28(sp)
			if (!s) return BR_ERROR;
   10836:	|  |  |  /-- bne.s 1083e <builtIn_loopSound+0x140>
   10838:	|  |  |  |   moveq #1,d0
   1083a:	+--|--|--|-- bra.w 108da <builtIn_loopSound+0x1dc>

			s->next = old;
   1083e:	|  |  |  \-> movea.l 28(sp),a0
   10842:	|  |  |      move.l 24(sp),4(a0)
			s->prev = NULL;
   10848:	|  |  |      movea.l 28(sp),a0
   1084c:	|  |  |      clr.l 8(a0)
			s->sound = fileNumber;
   10850:	|  |  |      move.l 8(sp),d0
   10854:	|  |  |      movea.l 28(sp),a0
   10858:	|  |  |      move.l d0,(a0)
			old = s;
   1085a:	|  |  |      move.l 28(sp),24(sp)

			trimStack(&fun->stack);
   10860:	|  |  |      moveq #24,d0
   10862:	|  |  |      add.l 40(sp),d0
   10866:	|  |  |      move.l d0,-(sp)
   10868:	|  |  |      jsr 150d2 <trimStack>
   1086e:	|  |  |      addq.l #4,sp
			numParams--;
   10870:	|  |  |      subq.l #1,36(sp)
		while (numParams) {
   10874:	|  \--|----> tst.l 36(sp)
   10878:	|     \----- bne.w 107d6 <builtIn_loopSound+0xd8>
		}
		while (s->next) s = s->next;
   1087c:	|        /-- bra.s 10888 <builtIn_loopSound+0x18a>
   1087e:	|     /--|-> movea.l 28(sp),a0
   10882:	|     |  |   move.l 4(a0),28(sp)
   10888:	|     |  \-> movea.l 28(sp),a0
   1088c:	|     |      move.l 4(a0),d0
   10890:	|     \----- bne.s 1087e <builtIn_loopSound+0x180>
		if (doLoop > 1) {
   10892:	|            move.l 4(sp),d0
   10896:	|            moveq #1,d1
   10898:	|            cmp.l d0,d1
   1089a:	|     /----- bge.s 108b2 <builtIn_loopSound+0x1b4>
			s->next = old;
   1089c:	|     |      movea.l 28(sp),a0
   108a0:	|     |      move.l 24(sp),4(a0)
			old->prev = s;
   108a6:	|     |      movea.l 24(sp),a0
   108aa:	|     |      move.l 28(sp),8(a0)
   108b0:	|     |  /-- bra.s 108c2 <builtIn_loopSound+0x1c4>
		} else if (doLoop) {
   108b2:	|     \--|-> move.l 4(sp),d0
   108b6:	|        +-- beq.s 108c2 <builtIn_loopSound+0x1c4>
			s->next = s;
   108b8:	|        |   movea.l 28(sp),a0
   108bc:	|        |   move.l 28(sp),4(a0)
		}
		old->vol = -1;
   108c2:	|        \-> movea.l 24(sp),a0
   108c6:	|            moveq #-1,d0
   108c8:	|            move.l d0,16(a0)
		playSoundList(old);
   108cc:	|            move.l 24(sp),-(sp)
   108d0:	|            jsr d0fc <playSoundList>
   108d6:	|            addq.l #4,sp
		return BR_CONTINUE;
   108d8:	|            moveq #2,d0
	}
}
   108da:	\----------> movea.l (sp)+,a6
   108dc:	             lea 28(sp),sp
   108e0:	             rts

000108e2 <builtIn_stopSound>:

builtIn(stopSound)
{
   108e2:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   108e4:	       movea.l 12(sp),a0
   108e8:	       move.l 24(a0),d0
   108ec:	       move.l d0,-(sp)
   108ee:	       pea 5 <_start+0x5>
   108f2:	       move.l sp,d0
   108f4:	       addq.l #8,d0
   108f6:	       move.l d0,-(sp)
   108f8:	       jsr 1474e <getValueType>
   108fe:	       lea 12(sp),sp
   10902:	       tst.w d0
   10904:	   /-- bne.s 1090a <builtIn_stopSound+0x28>
   10906:	   |   moveq #1,d0
   10908:	/--|-- bra.s 10928 <builtIn_stopSound+0x46>
	trimStack (&fun -> stack);
   1090a:	|  \-> moveq #24,d0
   1090c:	|      add.l 12(sp),d0
   10910:	|      move.l d0,-(sp)
   10912:	|      jsr 150d2 <trimStack>
   10918:	|      addq.l #4,sp
	huntKillSound (v);
   1091a:	|      move.l (sp),d0
   1091c:	|      move.l d0,-(sp)
   1091e:	|      jsr d0f4 <huntKillSound>
   10924:	|      addq.l #4,sp
	return BR_CONTINUE;
   10926:	|      moveq #2,d0
}
   10928:	\----> addq.l #4,sp
   1092a:	       rts

0001092c <builtIn_setDefaultSoundVolume>:

builtIn(setDefaultSoundVolume)
{
   1092c:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1092e:	       movea.l 12(sp),a0
   10932:	       move.l 24(a0),d0
   10936:	       move.l d0,-(sp)
   10938:	       pea 1 <_start+0x1>
   1093c:	       move.l sp,d0
   1093e:	       addq.l #8,d0
   10940:	       move.l d0,-(sp)
   10942:	       jsr 1474e <getValueType>
   10948:	       lea 12(sp),sp
   1094c:	       tst.w d0
   1094e:	   /-- bne.s 10954 <builtIn_setDefaultSoundVolume+0x28>
   10950:	   |   moveq #1,d0
   10952:	/--|-- bra.s 10972 <builtIn_setDefaultSoundVolume+0x46>
	trimStack (&fun -> stack);
   10954:	|  \-> moveq #24,d0
   10956:	|      add.l 12(sp),d0
   1095a:	|      move.l d0,-(sp)
   1095c:	|      jsr 150d2 <trimStack>
   10962:	|      addq.l #4,sp
	setDefaultSoundVolume (v);
   10964:	|      move.l (sp),d0
   10966:	|      move.l d0,-(sp)
   10968:	|      jsr d16a <setDefaultSoundVolume>
   1096e:	|      addq.l #4,sp
	return BR_CONTINUE;
   10970:	|      moveq #2,d0
}
   10972:	\----> addq.l #4,sp
   10974:	       rts

00010976 <builtIn_setSoundVolume>:

builtIn(setSoundVolume)
{
   10976:	       subq.l #8,sp
	UNUSEDALL
	int musChan, v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10978:	       movea.l 16(sp),a0
   1097c:	       move.l 24(a0),d0
   10980:	       move.l d0,-(sp)
   10982:	       pea 1 <_start+0x1>
   10986:	       move.l sp,d0
   10988:	       addq.l #8,d0
   1098a:	       move.l d0,-(sp)
   1098c:	       jsr 1474e <getValueType>
   10992:	       lea 12(sp),sp
   10996:	       tst.w d0
   10998:	   /-- bne.s 1099e <builtIn_setSoundVolume+0x28>
   1099a:	   |   moveq #1,d0
   1099c:	/--|-- bra.s 109f8 <builtIn_setSoundVolume+0x82>
	trimStack (&fun -> stack);
   1099e:	|  \-> moveq #24,d0
   109a0:	|      add.l 16(sp),d0
   109a4:	|      move.l d0,-(sp)
   109a6:	|      jsr 150d2 <trimStack>
   109ac:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   109ae:	|      movea.l 16(sp),a0
   109b2:	|      move.l 24(a0),d0
   109b6:	|      move.l d0,-(sp)
   109b8:	|      pea 5 <_start+0x5>
   109bc:	|      moveq #12,d0
   109be:	|      add.l sp,d0
   109c0:	|      move.l d0,-(sp)
   109c2:	|      jsr 1474e <getValueType>
   109c8:	|      lea 12(sp),sp
   109cc:	|      tst.w d0
   109ce:	|  /-- bne.s 109d4 <builtIn_setSoundVolume+0x5e>
   109d0:	|  |   moveq #1,d0
   109d2:	+--|-- bra.s 109f8 <builtIn_setSoundVolume+0x82>
	trimStack (&fun -> stack);
   109d4:	|  \-> moveq #24,d0
   109d6:	|      add.l 16(sp),d0
   109da:	|      move.l d0,-(sp)
   109dc:	|      jsr 150d2 <trimStack>
   109e2:	|      addq.l #4,sp
	setSoundVolume (musChan, v);
   109e4:	|      move.l (sp),d1
   109e6:	|      move.l 4(sp),d0
   109ea:	|      move.l d1,-(sp)
   109ec:	|      move.l d0,-(sp)
   109ee:	|      jsr d17e <setSoundVolume>
   109f4:	|      addq.l #8,sp
	return BR_CONTINUE;
   109f6:	|      moveq #2,d0
}
   109f8:	\----> addq.l #8,sp
   109fa:	       rts

000109fc <builtIn_setSoundLoopPoints>:


builtIn(setSoundLoopPoints)
{
   109fc:	       lea -12(sp),sp
	UNUSEDALL
	int musChan, theEnd, theStart;
	if (! getValueType(&theEnd, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10a00:	       movea.l 20(sp),a0
   10a04:	       move.l 24(a0),d0
   10a08:	       move.l d0,-(sp)
   10a0a:	       pea 1 <_start+0x1>
   10a0e:	       moveq #12,d0
   10a10:	       add.l sp,d0
   10a12:	       move.l d0,-(sp)
   10a14:	       jsr 1474e <getValueType>
   10a1a:	       lea 12(sp),sp
   10a1e:	       tst.w d0
   10a20:	   /-- bne.s 10a28 <builtIn_setSoundLoopPoints+0x2c>
   10a22:	   |   moveq #1,d0
   10a24:	/--|-- bra.w 10ac0 <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
   10a28:	|  \-> moveq #24,d0
   10a2a:	|      add.l 20(sp),d0
   10a2e:	|      move.l d0,-(sp)
   10a30:	|      jsr 150d2 <trimStack>
   10a36:	|      addq.l #4,sp
	if (! getValueType(&theStart, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10a38:	|      movea.l 20(sp),a0
   10a3c:	|      move.l 24(a0),d0
   10a40:	|      move.l d0,-(sp)
   10a42:	|      pea 1 <_start+0x1>
   10a46:	|      lea 8(sp),a0
   10a4a:	|      move.l a0,-(sp)
   10a4c:	|      jsr 1474e <getValueType>
   10a52:	|      lea 12(sp),sp
   10a56:	|      tst.w d0
   10a58:	|  /-- bne.s 10a5e <builtIn_setSoundLoopPoints+0x62>
   10a5a:	|  |   moveq #1,d0
   10a5c:	+--|-- bra.s 10ac0 <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
   10a5e:	|  \-> moveq #24,d0
   10a60:	|      add.l 20(sp),d0
   10a64:	|      move.l d0,-(sp)
   10a66:	|      jsr 150d2 <trimStack>
   10a6c:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   10a6e:	|      movea.l 20(sp),a0
   10a72:	|      move.l 24(a0),d0
   10a76:	|      move.l d0,-(sp)
   10a78:	|      pea 5 <_start+0x5>
   10a7c:	|      moveq #16,d0
   10a7e:	|      add.l sp,d0
   10a80:	|      move.l d0,-(sp)
   10a82:	|      jsr 1474e <getValueType>
   10a88:	|      lea 12(sp),sp
   10a8c:	|      tst.w d0
   10a8e:	|  /-- bne.s 10a94 <builtIn_setSoundLoopPoints+0x98>
   10a90:	|  |   moveq #1,d0
   10a92:	+--|-- bra.s 10ac0 <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
   10a94:	|  \-> moveq #24,d0
   10a96:	|      add.l 20(sp),d0
   10a9a:	|      move.l d0,-(sp)
   10a9c:	|      jsr 150d2 <trimStack>
   10aa2:	|      addq.l #4,sp
	setSoundLoop (musChan, theStart, theEnd);
   10aa4:	|      movea.l 4(sp),a0
   10aa8:	|      move.l (sp),d1
   10aaa:	|      move.l 8(sp),d0
   10aae:	|      move.l a0,-(sp)
   10ab0:	|      move.l d1,-(sp)
   10ab2:	|      move.l d0,-(sp)
   10ab4:	|      jsr d176 <setSoundLoop>
   10aba:	|      lea 12(sp),sp
	return BR_CONTINUE;
   10abe:	|      moveq #2,d0
}
   10ac0:	\----> lea 12(sp),sp
   10ac4:	       rts

00010ac6 <builtIn_setFloor>:

#pragma mark -
#pragma mark Extra room bits

builtIn(setFloor)
{
   10ac6:	          subq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType == SVT_FILE) {
   10ac8:	          movea.l 12(sp),a0
   10acc:	          movea.l 24(a0),a0
   10ad0:	          move.l (a0),d0
   10ad2:	          moveq #5,d1
   10ad4:	          cmp.l d0,d1
   10ad6:	/-------- bne.s 10b1a <builtIn_setFloor+0x54>
		int v;
		getValueType(&v, SVT_FILE,&fun -> stack -> thisVar);
   10ad8:	|         movea.l 12(sp),a0
   10adc:	|         move.l 24(a0),d0
   10ae0:	|         move.l d0,-(sp)
   10ae2:	|         pea 5 <_start+0x5>
   10ae6:	|         move.l sp,d0
   10ae8:	|         addq.l #8,d0
   10aea:	|         move.l d0,-(sp)
   10aec:	|         jsr 1474e <getValueType>
   10af2:	|         lea 12(sp),sp
		trimStack (&fun -> stack);
   10af6:	|         moveq #24,d0
   10af8:	|         add.l 12(sp),d0
   10afc:	|         move.l d0,-(sp)
   10afe:	|         jsr 150d2 <trimStack>
   10b04:	|         addq.l #4,sp
		if (! setFloor (v)) return BR_ERROR;
   10b06:	|         move.l (sp),d0
   10b08:	|         move.l d0,-(sp)
   10b0a:	|         jsr 16920 <setFloor>
   10b10:	|         addq.l #4,sp
   10b12:	|         tst.w d0
   10b14:	|  /----- bne.s 10b30 <builtIn_setFloor+0x6a>
   10b16:	|  |      moveq #1,d0
   10b18:	|  |  /-- bra.s 10b32 <builtIn_setFloor+0x6c>
	} else {
		trimStack (&fun -> stack);
   10b1a:	\--|--|-> moveq #24,d0
   10b1c:	   |  |   add.l 12(sp),d0
   10b20:	   |  |   move.l d0,-(sp)
   10b22:	   |  |   jsr 150d2 <trimStack>
   10b28:	   |  |   addq.l #4,sp
		setFloorNull ();
   10b2a:	   |  |   jsr 1709a <setFloorNull>
	}
	return BR_CONTINUE;
   10b30:	   \--|-> moveq #2,d0
}
   10b32:	      \-> addq.l #4,sp
   10b34:	          rts

00010b36 <builtIn_showFloor>:

builtIn(showFloor)
{
	UNUSEDALL
	drawFloor ();
   10b36:	jsr 161b8 <drawFloor>
	return BR_CONTINUE;
   10b3c:	moveq #2,d0
}
   10b3e:	rts

00010b40 <builtIn_setZBuffer>:

builtIn(setZBuffer)
{
   10b40:	          subq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType == SVT_FILE) {
   10b42:	          movea.l 12(sp),a0
   10b46:	          movea.l 24(a0),a0
   10b4a:	          move.l (a0),d0
   10b4c:	          moveq #5,d1
   10b4e:	          cmp.l d0,d1
   10b50:	/-------- bne.s 10b94 <builtIn_setZBuffer+0x54>
		int v;
		getValueType(&v, SVT_FILE,&fun -> stack -> thisVar);
   10b52:	|         movea.l 12(sp),a0
   10b56:	|         move.l 24(a0),d0
   10b5a:	|         move.l d0,-(sp)
   10b5c:	|         pea 5 <_start+0x5>
   10b60:	|         move.l sp,d0
   10b62:	|         addq.l #8,d0
   10b64:	|         move.l d0,-(sp)
   10b66:	|         jsr 1474e <getValueType>
   10b6c:	|         lea 12(sp),sp
		trimStack (&fun -> stack);
   10b70:	|         moveq #24,d0
   10b72:	|         add.l 12(sp),d0
   10b76:	|         move.l d0,-(sp)
   10b78:	|         jsr 150d2 <trimStack>
   10b7e:	|         addq.l #4,sp
		if (! setZBuffer (v)) return BR_ERROR;
   10b80:	|         move.l (sp),d0
   10b82:	|         move.l d0,-(sp)
   10b84:	|         jsr 87de <setZBuffer>
   10b8a:	|         addq.l #4,sp
   10b8c:	|         tst.w d0
   10b8e:	|  /----- bne.s 10baa <builtIn_setZBuffer+0x6a>
   10b90:	|  |      moveq #1,d0
   10b92:	|  |  /-- bra.s 10bac <builtIn_setZBuffer+0x6c>
	} else {
		trimStack (&fun -> stack);
   10b94:	\--|--|-> moveq #24,d0
   10b96:	   |  |   add.l 12(sp),d0
   10b9a:	   |  |   move.l d0,-(sp)
   10b9c:	   |  |   jsr 150d2 <trimStack>
   10ba2:	   |  |   addq.l #4,sp
		killZBuffer ();
   10ba4:	   |  |   jsr 8792 <killZBuffer>
	}
	return BR_CONTINUE;
   10baa:	   \--|-> moveq #2,d0
}
   10bac:	      \-> addq.l #4,sp
   10bae:	          rts

00010bb0 <builtIn_setLightMap>:

		default:
			fatal ("Function should have either 2 or 3 parameters");
			return BR_ERROR;
	}*/
	KPrintF("Not implemented on Amiga");
   10bb0:	pea 19959 <PutChar+0x1d0f>
   10bb6:	jsr 17176 <KPrintF>
   10bbc:	addq.l #4,sp
	return BR_CONTINUE;
   10bbe:	moveq #2,d0
}
   10bc0:	rts

00010bc2 <builtIn_setSpeechMode>:
#pragma mark Objects

builtIn(setSpeechMode)
{
	UNUSEDALL
	if (! getValueType(&speechMode, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10bc2:	          movea.l 8(sp),a0
   10bc6:	          move.l 24(a0),d0
   10bca:	          move.l d0,-(sp)
   10bcc:	          pea 1 <_start+0x1>
   10bd0:	          pea 1c92a <speechMode>
   10bd6:	          jsr 1474e <getValueType>
   10bdc:	          lea 12(sp),sp
   10be0:	          tst.w d0
   10be2:	      /-- bne.s 10be8 <builtIn_setSpeechMode+0x26>
   10be4:	      |   moveq #1,d0
   10be6:	/-----|-- bra.s 10c20 <builtIn_setSpeechMode+0x5e>
	trimStack (&fun -> stack);
   10be8:	|     \-> moveq #24,d0
   10bea:	|         add.l 8(sp),d0
   10bee:	|         move.l d0,-(sp)
   10bf0:	|         jsr 150d2 <trimStack>
   10bf6:	|         addq.l #4,sp
	if (speechMode < 0 || speechMode > 2) {
   10bf8:	|         move.l 1c92a <speechMode>,d0
   10bfe:	|     /-- bmi.s 10c0c <builtIn_setSpeechMode+0x4a>
   10c00:	|     |   move.l 1c92a <speechMode>,d0
   10c06:	|     |   moveq #2,d1
   10c08:	|     |   cmp.l d0,d1
   10c0a:	|  /--|-- bge.s 10c1e <builtIn_setSpeechMode+0x5c>
		KPrintF ("Valid parameters are be SPEECHANDTEXT, SPEECHONLY or TEXTONLY");
   10c0c:	|  |  \-> pea 19972 <PutChar+0x1d28>
   10c12:	|  |      jsr 17176 <KPrintF>
   10c18:	|  |      addq.l #4,sp
		return BR_ERROR;
   10c1a:	|  |      moveq #1,d0
   10c1c:	+--|----- bra.s 10c20 <builtIn_setSpeechMode+0x5e>
	}
	return BR_CONTINUE;
   10c1e:	|  \----> moveq #2,d0
}
   10c20:	\-------> rts

00010c22 <builtIn_somethingSpeaking>:

builtIn(somethingSpeaking)
{
   10c22:	       subq.l #4,sp
	UNUSEDALL
	int i = isThereAnySpeechGoingOn ();
   10c24:	       jsr 7f9a <isThereAnySpeechGoingOn>
   10c2a:	       move.l d0,(sp)
	if (i == -1) {
   10c2c:	       moveq #-1,d0
   10c2e:	       cmp.l (sp),d0
   10c30:	/----- bne.s 10c4c <builtIn_somethingSpeaking+0x2a>
		setVariable (&fun -> reg, SVT_INT, 0);
   10c32:	|      moveq #28,d0
   10c34:	|      add.l 12(sp),d0
   10c38:	|      clr.l -(sp)
   10c3a:	|      pea 1 <_start+0x1>
   10c3e:	|      move.l d0,-(sp)
   10c40:	|      jsr 15040 <setVariable>
   10c46:	|      lea 12(sp),sp
   10c4a:	|  /-- bra.s 10c64 <builtIn_somethingSpeaking+0x42>
	} else {
		setVariable (&fun -> reg, SVT_OBJTYPE, i);
   10c4c:	\--|-> moveq #28,d0
   10c4e:	   |   add.l 12(sp),d0
   10c52:	   |   move.l (sp),-(sp)
   10c54:	   |   pea 7 <_start+0x7>
   10c58:	   |   move.l d0,-(sp)
   10c5a:	   |   jsr 15040 <setVariable>
   10c60:	   |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   10c64:	   \-> moveq #2,d0
}
   10c66:	       addq.l #4,sp
   10c68:	       rts

00010c6a <builtIn_skipSpeech>:

builtIn(skipSpeech)
{
	UNUSEDALL
	killSpeechTimers ();
   10c6a:	jsr 6274 <killSpeechTimers>
	return BR_CONTINUE;
   10c70:	moveq #2,d0
}
   10c72:	rts

00010c74 <builtIn_getOverObject>:

builtIn(getOverObject)
{
	UNUSEDALL
	if (overRegion)
   10c74:	       move.l 1c970 <overRegion>,d0
   10c7a:	/----- beq.s 10ca4 <builtIn_getOverObject+0x30>
		// Return value
		setVariable (&fun -> reg, SVT_OBJTYPE, overRegion -> thisType -> objectNum);
   10c7c:	|      movea.l 1c970 <overRegion>,a0
   10c82:	|      movea.l 28(a0),a0
   10c86:	|      move.l 4(a0),d1
   10c8a:	|      moveq #28,d0
   10c8c:	|      add.l 8(sp),d0
   10c90:	|      move.l d1,-(sp)
   10c92:	|      pea 7 <_start+0x7>
   10c96:	|      move.l d0,-(sp)
   10c98:	|      jsr 15040 <setVariable>
   10c9e:	|      lea 12(sp),sp
   10ca2:	|  /-- bra.s 10cbc <builtIn_getOverObject+0x48>
	else
		// Return value
		setVariable (&fun -> reg, SVT_INT, 0);
   10ca4:	\--|-> moveq #28,d0
   10ca6:	   |   add.l 8(sp),d0
   10caa:	   |   clr.l -(sp)
   10cac:	   |   pea 1 <_start+0x1>
   10cb0:	   |   move.l d0,-(sp)
   10cb2:	   |   jsr 15040 <setVariable>
   10cb8:	   |   lea 12(sp),sp
	return BR_CONTINUE;
   10cbc:	   \-> moveq #2,d0
}
   10cbe:	       rts

00010cc0 <builtIn_rename>:

builtIn(rename)
{
   10cc0:	       lea -16(sp),sp
   10cc4:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar(&(fun->stack->thisVar));
   10cc6:	       movea.l 28(sp),a0
   10cca:	       move.l 24(a0),d0
   10cce:	       move.l d0,-(sp)
   10cd0:	       jsr 14d24 <getTextFromAnyVar>
   10cd6:	       addq.l #4,sp
   10cd8:	       move.l d0,16(sp)
	int objT;
	if (!newText) return BR_ERROR;
   10cdc:	   /-- bne.s 10ce2 <builtIn_rename+0x22>
   10cde:	   |   moveq #1,d0
   10ce0:	/--|-- bra.s 10d5c <builtIn_rename+0x9c>
	trimStack(&fun->stack);
   10ce2:	|  \-> moveq #24,d0
   10ce4:	|      add.l 28(sp),d0
   10ce8:	|      move.l d0,-(sp)
   10cea:	|      jsr 150d2 <trimStack>
   10cf0:	|      addq.l #4,sp
	if (!getValueType(&objT, SVT_OBJTYPE, &fun->stack->thisVar)) return BR_ERROR;
   10cf2:	|      movea.l 28(sp),a0
   10cf6:	|      move.l 24(a0),d0
   10cfa:	|      move.l d0,-(sp)
   10cfc:	|      pea 7 <_start+0x7>
   10d00:	|      lea 12(sp),a0
   10d04:	|      move.l a0,-(sp)
   10d06:	|      jsr 1474e <getValueType>
   10d0c:	|      lea 12(sp),sp
   10d10:	|      tst.w d0
   10d12:	|  /-- bne.s 10d18 <builtIn_rename+0x58>
   10d14:	|  |   moveq #1,d0
   10d16:	+--|-- bra.s 10d5c <builtIn_rename+0x9c>
	trimStack(&fun->stack);
   10d18:	|  \-> moveq #24,d0
   10d1a:	|      add.l 28(sp),d0
   10d1e:	|      move.l d0,-(sp)
   10d20:	|      jsr 150d2 <trimStack>
   10d26:	|      addq.l #4,sp
	struct objectType * o = findObjectType(objT);
   10d28:	|      move.l 4(sp),d0
   10d2c:	|      move.l d0,-(sp)
   10d2e:	|      jsr d4b8 <findObjectType>
   10d34:	|      addq.l #4,sp
   10d36:	|      move.l d0,12(sp)
	FreeVec(o->screenName);
   10d3a:	|      movea.l 12(sp),a0
   10d3e:	|      move.l (a0),8(sp)
   10d42:	|      move.l 1c85c <SysBase>,d0
   10d48:	|      movea.l d0,a6
   10d4a:	|      movea.l 8(sp),a1
   10d4e:	|      jsr -690(a6)
	o->screenName = newText;
   10d52:	|      movea.l 12(sp),a0
   10d56:	|      move.l 16(sp),(a0)
	return BR_CONTINUE;
   10d5a:	|      moveq #2,d0
}
   10d5c:	\----> movea.l (sp)+,a6
   10d5e:	       lea 16(sp),sp
   10d62:	       rts

00010d64 <builtIn_getObjectX>:

builtIn (getObjectX)
{
   10d64:	          lea -12(sp),sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10d68:	          movea.l 20(sp),a0
   10d6c:	          move.l 24(a0),d0
   10d70:	          move.l d0,-(sp)
   10d72:	          pea 7 <_start+0x7>
   10d76:	          lea 8(sp),a0
   10d7a:	          move.l a0,-(sp)
   10d7c:	          jsr 1474e <getValueType>
   10d82:	          lea 12(sp),sp
   10d86:	          tst.w d0
   10d88:	      /-- bne.s 10d90 <builtIn_getObjectX+0x2c>
   10d8a:	      |   moveq #1,d0
   10d8c:	/-----|-- bra.w 10e2c <builtIn_getObjectX+0xc8>
	trimStack (&fun -> stack);
   10d90:	|     \-> moveq #24,d0
   10d92:	|         add.l 20(sp),d0
   10d96:	|         move.l d0,-(sp)
   10d98:	|         jsr 150d2 <trimStack>
   10d9e:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   10da0:	|         move.l (sp),d0
   10da2:	|         move.l d0,-(sp)
   10da4:	|         jsr a646 <findPerson>
   10daa:	|         addq.l #4,sp
   10dac:	|         move.l d0,8(sp)
	if (pers) {
   10db0:	|     /-- beq.s 10dde <builtIn_getObjectX+0x7a>
		setVariable (&fun -> reg, SVT_INT, pers -> x);
   10db2:	|     |   movea.l 8(sp),a0
   10db6:	|     |   move.l (a0),d0
   10db8:	|     |   move.l d0,-(sp)
   10dba:	|     |   jsr 1754a <__fixsfsi>
   10dc0:	|     |   addq.l #4,sp
   10dc2:	|     |   move.l d0,d1
   10dc4:	|     |   moveq #28,d0
   10dc6:	|     |   add.l 20(sp),d0
   10dca:	|     |   move.l d1,-(sp)
   10dcc:	|     |   pea 1 <_start+0x1>
   10dd0:	|     |   move.l d0,-(sp)
   10dd2:	|     |   jsr 15040 <setVariable>
   10dd8:	|     |   lea 12(sp),sp
   10ddc:	|  /--|-- bra.s 10e2a <builtIn_getObjectX+0xc6>
	} else {
		struct screenRegion * la = getRegionForObject (objectNumber);
   10dde:	|  |  \-> move.l (sp),d0
   10de0:	|  |      move.l d0,-(sp)
   10de2:	|  |      jsr 15998 <getRegionForObject>
   10de8:	|  |      addq.l #4,sp
   10dea:	|  |      move.l d0,4(sp)
		if (la) {
   10dee:	|  |  /-- beq.s 10e12 <builtIn_getObjectX+0xae>
			setVariable (&fun -> reg, SVT_INT, la -> sX);
   10df0:	|  |  |   movea.l 4(sp),a0
   10df4:	|  |  |   move.l 16(a0),d1
   10df8:	|  |  |   moveq #28,d0
   10dfa:	|  |  |   add.l 20(sp),d0
   10dfe:	|  |  |   move.l d1,-(sp)
   10e00:	|  |  |   pea 1 <_start+0x1>
   10e04:	|  |  |   move.l d0,-(sp)
   10e06:	|  |  |   jsr 15040 <setVariable>
   10e0c:	|  |  |   lea 12(sp),sp
   10e10:	|  +--|-- bra.s 10e2a <builtIn_getObjectX+0xc6>
		} else {
			setVariable (&fun -> reg, SVT_INT, 0);
   10e12:	|  |  \-> moveq #28,d0
   10e14:	|  |      add.l 20(sp),d0
   10e18:	|  |      clr.l -(sp)
   10e1a:	|  |      pea 1 <_start+0x1>
   10e1e:	|  |      move.l d0,-(sp)
   10e20:	|  |      jsr 15040 <setVariable>
   10e26:	|  |      lea 12(sp),sp
		}
	}
	return BR_CONTINUE;
   10e2a:	|  \----> moveq #2,d0
}
   10e2c:	\-------> lea 12(sp),sp
   10e30:	          rts

00010e32 <builtIn_getObjectY>:

builtIn (getObjectY)
{
   10e32:	          lea -12(sp),sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10e36:	          movea.l 20(sp),a0
   10e3a:	          move.l 24(a0),d0
   10e3e:	          move.l d0,-(sp)
   10e40:	          pea 7 <_start+0x7>
   10e44:	          lea 8(sp),a0
   10e48:	          move.l a0,-(sp)
   10e4a:	          jsr 1474e <getValueType>
   10e50:	          lea 12(sp),sp
   10e54:	          tst.w d0
   10e56:	      /-- bne.s 10e5e <builtIn_getObjectY+0x2c>
   10e58:	      |   moveq #1,d0
   10e5a:	/-----|-- bra.w 10efc <builtIn_getObjectY+0xca>
	trimStack (&fun -> stack);
   10e5e:	|     \-> moveq #24,d0
   10e60:	|         add.l 20(sp),d0
   10e64:	|         move.l d0,-(sp)
   10e66:	|         jsr 150d2 <trimStack>
   10e6c:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   10e6e:	|         move.l (sp),d0
   10e70:	|         move.l d0,-(sp)
   10e72:	|         jsr a646 <findPerson>
   10e78:	|         addq.l #4,sp
   10e7a:	|         move.l d0,8(sp)
	if (pers) {
   10e7e:	|     /-- beq.s 10eae <builtIn_getObjectY+0x7c>
		setVariable (&fun -> reg, SVT_INT, pers -> y);
   10e80:	|     |   movea.l 8(sp),a0
   10e84:	|     |   move.l 4(a0),d0
   10e88:	|     |   move.l d0,-(sp)
   10e8a:	|     |   jsr 1754a <__fixsfsi>
   10e90:	|     |   addq.l #4,sp
   10e92:	|     |   move.l d0,d1
   10e94:	|     |   moveq #28,d0
   10e96:	|     |   add.l 20(sp),d0
   10e9a:	|     |   move.l d1,-(sp)
   10e9c:	|     |   pea 1 <_start+0x1>
   10ea0:	|     |   move.l d0,-(sp)
   10ea2:	|     |   jsr 15040 <setVariable>
   10ea8:	|     |   lea 12(sp),sp
   10eac:	|  /--|-- bra.s 10efa <builtIn_getObjectY+0xc8>
	} else {
		struct screenRegion * la = getRegionForObject (objectNumber);
   10eae:	|  |  \-> move.l (sp),d0
   10eb0:	|  |      move.l d0,-(sp)
   10eb2:	|  |      jsr 15998 <getRegionForObject>
   10eb8:	|  |      addq.l #4,sp
   10eba:	|  |      move.l d0,4(sp)
		if (la) {
   10ebe:	|  |  /-- beq.s 10ee2 <builtIn_getObjectY+0xb0>
			setVariable (&fun -> reg, SVT_INT, la -> sY);
   10ec0:	|  |  |   movea.l 4(sp),a0
   10ec4:	|  |  |   move.l 20(a0),d1
   10ec8:	|  |  |   moveq #28,d0
   10eca:	|  |  |   add.l 20(sp),d0
   10ece:	|  |  |   move.l d1,-(sp)
   10ed0:	|  |  |   pea 1 <_start+0x1>
   10ed4:	|  |  |   move.l d0,-(sp)
   10ed6:	|  |  |   jsr 15040 <setVariable>
   10edc:	|  |  |   lea 12(sp),sp
   10ee0:	|  +--|-- bra.s 10efa <builtIn_getObjectY+0xc8>
		} else {
			setVariable (&fun -> reg, SVT_INT, 0);
   10ee2:	|  |  \-> moveq #28,d0
   10ee4:	|  |      add.l 20(sp),d0
   10ee8:	|  |      clr.l -(sp)
   10eea:	|  |      pea 1 <_start+0x1>
   10eee:	|  |      move.l d0,-(sp)
   10ef0:	|  |      jsr 15040 <setVariable>
   10ef6:	|  |      lea 12(sp),sp
		}
	}
	return BR_CONTINUE;
   10efa:	|  \----> moveq #2,d0
}
   10efc:	\-------> lea 12(sp),sp
   10f00:	          rts

00010f02 <builtIn_addScreenRegion>:


builtIn(addScreenRegion)
{
   10f02:	       lea -32(sp),sp
   10f06:	       movem.l d2-d5,-(sp)
	UNUSEDALL
	int sX, sY, x1, y1, x2, y2, di, objectNumber;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10f0a:	       movea.l 56(sp),a0
   10f0e:	       move.l 24(a0),d0
   10f12:	       move.l d0,-(sp)
   10f14:	       pea 1 <_start+0x1>
   10f18:	       lea 28(sp),a0
   10f1c:	       move.l a0,-(sp)
   10f1e:	       jsr 1474e <getValueType>
   10f24:	       lea 12(sp),sp
   10f28:	       tst.w d0
   10f2a:	   /-- bne.s 10f32 <builtIn_addScreenRegion+0x30>
   10f2c:	   |   moveq #1,d0
   10f2e:	/--|-- bra.w 1110c <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   10f32:	|  \-> moveq #24,d0
   10f34:	|      add.l 56(sp),d0
   10f38:	|      move.l d0,-(sp)
   10f3a:	|      jsr 150d2 <trimStack>
   10f40:	|      addq.l #4,sp
	if (! getValueType(&sY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10f42:	|      movea.l 56(sp),a0
   10f46:	|      move.l 24(a0),d0
   10f4a:	|      move.l d0,-(sp)
   10f4c:	|      pea 1 <_start+0x1>
   10f50:	|      moveq #48,d0
   10f52:	|      add.l sp,d0
   10f54:	|      move.l d0,-(sp)
   10f56:	|      jsr 1474e <getValueType>
   10f5c:	|      lea 12(sp),sp
   10f60:	|      tst.w d0
   10f62:	|  /-- bne.s 10f6a <builtIn_addScreenRegion+0x68>
   10f64:	|  |   moveq #1,d0
   10f66:	+--|-- bra.w 1110c <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   10f6a:	|  \-> moveq #24,d0
   10f6c:	|      add.l 56(sp),d0
   10f70:	|      move.l d0,-(sp)
   10f72:	|      jsr 150d2 <trimStack>
   10f78:	|      addq.l #4,sp
	if (! getValueType(&sX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10f7a:	|      movea.l 56(sp),a0
   10f7e:	|      move.l 24(a0),d0
   10f82:	|      move.l d0,-(sp)
   10f84:	|      pea 1 <_start+0x1>
   10f88:	|      moveq #52,d0
   10f8a:	|      add.l sp,d0
   10f8c:	|      move.l d0,-(sp)
   10f8e:	|      jsr 1474e <getValueType>
   10f94:	|      lea 12(sp),sp
   10f98:	|      tst.w d0
   10f9a:	|  /-- bne.s 10fa2 <builtIn_addScreenRegion+0xa0>
   10f9c:	|  |   moveq #1,d0
   10f9e:	+--|-- bra.w 1110c <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   10fa2:	|  \-> moveq #24,d0
   10fa4:	|      add.l 56(sp),d0
   10fa8:	|      move.l d0,-(sp)
   10faa:	|      jsr 150d2 <trimStack>
   10fb0:	|      addq.l #4,sp
	if (! getValueType(&y2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10fb2:	|      movea.l 56(sp),a0
   10fb6:	|      move.l 24(a0),d0
   10fba:	|      move.l d0,-(sp)
   10fbc:	|      pea 1 <_start+0x1>
   10fc0:	|      lea 32(sp),a0
   10fc4:	|      move.l a0,-(sp)
   10fc6:	|      jsr 1474e <getValueType>
   10fcc:	|      lea 12(sp),sp
   10fd0:	|      tst.w d0
   10fd2:	|  /-- bne.s 10fda <builtIn_addScreenRegion+0xd8>
   10fd4:	|  |   moveq #1,d0
   10fd6:	+--|-- bra.w 1110c <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   10fda:	|  \-> moveq #24,d0
   10fdc:	|      add.l 56(sp),d0
   10fe0:	|      move.l d0,-(sp)
   10fe2:	|      jsr 150d2 <trimStack>
   10fe8:	|      addq.l #4,sp
	if (! getValueType(&x2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10fea:	|      movea.l 56(sp),a0
   10fee:	|      move.l 24(a0),d0
   10ff2:	|      move.l d0,-(sp)
   10ff4:	|      pea 1 <_start+0x1>
   10ff8:	|      lea 36(sp),a0
   10ffc:	|      move.l a0,-(sp)
   10ffe:	|      jsr 1474e <getValueType>
   11004:	|      lea 12(sp),sp
   11008:	|      tst.w d0
   1100a:	|  /-- bne.s 11012 <builtIn_addScreenRegion+0x110>
   1100c:	|  |   moveq #1,d0
   1100e:	+--|-- bra.w 1110c <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   11012:	|  \-> moveq #24,d0
   11014:	|      add.l 56(sp),d0
   11018:	|      move.l d0,-(sp)
   1101a:	|      jsr 150d2 <trimStack>
   11020:	|      addq.l #4,sp
	if (! getValueType(&y1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11022:	|      movea.l 56(sp),a0
   11026:	|      move.l 24(a0),d0
   1102a:	|      move.l d0,-(sp)
   1102c:	|      pea 1 <_start+0x1>
   11030:	|      lea 40(sp),a0
   11034:	|      move.l a0,-(sp)
   11036:	|      jsr 1474e <getValueType>
   1103c:	|      lea 12(sp),sp
   11040:	|      tst.w d0
   11042:	|  /-- bne.s 1104a <builtIn_addScreenRegion+0x148>
   11044:	|  |   moveq #1,d0
   11046:	+--|-- bra.w 1110c <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   1104a:	|  \-> moveq #24,d0
   1104c:	|      add.l 56(sp),d0
   11050:	|      move.l d0,-(sp)
   11052:	|      jsr 150d2 <trimStack>
   11058:	|      addq.l #4,sp
	if (! getValueType(&x1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1105a:	|      movea.l 56(sp),a0
   1105e:	|      move.l 24(a0),d0
   11062:	|      move.l d0,-(sp)
   11064:	|      pea 1 <_start+0x1>
   11068:	|      lea 44(sp),a0
   1106c:	|      move.l a0,-(sp)
   1106e:	|      jsr 1474e <getValueType>
   11074:	|      lea 12(sp),sp
   11078:	|      tst.w d0
   1107a:	|  /-- bne.s 11082 <builtIn_addScreenRegion+0x180>
   1107c:	|  |   moveq #1,d0
   1107e:	+--|-- bra.w 1110c <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   11082:	|  \-> moveq #24,d0
   11084:	|      add.l 56(sp),d0
   11088:	|      move.l d0,-(sp)
   1108a:	|      jsr 150d2 <trimStack>
   11090:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11092:	|      movea.l 56(sp),a0
   11096:	|      move.l 24(a0),d0
   1109a:	|      move.l d0,-(sp)
   1109c:	|      pea 7 <_start+0x7>
   110a0:	|      lea 24(sp),a0
   110a4:	|      move.l a0,-(sp)
   110a6:	|      jsr 1474e <getValueType>
   110ac:	|      lea 12(sp),sp
   110b0:	|      tst.w d0
   110b2:	|  /-- bne.s 110b8 <builtIn_addScreenRegion+0x1b6>
   110b4:	|  |   moveq #1,d0
   110b6:	+--|-- bra.s 1110c <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   110b8:	|  \-> moveq #24,d0
   110ba:	|      add.l 56(sp),d0
   110be:	|      move.l d0,-(sp)
   110c0:	|      jsr 150d2 <trimStack>
   110c6:	|      addq.l #4,sp
	if (addScreenRegion (x1, y1, x2, y2, sX, sY, di, objectNumber)) return BR_CONTINUE;
   110c8:	|      move.l 16(sp),d5
   110cc:	|      move.l 20(sp),d4
   110d0:	|      move.l 40(sp),d3
   110d4:	|      move.l 44(sp),d2
   110d8:	|      movea.l 24(sp),a1
   110dc:	|      movea.l 28(sp),a0
   110e0:	|      move.l 32(sp),d1
   110e4:	|      move.l 36(sp),d0
   110e8:	|      move.l d5,-(sp)
   110ea:	|      move.l d4,-(sp)
   110ec:	|      move.l d3,-(sp)
   110ee:	|      move.l d2,-(sp)
   110f0:	|      move.l a1,-(sp)
   110f2:	|      move.l a0,-(sp)
   110f4:	|      move.l d1,-(sp)
   110f6:	|      move.l d0,-(sp)
   110f8:	|      jsr 15852 <addScreenRegion>
   110fe:	|      lea 32(sp),sp
   11102:	|      tst.w d0
   11104:	|  /-- beq.s 1110a <builtIn_addScreenRegion+0x208>
   11106:	|  |   moveq #2,d0
   11108:	+--|-- bra.s 1110c <builtIn_addScreenRegion+0x20a>
	return BR_ERROR;
   1110a:	|  \-> moveq #1,d0

}
   1110c:	\----> movem.l (sp)+,d2-d5
   11110:	       lea 32(sp),sp
   11114:	       rts

00011116 <builtIn_removeScreenRegion>:

builtIn(removeScreenRegion)
{
   11116:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11118:	       movea.l 12(sp),a0
   1111c:	       move.l 24(a0),d0
   11120:	       move.l d0,-(sp)
   11122:	       pea 7 <_start+0x7>
   11126:	       move.l sp,d0
   11128:	       addq.l #8,d0
   1112a:	       move.l d0,-(sp)
   1112c:	       jsr 1474e <getValueType>
   11132:	       lea 12(sp),sp
   11136:	       tst.w d0
   11138:	   /-- bne.s 1113e <builtIn_removeScreenRegion+0x28>
   1113a:	   |   moveq #1,d0
   1113c:	/--|-- bra.s 1115c <builtIn_removeScreenRegion+0x46>
	trimStack (&fun -> stack);
   1113e:	|  \-> moveq #24,d0
   11140:	|      add.l 12(sp),d0
   11144:	|      move.l d0,-(sp)
   11146:	|      jsr 150d2 <trimStack>
   1114c:	|      addq.l #4,sp
	removeScreenRegion (objectNumber);
   1114e:	|      move.l (sp),d0
   11150:	|      move.l d0,-(sp)
   11152:	|      jsr 15b40 <removeScreenRegion>
   11158:	|      addq.l #4,sp
	return BR_CONTINUE;
   1115a:	|      moveq #2,d0
}
   1115c:	\----> addq.l #4,sp
   1115e:	       rts

00011160 <builtIn_showBoxes>:

builtIn(showBoxes)
{
	UNUSEDALL
	showBoxes ();
   11160:	jsr 15cc4 <showBoxes>
	return BR_CONTINUE;
   11166:	moveq #2,d0
}
   11168:	rts

0001116a <builtIn_removeAllScreenRegions>:

builtIn(removeAllScreenRegions)
{
	UNUSEDALL
	killAllRegions ();
   1116a:	jsr 159c6 <killAllRegions>
	return BR_CONTINUE;
   11170:	moveq #2,d0
}
   11172:	rts

00011174 <builtIn_addCharacter>:

builtIn(addCharacter)
{
   11174:	       lea -16(sp),sp
	UNUSEDALL
	struct persona * p;
	int x, y, objectNumber;

	p = getCostumeFromVar (&(fun -> stack -> thisVar));
   11178:	       movea.l 24(sp),a0
   1117c:	       move.l 24(a0),d0
   11180:	       move.l d0,-(sp)
   11182:	       jsr 143fa <getCostumeFromVar>
   11188:	       addq.l #4,sp
   1118a:	       move.l d0,12(sp)
	if (p == NULL) return BR_ERROR;
   1118e:	   /-- bne.s 11196 <builtIn_addCharacter+0x22>
   11190:	   |   moveq #1,d0
   11192:	/--|-- bra.w 11272 <builtIn_addCharacter+0xfe>

	trimStack (&fun -> stack);
   11196:	|  \-> moveq #24,d0
   11198:	|      add.l 24(sp),d0
   1119c:	|      move.l d0,-(sp)
   1119e:	|      jsr 150d2 <trimStack>
   111a4:	|      addq.l #4,sp
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   111a6:	|      movea.l 24(sp),a0
   111aa:	|      move.l 24(a0),d0
   111ae:	|      move.l d0,-(sp)
   111b0:	|      pea 1 <_start+0x1>
   111b4:	|      lea 12(sp),a0
   111b8:	|      move.l a0,-(sp)
   111ba:	|      jsr 1474e <getValueType>
   111c0:	|      lea 12(sp),sp
   111c4:	|      tst.w d0
   111c6:	|  /-- bne.s 111ce <builtIn_addCharacter+0x5a>
   111c8:	|  |   moveq #1,d0
   111ca:	+--|-- bra.w 11272 <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
   111ce:	|  \-> moveq #24,d0
   111d0:	|      add.l 24(sp),d0
   111d4:	|      move.l d0,-(sp)
   111d6:	|      jsr 150d2 <trimStack>
   111dc:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   111de:	|      movea.l 24(sp),a0
   111e2:	|      move.l 24(a0),d0
   111e6:	|      move.l d0,-(sp)
   111e8:	|      pea 1 <_start+0x1>
   111ec:	|      moveq #16,d0
   111ee:	|      add.l sp,d0
   111f0:	|      move.l d0,-(sp)
   111f2:	|      jsr 1474e <getValueType>
   111f8:	|      lea 12(sp),sp
   111fc:	|      tst.w d0
   111fe:	|  /-- bne.s 11204 <builtIn_addCharacter+0x90>
   11200:	|  |   moveq #1,d0
   11202:	+--|-- bra.s 11272 <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
   11204:	|  \-> moveq #24,d0
   11206:	|      add.l 24(sp),d0
   1120a:	|      move.l d0,-(sp)
   1120c:	|      jsr 150d2 <trimStack>
   11212:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11214:	|      movea.l 24(sp),a0
   11218:	|      move.l 24(a0),d0
   1121c:	|      move.l d0,-(sp)
   1121e:	|      pea 7 <_start+0x7>
   11222:	|      lea 8(sp),a0
   11226:	|      move.l a0,-(sp)
   11228:	|      jsr 1474e <getValueType>
   1122e:	|      lea 12(sp),sp
   11232:	|      tst.w d0
   11234:	|  /-- bne.s 1123a <builtIn_addCharacter+0xc6>
   11236:	|  |   moveq #1,d0
   11238:	+--|-- bra.s 11272 <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
   1123a:	|  \-> moveq #24,d0
   1123c:	|      add.l 24(sp),d0
   11240:	|      move.l d0,-(sp)
   11242:	|      jsr 150d2 <trimStack>
   11248:	|      addq.l #4,sp
	if (addPerson (x, y, objectNumber, p)) return BR_CONTINUE;
   1124a:	|      movea.l (sp),a0
   1124c:	|      move.l 4(sp),d1
   11250:	|      move.l 8(sp),d0
   11254:	|      move.l 12(sp),-(sp)
   11258:	|      move.l a0,-(sp)
   1125a:	|      move.l d1,-(sp)
   1125c:	|      move.l d0,-(sp)
   1125e:	|      jsr 9240 <addPerson>
   11264:	|      lea 16(sp),sp
   11268:	|      tst.w d0
   1126a:	|  /-- beq.s 11270 <builtIn_addCharacter+0xfc>
   1126c:	|  |   moveq #2,d0
   1126e:	+--|-- bra.s 11272 <builtIn_addCharacter+0xfe>
	return BR_ERROR;
   11270:	|  \-> moveq #1,d0
}
   11272:	\----> lea 16(sp),sp
   11276:	       rts

00011278 <builtIn_hideCharacter>:

builtIn(hideCharacter)
{
   11278:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1127a:	       movea.l 12(sp),a0
   1127e:	       move.l 24(a0),d0
   11282:	       move.l d0,-(sp)
   11284:	       pea 7 <_start+0x7>
   11288:	       move.l sp,d0
   1128a:	       addq.l #8,d0
   1128c:	       move.l d0,-(sp)
   1128e:	       jsr 1474e <getValueType>
   11294:	       lea 12(sp),sp
   11298:	       tst.w d0
   1129a:	   /-- bne.s 112a0 <builtIn_hideCharacter+0x28>
   1129c:	   |   moveq #1,d0
   1129e:	/--|-- bra.s 112c0 <builtIn_hideCharacter+0x48>
	trimStack (&fun -> stack);
   112a0:	|  \-> moveq #24,d0
   112a2:	|      add.l 12(sp),d0
   112a6:	|      move.l d0,-(sp)
   112a8:	|      jsr 150d2 <trimStack>
   112ae:	|      addq.l #4,sp
	setShown (FALSE, objectNumber);
   112b0:	|      move.l (sp),d0
   112b2:	|      move.l d0,-(sp)
   112b4:	|      clr.l -(sp)
   112b6:	|      jsr bc7a <setShown>
   112bc:	|      addq.l #8,sp
	return BR_CONTINUE;
   112be:	|      moveq #2,d0
}
   112c0:	\----> addq.l #4,sp
   112c2:	       rts

000112c4 <builtIn_showCharacter>:

builtIn(showCharacter)
{
   112c4:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   112c6:	       movea.l 12(sp),a0
   112ca:	       move.l 24(a0),d0
   112ce:	       move.l d0,-(sp)
   112d0:	       pea 7 <_start+0x7>
   112d4:	       move.l sp,d0
   112d6:	       addq.l #8,d0
   112d8:	       move.l d0,-(sp)
   112da:	       jsr 1474e <getValueType>
   112e0:	       lea 12(sp),sp
   112e4:	       tst.w d0
   112e6:	   /-- bne.s 112ec <builtIn_showCharacter+0x28>
   112e8:	   |   moveq #1,d0
   112ea:	/--|-- bra.s 1130e <builtIn_showCharacter+0x4a>
	trimStack (&fun -> stack);
   112ec:	|  \-> moveq #24,d0
   112ee:	|      add.l 12(sp),d0
   112f2:	|      move.l d0,-(sp)
   112f4:	|      jsr 150d2 <trimStack>
   112fa:	|      addq.l #4,sp
	setShown (TRUE, objectNumber);
   112fc:	|      move.l (sp),d0
   112fe:	|      move.l d0,-(sp)
   11300:	|      pea 1 <_start+0x1>
   11304:	|      jsr bc7a <setShown>
   1130a:	|      addq.l #8,sp
	return BR_CONTINUE;
   1130c:	|      moveq #2,d0
}
   1130e:	\----> addq.l #4,sp
   11310:	       rts

00011312 <builtIn_removeAllCharacters>:

builtIn(removeAllCharacters)
{
	UNUSEDALL
	killSpeechTimers ();
   11312:	jsr 6274 <killSpeechTimers>
	killMostPeople ();
   11318:	jsr aab2 <killMostPeople>
	return BR_CONTINUE;
   1131e:	moveq #2,d0
}
   11320:	rts

00011322 <builtIn_setCharacterDrawMode>:

builtIn(setCharacterDrawMode)
{
   11322:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11324:	       movea.l 16(sp),a0
   11328:	       move.l 24(a0),d0
   1132c:	       move.l d0,-(sp)
   1132e:	       pea 1 <_start+0x1>
   11332:	       move.l sp,d0
   11334:	       addq.l #8,d0
   11336:	       move.l d0,-(sp)
   11338:	       jsr 1474e <getValueType>
   1133e:	       lea 12(sp),sp
   11342:	       tst.w d0
   11344:	   /-- bne.s 1134a <builtIn_setCharacterDrawMode+0x28>
   11346:	   |   moveq #1,d0
   11348:	/--|-- bra.s 113a4 <builtIn_setCharacterDrawMode+0x82>
	trimStack (&fun -> stack);
   1134a:	|  \-> moveq #24,d0
   1134c:	|      add.l 16(sp),d0
   11350:	|      move.l d0,-(sp)
   11352:	|      jsr 150d2 <trimStack>
   11358:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1135a:	|      movea.l 16(sp),a0
   1135e:	|      move.l 24(a0),d0
   11362:	|      move.l d0,-(sp)
   11364:	|      pea 7 <_start+0x7>
   11368:	|      moveq #12,d0
   1136a:	|      add.l sp,d0
   1136c:	|      move.l d0,-(sp)
   1136e:	|      jsr 1474e <getValueType>
   11374:	|      lea 12(sp),sp
   11378:	|      tst.w d0
   1137a:	|  /-- bne.s 11380 <builtIn_setCharacterDrawMode+0x5e>
   1137c:	|  |   moveq #1,d0
   1137e:	+--|-- bra.s 113a4 <builtIn_setCharacterDrawMode+0x82>
	trimStack (&fun -> stack);
   11380:	|  \-> moveq #24,d0
   11382:	|      add.l 16(sp),d0
   11386:	|      move.l d0,-(sp)
   11388:	|      jsr 150d2 <trimStack>
   1138e:	|      addq.l #4,sp
	setDrawMode (di, obj);
   11390:	|      move.l 4(sp),d1
   11394:	|      move.l (sp),d0
   11396:	|      move.l d1,-(sp)
   11398:	|      move.l d0,-(sp)
   1139a:	|      jsr b5b8 <setDrawMode>
   113a0:	|      addq.l #8,sp
	return BR_CONTINUE;
   113a2:	|      moveq #2,d0
}
   113a4:	\----> addq.l #8,sp
   113a6:	       rts

000113a8 <builtIn_setCharacterTransparency>:

builtIn(setCharacterTransparency)
{
	UNUSEDALL
	KPrintF("setCharacterTransparency: Not implemented on Amiga");
   113a8:	pea 199b0 <PutChar+0x1d66>
   113ae:	jsr 17176 <KPrintF>
   113b4:	addq.l #4,sp
	return BR_CONTINUE;
   113b6:	moveq #2,d0
}
   113b8:	rts

000113ba <builtIn_setCharacterColourise>:

builtIn(setCharacterColourise)
{
	UNUSEDALL
	KPrintF("setCharacterColourise: Currently not implemented on Amiga");
   113ba:	pea 199e3 <PutChar+0x1d99>
   113c0:	jsr 17176 <KPrintF>
   113c6:	addq.l #4,sp
	if (! getValueType(&r, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
	trimStack (&fun -> stack);
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
	trimStack (&fun -> stack);
	setPersonColourise (obj, r, g, b, mix);*/
	return BR_CONTINUE;
   113c8:	moveq #2,d0
}
   113ca:	rts

000113cc <builtIn_setScale>:

builtIn(setScale)
{
   113cc:	       subq.l #8,sp
	UNUSEDALL
	int val1, val2;
	if (! getValueType(&val2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   113ce:	       movea.l 16(sp),a0
   113d2:	       move.l 24(a0),d0
   113d6:	       move.l d0,-(sp)
   113d8:	       pea 1 <_start+0x1>
   113dc:	       move.l sp,d0
   113de:	       addq.l #8,d0
   113e0:	       move.l d0,-(sp)
   113e2:	       jsr 1474e <getValueType>
   113e8:	       lea 12(sp),sp
   113ec:	       tst.w d0
   113ee:	   /-- bne.s 113f4 <builtIn_setScale+0x28>
   113f0:	   |   moveq #1,d0
   113f2:	/--|-- bra.s 11456 <builtIn_setScale+0x8a>
	trimStack (&fun -> stack);
   113f4:	|  \-> moveq #24,d0
   113f6:	|      add.l 16(sp),d0
   113fa:	|      move.l d0,-(sp)
   113fc:	|      jsr 150d2 <trimStack>
   11402:	|      addq.l #4,sp
	if (! getValueType(&val1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11404:	|      movea.l 16(sp),a0
   11408:	|      move.l 24(a0),d0
   1140c:	|      move.l d0,-(sp)
   1140e:	|      pea 1 <_start+0x1>
   11412:	|      moveq #12,d0
   11414:	|      add.l sp,d0
   11416:	|      move.l d0,-(sp)
   11418:	|      jsr 1474e <getValueType>
   1141e:	|      lea 12(sp),sp
   11422:	|      tst.w d0
   11424:	|  /-- bne.s 1142a <builtIn_setScale+0x5e>
   11426:	|  |   moveq #1,d0
   11428:	+--|-- bra.s 11456 <builtIn_setScale+0x8a>
	trimStack (&fun -> stack);
   1142a:	|  \-> moveq #24,d0
   1142c:	|      add.l 16(sp),d0
   11430:	|      move.l d0,-(sp)
   11432:	|      jsr 150d2 <trimStack>
   11438:	|      addq.l #4,sp
	setScale ((short int) val1, (short int) val2);
   1143a:	|      move.l (sp),d0
   1143c:	|      move.l d0,d0
   1143e:	|      movea.w d0,a1
   11440:	|      move.l 4(sp),d0
   11444:	|      move.l d0,d0
   11446:	|      movea.w d0,a0
   11448:	|      move.l a1,-(sp)
   1144a:	|      move.l a0,-(sp)
   1144c:	|      jsr bc52 <setScale>
   11452:	|      addq.l #8,sp
	return BR_CONTINUE;
   11454:	|      moveq #2,d0
}
   11456:	\----> addq.l #8,sp
   11458:	       rts

0001145a <builtIn_stopCharacter>:

builtIn(stopCharacter)
{
   1145a:	       subq.l #4,sp
	UNUSEDALL
	int obj;
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1145c:	       movea.l 12(sp),a0
   11460:	       move.l 24(a0),d0
   11464:	       move.l d0,-(sp)
   11466:	       pea 7 <_start+0x7>
   1146a:	       move.l sp,d0
   1146c:	       addq.l #8,d0
   1146e:	       move.l d0,-(sp)
   11470:	       jsr 1474e <getValueType>
   11476:	       lea 12(sp),sp
   1147a:	       tst.w d0
   1147c:	   /-- bne.s 11482 <builtIn_stopCharacter+0x28>
   1147e:	   |   moveq #1,d0
   11480:	/--|-- bra.s 114ba <builtIn_stopCharacter+0x60>
	trimStack (&fun -> stack);
   11482:	|  \-> moveq #24,d0
   11484:	|      add.l 12(sp),d0
   11488:	|      move.l d0,-(sp)
   1148a:	|      jsr 150d2 <trimStack>
   11490:	|      addq.l #4,sp

	// Return value
	setVariable (&fun -> reg, SVT_INT, stopPerson (obj));
   11492:	|      move.l (sp),d0
   11494:	|      move.l d0,-(sp)
   11496:	|      jsr bd86 <stopPerson>
   1149c:	|      addq.l #4,sp
   1149e:	|      movea.w d0,a0
   114a0:	|      moveq #28,d0
   114a2:	|      add.l 12(sp),d0
   114a6:	|      move.l a0,-(sp)
   114a8:	|      pea 1 <_start+0x1>
   114ac:	|      move.l d0,-(sp)
   114ae:	|      jsr 15040 <setVariable>
   114b4:	|      lea 12(sp),sp
	return BR_CONTINUE;
   114b8:	|      moveq #2,d0
}
   114ba:	\----> addq.l #4,sp
   114bc:	       rts

000114be <builtIn_pasteCharacter>:
		fixScaleSprite (thisPerson -> x, thisPerson -> y, myAnim -> theSprites -> bank.sprites[abs (fNum)], myAnim -> theSprites -> bank.myPalette, thisPerson, 0, 0, fNum < 0);
		setVariable (&fun -> reg, SVT_INT, 1);
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
	} Todo: Amigize this*/
	KPrintF("Not implemented yet for Amiga");
   114be:	pea 19a1d <PutChar+0x1dd3>
   114c4:	jsr 17176 <KPrintF>
   114ca:	addq.l #4,sp
	return BR_CONTINUE;
   114cc:	moveq #2,d0
}
   114ce:	rts

000114d0 <builtIn_animate>:

builtIn(animate)
{
   114d0:	       subq.l #8,sp
	UNUSEDALL
	int obj;
	struct personaAnimation * pp = getAnimationFromVar (&(fun -> stack -> thisVar));
   114d2:	       movea.l 16(sp),a0
   114d6:	       move.l 24(a0),d0
   114da:	       move.l d0,-(sp)
   114dc:	       jsr 14c26 <getAnimationFromVar>
   114e2:	       addq.l #4,sp
   114e4:	       move.l d0,4(sp)
	if (pp == NULL) return BR_ERROR;
   114e8:	   /-- bne.s 114ee <builtIn_animate+0x1e>
   114ea:	   |   moveq #1,d0
   114ec:	/--|-- bra.s 1156c <builtIn_animate+0x9c>
	trimStack (&fun -> stack);
   114ee:	|  \-> moveq #24,d0
   114f0:	|      add.l 16(sp),d0
   114f4:	|      move.l d0,-(sp)
   114f6:	|      jsr 150d2 <trimStack>
   114fc:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   114fe:	|      movea.l 16(sp),a0
   11502:	|      move.l 24(a0),d0
   11506:	|      move.l d0,-(sp)
   11508:	|      pea 7 <_start+0x7>
   1150c:	|      move.l sp,d0
   1150e:	|      addq.l #8,d0
   11510:	|      move.l d0,-(sp)
   11512:	|      jsr 1474e <getValueType>
   11518:	|      lea 12(sp),sp
   1151c:	|      tst.w d0
   1151e:	|  /-- bne.s 11524 <builtIn_animate+0x54>
   11520:	|  |   moveq #1,d0
   11522:	+--|-- bra.s 1156c <builtIn_animate+0x9c>
	trimStack (&fun -> stack);
   11524:	|  \-> moveq #24,d0
   11526:	|      add.l 16(sp),d0
   1152a:	|      move.l d0,-(sp)
   1152c:	|      jsr 150d2 <trimStack>
   11532:	|      addq.l #4,sp
	animatePerson (obj, pp);
   11534:	|      move.l (sp),d0
   11536:	|      move.l 4(sp),-(sp)
   1153a:	|      move.l d0,-(sp)
   1153c:	|      jsr 94b6 <animatePerson>
   11542:	|      addq.l #8,sp
	setVariable (&fun -> reg, SVT_INT, timeForAnim (pp));
   11544:	|      move.l 4(sp),-(sp)
   11548:	|      jsr bdda <timeForAnim>
   1154e:	|      addq.l #4,sp
   11550:	|      move.l d0,d1
   11552:	|      moveq #28,d0
   11554:	|      add.l 16(sp),d0
   11558:	|      move.l d1,-(sp)
   1155a:	|      pea 1 <_start+0x1>
   1155e:	|      move.l d0,-(sp)
   11560:	|      jsr 15040 <setVariable>
   11566:	|      lea 12(sp),sp
	return BR_CONTINUE;
   1156a:	|      moveq #2,d0
}
   1156c:	\----> addq.l #8,sp
   1156e:	       rts

00011570 <builtIn_setCostume>:

builtIn(setCostume)
{
   11570:	       subq.l #8,sp
	UNUSEDALL
	int obj;
	struct persona * pp = getCostumeFromVar(&(fun -> stack -> thisVar));
   11572:	       movea.l 16(sp),a0
   11576:	       move.l 24(a0),d0
   1157a:	       move.l d0,-(sp)
   1157c:	       jsr 143fa <getCostumeFromVar>
   11582:	       addq.l #4,sp
   11584:	       move.l d0,4(sp)
	if (pp == NULL) return BR_ERROR;
   11588:	   /-- bne.s 1158e <builtIn_setCostume+0x1e>
   1158a:	   |   moveq #1,d0
   1158c:	/--|-- bra.s 115e6 <builtIn_setCostume+0x76>
	trimStack (&fun -> stack);
   1158e:	|  \-> moveq #24,d0
   11590:	|      add.l 16(sp),d0
   11594:	|      move.l d0,-(sp)
   11596:	|      jsr 150d2 <trimStack>
   1159c:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1159e:	|      movea.l 16(sp),a0
   115a2:	|      move.l 24(a0),d0
   115a6:	|      move.l d0,-(sp)
   115a8:	|      pea 7 <_start+0x7>
   115ac:	|      move.l sp,d0
   115ae:	|      addq.l #8,d0
   115b0:	|      move.l d0,-(sp)
   115b2:	|      jsr 1474e <getValueType>
   115b8:	|      lea 12(sp),sp
   115bc:	|      tst.w d0
   115be:	|  /-- bne.s 115c4 <builtIn_setCostume+0x54>
   115c0:	|  |   moveq #1,d0
   115c2:	+--|-- bra.s 115e6 <builtIn_setCostume+0x76>
	trimStack (&fun -> stack);
   115c4:	|  \-> moveq #24,d0
   115c6:	|      add.l 16(sp),d0
   115ca:	|      move.l d0,-(sp)
   115cc:	|      jsr 150d2 <trimStack>
   115d2:	|      addq.l #4,sp
	animatePersonUsingPersona(obj, pp);
   115d4:	|      move.l (sp),d0
   115d6:	|      move.l 4(sp),-(sp)
   115da:	|      move.l d0,-(sp)
   115dc:	|      jsr 9500 <animatePersonUsingPersona>
   115e2:	|      addq.l #8,sp
	return BR_CONTINUE;
   115e4:	|      moveq #2,d0
}
   115e6:	\----> addq.l #8,sp
   115e8:	       rts

000115ea <builtIn_floatCharacter>:

builtIn(floatCharacter)
{
   115ea:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   115ec:	       movea.l 16(sp),a0
   115f0:	       move.l 24(a0),d0
   115f4:	       move.l d0,-(sp)
   115f6:	       pea 1 <_start+0x1>
   115fa:	       move.l sp,d0
   115fc:	       addq.l #8,d0
   115fe:	       move.l d0,-(sp)
   11600:	       jsr 1474e <getValueType>
   11606:	       lea 12(sp),sp
   1160a:	       tst.w d0
   1160c:	   /-- bne.s 11612 <builtIn_floatCharacter+0x28>
   1160e:	   |   moveq #1,d0
   11610:	/--|-- bra.s 11686 <builtIn_floatCharacter+0x9c>
	trimStack (&fun -> stack);
   11612:	|  \-> moveq #24,d0
   11614:	|      add.l 16(sp),d0
   11618:	|      move.l d0,-(sp)
   1161a:	|      jsr 150d2 <trimStack>
   11620:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11622:	|      movea.l 16(sp),a0
   11626:	|      move.l 24(a0),d0
   1162a:	|      move.l d0,-(sp)
   1162c:	|      pea 7 <_start+0x7>
   11630:	|      moveq #12,d0
   11632:	|      add.l sp,d0
   11634:	|      move.l d0,-(sp)
   11636:	|      jsr 1474e <getValueType>
   1163c:	|      lea 12(sp),sp
   11640:	|      tst.w d0
   11642:	|  /-- bne.s 11648 <builtIn_floatCharacter+0x5e>
   11644:	|  |   moveq #1,d0
   11646:	+--|-- bra.s 11686 <builtIn_floatCharacter+0x9c>
	trimStack (&fun -> stack);
   11648:	|  \-> moveq #24,d0
   1164a:	|      add.l 16(sp),d0
   1164e:	|      move.l d0,-(sp)
   11650:	|      jsr 150d2 <trimStack>
   11656:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, floatCharacter (di, obj));
   11658:	|      move.l 4(sp),d1
   1165c:	|      move.l (sp),d0
   1165e:	|      move.l d1,-(sp)
   11660:	|      move.l d0,-(sp)
   11662:	|      jsr a674 <floatCharacter>
   11668:	|      addq.l #8,sp
   1166a:	|      movea.w d0,a0
   1166c:	|      moveq #28,d0
   1166e:	|      add.l 16(sp),d0
   11672:	|      move.l a0,-(sp)
   11674:	|      pea 1 <_start+0x1>
   11678:	|      move.l d0,-(sp)
   1167a:	|      jsr 15040 <setVariable>
   11680:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11684:	|      moveq #2,d0
}
   11686:	\----> addq.l #8,sp
   11688:	       rts

0001168a <builtIn_setCharacterWalkSpeed>:

builtIn(setCharacterWalkSpeed)
{
   1168a:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1168c:	       movea.l 16(sp),a0
   11690:	       move.l 24(a0),d0
   11694:	       move.l d0,-(sp)
   11696:	       pea 1 <_start+0x1>
   1169a:	       move.l sp,d0
   1169c:	       addq.l #8,d0
   1169e:	       move.l d0,-(sp)
   116a0:	       jsr 1474e <getValueType>
   116a6:	       lea 12(sp),sp
   116aa:	       tst.w d0
   116ac:	   /-- bne.s 116b2 <builtIn_setCharacterWalkSpeed+0x28>
   116ae:	   |   moveq #1,d0
   116b0:	/--|-- bra.s 11726 <builtIn_setCharacterWalkSpeed+0x9c>
	trimStack (&fun -> stack);
   116b2:	|  \-> moveq #24,d0
   116b4:	|      add.l 16(sp),d0
   116b8:	|      move.l d0,-(sp)
   116ba:	|      jsr 150d2 <trimStack>
   116c0:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   116c2:	|      movea.l 16(sp),a0
   116c6:	|      move.l 24(a0),d0
   116ca:	|      move.l d0,-(sp)
   116cc:	|      pea 7 <_start+0x7>
   116d0:	|      moveq #12,d0
   116d2:	|      add.l sp,d0
   116d4:	|      move.l d0,-(sp)
   116d6:	|      jsr 1474e <getValueType>
   116dc:	|      lea 12(sp),sp
   116e0:	|      tst.w d0
   116e2:	|  /-- bne.s 116e8 <builtIn_setCharacterWalkSpeed+0x5e>
   116e4:	|  |   moveq #1,d0
   116e6:	+--|-- bra.s 11726 <builtIn_setCharacterWalkSpeed+0x9c>
	trimStack (&fun -> stack);
   116e8:	|  \-> moveq #24,d0
   116ea:	|      add.l 16(sp),d0
   116ee:	|      move.l d0,-(sp)
   116f0:	|      jsr 150d2 <trimStack>
   116f6:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, setCharacterWalkSpeed (di, obj));
   116f8:	|      move.l 4(sp),d1
   116fc:	|      move.l (sp),d0
   116fe:	|      move.l d1,-(sp)
   11700:	|      move.l d0,-(sp)
   11702:	|      jsr bbee <setCharacterWalkSpeed>
   11708:	|      addq.l #8,sp
   1170a:	|      movea.w d0,a0
   1170c:	|      moveq #28,d0
   1170e:	|      add.l 16(sp),d0
   11712:	|      move.l a0,-(sp)
   11714:	|      pea 1 <_start+0x1>
   11718:	|      move.l d0,-(sp)
   1171a:	|      jsr 15040 <setVariable>
   11720:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11724:	|      moveq #2,d0
}
   11726:	\----> addq.l #8,sp
   11728:	       rts

0001172a <builtIn_turnCharacter>:

builtIn(turnCharacter)
{
   1172a:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1172c:	       movea.l 16(sp),a0
   11730:	       move.l 24(a0),d0
   11734:	       move.l d0,-(sp)
   11736:	       pea 1 <_start+0x1>
   1173a:	       move.l sp,d0
   1173c:	       addq.l #8,d0
   1173e:	       move.l d0,-(sp)
   11740:	       jsr 1474e <getValueType>
   11746:	       lea 12(sp),sp
   1174a:	       tst.w d0
   1174c:	   /-- bne.s 11752 <builtIn_turnCharacter+0x28>
   1174e:	   |   moveq #1,d0
   11750:	/--|-- bra.s 117c6 <builtIn_turnCharacter+0x9c>
	trimStack (&fun -> stack);
   11752:	|  \-> moveq #24,d0
   11754:	|      add.l 16(sp),d0
   11758:	|      move.l d0,-(sp)
   1175a:	|      jsr 150d2 <trimStack>
   11760:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11762:	|      movea.l 16(sp),a0
   11766:	|      move.l 24(a0),d0
   1176a:	|      move.l d0,-(sp)
   1176c:	|      pea 7 <_start+0x7>
   11770:	|      moveq #12,d0
   11772:	|      add.l sp,d0
   11774:	|      move.l d0,-(sp)
   11776:	|      jsr 1474e <getValueType>
   1177c:	|      lea 12(sp),sp
   11780:	|      tst.w d0
   11782:	|  /-- bne.s 11788 <builtIn_turnCharacter+0x5e>
   11784:	|  |   moveq #1,d0
   11786:	+--|-- bra.s 117c6 <builtIn_turnCharacter+0x9c>
	trimStack (&fun -> stack);
   11788:	|  \-> moveq #24,d0
   1178a:	|      add.l 16(sp),d0
   1178e:	|      move.l d0,-(sp)
   11790:	|      jsr 150d2 <trimStack>
   11796:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, turnPersonToFace (obj, di));
   11798:	|      move.l (sp),d1
   1179a:	|      move.l 4(sp),d0
   1179e:	|      move.l d1,-(sp)
   117a0:	|      move.l d0,-(sp)
   117a2:	|      jsr be92 <turnPersonToFace>
   117a8:	|      addq.l #8,sp
   117aa:	|      movea.w d0,a0
   117ac:	|      moveq #28,d0
   117ae:	|      add.l 16(sp),d0
   117b2:	|      move.l a0,-(sp)
   117b4:	|      pea 1 <_start+0x1>
   117b8:	|      move.l d0,-(sp)
   117ba:	|      jsr 15040 <setVariable>
   117c0:	|      lea 12(sp),sp
	return BR_CONTINUE;
   117c4:	|      moveq #2,d0
}
   117c6:	\----> addq.l #8,sp
   117c8:	       rts

000117ca <builtIn_setCharacterExtra>:

builtIn(setCharacterExtra)
{
   117ca:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   117cc:	       movea.l 16(sp),a0
   117d0:	       move.l 24(a0),d0
   117d4:	       move.l d0,-(sp)
   117d6:	       pea 1 <_start+0x1>
   117da:	       move.l sp,d0
   117dc:	       addq.l #8,d0
   117de:	       move.l d0,-(sp)
   117e0:	       jsr 1474e <getValueType>
   117e6:	       lea 12(sp),sp
   117ea:	       tst.w d0
   117ec:	   /-- bne.s 117f2 <builtIn_setCharacterExtra+0x28>
   117ee:	   |   moveq #1,d0
   117f0:	/--|-- bra.s 11866 <builtIn_setCharacterExtra+0x9c>
	trimStack (&fun -> stack);
   117f2:	|  \-> moveq #24,d0
   117f4:	|      add.l 16(sp),d0
   117f8:	|      move.l d0,-(sp)
   117fa:	|      jsr 150d2 <trimStack>
   11800:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11802:	|      movea.l 16(sp),a0
   11806:	|      move.l 24(a0),d0
   1180a:	|      move.l d0,-(sp)
   1180c:	|      pea 7 <_start+0x7>
   11810:	|      moveq #12,d0
   11812:	|      add.l sp,d0
   11814:	|      move.l d0,-(sp)
   11816:	|      jsr 1474e <getValueType>
   1181c:	|      lea 12(sp),sp
   11820:	|      tst.w d0
   11822:	|  /-- bne.s 11828 <builtIn_setCharacterExtra+0x5e>
   11824:	|  |   moveq #1,d0
   11826:	+--|-- bra.s 11866 <builtIn_setCharacterExtra+0x9c>
	trimStack (&fun -> stack);
   11828:	|  \-> moveq #24,d0
   1182a:	|      add.l 16(sp),d0
   1182e:	|      move.l d0,-(sp)
   11830:	|      jsr 150d2 <trimStack>
   11836:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, setPersonExtra (obj, di));
   11838:	|      move.l (sp),d1
   1183a:	|      move.l 4(sp),d0
   1183e:	|      move.l d1,-(sp)
   11840:	|      move.l d0,-(sp)
   11842:	|      jsr bc1c <setPersonExtra>
   11848:	|      addq.l #8,sp
   1184a:	|      movea.w d0,a0
   1184c:	|      moveq #28,d0
   1184e:	|      add.l 16(sp),d0
   11852:	|      move.l a0,-(sp)
   11854:	|      pea 1 <_start+0x1>
   11858:	|      move.l d0,-(sp)
   1185a:	|      jsr 15040 <setVariable>
   11860:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11864:	|      moveq #2,d0
}
   11866:	\----> addq.l #8,sp
   11868:	       rts

0001186a <builtIn_removeCharacter>:

builtIn(removeCharacter)
{	
   1186a:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1186c:	       movea.l 12(sp),a0
   11870:	       move.l 24(a0),d0
   11874:	       move.l d0,-(sp)
   11876:	       pea 7 <_start+0x7>
   1187a:	       move.l sp,d0
   1187c:	       addq.l #8,d0
   1187e:	       move.l d0,-(sp)
   11880:	       jsr 1474e <getValueType>
   11886:	       lea 12(sp),sp
   1188a:	       tst.w d0
   1188c:	   /-- bne.s 11892 <builtIn_removeCharacter+0x28>
   1188e:	   |   moveq #1,d0
   11890:	/--|-- bra.s 118b0 <builtIn_removeCharacter+0x46>
	trimStack (&fun -> stack);
   11892:	|  \-> moveq #24,d0
   11894:	|      add.l 12(sp),d0
   11898:	|      move.l d0,-(sp)
   1189a:	|      jsr 150d2 <trimStack>
   118a0:	|      addq.l #4,sp
	removeOneCharacter (objectNumber);
   118a2:	|      move.l (sp),d0
   118a4:	|      move.l d0,-(sp)
   118a6:	|      jsr ae1c <removeOneCharacter>
   118ac:	|      addq.l #4,sp
	return BR_CONTINUE;
   118ae:	|      moveq #2,d0
}
   118b0:	\----> addq.l #4,sp
   118b2:	       rts

000118b4 <moveChr>:

static enum builtReturn moveChr(int numParams, struct loadedFunction * fun, BOOL force, BOOL immediate)
{
   118b4:	                lea -28(sp),sp
   118b8:	                move.l d2,-(sp)
   118ba:	                move.l 44(sp),d1
   118be:	                move.l 48(sp),d0
   118c2:	                move.w d1,d1
   118c4:	                move.w d1,6(sp)
   118c8:	                move.w d0,d0
   118ca:	                move.w d0,4(sp)
	switch (numParams) {
   118ce:	                moveq #2,d0
   118d0:	                cmp.l 36(sp),d0
   118d4:	      /-------- beq.w 11a16 <moveChr+0x162>
   118d8:	      |         moveq #3,d0
   118da:	      |         cmp.l 36(sp),d0
   118de:	/-----|-------- bne.w 11b4a <moveChr+0x296>
		case 3:
		{
			int x, y, objectNumber;

			if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   118e2:	|     |         movea.l 40(sp),a0
   118e6:	|     |         move.l 24(a0),d0
   118ea:	|     |         move.l d0,-(sp)
   118ec:	|     |         pea 1 <_start+0x1>
   118f0:	|     |         lea 20(sp),a0
   118f4:	|     |         move.l a0,-(sp)
   118f6:	|     |         jsr 1474e <getValueType>
   118fc:	|     |         lea 12(sp),sp
   11900:	|     |         tst.w d0
   11902:	|     |     /-- bne.s 1190a <moveChr+0x56>
   11904:	|     |     |   moveq #1,d0
   11906:	|  /--|-----|-- bra.w 11b5a <moveChr+0x2a6>
			trimStack (&fun -> stack);
   1190a:	|  |  |     \-> moveq #24,d0
   1190c:	|  |  |         add.l 40(sp),d0
   11910:	|  |  |         move.l d0,-(sp)
   11912:	|  |  |         jsr 150d2 <trimStack>
   11918:	|  |  |         addq.l #4,sp
			if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1191a:	|  |  |         movea.l 40(sp),a0
   1191e:	|  |  |         move.l 24(a0),d0
   11922:	|  |  |         move.l d0,-(sp)
   11924:	|  |  |         pea 1 <_start+0x1>
   11928:	|  |  |         lea 24(sp),a0
   1192c:	|  |  |         move.l a0,-(sp)
   1192e:	|  |  |         jsr 1474e <getValueType>
   11934:	|  |  |         lea 12(sp),sp
   11938:	|  |  |         tst.w d0
   1193a:	|  |  |     /-- bne.s 11942 <moveChr+0x8e>
   1193c:	|  |  |     |   moveq #1,d0
   1193e:	|  +--|-----|-- bra.w 11b5a <moveChr+0x2a6>
			trimStack (&fun -> stack);
   11942:	|  |  |     \-> moveq #24,d0
   11944:	|  |  |         add.l 40(sp),d0
   11948:	|  |  |         move.l d0,-(sp)
   1194a:	|  |  |         jsr 150d2 <trimStack>
   11950:	|  |  |         addq.l #4,sp
			if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11952:	|  |  |         movea.l 40(sp),a0
   11956:	|  |  |         move.l 24(a0),d0
   1195a:	|  |  |         move.l d0,-(sp)
   1195c:	|  |  |         pea 7 <_start+0x7>
   11960:	|  |  |         lea 16(sp),a0
   11964:	|  |  |         move.l a0,-(sp)
   11966:	|  |  |         jsr 1474e <getValueType>
   1196c:	|  |  |         lea 12(sp),sp
   11970:	|  |  |         tst.w d0
   11972:	|  |  |     /-- bne.s 1197a <moveChr+0xc6>
   11974:	|  |  |     |   moveq #1,d0
   11976:	|  +--|-----|-- bra.w 11b5a <moveChr+0x2a6>
			trimStack (&fun -> stack);
   1197a:	|  |  |     \-> moveq #24,d0
   1197c:	|  |  |         add.l 40(sp),d0
   11980:	|  |  |         move.l d0,-(sp)
   11982:	|  |  |         jsr 150d2 <trimStack>
   11988:	|  |  |         addq.l #4,sp

			if (force) {
   1198a:	|  |  |         tst.w 6(sp)
   1198e:	|  |  |     /-- beq.s 119be <moveChr+0x10a>
				if (forceWalkingPerson (x, y, objectNumber, fun, -1)) return BR_PAUSE;
   11990:	|  |  |     |   movea.l 8(sp),a0
   11994:	|  |  |     |   move.l 12(sp),d1
   11998:	|  |  |     |   move.l 16(sp),d0
   1199c:	|  |  |     |   pea ffffffff <gcc8_c_support.c.cce2f5c3+0xfffb4d1e>
   119a0:	|  |  |     |   move.l 44(sp),-(sp)
   119a4:	|  |  |     |   move.l a0,-(sp)
   119a6:	|  |  |     |   move.l d1,-(sp)
   119a8:	|  |  |     |   move.l d0,-(sp)
   119aa:	|  |  |     |   jsr a698 <forceWalkingPerson>
   119b0:	|  |  |     |   lea 20(sp),sp
   119b4:	|  |  |     |   tst.w d0
   119b6:	|  |  |  /--|-- beq.s 11a10 <moveChr+0x15c>
   119b8:	|  |  |  |  |   moveq #3,d0
   119ba:	|  +--|--|--|-- bra.w 11b5a <moveChr+0x2a6>
			} else if (immediate) {
   119be:	|  |  |  |  \-> tst.w 4(sp)
   119c2:	|  |  |  |  /-- beq.s 119e2 <moveChr+0x12e>
				jumpPerson (x, y, objectNumber);
   119c4:	|  |  |  |  |   movea.l 8(sp),a0
   119c8:	|  |  |  |  |   move.l 12(sp),d1
   119cc:	|  |  |  |  |   move.l 16(sp),d0
   119d0:	|  |  |  |  |   move.l a0,-(sp)
   119d2:	|  |  |  |  |   move.l d1,-(sp)
   119d4:	|  |  |  |  |   move.l d0,-(sp)
   119d6:	|  |  |  |  |   jsr a9a0 <jumpPerson>
   119dc:	|  |  |  |  |   lea 12(sp),sp
   119e0:	|  |  |  +--|-- bra.s 11a10 <moveChr+0x15c>
			} else {
				if (makeWalkingPerson (x, y, objectNumber, fun, -1)) return BR_PAUSE;
   119e2:	|  |  |  |  \-> movea.l 8(sp),a0
   119e6:	|  |  |  |      move.l 12(sp),d1
   119ea:	|  |  |  |      move.l 16(sp),d0
   119ee:	|  |  |  |      pea ffffffff <gcc8_c_support.c.cce2f5c3+0xfffb4d1e>
   119f2:	|  |  |  |      move.l 44(sp),-(sp)
   119f6:	|  |  |  |      move.l a0,-(sp)
   119f8:	|  |  |  |      move.l d1,-(sp)
   119fa:	|  |  |  |      move.l d0,-(sp)
   119fc:	|  |  |  |      jsr ab70 <makeWalkingPerson>
   11a02:	|  |  |  |      lea 20(sp),sp
   11a06:	|  |  |  |      tst.w d0
   11a08:	|  |  |  +----- beq.s 11a10 <moveChr+0x15c>
   11a0a:	|  |  |  |      moveq #3,d0
   11a0c:	|  +--|--|----- bra.w 11b5a <moveChr+0x2a6>
			}
			return BR_CONTINUE;
   11a10:	|  |  |  \----> moveq #2,d0
   11a12:	|  +--|-------- bra.w 11b5a <moveChr+0x2a6>
		case 2:
		{
			int toObj, objectNumber;
			struct screenRegion * reggie;

			if (! getValueType(&toObj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11a16:	|  |  \-------> movea.l 40(sp),a0
   11a1a:	|  |            move.l 24(a0),d0
   11a1e:	|  |            move.l d0,-(sp)
   11a20:	|  |            pea 7 <_start+0x7>
   11a24:	|  |            moveq #32,d0
   11a26:	|  |            add.l sp,d0
   11a28:	|  |            move.l d0,-(sp)
   11a2a:	|  |            jsr 1474e <getValueType>
   11a30:	|  |            lea 12(sp),sp
   11a34:	|  |            tst.w d0
   11a36:	|  |        /-- bne.s 11a3e <moveChr+0x18a>
   11a38:	|  |        |   moveq #1,d0
   11a3a:	|  +--------|-- bra.w 11b5a <moveChr+0x2a6>
			trimStack (&fun -> stack);
   11a3e:	|  |        \-> moveq #24,d0
   11a40:	|  |            add.l 40(sp),d0
   11a44:	|  |            move.l d0,-(sp)
   11a46:	|  |            jsr 150d2 <trimStack>
   11a4c:	|  |            addq.l #4,sp
			if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11a4e:	|  |            movea.l 40(sp),a0
   11a52:	|  |            move.l 24(a0),d0
   11a56:	|  |            move.l d0,-(sp)
   11a58:	|  |            pea 7 <_start+0x7>
   11a5c:	|  |            lea 28(sp),a0
   11a60:	|  |            move.l a0,-(sp)
   11a62:	|  |            jsr 1474e <getValueType>
   11a68:	|  |            lea 12(sp),sp
   11a6c:	|  |            tst.w d0
   11a6e:	|  |        /-- bne.s 11a76 <moveChr+0x1c2>
   11a70:	|  |        |   moveq #1,d0
   11a72:	|  +--------|-- bra.w 11b5a <moveChr+0x2a6>
			trimStack (&fun -> stack);
   11a76:	|  |        \-> moveq #24,d0
   11a78:	|  |            add.l 40(sp),d0
   11a7c:	|  |            move.l d0,-(sp)
   11a7e:	|  |            jsr 150d2 <trimStack>
   11a84:	|  |            addq.l #4,sp
			reggie = getRegionForObject (toObj);
   11a86:	|  |            move.l 24(sp),d0
   11a8a:	|  |            move.l d0,-(sp)
   11a8c:	|  |            jsr 15998 <getRegionForObject>
   11a92:	|  |            addq.l #4,sp
   11a94:	|  |            move.l d0,28(sp)
			if (reggie == NULL) return BR_CONTINUE;
   11a98:	|  |        /-- bne.s 11aa0 <moveChr+0x1ec>
   11a9a:	|  |        |   moveq #2,d0
   11a9c:	|  +--------|-- bra.w 11b5a <moveChr+0x2a6>

			if (force)
   11aa0:	|  |        \-> tst.w 6(sp)
   11aa4:	|  |        /-- beq.s 11ae0 <moveChr+0x22c>
			{
				if (forceWalkingPerson (reggie -> sX, reggie -> sY,	objectNumber, fun, reggie -> di)) return BR_PAUSE;
   11aa6:	|  |        |   movea.l 28(sp),a0
   11aaa:	|  |        |   move.l 24(a0),d2
   11aae:	|  |        |   movea.l 20(sp),a1
   11ab2:	|  |        |   movea.l 28(sp),a0
   11ab6:	|  |        |   move.l 20(a0),d1
   11aba:	|  |        |   movea.l 28(sp),a0
   11abe:	|  |        |   move.l 16(a0),d0
   11ac2:	|  |        |   move.l d2,-(sp)
   11ac4:	|  |        |   move.l 44(sp),-(sp)
   11ac8:	|  |        |   move.l a1,-(sp)
   11aca:	|  |        |   move.l d1,-(sp)
   11acc:	|  |        |   move.l d0,-(sp)
   11ace:	|  |        |   jsr a698 <forceWalkingPerson>
   11ad4:	|  |        |   lea 20(sp),sp
   11ad8:	|  |        |   tst.w d0
   11ada:	|  |     /--|-- beq.s 11b46 <moveChr+0x292>
   11adc:	|  |     |  |   moveq #3,d0
   11ade:	|  +-----|--|-- bra.s 11b5a <moveChr+0x2a6>
			}
			else if (immediate)
   11ae0:	|  |     |  \-> tst.w 4(sp)
   11ae4:	|  |     |  /-- beq.s 11b0c <moveChr+0x258>
			{
				jumpPerson (reggie -> sX, reggie -> sY,	objectNumber);
   11ae6:	|  |     |  |   movea.l 20(sp),a1
   11aea:	|  |     |  |   movea.l 28(sp),a0
   11aee:	|  |     |  |   move.l 20(a0),d1
   11af2:	|  |     |  |   movea.l 28(sp),a0
   11af6:	|  |     |  |   move.l 16(a0),d0
   11afa:	|  |     |  |   move.l a1,-(sp)
   11afc:	|  |     |  |   move.l d1,-(sp)
   11afe:	|  |     |  |   move.l d0,-(sp)
   11b00:	|  |     |  |   jsr a9a0 <jumpPerson>
   11b06:	|  |     |  |   lea 12(sp),sp
   11b0a:	|  |     +--|-- bra.s 11b46 <moveChr+0x292>
			}
			else
			{
				if (makeWalkingPerson (reggie -> sX, reggie -> sY, objectNumber, fun, reggie -> di)) return BR_PAUSE;
   11b0c:	|  |     |  \-> movea.l 28(sp),a0
   11b10:	|  |     |      move.l 24(a0),d2
   11b14:	|  |     |      movea.l 20(sp),a1
   11b18:	|  |     |      movea.l 28(sp),a0
   11b1c:	|  |     |      move.l 20(a0),d1
   11b20:	|  |     |      movea.l 28(sp),a0
   11b24:	|  |     |      move.l 16(a0),d0
   11b28:	|  |     |      move.l d2,-(sp)
   11b2a:	|  |     |      move.l 44(sp),-(sp)
   11b2e:	|  |     |      move.l a1,-(sp)
   11b30:	|  |     |      move.l d1,-(sp)
   11b32:	|  |     |      move.l d0,-(sp)
   11b34:	|  |     |      jsr ab70 <makeWalkingPerson>
   11b3a:	|  |     |      lea 20(sp),sp
   11b3e:	|  |     |      tst.w d0
   11b40:	|  |     +----- beq.s 11b46 <moveChr+0x292>
   11b42:	|  |     |      moveq #3,d0
   11b44:	|  +-----|----- bra.s 11b5a <moveChr+0x2a6>
			}
			return BR_CONTINUE;
   11b46:	|  |     \----> moveq #2,d0
   11b48:	|  +----------- bra.s 11b5a <moveChr+0x2a6>
		}

		default:
			KPrintF ("Built-in function must have either 2 or 3 parameters.");
   11b4a:	\--|----------> pea 19a3b <PutChar+0x1df1>
   11b50:	   |            jsr 17176 <KPrintF>
   11b56:	   |            addq.l #4,sp
			return BR_ERROR;
   11b58:	   |            moveq #1,d0
	}
}
   11b5a:	   \----------> move.l (sp)+,d2
   11b5c:	                lea 28(sp),sp
   11b60:	                rts

00011b62 <builtIn_moveCharacter>:

builtIn(moveCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, FALSE, FALSE);
   11b62:	clr.l -(sp)
   11b64:	clr.l -(sp)
   11b66:	move.l 16(sp),-(sp)
   11b6a:	move.l 16(sp),-(sp)
   11b6e:	jsr 118b4 <moveChr>
   11b74:	lea 16(sp),sp
}
   11b78:	rts

00011b7a <builtIn_forceCharacter>:

builtIn(forceCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, TRUE, FALSE);
   11b7a:	clr.l -(sp)
   11b7c:	pea 1 <_start+0x1>
   11b80:	move.l 16(sp),-(sp)
   11b84:	move.l 16(sp),-(sp)
   11b88:	jsr 118b4 <moveChr>
   11b8e:	lea 16(sp),sp
}
   11b92:	rts

00011b94 <builtIn_jumpCharacter>:

builtIn(jumpCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, FALSE, TRUE);
   11b94:	pea 1 <_start+0x1>
   11b98:	clr.l -(sp)
   11b9a:	move.l 16(sp),-(sp)
   11b9e:	move.l 16(sp),-(sp)
   11ba2:	jsr 118b4 <moveChr>
   11ba8:	lea 16(sp),sp
}
   11bac:	rts

00011bae <builtIn_clearStatus>:

builtIn(clearStatus)
{
	UNUSEDALL
	clearStatusBar ();
   11bae:	jsr 796e <clearStatusBar>
	return BR_CONTINUE;
   11bb4:	moveq #2,d0
}
   11bb6:	rts

00011bb8 <builtIn_removeLastStatus>:

builtIn(removeLastStatus)
{
	UNUSEDALL
	killLastStatus ();
   11bb8:	jsr 7a16 <killLastStatus>
	return BR_CONTINUE;
   11bbe:	moveq #2,d0
}
   11bc0:	rts

00011bc2 <builtIn_addStatus>:

builtIn(addStatus)
{
	UNUSEDALL
	addStatusBar ();
   11bc2:	jsr 7904 <addStatusBar>
	return BR_CONTINUE;
   11bc8:	moveq #2,d0
}
   11bca:	rts

00011bcc <builtIn_statusText>:

builtIn(statusText)
{
   11bcc:	       subq.l #8,sp
   11bce:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar(&(fun->stack->thisVar));
   11bd0:	       movea.l 20(sp),a0
   11bd4:	       move.l 24(a0),d0
   11bd8:	       move.l d0,-(sp)
   11bda:	       jsr 14d24 <getTextFromAnyVar>
   11be0:	       addq.l #4,sp
   11be2:	       move.l d0,8(sp)
	if (!newText) return BR_ERROR;
   11be6:	   /-- bne.s 11bec <builtIn_statusText+0x20>
   11be8:	   |   moveq #1,d0
   11bea:	/--|-- bra.s 11c20 <builtIn_statusText+0x54>
	trimStack(&fun->stack);
   11bec:	|  \-> moveq #24,d0
   11bee:	|      add.l 20(sp),d0
   11bf2:	|      move.l d0,-(sp)
   11bf4:	|      jsr 150d2 <trimStack>
   11bfa:	|      addq.l #4,sp
	setStatusBar(newText);
   11bfc:	|      move.l 8(sp),-(sp)
   11c00:	|      jsr 7c96 <setStatusBar>
   11c06:	|      addq.l #4,sp
	FreeVec(newText);
   11c08:	|      move.l 8(sp),4(sp)
   11c0e:	|      move.l 1c85c <SysBase>,d0
   11c14:	|      movea.l d0,a6
   11c16:	|      movea.l 4(sp),a1
   11c1a:	|      jsr -690(a6)
	return BR_CONTINUE;
   11c1e:	|      moveq #2,d0
}
   11c20:	\----> movea.l (sp)+,a6
   11c22:	       addq.l #8,sp
   11c24:	       rts

00011c26 <builtIn_lightStatus>:

builtIn(lightStatus)
{
   11c26:	       subq.l #4,sp
	UNUSEDALL
	int val;
	if (! getValueType(&val, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11c28:	       movea.l 12(sp),a0
   11c2c:	       move.l 24(a0),d0
   11c30:	       move.l d0,-(sp)
   11c32:	       pea 1 <_start+0x1>
   11c36:	       move.l sp,d0
   11c38:	       addq.l #8,d0
   11c3a:	       move.l d0,-(sp)
   11c3c:	       jsr 1474e <getValueType>
   11c42:	       lea 12(sp),sp
   11c46:	       tst.w d0
   11c48:	   /-- bne.s 11c4e <builtIn_lightStatus+0x28>
   11c4a:	   |   moveq #1,d0
   11c4c:	/--|-- bra.s 11c6c <builtIn_lightStatus+0x46>
	trimStack (&fun -> stack);
   11c4e:	|  \-> moveq #24,d0
   11c50:	|      add.l 12(sp),d0
   11c54:	|      move.l d0,-(sp)
   11c56:	|      jsr 150d2 <trimStack>
   11c5c:	|      addq.l #4,sp
	setLitStatus (val);
   11c5e:	|      move.l (sp),d0
   11c60:	|      move.l d0,-(sp)
   11c62:	|      jsr 7c86 <setLitStatus>
   11c68:	|      addq.l #4,sp
	return BR_CONTINUE;
   11c6a:	|      moveq #2,d0
}
   11c6c:	\----> addq.l #4,sp
   11c6e:	       rts

00011c70 <builtIn_positionStatus>:

builtIn(positionStatus)
{
   11c70:	       subq.l #8,sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11c72:	       movea.l 16(sp),a0
   11c76:	       move.l 24(a0),d0
   11c7a:	       move.l d0,-(sp)
   11c7c:	       pea 1 <_start+0x1>
   11c80:	       move.l sp,d0
   11c82:	       addq.l #8,d0
   11c84:	       move.l d0,-(sp)
   11c86:	       jsr 1474e <getValueType>
   11c8c:	       lea 12(sp),sp
   11c90:	       tst.w d0
   11c92:	   /-- bne.s 11c98 <builtIn_positionStatus+0x28>
   11c94:	   |   moveq #1,d0
   11c96:	/--|-- bra.s 11cf2 <builtIn_positionStatus+0x82>
	trimStack (&fun -> stack);
   11c98:	|  \-> moveq #24,d0
   11c9a:	|      add.l 16(sp),d0
   11c9e:	|      move.l d0,-(sp)
   11ca0:	|      jsr 150d2 <trimStack>
   11ca6:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11ca8:	|      movea.l 16(sp),a0
   11cac:	|      move.l 24(a0),d0
   11cb0:	|      move.l d0,-(sp)
   11cb2:	|      pea 1 <_start+0x1>
   11cb6:	|      moveq #12,d0
   11cb8:	|      add.l sp,d0
   11cba:	|      move.l d0,-(sp)
   11cbc:	|      jsr 1474e <getValueType>
   11cc2:	|      lea 12(sp),sp
   11cc6:	|      tst.w d0
   11cc8:	|  /-- bne.s 11cce <builtIn_positionStatus+0x5e>
   11cca:	|  |   moveq #1,d0
   11ccc:	+--|-- bra.s 11cf2 <builtIn_positionStatus+0x82>
	trimStack (&fun -> stack);
   11cce:	|  \-> moveq #24,d0
   11cd0:	|      add.l 16(sp),d0
   11cd4:	|      move.l d0,-(sp)
   11cd6:	|      jsr 150d2 <trimStack>
   11cdc:	|      addq.l #4,sp
	positionStatus (x, y);
   11cde:	|      move.l (sp),d1
   11ce0:	|      move.l 4(sp),d0
   11ce4:	|      move.l d1,-(sp)
   11ce6:	|      move.l d0,-(sp)
   11ce8:	|      jsr 7a78 <positionStatus>
   11cee:	|      addq.l #8,sp
	return BR_CONTINUE;
   11cf0:	|      moveq #2,d0
}
   11cf2:	\----> addq.l #8,sp
   11cf4:	       rts

00011cf6 <builtIn_alignStatus>:

builtIn(alignStatus)
{
   11cf6:	       subq.l #4,sp
	UNUSEDALL
	int val;
	if (! getValueType(&val, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11cf8:	       movea.l 12(sp),a0
   11cfc:	       move.l 24(a0),d0
   11d00:	       move.l d0,-(sp)
   11d02:	       pea 1 <_start+0x1>
   11d06:	       move.l sp,d0
   11d08:	       addq.l #8,d0
   11d0a:	       move.l d0,-(sp)
   11d0c:	       jsr 1474e <getValueType>
   11d12:	       lea 12(sp),sp
   11d16:	       tst.w d0
   11d18:	   /-- bne.s 11d1e <builtIn_alignStatus+0x28>
   11d1a:	   |   moveq #1,d0
   11d1c:	/--|-- bra.s 11d3e <builtIn_alignStatus+0x48>
	trimStack (&fun -> stack);
   11d1e:	|  \-> moveq #24,d0
   11d20:	|      add.l 12(sp),d0
   11d24:	|      move.l d0,-(sp)
   11d26:	|      jsr 150d2 <trimStack>
   11d2c:	|      addq.l #4,sp
	nowStatus -> alignStatus = (short) val;
   11d2e:	|      move.l (sp),d0
   11d30:	|      movea.l 1c1e2 <nowStatus>,a0
   11d36:	|      move.l d0,d0
   11d38:	|      move.w d0,4(a0)
	return BR_CONTINUE;
   11d3c:	|      moveq #2,d0
}
   11d3e:	\----> addq.l #4,sp
   11d40:	       rts

00011d42 <getFuncNumForCallback>:

static BOOL getFuncNumForCallback(int numParams, struct loadedFunction * fun, int *functionNum)
{
	switch (numParams) {
   11d42:	             tst.l 4(sp)
   11d46:	      /----- beq.s 11d52 <getFuncNumForCallback+0x10>
   11d48:	      |      moveq #1,d0
   11d4a:	      |      cmp.l 4(sp),d0
   11d4e:	      |  /-- beq.s 11d58 <getFuncNumForCallback+0x16>
   11d50:	   /--|--|-- bra.s 11d8e <getFuncNumForCallback+0x4c>
		case 0:
			functionNum = 0;
   11d52:	   |  \--|-> clr.l 12(sp)
			break;
   11d56:	/--|-----|-- bra.s 11da0 <getFuncNumForCallback+0x5e>

		case 1:
			if (! getValueType(functionNum, SVT_FUNC,&fun -> stack -> thisVar)) return FALSE;
   11d58:	|  |     \-> movea.l 8(sp),a0
   11d5c:	|  |         move.l 24(a0),d0
   11d60:	|  |         move.l d0,-(sp)
   11d62:	|  |         pea 2 <_start+0x2>
   11d66:	|  |         move.l 20(sp),-(sp)
   11d6a:	|  |         jsr 1474e <getValueType>
   11d70:	|  |         lea 12(sp),sp
   11d74:	|  |         tst.w d0
   11d76:	|  |     /-- bne.s 11d7c <getFuncNumForCallback+0x3a>
   11d78:	|  |     |   clr.w d0
   11d7a:	|  |  /--|-- bra.s 11da2 <getFuncNumForCallback+0x60>
			trimStack (&fun -> stack);
   11d7c:	|  |  |  \-> moveq #24,d0
   11d7e:	|  |  |      add.l 8(sp),d0
   11d82:	|  |  |      move.l d0,-(sp)
   11d84:	|  |  |      jsr 150d2 <trimStack>
   11d8a:	|  |  |      addq.l #4,sp
			break;
   11d8c:	+--|--|----- bra.s 11da0 <getFuncNumForCallback+0x5e>

		default:
			KPrintF ("Too many parameters.");
   11d8e:	|  \--|----> pea 19a71 <line.c.05397aaf+0x34>
   11d94:	|     |      jsr 17176 <KPrintF>
   11d9a:	|     |      addq.l #4,sp
			return FALSE;
   11d9c:	|     |      clr.w d0
   11d9e:	|     +----- bra.s 11da2 <getFuncNumForCallback+0x60>
	}
	return TRUE;
   11da0:	\-----|----> moveq #1,d0
}
   11da2:	      \----> rts

00011da4 <builtIn_onLeftMouse>:

builtIn (onLeftMouse)
{
   11da4:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11da6:	       move.l sp,d0
   11da8:	       move.l d0,-(sp)
   11daa:	       move.l 16(sp),-(sp)
   11dae:	       move.l 16(sp),-(sp)
   11db2:	       jsr 11d42 <getFuncNumForCallback>
   11db8:	       lea 12(sp),sp
   11dbc:	       tst.w d0
   11dbe:	/----- beq.s 11dce <builtIn_onLeftMouse+0x2a>
	{
		currentEvents -> leftMouseFunction = functionNum;
   11dc0:	|      movea.l 1c1d4 <currentEvents>,a0
   11dc6:	|      move.l (sp),d0
   11dc8:	|      move.l d0,(a0)
		return BR_CONTINUE;
   11dca:	|      moveq #2,d0
   11dcc:	|  /-- bra.s 11dd0 <builtIn_onLeftMouse+0x2c>
	}
	return BR_ERROR;
   11dce:	\--|-> moveq #1,d0
}
   11dd0:	   \-> addq.l #4,sp
   11dd2:	       rts

00011dd4 <builtIn_onLeftMouseUp>:

builtIn (onLeftMouseUp)
{
   11dd4:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11dd6:	       move.l sp,d0
   11dd8:	       move.l d0,-(sp)
   11dda:	       move.l 16(sp),-(sp)
   11dde:	       move.l 16(sp),-(sp)
   11de2:	       jsr 11d42 <getFuncNumForCallback>
   11de8:	       lea 12(sp),sp
   11dec:	       tst.w d0
   11dee:	/----- beq.s 11e00 <builtIn_onLeftMouseUp+0x2c>
	{
		currentEvents -> leftMouseUpFunction = functionNum;
   11df0:	|      movea.l 1c1d4 <currentEvents>,a0
   11df6:	|      move.l (sp),d0
   11df8:	|      move.l d0,4(a0)
		return BR_CONTINUE;
   11dfc:	|      moveq #2,d0
   11dfe:	|  /-- bra.s 11e02 <builtIn_onLeftMouseUp+0x2e>
	}
	return BR_ERROR;
   11e00:	\--|-> moveq #1,d0
}
   11e02:	   \-> addq.l #4,sp
   11e04:	       rts

00011e06 <builtIn_onRightMouse>:

builtIn (onRightMouse)
{
   11e06:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11e08:	       move.l sp,d0
   11e0a:	       move.l d0,-(sp)
   11e0c:	       move.l 16(sp),-(sp)
   11e10:	       move.l 16(sp),-(sp)
   11e14:	       jsr 11d42 <getFuncNumForCallback>
   11e1a:	       lea 12(sp),sp
   11e1e:	       tst.w d0
   11e20:	/----- beq.s 11e32 <builtIn_onRightMouse+0x2c>
	{
		currentEvents -> rightMouseFunction = functionNum;
   11e22:	|      movea.l 1c1d4 <currentEvents>,a0
   11e28:	|      move.l (sp),d0
   11e2a:	|      move.l d0,8(a0)
		return BR_CONTINUE;
   11e2e:	|      moveq #2,d0
   11e30:	|  /-- bra.s 11e34 <builtIn_onRightMouse+0x2e>
	}
	return BR_ERROR;
   11e32:	\--|-> moveq #1,d0
}
   11e34:	   \-> addq.l #4,sp
   11e36:	       rts

00011e38 <builtIn_onRightMouseUp>:

builtIn (onRightMouseUp)
{
   11e38:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11e3a:	       move.l sp,d0
   11e3c:	       move.l d0,-(sp)
   11e3e:	       move.l 16(sp),-(sp)
   11e42:	       move.l 16(sp),-(sp)
   11e46:	       jsr 11d42 <getFuncNumForCallback>
   11e4c:	       lea 12(sp),sp
   11e50:	       tst.w d0
   11e52:	/----- beq.s 11e64 <builtIn_onRightMouseUp+0x2c>
	{
		currentEvents -> rightMouseUpFunction = functionNum;
   11e54:	|      movea.l 1c1d4 <currentEvents>,a0
   11e5a:	|      move.l (sp),d0
   11e5c:	|      move.l d0,12(a0)
		return BR_CONTINUE;
   11e60:	|      moveq #2,d0
   11e62:	|  /-- bra.s 11e66 <builtIn_onRightMouseUp+0x2e>
	}
	return BR_ERROR;
   11e64:	\--|-> moveq #1,d0
}
   11e66:	   \-> addq.l #4,sp
   11e68:	       rts

00011e6a <builtIn_onFocusChange>:

builtIn (onFocusChange)
{
   11e6a:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11e6c:	       move.l sp,d0
   11e6e:	       move.l d0,-(sp)
   11e70:	       move.l 16(sp),-(sp)
   11e74:	       move.l 16(sp),-(sp)
   11e78:	       jsr 11d42 <getFuncNumForCallback>
   11e7e:	       lea 12(sp),sp
   11e82:	       tst.w d0
   11e84:	/----- beq.s 11e96 <builtIn_onFocusChange+0x2c>
	{
		currentEvents -> focusFunction = functionNum;
   11e86:	|      movea.l 1c1d4 <currentEvents>,a0
   11e8c:	|      move.l (sp),d0
   11e8e:	|      move.l d0,20(a0)
		return BR_CONTINUE;
   11e92:	|      moveq #2,d0
   11e94:	|  /-- bra.s 11e98 <builtIn_onFocusChange+0x2e>
	}
	return BR_ERROR;
   11e96:	\--|-> moveq #1,d0
}
   11e98:	   \-> addq.l #4,sp
   11e9a:	       rts

00011e9c <builtIn_onMoveMouse>:

builtIn (onMoveMouse)
{
   11e9c:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11e9e:	       move.l sp,d0
   11ea0:	       move.l d0,-(sp)
   11ea2:	       move.l 16(sp),-(sp)
   11ea6:	       move.l 16(sp),-(sp)
   11eaa:	       jsr 11d42 <getFuncNumForCallback>
   11eb0:	       lea 12(sp),sp
   11eb4:	       tst.w d0
   11eb6:	/----- beq.s 11ec8 <builtIn_onMoveMouse+0x2c>
	{
		currentEvents -> moveMouseFunction = functionNum;
   11eb8:	|      movea.l 1c1d4 <currentEvents>,a0
   11ebe:	|      move.l (sp),d0
   11ec0:	|      move.l d0,16(a0)
		return BR_CONTINUE;
   11ec4:	|      moveq #2,d0
   11ec6:	|  /-- bra.s 11eca <builtIn_onMoveMouse+0x2e>
	}
	return BR_ERROR;
   11ec8:	\--|-> moveq #1,d0
}
   11eca:	   \-> addq.l #4,sp
   11ecc:	       rts

00011ece <builtIn_onKeyboard>:

builtIn (onKeyboard)
{
   11ece:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11ed0:	       move.l sp,d0
   11ed2:	       move.l d0,-(sp)
   11ed4:	       move.l 16(sp),-(sp)
   11ed8:	       move.l 16(sp),-(sp)
   11edc:	       jsr 11d42 <getFuncNumForCallback>
   11ee2:	       lea 12(sp),sp
   11ee6:	       tst.w d0
   11ee8:	/----- beq.s 11efa <builtIn_onKeyboard+0x2c>
	{
		currentEvents -> spaceFunction = functionNum;
   11eea:	|      movea.l 1c1d4 <currentEvents>,a0
   11ef0:	|      move.l (sp),d0
   11ef2:	|      move.l d0,24(a0)
		return BR_CONTINUE;
   11ef6:	|      moveq #2,d0
   11ef8:	|  /-- bra.s 11efc <builtIn_onKeyboard+0x2e>
	}
	return BR_ERROR;
   11efa:	\--|-> moveq #1,d0
}
   11efc:	   \-> addq.l #4,sp
   11efe:	       rts

00011f00 <builtIn_spawnSub>:

builtIn (spawnSub)
{
   11f00:	          subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11f02:	          move.l sp,d0
   11f04:	          move.l d0,-(sp)
   11f06:	          move.l 16(sp),-(sp)
   11f0a:	          move.l 16(sp),-(sp)
   11f0e:	          jsr 11d42 <getFuncNumForCallback>
   11f14:	          lea 12(sp),sp
   11f18:	          tst.w d0
   11f1a:	/-------- beq.s 11f46 <builtIn_spawnSub+0x46>
	{
		if (! startNewFunctionNum (functionNum, 0, NULL, noStack, TRUE)) return BR_ERROR;
   11f1c:	|         move.l 1c82c <noStack>,d1
   11f22:	|         move.l (sp),d0
   11f24:	|         pea 1 <_start+0x1>
   11f28:	|         move.l d1,-(sp)
   11f2a:	|         clr.l -(sp)
   11f2c:	|         clr.l -(sp)
   11f2e:	|         move.l d0,-(sp)
   11f30:	|         jsr 6b48 <startNewFunctionNum>
   11f36:	|         lea 20(sp),sp
   11f3a:	|         tst.l d0
   11f3c:	|     /-- bne.s 11f42 <builtIn_spawnSub+0x42>
   11f3e:	|     |   moveq #1,d0
   11f40:	|  /--|-- bra.s 11f48 <builtIn_spawnSub+0x48>
		return BR_CONTINUE;
   11f42:	|  |  \-> moveq #2,d0
   11f44:	|  +----- bra.s 11f48 <builtIn_spawnSub+0x48>
	}
	return BR_ERROR;
   11f46:	\--|----> moveq #1,d0
}
   11f48:	   \----> addq.l #4,sp
   11f4a:	          rts

00011f4c <builtIn_cancelSub>:

builtIn (cancelSub)
{
   11f4c:	          subq.l #8,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11f4e:	          move.l sp,d0
   11f50:	          addq.l #4,d0
   11f52:	          move.l d0,-(sp)
   11f54:	          move.l 20(sp),-(sp)
   11f58:	          move.l 20(sp),-(sp)
   11f5c:	          jsr 11d42 <getFuncNumForCallback>
   11f62:	          lea 12(sp),sp
   11f66:	          tst.w d0
   11f68:	/-------- beq.s 11f9e <builtIn_cancelSub+0x52>
	{
		BOOL killedMyself;
		cancelAFunction (functionNum, fun, &killedMyself);
   11f6a:	|         move.l 4(sp),d1
   11f6e:	|         move.l sp,d0
   11f70:	|         addq.l #2,d0
   11f72:	|         move.l d0,-(sp)
   11f74:	|         move.l 20(sp),-(sp)
   11f78:	|         move.l d1,-(sp)
   11f7a:	|         jsr 486e <cancelAFunction>
   11f80:	|         lea 12(sp),sp
		if (killedMyself) {
   11f84:	|         move.w 2(sp),d0
   11f88:	|  /----- beq.s 11f9a <builtIn_cancelSub+0x4e>
			abortFunction (fun);
   11f8a:	|  |      move.l 16(sp),-(sp)
   11f8e:	|  |      jsr 478c <abortFunction>
   11f94:	|  |      addq.l #4,sp
			return BR_ALREADY_GONE;
   11f96:	|  |      moveq #5,d0
   11f98:	|  |  /-- bra.s 11fa0 <builtIn_cancelSub+0x54>
		}
		return BR_CONTINUE;
   11f9a:	|  \--|-> moveq #2,d0
   11f9c:	|     +-- bra.s 11fa0 <builtIn_cancelSub+0x54>
	}
	return BR_ERROR;
   11f9e:	\-----|-> moveq #1,d0
}
   11fa0:	      \-> addq.l #8,sp
   11fa2:	          rts

00011fa4 <builtIn_stringWidth>:

builtIn(stringWidth)
{
   11fa4:	       subq.l #8,sp
   11fa6:	       move.l a6,-(sp)
	UNUSEDALL
	char * theText = getTextFromAnyVar(&(fun->stack->thisVar));
   11fa8:	       movea.l 20(sp),a0
   11fac:	       move.l 24(a0),d0
   11fb0:	       move.l d0,-(sp)
   11fb2:	       jsr 14d24 <getTextFromAnyVar>
   11fb8:	       addq.l #4,sp
   11fba:	       move.l d0,8(sp)
	if (!theText) return BR_ERROR;
   11fbe:	   /-- bne.s 11fc4 <builtIn_stringWidth+0x20>
   11fc0:	   |   moveq #1,d0
   11fc2:	/--|-- bra.s 12012 <builtIn_stringWidth+0x6e>
	trimStack(&fun->stack);
   11fc4:	|  \-> moveq #24,d0
   11fc6:	|      add.l 20(sp),d0
   11fca:	|      move.l d0,-(sp)
   11fcc:	|      jsr 150d2 <trimStack>
   11fd2:	|      addq.l #4,sp

	// Return value
	setVariable(&fun->reg, SVT_INT, stringWidth(theText));
   11fd4:	|      move.l 8(sp),-(sp)
   11fd8:	|      jsr 15838 <stringWidth>
   11fde:	|      addq.l #4,sp
   11fe0:	|      move.l d0,d1
   11fe2:	|      moveq #28,d0
   11fe4:	|      add.l 20(sp),d0
   11fe8:	|      move.l d1,-(sp)
   11fea:	|      pea 1 <_start+0x1>
   11fee:	|      move.l d0,-(sp)
   11ff0:	|      jsr 15040 <setVariable>
   11ff6:	|      lea 12(sp),sp
	FreeVec(theText);
   11ffa:	|      move.l 8(sp),4(sp)
   12000:	|      move.l 1c85c <SysBase>,d0
   12006:	|      movea.l d0,a6
   12008:	|      movea.l 4(sp),a1
   1200c:	|      jsr -690(a6)
	return BR_CONTINUE;
   12010:	|      moveq #2,d0
}
   12012:	\----> movea.l (sp)+,a6
   12014:	       addq.l #8,sp
   12016:	       rts

00012018 <builtIn_hardScroll>:

builtIn(hardScroll)
{
   12018:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1201a:	       movea.l 12(sp),a0
   1201e:	       move.l 24(a0),d0
   12022:	       move.l d0,-(sp)
   12024:	       pea 1 <_start+0x1>
   12028:	       move.l sp,d0
   1202a:	       addq.l #8,d0
   1202c:	       move.l d0,-(sp)
   1202e:	       jsr 1474e <getValueType>
   12034:	       lea 12(sp),sp
   12038:	       tst.w d0
   1203a:	   /-- bne.s 12040 <builtIn_hardScroll+0x28>
   1203c:	   |   moveq #1,d0
   1203e:	/--|-- bra.s 1205e <builtIn_hardScroll+0x46>
	trimStack (&fun -> stack);
   12040:	|  \-> moveq #24,d0
   12042:	|      add.l 12(sp),d0
   12046:	|      move.l d0,-(sp)
   12048:	|      jsr 150d2 <trimStack>
   1204e:	|      addq.l #4,sp
	hardScroll (v);
   12050:	|      move.l (sp),d0
   12052:	|      move.l d0,-(sp)
   12054:	|      jsr d20a <hardScroll>
   1205a:	|      addq.l #4,sp
	return BR_CONTINUE;
   1205c:	|      moveq #2,d0
}
   1205e:	\----> addq.l #4,sp
   12060:	       rts

00012062 <builtIn_isScreenRegion>:


builtIn(isScreenRegion)
{
   12062:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12064:	       movea.l 12(sp),a0
   12068:	       move.l 24(a0),d0
   1206c:	       move.l d0,-(sp)
   1206e:	       pea 7 <_start+0x7>
   12072:	       move.l sp,d0
   12074:	       addq.l #8,d0
   12076:	       move.l d0,-(sp)
   12078:	       jsr 1474e <getValueType>
   1207e:	       lea 12(sp),sp
   12082:	       tst.w d0
   12084:	   /-- bne.s 1208a <builtIn_isScreenRegion+0x28>
   12086:	   |   moveq #1,d0
   12088:	/--|-- bra.s 120ca <builtIn_isScreenRegion+0x68>
	trimStack (&fun -> stack);
   1208a:	|  \-> moveq #24,d0
   1208c:	|      add.l 12(sp),d0
   12090:	|      move.l d0,-(sp)
   12092:	|      jsr 150d2 <trimStack>
   12098:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, getRegionForObject (objectNumber) != NULL);
   1209a:	|      move.l (sp),d0
   1209c:	|      move.l d0,-(sp)
   1209e:	|      jsr 15998 <getRegionForObject>
   120a4:	|      addq.l #4,sp
   120a6:	|      tst.l d0
   120a8:	|      sne d0
   120aa:	|      neg.b d0
   120ac:	|      moveq #0,d1
   120ae:	|      move.b d0,d1
   120b0:	|      moveq #28,d0
   120b2:	|      add.l 12(sp),d0
   120b6:	|      move.l d1,-(sp)
   120b8:	|      pea 1 <_start+0x1>
   120bc:	|      move.l d0,-(sp)
   120be:	|      jsr 15040 <setVariable>
   120c4:	|      lea 12(sp),sp
	return BR_CONTINUE;
   120c8:	|      moveq #2,d0
}
   120ca:	\----> addq.l #4,sp
   120cc:	       rts

000120ce <builtIn_setSpeechSpeed>:

builtIn(setSpeechSpeed)
{
   120ce:	       subq.l #4,sp
	UNUSEDALL
	int number;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   120d0:	       movea.l 12(sp),a0
   120d4:	       move.l 24(a0),d0
   120d8:	       move.l d0,-(sp)
   120da:	       pea 1 <_start+0x1>
   120de:	       move.l sp,d0
   120e0:	       addq.l #8,d0
   120e2:	       move.l d0,-(sp)
   120e4:	       jsr 1474e <getValueType>
   120ea:	       lea 12(sp),sp
   120ee:	       tst.w d0
   120f0:	   /-- bne.s 120f6 <builtIn_setSpeechSpeed+0x28>
   120f2:	   |   moveq #1,d0
   120f4:	/--|-- bra.s 12144 <builtIn_setSpeechSpeed+0x76>
	trimStack (&fun -> stack);
   120f6:	|  \-> moveq #24,d0
   120f8:	|      add.l 12(sp),d0
   120fc:	|      move.l d0,-(sp)
   120fe:	|      jsr 150d2 <trimStack>
   12104:	|      addq.l #4,sp
	speechSpeed = number * (FLOAT) 0.01;
   12106:	|      move.l (sp),d0
   12108:	|      move.l d0,-(sp)
   1210a:	|      jsr 175b2 <__floatsisf>
   12110:	|      addq.l #4,sp
   12112:	|      move.l #1008981770,-(sp)
   12118:	|      move.l d0,-(sp)
   1211a:	|      jsr 17664 <__mulsf3>
   12120:	|      addq.l #8,sp
   12122:	|      move.l d0,1c1e6 <speechSpeed>
	setVariable (&fun -> reg, SVT_INT, 1);
   12128:	|      moveq #28,d0
   1212a:	|      add.l 12(sp),d0
   1212e:	|      pea 1 <_start+0x1>
   12132:	|      pea 1 <_start+0x1>
   12136:	|      move.l d0,-(sp)
   12138:	|      jsr 15040 <setVariable>
   1213e:	|      lea 12(sp),sp
	return BR_CONTINUE;
   12142:	|      moveq #2,d0
}
   12144:	\----> addq.l #4,sp
   12146:	       rts

00012148 <builtIn_setFontSpacing>:

builtIn(setFontSpacing)
{
   12148:	       subq.l #4,sp
	UNUSEDALL
	int fontSpaceI;
	if (! getValueType(&fontSpaceI, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1214a:	       movea.l 12(sp),a0
   1214e:	       move.l 24(a0),d0
   12152:	       move.l d0,-(sp)
   12154:	       pea 1 <_start+0x1>
   12158:	       move.l sp,d0
   1215a:	       addq.l #8,d0
   1215c:	       move.l d0,-(sp)
   1215e:	       jsr 1474e <getValueType>
   12164:	       lea 12(sp),sp
   12168:	       tst.w d0
   1216a:	   /-- bne.s 12170 <builtIn_setFontSpacing+0x28>
   1216c:	   |   moveq #1,d0
   1216e:	/--|-- bra.s 121a6 <builtIn_setFontSpacing+0x5e>
	fontSpace = fontSpaceI;
   12170:	|  \-> move.l (sp),d0
   12172:	|      move.l d0,d0
   12174:	|      move.w d0,1c760 <fontSpace>
	trimStack (&fun -> stack);
   1217a:	|      moveq #24,d0
   1217c:	|      add.l 12(sp),d0
   12180:	|      move.l d0,-(sp)
   12182:	|      jsr 150d2 <trimStack>
   12188:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   1218a:	|      moveq #28,d0
   1218c:	|      add.l 12(sp),d0
   12190:	|      pea 1 <_start+0x1>
   12194:	|      pea 1 <_start+0x1>
   12198:	|      move.l d0,-(sp)
   1219a:	|      jsr 15040 <setVariable>
   121a0:	|      lea 12(sp),sp
	return BR_CONTINUE;
   121a4:	|      moveq #2,d0
}
   121a6:	\----> addq.l #4,sp
   121a8:	       rts

000121aa <builtIn_transitionLevel>:

builtIn(transitionLevel)
{
   121aa:	          subq.l #4,sp
	UNUSEDALL
	int number;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   121ac:	          movea.l 12(sp),a0
   121b0:	          move.l 24(a0),d0
   121b4:	          move.l d0,-(sp)
   121b6:	          pea 1 <_start+0x1>
   121ba:	          move.l sp,d0
   121bc:	          addq.l #8,d0
   121be:	          move.l d0,-(sp)
   121c0:	          jsr 1474e <getValueType>
   121c6:	          lea 12(sp),sp
   121ca:	          tst.w d0
   121cc:	      /-- bne.s 121d2 <builtIn_transitionLevel+0x28>
   121ce:	      |   moveq #1,d0
   121d0:	/-----|-- bra.s 12226 <builtIn_transitionLevel+0x7c>
	trimStack (&fun -> stack);
   121d2:	|     \-> moveq #24,d0
   121d4:	|         add.l 12(sp),d0
   121d8:	|         move.l d0,-(sp)
   121da:	|         jsr 150d2 <trimStack>
   121e0:	|         addq.l #4,sp

	if (number < 0)
   121e2:	|         move.l (sp),d0
   121e4:	|     /-- bpl.s 121ee <builtIn_transitionLevel+0x44>
		brightnessLevel = 0;
   121e6:	|     |   clr.b 1c1d2 <brightnessLevel>
   121ec:	|  /--|-- bra.s 1220a <builtIn_transitionLevel+0x60>
	else if (number > 255)
   121ee:	|  |  \-> move.l (sp),d0
   121f0:	|  |      cmpi.l #255,d0
   121f6:	|  |  /-- ble.s 12200 <builtIn_transitionLevel+0x56>
		brightnessLevel = 255;
   121f8:	|  |  |   st 1c1d2 <brightnessLevel>
   121fe:	|  +--|-- bra.s 1220a <builtIn_transitionLevel+0x60>
	else
		brightnessLevel = number;
   12200:	|  |  \-> move.l (sp),d0
   12202:	|  |      move.l d0,d0
   12204:	|  |      move.b d0,1c1d2 <brightnessLevel>

	setVariable (&fun -> reg, SVT_INT, 1);
   1220a:	|  \----> moveq #28,d0
   1220c:	|         add.l 12(sp),d0
   12210:	|         pea 1 <_start+0x1>
   12214:	|         pea 1 <_start+0x1>
   12218:	|         move.l d0,-(sp)
   1221a:	|         jsr 15040 <setVariable>
   12220:	|         lea 12(sp),sp
	return BR_CONTINUE;
   12224:	|         moveq #2,d0
}
   12226:	\-------> addq.l #4,sp
   12228:	          rts

0001222a <builtIn_captureAllKeys>:

builtIn(captureAllKeys)
{
	UNUSEDALL
	captureAllKeys = getBoolean(&(fun -> stack -> thisVar));
   1222a:	movea.l 8(sp),a0
   1222e:	move.l 24(a0),d0
   12232:	move.l d0,-(sp)
   12234:	jsr 14c8e <getBoolean>
   1223a:	addq.l #4,sp
   1223c:	move.w d0,1c7fc <captureAllKeys>
	trimStack (&fun -> stack);
   12242:	moveq #24,d0
   12244:	add.l 8(sp),d0
   12248:	move.l d0,-(sp)
   1224a:	jsr 150d2 <trimStack>
   12250:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, captureAllKeys);
   12252:	move.w 1c7fc <captureAllKeys>,d0
   12258:	movea.w d0,a0
   1225a:	moveq #28,d0
   1225c:	add.l 8(sp),d0
   12260:	move.l a0,-(sp)
   12262:	pea 1 <_start+0x1>
   12266:	move.l d0,-(sp)
   12268:	jsr 15040 <setVariable>
   1226e:	lea 12(sp),sp
	return BR_CONTINUE;
   12272:	moveq #2,d0
}
   12274:	rts

00012276 <builtIn_spinCharacter>:


builtIn(spinCharacter)
{
   12276:	       lea -12(sp),sp
	UNUSEDALL
	int number, objectNumber;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1227a:	       movea.l 20(sp),a0
   1227e:	       move.l 24(a0),d0
   12282:	       move.l d0,-(sp)
   12284:	       pea 1 <_start+0x1>
   12288:	       moveq #12,d0
   1228a:	       add.l sp,d0
   1228c:	       move.l d0,-(sp)
   1228e:	       jsr 1474e <getValueType>
   12294:	       lea 12(sp),sp
   12298:	       tst.w d0
   1229a:	   /-- bne.s 122a2 <builtIn_spinCharacter+0x2c>
   1229c:	   |   moveq #1,d0
   1229e:	/--|-- bra.w 12352 <builtIn_spinCharacter+0xdc>
	trimStack (&fun -> stack);
   122a2:	|  \-> moveq #24,d0
   122a4:	|      add.l 20(sp),d0
   122a8:	|      move.l d0,-(sp)
   122aa:	|      jsr 150d2 <trimStack>
   122b0:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   122b2:	|      movea.l 20(sp),a0
   122b6:	|      move.l 24(a0),d0
   122ba:	|      move.l d0,-(sp)
   122bc:	|      pea 7 <_start+0x7>
   122c0:	|      lea 8(sp),a0
   122c4:	|      move.l a0,-(sp)
   122c6:	|      jsr 1474e <getValueType>
   122cc:	|      lea 12(sp),sp
   122d0:	|      tst.w d0
   122d2:	|  /-- bne.s 122d8 <builtIn_spinCharacter+0x62>
   122d4:	|  |   moveq #1,d0
   122d6:	+--|-- bra.s 12352 <builtIn_spinCharacter+0xdc>
	trimStack (&fun -> stack);
   122d8:	|  \-> moveq #24,d0
   122da:	|      add.l 20(sp),d0
   122de:	|      move.l d0,-(sp)
   122e0:	|      jsr 150d2 <trimStack>
   122e6:	|      addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   122e8:	|      move.l (sp),d0
   122ea:	|      move.l d0,-(sp)
   122ec:	|      jsr a646 <findPerson>
   122f2:	|      addq.l #4,sp
   122f4:	|      move.l d0,8(sp)
	if (thisPerson) {
   122f8:	|  /-- beq.s 12338 <builtIn_spinCharacter+0xc2>
		thisPerson -> wantAngle = number;
   122fa:	|  |   move.l 4(sp),d0
   122fe:	|  |   movea.l 8(sp),a0
   12302:	|  |   move.l d0,96(a0)
		thisPerson -> spinning = TRUE;
   12306:	|  |   movea.l 8(sp),a0
   1230a:	|  |   move.w #1,66(a0)
		thisPerson -> continueAfterWalking = fun;
   12310:	|  |   movea.l 8(sp),a0
   12314:	|  |   move.l 20(sp),68(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   1231a:	|  |   moveq #28,d0
   1231c:	|  |   add.l 20(sp),d0
   12320:	|  |   pea 1 <_start+0x1>
   12324:	|  |   pea 1 <_start+0x1>
   12328:	|  |   move.l d0,-(sp)
   1232a:	|  |   jsr 15040 <setVariable>
   12330:	|  |   lea 12(sp),sp
		return BR_PAUSE;
   12334:	|  |   moveq #3,d0
   12336:	+--|-- bra.s 12352 <builtIn_spinCharacter+0xdc>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   12338:	|  \-> moveq #28,d0
   1233a:	|      add.l 20(sp),d0
   1233e:	|      clr.l -(sp)
   12340:	|      pea 1 <_start+0x1>
   12344:	|      move.l d0,-(sp)
   12346:	|      jsr 15040 <setVariable>
   1234c:	|      lea 12(sp),sp
		return BR_CONTINUE;
   12350:	|      moveq #2,d0
	}
}
   12352:	\----> lea 12(sp),sp
   12356:	       rts

00012358 <builtIn_getCharacterDirection>:

builtIn(getCharacterDirection)
{
   12358:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1235a:	          movea.l 16(sp),a0
   1235e:	          move.l 24(a0),d0
   12362:	          move.l d0,-(sp)
   12364:	          pea 7 <_start+0x7>
   12368:	          move.l sp,d0
   1236a:	          addq.l #8,d0
   1236c:	          move.l d0,-(sp)
   1236e:	          jsr 1474e <getValueType>
   12374:	          lea 12(sp),sp
   12378:	          tst.w d0
   1237a:	      /-- bne.s 12380 <builtIn_getCharacterDirection+0x28>
   1237c:	      |   moveq #1,d0
   1237e:	/-----|-- bra.s 123de <builtIn_getCharacterDirection+0x86>
	trimStack (&fun -> stack);
   12380:	|     \-> moveq #24,d0
   12382:	|         add.l 16(sp),d0
   12386:	|         move.l d0,-(sp)
   12388:	|         jsr 150d2 <trimStack>
   1238e:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   12390:	|         move.l (sp),d0
   12392:	|         move.l d0,-(sp)
   12394:	|         jsr a646 <findPerson>
   1239a:	|         addq.l #4,sp
   1239c:	|         move.l d0,4(sp)
	if (thisPerson) {
   123a0:	|  /----- beq.s 123c4 <builtIn_getCharacterDirection+0x6c>
		setVariable (&fun -> reg, SVT_INT, thisPerson -> direction);
   123a2:	|  |      movea.l 4(sp),a0
   123a6:	|  |      move.l 106(a0),d1
   123aa:	|  |      moveq #28,d0
   123ac:	|  |      add.l 16(sp),d0
   123b0:	|  |      move.l d1,-(sp)
   123b2:	|  |      pea 1 <_start+0x1>
   123b6:	|  |      move.l d0,-(sp)
   123b8:	|  |      jsr 15040 <setVariable>
   123be:	|  |      lea 12(sp),sp
   123c2:	|  |  /-- bra.s 123dc <builtIn_getCharacterDirection+0x84>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   123c4:	|  \--|-> moveq #28,d0
   123c6:	|     |   add.l 16(sp),d0
   123ca:	|     |   clr.l -(sp)
   123cc:	|     |   pea 1 <_start+0x1>
   123d0:	|     |   move.l d0,-(sp)
   123d2:	|     |   jsr 15040 <setVariable>
   123d8:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   123dc:	|     \-> moveq #2,d0
}
   123de:	\-------> addq.l #8,sp
   123e0:	          rts

000123e2 <builtIn_isCharacter>:

builtIn(isCharacter)
{
   123e2:	       subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   123e4:	       movea.l 16(sp),a0
   123e8:	       move.l 24(a0),d0
   123ec:	       move.l d0,-(sp)
   123ee:	       pea 7 <_start+0x7>
   123f2:	       move.l sp,d0
   123f4:	       addq.l #8,d0
   123f6:	       move.l d0,-(sp)
   123f8:	       jsr 1474e <getValueType>
   123fe:	       lea 12(sp),sp
   12402:	       tst.w d0
   12404:	   /-- bne.s 1240a <builtIn_isCharacter+0x28>
   12406:	   |   moveq #1,d0
   12408:	/--|-- bra.s 1244c <builtIn_isCharacter+0x6a>
	trimStack (&fun -> stack);
   1240a:	|  \-> moveq #24,d0
   1240c:	|      add.l 16(sp),d0
   12410:	|      move.l d0,-(sp)
   12412:	|      jsr 150d2 <trimStack>
   12418:	|      addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   1241a:	|      move.l (sp),d0
   1241c:	|      move.l d0,-(sp)
   1241e:	|      jsr a646 <findPerson>
   12424:	|      addq.l #4,sp
   12426:	|      move.l d0,4(sp)
	setVariable (&fun -> reg, SVT_INT, thisPerson != NULL);
   1242a:	|      sne d0
   1242c:	|      neg.b d0
   1242e:	|      moveq #0,d1
   12430:	|      move.b d0,d1
   12432:	|      moveq #28,d0
   12434:	|      add.l 16(sp),d0
   12438:	|      move.l d1,-(sp)
   1243a:	|      pea 1 <_start+0x1>
   1243e:	|      move.l d0,-(sp)
   12440:	|      jsr 15040 <setVariable>
   12446:	|      lea 12(sp),sp
	return BR_CONTINUE;
   1244a:	|      moveq #2,d0
}
   1244c:	\----> addq.l #8,sp
   1244e:	       rts

00012450 <builtIn_normalCharacter>:

builtIn(normalCharacter)
{
   12450:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12452:	          movea.l 16(sp),a0
   12456:	          move.l 24(a0),d0
   1245a:	          move.l d0,-(sp)
   1245c:	          pea 7 <_start+0x7>
   12460:	          move.l sp,d0
   12462:	          addq.l #8,d0
   12464:	          move.l d0,-(sp)
   12466:	          jsr 1474e <getValueType>
   1246c:	          lea 12(sp),sp
   12470:	          tst.w d0
   12472:	      /-- bne.s 12478 <builtIn_normalCharacter+0x28>
   12474:	      |   moveq #1,d0
   12476:	/-----|-- bra.s 124f4 <builtIn_normalCharacter+0xa4>
	trimStack (&fun -> stack);
   12478:	|     \-> moveq #24,d0
   1247a:	|         add.l 16(sp),d0
   1247e:	|         move.l d0,-(sp)
   12480:	|         jsr 150d2 <trimStack>
   12486:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   12488:	|         move.l (sp),d0
   1248a:	|         move.l d0,-(sp)
   1248c:	|         jsr a646 <findPerson>
   12492:	|         addq.l #4,sp
   12494:	|         move.l d0,4(sp)
	if (thisPerson)
   12498:	|  /----- beq.s 124da <builtIn_normalCharacter+0x8a>
	{
		thisPerson -> myAnim = thisPerson -> myPersona -> animation[thisPerson -> direction];
   1249a:	|  |      movea.l 4(sp),a0
   1249e:	|  |      movea.l 80(a0),a0
   124a2:	|  |      move.l (a0),d1
   124a4:	|  |      movea.l 4(sp),a0
   124a8:	|  |      move.l 106(a0),d0
   124ac:	|  |      add.l d0,d0
   124ae:	|  |      add.l d0,d0
   124b0:	|  |      movea.l d1,a0
   124b2:	|  |      adda.l d0,a0
   124b4:	|  |      move.l (a0),d0
   124b6:	|  |      movea.l 4(sp),a0
   124ba:	|  |      move.l d0,72(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   124be:	|  |      moveq #28,d0
   124c0:	|  |      add.l 16(sp),d0
   124c4:	|  |      pea 1 <_start+0x1>
   124c8:	|  |      pea 1 <_start+0x1>
   124cc:	|  |      move.l d0,-(sp)
   124ce:	|  |      jsr 15040 <setVariable>
   124d4:	|  |      lea 12(sp),sp
   124d8:	|  |  /-- bra.s 124f2 <builtIn_normalCharacter+0xa2>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   124da:	|  \--|-> moveq #28,d0
   124dc:	|     |   add.l 16(sp),d0
   124e0:	|     |   clr.l -(sp)
   124e2:	|     |   pea 1 <_start+0x1>
   124e6:	|     |   move.l d0,-(sp)
   124e8:	|     |   jsr 15040 <setVariable>
   124ee:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   124f2:	|     \-> moveq #2,d0
}
   124f4:	\-------> addq.l #8,sp
   124f6:	          rts

000124f8 <builtIn_isMoving>:

builtIn(isMoving)
{
   124f8:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   124fa:	          movea.l 16(sp),a0
   124fe:	          move.l 24(a0),d0
   12502:	          move.l d0,-(sp)
   12504:	          pea 7 <_start+0x7>
   12508:	          move.l sp,d0
   1250a:	          addq.l #8,d0
   1250c:	          move.l d0,-(sp)
   1250e:	          jsr 1474e <getValueType>
   12514:	          lea 12(sp),sp
   12518:	          tst.w d0
   1251a:	      /-- bne.s 12520 <builtIn_isMoving+0x28>
   1251c:	      |   moveq #1,d0
   1251e:	/-----|-- bra.s 12580 <builtIn_isMoving+0x88>
	trimStack (&fun -> stack);
   12520:	|     \-> moveq #24,d0
   12522:	|         add.l 16(sp),d0
   12526:	|         move.l d0,-(sp)
   12528:	|         jsr 150d2 <trimStack>
   1252e:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   12530:	|         move.l (sp),d0
   12532:	|         move.l d0,-(sp)
   12534:	|         jsr a646 <findPerson>
   1253a:	|         addq.l #4,sp
   1253c:	|         move.l d0,4(sp)
	if (thisPerson)
   12540:	|  /----- beq.s 12566 <builtIn_isMoving+0x6e>
	{
		setVariable (&fun -> reg, SVT_INT, thisPerson -> walking);
   12542:	|  |      movea.l 4(sp),a0
   12546:	|  |      move.w 64(a0),d0
   1254a:	|  |      movea.w d0,a0
   1254c:	|  |      moveq #28,d0
   1254e:	|  |      add.l 16(sp),d0
   12552:	|  |      move.l a0,-(sp)
   12554:	|  |      pea 1 <_start+0x1>
   12558:	|  |      move.l d0,-(sp)
   1255a:	|  |      jsr 15040 <setVariable>
   12560:	|  |      lea 12(sp),sp
   12564:	|  |  /-- bra.s 1257e <builtIn_isMoving+0x86>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   12566:	|  \--|-> moveq #28,d0
   12568:	|     |   add.l 16(sp),d0
   1256c:	|     |   clr.l -(sp)
   1256e:	|     |   pea 1 <_start+0x1>
   12572:	|     |   move.l d0,-(sp)
   12574:	|     |   jsr 15040 <setVariable>
   1257a:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   1257e:	|     \-> moveq #2,d0
}
   12580:	\-------> addq.l #8,sp
   12582:	          rts

00012584 <builtIn_fetchEvent>:

builtIn(fetchEvent)
{
   12584:	          lea -12(sp),sp
	UNUSEDALL
	int obj1, obj2;
	if (! getValueType(&obj2, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12588:	          movea.l 20(sp),a0
   1258c:	          move.l 24(a0),d0
   12590:	          move.l d0,-(sp)
   12592:	          pea 7 <_start+0x7>
   12596:	          lea 8(sp),a0
   1259a:	          move.l a0,-(sp)
   1259c:	          jsr 1474e <getValueType>
   125a2:	          lea 12(sp),sp
   125a6:	          tst.w d0
   125a8:	      /-- bne.s 125b0 <builtIn_fetchEvent+0x2c>
   125aa:	      |   moveq #1,d0
   125ac:	/-----|-- bra.w 12644 <builtIn_fetchEvent+0xc0>
	trimStack (&fun -> stack);
   125b0:	|     \-> moveq #24,d0
   125b2:	|         add.l 20(sp),d0
   125b6:	|         move.l d0,-(sp)
   125b8:	|         jsr 150d2 <trimStack>
   125be:	|         addq.l #4,sp
	if (! getValueType(&obj1, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   125c0:	|         movea.l 20(sp),a0
   125c4:	|         move.l 24(a0),d0
   125c8:	|         move.l d0,-(sp)
   125ca:	|         pea 7 <_start+0x7>
   125ce:	|         moveq #12,d0
   125d0:	|         add.l sp,d0
   125d2:	|         move.l d0,-(sp)
   125d4:	|         jsr 1474e <getValueType>
   125da:	|         lea 12(sp),sp
   125de:	|         tst.w d0
   125e0:	|     /-- bne.s 125e6 <builtIn_fetchEvent+0x62>
   125e2:	|     |   moveq #1,d0
   125e4:	+-----|-- bra.s 12644 <builtIn_fetchEvent+0xc0>
	trimStack (&fun -> stack);
   125e6:	|     \-> moveq #24,d0
   125e8:	|         add.l 20(sp),d0
   125ec:	|         move.l d0,-(sp)
   125ee:	|         jsr 150d2 <trimStack>
   125f4:	|         addq.l #4,sp

	int fNum = getCombinationFunction (obj1, obj2);
   125f6:	|         move.l (sp),d1
   125f8:	|         move.l 4(sp),d0
   125fc:	|         move.l d1,-(sp)
   125fe:	|         move.l d0,-(sp)
   12600:	|         jsr d4ec <getCombinationFunction>
   12606:	|         addq.l #8,sp
   12608:	|         move.l d0,8(sp)

	// Return value
	if (fNum) {
   1260c:	|  /----- beq.s 1262a <builtIn_fetchEvent+0xa6>
		setVariable (&fun -> reg, SVT_FUNC, fNum);
   1260e:	|  |      moveq #28,d0
   12610:	|  |      add.l 20(sp),d0
   12614:	|  |      move.l 8(sp),-(sp)
   12618:	|  |      pea 2 <_start+0x2>
   1261c:	|  |      move.l d0,-(sp)
   1261e:	|  |      jsr 15040 <setVariable>
   12624:	|  |      lea 12(sp),sp
   12628:	|  |  /-- bra.s 12642 <builtIn_fetchEvent+0xbe>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   1262a:	|  \--|-> moveq #28,d0
   1262c:	|     |   add.l 20(sp),d0
   12630:	|     |   clr.l -(sp)
   12632:	|     |   pea 1 <_start+0x1>
   12636:	|     |   move.l d0,-(sp)
   12638:	|     |   jsr 15040 <setVariable>
   1263e:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   12642:	|     \-> moveq #2,d0
}
   12644:	\-------> lea 12(sp),sp
   12648:	          rts

0001264a <builtIn_deleteFile>:

builtIn(deleteFile)
{
   1264a:	       lea -24(sp),sp
   1264e:	       move.l a6,-(sp)
    UNUSEDALL

    char *namNormal = getTextFromAnyVar(&(fun->stack->thisVar));
   12650:	       movea.l 36(sp),a0
   12654:	       move.l 24(a0),d0
   12658:	       move.l d0,-(sp)
   1265a:	       jsr 14d24 <getTextFromAnyVar>
   12660:	       addq.l #4,sp
   12662:	       move.l d0,24(sp)
    trimStack(&fun->stack);
   12666:	       moveq #24,d0
   12668:	       add.l 36(sp),d0
   1266c:	       move.l d0,-(sp)
   1266e:	       jsr 150d2 <trimStack>
   12674:	       addq.l #4,sp
    char *nam = encodeFilename(namNormal);
   12676:	       move.l 24(sp),-(sp)
   1267a:	       jsr 2fe <encodeFilename>
   12680:	       addq.l #4,sp
   12682:	       move.l d0,20(sp)
    FreeVec(namNormal);
   12686:	       move.l 24(sp),16(sp)
   1268c:	       move.l 1c85c <SysBase>,d0
   12692:	       movea.l d0,a6
   12694:	       movea.l 16(sp),a1
   12698:	       jsr -690(a6)
    if (failSecurityCheck(nam)) return BR_ERROR;
   1269c:	       move.l 20(sp),-(sp)
   126a0:	       jsr e2a4 <failSecurityCheck>
   126a6:	       addq.l #4,sp
   126a8:	       tst.w d0
   126aa:	   /-- beq.s 126b0 <builtIn_deleteFile+0x66>
   126ac:	   |   moveq #1,d0
   126ae:	/--|-- bra.s 126fe <builtIn_deleteFile+0xb4>
    setVariable(&fun->reg, SVT_INT, DeleteFile(nam));
   126b0:	|  \-> move.l 20(sp),12(sp)
   126b6:	|      move.l 1c864 <DOSBase>,d0
   126bc:	|      movea.l d0,a6
   126be:	|      move.l 12(sp),d1
   126c2:	|      jsr -72(a6)
   126c6:	|      move.l d0,8(sp)
   126ca:	|      move.l 8(sp),d1
   126ce:	|      moveq #28,d0
   126d0:	|      add.l 36(sp),d0
   126d4:	|      move.l d1,-(sp)
   126d6:	|      pea 1 <_start+0x1>
   126da:	|      move.l d0,-(sp)
   126dc:	|      jsr 15040 <setVariable>
   126e2:	|      lea 12(sp),sp
    FreeVec(nam);
   126e6:	|      move.l 20(sp),4(sp)
   126ec:	|      move.l 1c85c <SysBase>,d0
   126f2:	|      movea.l d0,a6
   126f4:	|      movea.l 4(sp),a1
   126f8:	|      jsr -690(a6)

    return BR_CONTINUE;
   126fc:	|      moveq #2,d0
}
   126fe:	\----> movea.l (sp)+,a6
   12700:	       lea 24(sp),sp
   12704:	       rts

00012706 <builtIn_renameFile>:

builtIn(renameFile)
{
   12706:	       lea -40(sp),sp
   1270a:	       move.l a6,-(sp)
   1270c:	       move.l d2,-(sp)
	UNUSEDALL
	char * temp;

	temp = getTextFromAnyVar(&(fun->stack->thisVar));
   1270e:	       movea.l 56(sp),a0
   12712:	       move.l 24(a0),d0
   12716:	       move.l d0,-(sp)
   12718:	       jsr 14d24 <getTextFromAnyVar>
   1271e:	       addq.l #4,sp
   12720:	       move.l d0,44(sp)
	char * newnam = encodeFilename(temp);
   12724:	       move.l 44(sp),-(sp)
   12728:	       jsr 2fe <encodeFilename>
   1272e:	       addq.l #4,sp
   12730:	       move.l d0,40(sp)
	trimStack(&fun->stack);
   12734:	       moveq #24,d0
   12736:	       add.l 56(sp),d0
   1273a:	       move.l d0,-(sp)
   1273c:	       jsr 150d2 <trimStack>
   12742:	       addq.l #4,sp
	if (failSecurityCheck(newnam)) return BR_ERROR;
   12744:	       move.l 40(sp),-(sp)
   12748:	       jsr e2a4 <failSecurityCheck>
   1274e:	       addq.l #4,sp
   12750:	       tst.w d0
   12752:	   /-- beq.s 1275a <builtIn_renameFile+0x54>
   12754:	   |   moveq #1,d0
   12756:	/--|-- bra.w 12840 <builtIn_renameFile+0x13a>
	FreeVec(temp);
   1275a:	|  \-> move.l 44(sp),36(sp)
   12760:	|      move.l 1c85c <SysBase>,d0
   12766:	|      movea.l d0,a6
   12768:	|      movea.l 36(sp),a1
   1276c:	|      jsr -690(a6)

	temp = getTextFromAnyVar(&(fun->stack->thisVar));
   12770:	|      movea.l 56(sp),a0
   12774:	|      move.l 24(a0),d0
   12778:	|      move.l d0,-(sp)
   1277a:	|      jsr 14d24 <getTextFromAnyVar>
   12780:	|      addq.l #4,sp
   12782:	|      move.l d0,44(sp)
	char * nam = encodeFilename(temp);
   12786:	|      move.l 44(sp),-(sp)
   1278a:	|      jsr 2fe <encodeFilename>
   12790:	|      addq.l #4,sp
   12792:	|      move.l d0,32(sp)
	trimStack(&fun->stack);
   12796:	|      moveq #24,d0
   12798:	|      add.l 56(sp),d0
   1279c:	|      move.l d0,-(sp)
   1279e:	|      jsr 150d2 <trimStack>
   127a4:	|      addq.l #4,sp
	if (failSecurityCheck(nam)) return BR_ERROR;
   127a6:	|      move.l 32(sp),-(sp)
   127aa:	|      jsr e2a4 <failSecurityCheck>
   127b0:	|      addq.l #4,sp
   127b2:	|      tst.w d0
   127b4:	|  /-- beq.s 127bc <builtIn_renameFile+0xb6>
   127b6:	|  |   moveq #1,d0
   127b8:	+--|-- bra.w 12840 <builtIn_renameFile+0x13a>
	FreeVec(temp);
   127bc:	|  \-> move.l 44(sp),28(sp)
   127c2:	|      move.l 1c85c <SysBase>,d0
   127c8:	|      movea.l d0,a6
   127ca:	|      movea.l 28(sp),a1
   127ce:	|      jsr -690(a6)

	setVariable(&fun->reg, SVT_INT, Rename(nam, newnam));
   127d2:	|      move.l 32(sp),24(sp)
   127d8:	|      move.l 40(sp),20(sp)
   127de:	|      move.l 1c864 <DOSBase>,d0
   127e4:	|      movea.l d0,a6
   127e6:	|      move.l 24(sp),d1
   127ea:	|      move.l 20(sp),d2
   127ee:	|      jsr -78(a6)
   127f2:	|      move.l d0,16(sp)
   127f6:	|      move.l 16(sp),d1
   127fa:	|      moveq #28,d0
   127fc:	|      add.l 56(sp),d0
   12800:	|      move.l d1,-(sp)
   12802:	|      pea 1 <_start+0x1>
   12806:	|      move.l d0,-(sp)
   12808:	|      jsr 15040 <setVariable>
   1280e:	|      lea 12(sp),sp
	FreeVec(nam);
   12812:	|      move.l 32(sp),12(sp)
   12818:	|      move.l 1c85c <SysBase>,d0
   1281e:	|      movea.l d0,a6
   12820:	|      movea.l 12(sp),a1
   12824:	|      jsr -690(a6)
	FreeVec(newnam);
   12828:	|      move.l 40(sp),8(sp)
   1282e:	|      move.l 1c85c <SysBase>,d0
   12834:	|      movea.l d0,a6
   12836:	|      movea.l 8(sp),a1
   1283a:	|      jsr -690(a6)

	return BR_CONTINUE;
   1283e:	|      moveq #2,d0
}
   12840:	\----> move.l (sp)+,d2
   12842:	       movea.l (sp)+,a6
   12844:	       lea 40(sp),sp
   12848:	       rts

0001284a <builtIn_cacheSound>:

builtIn(cacheSound)
{
   1284a:	       subq.l #4,sp
	UNUSEDALL
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   1284c:	       movea.l 12(sp),a0
   12850:	       move.l 24(a0),d0
   12854:	       move.l d0,-(sp)
   12856:	       pea 5 <_start+0x5>
   1285a:	       move.l sp,d0
   1285c:	       addq.l #8,d0
   1285e:	       move.l d0,-(sp)
   12860:	       jsr 1474e <getValueType>
   12866:	       lea 12(sp),sp
   1286a:	       tst.w d0
   1286c:	   /-- bne.s 12872 <builtIn_cacheSound+0x28>
   1286e:	   |   moveq #1,d0
   12870:	/--|-- bra.s 1289a <builtIn_cacheSound+0x50>
	trimStack (&fun -> stack);
   12872:	|  \-> moveq #24,d0
   12874:	|      add.l 12(sp),d0
   12878:	|      move.l d0,-(sp)
   1287a:	|      jsr 150d2 <trimStack>
   12880:	|      addq.l #4,sp
	if (cacheSound (fileNumber) == -1) return BR_ERROR;
   12882:	|      move.l (sp),d0
   12884:	|      move.l d0,-(sp)
   12886:	|      jsr d0ec <cacheSound>
   1288c:	|      addq.l #4,sp
   1288e:	|      moveq #-1,d1
   12890:	|      cmp.l d0,d1
   12892:	|  /-- bne.s 12898 <builtIn_cacheSound+0x4e>
   12894:	|  |   moveq #1,d0
   12896:	+--|-- bra.s 1289a <builtIn_cacheSound+0x50>
	return BR_CONTINUE;
   12898:	|  \-> moveq #2,d0
}
   1289a:	\----> addq.l #4,sp
   1289c:	       rts

0001289e <builtIn_burnString>:
	trimStack (&fun -> stack);
	if (x == IN_THE_CENTRE) x = (winWidth - stringWidth (newText)) >> 1;
	fixFont (pastePalette);
	burnStringToBackdrop (newText, x, y, pastePalette);
	delete[] newText; Todo: Amigize this*/
	KPrintF("burnString: Not implemented for Amiga yet");
   1289e:	pea 19a86 <line.c.05397aaf+0x49>
   128a4:	jsr 17176 <KPrintF>
   128aa:	addq.l #4,sp
	return BR_CONTINUE;
   128ac:	moveq #2,d0
}
   128ae:	rts

000128b0 <builtIn_setCharacterSpinSpeed>:

builtIn(setCharacterSpinSpeed)
{
   128b0:	          lea -12(sp),sp
	UNUSEDALL
	int speed, who;
	if (! getValueType(&speed, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   128b4:	          movea.l 20(sp),a0
   128b8:	          move.l 24(a0),d0
   128bc:	          move.l d0,-(sp)
   128be:	          pea 1 <_start+0x1>
   128c2:	          moveq #12,d0
   128c4:	          add.l sp,d0
   128c6:	          move.l d0,-(sp)
   128c8:	          jsr 1474e <getValueType>
   128ce:	          lea 12(sp),sp
   128d2:	          tst.w d0
   128d4:	      /-- bne.s 128dc <builtIn_setCharacterSpinSpeed+0x2c>
   128d6:	      |   moveq #1,d0
   128d8:	/-----|-- bra.w 12976 <builtIn_setCharacterSpinSpeed+0xc6>
	trimStack (&fun -> stack);
   128dc:	|     \-> moveq #24,d0
   128de:	|         add.l 20(sp),d0
   128e2:	|         move.l d0,-(sp)
   128e4:	|         jsr 150d2 <trimStack>
   128ea:	|         addq.l #4,sp
	if (! getValueType(&who, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   128ec:	|         movea.l 20(sp),a0
   128f0:	|         move.l 24(a0),d0
   128f4:	|         move.l d0,-(sp)
   128f6:	|         pea 7 <_start+0x7>
   128fa:	|         lea 8(sp),a0
   128fe:	|         move.l a0,-(sp)
   12900:	|         jsr 1474e <getValueType>
   12906:	|         lea 12(sp),sp
   1290a:	|         tst.w d0
   1290c:	|     /-- bne.s 12912 <builtIn_setCharacterSpinSpeed+0x62>
   1290e:	|     |   moveq #1,d0
   12910:	+-----|-- bra.s 12976 <builtIn_setCharacterSpinSpeed+0xc6>
	trimStack (&fun -> stack);
   12912:	|     \-> moveq #24,d0
   12914:	|         add.l 20(sp),d0
   12918:	|         move.l d0,-(sp)
   1291a:	|         jsr 150d2 <trimStack>
   12920:	|         addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (who);
   12922:	|         move.l (sp),d0
   12924:	|         move.l d0,-(sp)
   12926:	|         jsr a646 <findPerson>
   1292c:	|         addq.l #4,sp
   1292e:	|         move.l d0,8(sp)

	if (thisPerson) {
   12932:	|  /----- beq.s 1295c <builtIn_setCharacterSpinSpeed+0xac>
		thisPerson -> spinSpeed = speed;
   12934:	|  |      move.l 4(sp),d0
   12938:	|  |      movea.l 8(sp),a0
   1293c:	|  |      move.l d0,122(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   12940:	|  |      moveq #28,d0
   12942:	|  |      add.l 20(sp),d0
   12946:	|  |      pea 1 <_start+0x1>
   1294a:	|  |      pea 1 <_start+0x1>
   1294e:	|  |      move.l d0,-(sp)
   12950:	|  |      jsr 15040 <setVariable>
   12956:	|  |      lea 12(sp),sp
   1295a:	|  |  /-- bra.s 12974 <builtIn_setCharacterSpinSpeed+0xc4>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   1295c:	|  \--|-> moveq #28,d0
   1295e:	|     |   add.l 20(sp),d0
   12962:	|     |   clr.l -(sp)
   12964:	|     |   pea 1 <_start+0x1>
   12968:	|     |   move.l d0,-(sp)
   1296a:	|     |   jsr 15040 <setVariable>
   12970:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   12974:	|     \-> moveq #2,d0
}
   12976:	\-------> lea 12(sp),sp
   1297a:	          rts

0001297c <builtIn_setCharacterAngleOffset>:

builtIn(setCharacterAngleOffset)
{
   1297c:	          lea -12(sp),sp
	UNUSEDALL
	int angle, who;
	if (! getValueType(&angle, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12980:	          movea.l 20(sp),a0
   12984:	          move.l 24(a0),d0
   12988:	          move.l d0,-(sp)
   1298a:	          pea 1 <_start+0x1>
   1298e:	          moveq #12,d0
   12990:	          add.l sp,d0
   12992:	          move.l d0,-(sp)
   12994:	          jsr 1474e <getValueType>
   1299a:	          lea 12(sp),sp
   1299e:	          tst.w d0
   129a0:	      /-- bne.s 129a8 <builtIn_setCharacterAngleOffset+0x2c>
   129a2:	      |   moveq #1,d0
   129a4:	/-----|-- bra.w 12a42 <builtIn_setCharacterAngleOffset+0xc6>
	trimStack (&fun -> stack);
   129a8:	|     \-> moveq #24,d0
   129aa:	|         add.l 20(sp),d0
   129ae:	|         move.l d0,-(sp)
   129b0:	|         jsr 150d2 <trimStack>
   129b6:	|         addq.l #4,sp
	if (! getValueType(&who, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   129b8:	|         movea.l 20(sp),a0
   129bc:	|         move.l 24(a0),d0
   129c0:	|         move.l d0,-(sp)
   129c2:	|         pea 7 <_start+0x7>
   129c6:	|         lea 8(sp),a0
   129ca:	|         move.l a0,-(sp)
   129cc:	|         jsr 1474e <getValueType>
   129d2:	|         lea 12(sp),sp
   129d6:	|         tst.w d0
   129d8:	|     /-- bne.s 129de <builtIn_setCharacterAngleOffset+0x62>
   129da:	|     |   moveq #1,d0
   129dc:	+-----|-- bra.s 12a42 <builtIn_setCharacterAngleOffset+0xc6>
	trimStack (&fun -> stack);
   129de:	|     \-> moveq #24,d0
   129e0:	|         add.l 20(sp),d0
   129e4:	|         move.l d0,-(sp)
   129e6:	|         jsr 150d2 <trimStack>
   129ec:	|         addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (who);
   129ee:	|         move.l (sp),d0
   129f0:	|         move.l d0,-(sp)
   129f2:	|         jsr a646 <findPerson>
   129f8:	|         addq.l #4,sp
   129fa:	|         move.l d0,8(sp)

	if (thisPerson) {
   129fe:	|  /----- beq.s 12a28 <builtIn_setCharacterAngleOffset+0xac>
		thisPerson -> angleOffset = angle;
   12a00:	|  |      move.l 4(sp),d0
   12a04:	|  |      movea.l 8(sp),a0
   12a08:	|  |      move.l d0,100(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   12a0c:	|  |      moveq #28,d0
   12a0e:	|  |      add.l 20(sp),d0
   12a12:	|  |      pea 1 <_start+0x1>
   12a16:	|  |      pea 1 <_start+0x1>
   12a1a:	|  |      move.l d0,-(sp)
   12a1c:	|  |      jsr 15040 <setVariable>
   12a22:	|  |      lea 12(sp),sp
   12a26:	|  |  /-- bra.s 12a40 <builtIn_setCharacterAngleOffset+0xc4>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   12a28:	|  \--|-> moveq #28,d0
   12a2a:	|     |   add.l 20(sp),d0
   12a2e:	|     |   clr.l -(sp)
   12a30:	|     |   pea 1 <_start+0x1>
   12a34:	|     |   move.l d0,-(sp)
   12a36:	|     |   jsr 15040 <setVariable>
   12a3c:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   12a40:	|     \-> moveq #2,d0
}
   12a42:	\-------> lea 12(sp),sp
   12a46:	          rts

00012a48 <builtIn_transitionMode>:


builtIn(transitionMode)
{
   12a48:	       subq.l #4,sp
	UNUSEDALL
	int n;
	if (! getValueType(&n, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12a4a:	       movea.l 12(sp),a0
   12a4e:	       move.l 24(a0),d0
   12a52:	       move.l d0,-(sp)
   12a54:	       pea 1 <_start+0x1>
   12a58:	       move.l sp,d0
   12a5a:	       addq.l #8,d0
   12a5c:	       move.l d0,-(sp)
   12a5e:	       jsr 1474e <getValueType>
   12a64:	       lea 12(sp),sp
   12a68:	       tst.w d0
   12a6a:	   /-- bne.s 12a70 <builtIn_transitionMode+0x28>
   12a6c:	   |   moveq #1,d0
   12a6e:	/--|-- bra.s 12aa6 <builtIn_transitionMode+0x5e>
	fadeMode = n;
   12a70:	|  \-> move.l (sp),d0
   12a72:	|      move.l d0,d0
   12a74:	|      move.b d0,1c736 <fadeMode>
	trimStack (&fun -> stack);
   12a7a:	|      moveq #24,d0
   12a7c:	|      add.l 12(sp),d0
   12a80:	|      move.l d0,-(sp)
   12a82:	|      jsr 150d2 <trimStack>
   12a88:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   12a8a:	|      moveq #28,d0
   12a8c:	|      add.l 12(sp),d0
   12a90:	|      pea 1 <_start+0x1>
   12a94:	|      pea 1 <_start+0x1>
   12a98:	|      move.l d0,-(sp)
   12a9a:	|      jsr 15040 <setVariable>
   12aa0:	|      lea 12(sp),sp
	return BR_CONTINUE;
   12aa4:	|      moveq #2,d0
}
   12aa6:	\----> addq.l #4,sp
   12aa8:	       rts

00012aaa <builtIn__rem_updateDisplay>:

// Removed function - does nothing
builtIn(_rem_updateDisplay)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   12aaa:	moveq #24,d0
   12aac:	add.l 8(sp),d0
   12ab0:	move.l d0,-(sp)
   12ab2:	jsr 150d2 <trimStack>
   12ab8:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, TRUE);
   12aba:	moveq #28,d0
   12abc:	add.l 8(sp),d0
   12ac0:	pea 1 <_start+0x1>
   12ac4:	pea 1 <_start+0x1>
   12ac8:	move.l d0,-(sp)
   12aca:	jsr 15040 <setVariable>
   12ad0:	lea 12(sp),sp
	return BR_CONTINUE;
   12ad4:	moveq #2,d0
}
   12ad6:	rts

00012ad8 <builtIn_getSoundCache>:
	if (! checkNew (&fun -> reg.varData.theStack)) return BR_ERROR;
	fun -> reg.varData.theStack -> first = NULL;
	fun -> reg.varData.theStack -> last = NULL;
	fun -> reg.varData.theStack -> timesUsed = 1;
	if (! getSoundCacheStack (&fun -> reg.varData.theStack)) return BR_ERROR; Todo: Amigize this?*/
	KPrintF("getSoundCache: Not implemented yet for Amiga");
   12ad8:	pea 19ab0 <line.c.05397aaf+0x73>
   12ade:	jsr 17176 <KPrintF>
   12ae4:	addq.l #4,sp
	return BR_CONTINUE;
   12ae6:	moveq #2,d0
}
   12ae8:	rts

00012aea <builtIn_saveCustomData>:

builtIn(saveCustomData)
{
   12aea:	       lea -16(sp),sp
   12aee:	       move.l a6,-(sp)
	UNUSEDALL
	// saveCustomData (thisStack, fileName);
	char * fileNameB = getTextFromAnyVar(&(fun->stack->thisVar));
   12af0:	       movea.l 28(sp),a0
   12af4:	       move.l 24(a0),d0
   12af8:	       move.l d0,-(sp)
   12afa:	       jsr 14d24 <getTextFromAnyVar>
   12b00:	       addq.l #4,sp
   12b02:	       move.l d0,16(sp)
	if (!fileNameB) return BR_ERROR;
   12b06:	   /-- bne.s 12b0e <builtIn_saveCustomData+0x24>
   12b08:	   |   moveq #1,d0
   12b0a:	/--|-- bra.w 12bc0 <builtIn_saveCustomData+0xd6>

	char * fileName = encodeFilename(fileNameB);
   12b0e:	|  \-> move.l 16(sp),-(sp)
   12b12:	|      jsr 2fe <encodeFilename>
   12b18:	|      addq.l #4,sp
   12b1a:	|      move.l d0,12(sp)
	FreeVec(fileNameB);
   12b1e:	|      move.l 16(sp),8(sp)
   12b24:	|      move.l 1c85c <SysBase>,d0
   12b2a:	|      movea.l d0,a6
   12b2c:	|      movea.l 8(sp),a1
   12b30:	|      jsr -690(a6)

	if (failSecurityCheck(fileName)) return BR_ERROR;
   12b34:	|      move.l 12(sp),-(sp)
   12b38:	|      jsr e2a4 <failSecurityCheck>
   12b3e:	|      addq.l #4,sp
   12b40:	|      tst.w d0
   12b42:	|  /-- beq.s 12b48 <builtIn_saveCustomData+0x5e>
   12b44:	|  |   moveq #1,d0
   12b46:	+--|-- bra.s 12bc0 <builtIn_saveCustomData+0xd6>
	trimStack(&fun->stack);
   12b48:	|  \-> moveq #24,d0
   12b4a:	|      add.l 28(sp),d0
   12b4e:	|      move.l d0,-(sp)
   12b50:	|      jsr 150d2 <trimStack>
   12b56:	|      addq.l #4,sp

	if (fun->stack->thisVar.varType != SVT_STACK) {
   12b58:	|      movea.l 28(sp),a0
   12b5c:	|      movea.l 24(a0),a0
   12b60:	|      move.l (a0),d0
   12b62:	|      moveq #6,d1
   12b64:	|      cmp.l d0,d1
   12b66:	|  /-- beq.s 12b7a <builtIn_saveCustomData+0x90>
		KPrintF("First parameter isn't a stack");
   12b68:	|  |   pea 19add <line.c.05397aaf+0xa0>
   12b6e:	|  |   jsr 17176 <KPrintF>
   12b74:	|  |   addq.l #4,sp
		return BR_ERROR;
   12b76:	|  |   moveq #1,d0
   12b78:	+--|-- bra.s 12bc0 <builtIn_saveCustomData+0xd6>
	}
	if (!stackToFile(fileName, &fun->stack->thisVar)) return BR_ERROR;
   12b7a:	|  \-> movea.l 28(sp),a0
   12b7e:	|      move.l 24(a0),d0
   12b82:	|      move.l d0,-(sp)
   12b84:	|      move.l 16(sp),-(sp)
   12b88:	|      jsr def4 <stackToFile>
   12b8e:	|      addq.l #8,sp
   12b90:	|      tst.w d0
   12b92:	|  /-- bne.s 12b98 <builtIn_saveCustomData+0xae>
   12b94:	|  |   moveq #1,d0
   12b96:	+--|-- bra.s 12bc0 <builtIn_saveCustomData+0xd6>
	trimStack(&fun->stack);
   12b98:	|  \-> moveq #24,d0
   12b9a:	|      add.l 28(sp),d0
   12b9e:	|      move.l d0,-(sp)
   12ba0:	|      jsr 150d2 <trimStack>
   12ba6:	|      addq.l #4,sp
	FreeVec(fileName);
   12ba8:	|      move.l 12(sp),4(sp)
   12bae:	|      move.l 1c85c <SysBase>,d0
   12bb4:	|      movea.l d0,a6
   12bb6:	|      movea.l 4(sp),a1
   12bba:	|      jsr -690(a6)
	return BR_CONTINUE;
   12bbe:	|      moveq #2,d0
}
   12bc0:	\----> movea.l (sp)+,a6
   12bc2:	       lea 16(sp),sp
   12bc6:	       rts

00012bc8 <builtIn_loadCustomData>:

builtIn(loadCustomData)
{
   12bc8:	       lea -28(sp),sp
   12bcc:	       move.l a6,-(sp)
	UNUSEDALL

	char * newTextA = getTextFromAnyVar(&(fun->stack->thisVar));
   12bce:	       movea.l 40(sp),a0
   12bd2:	       move.l 24(a0),d0
   12bd6:	       move.l d0,-(sp)
   12bd8:	       jsr 14d24 <getTextFromAnyVar>
   12bde:	       addq.l #4,sp
   12be0:	       move.l d0,28(sp)
	if (!newTextA) return BR_ERROR;
   12be4:	   /-- bne.s 12bec <builtIn_loadCustomData+0x24>
   12be6:	   |   moveq #1,d0
   12be8:	/--|-- bra.w 12ce8 <builtIn_loadCustomData+0x120>

	char * newText = encodeFilename(newTextA);
   12bec:	|  \-> move.l 28(sp),-(sp)
   12bf0:	|      jsr 2fe <encodeFilename>
   12bf6:	|      addq.l #4,sp
   12bf8:	|      move.l d0,24(sp)
	FreeVec(newTextA);
   12bfc:	|      move.l 28(sp),20(sp)
   12c02:	|      move.l 1c85c <SysBase>,d0
   12c08:	|      movea.l d0,a6
   12c0a:	|      movea.l 20(sp),a1
   12c0e:	|      jsr -690(a6)

	if (failSecurityCheck(newText)) return BR_ERROR;
   12c12:	|      move.l 24(sp),-(sp)
   12c16:	|      jsr e2a4 <failSecurityCheck>
   12c1c:	|      addq.l #4,sp
   12c1e:	|      tst.w d0
   12c20:	|  /-- beq.s 12c28 <builtIn_loadCustomData+0x60>
   12c22:	|  |   moveq #1,d0
   12c24:	+--|-- bra.w 12ce8 <builtIn_loadCustomData+0x120>
	trimStack(&fun->stack);
   12c28:	|  \-> moveq #24,d0
   12c2a:	|      add.l 40(sp),d0
   12c2e:	|      move.l d0,-(sp)
   12c30:	|      jsr 150d2 <trimStack>
   12c36:	|      addq.l #4,sp

	unlinkVar(&fun->reg);
   12c38:	|      moveq #28,d0
   12c3a:	|      add.l 40(sp),d0
   12c3e:	|      move.l d0,-(sp)
   12c40:	|      jsr 1499c <unlinkVar>
   12c46:	|      addq.l #4,sp
	fun->reg.varType = SVT_STACK;
   12c48:	|      movea.l 40(sp),a0
   12c4c:	|      moveq #6,d0
   12c4e:	|      move.l d0,28(a0)
	fun->reg.varData.theStack = AllocVec(sizeof(struct stackHandler), MEMF_ANY);
   12c52:	|      moveq #12,d0
   12c54:	|      move.l d0,16(sp)
   12c58:	|      clr.l 12(sp)
   12c5c:	|      move.l 1c85c <SysBase>,d0
   12c62:	|      movea.l d0,a6
   12c64:	|      move.l 16(sp),d0
   12c68:	|      move.l 12(sp),d1
   12c6c:	|      jsr -684(a6)
   12c70:	|      move.l d0,8(sp)
   12c74:	|      move.l 8(sp),d0
   12c78:	|      movea.l 40(sp),a0
   12c7c:	|      move.l d0,32(a0)
	if (!fun->reg.varData.theStack) return BR_ERROR;
   12c80:	|      movea.l 40(sp),a0
   12c84:	|      move.l 32(a0),d0
   12c88:	|  /-- bne.s 12c8e <builtIn_loadCustomData+0xc6>
   12c8a:	|  |   moveq #1,d0
   12c8c:	+--|-- bra.s 12ce8 <builtIn_loadCustomData+0x120>
	fun->reg.varData.theStack->first = NULL;
   12c8e:	|  \-> movea.l 40(sp),a0
   12c92:	|      movea.l 32(a0),a0
   12c96:	|      clr.l (a0)
	fun->reg.varData.theStack->last = NULL;
   12c98:	|      movea.l 40(sp),a0
   12c9c:	|      movea.l 32(a0),a0
   12ca0:	|      clr.l 4(a0)
	fun->reg.varData.theStack->timesUsed = 1;
   12ca4:	|      movea.l 40(sp),a0
   12ca8:	|      movea.l 32(a0),a0
   12cac:	|      moveq #1,d0
   12cae:	|      move.l d0,8(a0)
	if (!fileToStack(newText, fun->reg.varData.theStack)) return BR_ERROR;
   12cb2:	|      movea.l 40(sp),a0
   12cb6:	|      move.l 32(a0),d0
   12cba:	|      move.l d0,-(sp)
   12cbc:	|      move.l 28(sp),-(sp)
   12cc0:	|      jsr d92e <fileToStack>
   12cc6:	|      addq.l #8,sp
   12cc8:	|      tst.w d0
   12cca:	|  /-- bne.s 12cd0 <builtIn_loadCustomData+0x108>
   12ccc:	|  |   moveq #1,d0
   12cce:	+--|-- bra.s 12ce8 <builtIn_loadCustomData+0x120>
	FreeVec(newText);
   12cd0:	|  \-> move.l 24(sp),4(sp)
   12cd6:	|      move.l 1c85c <SysBase>,d0
   12cdc:	|      movea.l d0,a6
   12cde:	|      movea.l 4(sp),a1
   12ce2:	|      jsr -690(a6)
	return BR_CONTINUE;
   12ce6:	|      moveq #2,d0
}
   12ce8:	\----> movea.l (sp)+,a6
   12cea:	       lea 28(sp),sp
   12cee:	       rts

00012cf0 <builtIn_setCustomEncoding>:

builtIn(setCustomEncoding)
{
   12cf0:	       subq.l #4,sp
	UNUSEDALL
	int n;
	if (! getValueType(&n, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12cf2:	       movea.l 12(sp),a0
   12cf6:	       move.l 24(a0),d0
   12cfa:	       move.l d0,-(sp)
   12cfc:	       pea 1 <_start+0x1>
   12d00:	       move.l sp,d0
   12d02:	       addq.l #8,d0
   12d04:	       move.l d0,-(sp)
   12d06:	       jsr 1474e <getValueType>
   12d0c:	       lea 12(sp),sp
   12d10:	       tst.w d0
   12d12:	   /-- bne.s 12d18 <builtIn_setCustomEncoding+0x28>
   12d14:	   |   moveq #1,d0
   12d16:	/--|-- bra.s 12d4e <builtIn_setCustomEncoding+0x5e>
	saveEncoding = n;
   12d18:	|  \-> move.l (sp),d0
   12d1a:	|      move.l d0,d0
   12d1c:	|      move.w d0,1c914 <saveEncoding>
	trimStack (&fun -> stack);
   12d22:	|      moveq #24,d0
   12d24:	|      add.l 12(sp),d0
   12d28:	|      move.l d0,-(sp)
   12d2a:	|      jsr 150d2 <trimStack>
   12d30:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   12d32:	|      moveq #28,d0
   12d34:	|      add.l 12(sp),d0
   12d38:	|      pea 1 <_start+0x1>
   12d3c:	|      pea 1 <_start+0x1>
   12d40:	|      move.l d0,-(sp)
   12d42:	|      jsr 15040 <setVariable>
   12d48:	|      lea 12(sp),sp
	return BR_CONTINUE;
   12d4c:	|      moveq #2,d0
}
   12d4e:	\----> addq.l #4,sp
   12d50:	       rts

00012d52 <builtIn_freeSound>:

builtIn(freeSound)
{
   12d52:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   12d54:	       movea.l 12(sp),a0
   12d58:	       move.l 24(a0),d0
   12d5c:	       move.l d0,-(sp)
   12d5e:	       pea 5 <_start+0x5>
   12d62:	       move.l sp,d0
   12d64:	       addq.l #8,d0
   12d66:	       move.l d0,-(sp)
   12d68:	       jsr 1474e <getValueType>
   12d6e:	       lea 12(sp),sp
   12d72:	       tst.w d0
   12d74:	   /-- bne.s 12d7a <builtIn_freeSound+0x28>
   12d76:	   |   moveq #1,d0
   12d78:	/--|-- bra.s 12d98 <builtIn_freeSound+0x46>
	trimStack (&fun -> stack);
   12d7a:	|  \-> moveq #24,d0
   12d7c:	|      add.l 12(sp),d0
   12d80:	|      move.l d0,-(sp)
   12d82:	|      jsr 150d2 <trimStack>
   12d88:	|      addq.l #4,sp
	huntKillFreeSound (v);
   12d8a:	|      move.l (sp),d0
   12d8c:	|      move.l d0,-(sp)
   12d8e:	|      jsr d0f0 <huntKillFreeSound>
   12d94:	|      addq.l #4,sp
	return BR_CONTINUE;
   12d96:	|      moveq #2,d0
}
   12d98:	\----> addq.l #4,sp
   12d9a:	       rts

00012d9c <builtIn_parallaxAdd>:

builtIn(parallaxAdd)
{
   12d9c:	       lea -12(sp),sp
   12da0:	       move.l d2,-(sp)
	/*if (frozenStuff) {
		fatal ("Can't set background parallax image while frozen");
		return BR_ERROR;
	} else { Todo: Amigize this*/
		int wrapX, wrapY, v;
		if (! getValueType(&wrapY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12da2:	       movea.l 24(sp),a0
   12da6:	       move.l 24(a0),d0
   12daa:	       move.l d0,-(sp)
   12dac:	       pea 1 <_start+0x1>
   12db0:	       moveq #16,d0
   12db2:	       add.l sp,d0
   12db4:	       move.l d0,-(sp)
   12db6:	       jsr 1474e <getValueType>
   12dbc:	       lea 12(sp),sp
   12dc0:	       tst.w d0
   12dc2:	   /-- bne.s 12dca <builtIn_parallaxAdd+0x2e>
   12dc4:	   |   moveq #1,d0
   12dc6:	/--|-- bra.w 12e9e <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   12dca:	|  \-> moveq #24,d0
   12dcc:	|      add.l 24(sp),d0
   12dd0:	|      move.l d0,-(sp)
   12dd2:	|      jsr 150d2 <trimStack>
   12dd8:	|      addq.l #4,sp
		if (! getValueType(&wrapX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12dda:	|      movea.l 24(sp),a0
   12dde:	|      move.l 24(a0),d0
   12de2:	|      move.l d0,-(sp)
   12de4:	|      pea 1 <_start+0x1>
   12de8:	|      moveq #20,d0
   12dea:	|      add.l sp,d0
   12dec:	|      move.l d0,-(sp)
   12dee:	|      jsr 1474e <getValueType>
   12df4:	|      lea 12(sp),sp
   12df8:	|      tst.w d0
   12dfa:	|  /-- bne.s 12e02 <builtIn_parallaxAdd+0x66>
   12dfc:	|  |   moveq #1,d0
   12dfe:	+--|-- bra.w 12e9e <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   12e02:	|  \-> moveq #24,d0
   12e04:	|      add.l 24(sp),d0
   12e08:	|      move.l d0,-(sp)
   12e0a:	|      jsr 150d2 <trimStack>
   12e10:	|      addq.l #4,sp
		if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   12e12:	|      movea.l 24(sp),a0
   12e16:	|      move.l 24(a0),d0
   12e1a:	|      move.l d0,-(sp)
   12e1c:	|      pea 5 <_start+0x5>
   12e20:	|      lea 12(sp),a0
   12e24:	|      move.l a0,-(sp)
   12e26:	|      jsr 1474e <getValueType>
   12e2c:	|      lea 12(sp),sp
   12e30:	|      tst.w d0
   12e32:	|  /-- bne.s 12e38 <builtIn_parallaxAdd+0x9c>
   12e34:	|  |   moveq #1,d0
   12e36:	+--|-- bra.s 12e9e <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   12e38:	|  \-> moveq #24,d0
   12e3a:	|      add.l 24(sp),d0
   12e3e:	|      move.l d0,-(sp)
   12e40:	|      jsr 150d2 <trimStack>
   12e46:	|      addq.l #4,sp

		if (! loadParallax (v, wrapX, wrapY)) return BR_ERROR;
   12e48:	|      move.l 8(sp),d0
   12e4c:	|      move.l d0,d0
   12e4e:	|      moveq #0,d2
   12e50:	|      move.w d0,d2
   12e52:	|      move.l 12(sp),d0
   12e56:	|      move.l d0,d0
   12e58:	|      moveq #0,d1
   12e5a:	|      move.w d0,d1
   12e5c:	|      move.l 4(sp),d0
   12e60:	|      move.l d0,d0
   12e62:	|      move.w d0,d0
   12e64:	|      andi.l #65535,d0
   12e6a:	|      move.l d2,-(sp)
   12e6c:	|      move.l d1,-(sp)
   12e6e:	|      move.l d0,-(sp)
   12e70:	|      jsr d30c <loadParallax>
   12e76:	|      lea 12(sp),sp
   12e7a:	|      tst.w d0
   12e7c:	|  /-- bne.s 12e82 <builtIn_parallaxAdd+0xe6>
   12e7e:	|  |   moveq #1,d0
   12e80:	+--|-- bra.s 12e9e <builtIn_parallaxAdd+0x102>
		setVariable (&fun -> reg, SVT_INT, 1);
   12e82:	|  \-> moveq #28,d0
   12e84:	|      add.l 24(sp),d0
   12e88:	|      pea 1 <_start+0x1>
   12e8c:	|      pea 1 <_start+0x1>
   12e90:	|      move.l d0,-(sp)
   12e92:	|      jsr 15040 <setVariable>
   12e98:	|      lea 12(sp),sp
	//}
	return BR_CONTINUE;
   12e9c:	|      moveq #2,d0
}
   12e9e:	\----> move.l (sp)+,d2
   12ea0:	       lea 12(sp),sp
   12ea4:	       rts

00012ea6 <builtIn_parallaxClear>:

builtIn(parallaxClear)
{
	UNUSEDALL
	killParallax ();
   12ea6:	jsr d244 <killParallax>
	setVariable (&fun -> reg, SVT_INT, 1);
   12eac:	moveq #28,d0
   12eae:	add.l 8(sp),d0
   12eb2:	pea 1 <_start+0x1>
   12eb6:	pea 1 <_start+0x1>
   12eba:	move.l d0,-(sp)
   12ebc:	jsr 15040 <setVariable>
   12ec2:	lea 12(sp),sp
	return BR_CONTINUE;
   12ec6:	moveq #2,d0
}
   12ec8:	rts

00012eca <builtIn_getPixelColour>:
	if (! checkNew (&fun -> reg.varData.theStack)) return BR_ERROR;
	fun -> reg.varData.theStack -> first = NULL;
	fun -> reg.varData.theStack -> last = NULL;
	fun -> reg.varData.theStack -> timesUsed = 1;
	if (! getRGBIntoStack (x, y, &fun -> reg.varData.theStack)) return BR_ERROR; Todo: Amigize this*/
	KPrintF("getPixelColor: Not implemented for Amiga");
   12eca:	pea 19afb <line.c.05397aaf+0xbe>
   12ed0:	jsr 17176 <KPrintF>
   12ed6:	addq.l #4,sp

	return BR_CONTINUE;
   12ed8:	moveq #2,d0
}
   12eda:	rts

00012edc <builtIn_makeFastArray>:

builtIn(makeFastArray)
{
   12edc:	             subq.l #8,sp
	UNUSEDALL
	switch (fun -> stack -> thisVar.varType) {
   12ede:	             movea.l 16(sp),a0
   12ee2:	             movea.l 24(a0),a0
   12ee6:	             move.l (a0),d0
   12ee8:	             moveq #1,d1
   12eea:	             cmp.l d0,d1
   12eec:	      /----- beq.s 12f34 <builtIn_makeFastArray+0x58>
   12eee:	      |      moveq #6,d1
   12ef0:	      |      cmp.l d0,d1
   12ef2:	/-----|----- bne.s 12f72 <builtIn_makeFastArray+0x96>
		case SVT_STACK:
		{
			BOOL success = makeFastArrayFromStack (&fun -> reg, fun -> stack -> thisVar.varData.theStack);
   12ef4:	|     |      movea.l 16(sp),a0
   12ef8:	|     |      movea.l 24(a0),a0
   12efc:	|     |      move.l 4(a0),d1
   12f00:	|     |      moveq #28,d0
   12f02:	|     |      add.l 16(sp),d0
   12f06:	|     |      move.l d1,-(sp)
   12f08:	|     |      move.l d0,-(sp)
   12f0a:	|     |      jsr 14800 <makeFastArrayFromStack>
   12f10:	|     |      addq.l #8,sp
   12f12:	|     |      move.w d0,6(sp)
			trimStack (&fun -> stack);
   12f16:	|     |      moveq #24,d0
   12f18:	|     |      add.l 16(sp),d0
   12f1c:	|     |      move.l d0,-(sp)
   12f1e:	|     |      jsr 150d2 <trimStack>
   12f24:	|     |      addq.l #4,sp
			return success ? BR_CONTINUE : BR_ERROR;
   12f26:	|     |      tst.w 6(sp)
   12f2a:	|     |  /-- beq.s 12f30 <builtIn_makeFastArray+0x54>
   12f2c:	|     |  |   moveq #2,d0
   12f2e:	|  /--|--|-- bra.s 12f84 <builtIn_makeFastArray+0xa8>
   12f30:	|  |  |  \-> moveq #1,d0
   12f32:	|  +--|----- bra.s 12f84 <builtIn_makeFastArray+0xa8>
		}
			break;

		case SVT_INT:
		{
			int i = fun -> stack -> thisVar.varData.intValue;
   12f34:	|  |  \----> movea.l 16(sp),a0
   12f38:	|  |         movea.l 24(a0),a0
   12f3c:	|  |         move.l 4(a0),2(sp)
			trimStack (&fun -> stack);
   12f42:	|  |         moveq #24,d0
   12f44:	|  |         add.l 16(sp),d0
   12f48:	|  |         move.l d0,-(sp)
   12f4a:	|  |         jsr 150d2 <trimStack>
   12f50:	|  |         addq.l #4,sp
			return makeFastArraySize (&fun -> reg, i) ? BR_CONTINUE : BR_ERROR;
   12f52:	|  |         moveq #28,d0
   12f54:	|  |         add.l 16(sp),d0
   12f58:	|  |         move.l 2(sp),-(sp)
   12f5c:	|  |         move.l d0,-(sp)
   12f5e:	|  |         jsr 1486a <makeFastArraySize>
   12f64:	|  |         addq.l #8,sp
   12f66:	|  |         tst.w d0
   12f68:	|  |     /-- beq.s 12f6e <builtIn_makeFastArray+0x92>
   12f6a:	|  |     |   moveq #2,d0
   12f6c:	|  +-----|-- bra.s 12f84 <builtIn_makeFastArray+0xa8>
   12f6e:	|  |     \-> moveq #1,d0
   12f70:	|  +-------- bra.s 12f84 <builtIn_makeFastArray+0xa8>
		}
			break;

		default:
			break;
   12f72:	\--|-------> nop
	}
	KPrintF ("Parameter must be a number or a stack.");
   12f74:	   |         pea 19b24 <line.c.05397aaf+0xe7>
   12f7a:	   |         jsr 17176 <KPrintF>
   12f80:	   |         addq.l #4,sp
	return BR_ERROR;
   12f82:	   |         moveq #1,d0
}
   12f84:	   \-------> addq.l #8,sp
   12f86:	             rts

00012f88 <builtIn_getCharacterScale>:

builtIn(getCharacterScale)
{
   12f88:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12f8a:	          movea.l 16(sp),a0
   12f8e:	          move.l 24(a0),d0
   12f92:	          move.l d0,-(sp)
   12f94:	          pea 7 <_start+0x7>
   12f98:	          move.l sp,d0
   12f9a:	          addq.l #8,d0
   12f9c:	          move.l d0,-(sp)
   12f9e:	          jsr 1474e <getValueType>
   12fa4:	          lea 12(sp),sp
   12fa8:	          tst.w d0
   12faa:	      /-- bne.s 12fb0 <builtIn_getCharacterScale+0x28>
   12fac:	      |   moveq #1,d0
   12fae:	/-----|-- bra.s 1302a <builtIn_getCharacterScale+0xa2>
	trimStack (&fun -> stack);
   12fb0:	|     \-> moveq #24,d0
   12fb2:	|         add.l 16(sp),d0
   12fb6:	|         move.l d0,-(sp)
   12fb8:	|         jsr 150d2 <trimStack>
   12fbe:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   12fc0:	|         move.l (sp),d0
   12fc2:	|         move.l d0,-(sp)
   12fc4:	|         jsr a646 <findPerson>
   12fca:	|         addq.l #4,sp
   12fcc:	|         move.l d0,4(sp)
	if (pers) {
   12fd0:	|  /----- beq.s 13010 <builtIn_getCharacterScale+0x88>
		setVariable (&fun -> reg, SVT_INT, pers -> scale * (FLOAT) 100); 
   12fd2:	|  |      movea.l 4(sp),a0
   12fd6:	|  |      move.l 32(a0),d0
   12fda:	|  |      move.l #1120403456,-(sp)
   12fe0:	|  |      move.l d0,-(sp)
   12fe2:	|  |      jsr 17664 <__mulsf3>
   12fe8:	|  |      addq.l #8,sp
   12fea:	|  |      move.l d0,-(sp)
   12fec:	|  |      jsr 1754a <__fixsfsi>
   12ff2:	|  |      addq.l #4,sp
   12ff4:	|  |      move.l d0,d1
   12ff6:	|  |      moveq #28,d0
   12ff8:	|  |      add.l 16(sp),d0
   12ffc:	|  |      move.l d1,-(sp)
   12ffe:	|  |      pea 1 <_start+0x1>
   13002:	|  |      move.l d0,-(sp)
   13004:	|  |      jsr 15040 <setVariable>
   1300a:	|  |      lea 12(sp),sp
   1300e:	|  |  /-- bra.s 13028 <builtIn_getCharacterScale+0xa0>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   13010:	|  \--|-> moveq #28,d0
   13012:	|     |   add.l 16(sp),d0
   13016:	|     |   clr.l -(sp)
   13018:	|     |   pea 1 <_start+0x1>
   1301c:	|     |   move.l d0,-(sp)
   1301e:	|     |   jsr 15040 <setVariable>
   13024:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   13028:	|     \-> moveq #2,d0
}
   1302a:	\-------> addq.l #8,sp
   1302c:	          rts

0001302e <builtIn_getLanguageID>:

builtIn(getLanguageID)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, gameSettings.languageID);
   1302e:	move.l 1c938 <gameSettings>,d0
   13034:	move.l d0,d1
   13036:	moveq #28,d0
   13038:	add.l 8(sp),d0
   1303c:	move.l d1,-(sp)
   1303e:	pea 1 <_start+0x1>
   13042:	move.l d0,-(sp)
   13044:	jsr 15040 <setVariable>
   1304a:	lea 12(sp),sp
	return BR_CONTINUE;
   1304e:	moveq #2,d0
}
   13050:	rts

00013052 <builtIn__rem_launchWith>:
// Removed function
builtIn(_rem_launchWith)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   13052:	moveq #24,d0
   13054:	add.l 8(sp),d0
   13058:	move.l d0,-(sp)
   1305a:	jsr 150d2 <trimStack>
   13060:	addq.l #4,sp
	trimStack (&fun -> stack);
   13062:	moveq #24,d0
   13064:	add.l 8(sp),d0
   13068:	move.l d0,-(sp)
   1306a:	jsr 150d2 <trimStack>
   13070:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, FALSE);
   13072:	moveq #28,d0
   13074:	add.l 8(sp),d0
   13078:	clr.l -(sp)
   1307a:	pea 1 <_start+0x1>
   1307e:	move.l d0,-(sp)
   13080:	jsr 15040 <setVariable>
   13086:	lea 12(sp),sp

	return BR_CONTINUE;
   1308a:	moveq #2,d0

}
   1308c:	rts

0001308e <builtIn_getFramesPerSecond>:

builtIn(getFramesPerSecond)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, lastFramesPerSecond);
   1308e:	move.l 1c1dc <lastFramesPerSecond>,d1
   13094:	moveq #28,d0
   13096:	add.l 8(sp),d0
   1309a:	move.l d1,-(sp)
   1309c:	pea 1 <_start+0x1>
   130a0:	move.l d0,-(sp)
   130a2:	jsr 15040 <setVariable>
   130a8:	lea 12(sp),sp
	return BR_CONTINUE;
   130ac:	moveq #2,d0
}
   130ae:	rts

000130b0 <builtIn_showThumbnail>:
	//				deb ("aaaaa is still ", aaaaa);
	delete[] aaaaa;
	//				deb ("Deleted", "aaaaa");
	showThumbnail (file, x, y);
	delete[] file; Todo Amigize this?*/
	return BR_CONTINUE;
   130b0:	moveq #2,d0
}
   130b2:	rts

000130b4 <builtIn_setThumbnailSize>:

builtIn(setThumbnailSize)
{
   130b4:	          lea -52(sp),sp
	UNUSEDALL
	if (! getValueType(&thumbHeight, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   130b8:	          movea.l 60(sp),a0
   130bc:	          move.l 24(a0),d0
   130c0:	          move.l d0,-(sp)
   130c2:	          pea 1 <_start+0x1>
   130c6:	          pea 1c772 <thumbHeight>
   130cc:	          jsr 1474e <getValueType>
   130d2:	          lea 12(sp),sp
   130d6:	          tst.w d0
   130d8:	      /-- bne.s 130e0 <builtIn_setThumbnailSize+0x2c>
   130da:	      |   moveq #1,d0
   130dc:	/-----|-- bra.w 1319c <builtIn_setThumbnailSize+0xe8>
	trimStack (&fun -> stack);
   130e0:	|     \-> moveq #24,d0
   130e2:	|         add.l 60(sp),d0
   130e6:	|         move.l d0,-(sp)
   130e8:	|         jsr 150d2 <trimStack>
   130ee:	|         addq.l #4,sp
	if (! getValueType(&thumbWidth, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   130f0:	|         movea.l 60(sp),a0
   130f4:	|         move.l 24(a0),d0
   130f8:	|         move.l d0,-(sp)
   130fa:	|         pea 1 <_start+0x1>
   130fe:	|         pea 1c76e <thumbWidth>
   13104:	|         jsr 1474e <getValueType>
   1310a:	|         lea 12(sp),sp
   1310e:	|         tst.w d0
   13110:	|     /-- bne.s 13118 <builtIn_setThumbnailSize+0x64>
   13112:	|     |   moveq #1,d0
   13114:	+-----|-- bra.w 1319c <builtIn_setThumbnailSize+0xe8>
	trimStack (&fun -> stack);
   13118:	|     \-> moveq #24,d0
   1311a:	|         add.l 60(sp),d0
   1311e:	|         move.l d0,-(sp)
   13120:	|         jsr 150d2 <trimStack>
   13126:	|         addq.l #4,sp
	if (thumbWidth < 0 || thumbHeight < 0 || (unsigned int) thumbWidth > winWidth || (unsigned int) thumbHeight > winHeight) {
   13128:	|         move.l 1c76e <thumbWidth>,d0
   1312e:	|     /-- bmi.s 1315c <builtIn_setThumbnailSize+0xa8>
   13130:	|     |   move.l 1c772 <thumbHeight>,d0
   13136:	|     +-- bmi.s 1315c <builtIn_setThumbnailSize+0xa8>
   13138:	|     |   move.l 1c76e <thumbWidth>,d0
   1313e:	|     |   move.l d0,d1
   13140:	|     |   move.l 1c7b0 <winWidth>,d0
   13146:	|     |   cmp.l d1,d0
   13148:	|     +-- bcs.s 1315c <builtIn_setThumbnailSize+0xa8>
   1314a:	|     |   move.l 1c772 <thumbHeight>,d0
   13150:	|     |   move.l d0,d1
   13152:	|     |   move.l 1c7b4 <winHeight>,d0
   13158:	|     |   cmp.l d1,d0
   1315a:	|  /--|-- bcc.s 1319a <builtIn_setThumbnailSize+0xe6>
		char buff[50];
		sprintf (buff, "%d x %d", thumbWidth, thumbHeight);
   1315c:	|  |  \-> move.l 1c772 <thumbHeight>,d1
   13162:	|  |      move.l 1c76e <thumbWidth>,d0
   13168:	|  |      move.l d1,-(sp)
   1316a:	|  |      move.l d0,-(sp)
   1316c:	|  |      pea 19b4b <line.c.05397aaf+0x10e>
   13172:	|  |      lea 14(sp),a0
   13176:	|  |      move.l a0,-(sp)
   13178:	|  |      jsr 13f58 <sprintf>
   1317e:	|  |      lea 16(sp),sp
		KPrintF ("Invalid thumbnail size", buff);
   13182:	|  |      lea 2(sp),a0
   13186:	|  |      move.l a0,-(sp)
   13188:	|  |      pea 19b53 <line.c.05397aaf+0x116>
   1318e:	|  |      jsr 17176 <KPrintF>
   13194:	|  |      addq.l #8,sp
		return BR_ERROR;
   13196:	|  |      moveq #1,d0
   13198:	+--|----- bra.s 1319c <builtIn_setThumbnailSize+0xe8>
	}
	return BR_CONTINUE;
   1319a:	|  \----> moveq #2,d0
}
   1319c:	\-------> lea 52(sp),sp
   131a0:	          rts

000131a2 <builtIn_hasFlag>:

builtIn(hasFlag)
{
   131a2:	       lea -12(sp),sp
   131a6:	       move.l d2,-(sp)
	UNUSEDALL
	int objNum, flagIndex;
	if (! getValueType(&flagIndex, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   131a8:	       movea.l 24(sp),a0
   131ac:	       move.l 24(a0),d0
   131b0:	       move.l d0,-(sp)
   131b2:	       pea 1 <_start+0x1>
   131b6:	       lea 12(sp),a0
   131ba:	       move.l a0,-(sp)
   131bc:	       jsr 1474e <getValueType>
   131c2:	       lea 12(sp),sp
   131c6:	       tst.w d0
   131c8:	   /-- bne.s 131d0 <builtIn_hasFlag+0x2e>
   131ca:	   |   moveq #1,d0
   131cc:	/--|-- bra.w 13260 <builtIn_hasFlag+0xbe>
	trimStack (&fun -> stack);
   131d0:	|  \-> moveq #24,d0
   131d2:	|      add.l 24(sp),d0
   131d6:	|      move.l d0,-(sp)
   131d8:	|      jsr 150d2 <trimStack>
   131de:	|      addq.l #4,sp
	if (! getValueType(&objNum, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   131e0:	|      movea.l 24(sp),a0
   131e4:	|      move.l 24(a0),d0
   131e8:	|      move.l d0,-(sp)
   131ea:	|      pea 7 <_start+0x7>
   131ee:	|      moveq #16,d0
   131f0:	|      add.l sp,d0
   131f2:	|      move.l d0,-(sp)
   131f4:	|      jsr 1474e <getValueType>
   131fa:	|      lea 12(sp),sp
   131fe:	|      tst.w d0
   13200:	|  /-- bne.s 13206 <builtIn_hasFlag+0x64>
   13202:	|  |   moveq #1,d0
   13204:	+--|-- bra.s 13260 <builtIn_hasFlag+0xbe>
	trimStack (&fun -> stack);
   13206:	|  \-> moveq #24,d0
   13208:	|      add.l 24(sp),d0
   1320c:	|      move.l d0,-(sp)
   1320e:	|      jsr 150d2 <trimStack>
   13214:	|      addq.l #4,sp
	struct objectType * objT = findObjectType (objNum);
   13216:	|      move.l 8(sp),d0
   1321a:	|      move.l d0,-(sp)
   1321c:	|      jsr d4b8 <findObjectType>
   13222:	|      addq.l #4,sp
   13224:	|      move.l d0,12(sp)
	if (! objT) return BR_ERROR;
   13228:	|  /-- bne.s 1322e <builtIn_hasFlag+0x8c>
   1322a:	|  |   moveq #1,d0
   1322c:	+--|-- bra.s 13260 <builtIn_hasFlag+0xbe>
	setVariable (&fun -> reg, SVT_INT, objT->flags & (1 << flagIndex));
   1322e:	|  \-> movea.l 12(sp),a0
   13232:	|      move.w 36(a0),d0
   13236:	|      moveq #0,d2
   13238:	|      move.w d0,d2
   1323a:	|      move.l 4(sp),d1
   1323e:	|      moveq #1,d0
   13240:	|      lsl.l d1,d0
   13242:	|      move.l d2,d1
   13244:	|      and.l d0,d1
   13246:	|      moveq #28,d0
   13248:	|      add.l 24(sp),d0
   1324c:	|      move.l d1,-(sp)
   1324e:	|      pea 1 <_start+0x1>
   13252:	|      move.l d0,-(sp)
   13254:	|      jsr 15040 <setVariable>
   1325a:	|      lea 12(sp),sp
	return BR_CONTINUE;
   1325e:	|      moveq #2,d0
}
   13260:	\----> move.l (sp)+,d2
   13262:	       lea 12(sp),sp
   13266:	       rts

00013268 <builtIn_snapshotGrab>:

builtIn(snapshotGrab)
{
	UNUSEDALL
	return snapshot () ? BR_CONTINUE : BR_ERROR;
   13268:	       jsr d4a6 <snapshot>
   1326e:	       tst.w d0
   13270:	/----- beq.s 13276 <builtIn_snapshotGrab+0xe>
   13272:	|      moveq #2,d0
   13274:	|  /-- bra.s 13278 <builtIn_snapshotGrab+0x10>
   13276:	\--|-> moveq #1,d0
}
   13278:	   \-> rts

0001327a <builtIn_snapshotClear>:

builtIn(snapshotClear)
{
	UNUSEDALL
	nosnapshot ();
   1327a:	jsr d352 <nosnapshot>
	return BR_CONTINUE;
   13280:	moveq #2,d0
}
   13282:	rts

00013284 <builtIn_bodgeFilenames>:

builtIn(bodgeFilenames)
{
   13284:	subq.l #4,sp
	UNUSEDALL
	BOOL lastValue = allowAnyFilename;
   13286:	move.w 1c0b8 <allowAnyFilename>,2(sp)
	allowAnyFilename = getBoolean(&(fun -> stack -> thisVar));
   1328e:	movea.l 12(sp),a0
   13292:	move.l 24(a0),d0
   13296:	move.l d0,-(sp)
   13298:	jsr 14c8e <getBoolean>
   1329e:	addq.l #4,sp
   132a0:	move.w d0,1c0b8 <allowAnyFilename>
	trimStack (&fun -> stack);
   132a6:	moveq #24,d0
   132a8:	add.l 12(sp),d0
   132ac:	move.l d0,-(sp)
   132ae:	jsr 150d2 <trimStack>
   132b4:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, lastValue);
   132b6:	movea.w 2(sp),a0
   132ba:	moveq #28,d0
   132bc:	add.l 12(sp),d0
   132c0:	move.l a0,-(sp)
   132c2:	pea 1 <_start+0x1>
   132c6:	move.l d0,-(sp)
   132c8:	jsr 15040 <setVariable>
   132ce:	lea 12(sp),sp
	return BR_CONTINUE;
   132d2:	moveq #2,d0
}
   132d4:	addq.l #4,sp
   132d6:	rts

000132d8 <builtIn__rem_registryGetString>:

// Deprecated - does nothing.
builtIn(_rem_registryGetString)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   132d8:	moveq #24,d0
   132da:	add.l 8(sp),d0
   132de:	move.l d0,-(sp)
   132e0:	jsr 150d2 <trimStack>
   132e6:	addq.l #4,sp
	trimStack (&fun -> stack);
   132e8:	moveq #24,d0
   132ea:	add.l 8(sp),d0
   132ee:	move.l d0,-(sp)
   132f0:	jsr 150d2 <trimStack>
   132f6:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 0);
   132f8:	moveq #28,d0
   132fa:	add.l 8(sp),d0
   132fe:	clr.l -(sp)
   13300:	pea 1 <_start+0x1>
   13304:	move.l d0,-(sp)
   13306:	jsr 15040 <setVariable>
   1330c:	lea 12(sp),sp

	return BR_CONTINUE;
   13310:	moveq #2,d0
}
   13312:	rts

00013314 <builtIn_quitWithFatalError>:

builtIn(quitWithFatalError)
{
   13314:	subq.l #4,sp
	UNUSEDALL
	char * mess = getTextFromAnyVar(&(fun -> stack -> thisVar));
   13316:	movea.l 12(sp),a0
   1331a:	move.l 24(a0),d0
   1331e:	move.l d0,-(sp)
   13320:	jsr 14d24 <getTextFromAnyVar>
   13326:	addq.l #4,sp
   13328:	move.l d0,(sp)
	trimStack (&fun -> stack);
   1332a:	moveq #24,d0
   1332c:	add.l 12(sp),d0
   13330:	move.l d0,-(sp)
   13332:	jsr 150d2 <trimStack>
   13338:	addq.l #4,sp
	KPrintF (mess);
   1333a:	move.l (sp),-(sp)
   1333c:	jsr 17176 <KPrintF>
   13342:	addq.l #4,sp
	return BR_ERROR;
   13344:	moveq #1,d0
}
   13346:	addq.l #4,sp
   13348:	rts

0001334a <builtIn__rem_setCharacterAA>:

builtIn(_rem_setCharacterAA)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   1334a:	moveq #24,d0
   1334c:	add.l 8(sp),d0
   13350:	move.l d0,-(sp)
   13352:	jsr 150d2 <trimStack>
   13358:	addq.l #4,sp
	trimStack (&fun -> stack);
   1335a:	moveq #24,d0
   1335c:	add.l 8(sp),d0
   13360:	move.l d0,-(sp)
   13362:	jsr 150d2 <trimStack>
   13368:	addq.l #4,sp
	trimStack (&fun -> stack);
   1336a:	moveq #24,d0
   1336c:	add.l 8(sp),d0
   13370:	move.l d0,-(sp)
   13372:	jsr 150d2 <trimStack>
   13378:	addq.l #4,sp
	trimStack (&fun -> stack);
   1337a:	moveq #24,d0
   1337c:	add.l 8(sp),d0
   13380:	move.l d0,-(sp)
   13382:	jsr 150d2 <trimStack>
   13388:	addq.l #4,sp

	return BR_CONTINUE;
   1338a:	moveq #2,d0
}
   1338c:	rts

0001338e <builtIn__rem_setMaximumAA>:

builtIn(_rem_setMaximumAA)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   1338e:	moveq #24,d0
   13390:	add.l 8(sp),d0
   13394:	move.l d0,-(sp)
   13396:	jsr 150d2 <trimStack>
   1339c:	addq.l #4,sp
	trimStack (&fun -> stack);
   1339e:	moveq #24,d0
   133a0:	add.l 8(sp),d0
   133a4:	move.l d0,-(sp)
   133a6:	jsr 150d2 <trimStack>
   133ac:	addq.l #4,sp
	trimStack (&fun -> stack);
   133ae:	moveq #24,d0
   133b0:	add.l 8(sp),d0
   133b4:	move.l d0,-(sp)
   133b6:	jsr 150d2 <trimStack>
   133bc:	addq.l #4,sp

	return BR_CONTINUE;
   133be:	moveq #2,d0

}
   133c0:	rts

000133c2 <builtIn_setBackgroundEffect>:

builtIn(setBackgroundEffect)
{
   133c2:	subq.l #4,sp
	UNUSEDALL
	BOOL done = TRUE;
   133c4:	move.w #1,2(sp)
	//BOOL done = blur_createSettings(numParams, fun->stack); Amiga Todo: Amigize?
	setVariable (&fun -> reg, SVT_INT, done ? 1 : 0);
   133ca:	sne d0
   133cc:	neg.b d0
   133ce:	moveq #0,d1
   133d0:	move.b d0,d1
   133d2:	moveq #28,d0
   133d4:	add.l 12(sp),d0
   133d8:	move.l d1,-(sp)
   133da:	pea 1 <_start+0x1>
   133de:	move.l d0,-(sp)
   133e0:	jsr 15040 <setVariable>
   133e6:	lea 12(sp),sp
	return BR_CONTINUE;
   133ea:	moveq #2,d0
}
   133ec:	addq.l #4,sp
   133ee:	rts

000133f0 <builtIn_doBackgroundEffect>:

builtIn(doBackgroundEffect)
{
   133f0:	subq.l #4,sp
	UNUSEDALL
	//BOOL done = blurScreen ();
	BOOL done = TRUE;
   133f2:	move.w #1,2(sp)
	KPrintF("doBackgroundEffect: Function not implemented on Amiga");
   133f8:	pea 19b6a <line.c.05397aaf+0x12d>
   133fe:	jsr 17176 <KPrintF>
   13404:	addq.l #4,sp
	//Amiga Todo: Amigize this
	setVariable (&fun -> reg, SVT_INT, done ? 1 : 0);
   13406:	tst.w 2(sp)
   1340a:	sne d0
   1340c:	neg.b d0
   1340e:	moveq #0,d1
   13410:	move.b d0,d1
   13412:	moveq #28,d0
   13414:	add.l 12(sp),d0
   13418:	move.l d1,-(sp)
   1341a:	pea 1 <_start+0x1>
   1341e:	move.l d0,-(sp)
   13420:	jsr 15040 <setVariable>
   13426:	lea 12(sp),sp
	return BR_CONTINUE;
   1342a:	moveq #2,d0
}
   1342c:	addq.l #4,sp
   1342e:	rts

00013430 <callBuiltIn>:
#undef FUNC

#define NUM_FUNCS			(sizeof (builtInFunctionArray) / sizeof (builtInFunctionArray[0]))


enum builtReturn callBuiltIn (int whichFunc, int numParams, struct loadedFunction * fun) {
   13430:	             lea -100(sp),sp
   // fprintf (stderr, "Calling function %d: %s\n", whichFunc, builtInFunctionNames[whichFunc]);    fflush (stderr);

	if ((unsigned int)whichFunc < NUM_FUNCS) {
   13434:	             move.l 104(sp),d0
   13438:	             cmpi.l #166,d0
   1343e:	/----------- bhi.w 13520 <callBuiltIn+0xf0>
		if (paramNum[whichFunc] != -1) {
   13442:	|            move.l 104(sp),d0
   13446:	|            add.l d0,d0
   13448:	|            movea.l d0,a1
   1344a:	|            adda.l d0,a1
   1344c:	|            lea 1c1fe <paramNum>,a0
   13452:	|            move.l (0,a1,a0.l),d0
   13456:	|            moveq #-1,d1
   13458:	|            cmp.l d0,d1
   1345a:	|  /-------- beq.w 134e8 <callBuiltIn+0xb8>
			if (paramNum[whichFunc] != numParams) {
   1345e:	|  |         move.l 104(sp),d0
   13462:	|  |         add.l d0,d0
   13464:	|  |         movea.l d0,a1
   13466:	|  |         adda.l d0,a1
   13468:	|  |         lea 1c1fe <paramNum>,a0
   1346e:	|  |         move.l (0,a1,a0.l),d0
   13472:	|  |         cmp.l 108(sp),d0
   13476:	|  +-------- beq.s 134e8 <callBuiltIn+0xb8>
				char buff[100];
				sprintf (buff, "Built in function must have %i parameter%s",
						 paramNum[whichFunc],
						 (paramNum[whichFunc] == 1) ? "" : "s");
   13478:	|  |         move.l 104(sp),d0
   1347c:	|  |         add.l d0,d0
   1347e:	|  |         movea.l d0,a1
   13480:	|  |         adda.l d0,a1
   13482:	|  |         lea 1c1fe <paramNum>,a0
   13488:	|  |         move.l (0,a1,a0.l),d0
				sprintf (buff, "Built in function must have %i parameter%s",
   1348c:	|  |         moveq #1,d1
   1348e:	|  |         cmp.l d0,d1
   13490:	|  |  /----- bne.s 1349a <callBuiltIn+0x6a>
   13492:	|  |  |      move.l #100550,d0
   13498:	|  |  |  /-- bra.s 134a0 <callBuiltIn+0x70>
   1349a:	|  |  \--|-> move.l #105376,d0
   134a0:	|  |     \-> move.l 104(sp),d1
   134a4:	|  |         add.l d1,d1
   134a6:	|  |         movea.l d1,a1
   134a8:	|  |         adda.l d1,a1
   134aa:	|  |         lea 1c1fe <paramNum>,a0
   134b0:	|  |         move.l (0,a1,a0.l),d1
   134b4:	|  |         move.l d0,-(sp)
   134b6:	|  |         move.l d1,-(sp)
   134b8:	|  |         pea 19ba2 <line.c.05397aaf+0x165>
   134be:	|  |         lea 12(sp),a0
   134c2:	|  |         move.l a0,-(sp)
   134c4:	|  |         jsr 13f58 <sprintf>
   134ca:	|  |         lea 16(sp),sp

				KPrintF(copyString (buff));
   134ce:	|  |         movea.l sp,a0
   134d0:	|  |         move.l a0,-(sp)
   134d2:	|  |         jsr b8 <copyString>
   134d8:	|  |         addq.l #4,sp
   134da:	|  |         move.l d0,-(sp)
   134dc:	|  |         jsr 17176 <KPrintF>
   134e2:	|  |         addq.l #4,sp
				return BR_ERROR;
   134e4:	|  |         moveq #1,d0
   134e6:	|  |     /-- bra.s 13530 <callBuiltIn+0x100>
			}
		}

		if (builtInFunctionArray[whichFunc].func)
   134e8:	|  \-----|-> move.l 104(sp),d0
   134ec:	|        |   add.l d0,d0
   134ee:	|        |   movea.l d0,a1
   134f0:	|        |   adda.l d0,a1
   134f2:	|        |   lea 1c49a <builtInFunctionArray>,a0
   134f8:	|        |   move.l (0,a1,a0.l),d0
   134fc:	+--------|-- beq.s 13520 <callBuiltIn+0xf0>
		{
			//fprintf (stderr, "Calling %i: %s\n", whichFunc, builtInFunctionNames[whichFunc]);
			return builtInFunctionArray[whichFunc].func (numParams, fun);
   134fe:	|        |   move.l 104(sp),d0
   13502:	|        |   add.l d0,d0
   13504:	|        |   movea.l d0,a1
   13506:	|        |   adda.l d0,a1
   13508:	|        |   lea 1c49a <builtInFunctionArray>,a0
   1350e:	|        |   movea.l (0,a1,a0.l),a0
   13512:	|        |   move.l 112(sp),-(sp)
   13516:	|        |   move.l 112(sp),-(sp)
   1351a:	|        |   jsr (a0)
   1351c:	|        |   addq.l #8,sp
   1351e:	|        +-- bra.s 13530 <callBuiltIn+0x100>
		}
	}

	KPrintF("Unknown / unimplemented built-in function.");
   13520:	\--------|-> pea 19bcd <line.c.05397aaf+0x190>
   13526:	         |   jsr 17176 <KPrintF>
   1352c:	         |   addq.l #4,sp
	return BR_ERROR;
   1352e:	         |   moveq #1,d0
}
   13530:	         \-> lea 100(sp),sp
   13534:	             rts

00013536 <getLanguageForFileB>:
int *languageTable;
char **languageName;
struct settingsStruct gameSettings;

int getLanguageForFileB ()
{
   13536:	          subq.l #8,sp
	int indexNum = -1;
   13538:	          moveq #-1,d0
   1353a:	          move.l d0,4(sp)

	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   1353e:	          clr.l (sp)
   13540:	   /----- bra.s 13566 <getLanguageForFileB+0x30>
		if ((unsigned int) languageTable[i] == gameSettings.languageID) indexNum = i;
   13542:	/--|----> move.l 1c930 <languageTable>,d1
   13548:	|  |      move.l (sp),d0
   1354a:	|  |      add.l d0,d0
   1354c:	|  |      add.l d0,d0
   1354e:	|  |      movea.l d1,a0
   13550:	|  |      adda.l d0,a0
   13552:	|  |      move.l (a0),d0
   13554:	|  |      move.l d0,d1
   13556:	|  |      move.l 1c938 <gameSettings>,d0
   1355c:	|  |      cmp.l d1,d0
   1355e:	|  |  /-- bne.s 13564 <getLanguageForFileB+0x2e>
   13560:	|  |  |   move.l (sp),4(sp)
	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   13564:	|  |  \-> addq.l #1,(sp)
   13566:	|  \----> move.l 1c93c <gameSettings+0x4>,d0
   1356c:	|         cmp.l (sp),d0
   1356e:	\-------- bcc.s 13542 <getLanguageForFileB+0xc>
	}

	return indexNum;
   13570:	          move.l 4(sp),d0
}
   13574:	          addq.l #8,sp
   13576:	          rts

00013578 <getPrefsFilename>:

char * getPrefsFilename (char * filename) {
   13578:	          lea -20(sp),sp
   1357c:	          move.l a6,-(sp)
	// Yes, this trashes the original string, but
	// we also free it at the end (warning!)...

	int n, i;

	n = strlen (filename);
   1357e:	          move.l 28(sp),-(sp)
   13582:	          jsr 13c3a <strlen>
   13588:	          addq.l #4,sp
   1358a:	          move.l d0,12(sp)


	if (n > 4 && filename[n-4] == '.') {
   1358e:	          moveq #4,d0
   13590:	          cmp.l 12(sp),d0
   13594:	      /-- bge.s 135b8 <getPrefsFilename+0x40>
   13596:	      |   move.l 12(sp),d0
   1359a:	      |   subq.l #4,d0
   1359c:	      |   movea.l 28(sp),a0
   135a0:	      |   adda.l d0,a0
   135a2:	      |   move.b (a0),d0
   135a4:	      |   cmpi.b #46,d0
   135a8:	      +-- bne.s 135b8 <getPrefsFilename+0x40>
		filename[n-4] = 0;
   135aa:	      |   move.l 12(sp),d0
   135ae:	      |   subq.l #4,d0
   135b0:	      |   movea.l 28(sp),a0
   135b4:	      |   adda.l d0,a0
   135b6:	      |   clr.b (a0)
	}

	char * f = filename;
   135b8:	      \-> move.l 28(sp),16(sp)
	for (i = 0; i<n; i++) {
   135be:	          clr.l 20(sp)
   135c2:	   /----- bra.s 135ea <getPrefsFilename+0x72>
		if (filename[i] == '/') f = filename + i + 1;
   135c4:	/--|----> move.l 20(sp),d0
   135c8:	|  |      movea.l 28(sp),a0
   135cc:	|  |      adda.l d0,a0
   135ce:	|  |      move.b (a0),d0
   135d0:	|  |      cmpi.b #47,d0
   135d4:	|  |  /-- bne.s 135e6 <getPrefsFilename+0x6e>
   135d6:	|  |  |   move.l 20(sp),d0
   135da:	|  |  |   addq.l #1,d0
   135dc:	|  |  |   move.l 28(sp),d1
   135e0:	|  |  |   add.l d0,d1
   135e2:	|  |  |   move.l d1,16(sp)
	for (i = 0; i<n; i++) {
   135e6:	|  |  \-> addq.l #1,20(sp)
   135ea:	|  \----> move.l 20(sp),d0
   135ee:	|         cmp.l 12(sp),d0
   135f2:	\-------- blt.s 135c4 <getPrefsFilename+0x4c>
	}

	char * joined = joinStrings (f, ".ini");
   135f4:	          pea 19bf8 <line.c.05397aaf+0x1bb>
   135fa:	          move.l 20(sp),-(sp)
   135fe:	          jsr 13c7a <joinStrings>
   13604:	          addq.l #8,sp
   13606:	          move.l d0,8(sp)

	FreeVec(filename);
   1360a:	          move.l 28(sp),4(sp)
   13610:	          move.l 1c85c <SysBase>,d0
   13616:	          movea.l d0,a6
   13618:	          movea.l 4(sp),a1
   1361c:	          jsr -690(a6)
	filename = NULL;
   13620:	          clr.l 28(sp)
	return joined;
   13624:	          move.l 8(sp),d0
}
   13628:	          movea.l (sp)+,a6
   1362a:	          lea 20(sp),sp
   1362e:	          rts

00013630 <makeLanguageTable>:

void makeLanguageTable (BPTR table)
{
   13630:	             lea -28(sp),sp
   13634:	             move.l a6,-(sp)
   13636:	             move.l a2,-(sp)
	languageTable = AllocVec(gameSettings.numLanguages + 1,MEMF_ANY);
   13638:	             move.l 1c93c <gameSettings+0x4>,d0
   1363e:	             move.l d0,d1
   13640:	             addq.l #1,d1
   13642:	             move.l d1,28(sp)
   13646:	             clr.l 24(sp)
   1364a:	             move.l 1c85c <SysBase>,d0
   13650:	             movea.l d0,a6
   13652:	             move.l 28(sp),d0
   13656:	             move.l 24(sp),d1
   1365a:	             jsr -684(a6)
   1365e:	             move.l d0,20(sp)
   13662:	             move.l 20(sp),d0
   13666:	             move.l d0,1c930 <languageTable>
    if( languageTable == 0) {
   1366c:	             move.l 1c930 <languageTable>,d0
   13672:	         /-- bne.s 13682 <makeLanguageTable+0x52>
        KPrintF("makeLanguageTable: Cannot Alloc Mem for languageTable");
   13674:	         |   pea 19bfd <line.c.05397aaf+0x1c0>
   1367a:	         |   jsr 17176 <KPrintF>
   13680:	         |   addq.l #4,sp
    }

	languageName = AllocVec(gameSettings.numLanguages + 1,MEMF_ANY);
   13682:	         \-> move.l 1c93c <gameSettings+0x4>,d0
   13688:	             move.l d0,d1
   1368a:	             addq.l #1,d1
   1368c:	             move.l d1,16(sp)
   13690:	             clr.l 12(sp)
   13694:	             move.l 1c85c <SysBase>,d0
   1369a:	             movea.l d0,a6
   1369c:	             move.l 16(sp),d0
   136a0:	             move.l 12(sp),d1
   136a4:	             jsr -684(a6)
   136a8:	             move.l d0,8(sp)
   136ac:	             move.l 8(sp),d0
   136b0:	             move.l d0,1c934 <languageName>
	if( languageName == 0) {
   136b6:	             move.l 1c934 <languageName>,d0
   136bc:	         /-- bne.s 136cc <makeLanguageTable+0x9c>
        KPrintF("makeLanguageName: Cannot Alloc Mem for languageName");
   136be:	         |   pea 19c33 <line.c.05397aaf+0x1f6>
   136c4:	         |   jsr 17176 <KPrintF>
   136ca:	         |   addq.l #4,sp
    }

	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   136cc:	         \-> clr.l 32(sp)
   136d0:	   /-------- bra.s 13748 <makeLanguageTable+0x118>
		languageTable[i] = i ? get2bytes (table) : 0;
   136d2:	/--|-------> tst.l 32(sp)
   136d6:	|  |  /----- beq.s 136e6 <makeLanguageTable+0xb6>
   136d8:	|  |  |      move.l 40(sp),-(sp)
   136dc:	|  |  |      jsr 6bc <get2bytes>
   136e2:	|  |  |      addq.l #4,sp
   136e4:	|  |  |  /-- bra.s 136e8 <makeLanguageTable+0xb8>
   136e6:	|  |  \--|-> moveq #0,d0
   136e8:	|  |     \-> movea.l 1c930 <languageTable>,a0
   136ee:	|  |         move.l 32(sp),d1
   136f2:	|  |         add.l d1,d1
   136f4:	|  |         add.l d1,d1
   136f6:	|  |         adda.l d1,a0
   136f8:	|  |         move.l d0,(a0)
		languageName[i] = 0;
   136fa:	|  |         move.l 1c934 <languageName>,d1
   13700:	|  |         move.l 32(sp),d0
   13704:	|  |         add.l d0,d0
   13706:	|  |         add.l d0,d0
   13708:	|  |         movea.l d1,a0
   1370a:	|  |         adda.l d0,a0
   1370c:	|  |         clr.l (a0)
		if (gameVersion >= VERSION(2,0)) {
   1370e:	|  |         move.l 1c806 <gameVersion>,d0
   13714:	|  |         cmpi.l #511,d0
   1371a:	|  |     /-- ble.s 13744 <makeLanguageTable+0x114>
			if (gameSettings.numLanguages)
   1371c:	|  |     |   move.l 1c93c <gameSettings+0x4>,d0
   13722:	|  |     +-- beq.s 13744 <makeLanguageTable+0x114>
				languageName[i] = readString (table);
   13724:	|  |     |   move.l 1c934 <languageName>,d1
   1372a:	|  |     |   move.l 32(sp),d0
   1372e:	|  |     |   add.l d0,d0
   13730:	|  |     |   add.l d0,d0
   13732:	|  |     |   movea.l d1,a2
   13734:	|  |     |   adda.l d0,a2
   13736:	|  |     |   move.l 40(sp),-(sp)
   1373a:	|  |     |   jsr b02 <readString>
   13740:	|  |     |   addq.l #4,sp
   13742:	|  |     |   move.l d0,(a2)
	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   13744:	|  |     \-> addq.l #1,32(sp)
   13748:	|  \-------> move.l 1c93c <gameSettings+0x4>,d0
   1374e:	|            cmp.l 32(sp),d0
   13752:	\----------- bcc.w 136d2 <makeLanguageTable+0xa2>
		}
	}
}
   13756:	             nop
   13758:	             nop
   1375a:	             movea.l (sp)+,a2
   1375c:	             movea.l (sp)+,a6
   1375e:	             lea 28(sp),sp
   13762:	             rts

00013764 <readIniFile>:

void readIniFile (char * filename) {
   13764:	                      lea -564(sp),sp
   13768:	                      move.l a6,-(sp)
   1376a:	                      move.l d2,-(sp)
	char * langName = getPrefsFilename (copyString (filename));
   1376c:	                      move.l 576(sp),-(sp)
   13770:	                      jsr b8 <copyString>
   13776:	                      addq.l #4,sp
   13778:	                      move.l d0,-(sp)
   1377a:	                      jsr 13578 <getPrefsFilename>
   13780:	                      addq.l #4,sp
   13782:	                      move.l d0,562(sp)

	BPTR fp = Open(langName,MODE_OLDFILE);	
   13786:	                      move.l 562(sp),558(sp)
   1378c:	                      move.l #1005,554(sp)
   13794:	                      move.l 1c864 <DOSBase>,d0
   1379a:	                      movea.l d0,a6
   1379c:	                      move.l 558(sp),d1
   137a0:	                      move.l 554(sp),d2
   137a4:	                      jsr -30(a6)
   137a8:	                      move.l d0,550(sp)
   137ac:	                      move.l 550(sp),d0
   137b0:	                      move.l d0,546(sp)

	gameSettings.languageID = 0;
   137b4:	                      clr.l 1c938 <gameSettings>
	gameSettings.userFullScreen = TRUE; //Always fullscreen on AMIGA
   137ba:	                      move.w #1,1c940 <gameSettings+0x8>
	gameSettings.refreshRate = 0;
   137c2:	                      clr.l 1c942 <gameSettings+0xa>
	gameSettings.antiAlias = 1;
   137c8:	                      moveq #1,d0
   137ca:	                      move.l d0,1c946 <gameSettings+0xe>
	gameSettings.fixedPixels = FALSE;
   137d0:	                      clr.w 1c94a <gameSettings+0x12>
	gameSettings.noStartWindow = FALSE;
   137d6:	                      clr.w 1c94c <gameSettings+0x14>
	gameSettings.debugMode = FALSE;
   137dc:	                      clr.w 1c94e <gameSettings+0x16>

	FreeVec(langName);
   137e2:	                      move.l 562(sp),542(sp)
   137e8:	                      move.l 1c85c <SysBase>,d0
   137ee:	                      movea.l d0,a6
   137f0:	                      movea.l 542(sp),a1
   137f4:	                      jsr -690(a6)
	langName = NULL;
   137f8:	                      clr.l 562(sp)

	if (fp) {
   137fc:	                      tst.l 546(sp)
   13800:	/-------------------- beq.w 13ade <readIniFile+0x37a>
		char lineSoFar[257] = "";
   13804:	|                     move.l sp,d0
   13806:	|                     addi.l #265,d0
   1380c:	|                     move.l #257,d1
   13812:	|                     move.l d1,-(sp)
   13814:	|                     clr.l -(sp)
   13816:	|                     move.l d0,-(sp)
   13818:	|                     jsr 170fa <memset>
   1381e:	|                     lea 12(sp),sp
		char secondSoFar[257] = "";
   13822:	|                     move.l sp,d0
   13824:	|                     addq.l #8,d0
   13826:	|                     move.l #257,d1
   1382c:	|                     move.l d1,-(sp)
   1382e:	|                     clr.l -(sp)
   13830:	|                     move.l d0,-(sp)
   13832:	|                     jsr 170fa <memset>
   13838:	|                     lea 12(sp),sp
		unsigned char here = 0;
   1383c:	|                     clr.b 571(sp)
		char readChar = ' ';
   13840:	|                     move.b #32,570(sp)
		BOOL keepGoing = TRUE;
   13846:	|                     move.w #1,568(sp)
		BOOL doingSecond = FALSE;
   1384c:	|                     clr.w 566(sp)
		LONG tmp = 0;
   13850:	|                     clr.l 538(sp)

		do {

			tmp = FGetC (fp);
   13854:	|  /----------------> move.l 546(sp),534(sp)
   1385a:	|  |                  move.l 1c864 <DOSBase>,d0
   13860:	|  |                  movea.l d0,a6
   13862:	|  |                  move.l 534(sp),d1
   13866:	|  |                  jsr -306(a6)
   1386a:	|  |                  move.l d0,530(sp)
   1386e:	|  |                  move.l 530(sp),d0
   13872:	|  |                  move.l d0,538(sp)
			if (tmp == - 1) {
   13876:	|  |                  moveq #-1,d1
   13878:	|  |                  cmp.l 538(sp),d1
   1387c:	|  |           /----- bne.s 1388a <readIniFile+0x126>
				readChar = '\n';
   1387e:	|  |           |      move.b #10,570(sp)
				keepGoing = FALSE;
   13884:	|  |           |      clr.w 568(sp)
   13888:	|  |           |  /-- bra.s 13890 <readIniFile+0x12c>
			} else {
				readChar = (char) tmp;
   1388a:	|  |           \--|-> move.b 541(sp),570(sp)
			}

			switch (readChar) {
   13890:	|  |              \-> move.b 570(sp),d0
   13894:	|  |                  ext.w d0
   13896:	|  |                  movea.w d0,a0
   13898:	|  |                  moveq #61,d0
   1389a:	|  |                  cmp.l a0,d0
   1389c:	|  |     /----------- beq.w 13a46 <readIniFile+0x2e2>
   138a0:	|  |     |            moveq #61,d1
   138a2:	|  |     |            cmp.l a0,d1
   138a4:	|  |  /--|----------- blt.w 13a52 <readIniFile+0x2ee>
   138a8:	|  |  |  |            moveq #10,d0
   138aa:	|  |  |  |            cmp.l a0,d0
   138ac:	|  |  |  |        /-- beq.s 138b6 <readIniFile+0x152>
   138ae:	|  |  |  |        |   moveq #13,d1
   138b0:	|  |  |  |        |   cmp.l a0,d1
   138b2:	|  |  +--|--------|-- bne.w 13a52 <readIniFile+0x2ee>
				case '\n':
				case '\r':
				if (doingSecond) {
   138b6:	|  |  |  |        \-> tst.w 566(sp)
   138ba:	|  |  |  |     /----- beq.w 13a34 <readIniFile+0x2d0>
					if (strcmp (lineSoFar, "LANGUAGE") == 0)
   138be:	|  |  |  |     |      pea 19c67 <line.c.05397aaf+0x22a>
   138c4:	|  |  |  |     |      move.l sp,d0
   138c6:	|  |  |  |     |      addi.l #269,d0
   138cc:	|  |  |  |     |      move.l d0,-(sp)
   138ce:	|  |  |  |     |      jsr 13bfa <strcmp>
   138d4:	|  |  |  |     |      addq.l #8,sp
   138d6:	|  |  |  |     |      tst.l d0
   138d8:	|  |  |  |     |  /-- bne.s 138f2 <readIniFile+0x18e>
					{
						gameSettings.languageID = stringToInt (secondSoFar);
   138da:	|  |  |  |     |  |   move.l sp,d0
   138dc:	|  |  |  |     |  |   addq.l #8,d0
   138de:	|  |  |  |     |  |   move.l d0,-(sp)
   138e0:	|  |  |  |     |  |   jsr 13aea <stringToInt>
   138e6:	|  |  |  |     |  |   addq.l #4,sp
   138e8:	|  |  |  |     |  |   move.l d0,1c938 <gameSettings>
   138ee:	|  |  |  |     +--|-- bra.w 13a34 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "WINDOW") == 0)
   138f2:	|  |  |  |     |  \-> pea 19c70 <line.c.05397aaf+0x233>
   138f8:	|  |  |  |     |      move.l sp,d0
   138fa:	|  |  |  |     |      addi.l #269,d0
   13900:	|  |  |  |     |      move.l d0,-(sp)
   13902:	|  |  |  |     |      jsr 13bfa <strcmp>
   13908:	|  |  |  |     |      addq.l #8,sp
   1390a:	|  |  |  |     |      tst.l d0
   1390c:	|  |  |  |     |  /-- bne.s 13932 <readIniFile+0x1ce>
					{
						gameSettings.userFullScreen = ! stringToInt (secondSoFar);
   1390e:	|  |  |  |     |  |   move.l sp,d0
   13910:	|  |  |  |     |  |   addq.l #8,d0
   13912:	|  |  |  |     |  |   move.l d0,-(sp)
   13914:	|  |  |  |     |  |   jsr 13aea <stringToInt>
   1391a:	|  |  |  |     |  |   addq.l #4,sp
   1391c:	|  |  |  |     |  |   tst.l d0
   1391e:	|  |  |  |     |  |   seq d0
   13920:	|  |  |  |     |  |   neg.b d0
   13922:	|  |  |  |     |  |   move.b d0,d0
   13924:	|  |  |  |     |  |   andi.w #255,d0
   13928:	|  |  |  |     |  |   move.w d0,1c940 <gameSettings+0x8>
   1392e:	|  |  |  |     +--|-- bra.w 13a34 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "REFRESH") == 0)
   13932:	|  |  |  |     |  \-> pea 19c77 <line.c.05397aaf+0x23a>
   13938:	|  |  |  |     |      move.l sp,d0
   1393a:	|  |  |  |     |      addi.l #269,d0
   13940:	|  |  |  |     |      move.l d0,-(sp)
   13942:	|  |  |  |     |      jsr 13bfa <strcmp>
   13948:	|  |  |  |     |      addq.l #8,sp
   1394a:	|  |  |  |     |      tst.l d0
   1394c:	|  |  |  |     |  /-- bne.s 13966 <readIniFile+0x202>
					{
						gameSettings.refreshRate = stringToInt (secondSoFar);
   1394e:	|  |  |  |     |  |   move.l sp,d0
   13950:	|  |  |  |     |  |   addq.l #8,d0
   13952:	|  |  |  |     |  |   move.l d0,-(sp)
   13954:	|  |  |  |     |  |   jsr 13aea <stringToInt>
   1395a:	|  |  |  |     |  |   addq.l #4,sp
   1395c:	|  |  |  |     |  |   move.l d0,1c942 <gameSettings+0xa>
   13962:	|  |  |  |     +--|-- bra.w 13a34 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "ANTIALIAS") == 0)
   13966:	|  |  |  |     |  \-> pea 19c7f <line.c.05397aaf+0x242>
   1396c:	|  |  |  |     |      move.l sp,d0
   1396e:	|  |  |  |     |      addi.l #269,d0
   13974:	|  |  |  |     |      move.l d0,-(sp)
   13976:	|  |  |  |     |      jsr 13bfa <strcmp>
   1397c:	|  |  |  |     |      addq.l #8,sp
   1397e:	|  |  |  |     |      tst.l d0
   13980:	|  |  |  |     |  /-- bne.s 1399a <readIniFile+0x236>
					{
						gameSettings.antiAlias = stringToInt (secondSoFar);
   13982:	|  |  |  |     |  |   move.l sp,d0
   13984:	|  |  |  |     |  |   addq.l #8,d0
   13986:	|  |  |  |     |  |   move.l d0,-(sp)
   13988:	|  |  |  |     |  |   jsr 13aea <stringToInt>
   1398e:	|  |  |  |     |  |   addq.l #4,sp
   13990:	|  |  |  |     |  |   move.l d0,1c946 <gameSettings+0xe>
   13996:	|  |  |  |     +--|-- bra.w 13a34 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "FIXEDPIXELS") == 0)
   1399a:	|  |  |  |     |  \-> pea 19c89 <line.c.05397aaf+0x24c>
   139a0:	|  |  |  |     |      move.l sp,d0
   139a2:	|  |  |  |     |      addi.l #269,d0
   139a8:	|  |  |  |     |      move.l d0,-(sp)
   139aa:	|  |  |  |     |      jsr 13bfa <strcmp>
   139b0:	|  |  |  |     |      addq.l #8,sp
   139b2:	|  |  |  |     |      tst.l d0
   139b4:	|  |  |  |     |  /-- bne.s 139ce <readIniFile+0x26a>
					{
						gameSettings.fixedPixels = stringToInt (secondSoFar);
   139b6:	|  |  |  |     |  |   move.l sp,d0
   139b8:	|  |  |  |     |  |   addq.l #8,d0
   139ba:	|  |  |  |     |  |   move.l d0,-(sp)
   139bc:	|  |  |  |     |  |   jsr 13aea <stringToInt>
   139c2:	|  |  |  |     |  |   addq.l #4,sp
   139c4:	|  |  |  |     |  |   move.l d0,d0
   139c6:	|  |  |  |     |  |   move.w d0,1c94a <gameSettings+0x12>
   139cc:	|  |  |  |     +--|-- bra.s 13a34 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "NOSTARTWINDOW") == 0)
   139ce:	|  |  |  |     |  \-> pea 19c95 <line.c.05397aaf+0x258>
   139d4:	|  |  |  |     |      move.l sp,d0
   139d6:	|  |  |  |     |      addi.l #269,d0
   139dc:	|  |  |  |     |      move.l d0,-(sp)
   139de:	|  |  |  |     |      jsr 13bfa <strcmp>
   139e4:	|  |  |  |     |      addq.l #8,sp
   139e6:	|  |  |  |     |      tst.l d0
   139e8:	|  |  |  |     |  /-- bne.s 13a02 <readIniFile+0x29e>
					{
						gameSettings.noStartWindow = stringToInt (secondSoFar);
   139ea:	|  |  |  |     |  |   move.l sp,d0
   139ec:	|  |  |  |     |  |   addq.l #8,d0
   139ee:	|  |  |  |     |  |   move.l d0,-(sp)
   139f0:	|  |  |  |     |  |   jsr 13aea <stringToInt>
   139f6:	|  |  |  |     |  |   addq.l #4,sp
   139f8:	|  |  |  |     |  |   move.l d0,d0
   139fa:	|  |  |  |     |  |   move.w d0,1c94c <gameSettings+0x14>
   13a00:	|  |  |  |     +--|-- bra.s 13a34 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "DEBUGMODE") == 0)
   13a02:	|  |  |  |     |  \-> pea 19ca3 <graphics.c.1c13408a+0xa>
   13a08:	|  |  |  |     |      move.l sp,d0
   13a0a:	|  |  |  |     |      addi.l #269,d0
   13a10:	|  |  |  |     |      move.l d0,-(sp)
   13a12:	|  |  |  |     |      jsr 13bfa <strcmp>
   13a18:	|  |  |  |     |      addq.l #8,sp
   13a1a:	|  |  |  |     |      tst.l d0
   13a1c:	|  |  |  |     +----- bne.s 13a34 <readIniFile+0x2d0>
					{
						gameSettings.debugMode = stringToInt (secondSoFar);
   13a1e:	|  |  |  |     |      move.l sp,d0
   13a20:	|  |  |  |     |      addq.l #8,d0
   13a22:	|  |  |  |     |      move.l d0,-(sp)
   13a24:	|  |  |  |     |      jsr 13aea <stringToInt>
   13a2a:	|  |  |  |     |      addq.l #4,sp
   13a2c:	|  |  |  |     |      move.l d0,d0
   13a2e:	|  |  |  |     |      move.w d0,1c94e <gameSettings+0x16>
					}
				}
				here = 0;
   13a34:	|  |  |  |     \----> clr.b 571(sp)
				doingSecond = FALSE;
   13a38:	|  |  |  |            clr.w 566(sp)
				lineSoFar[0] = 0;
   13a3c:	|  |  |  |            clr.b 265(sp)
				secondSoFar[0] = 0;
   13a40:	|  |  |  |            clr.b 8(sp)
				break;
   13a44:	|  |  |  |  /-------- bra.s 13abc <readIniFile+0x358>

				case '=':
				doingSecond = TRUE;
   13a46:	|  |  |  \--|-------> move.w #1,566(sp)
				here = 0;
   13a4c:	|  |  |     |         clr.b 571(sp)
				break;
   13a50:	|  |  |     +-------- bra.s 13abc <readIniFile+0x358>

				default:
				if (doingSecond) {
   13a52:	|  |  \-----|-------> tst.w 566(sp)
   13a56:	|  |        |  /----- beq.s 13a8a <readIniFile+0x326>
					secondSoFar[here ++] = readChar;
   13a58:	|  |        |  |      move.b 571(sp),d0
   13a5c:	|  |        |  |      move.b d0,d1
   13a5e:	|  |        |  |      addq.b #1,d1
   13a60:	|  |        |  |      move.b d1,571(sp)
   13a64:	|  |        |  |      move.b d0,d0
   13a66:	|  |        |  |      andi.l #255,d0
   13a6c:	|  |        |  |      lea 572(sp),a0
   13a70:	|  |        |  |      adda.l d0,a0
   13a72:	|  |        |  |      move.b 570(sp),-564(a0)
					secondSoFar[here] = 0;
   13a78:	|  |        |  |      moveq #0,d0
   13a7a:	|  |        |  |      move.b 571(sp),d0
   13a7e:	|  |        |  |      lea 572(sp),a0
   13a82:	|  |        |  |      adda.l d0,a0
   13a84:	|  |        |  |      clr.b -564(a0)
				} else {
					lineSoFar[here ++] = readChar;
					lineSoFar[here] = 0;
				}
				break;
   13a88:	|  |        |  |  /-- bra.s 13aba <readIniFile+0x356>
					lineSoFar[here ++] = readChar;
   13a8a:	|  |        |  \--|-> move.b 571(sp),d0
   13a8e:	|  |        |     |   move.b d0,d1
   13a90:	|  |        |     |   addq.b #1,d1
   13a92:	|  |        |     |   move.b d1,571(sp)
   13a96:	|  |        |     |   move.b d0,d0
   13a98:	|  |        |     |   andi.l #255,d0
   13a9e:	|  |        |     |   lea 572(sp),a0
   13aa2:	|  |        |     |   adda.l d0,a0
   13aa4:	|  |        |     |   move.b 570(sp),-307(a0)
					lineSoFar[here] = 0;
   13aaa:	|  |        |     |   moveq #0,d0
   13aac:	|  |        |     |   move.b 571(sp),d0
   13ab0:	|  |        |     |   lea 572(sp),a0
   13ab4:	|  |        |     |   adda.l d0,a0
   13ab6:	|  |        |     |   clr.b -307(a0)
				break;
   13aba:	|  |        |     \-> nop
			}
		} while (keepGoing);
   13abc:	|  |        \-------> tst.w 568(sp)
   13ac0:	|  \----------------- bne.w 13854 <readIniFile+0xf0>

		Close(fp);
   13ac4:	|                     move.l 546(sp),526(sp)
   13aca:	|                     move.l 1c864 <DOSBase>,d0
   13ad0:	|                     movea.l d0,a6
   13ad2:	|                     move.l 526(sp),d1
   13ad6:	|                     jsr -36(a6)
   13ada:	|                     move.l d0,522(sp)
	}
}
   13ade:	\-------------------> nop
   13ae0:	                      move.l (sp)+,d2
   13ae2:	                      movea.l (sp)+,a6
   13ae4:	                      lea 564(sp),sp
   13ae8:	                      rts

00013aea <stringToInt>:

unsigned int stringToInt (char * s) {
   13aea:	             subq.l #8,sp
	int i = 0;
   13aec:	             clr.l 4(sp)
	BOOL negative = FALSE;
   13af0:	             clr.w 2(sp)
	for (;;) {
		if (*s >= '0' && *s <= '9') {
   13af4:	/----------> movea.l 12(sp),a0
   13af8:	|            move.b (a0),d0
   13afa:	|            cmpi.b #47,d0
   13afe:	|        /-- ble.s 13b36 <stringToInt+0x4c>
   13b00:	|        |   movea.l 12(sp),a0
   13b04:	|        |   move.b (a0),d0
   13b06:	|        |   cmpi.b #57,d0
   13b0a:	|        +-- bgt.s 13b36 <stringToInt+0x4c>
			i *= 10;
   13b0c:	|        |   move.l 4(sp),d1
   13b10:	|        |   move.l d1,d0
   13b12:	|        |   add.l d0,d0
   13b14:	|        |   add.l d0,d0
   13b16:	|        |   add.l d1,d0
   13b18:	|        |   add.l d0,d0
   13b1a:	|        |   move.l d0,4(sp)
			i += *s - '0';
   13b1e:	|        |   movea.l 12(sp),a0
   13b22:	|        |   move.b (a0),d0
   13b24:	|        |   ext.w d0
   13b26:	|        |   movea.w d0,a0
   13b28:	|        |   moveq #-48,d0
   13b2a:	|        |   add.l a0,d0
   13b2c:	|        |   add.l d0,4(sp)
			s ++;
   13b30:	|        |   addq.l #1,12(sp)
   13b34:	|  /-----|-- bra.s 13b6e <stringToInt+0x84>
		} else if (*s == '-') {
   13b36:	|  |     \-> movea.l 12(sp),a0
   13b3a:	|  |         move.b (a0),d0
   13b3c:	|  |         cmpi.b #45,d0
   13b40:	|  |     /-- bne.s 13b5a <stringToInt+0x70>
			negative = ! negative;
   13b42:	|  |     |   tst.w 2(sp)
   13b46:	|  |     |   seq d0
   13b48:	|  |     |   neg.b d0
   13b4a:	|  |     |   move.b d0,d0
   13b4c:	|  |     |   andi.w #255,d0
   13b50:	|  |     |   move.w d0,2(sp)
			s++;
   13b54:	|  |     |   addq.l #1,12(sp)
   13b58:	+--|-----|-- bra.s 13af4 <stringToInt+0xa>
		} else {
			if (negative)
   13b5a:	|  |     \-> tst.w 2(sp)
   13b5e:	|  |     /-- beq.s 13b68 <stringToInt+0x7e>
				return -i;
   13b60:	|  |     |   move.l 4(sp),d0
   13b64:	|  |     |   neg.l d0
   13b66:	|  |  /--|-- bra.s 13b70 <stringToInt+0x86>
			return i;
   13b68:	|  |  |  \-> move.l 4(sp),d0
   13b6c:	|  |  +----- bra.s 13b70 <stringToInt+0x86>
		if (*s >= '0' && *s <= '9') {
   13b6e:	\--\--|----X bra.s 13af4 <stringToInt+0xa>
		}
	}
   13b70:	      \----> addq.l #8,sp
   13b72:	             rts

00013b74 <fileExists>:
 */
#include <proto/dos.h>
#include "helpers.h"
#include "support/gcc8_c_support.h"

BYTE fileExists(const char * file) {
   13b74:	    lea -28(sp),sp
   13b78:	    move.l a6,-(sp)
   13b7a:	    move.l d2,-(sp)
	KPrintF("fileexists: Checking File");
   13b7c:	    pea 19cad <graphics.c.1c13408a+0x14>
   13b82:	    jsr 17176 <KPrintF>
   13b88:	    addq.l #4,sp
	BPTR tester;
	BYTE retval = 0;
   13b8a:	    clr.b 35(sp)
	tester = Open(file, MODE_OLDFILE);
   13b8e:	    move.l 40(sp),30(sp)
   13b94:	    move.l #1005,26(sp)
   13b9c:	    move.l 1c864 <DOSBase>,d0
   13ba2:	    movea.l d0,a6
   13ba4:	    move.l 30(sp),d1
   13ba8:	    move.l 26(sp),d2
   13bac:	    jsr -30(a6)
   13bb0:	    move.l d0,22(sp)
   13bb4:	    move.l 22(sp),d0
   13bb8:	    move.l d0,18(sp)
	if (tester) {
   13bbc:	/-- beq.s 13bec <fileExists+0x78>
		KPrintF("fileexists: File exists");
   13bbe:	|   pea 19cc7 <graphics.c.1c13408a+0x2e>
   13bc4:	|   jsr 17176 <KPrintF>
   13bca:	|   addq.l #4,sp
		retval = 1;
   13bcc:	|   move.b #1,35(sp)
		Close(tester);
   13bd2:	|   move.l 18(sp),14(sp)
   13bd8:	|   move.l 1c864 <DOSBase>,d0
   13bde:	|   movea.l d0,a6
   13be0:	|   move.l 14(sp),d1
   13be4:	|   jsr -36(a6)
   13be8:	|   move.l d0,10(sp)
	}
	return retval;
   13bec:	\-> move.b 35(sp),d0
   13bf0:	    move.l (sp)+,d2
   13bf2:	    movea.l (sp)+,a6
   13bf4:	    lea 28(sp),sp
   13bf8:	    rts

00013bfa <strcmp>:
#endif


int strcmp(const char* s1, const char* s2)
{
    while(*s1 && (*s1 == *s2))
   13bfa:	   /-- bra.s 13c04 <strcmp+0xa>
    {
        s1++;
   13bfc:	/--|-> addq.l #1,4(sp)
        s2++;
   13c00:	|  |   addq.l #1,8(sp)
    while(*s1 && (*s1 == *s2))
   13c04:	|  \-> movea.l 4(sp),a0
   13c08:	|      move.b (a0),d0
   13c0a:	|  /-- beq.s 13c1c <strcmp+0x22>
   13c0c:	|  |   movea.l 4(sp),a0
   13c10:	|  |   move.b (a0),d1
   13c12:	|  |   movea.l 8(sp),a0
   13c16:	|  |   move.b (a0),d0
   13c18:	|  |   cmp.b d1,d0
   13c1a:	\--|-- beq.s 13bfc <strcmp+0x2>
    }
    return *(const unsigned char*)s1 - *(const unsigned char*)s2;
   13c1c:	   \-> movea.l 4(sp),a0
   13c20:	       move.b (a0),d0
   13c22:	       moveq #0,d1
   13c24:	       move.b d0,d1
   13c26:	       movea.l 8(sp),a0
   13c2a:	       move.b (a0),d0
   13c2c:	       move.b d0,d0
   13c2e:	       andi.l #255,d0
   13c34:	       sub.l d0,d1
   13c36:	       move.l d1,d0
}
   13c38:	       rts

00013c3a <strlen>:

long unsigned int strlen (const char *s) 
{  
   13c3a:	       subq.l #4,sp
	long unsigned int i = 0;
   13c3c:	       clr.l (sp)
	while(s[i]) i++; 
   13c3e:	   /-- bra.s 13c42 <strlen+0x8>
   13c40:	/--|-> addq.l #1,(sp)
   13c42:	|  \-> movea.l 8(sp),a0
   13c46:	|      adda.l (sp),a0
   13c48:	|      move.b (a0),d0
   13c4a:	\----- bne.s 13c40 <strlen+0x6>
	return(i);
   13c4c:	       move.l (sp),d0
}
   13c4e:	       addq.l #4,sp
   13c50:	       rts

00013c52 <strcpy>:

char *strcpy(char *t, const char *s) 
{
	while(*t++ = *s++);
   13c52:	    nop
   13c54:	/-> move.l 8(sp),d0
   13c58:	|   move.l d0,d1
   13c5a:	|   addq.l #1,d1
   13c5c:	|   move.l d1,8(sp)
   13c60:	|   movea.l 4(sp),a0
   13c64:	|   lea 1(a0),a1
   13c68:	|   move.l a1,4(sp)
   13c6c:	|   movea.l d0,a1
   13c6e:	|   move.b (a1),d0
   13c70:	|   move.b d0,(a0)
   13c72:	|   move.b (a0),d0
   13c74:	\-- bne.s 13c54 <strcpy+0x2>
}
   13c76:	    nop
   13c78:	    rts

00013c7a <joinStrings>:

char * joinStrings (const char * s1, const char * s2) {
   13c7a:	    lea -20(sp),sp
   13c7e:	    move.l a6,-(sp)
   13c80:	    move.l d2,-(sp)
	char * newString = AllocVec(strlen (s1) + strlen (s2) + 1, MEMF_ANY); 
   13c82:	    move.l 32(sp),-(sp)
   13c86:	    jsr 13c3a <strlen>
   13c8c:	    addq.l #4,sp
   13c8e:	    move.l d0,d2
   13c90:	    move.l 36(sp),-(sp)
   13c94:	    jsr 13c3a <strlen>
   13c9a:	    addq.l #4,sp
   13c9c:	    add.l d2,d0
   13c9e:	    move.l d0,d1
   13ca0:	    addq.l #1,d1
   13ca2:	    move.l d1,20(sp)
   13ca6:	    clr.l 16(sp)
   13caa:	    move.l 1c85c <SysBase>,d0
   13cb0:	    movea.l d0,a6
   13cb2:	    move.l 20(sp),d0
   13cb6:	    move.l 16(sp),d1
   13cba:	    jsr -684(a6)
   13cbe:	    move.l d0,12(sp)
   13cc2:	    move.l 12(sp),d0
   13cc6:	    move.l d0,8(sp)
	char * t = newString;
   13cca:	    move.l 8(sp),24(sp)

	while(*t++ = *s1++);
   13cd0:	    nop
   13cd2:	/-> move.l 32(sp),d0
   13cd6:	|   move.l d0,d1
   13cd8:	|   addq.l #1,d1
   13cda:	|   move.l d1,32(sp)
   13cde:	|   movea.l 24(sp),a0
   13ce2:	|   lea 1(a0),a1
   13ce6:	|   move.l a1,24(sp)
   13cea:	|   movea.l d0,a1
   13cec:	|   move.b (a1),d0
   13cee:	|   move.b d0,(a0)
   13cf0:	|   move.b (a0),d0
   13cf2:	\-- bne.s 13cd2 <joinStrings+0x58>
	t--;
   13cf4:	    subq.l #1,24(sp)
	while(*t++ = *s2++);
   13cf8:	    nop
   13cfa:	/-> move.l 36(sp),d0
   13cfe:	|   move.l d0,d1
   13d00:	|   addq.l #1,d1
   13d02:	|   move.l d1,36(sp)
   13d06:	|   movea.l 24(sp),a0
   13d0a:	|   lea 1(a0),a1
   13d0e:	|   move.l a1,24(sp)
   13d12:	|   movea.l d0,a1
   13d14:	|   move.b (a1),d0
   13d16:	|   move.b d0,(a0)
   13d18:	|   move.b (a0),d0
   13d1a:	\-- bne.s 13cfa <joinStrings+0x80>

	return newString;
   13d1c:	    move.l 8(sp),d0
}
   13d20:	    move.l (sp)+,d2
   13d22:	    movea.l (sp)+,a6
   13d24:	    lea 20(sp),sp
   13d28:	    rts

00013d2a <itoa>:

#define va_start(ap, last) (ap = (va_list)&last + sizeof(last))
#define va_arg(ap, type) (*(type*)(ap += sizeof(type)) - 1)
#define va_end(ap) (ap = (va_list)0)

char* itoa(int value, char* str, int base) {
   13d2a:	       lea -16(sp),sp
    char* rc;
    char* ptr;
    char* low;
    // Set '-' for negative decimals.
    if (base == 10 && value < 0) {
   13d2e:	       moveq #10,d0
   13d30:	       cmp.l 28(sp),d0
   13d34:	   /-- bne.s 13d52 <itoa+0x28>
   13d36:	   |   tst.l 20(sp)
   13d3a:	   +-- bge.s 13d52 <itoa+0x28>
        *str++ = '-';
   13d3c:	   |   move.l 24(sp),d0
   13d40:	   |   move.l d0,d1
   13d42:	   |   addq.l #1,d1
   13d44:	   |   move.l d1,24(sp)
   13d48:	   |   movea.l d0,a0
   13d4a:	   |   move.b #45,(a0)
        value *= -1;
   13d4e:	   |   neg.l 20(sp)
    }
    rc = ptr = str;
   13d52:	   \-> move.l 24(sp),12(sp)
   13d58:	       move.l 12(sp),4(sp)
    // Set pointer to last digit's place.
    do {
        *ptr++ = "0123456789abcdef"[value % base];
   13d5e:	   /-> move.l 20(sp),d0
   13d62:	   |   move.l 28(sp),-(sp)
   13d66:	   |   move.l d0,-(sp)
   13d68:	   |   jsr 17be0 <__modsi3>
   13d6e:	   |   addq.l #8,sp
   13d70:	   |   movea.l d0,a1
   13d72:	   |   move.l 12(sp),d0
   13d76:	   |   move.l d0,d1
   13d78:	   |   addq.l #1,d1
   13d7a:	   |   move.l d1,12(sp)
   13d7e:	   |   lea 19cdf <graphics.c.1c13408a+0x46>,a0
   13d84:	   |   move.b (0,a1,a0.l),d1
   13d88:	   |   movea.l d0,a0
   13d8a:	   |   move.b d1,(a0)
        value /= base;
   13d8c:	   |   move.l 28(sp),-(sp)
   13d90:	   |   move.l 24(sp),-(sp)
   13d94:	   |   jsr 17bb2 <__divsi3>
   13d9a:	   |   addq.l #8,sp
   13d9c:	   |   move.l d0,20(sp)
    } while (value);
   13da0:	   \-- bne.s 13d5e <itoa+0x34>
    // Null-terminate string.
    *ptr-- = '\0';
   13da2:	       move.l 12(sp),d0
   13da6:	       move.l d0,d1
   13da8:	       subq.l #1,d1
   13daa:	       move.l d1,12(sp)
   13dae:	       movea.l d0,a0
   13db0:	       clr.b (a0)
    // Reverse string.
    for (low = rc; low < ptr; low++, ptr--) {
   13db2:	       move.l 4(sp),8(sp)
   13db8:	   /-- bra.s 13dde <itoa+0xb4>
        char temp = *low;
   13dba:	/--|-> movea.l 8(sp),a0
   13dbe:	|  |   move.b (a0),3(sp)
        *low = *ptr;
   13dc2:	|  |   movea.l 12(sp),a0
   13dc6:	|  |   move.b (a0),d0
   13dc8:	|  |   movea.l 8(sp),a0
   13dcc:	|  |   move.b d0,(a0)
        *ptr = temp;
   13dce:	|  |   movea.l 12(sp),a0
   13dd2:	|  |   move.b 3(sp),(a0)
    for (low = rc; low < ptr; low++, ptr--) {
   13dd6:	|  |   addq.l #1,8(sp)
   13dda:	|  |   subq.l #1,12(sp)
   13dde:	|  \-> move.l 8(sp),d0
   13de2:	|      cmp.l 12(sp),d0
   13de6:	\----- bcs.s 13dba <itoa+0x90>
    }
    return rc;
   13de8:	       move.l 4(sp),d0
}
   13dec:	       lea 16(sp),sp
   13df0:	       rts

00013df2 <vsprintf2>:

int vsprintf2(char* str, const char* format, va_list args) {
   13df2:	                            lea -40(sp),sp
   13df6:	                            move.l d2,-(sp)
    char* s = str;
   13df8:	                            move.l 48(sp),40(sp)
    const char* p = format;
   13dfe:	                            move.l 52(sp),36(sp)
    int i;
    char* sval;
    char buffer[20];

    while (*p) {
   13e04:	   /----------------------- bra.w 13f38 <vsprintf2+0x146>
        if (*p == '%') {
   13e08:	/--|----------------------> movea.l 36(sp),a0
   13e0c:	|  |                        move.b (a0),d0
   13e0e:	|  |                        cmpi.b #37,d0
   13e12:	|  |  /-------------------- bne.w 13f1e <vsprintf2+0x12c>
            switch (*++p) {
   13e16:	|  |  |                     addq.l #1,36(sp)
   13e1a:	|  |  |                     movea.l 36(sp),a0
   13e1e:	|  |  |                     move.b (a0),d0
   13e20:	|  |  |                     ext.w d0
   13e22:	|  |  |                     movea.w d0,a0
   13e24:	|  |  |                     moveq #115,d0
   13e26:	|  |  |                     cmp.l a0,d0
   13e28:	|  |  |           /-------- beq.s 13ea0 <vsprintf2+0xae>
   13e2a:	|  |  |           |         moveq #115,d1
   13e2c:	|  |  |           |         cmp.l a0,d1
   13e2e:	|  |  |  /--------|-------- blt.w 13f06 <vsprintf2+0x114>
   13e32:	|  |  |  |        |         moveq #99,d2
   13e34:	|  |  |  |        |         cmp.l a0,d2
   13e36:	|  |  |  |  /-----|-------- beq.w 13ede <vsprintf2+0xec>
   13e3a:	|  |  |  |  |     |         moveq #100,d0
   13e3c:	|  |  |  |  |     |         cmp.l a0,d0
   13e3e:	|  |  |  +--|-----|-------- bne.w 13f06 <vsprintf2+0x114>
                case 'd':
                    i = va_arg(args, int);
   13e42:	|  |  |  |  |     |         addq.l #4,56(sp)
   13e46:	|  |  |  |  |     |         movea.l 56(sp),a0
   13e4a:	|  |  |  |  |     |         move.l (a0),d0
   13e4c:	|  |  |  |  |     |         move.l d0,d1
   13e4e:	|  |  |  |  |     |         subq.l #1,d1
   13e50:	|  |  |  |  |     |         move.l d1,24(sp)
                    itoa(i, buffer, 10);
   13e54:	|  |  |  |  |     |         pea a <_start+0xa>
   13e58:	|  |  |  |  |     |         lea 8(sp),a0
   13e5c:	|  |  |  |  |     |         move.l a0,-(sp)
   13e5e:	|  |  |  |  |     |         move.l 32(sp),-(sp)
   13e62:	|  |  |  |  |     |         jsr 13d2a <itoa>
   13e68:	|  |  |  |  |     |         lea 12(sp),sp
					for (char* b = buffer; *b; b++) {
   13e6c:	|  |  |  |  |     |         lea 44(sp),a0
   13e70:	|  |  |  |  |     |         lea -40(a0),a0
   13e74:	|  |  |  |  |     |         move.l a0,28(sp)
   13e78:	|  |  |  |  |     |     /-- bra.s 13e94 <vsprintf2+0xa2>
                        *s++ = *b;
   13e7a:	|  |  |  |  |     |  /--|-> move.l 40(sp),d0
   13e7e:	|  |  |  |  |     |  |  |   move.l d0,d1
   13e80:	|  |  |  |  |     |  |  |   addq.l #1,d1
   13e82:	|  |  |  |  |     |  |  |   move.l d1,40(sp)
   13e86:	|  |  |  |  |     |  |  |   movea.l 28(sp),a0
   13e8a:	|  |  |  |  |     |  |  |   move.b (a0),d1
   13e8c:	|  |  |  |  |     |  |  |   movea.l d0,a0
   13e8e:	|  |  |  |  |     |  |  |   move.b d1,(a0)
					for (char* b = buffer; *b; b++) {
   13e90:	|  |  |  |  |     |  |  |   addq.l #1,28(sp)
   13e94:	|  |  |  |  |     |  |  \-> movea.l 28(sp),a0
   13e98:	|  |  |  |  |     |  |      move.b (a0),d0
   13e9a:	|  |  |  |  |     |  \----- bne.s 13e7a <vsprintf2+0x88>
                    }
                    break;
   13e9c:	|  |  |  |  |  /--|-------- bra.w 13f34 <vsprintf2+0x142>
                case 's':
                    sval = va_arg(args, char*);
   13ea0:	|  |  |  |  |  |  \-------> addq.l #4,56(sp)
   13ea4:	|  |  |  |  |  |            movea.l 56(sp),a0
   13ea8:	|  |  |  |  |  |            move.l (a0),d0
   13eaa:	|  |  |  |  |  |            move.l d0,d1
   13eac:	|  |  |  |  |  |            subq.l #1,d1
   13eae:	|  |  |  |  |  |            move.l d1,32(sp)
                    while (*sval) {
   13eb2:	|  |  |  |  |  |        /-- bra.s 13ed4 <vsprintf2+0xe2>
                        *s++ = *sval++;
   13eb4:	|  |  |  |  |  |     /--|-> move.l 32(sp),d1
   13eb8:	|  |  |  |  |  |     |  |   move.l d1,d2
   13eba:	|  |  |  |  |  |     |  |   addq.l #1,d2
   13ebc:	|  |  |  |  |  |     |  |   move.l d2,32(sp)
   13ec0:	|  |  |  |  |  |     |  |   move.l 40(sp),d0
   13ec4:	|  |  |  |  |  |     |  |   move.l d0,d2
   13ec6:	|  |  |  |  |  |     |  |   addq.l #1,d2
   13ec8:	|  |  |  |  |  |     |  |   move.l d2,40(sp)
   13ecc:	|  |  |  |  |  |     |  |   movea.l d1,a0
   13ece:	|  |  |  |  |  |     |  |   move.b (a0),d1
   13ed0:	|  |  |  |  |  |     |  |   movea.l d0,a0
   13ed2:	|  |  |  |  |  |     |  |   move.b d1,(a0)
                    while (*sval) {
   13ed4:	|  |  |  |  |  |     |  \-> movea.l 32(sp),a0
   13ed8:	|  |  |  |  |  |     |      move.b (a0),d0
   13eda:	|  |  |  |  |  |     \----- bne.s 13eb4 <vsprintf2+0xc2>
                    }
                    break;
   13edc:	|  |  |  |  |  +----------- bra.s 13f34 <vsprintf2+0x142>
                case 'c':
                    i = va_arg(args, int);
   13ede:	|  |  |  |  \--|----------> addq.l #4,56(sp)
   13ee2:	|  |  |  |     |            movea.l 56(sp),a0
   13ee6:	|  |  |  |     |            move.l (a0),d0
   13ee8:	|  |  |  |     |            move.l d0,d1
   13eea:	|  |  |  |     |            subq.l #1,d1
   13eec:	|  |  |  |     |            move.l d1,24(sp)
                    *s++ = (char)i;
   13ef0:	|  |  |  |     |            move.l 40(sp),d0
   13ef4:	|  |  |  |     |            move.l d0,d2
   13ef6:	|  |  |  |     |            addq.l #1,d2
   13ef8:	|  |  |  |     |            move.l d2,40(sp)
   13efc:	|  |  |  |     |            move.l 24(sp),d1
   13f00:	|  |  |  |     |            movea.l d0,a0
   13f02:	|  |  |  |     |            move.b d1,(a0)
                    break;
   13f04:	|  |  |  |     +----------- bra.s 13f34 <vsprintf2+0x142>
                default:
                    *s++ = *p;
   13f06:	|  |  |  \-----|----------> move.l 40(sp),d0
   13f0a:	|  |  |        |            move.l d0,d1
   13f0c:	|  |  |        |            addq.l #1,d1
   13f0e:	|  |  |        |            move.l d1,40(sp)
   13f12:	|  |  |        |            movea.l 36(sp),a0
   13f16:	|  |  |        |            move.b (a0),d1
   13f18:	|  |  |        |            movea.l d0,a0
   13f1a:	|  |  |        |            move.b d1,(a0)
                    break;
   13f1c:	|  |  |        +----------- bra.s 13f34 <vsprintf2+0x142>
            }
        } else {
            *s++ = *p;
   13f1e:	|  |  \--------|----------> move.l 40(sp),d0
   13f22:	|  |           |            move.l d0,d1
   13f24:	|  |           |            addq.l #1,d1
   13f26:	|  |           |            move.l d1,40(sp)
   13f2a:	|  |           |            movea.l 36(sp),a0
   13f2e:	|  |           |            move.b (a0),d1
   13f30:	|  |           |            movea.l d0,a0
   13f32:	|  |           |            move.b d1,(a0)
        }
        p++;
   13f34:	|  |           \----------> addq.l #1,36(sp)
    while (*p) {
   13f38:	|  \----------------------> movea.l 36(sp),a0
   13f3c:	|                           move.b (a0),d0
   13f3e:	\-------------------------- bne.w 13e08 <vsprintf2+0x16>
    }
    *s = '\0';
   13f42:	                            movea.l 40(sp),a0
   13f46:	                            clr.b (a0)
    return s - str;
   13f48:	                            move.l 40(sp),d0
   13f4c:	                            sub.l 48(sp),d0
}
   13f50:	                            move.l (sp)+,d2
   13f52:	                            lea 40(sp),sp
   13f56:	                            rts

00013f58 <sprintf>:

int sprintf(char* str, const char* format, ...) {
   13f58:	subq.l #8,sp
    va_list args;
    int done;

    va_start(args, format);
   13f5a:	moveq #16,d0
   13f5c:	add.l sp,d0
   13f5e:	move.l d0,d1
   13f60:	addq.l #4,d1
   13f62:	move.l d1,4(sp)
    done = vsprintf2(str, format, args);
   13f66:	move.l 16(sp),d0
   13f6a:	move.l 4(sp),-(sp)
   13f6e:	move.l d0,-(sp)
   13f70:	move.l 20(sp),-(sp)
   13f74:	jsr 13df2 <vsprintf2>
   13f7a:	lea 12(sp),sp
   13f7e:	move.l d0,(sp)
    va_end(args);
   13f80:	clr.l 4(sp)

    return done;
   13f84:	move.l (sp),d0
}
   13f86:	addq.l #8,sp
   13f88:	rts

00013f8a <addVarToStack>:
const char * typeName[] = {"undefined", "number", "user function", "string",
							"built-in function", "file", "stack",
							"object type", "animation", "costume"};


BOOL addVarToStack(const struct variable * va, struct variableStack ** thisStack) {
   13f8a:	       lea -20(sp),sp
   13f8e:	       move.l a6,-(sp)
    struct variableStack * newStack = (struct variableStack *)AllocVec(sizeof(struct variableStack), MEMF_ANY);
   13f90:	       moveq #12,d0
   13f92:	       move.l d0,20(sp)
   13f96:	       clr.l 16(sp)
   13f9a:	       move.l 1c85c <SysBase>,d0
   13fa0:	       movea.l d0,a6
   13fa2:	       move.l 20(sp),d0
   13fa6:	       move.l 16(sp),d1
   13faa:	       jsr -684(a6)
   13fae:	       move.l d0,12(sp)
   13fb2:	       move.l 12(sp),d0
   13fb6:	       move.l d0,8(sp)
    if (!newStack) return FALSE;
   13fba:	   /-- bne.s 13fc0 <addVarToStack+0x36>
   13fbc:	   |   clr.w d0
   13fbe:	/--|-- bra.s 14008 <addVarToStack+0x7e>

    if (!copyMain(va, &newStack->thisVar)) {
   13fc0:	|  \-> move.l 8(sp),d0
   13fc4:	|      move.l d0,-(sp)
   13fc6:	|      move.l 32(sp),-(sp)
   13fca:	|      jsr 14aec <copyMain>
   13fd0:	|      addq.l #8,sp
   13fd2:	|      tst.w d0
   13fd4:	|  /-- bne.s 13ff0 <addVarToStack+0x66>
        FreeVec(newStack);
   13fd6:	|  |   move.l 8(sp),4(sp)
   13fdc:	|  |   move.l 1c85c <SysBase>,d0
   13fe2:	|  |   movea.l d0,a6
   13fe4:	|  |   movea.l 4(sp),a1
   13fe8:	|  |   jsr -690(a6)
        return FALSE;
   13fec:	|  |   clr.w d0
   13fee:	+--|-- bra.s 14008 <addVarToStack+0x7e>
    }

    newStack->next = *thisStack;
   13ff0:	|  \-> movea.l 32(sp),a0
   13ff4:	|      move.l (a0),d0
   13ff6:	|      movea.l 8(sp),a0
   13ffa:	|      move.l d0,8(a0)
    *thisStack = newStack;
   13ffe:	|      movea.l 32(sp),a0
   14002:	|      move.l 8(sp),(a0)
    return TRUE;
   14006:	|      moveq #1,d0
}
   14008:	\----> movea.l (sp)+,a6
   1400a:	       lea 20(sp),sp
   1400e:	       rts

00014010 <addVarToStackQuick>:

BOOL addVarToStackQuick(struct variable *va, struct variableStack **thisStack) {
   14010:	       lea -16(sp),sp
   14014:	       move.l a6,-(sp)
    struct variableStack *newStack = AllocVec(sizeof(struct variableStack), MEMF_ANY);
   14016:	       moveq #12,d0
   14018:	       move.l d0,16(sp)
   1401c:	       clr.l 12(sp)
   14020:	       move.l 1c85c <SysBase>,d0
   14026:	       movea.l d0,a6
   14028:	       move.l 16(sp),d0
   1402c:	       move.l 12(sp),d1
   14030:	       jsr -684(a6)
   14034:	       move.l d0,8(sp)
   14038:	       move.l 8(sp),d0
   1403c:	       move.l d0,4(sp)
    if (!newStack) return FALSE;
   14040:	   /-- bne.s 14046 <addVarToStackQuick+0x36>
   14042:	   |   clr.w d0
   14044:	/--|-- bra.s 1407c <addVarToStackQuick+0x6c>

//    if (!copyMain(va, &newStack->thisVar)) return FALSE;

    memcpy(&(newStack->thisVar), va, sizeof(struct variable));
   14046:	|  \-> move.l 4(sp),d0
   1404a:	|      pea 8 <_start+0x8>
   1404e:	|      move.l 28(sp),-(sp)
   14052:	|      move.l d0,-(sp)
   14054:	|      jsr 1712a <memcpy>
   1405a:	|      lea 12(sp),sp
    va->varType = SVT_NULL;
   1405e:	|      movea.l 24(sp),a0
   14062:	|      clr.l (a0)

    newStack->next = *thisStack;
   14064:	|      movea.l 28(sp),a0
   14068:	|      move.l (a0),d0
   1406a:	|      movea.l 4(sp),a0
   1406e:	|      move.l d0,8(a0)
    *thisStack = newStack;
   14072:	|      movea.l 28(sp),a0
   14076:	|      move.l 4(sp),(a0)
    return TRUE;
   1407a:	|      moveq #1,d0
}
   1407c:	\----> movea.l (sp)+,a6
   1407e:	       lea 16(sp),sp
   14082:	       rts

00014084 <addVariablesInSecond>:

void addVariablesInSecond(struct variable * var1, struct variable * var2) {
   14084:	       lea -16(sp),sp
   14088:	       move.l a6,-(sp)
	if (var1->varType == SVT_INT && var2->varType == SVT_INT) {
   1408a:	       movea.l 24(sp),a0
   1408e:	       move.l (a0),d0
   14090:	       moveq #1,d1
   14092:	       cmp.l d0,d1
   14094:	   /-- bne.s 140be <addVariablesInSecond+0x3a>
   14096:	   |   movea.l 28(sp),a0
   1409a:	   |   move.l (a0),d0
   1409c:	   |   moveq #1,d1
   1409e:	   |   cmp.l d0,d1
   140a0:	   +-- bne.s 140be <addVariablesInSecond+0x3a>
		var2->varData.intValue += var1->varData.intValue;
   140a2:	   |   movea.l 28(sp),a0
   140a6:	   |   move.l 4(a0),d1
   140aa:	   |   movea.l 24(sp),a0
   140ae:	   |   move.l 4(a0),d0
   140b2:	   |   add.l d1,d0
   140b4:	   |   movea.l 28(sp),a0
   140b8:	   |   move.l d0,4(a0)
   140bc:	/--|-- bra.s 14138 <addVariablesInSecond+0xb4>
	} else {
		char * string1 = getTextFromAnyVar(var1);
   140be:	|  \-> move.l 24(sp),-(sp)
   140c2:	|      jsr 14d24 <getTextFromAnyVar>
   140c8:	|      addq.l #4,sp
   140ca:	|      move.l d0,16(sp)
		char * string2 = getTextFromAnyVar(var2);
   140ce:	|      move.l 28(sp),-(sp)
   140d2:	|      jsr 14d24 <getTextFromAnyVar>
   140d8:	|      addq.l #4,sp
   140da:	|      move.l d0,12(sp)

		unlinkVar(var2);
   140de:	|      move.l 28(sp),-(sp)
   140e2:	|      jsr 1499c <unlinkVar>
   140e8:	|      addq.l #4,sp
		var2->varData.theString = joinStrings(string1, string2);
   140ea:	|      move.l 12(sp),-(sp)
   140ee:	|      move.l 20(sp),-(sp)
   140f2:	|      jsr 13c7a <joinStrings>
   140f8:	|      addq.l #8,sp
   140fa:	|      movea.l 28(sp),a0
   140fe:	|      move.l d0,4(a0)
		var2->varType = SVT_STRING;
   14102:	|      movea.l 28(sp),a0
   14106:	|      moveq #3,d0
   14108:	|      move.l d0,(a0)
		FreeVec(string1);
   1410a:	|      move.l 16(sp),8(sp)
   14110:	|      move.l 1c85c <SysBase>,d0
   14116:	|      movea.l d0,a6
   14118:	|      movea.l 8(sp),a1
   1411c:	|      jsr -690(a6)
		FreeVec(string2);
   14120:	|      move.l 12(sp),4(sp)
   14126:	|      move.l 1c85c <SysBase>,d0
   1412c:	|      movea.l d0,a6
   1412e:	|      movea.l 4(sp),a1
   14132:	|      jsr -690(a6)
	}
}
   14136:	|      nop
   14138:	\----> nop
   1413a:	       movea.l (sp)+,a6
   1413c:	       lea 16(sp),sp
   14140:	       rts

00014142 <compareVariablesInSecond>:

void compareVariablesInSecond (const struct variable *var1, struct variable *var2) {	
	setVariable (var2, SVT_INT, compareVars (*var1, *var2));
   14142:	movea.l 8(sp),a0
   14146:	move.l 4(a0),-(sp)
   1414a:	move.l (a0),-(sp)
   1414c:	movea.l 12(sp),a0
   14150:	move.l 4(a0),-(sp)
   14154:	move.l (a0),-(sp)
   14156:	jsr 14178 <compareVars>
   1415c:	lea 16(sp),sp
   14160:	move.l d0,-(sp)
   14162:	pea 1 <_start+0x1>
   14166:	move.l 16(sp),-(sp)
   1416a:	jsr 15040 <setVariable>
   14170:	lea 12(sp),sp
}
   14174:	nop
   14176:	rts

00014178 <compareVars>:


int compareVars (const struct variable var1, const struct variable var2) {
   14178:	       subq.l #4,sp
	int re = 0;
   1417a:	       clr.l (sp)
	if (var1.varType == var2.varType) {
   1417c:	       move.l 8(sp),d1
   14180:	       move.l 16(sp),d0
   14184:	       cmp.l d1,d0
   14186:	/----- bne.w 1424e <compareVars+0xd6>
		switch (var1.varType) {
   1418a:	|      move.l 8(sp),d0
   1418e:	|      moveq #9,d1
   14190:	|      cmp.l d0,d1
   14192:	|  /-- bcs.w 14236 <compareVars+0xbe>
   14196:	|  |   add.l d0,d0
   14198:	|  |   movea.l d0,a0
   1419a:	|  |   adda.l #82342,a0
   141a0:	|  |   move.w (a0),d0
   141a2:	|  |   jmp (141a6 <compareVars+0x2e>,pc,d0.w)
   141a6:	|  |   ori.b #-112,(a4)
   141aa:	|  |   ori.l #5243024,(a0)
   141b0:	|  |   ori.l #7733392,(a0)
   141b6:	|  |   ori.b #28,(1,a6,d7.w)
			case SVT_NULL:
			re = 1;
   141bc:	|  |   move.l d0,(sp)
			break;
   141be:	+--|-- bra.w 1424e <compareVars+0xd6>

			case SVT_COSTUME:
			re = (var1.varData.costumeHandler == var2.varData.costumeHandler);
   141c2:	|  |   move.l 12(sp),d1
   141c6:	|  |   move.l 20(sp),d0
   141ca:	|  |   cmp.l d1,d0
   141cc:	|  |   seq d0
   141ce:	|  |   neg.b d0
   141d0:	|  |   move.b d0,d0
   141d2:	|  |   andi.l #255,d0
   141d8:	|  |   move.l d0,(sp)
			break;
   141da:	+--|-- bra.s 1424e <compareVars+0xd6>

			case SVT_ANIM:
			re = (var1.varData.animHandler == var2.varData.animHandler);
   141dc:	|  |   move.l 12(sp),d1
   141e0:	|  |   move.l 20(sp),d0
   141e4:	|  |   cmp.l d1,d0
   141e6:	|  |   seq d0
   141e8:	|  |   neg.b d0
   141ea:	|  |   move.b d0,d0
   141ec:	|  |   andi.l #255,d0
   141f2:	|  |   move.l d0,(sp)
			break;
   141f4:	+--|-- bra.s 1424e <compareVars+0xd6>

			case SVT_STRING:

			re = (strcmp (var1.varData.theString, var2.varData.theString) == 0);
   141f6:	|  |   move.l 20(sp),d1
   141fa:	|  |   move.l 12(sp),d0
   141fe:	|  |   move.l d1,-(sp)
   14200:	|  |   move.l d0,-(sp)
   14202:	|  |   jsr 13bfa <strcmp>
   14208:	|  |   addq.l #8,sp
   1420a:	|  |   tst.l d0
   1420c:	|  |   seq d0
   1420e:	|  |   neg.b d0
   14210:	|  |   move.b d0,d0
   14212:	|  |   andi.l #255,d0
   14218:	|  |   move.l d0,(sp)
			break;
   1421a:	+--|-- bra.s 1424e <compareVars+0xd6>

			case SVT_STACK:
			re = (var1.varData.theStack == var2.varData.theStack);
   1421c:	|  |   move.l 12(sp),d1
   14220:	|  |   move.l 20(sp),d0
   14224:	|  |   cmp.l d1,d0
   14226:	|  |   seq d0
   14228:	|  |   neg.b d0
   1422a:	|  |   move.b d0,d0
   1422c:	|  |   andi.l #255,d0
   14232:	|  |   move.l d0,(sp)
			break;
   14234:	+--|-- bra.s 1424e <compareVars+0xd6>

			default:
			re = (var1.varData.intValue == var2.varData.intValue);
   14236:	|  \-> move.l 12(sp),d1
   1423a:	|      move.l 20(sp),d0
   1423e:	|      cmp.l d1,d0
   14240:	|      seq d0
   14242:	|      neg.b d0
   14244:	|      move.b d0,d0
   14246:	|      andi.l #255,d0
   1424c:	|      move.l d0,(sp)
		}
	}
	return re;
   1424e:	\----> move.l (sp),d0
}
   14250:	       addq.l #4,sp
   14252:	       rts

00014254 <copyStack>:

BOOL copyStack (const struct variable * from, struct variable * to) {
   14254:	             lea -16(sp),sp
   14258:	             move.l a6,-(sp)
	to->varType = SVT_STACK;
   1425a:	             movea.l 28(sp),a0
   1425e:	             moveq #6,d0
   14260:	             move.l d0,(a0)
	to->varData.theStack = (struct stackHandler *)AllocVec(sizeof(struct stackHandler), MEMF_ANY);
   14262:	             moveq #12,d0
   14264:	             move.l d0,12(sp)
   14268:	             clr.l 8(sp)
   1426c:	             move.l 1c85c <SysBase>,d0
   14272:	             movea.l d0,a6
   14274:	             move.l 12(sp),d0
   14278:	             move.l 8(sp),d1
   1427c:	             jsr -684(a6)
   14280:	             move.l d0,4(sp)
   14284:	             move.l 4(sp),d0
   14288:	             movea.l 28(sp),a0
   1428c:	             move.l d0,4(a0)
	if (!to->varData.theStack) return FALSE;
   14290:	             movea.l 28(sp),a0
   14294:	             move.l 4(a0),d0
   14298:	         /-- bne.s 142a0 <copyStack+0x4c>
   1429a:	         |   clr.w d0
   1429c:	/--------|-- bra.w 14322 <copyStack+0xce>
	to->varData.theStack->first = NULL;
   142a0:	|        \-> movea.l 28(sp),a0
   142a4:	|            movea.l 4(a0),a0
   142a8:	|            clr.l (a0)
	to->varData.theStack->last = NULL;
   142aa:	|            movea.l 28(sp),a0
   142ae:	|            movea.l 4(a0),a0
   142b2:	|            clr.l 4(a0)
	to->varData.theStack->timesUsed = 1;
   142b6:	|            movea.l 28(sp),a0
   142ba:	|            movea.l 4(a0),a0
   142be:	|            moveq #1,d0
   142c0:	|            move.l d0,8(a0)
	struct variableStack * a = from->varData.theStack->first;
   142c4:	|            movea.l 24(sp),a0
   142c8:	|            movea.l 4(a0),a0
   142cc:	|            move.l (a0),16(sp)

	while (a) {
   142d0:	|     /----- bra.s 1431a <copyStack+0xc6>
		addVarToStack(&a->thisVar, &(to->varData.theStack->first));
   142d2:	|  /--|----> movea.l 28(sp),a0
   142d6:	|  |  |      move.l 4(a0),d0
   142da:	|  |  |      move.l d0,d1
   142dc:	|  |  |      move.l 16(sp),d0
   142e0:	|  |  |      move.l d1,-(sp)
   142e2:	|  |  |      move.l d0,-(sp)
   142e4:	|  |  |      jsr 13f8a <addVarToStack>
   142ea:	|  |  |      addq.l #8,sp
		if (to->varData.theStack->last == NULL) {
   142ec:	|  |  |      movea.l 28(sp),a0
   142f0:	|  |  |      movea.l 4(a0),a0
   142f4:	|  |  |      move.l 4(a0),d0
   142f8:	|  |  |  /-- bne.s 14310 <copyStack+0xbc>
			to->varData.theStack->last = to->varData.theStack->first;
   142fa:	|  |  |  |   movea.l 28(sp),a0
   142fe:	|  |  |  |   movea.l 4(a0),a1
   14302:	|  |  |  |   movea.l 28(sp),a0
   14306:	|  |  |  |   movea.l 4(a0),a0
   1430a:	|  |  |  |   move.l (a1),d0
   1430c:	|  |  |  |   move.l d0,4(a0)
		}
		a = a->next;
   14310:	|  |  |  \-> movea.l 16(sp),a0
   14314:	|  |  |      move.l 8(a0),16(sp)
	while (a) {
   1431a:	|  |  \----> tst.l 16(sp)
   1431e:	|  \-------- bne.s 142d2 <copyStack+0x7e>
	}

	return TRUE;
   14320:	|            moveq #1,d0
}
   14322:	\----------> movea.l (sp)+,a6
   14324:	             lea 16(sp),sp
   14328:	             rts

0001432a <deleteVarFromStack>:

int deleteVarFromStack (const struct variable * va, struct variableStack ** thisStack, BOOL allOfEm) {
   1432a:	                lea -20(sp),sp
   1432e:	                move.l a6,-(sp)
   14330:	                move.l 36(sp),d0
   14334:	                move.w d0,d0
   14336:	                move.w d0,6(sp)
    struct variableStack ** huntVar = thisStack;
   1433a:	                move.l 32(sp),20(sp)
    struct variableStack * killMe;
    int reply = 0;
   14340:	                clr.l 16(sp)

    while (*huntVar) {
   14344:	   /----------- bra.s 143c2 <deleteVarFromStack+0x98>
        if (compareVars((*huntVar)->thisVar, *va)) {
   14346:	/--|----------> movea.l 20(sp),a0
   1434a:	|  |            movea.l (a0),a0
   1434c:	|  |            movea.l 28(sp),a1
   14350:	|  |            move.l 4(a1),-(sp)
   14354:	|  |            move.l (a1),-(sp)
   14356:	|  |            move.l 4(a0),-(sp)
   1435a:	|  |            move.l (a0),-(sp)
   1435c:	|  |            jsr 14178 <compareVars>
   14362:	|  |            lea 16(sp),sp
   14366:	|  |            tst.l d0
   14368:	|  |  /-------- beq.s 143b4 <deleteVarFromStack+0x8a>
            killMe = *huntVar;
   1436a:	|  |  |         movea.l 20(sp),a0
   1436e:	|  |  |         move.l (a0),12(sp)
            *huntVar = killMe->next;
   14372:	|  |  |         movea.l 12(sp),a0
   14376:	|  |  |         move.l 8(a0),d0
   1437a:	|  |  |         movea.l 20(sp),a0
   1437e:	|  |  |         move.l d0,(a0)
            unlinkVar(&killMe->thisVar);
   14380:	|  |  |         move.l 12(sp),d0
   14384:	|  |  |         move.l d0,-(sp)
   14386:	|  |  |         jsr 1499c <unlinkVar>
   1438c:	|  |  |         addq.l #4,sp
            FreeVec(killMe);
   1438e:	|  |  |         move.l 12(sp),8(sp)
   14394:	|  |  |         move.l 1c85c <SysBase>,d0
   1439a:	|  |  |         movea.l d0,a6
   1439c:	|  |  |         movea.l 8(sp),a1
   143a0:	|  |  |         jsr -690(a6)
            if (!allOfEm) return 1;
   143a4:	|  |  |         tst.w 6(sp)
   143a8:	|  |  |     /-- bne.s 143ae <deleteVarFromStack+0x84>
   143aa:	|  |  |     |   moveq #1,d0
   143ac:	|  |  |  /--|-- bra.s 143d0 <deleteVarFromStack+0xa6>
            reply++;
   143ae:	|  |  |  |  \-> addq.l #1,16(sp)
   143b2:	|  +--|--|----- bra.s 143c2 <deleteVarFromStack+0x98>
        } else {
            huntVar = &((*huntVar)->next);
   143b4:	|  |  \--|----> movea.l 20(sp),a0
   143b8:	|  |     |      move.l (a0),d0
   143ba:	|  |     |      move.l d0,d1
   143bc:	|  |     |      addq.l #8,d1
   143be:	|  |     |      move.l d1,20(sp)
    while (*huntVar) {
   143c2:	|  \-----|----> movea.l 20(sp),a0
   143c6:	|        |      move.l (a0),d0
   143c8:	\--------|----- bne.w 14346 <deleteVarFromStack+0x1c>
        }
    }

    return reply;
   143cc:	         |      move.l 16(sp),d0
}
   143d0:	         \----> movea.l (sp)+,a6
   143d2:	                lea 20(sp),sp
   143d6:	                rts

000143d8 <fastArrayGetByIndex>:


struct variable * fastArrayGetByIndex (struct fastArrayHandler * vS, unsigned int theIndex) {
	if (theIndex >= (unsigned int) vS -> size) return NULL;
   143d8:	       movea.l 4(sp),a0
   143dc:	       move.l 4(a0),d0
   143e0:	       cmp.l 8(sp),d0
   143e4:	   /-- bhi.s 143ea <fastArrayGetByIndex+0x12>
   143e6:	   |   moveq #0,d0
   143e8:	/--|-- bra.s 143f8 <fastArrayGetByIndex+0x20>
	return & vS -> fastVariables[theIndex];
   143ea:	|  \-> movea.l 4(sp),a0
   143ee:	|      move.l (a0),d1
   143f0:	|      move.l 8(sp),d0
   143f4:	|      lsl.l #3,d0
   143f6:	|      add.l d1,d0
}
   143f8:	\----> rts

000143fa <getCostumeFromVar>:

struct persona * getCostumeFromVar(struct variable *thisVar) {
   143fa:	                lea -32(sp),sp
   143fe:	                move.l a6,-(sp)
   14400:	                move.l a2,-(sp)
    struct persona *p = NULL;
   14402:	                clr.l 36(sp)

    switch (thisVar->varType) {
   14406:	                movea.l 44(sp),a0
   1440a:	                move.l (a0),d0
   1440c:	                moveq #8,d1
   1440e:	                cmp.l d0,d1
   14410:	            /-- beq.s 1441e <getCostumeFromVar+0x24>
   14412:	            |   moveq #9,d1
   14414:	            |   cmp.l d0,d1
   14416:	   /--------|-- beq.w 144cc <getCostumeFromVar+0xd2>
   1441a:	/--|--------|-- bra.w 144d6 <getCostumeFromVar+0xdc>
        case SVT_ANIM:
            p = AllocVec(sizeof(struct persona), MEMF_ANY);
   1441e:	|  |        \-> moveq #8,d0
   14420:	|  |            move.l d0,28(sp)
   14424:	|  |            clr.l 24(sp)
   14428:	|  |            move.l 1c85c <SysBase>,d0
   1442e:	|  |            movea.l d0,a6
   14430:	|  |            move.l 28(sp),d0
   14434:	|  |            move.l 24(sp),d1
   14438:	|  |            jsr -684(a6)
   1443c:	|  |            move.l d0,20(sp)
   14440:	|  |            move.l 20(sp),d0
   14444:	|  |            move.l d0,36(sp)
            if (!p) return NULL;
   14448:	|  |        /-- bne.s 14450 <getCostumeFromVar+0x56>
   1444a:	|  |        |   moveq #0,d0
   1444c:	|  |  /-----|-- bra.w 14500 <getCostumeFromVar+0x106>
            p->numDirections = 1;
   14450:	|  |  |     \-> movea.l 36(sp),a0
   14454:	|  |  |         moveq #1,d1
   14456:	|  |  |         move.l d1,4(a0)
            p->animation = AllocVec(3 * sizeof(struct personaAnimation *), MEMF_ANY);
   1445a:	|  |  |         moveq #12,d0
   1445c:	|  |  |         move.l d0,16(sp)
   14460:	|  |  |         clr.l 12(sp)
   14464:	|  |  |         move.l 1c85c <SysBase>,d0
   1446a:	|  |  |         movea.l d0,a6
   1446c:	|  |  |         move.l 16(sp),d0
   14470:	|  |  |         move.l 12(sp),d1
   14474:	|  |  |         jsr -684(a6)
   14478:	|  |  |         move.l d0,8(sp)
   1447c:	|  |  |         move.l 8(sp),d0
   14480:	|  |  |         movea.l 36(sp),a0
   14484:	|  |  |         move.l d0,(a0)
            if (!p->animation) return NULL;
   14486:	|  |  |         movea.l 36(sp),a0
   1448a:	|  |  |         move.l (a0),d0
   1448c:	|  |  |     /-- bne.s 14492 <getCostumeFromVar+0x98>
   1448e:	|  |  |     |   moveq #0,d0
   14490:	|  |  +-----|-- bra.s 14500 <getCostumeFromVar+0x106>

            for (int iii = 0; iii < 3; iii++) {
   14492:	|  |  |     \-> clr.l 32(sp)
   14496:	|  |  |     /-- bra.s 144c2 <getCostumeFromVar+0xc8>
                p->animation[iii] = copyAnim(thisVar->varData.animHandler);
   14498:	|  |  |  /--|-> movea.l 44(sp),a0
   1449c:	|  |  |  |  |   move.l 4(a0),d0
   144a0:	|  |  |  |  |   movea.l 36(sp),a0
   144a4:	|  |  |  |  |   movea.l (a0),a0
   144a6:	|  |  |  |  |   move.l 32(sp),d1
   144aa:	|  |  |  |  |   add.l d1,d1
   144ac:	|  |  |  |  |   add.l d1,d1
   144ae:	|  |  |  |  |   lea (0,a0,d1.l),a2
   144b2:	|  |  |  |  |   move.l d0,-(sp)
   144b4:	|  |  |  |  |   jsr 9558 <copyAnim>
   144ba:	|  |  |  |  |   addq.l #4,sp
   144bc:	|  |  |  |  |   move.l d0,(a2)
            for (int iii = 0; iii < 3; iii++) {
   144be:	|  |  |  |  |   addq.l #1,32(sp)
   144c2:	|  |  |  |  \-> moveq #2,d1
   144c4:	|  |  |  |      cmp.l 32(sp),d1
   144c8:	|  |  |  \----- bge.s 14498 <getCostumeFromVar+0x9e>
            }
            break;
   144ca:	|  |  |     /-- bra.s 144fc <getCostumeFromVar+0x102>

        case SVT_COSTUME:
            return thisVar->varData.costumeHandler;
   144cc:	|  \--|-----|-> movea.l 44(sp),a0
   144d0:	|     |     |   move.l 4(a0),d0
   144d4:	|     +-----|-- bra.s 14500 <getCostumeFromVar+0x106>
            break;

        default:
            KPrintF("Expecting an animation variable; found variable of type", typeName[thisVar->varType]);
   144d6:	\-----|-----|-> movea.l 44(sp),a0
   144da:	      |     |   move.l (a0),d0
   144dc:	      |     |   add.l d0,d0
   144de:	      |     |   movea.l d0,a1
   144e0:	      |     |   adda.l d0,a1
   144e2:	      |     |   lea 1c738 <typeName>,a0
   144e8:	      |     |   move.l (0,a1,a0.l),d0
   144ec:	      |     |   move.l d0,-(sp)
   144ee:	      |     |   pea 19d51 <graphics.c.1c13408a+0xb8>
   144f4:	      |     |   jsr 17176 <KPrintF>
   144fa:	      |     |   addq.l #8,sp
    }

    return p;
   144fc:	      |     \-> move.l 36(sp),d0
}
   14500:	      \-------> movea.l (sp)+,a2
   14502:	                movea.l (sp)+,a6
   14504:	                lea 32(sp),sp
   14508:	                rts

0001450a <getSavedGamesStack>:

BOOL getSavedGamesStack(struct stackHandler * sH, char * ext) {
   1450a:	                lea -96(sp),sp
   1450e:	                movem.l d2-d3/a6,-(sp)
	char * pattern = joinStrings("*", ext);
   14512:	                move.l 116(sp),-(sp)
   14516:	                pea 19d89 <graphics.c.1c13408a+0xf0>
   1451c:	                jsr 13c7a <joinStrings>
   14522:	                addq.l #8,sp
   14524:	                move.l d0,102(sp)
	if (!pattern) return FALSE;
   14528:	            /-- bne.s 14530 <getSavedGamesStack+0x26>
   1452a:	            |   clr.w d0
   1452c:	/-----------|-- bra.w 14744 <getSavedGamesStack+0x23a>

	struct variable newName;
	newName.varType = SVT_NULL;
   14530:	|           \-> clr.l 14(sp)

	BPTR dirLock = Lock(".", ACCESS_READ);
   14534:	|               move.l #105867,98(sp)
   1453c:	|               moveq #-2,d0
   1453e:	|               move.l d0,94(sp)
   14542:	|               move.l 1c864 <DOSBase>,d0
   14548:	|               movea.l d0,a6
   1454a:	|               move.l 98(sp),d1
   1454e:	|               move.l 94(sp),d2
   14552:	|               jsr -84(a6)
   14556:	|               move.l d0,90(sp)
   1455a:	|               move.l 90(sp),d0
   1455e:	|               move.l d0,86(sp)
	if (!dirLock) return FALSE;
   14562:	|           /-- bne.s 1456a <getSavedGamesStack+0x60>
   14564:	|           |   clr.w d0
   14566:	+-----------|-- bra.w 14744 <getSavedGamesStack+0x23a>

	struct FileInfoBlock *fib = (struct FileInfoBlock *)AllocVec(sizeof(struct FileInfoBlock), MEMF_CLEAR);
   1456a:	|           \-> move.l #260,82(sp)
   14572:	|               move.l #65536,78(sp)
   1457a:	|               move.l 1c85c <SysBase>,d0
   14580:	|               movea.l d0,a6
   14582:	|               move.l 82(sp),d0
   14586:	|               move.l 78(sp),d1
   1458a:	|               jsr -684(a6)
   1458e:	|               move.l d0,74(sp)
   14592:	|               move.l 74(sp),d0
   14596:	|               move.l d0,70(sp)
	if (!fib) {
   1459a:	|           /-- bne.s 145b8 <getSavedGamesStack+0xae>
		UnLock(dirLock);
   1459c:	|           |   move.l 86(sp),22(sp)
   145a2:	|           |   move.l 1c864 <DOSBase>,d0
   145a8:	|           |   movea.l d0,a6
   145aa:	|           |   move.l 22(sp),d1
   145ae:	|           |   jsr -90(a6)
		return FALSE;
   145b2:	|           |   clr.w d0
   145b4:	+-----------|-- bra.w 14744 <getSavedGamesStack+0x23a>
	}

	BOOL result = FALSE;
   145b8:	|           \-> clr.w 106(sp)
	if (Examine(dirLock, fib)) {
   145bc:	|               move.l 86(sp),66(sp)
   145c2:	|               move.l 70(sp),62(sp)
   145c8:	|               move.l 1c864 <DOSBase>,d0
   145ce:	|               movea.l d0,a6
   145d0:	|               move.l 66(sp),d1
   145d4:	|               move.l 62(sp),d2
   145d8:	|               jsr -102(a6)
   145dc:	|               move.l d0,58(sp)
   145e0:	|               move.l 58(sp),d0
   145e4:	|  /----------- beq.w 146f8 <getSavedGamesStack+0x1ee>
		while (ExNext(dirLock, fib)) {
   145e8:	|  |        /-- bra.w 146c4 <getSavedGamesStack+0x1ba>
			if (!strcmp(fib->fib_FileName + strlen(fib->fib_FileName) - strlen(ext), ext)) {
   145ec:	|  |  /-----|-> move.l 70(sp),d2
   145f0:	|  |  |     |   addq.l #8,d2
   145f2:	|  |  |     |   move.l 70(sp),d0
   145f6:	|  |  |     |   addq.l #8,d0
   145f8:	|  |  |     |   move.l d0,-(sp)
   145fa:	|  |  |     |   jsr 13c3a <strlen>
   14600:	|  |  |     |   addq.l #4,sp
   14602:	|  |  |     |   move.l d0,d3
   14604:	|  |  |     |   move.l 116(sp),-(sp)
   14608:	|  |  |     |   jsr 13c3a <strlen>
   1460e:	|  |  |     |   addq.l #4,sp
   14610:	|  |  |     |   move.l d3,d1
   14612:	|  |  |     |   sub.l d0,d1
   14614:	|  |  |     |   move.l d2,d0
   14616:	|  |  |     |   add.l d1,d0
   14618:	|  |  |     |   move.l 116(sp),-(sp)
   1461c:	|  |  |     |   move.l d0,-(sp)
   1461e:	|  |  |     |   jsr 13bfa <strcmp>
   14624:	|  |  |     |   addq.l #8,sp
   14626:	|  |  |     |   tst.l d0
   14628:	|  |  |     +-- bne.w 146c4 <getSavedGamesStack+0x1ba>
				fib->fib_FileName[strlen(fib->fib_FileName) - strlen(ext)] = 0;
   1462c:	|  |  |     |   move.l 70(sp),d0
   14630:	|  |  |     |   addq.l #8,d0
   14632:	|  |  |     |   move.l d0,-(sp)
   14634:	|  |  |     |   jsr 13c3a <strlen>
   1463a:	|  |  |     |   addq.l #4,sp
   1463c:	|  |  |     |   move.l d0,d2
   1463e:	|  |  |     |   move.l 116(sp),-(sp)
   14642:	|  |  |     |   jsr 13c3a <strlen>
   14648:	|  |  |     |   addq.l #4,sp
   1464a:	|  |  |     |   move.l d0,d1
   1464c:	|  |  |     |   move.l d2,d0
   1464e:	|  |  |     |   sub.l d1,d0
   14650:	|  |  |     |   movea.l 70(sp),a0
   14654:	|  |  |     |   clr.b (8,a0,d0.l)
				char * decoded = decodeFilename(fib->fib_FileName);
   14658:	|  |  |     |   move.l 70(sp),d0
   1465c:	|  |  |     |   addq.l #8,d0
   1465e:	|  |  |     |   move.l d0,-(sp)
   14660:	|  |  |     |   jsr 118 <decodeFilename>
   14666:	|  |  |     |   addq.l #4,sp
   14668:	|  |  |     |   move.l d0,42(sp)
				makeTextVar(&newName, decoded);
   1466c:	|  |  |     |   move.l 42(sp),-(sp)
   14670:	|  |  |     |   lea 18(sp),a0
   14674:	|  |  |     |   move.l a0,-(sp)
   14676:	|  |  |     |   jsr 14970 <makeTextVar>
   1467c:	|  |  |     |   addq.l #8,sp
				FreeVec(decoded);
   1467e:	|  |  |     |   move.l 42(sp),38(sp)
   14684:	|  |  |     |   move.l 1c85c <SysBase>,d0
   1468a:	|  |  |     |   movea.l d0,a6
   1468c:	|  |  |     |   movea.l 38(sp),a1
   14690:	|  |  |     |   jsr -690(a6)
				if (!addVarToStack(&newName, &sH->first)) goto cleanup;
   14694:	|  |  |     |   move.l 112(sp),d0
   14698:	|  |  |     |   move.l d0,-(sp)
   1469a:	|  |  |     |   lea 18(sp),a0
   1469e:	|  |  |     |   move.l a0,-(sp)
   146a0:	|  |  |     |   jsr 13f8a <addVarToStack>
   146a6:	|  |  |     |   addq.l #8,sp
   146a8:	|  |  |     |   tst.w d0
   146aa:	|  |  |  /--|-- beq.s 146fc <getSavedGamesStack+0x1f2>
				if (sH->last == NULL) sH->last = sH->first;
   146ac:	|  |  |  |  |   movea.l 112(sp),a0
   146b0:	|  |  |  |  |   move.l 4(a0),d0
   146b4:	|  |  |  |  +-- bne.s 146c4 <getSavedGamesStack+0x1ba>
   146b6:	|  |  |  |  |   movea.l 112(sp),a0
   146ba:	|  |  |  |  |   move.l (a0),d0
   146bc:	|  |  |  |  |   movea.l 112(sp),a0
   146c0:	|  |  |  |  |   move.l d0,4(a0)
		while (ExNext(dirLock, fib)) {
   146c4:	|  |  |  |  \-> move.l 86(sp),54(sp)
   146ca:	|  |  |  |      move.l 70(sp),50(sp)
   146d0:	|  |  |  |      move.l 1c864 <DOSBase>,d0
   146d6:	|  |  |  |      movea.l d0,a6
   146d8:	|  |  |  |      move.l 54(sp),d1
   146dc:	|  |  |  |      move.l 50(sp),d2
   146e0:	|  |  |  |      jsr -108(a6)
   146e4:	|  |  |  |      move.l d0,46(sp)
   146e8:	|  |  |  |      move.l 46(sp),d0
   146ec:	|  |  \--|----- bne.w 145ec <getSavedGamesStack+0xe2>
			}
		}
		result = TRUE;
   146f0:	|  |     |      move.w #1,106(sp)
   146f6:	|  |     |  /-- bra.s 146fe <getSavedGamesStack+0x1f4>
	}

cleanup:
   146f8:	|  \-----|--|-> nop
   146fa:	|        |  +-- bra.s 146fe <getSavedGamesStack+0x1f4>
				if (!addVarToStack(&newName, &sH->first)) goto cleanup;
   146fc:	|        \--|-> nop
	FreeVec(fib);
   146fe:	|           \-> move.l 70(sp),34(sp)
   14704:	|               move.l 1c85c <SysBase>,d0
   1470a:	|               movea.l d0,a6
   1470c:	|               movea.l 34(sp),a1
   14710:	|               jsr -690(a6)
	UnLock(dirLock);
   14714:	|               move.l 86(sp),30(sp)
   1471a:	|               move.l 1c864 <DOSBase>,d0
   14720:	|               movea.l d0,a6
   14722:	|               move.l 30(sp),d1
   14726:	|               jsr -90(a6)
	FreeVec(pattern);
   1472a:	|               move.l 102(sp),26(sp)
   14730:	|               move.l 1c85c <SysBase>,d0
   14736:	|               movea.l d0,a6
   14738:	|               movea.l 26(sp),a1
   1473c:	|               jsr -690(a6)
	return result;
   14740:	|               move.w 106(sp),d0
}
   14744:	\-------------> movem.l (sp)+,d2-d3/a6
   14748:	                lea 96(sp),sp
   1474c:	                rts

0001474e <getValueType>:


BOOL getValueType (int *toHere, enum variableType vT, const struct variable *v) {
   1474e:	       subq.l #8,sp
	//if (! v) return false;
	if (v->varType != vT) {
   14750:	       movea.l 20(sp),a0
   14754:	       move.l (a0),d0
   14756:	       cmp.l 16(sp),d0
   1475a:	/----- beq.s 147be <getValueType+0x70>
		char * e1 = joinStrings ("Can only perform specified operation on a value which is of type ", typeName[vT]);
   1475c:	|      move.l 16(sp),d0
   14760:	|      add.l d0,d0
   14762:	|      movea.l d0,a1
   14764:	|      adda.l d0,a1
   14766:	|      lea 1c738 <typeName>,a0
   1476c:	|      move.l (0,a1,a0.l),d0
   14770:	|      move.l d0,-(sp)
   14772:	|      pea 19d8d <graphics.c.1c13408a+0xf4>
   14778:	|      jsr 13c7a <joinStrings>
   1477e:	|      addq.l #8,sp
   14780:	|      move.l d0,4(sp)
		char * e2 = joinStrings ("... value supplied was of type ", typeName[v->varType]);
   14784:	|      movea.l 20(sp),a0
   14788:	|      move.l (a0),d0
   1478a:	|      add.l d0,d0
   1478c:	|      movea.l d0,a1
   1478e:	|      adda.l d0,a1
   14790:	|      lea 1c738 <typeName>,a0
   14796:	|      move.l (0,a1,a0.l),d0
   1479a:	|      move.l d0,-(sp)
   1479c:	|      pea 19dcf <graphics.c.1c13408a+0x136>
   147a2:	|      jsr 13c7a <joinStrings>
   147a8:	|      addq.l #8,sp
   147aa:	|      move.l d0,(sp)
		KPrintF(e1, e2);
   147ac:	|      move.l (sp),-(sp)
   147ae:	|      move.l 8(sp),-(sp)
   147b2:	|      jsr 17176 <KPrintF>
   147b8:	|      addq.l #8,sp

		return FALSE;
   147ba:	|      clr.w d0
   147bc:	|  /-- bra.s 147ce <getValueType+0x80>
	}
	*toHere = v->varData.intValue;
   147be:	\--|-> movea.l 20(sp),a0
   147c2:	   |   move.l 4(a0),d0
   147c6:	   |   movea.l 12(sp),a0
   147ca:	   |   move.l d0,(a0)
	return TRUE;
   147cc:	   |   moveq #1,d0
}
   147ce:	   \-> addq.l #8,sp
   147d0:	       rts

000147d2 <loadStringToVar>:

BOOL loadStringToVar (struct variable *thisVar, int value) {
	makeTextVar (thisVar, getNumberedString (value));
   147d2:	move.l 8(sp),-(sp)
   147d6:	jsr 6cf2 <getNumberedString>
   147dc:	addq.l #4,sp
   147de:	move.l d0,-(sp)
   147e0:	move.l 8(sp),-(sp)
   147e4:	jsr 14970 <makeTextVar>
   147ea:	addq.l #8,sp
	return (BOOL) (thisVar->varData.theString != NULL);
   147ec:	movea.l 4(sp),a0
   147f0:	move.l 4(a0),d0
   147f4:	sne d0
   147f6:	neg.b d0
   147f8:	move.b d0,d0
   147fa:	andi.w #255,d0
}
   147fe:	rts

00014800 <makeFastArrayFromStack>:
		break;
	}
	return TRUE;
}

BOOL makeFastArrayFromStack (struct variable *to, const struct stackHandler *stacky) {
   14800:	          subq.l #8,sp
    int size = stackSize(stacky);
   14802:	          move.l 16(sp),-(sp)
   14806:	          jsr 150ae <stackSize>
   1480c:	          addq.l #4,sp
   1480e:	          move.l d0,4(sp)
    if (!makeFastArraySize(to, size)) return FALSE;
   14812:	          move.l 4(sp),-(sp)
   14816:	          move.l 16(sp),-(sp)
   1481a:	          jsr 1486a <makeFastArraySize>
   14820:	          addq.l #8,sp
   14822:	          tst.w d0
   14824:	      /-- bne.s 1482a <makeFastArrayFromStack+0x2a>
   14826:	      |   clr.w d0
   14828:	/-----|-- bra.s 14866 <makeFastArrayFromStack+0x66>

    // Now let's fill up the new array

    struct variableStack *allV = stacky->first;
   1482a:	|     \-> movea.l 16(sp),a0
   1482e:	|         move.l (a0),(sp)
    size = 0;
   14830:	|         clr.l 4(sp)
    while (allV) {
   14834:	|     /-- bra.s 14860 <makeFastArrayFromStack+0x60>
        copyMain(&allV->thisVar, &to->varData.fastArray->fastVariables[size]);
   14836:	|  /--|-> movea.l 12(sp),a0
   1483a:	|  |  |   movea.l 4(a0),a0
   1483e:	|  |  |   move.l (a0),d1
   14840:	|  |  |   move.l 4(sp),d0
   14844:	|  |  |   lsl.l #3,d0
   14846:	|  |  |   add.l d0,d1
   14848:	|  |  |   move.l (sp),d0
   1484a:	|  |  |   move.l d1,-(sp)
   1484c:	|  |  |   move.l d0,-(sp)
   1484e:	|  |  |   jsr 14aec <copyMain>
   14854:	|  |  |   addq.l #8,sp
        size++;
   14856:	|  |  |   addq.l #1,4(sp)
        allV = allV->next;
   1485a:	|  |  |   movea.l (sp),a0
   1485c:	|  |  |   move.l 8(a0),(sp)
    while (allV) {
   14860:	|  |  \-> tst.l (sp)
   14862:	|  \----- bne.s 14836 <makeFastArrayFromStack+0x36>
    }
    return TRUE;
   14864:	|         moveq #1,d0
}
   14866:	\-------> addq.l #8,sp
   14868:	          rts

0001486a <makeFastArraySize>:


BOOL makeFastArraySize (struct variable *to, int size) {
   1486a:	          lea -28(sp),sp
   1486e:	          move.l a6,-(sp)
    if (size < 0) {
   14870:	          tst.l 40(sp)
   14874:	      /-- bge.s 1488a <makeFastArraySize+0x20>
		KPrintF("makeFastArraySize: Can't create a fast array with a negative number of elements!");
   14876:	      |   pea 19e14 <graphics.c.1c13408a+0x17b>
   1487c:	      |   jsr 17176 <KPrintF>
   14882:	      |   addq.l #4,sp
		return FALSE;
   14884:	      |   clr.w d0
   14886:	/-----|-- bra.w 14968 <makeFastArraySize+0xfe>
	}		
    unlinkVar(to);
   1488a:	|     \-> move.l 36(sp),-(sp)
   1488e:	|         jsr 1499c <unlinkVar>
   14894:	|         addq.l #4,sp
    to->varType = SVT_FASTARRAY;
   14896:	|         movea.l 36(sp),a0
   1489a:	|         moveq #10,d0
   1489c:	|         move.l d0,(a0)
    to->varData.fastArray = AllocVec(sizeof(struct fastArrayHandler), MEMF_ANY);
   1489e:	|         moveq #12,d0
   148a0:	|         move.l d0,24(sp)
   148a4:	|         clr.l 20(sp)
   148a8:	|         move.l 1c85c <SysBase>,d0
   148ae:	|         movea.l d0,a6
   148b0:	|         move.l 24(sp),d0
   148b4:	|         move.l 20(sp),d1
   148b8:	|         jsr -684(a6)
   148bc:	|         move.l d0,16(sp)
   148c0:	|         move.l 16(sp),d0
   148c4:	|         movea.l 36(sp),a0
   148c8:	|         move.l d0,4(a0)
    if (!to->varData.fastArray) return FALSE;
   148cc:	|         movea.l 36(sp),a0
   148d0:	|         move.l 4(a0),d0
   148d4:	|     /-- bne.s 148dc <makeFastArraySize+0x72>
   148d6:	|     |   clr.w d0
   148d8:	+-----|-- bra.w 14968 <makeFastArraySize+0xfe>
    to->varData.fastArray->fastVariables = AllocVec(size * sizeof(struct variable), MEMF_ANY);
   148dc:	|     \-> move.l 40(sp),d0
   148e0:	|         lsl.l #3,d0
   148e2:	|         move.l d0,12(sp)
   148e6:	|         clr.l 8(sp)
   148ea:	|         move.l 1c85c <SysBase>,d0
   148f0:	|         movea.l d0,a6
   148f2:	|         move.l 12(sp),d0
   148f6:	|         move.l 8(sp),d1
   148fa:	|         jsr -684(a6)
   148fe:	|         move.l d0,4(sp)
   14902:	|         move.l 4(sp),d0
   14906:	|         movea.l 36(sp),a0
   1490a:	|         movea.l 4(a0),a0
   1490e:	|         move.l d0,(a0)
    if (!to->varData.fastArray->fastVariables) return FALSE;
   14910:	|         movea.l 36(sp),a0
   14914:	|         movea.l 4(a0),a0
   14918:	|         move.l (a0),d0
   1491a:	|     /-- bne.s 14920 <makeFastArraySize+0xb6>
   1491c:	|     |   clr.w d0
   1491e:	+-----|-- bra.s 14968 <makeFastArraySize+0xfe>
    for (int i = 0; i < size; i++) {
   14920:	|     \-> clr.l 28(sp)
   14924:	|     /-- bra.s 14940 <makeFastArraySize+0xd6>
        to->varData.fastArray->fastVariables[i].varType = SVT_NULL;
   14926:	|  /--|-> movea.l 36(sp),a0
   1492a:	|  |  |   movea.l 4(a0),a0
   1492e:	|  |  |   move.l (a0),d1
   14930:	|  |  |   move.l 28(sp),d0
   14934:	|  |  |   lsl.l #3,d0
   14936:	|  |  |   movea.l d1,a0
   14938:	|  |  |   adda.l d0,a0
   1493a:	|  |  |   clr.l (a0)
    for (int i = 0; i < size; i++) {
   1493c:	|  |  |   addq.l #1,28(sp)
   14940:	|  |  \-> move.l 28(sp),d0
   14944:	|  |      cmp.l 40(sp),d0
   14948:	|  \----- blt.s 14926 <makeFastArraySize+0xbc>
    }
    to->varData.fastArray->size = size;
   1494a:	|         movea.l 36(sp),a0
   1494e:	|         movea.l 4(a0),a0
   14952:	|         move.l 40(sp),4(a0)
    to->varData.fastArray->timesUsed = 1;
   14958:	|         movea.l 36(sp),a0
   1495c:	|         movea.l 4(a0),a0
   14960:	|         moveq #1,d0
   14962:	|         move.l d0,8(a0)
    return TRUE;
   14966:	|         moveq #1,d0
}
   14968:	\-------> movea.l (sp)+,a6
   1496a:	          lea 28(sp),sp
   1496e:	          rts

00014970 <makeTextVar>:

void makeTextVar (struct variable *thisVar, const char * txt) {
	unlinkVar (thisVar);
   14970:	move.l 4(sp),-(sp)
   14974:	jsr 1499c <unlinkVar>
   1497a:	addq.l #4,sp
	thisVar->varType = SVT_STRING;
   1497c:	movea.l 4(sp),a0
   14980:	moveq #3,d0
   14982:	move.l d0,(a0)
	thisVar->varData.theString = copyString (txt);
   14984:	move.l 8(sp),-(sp)
   14988:	jsr b8 <copyString>
   1498e:	addq.l #4,sp
   14990:	movea.l 4(sp),a0
   14994:	move.l d0,4(a0)
}
   14998:	nop
   1499a:	rts

0001499c <unlinkVar>:

void unlinkVar (struct variable *thisVar) {
   1499c:	                      lea -16(sp),sp
   149a0:	                      move.l a6,-(sp)

	switch (thisVar->varType) {
   149a2:	                      movea.l 24(sp),a0
   149a6:	                      move.l (a0),d0
   149a8:	                      moveq #10,d1
   149aa:	                      cmp.l d0,d1
   149ac:	            /-------- beq.w 14a64 <unlinkVar+0xc8>
   149b0:	            |         moveq #10,d1
   149b2:	            |         cmp.l d0,d1
   149b4:	/-----------|-------- bcs.w 14ad8 <unlinkVar+0x13c>
   149b8:	|           |         moveq #8,d1
   149ba:	|           |         cmp.l d0,d1
   149bc:	|  /--------|-------- beq.w 14ac4 <unlinkVar+0x128>
   149c0:	|  |        |         moveq #8,d1
   149c2:	|  |        |         cmp.l d0,d1
   149c4:	+--|--------|-------- bcs.w 14ad8 <unlinkVar+0x13c>
   149c8:	|  |        |         moveq #3,d1
   149ca:	|  |        |         cmp.l d0,d1
   149cc:	|  |        |     /-- beq.s 149d8 <unlinkVar+0x3c>
   149ce:	|  |        |     |   moveq #6,d1
   149d0:	|  |        |     |   cmp.l d0,d1
   149d2:	|  |        |  /--|-- beq.s 149fe <unlinkVar+0x62>
		case SVT_ANIM:
		deleteAnim (thisVar->varData.animHandler);
		break;

		default:
		break;
   149d4:	+--|--------|--|--|-- bra.w 14ad8 <unlinkVar+0x13c>
        FreeVec(thisVar->varData.theString);
   149d8:	|  |        |  |  \-> movea.l 24(sp),a0
   149dc:	|  |        |  |      move.l 4(a0),4(sp)
   149e2:	|  |        |  |      move.l 1c85c <SysBase>,d0
   149e8:	|  |        |  |      movea.l d0,a6
   149ea:	|  |        |  |      movea.l 4(sp),a1
   149ee:	|  |        |  |      jsr -690(a6)
		thisVar->varData.theString = NULL;
   149f2:	|  |        |  |      movea.l 24(sp),a0
   149f6:	|  |        |  |      clr.l 4(a0)
		break;
   149fa:	|  |  /-----|--|----- bra.w 14ae2 <unlinkVar+0x146>
		thisVar->varData.theStack -> timesUsed --;
   149fe:	|  |  |     |  \----> movea.l 24(sp),a0
   14a02:	|  |  |     |         movea.l 4(a0),a0
   14a06:	|  |  |     |         move.l 8(a0),d0
   14a0a:	|  |  |     |         subq.l #1,d0
   14a0c:	|  |  |     |         move.l d0,8(a0)
		if (thisVar->varData.theStack -> timesUsed <= 0) {
   14a10:	|  |  |     |         movea.l 24(sp),a0
   14a14:	|  |  |     |         movea.l 4(a0),a0
   14a18:	|  |  |     |         move.l 8(a0),d0
   14a1c:	|  |  |  /--|-------- bgt.w 14adc <unlinkVar+0x140>
			while (thisVar->varData.theStack -> first) trimStack (&thisVar->varData.theStack -> first);
   14a20:	|  |  |  |  |     /-- bra.s 14a34 <unlinkVar+0x98>
   14a22:	|  |  |  |  |  /--|-> movea.l 24(sp),a0
   14a26:	|  |  |  |  |  |  |   move.l 4(a0),d0
   14a2a:	|  |  |  |  |  |  |   move.l d0,-(sp)
   14a2c:	|  |  |  |  |  |  |   jsr 150d2 <trimStack>
   14a32:	|  |  |  |  |  |  |   addq.l #4,sp
   14a34:	|  |  |  |  |  |  \-> movea.l 24(sp),a0
   14a38:	|  |  |  |  |  |      movea.l 4(a0),a0
   14a3c:	|  |  |  |  |  |      move.l (a0),d0
   14a3e:	|  |  |  |  |  \----- bne.s 14a22 <unlinkVar+0x86>
			FreeVec(thisVar->varData.theStack);
   14a40:	|  |  |  |  |         movea.l 24(sp),a0
   14a44:	|  |  |  |  |         move.l 4(a0),8(sp)
   14a4a:	|  |  |  |  |         move.l 1c85c <SysBase>,d0
   14a50:	|  |  |  |  |         movea.l d0,a6
   14a52:	|  |  |  |  |         movea.l 8(sp),a1
   14a56:	|  |  |  |  |         jsr -690(a6)
			thisVar->varData.theStack = NULL;
   14a5a:	|  |  |  |  |         movea.l 24(sp),a0
   14a5e:	|  |  |  |  |         clr.l 4(a0)
		break;
   14a62:	|  |  |  +--|-------- bra.s 14adc <unlinkVar+0x140>
		thisVar->varData.fastArray -> timesUsed --;
   14a64:	|  |  |  |  \-------> movea.l 24(sp),a0
   14a68:	|  |  |  |            movea.l 4(a0),a0
   14a6c:	|  |  |  |            move.l 8(a0),d0
   14a70:	|  |  |  |            subq.l #1,d0
   14a72:	|  |  |  |            move.l d0,8(a0)
		if (thisVar->varData.theStack -> timesUsed <= 0) {
   14a76:	|  |  |  |            movea.l 24(sp),a0
   14a7a:	|  |  |  |            movea.l 4(a0),a0
   14a7e:	|  |  |  |            move.l 8(a0),d0
   14a82:	|  |  |  |        /-- bgt.s 14ae0 <unlinkVar+0x144>
            FreeVec( thisVar->varData.fastArray -> fastVariables);
   14a84:	|  |  |  |        |   movea.l 24(sp),a0
   14a88:	|  |  |  |        |   movea.l 4(a0),a0
   14a8c:	|  |  |  |        |   move.l (a0),16(sp)
   14a90:	|  |  |  |        |   move.l 1c85c <SysBase>,d0
   14a96:	|  |  |  |        |   movea.l d0,a6
   14a98:	|  |  |  |        |   movea.l 16(sp),a1
   14a9c:	|  |  |  |        |   jsr -690(a6)
			FreeVec(thisVar->varData.fastArray);
   14aa0:	|  |  |  |        |   movea.l 24(sp),a0
   14aa4:	|  |  |  |        |   move.l 4(a0),12(sp)
   14aaa:	|  |  |  |        |   move.l 1c85c <SysBase>,d0
   14ab0:	|  |  |  |        |   movea.l d0,a6
   14ab2:	|  |  |  |        |   movea.l 12(sp),a1
   14ab6:	|  |  |  |        |   jsr -690(a6)
			thisVar->varData.fastArray = NULL;
   14aba:	|  |  |  |        |   movea.l 24(sp),a0
   14abe:	|  |  |  |        |   clr.l 4(a0)
		break;
   14ac2:	|  |  |  |        +-- bra.s 14ae0 <unlinkVar+0x144>
		deleteAnim (thisVar->varData.animHandler);
   14ac4:	|  \--|--|--------|-> movea.l 24(sp),a0
   14ac8:	|     |  |        |   move.l 4(a0),d0
   14acc:	|     |  |        |   move.l d0,-(sp)
   14ace:	|     |  |        |   jsr 9924 <deleteAnim>
   14ad4:	|     |  |        |   addq.l #4,sp
		break;
   14ad6:	|     +--|--------|-- bra.s 14ae2 <unlinkVar+0x146>
		break;
   14ad8:	\-----|--|--------|-> nop
   14ada:	      +--|--------|-- bra.s 14ae2 <unlinkVar+0x146>
		break;
   14adc:	      |  \--------|-> nop
   14ade:	      +-----------|-- bra.s 14ae2 <unlinkVar+0x146>
		break;
   14ae0:	      |           \-> nop
	}
}
   14ae2:	      \-------------> nop
   14ae4:	                      movea.l (sp)+,a6
   14ae6:	                      lea 16(sp),sp
   14aea:	                      rts

00014aec <copyMain>:

BOOL copyMain (const struct variable *from, struct variable *to) {
	to->varType = from->varType;
   14aec:	       movea.l 4(sp),a0
   14af0:	       move.l (a0),d0
   14af2:	       movea.l 8(sp),a0
   14af6:	       move.l d0,(a0)
	switch (to->varType) {
   14af8:	       movea.l 8(sp),a0
   14afc:	       move.l (a0),d0
   14afe:	       moveq #10,d1
   14b00:	       cmp.l d0,d1
   14b02:	/----- bcs.w 14bf4 <copyMain+0x108>
   14b06:	|      add.l d0,d0
   14b08:	|      movea.l d0,a0
   14b0a:	|      adda.l #84758,a0
   14b10:	|      move.w (a0),d0
   14b12:	|      jmp (14b16 <copyMain+0x2a>,pc,d0.w)
   14b16:	|      .short 0x00da
   14b18:	|      ori.b #22,(a6)
   14b1c:	|      ori.w #22,(a4)
   14b20:	|      ori.b #-126,(a6)
   14b24:	|      ori.b #-68,(a6)
   14b28:	|      ori.l #2891887,4(a0)
		case SVT_INT:
		case SVT_FUNC:
		case SVT_BUILT:
		case SVT_FILE:
		case SVT_OBJTYPE:
		to->varData.intValue = from->varData.intValue;
   14b30:	|      move.l 4(a0),d0
   14b34:	|      movea.l 8(sp),a0
   14b38:	|      move.l d0,4(a0)
		return TRUE;
   14b3c:	|      moveq #1,d0
   14b3e:	|  /-- bra.w 14c06 <copyMain+0x11a>

		case SVT_FASTARRAY:
		to->varData.fastArray = from->varData.fastArray;
   14b42:	|  |   movea.l 4(sp),a0
   14b46:	|  |   move.l 4(a0),d0
   14b4a:	|  |   movea.l 8(sp),a0
   14b4e:	|  |   move.l d0,4(a0)
		to->varData.fastArray -> timesUsed ++;
   14b52:	|  |   movea.l 8(sp),a0
   14b56:	|  |   movea.l 4(a0),a0
   14b5a:	|  |   move.l 8(a0),d0
   14b5e:	|  |   addq.l #1,d0
   14b60:	|  |   move.l d0,8(a0)
		return TRUE;
   14b64:	|  |   moveq #1,d0
   14b66:	|  +-- bra.w 14c06 <copyMain+0x11a>

		case SVT_STRING:
		to->varData.theString = copyString (from->varData.theString);
   14b6a:	|  |   movea.l 4(sp),a0
   14b6e:	|  |   move.l 4(a0),d0
   14b72:	|  |   move.l d0,-(sp)
   14b74:	|  |   jsr b8 <copyString>
   14b7a:	|  |   addq.l #4,sp
   14b7c:	|  |   movea.l 8(sp),a0
   14b80:	|  |   move.l d0,4(a0)
		return to->varData.theString ? TRUE : FALSE;
   14b84:	|  |   movea.l 8(sp),a0
   14b88:	|  |   move.l 4(a0),d0
   14b8c:	|  |   sne d0
   14b8e:	|  |   neg.b d0
   14b90:	|  |   move.b d0,d0
   14b92:	|  |   andi.w #255,d0
   14b96:	|  +-- bra.s 14c06 <copyMain+0x11a>

		case SVT_STACK:
		to->varData.theStack = from->varData.theStack;
   14b98:	|  |   movea.l 4(sp),a0
   14b9c:	|  |   move.l 4(a0),d0
   14ba0:	|  |   movea.l 8(sp),a0
   14ba4:	|  |   move.l d0,4(a0)
		to->varData.theStack -> timesUsed ++;
   14ba8:	|  |   movea.l 8(sp),a0
   14bac:	|  |   movea.l 4(a0),a0
   14bb0:	|  |   move.l 8(a0),d0
   14bb4:	|  |   addq.l #1,d0
   14bb6:	|  |   move.l d0,8(a0)
		return TRUE;
   14bba:	|  |   moveq #1,d0
   14bbc:	|  +-- bra.s 14c06 <copyMain+0x11a>

		case SVT_COSTUME:
		to->varData.costumeHandler = from->varData.costumeHandler;
   14bbe:	|  |   movea.l 4(sp),a0
   14bc2:	|  |   move.l 4(a0),d0
   14bc6:	|  |   movea.l 8(sp),a0
   14bca:	|  |   move.l d0,4(a0)
		return TRUE;
   14bce:	|  |   moveq #1,d0
   14bd0:	|  +-- bra.s 14c06 <copyMain+0x11a>

		case SVT_ANIM:
		to->varData.animHandler = copyAnim (from->varData.animHandler);
   14bd2:	|  |   movea.l 4(sp),a0
   14bd6:	|  |   move.l 4(a0),d0
   14bda:	|  |   move.l d0,-(sp)
   14bdc:	|  |   jsr 9558 <copyAnim>
   14be2:	|  |   addq.l #4,sp
   14be4:	|  |   movea.l 8(sp),a0
   14be8:	|  |   move.l d0,4(a0)
		return TRUE;
   14bec:	|  |   moveq #1,d0
   14bee:	|  +-- bra.s 14c06 <copyMain+0x11a>

		case SVT_NULL:
		return TRUE;
   14bf0:	|  |   moveq #1,d0
   14bf2:	|  +-- bra.s 14c06 <copyMain+0x11a>

		default:
		break;
   14bf4:	\--|-> nop
	}
	KPrintF("Unknown value type");
   14bf6:	   |   pea 19e65 <graphics.c.1c13408a+0x1cc>
   14bfc:	   |   jsr 17176 <KPrintF>
   14c02:	   |   addq.l #4,sp
	return FALSE;
   14c04:	   |   clr.w d0
}
   14c06:	   \-> rts

00014c08 <copyVariable>:

BOOL copyVariable (const struct variable *from, struct variable *to) {
	unlinkVar (to);
   14c08:	move.l 8(sp),-(sp)
   14c0c:	jsr 1499c <unlinkVar>
   14c12:	addq.l #4,sp
	return copyMain(from, to);
   14c14:	move.l 8(sp),-(sp)
   14c18:	move.l 8(sp),-(sp)
   14c1c:	jsr 14aec <copyMain>
   14c22:	addq.l #8,sp
}
   14c24:	rts

00014c26 <getAnimationFromVar>:

struct personaAnimation * getAnimationFromVar (struct variable *thisVar) {
	if (thisVar->varType == SVT_ANIM)
   14c26:	       movea.l 4(sp),a0
   14c2a:	       move.l (a0),d0
   14c2c:	       moveq #8,d1
   14c2e:	       cmp.l d0,d1
   14c30:	   /-- bne.s 14c46 <getAnimationFromVar+0x20>
		return copyAnim (thisVar->varData.animHandler);
   14c32:	   |   movea.l 4(sp),a0
   14c36:	   |   move.l 4(a0),d0
   14c3a:	   |   move.l d0,-(sp)
   14c3c:	   |   jsr 9558 <copyAnim>
   14c42:	   |   addq.l #4,sp
   14c44:	/--|-- bra.s 14c8c <getAnimationFromVar+0x66>

	if (thisVar->varType == SVT_INT && thisVar->varData.intValue == 0)
   14c46:	|  \-> movea.l 4(sp),a0
   14c4a:	|      move.l (a0),d0
   14c4c:	|      moveq #1,d1
   14c4e:	|      cmp.l d0,d1
   14c50:	|  /-- bne.s 14c64 <getAnimationFromVar+0x3e>
   14c52:	|  |   movea.l 4(sp),a0
   14c56:	|  |   move.l 4(a0),d0
   14c5a:	|  +-- bne.s 14c64 <getAnimationFromVar+0x3e>
		return makeNullAnim();
   14c5c:	|  |   jsr ad28 <makeNullAnim>
   14c62:	+--|-- bra.s 14c8c <getAnimationFromVar+0x66>

	KPrintF("Expecting an animation variable; found variable of type", typeName[thisVar->varType]);
   14c64:	|  \-> movea.l 4(sp),a0
   14c68:	|      move.l (a0),d0
   14c6a:	|      add.l d0,d0
   14c6c:	|      movea.l d0,a1
   14c6e:	|      adda.l d0,a1
   14c70:	|      lea 1c738 <typeName>,a0
   14c76:	|      move.l (0,a1,a0.l),d0
   14c7a:	|      move.l d0,-(sp)
   14c7c:	|      pea 19d51 <graphics.c.1c13408a+0xb8>
   14c82:	|      jsr 17176 <KPrintF>
   14c88:	|      addq.l #8,sp
	return NULL;
   14c8a:	|      moveq #0,d0
}
   14c8c:	\----> rts

00014c8e <getBoolean>:

BOOL getBoolean (const struct variable *from) {
	switch (from->varType) {
   14c8e:	       movea.l 4(sp),a0
   14c92:	       move.l (a0),d0
   14c94:	       moveq #10,d1
   14c96:	       cmp.l d0,d1
   14c98:	/----- bcs.w 14d1e <getBoolean+0x90>
   14c9c:	|      add.l d0,d0
   14c9e:	|      movea.l d0,a0
   14ca0:	|      adda.l #85164,a0
   14ca6:	|      move.w (a0),d0
   14ca8:	|      jmp (14cac <getBoolean+0x1e>,pc,d0.w)
   14cac:	|      ori.b #26,(a6)
   14cb0:	|      ori.w #68,(114,a2,d0.w)
   14cb6:	|      ori.w #46,(114,a2,d0.w)
   14cbc:	|      ori.w #114,(90,a2,d0.w)
		case SVT_NULL:
		return FALSE;
   14cc2:	|      clr.w d0
   14cc4:	|  /-- bra.s 14d22 <getBoolean+0x94>

		case SVT_INT:
		return (BOOL) (from->varData.intValue != 0);
   14cc6:	|  |   movea.l 4(sp),a0
   14cca:	|  |   move.l 4(a0),d0
   14cce:	|  |   sne d0
   14cd0:	|  |   neg.b d0
   14cd2:	|  |   move.b d0,d0
   14cd4:	|  |   andi.w #255,d0
   14cd8:	|  +-- bra.s 14d22 <getBoolean+0x94>

		case SVT_STACK:
		return (BOOL) (from->varData.theStack -> first != NULL);
   14cda:	|  |   movea.l 4(sp),a0
   14cde:	|  |   movea.l 4(a0),a0
   14ce2:	|  |   move.l (a0),d0
   14ce4:	|  |   sne d0
   14ce6:	|  |   neg.b d0
   14ce8:	|  |   move.b d0,d0
   14cea:	|  |   andi.w #255,d0
   14cee:	|  +-- bra.s 14d22 <getBoolean+0x94>

		case SVT_STRING:
		return (BOOL) (from->varData.theString[0] != 0);
   14cf0:	|  |   movea.l 4(sp),a0
   14cf4:	|  |   movea.l 4(a0),a0
   14cf8:	|  |   move.b (a0),d0
   14cfa:	|  |   sne d0
   14cfc:	|  |   neg.b d0
   14cfe:	|  |   move.b d0,d0
   14d00:	|  |   andi.w #255,d0
   14d04:	|  +-- bra.s 14d22 <getBoolean+0x94>

		case SVT_FASTARRAY:
		return (BOOL) (from->varData.fastArray -> size != 0);
   14d06:	|  |   movea.l 4(sp),a0
   14d0a:	|  |   movea.l 4(a0),a0
   14d0e:	|  |   move.l 4(a0),d0
   14d12:	|  |   sne d0
   14d14:	|  |   neg.b d0
   14d16:	|  |   move.b d0,d0
   14d18:	|  |   andi.w #255,d0
   14d1c:	|  +-- bra.s 14d22 <getBoolean+0x94>

		default:
		break;
   14d1e:	\--|-> nop
	}
	return TRUE;
   14d20:	   |   moveq #1,d0
}
   14d22:	   \-> rts

00014d24 <getTextFromAnyVar>:

char * getTextFromAnyVar (const struct variable *from) {
   14d24:	      /----------> lea -76(sp),sp
   14d28:	      |            move.l a6,-(sp)
	switch (from->varType) {
   14d2a:	      |            movea.l 84(sp),a0
   14d2e:	      |            move.l (a0),d0
   14d30:	      |            moveq #10,d1
   14d32:	      |            cmp.l d0,d1
   14d34:	/-----|----------- bcs.w 14fd2 <getTextFromAnyVar+0x2ae>
   14d38:	|     |            add.l d0,d0
   14d3a:	|     |            movea.l d0,a0
   14d3c:	|     |            adda.l #85320,a0
   14d42:	|     |            move.w (a0),d0
   14d44:	|     |            jmp (14d48 <getTextFromAnyVar+0x24>,pc,d0.w)
   14d48:	|     |            .short 0x028a
   14d4a:	|     |            bset d0,(a0)+
   14d4c:	|     |            .short 0x028a
   14d4e:	|     |            ori.b #-118,(a6)
   14d52:	|     |            andi.b #8,ccr
   14d56:	|     |            andi.w #650,-(a0)
   14d5a:	|     |            .short 0x028a
   14d5c:	|     |            ori.b #111,84(a4)
		case SVT_STRING:
		return copyString (from->varData.theString);
   14d62:	|     |            move.l 4(a0),d0
   14d66:	|     |            move.l d0,-(sp)
   14d68:	|     |            jsr b8 <copyString>
   14d6e:	|     |            addq.l #4,sp
   14d70:	|  /--|----------- bra.w 14ff4 <getTextFromAnyVar+0x2d0>

		case SVT_FASTARRAY:
		{
			char * builder = copyString ("FAST:");
   14d74:	|  |  |            pea 19e78 <graphics.c.1c13408a+0x1df>
   14d7a:	|  |  |            jsr b8 <copyString>
   14d80:	|  |  |            addq.l #4,sp
   14d82:	|  |  |            move.l d0,76(sp)
			char * builder2;
			char * grabText;

			for (int i = 0; i < from->varData.fastArray -> size; i ++) {
   14d86:	|  |  |            clr.l 72(sp)
   14d8a:	|  |  |     /----- bra.w 14e34 <getTextFromAnyVar+0x110>
				builder2 = joinStrings (builder, " ");
   14d8e:	|  |  |  /--|----> pea 19e7e <graphics.c.1c13408a+0x1e5>
   14d94:	|  |  |  |  |      move.l 80(sp),-(sp)
   14d98:	|  |  |  |  |      jsr 13c7a <joinStrings>
   14d9e:	|  |  |  |  |      addq.l #8,sp
   14da0:	|  |  |  |  |      move.l d0,60(sp)
				if (! builder2) return NULL;
   14da4:	|  |  |  |  |  /-- bne.s 14dac <getTextFromAnyVar+0x88>
   14da6:	|  |  |  |  |  |   moveq #0,d0
   14da8:	|  +--|--|--|--|-- bra.w 14ff4 <getTextFromAnyVar+0x2d0>
				FreeVec(builder);
   14dac:	|  |  |  |  |  \-> move.l 76(sp),56(sp)
   14db2:	|  |  |  |  |      move.l 1c85c <SysBase>,d0
   14db8:	|  |  |  |  |      movea.l d0,a6
   14dba:	|  |  |  |  |      movea.l 56(sp),a1
   14dbe:	|  |  |  |  |      jsr -690(a6)
				grabText = getTextFromAnyVar (&from->varData.fastArray -> fastVariables[i]);
   14dc2:	|  |  |  |  |      movea.l 84(sp),a0
   14dc6:	|  |  |  |  |      movea.l 4(a0),a0
   14dca:	|  |  |  |  |      move.l (a0),d1
   14dcc:	|  |  |  |  |      move.l 72(sp),d0
   14dd0:	|  |  |  |  |      lsl.l #3,d0
   14dd2:	|  |  |  |  |      add.l d1,d0
   14dd4:	|  |  |  |  |      move.l d0,-(sp)
   14dd6:	|  |  +--|--|----- jsr 14d24 <getTextFromAnyVar>(pc)
   14dda:	|  |  |  |  |      addq.l #4,sp
   14ddc:	|  |  |  |  |      move.l d0,52(sp)
				builder = joinStrings (builder2, grabText);
   14de0:	|  |  |  |  |      move.l 52(sp),-(sp)
   14de4:	|  |  |  |  |      move.l 64(sp),-(sp)
   14de8:	|  |  |  |  |      jsr 13c7a <joinStrings>
   14dee:	|  |  |  |  |      addq.l #8,sp
   14df0:	|  |  |  |  |      move.l d0,76(sp)
				if (! builder) return NULL;
   14df4:	|  |  |  |  |  /-- bne.s 14dfc <getTextFromAnyVar+0xd8>
   14df6:	|  |  |  |  |  |   moveq #0,d0
   14df8:	|  +--|--|--|--|-- bra.w 14ff4 <getTextFromAnyVar+0x2d0>
				FreeVec(grabText);
   14dfc:	|  |  |  |  |  \-> move.l 52(sp),48(sp)
   14e02:	|  |  |  |  |      move.l 1c85c <SysBase>,d0
   14e08:	|  |  |  |  |      movea.l d0,a6
   14e0a:	|  |  |  |  |      movea.l 48(sp),a1
   14e0e:	|  |  |  |  |      jsr -690(a6)
				grabText = NULL;
   14e12:	|  |  |  |  |      clr.l 52(sp)
				FreeVec(builder2);
   14e16:	|  |  |  |  |      move.l 60(sp),44(sp)
   14e1c:	|  |  |  |  |      move.l 1c85c <SysBase>,d0
   14e22:	|  |  |  |  |      movea.l d0,a6
   14e24:	|  |  |  |  |      movea.l 44(sp),a1
   14e28:	|  |  |  |  |      jsr -690(a6)
				builder2 = NULL;
   14e2c:	|  |  |  |  |      clr.l 60(sp)
			for (int i = 0; i < from->varData.fastArray -> size; i ++) {
   14e30:	|  |  |  |  |      addq.l #1,72(sp)
   14e34:	|  |  |  |  \----> movea.l 84(sp),a0
   14e38:	|  |  |  |         movea.l 4(a0),a0
   14e3c:	|  |  |  |         move.l 4(a0),d0
   14e40:	|  |  |  |         cmp.l 72(sp),d0
   14e44:	|  |  |  \-------- bgt.w 14d8e <getTextFromAnyVar+0x6a>
			}
			return builder;
   14e48:	|  |  |            move.l 76(sp),d0
   14e4c:	|  +--|----------- bra.w 14ff4 <getTextFromAnyVar+0x2d0>
		}

		case SVT_STACK:
		{
			char * builder = copyString ("ARRAY:");
   14e50:	|  |  |            pea 19e80 <graphics.c.1c13408a+0x1e7>
   14e56:	|  |  |            jsr b8 <copyString>
   14e5c:	|  |  |            addq.l #4,sp
   14e5e:	|  |  |            move.l d0,68(sp)
			char * builder2;
			char * grabText;

			struct variableStack * stacky = from->varData.theStack -> first;
   14e62:	|  |  |            movea.l 84(sp),a0
   14e66:	|  |  |            movea.l 4(a0),a0
   14e6a:	|  |  |            move.l (a0),64(sp)

			while (stacky) {
   14e6e:	|  |  |     /----- bra.w 14f10 <getTextFromAnyVar+0x1ec>
				builder2 = joinStrings (builder, " ");
   14e72:	|  |  |  /--|----> pea 19e7e <graphics.c.1c13408a+0x1e5>
   14e78:	|  |  |  |  |      move.l 72(sp),-(sp)
   14e7c:	|  |  |  |  |      jsr 13c7a <joinStrings>
   14e82:	|  |  |  |  |      addq.l #8,sp
   14e84:	|  |  |  |  |      move.l d0,36(sp)
				if (! builder2) return NULL;
   14e88:	|  |  |  |  |  /-- bne.s 14e90 <getTextFromAnyVar+0x16c>
   14e8a:	|  |  |  |  |  |   moveq #0,d0
   14e8c:	|  +--|--|--|--|-- bra.w 14ff4 <getTextFromAnyVar+0x2d0>
				FreeVec(builder);
   14e90:	|  |  |  |  |  \-> move.l 68(sp),32(sp)
   14e96:	|  |  |  |  |      move.l 1c85c <SysBase>,d0
   14e9c:	|  |  |  |  |      movea.l d0,a6
   14e9e:	|  |  |  |  |      movea.l 32(sp),a1
   14ea2:	|  |  |  |  |      jsr -690(a6)
				grabText = getTextFromAnyVar (&stacky -> thisVar);
   14ea6:	|  |  |  |  |      move.l 64(sp),d0
   14eaa:	|  |  |  |  |      move.l d0,-(sp)
   14eac:	|  |  \--|--|----- jsr 14d24 <getTextFromAnyVar>(pc)
   14eb0:	|  |     |  |      addq.l #4,sp
   14eb2:	|  |     |  |      move.l d0,28(sp)
				builder = joinStrings (builder2, grabText);
   14eb6:	|  |     |  |      move.l 28(sp),-(sp)
   14eba:	|  |     |  |      move.l 40(sp),-(sp)
   14ebe:	|  |     |  |      jsr 13c7a <joinStrings>
   14ec4:	|  |     |  |      addq.l #8,sp
   14ec6:	|  |     |  |      move.l d0,68(sp)
				if (! builder) return NULL;
   14eca:	|  |     |  |  /-- bne.s 14ed2 <getTextFromAnyVar+0x1ae>
   14ecc:	|  |     |  |  |   moveq #0,d0
   14ece:	|  +-----|--|--|-- bra.w 14ff4 <getTextFromAnyVar+0x2d0>
				FreeVec(grabText);
   14ed2:	|  |     |  |  \-> move.l 28(sp),24(sp)
   14ed8:	|  |     |  |      move.l 1c85c <SysBase>,d0
   14ede:	|  |     |  |      movea.l d0,a6
   14ee0:	|  |     |  |      movea.l 24(sp),a1
   14ee4:	|  |     |  |      jsr -690(a6)
				grabText = NULL;
   14ee8:	|  |     |  |      clr.l 28(sp)
				FreeVec(builder2);
   14eec:	|  |     |  |      move.l 36(sp),20(sp)
   14ef2:	|  |     |  |      move.l 1c85c <SysBase>,d0
   14ef8:	|  |     |  |      movea.l d0,a6
   14efa:	|  |     |  |      movea.l 20(sp),a1
   14efe:	|  |     |  |      jsr -690(a6)
				builder2 = NULL;
   14f02:	|  |     |  |      clr.l 36(sp)
				stacky = stacky -> next;
   14f06:	|  |     |  |      movea.l 64(sp),a0
   14f0a:	|  |     |  |      move.l 8(a0),64(sp)
			while (stacky) {
   14f10:	|  |     |  \----> tst.l 64(sp)
   14f14:	|  |     \-------- bne.w 14e72 <getTextFromAnyVar+0x14e>
			}
			return builder;
   14f18:	|  |               move.l 68(sp),d0
   14f1c:	|  +-------------- bra.w 14ff4 <getTextFromAnyVar+0x2d0>
		}

		case SVT_INT:
		{
			char * buff = AllocVec(10, MEMF_ANY);
   14f20:	|  |               moveq #10,d0
   14f22:	|  |               move.l d0,16(sp)
   14f26:	|  |               clr.l 12(sp)
   14f2a:	|  |               move.l 1c85c <SysBase>,d0
   14f30:	|  |               movea.l d0,a6
   14f32:	|  |               move.l 16(sp),d0
   14f36:	|  |               move.l 12(sp),d1
   14f3a:	|  |               jsr -684(a6)
   14f3e:	|  |               move.l d0,8(sp)
   14f42:	|  |               move.l 8(sp),d0
   14f46:	|  |               move.l d0,4(sp)
			if (! buff) {
   14f4a:	|  |           /-- bne.s 14f60 <getTextFromAnyVar+0x23c>
				KPrintF("getTextFromAnyVar: Cannot allocate Memory");
   14f4c:	|  |           |   pea 19e87 <graphics.c.1c13408a+0x1ee>
   14f52:	|  |           |   jsr 17176 <KPrintF>
   14f58:	|  |           |   addq.l #4,sp
				return NULL;
   14f5a:	|  |           |   moveq #0,d0
   14f5c:	|  +-----------|-- bra.w 14ff4 <getTextFromAnyVar+0x2d0>
			}
			sprintf (buff, "%i", from->varData.intValue);
   14f60:	|  |           \-> movea.l 84(sp),a0
   14f64:	|  |               move.l 4(a0),d0
   14f68:	|  |               move.l d0,-(sp)
   14f6a:	|  |               pea 19eb1 <graphics.c.1c13408a+0x218>
   14f70:	|  |               move.l 12(sp),-(sp)
   14f74:	|  |               jsr 13f58 <sprintf>
   14f7a:	|  |               lea 12(sp),sp
			return buff;
   14f7e:	|  |               move.l 4(sp),d0
   14f82:	|  +-------------- bra.s 14ff4 <getTextFromAnyVar+0x2d0>
		}

		case SVT_FILE:
		{

			return joinStrings ("", resourceNameFromNum (from->varData.intValue));
   14f84:	|  |               movea.l 84(sp),a0
   14f88:	|  |               move.l 4(a0),d0
   14f8c:	|  |               move.l d0,-(sp)
   14f8e:	|  |               jsr 4178 <resourceNameFromNum>
   14f94:	|  |               addq.l #4,sp
   14f96:	|  |               move.l d0,-(sp)
   14f98:	|  |               pea 188c6 <PutChar+0xc7c>
   14f9e:	|  |               jsr 13c7a <joinStrings>
   14fa4:	|  |               addq.l #8,sp
   14fa6:	|  +-------------- bra.s 14ff4 <getTextFromAnyVar+0x2d0>
		}

		case SVT_OBJTYPE:
		{
			struct objectType * thisType = findObjectType (from->varData.intValue);
   14fa8:	|  |               movea.l 84(sp),a0
   14fac:	|  |               move.l 4(a0),d0
   14fb0:	|  |               move.l d0,-(sp)
   14fb2:	|  |               jsr d4b8 <findObjectType>
   14fb8:	|  |               addq.l #4,sp
   14fba:	|  |               move.l d0,40(sp)
			if (thisType) return copyString (thisType -> screenName);
   14fbe:	+--|-------------- beq.s 14fd2 <getTextFromAnyVar+0x2ae>
   14fc0:	|  |               movea.l 40(sp),a0
   14fc4:	|  |               move.l (a0),d0
   14fc6:	|  |               move.l d0,-(sp)
   14fc8:	|  |               jsr b8 <copyString>
   14fce:	|  |               addq.l #4,sp
   14fd0:	|  +-------------- bra.s 14ff4 <getTextFromAnyVar+0x2d0>
		}

		default:
		break;
   14fd2:	\--|-------------> nop
	}

	return copyString (typeName[from->varType]);
   14fd4:	   |               movea.l 84(sp),a0
   14fd8:	   |               move.l (a0),d0
   14fda:	   |               add.l d0,d0
   14fdc:	   |               movea.l d0,a1
   14fde:	   |               adda.l d0,a1
   14fe0:	   |               lea 1c738 <typeName>,a0
   14fe6:	   |               move.l (0,a1,a0.l),d0
   14fea:	   |               move.l d0,-(sp)
   14fec:	   |               jsr b8 <copyString>
   14ff2:	   |               addq.l #4,sp
}
   14ff4:	   \-------------> movea.l (sp)+,a6
   14ff6:	                   lea 76(sp),sp
   14ffa:	                   rts

00014ffc <newAnimationVariable>:


void newAnimationVariable (struct variable *thisVar, struct personaAnimation * i) {
	unlinkVar (thisVar);
   14ffc:	move.l 4(sp),-(sp)
   15000:	jsr 1499c <unlinkVar>
   15006:	addq.l #4,sp
	thisVar->varType = SVT_ANIM;
   15008:	movea.l 4(sp),a0
   1500c:	moveq #8,d0
   1500e:	move.l d0,(a0)
	thisVar->varData.animHandler = i;
   15010:	movea.l 4(sp),a0
   15014:	move.l 8(sp),4(a0)
}
   1501a:	nop
   1501c:	rts

0001501e <newCostumeVariable>:

void newCostumeVariable (struct variable * thisVar, struct persona * i) {
	unlinkVar(thisVar);
   1501e:	move.l 4(sp),-(sp)
   15022:	jsr 1499c <unlinkVar>
   15028:	addq.l #4,sp
	thisVar->varType = SVT_COSTUME;
   1502a:	movea.l 4(sp),a0
   1502e:	moveq #9,d0
   15030:	move.l d0,(a0)
	thisVar->varData.costumeHandler = i;
   15032:	movea.l 4(sp),a0
   15036:	move.l 8(sp),4(a0)
}
   1503c:	nop
   1503e:	rts

00015040 <setVariable>:

void setVariable (struct variable *thisVar, enum variableType vT, int value) {
	unlinkVar (thisVar);
   15040:	move.l 4(sp),-(sp)
   15044:	jsr 1499c <unlinkVar>
   1504a:	addq.l #4,sp
	thisVar->varType = vT;
   1504c:	movea.l 4(sp),a0
   15050:	move.l 8(sp),(a0)
	thisVar->varData.intValue = value;
   15054:	movea.l 4(sp),a0
   15058:	move.l 12(sp),4(a0)
}
   1505e:	nop
   15060:	rts

00015062 <stackGetByIndex>:

struct variable * stackGetByIndex (struct variableStack * vS, unsigned int theIndex) {
    while (theIndex--) {
   15062:	      /-- bra.s 15074 <stackGetByIndex+0x12>
        vS = vS->next;
   15064:	/-----|-> movea.l 4(sp),a0
   15068:	|     |   move.l 8(a0),4(sp)
        if (!vS) {
   1506e:	|     +-- bne.s 15074 <stackGetByIndex+0x12>
            return NULL;
   15070:	|     |   moveq #0,d0
   15072:	|  /--|-- bra.s 15088 <stackGetByIndex+0x26>
    while (theIndex--) {
   15074:	|  |  \-> move.l 8(sp),d0
   15078:	|  |      move.l d0,d1
   1507a:	|  |      subq.l #1,d1
   1507c:	|  |      move.l d1,8(sp)
   15080:	|  |      tst.l d0
   15082:	\--|----- bne.s 15064 <stackGetByIndex+0x2>
        }
    }
    return &(vS->thisVar);
   15084:	   |      move.l 4(sp),d0
}
   15088:	   \----> rts

0001508a <stackFindLast>:

// Would be a LOT better just to keep this up to date in deletevarfromstack function... ah well
struct variableStack * stackFindLast (struct variableStack * hunt) {
	if (hunt == NULL)
   1508a:	          tst.l 4(sp)
   1508e:	      /-- bne.s 1509e <stackFindLast+0x14>
		return NULL;
   15090:	      |   moveq #0,d0
   15092:	/-----|-- bra.s 150ac <stackFindLast+0x22>

	while (hunt->next)
		hunt = hunt->next;
   15094:	|  /--|-> movea.l 4(sp),a0
   15098:	|  |  |   move.l 8(a0),4(sp)
	while (hunt->next)
   1509e:	|  |  \-> movea.l 4(sp),a0
   150a2:	|  |      move.l 8(a0),d0
   150a6:	|  \----- bne.s 15094 <stackFindLast+0xa>

	return hunt;
   150a8:	|         move.l 4(sp),d0
}
   150ac:	\-------> rts

000150ae <stackSize>:

int stackSize (const struct stackHandler * me) {
   150ae:	       subq.l #8,sp
	int r = 0;
   150b0:	       clr.l 4(sp)
	struct variableStack * a = me -> first;
   150b4:	       movea.l 12(sp),a0
   150b8:	       move.l (a0),(sp)
	while (a) {
   150ba:	   /-- bra.s 150c6 <stackSize+0x18>
		r ++;
   150bc:	/--|-> addq.l #1,4(sp)
		a = a -> next;
   150c0:	|  |   movea.l (sp),a0
   150c2:	|  |   move.l 8(a0),(sp)
	while (a) {
   150c6:	|  \-> tst.l (sp)
   150c8:	\----- bne.s 150bc <stackSize+0xe>
	}
	return r;
   150ca:	       move.l 4(sp),d0
}
   150ce:	       addq.l #8,sp
   150d0:	       rts

000150d2 <trimStack>:

void trimStack (struct variableStack ** stack) {
   150d2:	subq.l #8,sp
   150d4:	move.l a6,-(sp)

	struct variableStack* killMe = *stack;
   150d6:	movea.l 16(sp),a0
   150da:	move.l (a0),8(sp)

	*stack = (*stack)->next;
   150de:	movea.l 16(sp),a0
   150e2:	movea.l (a0),a0
   150e4:	move.l 8(a0),d0
   150e8:	movea.l 16(sp),a0
   150ec:	move.l d0,(a0)

	// When calling this, we've ALWAYS checked that stack != NULL
	unlinkVar (&(killMe -> thisVar));
   150ee:	move.l 8(sp),d0
   150f2:	move.l d0,-(sp)
   150f4:	jsr 1499c <unlinkVar>
   150fa:	addq.l #4,sp
	FreeVec(killMe);
   150fc:	move.l 8(sp),4(sp)
   15102:	move.l 1c85c <SysBase>,d0
   15108:	movea.l d0,a6
   1510a:	movea.l 4(sp),a1
   1510e:	jsr -690(a6)
   15112:	nop
   15114:	movea.l (sp)+,a6
   15116:	addq.l #8,sp
   15118:	rts

0001511a <freeze>:
extern BOOL backdropExists;

struct frozenStuffStruct * frozenStuff = NULL;


BOOL freeze () {
   1511a:	       lea -52(sp),sp
   1511e:	       move.l a6,-(sp)
	KPrintF("calling freeze()\n");
   15120:	       pea 19eb4 <graphics.c.1c13408a+0x21b>
   15126:	       jsr 17176 <KPrintF>
   1512c:	       addq.l #4,sp

	struct frozenStuffStruct * newFreezer = (struct frozenStuffStruct *) AllocVec(sizeof(struct frozenStuffStruct), MEMF_ANY);
   1512e:	       moveq #68,d0
   15130:	       move.l d0,52(sp)
   15134:	       clr.l 48(sp)
   15138:	       move.l 1c85c <SysBase>,d0
   1513e:	       movea.l d0,a6
   15140:	       move.l 52(sp),d0
   15144:	       move.l 48(sp),d1
   15148:	       jsr -684(a6)
   1514c:	       move.l d0,44(sp)
   15150:	       move.l 44(sp),d0
   15154:	       move.l d0,40(sp)
	if (!newFreezer) return FALSE;
   15158:	   /-- bne.s 15160 <freeze+0x46>
   1515a:	   |   clr.w d0
   1515c:	/--|-- bra.w 152ea <freeze+0x1d0>

	CstFreeze();
   15160:	|  \-> jsr 1d94 <CstFreeze>

	// Grab a copy of the current scene
	//ToDo: Amiga Graphics handling here	

	int picWidth = sceneWidth;
   15166:	|      move.l 1c8f8 <sceneWidth>,d0
   1516c:	|      move.l d0,36(sp)
	int picHeight = sceneHeight;	
   15170:	|      move.l 1c8fc <sceneHeight>,d0
   15176:	|      move.l d0,32(sp)



	newFreezer -> sceneWidth = sceneWidth;
   1517a:	|      move.l 1c8f8 <sceneWidth>,d0
   15180:	|      movea.l 40(sp),a0
   15184:	|      move.l d0,48(a0)
	newFreezer -> sceneHeight = sceneHeight;
   15188:	|      move.l 1c8fc <sceneHeight>,d0
   1518e:	|      movea.l 40(sp),a0
   15192:	|      move.l d0,52(a0)
	newFreezer -> cameraX = cameraX;
   15196:	|      move.l 1c916 <cameraX>,d0
   1519c:	|      movea.l 40(sp),a0
   151a0:	|      move.l d0,40(a0)
	newFreezer -> cameraY = cameraY;
   151a4:	|      move.l 1c91a <cameraY>,d0
   151aa:	|      movea.l 40(sp),a0
   151ae:	|      move.l d0,44(a0)
	newFreezer -> cameraZoom = cameraZoom;
   151b2:	|      move.l 1c1fa <cameraZoom>,d0
   151b8:	|      movea.l 40(sp),a0
   151bc:	|      move.l d0,56(a0)
	// resizeBackdrop kills parallax stuff, light map, z-buffer...
	/*if (! resizeBackdrop (winWidth, winHeight)) {
		KPrintF("Can't create new temporary backdrop buffer");
	}*/

	backdropExists = TRUE;
   151c0:	|      move.w #1,1c904 <backdropExists>

	newFreezer -> allPeople = allPeople;
   151c8:	|      move.l 1c8c0 <allPeople>,d0
   151ce:	|      movea.l 40(sp),a0
   151d2:	|      move.l d0,(a0)
	allPeople = NULL;
   151d4:	|      clr.l 1c8c0 <allPeople>

	struct statusStuff * newStatusStuff = (struct statusStuff *) AllocVec(sizeof(struct statusStuff), MEMF_ANY);
   151da:	|      moveq #42,d0
   151dc:	|      move.l d0,28(sp)
   151e0:	|      clr.l 24(sp)
   151e4:	|      move.l 1c85c <SysBase>,d0
   151ea:	|      movea.l d0,a6
   151ec:	|      move.l 28(sp),d0
   151f0:	|      move.l 24(sp),d1
   151f4:	|      jsr -684(a6)
   151f8:	|      move.l d0,20(sp)
   151fc:	|      move.l 20(sp),d0
   15200:	|      move.l d0,16(sp)
	if (!newStatusStuff) return FALSE;	
   15204:	|  /-- bne.s 1520c <freeze+0xf2>
   15206:	|  |   clr.w d0
   15208:	+--|-- bra.w 152ea <freeze+0x1d0>

	newFreezer -> allScreenRegions = allScreenRegions;
   1520c:	|  \-> move.l 1c96c <allScreenRegions>,d0
   15212:	|      movea.l 40(sp),a0
   15216:	|      move.l d0,4(a0)
	allScreenRegions = NULL;
   1521a:	|      clr.l 1c96c <allScreenRegions>
	overRegion = NULL;
   15220:	|      clr.l 1c970 <overRegion>

	newFreezer -> mouseCursorAnim = mouseCursorAnim;
   15226:	|      move.l 1c762 <mouseCursorAnim>,d0
   1522c:	|      movea.l 40(sp),a0
   15230:	|      move.l d0,32(a0)
	newFreezer -> mouseCursorFrameNum = mouseCursorFrameNum;
   15234:	|      move.l 1c766 <mouseCursorFrameNum>,d0
   1523a:	|      movea.l 40(sp),a0
   1523e:	|      move.l d0,36(a0)
	mouseCursorAnim = makeNullAnim ();
   15242:	|      jsr ad28 <makeNullAnim>
   15248:	|      move.l d0,1c762 <mouseCursorAnim>
	mouseCursorFrameNum = 0;
   1524e:	|      clr.l 1c766 <mouseCursorFrameNum>

	newFreezer -> zBuffer = zBuffer;
   15254:	|      move.l 1c8bc <zBuffer>,d0
   1525a:	|      movea.l 40(sp),a0
   1525e:	|      move.l d0,60(a0)
	zBuffer = NULL;
   15262:	|      clr.l 1c8bc <zBuffer>

	newFreezer -> speech = speech;
   15268:	|      move.l 1c8b8 <speech>,d0
   1526e:	|      movea.l 40(sp),a0
   15272:	|      move.l d0,20(a0)
	initSpeech ();
   15276:	|      jsr 7f1e <initSpeech>

	newFreezer -> currentEvents = (struct eventhandlers *) AllocVec(sizeof(struct eventHandlers), MEMF_ANY);
   1527c:	|      moveq #28,d0
   1527e:	|      move.l d0,12(sp)
   15282:	|      clr.l 8(sp)
   15286:	|      move.l 1c85c <SysBase>,d0
   1528c:	|      movea.l d0,a6
   1528e:	|      move.l 12(sp),d0
   15292:	|      move.l 8(sp),d1
   15296:	|      jsr -684(a6)
   1529a:	|      move.l d0,4(sp)
   1529e:	|      move.l 4(sp),d0
   152a2:	|      movea.l 40(sp),a0
   152a6:	|      move.l d0,28(a0)
	if (!newFreezer -> currentEvents) return FALSE;
   152aa:	|      movea.l 40(sp),a0
   152ae:	|      move.l 28(a0),d0
   152b2:	|  /-- bne.s 152b8 <freeze+0x19e>
   152b4:	|  |   clr.w d0
   152b6:	+--|-- bra.s 152ea <freeze+0x1d0>
	memset (newFreezer -> currentEvents, 0, sizeof(struct eventHandlers));
   152b8:	|  \-> movea.l 40(sp),a0
   152bc:	|      move.l 28(a0),d0
   152c0:	|      pea 1c <_start+0x1c>
   152c4:	|      clr.l -(sp)
   152c6:	|      move.l d0,-(sp)
   152c8:	|      jsr 170fa <memset>
   152ce:	|      lea 12(sp),sp

	newFreezer -> next = frozenStuff;
   152d2:	|      move.l 1c950 <frozenStuff>,d0
   152d8:	|      movea.l 40(sp),a0
   152dc:	|      move.l d0,64(a0)
	frozenStuff = newFreezer;
   152e0:	|      move.l 40(sp),1c950 <frozenStuff>

	return TRUE;
   152e8:	|      moveq #1,d0
}
   152ea:	\----> movea.l (sp)+,a6
   152ec:	       lea 52(sp),sp
   152f0:	       rts

000152f2 <unfreeze>:

void unfreeze () {
   152f2:	       lea -16(sp),sp
   152f6:	       move.l a6,-(sp)
	struct frozenStuffStruct * killMe = frozenStuff;
   152f8:	       move.l 1c950 <frozenStuff>,16(sp)

	if (! frozenStuff) return;
   15300:	       move.l 1c950 <frozenStuff>,d0
   15306:	/----- beq.w 1553e <unfreeze+0x24c>

	CstUnfreeze();
   1530a:	|      jsr 3d70 <CstUnfreeze>

	sceneWidth = frozenStuff -> sceneWidth;
   15310:	|      movea.l 1c950 <frozenStuff>,a0
   15316:	|      move.l 48(a0),d0
   1531a:	|      move.l d0,1c8f8 <sceneWidth>
	sceneHeight = frozenStuff -> sceneHeight;
   15320:	|      movea.l 1c950 <frozenStuff>,a0
   15326:	|      move.l 52(a0),d0
   1532a:	|      move.l d0,1c8fc <sceneHeight>

	cameraX = frozenStuff -> cameraX;
   15330:	|      movea.l 1c950 <frozenStuff>,a0
   15336:	|      move.l 40(a0),d0
   1533a:	|      move.l d0,1c916 <cameraX>
	cameraY = frozenStuff -> cameraY;
   15340:	|      movea.l 1c950 <frozenStuff>,a0
   15346:	|      move.l 44(a0),d0
   1534a:	|      move.l d0,1c91a <cameraY>
	input.mouseX = (int)(input.mouseX * cameraZoom);
   15350:	|      move.l 1c818 <input+0xa>,d0
   15356:	|      move.l d0,-(sp)
   15358:	|      jsr 175b2 <__floatsisf>
   1535e:	|      addq.l #4,sp
   15360:	|      move.l d0,d1
   15362:	|      move.l 1c1fa <cameraZoom>,d0
   15368:	|      move.l d0,-(sp)
   1536a:	|      move.l d1,-(sp)
   1536c:	|      jsr 17664 <__mulsf3>
   15372:	|      addq.l #8,sp
   15374:	|      move.l d0,-(sp)
   15376:	|      jsr 1754a <__fixsfsi>
   1537c:	|      addq.l #4,sp
   1537e:	|      move.l d0,1c818 <input+0xa>
	input.mouseY = (int)(input.mouseY * cameraZoom);
   15384:	|      move.l 1c81c <input+0xe>,d0
   1538a:	|      move.l d0,-(sp)
   1538c:	|      jsr 175b2 <__floatsisf>
   15392:	|      addq.l #4,sp
   15394:	|      move.l d0,d1
   15396:	|      move.l 1c1fa <cameraZoom>,d0
   1539c:	|      move.l d0,-(sp)
   1539e:	|      move.l d1,-(sp)
   153a0:	|      jsr 17664 <__mulsf3>
   153a6:	|      addq.l #8,sp
   153a8:	|      move.l d0,-(sp)
   153aa:	|      jsr 1754a <__fixsfsi>
   153b0:	|      addq.l #4,sp
   153b2:	|      move.l d0,1c81c <input+0xe>
	cameraZoom = frozenStuff -> cameraZoom;
   153b8:	|      movea.l 1c950 <frozenStuff>,a0
   153be:	|      move.l 56(a0),d0
   153c2:	|      move.l d0,1c1fa <cameraZoom>
	input.mouseX = (int)(input.mouseX / cameraZoom);
   153c8:	|      move.l 1c818 <input+0xa>,d0
   153ce:	|      move.l d0,-(sp)
   153d0:	|      jsr 175b2 <__floatsisf>
   153d6:	|      addq.l #4,sp
   153d8:	|      move.l d0,d1
   153da:	|      move.l 1c1fa <cameraZoom>,d0
   153e0:	|      move.l d0,-(sp)
   153e2:	|      move.l d1,-(sp)
   153e4:	|      jsr 1745e <__divsf3>
   153ea:	|      addq.l #8,sp
   153ec:	|      move.l d0,-(sp)
   153ee:	|      jsr 1754a <__fixsfsi>
   153f4:	|      addq.l #4,sp
   153f6:	|      move.l d0,1c818 <input+0xa>
	input.mouseY = (int)(input.mouseY / cameraZoom);
   153fc:	|      move.l 1c81c <input+0xe>,d0
   15402:	|      move.l d0,-(sp)
   15404:	|      jsr 175b2 <__floatsisf>
   1540a:	|      addq.l #4,sp
   1540c:	|      move.l d0,d1
   1540e:	|      move.l 1c1fa <cameraZoom>,d0
   15414:	|      move.l d0,-(sp)
   15416:	|      move.l d1,-(sp)
   15418:	|      jsr 1745e <__divsf3>
   1541e:	|      addq.l #8,sp
   15420:	|      move.l d0,-(sp)
   15422:	|      jsr 1754a <__fixsfsi>
   15428:	|      addq.l #4,sp
   1542a:	|      move.l d0,1c81c <input+0xe>

	killAllPeople ();
   15430:	|      jsr aa30 <killAllPeople>
	allPeople = frozenStuff -> allPeople;
   15436:	|      movea.l 1c950 <frozenStuff>,a0
   1543c:	|      move.l (a0),d0
   1543e:	|      move.l d0,1c8c0 <allPeople>

	killAllRegions ();
   15444:	|      jsr 159c6 <killAllRegions>
	allScreenRegions = frozenStuff -> allScreenRegions;
   1544a:	|      movea.l 1c950 <frozenStuff>,a0
   15450:	|      move.l 4(a0),d0
   15454:	|      move.l d0,1c96c <allScreenRegions>
	
	deleteAnim (mouseCursorAnim);  
   1545a:	|      move.l 1c762 <mouseCursorAnim>,d0
   15460:	|      move.l d0,-(sp)
   15462:	|      jsr 9924 <deleteAnim>
   15468:	|      addq.l #4,sp
	mouseCursorAnim = frozenStuff -> mouseCursorAnim;
   1546a:	|      movea.l 1c950 <frozenStuff>,a0
   15470:	|      move.l 32(a0),d0
   15474:	|      move.l d0,1c762 <mouseCursorAnim>
	mouseCursorFrameNum = frozenStuff -> mouseCursorFrameNum;	
   1547a:	|      movea.l 1c950 <frozenStuff>,a0
   15480:	|      move.l 36(a0),d0
   15484:	|      move.l d0,1c766 <mouseCursorFrameNum>

	killZBuffer ();
   1548a:	|      jsr 8792 <killZBuffer>
	zBuffer = frozenStuff->zBuffer;
   15490:	|      movea.l 1c950 <frozenStuff>,a0
   15496:	|      move.l 60(a0),d0
   1549a:	|      move.l d0,1c8bc <zBuffer>

	if (currentEvents) FreeVec(currentEvents);
   154a0:	|      move.l 1c1d4 <currentEvents>,d0
   154a6:	|  /-- beq.s 154c0 <unfreeze+0x1ce>
   154a8:	|  |   move.l 1c1d4 <currentEvents>,12(sp)
   154b0:	|  |   move.l 1c85c <SysBase>,d0
   154b6:	|  |   movea.l d0,a6
   154b8:	|  |   movea.l 12(sp),a1
   154bc:	|  |   jsr -690(a6)
	currentEvents = frozenStuff -> currentEvents;
   154c0:	|  \-> movea.l 1c950 <frozenStuff>,a0
   154c6:	|      move.l 28(a0),d0
   154ca:	|      move.l d0,1c1d4 <currentEvents>

	killAllSpeech ();
   154d0:	|      jsr 7fb6 <killAllSpeech>
	if (speech) FreeVec(speech);
   154d6:	|      move.l 1c8b8 <speech>,d0
   154dc:	|  /-- beq.s 154f6 <unfreeze+0x204>
   154de:	|  |   move.l 1c8b8 <speech>,8(sp)
   154e6:	|  |   move.l 1c85c <SysBase>,d0
   154ec:	|  |   movea.l d0,a6
   154ee:	|  |   movea.l 8(sp),a1
   154f2:	|  |   jsr -690(a6)
	speech = frozenStuff -> speech;
   154f6:	|  \-> movea.l 1c950 <frozenStuff>,a0
   154fc:	|      move.l 20(a0),d0
   15500:	|      move.l d0,1c8b8 <speech>

	frozenStuff = frozenStuff -> next;
   15506:	|      movea.l 1c950 <frozenStuff>,a0
   1550c:	|      move.l 64(a0),d0
   15510:	|      move.l d0,1c950 <frozenStuff>

	overRegion = NULL;
   15516:	|      clr.l 1c970 <overRegion>
	if (killMe) FreeVec(killMe);
   1551c:	|      tst.l 16(sp)
   15520:	|  /-- beq.s 15538 <unfreeze+0x246>
   15522:	|  |   move.l 16(sp),4(sp)
   15528:	|  |   move.l 1c85c <SysBase>,d0
   1552e:	|  |   movea.l d0,a6
   15530:	|  |   movea.l 4(sp),a1
   15534:	|  |   jsr -690(a6)
	killMe = NULL;
   15538:	|  \-> clr.l 16(sp)
   1553c:	|  /-- bra.s 15540 <unfreeze+0x24e>
	if (! frozenStuff) return;
   1553e:	\--|-> nop
}
   15540:	   \-> movea.l (sp)+,a6
   15542:	       lea 16(sp),sp
   15546:	       rts

00015548 <isInFont>:
unsigned int fontTableSize = 0;
struct loadedSpriteBank *theFont;


BOOL isInFont (char * theText) {
	KPrintF("isInFont: Not implemented yet on Amiga"); //Todo: Implement on Amiga
   15548:	pea 19ec6 <graphics.c.1c13408a+0x22d>
   1554e:	jsr 17176 <KPrintF>
   15554:	addq.l #4,sp
	return FALSE;
   15556:	clr.w d0
}
   15558:	rts

0001555a <loadFont>:

BOOL loadFont (int filenum, char * charOrder, int h) {
   1555a:	          lea -44(sp),sp
   1555e:	          move.l a6,-(sp)
   15560:	          move.l d2,-(sp)
	unsigned int a = 0;
   15562:	          clr.l 48(sp)
	ULONG c;

	if( fontOrderString) FreeVec(fontOrderString);
   15566:	          move.l 1c95c <fontOrderString>,d0
   1556c:	      /-- beq.s 15586 <loadFont+0x2c>
   1556e:	      |   move.l 1c95c <fontOrderString>,36(sp)
   15576:	      |   move.l 1c85c <SysBase>,d0
   1557c:	      |   movea.l d0,a6
   1557e:	      |   movea.l 36(sp),a1
   15582:	      |   jsr -690(a6)
	fontOrderString = copyString(charOrder);
   15586:	      \-> move.l 60(sp),-(sp)
   1558a:	          jsr b8 <copyString>
   15590:	          addq.l #4,sp
   15592:	          move.l d0,1c95c <fontOrderString>
	if( theFont) forgetSpriteBank(theFont);
   15598:	          move.l 1c968 <theFont>,d0
   1559e:	      /-- beq.s 155b0 <loadFont+0x56>
   155a0:	      |   move.l 1c968 <theFont>,d0
   155a6:	      |   move.l d0,-(sp)
   155a8:	      |   jsr 8a96 <forgetSpriteBank>
   155ae:	      |   addq.l #4,sp
	theFont = AllocVec( sizeof(struct loadedSpriteBank), MEMF_ANY );
   155b0:	      \-> moveq #26,d0
   155b2:	          move.l d0,32(sp)
   155b6:	          clr.l 28(sp)
   155ba:	          move.l 1c85c <SysBase>,d0
   155c0:	          movea.l d0,a6
   155c2:	          move.l 32(sp),d0
   155c6:	          move.l 28(sp),d1
   155ca:	          jsr -684(a6)
   155ce:	          move.l d0,24(sp)
   155d2:	          move.l 24(sp),d0
   155d6:	          move.l d0,1c968 <theFont>

	loadedFontNum = filenum;
   155dc:	          move.l 56(sp),1c958 <loadedFontNum>

	fontTableSize = 0;
   155e4:	          clr.l 1c964 <fontTableSize>
	char *tmp = charOrder;
   155ea:	          move.l 60(sp),44(sp)
	while (*tmp) {        
   155f0:	   /----- bra.s 1562c <loadFont+0xd2>
		if (*tmp > (UBYTE) fontTableSize) fontTableSize = *tmp;
   155f2:	/--|----> movea.l 44(sp),a0
   155f6:	|  |      move.b (a0),d0
   155f8:	|  |      ext.w d0
   155fa:	|  |      movea.w d0,a0
   155fc:	|  |      move.l 1c964 <fontTableSize>,d0
   15602:	|  |      move.l d0,d0
   15604:	|  |      move.b d0,d0
   15606:	|  |      andi.l #255,d0
   1560c:	|  |      cmp.l a0,d0
   1560e:	|  |  /-- bge.s 15620 <loadFont+0xc6>
   15610:	|  |  |   movea.l 44(sp),a0
   15614:	|  |  |   move.b (a0),d0
   15616:	|  |  |   ext.w d0
   15618:	|  |  |   movea.w d0,a0
   1561a:	|  |  |   move.l a0,1c964 <fontTableSize>
		*tmp++;
   15620:	|  |  \-> move.l 44(sp),d0
   15624:	|  |      move.l d0,d1
   15626:	|  |      addq.l #1,d1
   15628:	|  |      move.l d1,44(sp)
	while (*tmp) {        
   1562c:	|  \----> movea.l 44(sp),a0
   15630:	|         move.b (a0),d0
   15632:	\-------- bne.s 155f2 <loadFont+0x98>
	}
	fontTableSize++;
   15634:	          move.l 1c964 <fontTableSize>,d0
   1563a:	          addq.l #1,d0
   1563c:	          move.l d0,1c964 <fontTableSize>

	if( fontTable) FreeVec(fontTable);
   15642:	          move.l 1c960 <fontTable>,d0
   15648:	      /-- beq.s 15662 <loadFont+0x108>
   1564a:	      |   move.l 1c960 <fontTable>,20(sp)
   15652:	      |   move.l 1c85c <SysBase>,d0
   15658:	      |   movea.l d0,a6
   1565a:	      |   movea.l 20(sp),a1
   1565e:	      |   jsr -690(a6)
	fontTable = AllocVec(sizeof(ULONG) * fontTableSize, MEMF_ANY);
   15662:	      \-> move.l 1c964 <fontTableSize>,d0
   15668:	          add.l d0,d0
   1566a:	          add.l d0,d0
   1566c:	          move.l d0,16(sp)
   15670:	          clr.l 12(sp)
   15674:	          move.l 1c85c <SysBase>,d0
   1567a:	          movea.l d0,a6
   1567c:	          move.l 16(sp),d0
   15680:	          move.l 12(sp),d1
   15684:	          jsr -684(a6)
   15688:	          move.l d0,8(sp)
   1568c:	          move.l 8(sp),d0
   15690:	          move.l d0,1c960 <fontTable>
	if (!fontTable) return FALSE;
   15696:	          move.l 1c960 <fontTable>,d0
   1569c:	      /-- bne.s 156a4 <loadFont+0x14a>
   1569e:	      |   clr.w d0
   156a0:	/-----|-- bra.w 15750 <loadFont+0x1f6>

	for (a = 0;  a < fontTableSize; a++) {
   156a4:	|     \-> clr.l 48(sp)
   156a8:	|     /-- bra.s 156c2 <loadFont+0x168>
		fontTable[a] = 0;
   156aa:	|  /--|-> move.l 1c960 <fontTable>,d1
   156b0:	|  |  |   move.l 48(sp),d0
   156b4:	|  |  |   add.l d0,d0
   156b6:	|  |  |   add.l d0,d0
   156b8:	|  |  |   movea.l d1,a0
   156ba:	|  |  |   adda.l d0,a0
   156bc:	|  |  |   clr.l (a0)
	for (a = 0;  a < fontTableSize; a++) {
   156be:	|  |  |   addq.l #1,48(sp)
   156c2:	|  |  \-> move.l 1c964 <fontTableSize>,d0
   156c8:	|  |      cmp.l 48(sp),d0
   156cc:	|  \----- bhi.s 156aa <loadFont+0x150>
	}
	a = 0;
   156ce:	|         clr.l 48(sp)
	int i = 0;
   156d2:	|         clr.l 40(sp)
	tmp = charOrder;
   156d6:	|         move.l 60(sp),44(sp)
	while (*tmp) {
   156dc:	|     /-- bra.s 1570c <loadFont+0x1b2>
		fontTable[*tmp++] = i;
   156de:	|  /--|-> move.l 1c960 <fontTable>,d1
   156e4:	|  |  |   move.l 44(sp),d0
   156e8:	|  |  |   move.l d0,d2
   156ea:	|  |  |   addq.l #1,d2
   156ec:	|  |  |   move.l d2,44(sp)
   156f0:	|  |  |   movea.l d0,a0
   156f2:	|  |  |   move.b (a0),d0
   156f4:	|  |  |   ext.w d0
   156f6:	|  |  |   movea.w d0,a0
   156f8:	|  |  |   move.l a0,d0
   156fa:	|  |  |   add.l a0,d0
   156fc:	|  |  |   add.l d0,d0
   156fe:	|  |  |   movea.l d1,a0
   15700:	|  |  |   adda.l d0,a0
   15702:	|  |  |   move.l 40(sp),d0
   15706:	|  |  |   move.l d0,(a0)
		i++;
   15708:	|  |  |   addq.l #1,40(sp)
	while (*tmp) {
   1570c:	|  |  \-> movea.l 44(sp),a0
   15710:	|  |      move.b (a0),d0
   15712:	|  \----- bne.s 156de <loadFont+0x184>
	}

	if (!loadSpriteBank(filenum, &theFont->bank, TRUE)) {
   15714:	|         move.l 1c968 <theFont>,d0
   1571a:	|         addq.l #8,d0
   1571c:	|         pea 1 <_start+0x1>
   15720:	|         move.l d0,-(sp)
   15722:	|         move.l 64(sp),-(sp)
   15726:	|         jsr 8bb8 <loadSpriteBank>
   1572c:	|         lea 12(sp),sp
   15730:	|         tst.w d0
   15732:	|     /-- bne.s 15746 <loadFont+0x1ec>
		KPrintF("loadFont: Can't load font");
   15734:	|     |   pea 19eed <graphics.c.1c13408a+0x254>
   1573a:	|     |   jsr 17176 <KPrintF>
   15740:	|     |   addq.l #4,sp
		return FALSE;
   15742:	|     |   clr.w d0
   15744:	+-----|-- bra.s 15750 <loadFont+0x1f6>
	}
	fontHeight = h;
   15746:	|     \-> move.l 64(sp),1c954 <fontHeight>
	return TRUE;
   1574e:	|         moveq #1,d0
}
   15750:	\-------> move.l (sp)+,d2
   15752:	          movea.l (sp)+,a6
   15754:	          lea 44(sp),sp
   15758:	          rts

0001575a <pasteStringToBackdrop>:

void pasteStringToBackdrop(char *theText, int xOff, int y) {
   1575a:	                lea -12(sp),sp
    struct sprite *mySprite;
    int a = 0;
   1575e:	                clr.l 4(sp)

    if (!fontTableSize) return;
   15762:	                move.l 1c964 <fontTableSize>,d0
   15768:	/-------------- beq.w 15830 <pasteStringToBackdrop+0xd6>

    xOff += fontSpace >> 1;
   1576c:	|               move.w 1c760 <fontSpace>,d0
   15772:	|               asr.w #1,d0
   15774:	|               ext.l d0
   15776:	|               add.l d0,20(sp)
	char *tmp = theText;
   1577a:	|               move.l 16(sp),8(sp)
    while (*tmp) {        
   15780:	|     /-------- bra.w 15824 <pasteStringToBackdrop+0xca>
        mySprite = &theFont->bank.sprites[fontInTable( (UBYTE) *tmp)];
   15784:	|  /--|-------> movea.l 1c968 <theFont>,a0
   1578a:	|  |  |         movea.l 16(a0),a0
   1578e:	|  |  |         movea.l 8(sp),a1
   15792:	|  |  |         move.b (a1),d0
   15794:	|  |  |         move.b d0,d0
   15796:	|  |  |         andi.l #255,d0
   1579c:	|  |  |         move.l 1c964 <fontTableSize>,d1
   157a2:	|  |  |         cmp.l d0,d1
   157a4:	|  |  |  /----- bls.s 157d0 <pasteStringToBackdrop+0x76>
   157a6:	|  |  |  |      move.l 1c960 <fontTable>,d1
   157ac:	|  |  |  |      movea.l 8(sp),a1
   157b0:	|  |  |  |      move.b (a1),d0
   157b2:	|  |  |  |      move.b d0,d0
   157b4:	|  |  |  |      andi.l #255,d0
   157ba:	|  |  |  |      add.l d0,d0
   157bc:	|  |  |  |      add.l d0,d0
   157be:	|  |  |  |      movea.l d1,a1
   157c0:	|  |  |  |      adda.l d0,a1
   157c2:	|  |  |  |      move.l (a1),d1
   157c4:	|  |  |  |      move.l d1,d0
   157c6:	|  |  |  |      lsl.l #3,d0
   157c8:	|  |  |  |      sub.l d1,d0
   157ca:	|  |  |  |      add.l d0,d0
   157cc:	|  |  |  |      add.l d0,d0
   157ce:	|  |  |  |  /-- bra.s 157d2 <pasteStringToBackdrop+0x78>
   157d0:	|  |  |  \--|-> moveq #0,d0
   157d2:	|  |  |     \-> adda.l d0,a0
   157d4:	|  |  |         move.l a0,(sp)
        CstPasteChar( mySprite, xOff - mySprite->xhot, y - mySprite->yhot);
   157d6:	|  |  |         move.l 24(sp),d1
   157da:	|  |  |         movea.l (sp),a0
   157dc:	|  |  |         move.l 12(a0),d0
   157e0:	|  |  |         move.l d0,d0
   157e2:	|  |  |         sub.w d0,d1
   157e4:	|  |  |         move.w d1,d0
   157e6:	|  |  |         movea.w d0,a1
   157e8:	|  |  |         move.l 20(sp),d1
   157ec:	|  |  |         movea.l (sp),a0
   157ee:	|  |  |         move.l 8(a0),d0
   157f2:	|  |  |         move.l d0,d0
   157f4:	|  |  |         sub.w d0,d1
   157f6:	|  |  |         move.w d1,d0
   157f8:	|  |  |         movea.w d0,a0
   157fa:	|  |  |         move.l a1,-(sp)
   157fc:	|  |  |         move.l a0,-(sp)
   157fe:	|  |  |         move.l 8(sp),-(sp)
   15802:	|  |  |         jsr 2436 <CstPasteChar>
   15808:	|  |  |         lea 12(sp),sp
        xOff += mySprite->width + fontSpace;
   1580c:	|  |  |         movea.l (sp),a0
   1580e:	|  |  |         move.l (a0),d1
   15810:	|  |  |         move.w 1c760 <fontSpace>,d0
   15816:	|  |  |         movea.w d0,a0
   15818:	|  |  |         move.l d1,d0
   1581a:	|  |  |         add.l a0,d0
   1581c:	|  |  |         add.l d0,20(sp)
		tmp++;
   15820:	|  |  |         addq.l #1,8(sp)
    while (*tmp) {        
   15824:	|  |  \-------> movea.l 8(sp),a0
   15828:	|  |            move.b (a0),d0
   1582a:	|  \----------- bne.w 15784 <pasteStringToBackdrop+0x2a>
   1582e:	|           /-- bra.s 15832 <pasteStringToBackdrop+0xd8>
    if (!fontTableSize) return;
   15830:	\-----------|-> nop
    }
}
   15832:	            \-> lea 12(sp),sp
   15836:	                rts

00015838 <stringWidth>:


int stringWidth (char * theText) {
   15838:	       subq.l #8,sp
	int a = 0;
   1583a:	       clr.l 4(sp)
    ULONG c;
	int xOff = 0;
   1583e:	       clr.l (sp)

	if (! fontTableSize) return 0;
   15840:	       move.l 1c964 <fontTableSize>,d0
   15846:	/----- bne.s 1584c <stringWidth+0x14>
   15848:	|      moveq #0,d0
   1584a:	|  /-- bra.s 1584e <stringWidth+0x16>
	/*while (theText[a]) {
        c = u8_nextchar(theText, &a);
		xOff += theFont.sprites[fontInTable(c)].width + fontSpace;
	}Todo: Amigize this*/
	
	return xOff;
   1584c:	\--|-> move.l (sp),d0
}
   1584e:	   \-> addq.l #8,sp
   15850:	       rts

00015852 <addScreenRegion>:
struct screenRegion * allScreenRegions = NULL;
struct screenRegion * overRegion = NULL;



BOOL addScreenRegion(int x1, int y1, int x2, int y2, int sX, int sY, int di, int objectNum) {
   15852:	       lea -16(sp),sp
   15856:	       move.l a6,-(sp)
    struct screenRegion *newRegion = AllocVec(sizeof(struct screenRegion), MEMF_ANY);
   15858:	       moveq #36,d0
   1585a:	       move.l d0,16(sp)
   1585e:	       clr.l 12(sp)
   15862:	       move.l 1c85c <SysBase>,d0
   15868:	       movea.l d0,a6
   1586a:	       move.l 16(sp),d0
   1586e:	       move.l 12(sp),d1
   15872:	       jsr -684(a6)
   15876:	       move.l d0,8(sp)
   1587a:	       move.l 8(sp),d0
   1587e:	       move.l d0,4(sp)
    if (!newRegion) return FALSE;
   15882:	   /-- bne.s 1588a <addScreenRegion+0x38>
   15884:	   |   clr.w d0
   15886:	/--|-- bra.w 1590a <addScreenRegion+0xb8>
    newRegion->di = di;
   1588a:	|  \-> movea.l 4(sp),a0
   1588e:	|      move.l 48(sp),24(a0)
    newRegion->x1 = x1;
   15894:	|      movea.l 4(sp),a0
   15898:	|      move.l 24(sp),(a0)
    newRegion->y1 = y1;
   1589c:	|      movea.l 4(sp),a0
   158a0:	|      move.l 28(sp),4(a0)
    newRegion->x2 = x2;
   158a6:	|      movea.l 4(sp),a0
   158aa:	|      move.l 32(sp),8(a0)
    newRegion->y2 = y2;
   158b0:	|      movea.l 4(sp),a0
   158b4:	|      move.l 36(sp),12(a0)
    newRegion->sX = sX;
   158ba:	|      movea.l 4(sp),a0
   158be:	|      move.l 40(sp),16(a0)
    newRegion->sY = sY;
   158c4:	|      movea.l 4(sp),a0
   158c8:	|      move.l 44(sp),20(a0)
    newRegion->thisType = loadObjectType(objectNum);
   158ce:	|      move.l 52(sp),-(sp)
   158d2:	|      jsr d5a8 <loadObjectType>
   158d8:	|      addq.l #4,sp
   158da:	|      movea.l 4(sp),a0
   158de:	|      move.l d0,28(a0)
    newRegion->next = allScreenRegions;
   158e2:	|      move.l 1c96c <allScreenRegions>,d0
   158e8:	|      movea.l 4(sp),a0
   158ec:	|      move.l d0,32(a0)
    allScreenRegions = newRegion;
   158f0:	|      move.l 4(sp),1c96c <allScreenRegions>
    return (BOOL) (newRegion->thisType != NULL);
   158f8:	|      movea.l 4(sp),a0
   158fc:	|      move.l 28(a0),d0
   15900:	|      sne d0
   15902:	|      neg.b d0
   15904:	|      move.b d0,d0
   15906:	|      andi.w #255,d0
}
   1590a:	\----> movea.l (sp)+,a6
   1590c:	       lea 16(sp),sp
   15910:	       rts

00015912 <getOverRegion>:

void getOverRegion () {
   15912:	             subq.l #4,sp
	struct screenRegion * thisRegion = allScreenRegions;
   15914:	             move.l 1c96c <allScreenRegions>,(sp)
	while (thisRegion) {
   1591a:	   /-------- bra.s 15988 <getOverRegion+0x76>
		if ((input.mouseX >= thisRegion -> x1 - cameraX) && (input.mouseY >= thisRegion -> y1 - cameraY) &&
   1591c:	/--|-------> move.l 1c818 <input+0xa>,d0
   15922:	|  |         movea.l (sp),a0
   15924:	|  |         movea.l (a0),a0
   15926:	|  |         move.l 1c916 <cameraX>,d1
   1592c:	|  |         suba.l d1,a0
   1592e:	|  |         cmpa.l d0,a0
   15930:	|  |  /----- bgt.s 15982 <getOverRegion+0x70>
   15932:	|  |  |      move.l 1c81c <input+0xe>,d0
   15938:	|  |  |      movea.l (sp),a0
   1593a:	|  |  |      movea.l 4(a0),a0
   1593e:	|  |  |      move.l 1c91a <cameraY>,d1
   15944:	|  |  |      suba.l d1,a0
   15946:	|  |  |      cmpa.l d0,a0
   15948:	|  |  +----- bgt.s 15982 <getOverRegion+0x70>
			 (input.mouseX <= thisRegion -> x2 - cameraX) && (input.mouseY <= thisRegion -> y2 - cameraY)) {
   1594a:	|  |  |      move.l 1c818 <input+0xa>,d0
   15950:	|  |  |      movea.l (sp),a0
   15952:	|  |  |      movea.l 8(a0),a0
   15956:	|  |  |      move.l 1c916 <cameraX>,d1
   1595c:	|  |  |      suba.l d1,a0
		if ((input.mouseX >= thisRegion -> x1 - cameraX) && (input.mouseY >= thisRegion -> y1 - cameraY) &&
   1595e:	|  |  |      cmpa.l d0,a0
   15960:	|  |  +----- blt.s 15982 <getOverRegion+0x70>
			 (input.mouseX <= thisRegion -> x2 - cameraX) && (input.mouseY <= thisRegion -> y2 - cameraY)) {
   15962:	|  |  |      move.l 1c81c <input+0xe>,d0
   15968:	|  |  |      movea.l (sp),a0
   1596a:	|  |  |      movea.l 12(a0),a0
   1596e:	|  |  |      move.l 1c91a <cameraY>,d1
   15974:	|  |  |      suba.l d1,a0
   15976:	|  |  |      cmpa.l d0,a0
   15978:	|  |  +----- blt.s 15982 <getOverRegion+0x70>
			overRegion = thisRegion;
   1597a:	|  |  |      move.l (sp),1c970 <overRegion>
			return;
   15980:	|  |  |  /-- bra.s 15994 <getOverRegion+0x82>
		}
		thisRegion = thisRegion -> next;
   15982:	|  |  \--|-> movea.l (sp),a0
   15984:	|  |     |   move.l 32(a0),(sp)
	while (thisRegion) {
   15988:	|  \-----|-> tst.l (sp)
   1598a:	\--------|-- bne.s 1591c <getOverRegion+0xa>
	}
	overRegion = NULL;
   1598c:	         |   clr.l 1c970 <overRegion>
	return;
   15992:	         |   nop
}
   15994:	         \-> addq.l #4,sp
   15996:	             rts

00015998 <getRegionForObject>:


struct screenRegion * getRegionForObject (int obj) {
   15998:	             subq.l #4,sp
	struct screenRegion * thisRegion = allScreenRegions;
   1599a:	             move.l 1c96c <allScreenRegions>,(sp)

	while (thisRegion) {
   159a0:	   /-------- bra.s 159bc <getRegionForObject+0x24>
		if (obj == thisRegion -> thisType -> objectNum) {
   159a2:	/--|-------> movea.l (sp),a0
   159a4:	|  |         movea.l 28(a0),a0
   159a8:	|  |         move.l 4(a0),d0
   159ac:	|  |         cmp.l 8(sp),d0
   159b0:	|  |     /-- bne.s 159b6 <getRegionForObject+0x1e>
			return thisRegion;
   159b2:	|  |     |   move.l (sp),d0
   159b4:	|  |  /--|-- bra.s 159c2 <getRegionForObject+0x2a>
		}
		thisRegion = thisRegion -> next;
   159b6:	|  |  |  \-> movea.l (sp),a0
   159b8:	|  |  |      move.l 32(a0),(sp)
	while (thisRegion) {
   159bc:	|  \--|----> tst.l (sp)
   159be:	\-----|----- bne.s 159a2 <getRegionForObject+0xa>
	}

	return NULL;
   159c0:	      |      moveq #0,d0
}
   159c2:	      \----> addq.l #4,sp
   159c4:	             rts

000159c6 <killAllRegions>:

void killAllRegions () {
   159c6:	       subq.l #8,sp
   159c8:	       move.l a6,-(sp)
	struct screenRegion * killRegion;
	while (allScreenRegions) {
   159ca:	   /-- bra.s 15a0c <killAllRegions+0x46>
		killRegion = allScreenRegions;
   159cc:	/--|-> move.l 1c96c <allScreenRegions>,8(sp)
		allScreenRegions = allScreenRegions -> next;
   159d4:	|  |   movea.l 1c96c <allScreenRegions>,a0
   159da:	|  |   move.l 32(a0),d0
   159de:	|  |   move.l d0,1c96c <allScreenRegions>
		removeObjectType (killRegion -> thisType);
   159e4:	|  |   movea.l 8(sp),a0
   159e8:	|  |   move.l 28(a0),d0
   159ec:	|  |   move.l d0,-(sp)
   159ee:	|  |   jsr d860 <removeObjectType>
   159f4:	|  |   addq.l #4,sp
		FreeVec(killRegion);
   159f6:	|  |   move.l 8(sp),4(sp)
   159fc:	|  |   move.l 1c85c <SysBase>,d0
   15a02:	|  |   movea.l d0,a6
   15a04:	|  |   movea.l 4(sp),a1
   15a08:	|  |   jsr -690(a6)
	while (allScreenRegions) {
   15a0c:	|  \-> move.l 1c96c <allScreenRegions>,d0
   15a12:	\----- bne.s 159cc <killAllRegions+0x6>
	}
	overRegion = NULL;
   15a14:	       clr.l 1c970 <overRegion>
}
   15a1a:	       nop
   15a1c:	       movea.l (sp)+,a6
   15a1e:	       addq.l #8,sp
   15a20:	       rts

00015a22 <loadRegions>:

void loadRegions (BPTR fp) {
   15a22:	       lea -24(sp),sp
   15a26:	       move.l a6,-(sp)
	int numRegions = get2bytes (fp);
   15a28:	       move.l 32(sp),-(sp)
   15a2c:	       jsr 6bc <get2bytes>
   15a32:	       addq.l #4,sp
   15a34:	       move.l d0,24(sp)

	struct screenRegion * newRegion;
	struct screenRegion * * pointy = & allScreenRegions;
   15a38:	       move.l #117100,20(sp)

	while (numRegions --) {
   15a40:	   /-- bra.w 15b1e <loadRegions+0xfc>
		newRegion = AllocVec( sizeof(struct screenRegion),MEMF_ANY);
   15a44:	/--|-> moveq #36,d0
   15a46:	|  |   move.l d0,16(sp)
   15a4a:	|  |   clr.l 12(sp)
   15a4e:	|  |   move.l 1c85c <SysBase>,d0
   15a54:	|  |   movea.l d0,a6
   15a56:	|  |   move.l 16(sp),d0
   15a5a:	|  |   move.l 12(sp),d1
   15a5e:	|  |   jsr -684(a6)
   15a62:	|  |   move.l d0,8(sp)
   15a66:	|  |   move.l 8(sp),d0
   15a6a:	|  |   move.l d0,4(sp)
		* pointy = newRegion;
   15a6e:	|  |   movea.l 20(sp),a0
   15a72:	|  |   move.l 4(sp),(a0)
		pointy = & (newRegion -> next);
   15a76:	|  |   moveq #32,d1
   15a78:	|  |   add.l 4(sp),d1
   15a7c:	|  |   move.l d1,20(sp)

		newRegion -> x1 = get2bytes (fp);
   15a80:	|  |   move.l 32(sp),-(sp)
   15a84:	|  |   jsr 6bc <get2bytes>
   15a8a:	|  |   addq.l #4,sp
   15a8c:	|  |   movea.l 4(sp),a0
   15a90:	|  |   move.l d0,(a0)
		newRegion -> y1 = get2bytes (fp);
   15a92:	|  |   move.l 32(sp),-(sp)
   15a96:	|  |   jsr 6bc <get2bytes>
   15a9c:	|  |   addq.l #4,sp
   15a9e:	|  |   movea.l 4(sp),a0
   15aa2:	|  |   move.l d0,4(a0)
		newRegion -> x2 = get2bytes (fp);
   15aa6:	|  |   move.l 32(sp),-(sp)
   15aaa:	|  |   jsr 6bc <get2bytes>
   15ab0:	|  |   addq.l #4,sp
   15ab2:	|  |   movea.l 4(sp),a0
   15ab6:	|  |   move.l d0,8(a0)
		newRegion -> y2 = get2bytes (fp);
   15aba:	|  |   move.l 32(sp),-(sp)
   15abe:	|  |   jsr 6bc <get2bytes>
   15ac4:	|  |   addq.l #4,sp
   15ac6:	|  |   movea.l 4(sp),a0
   15aca:	|  |   move.l d0,12(a0)
		newRegion -> sX = get2bytes (fp);
   15ace:	|  |   move.l 32(sp),-(sp)
   15ad2:	|  |   jsr 6bc <get2bytes>
   15ad8:	|  |   addq.l #4,sp
   15ada:	|  |   movea.l 4(sp),a0
   15ade:	|  |   move.l d0,16(a0)
		newRegion -> sY = get2bytes (fp);
   15ae2:	|  |   move.l 32(sp),-(sp)
   15ae6:	|  |   jsr 6bc <get2bytes>
   15aec:	|  |   addq.l #4,sp
   15aee:	|  |   movea.l 4(sp),a0
   15af2:	|  |   move.l d0,20(a0)
		newRegion -> di = get2bytes (fp);
   15af6:	|  |   move.l 32(sp),-(sp)
   15afa:	|  |   jsr 6bc <get2bytes>
   15b00:	|  |   addq.l #4,sp
   15b02:	|  |   movea.l 4(sp),a0
   15b06:	|  |   move.l d0,24(a0)
		newRegion -> thisType = loadObjectRef (fp);
   15b0a:	|  |   move.l 32(sp),-(sp)
   15b0e:	|  |   jsr d556 <loadObjectRef>
   15b14:	|  |   addq.l #4,sp
   15b16:	|  |   movea.l 4(sp),a0
   15b1a:	|  |   move.l d0,28(a0)
	while (numRegions --) {
   15b1e:	|  \-> move.l 24(sp),d0
   15b22:	|      move.l d0,d1
   15b24:	|      subq.l #1,d1
   15b26:	|      move.l d1,24(sp)
   15b2a:	|      tst.l d0
   15b2c:	\----- bne.w 15a44 <loadRegions+0x22>
	}
	* pointy = NULL;
   15b30:	       movea.l 20(sp),a0
   15b34:	       clr.l (a0)
}
   15b36:	       nop
   15b38:	       movea.l (sp)+,a6
   15b3a:	       lea 24(sp),sp
   15b3e:	       rts

00015b40 <removeScreenRegion>:

void removeScreenRegion (int objectNum) {
   15b40:	             lea -12(sp),sp
   15b44:	             move.l a6,-(sp)
    struct screenRegion ** huntRegion = &allScreenRegions;
   15b46:	             move.l #117100,12(sp)
    struct screenRegion * killMe;

    while (*huntRegion) {
   15b4e:	   /-------- bra.s 15bc8 <removeScreenRegion+0x88>
        if ((*huntRegion)->thisType->objectNum == objectNum) {
   15b50:	/--|-------> movea.l 12(sp),a0
   15b54:	|  |         movea.l (a0),a0
   15b56:	|  |         movea.l 28(a0),a0
   15b5a:	|  |         move.l 4(a0),d0
   15b5e:	|  |         cmp.l 20(sp),d0
   15b62:	|  |  /----- bne.s 15bba <removeScreenRegion+0x7a>
            killMe = *huntRegion;
   15b64:	|  |  |      movea.l 12(sp),a0
   15b68:	|  |  |      move.l (a0),8(sp)
            *huntRegion = killMe->next;
   15b6c:	|  |  |      movea.l 8(sp),a0
   15b70:	|  |  |      move.l 32(a0),d0
   15b74:	|  |  |      movea.l 12(sp),a0
   15b78:	|  |  |      move.l d0,(a0)
            removeObjectType(killMe->thisType);
   15b7a:	|  |  |      movea.l 8(sp),a0
   15b7e:	|  |  |      move.l 28(a0),d0
   15b82:	|  |  |      move.l d0,-(sp)
   15b84:	|  |  |      jsr d860 <removeObjectType>
   15b8a:	|  |  |      addq.l #4,sp
            if (killMe == overRegion) overRegion = NULL;
   15b8c:	|  |  |      move.l 1c970 <overRegion>,d0
   15b92:	|  |  |      cmp.l 8(sp),d0
   15b96:	|  |  |  /-- bne.s 15b9e <removeScreenRegion+0x5e>
   15b98:	|  |  |  |   clr.l 1c970 <overRegion>
            FreeVec(killMe);
   15b9e:	|  |  |  \-> move.l 8(sp),4(sp)
   15ba4:	|  |  |      move.l 1c85c <SysBase>,d0
   15baa:	|  |  |      movea.l d0,a6
   15bac:	|  |  |      movea.l 4(sp),a1
   15bb0:	|  |  |      jsr -690(a6)
            killMe = NULL;
   15bb4:	|  |  |      clr.l 8(sp)
   15bb8:	|  +--|----- bra.s 15bc8 <removeScreenRegion+0x88>
        } else {
            huntRegion = &((*huntRegion)->next);
   15bba:	|  |  \----> movea.l 12(sp),a0
   15bbe:	|  |         move.l (a0),d0
   15bc0:	|  |         moveq #32,d1
   15bc2:	|  |         add.l d0,d1
   15bc4:	|  |         move.l d1,12(sp)
    while (*huntRegion) {
   15bc8:	|  \-------> movea.l 12(sp),a0
   15bcc:	|            move.l (a0),d0
   15bce:	\----------- bne.s 15b50 <removeScreenRegion+0x10>
        }
    }
}
   15bd0:	             nop
   15bd2:	             nop
   15bd4:	             movea.l (sp)+,a6
   15bd6:	             lea 12(sp),sp
   15bda:	             rts

00015bdc <saveRegions>:

void saveRegions (BPTR fp) {
   15bdc:	       subq.l #8,sp
	int numRegions = 0;
   15bde:	       clr.l 4(sp)
	struct screenRegion * thisRegion = allScreenRegions;
   15be2:	       move.l 1c96c <allScreenRegions>,(sp)
	while (thisRegion) {
   15be8:	   /-- bra.s 15bf4 <saveRegions+0x18>
		thisRegion = thisRegion -> next;
   15bea:	/--|-> movea.l (sp),a0
   15bec:	|  |   move.l 32(a0),(sp)
		numRegions ++;
   15bf0:	|  |   addq.l #1,4(sp)
	while (thisRegion) {
   15bf4:	|  \-> tst.l (sp)
   15bf6:	\----- bne.s 15bea <saveRegions+0xe>
	}
	put2bytes (numRegions, fp);
   15bf8:	       move.l 12(sp),-(sp)
   15bfc:	       move.l 8(sp),-(sp)
   15c00:	       jsr 8d0 <put2bytes>
   15c06:	       addq.l #8,sp
	thisRegion = allScreenRegions;
   15c08:	       move.l 1c96c <allScreenRegions>,(sp)
	while (thisRegion) {
   15c0e:	/----- bra.w 15cb6 <saveRegions+0xda>
		put2bytes (thisRegion -> x1, fp);
   15c12:	|  /-> movea.l (sp),a0
   15c14:	|  |   move.l (a0),d0
   15c16:	|  |   move.l 12(sp),-(sp)
   15c1a:	|  |   move.l d0,-(sp)
   15c1c:	|  |   jsr 8d0 <put2bytes>
   15c22:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> y1, fp);
   15c24:	|  |   movea.l (sp),a0
   15c26:	|  |   move.l 4(a0),d0
   15c2a:	|  |   move.l 12(sp),-(sp)
   15c2e:	|  |   move.l d0,-(sp)
   15c30:	|  |   jsr 8d0 <put2bytes>
   15c36:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> x2, fp);
   15c38:	|  |   movea.l (sp),a0
   15c3a:	|  |   move.l 8(a0),d0
   15c3e:	|  |   move.l 12(sp),-(sp)
   15c42:	|  |   move.l d0,-(sp)
   15c44:	|  |   jsr 8d0 <put2bytes>
   15c4a:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> y2, fp);
   15c4c:	|  |   movea.l (sp),a0
   15c4e:	|  |   move.l 12(a0),d0
   15c52:	|  |   move.l 12(sp),-(sp)
   15c56:	|  |   move.l d0,-(sp)
   15c58:	|  |   jsr 8d0 <put2bytes>
   15c5e:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> sX, fp);
   15c60:	|  |   movea.l (sp),a0
   15c62:	|  |   move.l 16(a0),d0
   15c66:	|  |   move.l 12(sp),-(sp)
   15c6a:	|  |   move.l d0,-(sp)
   15c6c:	|  |   jsr 8d0 <put2bytes>
   15c72:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> sY, fp);
   15c74:	|  |   movea.l (sp),a0
   15c76:	|  |   move.l 20(a0),d0
   15c7a:	|  |   move.l 12(sp),-(sp)
   15c7e:	|  |   move.l d0,-(sp)
   15c80:	|  |   jsr 8d0 <put2bytes>
   15c86:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> di, fp);
   15c88:	|  |   movea.l (sp),a0
   15c8a:	|  |   move.l 24(a0),d0
   15c8e:	|  |   move.l 12(sp),-(sp)
   15c92:	|  |   move.l d0,-(sp)
   15c94:	|  |   jsr 8d0 <put2bytes>
   15c9a:	|  |   addq.l #8,sp
		saveObjectRef (thisRegion -> thisType, fp);
   15c9c:	|  |   movea.l (sp),a0
   15c9e:	|  |   move.l 28(a0),d0
   15ca2:	|  |   move.l 12(sp),-(sp)
   15ca6:	|  |   move.l d0,-(sp)
   15ca8:	|  |   jsr d900 <saveObjectRef>
   15cae:	|  |   addq.l #8,sp

		thisRegion = thisRegion -> next;
   15cb0:	|  |   movea.l (sp),a0
   15cb2:	|  |   move.l 32(a0),(sp)
	while (thisRegion) {
   15cb6:	\--|-> tst.l (sp)
   15cb8:	   \-- bne.w 15c12 <saveRegions+0x36>
	}
}
   15cbc:	       nop
   15cbe:	       nop
   15cc0:	       addq.l #8,sp
   15cc2:	       rts

00015cc4 <showBoxes>:

void showBoxes () {
   15cc4:	       subq.l #4,sp
	struct screenRegion * huntRegion = allScreenRegions;
   15cc6:	       move.l 1c96c <allScreenRegions>,(sp)

	while (huntRegion) {
   15ccc:	/----- bra.w 15d68 <showBoxes+0xa4>
		drawVerticalLine (huntRegion -> x1, huntRegion -> y1, huntRegion -> y2);
   15cd0:	|  /-> movea.l (sp),a0
   15cd2:	|  |   move.l 12(a0),d0
   15cd6:	|  |   movea.l d0,a1
   15cd8:	|  |   movea.l (sp),a0
   15cda:	|  |   move.l 4(a0),d0
   15cde:	|  |   move.l d0,d1
   15ce0:	|  |   movea.l (sp),a0
   15ce2:	|  |   move.l (a0),d0
   15ce4:	|  |   move.l a1,-(sp)
   15ce6:	|  |   move.l d1,-(sp)
   15ce8:	|  |   move.l d0,-(sp)
   15cea:	|  |   jsr d1e4 <drawVerticalLine>
   15cf0:	|  |   lea 12(sp),sp
		drawVerticalLine (huntRegion -> x2, huntRegion -> y1, huntRegion -> y2);
   15cf4:	|  |   movea.l (sp),a0
   15cf6:	|  |   move.l 12(a0),d0
   15cfa:	|  |   movea.l d0,a1
   15cfc:	|  |   movea.l (sp),a0
   15cfe:	|  |   move.l 4(a0),d0
   15d02:	|  |   move.l d0,d1
   15d04:	|  |   movea.l (sp),a0
   15d06:	|  |   move.l 8(a0),d0
   15d0a:	|  |   move.l a1,-(sp)
   15d0c:	|  |   move.l d1,-(sp)
   15d0e:	|  |   move.l d0,-(sp)
   15d10:	|  |   jsr d1e4 <drawVerticalLine>
   15d16:	|  |   lea 12(sp),sp
		drawHorizontalLine (huntRegion -> x1, huntRegion -> y1, huntRegion -> x2);
   15d1a:	|  |   movea.l (sp),a0
   15d1c:	|  |   move.l 8(a0),d0
   15d20:	|  |   movea.l d0,a1
   15d22:	|  |   movea.l (sp),a0
   15d24:	|  |   move.l 4(a0),d0
   15d28:	|  |   move.l d0,d1
   15d2a:	|  |   movea.l (sp),a0
   15d2c:	|  |   move.l (a0),d0
   15d2e:	|  |   move.l a1,-(sp)
   15d30:	|  |   move.l d1,-(sp)
   15d32:	|  |   move.l d0,-(sp)
   15d34:	|  |   jsr d1be <drawHorizontalLine>
   15d3a:	|  |   lea 12(sp),sp
		drawHorizontalLine (huntRegion -> x1, huntRegion -> y2, huntRegion -> x2);
   15d3e:	|  |   movea.l (sp),a0
   15d40:	|  |   move.l 8(a0),d0
   15d44:	|  |   movea.l d0,a1
   15d46:	|  |   movea.l (sp),a0
   15d48:	|  |   move.l 12(a0),d0
   15d4c:	|  |   move.l d0,d1
   15d4e:	|  |   movea.l (sp),a0
   15d50:	|  |   move.l (a0),d0
   15d52:	|  |   move.l a1,-(sp)
   15d54:	|  |   move.l d1,-(sp)
   15d56:	|  |   move.l d0,-(sp)
   15d58:	|  |   jsr d1be <drawHorizontalLine>
   15d5e:	|  |   lea 12(sp),sp
		huntRegion = huntRegion -> next;
   15d62:	|  |   movea.l (sp),a0
   15d64:	|  |   move.l 32(a0),(sp)
	while (huntRegion) {
   15d68:	\--|-> tst.l (sp)
   15d6a:	   \-- bne.w 15cd0 <showBoxes+0xc>
	}
   15d6e:	       nop
   15d70:	       nop
   15d72:	       addq.l #4,sp
   15d74:	       rts

00015d76 <rand>:
// Define constants for LCG
#define MULTIPLIER 1103515245UL
#define INCREMENT 12345UL
#define MODULUS 0x7FFFFFFFUL

ULONG rand() {
   15d76:	       lea -88(sp),sp
   15d7a:	       move.l a6,-(sp)
    struct timerequest *timereq;

    struct MsgPort *timerport = CreateMsgPort();
   15d7c:	       move.l 1c85c <SysBase>,d0
   15d82:	       movea.l d0,a6
   15d84:	       jsr -666(a6)
   15d88:	       move.l d0,88(sp)
   15d8c:	       move.l 88(sp),d0
   15d90:	       move.l d0,84(sp)

    timereq = CreateIORequest(timerport, sizeof(struct timerequest));
   15d94:	       move.l 84(sp),80(sp)
   15d9a:	       moveq #40,d0
   15d9c:	       move.l d0,76(sp)
   15da0:	       move.l 1c85c <SysBase>,d0
   15da6:	       movea.l d0,a6
   15da8:	       movea.l 80(sp),a0
   15dac:	       move.l 76(sp),d0
   15db0:	       jsr -654(a6)
   15db4:	       move.l d0,72(sp)
   15db8:	       move.l 72(sp),d0
   15dbc:	       move.l d0,68(sp)
    struct IORequest* ioreq = (struct IORequest*)timereq;
   15dc0:	       move.l 68(sp),64(sp)
    if (OpenDevice(TIMERNAME, UNIT_MICROHZ, ioreq, 0)) {
   15dc6:	       move.l #106247,60(sp)
   15dce:	       clr.l 56(sp)
   15dd2:	       move.l 64(sp),52(sp)
   15dd8:	       clr.l 48(sp)
   15ddc:	       move.l 1c85c <SysBase>,d0
   15de2:	       movea.l d0,a6
   15de4:	       movea.l 60(sp),a0
   15de8:	       move.l 56(sp),d0
   15dec:	       movea.l 52(sp),a1
   15df0:	       move.l 48(sp),d1
   15df4:	       jsr -444(a6)
   15df8:	       move.b d0,47(sp)
   15dfc:	       move.b 47(sp),d0
   15e00:	   /-- beq.s 15e16 <rand+0xa0>
        KPrintF("Unable to open timer device\n");
   15e02:	   |   pea 19f14 <graphics.c.1c13408a+0x27b>
   15e08:	   |   jsr 17176 <KPrintF>
   15e0e:	   |   addq.l #4,sp
        return 0;
   15e10:	   |   moveq #0,d0
   15e12:	/--|-- bra.w 15ed0 <rand+0x15a>
    }
    struct Device* TimerBase = ioreq->io_Device;
   15e16:	|  \-> movea.l 64(sp),a0
   15e1a:	|      move.l 20(a0),42(sp)

    struct EClockVal eclock;
    ReadEClock(&eclock);
   15e20:	|      lea 92(sp),a0
   15e24:	|      lea -86(a0),a0
   15e28:	|      move.l a0,38(sp)
   15e2c:	|      movea.l 42(sp),a6
   15e30:	|      movea.l 38(sp),a0
   15e34:	|      jsr -60(a6)
   15e38:	|      move.l d0,34(sp)

    ULONG seed = eclock.ev_lo; // Using the lower part of EClock value as seed
   15e3c:	|      move.l 10(sp),30(sp)
    seed = (seed * MULTIPLIER + INCREMENT) & 0x7fffffff; // Simple LCG
   15e42:	|      move.l #1103515245,-(sp)
   15e48:	|      move.l 34(sp),-(sp)
   15e4c:	|      jsr 17b34 <__mulsi3>
   15e52:	|      addq.l #8,sp
   15e54:	|      addi.l #12345,d0
   15e5a:	|      move.l d0,d1
   15e5c:	|      bclr #31,d1
   15e60:	|      move.l d1,30(sp)

    // Transform the seed to a random number
    int random_number = seed % 100; // For example, a random number between 0 and 99
   15e64:	|      move.l 30(sp),d0
   15e68:	|      pea 64 <_start+0x64>
   15e6c:	|      move.l d0,-(sp)
   15e6e:	|      jsr 17c0e <__umodsi3>
   15e74:	|      addq.l #8,sp
   15e76:	|      move.l d0,26(sp)
    KPrintF("Random Number: %d\n", random_number);
   15e7a:	|      move.l 26(sp),-(sp)
   15e7e:	|      pea 19f31 <graphics.c.1c13408a+0x298>
   15e84:	|      jsr 17176 <KPrintF>
   15e8a:	|      addq.l #8,sp

    CloseDevice(ioreq);
   15e8c:	|      move.l 64(sp),22(sp)
   15e92:	|      move.l 1c85c <SysBase>,d0
   15e98:	|      movea.l d0,a6
   15e9a:	|      movea.l 22(sp),a1
   15e9e:	|      jsr -450(a6)
    DeleteIORequest(ioreq);
   15ea2:	|      move.l 64(sp),18(sp)
   15ea8:	|      move.l 1c85c <SysBase>,d0
   15eae:	|      movea.l d0,a6
   15eb0:	|      movea.l 18(sp),a0
   15eb4:	|      jsr -660(a6)
    DeleteMsgPort(timerport);
   15eb8:	|      move.l 84(sp),14(sp)
   15ebe:	|      move.l 1c85c <SysBase>,d0
   15ec4:	|      movea.l d0,a6
   15ec6:	|      movea.l 14(sp),a0
   15eca:	|      jsr -672(a6)
    return 0;
   15ece:	|      moveq #0,d0
   15ed0:	\----> movea.l (sp)+,a6
   15ed2:	       lea 88(sp),sp
   15ed6:	       rts

00015ed8 <loadBankForAnim>:
#include "sprbanks.h"
#include "support/gcc8_c_support.h"

struct loadedSpriteBank * allLoadedBanks = NULL;

struct loadedSpriteBank * loadBankForAnim (int ID) {
   15ed8:	             lea -20(sp),sp
   15edc:	             move.l a6,-(sp)
	// KPrintF("loadBankForAnim: Looking for sprite bank with ID %d\n", ID);	
	struct loadedSpriteBank * returnMe = allLoadedBanks;
   15ede:	             move.l 1c974 <allLoadedBanks>,20(sp)
	while (returnMe) {
   15ee6:	      /----- bra.s 15f18 <loadBankForAnim+0x40>
		if (returnMe->ID == ID) {
   15ee8:	   /--|----> movea.l 20(sp),a0
   15eec:	   |  |      move.l (a0),d0
   15eee:	   |  |      cmp.l 28(sp),d0
   15ef2:	   |  |  /-- bne.s 15f0e <loadBankForAnim+0x36>
			// KPrintF("loadBankForAnim: Found existing sprite bank with ID %d\n", returnMe->ID);
			returnMe->timesUsed++;
   15ef4:	   |  |  |   movea.l 20(sp),a0
   15ef8:	   |  |  |   move.l 4(a0),d0
   15efc:	   |  |  |   addq.l #1,d0
   15efe:	   |  |  |   movea.l 20(sp),a0
   15f02:	   |  |  |   move.l d0,4(a0)
			return returnMe;			
   15f06:	   |  |  |   move.l 20(sp),d0
   15f0a:	/--|--|--|-- bra.w 15fce <loadBankForAnim+0xf6>
		}		
		returnMe = returnMe->next;
   15f0e:	|  |  |  \-> movea.l 20(sp),a0
   15f12:	|  |  |      move.l 22(a0),20(sp)
	while (returnMe) {
   15f18:	|  |  \----> tst.l 20(sp)
   15f1c:	|  \-------- bne.s 15ee8 <loadBankForAnim+0x10>
	}
	returnMe = AllocVec(sizeof(struct loadedSpriteBank), MEMF_ANY);
   15f1e:	|            moveq #26,d0
   15f20:	|            move.l d0,16(sp)
   15f24:	|            clr.l 12(sp)
   15f28:	|            move.l 1c85c <SysBase>,d0
   15f2e:	|            movea.l d0,a6
   15f30:	|            move.l 16(sp),d0
   15f34:	|            move.l 12(sp),d1
   15f38:	|            jsr -684(a6)
   15f3c:	|            move.l d0,8(sp)
   15f40:	|            move.l 8(sp),d0
   15f44:	|            move.l d0,20(sp)
	// KPrintF("loadBankForAnim: No existing sprite bank with ID %d\n", ID);
	if (returnMe) {
   15f48:	|     /----- beq.w 15fcc <loadBankForAnim+0xf4>
		returnMe->ID = ID;
   15f4c:	|     |      movea.l 20(sp),a0
   15f50:	|     |      move.l 28(sp),(a0)
		if (loadSpriteBank(ID, &returnMe->bank, FALSE)) {
   15f54:	|     |      move.l 20(sp),d0
   15f58:	|     |      addq.l #8,d0
   15f5a:	|     |      clr.l -(sp)
   15f5c:	|     |      move.l d0,-(sp)
   15f5e:	|     |      move.l 36(sp),-(sp)
   15f62:	|     |      jsr 8bb8 <loadSpriteBank>
   15f68:	|     |      lea 12(sp),sp
   15f6c:	|     |      tst.w d0
   15f6e:	|     |  /-- beq.s 15fa4 <loadBankForAnim+0xcc>
			returnMe->timesUsed = 1;
   15f70:	|     |  |   movea.l 20(sp),a0
   15f74:	|     |  |   moveq #1,d0
   15f76:	|     |  |   move.l d0,4(a0)
			returnMe->next = allLoadedBanks;
   15f7a:	|     |  |   move.l 1c974 <allLoadedBanks>,d0
   15f80:	|     |  |   movea.l 20(sp),a0
   15f84:	|     |  |   move.l d0,22(a0)
			allLoadedBanks = returnMe;
   15f88:	|     |  |   move.l 20(sp),1c974 <allLoadedBanks>
			KPrintF("loadBankForAnim: New sprite bank created OK\n");
   15f90:	|     |  |   pea 19f44 <graphics.c.1c13408a+0x2ab>
   15f96:	|     |  |   jsr 17176 <KPrintF>
   15f9c:	|     |  |   addq.l #4,sp
			return returnMe;
   15f9e:	|     |  |   move.l 20(sp),d0
   15fa2:	+-----|--|-- bra.s 15fce <loadBankForAnim+0xf6>
		} else {
			KPrintF("loadBankForAnim: I guess I couldn't load the sprites...\n");
   15fa4:	|     |  \-> pea 19f71 <graphics.c.1c13408a+0x2d8>
   15faa:	|     |      jsr 17176 <KPrintF>
   15fb0:	|     |      addq.l #4,sp
			FreeVec(returnMe);
   15fb2:	|     |      move.l 20(sp),4(sp)
   15fb8:	|     |      move.l 1c85c <SysBase>,d0
   15fbe:	|     |      movea.l d0,a6
   15fc0:	|     |      movea.l 4(sp),a1
   15fc4:	|     |      jsr -690(a6)
			return NULL;
   15fc8:	|     |      moveq #0,d0
   15fca:	+-----|----- bra.s 15fce <loadBankForAnim+0xf6>
		}
	} else return NULL;
   15fcc:	|     \----> moveq #0,d0
}
   15fce:	\----------> movea.l (sp)+,a6
   15fd0:	             lea 20(sp),sp
   15fd4:	             rts

00015fd6 <closestPointOnLine>:
#include "support/gcc8_c_support.h"
#include "line.h"

struct flor * currentFloor = NULL;

BOOL closestPointOnLine (int * closestX, int * closestY, int x1, int y1, int x2, int y2, int xP, int yP) {
   15fd6:	       lea -32(sp),sp
   15fda:	       move.l d3,-(sp)
   15fdc:	       move.l d2,-(sp)
	int xDiff = x2 - x1;
   15fde:	       move.l 60(sp),d0
   15fe2:	       sub.l 52(sp),d0
   15fe6:	       move.l d0,36(sp)
	int yDiff = y2 - y1;
   15fea:	       move.l 64(sp),d0
   15fee:	       sub.l 56(sp),d0
   15ff2:	       move.l d0,32(sp)

	double m = xDiff * (xP - x1) + yDiff * (yP - y1);
   15ff6:	       move.l 68(sp),d0
   15ffa:	       sub.l 52(sp),d0
   15ffe:	       move.l 36(sp),-(sp)
   16002:	       move.l d0,-(sp)
   16004:	       jsr 17b34 <__mulsi3>
   1600a:	       addq.l #8,sp
   1600c:	       move.l d0,d2
   1600e:	       move.l 72(sp),d0
   16012:	       sub.l 56(sp),d0
   16016:	       move.l 32(sp),-(sp)
   1601a:	       move.l d0,-(sp)
   1601c:	       jsr 17b34 <__mulsi3>
   16022:	       addq.l #8,sp
   16024:	       add.l d2,d0
   16026:	       move.l d0,-(sp)
   16028:	       jsr 17572 <__floatsidf>
   1602e:	       addq.l #4,sp
   16030:	       move.l d0,16(sp)
   16034:	       move.l d1,20(sp)
   16038:	       move.l 16(sp),24(sp)
   1603e:	       move.l 20(sp),28(sp)
	m /= (xDiff * xDiff) + (yDiff * yDiff);
   16044:	       move.l 36(sp),-(sp)
   16048:	       move.l 40(sp),-(sp)
   1604c:	       jsr 17b34 <__mulsi3>
   16052:	       addq.l #8,sp
   16054:	       move.l d0,d2
   16056:	       move.l 32(sp),-(sp)
   1605a:	       move.l 36(sp),-(sp)
   1605e:	       jsr 17b34 <__mulsi3>
   16064:	       addq.l #8,sp
   16066:	       add.l d2,d0
   16068:	       move.l d0,-(sp)
   1606a:	       jsr 17572 <__floatsidf>
   16070:	       addq.l #4,sp
   16072:	       move.l d1,-(sp)
   16074:	       move.l d0,-(sp)
   16076:	       move.l 36(sp),-(sp)
   1607a:	       move.l 36(sp),-(sp)
   1607e:	       jsr 173fc <__divdf3>
   16084:	       lea 16(sp),sp
   16088:	       move.l d0,8(sp)
   1608c:	       move.l d1,12(sp)
   16090:	       move.l 8(sp),24(sp)
   16096:	       move.l 12(sp),28(sp)

	if (m < 0) {
   1609c:	       clr.l -(sp)
   1609e:	       clr.l -(sp)
   160a0:	       move.l 36(sp),-(sp)
   160a4:	       move.l 36(sp),-(sp)
   160a8:	       jsr 1778a <__ltdf2>
   160ae:	       lea 16(sp),sp
   160b2:	       tst.l d0
   160b4:	   /-- bge.s 160ca <closestPointOnLine+0xf4>
		*closestX = x1;
   160b6:	   |   movea.l 44(sp),a0
   160ba:	   |   move.l 52(sp),(a0)
		*closestY = y1;
   160be:	   |   movea.l 48(sp),a0
   160c2:	   |   move.l 56(sp),(a0)
   160c6:	/--|-- bra.w 161ac <closestPointOnLine+0x1d6>
	} else if (m > 1) {
   160ca:	|  \-> clr.l -(sp)
   160cc:	|      move.l #1072693248,-(sp)
   160d2:	|      move.l 36(sp),-(sp)
   160d6:	|      move.l 36(sp),-(sp)
   160da:	|      jsr 176d0 <__gtdf2>
   160e0:	|      lea 16(sp),sp
   160e4:	|      tst.l d0
   160e6:	|  /-- ble.s 160fc <closestPointOnLine+0x126>
		*closestX = x2;
   160e8:	|  |   movea.l 44(sp),a0
   160ec:	|  |   move.l 60(sp),(a0)
		*closestY = y2;
   160f0:	|  |   movea.l 48(sp),a0
   160f4:	|  |   move.l 64(sp),(a0)
   160f8:	+--|-- bra.w 161ac <closestPointOnLine+0x1d6>
	} else {
		*closestX = x1 + m * xDiff;
   160fc:	|  \-> move.l 52(sp),-(sp)
   16100:	|      jsr 17572 <__floatsidf>
   16106:	|      addq.l #4,sp
   16108:	|      move.l d0,d2
   1610a:	|      move.l d1,d3
   1610c:	|      move.l 36(sp),-(sp)
   16110:	|      jsr 17572 <__floatsidf>
   16116:	|      addq.l #4,sp
   16118:	|      move.l 28(sp),-(sp)
   1611c:	|      move.l 28(sp),-(sp)
   16120:	|      move.l d1,-(sp)
   16122:	|      move.l d0,-(sp)
   16124:	|      jsr 17602 <__muldf3>
   1612a:	|      lea 16(sp),sp
   1612e:	|      move.l d1,-(sp)
   16130:	|      move.l d0,-(sp)
   16132:	|      move.l d3,-(sp)
   16134:	|      move.l d2,-(sp)
   16136:	|      jsr 1739a <__adddf3>
   1613c:	|      lea 16(sp),sp
   16140:	|      move.l d1,-(sp)
   16142:	|      move.l d0,-(sp)
   16144:	|      jsr 1750a <__fixdfsi>
   1614a:	|      addq.l #8,sp
   1614c:	|      movea.l 44(sp),a0
   16150:	|      move.l d0,(a0)
		*closestY = y1 + m * yDiff;
   16152:	|      move.l 56(sp),-(sp)
   16156:	|      jsr 17572 <__floatsidf>
   1615c:	|      addq.l #4,sp
   1615e:	|      move.l d0,d2
   16160:	|      move.l d1,d3
   16162:	|      move.l 32(sp),-(sp)
   16166:	|      jsr 17572 <__floatsidf>
   1616c:	|      addq.l #4,sp
   1616e:	|      move.l 28(sp),-(sp)
   16172:	|      move.l 28(sp),-(sp)
   16176:	|      move.l d1,-(sp)
   16178:	|      move.l d0,-(sp)
   1617a:	|      jsr 17602 <__muldf3>
   16180:	|      lea 16(sp),sp
   16184:	|      move.l d1,-(sp)
   16186:	|      move.l d0,-(sp)
   16188:	|      move.l d3,-(sp)
   1618a:	|      move.l d2,-(sp)
   1618c:	|      jsr 1739a <__adddf3>
   16192:	|      lea 16(sp),sp
   16196:	|      move.l d1,-(sp)
   16198:	|      move.l d0,-(sp)
   1619a:	|      jsr 1750a <__fixdfsi>
   161a0:	|      addq.l #8,sp
   161a2:	|      movea.l 48(sp),a0
   161a6:	|      move.l d0,(a0)
		return TRUE;
   161a8:	|      moveq #1,d0
   161aa:	|  /-- bra.s 161ae <closestPointOnLine+0x1d8>
	}
	return FALSE;
   161ac:	\--|-> clr.w d0
}
   161ae:	   \-> move.l (sp)+,d2
   161b0:	       move.l (sp)+,d3
   161b2:	       lea 32(sp),sp
   161b6:	       rts

000161b8 <drawFloor>:

void drawFloor() {
   161b8:	                lea -12(sp),sp
   161bc:	                move.l d3,-(sp)
   161be:	                move.l d2,-(sp)
    int i, j, nV;
    for (i = 0; i < currentFloor->numPolygons; i++) {
   161c0:	                clr.l 16(sp)
   161c4:	   /----------- bra.w 163d8 <drawFloor+0x220>
        nV = currentFloor->polygon[i].numVertices;
   161c8:	/--|----------> movea.l 1c978 <currentFloor>,a0
   161ce:	|  |            move.l 12(a0),d1
   161d2:	|  |            move.l 16(sp),d0
   161d6:	|  |            lsl.l #3,d0
   161d8:	|  |            movea.l d1,a0
   161da:	|  |            adda.l d0,a0
   161dc:	|  |            move.l (a0),8(sp)
        if (nV > 1) {
   161e0:	|  |            moveq #1,d0
   161e2:	|  |            cmp.l 8(sp),d0
   161e6:	|  |  /-------- bge.w 163d4 <drawFloor+0x21c>
            for (j = 1; j < nV; j++) {
   161ea:	|  |  |         moveq #1,d0
   161ec:	|  |  |         move.l d0,12(sp)
   161f0:	|  |  |     /-- bra.w 162ea <drawFloor+0x132>
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].y,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].x,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].y);
   161f4:	|  |  |  /--|-> movea.l 1c978 <currentFloor>,a0
   161fa:	|  |  |  |  |   move.l 4(a0),d1
   161fe:	|  |  |  |  |   movea.l 1c978 <currentFloor>,a0
   16204:	|  |  |  |  |   movea.l 12(a0),a0
   16208:	|  |  |  |  |   move.l 16(sp),d0
   1620c:	|  |  |  |  |   lsl.l #3,d0
   1620e:	|  |  |  |  |   adda.l d0,a0
   16210:	|  |  |  |  |   movea.l 4(a0),a0
   16214:	|  |  |  |  |   move.l 12(sp),d0
   16218:	|  |  |  |  |   add.l d0,d0
   1621a:	|  |  |  |  |   add.l d0,d0
   1621c:	|  |  |  |  |   adda.l d0,a0
   1621e:	|  |  |  |  |   move.l (a0),d0
   16220:	|  |  |  |  |   lsl.l #3,d0
   16222:	|  |  |  |  |   movea.l d1,a0
   16224:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   16226:	|  |  |  |  |   move.l 4(a0),d2
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].x,
   1622a:	|  |  |  |  |   movea.l 1c978 <currentFloor>,a0
   16230:	|  |  |  |  |   move.l 4(a0),d1
   16234:	|  |  |  |  |   movea.l 1c978 <currentFloor>,a0
   1623a:	|  |  |  |  |   movea.l 12(a0),a0
   1623e:	|  |  |  |  |   move.l 16(sp),d0
   16242:	|  |  |  |  |   lsl.l #3,d0
   16244:	|  |  |  |  |   adda.l d0,a0
   16246:	|  |  |  |  |   movea.l 4(a0),a0
   1624a:	|  |  |  |  |   move.l 12(sp),d0
   1624e:	|  |  |  |  |   add.l d0,d0
   16250:	|  |  |  |  |   add.l d0,d0
   16252:	|  |  |  |  |   adda.l d0,a0
   16254:	|  |  |  |  |   move.l (a0),d0
   16256:	|  |  |  |  |   lsl.l #3,d0
   16258:	|  |  |  |  |   movea.l d1,a0
   1625a:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   1625c:	|  |  |  |  |   movea.l (a0),a1
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].y,
   1625e:	|  |  |  |  |   movea.l 1c978 <currentFloor>,a0
   16264:	|  |  |  |  |   move.l 4(a0),d1
   16268:	|  |  |  |  |   movea.l 1c978 <currentFloor>,a0
   1626e:	|  |  |  |  |   movea.l 12(a0),a0
   16272:	|  |  |  |  |   move.l 16(sp),d0
   16276:	|  |  |  |  |   lsl.l #3,d0
   16278:	|  |  |  |  |   adda.l d0,a0
   1627a:	|  |  |  |  |   movea.l 4(a0),a0
   1627e:	|  |  |  |  |   move.l 12(sp),d0
   16282:	|  |  |  |  |   addi.l #1073741823,d0
   16288:	|  |  |  |  |   add.l d0,d0
   1628a:	|  |  |  |  |   add.l d0,d0
   1628c:	|  |  |  |  |   adda.l d0,a0
   1628e:	|  |  |  |  |   move.l (a0),d0
   16290:	|  |  |  |  |   lsl.l #3,d0
   16292:	|  |  |  |  |   movea.l d1,a0
   16294:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   16296:	|  |  |  |  |   move.l 4(a0),d1
   1629a:	|  |  |  |  |   movea.l 1c978 <currentFloor>,a0
   162a0:	|  |  |  |  |   move.l 4(a0),d3
   162a4:	|  |  |  |  |   movea.l 1c978 <currentFloor>,a0
   162aa:	|  |  |  |  |   movea.l 12(a0),a0
   162ae:	|  |  |  |  |   move.l 16(sp),d0
   162b2:	|  |  |  |  |   lsl.l #3,d0
   162b4:	|  |  |  |  |   adda.l d0,a0
   162b6:	|  |  |  |  |   movea.l 4(a0),a0
   162ba:	|  |  |  |  |   move.l 12(sp),d0
   162be:	|  |  |  |  |   addi.l #1073741823,d0
   162c4:	|  |  |  |  |   add.l d0,d0
   162c6:	|  |  |  |  |   add.l d0,d0
   162c8:	|  |  |  |  |   adda.l d0,a0
   162ca:	|  |  |  |  |   move.l (a0),d0
   162cc:	|  |  |  |  |   lsl.l #3,d0
   162ce:	|  |  |  |  |   movea.l d3,a0
   162d0:	|  |  |  |  |   adda.l d0,a0
   162d2:	|  |  |  |  |   move.l (a0),d0
   162d4:	|  |  |  |  |   move.l d2,-(sp)
   162d6:	|  |  |  |  |   move.l a1,-(sp)
   162d8:	|  |  |  |  |   move.l d1,-(sp)
   162da:	|  |  |  |  |   move.l d0,-(sp)
   162dc:	|  |  |  |  |   jsr 3ee2 <drawLine>
   162e2:	|  |  |  |  |   lea 16(sp),sp
            for (j = 1; j < nV; j++) {
   162e6:	|  |  |  |  |   addq.l #1,12(sp)
   162ea:	|  |  |  |  \-> move.l 12(sp),d0
   162ee:	|  |  |  |      cmp.l 8(sp),d0
   162f2:	|  |  |  \----- blt.w 161f4 <drawFloor+0x3c>
            }
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].y,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].x,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].y);
   162f6:	|  |  |         movea.l 1c978 <currentFloor>,a0
   162fc:	|  |  |         move.l 4(a0),d1
   16300:	|  |  |         movea.l 1c978 <currentFloor>,a0
   16306:	|  |  |         movea.l 12(a0),a0
   1630a:	|  |  |         move.l 16(sp),d0
   1630e:	|  |  |         lsl.l #3,d0
   16310:	|  |  |         adda.l d0,a0
   16312:	|  |  |         movea.l 4(a0),a0
   16316:	|  |  |         move.l 8(sp),d0
   1631a:	|  |  |         addi.l #1073741823,d0
   16320:	|  |  |         add.l d0,d0
   16322:	|  |  |         add.l d0,d0
   16324:	|  |  |         adda.l d0,a0
   16326:	|  |  |         move.l (a0),d0
   16328:	|  |  |         lsl.l #3,d0
   1632a:	|  |  |         movea.l d1,a0
   1632c:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   1632e:	|  |  |         move.l 4(a0),d2
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].x,
   16332:	|  |  |         movea.l 1c978 <currentFloor>,a0
   16338:	|  |  |         move.l 4(a0),d1
   1633c:	|  |  |         movea.l 1c978 <currentFloor>,a0
   16342:	|  |  |         movea.l 12(a0),a0
   16346:	|  |  |         move.l 16(sp),d0
   1634a:	|  |  |         lsl.l #3,d0
   1634c:	|  |  |         adda.l d0,a0
   1634e:	|  |  |         movea.l 4(a0),a0
   16352:	|  |  |         move.l 8(sp),d0
   16356:	|  |  |         addi.l #1073741823,d0
   1635c:	|  |  |         add.l d0,d0
   1635e:	|  |  |         add.l d0,d0
   16360:	|  |  |         adda.l d0,a0
   16362:	|  |  |         move.l (a0),d0
   16364:	|  |  |         lsl.l #3,d0
   16366:	|  |  |         movea.l d1,a0
   16368:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   1636a:	|  |  |         movea.l (a0),a1
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].y,
   1636c:	|  |  |         movea.l 1c978 <currentFloor>,a0
   16372:	|  |  |         move.l 4(a0),d1
   16376:	|  |  |         movea.l 1c978 <currentFloor>,a0
   1637c:	|  |  |         movea.l 12(a0),a0
   16380:	|  |  |         move.l 16(sp),d0
   16384:	|  |  |         lsl.l #3,d0
   16386:	|  |  |         adda.l d0,a0
   16388:	|  |  |         movea.l 4(a0),a0
   1638c:	|  |  |         move.l (a0),d0
   1638e:	|  |  |         lsl.l #3,d0
   16390:	|  |  |         movea.l d1,a0
   16392:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   16394:	|  |  |         move.l 4(a0),d1
   16398:	|  |  |         movea.l 1c978 <currentFloor>,a0
   1639e:	|  |  |         move.l 4(a0),d3
   163a2:	|  |  |         movea.l 1c978 <currentFloor>,a0
   163a8:	|  |  |         movea.l 12(a0),a0
   163ac:	|  |  |         move.l 16(sp),d0
   163b0:	|  |  |         lsl.l #3,d0
   163b2:	|  |  |         adda.l d0,a0
   163b4:	|  |  |         movea.l 4(a0),a0
   163b8:	|  |  |         move.l (a0),d0
   163ba:	|  |  |         lsl.l #3,d0
   163bc:	|  |  |         movea.l d3,a0
   163be:	|  |  |         adda.l d0,a0
   163c0:	|  |  |         move.l (a0),d0
   163c2:	|  |  |         move.l d2,-(sp)
   163c4:	|  |  |         move.l a1,-(sp)
   163c6:	|  |  |         move.l d1,-(sp)
   163c8:	|  |  |         move.l d0,-(sp)
   163ca:	|  |  |         jsr 3ee2 <drawLine>
   163d0:	|  |  |         lea 16(sp),sp
    for (i = 0; i < currentFloor->numPolygons; i++) {
   163d4:	|  |  \-------> addq.l #1,16(sp)
   163d8:	|  \----------> movea.l 1c978 <currentFloor>,a0
   163de:	|               move.l 8(a0),d0
   163e2:	|               cmp.l 16(sp),d0
   163e6:	\-------------- bgt.w 161c8 <drawFloor+0x10>
        }
    }
}
   163ea:	                nop
   163ec:	                nop
   163ee:	                move.l (sp)+,d2
   163f0:	                move.l (sp)+,d3
   163f2:	                lea 12(sp),sp
   163f6:	                rts

000163f8 <getMatchingCorners>:

BOOL getMatchingCorners(struct floorPolygon *a, struct floorPolygon *b, int *cornerA, int *cornerB) {
   163f8:	                      lea -12(sp),sp
    int sharedVertices = 0;
   163fc:	                      clr.l 8(sp)
    int i, j;

    for (i = 0; i < a->numVertices; i++) {
   16400:	                      clr.l 4(sp)
   16404:	   /----------------- bra.w 16496 <getMatchingCorners+0x9e>
        for (j = 0; j < b->numVertices; j++) {
   16408:	/--|----------------> clr.l (sp)
   1640a:	|  |     /----------- bra.s 16486 <getMatchingCorners+0x8e>
            if (a->vertexID[i] == b->vertexID[j]) {
   1640c:	|  |  /--|----------> movea.l 16(sp),a0
   16410:	|  |  |  |            move.l 4(a0),d1
   16414:	|  |  |  |            move.l 4(sp),d0
   16418:	|  |  |  |            add.l d0,d0
   1641a:	|  |  |  |            add.l d0,d0
   1641c:	|  |  |  |            movea.l d1,a0
   1641e:	|  |  |  |            adda.l d0,a0
   16420:	|  |  |  |            move.l (a0),d1
   16422:	|  |  |  |            movea.l 20(sp),a0
   16426:	|  |  |  |            movea.l 4(a0),a0
   1642a:	|  |  |  |            move.l (sp),d0
   1642c:	|  |  |  |            add.l d0,d0
   1642e:	|  |  |  |            add.l d0,d0
   16430:	|  |  |  |            adda.l d0,a0
   16432:	|  |  |  |            move.l (a0),d0
   16434:	|  |  |  |            cmp.l d1,d0
   16436:	|  |  |  |  /-------- bne.s 16484 <getMatchingCorners+0x8c>
                if (sharedVertices++) {
   16438:	|  |  |  |  |         move.l 8(sp),d0
   1643c:	|  |  |  |  |         move.l d0,d1
   1643e:	|  |  |  |  |         addq.l #1,d1
   16440:	|  |  |  |  |         move.l d1,8(sp)
   16444:	|  |  |  |  |         tst.l d0
   16446:	|  |  |  |  |     /-- beq.s 16468 <getMatchingCorners+0x70>
                    *cornerB = a->vertexID[i];
   16448:	|  |  |  |  |     |   movea.l 16(sp),a0
   1644c:	|  |  |  |  |     |   move.l 4(a0),d1
   16450:	|  |  |  |  |     |   move.l 4(sp),d0
   16454:	|  |  |  |  |     |   add.l d0,d0
   16456:	|  |  |  |  |     |   add.l d0,d0
   16458:	|  |  |  |  |     |   movea.l d1,a0
   1645a:	|  |  |  |  |     |   adda.l d0,a0
   1645c:	|  |  |  |  |     |   move.l (a0),d0
   1645e:	|  |  |  |  |     |   movea.l 28(sp),a0
   16462:	|  |  |  |  |     |   move.l d0,(a0)
                    return TRUE;
   16464:	|  |  |  |  |     |   moveq #1,d0
   16466:	|  |  |  |  |  /--|-- bra.s 164a6 <getMatchingCorners+0xae>
                } else {
                    *cornerA = a->vertexID[i];
   16468:	|  |  |  |  |  |  \-> movea.l 16(sp),a0
   1646c:	|  |  |  |  |  |      move.l 4(a0),d1
   16470:	|  |  |  |  |  |      move.l 4(sp),d0
   16474:	|  |  |  |  |  |      add.l d0,d0
   16476:	|  |  |  |  |  |      add.l d0,d0
   16478:	|  |  |  |  |  |      movea.l d1,a0
   1647a:	|  |  |  |  |  |      adda.l d0,a0
   1647c:	|  |  |  |  |  |      move.l (a0),d0
   1647e:	|  |  |  |  |  |      movea.l 24(sp),a0
   16482:	|  |  |  |  |  |      move.l d0,(a0)
        for (j = 0; j < b->numVertices; j++) {
   16484:	|  |  |  |  \--|----> addq.l #1,(sp)
   16486:	|  |  |  \-----|----> movea.l 20(sp),a0
   1648a:	|  |  |        |      move.l (a0),d0
   1648c:	|  |  |        |      cmp.l (sp),d0
   1648e:	|  |  \--------|----- bgt.w 1640c <getMatchingCorners+0x14>
    for (i = 0; i < a->numVertices; i++) {
   16492:	|  |           |      addq.l #1,4(sp)
   16496:	|  \-----------|----> movea.l 16(sp),a0
   1649a:	|              |      move.l (a0),d0
   1649c:	|              |      cmp.l 4(sp),d0
   164a0:	\--------------|----- bgt.w 16408 <getMatchingCorners+0x10>
                }
            }
        }
    }

    return FALSE;
   164a4:	               |      clr.w d0
}
   164a6:	               \----> lea 12(sp),sp
   164aa:	                      rts

000164ac <noFloor>:



void noFloor () {
	currentFloor -> numPolygons = 0;
   164ac:	movea.l 1c978 <currentFloor>,a0
   164b2:	clr.l 8(a0)
	currentFloor -> polygon = NULL;
   164b6:	movea.l 1c978 <currentFloor>,a0
   164bc:	clr.l 12(a0)
	currentFloor -> vertex = NULL;
   164c0:	movea.l 1c978 <currentFloor>,a0
   164c6:	clr.l 4(a0)
	currentFloor -> matrix = NULL;
   164ca:	movea.l 1c978 <currentFloor>,a0
   164d0:	clr.l 16(a0)
}
   164d4:	nop
   164d6:	rts

000164d8 <inFloor>:

int inFloor (int x, int y) {
   164d8:	          subq.l #8,sp
	int i, r = -1;
   164da:	          moveq #-1,d0
   164dc:	          move.l d0,(sp)

	for (i = 0; i < currentFloor -> numPolygons; i ++)
   164de:	          clr.l 4(sp)
   164e2:	   /----- bra.s 16516 <inFloor+0x3e>
		if (pointInFloorPolygon (&currentFloor -> polygon[i], x, y))
   164e4:	/--|----> movea.l 1c978 <currentFloor>,a0
   164ea:	|  |      move.l 12(a0),d1
   164ee:	|  |      move.l 4(sp),d0
   164f2:	|  |      lsl.l #3,d0
   164f4:	|  |      add.l d1,d0
   164f6:	|  |      move.l 16(sp),-(sp)
   164fa:	|  |      move.l 16(sp),-(sp)
   164fe:	|  |      move.l d0,-(sp)
   16500:	|  |      jsr 166e2 <pointInFloorPolygon>
   16506:	|  |      lea 12(sp),sp
   1650a:	|  |      tst.w d0
   1650c:	|  |  /-- beq.s 16512 <inFloor+0x3a>
			r = i;
   1650e:	|  |  |   move.l 4(sp),(sp)
	for (i = 0; i < currentFloor -> numPolygons; i ++)
   16512:	|  |  \-> addq.l #1,4(sp)
   16516:	|  \----> movea.l 1c978 <currentFloor>,a0
   1651c:	|         move.l 8(a0),d0
   16520:	|         cmp.l 4(sp),d0
   16524:	\-------- bgt.s 164e4 <inFloor+0xc>

	return r;
   16526:	          move.l (sp),d0
}
   16528:	          addq.l #8,sp
   1652a:	          rts

0001652c <initFloor>:

BOOL initFloor () {
   1652c:	       lea -12(sp),sp
   16530:	       move.l a6,-(sp)
	currentFloor = AllocVec(sizeof(struct flor), MEMF_ANY);
   16532:	       moveq #20,d0
   16534:	       move.l d0,12(sp)
   16538:	       clr.l 8(sp)
   1653c:	       move.l 1c85c <SysBase>,d0
   16542:	       movea.l d0,a6
   16544:	       move.l 12(sp),d0
   16548:	       move.l 8(sp),d1
   1654c:	       jsr -684(a6)
   16550:	       move.l d0,4(sp)
   16554:	       move.l 4(sp),d0
   16558:	       move.l d0,1c978 <currentFloor>

    if(currentFloor == 0) {
   1655e:	       move.l 1c978 <currentFloor>,d0
   16564:	/----- bne.s 16578 <initFloor+0x4c>
        KPrintF("initFloor: Could not initialize Mem");
   16566:	|      pea 19faa <graphics.c.1c13408a+0x311>
   1656c:	|      jsr 17176 <KPrintF>
   16572:	|      addq.l #4,sp
        return FALSE;
   16574:	|      clr.w d0
   16576:	|  /-- bra.s 16580 <initFloor+0x54>
    }

	noFloor ();
   16578:	\--|-> jsr 164ac <noFloor>
	return TRUE;
   1657e:	   |   moveq #1,d0
}
   16580:	   \-> movea.l (sp)+,a6
   16582:	       lea 12(sp),sp
   16586:	       rts

00016588 <killFloor>:

void killFloor () {
   16588:	       lea -24(sp),sp
   1658c:	       move.l a6,-(sp)
	for (int i = 0; i < currentFloor -> numPolygons; i ++) {
   1658e:	       clr.l 24(sp)
   16592:	   /-- bra.s 165ec <killFloor+0x64>
		FreeVec(currentFloor -> polygon[i].vertexID);
   16594:	/--|-> movea.l 1c978 <currentFloor>,a0
   1659a:	|  |   move.l 12(a0),d1
   1659e:	|  |   move.l 24(sp),d0
   165a2:	|  |   lsl.l #3,d0
   165a4:	|  |   movea.l d1,a0
   165a6:	|  |   adda.l d0,a0
   165a8:	|  |   move.l 4(a0),8(sp)
   165ae:	|  |   move.l 1c85c <SysBase>,d0
   165b4:	|  |   movea.l d0,a6
   165b6:	|  |   movea.l 8(sp),a1
   165ba:	|  |   jsr -690(a6)
		FreeVec(currentFloor -> matrix[i]);
   165be:	|  |   movea.l 1c978 <currentFloor>,a0
   165c4:	|  |   move.l 16(a0),d1
   165c8:	|  |   move.l 24(sp),d0
   165cc:	|  |   add.l d0,d0
   165ce:	|  |   add.l d0,d0
   165d0:	|  |   movea.l d1,a0
   165d2:	|  |   adda.l d0,a0
   165d4:	|  |   move.l (a0),4(sp)
   165d8:	|  |   move.l 1c85c <SysBase>,d0
   165de:	|  |   movea.l d0,a6
   165e0:	|  |   movea.l 4(sp),a1
   165e4:	|  |   jsr -690(a6)
	for (int i = 0; i < currentFloor -> numPolygons; i ++) {
   165e8:	|  |   addq.l #1,24(sp)
   165ec:	|  \-> movea.l 1c978 <currentFloor>,a0
   165f2:	|      move.l 8(a0),d0
   165f6:	|      cmp.l 24(sp),d0
   165fa:	\----- bgt.s 16594 <killFloor+0xc>
	}
	FreeVec(currentFloor -> polygon);
   165fc:	       movea.l 1c978 <currentFloor>,a0
   16602:	       move.l 12(a0),20(sp)
   16608:	       move.l 1c85c <SysBase>,d0
   1660e:	       movea.l d0,a6
   16610:	       movea.l 20(sp),a1
   16614:	       jsr -690(a6)
	currentFloor -> polygon = NULL;
   16618:	       movea.l 1c978 <currentFloor>,a0
   1661e:	       clr.l 12(a0)
	FreeVec(currentFloor -> vertex);
   16622:	       movea.l 1c978 <currentFloor>,a0
   16628:	       move.l 4(a0),16(sp)
   1662e:	       move.l 1c85c <SysBase>,d0
   16634:	       movea.l d0,a6
   16636:	       movea.l 16(sp),a1
   1663a:	       jsr -690(a6)
	currentFloor -> vertex = NULL;
   1663e:	       movea.l 1c978 <currentFloor>,a0
   16644:	       clr.l 4(a0)
	FreeVec(currentFloor -> matrix);
   16648:	       movea.l 1c978 <currentFloor>,a0
   1664e:	       move.l 16(a0),12(sp)
   16654:	       move.l 1c85c <SysBase>,d0
   1665a:	       movea.l d0,a6
   1665c:	       movea.l 12(sp),a1
   16660:	       jsr -690(a6)
	currentFloor -> matrix = NULL;
   16664:	       movea.l 1c978 <currentFloor>,a0
   1666a:	       clr.l 16(a0)
}
   1666e:	       nop
   16670:	       movea.l (sp)+,a6
   16672:	       lea 24(sp),sp
   16676:	       rts

00016678 <polysShareSide>:

BOOL polysShareSide (struct floorPolygon a, struct floorPolygon b) {
   16678:	                   lea -12(sp),sp
	int sharedVertices = 0;
   1667c:	                   clr.l 8(sp)
	int i, j;

	for (i = 0; i < a.numVertices; i ++) {
   16680:	                   clr.l 4(sp)
   16684:	   /-------------- bra.s 166d0 <polysShareSide+0x58>
		for (j = 0; j < b.numVertices; j ++) {
   16686:	/--|-------------> clr.l (sp)
   16688:	|  |     /-------- bra.s 166c4 <polysShareSide+0x4c>
			if (a.vertexID[i] == b.vertexID[j]) {
   1668a:	|  |  /--|-------> move.l 20(sp),d1
   1668e:	|  |  |  |         move.l 4(sp),d0
   16692:	|  |  |  |         add.l d0,d0
   16694:	|  |  |  |         add.l d0,d0
   16696:	|  |  |  |         movea.l d1,a0
   16698:	|  |  |  |         adda.l d0,a0
   1669a:	|  |  |  |         move.l (a0),d1
   1669c:	|  |  |  |         movea.l 28(sp),a0
   166a0:	|  |  |  |         move.l (sp),d0
   166a2:	|  |  |  |         add.l d0,d0
   166a4:	|  |  |  |         add.l d0,d0
   166a6:	|  |  |  |         adda.l d0,a0
   166a8:	|  |  |  |         move.l (a0),d0
   166aa:	|  |  |  |         cmp.l d1,d0
   166ac:	|  |  |  |     /-- bne.s 166c2 <polysShareSide+0x4a>
				if (sharedVertices ++) return TRUE;
   166ae:	|  |  |  |     |   move.l 8(sp),d0
   166b2:	|  |  |  |     |   move.l d0,d1
   166b4:	|  |  |  |     |   addq.l #1,d1
   166b6:	|  |  |  |     |   move.l d1,8(sp)
   166ba:	|  |  |  |     |   tst.l d0
   166bc:	|  |  |  |     +-- beq.s 166c2 <polysShareSide+0x4a>
   166be:	|  |  |  |     |   moveq #1,d0
   166c0:	|  |  |  |  /--|-- bra.s 166dc <polysShareSide+0x64>
		for (j = 0; j < b.numVertices; j ++) {
   166c2:	|  |  |  |  |  \-> addq.l #1,(sp)
   166c4:	|  |  |  \--|----> move.l 24(sp),d0
   166c8:	|  |  |     |      cmp.l (sp),d0
   166ca:	|  |  \-----|----- bgt.s 1668a <polysShareSide+0x12>
	for (i = 0; i < a.numVertices; i ++) {
   166cc:	|  |        |      addq.l #1,4(sp)
   166d0:	|  \--------|----> move.l 16(sp),d0
   166d4:	|           |      cmp.l 4(sp),d0
   166d8:	\-----------|----- bgt.s 16686 <polysShareSide+0xe>
			}
		}
	}

	return FALSE;
   166da:	            |      clr.w d0
}
   166dc:	            \----> lea 12(sp),sp
   166e0:	                   rts

000166e2 <pointInFloorPolygon>:

BOOL pointInFloorPolygon (struct floorPolygon * floorPoly, int x, int y) {
   166e2:	             lea -28(sp),sp
   166e6:	             move.l d3,-(sp)
   166e8:	             move.l d2,-(sp)
	int i = 0, j, c = 0;
   166ea:	             clr.l 32(sp)
   166ee:	             clr.l 24(sp)
	float xp_i, yp_i;
	float xp_j, yp_j;

	for (j = floorPoly->numVertices - 1; i < floorPoly->numVertices; j = i++) {
   166f2:	             movea.l 40(sp),a0
   166f6:	             move.l (a0),d0
   166f8:	             move.l d0,d1
   166fa:	             subq.l #1,d1
   166fc:	             move.l d1,28(sp)
   16700:	   /-------- bra.w 168fa <pointInFloorPolygon+0x218>

		xp_i = currentFloor->vertex[floorPoly->vertexID[i]].x;
   16704:	/--|-------> movea.l 1c978 <currentFloor>,a0
   1670a:	|  |         move.l 4(a0),d1
   1670e:	|  |         movea.l 40(sp),a0
   16712:	|  |         movea.l 4(a0),a0
   16716:	|  |         move.l 32(sp),d0
   1671a:	|  |         add.l d0,d0
   1671c:	|  |         add.l d0,d0
   1671e:	|  |         adda.l d0,a0
   16720:	|  |         move.l (a0),d0
   16722:	|  |         lsl.l #3,d0
   16724:	|  |         movea.l d1,a0
   16726:	|  |         adda.l d0,a0
   16728:	|  |         move.l (a0),d0
   1672a:	|  |         move.l d0,-(sp)
   1672c:	|  |         jsr 175b2 <__floatsisf>
   16732:	|  |         addq.l #4,sp
   16734:	|  |         move.l d0,20(sp)
		yp_i = currentFloor->vertex[floorPoly->vertexID[i]].y;
   16738:	|  |         movea.l 1c978 <currentFloor>,a0
   1673e:	|  |         move.l 4(a0),d1
   16742:	|  |         movea.l 40(sp),a0
   16746:	|  |         movea.l 4(a0),a0
   1674a:	|  |         move.l 32(sp),d0
   1674e:	|  |         add.l d0,d0
   16750:	|  |         add.l d0,d0
   16752:	|  |         adda.l d0,a0
   16754:	|  |         move.l (a0),d0
   16756:	|  |         lsl.l #3,d0
   16758:	|  |         movea.l d1,a0
   1675a:	|  |         adda.l d0,a0
   1675c:	|  |         move.l 4(a0),d0
   16760:	|  |         move.l d0,-(sp)
   16762:	|  |         jsr 175b2 <__floatsisf>
   16768:	|  |         addq.l #4,sp
   1676a:	|  |         move.l d0,16(sp)
		xp_j = currentFloor->vertex[floorPoly->vertexID[j]].x;
   1676e:	|  |         movea.l 1c978 <currentFloor>,a0
   16774:	|  |         move.l 4(a0),d1
   16778:	|  |         movea.l 40(sp),a0
   1677c:	|  |         movea.l 4(a0),a0
   16780:	|  |         move.l 28(sp),d0
   16784:	|  |         add.l d0,d0
   16786:	|  |         add.l d0,d0
   16788:	|  |         adda.l d0,a0
   1678a:	|  |         move.l (a0),d0
   1678c:	|  |         lsl.l #3,d0
   1678e:	|  |         movea.l d1,a0
   16790:	|  |         adda.l d0,a0
   16792:	|  |         move.l (a0),d0
   16794:	|  |         move.l d0,-(sp)
   16796:	|  |         jsr 175b2 <__floatsisf>
   1679c:	|  |         addq.l #4,sp
   1679e:	|  |         move.l d0,12(sp)
		yp_j = currentFloor->vertex[floorPoly->vertexID[j]].y;
   167a2:	|  |         movea.l 1c978 <currentFloor>,a0
   167a8:	|  |         move.l 4(a0),d1
   167ac:	|  |         movea.l 40(sp),a0
   167b0:	|  |         movea.l 4(a0),a0
   167b4:	|  |         move.l 28(sp),d0
   167b8:	|  |         add.l d0,d0
   167ba:	|  |         add.l d0,d0
   167bc:	|  |         adda.l d0,a0
   167be:	|  |         move.l (a0),d0
   167c0:	|  |         lsl.l #3,d0
   167c2:	|  |         movea.l d1,a0
   167c4:	|  |         adda.l d0,a0
   167c6:	|  |         move.l 4(a0),d0
   167ca:	|  |         move.l d0,-(sp)
   167cc:	|  |         jsr 175b2 <__floatsisf>
   167d2:	|  |         addq.l #4,sp
   167d4:	|  |         move.l d0,8(sp)

		if ((((yp_i <= y) && (y < yp_j)) || ((yp_j <= y) && (y < yp_i))) &&
   167d8:	|  |         move.l 48(sp),-(sp)
   167dc:	|  |         jsr 175b2 <__floatsisf>
   167e2:	|  |         addq.l #4,sp
   167e4:	|  |         move.l d0,-(sp)
   167e6:	|  |         move.l 20(sp),-(sp)
   167ea:	|  |         jsr 17754 <__lesf2>
   167f0:	|  |         addq.l #8,sp
   167f2:	|  |         tst.l d0
   167f4:	|  |     /-- bgt.s 16814 <pointInFloorPolygon+0x132>
   167f6:	|  |     |   move.l 48(sp),-(sp)
   167fa:	|  |     |   jsr 175b2 <__floatsisf>
   16800:	|  |     |   addq.l #4,sp
   16802:	|  |     |   move.l d0,-(sp)
   16804:	|  |     |   move.l 12(sp),-(sp)
   16808:	|  |     |   jsr 1771e <__gtsf2>
   1680e:	|  |     |   addq.l #8,sp
   16810:	|  |     |   tst.l d0
   16812:	|  |  /--|-- bgt.s 16854 <pointInFloorPolygon+0x172>
   16814:	|  |  |  \-> move.l 48(sp),-(sp)
   16818:	|  |  |      jsr 175b2 <__floatsisf>
   1681e:	|  |  |      addq.l #4,sp
   16820:	|  |  |      move.l d0,-(sp)
   16822:	|  |  |      move.l 12(sp),-(sp)
   16826:	|  |  |      jsr 17754 <__lesf2>
   1682c:	|  |  |      addq.l #8,sp
   1682e:	|  |  |      tst.l d0
   16830:	|  |  |  /-- bgt.w 168ea <pointInFloorPolygon+0x208>
   16834:	|  |  |  |   move.l 48(sp),-(sp)
   16838:	|  |  |  |   jsr 175b2 <__floatsisf>
   1683e:	|  |  |  |   addq.l #4,sp
   16840:	|  |  |  |   move.l d0,-(sp)
   16842:	|  |  |  |   move.l 20(sp),-(sp)
   16846:	|  |  |  |   jsr 1771e <__gtsf2>
   1684c:	|  |  |  |   addq.l #8,sp
   1684e:	|  |  |  |   tst.l d0
   16850:	|  |  |  +-- ble.w 168ea <pointInFloorPolygon+0x208>
			(x < (xp_j - xp_i) * (y - yp_i) / (yp_j - yp_i) + xp_i)) {
   16854:	|  |  \--|-> move.l 44(sp),-(sp)
   16858:	|  |     |   jsr 175b2 <__floatsisf>
   1685e:	|  |     |   addq.l #4,sp
   16860:	|  |     |   move.l d0,d3
   16862:	|  |     |   move.l 20(sp),-(sp)
   16866:	|  |     |   move.l 16(sp),-(sp)
   1686a:	|  |     |   jsr 178a6 <__subsf3>
   16870:	|  |     |   addq.l #8,sp
   16872:	|  |     |   move.l d0,d2
   16874:	|  |     |   move.l 48(sp),-(sp)
   16878:	|  |     |   jsr 175b2 <__floatsisf>
   1687e:	|  |     |   addq.l #4,sp
   16880:	|  |     |   move.l 16(sp),-(sp)
   16884:	|  |     |   move.l d0,-(sp)
   16886:	|  |     |   jsr 178a6 <__subsf3>
   1688c:	|  |     |   addq.l #8,sp
   1688e:	|  |     |   move.l d0,-(sp)
   16890:	|  |     |   move.l d2,-(sp)
   16892:	|  |     |   jsr 17664 <__mulsf3>
   16898:	|  |     |   addq.l #8,sp
   1689a:	|  |     |   move.l d0,d2
   1689c:	|  |     |   move.l 16(sp),-(sp)
   168a0:	|  |     |   move.l 12(sp),-(sp)
   168a4:	|  |     |   jsr 178a6 <__subsf3>
   168aa:	|  |     |   addq.l #8,sp
   168ac:	|  |     |   move.l d0,-(sp)
   168ae:	|  |     |   move.l d2,-(sp)
   168b0:	|  |     |   jsr 1745e <__divsf3>
   168b6:	|  |     |   addq.l #8,sp
   168b8:	|  |     |   move.l 20(sp),-(sp)
   168bc:	|  |     |   move.l d0,-(sp)
   168be:	|  |     |   jsr 17364 <__addsf3>
   168c4:	|  |     |   addq.l #8,sp
		if ((((yp_i <= y) && (y < yp_j)) || ((yp_j <= y) && (y < yp_i))) &&
   168c6:	|  |     |   move.l d0,-(sp)
   168c8:	|  |     |   move.l d3,-(sp)
   168ca:	|  |     |   jsr 177d8 <__ltsf2>
   168d0:	|  |     |   addq.l #8,sp
   168d2:	|  |     |   tst.l d0
   168d4:	|  |     +-- bge.s 168ea <pointInFloorPolygon+0x208>

			c = !c;
   168d6:	|  |     |   tst.l 24(sp)
   168da:	|  |     |   seq d0
   168dc:	|  |     |   neg.b d0
   168de:	|  |     |   move.b d0,d0
   168e0:	|  |     |   andi.l #255,d0
   168e6:	|  |     |   move.l d0,24(sp)
	for (j = floorPoly->numVertices - 1; i < floorPoly->numVertices; j = i++) {
   168ea:	|  |     \-> move.l 32(sp),d0
   168ee:	|  |         move.l d0,d1
   168f0:	|  |         addq.l #1,d1
   168f2:	|  |         move.l d1,32(sp)
   168f6:	|  |         move.l d0,28(sp)
   168fa:	|  \-------> movea.l 40(sp),a0
   168fe:	|            move.l (a0),d0
   16900:	|            cmp.l 32(sp),d0
   16904:	\----------- bgt.w 16704 <pointInFloorPolygon+0x22>
		}
	}
	return c ? TRUE : FALSE;
   16908:	             tst.l 24(sp)
   1690c:	             sne d0
   1690e:	             neg.b d0
   16910:	             move.b d0,d0
   16912:	             andi.w #255,d0
}
   16916:	             move.l (sp)+,d2
   16918:	             move.l (sp)+,d3
   1691a:	             lea 28(sp),sp
   1691e:	             rts

00016920 <setFloor>:

BOOL setFloor (int fileNum) {
   16920:	                               lea -132(sp),sp
   16924:	                               move.l a6,-(sp)
   16926:	                               move.l a2,-(sp)
	int i, j;

	killFloor ();
   16928:	                               jsr 16588 <killFloor>

	if (! openFileFromNum (fileNum)) return FALSE;
   1692e:	                               move.l 144(sp),-(sp)
   16932:	                               jsr 6df0 <openFileFromNum>
   16938:	                               addq.l #4,sp
   1693a:	                               tst.l d0
   1693c:	                           /-- bne.s 16944 <setFloor+0x24>
   1693e:	                           |   clr.w d0
   16940:	/--------------------------|-- bra.w 17090 <setFloor+0x770>

	// Find out how many polygons there are and reserve memory

	currentFloor -> originalNum = fileNum;
   16944:	|                          \-> movea.l 1c978 <currentFloor>,a0
   1694a:	|                              move.l 144(sp),(a0)
	currentFloor -> numPolygons = FGetC (bigDataFile);
   1694e:	|                              move.l 1c844 <bigDataFile>,118(sp)
   16956:	|                              move.l 1c864 <DOSBase>,d0
   1695c:	|                              movea.l d0,a6
   1695e:	|                              move.l 118(sp),d1
   16962:	|                              jsr -306(a6)
   16966:	|                              move.l d0,114(sp)
   1696a:	|                              move.l 114(sp),d0
   1696e:	|                              movea.l 1c978 <currentFloor>,a0
   16974:	|                              move.l d0,8(a0)
	currentFloor -> polygon = AllocVec(  sizeof( struct floorPolygon) * currentFloor -> numPolygons, MEMF_ANY);
   16978:	|                              movea.l 1c978 <currentFloor>,a0
   1697e:	|                              move.l 8(a0),d0
   16982:	|                              lsl.l #3,d0
   16984:	|                              move.l d0,110(sp)
   16988:	|                              clr.l 106(sp)
   1698c:	|                              move.l 1c85c <SysBase>,d0
   16992:	|                              movea.l d0,a6
   16994:	|                              move.l 110(sp),d0
   16998:	|                              move.l 106(sp),d1
   1699c:	|                              jsr -684(a6)
   169a0:	|                              move.l d0,102(sp)
   169a4:	|                              move.l 102(sp),d0
   169a8:	|                              movea.l 1c978 <currentFloor>,a0
   169ae:	|                              move.l d0,12(a0)
	if (!(currentFloor -> polygon)) {
   169b2:	|                              movea.l 1c978 <currentFloor>,a0
   169b8:	|                              move.l 12(a0),d0
   169bc:	|                          /-- bne.s 169d2 <setFloor+0xb2>
		KPrintF("setFloor: Cannot allocate memory");
   169be:	|                          |   pea 19fce <graphics.c.1c13408a+0x335>
   169c4:	|                          |   jsr 17176 <KPrintF>
   169ca:	|                          |   addq.l #4,sp
		return FALSE;
   169cc:	|                          |   clr.w d0
   169ce:	+--------------------------|-- bra.w 17090 <setFloor+0x770>
	}

	// Read in each polygon

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   169d2:	|                          \-> clr.l 136(sp)
   169d6:	|                    /-------- bra.w 16aee <setFloor+0x1ce>

		// Find out how many vertex IDs there are and reserve memory

		currentFloor -> polygon[i].numVertices = FGetC (bigDataFile);
   169da:	|                 /--|-------> move.l 1c844 <bigDataFile>,26(sp)
   169e2:	|                 |  |         move.l 1c864 <DOSBase>,d0
   169e8:	|                 |  |         movea.l d0,a6
   169ea:	|                 |  |         move.l 26(sp),d1
   169ee:	|                 |  |         jsr -306(a6)
   169f2:	|                 |  |         move.l d0,22(sp)
   169f6:	|                 |  |         move.l 22(sp),d1
   169fa:	|                 |  |         movea.l 1c978 <currentFloor>,a0
   16a00:	|                 |  |         movea.l 12(a0),a0
   16a04:	|                 |  |         move.l 136(sp),d0
   16a08:	|                 |  |         lsl.l #3,d0
   16a0a:	|                 |  |         adda.l d0,a0
   16a0c:	|                 |  |         move.l d1,(a0)
		currentFloor -> polygon[i].vertexID = AllocVec(sizeof (int) * currentFloor -> polygon[i].numVertices, MEMF_ANY);
   16a0e:	|                 |  |         movea.l 1c978 <currentFloor>,a0
   16a14:	|                 |  |         move.l 12(a0),d1
   16a18:	|                 |  |         move.l 136(sp),d0
   16a1c:	|                 |  |         lsl.l #3,d0
   16a1e:	|                 |  |         movea.l d1,a0
   16a20:	|                 |  |         adda.l d0,a0
   16a22:	|                 |  |         move.l (a0),d0
   16a24:	|                 |  |         add.l d0,d0
   16a26:	|                 |  |         add.l d0,d0
   16a28:	|                 |  |         move.l d0,18(sp)
   16a2c:	|                 |  |         clr.l 14(sp)
   16a30:	|                 |  |         move.l 1c85c <SysBase>,d0
   16a36:	|                 |  |         movea.l d0,a6
   16a38:	|                 |  |         move.l 18(sp),d0
   16a3c:	|                 |  |         move.l 14(sp),d1
   16a40:	|                 |  |         jsr -684(a6)
   16a44:	|                 |  |         move.l d0,10(sp)
   16a48:	|                 |  |         move.l 10(sp),d1
   16a4c:	|                 |  |         movea.l 1c978 <currentFloor>,a0
   16a52:	|                 |  |         movea.l 12(a0),a0
   16a56:	|                 |  |         move.l 136(sp),d0
   16a5a:	|                 |  |         lsl.l #3,d0
   16a5c:	|                 |  |         adda.l d0,a0
   16a5e:	|                 |  |         move.l d1,4(a0)
		if (!(currentFloor -> polygon[i].vertexID)) {
   16a62:	|                 |  |         movea.l 1c978 <currentFloor>,a0
   16a68:	|                 |  |         move.l 12(a0),d1
   16a6c:	|                 |  |         move.l 136(sp),d0
   16a70:	|                 |  |         lsl.l #3,d0
   16a72:	|                 |  |         movea.l d1,a0
   16a74:	|                 |  |         adda.l d0,a0
   16a76:	|                 |  |         move.l 4(a0),d0
   16a7a:	|                 |  |     /-- bne.s 16a90 <setFloor+0x170>
			KPrintF("setFloor: Cannot allocate memory");
   16a7c:	|                 |  |     |   pea 19fce <graphics.c.1c13408a+0x335>
   16a82:	|                 |  |     |   jsr 17176 <KPrintF>
   16a88:	|                 |  |     |   addq.l #4,sp
			return FALSE;
   16a8a:	|                 |  |     |   clr.w d0
   16a8c:	+-----------------|--|-----|-- bra.w 17090 <setFloor+0x770>
		}

		// Read in each vertex ID

		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
   16a90:	|                 |  |     \-> clr.l 132(sp)
   16a94:	|                 |  |     /-- bra.s 16ace <setFloor+0x1ae>
			currentFloor -> polygon[i].vertexID[j] = get2bytes (bigDataFile);
   16a96:	|                 |  |  /--|-> move.l 1c844 <bigDataFile>,d1
   16a9c:	|                 |  |  |  |   movea.l 1c978 <currentFloor>,a0
   16aa2:	|                 |  |  |  |   movea.l 12(a0),a0
   16aa6:	|                 |  |  |  |   move.l 136(sp),d0
   16aaa:	|                 |  |  |  |   lsl.l #3,d0
   16aac:	|                 |  |  |  |   adda.l d0,a0
   16aae:	|                 |  |  |  |   movea.l 4(a0),a0
   16ab2:	|                 |  |  |  |   move.l 132(sp),d0
   16ab6:	|                 |  |  |  |   add.l d0,d0
   16ab8:	|                 |  |  |  |   add.l d0,d0
   16aba:	|                 |  |  |  |   lea (0,a0,d0.l),a2
   16abe:	|                 |  |  |  |   move.l d1,-(sp)
   16ac0:	|                 |  |  |  |   jsr 6bc <get2bytes>
   16ac6:	|                 |  |  |  |   addq.l #4,sp
   16ac8:	|                 |  |  |  |   move.l d0,(a2)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
   16aca:	|                 |  |  |  |   addq.l #1,132(sp)
   16ace:	|                 |  |  |  \-> movea.l 1c978 <currentFloor>,a0
   16ad4:	|                 |  |  |      move.l 12(a0),d1
   16ad8:	|                 |  |  |      move.l 136(sp),d0
   16adc:	|                 |  |  |      lsl.l #3,d0
   16ade:	|                 |  |  |      movea.l d1,a0
   16ae0:	|                 |  |  |      adda.l d0,a0
   16ae2:	|                 |  |  |      move.l (a0),d0
   16ae4:	|                 |  |  |      cmp.l 132(sp),d0
   16ae8:	|                 |  |  \----- bgt.s 16a96 <setFloor+0x176>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16aea:	|                 |  |         addq.l #1,136(sp)
   16aee:	|                 |  \-------> movea.l 1c978 <currentFloor>,a0
   16af4:	|                 |            move.l 8(a0),d0
   16af8:	|                 |            cmp.l 136(sp),d0
   16afc:	|                 \----------- bgt.w 169da <setFloor+0xba>
		}
	}

	// Find out how many vertices there are and reserve memory

	i = get2bytes (bigDataFile);
   16b00:	|                              move.l 1c844 <bigDataFile>,d0
   16b06:	|                              move.l d0,-(sp)
   16b08:	|                              jsr 6bc <get2bytes>
   16b0e:	|                              addq.l #4,sp
   16b10:	|                              move.l d0,136(sp)
	currentFloor -> vertex = AllocVec( sizeof(struct POINT)*i,MEMF_ANY);
   16b14:	|                              move.l 136(sp),d0
   16b18:	|                              lsl.l #3,d0
   16b1a:	|                              move.l d0,98(sp)
   16b1e:	|                              clr.l 94(sp)
   16b22:	|                              move.l 1c85c <SysBase>,d0
   16b28:	|                              movea.l d0,a6
   16b2a:	|                              move.l 98(sp),d0
   16b2e:	|                              move.l 94(sp),d1
   16b32:	|                              jsr -684(a6)
   16b36:	|                              move.l d0,90(sp)
   16b3a:	|                              move.l 90(sp),d0
   16b3e:	|                              movea.l 1c978 <currentFloor>,a0
   16b44:	|                              move.l d0,4(a0)

	if (!(currentFloor -> vertex)) {
   16b48:	|                              movea.l 1c978 <currentFloor>,a0
   16b4e:	|                              move.l 4(a0),d0
   16b52:	|                          /-- bne.s 16b68 <setFloor+0x248>
		KPrintF("setFloor: Cannot allocate memory");
   16b54:	|                          |   pea 19fce <graphics.c.1c13408a+0x335>
   16b5a:	|                          |   jsr 17176 <KPrintF>
   16b60:	|                          |   addq.l #4,sp
		return FALSE;
   16b62:	|                          |   clr.w d0
   16b64:	+--------------------------|-- bra.w 17090 <setFloor+0x770>
	}

	for (j = 0; j < i; j ++) {
   16b68:	|                          \-> clr.l 132(sp)
   16b6c:	|                          /-- bra.s 16bc0 <setFloor+0x2a0>
		currentFloor -> vertex[j].x = get2bytes (bigDataFile);
   16b6e:	|                       /--|-> move.l 1c844 <bigDataFile>,d1
   16b74:	|                       |  |   movea.l 1c978 <currentFloor>,a0
   16b7a:	|                       |  |   movea.l 4(a0),a0
   16b7e:	|                       |  |   move.l 132(sp),d0
   16b82:	|                       |  |   lsl.l #3,d0
   16b84:	|                       |  |   lea (0,a0,d0.l),a2
   16b88:	|                       |  |   move.l d1,-(sp)
   16b8a:	|                       |  |   jsr 6bc <get2bytes>
   16b90:	|                       |  |   addq.l #4,sp
   16b92:	|                       |  |   move.l d0,(a2)
		currentFloor -> vertex[j].y = get2bytes (bigDataFile);
   16b94:	|                       |  |   move.l 1c844 <bigDataFile>,d1
   16b9a:	|                       |  |   movea.l 1c978 <currentFloor>,a0
   16ba0:	|                       |  |   movea.l 4(a0),a0
   16ba4:	|                       |  |   move.l 132(sp),d0
   16ba8:	|                       |  |   lsl.l #3,d0
   16baa:	|                       |  |   lea (0,a0,d0.l),a2
   16bae:	|                       |  |   move.l d1,-(sp)
   16bb0:	|                       |  |   jsr 6bc <get2bytes>
   16bb6:	|                       |  |   addq.l #4,sp
   16bb8:	|                       |  |   move.l d0,4(a2)
	for (j = 0; j < i; j ++) {
   16bbc:	|                       |  |   addq.l #1,132(sp)
   16bc0:	|                       |  \-> move.l 132(sp),d0
   16bc4:	|                       |      cmp.l 136(sp),d0
   16bc8:	|                       \----- blt.s 16b6e <setFloor+0x24e>
	}

	finishAccess ();
   16bca:	|                              jsr 6ce8 <finishAccess>

	// Now build the movement martix

	currentFloor -> matrix = AllocVec( sizeof(int) * currentFloor -> numPolygons, MEMF_ANY);
   16bd0:	|                              movea.l 1c978 <currentFloor>,a0
   16bd6:	|                              move.l 8(a0),d0
   16bda:	|                              add.l d0,d0
   16bdc:	|                              add.l d0,d0
   16bde:	|                              move.l d0,86(sp)
   16be2:	|                              clr.l 82(sp)
   16be6:	|                              move.l 1c85c <SysBase>,d0
   16bec:	|                              movea.l d0,a6
   16bee:	|                              move.l 86(sp),d0
   16bf2:	|                              move.l 82(sp),d1
   16bf6:	|                              jsr -684(a6)
   16bfa:	|                              move.l d0,78(sp)
   16bfe:	|                              move.l 78(sp),d0
   16c02:	|                              movea.l 1c978 <currentFloor>,a0
   16c08:	|                              move.l d0,16(a0)
	int * * distanceMatrix = AllocVec( sizeof(int) * currentFloor -> numPolygons, MEMF_ANY);
   16c0c:	|                              movea.l 1c978 <currentFloor>,a0
   16c12:	|                              move.l 8(a0),d0
   16c16:	|                              add.l d0,d0
   16c18:	|                              add.l d0,d0
   16c1a:	|                              move.l d0,74(sp)
   16c1e:	|                              clr.l 70(sp)
   16c22:	|                              move.l 1c85c <SysBase>,d0
   16c28:	|                              movea.l d0,a6
   16c2a:	|                              move.l 74(sp),d0
   16c2e:	|                              move.l 70(sp),d1
   16c32:	|                              jsr -684(a6)
   16c36:	|                              move.l d0,66(sp)
   16c3a:	|                              move.l 66(sp),d0
   16c3e:	|                              move.l d0,62(sp)


	if (!(currentFloor -> matrix)) {
   16c42:	|                              movea.l 1c978 <currentFloor>,a0
   16c48:	|                              move.l 16(a0),d0
   16c4c:	|                          /-- bne.s 16c62 <setFloor+0x342>
		KPrintF("setFloor: Cannot allocate memory");
   16c4e:	|                          |   pea 19fce <graphics.c.1c13408a+0x335>
   16c54:	|                          |   jsr 17176 <KPrintF>
   16c5a:	|                          |   addq.l #4,sp
		return FALSE;
   16c5c:	|                          |   clr.w d0
   16c5e:	+--------------------------|-- bra.w 17090 <setFloor+0x770>
	}

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16c62:	|                          \-> clr.l 136(sp)
   16c66:	|                    /-------- bra.w 16d8a <setFloor+0x46a>
		currentFloor -> matrix[i] = AllocVec( sizeof(int) * currentFloor -> numPolygons,MEMF_ANY);
   16c6a:	|                 /--|-------> movea.l 1c978 <currentFloor>,a0
   16c70:	|                 |  |         move.l 8(a0),d0
   16c74:	|                 |  |         add.l d0,d0
   16c76:	|                 |  |         add.l d0,d0
   16c78:	|                 |  |         move.l d0,50(sp)
   16c7c:	|                 |  |         clr.l 46(sp)
   16c80:	|                 |  |         move.l 1c85c <SysBase>,d0
   16c86:	|                 |  |         movea.l d0,a6
   16c88:	|                 |  |         move.l 50(sp),d0
   16c8c:	|                 |  |         move.l 46(sp),d1
   16c90:	|                 |  |         jsr -684(a6)
   16c94:	|                 |  |         move.l d0,42(sp)
   16c98:	|                 |  |         move.l 42(sp),d0
   16c9c:	|                 |  |         movea.l 1c978 <currentFloor>,a0
   16ca2:	|                 |  |         movea.l 16(a0),a0
   16ca6:	|                 |  |         move.l 136(sp),d1
   16caa:	|                 |  |         add.l d1,d1
   16cac:	|                 |  |         add.l d1,d1
   16cae:	|                 |  |         adda.l d1,a0
   16cb0:	|                 |  |         move.l d0,(a0)
		distanceMatrix        [i] = AllocVec( sizeof(int) * currentFloor -> numPolygons,MEMF_ANY);
   16cb2:	|                 |  |         movea.l 1c978 <currentFloor>,a0
   16cb8:	|                 |  |         move.l 8(a0),d0
   16cbc:	|                 |  |         add.l d0,d0
   16cbe:	|                 |  |         add.l d0,d0
   16cc0:	|                 |  |         move.l d0,38(sp)
   16cc4:	|                 |  |         clr.l 34(sp)
   16cc8:	|                 |  |         move.l 1c85c <SysBase>,d0
   16cce:	|                 |  |         movea.l d0,a6
   16cd0:	|                 |  |         move.l 38(sp),d0
   16cd4:	|                 |  |         move.l 34(sp),d1
   16cd8:	|                 |  |         jsr -684(a6)
   16cdc:	|                 |  |         move.l d0,30(sp)
   16ce0:	|                 |  |         move.l 30(sp),d1
   16ce4:	|                 |  |         move.l 136(sp),d0
   16ce8:	|                 |  |         add.l d0,d0
   16cea:	|                 |  |         add.l d0,d0
   16cec:	|                 |  |         movea.l 62(sp),a0
   16cf0:	|                 |  |         adda.l d0,a0
   16cf2:	|                 |  |         move.l d1,(a0)
		if (!(currentFloor -> matrix[i])) { 
   16cf4:	|                 |  |         movea.l 1c978 <currentFloor>,a0
   16cfa:	|                 |  |         move.l 16(a0),d1
   16cfe:	|                 |  |         move.l 136(sp),d0
   16d02:	|                 |  |         add.l d0,d0
   16d04:	|                 |  |         add.l d0,d0
   16d06:	|                 |  |         movea.l d1,a0
   16d08:	|                 |  |         adda.l d0,a0
   16d0a:	|                 |  |         move.l (a0),d0
   16d0c:	|                 |  |     /-- bne.s 16d22 <setFloor+0x402>
			KPrintF("setFloor: Cannot allocate memory");
   16d0e:	|                 |  |     |   pea 19fce <graphics.c.1c13408a+0x335>
   16d14:	|                 |  |     |   jsr 17176 <KPrintF>
   16d1a:	|                 |  |     |   addq.l #4,sp
			return FALSE;
   16d1c:	|                 |  |     |   clr.w d0
   16d1e:	+-----------------|--|-----|-- bra.w 17090 <setFloor+0x770>
		}
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   16d22:	|                 |  |     \-> clr.l 132(sp)
   16d26:	|                 |  |     /-- bra.s 16d76 <setFloor+0x456>
			currentFloor -> matrix[i][j] = -1;
   16d28:	|                 |  |  /--|-> movea.l 1c978 <currentFloor>,a0
   16d2e:	|                 |  |  |  |   move.l 16(a0),d1
   16d32:	|                 |  |  |  |   move.l 136(sp),d0
   16d36:	|                 |  |  |  |   add.l d0,d0
   16d38:	|                 |  |  |  |   add.l d0,d0
   16d3a:	|                 |  |  |  |   movea.l d1,a0
   16d3c:	|                 |  |  |  |   adda.l d0,a0
   16d3e:	|                 |  |  |  |   move.l (a0),d1
   16d40:	|                 |  |  |  |   move.l 132(sp),d0
   16d44:	|                 |  |  |  |   add.l d0,d0
   16d46:	|                 |  |  |  |   add.l d0,d0
   16d48:	|                 |  |  |  |   movea.l d1,a0
   16d4a:	|                 |  |  |  |   adda.l d0,a0
   16d4c:	|                 |  |  |  |   moveq #-1,d1
   16d4e:	|                 |  |  |  |   move.l d1,(a0)
			distanceMatrix        [i][j] = 10000;
   16d50:	|                 |  |  |  |   move.l 136(sp),d0
   16d54:	|                 |  |  |  |   add.l d0,d0
   16d56:	|                 |  |  |  |   add.l d0,d0
   16d58:	|                 |  |  |  |   movea.l 62(sp),a0
   16d5c:	|                 |  |  |  |   adda.l d0,a0
   16d5e:	|                 |  |  |  |   move.l (a0),d1
   16d60:	|                 |  |  |  |   move.l 132(sp),d0
   16d64:	|                 |  |  |  |   add.l d0,d0
   16d66:	|                 |  |  |  |   add.l d0,d0
   16d68:	|                 |  |  |  |   movea.l d1,a0
   16d6a:	|                 |  |  |  |   adda.l d0,a0
   16d6c:	|                 |  |  |  |   move.l #10000,(a0)
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   16d72:	|                 |  |  |  |   addq.l #1,132(sp)
   16d76:	|                 |  |  |  \-> movea.l 1c978 <currentFloor>,a0
   16d7c:	|                 |  |  |      move.l 8(a0),d0
   16d80:	|                 |  |  |      cmp.l 132(sp),d0
   16d84:	|                 |  |  \----- bgt.s 16d28 <setFloor+0x408>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16d86:	|                 |  |         addq.l #1,136(sp)
   16d8a:	|                 |  \-------> movea.l 1c978 <currentFloor>,a0
   16d90:	|                 |            move.l 8(a0),d0
   16d94:	|                 |            cmp.l 136(sp),d0
   16d98:	|                 \----------- bgt.w 16c6a <setFloor+0x34a>
		}
	}

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16d9c:	|                              clr.l 136(sp)
   16da0:	|              /-------------- bra.w 16ea6 <setFloor+0x586>
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   16da4:	|           /--|-------------> clr.l 132(sp)
   16da8:	|           |  |     /-------- bra.w 16e90 <setFloor+0x570>
			if (i != j) {
   16dac:	|           |  |  /--|-------> move.l 136(sp),d0
   16db0:	|           |  |  |  |         cmp.l 132(sp),d0
   16db4:	|           |  |  |  |     /-- beq.w 16e46 <setFloor+0x526>
				if (polysShareSide (currentFloor -> polygon[i], currentFloor -> polygon[j])) {
   16db8:	|           |  |  |  |     |   movea.l 1c978 <currentFloor>,a0
   16dbe:	|           |  |  |  |     |   move.l 12(a0),d1
   16dc2:	|           |  |  |  |     |   move.l 132(sp),d0
   16dc6:	|           |  |  |  |     |   lsl.l #3,d0
   16dc8:	|           |  |  |  |     |   movea.l d1,a1
   16dca:	|           |  |  |  |     |   adda.l d0,a1
   16dcc:	|           |  |  |  |     |   movea.l 1c978 <currentFloor>,a0
   16dd2:	|           |  |  |  |     |   move.l 12(a0),d1
   16dd6:	|           |  |  |  |     |   move.l 136(sp),d0
   16dda:	|           |  |  |  |     |   lsl.l #3,d0
   16ddc:	|           |  |  |  |     |   movea.l d1,a0
   16dde:	|           |  |  |  |     |   adda.l d0,a0
   16de0:	|           |  |  |  |     |   move.l 4(a1),-(sp)
   16de4:	|           |  |  |  |     |   move.l (a1),-(sp)
   16de6:	|           |  |  |  |     |   move.l 4(a0),-(sp)
   16dea:	|           |  |  |  |     |   move.l (a0),-(sp)
   16dec:	|           |  |  |  |     |   jsr 16678 <polysShareSide>
   16df2:	|           |  |  |  |     |   lea 16(sp),sp
   16df6:	|           |  |  |  |     |   tst.w d0
   16df8:	|           |  |  |  |  /--|-- beq.w 16e8c <setFloor+0x56c>
					currentFloor -> matrix[i][j] = j;
   16dfc:	|           |  |  |  |  |  |   movea.l 1c978 <currentFloor>,a0
   16e02:	|           |  |  |  |  |  |   move.l 16(a0),d1
   16e06:	|           |  |  |  |  |  |   move.l 136(sp),d0
   16e0a:	|           |  |  |  |  |  |   add.l d0,d0
   16e0c:	|           |  |  |  |  |  |   add.l d0,d0
   16e0e:	|           |  |  |  |  |  |   movea.l d1,a0
   16e10:	|           |  |  |  |  |  |   adda.l d0,a0
   16e12:	|           |  |  |  |  |  |   move.l (a0),d1
   16e14:	|           |  |  |  |  |  |   move.l 132(sp),d0
   16e18:	|           |  |  |  |  |  |   add.l d0,d0
   16e1a:	|           |  |  |  |  |  |   add.l d0,d0
   16e1c:	|           |  |  |  |  |  |   movea.l d1,a0
   16e1e:	|           |  |  |  |  |  |   adda.l d0,a0
   16e20:	|           |  |  |  |  |  |   move.l 132(sp),(a0)
					distanceMatrix        [i][j] = 1;
   16e24:	|           |  |  |  |  |  |   move.l 136(sp),d0
   16e28:	|           |  |  |  |  |  |   add.l d0,d0
   16e2a:	|           |  |  |  |  |  |   add.l d0,d0
   16e2c:	|           |  |  |  |  |  |   movea.l 62(sp),a0
   16e30:	|           |  |  |  |  |  |   adda.l d0,a0
   16e32:	|           |  |  |  |  |  |   move.l (a0),d1
   16e34:	|           |  |  |  |  |  |   move.l 132(sp),d0
   16e38:	|           |  |  |  |  |  |   add.l d0,d0
   16e3a:	|           |  |  |  |  |  |   add.l d0,d0
   16e3c:	|           |  |  |  |  |  |   movea.l d1,a0
   16e3e:	|           |  |  |  |  |  |   adda.l d0,a0
   16e40:	|           |  |  |  |  |  |   moveq #1,d1
   16e42:	|           |  |  |  |  |  |   move.l d1,(a0)
   16e44:	|           |  |  |  |  +--|-- bra.s 16e8c <setFloor+0x56c>
				}
			} else {
				currentFloor -> matrix[i][j] = -2;
   16e46:	|           |  |  |  |  |  \-> movea.l 1c978 <currentFloor>,a0
   16e4c:	|           |  |  |  |  |      move.l 16(a0),d1
   16e50:	|           |  |  |  |  |      move.l 136(sp),d0
   16e54:	|           |  |  |  |  |      add.l d0,d0
   16e56:	|           |  |  |  |  |      add.l d0,d0
   16e58:	|           |  |  |  |  |      movea.l d1,a0
   16e5a:	|           |  |  |  |  |      adda.l d0,a0
   16e5c:	|           |  |  |  |  |      move.l (a0),d1
   16e5e:	|           |  |  |  |  |      move.l 132(sp),d0
   16e62:	|           |  |  |  |  |      add.l d0,d0
   16e64:	|           |  |  |  |  |      add.l d0,d0
   16e66:	|           |  |  |  |  |      movea.l d1,a0
   16e68:	|           |  |  |  |  |      adda.l d0,a0
   16e6a:	|           |  |  |  |  |      moveq #-2,d0
   16e6c:	|           |  |  |  |  |      move.l d0,(a0)
				distanceMatrix        [i][j] = 0;
   16e6e:	|           |  |  |  |  |      move.l 136(sp),d0
   16e72:	|           |  |  |  |  |      add.l d0,d0
   16e74:	|           |  |  |  |  |      add.l d0,d0
   16e76:	|           |  |  |  |  |      movea.l 62(sp),a0
   16e7a:	|           |  |  |  |  |      adda.l d0,a0
   16e7c:	|           |  |  |  |  |      move.l (a0),d1
   16e7e:	|           |  |  |  |  |      move.l 132(sp),d0
   16e82:	|           |  |  |  |  |      add.l d0,d0
   16e84:	|           |  |  |  |  |      add.l d0,d0
   16e86:	|           |  |  |  |  |      movea.l d1,a0
   16e88:	|           |  |  |  |  |      adda.l d0,a0
   16e8a:	|           |  |  |  |  |      clr.l (a0)
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   16e8c:	|           |  |  |  |  \----> addq.l #1,132(sp)
   16e90:	|           |  |  |  \-------> movea.l 1c978 <currentFloor>,a0
   16e96:	|           |  |  |            move.l 8(a0),d0
   16e9a:	|           |  |  |            cmp.l 132(sp),d0
   16e9e:	|           |  |  \----------- bgt.w 16dac <setFloor+0x48c>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16ea2:	|           |  |               addq.l #1,136(sp)
   16ea6:	|           |  \-------------> movea.l 1c978 <currentFloor>,a0
   16eac:	|           |                  move.l 8(a0),d0
   16eb0:	|           |                  cmp.l 136(sp),d0
   16eb4:	|           \----------------- bgt.w 16da4 <setFloor+0x484>
			}
		}
	}

	BOOL madeChange;
	int lookForDistance = 0;
   16eb8:	|                              clr.l 126(sp)

	do {
		lookForDistance ++;
   16ebc:	|  /-------------------------> addq.l #1,126(sp)
//		debugMatrix ();
		madeChange = FALSE;
   16ec0:	|  |                           clr.w 130(sp)
		for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16ec4:	|  |                           clr.l 136(sp)
   16ec8:	|  |     /-------------------- bra.w 1701e <setFloor+0x6fe>
			for (j = 0; j < currentFloor -> numPolygons; j ++) {
   16ecc:	|  |  /--|-------------------> clr.l 132(sp)
   16ed0:	|  |  |  |     /-------------- bra.w 17008 <setFloor+0x6e8>
				if (currentFloor -> matrix[i][j] == -1) {
   16ed4:	|  |  |  |  /--|-------------> movea.l 1c978 <currentFloor>,a0
   16eda:	|  |  |  |  |  |               move.l 16(a0),d1
   16ede:	|  |  |  |  |  |               move.l 136(sp),d0
   16ee2:	|  |  |  |  |  |               add.l d0,d0
   16ee4:	|  |  |  |  |  |               add.l d0,d0
   16ee6:	|  |  |  |  |  |               movea.l d1,a0
   16ee8:	|  |  |  |  |  |               adda.l d0,a0
   16eea:	|  |  |  |  |  |               move.l (a0),d1
   16eec:	|  |  |  |  |  |               move.l 132(sp),d0
   16ef0:	|  |  |  |  |  |               add.l d0,d0
   16ef2:	|  |  |  |  |  |               add.l d0,d0
   16ef4:	|  |  |  |  |  |               movea.l d1,a0
   16ef6:	|  |  |  |  |  |               adda.l d0,a0
   16ef8:	|  |  |  |  |  |               move.l (a0),d0
   16efa:	|  |  |  |  |  |               moveq #-1,d1
   16efc:	|  |  |  |  |  |               cmp.l d0,d1
   16efe:	|  |  |  |  |  |  /----------- bne.w 17004 <setFloor+0x6e4>

					// OK, so we don't know how to get from i to j...
					for (int d = 0; d < currentFloor -> numPolygons; d ++) {
   16f02:	|  |  |  |  |  |  |            clr.l 122(sp)
   16f06:	|  |  |  |  |  |  |     /----- bra.w 16ff2 <setFloor+0x6d2>
						if (d != i && d != j) {
   16f0a:	|  |  |  |  |  |  |  /--|----> move.l 122(sp),d0
   16f0e:	|  |  |  |  |  |  |  |  |      cmp.l 136(sp),d0
   16f12:	|  |  |  |  |  |  |  |  |  /-- beq.w 16fee <setFloor+0x6ce>
   16f16:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d1
   16f1a:	|  |  |  |  |  |  |  |  |  |   cmp.l 132(sp),d1
   16f1e:	|  |  |  |  |  |  |  |  |  +-- beq.w 16fee <setFloor+0x6ce>
							if (currentFloor -> matrix[i][d] == d &&
   16f22:	|  |  |  |  |  |  |  |  |  |   movea.l 1c978 <currentFloor>,a0
   16f28:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   16f2c:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   16f30:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16f32:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16f34:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   16f36:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16f38:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   16f3a:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   16f3e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16f40:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16f42:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   16f44:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16f46:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
   16f48:	|  |  |  |  |  |  |  |  |  |   cmp.l 122(sp),d0
   16f4c:	|  |  |  |  |  |  |  |  |  +-- bne.w 16fee <setFloor+0x6ce>
								currentFloor -> matrix[d][j] >= 0 &&
   16f50:	|  |  |  |  |  |  |  |  |  |   movea.l 1c978 <currentFloor>,a0
   16f56:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   16f5a:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   16f5e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16f60:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16f62:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   16f64:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16f66:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   16f68:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   16f6c:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16f6e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16f70:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   16f72:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16f74:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
							if (currentFloor -> matrix[i][d] == d &&
   16f76:	|  |  |  |  |  |  |  |  |  +-- bmi.s 16fee <setFloor+0x6ce>
								distanceMatrix        [d][j] <= lookForDistance) {
   16f78:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   16f7c:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16f7e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16f80:	|  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a0
   16f84:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16f86:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   16f88:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   16f8c:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16f8e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16f90:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   16f92:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16f94:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
								currentFloor -> matrix[d][j] >= 0 &&
   16f96:	|  |  |  |  |  |  |  |  |  |   cmp.l 126(sp),d0
   16f9a:	|  |  |  |  |  |  |  |  |  +-- bgt.s 16fee <setFloor+0x6ce>

								 currentFloor -> matrix[i][j] = d;
   16f9c:	|  |  |  |  |  |  |  |  |  |   movea.l 1c978 <currentFloor>,a0
   16fa2:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   16fa6:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   16faa:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16fac:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16fae:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   16fb0:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16fb2:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   16fb4:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   16fb8:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16fba:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16fbc:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   16fbe:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16fc0:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),(a0)
								 distanceMatrix		  [i][j] = lookForDistance + 1;
   16fc4:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   16fc8:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16fca:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16fcc:	|  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a0
   16fd0:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16fd2:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   16fd4:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   16fd8:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16fda:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16fdc:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   16fde:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16fe0:	|  |  |  |  |  |  |  |  |  |   move.l 126(sp),d0
   16fe4:	|  |  |  |  |  |  |  |  |  |   addq.l #1,d0
   16fe6:	|  |  |  |  |  |  |  |  |  |   move.l d0,(a0)
								 madeChange = TRUE;
   16fe8:	|  |  |  |  |  |  |  |  |  |   move.w #1,130(sp)
					for (int d = 0; d < currentFloor -> numPolygons; d ++) {
   16fee:	|  |  |  |  |  |  |  |  |  \-> addq.l #1,122(sp)
   16ff2:	|  |  |  |  |  |  |  |  \----> movea.l 1c978 <currentFloor>,a0
   16ff8:	|  |  |  |  |  |  |  |         move.l 8(a0),d0
   16ffc:	|  |  |  |  |  |  |  |         cmp.l 122(sp),d0
   17000:	|  |  |  |  |  |  |  \-------- bgt.w 16f0a <setFloor+0x5ea>
			for (j = 0; j < currentFloor -> numPolygons; j ++) {
   17004:	|  |  |  |  |  |  \----------> addq.l #1,132(sp)
   17008:	|  |  |  |  |  \-------------> movea.l 1c978 <currentFloor>,a0
   1700e:	|  |  |  |  |                  move.l 8(a0),d0
   17012:	|  |  |  |  |                  cmp.l 132(sp),d0
   17016:	|  |  |  |  \----------------- bgt.w 16ed4 <setFloor+0x5b4>
		for (i = 0; i < currentFloor -> numPolygons; i ++) {
   1701a:	|  |  |  |                     addq.l #1,136(sp)
   1701e:	|  |  |  \-------------------> movea.l 1c978 <currentFloor>,a0
   17024:	|  |  |                        move.l 8(a0),d0
   17028:	|  |  |                        cmp.l 136(sp),d0
   1702c:	|  |  \----------------------- bgt.w 16ecc <setFloor+0x5ac>
						}
					}
				}
			}
		}
	} while (madeChange);
   17030:	|  |                           tst.w 130(sp)
   17034:	|  \-------------------------- bne.w 16ebc <setFloor+0x59c>

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   17038:	|                              clr.l 136(sp)
   1703c:	|                          /-- bra.s 17064 <setFloor+0x744>
		FreeVec(distanceMatrix [i]);
   1703e:	|                       /--|-> move.l 136(sp),d0
   17042:	|                       |  |   add.l d0,d0
   17044:	|                       |  |   add.l d0,d0
   17046:	|                       |  |   movea.l 62(sp),a0
   1704a:	|                       |  |   adda.l d0,a0
   1704c:	|                       |  |   move.l (a0),54(sp)
   17050:	|                       |  |   move.l 1c85c <SysBase>,d0
   17056:	|                       |  |   movea.l d0,a6
   17058:	|                       |  |   movea.l 54(sp),a1
   1705c:	|                       |  |   jsr -690(a6)
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   17060:	|                       |  |   addq.l #1,136(sp)
   17064:	|                       |  \-> movea.l 1c978 <currentFloor>,a0
   1706a:	|                       |      move.l 8(a0),d0
   1706e:	|                       |      cmp.l 136(sp),d0
   17072:	|                       \----- bgt.s 1703e <setFloor+0x71e>
	}

	FreeVec(distanceMatrix);
   17074:	|                              move.l 62(sp),58(sp)
   1707a:	|                              move.l 1c85c <SysBase>,d0
   17080:	|                              movea.l d0,a6
   17082:	|                              movea.l 58(sp),a1
   17086:	|                              jsr -690(a6)
	distanceMatrix = NULL;	
   1708a:	|                              clr.l 62(sp)

	return TRUE;
   1708e:	|                              moveq #1,d0
}
   17090:	\----------------------------> movea.l (sp)+,a2
   17092:	                               movea.l (sp)+,a6
   17094:	                               lea 132(sp),sp
   17098:	                               rts

0001709a <setFloorNull>:

void setFloorNull () {
	killFloor ();
   1709a:	jsr 16588 <killFloor>
	noFloor ();
   170a0:	jsr 164ac <noFloor>
   170a6:	nop
   170a8:	rts

000170aa <WaitVbl>:
void WaitVbl() {
   170aa:	       subq.l #8,sp
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
   170ac:	   /-> movea.l #14675972,a0
   170b2:	   |   move.l (a0),d0
   170b4:	   |   move.l d0,(sp)
		vpos&=0x1ff00;
   170b6:	   |   move.l (sp),d0
   170b8:	   |   andi.l #130816,d0
   170be:	   |   move.l d0,(sp)
		if (vpos!=(300<<8))
   170c0:	   |   move.l (sp),d0
   170c2:	   |   cmpi.l #76800,d0
   170c8:	   \-- beq.s 170ac <WaitVbl+0x2>
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
   170ca:	/----> movea.l #14675972,a0
   170d0:	|      move.l (a0),d0
   170d2:	|      move.l d0,4(sp)
		vpos&=0x1ff00;
   170d6:	|      move.l 4(sp),d0
   170da:	|      andi.l #130816,d0
   170e0:	|      move.l d0,4(sp)
		if (vpos==(300<<8))
   170e4:	|      move.l 4(sp),d0
   170e8:	|      cmpi.l #76800,d0
   170ee:	|  /-- beq.s 170f2 <WaitVbl+0x48>
	while (1) {
   170f0:	\--|-- bra.s 170ca <WaitVbl+0x20>
			break;
   170f2:	   \-> nop
}
   170f4:	       nop
   170f6:	       addq.l #8,sp
   170f8:	       rts

000170fa <memset>:
void* memset(void *dest, int val, unsigned long len) {
   170fa:	       subq.l #4,sp
	unsigned char *ptr = (unsigned char *)dest;
   170fc:	       move.l 8(sp),(sp)
	while(len-- > 0)
   17100:	   /-- bra.s 17112 <memset+0x18>
		*ptr++ = val;
   17102:	/--|-> move.l (sp),d0
   17104:	|  |   move.l d0,d1
   17106:	|  |   addq.l #1,d1
   17108:	|  |   move.l d1,(sp)
   1710a:	|  |   move.l 12(sp),d1
   1710e:	|  |   movea.l d0,a0
   17110:	|  |   move.b d1,(a0)
	while(len-- > 0)
   17112:	|  \-> move.l 16(sp),d0
   17116:	|      move.l d0,d1
   17118:	|      subq.l #1,d1
   1711a:	|      move.l d1,16(sp)
   1711e:	|      tst.l d0
   17120:	\----- bne.s 17102 <memset+0x8>
	return dest;
   17122:	       move.l 8(sp),d0
}
   17126:	       addq.l #4,sp
   17128:	       rts

0001712a <memcpy>:
void* memcpy(void *dest, const void *src, unsigned long len) {
   1712a:	       subq.l #8,sp
   1712c:	       move.l d2,-(sp)
	char *d = (char *)dest;
   1712e:	       move.l 16(sp),8(sp)
	const char *s = (const char *)src;
   17134:	       move.l 20(sp),4(sp)
	while(len--)
   1713a:	   /-- bra.s 1715c <memcpy+0x32>
		*d++ = *s++;
   1713c:	/--|-> move.l 4(sp),d1
   17140:	|  |   move.l d1,d0
   17142:	|  |   addq.l #1,d0
   17144:	|  |   move.l d0,4(sp)
   17148:	|  |   move.l 8(sp),d0
   1714c:	|  |   move.l d0,d2
   1714e:	|  |   addq.l #1,d2
   17150:	|  |   move.l d2,8(sp)
   17154:	|  |   movea.l d1,a0
   17156:	|  |   move.b (a0),d1
   17158:	|  |   movea.l d0,a0
   1715a:	|  |   move.b d1,(a0)
	while(len--)
   1715c:	|  \-> move.l 24(sp),d0
   17160:	|      move.l d0,d1
   17162:	|      subq.l #1,d1
   17164:	|      move.l d1,24(sp)
   17168:	|      tst.l d0
   1716a:	\----- bne.s 1713c <memcpy+0x12>
	return dest;
   1716c:	       move.l 16(sp),d0
}
   17170:	       move.l (sp)+,d2
   17172:	       addq.l #8,sp
   17174:	       rts

00017176 <KPrintF>:
void KPrintF(const char* fmt, ...) {
   17176:	       lea -128(sp),sp
   1717a:	       movem.l a2-a3/a6,-(sp)
	if(*((UWORD *)UaeDbgLog) == 0x4eb9 || *((UWORD *)UaeDbgLog) == 0xa00e) {
   1717e:	       move.w f0ff60 <gcc8_c_support.c.cce2f5c3+0xec4c7f>,d0
   17184:	       cmpi.w #20153,d0
   17188:	   /-- beq.s 171ac <KPrintF+0x36>
   1718a:	   |   cmpi.w #-24562,d0
   1718e:	   +-- beq.s 171ac <KPrintF+0x36>
		RawDoFmt((CONST_STRPTR)fmt, vl, KPutCharX, 0);
   17190:	   |   movea.l 1c85c <SysBase>,a6
   17196:	   |   movea.l 144(sp),a0
   1719a:	   |   lea 148(sp),a1
   1719e:	   |   lea 17c3c <KPutCharX>,a2
   171a4:	   |   suba.l a3,a3
   171a6:	   |   jsr -522(a6)
}
   171aa:	/--|-- bra.s 171d6 <KPrintF+0x60>
		RawDoFmt((CONST_STRPTR)fmt, vl, PutChar, temp);
   171ac:	|  \-> movea.l 1c85c <SysBase>,a6
   171b2:	|      movea.l 144(sp),a0
   171b6:	|      lea 148(sp),a1
   171ba:	|      lea 17c4a <PutChar>,a2
   171c0:	|      lea 12(sp),a3
   171c4:	|      jsr -522(a6)
		UaeDbgLog(86, temp);
   171c8:	|      move.l a3,-(sp)
   171ca:	|      pea 56 <_start+0x56>
   171ce:	|      jsr f0ff60 <gcc8_c_support.c.cce2f5c3+0xec4c7f>
	if(*((UWORD *)UaeDbgLog) == 0x4eb9 || *((UWORD *)UaeDbgLog) == 0xa00e) {
   171d4:	|      addq.l #8,sp
}
   171d6:	\----> movem.l (sp)+,a2-a3/a6
   171da:	       lea 128(sp),sp
   171de:	       rts

000171e0 <debug_cmd>:
		UaeConf(82, -1, on ? "blitter_cycle_exact false" : "blitter_cycle_exact true", 0, &outbuf, 1);
		UaeConf(82, -1, on ? "warp true" : "warp false", 0, &outbuf, 1);
	}
}

static void debug_cmd(unsigned int arg1, unsigned int arg2, unsigned int arg3, unsigned int arg4) {
   171e0:	       subq.l #4,sp
	long(*UaeLib)(unsigned int arg0, unsigned int arg1, unsigned int arg2, unsigned int arg3, unsigned int arg4);
	UaeLib = (long(*)(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int))0xf0ff60;
   171e2:	       move.l #15794016,(sp)
	if(*((UWORD *)UaeLib) == 0x4eb9 || *((UWORD *)UaeLib) == 0xa00e) {
   171e8:	       movea.l (sp),a0
   171ea:	       move.w (a0),d0
   171ec:	       cmpi.w #20153,d0
   171f0:	   /-- beq.s 171fc <debug_cmd+0x1c>
   171f2:	   |   movea.l (sp),a0
   171f4:	   |   move.w (a0),d0
   171f6:	   |   cmpi.w #-24562,d0
   171fa:	/--|-- bne.s 1721a <debug_cmd+0x3a>
		UaeLib(88, arg1, arg2, arg3, arg4);
   171fc:	|  \-> move.l 20(sp),-(sp)
   17200:	|      move.l 20(sp),-(sp)
   17204:	|      move.l 20(sp),-(sp)
   17208:	|      move.l 20(sp),-(sp)
   1720c:	|      pea 58 <_start+0x58>
   17210:	|      movea.l 20(sp),a0
   17214:	|      jsr (a0)
   17216:	|      lea 20(sp),sp
	}
}
   1721a:	\----> nop
   1721c:	       addq.l #4,sp
   1721e:	       rts

00017220 <my_strncpy>:
void debug_stop_idle() {
	debug_cmd(barto_cmd_set_idle, 0, 0, 0);
}

// gfx debugger
static void my_strncpy(char* destination, const char* source, unsigned long num) {
   17220:	       move.l d2,-(sp)
	while(*source && --num > 0)
   17222:	   /-- bra.s 17244 <my_strncpy+0x24>
		*destination++ = *source++;
   17224:	/--|-> move.l 12(sp),d1
   17228:	|  |   move.l d1,d0
   1722a:	|  |   addq.l #1,d0
   1722c:	|  |   move.l d0,12(sp)
   17230:	|  |   move.l 8(sp),d0
   17234:	|  |   move.l d0,d2
   17236:	|  |   addq.l #1,d2
   17238:	|  |   move.l d2,8(sp)
   1723c:	|  |   movea.l d1,a0
   1723e:	|  |   move.b (a0),d1
   17240:	|  |   movea.l d0,a0
   17242:	|  |   move.b d1,(a0)
	while(*source && --num > 0)
   17244:	|  \-> movea.l 12(sp),a0
   17248:	|      move.b (a0),d0
   1724a:	|  /-- beq.s 17252 <my_strncpy+0x32>
   1724c:	|  |   subq.l #1,16(sp)
   17250:	\--|-- bne.s 17224 <my_strncpy+0x4>
	*destination = '\0';
   17252:	   \-> movea.l 8(sp),a0
   17256:	       clr.b (a0)
}
   17258:	       nop
   1725a:	       move.l (sp)+,d2
   1725c:	       rts

0001725e <debug_register_bitmap>:

void debug_register_bitmap(const void* addr, const char* name, short width, short height, short numPlanes, unsigned short flags) {
   1725e:	    lea -60(sp),sp
   17262:	    movea.l 72(sp),a1
   17266:	    movea.l 76(sp),a0
   1726a:	    move.l 80(sp),d1
   1726e:	    move.l 84(sp),d0
   17272:	    movea.w a1,a1
   17274:	    move.w a1,8(sp)
   17278:	    movea.w a0,a0
   1727a:	    move.w a0,6(sp)
   1727e:	    move.w d1,d1
   17280:	    move.w d1,4(sp)
   17284:	    move.w d0,d0
   17286:	    move.w d0,2(sp)
	struct debug_resource resource = {
   1728a:	    lea 10(sp),a0
   1728e:	    clr.l (a0)
   17290:	    addq.l #4,a0
   17292:	    clr.l (a0)
   17294:	    addq.l #4,a0
   17296:	    clr.l (a0)
   17298:	    addq.l #4,a0
   1729a:	    clr.l (a0)
   1729c:	    addq.l #4,a0
   1729e:	    clr.l (a0)
   172a0:	    addq.l #4,a0
   172a2:	    clr.l (a0)
   172a4:	    addq.l #4,a0
   172a6:	    clr.l (a0)
   172a8:	    addq.l #4,a0
   172aa:	    clr.l (a0)
   172ac:	    addq.l #4,a0
   172ae:	    clr.l (a0)
   172b0:	    addq.l #4,a0
   172b2:	    clr.l (a0)
   172b4:	    addq.l #4,a0
   172b6:	    clr.l (a0)
   172b8:	    addq.l #4,a0
   172ba:	    clr.l (a0)
   172bc:	    addq.l #4,a0
   172be:	    clr.w (a0)
   172c0:	    addq.l #2,a0
		.address = (unsigned int)addr,
   172c2:	    move.l 64(sp),d0
	struct debug_resource resource = {
   172c6:	    move.l d0,10(sp)
		.size = width / 8 * height * numPlanes,
   172ca:	    move.w 8(sp),d0
   172ce:	/-- bpl.s 172d2 <debug_register_bitmap+0x74>
   172d0:	|   addq.w #7,d0
   172d2:	\-> asr.w #3,d0
   172d4:	    movea.w d0,a0
   172d6:	    movea.w 6(sp),a1
   172da:	    move.l a1,-(sp)
   172dc:	    move.l a0,-(sp)
   172de:	    jsr 17b34 <__mulsi3>
   172e4:	    addq.l #8,sp
   172e6:	    movea.w 4(sp),a0
   172ea:	    move.l a0,-(sp)
   172ec:	    move.l d0,-(sp)
   172ee:	    jsr 17b34 <__mulsi3>
   172f4:	    addq.l #8,sp
	struct debug_resource resource = {
   172f6:	    move.l d0,14(sp)
   172fa:	    move.w 2(sp),52(sp)
   17300:	    move.w 8(sp),54(sp)
   17306:	    move.w 6(sp),56(sp)
   1730c:	    move.w 4(sp),58(sp)
		.type = debug_resource_type_bitmap,
		.flags = flags,
		.bitmap = { width, height, numPlanes }
	};

	if (flags & debug_resource_bitmap_masked)
   17312:	    moveq #0,d0
   17314:	    move.w 2(sp),d0
   17318:	    moveq #2,d1
   1731a:	    and.l d1,d0
   1731c:	/-- beq.s 17328 <debug_register_bitmap+0xca>
		resource.size *= 2;
   1731e:	|   move.l 14(sp),d0
   17322:	|   add.l d0,d0
   17324:	|   move.l d0,14(sp)

	my_strncpy(resource.name, name, sizeof(resource.name));
   17328:	\-> pea 20 <_start+0x20>
   1732c:	    move.l 72(sp),-(sp)
   17330:	    lea 18(sp),a0
   17334:	    move.l a0,d0
   17336:	    addq.l #8,d0
   17338:	    move.l d0,-(sp)
   1733a:	    jsr 17220 <my_strncpy>
   17340:	    lea 12(sp),sp
	debug_cmd(barto_cmd_register_resource, (unsigned int)&resource, 0, 0);
   17344:	    lea 10(sp),a0
   17348:	    clr.l -(sp)
   1734a:	    clr.l -(sp)
   1734c:	    move.l a0,-(sp)
   1734e:	    pea 4 <_start+0x4>
   17352:	    jsr 171e0 <debug_cmd>
   17358:	    lea 16(sp),sp
}
   1735c:	    nop
   1735e:	    lea 60(sp),sp
   17362:	    rts

00017364 <__addsf3>:
	};
	my_strncpy(resource.name, name, sizeof(resource.name));
	debug_cmd(barto_cmd_save, (unsigned int)&resource, 0, 0);
}

FLOAT __addsf3( FLOAT a, FLOAT b) {
   17364:	lea -12(sp),sp
   17368:	move.l a6,-(sp)
	return IEEESPAdd( a, b);
   1736a:	move.l 20(sp),12(sp)
   17370:	move.l 24(sp),8(sp)
   17376:	move.l 1c86c <MathIeeeSingBasBase>,d0
   1737c:	movea.l d0,a6
   1737e:	move.l 12(sp),d0
   17382:	move.l 8(sp),d1
   17386:	jsr -66(a6)
   1738a:	move.l d0,4(sp)
   1738e:	move.l 4(sp),d0
}
   17392:	movea.l (sp)+,a6
   17394:	lea 12(sp),sp
   17398:	rts

0001739a <__adddf3>:

DOUBLE __adddf3( DOUBLE a, DOUBLE b) {
   1739a:	lea -32(sp),sp
   1739e:	movem.l d2-d3/a6,-(sp)
	return IEEEDPAdd( a, b);
   173a2:	move.l 48(sp),36(sp)
   173a8:	move.l 52(sp),40(sp)
   173ae:	move.l 56(sp),28(sp)
   173b4:	move.l 60(sp),32(sp)
   173ba:	move.l 1c874 <MathIeeeDoubBasBase>,d0
   173c0:	movea.l d0,a6
   173c2:	move.l 36(sp),d0
   173c6:	move.l 40(sp),d1
   173ca:	move.l 28(sp),d2
   173ce:	move.l 32(sp),d3
   173d2:	jsr -66(a6)
   173d6:	move.l d0,12(sp)
   173da:	move.l d1,16(sp)
   173de:	move.l 12(sp),20(sp)
   173e4:	move.l 16(sp),24(sp)
   173ea:	move.l 20(sp),d0
   173ee:	move.l 24(sp),d1
}
   173f2:	movem.l (sp)+,d2-d3/a6
   173f6:	lea 32(sp),sp
   173fa:	rts

000173fc <__divdf3>:

DOUBLE __divdf3( DOUBLE a, DOUBLE b) {
   173fc:	lea -32(sp),sp
   17400:	movem.l d2-d3/a6,-(sp)
	return IEEEDPDiv( a, b);
   17404:	move.l 48(sp),36(sp)
   1740a:	move.l 52(sp),40(sp)
   17410:	move.l 56(sp),28(sp)
   17416:	move.l 60(sp),32(sp)
   1741c:	move.l 1c874 <MathIeeeDoubBasBase>,d0
   17422:	movea.l d0,a6
   17424:	move.l 36(sp),d0
   17428:	move.l 40(sp),d1
   1742c:	move.l 28(sp),d2
   17430:	move.l 32(sp),d3
   17434:	jsr -84(a6)
   17438:	move.l d0,12(sp)
   1743c:	move.l d1,16(sp)
   17440:	move.l 12(sp),20(sp)
   17446:	move.l 16(sp),24(sp)
   1744c:	move.l 20(sp),d0
   17450:	move.l 24(sp),d1
}
   17454:	movem.l (sp)+,d2-d3/a6
   17458:	lea 32(sp),sp
   1745c:	rts

0001745e <__divsf3>:

FLOAT __divsf3( FLOAT a, FLOAT b) {
   1745e:	lea -12(sp),sp
   17462:	move.l a6,-(sp)
	return IEEESPDiv( a, b);
   17464:	move.l 20(sp),12(sp)
   1746a:	move.l 24(sp),8(sp)
   17470:	move.l 1c86c <MathIeeeSingBasBase>,d0
   17476:	movea.l d0,a6
   17478:	move.l 12(sp),d0
   1747c:	move.l 8(sp),d1
   17480:	jsr -84(a6)
   17484:	move.l d0,4(sp)
   17488:	move.l 4(sp),d0
}
   1748c:	movea.l (sp)+,a6
   1748e:	lea 12(sp),sp
   17492:	rts

00017494 <__eqsf2>:

int __eqsf2( FLOAT a, FLOAT b) {
   17494:	lea -12(sp),sp
   17498:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   1749a:	move.l 20(sp),12(sp)
   174a0:	move.l 24(sp),8(sp)
   174a6:	move.l 1c86c <MathIeeeSingBasBase>,d0
   174ac:	movea.l d0,a6
   174ae:	move.l 12(sp),d0
   174b2:	move.l 8(sp),d1
   174b6:	jsr -42(a6)
   174ba:	move.l d0,4(sp)
   174be:	move.l 4(sp),d0
}
   174c2:	movea.l (sp)+,a6
   174c4:	lea 12(sp),sp
   174c8:	rts

000174ca <__extendsfdf2>:

DOUBLE __extendsfdf2 (FLOAT a) {
   174ca:	lea -20(sp),sp
   174ce:	move.l a6,-(sp)
	return IEEEDPFieee( a );
   174d0:	move.l 28(sp),20(sp)
   174d6:	move.l 1c878 <MathIeeeDoubTransBase>,d0
   174dc:	movea.l d0,a6
   174de:	move.l 20(sp),d0
   174e2:	jsr -108(a6)
   174e6:	move.l d0,4(sp)
   174ea:	move.l d1,8(sp)
   174ee:	move.l 4(sp),12(sp)
   174f4:	move.l 8(sp),16(sp)
   174fa:	move.l 12(sp),d0
   174fe:	move.l 16(sp),d1
}
   17502:	movea.l (sp)+,a6
   17504:	lea 20(sp),sp
   17508:	rts

0001750a <__fixdfsi>:

DOUBLE __fixdfsi(DOUBLE value) {
   1750a:	lea -12(sp),sp
   1750e:	move.l a6,-(sp)
	return IEEEDPFix(value);
   17510:	move.l 20(sp),8(sp)
   17516:	move.l 24(sp),12(sp)
   1751c:	move.l 1c874 <MathIeeeDoubBasBase>,d0
   17522:	movea.l d0,a6
   17524:	move.l 8(sp),d0
   17528:	move.l 12(sp),d1
   1752c:	jsr -30(a6)
   17530:	move.l d0,4(sp)
   17534:	move.l 4(sp),d0
   17538:	move.l d0,-(sp)
   1753a:	jsr 17572 <__floatsidf>
   17540:	addq.l #4,sp
}
   17542:	movea.l (sp)+,a6
   17544:	lea 12(sp),sp
   17548:	rts

0001754a <__fixsfsi>:

LONG __fixsfsi(FLOAT value) {
   1754a:	subq.l #8,sp
   1754c:	move.l a6,-(sp)
	return IEEESPFix(value);
   1754e:	move.l 16(sp),8(sp)
   17554:	move.l 1c86c <MathIeeeSingBasBase>,d0
   1755a:	movea.l d0,a6
   1755c:	move.l 8(sp),d0
   17560:	jsr -30(a6)
   17564:	move.l d0,4(sp)
   17568:	move.l 4(sp),d0
}
   1756c:	movea.l (sp)+,a6
   1756e:	addq.l #8,sp
   17570:	rts

00017572 <__floatsidf>:


DOUBLE __floatsidf (int i) {
   17572:	lea -20(sp),sp
   17576:	move.l a6,-(sp)
	return IEEEDPFlt((LONG) i);  
   17578:	move.l 28(sp),20(sp)
   1757e:	move.l 1c874 <MathIeeeDoubBasBase>,d0
   17584:	movea.l d0,a6
   17586:	move.l 20(sp),d0
   1758a:	jsr -36(a6)
   1758e:	move.l d0,4(sp)
   17592:	move.l d1,8(sp)
   17596:	move.l 4(sp),12(sp)
   1759c:	move.l 8(sp),16(sp)
   175a2:	move.l 12(sp),d0
   175a6:	move.l 16(sp),d1
}
   175aa:	movea.l (sp)+,a6
   175ac:	lea 20(sp),sp
   175b0:	rts

000175b2 <__floatsisf>:

FLOAT __floatsisf(int i) {
   175b2:	subq.l #8,sp
   175b4:	move.l a6,-(sp)
	return IEEESPFlt((LONG) i); 
   175b6:	move.l 16(sp),8(sp)
   175bc:	move.l 1c86c <MathIeeeSingBasBase>,d0
   175c2:	movea.l d0,a6
   175c4:	move.l 8(sp),d0
   175c8:	jsr -36(a6)
   175cc:	move.l d0,4(sp)
   175d0:	move.l 4(sp),d0
}
   175d4:	movea.l (sp)+,a6
   175d6:	addq.l #8,sp
   175d8:	rts

000175da <__floatunsisf>:

FLOAT __floatunsisf(unsigned int i) {	
   175da:	subq.l #8,sp
   175dc:	move.l a6,-(sp)
	return IEEESPFlt((LONG) i); 
   175de:	move.l 16(sp),8(sp)
   175e4:	move.l 1c86c <MathIeeeSingBasBase>,d0
   175ea:	movea.l d0,a6
   175ec:	move.l 8(sp),d0
   175f0:	jsr -36(a6)
   175f4:	move.l d0,4(sp)
   175f8:	move.l 4(sp),d0
}
   175fc:	movea.l (sp)+,a6
   175fe:	addq.l #8,sp
   17600:	rts

00017602 <__muldf3>:

DOUBLE __muldf3( DOUBLE leftParm, DOUBLE rightParm ) {
   17602:	lea -32(sp),sp
   17606:	movem.l d2-d3/a6,-(sp)
	return IEEEDPMul( leftParm, rightParm);
   1760a:	move.l 48(sp),36(sp)
   17610:	move.l 52(sp),40(sp)
   17616:	move.l 56(sp),28(sp)
   1761c:	move.l 60(sp),32(sp)
   17622:	move.l 1c874 <MathIeeeDoubBasBase>,d0
   17628:	movea.l d0,a6
   1762a:	move.l 36(sp),d0
   1762e:	move.l 40(sp),d1
   17632:	move.l 28(sp),d2
   17636:	move.l 32(sp),d3
   1763a:	jsr -78(a6)
   1763e:	move.l d0,12(sp)
   17642:	move.l d1,16(sp)
   17646:	move.l 12(sp),20(sp)
   1764c:	move.l 16(sp),24(sp)
   17652:	move.l 20(sp),d0
   17656:	move.l 24(sp),d1
}
   1765a:	movem.l (sp)+,d2-d3/a6
   1765e:	lea 32(sp),sp
   17662:	rts

00017664 <__mulsf3>:

 //FLOAT IEEESPMul( FLOAT leftParm, FLOAT rightParm );
FLOAT __mulsf3( FLOAT leftParm, FLOAT rightParm ) {
   17664:	lea -12(sp),sp
   17668:	move.l a6,-(sp)
	return IEEESPMul( leftParm, rightParm);
   1766a:	move.l 20(sp),12(sp)
   17670:	move.l 24(sp),8(sp)
   17676:	move.l 1c86c <MathIeeeSingBasBase>,d0
   1767c:	movea.l d0,a6
   1767e:	move.l 12(sp),d0
   17682:	move.l 8(sp),d1
   17686:	jsr -78(a6)
   1768a:	move.l d0,4(sp)
   1768e:	move.l 4(sp),d0
}
   17692:	movea.l (sp)+,a6
   17694:	lea 12(sp),sp
   17698:	rts

0001769a <__gesf2>:


int __gesf2( FLOAT a, FLOAT b) {
   1769a:	lea -12(sp),sp
   1769e:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   176a0:	move.l 20(sp),12(sp)
   176a6:	move.l 24(sp),8(sp)
   176ac:	move.l 1c86c <MathIeeeSingBasBase>,d0
   176b2:	movea.l d0,a6
   176b4:	move.l 12(sp),d0
   176b8:	move.l 8(sp),d1
   176bc:	jsr -42(a6)
   176c0:	move.l d0,4(sp)
   176c4:	move.l 4(sp),d0
}
   176c8:	movea.l (sp)+,a6
   176ca:	lea 12(sp),sp
   176ce:	rts

000176d0 <__gtdf2>:

int __gtdf2( DOUBLE a, DOUBLE b) {
   176d0:	lea -20(sp),sp
   176d4:	movem.l d2-d3/a6,-(sp)
	return IEEEDPCmp( a, b);
   176d8:	move.l 36(sp),24(sp)
   176de:	move.l 40(sp),28(sp)
   176e4:	move.l 44(sp),16(sp)
   176ea:	move.l 48(sp),20(sp)
   176f0:	move.l 1c874 <MathIeeeDoubBasBase>,d0
   176f6:	movea.l d0,a6
   176f8:	move.l 24(sp),d0
   176fc:	move.l 28(sp),d1
   17700:	move.l 16(sp),d2
   17704:	move.l 20(sp),d3
   17708:	jsr -42(a6)
   1770c:	move.l d0,12(sp)
   17710:	move.l 12(sp),d0
}
   17714:	movem.l (sp)+,d2-d3/a6
   17718:	lea 20(sp),sp
   1771c:	rts

0001771e <__gtsf2>:

int __gtsf2( FLOAT a, FLOAT b) {
   1771e:	lea -12(sp),sp
   17722:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   17724:	move.l 20(sp),12(sp)
   1772a:	move.l 24(sp),8(sp)
   17730:	move.l 1c86c <MathIeeeSingBasBase>,d0
   17736:	movea.l d0,a6
   17738:	move.l 12(sp),d0
   1773c:	move.l 8(sp),d1
   17740:	jsr -42(a6)
   17744:	move.l d0,4(sp)
   17748:	move.l 4(sp),d0
}
   1774c:	movea.l (sp)+,a6
   1774e:	lea 12(sp),sp
   17752:	rts

00017754 <__lesf2>:

int __lesf2( FLOAT a, FLOAT b) {
   17754:	lea -12(sp),sp
   17758:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   1775a:	move.l 20(sp),12(sp)
   17760:	move.l 24(sp),8(sp)
   17766:	move.l 1c86c <MathIeeeSingBasBase>,d0
   1776c:	movea.l d0,a6
   1776e:	move.l 12(sp),d0
   17772:	move.l 8(sp),d1
   17776:	jsr -42(a6)
   1777a:	move.l d0,4(sp)
   1777e:	move.l 4(sp),d0
}
   17782:	movea.l (sp)+,a6
   17784:	lea 12(sp),sp
   17788:	rts

0001778a <__ltdf2>:

int __ltdf2( DOUBLE a, DOUBLE b) {
   1778a:	lea -20(sp),sp
   1778e:	movem.l d2-d3/a6,-(sp)
	return IEEEDPCmp( a, b);
   17792:	move.l 36(sp),24(sp)
   17798:	move.l 40(sp),28(sp)
   1779e:	move.l 44(sp),16(sp)
   177a4:	move.l 48(sp),20(sp)
   177aa:	move.l 1c874 <MathIeeeDoubBasBase>,d0
   177b0:	movea.l d0,a6
   177b2:	move.l 24(sp),d0
   177b6:	move.l 28(sp),d1
   177ba:	move.l 16(sp),d2
   177be:	move.l 20(sp),d3
   177c2:	jsr -42(a6)
   177c6:	move.l d0,12(sp)
   177ca:	move.l 12(sp),d0
}
   177ce:	movem.l (sp)+,d2-d3/a6
   177d2:	lea 20(sp),sp
   177d6:	rts

000177d8 <__ltsf2>:

int __ltsf2( FLOAT a, FLOAT b) {
   177d8:	lea -12(sp),sp
   177dc:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   177de:	move.l 20(sp),12(sp)
   177e4:	move.l 24(sp),8(sp)
   177ea:	move.l 1c86c <MathIeeeSingBasBase>,d0
   177f0:	movea.l d0,a6
   177f2:	move.l 12(sp),d0
   177f6:	move.l 8(sp),d1
   177fa:	jsr -42(a6)
   177fe:	move.l d0,4(sp)
   17802:	move.l 4(sp),d0
}
   17806:	movea.l (sp)+,a6
   17808:	lea 12(sp),sp
   1780c:	rts

0001780e <__nesf2>:

int __nesf2( FLOAT a, FLOAT b) {
   1780e:	lea -12(sp),sp
   17812:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   17814:	move.l 20(sp),12(sp)
   1781a:	move.l 24(sp),8(sp)
   17820:	move.l 1c86c <MathIeeeSingBasBase>,d0
   17826:	movea.l d0,a6
   17828:	move.l 12(sp),d0
   1782c:	move.l 8(sp),d1
   17830:	jsr -42(a6)
   17834:	move.l d0,4(sp)
   17838:	move.l 4(sp),d0
}
   1783c:	movea.l (sp)+,a6
   1783e:	lea 12(sp),sp
   17842:	rts

00017844 <__subdf3>:

DOUBLE __subdf3 (DOUBLE a, DOUBLE b) {
   17844:	lea -32(sp),sp
   17848:	movem.l d2-d3/a6,-(sp)
	return IEEEDPSub( a, b);
   1784c:	move.l 48(sp),36(sp)
   17852:	move.l 52(sp),40(sp)
   17858:	move.l 56(sp),28(sp)
   1785e:	move.l 60(sp),32(sp)
   17864:	move.l 1c874 <MathIeeeDoubBasBase>,d0
   1786a:	movea.l d0,a6
   1786c:	move.l 36(sp),d0
   17870:	move.l 40(sp),d1
   17874:	move.l 28(sp),d2
   17878:	move.l 32(sp),d3
   1787c:	jsr -72(a6)
   17880:	move.l d0,12(sp)
   17884:	move.l d1,16(sp)
   17888:	move.l 12(sp),20(sp)
   1788e:	move.l 16(sp),24(sp)
   17894:	move.l 20(sp),d0
   17898:	move.l 24(sp),d1
}
   1789c:	movem.l (sp)+,d2-d3/a6
   178a0:	lea 32(sp),sp
   178a4:	rts

000178a6 <__subsf3>:

FLOAT __subsf3 (float a, float b) {
   178a6:	lea -12(sp),sp
   178aa:	move.l a6,-(sp)
	return IEEESPSub( a, b);
   178ac:	move.l 20(sp),12(sp)
   178b2:	move.l 24(sp),8(sp)
   178b8:	move.l 1c86c <MathIeeeSingBasBase>,d0
   178be:	movea.l d0,a6
   178c0:	move.l 12(sp),d0
   178c4:	move.l 8(sp),d1
   178c8:	jsr -72(a6)
   178cc:	move.l d0,4(sp)
   178d0:	move.l 4(sp),d0
}
   178d4:	movea.l (sp)+,a6
   178d6:	lea 12(sp),sp
   178da:	rts

000178dc <__truncdfsf2>:

FLOAT __truncdfsf2(DOUBLE a) {
   178dc:	lea -12(sp),sp
   178e0:	move.l a6,-(sp)
	return IEEEDPTieee( a);
   178e2:	move.l 20(sp),8(sp)
   178e8:	move.l 24(sp),12(sp)
   178ee:	move.l 1c878 <MathIeeeDoubTransBase>,d0
   178f4:	movea.l d0,a6
   178f6:	move.l 8(sp),d0
   178fa:	move.l 12(sp),d1
   178fe:	jsr -102(a6)
   17902:	move.l d0,4(sp)
   17906:	move.l 4(sp),d0
}
   1790a:	movea.l (sp)+,a6
   1790c:	lea 12(sp),sp
   17910:	rts

00017912 <__fixunssfsi>:

unsigned int __fixunssfsi (float a) {
   17912:	subq.l #8,sp
   17914:	move.l a6,-(sp)
	return IEEESPFix(a);
   17916:	move.l 16(sp),8(sp)
   1791c:	move.l 1c86c <MathIeeeSingBasBase>,d0
   17922:	movea.l d0,a6
   17924:	move.l 8(sp),d0
   17928:	jsr -30(a6)
   1792c:	move.l d0,4(sp)
   17930:	move.l 4(sp),d0
}
   17934:	movea.l (sp)+,a6
   17936:	addq.l #8,sp
   17938:	rts

0001793a <atan2f>:

FLOAT atan2f(FLOAT y, FLOAT x) {
   1793a:	       lea -24(sp),sp
   1793e:	       move.l a6,-(sp)
    if (x > 0) {
   17940:	       clr.l -(sp)
   17942:	       move.l 40(sp),-(sp)
   17946:	       jsr 1771e <__gtsf2>
   1794c:	       addq.l #8,sp
   1794e:	       tst.l d0
   17950:	   /-- ble.s 17982 <atan2f+0x48>
        return IEEESPAtan(y / x);
   17952:	   |   move.l 36(sp),-(sp)
   17956:	   |   move.l 36(sp),-(sp)
   1795a:	   |   jsr 1745e <__divsf3>
   17960:	   |   addq.l #8,sp
   17962:	   |   move.l d0,8(sp)
   17966:	   |   move.l 1c870 <MathIeeeSingTransBase>,d0
   1796c:	   |   movea.l d0,a6
   1796e:	   |   move.l 8(sp),d0
   17972:	   |   jsr -30(a6)
   17976:	   |   move.l d0,4(sp)
   1797a:	   |   move.l 4(sp),d0
   1797e:	/--|-- bra.w 17ae2 <atan2f+0x1a8>
    } else if (x < 0 && y >= 0) {
   17982:	|  \-> clr.l -(sp)
   17984:	|      move.l 40(sp),-(sp)
   17988:	|      jsr 177d8 <__ltsf2>
   1798e:	|      addq.l #8,sp
   17990:	|      tst.l d0
   17992:	|  /-- bge.s 17a06 <atan2f+0xcc>
   17994:	|  |   clr.l -(sp)
   17996:	|  |   move.l 36(sp),-(sp)
   1799a:	|  |   jsr 1769a <__gesf2>
   179a0:	|  |   addq.l #8,sp
   179a2:	|  |   tst.l d0
   179a4:	|  +-- blt.s 17a06 <atan2f+0xcc>
        return IEEESPAtan(y / x) + PI;
   179a6:	|  |   move.l 36(sp),-(sp)
   179aa:	|  |   move.l 36(sp),-(sp)
   179ae:	|  |   jsr 1745e <__divsf3>
   179b4:	|  |   addq.l #8,sp
   179b6:	|  |   move.l d0,24(sp)
   179ba:	|  |   move.l 1c870 <MathIeeeSingTransBase>,d0
   179c0:	|  |   movea.l d0,a6
   179c2:	|  |   move.l 24(sp),d0
   179c6:	|  |   jsr -30(a6)
   179ca:	|  |   move.l d0,20(sp)
   179ce:	|  |   move.l 20(sp),d0
   179d2:	|  |   move.l d0,-(sp)
   179d4:	|  |   jsr 174ca <__extendsfdf2>
   179da:	|  |   addq.l #4,sp
   179dc:	|  |   move.l #1413754136,-(sp)
   179e2:	|  |   move.l #1074340347,-(sp)
   179e8:	|  |   move.l d1,-(sp)
   179ea:	|  |   move.l d0,-(sp)
   179ec:	|  |   jsr 1739a <__adddf3>
   179f2:	|  |   lea 16(sp),sp
   179f6:	|  |   move.l d1,-(sp)
   179f8:	|  |   move.l d0,-(sp)
   179fa:	|  |   jsr 178dc <__truncdfsf2>
   17a00:	|  |   addq.l #8,sp
   17a02:	+--|-- bra.w 17ae2 <atan2f+0x1a8>
    } else if (x < 0 && y < 0) {
   17a06:	|  \-> clr.l -(sp)
   17a08:	|      move.l 40(sp),-(sp)
   17a0c:	|      jsr 177d8 <__ltsf2>
   17a12:	|      addq.l #8,sp
   17a14:	|      tst.l d0
   17a16:	|  /-- bge.s 17a88 <atan2f+0x14e>
   17a18:	|  |   clr.l -(sp)
   17a1a:	|  |   move.l 36(sp),-(sp)
   17a1e:	|  |   jsr 177d8 <__ltsf2>
   17a24:	|  |   addq.l #8,sp
   17a26:	|  |   tst.l d0
   17a28:	|  +-- bge.s 17a88 <atan2f+0x14e>
        return IEEESPAtan(y / x) - PI;
   17a2a:	|  |   move.l 36(sp),-(sp)
   17a2e:	|  |   move.l 36(sp),-(sp)
   17a32:	|  |   jsr 1745e <__divsf3>
   17a38:	|  |   addq.l #8,sp
   17a3a:	|  |   move.l d0,16(sp)
   17a3e:	|  |   move.l 1c870 <MathIeeeSingTransBase>,d0
   17a44:	|  |   movea.l d0,a6
   17a46:	|  |   move.l 16(sp),d0
   17a4a:	|  |   jsr -30(a6)
   17a4e:	|  |   move.l d0,12(sp)
   17a52:	|  |   move.l 12(sp),d0
   17a56:	|  |   move.l d0,-(sp)
   17a58:	|  |   jsr 174ca <__extendsfdf2>
   17a5e:	|  |   addq.l #4,sp
   17a60:	|  |   move.l #1413754136,-(sp)
   17a66:	|  |   move.l #1074340347,-(sp)
   17a6c:	|  |   move.l d1,-(sp)
   17a6e:	|  |   move.l d0,-(sp)
   17a70:	|  |   jsr 17844 <__subdf3>
   17a76:	|  |   lea 16(sp),sp
   17a7a:	|  |   move.l d1,-(sp)
   17a7c:	|  |   move.l d0,-(sp)
   17a7e:	|  |   jsr 178dc <__truncdfsf2>
   17a84:	|  |   addq.l #8,sp
   17a86:	+--|-- bra.s 17ae2 <atan2f+0x1a8>
    } else if (x == 0 && y > 0) {
   17a88:	|  \-> clr.l -(sp)
   17a8a:	|      move.l 40(sp),-(sp)
   17a8e:	|      jsr 17494 <__eqsf2>
   17a94:	|      addq.l #8,sp
   17a96:	|      tst.l d0
   17a98:	|  /-- bne.s 17ab4 <atan2f+0x17a>
   17a9a:	|  |   clr.l -(sp)
   17a9c:	|  |   move.l 36(sp),-(sp)
   17aa0:	|  |   jsr 1771e <__gtsf2>
   17aa6:	|  |   addq.l #8,sp
   17aa8:	|  |   tst.l d0
   17aaa:	|  +-- ble.s 17ab4 <atan2f+0x17a>
        return PI / 2;
   17aac:	|  |   move.l #1070141403,d0
   17ab2:	+--|-- bra.s 17ae2 <atan2f+0x1a8>
    } else if (x == 0 && y < 0) {
   17ab4:	|  \-> clr.l -(sp)
   17ab6:	|      move.l 40(sp),-(sp)
   17aba:	|      jsr 17494 <__eqsf2>
   17ac0:	|      addq.l #8,sp
   17ac2:	|      tst.l d0
   17ac4:	|  /-- bne.s 17ae0 <atan2f+0x1a6>
   17ac6:	|  |   clr.l -(sp)
   17ac8:	|  |   move.l 36(sp),-(sp)
   17acc:	|  |   jsr 177d8 <__ltsf2>
   17ad2:	|  |   addq.l #8,sp
   17ad4:	|  |   tst.l d0
   17ad6:	|  +-- bge.s 17ae0 <atan2f+0x1a6>
        return -PI / 2;
   17ad8:	|  |   move.l #-1077342245,d0
   17ade:	+--|-- bra.s 17ae2 <atan2f+0x1a8>
    } else {
        // This case is x == 0 and y == 0, atan2(0, 0) is undefined, but often treated as 0.
        return 0;
   17ae0:	|  \-> moveq #0,d0
    }
}
   17ae2:	\----> movea.l (sp)+,a6
   17ae4:	       lea 24(sp),sp
   17ae8:	       rts

00017aea <sqrt>:

DOUBLE sqrt( DOUBLE input) {
   17aea:	lea -24(sp),sp
   17aee:	move.l a6,-(sp)
	return IEEEDPSqrt(input);
   17af0:	move.l 32(sp),20(sp)
   17af6:	move.l 36(sp),24(sp)
   17afc:	move.l 1c878 <MathIeeeDoubTransBase>,d0
   17b02:	movea.l d0,a6
   17b04:	move.l 20(sp),d0
   17b08:	move.l 24(sp),d1
   17b0c:	jsr -96(a6)
   17b10:	move.l d0,4(sp)
   17b14:	move.l d1,8(sp)
   17b18:	move.l 4(sp),12(sp)
   17b1e:	move.l 8(sp),16(sp)
   17b24:	move.l 12(sp),d0
   17b28:	move.l 16(sp),d1
}
   17b2c:	movea.l (sp)+,a6
   17b2e:	lea 24(sp),sp
   17b32:	rts

00017b34 <__mulsi3>:
	.section .text.__mulsi3,"ax",@progbits
	.type __mulsi3, function
	.globl	__mulsi3
__mulsi3:
	.cfi_startproc
	movew	sp@(4), d0	/* x0 -> d0 */
   17b34:	move.w 4(sp),d0
	muluw	sp@(10), d0	/* x0*y1 */
   17b38:	mulu.w 10(sp),d0
	movew	sp@(6), d1	/* x1 -> d1 */
   17b3c:	move.w 6(sp),d1
	muluw	sp@(8), d1	/* x1*y0 */
   17b40:	mulu.w 8(sp),d1
	addw	d1, d0
   17b44:	add.w d1,d0
	swap	d0
   17b46:	swap d0
	clrw	d0
   17b48:	clr.w d0
	movew	sp@(6), d1	/* x1 -> d1 */
   17b4a:	move.w 6(sp),d1
	muluw	sp@(10), d1	/* x1*y1 */
   17b4e:	mulu.w 10(sp),d1
	addl	d1, d0
   17b52:	add.l d1,d0
	rts
   17b54:	rts

00017b56 <__udivsi3>:
	.section .text.__udivsi3,"ax",@progbits
	.type __udivsi3, function
	.globl	__udivsi3
__udivsi3:
	.cfi_startproc
	movel	d2, sp@-
   17b56:	       move.l d2,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	sp@(12), d1	/* d1 = divisor */
   17b58:	       move.l 12(sp),d1
	movel	sp@(8), d0	/* d0 = dividend */
   17b5c:	       move.l 8(sp),d0

	cmpl	#0x10000, d1 /* divisor >= 2 ^ 16 ?   */
   17b60:	       cmpi.l #65536,d1
	jcc	3f		/* then try next algorithm */
   17b66:	   /-- bcc.s 17b7e <__udivsi3+0x28>
	movel	d0, d2
   17b68:	   |   move.l d0,d2
	clrw	d2
   17b6a:	   |   clr.w d2
	swap	d2
   17b6c:	   |   swap d2
	divu	d1, d2          /* high quotient in lower word */
   17b6e:	   |   divu.w d1,d2
	movew	d2, d0		/* save high quotient */
   17b70:	   |   move.w d2,d0
	swap	d0
   17b72:	   |   swap d0
	movew	sp@(10), d2	/* get low dividend + high rest */
   17b74:	   |   move.w 10(sp),d2
	divu	d1, d2		/* low quotient */
   17b78:	   |   divu.w d1,d2
	movew	d2, d0
   17b7a:	   |   move.w d2,d0
	jra	6f
   17b7c:	/--|-- bra.s 17bae <__udivsi3+0x58>

3:	movel	d1, d2		/* use d2 as divisor backup */
   17b7e:	|  \-> move.l d1,d2
4:	lsrl	#1, d1	/* shift divisor */
   17b80:	|  /-> lsr.l #1,d1
	lsrl	#1, d0	/* shift dividend */
   17b82:	|  |   lsr.l #1,d0
	cmpl	#0x10000, d1 /* still divisor >= 2 ^ 16 ?  */
   17b84:	|  |   cmpi.l #65536,d1
	jcc	4b
   17b8a:	|  \-- bcc.s 17b80 <__udivsi3+0x2a>
	divu	d1, d0		/* now we have 16-bit divisor */
   17b8c:	|      divu.w d1,d0
	andl	#0xffff, d0 /* mask out divisor, ignore remainder */
   17b8e:	|      andi.l #65535,d0

/* Multiply the 16-bit tentative quotient with the 32-bit divisor.  Because of
   the operand ranges, this might give a 33-bit product.  If this product is
   greater than the dividend, the tentative quotient was too large. */
	movel	d2, d1
   17b94:	|      move.l d2,d1
	mulu	d0, d1		/* low part, 32 bits */
   17b96:	|      mulu.w d0,d1
	swap	d2
   17b98:	|      swap d2
	mulu	d0, d2		/* high part, at most 17 bits */
   17b9a:	|      mulu.w d0,d2
	swap	d2		/* align high part with low part */
   17b9c:	|      swap d2
	tstw	d2		/* high part 17 bits? */
   17b9e:	|      tst.w d2
	jne	5f		/* if 17 bits, quotient was too large */
   17ba0:	|  /-- bne.s 17bac <__udivsi3+0x56>
	addl	d2, d1		/* add parts */
   17ba2:	|  |   add.l d2,d1
	jcs	5f		/* if sum is 33 bits, quotient was too large */
   17ba4:	|  +-- bcs.s 17bac <__udivsi3+0x56>
	cmpl	sp@(8), d1	/* compare the sum with the dividend */
   17ba6:	|  |   cmp.l 8(sp),d1
	jls	6f		/* if sum > dividend, quotient was too large */
   17baa:	+--|-- bls.s 17bae <__udivsi3+0x58>
5:	subql	#1, d0	/* adjust quotient */
   17bac:	|  \-> subq.l #1,d0

6:	movel	sp@+, d2
   17bae:	\----> move.l (sp)+,d2
	.cfi_adjust_cfa_offset -4
	rts
   17bb0:	       rts

00017bb2 <__divsi3>:
	.section .text.__divsi3,"ax",@progbits
	.type __divsi3, function
	.globl	__divsi3
 __divsi3:
 	.cfi_startproc
	movel	d2, sp@-
   17bb2:	    move.l d2,-(sp)
	.cfi_adjust_cfa_offset 4

	moveq	#1, d2	/* sign of result stored in d2 (=1 or =-1) */
   17bb4:	    moveq #1,d2
	movel	sp@(12), d1	/* d1 = divisor */
   17bb6:	    move.l 12(sp),d1
	jpl	1f
   17bba:	/-- bpl.s 17bc0 <__divsi3+0xe>
	negl	d1
   17bbc:	|   neg.l d1
	negb	d2		/* change sign because divisor <0  */
   17bbe:	|   neg.b d2
1:	movel	sp@(8), d0	/* d0 = dividend */
   17bc0:	\-> move.l 8(sp),d0
	jpl	2f
   17bc4:	/-- bpl.s 17bca <__divsi3+0x18>
	negl	d0
   17bc6:	|   neg.l d0
	negb	d2
   17bc8:	|   neg.b d2

2:	movel	d1, sp@-
   17bca:	\-> move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   17bcc:	    move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__udivsi3	/* divide abs(dividend) by abs(divisor) */
   17bce:	    jsr 17b56 <__udivsi3>
	addql	#8, sp
   17bd4:	    addq.l #8,sp
	.cfi_adjust_cfa_offset -8

	tstb	d2
   17bd6:	    tst.b d2
	jpl	3f
   17bd8:	/-- bpl.s 17bdc <__divsi3+0x2a>
	negl	d0
   17bda:	|   neg.l d0

3:	movel	sp@+, d2
   17bdc:	\-> move.l (sp)+,d2
	.cfi_adjust_cfa_offset -4
	rts
   17bde:	    rts

00017be0 <__modsi3>:
	.section .text.__modsi3,"ax",@progbits
	.type __modsi3, function
	.globl	__modsi3
__modsi3:
	.cfi_startproc
	movel	sp@(8), d1	/* d1 = divisor */
   17be0:	move.l 8(sp),d1
	movel	sp@(4), d0	/* d0 = dividend */
   17be4:	move.l 4(sp),d0
	movel	d1, sp@-
   17be8:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   17bea:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__divsi3
   17bec:	jsr 17bb2 <__divsi3>
	addql	#8, sp
   17bf2:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(8), d1	/* d1 = divisor */
   17bf4:	move.l 8(sp),d1
	movel	d1, sp@-
   17bf8:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   17bfa:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__mulsi3	/* d0 = (a/b)*b */
   17bfc:	jsr 17b34 <__mulsi3>
	addql	#8, sp
   17c02:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(4), d1	/* d1 = dividend */
   17c04:	move.l 4(sp),d1
	subl	d0, d1		/* d1 = a - (a/b)*b */
   17c08:	sub.l d0,d1
	movel	d1, d0
   17c0a:	move.l d1,d0
	rts
   17c0c:	rts

00017c0e <__umodsi3>:
	.section .text.__umodsi3,"ax",@progbits
	.type __umodsi3, function
	.globl	__umodsi3
__umodsi3:
	.cfi_startproc
	movel	sp@(8), d1	/* d1 = divisor */
   17c0e:	move.l 8(sp),d1
	movel	sp@(4), d0	/* d0 = dividend */
   17c12:	move.l 4(sp),d0
	movel	d1, sp@-
   17c16:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   17c18:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__udivsi3
   17c1a:	jsr 17b56 <__udivsi3>
	addql	#8, sp
   17c20:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(8), d1	/* d1 = divisor */
   17c22:	move.l 8(sp),d1
	movel	d1, sp@-
   17c26:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   17c28:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__mulsi3	/* d0 = (a/b)*b */
   17c2a:	jsr 17b34 <__mulsi3>
	addql	#8, sp
   17c30:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(4), d1	/* d1 = dividend */
   17c32:	move.l 4(sp),d1
	subl	d0, d1		/* d1 = a - (a/b)*b */
   17c36:	sub.l d0,d1
	movel	d1, d0
   17c38:	move.l d1,d0
	rts
   17c3a:	rts

00017c3c <KPutCharX>:
	.type KPutCharX, function
	.globl	KPutCharX

KPutCharX:
	.cfi_startproc
    move.l  a6, -(sp)
   17c3c:	move.l a6,-(sp)
	.cfi_adjust_cfa_offset 4
    move.l  4.w, a6
   17c3e:	movea.l 4 <_start+0x4>,a6
    jsr     -0x204(a6)
   17c42:	jsr -516(a6)
    move.l (sp)+, a6
   17c46:	movea.l (sp)+,a6
	.cfi_adjust_cfa_offset -4
    rts
   17c48:	rts

00017c4a <PutChar>:
	.type PutChar, function
	.globl	PutChar

PutChar:
	.cfi_startproc
	move.b d0, (a3)+
   17c4a:	move.b d0,(a3)+
	rts
   17c4c:	rts
