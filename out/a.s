
out/a.elf:     file format elf32-m68k


Disassembly of section .text:

00000000 <_start>:
extern void (*__init_array_start[])() __attribute__((weak));
extern void (*__init_array_end[])() __attribute__((weak));
extern void (*__fini_array_start[])() __attribute__((weak));
extern void (*__fini_array_end[])() __attribute__((weak));

__attribute__((used)) __attribute__((section(".text.unlikely"))) void _start() {
       0:	       subq.l #8,sp
	// initialize globals, ctors etc.
	unsigned long count;
	unsigned long i;

	count = __preinit_array_end - __preinit_array_start;
       2:	       move.l #116740,d0
       8:	       subi.l #116740,d0
       e:	       asr.l #2,d0
      10:	       move.l d0,(sp)
	for (i = 0; i < count; i++)
      12:	       clr.l 4(sp)
      16:	   ,-- bra.s 32 <_start+0x32>
		__preinit_array_start[i]();
      18:	,--|-> move.l 4(sp),d0
      1c:	|  |   add.l d0,d0
      1e:	|  |   movea.l d0,a1
      20:	|  |   adda.l d0,a1
      22:	|  |   lea 1c804 <allowAnyFilename>,a0
      28:	|  |   movea.l (0,a1,a0.l),a0
      2c:	|  |   jsr (a0)
	for (i = 0; i < count; i++)
      2e:	|  |   addq.l #1,4(sp)
      32:	|  '-> move.l 4(sp),d0
      36:	|      cmp.l (sp),d0
      38:	'----- bcs.s 18 <_start+0x18>

	count = __init_array_end - __init_array_start;
      3a:	       move.l #116740,d0
      40:	       subi.l #116740,d0
      46:	       asr.l #2,d0
      48:	       move.l d0,(sp)
	for (i = 0; i < count; i++)
      4a:	       clr.l 4(sp)
      4e:	   ,-- bra.s 6a <_start+0x6a>
		__init_array_start[i]();
      50:	,--|-> move.l 4(sp),d0
      54:	|  |   add.l d0,d0
      56:	|  |   movea.l d0,a1
      58:	|  |   adda.l d0,a1
      5a:	|  |   lea 1c804 <allowAnyFilename>,a0
      60:	|  |   movea.l (0,a1,a0.l),a0
      64:	|  |   jsr (a0)
	for (i = 0; i < count; i++)
      66:	|  |   addq.l #1,4(sp)
      6a:	|  '-> move.l 4(sp),d0
      6e:	|      cmp.l (sp),d0
      70:	'----- bcs.s 50 <_start+0x50>

	main();
      72:	       jsr 840e <main>

	// call dtors
	count = __fini_array_end - __fini_array_start;
      78:	       move.l #116740,d0
      7e:	       subi.l #116740,d0
      84:	       asr.l #2,d0
      86:	       move.l d0,(sp)
	for (i = count; i > 0; i--)
      88:	       move.l (sp),4(sp)
      8c:	   ,-- bra.s aa <_start+0xaa>
		__fini_array_start[i - 1]();
      8e:	,--|-> move.l 4(sp),d0
      92:	|  |   subq.l #1,d0
      94:	|  |   add.l d0,d0
      96:	|  |   movea.l d0,a1
      98:	|  |   adda.l d0,a1
      9a:	|  |   lea 1c804 <allowAnyFilename>,a0
      a0:	|  |   movea.l (0,a1,a0.l),a0
      a4:	|  |   jsr (a0)
	for (i = count; i > 0; i--)
      a6:	|  |   subq.l #1,4(sp)
      aa:	|  '-> tst.l 4(sp)
      ae:	'----- bne.s 8e <_start+0x8e>
}
      b0:	       nop
      b2:	       nop
      b4:	       addq.l #8,sp
      b6:	       rts

000000b8 <copyString>:
#include "support/gcc8_c_support.h"
#include "moreio.h"

BOOL allowAnyFilename = TRUE;

char * copyString(const char * c) {
      b8:	       lea -16(sp),sp
      bc:	       move.l a6,-(sp)
    char * r = (char *)AllocVec(strlen(c) + 1, MEMF_ANY);
      be:	       move.l 24(sp),-(sp)
      c2:	       jsr 141b4 <strlen>
      c8:	       addq.l #4,sp
      ca:	       move.l d0,d1
      cc:	       addq.l #1,d1
      ce:	       move.l d1,16(sp)
      d2:	       clr.l 12(sp)
      d6:	       move.l 1cfb6 <SysBase>,d0
      dc:	       movea.l d0,a6
      de:	       move.l 16(sp),d0
      e2:	       move.l 12(sp),d1
      e6:	       jsr -684(a6)
      ea:	       move.l d0,8(sp)
      ee:	       move.l 8(sp),d0
      f2:	       move.l d0,4(sp)
    if (!r) return NULL;
      f6:	   ,-- bne.s fc <copyString+0x44>
      f8:	   |   moveq #0,d0
      fa:	,--|-- bra.s 110 <copyString+0x58>
    strcpy(r, c);
      fc:	|  '-> move.l 24(sp),-(sp)
     100:	|      move.l 8(sp),-(sp)
     104:	|      jsr 141cc <strcpy>
     10a:	|      addq.l #8,sp
    return r;
     10c:	|      move.l 4(sp),d0
}
     110:	'----> movea.l (sp)+,a6
     112:	       lea 16(sp),sp
     116:	       rts

00000118 <decodeFilename>:

char * decodeFilename(char * nameIn) {
     118:	                      lea -20(sp),sp
     11c:	                      move.l a6,-(sp)
	if (allowAnyFilename) {
     11e:	                      move.w 1c804 <allowAnyFilename>,d0
     124:	,-------------------- beq.w 2ea <decodeFilename+0x1d2>
		char * newName = (char *)AllocVec(strlen(nameIn) + 1, MEMF_ANY);
     128:	|                     move.l 28(sp),-(sp)
     12c:	|                     jsr 141b4 <strlen>
     132:	|                     addq.l #4,sp
     134:	|                     move.l d0,d1
     136:	|                     addq.l #1,d1
     138:	|                     move.l d1,16(sp)
     13c:	|                     clr.l 12(sp)
     140:	|                     move.l 1cfb6 <SysBase>,d0
     146:	|                     movea.l d0,a6
     148:	|                     move.l 16(sp),d0
     14c:	|                     move.l 12(sp),d1
     150:	|                     jsr -684(a6)
     154:	|                     move.l d0,8(sp)
     158:	|                     move.l 8(sp),d0
     15c:	|                     move.l d0,4(sp)
		if (!newName) return NULL;
     160:	|                 ,-- bne.s 168 <decodeFilename+0x50>
     162:	|                 |   moveq #0,d0
     164:	|  ,--------------|-- bra.w 2f6 <decodeFilename+0x1de>

		int i = 0;
     168:	|  |              '-> clr.l 20(sp)
		while (*nameIn) {
     16c:	|  |     ,----------- bra.w 2ce <decodeFilename+0x1b6>
			if (*nameIn == '_') {
     170:	|  |  ,--|----------> movea.l 28(sp),a0
     174:	|  |  |  |            move.b (a0),d0
     176:	|  |  |  |            cmpi.b #95,d0
     17a:	|  |  |  |  ,-------- bne.w 2b4 <decodeFilename+0x19c>
				nameIn++;
     17e:	|  |  |  |  |         addq.l #1,28(sp)
				switch (*nameIn) {
     182:	|  |  |  |  |         movea.l 28(sp),a0
     186:	|  |  |  |  |         move.b (a0),d0
     188:	|  |  |  |  |         ext.w d0
     18a:	|  |  |  |  |         movea.w d0,a0
     18c:	|  |  |  |  |         moveq #-65,d0
     18e:	|  |  |  |  |         add.l a0,d0
     190:	|  |  |  |  |         moveq #20,d1
     192:	|  |  |  |  |         cmp.l d0,d1
     194:	|  |  |  |  |  ,----- bcs.w 2a4 <decodeFilename+0x18c>
     198:	|  |  |  |  |  |      add.l d0,d0
     19a:	|  |  |  |  |  |      movea.l d0,a0
     19c:	|  |  |  |  |  |      adda.l #424,a0
     1a2:	|  |  |  |  |  |      move.w (a0),d0
     1a4:	|  |  |  |  |  |      jmp (1a8 <decodeFilename+0x90>,pc,d0.w)
     1a8:	|  |  |  |  |  |      .short 0x00d4
     1aa:	|  |  |  |  |  |      ori.l #12583164,(a0)+
     1b0:	|  |  |  |  |  |      .short 0x00fc
     1b2:	|  |  |  |  |  |      ori.l #4194556,252(a4)
     1ba:	|  |  |  |  |  |      .short 0x00fc
     1bc:	|  |  |  |  |  |      .short 0x00fc
     1be:	|  |  |  |  |  |      ori.b #-4,252(a2)
     1c4:	|  |  |  |  |  |      .short 0x00fc
     1c6:	|  |  |  |  |  |      ori.w #232,(a6)
     1ca:	|  |  |  |  |  |      .short 0x00fc
     1cc:	|  |  |  |  |  |      ori.l #16515180,d2
					case 'L':	newName[i] = '<';	nameIn++;	break;
     1d2:	|  |  |  |  |  |      move.l 20(sp),d0
     1d6:	|  |  |  |  |  |      movea.l 4(sp),a0
     1da:	|  |  |  |  |  |      adda.l d0,a0
     1dc:	|  |  |  |  |  |      move.b #60,(a0)
     1e0:	|  |  |  |  |  |      addq.l #1,28(sp)
     1e4:	|  |  |  |  |  |  ,-- bra.w 2ca <decodeFilename+0x1b2>
					case 'G':	newName[i] = '>';	nameIn++;	break;
     1e8:	|  |  |  |  |  |  |   move.l 20(sp),d0
     1ec:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     1f0:	|  |  |  |  |  |  |   adda.l d0,a0
     1f2:	|  |  |  |  |  |  |   move.b #62,(a0)
     1f6:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     1fa:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'P':	newName[i] = '|';	nameIn++;	break;
     1fe:	|  |  |  |  |  |  |   move.l 20(sp),d0
     202:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     206:	|  |  |  |  |  |  |   adda.l d0,a0
     208:	|  |  |  |  |  |  |   move.b #124,(a0)
     20c:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     210:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'U':	newName[i] = '_';	nameIn++;	break;
     214:	|  |  |  |  |  |  |   move.l 20(sp),d0
     218:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     21c:	|  |  |  |  |  |  |   adda.l d0,a0
     21e:	|  |  |  |  |  |  |   move.b #95,(a0)
     222:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     226:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'S':	newName[i] = '\"';	nameIn++;	break;
     22a:	|  |  |  |  |  |  |   move.l 20(sp),d0
     22e:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     232:	|  |  |  |  |  |  |   adda.l d0,a0
     234:	|  |  |  |  |  |  |   move.b #34,(a0)
     238:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     23c:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'B':	newName[i] = '\\';	nameIn++;	break;
     240:	|  |  |  |  |  |  |   move.l 20(sp),d0
     244:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     248:	|  |  |  |  |  |  |   adda.l d0,a0
     24a:	|  |  |  |  |  |  |   move.b #92,(a0)
     24e:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     252:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'F':	newName[i] = '/';	nameIn++;	break;
     254:	|  |  |  |  |  |  |   move.l 20(sp),d0
     258:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     25c:	|  |  |  |  |  |  |   adda.l d0,a0
     25e:	|  |  |  |  |  |  |   move.b #47,(a0)
     262:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     266:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'C':	newName[i] = ':';	nameIn++;	break;
     268:	|  |  |  |  |  |  |   move.l 20(sp),d0
     26c:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     270:	|  |  |  |  |  |  |   adda.l d0,a0
     272:	|  |  |  |  |  |  |   move.b #58,(a0)
     276:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     27a:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'A':	newName[i] = '*';	nameIn++;	break;
     27c:	|  |  |  |  |  |  |   move.l 20(sp),d0
     280:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     284:	|  |  |  |  |  |  |   adda.l d0,a0
     286:	|  |  |  |  |  |  |   move.b #42,(a0)
     28a:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     28e:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'Q':	newName[i] = '?';	nameIn++;	break;
     290:	|  |  |  |  |  |  |   move.l 20(sp),d0
     294:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     298:	|  |  |  |  |  |  |   adda.l d0,a0
     29a:	|  |  |  |  |  |  |   move.b #63,(a0)
     29e:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     2a2:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					default:	newName[i] = '_';
     2a4:	|  |  |  |  |  '--|-> move.l 20(sp),d0
     2a8:	|  |  |  |  |     |   movea.l 4(sp),a0
     2ac:	|  |  |  |  |     |   adda.l d0,a0
     2ae:	|  |  |  |  |     |   move.b #95,(a0)
     2b2:	|  |  |  |  |     +-- bra.s 2ca <decodeFilename+0x1b2>
				}
			} else {
				newName[i] = *nameIn;
     2b4:	|  |  |  |  '-----|-> move.l 20(sp),d0
     2b8:	|  |  |  |        |   movea.l 4(sp),a0
     2bc:	|  |  |  |        |   adda.l d0,a0
     2be:	|  |  |  |        |   movea.l 28(sp),a1
     2c2:	|  |  |  |        |   move.b (a1),d0
     2c4:	|  |  |  |        |   move.b d0,(a0)
				nameIn++;
     2c6:	|  |  |  |        |   addq.l #1,28(sp)
			}
			i++;
     2ca:	|  |  |  |        '-> addq.l #1,20(sp)
		while (*nameIn) {
     2ce:	|  |  |  '----------> movea.l 28(sp),a0
     2d2:	|  |  |               move.b (a0),d0
     2d4:	|  |  '-------------- bne.w 170 <decodeFilename+0x58>
		}
		newName[i] = 0;
     2d8:	|  |                  move.l 20(sp),d0
     2dc:	|  |                  movea.l 4(sp),a0
     2e0:	|  |                  adda.l d0,a0
     2e2:	|  |                  clr.b (a0)
		return newName;
     2e4:	|  |                  move.l 4(sp),d0
     2e8:	|  +----------------- bra.s 2f6 <decodeFilename+0x1de>
	} else {
		return copyString(nameIn);
     2ea:	'--|----------------> move.l 28(sp),-(sp)
     2ee:	   |                  jsr b8 <copyString>
     2f4:	   |                  addq.l #4,sp
	}
}
     2f6:	   '----------------> movea.l (sp)+,a6
     2f8:	                      lea 20(sp),sp
     2fc:	                      rts

000002fe <encodeFilename>:

char * encodeFilename (char * nameIn) {
     2fe:	                      lea -24(sp),sp
     302:	                      move.l a6,-(sp)
	if (! nameIn) return NULL;
     304:	                      tst.l 32(sp)
     308:	                  ,-- bne.s 310 <encodeFilename+0x12>
     30a:	                  |   moveq #0,d0
     30c:	,-----------------|-- bra.w 688 <encodeFilename+0x38a>
	if (allowAnyFilename) {
     310:	|                 '-> move.w 1c804 <allowAnyFilename>,d0
     316:	|  ,----------------- beq.w 644 <encodeFilename+0x346>
		char * newName = AllocVec( strlen(nameIn)*2+1,MEMF_ANY);
     31a:	|  |                  move.l 32(sp),-(sp)
     31e:	|  |                  jsr 141b4 <strlen>
     324:	|  |                  addq.l #4,sp
     326:	|  |                  add.l d0,d0
     328:	|  |                  move.l d0,d1
     32a:	|  |                  addq.l #1,d1
     32c:	|  |                  move.l d1,16(sp)
     330:	|  |                  clr.l 12(sp)
     334:	|  |                  move.l 1cfb6 <SysBase>,d0
     33a:	|  |                  movea.l d0,a6
     33c:	|  |                  move.l 16(sp),d0
     340:	|  |                  move.l 12(sp),d1
     344:	|  |                  jsr -684(a6)
     348:	|  |                  move.l d0,8(sp)
     34c:	|  |                  move.l 8(sp),d0
     350:	|  |                  move.l d0,4(sp)
		if(newName == 0) {
     354:	|  |              ,-- bne.s 36a <encodeFilename+0x6c>
			KPrintF( "encodefilename: Could not allocate Memory");
     356:	|  |              |   pea 1824e <PutChar+0x4>
     35c:	|  |              |   jsr 177a8 <KPrintF>
     362:	|  |              |   addq.l #4,sp
			return NULL;
     364:	|  |              |   moveq #0,d0
     366:	+--|--------------|-- bra.w 688 <encodeFilename+0x38a>
		}

		int i = 0;
     36a:	|  |              '-> clr.l 24(sp)
		while (*nameIn) {
     36e:	|  |     ,----------- bra.w 634 <encodeFilename+0x336>
			switch (*nameIn) {
     372:	|  |  ,--|----------> movea.l 32(sp),a0
     376:	|  |  |  |            move.b (a0),d0
     378:	|  |  |  |            ext.w d0
     37a:	|  |  |  |            movea.w d0,a0
     37c:	|  |  |  |            moveq #95,d0
     37e:	|  |  |  |            cmp.l a0,d0
     380:	|  |  |  |        ,-- blt.w 424 <encodeFilename+0x126>
     384:	|  |  |  |        |   moveq #34,d1
     386:	|  |  |  |        |   cmp.l a0,d1
     388:	|  |  |  |  ,-----|-- bgt.w 608 <encodeFilename+0x30a>
     38c:	|  |  |  |  |     |   moveq #-34,d0
     38e:	|  |  |  |  |     |   add.l a0,d0
     390:	|  |  |  |  |     |   moveq #61,d1
     392:	|  |  |  |  |     |   cmp.l d0,d1
     394:	|  |  |  |  +-----|-- bcs.w 608 <encodeFilename+0x30a>
     398:	|  |  |  |  |     |   add.l d0,d0
     39a:	|  |  |  |  |     |   movea.l d0,a0
     39c:	|  |  |  |  |     |   adda.l #936,a0
     3a2:	|  |  |  |  |     |   move.w (a0),d0
     3a4:	|  |  |  |  |     |   jmp (3a8 <encodeFilename+0xaa>,pc,d0.w)
     3a8:	|  |  |  |  |     |   bchg d0,d6
     3aa:	|  |  |  |  |     |   andi.w #608,-(a0)
     3ae:	|  |  |  |  |     |   andi.w #608,-(a0)
     3b2:	|  |  |  |  |     |   andi.w #608,-(a0)
     3b6:	|  |  |  |  |     |   andi.w #516,-(a0)
     3ba:	|  |  |  |  |     |   andi.w #608,-(a0)
     3be:	|  |  |  |  |     |   andi.w #608,-(a0)
     3c2:	|  |  |  |  |     |   bclr d0,-(a6)
     3c4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3c8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3cc:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d0:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d8:	|  |  |  |  |     |   bset d0,(a6)
     3da:	|  |  |  |  |     |   andi.w #134,-(a0)
     3de:	|  |  |  |  |     |   andi.w #182,-(a0)
     3e2:	|  |  |  |  |     |   andi.b #96,(96,a2,d0.w:2)
     3e8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3ec:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f0:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3fc:	|  |  |  |  |     |   andi.w #608,-(a0)
     400:	|  |  |  |  |     |   andi.w #608,-(a0)
     404:	|  |  |  |  |     |   andi.w #608,-(a0)
     408:	|  |  |  |  |     |   andi.w #608,-(a0)
     40c:	|  |  |  |  |     |   andi.w #608,-(a0)
     410:	|  |  |  |  |     |   andi.w #608,-(a0)
     414:	|  |  |  |  |     |   andi.w #608,-(a0)
     418:	|  |  |  |  |     |   andi.w #608,-(a0)
     41c:	|  |  |  |  |     |   bchg d0,(96,a6,d0.w:2)
     420:	|  |  |  |  |     |   andi.w #278,-(a0)
     424:	|  |  |  |  |     '-> moveq #124,d0
     426:	|  |  |  |  |         cmp.l a0,d0
     428:	|  |  |  |  |     ,-- beq.s 48e <encodeFilename+0x190>
     42a:	|  |  |  |  +-----|-- bra.w 608 <encodeFilename+0x30a>
				case '<':	newName[i++] = '_';		newName[i++] = 'L';		break;
     42e:	|  |  |  |  |     |   move.l 24(sp),d0
     432:	|  |  |  |  |     |   move.l d0,d1
     434:	|  |  |  |  |     |   addq.l #1,d1
     436:	|  |  |  |  |     |   move.l d1,24(sp)
     43a:	|  |  |  |  |     |   movea.l 4(sp),a0
     43e:	|  |  |  |  |     |   adda.l d0,a0
     440:	|  |  |  |  |     |   move.b #95,(a0)
     444:	|  |  |  |  |     |   move.l 24(sp),d0
     448:	|  |  |  |  |     |   move.l d0,d1
     44a:	|  |  |  |  |     |   addq.l #1,d1
     44c:	|  |  |  |  |     |   move.l d1,24(sp)
     450:	|  |  |  |  |     |   movea.l 4(sp),a0
     454:	|  |  |  |  |     |   adda.l d0,a0
     456:	|  |  |  |  |     |   move.b #76,(a0)
     45a:	|  |  |  |  |  ,--|-- bra.w 624 <encodeFilename+0x326>
				case '>':	newName[i++] = '_';		newName[i++] = 'G';		break;
     45e:	|  |  |  |  |  |  |   move.l 24(sp),d0
     462:	|  |  |  |  |  |  |   move.l d0,d1
     464:	|  |  |  |  |  |  |   addq.l #1,d1
     466:	|  |  |  |  |  |  |   move.l d1,24(sp)
     46a:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     46e:	|  |  |  |  |  |  |   adda.l d0,a0
     470:	|  |  |  |  |  |  |   move.b #95,(a0)
     474:	|  |  |  |  |  |  |   move.l 24(sp),d0
     478:	|  |  |  |  |  |  |   move.l d0,d1
     47a:	|  |  |  |  |  |  |   addq.l #1,d1
     47c:	|  |  |  |  |  |  |   move.l d1,24(sp)
     480:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     484:	|  |  |  |  |  |  |   adda.l d0,a0
     486:	|  |  |  |  |  |  |   move.b #71,(a0)
     48a:	|  |  |  |  |  +--|-- bra.w 624 <encodeFilename+0x326>
				case '|':	newName[i++] = '_';		newName[i++] = 'P';		break;
     48e:	|  |  |  |  |  |  '-> move.l 24(sp),d0
     492:	|  |  |  |  |  |      move.l d0,d1
     494:	|  |  |  |  |  |      addq.l #1,d1
     496:	|  |  |  |  |  |      move.l d1,24(sp)
     49a:	|  |  |  |  |  |      movea.l 4(sp),a0
     49e:	|  |  |  |  |  |      adda.l d0,a0
     4a0:	|  |  |  |  |  |      move.b #95,(a0)
     4a4:	|  |  |  |  |  |      move.l 24(sp),d0
     4a8:	|  |  |  |  |  |      move.l d0,d1
     4aa:	|  |  |  |  |  |      addq.l #1,d1
     4ac:	|  |  |  |  |  |      move.l d1,24(sp)
     4b0:	|  |  |  |  |  |      movea.l 4(sp),a0
     4b4:	|  |  |  |  |  |      adda.l d0,a0
     4b6:	|  |  |  |  |  |      move.b #80,(a0)
     4ba:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '_':	newName[i++] = '_';		newName[i++] = 'U';		break;
     4be:	|  |  |  |  |  |      move.l 24(sp),d0
     4c2:	|  |  |  |  |  |      move.l d0,d1
     4c4:	|  |  |  |  |  |      addq.l #1,d1
     4c6:	|  |  |  |  |  |      move.l d1,24(sp)
     4ca:	|  |  |  |  |  |      movea.l 4(sp),a0
     4ce:	|  |  |  |  |  |      adda.l d0,a0
     4d0:	|  |  |  |  |  |      move.b #95,(a0)
     4d4:	|  |  |  |  |  |      move.l 24(sp),d0
     4d8:	|  |  |  |  |  |      move.l d0,d1
     4da:	|  |  |  |  |  |      addq.l #1,d1
     4dc:	|  |  |  |  |  |      move.l d1,24(sp)
     4e0:	|  |  |  |  |  |      movea.l 4(sp),a0
     4e4:	|  |  |  |  |  |      adda.l d0,a0
     4e6:	|  |  |  |  |  |      move.b #85,(a0)
     4ea:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '\"':	newName[i++] = '_';		newName[i++] = 'S';		break;
     4ee:	|  |  |  |  |  |      move.l 24(sp),d0
     4f2:	|  |  |  |  |  |      move.l d0,d1
     4f4:	|  |  |  |  |  |      addq.l #1,d1
     4f6:	|  |  |  |  |  |      move.l d1,24(sp)
     4fa:	|  |  |  |  |  |      movea.l 4(sp),a0
     4fe:	|  |  |  |  |  |      adda.l d0,a0
     500:	|  |  |  |  |  |      move.b #95,(a0)
     504:	|  |  |  |  |  |      move.l 24(sp),d0
     508:	|  |  |  |  |  |      move.l d0,d1
     50a:	|  |  |  |  |  |      addq.l #1,d1
     50c:	|  |  |  |  |  |      move.l d1,24(sp)
     510:	|  |  |  |  |  |      movea.l 4(sp),a0
     514:	|  |  |  |  |  |      adda.l d0,a0
     516:	|  |  |  |  |  |      move.b #83,(a0)
     51a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '\\':	newName[i++] = '_';		newName[i++] = 'B';		break;
     51e:	|  |  |  |  |  |      move.l 24(sp),d0
     522:	|  |  |  |  |  |      move.l d0,d1
     524:	|  |  |  |  |  |      addq.l #1,d1
     526:	|  |  |  |  |  |      move.l d1,24(sp)
     52a:	|  |  |  |  |  |      movea.l 4(sp),a0
     52e:	|  |  |  |  |  |      adda.l d0,a0
     530:	|  |  |  |  |  |      move.b #95,(a0)
     534:	|  |  |  |  |  |      move.l 24(sp),d0
     538:	|  |  |  |  |  |      move.l d0,d1
     53a:	|  |  |  |  |  |      addq.l #1,d1
     53c:	|  |  |  |  |  |      move.l d1,24(sp)
     540:	|  |  |  |  |  |      movea.l 4(sp),a0
     544:	|  |  |  |  |  |      adda.l d0,a0
     546:	|  |  |  |  |  |      move.b #66,(a0)
     54a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '/':	newName[i++] = '_';		newName[i++] = 'F';		break;
     54e:	|  |  |  |  |  |      move.l 24(sp),d0
     552:	|  |  |  |  |  |      move.l d0,d1
     554:	|  |  |  |  |  |      addq.l #1,d1
     556:	|  |  |  |  |  |      move.l d1,24(sp)
     55a:	|  |  |  |  |  |      movea.l 4(sp),a0
     55e:	|  |  |  |  |  |      adda.l d0,a0
     560:	|  |  |  |  |  |      move.b #95,(a0)
     564:	|  |  |  |  |  |      move.l 24(sp),d0
     568:	|  |  |  |  |  |      move.l d0,d1
     56a:	|  |  |  |  |  |      addq.l #1,d1
     56c:	|  |  |  |  |  |      move.l d1,24(sp)
     570:	|  |  |  |  |  |      movea.l 4(sp),a0
     574:	|  |  |  |  |  |      adda.l d0,a0
     576:	|  |  |  |  |  |      move.b #70,(a0)
     57a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case ':':	newName[i++] = '_';		newName[i++] = 'C';		break;
     57e:	|  |  |  |  |  |      move.l 24(sp),d0
     582:	|  |  |  |  |  |      move.l d0,d1
     584:	|  |  |  |  |  |      addq.l #1,d1
     586:	|  |  |  |  |  |      move.l d1,24(sp)
     58a:	|  |  |  |  |  |      movea.l 4(sp),a0
     58e:	|  |  |  |  |  |      adda.l d0,a0
     590:	|  |  |  |  |  |      move.b #95,(a0)
     594:	|  |  |  |  |  |      move.l 24(sp),d0
     598:	|  |  |  |  |  |      move.l d0,d1
     59a:	|  |  |  |  |  |      addq.l #1,d1
     59c:	|  |  |  |  |  |      move.l d1,24(sp)
     5a0:	|  |  |  |  |  |      movea.l 4(sp),a0
     5a4:	|  |  |  |  |  |      adda.l d0,a0
     5a6:	|  |  |  |  |  |      move.b #67,(a0)
     5aa:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>
				case '*':	newName[i++] = '_';		newName[i++] = 'A';		break;
     5ac:	|  |  |  |  |  |      move.l 24(sp),d0
     5b0:	|  |  |  |  |  |      move.l d0,d1
     5b2:	|  |  |  |  |  |      addq.l #1,d1
     5b4:	|  |  |  |  |  |      move.l d1,24(sp)
     5b8:	|  |  |  |  |  |      movea.l 4(sp),a0
     5bc:	|  |  |  |  |  |      adda.l d0,a0
     5be:	|  |  |  |  |  |      move.b #95,(a0)
     5c2:	|  |  |  |  |  |      move.l 24(sp),d0
     5c6:	|  |  |  |  |  |      move.l d0,d1
     5c8:	|  |  |  |  |  |      addq.l #1,d1
     5ca:	|  |  |  |  |  |      move.l d1,24(sp)
     5ce:	|  |  |  |  |  |      movea.l 4(sp),a0
     5d2:	|  |  |  |  |  |      adda.l d0,a0
     5d4:	|  |  |  |  |  |      move.b #65,(a0)
     5d8:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>
				case '?':	newName[i++] = '_';		newName[i++] = 'Q';		break;
     5da:	|  |  |  |  |  |      move.l 24(sp),d0
     5de:	|  |  |  |  |  |      move.l d0,d1
     5e0:	|  |  |  |  |  |      addq.l #1,d1
     5e2:	|  |  |  |  |  |      move.l d1,24(sp)
     5e6:	|  |  |  |  |  |      movea.l 4(sp),a0
     5ea:	|  |  |  |  |  |      adda.l d0,a0
     5ec:	|  |  |  |  |  |      move.b #95,(a0)
     5f0:	|  |  |  |  |  |      move.l 24(sp),d0
     5f4:	|  |  |  |  |  |      move.l d0,d1
     5f6:	|  |  |  |  |  |      addq.l #1,d1
     5f8:	|  |  |  |  |  |      move.l d1,24(sp)
     5fc:	|  |  |  |  |  |      movea.l 4(sp),a0
     600:	|  |  |  |  |  |      adda.l d0,a0
     602:	|  |  |  |  |  |      move.b #81,(a0)
     606:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>

				default:	newName[i++] = *nameIn;							break;
     608:	|  |  |  |  '--|----> move.l 24(sp),d0
     60c:	|  |  |  |     |      move.l d0,d1
     60e:	|  |  |  |     |      addq.l #1,d1
     610:	|  |  |  |     |      move.l d1,24(sp)
     614:	|  |  |  |     |      movea.l 4(sp),a0
     618:	|  |  |  |     |      adda.l d0,a0
     61a:	|  |  |  |     |      movea.l 32(sp),a1
     61e:	|  |  |  |     |      move.b (a1),d0
     620:	|  |  |  |     |      move.b d0,(a0)
     622:	|  |  |  |     |      nop
			}
			newName[i] = 0;
     624:	|  |  |  |     '----> move.l 24(sp),d0
     628:	|  |  |  |            movea.l 4(sp),a0
     62c:	|  |  |  |            adda.l d0,a0
     62e:	|  |  |  |            clr.b (a0)
			nameIn ++;
     630:	|  |  |  |            addq.l #1,32(sp)
		while (*nameIn) {
     634:	|  |  |  '----------> movea.l 32(sp),a0
     638:	|  |  |               move.b (a0),d0
     63a:	|  |  '-------------- bne.w 372 <encodeFilename+0x74>
		}
		return newName;
     63e:	|  |                  move.l 4(sp),d0
     642:	+--|----------------- bra.s 688 <encodeFilename+0x38a>
	} else {
		int a;
		for (a = 0; nameIn[a]; a ++) {
     644:	|  '----------------> clr.l 20(sp)
     648:	|              ,----- bra.s 66e <encodeFilename+0x370>
			if (nameIn[a] == '\\') nameIn[a] ='/';
     64a:	|           ,--|----> move.l 20(sp),d0
     64e:	|           |  |      movea.l 32(sp),a0
     652:	|           |  |      adda.l d0,a0
     654:	|           |  |      move.b (a0),d0
     656:	|           |  |      cmpi.b #92,d0
     65a:	|           |  |  ,-- bne.s 66a <encodeFilename+0x36c>
     65c:	|           |  |  |   move.l 20(sp),d0
     660:	|           |  |  |   movea.l 32(sp),a0
     664:	|           |  |  |   adda.l d0,a0
     666:	|           |  |  |   move.b #47,(a0)
		for (a = 0; nameIn[a]; a ++) {
     66a:	|           |  |  '-> addq.l #1,20(sp)
     66e:	|           |  '----> move.l 20(sp),d0
     672:	|           |         movea.l 32(sp),a0
     676:	|           |         adda.l d0,a0
     678:	|           |         move.b (a0),d0
     67a:	|           '-------- bne.s 64a <encodeFilename+0x34c>
		}

		return copyString (nameIn);
     67c:	|                     move.l 32(sp),-(sp)
     680:	|                     jsr b8 <copyString>
     686:	|                     addq.l #4,sp
	}
}
     688:	'-------------------> movea.l (sp)+,a6
     68a:	                      lea 24(sp),sp
     68e:	                      rts

00000690 <FLOATSwap>:

FLOAT FLOATSwap( FLOAT f )
{
     690:	subq.l #8,sp
	{
		FLOAT f;
		unsigned char b[4];
	} dat1, dat2;

	dat1.f = f;
     692:	move.l 12(sp),4(sp)
	dat2.b[0] = dat1.b[3];
     698:	move.b 7(sp),d0
     69c:	move.b d0,(sp)
	dat2.b[1] = dat1.b[2];
     69e:	move.b 6(sp),d0
     6a2:	move.b d0,1(sp)
	dat2.b[2] = dat1.b[1];
     6a6:	move.b 5(sp),d0
     6aa:	move.b d0,2(sp)
	dat2.b[3] = dat1.b[0];
     6ae:	move.b 4(sp),d0
     6b2:	move.b d0,3(sp)
	return dat2.f;
     6b6:	move.l (sp),d0
}
     6b8:	addq.l #8,sp
     6ba:	rts

000006bc <get2bytes>:

int get2bytes (BPTR fp) {
     6bc:	lea -24(sp),sp
     6c0:	move.l a6,-(sp)
	int f1, f2;

	f1 = FGetC (fp);
     6c2:	move.l 32(sp),24(sp)
     6c8:	move.l 1cfbe <DOSBase>,d0
     6ce:	movea.l d0,a6
     6d0:	move.l 24(sp),d1
     6d4:	jsr -306(a6)
     6d8:	move.l d0,20(sp)
     6dc:	move.l 20(sp),d0
     6e0:	move.l d0,16(sp)
	f2 = FGetC (fp);
     6e4:	move.l 32(sp),12(sp)
     6ea:	move.l 1cfbe <DOSBase>,d0
     6f0:	movea.l d0,a6
     6f2:	move.l 12(sp),d1
     6f6:	jsr -306(a6)
     6fa:	move.l d0,8(sp)
     6fe:	move.l 8(sp),d0
     702:	move.l d0,4(sp)

	return (f1 * 256 + f2);
     706:	move.l 16(sp),d0
     70a:	lsl.l #8,d0
     70c:	add.l 4(sp),d0
}
     710:	movea.l (sp)+,a6
     712:	lea 24(sp),sp
     716:	rts

00000718 <get4bytes>:

ULONG get4bytes (BPTR fp) {
     718:	lea -52(sp),sp
     71c:	move.l a6,-(sp)
	int f1, f2, f3, f4;

	f1 = FGetC (fp);
     71e:	move.l 60(sp),52(sp)
     724:	move.l 1cfbe <DOSBase>,d0
     72a:	movea.l d0,a6
     72c:	move.l 52(sp),d1
     730:	jsr -306(a6)
     734:	move.l d0,48(sp)
     738:	move.l 48(sp),d0
     73c:	move.l d0,44(sp)
	f2 = FGetC (fp);
     740:	move.l 60(sp),40(sp)
     746:	move.l 1cfbe <DOSBase>,d0
     74c:	movea.l d0,a6
     74e:	move.l 40(sp),d1
     752:	jsr -306(a6)
     756:	move.l d0,36(sp)
     75a:	move.l 36(sp),d0
     75e:	move.l d0,32(sp)
	f3 = FGetC (fp);
     762:	move.l 60(sp),28(sp)
     768:	move.l 1cfbe <DOSBase>,d0
     76e:	movea.l d0,a6
     770:	move.l 28(sp),d1
     774:	jsr -306(a6)
     778:	move.l d0,24(sp)
     77c:	move.l 24(sp),d0
     780:	move.l d0,20(sp)
	f4 = FGetC (fp);
     784:	move.l 60(sp),16(sp)
     78a:	move.l 1cfbe <DOSBase>,d0
     790:	movea.l d0,a6
     792:	move.l 16(sp),d1
     796:	jsr -306(a6)
     79a:	move.l d0,12(sp)
     79e:	move.l 12(sp),d0
     7a2:	move.l d0,8(sp)

	ULONG x = f1 + f2*256 + f3*256*256 + f4*256*256*256;
     7a6:	move.l 32(sp),d0
     7aa:	lsl.l #8,d0
     7ac:	move.l d0,d1
     7ae:	add.l 44(sp),d1
     7b2:	move.l 20(sp),d0
     7b6:	swap d0
     7b8:	clr.w d0
     7ba:	add.l d0,d1
     7bc:	move.l 8(sp),d0
     7c0:	lsl.w #8,d0
     7c2:	swap d0
     7c4:	clr.w d0
     7c6:	add.l d1,d0
     7c8:	move.l d0,4(sp)

	return x;
     7cc:	move.l 4(sp),d0
}
     7d0:	movea.l (sp)+,a6
     7d2:	lea 52(sp),sp
     7d6:	rts

000007d8 <getFloat>:

FLOAT getFloat (BPTR fp) {
     7d8:	    lea -28(sp),sp
     7dc:	    movem.l d2-d4/a6,-(sp)
	FLOAT f;
	LONG blocks_read = FRead( fp, &f, sizeof (FLOAT), 1 ); 
     7e0:	    move.l 48(sp),40(sp)
     7e6:	    lea 44(sp),a0
     7ea:	    lea -28(a0),a0
     7ee:	    move.l a0,36(sp)
     7f2:	    moveq #4,d0
     7f4:	    move.l d0,32(sp)
     7f8:	    moveq #1,d0
     7fa:	    move.l d0,28(sp)
     7fe:	    move.l 1cfbe <DOSBase>,d0
     804:	    movea.l d0,a6
     806:	    move.l 40(sp),d1
     80a:	    move.l 36(sp),d2
     80e:	    move.l 32(sp),d3
     812:	    move.l 28(sp),d4
     816:	    jsr -324(a6)
     81a:	    move.l d0,24(sp)
     81e:	    move.l 24(sp),d0
     822:	    move.l d0,20(sp)
	if (blocks_read != 1) {
     826:	    moveq #1,d0
     828:	    cmp.l 20(sp),d0
     82c:	,-- beq.s 83c <getFloat+0x64>
		KPrintF("Reading error in getFloat.\n");
     82e:	|   pea 18278 <PutChar+0x2e>
     834:	|   jsr 177a8 <KPrintF>
     83a:	|   addq.l #4,sp
	}
	return FLOATSwap(f);
     83c:	'-> move.l 16(sp),d0
     840:	    move.l d0,-(sp)
     842:	    jsr 690 <FLOATSwap>
     848:	    addq.l #4,sp
	return f;
}
     84a:	    movem.l (sp)+,d2-d4/a6
     84e:	    lea 28(sp),sp
     852:	    rts

00000854 <getSigned>:

short getSigned (BPTR fp) {
     854:	    lea -24(sp),sp
     858:	    movem.l d2-d3/a6,-(sp)
	short f;
	LONG bytes_read = Read(fp, &f, sizeof(short));
     85c:	    move.l 40(sp),32(sp)
     862:	    lea 36(sp),a0
     866:	    lea -22(a0),a0
     86a:	    move.l a0,28(sp)
     86e:	    moveq #2,d0
     870:	    move.l d0,24(sp)
     874:	    move.l 1cfbe <DOSBase>,d0
     87a:	    movea.l d0,a6
     87c:	    move.l 32(sp),d1
     880:	    move.l 28(sp),d2
     884:	    move.l 24(sp),d3
     888:	    jsr -42(a6)
     88c:	    move.l d0,20(sp)
     890:	    move.l 20(sp),d0
     894:	    move.l d0,16(sp)
	if (bytes_read != sizeof (short)) {
     898:	    moveq #2,d0
     89a:	    cmp.l 16(sp),d0
     89e:	,-- beq.s 8ae <getSigned+0x5a>
		KPrintF("getSigned: Reading error in getSigned.\n");
     8a0:	|   pea 18294 <PutChar+0x4a>
     8a6:	|   jsr 177a8 <KPrintF>
     8ac:	|   addq.l #4,sp
	}
	f = shortSwap(f);
     8ae:	'-> move.w 14(sp),d0
     8b2:	    movea.w d0,a0
     8b4:	    move.l a0,-(sp)
     8b6:	    jsr baa <shortSwap>
     8bc:	    addq.l #4,sp
     8be:	    move.w d0,14(sp)
	return f;
     8c2:	    move.w 14(sp),d0
}
     8c6:	    movem.l (sp)+,d2-d3/a6
     8ca:	    lea 24(sp),sp
     8ce:	    rts

000008d0 <put2bytes>:

void put2bytes (int numtoput, BPTR fp) {
     8d0:	    lea -24(sp),sp
     8d4:	    move.l a6,-(sp)
     8d6:	    move.l d2,-(sp)
	FPutC( fp, (char) (numtoput / 256));
     8d8:	    move.l 40(sp),28(sp)
     8de:	    move.l 36(sp),d0
     8e2:	,-- bpl.s 8ea <put2bytes+0x1a>
     8e4:	|   addi.l #255,d0
     8ea:	'-> asr.l #8,d0
     8ec:	    move.l d0,d0
     8ee:	    ext.w d0
     8f0:	    movea.w d0,a0
     8f2:	    move.l a0,24(sp)
     8f6:	    move.l 1cfbe <DOSBase>,d0
     8fc:	    movea.l d0,a6
     8fe:	    move.l 28(sp),d1
     902:	    move.l 24(sp),d2
     906:	    jsr -312(a6)
     90a:	    move.l d0,20(sp)
	FPutC( fp, (char) (numtoput % 256));
     90e:	    move.l 40(sp),16(sp)
     914:	    move.l 36(sp),d0
     918:	    andi.l #-2147483393,d0
     91e:	,-- bpl.s 92a <put2bytes+0x5a>
     920:	|   subq.l #1,d0
     922:	|   moveq #-1,d1
     924:	|   not.b d1
     926:	|   or.l d1,d0
     928:	|   addq.l #1,d0
     92a:	'-> move.l d0,d0
     92c:	    ext.w d0
     92e:	    movea.w d0,a0
     930:	    move.l a0,12(sp)
     934:	    move.l 1cfbe <DOSBase>,d0
     93a:	    movea.l d0,a6
     93c:	    move.l 16(sp),d1
     940:	    move.l 12(sp),d2
     944:	    jsr -312(a6)
     948:	    move.l d0,8(sp)
}
     94c:	    nop
     94e:	    move.l (sp)+,d2
     950:	    movea.l (sp)+,a6
     952:	    lea 24(sp),sp
     956:	    rts

00000958 <put4bytes>:

void put4bytes (ULONG i, BPTR fp) {
     958:	lea -52(sp),sp
     95c:	move.l a6,-(sp)
     95e:	move.l d2,-(sp)
	//	fwrite (&i, sizeof (long int), 1, fp);
	unsigned char f1, f2, f3, f4;

	f4 = i / (256*256*256);
     960:	move.l 64(sp),d0
     964:	clr.w d0
     966:	swap d0
     968:	lsr.w #8,d0
     96a:	move.b d0,59(sp)
	i = i % (256*256*256);
     96e:	andi.l #16777215,64(sp)
	f3 = i / (256*256);
     976:	move.l 64(sp),d0
     97a:	clr.w d0
     97c:	swap d0
     97e:	move.b d0,58(sp)
	i = i % (256*256);
     982:	andi.l #65535,64(sp)
	f2 = i / 256;
     98a:	move.l 64(sp),d0
     98e:	lsr.l #8,d0
     990:	move.b d0,57(sp)
	f1 = i % 256;
     994:	move.b 67(sp),56(sp)

	FPutC (fp,f1);
     99a:	move.l 68(sp),52(sp)
     9a0:	moveq #0,d0
     9a2:	move.b 56(sp),d0
     9a6:	move.l d0,48(sp)
     9aa:	move.l 1cfbe <DOSBase>,d0
     9b0:	movea.l d0,a6
     9b2:	move.l 52(sp),d1
     9b6:	move.l 48(sp),d2
     9ba:	jsr -312(a6)
     9be:	move.l d0,44(sp)
	FPutC (fp,f2);
     9c2:	move.l 68(sp),40(sp)
     9c8:	moveq #0,d0
     9ca:	move.b 57(sp),d0
     9ce:	move.l d0,36(sp)
     9d2:	move.l 1cfbe <DOSBase>,d0
     9d8:	movea.l d0,a6
     9da:	move.l 40(sp),d1
     9de:	move.l 36(sp),d2
     9e2:	jsr -312(a6)
     9e6:	move.l d0,32(sp)
	FPutC (fp,f3);
     9ea:	move.l 68(sp),28(sp)
     9f0:	moveq #0,d0
     9f2:	move.b 58(sp),d0
     9f6:	move.l d0,24(sp)
     9fa:	move.l 1cfbe <DOSBase>,d0
     a00:	movea.l d0,a6
     a02:	move.l 28(sp),d1
     a06:	move.l 24(sp),d2
     a0a:	jsr -312(a6)
     a0e:	move.l d0,20(sp)
	FPutC (fp,f4);
     a12:	move.l 68(sp),16(sp)
     a18:	moveq #0,d0
     a1a:	move.b 59(sp),d0
     a1e:	move.l d0,12(sp)
     a22:	move.l 1cfbe <DOSBase>,d0
     a28:	movea.l d0,a6
     a2a:	move.l 16(sp),d1
     a2e:	move.l 12(sp),d2
     a32:	jsr -312(a6)
     a36:	move.l d0,8(sp)
}
     a3a:	nop
     a3c:	move.l (sp)+,d2
     a3e:	movea.l (sp)+,a6
     a40:	lea 52(sp),sp
     a44:	rts

00000a46 <putFloat>:

void putFloat (FLOAT f, BPTR fp) {
     a46:	lea -16(sp),sp
     a4a:	movem.l d2-d3/a6,-(sp)
	f = FLOATSwap(f);
     a4e:	move.l 32(sp),d0
     a52:	move.l d0,-(sp)
     a54:	jsr 690 <FLOATSwap>
     a5a:	addq.l #4,sp
     a5c:	move.l d0,32(sp)
	Write( fp, &f, sizeof (FLOAT));
     a60:	move.l 36(sp),24(sp)
     a66:	moveq #32,d0
     a68:	add.l sp,d0
     a6a:	move.l d0,20(sp)
     a6e:	moveq #4,d0
     a70:	move.l d0,16(sp)
     a74:	move.l 1cfbe <DOSBase>,d0
     a7a:	movea.l d0,a6
     a7c:	move.l 24(sp),d1
     a80:	move.l 20(sp),d2
     a84:	move.l 16(sp),d3
     a88:	jsr -48(a6)
     a8c:	move.l d0,12(sp)
}
     a90:	nop
     a92:	movem.l (sp)+,d2-d3/a6
     a96:	lea 16(sp),sp
     a9a:	rts

00000a9c <putSigned>:

void putSigned (short f, BPTR fp) {
     a9c:	lea -20(sp),sp
     aa0:	movem.l d2-d3/a6,-(sp)
     aa4:	move.l 36(sp),d0
     aa8:	move.w d0,d0
     aaa:	move.w d0,14(sp)
	f = shortSwap(f);
     aae:	move.w 14(sp),d0
     ab2:	movea.w d0,a0
     ab4:	move.l a0,-(sp)
     ab6:	jsr baa <shortSwap>
     abc:	addq.l #4,sp
     abe:	move.w d0,14(sp)
	Write(fp, &f, sizeof(short));
     ac2:	move.l 40(sp),28(sp)
     ac8:	lea 32(sp),a0
     acc:	lea -18(a0),a0
     ad0:	move.l a0,24(sp)
     ad4:	moveq #2,d0
     ad6:	move.l d0,20(sp)
     ada:	move.l 1cfbe <DOSBase>,d0
     ae0:	movea.l d0,a6
     ae2:	move.l 28(sp),d1
     ae6:	move.l 24(sp),d2
     aea:	move.l 20(sp),d3
     aee:	jsr -48(a6)
     af2:	move.l d0,16(sp)
}
     af6:	nop
     af8:	movem.l (sp)+,d2-d3/a6
     afc:	lea 20(sp),sp
     b00:	rts

00000b02 <readString>:

char * readString (BPTR fp) {
     b02:	          lea -32(sp),sp
     b06:	          move.l a6,-(sp)

	int a, len = get2bytes (fp);
     b08:	          move.l 40(sp),-(sp)
     b0c:	          jsr 6bc <get2bytes>
     b12:	          addq.l #4,sp
     b14:	          move.l d0,28(sp)
	//debugOut ("MOREIO: readString - len %i\n", len);
	char * s = AllocVec(len+1,MEMF_ANY);
     b18:	          move.l 28(sp),d0
     b1c:	          addq.l #1,d0
     b1e:	          move.l d0,24(sp)
     b22:	          clr.l 20(sp)
     b26:	          move.l 1cfb6 <SysBase>,d0
     b2c:	          movea.l d0,a6
     b2e:	          move.l 24(sp),d0
     b32:	          move.l 20(sp),d1
     b36:	          jsr -684(a6)
     b3a:	          move.l d0,16(sp)
     b3e:	          move.l 16(sp),d0
     b42:	          move.l d0,12(sp)
	if(s == 0) return NULL;
     b46:	      ,-- bne.s b4c <readString+0x4a>
     b48:	      |   moveq #0,d0
     b4a:	,-----|-- bra.s ba2 <readString+0xa0>
	for (a = 0; a < len; a ++) {
     b4c:	|     '-> clr.l 32(sp)
     b50:	|     ,-- bra.s b88 <readString+0x86>
		s[a] = (char) (FGetC (fp) - 1);
     b52:	|  ,--|-> move.l 40(sp),8(sp)
     b58:	|  |  |   move.l 1cfbe <DOSBase>,d0
     b5e:	|  |  |   movea.l d0,a6
     b60:	|  |  |   move.l 8(sp),d1
     b64:	|  |  |   jsr -306(a6)
     b68:	|  |  |   move.l d0,4(sp)
     b6c:	|  |  |   move.l 4(sp),d0
     b70:	|  |  |   move.l d0,d0
     b72:	|  |  |   move.b d0,d1
     b74:	|  |  |   subq.b #1,d1
     b76:	|  |  |   move.l 32(sp),d0
     b7a:	|  |  |   movea.l 12(sp),a0
     b7e:	|  |  |   adda.l d0,a0
     b80:	|  |  |   move.b d1,d0
     b82:	|  |  |   move.b d0,(a0)
	for (a = 0; a < len; a ++) {
     b84:	|  |  |   addq.l #1,32(sp)
     b88:	|  |  '-> move.l 32(sp),d0
     b8c:	|  |      cmp.l 28(sp),d0
     b90:	|  '----- blt.s b52 <readString+0x50>
	}
	s[len] = 0;
     b92:	|         move.l 28(sp),d0
     b96:	|         movea.l 12(sp),a0
     b9a:	|         adda.l d0,a0
     b9c:	|         clr.b (a0)
	//debugOut ("MOREIO: readString: %s\n", s);
	return s;
     b9e:	|         move.l 12(sp),d0
}
     ba2:	'-------> movea.l (sp)+,a6
     ba4:	          lea 32(sp),sp
     ba8:	          rts

00000baa <shortSwap>:

short shortSwap( short s )
{
     baa:	subq.l #4,sp
     bac:	move.l 8(sp),d0
     bb0:	move.w d0,d0
     bb2:	move.w d0,(sp)
	unsigned char b1, b2;
	
	b1 = s & 255;
     bb4:	move.b 1(sp),3(sp)
	b2 = (s >> 8) & 255;
     bba:	move.w (sp),d0
     bbc:	asr.w #8,d0
     bbe:	move.b d0,2(sp)
	
	return (b1 << 8) + b2;
     bc2:	clr.w d0
     bc4:	move.b 3(sp),d0
     bc8:	move.w d0,d1
     bca:	lsl.w #8,d1
     bcc:	clr.w d0
     bce:	move.b 2(sp),d0
     bd2:	add.w d1,d0
}
     bd4:	addq.l #4,sp
     bd6:	rts

00000bd8 <writeString>:

void writeString (char * s, BPTR fp) {
     bd8:	       lea -20(sp),sp
     bdc:	       move.l a6,-(sp)
     bde:	       move.l d2,-(sp)
	int a, len = strlen (s);
     be0:	       move.l 32(sp),-(sp)
     be4:	       jsr 141b4 <strlen>
     bea:	       addq.l #4,sp
     bec:	       move.l d0,20(sp)
	put2bytes (len, fp);
     bf0:	       move.l 36(sp),-(sp)
     bf4:	       move.l 24(sp),-(sp)
     bf8:	       jsr 8d0 <put2bytes>
     bfe:	       addq.l #8,sp
	for (a = 0; a < len; a ++) {
     c00:	       clr.l 24(sp)
     c04:	   ,-- bra.s c40 <writeString+0x68>
		FPutC (fp,s[a] + 1);
     c06:	,--|-> move.l 36(sp),16(sp)
     c0c:	|  |   move.l 24(sp),d0
     c10:	|  |   movea.l 32(sp),a0
     c14:	|  |   adda.l d0,a0
     c16:	|  |   move.b (a0),d0
     c18:	|  |   ext.w d0
     c1a:	|  |   ext.l d0
     c1c:	|  |   move.l d0,d1
     c1e:	|  |   addq.l #1,d1
     c20:	|  |   move.l d1,12(sp)
     c24:	|  |   move.l 1cfbe <DOSBase>,d0
     c2a:	|  |   movea.l d0,a6
     c2c:	|  |   move.l 16(sp),d1
     c30:	|  |   move.l 12(sp),d2
     c34:	|  |   jsr -312(a6)
     c38:	|  |   move.l d0,8(sp)
	for (a = 0; a < len; a ++) {
     c3c:	|  |   addq.l #1,24(sp)
     c40:	|  '-> move.l 24(sp),d0
     c44:	|      cmp.l 20(sp),d0
     c48:	'----- blt.s c06 <writeString+0x2e>
	}
     c4a:	       nop
     c4c:	       nop
     c4e:	       move.l (sp)+,d2
     c50:	       movea.l (sp)+,a6
     c52:	       lea 20(sp),sp
     c56:	       rts

00000c58 <displayCursor>:
int mouseCursorFrameNum = 0;
int mouseCursorCountUp = 0;

extern struct inputType input;

void displayCursor () {
     c58:	    movem.l d2-d5,-(sp)

	
	if( mouseCursorAnim->theSprites)
     c5c:	    movea.l 1ceae <mouseCursorAnim>,a0
     c62:	    move.l (a0),d0
     c64:	,-- beq.w d64 <displayCursor+0x10c>
	{		
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
			input.mouseY + 44 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].yhot,
			mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].height,
			(UBYTE *) mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].data);
     c68:	|   movea.l 1ceae <mouseCursorAnim>,a0
     c6e:	|   movea.l (a0),a0
     c70:	|   movea.l 16(a0),a1
     c74:	|   movea.l 1ceae <mouseCursorAnim>,a0
     c7a:	|   movea.l 4(a0),a0
     c7e:	|   move.l (a0),d0
     c80:	|   move.l d0,d1
     c82:	|   move.l d1,d0
     c84:	|   lsl.l #3,d0
     c86:	|   sub.l d1,d0
     c88:	|   add.l d0,d0
     c8a:	|   add.l d0,d0
     c8c:	|   lea (0,a1,d0.l),a0
     c90:	|   movea.l 24(a0),a1
			mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].height,
     c94:	|   movea.l 1ceae <mouseCursorAnim>,a0
     c9a:	|   movea.l (a0),a0
     c9c:	|   move.l 16(a0),d2
     ca0:	|   movea.l 1ceae <mouseCursorAnim>,a0
     ca6:	|   movea.l 4(a0),a0
     caa:	|   move.l (a0),d0
     cac:	|   move.l d0,d1
     cae:	|   move.l d1,d0
     cb0:	|   lsl.l #3,d0
     cb2:	|   sub.l d1,d0
     cb4:	|   add.l d0,d0
     cb6:	|   add.l d0,d0
     cb8:	|   movea.l d2,a0
     cba:	|   adda.l d0,a0
     cbc:	|   move.l 4(a0),d0
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
     cc0:	|   move.l d0,d0
     cc2:	|   moveq #0,d3
     cc4:	|   move.w d0,d3
			input.mouseY + 44 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].yhot,
     cc6:	|   move.l 1cf72 <input+0xe>,d0
     ccc:	|   move.l d0,d2
     cce:	|   movea.l 1ceae <mouseCursorAnim>,a0
     cd4:	|   movea.l (a0),a0
     cd6:	|   move.l 16(a0),d4
     cda:	|   movea.l 1ceae <mouseCursorAnim>,a0
     ce0:	|   movea.l 4(a0),a0
     ce4:	|   move.l (a0),d0
     ce6:	|   move.l d0,d1
     ce8:	|   move.l d1,d0
     cea:	|   lsl.l #3,d0
     cec:	|   sub.l d1,d0
     cee:	|   add.l d0,d0
     cf0:	|   add.l d0,d0
     cf2:	|   movea.l d4,a0
     cf4:	|   adda.l d0,a0
     cf6:	|   move.l 12(a0),d0
     cfa:	|   move.l d0,d0
     cfc:	|   move.w d2,d1
     cfe:	|   sub.w d0,d1
     d00:	|   move.w d1,d0
     d02:	|   addi.w #44,d0
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
     d06:	|   moveq #0,d2
     d08:	|   move.w d0,d2
     d0a:	|   move.l 1cf6e <input+0xa>,d0
     d10:	|   move.l d0,d4
     d12:	|   movea.l 1ceae <mouseCursorAnim>,a0
     d18:	|   movea.l (a0),a0
     d1a:	|   move.l 16(a0),d5
     d1e:	|   movea.l 1ceae <mouseCursorAnim>,a0
     d24:	|   movea.l 4(a0),a0
     d28:	|   move.l (a0),d0
     d2a:	|   move.l d0,d1
     d2c:	|   move.l d1,d0
     d2e:	|   lsl.l #3,d0
     d30:	|   sub.l d1,d0
     d32:	|   add.l d0,d0
     d34:	|   add.l d0,d0
     d36:	|   movea.l d5,a0
     d38:	|   adda.l d0,a0
     d3a:	|   move.l 8(a0),d0
     d3e:	|   move.l d0,d0
     d40:	|   move.w d4,d1
     d42:	|   sub.w d0,d1
     d44:	|   move.w d1,d0
     d46:	|   addi.w #128,d0
     d4a:	|   move.w d0,d0
     d4c:	|   andi.l #65535,d0
     d52:	|   move.l a1,-(sp)
     d54:	|   move.l d3,-(sp)
     d56:	|   move.l d2,-(sp)
     d58:	|   move.l d0,-(sp)
     d5a:	|   jsr 12ac <CstDisplayCursor>
     d60:	|   lea 16(sp),sp
	}
}
     d64:	'-> nop
     d66:	    movem.l (sp)+,d2-d5
     d6a:	    rts

00000d6c <pickAnimCursor>:

void pickAnimCursor (struct personaAnimation * pp) {
	deleteAnim (mouseCursorAnim);
     d6c:	move.l 1ceae <mouseCursorAnim>,d0
     d72:	move.l d0,-(sp)
     d74:	jsr 9d4c <deleteAnim>
     d7a:	addq.l #4,sp
	mouseCursorAnim = pp;
     d7c:	move.l 4(sp),1ceae <mouseCursorAnim>
	mouseCursorFrameNum = 0;
     d84:	clr.l 1ceb2 <mouseCursorFrameNum>
	mouseCursorCountUp = 0;
     d8a:	clr.l 1ceb6 <mouseCursorCountUp>
}
     d90:	nop
     d92:	rts

00000d94 <pasteCursor>:

void pasteCursor (int x, int y, struct personaAnimation * c) {
     d94:	subq.l #8,sp

				//int fNumSign = myAnim -> frames[thisPerson -> frameNum].frameNum;
	
	struct sprite *spritetouse = &c->theSprites->bank.sprites[c->frames[0].frameNum];
     d96:	movea.l 20(sp),a0
     d9a:	movea.l (a0),a0
     d9c:	movea.l 16(a0),a0
     da0:	movea.l 20(sp),a1
     da4:	movea.l 4(a1),a1
     da8:	move.l (a1),d0
     daa:	move.l d0,d1
     dac:	move.l d1,d0
     dae:	lsl.l #3,d0
     db0:	sub.l d1,d0
     db2:	add.l d0,d0
     db4:	add.l d0,d0
     db6:	adda.l d0,a0
     db8:	move.l a0,4(sp)

	UWORD absx =  x - spritetouse->xhot;
     dbc:	move.l 12(sp),d0
     dc0:	movea.l 4(sp),a0
     dc4:	move.l 8(a0),d1
     dc8:	move.l d1,d1
     dca:	movea.w d0,a0
     dcc:	suba.w d1,a0
     dce:	move.w a0,2(sp)
	UWORD absy =  y - spritetouse->yhot;
     dd2:	move.l 16(sp),d0
     dd6:	movea.l 4(sp),a0
     dda:	move.l 12(a0),d1
     dde:	move.l d1,d1
     de0:	movea.w d0,a0
     de2:	suba.w d1,a0
     de4:	move.w a0,(sp)

	CstScaleSprite( spritetouse, (struct onScreenPerson *) NULL, absx, absy, BACKDROP);
     de6:	move.w (sp),d0
     de8:	movea.w d0,a1
     dea:	move.w 2(sp),d0
     dee:	movea.w d0,a0
     df0:	pea 2 <_start+0x2>
     df4:	move.l a1,-(sp)
     df6:	move.l a0,-(sp)
     df8:	clr.l -(sp)
     dfa:	move.l 20(sp),-(sp)
     dfe:	jsr 2f08 <CstScaleSprite>
     e04:	lea 20(sp),sp
     e08:	nop
     e0a:	addq.l #8,sp
     e0c:	rts

00000e0e <CstBlankScreen>:
    0x1900000, 0x1920000, 0x1940000, 0x1960000, 0x1980000, 0x19a0000, 0x19c0000, 0x19e0000,
    0x1a00000, 0x1a20000, 0x1a40000, 0x1a60000, 0x1a80000, 0x1aa0000, 0x1ac0000, 0x1ae0000,
    0x1b00000, 0x1b20000, 0x1b40000, 0x1b60000, 0x1b80000, 0x1ba0000, 0x1bc0000, 0x1be0000 
};

void CstBlankScreen( int x1, int y1, int x2, int y2) {
     e0e:	          lea -48(sp),sp
     e12:	          move.l a6,-(sp)

  KPrintF("CstBlankScreen: started\n");
     e14:	          pea 182bc <PutChar+0x72>
     e1a:	          jsr 177a8 <KPrintF>
     e20:	          addq.l #4,sp

  if( !CstBackDrop) {
     e22:	          move.l 1ceca <CstBackDrop>,d0
     e28:	      ,-- bne.s e3c <CstBlankScreen+0x2e>
    KPrintF("CstBlankScreen: Backdrop empty nothing to do\n");
     e2a:	      |   pea 182d5 <PutChar+0x8b>
     e30:	      |   jsr 177a8 <KPrintF>
     e36:	      |   addq.l #4,sp
    return;
     e38:	,-----|-- bra.w 10c2 <CstBlankScreen+0x2b4>
  }  

  CstPaletteLoaded = 0;
     e3c:	|     '-> clr.w 1cec4 <CstPaletteLoaded>

  volatile struct Custom *custom = (struct Custom*)0xdff000;
     e42:	|         move.l #14675968,40(sp)
  //custom->color[0] = 0xf00;


  WaitBlit();
     e4a:	|         move.l 1cfc2 <GfxBase>,d0
     e50:	|         movea.l d0,a6
     e52:	|         jsr -228(a6)

  UWORD width = (x2 - x1)/8;
     e56:	|         move.l 64(sp),d0
     e5a:	|         sub.l 56(sp),d0
     e5e:	|     ,-- bpl.s e62 <CstBlankScreen+0x54>
     e60:	|     |   addq.l #7,d0
     e62:	|     '-> asr.l #3,d0
     e64:	|         move.w d0,38(sp)
  UWORD height = (y2 - y1);
     e68:	|         move.l 68(sp),d0
     e6c:	|         move.l 60(sp),d1
     e70:	|         movea.w d0,a0
     e72:	|         suba.w d1,a0
     e74:	|         move.w a0,36(sp)

  //Both Buffers need to be done
  custom->bltafwm = 0xffff;
     e78:	|         movea.l 40(sp),a0
     e7c:	|         move.w #-1,68(a0)
  custom->bltalwm = 0xffff;
     e82:	|         movea.l 40(sp),a0
     e86:	|         move.w #-1,70(a0)
  custom->bltamod = 0;
     e8c:	|         movea.l 40(sp),a0
     e90:	|         move.w #0,100(a0)
  custom->bltbmod = 0;
     e96:	|         movea.l 40(sp),a0
     e9a:	|         move.w #0,98(a0)
  custom->bltcmod = 0;
     ea0:	|         movea.l 40(sp),a0
     ea4:	|         move.w #0,96(a0)
  custom->bltdmod = 40 - width;
     eaa:	|         moveq #40,d0
     eac:	|         sub.w 38(sp),d0
     eb0:	|         movea.l 40(sp),a0
     eb4:	|         move.w d0,102(a0)
  custom->bltcon1 = 0;
     eb8:	|         movea.l 40(sp),a0
     ebc:	|         move.w #0,66(a0)
  custom->bltcon0 = 0x0100;
     ec2:	|         movea.l 40(sp),a0
     ec6:	|         move.w #256,64(a0)
  ULONG bltdpt = (ULONG) CstBackDrop;
     ecc:	|         move.l 1ceca <CstBackDrop>,d0
     ed2:	|         move.l d0,48(sp)
  bltdpt += x1/8 + y1*40;
     ed6:	|         move.l 56(sp),d0
     eda:	|     ,-- bpl.s ede <CstBlankScreen+0xd0>
     edc:	|     |   addq.l #7,d0
     ede:	|     '-> asr.l #3,d0
     ee0:	|         movea.l d0,a0
     ee2:	|         move.l 60(sp),d1
     ee6:	|         move.l d1,d0
     ee8:	|         add.l d0,d0
     eea:	|         add.l d0,d0
     eec:	|         add.l d1,d0
     eee:	|         lsl.l #3,d0
     ef0:	|         add.l a0,d0
     ef2:	|         add.l d0,48(sp)

  UWORD bltsize = height*64+width/2;    
     ef6:	|         move.w 36(sp),d0
     efa:	|         move.w d0,d1
     efc:	|         lsl.w #6,d1
     efe:	|         move.w 38(sp),d0
     f02:	|         lsr.w #1,d0
     f04:	|         movea.w d1,a0
     f06:	|         adda.w d0,a0
     f08:	|         move.w a0,34(sp)
  UWORD blitsize = width*height;
     f0c:	|         move.w 38(sp),d0
     f10:	|         muls.w 36(sp),d0
     f14:	|         move.w d0,32(sp)

  KPrintF("CstBlankScreen: Starting Blits\n");
     f18:	|         pea 18303 <PutChar+0xb9>
     f1e:	|         jsr 177a8 <KPrintF>
     f24:	|         addq.l #4,sp

  for(int i2=0;i2<5;i2++)
     f26:	|         clr.l 44(sp)
     f2a:	|     ,-- bra.s f5a <CstBlankScreen+0x14c>
  {            
    custom->bltdpt = (APTR) bltdpt;
     f2c:	|  ,--|-> move.l 48(sp),d0
     f30:	|  |  |   movea.l 40(sp),a0
     f34:	|  |  |   move.l d0,84(a0)
    custom->bltsize = bltsize;            
     f38:	|  |  |   movea.l 40(sp),a0
     f3c:	|  |  |   move.w 34(sp),88(a0)
    WaitBlit();
     f42:	|  |  |   move.l 1cfc2 <GfxBase>,d0
     f48:	|  |  |   movea.l d0,a6
     f4a:	|  |  |   jsr -228(a6)
    bltdpt += 40*256;
     f4e:	|  |  |   addi.l #10240,48(sp)
  for(int i2=0;i2<5;i2++)
     f56:	|  |  |   addq.l #1,44(sp)
     f5a:	|  |  '-> moveq #4,d0
     f5c:	|  |      cmp.l 44(sp),d0
     f60:	|  '----- bge.s f2c <CstBlankScreen+0x11e>
  }

  KPrintF("CstBlankScreen: Finished Blits\n");
     f62:	|         pea 18323 <PutChar+0xd9>
     f68:	|         jsr 177a8 <KPrintF>
     f6e:	|         addq.l #4,sp

  struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
     f70:	|         move.l 1cee2 <CstCleanupQueueDrawBuffer>,28(sp)
  CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
     f78:	|         moveq #20,d0
     f7a:	|         move.l d0,24(sp)
     f7e:	|         clr.l 20(sp)
     f82:	|         move.l 1cfb6 <SysBase>,d0
     f88:	|         movea.l d0,a6
     f8a:	|         move.l 24(sp),d0
     f8e:	|         move.l 20(sp),d1
     f92:	|         jsr -684(a6)
     f96:	|         move.l d0,16(sp)
     f9a:	|         move.l 16(sp),d0
     f9e:	|         move.l d0,1cee2 <CstCleanupQueueDrawBuffer>
  CstCleanupQueueDrawBuffer->next = next;
     fa4:	|         movea.l 1cee2 <CstCleanupQueueDrawBuffer>,a0
     faa:	|         move.l 28(sp),16(a0)
  CstCleanupQueueDrawBuffer->x = x1;
     fb0:	|         movea.l 1cee2 <CstCleanupQueueDrawBuffer>,a0
     fb6:	|         move.l 56(sp),d0
     fba:	|         move.w d0,(a0)
  CstCleanupQueueDrawBuffer->y = y1;
     fbc:	|         movea.l 1cee2 <CstCleanupQueueDrawBuffer>,a0
     fc2:	|         move.l 60(sp),d0
     fc6:	|         move.w d0,2(a0)
  CstCleanupQueueDrawBuffer->person = NULL;
     fca:	|         movea.l 1cee2 <CstCleanupQueueDrawBuffer>,a0
     fd0:	|         clr.l 4(a0)
  CstCleanupQueueDrawBuffer->widthinwords = width/16;
     fd4:	|         movea.l 1cee2 <CstCleanupQueueDrawBuffer>,a0
     fda:	|         move.w 38(sp),d0
     fde:	|         lsr.w #4,d0
     fe0:	|         move.w d0,8(a0)
  CstCleanupQueueDrawBuffer->height = height;
     fe4:	|         movea.l 1cee2 <CstCleanupQueueDrawBuffer>,a0
     fea:	|         move.w 36(sp),10(a0)
  CstCleanupQueueDrawBuffer->startxinbytes = x1/8;;
     ff0:	|         move.l 56(sp),d0
     ff4:	|     ,-- bpl.s ff8 <CstBlankScreen+0x1ea>
     ff6:	|     |   addq.l #7,d0
     ff8:	|     '-> asr.l #3,d0
     ffa:	|         movea.l 1cee2 <CstCleanupQueueDrawBuffer>,a0
    1000:	|         move.l d0,d0
    1002:	|         move.w d0,12(a0)
  CstCleanupQueueDrawBuffer->starty = y1;
    1006:	|         movea.l 1cee2 <CstCleanupQueueDrawBuffer>,a0
    100c:	|         move.l 60(sp),d0
    1010:	|         move.w d0,14(a0)

  next = CstCleanupQueueViewBuffer;
    1014:	|         move.l 1cede <CstCleanupQueueViewBuffer>,28(sp)
  CstCleanupQueueViewBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    101c:	|         moveq #20,d0
    101e:	|         move.l d0,12(sp)
    1022:	|         clr.l 8(sp)
    1026:	|         move.l 1cfb6 <SysBase>,d0
    102c:	|         movea.l d0,a6
    102e:	|         move.l 12(sp),d0
    1032:	|         move.l 8(sp),d1
    1036:	|         jsr -684(a6)
    103a:	|         move.l d0,4(sp)
    103e:	|         move.l 4(sp),d0
    1042:	|         move.l d0,1cede <CstCleanupQueueViewBuffer>
  CstCleanupQueueViewBuffer->next = next;
    1048:	|         movea.l 1cede <CstCleanupQueueViewBuffer>,a0
    104e:	|         move.l 28(sp),16(a0)
  CstCleanupQueueViewBuffer->x = x1;
    1054:	|         movea.l 1cede <CstCleanupQueueViewBuffer>,a0
    105a:	|         move.l 56(sp),d0
    105e:	|         move.w d0,(a0)
  CstCleanupQueueViewBuffer->y = y1;
    1060:	|         movea.l 1cede <CstCleanupQueueViewBuffer>,a0
    1066:	|         move.l 60(sp),d0
    106a:	|         move.w d0,2(a0)
  CstCleanupQueueViewBuffer->person = NULL;
    106e:	|         movea.l 1cede <CstCleanupQueueViewBuffer>,a0
    1074:	|         clr.l 4(a0)
  CstCleanupQueueViewBuffer->widthinwords = width/16;
    1078:	|         movea.l 1cede <CstCleanupQueueViewBuffer>,a0
    107e:	|         move.w 38(sp),d0
    1082:	|         lsr.w #4,d0
    1084:	|         move.w d0,8(a0)
  CstCleanupQueueViewBuffer->height = height;
    1088:	|         movea.l 1cede <CstCleanupQueueViewBuffer>,a0
    108e:	|         move.w 36(sp),10(a0)
  CstCleanupQueueViewBuffer->startxinbytes = x1/8;
    1094:	|         move.l 56(sp),d0
    1098:	|     ,-- bpl.s 109c <CstBlankScreen+0x28e>
    109a:	|     |   addq.l #7,d0
    109c:	|     '-> asr.l #3,d0
    109e:	|         movea.l 1cede <CstCleanupQueueViewBuffer>,a0
    10a4:	|         move.l d0,d0
    10a6:	|         move.w d0,12(a0)
  CstCleanupQueueViewBuffer->starty = 0; 
    10aa:	|         movea.l 1cede <CstCleanupQueueViewBuffer>,a0
    10b0:	|         clr.w 14(a0)

  KPrintF("CstBlankScreen: end\n");
    10b4:	|         pea 18343 <PutChar+0xf9>
    10ba:	|         jsr 177a8 <KPrintF>
    10c0:	|         addq.l #4,sp

  //custom->color[0] = 0x000;	
}
    10c2:	'-------> movea.l (sp)+,a6
    10c4:	          lea 48(sp),sp
    10c8:	          rts

000010ca <CstCreateCopperlist>:

UWORD * CstCreateCopperlist( int width) {
    10ca:	       lea -52(sp),sp
    10ce:	       move.l a6,-(sp)
    10d0:	       move.l d2,-(sp)
  
  ULONG *retval = AllocMem(  CSTCOPSIZE, MEMF_CHIP);
    10d2:	       move.l #400,32(sp)
    10da:	       moveq #2,d0
    10dc:	       move.l d0,28(sp)
    10e0:	       move.l 1cfb6 <SysBase>,d0
    10e6:	       movea.l d0,a6
    10e8:	       move.l 32(sp),d0
    10ec:	       move.l 28(sp),d1
    10f0:	       jsr -198(a6)
    10f4:	       move.l d0,24(sp)
    10f8:	       move.l 24(sp),d0
    10fc:	       move.l d0,20(sp)
  
  if( retval == 0) {
    1100:	   ,-- bne.s 112a <CstCreateCopperlist+0x60>
    KPrintF("CstCreateCopperlist: Allocation of Ram for Copper failed.\n", 40);
    1102:	   |   pea 28 <_start+0x28>
    1106:	   |   pea 18358 <PutChar+0x10e>
    110c:	   |   jsr 177a8 <KPrintF>
    1112:	   |   addq.l #8,sp
    Exit(1);
    1114:	   |   moveq #1,d1
    1116:	   |   move.l d1,16(sp)
    111a:	   |   move.l 1cfbe <DOSBase>,d0
    1120:	   |   movea.l d0,a6
    1122:	   |   move.l 16(sp),d1
    1126:	   |   jsr -144(a6)
  }
  ULONG *cl = retval;
    112a:	   '-> move.l 20(sp),56(sp)
  CstClCursor = (UWORD *)cl;
    1130:	       move.l 56(sp),1ceee <CstClCursor>

  ULONG *clpartinstruction;
  clpartinstruction = CstClSprites;
    1138:	       move.l #116742,52(sp)
  for(int i=0; i<16;i++)
    1140:	       clr.l 48(sp)
    1144:	   ,-- bra.s 116a <CstCreateCopperlist+0xa0>
    *cl++ = *clpartinstruction++;
    1146:	,--|-> move.l 52(sp),d1
    114a:	|  |   move.l d1,d2
    114c:	|  |   addq.l #4,d2
    114e:	|  |   move.l d2,52(sp)
    1152:	|  |   move.l 56(sp),d0
    1156:	|  |   move.l d0,d2
    1158:	|  |   addq.l #4,d2
    115a:	|  |   move.l d2,56(sp)
    115e:	|  |   movea.l d1,a0
    1160:	|  |   move.l (a0),d1
    1162:	|  |   movea.l d0,a0
    1164:	|  |   move.l d1,(a0)
  for(int i=0; i<16;i++)
    1166:	|  |   addq.l #1,48(sp)
    116a:	|  '-> moveq #15,d0
    116c:	|      cmp.l 48(sp),d0
    1170:	'----- bge.s 1146 <CstCreateCopperlist+0x7c>

  clpartinstruction = CstClScreen;
    1172:	       move.l #116806,52(sp)

  for(int i=0; i<12;i++)
    117a:	       clr.l 44(sp)
    117e:	   ,-- bra.s 11a4 <CstCreateCopperlist+0xda>
    *cl++ = *clpartinstruction++;
    1180:	,--|-> move.l 52(sp),d1
    1184:	|  |   move.l d1,d2
    1186:	|  |   addq.l #4,d2
    1188:	|  |   move.l d2,52(sp)
    118c:	|  |   move.l 56(sp),d0
    1190:	|  |   move.l d0,d2
    1192:	|  |   addq.l #4,d2
    1194:	|  |   move.l d2,56(sp)
    1198:	|  |   movea.l d1,a0
    119a:	|  |   move.l (a0),d1
    119c:	|  |   movea.l d0,a0
    119e:	|  |   move.l d1,(a0)
  for(int i=0; i<12;i++)
    11a0:	|  |   addq.l #1,44(sp)
    11a4:	|  '-> moveq #11,d0
    11a6:	|      cmp.l 44(sp),d0
    11aa:	'----- bge.s 1180 <CstCreateCopperlist+0xb6>

  clpartinstruction = CstClBitplanes;
    11ac:	       move.l #116854,52(sp)
  for(int i=0; i<10;i++)
    11b4:	       clr.l 40(sp)
    11b8:	   ,-- bra.s 11de <CstCreateCopperlist+0x114>
    *cl++ = *clpartinstruction++;        
    11ba:	,--|-> move.l 52(sp),d1
    11be:	|  |   move.l d1,d2
    11c0:	|  |   addq.l #4,d2
    11c2:	|  |   move.l d2,52(sp)
    11c6:	|  |   move.l 56(sp),d0
    11ca:	|  |   move.l d0,d2
    11cc:	|  |   addq.l #4,d2
    11ce:	|  |   move.l d2,56(sp)
    11d2:	|  |   movea.l d1,a0
    11d4:	|  |   move.l (a0),d1
    11d6:	|  |   movea.l d0,a0
    11d8:	|  |   move.l d1,(a0)
  for(int i=0; i<10;i++)
    11da:	|  |   addq.l #1,40(sp)
    11de:	|  '-> moveq #9,d0
    11e0:	|      cmp.l 40(sp),d0
    11e4:	'----- bge.s 11ba <CstCreateCopperlist+0xf0>

  
  clpartinstruction = CstClColorTemplate;
    11e6:	       move.l #116894,52(sp)
  CstClColor = (UWORD *) cl;
    11ee:	       move.l 56(sp),1cee6 <CstClColor>
  for(int i=0; i<32;i++)
    11f6:	       clr.l 36(sp)
    11fa:	   ,-- bra.s 1220 <CstCreateCopperlist+0x156>
    *cl++ = *clpartinstruction++;        
    11fc:	,--|-> move.l 52(sp),d1
    1200:	|  |   move.l d1,d2
    1202:	|  |   addq.l #4,d2
    1204:	|  |   move.l d2,52(sp)
    1208:	|  |   move.l 56(sp),d0
    120c:	|  |   move.l d0,d2
    120e:	|  |   addq.l #4,d2
    1210:	|  |   move.l d2,56(sp)
    1214:	|  |   movea.l d1,a0
    1216:	|  |   move.l (a0),d1
    1218:	|  |   movea.l d0,a0
    121a:	|  |   move.l d1,(a0)
  for(int i=0; i<32;i++)
    121c:	|  |   addq.l #1,36(sp)
    1220:	|  '-> moveq #31,d0
    1222:	|      cmp.l 36(sp),d0
    1226:	'----- bge.s 11fc <CstCreateCopperlist+0x132>
 
  /* Screen is bigger than real screen? Setup BPLxMod accordingly*/
  if(width > 40) {
    1228:	       moveq #40,d1
    122a:	       cmp.l 64(sp),d1
    122e:	   ,-- bge.s 128c <CstCreateCopperlist+0x1c2>
    int tmp = width - 40;
    1230:	   |   moveq #-40,d2
    1232:	   |   add.l 64(sp),d2
    1236:	   |   move.l d2,12(sp)
    UWORD *cw = (UWORD *) cl; 
    123a:	   |   move.l 56(sp),8(sp)
    *cw++ = 0x108;
    1240:	   |   move.l 8(sp),d0
    1244:	   |   move.l d0,d1
    1246:	   |   addq.l #2,d1
    1248:	   |   move.l d1,8(sp)
    124c:	   |   movea.l d0,a0
    124e:	   |   move.w #264,(a0)
    *cw++ = tmp;
    1252:	   |   move.l 8(sp),d0
    1256:	   |   move.l d0,d1
    1258:	   |   addq.l #2,d1
    125a:	   |   move.l d1,8(sp)
    125e:	   |   move.l 12(sp),d1
    1262:	   |   movea.l d0,a0
    1264:	   |   move.w d1,(a0)
    *cw++ = 0x10a;
    1266:	   |   move.l 8(sp),d0
    126a:	   |   move.l d0,d1
    126c:	   |   addq.l #2,d1
    126e:	   |   move.l d1,8(sp)
    1272:	   |   movea.l d0,a0
    1274:	   |   move.w #266,(a0)
    *cw++ = tmp;     
    1278:	   |   move.l 8(sp),d0
    127c:	   |   move.l d0,d1
    127e:	   |   addq.l #2,d1
    1280:	   |   move.l d1,8(sp)
    1284:	   |   move.l 12(sp),d1
    1288:	   |   movea.l d0,a0
    128a:	   |   move.w d1,(a0)
  }

  *cl++ = 0xfffffffe;
    128c:	   '-> move.l 56(sp),d0
    1290:	       move.l d0,d1
    1292:	       addq.l #4,d1
    1294:	       move.l d1,56(sp)
    1298:	       moveq #-2,d2
    129a:	       movea.l d0,a0
    129c:	       move.l d2,(a0)
  return (UWORD *) retval;  
    129e:	       move.l 20(sp),d0
}
    12a2:	       move.l (sp)+,d2
    12a4:	       movea.l (sp)+,a6
    12a6:	       lea 52(sp),sp
    12aa:	       rts

000012ac <CstDisplayCursor>:



void CstDisplayCursor(UWORD x, UWORD y, UWORD height, UBYTE *spritedata)
{
    12ac:	lea -20(sp),sp
    12b0:	movea.l 24(sp),a0
    12b4:	move.l 28(sp),d1
    12b8:	move.l 32(sp),d0
    12bc:	movea.w a0,a0
    12be:	move.w a0,4(sp)
    12c2:	move.w d1,d1
    12c4:	move.w d1,2(sp)
    12c8:	move.w d0,d0
    12ca:	move.w d0,(sp)
  spritedata[0] = (UBYTE) (y & 0xff); //Low 8 Bits of y
    12cc:	move.w 2(sp),d0
    12d0:	movea.l 36(sp),a0
    12d4:	move.b d0,(a0)
  spritedata[1] = (UBYTE) (x >> 1); //High 8 Bits of x
    12d6:	move.w 4(sp),d0
    12da:	lsr.w #1,d0
    12dc:	movea.l 36(sp),a0
    12e0:	addq.l #1,a0
    12e2:	move.l d0,d0
    12e4:	move.b d0,(a0)
  spritedata[2] = (UBYTE) (y+height & 0xff); //Sprite Stop Low 8 Bits
    12e6:	move.w 2(sp),d1
    12ea:	move.w (sp),d0
    12ec:	movea.l 36(sp),a0
    12f0:	addq.l #2,a0
    12f2:	add.b d1,d0
    12f4:	move.b d0,(a0)

  UWORD lowbitx = x & 0x1;
    12f6:	move.w 4(sp),d0
    12fa:	andi.w #1,d0
    12fe:	move.w d0,18(sp)
  UWORD vstophighbit = ((y+height) & 0x100) >> 7;
    1302:	move.w 2(sp),d0
    1306:	add.w (sp),d0
    1308:	move.w d0,d0
    130a:	andi.l #65535,d0
    1310:	asr.l #7,d0
    1312:	move.l d0,d0
    1314:	move.w d0,d1
    1316:	andi.w #2,d1
    131a:	move.w d1,16(sp)
  UWORD vstarthighbit = (y & 0x100) >> 6;
    131e:	moveq #0,d0
    1320:	move.w 2(sp),d0
    1324:	asr.l #6,d0
    1326:	move.l d0,d0
    1328:	move.w d0,d1
    132a:	andi.w #4,d1
    132e:	move.w d1,14(sp)

  spritedata[3] = lowbitx + vstophighbit + vstarthighbit; //Low Bit X, Sprite Stop High Bit
    1332:	move.w 18(sp),d1
    1336:	move.w 16(sp),d0
    133a:	add.b d0,d1
    133c:	move.w 14(sp),d0
    1340:	movea.l 36(sp),a0
    1344:	addq.l #3,a0
    1346:	add.b d1,d0
    1348:	move.b d0,(a0)

  ULONG ptr = (ULONG) spritedata; 
    134a:	move.l 36(sp),10(sp)
  UWORD loptr = (UWORD) ptr & 0xffff;
    1350:	move.w 12(sp),8(sp)
  UWORD hiptr = ptr >> 16;
    1356:	move.l 10(sp),d0
    135a:	clr.w d0
    135c:	swap d0
    135e:	move.w d0,6(sp)

  CstClCursor[1] = hiptr;
    1362:	move.l 1ceee <CstClCursor>,d0
    1368:	movea.l d0,a0
    136a:	addq.l #2,a0
    136c:	move.w 6(sp),(a0)
  CstClCursor[3] = loptr;
    1370:	move.l 1ceee <CstClCursor>,d0
    1376:	movea.l d0,a0
    1378:	addq.l #6,a0
    137a:	move.w 8(sp),(a0)

}
    137e:	nop
    1380:	lea 20(sp),sp
    1384:	rts

00001386 <CstDrawZBuffer>:

__attribute__((optimize("Ofast"))) 
UBYTE *CstDrawZBuffer( struct sprite *sprite, struct zBufferData *zbuffer, WORD x, WORD y) 
{
    1386:	                                                             subq.l #8,sp
    1388:	                                                             movem.l d2-d7/a2-a6,-(sp)
    138c:	                                                             movea.l 56(sp),a3
    1390:	                                                             movea.l 60(sp),a2
    1394:	                                                             move.l 64(sp),d2
    1398:	                                                             move.l 68(sp),d7
    139c:	                                                             movea.w d2,a4
    139e:	                                                             move.w d7,50(sp)
  //In Case nothing needs to be done return sprite mask without changes
       
  WORD zbufferset = 0;

  #ifdef EMULATOR
    debug_register_bitmap(CstZBufferResult, "SpriteMask", sprite->width, sprite->height, 1, 0);
    13a2:	                                                             clr.l -(sp)
    13a4:	                                                             pea 1 <_start+0x1>
    13a8:	                                                             movea.w 6(a3),a0
    13ac:	                                                             move.l a0,-(sp)
    13ae:	                                                             movea.w 2(a3),a0
    13b2:	                                                             move.l a0,-(sp)
    13b4:	                                                             pea 18393 <PutChar+0x149>
    13ba:	                                                             move.l 1cef2 <CstZBufferResult>,-(sp)
    13c0:	                                                             lea 17890 <debug_register_bitmap>,a5
    13c6:	                                                             jsr (a5)
    debug_register_bitmap(CstZBufferWork, "tmbpuffer", sprite->width+16, sprite->height, 1, 0);
    13c8:	                                                             clr.l -(sp)
    13ca:	                                                             pea 1 <_start+0x1>
    13ce:	                                                             movea.w 6(a3),a0
    13d2:	                                                             move.l a0,-(sp)
    13d4:	                                                             move.w 2(a3),d0
    13d8:	                                                             addi.w #16,d0
    13dc:	                                                             movea.w d0,a0
    13de:	                                                             move.l a0,-(sp)
    13e0:	                                                             pea 1839e <PutChar+0x154>
    13e6:	                                                             move.l 1cef6 <CstZBufferWork>,-(sp)
    13ec:	                                                             jsr (a5)
  #endif    

  while(zbuffer) 
    13ee:	                                                             lea 48(sp),sp
    13f2:	                                                             cmpa.w #0,a2
    13f6:	,----------------------------------------------------------- beq.w 1892 <CstDrawZBuffer+0x50c>
  {              
    WORD spritex1oncanvas = x;
    UWORD spritex2oncanvas = spritex1oncanvas+sprite->width;
    13fa:	|                                                            move.w d2,48(sp)
    13fe:	|                                                            move.l (a3),d2
    WORD spritey1oncanvas = y;
    UWORD spritey2oncanvas = spritey1oncanvas + sprite->height;
    1400:	|                                                            movea.l 4(a3),a5
  WORD zbufferset = 0;
    1404:	|                                                            clr.w d0
    UWORD spritey2oncanvas = spritey1oncanvas + sprite->height;
    1406:	|                       ,----------------------------------> move.w a5,d3
    1408:	|                       |                                    add.w d7,d3
    BOOL zbufferfromleft = FALSE;
    BOOL zbufferfrombottom = FALSE;
    BOOL zbufferfromtop = FALSE;
  
    //Sprite will be drawn behind the zBuffer. We need to do something
    if(spritey2oncanvas < zbuffer->yz) 
    140a:	|                       |                                    andi.l #65535,d3
    1410:	|                       |                                    cmp.l 16(a2),d3
    1414:	|                       |  ,-------------------------------- bge.w 15ae <CstDrawZBuffer+0x228>
    WORD zbufferx1oncanvas = zbuffer->topx;
    1418:	|                       |  |                                 move.l 8(a2),d6
    WORD zbuffery1oncanvas = zbuffer->topy;
    141c:	|                       |  |                                 move.l 12(a2),d5
    WORD zbufferx2oncanvas = zbufferx1oncanvas + zbuffer->width;
    1420:	|                       |  |                                 move.w d6,d0
    1422:	|                       |  |                                 add.w 2(a2),d0
    WORD zbuffery2oncanvas = zbuffery1oncanvas + zbuffer->height;
    1426:	|                       |  |                                 move.w 6(a2),d4
    142a:	|                       |  |                                 add.w d5,d4
    {    
      zbufferset = 1;

      //sprite ------------x1+++++++++++++++++++x2-----------------*/
      /*zbuffer-------------------x1++++++++++?????????------------*/      
      if(spritex1oncanvas <= zbufferx1oncanvas && spritex2oncanvas > zbufferx1oncanvas)
    142c:	|                       |  |                                 cmp.w a4,d6
    142e:	|                    ,--|--|-------------------------------- bge.w 1726 <CstDrawZBuffer+0x3a0>
        zbufferfromright = TRUE;
      //sprite -------------------------x1++++??????-------*/
      /*zbuffer-------------------x1+++++++++++x2----------*/  
      else if(spritex1oncanvas > zbufferx1oncanvas && spritex1oncanvas < zbufferx2oncanvas)
    1432:	|                    |  |  |                                 cmp.w a4,d0
    1434:	|        ,-----------|--|--|-------------------------------- ble.w 15ac <CstDrawZBuffer+0x226>
        zbufferfromleft = TRUE;       

      //Overlap on X-Axis. Now Check y-axis
      if( zbufferfromleft || zbufferfromright)         
      {
        if(spritey1oncanvas <= zbuffery1oncanvas && spritey2oncanvas > zbuffery1oncanvas)
    1438:	|        |           |  |  |                                 move.w 50(sp),d0
    143c:	|        |           |  |  |                                 cmp.w d0,d5
    143e:	|        |     ,-----|--|--|-------------------------------- blt.w 1872 <CstDrawZBuffer+0x4ec>
    1442:	|        |     |     |  |  |                                 movea.w d5,a0
        else if(spritey1oncanvas > zbuffery1oncanvas && spritey1oncanvas < zbuffery2oncanvas)
          zbufferfromtop = TRUE;       
      }

      //Overlap on both Axis
      if( (zbufferfromright || zbufferfromleft) && (zbufferfrombottom || zbufferfromtop))
    1444:	|        |     |     |  |  |                                 cmpa.l d3,a0
    1446:	|        +-----|-----|--|--|-------------------------------- bge.w 15ac <CstDrawZBuffer+0x226>
        {    
          //Get Distance R
          /*sprite  ------------x1++++++++++?????????-------------------------*/    
          //zbuffer ------------------x1+++++++++++++++++++x2-----------------*/             
          
          xdiff = spritex1oncanvas - zbufferx1oncanvas;
    144a:	|        |     |     |  |  |                                 move.w 48(sp),d0
    144e:	|        |     |     |  |  |                                 sub.w d6,d0
          xdiffbyte = (xdiff / 16) * 2;          
          xdiffrest = (xdiff - xdiffbyte * 8);    
    1450:	|        |     |     |  |  |                                 move.w d0,d6
    1452:	|        |     |     |  |  |                                 andi.w #15,d6
    1456:	|        |     |     |  |  |                                 movea.w d6,a5

                         
          bytewidth = (sprite->width/16)*2;
    1458:	|        |     |     |  |  |                                 tst.l d2
    145a:	|        |  ,--|-----|--|--|-------------------------------- blt.w 15ce <CstDrawZBuffer+0x248>
    145e:	|        |  |  |  ,--|--|--|-------------------------------> asr.l #4,d2
    1460:	|        |  |  |  |  |  |  |                                 add.w d2,d2
          if(sprite->height == 60) {
            sprite->height = 60;
          }
          
          custom->bltafwm = 0xffff;
    1462:	|        |  |  |  |  |  |  |                                 move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb2e0a>
          custom->bltalwm = 0xffff;                      
    146a:	|        |  |  |  |  |  |  |                                 move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb2e0c>
          custom->bltcon1 = 0;          
    1472:	|        |  |  |  |  |  |  |                                 move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb2e08>

          if (xdiffrest) {
            bytewidth += 2; 
            //xdiffbyte += -2;            
            bltapt = (ULONG) zbuffer->bitplane + xdiffbyte;  
            WaitBlit();   
    147a:	|        |  |  |  |  |  |  |                                 lea 1cfc2 <GfxBase>,a0
    1480:	|        |  |  |  |  |  |  |                                 movea.l (a0),a6
          xdiffbyte = (xdiff / 16) * 2;          
    1482:	|        |  |  |  |  |  |  |                                 lsr.w #4,d0
    1484:	|        |  |  |  |  |  |  |                                 move.w d0,d6
    1486:	|        |  |  |  |  |  |  |                                 add.w d0,d6
            bltapt = (ULONG) zbuffer->bitplane + xdiffbyte;  
    1488:	|        |  |  |  |  |  |  |                                 andi.l #65535,d6
    148e:	|        |  |  |  |  |  |  |                                 add.l 20(a2),d6
          if (xdiffrest) {
    1492:	|        |  |  |  |  |  |  |                                 clr.w d0
    1494:	|        |  |  |  |  |  |  |                                 cmp.w a5,d0
    1496:	|        |  |  |  |  |  |  |           ,-------------------- beq.w 160e <CstDrawZBuffer+0x288>
            bytewidth += 2; 
    149a:	|        |  |  |  |  |  |  |           |     ,-------------> addq.w #2,d2
            WaitBlit();   
    149c:	|        |  |  |  |  |  |  |           |     |               jsr -228(a6)
            custom->bltdpt = CstZBufferWork;                
    14a0:	|        |  |  |  |  |  |  |           |     |               move.l 1cef6 <CstZBufferWork>,dff054 <gcc8_c_support.c.c60c1f2b+0xdb2e1a>
            custom->bltcon0 = (16 - xdiffrest) * 4096 + 0x9f0;              
    14aa:	|        |  |  |  |  |  |  |           |     |               move.w a5,d0
    14ac:	|        |  |  |  |  |  |  |           |     |               moveq #12,d1
    14ae:	|        |  |  |  |  |  |  |           |     |               lsl.w d1,d0
    14b0:	|        |  |  |  |  |  |  |           |     |               move.w #2544,d1
    14b4:	|        |  |  |  |  |  |  |           |     |               sub.w d0,d1
    14b6:	|        |  |  |  |  |  |  |           |     |               move.w d1,dff040 <gcc8_c_support.c.c60c1f2b+0xdb2e06>
            custom->bltamod = zbuffer->width/8 - bytewidth;
    14bc:	|        |  |  |  |  |  |  |           |     |               move.l (a2),d0
    14be:	|        |  |  |  |  |  |  |           |     |               move.l d0,d1
    14c0:	|  ,-----|--|--|--|--|--|--|-----------|-----|-------------- bmi.w 192c <CstDrawZBuffer+0x5a6>
    14c4:	|  |     |  |  |  |  |  |  |           |     |               asr.l #3,d1
    14c6:	|  |     |  |  |  |  |  |  |           |     |               sub.w d2,d1
    14c8:	|  |     |  |  |  |  |  |  |           |     |               move.w d1,dff064 <gcc8_c_support.c.c60c1f2b+0xdb2e2a>
            custom->bltdmod = 0;                                                            
    14ce:	|  |     |  |  |  |  |  |  |           |     |               move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb2e2c>
        } 
        
        //Get Distance R
        //zbuffer ------------x1+++++++++++++++++++x2-----------------*/
        /*sprite--------------RRRRRRRRx1++++++++++?????????------------*/    
        UWORD ydiff = spritey1oncanvas - zbuffery1oncanvas;
    14d6:	|  |  ,--|--|--|--|--|--|--|-----------|-----|-------------> move.w d7,d1
    14d8:	|  |  |  |  |  |  |  |  |  |           |     |               sub.w d5,d1

        UWORD height;
        if( zbuffery2oncanvas > spritey2oncanvas) 
    14da:	|  |  |  |  |  |  |  |  |  |           |     |               movea.w d4,a0
    14dc:	|  |  |  |  |  |  |  |  |  |           |     |               cmpa.l d3,a0
    14de:	|  |  |  |  |  |  |  |  |  |           |  ,--|-------------- ble.w 164e <CstDrawZBuffer+0x2c8>
          height = sprite->height;
    14e2:	|  |  |  |  |  |  |  |  |  |           |  |  |        ,----> move.l 4(a3),d4
        else
          height = zbuffery2oncanvas - spritey1oncanvas;

        custom->bltapt = (APTR) bltapt + ydiff*zbuffer->width/8; 
    14e6:	|  |  |  |  |  |  |  |  |  |           |  |  |        |      move.l d0,-(sp)
    14e8:	|  |  |  |  |  |  |  |  |  |           |  |  |        |      move.w d1,-(sp)
    14ea:	|  |  |  |  |  |  |  |  |  |           |  |  |        |      clr.w -(sp)
    14ec:	|  |  |  |  |  |  |  |  |  |           |  |  |        |      jsr 18134 <__mulsi3>
    14f2:	|  |  |  |  |  |  |  |  |  |           |  |  |        |      addq.l #8,sp
    14f4:	|  |  |  |  |  |  |  |  |  |           |  |  |        |      tst.l d0
    14f6:	|  |  |  |  |  |  |  |  |  |           |  |  |  ,-----|----- blt.w 1664 <CstDrawZBuffer+0x2de>
    14fa:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  ,-> asr.l #3,d0
    14fc:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   add.l d6,d0
    14fe:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.l d0,dff050 <gcc8_c_support.c.c60c1f2b+0xdb2e16>
        UWORD bltsize =  height*64+bytewidth/2;          
    1504:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   lsl.w #6,d4
    1506:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   lsr.w #1,d2
        custom->bltsize = height*64+bytewidth/2;
    1508:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   add.w d2,d4
    150a:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.w d4,dff058 <gcc8_c_support.c.c60c1f2b+0xdb2e1e>
       
        WaitBlit();
    1510:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   lea 1cfc2 <GfxBase>,a0
    1516:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   movea.l (a0),a6
    1518:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   jsr -228(a6)

        custom->bltafwm = 0xffff;
    151c:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb2e0a>
        custom->bltalwm = 0xffff;
    1524:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb2e0c>
        custom->bltamod = 2;
    152c:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.w #2,dff064 <gcc8_c_support.c.c60c1f2b+0xdb2e2a>
        custom->bltbmod = 0;
    1534:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.w #0,dff062 <gcc8_c_support.c.c60c1f2b+0xdb2e28>
        custom->bltdmod = 0;
    153c:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb2e2c>
        custom->bltcon0 = 0xd0c; //Copy A to D
    1544:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.w #3340,dff040 <gcc8_c_support.c.c60c1f2b+0xdb2e06>
        custom->bltcon1 = 0;        
    154c:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb2e08>

        custom->bltapt = (APTR) CstZBufferWork + 2;
    1554:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.l 1cef6 <CstZBufferWork>,d0
    155a:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   addq.l #2,d0
    155c:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.l d0,dff050 <gcc8_c_support.c.c60c1f2b+0xdb2e16>
        custom->bltbpt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    1562:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.l (a3),d2
    1564:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   movea.l 4(a3),a5
    1568:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.l d2,d0
    156a:	|  |  |  |  |  |  |  |  |  |     ,-----|--|--|--|-----|--|-- bmi.w 16ee <CstDrawZBuffer+0x368>
    156e:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  ,--|--|-> asr.l #3,d0
    1570:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   move.l a5,-(sp)
    1572:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   move.l d0,-(sp)
    1574:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   jsr 18134 <__mulsi3>
    157a:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   addq.l #8,sp
    157c:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   move.l d0,d1
    157e:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   add.l d0,d1
    1580:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   add.l d1,d1
    1582:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   add.l d0,d1
    1584:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   add.l 24(a3),d1
    1588:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   move.l d1,dff04c <gcc8_c_support.c.c60c1f2b+0xdb2e12>
        custom->bltdpt = (APTR) CstZBufferResult;
    158e:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   move.l 1cef2 <CstZBufferResult>,dff054 <gcc8_c_support.c.c60c1f2b+0xdb2e1a>
        custom->bltsize = (sprite->height<<6)+sprite->width/16;  
    1598:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   move.w a5,d1
    159a:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   lsl.w #6,d1
    159c:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   move.l d2,d0
    159e:	|  |  |  |  |  |  |  |  |  |  ,--|-----|--|--|--|--|--|--|-- bmi.w 16dc <CstDrawZBuffer+0x356>
    15a2:	|  |  |  |  |  |  |  |  |  |  |  |  ,--|--|--|--|--|--|--|-> asr.l #4,d0
    15a4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   add.w d1,d0
    15a6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb2e1e>
      zbufferset = 1;
    15ac:	|  |  |  >--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|-> moveq #1,d0

      }
    }
    zbuffer = zbuffer->nextPanel;
    15ae:	|  |  |  |  |  |  |  |  |  '--|--|--|--|--|--|--|--|--|--|-> movea.l 24(a2),a2
  while(zbuffer) 
    15b2:	|  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |   cmpa.w #0,a2
    15b6:	|  |  |  |  |  |  |  |  '-----|--|--|--|--|--|--|--|--|--|-- bne.w 1406 <CstDrawZBuffer+0x80>
  }
  
  if(zbufferset == 0)
    15ba:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   tst.w d0
    15bc:	+--|--|--|--|--|--|--|--------|--|--|--|--|--|--|--|--|--|-- beq.w 1892 <CstDrawZBuffer+0x50c>
    custom->bltdpt = (APTR) CstZBufferResult;
    custom->bltsize = (sprite->height<<6)+sprite->width/16;      

  }

  return CstZBufferResult;
    15c0:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l 1cef2 <CstZBufferResult>,d0

}
    15c6:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   movem.l (sp)+,d2-d7/a2-a6
    15ca:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   addq.l #8,sp
    15cc:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   rts
          bytewidth = (sprite->width/16)*2;
    15ce:	|  |  |  |  >--|--|--|--------|--|--|--|--|--|--|--|--|--|-> moveq #15,d1
    15d0:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.l d1,d2
    15d2:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   asr.l #4,d2
    15d4:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.w d2,d2
          custom->bltafwm = 0xffff;
    15d6:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb2e0a>
          custom->bltalwm = 0xffff;                      
    15de:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb2e0c>
          custom->bltcon1 = 0;          
    15e6:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb2e08>
            WaitBlit();   
    15ee:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   lea 1cfc2 <GfxBase>,a0
    15f4:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   movea.l (a0),a6
          xdiffbyte = (xdiff / 16) * 2;          
    15f6:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   lsr.w #4,d0
    15f8:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.w d0,d6
    15fa:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.w d0,d6
            bltapt = (ULONG) zbuffer->bitplane + xdiffbyte;  
    15fc:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   andi.l #65535,d6
    1602:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.l 20(a2),d6
          if (xdiffrest) {
    1606:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   clr.w d0
    1608:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   cmp.w a5,d0
    160a:	|  |  |  |  |  |  |  |        |  |  |  |  |  '--|--|--|--|-- bne.w 149a <CstDrawZBuffer+0x114>
            WaitBlit();         
    160e:	|  |  |  |  |  |  |  |        |  |  |  '--|-----|--|--|--|-> jsr -228(a6)
            custom->bltdpt = CstZBufferWork + 2;       
    1612:	|  |  |  |  |  |  |  |        |  |  |     |     |  |  |  |   move.l 1cef6 <CstZBufferWork>,d0
    1618:	|  |  |  |  |  |  |  |        |  |  |     |     |  |  |  |   addq.l #2,d0
    161a:	|  |  |  |  |  |  |  |        |  |  |     |     |  |  |  |   move.l d0,dff054 <gcc8_c_support.c.c60c1f2b+0xdb2e1a>
            custom->bltcon0 = 4096 + 0x9f0;              
    1620:	|  |  |  |  |  |  |  |        |  |  |     |     |  |  |  |   move.w #6640,dff040 <gcc8_c_support.c.c60c1f2b+0xdb2e06>
            custom->bltamod = zbuffer->width/8 - bytewidth;
    1628:	|  |  |  |  |  |  |  |        |  |  |     |     |  |  |  |   move.l (a2),d0
    162a:	|  |  |  |  |  |  |  |        |  |  |     |     |  |  |  |   move.l d0,d1
    162c:	|  |  |  |  |  |  |  |  ,-----|--|--|-----|-----|--|--|--|-- bmi.w 1944 <CstDrawZBuffer+0x5be>
    1630:	|  |  |  |  |  |  |  |  |     |  |  |     |     |  |  |  |   asr.l #3,d1
    1632:	|  |  |  |  |  |  |  |  |     |  |  |     |     |  |  |  |   sub.w d2,d1
    1634:	|  |  |  |  |  |  |  |  |     |  |  |     |     |  |  |  |   move.w d1,dff064 <gcc8_c_support.c.c60c1f2b+0xdb2e2a>
            custom->bltdmod = 2;                                                            
    163a:	|  |  |  |  |  |  |  |  |     |  |  |     |     |  |  |  |   move.w #2,dff066 <gcc8_c_support.c.c60c1f2b+0xdb2e2c>
        UWORD ydiff = spritey1oncanvas - zbuffery1oncanvas;
    1642:	|  |  |  |  |  |  |  |  |  ,--|--|--|-----|-----|--|--|--|-> move.w d7,d1
    1644:	|  |  |  |  |  |  |  |  |  |  |  |  |     |     |  |  |  |   sub.w d5,d1
        if( zbuffery2oncanvas > spritey2oncanvas) 
    1646:	|  |  |  |  |  |  |  |  |  |  |  |  |     |     |  |  |  |   movea.w d4,a0
    1648:	|  |  |  |  |  |  |  |  |  |  |  |  |     |     |  |  |  |   cmpa.l d3,a0
    164a:	|  |  |  |  |  |  |  |  |  |  |  |  |     |     |  |  '--|-- bgt.w 14e2 <CstDrawZBuffer+0x15c>
          height = zbuffery2oncanvas - spritey1oncanvas;
    164e:	|  |  |  |  |  |  |  |  |  |  |  |  |     '-----|--|-----|-> sub.w d7,d4
        custom->bltapt = (APTR) bltapt + ydiff*zbuffer->width/8; 
    1650:	|  |  |  |  |  |  |  |  |  |  |  |  |           |  |     |   move.l d0,-(sp)
    1652:	|  |  |  |  |  |  |  |  |  |  |  |  |           |  |     |   move.w d1,-(sp)
    1654:	|  |  |  |  |  |  |  |  |  |  |  |  |           |  |     |   clr.w -(sp)
    1656:	|  |  |  |  |  |  |  |  |  |  |  |  |           |  |     |   jsr 18134 <__mulsi3>
    165c:	|  |  |  |  |  |  |  |  |  |  |  |  |           |  |     |   addq.l #8,sp
    165e:	|  |  |  |  |  |  |  |  |  |  |  |  |           |  |     |   tst.l d0
    1660:	|  |  |  |  |  |  |  |  |  |  |  |  |           |  |     '-- bge.w 14fa <CstDrawZBuffer+0x174>
    1664:	|  |  |  |  |  |  |  |  |  |  |  |  |           '--|-------> addq.l #7,d0
    1666:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         asr.l #3,d0
    1668:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         add.l d6,d0
    166a:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.l d0,dff050 <gcc8_c_support.c.c60c1f2b+0xdb2e16>
        UWORD bltsize =  height*64+bytewidth/2;          
    1670:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         lsl.w #6,d4
    1672:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         lsr.w #1,d2
        custom->bltsize = height*64+bytewidth/2;
    1674:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         add.w d2,d4
    1676:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w d4,dff058 <gcc8_c_support.c.c60c1f2b+0xdb2e1e>
        WaitBlit();
    167c:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         lea 1cfc2 <GfxBase>,a0
    1682:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         movea.l (a0),a6
    1684:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         jsr -228(a6)
        custom->bltafwm = 0xffff;
    1688:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb2e0a>
        custom->bltalwm = 0xffff;
    1690:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb2e0c>
        custom->bltamod = 2;
    1698:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w #2,dff064 <gcc8_c_support.c.c60c1f2b+0xdb2e2a>
        custom->bltbmod = 0;
    16a0:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w #0,dff062 <gcc8_c_support.c.c60c1f2b+0xdb2e28>
        custom->bltdmod = 0;
    16a8:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb2e2c>
        custom->bltcon0 = 0xd0c; //Copy A to D
    16b0:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w #3340,dff040 <gcc8_c_support.c.c60c1f2b+0xdb2e06>
        custom->bltcon1 = 0;        
    16b8:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb2e08>
        custom->bltapt = (APTR) CstZBufferWork + 2;
    16c0:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.l 1cef6 <CstZBufferWork>,d0
    16c6:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         addq.l #2,d0
    16c8:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.l d0,dff050 <gcc8_c_support.c.c60c1f2b+0xdb2e16>
        custom->bltbpt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    16ce:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.l (a3),d2
    16d0:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         movea.l 4(a3),a5
    16d4:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.l d2,d0
    16d6:	|  |  |  |  |  |  |  |  |  |  |  |  |              '-------- bpl.w 156e <CstDrawZBuffer+0x1e8>
    16da:	|  |  |  |  |  |  |  |  |  |  |  +--|----------------------- bra.s 16ee <CstDrawZBuffer+0x368>
        custom->bltsize = (sprite->height<<6)+sprite->width/16;  
    16dc:	|  |  |  |  |  |  |  |  |  |  >--|--|----------------------> moveq #15,d0
    16de:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l d2,d0
    16e0:	|  |  |  |  |  |  |  |  |  |  |  |  |                        asr.l #4,d0
    16e2:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.w d1,d0
    16e4:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb2e1e>
    16ea:	|  |  |  +--|--|--|--|--|--|--|--|--|----------------------- bra.w 15ac <CstDrawZBuffer+0x226>
        custom->bltbpt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    16ee:	|  |  |  |  |  |  |  |  |  |  |  '--|----------------------> addq.l #7,d0
    16f0:	|  |  |  |  |  |  |  |  |  |  |     |                        asr.l #3,d0
    16f2:	|  |  |  |  |  |  |  |  |  |  |     |                        move.l a5,-(sp)
    16f4:	|  |  |  |  |  |  |  |  |  |  |     |                        move.l d0,-(sp)
    16f6:	|  |  |  |  |  |  |  |  |  |  |     |                        jsr 18134 <__mulsi3>
    16fc:	|  |  |  |  |  |  |  |  |  |  |     |                        addq.l #8,sp
    16fe:	|  |  |  |  |  |  |  |  |  |  |     |                        move.l d0,d1
    1700:	|  |  |  |  |  |  |  |  |  |  |     |                        add.l d0,d1
    1702:	|  |  |  |  |  |  |  |  |  |  |     |                        add.l d1,d1
    1704:	|  |  |  |  |  |  |  |  |  |  |     |                        add.l d0,d1
    1706:	|  |  |  |  |  |  |  |  |  |  |     |                        add.l 24(a3),d1
    170a:	|  |  |  |  |  |  |  |  |  |  |     |                        move.l d1,dff04c <gcc8_c_support.c.c60c1f2b+0xdb2e12>
        custom->bltdpt = (APTR) CstZBufferResult;
    1710:	|  |  |  |  |  |  |  |  |  |  |     |                        move.l 1cef2 <CstZBufferResult>,dff054 <gcc8_c_support.c.c60c1f2b+0xdb2e1a>
        custom->bltsize = (sprite->height<<6)+sprite->width/16;  
    171a:	|  |  |  |  |  |  |  |  |  |  |     |                        move.w a5,d1
    171c:	|  |  |  |  |  |  |  |  |  |  |     |                        lsl.w #6,d1
    171e:	|  |  |  |  |  |  |  |  |  |  |     |                        move.l d2,d0
    1720:	|  |  |  |  |  |  |  |  |  |  |     '----------------------- bpl.w 15a2 <CstDrawZBuffer+0x21c>
    1724:	|  |  |  |  |  |  |  |  |  |  '----------------------------- bra.s 16dc <CstDrawZBuffer+0x356>
    UWORD spritex2oncanvas = spritex1oncanvas+sprite->width;
    1726:	|  |  |  |  |  |  |  '--|--|-------------------------------> move.w 48(sp),d1
    172a:	|  |  |  |  |  |  |     |  |                                 add.w d2,d1
      if(spritex1oncanvas <= zbufferx1oncanvas && spritex2oncanvas > zbufferx1oncanvas)
    172c:	|  |  |  |  |  |  |     |  |                                 andi.l #65535,d1
    1732:	|  |  |  |  |  |  |     |  |                                 movea.l d1,a6
    1734:	|  |  |  |  |  |  |     |  |                                 movea.w d6,a1
    1736:	|  |  |  |  |  |  |     |  |                                 cmpa.l d1,a1
    1738:	|  |  |  +--|--|--|-----|--|-------------------------------- bge.w 15ac <CstDrawZBuffer+0x226>
        if(spritey1oncanvas <= zbuffery1oncanvas && spritey2oncanvas > zbuffery1oncanvas)
    173c:	|  |  |  |  |  |  |     |  |                                 move.w 50(sp),d1
    1740:	|  |  |  |  |  |  |     |  |                                 cmp.w d1,d5
    1742:	|  |  |  |  |  |  |     |  |           ,-------------------- bge.w 184e <CstDrawZBuffer+0x4c8>
      if( (zbufferfromright || zbufferfromleft) && (zbufferfrombottom || zbufferfromtop))
    1746:	|  |  |  |  |  |  |     |  |           |                     cmp.w 50(sp),d4
    174a:	|  |  |  +--|--|--|-----|--|-----------|-------------------- ble.w 15ac <CstDrawZBuffer+0x226>
          xdiff = zbufferx1oncanvas - spritex1oncanvas;
    174e:	|  |  |  |  |  |  |     |  |           |                     sub.w 48(sp),d6
          xdiffbyte = (xdiff / 16) * 2;          
    1752:	|  |  |  |  |  |  |     |  |           |                     move.w d6,d1
    1754:	|  |  |  |  |  |  |     |  |           |                     lsr.w #4,d1
    1756:	|  |  |  |  |  |  |     |  |           |                     movea.w d1,a5
          xdiffrest = (xdiff - xdiffbyte * 8);       
    1758:	|  |  |  |  |  |  |     |  |           |                     andi.w #15,d6
    175c:	|  |  |  |  |  |  |     |  |           |                     move.w d6,46(sp)
          bytewidth = (sprite->width/16)*2 + 2;
    1760:	|  |  |  |  |  |  |     |  |           |                     tst.l d2
    1762:	|  |  |  |  |  |  |     |  |        ,--|-------------------- blt.w 17ec <CstDrawZBuffer+0x466>
    1766:	|  |  |  |  |  |  |     |  |        |  |  ,----------------> asr.l #4,d2
    1768:	|  |  |  |  |  |  |     |  |        |  |  |                  addq.l #1,d2
    176a:	|  |  |  |  |  |  |     |  |        |  |  |                  add.w d2,d2
          if( zbufferx2oncanvas > spritex2oncanvas)    
    176c:	|  |  |  |  |  |  |     |  |        |  |  |                  movea.w d0,a0
    176e:	|  |  |  |  |  |  |     |  |        |  |  |                  cmpa.l a0,a6
    1770:	|  |  |  |  |  |  |     |  |        |  |  |  ,-------------- bge.w 17fe <CstDrawZBuffer+0x478>
            WaitBlit();  
    1774:	|  |  |  |  |  |  |     |  |        |  |  |  |  ,----------> lea 1cfc2 <GfxBase>,a0
    177a:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            movea.l (a0),a6
    177c:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            jsr -228(a6)
            custom->bltafwm = 0xffff;
    1780:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb2e0a>
            custom->bltalwm = 0xffff;          
    1788:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb2e0c>
            custom->bltdpt = CstZBufferWork;        
    1790:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            move.l 1cef6 <CstZBufferWork>,dff054 <gcc8_c_support.c.c60c1f2b+0xdb2e1a>
            custom->bltcon1 = 0;               
    179a:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb2e08>
              bltapt = (ULONG) zbuffer->bitplane - xdiffbyte;          
    17a2:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            movea.l 20(a2),a0
              custom->bltamod = zbuffer->width/8 - bytewidth;
    17a6:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            move.l (a2),d0
    17a8:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            move.l d0,d1
    17aa:	|  |  |  |  |  |  |     |  |        |  |  |  |  |     ,----- bmi.s 1816 <CstDrawZBuffer+0x490>
    17ac:	|  |  |  |  |  |  |     |  |        |  |  |  |  |     |      asr.l #3,d1
    17ae:	|  |  |  |  |  |  |     |  |        |  |  |  |  |     |      movea.w d1,a6
    17b0:	|  |  |  |  |  |  |     |  |        |  |  |  |  |     |      suba.w d2,a6
            if (xdiffrest) {
    17b2:	|  |  |  |  |  |  |     |  |        |  |  |  |  |     |      tst.w 46(sp)
    17b6:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  ,--|----- beq.s 1824 <CstDrawZBuffer+0x49e>
              custom->bltcon0 = xdiffrest * 4096 + 0x9f0;              
    17b8:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  ,-> move.w 46(sp),d6
    17bc:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   moveq #12,d1
    17be:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   lsl.w d1,d6
    17c0:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   addi.w #2544,d6
    17c4:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   move.w d6,dff040 <gcc8_c_support.c.c60c1f2b+0xdb2e06>
              custom->bltamod = zbuffer->width/8 - bytewidth;
    17ca:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   move.w a6,dff064 <gcc8_c_support.c.c60c1f2b+0xdb2e2a>
              custom->bltdmod = 0;                                                            
    17d0:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb2e2c>
              xdiffbyte += 2;                 
    17d8:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   move.w a5,d1
    17da:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   addq.w #1,d1
    17dc:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   add.w d1,d1
              bltapt = (ULONG) zbuffer->bitplane - xdiffbyte;          
    17de:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   andi.l #65535,d1
    17e4:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   move.l a0,d6
    17e6:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   sub.l d1,d6
    17e8:	|  |  +--|--|--|--|-----|--|--------|--|--|--|--|--|--|--|-- bra.w 14d6 <CstDrawZBuffer+0x150>
          bytewidth = (sprite->width/16)*2 + 2;
    17ec:	|  |  |  |  |  |  |     |  |        >--|--|--|--|--|--|--|-> moveq #15,d6
    17ee:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   add.l d6,d2
    17f0:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   asr.l #4,d2
    17f2:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   addq.l #1,d2
    17f4:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   add.w d2,d2
          if( zbufferx2oncanvas > spritex2oncanvas)    
    17f6:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   movea.w d0,a0
    17f8:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   cmpa.l a0,a6
    17fa:	|  |  |  |  |  |  |     |  |        |  |  |  |  '--|--|--|-- blt.w 1774 <CstDrawZBuffer+0x3ee>
              KPrintF("Cstdrawzbuffer: Current version only supports zbuffer size equal to screen size");
    17fe:	|  |  |  |  |  |  |     |  |        |  |  |  '-----|--|--|-> pea 183a8 <PutChar+0x15e>
    1804:	|  |  |  |  |  |  |     |  |        |  |  |        |  |  |   jsr 177a8 <KPrintF>
              return FALSE;
    180a:	|  |  |  |  |  |  |     |  |        |  |  |        |  |  |   addq.l #4,sp
    180c:	|  |  |  |  |  |  |     |  |        |  |  |        |  |  |   moveq #0,d0
}
    180e:	|  |  |  |  |  |  |     |  |        |  |  |        |  |  |   movem.l (sp)+,d2-d7/a2-a6
    1812:	|  |  |  |  |  |  |     |  |        |  |  |        |  |  |   addq.l #8,sp
    1814:	|  |  |  |  |  |  |     |  |        |  |  |        |  |  |   rts
              custom->bltamod = zbuffer->width/8 - bytewidth;
    1816:	|  |  |  |  |  |  |     |  |        |  |  |        |  '--|-> addq.l #7,d1
    1818:	|  |  |  |  |  |  |     |  |        |  |  |        |     |   asr.l #3,d1
    181a:	|  |  |  |  |  |  |     |  |        |  |  |        |     |   movea.w d1,a6
    181c:	|  |  |  |  |  |  |     |  |        |  |  |        |     |   suba.w d2,a6
            if (xdiffrest) {
    181e:	|  |  |  |  |  |  |     |  |        |  |  |        |     |   tst.w 46(sp)
    1822:	|  |  |  |  |  |  |     |  |        |  |  |        |     '-- bne.s 17b8 <CstDrawZBuffer+0x432>
              custom->bltcon0 = 0x9f0;              
    1824:	|  |  |  |  |  |  |     |  |        |  |  |        '-------> move.w #2544,dff040 <gcc8_c_support.c.c60c1f2b+0xdb2e06>
              custom->bltamod = zbuffer->width/8 - bytewidth;
    182c:	|  |  |  |  |  |  |     |  |        |  |  |                  move.w a6,dff064 <gcc8_c_support.c.c60c1f2b+0xdb2e2a>
              custom->bltdmod = 0;                                                            
    1832:	|  |  |  |  |  |  |     |  |        |  |  |                  move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb2e2c>
              xdiffbyte += 2;                 
    183a:	|  |  |  |  |  |  |     |  |        |  |  |                  move.w a5,d1
    183c:	|  |  |  |  |  |  |     |  |        |  |  |                  addq.w #1,d1
    183e:	|  |  |  |  |  |  |     |  |        |  |  |                  add.w d1,d1
              bltapt = (ULONG) zbuffer->bitplane - xdiffbyte;          
    1840:	|  |  |  |  |  |  |     |  |        |  |  |                  andi.l #65535,d1
    1846:	|  |  |  |  |  |  |     |  |        |  |  |                  move.l a0,d6
    1848:	|  |  |  |  |  |  |     |  |        |  |  |                  sub.l d1,d6
    184a:	|  |  +--|--|--|--|-----|--|--------|--|--|----------------- bra.w 14d6 <CstDrawZBuffer+0x150>
        if(spritey1oncanvas <= zbuffery1oncanvas && spritey2oncanvas > zbuffery1oncanvas)
    184e:	|  |  |  |  |  |  |     |  |        |  '--|----------------> movea.w d5,a0
      if( (zbufferfromright || zbufferfromleft) && (zbufferfrombottom || zbufferfromtop))
    1850:	|  |  |  |  |  |  |     |  |        |     |                  cmpa.l d3,a0
    1852:	|  |  |  +--|--|--|-----|--|--------|-----|----------------- bge.w 15ac <CstDrawZBuffer+0x226>
          xdiff = zbufferx1oncanvas - spritex1oncanvas;
    1856:	|  |  |  |  |  |  |     |  |        |     |                  sub.w 48(sp),d6
          xdiffbyte = (xdiff / 16) * 2;          
    185a:	|  |  |  |  |  |  |     |  |        |     |                  move.w d6,d1
    185c:	|  |  |  |  |  |  |     |  |        |     |                  lsr.w #4,d1
    185e:	|  |  |  |  |  |  |     |  |        |     |                  movea.w d1,a5
          xdiffrest = (xdiff - xdiffbyte * 8);       
    1860:	|  |  |  |  |  |  |     |  |        |     |                  andi.w #15,d6
    1864:	|  |  |  |  |  |  |     |  |        |     |                  move.w d6,46(sp)
          bytewidth = (sprite->width/16)*2 + 2;
    1868:	|  |  |  |  |  |  |     |  |        |     |                  tst.l d2
    186a:	|  |  |  |  |  |  |     |  |        |     '----------------- bge.w 1766 <CstDrawZBuffer+0x3e0>
    186e:	|  |  |  |  |  |  |     |  |        '----------------------- bra.w 17ec <CstDrawZBuffer+0x466>
      if( (zbufferfromright || zbufferfromleft) && (zbufferfrombottom || zbufferfromtop))
    1872:	|  |  |  |  |  '--|-----|--|-------------------------------> cmp.w 50(sp),d4
    1876:	|  |  |  '--|-----|-----|--|-------------------------------- ble.w 15ac <CstDrawZBuffer+0x226>
          xdiff = spritex1oncanvas - zbufferx1oncanvas;
    187a:	|  |  |     |     |     |  |                                 move.w 48(sp),d0
    187e:	|  |  |     |     |     |  |                                 sub.w d6,d0
          xdiffrest = (xdiff - xdiffbyte * 8);    
    1880:	|  |  |     |     |     |  |                                 move.w d0,d6
    1882:	|  |  |     |     |     |  |                                 andi.w #15,d6
    1886:	|  |  |     |     |     |  |                                 movea.w d6,a5
          bytewidth = (sprite->width/16)*2;
    1888:	|  |  |     |     |     |  |                                 tst.l d2
    188a:	|  |  |     |     '-----|--|-------------------------------- bge.w 145e <CstDrawZBuffer+0xd8>
    188e:	|  |  |     '-----------|--|-------------------------------- bra.w 15ce <CstDrawZBuffer+0x248>
    WaitBlit();
    1892:	'--|--|-----------------|--|-------------------------------> movea.l 1cfc2 <GfxBase>,a6
    1898:	   |  |                 |  |                                 jsr -228(a6)
    custom->bltafwm = 0xffff;
    189c:	   |  |                 |  |                                 move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb2e0a>
    custom->bltalwm = 0xffff;
    18a4:	   |  |                 |  |                                 move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb2e0c>
    custom->bltamod = 0;
    18ac:	   |  |                 |  |                                 move.w #0,dff064 <gcc8_c_support.c.c60c1f2b+0xdb2e2a>
    custom->bltbmod = 0;
    18b4:	   |  |                 |  |                                 move.w #0,dff062 <gcc8_c_support.c.c60c1f2b+0xdb2e28>
    custom->bltcmod = 0;
    18bc:	   |  |                 |  |                                 move.w #0,dff060 <gcc8_c_support.c.c60c1f2b+0xdb2e26>
    custom->bltdmod = 0;
    18c4:	   |  |                 |  |                                 move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb2e2c>
    custom->bltcon0 = 0x9f0; //Copy A to D
    18cc:	   |  |                 |  |                                 move.w #2544,dff040 <gcc8_c_support.c.c60c1f2b+0xdb2e06>
    custom->bltcon1 = 0;        
    18d4:	   |  |                 |  |                                 move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb2e08>
    custom->bltapt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    18dc:	   |  |                 |  |                                 move.l (a3),d2
    18de:	   |  |                 |  |                                 move.l 4(a3),d3
    18e2:	   |  |                 |  |                                 move.l d2,d0
    18e4:	   |  |                 |  |                       ,-------- bmi.w 196c <CstDrawZBuffer+0x5e6>
    18e8:	   |  |                 |  |                       |         asr.l #3,d0
    18ea:	   |  |                 |  |                       |         move.l d3,-(sp)
    18ec:	   |  |                 |  |                       |         move.l d0,-(sp)
    18ee:	   |  |                 |  |                       |         jsr 18134 <__mulsi3>
    18f4:	   |  |                 |  |                       |         addq.l #8,sp
    18f6:	   |  |                 |  |                       |         move.l d0,d1
    18f8:	   |  |                 |  |                       |         add.l d0,d1
    18fa:	   |  |                 |  |                       |         add.l d1,d1
    18fc:	   |  |                 |  |                       |         add.l d1,d0
    18fe:	   |  |                 |  |                       |         add.l 24(a3),d0
    1902:	   |  |                 |  |                       |         move.l d0,dff050 <gcc8_c_support.c.c60c1f2b+0xdb2e16>
    custom->bltdpt = (APTR) CstZBufferResult;
    1908:	   |  |                 |  |                       |         move.l 1cef2 <CstZBufferResult>,d0
    190e:	   |  |                 |  |                       |         move.l d0,dff054 <gcc8_c_support.c.c60c1f2b+0xdb2e1a>
    custom->bltsize = (sprite->height<<6)+sprite->width/16;      
    1914:	   |  |                 |  |                       |         lsl.w #6,d3
    1916:	   |  |                 |  |                       |         tst.l d2
    1918:	   |  |                 |  |                    ,--|-------- blt.s 195c <CstDrawZBuffer+0x5d6>
    191a:	   |  |                 |  |                    |  |  ,----> asr.l #4,d2
    191c:	   |  |                 |  |                    |  |  |      add.w d2,d3
    191e:	   |  |                 |  |                    |  |  |      move.w d3,dff058 <gcc8_c_support.c.c60c1f2b+0xdb2e1e>
}
    1924:	   |  |                 |  |                    |  |  |  ,-> movem.l (sp)+,d2-d7/a2-a6
    1928:	   |  |                 |  |                    |  |  |  |   addq.l #8,sp
    192a:	   |  |                 |  |                    |  |  |  |   rts
            custom->bltamod = zbuffer->width/8 - bytewidth;
    192c:	   '--|-----------------|--|--------------------|--|--|--|-> addq.l #7,d1
    192e:	      |                 |  |                    |  |  |  |   asr.l #3,d1
    1930:	      |                 |  |                    |  |  |  |   sub.w d2,d1
    1932:	      |                 |  |                    |  |  |  |   move.w d1,dff064 <gcc8_c_support.c.c60c1f2b+0xdb2e2a>
            custom->bltdmod = 0;                                                            
    1938:	      |                 |  |                    |  |  |  |   move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb2e2c>
    1940:	      '-----------------|--|--------------------|--|--|--|-- bra.w 14d6 <CstDrawZBuffer+0x150>
            custom->bltamod = zbuffer->width/8 - bytewidth;
    1944:	                        '--|--------------------|--|--|--|-> addq.l #7,d1
    1946:	                           |                    |  |  |  |   asr.l #3,d1
    1948:	                           |                    |  |  |  |   sub.w d2,d1
    194a:	                           |                    |  |  |  |   move.w d1,dff064 <gcc8_c_support.c.c60c1f2b+0xdb2e2a>
            custom->bltdmod = 2;                                                            
    1950:	                           |                    |  |  |  |   move.w #2,dff066 <gcc8_c_support.c.c60c1f2b+0xdb2e2c>
    1958:	                           '--------------------|--|--|--|-- bra.w 1642 <CstDrawZBuffer+0x2bc>
    custom->bltsize = (sprite->height<<6)+sprite->width/16;      
    195c:	                                                >--|--|--|-> moveq #15,d1
    195e:	                                                |  |  |  |   add.l d1,d2
    1960:	                                                |  |  |  |   asr.l #4,d2
    1962:	                                                |  |  |  |   add.w d2,d3
    1964:	                                                |  |  |  |   move.w d3,dff058 <gcc8_c_support.c.c60c1f2b+0xdb2e1e>
  return CstZBufferResult;
    196a:	                                                |  |  |  '-- bra.s 1924 <CstDrawZBuffer+0x59e>
    custom->bltapt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    196c:	                                                |  '--|----> addq.l #7,d0
    196e:	                                                |     |      asr.l #3,d0
    1970:	                                                |     |      move.l d3,-(sp)
    1972:	                                                |     |      move.l d0,-(sp)
    1974:	                                                |     |      jsr 18134 <__mulsi3>
    197a:	                                                |     |      addq.l #8,sp
    197c:	                                                |     |      move.l d0,d1
    197e:	                                                |     |      add.l d0,d1
    1980:	                                                |     |      add.l d1,d1
    1982:	                                                |     |      add.l d1,d0
    1984:	                                                |     |      add.l 24(a3),d0
    1988:	                                                |     |      move.l d0,dff050 <gcc8_c_support.c.c60c1f2b+0xdb2e16>
    custom->bltdpt = (APTR) CstZBufferResult;
    198e:	                                                |     |      move.l 1cef2 <CstZBufferResult>,d0
    1994:	                                                |     |      move.l d0,dff054 <gcc8_c_support.c.c60c1f2b+0xdb2e1a>
    custom->bltsize = (sprite->height<<6)+sprite->width/16;      
    199a:	                                                |     |      lsl.w #6,d3
    199c:	                                                |     |      tst.l d2
    199e:	                                                |     '----- bge.w 191a <CstDrawZBuffer+0x594>
    19a2:	                                                '----------- bra.s 195c <CstDrawZBuffer+0x5d6>

000019a4 <CstFreeBuffer>:

void CstFreeBuffer( ) {
    19a4:	    lea -20(sp),sp
    19a8:	    move.l a6,-(sp)
  if( CstDrawBuffer) FreeVec(CstDrawBuffer);
    19aa:	    move.l 1ceda <CstDrawBuffer>,d0
    19b0:	,-- beq.s 19ca <CstFreeBuffer+0x26>
    19b2:	|   move.l 1ceda <CstDrawBuffer>,20(sp)
    19ba:	|   move.l 1cfb6 <SysBase>,d0
    19c0:	|   movea.l d0,a6
    19c2:	|   movea.l 20(sp),a1
    19c6:	|   jsr -690(a6)
  if( CstViewBuffer) FreeVec(CstViewBuffer);
    19ca:	'-> move.l 1ced6 <CstViewBuffer>,d0
    19d0:	,-- beq.s 19ea <CstFreeBuffer+0x46>
    19d2:	|   move.l 1ced6 <CstViewBuffer>,16(sp)
    19da:	|   move.l 1cfb6 <SysBase>,d0
    19e0:	|   movea.l d0,a6
    19e2:	|   movea.l 16(sp),a1
    19e6:	|   jsr -690(a6)
  if( CstCopperList) FreeVec(CstCopperList);  
    19ea:	'-> move.l 1ced2 <CstCopperList>,d0
    19f0:	,-- beq.s 1a0a <CstFreeBuffer+0x66>
    19f2:	|   move.l 1ced2 <CstCopperList>,12(sp)
    19fa:	|   move.l 1cfb6 <SysBase>,d0
    1a00:	|   movea.l d0,a6
    1a02:	|   movea.l 12(sp),a1
    1a06:	|   jsr -690(a6)
  if( CstBackDrop) FreeVec(CstBackDrop);  
    1a0a:	'-> move.l 1ceca <CstBackDrop>,d0
    1a10:	,-- beq.s 1a2a <CstFreeBuffer+0x86>
    1a12:	|   move.l 1ceca <CstBackDrop>,8(sp)
    1a1a:	|   move.l 1cfb6 <SysBase>,d0
    1a20:	|   movea.l d0,a6
    1a22:	|   movea.l 8(sp),a1
    1a26:	|   jsr -690(a6)
  if( CstBackDropBackup) FreeVec(CstBackDropBackup);
    1a2a:	'-> move.l 1cece <CstBackDropBackup>,d0
    1a30:	,-- beq.s 1a4a <CstFreeBuffer+0xa6>
    1a32:	|   move.l 1cece <CstBackDropBackup>,4(sp)
    1a3a:	|   move.l 1cfb6 <SysBase>,d0
    1a40:	|   movea.l d0,a6
    1a42:	|   movea.l 4(sp),a1
    1a46:	|   jsr -690(a6)
  CstDrawBuffer = NULL;
    1a4a:	'-> clr.l 1ceda <CstDrawBuffer>
  CstViewBuffer = NULL;
    1a50:	    clr.l 1ced6 <CstViewBuffer>
  CstCopperList = NULL;
    1a56:	    clr.l 1ced2 <CstCopperList>
  CstBackDrop = NULL;
    1a5c:	    clr.l 1ceca <CstBackDrop>

}
    1a62:	    nop
    1a64:	    movea.l (sp)+,a6
    1a66:	    lea 20(sp),sp
    1a6a:	    rts

00001a6c <CstFreeze>:



void CstFreeze( ) {
    1a6c:	       lea -64(sp),sp
    1a70:	       move.l a6,-(sp)
    1a72:	       move.l d2,-(sp)

	KPrintF("CstFreeze: Freezing Background Started");  
    1a74:	       pea 183f8 <PutChar+0x1ae>
    1a7a:	       jsr 177a8 <KPrintF>
    1a80:	       addq.l #4,sp

  UWORD size = winWidth/8*winHeight*5;
    1a82:	       move.l 1cefe <winWidth>,d0
    1a88:	       lsr.l #3,d0
    1a8a:	       move.l d0,d1
    1a8c:	       move.l 1cf02 <winHeight>,d0
    1a92:	       move.l d0,d0
    1a94:	       muls.w d0,d1
    1a96:	       move.w d1,d0
    1a98:	       add.w d0,d0
    1a9a:	       add.w d0,d0
    1a9c:	       move.w d0,d2
    1a9e:	       add.w d1,d2
    1aa0:	       move.w d2,54(sp)

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    1aa4:	       move.l #14675968,50(sp)

  //Backup Existing Backdrop to save location
  CstBackDropBackup = AllocVec(size, MEMF_ANY);
    1aac:	       moveq #0,d0
    1aae:	       move.w 54(sp),d0
    1ab2:	       move.l d0,46(sp)
    1ab6:	       clr.l 42(sp)
    1aba:	       move.l 1cfb6 <SysBase>,d0
    1ac0:	       movea.l d0,a6
    1ac2:	       move.l 46(sp),d0
    1ac6:	       move.l 42(sp),d1
    1aca:	       jsr -684(a6)
    1ace:	       move.l d0,38(sp)
    1ad2:	       move.l 38(sp),d0
    1ad6:	       move.l d0,1cece <CstBackDropBackup>
  if( !CstBackDropBackup)
    1adc:	       move.l 1cece <CstBackDropBackup>,d0
    1ae2:	   ,-- bne.s 1af2 <CstFreeze+0x86>
  {
    KPrintF("CstFreeze: Cannot allocate Memory for CstBackDropBackup");
    1ae4:	   |   pea 1841f <PutChar+0x1d5>
    1aea:	   |   jsr 177a8 <KPrintF>
    1af0:	   |   addq.l #4,sp
  }

#ifdef EMULATOR
  debug_register_bitmap(CstBackDropBackup, "BackDropBackup", winWidth, winHeight, 5, 0);
    1af2:	   '-> move.l 1cf02 <winHeight>,d0
    1af8:	       move.l d0,d0
    1afa:	       movea.w d0,a1
    1afc:	       move.l 1cefe <winWidth>,d0
    1b02:	       move.l d0,d0
    1b04:	       movea.w d0,a0
    1b06:	       move.l 1cece <CstBackDropBackup>,d0
    1b0c:	       clr.l -(sp)
    1b0e:	       pea 5 <_start+0x5>
    1b12:	       move.l a1,-(sp)
    1b14:	       move.l a0,-(sp)
    1b16:	       pea 18457 <PutChar+0x20d>
    1b1c:	       move.l d0,-(sp)
    1b1e:	       jsr 17890 <debug_register_bitmap>
    1b24:	       lea 24(sp),sp
#endif  

  ULONG *src = (ULONG *) CstBackDrop;
    1b28:	       move.l 1ceca <CstBackDrop>,68(sp)
  ULONG *dst = (ULONG *) CstBackDropBackup;
    1b30:	       move.l 1cece <CstBackDropBackup>,64(sp)
  for(int i=0;i<size/4;i++) 
    1b38:	       clr.l 60(sp)
    1b3c:	   ,-- bra.s 1b62 <CstFreeze+0xf6>
  {
    *dst++ = *src++;
    1b3e:	,--|-> move.l 68(sp),d1
    1b42:	|  |   move.l d1,d0
    1b44:	|  |   addq.l #4,d0
    1b46:	|  |   move.l d0,68(sp)
    1b4a:	|  |   move.l 64(sp),d0
    1b4e:	|  |   move.l d0,d2
    1b50:	|  |   addq.l #4,d2
    1b52:	|  |   move.l d2,64(sp)
    1b56:	|  |   movea.l d1,a0
    1b58:	|  |   move.l (a0),d1
    1b5a:	|  |   movea.l d0,a0
    1b5c:	|  |   move.l d1,(a0)
  for(int i=0;i<size/4;i++) 
    1b5e:	|  |   addq.l #1,60(sp)
    1b62:	|  '-> move.w 54(sp),d0
    1b66:	|      lsr.w #2,d0
    1b68:	|      move.w d0,d0
    1b6a:	|      andi.l #65535,d0
    1b70:	|      cmp.l 60(sp),d0
    1b74:	'----- bgt.s 1b3e <CstFreeze+0xd2>
  }

  //Replace existing Backdrop with ViewBuffer
  src = (ULONG *) CstViewBuffer;
    1b76:	       move.l 1ced6 <CstViewBuffer>,68(sp)
  dst = (ULONG *) CstBackDrop;
    1b7e:	       move.l 1ceca <CstBackDrop>,64(sp)

  for(int i=0;i<size/4;i++) 
    1b86:	       clr.l 56(sp)
    1b8a:	   ,-- bra.s 1bb0 <CstFreeze+0x144>
  {
    *dst++ = *src++;
    1b8c:	,--|-> move.l 68(sp),d1
    1b90:	|  |   move.l d1,d0
    1b92:	|  |   addq.l #4,d0
    1b94:	|  |   move.l d0,68(sp)
    1b98:	|  |   move.l 64(sp),d0
    1b9c:	|  |   move.l d0,d2
    1b9e:	|  |   addq.l #4,d2
    1ba0:	|  |   move.l d2,64(sp)
    1ba4:	|  |   movea.l d1,a0
    1ba6:	|  |   move.l (a0),d1
    1ba8:	|  |   movea.l d0,a0
    1baa:	|  |   move.l d1,(a0)
  for(int i=0;i<size/4;i++) 
    1bac:	|  |   addq.l #1,56(sp)
    1bb0:	|  '-> move.w 54(sp),d0
    1bb4:	|      lsr.w #2,d0
    1bb6:	|      move.w d0,d0
    1bb8:	|      andi.l #65535,d0
    1bbe:	|      cmp.l 56(sp),d0
    1bc2:	'----- bgt.s 1b8c <CstFreeze+0x120>
  }

  struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    1bc4:	       move.l 1cee2 <CstCleanupQueueDrawBuffer>,34(sp)
  CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    1bcc:	       moveq #20,d0
    1bce:	       move.l d0,30(sp)
    1bd2:	       clr.l 26(sp)
    1bd6:	       move.l 1cfb6 <SysBase>,d0
    1bdc:	       movea.l d0,a6
    1bde:	       move.l 30(sp),d0
    1be2:	       move.l 26(sp),d1
    1be6:	       jsr -684(a6)
    1bea:	       move.l d0,22(sp)
    1bee:	       move.l 22(sp),d0
    1bf2:	       move.l d0,1cee2 <CstCleanupQueueDrawBuffer>
  CstCleanupQueueDrawBuffer->next = next;
    1bf8:	       movea.l 1cee2 <CstCleanupQueueDrawBuffer>,a0
    1bfe:	       move.l 34(sp),16(a0)
  CstCleanupQueueDrawBuffer->x = 0;
    1c04:	       movea.l 1cee2 <CstCleanupQueueDrawBuffer>,a0
    1c0a:	       clr.w (a0)
  CstCleanupQueueDrawBuffer->y = 0;
    1c0c:	       movea.l 1cee2 <CstCleanupQueueDrawBuffer>,a0
    1c12:	       clr.w 2(a0)
  CstCleanupQueueDrawBuffer->person = NULL;
    1c16:	       movea.l 1cee2 <CstCleanupQueueDrawBuffer>,a0
    1c1c:	       clr.l 4(a0)
  CstCleanupQueueDrawBuffer->widthinwords = winWidth/16;
    1c20:	       move.l 1cefe <winWidth>,d0
    1c26:	       lsr.l #4,d0
    1c28:	       movea.l 1cee2 <CstCleanupQueueDrawBuffer>,a0
    1c2e:	       move.l d0,d0
    1c30:	       move.w d0,8(a0)
  CstCleanupQueueDrawBuffer->height = winHeight;
    1c34:	       move.l 1cf02 <winHeight>,d0
    1c3a:	       movea.l 1cee2 <CstCleanupQueueDrawBuffer>,a0
    1c40:	       move.l d0,d0
    1c42:	       move.w d0,10(a0)
  CstCleanupQueueDrawBuffer->startxinbytes = 0;
    1c46:	       movea.l 1cee2 <CstCleanupQueueDrawBuffer>,a0
    1c4c:	       clr.w 12(a0)
  CstCleanupQueueDrawBuffer->starty = 0;
    1c50:	       movea.l 1cee2 <CstCleanupQueueDrawBuffer>,a0
    1c56:	       clr.w 14(a0)

  next = CstCleanupQueueViewBuffer;
    1c5a:	       move.l 1cede <CstCleanupQueueViewBuffer>,34(sp)
  CstCleanupQueueViewBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    1c62:	       moveq #20,d2
    1c64:	       move.l d2,18(sp)
    1c68:	       clr.l 14(sp)
    1c6c:	       move.l 1cfb6 <SysBase>,d0
    1c72:	       movea.l d0,a6
    1c74:	       move.l 18(sp),d0
    1c78:	       move.l 14(sp),d1
    1c7c:	       jsr -684(a6)
    1c80:	       move.l d0,10(sp)
    1c84:	       move.l 10(sp),d0
    1c88:	       move.l d0,1cede <CstCleanupQueueViewBuffer>
  CstCleanupQueueViewBuffer->next = next;
    1c8e:	       movea.l 1cede <CstCleanupQueueViewBuffer>,a0
    1c94:	       move.l 34(sp),16(a0)
  CstCleanupQueueViewBuffer->x = 0;
    1c9a:	       movea.l 1cede <CstCleanupQueueViewBuffer>,a0
    1ca0:	       clr.w (a0)
  CstCleanupQueueViewBuffer->y = 0;
    1ca2:	       movea.l 1cede <CstCleanupQueueViewBuffer>,a0
    1ca8:	       clr.w 2(a0)
  CstCleanupQueueViewBuffer->person = NULL;
    1cac:	       movea.l 1cede <CstCleanupQueueViewBuffer>,a0
    1cb2:	       clr.l 4(a0)
  CstCleanupQueueViewBuffer->widthinwords = winWidth/16;
    1cb6:	       move.l 1cefe <winWidth>,d0
    1cbc:	       lsr.l #4,d0
    1cbe:	       movea.l 1cede <CstCleanupQueueViewBuffer>,a0
    1cc4:	       move.l d0,d0
    1cc6:	       move.w d0,8(a0)
  CstCleanupQueueViewBuffer->height = winHeight;
    1cca:	       move.l 1cf02 <winHeight>,d0
    1cd0:	       movea.l 1cede <CstCleanupQueueViewBuffer>,a0
    1cd6:	       move.l d0,d0
    1cd8:	       move.w d0,10(a0)
  CstCleanupQueueViewBuffer->startxinbytes = 0;
    1cdc:	       movea.l 1cede <CstCleanupQueueViewBuffer>,a0
    1ce2:	       clr.w 12(a0)
  CstCleanupQueueViewBuffer->starty = 0; 
    1ce6:	       movea.l 1cede <CstCleanupQueueViewBuffer>,a0
    1cec:	       clr.w 14(a0)

  KPrintF("CstFreeze: Finished");
    1cf0:	       pea 18466 <PutChar+0x21c>
    1cf6:	       jsr 177a8 <KPrintF>
    1cfc:	       addq.l #4,sp

}  
    1cfe:	       nop
    1d00:	       move.l (sp)+,d2
    1d02:	       movea.l (sp)+,a6
    1d04:	       lea 64(sp),sp
    1d08:	       rts

00001d0a <CstLoadBackdrop>:

void CstLoadBackdrop( BPTR fp, int x, int y) {
    1d0a:	             lea -172(sp),sp
    1d0e:	             movem.l d2-d4/a6,-(sp)


	KPrintF("CstLoadBackDrop: Loading of Background started");
    1d12:	             pea 1847a <PutChar+0x230>
    1d18:	             jsr 177a8 <KPrintF>
    1d1e:	             addq.l #4,sp

  UWORD width = get2bytes(fp);
    1d20:	             move.l 192(sp),-(sp)
    1d24:	             jsr 6bc <get2bytes>
    1d2a:	             addq.l #4,sp
    1d2c:	             move.w d0,162(sp)
  UWORD height = get2bytes(fp);  
    1d30:	             move.l 192(sp),-(sp)
    1d34:	             jsr 6bc <get2bytes>
    1d3a:	             addq.l #4,sp
    1d3c:	             move.w d0,160(sp)

  UWORD widthbyteslayer = width/8;
    1d40:	             move.w 162(sp),d0
    1d44:	             lsr.w #3,d0
    1d46:	             move.w d0,158(sp)
  UWORD widthwordslayer = widthbyteslayer/2;  
    1d4a:	             move.w 158(sp),d0
    1d4e:	             lsr.w #1,d0
    1d50:	             move.w d0,156(sp)
  UWORD widthbytesbackdrop = winWidth / 8;
    1d54:	             move.l 1cefe <winWidth>,d0
    1d5a:	             lsr.l #3,d0
    1d5c:	             move.w d0,154(sp)
  UWORD sizeplane =  widthbyteslayer*height;
    1d60:	             move.w 158(sp),d0
    1d64:	             muls.w 160(sp),d0
    1d68:	             move.w d0,152(sp)
  UWORD size = sizeplane * 5; //Todo other number of bitplanes
    1d6c:	             move.w 152(sp),d1
    1d70:	             move.w d1,d0
    1d72:	             add.w d0,d0
    1d74:	             add.w d0,d0
    1d76:	             move.w d0,d2
    1d78:	             add.w d1,d2
    1d7a:	             move.w d2,150(sp)

  //Load Palette to Copper
  if( CstPaletteLoaded == 0)
    1d7e:	             move.w 1cec4 <CstPaletteLoaded>,d0
    1d84:	,----------- bne.w 1e1e <CstLoadBackdrop+0x114>
  {    
    UWORD reg = 0x180;
    1d88:	|            move.w #384,148(sp)

    if(CstPalette) {
    1d8e:	|            move.l 1ceea <CstPalette>,d0
    1d94:	|        ,-- beq.s 1dae <CstLoadBackdrop+0xa4>
      FreeVec(CstPalette);
    1d96:	|        |   move.l 1ceea <CstPalette>,144(sp)
    1d9e:	|        |   move.l 1cfb6 <SysBase>,d0
    1da4:	|        |   movea.l d0,a6
    1da6:	|        |   movea.l 144(sp),a1
    1daa:	|        |   jsr -690(a6)
    }

    CstPalette = AllocVec(32*2,MEMF_ANY); //ToDo other number of bitplanes
    1dae:	|        '-> moveq #64,d0
    1db0:	|            move.l d0,140(sp)
    1db4:	|            clr.l 136(sp)
    1db8:	|            move.l 1cfb6 <SysBase>,d0
    1dbe:	|            movea.l d0,a6
    1dc0:	|            move.l 140(sp),d0
    1dc4:	|            move.l 136(sp),d1
    1dc8:	|            jsr -684(a6)
    1dcc:	|            move.l d0,132(sp)
    1dd0:	|            move.l 132(sp),d0
    1dd4:	|            move.l d0,1ceea <CstPalette>
    CstPaletteLoaded = 1;
    1dda:	|            move.w #1,1cec4 <CstPaletteLoaded>
    UWORD *tmp = CstPalette;
    1de2:	|            move.l 1ceea <CstPalette>,184(sp)
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    1dea:	|            clr.l 180(sp)
    1dee:	|        ,-- bra.s 1e14 <CstLoadBackdrop+0x10a>
      *tmp++ = get2bytes(fp);
    1df0:	|     ,--|-> move.l 192(sp),-(sp)
    1df4:	|     |  |   jsr 6bc <get2bytes>
    1dfa:	|     |  |   addq.l #4,sp
    1dfc:	|     |  |   move.l d0,d1
    1dfe:	|     |  |   move.l 184(sp),d0
    1e02:	|     |  |   move.l d0,d2
    1e04:	|     |  |   addq.l #2,d2
    1e06:	|     |  |   move.l d2,184(sp)
    1e0a:	|     |  |   move.l d1,d1
    1e0c:	|     |  |   movea.l d0,a0
    1e0e:	|     |  |   move.w d1,(a0)
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    1e10:	|     |  |   addq.l #1,180(sp)
    1e14:	|     |  '-> moveq #31,d0
    1e16:	|     |      cmp.l 180(sp),d0
    1e1a:	|     '----- bge.s 1df0 <CstLoadBackdrop+0xe6>
    1e1c:	|  ,-------- bra.s 1e3c <CstLoadBackdrop+0x132>
    }
  }
  else
  //There's already a palette loaded for this background. Do not load palette
  {
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    1e1e:	'--|-------> clr.l 176(sp)
    1e22:	   |     ,-- bra.s 1e34 <CstLoadBackdrop+0x12a>
      get2bytes(fp);
    1e24:	   |  ,--|-> move.l 192(sp),-(sp)
    1e28:	   |  |  |   jsr 6bc <get2bytes>
    1e2e:	   |  |  |   addq.l #4,sp
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    1e30:	   |  |  |   addq.l #1,176(sp)
    1e34:	   |  |  '-> moveq #31,d2
    1e36:	   |  |      cmp.l 176(sp),d2
    1e3a:	   |  '----- bge.s 1e24 <CstLoadBackdrop+0x11a>
    }
  }

  //Load Picture From Disk
  UWORD *tmpbuffer = AllocVec(size, MEMF_CHIP); //Todo other number of bitplanes
    1e3c:	   '-------> moveq #0,d0
    1e3e:	             move.w 150(sp),d0
    1e42:	             move.l d0,128(sp)
    1e46:	             moveq #2,d0
    1e48:	             move.l d0,124(sp)
    1e4c:	             move.l 1cfb6 <SysBase>,d0
    1e52:	             movea.l d0,a6
    1e54:	             move.l 128(sp),d0
    1e58:	             move.l 124(sp),d1
    1e5c:	             jsr -684(a6)
    1e60:	             move.l d0,120(sp)
    1e64:	             move.l 120(sp),d0
    1e68:	             move.l d0,116(sp)
  if( !tmpbuffer)
    1e6c:	         ,-- bne.s 1e7c <CstLoadBackdrop+0x172>
  {
    KPrintF("CstLoadBackDrop: Cannot allocate Memory for tmpbuffer");
    1e6e:	         |   pea 184a9 <PutChar+0x25f>
    1e74:	         |   jsr 177a8 <KPrintF>
    1e7a:	         |   addq.l #4,sp
  }
  UWORD *tmpmask = AllocVec(sizeplane, MEMF_CHIP);
    1e7c:	         '-> moveq #0,d0
    1e7e:	             move.w 152(sp),d0
    1e82:	             move.l d0,112(sp)
    1e86:	             moveq #2,d2
    1e88:	             move.l d2,108(sp)
    1e8c:	             move.l 1cfb6 <SysBase>,d0
    1e92:	             movea.l d0,a6
    1e94:	             move.l 112(sp),d0
    1e98:	             move.l 108(sp),d1
    1e9c:	             jsr -684(a6)
    1ea0:	             move.l d0,104(sp)
    1ea4:	             move.l 104(sp),d0
    1ea8:	             move.l d0,100(sp)
  if( !tmpmask)
    1eac:	         ,-- bne.s 1ebc <CstLoadBackdrop+0x1b2>
  {
    KPrintF("CstLoadBackDrop: Cannot allocate Memory for tmpmask");
    1eae:	         |   pea 184df <PutChar+0x295>
    1eb4:	         |   jsr 177a8 <KPrintF>
    1eba:	         |   addq.l #4,sp
  }

#ifdef EMULATOR
  debug_register_bitmap(tmpbuffer, "tmpbuffer.bpl", width, height, 5, 0);
    1ebc:	         '-> move.w 160(sp),d0
    1ec0:	             movea.w d0,a1
    1ec2:	             move.w 162(sp),d0
    1ec6:	             movea.w d0,a0
    1ec8:	             clr.l -(sp)
    1eca:	             pea 5 <_start+0x5>
    1ece:	             move.l a1,-(sp)
    1ed0:	             move.l a0,-(sp)
    1ed2:	             pea 18513 <PutChar+0x2c9>
    1ed8:	             move.l 136(sp),-(sp)
    1edc:	             jsr 17890 <debug_register_bitmap>
    1ee2:	             lea 24(sp),sp
  debug_register_bitmap(tmpbuffer, "tmpmask.bpl", width, height, 1, 0);
    1ee6:	             move.w 160(sp),d0
    1eea:	             movea.w d0,a1
    1eec:	             move.w 162(sp),d0
    1ef0:	             movea.w d0,a0
    1ef2:	             clr.l -(sp)
    1ef4:	             pea 1 <_start+0x1>
    1ef8:	             move.l a1,-(sp)
    1efa:	             move.l a0,-(sp)
    1efc:	             pea 18521 <PutChar+0x2d7>
    1f02:	             move.l 136(sp),-(sp)
    1f06:	             jsr 17890 <debug_register_bitmap>
    1f0c:	             lea 24(sp),sp
#endif  

  UWORD count = FRead( fp, tmpbuffer, 2, size/2);
    1f10:	             move.l 192(sp),96(sp)
    1f16:	             move.l 116(sp),92(sp)
    1f1c:	             moveq #2,d0
    1f1e:	             move.l d0,88(sp)
    1f22:	             move.w 150(sp),d0
    1f26:	             lsr.w #1,d0
    1f28:	             move.w d0,d0
    1f2a:	             andi.l #65535,d0
    1f30:	             move.l d0,84(sp)
    1f34:	             move.l 1cfbe <DOSBase>,d0
    1f3a:	             movea.l d0,a6
    1f3c:	             move.l 96(sp),d1
    1f40:	             move.l 92(sp),d2
    1f44:	             move.l 88(sp),d3
    1f48:	             move.l 84(sp),d4
    1f4c:	             jsr -324(a6)
    1f50:	             move.l d0,80(sp)
    1f54:	             move.l 80(sp),d0
    1f58:	             move.w d0,78(sp)
  if(!count) {
    1f5c:	         ,-- bne.s 1f70 <CstLoadBackdrop+0x266>
    KPrintF("Error while reading stream");
    1f5e:	         |   pea 1852d <PutChar+0x2e3>
    1f64:	         |   jsr 177a8 <KPrintF>
    1f6a:	         |   addq.l #4,sp
    return;
    1f6c:	   ,-----|-- bra.w 2280 <CstLoadBackdrop+0x576>
  }  
  count = FRead( fp, tmpmask, 2, sizeplane/2);
    1f70:	   |     '-> move.l 192(sp),74(sp)
    1f76:	   |         move.l 100(sp),70(sp)
    1f7c:	   |         moveq #2,d2
    1f7e:	   |         move.l d2,66(sp)
    1f82:	   |         move.w 152(sp),d0
    1f86:	   |         lsr.w #1,d0
    1f88:	   |         move.w d0,d0
    1f8a:	   |         andi.l #65535,d0
    1f90:	   |         move.l d0,62(sp)
    1f94:	   |         move.l 1cfbe <DOSBase>,d0
    1f9a:	   |         movea.l d0,a6
    1f9c:	   |         move.l 74(sp),d1
    1fa0:	   |         move.l 70(sp),d2
    1fa4:	   |         move.l 66(sp),d3
    1fa8:	   |         move.l 62(sp),d4
    1fac:	   |         jsr -324(a6)
    1fb0:	   |         move.l d0,58(sp)
    1fb4:	   |         move.l 58(sp),d0
    1fb8:	   |         move.w d0,78(sp)
   

  if(!count) {
    1fbc:	   |     ,-- bne.s 1fd0 <CstLoadBackdrop+0x2c6>
    KPrintF("Error while reading stream");
    1fbe:	   |     |   pea 1852d <PutChar+0x2e3>
    1fc4:	   |     |   jsr 177a8 <KPrintF>
    1fca:	   |     |   addq.l #4,sp
    return;
    1fcc:	   +-----|-- bra.w 2280 <CstLoadBackdrop+0x576>
  }

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    1fd0:	   |     '-> move.l #14675968,54(sp)

  ULONG backdropcursor = (ULONG) CstBackDrop; 
    1fd8:	   |         move.l 1ceca <CstBackDrop>,d0
    1fde:	   |         move.l d0,172(sp)
  UWORD offset = widthbytesbackdrop*y + x / 8;
    1fe2:	   |         move.l 200(sp),d0
    1fe6:	   |         move.w d0,d1
    1fe8:	   |         muls.w 154(sp),d1
    1fec:	   |         move.l 196(sp),d0
    1ff0:	   |     ,-- bpl.s 1ff4 <CstLoadBackdrop+0x2ea>
    1ff2:	   |     |   addq.l #7,d0
    1ff4:	   |     '-> asr.l #3,d0
    1ff6:	   |         move.l d0,d0
    1ff8:	   |         movea.w d1,a0
    1ffa:	   |         adda.w d0,a0
    1ffc:	   |         move.w a0,52(sp)
  backdropcursor += offset; 
    2000:	   |         moveq #0,d0
    2002:	   |         move.w 52(sp),d0
    2006:	   |         add.l d0,172(sp)

 	KPrintF("CstLoadBackDrop: Starting Blit");
    200a:	   |         pea 18548 <PutChar+0x2fe>
    2010:	   |         jsr 177a8 <KPrintF>
    2016:	   |         addq.l #4,sp


  WaitBlit();
    2018:	   |         move.l 1cfc2 <GfxBase>,d0
    201e:	   |         movea.l d0,a6
    2020:	   |         jsr -228(a6)

  custom->bltafwm = 0xffff;
    2024:	   |         movea.l 54(sp),a0
    2028:	   |         move.w #-1,68(a0)
  custom->bltalwm = 0xffff;
    202e:	   |         movea.l 54(sp),a0
    2032:	   |         move.w #-1,70(a0)
  custom->bltamod = 0;
    2038:	   |         movea.l 54(sp),a0
    203c:	   |         move.w #0,100(a0)
  custom->bltbmod = 0;
    2042:	   |         movea.l 54(sp),a0
    2046:	   |         move.w #0,98(a0)
  custom->bltcmod = widthbytesbackdrop - widthbyteslayer;
    204c:	   |         move.w 154(sp),d0
    2050:	   |         sub.w 158(sp),d0
    2054:	   |         movea.l 54(sp),a0
    2058:	   |         move.w d0,96(a0)
  custom->bltdmod = widthbytesbackdrop - widthbyteslayer;
    205c:	   |         move.w 154(sp),d0
    2060:	   |         sub.w 158(sp),d0
    2064:	   |         movea.l 54(sp),a0
    2068:	   |         move.w d0,102(a0)
  custom->bltcon0 = 0xfca;
    206c:	   |         movea.l 54(sp),a0
    2070:	   |         move.w #4042,64(a0)
  custom->bltcon1 = 0;
    2076:	   |         movea.l 54(sp),a0
    207a:	   |         move.w #0,66(a0)
  
  ULONG tmpbuffercursor = (ULONG) tmpbuffer;
    2080:	   |         move.l 116(sp),168(sp)
  for(int i=0;i<5;i++) //Todo other number of bitplanes
    2086:	   |         clr.l 164(sp)
    208a:	   |     ,-- bra.s 20f8 <CstLoadBackdrop+0x3ee>
  {   
    WaitBlit(); 
    208c:	   |  ,--|-> move.l 1cfc2 <GfxBase>,d0
    2092:	   |  |  |   movea.l d0,a6
    2094:	   |  |  |   jsr -228(a6)
    custom->bltapt = (APTR) tmpmask;
    2098:	   |  |  |   movea.l 54(sp),a0
    209c:	   |  |  |   move.l 100(sp),80(a0)
    custom->bltbpt = (APTR) tmpbuffercursor;
    20a2:	   |  |  |   move.l 168(sp),d0
    20a6:	   |  |  |   movea.l 54(sp),a0
    20aa:	   |  |  |   move.l d0,76(a0)
    custom->bltcpt = (APTR)backdropcursor;
    20ae:	   |  |  |   move.l 172(sp),d0
    20b2:	   |  |  |   movea.l 54(sp),a0
    20b6:	   |  |  |   move.l d0,72(a0)
    custom->bltdpt = (APTR) backdropcursor;
    20ba:	   |  |  |   move.l 172(sp),d0
    20be:	   |  |  |   movea.l 54(sp),a0
    20c2:	   |  |  |   move.l d0,84(a0)
    custom->bltsize = (height<<6)+widthwordslayer;
    20c6:	   |  |  |   move.w 160(sp),d0
    20ca:	   |  |  |   lsl.w #6,d0
    20cc:	   |  |  |   add.w 156(sp),d0
    20d0:	   |  |  |   movea.l 54(sp),a0
    20d4:	   |  |  |   move.w d0,88(a0)
    tmpbuffercursor += sizeplane;
    20d8:	   |  |  |   moveq #0,d0
    20da:	   |  |  |   move.w 152(sp),d0
    20de:	   |  |  |   add.l d0,168(sp)
    backdropcursor += CstBackdropSizePlane;
    20e2:	   |  |  |   move.w 1cec8 <CstBackdropSizePlane>,d0
    20e8:	   |  |  |   move.w d0,d0
    20ea:	   |  |  |   andi.l #65535,d0
    20f0:	   |  |  |   add.l d0,172(sp)
  for(int i=0;i<5;i++) //Todo other number of bitplanes
    20f4:	   |  |  |   addq.l #1,164(sp)
    20f8:	   |  |  '-> moveq #4,d0
    20fa:	   |  |      cmp.l 164(sp),d0
    20fe:	   |  '----- bge.s 208c <CstLoadBackdrop+0x382>
  }    

  WaitBlit();
    2100:	   |         move.l 1cfc2 <GfxBase>,d0
    2106:	   |         movea.l d0,a6
    2108:	   |         jsr -228(a6)

 	KPrintF("CstLoadBackDrop: Freeing Memory");
    210c:	   |         pea 18567 <PutChar+0x31d>
    2112:	   |         jsr 177a8 <KPrintF>
    2118:	   |         addq.l #4,sp


  FreeVec(tmpbuffer);
    211a:	   |         move.l 116(sp),48(sp)
    2120:	   |         move.l 1cfb6 <SysBase>,d0
    2126:	   |         movea.l d0,a6
    2128:	   |         movea.l 48(sp),a1
    212c:	   |         jsr -690(a6)
  FreeVec(tmpmask);
    2130:	   |         move.l 100(sp),44(sp)
    2136:	   |         move.l 1cfb6 <SysBase>,d0
    213c:	   |         movea.l d0,a6
    213e:	   |         movea.l 44(sp),a1
    2142:	   |         jsr -690(a6)

  struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    2146:	   |         move.l 1cee2 <CstCleanupQueueDrawBuffer>,40(sp)
  CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    214e:	   |         moveq #20,d2
    2150:	   |         move.l d2,36(sp)
    2154:	   |         clr.l 32(sp)
    2158:	   |         move.l 1cfb6 <SysBase>,d0
    215e:	   |         movea.l d0,a6
    2160:	   |         move.l 36(sp),d0
    2164:	   |         move.l 32(sp),d1
    2168:	   |         jsr -684(a6)
    216c:	   |         move.l d0,28(sp)
    2170:	   |         move.l 28(sp),d0
    2174:	   |         move.l d0,1cee2 <CstCleanupQueueDrawBuffer>
  CstCleanupQueueDrawBuffer->next = next;
    217a:	   |         movea.l 1cee2 <CstCleanupQueueDrawBuffer>,a0
    2180:	   |         move.l 40(sp),16(a0)
  CstCleanupQueueDrawBuffer->x = 0;
    2186:	   |         movea.l 1cee2 <CstCleanupQueueDrawBuffer>,a0
    218c:	   |         clr.w (a0)
  CstCleanupQueueDrawBuffer->y = 0;
    218e:	   |         movea.l 1cee2 <CstCleanupQueueDrawBuffer>,a0
    2194:	   |         clr.w 2(a0)
  CstCleanupQueueDrawBuffer->person = NULL;
    2198:	   |         movea.l 1cee2 <CstCleanupQueueDrawBuffer>,a0
    219e:	   |         clr.l 4(a0)
  CstCleanupQueueDrawBuffer->widthinwords = winWidth/16;
    21a2:	   |         move.l 1cefe <winWidth>,d0
    21a8:	   |         lsr.l #4,d0
    21aa:	   |         movea.l 1cee2 <CstCleanupQueueDrawBuffer>,a0
    21b0:	   |         move.l d0,d0
    21b2:	   |         move.w d0,8(a0)
  CstCleanupQueueDrawBuffer->height = winHeight;
    21b6:	   |         move.l 1cf02 <winHeight>,d0
    21bc:	   |         movea.l 1cee2 <CstCleanupQueueDrawBuffer>,a0
    21c2:	   |         move.l d0,d0
    21c4:	   |         move.w d0,10(a0)
  CstCleanupQueueDrawBuffer->startxinbytes = 0;
    21c8:	   |         movea.l 1cee2 <CstCleanupQueueDrawBuffer>,a0
    21ce:	   |         clr.w 12(a0)
  CstCleanupQueueDrawBuffer->starty = 0;
    21d2:	   |         movea.l 1cee2 <CstCleanupQueueDrawBuffer>,a0
    21d8:	   |         clr.w 14(a0)

  next = CstCleanupQueueViewBuffer;
    21dc:	   |         move.l 1cede <CstCleanupQueueViewBuffer>,40(sp)
  CstCleanupQueueViewBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    21e4:	   |         moveq #20,d0
    21e6:	   |         move.l d0,24(sp)
    21ea:	   |         clr.l 20(sp)
    21ee:	   |         move.l 1cfb6 <SysBase>,d0
    21f4:	   |         movea.l d0,a6
    21f6:	   |         move.l 24(sp),d0
    21fa:	   |         move.l 20(sp),d1
    21fe:	   |         jsr -684(a6)
    2202:	   |         move.l d0,16(sp)
    2206:	   |         move.l 16(sp),d0
    220a:	   |         move.l d0,1cede <CstCleanupQueueViewBuffer>
  CstCleanupQueueViewBuffer->next = next;
    2210:	   |         movea.l 1cede <CstCleanupQueueViewBuffer>,a0
    2216:	   |         move.l 40(sp),16(a0)
  CstCleanupQueueViewBuffer->x = 0;
    221c:	   |         movea.l 1cede <CstCleanupQueueViewBuffer>,a0
    2222:	   |         clr.w (a0)
  CstCleanupQueueViewBuffer->y = 0;
    2224:	   |         movea.l 1cede <CstCleanupQueueViewBuffer>,a0
    222a:	   |         clr.w 2(a0)
  CstCleanupQueueViewBuffer->person = NULL;
    222e:	   |         movea.l 1cede <CstCleanupQueueViewBuffer>,a0
    2234:	   |         clr.l 4(a0)
  CstCleanupQueueViewBuffer->widthinwords = winWidth/16;
    2238:	   |         move.l 1cefe <winWidth>,d0
    223e:	   |         lsr.l #4,d0
    2240:	   |         movea.l 1cede <CstCleanupQueueViewBuffer>,a0
    2246:	   |         move.l d0,d0
    2248:	   |         move.w d0,8(a0)
  CstCleanupQueueViewBuffer->height = winHeight;
    224c:	   |         move.l 1cf02 <winHeight>,d0
    2252:	   |         movea.l 1cede <CstCleanupQueueViewBuffer>,a0
    2258:	   |         move.l d0,d0
    225a:	   |         move.w d0,10(a0)
  CstCleanupQueueViewBuffer->startxinbytes = 0;
    225e:	   |         movea.l 1cede <CstCleanupQueueViewBuffer>,a0
    2264:	   |         clr.w 12(a0)
  CstCleanupQueueViewBuffer->starty = 0; 
    2268:	   |         movea.l 1cede <CstCleanupQueueViewBuffer>,a0
    226e:	   |         clr.w 14(a0)

  KPrintF("CstLoadBackDrop: Finished");
    2272:	   |         pea 18587 <PutChar+0x33d>
    2278:	   |         jsr 177a8 <KPrintF>
    227e:	   |         addq.l #4,sp

}
    2280:	   '-------> movem.l (sp)+,d2-d4/a6
    2284:	             lea 172(sp),sp
    2288:	             rts

0000228a <CstPasteChar>:

ULONG test = 0;

void CstPasteChar( struct sprite *single, WORD x, WORD y)
{  
    228a:	                lea -156(sp),sp
    228e:	                move.l a6,-(sp)
    2290:	                move.l d2,-(sp)
    2292:	                move.l 172(sp),d1
    2296:	                move.l 176(sp),d0
    229a:	                move.w d1,d1
    229c:	                move.w d1,10(sp)
    22a0:	                move.w d0,d0
    22a2:	                move.w d0,8(sp)

  volatile struct Custom *custom = (struct Custom*)0xdff000;	
    22a6:	                move.l #14675968,112(sp)
  //custom->color[0] = 0x0f0;
  UWORD *destination = 0;
    22ae:	                clr.l 108(sp)
  destination = (UWORD *) CstBackDrop;      
    22b2:	                move.l 1ceca <CstBackDrop>,108(sp)
  ULONG ystartdst;
  ULONG ystartsrc; 
  ULONG blitheight;
  ULONG blitwidth;

  bltcon0 = 0;
    22ba:	                clr.l 140(sp)

  blitwidth = single->width/16;
    22be:	                movea.l 168(sp),a0
    22c2:	                move.l (a0),d0
    22c4:	                movea.l d0,a0
    22c6:	                cmpa.w #0,a0
    22ca:	            ,-- bge.s 22d0 <CstPasteChar+0x46>
    22cc:	            |   lea 15(a0),a0
    22d0:	            '-> move.l a0,d0
    22d2:	                asr.l #4,d0
    22d4:	                move.l d0,124(sp)
  if(blitwidth == 0) blitwidth = 1;
    22d8:	            ,-- bne.s 22e0 <CstPasteChar+0x56>
    22da:	            |   moveq #1,d0
    22dc:	            |   move.l d0,124(sp)

  if( y < 0) {
    22e0:	            '-> tst.w 8(sp)
    22e4:	         ,----- bge.s 232e <CstPasteChar+0xa4>
    if(y + single->height < 0) {
    22e6:	         |      movea.w 8(sp),a1
    22ea:	         |      movea.l 168(sp),a0
    22ee:	         |      move.l 4(a0),d0
    22f2:	         |      add.l a1,d0
    22f4:	         |  ,-- bpl.s 2308 <CstPasteChar+0x7e>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    22f6:	         |  |   pea 185a1 <PutChar+0x357>
    22fc:	         |  |   jsr 177a8 <KPrintF>
    2302:	         |  |   addq.l #4,sp
      return;
    2304:	,--------|--|-- bra.w 2c7c <CstPasteChar+0x9f2>
    }
    ystartdst = 0;
    2308:	|        |  '-> clr.l 136(sp)
    ystartsrc = y*-1;
    230c:	|        |      move.w 8(sp),d0
    2310:	|        |      ext.l d0
    2312:	|        |      move.l d0,d1
    2314:	|        |      neg.l d1
    2316:	|        |      move.l d1,132(sp)
    blitheight = single->height+y;
    231a:	|        |      movea.l 168(sp),a0
    231e:	|        |      move.l 4(a0),d0
    2322:	|        |      movea.w 8(sp),a0
    2326:	|        |      add.l a0,d0
    2328:	|        |      move.l d0,128(sp)
    232c:	|     ,--|----- bra.s 23a0 <CstPasteChar+0x116>
  } else if(y+single->height > (int) winHeight) {
    232e:	|     |  '----> movea.w 8(sp),a1
    2332:	|     |         movea.l 168(sp),a0
    2336:	|     |         move.l 4(a0),d0
    233a:	|     |         move.l a1,d1
    233c:	|     |         add.l d0,d1
    233e:	|     |         move.l 1cf02 <winHeight>,d0
    2344:	|     |         cmp.l d1,d0
    2346:	|     |  ,----- bge.s 2388 <CstPasteChar+0xfe>
    if(y  > (int) winHeight) {
    2348:	|     |  |      movea.w 8(sp),a0
    234c:	|     |  |      move.l 1cf02 <winHeight>,d0
    2352:	|     |  |      cmp.l a0,d0
    2354:	|     |  |  ,-- bge.s 2368 <CstPasteChar+0xde>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    2356:	|     |  |  |   pea 185a1 <PutChar+0x357>
    235c:	|     |  |  |   jsr 177a8 <KPrintF>
    2362:	|     |  |  |   addq.l #4,sp
      return;
    2364:	+-----|--|--|-- bra.w 2c7c <CstPasteChar+0x9f2>
    }
    ystartdst = y;
    2368:	|     |  |  '-> movea.w 8(sp),a0
    236c:	|     |  |      move.l a0,136(sp)
    ystartsrc = 0;
    2370:	|     |  |      clr.l 132(sp)
    blitheight = winHeight-y;
    2374:	|     |  |      move.l 1cf02 <winHeight>,d0
    237a:	|     |  |      movea.w 8(sp),a0
    237e:	|     |  |      move.l d0,d1
    2380:	|     |  |      sub.l a0,d1
    2382:	|     |  |      move.l d1,128(sp)
    2386:	|     +--|----- bra.s 23a0 <CstPasteChar+0x116>
  } else {
    ystartdst = y;
    2388:	|     |  '----> movea.w 8(sp),a0
    238c:	|     |         move.l a0,136(sp)
    ystartsrc = 0;
    2390:	|     |         clr.l 132(sp)
    blitheight = single->height;
    2394:	|     |         movea.l 168(sp),a0
    2398:	|     |         move.l 4(a0),d0
    239c:	|     |         move.l d0,128(sp)
  }


   if( x < 0) { //Leftmost part outside screen
    23a0:	|     '-------> tst.w 10(sp)
    23a4:	|        ,----- bge.w 25ec <CstPasteChar+0x362>
    if(x + single->width < 0) {
    23a8:	|        |      movea.w 10(sp),a1
    23ac:	|        |      movea.l 168(sp),a0
    23b0:	|        |      move.l (a0),d0
    23b2:	|        |      add.l a1,d0
    23b4:	|        |  ,-- bpl.s 23c8 <CstPasteChar+0x13e>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    23b6:	|        |  |   pea 185a1 <PutChar+0x357>
    23bc:	|        |  |   jsr 177a8 <KPrintF>
    23c2:	|        |  |   addq.l #4,sp
      return;
    23c4:	+--------|--|-- bra.w 2c7c <CstPasteChar+0x9f2>

    }
    
    extrawords = 1;
    23c8:	|        |  '-> move.w #1,162(sp)

    cutwordssource = (x*-1)/16; 
    23ce:	|        |      move.w 10(sp),d0
    23d2:	|        |  ,-- bpl.s 23d8 <CstPasteChar+0x14e>
    23d4:	|        |  |   addi.w #15,d0
    23d8:	|        |  '-> asr.w #4,d0
    23da:	|        |      neg.w d0
    23dc:	|        |      move.w d0,160(sp)
    cutmaskpixel = (x*-1)%16;     
    23e0:	|        |      move.w 10(sp),d0
    23e4:	|        |      ext.l d0
    23e6:	|        |      neg.l d0
    23e8:	|        |      andi.l #-2147483633,d0
    23ee:	|        |  ,-- bpl.s 23f8 <CstPasteChar+0x16e>
    23f0:	|        |  |   subq.l #1,d0
    23f2:	|        |  |   moveq #-16,d1
    23f4:	|        |  |   or.l d1,d0
    23f6:	|        |  |   addq.l #1,d0
    23f8:	|        |  '-> move.w d0,158(sp)
    bltalwm = 0; //Last Word of this channel almost masked out
    23fc:	|        |      clr.w 156(sp)
    bltapt = ((ULONG) single->data)+cutwordssource*2+ystartsrc*single->width/8;
    2400:	|        |      movea.l 168(sp),a0
    2404:	|        |      move.l 24(a0),d0
    2408:	|        |      move.l d0,d1
    240a:	|        |      moveq #0,d0
    240c:	|        |      move.w 160(sp),d0
    2410:	|        |      add.l d0,d0
    2412:	|        |      move.l d1,d2
    2414:	|        |      add.l d0,d2
    2416:	|        |      movea.l 168(sp),a0
    241a:	|        |      move.l (a0),d0
    241c:	|        |      move.l 132(sp),-(sp)
    2420:	|        |      move.l d0,-(sp)
    2422:	|        |      jsr 18134 <__mulsi3>
    2428:	|        |      addq.l #8,sp
    242a:	|        |      lsr.l #3,d0
    242c:	|        |      move.l d2,d1
    242e:	|        |      add.l d0,d1
    2430:	|        |      move.l d1,152(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    2434:	|        |      move.l 1cefe <winWidth>,d0
    243a:	|        |      move.l 136(sp),-(sp)
    243e:	|        |      move.l d0,-(sp)
    2440:	|        |      jsr 18134 <__mulsi3>
    2446:	|        |      addq.l #8,sp
    2448:	|        |      lsr.l #3,d0
    244a:	|        |      move.l 108(sp),d1
    244e:	|        |      add.l d1,d0
    2450:	|        |      move.l d0,d2
    2452:	|        |      subq.l #2,d2
    2454:	|        |      move.l d2,148(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    2458:	|        |      move.l 1cefe <winWidth>,d0
    245e:	|        |      move.l 136(sp),-(sp)
    2462:	|        |      move.l d0,-(sp)
    2464:	|        |      jsr 18134 <__mulsi3>
    246a:	|        |      addq.l #8,sp
    246c:	|        |      lsr.l #3,d0
    246e:	|        |      move.l 108(sp),d1
    2472:	|        |      add.l d1,d0
    2474:	|        |      move.l d0,d1
    2476:	|        |      subq.l #2,d1
    2478:	|        |      move.l d1,144(sp)
    bltcon0 = ((16-cutmaskpixel) << 12);
    247c:	|        |      moveq #0,d0
    247e:	|        |      move.w 158(sp),d0
    2482:	|        |      moveq #16,d1
    2484:	|        |      sub.l d0,d1
    2486:	|        |      move.l d1,d0
    2488:	|        |      moveq #12,d2
    248a:	|        |      lsl.l d2,d0
    248c:	|        |      move.l d0,140(sp)

    struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    2490:	|        |      move.l 1cee2 <CstCleanupQueueDrawBuffer>,48(sp)
    CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    2498:	|        |      moveq #20,d0
    249a:	|        |      move.l d0,44(sp)
    249e:	|        |      clr.l 40(sp)
    24a2:	|        |      move.l 1cfb6 <SysBase>,d0
    24a8:	|        |      movea.l d0,a6
    24aa:	|        |      move.l 44(sp),d0
    24ae:	|        |      move.l 40(sp),d1
    24b2:	|        |      jsr -684(a6)
    24b6:	|        |      move.l d0,36(sp)
    24ba:	|        |      move.l 36(sp),d0
    24be:	|        |      move.l d0,1cee2 <CstCleanupQueueDrawBuffer>
    CstCleanupQueueDrawBuffer->next = next;
    24c4:	|        |      movea.l 1cee2 <CstCleanupQueueDrawBuffer>,a0
    24ca:	|        |      move.l 48(sp),16(a0)
    CstCleanupQueueDrawBuffer->x = 0;
    24d0:	|        |      movea.l 1cee2 <CstCleanupQueueDrawBuffer>,a0
    24d6:	|        |      clr.w (a0)
    CstCleanupQueueDrawBuffer->y = 0;
    24d8:	|        |      movea.l 1cee2 <CstCleanupQueueDrawBuffer>,a0
    24de:	|        |      clr.w 2(a0)
    CstCleanupQueueDrawBuffer->person = NULL;
    24e2:	|        |      movea.l 1cee2 <CstCleanupQueueDrawBuffer>,a0
    24e8:	|        |      clr.l 4(a0)
    CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords;
    24ec:	|        |      movea.l 168(sp),a0
    24f0:	|        |      move.l (a0),d0
    24f2:	|        |      movea.l d0,a0
    24f4:	|        |      cmpa.w #0,a0
    24f8:	|        |  ,-- bge.s 24fe <CstPasteChar+0x274>
    24fa:	|        |  |   lea 15(a0),a0
    24fe:	|        |  '-> move.l a0,d0
    2500:	|        |      asr.l #4,d0
    2502:	|        |      move.l d0,d0
    2504:	|        |      add.w 160(sp),d0
    2508:	|        |      movea.l 1cee2 <CstCleanupQueueDrawBuffer>,a0
    250e:	|        |      add.w 162(sp),d0
    2512:	|        |      move.w d0,8(a0)
    CstCleanupQueueDrawBuffer->height = blitheight;
    2516:	|        |      movea.l 1cee2 <CstCleanupQueueDrawBuffer>,a0
    251c:	|        |      move.l 128(sp),d0
    2520:	|        |      move.w d0,10(a0)
    CstCleanupQueueDrawBuffer->startxinbytes = 0;
    2524:	|        |      movea.l 1cee2 <CstCleanupQueueDrawBuffer>,a0
    252a:	|        |      clr.w 12(a0)
    CstCleanupQueueDrawBuffer->starty = ystartdst;
    252e:	|        |      movea.l 1cee2 <CstCleanupQueueDrawBuffer>,a0
    2534:	|        |      move.l 136(sp),d0
    2538:	|        |      move.w d0,14(a0)

    next = CstCleanupQueueViewBuffer;
    253c:	|        |      move.l 1cede <CstCleanupQueueViewBuffer>,48(sp)
    CstCleanupQueueViewBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    2544:	|        |      moveq #20,d1
    2546:	|        |      move.l d1,32(sp)
    254a:	|        |      clr.l 28(sp)
    254e:	|        |      move.l 1cfb6 <SysBase>,d0
    2554:	|        |      movea.l d0,a6
    2556:	|        |      move.l 32(sp),d0
    255a:	|        |      move.l 28(sp),d1
    255e:	|        |      jsr -684(a6)
    2562:	|        |      move.l d0,24(sp)
    2566:	|        |      move.l 24(sp),d0
    256a:	|        |      move.l d0,1cede <CstCleanupQueueViewBuffer>
    CstCleanupQueueViewBuffer->next = next;
    2570:	|        |      movea.l 1cede <CstCleanupQueueViewBuffer>,a0
    2576:	|        |      move.l 48(sp),16(a0)
    CstCleanupQueueViewBuffer->x = 0;
    257c:	|        |      movea.l 1cede <CstCleanupQueueViewBuffer>,a0
    2582:	|        |      clr.w (a0)
    CstCleanupQueueViewBuffer->y = 0;
    2584:	|        |      movea.l 1cede <CstCleanupQueueViewBuffer>,a0
    258a:	|        |      clr.w 2(a0)
    CstCleanupQueueViewBuffer->person = NULL;
    258e:	|        |      movea.l 1cede <CstCleanupQueueViewBuffer>,a0
    2594:	|        |      clr.l 4(a0)
    CstCleanupQueueViewBuffer->widthinwords = single->width/16+cutwordssource+extrawords;
    2598:	|        |      movea.l 168(sp),a0
    259c:	|        |      move.l (a0),d0
    259e:	|        |      movea.l d0,a0
    25a0:	|        |      cmpa.w #0,a0
    25a4:	|        |  ,-- bge.s 25aa <CstPasteChar+0x320>
    25a6:	|        |  |   lea 15(a0),a0
    25aa:	|        |  '-> move.l a0,d0
    25ac:	|        |      asr.l #4,d0
    25ae:	|        |      move.l d0,d0
    25b0:	|        |      add.w 160(sp),d0
    25b4:	|        |      movea.l 1cede <CstCleanupQueueViewBuffer>,a0
    25ba:	|        |      add.w 162(sp),d0
    25be:	|        |      move.w d0,8(a0)
    CstCleanupQueueViewBuffer->height = blitheight;
    25c2:	|        |      movea.l 1cede <CstCleanupQueueViewBuffer>,a0
    25c8:	|        |      move.l 128(sp),d0
    25cc:	|        |      move.w d0,10(a0)
    CstCleanupQueueViewBuffer->startxinbytes = 0;
    25d0:	|        |      movea.l 1cede <CstCleanupQueueViewBuffer>,a0
    25d6:	|        |      clr.w 12(a0)
    CstCleanupQueueViewBuffer->starty = ystartdst; 
    25da:	|        |      movea.l 1cede <CstCleanupQueueViewBuffer>,a0
    25e0:	|        |      move.l 136(sp),d0
    25e4:	|        |      move.w d0,14(a0)
    25e8:	|     ,--|----- bra.w 2ae4 <CstPasteChar+0x85a>
  } else if(x + single->width > (int) winWidth) { //Rightmost part outside screen   
    25ec:	|     |  '----> movea.w 10(sp),a1
    25f0:	|     |         movea.l 168(sp),a0
    25f4:	|     |         move.l (a0),d0
    25f6:	|     |         move.l a1,d1
    25f8:	|     |         add.l d0,d1
    25fa:	|     |         move.l 1cefe <winWidth>,d0
    2600:	|     |         cmp.l d1,d0
    2602:	|     |  ,----- bge.w 288e <CstPasteChar+0x604>

    if(x - single->width > (int) winWidth)
    2606:	|     |  |      movea.w 10(sp),a1
    260a:	|     |  |      movea.l 168(sp),a0
    260e:	|     |  |      move.l (a0),d0
    2610:	|     |  |      move.l a1,d1
    2612:	|     |  |      sub.l d0,d1
    2614:	|     |  |      move.l 1cefe <winWidth>,d0
    261a:	|     |  |      cmp.l d1,d0
    261c:	|     |  |  ,-- bge.s 2630 <CstPasteChar+0x3a6>
    {    
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    261e:	|     |  |  |   pea 185a1 <PutChar+0x357>
    2624:	|     |  |  |   jsr 177a8 <KPrintF>
    262a:	|     |  |  |   addq.l #4,sp
      return;
    262c:	+-----|--|--|-- bra.w 2c7c <CstPasteChar+0x9f2>
    }
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    2630:	|     |  |  '-> clr.w 162(sp)
    cutwordssource = (x+single->width - winWidth)/16;
    2634:	|     |  |      movea.w 10(sp),a1
    2638:	|     |  |      movea.l 168(sp),a0
    263c:	|     |  |      move.l (a0),d0
    263e:	|     |  |      add.l a1,d0
    2640:	|     |  |      move.l d0,d1
    2642:	|     |  |      move.l 1cefe <winWidth>,d0
    2648:	|     |  |      sub.l d0,d1
    264a:	|     |  |      move.l d1,d0
    264c:	|     |  |      lsr.l #4,d0
    264e:	|     |  |      move.w d0,160(sp)
    cutmaskpixel = 0;
    2652:	|     |  |      clr.w 158(sp)
    bltalwm = 0xffff; //Last word contains source data to be blit
    2656:	|     |  |      move.w #-1,156(sp)
    bltapt = (ULONG) single->data+ystartsrc*single->width/8;
    265c:	|     |  |      movea.l 168(sp),a0
    2660:	|     |  |      move.l 24(a0),d0
    2664:	|     |  |      move.l d0,d2
    2666:	|     |  |      movea.l 168(sp),a0
    266a:	|     |  |      move.l (a0),d0
    266c:	|     |  |      move.l 132(sp),-(sp)
    2670:	|     |  |      move.l d0,-(sp)
    2672:	|     |  |      jsr 18134 <__mulsi3>
    2678:	|     |  |      addq.l #8,sp
    267a:	|     |  |      lsr.l #3,d0
    267c:	|     |  |      move.l d2,d1
    267e:	|     |  |      add.l d0,d1
    2680:	|     |  |      move.l d1,152(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    2684:	|     |  |      move.l 1cefe <winWidth>,d0
    268a:	|     |  |      move.l 136(sp),-(sp)
    268e:	|     |  |      move.l d0,-(sp)
    2690:	|     |  |      jsr 18134 <__mulsi3>
    2696:	|     |  |      addq.l #8,sp
    2698:	|     |  |      lsr.l #3,d0
    269a:	|     |  |      move.l 108(sp),d1
    269e:	|     |  |      add.l d0,d1
    26a0:	|     |  |      move.w 10(sp),d0
    26a4:	|     |  |  ,-- bpl.s 26aa <CstPasteChar+0x420>
    26a6:	|     |  |  |   addi.w #15,d0
    26aa:	|     |  |  '-> asr.w #4,d0
    26ac:	|     |  |      movea.w d0,a0
    26ae:	|     |  |      move.l a0,d0
    26b0:	|     |  |      add.l a0,d0
    26b2:	|     |  |      move.l d1,d2
    26b4:	|     |  |      add.l d0,d2
    26b6:	|     |  |      move.l d2,148(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    26ba:	|     |  |      move.l 1cefe <winWidth>,d0
    26c0:	|     |  |      move.l 136(sp),-(sp)
    26c4:	|     |  |      move.l d0,-(sp)
    26c6:	|     |  |      jsr 18134 <__mulsi3>
    26cc:	|     |  |      addq.l #8,sp
    26ce:	|     |  |      lsr.l #3,d0
    26d0:	|     |  |      move.l 108(sp),d1
    26d4:	|     |  |      add.l d0,d1
    26d6:	|     |  |      move.w 10(sp),d0
    26da:	|     |  |  ,-- bpl.s 26e0 <CstPasteChar+0x456>
    26dc:	|     |  |  |   addi.w #15,d0
    26e0:	|     |  |  '-> asr.w #4,d0
    26e2:	|     |  |      movea.w d0,a0
    26e4:	|     |  |      move.l a0,d0
    26e6:	|     |  |      add.l a0,d0
    26e8:	|     |  |      move.l d1,d2
    26ea:	|     |  |      add.l d0,d2
    26ec:	|     |  |      move.l d2,144(sp)
    bltcon0 = ((single->width%16) << 12);    
    26f0:	|     |  |      movea.l 168(sp),a0
    26f4:	|     |  |      move.l (a0),d0
    26f6:	|     |  |      andi.l #-2147483633,d0
    26fc:	|     |  |  ,-- bpl.s 2706 <CstPasteChar+0x47c>
    26fe:	|     |  |  |   subq.l #1,d0
    2700:	|     |  |  |   moveq #-16,d1
    2702:	|     |  |  |   or.l d1,d0
    2704:	|     |  |  |   addq.l #1,d0
    2706:	|     |  |  '-> moveq #12,d2
    2708:	|     |  |      lsl.l d2,d0
    270a:	|     |  |      move.l d0,140(sp)
    
    struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    270e:	|     |  |      move.l 1cee2 <CstCleanupQueueDrawBuffer>,76(sp)
    CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    2716:	|     |  |      moveq #20,d0
    2718:	|     |  |      move.l d0,72(sp)
    271c:	|     |  |      clr.l 68(sp)
    2720:	|     |  |      move.l 1cfb6 <SysBase>,d0
    2726:	|     |  |      movea.l d0,a6
    2728:	|     |  |      move.l 72(sp),d0
    272c:	|     |  |      move.l 68(sp),d1
    2730:	|     |  |      jsr -684(a6)
    2734:	|     |  |      move.l d0,64(sp)
    2738:	|     |  |      move.l 64(sp),d0
    273c:	|     |  |      move.l d0,1cee2 <CstCleanupQueueDrawBuffer>
    CstCleanupQueueDrawBuffer->next = next;
    2742:	|     |  |      movea.l 1cee2 <CstCleanupQueueDrawBuffer>,a0
    2748:	|     |  |      move.l 76(sp),16(a0)
    CstCleanupQueueDrawBuffer->x = x;
    274e:	|     |  |      movea.l 1cee2 <CstCleanupQueueDrawBuffer>,a0
    2754:	|     |  |      move.w 10(sp),d0
    2758:	|     |  |      move.w d0,(a0)
    CstCleanupQueueDrawBuffer->y = ystartdst;
    275a:	|     |  |      movea.l 1cee2 <CstCleanupQueueDrawBuffer>,a0
    2760:	|     |  |      move.l 136(sp),d0
    2764:	|     |  |      move.w d0,2(a0)
    CstCleanupQueueDrawBuffer->person = NULL;
    2768:	|     |  |      movea.l 1cee2 <CstCleanupQueueDrawBuffer>,a0
    276e:	|     |  |      clr.l 4(a0)
    CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource;
    2772:	|     |  |      movea.l 168(sp),a0
    2776:	|     |  |      move.l (a0),d0
    2778:	|     |  |      movea.l d0,a0
    277a:	|     |  |      cmpa.w #0,a0
    277e:	|     |  |  ,-- bge.s 2784 <CstPasteChar+0x4fa>
    2780:	|     |  |  |   lea 15(a0),a0
    2784:	|     |  |  '-> move.l a0,d0
    2786:	|     |  |      asr.l #4,d0
    2788:	|     |  |      move.l d0,d0
    278a:	|     |  |      movea.l 1cee2 <CstCleanupQueueDrawBuffer>,a0
    2790:	|     |  |      add.w 160(sp),d0
    2794:	|     |  |      move.w d0,8(a0)
    CstCleanupQueueDrawBuffer->height = blitheight;
    2798:	|     |  |      movea.l 1cee2 <CstCleanupQueueDrawBuffer>,a0
    279e:	|     |  |      move.l 128(sp),d0
    27a2:	|     |  |      move.w d0,10(a0)
    CstCleanupQueueDrawBuffer->startxinbytes = (x/16)*2;
    27a6:	|     |  |      move.w 10(sp),d0
    27aa:	|     |  |  ,-- bpl.s 27b0 <CstPasteChar+0x526>
    27ac:	|     |  |  |   addi.w #15,d0
    27b0:	|     |  |  '-> asr.w #4,d0
    27b2:	|     |  |      movea.l 1cee2 <CstCleanupQueueDrawBuffer>,a0
    27b8:	|     |  |      add.w d0,d0
    27ba:	|     |  |      move.w d0,12(a0)
    CstCleanupQueueDrawBuffer->starty = ystartdst;
    27be:	|     |  |      movea.l 1cee2 <CstCleanupQueueDrawBuffer>,a0
    27c4:	|     |  |      move.l 136(sp),d0
    27c8:	|     |  |      move.w d0,14(a0)

    next = CstCleanupQueueViewBuffer;
    27cc:	|     |  |      move.l 1cede <CstCleanupQueueViewBuffer>,76(sp)
    CstCleanupQueueViewBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    27d4:	|     |  |      moveq #20,d1
    27d6:	|     |  |      move.l d1,60(sp)
    27da:	|     |  |      clr.l 56(sp)
    27de:	|     |  |      move.l 1cfb6 <SysBase>,d0
    27e4:	|     |  |      movea.l d0,a6
    27e6:	|     |  |      move.l 60(sp),d0
    27ea:	|     |  |      move.l 56(sp),d1
    27ee:	|     |  |      jsr -684(a6)
    27f2:	|     |  |      move.l d0,52(sp)
    27f6:	|     |  |      move.l 52(sp),d0
    27fa:	|     |  |      move.l d0,1cede <CstCleanupQueueViewBuffer>
    CstCleanupQueueViewBuffer->next = next;
    2800:	|     |  |      movea.l 1cede <CstCleanupQueueViewBuffer>,a0
    2806:	|     |  |      move.l 76(sp),16(a0)
    CstCleanupQueueViewBuffer->x = x;
    280c:	|     |  |      movea.l 1cede <CstCleanupQueueViewBuffer>,a0
    2812:	|     |  |      move.w 10(sp),d0
    2816:	|     |  |      move.w d0,(a0)
    CstCleanupQueueViewBuffer->y = ystartdst;
    2818:	|     |  |      movea.l 1cede <CstCleanupQueueViewBuffer>,a0
    281e:	|     |  |      move.l 136(sp),d0
    2822:	|     |  |      move.w d0,2(a0)
    CstCleanupQueueViewBuffer->person = NULL;
    2826:	|     |  |      movea.l 1cede <CstCleanupQueueViewBuffer>,a0
    282c:	|     |  |      clr.l 4(a0)
    CstCleanupQueueViewBuffer->widthinwords = single->width/16+cutwordssource;
    2830:	|     |  |      movea.l 168(sp),a0
    2834:	|     |  |      move.l (a0),d0
    2836:	|     |  |      movea.l d0,a0
    2838:	|     |  |      cmpa.w #0,a0
    283c:	|     |  |  ,-- bge.s 2842 <CstPasteChar+0x5b8>
    283e:	|     |  |  |   lea 15(a0),a0
    2842:	|     |  |  '-> move.l a0,d0
    2844:	|     |  |      asr.l #4,d0
    2846:	|     |  |      move.l d0,d0
    2848:	|     |  |      movea.l 1cede <CstCleanupQueueViewBuffer>,a0
    284e:	|     |  |      add.w 160(sp),d0
    2852:	|     |  |      move.w d0,8(a0)
    CstCleanupQueueViewBuffer->height = blitheight;
    2856:	|     |  |      movea.l 1cede <CstCleanupQueueViewBuffer>,a0
    285c:	|     |  |      move.l 128(sp),d0
    2860:	|     |  |      move.w d0,10(a0)
    CstCleanupQueueViewBuffer->startxinbytes = (x/16)*2;
    2864:	|     |  |      move.w 10(sp),d0
    2868:	|     |  |  ,-- bpl.s 286e <CstPasteChar+0x5e4>
    286a:	|     |  |  |   addi.w #15,d0
    286e:	|     |  |  '-> asr.w #4,d0
    2870:	|     |  |      movea.l 1cede <CstCleanupQueueViewBuffer>,a0
    2876:	|     |  |      add.w d0,d0
    2878:	|     |  |      move.w d0,12(a0)
    CstCleanupQueueViewBuffer->starty = ystartdst;     
    287c:	|     |  |      movea.l 1cede <CstCleanupQueueViewBuffer>,a0
    2882:	|     |  |      move.l 136(sp),d0
    2886:	|     |  |      move.w d0,14(a0)
    288a:	|     +--|----- bra.w 2ae4 <CstPasteChar+0x85a>
  } else { //Whole Sprite on Screen

    extrawords = 1;
    288e:	|     |  '----> move.w #1,162(sp)
    cutwordssource = 0;
    2894:	|     |         clr.w 160(sp)
    cutmaskpixel = 0;
    2898:	|     |         clr.w 158(sp)
    bltalwm = 0; //Last Word of this channel almost masked out
    289c:	|     |         clr.w 156(sp)
    bltapt = (ULONG) single->data+ystartsrc*(single->width/16)*2;
    28a0:	|     |         movea.l 168(sp),a0
    28a4:	|     |         move.l 24(a0),d0
    28a8:	|     |         move.l d0,d2
    28aa:	|     |         movea.l 168(sp),a0
    28ae:	|     |         move.l (a0),d0
    28b0:	|     |         movea.l d0,a0
    28b2:	|     |         cmpa.w #0,a0
    28b6:	|     |     ,-- bge.s 28bc <CstPasteChar+0x632>
    28b8:	|     |     |   lea 15(a0),a0
    28bc:	|     |     '-> move.l a0,d0
    28be:	|     |         asr.l #4,d0
    28c0:	|     |         move.l 132(sp),-(sp)
    28c4:	|     |         move.l d0,-(sp)
    28c6:	|     |         jsr 18134 <__mulsi3>
    28cc:	|     |         addq.l #8,sp
    28ce:	|     |         add.l d0,d0
    28d0:	|     |         move.l d2,d1
    28d2:	|     |         add.l d0,d1
    28d4:	|     |         move.l d1,152(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    28d8:	|     |         move.l 1cefe <winWidth>,d0
    28de:	|     |         move.l 136(sp),-(sp)
    28e2:	|     |         move.l d0,-(sp)
    28e4:	|     |         jsr 18134 <__mulsi3>
    28ea:	|     |         addq.l #8,sp
    28ec:	|     |         lsr.l #3,d0
    28ee:	|     |         move.l 108(sp),d1
    28f2:	|     |         add.l d0,d1
    28f4:	|     |         move.w 10(sp),d0
    28f8:	|     |     ,-- bpl.s 28fe <CstPasteChar+0x674>
    28fa:	|     |     |   addi.w #15,d0
    28fe:	|     |     '-> asr.w #4,d0
    2900:	|     |         movea.w d0,a0
    2902:	|     |         move.l a0,d0
    2904:	|     |         add.l a0,d0
    2906:	|     |         move.l d1,d2
    2908:	|     |         add.l d0,d2
    290a:	|     |         move.l d2,148(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    290e:	|     |         move.l 1cefe <winWidth>,d0
    2914:	|     |         move.l 136(sp),-(sp)
    2918:	|     |         move.l d0,-(sp)
    291a:	|     |         jsr 18134 <__mulsi3>
    2920:	|     |         addq.l #8,sp
    2922:	|     |         lsr.l #3,d0
    2924:	|     |         move.l 108(sp),d1
    2928:	|     |         add.l d0,d1
    292a:	|     |         move.w 10(sp),d0
    292e:	|     |     ,-- bpl.s 2934 <CstPasteChar+0x6aa>
    2930:	|     |     |   addi.w #15,d0
    2934:	|     |     '-> asr.w #4,d0
    2936:	|     |         movea.w d0,a0
    2938:	|     |         move.l a0,d0
    293a:	|     |         add.l a0,d0
    293c:	|     |         move.l d1,d2
    293e:	|     |         add.l d0,d2
    2940:	|     |         move.l d2,144(sp)
    bltcon0 = ((x%16) << 12);
    2944:	|     |         move.w 10(sp),d0
    2948:	|     |         andi.w #-32753,d0
    294c:	|     |     ,-- bpl.s 2956 <CstPasteChar+0x6cc>
    294e:	|     |     |   subq.w #1,d0
    2950:	|     |     |   ori.w #-16,d0
    2954:	|     |     |   addq.w #1,d0
    2956:	|     |     '-> ext.l d0
    2958:	|     |         moveq #12,d1
    295a:	|     |         lsl.l d1,d0
    295c:	|     |         move.l d0,140(sp)

    struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    2960:	|     |         move.l 1cee2 <CstCleanupQueueDrawBuffer>,104(sp)
    CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    2968:	|     |         moveq #20,d2
    296a:	|     |         move.l d2,100(sp)
    296e:	|     |         clr.l 96(sp)
    2972:	|     |         move.l 1cfb6 <SysBase>,d0
    2978:	|     |         movea.l d0,a6
    297a:	|     |         move.l 100(sp),d0
    297e:	|     |         move.l 96(sp),d1
    2982:	|     |         jsr -684(a6)
    2986:	|     |         move.l d0,92(sp)
    298a:	|     |         move.l 92(sp),d0
    298e:	|     |         move.l d0,1cee2 <CstCleanupQueueDrawBuffer>
    CstCleanupQueueDrawBuffer->next = next;
    2994:	|     |         movea.l 1cee2 <CstCleanupQueueDrawBuffer>,a0
    299a:	|     |         move.l 104(sp),16(a0)
    CstCleanupQueueDrawBuffer->x = x;
    29a0:	|     |         movea.l 1cee2 <CstCleanupQueueDrawBuffer>,a0
    29a6:	|     |         move.w 10(sp),d0
    29aa:	|     |         move.w d0,(a0)
    CstCleanupQueueDrawBuffer->y = ystartdst;
    29ac:	|     |         movea.l 1cee2 <CstCleanupQueueDrawBuffer>,a0
    29b2:	|     |         move.l 136(sp),d0
    29b6:	|     |         move.w d0,2(a0)
    CstCleanupQueueDrawBuffer->person = NULL;
    29ba:	|     |         movea.l 1cee2 <CstCleanupQueueDrawBuffer>,a0
    29c0:	|     |         clr.l 4(a0)
    CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords;
    29c4:	|     |         movea.l 168(sp),a0
    29c8:	|     |         move.l (a0),d0
    29ca:	|     |         movea.l d0,a0
    29cc:	|     |         cmpa.w #0,a0
    29d0:	|     |     ,-- bge.s 29d6 <CstPasteChar+0x74c>
    29d2:	|     |     |   lea 15(a0),a0
    29d6:	|     |     '-> move.l a0,d0
    29d8:	|     |         asr.l #4,d0
    29da:	|     |         move.l d0,d0
    29dc:	|     |         add.w 160(sp),d0
    29e0:	|     |         movea.l 1cee2 <CstCleanupQueueDrawBuffer>,a0
    29e6:	|     |         add.w 162(sp),d0
    29ea:	|     |         move.w d0,8(a0)
    CstCleanupQueueDrawBuffer->height = blitheight;
    29ee:	|     |         movea.l 1cee2 <CstCleanupQueueDrawBuffer>,a0
    29f4:	|     |         move.l 128(sp),d0
    29f8:	|     |         move.w d0,10(a0)
    CstCleanupQueueDrawBuffer->startxinbytes = (x/16)*2;
    29fc:	|     |         move.w 10(sp),d0
    2a00:	|     |     ,-- bpl.s 2a06 <CstPasteChar+0x77c>
    2a02:	|     |     |   addi.w #15,d0
    2a06:	|     |     '-> asr.w #4,d0
    2a08:	|     |         movea.l 1cee2 <CstCleanupQueueDrawBuffer>,a0
    2a0e:	|     |         add.w d0,d0
    2a10:	|     |         move.w d0,12(a0)
    CstCleanupQueueDrawBuffer->starty = ystartdst;
    2a14:	|     |         movea.l 1cee2 <CstCleanupQueueDrawBuffer>,a0
    2a1a:	|     |         move.l 136(sp),d0
    2a1e:	|     |         move.w d0,14(a0)

    next = CstCleanupQueueViewBuffer;
    2a22:	|     |         move.l 1cede <CstCleanupQueueViewBuffer>,104(sp)
    CstCleanupQueueViewBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    2a2a:	|     |         moveq #20,d0
    2a2c:	|     |         move.l d0,88(sp)
    2a30:	|     |         clr.l 84(sp)
    2a34:	|     |         move.l 1cfb6 <SysBase>,d0
    2a3a:	|     |         movea.l d0,a6
    2a3c:	|     |         move.l 88(sp),d0
    2a40:	|     |         move.l 84(sp),d1
    2a44:	|     |         jsr -684(a6)
    2a48:	|     |         move.l d0,80(sp)
    2a4c:	|     |         move.l 80(sp),d0
    2a50:	|     |         move.l d0,1cede <CstCleanupQueueViewBuffer>
    CstCleanupQueueViewBuffer->next = next;
    2a56:	|     |         movea.l 1cede <CstCleanupQueueViewBuffer>,a0
    2a5c:	|     |         move.l 104(sp),16(a0)
    CstCleanupQueueViewBuffer->x = x;
    2a62:	|     |         movea.l 1cede <CstCleanupQueueViewBuffer>,a0
    2a68:	|     |         move.w 10(sp),d0
    2a6c:	|     |         move.w d0,(a0)
    CstCleanupQueueViewBuffer->y = ystartdst;
    2a6e:	|     |         movea.l 1cede <CstCleanupQueueViewBuffer>,a0
    2a74:	|     |         move.l 136(sp),d0
    2a78:	|     |         move.w d0,2(a0)
    CstCleanupQueueViewBuffer->person = NULL;
    2a7c:	|     |         movea.l 1cede <CstCleanupQueueViewBuffer>,a0
    2a82:	|     |         clr.l 4(a0)
    CstCleanupQueueViewBuffer->widthinwords = single->width/16+cutwordssource+extrawords;
    2a86:	|     |         movea.l 168(sp),a0
    2a8a:	|     |         move.l (a0),d0
    2a8c:	|     |         movea.l d0,a0
    2a8e:	|     |         cmpa.w #0,a0
    2a92:	|     |     ,-- bge.s 2a98 <CstPasteChar+0x80e>
    2a94:	|     |     |   lea 15(a0),a0
    2a98:	|     |     '-> move.l a0,d0
    2a9a:	|     |         asr.l #4,d0
    2a9c:	|     |         move.l d0,d0
    2a9e:	|     |         add.w 160(sp),d0
    2aa2:	|     |         movea.l 1cede <CstCleanupQueueViewBuffer>,a0
    2aa8:	|     |         add.w 162(sp),d0
    2aac:	|     |         move.w d0,8(a0)
    CstCleanupQueueViewBuffer->height = blitheight;
    2ab0:	|     |         movea.l 1cede <CstCleanupQueueViewBuffer>,a0
    2ab6:	|     |         move.l 128(sp),d0
    2aba:	|     |         move.w d0,10(a0)
    CstCleanupQueueViewBuffer->startxinbytes = (x/16)*2;
    2abe:	|     |         move.w 10(sp),d0
    2ac2:	|     |     ,-- bpl.s 2ac8 <CstPasteChar+0x83e>
    2ac4:	|     |     |   addi.w #15,d0
    2ac8:	|     |     '-> asr.w #4,d0
    2aca:	|     |         movea.l 1cede <CstCleanupQueueViewBuffer>,a0
    2ad0:	|     |         add.w d0,d0
    2ad2:	|     |         move.w d0,12(a0)
    CstCleanupQueueViewBuffer->starty = ystartdst;    
    2ad6:	|     |         movea.l 1cede <CstCleanupQueueViewBuffer>,a0
    2adc:	|     |         move.l 136(sp),d0
    2ae0:	|     |         move.w d0,14(a0)
    
  }

  UWORD bltafwm = 0xffff >> cutmaskpixel;
    2ae4:	|     '-------> moveq #0,d0
    2ae6:	|               move.w 158(sp),d0
    2aea:	|               moveq #0,d1
    2aec:	|               not.w d1
    2aee:	|               asr.l d0,d1
    2af0:	|               move.w d1,22(sp)
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    2af4:	|               moveq #0,d1
    2af6:	|               move.w 160(sp),d1
    2afa:	|               moveq #0,d0
    2afc:	|               move.w 162(sp),d0
    2b00:	|               sub.l d0,d1
    2b02:	|               move.l d1,d0
    2b04:	|               add.w d0,d0
    2b06:	|               move.w d0,20(sp)
  WORD bltcmod = winWidth/8-blitwidth*2-extrawords*2+cutwordssource*2;
    2b0a:	|               move.l 1cefe <winWidth>,d0
    2b10:	|               lsr.l #3,d0
    2b12:	|               move.l d0,d2
    2b14:	|               move.w 160(sp),d1
    2b18:	|               sub.w 162(sp),d1
    2b1c:	|               move.l 124(sp),d0
    2b20:	|               sub.w d0,d1
    2b22:	|               move.w d1,d0
    2b24:	|               add.w d1,d0
    2b26:	|               add.w d2,d0
    2b28:	|               move.w d0,18(sp)
  WORD bltdmod = winWidth/8-blitwidth*2-extrawords*2+cutwordssource*2;
    2b2c:	|               move.l 1cefe <winWidth>,d0
    2b32:	|               lsr.l #3,d0
    2b34:	|               move.l d0,d2
    2b36:	|               move.w 160(sp),d1
    2b3a:	|               sub.w 162(sp),d1
    2b3e:	|               move.l 124(sp),d0
    2b42:	|               sub.w d0,d1
    2b44:	|               move.w d1,d0
    2b46:	|               add.w d1,d0
    2b48:	|               add.w d2,d0
    2b4a:	|               move.w d0,16(sp)

  WaitBlit();
    2b4e:	|               move.l 1cfc2 <GfxBase>,d0
    2b54:	|               movea.l d0,a6
    2b56:	|               jsr -228(a6)

  custom->bltafwm = bltafwm;
    2b5a:	|               movea.l 112(sp),a0
    2b5e:	|               move.w 22(sp),68(a0)
  custom->bltalwm = bltalwm;
    2b64:	|               movea.l 112(sp),a0
    2b68:	|               move.w 156(sp),70(a0)
  custom->bltamod = bltamod;
    2b6e:	|               move.w 20(sp),d0
    2b72:	|               movea.l 112(sp),a0
    2b76:	|               move.w d0,100(a0)
  custom->bltcmod = bltcmod;
    2b7a:	|               move.w 18(sp),d0
    2b7e:	|               movea.l 112(sp),a0
    2b82:	|               move.w d0,96(a0)
  custom->bltdmod = bltdmod;
    2b86:	|               move.w 16(sp),d0
    2b8a:	|               movea.l 112(sp),a0
    2b8e:	|               move.w d0,102(a0)

  UWORD bltcptplus = winWidth/8*winHeight;
    2b92:	|               move.l 1cefe <winWidth>,d0
    2b98:	|               lsr.l #3,d0
    2b9a:	|               move.l d0,d1
    2b9c:	|               move.l 1cf02 <winHeight>,d0
    2ba2:	|               move.l d0,d0
    2ba4:	|               move.w d1,d2
    2ba6:	|               muls.w d0,d2
    2ba8:	|               move.w d2,14(sp)
  UWORD tmp = textPaletteIndex;
    2bac:	|               move.w 1cec2 <textPaletteIndex>,122(sp)

  UWORD minterm;
  //Apply palette color to planeblit
  //Ugly double code in the name of performance
  UWORD tmp2 = tmp & 0x01;
    2bb4:	|               move.w 122(sp),d0
    2bb8:	|               andi.w #1,d0
    2bbc:	|               move.w d0,12(sp)
  if(tmp2) {
    2bc0:	|        ,----- beq.s 2bca <CstPasteChar+0x940>
    minterm = 0xbfa;
    2bc2:	|        |      move.w #3066,120(sp)
    2bc8:	|        |  ,-- bra.s 2bd0 <CstPasteChar+0x946>
  } else {
    minterm = 0xb0a;
    2bca:	|        '--|-> move.w #2826,120(sp)
  }

  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2bd0:	|           '-> clr.l 116(sp)
    2bd4:	|     ,-------- bra.w 2c72 <CstPasteChar+0x9e8>
  {

    custom->bltcon0 = bltcon0 + minterm;
    2bd8:	|  ,--|-------> move.l 140(sp),d0
    2bdc:	|  |  |         add.w 120(sp),d0
    2be0:	|  |  |         movea.l 112(sp),a0
    2be4:	|  |  |         move.w d0,64(a0)
    custom->bltapt = (APTR) bltapt;
    2be8:	|  |  |         move.l 152(sp),d0
    2bec:	|  |  |         movea.l 112(sp),a0
    2bf0:	|  |  |         move.l d0,80(a0)
    custom->bltcpt = (APTR) bltcpt;
    2bf4:	|  |  |         move.l 148(sp),d0
    2bf8:	|  |  |         movea.l 112(sp),a0
    2bfc:	|  |  |         move.l d0,72(a0)
    custom->bltdpt = (APTR) bltdpt;
    2c00:	|  |  |         move.l 144(sp),d0
    2c04:	|  |  |         movea.l 112(sp),a0
    2c08:	|  |  |         move.l d0,84(a0)
    custom->bltsize = (blitheight << 6) + blitwidth-cutwordssource+extrawords;
    2c0c:	|  |  |         move.l 128(sp),d0
    2c10:	|  |  |         lsl.w #6,d0
    2c12:	|  |  |         move.l 124(sp),d1
    2c16:	|  |  |         add.w d1,d0
    2c18:	|  |  |         sub.w 160(sp),d0
    2c1c:	|  |  |         add.w 162(sp),d0
    2c20:	|  |  |         movea.l 112(sp),a0
    2c24:	|  |  |         move.w d0,88(a0)
    bltcpt += bltcptplus;
    2c28:	|  |  |         moveq #0,d0
    2c2a:	|  |  |         move.w 14(sp),d0
    2c2e:	|  |  |         add.l d0,148(sp)
    bltdpt += bltcptplus;
    2c32:	|  |  |         moveq #0,d0
    2c34:	|  |  |         move.w 14(sp),d0
    2c38:	|  |  |         add.l d0,144(sp)

    //Apply palette color to planeblit
    //Ugly double code in the name of performance
    tmp = tmp >> 1;
    2c3c:	|  |  |         move.w 122(sp),d0
    2c40:	|  |  |         lsr.w #1,d0
    2c42:	|  |  |         move.w d0,122(sp)
    tmp2 = tmp & 0x01;
    2c46:	|  |  |         move.w 122(sp),d1
    2c4a:	|  |  |         andi.w #1,d1
    2c4e:	|  |  |         move.w d1,12(sp)
    if(tmp2) {
    2c52:	|  |  |  ,----- beq.s 2c5c <CstPasteChar+0x9d2>
      minterm = 0xbfa;
    2c54:	|  |  |  |      move.w #3066,120(sp)
    2c5a:	|  |  |  |  ,-- bra.s 2c62 <CstPasteChar+0x9d8>
    } else {
      minterm = 0xb0a;
    2c5c:	|  |  |  '--|-> move.w #2826,120(sp)
    }   

    WaitBlit();     
    2c62:	|  |  |     '-> move.l 1cfc2 <GfxBase>,d0
    2c68:	|  |  |         movea.l d0,a6
    2c6a:	|  |  |         jsr -228(a6)
  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2c6e:	|  |  |         addq.l #1,116(sp)
    2c72:	|  |  '-------> moveq #4,d2
    2c74:	|  |            cmp.l 116(sp),d2
    2c78:	|  '----------- bge.w 2bd8 <CstPasteChar+0x94e>
  }   
  //custom->color[0] = 0x000;
}
    2c7c:	'-------------> move.l (sp)+,d2
    2c7e:	                movea.l (sp)+,a6
    2c80:	                lea 156(sp),sp
    2c84:	                rts

00002c86 <CstRestoreScreen>:


void CstRestoreScreen()
{
    2c86:	                   lea -36(sp),sp
    2c8a:	                   move.l a6,-(sp)
    2c8c:	                   move.l d2,-(sp)
  volatile struct Custom *custom = (struct Custom*)0xdff000;  
    2c8e:	                   move.l #14675968,16(sp)
  //custom->color[0] = 0xf00;
  //struct CleanupQueue *cursor  = CstCleanupQueueDrawBuffer;
  if(!CstCleanupQueueDrawBuffer || !CstDrawBuffer) {
    2c96:	                   move.l 1cee2 <CstCleanupQueueDrawBuffer>,d0
    2c9c:	,----------------- beq.w 2efc <CstRestoreScreen+0x276>
    2ca0:	|                  move.l 1ceda <CstDrawBuffer>,d0
    2ca6:	+----------------- beq.w 2efc <CstRestoreScreen+0x276>
    return;
  } 

  UWORD *colorpos = CstPalette;
    2caa:	|                  move.l 1ceea <CstPalette>,40(sp)
  UWORD *tmp = CstClColor;
    2cb2:	|                  move.l 1cee6 <CstClColor>,36(sp)
  for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes
    2cba:	|                  clr.l 32(sp)
    2cbe:	|              ,-- bra.s 2cf0 <CstRestoreScreen+0x6a>
    *tmp++;
    2cc0:	|           ,--|-> move.l 36(sp),d0
    2cc4:	|           |  |   move.l d0,d1
    2cc6:	|           |  |   addq.l #2,d1
    2cc8:	|           |  |   move.l d1,36(sp)
    *tmp++ = *colorpos++;
    2ccc:	|           |  |   move.l 40(sp),d1
    2cd0:	|           |  |   move.l d1,d2
    2cd2:	|           |  |   addq.l #2,d2
    2cd4:	|           |  |   move.l d2,40(sp)
    2cd8:	|           |  |   move.l 36(sp),d0
    2cdc:	|           |  |   move.l d0,d2
    2cde:	|           |  |   addq.l #2,d2
    2ce0:	|           |  |   move.l d2,36(sp)
    2ce4:	|           |  |   movea.l d1,a0
    2ce6:	|           |  |   move.w (a0),d1
    2ce8:	|           |  |   movea.l d0,a0
    2cea:	|           |  |   move.w d1,(a0)
  for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes
    2cec:	|           |  |   addq.l #1,32(sp)
    2cf0:	|           |  '-> moveq #31,d0
    2cf2:	|           |      cmp.l 32(sp),d0
    2cf6:	|           '----- bge.s 2cc0 <CstRestoreScreen+0x3a>
  }

  WaitBlit();
    2cf8:	|                  move.l 1cfc2 <GfxBase>,d0
    2cfe:	|                  movea.l d0,a6
    2d00:	|                  jsr -228(a6)
  
  custom->bltafwm = 0xffff;
    2d04:	|                  movea.l 16(sp),a0
    2d08:	|                  move.w #-1,68(a0)
  custom->bltalwm = 0xffff;  
    2d0e:	|                  movea.l 16(sp),a0
    2d12:	|                  move.w #-1,70(a0)
  custom->bltcon0 = 0x9f0;
    2d18:	|                  movea.l 16(sp),a0
    2d1c:	|                  move.w #2544,64(a0)
  
  while(CstCleanupQueueDrawBuffer)
    2d22:	|     ,----------- bra.w 2ef0 <CstRestoreScreen+0x26a>
  {    

    if( CstCleanupQueueDrawBuffer->person && CstCleanupQueueDrawBuffer->person->samePosCount < 3
    2d26:	|  ,--|----------> movea.l 1cee2 <CstCleanupQueueDrawBuffer>,a0
    2d2c:	|  |  |            move.l 4(a0),d0
    2d30:	|  |  |     ,----- beq.s 2d46 <CstRestoreScreen+0xc0>
    2d32:	|  |  |     |      movea.l 1cee2 <CstCleanupQueueDrawBuffer>,a0
    2d38:	|  |  |     |      movea.l 4(a0),a0
    2d3c:	|  |  |     |      move.l 16(a0),d0
    2d40:	|  |  |     |      moveq #2,d1
    2d42:	|  |  |     |      cmp.l d0,d1
    2d44:	|  |  |     |  ,-- bge.s 2d54 <CstRestoreScreen+0xce>
      || CstCleanupQueueDrawBuffer->person == NULL)
    2d46:	|  |  |     '--|-> movea.l 1cee2 <CstCleanupQueueDrawBuffer>,a0
    2d4c:	|  |  |        |   move.l 4(a0),d0
    2d50:	|  |  |  ,-----|-- bne.w 2ebe <CstRestoreScreen+0x238>
    {
      custom->bltamod = winWidth/8-CstCleanupQueueDrawBuffer->widthinwords*2;
    2d54:	|  |  |  |     '-> move.l 1cefe <winWidth>,d0
    2d5a:	|  |  |  |         lsr.l #3,d0
    2d5c:	|  |  |  |         move.l d0,d1
    2d5e:	|  |  |  |         movea.l 1cee2 <CstCleanupQueueDrawBuffer>,a0
    2d64:	|  |  |  |         move.w 8(a0),d0
    2d68:	|  |  |  |         add.w d0,d0
    2d6a:	|  |  |  |         sub.w d0,d1
    2d6c:	|  |  |  |         movea.l 16(sp),a0
    2d70:	|  |  |  |         move.w d1,100(a0)
      custom->bltdmod = winWidth/8-CstCleanupQueueDrawBuffer->widthinwords*2;
    2d74:	|  |  |  |         move.l 1cefe <winWidth>,d0
    2d7a:	|  |  |  |         lsr.l #3,d0
    2d7c:	|  |  |  |         move.l d0,d1
    2d7e:	|  |  |  |         movea.l 1cee2 <CstCleanupQueueDrawBuffer>,a0
    2d84:	|  |  |  |         move.w 8(a0),d0
    2d88:	|  |  |  |         add.w d0,d0
    2d8a:	|  |  |  |         sub.w d0,d1
    2d8c:	|  |  |  |         movea.l 16(sp),a0
    2d90:	|  |  |  |         move.w d1,102(a0)
      ULONG bltapt = ((ULONG) CstBackDrop) + CstCleanupQueueDrawBuffer->starty*winWidth/8 + CstCleanupQueueDrawBuffer->startxinbytes;
    2d94:	|  |  |  |         movea.l 1cee2 <CstCleanupQueueDrawBuffer>,a0
    2d9a:	|  |  |  |         move.w 14(a0),d0
    2d9e:	|  |  |  |         move.w d0,d0
    2da0:	|  |  |  |         andi.l #65535,d0
    2da6:	|  |  |  |         move.l 1cefe <winWidth>,d1
    2dac:	|  |  |  |         move.l d1,-(sp)
    2dae:	|  |  |  |         move.l d0,-(sp)
    2db0:	|  |  |  |         jsr 18134 <__mulsi3>
    2db6:	|  |  |  |         addq.l #8,sp
    2db8:	|  |  |  |         move.l d0,d1
    2dba:	|  |  |  |         lsr.l #3,d1
    2dbc:	|  |  |  |         move.l 1ceca <CstBackDrop>,d0
    2dc2:	|  |  |  |         add.l d0,d1
    2dc4:	|  |  |  |         movea.l 1cee2 <CstCleanupQueueDrawBuffer>,a0
    2dca:	|  |  |  |         move.w 12(a0),d0
    2dce:	|  |  |  |         move.w d0,d0
    2dd0:	|  |  |  |         andi.l #65535,d0
    2dd6:	|  |  |  |         move.l d1,d2
    2dd8:	|  |  |  |         add.l d0,d2
    2dda:	|  |  |  |         move.l d2,28(sp)
      ULONG bltdpt = ((ULONG) CstDrawBuffer) + CstCleanupQueueDrawBuffer->starty*winWidth/8 + CstCleanupQueueDrawBuffer->startxinbytes;
    2dde:	|  |  |  |         movea.l 1cee2 <CstCleanupQueueDrawBuffer>,a0
    2de4:	|  |  |  |         move.w 14(a0),d0
    2de8:	|  |  |  |         move.w d0,d0
    2dea:	|  |  |  |         andi.l #65535,d0
    2df0:	|  |  |  |         move.l 1cefe <winWidth>,d1
    2df6:	|  |  |  |         move.l d1,-(sp)
    2df8:	|  |  |  |         move.l d0,-(sp)
    2dfa:	|  |  |  |         jsr 18134 <__mulsi3>
    2e00:	|  |  |  |         addq.l #8,sp
    2e02:	|  |  |  |         move.l d0,d1
    2e04:	|  |  |  |         lsr.l #3,d1
    2e06:	|  |  |  |         move.l 1ceda <CstDrawBuffer>,d0
    2e0c:	|  |  |  |         add.l d0,d1
    2e0e:	|  |  |  |         movea.l 1cee2 <CstCleanupQueueDrawBuffer>,a0
    2e14:	|  |  |  |         move.w 12(a0),d0
    2e18:	|  |  |  |         move.w d0,d0
    2e1a:	|  |  |  |         andi.l #65535,d0
    2e20:	|  |  |  |         move.l d1,d2
    2e22:	|  |  |  |         add.l d0,d2
    2e24:	|  |  |  |         move.l d2,24(sp)
      for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2e28:	|  |  |  |         clr.l 20(sp)
    2e2c:	|  |  |  |     ,-- bra.w 2eb4 <CstRestoreScreen+0x22e>
      {
        custom->bltapt = (APTR) bltapt;
    2e30:	|  |  |  |  ,--|-> move.l 28(sp),d0
    2e34:	|  |  |  |  |  |   movea.l 16(sp),a0
    2e38:	|  |  |  |  |  |   move.l d0,80(a0)
        custom->bltdpt = (APTR) bltdpt;
    2e3c:	|  |  |  |  |  |   move.l 24(sp),d0
    2e40:	|  |  |  |  |  |   movea.l 16(sp),a0
    2e44:	|  |  |  |  |  |   move.l d0,84(a0)
        custom->bltsize = (CstCleanupQueueDrawBuffer->height << 6) + CstCleanupQueueDrawBuffer->widthinwords;
    2e48:	|  |  |  |  |  |   movea.l 1cee2 <CstCleanupQueueDrawBuffer>,a0
    2e4e:	|  |  |  |  |  |   move.w 10(a0),d0
    2e52:	|  |  |  |  |  |   lsl.w #6,d0
    2e54:	|  |  |  |  |  |   movea.l 1cee2 <CstCleanupQueueDrawBuffer>,a0
    2e5a:	|  |  |  |  |  |   move.w 8(a0),d1
    2e5e:	|  |  |  |  |  |   add.w d1,d0
    2e60:	|  |  |  |  |  |   movea.l 16(sp),a0
    2e64:	|  |  |  |  |  |   move.w d0,88(a0)
        bltapt += winWidth/8*winHeight;
    2e68:	|  |  |  |  |  |   move.l 1cefe <winWidth>,d0
    2e6e:	|  |  |  |  |  |   lsr.l #3,d0
    2e70:	|  |  |  |  |  |   move.l 1cf02 <winHeight>,d1
    2e76:	|  |  |  |  |  |   move.l d1,-(sp)
    2e78:	|  |  |  |  |  |   move.l d0,-(sp)
    2e7a:	|  |  |  |  |  |   jsr 18134 <__mulsi3>
    2e80:	|  |  |  |  |  |   addq.l #8,sp
    2e82:	|  |  |  |  |  |   add.l d0,28(sp)
        bltdpt += winWidth/8*winHeight;
    2e86:	|  |  |  |  |  |   move.l 1cefe <winWidth>,d0
    2e8c:	|  |  |  |  |  |   lsr.l #3,d0
    2e8e:	|  |  |  |  |  |   move.l 1cf02 <winHeight>,d1
    2e94:	|  |  |  |  |  |   move.l d1,-(sp)
    2e96:	|  |  |  |  |  |   move.l d0,-(sp)
    2e98:	|  |  |  |  |  |   jsr 18134 <__mulsi3>
    2e9e:	|  |  |  |  |  |   addq.l #8,sp
    2ea0:	|  |  |  |  |  |   add.l d0,24(sp)
        WaitBlit();
    2ea4:	|  |  |  |  |  |   move.l 1cfc2 <GfxBase>,d0
    2eaa:	|  |  |  |  |  |   movea.l d0,a6
    2eac:	|  |  |  |  |  |   jsr -228(a6)
      for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2eb0:	|  |  |  |  |  |   addq.l #1,20(sp)
    2eb4:	|  |  |  |  |  '-> moveq #4,d0
    2eb6:	|  |  |  |  |      cmp.l 20(sp),d0
    2eba:	|  |  |  |  '----- bge.w 2e30 <CstRestoreScreen+0x1aa>
      }
    }
    struct CleanupQueue *todelete = CstCleanupQueueDrawBuffer;
    2ebe:	|  |  |  '-------> move.l 1cee2 <CstCleanupQueueDrawBuffer>,12(sp)
    CstCleanupQueueDrawBuffer = CstCleanupQueueDrawBuffer->next;  
    2ec6:	|  |  |            movea.l 1cee2 <CstCleanupQueueDrawBuffer>,a0
    2ecc:	|  |  |            move.l 16(a0),d0
    2ed0:	|  |  |            move.l d0,1cee2 <CstCleanupQueueDrawBuffer>
    FreeVec(todelete);    
    2ed6:	|  |  |            move.l 12(sp),8(sp)
    2edc:	|  |  |            move.l 1cfb6 <SysBase>,d0
    2ee2:	|  |  |            movea.l d0,a6
    2ee4:	|  |  |            movea.l 8(sp),a1
    2ee8:	|  |  |            jsr -690(a6)
    todelete = NULL;
    2eec:	|  |  |            clr.l 12(sp)
  while(CstCleanupQueueDrawBuffer)
    2ef0:	|  |  '----------> move.l 1cee2 <CstCleanupQueueDrawBuffer>,d0
    2ef6:	|  '-------------- bne.w 2d26 <CstRestoreScreen+0xa0>
    2efa:	|              ,-- bra.s 2efe <CstRestoreScreen+0x278>
    return;
    2efc:	'--------------|-> nop
  }
  //custom->color[0] = 0x000;
}
    2efe:	               '-> move.l (sp)+,d2
    2f00:	                   movea.l (sp)+,a6
    2f02:	                   lea 36(sp),sp
    2f06:	                   rts

00002f08 <CstScaleSprite>:

__attribute__((optimize("Ofast"))) 
void CstScaleSprite( struct sprite *single, struct onScreenPerson *person, WORD x, WORD y, UWORD destinationtype)
{  
    2f08:	                                                                                           lea -40(sp),sp
    2f0c:	                                                                                           movem.l d2-d7/a2-a6,-(sp)
    2f10:	                                                                                           movea.l 88(sp),a2
    2f14:	                                                                                           move.l 92(sp),64(sp)
    2f1a:	                                                                                           move.l 96(sp),d4
    2f1e:	                                                                                           movea.l 100(sp),a3
    2f22:	                                                                                           move.w d4,d2
    2f24:	                                                                                           move.w a3,d3
    2f26:	                                                                                           move.w 106(sp),52(sp)
  if( single->width == 320)
  {
    single->width = 320;
  }

  UBYTE *mask = CstDrawZBuffer( single, zBuffer, x, y);
    2f2c:	                                                                                           movea.w a3,a5
    2f2e:	                                                                                           movea.w d4,a6
    2f30:	                                                                                           move.l a5,-(sp)
    2f32:	                                                                                           move.l a6,-(sp)
    2f34:	                                                                                           move.l 1d012 <zBuffer>,-(sp)
    2f3a:	                                                                                           move.l a2,-(sp)
    2f3c:	                                                                                           jsr 1386 <CstDrawZBuffer>
    2f42:	                                                                                           move.l d0,d5

  UWORD *destination = 0;
  switch(destinationtype)
    2f44:	                                                                                           lea 16(sp),sp
    2f48:	                                                                                           cmpi.w #1,52(sp)
    2f4e:	                                                            ,----------------------------- beq.w 342e <CstScaleSprite+0x526>
    2f52:	                                                            |                              cmpi.w #2,52(sp)
    2f58:	                                                            |                 ,----------- beq.w 328c <CstScaleSprite+0x384>
    2f5c:	                                                            |                 |            suba.l a4,a4
  ULONG ystartdst;
  ULONG ystartsrc; 
  ULONG blitheight;

  if( y < 0) {
    if(y + single->height < 0) {
    2f5e:	                                                            |  ,--------------|----------> move.l 4(a2),d1
    2f62:	                                                            |  |              |            move.l a5,d0
    2f64:	                                                            |  |              |            add.l d1,d0
  if( y < 0) {
    2f66:	                                                            |  |              |            tst.w d3
    2f68:	                                                            |  |           ,--|----------- blt.w 32a0 <CstScaleSprite+0x398>
      return;
    }
    ystartdst = 0;
    ystartsrc = y*-1;
    blitheight = single->height+y;
  } else if(y+single->height > (int) winHeight) {
    2f6c:	                                                            |  |           |  |  ,-------> movea.l 1cf02 <winHeight>,a0
    2f72:	                                                            |  |           |  |  |         cmp.l a0,d0
    2f74:	                                                            |  |  ,--------|--|--|-------- ble.w 3438 <CstScaleSprite+0x530>
    if(y  > (int) winHeight) {
    2f78:	                                                            |  |  |        |  |  |         cmpa.l a5,a0
    2f7a:	                     ,--------------------------------------|--|--|--------|--|--|-------- blt.w 356a <CstScaleSprite+0x662>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
      return;
    }
    ystartdst = y;
    2f7e:	                     |                                      |  |  |        |  |  |         move.l a5,d7
    ystartsrc = 0;
    blitheight = winHeight-y;
    2f80:	                     |                                      |  |  |        |  |  |         suba.l a5,a0
    2f82:	                     |                                      |  |  |        |  |  |         move.l a0,48(sp)
    ystartsrc = 0;
    2f86:	                     |                                      |  |  |        |  |  |         moveq #0,d3


  if( x < 0) 
  { //Leftmost part outside screen

    if(x + single->width < 0) {
    2f88:	                     |                                      |  |  |  ,-----|--|--|-------> move.l (a2),d1
    2f8a:	                     |                                      |  |  |  |     |  |  |         move.l a6,d0
    2f8c:	                     |                                      |  |  |  |     |  |  |         add.l d1,d0
  if( x < 0) 
    2f8e:	                     |                                      |  |  |  |     |  |  |         tst.w d2
    2f90:	                     |                                      |  |  |  |     |  |  |  ,----- blt.w 32bc <CstScaleSprite+0x3b4>
      CstCleanupQueueViewBuffer->height = blitheight; 
      CstCleanupQueueViewBuffer->startxinbytes = 0; 
      CstCleanupQueueViewBuffer->starty = ystartdst;  
    }           
  } 
  else if(x + single->width > (int) winWidth) 
    2f94:	                     |                                      |  |  |  |     |  |  |  |  ,-> movea.l 1cefe <winWidth>,a5
    2f9a:	                     |                                      |  |  |  |     |  |  |  |  |   cmp.l a5,d0
    2f9c:	                     |                                      |  |  |  |  ,--|--|--|--|--|-- ble.w 3444 <CstScaleSprite+0x53c>
  { //Rightmost part outside screen   

    if(x - single->width > (int) winWidth)
    2fa0:	                     |                                      |  |  |  |  |  |  |  |  |  |   suba.l d1,a6
    2fa2:	                     |                                      |  |  |  |  |  |  |  |  |  |   cmpa.l a5,a6
    2fa4:	                     +--------------------------------------|--|--|--|--|--|--|--|--|--|-- bgt.w 356a <CstScaleSprite+0x662>
    {    
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
      return;
    }
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    cutwordssource = (x+single->width - winWidth)/16;
    2fa8:	                     |                                      |  |  |  |  |  |  |  |  |  |   sub.l a5,d0
    2faa:	                     |                                      |  |  |  |  |  |  |  |  |  |   lsr.l #4,d0
    2fac:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l d0,56(sp)
    2fb0:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.w d0,d6
    cutmaskpixel = 0;    
    bltapt = ((ULONG) mask)+ystartsrc*single->width/8;
    2fb2:	                     |                                      |  |  |  |  |  |  |  |  |  |   lea 18134 <__mulsi3>,a6
    2fb8:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l d3,-(sp)
    2fba:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l d1,-(sp)
    2fbc:	                     |                                      |  |  |  |  |  |  |  |  |  |   jsr (a6)
    2fbe:	                     |                                      |  |  |  |  |  |  |  |  |  |   addq.l #8,sp
    2fc0:	                     |                                      |  |  |  |  |  |  |  |  |  |   lsr.l #3,d0
    2fc2:	                     |                                      |  |  |  |  |  |  |  |  |  |   add.l d0,d5
    bltbpt = (ULONG) single->data+ystartsrc*single->width/8;
    2fc4:	                     |                                      |  |  |  |  |  |  |  |  |  |   add.l 24(a2),d0
    2fc8:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l d0,60(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    2fcc:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.w d4,d2
    2fce:	                     |                                      |  |  |  |  |  |  |  |  |  |   asr.w #4,d2
    2fd0:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l d7,-(sp)
    2fd2:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l a5,-(sp)
    2fd4:	                     |                                      |  |  |  |  |  |  |  |  |  |   jsr (a6)
    2fd6:	                     |                                      |  |  |  |  |  |  |  |  |  |   addq.l #8,sp
    2fd8:	                     |                                      |  |  |  |  |  |  |  |  |  |   lsr.l #3,d0
    2fda:	                     |                                      |  |  |  |  |  |  |  |  |  |   movea.w d2,a0
    2fdc:	                     |                                      |  |  |  |  |  |  |  |  |  |   adda.l a0,a0
    2fde:	                     |                                      |  |  |  |  |  |  |  |  |  |   adda.l a0,a4
    2fe0:	                     |                                      |  |  |  |  |  |  |  |  |  |   lea (0,a4,d0.l),a5
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    bltcon0 = 0xfca + ((x%16) << 12);
    2fe4:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.w d4,d3
    2fe6:	                     |                                      |  |  |  |  |  |  |  |  |  |   andi.w #15,d3
    2fea:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.w d3,76(sp)
    2fee:	                     |                                      |  |  |  |  |  |  |  |  |  |   moveq #15,d0
    2ff0:	                     |                                      |  |  |  |  |  |  |  |  |  |   and.l d4,d0
    2ff2:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l d0,d1
    2ff4:	                     |                                      |  |  |  |  |  |  |  |  |  |   moveq #12,d3
    2ff6:	                     |                                      |  |  |  |  |  |  |  |  |  |   lsl.l d3,d1
    2ff8:	                     |                                      |  |  |  |  |  |  |  |  |  |   addi.l #4042,d1
    2ffe:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l d1,72(sp)
    bltcon1 = ((x%16) << 12);
    bltalwm = 0xffff << (x%16); 
    3002:	                     |                                      |  |  |  |  |  |  |  |  |  |   movea.l #65535,a4
    3008:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l a4,d1
    300a:	                     |                                      |  |  |  |  |  |  |  |  |  |   lsl.l d0,d1
    300c:	                     |                                      |  |  |  |  |  |  |  |  |  |   movea.l d1,a4

    struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    300e:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l 1cee2 <CstCleanupQueueDrawBuffer>,d3
    CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    3014:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l #118710,68(sp)
    301c:	                     |                                      |  |  |  |  |  |  |  |  |  |   lea 1cfb6 <SysBase>,a0
    3022:	                     |                                      |  |  |  |  |  |  |  |  |  |   movea.l (a0),a6
    3024:	                     |                                      |  |  |  |  |  |  |  |  |  |   moveq #20,d0
    3026:	                     |                                      |  |  |  |  |  |  |  |  |  |   moveq #0,d1
    3028:	                     |                                      |  |  |  |  |  |  |  |  |  |   jsr -684(a6)
    302c:	                     |                                      |  |  |  |  |  |  |  |  |  |   movea.l d0,a0
    302e:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l d0,1cee2 <CstCleanupQueueDrawBuffer>
    CstCleanupQueueDrawBuffer->next = next;   
    3034:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l d3,16(a0)

    CstCleanupQueueDrawBuffer->x = x;
    3038:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.w d4,(a0)
    CstCleanupQueueDrawBuffer->y = y;
    303a:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.w a3,2(a0)
    CstCleanupQueueDrawBuffer->person = person; 
    303e:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l 64(sp),4(a0)
    CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource; //Width in X Bytes
    3044:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l (a2),d1
    3046:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l d1,d0
    3048:	         ,-----------|--------------------------------------|--|--|--|--|--|--|--|--|--|-- bmi.w 3846 <CstScaleSprite+0x93e>
    304c:	         |           |                                      |  |  |  |  |  |  |  |  |  |   asr.l #4,d0
    304e:	         |           |                                      |  |  |  |  |  |  |  |  |  |   movea.w 58(sp),a1
    3052:	         |           |                                      |  |  |  |  |  |  |  |  |  |   adda.w d0,a1
    3054:	         |           |                                      |  |  |  |  |  |  |  |  |  |   move.w a1,8(a0)
    CstCleanupQueueDrawBuffer->height =  blitheight; //Height
    3058:	         |           |                                      |  |  |  |  |  |  |  |  |  |   move.w 50(sp),d3
    305c:	         |           |                                      |  |  |  |  |  |  |  |  |  |   move.w d3,10(a0)
    CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; //X Start in Bytes;
    3060:	         |           |                                      |  |  |  |  |  |  |  |  |  |   add.w d2,d2
    3062:	         |           |                                      |  |  |  |  |  |  |  |  |  |   move.w d2,78(sp)
    3066:	         |           |                                      |  |  |  |  |  |  |  |  |  |   move.w d2,12(a0)
    CstCleanupQueueDrawBuffer->starty = ystartdst;
    306a:	         |           |                                      |  |  |  |  |  |  |  |  |  |   move.w d7,48(sp)
    306e:	         |           |                                      |  |  |  |  |  |  |  |  |  |   move.w d7,14(a0)
      CstCleanupQueueViewBuffer->starty = ystartdst;
    } 
  }

  UWORD bltafwm = 0xffff >> cutmaskpixel;
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    3072:	         |           |                                      |  |  |  |  |  |  |  |  |  |   move.w 58(sp),d7
    3076:	         |           |                                      |  |  |  |  |  |  |  |  |  |   add.w d7,d7
  custom->bltalwm = bltalwm;
  custom->bltamod = bltamod;
  custom->bltbmod = bltbmod;
  custom->bltcmod = bltcmod;
  custom->bltdmod = bltdmod;
  custom->bltcon0 = bltcon0;
    3078:	         |           |                                      |  |  |  |  |  |  |  |  |  |   move.w 74(sp),72(sp)
  custom->bltcon1 = bltcon1;  
    307e:	         |           |                                      |  |  |  |  |  |  |  |  |  |   move.w 76(sp),d2
    3082:	         |           |                                      |  |  |  |  |  |  |  |  |  |   moveq #12,d0
    3084:	         |           |                                      |  |  |  |  |  |  |  |  |  |   lsl.w d0,d2
    3086:	         |           |                                      |  |  |  |  |  |  |  |  |  |   move.w d2,76(sp)
    if( destinationtype != SCREEN)
    308a:	         |           |                                      |  |  |  |  |  |  |  |  |  |   cmpi.w #1,52(sp)
    3090:	      ,--|-----------|--------------------------------------|--|--|--|--|--|--|--|--|--|-- beq.w 38b6 <CstScaleSprite+0x9ae>
      next = CstCleanupQueueViewBuffer;
    3094:	      |  |  ,--------|--------------------------------------|--|--|--|--|--|--|--|--|--|-> move.l 1cede <CstCleanupQueueViewBuffer>,d2
      CstCleanupQueueViewBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    309a:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   movea.l 68(sp),a0
    309e:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   movea.l (a0),a6
    30a0:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   moveq #20,d0
    30a2:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   moveq #0,d1
    30a4:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   jsr -684(a6)
    30a8:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   movea.l d0,a0
    30aa:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.l d0,1cede <CstCleanupQueueViewBuffer>
      CstCleanupQueueViewBuffer->next = next;   
    30b0:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.l d2,16(a0)
      CstCleanupQueueViewBuffer->x = x;
    30b4:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.w d4,(a0)
      CstCleanupQueueViewBuffer->y = y;
    30b6:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.w a3,2(a0)
      CstCleanupQueueViewBuffer->person = person; 
    30ba:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.l 64(sp),4(a0)
      CstCleanupQueueViewBuffer->widthinwords = single->width/16+cutwordssource;
    30c0:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.l (a2),d1
    30c2:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.l d1,d0
    30c4:	   ,--|--|--|--------|--------------------------------------|--|--|--|--|--|--|--|--|--|-- bmi.w 3900 <CstScaleSprite+0x9f8>
    30c8:	   |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   asr.l #4,d0
    30ca:	   |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   movea.w 58(sp),a1
    30ce:	   |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   adda.w d0,a1
    30d0:	   |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.w a1,8(a0)
      CstCleanupQueueViewBuffer->height =  blitheight;
    30d4:	   |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.w d3,10(a0)
      CstCleanupQueueViewBuffer->startxinbytes =  (x/16)*2; //X Start in Bytes;
    30d8:	   |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.w 78(sp),12(a0)
      CstCleanupQueueViewBuffer->starty = ystartdst; 
    30de:	   |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.w 48(sp),14(a0)
    30e4:	   |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.w #-1,50(sp)
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    30ea:	   |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   clr.w d2
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    30ec:	,--|--|--|--|--------|--------------------------------------|--|--|--|--|--|--|--|--|--|-> move.l 1cefe <winWidth>,d0
    30f2:	|  |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   lsr.l #3,d0
    30f4:	|  |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.w d7,d4
    30f6:	|  |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   add.w d0,d4
    30f8:	|  |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   tst.l d1
    30fa:	|  |  |  |  |  ,-----|--------------------------------------|--|--|--|--|--|--|--|--|--|-- blt.w 3646 <CstScaleSprite+0x73e>
    30fe:	|  |  |  |  |  |  ,--|--------------------------------------|--|--|--|--|--|--|--|--|--|-> asr.l #3,d1
    3100:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   sub.w d1,d4
  WaitBlit();
    3102:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   lea 1cfc2 <GfxBase>,a3
    3108:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   movea.l (a3),a6
    310a:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
  custom->bltafwm = bltafwm;
    310e:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.w 50(sp),dff044 <gcc8_c_support.c.c60c1f2b+0xdb2e0a>
  custom->bltalwm = bltalwm;
    3116:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.w a4,dff046 <gcc8_c_support.c.c60c1f2b+0xdb2e0c>
  custom->bltamod = bltamod;
    311c:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.w d7,dff064 <gcc8_c_support.c.c60c1f2b+0xdb2e2a>
  custom->bltbmod = bltbmod;
    3122:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.w d7,dff062 <gcc8_c_support.c.c60c1f2b+0xdb2e28>
  custom->bltcmod = bltcmod;
    3128:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.w d4,dff060 <gcc8_c_support.c.c60c1f2b+0xdb2e26>
  custom->bltdmod = bltdmod;
    312e:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.w d4,dff066 <gcc8_c_support.c.c60c1f2b+0xdb2e2c>
  custom->bltcon0 = bltcon0;
    3134:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.w 72(sp),dff040 <gcc8_c_support.c.c60c1f2b+0xdb2e06>
  custom->bltcon1 = bltcon1;  
    313c:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.w 76(sp),dff042 <gcc8_c_support.c.c60c1f2b+0xdb2e08>

  UWORD bltbptplus = (single->width >> 3)*single->height;
    3144:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.l (a2),d0
  {
    custom->bltapt = (APTR) bltapt;
    custom->bltbpt = (APTR) bltbpt;
    custom->bltcpt = (APTR) bltcpt;
    custom->bltdpt = (APTR) bltdpt;
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3146:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   lsl.w #6,d3
  UWORD bltbptplus = (single->width >> 3)*single->height;
    3148:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.l d0,d7
    314a:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   asr.l #3,d7
    314c:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   muls.w 6(a2),d7
    bltbpt += bltbptplus;
    3150:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   andi.l #65535,d7
  UWORD bltcptplus = winWidth/8*winHeight;
    3156:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.l 1cefe <winWidth>,d4
    315c:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   lsr.l #3,d4
    315e:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   muls.w 1cf04 <winHeight+0x2>,d4
    bltcpt += bltcptplus;
    3164:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   andi.l #65535,d4
    custom->bltapt = (APTR) bltapt;
    316a:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb2e16>
    custom->bltbpt = (APTR) bltbpt;
    3170:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.l 60(sp),dff04c <gcc8_c_support.c.c60c1f2b+0xdb2e12>
    custom->bltcpt = (APTR) bltcpt;
    3178:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb2e0e>
    custom->bltdpt = (APTR) bltdpt;
    317e:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb2e1a>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3184:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   tst.l d0
    3186:	|  |  |  |  |  |  |  |                       ,--------------|--|--|--|--|--|--|--|--|--|-- blt.w 36d4 <CstScaleSprite+0x7cc>
    318a:	|  |  |  |  |  |  |  |                       |     ,--------|--|--|--|--|--|--|--|--|--|-> asr.l #4,d0
    318c:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   add.w d2,d0
    318e:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   add.w d3,d0
    3190:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   sub.w d6,d0
    3192:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb2e1e>
    bltbpt += bltbptplus;
    3198:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   movea.l 60(sp),a4
    319c:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   adda.l d7,a4
    bltcpt += bltcptplus;
    319e:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   adda.l d4,a5
    bltdpt += bltcptplus;
    WaitBlit();
    31a0:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   movea.l (a3),a6
    31a2:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    31a6:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    31a8:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb2e16>
    custom->bltbpt = (APTR) bltbpt;
    31ae:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   move.l a4,dff04c <gcc8_c_support.c.c60c1f2b+0xdb2e12>
    custom->bltcpt = (APTR) bltcpt;
    31b4:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb2e0e>
    custom->bltdpt = (APTR) bltdpt;
    31ba:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb2e1a>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    31c0:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   tst.l d0
    31c2:	|  |  |  |  |  |  |  |                 ,-----|-----|--------|--|--|--|--|--|--|--|--|--|-- blt.w 3714 <CstScaleSprite+0x80c>
    31c6:	|  |  |  |  |  |  |  |                 |     |  ,--|--------|--|--|--|--|--|--|--|--|--|-> asr.l #4,d0
    31c8:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   add.w d2,d0
    31ca:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   add.w d3,d0
    31cc:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   sub.w d6,d0
    31ce:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb2e1e>
    bltbpt += bltbptplus;
    31d4:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   adda.l d7,a4
    bltcpt += bltcptplus;
    31d6:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   adda.l d4,a5
    WaitBlit();
    31d8:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   movea.l (a3),a6
    31da:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    31de:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    31e0:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb2e16>
    custom->bltbpt = (APTR) bltbpt;
    31e6:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   move.l a4,dff04c <gcc8_c_support.c.c60c1f2b+0xdb2e12>
    custom->bltcpt = (APTR) bltcpt;
    31ec:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb2e0e>
    custom->bltdpt = (APTR) bltdpt;
    31f2:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb2e1a>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    31f8:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   tst.l d0
    31fa:	|  |  |  |  |  |  |  |           ,-----|-----|--|--|--------|--|--|--|--|--|--|--|--|--|-- blt.w 3750 <CstScaleSprite+0x848>
    31fe:	|  |  |  |  |  |  |  |           |     |  ,--|--|--|--------|--|--|--|--|--|--|--|--|--|-> asr.l #4,d0
    3200:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.w d2,d0
    3202:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.w d3,d0
    3204:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   sub.w d6,d0
    3206:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb2e1e>
    bltbpt += bltbptplus;
    320c:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   adda.l d7,a4
    bltcpt += bltcptplus;
    320e:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   adda.l d4,a5
    WaitBlit();
    3210:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   movea.l (a3),a6
    3212:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3216:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    3218:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb2e16>
    custom->bltbpt = (APTR) bltbpt;
    321e:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l a4,dff04c <gcc8_c_support.c.c60c1f2b+0xdb2e12>
    custom->bltcpt = (APTR) bltcpt;
    3224:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb2e0e>
    custom->bltdpt = (APTR) bltdpt;
    322a:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb2e1a>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3230:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   tst.l d0
    3232:	|  |  |  |  |  |  |  |     ,-----|-----|--|--|--|--|--------|--|--|--|--|--|--|--|--|--|-- blt.w 378c <CstScaleSprite+0x884>
    3236:	|  |  |  |  |  |  |  |     |     |  ,--|--|--|--|--|--------|--|--|--|--|--|--|--|--|--|-> asr.l #4,d0
    3238:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.w d2,d0
    323a:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.w d3,d0
    323c:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   sub.w d6,d0
    323e:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb2e1e>
    bltbpt += bltbptplus;
    3244:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.l a4,d7
    bltcpt += bltcptplus;
    3246:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.l a5,d4
    WaitBlit();
    3248:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   movea.l (a3),a6
    324a:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    324e:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    3250:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb2e16>
    custom->bltbpt = (APTR) bltbpt;
    3256:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l d7,dff04c <gcc8_c_support.c.c60c1f2b+0xdb2e12>
    custom->bltcpt = (APTR) bltcpt;
    325c:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l d4,dff048 <gcc8_c_support.c.c60c1f2b+0xdb2e0e>
    custom->bltdpt = (APTR) bltdpt;
    3262:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l d4,dff054 <gcc8_c_support.c.c60c1f2b+0xdb2e1a>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3268:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   tst.l d0
    326a:	|  |  |  |  |  |  |  |  ,--|-----|--|--|--|--|--|--|--------|--|--|--|--|--|--|--|--|--|-- blt.w 37c8 <CstScaleSprite+0x8c0>
    326e:	|  |  |  |  |  |  |  |  |  |  ,--|--|--|--|--|--|--|--------|--|--|--|--|--|--|--|--|--|-> asr.l #4,d0
    3270:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.w d0,d2
    3272:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.w d3,d2
    3274:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   sub.w d6,d2
    3276:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.w d2,dff058 <gcc8_c_support.c.c60c1f2b+0xdb2e1e>
    WaitBlit();
    327c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   movea.l (a3),a6
    327e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
  }   

}
    3282:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   movem.l (sp)+,d2-d7/a2-a6
    3286:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   lea 40(sp),sp
    328a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   rts
      destination = (UWORD *) CstBackDrop;      
    328c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  '--|--|--|-> movea.l 1ceca <CstBackDrop>,a4
    if(y + single->height < 0) {
    3292:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |  |  |   move.l 4(a2),d1
    3296:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |  |  |   move.l a5,d0
    3298:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |  |  |   add.l d1,d0
  if( y < 0) {
    329a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |  |  |   tst.w d3
    329c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     '--|--|-- bge.w 2f6c <CstScaleSprite+0x64>
    if(y + single->height < 0) {
    32a0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  '--------|--|-> tst.l d0
    32a2:	|  |  |  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|--------|--|--|--|--|-----------|--|-- blt.w 356a <CstScaleSprite+0x662>
    ystartsrc = y*-1;
    32a6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |           |  |   move.l a5,d3
    32a8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |           |  |   neg.l d3
    blitheight = single->height+y;
    32aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |           |  |   move.l d0,48(sp)
    ystartdst = 0;
    32ae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |           |  |   moveq #0,d7
    if(x + single->width < 0) {
    32b0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |           |  |   move.l (a2),d1
    32b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |           |  |   move.l a6,d0
    32b4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |           |  |   add.l d1,d0
  if( x < 0) 
    32b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |           |  |   tst.w d2
    32b8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |           |  '-- bge.w 2f94 <CstScaleSprite+0x8c>
    if(x + single->width < 0) {
    32bc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |           '----> tst.l d0
    32be:	|  |  |  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|--------|--|--|--|--|----------------- blt.w 356a <CstScaleSprite+0x662>
    cutwordssource = (x*-1)/16; 
    32c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  move.w d4,d0
    32c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  addi.w #15,d0
    32c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  asr.w #4,d0
    32ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  neg.w d0
    32cc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  move.w d0,56(sp)
    32d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  move.w d0,d6
    cutmaskpixel = (x*-1)%16;   
    32d2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  move.l a6,d0
    32d4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  neg.l d0
    32d6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  moveq #15,d2
    32d8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  and.l d0,d2
    32da:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  move.l d2,78(sp)
      bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    32de:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  lea 18134 <__mulsi3>,a6
    32e4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  move.l 1cefe <winWidth>,-(sp)
    32ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  move.l d7,-(sp)
    32ec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  move.l d1,52(sp)
    32f0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  jsr (a6)
    32f2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  addq.l #8,sp
    32f4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  lsr.l #3,d0
    if( cutmaskpixel > 0)
    32f6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  move.l 44(sp),d1
    32fa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  tst.l d2
    32fc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  ,-------------- beq.w 3580 <CstScaleSprite+0x678>
      bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    3300:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               lea (-2,a4,d0.l),a5
      bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    3304:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.w 56(sp),d2
    3308:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               subq.w #1,d2
    330a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.w d2,82(sp)
      bltcon0 = 0xfca + ((16-cutmaskpixel) << 12);
    330e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               movea.w #16,a0
    3312:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               suba.l 78(sp),a0
    3316:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.l a0,d2
    3318:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               moveq #12,d0
    331a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               lsl.l d0,d2
  custom->bltcon0 = bltcon0;
    331c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               addi.w #4042,d2
    3320:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.w d2,72(sp)
  custom->bltcon1 = bltcon1;  
    3324:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.w a0,d2
    3326:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               lsl.w d0,d2
    3328:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.w d2,76(sp)
      extrawords = 1;
    332c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               moveq #1,d2
    bltapt = ((ULONG) mask)+cutwordssource*2+ystartsrc*single->width/8;
    332e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               movea.w 56(sp),a4
    3332:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               adda.l a4,a4
    3334:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.l d3,-(sp)
    3336:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.l d1,-(sp)
    3338:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               jsr (a6)
    333a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               addq.l #8,sp
    333c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               lsr.l #3,d0
    333e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               add.l a4,d5
    3340:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               add.l d0,d5
    bltbpt = ((ULONG) single->data)+cutwordssource*2+ystartsrc*single->width/8;
    3342:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               adda.l 24(a2),a4
    3346:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               add.l a4,d0
    3348:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.l d0,60(sp)
    struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    334c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.l 1cee2 <CstCleanupQueueDrawBuffer>,d3
    CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    3352:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.l #118710,68(sp)
    335a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               lea 1cfb6 <SysBase>,a0
    3360:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               movea.l (a0),a6
    3362:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               moveq #20,d0
    3364:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               moveq #0,d1
    3366:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               jsr -684(a6)
    336a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               movea.l d0,a0
    336c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.l d0,1cee2 <CstCleanupQueueDrawBuffer>
    CstCleanupQueueDrawBuffer->next = next;   
    3372:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.l d3,16(a0)
    CstCleanupQueueDrawBuffer->x = x;
    3376:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.w d4,(a0)
    CstCleanupQueueDrawBuffer->y = y;
    3378:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.w a3,2(a0)
    CstCleanupQueueDrawBuffer->person = person;      
    337c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.l 64(sp),4(a0)
    CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; //Width in X Bytes
    3382:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.l (a2),d1
    3384:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.l d1,d0
    3386:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     ,-------- bmi.w 35f2 <CstScaleSprite+0x6ea>
    338a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     ,-> asr.l #4,d0
    338c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   add.w 56(sp),d0
    3390:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   add.w d2,d0
    3392:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   move.w d0,8(a0)
    CstCleanupQueueDrawBuffer->height = blitheight;
    3396:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   move.w 50(sp),d3
    339a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   move.w d3,10(a0)
    CstCleanupQueueDrawBuffer->startxinbytes = 0;
    339e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   clr.w 12(a0)
    CstCleanupQueueDrawBuffer->starty = ystartdst;
    33a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   movea.w d7,a4
    33a4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   move.w d7,14(a0)
  UWORD bltafwm = 0xffff >> cutmaskpixel;
    33a8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   moveq #0,d0
    33aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   not.w d0
    33ac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   move.l 78(sp),d7
    33b0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   asr.l d7,d0
    33b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   move.w d0,50(sp)
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    33b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   move.w 82(sp),d7
    33ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   add.w d7,d7
    if( destinationtype != SCREEN)
    33bc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   cmpi.w #1,52(sp)
    33c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  ,--|-----|-- beq.w 3632 <CstScaleSprite+0x72a>
      next = CstCleanupQueueViewBuffer;
    33c6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  ,--|-> move.l 1cede <CstCleanupQueueViewBuffer>,52(sp)
      CstCleanupQueueViewBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    33ce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   movea.l 68(sp),a0
    33d2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   movea.l (a0),a6
    33d4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   moveq #20,d0
    33d6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   moveq #0,d1
    33d8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   jsr -684(a6)
    33dc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   movea.l d0,a0
    33de:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l d0,1cede <CstCleanupQueueViewBuffer>
      CstCleanupQueueViewBuffer->next = next;
    33e4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l 52(sp),16(a0)
      CstCleanupQueueViewBuffer->x = x;
    33ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.w d4,(a0)
      CstCleanupQueueViewBuffer->y = y;
    33ec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.w a3,2(a0)
      CstCleanupQueueViewBuffer->person = person;
    33f0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l 64(sp),4(a0)
      CstCleanupQueueViewBuffer->widthinwords = single->width/16+cutwordssource+extrawords; //Width in X Bytes
    33f6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l (a2),d1
    33f8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l d1,d0
    33fa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     ,--|--|--|--|--|--|--|--|--|--|-- bmi.w 3894 <CstScaleSprite+0x98c>
    33fe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |   asr.l #4,d0
    3400:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |   add.w 56(sp),d0
    3404:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |   add.w d2,d0
    3406:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |   move.w d0,8(a0)
      CstCleanupQueueViewBuffer->height = blitheight; 
    340a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |   move.w d3,10(a0)
      CstCleanupQueueViewBuffer->startxinbytes = 0; 
    340e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |   clr.w 12(a0)
      CstCleanupQueueViewBuffer->starty = ystartdst;  
    3412:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |   move.w a4,14(a0)
    bltalwm = 0; //Last Word of this channel almost masked out
    3416:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |   suba.l a4,a4
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    3418:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  ,--|--|--|--|--|--|--|--|--|--|--|-> move.l 1cefe <winWidth>,d0
    341e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   lsr.l #3,d0
    3420:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.w d7,d4
    3422:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   add.w d0,d4
    3424:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   tst.l d1
    3426:	|  |  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|-- bge.w 30fe <CstScaleSprite+0x1f6>
    342a:	|  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|-- bra.w 3646 <CstScaleSprite+0x73e>
      destination = (UWORD *) CstDrawBuffer;      
    342e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '--|--|--|--|--|--|--|--|--|-> movea.l 1ceda <CstDrawBuffer>,a4
      break;
    3434:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     '--|--|--|--|--|--|--|--|-- bra.w 2f5e <CstScaleSprite+0x56>
    ystartdst = y;
    3438:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        '--|--|--|--|--|--|--|-> move.l a5,d7
    blitheight = single->height;
    343a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |  |  |  |  |  |  |   move.l d1,48(sp)
    ystartsrc = 0;
    343e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |  |  |  |  |  |  |   moveq #0,d3
    3440:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           '--|--|--|--|--|--|-- bra.w 2f88 <CstScaleSprite+0x80>
    bltapt = ((ULONG) mask) +ystartsrc*single->width/8;
    3444:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              '--|--|--|--|--|-> lea 18134 <__mulsi3>,a6
    344a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.l d3,-(sp)
    344c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.l d1,-(sp)
    344e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   jsr (a6)
    3450:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   addq.l #8,sp
    3452:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   lsr.l #3,d0
    3454:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   add.l d0,d5
    bltbpt = (ULONG) single->data+ystartsrc*single->width/8;
    3456:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   add.l 24(a2),d0
    345a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.l d0,60(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    345e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.w d4,d2
    3460:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   asr.w #4,d2
    3462:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.l d7,-(sp)
    3464:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.l a5,-(sp)
    3466:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   jsr (a6)
    3468:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   addq.l #8,sp
    346a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   lsr.l #3,d0
    346c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   movea.w d2,a0
    346e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   adda.l a0,a0
    3470:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   adda.l a0,a4
    3472:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   lea (0,a4,d0.l),a5
    bltcon0 = 0xfca + ((x%16) << 12);
    3476:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.w d4,d6
    3478:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   andi.w #15,d6
    347c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   moveq #15,d0
    347e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   and.l d4,d0
    3480:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   moveq #12,d1
    3482:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   lsl.l d1,d0
    3484:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   movea.l d0,a4
    3486:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   lea 4042(a4),a4
    struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    348a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.l 1cee2 <CstCleanupQueueDrawBuffer>,d3
    CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    3490:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.l #118710,68(sp)
    3498:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   lea 1cfb6 <SysBase>,a0
    349e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   movea.l (a0),a6
    34a0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   moveq #20,d0
    34a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   moveq #0,d1
    34a4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   jsr -684(a6)
    34a8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   movea.l d0,a0
    34aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.l d0,1cee2 <CstCleanupQueueDrawBuffer>
    CstCleanupQueueDrawBuffer->next = next;   
    34b0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.l d3,16(a0)
    CstCleanupQueueDrawBuffer->x = x;
    34b4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.w d4,(a0)
    CstCleanupQueueDrawBuffer->y = y;
    34b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.w a3,2(a0)
    CstCleanupQueueDrawBuffer->person = person; 
    34ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.l 64(sp),4(a0)
    CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; 
    34c0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.l (a2),d1
    34c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.l d1,d0
    34c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           ,-----|--|--|--|--|-- bmi.w 37ea <CstScaleSprite+0x8e2>
    34c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   asr.l #4,d0
    34ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   addq.w #1,d0
    34cc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   move.w d0,8(a0)
    CstCleanupQueueDrawBuffer->height =  blitheight; 
    34d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   move.w 50(sp),d3
    34d4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   move.w d3,10(a0)
    CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; 
    34d8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   add.w d2,d2
    34da:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   move.w d2,12(a0)
    CstCleanupQueueDrawBuffer->starty = ystartdst;
    34de:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   move.w d7,48(sp)
    34e2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   move.w d7,14(a0)
  custom->bltcon0 = bltcon0;
    34e6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   move.w a4,72(sp)
  custom->bltcon1 = bltcon1;  
    34ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   moveq #12,d0
    34ec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   lsl.w d0,d6
    34ee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   move.w d6,76(sp)
    if( destinationtype != SCREEN)
    34f2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   cmpi.w #1,52(sp)
    34f8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        ,--|-----|--|--|--|--|-- beq.w 3822 <CstScaleSprite+0x91a>
      next = CstCleanupQueueViewBuffer;
    34fc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  ,--|--|--|--|--|-> move.l 1cede <CstCleanupQueueViewBuffer>,d6
      CstCleanupQueueViewBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    3502:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   movea.l 68(sp),a0
    3506:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   movea.l (a0),a6
    3508:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   moveq #20,d0
    350a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   moveq #0,d1
    350c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   jsr -684(a6)
    3510:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   movea.l d0,a0
    3512:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   move.l d0,1cede <CstCleanupQueueViewBuffer>
      CstCleanupQueueViewBuffer->next = next;   
    3518:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   move.l d6,16(a0)
      CstCleanupQueueViewBuffer->x = x;
    351c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   move.w d4,(a0)
      CstCleanupQueueViewBuffer->y = y;
    351e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   move.w a3,2(a0)
      CstCleanupQueueViewBuffer->person = person; 
    3522:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   move.l 64(sp),4(a0)
      CstCleanupQueueViewBuffer->widthinwords = single->width/16+cutwordssource+extrawords; 
    3528:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   move.l (a2),d1
    352a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   move.l d1,d0
    352c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     ,--|--|--|--|--|--|--|--|-- bmi.w 38d4 <CstScaleSprite+0x9cc>
    3530:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |   asr.l #4,d0
    3532:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |   addq.w #1,d0
    3534:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |   move.w d0,8(a0)
      CstCleanupQueueViewBuffer->height =  blitheight; 
    3538:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |   move.w d3,10(a0)
      CstCleanupQueueViewBuffer->startxinbytes =  (x/16)*2; 
    353c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |   move.w d2,12(a0)
      CstCleanupQueueViewBuffer->starty = ystartdst;
    3540:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |   move.w 48(sp),14(a0)
    3546:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |   move.w #-1,50(sp)
    354c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |   moveq #-2,d7
    bltalwm = 0; //Last Word of this channel almost masked out
    354e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |   suba.l a4,a4
    cutwordssource = 0;
    3550:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |   clr.w d6
    extrawords = 1;
    3552:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |   moveq #1,d2
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    3554:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  ,--|--|--|--|--|--|--|--|--|-> move.l 1cefe <winWidth>,d0
    355a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   lsr.l #3,d0
    355c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.w d7,d4
    355e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   add.w d0,d4
    3560:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   tst.l d1
    3562:	|  |  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|-- bge.w 30fe <CstScaleSprite+0x1f6>
    3566:	|  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|-- bra.w 3646 <CstScaleSprite+0x73e>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    356a:	|  |  |  |  |  |  |  '--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|-> move.l #99745,88(sp)
}
    3572:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   movem.l (sp)+,d2-d7/a2-a6
    3576:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   lea 40(sp),sp
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    357a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   jmp 177a8 <KPrintF>
      bltcpt = ((ULONG) destination) + ystartdst*winWidth/8;
    3580:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '--|--|--|--|-> lea (0,a4,d0.l),a5
    3584:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.w 56(sp),82(sp)
    358a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   clr.w 76(sp)
    358e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.w #4042,72(sp)
      extrawords = 0;
    3594:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   clr.w d2
    bltapt = ((ULONG) mask)+cutwordssource*2+ystartsrc*single->width/8;
    3596:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   movea.w 56(sp),a4
    359a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   adda.l a4,a4
    359c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.l d3,-(sp)
    359e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.l d1,-(sp)
    35a0:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   jsr (a6)
    35a2:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   addq.l #8,sp
    35a4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   lsr.l #3,d0
    35a6:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   add.l a4,d5
    35a8:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   add.l d0,d5
    bltbpt = ((ULONG) single->data)+cutwordssource*2+ystartsrc*single->width/8;
    35aa:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   adda.l 24(a2),a4
    35ae:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   add.l a4,d0
    35b0:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.l d0,60(sp)
    struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    35b4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.l 1cee2 <CstCleanupQueueDrawBuffer>,d3
    CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    35ba:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.l #118710,68(sp)
    35c2:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   lea 1cfb6 <SysBase>,a0
    35c8:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   movea.l (a0),a6
    35ca:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   moveq #20,d0
    35cc:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   moveq #0,d1
    35ce:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   jsr -684(a6)
    35d2:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   movea.l d0,a0
    35d4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.l d0,1cee2 <CstCleanupQueueDrawBuffer>
    CstCleanupQueueDrawBuffer->next = next;   
    35da:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.l d3,16(a0)
    CstCleanupQueueDrawBuffer->x = x;
    35de:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.w d4,(a0)
    CstCleanupQueueDrawBuffer->y = y;
    35e0:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.w a3,2(a0)
    CstCleanupQueueDrawBuffer->person = person;      
    35e4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.l 64(sp),4(a0)
    CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; //Width in X Bytes
    35ea:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.l (a2),d1
    35ec:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.l d1,d0
    35ee:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  '-- bpl.w 338a <CstScaleSprite+0x482>
    35f2:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  '--|----> moveq #15,d0
    35f4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      add.l d1,d0
    35f6:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      asr.l #4,d0
    35f8:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      add.w 56(sp),d0
    35fc:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      add.w d2,d0
    35fe:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      move.w d0,8(a0)
    CstCleanupQueueDrawBuffer->height = blitheight;
    3602:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      move.w 50(sp),d3
    3606:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      move.w d3,10(a0)
    CstCleanupQueueDrawBuffer->startxinbytes = 0;
    360a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      clr.w 12(a0)
    CstCleanupQueueDrawBuffer->starty = ystartdst;
    360e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      movea.w d7,a4
    3610:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      move.w d7,14(a0)
  UWORD bltafwm = 0xffff >> cutmaskpixel;
    3614:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      moveq #0,d0
    3616:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      not.w d0
    3618:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      move.l 78(sp),d7
    361c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      asr.l d7,d0
    361e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      move.w d0,50(sp)
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    3622:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      move.w 82(sp),d7
    3626:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      add.w d7,d7
    if( destinationtype != SCREEN)
    3628:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      cmpi.w #1,52(sp)
    362e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     '----- bne.w 33c6 <CstScaleSprite+0x4be>
    bltalwm = 0; //Last Word of this channel almost masked out
    3632:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     '----------> suba.l a4,a4
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    3634:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l 1cefe <winWidth>,d0
    363a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  lsr.l #3,d0
    363c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w d7,d4
    363e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  add.w d0,d4
    3640:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  tst.l d1
    3642:	|  |  |  |  |  |  +-----|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|----------------- bge.w 30fe <CstScaleSprite+0x1f6>
    3646:	|  |  |  |  |  >--|-----|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|----------------> addq.l #7,d1
    3648:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  asr.l #3,d1
    364a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  sub.w d1,d4
  WaitBlit();
    364c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  lea 1cfc2 <GfxBase>,a3
    3652:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  movea.l (a3),a6
    3654:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  jsr -228(a6)
  custom->bltafwm = bltafwm;
    3658:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w 50(sp),dff044 <gcc8_c_support.c.c60c1f2b+0xdb2e0a>
  custom->bltalwm = bltalwm;
    3660:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w a4,dff046 <gcc8_c_support.c.c60c1f2b+0xdb2e0c>
  custom->bltamod = bltamod;
    3666:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w d7,dff064 <gcc8_c_support.c.c60c1f2b+0xdb2e2a>
  custom->bltbmod = bltbmod;
    366c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w d7,dff062 <gcc8_c_support.c.c60c1f2b+0xdb2e28>
  custom->bltcmod = bltcmod;
    3672:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w d4,dff060 <gcc8_c_support.c.c60c1f2b+0xdb2e26>
  custom->bltdmod = bltdmod;
    3678:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w d4,dff066 <gcc8_c_support.c.c60c1f2b+0xdb2e2c>
  custom->bltcon0 = bltcon0;
    367e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w 72(sp),dff040 <gcc8_c_support.c.c60c1f2b+0xdb2e06>
  custom->bltcon1 = bltcon1;  
    3686:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w 76(sp),dff042 <gcc8_c_support.c.c60c1f2b+0xdb2e08>
  UWORD bltbptplus = (single->width >> 3)*single->height;
    368e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l (a2),d0
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3690:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  lsl.w #6,d3
  UWORD bltbptplus = (single->width >> 3)*single->height;
    3692:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l d0,d7
    3694:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  asr.l #3,d7
    3696:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  muls.w 6(a2),d7
    bltbpt += bltbptplus;
    369a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  andi.l #65535,d7
  UWORD bltcptplus = winWidth/8*winHeight;
    36a0:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l 1cefe <winWidth>,d4
    36a6:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  lsr.l #3,d4
    36a8:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  muls.w 1cf04 <winHeight+0x2>,d4
    bltcpt += bltcptplus;
    36ae:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  andi.l #65535,d4
    custom->bltapt = (APTR) bltapt;
    36b4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb2e16>
    custom->bltbpt = (APTR) bltbpt;
    36ba:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l 60(sp),dff04c <gcc8_c_support.c.c60c1f2b+0xdb2e12>
    custom->bltcpt = (APTR) bltcpt;
    36c2:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb2e0e>
    custom->bltdpt = (APTR) bltdpt;
    36c8:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb2e1a>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    36ce:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  tst.l d0
    36d0:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  '--|--|--|--|--|--|--|----------------- bge.w 318a <CstScaleSprite+0x282>
    36d4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  '--|-----|--|--|--|--|--|--|----------------> moveq #15,d1
    36d6:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  add.l d1,d0
    36d8:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  asr.l #4,d0
    36da:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  add.w d2,d0
    36dc:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  add.w d3,d0
    36de:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  sub.w d6,d0
    36e0:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb2e1e>
    bltbpt += bltbptplus;
    36e6:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  movea.l 60(sp),a4
    36ea:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  adda.l d7,a4
    bltcpt += bltcptplus;
    36ec:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  adda.l d4,a5
    WaitBlit();
    36ee:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  movea.l (a3),a6
    36f0:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    36f4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    36f6:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb2e16>
    custom->bltbpt = (APTR) bltbpt;
    36fc:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  move.l a4,dff04c <gcc8_c_support.c.c60c1f2b+0xdb2e12>
    custom->bltcpt = (APTR) bltcpt;
    3702:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb2e0e>
    custom->bltdpt = (APTR) bltdpt;
    3708:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb2e1a>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    370e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  tst.l d0
    3710:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     '-----|--|--|--|--|--|--|----------------- bge.w 31c6 <CstScaleSprite+0x2be>
    3714:	|  |  |  |  |  |  |     |  |  |  |  |  '--|-----------|--|--|--|--|--|--|----------------> moveq #15,d1
    3716:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  add.l d1,d0
    3718:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  asr.l #4,d0
    371a:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  add.w d2,d0
    371c:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  add.w d3,d0
    371e:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  sub.w d6,d0
    3720:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb2e1e>
    bltbpt += bltbptplus;
    3726:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  adda.l d7,a4
    bltcpt += bltcptplus;
    3728:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  adda.l d4,a5
    WaitBlit();
    372a:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  movea.l (a3),a6
    372c:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3730:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    3732:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb2e16>
    custom->bltbpt = (APTR) bltbpt;
    3738:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  move.l a4,dff04c <gcc8_c_support.c.c60c1f2b+0xdb2e12>
    custom->bltcpt = (APTR) bltcpt;
    373e:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb2e0e>
    custom->bltdpt = (APTR) bltdpt;
    3744:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb2e1a>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    374a:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  tst.l d0
    374c:	|  |  |  |  |  |  |     |  |  |  |  |     '-----------|--|--|--|--|--|--|----------------- bge.w 31fe <CstScaleSprite+0x2f6>
    3750:	|  |  |  |  |  |  |     |  |  |  '--|-----------------|--|--|--|--|--|--|----------------> moveq #15,d1
    3752:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  add.l d1,d0
    3754:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  asr.l #4,d0
    3756:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  add.w d2,d0
    3758:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  add.w d3,d0
    375a:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  sub.w d6,d0
    375c:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb2e1e>
    bltbpt += bltbptplus;
    3762:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  adda.l d7,a4
    bltcpt += bltcptplus;
    3764:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  adda.l d4,a5
    WaitBlit();
    3766:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  movea.l (a3),a6
    3768:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    376c:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    376e:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb2e16>
    custom->bltbpt = (APTR) bltbpt;
    3774:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  move.l a4,dff04c <gcc8_c_support.c.c60c1f2b+0xdb2e12>
    custom->bltcpt = (APTR) bltcpt;
    377a:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb2e0e>
    custom->bltdpt = (APTR) bltdpt;
    3780:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb2e1a>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3786:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  tst.l d0
    3788:	|  |  |  |  |  |  |     |  |  |     '-----------------|--|--|--|--|--|--|----------------- bge.w 3236 <CstScaleSprite+0x32e>
    378c:	|  |  |  |  |  |  |     |  '--|-----------------------|--|--|--|--|--|--|----------------> moveq #15,d1
    378e:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  add.l d1,d0
    3790:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  asr.l #4,d0
    3792:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  add.w d2,d0
    3794:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  add.w d3,d0
    3796:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  sub.w d6,d0
    3798:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb2e1e>
    bltbpt += bltbptplus;
    379e:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  add.l a4,d7
    bltcpt += bltcptplus;
    37a0:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  add.l a5,d4
    WaitBlit();
    37a2:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  movea.l (a3),a6
    37a4:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    37a8:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    37aa:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb2e16>
    custom->bltbpt = (APTR) bltbpt;
    37b0:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  move.l d7,dff04c <gcc8_c_support.c.c60c1f2b+0xdb2e12>
    custom->bltcpt = (APTR) bltcpt;
    37b6:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  move.l d4,dff048 <gcc8_c_support.c.c60c1f2b+0xdb2e0e>
    custom->bltdpt = (APTR) bltdpt;
    37bc:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  move.l d4,dff054 <gcc8_c_support.c.c60c1f2b+0xdb2e1a>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    37c2:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  tst.l d0
    37c4:	|  |  |  |  |  |  |     |     '-----------------------|--|--|--|--|--|--|----------------- bge.w 326e <CstScaleSprite+0x366>
    37c8:	|  |  |  |  |  |  |     '-----------------------------|--|--|--|--|--|--|----------------> moveq #15,d7
    37ca:	|  |  |  |  |  |  |                                   |  |  |  |  |  |  |                  add.l d7,d0
    37cc:	|  |  |  |  |  |  |                                   |  |  |  |  |  |  |                  asr.l #4,d0
    37ce:	|  |  |  |  |  |  |                                   |  |  |  |  |  |  |                  add.w d0,d2
    37d0:	|  |  |  |  |  |  |                                   |  |  |  |  |  |  |                  add.w d3,d2
    37d2:	|  |  |  |  |  |  |                                   |  |  |  |  |  |  |                  sub.w d6,d2
    37d4:	|  |  |  |  |  |  |                                   |  |  |  |  |  |  |                  move.w d2,dff058 <gcc8_c_support.c.c60c1f2b+0xdb2e1e>
    WaitBlit();
    37da:	|  |  |  |  |  |  |                                   |  |  |  |  |  |  |                  movea.l (a3),a6
    37dc:	|  |  |  |  |  |  |                                   |  |  |  |  |  |  |                  jsr -228(a6)
}
    37e0:	|  |  |  |  |  |  |                                   |  |  |  |  |  |  |                  movem.l (sp)+,d2-d7/a2-a6
    37e4:	|  |  |  |  |  |  |                                   |  |  |  |  |  |  |                  lea 40(sp),sp
    37e8:	|  |  |  |  |  |  |                                   |  |  |  |  |  |  |                  rts
    CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; 
    37ea:	|  |  |  |  |  |  |                                   |  |  |  |  |  '--|----------------> moveq #15,d0
    37ec:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  add.l d1,d0
    37ee:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  asr.l #4,d0
    37f0:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  addq.w #1,d0
    37f2:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  move.w d0,8(a0)
    CstCleanupQueueDrawBuffer->height =  blitheight; 
    37f6:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  move.w 50(sp),d3
    37fa:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  move.w d3,10(a0)
    CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; 
    37fe:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  add.w d2,d2
    3800:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  move.w d2,12(a0)
    CstCleanupQueueDrawBuffer->starty = ystartdst;
    3804:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  move.w d7,48(sp)
    3808:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  move.w d7,14(a0)
  custom->bltcon0 = bltcon0;
    380c:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  move.w a4,72(sp)
  custom->bltcon1 = bltcon1;  
    3810:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  moveq #12,d0
    3812:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  lsl.w d0,d6
    3814:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  move.w d6,76(sp)
    if( destinationtype != SCREEN)
    3818:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  cmpi.w #1,52(sp)
    381e:	|  |  |  |  |  |  |                                   |  |  |  |  |     '----------------- bne.w 34fc <CstScaleSprite+0x5f4>
    extrawords = 1;
    3822:	|  |  |  |  |  |  |                                   |  |  |  |  '----------------------> moveq #1,d2
    3824:	|  |  |  |  |  |  |                                   |  |  |  |                           move.w #-1,50(sp)
    382a:	|  |  |  |  |  |  |                                   |  |  |  |                           moveq #-2,d7
    bltalwm = 0; //Last Word of this channel almost masked out
    382c:	|  |  |  |  |  |  |                                   |  |  |  |                           suba.l a4,a4
    cutwordssource = 0;
    382e:	|  |  |  |  |  |  |                                   |  |  |  |                           clr.w d6
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    3830:	|  |  |  |  |  |  |                                   |  |  |  |                           move.l 1cefe <winWidth>,d0
    3836:	|  |  |  |  |  |  |                                   |  |  |  |                           lsr.l #3,d0
    3838:	|  |  |  |  |  |  |                                   |  |  |  |                           move.w d7,d4
    383a:	|  |  |  |  |  |  |                                   |  |  |  |                           add.w d0,d4
    383c:	|  |  |  |  |  |  |                                   |  |  |  |                           tst.l d1
    383e:	|  |  |  |  |  |  +-----------------------------------|--|--|--|-------------------------- bge.w 30fe <CstScaleSprite+0x1f6>
    3842:	|  |  |  |  |  +--|-----------------------------------|--|--|--|-------------------------- bra.w 3646 <CstScaleSprite+0x73e>
    CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource; //Width in X Bytes
    3846:	|  |  |  '--|--|--|-----------------------------------|--|--|--|-------------------------> moveq #15,d0
    3848:	|  |  |     |  |  |                                   |  |  |  |                           add.l d1,d0
    384a:	|  |  |     |  |  |                                   |  |  |  |                           asr.l #4,d0
    384c:	|  |  |     |  |  |                                   |  |  |  |                           movea.w 58(sp),a1
    3850:	|  |  |     |  |  |                                   |  |  |  |                           adda.w d0,a1
    3852:	|  |  |     |  |  |                                   |  |  |  |                           move.w a1,8(a0)
    CstCleanupQueueDrawBuffer->height =  blitheight; //Height
    3856:	|  |  |     |  |  |                                   |  |  |  |                           move.w 50(sp),d3
    385a:	|  |  |     |  |  |                                   |  |  |  |                           move.w d3,10(a0)
    CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; //X Start in Bytes;
    385e:	|  |  |     |  |  |                                   |  |  |  |                           add.w d2,d2
    3860:	|  |  |     |  |  |                                   |  |  |  |                           move.w d2,78(sp)
    3864:	|  |  |     |  |  |                                   |  |  |  |                           move.w d2,12(a0)
    CstCleanupQueueDrawBuffer->starty = ystartdst;
    3868:	|  |  |     |  |  |                                   |  |  |  |                           move.w d7,48(sp)
    386c:	|  |  |     |  |  |                                   |  |  |  |                           move.w d7,14(a0)
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    3870:	|  |  |     |  |  |                                   |  |  |  |                           move.w 58(sp),d7
    3874:	|  |  |     |  |  |                                   |  |  |  |                           add.w d7,d7
  custom->bltcon0 = bltcon0;
    3876:	|  |  |     |  |  |                                   |  |  |  |                           move.w 74(sp),72(sp)
  custom->bltcon1 = bltcon1;  
    387c:	|  |  |     |  |  |                                   |  |  |  |                           move.w 76(sp),d2
    3880:	|  |  |     |  |  |                                   |  |  |  |                           moveq #12,d0
    3882:	|  |  |     |  |  |                                   |  |  |  |                           lsl.w d0,d2
    3884:	|  |  |     |  |  |                                   |  |  |  |                           move.w d2,76(sp)
    if( destinationtype != SCREEN)
    3888:	|  |  |     |  |  |                                   |  |  |  |                           cmpi.w #1,52(sp)
    388e:	|  |  |     '--|--|-----------------------------------|--|--|--|-------------------------- bne.w 3094 <CstScaleSprite+0x18c>
    3892:	|  |  +--------|--|-----------------------------------|--|--|--|-------------------------- bra.s 38b6 <CstScaleSprite+0x9ae>
      CstCleanupQueueViewBuffer->widthinwords = single->width/16+cutwordssource+extrawords; //Width in X Bytes
    3894:	|  |  |        |  |                                   |  '--|--|-------------------------> moveq #15,d0
    3896:	|  |  |        |  |                                   |     |  |                           add.l d1,d0
    3898:	|  |  |        |  |                                   |     |  |                           asr.l #4,d0
    389a:	|  |  |        |  |                                   |     |  |                           add.w 56(sp),d0
    389e:	|  |  |        |  |                                   |     |  |                           add.w d2,d0
    38a0:	|  |  |        |  |                                   |     |  |                           move.w d0,8(a0)
      CstCleanupQueueViewBuffer->height = blitheight; 
    38a4:	|  |  |        |  |                                   |     |  |                           move.w d3,10(a0)
      CstCleanupQueueViewBuffer->startxinbytes = 0; 
    38a8:	|  |  |        |  |                                   |     |  |                           clr.w 12(a0)
      CstCleanupQueueViewBuffer->starty = ystartdst;  
    38ac:	|  |  |        |  |                                   |     |  |                           move.w a4,14(a0)
    bltalwm = 0; //Last Word of this channel almost masked out
    38b0:	|  |  |        |  |                                   |     |  |                           suba.l a4,a4
    38b2:	|  |  |        |  |                                   '-----|--|-------------------------- bra.w 3418 <CstScaleSprite+0x510>
    38b6:	|  |  '--------|--|-----------------------------------------|--|-------------------------> move.w #-1,50(sp)
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    38bc:	|  |           |  |                                         |  |                           clr.w d2
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    38be:	|  |           |  |                                         |  |                           move.l 1cefe <winWidth>,d0
    38c4:	|  |           |  |                                         |  |                           lsr.l #3,d0
    38c6:	|  |           |  |                                         |  |                           move.w d7,d4
    38c8:	|  |           |  |                                         |  |                           add.w d0,d4
    38ca:	|  |           |  |                                         |  |                           tst.l d1
    38cc:	|  |           |  '-----------------------------------------|--|-------------------------- bge.w 30fe <CstScaleSprite+0x1f6>
    38d0:	|  |           '--------------------------------------------|--|-------------------------- bra.w 3646 <CstScaleSprite+0x73e>
      CstCleanupQueueViewBuffer->widthinwords = single->width/16+cutwordssource+extrawords; 
    38d4:	|  |                                                        |  '-------------------------> moveq #15,d0
    38d6:	|  |                                                        |                              add.l d1,d0
    38d8:	|  |                                                        |                              asr.l #4,d0
    38da:	|  |                                                        |                              addq.w #1,d0
    38dc:	|  |                                                        |                              move.w d0,8(a0)
      CstCleanupQueueViewBuffer->height =  blitheight; 
    38e0:	|  |                                                        |                              move.w d3,10(a0)
      CstCleanupQueueViewBuffer->startxinbytes =  (x/16)*2; 
    38e4:	|  |                                                        |                              move.w d2,12(a0)
      CstCleanupQueueViewBuffer->starty = ystartdst;
    38e8:	|  |                                                        |                              move.w 48(sp),14(a0)
    38ee:	|  |                                                        |                              move.w #-1,50(sp)
    38f4:	|  |                                                        |                              moveq #-2,d7
    bltalwm = 0; //Last Word of this channel almost masked out
    38f6:	|  |                                                        |                              suba.l a4,a4
    cutwordssource = 0;
    38f8:	|  |                                                        |                              clr.w d6
    extrawords = 1;
    38fa:	|  |                                                        |                              moveq #1,d2
    38fc:	|  |                                                        '----------------------------- bra.w 3554 <CstScaleSprite+0x64c>
      CstCleanupQueueViewBuffer->widthinwords = single->width/16+cutwordssource;
    3900:	|  '-------------------------------------------------------------------------------------> moveq #15,d0
    3902:	|                                                                                          add.l d1,d0
    3904:	|                                                                                          asr.l #4,d0
    3906:	|                                                                                          movea.w 58(sp),a1
    390a:	|                                                                                          adda.w d0,a1
    390c:	|                                                                                          move.w a1,8(a0)
      CstCleanupQueueViewBuffer->height =  blitheight;
    3910:	|                                                                                          move.w d3,10(a0)
      CstCleanupQueueViewBuffer->startxinbytes =  (x/16)*2; //X Start in Bytes;
    3914:	|                                                                                          move.w 78(sp),12(a0)
      CstCleanupQueueViewBuffer->starty = ystartdst; 
    391a:	|                                                                                          move.w 48(sp),14(a0)
    3920:	|                                                                                          move.w #-1,50(sp)
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    3926:	|                                                                                          clr.w d2
    3928:	'----------------------------------------------------------------------------------------- bra.w 30ec <CstScaleSprite+0x1e4>

0000392c <CstSetCl>:

void CstSetCl(UWORD *copperlist)
{
    392c:	subq.l #4,sp
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    392e:	move.l #14675968,(sp)
  custom->cop1lc = (ULONG) copperlist;
    3934:	move.l 8(sp),d0
    3938:	movea.l (sp),a0
    393a:	move.l d0,128(a0)
}
    393e:	nop
    3940:	addq.l #4,sp
    3942:	rts

00003944 <CstSwapBuffer>:

void CstSwapBuffer( ) {
    3944:	lea -20(sp),sp
  ULONG *tmp;
  tmp = CstViewBuffer;
    3948:	move.l 1ced6 <CstViewBuffer>,16(sp)
  CstViewBuffer = CstDrawBuffer;
    3950:	move.l 1ceda <CstDrawBuffer>,d0
    3956:	move.l d0,1ced6 <CstViewBuffer>
  CstDrawBuffer = tmp;
    395c:	move.l 16(sp),1ceda <CstDrawBuffer>

  struct CleanupQueue *tmp2 = CstCleanupQueueViewBuffer;
    3964:	move.l 1cede <CstCleanupQueueViewBuffer>,12(sp)
  CstCleanupQueueViewBuffer = CstCleanupQueueDrawBuffer;
    396c:	move.l 1cee2 <CstCleanupQueueDrawBuffer>,d0
    3972:	move.l d0,1cede <CstCleanupQueueViewBuffer>
  CstCleanupQueueDrawBuffer = tmp2;
    3978:	move.l 12(sp),1cee2 <CstCleanupQueueDrawBuffer>


  UWORD *copword = CstCopperList;
    3980:	move.l 1ced2 <CstCopperList>,8(sp)
  ULONG ptr = (ULONG) CstViewBuffer;
    3988:	move.l 1ced6 <CstViewBuffer>,d0
    398e:	move.l d0,4(sp)
  UWORD highword = ptr >> 16;
    3992:	move.l 4(sp),d0
    3996:	clr.w d0
    3998:	swap d0
    399a:	move.w d0,2(sp)
  UWORD lowword = ptr & 0xffff;  
    399e:	move.w 6(sp),(sp)

  copword[CSTBPL1LOW] = lowword;
    39a2:	movea.w #118,a0
    39a6:	adda.l 8(sp),a0
    39aa:	move.w (sp),(a0)
  copword[CSTBPL1HIGH] = highword;
    39ac:	movea.w #114,a0
    39b0:	adda.l 8(sp),a0
    39b4:	move.w 2(sp),(a0)

  ptr +=  40*256;
    39b8:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    39c0:	move.l 4(sp),d0
    39c4:	clr.w d0
    39c6:	swap d0
    39c8:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    39cc:	move.w 6(sp),(sp)

  copword[CSTBPL2LOW] = lowword;
    39d0:	movea.w #126,a0
    39d4:	adda.l 8(sp),a0
    39d8:	move.w (sp),(a0)
  copword[CSTBPL2HIGH] = highword;
    39da:	movea.w #122,a0
    39de:	adda.l 8(sp),a0
    39e2:	move.w 2(sp),(a0)
  
  ptr +=  40*256;
    39e6:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    39ee:	move.l 4(sp),d0
    39f2:	clr.w d0
    39f4:	swap d0
    39f6:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    39fa:	move.w 6(sp),(sp)
  
  copword[CSTBPL3LOW] = lowword;
    39fe:	movea.l 8(sp),a0
    3a02:	lea 134(a0),a0
    3a06:	move.w (sp),(a0)
  copword[CSTBPL3HIGH] = highword;
    3a08:	movea.l 8(sp),a0
    3a0c:	lea 130(a0),a0
    3a10:	move.w 2(sp),(a0)

  ptr +=  40*256;
    3a14:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    3a1c:	move.l 4(sp),d0
    3a20:	clr.w d0
    3a22:	swap d0
    3a24:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    3a28:	move.w 6(sp),(sp)

  copword[CSTBPL4LOW] = lowword;
    3a2c:	movea.l 8(sp),a0
    3a30:	lea 142(a0),a0
    3a34:	move.w (sp),(a0)
  copword[CSTBPL4HIGH] = highword;
    3a36:	movea.l 8(sp),a0
    3a3a:	lea 138(a0),a0
    3a3e:	move.w 2(sp),(a0)

  ptr +=  40*256;
    3a42:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    3a4a:	move.l 4(sp),d0
    3a4e:	clr.w d0
    3a50:	swap d0
    3a52:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    3a56:	move.w 6(sp),(sp)

  copword[CSTBPL5LOW] = lowword;
    3a5a:	movea.l 8(sp),a0
    3a5e:	lea 150(a0),a0
    3a62:	move.w (sp),(a0)
  copword[CSTBPL5HIGH] = highword;
    3a64:	movea.l 8(sp),a0
    3a68:	lea 146(a0),a0
    3a6c:	move.w 2(sp),(a0)

}
    3a70:	nop
    3a72:	lea 20(sp),sp
    3a76:	rts

00003a78 <CstReserveBackdrop>:

BOOL CstReserveBackdrop(int width, int height) {
    3a78:	          lea -68(sp),sp
    3a7c:	          move.l a6,-(sp)

 	KPrintF("CstReserveBackdrop: Begin");
    3a7e:	          pea 185d4 <PutChar+0x38a>
    3a84:	          jsr 177a8 <KPrintF>
    3a8a:	          addq.l #4,sp

  width = width / 8;
    3a8c:	          move.l 76(sp),d0
    3a90:	      ,-- bpl.s 3a94 <CstReserveBackdrop+0x1c>
    3a92:	      |   addq.l #7,d0
    3a94:	      '-> asr.l #3,d0
    3a96:	          move.l d0,76(sp)

  if( width < 40) 
    3a9a:	          moveq #39,d0
    3a9c:	          cmp.l 76(sp),d0
    3aa0:	      ,-- blt.s 3ab6 <CstReserveBackdrop+0x3e>
  {
    KPrintF("CstReserveBackdrop: Screens smaller than 320px not supported.");
    3aa2:	      |   pea 185ee <PutChar+0x3a4>
    3aa8:	      |   jsr 177a8 <KPrintF>
    3aae:	      |   addq.l #4,sp
    return FALSE;
    3ab0:	      |   clr.w d0
    3ab2:	,-----|-- bra.w 3df2 <CstReserveBackdrop+0x37a>
  }  
  KPrintF("CstReserveBackdrop: Screen Okay");
    3ab6:	|     '-> pea 1862c <PutChar+0x3e2>
    3abc:	|         jsr 177a8 <KPrintF>
    3ac2:	|         addq.l #4,sp

  CstCopperList = CstCreateCopperlist( width);
    3ac4:	|         move.l 76(sp),-(sp)
    3ac8:	|         jsr 10ca <CstCreateCopperlist>
    3ace:	|         addq.l #4,sp
    3ad0:	|         move.l d0,1ced2 <CstCopperList>
  KPrintF("CstReserveBackdrop: Copperlist created");
    3ad6:	|         pea 1864c <PutChar+0x402>
    3adc:	|         jsr 177a8 <KPrintF>
    3ae2:	|         addq.l #4,sp
  CstBackdropSizePlane = width*height;
    3ae4:	|         move.l 76(sp),d1
    3ae8:	|         move.l 80(sp),d0
    3aec:	|         muls.w d1,d0
    3aee:	|         move.w d0,1cec8 <CstBackdropSizePlane>
  CstBackdropSize = CstBackdropSizePlane * 5; //Todo: Support other Bitplane Modes;  
    3af4:	|         move.w 1cec8 <CstBackdropSizePlane>,d1
    3afa:	|         move.w d1,d0
    3afc:	|         add.w d0,d0
    3afe:	|         add.w d0,d0
    3b00:	|         add.w d1,d0
    3b02:	|         move.w d0,1cec6 <CstBackdropSize>
  

  CstBackDrop = AllocVec(CstBackdropSize,MEMF_CHIP);
    3b08:	|         move.w 1cec6 <CstBackdropSize>,d0
    3b0e:	|         move.w d0,d0
    3b10:	|         andi.l #65535,d0
    3b16:	|         move.l d0,60(sp)
    3b1a:	|         moveq #2,d1
    3b1c:	|         move.l d1,56(sp)
    3b20:	|         move.l 1cfb6 <SysBase>,d0
    3b26:	|         movea.l d0,a6
    3b28:	|         move.l 60(sp),d0
    3b2c:	|         move.l 56(sp),d1
    3b30:	|         jsr -684(a6)
    3b34:	|         move.l d0,52(sp)
    3b38:	|         move.l 52(sp),d0
    3b3c:	|         move.l d0,1ceca <CstBackDrop>
  if( !CstBackDrop)
    3b42:	|         move.l 1ceca <CstBackDrop>,d0
    3b48:	|     ,-- bne.s 3b5e <CstReserveBackdrop+0xe6>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for Backdrop");
    3b4a:	|     |   pea 18673 <PutChar+0x429>
    3b50:	|     |   jsr 177a8 <KPrintF>
    3b56:	|     |   addq.l #4,sp
    return FALSE;  
    3b58:	|     |   clr.w d0
    3b5a:	+-----|-- bra.w 3df2 <CstReserveBackdrop+0x37a>
  }
  KPrintF("CstReserveBackdrop: Backdrop reserved");
    3b5e:	|     '-> pea 186ab <PutChar+0x461>
    3b64:	|         jsr 177a8 <KPrintF>
    3b6a:	|         addq.l #4,sp

  //Initialize Buffer
  ULONG *cursor = (ULONG *)CstBackDrop;
    3b6c:	|         move.l 1ceca <CstBackDrop>,68(sp)
  for(int i=0;i<CstBackdropSize/4;i++)
    3b74:	|         clr.l 64(sp)
    3b78:	|     ,-- bra.s 3b8e <CstReserveBackdrop+0x116>
  {
    *cursor++ = 0;
    3b7a:	|  ,--|-> move.l 68(sp),d0
    3b7e:	|  |  |   move.l d0,d1
    3b80:	|  |  |   addq.l #4,d1
    3b82:	|  |  |   move.l d1,68(sp)
    3b86:	|  |  |   movea.l d0,a0
    3b88:	|  |  |   clr.l (a0)
  for(int i=0;i<CstBackdropSize/4;i++)
    3b8a:	|  |  |   addq.l #1,64(sp)
    3b8e:	|  |  '-> move.w 1cec6 <CstBackdropSize>,d0
    3b94:	|  |      lsr.w #2,d0
    3b96:	|  |      move.w d0,d0
    3b98:	|  |      andi.l #65535,d0
    3b9e:	|  |      cmp.l 64(sp),d0
    3ba2:	|  '----- bgt.s 3b7a <CstReserveBackdrop+0x102>
  }  
  
  CstDrawBuffer = AllocVec(CstBackdropSize+width*2,MEMF_CHIP); //Some extra size for bob routine border area
    3ba4:	|         move.w 1cec6 <CstBackdropSize>,d0
    3baa:	|         move.w d0,d0
    3bac:	|         andi.l #65535,d0
    3bb2:	|         move.l 76(sp),d1
    3bb6:	|         add.l d1,d1
    3bb8:	|         add.l d1,d0
    3bba:	|         move.l d0,48(sp)
    3bbe:	|         moveq #2,d0
    3bc0:	|         move.l d0,44(sp)
    3bc4:	|         move.l 1cfb6 <SysBase>,d0
    3bca:	|         movea.l d0,a6
    3bcc:	|         move.l 48(sp),d0
    3bd0:	|         move.l 44(sp),d1
    3bd4:	|         jsr -684(a6)
    3bd8:	|         move.l d0,40(sp)
    3bdc:	|         move.l 40(sp),d0
    3be0:	|         move.l d0,1ceda <CstDrawBuffer>
  if( !CstDrawBuffer)
    3be6:	|         move.l 1ceda <CstDrawBuffer>,d0
    3bec:	|     ,-- bne.s 3c02 <CstReserveBackdrop+0x18a>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for DrawBuffer");
    3bee:	|     |   pea 186d1 <PutChar+0x487>
    3bf4:	|     |   jsr 177a8 <KPrintF>
    3bfa:	|     |   addq.l #4,sp
    return FALSE;  
    3bfc:	|     |   clr.w d0
    3bfe:	+-----|-- bra.w 3df2 <CstReserveBackdrop+0x37a>
  }
  KPrintF("CstReserveBackdrop: DrawBuffer reserved");
    3c02:	|     '-> pea 1870b <PutChar+0x4c1>
    3c08:	|         jsr 177a8 <KPrintF>
    3c0e:	|         addq.l #4,sp
    
  CstViewBuffer = AllocVec(CstBackdropSize+width*2,MEMF_CHIP); //Some extra size for bob routine border area
    3c10:	|         move.w 1cec6 <CstBackdropSize>,d0
    3c16:	|         move.w d0,d0
    3c18:	|         andi.l #65535,d0
    3c1e:	|         move.l 76(sp),d1
    3c22:	|         add.l d1,d1
    3c24:	|         add.l d1,d0
    3c26:	|         move.l d0,36(sp)
    3c2a:	|         moveq #2,d1
    3c2c:	|         move.l d1,32(sp)
    3c30:	|         move.l 1cfb6 <SysBase>,d0
    3c36:	|         movea.l d0,a6
    3c38:	|         move.l 36(sp),d0
    3c3c:	|         move.l 32(sp),d1
    3c40:	|         jsr -684(a6)
    3c44:	|         move.l d0,28(sp)
    3c48:	|         move.l 28(sp),d0
    3c4c:	|         move.l d0,1ced6 <CstViewBuffer>
  if( !CstViewBuffer)
    3c52:	|         move.l 1ced6 <CstViewBuffer>,d0
    3c58:	|     ,-- bne.s 3c6e <CstReserveBackdrop+0x1f6>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for ViewBuffer");
    3c5a:	|     |   pea 18733 <PutChar+0x4e9>
    3c60:	|     |   jsr 177a8 <KPrintF>
    3c66:	|     |   addq.l #4,sp
    return FALSE;  
    3c68:	|     |   clr.w d0
    3c6a:	+-----|-- bra.w 3df2 <CstReserveBackdrop+0x37a>
  }
  KPrintF("CstReserveBackdrop: ViewBuffer reserved");
    3c6e:	|     '-> pea 1876d <PutChar+0x523>
    3c74:	|         jsr 177a8 <KPrintF>
    3c7a:	|         addq.l #4,sp
  
  CstDrawBuffer += width/4; //divide with 4 because pointer is ulong 
    3c7c:	|         move.l 1ceda <CstDrawBuffer>,d1
    3c82:	|         move.l 76(sp),d0
    3c86:	|     ,-- bpl.s 3c8a <CstReserveBackdrop+0x212>
    3c88:	|     |   addq.l #3,d0
    3c8a:	|     '-> asr.l #2,d0
    3c8c:	|         add.l d0,d0
    3c8e:	|         add.l d0,d0
    3c90:	|         add.l d1,d0
    3c92:	|         move.l d0,1ceda <CstDrawBuffer>
  CstViewBuffer += width/4; //divide with 4 because pointer is ulong
    3c98:	|         move.l 1ced6 <CstViewBuffer>,d1
    3c9e:	|         move.l 76(sp),d0
    3ca2:	|     ,-- bpl.s 3ca6 <CstReserveBackdrop+0x22e>
    3ca4:	|     |   addq.l #3,d0
    3ca6:	|     '-> asr.l #2,d0
    3ca8:	|         add.l d0,d0
    3caa:	|         add.l d0,d0
    3cac:	|         add.l d1,d0
    3cae:	|         move.l d0,1ced6 <CstViewBuffer>
  
  CstZBufferResult = AllocVec( CSTMAXWIDTHSPRITE/8*CSTMAXHEIGHTSPRITE,MEMF_CHIP);
    3cb4:	|         move.l #5200,24(sp)
    3cbc:	|         moveq #2,d0
    3cbe:	|         move.l d0,20(sp)
    3cc2:	|         move.l 1cfb6 <SysBase>,d0
    3cc8:	|         movea.l d0,a6
    3cca:	|         move.l 24(sp),d0
    3cce:	|         move.l 20(sp),d1
    3cd2:	|         jsr -684(a6)
    3cd6:	|         move.l d0,16(sp)
    3cda:	|         move.l 16(sp),d0
    3cde:	|         move.l d0,1cef2 <CstZBufferResult>
  CstZBufferWork = AllocVec( (CSTMAXWIDTHSPRITE/8+2)*CSTMAXHEIGHTSPRITE,MEMF_CHIP);
    3ce4:	|         move.l #5600,12(sp)
    3cec:	|         moveq #2,d1
    3cee:	|         move.l d1,8(sp)
    3cf2:	|         move.l 1cfb6 <SysBase>,d0
    3cf8:	|         movea.l d0,a6
    3cfa:	|         move.l 12(sp),d0
    3cfe:	|         move.l 8(sp),d1
    3d02:	|         jsr -684(a6)
    3d06:	|         move.l d0,4(sp)
    3d0a:	|         move.l 4(sp),d0
    3d0e:	|         move.l d0,1cef6 <CstZBufferWork>

#ifdef EMULATOR
 	debug_register_bitmap(CstBackDrop, "CstBackDrop.bpl", 320, 256, 5, 0);
    3d14:	|         move.l 1ceca <CstBackDrop>,d0
    3d1a:	|         clr.l -(sp)
    3d1c:	|         pea 5 <_start+0x5>
    3d20:	|         pea 100 <copyString+0x48>
    3d24:	|         pea 140 <decodeFilename+0x28>
    3d28:	|         pea 18795 <PutChar+0x54b>
    3d2e:	|         move.l d0,-(sp)
    3d30:	|         jsr 17890 <debug_register_bitmap>
    3d36:	|         lea 24(sp),sp
  debug_register_bitmap(CstDrawBuffer, "drawbuffer.bpl", width*8, height, 5, 0);
    3d3a:	|         move.l 80(sp),d0
    3d3e:	|         movea.w d0,a1
    3d40:	|         move.l 76(sp),d0
    3d44:	|         lsl.w #3,d0
    3d46:	|         movea.w d0,a0
    3d48:	|         move.l 1ceda <CstDrawBuffer>,d0
    3d4e:	|         clr.l -(sp)
    3d50:	|         pea 5 <_start+0x5>
    3d54:	|         move.l a1,-(sp)
    3d56:	|         move.l a0,-(sp)
    3d58:	|         pea 187a5 <PutChar+0x55b>
    3d5e:	|         move.l d0,-(sp)
    3d60:	|         jsr 17890 <debug_register_bitmap>
    3d66:	|         lea 24(sp),sp
  debug_register_bitmap(CstViewBuffer, "viewbuffer.bpl", width*8, height, 5, 0);
    3d6a:	|         move.l 80(sp),d0
    3d6e:	|         movea.w d0,a1
    3d70:	|         move.l 76(sp),d0
    3d74:	|         lsl.w #3,d0
    3d76:	|         movea.w d0,a0
    3d78:	|         move.l 1ced6 <CstViewBuffer>,d0
    3d7e:	|         clr.l -(sp)
    3d80:	|         pea 5 <_start+0x5>
    3d84:	|         move.l a1,-(sp)
    3d86:	|         move.l a0,-(sp)
    3d88:	|         pea 187b4 <PutChar+0x56a>
    3d8e:	|         move.l d0,-(sp)
    3d90:	|         jsr 17890 <debug_register_bitmap>
    3d96:	|         lea 24(sp),sp
#endif

  

  if( !CstCopperList || ! CstDrawBuffer || !CstViewBuffer)
    3d9a:	|         move.l 1ced2 <CstCopperList>,d0
    3da0:	|     ,-- beq.s 3db2 <CstReserveBackdrop+0x33a>
    3da2:	|     |   move.l 1ceda <CstDrawBuffer>,d0
    3da8:	|     +-- beq.s 3db2 <CstReserveBackdrop+0x33a>
    3daa:	|     |   move.l 1ced6 <CstViewBuffer>,d0
    3db0:	|  ,--|-- bne.s 3dc4 <CstReserveBackdrop+0x34c>
  {
    KPrintF("CstReserveBackdrop: Memory allocation failed");
    3db2:	|  |  '-> pea 187c3 <PutChar+0x579>
    3db8:	|  |      jsr 177a8 <KPrintF>
    3dbe:	|  |      addq.l #4,sp
    return FALSE;
    3dc0:	|  |      clr.w d0
    3dc2:	+--|----- bra.s 3df2 <CstReserveBackdrop+0x37a>
  }

  KPrintF("CstReserveBackdrop: Setting Copperlist");
    3dc4:	|  '----> pea 187f0 <PutChar+0x5a6>
    3dca:	|         jsr 177a8 <KPrintF>
    3dd0:	|         addq.l #4,sp
  CstSetCl( CstCopperList);
    3dd2:	|         move.l 1ced2 <CstCopperList>,d0
    3dd8:	|         move.l d0,-(sp)
    3dda:	|         jsr 392c <CstSetCl>
    3de0:	|         addq.l #4,sp
  KPrintF("CstReserveBackdrop: Copperlist Set");
    3de2:	|         pea 18817 <PutChar+0x5cd>
    3de8:	|         jsr 177a8 <KPrintF>
    3dee:	|         addq.l #4,sp
  return TRUE;
    3df0:	|         moveq #1,d0

}
    3df2:	'-------> movea.l (sp)+,a6
    3df4:	          lea 68(sp),sp
    3df8:	          rts

00003dfa <CstUnfreeze>:

void CstUnfreeze() {
    3dfa:	       lea -52(sp),sp
    3dfe:	       move.l a6,-(sp)
    3e00:	       move.l d2,-(sp)
	KPrintF("CstUnfreeze: Unfreezing Background Started");  
    3e02:	       pea 1883a <PutChar+0x5f0>
    3e08:	       jsr 177a8 <KPrintF>
    3e0e:	       addq.l #4,sp

  UWORD size = winWidth/8*winHeight*5;
    3e10:	       move.l 1cefe <winWidth>,d0
    3e16:	       lsr.l #3,d0
    3e18:	       move.l d0,d1
    3e1a:	       move.l 1cf02 <winHeight>,d0
    3e20:	       move.l d0,d0
    3e22:	       muls.w d0,d1
    3e24:	       move.w d1,d0
    3e26:	       add.w d0,d0
    3e28:	       add.w d0,d0
    3e2a:	       move.w d0,d2
    3e2c:	       add.w d1,d2
    3e2e:	       move.w d2,46(sp)

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    3e32:	       move.l #14675968,42(sp)

#ifdef EMULATOR
  debug_register_bitmap(CstBackDropBackup, "BackDropBackup", winWidth, winHeight, 5, 0);
    3e3a:	       move.l 1cf02 <winHeight>,d0
    3e40:	       move.l d0,d0
    3e42:	       movea.w d0,a1
    3e44:	       move.l 1cefe <winWidth>,d0
    3e4a:	       move.l d0,d0
    3e4c:	       movea.w d0,a0
    3e4e:	       move.l 1cece <CstBackDropBackup>,d0
    3e54:	       clr.l -(sp)
    3e56:	       pea 5 <_start+0x5>
    3e5a:	       move.l a1,-(sp)
    3e5c:	       move.l a0,-(sp)
    3e5e:	       pea 18457 <PutChar+0x20d>
    3e64:	       move.l d0,-(sp)
    3e66:	       jsr 17890 <debug_register_bitmap>
    3e6c:	       lea 24(sp),sp
#endif  

  ULONG *src = (ULONG *) CstBackDropBackup;
    3e70:	       move.l 1cece <CstBackDropBackup>,56(sp)
  ULONG *dst = (ULONG *) CstBackDrop;
    3e78:	       move.l 1ceca <CstBackDrop>,52(sp)
  for(int i=0;i<size/4;i++) 
    3e80:	       clr.l 48(sp)
    3e84:	   ,-- bra.s 3eaa <CstUnfreeze+0xb0>
  {
    *dst++ = *src++;
    3e86:	,--|-> move.l 56(sp),d1
    3e8a:	|  |   move.l d1,d0
    3e8c:	|  |   addq.l #4,d0
    3e8e:	|  |   move.l d0,56(sp)
    3e92:	|  |   move.l 52(sp),d0
    3e96:	|  |   move.l d0,d2
    3e98:	|  |   addq.l #4,d2
    3e9a:	|  |   move.l d2,52(sp)
    3e9e:	|  |   movea.l d1,a0
    3ea0:	|  |   move.l (a0),d1
    3ea2:	|  |   movea.l d0,a0
    3ea4:	|  |   move.l d1,(a0)
  for(int i=0;i<size/4;i++) 
    3ea6:	|  |   addq.l #1,48(sp)
    3eaa:	|  '-> move.w 46(sp),d0
    3eae:	|      lsr.w #2,d0
    3eb0:	|      move.w d0,d0
    3eb2:	|      andi.l #65535,d0
    3eb8:	|      cmp.l 48(sp),d0
    3ebc:	'----- bgt.s 3e86 <CstUnfreeze+0x8c>
  }

  struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    3ebe:	       move.l 1cee2 <CstCleanupQueueDrawBuffer>,38(sp)
  CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    3ec6:	       moveq #20,d0
    3ec8:	       move.l d0,34(sp)
    3ecc:	       clr.l 30(sp)
    3ed0:	       move.l 1cfb6 <SysBase>,d0
    3ed6:	       movea.l d0,a6
    3ed8:	       move.l 34(sp),d0
    3edc:	       move.l 30(sp),d1
    3ee0:	       jsr -684(a6)
    3ee4:	       move.l d0,26(sp)
    3ee8:	       move.l 26(sp),d0
    3eec:	       move.l d0,1cee2 <CstCleanupQueueDrawBuffer>
  CstCleanupQueueDrawBuffer->next = next;
    3ef2:	       movea.l 1cee2 <CstCleanupQueueDrawBuffer>,a0
    3ef8:	       move.l 38(sp),16(a0)
  CstCleanupQueueDrawBuffer->x = 0;
    3efe:	       movea.l 1cee2 <CstCleanupQueueDrawBuffer>,a0
    3f04:	       clr.w (a0)
  CstCleanupQueueDrawBuffer->y = 0;
    3f06:	       movea.l 1cee2 <CstCleanupQueueDrawBuffer>,a0
    3f0c:	       clr.w 2(a0)
  CstCleanupQueueDrawBuffer->person = NULL;
    3f10:	       movea.l 1cee2 <CstCleanupQueueDrawBuffer>,a0
    3f16:	       clr.l 4(a0)
  CstCleanupQueueDrawBuffer->widthinwords = winWidth/16;
    3f1a:	       move.l 1cefe <winWidth>,d0
    3f20:	       lsr.l #4,d0
    3f22:	       movea.l 1cee2 <CstCleanupQueueDrawBuffer>,a0
    3f28:	       move.l d0,d0
    3f2a:	       move.w d0,8(a0)
  CstCleanupQueueDrawBuffer->height = winHeight;
    3f2e:	       move.l 1cf02 <winHeight>,d0
    3f34:	       movea.l 1cee2 <CstCleanupQueueDrawBuffer>,a0
    3f3a:	       move.l d0,d0
    3f3c:	       move.w d0,10(a0)
  CstCleanupQueueDrawBuffer->startxinbytes = 0;
    3f40:	       movea.l 1cee2 <CstCleanupQueueDrawBuffer>,a0
    3f46:	       clr.w 12(a0)
  CstCleanupQueueDrawBuffer->starty = 0;
    3f4a:	       movea.l 1cee2 <CstCleanupQueueDrawBuffer>,a0
    3f50:	       clr.w 14(a0)
  next = CstCleanupQueueViewBuffer;
    3f54:	       move.l 1cede <CstCleanupQueueViewBuffer>,38(sp)
  CstCleanupQueueViewBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    3f5c:	       moveq #20,d2
    3f5e:	       move.l d2,22(sp)
    3f62:	       clr.l 18(sp)
    3f66:	       move.l 1cfb6 <SysBase>,d0
    3f6c:	       movea.l d0,a6
    3f6e:	       move.l 22(sp),d0
    3f72:	       move.l 18(sp),d1
    3f76:	       jsr -684(a6)
    3f7a:	       move.l d0,14(sp)
    3f7e:	       move.l 14(sp),d0
    3f82:	       move.l d0,1cede <CstCleanupQueueViewBuffer>
  CstCleanupQueueViewBuffer->next = next;
    3f88:	       movea.l 1cede <CstCleanupQueueViewBuffer>,a0
    3f8e:	       move.l 38(sp),16(a0)
  CstCleanupQueueViewBuffer->x = 0;
    3f94:	       movea.l 1cede <CstCleanupQueueViewBuffer>,a0
    3f9a:	       clr.w (a0)
  CstCleanupQueueViewBuffer->y = 0;
    3f9c:	       movea.l 1cede <CstCleanupQueueViewBuffer>,a0
    3fa2:	       clr.w 2(a0)
  CstCleanupQueueViewBuffer->person = NULL;
    3fa6:	       movea.l 1cede <CstCleanupQueueViewBuffer>,a0
    3fac:	       clr.l 4(a0)
  CstCleanupQueueViewBuffer->widthinwords = winWidth/16;
    3fb0:	       move.l 1cefe <winWidth>,d0
    3fb6:	       lsr.l #4,d0
    3fb8:	       movea.l 1cede <CstCleanupQueueViewBuffer>,a0
    3fbe:	       move.l d0,d0
    3fc0:	       move.w d0,8(a0)
  CstCleanupQueueViewBuffer->height = winHeight;
    3fc4:	       move.l 1cf02 <winHeight>,d0
    3fca:	       movea.l 1cede <CstCleanupQueueViewBuffer>,a0
    3fd0:	       move.l d0,d0
    3fd2:	       move.w d0,10(a0)
  CstCleanupQueueViewBuffer->startxinbytes = 0;
    3fd6:	       movea.l 1cede <CstCleanupQueueViewBuffer>,a0
    3fdc:	       clr.w 12(a0)
  CstCleanupQueueViewBuffer->starty = 0;  
    3fe0:	       movea.l 1cede <CstCleanupQueueViewBuffer>,a0
    3fe6:	       clr.w 14(a0)
  
  if( CstBackDropBackup) {
    3fea:	       move.l 1cece <CstBackDropBackup>,d0
    3ff0:	   ,-- beq.s 4018 <CstUnfreeze+0x21e>
    KPrintF("CstUnfreeze: Free CstBackdropBackup");
    3ff2:	   |   pea 18865 <PutChar+0x61b>
    3ff8:	   |   jsr 177a8 <KPrintF>
    3ffe:	   |   addq.l #4,sp
    FreeVec( CstBackDropBackup);
    4000:	   |   move.l 1cece <CstBackDropBackup>,10(sp)
    4008:	   |   move.l 1cfb6 <SysBase>,d0
    400e:	   |   movea.l d0,a6
    4010:	   |   movea.l 10(sp),a1
    4014:	   |   jsr -690(a6)
  }

  KPrintF("CstUnfreeze: Finished");
    4018:	   '-> pea 18889 <PutChar+0x63f>
    401e:	       jsr 177a8 <KPrintF>
    4024:	       addq.l #4,sp

}
    4026:	       nop
    4028:	       move.l (sp)+,d2
    402a:	       movea.l (sp)+,a6
    402c:	       lea 52(sp),sp
    4030:	       rts

00004032 <addSpeechLine>:

struct speechStruct * speech;
FLOAT speechSpeed = 1;


void addSpeechLine (char * theLine, int x, int *offset) {
    4032:	       lea -28(sp),sp
    4036:	       movem.l d2-d5/a6,-(sp)
	int halfWidth = (stringWidth (theLine) >> 1)/cameraZoom;
    403a:	       move.l 52(sp),-(sp)
    403e:	       jsr 15db2 <stringWidth>
    4044:	       addq.l #4,sp
    4046:	       asr.l #1,d0
    4048:	       move.l d0,-(sp)
    404a:	       jsr 17bda <__floatsisf>
    4050:	       addq.l #4,sp
    4052:	       move.l d0,d1
    4054:	       move.l 1c946 <cameraZoom>,d0
    405a:	       move.l d0,-(sp)
    405c:	       move.l d1,-(sp)
    405e:	       jsr 17a90 <__divsf3>
    4064:	       addq.l #8,sp
    4066:	       move.l d0,-(sp)
    4068:	       jsr 17b72 <__fixsfsi>
    406e:	       addq.l #4,sp
    4070:	       move.l d0,44(sp)
	int xx1 = x - (halfWidth);
    4074:	       move.l 56(sp),d0
    4078:	       sub.l 44(sp),d0
    407c:	       move.l d0,40(sp)
	int xx2 = x + (halfWidth);
    4080:	       move.l 56(sp),d0
    4084:	       add.l 44(sp),d0
    4088:	       move.l d0,36(sp)
	struct speechLine * newLine = AllocVec(sizeof(struct speechLine),MEMF_ANY);
    408c:	       moveq #12,d0
    408e:	       move.l d0,32(sp)
    4092:	       clr.l 28(sp)
    4096:	       move.l 1cfb6 <SysBase>,d0
    409c:	       movea.l d0,a6
    409e:	       move.l 32(sp),d0
    40a2:	       move.l 28(sp),d1
    40a6:	       jsr -684(a6)
    40aa:	       move.l d0,24(sp)
    40ae:	       move.l 24(sp),d0
    40b2:	       move.l d0,20(sp)

	newLine -> next = speech -> allSpeech;
    40b6:	       movea.l 1cefa <speech>,a0
    40bc:	       move.l 4(a0),d0
    40c0:	       movea.l 20(sp),a0
    40c4:	       move.l d0,4(a0)
	newLine -> textLine = copyString (theLine);
    40c8:	       move.l 52(sp),-(sp)
    40cc:	       jsr b8 <copyString>
    40d2:	       addq.l #4,sp
    40d4:	       movea.l 20(sp),a0
    40d8:	       move.l d0,(a0)
	newLine -> x = xx1;
    40da:	       movea.l 20(sp),a0
    40de:	       move.l 40(sp),8(a0)
	speech -> allSpeech = newLine;
    40e4:	       movea.l 1cefa <speech>,a0
    40ea:	       move.l 20(sp),4(a0)
	if ((xx1 < 5) && (*offset < (5 - xx1))) {
    40f0:	       moveq #4,d0
    40f2:	       cmp.l 40(sp),d0
    40f6:	   ,-- blt.s 4118 <addSpeechLine+0xe6>
    40f8:	   |   movea.l 60(sp),a0
    40fc:	   |   move.l (a0),d1
    40fe:	   |   moveq #5,d0
    4100:	   |   sub.l 40(sp),d0
    4104:	   |   cmp.l d1,d0
    4106:	   +-- ble.s 4118 <addSpeechLine+0xe6>
		*offset = 5 - xx1;
    4108:	   |   moveq #5,d0
    410a:	   |   sub.l 40(sp),d0
    410e:	   |   movea.l 60(sp),a0
    4112:	   |   move.l d0,(a0)
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
		*offset = (int) ((FLOAT)winWidth/cameraZoom) - 5 - xx2;
	}
}
    4114:	,--|-- bra.w 4244 <addSpeechLine+0x212>
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
    4118:	|  '-> move.l 36(sp),-(sp)
    411c:	|      jsr 17bda <__floatsisf>
    4122:	|      addq.l #4,sp
    4124:	|      move.l d0,d2
    4126:	|      move.l 1cefe <winWidth>,d0
    412c:	|      move.l d0,-(sp)
    412e:	|      jsr 17c02 <__floatunsisf>
    4134:	|      addq.l #4,sp
    4136:	|      move.l d0,d1
    4138:	|      move.l 1c946 <cameraZoom>,d0
    413e:	|      move.l d0,-(sp)
    4140:	|      move.l d1,-(sp)
    4142:	|      jsr 17a90 <__divsf3>
    4148:	|      addq.l #8,sp
    414a:	|      move.l #1084227584,-(sp)
    4150:	|      move.l d0,-(sp)
    4152:	|      jsr 17ece <__subsf3>
    4158:	|      addq.l #8,sp
    415a:	|      move.l d0,-(sp)
    415c:	|      move.l d2,-(sp)
    415e:	|      jsr 17cc2 <__gesf2>
    4164:	|      addq.l #8,sp
    4166:	|      tst.l d0
    4168:	|  ,-- bge.s 416e <addSpeechLine+0x13c>
}
    416a:	+--|-- bra.w 4244 <addSpeechLine+0x212>
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
    416e:	|  '-> movea.l 60(sp),a0
    4172:	|      move.l (a0),d0
    4174:	|      move.l d0,-(sp)
    4176:	|      jsr 17bda <__floatsisf>
    417c:	|      addq.l #4,sp
    417e:	|      move.l d0,-(sp)
    4180:	|      jsr 17afc <__extendsfdf2>
    4186:	|      addq.l #4,sp
    4188:	|      move.l d0,d4
    418a:	|      move.l d1,d5
    418c:	|      move.l 1cefe <winWidth>,d0
    4192:	|      move.l d0,-(sp)
    4194:	|      jsr 17c02 <__floatunsisf>
    419a:	|      addq.l #4,sp
    419c:	|      move.l d0,d1
    419e:	|      move.l 1c946 <cameraZoom>,d0
    41a4:	|      move.l d0,-(sp)
    41a6:	|      move.l d1,-(sp)
    41a8:	|      jsr 17a90 <__divsf3>
    41ae:	|      addq.l #8,sp
    41b0:	|      move.l d0,-(sp)
    41b2:	|      jsr 17afc <__extendsfdf2>
    41b8:	|      addq.l #4,sp
    41ba:	|      clr.l -(sp)
    41bc:	|      move.l #1075052544,-(sp)
    41c2:	|      move.l d1,-(sp)
    41c4:	|      move.l d0,-(sp)
    41c6:	|      jsr 17e6c <__subdf3>
    41cc:	|      lea 16(sp),sp
    41d0:	|      move.l d0,d2
    41d2:	|      move.l d1,d3
    41d4:	|      move.l 36(sp),-(sp)
    41d8:	|      jsr 17b9a <__floatsidf>
    41de:	|      addq.l #4,sp
    41e0:	|      move.l d1,-(sp)
    41e2:	|      move.l d0,-(sp)
    41e4:	|      move.l d3,-(sp)
    41e6:	|      move.l d2,-(sp)
    41e8:	|      jsr 17e6c <__subdf3>
    41ee:	|      lea 16(sp),sp
    41f2:	|      move.l d1,-(sp)
    41f4:	|      move.l d0,-(sp)
    41f6:	|      move.l d5,-(sp)
    41f8:	|      move.l d4,-(sp)
    41fa:	|      jsr 17cf8 <__gtdf2>
    4200:	|      lea 16(sp),sp
    4204:	|      tst.l d0
    4206:	|  ,-- bgt.s 420a <addSpeechLine+0x1d8>
}
    4208:	+--|-- bra.s 4244 <addSpeechLine+0x212>
		*offset = (int) ((FLOAT)winWidth/cameraZoom) - 5 - xx2;
    420a:	|  '-> move.l 1cefe <winWidth>,d0
    4210:	|      move.l d0,-(sp)
    4212:	|      jsr 17c02 <__floatunsisf>
    4218:	|      addq.l #4,sp
    421a:	|      move.l d0,d1
    421c:	|      move.l 1c946 <cameraZoom>,d0
    4222:	|      move.l d0,-(sp)
    4224:	|      move.l d1,-(sp)
    4226:	|      jsr 17a90 <__divsf3>
    422c:	|      addq.l #8,sp
    422e:	|      move.l d0,-(sp)
    4230:	|      jsr 17b72 <__fixsfsi>
    4236:	|      addq.l #4,sp
    4238:	|      subq.l #5,d0
    423a:	|      sub.l 36(sp),d0
    423e:	|      movea.l 60(sp),a0
    4242:	|      move.l d0,(a0)
}
    4244:	'----> nop
    4246:	       movem.l (sp)+,d2-d5/a6
    424a:	       lea 28(sp),sp
    424e:	       rts

00004250 <initSpeech>:


void initSpeech () {
    4250:	       lea -12(sp),sp
    4254:	       move.l a6,-(sp)
	speech = AllocVec(sizeof(struct speechStruct), MEMF_ANY);
    4256:	       moveq #20,d0
    4258:	       move.l d0,12(sp)
    425c:	       clr.l 8(sp)
    4260:	       move.l 1cfb6 <SysBase>,d0
    4266:	       movea.l d0,a6
    4268:	       move.l 12(sp),d0
    426c:	       move.l 8(sp),d1
    4270:	       jsr -684(a6)
    4274:	       move.l d0,4(sp)
    4278:	       move.l 4(sp),d0
    427c:	       move.l d0,1cefa <speech>
	if (speech) {
    4282:	       move.l 1cefa <speech>,d0
    4288:	,----- beq.s 42b4 <initSpeech+0x64>
		speech -> currentTalker = NULL;
    428a:	|      movea.l 1cefa <speech>,a0
    4290:	|      clr.l (a0)
		speech -> allSpeech = NULL;
    4292:	|      movea.l 1cefa <speech>,a0
    4298:	|      clr.l 4(a0)
		speech -> speechY = 0;
    429c:	|      movea.l 1cefa <speech>,a0
    42a2:	|      clr.l 8(a0)
		speech -> lastFile = -1;
    42a6:	|      movea.l 1cefa <speech>,a0
    42ac:	|      moveq #-1,d0
    42ae:	|      move.l d0,12(a0)
	} else
    {
        KPrintF("Could not allocate memory");
    }
}
    42b2:	|  ,-- bra.s 42c2 <initSpeech+0x72>
        KPrintF("Could not allocate memory");
    42b4:	'--|-> pea 1889f <PutChar+0x655>
    42ba:	   |   jsr 177a8 <KPrintF>
    42c0:	   |   addq.l #4,sp
}
    42c2:	   '-> nop
    42c4:	       movea.l (sp)+,a6
    42c6:	       lea 12(sp),sp
    42ca:	       rts

000042cc <isThereAnySpeechGoingOn>:

int isThereAnySpeechGoingOn () {
	return speech -> allSpeech ? speech -> lookWhosTalking : -1;
    42cc:	       movea.l 1cefa <speech>,a0
    42d2:	       move.l 4(a0),d0
    42d6:	,----- beq.s 42e4 <isThereAnySpeechGoingOn+0x18>
    42d8:	|      movea.l 1cefa <speech>,a0
    42de:	|      move.l 16(a0),d0
    42e2:	|  ,-- bra.s 42e6 <isThereAnySpeechGoingOn+0x1a>
    42e4:	'--|-> moveq #-1,d0
}
    42e6:	   '-> rts

000042e8 <killAllSpeech>:

void killAllSpeech () {
    42e8:	       lea -12(sp),sp
    42ec:	       move.l a6,-(sp)
	if (speech -> lastFile != -1) {
    42ee:	       movea.l 1cefa <speech>,a0
    42f4:	       move.l 12(a0),d0
    42f8:	       moveq #-1,d1
    42fa:	       cmp.l d0,d1
    42fc:	   ,-- beq.s 430a <killAllSpeech+0x22>
		//huntKillSound (speech -> lastFile); Amiga Todo: Replace?
		speech -> lastFile = -1;
    42fe:	   |   movea.l 1cefa <speech>,a0
    4304:	   |   moveq #-1,d0
    4306:	   |   move.l d0,12(a0)
	}

	if (speech -> currentTalker) {
    430a:	   '-> movea.l 1cefa <speech>,a0
    4310:	       move.l (a0),d0
    4312:	,----- beq.w 439e <killAllSpeech+0xb6>
		makeSilent (* (speech -> currentTalker));
    4316:	|      movea.l 1cefa <speech>,a0
    431c:	|      move.l (a0),d1
    431e:	|      lea -132(sp),sp
    4322:	|      move.l sp,d0
    4324:	|      movea.w #132,a0
    4328:	|      move.l a0,-(sp)
    432a:	|      move.l d1,-(sp)
    432c:	|      move.l d0,-(sp)
    432e:	|      jsr 1775c <memcpy>
    4334:	|      lea 12(sp),sp
    4338:	|      jsr afae <makeSilent>
    433e:	|      lea 132(sp),sp
		speech -> currentTalker = NULL;
    4342:	|      movea.l 1cefa <speech>,a0
    4348:	|      clr.l (a0)
	}
	
	struct speechLine * killMe;
	
	while (speech -> allSpeech) {
    434a:	+----- bra.s 439e <killAllSpeech+0xb6>
		killMe = speech -> allSpeech;
    434c:	|  ,-> movea.l 1cefa <speech>,a0
    4352:	|  |   move.l 4(a0),12(sp)
		speech -> allSpeech = speech -> allSpeech -> next;
    4358:	|  |   movea.l 1cefa <speech>,a0
    435e:	|  |   movea.l 4(a0),a1
    4362:	|  |   movea.l 1cefa <speech>,a0
    4368:	|  |   move.l 4(a1),d0
    436c:	|  |   move.l d0,4(a0)
		FreeVec(killMe -> textLine);
    4370:	|  |   movea.l 12(sp),a0
    4374:	|  |   move.l (a0),8(sp)
    4378:	|  |   move.l 1cfb6 <SysBase>,d0
    437e:	|  |   movea.l d0,a6
    4380:	|  |   movea.l 8(sp),a1
    4384:	|  |   jsr -690(a6)
		FreeVec(killMe);
    4388:	|  |   move.l 12(sp),4(sp)
    438e:	|  |   move.l 1cfb6 <SysBase>,d0
    4394:	|  |   movea.l d0,a6
    4396:	|  |   movea.l 4(sp),a1
    439a:	|  |   jsr -690(a6)
	while (speech -> allSpeech) {
    439e:	'--|-> movea.l 1cefa <speech>,a0
    43a4:	   |   move.l 4(a0),d0
    43a8:	   '-- bne.s 434c <killAllSpeech+0x64>
	}
}
    43aa:	       nop
    43ac:	       nop
    43ae:	       movea.l (sp)+,a6
    43b0:	       lea 12(sp),sp
    43b4:	       rts

000043b6 <makeTalker>:

	return TRUE;
}

void makeTalker (struct onScreenPerson *me) {
	setFrames (me, ANI_TALK);
    43b6:	pea 2 <_start+0x2>
    43ba:	move.l 8(sp),-(sp)
    43be:	jsr 4516 <setFrames>
    43c4:	addq.l #8,sp
}
    43c6:	nop
    43c8:	rts

000043ca <saveSpeech>:

void saveSpeech (struct speechStruct * sS, BPTR fp) {
    43ca:	       lea -52(sp),sp
    43ce:	       move.l a6,-(sp)
    43d0:	       move.l d2,-(sp)
	struct speechLine * viewLine = sS -> allSpeech;
    43d2:	       movea.l 64(sp),a0
    43d6:	       move.l 4(a0),56(sp)
	
	putFloat (speechSpeed, fp);
    43dc:	       move.l 1c91e <speechSpeed>,d0
    43e2:	       move.l 68(sp),-(sp)
    43e6:	       move.l d0,-(sp)
    43e8:	       jsr a46 <putFloat>
    43ee:	       addq.l #8,sp
	
		// Write y co-ordinate
		put2bytes (sS -> speechY, fp);
    43f0:	       movea.l 64(sp),a0
    43f4:	       move.l 8(a0),d0
    43f8:	       move.l 68(sp),-(sp)
    43fc:	       move.l d0,-(sp)
    43fe:	       jsr 8d0 <put2bytes>
    4404:	       addq.l #8,sp
		
		// Write which character's talking
		put2bytes (sS -> lookWhosTalking, fp);		
    4406:	       movea.l 64(sp),a0
    440a:	       move.l 16(a0),d0
    440e:	       move.l 68(sp),-(sp)
    4412:	       move.l d0,-(sp)
    4414:	       jsr 8d0 <put2bytes>
    441a:	       addq.l #8,sp
		if (sS -> currentTalker) {
    441c:	       movea.l 64(sp),a0
    4420:	       move.l (a0),d0
    4422:	   ,-- beq.s 4466 <saveSpeech+0x9c>
			FPutC (fp, 1);
    4424:	   |   move.l 68(sp),40(sp)
    442a:	   |   moveq #1,d0
    442c:	   |   move.l d0,36(sp)
    4430:	   |   move.l 1cfbe <DOSBase>,d0
    4436:	   |   movea.l d0,a6
    4438:	   |   move.l 40(sp),d1
    443c:	   |   move.l 36(sp),d2
    4440:	   |   jsr -312(a6)
    4444:	   |   move.l d0,32(sp)
			put2bytes (sS->currentTalker->thisType->objectNum, fp);
    4448:	   |   movea.l 64(sp),a0
    444c:	   |   movea.l (a0),a0
    444e:	   |   movea.l 114(a0),a0
    4452:	   |   move.l 4(a0),d0
    4456:	   |   move.l 68(sp),-(sp)
    445a:	   |   move.l d0,-(sp)
    445c:	   |   jsr 8d0 <put2bytes>
    4462:	   |   addq.l #8,sp
    4464:	,--|-- bra.s 44e2 <saveSpeech+0x118>
		} else {
			FPutC (fp, 0);
    4466:	|  '-> move.l 68(sp),52(sp)
    446c:	|      clr.l 48(sp)
    4470:	|      move.l 1cfbe <DOSBase>,d0
    4476:	|      movea.l d0,a6
    4478:	|      move.l 52(sp),d1
    447c:	|      move.l 48(sp),d2
    4480:	|      jsr -312(a6)
    4484:	|      move.l d0,44(sp)
		}
		
		// Write what's being said
		while (viewLine) {
    4488:	+----- bra.s 44e2 <saveSpeech+0x118>
			FPutC (fp, 1);
    448a:	|  ,-> move.l 68(sp),16(sp)
    4490:	|  |   moveq #1,d0
    4492:	|  |   move.l d0,12(sp)
    4496:	|  |   move.l 1cfbe <DOSBase>,d0
    449c:	|  |   movea.l d0,a6
    449e:	|  |   move.l 16(sp),d1
    44a2:	|  |   move.l 12(sp),d2
    44a6:	|  |   jsr -312(a6)
    44aa:	|  |   move.l d0,8(sp)
			writeString (viewLine -> textLine, fp);
    44ae:	|  |   movea.l 56(sp),a0
    44b2:	|  |   move.l (a0),d0
    44b4:	|  |   move.l 68(sp),-(sp)
    44b8:	|  |   move.l d0,-(sp)
    44ba:	|  |   jsr bd8 <writeString>
    44c0:	|  |   addq.l #8,sp
			put2bytes (viewLine -> x, fp);
    44c2:	|  |   movea.l 56(sp),a0
    44c6:	|  |   move.l 8(a0),d0
    44ca:	|  |   move.l 68(sp),-(sp)
    44ce:	|  |   move.l d0,-(sp)
    44d0:	|  |   jsr 8d0 <put2bytes>
    44d6:	|  |   addq.l #8,sp
			viewLine = viewLine -> next;
    44d8:	|  |   movea.l 56(sp),a0
    44dc:	|  |   move.l 4(a0),56(sp)
		while (viewLine) {
    44e2:	'--|-> tst.l 56(sp)
    44e6:	   '-- bne.s 448a <saveSpeech+0xc0>
		}
		FPutC (fp, 0);
    44e8:	       move.l 68(sp),28(sp)
    44ee:	       clr.l 24(sp)
    44f2:	       move.l 1cfbe <DOSBase>,d0
    44f8:	       movea.l d0,a6
    44fa:	       move.l 28(sp),d1
    44fe:	       move.l 24(sp),d2
    4502:	       jsr -312(a6)
    4506:	       move.l d0,20(sp)
}
    450a:	       nop
    450c:	       move.l (sp)+,d2
    450e:	       movea.l (sp)+,a6
    4510:	       lea 52(sp),sp
    4514:	       rts

00004516 <setFrames>:

void setFrames (struct onScreenPerson *m, int a) {
    4516:	move.l d2,-(sp)
	m->myAnim = m->myPersona -> animation[(a * m->myPersona -> numDirections) + m->direction];
    4518:	movea.l 8(sp),a0
    451c:	movea.l 80(a0),a0
    4520:	move.l (a0),d2
    4522:	movea.l 8(sp),a0
    4526:	movea.l 80(a0),a0
    452a:	move.l 4(a0),d0
    452e:	move.l 12(sp),-(sp)
    4532:	move.l d0,-(sp)
    4534:	jsr 18134 <__mulsi3>
    453a:	addq.l #8,sp
    453c:	move.l d0,d1
    453e:	movea.l 8(sp),a0
    4542:	move.l 106(a0),d0
    4546:	add.l d1,d0
    4548:	add.l d0,d0
    454a:	add.l d0,d0
    454c:	movea.l d2,a0
    454e:	adda.l d0,a0
    4550:	move.l (a0),d0
    4552:	movea.l 8(sp),a0
    4556:	move.l d0,72(a0)
}
    455a:	nop
    455c:	move.l (sp)+,d2
    455e:	rts

00004560 <wrapSpeech>:

int wrapSpeech(char * theText, int objT, int sampleFile, BOOL animPerson) {
    4560:	       lea -20(sp),sp
    4564:	       move.l d2,-(sp)
    4566:	       move.l 40(sp),d0
    456a:	       move.w d0,d0
    456c:	       move.w d0,6(sp)
    int i;

    speech->lookWhosTalking = objT;
    4570:	       movea.l 1cefa <speech>,a0
    4576:	       move.l 32(sp),16(a0)
    struct onScreenPerson * thisPerson = findPerson(objT);
    457c:	       move.l 32(sp),-(sp)
    4580:	       jsr aa6e <findPerson>
    4586:	       addq.l #4,sp
    4588:	       move.l d0,16(sp)
    if (thisPerson) {
    458c:	   ,-- beq.s 45b2 <wrapSpeech+0x52>
        //setObjFontColour(thisPerson->thisType); Todo Amigize this
        i = wrapSpeechPerson(theText, thisPerson, sampleFile, animPerson);
    458e:	   |   movea.w 6(sp),a0
    4592:	   |   move.l a0,-(sp)
    4594:	   |   move.l 40(sp),-(sp)
    4598:	   |   move.l 24(sp),-(sp)
    459c:	   |   move.l 40(sp),-(sp)
    45a0:	   |   jsr 4678 <wrapSpeechPerson>
    45a6:	   |   lea 16(sp),sp
    45aa:	   |   move.l d0,20(sp)
    45ae:	,--|-- bra.w 466c <wrapSpeech+0x10c>
    } else {
        struct screenRegion * thisRegion = getRegionForObject(objT);
    45b2:	|  '-> move.l 32(sp),-(sp)
    45b6:	|      jsr 15f8a <getRegionForObject>
    45bc:	|      addq.l #4,sp
    45be:	|      move.l d0,12(sp)
        if (thisRegion) {
    45c2:	|  ,-- beq.s 462e <wrapSpeech+0xce>
            //setObjFontColour(thisRegion->thisType); Todo Amigize this
            i = wrapSpeechXY(theText, ((thisRegion->x1 + thisRegion->x2) >> 1) - cameraX, thisRegion->y1 - thisRegion->thisType->speechGap - cameraY, thisRegion->thisType->wrapSpeech, sampleFile);
    45c4:	|  |   movea.l 12(sp),a0
    45c8:	|  |   movea.l 28(a0),a0
    45cc:	|  |   move.l 28(a0),d0
    45d0:	|  |   movea.l 12(sp),a0
    45d4:	|  |   movea.l 4(a0),a1
    45d8:	|  |   movea.l 12(sp),a0
    45dc:	|  |   movea.l 28(a0),a0
    45e0:	|  |   move.l 20(a0),d1
    45e4:	|  |   movea.l a1,a0
    45e6:	|  |   suba.l d1,a0
    45e8:	|  |   move.l 1d070 <cameraY>,d1
    45ee:	|  |   movea.l a0,a1
    45f0:	|  |   suba.l d1,a1
    45f2:	|  |   movea.l 12(sp),a0
    45f6:	|  |   move.l (a0),d2
    45f8:	|  |   movea.l 12(sp),a0
    45fc:	|  |   move.l 8(a0),d1
    4600:	|  |   add.l d2,d1
    4602:	|  |   move.l d1,d2
    4604:	|  |   asr.l #1,d2
    4606:	|  |   move.l 1d06c <cameraX>,d1
    460c:	|  |   movea.l d2,a0
    460e:	|  |   suba.l d1,a0
    4610:	|  |   move.l 36(sp),-(sp)
    4614:	|  |   move.l d0,-(sp)
    4616:	|  |   move.l a1,-(sp)
    4618:	|  |   move.l a0,-(sp)
    461a:	|  |   move.l 44(sp),-(sp)
    461e:	|  |   jsr 4796 <wrapSpeechXY>
    4624:	|  |   lea 20(sp),sp
    4628:	|  |   move.l d0,20(sp)
    462c:	+--|-- bra.s 466c <wrapSpeech+0x10c>
        } else {
            struct objectType * temp = findObjectType(objT);
    462e:	|  '-> move.l 32(sp),-(sp)
    4632:	|      jsr d9dc <findObjectType>
    4638:	|      addq.l #4,sp
    463a:	|      move.l d0,8(sp)
            //setObjFontColour(temp); Todo: Amigize this
            i = wrapSpeechXY(theText, winWidth >> 1, 10, temp->wrapSpeech, sampleFile);
    463e:	|      movea.l 8(sp),a0
    4642:	|      move.l 28(a0),d1
    4646:	|      move.l 1cefe <winWidth>,d0
    464c:	|      lsr.l #1,d0
    464e:	|      move.l 36(sp),-(sp)
    4652:	|      move.l d1,-(sp)
    4654:	|      pea a <_start+0xa>
    4658:	|      move.l d0,-(sp)
    465a:	|      move.l 44(sp),-(sp)
    465e:	|      jsr 4796 <wrapSpeechXY>
    4664:	|      lea 20(sp),sp
    4668:	|      move.l d0,20(sp)
        }
    }
    return i;
    466c:	'----> move.l 20(sp),d0
}
    4670:	       move.l (sp)+,d2
    4672:	       lea 20(sp),sp
    4676:	       rts

00004678 <wrapSpeechPerson>:

int wrapSpeechPerson (char * theText, struct onScreenPerson *thePerson, int sampleFile, BOOL animPerson) {
    4678:	    subq.l #8,sp
    467a:	    movem.l d2-d4,-(sp)
    467e:	    move.l 36(sp),d0
    4682:	    move.w d0,d0
    4684:	    move.w d0,14(sp)
	int i = wrapSpeechXY (theText, thePerson->x - cameraX, thePerson->y - cameraY - (thePerson->scale * (thePerson->height - thePerson->floaty)) - thePerson->thisType -> speechGap, thePerson->thisType -> wrapSpeech, sampleFile);
    4688:	    movea.l 28(sp),a0
    468c:	    movea.l 114(a0),a0
    4690:	    move.l 28(a0),d2
    4694:	    movea.l 28(sp),a0
    4698:	    move.l 4(a0),d3
    469c:	    move.l 1d070 <cameraY>,d0
    46a2:	    move.l d0,-(sp)
    46a4:	    jsr 17bda <__floatsisf>
    46aa:	    addq.l #4,sp
    46ac:	    move.l d0,-(sp)
    46ae:	    move.l d3,-(sp)
    46b0:	    jsr 17ece <__subsf3>
    46b6:	    addq.l #8,sp
    46b8:	    move.l d0,d3
    46ba:	    movea.l 28(sp),a0
    46be:	    move.l 32(a0),d4
    46c2:	    movea.l 28(sp),a0
    46c6:	    move.l 20(a0),d1
    46ca:	    movea.l 28(sp),a0
    46ce:	    move.l 24(a0),d0
    46d2:	    sub.l d0,d1
    46d4:	    move.l d1,-(sp)
    46d6:	    jsr 17bda <__floatsisf>
    46dc:	    addq.l #4,sp
    46de:	    move.l d0,-(sp)
    46e0:	    move.l d4,-(sp)
    46e2:	    jsr 17c8c <__mulsf3>
    46e8:	    addq.l #8,sp
    46ea:	    move.l d0,-(sp)
    46ec:	    move.l d3,-(sp)
    46ee:	    jsr 17ece <__subsf3>
    46f4:	    addq.l #8,sp
    46f6:	    move.l d0,d3
    46f8:	    movea.l 28(sp),a0
    46fc:	    movea.l 114(a0),a0
    4700:	    move.l 20(a0),d0
    4704:	    move.l d0,-(sp)
    4706:	    jsr 17bda <__floatsisf>
    470c:	    addq.l #4,sp
    470e:	    move.l d0,-(sp)
    4710:	    move.l d3,-(sp)
    4712:	    jsr 17ece <__subsf3>
    4718:	    addq.l #8,sp
    471a:	    move.l d0,-(sp)
    471c:	    jsr 17b72 <__fixsfsi>
    4722:	    addq.l #4,sp
    4724:	    move.l d0,d4
    4726:	    movea.l 28(sp),a0
    472a:	    move.l (a0),d3
    472c:	    move.l 1d06c <cameraX>,d0
    4732:	    move.l d0,-(sp)
    4734:	    jsr 17bda <__floatsisf>
    473a:	    addq.l #4,sp
    473c:	    move.l d0,-(sp)
    473e:	    move.l d3,-(sp)
    4740:	    jsr 17ece <__subsf3>
    4746:	    addq.l #8,sp
    4748:	    move.l d0,-(sp)
    474a:	    jsr 17b72 <__fixsfsi>
    4750:	    addq.l #4,sp
    4752:	    move.l 32(sp),-(sp)
    4756:	    move.l d2,-(sp)
    4758:	    move.l d4,-(sp)
    475a:	    move.l d0,-(sp)
    475c:	    move.l 40(sp),-(sp)
    4760:	    jsr 4796 <wrapSpeechXY>
    4766:	    lea 20(sp),sp
    476a:	    move.l d0,16(sp)
	if (animPerson) {
    476e:	    tst.w 14(sp)
    4772:	,-- beq.s 478a <wrapSpeechPerson+0x112>
		makeTalker (thePerson);
    4774:	|   move.l 28(sp),-(sp)
    4778:	|   jsr 43b6 <makeTalker>
    477e:	|   addq.l #4,sp
		speech -> currentTalker = thePerson;
    4780:	|   movea.l 1cefa <speech>,a0
    4786:	|   move.l 28(sp),(a0)
	}
	return i;
    478a:	'-> move.l 16(sp),d0
}
    478e:	    movem.l (sp)+,d2-d4
    4792:	    addq.l #8,sp
    4794:	    rts

00004796 <wrapSpeechXY>:

int wrapSpeechXY(char * theText, int x, int y, int wrap, int sampleFile) {
    4796:	                   lea -16(sp),sp
    479a:	                   movem.l d2-d4/a2,-(sp)
    int a, offset = 0;
    479e:	                   clr.l 16(sp)
    killAllSpeech();
    47a2:	                   jsr 42e8 <killAllSpeech>

    int speechTime = (strlen(theText) + 20) * speechSpeed;
    47a8:	                   move.l 36(sp),-(sp)
    47ac:	                   jsr 141b4 <strlen>
    47b2:	                   addq.l #4,sp
    47b4:	                   movea.l d0,a0
    47b6:	                   lea 20(a0),a0
    47ba:	                   move.l a0,-(sp)
    47bc:	                   jsr 17c02 <__floatunsisf>
    47c2:	                   addq.l #4,sp
    47c4:	                   move.l d0,d1
    47c6:	                   move.l 1c91e <speechSpeed>,d0
    47cc:	                   move.l d0,-(sp)
    47ce:	                   move.l d1,-(sp)
    47d0:	                   jsr 17c8c <__mulsf3>
    47d6:	                   addq.l #8,sp
    47d8:	                   move.l d0,-(sp)
    47da:	                   jsr 17b72 <__fixsfsi>
    47e0:	                   addq.l #4,sp
    47e2:	                   move.l d0,24(sp)
    if (speechTime < 1) speechTime = 1;
    47e6:	               ,-- bgt.s 47ee <wrapSpeechXY+0x58>
    47e8:	               |   moveq #1,d0
    47ea:	               |   move.l d0,24(sp)

    if (sampleFile != -1) {
    47ee:	               '-> moveq #-1,d1
    47f0:	                   cmp.l 52(sp),d1
    47f4:	               ,-- beq.s 4834 <wrapSpeechXY+0x9e>
        if (speechMode >= 1) {
    47f6:	               |   move.l 1d080 <speechMode>,d0
    47fc:	               +-- ble.s 4834 <wrapSpeechXY+0x9e>
            if (startSound(sampleFile, FALSE)) {
    47fe:	               |   clr.l -(sp)
    4800:	               |   move.l 56(sp),-(sp)
    4804:	               |   jsr d69c <startSound>
    480a:	               |   addq.l #8,sp
    480c:	               |   tst.w d0
    480e:	               +-- beq.s 4834 <wrapSpeechXY+0x9e>
                speechTime = -10;
    4810:	               |   moveq #-10,d0
    4812:	               |   move.l d0,24(sp)
                speech->lastFile = sampleFile;
    4816:	               |   movea.l 1cefa <speech>,a0
    481c:	               |   move.l 52(sp),12(a0)
                if (speechMode == 2) return -10;
    4822:	               |   move.l 1d080 <speechMode>,d0
    4828:	               |   moveq #2,d1
    482a:	               |   cmp.l d0,d1
    482c:	               +-- bne.s 4834 <wrapSpeechXY+0x9e>
    482e:	               |   moveq #-10,d0
    4830:	,--------------|-- bra.w 4aba <wrapSpeechXY+0x324>
            }
        }
    }
    speech->speechY = y;
    4834:	|              '-> movea.l 1cefa <speech>,a0
    483a:	|                  move.l 44(sp),8(a0)

    while (strlen(theText) > (unsigned long) wrap) {
    4840:	|     ,----------- bra.w 48f4 <wrapSpeechXY+0x15e>
        a = wrap;
    4844:	|  ,--|----------> move.l 48(sp),28(sp)
        while (theText[a] != ' ') {
    484a:	|  |  |        ,-- bra.s 485a <wrapSpeechXY+0xc4>
            a--;
    484c:	|  |  |  ,-----|-> subq.l #1,28(sp)
            if (a == 0) {
    4850:	|  |  |  |     +-- bne.s 485a <wrapSpeechXY+0xc4>
                a = wrap;
    4852:	|  |  |  |     |   move.l 48(sp),28(sp)
                break;
    4858:	|  |  |  |  ,--|-- bra.s 486c <wrapSpeechXY+0xd6>
        while (theText[a] != ' ') {
    485a:	|  |  |  |  |  '-> move.l 28(sp),d0
    485e:	|  |  |  |  |      movea.l 36(sp),a0
    4862:	|  |  |  |  |      adda.l d0,a0
    4864:	|  |  |  |  |      move.b (a0),d0
    4866:	|  |  |  |  |      cmpi.b #32,d0
    486a:	|  |  |  '--|----- bne.s 484c <wrapSpeechXY+0xb6>
            }
        }
        theText[a] = 0;
    486c:	|  |  |     '----> move.l 28(sp),d0
    4870:	|  |  |            movea.l 36(sp),a0
    4874:	|  |  |            adda.l d0,a0
    4876:	|  |  |            clr.b (a0)
        addSpeechLine(theText, x, &offset);
    4878:	|  |  |            lea 16(sp),a0
    487c:	|  |  |            move.l a0,-(sp)
    487e:	|  |  |            move.l 44(sp),-(sp)
    4882:	|  |  |            move.l 44(sp),-(sp)
    4886:	|  |  |            jsr 4032 <addSpeechLine>
    488c:	|  |  |            lea 12(sp),sp
        theText[a] = ' ';
    4890:	|  |  |            move.l 28(sp),d0
    4894:	|  |  |            movea.l 36(sp),a0
    4898:	|  |  |            adda.l d0,a0
    489a:	|  |  |            move.b #32,(a0)
        theText += a + 1;
    489e:	|  |  |            move.l 28(sp),d0
    48a2:	|  |  |            addq.l #1,d0
    48a4:	|  |  |            add.l d0,36(sp)
        y -= fontHeight / cameraZoom;
    48a8:	|  |  |            move.l 44(sp),-(sp)
    48ac:	|  |  |            jsr 17bda <__floatsisf>
    48b2:	|  |  |            addq.l #4,sp
    48b4:	|  |  |            move.l d0,d2
    48b6:	|  |  |            move.l 1d0aa <fontHeight>,d0
    48bc:	|  |  |            move.l d0,-(sp)
    48be:	|  |  |            jsr 17bda <__floatsisf>
    48c4:	|  |  |            addq.l #4,sp
    48c6:	|  |  |            move.l d0,d1
    48c8:	|  |  |            move.l 1c946 <cameraZoom>,d0
    48ce:	|  |  |            move.l d0,-(sp)
    48d0:	|  |  |            move.l d1,-(sp)
    48d2:	|  |  |            jsr 17a90 <__divsf3>
    48d8:	|  |  |            addq.l #8,sp
    48da:	|  |  |            move.l d0,-(sp)
    48dc:	|  |  |            move.l d2,-(sp)
    48de:	|  |  |            jsr 17ece <__subsf3>
    48e4:	|  |  |            addq.l #8,sp
    48e6:	|  |  |            move.l d0,-(sp)
    48e8:	|  |  |            jsr 17b72 <__fixsfsi>
    48ee:	|  |  |            addq.l #4,sp
    48f0:	|  |  |            move.l d0,44(sp)
    while (strlen(theText) > (unsigned long) wrap) {
    48f4:	|  |  '----------> move.l 36(sp),-(sp)
    48f8:	|  |               jsr 141b4 <strlen>
    48fe:	|  |               addq.l #4,sp
    4900:	|  |               move.l d0,d1
    4902:	|  |               move.l 48(sp),d0
    4906:	|  |               cmp.l d1,d0
    4908:	|  '-------------- bcs.w 4844 <wrapSpeechXY+0xae>
    }
    addSpeechLine(theText, x, &offset);
    490c:	|                  lea 16(sp),a0
    4910:	|                  move.l a0,-(sp)
    4912:	|                  move.l 44(sp),-(sp)
    4916:	|                  move.l 44(sp),-(sp)
    491a:	|                  jsr 4032 <addSpeechLine>
    4920:	|                  lea 12(sp),sp
    y -= fontHeight / cameraZoom;
    4924:	|                  move.l 44(sp),-(sp)
    4928:	|                  jsr 17bda <__floatsisf>
    492e:	|                  addq.l #4,sp
    4930:	|                  move.l d0,d2
    4932:	|                  move.l 1d0aa <fontHeight>,d0
    4938:	|                  move.l d0,-(sp)
    493a:	|                  jsr 17bda <__floatsisf>
    4940:	|                  addq.l #4,sp
    4942:	|                  move.l d0,d1
    4944:	|                  move.l 1c946 <cameraZoom>,d0
    494a:	|                  move.l d0,-(sp)
    494c:	|                  move.l d1,-(sp)
    494e:	|                  jsr 17a90 <__divsf3>
    4954:	|                  addq.l #8,sp
    4956:	|                  move.l d0,-(sp)
    4958:	|                  move.l d2,-(sp)
    495a:	|                  jsr 17ece <__subsf3>
    4960:	|                  addq.l #8,sp
    4962:	|                  move.l d0,-(sp)
    4964:	|                  jsr 17b72 <__fixsfsi>
    496a:	|                  addq.l #4,sp
    496c:	|                  move.l d0,44(sp)

    if (y < 0) speech->speechY -= y;
    4970:	|              ,-- bpl.s 498e <wrapSpeechXY+0x1f8>
    4972:	|              |   movea.l 1cefa <speech>,a0
    4978:	|              |   move.l 8(a0),d0
    497c:	|              |   movea.l 1cefa <speech>,a0
    4982:	|              |   sub.l 44(sp),d0
    4986:	|              |   move.l d0,8(a0)
    498a:	|           ,--|-- bra.w 4a7c <wrapSpeechXY+0x2e6>
    else if (speech->speechY > cameraY + (FLOAT)(winHeight - fontHeight / 3) / cameraZoom) speech->speechY = cameraY + (FLOAT)(winHeight - fontHeight / 3) / cameraZoom;
    498e:	|           |  '-> movea.l 1cefa <speech>,a0
    4994:	|           |      move.l 8(a0),d0
    4998:	|           |      move.l d0,-(sp)
    499a:	|           |      jsr 17bda <__floatsisf>
    49a0:	|           |      addq.l #4,sp
    49a2:	|           |      move.l d0,d2
    49a4:	|           |      move.l 1d070 <cameraY>,d0
    49aa:	|           |      move.l d0,-(sp)
    49ac:	|           |      jsr 17bda <__floatsisf>
    49b2:	|           |      addq.l #4,sp
    49b4:	|           |      move.l d0,d3
    49b6:	|           |      move.l 1cf02 <winHeight>,d4
    49bc:	|           |      move.l 1d0aa <fontHeight>,d0
    49c2:	|           |      pea 3 <_start+0x3>
    49c6:	|           |      move.l d0,-(sp)
    49c8:	|           |      jsr 181b2 <__divsi3>
    49ce:	|           |      addq.l #8,sp
    49d0:	|           |      move.l d4,d1
    49d2:	|           |      sub.l d0,d1
    49d4:	|           |      move.l d1,-(sp)
    49d6:	|           |      jsr 17c02 <__floatunsisf>
    49dc:	|           |      addq.l #4,sp
    49de:	|           |      move.l d0,d1
    49e0:	|           |      move.l 1c946 <cameraZoom>,d0
    49e6:	|           |      move.l d0,-(sp)
    49e8:	|           |      move.l d1,-(sp)
    49ea:	|           |      jsr 17a90 <__divsf3>
    49f0:	|           |      addq.l #8,sp
    49f2:	|           |      move.l d0,-(sp)
    49f4:	|           |      move.l d3,-(sp)
    49f6:	|           |      jsr 17996 <__addsf3>
    49fc:	|           |      addq.l #8,sp
    49fe:	|           |      move.l d0,-(sp)
    4a00:	|           |      move.l d2,-(sp)
    4a02:	|           |      jsr 17d46 <__gtsf2>
    4a08:	|           |      addq.l #8,sp
    4a0a:	|           |      tst.l d0
    4a0c:	|           +----- ble.s 4a7c <wrapSpeechXY+0x2e6>
    4a0e:	|           |      move.l 1d070 <cameraY>,d0
    4a14:	|           |      move.l d0,-(sp)
    4a16:	|           |      jsr 17bda <__floatsisf>
    4a1c:	|           |      addq.l #4,sp
    4a1e:	|           |      move.l d0,d2
    4a20:	|           |      move.l 1cf02 <winHeight>,d3
    4a26:	|           |      move.l 1d0aa <fontHeight>,d0
    4a2c:	|           |      pea 3 <_start+0x3>
    4a30:	|           |      move.l d0,-(sp)
    4a32:	|           |      jsr 181b2 <__divsi3>
    4a38:	|           |      addq.l #8,sp
    4a3a:	|           |      move.l d3,d1
    4a3c:	|           |      sub.l d0,d1
    4a3e:	|           |      move.l d1,-(sp)
    4a40:	|           |      jsr 17c02 <__floatunsisf>
    4a46:	|           |      addq.l #4,sp
    4a48:	|           |      move.l d0,d1
    4a4a:	|           |      move.l 1c946 <cameraZoom>,d0
    4a50:	|           |      move.l d0,-(sp)
    4a52:	|           |      move.l d1,-(sp)
    4a54:	|           |      jsr 17a90 <__divsf3>
    4a5a:	|           |      addq.l #8,sp
    4a5c:	|           |      move.l d0,-(sp)
    4a5e:	|           |      move.l d2,-(sp)
    4a60:	|           |      jsr 17996 <__addsf3>
    4a66:	|           |      addq.l #8,sp
    4a68:	|           |      movea.l 1cefa <speech>,a2
    4a6e:	|           |      move.l d0,-(sp)
    4a70:	|           |      jsr 17b72 <__fixsfsi>
    4a76:	|           |      addq.l #4,sp
    4a78:	|           |      move.l d0,8(a2)

    if (offset) {
    4a7c:	|           '----> move.l 16(sp),d0
    4a80:	|        ,-------- beq.s 4ab6 <wrapSpeechXY+0x320>
        struct speechLine * viewLine = speech->allSpeech;
    4a82:	|        |         movea.l 1cefa <speech>,a0
    4a88:	|        |         move.l 4(a0),20(sp)
        while (viewLine) {
    4a8e:	|        |     ,-- bra.s 4ab0 <wrapSpeechXY+0x31a>
            viewLine->x += offset;
    4a90:	|        |  ,--|-> movea.l 20(sp),a0
    4a94:	|        |  |  |   move.l 8(a0),d1
    4a98:	|        |  |  |   move.l 16(sp),d0
    4a9c:	|        |  |  |   add.l d1,d0
    4a9e:	|        |  |  |   movea.l 20(sp),a0
    4aa2:	|        |  |  |   move.l d0,8(a0)
            viewLine = viewLine->next;
    4aa6:	|        |  |  |   movea.l 20(sp),a0
    4aaa:	|        |  |  |   move.l 4(a0),20(sp)
        while (viewLine) {
    4ab0:	|        |  |  '-> tst.l 20(sp)
    4ab4:	|        |  '----- bne.s 4a90 <wrapSpeechXY+0x2fa>
        }
    }

    return speechTime;
    4ab6:	|        '-------> move.l 24(sp),d0
}
    4aba:	'----------------> movem.l (sp)+,d2-d4/a2
    4abe:	                   lea 16(sp),sp
    4ac2:	                   rts

00004ac4 <drawLine>:
#include "support/gcc8_c_support.h"
#include "line.h"

extern int sceneWidth, sceneHeight;

void drawLine(int x1, int y1, int x2, int y2) {
    4ac4:	       lea -20(sp),sp
	int x, y;
	BOOL backwards = FALSE;
    4ac8:	       clr.w 10(sp)
	
	if (x1 < 0)  x1 = 0;
    4acc:	       tst.l 24(sp)
    4ad0:	   ,-- bge.s 4ad6 <drawLine+0x12>
    4ad2:	   |   clr.l 24(sp)
	if (y1 < 0)  y1 = 0;
    4ad6:	   '-> tst.l 28(sp)
    4ada:	   ,-- bge.s 4ae0 <drawLine+0x1c>
    4adc:	   |   clr.l 28(sp)
	if (x2 < 0)  x2 = 0;
    4ae0:	   '-> tst.l 32(sp)
    4ae4:	   ,-- bge.s 4aea <drawLine+0x26>
    4ae6:	   |   clr.l 32(sp)
	if (y2 < 0)  y2 = 0;
    4aea:	   '-> tst.l 36(sp)
    4aee:	   ,-- bge.s 4af4 <drawLine+0x30>
    4af0:	   |   clr.l 36(sp)
	if (x1 > sceneWidth) x1 = sceneWidth - 1;
    4af4:	   '-> move.l 1d04e <sceneWidth>,d0
    4afa:	       cmp.l 24(sp),d0
    4afe:	   ,-- bge.s 4b0e <drawLine+0x4a>
    4b00:	   |   move.l 1d04e <sceneWidth>,d0
    4b06:	   |   move.l d0,d1
    4b08:	   |   subq.l #1,d1
    4b0a:	   |   move.l d1,24(sp)
	if (x2 > sceneWidth) x2 = sceneWidth - 1;
    4b0e:	   '-> move.l 1d04e <sceneWidth>,d0
    4b14:	       cmp.l 32(sp),d0
    4b18:	   ,-- bge.s 4b28 <drawLine+0x64>
    4b1a:	   |   move.l 1d04e <sceneWidth>,d0
    4b20:	   |   move.l d0,d1
    4b22:	   |   subq.l #1,d1
    4b24:	   |   move.l d1,32(sp)
	if (y1 > sceneHeight) y1 = sceneHeight - 1;
    4b28:	   '-> move.l 1d052 <sceneHeight>,d0
    4b2e:	       cmp.l 28(sp),d0
    4b32:	   ,-- bge.s 4b42 <drawLine+0x7e>
    4b34:	   |   move.l 1d052 <sceneHeight>,d0
    4b3a:	   |   move.l d0,d1
    4b3c:	   |   subq.l #1,d1
    4b3e:	   |   move.l d1,28(sp)
	if (y2 > sceneHeight) y2 = sceneHeight - 1;
    4b42:	   '-> move.l 1d052 <sceneHeight>,d0
    4b48:	       cmp.l 36(sp),d0
    4b4c:	   ,-- bge.s 4b5c <drawLine+0x98>
    4b4e:	   |   move.l 1d052 <sceneHeight>,d0
    4b54:	   |   move.l d0,d1
    4b56:	   |   subq.l #1,d1
    4b58:	   |   move.l d1,36(sp)

	if (x1 > x2) {
    4b5c:	   '-> move.l 24(sp),d0
    4b60:	       cmp.l 32(sp),d0
    4b64:	,----- ble.s 4b80 <drawLine+0xbc>
		x = x2; 
    4b66:	|      move.l 32(sp),16(sp)
		backwards = !backwards;
    4b6c:	|      tst.w 10(sp)
    4b70:	|      seq d0
    4b72:	|      neg.b d0
    4b74:	|      move.b d0,d0
    4b76:	|      andi.w #255,d0
    4b7a:	|      move.w d0,10(sp)
    4b7e:	|  ,-- bra.s 4b86 <drawLine+0xc2>
	} else x = x1;
    4b80:	'--|-> move.l 24(sp),16(sp)
		
	if (y1 > y2) {
    4b86:	   '-> move.l 28(sp),d1
    4b8a:	       cmp.l 36(sp),d1
    4b8e:	,----- ble.s 4baa <drawLine+0xe6>
		y = y2; 
    4b90:	|      move.l 36(sp),12(sp)
		backwards = !backwards;
    4b96:	|      tst.w 10(sp)
    4b9a:	|      seq d0
    4b9c:	|      neg.b d0
    4b9e:	|      move.b d0,d0
    4ba0:	|      andi.w #255,d0
    4ba4:	|      move.w d0,10(sp)
    4ba8:	|  ,-- bra.s 4bb0 <drawLine+0xec>
	} else y = y1;	
    4baa:	'--|-> move.l 28(sp),12(sp)
	
	int diffX = x2-x1;
    4bb0:	   '-> move.l 32(sp),d0
    4bb4:	       sub.l 24(sp),d0
    4bb8:	       move.l d0,6(sp)
    diffX = diffX < 0 ? diffX * -1 : diffX;
    4bbc:	       move.l 6(sp),d0
    4bc0:	   ,-- bpl.s 4bc4 <drawLine+0x100>
    4bc2:	   |   neg.l d0
    4bc4:	   '-> move.l d0,6(sp)
	int diffY = y2-y1;	
    4bc8:	       move.l 36(sp),d1
    4bcc:	       sub.l 28(sp),d1
    4bd0:	       move.l d1,2(sp)
    diffY = diffY < 0 ? diffY * -1 : diffY;
    4bd4:	       move.l 2(sp),d0
    4bd8:	   ,-- bpl.s 4bdc <drawLine+0x118>
    4bda:	   |   neg.l d0
    4bdc:	   '-> move.l d0,2(sp)
	
	if (! diffX) {
    4be0:	       tst.l 6(sp)
    4be4:	   ,-- bne.s 4c08 <drawLine+0x144>
		diffX = 1;
    4be6:	   |   moveq #1,d0
    4be8:	   |   move.l d0,6(sp)
		if (x == sceneWidth - 1) x = sceneWidth -2;
    4bec:	   |   move.l 1d04e <sceneWidth>,d0
    4bf2:	   |   subq.l #1,d0
    4bf4:	   |   cmp.l 16(sp),d0
    4bf8:	   +-- bne.s 4c08 <drawLine+0x144>
    4bfa:	   |   move.l 1d04e <sceneWidth>,d0
    4c00:	   |   move.l d0,d1
    4c02:	   |   subq.l #2,d1
    4c04:	   |   move.l d1,16(sp)
	}
	if (! diffY) {
    4c08:	   '-> tst.l 2(sp)
    4c0c:	   ,-- bne.s 4c30 <drawLine+0x16c>
		diffY = 1;
    4c0e:	   |   moveq #1,d0
    4c10:	   |   move.l d0,2(sp)
		if (y == sceneHeight - 1) y = sceneHeight -2;
    4c14:	   |   move.l 1d052 <sceneHeight>,d0
    4c1a:	   |   subq.l #1,d0
    4c1c:	   |   cmp.l 12(sp),d0
    4c20:	   +-- bne.s 4c30 <drawLine+0x16c>
    4c22:	   |   move.l 1d052 <sceneHeight>,d0
    4c28:	   |   move.l d0,d1
    4c2a:	   |   subq.l #2,d1
    4c2c:	   |   move.l d1,12(sp)
	}

    KPrintF("drawLine: Not implemented on Amiga"); //Amiga Todo: Implement 	
    4c30:	   '-> pea 188dc <PutChar+0x692>
    4c36:	       jsr 177a8 <KPrintF>
    4c3c:	       addq.l #4,sp
	
}
    4c3e:	       nop
    4c40:	       lea 20(sp),sp
    4c44:	       rts

00004c46 <deleteTextures>:
extern int specialSettings;
struct textureList *firstTexture = NULL;
BOOL NPOT_textures = TRUE;

void deleteTextures(unsigned int n,  unsigned int * textures)
{
    4c46:	                      lea -24(sp),sp
    4c4a:	                      move.l a6,-(sp)
	if (firstTexture == NULL) {
    4c4c:	                      move.l 1cf06 <firstTexture>,d0
    4c52:	,-------------------- beq.w 4d30 <deleteTextures+0xea>
		//debugOut("Deleting texture while list is already empty.\n");
	} else {
		for (unsigned int i = 0; i < n; i++) {
    4c56:	|                     clr.l 24(sp)
    4c5a:	|     ,-------------- bra.w 4d24 <deleteTextures+0xde>
			BOOL found = FALSE;
    4c5e:	|  ,--|-------------> clr.w 18(sp)
			struct textureList *list = firstTexture;
    4c62:	|  |  |               move.l 1cf06 <firstTexture>,20(sp)
			if (list->name == textures[i]) {
    4c6a:	|  |  |               movea.l 20(sp),a0
    4c6e:	|  |  |               move.l (a0),d1
    4c70:	|  |  |               move.l 24(sp),d0
    4c74:	|  |  |               add.l d0,d0
    4c76:	|  |  |               add.l d0,d0
    4c78:	|  |  |               movea.l 36(sp),a0
    4c7c:	|  |  |               adda.l d0,a0
    4c7e:	|  |  |               move.l (a0),d0
    4c80:	|  |  |               cmp.l d1,d0
    4c82:	|  |  |  ,----------- bne.w 4d16 <deleteTextures+0xd0>
				found = TRUE;
    4c86:	|  |  |  |            move.w #1,18(sp)
				firstTexture = list->next;
    4c8c:	|  |  |  |            movea.l 20(sp),a0
    4c90:	|  |  |  |            move.l 12(a0),d0
    4c94:	|  |  |  |            move.l d0,1cf06 <firstTexture>
				FreeVec(list);
    4c9a:	|  |  |  |            move.l 20(sp),6(sp)
    4ca0:	|  |  |  |            move.l 1cfb6 <SysBase>,d0
    4ca6:	|  |  |  |            movea.l d0,a6
    4ca8:	|  |  |  |            movea.l 6(sp),a1
    4cac:	|  |  |  |            jsr -690(a6)
				continue;
    4cb0:	|  |  |  |  ,-------- bra.s 4d20 <deleteTextures+0xda>
			}

			while (list->next) {
				if (list->next->name == textures[i]) {
    4cb2:	|  |  |  |  |  ,----> movea.l 20(sp),a0
    4cb6:	|  |  |  |  |  |      movea.l 12(a0),a0
    4cba:	|  |  |  |  |  |      move.l (a0),d1
    4cbc:	|  |  |  |  |  |      move.l 24(sp),d0
    4cc0:	|  |  |  |  |  |      add.l d0,d0
    4cc2:	|  |  |  |  |  |      add.l d0,d0
    4cc4:	|  |  |  |  |  |      movea.l 36(sp),a0
    4cc8:	|  |  |  |  |  |      adda.l d0,a0
    4cca:	|  |  |  |  |  |      move.l (a0),d0
    4ccc:	|  |  |  |  |  |      cmp.l d1,d0
    4cce:	|  |  |  |  |  |  ,-- bne.s 4d0c <deleteTextures+0xc6>
					found = TRUE;
    4cd0:	|  |  |  |  |  |  |   move.w #1,18(sp)
					struct textureList *deleteMe = list->next;
    4cd6:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    4cda:	|  |  |  |  |  |  |   move.l 12(a0),14(sp)
					list->next = list->next->next;
    4ce0:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    4ce4:	|  |  |  |  |  |  |   movea.l 12(a0),a0
    4ce8:	|  |  |  |  |  |  |   move.l 12(a0),d0
    4cec:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    4cf0:	|  |  |  |  |  |  |   move.l d0,12(a0)
					FreeVec(deleteMe);
    4cf4:	|  |  |  |  |  |  |   move.l 14(sp),10(sp)
    4cfa:	|  |  |  |  |  |  |   move.l 1cfb6 <SysBase>,d0
    4d00:	|  |  |  |  |  |  |   movea.l d0,a6
    4d02:	|  |  |  |  |  |  |   movea.l 10(sp),a1
    4d06:	|  |  |  |  |  |  |   jsr -690(a6)
					break;
    4d0a:	|  |  |  |  +--|--|-- bra.s 4d20 <deleteTextures+0xda>
				}
				list = list->next;
    4d0c:	|  |  |  |  |  |  '-> movea.l 20(sp),a0
    4d10:	|  |  |  |  |  |      move.l 12(a0),20(sp)
			while (list->next) {
    4d16:	|  |  |  '--|--|----> movea.l 20(sp),a0
    4d1a:	|  |  |     |  |      move.l 12(a0),d0
    4d1e:	|  |  |     |  '----- bne.s 4cb2 <deleteTextures+0x6c>
		for (unsigned int i = 0; i < n; i++) {
    4d20:	|  |  |     '-------> addq.l #1,24(sp)
    4d24:	|  |  '-------------> move.l 24(sp),d0
    4d28:	|  |                  cmp.l 32(sp),d0
    4d2c:	|  '----------------- bcs.w 4c5e <deleteTextures+0x18>
			}
		}
	}
}
    4d30:	'-------------------> nop
    4d32:	                      movea.l (sp)+,a6
    4d34:	                      lea 24(sp),sp
    4d38:	                      rts

00004d3a <setGraphicsWindow>:

void setGraphicsWindow(BOOL fullscreen) {
    4d3a:	subq.l #4,sp
    4d3c:	move.l 8(sp),d0
    4d40:	move.w d0,d0
    4d42:	move.w d0,2(sp)
	KPrintF("setGraphicsWindow: Not implemented on Amiga yet"); //TODO
    4d46:	pea 188ff <PutChar+0x6b5>
    4d4c:	jsr 177a8 <KPrintF>
    4d52:	addq.l #4,sp
}
    4d54:	nop
    4d56:	addq.l #4,sp
    4d58:	rts

00004d5a <resourceNameFromNum>:

extern int numResourceNames /* = 0*/;
extern char * * allResourceNames /*= NULL*/;

const char * resourceNameFromNum (int i) {
	if (i == -1) return NULL;
    4d5a:	       moveq #-1,d0
    4d5c:	       cmp.l 4(sp),d0
    4d60:	   ,-- bne.s 4d66 <resourceNameFromNum+0xc>
    4d62:	   |   moveq #0,d0
    4d64:	,--|-- bra.s 4d9e <resourceNameFromNum+0x44>
	if (numResourceNames == 0) return "RESOURCE";
    4d66:	|  '-> move.l 1cf92 <numResourceNames>,d0
    4d6c:	|  ,-- bne.s 4d76 <resourceNameFromNum+0x1c>
    4d6e:	|  |   move.l #100655,d0
    4d74:	+--|-- bra.s 4d9e <resourceNameFromNum+0x44>
	if (i < numResourceNames) return allResourceNames[i];
    4d76:	|  '-> move.l 1cf92 <numResourceNames>,d0
    4d7c:	|      cmp.l 4(sp),d0
    4d80:	|  ,-- ble.s 4d98 <resourceNameFromNum+0x3e>
    4d82:	|  |   move.l 1cf46 <allResourceNames>,d1
    4d88:	|  |   move.l 4(sp),d0
    4d8c:	|  |   add.l d0,d0
    4d8e:	|  |   add.l d0,d0
    4d90:	|  |   movea.l d1,a0
    4d92:	|  |   adda.l d0,a0
    4d94:	|  |   move.l (a0),d0
    4d96:	+--|-- bra.s 4d9e <resourceNameFromNum+0x44>
	return "Unknown resource";
    4d98:	|  '-> move.l #100664,d0
    4d9e:	'----> rts

00004da0 <main_sludge>:
char * gamePath = NULL;
char *bundleFolder;
int weAreDoneSoQuit;

int main_sludge(int argc, char *argv[])
{
    4da0:	          lea -44(sp),sp
    4da4:	          movem.l d2-d3/a6,-(sp)
	/* Dimensions of our window. */
	//AMIGA TODO: Maybe remove as there will be no windowed mode
    winWidth = 320;
    4da8:	          move.l #320,1cefe <winWidth>
    winHeight = 256;
    4db2:	          move.l #256,1cf02 <winHeight>

	char * sludgeFile;

	if(argc == 0) {
    4dbc:	          tst.l 60(sp)
    4dc0:	      ,-- bne.s 4dd8 <main_sludge+0x38>
		bundleFolder = copyString("game/");
    4dc2:	      |   pea 18949 <PutChar+0x6ff>
    4dc8:	      |   jsr b8 <copyString>
    4dce:	      |   addq.l #4,sp
    4dd0:	      |   move.l d0,1cf16 <bundleFolder>
    4dd6:	   ,--|-- bra.s 4dee <main_sludge+0x4e>
	} else {
		bundleFolder = copyString(argv[0]);
    4dd8:	   |  '-> movea.l 64(sp),a0
    4ddc:	   |      move.l (a0),d0
    4dde:	   |      move.l d0,-(sp)
    4de0:	   |      jsr b8 <copyString>
    4de6:	   |      addq.l #4,sp
    4de8:	   |      move.l d0,1cf16 <bundleFolder>
	}
    
	int lastSlash = -1;
    4dee:	   '----> moveq #-1,d0
    4df0:	          move.l d0,48(sp)
	for (int i = 0; bundleFolder[i]; i ++) {
    4df4:	          clr.l 44(sp)
    4df8:	   ,----- bra.s 4e1a <main_sludge+0x7a>
		if (bundleFolder[i] == PATHSLASH) lastSlash = i;
    4dfa:	,--|----> move.l 1cf16 <bundleFolder>,d1
    4e00:	|  |      move.l 44(sp),d0
    4e04:	|  |      movea.l d1,a0
    4e06:	|  |      adda.l d0,a0
    4e08:	|  |      move.b (a0),d0
    4e0a:	|  |      cmpi.b #47,d0
    4e0e:	|  |  ,-- bne.s 4e16 <main_sludge+0x76>
    4e10:	|  |  |   move.l 44(sp),48(sp)
	for (int i = 0; bundleFolder[i]; i ++) {
    4e16:	|  |  '-> addq.l #1,44(sp)
    4e1a:	|  '----> move.l 1cf16 <bundleFolder>,d1
    4e20:	|         move.l 44(sp),d0
    4e24:	|         movea.l d1,a0
    4e26:	|         adda.l d0,a0
    4e28:	|         move.b (a0),d0
    4e2a:	'-------- bne.s 4dfa <main_sludge+0x5a>
	}
	bundleFolder[lastSlash+1] = NULL;
    4e2c:	          move.l 1cf16 <bundleFolder>,d0
    4e32:	          move.l 48(sp),d1
    4e36:	          addq.l #1,d1
    4e38:	          movea.l d0,a0
    4e3a:	          adda.l d1,a0
    4e3c:	          clr.b (a0)

	if (argc > 1) {
    4e3e:	          moveq #1,d0
    4e40:	          cmp.l 60(sp),d0
    4e44:	      ,-- bge.s 4e60 <main_sludge+0xc0>
		sludgeFile = argv[argc - 1];
    4e46:	      |   move.l 60(sp),d0
    4e4a:	      |   addi.l #1073741823,d0
    4e50:	      |   add.l d0,d0
    4e52:	      |   add.l d0,d0
    4e54:	      |   movea.l 64(sp),a0
    4e58:	      |   adda.l d0,a0
    4e5a:	      |   move.l (a0),52(sp)
    4e5e:	   ,--|-- bra.s 4eba <main_sludge+0x11a>
	} else {
		sludgeFile = joinStrings (bundleFolder, "gamedata.slg");
    4e60:	   |  '-> move.l 1cf16 <bundleFolder>,d0
    4e66:	   |      pea 1894f <PutChar+0x705>
    4e6c:	   |      move.l d0,-(sp)
    4e6e:	   |      jsr 141f4 <joinStrings>
    4e74:	   |      addq.l #8,sp
    4e76:	   |      move.l d0,52(sp)
		if (! ( fileExists (sludgeFile) ) ) {
    4e7a:	   |      move.l 52(sp),-(sp)
    4e7e:	   |      jsr 140ee <fileExists>
    4e84:	   |      addq.l #4,sp
    4e86:	   |      tst.b d0
    4e88:	   +----- bne.s 4eba <main_sludge+0x11a>
			FreeVec(sludgeFile);
    4e8a:	   |      move.l 52(sp),40(sp)
    4e90:	   |      move.l 1cfb6 <SysBase>,d0
    4e96:	   |      movea.l d0,a6
    4e98:	   |      movea.l 40(sp),a1
    4e9c:	   |      jsr -690(a6)
			sludgeFile = joinStrings (bundleFolder, "gamedata");			
    4ea0:	   |      move.l 1cf16 <bundleFolder>,d0
    4ea6:	   |      pea 1895c <PutChar+0x712>
    4eac:	   |      move.l d0,-(sp)
    4eae:	   |      jsr 141f4 <joinStrings>
    4eb4:	   |      addq.l #8,sp
    4eb6:	   |      move.l d0,52(sp)
	//AMIGA TODO: Show arguments
	/*if (! parseCmdlineParameters(argc, argv) && !(sludgeFile) ) {
		printCmdlineUsage();
		return 0;
	}*/
	KPrintF("Game file not found.\n");
    4eba:	   '----> pea 18965 <PutChar+0x71b>
    4ec0:	          jsr 177a8 <KPrintF>
    4ec6:	          addq.l #4,sp
	if (! fileExists(sludgeFile) ) {	
    4ec8:	          move.l 52(sp),-(sp)
    4ecc:	          jsr 140ee <fileExists>
    4ed2:	          addq.l #4,sp
    4ed4:	          tst.b d0
    4ed6:	      ,-- bne.s 4f2e <main_sludge+0x18e>
		Write(Output(), (APTR)"Game file not found.\n", 21);
    4ed8:	      |   move.l 1cfbe <DOSBase>,d0
    4ede:	      |   movea.l d0,a6
    4ee0:	      |   jsr -60(a6)
    4ee4:	      |   move.l d0,28(sp)
    4ee8:	      |   move.l 28(sp),d0
    4eec:	      |   move.l d0,24(sp)
    4ef0:	      |   move.l #100709,20(sp)
    4ef8:	      |   moveq #21,d0
    4efa:	      |   move.l d0,16(sp)
    4efe:	      |   move.l 1cfbe <DOSBase>,d0
    4f04:	      |   movea.l d0,a6
    4f06:	      |   move.l 24(sp),d1
    4f0a:	      |   move.l 20(sp),d2
    4f0e:	      |   move.l 16(sp),d3
    4f12:	      |   jsr -48(a6)
    4f16:	      |   move.l d0,12(sp)
		KPrintF("Game file not found.\n");
    4f1a:	      |   pea 18965 <PutChar+0x71b>
    4f20:	      |   jsr 177a8 <KPrintF>
    4f26:	      |   addq.l #4,sp
		//AMIGA TODO: Show arguments
		//printCmdlineUsage();
		return 0;
    4f28:	      |   moveq #0,d0
    4f2a:	,-----|-- bra.w 512c <main_sludge+0x38c>
	}

	KPrintF("Setgamefilepath\n");
    4f2e:	|     '-> pea 1897b <PutChar+0x731>
    4f34:	|         jsr 177a8 <KPrintF>
    4f3a:	|         addq.l #4,sp
	setGameFilePath (sludgeFile);	
    4f3c:	|         move.l 52(sp),-(sp)
    4f40:	|         jsr 5136 <setGameFilePath>
    4f46:	|         addq.l #4,sp
	if (! initSludge (sludgeFile)) return 0;
    4f48:	|         move.l 52(sp),-(sp)
    4f4c:	|         jsr 6652 <initSludge>
    4f52:	|         addq.l #4,sp
    4f54:	|         tst.w d0
    4f56:	|     ,-- bne.s 4f5e <main_sludge+0x1be>
    4f58:	|     |   moveq #0,d0
    4f5a:	+-----|-- bra.w 512c <main_sludge+0x38c>
	
	if( winWidth != 320 || winHeight != 256) {
    4f5e:	|     '-> move.l 1cefe <winWidth>,d0
    4f64:	|         cmpi.l #320,d0
    4f6a:	|     ,-- bne.s 4f7a <main_sludge+0x1da>
    4f6c:	|     |   move.l 1cf02 <winHeight>,d0
    4f72:	|     |   cmpi.l #256,d0
    4f78:	|  ,--|-- beq.s 4f9c <main_sludge+0x1fc>
		KPrintF("This Screen Format is currently unsupported on Amiga. Only PAL Lowres supported atm. winWidth and winHeight will be reseted.");	
    4f7a:	|  |  '-> pea 1898c <PutChar+0x742>
    4f80:	|  |      jsr 177a8 <KPrintF>
    4f86:	|  |      addq.l #4,sp
		winWidth = 320;
    4f88:	|  |      move.l #320,1cefe <winWidth>
		winHeight = 256;
    4f92:	|  |      move.l #256,1cf02 <winHeight>
	}

	KPrintF("Resizing Backdrop\n");
    4f9c:	|  '----> pea 18a09 <PutChar+0x7bf>
    4fa2:	|         jsr 177a8 <KPrintF>
    4fa8:	|         addq.l #4,sp
	if (! resizeBackdrop (winWidth, winHeight)) {
    4faa:	|         move.l 1cf02 <winHeight>,d0
    4fb0:	|         move.l d0,d1
    4fb2:	|         move.l 1cefe <winWidth>,d0
    4fb8:	|         move.l d1,-(sp)
    4fba:	|         move.l d0,-(sp)
    4fbc:	|         jsr d8ba <resizeBackdrop>
    4fc2:	|         addq.l #8,sp
    4fc4:	|         tst.w d0
    4fc6:	|     ,-- bne.s 4fdc <main_sludge+0x23c>
		KPrintF("Couldn't allocate memory for backdrop");
    4fc8:	|     |   pea 18a1c <PutChar+0x7d2>
    4fce:	|     |   jsr 177a8 <KPrintF>
    4fd4:	|     |   addq.l #4,sp
		return FALSE;
    4fd6:	|     |   moveq #0,d0
    4fd8:	+-----|-- bra.w 512c <main_sludge+0x38c>
	}

	KPrintF("Init People\n");
    4fdc:	|     '-> pea 18a42 <PutChar+0x7f8>
    4fe2:	|         jsr 177a8 <KPrintF>
    4fe8:	|         addq.l #4,sp
	if (! initPeople ())
    4fea:	|         jsr add4 <initPeople>
    4ff0:	|         tst.w d0
    4ff2:	|     ,-- bne.s 5008 <main_sludge+0x268>
	{
		KPrintF("Couldn't initialise people stuff");
    4ff4:	|     |   pea 18a4f <PutChar+0x805>
    4ffa:	|     |   jsr 177a8 <KPrintF>
    5000:	|     |   addq.l #4,sp
		return FALSE;
    5002:	|     |   moveq #0,d0
    5004:	+-----|-- bra.w 512c <main_sludge+0x38c>
	}

	KPrintF("Init Floor\n");
    5008:	|     '-> pea 18a70 <PutChar+0x826>
    500e:	|         jsr 177a8 <KPrintF>
    5014:	|         addq.l #4,sp
	if (! initFloor ())
    5016:	|         jsr 16b5e <initFloor>
    501c:	|         tst.w d0
    501e:	|     ,-- bne.s 5034 <main_sludge+0x294>
	{
		KPrintF("Couldn't initialise floor stuff");
    5020:	|     |   pea 18a7c <PutChar+0x832>
    5026:	|     |   jsr 177a8 <KPrintF>
    502c:	|     |   addq.l #4,sp
		
		return FALSE;
    502e:	|     |   moveq #0,d0
    5030:	+-----|-- bra.w 512c <main_sludge+0x38c>
	}

	KPrintF("Init Objecttype\n");
    5034:	|     '-> pea 18a9c <PutChar+0x852>
    503a:	|         jsr 177a8 <KPrintF>
    5040:	|         addq.l #4,sp
	if (! initObjectTypes ())
    5042:	|         jsr da76 <initObjectTypes>
    5048:	|         tst.w d0
    504a:	|     ,-- bne.s 5060 <main_sludge+0x2c0>
	{
		KPrintF("Couldn't initialise object type stuff");
    504c:	|     |   pea 18aad <PutChar+0x863>
    5052:	|     |   jsr 177a8 <KPrintF>
    5058:	|     |   addq.l #4,sp
		return FALSE;
    505a:	|     |   moveq #0,d0
    505c:	+-----|-- bra.w 512c <main_sludge+0x38c>
	}

	KPrintF("Init speech\n");
    5060:	|     '-> pea 18ad3 <PutChar+0x889>
    5066:	|         jsr 177a8 <KPrintF>
    506c:	|         addq.l #4,sp
	initSpeech ();
    506e:	|         jsr 4250 <initSpeech>
	KPrintF("Init status bar\n");
    5074:	|         pea 18ae0 <PutChar+0x896>
    507a:	|         jsr 177a8 <KPrintF>
    5080:	|         addq.l #4,sp
	initStatusBar ();
    5082:	|         jsr 87d4 <initStatusBar>

	KPrintF("Get numbered string\n");
    5088:	|         pea 18af1 <PutChar+0x8a7>
    508e:	|         jsr 177a8 <KPrintF>
    5094:	|         addq.l #4,sp
	gameName = getNumberedString(1);
    5096:	|         pea 1 <_start+0x1>
    509a:	|         jsr 7ade <getNumberedString>
    50a0:	|         addq.l #4,sp
    50a2:	|         move.l d0,1cf0e <gameName>
	//initSoundStuff (hMainWindow); Todo Amiga: Maybe move soundstuff here
	KPrintF("Start new function num\n");
    50a8:	|         pea 18b06 <PutChar+0x8bc>
    50ae:	|         jsr 177a8 <KPrintF>
    50b4:	|         addq.l #4,sp
	startNewFunctionNum (0, 0, NULL, noStack, TRUE);
    50b6:	|         move.l 1cf82 <noStack>,d0
    50bc:	|         pea 1 <_start+0x1>
    50c0:	|         move.l d0,-(sp)
    50c2:	|         clr.l -(sp)
    50c4:	|         clr.l -(sp)
    50c6:	|         clr.l -(sp)
    50c8:	|         jsr 79ac <startNewFunctionNum>
    50ce:	|         lea 20(sp),sp

	KPrintF("Starting main loop");
    50d2:	|         pea 18b1e <PutChar+0x8d4>
    50d8:	|         jsr 177a8 <KPrintF>
    50de:	|         addq.l #4,sp

	volatile struct Custom *custom = (struct Custom*)0xdff000;
    50e0:	|         move.l #14675968,36(sp)
	weAreDoneSoQuit = 0;
    50e8:	|         clr.l 1cf1a <weAreDoneSoQuit>
	while ( !weAreDoneSoQuit ) {	
    50ee:	|     ,-- bra.s 510e <main_sludge+0x36e>
		//custom->color[0] = 0xf00;			
		sludgeDisplay ();
    50f0:	|  ,--|-> jsr 7832 <sludgeDisplay>
		CsiCheckInput();
    50f6:	|  |  |   jsr d3d8 <CsiCheckInput>
		walkAllPeople();
    50fc:	|  |  |   jsr c392 <walkAllPeople>
		handleInput();
    5102:	|  |  |   jsr 63ec <handleInput>
		//custom->color[0] = 0x000;			
		WaitVbl();
    5108:	|  |  |   jsr 176dc <WaitVbl>
	while ( !weAreDoneSoQuit ) {	
    510e:	|  |  '-> move.l 1cf1a <weAreDoneSoQuit>,d0
    5114:	|  '----- beq.s 50f0 <main_sludge+0x350>
	}	
	//Amiga Cleanup
	FreeVec(sludgeFile);
    5116:	|         move.l 52(sp),32(sp)
    511c:	|         move.l 1cfb6 <SysBase>,d0
    5122:	|         movea.l d0,a6
    5124:	|         movea.l 32(sp),a1
    5128:	|         jsr -690(a6)
}
    512c:	'-------> movem.l (sp)+,d2-d3/a6
    5130:	          lea 44(sp),sp
    5134:	          rts

00005136 <setGameFilePath>:

void setGameFilePath (char * f) {
    5136:	          lea -1104(sp),sp
    513a:	          move.l a6,-(sp)
    513c:	          move.l d2,-(sp)
	char currentDir[1000];

	if (!GetCurrentDirName( currentDir, 998)) {
    513e:	          move.l #1112,d0
    5144:	          add.l sp,d0
    5146:	          addi.l #-1102,d0
    514c:	          move.l d0,1100(sp)
    5150:	          move.l #998,1096(sp)
    5158:	          move.l 1cfbe <DOSBase>,d0
    515e:	          movea.l d0,a6
    5160:	          move.l 1100(sp),d1
    5164:	          move.l 1096(sp),d2
    5168:	          jsr -564(a6)
    516c:	          move.w d0,1094(sp)
    5170:	          move.w 1094(sp),d0
    5174:	      ,-- bne.s 5184 <setGameFilePath+0x4e>
		KPrintF("setGameFilePath:  current directory.\n");
    5176:	      |   pea 18b31 <PutChar+0x8e7>
    517c:	      |   jsr 177a8 <KPrintF>
    5182:	      |   addq.l #4,sp
	}	

	int got = -1, a;	
    5184:	      '-> moveq #-1,d0
    5186:	          move.l d0,1108(sp)

	for (a = 0; f[a]; a ++) {
    518a:	          clr.l 1104(sp)
    518e:	   ,----- bra.s 51ac <setGameFilePath+0x76>
		if (f[a] == PATHSLASH) got = a;
    5190:	,--|----> move.l 1104(sp),d0
    5194:	|  |      movea.l 1116(sp),a0
    5198:	|  |      adda.l d0,a0
    519a:	|  |      move.b (a0),d0
    519c:	|  |      cmpi.b #47,d0
    51a0:	|  |  ,-- bne.s 51a8 <setGameFilePath+0x72>
    51a2:	|  |  |   move.l 1104(sp),1108(sp)
	for (a = 0; f[a]; a ++) {
    51a8:	|  |  '-> addq.l #1,1104(sp)
    51ac:	|  '----> move.l 1104(sp),d0
    51b0:	|         movea.l 1116(sp),a0
    51b4:	|         adda.l d0,a0
    51b6:	|         move.b (a0),d0
    51b8:	'-------- bne.s 5190 <setGameFilePath+0x5a>
	}

	if (got != -1) {
    51ba:	          moveq #-1,d0
    51bc:	          cmp.l 1108(sp),d0
    51c0:	   ,----- beq.s 523a <setGameFilePath+0x104>
		f[got] = 0;	
    51c2:	   |      move.l 1108(sp),d0
    51c6:	   |      movea.l 1116(sp),a0
    51ca:	   |      adda.l d0,a0
    51cc:	   |      clr.b (a0)
		BPTR lock = Lock(f, ACCESS_READ);	
    51ce:	   |      move.l 1116(sp),1090(sp)
    51d4:	   |      moveq #-2,d0
    51d6:	   |      move.l d0,1086(sp)
    51da:	   |      move.l 1cfbe <DOSBase>,d0
    51e0:	   |      movea.l d0,a6
    51e2:	   |      move.l 1090(sp),d1
    51e6:	   |      move.l 1086(sp),d2
    51ea:	   |      jsr -84(a6)
    51ee:	   |      move.l d0,1082(sp)
    51f2:	   |      move.l 1082(sp),d0
    51f6:	   |      move.l d0,1078(sp)
		if (!CurrentDir(lock)) {
    51fa:	   |      move.l 1078(sp),1074(sp)
    5200:	   |      move.l 1cfbe <DOSBase>,d0
    5206:	   |      movea.l d0,a6
    5208:	   |      move.l 1074(sp),d1
    520c:	   |      jsr -126(a6)
    5210:	   |      move.l d0,1070(sp)
    5214:	   |      move.l 1070(sp),d0
    5218:	   |  ,-- bne.s 522c <setGameFilePath+0xf6>
			KPrintF("setGameFilePath:: Failed changing to directory %s\n", f);
    521a:	   |  |   move.l 1116(sp),-(sp)
    521e:	   |  |   pea 18b57 <PutChar+0x90d>
    5224:	   |  |   jsr 177a8 <KPrintF>
    522a:	   |  |   addq.l #8,sp
		}
		f[got] = PATHSLASH;
    522c:	   |  '-> move.l 1108(sp),d0
    5230:	   |      movea.l 1116(sp),a0
    5234:	   |      adda.l d0,a0
    5236:	   |      move.b #47,(a0)
	}

	gamePath = AllocVec(400, MEMF_ANY);
    523a:	   '----> move.l #400,1066(sp)
    5242:	          clr.l 1062(sp)
    5246:	          move.l 1cfb6 <SysBase>,d0
    524c:	          movea.l d0,a6
    524e:	          move.l 1066(sp),d0
    5252:	          move.l 1062(sp),d1
    5256:	          jsr -684(a6)
    525a:	          move.l d0,1058(sp)
    525e:	          move.l 1058(sp),d0
    5262:	          move.l d0,1cf12 <gamePath>
	if (gamePath==0) {
    5268:	          move.l 1cf12 <gamePath>,d0
    526e:	      ,-- bne.s 5282 <setGameFilePath+0x14c>
		KPrintF("setGameFilePath: Can't reserve memory for game directory.\n");
    5270:	      |   pea 18b8a <PutChar+0x940>
    5276:	      |   jsr 177a8 <KPrintF>
    527c:	      |   addq.l #4,sp
    527e:	   ,--|-- bra.w 536a <setGameFilePath+0x234>
		return;
	}

	BPTR lock = Lock(gamePath, ACCESS_READ);	
    5282:	   |  '-> move.l 1cf12 <gamePath>,1054(sp)
    528a:	   |      moveq #-2,d0
    528c:	   |      move.l d0,1050(sp)
    5290:	   |      move.l 1cfbe <DOSBase>,d0
    5296:	   |      movea.l d0,a6
    5298:	   |      move.l 1054(sp),d1
    529c:	   |      move.l 1050(sp),d2
    52a0:	   |      jsr -84(a6)
    52a4:	   |      move.l d0,1046(sp)
    52a8:	   |      move.l 1046(sp),d0
    52ac:	   |      move.l d0,1042(sp)
	if (! CurrentDir(lock)) {
    52b0:	   |      move.l 1042(sp),1038(sp)
    52b6:	   |      move.l 1cfbe <DOSBase>,d0
    52bc:	   |      movea.l d0,a6
    52be:	   |      move.l 1038(sp),d1
    52c2:	   |      jsr -126(a6)
    52c6:	   |      move.l d0,1034(sp)
    52ca:	   |      move.l 1034(sp),d0
    52ce:	   |  ,-- bne.s 52de <setGameFilePath+0x1a8>
		KPrintF("setGameFilePath: Can't get game directory.\n");
    52d0:	   |  |   pea 18bc5 <PutChar+0x97b>
    52d6:	   |  |   jsr 177a8 <KPrintF>
    52dc:	   |  |   addq.l #4,sp
	}
	
	lock = Lock(currentDir, ACCESS_READ);	
    52de:	   |  '-> move.l #1112,d0
    52e4:	   |      add.l sp,d0
    52e6:	   |      addi.l #-1102,d0
    52ec:	   |      move.l d0,1030(sp)
    52f0:	   |      moveq #-2,d0
    52f2:	   |      move.l d0,1026(sp)
    52f6:	   |      move.l 1cfbe <DOSBase>,d0
    52fc:	   |      movea.l d0,a6
    52fe:	   |      move.l 1030(sp),d1
    5302:	   |      move.l 1026(sp),d2
    5306:	   |      jsr -84(a6)
    530a:	   |      move.l d0,1022(sp)
    530e:	   |      move.l 1022(sp),d0
    5312:	   |      move.l d0,1042(sp)
	if (!CurrentDir(lock)) {	
    5316:	   |      move.l 1042(sp),1018(sp)
    531c:	   |      move.l 1cfbe <DOSBase>,d0
    5322:	   |      movea.l d0,a6
    5324:	   |      move.l 1018(sp),d1
    5328:	   |      jsr -126(a6)
    532c:	   |      move.l d0,1014(sp)
    5330:	   |      move.l 1014(sp),d0
    5334:	   |  ,-- bne.s 534a <setGameFilePath+0x214>
		KPrintF("setGameFilePath: Failed changing to directory %s\n", currentDir);
    5336:	   |  |   moveq #10,d0
    5338:	   |  |   add.l sp,d0
    533a:	   |  |   move.l d0,-(sp)
    533c:	   |  |   pea 18bf1 <PutChar+0x9a7>
    5342:	   |  |   jsr 177a8 <KPrintF>
    5348:	   |  |   addq.l #8,sp
	}

	//Free Mem
	if (gamePath != 0) FreeVec(gamePath);
    534a:	   |  '-> move.l 1cf12 <gamePath>,d0
    5350:	   +----- beq.s 536a <setGameFilePath+0x234>
    5352:	   |      move.l 1cf12 <gamePath>,1010(sp)
    535a:	   |      move.l 1cfb6 <SysBase>,d0
    5360:	   |      movea.l d0,a6
    5362:	   |      movea.l 1010(sp),a1
    5366:	   |      jsr -690(a6)
}
    536a:	   '----> move.l (sp)+,d2
    536c:	          movea.l (sp)+,a6
    536e:	          lea 1104(sp),sp
    5372:	          rts

00005374 <abortFunction>:
int numResourceNames = 0;
int numUserFunc = 0;
int specialSettings;


void abortFunction (struct loadedFunction * fun) {
    5374:	,-------> subq.l #8,sp
    5376:	|         move.l a6,-(sp)
	KPrintF("abortFunction %d started\n", &fun->originalNumber);
    5378:	|         move.l 16(sp),d0
    537c:	|         move.l d0,-(sp)
    537e:	|         pea 18cf9 <PutChar+0xaaf>
    5384:	|         jsr 177a8 <KPrintF>
    538a:	|         addq.l #8,sp
	int a;


	pauseFunction (fun);
    538c:	|         move.l 16(sp),-(sp)
    5390:	|         jsr 75fe <pauseFunction>
    5396:	|         addq.l #4,sp
	while (fun -> stack) trimStack (&fun -> stack);
    5398:	|     ,-- bra.s 53aa <abortFunction+0x36>
    539a:	|  ,--|-> moveq #24,d0
    539c:	|  |  |   add.l 16(sp),d0
    53a0:	|  |  |   move.l d0,-(sp)
    53a2:	|  |  |   jsr 1564c <trimStack>
    53a8:	|  |  |   addq.l #4,sp
    53aa:	|  |  '-> movea.l 16(sp),a0
    53ae:	|  |      move.l 24(a0),d0
    53b2:	|  '----- bne.s 539a <abortFunction+0x26>
	//FreeVec( fun -> compiledLines);
	for (a = 0; a < fun -> numLocals; a ++) unlinkVar (&(fun -> localVars[a]));
    53b4:	|         clr.l 8(sp)
    53b8:	|     ,-- bra.s 53d8 <abortFunction+0x64>
    53ba:	|  ,--|-> movea.l 16(sp),a0
    53be:	|  |  |   move.l 20(a0),d1
    53c2:	|  |  |   move.l 8(sp),d0
    53c6:	|  |  |   lsl.l #3,d0
    53c8:	|  |  |   add.l d1,d0
    53ca:	|  |  |   move.l d0,-(sp)
    53cc:	|  |  |   jsr 14f16 <unlinkVar>
    53d2:	|  |  |   addq.l #4,sp
    53d4:	|  |  |   addq.l #1,8(sp)
    53d8:	|  |  '-> movea.l 16(sp),a0
    53dc:	|  |      move.l 8(a0),d0
    53e0:	|  |      cmp.l 8(sp),d0
    53e4:	|  '----- bgt.s 53ba <abortFunction+0x46>
	if( fun -> numLocals > 0) {
    53e6:	|         movea.l 16(sp),a0
    53ea:	|         move.l 8(a0),d0
    53ee:	|     ,-- ble.s 540a <abortFunction+0x96>
		FreeVec(fun -> localVars);
    53f0:	|     |   movea.l 16(sp),a0
    53f4:	|     |   move.l 20(a0),4(sp)
    53fa:	|     |   move.l 1cfb6 <SysBase>,d0
    5400:	|     |   movea.l d0,a6
    5402:	|     |   movea.l 4(sp),a1
    5406:	|     |   jsr -690(a6)
	}

	unlinkVar (&fun -> reg);
    540a:	|     '-> moveq #28,d0
    540c:	|         add.l 16(sp),d0
    5410:	|         move.l d0,-(sp)
    5412:	|         jsr 14f16 <unlinkVar>
    5418:	|         addq.l #4,sp
	if (fun -> calledBy) abortFunction (fun -> calledBy);	
    541a:	|         movea.l 16(sp),a0
    541e:	|         move.l 40(a0),d0
    5422:	|     ,-- beq.s 5434 <abortFunction+0xc0>
    5424:	|     |   movea.l 16(sp),a0
    5428:	|     |   move.l 40(a0),d0
    542c:	|     |   move.l d0,-(sp)
    542e:	'-----|-- jsr 5374 <abortFunction>(pc)
    5432:	      |   addq.l #4,sp
	fun->unloaded = 1;
    5434:	      '-> movea.l 16(sp),a0
    5438:	          moveq #1,d0
    543a:	          move.l d0,58(a0)

	KPrintF("abortFunction finished\n");
    543e:	          pea 18d13 <PutChar+0xac9>
    5444:	          jsr 177a8 <KPrintF>
    544a:	          addq.l #4,sp
}
    544c:	          nop
    544e:	          movea.l (sp)+,a6
    5450:	          addq.l #8,sp
    5452:	          rts

00005454 <cancelAFunction>:

int cancelAFunction (int funcNum, struct loadedFunction * myself, BOOL * killedMyself) {
    5454:	          subq.l #8,sp
	int n = 0;
    5456:	          clr.l 4(sp)
	*killedMyself = FALSE;
    545a:	          movea.l 20(sp),a0
    545e:	          clr.w (a0)

	struct loadedFunction * fun = allRunningFunctions;
    5460:	          move.l 1cf4a <allRunningFunctions>,(sp)
	while (fun) {
    5466:	   ,----- bra.s 5494 <cancelAFunction+0x40>
		if (fun -> originalNumber == funcNum) {
    5468:	,--|----> movea.l (sp),a0
    546a:	|  |      move.l (a0),d0
    546c:	|  |      cmp.l 12(sp),d0
    5470:	|  |  ,-- bne.s 548e <cancelAFunction+0x3a>
			fun -> cancelMe = TRUE;
    5472:	|  |  |   movea.l (sp),a0
    5474:	|  |  |   move.w #1,54(a0)
			n++;
    547a:	|  |  |   addq.l #1,4(sp)
			if (fun == myself) *killedMyself = TRUE;
    547e:	|  |  |   move.l (sp),d0
    5480:	|  |  |   cmp.l 16(sp),d0
    5484:	|  |  +-- bne.s 548e <cancelAFunction+0x3a>
    5486:	|  |  |   movea.l 20(sp),a0
    548a:	|  |  |   move.w #1,(a0)
		}
		fun = fun -> next;
    548e:	|  |  '-> movea.l (sp),a0
    5490:	|  |      move.l 44(a0),(sp)
	while (fun) {
    5494:	|  '----> tst.l (sp)
    5496:	'-------- bne.s 5468 <cancelAFunction+0x14>
	}
	return n;
    5498:	          move.l 4(sp),d0
}
    549c:	          addq.l #8,sp
    549e:	          rts

000054a0 <completeTimers>:


void completeTimers () {
    54a0:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    54a2:	          move.l 1cf4a <allRunningFunctions>,(sp)

	while (thisFunction) {
    54a8:	   ,----- bra.s 54be <completeTimers+0x1e>
		if (thisFunction->freezerLevel == 0) thisFunction->timeLeft = 0;
    54aa:	,--|----> movea.l (sp),a0
    54ac:	|  |      move.b 56(a0),d0
    54b0:	|  |  ,-- bne.s 54b8 <completeTimers+0x18>
    54b2:	|  |  |   movea.l (sp),a0
    54b4:	|  |  |   clr.l 12(a0)
		thisFunction = thisFunction->next;
    54b8:	|  |  '-> movea.l (sp),a0
    54ba:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    54be:	|  '----> tst.l (sp)
    54c0:	'-------- bne.s 54aa <completeTimers+0xa>
	}
}
    54c2:	          nop
    54c4:	          nop
    54c6:	          addq.l #4,sp
    54c8:	          rts

000054ca <continueFunction>:

BOOL continueFunction (struct loadedFunction * fun) {
    54ca:	                                                             lea -76(sp),sp
	BOOL keepLooping = TRUE;
    54ce:	                                                             move.w #1,74(sp)
	BOOL advanceNow;
	unsigned int param;
	enum sludgeCommand com;

	if (fun -> cancelMe) {
    54d4:	                                                             movea.l 80(sp),a0
    54d8:	                                                             move.w 54(a0),d0
    54dc:	,----------------------------------------------------------- beq.w 636a <continueFunction+0xea0>
		abortFunction (fun);
    54e0:	|                                                            move.l 80(sp),-(sp)
    54e4:	|                                                            jsr 5374 <abortFunction>
    54ea:	|                                                            addq.l #4,sp
		return TRUE;
    54ec:	|                                                            moveq #1,d0
    54ee:	|  ,-------------------------------------------------------- bra.w 6374 <continueFunction+0xeaa>
	}

	while (keepLooping) {
		advanceNow = TRUE;
    54f2:	|  |  ,----------------------------------------------------> move.w #1,72(sp)
		param = fun -> compiledLines[fun -> runThisLine].param;
    54f8:	|  |  |                                                      movea.l 80(sp),a0
    54fc:	|  |  |                                                      move.l 4(a0),d1
    5500:	|  |  |                                                      movea.l 80(sp),a0
    5504:	|  |  |                                                      move.l 36(a0),d0
    5508:	|  |  |                                                      lsl.l #3,d0
    550a:	|  |  |                                                      movea.l d1,a0
    550c:	|  |  |                                                      adda.l d0,a0
    550e:	|  |  |                                                      move.l 4(a0),68(sp)
		com = fun -> compiledLines[fun -> runThisLine].theCommand;
    5514:	|  |  |                                                      movea.l 80(sp),a0
    5518:	|  |  |                                                      move.l 4(a0),d1
    551c:	|  |  |                                                      movea.l 80(sp),a0
    5520:	|  |  |                                                      move.l 36(a0),d0
    5524:	|  |  |                                                      lsl.l #3,d0
    5526:	|  |  |                                                      movea.l d1,a0
    5528:	|  |  |                                                      adda.l d0,a0
    552a:	|  |  |                                                      move.l (a0),64(sp)

//		fprintf (stderr, "com: %d param: %d (%s)\n", com, param,
//				(com < numSludgeCommands) ? sludgeText[com] : ERROR_UNKNOWN_MCODE); fflush(stderr);


		switch (com) {
    552e:	|  |  |                                                      moveq #41,d0
    5530:	|  |  |                                                      cmp.l 64(sp),d0
    5534:	|  |  |  ,-------------------------------------------------- bcs.w 631e <continueFunction+0xe54>
    5538:	|  |  |  |                                                   move.l 64(sp),d0
    553c:	|  |  |  |                                                   add.l d0,d0
    553e:	|  |  |  |                                                   movea.l d0,a0
    5540:	|  |  |  |                                                   adda.l #21836,a0
    5546:	|  |  |  |                                                   move.w (a0),d0
    5548:	|  |  |  |                                                   jmp (554c <continueFunction+0x82>,pc,d0.w)
    554c:	|  |  |  |                                                   bset d6,(a2)
    554e:	|  |  |  |                                                   ori.w #2670,(a4)
    5552:	|  |  |  |                                                   eori.w #2416,d6
    5556:	|  |  |  |                                                   bchg d4,d2
    5558:	|  |  |  |                                                   bclr d4,(a4)+
    555a:	|  |  |  |                                                   andi.l #181013194,d4
    5560:	|  |  |  |                                                   .short 0x0aca
    5562:	|  |  |  |                                                   .short 0x0aca
    5564:	|  |  |  |                                                   andi.l #51251914,(-54,a2,d0.l:2)
    556c:	|  |  |  |                                                   .short 0x0aca
    556e:	|  |  |  |                                                   andi.w #906,-(a4)
    5572:	|  |  |  |                                                   bchg d1,196(a2)
    5576:	|  |  |  |                                                   bset d1,580(a4)
    557a:	|  |  |  |                                                   bclr d1,2576(a2)
    557e:	|  |  |  |                                                   andi.b #-56,2762(a2)
    5584:	|  |  |  |                                                   .short 0x0aca
    5586:	|  |  |  |                                                   eori.l #63572682,d0
    558c:	|  |  |  |                                                   .short 0x0aca
    558e:	|  |  |  |                                                   bchg d3,-(a2)
    5590:	|  |  |  |                                                   bchg #-36,(a2)
    5594:	|  |  |  |                                                   .short 0x08cc
    5596:	|  |  |  |                                                   addi.b #14,1038(a0)
    559c:	|  |  |  |                                                   .short 0x040e
    559e:	|  |  |  |                                                   bset d4,8303(a4)
			case SLU_RETURN:
			if (fun -> calledBy) {
    55a2:	|  |  |  |                                                   ori.w #8232,(a0)
    55a6:	|  |  |  |                                                   ori.b #78,8303(a0)
				struct loadedFunction * returnTo = fun -> calledBy;
    55ac:	|  |  |  |                                                   ori.w #12136,(a0)
    55b0:	|  |  |  |                                                   ori.b #44,8303(a0)
				if (fun -> returnSomething) copyVariable (&fun -> reg, &returnTo -> reg);
    55b6:	|  |  |  |                                                   ori.w #12328,(a0)
    55ba:	|  |  |  |                                                   ori.b #24,(28,a0,d7.w:2)
    55c0:	|  |  |  |                                                   add.l 44(sp),d1
    55c4:	|  |  |  |                                                   moveq #28,d0
    55c6:	|  |  |  |                                                   add.l 80(sp),d0
    55ca:	|  |  |  |                                                   move.l d1,-(sp)
    55cc:	|  |  |  |                                                   move.l d0,-(sp)
    55ce:	|  |  |  |                                                   jsr 15182 <copyVariable>
    55d4:	|  |  |  |                                                   addq.l #8,sp
				finishFunction (fun);
    55d6:	|  |  |  |                                                   move.l 80(sp),-(sp)
    55da:	|  |  |  |                                                   jsr 637a <finishFunction>
    55e0:	|  |  |  |                                                   addq.l #4,sp
				fun = returnTo;
    55e2:	|  |  |  |                                                   move.l 44(sp),80(sp)
				restartFunction (fun);
    55e8:	|  |  |  |                                                   move.l 80(sp),-(sp)
    55ec:	|  |  |  |                                                   jsr 764e <restartFunction>
    55f2:	|  |  |  |                                                   addq.l #4,sp
			} else {
				finishFunction (fun);
				advanceNow = FALSE;		// So we don't do anything else with "fun"
				keepLooping = FALSE;	// So we drop out of the loop
			}
			break;
    55f4:	|  |  |  |  ,----------------------------------------------- bra.w 6352 <continueFunction+0xe88>
				finishFunction (fun);
    55f8:	|  |  |  |  |                                                move.l 80(sp),-(sp)
    55fc:	|  |  |  |  |                                                jsr 637a <finishFunction>
    5602:	|  |  |  |  |                                                addq.l #4,sp
				advanceNow = FALSE;		// So we don't do anything else with "fun"
    5604:	|  |  |  |  |                                                clr.w 72(sp)
				keepLooping = FALSE;	// So we drop out of the loop
    5608:	|  |  |  |  |                                                clr.w 74(sp)
			break;
    560c:	|  |  |  |  +----------------------------------------------- bra.w 6352 <continueFunction+0xe88>

			case SLU_CALLIT:
			switch (fun -> reg.varType) {
    5610:	|  |  |  |  |                                                movea.l 80(sp),a0
    5614:	|  |  |  |  |                                                move.l 28(a0),d0
    5618:	|  |  |  |  |                                                moveq #2,d1
    561a:	|  |  |  |  |                                                cmp.l d0,d1
    561c:	|  |  |  |  |                                            ,-- beq.s 5628 <continueFunction+0x15e>
    561e:	|  |  |  |  |                                            |   moveq #4,d1
    5620:	|  |  |  |  |                                            |   cmp.l d0,d1
    5622:	|  |  |  |  |                                         ,--|-- beq.s 5676 <continueFunction+0x1ac>
    5624:	|  |  |  |  |                                ,--------|--|-- bra.w 575e <continueFunction+0x294>
				case SVT_FUNC:
				pauseFunction (fun);		
    5628:	|  |  |  |  |                                |        |  '-> move.l 80(sp),-(sp)
    562c:	|  |  |  |  |                                |        |      jsr 75fe <pauseFunction>
    5632:	|  |  |  |  |                                |        |      addq.l #4,sp
				if (! startNewFunctionNum (fun -> reg.varData.intValue, param, fun, &fun -> stack,TRUE)) return FALSE;
    5634:	|  |  |  |  |                                |        |      moveq #24,d0
    5636:	|  |  |  |  |                                |        |      add.l 80(sp),d0
    563a:	|  |  |  |  |                                |        |      movea.l 80(sp),a0
    563e:	|  |  |  |  |                                |        |      move.l 32(a0),d1
    5642:	|  |  |  |  |                                |        |      pea 1 <_start+0x1>
    5646:	|  |  |  |  |                                |        |      move.l d0,-(sp)
    5648:	|  |  |  |  |                                |        |      move.l 88(sp),-(sp)
    564c:	|  |  |  |  |                                |        |      move.l 80(sp),-(sp)
    5650:	|  |  |  |  |                                |        |      move.l d1,-(sp)
    5652:	|  |  |  |  |                                |        |      jsr 79ac <startNewFunctionNum>
    5658:	|  |  |  |  |                                |        |      lea 20(sp),sp
    565c:	|  |  |  |  |                                |        |      tst.l d0
    565e:	|  |  |  |  |                                |        |  ,-- bne.s 5666 <continueFunction+0x19c>
    5660:	|  |  |  |  |                                |        |  |   clr.w d0
    5662:	|  +--|--|--|--------------------------------|--------|--|-- bra.w 6374 <continueFunction+0xeaa>
				fun = allRunningFunctions;
    5666:	|  |  |  |  |                                |        |  '-> move.l 1cf4a <allRunningFunctions>,80(sp)
				advanceNow = FALSE;		// So we don't do anything else with "fun"
    566e:	|  |  |  |  |                                |        |      clr.w 72(sp)
				break;
    5672:	|  |  |  |  |                                |  ,-----|----- bra.w 5772 <continueFunction+0x2a8>

				case SVT_BUILT:
					{
					//KPrintF("Loading function %ld",fun -> reg.varData.intValue);
					enum builtReturn br = callBuiltIn (fun -> reg.varData.intValue, param, fun);
    5676:	|  |  |  |  |                                |  |     '----> move.l 68(sp),d1
    567a:	|  |  |  |  |                                |  |            movea.l 80(sp),a0
    567e:	|  |  |  |  |                                |  |            move.l 32(a0),d0
    5682:	|  |  |  |  |                                |  |            move.l 80(sp),-(sp)
    5686:	|  |  |  |  |                                |  |            move.l d1,-(sp)
    5688:	|  |  |  |  |                                |  |            move.l d0,-(sp)
    568a:	|  |  |  |  |                                |  |            jsr 139aa <callBuiltIn>
    5690:	|  |  |  |  |                                |  |            lea 12(sp),sp
    5694:	|  |  |  |  |                                |  |            move.l d0,52(sp)

					switch (br) {
    5698:	|  |  |  |  |                                |  |            moveq #5,d0
    569a:	|  |  |  |  |                                |  |            cmp.l 52(sp),d0
    569e:	|  |  |  |  |                                |  |  ,-------- bcs.w 575a <continueFunction+0x290>
    56a2:	|  |  |  |  |                                |  |  |         move.l 52(sp),d0
    56a6:	|  |  |  |  |                                |  |  |         add.l d0,d0
    56a8:	|  |  |  |  |                                |  |  |         movea.l d0,a0
    56aa:	|  |  |  |  |                                |  |  |         adda.l #22198,a0
    56b0:	|  |  |  |  |                                |  |  |         move.w (a0),d0
    56b2:	|  |  |  |  |                                |  |  |         jmp (56b6 <continueFunction+0x1ec>,pc,d0.w)
    56b6:	|  |  |  |  |                                |  |  |         ori.b #12,164(a4)
    56bc:	|  |  |  |  |                                |  |  |         ori.b #60,-(a0)
    56c0:	|  |  |  |  |                                |  |  |         ori.b #121,(1,a2,d0.w)
						case BR_ERROR:
							KPrintF("Unknown error. This shouldn't happen. Please notify the SLUDGE developers.");
    56c6:	|  |  |  |  |                                |  |  |         or.b d6,20153(a3)
    56ca:	|  |  |  |  |                                |  |  |         ori.b #-88,d1
    56ce:	|  |  |  |  |                                |  |  |         addq.l #4,sp
							return FALSE;
    56d0:	|  |  |  |  |                                |  |  |         clr.w d0
    56d2:	|  +--|--|--|--------------------------------|--|--|-------- bra.w 6374 <continueFunction+0xeaa>

						case BR_PAUSE:
						pauseFunction (fun);
    56d6:	|  |  |  |  |                                |  |  |         move.l 80(sp),-(sp)
    56da:	|  |  |  |  |                                |  |  |         jsr 75fe <pauseFunction>
    56e0:	|  |  |  |  |                                |  |  |         addq.l #4,sp
						[[fallthrough]];
						// No break!

						case BR_KEEP_AND_PAUSE:
						keepLooping = FALSE;
    56e2:	|  |  |  |  |                                |  |  |         clr.w 74(sp)
						break;
    56e6:	|  |  |  |  |                                |  |  |  ,----- bra.s 575c <continueFunction+0x292>

						case BR_ALREADY_GONE:
						keepLooping = FALSE;
    56e8:	|  |  |  |  |                                |  |  |  |      clr.w 74(sp)
						advanceNow = FALSE;
    56ec:	|  |  |  |  |                                |  |  |  |      clr.w 72(sp)
						break;
    56f0:	|  |  |  |  |                                |  |  |  +----- bra.s 575c <continueFunction+0x292>

						case BR_CALLAFUNC:
						{
							int i = fun -> reg.varData.intValue;
    56f2:	|  |  |  |  |                                |  |  |  |      movea.l 80(sp),a0
    56f6:	|  |  |  |  |                                |  |  |  |      move.l 32(a0),48(sp)
							setVariable (&fun -> reg, SVT_INT, 1);
    56fc:	|  |  |  |  |                                |  |  |  |      moveq #28,d0
    56fe:	|  |  |  |  |                                |  |  |  |      add.l 80(sp),d0
    5702:	|  |  |  |  |                                |  |  |  |      pea 1 <_start+0x1>
    5706:	|  |  |  |  |                                |  |  |  |      pea 1 <_start+0x1>
    570a:	|  |  |  |  |                                |  |  |  |      move.l d0,-(sp)
    570c:	|  |  |  |  |                                |  |  |  |      jsr 155ba <setVariable>
    5712:	|  |  |  |  |                                |  |  |  |      lea 12(sp),sp
							pauseFunction (fun);							
    5716:	|  |  |  |  |                                |  |  |  |      move.l 80(sp),-(sp)
    571a:	|  |  |  |  |                                |  |  |  |      jsr 75fe <pauseFunction>
    5720:	|  |  |  |  |                                |  |  |  |      addq.l #4,sp
							if (! startNewFunctionNum (i, 0, fun, noStack, FALSE)) return FALSE;
    5722:	|  |  |  |  |                                |  |  |  |      move.l 1cf82 <noStack>,d1
    5728:	|  |  |  |  |                                |  |  |  |      move.l 48(sp),d0
    572c:	|  |  |  |  |                                |  |  |  |      clr.l -(sp)
    572e:	|  |  |  |  |                                |  |  |  |      move.l d1,-(sp)
    5730:	|  |  |  |  |                                |  |  |  |      move.l 88(sp),-(sp)
    5734:	|  |  |  |  |                                |  |  |  |      clr.l -(sp)
    5736:	|  |  |  |  |                                |  |  |  |      move.l d0,-(sp)
    5738:	|  |  |  |  |                                |  |  |  |      jsr 79ac <startNewFunctionNum>
    573e:	|  |  |  |  |                                |  |  |  |      lea 20(sp),sp
    5742:	|  |  |  |  |                                |  |  |  |      tst.l d0
    5744:	|  |  |  |  |                                |  |  |  |  ,-- bne.s 574c <continueFunction+0x282>
    5746:	|  |  |  |  |                                |  |  |  |  |   clr.w d0
    5748:	|  +--|--|--|--------------------------------|--|--|--|--|-- bra.w 6374 <continueFunction+0xeaa>
							fun = allRunningFunctions;
    574c:	|  |  |  |  |                                |  |  |  |  '-> move.l 1cf4a <allRunningFunctions>,80(sp)
							advanceNow = FALSE;		// So we don't do anything else with "fun"
    5754:	|  |  |  |  |                                |  |  |  |      clr.w 72(sp)
						}
						break;
    5758:	|  |  |  |  |                                |  |  |  +----- bra.s 575c <continueFunction+0x292>

						default:
						break;
    575a:	|  |  |  |  |                                |  |  '--|----> nop
					}
				}
				break;
    575c:	|  |  |  |  |                                |  +-----'----X bra.s 5772 <continueFunction+0x2a8>

				default:
				KPrintF(ERROR_CALL_NONFUNCTION);
    575e:	|  |  |  |  |                                '--|----------> pea 18d76 <PutChar+0xb2c>
    5764:	|  |  |  |  |                                   |            jsr 177a8 <KPrintF>
    576a:	|  |  |  |  |                                   |            addq.l #4,sp
				return FALSE;
    576c:	|  |  |  |  |                                   |            clr.w d0
    576e:	|  +--|--|--|-----------------------------------|----------- bra.w 6374 <continueFunction+0xeaa>
			}
			break;
    5772:	|  |  |  |  +-----------------------------------'----------X bra.w 6352 <continueFunction+0xe88>

			// These all grab things and shove 'em into the register

			case SLU_LOAD_NULL:
			setVariable (&fun -> reg, SVT_NULL, 0);
    5776:	|  |  |  |  |                                                moveq #28,d0
    5778:	|  |  |  |  |                                                add.l 80(sp),d0
    577c:	|  |  |  |  |                                                clr.l -(sp)
    577e:	|  |  |  |  |                                                clr.l -(sp)
    5780:	|  |  |  |  |                                                move.l d0,-(sp)
    5782:	|  |  |  |  |                                                jsr 155ba <setVariable>
    5788:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    578c:	|  |  |  |  +----------------------------------------------- bra.w 6352 <continueFunction+0xe88>

			case SLU_LOAD_FILE:
			setVariable (&fun -> reg, SVT_FILE, param);
    5790:	|  |  |  |  |                                                move.l 68(sp),d1
    5794:	|  |  |  |  |                                                moveq #28,d0
    5796:	|  |  |  |  |                                                add.l 80(sp),d0
    579a:	|  |  |  |  |                                                move.l d1,-(sp)
    579c:	|  |  |  |  |                                                pea 5 <_start+0x5>
    57a0:	|  |  |  |  |                                                move.l d0,-(sp)
    57a2:	|  |  |  |  |                                                jsr 155ba <setVariable>
    57a8:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    57ac:	|  |  |  |  +----------------------------------------------- bra.w 6352 <continueFunction+0xe88>

			case SLU_LOAD_VALUE:
			setVariable (&fun -> reg, SVT_INT, param);
    57b0:	|  |  |  |  |                                                move.l 68(sp),d1
    57b4:	|  |  |  |  |                                                moveq #28,d0
    57b6:	|  |  |  |  |                                                add.l 80(sp),d0
    57ba:	|  |  |  |  |                                                move.l d1,-(sp)
    57bc:	|  |  |  |  |                                                pea 1 <_start+0x1>
    57c0:	|  |  |  |  |                                                move.l d0,-(sp)
    57c2:	|  |  |  |  |                                                jsr 155ba <setVariable>
    57c8:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    57cc:	|  |  |  |  +----------------------------------------------- bra.w 6352 <continueFunction+0xe88>

			case SLU_LOAD_LOCAL:
			if (! copyVariable (&(fun -> localVars[param]), &fun -> reg)) return FALSE;
    57d0:	|  |  |  |  |                                                moveq #28,d0
    57d2:	|  |  |  |  |                                                add.l 80(sp),d0
    57d6:	|  |  |  |  |                                                movea.l 80(sp),a0
    57da:	|  |  |  |  |                                                movea.l 20(a0),a0
    57de:	|  |  |  |  |                                                move.l 68(sp),d1
    57e2:	|  |  |  |  |                                                lsl.l #3,d1
    57e4:	|  |  |  |  |                                                add.l a0,d1
    57e6:	|  |  |  |  |                                                move.l d0,-(sp)
    57e8:	|  |  |  |  |                                                move.l d1,-(sp)
    57ea:	|  |  |  |  |                                                jsr 15182 <copyVariable>
    57f0:	|  |  |  |  |                                                addq.l #8,sp
    57f2:	|  |  |  |  |                                                tst.w d0
    57f4:	|  |  |  |  |  ,-------------------------------------------- bne.w 6330 <continueFunction+0xe66>
    57f8:	|  |  |  |  |  |                                             clr.w d0
    57fa:	|  +--|--|--|--|-------------------------------------------- bra.w 6374 <continueFunction+0xeaa>
			break;

			case SLU_AND:
			setVariable (&fun -> reg, SVT_INT, getBoolean (&fun -> reg) && getBoolean(&(fun -> stack -> thisVar)));
    57fe:	|  |  |  |  |  |                                             moveq #28,d0
    5800:	|  |  |  |  |  |                                             add.l 80(sp),d0
    5804:	|  |  |  |  |  |                                             move.l d0,-(sp)
    5806:	|  |  |  |  |  |                                             jsr 15208 <getBoolean>
    580c:	|  |  |  |  |  |                                             addq.l #4,sp
    580e:	|  |  |  |  |  |                                             tst.w d0
    5810:	|  |  |  |  |  |                                      ,----- beq.s 582c <continueFunction+0x362>
    5812:	|  |  |  |  |  |                                      |      movea.l 80(sp),a0
    5816:	|  |  |  |  |  |                                      |      move.l 24(a0),d0
    581a:	|  |  |  |  |  |                                      |      move.l d0,-(sp)
    581c:	|  |  |  |  |  |                                      |      jsr 15208 <getBoolean>
    5822:	|  |  |  |  |  |                                      |      addq.l #4,sp
    5824:	|  |  |  |  |  |                                      |      tst.w d0
    5826:	|  |  |  |  |  |                                      +----- beq.s 582c <continueFunction+0x362>
    5828:	|  |  |  |  |  |                                      |      moveq #1,d0
    582a:	|  |  |  |  |  |                                      |  ,-- bra.s 582e <continueFunction+0x364>
    582c:	|  |  |  |  |  |                                      '--|-> moveq #0,d0
    582e:	|  |  |  |  |  |                                         '-> moveq #28,d1
    5830:	|  |  |  |  |  |                                             add.l 80(sp),d1
    5834:	|  |  |  |  |  |                                             move.l d0,-(sp)
    5836:	|  |  |  |  |  |                                             pea 1 <_start+0x1>
    583a:	|  |  |  |  |  |                                             move.l d1,-(sp)
    583c:	|  |  |  |  |  |                                             jsr 155ba <setVariable>
    5842:	|  |  |  |  |  |                                             lea 12(sp),sp
			trimStack (&fun -> stack);
    5846:	|  |  |  |  |  |                                             moveq #24,d0
    5848:	|  |  |  |  |  |                                             add.l 80(sp),d0
    584c:	|  |  |  |  |  |                                             move.l d0,-(sp)
    584e:	|  |  |  |  |  |                                             jsr 1564c <trimStack>
    5854:	|  |  |  |  |  |                                             addq.l #4,sp
			break;
    5856:	|  |  |  |  +--|-------------------------------------------- bra.w 6352 <continueFunction+0xe88>

			case SLU_OR:
			setVariable (&fun -> reg, SVT_INT, getBoolean (&fun -> reg) || getBoolean (&(fun -> stack -> thisVar)));
    585a:	|  |  |  |  |  |                                             moveq #28,d0
    585c:	|  |  |  |  |  |                                             add.l 80(sp),d0
    5860:	|  |  |  |  |  |                                             move.l d0,-(sp)
    5862:	|  |  |  |  |  |                                             jsr 15208 <getBoolean>
    5868:	|  |  |  |  |  |                                             addq.l #4,sp
    586a:	|  |  |  |  |  |                                             tst.w d0
    586c:	|  |  |  |  |  |                                         ,-- bne.s 5884 <continueFunction+0x3ba>
    586e:	|  |  |  |  |  |                                         |   movea.l 80(sp),a0
    5872:	|  |  |  |  |  |                                         |   move.l 24(a0),d0
    5876:	|  |  |  |  |  |                                         |   move.l d0,-(sp)
    5878:	|  |  |  |  |  |                                         |   jsr 15208 <getBoolean>
    587e:	|  |  |  |  |  |                                         |   addq.l #4,sp
    5880:	|  |  |  |  |  |                                         |   tst.w d0
    5882:	|  |  |  |  |  |                                      ,--|-- beq.s 5888 <continueFunction+0x3be>
    5884:	|  |  |  |  |  |                                      |  '-> moveq #1,d0
    5886:	|  |  |  |  |  |                                      |  ,-- bra.s 588a <continueFunction+0x3c0>
    5888:	|  |  |  |  |  |                                      '--|-> moveq #0,d0
    588a:	|  |  |  |  |  |                                         '-> moveq #28,d1
    588c:	|  |  |  |  |  |                                             add.l 80(sp),d1
    5890:	|  |  |  |  |  |                                             move.l d0,-(sp)
    5892:	|  |  |  |  |  |                                             pea 1 <_start+0x1>
    5896:	|  |  |  |  |  |                                             move.l d1,-(sp)
    5898:	|  |  |  |  |  |                                             jsr 155ba <setVariable>
    589e:	|  |  |  |  |  |                                             lea 12(sp),sp
			trimStack (&fun -> stack);
    58a2:	|  |  |  |  |  |                                             moveq #24,d0
    58a4:	|  |  |  |  |  |                                             add.l 80(sp),d0
    58a8:	|  |  |  |  |  |                                             move.l d0,-(sp)
    58aa:	|  |  |  |  |  |                                             jsr 1564c <trimStack>
    58b0:	|  |  |  |  |  |                                             addq.l #4,sp
			break;
    58b2:	|  |  |  |  +--|-------------------------------------------- bra.w 6352 <continueFunction+0xe88>

			case SLU_LOAD_FUNC:
    		setVariable (&fun -> reg, SVT_FUNC, param);
    58b6:	|  |  |  |  |  |                                             move.l 68(sp),d1
    58ba:	|  |  |  |  |  |                                             moveq #28,d0
    58bc:	|  |  |  |  |  |                                             add.l 80(sp),d0
    58c0:	|  |  |  |  |  |                                             move.l d1,-(sp)
    58c2:	|  |  |  |  |  |                                             pea 2 <_start+0x2>
    58c6:	|  |  |  |  |  |                                             move.l d0,-(sp)
    58c8:	|  |  |  |  |  |                                             jsr 155ba <setVariable>
    58ce:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    58d2:	|  |  |  |  +--|-------------------------------------------- bra.w 6352 <continueFunction+0xe88>

			case SLU_LOAD_BUILT:
			setVariable (&fun -> reg, SVT_BUILT, param);
    58d6:	|  |  |  |  |  |                                             move.l 68(sp),d1
    58da:	|  |  |  |  |  |                                             moveq #28,d0
    58dc:	|  |  |  |  |  |                                             add.l 80(sp),d0
    58e0:	|  |  |  |  |  |                                             move.l d1,-(sp)
    58e2:	|  |  |  |  |  |                                             pea 4 <_start+0x4>
    58e6:	|  |  |  |  |  |                                             move.l d0,-(sp)
    58e8:	|  |  |  |  |  |                                             jsr 155ba <setVariable>
    58ee:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    58f2:	|  |  |  |  +--|-------------------------------------------- bra.w 6352 <continueFunction+0xe88>

			case SLU_LOAD_OBJTYPE:
			setVariable (&fun -> reg, SVT_OBJTYPE, param);
    58f6:	|  |  |  |  |  |                                             move.l 68(sp),d1
    58fa:	|  |  |  |  |  |                                             moveq #28,d0
    58fc:	|  |  |  |  |  |                                             add.l 80(sp),d0
    5900:	|  |  |  |  |  |                                             move.l d1,-(sp)
    5902:	|  |  |  |  |  |                                             pea 7 <_start+0x7>
    5906:	|  |  |  |  |  |                                             move.l d0,-(sp)
    5908:	|  |  |  |  |  |                                             jsr 155ba <setVariable>
    590e:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    5912:	|  |  |  |  +--|-------------------------------------------- bra.w 6352 <continueFunction+0xe88>

			case SLU_UNREG:
			if (dialogValue != 1) {
    5916:	|  |  |  |  |  |                                             move.l 1cf0a <dialogValue>,d0
    591c:	|  |  |  |  |  |                                             moveq #1,d1
    591e:	|  |  |  |  |  |                                             cmp.l d0,d1
    5920:	|  |  |  |  |  |  ,----------------------------------------- beq.w 6334 <continueFunction+0xe6a>
				KPrintF(ERROR_HACKER);
    5924:	|  |  |  |  |  |  |                                          pea 18d8b <PutChar+0xb41>
    592a:	|  |  |  |  |  |  |                                          jsr 177a8 <KPrintF>
    5930:	|  |  |  |  |  |  |                                          addq.l #4,sp
				return FALSE;
    5932:	|  |  |  |  |  |  |                                          clr.w d0
    5934:	|  +--|--|--|--|--|----------------------------------------- bra.w 6374 <continueFunction+0xeaa>
			}
			break;

			case SLU_LOAD_STRING:
				if (! loadStringToVar (&fun -> reg, param)) {
    5938:	|  |  |  |  |  |  |                                          move.l 68(sp),d1
    593c:	|  |  |  |  |  |  |                                          moveq #28,d0
    593e:	|  |  |  |  |  |  |                                          add.l 80(sp),d0
    5942:	|  |  |  |  |  |  |                                          move.l d1,-(sp)
    5944:	|  |  |  |  |  |  |                                          move.l d0,-(sp)
    5946:	|  |  |  |  |  |  |                                          jsr 14d4c <loadStringToVar>
    594c:	|  |  |  |  |  |  |                                          addq.l #8,sp
    594e:	|  |  |  |  |  |  |                                          tst.w d0
    5950:	|  |  |  |  |  |  |  ,-------------------------------------- bne.w 6338 <continueFunction+0xe6e>
					return FALSE;
    5954:	|  |  |  |  |  |  |  |                                       clr.w d0
    5956:	|  +--|--|--|--|--|--|-------------------------------------- bra.w 6374 <continueFunction+0xeaa>
			break;

			case SLU_INDEXGET:
			case SLU_INCREMENT_INDEX:
			case SLU_DECREMENT_INDEX:
			switch (fun -> stack -> thisVar.varType) {
    595a:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    595e:	|  |  |  |  |  |  |  |                                       movea.l 24(a0),a0
    5962:	|  |  |  |  |  |  |  |                                       move.l (a0),d0
    5964:	|  |  |  |  |  |  |  |                                       moveq #10,d1
    5966:	|  |  |  |  |  |  |  |                                       cmp.l d0,d1
    5968:	|  |  |  |  |  |  |  |                                ,----- beq.s 59c6 <continueFunction+0x4fc>
    596a:	|  |  |  |  |  |  |  |                                |      moveq #10,d1
    596c:	|  |  |  |  |  |  |  |                                |      cmp.l d0,d1
    596e:	|  |  |  |  |  |  |  |              ,-----------------|----- bcs.w 5b5a <continueFunction+0x690>
    5972:	|  |  |  |  |  |  |  |              |                 |      tst.l d0
    5974:	|  |  |  |  |  |  |  |              |                 |  ,-- beq.s 5980 <continueFunction+0x4b6>
    5976:	|  |  |  |  |  |  |  |              |                 |  |   moveq #6,d1
    5978:	|  |  |  |  |  |  |  |              |                 |  |   cmp.l d0,d1
    597a:	|  |  |  |  |  |  |  |              |                 +--|-- beq.s 59c6 <continueFunction+0x4fc>
    597c:	|  |  |  |  |  |  |  |              +-----------------|--|-- bra.w 5b5a <continueFunction+0x690>
				case SVT_NULL:
				if (com == SLU_INDEXGET) {
    5980:	|  |  |  |  |  |  |  |              |                 |  '-> moveq #38,d0
    5982:	|  |  |  |  |  |  |  |              |                 |      cmp.l 64(sp),d0
    5986:	|  |  |  |  |  |  |  |              |                 |  ,-- bne.s 59b2 <continueFunction+0x4e8>
					setVariable (&fun -> reg, SVT_NULL, 0);
    5988:	|  |  |  |  |  |  |  |              |                 |  |   moveq #28,d0
    598a:	|  |  |  |  |  |  |  |              |                 |  |   add.l 80(sp),d0
    598e:	|  |  |  |  |  |  |  |              |                 |  |   clr.l -(sp)
    5990:	|  |  |  |  |  |  |  |              |                 |  |   clr.l -(sp)
    5992:	|  |  |  |  |  |  |  |              |                 |  |   move.l d0,-(sp)
    5994:	|  |  |  |  |  |  |  |              |                 |  |   jsr 155ba <setVariable>
    599a:	|  |  |  |  |  |  |  |              |                 |  |   lea 12(sp),sp
					trimStack (&fun -> stack);
    599e:	|  |  |  |  |  |  |  |              |                 |  |   moveq #24,d0
    59a0:	|  |  |  |  |  |  |  |              |                 |  |   add.l 80(sp),d0
    59a4:	|  |  |  |  |  |  |  |              |                 |  |   move.l d0,-(sp)
    59a6:	|  |  |  |  |  |  |  |              |                 |  |   jsr 1564c <trimStack>
    59ac:	|  |  |  |  |  |  |  |              |                 |  |   addq.l #4,sp
				} else {
					KPrintF((ERROR_INCDEC_UNKNOWN));
					return FALSE;
				}
				break;
    59ae:	|  |  |  |  |  |  |  |              |  ,--------------|--|-- bra.w 5b70 <continueFunction+0x6a6>
					KPrintF((ERROR_INCDEC_UNKNOWN));
    59b2:	|  |  |  |  |  |  |  |              |  |              |  '-> pea 18dcc <PutChar+0xb82>
    59b8:	|  |  |  |  |  |  |  |              |  |              |      jsr 177a8 <KPrintF>
    59be:	|  |  |  |  |  |  |  |              |  |              |      addq.l #4,sp
					return FALSE;
    59c0:	|  |  |  |  |  |  |  |              |  |              |      clr.w d0
    59c2:	|  +--|--|--|--|--|--|--------------|--|--------------|----- bra.w 6374 <continueFunction+0xeaa>

				case SVT_FASTARRAY:
				case SVT_STACK:
				if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    59c6:	|  |  |  |  |  |  |  |              |  |              '----> movea.l 80(sp),a0
    59ca:	|  |  |  |  |  |  |  |              |  |                     movea.l 24(a0),a0
    59ce:	|  |  |  |  |  |  |  |              |  |                     movea.l 4(a0),a0
    59d2:	|  |  |  |  |  |  |  |              |  |                     move.l (a0),d0
    59d4:	|  |  |  |  |  |  |  |              |  |                 ,-- bne.s 59ea <continueFunction+0x520>
					KPrintF((ERROR_INDEX_EMPTY));
    59d6:	|  |  |  |  |  |  |  |              |  |                 |   pea 18e08 <PutChar+0xbbe>
    59dc:	|  |  |  |  |  |  |  |              |  |                 |   jsr 177a8 <KPrintF>
    59e2:	|  |  |  |  |  |  |  |              |  |                 |   addq.l #4,sp
					return FALSE;
    59e4:	|  |  |  |  |  |  |  |              |  |                 |   clr.w d0
    59e6:	|  +--|--|--|--|--|--|--------------|--|-----------------|-- bra.w 6374 <continueFunction+0xeaa>
				} else {
					int ii;
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    59ea:	|  |  |  |  |  |  |  |              |  |                 '-> moveq #28,d0
    59ec:	|  |  |  |  |  |  |  |              |  |                     add.l 80(sp),d0
    59f0:	|  |  |  |  |  |  |  |              |  |                     move.l d0,-(sp)
    59f2:	|  |  |  |  |  |  |  |              |  |                     pea 1 <_start+0x1>
    59f6:	|  |  |  |  |  |  |  |              |  |                     lea 12(sp),a0
    59fa:	|  |  |  |  |  |  |  |              |  |                     move.l a0,-(sp)
    59fc:	|  |  |  |  |  |  |  |              |  |                     jsr 14cc8 <getValueType>
    5a02:	|  |  |  |  |  |  |  |              |  |                     lea 12(sp),sp
    5a06:	|  |  |  |  |  |  |  |              |  |                     tst.w d0
    5a08:	|  |  |  |  |  |  |  |              |  |                 ,-- bne.s 5a10 <continueFunction+0x546>
    5a0a:	|  |  |  |  |  |  |  |              |  |                 |   clr.w d0
    5a0c:	|  +--|--|--|--|--|--|--------------|--|-----------------|-- bra.w 6374 <continueFunction+0xeaa>
					struct variable * grab = (fun -> stack -> thisVar.varType == SVT_FASTARRAY) ?
    5a10:	|  |  |  |  |  |  |  |              |  |                 '-> movea.l 80(sp),a0
    5a14:	|  |  |  |  |  |  |  |              |  |                     movea.l 24(a0),a0
    5a18:	|  |  |  |  |  |  |  |              |  |                     move.l (a0),d0
						fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii)
							:
    5a1a:	|  |  |  |  |  |  |  |              |  |                     moveq #10,d1
    5a1c:	|  |  |  |  |  |  |  |              |  |                     cmp.l d0,d1
    5a1e:	|  |  |  |  |  |  |  |              |  |                 ,-- bne.s 5a40 <continueFunction+0x576>
						fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii)
    5a20:	|  |  |  |  |  |  |  |              |  |                 |   move.l 4(sp),d0
    5a24:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,d1
    5a26:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 80(sp),a0
    5a2a:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 24(a0),a0
    5a2e:	|  |  |  |  |  |  |  |              |  |                 |   move.l 4(a0),d0
    5a32:	|  |  |  |  |  |  |  |              |  |                 |   move.l d1,-(sp)
    5a34:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,-(sp)
    5a36:	|  |  |  |  |  |  |  |              |  |                 |   jsr 14952 <fastArrayGetByIndex>
    5a3c:	|  |  |  |  |  |  |  |              |  |                 |   addq.l #8,sp
    5a3e:	|  |  |  |  |  |  |  |              |  |              ,--|-- bra.s 5a60 <continueFunction+0x596>
						stackGetByIndex (fun -> stack -> thisVar.varData.theStack -> first, ii);
    5a40:	|  |  |  |  |  |  |  |              |  |              |  '-> move.l 4(sp),d0
    5a44:	|  |  |  |  |  |  |  |              |  |              |      move.l d0,d1
    5a46:	|  |  |  |  |  |  |  |              |  |              |      movea.l 80(sp),a0
    5a4a:	|  |  |  |  |  |  |  |              |  |              |      movea.l 24(a0),a0
    5a4e:	|  |  |  |  |  |  |  |              |  |              |      movea.l 4(a0),a0
    5a52:	|  |  |  |  |  |  |  |              |  |              |      move.l (a0),d0
    5a54:	|  |  |  |  |  |  |  |              |  |              |      move.l d1,-(sp)
    5a56:	|  |  |  |  |  |  |  |              |  |              |      move.l d0,-(sp)
    5a58:	|  |  |  |  |  |  |  |              |  |              |      jsr 155dc <stackGetByIndex>
    5a5e:	|  |  |  |  |  |  |  |              |  |              |      addq.l #8,sp
					struct variable * grab = (fun -> stack -> thisVar.varType == SVT_FASTARRAY) ?
    5a60:	|  |  |  |  |  |  |  |              |  |              '----> move.l d0,60(sp)

					trimStack (&fun -> stack);
    5a64:	|  |  |  |  |  |  |  |              |  |                     moveq #24,d0
    5a66:	|  |  |  |  |  |  |  |              |  |                     add.l 80(sp),d0
    5a6a:	|  |  |  |  |  |  |  |              |  |                     move.l d0,-(sp)
    5a6c:	|  |  |  |  |  |  |  |              |  |                     jsr 1564c <trimStack>
    5a72:	|  |  |  |  |  |  |  |              |  |                     addq.l #4,sp

					if (! grab) {
    5a74:	|  |  |  |  |  |  |  |              |  |                     tst.l 60(sp)
    5a78:	|  |  |  |  |  |  |  |              |  |                 ,-- bne.s 5a94 <continueFunction+0x5ca>
						setVariable (&fun -> reg, SVT_NULL, 0);
    5a7a:	|  |  |  |  |  |  |  |              |  |                 |   moveq #28,d0
    5a7c:	|  |  |  |  |  |  |  |              |  |                 |   add.l 80(sp),d0
    5a80:	|  |  |  |  |  |  |  |              |  |                 |   clr.l -(sp)
    5a82:	|  |  |  |  |  |  |  |              |  |                 |   clr.l -(sp)
    5a84:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,-(sp)
    5a86:	|  |  |  |  |  |  |  |              |  |                 |   jsr 155ba <setVariable>
    5a8c:	|  |  |  |  |  |  |  |              |  |                 |   lea 12(sp),sp
							default:
							if (! copyVariable (grab, &fun -> reg)) return FALSE;
						}
					}
				}
				break;
    5a90:	|  |  |  |  |  |  |  |              |  |  ,--------------|-- bra.w 5b6e <continueFunction+0x6a4>
						switch (com) {
    5a94:	|  |  |  |  |  |  |  |              |  |  |              '-> moveq #39,d0
    5a96:	|  |  |  |  |  |  |  |              |  |  |                  cmp.l 64(sp),d0
    5a9a:	|  |  |  |  |  |  |  |              |  |  |              ,-- beq.s 5aa8 <continueFunction+0x5de>
    5a9c:	|  |  |  |  |  |  |  |              |  |  |              |   moveq #40,d1
    5a9e:	|  |  |  |  |  |  |  |              |  |  |              |   cmp.l 64(sp),d1
    5aa2:	|  |  |  |  |  |  |  |              |  |  |           ,--|-- beq.s 5af2 <continueFunction+0x628>
    5aa4:	|  |  |  |  |  |  |  |              |  |  |  ,--------|--|-- bra.w 5b3a <continueFunction+0x670>
							if (! getValueType (&ii, SVT_INT, grab)) return FALSE;
    5aa8:	|  |  |  |  |  |  |  |              |  |  |  |        |  '-> move.l 60(sp),-(sp)
    5aac:	|  |  |  |  |  |  |  |              |  |  |  |        |      pea 1 <_start+0x1>
    5ab0:	|  |  |  |  |  |  |  |              |  |  |  |        |      lea 8(sp),a0
    5ab4:	|  |  |  |  |  |  |  |              |  |  |  |        |      move.l a0,-(sp)
    5ab6:	|  |  |  |  |  |  |  |              |  |  |  |        |      jsr 14cc8 <getValueType>
    5abc:	|  |  |  |  |  |  |  |              |  |  |  |        |      lea 12(sp),sp
    5ac0:	|  |  |  |  |  |  |  |              |  |  |  |        |      tst.w d0
    5ac2:	|  |  |  |  |  |  |  |              |  |  |  |        |  ,-- bne.s 5aca <continueFunction+0x600>
    5ac4:	|  |  |  |  |  |  |  |              |  |  |  |        |  |   clr.w d0
    5ac6:	|  |  |  |  |  |  |  |              |  |  |  |  ,-----|--|-- bra.w 5b54 <continueFunction+0x68a>
							setVariable (&fun -> reg, SVT_INT, ii);
    5aca:	|  |  |  |  |  |  |  |              |  |  |  |  |     |  '-> move.l (sp),d1
    5acc:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      moveq #28,d0
    5ace:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      add.l 80(sp),d0
    5ad2:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d1,-(sp)
    5ad4:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      pea 1 <_start+0x1>
    5ad8:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d0,-(sp)
    5ada:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      jsr 155ba <setVariable>
    5ae0:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      lea 12(sp),sp
							grab -> varData.intValue = ii + 1;
    5ae4:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l (sp),d0
    5ae6:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      addq.l #1,d0
    5ae8:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      movea.l 60(sp),a0
    5aec:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d0,4(a0)
							break;
    5af0:	|  |  |  |  |  |  |  |              |  |  |  |  |  ,--|----- bra.s 5b58 <continueFunction+0x68e>
							if (! getValueType (&ii, SVT_INT, grab)) return FALSE;
    5af2:	|  |  |  |  |  |  |  |              |  |  |  |  |  |  '----> move.l 60(sp),-(sp)
    5af6:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         pea 1 <_start+0x1>
    5afa:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 8(sp),a0
    5afe:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l a0,-(sp)
    5b00:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         jsr 14cc8 <getValueType>
    5b06:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 12(sp),sp
    5b0a:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         tst.w d0
    5b0c:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     ,-- bne.s 5b12 <continueFunction+0x648>
    5b0e:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     |   clr.w d0
    5b10:	|  |  |  |  |  |  |  |              |  |  |  |  +--|-----|-- bra.s 5b54 <continueFunction+0x68a>
							setVariable (&fun -> reg, SVT_INT, ii);
    5b12:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     '-> move.l (sp),d1
    5b14:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         moveq #28,d0
    5b16:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         add.l 80(sp),d0
    5b1a:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d1,-(sp)
    5b1c:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         pea 1 <_start+0x1>
    5b20:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d0,-(sp)
    5b22:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         jsr 155ba <setVariable>
    5b28:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 12(sp),sp
							grab -> varData.intValue = ii - 1;
    5b2c:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l (sp),d0
    5b2e:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         subq.l #1,d0
    5b30:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         movea.l 60(sp),a0
    5b34:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d0,4(a0)
							break;
    5b38:	|  |  |  |  |  |  |  |              |  |  |  |  |  +-------- bra.s 5b58 <continueFunction+0x68e>
							if (! copyVariable (grab, &fun -> reg)) return FALSE;
    5b3a:	|  |  |  |  |  |  |  |              |  |  |  '--|--|-------> moveq #28,d0
    5b3c:	|  |  |  |  |  |  |  |              |  |  |     |  |         add.l 80(sp),d0
    5b40:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l d0,-(sp)
    5b42:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l 64(sp),-(sp)
    5b46:	|  |  |  |  |  |  |  |              |  |  |     |  |         jsr 15182 <copyVariable>
    5b4c:	|  |  |  |  |  |  |  |              |  |  |     |  |         addq.l #8,sp
    5b4e:	|  |  |  |  |  |  |  |              |  |  |     |  |         tst.w d0
    5b50:	|  |  |  |  |  |  |  |              |  |  +-----|--|-------- bne.s 5b6e <continueFunction+0x6a4>
    5b52:	|  |  |  |  |  |  |  |              |  |  |     |  |         clr.w d0
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    5b54:	|  +--|--|--|--|--|--|--------------|--|--|-----'--|-------X bra.w 6374 <continueFunction+0xeaa>
				break;
    5b58:	|  |  |  |  |  |  |  |              |  |  +--------'-------X bra.s 5b6e <continueFunction+0x6a4>

				default:
				KPrintF((ERROR_INDEX_NONSTACK));
    5b5a:	|  |  |  |  |  |  |  |              '--|--|----------------> pea 18e26 <PutChar+0xbdc>
    5b60:	|  |  |  |  |  |  |  |                 |  |                  jsr 177a8 <KPrintF>
    5b66:	|  |  |  |  |  |  |  |                 |  |                  addq.l #4,sp
				return FALSE;
    5b68:	|  |  |  |  |  |  |  |                 |  |                  clr.w d0
    5b6a:	|  +--|--|--|--|--|--|-----------------|--|----------------- bra.w 6374 <continueFunction+0xeaa>
				break;
    5b6e:	|  |  |  |  |  |  |  |                 |  '----------------> nop
			}
			break;
    5b70:	|  |  |  |  +--|--|--|-----------------'-------------------X bra.w 6352 <continueFunction+0xe88>

			case SLU_INDEXSET:
			switch (fun -> stack -> thisVar.varType) {
    5b74:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    5b78:	|  |  |  |  |  |  |  |                                       movea.l 24(a0),a0
    5b7c:	|  |  |  |  |  |  |  |                                       move.l (a0),d0
    5b7e:	|  |  |  |  |  |  |  |                                       moveq #6,d1
    5b80:	|  |  |  |  |  |  |  |                                       cmp.l d0,d1
    5b82:	|  |  |  |  |  |  |  |                                   ,-- beq.s 5b90 <continueFunction+0x6c6>
    5b84:	|  |  |  |  |  |  |  |                                   |   moveq #10,d1
    5b86:	|  |  |  |  |  |  |  |                                   |   cmp.l d0,d1
    5b88:	|  |  |  |  |  |  |  |                                ,--|-- beq.w 5c3c <continueFunction+0x772>
    5b8c:	|  |  |  |  |  |  |  |                             ,--|--|-- bra.w 5c9a <continueFunction+0x7d0>
				case SVT_STACK:
				if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    5b90:	|  |  |  |  |  |  |  |                             |  |  '-> movea.l 80(sp),a0
    5b94:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    5b98:	|  |  |  |  |  |  |  |                             |  |      movea.l 4(a0),a0
    5b9c:	|  |  |  |  |  |  |  |                             |  |      move.l (a0),d0
    5b9e:	|  |  |  |  |  |  |  |                             |  |  ,-- bne.s 5bb4 <continueFunction+0x6ea>
					KPrintF((ERROR_INDEX_EMPTY));
    5ba0:	|  |  |  |  |  |  |  |                             |  |  |   pea 18e08 <PutChar+0xbbe>
    5ba6:	|  |  |  |  |  |  |  |                             |  |  |   jsr 177a8 <KPrintF>
    5bac:	|  |  |  |  |  |  |  |                             |  |  |   addq.l #4,sp
					return FALSE;
    5bae:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    5bb0:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 6374 <continueFunction+0xeaa>
				} else {
					int ii;
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    5bb4:	|  |  |  |  |  |  |  |                             |  |  '-> moveq #28,d0
    5bb6:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    5bba:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    5bbc:	|  |  |  |  |  |  |  |                             |  |      pea 1 <_start+0x1>
    5bc0:	|  |  |  |  |  |  |  |                             |  |      lea 16(sp),a0
    5bc4:	|  |  |  |  |  |  |  |                             |  |      move.l a0,-(sp)
    5bc6:	|  |  |  |  |  |  |  |                             |  |      jsr 14cc8 <getValueType>
    5bcc:	|  |  |  |  |  |  |  |                             |  |      lea 12(sp),sp
    5bd0:	|  |  |  |  |  |  |  |                             |  |      tst.w d0
    5bd2:	|  |  |  |  |  |  |  |                             |  |  ,-- bne.s 5bda <continueFunction+0x710>
    5bd4:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    5bd6:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 6374 <continueFunction+0xeaa>
					if (! stackSetByIndex (fun -> stack -> thisVar.varData.theStack -> first, ii, &fun -> stack -> next -> thisVar)) {
    5bda:	|  |  |  |  |  |  |  |                             |  |  '-> movea.l 80(sp),a0
    5bde:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    5be2:	|  |  |  |  |  |  |  |                             |  |      move.l 8(a0),d0
    5be6:	|  |  |  |  |  |  |  |                             |  |      movea.l d0,a1
    5be8:	|  |  |  |  |  |  |  |                             |  |      move.l 8(sp),d0
    5bec:	|  |  |  |  |  |  |  |                             |  |      move.l d0,d1
    5bee:	|  |  |  |  |  |  |  |                             |  |      movea.l 80(sp),a0
    5bf2:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    5bf6:	|  |  |  |  |  |  |  |                             |  |      movea.l 4(a0),a0
    5bfa:	|  |  |  |  |  |  |  |                             |  |      move.l (a0),d0
    5bfc:	|  |  |  |  |  |  |  |                             |  |      move.l a1,-(sp)
    5bfe:	|  |  |  |  |  |  |  |                             |  |      move.l d1,-(sp)
    5c00:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    5c02:	|  |  |  |  |  |  |  |                             |  |      jsr 7858 <stackSetByIndex>
    5c08:	|  |  |  |  |  |  |  |                             |  |      lea 12(sp),sp
    5c0c:	|  |  |  |  |  |  |  |                             |  |      tst.w d0
    5c0e:	|  |  |  |  |  |  |  |                             |  |  ,-- bne.s 5c16 <continueFunction+0x74c>
						return FALSE;
    5c10:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    5c12:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 6374 <continueFunction+0xeaa>
					}
					trimStack (&fun -> stack);
    5c16:	|  |  |  |  |  |  |  |                             |  |  '-> moveq #24,d0
    5c18:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    5c1c:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    5c1e:	|  |  |  |  |  |  |  |                             |  |      jsr 1564c <trimStack>
    5c24:	|  |  |  |  |  |  |  |                             |  |      addq.l #4,sp
					trimStack (&fun -> stack);
    5c26:	|  |  |  |  |  |  |  |                             |  |      moveq #24,d0
    5c28:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    5c2c:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    5c2e:	|  |  |  |  |  |  |  |                             |  |      jsr 1564c <trimStack>
    5c34:	|  |  |  |  |  |  |  |                             |  |      addq.l #4,sp
				}
				break;
    5c36:	|  |  |  |  |  |  |  |                             |  |      nop

				default:
				KPrintF((ERROR_INDEX_NONSTACK));
				return FALSE;
			}
			break;
    5c38:	|  |  |  |  +--|--|--|-----------------------------|--|----- bra.w 6352 <continueFunction+0xe88>
					if (! getValueType (&ii, SVT_INT, &fun->reg)) return FALSE;
    5c3c:	|  |  |  |  |  |  |  |                             |  '----> moveq #28,d0
    5c3e:	|  |  |  |  |  |  |  |                             |         add.l 80(sp),d0
    5c42:	|  |  |  |  |  |  |  |                             |         move.l d0,-(sp)
    5c44:	|  |  |  |  |  |  |  |                             |         pea 1 <_start+0x1>
    5c48:	|  |  |  |  |  |  |  |                             |         lea 20(sp),a0
    5c4c:	|  |  |  |  |  |  |  |                             |         move.l a0,-(sp)
    5c4e:	|  |  |  |  |  |  |  |                             |         jsr 14cc8 <getValueType>
    5c54:	|  |  |  |  |  |  |  |                             |         lea 12(sp),sp
    5c58:	|  |  |  |  |  |  |  |                             |         tst.w d0
    5c5a:	|  |  |  |  |  |  |  |                             |     ,-- bne.s 5c62 <continueFunction+0x798>
    5c5c:	|  |  |  |  |  |  |  |                             |     |   clr.w d0
    5c5e:	|  +--|--|--|--|--|--|-----------------------------|-----|-- bra.w 6374 <continueFunction+0xeaa>
					struct variable * v = fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii);
    5c62:	|  |  |  |  |  |  |  |                             |     '-> move.l 12(sp),d0
    5c66:	|  |  |  |  |  |  |  |                             |         move.l d0,d1
    5c68:	|  |  |  |  |  |  |  |                             |         movea.l 80(sp),a0
    5c6c:	|  |  |  |  |  |  |  |                             |         movea.l 24(a0),a0
    5c70:	|  |  |  |  |  |  |  |                             |         move.l 4(a0),d0
    5c74:	|  |  |  |  |  |  |  |                             |         move.l d1,-(sp)
    5c76:	|  |  |  |  |  |  |  |                             |         move.l d0,-(sp)
    5c78:	|  |  |  |  |  |  |  |                             |         jsr 14952 <fastArrayGetByIndex>
    5c7e:	|  |  |  |  |  |  |  |                             |         addq.l #8,sp
    5c80:	|  |  |  |  |  |  |  |                             |         move.l d0,56(sp)
					if (v == NULL) KPrintF(("Not within bounds of fast array."));
    5c84:	|  |  |  |  |  |  |  |                             |     ,-- bne.s 5c94 <continueFunction+0x7ca>
    5c86:	|  |  |  |  |  |  |  |                             |     |   pea 18e4a <PutChar+0xc00>
    5c8c:	|  |  |  |  |  |  |  |                             |     |   jsr 177a8 <KPrintF>
    5c92:	|  |  |  |  |  |  |  |                             |     |   addq.l #4,sp
					return FALSE;
    5c94:	|  |  |  |  |  |  |  |                             |     '-> clr.w d0
    5c96:	|  +--|--|--|--|--|--|-----------------------------|-------- bra.w 6374 <continueFunction+0xeaa>
				KPrintF((ERROR_INDEX_NONSTACK));
    5c9a:	|  |  |  |  |  |  |  |                             '-------> pea 18e26 <PutChar+0xbdc>
    5ca0:	|  |  |  |  |  |  |  |                                       jsr 177a8 <KPrintF>
    5ca6:	|  |  |  |  |  |  |  |                                       addq.l #4,sp
				return FALSE;
    5ca8:	|  |  |  |  |  |  |  |                                       clr.w d0
    5caa:	|  +--|--|--|--|--|--|-------------------------------------- bra.w 6374 <continueFunction+0xeaa>
			// variable, a global or onto the stack...

			case SLU_INCREMENT_LOCAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&fun -> localVars[param])) return FALSE;
    5cae:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    5cb2:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    5cb6:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5cba:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5cbc:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    5cbe:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5cc0:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5cc4:	|  |  |  |  |  |  |  |                                       lea 24(sp),a0
    5cc8:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    5cca:	|  |  |  |  |  |  |  |                                       jsr 14cc8 <getValueType>
    5cd0:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    5cd4:	|  |  |  |  |  |  |  |                                       tst.w d0
    5cd6:	|  |  |  |  |  |  |  |                                   ,-- bne.s 5cde <continueFunction+0x814>
    5cd8:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    5cda:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 6374 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    5cde:	|  |  |  |  |  |  |  |                                   '-> move.l 16(sp),d1
    5ce2:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    5ce4:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    5ce8:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5cea:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5cee:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5cf0:	|  |  |  |  |  |  |  |                                       jsr 155ba <setVariable>
    5cf6:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&(fun -> localVars[param]), SVT_INT, ii + 1);
    5cfa:	|  |  |  |  |  |  |  |                                       move.l 16(sp),d0
    5cfe:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    5d00:	|  |  |  |  |  |  |  |                                       addq.l #1,d1
    5d02:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    5d06:	|  |  |  |  |  |  |  |                                       movea.l 20(a0),a0
    5d0a:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5d0e:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5d10:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    5d12:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5d14:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5d18:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5d1a:	|  |  |  |  |  |  |  |                                       jsr 155ba <setVariable>
    5d20:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    5d24:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 6352 <continueFunction+0xe88>

			case SLU_INCREMENT_GLOBAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&globalVars[param])) return FALSE;
    5d28:	|  |  |  |  |  |  |  |                                       move.l 1cf60 <globalVars>,d1
    5d2e:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5d32:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5d34:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    5d36:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5d38:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5d3c:	|  |  |  |  |  |  |  |                                       lea 28(sp),a0
    5d40:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    5d42:	|  |  |  |  |  |  |  |                                       jsr 14cc8 <getValueType>
    5d48:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    5d4c:	|  |  |  |  |  |  |  |                                       tst.w d0
    5d4e:	|  |  |  |  |  |  |  |                                   ,-- bne.s 5d56 <continueFunction+0x88c>
    5d50:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    5d52:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 6374 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    5d56:	|  |  |  |  |  |  |  |                                   '-> move.l 20(sp),d1
    5d5a:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    5d5c:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    5d60:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5d62:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5d66:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5d68:	|  |  |  |  |  |  |  |                                       jsr 155ba <setVariable>
    5d6e:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&globalVars[param], SVT_INT, ii + 1);
    5d72:	|  |  |  |  |  |  |  |                                       move.l 20(sp),d0
    5d76:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    5d78:	|  |  |  |  |  |  |  |                                       addq.l #1,d1
    5d7a:	|  |  |  |  |  |  |  |                                       movea.l 1cf60 <globalVars>,a0
    5d80:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5d84:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5d86:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    5d88:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5d8a:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5d8e:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5d90:	|  |  |  |  |  |  |  |                                       jsr 155ba <setVariable>
    5d96:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    5d9a:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 6352 <continueFunction+0xe88>

			case SLU_DECREMENT_LOCAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&fun -> localVars[param])) return FALSE;
    5d9e:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    5da2:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    5da6:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5daa:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5dac:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    5dae:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5db0:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5db4:	|  |  |  |  |  |  |  |                                       lea 32(sp),a0
    5db8:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    5dba:	|  |  |  |  |  |  |  |                                       jsr 14cc8 <getValueType>
    5dc0:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    5dc4:	|  |  |  |  |  |  |  |                                       tst.w d0
    5dc6:	|  |  |  |  |  |  |  |                                   ,-- bne.s 5dce <continueFunction+0x904>
    5dc8:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    5dca:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 6374 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    5dce:	|  |  |  |  |  |  |  |                                   '-> move.l 24(sp),d1
    5dd2:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    5dd4:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    5dd8:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5dda:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5dde:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5de0:	|  |  |  |  |  |  |  |                                       jsr 155ba <setVariable>
    5de6:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&(fun -> localVars[param]), SVT_INT, ii - 1);
    5dea:	|  |  |  |  |  |  |  |                                       move.l 24(sp),d0
    5dee:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    5df0:	|  |  |  |  |  |  |  |                                       subq.l #1,d1
    5df2:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    5df6:	|  |  |  |  |  |  |  |                                       movea.l 20(a0),a0
    5dfa:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5dfe:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5e00:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    5e02:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5e04:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5e08:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5e0a:	|  |  |  |  |  |  |  |                                       jsr 155ba <setVariable>
    5e10:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    5e14:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 6352 <continueFunction+0xe88>

			case SLU_DECREMENT_GLOBAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&globalVars[param])) return FALSE;
    5e18:	|  |  |  |  |  |  |  |                                       move.l 1cf60 <globalVars>,d1
    5e1e:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5e22:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5e24:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    5e26:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5e28:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5e2c:	|  |  |  |  |  |  |  |                                       lea 36(sp),a0
    5e30:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    5e32:	|  |  |  |  |  |  |  |                                       jsr 14cc8 <getValueType>
    5e38:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    5e3c:	|  |  |  |  |  |  |  |                                       tst.w d0
    5e3e:	|  |  |  |  |  |  |  |                                   ,-- bne.s 5e46 <continueFunction+0x97c>
    5e40:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    5e42:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 6374 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    5e46:	|  |  |  |  |  |  |  |                                   '-> move.l 28(sp),d1
    5e4a:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    5e4c:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    5e50:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5e52:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5e56:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5e58:	|  |  |  |  |  |  |  |                                       jsr 155ba <setVariable>
    5e5e:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&globalVars[param], SVT_INT, ii - 1);
    5e62:	|  |  |  |  |  |  |  |                                       move.l 28(sp),d0
    5e66:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    5e68:	|  |  |  |  |  |  |  |                                       subq.l #1,d1
    5e6a:	|  |  |  |  |  |  |  |                                       movea.l 1cf60 <globalVars>,a0
    5e70:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5e74:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5e76:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    5e78:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5e7a:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5e7e:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5e80:	|  |  |  |  |  |  |  |                                       jsr 155ba <setVariable>
    5e86:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    5e8a:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 6352 <continueFunction+0xe88>

			case SLU_SET_LOCAL:
			if (! copyVariable (&fun -> reg, &(fun -> localVars[param]))) return FALSE;
    5e8e:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    5e92:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    5e96:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5e9a:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5e9c:	|  |  |  |  |  |  |  |                                       add.l d0,d1
    5e9e:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    5ea0:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    5ea4:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5ea6:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5ea8:	|  |  |  |  |  |  |  |                                       jsr 15182 <copyVariable>
    5eae:	|  |  |  |  |  |  |  |                                       addq.l #8,sp
    5eb0:	|  |  |  |  |  |  |  |                                       tst.w d0
    5eb2:	|  |  |  |  |  |  |  |  ,----------------------------------- bne.w 633c <continueFunction+0xe72>
    5eb6:	|  |  |  |  |  |  |  |  |                                    clr.w d0
    5eb8:	|  +--|--|--|--|--|--|--|----------------------------------- bra.w 6374 <continueFunction+0xeaa>
			break;

			case SLU_SET_GLOBAL:
//			newDebug ("  Copying TO global variable", param);
//			newDebug ("  Global type at the moment", globalVars[param].varType);
			if (! copyVariable (&fun -> reg, &globalVars[param])) return FALSE;
    5ebc:	|  |  |  |  |  |  |  |  |                                    move.l 1cf60 <globalVars>,d1
    5ec2:	|  |  |  |  |  |  |  |  |                                    move.l 68(sp),d0
    5ec6:	|  |  |  |  |  |  |  |  |                                    lsl.l #3,d0
    5ec8:	|  |  |  |  |  |  |  |  |                                    add.l d0,d1
    5eca:	|  |  |  |  |  |  |  |  |                                    moveq #28,d0
    5ecc:	|  |  |  |  |  |  |  |  |                                    add.l 80(sp),d0
    5ed0:	|  |  |  |  |  |  |  |  |                                    move.l d1,-(sp)
    5ed2:	|  |  |  |  |  |  |  |  |                                    move.l d0,-(sp)
    5ed4:	|  |  |  |  |  |  |  |  |                                    jsr 15182 <copyVariable>
    5eda:	|  |  |  |  |  |  |  |  |                                    addq.l #8,sp
    5edc:	|  |  |  |  |  |  |  |  |                                    tst.w d0
    5ede:	|  |  |  |  |  |  |  |  |  ,-------------------------------- bne.w 6340 <continueFunction+0xe76>
    5ee2:	|  |  |  |  |  |  |  |  |  |                                 clr.w d0
    5ee4:	|  +--|--|--|--|--|--|--|--|-------------------------------- bra.w 6374 <continueFunction+0xeaa>
			break;

			case SLU_LOAD_GLOBAL:
//			newDebug ("  Copying FROM global variable", param);
//			newDebug ("  Global type at the moment", globalVars[param].varType);
			if (! copyVariable (&globalVars[param], &fun -> reg)) return FALSE;
    5ee8:	|  |  |  |  |  |  |  |  |  |                                 moveq #28,d0
    5eea:	|  |  |  |  |  |  |  |  |  |                                 add.l 80(sp),d0
    5eee:	|  |  |  |  |  |  |  |  |  |                                 movea.l 1cf60 <globalVars>,a0
    5ef4:	|  |  |  |  |  |  |  |  |  |                                 move.l 68(sp),d1
    5ef8:	|  |  |  |  |  |  |  |  |  |                                 lsl.l #3,d1
    5efa:	|  |  |  |  |  |  |  |  |  |                                 add.l a0,d1
    5efc:	|  |  |  |  |  |  |  |  |  |                                 move.l d0,-(sp)
    5efe:	|  |  |  |  |  |  |  |  |  |                                 move.l d1,-(sp)
    5f00:	|  |  |  |  |  |  |  |  |  |                                 jsr 15182 <copyVariable>
    5f06:	|  |  |  |  |  |  |  |  |  |                                 addq.l #8,sp
    5f08:	|  |  |  |  |  |  |  |  |  |                                 tst.w d0
    5f0a:	|  |  |  |  |  |  |  |  |  |  ,----------------------------- bne.w 6344 <continueFunction+0xe7a>
    5f0e:	|  |  |  |  |  |  |  |  |  |  |                              clr.w d0
    5f10:	|  +--|--|--|--|--|--|--|--|--|----------------------------- bra.w 6374 <continueFunction+0xeaa>
			break;

			case SLU_STACK_PUSH:
			if (! addVarToStack (&fun -> reg, &fun -> stack)) return FALSE;
    5f14:	|  |  |  |  |  |  |  |  |  |  |                              moveq #24,d1
    5f16:	|  |  |  |  |  |  |  |  |  |  |                              add.l 80(sp),d1
    5f1a:	|  |  |  |  |  |  |  |  |  |  |                              moveq #28,d0
    5f1c:	|  |  |  |  |  |  |  |  |  |  |                              add.l 80(sp),d0
    5f20:	|  |  |  |  |  |  |  |  |  |  |                              move.l d1,-(sp)
    5f22:	|  |  |  |  |  |  |  |  |  |  |                              move.l d0,-(sp)
    5f24:	|  |  |  |  |  |  |  |  |  |  |                              jsr 14504 <addVarToStack>
    5f2a:	|  |  |  |  |  |  |  |  |  |  |                              addq.l #8,sp
    5f2c:	|  |  |  |  |  |  |  |  |  |  |                              tst.w d0
    5f2e:	|  |  |  |  |  |  |  |  |  |  |  ,-------------------------- bne.w 6348 <continueFunction+0xe7e>
    5f32:	|  |  |  |  |  |  |  |  |  |  |  |                           clr.w d0
    5f34:	|  +--|--|--|--|--|--|--|--|--|--|-------------------------- bra.w 6374 <continueFunction+0xeaa>
			break;

			case SLU_QUICK_PUSH:
			if (! addVarToStackQuick (&fun -> reg, &fun -> stack)) return FALSE;
    5f38:	|  |  |  |  |  |  |  |  |  |  |  |                           moveq #24,d1
    5f3a:	|  |  |  |  |  |  |  |  |  |  |  |                           add.l 80(sp),d1
    5f3e:	|  |  |  |  |  |  |  |  |  |  |  |                           moveq #28,d0
    5f40:	|  |  |  |  |  |  |  |  |  |  |  |                           add.l 80(sp),d0
    5f44:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l d1,-(sp)
    5f46:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l d0,-(sp)
    5f48:	|  |  |  |  |  |  |  |  |  |  |  |                           jsr 1458a <addVarToStackQuick>
    5f4e:	|  |  |  |  |  |  |  |  |  |  |  |                           addq.l #8,sp
    5f50:	|  |  |  |  |  |  |  |  |  |  |  |                           tst.w d0
    5f52:	|  |  |  |  |  |  |  |  |  |  |  |  ,----------------------- bne.w 634c <continueFunction+0xe82>
    5f56:	|  |  |  |  |  |  |  |  |  |  |  |  |                        clr.w d0
    5f58:	|  +--|--|--|--|--|--|--|--|--|--|--|----------------------- bra.w 6374 <continueFunction+0xeaa>
			break;

			case SLU_NOT:
			setVariable (&fun -> reg, SVT_INT, ! getBoolean (&fun -> reg));
    5f5c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    5f5e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    5f62:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    5f64:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 15208 <getBoolean>
    5f6a:	|  |  |  |  |  |  |  |  |  |  |  |  |                        addq.l #4,sp
    5f6c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        tst.w d0
    5f6e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        seq d0
    5f70:	|  |  |  |  |  |  |  |  |  |  |  |  |                        neg.b d0
    5f72:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #0,d1
    5f74:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.b d0,d1
    5f76:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    5f78:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    5f7c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d1,-(sp)
    5f7e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        pea 1 <_start+0x1>
    5f82:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    5f84:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 155ba <setVariable>
    5f8a:	|  |  |  |  |  |  |  |  |  |  |  |  |                        lea 12(sp),sp
			break;
    5f8e:	|  |  |  |  +--|--|--|--|--|--|--|--|----------------------- bra.w 6352 <continueFunction+0xe88>

			case SLU_BR_ZERO:
			if (! getBoolean (&fun -> reg)) {
    5f92:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    5f94:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    5f98:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    5f9a:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 15208 <getBoolean>
    5fa0:	|  |  |  |  |  |  |  |  |  |  |  |  |                        addq.l #4,sp
    5fa2:	|  |  |  |  |  |  |  |  |  |  |  |  |                        tst.w d0
    5fa4:	|  |  |  |  |  |  |  |  |  |  |  |  |  ,-------------------- bne.w 6350 <continueFunction+0xe86>
				advanceNow = FALSE;
    5fa8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     clr.w 72(sp)
				fun -> runThisLine = param;
    5fac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    5fb0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 68(sp),36(a0)
			}
			break;
    5fb6:	|  |  |  |  |  |  |  |  |  |  |  |  |  +-------------------- bra.w 6350 <continueFunction+0xe86>

			case SLU_BRANCH:
			advanceNow = FALSE;
    5fba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     clr.w 72(sp)
			fun -> runThisLine = param;
    5fbe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    5fc2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 68(sp),36(a0)
			break;
    5fc8:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-------------------- bra.w 6352 <continueFunction+0xe88>

			case SLU_NEGATIVE:
			{
				int i;
				if (! getValueType(&i, SVT_INT,&fun -> reg)) return FALSE;
    5fcc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     moveq #28,d0
    5fce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     add.l 80(sp),d0
    5fd2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,-(sp)
    5fd4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     pea 1 <_start+0x1>
    5fd8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 40(sp),a0
    5fdc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l a0,-(sp)
    5fde:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     jsr 14cc8 <getValueType>
    5fe4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 12(sp),sp
    5fe8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     tst.w d0
    5fea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 ,-- bne.s 5ff2 <continueFunction+0xb28>
    5fec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 |   clr.w d0
    5fee:	|  +--|--|--|--|--|--|--|--|--|--|--|--|-----------------|-- bra.w 6374 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, -i);
    5ff2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 '-> move.l 32(sp),d0
    5ff6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,d1
    5ff8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     neg.l d1
    5ffa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     moveq #28,d0
    5ffc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     add.l 80(sp),d0
    6000:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d1,-(sp)
    6002:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     pea 1 <_start+0x1>
    6006:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,-(sp)
    6008:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     jsr 155ba <setVariable>
    600e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 12(sp),sp
			}
			break;
    6012:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-------------------- bra.w 6352 <continueFunction+0xe88>
			case SLU_NOT_EQ:
			case SLU_LESSTHAN:
			case SLU_MORETHAN:
			case SLU_LESS_EQUAL:
			case SLU_MORE_EQUAL:
			if (fun -> stack) {
    6016:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    601a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 24(a0),d0
    601e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  ,----------------- beq.w 6308 <continueFunction+0xe3e>
				int firstValue, secondValue;

				switch (com) {
    6022:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  moveq #15,d0
    6024:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  cmp.l 64(sp),d0
    6028:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        ,-------- beq.s 60a4 <continueFunction+0xbda>
    602a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #15,d1
    602c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         cmp.l 64(sp),d1
    6030:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     ,--|-------- bcs.w 60ee <continueFunction+0xc24>
    6034:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |         moveq #8,d0
    6036:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |         cmp.l 64(sp),d0
    603a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     ,-- beq.s 6048 <continueFunction+0xb7e>
    603c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |   moveq #14,d1
    603e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |   cmp.l 64(sp),d1
    6042:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  ,--|-- beq.s 6076 <continueFunction+0xbac>
    6044:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     +--|--|--|-- bra.w 60ee <continueFunction+0xc24>
					case SLU_PLUS:
					addVariablesInSecond (&fun -> stack -> thisVar, &fun -> reg);
    6048:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  '-> moveq #28,d0
    604a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      add.l 80(sp),d0
    604e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      movea.l 80(sp),a0
    6052:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l 24(a0),d1
    6056:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d0,-(sp)
    6058:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d1,-(sp)
    605a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      jsr 145fe <addVariablesInSecond>
    6060:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      addq.l #8,sp
					trimStack (&fun -> stack);
    6062:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      moveq #24,d0
    6064:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      add.l 80(sp),d0
    6068:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d0,-(sp)
    606a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      jsr 1564c <trimStack>
    6070:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      addq.l #4,sp
					break;
    6072:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  ,--|--|--|----- bra.w 631c <continueFunction+0xe52>

					case SLU_EQUALS:
					compareVariablesInSecond (&(fun -> stack -> thisVar), &fun -> reg);
    6076:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '----> moveq #28,d0
    6078:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         add.l 80(sp),d0
    607c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         movea.l 80(sp),a0
    6080:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l 24(a0),d1
    6084:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d0,-(sp)
    6086:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d1,-(sp)
    6088:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         jsr 146bc <compareVariablesInSecond>
    608e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         addq.l #8,sp
					trimStack (&fun -> stack);
    6090:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         moveq #24,d0
    6092:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         add.l 80(sp),d0
    6096:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d0,-(sp)
    6098:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         jsr 1564c <trimStack>
    609e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         addq.l #4,sp
					break;
    60a0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|--|-------- bra.w 631c <continueFunction+0xe52>

					case SLU_NOT_EQ:
					compareVariablesInSecond (&(fun -> stack -> thisVar), &fun -> reg);
    60a4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '-------> moveq #28,d0
    60a6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            add.l 80(sp),d0
    60aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    60ae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 24(a0),d1
    60b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,-(sp)
    60b4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d1,-(sp)
    60b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            jsr 146bc <compareVariablesInSecond>
    60bc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            addq.l #8,sp
					trimStack (&fun -> stack);
    60be:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            moveq #24,d0
    60c0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            add.l 80(sp),d0
    60c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,-(sp)
    60c6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            jsr 1564c <trimStack>
    60cc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            addq.l #4,sp
	               	fun -> reg.varData.intValue = ! fun -> reg.varData.intValue;
    60ce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    60d2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 32(a0),d0
    60d6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            seq d0
    60d8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            neg.b d0
    60da:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.b d0,d0
    60dc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            andi.l #255,d0
    60e2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    60e6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,32(a0)
					break;
    60ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|----------- bra.w 631c <continueFunction+0xe52>

					default:
					if (! getValueType (&firstValue, SVT_INT, &fun->stack->thisVar)) return FALSE;
    60ee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '----------> movea.l 80(sp),a0
    60f2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l 24(a0),d0
    60f6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    60f8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               pea 1 <_start+0x1>
    60fc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 48(sp),a0
    6100:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l a0,-(sp)
    6102:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 14cc8 <getValueType>
    6108:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 12(sp),sp
    610c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               tst.w d0
    610e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           ,-- bne.s 6116 <continueFunction+0xc4c>
    6110:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   clr.w d0
    6112:	|  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|-----------|-- bra.w 6374 <continueFunction+0xeaa>
					if (! getValueType(&secondValue, SVT_INT,&fun -> reg)) return FALSE;
    6116:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           '-> moveq #28,d0
    6118:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 80(sp),d0
    611c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    611e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               pea 1 <_start+0x1>
    6122:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 44(sp),a0
    6126:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l a0,-(sp)
    6128:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 14cc8 <getValueType>
    612e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 12(sp),sp
    6132:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               tst.w d0
    6134:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           ,-- bne.s 613c <continueFunction+0xc72>
    6136:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   clr.w d0
    6138:	|  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|-----------|-- bra.w 6374 <continueFunction+0xeaa>
					trimStack (&fun -> stack);
    613c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           '-> moveq #24,d0
    613e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 80(sp),d0
    6142:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    6144:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 1564c <trimStack>
    614a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               addq.l #4,sp

					switch (com) {
    614c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               moveq #-9,d0
    614e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 64(sp),d0
    6152:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               moveq #23,d1
    6154:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               cmp.l d0,d1
    6156:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           ,-- bcs.w 631a <continueFunction+0xe50>
    615a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l d0,d0
    615c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   movea.l d0,a0
    615e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   adda.l #24938,a0
    6164:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.w (a0),d0
    6166:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jmp (616a <continueFunction+0xca0>,pc,d0.w)
    616a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   ori.w #48,-(a2)
    616e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x00ba
    6170:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    6178:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x0088
    617a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    6182:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    618a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(15466778,d0.w)
    6192:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(21365106,d0.w)
						case SLU_MULT:
						setVariable (&fun -> reg, SVT_INT, firstValue * secondValue);
    619a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    619e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    61a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    61a4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    61a6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 18134 <__mulsi3>
    61ac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    61ae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    61b0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    61b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    61b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    61b8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    61bc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    61be:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 155ba <setVariable>
    61c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    61c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 631c <continueFunction+0xe52>

						case SLU_MINUS:
						setVariable (&fun -> reg, SVT_INT, firstValue - secondValue);
    61cc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    61d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    61d4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sub.l d0,d1
    61d6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    61d8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    61dc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    61de:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    61e2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    61e4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 155ba <setVariable>
    61ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    61ee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 631c <continueFunction+0xe52>

						case SLU_MODULUS:
						setVariable (&fun -> reg, SVT_INT, firstValue % secondValue);
    61f2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    61f6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    61fa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    61fc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    61fe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 181e0 <__modsi3>
    6204:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    6206:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    6208:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    620a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    620e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    6210:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    6214:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    6216:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 155ba <setVariable>
    621c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    6220:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 631c <continueFunction+0xe52>

						case SLU_DIVIDE:
						setVariable (&fun -> reg, SVT_INT, firstValue / secondValue);
    6224:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    6228:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    622c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    622e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    6230:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 181b2 <__divsi3>
    6236:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    6238:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    623a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    623c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    6240:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    6242:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    6246:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    6248:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 155ba <setVariable>
    624e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    6252:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 631c <continueFunction+0xe52>

						case SLU_LESSTHAN:
						setVariable (&fun -> reg, SVT_INT, firstValue < secondValue);
    6256:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    625a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    625e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    6260:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sgt d0
    6262:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    6264:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    6266:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    6268:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    626a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    626e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    6270:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    6274:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    6276:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 155ba <setVariable>
    627c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    6280:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 631c <continueFunction+0xe52>

						case SLU_MORETHAN:
						setVariable (&fun -> reg, SVT_INT, firstValue > secondValue);
    6284:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    6288:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    628c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    628e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   slt d0
    6290:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    6292:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    6294:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    6296:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    6298:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    629c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    629e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    62a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    62a4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 155ba <setVariable>
    62aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    62ae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 631c <continueFunction+0xe52>

						case SLU_LESS_EQUAL:
						setVariable (&fun -> reg, SVT_INT, firstValue <= secondValue);
    62b0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    62b4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    62b8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    62ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sge d0
    62bc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    62be:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    62c0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    62c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    62c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    62c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    62ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    62ce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    62d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 155ba <setVariable>
    62d6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    62da:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 631c <continueFunction+0xe52>

						case SLU_MORE_EQUAL:
						setVariable (&fun -> reg, SVT_INT, firstValue >= secondValue);
    62dc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    62e0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    62e4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    62e6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sle d0
    62e8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    62ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    62ec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    62ee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    62f0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    62f4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    62f6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    62fa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    62fc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 155ba <setVariable>
    6302:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    6306:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 631c <continueFunction+0xe52>
						default:
						break;
					}
				}
			} else {
				KPrintF((ERROR_NOSTACK));
    6308:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  '--|-----------|-> pea 18e6b <PutChar+0xc21>
    630e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   jsr 177a8 <KPrintF>
    6314:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   addq.l #4,sp
				return FALSE;
    6316:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   clr.w d0
    6318:	|  +--|--|--|--|--|--|--|--|--|--|--|--|-----|-----------|-- bra.s 6374 <continueFunction+0xeaa>
						break;
    631a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           '-> nop
			}
			break;
    631c:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-----'-------------X bra.s 6352 <continueFunction+0xe88>

			default:
			KPrintF((ERROR_UNKNOWN_CODE));
    631e:	|  |  |  '--|--|--|--|--|--|--|--|--|--|-------------------> pea 18e83 <PutChar+0xc39>
    6324:	|  |  |     |  |  |  |  |  |  |  |  |  |                     jsr 177a8 <KPrintF>
    632a:	|  |  |     |  |  |  |  |  |  |  |  |  |                     addq.l #4,sp
			return FALSE;
    632c:	|  |  |     |  |  |  |  |  |  |  |  |  |                     clr.w d0
    632e:	|  +--|-----|--|--|--|--|--|--|--|--|--|-------------------- bra.s 6374 <continueFunction+0xeaa>
			break;
    6330:	|  |  |     |  '--|--|--|--|--|--|--|--|-------------------> nop
    6332:	|  |  |     +-----|--|--|--|--|--|--|--|-------------------- bra.s 6352 <continueFunction+0xe88>
			break;
    6334:	|  |  |     |     '--|--|--|--|--|--|--|-------------------> nop
    6336:	|  |  |     +--------|--|--|--|--|--|--|-------------------- bra.s 6352 <continueFunction+0xe88>
			break;
    6338:	|  |  |     |        '--|--|--|--|--|--|-------------------> nop
    633a:	|  |  |     +-----------|--|--|--|--|--|-------------------- bra.s 6352 <continueFunction+0xe88>
			break;
    633c:	|  |  |     |           '--|--|--|--|--|-------------------> nop
    633e:	|  |  |     +--------------|--|--|--|--|-------------------- bra.s 6352 <continueFunction+0xe88>
			break;
    6340:	|  |  |     |              '--|--|--|--|-------------------> nop
    6342:	|  |  |     +-----------------|--|--|--|-------------------- bra.s 6352 <continueFunction+0xe88>
			break;
    6344:	|  |  |     |                 '--|--|--|-------------------> nop
    6346:	|  |  |     +--------------------|--|--|-------------------- bra.s 6352 <continueFunction+0xe88>
			break;
    6348:	|  |  |     |                    '--|--|-------------------> nop
    634a:	|  |  |     +-----------------------|--|-------------------- bra.s 6352 <continueFunction+0xe88>
			break;
    634c:	|  |  |     |                       '--|-------------------> nop
    634e:	|  |  |     +--------------------------|-------------------- bra.s 6352 <continueFunction+0xe88>
			break;
    6350:	|  |  |     |                          '-------------------> nop
		}

		if (advanceNow) fun -> runThisLine ++;
    6352:	|  |  |     '----------------------------------------------> tst.w 72(sp)
    6356:	+--|--|----------------------------------------------------- beq.s 636a <continueFunction+0xea0>
    6358:	|  |  |                                                      movea.l 80(sp),a0
    635c:	|  |  |                                                      move.l 36(a0),d0
    6360:	|  |  |                                                      addq.l #1,d0
    6362:	|  |  |                                                      movea.l 80(sp),a0
    6366:	|  |  |                                                      move.l d0,36(a0)
	while (keepLooping) {
    636a:	'--|--|----------------------------------------------------> tst.w 74(sp)
    636e:	   |  '----------------------------------------------------- bne.w 54f2 <continueFunction+0x28>

	}
	return TRUE;
    6372:	   |                                                         moveq #1,d0
}
    6374:	   '-------------------------------------------------------> lea 76(sp),sp
    6378:	                                                             rts

0000637a <finishFunction>:

void finishFunction (struct loadedFunction * fun) {
	KPrintF("finishFunction %d started\n", &fun->originalNumber);
    637a:	    move.l 4(sp),d0
    637e:	    move.l d0,-(sp)
    6380:	    pea 18eaf <PutChar+0xc65>
    6386:	    jsr 177a8 <KPrintF>
    638c:	    addq.l #8,sp

	pauseFunction (fun);
    638e:	    move.l 4(sp),-(sp)
    6392:	    jsr 75fe <pauseFunction>
    6398:	    addq.l #4,sp

	//Keep function loaed in memory if it is the focus function
	if( fun != currentEvents -> focusFunction) {	
    639a:	    movea.l 1c924 <currentEvents>,a0
    63a0:	    move.l 20(a0),d0
    63a4:	    cmp.l 4(sp),d0
    63a8:	,-- beq.s 63b6 <finishFunction+0x3c>
		unloadFunction (fun);
    63aa:	|   move.l 4(sp),-(sp)
    63ae:	|   jsr 79f8 <unloadFunction>
    63b4:	|   addq.l #4,sp
	}	
}
    63b6:	'-> nop
    63b8:	    rts

000063ba <freezeSubs>:

void freezeSubs () {
    63ba:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    63bc:	          move.l 1cf4a <allRunningFunctions>,(sp)

	while (thisFunction) {
    63c2:	   ,----- bra.s 63e0 <freezeSubs+0x26>
		if (thisFunction -> unfreezable) {
    63c4:	,--|----> movea.l (sp),a0
    63c6:	|  |      move.w 52(a0),d0
    63ca:	|  |  ,-- bne.s 63da <freezeSubs+0x20>
			//msgBox ("SLUDGE debugging bollocks!", "Trying to freeze an unfreezable function!");
		} else {
			thisFunction -> freezerLevel ++;
    63cc:	|  |  |   movea.l (sp),a0
    63ce:	|  |  |   move.b 56(a0),d0
    63d2:	|  |  |   addq.b #1,d0
    63d4:	|  |  |   movea.l (sp),a0
    63d6:	|  |  |   move.b d0,56(a0)
		}
		thisFunction = thisFunction -> next;
    63da:	|  |  '-> movea.l (sp),a0
    63dc:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    63e0:	|  '----> tst.l (sp)
    63e2:	'-------- bne.s 63c4 <freezeSubs+0xa>
	}
}
    63e4:	          nop
    63e6:	          nop
    63e8:	          addq.l #4,sp
    63ea:	          rts

000063ec <handleInput>:

BOOL handleInput () {
    63ec:	             lea -16(sp),sp
    63f0:	             move.l a6,-(sp)
	//Amiga Todo: import more from orig code and adjust 

	if (! overRegion) getOverRegion ();
    63f2:	             move.l 1d0c6 <overRegion>,d0
    63f8:	         ,-- bne.s 6400 <handleInput+0x14>
    63fa:	         |   jsr 15f04 <getOverRegion>

	if (input.justMoved) {
    6400:	         '-> move.w 1cf68 <input+0x4>,d0
    6406:	         ,-- beq.s 6444 <handleInput+0x58>
		if (currentEvents -> moveMouseFunction) {
    6408:	         |   movea.l 1c924 <currentEvents>,a0
    640e:	         |   move.l 16(a0),d0
    6412:	         +-- beq.s 6444 <handleInput+0x58>
			if (! startNewFunctionNum (currentEvents -> moveMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    6414:	         |   move.l 1cf82 <noStack>,d1
    641a:	         |   movea.l 1c924 <currentEvents>,a0
    6420:	         |   move.l 16(a0),d0
    6424:	         |   pea 1 <_start+0x1>
    6428:	         |   move.l d1,-(sp)
    642a:	         |   clr.l -(sp)
    642c:	         |   clr.l -(sp)
    642e:	         |   move.l d0,-(sp)
    6430:	         |   jsr 79ac <startNewFunctionNum>
    6436:	         |   lea 20(sp),sp
    643a:	         |   tst.l d0
    643c:	         +-- bne.s 6444 <handleInput+0x58>
    643e:	         |   clr.w d0
    6440:	,--------|-- bra.w 664a <handleInput+0x25e>
		}
	}
	input.justMoved = FALSE;
    6444:	|        '-> clr.w 1cf68 <input+0x4>

	if (lastRegion != overRegion && currentEvents -> focusFunction) {
    644a:	|            move.l 1cf7a <lastRegion>,d1
    6450:	|            move.l 1d0c6 <overRegion>,d0
    6456:	|            cmp.l d1,d0
    6458:	|  ,-------- beq.w 6530 <handleInput+0x144>
    645c:	|  |         movea.l 1c924 <currentEvents>,a0
    6462:	|  |         move.l 20(a0),d0
    6466:	|  +-------- beq.w 6530 <handleInput+0x144>
		struct variableStack * tempStack = AllocVec( sizeof(struct variableStack), MEMF_ANY);
    646a:	|  |         moveq #12,d0
    646c:	|  |         move.l d0,16(sp)
    6470:	|  |         clr.l 12(sp)
    6474:	|  |         move.l 1cfb6 <SysBase>,d0
    647a:	|  |         movea.l d0,a6
    647c:	|  |         move.l 16(sp),d0
    6480:	|  |         move.l 12(sp),d1
    6484:	|  |         jsr -684(a6)
    6488:	|  |         move.l d0,8(sp)
    648c:	|  |         move.l 8(sp),d0
    6490:	|  |         move.l d0,4(sp)
		if(!tempStack) {
    6494:	|  |         move.l 4(sp),d0
    6498:	|  |     ,-- bne.s 64ae <handleInput+0xc2>
			KPrintF("handleInput: Cannot allocate memory for variablestack");
    649a:	|  |     |   pea 18eca <PutChar+0xc80>
    64a0:	|  |     |   jsr 177a8 <KPrintF>
    64a6:	|  |     |   addq.l #4,sp
			return FALSE;
    64a8:	|  |     |   clr.w d0
    64aa:	+--|-----|-- bra.w 664a <handleInput+0x25e>
		}
		
		initVarNew (tempStack -> thisVar);
    64ae:	|  |     '-> movea.l 4(sp),a0
    64b2:	|  |         clr.l (a0)
		if (overRegion) {
    64b4:	|  |         move.l 1d0c6 <overRegion>,d0
    64ba:	|  |  ,----- beq.s 64e2 <handleInput+0xf6>
			setVariable (&tempStack -> thisVar, SVT_OBJTYPE, overRegion -> thisType -> objectNum);
    64bc:	|  |  |      movea.l 1d0c6 <overRegion>,a0
    64c2:	|  |  |      movea.l 28(a0),a0
    64c6:	|  |  |      move.l 4(a0),d1
    64ca:	|  |  |      move.l 4(sp),d0
    64ce:	|  |  |      move.l d1,-(sp)
    64d0:	|  |  |      pea 7 <_start+0x7>
    64d4:	|  |  |      move.l d0,-(sp)
    64d6:	|  |  |      jsr 155ba <setVariable>
    64dc:	|  |  |      lea 12(sp),sp
    64e0:	|  |  |  ,-- bra.s 64f8 <handleInput+0x10c>
		} else {
			setVariable (&tempStack -> thisVar, SVT_INT, 0);
    64e2:	|  |  '--|-> move.l 4(sp),d0
    64e6:	|  |     |   clr.l -(sp)
    64e8:	|  |     |   pea 1 <_start+0x1>
    64ec:	|  |     |   move.l d0,-(sp)
    64ee:	|  |     |   jsr 155ba <setVariable>
    64f4:	|  |     |   lea 12(sp),sp
		}
		tempStack -> next = NULL;		
    64f8:	|  |     '-> movea.l 4(sp),a0
    64fc:	|  |         clr.l 8(a0)
		if (! startNewFunctionLoaded (currentEvents -> focusFunction, 1, NULL, &tempStack, TRUE)) return FALSE;
    6500:	|  |         movea.l 1c924 <currentEvents>,a0
    6506:	|  |         move.l 20(a0),d0
    650a:	|  |         pea 1 <_start+0x1>
    650e:	|  |         lea 8(sp),a0
    6512:	|  |         move.l a0,-(sp)
    6514:	|  |         clr.l -(sp)
    6516:	|  |         pea 1 <_start+0x1>
    651a:	|  |         move.l d0,-(sp)
    651c:	|  |         jsr 789c <startNewFunctionLoaded>
    6522:	|  |         lea 20(sp),sp
    6526:	|  |         tst.l d0
    6528:	|  +-------- bne.s 6530 <handleInput+0x144>
    652a:	|  |         clr.w d0
    652c:	+--|-------- bra.w 664a <handleInput+0x25e>
	}
	if (input.leftRelease && currentEvents -> leftMouseUpFunction)  {
    6530:	|  '-------> move.w 1cf6a <input+0x6>,d0
    6536:	|        ,-- beq.s 6574 <handleInput+0x188>
    6538:	|        |   movea.l 1c924 <currentEvents>,a0
    653e:	|        |   move.l 4(a0),d0
    6542:	|        +-- beq.s 6574 <handleInput+0x188>
		if (! startNewFunctionNum (currentEvents -> leftMouseUpFunction, 0, NULL, noStack, TRUE)) return FALSE;
    6544:	|        |   move.l 1cf82 <noStack>,d1
    654a:	|        |   movea.l 1c924 <currentEvents>,a0
    6550:	|        |   move.l 4(a0),d0
    6554:	|        |   pea 1 <_start+0x1>
    6558:	|        |   move.l d1,-(sp)
    655a:	|        |   clr.l -(sp)
    655c:	|        |   clr.l -(sp)
    655e:	|        |   move.l d0,-(sp)
    6560:	|        |   jsr 79ac <startNewFunctionNum>
    6566:	|        |   lea 20(sp),sp
    656a:	|        |   tst.l d0
    656c:	|        +-- bne.s 6574 <handleInput+0x188>
    656e:	|        |   clr.w d0
    6570:	+--------|-- bra.w 664a <handleInput+0x25e>
	}
	if (input.rightRelease && currentEvents -> rightMouseUpFunction) {
    6574:	|        '-> move.w 1cf6c <input+0x8>,d0
    657a:	|        ,-- beq.s 65b8 <handleInput+0x1cc>
    657c:	|        |   movea.l 1c924 <currentEvents>,a0
    6582:	|        |   move.l 12(a0),d0
    6586:	|        +-- beq.s 65b8 <handleInput+0x1cc>
		if (! startNewFunctionNum (currentEvents -> rightMouseUpFunction, 0, NULL, noStack, TRUE)) return FALSE;
    6588:	|        |   move.l 1cf82 <noStack>,d1
    658e:	|        |   movea.l 1c924 <currentEvents>,a0
    6594:	|        |   move.l 12(a0),d0
    6598:	|        |   pea 1 <_start+0x1>
    659c:	|        |   move.l d1,-(sp)
    659e:	|        |   clr.l -(sp)
    65a0:	|        |   clr.l -(sp)
    65a2:	|        |   move.l d0,-(sp)
    65a4:	|        |   jsr 79ac <startNewFunctionNum>
    65aa:	|        |   lea 20(sp),sp
    65ae:	|        |   tst.l d0
    65b0:	|        +-- bne.s 65b8 <handleInput+0x1cc>
    65b2:	|        |   clr.w d0
    65b4:	+--------|-- bra.w 664a <handleInput+0x25e>
	}
	if (input.leftClick && currentEvents -> leftMouseFunction)
    65b8:	|        '-> move.w 1cf64 <input>,d0
    65be:	|        ,-- beq.s 65f6 <handleInput+0x20a>
    65c0:	|        |   movea.l 1c924 <currentEvents>,a0
    65c6:	|        |   move.l (a0),d0
    65c8:	|        +-- beq.s 65f6 <handleInput+0x20a>
		if (! startNewFunctionNum (currentEvents -> leftMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    65ca:	|        |   move.l 1cf82 <noStack>,d1
    65d0:	|        |   movea.l 1c924 <currentEvents>,a0
    65d6:	|        |   move.l (a0),d0
    65d8:	|        |   pea 1 <_start+0x1>
    65dc:	|        |   move.l d1,-(sp)
    65de:	|        |   clr.l -(sp)
    65e0:	|        |   clr.l -(sp)
    65e2:	|        |   move.l d0,-(sp)
    65e4:	|        |   jsr 79ac <startNewFunctionNum>
    65ea:	|        |   lea 20(sp),sp
    65ee:	|        |   tst.l d0
    65f0:	|        +-- bne.s 65f6 <handleInput+0x20a>
    65f2:	|        |   clr.w d0
    65f4:	+--------|-- bra.s 664a <handleInput+0x25e>
	if (input.rightClick && currentEvents -> rightMouseFunction) {
    65f6:	|        '-> move.w 1cf66 <input+0x2>,d0
    65fc:	|        ,-- beq.s 6638 <handleInput+0x24c>
    65fe:	|        |   movea.l 1c924 <currentEvents>,a0
    6604:	|        |   move.l 8(a0),d0
    6608:	|        +-- beq.s 6638 <handleInput+0x24c>
		if (! startNewFunctionNum (currentEvents -> rightMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    660a:	|        |   move.l 1cf82 <noStack>,d1
    6610:	|        |   movea.l 1c924 <currentEvents>,a0
    6616:	|        |   move.l 8(a0),d0
    661a:	|        |   pea 1 <_start+0x1>
    661e:	|        |   move.l d1,-(sp)
    6620:	|        |   clr.l -(sp)
    6622:	|        |   clr.l -(sp)
    6624:	|        |   move.l d0,-(sp)
    6626:	|        |   jsr 79ac <startNewFunctionNum>
    662c:	|        |   lea 20(sp),sp
    6630:	|        |   tst.l d0
    6632:	|        +-- bne.s 6638 <handleInput+0x24c>
    6634:	|        |   clr.w d0
    6636:	+--------|-- bra.s 664a <handleInput+0x25e>
	}

	lastRegion = overRegion;
    6638:	|        '-> move.l 1d0c6 <overRegion>,d0
    663e:	|            move.l d0,1cf7a <lastRegion>
	return runSludge ();
    6644:	|            jsr 7670 <runSludge>
}
    664a:	'----------> movea.l (sp)+,a6
    664c:	             lea 16(sp),sp
    6650:	             rts

00006652 <initSludge>:

BOOL initSludge (char * filename) {
    6652:	             lea -292(sp),sp
    6656:	             movem.l d2-d4/a2/a6,-(sp)
	int a = 0;
    665a:	             clr.l 308(sp)
	mouseCursorAnim = makeNullAnim ();
    665e:	             jsr b1b2 <makeNullAnim>
    6664:	             move.l d0,1ceae <mouseCursorAnim>

	//Amiga: Attention. This was changed to a Nonpointer Type
	BPTR fp = openAndVerify (filename, 'G', 'E', ERROR_BAD_HEADER, &gameVersion);
    666a:	             pea 1cf5c <gameVersion>
    6670:	             pea 18f00 <PutChar+0xcb6>
    6676:	             pea 45 <_start+0x45>
    667a:	             pea 47 <_start+0x47>
    667e:	             move.l 332(sp),-(sp)
    6682:	             jsr 728e <openAndVerify>
    6688:	             lea 20(sp),sp
    668c:	             move.l d0,288(sp)
	if (! fp) return FALSE;
    6690:	         ,-- bne.s 6698 <initSludge+0x46>
    6692:	         |   clr.w d0
    6694:	,--------|-- bra.w 6dc0 <initSludge+0x76e>
	if (FGetC (fp)) {
    6698:	|        '-> move.l 288(sp),284(sp)
    669e:	|            move.l 1cfbe <DOSBase>,d0
    66a4:	|            movea.l d0,a6
    66a6:	|            move.l 284(sp),d1
    66aa:	|            jsr -306(a6)
    66ae:	|            move.l d0,280(sp)
    66b2:	|            move.l 280(sp),d0
    66b6:	|  ,-------- beq.w 6860 <initSludge+0x20e>
		numBIFNames = get2bytes (fp);
    66ba:	|  |         move.l 288(sp),-(sp)
    66be:	|  |         jsr 6bc <get2bytes>
    66c4:	|  |         addq.l #4,sp
    66c6:	|  |         move.l d0,1cf86 <numBIFNames>
		allBIFNames = AllocVec(numBIFNames,MEMF_ANY);
    66cc:	|  |         move.l 1cf86 <numBIFNames>,d0
    66d2:	|  |         move.l d0,276(sp)
    66d6:	|  |         clr.l 272(sp)
    66da:	|  |         move.l 1cfb6 <SysBase>,d0
    66e0:	|  |         movea.l d0,a6
    66e2:	|  |         move.l 276(sp),d0
    66e6:	|  |         move.l 272(sp),d1
    66ea:	|  |         jsr -684(a6)
    66ee:	|  |         move.l d0,268(sp)
    66f2:	|  |         move.l 268(sp),d0
    66f6:	|  |         move.l d0,1cf3a <allBIFNames>
		if(allBIFNames == 0) return FALSE;
    66fc:	|  |         move.l 1cf3a <allBIFNames>,d0
    6702:	|  |     ,-- bne.s 670a <initSludge+0xb8>
    6704:	|  |     |   clr.w d0
    6706:	+--|-----|-- bra.w 6dc0 <initSludge+0x76e>
		for (int fn = 0; fn < numBIFNames; fn ++) {
    670a:	|  |     '-> clr.l 304(sp)
    670e:	|  |     ,-- bra.s 6734 <initSludge+0xe2>
			allBIFNames[fn] = (char *) readString (fp);
    6710:	|  |  ,--|-> move.l 1cf3a <allBIFNames>,d1
    6716:	|  |  |  |   move.l 304(sp),d0
    671a:	|  |  |  |   add.l d0,d0
    671c:	|  |  |  |   add.l d0,d0
    671e:	|  |  |  |   movea.l d1,a2
    6720:	|  |  |  |   adda.l d0,a2
    6722:	|  |  |  |   move.l 288(sp),-(sp)
    6726:	|  |  |  |   jsr b02 <readString>
    672c:	|  |  |  |   addq.l #4,sp
    672e:	|  |  |  |   move.l d0,(a2)
		for (int fn = 0; fn < numBIFNames; fn ++) {
    6730:	|  |  |  |   addq.l #1,304(sp)
    6734:	|  |  |  '-> move.l 1cf86 <numBIFNames>,d0
    673a:	|  |  |      cmp.l 304(sp),d0
    673e:	|  |  '----- bgt.s 6710 <initSludge+0xbe>
		}
		numUserFunc = get2bytes (fp);
    6740:	|  |         move.l 288(sp),-(sp)
    6744:	|  |         jsr 6bc <get2bytes>
    674a:	|  |         addq.l #4,sp
    674c:	|  |         move.l d0,1cf96 <numUserFunc>
		allUserFunc = AllocVec(numUserFunc,MEMF_ANY);
    6752:	|  |         move.l 1cf96 <numUserFunc>,d0
    6758:	|  |         move.l d0,264(sp)
    675c:	|  |         clr.l 260(sp)
    6760:	|  |         move.l 1cfb6 <SysBase>,d0
    6766:	|  |         movea.l d0,a6
    6768:	|  |         move.l 264(sp),d0
    676c:	|  |         move.l 260(sp),d1
    6770:	|  |         jsr -684(a6)
    6774:	|  |         move.l d0,256(sp)
    6778:	|  |         move.l 256(sp),d0
    677c:	|  |         move.l d0,1cf4e <allUserFunc>
		if( allUserFunc == 0) return FALSE;
    6782:	|  |         move.l 1cf4e <allUserFunc>,d0
    6788:	|  |     ,-- bne.s 6790 <initSludge+0x13e>
    678a:	|  |     |   clr.w d0
    678c:	+--|-----|-- bra.w 6dc0 <initSludge+0x76e>

		for (int fn = 0; fn < numUserFunc; fn ++) {
    6790:	|  |     '-> clr.l 300(sp)
    6794:	|  |     ,-- bra.s 67ba <initSludge+0x168>
			allUserFunc[fn] =   (char *) readString (fp);
    6796:	|  |  ,--|-> move.l 1cf4e <allUserFunc>,d1
    679c:	|  |  |  |   move.l 300(sp),d0
    67a0:	|  |  |  |   add.l d0,d0
    67a2:	|  |  |  |   add.l d0,d0
    67a4:	|  |  |  |   movea.l d1,a2
    67a6:	|  |  |  |   adda.l d0,a2
    67a8:	|  |  |  |   move.l 288(sp),-(sp)
    67ac:	|  |  |  |   jsr b02 <readString>
    67b2:	|  |  |  |   addq.l #4,sp
    67b4:	|  |  |  |   move.l d0,(a2)
		for (int fn = 0; fn < numUserFunc; fn ++) {
    67b6:	|  |  |  |   addq.l #1,300(sp)
    67ba:	|  |  |  '-> move.l 1cf96 <numUserFunc>,d0
    67c0:	|  |  |      cmp.l 300(sp),d0
    67c4:	|  |  '----- bgt.s 6796 <initSludge+0x144>
		}
		if (gameVersion >= VERSION(1,3)) {
    67c6:	|  |         move.l 1cf5c <gameVersion>,d0
    67cc:	|  |         cmpi.l #258,d0
    67d2:	|  +-------- ble.w 6860 <initSludge+0x20e>
			numResourceNames = get2bytes (fp);
    67d6:	|  |         move.l 288(sp),-(sp)
    67da:	|  |         jsr 6bc <get2bytes>
    67e0:	|  |         addq.l #4,sp
    67e2:	|  |         move.l d0,1cf92 <numResourceNames>
			allResourceNames = AllocVec(sizeof(char *) * numResourceNames,MEMF_ANY);
    67e8:	|  |         move.l 1cf92 <numResourceNames>,d0
    67ee:	|  |         add.l d0,d0
    67f0:	|  |         add.l d0,d0
    67f2:	|  |         move.l d0,252(sp)
    67f6:	|  |         clr.l 248(sp)
    67fa:	|  |         move.l 1cfb6 <SysBase>,d0
    6800:	|  |         movea.l d0,a6
    6802:	|  |         move.l 252(sp),d0
    6806:	|  |         move.l 248(sp),d1
    680a:	|  |         jsr -684(a6)
    680e:	|  |         move.l d0,244(sp)
    6812:	|  |         move.l 244(sp),d0
    6816:	|  |         move.l d0,1cf46 <allResourceNames>
			if(allResourceNames == 0) return FALSE;
    681c:	|  |         move.l 1cf46 <allResourceNames>,d0
    6822:	|  |     ,-- bne.s 682a <initSludge+0x1d8>
    6824:	|  |     |   clr.w d0
    6826:	+--|-----|-- bra.w 6dc0 <initSludge+0x76e>

			for (int fn = 0; fn < numResourceNames; fn ++) {
    682a:	|  |     '-> clr.l 296(sp)
    682e:	|  |     ,-- bra.s 6854 <initSludge+0x202>
				allResourceNames[fn] =  (char *) readString (fp);
    6830:	|  |  ,--|-> move.l 1cf46 <allResourceNames>,d1
    6836:	|  |  |  |   move.l 296(sp),d0
    683a:	|  |  |  |   add.l d0,d0
    683c:	|  |  |  |   add.l d0,d0
    683e:	|  |  |  |   movea.l d1,a2
    6840:	|  |  |  |   adda.l d0,a2
    6842:	|  |  |  |   move.l 288(sp),-(sp)
    6846:	|  |  |  |   jsr b02 <readString>
    684c:	|  |  |  |   addq.l #4,sp
    684e:	|  |  |  |   move.l d0,(a2)
			for (int fn = 0; fn < numResourceNames; fn ++) {
    6850:	|  |  |  |   addq.l #1,296(sp)
    6854:	|  |  |  '-> move.l 1cf92 <numResourceNames>,d0
    685a:	|  |  |      cmp.l 296(sp),d0
    685e:	|  |  '----- bgt.s 6830 <initSludge+0x1de>
			}
		}
	}

	input.mouseX = 129;
    6860:	|  '-------> move.l #129,1cf6e <input+0xa>
	input.mouseY = 100;
    686a:	|            moveq #100,d0
    686c:	|            move.l d0,1cf72 <input+0xe>
	winWidth = get2bytes (fp);
    6872:	|            move.l 288(sp),-(sp)
    6876:	|            jsr 6bc <get2bytes>
    687c:	|            addq.l #4,sp
    687e:	|            move.l d0,1cefe <winWidth>
	winHeight = get2bytes (fp);
    6884:	|            move.l 288(sp),-(sp)
    6888:	|            jsr 6bc <get2bytes>
    688e:	|            addq.l #4,sp
    6890:	|            move.l d0,1cf02 <winHeight>
	specialSettings = FGetC (fp);
    6896:	|            move.l 288(sp),240(sp)
    689c:	|            move.l 1cfbe <DOSBase>,d0
    68a2:	|            movea.l d0,a6
    68a4:	|            move.l 240(sp),d1
    68a8:	|            jsr -306(a6)
    68ac:	|            move.l d0,236(sp)
    68b0:	|            move.l 236(sp),d0
    68b4:	|            move.l d0,1cf9a <specialSettings>

	desiredfps = 1000/FGetC (fp);
    68ba:	|            move.l 288(sp),232(sp)
    68c0:	|            move.l 1cfbe <DOSBase>,d0
    68c6:	|            movea.l d0,a6
    68c8:	|            move.l 232(sp),d1
    68cc:	|            jsr -306(a6)
    68d0:	|            move.l d0,228(sp)
    68d4:	|            move.l 228(sp),d0
    68d8:	|            move.l d0,-(sp)
    68da:	|            pea 3e8 <encodeFilename+0xea>
    68de:	|            jsr 181b2 <__divsi3>
    68e4:	|            addq.l #8,sp
    68e6:	|            move.l d0,1c936 <desiredfps>

	readString(fp); //Need to keep reading to stay on track. But the comented line below looks wrong.
    68ec:	|            move.l 288(sp),-(sp)
    68f0:	|            jsr b02 <readString>
    68f6:	|            addq.l #4,sp
	//FreeVec(readString (fp));

	ULONG blocks_read = FRead( fp, &fileTime, sizeof (FILETIME), 1 ); 
    68f8:	|            move.l 288(sp),224(sp)
    68fe:	|            move.l #118612,220(sp)
    6906:	|            moveq #8,d1
    6908:	|            move.l d1,216(sp)
    690c:	|            moveq #1,d0
    690e:	|            move.l d0,212(sp)
    6912:	|            move.l 1cfbe <DOSBase>,d0
    6918:	|            movea.l d0,a6
    691a:	|            move.l 224(sp),d1
    691e:	|            move.l 220(sp),d2
    6922:	|            move.l 216(sp),d3
    6926:	|            move.l 212(sp),d4
    692a:	|            jsr -324(a6)
    692e:	|            move.l d0,208(sp)
    6932:	|            move.l 208(sp),d0
    6936:	|            move.l d0,204(sp)
	if (blocks_read != 1) {
    693a:	|            moveq #1,d1
    693c:	|            cmp.l 204(sp),d1
    6940:	|        ,-- beq.s 6950 <initSludge+0x2fe>
		KPrintF("Reading error in initSludge.\n");
    6942:	|        |   pea 18f39 <PutChar+0xcef>
    6948:	|        |   jsr 177a8 <KPrintF>
    694e:	|        |   addq.l #4,sp
	}

	char * dataFol = (gameVersion >= VERSION(1,3)) ? readString(fp) : joinStrings ("", "");
    6950:	|        '-> move.l 1cf5c <gameVersion>,d0
    6956:	|            cmpi.l #258,d0
    695c:	|        ,-- ble.s 696c <initSludge+0x31a>
    695e:	|        |   move.l 288(sp),-(sp)
    6962:	|        |   jsr b02 <readString>
    6968:	|        |   addq.l #4,sp
    696a:	|     ,--|-- bra.s 6980 <initSludge+0x32e>
    696c:	|     |  '-> pea 18f57 <PutChar+0xd0d>
    6972:	|     |      pea 18f57 <PutChar+0xd0d>
    6978:	|     |      jsr 141f4 <joinStrings>
    697e:	|     |      addq.l #8,sp
    6980:	|     '----> move.l d0,200(sp)

	gameSettings.numLanguages = (gameVersion >= VERSION(1,3)) ? (FGetC (fp)) : 0;
    6984:	|            move.l 1cf5c <gameVersion>,d0
    698a:	|            cmpi.l #258,d0
    6990:	|     ,----- ble.s 69b2 <initSludge+0x360>
    6992:	|     |      move.l 288(sp),196(sp)
    6998:	|     |      move.l 1cfbe <DOSBase>,d0
    699e:	|     |      movea.l d0,a6
    69a0:	|     |      move.l 196(sp),d1
    69a4:	|     |      jsr -306(a6)
    69a8:	|     |      move.l d0,192(sp)
    69ac:	|     |      move.l 192(sp),d0
    69b0:	|     |  ,-- bra.s 69b4 <initSludge+0x362>
    69b2:	|     '--|-> moveq #0,d0
    69b4:	|        '-> move.l d0,1d092 <gameSettings+0x4>
	makeLanguageTable (fp);
    69ba:	|            move.l 288(sp),-(sp)
    69be:	|            jsr 13baa <makeLanguageTable>
    69c4:	|            addq.l #4,sp

	if (gameVersion >= VERSION(1,6))
    69c6:	|            move.l 1cf5c <gameVersion>,d0
    69cc:	|            cmpi.l #261,d0
    69d2:	|        ,-- ble.s 6a20 <initSludge+0x3ce>
	{
		FGetC(fp);
    69d4:	|        |   move.l 288(sp),188(sp)
    69da:	|        |   move.l 1cfbe <DOSBase>,d0
    69e0:	|        |   movea.l d0,a6
    69e2:	|        |   move.l 188(sp),d1
    69e6:	|        |   jsr -306(a6)
    69ea:	|        |   move.l d0,184(sp)
		// aaLoad
		FGetC (fp);
    69ee:	|        |   move.l 288(sp),180(sp)
    69f4:	|        |   move.l 1cfbe <DOSBase>,d0
    69fa:	|        |   movea.l d0,a6
    69fc:	|        |   move.l 180(sp),d1
    6a00:	|        |   jsr -306(a6)
    6a04:	|        |   move.l d0,176(sp)
		getFloat (fp);
    6a08:	|        |   move.l 288(sp),-(sp)
    6a0c:	|        |   jsr 7d8 <getFloat>
    6a12:	|        |   addq.l #4,sp
		getFloat (fp);
    6a14:	|        |   move.l 288(sp),-(sp)
    6a18:	|        |   jsr 7d8 <getFloat>
    6a1e:	|        |   addq.l #4,sp
	}

	char * checker = readString (fp);
    6a20:	|        '-> move.l 288(sp),-(sp)
    6a24:	|            jsr b02 <readString>
    6a2a:	|            addq.l #4,sp
    6a2c:	|            move.l d0,172(sp)

	if (strcmp (checker, "okSoFar")) {
    6a30:	|            pea 18f58 <PutChar+0xd0e>
    6a36:	|            move.l 176(sp),-(sp)
    6a3a:	|            jsr 14174 <strcmp>
    6a40:	|            addq.l #8,sp
    6a42:	|            tst.l d0
    6a44:	|        ,-- beq.s 6a4c <initSludge+0x3fa>
		return FALSE;
    6a46:	|        |   clr.w d0
    6a48:	+--------|-- bra.w 6dc0 <initSludge+0x76e>
	}
	FreeVec( checker);
    6a4c:	|        '-> move.l 172(sp),168(sp)
    6a52:	|            move.l 1cfb6 <SysBase>,d0
    6a58:	|            movea.l d0,a6
    6a5a:	|            movea.l 168(sp),a1
    6a5e:	|            jsr -690(a6)
	checker = NULL;
    6a62:	|            clr.l 172(sp)

    unsigned char customIconLogo = FGetC (fp);
    6a66:	|            move.l 288(sp),164(sp)
    6a6c:	|            move.l 1cfbe <DOSBase>,d0
    6a72:	|            movea.l d0,a6
    6a74:	|            move.l 164(sp),d1
    6a78:	|            jsr -306(a6)
    6a7c:	|            move.l d0,160(sp)
    6a80:	|            move.l 160(sp),d0
    6a84:	|            move.b d0,159(sp)

	if (customIconLogo & 1) {
    6a88:	|            moveq #0,d0
    6a8a:	|            move.b 159(sp),d0
    6a8e:	|            moveq #1,d1
    6a90:	|            and.l d1,d0
    6a92:	|        ,-- beq.s 6aea <initSludge+0x498>
		// There is an icon - read it!
		Write(Output(), (APTR)"initsludge:Game Icon not supported on this plattform.\n", 54);
    6a94:	|        |   move.l 1cfbe <DOSBase>,d0
    6a9a:	|        |   movea.l d0,a6
    6a9c:	|        |   jsr -60(a6)
    6aa0:	|        |   move.l d0,38(sp)
    6aa4:	|        |   move.l 38(sp),d0
    6aa8:	|        |   move.l d0,34(sp)
    6aac:	|        |   move.l #102240,30(sp)
    6ab4:	|        |   moveq #54,d0
    6ab6:	|        |   move.l d0,26(sp)
    6aba:	|        |   move.l 1cfbe <DOSBase>,d0
    6ac0:	|        |   movea.l d0,a6
    6ac2:	|        |   move.l 34(sp),d1
    6ac6:	|        |   move.l 30(sp),d2
    6aca:	|        |   move.l 26(sp),d3
    6ace:	|        |   jsr -48(a6)
    6ad2:	|        |   move.l d0,22(sp)
		KPrintF("initsludge: Game Icon not supported on this plattform.\n");
    6ad6:	|        |   pea 18f97 <PutChar+0xd4d>
    6adc:	|        |   jsr 177a8 <KPrintF>
    6ae2:	|        |   addq.l #4,sp
		return FALSE;
    6ae4:	|        |   clr.w d0
    6ae6:	+--------|-- bra.w 6dc0 <initSludge+0x76e>
	}

	numGlobals = get2bytes (fp);
    6aea:	|        '-> move.l 288(sp),-(sp)
    6aee:	|            jsr 6bc <get2bytes>
    6af4:	|            addq.l #4,sp
    6af6:	|            move.l d0,1cf8e <numGlobals>

	globalVars = AllocVec( sizeof(struct variable) * numGlobals,MEMF_ANY);
    6afc:	|            move.l 1cf8e <numGlobals>,d0
    6b02:	|            lsl.l #3,d0
    6b04:	|            move.l d0,154(sp)
    6b08:	|            clr.l 150(sp)
    6b0c:	|            move.l 1cfb6 <SysBase>,d0
    6b12:	|            movea.l d0,a6
    6b14:	|            move.l 154(sp),d0
    6b18:	|            move.l 150(sp),d1
    6b1c:	|            jsr -684(a6)
    6b20:	|            move.l d0,146(sp)
    6b24:	|            move.l 146(sp),d0
    6b28:	|            move.l d0,1cf60 <globalVars>
	if(globalVars == 0 && numGlobals > 0) {
    6b2e:	|            move.l 1cf60 <globalVars>,d0
    6b34:	|        ,-- bne.s 6b52 <initSludge+0x500>
    6b36:	|        |   move.l 1cf8e <numGlobals>,d0
    6b3c:	|        +-- ble.s 6b52 <initSludge+0x500>
		KPrintF("initsludge: Cannot allocate memory for globalvars\n");
    6b3e:	|        |   pea 18fcf <PutChar+0xd85>
    6b44:	|        |   jsr 177a8 <KPrintF>
    6b4a:	|        |   addq.l #4,sp
		return FALSE;
    6b4c:	|        |   clr.w d0
    6b4e:	+--------|-- bra.w 6dc0 <initSludge+0x76e>
	}		 
	for (a = 0; a < numGlobals; a ++) initVarNew (globalVars[a]);
    6b52:	|        '-> clr.l 308(sp)
    6b56:	|        ,-- bra.s 6b6e <initSludge+0x51c>
    6b58:	|     ,--|-> move.l 1cf60 <globalVars>,d1
    6b5e:	|     |  |   move.l 308(sp),d0
    6b62:	|     |  |   lsl.l #3,d0
    6b64:	|     |  |   movea.l d1,a0
    6b66:	|     |  |   adda.l d0,a0
    6b68:	|     |  |   clr.l (a0)
    6b6a:	|     |  |   addq.l #1,308(sp)
    6b6e:	|     |  '-> move.l 1cf8e <numGlobals>,d0
    6b74:	|     |      cmp.l 308(sp),d0
    6b78:	|     '----- bgt.s 6b58 <initSludge+0x506>

	setFileIndices (fp, gameSettings.numLanguages, 0);
    6b7a:	|            move.l 1d092 <gameSettings+0x4>,d0
    6b80:	|            clr.l -(sp)
    6b82:	|            move.l d0,-(sp)
    6b84:	|            move.l 296(sp),-(sp)
    6b88:	|            jsr 7e24 <setFileIndices>
    6b8e:	|            lea 12(sp),sp

	char * gameNameOrig = getNumberedString(1);	
    6b92:	|            pea 1 <_start+0x1>
    6b96:	|            jsr 7ade <getNumberedString>
    6b9c:	|            addq.l #4,sp
    6b9e:	|            move.l d0,142(sp)
	char * gameName = encodeFilename (gameNameOrig);
    6ba2:	|            move.l 142(sp),-(sp)
    6ba6:	|            jsr 2fe <encodeFilename>
    6bac:	|            addq.l #4,sp
    6bae:	|            move.l d0,138(sp)

	FreeVec(gameNameOrig);
    6bb2:	|            move.l 142(sp),134(sp)
    6bb8:	|            move.l 1cfb6 <SysBase>,d0
    6bbe:	|            movea.l d0,a6
    6bc0:	|            movea.l 134(sp),a1
    6bc4:	|            jsr -690(a6)

	BPTR lock = CreateDir( gameName );
    6bc8:	|            move.l 138(sp),130(sp)
    6bce:	|            move.l 1cfbe <DOSBase>,d0
    6bd4:	|            movea.l d0,a6
    6bd6:	|            move.l 130(sp),d1
    6bda:	|            jsr -120(a6)
    6bde:	|            move.l d0,126(sp)
    6be2:	|            move.l 126(sp),d0
    6be6:	|            move.l d0,292(sp)
	if(lock == 0) {
    6bea:	|        ,-- bne.s 6c18 <initSludge+0x5c6>
		//Directory does already exist
		lock = Lock(gameName, ACCESS_READ);
    6bec:	|        |   move.l 138(sp),122(sp)
    6bf2:	|        |   moveq #-2,d1
    6bf4:	|        |   move.l d1,118(sp)
    6bf8:	|        |   move.l 1cfbe <DOSBase>,d0
    6bfe:	|        |   movea.l d0,a6
    6c00:	|        |   move.l 122(sp),d1
    6c04:	|        |   move.l 118(sp),d2
    6c08:	|        |   jsr -84(a6)
    6c0c:	|        |   move.l d0,114(sp)
    6c10:	|        |   move.l 114(sp),d0
    6c14:	|        |   move.l d0,292(sp)
	}

	if (!CurrentDir(lock)) {
    6c18:	|        '-> move.l 292(sp),110(sp)
    6c1e:	|            move.l 1cfbe <DOSBase>,d0
    6c24:	|            movea.l d0,a6
    6c26:	|            move.l 110(sp),d1
    6c2a:	|            jsr -126(a6)
    6c2e:	|            move.l d0,106(sp)
    6c32:	|            move.l 106(sp),d0
    6c36:	|        ,-- bne.s 6c92 <initSludge+0x640>
		KPrintF("initsludge: Failed changing to directory %s\n", gameName);
    6c38:	|        |   move.l 138(sp),-(sp)
    6c3c:	|        |   pea 19002 <PutChar+0xdb8>
    6c42:	|        |   jsr 177a8 <KPrintF>
    6c48:	|        |   addq.l #8,sp
		Write(Output(), (APTR)"initsludge:Failed changing to directory\n", 40);
    6c4a:	|        |   move.l 1cfbe <DOSBase>,d0
    6c50:	|        |   movea.l d0,a6
    6c52:	|        |   jsr -60(a6)
    6c56:	|        |   move.l d0,58(sp)
    6c5a:	|        |   move.l 58(sp),d0
    6c5e:	|        |   move.l d0,54(sp)
    6c62:	|        |   move.l #102447,50(sp)
    6c6a:	|        |   moveq #40,d0
    6c6c:	|        |   move.l d0,46(sp)
    6c70:	|        |   move.l 1cfbe <DOSBase>,d0
    6c76:	|        |   movea.l d0,a6
    6c78:	|        |   move.l 54(sp),d1
    6c7c:	|        |   move.l 50(sp),d2
    6c80:	|        |   move.l 46(sp),d3
    6c84:	|        |   jsr -48(a6)
    6c88:	|        |   move.l d0,42(sp)
		return FALSE;
    6c8c:	|        |   clr.w d0
    6c8e:	+--------|-- bra.w 6dc0 <initSludge+0x76e>
	}

	FreeVec(gameName);
    6c92:	|        '-> move.l 138(sp),102(sp)
    6c98:	|            move.l 1cfb6 <SysBase>,d0
    6c9e:	|            movea.l d0,a6
    6ca0:	|            movea.l 102(sp),a1
    6ca4:	|            jsr -690(a6)

	readIniFile (filename);
    6ca8:	|            move.l 316(sp),-(sp)
    6cac:	|            jsr 13cde <readIniFile>
    6cb2:	|            addq.l #4,sp

	// Now set file indices properly to the chosen language.
	languageNum = getLanguageForFileB ();
    6cb4:	|            jsr 13ab0 <getLanguageForFileB>
    6cba:	|            move.l d0,1c928 <languageNum>
	if (languageNum < 0) KPrintF("Can't find the translation data specified!");
    6cc0:	|            move.l 1c928 <languageNum>,d0
    6cc6:	|        ,-- bpl.s 6cd6 <initSludge+0x684>
    6cc8:	|        |   pea 19058 <PutChar+0xe0e>
    6cce:	|        |   jsr 177a8 <KPrintF>
    6cd4:	|        |   addq.l #4,sp
	setFileIndices (NULL, gameSettings.numLanguages, languageNum);
    6cd6:	|        '-> move.l 1c928 <languageNum>,d0
    6cdc:	|            move.l d0,d1
    6cde:	|            move.l 1d092 <gameSettings+0x4>,d0
    6ce4:	|            move.l d1,-(sp)
    6ce6:	|            move.l d0,-(sp)
    6ce8:	|            clr.l -(sp)
    6cea:	|            jsr 7e24 <setFileIndices>
    6cf0:	|            lea 12(sp),sp

	if (dataFol[0]) {
    6cf4:	|            movea.l 200(sp),a0
    6cf8:	|            move.b (a0),d0
    6cfa:	|     ,----- beq.w 6da4 <initSludge+0x752>
		char *dataFolder = encodeFilename(dataFol);
    6cfe:	|     |      move.l 200(sp),-(sp)
    6d02:	|     |      jsr 2fe <encodeFilename>
    6d08:	|     |      addq.l #4,sp
    6d0a:	|     |      move.l d0,98(sp)
		lock = CreateDir( dataFolder );
    6d0e:	|     |      move.l 98(sp),94(sp)
    6d14:	|     |      move.l 1cfbe <DOSBase>,d0
    6d1a:	|     |      movea.l d0,a6
    6d1c:	|     |      move.l 94(sp),d1
    6d20:	|     |      jsr -120(a6)
    6d24:	|     |      move.l d0,90(sp)
    6d28:	|     |      move.l 90(sp),d0
    6d2c:	|     |      move.l d0,292(sp)
		if(lock == 0) {
    6d30:	|     |  ,-- bne.s 6d5e <initSludge+0x70c>
			//Directory does already exist
			lock = Lock(dataFolder, ACCESS_READ);		
    6d32:	|     |  |   move.l 98(sp),86(sp)
    6d38:	|     |  |   moveq #-2,d1
    6d3a:	|     |  |   move.l d1,82(sp)
    6d3e:	|     |  |   move.l 1cfbe <DOSBase>,d0
    6d44:	|     |  |   movea.l d0,a6
    6d46:	|     |  |   move.l 86(sp),d1
    6d4a:	|     |  |   move.l 82(sp),d2
    6d4e:	|     |  |   jsr -84(a6)
    6d52:	|     |  |   move.l d0,78(sp)
    6d56:	|     |  |   move.l 78(sp),d0
    6d5a:	|     |  |   move.l d0,292(sp)
		}


		if (!CurrentDir(lock)) {
    6d5e:	|     |  '-> move.l 292(sp),74(sp)
    6d64:	|     |      move.l 1cfbe <DOSBase>,d0
    6d6a:	|     |      movea.l d0,a6
    6d6c:	|     |      move.l 74(sp),d1
    6d70:	|     |      jsr -126(a6)
    6d74:	|     |      move.l d0,70(sp)
    6d78:	|     |      move.l 70(sp),d0
    6d7c:	|     |  ,-- bne.s 6d8e <initSludge+0x73c>
			(Output(), (APTR)"initsludge:This game's data folder is inaccessible!\n", 52);
    6d7e:	|     |  |   move.l 1cfbe <DOSBase>,d0
    6d84:	|     |  |   movea.l d0,a6
    6d86:	|     |  |   jsr -60(a6)
    6d8a:	|     |  |   move.l d0,66(sp)
		}
		FreeVec(dataFolder);
    6d8e:	|     |  '-> move.l 98(sp),62(sp)
    6d94:	|     |      move.l 1cfb6 <SysBase>,d0
    6d9a:	|     |      movea.l d0,a6
    6d9c:	|     |      movea.l 62(sp),a1
    6da0:	|     |      jsr -690(a6)
	}

 	positionStatus (10, winHeight - 15);
    6da4:	|     '----> movea.l 1cf02 <winHeight>,a0
    6daa:	|            lea -15(a0),a0
    6dae:	|            move.l a0,d0
    6db0:	|            move.l d0,-(sp)
    6db2:	|            pea a <_start+0xa>
    6db6:	|            jsr 886a <positionStatus>
    6dbc:	|            addq.l #8,sp

	return TRUE;
    6dbe:	|            moveq #1,d0
}
    6dc0:	'----------> movem.l (sp)+,d2-d4/a2/a6
    6dc4:	             lea 292(sp),sp
    6dc8:	             rts

00006dca <killSpeechTimers>:

void killSpeechTimers () {
    6dca:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    6dcc:	          move.l 1cf4a <allRunningFunctions>,(sp)

	while (thisFunction) {
    6dd2:	   ,----- bra.s 6dfe <killSpeechTimers+0x34>
		if (thisFunction -> freezerLevel == 0 && thisFunction -> isSpeech && thisFunction -> timeLeft) {
    6dd4:	,--|----> movea.l (sp),a0
    6dd6:	|  |      move.b 56(a0),d0
    6dda:	|  |  ,-- bne.s 6df8 <killSpeechTimers+0x2e>
    6ddc:	|  |  |   movea.l (sp),a0
    6dde:	|  |  |   move.w 50(a0),d0
    6de2:	|  |  +-- beq.s 6df8 <killSpeechTimers+0x2e>
    6de4:	|  |  |   movea.l (sp),a0
    6de6:	|  |  |   move.l 12(a0),d0
    6dea:	|  |  +-- beq.s 6df8 <killSpeechTimers+0x2e>
			thisFunction -> timeLeft = 0;
    6dec:	|  |  |   movea.l (sp),a0
    6dee:	|  |  |   clr.l 12(a0)
			thisFunction -> isSpeech = FALSE;
    6df2:	|  |  |   movea.l (sp),a0
    6df4:	|  |  |   clr.w 50(a0)
		}
		thisFunction = thisFunction -> next;
    6df8:	|  |  '-> movea.l (sp),a0
    6dfa:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    6dfe:	|  '----> tst.l (sp)
    6e00:	'-------- bne.s 6dd4 <killSpeechTimers+0xa>
	}

	killAllSpeech ();
    6e02:	          jsr 42e8 <killAllSpeech>
}
    6e08:	          nop
    6e0a:	          addq.l #4,sp
    6e0c:	          rts

00006e0e <loadFunctionCode>:

struct loadedFunction *loadFunctionCode (unsigned int originalNumber) {
    6e0e:	                      lea -100(sp),sp
    6e12:	                      move.l a6,-(sp)
	unsigned int numLines, numLinesRead;
	int a;

	struct loadedFunction * newFunc = AllocVec(sizeof(struct loadedFunction),MEMF_ANY);
    6e14:	                      moveq #62,d0
    6e16:	                      move.l d0,88(sp)
    6e1a:	                      clr.l 84(sp)
    6e1e:	                      move.l 1cfb6 <SysBase>,d0
    6e24:	                      movea.l d0,a6
    6e26:	                      move.l 88(sp),d0
    6e2a:	                      move.l 84(sp),d1
    6e2e:	                      jsr -684(a6)
    6e32:	                      move.l d0,80(sp)
    6e36:	                      move.l 80(sp),d0
    6e3a:	                      move.l d0,76(sp)
	newFunc -> unloaded = 0;
    6e3e:	                      movea.l 76(sp),a0
    6e42:	                      clr.l 58(a0)
	if(!newFunc) {
    6e46:	                      tst.l 76(sp)
    6e4a:	                  ,-- bne.s 6e60 <loadFunctionCode+0x52>
		KPrintF("startNewFunction: Cannot allocate memory");
    6e4c:	                  |   pea 19083 <PutChar+0xe39>
    6e52:	                  |   jsr 177a8 <KPrintF>
    6e58:	                  |   addq.l #4,sp
		return 0;
    6e5a:	                  |   moveq #0,d0
    6e5c:	,-----------------|-- bra.w 71e6 <loadFunctionCode+0x3d8>
	}

	newFunc -> originalNumber = originalNumber;
    6e60:	|                 '-> move.l 108(sp),d0
    6e64:	|                     movea.l 76(sp),a0
    6e68:	|                     move.l d0,(a0)

	if (! openSubSlice (originalNumber)) return FALSE;
    6e6a:	|                     move.l 108(sp),d0
    6e6e:	|                     move.l d0,-(sp)
    6e70:	|                     jsr 7d64 <openSubSlice>
    6e76:	|                     addq.l #4,sp
    6e78:	|                     tst.w d0
    6e7a:	|                 ,-- bne.s 6e82 <loadFunctionCode+0x74>
    6e7c:	|                 |   moveq #0,d0
    6e7e:	+-----------------|-- bra.w 71e6 <loadFunctionCode+0x3d8>
	

	newFunc-> unfreezable	= FGetC (bigDataFile);
    6e82:	|                 '-> move.l 1cf9e <bigDataFile>,72(sp)
    6e8a:	|                     move.l 1cfbe <DOSBase>,d0
    6e90:	|                     movea.l d0,a6
    6e92:	|                     move.l 72(sp),d1
    6e96:	|                     jsr -306(a6)
    6e9a:	|                     move.l d0,68(sp)
    6e9e:	|                     move.l 68(sp),d0
    6ea2:	|                     move.l d0,d0
    6ea4:	|                     movea.l 76(sp),a0
    6ea8:	|                     move.w d0,52(a0)
	numLines				= get2bytes (bigDataFile);
    6eac:	|                     move.l 1cf9e <bigDataFile>,d0
    6eb2:	|                     move.l d0,-(sp)
    6eb4:	|                     jsr 6bc <get2bytes>
    6eba:	|                     addq.l #4,sp
    6ebc:	|                     move.l d0,64(sp)
	newFunc -> numArgs		= get2bytes (bigDataFile);
    6ec0:	|                     move.l 1cf9e <bigDataFile>,d0
    6ec6:	|                     move.l d0,-(sp)
    6ec8:	|                     jsr 6bc <get2bytes>
    6ece:	|                     addq.l #4,sp
    6ed0:	|                     movea.l 76(sp),a0
    6ed4:	|                     move.l d0,16(a0)
	newFunc -> numLocals	= get2bytes (bigDataFile);	
    6ed8:	|                     move.l 1cf9e <bigDataFile>,d0
    6ede:	|                     move.l d0,-(sp)
    6ee0:	|                     jsr 6bc <get2bytes>
    6ee6:	|                     addq.l #4,sp
    6ee8:	|                     movea.l 76(sp),a0
    6eec:	|                     move.l d0,8(a0)

	newFunc -> compiledLines = AllocVec( sizeof(struct lineOfCode) * numLines,MEMF_ANY);
    6ef0:	|                     move.l 64(sp),d0
    6ef4:	|                     lsl.l #3,d0
    6ef6:	|                     move.l d0,60(sp)
    6efa:	|                     clr.l 56(sp)
    6efe:	|                     move.l 1cfb6 <SysBase>,d0
    6f04:	|                     movea.l d0,a6
    6f06:	|                     move.l 60(sp),d0
    6f0a:	|                     move.l 56(sp),d1
    6f0e:	|                     jsr -684(a6)
    6f12:	|                     move.l d0,52(sp)
    6f16:	|                     move.l 52(sp),d0
    6f1a:	|                     movea.l 76(sp),a0
    6f1e:	|                     move.l d0,4(a0)
	if (! newFunc -> compiledLines) {
    6f22:	|                     movea.l 76(sp),a0
    6f26:	|                     move.l 4(a0),d0
    6f2a:	|                 ,-- bne.s 6f40 <loadFunctionCode+0x132>
		KPrintF("loadFunctionCode: cannot allocate memory");
    6f2c:	|                 |   pea 190ac <PutChar+0xe62>
    6f32:	|                 |   jsr 177a8 <KPrintF>
    6f38:	|                 |   addq.l #4,sp
		return FALSE;
    6f3a:	|                 |   moveq #0,d0
    6f3c:	+-----------------|-- bra.w 71e6 <loadFunctionCode+0x3d8>
	}

	for (numLinesRead = 0; numLinesRead < numLines; numLinesRead ++) {
    6f40:	|                 '-> clr.l 100(sp)
    6f44:	|                 ,-- bra.s 6fa6 <loadFunctionCode+0x198>
		newFunc -> compiledLines[numLinesRead].theCommand = (enum sludgeCommand) FGetC(bigDataFile);
    6f46:	|              ,--|-> move.l 1cf9e <bigDataFile>,8(sp)
    6f4e:	|              |  |   move.l 1cfbe <DOSBase>,d0
    6f54:	|              |  |   movea.l d0,a6
    6f56:	|              |  |   move.l 8(sp),d1
    6f5a:	|              |  |   jsr -306(a6)
    6f5e:	|              |  |   move.l d0,4(sp)
    6f62:	|              |  |   move.l 4(sp),d1
    6f66:	|              |  |   movea.l 76(sp),a0
    6f6a:	|              |  |   movea.l 4(a0),a0
    6f6e:	|              |  |   move.l 100(sp),d0
    6f72:	|              |  |   lsl.l #3,d0
    6f74:	|              |  |   adda.l d0,a0
    6f76:	|              |  |   move.l d1,d0
    6f78:	|              |  |   move.l d0,(a0)
		newFunc -> compiledLines[numLinesRead].param = get2bytes (bigDataFile);
    6f7a:	|              |  |   move.l 1cf9e <bigDataFile>,d0
    6f80:	|              |  |   move.l d0,-(sp)
    6f82:	|              |  |   jsr 6bc <get2bytes>
    6f88:	|              |  |   addq.l #4,sp
    6f8a:	|              |  |   move.l d0,d1
    6f8c:	|              |  |   movea.l 76(sp),a0
    6f90:	|              |  |   movea.l 4(a0),a0
    6f94:	|              |  |   move.l 100(sp),d0
    6f98:	|              |  |   lsl.l #3,d0
    6f9a:	|              |  |   adda.l d0,a0
    6f9c:	|              |  |   move.l d1,d0
    6f9e:	|              |  |   move.l d0,4(a0)
	for (numLinesRead = 0; numLinesRead < numLines; numLinesRead ++) {
    6fa2:	|              |  |   addq.l #1,100(sp)
    6fa6:	|              |  '-> move.l 100(sp),d1
    6faa:	|              |      cmp.l 64(sp),d1
    6fae:	|              '----- bcs.s 6f46 <loadFunctionCode+0x138>
	}

	finishAccess ();
    6fb0:	|                     jsr 7ad4 <finishAccess>

	// Now we need to reserve memory for the local variables
	if(newFunc->numLocals > 0) {
    6fb6:	|                     movea.l 76(sp),a0
    6fba:	|                     move.l 8(a0),d0
    6fbe:	|           ,-------- ble.w 7044 <loadFunctionCode+0x236>
		newFunc -> localVars = AllocVec( sizeof(struct variable) * newFunc->numLocals,MEMF_ANY);
    6fc2:	|           |         movea.l 76(sp),a0
    6fc6:	|           |         move.l 8(a0),d0
    6fca:	|           |         lsl.l #3,d0
    6fcc:	|           |         move.l d0,48(sp)
    6fd0:	|           |         clr.l 44(sp)
    6fd4:	|           |         move.l 1cfb6 <SysBase>,d0
    6fda:	|           |         movea.l d0,a6
    6fdc:	|           |         move.l 48(sp),d0
    6fe0:	|           |         move.l 44(sp),d1
    6fe4:	|           |         jsr -684(a6)
    6fe8:	|           |         move.l d0,40(sp)
    6fec:	|           |         move.l 40(sp),d0
    6ff0:	|           |         movea.l 76(sp),a0
    6ff4:	|           |         move.l d0,20(a0)
		if (!newFunc -> localVars) {
    6ff8:	|           |         movea.l 76(sp),a0
    6ffc:	|           |         move.l 20(a0),d0
    7000:	|           |     ,-- bne.s 7016 <loadFunctionCode+0x208>
			KPrintF("loadFunctionCode: cannot allocate memory");
    7002:	|           |     |   pea 190ac <PutChar+0xe62>
    7008:	|           |     |   jsr 177a8 <KPrintF>
    700e:	|           |     |   addq.l #4,sp
			return FALSE;
    7010:	|           |     |   moveq #0,d0
    7012:	+-----------|-----|-- bra.w 71e6 <loadFunctionCode+0x3d8>
		}

		for (a = 0; a < newFunc -> numLocals; a ++) {
    7016:	|           |     '-> clr.l 96(sp)
    701a:	|           |     ,-- bra.s 7034 <loadFunctionCode+0x226>
			initVarNew (newFunc -> localVars[a]);
    701c:	|           |  ,--|-> movea.l 76(sp),a0
    7020:	|           |  |  |   move.l 20(a0),d1
    7024:	|           |  |  |   move.l 96(sp),d0
    7028:	|           |  |  |   lsl.l #3,d0
    702a:	|           |  |  |   movea.l d1,a0
    702c:	|           |  |  |   adda.l d0,a0
    702e:	|           |  |  |   clr.l (a0)
		for (a = 0; a < newFunc -> numLocals; a ++) {
    7030:	|           |  |  |   addq.l #1,96(sp)
    7034:	|           |  |  '-> movea.l 76(sp),a0
    7038:	|           |  |      move.l 8(a0),d0
    703c:	|           |  |      cmp.l 96(sp),d0
    7040:	|           |  '----- bgt.s 701c <loadFunctionCode+0x20e>
    7042:	|           |     ,-- bra.s 704c <loadFunctionCode+0x23e>
		}
	} else
	{
		newFunc->numLocals = NULL;
    7044:	|           '-----|-> movea.l 76(sp),a0
    7048:	|                 |   clr.l 8(a0)
	}

	struct cachedFunction  *next = allCachedFunctions;
    704c:	|                 '-> move.l 1cf3e <allCachedFunctions>,36(sp)
	allCachedFunctions = AllocVec(sizeof(struct cachedFunction),MEMF_ANY);
    7054:	|                     moveq #16,d0
    7056:	|                     move.l d0,32(sp)
    705a:	|                     clr.l 28(sp)
    705e:	|                     move.l 1cfb6 <SysBase>,d0
    7064:	|                     movea.l d0,a6
    7066:	|                     move.l 32(sp),d0
    706a:	|                     move.l 28(sp),d1
    706e:	|                     jsr -684(a6)
    7072:	|                     move.l d0,24(sp)
    7076:	|                     move.l 24(sp),d0
    707a:	|                     move.l d0,1cf3e <allCachedFunctions>
	allCachedFunctions -> prev = NULL;
    7080:	|                     movea.l 1cf3e <allCachedFunctions>,a0
    7086:	|                     clr.l 12(a0)
	if (! allCachedFunctions) {
    708a:	|                     move.l 1cf3e <allCachedFunctions>,d0
    7090:	|                 ,-- bne.s 70a6 <loadFunctionCode+0x298>
		KPrintF("loadFunctionCode: cannot allocate memory for cached function");
    7092:	|                 |   pea 190d5 <PutChar+0xe8b>
    7098:	|                 |   jsr 177a8 <KPrintF>
    709e:	|                 |   addq.l #4,sp
		return NULL;
    70a0:	|                 |   moveq #0,d0
    70a2:	+-----------------|-- bra.w 71e6 <loadFunctionCode+0x3d8>
	}
	if( !next) {
    70a6:	|                 '-> tst.l 36(sp)
    70aa:	|                 ,-- bne.s 70b8 <loadFunctionCode+0x2aa>
		lastCachedFunction = allCachedFunctions;
    70ac:	|                 |   move.l 1cf3e <allCachedFunctions>,d0
    70b2:	|                 |   move.l d0,1cf42 <lastCachedFunction>
	} 	

	if(next) next->prev = allCachedFunctions;
    70b8:	|                 '-> tst.l 36(sp)
    70bc:	|                 ,-- beq.s 70cc <loadFunctionCode+0x2be>
    70be:	|                 |   move.l 1cf3e <allCachedFunctions>,d0
    70c4:	|                 |   movea.l 36(sp),a0
    70c8:	|                 |   move.l d0,12(a0)
	
	allCachedFunctions->next = next;
    70cc:	|                 '-> movea.l 1cf3e <allCachedFunctions>,a0
    70d2:	|                     move.l 36(sp),8(a0)
	allCachedFunctions->theFunction = newFunc;
    70d8:	|                     movea.l 1cf3e <allCachedFunctions>,a0
    70de:	|                     move.l 76(sp),4(a0)
	allCachedFunctions->funcNum = originalNumber;
    70e4:	|                     movea.l 1cf3e <allCachedFunctions>,a0
    70ea:	|                     move.l 108(sp),(a0)

	if( numCachedFunctions >= CACHEFUNCTIONMAX) 
    70ee:	|                     move.l 1cf8a <numCachedFunctions>,d0
    70f4:	|                     moveq #9,d1
    70f6:	|                     cmp.l d0,d1
    70f8:	|  ,----------------- bge.w 71d4 <loadFunctionCode+0x3c6>
	{
		struct cachedFunction *huntanddestroy = lastCachedFunction;
    70fc:	|  |                  move.l 1cf42 <lastCachedFunction>,92(sp)
		while (huntanddestroy) 
    7104:	|  |     ,----------- bra.s 7168 <loadFunctionCode+0x35a>
		{
			if (huntanddestroy->theFunction->unloaded == 1) 
    7106:	|  |  ,--|----------> movea.l 92(sp),a0
    710a:	|  |  |  |            movea.l 4(a0),a0
    710e:	|  |  |  |            move.l 58(a0),d0
    7112:	|  |  |  |            moveq #1,d1
    7114:	|  |  |  |            cmp.l d0,d1
    7116:	|  |  |  |  ,-------- bne.s 715e <loadFunctionCode+0x350>
			{
				huntanddestroy->prev->next = huntanddestroy->next;				
    7118:	|  |  |  |  |         movea.l 92(sp),a0
    711c:	|  |  |  |  |         movea.l 12(a0),a0
    7120:	|  |  |  |  |         movea.l 92(sp),a1
    7124:	|  |  |  |  |         move.l 8(a1),d0
    7128:	|  |  |  |  |         move.l d0,8(a0)
				if (huntanddestroy == lastCachedFunction) {
    712c:	|  |  |  |  |         move.l 1cf42 <lastCachedFunction>,d0
    7132:	|  |  |  |  |         cmp.l 92(sp),d0
    7136:	|  |  |  |  |     ,-- bne.s 7148 <loadFunctionCode+0x33a>
					lastCachedFunction = huntanddestroy->prev;
    7138:	|  |  |  |  |     |   movea.l 92(sp),a0
    713c:	|  |  |  |  |     |   move.l 12(a0),d0
    7140:	|  |  |  |  |     |   move.l d0,1cf42 <lastCachedFunction>
				}
				else
				{
					huntanddestroy->next->prev = huntanddestroy->prev;
				}
				break;
    7146:	|  |  |  |  |  ,--|-- bra.s 716e <loadFunctionCode+0x360>
					huntanddestroy->next->prev = huntanddestroy->prev;
    7148:	|  |  |  |  |  |  '-> movea.l 92(sp),a0
    714c:	|  |  |  |  |  |      movea.l 8(a0),a0
    7150:	|  |  |  |  |  |      movea.l 92(sp),a1
    7154:	|  |  |  |  |  |      move.l 12(a1),d0
    7158:	|  |  |  |  |  |      move.l d0,12(a0)
				break;
    715c:	|  |  |  |  |  +----- bra.s 716e <loadFunctionCode+0x360>
			}
			
			huntanddestroy = huntanddestroy->prev;
    715e:	|  |  |  |  '--|----> movea.l 92(sp),a0
    7162:	|  |  |  |     |      move.l 12(a0),92(sp)
		while (huntanddestroy) 
    7168:	|  |  |  '-----|----> tst.l 92(sp)
    716c:	|  |  '--------|----- bne.s 7106 <loadFunctionCode+0x2f8>
		}		

		if( huntanddestroy)
    716e:	|  |           '----> tst.l 92(sp)
    7172:	|  |           ,----- beq.s 71c4 <loadFunctionCode+0x3b6>
		{
			FreeVec(huntanddestroy->theFunction->compiledLines);
    7174:	|  |           |      movea.l 92(sp),a0
    7178:	|  |           |      movea.l 4(a0),a0
    717c:	|  |           |      move.l 4(a0),20(sp)
    7182:	|  |           |      move.l 1cfb6 <SysBase>,d0
    7188:	|  |           |      movea.l d0,a6
    718a:	|  |           |      movea.l 20(sp),a1
    718e:	|  |           |      jsr -690(a6)
			FreeVec(huntanddestroy->theFunction);
    7192:	|  |           |      movea.l 92(sp),a0
    7196:	|  |           |      move.l 4(a0),16(sp)
    719c:	|  |           |      move.l 1cfb6 <SysBase>,d0
    71a2:	|  |           |      movea.l d0,a6
    71a4:	|  |           |      movea.l 16(sp),a1
    71a8:	|  |           |      jsr -690(a6)
			FreeVec(huntanddestroy);
    71ac:	|  |           |      move.l 92(sp),12(sp)
    71b2:	|  |           |      move.l 1cfb6 <SysBase>,d0
    71b8:	|  |           |      movea.l d0,a6
    71ba:	|  |           |      movea.l 12(sp),a1
    71be:	|  |           |      jsr -690(a6)
    71c2:	|  |           |  ,-- bra.s 71e2 <loadFunctionCode+0x3d4>
		} else 
		{
			KPrintF("loadFunctionCode: Function is still in use\n");
    71c4:	|  |           '--|-> pea 19112 <PutChar+0xec8>
    71ca:	|  |              |   jsr 177a8 <KPrintF>
    71d0:	|  |              |   addq.l #4,sp
    71d2:	|  |              +-- bra.s 71e2 <loadFunctionCode+0x3d4>
		}
	}				
	else numCachedFunctions++;
    71d4:	|  '--------------|-> move.l 1cf8a <numCachedFunctions>,d0
    71da:	|                 |   addq.l #1,d0
    71dc:	|                 |   move.l d0,1cf8a <numCachedFunctions>
	
	return newFunc;
    71e2:	|                 '-> move.l 76(sp),d0

}
    71e6:	'-------------------> movea.l (sp)+,a6
    71e8:	                      lea 100(sp),sp
    71ec:	                      rts

000071ee <loadHandlers>:

void loadHandlers (BPTR fp) {
    71ee:	move.l a2,-(sp)
	currentEvents -> leftMouseFunction		= get2bytes (fp);
    71f0:	movea.l 1c924 <currentEvents>,a2
    71f6:	move.l 8(sp),-(sp)
    71fa:	jsr 6bc <get2bytes>
    7200:	addq.l #4,sp
    7202:	move.l d0,(a2)
	currentEvents -> leftMouseUpFunction	= get2bytes (fp);
    7204:	movea.l 1c924 <currentEvents>,a2
    720a:	move.l 8(sp),-(sp)
    720e:	jsr 6bc <get2bytes>
    7214:	addq.l #4,sp
    7216:	move.l d0,4(a2)
	currentEvents -> rightMouseFunction		= get2bytes (fp);
    721a:	movea.l 1c924 <currentEvents>,a2
    7220:	move.l 8(sp),-(sp)
    7224:	jsr 6bc <get2bytes>
    722a:	addq.l #4,sp
    722c:	move.l d0,8(a2)
	currentEvents -> rightMouseUpFunction	= get2bytes (fp);
    7230:	movea.l 1c924 <currentEvents>,a2
    7236:	move.l 8(sp),-(sp)
    723a:	jsr 6bc <get2bytes>
    7240:	addq.l #4,sp
    7242:	move.l d0,12(a2)
	currentEvents -> moveMouseFunction		= get2bytes (fp);
    7246:	movea.l 1c924 <currentEvents>,a2
    724c:	move.l 8(sp),-(sp)
    7250:	jsr 6bc <get2bytes>
    7256:	addq.l #4,sp
    7258:	move.l d0,16(a2)
	currentEvents -> focusFunction			= (struct loadedFunction *) get4bytes (fp); //Todo: Changed to pointer type. Check if this is correct.
    725c:	move.l 8(sp),-(sp)
    7260:	jsr 718 <get4bytes>
    7266:	addq.l #4,sp
    7268:	movea.l 1c924 <currentEvents>,a0
    726e:	move.l d0,20(a0)
	currentEvents -> spaceFunction			= get2bytes (fp);
    7272:	movea.l 1c924 <currentEvents>,a2
    7278:	move.l 8(sp),-(sp)
    727c:	jsr 6bc <get2bytes>
    7282:	addq.l #4,sp
    7284:	move.l d0,24(a2)
}
    7288:	nop
    728a:	movea.l (sp)+,a2
    728c:	rts

0000728e <openAndVerify>:

BPTR openAndVerify (char * filename, char extra1, char extra2, const char * er, int *fileVersion) {
    728e:	       lea -312(sp),sp
    7292:	       movem.l d2-d3/a6,-(sp)
    7296:	       move.l 332(sp),d1
    729a:	       move.l 336(sp),d0
    729e:	       move.b d1,d1
    72a0:	       move.b d1,16(sp)
    72a4:	       move.b d0,d0
    72a6:	       move.b d0,14(sp)
	BPTR fp = Open(filename,MODE_OLDFILE);
    72aa:	       move.l 328(sp),318(sp)
    72b0:	       move.l #1005,314(sp)
    72b8:	       move.l 1cfbe <DOSBase>,d0
    72be:	       movea.l d0,a6
    72c0:	       move.l 318(sp),d1
    72c4:	       move.l 314(sp),d2
    72c8:	       jsr -30(a6)
    72cc:	       move.l d0,310(sp)
    72d0:	       move.l 310(sp),d0
    72d4:	       move.l d0,306(sp)

	if (! fp) {
    72d8:	   ,-- bne.s 7334 <openAndVerify+0xa6>
		Write(Output(), (APTR)"openAndVerify: Can't open file\n", 31);
    72da:	   |   move.l 1cfbe <DOSBase>,d0
    72e0:	   |   movea.l d0,a6
    72e2:	   |   jsr -60(a6)
    72e6:	   |   move.l d0,154(sp)
    72ea:	   |   move.l 154(sp),d0
    72ee:	   |   move.l d0,150(sp)
    72f2:	   |   move.l #102718,146(sp)
    72fa:	   |   moveq #31,d0
    72fc:	   |   move.l d0,142(sp)
    7300:	   |   move.l 1cfbe <DOSBase>,d0
    7306:	   |   movea.l d0,a6
    7308:	   |   move.l 150(sp),d1
    730c:	   |   move.l 146(sp),d2
    7310:	   |   move.l 142(sp),d3
    7314:	   |   jsr -48(a6)
    7318:	   |   move.l d0,138(sp)
		KPrintF("openAndVerify: Can't open file", filename);
    731c:	   |   move.l 328(sp),-(sp)
    7320:	   |   pea 1915e <PutChar+0xf14>
    7326:	   |   jsr 177a8 <KPrintF>
    732c:	   |   addq.l #8,sp
		return NULL;
    732e:	   |   moveq #0,d0
    7330:	,--|-- bra.w 75f4 <openAndVerify+0x366>
	}
	BOOL headerBad = FALSE;
    7334:	|  '-> clr.w 322(sp)
	if (FGetC (fp) != 'S') headerBad = TRUE;
    7338:	|      move.l 306(sp),302(sp)
    733e:	|      move.l 1cfbe <DOSBase>,d0
    7344:	|      movea.l d0,a6
    7346:	|      move.l 302(sp),d1
    734a:	|      jsr -306(a6)
    734e:	|      move.l d0,298(sp)
    7352:	|      move.l 298(sp),d0
    7356:	|      moveq #83,d1
    7358:	|      cmp.l d0,d1
    735a:	|  ,-- beq.s 7362 <openAndVerify+0xd4>
    735c:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'L') headerBad = TRUE;
    7362:	|  '-> move.l 306(sp),294(sp)
    7368:	|      move.l 1cfbe <DOSBase>,d0
    736e:	|      movea.l d0,a6
    7370:	|      move.l 294(sp),d1
    7374:	|      jsr -306(a6)
    7378:	|      move.l d0,290(sp)
    737c:	|      move.l 290(sp),d0
    7380:	|      moveq #76,d1
    7382:	|      cmp.l d0,d1
    7384:	|  ,-- beq.s 738c <openAndVerify+0xfe>
    7386:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'U') headerBad = TRUE;
    738c:	|  '-> move.l 306(sp),286(sp)
    7392:	|      move.l 1cfbe <DOSBase>,d0
    7398:	|      movea.l d0,a6
    739a:	|      move.l 286(sp),d1
    739e:	|      jsr -306(a6)
    73a2:	|      move.l d0,282(sp)
    73a6:	|      move.l 282(sp),d0
    73aa:	|      moveq #85,d1
    73ac:	|      cmp.l d0,d1
    73ae:	|  ,-- beq.s 73b6 <openAndVerify+0x128>
    73b0:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'D') headerBad = TRUE;
    73b6:	|  '-> move.l 306(sp),278(sp)
    73bc:	|      move.l 1cfbe <DOSBase>,d0
    73c2:	|      movea.l d0,a6
    73c4:	|      move.l 278(sp),d1
    73c8:	|      jsr -306(a6)
    73cc:	|      move.l d0,274(sp)
    73d0:	|      move.l 274(sp),d0
    73d4:	|      moveq #68,d1
    73d6:	|      cmp.l d0,d1
    73d8:	|  ,-- beq.s 73e0 <openAndVerify+0x152>
    73da:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != extra1) headerBad = TRUE;
    73e0:	|  '-> move.l 306(sp),270(sp)
    73e6:	|      move.l 1cfbe <DOSBase>,d0
    73ec:	|      movea.l d0,a6
    73ee:	|      move.l 270(sp),d1
    73f2:	|      jsr -306(a6)
    73f6:	|      move.l d0,266(sp)
    73fa:	|      move.l 266(sp),d1
    73fe:	|      move.b 16(sp),d0
    7402:	|      ext.w d0
    7404:	|      movea.w d0,a0
    7406:	|      cmpa.l d1,a0
    7408:	|  ,-- beq.s 7410 <openAndVerify+0x182>
    740a:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != extra2) headerBad = TRUE;
    7410:	|  '-> move.l 306(sp),262(sp)
    7416:	|      move.l 1cfbe <DOSBase>,d0
    741c:	|      movea.l d0,a6
    741e:	|      move.l 262(sp),d1
    7422:	|      jsr -306(a6)
    7426:	|      move.l d0,258(sp)
    742a:	|      move.l 258(sp),d1
    742e:	|      move.b 14(sp),d0
    7432:	|      ext.w d0
    7434:	|      movea.w d0,a0
    7436:	|      cmpa.l d1,a0
    7438:	|  ,-- beq.s 7440 <openAndVerify+0x1b2>
    743a:	|  |   move.w #1,322(sp)
	if (headerBad) {
    7440:	|  '-> tst.w 322(sp)
    7444:	|  ,-- beq.s 749c <openAndVerify+0x20e>
		Write(Output(), (APTR)"openAndVerify: Bad Header\n", 31);
    7446:	|  |   move.l 1cfbe <DOSBase>,d0
    744c:	|  |   movea.l d0,a6
    744e:	|  |   jsr -60(a6)
    7452:	|  |   move.l d0,174(sp)
    7456:	|  |   move.l 174(sp),d0
    745a:	|  |   move.l d0,170(sp)
    745e:	|  |   move.l #102781,166(sp)
    7466:	|  |   moveq #31,d0
    7468:	|  |   move.l d0,162(sp)
    746c:	|  |   move.l 1cfbe <DOSBase>,d0
    7472:	|  |   movea.l d0,a6
    7474:	|  |   move.l 170(sp),d1
    7478:	|  |   move.l 166(sp),d2
    747c:	|  |   move.l 162(sp),d3
    7480:	|  |   jsr -48(a6)
    7484:	|  |   move.l d0,158(sp)
		KPrintF("openAndVerify: Bad Header\n");
    7488:	|  |   pea 1917d <PutChar+0xf33>
    748e:	|  |   jsr 177a8 <KPrintF>
    7494:	|  |   addq.l #4,sp
		return NULL;
    7496:	|  |   moveq #0,d0
    7498:	+--|-- bra.w 75f4 <openAndVerify+0x366>
	}
	FGetC (fp);
    749c:	|  '-> move.l 306(sp),254(sp)
    74a2:	|      move.l 1cfbe <DOSBase>,d0
    74a8:	|      movea.l d0,a6
    74aa:	|      move.l 254(sp),d1
    74ae:	|      jsr -306(a6)
    74b2:	|      move.l d0,250(sp)
	while (FGetC(fp)) {;}
    74b6:	|      nop
    74b8:	|  ,-> move.l 306(sp),246(sp)
    74be:	|  |   move.l 1cfbe <DOSBase>,d0
    74c4:	|  |   movea.l d0,a6
    74c6:	|  |   move.l 246(sp),d1
    74ca:	|  |   jsr -306(a6)
    74ce:	|  |   move.l d0,242(sp)
    74d2:	|  |   move.l 242(sp),d0
    74d6:	|  '-- bne.s 74b8 <openAndVerify+0x22a>

	int majVersion = FGetC (fp);
    74d8:	|      move.l 306(sp),238(sp)
    74de:	|      move.l 1cfbe <DOSBase>,d0
    74e4:	|      movea.l d0,a6
    74e6:	|      move.l 238(sp),d1
    74ea:	|      jsr -306(a6)
    74ee:	|      move.l d0,234(sp)
    74f2:	|      move.l 234(sp),d0
    74f6:	|      move.l d0,230(sp)
	int minVersion = FGetC (fp);
    74fa:	|      move.l 306(sp),226(sp)
    7500:	|      move.l 1cfbe <DOSBase>,d0
    7506:	|      movea.l d0,a6
    7508:	|      move.l 226(sp),d1
    750c:	|      jsr -306(a6)
    7510:	|      move.l d0,222(sp)
    7514:	|      move.l 222(sp),d0
    7518:	|      move.l d0,218(sp)
	*fileVersion = majVersion * 256 + minVersion;
    751c:	|      move.l 230(sp),d0
    7520:	|      lsl.l #8,d0
    7522:	|      add.l 218(sp),d0
    7526:	|      movea.l 344(sp),a0
    752a:	|      move.l d0,(a0)

	char txtVer[120];

	if (*fileVersion > WHOLE_VERSION) {
    752c:	|      movea.l 344(sp),a0
    7530:	|      move.l (a0),d0
    7532:	|      cmpi.l #514,d0
    7538:	|  ,-- ble.s 758e <openAndVerify+0x300>
		//sprintf (txtVer, ERROR_VERSION_TOO_LOW_2, majVersion, minVersion);
		Write(Output(), (APTR)ERROR_VERSION_TOO_LOW_1, 100);
    753a:	|  |   move.l 1cfbe <DOSBase>,d0
    7540:	|  |   movea.l d0,a6
    7542:	|  |   jsr -60(a6)
    7546:	|  |   move.l d0,194(sp)
    754a:	|  |   move.l 194(sp),d0
    754e:	|  |   move.l d0,190(sp)
    7552:	|  |   move.l #102808,186(sp)
    755a:	|  |   moveq #100,d1
    755c:	|  |   move.l d1,182(sp)
    7560:	|  |   move.l 1cfbe <DOSBase>,d0
    7566:	|  |   movea.l d0,a6
    7568:	|  |   move.l 190(sp),d1
    756c:	|  |   move.l 186(sp),d2
    7570:	|  |   move.l 182(sp),d3
    7574:	|  |   jsr -48(a6)
    7578:	|  |   move.l d0,178(sp)
		KPrintF(ERROR_VERSION_TOO_LOW_1);
    757c:	|  |   pea 19198 <PutChar+0xf4e>
    7582:	|  |   jsr 177a8 <KPrintF>
    7588:	|  |   addq.l #4,sp
		return NULL;
    758a:	|  |   moveq #0,d0
    758c:	+--|-- bra.s 75f4 <openAndVerify+0x366>
	} else if (*fileVersion < MINIM_VERSION) {
    758e:	|  '-> movea.l 344(sp),a0
    7592:	|      move.l (a0),d0
    7594:	|      cmpi.l #257,d0
    759a:	|  ,-- bgt.s 75f0 <openAndVerify+0x362>
		Write(Output(), (APTR)ERROR_VERSION_TOO_HIGH_1, 100);
    759c:	|  |   move.l 1cfbe <DOSBase>,d0
    75a2:	|  |   movea.l d0,a6
    75a4:	|  |   jsr -60(a6)
    75a8:	|  |   move.l d0,214(sp)
    75ac:	|  |   move.l 214(sp),d0
    75b0:	|  |   move.l d0,210(sp)
    75b4:	|  |   move.l #102877,206(sp)
    75bc:	|  |   moveq #100,d0
    75be:	|  |   move.l d0,202(sp)
    75c2:	|  |   move.l 1cfbe <DOSBase>,d0
    75c8:	|  |   movea.l d0,a6
    75ca:	|  |   move.l 210(sp),d1
    75ce:	|  |   move.l 206(sp),d2
    75d2:	|  |   move.l 202(sp),d3
    75d6:	|  |   jsr -48(a6)
    75da:	|  |   move.l d0,198(sp)
		KPrintF(ERROR_VERSION_TOO_HIGH_1);
    75de:	|  |   pea 191dd <PutChar+0xf93>
    75e4:	|  |   jsr 177a8 <KPrintF>
    75ea:	|  |   addq.l #4,sp
		return NULL;
    75ec:	|  |   moveq #0,d0
    75ee:	+--|-- bra.s 75f4 <openAndVerify+0x366>
	}
	return fp;
    75f0:	|  '-> move.l 306(sp),d0
}
    75f4:	'----> movem.l (sp)+,d2-d3/a6
    75f8:	       lea 312(sp),sp
    75fc:	       rts

000075fe <pauseFunction>:

void pauseFunction (struct loadedFunction * fun) {
    75fe:	          subq.l #4,sp
	struct loadedFunction * * huntAndDestroy = & allRunningFunctions;
    7600:	          move.l #118602,(sp)
	while (* huntAndDestroy) {
    7606:	   ,----- bra.s 7632 <pauseFunction+0x34>
		if (fun == * huntAndDestroy) {
    7608:	,--|----> movea.l (sp),a0
    760a:	|  |      move.l (a0),d0
    760c:	|  |      cmp.l 8(sp),d0
    7610:	|  |  ,-- bne.s 7628 <pauseFunction+0x2a>
			(* huntAndDestroy) = (* huntAndDestroy) -> next;
    7612:	|  |  |   movea.l (sp),a0
    7614:	|  |  |   movea.l (a0),a0
    7616:	|  |  |   move.l 44(a0),d0
    761a:	|  |  |   movea.l (sp),a0
    761c:	|  |  |   move.l d0,(a0)
			fun->next = NULL;
    761e:	|  |  |   movea.l 8(sp),a0
    7622:	|  |  |   clr.l 44(a0)
    7626:	|  +--|-- bra.s 7632 <pauseFunction+0x34>
		} else {
			huntAndDestroy = & (* huntAndDestroy) -> next;
    7628:	|  |  '-> movea.l (sp),a0
    762a:	|  |      move.l (a0),d0
    762c:	|  |      moveq #44,d1
    762e:	|  |      add.l d0,d1
    7630:	|  |      move.l d1,(sp)
	while (* huntAndDestroy) {
    7632:	|  '----> movea.l (sp),a0
    7634:	|         move.l (a0),d0
    7636:	'-------- bne.s 7608 <pauseFunction+0xa>
		}
	}
}
    7638:	          nop
    763a:	          nop
    763c:	          addq.l #4,sp
    763e:	          rts

00007640 <preloadNewFunctionNum>:

struct loadedFunction *preloadNewFunctionNum (unsigned int funcNum) {		

	return loadFunctionCode (funcNum);	
    7640:	move.l 4(sp),-(sp)
    7644:	jsr 6e0e <loadFunctionCode>
    764a:	addq.l #4,sp
}
    764c:	rts

0000764e <restartFunction>:

void restartFunction (struct loadedFunction * fun) {
	fun -> next = allRunningFunctions;
    764e:	move.l 1cf4a <allRunningFunctions>,d0
    7654:	movea.l 4(sp),a0
    7658:	move.l d0,44(a0)
	fun -> unloaded = 0;
    765c:	movea.l 4(sp),a0
    7660:	clr.l 58(a0)
	allRunningFunctions = fun;
    7664:	move.l 4(sp),1cf4a <allRunningFunctions>
}
    766c:	nop
    766e:	rts

00007670 <runSludge>:

BOOL runSludge () {
    7670:	                   lea -12(sp),sp
    7674:	                   move.l a6,-(sp)
	
	struct loadedFunction * thisFunction = allRunningFunctions;
    7676:	                   move.l 1cf4a <allRunningFunctions>,12(sp)
	struct loadedFunction * nextFunction;

	while (thisFunction) {
    767e:	      ,----------- bra.s 76fa <runSludge+0x8a>
		nextFunction = thisFunction -> next;
    7680:	   ,--|----------> movea.l 12(sp),a0
    7684:	   |  |            move.l 44(a0),4(sp)

		if (! thisFunction -> freezerLevel) {
    768a:	   |  |            movea.l 12(sp),a0
    768e:	   |  |            move.b 56(a0),d0
    7692:	   |  |  ,-------- bne.s 76f4 <runSludge+0x84>
			if (thisFunction -> timeLeft) {
    7694:	   |  |  |         movea.l 12(sp),a0
    7698:	   |  |  |         move.l 12(a0),d0
    769c:	   |  |  |  ,----- beq.s 76c6 <runSludge+0x56>
				if (thisFunction -> timeLeft < 0) {				
    769e:	   |  |  |  |      movea.l 12(sp),a0
    76a2:	   |  |  |  |      move.l 12(a0),d0
    76a6:	   |  |  |  |  ,-- bpl.s 76b2 <runSludge+0x42>
					thisFunction -> timeLeft = 0;
    76a8:	   |  |  |  |  |   movea.l 12(sp),a0
    76ac:	   |  |  |  |  |   clr.l 12(a0)
    76b0:	   |  |  +--|--|-- bra.s 76f4 <runSludge+0x84>
				} else if (
					! -- (thisFunction -> timeLeft)) {
    76b2:	   |  |  |  |  '-> movea.l 12(sp),a0
    76b6:	   |  |  |  |      move.l 12(a0),d0
    76ba:	   |  |  |  |      subq.l #1,d0
				} else if (
    76bc:	   |  |  |  |      movea.l 12(sp),a0
    76c0:	   |  |  |  |      move.l d0,12(a0)
    76c4:	   |  |  +--|----- bra.s 76f4 <runSludge+0x84>
				}
			} else {
				if (thisFunction -> isSpeech) {
    76c6:	   |  |  |  '----> movea.l 12(sp),a0
    76ca:	   |  |  |         move.w 50(a0),d0
    76ce:	   |  |  |     ,-- beq.s 76de <runSludge+0x6e>
					thisFunction -> isSpeech = FALSE;
    76d0:	   |  |  |     |   movea.l 12(sp),a0
    76d4:	   |  |  |     |   clr.w 50(a0)
					killAllSpeech ();
    76d8:	   |  |  |     |   jsr 42e8 <killAllSpeech>
				}
				if (! continueFunction (thisFunction))
    76de:	   |  |  |     '-> move.l 12(sp),-(sp)
    76e2:	   |  |  |         jsr 54ca <continueFunction>
    76e8:	   |  |  |         addq.l #4,sp
    76ea:	   |  |  |         tst.w d0
    76ec:	   |  |  +-------- bne.s 76f4 <runSludge+0x84>
					return FALSE;
    76ee:	   |  |  |         clr.w d0
    76f0:	,--|--|--|-------- bra.w 7780 <runSludge+0x110>
			}
		}

		thisFunction = nextFunction;
    76f4:	|  |  |  '-------> move.l 4(sp),12(sp)
	while (thisFunction) {
    76fa:	|  |  '----------> tst.l 12(sp)
    76fe:	|  '-------------- bne.s 7680 <runSludge+0x10>
	}

	if (loadNow) {
    7700:	|                  move.l 1cf7e <loadNow>,d0
    7706:	|        ,-------- beq.s 777e <runSludge+0x10e>
		if (loadNow[0] == ':') {
    7708:	|        |         movea.l 1cf7e <loadNow>,a0
    770e:	|        |         move.b (a0),d0
    7710:	|        |         cmpi.b #58,d0
    7714:	|        |  ,----- bne.s 7748 <runSludge+0xd8>
			saveGame (loadNow + 1);
    7716:	|        |  |      move.l 1cf7e <loadNow>,d0
    771c:	|        |  |      addq.l #1,d0
    771e:	|        |  |      move.l d0,-(sp)
    7720:	|        |  |      jsr cc08 <saveGame>
    7726:	|        |  |      addq.l #4,sp
			setVariable (&saverFunc->reg, SVT_INT, 1);
    7728:	|        |  |      movea.l 1d07c <saverFunc>,a0
    772e:	|        |  |      lea 28(a0),a0
    7732:	|        |  |      pea 1 <_start+0x1>
    7736:	|        |  |      pea 1 <_start+0x1>
    773a:	|        |  |      move.l a0,-(sp)
    773c:	|        |  |      jsr 155ba <setVariable>
    7742:	|        |  |      lea 12(sp),sp
    7746:	|        |  |  ,-- bra.s 7760 <runSludge+0xf0>
		} else {
			if (! loadGame (loadNow)) return FALSE;
    7748:	|        |  '--|-> move.l 1cf7e <loadNow>,d0
    774e:	|        |     |   move.l d0,-(sp)
    7750:	|        |     |   jsr c750 <loadGame>
    7756:	|        |     |   addq.l #4,sp
    7758:	|        |     |   tst.w d0
    775a:	|        |     +-- bne.s 7760 <runSludge+0xf0>
    775c:	|        |     |   clr.w d0
    775e:	+--------|-----|-- bra.s 7780 <runSludge+0x110>
		}
		FreeVec(loadNow);
    7760:	|        |     '-> move.l 1cf7e <loadNow>,8(sp)
    7768:	|        |         move.l 1cfb6 <SysBase>,d0
    776e:	|        |         movea.l d0,a6
    7770:	|        |         movea.l 8(sp),a1
    7774:	|        |         jsr -690(a6)
		loadNow = NULL;
    7778:	|        |         clr.l 1cf7e <loadNow>
	}

	return TRUE;
    777e:	|        '-------> moveq #1,d0
}
    7780:	'----------------> movea.l (sp)+,a6
    7782:	                   lea 12(sp),sp
    7786:	                   rts

00007788 <saveHandlers>:

void saveHandlers (BPTR fp) {
	put2bytes (currentEvents -> leftMouseFunction,		fp);
    7788:	movea.l 1c924 <currentEvents>,a0
    778e:	move.l (a0),d0
    7790:	move.l 4(sp),-(sp)
    7794:	move.l d0,-(sp)
    7796:	jsr 8d0 <put2bytes>
    779c:	addq.l #8,sp
	put2bytes (currentEvents -> leftMouseUpFunction,	fp);
    779e:	movea.l 1c924 <currentEvents>,a0
    77a4:	move.l 4(a0),d0
    77a8:	move.l 4(sp),-(sp)
    77ac:	move.l d0,-(sp)
    77ae:	jsr 8d0 <put2bytes>
    77b4:	addq.l #8,sp
	put2bytes (currentEvents -> rightMouseFunction,		fp);
    77b6:	movea.l 1c924 <currentEvents>,a0
    77bc:	move.l 8(a0),d0
    77c0:	move.l 4(sp),-(sp)
    77c4:	move.l d0,-(sp)
    77c6:	jsr 8d0 <put2bytes>
    77cc:	addq.l #8,sp
	put2bytes (currentEvents -> rightMouseUpFunction,	fp);
    77ce:	movea.l 1c924 <currentEvents>,a0
    77d4:	move.l 12(a0),d0
    77d8:	move.l 4(sp),-(sp)
    77dc:	move.l d0,-(sp)
    77de:	jsr 8d0 <put2bytes>
    77e4:	addq.l #8,sp
	put2bytes (currentEvents -> moveMouseFunction,		fp);
    77e6:	movea.l 1c924 <currentEvents>,a0
    77ec:	move.l 16(a0),d0
    77f0:	move.l 4(sp),-(sp)
    77f4:	move.l d0,-(sp)
    77f6:	jsr 8d0 <put2bytes>
    77fc:	addq.l #8,sp
	put4bytes ((ULONG) currentEvents -> focusFunction,			fp); //Todo: Changed to pointer type. Check if this is correct.
    77fe:	movea.l 1c924 <currentEvents>,a0
    7804:	move.l 20(a0),d0
    7808:	move.l 4(sp),-(sp)
    780c:	move.l d0,-(sp)
    780e:	jsr 958 <put4bytes>
    7814:	addq.l #8,sp
	put2bytes (currentEvents -> spaceFunction,			fp);
    7816:	movea.l 1c924 <currentEvents>,a0
    781c:	move.l 24(a0),d0
    7820:	move.l 4(sp),-(sp)
    7824:	move.l d0,-(sp)
    7826:	jsr 8d0 <put2bytes>
    782c:	addq.l #8,sp
}
    782e:	nop
    7830:	rts

00007832 <sludgeDisplay>:

void sludgeDisplay () {					
    7832:	subq.l #4,sp
  	volatile struct Custom *custom = (struct Custom*)0xdff000;
    7834:	move.l #14675968,(sp)
	displayCursor();
    783a:	jsr c58 <displayCursor>
	CstRestoreScreen();
    7840:	jsr 2c86 <CstRestoreScreen>
	drawPeople();
    7846:	jsr a48a <drawPeople>
	CstSwapBuffer();
    784c:	jsr 3944 <CstSwapBuffer>
}
    7852:	nop
    7854:	addq.l #4,sp
    7856:	rts

00007858 <stackSetByIndex>:

BOOL stackSetByIndex (struct variableStack * vS, unsigned int theIndex, const struct variable * va) {
	while (theIndex--) {
    7858:	      ,-- bra.s 7878 <stackSetByIndex+0x20>
		vS = vS->next;
    785a:	,-----|-> movea.l 4(sp),a0
    785e:	|     |   move.l 8(a0),4(sp)
		if (!vS) {
    7864:	|     +-- bne.s 7878 <stackSetByIndex+0x20>
			KPrintF("Index past end of stack.");
    7866:	|     |   pea 19224 <PutChar+0xfda>
    786c:	|     |   jsr 177a8 <KPrintF>
    7872:	|     |   addq.l #4,sp
			return FALSE;
    7874:	|     |   clr.w d0
    7876:	|  ,--|-- bra.s 789a <stackSetByIndex+0x42>
	while (theIndex--) {
    7878:	|  |  '-> move.l 8(sp),d0
    787c:	|  |      move.l d0,d1
    787e:	|  |      subq.l #1,d1
    7880:	|  |      move.l d1,8(sp)
    7884:	|  |      tst.l d0
    7886:	'--|----- bne.s 785a <stackSetByIndex+0x2>
		}
	}
	return copyVariable(va, &(vS->thisVar));
    7888:	   |      move.l 4(sp),d0
    788c:	   |      move.l d0,-(sp)
    788e:	   |      move.l 16(sp),-(sp)
    7892:	   |      jsr 15182 <copyVariable>
    7898:	   |      addq.l #8,sp
}
    789a:	   '----> rts

0000789c <startNewFunctionLoaded>:

int startNewFunctionLoaded (struct loadedFunction * newFunc, unsigned int numParamsExpected,struct loadedFunction * calledBy, struct variableStack ** vStack, BOOL returnSommet) {
    789c:	             subq.l #8,sp
    789e:	             move.l 28(sp),d0
    78a2:	             move.w d0,d0
    78a4:	             move.w d0,2(sp)
	
	if (newFunc -> numArgs != (int)numParamsExpected) {
    78a8:	             movea.l 12(sp),a0
    78ac:	             move.l 16(a0),d1
    78b0:	             move.l 16(sp),d0
    78b4:	             cmp.l d1,d0
    78b6:	         ,-- beq.s 78cc <startNewFunctionLoaded+0x30>
		KPrintF("Wrong number of parameters!");
    78b8:	         |   pea 1923d <PutChar+0xff3>
    78be:	         |   jsr 177a8 <KPrintF>
    78c4:	         |   addq.l #4,sp
		return NULL; 
    78c6:	         |   moveq #0,d0
    78c8:	,--------|-- bra.w 79a8 <startNewFunctionLoaded+0x10c>
	}
	if (newFunc -> numArgs > newFunc -> numLocals)  {
    78cc:	|        '-> movea.l 12(sp),a0
    78d0:	|            move.l 16(a0),d1
    78d4:	|            movea.l 12(sp),a0
    78d8:	|            move.l 8(a0),d0
    78dc:	|            cmp.l d1,d0
    78de:	|  ,-------- bge.s 7948 <startNewFunctionLoaded+0xac>
		KPrintF ("More arguments than local variable space!");
    78e0:	|  |         pea 19259 <PutChar+0x100f>
    78e6:	|  |         jsr 177a8 <KPrintF>
    78ec:	|  |         addq.l #4,sp
		return NULL; 
    78ee:	|  |         moveq #0,d0
    78f0:	+--|-------- bra.w 79a8 <startNewFunctionLoaded+0x10c>
	}
	
	// Now, lets copy the parameters from the calling function's stack...

	while (numParamsExpected) {
		struct variableStack *vStacksimpleptr = *vStack;
    78f4:	|  |  ,----> movea.l 24(sp),a0
    78f8:	|  |  |      move.l (a0),4(sp)
		numParamsExpected --;
    78fc:	|  |  |      subq.l #1,16(sp)
		if (*vStack == NULL) {
    7900:	|  |  |      movea.l 24(sp),a0
    7904:	|  |  |      move.l (a0),d0
    7906:	|  |  |  ,-- bne.s 791c <startNewFunctionLoaded+0x80>
			KPrintF("Corrupted file! The stack's empty and there were still parameters expected");
    7908:	|  |  |  |   pea 19283 <PutChar+0x1039>
    790e:	|  |  |  |   jsr 177a8 <KPrintF>
    7914:	|  |  |  |   addq.l #4,sp
			return NULL;
    7916:	|  |  |  |   moveq #0,d0
    7918:	+--|--|--|-- bra.w 79a8 <startNewFunctionLoaded+0x10c>
		}
		copyVariable (&vStacksimpleptr -> thisVar, &newFunc->localVars[numParamsExpected]);
    791c:	|  |  |  '-> movea.l 12(sp),a0
    7920:	|  |  |      move.l 20(a0),d1
    7924:	|  |  |      move.l 16(sp),d0
    7928:	|  |  |      lsl.l #3,d0
    792a:	|  |  |      add.l d0,d1
    792c:	|  |  |      move.l 4(sp),d0
    7930:	|  |  |      move.l d1,-(sp)
    7932:	|  |  |      move.l d0,-(sp)
    7934:	|  |  |      jsr 15182 <copyVariable>
    793a:	|  |  |      addq.l #8,sp
		trimStack ( vStack);
    793c:	|  |  |      move.l 24(sp),-(sp)
    7940:	|  |  |      jsr 1564c <trimStack>
    7946:	|  |  |      addq.l #4,sp
	while (numParamsExpected) {
    7948:	|  '--|----> tst.l 16(sp)
    794c:	|     '----- bne.s 78f4 <startNewFunctionLoaded+0x58>
	}

	newFunc -> cancelMe = FALSE;
    794e:	|            movea.l 12(sp),a0
    7952:	|            clr.w 54(a0)
	newFunc -> timeLeft = 0;
    7956:	|            movea.l 12(sp),a0
    795a:	|            clr.l 12(a0)
	newFunc -> returnSomething = returnSommet;
    795e:	|            movea.l 12(sp),a0
    7962:	|            move.w 2(sp),48(a0)
	newFunc -> calledBy = calledBy;
    7968:	|            movea.l 12(sp),a0
    796c:	|            move.l 20(sp),40(a0)
	newFunc -> stack = NULL;
    7972:	|            movea.l 12(sp),a0
    7976:	|            clr.l 24(a0)
	newFunc -> freezerLevel = 0;
    797a:	|            movea.l 12(sp),a0
    797e:	|            clr.b 56(a0)
	newFunc -> runThisLine = 0;
    7982:	|            movea.l 12(sp),a0
    7986:	|            clr.l 36(a0)
	newFunc -> isSpeech = 0;
    798a:	|            movea.l 12(sp),a0
    798e:	|            clr.w 50(a0)
	newFunc -> reg.varType = SVT_NULL;
    7992:	|            movea.l 12(sp),a0
    7996:	|            clr.l 28(a0)

	restartFunction (newFunc);
    799a:	|            move.l 12(sp),-(sp)
    799e:	|            jsr 764e <restartFunction>
    79a4:	|            addq.l #4,sp
	return 1;
    79a6:	|            moveq #1,d0
}
    79a8:	'----------> addq.l #8,sp
    79aa:	             rts

000079ac <startNewFunctionNum>:

int startNewFunctionNum (unsigned int funcNum, unsigned int numParamsExpected, struct loadedFunction * calledBy, struct variableStack ** vStack, BOOL returnSommet) {
    79ac:	lea -12(sp),sp
    79b0:	move.l 32(sp),d0
    79b4:	move.w d0,d0
    79b6:	move.w d0,2(sp)
	
	volatile struct Custom *custom = (struct Custom*)0xdff000;
    79ba:	move.l #14675968,8(sp)
	//custom->color[0] = 0x00f;	

	struct loadedFunction *newFunc = loadFunctionCode (funcNum);	
    79c2:	move.l 16(sp),-(sp)
    79c6:	jsr 6e0e <loadFunctionCode>
    79cc:	addq.l #4,sp
    79ce:	move.l d0,4(sp)
	//custom->color[0] = 0x000;	
	return startNewFunctionLoaded (newFunc, numParamsExpected, calledBy, vStack, returnSommet);
    79d2:	movea.w 2(sp),a0
    79d6:	move.l a0,-(sp)
    79d8:	move.l 32(sp),-(sp)
    79dc:	move.l 32(sp),-(sp)
    79e0:	move.l 32(sp),-(sp)
    79e4:	move.l 20(sp),-(sp)
    79e8:	jsr 789c <startNewFunctionLoaded>
    79ee:	lea 20(sp),sp
}
    79f2:	lea 12(sp),sp
    79f6:	rts

000079f8 <unloadFunction>:

void unloadFunction (struct loadedFunction * fun) {
    79f8:	             subq.l #8,sp
    79fa:	             move.l a6,-(sp)

	int a;

	//Keep function loaed in memory
	if( fun == currentEvents -> focusFunction) {	
    79fc:	             movea.l 1c924 <currentEvents>,a0
    7a02:	             move.l 20(a0),d0
    7a06:	             cmp.l 16(sp),d0
    7a0a:	,----------- beq.w 7a9a <unloadFunction+0xa2>
		return;
	}

	if (fun -> stack) 
    7a0e:	|            movea.l 16(sp),a0
    7a12:	|            move.l 24(a0),d0
    7a16:	|        ,-- beq.s 7a28 <unloadFunction+0x30>
	{
		KPrintF("unloadfunction: error non empty stack");
    7a18:	|        |   pea 192ce <PutChar+0x1084>
    7a1e:	|        |   jsr 177a8 <KPrintF>
    7a24:	|        |   addq.l #4,sp
		return;
    7a26:	|  ,-----|-- bra.s 7a9c <unloadFunction+0xa4>
	}
	
	for (a = 0; a < fun -> numLocals; a ++) unlinkVar (&(fun -> localVars[a]));
    7a28:	|  |     '-> clr.l 8(sp)
    7a2c:	|  |     ,-- bra.s 7a4c <unloadFunction+0x54>
    7a2e:	|  |  ,--|-> movea.l 16(sp),a0
    7a32:	|  |  |  |   move.l 20(a0),d1
    7a36:	|  |  |  |   move.l 8(sp),d0
    7a3a:	|  |  |  |   lsl.l #3,d0
    7a3c:	|  |  |  |   add.l d1,d0
    7a3e:	|  |  |  |   move.l d0,-(sp)
    7a40:	|  |  |  |   jsr 14f16 <unlinkVar>
    7a46:	|  |  |  |   addq.l #4,sp
    7a48:	|  |  |  |   addq.l #1,8(sp)
    7a4c:	|  |  |  '-> movea.l 16(sp),a0
    7a50:	|  |  |      move.l 8(a0),d0
    7a54:	|  |  |      cmp.l 8(sp),d0
    7a58:	|  |  '----- bgt.s 7a2e <unloadFunction+0x36>
	if( fun->numLocals > 0) {
    7a5a:	|  |         movea.l 16(sp),a0
    7a5e:	|  |         move.l 8(a0),d0
    7a62:	|  |     ,-- ble.s 7a7e <unloadFunction+0x86>
		FreeVec(fun -> localVars);
    7a64:	|  |     |   movea.l 16(sp),a0
    7a68:	|  |     |   move.l 20(a0),4(sp)
    7a6e:	|  |     |   move.l 1cfb6 <SysBase>,d0
    7a74:	|  |     |   movea.l d0,a6
    7a76:	|  |     |   movea.l 4(sp),a1
    7a7a:	|  |     |   jsr -690(a6)
	}
	unlinkVar (&fun -> reg);
    7a7e:	|  |     '-> moveq #28,d0
    7a80:	|  |         add.l 16(sp),d0
    7a84:	|  |         move.l d0,-(sp)
    7a86:	|  |         jsr 14f16 <unlinkVar>
    7a8c:	|  |         addq.l #4,sp
	fun->unloaded = 1;
    7a8e:	|  |         movea.l 16(sp),a0
    7a92:	|  |         moveq #1,d0
    7a94:	|  |         move.l d0,58(a0)
    7a98:	|  +-------- bra.s 7a9c <unloadFunction+0xa4>
		return;
    7a9a:	'--|-------> nop

}
    7a9c:	   '-------> movea.l (sp)+,a6
    7a9e:	             addq.l #8,sp
    7aa0:	             rts

00007aa2 <unfreezeSubs>:

void unfreezeSubs () {
    7aa2:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    7aa4:	          move.l 1cf4a <allRunningFunctions>,(sp)

	while (thisFunction) {
    7aaa:	   ,----- bra.s 7ac8 <unfreezeSubs+0x26>
		if (thisFunction -> freezerLevel) thisFunction -> freezerLevel--;
    7aac:	,--|----> movea.l (sp),a0
    7aae:	|  |      move.b 56(a0),d0
    7ab2:	|  |  ,-- beq.s 7ac2 <unfreezeSubs+0x20>
    7ab4:	|  |  |   movea.l (sp),a0
    7ab6:	|  |  |   move.b 56(a0),d0
    7aba:	|  |  |   subq.b #1,d0
    7abc:	|  |  |   movea.l (sp),a0
    7abe:	|  |  |   move.b d0,56(a0)
		thisFunction = thisFunction -> next;
    7ac2:	|  |  '-> movea.l (sp),a0
    7ac4:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    7ac8:	|  '----> tst.l (sp)
    7aca:	'-------- bne.s 7aac <unfreezeSubs+0xa>
	}
}
    7acc:	          nop
    7ace:	          nop
    7ad0:	          addq.l #4,sp
    7ad2:	          rts

00007ad4 <finishAccess>:
char * convertString(char * s) {
	return NULL;
}

void finishAccess () {
	sliceBusy = FALSE;
    7ad4:	clr.w 1c930 <sliceBusy>
}
    7ada:	nop
    7adc:	rts

00007ade <getNumberedString>:

char * getNumberedString (int value) {
    7ade:	       lea -56(sp),sp
    7ae2:	       movem.l d2-d3/a6,-(sp)

	if (sliceBusy) {
    7ae6:	       move.w 1c930 <sliceBusy>,d0
    7aec:	   ,-- beq.s 7b36 <getNumberedString+0x58>
		Write(Output(), (APTR)"getNumberedString: Can't read from data file. I'm already reading something\n", 76);        
    7aee:	   |   move.l 1cfbe <DOSBase>,d0
    7af4:	   |   movea.l d0,a6
    7af6:	   |   jsr -60(a6)
    7afa:	   |   move.l d0,28(sp)
    7afe:	   |   move.l 28(sp),d0
    7b02:	   |   move.l d0,24(sp)
    7b06:	   |   move.l #103156,20(sp)
    7b0e:	   |   moveq #76,d0
    7b10:	   |   move.l d0,16(sp)
    7b14:	   |   move.l 1cfbe <DOSBase>,d0
    7b1a:	   |   movea.l d0,a6
    7b1c:	   |   move.l 24(sp),d1
    7b20:	   |   move.l 20(sp),d2
    7b24:	   |   move.l 16(sp),d3
    7b28:	   |   jsr -48(a6)
    7b2c:	   |   move.l d0,12(sp)
		return NULL;
    7b30:	   |   moveq #0,d0
    7b32:	,--|-- bra.w 7bd2 <getNumberedString+0xf4>
	}

	Seek(bigDataFile, (value << 2) + startOfTextIndex, OFFSET_BEGINNING);
    7b36:	|  '-> move.l 1cf9e <bigDataFile>,64(sp)
    7b3e:	|      move.l 72(sp),d0
    7b42:	|      add.l d0,d0
    7b44:	|      add.l d0,d0
    7b46:	|      move.l d0,d1
    7b48:	|      move.l 1cfaa <startOfTextIndex>,d0
    7b4e:	|      add.l d1,d0
    7b50:	|      move.l d0,60(sp)
    7b54:	|      moveq #-1,d0
    7b56:	|      move.l d0,56(sp)
    7b5a:	|      move.l 1cfbe <DOSBase>,d0
    7b60:	|      movea.l d0,a6
    7b62:	|      move.l 64(sp),d1
    7b66:	|      move.l 60(sp),d2
    7b6a:	|      move.l 56(sp),d3
    7b6e:	|      jsr -66(a6)
    7b72:	|      move.l d0,52(sp)
	value = get4bytes (bigDataFile);
    7b76:	|      move.l 1cf9e <bigDataFile>,d0
    7b7c:	|      move.l d0,-(sp)
    7b7e:	|      jsr 718 <get4bytes>
    7b84:	|      addq.l #4,sp
    7b86:	|      move.l d0,72(sp)
	Seek (bigDataFile, value, OFFSET_BEGINING);
    7b8a:	|      move.l 1cf9e <bigDataFile>,48(sp)
    7b92:	|      move.l 72(sp),44(sp)
    7b98:	|      moveq #-1,d0
    7b9a:	|      move.l d0,40(sp)
    7b9e:	|      move.l 1cfbe <DOSBase>,d0
    7ba4:	|      movea.l d0,a6
    7ba6:	|      move.l 48(sp),d1
    7baa:	|      move.l 44(sp),d2
    7bae:	|      move.l 40(sp),d3
    7bb2:	|      jsr -66(a6)
    7bb6:	|      move.l d0,36(sp)

	char * s = readString (bigDataFile);    
    7bba:	|      move.l 1cf9e <bigDataFile>,d0
    7bc0:	|      move.l d0,-(sp)
    7bc2:	|      jsr b02 <readString>
    7bc8:	|      addq.l #4,sp
    7bca:	|      move.l d0,32(sp)
	
	return s;
    7bce:	|      move.l 32(sp),d0
}
    7bd2:	'----> movem.l (sp)+,d2-d3/a6
    7bd6:	       lea 56(sp),sp
    7bda:	       rts

00007bdc <openFileFromNum>:

unsigned int openFileFromNum (int num) {
    7bdc:	       lea -32(sp),sp
    7be0:	       movem.l d2-d3/a6,-(sp)
//	FILE * dbug = fopen ("debuggy.txt", "at");

	if (sliceBusy) {
    7be4:	       move.w 1c930 <sliceBusy>,d0
    7bea:	   ,-- beq.s 7c06 <openFileFromNum+0x2a>
		KPrintF("Can't read from data file", "I'm already reading something");
    7bec:	   |   pea 19341 <PutChar+0x10f7>
    7bf2:	   |   pea 1935f <PutChar+0x1115>
    7bf8:	   |   jsr 177a8 <KPrintF>
    7bfe:	   |   addq.l #8,sp
		return 0;
    7c00:	   |   moveq #0,d0
    7c02:	,--|-- bra.w 7c9a <openFileFromNum+0xbe>
	}

	Seek( bigDataFile,  startOfDataIndex + (num << 2), OFFSET_BEGINING);	
    7c06:	|  '-> move.l 1cf9e <bigDataFile>,40(sp)
    7c0e:	|      move.l 48(sp),d0
    7c12:	|      add.l d0,d0
    7c14:	|      add.l d0,d0
    7c16:	|      move.l d0,d1
    7c18:	|      move.l 1cfa6 <startOfDataIndex>,d0
    7c1e:	|      add.l d1,d0
    7c20:	|      move.l d0,36(sp)
    7c24:	|      moveq #-1,d0
    7c26:	|      move.l d0,32(sp)
    7c2a:	|      move.l 1cfbe <DOSBase>,d0
    7c30:	|      movea.l d0,a6
    7c32:	|      move.l 40(sp),d1
    7c36:	|      move.l 36(sp),d2
    7c3a:	|      move.l 32(sp),d3
    7c3e:	|      jsr -66(a6)
    7c42:	|      move.l d0,28(sp)
	Seek( bigDataFile, get4bytes (bigDataFile), OFFSET_CURRENT);
    7c46:	|      move.l 1cf9e <bigDataFile>,24(sp)
    7c4e:	|      move.l 1cf9e <bigDataFile>,d0
    7c54:	|      move.l d0,-(sp)
    7c56:	|      jsr 718 <get4bytes>
    7c5c:	|      addq.l #4,sp
    7c5e:	|      move.l d0,20(sp)
    7c62:	|      clr.l 16(sp)
    7c66:	|      move.l 1cfbe <DOSBase>,d0
    7c6c:	|      movea.l d0,a6
    7c6e:	|      move.l 24(sp),d1
    7c72:	|      move.l 20(sp),d2
    7c76:	|      move.l 16(sp),d3
    7c7a:	|      jsr -66(a6)
    7c7e:	|      move.l d0,12(sp)
//	fprintf (dbug, "Jumping to %li (for data) \n", ftell (bigDataFile));
	sliceBusy = TRUE;
    7c82:	|      move.w #1,1c930 <sliceBusy>
//	fclose (dbug);

	return get4bytes (bigDataFile);
    7c8a:	|      move.l 1cf9e <bigDataFile>,d0
    7c90:	|      move.l d0,-(sp)
    7c92:	|      jsr 718 <get4bytes>
    7c98:	|      addq.l #4,sp
}
    7c9a:	'----> movem.l (sp)+,d2-d3/a6
    7c9e:	       lea 32(sp),sp
    7ca2:	       rts

00007ca4 <openObjectSlice>:

BOOL openObjectSlice (int num) {
    7ca4:	       lea -32(sp),sp
    7ca8:	       movem.l d2-d3/a6,-(sp)
    // BPTR dbug = FOpen("debuggy.txt", MODE_NEWFILE);

    // FPrintf(dbug, "\nTrying to open object %i\n", num);

    if (sliceBusy) {
    7cac:	       move.w 1c930 <sliceBusy>,d0
    7cb2:	   ,-- beq.s 7cce <openObjectSlice+0x2a>
        KPrintF("Can't read from data file", "I'm already reading something");
    7cb4:	   |   pea 19341 <PutChar+0x10f7>
    7cba:	   |   pea 1935f <PutChar+0x1115>
    7cc0:	   |   jsr 177a8 <KPrintF>
    7cc6:	   |   addq.l #8,sp
        return FALSE;
    7cc8:	   |   clr.w d0
    7cca:	,--|-- bra.w 7d5a <openObjectSlice+0xb6>
    }

    // FPrintf(dbug, "Going to position %ld\n", startOfObjectIndex + (num << 2));
    Seek(bigDataFile, startOfObjectIndex + (num << 2), OFFSET_BEGINNING);
    7cce:	|  '-> move.l 1cf9e <bigDataFile>,40(sp)
    7cd6:	|      move.l 48(sp),d0
    7cda:	|      add.l d0,d0
    7cdc:	|      add.l d0,d0
    7cde:	|      move.l d0,d1
    7ce0:	|      move.l 1cfb2 <startOfObjectIndex>,d0
    7ce6:	|      add.l d1,d0
    7ce8:	|      move.l d0,36(sp)
    7cec:	|      moveq #-1,d0
    7cee:	|      move.l d0,32(sp)
    7cf2:	|      move.l 1cfbe <DOSBase>,d0
    7cf8:	|      movea.l d0,a6
    7cfa:	|      move.l 40(sp),d1
    7cfe:	|      move.l 36(sp),d2
    7d02:	|      move.l 32(sp),d3
    7d06:	|      jsr -66(a6)
    7d0a:	|      move.l d0,28(sp)
    Seek(bigDataFile, get4bytes(bigDataFile), OFFSET_BEGINNING);
    7d0e:	|      move.l 1cf9e <bigDataFile>,24(sp)
    7d16:	|      move.l 1cf9e <bigDataFile>,d0
    7d1c:	|      move.l d0,-(sp)
    7d1e:	|      jsr 718 <get4bytes>
    7d24:	|      addq.l #4,sp
    7d26:	|      move.l d0,20(sp)
    7d2a:	|      moveq #-1,d0
    7d2c:	|      move.l d0,16(sp)
    7d30:	|      move.l 1cfbe <DOSBase>,d0
    7d36:	|      movea.l d0,a6
    7d38:	|      move.l 24(sp),d1
    7d3c:	|      move.l 20(sp),d2
    7d40:	|      move.l 16(sp),d3
    7d44:	|      jsr -66(a6)
    7d48:	|      move.l d0,12(sp)
    // FPrintf(dbug, "Told to skip forward to %ld\n", FTell(bigDataFile));
    // FClose(dbug);
    return sliceBusy = TRUE;
    7d4c:	|      move.w #1,1c930 <sliceBusy>
    7d54:	|      move.w 1c930 <sliceBusy>,d0
}
    7d5a:	'----> movem.l (sp)+,d2-d3/a6
    7d5e:	       lea 32(sp),sp
    7d62:	       rts

00007d64 <openSubSlice>:

BOOL openSubSlice (int num) {
    7d64:	       lea -32(sp),sp
    7d68:	       movem.l d2-d3/a6,-(sp)
//	FILE * dbug = fopen ("debuggy.txt", "at");

//	fprintf (dbug, "\nTrying to open sub %i\n", num);

	if (sliceBusy) {
    7d6c:	       move.w 1c930 <sliceBusy>,d0
    7d72:	   ,-- beq.s 7d8e <openSubSlice+0x2a>
		KPrintF("Can't read from data file", "I'm already reading something");
    7d74:	   |   pea 19341 <PutChar+0x10f7>
    7d7a:	   |   pea 1935f <PutChar+0x1115>
    7d80:	   |   jsr 177a8 <KPrintF>
    7d86:	   |   addq.l #8,sp
		return FALSE;
    7d88:	   |   clr.w d0
    7d8a:	,--|-- bra.w 7e1a <openSubSlice+0xb6>
	}

//	fprintf (dbug, "Going to position %li\n", startOfSubIndex + (num << 2));
	Seek(bigDataFile, startOfSubIndex + (num << 2), OFFSET_BEGINNING);
    7d8e:	|  '-> move.l 1cf9e <bigDataFile>,40(sp)
    7d96:	|      move.l 48(sp),d0
    7d9a:	|      add.l d0,d0
    7d9c:	|      add.l d0,d0
    7d9e:	|      move.l d0,d1
    7da0:	|      move.l 1cfae <startOfSubIndex>,d0
    7da6:	|      add.l d1,d0
    7da8:	|      move.l d0,36(sp)
    7dac:	|      moveq #-1,d0
    7dae:	|      move.l d0,32(sp)
    7db2:	|      move.l 1cfbe <DOSBase>,d0
    7db8:	|      movea.l d0,a6
    7dba:	|      move.l 40(sp),d1
    7dbe:	|      move.l 36(sp),d2
    7dc2:	|      move.l 32(sp),d3
    7dc6:	|      jsr -66(a6)
    7dca:	|      move.l d0,28(sp)
	Seek(bigDataFile, get4bytes (bigDataFile), OFFSET_BEGINNING);
    7dce:	|      move.l 1cf9e <bigDataFile>,24(sp)
    7dd6:	|      move.l 1cf9e <bigDataFile>,d0
    7ddc:	|      move.l d0,-(sp)
    7dde:	|      jsr 718 <get4bytes>
    7de4:	|      addq.l #4,sp
    7de6:	|      move.l d0,20(sp)
    7dea:	|      moveq #-1,d0
    7dec:	|      move.l d0,16(sp)
    7df0:	|      move.l 1cfbe <DOSBase>,d0
    7df6:	|      movea.l d0,a6
    7df8:	|      move.l 24(sp),d1
    7dfc:	|      move.l 20(sp),d2
    7e00:	|      move.l 16(sp),d3
    7e04:	|      jsr -66(a6)
    7e08:	|      move.l d0,12(sp)
//	fprintf (dbug, "Told to skip forward to %li\n", ftell (bigDataFile));
//	fclose (dbug);
	return sliceBusy = TRUE;
    7e0c:	|      move.w #1,1c930 <sliceBusy>
    7e14:	|      move.w 1c930 <sliceBusy>,d0
}
    7e1a:	'----> movem.l (sp)+,d2-d3/a6
    7e1e:	       lea 32(sp),sp
    7e22:	       rts

00007e24 <setFileIndices>:

void setFileIndices (BPTR fp, unsigned int numLanguages, unsigned int skipBefore) {
    7e24:	       lea -180(sp),sp
    7e28:	       movem.l d2-d3/a6,-(sp)
	if (fp) {
    7e2c:	       tst.l 196(sp)
    7e30:	,----- beq.s 7e70 <setFileIndices+0x4c>
		// Keep hold of the file handle, and let things get at it
		bigDataFile = fp;
    7e32:	|      move.l 196(sp),1cf9e <bigDataFile>
		startIndex = Seek( fp, 0, OFFSET_CURRENT);
    7e3a:	|      move.l 196(sp),168(sp)
    7e40:	|      clr.l 164(sp)
    7e44:	|      clr.l 160(sp)
    7e48:	|      move.l 1cfbe <DOSBase>,d0
    7e4e:	|      movea.l d0,a6
    7e50:	|      move.l 168(sp),d1
    7e54:	|      move.l 164(sp),d2
    7e58:	|      move.l 160(sp),d3
    7e5c:	|      jsr -66(a6)
    7e60:	|      move.l d0,156(sp)
    7e64:	|      move.l 156(sp),d0
    7e68:	|      move.l d0,1cfa2 <startIndex>
    7e6e:	|  ,-- bra.s 7eaa <setFileIndices+0x86>
	} else {
		// No file pointer - this means that we reuse the bigDataFile
		fp = bigDataFile;
    7e70:	'--|-> move.l 1cf9e <bigDataFile>,196(sp)
        Seek(fp, startIndex, OFFSET_BEGINNING);
    7e78:	   |   move.l 196(sp),184(sp)
    7e7e:	   |   move.l 1cfa2 <startIndex>,d0
    7e84:	   |   move.l d0,180(sp)
    7e88:	   |   moveq #-1,d0
    7e8a:	   |   move.l d0,176(sp)
    7e8e:	   |   move.l 1cfbe <DOSBase>,d0
    7e94:	   |   movea.l d0,a6
    7e96:	   |   move.l 184(sp),d1
    7e9a:	   |   move.l 180(sp),d2
    7e9e:	   |   move.l 176(sp),d3
    7ea2:	   |   jsr -66(a6)
    7ea6:	   |   move.l d0,172(sp)
	}
	sliceBusy = FALSE;
    7eaa:	   '-> clr.w 1c930 <sliceBusy>

	if (skipBefore > numLanguages) {
    7eb0:	       move.l 204(sp),d0
    7eb4:	       cmp.l 200(sp),d0
    7eb8:	   ,-- bls.s 7ecc <setFileIndices+0xa8>
		KPrintF("setFileIndices: Warning: Not a valid language ID! Using default instead.");
    7eba:	   |   pea 19379 <PutChar+0x112f>
    7ec0:	   |   jsr 177a8 <KPrintF>
    7ec6:	   |   addq.l #4,sp
		skipBefore = 0;
    7ec8:	   |   clr.l 204(sp)
	}

	// STRINGS
	int skipAfter = numLanguages - skipBefore;
    7ecc:	   '-> move.l 200(sp),d0
    7ed0:	       sub.l 204(sp),d0
    7ed4:	       move.l d0,188(sp)
	while (skipBefore) {
    7ed8:	   ,-- bra.s 7f16 <setFileIndices+0xf2>
        Seek(fp, get4bytes(fp),OFFSET_BEGINING);		
    7eda:	,--|-> move.l 196(sp),24(sp)
    7ee0:	|  |   move.l 196(sp),-(sp)
    7ee4:	|  |   jsr 718 <get4bytes>
    7eea:	|  |   addq.l #4,sp
    7eec:	|  |   move.l d0,20(sp)
    7ef0:	|  |   moveq #-1,d0
    7ef2:	|  |   move.l d0,16(sp)
    7ef6:	|  |   move.l 1cfbe <DOSBase>,d0
    7efc:	|  |   movea.l d0,a6
    7efe:	|  |   move.l 24(sp),d1
    7f02:	|  |   move.l 20(sp),d2
    7f06:	|  |   move.l 16(sp),d3
    7f0a:	|  |   jsr -66(a6)
    7f0e:	|  |   move.l d0,12(sp)
		skipBefore --;
    7f12:	|  |   subq.l #1,204(sp)
	while (skipBefore) {
    7f16:	|  '-> tst.l 204(sp)
    7f1a:	'----- bne.s 7eda <setFileIndices+0xb6>
	}
	startOfTextIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    7f1c:	       move.l 196(sp),152(sp)
    7f22:	       clr.l 148(sp)
    7f26:	       clr.l 144(sp)
    7f2a:	       move.l 1cfbe <DOSBase>,d0
    7f30:	       movea.l d0,a6
    7f32:	       move.l 152(sp),d1
    7f36:	       move.l 148(sp),d2
    7f3a:	       move.l 144(sp),d3
    7f3e:	       jsr -66(a6)
    7f42:	       move.l d0,140(sp)
    7f46:	       move.l 140(sp),d0
    7f4a:	       addq.l #4,d0
    7f4c:	       move.l d0,1cfaa <startOfTextIndex>

	Seek(fp, get4bytes (fp), OFFSET_BEGINNING);
    7f52:	       move.l 196(sp),136(sp)
    7f58:	       move.l 196(sp),-(sp)
    7f5c:	       jsr 718 <get4bytes>
    7f62:	       addq.l #4,sp
    7f64:	       move.l d0,132(sp)
    7f68:	       moveq #-1,d0
    7f6a:	       move.l d0,128(sp)
    7f6e:	       move.l 1cfbe <DOSBase>,d0
    7f74:	       movea.l d0,a6
    7f76:	       move.l 136(sp),d1
    7f7a:	       move.l 132(sp),d2
    7f7e:	       move.l 128(sp),d3
    7f82:	       jsr -66(a6)
    7f86:	       move.l d0,124(sp)

	while (skipAfter) {
    7f8a:	   ,-- bra.s 7fc8 <setFileIndices+0x1a4>
        Seek( fp, get4bytes (fp), OFFSET_BEGINING);
    7f8c:	,--|-> move.l 196(sp),40(sp)
    7f92:	|  |   move.l 196(sp),-(sp)
    7f96:	|  |   jsr 718 <get4bytes>
    7f9c:	|  |   addq.l #4,sp
    7f9e:	|  |   move.l d0,36(sp)
    7fa2:	|  |   moveq #-1,d0
    7fa4:	|  |   move.l d0,32(sp)
    7fa8:	|  |   move.l 1cfbe <DOSBase>,d0
    7fae:	|  |   movea.l d0,a6
    7fb0:	|  |   move.l 40(sp),d1
    7fb4:	|  |   move.l 36(sp),d2
    7fb8:	|  |   move.l 32(sp),d3
    7fbc:	|  |   jsr -66(a6)
    7fc0:	|  |   move.l d0,28(sp)
		skipAfter --;
    7fc4:	|  |   subq.l #1,188(sp)
	while (skipAfter) {
    7fc8:	|  '-> tst.l 188(sp)
    7fcc:	'----- bne.s 7f8c <setFileIndices+0x168>
	}

	startOfSubIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    7fce:	       move.l 196(sp),120(sp)
    7fd4:	       clr.l 116(sp)
    7fd8:	       clr.l 112(sp)
    7fdc:	       move.l 1cfbe <DOSBase>,d0
    7fe2:	       movea.l d0,a6
    7fe4:	       move.l 120(sp),d1
    7fe8:	       move.l 116(sp),d2
    7fec:	       move.l 112(sp),d3
    7ff0:	       jsr -66(a6)
    7ff4:	       move.l d0,108(sp)
    7ff8:	       move.l 108(sp),d0
    7ffc:	       addq.l #4,d0
    7ffe:	       move.l d0,1cfae <startOfSubIndex>
    Seek( fp, get4bytes (fp), OFFSET_CURRENT);
    8004:	       move.l 196(sp),104(sp)
    800a:	       move.l 196(sp),-(sp)
    800e:	       jsr 718 <get4bytes>
    8014:	       addq.l #4,sp
    8016:	       move.l d0,100(sp)
    801a:	       clr.l 96(sp)
    801e:	       move.l 1cfbe <DOSBase>,d0
    8024:	       movea.l d0,a6
    8026:	       move.l 104(sp),d1
    802a:	       move.l 100(sp),d2
    802e:	       move.l 96(sp),d3
    8032:	       jsr -66(a6)
    8036:	       move.l d0,92(sp)

	startOfObjectIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    803a:	       move.l 196(sp),88(sp)
    8040:	       clr.l 84(sp)
    8044:	       clr.l 80(sp)
    8048:	       move.l 1cfbe <DOSBase>,d0
    804e:	       movea.l d0,a6
    8050:	       move.l 88(sp),d1
    8054:	       move.l 84(sp),d2
    8058:	       move.l 80(sp),d3
    805c:	       jsr -66(a6)
    8060:	       move.l d0,76(sp)
    8064:	       move.l 76(sp),d0
    8068:	       addq.l #4,d0
    806a:	       move.l d0,1cfb2 <startOfObjectIndex>
	Seek (fp, get4bytes (fp), OFFSET_CURRENT);
    8070:	       move.l 196(sp),72(sp)
    8076:	       move.l 196(sp),-(sp)
    807a:	       jsr 718 <get4bytes>
    8080:	       addq.l #4,sp
    8082:	       move.l d0,68(sp)
    8086:	       clr.l 64(sp)
    808a:	       move.l 1cfbe <DOSBase>,d0
    8090:	       movea.l d0,a6
    8092:	       move.l 72(sp),d1
    8096:	       move.l 68(sp),d2
    809a:	       move.l 64(sp),d3
    809e:	       jsr -66(a6)
    80a2:	       move.l d0,60(sp)

	// Remember that the data section starts here
	startOfDataIndex =  Seek( fp, 0, OFFSET_CURRENT);
    80a6:	       move.l 196(sp),56(sp)
    80ac:	       clr.l 52(sp)
    80b0:	       clr.l 48(sp)
    80b4:	       move.l 1cfbe <DOSBase>,d0
    80ba:	       movea.l d0,a6
    80bc:	       move.l 56(sp),d1
    80c0:	       move.l 52(sp),d2
    80c4:	       move.l 48(sp),d3
    80c8:	       jsr -66(a6)
    80cc:	       move.l d0,44(sp)
    80d0:	       move.l 44(sp),d0
    80d4:	       move.l d0,1cfa6 <startOfDataIndex>
    80da:	       nop
    80dc:	       movem.l (sp)+,d2-d3/a6
    80e0:	       lea 180(sp),sp
    80e4:	       rts

000080e6 <GetVBR>:
static volatile APTR VBR=0;
static APTR SystemIrq;
 
struct View *ActiView;

static APTR GetVBR(void) {
    80e6:	    lea -20(sp),sp
    80ea:	    move.l a6,-(sp)
    80ec:	    move.l d7,-(sp)
	APTR vbr = 0;
    80ee:	    clr.l 24(sp)
	UWORD getvbr[] = { 0x4e7a, 0x0801, 0x4e73 }; // MOVEC.L VBR,D0 RTE
    80f2:	    move.w #20090,10(sp)
    80f8:	    move.w #2049,12(sp)
    80fe:	    move.w #20083,14(sp)

	if (SysBase->AttnFlags & AFF_68010) 
    8104:	    movea.l 1cfb6 <SysBase>,a0
    810a:	    move.w 296(a0),d0
    810e:	    move.w d0,d0
    8110:	    andi.l #65535,d0
    8116:	    moveq #1,d1
    8118:	    and.l d1,d0
    811a:	,-- beq.s 8148 <GetVBR+0x62>
		vbr = (APTR)Supervisor((ULONG (*)())getvbr);
    811c:	|   lea 28(sp),a0
    8120:	|   lea -18(a0),a0
    8124:	|   move.l a0,20(sp)
    8128:	|   move.l 1cfb6 <SysBase>,d0
    812e:	|   movea.l d0,a6
    8130:	|   move.l 20(sp),d7
    8134:	|   exg d7,a5
    8136:	|   jsr -30(a6)
    813a:	|   exg d7,a5
    813c:	|   move.l d0,16(sp)
    8140:	|   move.l 16(sp),d0
    8144:	|   move.l d0,24(sp)

	return vbr;
    8148:	'-> move.l 24(sp),d0
}
    814c:	    move.l (sp)+,d7
    814e:	    movea.l (sp)+,a6
    8150:	    lea 20(sp),sp
    8154:	    rts

00008156 <SetInterruptHandler>:

void SetInterruptHandler(APTR interrupt) {
	*(volatile APTR*)(((UBYTE*)VBR)+0x6c) = interrupt;
    8156:	movea.l 1cfdc <VBR>,a0
    815c:	lea 108(a0),a0
    8160:	move.l 4(sp),(a0)
}
    8164:	nop
    8166:	rts

00008168 <GetInterruptHandler>:

APTR GetInterruptHandler() {
	return *(volatile APTR*)(((UBYTE*)VBR)+0x6c);
    8168:	movea.l 1cfdc <VBR>,a0
    816e:	move.l 108(a0),d0
}
    8172:	rts

00008174 <TakeSystem>:
	UWORD tst=*(volatile UWORD*)&custom->dmaconr; //for compatiblity a1000
	(void)tst;
	while (*(volatile UWORD*)&custom->dmaconr&(1<<14)) {} //blitter busy wait
}

void TakeSystem() {
    8174:	       subq.l #8,sp
    8176:	       move.l a6,-(sp)
	KPrintF("TakeSystem: Run Forbid\n");
    8178:	       pea 193c2 <PutChar+0x1178>
    817e:	       jsr 177a8 <KPrintF>
    8184:	       addq.l #4,sp
	Forbid();
    8186:	       move.l 1cfb6 <SysBase>,d0
    818c:	       movea.l d0,a6
    818e:	       jsr -132(a6)
	//Save current interrupts and DMA settings so we can restore them upon exit. 
	KPrintF("TakeSystem: Saving Registers\n");
    8192:	       pea 193da <PutChar+0x1190>
    8198:	       jsr 177a8 <KPrintF>
    819e:	       addq.l #4,sp
	SystemADKCON=custom->adkconr;
    81a0:	       movea.l 1cfba <custom>,a0
    81a6:	       move.w 16(a0),d0
    81aa:	       move.w d0,1cfda <SystemADKCON>
	SystemInts=custom->intenar;
    81b0:	       movea.l 1cfba <custom>,a0
    81b6:	       move.w 28(a0),d0
    81ba:	       move.w d0,1cfd6 <SystemInts>
	SystemDMA=custom->dmaconr;
    81c0:	       movea.l 1cfba <custom>,a0
    81c6:	       move.w 2(a0),d0
    81ca:	       move.w d0,1cfd8 <SystemDMA>
	ActiView=GfxBase->ActiView; //store current view
    81d0:	       movea.l 1cfc2 <GfxBase>,a0
    81d6:	       move.l 34(a0),d0
    81da:	       move.l d0,1cfe4 <ActiView>

	KPrintF("TakeSystem: LoadView\n");
    81e0:	       pea 193f8 <PutChar+0x11ae>
    81e6:	       jsr 177a8 <KPrintF>
    81ec:	       addq.l #4,sp
	LoadView(0);
    81ee:	       clr.l 4(sp)
    81f2:	       move.l 1cfc2 <GfxBase>,d0
    81f8:	       movea.l d0,a6
    81fa:	       movea.l 4(sp),a1
    81fe:	       jsr -222(a6)
	KPrintF("TakeSystem: WaitTof\n");
    8202:	       pea 1940e <PutChar+0x11c4>
    8208:	       jsr 177a8 <KPrintF>
    820e:	       addq.l #4,sp
	WaitTOF();
    8210:	       move.l 1cfc2 <GfxBase>,d0
    8216:	       movea.l d0,a6
    8218:	       jsr -270(a6)
	WaitTOF();
    821c:	       move.l 1cfc2 <GfxBase>,d0
    8222:	       movea.l d0,a6
    8224:	       jsr -270(a6)

	KPrintF("TakeSystem: WaitVBL\n");
    8228:	       pea 19423 <PutChar+0x11d9>
    822e:	       jsr 177a8 <KPrintF>
    8234:	       addq.l #4,sp
	WaitVbl();
    8236:	       jsr 176dc <WaitVbl>
	WaitVbl();
    823c:	       jsr 176dc <WaitVbl>

	KPrintF("TakeSystem: Doing Blitter Stuff\n");
    8242:	       pea 19438 <PutChar+0x11ee>
    8248:	       jsr 177a8 <KPrintF>
    824e:	       addq.l #4,sp
	OwnBlitter();
    8250:	       move.l 1cfc2 <GfxBase>,d0
    8256:	       movea.l d0,a6
    8258:	       jsr -456(a6)
	WaitBlit();	
    825c:	       move.l 1cfc2 <GfxBase>,d0
    8262:	       movea.l d0,a6
    8264:	       jsr -228(a6)
	Disable();
    8268:	       move.l 1cfb6 <SysBase>,d0
    826e:	       movea.l d0,a6
    8270:	       jsr -120(a6)
	
	//custom->intena=0x7fff;//disable all interrupts
	//custom->intreq=0x7fff;//Clear any interrupts that were pending
	
	KPrintF("TakeSystem: Clear DMA\n");
    8274:	       pea 19459 <PutChar+0x120f>
    827a:	       jsr 177a8 <KPrintF>
    8280:	       addq.l #4,sp
	custom->dmacon=0x7fff;//Clear all DMA channels
    8282:	       movea.l 1cfba <custom>,a0
    8288:	       move.w #32767,150(a0)

	KPrintF("TakeSystem: Set all colors to black\n");
    828e:	       pea 19470 <PutChar+0x1226>
    8294:	       jsr 177a8 <KPrintF>
    829a:	       addq.l #4,sp
	//set all colors black
	for(int a=0;a<32;a++)
    829c:	       clr.l 8(sp)
    82a0:	   ,-- bra.s 82be <TakeSystem+0x14a>
		custom->color[a]=0;
    82a2:	,--|-> movea.l 1cfba <custom>,a0
    82a8:	|  |   move.l 8(sp),d0
    82ac:	|  |   addi.l #192,d0
    82b2:	|  |   add.l d0,d0
    82b4:	|  |   move.w #0,(0,a0,d0.l)
	for(int a=0;a<32;a++)
    82ba:	|  |   addq.l #1,8(sp)
    82be:	|  '-> moveq #31,d0
    82c0:	|      cmp.l 8(sp),d0
    82c4:	'----- bge.s 82a2 <TakeSystem+0x12e>

	WaitVbl();
    82c6:	       jsr 176dc <WaitVbl>
	WaitVbl();
    82cc:	       jsr 176dc <WaitVbl>

	KPrintF("TakeSystem: Save System interrupts\n");
    82d2:	       pea 19495 <PutChar+0x124b>
    82d8:	       jsr 177a8 <KPrintF>
    82de:	       addq.l #4,sp
	VBR=GetVBR();
    82e0:	       jsr 80e6 <GetVBR>
    82e6:	       move.l d0,1cfdc <VBR>
	SystemIrq=GetInterruptHandler(); //store interrupt register*/
    82ec:	       jsr 8168 <GetInterruptHandler>
    82f2:	       move.l d0,1cfe0 <SystemIrq>
}
    82f8:	       nop
    82fa:	       movea.l (sp)+,a6
    82fc:	       addq.l #8,sp
    82fe:	       rts

00008300 <FreeSystem>:

void FreeSystem() { 
    8300:	subq.l #4,sp
    8302:	move.l a6,-(sp)
	WaitVbl();
    8304:	jsr 176dc <WaitVbl>
	WaitBlit();
    830a:	move.l 1cfc2 <GfxBase>,d0
    8310:	movea.l d0,a6
    8312:	jsr -228(a6)
	custom->intena=0x7fff;//disable all interrupts
    8316:	movea.l 1cfba <custom>,a0
    831c:	move.w #32767,154(a0)
	custom->intreq=0x7fff;//Clear any interrupts that were pending
    8322:	movea.l 1cfba <custom>,a0
    8328:	move.w #32767,156(a0)
	custom->dmacon=0x7fff;//Clear all DMA channels
    832e:	movea.l 1cfba <custom>,a0
    8334:	move.w #32767,150(a0)

	//restore interrupts
	SetInterruptHandler(SystemIrq);
    833a:	move.l 1cfe0 <SystemIrq>,d0
    8340:	move.l d0,-(sp)
    8342:	jsr 8156 <SetInterruptHandler>
    8348:	addq.l #4,sp

	/*Restore system copper list(s). */
	custom->cop1lc=(ULONG)GfxBase->copinit;
    834a:	movea.l 1cfc2 <GfxBase>,a0
    8350:	move.l 38(a0),d0
    8354:	movea.l 1cfba <custom>,a0
    835a:	move.l d0,128(a0)
	custom->cop2lc=(ULONG)GfxBase->LOFlist;
    835e:	movea.l 1cfc2 <GfxBase>,a0
    8364:	move.l 50(a0),d0
    8368:	movea.l 1cfba <custom>,a0
    836e:	move.l d0,132(a0)
	custom->copjmp1=0x7fff; //start coppper
    8372:	movea.l 1cfba <custom>,a0
    8378:	move.w #32767,136(a0)

	/*Restore all interrupts and DMA settings. */
	//custom->intena=SystemInts|0x8000;
	custom->dmacon=SystemDMA|0x8000;
    837e:	move.w 1cfd8 <SystemDMA>,d0
    8384:	movea.l 1cfba <custom>,a0
    838a:	ori.w #-32768,d0
    838e:	move.w d0,150(a0)
	custom->adkcon=SystemADKCON|0x8000;
    8392:	move.w 1cfda <SystemADKCON>,d0
    8398:	movea.l 1cfba <custom>,a0
    839e:	ori.w #-32768,d0
    83a2:	move.w d0,158(a0)

	WaitBlit();	
    83a6:	move.l 1cfc2 <GfxBase>,d0
    83ac:	movea.l d0,a6
    83ae:	jsr -228(a6)
	DisownBlitter();
    83b2:	move.l 1cfc2 <GfxBase>,d0
    83b8:	movea.l d0,a6
    83ba:	jsr -462(a6)
	Enable();
    83be:	move.l 1cfb6 <SysBase>,d0
    83c4:	movea.l d0,a6
    83c6:	jsr -126(a6)

	LoadView(ActiView);
    83ca:	move.l 1cfe4 <ActiView>,4(sp)
    83d2:	move.l 1cfc2 <GfxBase>,d0
    83d8:	movea.l d0,a6
    83da:	movea.l 4(sp),a1
    83de:	jsr -222(a6)
	WaitTOF();
    83e2:	move.l 1cfc2 <GfxBase>,d0
    83e8:	movea.l d0,a6
    83ea:	jsr -270(a6)
	WaitTOF();
    83ee:	move.l 1cfc2 <GfxBase>,d0
    83f4:	movea.l d0,a6
    83f6:	jsr -270(a6)

	Permit();
    83fa:	move.l 1cfb6 <SysBase>,d0
    8400:	movea.l d0,a6
    8402:	jsr -138(a6)
}
    8406:	nop
    8408:	movea.l (sp)+,a6
    840a:	addq.l #4,sp
    840c:	rts

0000840e <main>:
static void Wait10() { WaitLine(0x10); }
static void Wait11() { WaitLine(0x11); }
static void Wait12() { WaitLine(0x12); }
static void Wait13() { WaitLine(0x13); }

int main(int argc, char *argv[]) {
    840e:	       lea -132(sp),sp
    8412:	       movem.l d2-d3/a6,-(sp)

	//int *bp = 0x200;
  	//*bp = 0;

	for(int i=0;i<1000;i++) {
    8416:	       clr.l 140(sp)
    841a:	   ,-- bra.s 8420 <main+0x12>
    841c:	,--|-> addq.l #1,140(sp)
    8420:	|  '-> cmpi.l #999,140(sp)
    8428:	'----- ble.s 841c <main+0xe>

	}

	SysBase = *((struct ExecBase**)4UL);
    842a:	       movea.w #4,a0
    842e:	       move.l (a0),d0
    8430:	       move.l d0,1cfb6 <SysBase>
	custom = (struct Custom*)0xdff000;	
    8436:	       move.l #14675968,1cfba <custom>


	// We will use the graphics library only to locate and restore the system copper list once we are through.
	GfxBase = (struct GfxBase *)OpenLibrary((CONST_STRPTR)"graphics.library",0);
    8440:	       move.l #103609,136(sp)
    8448:	       clr.l 132(sp)
    844c:	       move.l 1cfb6 <SysBase>,d0
    8452:	       movea.l d0,a6
    8454:	       movea.l 136(sp),a1
    8458:	       move.l 132(sp),d0
    845c:	       jsr -552(a6)
    8460:	       move.l d0,128(sp)
    8464:	       move.l 128(sp),d0
    8468:	       move.l d0,1cfc2 <GfxBase>
	if (!GfxBase)
    846e:	       move.l 1cfc2 <GfxBase>,d0
    8474:	   ,-- bne.s 848a <main+0x7c>
		Exit(0);
    8476:	   |   clr.l 124(sp)
    847a:	   |   move.l 1cfbe <DOSBase>,d0
    8480:	   |   movea.l d0,a6
    8482:	   |   move.l 124(sp),d1
    8486:	   |   jsr -144(a6)

	// used for printing
	DOSBase = (struct DosLibrary*)OpenLibrary((CONST_STRPTR)"dos.library", 0);
    848a:	   '-> move.l #103626,120(sp)
    8492:	       clr.l 116(sp)
    8496:	       move.l 1cfb6 <SysBase>,d0
    849c:	       movea.l d0,a6
    849e:	       movea.l 120(sp),a1
    84a2:	       move.l 116(sp),d0
    84a6:	       jsr -552(a6)
    84aa:	       move.l d0,112(sp)
    84ae:	       move.l 112(sp),d0
    84b2:	       move.l d0,1cfbe <DOSBase>
	if (!DOSBase)
    84b8:	       move.l 1cfbe <DOSBase>,d0
    84be:	   ,-- bne.s 84d4 <main+0xc6>
		Exit(0);
    84c0:	   |   clr.l 108(sp)
    84c4:	   |   move.l 1cfbe <DOSBase>,d0
    84ca:	   |   movea.l d0,a6
    84cc:	   |   move.l 108(sp),d1
    84d0:	   |   jsr -144(a6)

	MathIeeeSingBasBase = (struct MathIEEEBase *) OpenLibrary("mathieeesingbas.library", 0);	
    84d4:	   '-> move.l #103638,104(sp)
    84dc:	       clr.l 100(sp)
    84e0:	       move.l 1cfb6 <SysBase>,d0
    84e6:	       movea.l d0,a6
    84e8:	       movea.l 104(sp),a1
    84ec:	       move.l 100(sp),d0
    84f0:	       jsr -552(a6)
    84f4:	       move.l d0,96(sp)
    84f8:	       move.l 96(sp),d0
    84fc:	       move.l d0,1cfc6 <MathIeeeSingBasBase>
	if (!MathIeeeSingBasBase)
    8502:	       move.l 1cfc6 <MathIeeeSingBasBase>,d0
    8508:	   ,-- bne.s 851e <main+0x110>
		Exit(0);	
    850a:	   |   clr.l 92(sp)
    850e:	   |   move.l 1cfbe <DOSBase>,d0
    8514:	   |   movea.l d0,a6
    8516:	   |   move.l 92(sp),d1
    851a:	   |   jsr -144(a6)

	MathIeeeSingTransBase = (struct MathIEEEBase *) OpenLibrary("mathieeesingtrans.library",0);													
    851e:	   '-> move.l #103662,88(sp)
    8526:	       clr.l 84(sp)
    852a:	       move.l 1cfb6 <SysBase>,d0
    8530:	       movea.l d0,a6
    8532:	       movea.l 88(sp),a1
    8536:	       move.l 84(sp),d0
    853a:	       jsr -552(a6)
    853e:	       move.l d0,80(sp)
    8542:	       move.l 80(sp),d0
    8546:	       move.l d0,1cfca <MathIeeeSingTransBase>
	if (!MathIeeeSingTransBase)
    854c:	       move.l 1cfca <MathIeeeSingTransBase>,d0
    8552:	   ,-- bne.s 8568 <main+0x15a>
		Exit(0);
    8554:	   |   clr.l 76(sp)
    8558:	   |   move.l 1cfbe <DOSBase>,d0
    855e:	   |   movea.l d0,a6
    8560:	   |   move.l 76(sp),d1
    8564:	   |   jsr -144(a6)

	MathIeeeDoubTransBase =  (struct MathIEEEBase *) OpenLibrary("mathieeedoubtrans.library",0);
    8568:	   '-> move.l #103688,72(sp)
    8570:	       clr.l 68(sp)
    8574:	       move.l 1cfb6 <SysBase>,d0
    857a:	       movea.l d0,a6
    857c:	       movea.l 72(sp),a1
    8580:	       move.l 68(sp),d0
    8584:	       jsr -552(a6)
    8588:	       move.l d0,64(sp)
    858c:	       move.l 64(sp),d0
    8590:	       move.l d0,1cfd2 <MathIeeeDoubTransBase>
	if (!MathIeeeDoubTransBase)		
    8596:	       move.l 1cfd2 <MathIeeeDoubTransBase>,d0
    859c:	   ,-- bne.s 85b2 <main+0x1a4>
		Exit(0);
    859e:	   |   clr.l 60(sp)
    85a2:	   |   move.l 1cfbe <DOSBase>,d0
    85a8:	   |   movea.l d0,a6
    85aa:	   |   move.l 60(sp),d1
    85ae:	   |   jsr -144(a6)

	MathIeeeDoubBasBase = (struct MathIEEEBase *) OpenLibrary("mathieeedoubbas.library",0);
    85b2:	   '-> move.l #103714,56(sp)
    85ba:	       clr.l 52(sp)
    85be:	       move.l 1cfb6 <SysBase>,d0
    85c4:	       movea.l d0,a6
    85c6:	       movea.l 56(sp),a1
    85ca:	       move.l 52(sp),d0
    85ce:	       jsr -552(a6)
    85d2:	       move.l d0,48(sp)
    85d6:	       move.l 48(sp),d0
    85da:	       move.l d0,1cfce <MathIeeeDoubBasBase>
	if( !MathIeeeDoubBasBase) 
    85e0:	       move.l 1cfce <MathIeeeDoubBasBase>,d0
    85e6:	   ,-- bne.s 85fc <main+0x1ee>
		Exit(0);
    85e8:	   |   clr.l 44(sp)
    85ec:	   |   move.l 1cfbe <DOSBase>,d0
    85f2:	   |   movea.l d0,a6
    85f4:	   |   move.l 44(sp),d1
    85f8:	   |   jsr -144(a6)
	

	KPrintF(" debugger from Amiga Test 035!\n");
    85fc:	   '-> pea 1953a <PutChar+0x12f0>
    8602:	       jsr 177a8 <KPrintF>
    8608:	       addq.l #4,sp

	Write(Output(), (APTR)"Hello console Test 035!\n", 25);
    860a:	       move.l 1cfbe <DOSBase>,d0
    8610:	       movea.l d0,a6
    8612:	       jsr -60(a6)
    8616:	       move.l d0,40(sp)
    861a:	       move.l 40(sp),d0
    861e:	       move.l d0,36(sp)
    8622:	       move.l #103770,32(sp)
    862a:	       moveq #25,d0
    862c:	       move.l d0,28(sp)
    8630:	       move.l 1cfbe <DOSBase>,d0
    8636:	       movea.l d0,a6
    8638:	       move.l 36(sp),d1
    863c:	       move.l 32(sp),d2
    8640:	       move.l 28(sp),d3
    8644:	       jsr -48(a6)
    8648:	       move.l d0,24(sp)
	Delay(50);
    864c:	       moveq #50,d0
    864e:	       move.l d0,20(sp)
    8652:	       move.l 1cfbe <DOSBase>,d0
    8658:	       movea.l d0,a6
    865a:	       move.l 20(sp),d1
    865e:	       jsr -198(a6)
	if(p61Init(module) != 0)
		KPrintF("p61Init failed!\n");
#endif
	warpmode(0);*/

	KPrintF("Taking System\n");
    8662:	       pea 19573 <PutChar+0x1329>
    8668:	       jsr 177a8 <KPrintF>
    866e:	       addq.l #4,sp
	TakeSystem();
    8670:	       jsr 8174 <TakeSystem>
	KPrintF("System Taken\n");
    8676:	       pea 19582 <PutChar+0x1338>
    867c:	       jsr 177a8 <KPrintF>
    8682:	       addq.l #4,sp

	custom->dmacon = 0x87ff;
    8684:	       movea.l 1cfba <custom>,a0
    868a:	       move.w #-30721,150(a0)
	WaitVbl();
    8690:	       jsr 176dc <WaitVbl>

	KPrintF("Starting main_sludge\n");
    8696:	       pea 19590 <PutChar+0x1346>
    869c:	       jsr 177a8 <KPrintF>
    86a2:	       addq.l #4,sp
	main_sludge(argc, argv);	
    86a4:	       move.l 152(sp),-(sp)
    86a8:	       move.l 152(sp),-(sp)
    86ac:	       jsr 4da0 <main_sludge>
    86b2:	       addq.l #8,sp
#ifdef MUSIC
	p61End();
#endif

	// END
	FreeSystem();
    86b4:	       jsr 8300 <FreeSystem>

	CloseLibrary((struct Library*)DOSBase);
    86ba:	       move.l 1cfbe <DOSBase>,16(sp)
    86c2:	       move.l 1cfb6 <SysBase>,d0
    86c8:	       movea.l d0,a6
    86ca:	       movea.l 16(sp),a1
    86ce:	       jsr -414(a6)
	CloseLibrary((struct Library*)GfxBase);
    86d2:	       move.l 1cfc2 <GfxBase>,12(sp)
    86da:	       move.l 1cfb6 <SysBase>,d0
    86e0:	       movea.l d0,a6
    86e2:	       movea.l 12(sp),a1
    86e6:	       jsr -414(a6)
    86ea:	       moveq #0,d0
}
    86ec:	       movem.l (sp)+,d2-d3/a6
    86f0:	       lea 132(sp),sp
    86f4:	       rts

000086f6 <addStatusBar>:
#include "support/gcc8_c_support.h"

struct statusStuff mainStatus;
struct statusStuff * nowStatus = & mainStatus;

void addStatusBar () {
    86f6:	    lea -16(sp),sp
    86fa:	    move.l a6,-(sp)
	struct statusBar * newStat = AllocVec(sizeof(struct statusBar), MEMF_ANY);
    86fc:	    moveq #8,d0
    86fe:	    move.l d0,16(sp)
    8702:	    clr.l 12(sp)
    8706:	    move.l 1cfb6 <SysBase>,d0
    870c:	    movea.l d0,a6
    870e:	    move.l 16(sp),d0
    8712:	    move.l 12(sp),d1
    8716:	    jsr -684(a6)
    871a:	    move.l d0,8(sp)
    871e:	    move.l 8(sp),d0
    8722:	    move.l d0,4(sp)
	if (!newStat) {
    8726:	,-- bne.s 8756 <addStatusBar+0x60>
		newStat -> next = nowStatus -> firstStatusBar;
    8728:	|   movea.l 1c932 <nowStatus>,a0
    872e:	|   move.l (a0),d0
    8730:	|   movea.l 4(sp),a0
    8734:	|   move.l d0,4(a0)
		newStat -> text = copyString ("");
    8738:	|   pea 18f57 <PutChar+0xd0d>
    873e:	|   jsr b8 <copyString>
    8744:	|   addq.l #4,sp
    8746:	|   movea.l 4(sp),a0
    874a:	|   move.l d0,(a0)
		nowStatus -> firstStatusBar = newStat;
    874c:	|   movea.l 1c932 <nowStatus>,a0
    8752:	|   move.l 4(sp),(a0)
	}
}
    8756:	'-> nop
    8758:	    movea.l (sp)+,a6
    875a:	    lea 16(sp),sp
    875e:	    rts

00008760 <clearStatusBar>:

void clearStatusBar () {
    8760:	       lea -16(sp),sp
    8764:	       move.l a6,-(sp)
	struct statusBar * stat = nowStatus -> firstStatusBar;
    8766:	       movea.l 1c932 <nowStatus>,a0
    876c:	       move.l (a0),16(sp)
	struct statusBar * kill;
	nowStatus -> litStatus = -1;
    8770:	       movea.l 1c932 <nowStatus>,a0
    8776:	       moveq #-1,d0
    8778:	       move.l d0,6(a0)
	while (stat) {
    877c:	   ,-- bra.s 87bc <clearStatusBar+0x5c>
		kill = stat;
    877e:	,--|-> move.l 16(sp),12(sp)
		stat = stat -> next;
    8784:	|  |   movea.l 16(sp),a0
    8788:	|  |   move.l 4(a0),16(sp)
		FreeVec(kill -> text);
    878e:	|  |   movea.l 12(sp),a0
    8792:	|  |   move.l (a0),8(sp)
    8796:	|  |   move.l 1cfb6 <SysBase>,d0
    879c:	|  |   movea.l d0,a6
    879e:	|  |   movea.l 8(sp),a1
    87a2:	|  |   jsr -690(a6)
		FreeVec(kill);
    87a6:	|  |   move.l 12(sp),4(sp)
    87ac:	|  |   move.l 1cfb6 <SysBase>,d0
    87b2:	|  |   movea.l d0,a6
    87b4:	|  |   movea.l 4(sp),a1
    87b8:	|  |   jsr -690(a6)
	while (stat) {
    87bc:	|  '-> tst.l 16(sp)
    87c0:	'----- bne.s 877e <clearStatusBar+0x1e>
	}
	nowStatus -> firstStatusBar = NULL;
    87c2:	       movea.l 1c932 <nowStatus>,a0
    87c8:	       clr.l (a0)
}
    87ca:	       nop
    87cc:	       movea.l (sp)+,a6
    87ce:	       lea 16(sp),sp
    87d2:	       rts

000087d4 <initStatusBar>:

void initStatusBar () {
	mainStatus.firstStatusBar = NULL;
    87d4:	clr.l 1cfe8 <mainStatus>
	mainStatus.alignStatus = IN_THE_CENTRE;
    87da:	move.w #-1,1cfec <mainStatus+0x4>
	mainStatus.litStatus = -1;
    87e2:	moveq #-1,d0
    87e4:	move.l d0,1cfee <mainStatus+0x6>
	mainStatus.statusX = 10;
    87ea:	moveq #10,d0
    87ec:	move.l d0,1cff2 <mainStatus+0xa>
	mainStatus.statusY = winHeight - 15;
    87f2:	movea.l 1cf02 <winHeight>,a0
    87f8:	lea -15(a0),a0
    87fc:	move.l a0,d0
    87fe:	move.l d0,1cff6 <mainStatus+0xe>
	//statusBarColour (255, 255, 255); Amiga Todo: Amigize this
	//statusBarLitColour (255, 255, 128); Amiga Todo: Amigize this
}
    8804:	nop
    8806:	rts

00008808 <killLastStatus>:

void killLastStatus () {
    8808:	    lea -12(sp),sp
    880c:	    move.l a6,-(sp)
	if (nowStatus -> firstStatusBar) {
    880e:	    movea.l 1c932 <nowStatus>,a0
    8814:	    move.l (a0),d0
    8816:	,-- beq.s 8860 <killLastStatus+0x58>
		struct statusBar * kill = nowStatus -> firstStatusBar;
    8818:	|   movea.l 1c932 <nowStatus>,a0
    881e:	|   move.l (a0),12(sp)
		nowStatus -> firstStatusBar = kill -> next;
    8822:	|   movea.l 1c932 <nowStatus>,a0
    8828:	|   movea.l 12(sp),a1
    882c:	|   move.l 4(a1),d0
    8830:	|   move.l d0,(a0)
		FreeVec(kill -> text);
    8832:	|   movea.l 12(sp),a0
    8836:	|   move.l (a0),8(sp)
    883a:	|   move.l 1cfb6 <SysBase>,d0
    8840:	|   movea.l d0,a6
    8842:	|   movea.l 8(sp),a1
    8846:	|   jsr -690(a6)
		FreeVec(kill);
    884a:	|   move.l 12(sp),4(sp)
    8850:	|   move.l 1cfb6 <SysBase>,d0
    8856:	|   movea.l d0,a6
    8858:	|   movea.l 4(sp),a1
    885c:	|   jsr -690(a6)
	}
}
    8860:	'-> nop
    8862:	    movea.l (sp)+,a6
    8864:	    lea 12(sp),sp
    8868:	    rts

0000886a <positionStatus>:
	}
	return TRUE;
}

void positionStatus (int x, int y) {
	nowStatus -> statusX = x;
    886a:	movea.l 1c932 <nowStatus>,a0
    8870:	move.l 4(sp),10(a0)
	nowStatus -> statusY = y;
    8876:	movea.l 1c932 <nowStatus>,a0
    887c:	move.l 8(sp),14(a0)
}
    8882:	nop
    8884:	rts

00008886 <saveStatusBars>:


void saveStatusBars (BPTR fp) {
    8886:	       lea -100(sp),sp
    888a:	       move.l a6,-(sp)
    888c:	       move.l d2,-(sp)
	struct statusBar * viewLine = nowStatus -> firstStatusBar;
    888e:	       movea.l 1c932 <nowStatus>,a0
    8894:	       move.l (a0),104(sp)

	put2bytes (nowStatus -> alignStatus, fp);
    8898:	       movea.l 1c932 <nowStatus>,a0
    889e:	       move.w 4(a0),d0
    88a2:	       move.w d0,d0
    88a4:	       andi.l #65535,d0
    88aa:	       move.l 112(sp),-(sp)
    88ae:	       move.l d0,-(sp)
    88b0:	       jsr 8d0 <put2bytes>
    88b6:	       addq.l #8,sp
	putSigned (nowStatus -> litStatus, fp);
    88b8:	       movea.l 1c932 <nowStatus>,a0
    88be:	       move.l 6(a0),d0
    88c2:	       move.l d0,d0
    88c4:	       movea.w d0,a0
    88c6:	       move.l 112(sp),-(sp)
    88ca:	       move.l a0,-(sp)
    88cc:	       jsr a9c <putSigned>
    88d2:	       addq.l #8,sp
	put2bytes (nowStatus -> statusX, fp);
    88d4:	       movea.l 1c932 <nowStatus>,a0
    88da:	       move.l 10(a0),d0
    88de:	       move.l 112(sp),-(sp)
    88e2:	       move.l d0,-(sp)
    88e4:	       jsr 8d0 <put2bytes>
    88ea:	       addq.l #8,sp
	put2bytes (nowStatus -> statusY, fp);
    88ec:	       movea.l 1c932 <nowStatus>,a0
    88f2:	       move.l 14(a0),d0
    88f6:	       move.l 112(sp),-(sp)
    88fa:	       move.l d0,-(sp)
    88fc:	       jsr 8d0 <put2bytes>
    8902:	       addq.l #8,sp

	FPutC (fp, nowStatus -> statusR);
    8904:	       move.l 112(sp),100(sp)
    890a:	       movea.l 1c932 <nowStatus>,a0
    8910:	       move.l 18(a0),96(sp)
    8916:	       move.l 1cfbe <DOSBase>,d0
    891c:	       movea.l d0,a6
    891e:	       move.l 100(sp),d1
    8922:	       move.l 96(sp),d2
    8926:	       jsr -312(a6)
    892a:	       move.l d0,92(sp)
	FPutC (fp, nowStatus -> statusG);
    892e:	       move.l 112(sp),88(sp)
    8934:	       movea.l 1c932 <nowStatus>,a0
    893a:	       move.l 22(a0),84(sp)
    8940:	       move.l 1cfbe <DOSBase>,d0
    8946:	       movea.l d0,a6
    8948:	       move.l 88(sp),d1
    894c:	       move.l 84(sp),d2
    8950:	       jsr -312(a6)
    8954:	       move.l d0,80(sp)
	FPutC (fp, nowStatus -> statusB);
    8958:	       move.l 112(sp),76(sp)
    895e:	       movea.l 1c932 <nowStatus>,a0
    8964:	       move.l 26(a0),72(sp)
    896a:	       move.l 1cfbe <DOSBase>,d0
    8970:	       movea.l d0,a6
    8972:	       move.l 76(sp),d1
    8976:	       move.l 72(sp),d2
    897a:	       jsr -312(a6)
    897e:	       move.l d0,68(sp)
	FPutC (fp, nowStatus -> statusLR);
    8982:	       move.l 112(sp),64(sp)
    8988:	       movea.l 1c932 <nowStatus>,a0
    898e:	       move.l 30(a0),60(sp)
    8994:	       move.l 1cfbe <DOSBase>,d0
    899a:	       movea.l d0,a6
    899c:	       move.l 64(sp),d1
    89a0:	       move.l 60(sp),d2
    89a4:	       jsr -312(a6)
    89a8:	       move.l d0,56(sp)
	FPutC (fp, nowStatus -> statusLG);
    89ac:	       move.l 112(sp),52(sp)
    89b2:	       movea.l 1c932 <nowStatus>,a0
    89b8:	       move.l 34(a0),48(sp)
    89be:	       move.l 1cfbe <DOSBase>,d0
    89c4:	       movea.l d0,a6
    89c6:	       move.l 52(sp),d1
    89ca:	       move.l 48(sp),d2
    89ce:	       jsr -312(a6)
    89d2:	       move.l d0,44(sp)
	FPutC (fp, nowStatus -> statusLB);
    89d6:	       move.l 112(sp),40(sp)
    89dc:	       movea.l 1c932 <nowStatus>,a0
    89e2:	       move.l 38(a0),36(sp)
    89e8:	       move.l 1cfbe <DOSBase>,d0
    89ee:	       movea.l d0,a6
    89f0:	       move.l 40(sp),d1
    89f4:	       move.l 36(sp),d2
    89f8:	       jsr -312(a6)
    89fc:	       move.l d0,32(sp)

	// Write what's being said
	while (viewLine) {
    8a00:	   ,-- bra.s 8a44 <saveStatusBars+0x1be>
		FPutC (fp,1);
    8a02:	,--|-> move.l 112(sp),16(sp)
    8a08:	|  |   moveq #1,d0
    8a0a:	|  |   move.l d0,12(sp)
    8a0e:	|  |   move.l 1cfbe <DOSBase>,d0
    8a14:	|  |   movea.l d0,a6
    8a16:	|  |   move.l 16(sp),d1
    8a1a:	|  |   move.l 12(sp),d2
    8a1e:	|  |   jsr -312(a6)
    8a22:	|  |   move.l d0,8(sp)
		writeString (viewLine -> text, fp);
    8a26:	|  |   movea.l 104(sp),a0
    8a2a:	|  |   move.l (a0),d0
    8a2c:	|  |   move.l 112(sp),-(sp)
    8a30:	|  |   move.l d0,-(sp)
    8a32:	|  |   jsr bd8 <writeString>
    8a38:	|  |   addq.l #8,sp
		viewLine = viewLine -> next;
    8a3a:	|  |   movea.l 104(sp),a0
    8a3e:	|  |   move.l 4(a0),104(sp)
	while (viewLine) {
    8a44:	|  '-> tst.l 104(sp)
    8a48:	'----- bne.s 8a02 <saveStatusBars+0x17c>
	}
	FPutC (fp,0);
    8a4a:	       move.l 112(sp),28(sp)
    8a50:	       clr.l 24(sp)
    8a54:	       move.l 1cfbe <DOSBase>,d0
    8a5a:	       movea.l d0,a6
    8a5c:	       move.l 28(sp),d1
    8a60:	       move.l 24(sp),d2
    8a64:	       jsr -312(a6)
    8a68:	       move.l d0,20(sp)
}
    8a6c:	       nop
    8a6e:	       move.l (sp)+,d2
    8a70:	       movea.l (sp)+,a6
    8a72:	       lea 100(sp),sp
    8a76:	       rts

00008a78 <setLitStatus>:

void setLitStatus (int i) {
	nowStatus -> litStatus = i;
    8a78:	movea.l 1c932 <nowStatus>,a0
    8a7e:	move.l 4(sp),6(a0)
}
    8a84:	nop
    8a86:	rts

00008a88 <setStatusBar>:

void setStatusBar (char * txt) {
    8a88:	    subq.l #4,sp
    8a8a:	    move.l a6,-(sp)
    8a8c:	    move.l a2,-(sp)
	if (nowStatus -> firstStatusBar) {
    8a8e:	    movea.l 1c932 <nowStatus>,a0
    8a94:	    move.l (a0),d0
    8a96:	,-- beq.s 8aca <setStatusBar+0x42>
		FreeVec(nowStatus -> firstStatusBar -> text);
    8a98:	|   movea.l 1c932 <nowStatus>,a0
    8a9e:	|   movea.l (a0),a0
    8aa0:	|   move.l (a0),8(sp)
    8aa4:	|   move.l 1cfb6 <SysBase>,d0
    8aaa:	|   movea.l d0,a6
    8aac:	|   movea.l 8(sp),a1
    8ab0:	|   jsr -690(a6)
		nowStatus -> firstStatusBar -> text = copyString (txt);
    8ab4:	|   movea.l 1c932 <nowStatus>,a0
    8aba:	|   movea.l (a0),a2
    8abc:	|   move.l 16(sp),-(sp)
    8ac0:	|   jsr b8 <copyString>
    8ac6:	|   addq.l #4,sp
    8ac8:	|   move.l d0,(a2)
	}
}
    8aca:	'-> nop
    8acc:	    movea.l (sp)+,a2
    8ace:	    movea.l (sp)+,a6
    8ad0:	    addq.l #4,sp
    8ad2:	    rts

00008ad4 <statusBarText>:

const char * statusBarText () {
	if (nowStatus -> firstStatusBar) {
    8ad4:	       movea.l 1c932 <nowStatus>,a0
    8ada:	       move.l (a0),d0
    8adc:	,----- beq.s 8aea <statusBarText+0x16>
		return nowStatus -> firstStatusBar -> text;
    8ade:	|      movea.l 1c932 <nowStatus>,a0
    8ae4:	|      movea.l (a0),a0
    8ae6:	|      move.l (a0),d0
    8ae8:	|  ,-- bra.s 8af0 <statusBarText+0x1c>
	} else {
		return "";
    8aea:	'--|-> move.l #102231,d0
	}
    8af0:	   '-> rts

00008af2 <killZBuffer>:

#define EMULATOR

struct zBufferData *zBuffer;

void killZBuffer () {
    8af2:	       lea -12(sp),sp
    8af6:	       move.l a6,-(sp)
	struct zBufferData *zbuffercursor =  zBuffer;
    8af8:	       move.l 1d012 <zBuffer>,12(sp)

	while(zbuffercursor) {
    8b00:	   ,-- bra.s 8b28 <killZBuffer+0x36>
		struct zBufferData *deleteme = zbuffercursor;
    8b02:	,--|-> move.l 12(sp),8(sp)
		zbuffercursor = zbuffercursor->nextPanel;
    8b08:	|  |   movea.l 12(sp),a0
    8b0c:	|  |   move.l 24(a0),12(sp)
		FreeVec(deleteme);
    8b12:	|  |   move.l 8(sp),4(sp)
    8b18:	|  |   move.l 1cfb6 <SysBase>,d0
    8b1e:	|  |   movea.l d0,a6
    8b20:	|  |   movea.l 4(sp),a1
    8b24:	|  |   jsr -690(a6)
	while(zbuffercursor) {
    8b28:	|  '-> tst.l 12(sp)
    8b2c:	'----- bne.s 8b02 <killZBuffer+0x10>
	}
	zBuffer = NULL;
    8b2e:	       clr.l 1d012 <zBuffer>
}
    8b34:	       nop
    8b36:	       movea.l (sp)+,a6
    8b38:	       lea 12(sp),sp
    8b3c:	       rts

00008b3e <setZBuffer>:

BOOL setZBuffer (unsigned int y) {
    8b3e:	                lea -304(sp),sp
    8b42:	                movem.l d2-d4/a2/a6,-(sp)
	int x, n;
	ULONG stillToGo = 0;
    8b46:	                clr.l 314(sp)
	int yPalette[16], sorted[16], sortback[16];

	killZBuffer ();	
    8b4a:	                jsr 8af2 <killZBuffer>
	
	if (! openFileFromNum (y)) return FALSE;
    8b50:	                move.l 328(sp),d0
    8b54:	                move.l d0,-(sp)
    8b56:	                jsr 7bdc <openFileFromNum>
    8b5c:	                addq.l #4,sp
    8b5e:	                tst.l d0
    8b60:	            ,-- bne.s 8b68 <setZBuffer+0x2a>
    8b62:	            |   clr.w d0
    8b64:	,-----------|-- bra.w 8e26 <setZBuffer+0x2e8>
	
	if (FGetC (bigDataFile) != 'a' || FGetC (bigDataFile) != 's' || FGetC (bigDataFile) != 'z' || FGetC (bigDataFile) != 'b') 
    8b68:	|           '-> move.l 1cf9e <bigDataFile>,310(sp)
    8b70:	|               move.l 1cfbe <DOSBase>,d0
    8b76:	|               movea.l d0,a6
    8b78:	|               move.l 310(sp),d1
    8b7c:	|               jsr -306(a6)
    8b80:	|               move.l d0,306(sp)
    8b84:	|               move.l 306(sp),d0
    8b88:	|               moveq #97,d1
    8b8a:	|               cmp.l d0,d1
    8b8c:	|        ,----- bne.s 8c00 <setZBuffer+0xc2>
    8b8e:	|        |      move.l 1cf9e <bigDataFile>,302(sp)
    8b96:	|        |      move.l 1cfbe <DOSBase>,d0
    8b9c:	|        |      movea.l d0,a6
    8b9e:	|        |      move.l 302(sp),d1
    8ba2:	|        |      jsr -306(a6)
    8ba6:	|        |      move.l d0,298(sp)
    8baa:	|        |      move.l 298(sp),d0
    8bae:	|        |      moveq #115,d1
    8bb0:	|        |      cmp.l d0,d1
    8bb2:	|        +----- bne.s 8c00 <setZBuffer+0xc2>
    8bb4:	|        |      move.l 1cf9e <bigDataFile>,294(sp)
    8bbc:	|        |      move.l 1cfbe <DOSBase>,d0
    8bc2:	|        |      movea.l d0,a6
    8bc4:	|        |      move.l 294(sp),d1
    8bc8:	|        |      jsr -306(a6)
    8bcc:	|        |      move.l d0,290(sp)
    8bd0:	|        |      move.l 290(sp),d0
    8bd4:	|        |      moveq #122,d1
    8bd6:	|        |      cmp.l d0,d1
    8bd8:	|        +----- bne.s 8c00 <setZBuffer+0xc2>
    8bda:	|        |      move.l 1cf9e <bigDataFile>,286(sp)
    8be2:	|        |      move.l 1cfbe <DOSBase>,d0
    8be8:	|        |      movea.l d0,a6
    8bea:	|        |      move.l 286(sp),d1
    8bee:	|        |      jsr -306(a6)
    8bf2:	|        |      move.l d0,282(sp)
    8bf6:	|        |      move.l 282(sp),d0
    8bfa:	|        |      moveq #98,d1
    8bfc:	|        |      cmp.l d0,d1
    8bfe:	|        |  ,-- beq.s 8c14 <setZBuffer+0xd6>
	{ 
		 KPrintF("Not a Z-buffer file");
    8c00:	|        '--|-> pea 195cd <PutChar+0x1383>
    8c06:	|           |   jsr 177a8 <KPrintF>
    8c0c:	|           |   addq.l #4,sp
		 return FALSE;
    8c0e:	|           |   clr.w d0
    8c10:	+-----------|-- bra.w 8e26 <setZBuffer+0x2e8>
	}

	UWORD numelements = FGetC(bigDataFile);
    8c14:	|           '-> move.l 1cf9e <bigDataFile>,278(sp)
    8c1c:	|               move.l 1cfbe <DOSBase>,d0
    8c22:	|               movea.l d0,a6
    8c24:	|               move.l 278(sp),d1
    8c28:	|               jsr -306(a6)
    8c2c:	|               move.l d0,274(sp)
    8c30:	|               move.l 274(sp),d0
    8c34:	|               move.w d0,322(sp)

	UWORD size;
	UWORD count;

	zBuffer = AllocVec(sizeof(struct zBufferData), MEMF_ANY);
    8c38:	|               moveq #28,d0
    8c3a:	|               move.l d0,270(sp)
    8c3e:	|               clr.l 266(sp)
    8c42:	|               move.l 1cfb6 <SysBase>,d0
    8c48:	|               movea.l d0,a6
    8c4a:	|               move.l 270(sp),d0
    8c4e:	|               move.l 266(sp),d1
    8c52:	|               jsr -684(a6)
    8c56:	|               move.l d0,262(sp)
    8c5a:	|               move.l 262(sp),d0
    8c5e:	|               move.l d0,1d012 <zBuffer>

	struct zBufferData *currentitem;
	currentitem = zBuffer;
    8c64:	|               move.l 1d012 <zBuffer>,318(sp)

	while(numelements--)
    8c6c:	|     ,-------- bra.w 8e0c <setZBuffer+0x2ce>
	{		
		currentitem->width = get2bytes (bigDataFile);
    8c70:	|  ,--|-------> move.l 1cf9e <bigDataFile>,d0
    8c76:	|  |  |         move.l d0,-(sp)
    8c78:	|  |  |         jsr 6bc <get2bytes>
    8c7e:	|  |  |         addq.l #4,sp
    8c80:	|  |  |         movea.l 318(sp),a0
    8c84:	|  |  |         move.l d0,(a0)
		currentitem->height = get2bytes (bigDataFile);
    8c86:	|  |  |         move.l 1cf9e <bigDataFile>,d0
    8c8c:	|  |  |         move.l d0,-(sp)
    8c8e:	|  |  |         jsr 6bc <get2bytes>
    8c94:	|  |  |         addq.l #4,sp
    8c96:	|  |  |         movea.l 318(sp),a0
    8c9a:	|  |  |         move.l d0,4(a0)

		currentitem->topx = get2bytes (bigDataFile);
    8c9e:	|  |  |         move.l 1cf9e <bigDataFile>,d0
    8ca4:	|  |  |         move.l d0,-(sp)
    8ca6:	|  |  |         jsr 6bc <get2bytes>
    8cac:	|  |  |         addq.l #4,sp
    8cae:	|  |  |         movea.l 318(sp),a0
    8cb2:	|  |  |         move.l d0,8(a0)
		currentitem->topy = get2bytes (bigDataFile);
    8cb6:	|  |  |         move.l 1cf9e <bigDataFile>,d0
    8cbc:	|  |  |         move.l d0,-(sp)
    8cbe:	|  |  |         jsr 6bc <get2bytes>
    8cc4:	|  |  |         addq.l #4,sp
    8cc6:	|  |  |         movea.l 318(sp),a0
    8cca:	|  |  |         move.l d0,12(a0)
		currentitem->yz = get2bytes (bigDataFile);
    8cce:	|  |  |         move.l 1cf9e <bigDataFile>,d0
    8cd4:	|  |  |         move.l d0,-(sp)
    8cd6:	|  |  |         jsr 6bc <get2bytes>
    8cdc:	|  |  |         addq.l #4,sp
    8cde:	|  |  |         movea.l 318(sp),a0
    8ce2:	|  |  |         move.l d0,16(a0)

		UWORD size = currentitem->width * currentitem->height / 8;
    8ce6:	|  |  |         movea.l 318(sp),a0
    8cea:	|  |  |         move.l (a0),d0
    8cec:	|  |  |         movea.l 318(sp),a0
    8cf0:	|  |  |         move.l 4(a0),d1
    8cf4:	|  |  |         move.l d1,-(sp)
    8cf6:	|  |  |         move.l d0,-(sp)
    8cf8:	|  |  |         jsr 18134 <__mulsi3>
    8cfe:	|  |  |         addq.l #8,sp
    8d00:	|  |  |         tst.l d0
    8d02:	|  |  |     ,-- bge.s 8d06 <setZBuffer+0x1c8>
    8d04:	|  |  |     |   addq.l #7,d0
    8d06:	|  |  |     '-> asr.l #3,d0
    8d08:	|  |  |         move.w d0,260(sp)
		currentitem->bitplane = AllocVec( size, MEMF_CHIP);
    8d0c:	|  |  |         moveq #0,d0
    8d0e:	|  |  |         move.w 260(sp),d0
    8d12:	|  |  |         move.l d0,256(sp)
    8d16:	|  |  |         moveq #2,d1
    8d18:	|  |  |         move.l d1,252(sp)
    8d1c:	|  |  |         move.l 1cfb6 <SysBase>,d0
    8d22:	|  |  |         movea.l d0,a6
    8d24:	|  |  |         move.l 256(sp),d0
    8d28:	|  |  |         move.l 252(sp),d1
    8d2c:	|  |  |         jsr -684(a6)
    8d30:	|  |  |         move.l d0,248(sp)
    8d34:	|  |  |         move.l 248(sp),d0
    8d38:	|  |  |         movea.l 318(sp),a0
    8d3c:	|  |  |         move.l d0,20(a0)
		count = FRead( bigDataFile, currentitem->bitplane, 1, size);				
    8d40:	|  |  |         move.l 1cf9e <bigDataFile>,244(sp)
    8d48:	|  |  |         movea.l 318(sp),a0
    8d4c:	|  |  |         move.l 20(a0),240(sp)
    8d52:	|  |  |         moveq #1,d0
    8d54:	|  |  |         move.l d0,236(sp)
    8d58:	|  |  |         moveq #0,d0
    8d5a:	|  |  |         move.w 260(sp),d0
    8d5e:	|  |  |         move.l d0,232(sp)
    8d62:	|  |  |         move.l 1cfbe <DOSBase>,d0
    8d68:	|  |  |         movea.l d0,a6
    8d6a:	|  |  |         move.l 244(sp),d1
    8d6e:	|  |  |         move.l 240(sp),d2
    8d72:	|  |  |         move.l 236(sp),d3
    8d76:	|  |  |         move.l 232(sp),d4
    8d7a:	|  |  |         jsr -324(a6)
    8d7e:	|  |  |         move.l d0,228(sp)
    8d82:	|  |  |         move.l 228(sp),d0
    8d86:	|  |  |         move.w d0,226(sp)

		if(numelements > 0) {
    8d8a:	|  |  |         tst.w 322(sp)
    8d8e:	|  |  |  ,----- beq.s 8dca <setZBuffer+0x28c>
			currentitem->nextPanel = AllocVec(sizeof(struct zBufferData), MEMF_ANY);
    8d90:	|  |  |  |      moveq #28,d1
    8d92:	|  |  |  |      move.l d1,222(sp)
    8d96:	|  |  |  |      clr.l 218(sp)
    8d9a:	|  |  |  |      move.l 1cfb6 <SysBase>,d0
    8da0:	|  |  |  |      movea.l d0,a6
    8da2:	|  |  |  |      move.l 222(sp),d0
    8da6:	|  |  |  |      move.l 218(sp),d1
    8daa:	|  |  |  |      jsr -684(a6)
    8dae:	|  |  |  |      move.l d0,214(sp)
    8db2:	|  |  |  |      move.l 214(sp),d0
    8db6:	|  |  |  |      movea.l 318(sp),a0
    8dba:	|  |  |  |      move.l d0,24(a0)
			currentitem = currentitem->nextPanel;
    8dbe:	|  |  |  |      movea.l 318(sp),a0
    8dc2:	|  |  |  |      move.l 24(a0),318(sp)
    8dc8:	|  |  |  |  ,-- bra.s 8dd2 <setZBuffer+0x294>
		} else {
			currentitem->nextPanel = NULL;
    8dca:	|  |  |  '--|-> movea.l 318(sp),a0
    8dce:	|  |  |     |   clr.l 24(a0)
		}
		#ifdef EMULATOR  
  			debug_register_bitmap(currentitem->bitplane, "zBuffer.bpl", currentitem->width, currentitem->height , 1, 0);
    8dd2:	|  |  |     '-> movea.l 318(sp),a0
    8dd6:	|  |  |         move.l 4(a0),d0
    8dda:	|  |  |         move.l d0,d0
    8ddc:	|  |  |         movea.w d0,a1
    8dde:	|  |  |         movea.l 318(sp),a0
    8de2:	|  |  |         move.l (a0),d0
    8de4:	|  |  |         move.l d0,d0
    8de6:	|  |  |         movea.w d0,a0
    8de8:	|  |  |         movea.l 318(sp),a2
    8dec:	|  |  |         move.l 20(a2),d0
    8df0:	|  |  |         clr.l -(sp)
    8df2:	|  |  |         pea 1 <_start+0x1>
    8df6:	|  |  |         move.l a1,-(sp)
    8df8:	|  |  |         move.l a0,-(sp)
    8dfa:	|  |  |         pea 195e1 <PutChar+0x1397>
    8e00:	|  |  |         move.l d0,-(sp)
    8e02:	|  |  |         jsr 17890 <debug_register_bitmap>
    8e08:	|  |  |         lea 24(sp),sp
	while(numelements--)
    8e0c:	|  |  '-------> move.w 322(sp),d0
    8e10:	|  |            move.w d0,d1
    8e12:	|  |            subq.w #1,d1
    8e14:	|  |            move.w d1,322(sp)
    8e18:	|  |            tst.w d0
    8e1a:	|  '----------- bne.w 8c70 <setZBuffer+0x132>
		#endif  
		
	}


	finishAccess ();
    8e1e:	|               jsr 7ad4 <finishAccess>
	
	return TRUE;
    8e24:	|               moveq #1,d0
}
    8e26:	'-------------> movem.l (sp)+,d2-d4/a2/a6
    8e2a:	                lea 304(sp),sp
    8e2e:	                rts

00008e30 <forgetSpriteBank>:
extern int cameraX, cameraY;
extern struct inputType input;


void forgetSpriteBank (struct loadedSpriteBank * forgetme)
{			
    8e30:	          lea -32(sp),sp
    8e34:	          move.l a6,-(sp)
	struct spriteBank *spritebanktoforget = &forgetme->bank;
    8e36:	          move.l 40(sp),d0
    8e3a:	          addq.l #8,d0
    8e3c:	          move.l d0,24(sp)
	
	for (int i = 0; i < spritebanktoforget->total; i++) {
    8e40:	          clr.l 32(sp)
    8e44:	   ,----- bra.s 8e8a <forgetSpriteBank+0x5a>
		struct sprite *cursprite = &spritebanktoforget->sprites[i];		
    8e46:	,--|----> movea.l 24(sp),a0
    8e4a:	|  |      movea.l 8(a0),a0
    8e4e:	|  |      move.l 32(sp),d1
    8e52:	|  |      move.l d1,d0
    8e54:	|  |      lsl.l #3,d0
    8e56:	|  |      sub.l d1,d0
    8e58:	|  |      add.l d0,d0
    8e5a:	|  |      add.l d0,d0
    8e5c:	|  |      adda.l d0,a0
    8e5e:	|  |      move.l a0,8(sp)
		if(cursprite->data) {		
    8e62:	|  |      movea.l 8(sp),a0
    8e66:	|  |      move.l 24(a0),d0
    8e6a:	|  |  ,-- beq.s 8e86 <forgetSpriteBank+0x56>
			FreeVec(cursprite->data);			
    8e6c:	|  |  |   movea.l 8(sp),a0
    8e70:	|  |  |   move.l 24(a0),4(sp)
    8e76:	|  |  |   move.l 1cfb6 <SysBase>,d0
    8e7c:	|  |  |   movea.l d0,a6
    8e7e:	|  |  |   movea.l 4(sp),a1
    8e82:	|  |  |   jsr -690(a6)
	for (int i = 0; i < spritebanktoforget->total; i++) {
    8e86:	|  |  '-> addq.l #1,32(sp)
    8e8a:	|  '----> movea.l 24(sp),a0
    8e8e:	|         move.l (a0),d0
    8e90:	|         cmp.l 32(sp),d0
    8e94:	'-------- bgt.s 8e46 <forgetSpriteBank+0x16>
		}		
	}

	FreeVec(spritebanktoforget->sprites);	
    8e96:	          movea.l 24(sp),a0
    8e9a:	          move.l 8(a0),20(sp)
    8ea0:	          move.l 1cfb6 <SysBase>,d0
    8ea6:	          movea.l d0,a6
    8ea8:	          movea.l 20(sp),a1
    8eac:	          jsr -690(a6)
	
	
	struct loadedSpriteBank *precedingbank = allLoadedBanks;
    8eb0:	          move.l 1d0ca <allLoadedBanks>,28(sp)
	
	while(precedingbank->next->ID != forgetme->ID && precedingbank != NULL)
    8eb8:	      ,-- bra.s 8ec4 <forgetSpriteBank+0x94>
	{
		precedingbank = precedingbank->next;
    8eba:	   ,--|-> movea.l 28(sp),a0
    8ebe:	   |  |   move.l 22(a0),28(sp)
	while(precedingbank->next->ID != forgetme->ID && precedingbank != NULL)
    8ec4:	   |  '-> movea.l 28(sp),a0
    8ec8:	   |      movea.l 22(a0),a0
    8ecc:	   |      move.l (a0),d1
    8ece:	   |      movea.l 40(sp),a0
    8ed2:	   |      move.l (a0),d0
    8ed4:	   |      cmp.l d1,d0
    8ed6:	   |  ,-- beq.s 8ede <forgetSpriteBank+0xae>
    8ed8:	   |  |   tst.l 28(sp)
    8edc:	   '--|-- bne.s 8eba <forgetSpriteBank+0x8a>
	}	

	if(precedingbank)
    8ede:	      '-> tst.l 28(sp)
    8ee2:	   ,----- beq.s 8f0c <forgetSpriteBank+0xdc>
	{
		//Forget element in the middle of the chain or the last one
		precedingbank->next = forgetme->next;
    8ee4:	   |      movea.l 40(sp),a0
    8ee8:	   |      move.l 22(a0),d0
    8eec:	   |      movea.l 28(sp),a0
    8ef0:	   |      move.l d0,22(a0)
		FreeVec( forgetme);
    8ef4:	   |      move.l 40(sp),12(sp)
    8efa:	   |      move.l 1cfb6 <SysBase>,d0
    8f00:	   |      movea.l d0,a6
    8f02:	   |      movea.l 12(sp),a1
    8f06:	   |      jsr -690(a6)
	{
		//Forget first element in the chain
		allLoadedBanks = allLoadedBanks->next;
		FreeVec( forgetme);
	}	
}
    8f0a:	   |  ,-- bra.s 8f32 <forgetSpriteBank+0x102>
		allLoadedBanks = allLoadedBanks->next;
    8f0c:	   '--|-> movea.l 1d0ca <allLoadedBanks>,a0
    8f12:	      |   move.l 22(a0),d0
    8f16:	      |   move.l d0,1d0ca <allLoadedBanks>
		FreeVec( forgetme);
    8f1c:	      |   move.l 40(sp),16(sp)
    8f22:	      |   move.l 1cfb6 <SysBase>,d0
    8f28:	      |   movea.l d0,a6
    8f2a:	      |   movea.l 16(sp),a1
    8f2e:	      |   jsr -690(a6)
}
    8f32:	      '-> nop
    8f34:	          movea.l (sp)+,a6
    8f36:	          lea 32(sp),sp
    8f3a:	          rts

00008f3c <loadSpriteBank>:

BOOL loadSpriteBank (int fileNum, struct spriteBank *loadhere) {
    8f3c:	                      lea -84(sp),sp
    8f40:	                      movem.l d2-d4/a2/a6,-(sp)

	KPrintF("loadSpriteBank: Starting\n");
    8f44:	                      pea 195ed <PutChar+0x13a3>
    8f4a:	                      jsr 177a8 <KPrintF>
    8f50:	                      addq.l #4,sp

	int i, tex_num, total, picwidth, picheight, howmany = 0, startIndex = 0;
    8f52:	                      clr.l 94(sp)
    8f56:	                      clr.l 90(sp)
	int *totalwidth, *maxheight;
	int numTextures = 0;
    8f5a:	                      clr.l 86(sp)
	UBYTE *data;

	if (!openFileFromNum(fileNum)) {
    8f5e:	                      move.l 108(sp),-(sp)
    8f62:	                      jsr 7bdc <openFileFromNum>
    8f68:	                      addq.l #4,sp
    8f6a:	                      tst.l d0
    8f6c:	                  ,-- bne.s 8f82 <loadSpriteBank+0x46>
		KPrintF("loadSpriteBank: Can't open sprite bank / font");
    8f6e:	                  |   pea 19607 <PutChar+0x13bd>
    8f74:	                  |   jsr 177a8 <KPrintF>
    8f7a:	                  |   addq.l #4,sp
		return FALSE;
    8f7c:	                  |   clr.w d0
    8f7e:	,-----------------|-- bra.w 9376 <loadSpriteBank+0x43a>
	}

	get2bytes(bigDataFile); // Ignore first 2 bytes
    8f82:	|                 '-> move.l 1cf9e <bigDataFile>,d0
    8f88:	|                     move.l d0,-(sp)
    8f8a:	|                     jsr 6bc <get2bytes>
    8f90:	|                     addq.l #4,sp
	loadhere->type = FGetC(bigDataFile);
    8f92:	|                     move.l 1cf9e <bigDataFile>,82(sp)
    8f9a:	|                     move.l 1cfbe <DOSBase>,d0
    8fa0:	|                     movea.l d0,a6
    8fa2:	|                     move.l 82(sp),d1
    8fa6:	|                     jsr -306(a6)
    8faa:	|                     move.l d0,78(sp)
    8fae:	|                     move.l 78(sp),d0
    8fb2:	|                     movea.l 112(sp),a0
    8fb6:	|                     move.l d0,4(a0)
	total = get2bytes(bigDataFile);
    8fba:	|                     move.l 1cf9e <bigDataFile>,d0
    8fc0:	|                     move.l d0,-(sp)
    8fc2:	|                     jsr 6bc <get2bytes>
    8fc8:	|                     addq.l #4,sp
    8fca:	|                     move.l d0,74(sp)

	if (total <= 0) {
    8fce:	|                 ,-- bgt.s 8fe4 <loadSpriteBank+0xa8>
		KPrintF("loadSpriteBank: No sprites in bank or invalid sprite bank file\n");
    8fd0:	|                 |   pea 19635 <PutChar+0x13eb>
    8fd6:	|                 |   jsr 177a8 <KPrintF>
    8fdc:	|                 |   addq.l #4,sp
		return FALSE;
    8fde:	|                 |   clr.w d0
    8fe0:	+-----------------|-- bra.w 9376 <loadSpriteBank+0x43a>
	}
	if (loadhere->type == 3)
    8fe4:	|                 '-> movea.l 112(sp),a0
    8fe8:	|                     move.l 4(a0),d0
    8fec:	|                     moveq #3,d1
    8fee:	|                     cmp.l d0,d1
    8ff0:	|                 ,-- bne.s 8ffe <loadSpriteBank+0xc2>
	{
		loadhere->isFont = TRUE;
    8ff2:	|                 |   movea.l 112(sp),a0
    8ff6:	|                 |   move.w #1,12(a0)
    8ffc:	|              ,--|-- bra.s 9020 <loadSpriteBank+0xe4>
	}
	else if (loadhere->type > 3) {
    8ffe:	|              |  '-> movea.l 112(sp),a0
    9002:	|              |      move.l 4(a0),d0
    9006:	|              |      moveq #3,d1
    9008:	|              |      cmp.l d0,d1
    900a:	|              +----- bge.s 9020 <loadSpriteBank+0xe4>
		KPrintF("loadSpriteBank: Unsupported sprite bank file format\n");
    900c:	|              |      pea 19675 <PutChar+0x142b>
    9012:	|              |      jsr 177a8 <KPrintF>
    9018:	|              |      addq.l #4,sp
		return FALSE;
    901a:	|              |      clr.w d0
    901c:	+--------------|----- bra.w 9376 <loadSpriteBank+0x43a>
	}

	loadhere->total = total;
    9020:	|              '----> movea.l 112(sp),a0
    9024:	|                     move.l 74(sp),(a0)
	loadhere->sprites = AllocVec(sizeof(struct sprite) * total, MEMF_ANY);
    9028:	|                     move.l 74(sp),d1
    902c:	|                     move.l d1,d0
    902e:	|                     lsl.l #3,d0
    9030:	|                     sub.l d1,d0
    9032:	|                     add.l d0,d0
    9034:	|                     add.l d0,d0
    9036:	|                     move.l d0,70(sp)
    903a:	|                     clr.l 66(sp)
    903e:	|                     move.l 1cfb6 <SysBase>,d0
    9044:	|                     movea.l d0,a6
    9046:	|                     move.l 70(sp),d0
    904a:	|                     move.l 66(sp),d1
    904e:	|                     jsr -684(a6)
    9052:	|                     move.l d0,62(sp)
    9056:	|                     move.l 62(sp),d0
    905a:	|                     movea.l 112(sp),a0
    905e:	|                     move.l d0,8(a0)
	if (!loadhere->sprites) return FALSE;	
    9062:	|                     movea.l 112(sp),a0
    9066:	|                     move.l 8(a0),d0
    906a:	|                 ,-- bne.s 9072 <loadSpriteBank+0x136>
    906c:	|                 |   clr.w d0
    906e:	+-----------------|-- bra.w 9376 <loadSpriteBank+0x43a>
	
	startIndex = 1;
    9072:	|                 '-> moveq #1,d0
    9074:	|                     move.l d0,90(sp)

	for (i = 0; i < total; i++) {
    9078:	|                     clr.l 100(sp)
    907c:	|     ,-------------- bra.w 9354 <loadSpriteBank+0x418>

		UWORD width = get2bytes(bigDataFile);
    9080:	|  ,--|-------------> move.l 1cf9e <bigDataFile>,d0
    9086:	|  |  |               move.l d0,-(sp)
    9088:	|  |  |               jsr 6bc <get2bytes>
    908e:	|  |  |               addq.l #4,sp
    9090:	|  |  |               move.w d0,60(sp)
		loadhere->sprites[i].width = width;
    9094:	|  |  |               movea.l 112(sp),a0
    9098:	|  |  |               movea.l 8(a0),a0
    909c:	|  |  |               move.l 100(sp),d1
    90a0:	|  |  |               move.l d1,d0
    90a2:	|  |  |               lsl.l #3,d0
    90a4:	|  |  |               sub.l d1,d0
    90a6:	|  |  |               add.l d0,d0
    90a8:	|  |  |               add.l d0,d0
    90aa:	|  |  |               adda.l d0,a0
    90ac:	|  |  |               moveq #0,d0
    90ae:	|  |  |               move.w 60(sp),d0
    90b2:	|  |  |               move.l d0,(a0)
		loadhere->sprites[i].height = get2bytes(bigDataFile);
    90b4:	|  |  |               movea.l 1cf9e <bigDataFile>,a1
    90ba:	|  |  |               movea.l 112(sp),a0
    90be:	|  |  |               movea.l 8(a0),a0
    90c2:	|  |  |               move.l 100(sp),d1
    90c6:	|  |  |               move.l d1,d0
    90c8:	|  |  |               lsl.l #3,d0
    90ca:	|  |  |               sub.l d1,d0
    90cc:	|  |  |               add.l d0,d0
    90ce:	|  |  |               add.l d0,d0
    90d0:	|  |  |               lea (0,a0,d0.l),a2
    90d4:	|  |  |               move.l a1,-(sp)
    90d6:	|  |  |               jsr 6bc <get2bytes>
    90dc:	|  |  |               addq.l #4,sp
    90de:	|  |  |               move.l d0,4(a2)
		loadhere->sprites[i].xhot = get2bytes(bigDataFile);
    90e2:	|  |  |               movea.l 1cf9e <bigDataFile>,a1
    90e8:	|  |  |               movea.l 112(sp),a0
    90ec:	|  |  |               movea.l 8(a0),a0
    90f0:	|  |  |               move.l 100(sp),d1
    90f4:	|  |  |               move.l d1,d0
    90f6:	|  |  |               lsl.l #3,d0
    90f8:	|  |  |               sub.l d1,d0
    90fa:	|  |  |               add.l d0,d0
    90fc:	|  |  |               add.l d0,d0
    90fe:	|  |  |               lea (0,a0,d0.l),a2
    9102:	|  |  |               move.l a1,-(sp)
    9104:	|  |  |               jsr 6bc <get2bytes>
    910a:	|  |  |               addq.l #4,sp
    910c:	|  |  |               move.l d0,8(a2)
		loadhere->sprites[i].yhot = get2bytes(bigDataFile);
    9110:	|  |  |               movea.l 1cf9e <bigDataFile>,a1
    9116:	|  |  |               movea.l 112(sp),a0
    911a:	|  |  |               movea.l 8(a0),a0
    911e:	|  |  |               move.l 100(sp),d1
    9122:	|  |  |               move.l d1,d0
    9124:	|  |  |               lsl.l #3,d0
    9126:	|  |  |               sub.l d1,d0
    9128:	|  |  |               add.l d0,d0
    912a:	|  |  |               add.l d0,d0
    912c:	|  |  |               lea (0,a0,d0.l),a2
    9130:	|  |  |               move.l a1,-(sp)
    9132:	|  |  |               jsr 6bc <get2bytes>
    9138:	|  |  |               addq.l #4,sp
    913a:	|  |  |               move.l d0,12(a2)

		UWORD size;
		
		switch( loadhere->type) 
    913e:	|  |  |               movea.l 112(sp),a0
    9142:	|  |  |               move.l 4(a0),d0
    9146:	|  |  |               moveq #3,d1
    9148:	|  |  |               cmp.l d0,d1
    914a:	|  |  |     ,-------- beq.w 91e6 <loadSpriteBank+0x2aa>
    914e:	|  |  |     |         moveq #3,d1
    9150:	|  |  |     |         cmp.l d0,d1
    9152:	|  |  |  ,--|-------- blt.w 928c <loadSpriteBank+0x350>
    9156:	|  |  |  |  |         moveq #1,d1
    9158:	|  |  |  |  |         cmp.l d0,d1
    915a:	|  |  |  |  |     ,-- beq.s 9166 <loadSpriteBank+0x22a>
    915c:	|  |  |  |  |     |   moveq #2,d1
    915e:	|  |  |  |  |     |   cmp.l d0,d1
    9160:	|  |  |  |  |  ,--|-- beq.s 9192 <loadSpriteBank+0x256>
    9162:	|  |  |  +--|--|--|-- bra.w 928c <loadSpriteBank+0x350>
		{
			case 1: //Sprite
				size = 4*loadhere->sprites[i].height+8;
    9166:	|  |  |  |  |  |  '-> movea.l 112(sp),a0
    916a:	|  |  |  |  |  |      movea.l 8(a0),a0
    916e:	|  |  |  |  |  |      move.l 100(sp),d1
    9172:	|  |  |  |  |  |      move.l d1,d0
    9174:	|  |  |  |  |  |      lsl.l #3,d0
    9176:	|  |  |  |  |  |      sub.l d1,d0
    9178:	|  |  |  |  |  |      add.l d0,d0
    917a:	|  |  |  |  |  |      add.l d0,d0
    917c:	|  |  |  |  |  |      adda.l d0,a0
    917e:	|  |  |  |  |  |      move.l 4(a0),d0
    9182:	|  |  |  |  |  |      addq.l #2,d0
    9184:	|  |  |  |  |  |      move.l d0,d0
    9186:	|  |  |  |  |  |      add.w d0,d0
    9188:	|  |  |  |  |  |      add.w d0,d0
    918a:	|  |  |  |  |  |      move.w d0,98(sp)
				break;
    918e:	|  |  |  +--|--|----- bra.w 928c <loadSpriteBank+0x350>
			case 2: //Bob
				size = loadhere->sprites[i].width / 8 * loadhere->sprites[i].height * 6;
    9192:	|  |  |  |  |  '----> movea.l 112(sp),a0
    9196:	|  |  |  |  |         movea.l 8(a0),a0
    919a:	|  |  |  |  |         move.l 100(sp),d1
    919e:	|  |  |  |  |         move.l d1,d0
    91a0:	|  |  |  |  |         lsl.l #3,d0
    91a2:	|  |  |  |  |         sub.l d1,d0
    91a4:	|  |  |  |  |         add.l d0,d0
    91a6:	|  |  |  |  |         add.l d0,d0
    91a8:	|  |  |  |  |         adda.l d0,a0
    91aa:	|  |  |  |  |         move.l (a0),d0
    91ac:	|  |  |  |  |     ,-- bpl.s 91b0 <loadSpriteBank+0x274>
    91ae:	|  |  |  |  |     |   addq.l #7,d0
    91b0:	|  |  |  |  |     '-> asr.l #3,d0
    91b2:	|  |  |  |  |         move.l d0,d2
    91b4:	|  |  |  |  |         movea.l 112(sp),a0
    91b8:	|  |  |  |  |         movea.l 8(a0),a0
    91bc:	|  |  |  |  |         move.l 100(sp),d1
    91c0:	|  |  |  |  |         move.l d1,d0
    91c2:	|  |  |  |  |         lsl.l #3,d0
    91c4:	|  |  |  |  |         sub.l d1,d0
    91c6:	|  |  |  |  |         add.l d0,d0
    91c8:	|  |  |  |  |         add.l d0,d0
    91ca:	|  |  |  |  |         adda.l d0,a0
    91cc:	|  |  |  |  |         move.l 4(a0),d0
    91d0:	|  |  |  |  |         move.l d0,d0
    91d2:	|  |  |  |  |         move.w d2,d1
    91d4:	|  |  |  |  |         muls.w d0,d1
    91d6:	|  |  |  |  |         move.w d1,d0
    91d8:	|  |  |  |  |         add.w d0,d0
    91da:	|  |  |  |  |         add.w d1,d0
    91dc:	|  |  |  |  |         add.w d0,d0
    91de:	|  |  |  |  |         move.w d0,98(sp)
				break;
    91e2:	|  |  |  +--|-------- bra.w 928c <loadSpriteBank+0x350>
			case 3: //Font
				UWORD widthextra = loadhere->sprites[i].width % 16 > 0 ? 2 : 0;
    91e6:	|  |  |  |  '-------> movea.l 112(sp),a0
    91ea:	|  |  |  |            movea.l 8(a0),a0
    91ee:	|  |  |  |            move.l 100(sp),d1
    91f2:	|  |  |  |            move.l d1,d0
    91f4:	|  |  |  |            lsl.l #3,d0
    91f6:	|  |  |  |            sub.l d1,d0
    91f8:	|  |  |  |            add.l d0,d0
    91fa:	|  |  |  |            add.l d0,d0
    91fc:	|  |  |  |            adda.l d0,a0
    91fe:	|  |  |  |            move.l (a0),d0
    9200:	|  |  |  |            andi.l #-2147483633,d0
    9206:	|  |  |  |        ,-- bpl.s 9210 <loadSpriteBank+0x2d4>
    9208:	|  |  |  |        |   subq.l #1,d0
    920a:	|  |  |  |        |   moveq #-16,d1
    920c:	|  |  |  |        |   or.l d1,d0
    920e:	|  |  |  |        |   addq.l #1,d0
    9210:	|  |  |  |        '-> tst.l d0
    9212:	|  |  |  |     ,----- ble.s 9218 <loadSpriteBank+0x2dc>
    9214:	|  |  |  |     |      moveq #2,d0
    9216:	|  |  |  |     |  ,-- bra.s 921a <loadSpriteBank+0x2de>
    9218:	|  |  |  |     '--|-> clr.w d0
    921a:	|  |  |  |        '-> move.w d0,58(sp)
				size = ((loadhere->sprites[i].width  / 16) * 2 + widthextra) * loadhere->sprites[i].height;
    921e:	|  |  |  |            movea.l 112(sp),a0
    9222:	|  |  |  |            movea.l 8(a0),a0
    9226:	|  |  |  |            move.l 100(sp),d1
    922a:	|  |  |  |            move.l d1,d0
    922c:	|  |  |  |            lsl.l #3,d0
    922e:	|  |  |  |            sub.l d1,d0
    9230:	|  |  |  |            add.l d0,d0
    9232:	|  |  |  |            add.l d0,d0
    9234:	|  |  |  |            adda.l d0,a0
    9236:	|  |  |  |            move.l (a0),d0
    9238:	|  |  |  |            movea.l d0,a0
    923a:	|  |  |  |            cmpa.w #0,a0
    923e:	|  |  |  |        ,-- bge.s 9244 <loadSpriteBank+0x308>
    9240:	|  |  |  |        |   lea 15(a0),a0
    9244:	|  |  |  |        '-> move.l a0,d0
    9246:	|  |  |  |            asr.l #4,d0
    9248:	|  |  |  |            add.l d0,d0
    924a:	|  |  |  |            move.l d0,d1
    924c:	|  |  |  |            moveq #0,d0
    924e:	|  |  |  |            move.w 58(sp),d0
    9252:	|  |  |  |            add.l d1,d0
    9254:	|  |  |  |            move.l d0,d2
    9256:	|  |  |  |            movea.l 112(sp),a0
    925a:	|  |  |  |            movea.l 8(a0),a0
    925e:	|  |  |  |            move.l 100(sp),d1
    9262:	|  |  |  |            move.l d1,d0
    9264:	|  |  |  |            lsl.l #3,d0
    9266:	|  |  |  |            sub.l d1,d0
    9268:	|  |  |  |            add.l d0,d0
    926a:	|  |  |  |            add.l d0,d0
    926c:	|  |  |  |            adda.l d0,a0
    926e:	|  |  |  |            move.l 4(a0),d0
    9272:	|  |  |  |            move.l d0,d0
    9274:	|  |  |  |            move.w d2,d1
    9276:	|  |  |  |            muls.w d0,d1
    9278:	|  |  |  |            move.w d1,98(sp)
				if(size > 100)
    927c:	|  |  |  |            cmpi.w #100,98(sp)
    9282:	|  |  |  |        ,-- bls.s 928a <loadSpriteBank+0x34e>
				{
					UWORD br1 = 1;
    9284:	|  |  |  |        |   move.w #1,56(sp)
				}
				break;
    928a:	|  |  |  |        '-> nop
		}

		loadhere->sprites[i].data = AllocVec(sizeof(UWORD) * size, MEMF_CHIP);
    928c:	|  |  |  '----------> moveq #0,d0
    928e:	|  |  |               move.w 98(sp),d0
    9292:	|  |  |               add.l d0,d0
    9294:	|  |  |               move.l d0,52(sp)
    9298:	|  |  |               moveq #2,d0
    929a:	|  |  |               move.l d0,48(sp)
    929e:	|  |  |               move.l 1cfb6 <SysBase>,d0
    92a4:	|  |  |               movea.l d0,a6
    92a6:	|  |  |               move.l 52(sp),d0
    92aa:	|  |  |               move.l 48(sp),d1
    92ae:	|  |  |               jsr -684(a6)
    92b2:	|  |  |               move.l d0,44(sp)
    92b6:	|  |  |               movea.l 44(sp),a1
    92ba:	|  |  |               movea.l 112(sp),a0
    92be:	|  |  |               movea.l 8(a0),a0
    92c2:	|  |  |               move.l 100(sp),d1
    92c6:	|  |  |               move.l d1,d0
    92c8:	|  |  |               lsl.l #3,d0
    92ca:	|  |  |               sub.l d1,d0
    92cc:	|  |  |               add.l d0,d0
    92ce:	|  |  |               add.l d0,d0
    92d0:	|  |  |               adda.l d0,a0
    92d2:	|  |  |               move.l a1,24(a0)
		UWORD count = FRead(bigDataFile, loadhere->sprites[i].data, 2, size / 2);
    92d6:	|  |  |               move.l 1cf9e <bigDataFile>,40(sp)
    92de:	|  |  |               movea.l 112(sp),a0
    92e2:	|  |  |               movea.l 8(a0),a0
    92e6:	|  |  |               move.l 100(sp),d1
    92ea:	|  |  |               move.l d1,d0
    92ec:	|  |  |               lsl.l #3,d0
    92ee:	|  |  |               sub.l d1,d0
    92f0:	|  |  |               add.l d0,d0
    92f2:	|  |  |               add.l d0,d0
    92f4:	|  |  |               adda.l d0,a0
    92f6:	|  |  |               move.l 24(a0),36(sp)
    92fc:	|  |  |               moveq #2,d1
    92fe:	|  |  |               move.l d1,32(sp)
    9302:	|  |  |               move.w 98(sp),d0
    9306:	|  |  |               lsr.w #1,d0
    9308:	|  |  |               move.w d0,d0
    930a:	|  |  |               andi.l #65535,d0
    9310:	|  |  |               move.l d0,28(sp)
    9314:	|  |  |               move.l 1cfbe <DOSBase>,d0
    931a:	|  |  |               movea.l d0,a6
    931c:	|  |  |               move.l 40(sp),d1
    9320:	|  |  |               move.l 36(sp),d2
    9324:	|  |  |               move.l 32(sp),d3
    9328:	|  |  |               move.l 28(sp),d4
    932c:	|  |  |               jsr -324(a6)
    9330:	|  |  |               move.l d0,24(sp)
    9334:	|  |  |               move.l 24(sp),d0
    9338:	|  |  |               move.w d0,22(sp)
		if (!count) {
    933c:	|  |  |           ,-- bne.s 9350 <loadSpriteBank+0x414>
			KPrintF("loadSpriteBank: Cannot read sprite Data from File\n");
    933e:	|  |  |           |   pea 196aa <PutChar+0x1460>
    9344:	|  |  |           |   jsr 177a8 <KPrintF>
    934a:	|  |  |           |   addq.l #4,sp
			return FALSE;
    934c:	|  |  |           |   clr.w d0
    934e:	+--|--|-----------|-- bra.s 9376 <loadSpriteBank+0x43a>
	for (i = 0; i < total; i++) {
    9350:	|  |  |           '-> addq.l #1,100(sp)
    9354:	|  |  '-------------> move.l 100(sp),d0
    9358:	|  |                  cmp.l 74(sp),d0
    935c:	|  '----------------- blt.w 9080 <loadSpriteBank+0x144>
		}
	}

	finishAccess ();
    9360:	|                     jsr 7ad4 <finishAccess>

	KPrintF("loadSpriteBank: Complete\n");
    9366:	|                     pea 196dd <PutChar+0x1493>
    936c:	|                     jsr 177a8 <KPrintF>
    9372:	|                     addq.l #4,sp
	return TRUE;
    9374:	|                     moveq #1,d0
}
    9376:	'-------------------> movem.l (sp)+,d2-d4/a2/a6
    937a:	                      lea 84(sp),sp
    937e:	                      rts

00009380 <scaleSprite>:

BOOL scaleSprite (struct sprite *single, struct onScreenPerson * thisPerson, BOOL mirror) 
{
    9380:	                   lea -16(sp),sp
    9384:	                   move.l d2,-(sp)
    9386:	                   move.l 32(sp),d0
    938a:	                   move.w d0,d0
    938c:	                   move.w d0,6(sp)
	WORD x =  thisPerson->x - single->xhot;
    9390:	                   movea.l 28(sp),a0
    9394:	                   move.l (a0),d2
    9396:	                   movea.l 24(sp),a0
    939a:	                   move.l 8(a0),d0
    939e:	                   move.l d0,-(sp)
    93a0:	                   jsr 17bda <__floatsisf>
    93a6:	                   addq.l #4,sp
    93a8:	                   move.l d0,-(sp)
    93aa:	                   move.l d2,-(sp)
    93ac:	                   jsr 17ece <__subsf3>
    93b2:	                   addq.l #8,sp
    93b4:	                   move.l d0,-(sp)
    93b6:	                   jsr 17b72 <__fixsfsi>
    93bc:	                   addq.l #4,sp
    93be:	                   move.w d0,18(sp)
	WORD y =  thisPerson->y - single->yhot;			
    93c2:	                   movea.l 28(sp),a0
    93c6:	                   move.l 4(a0),d2
    93ca:	                   movea.l 24(sp),a0
    93ce:	                   move.l 12(a0),d0
    93d2:	                   move.l d0,-(sp)
    93d4:	                   jsr 17bda <__floatsisf>
    93da:	                   addq.l #4,sp
    93dc:	                   move.l d0,-(sp)
    93de:	                   move.l d2,-(sp)
    93e0:	                   jsr 17ece <__subsf3>
    93e6:	                   addq.l #8,sp
    93e8:	                   move.l d0,-(sp)
    93ea:	                   jsr 17b72 <__fixsfsi>
    93f0:	                   addq.l #4,sp
    93f2:	                   move.w d0,8(sp)

	if( x < 0)
    93f6:	                   tst.w 18(sp)
    93fa:	               ,-- bge.s 942e <scaleSprite+0xae>
	{
		x = thisPerson->x - single->xhot;
    93fc:	               |   movea.l 28(sp),a0
    9400:	               |   move.l (a0),d2
    9402:	               |   movea.l 24(sp),a0
    9406:	               |   move.l 8(a0),d0
    940a:	               |   move.l d0,-(sp)
    940c:	               |   jsr 17bda <__floatsisf>
    9412:	               |   addq.l #4,sp
    9414:	               |   move.l d0,-(sp)
    9416:	               |   move.l d2,-(sp)
    9418:	               |   jsr 17ece <__subsf3>
    941e:	               |   addq.l #8,sp
    9420:	               |   move.l d0,-(sp)
    9422:	               |   jsr 17b72 <__fixsfsi>
    9428:	               |   addq.l #4,sp
    942a:	               |   move.w d0,18(sp)
	}

	CstScaleSprite( single, thisPerson, x, y,SCREEN);
    942e:	               '-> movea.w 8(sp),a1
    9432:	                   movea.w 18(sp),a0
    9436:	                   pea 1 <_start+0x1>
    943a:	                   move.l a1,-(sp)
    943c:	                   move.l a0,-(sp)
    943e:	                   move.l 40(sp),-(sp)
    9442:	                   move.l 40(sp),-(sp)
    9446:	                   jsr 2f08 <CstScaleSprite>
    944c:	                   lea 20(sp),sp

	UWORD x1, y1, x2, y2;

	if (thisPerson -> extra & EXTRA_FIXTOSCREEN) {
    9450:	                   movea.l 28(sp),a0
    9454:	                   move.l 118(a0),d0
    9458:	                   moveq #8,d1
    945a:	                   and.l d1,d0
    945c:	   ,-------------- beq.w 9528 <scaleSprite+0x1a8>
		if (single->xhot < 0)
    9460:	   |               movea.l 24(sp),a0
    9464:	   |               move.l 8(a0),d0
    9468:	   |  ,----------- bpl.s 94a4 <scaleSprite+0x124>
			x1 = x - (int)(mirror ? single->width - single->xhot : single->xhot+1);
    946a:	   |  |            move.w 18(sp),d0
    946e:	   |  |            tst.w 6(sp)
    9472:	   |  |     ,----- beq.s 948c <scaleSprite+0x10c>
    9474:	   |  |     |      movea.l 24(sp),a0
    9478:	   |  |     |      move.l (a0),d1
    947a:	   |  |     |      move.l d1,d2
    947c:	   |  |     |      movea.l 24(sp),a0
    9480:	   |  |     |      move.l 8(a0),d1
    9484:	   |  |     |      move.l d1,d1
    9486:	   |  |     |      movea.w d2,a0
    9488:	   |  |     |      suba.w d1,a0
    948a:	   |  |     |  ,-- bra.s 949a <scaleSprite+0x11a>
    948c:	   |  |     '--|-> movea.l 24(sp),a0
    9490:	   |  |        |   move.l 8(a0),d1
    9494:	   |  |        |   move.l d1,d1
    9496:	   |  |        |   movea.w d1,a0
    9498:	   |  |        |   addq.w #1,a0
    949a:	   |  |        '-> move.w d0,d1
    949c:	   |  |            sub.w a0,d1
    949e:	   |  |            move.w d1,16(sp)
    94a2:	   |  |  ,-------- bra.s 94dc <scaleSprite+0x15c>
		else
			x1 = x - (int)(mirror ? single->width - (single->xhot+1) : single->xhot);
    94a4:	   |  '--|-------> move.w 18(sp),d1
    94a8:	   |     |         tst.w 6(sp)
    94ac:	   |     |  ,----- beq.s 94ca <scaleSprite+0x14a>
    94ae:	   |     |  |      movea.l 24(sp),a0
    94b2:	   |     |  |      move.l (a0),d0
    94b4:	   |     |  |      move.l d0,d2
    94b6:	   |     |  |      movea.l 24(sp),a0
    94ba:	   |     |  |      move.l 8(a0),d0
    94be:	   |     |  |      move.l d0,d0
    94c0:	   |     |  |      movea.w d2,a0
    94c2:	   |     |  |      suba.w d0,a0
    94c4:	   |     |  |      move.w a0,d0
    94c6:	   |     |  |      subq.w #1,d0
    94c8:	   |     |  |  ,-- bra.s 94d4 <scaleSprite+0x154>
    94ca:	   |     |  '--|-> movea.l 24(sp),a0
    94ce:	   |     |     |   move.l 8(a0),d0
    94d2:	   |     |     |   move.l d0,d0
    94d4:	   |     |     '-> movea.w d1,a0
    94d6:	   |     |         suba.w d0,a0
    94d8:	   |     |         move.w a0,16(sp)
		
		y1 = y - (single->yhot - thisPerson->floaty);
    94dc:	   |     '-------> movea.l 28(sp),a0
    94e0:	   |               move.l 24(a0),d0
    94e4:	   |               move.l d0,d1
    94e6:	   |               movea.l 24(sp),a0
    94ea:	   |               move.l 12(a0),d0
    94ee:	   |               move.l d0,d0
    94f0:	   |               sub.w d0,d1
    94f2:	   |               move.w 8(sp),d0
    94f6:	   |               movea.w d1,a0
    94f8:	   |               adda.w d0,a0
    94fa:	   |               move.w a0,14(sp)
		x2 = x1 + single->width;
    94fe:	   |               movea.l 24(sp),a0
    9502:	   |               move.l (a0),d0
    9504:	   |               move.l d0,d0
    9506:	   |               move.w 16(sp),d1
    950a:	   |               add.w d0,d1
    950c:	   |               move.w d1,12(sp)
		y2 = y1 + single->height;
    9510:	   |               movea.l 24(sp),a0
    9514:	   |               move.l 4(a0),d0
    9518:	   |               move.l d0,d0
    951a:	   |               movea.w 14(sp),a0
    951e:	   |               adda.w d0,a0
    9520:	   |               move.w a0,10(sp)
    9524:	,--|-------------- bra.w 9610 <scaleSprite+0x290>
	} else {
		x -= cameraX;
    9528:	|  '-------------> move.w 18(sp),d1
    952c:	|                  move.l 1d06c <cameraX>,d0
    9532:	|                  move.l d0,d0
    9534:	|                  sub.w d0,d1
    9536:	|                  move.w d1,18(sp)
		y -= cameraY;
    953a:	|                  move.w 8(sp),d1
    953e:	|                  move.l 1d070 <cameraY>,d0
    9544:	|                  move.l d0,d0
    9546:	|                  sub.w d0,d1
    9548:	|                  move.w d1,8(sp)
		if (single->xhot < 0)
    954c:	|                  movea.l 24(sp),a0
    9550:	|                  move.l 8(a0),d0
    9554:	|     ,----------- bpl.s 9590 <scaleSprite+0x210>
			x1 = x - (int)(mirror ? single->width - single->xhot : single->xhot+1);
    9556:	|     |            move.w 18(sp),d0
    955a:	|     |            tst.w 6(sp)
    955e:	|     |     ,----- beq.s 9578 <scaleSprite+0x1f8>
    9560:	|     |     |      movea.l 24(sp),a0
    9564:	|     |     |      move.l (a0),d1
    9566:	|     |     |      move.l d1,d2
    9568:	|     |     |      movea.l 24(sp),a0
    956c:	|     |     |      move.l 8(a0),d1
    9570:	|     |     |      move.l d1,d1
    9572:	|     |     |      movea.w d2,a0
    9574:	|     |     |      suba.w d1,a0
    9576:	|     |     |  ,-- bra.s 9586 <scaleSprite+0x206>
    9578:	|     |     '--|-> movea.l 24(sp),a0
    957c:	|     |        |   move.l 8(a0),d1
    9580:	|     |        |   move.l d1,d1
    9582:	|     |        |   movea.w d1,a0
    9584:	|     |        |   addq.w #1,a0
    9586:	|     |        '-> move.w d0,d1
    9588:	|     |            sub.w a0,d1
    958a:	|     |            move.w d1,16(sp)
    958e:	|     |  ,-------- bra.s 95c8 <scaleSprite+0x248>
		else
			x1 = x - (int)(mirror ? single->width - (single->xhot+1) : single->xhot);
    9590:	|     '--|-------> move.w 18(sp),d1
    9594:	|        |         tst.w 6(sp)
    9598:	|        |  ,----- beq.s 95b6 <scaleSprite+0x236>
    959a:	|        |  |      movea.l 24(sp),a0
    959e:	|        |  |      move.l (a0),d0
    95a0:	|        |  |      move.l d0,d2
    95a2:	|        |  |      movea.l 24(sp),a0
    95a6:	|        |  |      move.l 8(a0),d0
    95aa:	|        |  |      move.l d0,d0
    95ac:	|        |  |      movea.w d2,a0
    95ae:	|        |  |      suba.w d0,a0
    95b0:	|        |  |      move.w a0,d0
    95b2:	|        |  |      subq.w #1,d0
    95b4:	|        |  |  ,-- bra.s 95c0 <scaleSprite+0x240>
    95b6:	|        |  '--|-> movea.l 24(sp),a0
    95ba:	|        |     |   move.l 8(a0),d0
    95be:	|        |     |   move.l d0,d0
    95c0:	|        |     '-> movea.w d1,a0
    95c2:	|        |         suba.w d0,a0
    95c4:	|        |         move.w a0,16(sp)
		
		y1 = y - (single->yhot - thisPerson->floaty);
    95c8:	|        '-------> movea.l 28(sp),a0
    95cc:	|                  move.l 24(a0),d0
    95d0:	|                  move.l d0,d1
    95d2:	|                  movea.l 24(sp),a0
    95d6:	|                  move.l 12(a0),d0
    95da:	|                  move.l d0,d0
    95dc:	|                  sub.w d0,d1
    95de:	|                  move.w 8(sp),d0
    95e2:	|                  movea.w d1,a0
    95e4:	|                  adda.w d0,a0
    95e6:	|                  move.w a0,14(sp)
		x2 = x1 + single->width;
    95ea:	|                  movea.l 24(sp),a0
    95ee:	|                  move.l (a0),d0
    95f0:	|                  move.l d0,d0
    95f2:	|                  move.w 16(sp),d1
    95f6:	|                  add.w d0,d1
    95f8:	|                  move.w d1,12(sp)
		y2 = y1 + single->height;
    95fc:	|                  movea.l 24(sp),a0
    9600:	|                  move.l 4(a0),d0
    9604:	|                  move.l d0,d0
    9606:	|                  movea.w 14(sp),a0
    960a:	|                  adda.w d0,a0
    960c:	|                  move.w a0,10(sp)
	}

	if (input.mouseX >= x1 && input.mouseX <= x2 && input.mouseY >= y1 && input.mouseY <= y2) {
    9610:	'----------------> move.l 1cf6e <input+0xa>,d1
    9616:	                   moveq #0,d0
    9618:	                   move.w 16(sp),d0
    961c:	                   cmp.l d1,d0
    961e:	            ,----- bgt.s 9654 <scaleSprite+0x2d4>
    9620:	            |      move.l 1cf6e <input+0xa>,d1
    9626:	            |      moveq #0,d0
    9628:	            |      move.w 12(sp),d0
    962c:	            |      cmp.l d1,d0
    962e:	            +----- blt.s 9654 <scaleSprite+0x2d4>
    9630:	            |      move.l 1cf72 <input+0xe>,d1
    9636:	            |      moveq #0,d0
    9638:	            |      move.w 14(sp),d0
    963c:	            |      cmp.l d1,d0
    963e:	            +----- bgt.s 9654 <scaleSprite+0x2d4>
    9640:	            |      move.l 1cf72 <input+0xe>,d1
    9646:	            |      moveq #0,d0
    9648:	            |      move.w 10(sp),d0
    964c:	            |      cmp.l d1,d0
    964e:	            +----- blt.s 9654 <scaleSprite+0x2d4>
		return TRUE;
    9650:	            |      moveq #1,d0
    9652:	            |  ,-- bra.s 9656 <scaleSprite+0x2d6>
	}
	return FALSE;
    9654:	            '--|-> clr.w d0
    9656:	               '-> move.l (sp)+,d2
    9658:	                   lea 16(sp),sp
    965c:	                   rts

0000965e <TF_abs>:

short int scaleHorizon = 75;
short int scaleDivide = 150;

int TF_abs (int a) {
	return (a > 0) ? a : -a;
    965e:	    move.l 4(sp),d0
    9662:	,-- bpl.s 9666 <TF_abs+0x8>
    9664:	|   neg.l d0
}
    9666:	'-> rts

00009668 <addPerson>:


BOOL addPerson(int x, int y, int objNum, struct persona *p) {
    9668:	             lea -28(sp),sp
    966c:	             move.l a6,-(sp)
    966e:	             move.l d2,-(sp)
    struct onScreenPerson *newPerson = AllocVec(sizeof(struct onScreenPerson), MEMF_ANY);
    9670:	             move.l #132,28(sp)
    9678:	             clr.l 24(sp)
    967c:	             move.l 1cfb6 <SysBase>,d0
    9682:	             movea.l d0,a6
    9684:	             move.l 28(sp),d0
    9688:	             move.l 24(sp),d1
    968c:	             jsr -684(a6)
    9690:	             move.l d0,20(sp)
    9694:	             move.l 20(sp),d0
    9698:	             move.l d0,16(sp)
    if (!newPerson) return FALSE;
    969c:	         ,-- bne.s 96a4 <addPerson+0x3c>
    969e:	         |   clr.w d0
    96a0:	,--------|-- bra.w 98d4 <addPerson+0x26c>

    // EASY STUFF
    newPerson->thisType = loadObjectType(objNum);
    96a4:	|        '-> move.l 48(sp),-(sp)
    96a8:	|            jsr dacc <loadObjectType>
    96ae:	|            addq.l #4,sp
    96b0:	|            movea.l 16(sp),a0
    96b4:	|            move.l d0,114(a0)
    newPerson->scale = 1;
    96b8:	|            movea.l 16(sp),a0
    96bc:	|            move.l #1065353216,32(a0)
    newPerson->extra = 0;
    96c4:	|            movea.l 16(sp),a0
    96c8:	|            clr.l 118(a0)
    newPerson->continueAfterWalking = NULL;
    96cc:	|            movea.l 16(sp),a0
    96d0:	|            clr.l 68(a0)
    moveAndScale(newPerson, x, y);
    96d4:	|            move.l 44(sp),-(sp)
    96d8:	|            jsr 17bda <__floatsisf>
    96de:	|            addq.l #4,sp
    96e0:	|            move.l d0,d2
    96e2:	|            move.l 40(sp),-(sp)
    96e6:	|            jsr 17bda <__floatsisf>
    96ec:	|            addq.l #4,sp
    96ee:	|            move.l d2,-(sp)
    96f0:	|            move.l d0,-(sp)
    96f2:	|            move.l 24(sp),-(sp)
    96f6:	|            jsr b218 <moveAndScale>
    96fc:	|            lea 12(sp),sp
    newPerson->frameNum = 0;
    9700:	|            movea.l 16(sp),a0
    9704:	|            clr.l 84(a0)
    newPerson->walkToX = x;
    9708:	|            movea.l 16(sp),a0
    970c:	|            move.l 40(sp),40(a0)
    newPerson->walkToY = y;
    9712:	|            movea.l 16(sp),a0
    9716:	|            move.l 44(sp),44(a0)
    newPerson->walking = FALSE;
    971c:	|            movea.l 16(sp),a0
    9720:	|            clr.w 64(a0)
    newPerson->spinning = FALSE;
    9724:	|            movea.l 16(sp),a0
    9728:	|            clr.w 66(a0)
    newPerson->show = TRUE;
    972c:	|            movea.l 16(sp),a0
    9730:	|            move.w #1,104(a0)
    newPerson->direction = 0;
    9736:	|            movea.l 16(sp),a0
    973a:	|            clr.l 106(a0)
    newPerson->angle = 180;
    973e:	|            movea.l 16(sp),a0
    9742:	|            move.l #180,92(a0)
    newPerson->wantAngle = 180;
    974a:	|            movea.l 16(sp),a0
    974e:	|            move.l #180,96(a0)
    newPerson->angleOffset = 0;
    9756:	|            movea.l 16(sp),a0
    975a:	|            clr.l 100(a0)
    newPerson->floaty = 0;
    975e:	|            movea.l 16(sp),a0
    9762:	|            clr.l 24(a0)
    newPerson->walkSpeed = newPerson->thisType->walkSpeed;
    9766:	|            movea.l 16(sp),a0
    976a:	|            movea.l 114(a0),a0
    976e:	|            move.l 24(a0),d0
    9772:	|            movea.l 16(sp),a0
    9776:	|            move.l d0,28(a0)
    newPerson->myAnim = NULL;
    977a:	|            movea.l 16(sp),a0
    977e:	|            clr.l 72(a0)
    newPerson->spinSpeed = newPerson->thisType->spinSpeed;
    9782:	|            movea.l 16(sp),a0
    9786:	|            movea.l 114(a0),a0
    978a:	|            move.l 32(a0),d0
    978e:	|            movea.l 16(sp),a0
    9792:	|            move.l d0,122(a0)
    newPerson->r = 0;
    9796:	|            movea.l 16(sp),a0
    979a:	|            clr.b 126(a0)
    newPerson->g = 0;
    979e:	|            movea.l 16(sp),a0
    97a2:	|            clr.b 127(a0)
    newPerson->b = 0;
    97a6:	|            movea.l 16(sp),a0
    97aa:	|            clr.b 128(a0)
    newPerson->colourmix = 0;
    97ae:	|            movea.l 16(sp),a0
    97b2:	|            clr.b 129(a0)
    newPerson->transparency = 0;
    97b6:	|            movea.l 16(sp),a0
    97ba:	|            clr.b 130(a0)
    newPerson->myPersona = p;
    97be:	|            movea.l 16(sp),a0
    97c2:	|            move.l 52(sp),80(a0)

    setFrames(newPerson, ANI_STAND);
    97c8:	|            clr.l -(sp)
    97ca:	|            move.l 20(sp),-(sp)
    97ce:	|            jsr 4516 <setFrames>
    97d4:	|            addq.l #8,sp

    // HEIGHT (BASED ON 1st FRAME OF 1st ANIMATION... INC. SPECIAL CASES)
    int fNumSigned = p->animation[0]->frames[0].frameNum;
    97d6:	|            movea.l 52(sp),a0
    97da:	|            movea.l (a0),a0
    97dc:	|            movea.l (a0),a0
    97de:	|            movea.l 4(a0),a0
    97e2:	|            move.l (a0),12(sp)
    int fNum = fNumSigned < 0 ? fNumSigned * - 1 : 1;
    97e6:	|     ,----- bpl.s 97f0 <addPerson+0x188>
    97e8:	|     |      move.l 12(sp),d0
    97ec:	|     |      neg.l d0
    97ee:	|     |  ,-- bra.s 97f2 <addPerson+0x18a>
    97f0:	|     '--|-> moveq #1,d0
    97f2:	|        '-> move.l d0,8(sp)
    if (fNum >= p->animation[0]->theSprites->bank.total) {
    97f6:	|            movea.l 52(sp),a0
    97fa:	|            movea.l (a0),a0
    97fc:	|            movea.l (a0),a0
    97fe:	|            movea.l (a0),a0
    9800:	|            move.l 8(a0),d0
    9804:	|            cmp.l 8(sp),d0
    9808:	|     ,----- bgt.s 983a <addPerson+0x1d2>
        if (fNumSigned < 0) {
    980a:	|     |      tst.l 12(sp)
    980e:	|     |  ,-- bge.s 981c <addPerson+0x1b4>
            newPerson->height = 5;
    9810:	|     |  |   movea.l 16(sp),a0
    9814:	|     |  |   moveq #5,d0
    9816:	|     |  |   move.l d0,20(a0)
    981a:	|  ,--|--|-- bra.s 9866 <addPerson+0x1fe>
        } else {
            newPerson->height = p->animation[0]->theSprites->bank.sprites[0].yhot + 5;
    981c:	|  |  |  '-> movea.l 52(sp),a0
    9820:	|  |  |      movea.l (a0),a0
    9822:	|  |  |      movea.l (a0),a0
    9824:	|  |  |      movea.l (a0),a0
    9826:	|  |  |      movea.l 16(a0),a0
    982a:	|  |  |      move.l 12(a0),d0
    982e:	|  |  |      addq.l #5,d0
    9830:	|  |  |      movea.l 16(sp),a0
    9834:	|  |  |      move.l d0,20(a0)
    9838:	|  +--|----- bra.s 9866 <addPerson+0x1fe>
        }
    } else {
        newPerson->height = p->animation[0]->theSprites->bank.sprites[fNum].yhot + 5;
    983a:	|  |  '----> movea.l 52(sp),a0
    983e:	|  |         movea.l (a0),a0
    9840:	|  |         movea.l (a0),a0
    9842:	|  |         movea.l (a0),a0
    9844:	|  |         movea.l 16(a0),a0
    9848:	|  |         move.l 8(sp),d1
    984c:	|  |         move.l d1,d0
    984e:	|  |         lsl.l #3,d0
    9850:	|  |         sub.l d1,d0
    9852:	|  |         add.l d0,d0
    9854:	|  |         add.l d0,d0
    9856:	|  |         adda.l d0,a0
    9858:	|  |         move.l 12(a0),d0
    985c:	|  |         addq.l #5,d0
    985e:	|  |         movea.l 16(sp),a0
    9862:	|  |         move.l d0,20(a0)
    }

    // NOW ADD IT IN THE RIGHT PLACE
    struct onScreenPerson **changethat = &allPeople;
    9866:	|  '-------> move.l #118806,32(sp)

    while (((*changethat) != NULL) && ((*changethat)->y < y)) {
    986e:	|        ,-- bra.s 987e <addPerson+0x216>
        changethat = &((*changethat)->next);
    9870:	|     ,--|-> movea.l 32(sp),a0
    9874:	|     |  |   move.l (a0),d0
    9876:	|     |  |   moveq #36,d1
    9878:	|     |  |   add.l d0,d1
    987a:	|     |  |   move.l d1,32(sp)
    while (((*changethat) != NULL) && ((*changethat)->y < y)) {
    987e:	|     |  '-> movea.l 32(sp),a0
    9882:	|     |      move.l (a0),d0
    9884:	|     |  ,-- beq.s 98ac <addPerson+0x244>
    9886:	|     |  |   movea.l 32(sp),a0
    988a:	|     |  |   movea.l (a0),a0
    988c:	|     |  |   move.l 4(a0),d2
    9890:	|     |  |   move.l 44(sp),-(sp)
    9894:	|     |  |   jsr 17bda <__floatsisf>
    989a:	|     |  |   addq.l #4,sp
    989c:	|     |  |   move.l d0,-(sp)
    989e:	|     |  |   move.l d2,-(sp)
    98a0:	|     |  |   jsr 17e00 <__ltsf2>
    98a6:	|     |  |   addq.l #8,sp
    98a8:	|     |  |   tst.l d0
    98aa:	|     '--|-- blt.s 9870 <addPerson+0x208>
    }

    newPerson->next = (*changethat);
    98ac:	|        '-> movea.l 32(sp),a0
    98b0:	|            move.l (a0),d0
    98b2:	|            movea.l 16(sp),a0
    98b6:	|            move.l d0,36(a0)
    (*changethat) = newPerson;
    98ba:	|            movea.l 32(sp),a0
    98be:	|            move.l 16(sp),(a0)

    return (BOOL) (newPerson->thisType != NULL);
    98c2:	|            movea.l 16(sp),a0
    98c6:	|            move.l 114(a0),d0
    98ca:	|            sne d0
    98cc:	|            neg.b d0
    98ce:	|            move.b d0,d0
    98d0:	|            andi.w #255,d0
}
    98d4:	'----------> move.l (sp)+,d2
    98d6:	             movea.l (sp)+,a6
    98d8:	             lea 28(sp),sp
    98dc:	             rts

000098de <animatePerson>:

void animatePerson (int obj, struct personaAnimation * fram) { // Set a new SINGLE animation
    98de:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(obj);
    98e0:	       move.l 8(sp),-(sp)
    98e4:	       jsr aa6e <findPerson>
    98ea:	       addq.l #4,sp
    98ec:	       move.l d0,(sp)
    if (moveMe) {
    98ee:	,----- beq.s 9922 <animatePerson+0x44>
        if (moveMe -> continueAfterWalking) abortFunction(moveMe -> continueAfterWalking);
    98f0:	|      movea.l (sp),a0
    98f2:	|      move.l 68(a0),d0
    98f6:	|  ,-- beq.s 9908 <animatePerson+0x2a>
    98f8:	|  |   movea.l (sp),a0
    98fa:	|  |   move.l 68(a0),d0
    98fe:	|  |   move.l d0,-(sp)
    9900:	|  |   jsr 5374 <abortFunction>
    9906:	|  |   addq.l #4,sp
        moveMe -> continueAfterWalking = NULL;
    9908:	|  '-> movea.l (sp),a0
    990a:	|      clr.l 68(a0)
        moveMe -> walking = FALSE;
    990e:	|      movea.l (sp),a0
    9910:	|      clr.w 64(a0)
        moveMe -> spinning = FALSE;
    9914:	|      movea.l (sp),a0
    9916:	|      clr.w 66(a0)
        moveMe -> myAnim = fram;
    991a:	|      movea.l (sp),a0
    991c:	|      move.l 12(sp),72(a0)
    }
}
    9922:	'----> nop
    9924:	       addq.l #4,sp
    9926:	       rts

00009928 <animatePersonUsingPersona>:

void animatePersonUsingPersona (int obj, struct persona * per) { // Set a new costume
    9928:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(obj);
    992a:	       move.l 8(sp),-(sp)
    992e:	       jsr aa6e <findPerson>
    9934:	       addq.l #4,sp
    9936:	       move.l d0,(sp)
    if (moveMe) {
    9938:	,----- beq.s 997a <animatePersonUsingPersona+0x52>
        // if (moveMe -> continueAfterWalking) abortFunction (moveMe -> continueAfterWalking);
        // moveMe -> continueAfterWalking = NULL;
        // moveMe -> walking = false;
        moveMe -> spinning = FALSE;
    993a:	|      movea.l (sp),a0
    993c:	|      clr.w 66(a0)
        moveMe -> myPersona = per;
    9940:	|      movea.l (sp),a0
    9942:	|      move.l 12(sp),80(a0)
        rethinkAngle(moveMe);
    9948:	|      move.l (sp),-(sp)
    994a:	|      jsr b3a6 <rethinkAngle>
    9950:	|      addq.l #4,sp
        if (moveMe->walking) {
    9952:	|      movea.l (sp),a0
    9954:	|      move.w 64(a0),d0
    9958:	|  ,-- beq.s 996c <animatePersonUsingPersona+0x44>
            setFrames(moveMe, ANI_WALK);
    995a:	|  |   pea 1 <_start+0x1>
    995e:	|  |   move.l 4(sp),-(sp)
    9962:	|  |   jsr 4516 <setFrames>
    9968:	|  |   addq.l #8,sp
        } else {
            setFrames(moveMe, ANI_STAND);
        }
    }
}
    996a:	+--|-- bra.s 997a <animatePersonUsingPersona+0x52>
            setFrames(moveMe, ANI_STAND);
    996c:	|  '-> clr.l -(sp)
    996e:	|      move.l 4(sp),-(sp)
    9972:	|      jsr 4516 <setFrames>
    9978:	|      addq.l #8,sp
}
    997a:	'----> nop
    997c:	       addq.l #4,sp
    997e:	       rts

00009980 <copyAnim>:
		thisPerson = thisPerson->next;
	}
}


struct personaAnimation * copyAnim (struct personaAnimation * orig) {
    9980:	             lea -36(sp),sp
    9984:	             move.l a6,-(sp)
	int num = orig -> numFrames;
    9986:	             movea.l 44(sp),a0
    998a:	             move.l 8(a0),32(sp)


	struct personaAnimation * newAnim	= AllocVec(sizeof( struct personaAnimation), MEMF_ANY);
    9990:	             moveq #12,d0
    9992:	             move.l d0,28(sp)
    9996:	             clr.l 24(sp)
    999a:	             move.l 1cfb6 <SysBase>,d0
    99a0:	             movea.l d0,a6
    99a2:	             move.l 28(sp),d0
    99a6:	             move.l 24(sp),d1
    99aa:	             jsr -684(a6)
    99ae:	             move.l d0,20(sp)
    99b2:	             move.l 20(sp),d0
    99b6:	             move.l d0,16(sp)
	if (!(newAnim)) {
    99ba:	         ,-- bne.s 99d0 <copyAnim+0x50>
		KPrintF("copyAnim: Cannot allocate memory");
    99bc:	         |   pea 196f7 <PutChar+0x14ad>
    99c2:	         |   jsr 177a8 <KPrintF>
    99c8:	         |   addq.l #4,sp
		return NULL;
    99ca:	         |   moveq #0,d0
    99cc:	,--------|-- bra.w 9b22 <copyAnim+0x1a2>
	}

	// Copy the easy bits...
	newAnim -> theSprites		= orig -> theSprites;
    99d0:	|        '-> movea.l 44(sp),a0
    99d4:	|            move.l (a0),d0
    99d6:	|            movea.l 16(sp),a0
    99da:	|            move.l d0,(a0)
	newAnim -> theSprites ->timesUsed++;
    99dc:	|            movea.l 16(sp),a0
    99e0:	|            movea.l (a0),a0
    99e2:	|            move.l 4(a0),d0
    99e6:	|            addq.l #1,d0
    99e8:	|            move.l d0,4(a0)
	newAnim -> numFrames		= num;
    99ec:	|            movea.l 16(sp),a0
    99f0:	|            move.l 32(sp),8(a0)

	if (num) {
    99f6:	|  ,-------- beq.w 9b16 <copyAnim+0x196>

		// Argh! Frames! We need a whole NEW array of animFrame structures...

		newAnim->frames = AllocVec(sizeof(struct animFrame) * num, MEMF_ANY);
    99fa:	|  |         move.l 32(sp),d1
    99fe:	|  |         move.l d1,d0
    9a00:	|  |         add.l d0,d0
    9a02:	|  |         add.l d1,d0
    9a04:	|  |         add.l d0,d0
    9a06:	|  |         add.l d0,d0
    9a08:	|  |         move.l d0,12(sp)
    9a0c:	|  |         clr.l 8(sp)
    9a10:	|  |         move.l 1cfb6 <SysBase>,d0
    9a16:	|  |         movea.l d0,a6
    9a18:	|  |         move.l 12(sp),d0
    9a1c:	|  |         move.l 8(sp),d1
    9a20:	|  |         jsr -684(a6)
    9a24:	|  |         move.l d0,4(sp)
    9a28:	|  |         move.l 4(sp),d0
    9a2c:	|  |         movea.l 16(sp),a0
    9a30:	|  |         move.l d0,4(a0)
		if (!newAnim->frames) {
    9a34:	|  |         movea.l 16(sp),a0
    9a38:	|  |         move.l 4(a0),d0
    9a3c:	|  |     ,-- bne.s 9a52 <copyAnim+0xd2>
			KPrintF("copyAnim: Cannot allocate memory");
    9a3e:	|  |     |   pea 196f7 <PutChar+0x14ad>
    9a44:	|  |     |   jsr 177a8 <KPrintF>
    9a4a:	|  |     |   addq.l #4,sp
			return NULL;
    9a4c:	|  |     |   moveq #0,d0
    9a4e:	+--|-----|-- bra.w 9b22 <copyAnim+0x1a2>
		}

		for (int a = 0; a < num; a ++) {
    9a52:	|  |     '-> clr.l 36(sp)
    9a56:	|  |     ,-- bra.w 9b08 <copyAnim+0x188>
			newAnim -> frames[a].frameNum = orig -> frames[a].frameNum;
    9a5a:	|  |  ,--|-> movea.l 44(sp),a0
    9a5e:	|  |  |  |   movea.l 4(a0),a0
    9a62:	|  |  |  |   move.l 36(sp),d1
    9a66:	|  |  |  |   move.l d1,d0
    9a68:	|  |  |  |   add.l d0,d0
    9a6a:	|  |  |  |   add.l d1,d0
    9a6c:	|  |  |  |   add.l d0,d0
    9a6e:	|  |  |  |   add.l d0,d0
    9a70:	|  |  |  |   lea (0,a0,d0.l),a1
    9a74:	|  |  |  |   movea.l 16(sp),a0
    9a78:	|  |  |  |   movea.l 4(a0),a0
    9a7c:	|  |  |  |   move.l 36(sp),d1
    9a80:	|  |  |  |   move.l d1,d0
    9a82:	|  |  |  |   add.l d0,d0
    9a84:	|  |  |  |   add.l d1,d0
    9a86:	|  |  |  |   add.l d0,d0
    9a88:	|  |  |  |   add.l d0,d0
    9a8a:	|  |  |  |   adda.l d0,a0
    9a8c:	|  |  |  |   move.l (a1),d0
    9a8e:	|  |  |  |   move.l d0,(a0)
			newAnim -> frames[a].howMany = orig -> frames[a].howMany;
    9a90:	|  |  |  |   movea.l 44(sp),a0
    9a94:	|  |  |  |   movea.l 4(a0),a0
    9a98:	|  |  |  |   move.l 36(sp),d1
    9a9c:	|  |  |  |   move.l d1,d0
    9a9e:	|  |  |  |   add.l d0,d0
    9aa0:	|  |  |  |   add.l d1,d0
    9aa2:	|  |  |  |   add.l d0,d0
    9aa4:	|  |  |  |   add.l d0,d0
    9aa6:	|  |  |  |   lea (0,a0,d0.l),a1
    9aaa:	|  |  |  |   movea.l 16(sp),a0
    9aae:	|  |  |  |   movea.l 4(a0),a0
    9ab2:	|  |  |  |   move.l 36(sp),d1
    9ab6:	|  |  |  |   move.l d1,d0
    9ab8:	|  |  |  |   add.l d0,d0
    9aba:	|  |  |  |   add.l d1,d0
    9abc:	|  |  |  |   add.l d0,d0
    9abe:	|  |  |  |   add.l d0,d0
    9ac0:	|  |  |  |   adda.l d0,a0
    9ac2:	|  |  |  |   move.l 4(a1),d0
    9ac6:	|  |  |  |   move.l d0,4(a0)
			newAnim -> frames[a].noise = orig -> frames[a].noise;
    9aca:	|  |  |  |   movea.l 44(sp),a0
    9ace:	|  |  |  |   movea.l 4(a0),a0
    9ad2:	|  |  |  |   move.l 36(sp),d1
    9ad6:	|  |  |  |   move.l d1,d0
    9ad8:	|  |  |  |   add.l d0,d0
    9ada:	|  |  |  |   add.l d1,d0
    9adc:	|  |  |  |   add.l d0,d0
    9ade:	|  |  |  |   add.l d0,d0
    9ae0:	|  |  |  |   lea (0,a0,d0.l),a1
    9ae4:	|  |  |  |   movea.l 16(sp),a0
    9ae8:	|  |  |  |   movea.l 4(a0),a0
    9aec:	|  |  |  |   move.l 36(sp),d1
    9af0:	|  |  |  |   move.l d1,d0
    9af2:	|  |  |  |   add.l d0,d0
    9af4:	|  |  |  |   add.l d1,d0
    9af6:	|  |  |  |   add.l d0,d0
    9af8:	|  |  |  |   add.l d0,d0
    9afa:	|  |  |  |   adda.l d0,a0
    9afc:	|  |  |  |   move.l 8(a1),d0
    9b00:	|  |  |  |   move.l d0,8(a0)
		for (int a = 0; a < num; a ++) {
    9b04:	|  |  |  |   addq.l #1,36(sp)
    9b08:	|  |  |  '-> move.l 36(sp),d0
    9b0c:	|  |  |      cmp.l 32(sp),d0
    9b10:	|  |  '----- blt.w 9a5a <copyAnim+0xda>
    9b14:	|  |     ,-- bra.s 9b1e <copyAnim+0x19e>
		}
	} else {
		newAnim -> frames = NULL;
    9b16:	|  '-----|-> movea.l 16(sp),a0
    9b1a:	|        |   clr.l 4(a0)
	}

	return newAnim;
    9b1e:	|        '-> move.l 16(sp),d0
}
    9b22:	'----------> movea.l (sp)+,a6
    9b24:	             lea 36(sp),sp
    9b28:	             rts

00009b2a <createPersonaAnim>:


struct personaAnimation * createPersonaAnim (int num, struct variableStack **stacky) {
    9b2a:	                lea -44(sp),sp
    9b2e:	                move.l a6,-(sp)
    9b30:	                move.l d2,-(sp)
	struct personaAnimation * newP = AllocVec( sizeof(struct personaAnimation), MEMF_ANY);
    9b32:	                moveq #12,d0
    9b34:	                move.l d0,40(sp)
    9b38:	                clr.l 36(sp)
    9b3c:	                move.l 1cfb6 <SysBase>,d0
    9b42:	                movea.l d0,a6
    9b44:	                move.l 40(sp),d0
    9b48:	                move.l 36(sp),d1
    9b4c:	                jsr -684(a6)
    9b50:	                move.l d0,32(sp)
    9b54:	                move.l 32(sp),d0
    9b58:	                move.l d0,28(sp)
	if( !newP) {
    9b5c:	            ,-- bne.s 9b72 <createPersonaAnim+0x48>
		KPrintF("createPersonaAnim: Cannot allocate memory");
    9b5e:	            |   pea 19718 <PutChar+0x14ce>
    9b64:	            |   jsr 177a8 <KPrintF>
    9b6a:	            |   addq.l #4,sp
		return NULL;
    9b6c:	            |   moveq #0,d0
    9b6e:	,-----------|-- bra.w 9d42 <createPersonaAnim+0x218>
	}

	newP -> numFrames = num;
    9b72:	|           '-> movea.l 28(sp),a0
    9b76:	|               move.l 56(sp),8(a0)
	newP -> frames = AllocVec( sizeof( struct animFrame) * num,MEMF_ANY);
    9b7c:	|               move.l 56(sp),d1
    9b80:	|               move.l d1,d0
    9b82:	|               add.l d0,d0
    9b84:	|               add.l d1,d0
    9b86:	|               add.l d0,d0
    9b88:	|               add.l d0,d0
    9b8a:	|               move.l d0,24(sp)
    9b8e:	|               clr.l 20(sp)
    9b92:	|               move.l 1cfb6 <SysBase>,d0
    9b98:	|               movea.l d0,a6
    9b9a:	|               move.l 24(sp),d0
    9b9e:	|               move.l 20(sp),d1
    9ba2:	|               jsr -684(a6)
    9ba6:	|               move.l d0,16(sp)
    9baa:	|               move.l 16(sp),d0
    9bae:	|               movea.l 28(sp),a0
    9bb2:	|               move.l d0,4(a0)
	if( !newP->frames) {
    9bb6:	|               movea.l 28(sp),a0
    9bba:	|               move.l 4(a0),d0
    9bbe:	|           ,-- bne.s 9bd4 <createPersonaAnim+0xaa>
		KPrintF("createPersonaAnim: Cannot allocate memory");
    9bc0:	|           |   pea 19718 <PutChar+0x14ce>
    9bc6:	|           |   jsr 177a8 <KPrintF>
    9bcc:	|           |   addq.l #4,sp
		return NULL;
    9bce:	|           |   moveq #0,d0
    9bd0:	+-----------|-- bra.w 9d42 <createPersonaAnim+0x218>
	}

	int a = num, frameNum, howMany;
    9bd4:	|           '-> move.l 56(sp),48(sp)

	struct variableStack *tmp = *stacky;
    9bda:	|               movea.l 60(sp),a0
    9bde:	|               move.l (a0),44(sp)
	while (a) {
    9be2:	|     ,-------- bra.w 9d36 <createPersonaAnim+0x20c>
		a --;
    9be6:	|  ,--|-------> subq.l #1,48(sp)
		newP -> frames[a].noise = 0;
    9bea:	|  |  |         movea.l 28(sp),a0
    9bee:	|  |  |         movea.l 4(a0),a0
    9bf2:	|  |  |         move.l 48(sp),d1
    9bf6:	|  |  |         move.l d1,d0
    9bf8:	|  |  |         add.l d0,d0
    9bfa:	|  |  |         add.l d1,d0
    9bfc:	|  |  |         add.l d0,d0
    9bfe:	|  |  |         add.l d0,d0
    9c00:	|  |  |         adda.l d0,a0
    9c02:	|  |  |         clr.l 8(a0)
		if ( tmp->thisVar.varType == SVT_FILE) {
    9c06:	|  |  |         movea.l 44(sp),a0
    9c0a:	|  |  |         move.l (a0),d0
    9c0c:	|  |  |         moveq #5,d1
    9c0e:	|  |  |         cmp.l d0,d1
    9c10:	|  |  |     ,-- bne.s 9c3c <createPersonaAnim+0x112>
			newP -> frames[a].noise = tmp -> thisVar.varData.intValue;
    9c12:	|  |  |     |   movea.l 28(sp),a0
    9c16:	|  |  |     |   movea.l 4(a0),a0
    9c1a:	|  |  |     |   move.l 48(sp),d1
    9c1e:	|  |  |     |   move.l d1,d0
    9c20:	|  |  |     |   add.l d0,d0
    9c22:	|  |  |     |   add.l d1,d0
    9c24:	|  |  |     |   add.l d0,d0
    9c26:	|  |  |     |   add.l d0,d0
    9c28:	|  |  |     |   lea (0,a0,d0.l),a1
    9c2c:	|  |  |     |   movea.l 44(sp),a0
    9c30:	|  |  |     |   move.l 4(a0),d0
    9c34:	|  |  |     |   move.l d0,8(a1)
    9c38:	|  |  |  ,--|-- bra.w 9ce4 <createPersonaAnim+0x1ba>
		} else if ( tmp -> thisVar.varType == SVT_FUNC) {
    9c3c:	|  |  |  |  '-> movea.l 44(sp),a0
    9c40:	|  |  |  |      move.l (a0),d0
    9c42:	|  |  |  |      moveq #2,d1
    9c44:	|  |  |  |      cmp.l d0,d1
    9c46:	|  |  |  |  ,-- bne.s 9c72 <createPersonaAnim+0x148>
			newP -> frames[a].noise = - tmp -> thisVar.varData.intValue;
    9c48:	|  |  |  |  |   movea.l 44(sp),a0
    9c4c:	|  |  |  |  |   move.l 4(a0),d2
    9c50:	|  |  |  |  |   movea.l 28(sp),a0
    9c54:	|  |  |  |  |   movea.l 4(a0),a0
    9c58:	|  |  |  |  |   move.l 48(sp),d1
    9c5c:	|  |  |  |  |   move.l d1,d0
    9c5e:	|  |  |  |  |   add.l d0,d0
    9c60:	|  |  |  |  |   add.l d1,d0
    9c62:	|  |  |  |  |   add.l d0,d0
    9c64:	|  |  |  |  |   add.l d0,d0
    9c66:	|  |  |  |  |   adda.l d0,a0
    9c68:	|  |  |  |  |   move.l d2,d0
    9c6a:	|  |  |  |  |   neg.l d0
    9c6c:	|  |  |  |  |   move.l d0,8(a0)
    9c70:	|  |  |  +--|-- bra.s 9ce4 <createPersonaAnim+0x1ba>
		} else if ( tmp -> thisVar.varType == SVT_STACK) {
    9c72:	|  |  |  |  '-> movea.l 44(sp),a0
    9c76:	|  |  |  |      move.l (a0),d0
    9c78:	|  |  |  |      moveq #6,d1
    9c7a:	|  |  |  |      cmp.l d0,d1
    9c7c:	|  |  |  |  ,-- bne.s 9cc4 <createPersonaAnim+0x19a>
			getValueType (&frameNum, SVT_INT, &tmp->thisVar.varData.theStack -> first -> thisVar);
    9c7e:	|  |  |  |  |   movea.l 44(sp),a0
    9c82:	|  |  |  |  |   movea.l 4(a0),a0
    9c86:	|  |  |  |  |   move.l (a0),d0
    9c88:	|  |  |  |  |   move.l d0,-(sp)
    9c8a:	|  |  |  |  |   pea 1 <_start+0x1>
    9c8e:	|  |  |  |  |   lea 20(sp),a0
    9c92:	|  |  |  |  |   move.l a0,-(sp)
    9c94:	|  |  |  |  |   jsr 14cc8 <getValueType>
    9c9a:	|  |  |  |  |   lea 12(sp),sp
			getValueType (&howMany, SVT_INT, &tmp -> thisVar.varData.theStack -> first -> next -> thisVar);
    9c9e:	|  |  |  |  |   movea.l 44(sp),a0
    9ca2:	|  |  |  |  |   movea.l 4(a0),a0
    9ca6:	|  |  |  |  |   movea.l (a0),a0
    9ca8:	|  |  |  |  |   move.l 8(a0),d0
    9cac:	|  |  |  |  |   move.l d0,-(sp)
    9cae:	|  |  |  |  |   pea 1 <_start+0x1>
    9cb2:	|  |  |  |  |   lea 16(sp),a0
    9cb6:	|  |  |  |  |   move.l a0,-(sp)
    9cb8:	|  |  |  |  |   jsr 14cc8 <getValueType>
    9cbe:	|  |  |  |  |   lea 12(sp),sp
    9cc2:	|  |  |  +--|-- bra.s 9ce4 <createPersonaAnim+0x1ba>
		} else {
			getValueType (&frameNum, SVT_INT, &tmp -> thisVar);
    9cc4:	|  |  |  |  '-> move.l 44(sp),d0
    9cc8:	|  |  |  |      move.l d0,-(sp)
    9cca:	|  |  |  |      pea 1 <_start+0x1>
    9cce:	|  |  |  |      lea 20(sp),a0
    9cd2:	|  |  |  |      move.l a0,-(sp)
    9cd4:	|  |  |  |      jsr 14cc8 <getValueType>
    9cda:	|  |  |  |      lea 12(sp),sp
			howMany = 1;
    9cde:	|  |  |  |      moveq #1,d0
    9ce0:	|  |  |  |      move.l d0,8(sp)
		}
		trimStack (stacky);
    9ce4:	|  |  |  '----> move.l 60(sp),-(sp)
    9ce8:	|  |  |         jsr 1564c <trimStack>
    9cee:	|  |  |         addq.l #4,sp
		newP -> frames[a].frameNum = frameNum;
    9cf0:	|  |  |         movea.l 28(sp),a0
    9cf4:	|  |  |         movea.l 4(a0),a0
    9cf8:	|  |  |         move.l 48(sp),d1
    9cfc:	|  |  |         move.l d1,d0
    9cfe:	|  |  |         add.l d0,d0
    9d00:	|  |  |         add.l d1,d0
    9d02:	|  |  |         add.l d0,d0
    9d04:	|  |  |         add.l d0,d0
    9d06:	|  |  |         adda.l d0,a0
    9d08:	|  |  |         move.l 12(sp),d0
    9d0c:	|  |  |         move.l d0,(a0)
		newP -> frames[a].howMany = howMany;
    9d0e:	|  |  |         movea.l 28(sp),a0
    9d12:	|  |  |         movea.l 4(a0),a0
    9d16:	|  |  |         move.l 48(sp),d1
    9d1a:	|  |  |         move.l d1,d0
    9d1c:	|  |  |         add.l d0,d0
    9d1e:	|  |  |         add.l d1,d0
    9d20:	|  |  |         add.l d0,d0
    9d22:	|  |  |         add.l d0,d0
    9d24:	|  |  |         adda.l d0,a0
    9d26:	|  |  |         move.l 8(sp),d0
    9d2a:	|  |  |         move.l d0,4(a0)
		tmp = *stacky;
    9d2e:	|  |  |         movea.l 60(sp),a0
    9d32:	|  |  |         move.l (a0),44(sp)
	while (a) {
    9d36:	|  |  '-------> tst.l 48(sp)
    9d3a:	|  '----------- bne.w 9be6 <createPersonaAnim+0xbc>
	}

	return newP;
    9d3e:	|               move.l 28(sp),d0
}
    9d42:	'-------------> move.l (sp)+,d2
    9d44:	                movea.l (sp)+,a6
    9d46:	                lea 44(sp),sp
    9d4a:	                rts

00009d4c <deleteAnim>:

void deleteAnim (struct personaAnimation * orig) {
    9d4c:	       lea -12(sp),sp
    9d50:	       move.l a6,-(sp)

	if(orig->theSprites)
    9d52:	       movea.l 20(sp),a0
    9d56:	       move.l (a0),d0
    9d58:	   ,-- beq.s 9d82 <deleteAnim+0x36>
	{
		int timesused = --orig->theSprites->timesUsed;
    9d5a:	   |   movea.l 20(sp),a0
    9d5e:	   |   movea.l (a0),a0
    9d60:	   |   move.l 4(a0),d0
    9d64:	   |   subq.l #1,d0
    9d66:	   |   move.l d0,4(a0)
    9d6a:	   |   move.l 4(a0),12(sp)
		
		if(!timesused)
    9d70:	   +-- bne.s 9d82 <deleteAnim+0x36>
		{
			forgetSpriteBank( orig->theSprites);
    9d72:	   |   movea.l 20(sp),a0
    9d76:	   |   move.l (a0),d0
    9d78:	   |   move.l d0,-(sp)
    9d7a:	   |   jsr 8e30 <forgetSpriteBank>
    9d80:	   |   addq.l #4,sp
		}
	}			
	
	if (orig)
    9d82:	   '-> tst.l 20(sp)
    9d86:	,----- beq.s 9dc6 <deleteAnim+0x7a>
	{
		if (orig -> numFrames) {
    9d88:	|      movea.l 20(sp),a0
    9d8c:	|      move.l 8(a0),d0
    9d90:	|  ,-- beq.s 9dac <deleteAnim+0x60>
			FreeVec( orig->frames);
    9d92:	|  |   movea.l 20(sp),a0
    9d96:	|  |   move.l 4(a0),8(sp)
    9d9c:	|  |   move.l 1cfb6 <SysBase>,d0
    9da2:	|  |   movea.l d0,a6
    9da4:	|  |   movea.l 8(sp),a1
    9da8:	|  |   jsr -690(a6)
		}
		FreeVec(orig);
    9dac:	|  '-> move.l 20(sp),4(sp)
    9db2:	|      move.l 1cfb6 <SysBase>,d0
    9db8:	|      movea.l d0,a6
    9dba:	|      movea.l 4(sp),a1
    9dbe:	|      jsr -690(a6)
		orig = NULL;
    9dc2:	|      clr.l 20(sp)
	}	
	
}
    9dc6:	'----> nop
    9dc8:	       movea.l (sp)+,a6
    9dca:	       lea 12(sp),sp
    9dce:	       rts

00009dd0 <doBorderStuff>:

BOOL doBorderStuff (struct onScreenPerson * moveMe) {
    9dd0:	          lea -124(sp),sp
    9dd4:	          movem.l d2-d7,-(sp)
    if (moveMe -> inPoly == moveMe -> walkToPoly) {
    9dd8:	          movea.l 152(sp),a0
    9ddc:	          move.l 56(a0),d1
    9de0:	          movea.l 152(sp),a0
    9de4:	          move.l 60(a0),d0
    9de8:	          cmp.l d1,d0
    9dea:	      ,-- bne.s 9e1a <doBorderStuff+0x4a>
        moveMe -> inPoly = -1;
    9dec:	      |   movea.l 152(sp),a0
    9df0:	      |   moveq #-1,d0
    9df2:	      |   move.l d0,56(a0)
        moveMe -> thisStepX = moveMe -> walkToX;
    9df6:	      |   movea.l 152(sp),a0
    9dfa:	      |   move.l 40(a0),d0
    9dfe:	      |   movea.l 152(sp),a0
    9e02:	      |   move.l d0,48(a0)
        moveMe -> thisStepY = moveMe -> walkToY;
    9e06:	      |   movea.l 152(sp),a0
    9e0a:	      |   move.l 44(a0),d0
    9e0e:	      |   movea.l 152(sp),a0
    9e12:	      |   move.l d0,52(a0)
    9e16:	   ,--|-- bra.w a380 <doBorderStuff+0x5b0>
    } else {
        // The section in which we need to be next...
        int newPoly = currentFloor -> matrix[moveMe -> inPoly][moveMe -> walkToPoly];
    9e1a:	   |  '-> movea.l 1d0ce <currentFloor>,a0
    9e20:	   |      move.l 16(a0),d1
    9e24:	   |      movea.l 152(sp),a0
    9e28:	   |      move.l 56(a0),d0
    9e2c:	   |      add.l d0,d0
    9e2e:	   |      add.l d0,d0
    9e30:	   |      movea.l d1,a0
    9e32:	   |      adda.l d0,a0
    9e34:	   |      move.l (a0),d1
    9e36:	   |      movea.l 152(sp),a0
    9e3a:	   |      move.l 60(a0),d0
    9e3e:	   |      add.l d0,d0
    9e40:	   |      add.l d0,d0
    9e42:	   |      movea.l d1,a0
    9e44:	   |      adda.l d0,a0
    9e46:	   |      move.l (a0),144(sp)
        if (newPoly == -1) return FALSE;
    9e4a:	   |      moveq #-1,d0
    9e4c:	   |      cmp.l 144(sp),d0
    9e50:	   |  ,-- bne.s 9e58 <doBorderStuff+0x88>
    9e52:	   |  |   clr.w d0
    9e54:	,--|--|-- bra.w a480 <doBorderStuff+0x6b0>

        // Grab the index of the second matching corner...
        int ID, ID2;
        if (! getMatchingCorners (&(currentFloor -> polygon[moveMe -> inPoly]), &(currentFloor -> polygon[newPoly]), &ID, &ID2))
    9e58:	|  |  '-> movea.l 1d0ce <currentFloor>,a0
    9e5e:	|  |      move.l 12(a0),d1
    9e62:	|  |      move.l 144(sp),d0
    9e66:	|  |      lsl.l #3,d0
    9e68:	|  |      add.l d0,d1
    9e6a:	|  |      movea.l 1d0ce <currentFloor>,a0
    9e70:	|  |      movea.l 12(a0),a1
    9e74:	|  |      movea.l 152(sp),a0
    9e78:	|  |      move.l 56(a0),d0
    9e7c:	|  |      lsl.l #3,d0
    9e7e:	|  |      add.l a1,d0
    9e80:	|  |      lea 40(sp),a0
    9e84:	|  |      move.l a0,-(sp)
    9e86:	|  |      lea 48(sp),a0
    9e8a:	|  |      move.l a0,-(sp)
    9e8c:	|  |      move.l d1,-(sp)
    9e8e:	|  |      move.l d0,-(sp)
    9e90:	|  |      jsr 16a0e <getMatchingCorners>
    9e96:	|  |      lea 16(sp),sp
    9e9a:	|  |      tst.w d0
    9e9c:	|  |  ,-- bne.s 9eb2 <doBorderStuff+0xe2>
		{
			KPrintF ("Not a valid floor plan!");
    9e9e:	|  |  |   pea 19742 <PutChar+0x14f8>
    9ea4:	|  |  |   jsr 177a8 <KPrintF>
    9eaa:	|  |  |   addq.l #4,sp
            return FALSE;
    9eac:	|  |  |   clr.w d0
    9eae:	+--|--|-- bra.w a480 <doBorderStuff+0x6b0>
		}

        // Remember that we're walking to the new polygon...
        moveMe -> inPoly = newPoly;
    9eb2:	|  |  '-> movea.l 152(sp),a0
    9eb6:	|  |      move.l 144(sp),56(a0)

        // Calculate the destination position on the coincidental line...
        int x1 = moveMe -> x, y1 = moveMe -> y;
    9ebc:	|  |      movea.l 152(sp),a0
    9ec0:	|  |      move.l (a0),d0
    9ec2:	|  |      move.l d0,-(sp)
    9ec4:	|  |      jsr 17b72 <__fixsfsi>
    9eca:	|  |      addq.l #4,sp
    9ecc:	|  |      move.l d0,140(sp)
    9ed0:	|  |      movea.l 152(sp),a0
    9ed4:	|  |      move.l 4(a0),d0
    9ed8:	|  |      move.l d0,-(sp)
    9eda:	|  |      jsr 17b72 <__fixsfsi>
    9ee0:	|  |      addq.l #4,sp
    9ee2:	|  |      move.l d0,136(sp)
        int x2 = moveMe -> walkToX, y2 = moveMe -> walkToY;
    9ee6:	|  |      movea.l 152(sp),a0
    9eea:	|  |      move.l 40(a0),132(sp)
    9ef0:	|  |      movea.l 152(sp),a0
    9ef4:	|  |      move.l 44(a0),128(sp)
        int x3 = currentFloor -> vertex[ID].x, y3 = currentFloor -> vertex[ID].y;
    9efa:	|  |      movea.l 1d0ce <currentFloor>,a0
    9f00:	|  |      move.l 4(a0),d1
    9f04:	|  |      move.l 44(sp),d0
    9f08:	|  |      lsl.l #3,d0
    9f0a:	|  |      movea.l d1,a0
    9f0c:	|  |      adda.l d0,a0
    9f0e:	|  |      move.l (a0),124(sp)
    9f12:	|  |      movea.l 1d0ce <currentFloor>,a0
    9f18:	|  |      move.l 4(a0),d1
    9f1c:	|  |      move.l 44(sp),d0
    9f20:	|  |      lsl.l #3,d0
    9f22:	|  |      movea.l d1,a0
    9f24:	|  |      adda.l d0,a0
    9f26:	|  |      move.l 4(a0),120(sp)
        int x4 = currentFloor -> vertex[ID2].x, y4 = currentFloor -> vertex[ID2].y;
    9f2c:	|  |      movea.l 1d0ce <currentFloor>,a0
    9f32:	|  |      move.l 4(a0),d1
    9f36:	|  |      move.l 40(sp),d0
    9f3a:	|  |      lsl.l #3,d0
    9f3c:	|  |      movea.l d1,a0
    9f3e:	|  |      adda.l d0,a0
    9f40:	|  |      move.l (a0),116(sp)
    9f44:	|  |      movea.l 1d0ce <currentFloor>,a0
    9f4a:	|  |      move.l 4(a0),d1
    9f4e:	|  |      move.l 40(sp),d0
    9f52:	|  |      lsl.l #3,d0
    9f54:	|  |      movea.l d1,a0
    9f56:	|  |      adda.l d0,a0
    9f58:	|  |      move.l 4(a0),112(sp)

        int xAB = x1 - x2;
    9f5e:	|  |      move.l 140(sp),d0
    9f62:	|  |      sub.l 132(sp),d0
    9f66:	|  |      move.l d0,108(sp)
        int yAB = y1 - y2;
    9f6a:	|  |      move.l 136(sp),d0
    9f6e:	|  |      sub.l 128(sp),d0
    9f72:	|  |      move.l d0,104(sp)
        int xCD = x4 - x3;
    9f76:	|  |      move.l 116(sp),d0
    9f7a:	|  |      sub.l 124(sp),d0
    9f7e:	|  |      move.l d0,100(sp)
        int yCD = y4 - y3;
    9f82:	|  |      move.l 112(sp),d0
    9f86:	|  |      sub.l 120(sp),d0
    9f8a:	|  |      move.l d0,96(sp)

        double m = (yAB * (x3 - x1) - xAB * (y3 - y1));
    9f8e:	|  |      move.l 124(sp),d0
    9f92:	|  |      sub.l 140(sp),d0
    9f96:	|  |      move.l 104(sp),-(sp)
    9f9a:	|  |      move.l d0,-(sp)
    9f9c:	|  |      jsr 18134 <__mulsi3>
    9fa2:	|  |      addq.l #8,sp
    9fa4:	|  |      move.l d0,d2
    9fa6:	|  |      move.l 120(sp),d0
    9faa:	|  |      sub.l 136(sp),d0
    9fae:	|  |      move.l 108(sp),-(sp)
    9fb2:	|  |      move.l d0,-(sp)
    9fb4:	|  |      jsr 18134 <__mulsi3>
    9fba:	|  |      addq.l #8,sp
    9fbc:	|  |      move.l d2,d1
    9fbe:	|  |      sub.l d0,d1
    9fc0:	|  |      move.l d1,-(sp)
    9fc2:	|  |      jsr 17b9a <__floatsidf>
    9fc8:	|  |      addq.l #4,sp
    9fca:	|  |      move.l d0,32(sp)
    9fce:	|  |      move.l d1,36(sp)
    9fd2:	|  |      move.l 32(sp),88(sp)
    9fd8:	|  |      move.l 36(sp),92(sp)
        m /= ((xAB * yCD) - (yAB * xCD));
    9fde:	|  |      move.l 96(sp),-(sp)
    9fe2:	|  |      move.l 112(sp),-(sp)
    9fe6:	|  |      jsr 18134 <__mulsi3>
    9fec:	|  |      addq.l #8,sp
    9fee:	|  |      move.l d0,d2
    9ff0:	|  |      move.l 100(sp),-(sp)
    9ff4:	|  |      move.l 108(sp),-(sp)
    9ff8:	|  |      jsr 18134 <__mulsi3>
    9ffe:	|  |      addq.l #8,sp
    a000:	|  |      move.l d2,d1
    a002:	|  |      sub.l d0,d1
    a004:	|  |      move.l d1,-(sp)
    a006:	|  |      jsr 17b9a <__floatsidf>
    a00c:	|  |      addq.l #4,sp
    a00e:	|  |      move.l d1,-(sp)
    a010:	|  |      move.l d0,-(sp)
    a012:	|  |      move.l 100(sp),-(sp)
    a016:	|  |      move.l 100(sp),-(sp)
    a01a:	|  |      jsr 17a2e <__divdf3>
    a020:	|  |      lea 16(sp),sp
    a024:	|  |      move.l d0,24(sp)
    a028:	|  |      move.l d1,28(sp)
    a02c:	|  |      move.l 24(sp),88(sp)
    a032:	|  |      move.l 28(sp),92(sp)

        if (m > 0 && m < 1) {
    a038:	|  |      clr.l -(sp)
    a03a:	|  |      clr.l -(sp)
    a03c:	|  |      move.l 100(sp),-(sp)
    a040:	|  |      move.l 100(sp),-(sp)
    a044:	|  |      jsr 17cf8 <__gtdf2>
    a04a:	|  |      lea 16(sp),sp
    a04e:	|  |      tst.l d0
    a050:	|  |  ,-- ble.w a128 <doBorderStuff+0x358>
    a054:	|  |  |   clr.l -(sp)
    a056:	|  |  |   move.l #1072693248,-(sp)
    a05c:	|  |  |   move.l 100(sp),-(sp)
    a060:	|  |  |   move.l 100(sp),-(sp)
    a064:	|  |  |   jsr 17db2 <__ltdf2>
    a06a:	|  |  |   lea 16(sp),sp
    a06e:	|  |  |   tst.l d0
    a070:	|  |  +-- bge.w a128 <doBorderStuff+0x358>
            moveMe -> thisStepX = x3 + m * xCD;
    a074:	|  |  |   move.l 124(sp),-(sp)
    a078:	|  |  |   jsr 17b9a <__floatsidf>
    a07e:	|  |  |   addq.l #4,sp
    a080:	|  |  |   move.l d0,d2
    a082:	|  |  |   move.l d1,d3
    a084:	|  |  |   move.l 100(sp),-(sp)
    a088:	|  |  |   jsr 17b9a <__floatsidf>
    a08e:	|  |  |   addq.l #4,sp
    a090:	|  |  |   move.l 92(sp),-(sp)
    a094:	|  |  |   move.l 92(sp),-(sp)
    a098:	|  |  |   move.l d1,-(sp)
    a09a:	|  |  |   move.l d0,-(sp)
    a09c:	|  |  |   jsr 17c2a <__muldf3>
    a0a2:	|  |  |   lea 16(sp),sp
    a0a6:	|  |  |   move.l d1,-(sp)
    a0a8:	|  |  |   move.l d0,-(sp)
    a0aa:	|  |  |   move.l d3,-(sp)
    a0ac:	|  |  |   move.l d2,-(sp)
    a0ae:	|  |  |   jsr 179cc <__adddf3>
    a0b4:	|  |  |   lea 16(sp),sp
    a0b8:	|  |  |   move.l d1,-(sp)
    a0ba:	|  |  |   move.l d0,-(sp)
    a0bc:	|  |  |   jsr 17b3c <__fixdfsi>
    a0c2:	|  |  |   addq.l #8,sp
    a0c4:	|  |  |   movea.l 152(sp),a0
    a0c8:	|  |  |   move.l d0,48(a0)
            moveMe -> thisStepY = y3 + m * yCD;
    a0cc:	|  |  |   move.l 120(sp),-(sp)
    a0d0:	|  |  |   jsr 17b9a <__floatsidf>
    a0d6:	|  |  |   addq.l #4,sp
    a0d8:	|  |  |   move.l d0,d2
    a0da:	|  |  |   move.l d1,d3
    a0dc:	|  |  |   move.l 96(sp),-(sp)
    a0e0:	|  |  |   jsr 17b9a <__floatsidf>
    a0e6:	|  |  |   addq.l #4,sp
    a0e8:	|  |  |   move.l 92(sp),-(sp)
    a0ec:	|  |  |   move.l 92(sp),-(sp)
    a0f0:	|  |  |   move.l d1,-(sp)
    a0f2:	|  |  |   move.l d0,-(sp)
    a0f4:	|  |  |   jsr 17c2a <__muldf3>
    a0fa:	|  |  |   lea 16(sp),sp
    a0fe:	|  |  |   move.l d1,-(sp)
    a100:	|  |  |   move.l d0,-(sp)
    a102:	|  |  |   move.l d3,-(sp)
    a104:	|  |  |   move.l d2,-(sp)
    a106:	|  |  |   jsr 179cc <__adddf3>
    a10c:	|  |  |   lea 16(sp),sp
    a110:	|  |  |   move.l d1,-(sp)
    a112:	|  |  |   move.l d0,-(sp)
    a114:	|  |  |   jsr 17b3c <__fixdfsi>
    a11a:	|  |  |   addq.l #8,sp
    a11c:	|  |  |   movea.l 152(sp),a0
    a120:	|  |  |   move.l d0,52(a0)
    a124:	|  +--|-- bra.w a380 <doBorderStuff+0x5b0>
        } else {
            int dx13 = x1 - x3, dx14 = x1 - x4, dx23 = x2 - x3, dx24 = x2 - x4;
    a128:	|  |  '-> move.l 140(sp),d0
    a12c:	|  |      sub.l 124(sp),d0
    a130:	|  |      move.l d0,84(sp)
    a134:	|  |      move.l 140(sp),d0
    a138:	|  |      sub.l 116(sp),d0
    a13c:	|  |      move.l d0,80(sp)
    a140:	|  |      move.l 132(sp),d0
    a144:	|  |      sub.l 124(sp),d0
    a148:	|  |      move.l d0,76(sp)
    a14c:	|  |      move.l 132(sp),d0
    a150:	|  |      sub.l 116(sp),d0
    a154:	|  |      move.l d0,72(sp)
            int dy13 = y1 - y3, dy14 = y1 - y4, dy23 = y2 - y3, dy24 = y2 - y4;
    a158:	|  |      move.l 136(sp),d0
    a15c:	|  |      sub.l 120(sp),d0
    a160:	|  |      move.l d0,68(sp)
    a164:	|  |      move.l 136(sp),d0
    a168:	|  |      sub.l 112(sp),d0
    a16c:	|  |      move.l d0,64(sp)
    a170:	|  |      move.l 128(sp),d0
    a174:	|  |      sub.l 120(sp),d0
    a178:	|  |      move.l d0,60(sp)
    a17c:	|  |      move.l 128(sp),d0
    a180:	|  |      sub.l 112(sp),d0
    a184:	|  |      move.l d0,56(sp)

            dx13 *= dx13; dx14 *= dx14; dx23 *= dx23; dx24 *= dx24;
    a188:	|  |      move.l 84(sp),-(sp)
    a18c:	|  |      move.l 88(sp),-(sp)
    a190:	|  |      jsr 18134 <__mulsi3>
    a196:	|  |      addq.l #8,sp
    a198:	|  |      move.l d0,84(sp)
    a19c:	|  |      move.l 80(sp),-(sp)
    a1a0:	|  |      move.l 84(sp),-(sp)
    a1a4:	|  |      jsr 18134 <__mulsi3>
    a1aa:	|  |      addq.l #8,sp
    a1ac:	|  |      move.l d0,80(sp)
    a1b0:	|  |      move.l 76(sp),-(sp)
    a1b4:	|  |      move.l 80(sp),-(sp)
    a1b8:	|  |      jsr 18134 <__mulsi3>
    a1be:	|  |      addq.l #8,sp
    a1c0:	|  |      move.l d0,76(sp)
    a1c4:	|  |      move.l 72(sp),-(sp)
    a1c8:	|  |      move.l 76(sp),-(sp)
    a1cc:	|  |      jsr 18134 <__mulsi3>
    a1d2:	|  |      addq.l #8,sp
    a1d4:	|  |      move.l d0,72(sp)
            dy13 *= dy13; dy14 *= dy14; dy23 *= dy23; dy24 *= dy24;
    a1d8:	|  |      move.l 68(sp),-(sp)
    a1dc:	|  |      move.l 72(sp),-(sp)
    a1e0:	|  |      jsr 18134 <__mulsi3>
    a1e6:	|  |      addq.l #8,sp
    a1e8:	|  |      move.l d0,68(sp)
    a1ec:	|  |      move.l 64(sp),-(sp)
    a1f0:	|  |      move.l 68(sp),-(sp)
    a1f4:	|  |      jsr 18134 <__mulsi3>
    a1fa:	|  |      addq.l #8,sp
    a1fc:	|  |      move.l d0,64(sp)
    a200:	|  |      move.l 60(sp),-(sp)
    a204:	|  |      move.l 64(sp),-(sp)
    a208:	|  |      jsr 18134 <__mulsi3>
    a20e:	|  |      addq.l #8,sp
    a210:	|  |      move.l d0,60(sp)
    a214:	|  |      move.l 56(sp),-(sp)
    a218:	|  |      move.l 60(sp),-(sp)
    a21c:	|  |      jsr 18134 <__mulsi3>
    a222:	|  |      addq.l #8,sp
    a224:	|  |      move.l d0,56(sp)

            if (sqrt((double) dx13 + dy13) + sqrt((double) dx23 + dy23) <
    a228:	|  |      move.l 84(sp),-(sp)
    a22c:	|  |      jsr 17b9a <__floatsidf>
    a232:	|  |      addq.l #4,sp
    a234:	|  |      move.l d0,d2
    a236:	|  |      move.l d1,d3
    a238:	|  |      move.l 68(sp),-(sp)
    a23c:	|  |      jsr 17b9a <__floatsidf>
    a242:	|  |      addq.l #4,sp
    a244:	|  |      move.l d1,-(sp)
    a246:	|  |      move.l d0,-(sp)
    a248:	|  |      move.l d3,-(sp)
    a24a:	|  |      move.l d2,-(sp)
    a24c:	|  |      jsr 179cc <__adddf3>
    a252:	|  |      lea 16(sp),sp
    a256:	|  |      move.l d1,-(sp)
    a258:	|  |      move.l d0,-(sp)
    a25a:	|  |      jsr 180ea <sqrt>
    a260:	|  |      addq.l #8,sp
    a262:	|  |      move.l d0,d2
    a264:	|  |      move.l d1,d3
    a266:	|  |      move.l 76(sp),-(sp)
    a26a:	|  |      jsr 17b9a <__floatsidf>
    a270:	|  |      addq.l #4,sp
    a272:	|  |      move.l d0,d4
    a274:	|  |      move.l d1,d5
    a276:	|  |      move.l 60(sp),-(sp)
    a27a:	|  |      jsr 17b9a <__floatsidf>
    a280:	|  |      addq.l #4,sp
    a282:	|  |      move.l d1,-(sp)
    a284:	|  |      move.l d0,-(sp)
    a286:	|  |      move.l d5,-(sp)
    a288:	|  |      move.l d4,-(sp)
    a28a:	|  |      jsr 179cc <__adddf3>
    a290:	|  |      lea 16(sp),sp
    a294:	|  |      move.l d1,-(sp)
    a296:	|  |      move.l d0,-(sp)
    a298:	|  |      jsr 180ea <sqrt>
    a29e:	|  |      addq.l #8,sp
    a2a0:	|  |      move.l d1,-(sp)
    a2a2:	|  |      move.l d0,-(sp)
    a2a4:	|  |      move.l d3,-(sp)
    a2a6:	|  |      move.l d2,-(sp)
    a2a8:	|  |      jsr 179cc <__adddf3>
    a2ae:	|  |      lea 16(sp),sp
    a2b2:	|  |      move.l d0,d2
    a2b4:	|  |      move.l d1,d3
                sqrt((double) dx14 + dy14) + sqrt((double) dx24 + dy24)) {
    a2b6:	|  |      move.l 80(sp),-(sp)
    a2ba:	|  |      jsr 17b9a <__floatsidf>
    a2c0:	|  |      addq.l #4,sp
    a2c2:	|  |      move.l d0,d4
    a2c4:	|  |      move.l d1,d5
    a2c6:	|  |      move.l 64(sp),-(sp)
    a2ca:	|  |      jsr 17b9a <__floatsidf>
    a2d0:	|  |      addq.l #4,sp
    a2d2:	|  |      move.l d1,-(sp)
    a2d4:	|  |      move.l d0,-(sp)
    a2d6:	|  |      move.l d5,-(sp)
    a2d8:	|  |      move.l d4,-(sp)
    a2da:	|  |      jsr 179cc <__adddf3>
    a2e0:	|  |      lea 16(sp),sp
    a2e4:	|  |      move.l d1,-(sp)
    a2e6:	|  |      move.l d0,-(sp)
    a2e8:	|  |      jsr 180ea <sqrt>
    a2ee:	|  |      addq.l #8,sp
    a2f0:	|  |      move.l d0,d4
    a2f2:	|  |      move.l d1,d5
    a2f4:	|  |      move.l 72(sp),-(sp)
    a2f8:	|  |      jsr 17b9a <__floatsidf>
    a2fe:	|  |      addq.l #4,sp
    a300:	|  |      move.l d0,d6
    a302:	|  |      move.l d1,d7
    a304:	|  |      move.l 56(sp),-(sp)
    a308:	|  |      jsr 17b9a <__floatsidf>
    a30e:	|  |      addq.l #4,sp
    a310:	|  |      move.l d1,-(sp)
    a312:	|  |      move.l d0,-(sp)
    a314:	|  |      move.l d7,-(sp)
    a316:	|  |      move.l d6,-(sp)
    a318:	|  |      jsr 179cc <__adddf3>
    a31e:	|  |      lea 16(sp),sp
    a322:	|  |      move.l d1,-(sp)
    a324:	|  |      move.l d0,-(sp)
    a326:	|  |      jsr 180ea <sqrt>
    a32c:	|  |      addq.l #8,sp
    a32e:	|  |      move.l d1,-(sp)
    a330:	|  |      move.l d0,-(sp)
    a332:	|  |      move.l d5,-(sp)
    a334:	|  |      move.l d4,-(sp)
    a336:	|  |      jsr 179cc <__adddf3>
    a33c:	|  |      lea 16(sp),sp
            if (sqrt((double) dx13 + dy13) + sqrt((double) dx23 + dy23) <
    a340:	|  |      move.l d1,-(sp)
    a342:	|  |      move.l d0,-(sp)
    a344:	|  |      move.l d3,-(sp)
    a346:	|  |      move.l d2,-(sp)
    a348:	|  |      jsr 17db2 <__ltdf2>
    a34e:	|  |      lea 16(sp),sp
    a352:	|  |      tst.l d0
    a354:	|  |  ,-- bge.s a36c <doBorderStuff+0x59c>
                moveMe -> thisStepX = x3;
    a356:	|  |  |   movea.l 152(sp),a0
    a35a:	|  |  |   move.l 124(sp),48(a0)
                moveMe -> thisStepY = y3;
    a360:	|  |  |   movea.l 152(sp),a0
    a364:	|  |  |   move.l 120(sp),52(a0)
    a36a:	|  +--|-- bra.s a380 <doBorderStuff+0x5b0>
            } else {
                moveMe -> thisStepX = x4;
    a36c:	|  |  '-> movea.l 152(sp),a0
    a370:	|  |      move.l 116(sp),48(a0)
                moveMe -> thisStepY = y4;
    a376:	|  |      movea.l 152(sp),a0
    a37a:	|  |      move.l 112(sp),52(a0)
            }
        }
    }

    float yDiff = moveMe -> thisStepY - moveMe -> y;
    a380:	|  '----> movea.l 152(sp),a0
    a384:	|         move.l 52(a0),d0
    a388:	|         move.l d0,-(sp)
    a38a:	|         jsr 17bda <__floatsisf>
    a390:	|         addq.l #4,sp
    a392:	|         move.l d0,d1
    a394:	|         movea.l 152(sp),a0
    a398:	|         move.l 4(a0),d0
    a39c:	|         move.l d0,-(sp)
    a39e:	|         move.l d1,-(sp)
    a3a0:	|         jsr 17ece <__subsf3>
    a3a6:	|         addq.l #8,sp
    a3a8:	|         move.l d0,52(sp)
    float xDiff = moveMe -> x - moveMe -> thisStepX;
    a3ac:	|         movea.l 152(sp),a0
    a3b0:	|         move.l (a0),d2
    a3b2:	|         movea.l 152(sp),a0
    a3b6:	|         move.l 48(a0),d0
    a3ba:	|         move.l d0,-(sp)
    a3bc:	|         jsr 17bda <__floatsisf>
    a3c2:	|         addq.l #4,sp
    a3c4:	|         move.l d0,-(sp)
    a3c6:	|         move.l d2,-(sp)
    a3c8:	|         jsr 17ece <__subsf3>
    a3ce:	|         addq.l #8,sp
    a3d0:	|         move.l d0,48(sp)
    if (xDiff || yDiff) {
    a3d4:	|         clr.l -(sp)
    a3d6:	|         move.l 52(sp),-(sp)
    a3da:	|         jsr 17e36 <__nesf2>
    a3e0:	|         addq.l #8,sp
    a3e2:	|         tst.l d0
    a3e4:	|     ,-- bne.s a3f8 <doBorderStuff+0x628>
    a3e6:	|     |   clr.l -(sp)
    a3e8:	|     |   move.l 56(sp),-(sp)
    a3ec:	|     |   jsr 17e36 <__nesf2>
    a3f2:	|     |   addq.l #8,sp
    a3f4:	|     |   tst.l d0
    a3f6:	|  ,--|-- beq.s a46e <doBorderStuff+0x69e>
        moveMe -> wantAngle = 180 + ANGLEFIX * atan2f(xDiff, yDiff * 2);
    a3f8:	|  |  '-> move.l 52(sp),d0
    a3fc:	|  |      move.l d0,-(sp)
    a3fe:	|  |      move.l d0,-(sp)
    a400:	|  |      jsr 17996 <__addsf3>
    a406:	|  |      addq.l #8,sp
    a408:	|  |      move.l d0,-(sp)
    a40a:	|  |      move.l 52(sp),-(sp)
    a40e:	|  |      jsr 17f3a <atan2f>
    a414:	|  |      addq.l #8,sp
    a416:	|  |      move.l d0,-(sp)
    a418:	|  |      jsr 17afc <__extendsfdf2>
    a41e:	|  |      addq.l #4,sp
    a420:	|  |      move.l #-1540411785,-(sp)
    a426:	|  |      move.l #1078765033,-(sp)
    a42c:	|  |      move.l d1,-(sp)
    a42e:	|  |      move.l d0,-(sp)
    a430:	|  |      jsr 17c2a <__muldf3>
    a436:	|  |      lea 16(sp),sp
    a43a:	|  |      clr.l -(sp)
    a43c:	|  |      move.l #1080459264,-(sp)
    a442:	|  |      move.l d1,-(sp)
    a444:	|  |      move.l d0,-(sp)
    a446:	|  |      jsr 179cc <__adddf3>
    a44c:	|  |      lea 16(sp),sp
    a450:	|  |      move.l d1,-(sp)
    a452:	|  |      move.l d0,-(sp)
    a454:	|  |      jsr 17b3c <__fixdfsi>
    a45a:	|  |      addq.l #8,sp
    a45c:	|  |      movea.l 152(sp),a0
    a460:	|  |      move.l d0,96(a0)
        moveMe -> spinning = TRUE;
    a464:	|  |      movea.l 152(sp),a0
    a468:	|  |      move.w #1,66(a0)
    }

    setFrames (moveMe, ANI_WALK);
    a46e:	|  '----> pea 1 <_start+0x1>
    a472:	|         move.l 156(sp),-(sp)
    a476:	|         jsr 4516 <setFrames>
    a47c:	|         addq.l #8,sp
    return TRUE;
    a47e:	|         moveq #1,d0
}
    a480:	'-------> movem.l (sp)+,d2-d7
    a484:	          lea 124(sp),sp
    a488:	          rts

0000a48a <drawPeople>:

void drawPeople () {
    a48a:	                   lea -24(sp),sp
    a48e:	                   move.l d2,-(sp)

	shufflePeople ();
    a490:	                   jsr bf88 <shufflePeople>

	struct onScreenPerson * thisPerson = allPeople;
    a496:	                   move.l 1d016 <allPeople>,24(sp)
	struct personaAnimation * myAnim = NULL;
    a49e:	                   clr.l 20(sp)
	overRegion = NULL;
    a4a2:	                   clr.l 1d0c6 <overRegion>

	while (thisPerson) {
    a4a8:	   ,-------------- bra.w aa5a <drawPeople+0x5d0>
		if (thisPerson -> show) {
    a4ac:	,--|-------------> movea.l 24(sp),a0
    a4b0:	|  |               move.w 104(a0),d0
    a4b4:	|  |  ,----------- beq.w a80e <drawPeople+0x384>
			myAnim = thisPerson -> myAnim;
    a4b8:	|  |  |            movea.l 24(sp),a0
    a4bc:	|  |  |            move.l 72(a0),20(sp)
			if (myAnim != thisPerson -> lastUsedAnim) {
    a4c2:	|  |  |            movea.l 24(sp),a0
    a4c6:	|  |  |            move.l 76(a0),d0
    a4ca:	|  |  |            cmp.l 20(sp),d0
    a4ce:	|  |  |  ,-------- beq.w a69c <drawPeople+0x212>
				thisPerson -> samePosCount = 0;
    a4d2:	|  |  |  |         movea.l 24(sp),a0
    a4d6:	|  |  |  |         clr.l 16(a0)
				thisPerson -> lastUsedAnim = myAnim;
    a4da:	|  |  |  |         movea.l 24(sp),a0
    a4de:	|  |  |  |         move.l 20(sp),76(a0)
				thisPerson -> frameNum = 0;
    a4e4:	|  |  |  |         movea.l 24(sp),a0
    a4e8:	|  |  |  |         clr.l 84(a0)
				thisPerson -> frameTick = myAnim -> frames[0].howMany;
    a4ec:	|  |  |  |         movea.l 20(sp),a0
    a4f0:	|  |  |  |         movea.l 4(a0),a0
    a4f4:	|  |  |  |         move.l 4(a0),d0
    a4f8:	|  |  |  |         movea.l 24(sp),a0
    a4fc:	|  |  |  |         move.l d0,88(a0)
				if (myAnim -> frames[thisPerson -> frameNum].noise > 0) {
    a500:	|  |  |  |         movea.l 20(sp),a0
    a504:	|  |  |  |         movea.l 4(a0),a1
    a508:	|  |  |  |         movea.l 24(sp),a0
    a50c:	|  |  |  |         move.l 84(a0),d0
    a510:	|  |  |  |         move.l d0,d1
    a512:	|  |  |  |         move.l d1,d0
    a514:	|  |  |  |         add.l d0,d0
    a516:	|  |  |  |         add.l d1,d0
    a518:	|  |  |  |         add.l d0,d0
    a51a:	|  |  |  |         add.l d0,d0
    a51c:	|  |  |  |         lea (0,a1,d0.l),a0
    a520:	|  |  |  |         move.l 8(a0),d0
    a524:	|  |  |  |     ,-- ble.w a5c6 <drawPeople+0x13c>
					startSound(myAnim -> frames[thisPerson -> frameNum].noise, FALSE);
    a528:	|  |  |  |     |   movea.l 20(sp),a0
    a52c:	|  |  |  |     |   movea.l 4(a0),a1
    a530:	|  |  |  |     |   movea.l 24(sp),a0
    a534:	|  |  |  |     |   move.l 84(a0),d0
    a538:	|  |  |  |     |   move.l d0,d1
    a53a:	|  |  |  |     |   move.l d1,d0
    a53c:	|  |  |  |     |   add.l d0,d0
    a53e:	|  |  |  |     |   add.l d1,d0
    a540:	|  |  |  |     |   add.l d0,d0
    a542:	|  |  |  |     |   add.l d0,d0
    a544:	|  |  |  |     |   lea (0,a1,d0.l),a0
    a548:	|  |  |  |     |   move.l 8(a0),d0
    a54c:	|  |  |  |     |   clr.l -(sp)
    a54e:	|  |  |  |     |   move.l d0,-(sp)
    a550:	|  |  |  |     |   jsr d69c <startSound>
    a556:	|  |  |  |     |   addq.l #8,sp
					thisPerson -> frameNum ++;
    a558:	|  |  |  |     |   movea.l 24(sp),a0
    a55c:	|  |  |  |     |   move.l 84(a0),d0
    a560:	|  |  |  |     |   addq.l #1,d0
    a562:	|  |  |  |     |   movea.l 24(sp),a0
    a566:	|  |  |  |     |   move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a56a:	|  |  |  |     |   movea.l 24(sp),a0
    a56e:	|  |  |  |     |   move.l 84(a0),d0
    a572:	|  |  |  |     |   movea.l 24(sp),a0
    a576:	|  |  |  |     |   movea.l 72(a0),a0
    a57a:	|  |  |  |     |   move.l 8(a0),d1
    a57e:	|  |  |  |     |   move.l d1,-(sp)
    a580:	|  |  |  |     |   move.l d0,-(sp)
    a582:	|  |  |  |     |   jsr 181e0 <__modsi3>
    a588:	|  |  |  |     |   addq.l #8,sp
    a58a:	|  |  |  |     |   movea.l 24(sp),a0
    a58e:	|  |  |  |     |   move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a592:	|  |  |  |     |   movea.l 24(sp),a0
    a596:	|  |  |  |     |   movea.l 72(a0),a0
    a59a:	|  |  |  |     |   movea.l 4(a0),a1
    a59e:	|  |  |  |     |   movea.l 24(sp),a0
    a5a2:	|  |  |  |     |   move.l 84(a0),d0
    a5a6:	|  |  |  |     |   move.l d0,d1
    a5a8:	|  |  |  |     |   move.l d1,d0
    a5aa:	|  |  |  |     |   add.l d0,d0
    a5ac:	|  |  |  |     |   add.l d1,d0
    a5ae:	|  |  |  |     |   add.l d0,d0
    a5b0:	|  |  |  |     |   add.l d0,d0
    a5b2:	|  |  |  |     |   lea (0,a1,d0.l),a0
    a5b6:	|  |  |  |     |   move.l 4(a0),d0
    a5ba:	|  |  |  |     |   movea.l 24(sp),a0
    a5be:	|  |  |  |     |   move.l d0,88(a0)
    a5c2:	|  |  |  |  ,--|-- bra.w a704 <drawPeople+0x27a>
				} else if (myAnim -> frames[thisPerson -> frameNum].noise) {
    a5c6:	|  |  |  |  |  '-> movea.l 20(sp),a0
    a5ca:	|  |  |  |  |      movea.l 4(a0),a1
    a5ce:	|  |  |  |  |      movea.l 24(sp),a0
    a5d2:	|  |  |  |  |      move.l 84(a0),d0
    a5d6:	|  |  |  |  |      move.l d0,d1
    a5d8:	|  |  |  |  |      move.l d1,d0
    a5da:	|  |  |  |  |      add.l d0,d0
    a5dc:	|  |  |  |  |      add.l d1,d0
    a5de:	|  |  |  |  |      add.l d0,d0
    a5e0:	|  |  |  |  |      add.l d0,d0
    a5e2:	|  |  |  |  |      lea (0,a1,d0.l),a0
    a5e6:	|  |  |  |  |      move.l 8(a0),d0
    a5ea:	|  |  |  |  +----- beq.w a704 <drawPeople+0x27a>
					startNewFunctionNum (- myAnim -> frames[thisPerson -> frameNum].noise, 0, NULL, noStack, TRUE);
    a5ee:	|  |  |  |  |      movea.l 1cf82 <noStack>,a1
    a5f4:	|  |  |  |  |      movea.l 20(sp),a0
    a5f8:	|  |  |  |  |      move.l 4(a0),d2
    a5fc:	|  |  |  |  |      movea.l 24(sp),a0
    a600:	|  |  |  |  |      move.l 84(a0),d0
    a604:	|  |  |  |  |      move.l d0,d1
    a606:	|  |  |  |  |      move.l d1,d0
    a608:	|  |  |  |  |      add.l d0,d0
    a60a:	|  |  |  |  |      add.l d1,d0
    a60c:	|  |  |  |  |      add.l d0,d0
    a60e:	|  |  |  |  |      add.l d0,d0
    a610:	|  |  |  |  |      movea.l d2,a0
    a612:	|  |  |  |  |      adda.l d0,a0
    a614:	|  |  |  |  |      move.l 8(a0),d0
    a618:	|  |  |  |  |      neg.l d0
    a61a:	|  |  |  |  |      pea 1 <_start+0x1>
    a61e:	|  |  |  |  |      move.l a1,-(sp)
    a620:	|  |  |  |  |      clr.l -(sp)
    a622:	|  |  |  |  |      clr.l -(sp)
    a624:	|  |  |  |  |      move.l d0,-(sp)
    a626:	|  |  |  |  |      jsr 79ac <startNewFunctionNum>
    a62c:	|  |  |  |  |      lea 20(sp),sp
					thisPerson -> frameNum ++;
    a630:	|  |  |  |  |      movea.l 24(sp),a0
    a634:	|  |  |  |  |      move.l 84(a0),d0
    a638:	|  |  |  |  |      addq.l #1,d0
    a63a:	|  |  |  |  |      movea.l 24(sp),a0
    a63e:	|  |  |  |  |      move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a642:	|  |  |  |  |      movea.l 24(sp),a0
    a646:	|  |  |  |  |      move.l 84(a0),d0
    a64a:	|  |  |  |  |      movea.l 24(sp),a0
    a64e:	|  |  |  |  |      movea.l 72(a0),a0
    a652:	|  |  |  |  |      move.l 8(a0),d1
    a656:	|  |  |  |  |      move.l d1,-(sp)
    a658:	|  |  |  |  |      move.l d0,-(sp)
    a65a:	|  |  |  |  |      jsr 181e0 <__modsi3>
    a660:	|  |  |  |  |      addq.l #8,sp
    a662:	|  |  |  |  |      movea.l 24(sp),a0
    a666:	|  |  |  |  |      move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a66a:	|  |  |  |  |      movea.l 24(sp),a0
    a66e:	|  |  |  |  |      movea.l 72(a0),a0
    a672:	|  |  |  |  |      movea.l 4(a0),a1
    a676:	|  |  |  |  |      movea.l 24(sp),a0
    a67a:	|  |  |  |  |      move.l 84(a0),d0
    a67e:	|  |  |  |  |      move.l d0,d1
    a680:	|  |  |  |  |      move.l d1,d0
    a682:	|  |  |  |  |      add.l d0,d0
    a684:	|  |  |  |  |      add.l d1,d0
    a686:	|  |  |  |  |      add.l d0,d0
    a688:	|  |  |  |  |      add.l d0,d0
    a68a:	|  |  |  |  |      lea (0,a1,d0.l),a0
    a68e:	|  |  |  |  |      move.l 4(a0),d0
    a692:	|  |  |  |  |      movea.l 24(sp),a0
    a696:	|  |  |  |  |      move.l d0,88(a0)
    a69a:	|  |  |  |  +----- bra.s a704 <drawPeople+0x27a>
				}
			} else {
				if(thisPerson->x == thisPerson->oldx && thisPerson->y == thisPerson->oldy && myAnim->numFrames == 1)
    a69c:	|  |  |  '--|----> movea.l 24(sp),a0
    a6a0:	|  |  |     |      move.l (a0),d0
    a6a2:	|  |  |     |      movea.l 24(sp),a0
    a6a6:	|  |  |     |      move.l 8(a0),d1
    a6aa:	|  |  |     |      move.l d1,-(sp)
    a6ac:	|  |  |     |      move.l d0,-(sp)
    a6ae:	|  |  |     |      jsr 17ac6 <__eqsf2>
    a6b4:	|  |  |     |      addq.l #8,sp
    a6b6:	|  |  |     |      tst.l d0
    a6b8:	|  |  |     |  ,-- bne.s a6fc <drawPeople+0x272>
    a6ba:	|  |  |     |  |   movea.l 24(sp),a0
    a6be:	|  |  |     |  |   move.l 4(a0),d0
    a6c2:	|  |  |     |  |   movea.l 24(sp),a0
    a6c6:	|  |  |     |  |   move.l 12(a0),d1
    a6ca:	|  |  |     |  |   move.l d1,-(sp)
    a6cc:	|  |  |     |  |   move.l d0,-(sp)
    a6ce:	|  |  |     |  |   jsr 17ac6 <__eqsf2>
    a6d4:	|  |  |     |  |   addq.l #8,sp
    a6d6:	|  |  |     |  |   tst.l d0
    a6d8:	|  |  |     |  +-- bne.s a6fc <drawPeople+0x272>
    a6da:	|  |  |     |  |   movea.l 20(sp),a0
    a6de:	|  |  |     |  |   move.l 8(a0),d0
    a6e2:	|  |  |     |  |   moveq #1,d1
    a6e4:	|  |  |     |  |   cmp.l d0,d1
    a6e6:	|  |  |     |  +-- bne.s a6fc <drawPeople+0x272>
				{
					thisPerson->samePosCount++;
    a6e8:	|  |  |     |  |   movea.l 24(sp),a0
    a6ec:	|  |  |     |  |   move.l 16(a0),d0
    a6f0:	|  |  |     |  |   addq.l #1,d0
    a6f2:	|  |  |     |  |   movea.l 24(sp),a0
    a6f6:	|  |  |     |  |   move.l d0,16(a0)
    a6fa:	|  |  |     +--|-- bra.s a704 <drawPeople+0x27a>
				} else
				{
					thisPerson->samePosCount = 0;
    a6fc:	|  |  |     |  '-> movea.l 24(sp),a0
    a700:	|  |  |     |      clr.l 16(a0)
				}
			}

			thisPerson->oldx = thisPerson->x;
    a704:	|  |  |     '----> movea.l 24(sp),a0
    a708:	|  |  |            move.l (a0),d0
    a70a:	|  |  |            movea.l 24(sp),a0
    a70e:	|  |  |            move.l d0,8(a0)
			thisPerson->oldy = thisPerson->y;
    a712:	|  |  |            movea.l 24(sp),a0
    a716:	|  |  |            move.l 4(a0),d0
    a71a:	|  |  |            movea.l 24(sp),a0
    a71e:	|  |  |            move.l d0,12(a0)
			int fNumSign = myAnim -> frames[thisPerson -> frameNum].frameNum;
    a722:	|  |  |            movea.l 20(sp),a0
    a726:	|  |  |            movea.l 4(a0),a1
    a72a:	|  |  |            movea.l 24(sp),a0
    a72e:	|  |  |            move.l 84(a0),d0
    a732:	|  |  |            move.l d0,d1
    a734:	|  |  |            move.l d1,d0
    a736:	|  |  |            add.l d0,d0
    a738:	|  |  |            add.l d1,d0
    a73a:	|  |  |            add.l d0,d0
    a73c:	|  |  |            add.l d0,d0
    a73e:	|  |  |            lea (0,a1,d0.l),a0
    a742:	|  |  |            move.l (a0),8(sp)
			int m = fNumSign < 0;
    a746:	|  |  |            move.l 8(sp),d0
    a74a:	|  |  |            add.l d0,d0
    a74c:	|  |  |            subx.l d0,d0
    a74e:	|  |  |            neg.l d0
    a750:	|  |  |            move.b d0,d0
    a752:	|  |  |            move.b d0,d0
    a754:	|  |  |            andi.l #255,d0
    a75a:	|  |  |            move.l d0,16(sp)
			int fNum = TF_abs(fNumSign);
    a75e:	|  |  |            move.l 8(sp),-(sp)
    a762:	|  |  |            jsr 965e <TF_abs>
    a768:	|  |  |            addq.l #4,sp
    a76a:	|  |  |            move.l d0,12(sp)
			if (fNum >= myAnim -> theSprites -> bank.total) {
    a76e:	|  |  |            movea.l 20(sp),a0
    a772:	|  |  |            movea.l (a0),a0
    a774:	|  |  |            move.l 8(a0),d0
    a778:	|  |  |            cmp.l 12(sp),d0
    a77c:	|  |  |        ,-- bgt.s a78c <drawPeople+0x302>
				fNum = 0;
    a77e:	|  |  |        |   clr.l 12(sp)
				m = 2 - m;
    a782:	|  |  |        |   moveq #2,d0
    a784:	|  |  |        |   sub.l 16(sp),d0
    a788:	|  |  |        |   move.l d0,16(sp)
			}
			if (m != 2) {
    a78c:	|  |  |        '-> moveq #2,d1
    a78e:	|  |  |            cmp.l 16(sp),d1
    a792:	|  |  +----------- beq.s a80e <drawPeople+0x384>
				BOOL r = FALSE;
    a794:	|  |  |            clr.w 6(sp)

				r = scaleSprite ( &myAnim->theSprites->bank.sprites[fNum], thisPerson, m);
    a798:	|  |  |            move.l 16(sp),d0
    a79c:	|  |  |            movea.w d0,a0
    a79e:	|  |  |            movea.l 20(sp),a1
    a7a2:	|  |  |            movea.l (a1),a1
    a7a4:	|  |  |            movea.l 16(a1),a1
    a7a8:	|  |  |            move.l 12(sp),d1
    a7ac:	|  |  |            move.l d1,d0
    a7ae:	|  |  |            lsl.l #3,d0
    a7b0:	|  |  |            sub.l d1,d0
    a7b2:	|  |  |            add.l d0,d0
    a7b4:	|  |  |            add.l d0,d0
    a7b6:	|  |  |            add.l a1,d0
    a7b8:	|  |  |            move.l a0,-(sp)
    a7ba:	|  |  |            move.l 28(sp),-(sp)
    a7be:	|  |  |            move.l d0,-(sp)
    a7c0:	|  |  |            jsr 9380 <scaleSprite>
    a7c6:	|  |  |            lea 12(sp),sp
    a7ca:	|  |  |            move.w d0,6(sp)
				if (r) {
    a7ce:	|  |  +----------- beq.s a80e <drawPeople+0x384>
					if (thisPerson -> thisType -> screenName[0]) {
    a7d0:	|  |  |            movea.l 24(sp),a0
    a7d4:	|  |  |            movea.l 114(a0),a0
    a7d8:	|  |  |            movea.l (a0),a0
    a7da:	|  |  |            move.b (a0),d0
    a7dc:	|  |  +----------- beq.s a80e <drawPeople+0x384>
						if (personRegion.thisType != thisPerson -> thisType) lastRegion = NULL;
    a7de:	|  |  |            move.l 1d036 <personRegion+0x1c>,d1
    a7e4:	|  |  |            movea.l 24(sp),a0
    a7e8:	|  |  |            move.l 114(a0),d0
    a7ec:	|  |  |            cmp.l d1,d0
    a7ee:	|  |  |        ,-- beq.s a7f6 <drawPeople+0x36c>
    a7f0:	|  |  |        |   clr.l 1cf7a <lastRegion>
						personRegion.thisType = thisPerson -> thisType;
    a7f6:	|  |  |        '-> movea.l 24(sp),a0
    a7fa:	|  |  |            move.l 114(a0),d0
    a7fe:	|  |  |            move.l d0,1d036 <personRegion+0x1c>
						overRegion = & personRegion;
    a804:	|  |  |            move.l #118810,1d0c6 <overRegion>
					}
				}
			}
		}
		if (! -- thisPerson -> frameTick) {
    a80e:	|  |  '----------> movea.l 24(sp),a0
    a812:	|  |               move.l 88(a0),d0
    a816:	|  |               subq.l #1,d0
    a818:	|  |               movea.l 24(sp),a0
    a81c:	|  |               move.l d0,88(a0)
    a820:	|  |               movea.l 24(sp),a0
    a824:	|  |               move.l 88(a0),d0
    a828:	|  |        ,----- bne.w aa50 <drawPeople+0x5c6>
			thisPerson -> frameNum ++;
    a82c:	|  |        |      movea.l 24(sp),a0
    a830:	|  |        |      move.l 84(a0),d0
    a834:	|  |        |      addq.l #1,d0
    a836:	|  |        |      movea.l 24(sp),a0
    a83a:	|  |        |      move.l d0,84(a0)
			thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a83e:	|  |        |      movea.l 24(sp),a0
    a842:	|  |        |      move.l 84(a0),d0
    a846:	|  |        |      movea.l 24(sp),a0
    a84a:	|  |        |      movea.l 72(a0),a0
    a84e:	|  |        |      move.l 8(a0),d1
    a852:	|  |        |      move.l d1,-(sp)
    a854:	|  |        |      move.l d0,-(sp)
    a856:	|  |        |      jsr 181e0 <__modsi3>
    a85c:	|  |        |      addq.l #8,sp
    a85e:	|  |        |      movea.l 24(sp),a0
    a862:	|  |        |      move.l d0,84(a0)
			thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a866:	|  |        |      movea.l 24(sp),a0
    a86a:	|  |        |      movea.l 72(a0),a0
    a86e:	|  |        |      movea.l 4(a0),a1
    a872:	|  |        |      movea.l 24(sp),a0
    a876:	|  |        |      move.l 84(a0),d0
    a87a:	|  |        |      move.l d0,d1
    a87c:	|  |        |      move.l d1,d0
    a87e:	|  |        |      add.l d0,d0
    a880:	|  |        |      add.l d1,d0
    a882:	|  |        |      add.l d0,d0
    a884:	|  |        |      add.l d0,d0
    a886:	|  |        |      lea (0,a1,d0.l),a0
    a88a:	|  |        |      move.l 4(a0),d0
    a88e:	|  |        |      movea.l 24(sp),a0
    a892:	|  |        |      move.l d0,88(a0)
			if (thisPerson -> show && myAnim && myAnim -> frames) {
    a896:	|  |        |      movea.l 24(sp),a0
    a89a:	|  |        |      move.w 104(a0),d0
    a89e:	|  |        +----- beq.w aa50 <drawPeople+0x5c6>
    a8a2:	|  |        |      tst.l 20(sp)
    a8a6:	|  |        +----- beq.w aa50 <drawPeople+0x5c6>
    a8aa:	|  |        |      movea.l 20(sp),a0
    a8ae:	|  |        |      move.l 4(a0),d0
    a8b2:	|  |        +----- beq.w aa50 <drawPeople+0x5c6>
				if (myAnim -> frames[thisPerson -> frameNum].noise > 0) {
    a8b6:	|  |        |      movea.l 20(sp),a0
    a8ba:	|  |        |      movea.l 4(a0),a1
    a8be:	|  |        |      movea.l 24(sp),a0
    a8c2:	|  |        |      move.l 84(a0),d0
    a8c6:	|  |        |      move.l d0,d1
    a8c8:	|  |        |      move.l d1,d0
    a8ca:	|  |        |      add.l d0,d0
    a8cc:	|  |        |      add.l d1,d0
    a8ce:	|  |        |      add.l d0,d0
    a8d0:	|  |        |      add.l d0,d0
    a8d2:	|  |        |      lea (0,a1,d0.l),a0
    a8d6:	|  |        |      move.l 8(a0),d0
    a8da:	|  |        |  ,-- ble.w a97c <drawPeople+0x4f2>
					startSound(myAnim -> frames[thisPerson -> frameNum].noise, FALSE);
    a8de:	|  |        |  |   movea.l 20(sp),a0
    a8e2:	|  |        |  |   movea.l 4(a0),a1
    a8e6:	|  |        |  |   movea.l 24(sp),a0
    a8ea:	|  |        |  |   move.l 84(a0),d0
    a8ee:	|  |        |  |   move.l d0,d1
    a8f0:	|  |        |  |   move.l d1,d0
    a8f2:	|  |        |  |   add.l d0,d0
    a8f4:	|  |        |  |   add.l d1,d0
    a8f6:	|  |        |  |   add.l d0,d0
    a8f8:	|  |        |  |   add.l d0,d0
    a8fa:	|  |        |  |   lea (0,a1,d0.l),a0
    a8fe:	|  |        |  |   move.l 8(a0),d0
    a902:	|  |        |  |   clr.l -(sp)
    a904:	|  |        |  |   move.l d0,-(sp)
    a906:	|  |        |  |   jsr d69c <startSound>
    a90c:	|  |        |  |   addq.l #8,sp
					thisPerson -> frameNum ++;
    a90e:	|  |        |  |   movea.l 24(sp),a0
    a912:	|  |        |  |   move.l 84(a0),d0
    a916:	|  |        |  |   addq.l #1,d0
    a918:	|  |        |  |   movea.l 24(sp),a0
    a91c:	|  |        |  |   move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a920:	|  |        |  |   movea.l 24(sp),a0
    a924:	|  |        |  |   move.l 84(a0),d0
    a928:	|  |        |  |   movea.l 24(sp),a0
    a92c:	|  |        |  |   movea.l 72(a0),a0
    a930:	|  |        |  |   move.l 8(a0),d1
    a934:	|  |        |  |   move.l d1,-(sp)
    a936:	|  |        |  |   move.l d0,-(sp)
    a938:	|  |        |  |   jsr 181e0 <__modsi3>
    a93e:	|  |        |  |   addq.l #8,sp
    a940:	|  |        |  |   movea.l 24(sp),a0
    a944:	|  |        |  |   move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a948:	|  |        |  |   movea.l 24(sp),a0
    a94c:	|  |        |  |   movea.l 72(a0),a0
    a950:	|  |        |  |   movea.l 4(a0),a1
    a954:	|  |        |  |   movea.l 24(sp),a0
    a958:	|  |        |  |   move.l 84(a0),d0
    a95c:	|  |        |  |   move.l d0,d1
    a95e:	|  |        |  |   move.l d1,d0
    a960:	|  |        |  |   add.l d0,d0
    a962:	|  |        |  |   add.l d1,d0
    a964:	|  |        |  |   add.l d0,d0
    a966:	|  |        |  |   add.l d0,d0
    a968:	|  |        |  |   lea (0,a1,d0.l),a0
    a96c:	|  |        |  |   move.l 4(a0),d0
    a970:	|  |        |  |   movea.l 24(sp),a0
    a974:	|  |        |  |   move.l d0,88(a0)
    a978:	|  |        +--|-- bra.w aa50 <drawPeople+0x5c6>
				} else if (myAnim -> frames[thisPerson -> frameNum].noise) {
    a97c:	|  |        |  '-> movea.l 20(sp),a0
    a980:	|  |        |      movea.l 4(a0),a1
    a984:	|  |        |      movea.l 24(sp),a0
    a988:	|  |        |      move.l 84(a0),d0
    a98c:	|  |        |      move.l d0,d1
    a98e:	|  |        |      move.l d1,d0
    a990:	|  |        |      add.l d0,d0
    a992:	|  |        |      add.l d1,d0
    a994:	|  |        |      add.l d0,d0
    a996:	|  |        |      add.l d0,d0
    a998:	|  |        |      lea (0,a1,d0.l),a0
    a99c:	|  |        |      move.l 8(a0),d0
    a9a0:	|  |        +----- beq.w aa50 <drawPeople+0x5c6>
					startNewFunctionNum (- myAnim -> frames[thisPerson -> frameNum].noise, 0, NULL, noStack, TRUE);
    a9a4:	|  |        |      movea.l 1cf82 <noStack>,a1
    a9aa:	|  |        |      movea.l 20(sp),a0
    a9ae:	|  |        |      move.l 4(a0),d2
    a9b2:	|  |        |      movea.l 24(sp),a0
    a9b6:	|  |        |      move.l 84(a0),d0
    a9ba:	|  |        |      move.l d0,d1
    a9bc:	|  |        |      move.l d1,d0
    a9be:	|  |        |      add.l d0,d0
    a9c0:	|  |        |      add.l d1,d0
    a9c2:	|  |        |      add.l d0,d0
    a9c4:	|  |        |      add.l d0,d0
    a9c6:	|  |        |      movea.l d2,a0
    a9c8:	|  |        |      adda.l d0,a0
    a9ca:	|  |        |      move.l 8(a0),d0
    a9ce:	|  |        |      neg.l d0
    a9d0:	|  |        |      pea 1 <_start+0x1>
    a9d4:	|  |        |      move.l a1,-(sp)
    a9d6:	|  |        |      clr.l -(sp)
    a9d8:	|  |        |      clr.l -(sp)
    a9da:	|  |        |      move.l d0,-(sp)
    a9dc:	|  |        |      jsr 79ac <startNewFunctionNum>
    a9e2:	|  |        |      lea 20(sp),sp
					thisPerson -> frameNum ++;
    a9e6:	|  |        |      movea.l 24(sp),a0
    a9ea:	|  |        |      move.l 84(a0),d0
    a9ee:	|  |        |      addq.l #1,d0
    a9f0:	|  |        |      movea.l 24(sp),a0
    a9f4:	|  |        |      move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a9f8:	|  |        |      movea.l 24(sp),a0
    a9fc:	|  |        |      move.l 84(a0),d0
    aa00:	|  |        |      movea.l 24(sp),a0
    aa04:	|  |        |      movea.l 72(a0),a0
    aa08:	|  |        |      move.l 8(a0),d1
    aa0c:	|  |        |      move.l d1,-(sp)
    aa0e:	|  |        |      move.l d0,-(sp)
    aa10:	|  |        |      jsr 181e0 <__modsi3>
    aa16:	|  |        |      addq.l #8,sp
    aa18:	|  |        |      movea.l 24(sp),a0
    aa1c:	|  |        |      move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    aa20:	|  |        |      movea.l 24(sp),a0
    aa24:	|  |        |      movea.l 72(a0),a0
    aa28:	|  |        |      movea.l 4(a0),a1
    aa2c:	|  |        |      movea.l 24(sp),a0
    aa30:	|  |        |      move.l 84(a0),d0
    aa34:	|  |        |      move.l d0,d1
    aa36:	|  |        |      move.l d1,d0
    aa38:	|  |        |      add.l d0,d0
    aa3a:	|  |        |      add.l d1,d0
    aa3c:	|  |        |      add.l d0,d0
    aa3e:	|  |        |      add.l d0,d0
    aa40:	|  |        |      lea (0,a1,d0.l),a0
    aa44:	|  |        |      move.l 4(a0),d0
    aa48:	|  |        |      movea.l 24(sp),a0
    aa4c:	|  |        |      move.l d0,88(a0)
				}
			}
		}
		thisPerson = thisPerson -> next;
    aa50:	|  |        '----> movea.l 24(sp),a0
    aa54:	|  |               move.l 36(a0),24(sp)
	while (thisPerson) {
    aa5a:	|  '-------------> tst.l 24(sp)
    aa5e:	'----------------- bne.w a4ac <drawPeople+0x22>
	}
}
    aa62:	                   nop
    aa64:	                   nop
    aa66:	                   move.l (sp)+,d2
    aa68:	                   lea 24(sp),sp
    aa6c:	                   rts

0000aa6e <findPerson>:


struct onScreenPerson * findPerson (int v) {
    aa6e:	          subq.l #4,sp
	KPrintF("findPerson started\n");
    aa70:	          pea 1975a <PutChar+0x1510>
    aa76:	          jsr 177a8 <KPrintF>
    aa7c:	          addq.l #4,sp
	struct onScreenPerson * thisPerson = allPeople;
    aa7e:	          move.l 1d016 <allPeople>,(sp)
	while (thisPerson) {
    aa84:	      ,-- bra.s aa9c <findPerson+0x2e>
		if (v == thisPerson -> thisType -> objectNum) break;
    aa86:	,-----|-> movea.l (sp),a0
    aa88:	|     |   movea.l 114(a0),a0
    aa8c:	|     |   move.l 4(a0),d0
    aa90:	|     |   cmp.l 8(sp),d0
    aa94:	|  ,--|-- beq.s aaa2 <findPerson+0x34>
		thisPerson = thisPerson -> next;
    aa96:	|  |  |   movea.l (sp),a0
    aa98:	|  |  |   move.l 36(a0),(sp)
	while (thisPerson) {
    aa9c:	|  |  '-> tst.l (sp)
    aa9e:	'--|----- bne.s aa86 <findPerson+0x18>
    aaa0:	   |  ,-- bra.s aaa4 <findPerson+0x36>
		if (v == thisPerson -> thisType -> objectNum) break;
    aaa2:	   '--|-> nop
	}
	KPrintF("findPerson complete\n");
    aaa4:	      '-> pea 1976e <PutChar+0x1524>
    aaaa:	          jsr 177a8 <KPrintF>
    aab0:	          addq.l #4,sp
	return thisPerson;
    aab2:	          move.l (sp),d0
}
    aab4:	          addq.l #4,sp
    aab6:	          rts

0000aab8 <floatCharacter>:

BOOL floatCharacter (int f, int objNum) {
    aab8:	       subq.l #4,sp
	struct onScreenPerson * moveMe = findPerson (objNum);
    aaba:	       move.l 12(sp),-(sp)
    aabe:	       jsr aa6e <findPerson>
    aac4:	       addq.l #4,sp
    aac6:	       move.l d0,(sp)
	if (! moveMe) return FALSE;
    aac8:	   ,-- bne.s aace <floatCharacter+0x16>
    aaca:	   |   clr.w d0
    aacc:	,--|-- bra.s aad8 <floatCharacter+0x20>
	moveMe -> floaty = f;
    aace:	|  '-> movea.l (sp),a0
    aad0:	|      move.l 8(sp),24(a0)
	return TRUE;
    aad6:	|      moveq #1,d0
}
    aad8:	'----> addq.l #4,sp
    aada:	       rts

0000aadc <forceWalkingPerson>:

BOOL forceWalkingPerson (int x, int y, int objNum, struct loadedFunction * func, int di) {
    aadc:	          subq.l #4,sp
    if (x == 0 && y == 0) return FALSE;
    aade:	          tst.l 8(sp)
    aae2:	      ,-- bne.s aaf0 <forceWalkingPerson+0x14>
    aae4:	      |   tst.l 12(sp)
    aae8:	      +-- bne.s aaf0 <forceWalkingPerson+0x14>
    aaea:	      |   clr.w d0
    aaec:	,-----|-- bra.w ab82 <forceWalkingPerson+0xa6>
    struct onScreenPerson * moveMe = findPerson(objNum);
    aaf0:	|     '-> move.l 16(sp),-(sp)
    aaf4:	|         jsr aa6e <findPerson>
    aafa:	|         addq.l #4,sp
    aafc:	|         move.l d0,(sp)
    if (!moveMe) return FALSE;
    aafe:	|     ,-- bne.s ab04 <forceWalkingPerson+0x28>
    ab00:	|     |   clr.w d0
    ab02:	+-----|-- bra.s ab82 <forceWalkingPerson+0xa6>

    if (moveMe->continueAfterWalking) abortFunction(moveMe->continueAfterWalking);
    ab04:	|     '-> movea.l (sp),a0
    ab06:	|         move.l 68(a0),d0
    ab0a:	|     ,-- beq.s ab1c <forceWalkingPerson+0x40>
    ab0c:	|     |   movea.l (sp),a0
    ab0e:	|     |   move.l 68(a0),d0
    ab12:	|     |   move.l d0,-(sp)
    ab14:	|     |   jsr 5374 <abortFunction>
    ab1a:	|     |   addq.l #4,sp
    moveMe->walking = TRUE;
    ab1c:	|     '-> movea.l (sp),a0
    ab1e:	|         move.w #1,64(a0)
    moveMe->continueAfterWalking = NULL;
    ab24:	|         movea.l (sp),a0
    ab26:	|         clr.l 68(a0)
    moveMe->directionWhenDoneWalking = di;
    ab2a:	|         movea.l (sp),a0
    ab2c:	|         move.l 24(sp),110(a0)

    moveMe->walkToX = x;
    ab32:	|         movea.l (sp),a0
    ab34:	|         move.l 8(sp),40(a0)
    moveMe->walkToY = y;
    ab3a:	|         movea.l (sp),a0
    ab3c:	|         move.l 12(sp),44(a0)

    // Let's pretend the start and end points are both in the same
    // polygon (which one isn't important)
    moveMe->inPoly = 0;
    ab42:	|         movea.l (sp),a0
    ab44:	|         clr.l 56(a0)
    moveMe->walkToPoly = 0;
    ab48:	|         movea.l (sp),a0
    ab4a:	|         clr.l 60(a0)

    doBorderStuff(moveMe);
    ab4e:	|         move.l (sp),-(sp)
    ab50:	|         jsr 9dd0 <doBorderStuff>
    ab56:	|         addq.l #4,sp
    if (walkMe(moveMe, TRUE) || moveMe->spinning) {
    ab58:	|         pea 1 <_start+0x1>
    ab5c:	|         move.l 4(sp),-(sp)
    ab60:	|         jsr c416 <walkMe>
    ab66:	|         addq.l #8,sp
    ab68:	|         tst.w d0
    ab6a:	|     ,-- bne.s ab74 <forceWalkingPerson+0x98>
    ab6c:	|     |   movea.l (sp),a0
    ab6e:	|     |   move.w 66(a0),d0
    ab72:	|  ,--|-- beq.s ab80 <forceWalkingPerson+0xa4>
        moveMe->continueAfterWalking = func;
    ab74:	|  |  '-> movea.l (sp),a0
    ab76:	|  |      move.l 20(sp),68(a0)
        return TRUE;
    ab7c:	|  |      moveq #1,d0
    ab7e:	+--|----- bra.s ab82 <forceWalkingPerson+0xa6>
    } else {
        return FALSE;
    ab80:	|  '----> clr.w d0
    }
}
    ab82:	'-------> addq.l #4,sp
    ab84:	          rts

0000ab86 <handleClosestPoint>:

BOOL handleClosestPoint (int * setX, int * setY, int * setPoly) {
    ab86:	                lea -56(sp),sp
    ab8a:	                move.l d2,-(sp)
	KPrintF("handleClosestPoint started\n");
    ab8c:	                pea 19783 <PutChar+0x1539>
    ab92:	                jsr 177a8 <KPrintF>
    ab98:	                addq.l #4,sp
	int gotX = 320, gotY = 200, gotPoly = -1, i, j, xTest1, yTest1,
    ab9a:	                move.l #320,56(sp)
    aba2:	                move.l #200,52(sp)
    abaa:	                moveq #-1,d0
    abac:	                move.l d0,48(sp)
		xTest2, yTest2, closestX, closestY, oldJ, currentDistance = 0xFFFFF,
    abb0:	                move.l #1048575,32(sp)
		thisDistance;

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
    abb8:	                clr.l 44(sp)
    abbc:	   ,----------- bra.w ad94 <handleClosestPoint+0x20e>
		oldJ = currentFloor -> polygon[i].numVertices - 1;
    abc0:	,--|----------> movea.l 1d0ce <currentFloor>,a0
    abc6:	|  |            move.l 12(a0),d1
    abca:	|  |            move.l 44(sp),d0
    abce:	|  |            lsl.l #3,d0
    abd0:	|  |            movea.l d1,a0
    abd2:	|  |            adda.l d0,a0
    abd4:	|  |            move.l (a0),d0
    abd6:	|  |            move.l d0,d1
    abd8:	|  |            subq.l #1,d1
    abda:	|  |            move.l d1,36(sp)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
    abde:	|  |            clr.l 40(sp)
    abe2:	|  |     ,----- bra.w ad72 <handleClosestPoint+0x1ec>
			xTest1 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[j]].x;
    abe6:	|  |  ,--|----> movea.l 1d0ce <currentFloor>,a0
    abec:	|  |  |  |      move.l 4(a0),d1
    abf0:	|  |  |  |      movea.l 1d0ce <currentFloor>,a0
    abf6:	|  |  |  |      movea.l 12(a0),a0
    abfa:	|  |  |  |      move.l 44(sp),d0
    abfe:	|  |  |  |      lsl.l #3,d0
    ac00:	|  |  |  |      adda.l d0,a0
    ac02:	|  |  |  |      movea.l 4(a0),a0
    ac06:	|  |  |  |      move.l 40(sp),d0
    ac0a:	|  |  |  |      add.l d0,d0
    ac0c:	|  |  |  |      add.l d0,d0
    ac0e:	|  |  |  |      adda.l d0,a0
    ac10:	|  |  |  |      move.l (a0),d0
    ac12:	|  |  |  |      lsl.l #3,d0
    ac14:	|  |  |  |      movea.l d1,a0
    ac16:	|  |  |  |      adda.l d0,a0
    ac18:	|  |  |  |      move.l (a0),28(sp)
			yTest1 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[j]].y;
    ac1c:	|  |  |  |      movea.l 1d0ce <currentFloor>,a0
    ac22:	|  |  |  |      move.l 4(a0),d1
    ac26:	|  |  |  |      movea.l 1d0ce <currentFloor>,a0
    ac2c:	|  |  |  |      movea.l 12(a0),a0
    ac30:	|  |  |  |      move.l 44(sp),d0
    ac34:	|  |  |  |      lsl.l #3,d0
    ac36:	|  |  |  |      adda.l d0,a0
    ac38:	|  |  |  |      movea.l 4(a0),a0
    ac3c:	|  |  |  |      move.l 40(sp),d0
    ac40:	|  |  |  |      add.l d0,d0
    ac42:	|  |  |  |      add.l d0,d0
    ac44:	|  |  |  |      adda.l d0,a0
    ac46:	|  |  |  |      move.l (a0),d0
    ac48:	|  |  |  |      lsl.l #3,d0
    ac4a:	|  |  |  |      movea.l d1,a0
    ac4c:	|  |  |  |      adda.l d0,a0
    ac4e:	|  |  |  |      move.l 4(a0),24(sp)
			xTest2 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[oldJ]].x;
    ac54:	|  |  |  |      movea.l 1d0ce <currentFloor>,a0
    ac5a:	|  |  |  |      move.l 4(a0),d1
    ac5e:	|  |  |  |      movea.l 1d0ce <currentFloor>,a0
    ac64:	|  |  |  |      movea.l 12(a0),a0
    ac68:	|  |  |  |      move.l 44(sp),d0
    ac6c:	|  |  |  |      lsl.l #3,d0
    ac6e:	|  |  |  |      adda.l d0,a0
    ac70:	|  |  |  |      movea.l 4(a0),a0
    ac74:	|  |  |  |      move.l 36(sp),d0
    ac78:	|  |  |  |      add.l d0,d0
    ac7a:	|  |  |  |      add.l d0,d0
    ac7c:	|  |  |  |      adda.l d0,a0
    ac7e:	|  |  |  |      move.l (a0),d0
    ac80:	|  |  |  |      lsl.l #3,d0
    ac82:	|  |  |  |      movea.l d1,a0
    ac84:	|  |  |  |      adda.l d0,a0
    ac86:	|  |  |  |      move.l (a0),20(sp)
			yTest2 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[oldJ]].y;
    ac8a:	|  |  |  |      movea.l 1d0ce <currentFloor>,a0
    ac90:	|  |  |  |      move.l 4(a0),d1
    ac94:	|  |  |  |      movea.l 1d0ce <currentFloor>,a0
    ac9a:	|  |  |  |      movea.l 12(a0),a0
    ac9e:	|  |  |  |      move.l 44(sp),d0
    aca2:	|  |  |  |      lsl.l #3,d0
    aca4:	|  |  |  |      adda.l d0,a0
    aca6:	|  |  |  |      movea.l 4(a0),a0
    acaa:	|  |  |  |      move.l 36(sp),d0
    acae:	|  |  |  |      add.l d0,d0
    acb0:	|  |  |  |      add.l d0,d0
    acb2:	|  |  |  |      adda.l d0,a0
    acb4:	|  |  |  |      move.l (a0),d0
    acb6:	|  |  |  |      lsl.l #3,d0
    acb8:	|  |  |  |      movea.l d1,a0
    acba:	|  |  |  |      adda.l d0,a0
    acbc:	|  |  |  |      move.l 4(a0),16(sp)
			closestPointOnLine (&closestX, &closestY, xTest1, yTest1, xTest2, yTest2, *setX, *setY);
    acc2:	|  |  |  |      movea.l 68(sp),a0
    acc6:	|  |  |  |      move.l (a0),d1
    acc8:	|  |  |  |      movea.l 64(sp),a0
    accc:	|  |  |  |      move.l (a0),d0
    acce:	|  |  |  |      move.l d1,-(sp)
    acd0:	|  |  |  |      move.l d0,-(sp)
    acd2:	|  |  |  |      move.l 24(sp),-(sp)
    acd6:	|  |  |  |      move.l 32(sp),-(sp)
    acda:	|  |  |  |      move.l 40(sp),-(sp)
    acde:	|  |  |  |      move.l 48(sp),-(sp)
    ace2:	|  |  |  |      lea 28(sp),a0
    ace6:	|  |  |  |      move.l a0,-(sp)
    ace8:	|  |  |  |      lea 36(sp),a0
    acec:	|  |  |  |      move.l a0,-(sp)
    acee:	|  |  |  |      jsr 165a6 <closestPointOnLine>
    acf4:	|  |  |  |      lea 32(sp),sp

			xTest1 = *setX - closestX;
    acf8:	|  |  |  |      movea.l 64(sp),a0
    acfc:	|  |  |  |      move.l (a0),d0
    acfe:	|  |  |  |      move.l 8(sp),d1
    ad02:	|  |  |  |      move.l d0,d2
    ad04:	|  |  |  |      sub.l d1,d2
    ad06:	|  |  |  |      move.l d2,28(sp)
			yTest1 = *setY - closestY;
    ad0a:	|  |  |  |      movea.l 68(sp),a0
    ad0e:	|  |  |  |      move.l (a0),d0
    ad10:	|  |  |  |      move.l 4(sp),d1
    ad14:	|  |  |  |      move.l d0,d2
    ad16:	|  |  |  |      sub.l d1,d2
    ad18:	|  |  |  |      move.l d2,24(sp)
			thisDistance = xTest1 * xTest1 + yTest1 * yTest1;
    ad1c:	|  |  |  |      move.l 28(sp),-(sp)
    ad20:	|  |  |  |      move.l 32(sp),-(sp)
    ad24:	|  |  |  |      jsr 18134 <__mulsi3>
    ad2a:	|  |  |  |      addq.l #8,sp
    ad2c:	|  |  |  |      move.l d0,d2
    ad2e:	|  |  |  |      move.l 24(sp),-(sp)
    ad32:	|  |  |  |      move.l 28(sp),-(sp)
    ad36:	|  |  |  |      jsr 18134 <__mulsi3>
    ad3c:	|  |  |  |      addq.l #8,sp
    ad3e:	|  |  |  |      move.l d2,d1
    ad40:	|  |  |  |      add.l d0,d1
    ad42:	|  |  |  |      move.l d1,12(sp)


			if (thisDistance < currentDistance) {
    ad46:	|  |  |  |      move.l 12(sp),d2
    ad4a:	|  |  |  |      cmp.l 32(sp),d2
    ad4e:	|  |  |  |  ,-- bge.s ad68 <handleClosestPoint+0x1e2>

				currentDistance = thisDistance;
    ad50:	|  |  |  |  |   move.l 12(sp),32(sp)
				gotX = closestX;
    ad56:	|  |  |  |  |   move.l 8(sp),56(sp)
				gotY = closestY;
    ad5c:	|  |  |  |  |   move.l 4(sp),52(sp)
				gotPoly = i;
    ad62:	|  |  |  |  |   move.l 44(sp),48(sp)
			}
			oldJ = j;
    ad68:	|  |  |  |  '-> move.l 40(sp),36(sp)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
    ad6e:	|  |  |  |      addq.l #1,40(sp)
    ad72:	|  |  |  '----> movea.l 1d0ce <currentFloor>,a0
    ad78:	|  |  |         move.l 12(a0),d1
    ad7c:	|  |  |         move.l 44(sp),d0
    ad80:	|  |  |         lsl.l #3,d0
    ad82:	|  |  |         movea.l d1,a0
    ad84:	|  |  |         adda.l d0,a0
    ad86:	|  |  |         move.l (a0),d0
    ad88:	|  |  |         cmp.l 40(sp),d0
    ad8c:	|  |  '-------- bgt.w abe6 <handleClosestPoint+0x60>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
    ad90:	|  |            addq.l #1,44(sp)
    ad94:	|  '----------> movea.l 1d0ce <currentFloor>,a0
    ad9a:	|               move.l 8(a0),d0
    ad9e:	|               cmp.l 44(sp),d0
    ada2:	'-------------- bgt.w abc0 <handleClosestPoint+0x3a>
		}
	}

	if (gotPoly == -1) return FALSE;
    ada6:	                moveq #-1,d0
    ada8:	                cmp.l 48(sp),d0
    adac:	            ,-- bne.s adb2 <handleClosestPoint+0x22c>
    adae:	            |   clr.w d0
    adb0:	         ,--|-- bra.s adcc <handleClosestPoint+0x246>
	*setX = gotX;
    adb2:	         |  '-> movea.l 64(sp),a0
    adb6:	         |      move.l 56(sp),(a0)
	*setY = gotY;
    adba:	         |      movea.l 68(sp),a0
    adbe:	         |      move.l 52(sp),(a0)
	*setPoly = gotPoly;
    adc2:	         |      movea.l 72(sp),a0
    adc6:	         |      move.l 48(sp),(a0)

	return TRUE;
    adca:	         |      moveq #1,d0
}
    adcc:	         '----> move.l (sp)+,d2
    adce:	                lea 56(sp),sp
    add2:	                rts

0000add4 <initPeople>:


BOOL initPeople () {
	personRegion.sX = 0;
    add4:	clr.l 1d02a <personRegion+0x10>
	personRegion.sY = 0;
    adda:	clr.l 1d02e <personRegion+0x14>
	personRegion.di = -1;
    ade0:	moveq #-1,d0
    ade2:	move.l d0,1d032 <personRegion+0x18>
	allScreenRegions = NULL;
    ade8:	clr.l 1d0c2 <allScreenRegions>

	return TRUE;
    adee:	moveq #1,d0
}
    adf0:	rts

0000adf2 <jumpPerson>:

void jumpPerson (int x, int y, int objNum) {
    adf2:	          subq.l #4,sp
    adf4:	          move.l d2,-(sp)
    if (x == 0 && y == 0) return;
    adf6:	          tst.l 12(sp)
    adfa:	      ,-- bne.s ae02 <jumpPerson+0x10>
    adfc:	      |   tst.l 16(sp)
    ae00:	,-----|-- beq.s ae76 <jumpPerson+0x84>
    struct onScreenPerson * moveMe = findPerson(objNum);
    ae02:	|     '-> move.l 20(sp),-(sp)
    ae06:	|         jsr aa6e <findPerson>
    ae0c:	|         addq.l #4,sp
    ae0e:	|         move.l d0,4(sp)
    if (!moveMe) return;
    ae12:	|  ,----- beq.s ae7a <jumpPerson+0x88>
    if (moveMe->continueAfterWalking) abortFunction(moveMe->continueAfterWalking);
    ae14:	|  |      movea.l 4(sp),a0
    ae18:	|  |      move.l 68(a0),d0
    ae1c:	|  |  ,-- beq.s ae30 <jumpPerson+0x3e>
    ae1e:	|  |  |   movea.l 4(sp),a0
    ae22:	|  |  |   move.l 68(a0),d0
    ae26:	|  |  |   move.l d0,-(sp)
    ae28:	|  |  |   jsr 5374 <abortFunction>
    ae2e:	|  |  |   addq.l #4,sp
    moveMe->continueAfterWalking = NULL;
    ae30:	|  |  '-> movea.l 4(sp),a0
    ae34:	|  |      clr.l 68(a0)
    moveMe->walking = FALSE;
    ae38:	|  |      movea.l 4(sp),a0
    ae3c:	|  |      clr.w 64(a0)
    moveMe->spinning = FALSE;
    ae40:	|  |      movea.l 4(sp),a0
    ae44:	|  |      clr.w 66(a0)
    moveAndScale(moveMe, x, y);
    ae48:	|  |      move.l 16(sp),-(sp)
    ae4c:	|  |      jsr 17bda <__floatsisf>
    ae52:	|  |      addq.l #4,sp
    ae54:	|  |      move.l d0,d2
    ae56:	|  |      move.l 12(sp),-(sp)
    ae5a:	|  |      jsr 17bda <__floatsisf>
    ae60:	|  |      addq.l #4,sp
    ae62:	|  |      move.l d2,-(sp)
    ae64:	|  |      move.l d0,-(sp)
    ae66:	|  |      move.l 12(sp),-(sp)
    ae6a:	|  |      jsr b218 <moveAndScale>
    ae70:	|  |      lea 12(sp),sp
    ae74:	|  |  ,-- bra.s ae7c <jumpPerson+0x8a>
    if (x == 0 && y == 0) return;
    ae76:	'--|--|-> nop
    ae78:	   |  +-- bra.s ae7c <jumpPerson+0x8a>
    if (!moveMe) return;
    ae7a:	   '--|-> nop
}
    ae7c:	      '-> move.l (sp)+,d2
    ae7e:	          addq.l #4,sp
    ae80:	          rts

0000ae82 <killAllPeople>:


void killAllPeople () {
    ae82:	          subq.l #8,sp
    ae84:	          move.l a6,-(sp)
	struct onScreenPerson * killPeople;
	while (allPeople) {
    ae86:	   ,----- bra.s aef2 <killAllPeople+0x70>
		if (allPeople -> continueAfterWalking) abortFunction (allPeople -> continueAfterWalking);
    ae88:	,--|----> movea.l 1d016 <allPeople>,a0
    ae8e:	|  |      move.l 68(a0),d0
    ae92:	|  |  ,-- beq.s aea8 <killAllPeople+0x26>
    ae94:	|  |  |   movea.l 1d016 <allPeople>,a0
    ae9a:	|  |  |   move.l 68(a0),d0
    ae9e:	|  |  |   move.l d0,-(sp)
    aea0:	|  |  |   jsr 5374 <abortFunction>
    aea6:	|  |  |   addq.l #4,sp
		allPeople -> continueAfterWalking = NULL;
    aea8:	|  |  '-> movea.l 1d016 <allPeople>,a0
    aeae:	|  |      clr.l 68(a0)
		killPeople = allPeople;
    aeb2:	|  |      move.l 1d016 <allPeople>,8(sp)
		allPeople = allPeople -> next;
    aeba:	|  |      movea.l 1d016 <allPeople>,a0
    aec0:	|  |      move.l 36(a0),d0
    aec4:	|  |      move.l d0,1d016 <allPeople>
		removeObjectType (killPeople -> thisType);
    aeca:	|  |      movea.l 8(sp),a0
    aece:	|  |      move.l 114(a0),d0
    aed2:	|  |      move.l d0,-(sp)
    aed4:	|  |      jsr dd84 <removeObjectType>
    aeda:	|  |      addq.l #4,sp
		FreeVec(killPeople);
    aedc:	|  |      move.l 8(sp),4(sp)
    aee2:	|  |      move.l 1cfb6 <SysBase>,d0
    aee8:	|  |      movea.l d0,a6
    aeea:	|  |      movea.l 4(sp),a1
    aeee:	|  |      jsr -690(a6)
	while (allPeople) {
    aef2:	|  '----> move.l 1d016 <allPeople>,d0
    aef8:	'-------- bne.s ae88 <killAllPeople+0x6>
	}
}
    aefa:	          nop
    aefc:	          nop
    aefe:	          movea.l (sp)+,a6
    af00:	          addq.l #8,sp
    af02:	          rts

0000af04 <killMostPeople>:

void killMostPeople() {
    af04:	          lea -12(sp),sp
    af08:	          move.l a6,-(sp)
    struct onScreenPerson *killPeople;
    struct onScreenPerson **lookyHere = &allPeople;
    af0a:	          move.l #118806,12(sp)

    while (*lookyHere) {
    af12:	   ,----- bra.w af98 <killMostPeople+0x94>
        if ((*lookyHere)->extra & EXTRA_NOREMOVE) {
    af16:	,--|----> movea.l 12(sp),a0
    af1a:	|  |      movea.l (a0),a0
    af1c:	|  |      move.l 118(a0),d0
    af20:	|  |      moveq #32,d1
    af22:	|  |      and.l d1,d0
    af24:	|  |  ,-- beq.s af36 <killMostPeople+0x32>
            lookyHere = &(*lookyHere)->next;
    af26:	|  |  |   movea.l 12(sp),a0
    af2a:	|  |  |   move.l (a0),d0
    af2c:	|  |  |   moveq #36,d1
    af2e:	|  |  |   add.l d0,d1
    af30:	|  |  |   move.l d1,12(sp)
    af34:	|  +--|-- bra.s af98 <killMostPeople+0x94>
        } else {
            killPeople = (*lookyHere);
    af36:	|  |  '-> movea.l 12(sp),a0
    af3a:	|  |      move.l (a0),8(sp)

            // Change last pointer to NEXT in the list instead
            (*lookyHere) = killPeople->next;
    af3e:	|  |      movea.l 8(sp),a0
    af42:	|  |      move.l 36(a0),d0
    af46:	|  |      movea.l 12(sp),a0
    af4a:	|  |      move.l d0,(a0)

            // Gone from the list... now free some memory
            if (killPeople->continueAfterWalking) abortFunction(killPeople->continueAfterWalking);
    af4c:	|  |      movea.l 8(sp),a0
    af50:	|  |      move.l 68(a0),d0
    af54:	|  |  ,-- beq.s af68 <killMostPeople+0x64>
    af56:	|  |  |   movea.l 8(sp),a0
    af5a:	|  |  |   move.l 68(a0),d0
    af5e:	|  |  |   move.l d0,-(sp)
    af60:	|  |  |   jsr 5374 <abortFunction>
    af66:	|  |  |   addq.l #4,sp
            killPeople->continueAfterWalking = NULL;
    af68:	|  |  '-> movea.l 8(sp),a0
    af6c:	|  |      clr.l 68(a0)
            removeObjectType(killPeople->thisType);
    af70:	|  |      movea.l 8(sp),a0
    af74:	|  |      move.l 114(a0),d0
    af78:	|  |      move.l d0,-(sp)
    af7a:	|  |      jsr dd84 <removeObjectType>
    af80:	|  |      addq.l #4,sp
            FreeVec(killPeople);
    af82:	|  |      move.l 8(sp),4(sp)
    af88:	|  |      move.l 1cfb6 <SysBase>,d0
    af8e:	|  |      movea.l d0,a6
    af90:	|  |      movea.l 4(sp),a1
    af94:	|  |      jsr -690(a6)
    while (*lookyHere) {
    af98:	|  '----> movea.l 12(sp),a0
    af9c:	|         move.l (a0),d0
    af9e:	'-------- bne.w af16 <killMostPeople+0x12>
        }
    }
}
    afa2:	          nop
    afa4:	          nop
    afa6:	          movea.l (sp)+,a6
    afa8:	          lea 12(sp),sp
    afac:	          rts

0000afae <makeSilent>:
//	db ("End of loadPeople");
	return TRUE;
}

void makeSilent (struct onScreenPerson me) {
	setFrames (&me, ANI_STAND);
    afae:	clr.l -(sp)
    afb0:	move.l sp,d0
    afb2:	addq.l #8,d0
    afb4:	move.l d0,-(sp)
    afb6:	jsr 4516 <setFrames>
    afbc:	addq.l #8,sp
}
    afbe:	nop
    afc0:	rts

0000afc2 <makeWalkingPerson>:

BOOL makeWalkingPerson (int x, int y, int objNum, struct loadedFunction * func, int di) {
    afc2:	          lea -12(sp),sp
    afc6:	          move.l d2,-(sp)
	KPrintF("makeWalkingPerson started\n");
    afc8:	          pea 19807 <PutChar+0x15bd>
    afce:	          jsr 177a8 <KPrintF>
    afd4:	          addq.l #4,sp
	if (x == 0 && y == 0) return FALSE;
    afd6:	          tst.l 20(sp)
    afda:	      ,-- bne.s afe8 <makeWalkingPerson+0x26>
    afdc:	      |   tst.l 24(sp)
    afe0:	      +-- bne.s afe8 <makeWalkingPerson+0x26>
    afe2:	      |   clr.w d0
    afe4:	,-----|-- bra.w b1aa <makeWalkingPerson+0x1e8>
	if (currentFloor -> numPolygons == 0) return FALSE;
    afe8:	|     '-> movea.l 1d0ce <currentFloor>,a0
    afee:	|         move.l 8(a0),d0
    aff2:	|     ,-- bne.s affa <makeWalkingPerson+0x38>
    aff4:	|     |   clr.w d0
    aff6:	+-----|-- bra.w b1aa <makeWalkingPerson+0x1e8>
	struct onScreenPerson * moveMe = findPerson (objNum);
    affa:	|     '-> move.l 28(sp),d0
    affe:	|         move.l d0,-(sp)
    b000:	|         jsr aa6e <findPerson>
    b006:	|         addq.l #4,sp
    b008:	|         move.l d0,12(sp)

	
	if (! moveMe) {
    b00c:	|     ,-- bne.s b028 <makeWalkingPerson+0x66>
		KPrintF("makeWalkingPerson: Can't find person %d\n", objNum);
    b00e:	|     |   move.l 28(sp),d0
    b012:	|     |   move.l d0,-(sp)
    b014:	|     |   pea 19822 <PutChar+0x15d8>
    b01a:	|     |   jsr 177a8 <KPrintF>
    b020:	|     |   addq.l #8,sp
		return FALSE;
    b022:	|     |   clr.w d0
    b024:	+-----|-- bra.w b1aa <makeWalkingPerson+0x1e8>
	} 


	if (moveMe -> continueAfterWalking) {
    b028:	|     '-> movea.l 12(sp),a0
    b02c:	|         move.l 68(a0),d0
    b030:	|     ,-- beq.s b044 <makeWalkingPerson+0x82>
		abortFunction (moveMe -> continueAfterWalking);
    b032:	|     |   movea.l 12(sp),a0
    b036:	|     |   move.l 68(a0),d0
    b03a:	|     |   move.l d0,-(sp)
    b03c:	|     |   jsr 5374 <abortFunction>
    b042:	|     |   addq.l #4,sp
	}	
	moveMe -> continueAfterWalking = NULL;
    b044:	|     '-> movea.l 12(sp),a0
    b048:	|         clr.l 68(a0)
	moveMe -> walking = TRUE;
    b04c:	|         movea.l 12(sp),a0
    b050:	|         move.w #1,64(a0)
	moveMe -> directionWhenDoneWalking = di;
    b056:	|         movea.l 12(sp),a0
    b05a:	|         move.l 36(sp),110(a0)

	moveMe -> walkToX = x;
    b060:	|         movea.l 12(sp),a0
    b064:	|         move.l 20(sp),40(a0)
	moveMe -> walkToY = y;
    b06a:	|         movea.l 12(sp),a0
    b06e:	|         move.l 24(sp),44(a0)
	moveMe -> walkToPoly = inFloor (x, y);
    b074:	|         move.l 24(sp),-(sp)
    b078:	|         move.l 24(sp),-(sp)
    b07c:	|         jsr 16aee <inFloor>
    b082:	|         addq.l #8,sp
    b084:	|         movea.l 12(sp),a0
    b088:	|         move.l d0,60(a0)
	if (moveMe -> walkToPoly == -1) {
    b08c:	|         movea.l 12(sp),a0
    b090:	|         move.l 60(a0),d0
    b094:	|         moveq #-1,d1
    b096:	|         cmp.l d0,d1
    b098:	|     ,-- bne.s b0c8 <makeWalkingPerson+0x106>
		if (! handleClosestPoint (&moveMe -> walkToX, &moveMe -> walkToY, &moveMe -> walkToPoly)) return FALSE;
    b09a:	|     |   movea.w #60,a0
    b09e:	|     |   adda.l 12(sp),a0
    b0a2:	|     |   moveq #44,d1
    b0a4:	|     |   add.l 12(sp),d1
    b0a8:	|     |   moveq #40,d0
    b0aa:	|     |   add.l 12(sp),d0
    b0ae:	|     |   move.l a0,-(sp)
    b0b0:	|     |   move.l d1,-(sp)
    b0b2:	|     |   move.l d0,-(sp)
    b0b4:	|     |   jsr ab86 <handleClosestPoint>
    b0ba:	|     |   lea 12(sp),sp
    b0be:	|     |   tst.w d0
    b0c0:	|     +-- bne.s b0c8 <makeWalkingPerson+0x106>
    b0c2:	|     |   clr.w d0
    b0c4:	+-----|-- bra.w b1aa <makeWalkingPerson+0x1e8>
	}

	moveMe -> inPoly = inFloor (moveMe -> x, moveMe -> y);
    b0c8:	|     '-> movea.l 12(sp),a0
    b0cc:	|         move.l 4(a0),d0
    b0d0:	|         move.l d0,-(sp)
    b0d2:	|         jsr 17b72 <__fixsfsi>
    b0d8:	|         addq.l #4,sp
    b0da:	|         move.l d0,d2
    b0dc:	|         movea.l 12(sp),a0
    b0e0:	|         move.l (a0),d0
    b0e2:	|         move.l d0,-(sp)
    b0e4:	|         jsr 17b72 <__fixsfsi>
    b0ea:	|         addq.l #4,sp
    b0ec:	|         move.l d2,-(sp)
    b0ee:	|         move.l d0,-(sp)
    b0f0:	|         jsr 16aee <inFloor>
    b0f6:	|         addq.l #8,sp
    b0f8:	|         movea.l 12(sp),a0
    b0fc:	|         move.l d0,56(a0)
	if (moveMe -> inPoly == -1) {
    b100:	|         movea.l 12(sp),a0
    b104:	|         move.l 56(a0),d0
    b108:	|         moveq #-1,d1
    b10a:	|         cmp.l d0,d1
    b10c:	|     ,-- bne.s b15e <makeWalkingPerson+0x19c>
		int xxx = moveMe -> x, yyy = moveMe -> y;
    b10e:	|     |   movea.l 12(sp),a0
    b112:	|     |   move.l (a0),d0
    b114:	|     |   move.l d0,-(sp)
    b116:	|     |   jsr 17b72 <__fixsfsi>
    b11c:	|     |   addq.l #4,sp
    b11e:	|     |   move.l d0,8(sp)
    b122:	|     |   movea.l 12(sp),a0
    b126:	|     |   move.l 4(a0),d0
    b12a:	|     |   move.l d0,-(sp)
    b12c:	|     |   jsr 17b72 <__fixsfsi>
    b132:	|     |   addq.l #4,sp
    b134:	|     |   move.l d0,4(sp)
		if (! handleClosestPoint (&xxx, &yyy, &moveMe -> inPoly)) return FALSE;
    b138:	|     |   moveq #56,d0
    b13a:	|     |   add.l 12(sp),d0
    b13e:	|     |   move.l d0,-(sp)
    b140:	|     |   lea 8(sp),a0
    b144:	|     |   move.l a0,-(sp)
    b146:	|     |   moveq #16,d0
    b148:	|     |   add.l sp,d0
    b14a:	|     |   move.l d0,-(sp)
    b14c:	|     |   jsr ab86 <handleClosestPoint>
    b152:	|     |   lea 12(sp),sp
    b156:	|     |   tst.w d0
    b158:	|     +-- bne.s b15e <makeWalkingPerson+0x19c>
    b15a:	|     |   clr.w d0
    b15c:	+-----|-- bra.s b1aa <makeWalkingPerson+0x1e8>
	}

	doBorderStuff (moveMe);
    b15e:	|     '-> move.l 12(sp),-(sp)
    b162:	|         jsr 9dd0 <doBorderStuff>
    b168:	|         addq.l #4,sp
	if (walkMe (moveMe, FALSE) || moveMe -> spinning) {
    b16a:	|         clr.l -(sp)
    b16c:	|         move.l 16(sp),-(sp)
    b170:	|         jsr c416 <walkMe>
    b176:	|         addq.l #8,sp
    b178:	|         tst.w d0
    b17a:	|     ,-- bne.s b186 <makeWalkingPerson+0x1c4>
    b17c:	|     |   movea.l 12(sp),a0
    b180:	|     |   move.w 66(a0),d0
    b184:	|  ,--|-- beq.s b1a8 <makeWalkingPerson+0x1e6>
		KPrintF("makeWalkingPerson: continueAfterWalking set to %d\n", &objNum);
    b186:	|  |  '-> lea 28(sp),a0
    b18a:	|  |      move.l a0,-(sp)
    b18c:	|  |      pea 1984b <PutChar+0x1601>
    b192:	|  |      jsr 177a8 <KPrintF>
    b198:	|  |      addq.l #8,sp
		moveMe -> continueAfterWalking = func;
    b19a:	|  |      movea.l 12(sp),a0
    b19e:	|  |      move.l 32(sp),68(a0)
		return TRUE;
    b1a4:	|  |      moveq #1,d0
    b1a6:	+--|----- bra.s b1aa <makeWalkingPerson+0x1e8>
	} else {
		return FALSE;
    b1a8:	|  '----> clr.w d0
	}
}
    b1aa:	'-------> move.l (sp)+,d2
    b1ac:	          lea 12(sp),sp
    b1b0:	          rts

0000b1b2 <makeNullAnim>:


struct personaAnimation * makeNullAnim () {
    b1b2:	       lea -16(sp),sp
    b1b6:	       move.l a6,-(sp)

	struct personaAnimation * newAnim	= AllocVec(sizeof(struct personaAnimation),MEMF_ANY);
    b1b8:	       moveq #12,d0
    b1ba:	       move.l d0,16(sp)
    b1be:	       clr.l 12(sp)
    b1c2:	       move.l 1cfb6 <SysBase>,d0
    b1c8:	       movea.l d0,a6
    b1ca:	       move.l 16(sp),d0
    b1ce:	       move.l 12(sp),d1
    b1d2:	       jsr -684(a6)
    b1d6:	       move.l d0,8(sp)
    b1da:	       move.l 8(sp),d0
    b1de:	       move.l d0,4(sp)
    if(newAnim == 0) {
    b1e2:	   ,-- bne.s b1f6 <makeNullAnim+0x44>
     	KPrintF("makeNullAnim: Can't reserve Memory\n");
    b1e4:	   |   pea 1987e <PutChar+0x1634>
    b1ea:	   |   jsr 177a8 <KPrintF>
    b1f0:	   |   addq.l #4,sp
        return NULL;    
    b1f2:	   |   moveq #0,d0
    b1f4:	,--|-- bra.s b210 <makeNullAnim+0x5e>
    }  

	newAnim -> theSprites		= NULL;
    b1f6:	|  '-> movea.l 4(sp),a0
    b1fa:	|      clr.l (a0)
	newAnim -> numFrames		= 0;
    b1fc:	|      movea.l 4(sp),a0
    b200:	|      clr.l 8(a0)
	newAnim -> frames			= NULL;
    b204:	|      movea.l 4(sp),a0
    b208:	|      clr.l 4(a0)
	return newAnim;
    b20c:	|      move.l 4(sp),d0
}
    b210:	'----> movea.l (sp)+,a6
    b212:	       lea 16(sp),sp
    b216:	       rts

0000b218 <moveAndScale>:

void moveAndScale (struct onScreenPerson *me, FLOAT x, FLOAT y) {
    b218:	    move.l d2,-(sp)
	me->x = x;
    b21a:	    movea.l 8(sp),a0
    b21e:	    move.l 12(sp),(a0)
	me->y = y;
    b222:	    movea.l 8(sp),a0
    b226:	    move.l 16(sp),4(a0)
	me->oldx = 0;
    b22c:	    movea.l 8(sp),a0
    b230:	    clr.l 8(a0)
	me->oldy = 0;
    b234:	    movea.l 8(sp),a0
    b238:	    clr.l 12(a0)
	if (! (me->extra & EXTRA_NOSCALE) && scaleDivide) me->scale = (me->y - scaleHorizon) / scaleDivide;
    b23c:	    movea.l 8(sp),a0
    b240:	    move.l 118(a0),d0
    b244:	    moveq #2,d1
    b246:	    and.l d1,d0
    b248:	,-- bne.s b2a0 <moveAndScale+0x88>
    b24a:	|   move.w 1c93c <scaleDivide>,d0
    b250:	+-- beq.s b2a0 <moveAndScale+0x88>
    b252:	|   movea.l 8(sp),a0
    b256:	|   move.l 4(a0),d2
    b25a:	|   move.w 1c93a <scaleHorizon>,d0
    b260:	|   movea.w d0,a0
    b262:	|   move.l a0,-(sp)
    b264:	|   jsr 17bda <__floatsisf>
    b26a:	|   addq.l #4,sp
    b26c:	|   move.l d0,-(sp)
    b26e:	|   move.l d2,-(sp)
    b270:	|   jsr 17ece <__subsf3>
    b276:	|   addq.l #8,sp
    b278:	|   move.l d0,d2
    b27a:	|   move.w 1c93c <scaleDivide>,d0
    b280:	|   movea.w d0,a0
    b282:	|   move.l a0,-(sp)
    b284:	|   jsr 17bda <__floatsisf>
    b28a:	|   addq.l #4,sp
    b28c:	|   move.l d0,-(sp)
    b28e:	|   move.l d2,-(sp)
    b290:	|   jsr 17a90 <__divsf3>
    b296:	|   addq.l #8,sp
    b298:	|   movea.l 8(sp),a0
    b29c:	|   move.l d0,32(a0)
}
    b2a0:	'-> nop
    b2a2:	    move.l (sp)+,d2
    b2a4:	    rts

0000b2a6 <removeOneCharacter>:

void removeOneCharacter (int i) {
    b2a6:	          lea -16(sp),sp
    b2aa:	          move.l a6,-(sp)
    struct onScreenPerson * p = findPerson(i);	
    b2ac:	          move.l 24(sp),-(sp)
    b2b0:	          jsr aa6e <findPerson>
    b2b6:	          addq.l #4,sp
    b2b8:	          move.l d0,8(sp)

    if (p) {
    b2bc:	,-------- beq.w b39c <removeOneCharacter+0xf6>
		/*if( p->myAnim->numFrames == 0) {
			CstRestoreScreen(p->x, p->y, &p->myAnim->theSprites->bank.sprites[0].width, &p->myAnim->theSprites->bank.sprites[0].height );
		} ToDo: Remove this*/


        if (overRegion == &personRegion && overRegion->thisType == p->thisType) {
    b2c0:	|         move.l 1d0c6 <overRegion>,d0
    b2c6:	|         cmpi.l #118810,d0
    b2cc:	|     ,-- bne.s b2ea <removeOneCharacter+0x44>
    b2ce:	|     |   movea.l 1d0c6 <overRegion>,a0
    b2d4:	|     |   move.l 28(a0),d1
    b2d8:	|     |   movea.l 8(sp),a0
    b2dc:	|     |   move.l 114(a0),d0
    b2e0:	|     |   cmp.l d1,d0
    b2e2:	|     +-- bne.s b2ea <removeOneCharacter+0x44>
            overRegion = NULL;
    b2e4:	|     |   clr.l 1d0c6 <overRegion>
        }

        if (p->continueAfterWalking) abortFunction(p->continueAfterWalking);
    b2ea:	|     '-> movea.l 8(sp),a0
    b2ee:	|         move.l 68(a0),d0
    b2f2:	|     ,-- beq.s b306 <removeOneCharacter+0x60>
    b2f4:	|     |   movea.l 8(sp),a0
    b2f8:	|     |   move.l 68(a0),d0
    b2fc:	|     |   move.l d0,-(sp)
    b2fe:	|     |   jsr 5374 <abortFunction>
    b304:	|     |   addq.l #4,sp
        p->continueAfterWalking = NULL;
    b306:	|     '-> movea.l 8(sp),a0
    b30a:	|         clr.l 68(a0)
        struct onScreenPerson ** killPeople;

		for(int i=0; i<3;i++)
    b30e:	|         clr.l 12(sp)
    b312:	|     ,-- bra.s b33a <removeOneCharacter+0x94>
		{
			deleteAnim( p->myPersona->animation[i]);
    b314:	|  ,--|-> movea.l 8(sp),a0
    b318:	|  |  |   movea.l 80(a0),a0
    b31c:	|  |  |   move.l (a0),d1
    b31e:	|  |  |   move.l 12(sp),d0
    b322:	|  |  |   add.l d0,d0
    b324:	|  |  |   add.l d0,d0
    b326:	|  |  |   movea.l d1,a0
    b328:	|  |  |   adda.l d0,a0
    b32a:	|  |  |   move.l (a0),d0
    b32c:	|  |  |   move.l d0,-(sp)
    b32e:	|  |  |   jsr 9d4c <deleteAnim>
    b334:	|  |  |   addq.l #4,sp
		for(int i=0; i<3;i++)
    b336:	|  |  |   addq.l #1,12(sp)
    b33a:	|  |  '-> moveq #2,d0
    b33c:	|  |      cmp.l 12(sp),d0
    b340:	|  '----- bge.s b314 <removeOneCharacter+0x6e>
		}

        for (killPeople = &allPeople;
    b342:	|         move.l #118806,16(sp)
    b34a:	|     ,-- bra.s b35a <removeOneCharacter+0xb4>
            *killPeople != p;
            killPeople = &((*killPeople)->next)) {;}
    b34c:	|  ,--|-> movea.l 16(sp),a0
    b350:	|  |  |   move.l (a0),d0
    b352:	|  |  |   moveq #36,d1
    b354:	|  |  |   add.l d0,d1
    b356:	|  |  |   move.l d1,16(sp)
            *killPeople != p;
    b35a:	|  |  '-> movea.l 16(sp),a0
    b35e:	|  |      move.l (a0),d0
    b360:	|  |      cmp.l 8(sp),d0
    b364:	|  '----- bne.s b34c <removeOneCharacter+0xa6>

        *killPeople = p->next;
    b366:	|         movea.l 8(sp),a0
    b36a:	|         move.l 36(a0),d0
    b36e:	|         movea.l 16(sp),a0
    b372:	|         move.l d0,(a0)
        removeObjectType(p->thisType);
    b374:	|         movea.l 8(sp),a0
    b378:	|         move.l 114(a0),d0
    b37c:	|         move.l d0,-(sp)
    b37e:	|         jsr dd84 <removeObjectType>
    b384:	|         addq.l #4,sp
        FreeVec(p);
    b386:	|         move.l 8(sp),4(sp)
    b38c:	|         move.l 1cfb6 <SysBase>,d0
    b392:	|         movea.l d0,a6
    b394:	|         movea.l 4(sp),a1
    b398:	|         jsr -690(a6)
		
    }
}
    b39c:	'-------> nop
    b39e:	          movea.l (sp)+,a6
    b3a0:	          lea 16(sp),sp
    b3a4:	          rts

0000b3a6 <rethinkAngle>:

void rethinkAngle (struct onScreenPerson * thisPerson) {
    b3a6:	       subq.l #8,sp
    b3a8:	       move.l d2,-(sp)
	int d = thisPerson -> myPersona -> numDirections;
    b3aa:	       movea.l 16(sp),a0
    b3ae:	       movea.l 80(a0),a0
    b3b2:	       move.l 4(a0),4(sp)
	int direc = thisPerson -> angle + (180 / d) + 180 + thisPerson -> angleOffset;
    b3b8:	       movea.l 16(sp),a0
    b3bc:	       move.l 92(a0),d2
    b3c0:	       move.l 4(sp),-(sp)
    b3c4:	       pea b4 <_start+0xb4>
    b3c8:	       jsr 181b2 <__divsi3>
    b3ce:	       addq.l #8,sp
    b3d0:	       add.l d2,d0
    b3d2:	       move.l d0,d1
    b3d4:	       addi.l #180,d1
    b3da:	       movea.l 16(sp),a0
    b3de:	       move.l 100(a0),d0
    b3e2:	       move.l d1,d2
    b3e4:	       add.l d0,d2
    b3e6:	       move.l d2,8(sp)
	while (direc >= 360) direc -= 360;
    b3ea:	   ,-- bra.s b3f4 <rethinkAngle+0x4e>
    b3ec:	,--|-> addi.l #-360,8(sp)
    b3f4:	|  '-> cmpi.l #359,8(sp)
    b3fc:	'----- bgt.s b3ec <rethinkAngle+0x46>
	thisPerson -> direction = (direc * d) / 360;
    b3fe:	       move.l 4(sp),-(sp)
    b402:	       move.l 12(sp),-(sp)
    b406:	       jsr 18134 <__mulsi3>
    b40c:	       addq.l #8,sp
    b40e:	       pea 168 <decodeFilename+0x50>
    b412:	       move.l d0,-(sp)
    b414:	       jsr 181b2 <__divsi3>
    b41a:	       addq.l #8,sp
    b41c:	       movea.l 16(sp),a0
    b420:	       move.l d0,106(a0)
}
    b424:	       nop
    b426:	       move.l (sp)+,d2
    b428:	       addq.l #8,sp
    b42a:	       rts

0000b42c <saveAnim>:


BOOL saveAnim (struct personaAnimation * p, BPTR fp) {
    b42c:	          subq.l #4,sp
	put2bytes (p -> numFrames, fp);
    b42e:	          movea.l 8(sp),a0
    b432:	          move.l 8(a0),d0
    b436:	          move.l 12(sp),-(sp)
    b43a:	          move.l d0,-(sp)
    b43c:	          jsr 8d0 <put2bytes>
    b442:	          addq.l #8,sp
	if (p -> numFrames) {
    b444:	          movea.l 8(sp),a0
    b448:	          move.l 8(a0),d0
    b44c:	,-------- beq.w b4f0 <saveAnim+0xc4>
		put4bytes (p -> theSprites -> ID, fp);
    b450:	|         movea.l 8(sp),a0
    b454:	|         movea.l (a0),a0
    b456:	|         move.l (a0),d0
    b458:	|         move.l 12(sp),-(sp)
    b45c:	|         move.l d0,-(sp)
    b45e:	|         jsr 958 <put4bytes>
    b464:	|         addq.l #8,sp

		for (int a = 0; a < p -> numFrames; a ++) {
    b466:	|         clr.l (sp)
    b468:	|     ,-- bra.s b4e2 <saveAnim+0xb6>
			put4bytes (p -> frames[a].frameNum, fp);
    b46a:	|  ,--|-> movea.l 8(sp),a0
    b46e:	|  |  |   movea.l 4(a0),a0
    b472:	|  |  |   move.l (sp),d1
    b474:	|  |  |   move.l d1,d0
    b476:	|  |  |   add.l d0,d0
    b478:	|  |  |   add.l d1,d0
    b47a:	|  |  |   add.l d0,d0
    b47c:	|  |  |   add.l d0,d0
    b47e:	|  |  |   adda.l d0,a0
    b480:	|  |  |   move.l (a0),d0
    b482:	|  |  |   move.l 12(sp),-(sp)
    b486:	|  |  |   move.l d0,-(sp)
    b488:	|  |  |   jsr 958 <put4bytes>
    b48e:	|  |  |   addq.l #8,sp
			put4bytes (p -> frames[a].howMany, fp);
    b490:	|  |  |   movea.l 8(sp),a0
    b494:	|  |  |   movea.l 4(a0),a0
    b498:	|  |  |   move.l (sp),d1
    b49a:	|  |  |   move.l d1,d0
    b49c:	|  |  |   add.l d0,d0
    b49e:	|  |  |   add.l d1,d0
    b4a0:	|  |  |   add.l d0,d0
    b4a2:	|  |  |   add.l d0,d0
    b4a4:	|  |  |   adda.l d0,a0
    b4a6:	|  |  |   move.l 4(a0),d0
    b4aa:	|  |  |   move.l 12(sp),-(sp)
    b4ae:	|  |  |   move.l d0,-(sp)
    b4b0:	|  |  |   jsr 958 <put4bytes>
    b4b6:	|  |  |   addq.l #8,sp
			put4bytes (p -> frames[a].noise, fp);
    b4b8:	|  |  |   movea.l 8(sp),a0
    b4bc:	|  |  |   movea.l 4(a0),a0
    b4c0:	|  |  |   move.l (sp),d1
    b4c2:	|  |  |   move.l d1,d0
    b4c4:	|  |  |   add.l d0,d0
    b4c6:	|  |  |   add.l d1,d0
    b4c8:	|  |  |   add.l d0,d0
    b4ca:	|  |  |   add.l d0,d0
    b4cc:	|  |  |   adda.l d0,a0
    b4ce:	|  |  |   move.l 8(a0),d0
    b4d2:	|  |  |   move.l 12(sp),-(sp)
    b4d6:	|  |  |   move.l d0,-(sp)
    b4d8:	|  |  |   jsr 958 <put4bytes>
    b4de:	|  |  |   addq.l #8,sp
		for (int a = 0; a < p -> numFrames; a ++) {
    b4e0:	|  |  |   addq.l #1,(sp)
    b4e2:	|  |  '-> movea.l 8(sp),a0
    b4e6:	|  |      move.l 8(a0),d0
    b4ea:	|  |      cmp.l (sp),d0
    b4ec:	|  '----- bgt.w b46a <saveAnim+0x3e>
		}
	}
	return TRUE;
    b4f0:	'-------> moveq #1,d0
}
    b4f2:	          addq.l #4,sp
    b4f4:	          rts

0000b4f6 <saveCostume>:

BOOL saveCostume (struct persona * cossy, BPTR fp) {
    b4f6:	             subq.l #4,sp
	int a;
	put2bytes (cossy -> numDirections, fp);
    b4f8:	             movea.l 8(sp),a0
    b4fc:	             move.l 4(a0),d0
    b500:	             move.l 12(sp),-(sp)
    b504:	             move.l d0,-(sp)
    b506:	             jsr 8d0 <put2bytes>
    b50c:	             addq.l #8,sp
	for (a = 0; a < cossy -> numDirections * 3; a ++) {
    b50e:	             clr.l (sp)
    b510:	   ,-------- bra.s b53c <saveCostume+0x46>
		if (! saveAnim (cossy -> animation[a], fp)) return FALSE;
    b512:	,--|-------> movea.l 8(sp),a0
    b516:	|  |         move.l (a0),d1
    b518:	|  |         move.l (sp),d0
    b51a:	|  |         add.l d0,d0
    b51c:	|  |         add.l d0,d0
    b51e:	|  |         movea.l d1,a0
    b520:	|  |         adda.l d0,a0
    b522:	|  |         move.l (a0),d0
    b524:	|  |         move.l 12(sp),-(sp)
    b528:	|  |         move.l d0,-(sp)
    b52a:	|  |         jsr b42c <saveAnim>
    b530:	|  |         addq.l #8,sp
    b532:	|  |         tst.w d0
    b534:	|  |     ,-- bne.s b53a <saveCostume+0x44>
    b536:	|  |     |   clr.w d0
    b538:	|  |  ,--|-- bra.s b550 <saveCostume+0x5a>
	for (a = 0; a < cossy -> numDirections * 3; a ++) {
    b53a:	|  |  |  '-> addq.l #1,(sp)
    b53c:	|  '--|----> movea.l 8(sp),a0
    b540:	|     |      move.l 4(a0),d1
    b544:	|     |      move.l d1,d0
    b546:	|     |      add.l d0,d0
    b548:	|     |      add.l d1,d0
    b54a:	|     |      cmp.l (sp),d0
    b54c:	'-----|----- bgt.s b512 <saveCostume+0x1c>
	}

	return TRUE;
    b54e:	      |      moveq #1,d0
}
    b550:	      '----> addq.l #4,sp
    b552:	             rts

0000b554 <savePeople>:

BOOL savePeople (BPTR fp) {
    b554:	             lea -144(sp),sp
    b558:	             move.l a6,-(sp)
    b55a:	             move.l d2,-(sp)
	struct onScreenPerson * me = allPeople;
    b55c:	             move.l 1d016 <allPeople>,148(sp)
	int countPeople = 0, a;
    b564:	             clr.l 144(sp)

	putSigned (scaleHorizon, fp);
    b568:	             move.w 1c93a <scaleHorizon>,d0
    b56e:	             movea.w d0,a0
    b570:	             move.l 156(sp),-(sp)
    b574:	             move.l a0,-(sp)
    b576:	             jsr a9c <putSigned>
    b57c:	             addq.l #8,sp
	putSigned (scaleDivide, fp);
    b57e:	             move.w 1c93c <scaleDivide>,d0
    b584:	             movea.w d0,a0
    b586:	             move.l 156(sp),-(sp)
    b58a:	             move.l a0,-(sp)
    b58c:	             jsr a9c <putSigned>
    b592:	             addq.l #8,sp

	while (me) {
    b594:	         ,-- bra.s b5a4 <savePeople+0x50>
		countPeople ++;
    b596:	      ,--|-> addq.l #1,144(sp)
		me = me -> next;
    b59a:	      |  |   movea.l 148(sp),a0
    b59e:	      |  |   move.l 36(a0),148(sp)
	while (me) {
    b5a4:	      |  '-> tst.l 148(sp)
    b5a8:	      '----- bne.s b596 <savePeople+0x42>
	}

	put2bytes (countPeople, fp);
    b5aa:	             move.l 156(sp),-(sp)
    b5ae:	             move.l 148(sp),-(sp)
    b5b2:	             jsr 8d0 <put2bytes>
    b5b8:	             addq.l #8,sp

	me = allPeople;
    b5ba:	             move.l 1d016 <allPeople>,148(sp)
	for (a = 0; a < countPeople; a ++) {
    b5c2:	             clr.l 140(sp)
    b5c6:	   ,-------- bra.w ba1e <savePeople+0x4ca>

		putFloat (me -> x, fp);
    b5ca:	,--|-------> movea.l 148(sp),a0
    b5ce:	|  |         move.l (a0),d0
    b5d0:	|  |         move.l 156(sp),-(sp)
    b5d4:	|  |         move.l d0,-(sp)
    b5d6:	|  |         jsr a46 <putFloat>
    b5dc:	|  |         addq.l #8,sp
		putFloat (me -> y, fp);
    b5de:	|  |         movea.l 148(sp),a0
    b5e2:	|  |         move.l 4(a0),d0
    b5e6:	|  |         move.l 156(sp),-(sp)
    b5ea:	|  |         move.l d0,-(sp)
    b5ec:	|  |         jsr a46 <putFloat>
    b5f2:	|  |         addq.l #8,sp

		saveCostume (me -> myPersona, fp);
    b5f4:	|  |         movea.l 148(sp),a0
    b5f8:	|  |         move.l 80(a0),d0
    b5fc:	|  |         move.l 156(sp),-(sp)
    b600:	|  |         move.l d0,-(sp)
    b602:	|  |         jsr b4f6 <saveCostume>
    b608:	|  |         addq.l #8,sp
		saveAnim (me -> myAnim, fp);
    b60a:	|  |         movea.l 148(sp),a0
    b60e:	|  |         move.l 72(a0),d0
    b612:	|  |         move.l 156(sp),-(sp)
    b616:	|  |         move.l d0,-(sp)
    b618:	|  |         jsr b42c <saveAnim>
    b61e:	|  |         addq.l #8,sp
		FPutC( fp, me -> myAnim == me -> lastUsedAnim);
    b620:	|  |         move.l 156(sp),136(sp)
    b626:	|  |         movea.l 148(sp),a0
    b62a:	|  |         move.l 72(a0),d1
    b62e:	|  |         movea.l 148(sp),a0
    b632:	|  |         move.l 76(a0),d0
    b636:	|  |         cmp.l d1,d0
    b638:	|  |         seq d0
    b63a:	|  |         neg.b d0
    b63c:	|  |         move.b d0,d0
    b63e:	|  |         andi.l #255,d0
    b644:	|  |         move.l d0,132(sp)
    b648:	|  |         move.l 1cfbe <DOSBase>,d0
    b64e:	|  |         movea.l d0,a6
    b650:	|  |         move.l 136(sp),d1
    b654:	|  |         move.l 132(sp),d2
    b658:	|  |         jsr -312(a6)
    b65c:	|  |         move.l d0,128(sp)

		putFloat (me -> scale, fp);
    b660:	|  |         movea.l 148(sp),a0
    b664:	|  |         move.l 32(a0),d0
    b668:	|  |         move.l 156(sp),-(sp)
    b66c:	|  |         move.l d0,-(sp)
    b66e:	|  |         jsr a46 <putFloat>
    b674:	|  |         addq.l #8,sp

		put2bytes (me -> extra, fp);
    b676:	|  |         movea.l 148(sp),a0
    b67a:	|  |         move.l 118(a0),d0
    b67e:	|  |         move.l 156(sp),-(sp)
    b682:	|  |         move.l d0,-(sp)
    b684:	|  |         jsr 8d0 <put2bytes>
    b68a:	|  |         addq.l #8,sp
		put2bytes (me -> height, fp);
    b68c:	|  |         movea.l 148(sp),a0
    b690:	|  |         move.l 20(a0),d0
    b694:	|  |         move.l 156(sp),-(sp)
    b698:	|  |         move.l d0,-(sp)
    b69a:	|  |         jsr 8d0 <put2bytes>
    b6a0:	|  |         addq.l #8,sp
		put2bytes (me -> walkToX, fp);
    b6a2:	|  |         movea.l 148(sp),a0
    b6a6:	|  |         move.l 40(a0),d0
    b6aa:	|  |         move.l 156(sp),-(sp)
    b6ae:	|  |         move.l d0,-(sp)
    b6b0:	|  |         jsr 8d0 <put2bytes>
    b6b6:	|  |         addq.l #8,sp
		put2bytes (me -> walkToY, fp);
    b6b8:	|  |         movea.l 148(sp),a0
    b6bc:	|  |         move.l 44(a0),d0
    b6c0:	|  |         move.l 156(sp),-(sp)
    b6c4:	|  |         move.l d0,-(sp)
    b6c6:	|  |         jsr 8d0 <put2bytes>
    b6cc:	|  |         addq.l #8,sp
		put2bytes (me -> thisStepX, fp);
    b6ce:	|  |         movea.l 148(sp),a0
    b6d2:	|  |         move.l 48(a0),d0
    b6d6:	|  |         move.l 156(sp),-(sp)
    b6da:	|  |         move.l d0,-(sp)
    b6dc:	|  |         jsr 8d0 <put2bytes>
    b6e2:	|  |         addq.l #8,sp
		put2bytes (me -> thisStepY, fp);
    b6e4:	|  |         movea.l 148(sp),a0
    b6e8:	|  |         move.l 52(a0),d0
    b6ec:	|  |         move.l 156(sp),-(sp)
    b6f0:	|  |         move.l d0,-(sp)
    b6f2:	|  |         jsr 8d0 <put2bytes>
    b6f8:	|  |         addq.l #8,sp
		put2bytes (me -> frameNum, fp);
    b6fa:	|  |         movea.l 148(sp),a0
    b6fe:	|  |         move.l 84(a0),d0
    b702:	|  |         move.l 156(sp),-(sp)
    b706:	|  |         move.l d0,-(sp)
    b708:	|  |         jsr 8d0 <put2bytes>
    b70e:	|  |         addq.l #8,sp
		put2bytes (me -> frameTick, fp);
    b710:	|  |         movea.l 148(sp),a0
    b714:	|  |         move.l 88(a0),d0
    b718:	|  |         move.l 156(sp),-(sp)
    b71c:	|  |         move.l d0,-(sp)
    b71e:	|  |         jsr 8d0 <put2bytes>
    b724:	|  |         addq.l #8,sp
		put2bytes (me -> walkSpeed, fp);
    b726:	|  |         movea.l 148(sp),a0
    b72a:	|  |         move.l 28(a0),d0
    b72e:	|  |         move.l 156(sp),-(sp)
    b732:	|  |         move.l d0,-(sp)
    b734:	|  |         jsr 8d0 <put2bytes>
    b73a:	|  |         addq.l #8,sp
		put2bytes (me -> spinSpeed, fp);
    b73c:	|  |         movea.l 148(sp),a0
    b740:	|  |         move.l 122(a0),d0
    b744:	|  |         move.l 156(sp),-(sp)
    b748:	|  |         move.l d0,-(sp)
    b74a:	|  |         jsr 8d0 <put2bytes>
    b750:	|  |         addq.l #8,sp
		putSigned (me -> floaty, fp);
    b752:	|  |         movea.l 148(sp),a0
    b756:	|  |         move.l 24(a0),d0
    b75a:	|  |         move.l d0,d0
    b75c:	|  |         movea.w d0,a0
    b75e:	|  |         move.l 156(sp),-(sp)
    b762:	|  |         move.l a0,-(sp)
    b764:	|  |         jsr a9c <putSigned>
    b76a:	|  |         addq.l #8,sp
		FPutC (fp, me -> show);
    b76c:	|  |         move.l 156(sp),124(sp)
    b772:	|  |         movea.l 148(sp),a0
    b776:	|  |         move.w 104(a0),d0
    b77a:	|  |         movea.w d0,a0
    b77c:	|  |         move.l a0,120(sp)
    b780:	|  |         move.l 1cfbe <DOSBase>,d0
    b786:	|  |         movea.l d0,a6
    b788:	|  |         move.l 124(sp),d1
    b78c:	|  |         move.l 120(sp),d2
    b790:	|  |         jsr -312(a6)
    b794:	|  |         move.l d0,116(sp)
		FPutC (fp, me -> walking);
    b798:	|  |         move.l 156(sp),112(sp)
    b79e:	|  |         movea.l 148(sp),a0
    b7a2:	|  |         move.w 64(a0),d0
    b7a6:	|  |         movea.w d0,a0
    b7a8:	|  |         move.l a0,108(sp)
    b7ac:	|  |         move.l 1cfbe <DOSBase>,d0
    b7b2:	|  |         movea.l d0,a6
    b7b4:	|  |         move.l 112(sp),d1
    b7b8:	|  |         move.l 108(sp),d2
    b7bc:	|  |         jsr -312(a6)
    b7c0:	|  |         move.l d0,104(sp)
		FPutC (fp, me -> spinning);
    b7c4:	|  |         move.l 156(sp),100(sp)
    b7ca:	|  |         movea.l 148(sp),a0
    b7ce:	|  |         move.w 66(a0),d0
    b7d2:	|  |         movea.w d0,a0
    b7d4:	|  |         move.l a0,96(sp)
    b7d8:	|  |         move.l 1cfbe <DOSBase>,d0
    b7de:	|  |         movea.l d0,a6
    b7e0:	|  |         move.l 100(sp),d1
    b7e4:	|  |         move.l 96(sp),d2
    b7e8:	|  |         jsr -312(a6)
    b7ec:	|  |         move.l d0,92(sp)
		if (me -> continueAfterWalking) {
    b7f0:	|  |         movea.l 148(sp),a0
    b7f4:	|  |         move.l 68(a0),d0
    b7f8:	|  |  ,----- beq.s b836 <savePeople+0x2e2>
			FPutC (fp, 1);
    b7fa:	|  |  |      move.l 156(sp),76(sp)
    b800:	|  |  |      moveq #1,d0
    b802:	|  |  |      move.l d0,72(sp)
    b806:	|  |  |      move.l 1cfbe <DOSBase>,d0
    b80c:	|  |  |      movea.l d0,a6
    b80e:	|  |  |      move.l 76(sp),d1
    b812:	|  |  |      move.l 72(sp),d2
    b816:	|  |  |      jsr -312(a6)
    b81a:	|  |  |      move.l d0,68(sp)
			saveFunction (me -> continueAfterWalking, fp);
    b81e:	|  |  |      movea.l 148(sp),a0
    b822:	|  |  |      move.l 68(a0),d0
    b826:	|  |  |      move.l 156(sp),-(sp)
    b82a:	|  |  |      move.l d0,-(sp)
    b82c:	|  |  |      jsr ca50 <saveFunction>
    b832:	|  |  |      addq.l #8,sp
    b834:	|  |  |  ,-- bra.s b85a <savePeople+0x306>
		} else {
			FPutC (fp, 1);
    b836:	|  |  '--|-> move.l 156(sp),88(sp)
    b83c:	|  |     |   moveq #1,d0
    b83e:	|  |     |   move.l d0,84(sp)
    b842:	|  |     |   move.l 1cfbe <DOSBase>,d0
    b848:	|  |     |   movea.l d0,a6
    b84a:	|  |     |   move.l 88(sp),d1
    b84e:	|  |     |   move.l 84(sp),d2
    b852:	|  |     |   jsr -312(a6)
    b856:	|  |     |   move.l d0,80(sp)
		}
		put2bytes (me -> direction, fp);
    b85a:	|  |     '-> movea.l 148(sp),a0
    b85e:	|  |         move.l 106(a0),d0
    b862:	|  |         move.l 156(sp),-(sp)
    b866:	|  |         move.l d0,-(sp)
    b868:	|  |         jsr 8d0 <put2bytes>
    b86e:	|  |         addq.l #8,sp
		put2bytes (me -> angle, fp);
    b870:	|  |         movea.l 148(sp),a0
    b874:	|  |         move.l 92(a0),d0
    b878:	|  |         move.l 156(sp),-(sp)
    b87c:	|  |         move.l d0,-(sp)
    b87e:	|  |         jsr 8d0 <put2bytes>
    b884:	|  |         addq.l #8,sp
		put2bytes (me -> angleOffset, fp);
    b886:	|  |         movea.l 148(sp),a0
    b88a:	|  |         move.l 100(a0),d0
    b88e:	|  |         move.l 156(sp),-(sp)
    b892:	|  |         move.l d0,-(sp)
    b894:	|  |         jsr 8d0 <put2bytes>
    b89a:	|  |         addq.l #8,sp
		put2bytes (me -> wantAngle, fp);
    b89c:	|  |         movea.l 148(sp),a0
    b8a0:	|  |         move.l 96(a0),d0
    b8a4:	|  |         move.l 156(sp),-(sp)
    b8a8:	|  |         move.l d0,-(sp)
    b8aa:	|  |         jsr 8d0 <put2bytes>
    b8b0:	|  |         addq.l #8,sp
		putSigned (me -> directionWhenDoneWalking, fp);
    b8b2:	|  |         movea.l 148(sp),a0
    b8b6:	|  |         move.l 110(a0),d0
    b8ba:	|  |         move.l d0,d0
    b8bc:	|  |         movea.w d0,a0
    b8be:	|  |         move.l 156(sp),-(sp)
    b8c2:	|  |         move.l a0,-(sp)
    b8c4:	|  |         jsr a9c <putSigned>
    b8ca:	|  |         addq.l #8,sp
		putSigned (me -> inPoly, fp);
    b8cc:	|  |         movea.l 148(sp),a0
    b8d0:	|  |         move.l 56(a0),d0
    b8d4:	|  |         move.l d0,d0
    b8d6:	|  |         movea.w d0,a0
    b8d8:	|  |         move.l 156(sp),-(sp)
    b8dc:	|  |         move.l a0,-(sp)
    b8de:	|  |         jsr a9c <putSigned>
    b8e4:	|  |         addq.l #8,sp
		putSigned (me -> walkToPoly, fp);
    b8e6:	|  |         movea.l 148(sp),a0
    b8ea:	|  |         move.l 60(a0),d0
    b8ee:	|  |         move.l d0,d0
    b8f0:	|  |         movea.w d0,a0
    b8f2:	|  |         move.l 156(sp),-(sp)
    b8f6:	|  |         move.l a0,-(sp)
    b8f8:	|  |         jsr a9c <putSigned>
    b8fe:	|  |         addq.l #8,sp

		FPutC (fp, me -> r);
    b900:	|  |         move.l 156(sp),64(sp)
    b906:	|  |         movea.l 148(sp),a0
    b90a:	|  |         move.b 126(a0),d0
    b90e:	|  |         move.b d0,d0
    b910:	|  |         andi.l #255,d0
    b916:	|  |         move.l d0,60(sp)
    b91a:	|  |         move.l 1cfbe <DOSBase>,d0
    b920:	|  |         movea.l d0,a6
    b922:	|  |         move.l 64(sp),d1
    b926:	|  |         move.l 60(sp),d2
    b92a:	|  |         jsr -312(a6)
    b92e:	|  |         move.l d0,56(sp)
		FPutC (fp, me -> g);
    b932:	|  |         move.l 156(sp),52(sp)
    b938:	|  |         movea.l 148(sp),a0
    b93c:	|  |         move.b 127(a0),d0
    b940:	|  |         move.b d0,d0
    b942:	|  |         andi.l #255,d0
    b948:	|  |         move.l d0,48(sp)
    b94c:	|  |         move.l 1cfbe <DOSBase>,d0
    b952:	|  |         movea.l d0,a6
    b954:	|  |         move.l 52(sp),d1
    b958:	|  |         move.l 48(sp),d2
    b95c:	|  |         jsr -312(a6)
    b960:	|  |         move.l d0,44(sp)
		FPutC (fp, me -> b);
    b964:	|  |         move.l 156(sp),40(sp)
    b96a:	|  |         movea.l 148(sp),a0
    b96e:	|  |         move.b 128(a0),d0
    b972:	|  |         move.b d0,d0
    b974:	|  |         andi.l #255,d0
    b97a:	|  |         move.l d0,36(sp)
    b97e:	|  |         move.l 1cfbe <DOSBase>,d0
    b984:	|  |         movea.l d0,a6
    b986:	|  |         move.l 40(sp),d1
    b98a:	|  |         move.l 36(sp),d2
    b98e:	|  |         jsr -312(a6)
    b992:	|  |         move.l d0,32(sp)
		FPutC (fp, me -> colourmix);
    b996:	|  |         move.l 156(sp),28(sp)
    b99c:	|  |         movea.l 148(sp),a0
    b9a0:	|  |         move.b 129(a0),d0
    b9a4:	|  |         move.b d0,d0
    b9a6:	|  |         andi.l #255,d0
    b9ac:	|  |         move.l d0,24(sp)
    b9b0:	|  |         move.l 1cfbe <DOSBase>,d0
    b9b6:	|  |         movea.l d0,a6
    b9b8:	|  |         move.l 28(sp),d1
    b9bc:	|  |         move.l 24(sp),d2
    b9c0:	|  |         jsr -312(a6)
    b9c4:	|  |         move.l d0,20(sp)
		FPutC (fp, me -> transparency);
    b9c8:	|  |         move.l 156(sp),16(sp)
    b9ce:	|  |         movea.l 148(sp),a0
    b9d2:	|  |         move.b 130(a0),d0
    b9d6:	|  |         move.b d0,d0
    b9d8:	|  |         andi.l #255,d0
    b9de:	|  |         move.l d0,12(sp)
    b9e2:	|  |         move.l 1cfbe <DOSBase>,d0
    b9e8:	|  |         movea.l d0,a6
    b9ea:	|  |         move.l 16(sp),d1
    b9ee:	|  |         move.l 12(sp),d2
    b9f2:	|  |         jsr -312(a6)
    b9f6:	|  |         move.l d0,8(sp)
		
		saveObjectRef (me -> thisType, fp);
    b9fa:	|  |         movea.l 148(sp),a0
    b9fe:	|  |         move.l 114(a0),d0
    ba02:	|  |         move.l 156(sp),-(sp)
    ba06:	|  |         move.l d0,-(sp)
    ba08:	|  |         jsr de24 <saveObjectRef>
    ba0e:	|  |         addq.l #8,sp

		me = me -> next;
    ba10:	|  |         movea.l 148(sp),a0
    ba14:	|  |         move.l 36(a0),148(sp)
	for (a = 0; a < countPeople; a ++) {
    ba1a:	|  |         addq.l #1,140(sp)
    ba1e:	|  '-------> movea.l 140(sp),a0
    ba22:	|            cmpa.l 144(sp),a0
    ba26:	'----------- blt.w b5ca <savePeople+0x76>
	}
	return TRUE;
    ba2a:	             moveq #1,d0
}
    ba2c:	             move.l (sp)+,d2
    ba2e:	             movea.l (sp)+,a6
    ba30:	             lea 144(sp),sp
    ba34:	             rts

0000ba36 <setBankFile>:

void setBankFile (struct personaAnimation * newP, struct loadedSpriteBank * sB) { 
	newP -> theSprites = sB; 
    ba36:	movea.l 4(sp),a0
    ba3a:	move.l 8(sp),(a0)
}
    ba3e:	nop
    ba40:	rts

0000ba42 <setDrawMode>:


void setDrawMode (int h, int ob) {
    ba42:	       subq.l #4,sp
	struct onScreenPerson * moveMe = findPerson (ob);
    ba44:	       move.l 12(sp),-(sp)
    ba48:	       jsr aa6e <findPerson>
    ba4e:	       addq.l #4,sp
    ba50:	       move.l d0,(sp)
	if (! moveMe) return;
    ba52:	,----- beq.s ba66 <setDrawMode+0x24>
		
	setMyDrawMode (moveMe, h);
    ba54:	|      move.l 8(sp),-(sp)
    ba58:	|      move.l 4(sp),-(sp)
    ba5c:	|      jsr ba6c <setMyDrawMode>
    ba62:	|      addq.l #8,sp
    ba64:	|  ,-- bra.s ba68 <setDrawMode+0x26>
	if (! moveMe) return;
    ba66:	'--|-> nop
}
    ba68:	   '-> addq.l #4,sp
    ba6a:	       rts

0000ba6c <setMyDrawMode>:
	drawModeInvisible,
	numDrawModes
};

void setMyDrawMode (struct onScreenPerson *moveMe, int h) {
	switch (h) {
    ba6c:	       moveq #19,d0
    ba6e:	       cmp.l 8(sp),d0
    ba72:	,----- bcs.w bf4a <setMyDrawMode+0x4de>
    ba76:	|      move.l 8(sp),d0
    ba7a:	|      add.l d0,d0
    ba7c:	|      movea.l d0,a0
    ba7e:	|      adda.l #47754,a0
    ba84:	|      move.w (a0),d0
    ba86:	|      jmp (ba8a <setMyDrawMode+0x1e>,pc,d0.w)
    ba8a:	|      .short 0x04c0
    ba8c:	|      ori.l #6684712,-(a4)
    ba92:	|      btst d0,-(a0)
    ba94:	|      bchg d0,(a6)+
    ba96:	|      bclr d0,(a4)+
    ba98:	|      bset d0,(a2)+
    ba9a:	|      andi.b #84,(a6)
    ba9e:	|      andi.l #55575312,(a2)
    baa4:	|      .short 0x02d0
    baa6:	|      bclr d1,(a0)
    baa8:	|      .short 0x044a
    baaa:	|      .short 0x040c
    baac:	|      movep.l d1,1158(a6)
    bab0:	|      .short 0x00e2
		case drawModeTransparent3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    bab2:	|      movea.l 4(sp),a0
    bab6:	|      clr.b 128(a0)
    baba:	|      movea.l 4(sp),a0
    babe:	|      move.b 128(a0),d0
    bac2:	|      movea.l 4(sp),a0
    bac6:	|      move.b d0,127(a0)
    baca:	|      movea.l 4(sp),a0
    bace:	|      move.b 127(a0),d0
    bad2:	|      movea.l 4(sp),a0
    bad6:	|      move.b d0,126(a0)
			moveMe->colourmix = 0;
    bada:	|      movea.l 4(sp),a0
    bade:	|      clr.b 129(a0)
			moveMe->transparency = 64;
    bae2:	|      movea.l 4(sp),a0
    bae6:	|      move.b #64,130(a0)
			break;
    baec:	|  ,-- bra.w bf84 <setMyDrawMode+0x518>
		case drawModeTransparent2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    baf0:	|  |   movea.l 4(sp),a0
    baf4:	|  |   clr.b 128(a0)
    baf8:	|  |   movea.l 4(sp),a0
    bafc:	|  |   move.b 128(a0),d0
    bb00:	|  |   movea.l 4(sp),a0
    bb04:	|  |   move.b d0,127(a0)
    bb08:	|  |   movea.l 4(sp),a0
    bb0c:	|  |   move.b 127(a0),d0
    bb10:	|  |   movea.l 4(sp),a0
    bb14:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    bb18:	|  |   movea.l 4(sp),a0
    bb1c:	|  |   clr.b 129(a0)
			moveMe->transparency = 128;
    bb20:	|  |   movea.l 4(sp),a0
    bb24:	|  |   move.b #-128,130(a0)
			break;
    bb2a:	|  +-- bra.w bf84 <setMyDrawMode+0x518>
		case drawModeTransparent1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    bb2e:	|  |   movea.l 4(sp),a0
    bb32:	|  |   clr.b 128(a0)
    bb36:	|  |   movea.l 4(sp),a0
    bb3a:	|  |   move.b 128(a0),d0
    bb3e:	|  |   movea.l 4(sp),a0
    bb42:	|  |   move.b d0,127(a0)
    bb46:	|  |   movea.l 4(sp),a0
    bb4a:	|  |   move.b 127(a0),d0
    bb4e:	|  |   movea.l 4(sp),a0
    bb52:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    bb56:	|  |   movea.l 4(sp),a0
    bb5a:	|  |   clr.b 129(a0)
			moveMe->transparency = 192;
    bb5e:	|  |   movea.l 4(sp),a0
    bb62:	|  |   move.b #-64,130(a0)
			break;
    bb68:	|  +-- bra.w bf84 <setMyDrawMode+0x518>
		case drawModeInvisible:
			moveMe->r = moveMe->g = moveMe->b = 0;
    bb6c:	|  |   movea.l 4(sp),a0
    bb70:	|  |   clr.b 128(a0)
    bb74:	|  |   movea.l 4(sp),a0
    bb78:	|  |   move.b 128(a0),d0
    bb7c:	|  |   movea.l 4(sp),a0
    bb80:	|  |   move.b d0,127(a0)
    bb84:	|  |   movea.l 4(sp),a0
    bb88:	|  |   move.b 127(a0),d0
    bb8c:	|  |   movea.l 4(sp),a0
    bb90:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    bb94:	|  |   movea.l 4(sp),a0
    bb98:	|  |   clr.b 129(a0)
			moveMe->transparency = 254;
    bb9c:	|  |   movea.l 4(sp),a0
    bba0:	|  |   move.b #-2,130(a0)
			break;
    bba6:	|  +-- bra.w bf84 <setMyDrawMode+0x518>
		case drawModeDark1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    bbaa:	|  |   movea.l 4(sp),a0
    bbae:	|  |   clr.b 128(a0)
    bbb2:	|  |   movea.l 4(sp),a0
    bbb6:	|  |   move.b 128(a0),d0
    bbba:	|  |   movea.l 4(sp),a0
    bbbe:	|  |   move.b d0,127(a0)
    bbc2:	|  |   movea.l 4(sp),a0
    bbc6:	|  |   move.b 127(a0),d0
    bbca:	|  |   movea.l 4(sp),a0
    bbce:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    bbd2:	|  |   movea.l 4(sp),a0
    bbd6:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    bbdc:	|  |   movea.l 4(sp),a0
    bbe0:	|  |   clr.b 130(a0)
			break;
    bbe4:	|  +-- bra.w bf84 <setMyDrawMode+0x518>
		case drawModeDark2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    bbe8:	|  |   movea.l 4(sp),a0
    bbec:	|  |   clr.b 128(a0)
    bbf0:	|  |   movea.l 4(sp),a0
    bbf4:	|  |   move.b 128(a0),d0
    bbf8:	|  |   movea.l 4(sp),a0
    bbfc:	|  |   move.b d0,127(a0)
    bc00:	|  |   movea.l 4(sp),a0
    bc04:	|  |   move.b 127(a0),d0
    bc08:	|  |   movea.l 4(sp),a0
    bc0c:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    bc10:	|  |   movea.l 4(sp),a0
    bc14:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    bc1a:	|  |   movea.l 4(sp),a0
    bc1e:	|  |   clr.b 130(a0)
			break;
    bc22:	|  +-- bra.w bf84 <setMyDrawMode+0x518>
		case drawModeDark3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    bc26:	|  |   movea.l 4(sp),a0
    bc2a:	|  |   clr.b 128(a0)
    bc2e:	|  |   movea.l 4(sp),a0
    bc32:	|  |   move.b 128(a0),d0
    bc36:	|  |   movea.l 4(sp),a0
    bc3a:	|  |   move.b d0,127(a0)
    bc3e:	|  |   movea.l 4(sp),a0
    bc42:	|  |   move.b 127(a0),d0
    bc46:	|  |   movea.l 4(sp),a0
    bc4a:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    bc4e:	|  |   movea.l 4(sp),a0
    bc52:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    bc58:	|  |   movea.l 4(sp),a0
    bc5c:	|  |   clr.b 130(a0)
			break;
    bc60:	|  +-- bra.w bf84 <setMyDrawMode+0x518>
		case drawModeBlack:
			moveMe->r = moveMe->g = moveMe->b = 0;
    bc64:	|  |   movea.l 4(sp),a0
    bc68:	|  |   clr.b 128(a0)
    bc6c:	|  |   movea.l 4(sp),a0
    bc70:	|  |   move.b 128(a0),d0
    bc74:	|  |   movea.l 4(sp),a0
    bc78:	|  |   move.b d0,127(a0)
    bc7c:	|  |   movea.l 4(sp),a0
    bc80:	|  |   move.b 127(a0),d0
    bc84:	|  |   movea.l 4(sp),a0
    bc88:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    bc8c:	|  |   movea.l 4(sp),a0
    bc90:	|  |   st 129(a0)
			moveMe->transparency = 0;
    bc94:	|  |   movea.l 4(sp),a0
    bc98:	|  |   clr.b 130(a0)
			break;
    bc9c:	|  +-- bra.w bf84 <setMyDrawMode+0x518>
		case drawModeShadow1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    bca0:	|  |   movea.l 4(sp),a0
    bca4:	|  |   clr.b 128(a0)
    bca8:	|  |   movea.l 4(sp),a0
    bcac:	|  |   move.b 128(a0),d0
    bcb0:	|  |   movea.l 4(sp),a0
    bcb4:	|  |   move.b d0,127(a0)
    bcb8:	|  |   movea.l 4(sp),a0
    bcbc:	|  |   move.b 127(a0),d0
    bcc0:	|  |   movea.l 4(sp),a0
    bcc4:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    bcc8:	|  |   movea.l 4(sp),a0
    bccc:	|  |   st 129(a0)
			moveMe->transparency = 64;
    bcd0:	|  |   movea.l 4(sp),a0
    bcd4:	|  |   move.b #64,130(a0)
			break;
    bcda:	|  +-- bra.w bf84 <setMyDrawMode+0x518>
		case drawModeShadow2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    bcde:	|  |   movea.l 4(sp),a0
    bce2:	|  |   clr.b 128(a0)
    bce6:	|  |   movea.l 4(sp),a0
    bcea:	|  |   move.b 128(a0),d0
    bcee:	|  |   movea.l 4(sp),a0
    bcf2:	|  |   move.b d0,127(a0)
    bcf6:	|  |   movea.l 4(sp),a0
    bcfa:	|  |   move.b 127(a0),d0
    bcfe:	|  |   movea.l 4(sp),a0
    bd02:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    bd06:	|  |   movea.l 4(sp),a0
    bd0a:	|  |   st 129(a0)
			moveMe->transparency = 128;
    bd0e:	|  |   movea.l 4(sp),a0
    bd12:	|  |   move.b #-128,130(a0)
			break;
    bd18:	|  +-- bra.w bf84 <setMyDrawMode+0x518>
		case drawModeShadow3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    bd1c:	|  |   movea.l 4(sp),a0
    bd20:	|  |   clr.b 128(a0)
    bd24:	|  |   movea.l 4(sp),a0
    bd28:	|  |   move.b 128(a0),d0
    bd2c:	|  |   movea.l 4(sp),a0
    bd30:	|  |   move.b d0,127(a0)
    bd34:	|  |   movea.l 4(sp),a0
    bd38:	|  |   move.b 127(a0),d0
    bd3c:	|  |   movea.l 4(sp),a0
    bd40:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    bd44:	|  |   movea.l 4(sp),a0
    bd48:	|  |   st 129(a0)
			moveMe->transparency = 192;
    bd4c:	|  |   movea.l 4(sp),a0
    bd50:	|  |   move.b #-64,130(a0)
			break;
    bd56:	|  +-- bra.w bf84 <setMyDrawMode+0x518>
		case drawModeFoggy3:
			moveMe->r = moveMe->g = moveMe->b = 128;
    bd5a:	|  |   movea.l 4(sp),a0
    bd5e:	|  |   move.b #-128,128(a0)
    bd64:	|  |   movea.l 4(sp),a0
    bd68:	|  |   move.b 128(a0),d0
    bd6c:	|  |   movea.l 4(sp),a0
    bd70:	|  |   move.b d0,127(a0)
    bd74:	|  |   movea.l 4(sp),a0
    bd78:	|  |   move.b 127(a0),d0
    bd7c:	|  |   movea.l 4(sp),a0
    bd80:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    bd84:	|  |   movea.l 4(sp),a0
    bd88:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    bd8e:	|  |   movea.l 4(sp),a0
    bd92:	|  |   clr.b 130(a0)
			break;
    bd96:	|  +-- bra.w bf84 <setMyDrawMode+0x518>
		case drawModeFoggy2:
			moveMe->r = moveMe->g = moveMe->b = 128;
    bd9a:	|  |   movea.l 4(sp),a0
    bd9e:	|  |   move.b #-128,128(a0)
    bda4:	|  |   movea.l 4(sp),a0
    bda8:	|  |   move.b 128(a0),d0
    bdac:	|  |   movea.l 4(sp),a0
    bdb0:	|  |   move.b d0,127(a0)
    bdb4:	|  |   movea.l 4(sp),a0
    bdb8:	|  |   move.b 127(a0),d0
    bdbc:	|  |   movea.l 4(sp),a0
    bdc0:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    bdc4:	|  |   movea.l 4(sp),a0
    bdc8:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    bdce:	|  |   movea.l 4(sp),a0
    bdd2:	|  |   clr.b 130(a0)
			break;
    bdd6:	|  +-- bra.w bf84 <setMyDrawMode+0x518>
		case drawModeFoggy1:
			moveMe->r = moveMe->g = moveMe->b = 128;
    bdda:	|  |   movea.l 4(sp),a0
    bdde:	|  |   move.b #-128,128(a0)
    bde4:	|  |   movea.l 4(sp),a0
    bde8:	|  |   move.b 128(a0),d0
    bdec:	|  |   movea.l 4(sp),a0
    bdf0:	|  |   move.b d0,127(a0)
    bdf4:	|  |   movea.l 4(sp),a0
    bdf8:	|  |   move.b 127(a0),d0
    bdfc:	|  |   movea.l 4(sp),a0
    be00:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    be04:	|  |   movea.l 4(sp),a0
    be08:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    be0e:	|  |   movea.l 4(sp),a0
    be12:	|  |   clr.b 130(a0)
			break;
    be16:	|  +-- bra.w bf84 <setMyDrawMode+0x518>
		case drawModeFoggy4:
			moveMe->r = moveMe->g = moveMe->b = 128;
    be1a:	|  |   movea.l 4(sp),a0
    be1e:	|  |   move.b #-128,128(a0)
    be24:	|  |   movea.l 4(sp),a0
    be28:	|  |   move.b 128(a0),d0
    be2c:	|  |   movea.l 4(sp),a0
    be30:	|  |   move.b d0,127(a0)
    be34:	|  |   movea.l 4(sp),a0
    be38:	|  |   move.b 127(a0),d0
    be3c:	|  |   movea.l 4(sp),a0
    be40:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    be44:	|  |   movea.l 4(sp),a0
    be48:	|  |   st 129(a0)
			moveMe->transparency = 0;
    be4c:	|  |   movea.l 4(sp),a0
    be50:	|  |   clr.b 130(a0)
			break;
    be54:	|  +-- bra.w bf84 <setMyDrawMode+0x518>
		case drawModeGlow3:
			moveMe->r = moveMe->g = moveMe->b = 255;
    be58:	|  |   movea.l 4(sp),a0
    be5c:	|  |   st 128(a0)
    be60:	|  |   movea.l 4(sp),a0
    be64:	|  |   move.b 128(a0),d0
    be68:	|  |   movea.l 4(sp),a0
    be6c:	|  |   move.b d0,127(a0)
    be70:	|  |   movea.l 4(sp),a0
    be74:	|  |   move.b 127(a0),d0
    be78:	|  |   movea.l 4(sp),a0
    be7c:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    be80:	|  |   movea.l 4(sp),a0
    be84:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    be8a:	|  |   movea.l 4(sp),a0
    be8e:	|  |   clr.b 130(a0)
			break;
    be92:	|  +-- bra.w bf84 <setMyDrawMode+0x518>
		case drawModeGlow2:
			moveMe->r = moveMe->g = moveMe->b = 255;
    be96:	|  |   movea.l 4(sp),a0
    be9a:	|  |   st 128(a0)
    be9e:	|  |   movea.l 4(sp),a0
    bea2:	|  |   move.b 128(a0),d0
    bea6:	|  |   movea.l 4(sp),a0
    beaa:	|  |   move.b d0,127(a0)
    beae:	|  |   movea.l 4(sp),a0
    beb2:	|  |   move.b 127(a0),d0
    beb6:	|  |   movea.l 4(sp),a0
    beba:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    bebe:	|  |   movea.l 4(sp),a0
    bec2:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    bec8:	|  |   movea.l 4(sp),a0
    becc:	|  |   clr.b 130(a0)
			break;
    bed0:	|  +-- bra.w bf84 <setMyDrawMode+0x518>
		case drawModeGlow1:
			moveMe->r = moveMe->g = moveMe->b = 255;
    bed4:	|  |   movea.l 4(sp),a0
    bed8:	|  |   st 128(a0)
    bedc:	|  |   movea.l 4(sp),a0
    bee0:	|  |   move.b 128(a0),d0
    bee4:	|  |   movea.l 4(sp),a0
    bee8:	|  |   move.b d0,127(a0)
    beec:	|  |   movea.l 4(sp),a0
    bef0:	|  |   move.b 127(a0),d0
    bef4:	|  |   movea.l 4(sp),a0
    bef8:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    befc:	|  |   movea.l 4(sp),a0
    bf00:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    bf06:	|  |   movea.l 4(sp),a0
    bf0a:	|  |   clr.b 130(a0)
			break;
    bf0e:	|  +-- bra.s bf84 <setMyDrawMode+0x518>
		case drawModeGlow4:
			moveMe->r = moveMe->g = moveMe->b = 255;
    bf10:	|  |   movea.l 4(sp),a0
    bf14:	|  |   st 128(a0)
    bf18:	|  |   movea.l 4(sp),a0
    bf1c:	|  |   move.b 128(a0),d0
    bf20:	|  |   movea.l 4(sp),a0
    bf24:	|  |   move.b d0,127(a0)
    bf28:	|  |   movea.l 4(sp),a0
    bf2c:	|  |   move.b 127(a0),d0
    bf30:	|  |   movea.l 4(sp),a0
    bf34:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    bf38:	|  |   movea.l 4(sp),a0
    bf3c:	|  |   st 129(a0)
			moveMe->transparency = 0;
    bf40:	|  |   movea.l 4(sp),a0
    bf44:	|  |   clr.b 130(a0)
			break;
    bf48:	|  +-- bra.s bf84 <setMyDrawMode+0x518>
		default:
			moveMe->r = moveMe->g = moveMe->b = 0;
    bf4a:	'--|-> movea.l 4(sp),a0
    bf4e:	   |   clr.b 128(a0)
    bf52:	   |   movea.l 4(sp),a0
    bf56:	   |   move.b 128(a0),d0
    bf5a:	   |   movea.l 4(sp),a0
    bf5e:	   |   move.b d0,127(a0)
    bf62:	   |   movea.l 4(sp),a0
    bf66:	   |   move.b 127(a0),d0
    bf6a:	   |   movea.l 4(sp),a0
    bf6e:	   |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    bf72:	   |   movea.l 4(sp),a0
    bf76:	   |   clr.b 129(a0)
			moveMe->transparency = 0;
    bf7a:	   |   movea.l 4(sp),a0
    bf7e:	   |   clr.b 130(a0)
			break;
    bf82:	   |   nop
	}
}
    bf84:	   '-> nop
    bf86:	       rts

0000bf88 <shufflePeople>:

void shufflePeople () {
    bf88:	             lea -20(sp),sp
	struct onScreenPerson ** thisReference = &allPeople;
    bf8c:	             move.l #118806,16(sp)
	struct onScreenPerson * A, * B;

	if (!allPeople) return;
    bf94:	             move.l 1d016 <allPeople>,d0
    bf9a:	,----------- beq.w c070 <shufflePeople+0xe8>

	while ((*thisReference)->next) {
    bf9e:	|     ,----- bra.w c060 <shufflePeople+0xd8>
		float y1 = (*thisReference)->y;
    bfa2:	|  ,--|----> movea.l 16(sp),a0
    bfa6:	|  |  |      movea.l (a0),a0
    bfa8:	|  |  |      move.l 4(a0),12(sp)
		if ((*thisReference)->extra & EXTRA_FRONT) y1 += 1000;
    bfae:	|  |  |      movea.l 16(sp),a0
    bfb2:	|  |  |      movea.l (a0),a0
    bfb4:	|  |  |      move.l 118(a0),d0
    bfb8:	|  |  |      moveq #1,d1
    bfba:	|  |  |      and.l d1,d0
    bfbc:	|  |  |  ,-- beq.s bfd4 <shufflePeople+0x4c>
    bfbe:	|  |  |  |   move.l #1148846080,-(sp)
    bfc4:	|  |  |  |   move.l 16(sp),-(sp)
    bfc8:	|  |  |  |   jsr 17996 <__addsf3>
    bfce:	|  |  |  |   addq.l #8,sp
    bfd0:	|  |  |  |   move.l d0,12(sp)

		float y2 = (*thisReference)->next->y;
    bfd4:	|  |  |  '-> movea.l 16(sp),a0
    bfd8:	|  |  |      movea.l (a0),a0
    bfda:	|  |  |      movea.l 36(a0),a0
    bfde:	|  |  |      move.l 4(a0),8(sp)
		if ((*thisReference)->next->extra & EXTRA_FRONT) y2 += 1000;
    bfe4:	|  |  |      movea.l 16(sp),a0
    bfe8:	|  |  |      movea.l (a0),a0
    bfea:	|  |  |      movea.l 36(a0),a0
    bfee:	|  |  |      move.l 118(a0),d0
    bff2:	|  |  |      moveq #1,d1
    bff4:	|  |  |      and.l d1,d0
    bff6:	|  |  |  ,-- beq.s c00e <shufflePeople+0x86>
    bff8:	|  |  |  |   move.l #1148846080,-(sp)
    bffe:	|  |  |  |   move.l 12(sp),-(sp)
    c002:	|  |  |  |   jsr 17996 <__addsf3>
    c008:	|  |  |  |   addq.l #8,sp
    c00a:	|  |  |  |   move.l d0,8(sp)

		if (y1 > y2) {
    c00e:	|  |  |  '-> move.l 8(sp),-(sp)
    c012:	|  |  |      move.l 16(sp),-(sp)
    c016:	|  |  |      jsr 17d46 <__gtsf2>
    c01c:	|  |  |      addq.l #8,sp
    c01e:	|  |  |      tst.l d0
    c020:	|  |  |  ,-- ble.s c052 <shufflePeople+0xca>
			A = (*thisReference);
    c022:	|  |  |  |   movea.l 16(sp),a0
    c026:	|  |  |  |   move.l (a0),4(sp)
			B = (*thisReference)->next;
    c02a:	|  |  |  |   movea.l 16(sp),a0
    c02e:	|  |  |  |   movea.l (a0),a0
    c030:	|  |  |  |   move.l 36(a0),(sp)
			A->next = B->next;
    c034:	|  |  |  |   movea.l (sp),a0
    c036:	|  |  |  |   move.l 36(a0),d0
    c03a:	|  |  |  |   movea.l 4(sp),a0
    c03e:	|  |  |  |   move.l d0,36(a0)
			B->next = A;
    c042:	|  |  |  |   movea.l (sp),a0
    c044:	|  |  |  |   move.l 4(sp),36(a0)
			(*thisReference) = B;
    c04a:	|  |  |  |   movea.l 16(sp),a0
    c04e:	|  |  |  |   move.l (sp),(a0)
    c050:	|  |  +--|-- bra.s c060 <shufflePeople+0xd8>
		} else {
			thisReference = &((*thisReference)->next);
    c052:	|  |  |  '-> movea.l 16(sp),a0
    c056:	|  |  |      move.l (a0),d0
    c058:	|  |  |      moveq #36,d1
    c05a:	|  |  |      add.l d0,d1
    c05c:	|  |  |      move.l d1,16(sp)
	while ((*thisReference)->next) {
    c060:	|  |  '----> movea.l 16(sp),a0
    c064:	|  |         movea.l (a0),a0
    c066:	|  |         move.l 36(a0),d0
    c06a:	|  '-------- bne.w bfa2 <shufflePeople+0x1a>
    c06e:	|        ,-- bra.s c072 <shufflePeople+0xea>
	if (!allPeople) return;
    c070:	'--------|-> nop
		}
	}
}
    c072:	         '-> lea 20(sp),sp
    c076:	             rts

0000c078 <setCharacterWalkSpeed>:


BOOL setCharacterWalkSpeed (int f, int objNum) {
    c078:	       subq.l #4,sp
	if (f <= 0) return FALSE;
    c07a:	       tst.l 8(sp)
    c07e:	   ,-- bgt.s c084 <setCharacterWalkSpeed+0xc>
    c080:	   |   clr.w d0
    c082:	,--|-- bra.s c0a2 <setCharacterWalkSpeed+0x2a>
	struct onScreenPerson * moveMe = findPerson (objNum);
    c084:	|  '-> move.l 12(sp),-(sp)
    c088:	|      jsr aa6e <findPerson>
    c08e:	|      addq.l #4,sp
    c090:	|      move.l d0,(sp)
	if (! moveMe) return FALSE;
    c092:	|  ,-- bne.s c098 <setCharacterWalkSpeed+0x20>
    c094:	|  |   clr.w d0
    c096:	+--|-- bra.s c0a2 <setCharacterWalkSpeed+0x2a>
	moveMe -> walkSpeed = f;
    c098:	|  '-> movea.l (sp),a0
    c09a:	|      move.l 8(sp),28(a0)
	return TRUE;
    c0a0:	|      moveq #1,d0
}
    c0a2:	'----> addq.l #4,sp
    c0a4:	       rts

0000c0a6 <setPersonExtra>:

BOOL setPersonExtra (int thisNum, int extra) {
    c0a6:	       subq.l #4,sp
    struct onScreenPerson * thisPerson = findPerson(thisNum);
    c0a8:	       move.l 8(sp),-(sp)
    c0ac:	       jsr aa6e <findPerson>
    c0b2:	       addq.l #4,sp
    c0b4:	       move.l d0,(sp)
    if (thisPerson) {
    c0b6:	,----- beq.s c0d6 <setPersonExtra+0x30>
        thisPerson -> extra = extra;
    c0b8:	|      movea.l (sp),a0
    c0ba:	|      move.l 12(sp),118(a0)
        if (extra & EXTRA_NOSCALE) thisPerson -> scale = 1;
    c0c0:	|      moveq #2,d0
    c0c2:	|      and.l 12(sp),d0
    c0c6:	|  ,-- beq.s c0d2 <setPersonExtra+0x2c>
    c0c8:	|  |   movea.l (sp),a0
    c0ca:	|  |   move.l #1065353216,32(a0)
        return TRUE;
    c0d2:	|  '-> moveq #1,d0
    c0d4:	|  ,-- bra.s c0d8 <setPersonExtra+0x32>
    }
    return FALSE;
    c0d6:	'--|-> clr.w d0
}
    c0d8:	   '-> addq.l #4,sp
    c0da:	       rts

0000c0dc <setScale>:


void setScale (short int h, short int d) {
    c0dc:	subq.l #4,sp
    c0de:	move.l 8(sp),d1
    c0e2:	move.l 12(sp),d0
    c0e6:	move.w d1,d1
    c0e8:	move.w d1,2(sp)
    c0ec:	move.w d0,d0
    c0ee:	move.w d0,(sp)
	scaleHorizon = h;
    c0f0:	move.w 2(sp),1c93a <scaleHorizon>
	scaleDivide = d;
    c0f8:	move.w (sp),1c93c <scaleDivide>
}
    c0fe:	nop
    c100:	addq.l #4,sp
    c102:	rts

0000c104 <setShown>:

void setShown (BOOL h, int ob) {
    c104:	    subq.l #8,sp
    c106:	    move.l 12(sp),d0
    c10a:	    move.w d0,d0
    c10c:	    move.w d0,2(sp)
	struct onScreenPerson * moveMe = findPerson (ob);
    c110:	    move.l 16(sp),-(sp)
    c114:	    jsr aa6e <findPerson>
    c11a:	    addq.l #4,sp
    c11c:	    move.l d0,4(sp)
	if (moveMe) moveMe -> show = h;
    c120:	,-- beq.s c12c <setShown+0x28>
    c122:	|   movea.l 4(sp),a0
    c126:	|   move.w 2(sp),104(a0)
}
    c12c:	'-> nop
    c12e:	    addq.l #8,sp
    c130:	    rts

0000c132 <spinStep>:

void spinStep (struct onScreenPerson * thisPerson) {
    c132:	       subq.l #8,sp
    c134:	       move.l d2,-(sp)
	int diff = (thisPerson->angle + 360) - thisPerson->wantAngle;
    c136:	       movea.l 16(sp),a0
    c13a:	       move.l 92(a0),d0
    c13e:	       move.l d0,d1
    c140:	       addi.l #360,d1
    c146:	       movea.l 16(sp),a0
    c14a:	       move.l 96(a0),d0
    c14e:	       move.l d1,d2
    c150:	       sub.l d0,d2
    c152:	       move.l d2,8(sp)
	int eachSlice = thisPerson->spinSpeed ? thisPerson->spinSpeed : (360 / thisPerson->myPersona->numDirections);
    c156:	       movea.l 16(sp),a0
    c15a:	       move.l 122(a0),d0
    c15e:	   ,-- beq.s c16a <spinStep+0x38>
    c160:	   |   movea.l 16(sp),a0
    c164:	   |   move.l 122(a0),d0
    c168:	,--|-- bra.s c184 <spinStep+0x52>
    c16a:	|  '-> movea.l 16(sp),a0
    c16e:	|      movea.l 80(a0),a0
    c172:	|      move.l 4(a0),d0
    c176:	|      move.l d0,-(sp)
    c178:	|      pea 168 <decodeFilename+0x50>
    c17c:	|      jsr 181b2 <__divsi3>
    c182:	|      addq.l #8,sp
    c184:	'----> move.l d0,4(sp)
	while (diff > 180) {
    c188:	   ,-- bra.s c192 <spinStep+0x60>
		diff -= 360;
    c18a:	,--|-> addi.l #-360,8(sp)
	while (diff > 180) {
    c192:	|  '-> cmpi.l #180,8(sp)
    c19a:	'----- bgt.s c18a <spinStep+0x58>
	}

	if (diff >= eachSlice) {
    c19c:	       move.l 8(sp),d0
    c1a0:	       cmp.l 4(sp),d0
    c1a4:	   ,-- blt.s c1c2 <spinStep+0x90>
		turnMeAngle(thisPerson, thisPerson->angle - eachSlice);
    c1a6:	   |   movea.l 16(sp),a0
    c1aa:	   |   move.l 92(a0),d0
    c1ae:	   |   sub.l 4(sp),d0
    c1b2:	   |   move.l d0,-(sp)
    c1b4:	   |   move.l 20(sp),-(sp)
    c1b8:	   |   jsr c2a2 <turnMeAngle>
    c1be:	   |   addq.l #8,sp
		turnMeAngle(thisPerson, thisPerson->angle + eachSlice);
	} else {
		turnMeAngle(thisPerson, thisPerson->wantAngle);
		thisPerson->spinning = FALSE;
	}
}
    c1c0:	,--|-- bra.s c208 <spinStep+0xd6>
	} else if (diff <= -eachSlice) {
    c1c2:	|  '-> move.l 4(sp),d0
    c1c6:	|      neg.l d0
    c1c8:	|      cmp.l 8(sp),d0
    c1cc:	|  ,-- blt.s c1ea <spinStep+0xb8>
		turnMeAngle(thisPerson, thisPerson->angle + eachSlice);
    c1ce:	|  |   movea.l 16(sp),a0
    c1d2:	|  |   move.l 92(a0),d0
    c1d6:	|  |   add.l 4(sp),d0
    c1da:	|  |   move.l d0,-(sp)
    c1dc:	|  |   move.l 20(sp),-(sp)
    c1e0:	|  |   jsr c2a2 <turnMeAngle>
    c1e6:	|  |   addq.l #8,sp
}
    c1e8:	+--|-- bra.s c208 <spinStep+0xd6>
		turnMeAngle(thisPerson, thisPerson->wantAngle);
    c1ea:	|  '-> movea.l 16(sp),a0
    c1ee:	|      move.l 96(a0),d0
    c1f2:	|      move.l d0,-(sp)
    c1f4:	|      move.l 20(sp),-(sp)
    c1f8:	|      jsr c2a2 <turnMeAngle>
    c1fe:	|      addq.l #8,sp
		thisPerson->spinning = FALSE;
    c200:	|      movea.l 16(sp),a0
    c204:	|      clr.w 66(a0)
}
    c208:	'----> nop
    c20a:	       move.l (sp)+,d2
    c20c:	       addq.l #8,sp
    c20e:	       rts

0000c210 <stopPerson>:


BOOL stopPerson (int o) {
    c210:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(o);
    c212:	       move.l 8(sp),-(sp)
    c216:	       jsr aa6e <findPerson>
    c21c:	       addq.l #4,sp
    c21e:	       move.l d0,(sp)
    if (moveMe)
    c220:	,----- beq.s c25e <stopPerson+0x4e>
        if (moveMe -> continueAfterWalking) {
    c222:	|      movea.l (sp),a0
    c224:	|      move.l 68(a0),d0
    c228:	+----- beq.s c25e <stopPerson+0x4e>
            abortFunction(moveMe -> continueAfterWalking);
    c22a:	|      movea.l (sp),a0
    c22c:	|      move.l 68(a0),d0
    c230:	|      move.l d0,-(sp)
    c232:	|      jsr 5374 <abortFunction>
    c238:	|      addq.l #4,sp
            moveMe -> continueAfterWalking = NULL;
    c23a:	|      movea.l (sp),a0
    c23c:	|      clr.l 68(a0)
            moveMe -> walking = FALSE;
    c240:	|      movea.l (sp),a0
    c242:	|      clr.w 64(a0)
            moveMe -> spinning = FALSE;
    c246:	|      movea.l (sp),a0
    c248:	|      clr.w 66(a0)
            setFrames(moveMe, ANI_STAND);
    c24c:	|      clr.l -(sp)
    c24e:	|      move.l 4(sp),-(sp)
    c252:	|      jsr 4516 <setFrames>
    c258:	|      addq.l #8,sp
            return TRUE;
    c25a:	|      moveq #1,d0
    c25c:	|  ,-- bra.s c260 <stopPerson+0x50>
        }
    return FALSE;
    c25e:	'--|-> clr.w d0
}
    c260:	   '-> addq.l #4,sp
    c262:	       rts

0000c264 <timeForAnim>:


int timeForAnim (struct personaAnimation * fram) {
    c264:	       subq.l #8,sp
	int total = 0;
    c266:	       clr.l 4(sp)
	for (int a = 0; a < fram -> numFrames; a ++) {
    c26a:	       clr.l (sp)
    c26c:	   ,-- bra.s c28e <timeForAnim+0x2a>
		total += fram -> frames[a].howMany;
    c26e:	,--|-> movea.l 12(sp),a0
    c272:	|  |   movea.l 4(a0),a0
    c276:	|  |   move.l (sp),d1
    c278:	|  |   move.l d1,d0
    c27a:	|  |   add.l d0,d0
    c27c:	|  |   add.l d1,d0
    c27e:	|  |   add.l d0,d0
    c280:	|  |   add.l d0,d0
    c282:	|  |   adda.l d0,a0
    c284:	|  |   move.l 4(a0),d0
    c288:	|  |   add.l d0,4(sp)
	for (int a = 0; a < fram -> numFrames; a ++) {
    c28c:	|  |   addq.l #1,(sp)
    c28e:	|  '-> movea.l 12(sp),a0
    c292:	|      move.l 8(a0),d0
    c296:	|      cmp.l (sp),d0
    c298:	'----- bgt.s c26e <timeForAnim+0xa>
	}
	return total;
    c29a:	       move.l 4(sp),d0
}
    c29e:	       addq.l #8,sp
    c2a0:	       rts

0000c2a2 <turnMeAngle>:

void turnMeAngle (struct onScreenPerson * thisPerson, int direc) {
    c2a2:	       subq.l #4,sp
	int d = thisPerson -> myPersona -> numDirections;
    c2a4:	       movea.l 8(sp),a0
    c2a8:	       movea.l 80(a0),a0
    c2ac:	       move.l 4(a0),(sp)
	thisPerson -> angle = direc;
    c2b0:	       movea.l 8(sp),a0
    c2b4:	       move.l 12(sp),92(a0)
	direc += (180 / d) + 180 + thisPerson -> angleOffset;
    c2ba:	       move.l (sp),-(sp)
    c2bc:	       pea b4 <_start+0xb4>
    c2c0:	       jsr 181b2 <__divsi3>
    c2c6:	       addq.l #8,sp
    c2c8:	       move.l d0,d1
    c2ca:	       addi.l #180,d1
    c2d0:	       movea.l 8(sp),a0
    c2d4:	       move.l 100(a0),d0
    c2d8:	       add.l d1,d0
    c2da:	       add.l d0,12(sp)
	while (direc >= 360) direc -= 360;
    c2de:	   ,-- bra.s c2e8 <turnMeAngle+0x46>
    c2e0:	,--|-> addi.l #-360,12(sp)
    c2e8:	|  '-> cmpi.l #359,12(sp)
    c2f0:	'----- bgt.s c2e0 <turnMeAngle+0x3e>
	thisPerson -> direction = (direc * d) / 360;
    c2f2:	       move.l (sp),-(sp)
    c2f4:	       move.l 16(sp),-(sp)
    c2f8:	       jsr 18134 <__mulsi3>
    c2fe:	       addq.l #8,sp
    c300:	       pea 168 <decodeFilename+0x50>
    c304:	       move.l d0,-(sp)
    c306:	       jsr 181b2 <__divsi3>
    c30c:	       addq.l #8,sp
    c30e:	       movea.l 8(sp),a0
    c312:	       move.l d0,106(a0)
}
    c316:	       nop
    c318:	       addq.l #4,sp
    c31a:	       rts

0000c31c <turnPersonToFace>:

BOOL turnPersonToFace (int thisNum, int direc) {
    c31c:	          subq.l #4,sp
    struct onScreenPerson * thisPerson = findPerson(thisNum);
    c31e:	          move.l 8(sp),-(sp)
    c322:	          jsr aa6e <findPerson>
    c328:	          addq.l #4,sp
    c32a:	          move.l d0,(sp)
    if (thisPerson) {
    c32c:	,-------- beq.s c38c <turnPersonToFace+0x70>
        if (thisPerson -> continueAfterWalking) abortFunction(thisPerson -> continueAfterWalking);
    c32e:	|         movea.l (sp),a0
    c330:	|         move.l 68(a0),d0
    c334:	|     ,-- beq.s c346 <turnPersonToFace+0x2a>
    c336:	|     |   movea.l (sp),a0
    c338:	|     |   move.l 68(a0),d0
    c33c:	|     |   move.l d0,-(sp)
    c33e:	|     |   jsr 5374 <abortFunction>
    c344:	|     |   addq.l #4,sp
        thisPerson -> continueAfterWalking = NULL;
    c346:	|     '-> movea.l (sp),a0
    c348:	|         clr.l 68(a0)
        thisPerson -> walking = FALSE;
    c34c:	|         movea.l (sp),a0
    c34e:	|         clr.w 64(a0)
        thisPerson -> spinning = FALSE;
    c352:	|         movea.l (sp),a0
    c354:	|         clr.w 66(a0)
        turnMeAngle(thisPerson, direc);
    c358:	|         move.l 12(sp),-(sp)
    c35c:	|         move.l 4(sp),-(sp)
    c360:	|         jsr c2a2 <turnMeAngle>
    c366:	|         addq.l #8,sp
        setFrames(thisPerson, (thisPerson == speech->currentTalker) ? ANI_TALK : ANI_STAND);
    c368:	|         movea.l 1cefa <speech>,a0
    c36e:	|         move.l (a0),d0
    c370:	|         cmp.l (sp),d0
    c372:	|  ,----- bne.s c378 <turnPersonToFace+0x5c>
    c374:	|  |      moveq #2,d0
    c376:	|  |  ,-- bra.s c37a <turnPersonToFace+0x5e>
    c378:	|  '--|-> moveq #0,d0
    c37a:	|     '-> move.l d0,-(sp)
    c37c:	|         move.l 4(sp),-(sp)
    c380:	|         jsr 4516 <setFrames>
    c386:	|         addq.l #8,sp
        return TRUE;
    c388:	|         moveq #1,d0
    c38a:	|     ,-- bra.s c38e <turnPersonToFace+0x72>
    }
    return FALSE;
    c38c:	'-----|-> clr.w d0
}
    c38e:	      '-> addq.l #4,sp
    c390:	          rts

0000c392 <walkAllPeople>:

void walkAllPeople() {
    c392:	             subq.l #4,sp
	struct onScreenPerson *thisPerson = allPeople;
    c394:	             move.l 1d016 <allPeople>,(sp)

	while (thisPerson) {
    c39a:	   ,-------- bra.s c40a <walkAllPeople+0x78>
		if (thisPerson->walking) {
    c39c:	,--|-------> movea.l (sp),a0
    c39e:	|  |         move.w 64(a0),d0
    c3a2:	|  |     ,-- beq.s c3b6 <walkAllPeople+0x24>
			walkMe(thisPerson, TRUE);
    c3a4:	|  |     |   pea 1 <_start+0x1>
    c3a8:	|  |     |   move.l 4(sp),-(sp)
    c3ac:	|  |     |   jsr c416 <walkMe>
    c3b2:	|  |     |   addq.l #8,sp
    c3b4:	|  |  ,--|-- bra.s c3d6 <walkAllPeople+0x44>
		} else if (thisPerson->spinning) {
    c3b6:	|  |  |  '-> movea.l (sp),a0
    c3b8:	|  |  |      move.w 66(a0),d0
    c3bc:	|  |  +----- beq.s c3d6 <walkAllPeople+0x44>
			spinStep(thisPerson);
    c3be:	|  |  |      move.l (sp),-(sp)
    c3c0:	|  |  |      jsr c132 <spinStep>
    c3c6:	|  |  |      addq.l #4,sp
			setFrames(thisPerson, ANI_STAND);
    c3c8:	|  |  |      clr.l -(sp)
    c3ca:	|  |  |      move.l 4(sp),-(sp)
    c3ce:	|  |  |      jsr 4516 <setFrames>
    c3d4:	|  |  |      addq.l #8,sp
		}
		if ((!thisPerson->walking) && (!thisPerson->spinning) && thisPerson->continueAfterWalking) {
    c3d6:	|  |  '----> movea.l (sp),a0
    c3d8:	|  |         move.w 64(a0),d0
    c3dc:	|  |     ,-- bne.s c404 <walkAllPeople+0x72>
    c3de:	|  |     |   movea.l (sp),a0
    c3e0:	|  |     |   move.w 66(a0),d0
    c3e4:	|  |     +-- bne.s c404 <walkAllPeople+0x72>
    c3e6:	|  |     |   movea.l (sp),a0
    c3e8:	|  |     |   move.l 68(a0),d0
    c3ec:	|  |     +-- beq.s c404 <walkAllPeople+0x72>
			restartFunction(thisPerson->continueAfterWalking);
    c3ee:	|  |     |   movea.l (sp),a0
    c3f0:	|  |     |   move.l 68(a0),d0
    c3f4:	|  |     |   move.l d0,-(sp)
    c3f6:	|  |     |   jsr 764e <restartFunction>
    c3fc:	|  |     |   addq.l #4,sp
			thisPerson->continueAfterWalking = NULL;
    c3fe:	|  |     |   movea.l (sp),a0
    c400:	|  |     |   clr.l 68(a0)
		}
		thisPerson = thisPerson->next;
    c404:	|  |     '-> movea.l (sp),a0
    c406:	|  |         move.l 36(a0),(sp)
	while (thisPerson) {
    c40a:	|  '-------> tst.l (sp)
    c40c:	'----------- bne.s c39c <walkAllPeople+0xa>
	}
}
    c40e:	             nop
    c410:	             nop
    c412:	             addq.l #4,sp
    c414:	             rts

0000c416 <walkMe>:

BOOL walkMe (struct onScreenPerson * thisPerson, BOOL move) {
    c416:	                lea -20(sp),sp
    c41a:	                move.l d3,-(sp)
    c41c:	                move.l d2,-(sp)
    c41e:	                move.l 36(sp),d0
    c422:	                move.w d0,d0
    c424:	                move.w d0,10(sp)
	float xDiff, yDiff, maxDiff, s;

	if (move == -1) move = TRUE;  // Initialize default value for move
    c428:	                cmpi.w #-1,10(sp)
    c42e:	,-------------- bne.s c436 <walkMe+0x20>
    c430:	|               move.w #1,10(sp)

	for (;;) {
		xDiff = thisPerson->thisStepX - thisPerson->x;
    c436:	>-------------> movea.l 32(sp),a0
    c43a:	|               move.l 48(a0),d0
    c43e:	|               move.l d0,-(sp)
    c440:	|               jsr 17bda <__floatsisf>
    c446:	|               addq.l #4,sp
    c448:	|               move.l d0,d1
    c44a:	|               movea.l 32(sp),a0
    c44e:	|               move.l (a0),d0
    c450:	|               move.l d0,-(sp)
    c452:	|               move.l d1,-(sp)
    c454:	|               jsr 17ece <__subsf3>
    c45a:	|               addq.l #8,sp
    c45c:	|               move.l d0,20(sp)
		yDiff = (thisPerson->thisStepY - thisPerson->y) * 2;
    c460:	|               movea.l 32(sp),a0
    c464:	|               move.l 52(a0),d0
    c468:	|               move.l d0,-(sp)
    c46a:	|               jsr 17bda <__floatsisf>
    c470:	|               addq.l #4,sp
    c472:	|               move.l d0,d1
    c474:	|               movea.l 32(sp),a0
    c478:	|               move.l 4(a0),d0
    c47c:	|               move.l d0,-(sp)
    c47e:	|               move.l d1,-(sp)
    c480:	|               jsr 17ece <__subsf3>
    c486:	|               addq.l #8,sp
    c488:	|               move.l d0,-(sp)
    c48a:	|               move.l d0,-(sp)
    c48c:	|               jsr 17996 <__addsf3>
    c492:	|               addq.l #8,sp
    c494:	|               move.l d0,16(sp)
		s = thisPerson->scale * thisPerson->walkSpeed;
    c498:	|               movea.l 32(sp),a0
    c49c:	|               move.l 32(a0),d2
    c4a0:	|               movea.l 32(sp),a0
    c4a4:	|               move.l 28(a0),d0
    c4a8:	|               move.l d0,-(sp)
    c4aa:	|               jsr 17bda <__floatsisf>
    c4b0:	|               addq.l #4,sp
    c4b2:	|               move.l d0,-(sp)
    c4b4:	|               move.l d2,-(sp)
    c4b6:	|               jsr 17c8c <__mulsf3>
    c4bc:	|               addq.l #8,sp
    c4be:	|               move.l d0,24(sp)
		if (s < 0.2) s = 0.2;
    c4c2:	|               move.l 24(sp),-(sp)
    c4c6:	|               jsr 17afc <__extendsfdf2>
    c4cc:	|               addq.l #4,sp
    c4ce:	|               move.l #-1717986918,-(sp)
    c4d4:	|               move.l #1070176665,-(sp)
    c4da:	|               move.l d1,-(sp)
    c4dc:	|               move.l d0,-(sp)
    c4de:	|               jsr 17db2 <__ltdf2>
    c4e4:	|               lea 16(sp),sp
    c4e8:	|               tst.l d0
    c4ea:	|           ,-- bge.s c4f4 <walkMe+0xde>
    c4ec:	|           |   move.l #1045220557,24(sp)

		maxDiff = (TF_abs(xDiff) >= TF_abs(yDiff)) ? TF_abs(xDiff) : TF_abs(yDiff);
    c4f4:	|           '-> move.l 20(sp),-(sp)
    c4f8:	|               jsr 17b72 <__fixsfsi>
    c4fe:	|               addq.l #4,sp
    c500:	|               move.l d0,-(sp)
    c502:	|               jsr 965e <TF_abs>
    c508:	|               addq.l #4,sp
    c50a:	|               move.l d0,d2
    c50c:	|               move.l 16(sp),-(sp)
    c510:	|               jsr 17b72 <__fixsfsi>
    c516:	|               addq.l #4,sp
    c518:	|               move.l d0,-(sp)
    c51a:	|               jsr 965e <TF_abs>
    c520:	|               addq.l #4,sp
    c522:	|               cmp.l d2,d0
    c524:	|        ,----- bgt.s c548 <walkMe+0x132>
    c526:	|        |      move.l 20(sp),-(sp)
    c52a:	|        |      jsr 17b72 <__fixsfsi>
    c530:	|        |      addq.l #4,sp
    c532:	|        |      move.l d0,-(sp)
    c534:	|        |      jsr 965e <TF_abs>
    c53a:	|        |      addq.l #4,sp
    c53c:	|        |      move.l d0,-(sp)
    c53e:	|        |      jsr 17bda <__floatsisf>
    c544:	|        |      addq.l #4,sp
    c546:	|        |  ,-- bra.s c568 <walkMe+0x152>
    c548:	|        '--|-> move.l 16(sp),-(sp)
    c54c:	|           |   jsr 17b72 <__fixsfsi>
    c552:	|           |   addq.l #4,sp
    c554:	|           |   move.l d0,-(sp)
    c556:	|           |   jsr 965e <TF_abs>
    c55c:	|           |   addq.l #4,sp
    c55e:	|           |   move.l d0,-(sp)
    c560:	|           |   jsr 17bda <__floatsisf>
    c566:	|           |   addq.l #4,sp
    c568:	|           '-> move.l d0,12(sp)

		if (TF_abs(maxDiff) > s) {
    c56c:	|               move.l 12(sp),-(sp)
    c570:	|               jsr 17b72 <__fixsfsi>
    c576:	|               addq.l #4,sp
    c578:	|               move.l d0,-(sp)
    c57a:	|               jsr 965e <TF_abs>
    c580:	|               addq.l #4,sp
    c582:	|               move.l d0,-(sp)
    c584:	|               jsr 17bda <__floatsisf>
    c58a:	|               addq.l #4,sp
    c58c:	|               move.l d0,-(sp)
    c58e:	|               move.l 28(sp),-(sp)
    c592:	|               jsr 17e00 <__ltsf2>
    c598:	|               addq.l #8,sp
    c59a:	|               tst.l d0
    c59c:	|        ,----- bge.w c64e <walkMe+0x238>
			if (thisPerson->spinning) {
    c5a0:	|        |      movea.l 32(sp),a0
    c5a4:	|        |      move.w 66(a0),d0
    c5a8:	|        |  ,-- beq.s c5c6 <walkMe+0x1b0>
				spinStep(thisPerson);
    c5aa:	|        |  |   move.l 32(sp),-(sp)
    c5ae:	|        |  |   jsr c132 <spinStep>
    c5b4:	|        |  |   addq.l #4,sp
				setFrames(thisPerson, ANI_WALK);
    c5b6:	|        |  |   pea 1 <_start+0x1>
    c5ba:	|        |  |   move.l 36(sp),-(sp)
    c5be:	|        |  |   jsr 4516 <setFrames>
    c5c4:	|        |  |   addq.l #8,sp
			}
			s = maxDiff / s;
    c5c6:	|        |  '-> move.l 24(sp),-(sp)
    c5ca:	|        |      move.l 16(sp),-(sp)
    c5ce:	|        |      jsr 17a90 <__divsf3>
    c5d4:	|        |      addq.l #8,sp
    c5d6:	|        |      move.l d0,24(sp)
			if (move)
    c5da:	|        |      tst.w 10(sp)
    c5de:	|        |  ,-- beq.s c648 <walkMe+0x232>
				moveAndScale(thisPerson,
							 thisPerson->x + xDiff / s,
							 thisPerson->y + yDiff / (s * 2));
    c5e0:	|        |  |   movea.l 32(sp),a0
    c5e4:	|        |  |   move.l 4(a0),d2
    c5e8:	|        |  |   move.l 24(sp),d0
    c5ec:	|        |  |   move.l d0,-(sp)
    c5ee:	|        |  |   move.l d0,-(sp)
    c5f0:	|        |  |   jsr 17996 <__addsf3>
    c5f6:	|        |  |   addq.l #8,sp
    c5f8:	|        |  |   move.l d0,-(sp)
    c5fa:	|        |  |   move.l 20(sp),-(sp)
    c5fe:	|        |  |   jsr 17a90 <__divsf3>
    c604:	|        |  |   addq.l #8,sp
				moveAndScale(thisPerson,
    c606:	|        |  |   move.l d0,-(sp)
    c608:	|        |  |   move.l d2,-(sp)
    c60a:	|        |  |   jsr 17996 <__addsf3>
    c610:	|        |  |   addq.l #8,sp
    c612:	|        |  |   move.l d0,d2
							 thisPerson->x + xDiff / s,
    c614:	|        |  |   movea.l 32(sp),a0
    c618:	|        |  |   move.l (a0),d3
    c61a:	|        |  |   move.l 24(sp),-(sp)
    c61e:	|        |  |   move.l 24(sp),-(sp)
    c622:	|        |  |   jsr 17a90 <__divsf3>
    c628:	|        |  |   addq.l #8,sp
				moveAndScale(thisPerson,
    c62a:	|        |  |   move.l d0,-(sp)
    c62c:	|        |  |   move.l d3,-(sp)
    c62e:	|        |  |   jsr 17996 <__addsf3>
    c634:	|        |  |   addq.l #8,sp
    c636:	|        |  |   move.l d2,-(sp)
    c638:	|        |  |   move.l d0,-(sp)
    c63a:	|        |  |   move.l 40(sp),-(sp)
    c63e:	|        |  |   jsr b218 <moveAndScale>
    c644:	|        |  |   lea 12(sp),sp
			return TRUE;
    c648:	|        |  '-> moveq #1,d0
    c64a:	|  ,-----|----- bra.w c6fc <walkMe+0x2e6>
		}

		if (thisPerson->inPoly == -1) {
    c64e:	|  |     '----> movea.l 32(sp),a0
    c652:	|  |            move.l 56(a0),d0
    c656:	|  |            moveq #-1,d1
    c658:	|  |            cmp.l d0,d1
    c65a:	|  |        ,-- bne.s c692 <walkMe+0x27c>
			if (thisPerson->directionWhenDoneWalking != -1) {
    c65c:	|  |        |   movea.l 32(sp),a0
    c660:	|  |        |   move.l 110(a0),d0
    c664:	|  |        |   moveq #-1,d1
    c666:	|  |        |   cmp.l d0,d1
    c668:	|  |  ,-----|-- beq.s c6a6 <walkMe+0x290>
				thisPerson->wantAngle = thisPerson->directionWhenDoneWalking;
    c66a:	|  |  |     |   movea.l 32(sp),a0
    c66e:	|  |  |     |   move.l 110(a0),d0
    c672:	|  |  |     |   movea.l 32(sp),a0
    c676:	|  |  |     |   move.l d0,96(a0)
				thisPerson->spinning = TRUE;
    c67a:	|  |  |     |   movea.l 32(sp),a0
    c67e:	|  |  |     |   move.w #1,66(a0)
				spinStep(thisPerson);
    c684:	|  |  |     |   move.l 32(sp),-(sp)
    c688:	|  |  |     |   jsr c132 <spinStep>
    c68e:	|  |  |     |   addq.l #4,sp
			}
			break;
    c690:	|  |  +-----|-- bra.s c6a6 <walkMe+0x290>
		}
		if (!doBorderStuff(thisPerson)) break;
    c692:	|  |  |     '-> move.l 32(sp),-(sp)
    c696:	|  |  |         jsr 9dd0 <doBorderStuff>
    c69c:	|  |  |         addq.l #4,sp
    c69e:	|  |  |         tst.w d0
    c6a0:	|  |  |  ,----- beq.s c6aa <walkMe+0x294>
		xDiff = thisPerson->thisStepX - thisPerson->x;
    c6a2:	'--|--|--|----- bra.w c436 <walkMe+0x20>
			break;
    c6a6:	   |  '--|----> nop
    c6a8:	   |     |  ,-- bra.s c6ac <walkMe+0x296>
		if (!doBorderStuff(thisPerson)) break;
    c6aa:	   |     '--|-> nop
	}

	thisPerson->walking = FALSE;
    c6ac:	   |        '-> movea.l 32(sp),a0
    c6b0:	   |            clr.w 64(a0)
	setFrames(thisPerson, ANI_STAND);
    c6b4:	   |            clr.l -(sp)
    c6b6:	   |            move.l 36(sp),-(sp)
    c6ba:	   |            jsr 4516 <setFrames>
    c6c0:	   |            addq.l #8,sp
	moveAndScale(thisPerson,
				 thisPerson->walkToX,
				 thisPerson->walkToY);
    c6c2:	   |            movea.l 32(sp),a0
    c6c6:	   |            move.l 44(a0),d0
	moveAndScale(thisPerson,
    c6ca:	   |            move.l d0,-(sp)
    c6cc:	   |            jsr 17bda <__floatsisf>
    c6d2:	   |            addq.l #4,sp
    c6d4:	   |            move.l d0,d2
				 thisPerson->walkToX,
    c6d6:	   |            movea.l 32(sp),a0
    c6da:	   |            move.l 40(a0),d0
	moveAndScale(thisPerson,
    c6de:	   |            move.l d0,-(sp)
    c6e0:	   |            jsr 17bda <__floatsisf>
    c6e6:	   |            addq.l #4,sp
    c6e8:	   |            move.l d2,-(sp)
    c6ea:	   |            move.l d0,-(sp)
    c6ec:	   |            move.l 40(sp),-(sp)
    c6f0:	   |            jsr b218 <moveAndScale>
    c6f6:	   |            lea 12(sp),sp
	return FALSE;
    c6fa:	   |            clr.w d0
}
    c6fc:	   '----------> move.l (sp)+,d2
    c6fe:	                move.l (sp)+,d3
    c700:	                lea 20(sp),sp
    c704:	                rts

0000c706 <clearStackLib>:
};

int stackLibTotal = 0;
struct stackLibrary * stackLib = NULL;

void clearStackLib () {
    c706:	       subq.l #8,sp
    c708:	       move.l a6,-(sp)
	struct stackLibrary * k;
	while (stackLib) {
    c70a:	   ,-- bra.s c73a <clearStackLib+0x34>
		k = stackLib;
    c70c:	,--|-> move.l 1d042 <stackLib>,8(sp)
		stackLib = stackLib -> next;
    c714:	|  |   movea.l 1d042 <stackLib>,a0
    c71a:	|  |   move.l 4(a0),d0
    c71e:	|  |   move.l d0,1d042 <stackLib>
		FreeVec(k);
    c724:	|  |   move.l 8(sp),4(sp)
    c72a:	|  |   move.l 1cfb6 <SysBase>,d0
    c730:	|  |   movea.l d0,a6
    c732:	|  |   movea.l 4(sp),a1
    c736:	|  |   jsr -690(a6)
	while (stackLib) {
    c73a:	|  '-> move.l 1d042 <stackLib>,d0
    c740:	'----- bne.s c70c <clearStackLib+0x6>
	}
	stackLibTotal = 0;
    c742:	       clr.l 1d03e <stackLibTotal>
}
    c748:	       nop
    c74a:	       movea.l (sp)+,a6
    c74c:	       addq.l #8,sp
    c74e:	       rts

0000c750 <loadGame>:
	}

	return buildFunc;
}

BOOL loadGame (char * fname) {
    c750:	          lea -128(sp),sp
    c754:	          movem.l d2-d3/a6,-(sp)
	BPTR fp;
	FILETIME savedGameTime;
	int a;

	while (allRunningFunctions) finishFunction (allRunningFunctions);
    c758:	      ,-- bra.s c76a <loadGame+0x1a>
    c75a:	   ,--|-> move.l 1cf4a <allRunningFunctions>,d0
    c760:	   |  |   move.l d0,-(sp)
    c762:	   |  |   jsr 637a <finishFunction>
    c768:	   |  |   addq.l #4,sp
    c76a:	   |  '-> move.l 1cf4a <allRunningFunctions>,d0
    c770:	   '----- bne.s c75a <loadGame+0xa>

	fp = openAndVerify (fname, 'S', 'A', ERROR_GAME_LOAD_NO, &ssgVersion);
    c772:	          pea 1d046 <ssgVersion>
    c778:	          pea 198a2 <PutChar+0x1658>
    c77e:	          pea 41 <_start+0x41>
    c782:	          pea 53 <_start+0x53>
    c786:	          move.l 160(sp),-(sp)
    c78a:	          jsr 728e <openAndVerify>
    c790:	          lea 20(sp),sp
    c794:	          move.l d0,112(sp)
	if (fp == NULL) return FALSE;
    c798:	      ,-- bne.s c7a0 <loadGame+0x50>
    c79a:	      |   clr.w d0
    c79c:	,-----|-- bra.w ca46 <loadGame+0x2f6>

	unsigned int bytes_read = Read( fp, &savedGameTime, sizeof (FILETIME));
    c7a0:	|     '-> move.l 112(sp),108(sp)
    c7a6:	|         lea 140(sp),a0
    c7aa:	|         lea -126(a0),a0
    c7ae:	|         move.l a0,120(sp)
    c7b2:	|         moveq #8,d0
    c7b4:	|         move.l d0,116(sp)
    c7b8:	|         move.l 1cfbe <DOSBase>,d0
    c7be:	|         movea.l d0,a6
    c7c0:	|         move.l 108(sp),d1
    c7c4:	|         move.l 120(sp),d2
    c7c8:	|         move.l 116(sp),d3
    c7cc:	|         jsr -42(a6)
    c7d0:	|         move.l d0,132(sp)
    c7d4:	|         move.l 132(sp),d0
    c7d8:	|         move.l d0,128(sp)
	
	if (bytes_read != sizeof (FILETIME)) {
    c7dc:	|         moveq #8,d0
    c7de:	|         cmp.l 128(sp),d0
    c7e2:	|     ,-- beq.s c7f2 <loadGame+0xa2>
		KPrintF("Reading error in loadGame.\n");
    c7e4:	|     |   pea 198c3 <PutChar+0x1679>
    c7ea:	|     |   jsr 177a8 <KPrintF>
    c7f0:	|     |   addq.l #4,sp
	}

	if (savedGameTime.dwLowDateTime != fileTime.dwLowDateTime ||
    c7f2:	|     '-> move.l 14(sp),d1
    c7f6:	|         move.l 1cf54 <fileTime>,d0
    c7fc:	|         cmp.l d1,d0
    c7fe:	|     ,-- bne.s c80e <loadGame+0xbe>
		savedGameTime.dwHighDateTime != fileTime.dwHighDateTime) {
    c800:	|     |   move.l 18(sp),d1
    c804:	|     |   move.l 1cf58 <fileTime+0x4>,d0
	if (savedGameTime.dwLowDateTime != fileTime.dwLowDateTime ||
    c80a:	|     |   cmp.l d1,d0
    c80c:	|  ,--|-- beq.s c82e <loadGame+0xde>
		KPrintF("loadgame:", ERROR_GAME_LOAD_WRONG, fname);
    c80e:	|  |  '-> move.l 144(sp),-(sp)
    c812:	|  |      pea 198df <PutChar+0x1695>
    c818:	|  |      pea 199a6 <PutChar+0x175c>
    c81e:	|  |      jsr 177a8 <KPrintF>
    c824:	|  |      lea 12(sp),sp
		return FALSE; 
    c828:	|  |      clr.w d0
    c82a:	+--|----- bra.w ca46 <loadGame+0x2f6>
	}

	// DON'T ADD ANYTHING NEW BEFORE THIS POINT!

	allowAnyFilename = FGetC (fp);
    c82e:	|  '----> move.l 112(sp),124(sp)
    c834:	|         move.l 1cfbe <DOSBase>,d0
    c83a:	|         movea.l d0,a6
    c83c:	|         move.l 124(sp),d1
    c840:	|         jsr -306(a6)
    c844:	|         move.l d0,136(sp)
    c848:	|         move.l 136(sp),d0
    c84c:	|         move.l d0,d0
    c84e:	|         move.w d0,1c804 <allowAnyFilename>
	captureAllKeys = FGetC (fp);
    c854:	|         move.l 112(sp),100(sp)
    c85a:	|         move.l 1cfbe <DOSBase>,d0
    c860:	|         movea.l d0,a6
    c862:	|         move.l 100(sp),d1
    c866:	|         jsr -306(a6)
    c86a:	|         move.l d0,96(sp)
    c86e:	|         move.l 96(sp),d0
    c872:	|         move.l d0,d0
    c874:	|         move.w d0,1cf52 <captureAllKeys>
	FGetC (fp); // updateDisplay (part of movie playing)
    c87a:	|         move.l 112(sp),92(sp)
    c880:	|         move.l 1cfbe <DOSBase>,d0
    c886:	|         movea.l d0,a6
    c888:	|         move.l 92(sp),d1
    c88c:	|         jsr -306(a6)
    c890:	|         move.l d0,88(sp)

	BOOL fontLoaded = FGetC (fp);
    c894:	|         move.l 112(sp),84(sp)
    c89a:	|         move.l 1cfbe <DOSBase>,d0
    c8a0:	|         movea.l d0,a6
    c8a2:	|         move.l 84(sp),d1
    c8a6:	|         jsr -306(a6)
    c8aa:	|         move.l d0,80(sp)
    c8ae:	|         move.l 80(sp),d0
    c8b2:	|         move.w d0,78(sp)
	int fontNum;
	char * charOrder;
	if (fontLoaded) {
    c8b6:	|     ,-- beq.s c8ea <loadGame+0x19a>
		fontNum = get2bytes (fp);
    c8b8:	|     |   move.l 112(sp),-(sp)
    c8bc:	|     |   jsr 6bc <get2bytes>
    c8c2:	|     |   addq.l #4,sp
    c8c4:	|     |   move.l d0,74(sp)
		fontHeight = get2bytes (fp);		
    c8c8:	|     |   move.l 112(sp),-(sp)
    c8cc:	|     |   jsr 6bc <get2bytes>
    c8d2:	|     |   addq.l #4,sp
    c8d4:	|     |   move.l d0,1d0aa <fontHeight>
		charOrder = readString(fp);		
    c8da:	|     |   move.l 112(sp),-(sp)
    c8de:	|     |   jsr b02 <readString>
    c8e4:	|     |   addq.l #4,sp
    c8e6:	|     |   move.l d0,104(sp)
	}
	//loadFont (fontNum, charOrder, fontHeight); Amiga Todo: Implement Graphics stuff
	FreeVec(charOrder);
    c8ea:	|     '-> move.l 104(sp),70(sp)
    c8f0:	|         move.l 1cfb6 <SysBase>,d0
    c8f6:	|         movea.l d0,a6
    c8f8:	|         movea.l 70(sp),a1
    c8fc:	|         jsr -690(a6)
	
	fontSpace = getSigned (fp);
    c900:	|         move.l 112(sp),-(sp)
    c904:	|         jsr 854 <getSigned>
    c90a:	|         addq.l #4,sp
    c90c:	|         move.w d0,1ceac <fontSpace>

	killAllPeople ();
    c912:	|         jsr ae82 <killAllPeople>
	killAllRegions ();
    c918:	|         jsr 15fb8 <killAllRegions>

	int camerX = get2bytes (fp);
    c91e:	|         move.l 112(sp),-(sp)
    c922:	|         jsr 6bc <get2bytes>
    c928:	|         addq.l #4,sp
    c92a:	|         move.l d0,66(sp)
	int camerY = get2bytes (fp);
    c92e:	|         move.l 112(sp),-(sp)
    c932:	|         jsr 6bc <get2bytes>
    c938:	|         addq.l #4,sp
    c93a:	|         move.l d0,62(sp)
	FLOAT camerZ;
	camerZ = getFloat(fp);
    c93e:	|         move.l 112(sp),-(sp)
    c942:	|         jsr 7d8 <getFloat>
    c948:	|         addq.l #4,sp
    c94a:	|         move.l d0,58(sp)

	brightnessLevel = FGetC (fp);
    c94e:	|         move.l 112(sp),54(sp)
    c954:	|         move.l 1cfbe <DOSBase>,d0
    c95a:	|         movea.l d0,a6
    c95c:	|         move.l 54(sp),d1
    c960:	|         jsr -306(a6)
    c964:	|         move.l d0,50(sp)
    c968:	|         move.l 50(sp),d0
    c96c:	|         move.l d0,d0
    c96e:	|         move.b d0,1c922 <brightnessLevel>

	loadHandlers (fp);
    c974:	|         move.l 112(sp),-(sp)
    c978:	|         jsr 71ee <loadHandlers>
    c97e:	|         addq.l #4,sp
	loadRegions (fp);
    c980:	|         move.l 112(sp),-(sp)
    c984:	|         jsr 16014 <loadRegions>
    c98a:	|         addq.l #4,sp

	mouseCursorAnim = AllocVec( sizeof( struct personaAnimation), MEMF_ANY);
    c98c:	|         moveq #12,d0
    c98e:	|         move.l d0,46(sp)
    c992:	|         clr.l 42(sp)
    c996:	|         move.l 1cfb6 <SysBase>,d0
    c99c:	|         movea.l d0,a6
    c99e:	|         move.l 46(sp),d0
    c9a2:	|         move.l 42(sp),d1
    c9a6:	|         jsr -684(a6)
    c9aa:	|         move.l d0,38(sp)
    c9ae:	|         move.l 38(sp),d0
    c9b2:	|         move.l d0,1ceae <mouseCursorAnim>
	if (! mouseCursorAnim) {
    c9b8:	|         move.l 1ceae <mouseCursorAnim>,d0
    c9be:	|     ,-- bne.s c9d2 <loadGame+0x282>
		KPrintF("loadGame: Cannot allocate memory");
    c9c0:	|     |   pea 199b0 <PutChar+0x1766>
    c9c6:	|     |   jsr 177a8 <KPrintF>
    c9cc:	|     |   addq.l #4,sp
		return FALSE;
    c9ce:	|     |   clr.w d0
    c9d0:	+-----|-- bra.s ca46 <loadGame+0x2f6>
			languageNum = selectedLanguage;
			setFileIndices (NULL, gameSettings.numLanguages, languageNum);
		}
	}

	nosnapshot ();
    c9d2:	|     '-> jsr d876 <nosnapshot>
	if (FGetC (fp)) {
    c9d8:	|         move.l 112(sp),34(sp)
    c9de:	|         move.l 1cfbe <DOSBase>,d0
    c9e4:	|         movea.l d0,a6
    c9e6:	|         move.l 34(sp),d1
    c9ea:	|         jsr -306(a6)
    c9ee:	|         move.l d0,30(sp)
    c9f2:	|         move.l 30(sp),d0
    c9f6:	|     ,-- beq.s ca0c <loadGame+0x2bc>
		if (! restoreSnapshot (fp)) return FALSE;
    c9f8:	|     |   move.l 112(sp),-(sp)
    c9fc:	|     |   jsr d8f6 <restoreSnapshot>
    ca02:	|     |   addq.l #4,sp
    ca04:	|     |   tst.w d0
    ca06:	|     +-- bne.s ca0c <loadGame+0x2bc>
    ca08:	|     |   clr.w d0
    ca0a:	+-----|-- bra.s ca46 <loadGame+0x2f6>
	}

	Close (fp);
    ca0c:	|     '-> move.l 112(sp),26(sp)
    ca12:	|         move.l 1cfbe <DOSBase>,d0
    ca18:	|         movea.l d0,a6
    ca1a:	|         move.l 26(sp),d1
    ca1e:	|         jsr -36(a6)
    ca22:	|         move.l d0,22(sp)
	clearStackLib ();
    ca26:	|         jsr c706 <clearStackLib>

	cameraX = camerX;
    ca2c:	|         move.l 66(sp),1d06c <cameraX>
	cameraY = camerY;
    ca34:	|         move.l 62(sp),1d070 <cameraY>
	cameraZoom = camerZ;
    ca3c:	|         move.l 58(sp),1c946 <cameraZoom>

	return TRUE;
    ca44:	|         moveq #1,d0
}
    ca46:	'-------> movem.l (sp)+,d2-d3/a6
    ca4a:	          lea 128(sp),sp
    ca4e:	          rts

0000ca50 <saveFunction>:

void saveFunction (struct loadedFunction * fun, BPTR fp) {
    ca50:	   ,-> lea -64(sp),sp
    ca54:	   |   move.l a6,-(sp)
    ca56:	   |   move.l d2,-(sp)
	int a;
	put2bytes (fun -> originalNumber, fp);
    ca58:	   |   movea.l 76(sp),a0
    ca5c:	   |   move.l (a0),d0
    ca5e:	   |   move.l 80(sp),-(sp)
    ca62:	   |   move.l d0,-(sp)
    ca64:	   |   jsr 8d0 <put2bytes>
    ca6a:	   |   addq.l #8,sp
	if (fun -> calledBy) {
    ca6c:	   |   movea.l 76(sp),a0
    ca70:	   |   move.l 40(a0),d0
    ca74:	,--|-- beq.s cab0 <saveFunction+0x60>
		FPutC (fp, 1);
    ca76:	|  |   move.l 80(sp),52(sp)
    ca7c:	|  |   moveq #1,d0
    ca7e:	|  |   move.l d0,48(sp)
    ca82:	|  |   move.l 1cfbe <DOSBase>,d0
    ca88:	|  |   movea.l d0,a6
    ca8a:	|  |   move.l 52(sp),d1
    ca8e:	|  |   move.l 48(sp),d2
    ca92:	|  |   jsr -312(a6)
    ca96:	|  |   move.l d0,44(sp)
		saveFunction (fun -> calledBy, fp);
    ca9a:	|  |   movea.l 76(sp),a0
    ca9e:	|  |   move.l 40(a0),d0
    caa2:	|  |   move.l 80(sp),-(sp)
    caa6:	|  |   move.l d0,-(sp)
    caa8:	|  '-- jsr ca50 <saveFunction>(pc)
    caac:	|      addq.l #8,sp
    caae:	|  ,-- bra.s cad2 <saveFunction+0x82>
	} else {
		FPutC (fp, 0);
    cab0:	'--|-> move.l 80(sp),64(sp)
    cab6:	   |   clr.l 60(sp)
    caba:	   |   move.l 1cfbe <DOSBase>,d0
    cac0:	   |   movea.l d0,a6
    cac2:	   |   move.l 64(sp),d1
    cac6:	   |   move.l 60(sp),d2
    caca:	   |   jsr -312(a6)
    cace:	   |   move.l d0,56(sp)
	}
	put4bytes (fun -> timeLeft, fp);
    cad2:	   '-> movea.l 76(sp),a0
    cad6:	       move.l 12(a0),d0
    cada:	       move.l 80(sp),-(sp)
    cade:	       move.l d0,-(sp)
    cae0:	       jsr 958 <put4bytes>
    cae6:	       addq.l #8,sp
	put2bytes (fun -> runThisLine, fp);
    cae8:	       movea.l 76(sp),a0
    caec:	       move.l 36(a0),d0
    caf0:	       move.l 80(sp),-(sp)
    caf4:	       move.l d0,-(sp)
    caf6:	       jsr 8d0 <put2bytes>
    cafc:	       addq.l #8,sp
	FPutC (fp, fun -> cancelMe);
    cafe:	       move.l 80(sp),40(sp)
    cb04:	       movea.l 76(sp),a0
    cb08:	       move.w 54(a0),d0
    cb0c:	       movea.w d0,a0
    cb0e:	       move.l a0,36(sp)
    cb12:	       move.l 1cfbe <DOSBase>,d0
    cb18:	       movea.l d0,a6
    cb1a:	       move.l 40(sp),d1
    cb1e:	       move.l 36(sp),d2
    cb22:	       jsr -312(a6)
    cb26:	       move.l d0,32(sp)
	FPutC (fp, fun -> returnSomething);
    cb2a:	       move.l 80(sp),28(sp)
    cb30:	       movea.l 76(sp),a0
    cb34:	       move.w 48(a0),d0
    cb38:	       movea.w d0,a0
    cb3a:	       move.l a0,24(sp)
    cb3e:	       move.l 1cfbe <DOSBase>,d0
    cb44:	       movea.l d0,a6
    cb46:	       move.l 28(sp),d1
    cb4a:	       move.l 24(sp),d2
    cb4e:	       jsr -312(a6)
    cb52:	       move.l d0,20(sp)
	FPutC (fp, fun -> isSpeech);
    cb56:	       move.l 80(sp),16(sp)
    cb5c:	       movea.l 76(sp),a0
    cb60:	       move.w 50(a0),d0
    cb64:	       movea.w d0,a0
    cb66:	       move.l a0,12(sp)
    cb6a:	       move.l 1cfbe <DOSBase>,d0
    cb70:	       movea.l d0,a6
    cb72:	       move.l 16(sp),d1
    cb76:	       move.l 12(sp),d2
    cb7a:	       jsr -312(a6)
    cb7e:	       move.l d0,8(sp)
	saveVariable (&fun -> reg, fp);
    cb82:	       moveq #28,d0
    cb84:	       add.l 76(sp),d0
    cb88:	       move.l 80(sp),-(sp)
    cb8c:	       move.l d0,-(sp)
    cb8e:	       jsr d2a8 <saveVariable>
    cb94:	       addq.l #8,sp

	if (fun -> freezerLevel) {
    cb96:	       movea.l 76(sp),a0
    cb9a:	       move.b 56(a0),d0
    cb9e:	   ,-- beq.s cbae <saveFunction+0x15e>
		KPrintF(ERROR_GAME_SAVE_FROZEN);		
    cba0:	   |   pea 199d1 <PutChar+0x1787>
    cba6:	   |   jsr 177a8 <KPrintF>
    cbac:	   |   addq.l #4,sp
	}
	saveStack (fun -> stack, fp);
    cbae:	   '-> movea.l 76(sp),a0
    cbb2:	       move.l 24(a0),d0
    cbb6:	       move.l 80(sp),-(sp)
    cbba:	       move.l d0,-(sp)
    cbbc:	       jsr d11c <saveStack>
    cbc2:	       addq.l #8,sp
	for (a = 0; a < fun -> numLocals; a ++) {
    cbc4:	       clr.l 68(sp)
    cbc8:	   ,-- bra.s cbec <saveFunction+0x19c>
		saveVariable (& (fun -> localVars[a]), fp);
    cbca:	,--|-> movea.l 76(sp),a0
    cbce:	|  |   move.l 20(a0),d1
    cbd2:	|  |   move.l 68(sp),d0
    cbd6:	|  |   lsl.l #3,d0
    cbd8:	|  |   add.l d1,d0
    cbda:	|  |   move.l 80(sp),-(sp)
    cbde:	|  |   move.l d0,-(sp)
    cbe0:	|  |   jsr d2a8 <saveVariable>
    cbe6:	|  |   addq.l #8,sp
	for (a = 0; a < fun -> numLocals; a ++) {
    cbe8:	|  |   addq.l #1,68(sp)
    cbec:	|  '-> movea.l 76(sp),a0
    cbf0:	|      move.l 8(a0),d0
    cbf4:	|      cmp.l 68(sp),d0
    cbf8:	'----- bgt.s cbca <saveFunction+0x17a>
	}
}
    cbfa:	       nop
    cbfc:	       nop
    cbfe:	       move.l (sp)+,d2
    cc00:	       movea.l (sp)+,a6
    cc02:	       lea 64(sp),sp
    cc06:	       rts

0000cc08 <saveGame>:

BOOL saveGame (char * fname) {
    cc08:	          lea -248(sp),sp
    cc0c:	          movem.l d2-d3/a6,-(sp)
	int a;

	BPTR fp = Open( fname, MODE_NEWFILE);
    cc10:	          move.l 264(sp),244(sp)
    cc16:	          move.l #1006,240(sp)
    cc1e:	          move.l 1cfbe <DOSBase>,d0
    cc24:	          movea.l d0,a6
    cc26:	          move.l 244(sp),d1
    cc2a:	          move.l 240(sp),d2
    cc2e:	          jsr -30(a6)
    cc32:	          move.l d0,236(sp)
    cc36:	          move.l 236(sp),d0
    cc3a:	          move.l d0,232(sp)
	if (fp == NULL) {
    cc3e:	      ,-- bne.s cc54 <saveGame+0x4c>
		KPrintF("saveGame: Cannot create file");
    cc40:	      |   pea 199f3 <PutChar+0x17a9>
    cc46:	      |   jsr 177a8 <KPrintF>
    cc4c:	      |   addq.l #4,sp
		return FALSE;
    cc4e:	      |   clr.w d0
    cc50:	,-----|-- bra.w d112 <saveGame+0x50a>
	}

	Write( fp, &"SLUDSA", 6);
    cc54:	|     '-> move.l 232(sp),228(sp)
    cc5a:	|         move.l #104976,224(sp)
    cc62:	|         moveq #6,d0
    cc64:	|         move.l d0,220(sp)
    cc68:	|         move.l 1cfbe <DOSBase>,d0
    cc6e:	|         movea.l d0,a6
    cc70:	|         move.l 228(sp),d1
    cc74:	|         move.l 224(sp),d2
    cc78:	|         move.l 220(sp),d3
    cc7c:	|         jsr -48(a6)
    cc80:	|         move.l d0,216(sp)
	FPutC (fp, 0);
    cc84:	|         move.l 232(sp),212(sp)
    cc8a:	|         clr.l 208(sp)
    cc8e:	|         move.l 1cfbe <DOSBase>,d0
    cc94:	|         movea.l d0,a6
    cc96:	|         move.l 212(sp),d1
    cc9a:	|         move.l 208(sp),d2
    cc9e:	|         jsr -312(a6)
    cca2:	|         move.l d0,204(sp)
	FPutC (fp, 0);
    cca6:	|         move.l 232(sp),200(sp)
    ccac:	|         clr.l 196(sp)
    ccb0:	|         move.l 1cfbe <DOSBase>,d0
    ccb6:	|         movea.l d0,a6
    ccb8:	|         move.l 200(sp),d1
    ccbc:	|         move.l 196(sp),d2
    ccc0:	|         jsr -312(a6)
    ccc4:	|         move.l d0,192(sp)
	FPutC (fp, MAJOR_VERSION);
    ccc8:	|         move.l 232(sp),188(sp)
    ccce:	|         moveq #2,d0
    ccd0:	|         move.l d0,184(sp)
    ccd4:	|         move.l 1cfbe <DOSBase>,d0
    ccda:	|         movea.l d0,a6
    ccdc:	|         move.l 188(sp),d1
    cce0:	|         move.l 184(sp),d2
    cce4:	|         jsr -312(a6)
    cce8:	|         move.l d0,180(sp)
	FPutC (fp, MINOR_VERSION);
    ccec:	|         move.l 232(sp),176(sp)
    ccf2:	|         moveq #2,d0
    ccf4:	|         move.l d0,172(sp)
    ccf8:	|         move.l 1cfbe <DOSBase>,d0
    ccfe:	|         movea.l d0,a6
    cd00:	|         move.l 176(sp),d1
    cd04:	|         move.l 172(sp),d2
    cd08:	|         jsr -312(a6)
    cd0c:	|         move.l d0,168(sp)

	Write ( fp, &fileTime, sizeof(FILETIME));
    cd10:	|         move.l 232(sp),164(sp)
    cd16:	|         move.l #118612,160(sp)
    cd1e:	|         moveq #8,d0
    cd20:	|         move.l d0,156(sp)
    cd24:	|         move.l 1cfbe <DOSBase>,d0
    cd2a:	|         movea.l d0,a6
    cd2c:	|         move.l 164(sp),d1
    cd30:	|         move.l 160(sp),d2
    cd34:	|         move.l 156(sp),d3
    cd38:	|         jsr -48(a6)
    cd3c:	|         move.l d0,152(sp)

	// DON'T ADD ANYTHING NEW BEFORE THIS POINT!

	FPutC (fp, allowAnyFilename);
    cd40:	|         move.l 232(sp),148(sp)
    cd46:	|         move.w 1c804 <allowAnyFilename>,d0
    cd4c:	|         movea.w d0,a0
    cd4e:	|         move.l a0,144(sp)
    cd52:	|         move.l 1cfbe <DOSBase>,d0
    cd58:	|         movea.l d0,a6
    cd5a:	|         move.l 148(sp),d1
    cd5e:	|         move.l 144(sp),d2
    cd62:	|         jsr -312(a6)
    cd66:	|         move.l d0,140(sp)
	FPutC (fp, captureAllKeys);
    cd6a:	|         move.l 232(sp),136(sp)
    cd70:	|         move.w 1cf52 <captureAllKeys>,d0
    cd76:	|         movea.w d0,a0
    cd78:	|         move.l a0,132(sp)
    cd7c:	|         move.l 1cfbe <DOSBase>,d0
    cd82:	|         movea.l d0,a6
    cd84:	|         move.l 136(sp),d1
    cd88:	|         move.l 132(sp),d2
    cd8c:	|         jsr -312(a6)
    cd90:	|         move.l d0,128(sp)
	FPutC (fp, TRUE); // updateDisplay
    cd94:	|         move.l 232(sp),124(sp)
    cd9a:	|         moveq #1,d0
    cd9c:	|         move.l d0,120(sp)
    cda0:	|         move.l 1cfbe <DOSBase>,d0
    cda6:	|         movea.l d0,a6
    cda8:	|         move.l 124(sp),d1
    cdac:	|         move.l 120(sp),d2
    cdb0:	|         jsr -312(a6)
    cdb4:	|         move.l d0,116(sp)
	FPutC (fp, fontTableSize>0);
    cdb8:	|         move.l 232(sp),112(sp)
    cdbe:	|         move.l 1d0ba <fontTableSize>,d0
    cdc4:	|         sgt d0
    cdc6:	|         neg.b d0
    cdc8:	|         move.b d0,d0
    cdca:	|         andi.l #255,d0
    cdd0:	|         move.l d0,108(sp)
    cdd4:	|         move.l 1cfbe <DOSBase>,d0
    cdda:	|         movea.l d0,a6
    cddc:	|         move.l 112(sp),d1
    cde0:	|         move.l 108(sp),d2
    cde4:	|         jsr -312(a6)
    cde8:	|         move.l d0,104(sp)

	if (fontTableSize>0) {
    cdec:	|         move.l 1d0ba <fontTableSize>,d0
    cdf2:	|     ,-- ble.s ce30 <saveGame+0x228>
		put2bytes (loadedFontNum, fp);
    cdf4:	|     |   move.l 1d0ae <loadedFontNum>,d0
    cdfa:	|     |   move.l 232(sp),-(sp)
    cdfe:	|     |   move.l d0,-(sp)
    ce00:	|     |   jsr 8d0 <put2bytes>
    ce06:	|     |   addq.l #8,sp
		put2bytes (fontHeight, fp);
    ce08:	|     |   move.l 1d0aa <fontHeight>,d0
    ce0e:	|     |   move.l 232(sp),-(sp)
    ce12:	|     |   move.l d0,-(sp)
    ce14:	|     |   jsr 8d0 <put2bytes>
    ce1a:	|     |   addq.l #8,sp
		writeString(fontOrderString, fp);
    ce1c:	|     |   move.l 1d0b2 <fontOrderString>,d0
    ce22:	|     |   move.l 232(sp),-(sp)
    ce26:	|     |   move.l d0,-(sp)
    ce28:	|     |   jsr bd8 <writeString>
    ce2e:	|     |   addq.l #8,sp
	}
	putSigned (fontSpace, fp);
    ce30:	|     '-> move.w 1ceac <fontSpace>,d0
    ce36:	|         movea.w d0,a0
    ce38:	|         move.l 232(sp),-(sp)
    ce3c:	|         move.l a0,-(sp)
    ce3e:	|         jsr a9c <putSigned>
    ce44:	|         addq.l #8,sp

	// Save backdrop
	put2bytes (cameraX, fp);
    ce46:	|         move.l 1d06c <cameraX>,d0
    ce4c:	|         move.l 232(sp),-(sp)
    ce50:	|         move.l d0,-(sp)
    ce52:	|         jsr 8d0 <put2bytes>
    ce58:	|         addq.l #8,sp
	put2bytes (cameraY, fp);
    ce5a:	|         move.l 1d070 <cameraY>,d0
    ce60:	|         move.l 232(sp),-(sp)
    ce64:	|         move.l d0,-(sp)
    ce66:	|         jsr 8d0 <put2bytes>
    ce6c:	|         addq.l #8,sp
	putFloat(cameraZoom, fp);
    ce6e:	|         move.l 1c946 <cameraZoom>,d0
    ce74:	|         move.l 232(sp),-(sp)
    ce78:	|         move.l d0,-(sp)
    ce7a:	|         jsr a46 <putFloat>
    ce80:	|         addq.l #8,sp

	FPutC (fp, brightnessLevel);
    ce82:	|         move.l 232(sp),100(sp)
    ce88:	|         move.b 1c922 <brightnessLevel>,d0
    ce8e:	|         move.b d0,d0
    ce90:	|         andi.l #255,d0
    ce96:	|         move.l d0,96(sp)
    ce9a:	|         move.l 1cfbe <DOSBase>,d0
    cea0:	|         movea.l d0,a6
    cea2:	|         move.l 100(sp),d1
    cea6:	|         move.l 96(sp),d2
    ceaa:	|         jsr -312(a6)
    ceae:	|         move.l d0,92(sp)

	// Save event handlers
	saveHandlers (fp);
    ceb2:	|         move.l 232(sp),-(sp)
    ceb6:	|         jsr 7788 <saveHandlers>
    cebc:	|         addq.l #4,sp

	// Save regions
	saveRegions (fp);
    cebe:	|         move.l 232(sp),-(sp)
    cec2:	|         jsr 161ce <saveRegions>
    cec8:	|         addq.l #4,sp

	saveAnim (mouseCursorAnim, fp);
    ceca:	|         move.l 1ceae <mouseCursorAnim>,d0
    ced0:	|         move.l 232(sp),-(sp)
    ced4:	|         move.l d0,-(sp)
    ced6:	|         jsr b42c <saveAnim>
    cedc:	|         addq.l #8,sp
	put2bytes (mouseCursorFrameNum, fp);
    cede:	|         move.l 1ceb2 <mouseCursorFrameNum>,d0
    cee4:	|         move.l 232(sp),-(sp)
    cee8:	|         move.l d0,-(sp)
    ceea:	|         jsr 8d0 <put2bytes>
    cef0:	|         addq.l #8,sp

	// Save functions
	struct loadedFunction * thisFunction = allRunningFunctions;
    cef2:	|         move.l 1cf4a <allRunningFunctions>,252(sp)
	int countFunctions = 0;
    cefa:	|         clr.l 248(sp)
	while (thisFunction) {
    cefe:	|     ,-- bra.s cf0e <saveGame+0x306>
		countFunctions ++;
    cf00:	|  ,--|-> addq.l #1,248(sp)
		thisFunction = thisFunction -> next;
    cf04:	|  |  |   movea.l 252(sp),a0
    cf08:	|  |  |   move.l 44(a0),252(sp)
	while (thisFunction) {
    cf0e:	|  |  '-> tst.l 252(sp)
    cf12:	|  '----- bne.s cf00 <saveGame+0x2f8>
	}
	put2bytes (countFunctions, fp);
    cf14:	|         move.l 232(sp),-(sp)
    cf18:	|         move.l 252(sp),-(sp)
    cf1c:	|         jsr 8d0 <put2bytes>
    cf22:	|         addq.l #8,sp

	thisFunction = allRunningFunctions;
    cf24:	|         move.l 1cf4a <allRunningFunctions>,252(sp)
	while (thisFunction) {
    cf2c:	|     ,-- bra.s cf48 <saveGame+0x340>
		saveFunction (thisFunction, fp);
    cf2e:	|  ,--|-> move.l 232(sp),-(sp)
    cf32:	|  |  |   move.l 256(sp),-(sp)
    cf36:	|  |  |   jsr ca50 <saveFunction>
    cf3c:	|  |  |   addq.l #8,sp
		thisFunction = thisFunction -> next;
    cf3e:	|  |  |   movea.l 252(sp),a0
    cf42:	|  |  |   move.l 44(a0),252(sp)
	while (thisFunction) {
    cf48:	|  |  '-> tst.l 252(sp)
    cf4c:	|  '----- bne.s cf2e <saveGame+0x326>
	}

	for (a = 0; a < numGlobals; a ++) {
    cf4e:	|         clr.l 256(sp)
    cf52:	|     ,-- bra.s cf74 <saveGame+0x36c>
		saveVariable (& globalVars[a], fp);
    cf54:	|  ,--|-> move.l 1cf60 <globalVars>,d1
    cf5a:	|  |  |   move.l 256(sp),d0
    cf5e:	|  |  |   lsl.l #3,d0
    cf60:	|  |  |   add.l d1,d0
    cf62:	|  |  |   move.l 232(sp),-(sp)
    cf66:	|  |  |   move.l d0,-(sp)
    cf68:	|  |  |   jsr d2a8 <saveVariable>
    cf6e:	|  |  |   addq.l #8,sp
	for (a = 0; a < numGlobals; a ++) {
    cf70:	|  |  |   addq.l #1,256(sp)
    cf74:	|  |  '-> move.l 1cf8e <numGlobals>,d0
    cf7a:	|  |      cmp.l 256(sp),d0
    cf7e:	|  '----- bgt.s cf54 <saveGame+0x34c>
	}

	savePeople (fp);
    cf80:	|         move.l 232(sp),-(sp)
    cf84:	|         jsr b554 <savePeople>
    cf8a:	|         addq.l #4,sp

	if (currentFloor -> numPolygons) {
    cf8c:	|         movea.l 1d0ce <currentFloor>,a0
    cf92:	|         move.l 8(a0),d0
    cf96:	|  ,----- beq.s cfd4 <saveGame+0x3cc>
		FPutC (fp, 1);
    cf98:	|  |      move.l 232(sp),76(sp)
    cf9e:	|  |      moveq #1,d0
    cfa0:	|  |      move.l d0,72(sp)
    cfa4:	|  |      move.l 1cfbe <DOSBase>,d0
    cfaa:	|  |      movea.l d0,a6
    cfac:	|  |      move.l 76(sp),d1
    cfb0:	|  |      move.l 72(sp),d2
    cfb4:	|  |      jsr -312(a6)
    cfb8:	|  |      move.l d0,68(sp)
		put2bytes (currentFloor -> originalNum, fp);
    cfbc:	|  |      movea.l 1d0ce <currentFloor>,a0
    cfc2:	|  |      move.l (a0),d0
    cfc4:	|  |      move.l 232(sp),-(sp)
    cfc8:	|  |      move.l d0,-(sp)
    cfca:	|  |      jsr 8d0 <put2bytes>
    cfd0:	|  |      addq.l #8,sp
    cfd2:	|  |  ,-- bra.s cff6 <saveGame+0x3ee>
	} else FPutC (fp, 0);
    cfd4:	|  '--|-> move.l 232(sp),88(sp)
    cfda:	|     |   clr.l 84(sp)
    cfde:	|     |   move.l 1cfbe <DOSBase>,d0
    cfe4:	|     |   movea.l d0,a6
    cfe6:	|     |   move.l 88(sp),d1
    cfea:	|     |   move.l 84(sp),d2
    cfee:	|     |   jsr -312(a6)
    cff2:	|     |   move.l d0,80(sp)
	/*if (zBuffer.tex) {
		FPutC (fp, 1);
		put2bytes (zBuffer.originalNum, fp);
	} else FPutC (fp,0);*/ 

	FPutC (fp, speechMode);
    cff6:	|     '-> move.l 232(sp),64(sp)
    cffc:	|         move.l 1d080 <speechMode>,60(sp)
    d004:	|         move.l 1cfbe <DOSBase>,d0
    d00a:	|         movea.l d0,a6
    d00c:	|         move.l 64(sp),d1
    d010:	|         move.l 60(sp),d2
    d014:	|         jsr -312(a6)
    d018:	|         move.l d0,56(sp)
	FPutC (fadeMode, fp);
    d01c:	|         move.b 1ce82 <fadeMode>,d0
    d022:	|         move.b d0,d0
    d024:	|         andi.l #255,d0
    d02a:	|         move.l d0,52(sp)
    d02e:	|         move.l 232(sp),48(sp)
    d034:	|         move.l 1cfbe <DOSBase>,d0
    d03a:	|         movea.l d0,a6
    d03c:	|         move.l 52(sp),d1
    d040:	|         move.l 48(sp),d2
    d044:	|         jsr -312(a6)
    d048:	|         move.l d0,44(sp)
	saveSpeech (speech, fp);
    d04c:	|         move.l 1cefa <speech>,d0
    d052:	|         move.l 232(sp),-(sp)
    d056:	|         move.l d0,-(sp)
    d058:	|         jsr 43ca <saveSpeech>
    d05e:	|         addq.l #8,sp
	saveStatusBars (fp);
    d060:	|         move.l 232(sp),-(sp)
    d064:	|         jsr 8886 <saveStatusBars>
    d06a:	|         addq.l #4,sp
	saveSounds (fp);
    d06c:	|         move.l 232(sp),-(sp)
    d070:	|         jsr d61a <saveSounds>
    d076:	|         addq.l #4,sp

	put2bytes (saveEncoding, fp);
    d078:	|         move.w 1d06a <saveEncoding>,d0
    d07e:	|         move.w d0,d0
    d080:	|         andi.l #65535,d0
    d086:	|         move.l 232(sp),-(sp)
    d08a:	|         move.l d0,-(sp)
    d08c:	|         jsr 8d0 <put2bytes>
    d092:	|         addq.l #8,sp

	saveParallaxRecursive (parallaxStuff, fp);
    d094:	|         move.l 1d05c <parallaxStuff>,d0
    d09a:	|         move.l 232(sp),-(sp)
    d09e:	|         move.l d0,-(sp)
    d0a0:	|         jsr d91c <saveParallaxRecursive>
    d0a6:	|         addq.l #8,sp
	FPutC (fp, 0);
    d0a8:	|         move.l 232(sp),40(sp)
    d0ae:	|         clr.l 36(sp)
    d0b2:	|         move.l 1cfbe <DOSBase>,d0
    d0b8:	|         movea.l d0,a6
    d0ba:	|         move.l 40(sp),d1
    d0be:	|         move.l 36(sp),d2
    d0c2:	|         jsr -312(a6)
    d0c6:	|         move.l d0,32(sp)

	FPutC(fp, languageNum);	// Selected language
    d0ca:	|         move.l 232(sp),28(sp)
    d0d0:	|         move.l 1c928 <languageNum>,24(sp)
    d0d8:	|         move.l 1cfbe <DOSBase>,d0
    d0de:	|         movea.l d0,a6
    d0e0:	|         move.l 28(sp),d1
    d0e4:	|         move.l 24(sp),d2
    d0e8:	|         jsr -312(a6)
    d0ec:	|         move.l d0,20(sp)

	Close(fp);
    d0f0:	|         move.l 232(sp),16(sp)
    d0f6:	|         move.l 1cfbe <DOSBase>,d0
    d0fc:	|         movea.l d0,a6
    d0fe:	|         move.l 16(sp),d1
    d102:	|         jsr -36(a6)
    d106:	|         move.l d0,12(sp)
	clearStackLib ();
    d10a:	|         jsr c706 <clearStackLib>
	return TRUE;
    d110:	|         moveq #1,d0
}
    d112:	'-------> movem.l (sp)+,d2-d3/a6
    d116:	          lea 248(sp),sp
    d11a:	          rts

0000d11c <saveStack>:

//----------------------------------------------------------------------
// For saving and loading stacks...
//----------------------------------------------------------------------

void saveStack (struct variableStack * vs, BPTR fp) {
    d11c:	       lea -12(sp),sp
	int elements = 0;
    d120:	       clr.l 8(sp)
	int a;

	struct variableStack * search = vs;
    d124:	       move.l 16(sp),(sp)
	while (search) {
    d128:	   ,-- bra.s d134 <saveStack+0x18>
		elements ++;
    d12a:	,--|-> addq.l #1,8(sp)
		search = search -> next;
    d12e:	|  |   movea.l (sp),a0
    d130:	|  |   move.l 8(a0),(sp)
	while (search) {
    d134:	|  '-> tst.l (sp)
    d136:	'----- bne.s d12a <saveStack+0xe>
	}

	put2bytes (elements, fp);
    d138:	       move.l 20(sp),-(sp)
    d13c:	       move.l 12(sp),-(sp)
    d140:	       jsr 8d0 <put2bytes>
    d146:	       addq.l #8,sp
	search = vs;
    d148:	       move.l 16(sp),(sp)
	for (a = 0; a < elements; a ++) {
    d14c:	       clr.l 4(sp)
    d150:	   ,-- bra.s d16c <saveStack+0x50>
		saveVariable (& search -> thisVar, fp);
    d152:	,--|-> move.l (sp),d0
    d154:	|  |   move.l 20(sp),-(sp)
    d158:	|  |   move.l d0,-(sp)
    d15a:	|  |   jsr d2a8 <saveVariable>
    d160:	|  |   addq.l #8,sp
		search = search -> next;
    d162:	|  |   movea.l (sp),a0
    d164:	|  |   move.l 8(a0),(sp)
	for (a = 0; a < elements; a ++) {
    d168:	|  |   addq.l #1,4(sp)
    d16c:	|  '-> move.l 4(sp),d0
    d170:	|      cmp.l 8(sp),d0
    d174:	'----- blt.s d152 <saveStack+0x36>
	}
}
    d176:	       nop
    d178:	       nop
    d17a:	       lea 12(sp),sp
    d17e:	       rts

0000d180 <saveStackRef>:


BOOL saveStackRef (struct stackHandler * vs, BPTR fp) {
    d180:	             lea -44(sp),sp
    d184:	             move.l a6,-(sp)
    d186:	             move.l d2,-(sp)
	struct stackLibrary * s = stackLib;
    d188:	             move.l 1d042 <stackLib>,48(sp)
	int a = 0;
    d190:	             clr.l 44(sp)
	while (s) {
    d194:	      ,----- bra.s d1f2 <saveStackRef+0x72>
		if (s -> stack == vs) {
    d196:	   ,--|----> movea.l 48(sp),a0
    d19a:	   |  |      move.l (a0),d0
    d19c:	   |  |      cmp.l 56(sp),d0
    d1a0:	   |  |  ,-- bne.s d1e4 <saveStackRef+0x64>
			FPutC (fp, 1);
    d1a2:	   |  |  |   move.l 60(sp),16(sp)
    d1a8:	   |  |  |   moveq #1,d0
    d1aa:	   |  |  |   move.l d0,12(sp)
    d1ae:	   |  |  |   move.l 1cfbe <DOSBase>,d0
    d1b4:	   |  |  |   movea.l d0,a6
    d1b6:	   |  |  |   move.l 16(sp),d1
    d1ba:	   |  |  |   move.l 12(sp),d2
    d1be:	   |  |  |   jsr -312(a6)
    d1c2:	   |  |  |   move.l d0,8(sp)
			put2bytes (stackLibTotal - a, fp);
    d1c6:	   |  |  |   move.l 1d03e <stackLibTotal>,d0
    d1cc:	   |  |  |   sub.l 44(sp),d0
    d1d0:	   |  |  |   move.l 60(sp),-(sp)
    d1d4:	   |  |  |   move.l d0,-(sp)
    d1d6:	   |  |  |   jsr 8d0 <put2bytes>
    d1dc:	   |  |  |   addq.l #8,sp
			return TRUE;
    d1de:	   |  |  |   moveq #1,d0
    d1e0:	,--|--|--|-- bra.w d29e <saveStackRef+0x11e>
		}
		s = s -> next;
    d1e4:	|  |  |  '-> movea.l 48(sp),a0
    d1e8:	|  |  |      move.l 4(a0),48(sp)
		a ++;
    d1ee:	|  |  |      addq.l #1,44(sp)
	while (s) {
    d1f2:	|  |  '----> tst.l 48(sp)
    d1f6:	|  '-------- bne.s d196 <saveStackRef+0x16>
	}
	FPutC (fp, 0);
    d1f8:	|            move.l 60(sp),40(sp)
    d1fe:	|            clr.l 36(sp)
    d202:	|            move.l 1cfbe <DOSBase>,d0
    d208:	|            movea.l d0,a6
    d20a:	|            move.l 40(sp),d1
    d20e:	|            move.l 36(sp),d2
    d212:	|            jsr -312(a6)
    d216:	|            move.l d0,32(sp)
	saveStack (vs -> first, fp);
    d21a:	|            movea.l 56(sp),a0
    d21e:	|            move.l (a0),d0
    d220:	|            move.l 60(sp),-(sp)
    d224:	|            move.l d0,-(sp)
    d226:	|            jsr d11c <saveStack>
    d22c:	|            addq.l #8,sp
	s = AllocVec( sizeof(struct stackLibrary), MEMF_ANY);
    d22e:	|            moveq #8,d0
    d230:	|            move.l d0,28(sp)
    d234:	|            clr.l 24(sp)
    d238:	|            move.l 1cfb6 <SysBase>,d0
    d23e:	|            movea.l d0,a6
    d240:	|            move.l 28(sp),d0
    d244:	|            move.l 24(sp),d1
    d248:	|            jsr -684(a6)
    d24c:	|            move.l d0,20(sp)
    d250:	|            move.l 20(sp),d0
    d254:	|            move.l d0,48(sp)
	stackLibTotal ++;
    d258:	|            move.l 1d03e <stackLibTotal>,d0
    d25e:	|            addq.l #1,d0
    d260:	|            move.l d0,1d03e <stackLibTotal>
	if (! s) {
    d266:	|            tst.l 48(sp)
    d26a:	|        ,-- bne.s d27e <saveStackRef+0xfe>
		KPrintF("saveStackRef: Cannot allocate memory");
    d26c:	|        |   pea 19a3f <PutChar+0x17f5>
    d272:	|        |   jsr 177a8 <KPrintF>
    d278:	|        |   addq.l #4,sp
		return FALSE;
    d27a:	|        |   clr.w d0
    d27c:	+--------|-- bra.s d29e <saveStackRef+0x11e>
	}
	s -> next = stackLib;
    d27e:	|        '-> move.l 1d042 <stackLib>,d0
    d284:	|            movea.l 48(sp),a0
    d288:	|            move.l d0,4(a0)
	s -> stack = vs;
    d28c:	|            movea.l 48(sp),a0
    d290:	|            move.l 56(sp),(a0)
	stackLib = s;
    d294:	|            move.l 48(sp),1d042 <stackLib>
	return TRUE;
    d29c:	|            moveq #1,d0
}
    d29e:	'----------> move.l (sp)+,d2
    d2a0:	             movea.l (sp)+,a6
    d2a2:	             lea 44(sp),sp
    d2a6:	             rts

0000d2a8 <saveVariable>:

BOOL saveVariable (struct variable * from, BPTR fp)
{
    d2a8:	          lea -12(sp),sp
    d2ac:	          move.l a6,-(sp)
    d2ae:	          move.l d2,-(sp)
	FPutC (fp,from -> varType);
    d2b0:	          move.l 28(sp),16(sp)
    d2b6:	          movea.l 24(sp),a0
    d2ba:	          move.l (a0),d0
    d2bc:	          move.l d0,12(sp)
    d2c0:	          move.l 1cfbe <DOSBase>,d0
    d2c6:	          movea.l d0,a6
    d2c8:	          move.l 16(sp),d1
    d2cc:	          move.l 12(sp),d2
    d2d0:	          jsr -312(a6)
    d2d4:	          move.l d0,8(sp)
	switch (from -> varType) {
    d2d8:	          movea.l 24(sp),a0
    d2dc:	          move.l (a0),d0
    d2de:	          moveq #9,d1
    d2e0:	          cmp.l d0,d1
    d2e2:	      ,-- bcs.w d392 <saveVariable+0xea>
    d2e6:	      |   add.l d0,d0
    d2e8:	      |   movea.l d0,a0
    d2ea:	      |   adda.l #54006,a0
    d2f0:	      |   move.w (a0),d0
    d2f2:	      |   jmp (d2f6 <saveVariable+0x4e>,pc,d0.w)
    d2f6:	      |   ori.l #1310740,(a0)+
    d2fc:	      |   ori.b #20,(20,a0,d0.w)
    d302:	      |   .short 0x004c
    d304:	      |   ori.b #126,(a4)
    d308:	      |   ori.w #8303,-(a4)
		case SVT_INT:
		case SVT_FUNC:
		case SVT_BUILT:
		case SVT_FILE:
		case SVT_OBJTYPE:
		put4bytes (from -> varData.intValue, fp);
    d30c:	      |   ori.b #40,(a0)+
    d310:	      |   ori.b #47,d4
    d314:	      |   ori.b #0,(a4)+
    d318:	      |   jsr 958 <put4bytes>
    d31e:	      |   addq.l #8,sp
		return TRUE;
    d320:	      |   moveq #1,d0
    d322:	,-----|-- bra.w d3ce <saveVariable+0x126>

		case SVT_STRING:
		writeString (from -> varData.theString, fp);
    d326:	|     |   movea.l 24(sp),a0
    d32a:	|     |   move.l 4(a0),d0
    d32e:	|     |   move.l 28(sp),-(sp)
    d332:	|     |   move.l d0,-(sp)
    d334:	|     |   jsr bd8 <writeString>
    d33a:	|     |   addq.l #8,sp
		return TRUE;
    d33c:	|     |   moveq #1,d0
    d33e:	+-----|-- bra.w d3ce <saveVariable+0x126>

		case SVT_STACK:
		return saveStackRef (from -> varData.theStack, fp);
    d342:	|     |   movea.l 24(sp),a0
    d346:	|     |   move.l 4(a0),d0
    d34a:	|     |   move.l 28(sp),-(sp)
    d34e:	|     |   move.l d0,-(sp)
    d350:	|     |   jsr d180 <saveStackRef>
    d356:	|     |   addq.l #8,sp
    d358:	+-----|-- bra.s d3ce <saveVariable+0x126>

		case SVT_COSTUME:
		saveCostume (from -> varData.costumeHandler, fp);
    d35a:	|     |   movea.l 24(sp),a0
    d35e:	|     |   move.l 4(a0),d0
    d362:	|     |   move.l 28(sp),-(sp)
    d366:	|     |   move.l d0,-(sp)
    d368:	|     |   jsr b4f6 <saveCostume>
    d36e:	|     |   addq.l #8,sp
		return FALSE;
    d370:	|     |   clr.w d0
    d372:	+-----|-- bra.s d3ce <saveVariable+0x126>

		case SVT_ANIM:
		saveAnim (from -> varData.animHandler, fp);
    d374:	|     |   movea.l 24(sp),a0
    d378:	|     |   move.l 4(a0),d0
    d37c:	|     |   move.l 28(sp),-(sp)
    d380:	|     |   move.l d0,-(sp)
    d382:	|     |   jsr b42c <saveAnim>
    d388:	|     |   addq.l #8,sp
		return FALSE;
    d38a:	|     |   clr.w d0
    d38c:	+-----|-- bra.s d3ce <saveVariable+0x126>

		case SVT_NULL:
		return FALSE;
    d38e:	|     |   clr.w d0
    d390:	+-----|-- bra.s d3ce <saveVariable+0x126>

		default:
		KPrintF("Can't save variables of this type:",
					(from->varType < SVT_NUM_TYPES) ?
    d392:	|     '-> movea.l 24(sp),a0
    d396:	|         move.l (a0),d0
		KPrintF("Can't save variables of this type:",
    d398:	|         moveq #10,d1
    d39a:	|         cmp.l d0,d1
    d39c:	|  ,----- bcs.s d3b6 <saveVariable+0x10e>
						typeName[from->varType] :
    d39e:	|  |      movea.l 24(sp),a0
    d3a2:	|  |      move.l (a0),d0
		KPrintF("Can't save variables of this type:",
    d3a4:	|  |      add.l d0,d0
    d3a6:	|  |      movea.l d0,a1
    d3a8:	|  |      adda.l d0,a1
    d3aa:	|  |      lea 1ce84 <typeName>,a0
    d3b0:	|  |      move.l (0,a1,a0.l),d0
    d3b4:	|  |  ,-- bra.s d3bc <saveVariable+0x114>
    d3b6:	|  '--|-> move.l #105060,d0
    d3bc:	|     '-> move.l d0,-(sp)
    d3be:	|         pea 19a6b <PutChar+0x1821>
    d3c4:	|         jsr 177a8 <KPrintF>
    d3ca:	|         addq.l #8,sp
						"bad ID");						
	}
	return TRUE;
    d3cc:	|         moveq #1,d0
    d3ce:	'-------> move.l (sp)+,d2
    d3d0:	          movea.l (sp)+,a6
    d3d2:	          lea 12(sp),sp
    d3d6:	          rts

0000d3d8 <CsiCheckInput>:
extern struct inputType input;

UWORD counterx_old = 0;
UWORD countery_old = 0;

void CsiCheckInput() {
    d3d8:	          lea -12(sp),sp
    volatile struct Custom *custom = (struct Custom*)0xdff000;
    d3dc:	          move.l #14675968,4(sp)
    UWORD value = custom->joy0dat;
    d3e4:	          movea.l 4(sp),a0
    d3e8:	          move.w 10(a0),2(sp)
    UBYTE countery_new = (UBYTE) (custom->joy0dat >> 8);
    d3ee:	          movea.l 4(sp),a0
    d3f2:	          move.w 10(a0),d0
    d3f6:	          lsr.w #8,d0
    d3f8:	          move.b d0,1(sp)
    UBYTE counterx_new = (UBYTE) (custom->joy0dat & 0xffff);
    d3fc:	          movea.l 4(sp),a0
    d400:	          move.w 10(a0),d0
    d404:	          move.b d0,(sp)

    if(counterx_new)
    d406:	,-------- beq.w d4ac <CsiCheckInput+0xd4>
    {
        WORD counterx_diff = counterx_new - counterx_old;
    d40a:	|         clr.w d1
    d40c:	|         move.b (sp),d1
    d40e:	|         move.w 1d04a <counterx_old>,d0
    d414:	|         sub.w d0,d1
    d416:	|         move.w d1,10(sp)

        if(counterx_diff > 127) {
    d41a:	|         cmpi.w #128,10(sp)
    d420:	|     ,-- blt.s d438 <CsiCheckInput+0x60>
            input.justMoved = TRUE;                
    d422:	|     |   move.w #1,1cf68 <input+0x4>
            counterx_diff -= 256;    
    d42a:	|     |   move.w 10(sp),d0
    d42e:	|     |   addi.w #-256,d0
    d432:	|     |   move.w d0,10(sp)
    d436:	|  ,--|-- bra.s d464 <CsiCheckInput+0x8c>
        } else if (counterx_diff < -128) {
    d438:	|  |  '-> cmpi.w #-129,10(sp)
    d43e:	|  |  ,-- bgt.s d456 <CsiCheckInput+0x7e>
            counterx_diff += 256;
    d440:	|  |  |   move.w 10(sp),d0
    d444:	|  |  |   addi.w #256,d0
    d448:	|  |  |   move.w d0,10(sp)
            input.justMoved = TRUE;
    d44c:	|  |  |   move.w #1,1cf68 <input+0x4>
    d454:	|  +--|-- bra.s d464 <CsiCheckInput+0x8c>
        } else if (counterx_diff) {
    d456:	|  |  '-> tst.w 10(sp)
    d45a:	|  +----- beq.s d464 <CsiCheckInput+0x8c>
            input.justMoved = TRUE;
    d45c:	|  |      move.w #1,1cf68 <input+0x4>
        }

        input.mouseX += counterx_diff;
    d464:	|  '----> move.l 1cf6e <input+0xa>,d0
    d46a:	|         movea.w 10(sp),a0
    d46e:	|         add.l a0,d0
    d470:	|         move.l d0,1cf6e <input+0xa>

        if( input.mouseX > (int) winWidth) {
    d476:	|         move.l 1cf6e <input+0xa>,d1
    d47c:	|         move.l 1cefe <winWidth>,d0
    d482:	|         cmp.l d1,d0
    d484:	|     ,-- bge.s d494 <CsiCheckInput+0xbc>
            input.mouseX = winWidth;            
    d486:	|     |   move.l 1cefe <winWidth>,d0
    d48c:	|     |   move.l d0,1cf6e <input+0xa>
    d492:	|  ,--|-- bra.s d4a2 <CsiCheckInput+0xca>
        }
        else if(input.mouseX < 0) {
    d494:	|  |  '-> move.l 1cf6e <input+0xa>,d0
    d49a:	|  +----- bpl.s d4a2 <CsiCheckInput+0xca>
            input.mouseX = 0;
    d49c:	|  |      clr.l 1cf6e <input+0xa>
        }

        //KPrintF("CsiCheckInput: MouseX = %d\n", input.mouseX);
        counterx_old = counterx_new;
    d4a2:	|  '----> clr.w d0
    d4a4:	|         move.b (sp),d0
    d4a6:	|         move.w d0,1d04a <counterx_old>
    }    

    if(countery_new)
    d4ac:	'-------> tst.b 1(sp)
    d4b0:	,-------- beq.w d55a <CsiCheckInput+0x182>
    {
        WORD countery_diff = countery_new - countery_old;
    d4b4:	|         clr.w d1
    d4b6:	|         move.b 1(sp),d1
    d4ba:	|         move.w 1d04c <countery_old>,d0
    d4c0:	|         sub.w d0,d1
    d4c2:	|         move.w d1,8(sp)

        if(countery_diff > 127) {
    d4c6:	|         cmpi.w #128,8(sp)
    d4cc:	|     ,-- blt.s d4e4 <CsiCheckInput+0x10c>
            input.justMoved = TRUE;                
    d4ce:	|     |   move.w #1,1cf68 <input+0x4>
            countery_diff -= 256;    
    d4d6:	|     |   move.w 8(sp),d0
    d4da:	|     |   addi.w #-256,d0
    d4de:	|     |   move.w d0,8(sp)
    d4e2:	|  ,--|-- bra.s d510 <CsiCheckInput+0x138>
        } else if (countery_diff < -128) {
    d4e4:	|  |  '-> cmpi.w #-129,8(sp)
    d4ea:	|  |  ,-- bgt.s d502 <CsiCheckInput+0x12a>
            input.justMoved = TRUE;                
    d4ec:	|  |  |   move.w #1,1cf68 <input+0x4>
            countery_diff += 256;
    d4f4:	|  |  |   move.w 8(sp),d0
    d4f8:	|  |  |   addi.w #256,d0
    d4fc:	|  |  |   move.w d0,8(sp)
    d500:	|  +--|-- bra.s d510 <CsiCheckInput+0x138>
        } else if (countery_diff) {
    d502:	|  |  '-> tst.w 8(sp)
    d506:	|  +----- beq.s d510 <CsiCheckInput+0x138>
            input.justMoved = TRUE;
    d508:	|  |      move.w #1,1cf68 <input+0x4>
        }

        input.mouseY += countery_diff;
    d510:	|  '----> move.l 1cf72 <input+0xe>,d0
    d516:	|         movea.w 8(sp),a0
    d51a:	|         add.l a0,d0
    d51c:	|         move.l d0,1cf72 <input+0xe>

        if( input.mouseY > (int) winHeight) {
    d522:	|         move.l 1cf72 <input+0xe>,d1
    d528:	|         move.l 1cf02 <winHeight>,d0
    d52e:	|         cmp.l d1,d0
    d530:	|     ,-- bge.s d540 <CsiCheckInput+0x168>
            input.mouseY = winHeight;            
    d532:	|     |   move.l 1cf02 <winHeight>,d0
    d538:	|     |   move.l d0,1cf72 <input+0xe>
    d53e:	|  ,--|-- bra.s d54e <CsiCheckInput+0x176>
        }
        else if(input.mouseY < 0) {
    d540:	|  |  '-> move.l 1cf72 <input+0xe>,d0
    d546:	|  +----- bpl.s d54e <CsiCheckInput+0x176>
            input.mouseY = 0;
    d548:	|  |      clr.l 1cf72 <input+0xe>
        }

        //KPrintF("CsiCheckInput: MouseX = %d\n", input.mouseX);
        countery_old = countery_new;
    d54e:	|  '----> clr.w d0
    d550:	|         move.b 1(sp),d0
    d554:	|         move.w d0,1d04c <countery_old>
    } 

    input.leftRelease = FALSE;
    d55a:	'-------> clr.w 1cf6a <input+0x6>
    input.rightRelease = FALSE;
    d560:	          clr.w 1cf6c <input+0x8>

    if(input.leftClick && ((*(volatile UBYTE*)0xbfe001)&64))
    d566:	          move.w 1cf64 <input>,d0
    d56c:	      ,-- beq.s d592 <CsiCheckInput+0x1ba>
    d56e:	      |   movea.l #12574721,a0
    d574:	      |   move.b (a0),d0
    d576:	      |   move.b d0,d0
    d578:	      |   andi.l #255,d0
    d57e:	      |   moveq #64,d1
    d580:	      |   and.l d1,d0
    d582:	      +-- beq.s d592 <CsiCheckInput+0x1ba>
    {
        input.leftClick = FALSE;
    d584:	      |   clr.w 1cf64 <input>
        input.leftRelease = TRUE;
    d58a:	      |   move.w #1,1cf6a <input+0x6>
    }

    if(input.rightClick && ((*(volatile UWORD*)0xdff016)&(1<<10)))
    d592:	      '-> move.w 1cf66 <input+0x2>,d0
    d598:	      ,-- beq.s d5c0 <CsiCheckInput+0x1e8>
    d59a:	      |   movea.l #14675990,a0
    d5a0:	      |   move.w (a0),d0
    d5a2:	      |   move.w d0,d0
    d5a4:	      |   andi.l #65535,d0
    d5aa:	      |   andi.l #1024,d0
    d5b0:	      +-- beq.s d5c0 <CsiCheckInput+0x1e8>
    {
        input.rightClick = FALSE;
    d5b2:	      |   clr.w 1cf66 <input+0x2>
        input.rightRelease = TRUE;
    d5b8:	      |   move.w #1,1cf6c <input+0x8>
    }


    if(!((*(volatile UBYTE*)0xbfe001)&64)) {
    d5c0:	      '-> movea.l #12574721,a0
    d5c6:	          move.b (a0),d0
    d5c8:	          move.b d0,d0
    d5ca:	          andi.l #255,d0
    d5d0:	          moveq #64,d1
    d5d2:	          and.l d1,d0
    d5d4:	      ,-- bne.s d5de <CsiCheckInput+0x206>
        input.leftClick = TRUE;              
    d5d6:	      |   move.w #1,1cf64 <input>
    } 
    if(!((*(volatile UWORD*)0xdff016)&(1<<10)) ) {
    d5de:	      '-> movea.l #14675990,a0
    d5e4:	          move.w (a0),d0
    d5e6:	          move.w d0,d0
    d5e8:	          andi.l #65535,d0
    d5ee:	          andi.l #1024,d0
    d5f4:	      ,-- bne.s d5fe <CsiCheckInput+0x226>
        input.rightClick = TRUE;
    d5f6:	      |   move.w #1,1cf66 <input+0x2>
    }

    d5fe:	      '-> nop
    d600:	          lea 12(sp),sp
    d604:	          rts

0000d606 <cacheSound>:

struct soundThing soundCache[MAX_SAMPLES];

int cacheSound (int f) {
//#pragma unused (f)
	return 0;
    d606:	moveq #0,d0
}
    d608:	rts

0000d60a <huntKillFreeSound>:

void huntKillFreeSound (int filenum) {
//#pragma unused(filenum)
}
    d60a:	nop
    d60c:	rts

0000d60e <huntKillSound>:

void huntKillSound (int filenum) {
//#pragma unused(filenum)
}
    d60e:	nop
    d610:	rts

0000d612 <playMOD>:
	defVol = get2bytes (fp);
}

BOOL playMOD (int f, int a, int fromTrack) {
//#pragma unused (f,a,fromTrack)
    return TRUE;
    d612:	moveq #1,d0
}
    d614:	rts

0000d616 <playSoundList>:

void playSoundList(struct soundList *s) {
}
    d616:	nop
    d618:	rts

0000d61a <saveSounds>:

void saveSounds (BPTR fp) {
    d61a:	lea -12(sp),sp
    d61e:	move.l a6,-(sp)
    d620:	move.l d2,-(sp)
	FPutC (fp,0);
    d622:	move.l 24(sp),16(sp)
    d628:	clr.l 12(sp)
    d62c:	move.l 1cfbe <DOSBase>,d0
    d632:	movea.l d0,a6
    d634:	move.l 16(sp),d1
    d638:	move.l 12(sp),d2
    d63c:	jsr -312(a6)
    d640:	move.l d0,8(sp)
	put2bytes (defSoundVol, fp);
    d644:	move.l 1c942 <defSoundVol>,d0
    d64a:	move.l 24(sp),-(sp)
    d64e:	move.l d0,-(sp)
    d650:	jsr 8d0 <put2bytes>
    d656:	addq.l #8,sp
	put2bytes (defVol, fp);
    d658:	move.l 1c93e <defVol>,d0
    d65e:	move.l 24(sp),-(sp)
    d662:	move.l d0,-(sp)
    d664:	jsr 8d0 <put2bytes>
    d66a:	addq.l #8,sp
}
    d66c:	nop
    d66e:	move.l (sp)+,d2
    d670:	movea.l (sp)+,a6
    d672:	lea 12(sp),sp
    d676:	rts

0000d678 <setDefaultMusicVolume>:

void setDefaultMusicVolume (int v) {
	defVol = v;
    d678:	move.l 4(sp),1c93e <defVol>
}
    d680:	nop
    d682:	rts

0000d684 <setDefaultSoundVolume>:

void setDefaultSoundVolume (int v) {
	defSoundVol = v;
    d684:	move.l 4(sp),1c942 <defSoundVol>
}
    d68c:	nop
    d68e:	rts

0000d690 <setSoundLoop>:

void setSoundLoop (int a, int s, int e) {
//#pragma unused (a,s,e)
}
    d690:	nop
    d692:	rts

0000d694 <setMusicVolume>:

void setMusicVolume (int a, int v) {
//#pragma unused (a,v)
}
    d694:	nop
    d696:	rts

0000d698 <setSoundVolume>:

void setSoundVolume (int a, int v) {
//#pragma unused (a,v)
}
    d698:	nop
    d69a:	rts

0000d69c <startSound>:

BOOL startSound (int f, BOOL loopy) {	
    d69c:	subq.l #4,sp
    d69e:	move.l 12(sp),d0
    d6a2:	move.w d0,d0
    d6a4:	move.w d0,2(sp)
//#pragma unused (f,loopy)
	return TRUE;
    d6a8:	moveq #1,d0
}
    d6aa:	addq.l #4,sp
    d6ac:	rts

0000d6ae <stopMOD>:

void stopMOD (int i) {
//#pragma unused(i)
    d6ae:	nop
    d6b0:	rts

0000d6b2 <blankScreen>:
int viewportWidth = 320;
int viewportOffsetX = 0, viewportOffsetY = 0;
unsigned int snapshotTextureName = 0;

void blankScreen(int x1, int y1, int x2, int y2) {
	CstBlankScreen(x1, y1, x2, y2);
    d6b2:	move.l 16(sp),-(sp)
    d6b6:	move.l 16(sp),-(sp)
    d6ba:	move.l 16(sp),-(sp)
    d6be:	move.l 16(sp),-(sp)
    d6c2:	jsr e0e <CstBlankScreen>
    d6c8:	lea 16(sp),sp
}
    d6cc:	nop
    d6ce:	rts

0000d6d0 <darkScreen>:

void darkScreen () {
	KPrintF("darkScreen: Amiga: Graphics Display not implemented yet."); //Todo: Amigize this
    d6d0:	pea 19a8e <PutChar+0x1844>
    d6d6:	jsr 177a8 <KPrintF>
    d6dc:	addq.l #4,sp
}
    d6de:	nop
    d6e0:	rts

0000d6e2 <drawHorizontalLine>:
	//Amiga todo: Maybe some parallaxstuff here?
	//}
}

void drawHorizontalLine (unsigned int x1, unsigned int y, unsigned int x2) {
	drawLine (x1, y, x2, y);
    d6e2:	movea.l 8(sp),a1
    d6e6:	movea.l 12(sp),a0
    d6ea:	move.l 8(sp),d1
    d6ee:	move.l 4(sp),d0
    d6f2:	move.l a1,-(sp)
    d6f4:	move.l a0,-(sp)
    d6f6:	move.l d1,-(sp)
    d6f8:	move.l d0,-(sp)
    d6fa:	jsr 4ac4 <drawLine>
    d700:	lea 16(sp),sp
}
    d704:	nop
    d706:	rts

0000d708 <drawVerticalLine>:


void drawVerticalLine (unsigned int x, unsigned int y1, unsigned int y2) {
	drawLine (x, y1, x, y2);
    d708:	movea.l 12(sp),a1
    d70c:	movea.l 4(sp),a0
    d710:	move.l 8(sp),d1
    d714:	move.l 4(sp),d0
    d718:	move.l a1,-(sp)
    d71a:	move.l a0,-(sp)
    d71c:	move.l d1,-(sp)
    d71e:	move.l d0,-(sp)
    d720:	jsr 4ac4 <drawLine>
    d726:	lea 16(sp),sp
}
    d72a:	nop
    d72c:	rts

0000d72e <hardScroll>:

void hardScroll (int distance) {
   	KPrintF("Amiga: Function not implemented."); //Todo: Amigize this
    d72e:	pea 19ac7 <PutChar+0x187d>
    d734:	jsr 177a8 <KPrintF>
    d73a:	addq.l #4,sp
}
    d73c:	nop
    d73e:	rts

0000d740 <killBackDrop>:


void killBackDrop () {
	CstFreeBuffer();
    d740:	jsr 19a4 <CstFreeBuffer>
	deleteTextures (1, &backdropTextureName);
    d746:	pea 1d056 <backdropTextureName>
    d74c:	pea 1 <_start+0x1>
    d750:	jsr 4c46 <deleteTextures>
    d756:	addq.l #8,sp
	backdropTextureName = 0;
    d758:	clr.l 1d056 <backdropTextureName>
	backdropExists = FALSE;
    d75e:	clr.w 1d05a <backdropExists>
}
    d764:	nop
    d766:	rts

0000d768 <killParallax>:

void killParallax () {
    d768:	          lea -12(sp),sp
    d76c:	          move.l a6,-(sp)
	while (parallaxStuff) {
    d76e:	   ,----- bra.s d7da <killParallax+0x72>

		struct parallaxLayer * k = parallaxStuff;
    d770:	,--|----> move.l 1d05c <parallaxStuff>,12(sp)
		parallaxStuff = k->next;
    d778:	|  |      movea.l 12(sp),a0
    d77c:	|  |      move.l 42(a0),d0
    d780:	|  |      move.l d0,1d05c <parallaxStuff>

		// Now kill the image
		deleteTextures (1, &k->textureName);
    d786:	|  |      move.l 12(sp),d0
    d78a:	|  |      addq.l #4,d0
    d78c:	|  |      move.l d0,-(sp)
    d78e:	|  |      pea 1 <_start+0x1>
    d792:	|  |      jsr 4c46 <deleteTextures>
    d798:	|  |      addq.l #8,sp
		if( k->texture) FreeVec(k->texture);
    d79a:	|  |      movea.l 12(sp),a0
    d79e:	|  |      move.l (a0),d0
    d7a0:	|  |  ,-- beq.s d7ba <killParallax+0x52>
    d7a2:	|  |  |   movea.l 12(sp),a0
    d7a6:	|  |  |   move.l (a0),8(sp)
    d7aa:	|  |  |   move.l 1cfb6 <SysBase>,d0
    d7b0:	|  |  |   movea.l d0,a6
    d7b2:	|  |  |   movea.l 8(sp),a1
    d7b6:	|  |  |   jsr -690(a6)
		if( k) FreeVec(k);
    d7ba:	|  |  '-> tst.l 12(sp)
    d7be:	|  |  ,-- beq.s d7d6 <killParallax+0x6e>
    d7c0:	|  |  |   move.l 12(sp),4(sp)
    d7c6:	|  |  |   move.l 1cfb6 <SysBase>,d0
    d7cc:	|  |  |   movea.l d0,a6
    d7ce:	|  |  |   movea.l 4(sp),a1
    d7d2:	|  |  |   jsr -690(a6)
		k = NULL;
    d7d6:	|  |  '-> clr.l 12(sp)
	while (parallaxStuff) {
    d7da:	|  '----> move.l 1d05c <parallaxStuff>,d0
    d7e0:	'-------- bne.s d770 <killParallax+0x8>
	}
}
    d7e2:	          nop
    d7e4:	          nop
    d7e6:	          movea.l (sp)+,a6
    d7e8:	          lea 12(sp),sp
    d7ec:	          rts

0000d7ee <loadBackDrop>:

void loadBackDrop (int fileNum, int x, int y) {
	if (! openFileFromNum (fileNum)) {
    d7ee:	       move.l 4(sp),-(sp)
    d7f2:	       jsr 7bdc <openFileFromNum>
    d7f8:	       addq.l #4,sp
    d7fa:	       tst.l d0
    d7fc:	   ,-- bne.s d80e <loadBackDrop+0x20>
		KPrintF("Can't load overlay image");
    d7fe:	   |   pea 19ae8 <PutChar+0x189e>
    d804:	   |   jsr 177a8 <KPrintF>
    d80a:	   |   addq.l #4,sp
		return;
    d80c:	,--|-- bra.s d82e <loadBackDrop+0x40>
	}
	CstLoadBackdrop( bigDataFile, x, y);
    d80e:	|  '-> move.l 1cf9e <bigDataFile>,d0
    d814:	|      move.l 12(sp),-(sp)
    d818:	|      move.l 12(sp),-(sp)
    d81c:	|      move.l d0,-(sp)
    d81e:	|      jsr 1d0a <CstLoadBackdrop>
    d824:	|      lea 12(sp),sp
	finishAccess ();
    d828:	|      jsr 7ad4 <finishAccess>
	
}
    d82e:	'----> rts

0000d830 <loadParallax>:
	
	backdropExists = TRUE;
	return TRUE;
}

BOOL loadParallax (unsigned short v, unsigned short fracX, unsigned short fracY) {
    d830:	subq.l #8,sp
    d832:	movea.l 12(sp),a0
    d836:	move.l 16(sp),d1
    d83a:	move.l 20(sp),d0
    d83e:	movea.w a0,a0
    d840:	move.w a0,6(sp)
    d844:	move.w d1,d1
    d846:	move.w d1,4(sp)
    d84a:	move.w d0,d0
    d84c:	move.w d0,2(sp)
	KPrintF("loadParallax: Not implemented yet."); //Amiga Todo: Amigize this	
    d850:	pea 19b37 <PutChar+0x18ed>
    d856:	jsr 177a8 <KPrintF>
    d85c:	addq.l #4,sp

}
    d85e:	nop
    d860:	addq.l #8,sp
    d862:	rts

0000d864 <mixBackDrop>:

void mixBackDrop (int fileNum, int x, int y) {
	KPrintF("mixBackdrop: Amiga Graphics Display not implemented yet."); //Todo: Amigize this	
    d864:	pea 19b5a <PutChar+0x1910>
    d86a:	jsr 177a8 <KPrintF>
    d870:	addq.l #4,sp
}
    d872:	nop
    d874:	rts

0000d876 <nosnapshot>:

void nosnapshot () {
	deleteTextures (1, &snapshotTextureName);
    d876:	pea 1d060 <snapshotTextureName>
    d87c:	pea 1 <_start+0x1>
    d880:	jsr 4c46 <deleteTextures>
    d886:	addq.l #8,sp
	snapshotTextureName = 0;
    d888:	clr.l 1d060 <snapshotTextureName>
}
    d88e:	nop
    d890:	rts

0000d892 <reserveBackdrop>:

BOOL reserveBackdrop () {	
	cameraX = 0;
    d892:	clr.l 1d06c <cameraX>
	cameraY = 0;
    d898:	clr.l 1d070 <cameraY>
	
	return CstReserveBackdrop(sceneWidth, sceneHeight);
    d89e:	move.l 1d052 <sceneHeight>,d0
    d8a4:	move.l d0,d1
    d8a6:	move.l 1d04e <sceneWidth>,d0
    d8ac:	move.l d1,-(sp)
    d8ae:	move.l d0,-(sp)
    d8b0:	jsr 3a78 <CstReserveBackdrop>
    d8b6:	addq.l #8,sp
}
    d8b8:	rts

0000d8ba <resizeBackdrop>:

BOOL resizeBackdrop (int x, int y) {
    killBackDrop ();
    d8ba:	jsr d740 <killBackDrop>
	killParallax ();
    d8c0:	jsr d768 <killParallax>
	killZBuffer ();
    d8c6:	jsr 8af2 <killZBuffer>
	sceneWidth = x;
    d8cc:	move.l 4(sp),d0
    d8d0:	move.l d0,1d04e <sceneWidth>
	sceneHeight = y;
    d8d6:	move.l 8(sp),d0
    d8da:	move.l d0,1d052 <sceneHeight>
	KPrintF("resizeBackdrop: Reserving new Backdrop");
    d8e0:	pea 19b93 <PutChar+0x1949>
    d8e6:	jsr 177a8 <KPrintF>
    d8ec:	addq.l #4,sp
	return reserveBackdrop();
    d8ee:	jsr d892 <reserveBackdrop>
	KPrintF("resizeBackdrop: Backdrop reserved");	
}
    d8f4:	rts

0000d8f6 <restoreSnapshot>:

BOOL restoreSnapshot (BPTR fp) {
    d8f6:	subq.l #8,sp
	unsigned int picWidth = get2bytes (fp);
    d8f8:	move.l 12(sp),-(sp)
    d8fc:	jsr 6bc <get2bytes>
    d902:	addq.l #4,sp
    d904:	move.l d0,4(sp)
	unsigned int picHeight = get2bytes (fp);
    d908:	move.l 12(sp),-(sp)
    d90c:	jsr 6bc <get2bytes>
    d912:	addq.l #4,sp
    d914:	move.l d0,(sp)

	//Todo: Amigize this?

	return TRUE;
    d916:	moveq #1,d0
}
    d918:	addq.l #8,sp
    d91a:	rts

0000d91c <saveParallaxRecursive>:

void saveParallaxRecursive (struct parallaxLayer * me, BPTR fp) {
    d91c:	   ,-> lea -12(sp),sp
    d920:	   |   move.l a6,-(sp)
    d922:	   |   move.l d2,-(sp)
	if (me) {
    d924:	   |   tst.l 24(sp)
    d928:	,--|-- beq.w d9be <saveParallaxRecursive+0xa2>
		saveParallaxRecursive (me -> next, fp);
    d92c:	|  |   movea.l 24(sp),a0
    d930:	|  |   move.l 42(a0),d0
    d934:	|  |   move.l 28(sp),-(sp)
    d938:	|  |   move.l d0,-(sp)
    d93a:	|  '-- jsr d91c <saveParallaxRecursive>(pc)
    d93e:	|      addq.l #8,sp
		FPutC (fp, 1);
    d940:	|      move.l 28(sp),16(sp)
    d946:	|      moveq #1,d0
    d948:	|      move.l d0,12(sp)
    d94c:	|      move.l 1cfbe <DOSBase>,d0
    d952:	|      movea.l d0,a6
    d954:	|      move.l 16(sp),d1
    d958:	|      move.l 12(sp),d2
    d95c:	|      jsr -312(a6)
    d960:	|      move.l d0,8(sp)
		put2bytes (me->fileNum, fp);
    d964:	|      movea.l 24(sp),a0
    d968:	|      move.w 28(a0),d0
    d96c:	|      move.w d0,d0
    d96e:	|      andi.l #65535,d0
    d974:	|      move.l 28(sp),-(sp)
    d978:	|      move.l d0,-(sp)
    d97a:	|      jsr 8d0 <put2bytes>
    d980:	|      addq.l #8,sp
		put2bytes (me ->fractionX, fp);
    d982:	|      movea.l 24(sp),a0
    d986:	|      move.w 30(a0),d0
    d98a:	|      move.w d0,d0
    d98c:	|      andi.l #65535,d0
    d992:	|      move.l 28(sp),-(sp)
    d996:	|      move.l d0,-(sp)
    d998:	|      jsr 8d0 <put2bytes>
    d99e:	|      addq.l #8,sp
		put2bytes (me->fractionY, fp);
    d9a0:	|      movea.l 24(sp),a0
    d9a4:	|      move.w 32(a0),d0
    d9a8:	|      move.w d0,d0
    d9aa:	|      andi.l #65535,d0
    d9b0:	|      move.l 28(sp),-(sp)
    d9b4:	|      move.l d0,-(sp)
    d9b6:	|      jsr 8d0 <put2bytes>
    d9bc:	|      addq.l #8,sp
	}
}
    d9be:	'----> nop
    d9c0:	       move.l (sp)+,d2
    d9c2:	       movea.l (sp)+,a6
    d9c4:	       lea 12(sp),sp
    d9c8:	       rts

0000d9ca <snapshot>:

BOOL snapshot () {

	KPrintF("snapshot: Not yet implemented on Amiga"); //Todo
    d9ca:	pea 19bba <PutChar+0x1970>
    d9d0:	jsr 177a8 <KPrintF>
    d9d6:	addq.l #4,sp
	return TRUE;
    d9d8:	moveq #1,d0
    d9da:	rts

0000d9dc <findObjectType>:
#include "moreio.h"
#include "support/gcc8_c_support.h"

struct objectType * allObjectTypes = NULL;

struct objectType * findObjectType (int i) {
    d9dc:	             subq.l #4,sp
	struct objectType * huntType = allObjectTypes;
    d9de:	             move.l 1d064 <allObjectTypes>,(sp)

	while (huntType) {
    d9e4:	      ,----- bra.s d9fc <findObjectType+0x20>
		if (huntType -> objectNum == i) return huntType;
    d9e6:	   ,--|----> movea.l (sp),a0
    d9e8:	   |  |      move.l 4(a0),d0
    d9ec:	   |  |      cmp.l 8(sp),d0
    d9f0:	   |  |  ,-- bne.s d9f6 <findObjectType+0x1a>
    d9f2:	   |  |  |   move.l (sp),d0
    d9f4:	,--|--|--|-- bra.s da0c <findObjectType+0x30>
		huntType = huntType -> next;
    d9f6:	|  |  |  '-> movea.l (sp),a0
    d9f8:	|  |  |      move.l 8(a0),(sp)
	while (huntType) {
    d9fc:	|  |  '----> tst.l (sp)
    d9fe:	|  '-------- bne.s d9e6 <findObjectType+0xa>
	}

	return loadObjectType (i);
    da00:	|            move.l 8(sp),-(sp)
    da04:	|            jsr dacc <loadObjectType>
    da0a:	|            addq.l #4,sp
}
    da0c:	'----------> addq.l #4,sp
    da0e:	             rts

0000da10 <getCombinationFunction>:

int getCombinationFunction (int withThis, int thisObject) {
    da10:	             lea -12(sp),sp
	int i, num = 0;
    da14:	             clr.l 4(sp)
	struct objectType * obj = findObjectType (thisObject);
    da18:	             move.l 20(sp),-(sp)
    da1c:	             jsr d9dc <findObjectType>
    da22:	             addq.l #4,sp
    da24:	             move.l d0,(sp)

	for (i = 0; i < obj -> numCom; i ++) {
    da26:	             clr.l 8(sp)
    da2a:	   ,-------- bra.s da60 <getCombinationFunction+0x50>
		if (obj -> allCombis[i].withObj == withThis)
    da2c:	,--|-------> movea.l (sp),a0
    da2e:	|  |         move.l 38(a0),d1
    da32:	|  |         move.l 8(sp),d0
    da36:	|  |         lsl.l #3,d0
    da38:	|  |         movea.l d1,a0
    da3a:	|  |         adda.l d0,a0
    da3c:	|  |         move.l (a0),d0
    da3e:	|  |         cmp.l 16(sp),d0
    da42:	|  |  ,----- bne.s da5c <getCombinationFunction+0x4c>
		{
			num = obj -> allCombis[i].funcNum;
    da44:	|  |  |      movea.l (sp),a0
    da46:	|  |  |      move.l 38(a0),d1
    da4a:	|  |  |      move.l 8(sp),d0
    da4e:	|  |  |      lsl.l #3,d0
    da50:	|  |  |      movea.l d1,a0
    da52:	|  |  |      adda.l d0,a0
    da54:	|  |  |      move.l 4(a0),4(sp)
			break;
    da5a:	|  |  |  ,-- bra.s da6c <getCombinationFunction+0x5c>
	for (i = 0; i < obj -> numCom; i ++) {
    da5c:	|  |  '--|-> addq.l #1,8(sp)
    da60:	|  '-----|-> movea.l (sp),a0
    da62:	|        |   move.l 16(a0),d0
    da66:	|        |   cmp.l 8(sp),d0
    da6a:	'--------|-- bgt.s da2c <getCombinationFunction+0x1c>
		}
	}

	return num;
    da6c:	         '-> move.l 4(sp),d0
}
    da70:	             lea 12(sp),sp
    da74:	             rts

0000da76 <initObjectTypes>:

BOOL initObjectTypes () {
	return TRUE;
    da76:	moveq #1,d0
}
    da78:	rts

0000da7a <loadObjectRef>:

struct objectType * loadObjectRef (BPTR fp) {
    da7a:	subq.l #8,sp
    da7c:	move.l a6,-(sp)
	struct objectType * r = loadObjectType (get2bytes (fp));
    da7e:	move.l 16(sp),-(sp)
    da82:	jsr 6bc <get2bytes>
    da88:	addq.l #4,sp
    da8a:	move.l d0,-(sp)
    da8c:	jsr dacc <loadObjectType>
    da92:	addq.l #4,sp
    da94:	move.l d0,8(sp)
	FreeVec(r -> screenName);
    da98:	movea.l 8(sp),a0
    da9c:	move.l (a0),4(sp)
    daa0:	move.l 1cfb6 <SysBase>,d0
    daa6:	movea.l d0,a6
    daa8:	movea.l 4(sp),a1
    daac:	jsr -690(a6)
	r -> screenName = readString (fp);
    dab0:	move.l 16(sp),-(sp)
    dab4:	jsr b02 <readString>
    daba:	addq.l #4,sp
    dabc:	movea.l 8(sp),a0
    dac0:	move.l d0,(a0)
	return r;
    dac2:	move.l 8(sp),d0
}
    dac6:	movea.l (sp)+,a6
    dac8:	addq.l #8,sp
    daca:	rts

0000dacc <loadObjectType>:

struct objectType * loadObjectType (int i) {
    dacc:	          lea -84(sp),sp
    dad0:	          move.l a6,-(sp)
    dad2:	          move.l a2,-(sp)
    int a, nameNum;
    struct objectType * newType = AllocVec(sizeof(struct objectType), MEMF_ANY);
    dad4:	          moveq #42,d0
    dad6:	          move.l d0,84(sp)
    dada:	          clr.l 80(sp)
    dade:	          move.l 1cfb6 <SysBase>,d0
    dae4:	          movea.l d0,a6
    dae6:	          move.l 84(sp),d0
    daea:	          move.l 80(sp),d1
    daee:	          jsr -684(a6)
    daf2:	          move.l d0,76(sp)
    daf6:	          move.l 76(sp),d0
    dafa:	          move.l d0,72(sp)

    if (newType) {
    dafe:	,-------- beq.w dd78 <loadObjectType+0x2ac>
        if (openObjectSlice(i)) {
    db02:	|         move.l 96(sp),-(sp)
    db06:	|         jsr 7ca4 <openObjectSlice>
    db0c:	|         addq.l #4,sp
    db0e:	|         tst.w d0
    db10:	+-------- beq.w dd78 <loadObjectType+0x2ac>
            nameNum = get2bytes(bigDataFile);
    db14:	|         move.l 1cf9e <bigDataFile>,d0
    db1a:	|         move.l d0,-(sp)
    db1c:	|         jsr 6bc <get2bytes>
    db22:	|         addq.l #4,sp
    db24:	|         move.l d0,68(sp)
            newType->r = (BYTE) FGetC(bigDataFile);
    db28:	|         move.l 1cf9e <bigDataFile>,64(sp)
    db30:	|         move.l 1cfbe <DOSBase>,d0
    db36:	|         movea.l d0,a6
    db38:	|         move.l 64(sp),d1
    db3c:	|         jsr -306(a6)
    db40:	|         move.l d0,60(sp)
    db44:	|         move.l 60(sp),d0
    db48:	|         move.l d0,d0
    db4a:	|         movea.l 72(sp),a0
    db4e:	|         move.b d0,12(a0)
            newType->g = (BYTE) FGetC(bigDataFile);
    db52:	|         move.l 1cf9e <bigDataFile>,56(sp)
    db5a:	|         move.l 1cfbe <DOSBase>,d0
    db60:	|         movea.l d0,a6
    db62:	|         move.l 56(sp),d1
    db66:	|         jsr -306(a6)
    db6a:	|         move.l d0,52(sp)
    db6e:	|         move.l 52(sp),d0
    db72:	|         move.l d0,d0
    db74:	|         movea.l 72(sp),a0
    db78:	|         move.b d0,13(a0)
            newType->b = (BYTE) FGetC(bigDataFile);
    db7c:	|         move.l 1cf9e <bigDataFile>,48(sp)
    db84:	|         move.l 1cfbe <DOSBase>,d0
    db8a:	|         movea.l d0,a6
    db8c:	|         move.l 48(sp),d1
    db90:	|         jsr -306(a6)
    db94:	|         move.l d0,44(sp)
    db98:	|         move.l 44(sp),d0
    db9c:	|         move.l d0,d0
    db9e:	|         movea.l 72(sp),a0
    dba2:	|         move.b d0,14(a0)
            newType->speechGap = FGetC(bigDataFile);
    dba6:	|         move.l 1cf9e <bigDataFile>,40(sp)
    dbae:	|         move.l 1cfbe <DOSBase>,d0
    dbb4:	|         movea.l d0,a6
    dbb6:	|         move.l 40(sp),d1
    dbba:	|         jsr -306(a6)
    dbbe:	|         move.l d0,36(sp)
    dbc2:	|         move.l 36(sp),d0
    dbc6:	|         movea.l 72(sp),a0
    dbca:	|         move.l d0,20(a0)
            newType->walkSpeed = FGetC(bigDataFile);
    dbce:	|         move.l 1cf9e <bigDataFile>,32(sp)
    dbd6:	|         move.l 1cfbe <DOSBase>,d0
    dbdc:	|         movea.l d0,a6
    dbde:	|         move.l 32(sp),d1
    dbe2:	|         jsr -306(a6)
    dbe6:	|         move.l d0,28(sp)
    dbea:	|         move.l 28(sp),d0
    dbee:	|         movea.l 72(sp),a0
    dbf2:	|         move.l d0,24(a0)
            newType->wrapSpeech = get4bytes(bigDataFile);
    dbf6:	|         move.l 1cf9e <bigDataFile>,d0
    dbfc:	|         move.l d0,-(sp)
    dbfe:	|         jsr 718 <get4bytes>
    dc04:	|         addq.l #4,sp
    dc06:	|         movea.l 72(sp),a0
    dc0a:	|         move.l d0,28(a0)
            newType->spinSpeed = get2bytes(bigDataFile);
    dc0e:	|         move.l 1cf9e <bigDataFile>,d0
    dc14:	|         move.l d0,-(sp)
    dc16:	|         jsr 6bc <get2bytes>
    dc1c:	|         addq.l #4,sp
    dc1e:	|         movea.l 72(sp),a0
    dc22:	|         move.l d0,32(a0)

            FGetC(bigDataFile);
    dc26:	|         move.l 1cf9e <bigDataFile>,24(sp)
    dc2e:	|         move.l 1cfbe <DOSBase>,d0
    dc34:	|         movea.l d0,a6
    dc36:	|         move.l 24(sp),d1
    dc3a:	|         jsr -306(a6)
    dc3e:	|         move.l d0,20(sp)
            getFloat(bigDataFile);
    dc42:	|         move.l 1cf9e <bigDataFile>,d0
    dc48:	|         move.l d0,-(sp)
    dc4a:	|         jsr 7d8 <getFloat>
    dc50:	|         addq.l #4,sp
            getFloat(bigDataFile);
    dc52:	|         move.l 1cf9e <bigDataFile>,d0
    dc58:	|         move.l d0,-(sp)
    dc5a:	|         jsr 7d8 <getFloat>
    dc60:	|         addq.l #4,sp

            newType->flags = get2bytes(bigDataFile);
    dc62:	|         move.l 1cf9e <bigDataFile>,d0
    dc68:	|         move.l d0,-(sp)
    dc6a:	|         jsr 6bc <get2bytes>
    dc70:	|         addq.l #4,sp
    dc72:	|         move.l d0,d0
    dc74:	|         movea.l 72(sp),a0
    dc78:	|         move.w d0,36(a0)

            newType->numCom = get2bytes(bigDataFile);
    dc7c:	|         move.l 1cf9e <bigDataFile>,d0
    dc82:	|         move.l d0,-(sp)
    dc84:	|         jsr 6bc <get2bytes>
    dc8a:	|         addq.l #4,sp
    dc8c:	|         movea.l 72(sp),a0
    dc90:	|         move.l d0,16(a0)
            newType->allCombis = (newType->numCom) ? AllocVec(sizeof(struct combination) * newType->numCom, MEMF_ANY) : NULL;
    dc94:	|         movea.l 72(sp),a0
    dc98:	|         move.l 16(a0),d0
    dc9c:	|  ,----- beq.s dcce <loadObjectType+0x202>
    dc9e:	|  |      movea.l 72(sp),a0
    dca2:	|  |      move.l 16(a0),d0
    dca6:	|  |      lsl.l #3,d0
    dca8:	|  |      move.l d0,16(sp)
    dcac:	|  |      clr.l 12(sp)
    dcb0:	|  |      move.l 1cfb6 <SysBase>,d0
    dcb6:	|  |      movea.l d0,a6
    dcb8:	|  |      move.l 16(sp),d0
    dcbc:	|  |      move.l 12(sp),d1
    dcc0:	|  |      jsr -684(a6)
    dcc4:	|  |      move.l d0,8(sp)
    dcc8:	|  |      move.l 8(sp),d0
    dccc:	|  |  ,-- bra.s dcd0 <loadObjectType+0x204>
    dcce:	|  '--|-> moveq #0,d0
    dcd0:	|     '-> movea.l 72(sp),a0
    dcd4:	|         move.l d0,38(a0)

            for (a = 0; a < newType->numCom; a++) {
    dcd8:	|         clr.l 88(sp)
    dcdc:	|     ,-- bra.s dd2c <loadObjectType+0x260>
                newType->allCombis[a].withObj = get2bytes(bigDataFile);
    dcde:	|  ,--|-> move.l 1cf9e <bigDataFile>,d1
    dce4:	|  |  |   movea.l 72(sp),a0
    dce8:	|  |  |   movea.l 38(a0),a0
    dcec:	|  |  |   move.l 88(sp),d0
    dcf0:	|  |  |   lsl.l #3,d0
    dcf2:	|  |  |   lea (0,a0,d0.l),a2
    dcf6:	|  |  |   move.l d1,-(sp)
    dcf8:	|  |  |   jsr 6bc <get2bytes>
    dcfe:	|  |  |   addq.l #4,sp
    dd00:	|  |  |   move.l d0,(a2)
                newType->allCombis[a].funcNum = get2bytes(bigDataFile);
    dd02:	|  |  |   move.l 1cf9e <bigDataFile>,d1
    dd08:	|  |  |   movea.l 72(sp),a0
    dd0c:	|  |  |   movea.l 38(a0),a0
    dd10:	|  |  |   move.l 88(sp),d0
    dd14:	|  |  |   lsl.l #3,d0
    dd16:	|  |  |   lea (0,a0,d0.l),a2
    dd1a:	|  |  |   move.l d1,-(sp)
    dd1c:	|  |  |   jsr 6bc <get2bytes>
    dd22:	|  |  |   addq.l #4,sp
    dd24:	|  |  |   move.l d0,4(a2)
            for (a = 0; a < newType->numCom; a++) {
    dd28:	|  |  |   addq.l #1,88(sp)
    dd2c:	|  |  '-> movea.l 72(sp),a0
    dd30:	|  |      move.l 16(a0),d0
    dd34:	|  |      cmp.l 88(sp),d0
    dd38:	|  '----- bgt.s dcde <loadObjectType+0x212>
            }
            finishAccess();
    dd3a:	|         jsr 7ad4 <finishAccess>
            newType->screenName = getNumberedString(nameNum);
    dd40:	|         move.l 68(sp),-(sp)
    dd44:	|         jsr 7ade <getNumberedString>
    dd4a:	|         addq.l #4,sp
    dd4c:	|         movea.l 72(sp),a0
    dd50:	|         move.l d0,(a0)
            newType->objectNum = i;
    dd52:	|         movea.l 72(sp),a0
    dd56:	|         move.l 96(sp),4(a0)
            newType->next = allObjectTypes;
    dd5c:	|         move.l 1d064 <allObjectTypes>,d0
    dd62:	|         movea.l 72(sp),a0
    dd66:	|         move.l d0,8(a0)
            allObjectTypes = newType;
    dd6a:	|         move.l 72(sp),1d064 <allObjectTypes>
            return newType;
    dd72:	|         move.l 72(sp),d0
    dd76:	|     ,-- bra.s dd7a <loadObjectType+0x2ae>
        }
    }
    return NULL;
    dd78:	'-----|-> moveq #0,d0
}
    dd7a:	      '-> movea.l (sp)+,a2
    dd7c:	          movea.l (sp)+,a6
    dd7e:	          lea 84(sp),sp
    dd82:	          rts

0000dd84 <removeObjectType>:


void removeObjectType (struct objectType * oT) {
    dd84:	             lea -16(sp),sp
    dd88:	             move.l a6,-(sp)
	struct objectType * * huntRegion = &allObjectTypes;
    dd8a:	             move.l #118884,16(sp)

	while (* huntRegion) {
    dd92:	   ,-------- bra.s de06 <removeObjectType+0x82>
		if ((* huntRegion) == oT) {
    dd94:	,--|-------> movea.l 16(sp),a0
    dd98:	|  |         move.l (a0),d0
    dd9a:	|  |         cmp.l 24(sp),d0
    dd9e:	|  |  ,----- bne.s ddf8 <removeObjectType+0x74>
//			FILE * debuggy2 = fopen ("debug.txt", "at");
//			fprintf (debuggy2, "DELETING OBJECT TYPE: %p %s\n", oT, oT -> screenName);
//			fclose (debuggy2);

			* huntRegion = oT -> next;
    dda0:	|  |  |      movea.l 24(sp),a0
    dda4:	|  |  |      move.l 8(a0),d0
    dda8:	|  |  |      movea.l 16(sp),a0
    ddac:	|  |  |      move.l d0,(a0)
			FreeVec(oT -> allCombis);
    ddae:	|  |  |      movea.l 24(sp),a0
    ddb2:	|  |  |      move.l 38(a0),12(sp)
    ddb8:	|  |  |      move.l 1cfb6 <SysBase>,d0
    ddbe:	|  |  |      movea.l d0,a6
    ddc0:	|  |  |      movea.l 12(sp),a1
    ddc4:	|  |  |      jsr -690(a6)
			FreeVec(oT -> screenName);
    ddc8:	|  |  |      movea.l 24(sp),a0
    ddcc:	|  |  |      move.l (a0),8(sp)
    ddd0:	|  |  |      move.l 1cfb6 <SysBase>,d0
    ddd6:	|  |  |      movea.l d0,a6
    ddd8:	|  |  |      movea.l 8(sp),a1
    dddc:	|  |  |      jsr -690(a6)
			FreeVec(oT);
    dde0:	|  |  |      move.l 24(sp),4(sp)
    dde6:	|  |  |      move.l 1cfb6 <SysBase>,d0
    ddec:	|  |  |      movea.l d0,a6
    ddee:	|  |  |      movea.l 4(sp),a1
    ddf2:	|  |  |      jsr -690(a6)
			return;
    ddf6:	|  |  |  ,-- bra.s de1c <removeObjectType+0x98>
		} else {
			huntRegion = & ((* huntRegion) -> next);
    ddf8:	|  |  '--|-> movea.l 16(sp),a0
    ddfc:	|  |     |   move.l (a0),d0
    ddfe:	|  |     |   move.l d0,d1
    de00:	|  |     |   addq.l #8,d1
    de02:	|  |     |   move.l d1,16(sp)
	while (* huntRegion) {
    de06:	|  '-----|-> movea.l 16(sp),a0
    de0a:	|        |   move.l (a0),d0
    de0c:	'--------|-- bne.s dd94 <removeObjectType+0x10>
		}
	}
	KPrintF("Can't delete object type: bad pointer");
    de0e:	         |   pea 19be1 <PutChar+0x1997>
    de14:	         |   jsr 177a8 <KPrintF>
    de1a:	         |   addq.l #4,sp
}
    de1c:	         '-> movea.l (sp)+,a6
    de1e:	             lea 16(sp),sp
    de22:	             rts

0000de24 <saveObjectRef>:

void saveObjectRef (struct objectType * r, BPTR fp) {
	put2bytes (r -> objectNum, fp);
    de24:	movea.l 4(sp),a0
    de28:	move.l 4(a0),d0
    de2c:	move.l 8(sp),-(sp)
    de30:	move.l d0,-(sp)
    de32:	jsr 8d0 <put2bytes>
    de38:	addq.l #8,sp
	writeString (r -> screenName, fp);
    de3a:	movea.l 4(sp),a0
    de3e:	move.l (a0),d0
    de40:	move.l 8(sp),-(sp)
    de44:	move.l d0,-(sp)
    de46:	jsr bd8 <writeString>
    de4c:	addq.l #8,sp
    de4e:	nop
    de50:	rts

0000de52 <fileToStack>:

char encode1 = 0;
char encode2 = 0;
unsigned short saveEncoding = FALSE;

BOOL fileToStack(char *filename, struct stackHandler *sH) {
    de52:	                         lea -112(sp),sp
    de56:	                         move.l a6,-(sp)
    de58:	                         move.l d2,-(sp)
    struct variable stringVar;
    stringVar.varType = SVT_NULL;
    de5a:	                         clr.l 10(sp)
    const char *checker = saveEncoding ? "[Custom data (encoded)]\r\n" : "[Custom data (ASCII)]\n";
    de5e:	                         move.w 1d06a <saveEncoding>,d0
    de64:	                  ,----- beq.s de6e <fileToStack+0x1c>
    de66:	                  |      move.l #105479,d0
    de6c:	                  |  ,-- bra.s de74 <fileToStack+0x22>
    de6e:	                  '--|-> move.l #105505,d0
    de74:	                     '-> move.l d0,116(sp)

    BPTR fp = Open(filename, MODE_OLDFILE);
    de78:	                         move.l 124(sp),112(sp)
    de7e:	                         move.l #1005,108(sp)
    de86:	                         move.l 1cfbe <DOSBase>,d0
    de8c:	                         movea.l d0,a6
    de8e:	                         move.l 112(sp),d1
    de92:	                         move.l 108(sp),d2
    de96:	                         jsr -30(a6)
    de9a:	                         move.l d0,104(sp)
    de9e:	                         move.l 104(sp),d0
    dea2:	                         move.l d0,100(sp)
    if (!fp) {
    dea6:	                     ,-- bne.s dec0 <fileToStack+0x6e>
        KPrintF("No such file", filename);
    dea8:	                     |   move.l 124(sp),-(sp)
    deac:	                     |   pea 19c38 <PutChar+0x19ee>
    deb2:	                     |   jsr 177a8 <KPrintF>
    deb8:	                     |   addq.l #8,sp
        return FALSE;
    deba:	                     |   clr.w d0
    debc:	,--------------------|-- bra.w e1b6 <fileToStack+0x364>
    }

    encode1 = (unsigned char)saveEncoding & 255;
    dec0:	|                    '-> move.w 1d06a <saveEncoding>,d0
    dec6:	|                        move.l d0,d0
    dec8:	|                        move.b d0,1d068 <encode1>
    encode2 = (unsigned char)(saveEncoding >> 8);
    dece:	|                        move.w 1d06a <saveEncoding>,d0
    ded4:	|                        lsr.w #8,d0
    ded6:	|                        move.l d0,d0
    ded8:	|                        move.b d0,1d069 <encode2>

    while (*checker) {
    dede:	|                 ,----- bra.s df42 <fileToStack+0xf0>
        if (FGetC(fp) != *checker) {
    dee0:	|              ,--|----> move.l 100(sp),30(sp)
    dee6:	|              |  |      move.l 1cfbe <DOSBase>,d0
    deec:	|              |  |      movea.l d0,a6
    deee:	|              |  |      move.l 30(sp),d1
    def2:	|              |  |      jsr -306(a6)
    def6:	|              |  |      move.l d0,26(sp)
    defa:	|              |  |      move.l 26(sp),d1
    defe:	|              |  |      movea.l 116(sp),a0
    df02:	|              |  |      move.b (a0),d0
    df04:	|              |  |      ext.w d0
    df06:	|              |  |      movea.w d0,a0
    df08:	|              |  |      cmpa.l d1,a0
    df0a:	|              |  |  ,-- beq.s df3e <fileToStack+0xec>
            Close(fp);
    df0c:	|              |  |  |   move.l 100(sp),22(sp)
    df12:	|              |  |  |   move.l 1cfbe <DOSBase>,d0
    df18:	|              |  |  |   movea.l d0,a6
    df1a:	|              |  |  |   move.l 22(sp),d1
    df1e:	|              |  |  |   jsr -36(a6)
    df22:	|              |  |  |   move.l d0,18(sp)
            KPrintF(LOAD_ERROR "This isn't a SLUDGE custom data file:", filename);
    df26:	|              |  |  |   move.l 124(sp),-(sp)
    df2a:	|              |  |  |   pea 19c45 <PutChar+0x19fb>
    df30:	|              |  |  |   jsr 177a8 <KPrintF>
    df36:	|              |  |  |   addq.l #8,sp
            return FALSE;
    df38:	|              |  |  |   clr.w d0
    df3a:	+--------------|--|--|-- bra.w e1b6 <fileToStack+0x364>
        }
        checker++;
    df3e:	|              |  |  '-> addq.l #1,116(sp)
    while (*checker) {
    df42:	|              |  '----> movea.l 116(sp),a0
    df46:	|              |         move.b (a0),d0
    df48:	|              '-------- bne.s dee0 <fileToStack+0x8e>
    }

    if (saveEncoding) {
    df4a:	|                        move.w 1d06a <saveEncoding>,d0
    df50:	|  ,-------------------- beq.s dfc4 <fileToStack+0x172>
        char *checker = readStringEncoded(fp);
    df52:	|  |                     move.l 100(sp),-(sp)
    df56:	|  |                     jsr e1c0 <readStringEncoded>
    df5c:	|  |                     addq.l #4,sp
    df5e:	|  |                     move.l d0,96(sp)
        if (strcmp(checker, "UN�LO�CKED")) {
    df62:	|  |                     pea 19c86 <PutChar+0x1a3c>
    df68:	|  |                     move.l 100(sp),-(sp)
    df6c:	|  |                     jsr 14174 <strcmp>
    df72:	|  |                     addq.l #8,sp
    df74:	|  |                     tst.l d0
    df76:	|  |                 ,-- beq.s dfaa <fileToStack+0x158>
            Close(fp);
    df78:	|  |                 |   move.l 100(sp),88(sp)
    df7e:	|  |                 |   move.l 1cfbe <DOSBase>,d0
    df84:	|  |                 |   movea.l d0,a6
    df86:	|  |                 |   move.l 88(sp),d1
    df8a:	|  |                 |   jsr -36(a6)
    df8e:	|  |                 |   move.l d0,84(sp)
            KPrintF(LOAD_ERROR "The current file encoding setting does not match the encoding setting used when this file was created:", filename);
    df92:	|  |                 |   move.l 124(sp),-(sp)
    df96:	|  |                 |   pea 19c95 <PutChar+0x1a4b>
    df9c:	|  |                 |   jsr 177a8 <KPrintF>
    dfa2:	|  |                 |   addq.l #8,sp
            return FALSE;
    dfa4:	|  |                 |   clr.w d0
    dfa6:	+--|-----------------|-- bra.w e1b6 <fileToStack+0x364>
        }
        FreeVec(checker);
    dfaa:	|  |                 '-> move.l 96(sp),92(sp)
    dfb0:	|  |                     move.l 1cfb6 <SysBase>,d0
    dfb6:	|  |                     movea.l d0,a6
    dfb8:	|  |                     movea.l 92(sp),a1
    dfbc:	|  |                     jsr -690(a6)
        checker = NULL;
    dfc0:	|  |                     clr.l 96(sp)
    }

    for (;;) {
        if (saveEncoding) {
    dfc4:	|  >-------------------> move.w 1d06a <saveEncoding>,d0
    dfca:	|  |     ,-------------- beq.w e0fe <fileToStack+0x2ac>
            LONG tmp = FGetC(fp) ^ encode1;
    dfce:	|  |     |               move.l 100(sp),76(sp)
    dfd4:	|  |     |               move.l 1cfbe <DOSBase>,d0
    dfda:	|  |     |               movea.l d0,a6
    dfdc:	|  |     |               move.l 76(sp),d1
    dfe0:	|  |     |               jsr -306(a6)
    dfe4:	|  |     |               move.l d0,72(sp)
    dfe8:	|  |     |               move.l 72(sp),d0
    dfec:	|  |     |               move.b 1d068 <encode1>,d1
    dff2:	|  |     |               ext.w d1
    dff4:	|  |     |               ext.l d1
    dff6:	|  |     |               move.l d0,d2
    dff8:	|  |     |               eor.l d1,d2
    dffa:	|  |     |               move.l d2,68(sp)

            if (tmp == -1) break;
    dffe:	|  |     |               moveq #-1,d0
    e000:	|  |     |               cmp.l 68(sp),d0
    e004:	|  |  ,--|-------------- beq.w e194 <fileToStack+0x342>

            char i = (char) tmp;
    e008:	|  |  |  |               move.b 71(sp),67(sp)

            switch (i) {
    e00e:	|  |  |  |               move.b 67(sp),d0
    e012:	|  |  |  |               ext.w d0
    e014:	|  |  |  |               movea.w d0,a0
    e016:	|  |  |  |               moveq #2,d2
    e018:	|  |  |  |               cmp.l a0,d2
    e01a:	|  |  |  |     ,-------- beq.s e096 <fileToStack+0x244>
    e01c:	|  |  |  |     |         moveq #2,d0
    e01e:	|  |  |  |     |         cmp.l a0,d0
    e020:	|  |  |  |  ,--|-------- blt.w e0cc <fileToStack+0x27a>
    e024:	|  |  |  |  |  |         cmpa.w #0,a0
    e028:	|  |  |  |  |  |     ,-- beq.s e034 <fileToStack+0x1e2>
    e02a:	|  |  |  |  |  |     |   moveq #1,d2
    e02c:	|  |  |  |  |  |     |   cmp.l a0,d2
    e02e:	|  |  |  |  |  |  ,--|-- beq.s e070 <fileToStack+0x21e>
    e030:	|  |  |  |  +--|--|--|-- bra.w e0cc <fileToStack+0x27a>
                case 0: {
                    char *g = readStringEncoded(fp);
    e034:	|  |  |  |  |  |  |  '-> move.l 100(sp),-(sp)
    e038:	|  |  |  |  |  |  |      jsr e1c0 <readStringEncoded>
    e03e:	|  |  |  |  |  |  |      addq.l #4,sp
    e040:	|  |  |  |  |  |  |      move.l d0,54(sp)
                    makeTextVar(&stringVar, g);
    e044:	|  |  |  |  |  |  |      move.l 54(sp),-(sp)
    e048:	|  |  |  |  |  |  |      lea 14(sp),a0
    e04c:	|  |  |  |  |  |  |      move.l a0,-(sp)
    e04e:	|  |  |  |  |  |  |      jsr 14eea <makeTextVar>
    e054:	|  |  |  |  |  |  |      addq.l #8,sp
                    FreeVec(g);
    e056:	|  |  |  |  |  |  |      move.l 54(sp),50(sp)
    e05c:	|  |  |  |  |  |  |      move.l 1cfb6 <SysBase>,d0
    e062:	|  |  |  |  |  |  |      movea.l d0,a6
    e064:	|  |  |  |  |  |  |      movea.l 50(sp),a1
    e068:	|  |  |  |  |  |  |      jsr -690(a6)
                }
                break;
    e06c:	|  |  |  |  |  |  |  ,-- bra.w e124 <fileToStack+0x2d2>

                case 1:
                    setVariable(&stringVar, SVT_INT, get4bytes(fp));
    e070:	|  |  |  |  |  |  '--|-> move.l 100(sp),-(sp)
    e074:	|  |  |  |  |  |     |   jsr 718 <get4bytes>
    e07a:	|  |  |  |  |  |     |   addq.l #4,sp
    e07c:	|  |  |  |  |  |     |   move.l d0,-(sp)
    e07e:	|  |  |  |  |  |     |   pea 1 <_start+0x1>
    e082:	|  |  |  |  |  |     |   lea 18(sp),a0
    e086:	|  |  |  |  |  |     |   move.l a0,-(sp)
    e088:	|  |  |  |  |  |     |   jsr 155ba <setVariable>
    e08e:	|  |  |  |  |  |     |   lea 12(sp),sp
                    break;
    e092:	|  |  |  |  |  |     +-- bra.w e124 <fileToStack+0x2d2>

                case 2:
                    setVariable(&stringVar, SVT_INT, FGetC(fp));
    e096:	|  |  |  |  |  '-----|-> move.l 100(sp),62(sp)
    e09c:	|  |  |  |  |        |   move.l 1cfbe <DOSBase>,d0
    e0a2:	|  |  |  |  |        |   movea.l d0,a6
    e0a4:	|  |  |  |  |        |   move.l 62(sp),d1
    e0a8:	|  |  |  |  |        |   jsr -306(a6)
    e0ac:	|  |  |  |  |        |   move.l d0,58(sp)
    e0b0:	|  |  |  |  |        |   move.l 58(sp),d0
    e0b4:	|  |  |  |  |        |   move.l d0,-(sp)
    e0b6:	|  |  |  |  |        |   pea 1 <_start+0x1>
    e0ba:	|  |  |  |  |        |   lea 18(sp),a0
    e0be:	|  |  |  |  |        |   move.l a0,-(sp)
    e0c0:	|  |  |  |  |        |   jsr 155ba <setVariable>
    e0c6:	|  |  |  |  |        |   lea 12(sp),sp
                    break;
    e0ca:	|  |  |  |  |        +-- bra.s e124 <fileToStack+0x2d2>

                default:
                    KPrintF(LOAD_ERROR "Corrupt custom data file:", filename);
    e0cc:	|  |  |  |  '--------|-> move.l 124(sp),-(sp)
    e0d0:	|  |  |  |           |   pea 19d17 <PutChar+0x1acd>
    e0d6:	|  |  |  |           |   jsr 177a8 <KPrintF>
    e0dc:	|  |  |  |           |   addq.l #8,sp
                    Close(fp);
    e0de:	|  |  |  |           |   move.l 100(sp),46(sp)
    e0e4:	|  |  |  |           |   move.l 1cfbe <DOSBase>,d0
    e0ea:	|  |  |  |           |   movea.l d0,a6
    e0ec:	|  |  |  |           |   move.l 46(sp),d1
    e0f0:	|  |  |  |           |   jsr -36(a6)
    e0f4:	|  |  |  |           |   move.l d0,42(sp)
                    return FALSE;
    e0f8:	|  |  |  |           |   clr.w d0
    e0fa:	+--|--|--|-----------|-- bra.w e1b6 <fileToStack+0x364>
            }
        } else {
            char *line = readTextPlain(fp);
    e0fe:	|  |  |  '-----------|-> move.l 100(sp),-(sp)
    e102:	|  |  |              |   jsr e286 <readTextPlain>
    e108:	|  |  |              |   addq.l #4,sp
    e10a:	|  |  |              |   move.l d0,80(sp)
            if (!line) break;
    e10e:	|  |  |        ,-----|-- beq.w e198 <fileToStack+0x346>
            makeTextVar(&stringVar, line);
    e112:	|  |  |        |     |   move.l 80(sp),-(sp)
    e116:	|  |  |        |     |   lea 14(sp),a0
    e11a:	|  |  |        |     |   move.l a0,-(sp)
    e11c:	|  |  |        |     |   jsr 14eea <makeTextVar>
    e122:	|  |  |        |     |   addq.l #8,sp
        }

        if (sH->first == NULL) {
    e124:	|  |  |        |     '-> movea.l 128(sp),a0
    e128:	|  |  |        |         move.l (a0),d0
    e12a:	|  |  |        |  ,----- bne.s e15a <fileToStack+0x308>
            // Adds to the TOP of the array... oops!
            if (!addVarToStackQuick(&stringVar, &sH->first)) return FALSE;
    e12c:	|  |  |        |  |      move.l 128(sp),d0
    e130:	|  |  |        |  |      move.l d0,-(sp)
    e132:	|  |  |        |  |      lea 14(sp),a0
    e136:	|  |  |        |  |      move.l a0,-(sp)
    e138:	|  |  |        |  |      jsr 1458a <addVarToStackQuick>
    e13e:	|  |  |        |  |      addq.l #8,sp
    e140:	|  |  |        |  |      tst.w d0
    e142:	|  |  |        |  |  ,-- bne.s e148 <fileToStack+0x2f6>
    e144:	|  |  |        |  |  |   clr.w d0
    e146:	+--|--|--------|--|--|-- bra.s e1b6 <fileToStack+0x364>
            sH->last = sH->first;
    e148:	|  |  |        |  |  '-> movea.l 128(sp),a0
    e14c:	|  |  |        |  |      move.l (a0),d0
    e14e:	|  |  |        |  |      movea.l 128(sp),a0
    e152:	|  |  |        |  |      move.l d0,4(a0)
    e156:	|  +--|--------|--|----- bra.w dfc4 <fileToStack+0x172>
        } else {
            // Adds to the END of the array... much better
            if (!addVarToStackQuick(&stringVar, &sH->last->next)) return FALSE;
    e15a:	|  |  |        |  '----> movea.l 128(sp),a0
    e15e:	|  |  |        |         move.l 4(a0),d0
    e162:	|  |  |        |         addq.l #8,d0
    e164:	|  |  |        |         move.l d0,-(sp)
    e166:	|  |  |        |         lea 14(sp),a0
    e16a:	|  |  |        |         move.l a0,-(sp)
    e16c:	|  |  |        |         jsr 1458a <addVarToStackQuick>
    e172:	|  |  |        |         addq.l #8,sp
    e174:	|  |  |        |         tst.w d0
    e176:	|  |  |        |     ,-- bne.s e17c <fileToStack+0x32a>
    e178:	|  |  |        |     |   clr.w d0
    e17a:	+--|--|--------|-----|-- bra.s e1b6 <fileToStack+0x364>
            sH->last = sH->last->next;
    e17c:	|  |  |        |     '-> movea.l 128(sp),a0
    e180:	|  |  |        |         movea.l 4(a0),a0
    e184:	|  |  |        |         move.l 8(a0),d0
    e188:	|  |  |        |         movea.l 128(sp),a0
    e18c:	|  |  |        |         move.l d0,4(a0)
        if (saveEncoding) {
    e190:	|  '--|--------|-------- bra.w dfc4 <fileToStack+0x172>
            if (tmp == -1) break;
    e194:	|     '--------|-------> nop
    e196:	|              |     ,-- bra.s e19a <fileToStack+0x348>
            if (!line) break;
    e198:	|              '-----|-> nop
        }
    }
    Close(fp);
    e19a:	|                    '-> move.l 100(sp),38(sp)
    e1a0:	|                        move.l 1cfbe <DOSBase>,d0
    e1a6:	|                        movea.l d0,a6
    e1a8:	|                        move.l 38(sp),d1
    e1ac:	|                        jsr -36(a6)
    e1b0:	|                        move.l d0,34(sp)
    return TRUE;
    e1b4:	|                        moveq #1,d0
}
    e1b6:	'----------------------> move.l (sp)+,d2
    e1b8:	                         movea.l (sp)+,a6
    e1ba:	                         lea 112(sp),sp
    e1be:	                         rts

0000e1c0 <readStringEncoded>:

char *readStringEncoded(BPTR fp) {
    e1c0:	          lea -32(sp),sp
    e1c4:	          move.l a6,-(sp)
    e1c6:	          move.l d2,-(sp)
    int a, len = get2bytes(fp);
    e1c8:	          move.l 44(sp),-(sp)
    e1cc:	          jsr 6bc <get2bytes>
    e1d2:	          addq.l #4,sp
    e1d4:	          move.l d0,32(sp)
    char *s = AllocVec(len + 1, MEMF_ANY);
    e1d8:	          move.l 32(sp),d0
    e1dc:	          addq.l #1,d0
    e1de:	          move.l d0,28(sp)
    e1e2:	          clr.l 24(sp)
    e1e6:	          move.l 1cfb6 <SysBase>,d0
    e1ec:	          movea.l d0,a6
    e1ee:	          move.l 28(sp),d0
    e1f2:	          move.l 24(sp),d1
    e1f6:	          jsr -684(a6)
    e1fa:	          move.l d0,20(sp)
    e1fe:	          move.l 20(sp),d0
    e202:	          move.l d0,16(sp)
    if (!s) return NULL;
    e206:	      ,-- bne.s e20c <readStringEncoded+0x4c>
    e208:	      |   moveq #0,d0
    e20a:	,-----|-- bra.s e27c <readStringEncoded+0xbc>
    for (a = 0; a < len; a++) {
    e20c:	|     '-> clr.l 36(sp)
    e210:	|     ,-- bra.s e262 <readStringEncoded+0xa2>
        s[a] = (char)(FGetC(fp) ^ encode1);
    e212:	|  ,--|-> move.l 44(sp),12(sp)
    e218:	|  |  |   move.l 1cfbe <DOSBase>,d0
    e21e:	|  |  |   movea.l d0,a6
    e220:	|  |  |   move.l 12(sp),d1
    e224:	|  |  |   jsr -306(a6)
    e228:	|  |  |   move.l d0,8(sp)
    e22c:	|  |  |   move.l 8(sp),d0
    e230:	|  |  |   move.l d0,d1
    e232:	|  |  |   move.b 1d068 <encode1>,d2
    e238:	|  |  |   move.l 36(sp),d0
    e23c:	|  |  |   movea.l 16(sp),a0
    e240:	|  |  |   adda.l d0,a0
    e242:	|  |  |   move.b d1,d0
    e244:	|  |  |   eor.b d2,d0
    e246:	|  |  |   move.b d0,(a0)
        encode1 += encode2;
    e248:	|  |  |   move.b 1d068 <encode1>,d0
    e24e:	|  |  |   move.b d0,d1
    e250:	|  |  |   move.b 1d069 <encode2>,d0
    e256:	|  |  |   add.b d1,d0
    e258:	|  |  |   move.b d0,1d068 <encode1>
    for (a = 0; a < len; a++) {
    e25e:	|  |  |   addq.l #1,36(sp)
    e262:	|  |  '-> move.l 36(sp),d0
    e266:	|  |      cmp.l 32(sp),d0
    e26a:	|  '----- blt.s e212 <readStringEncoded+0x52>
    }
    s[len] = 0;
    e26c:	|         move.l 32(sp),d0
    e270:	|         movea.l 16(sp),a0
    e274:	|         adda.l d0,a0
    e276:	|         clr.b (a0)
    return s;
    e278:	|         move.l 16(sp),d0
}
    e27c:	'-------> move.l (sp)+,d2
    e27e:	          movea.l (sp)+,a6
    e280:	          lea 32(sp),sp
    e284:	          rts

0000e286 <readTextPlain>:

char *readTextPlain(BPTR fp) {
    e286:	             lea -104(sp),sp
    e28a:	             movem.l d2-d4/a6,-(sp)
    ULONG startPos;
    int stringSize = 0;
    e28e:	             clr.l 116(sp)
    BOOL keepGoing = TRUE;
    e292:	             move.w #1,114(sp)
    char gotChar;
    char *reply;

    startPos = Seek(fp, 0, OFFSET_CURRENT);
    e298:	             move.l 124(sp),106(sp)
    e29e:	             clr.l 102(sp)
    e2a2:	             clr.l 98(sp)
    e2a6:	             move.l 1cfbe <DOSBase>,d0
    e2ac:	             movea.l d0,a6
    e2ae:	             move.l 106(sp),d1
    e2b2:	             move.l 102(sp),d2
    e2b6:	             move.l 98(sp),d3
    e2ba:	             jsr -66(a6)
    e2be:	             move.l d0,94(sp)
    e2c2:	             move.l 94(sp),d0
    e2c6:	             move.l d0,90(sp)

    LONG tmp;
    while (keepGoing) {
    e2ca:	   ,-------- bra.s e30e <readTextPlain+0x88>
        tmp = FGetC(fp);
    e2cc:	,--|-------> move.l 124(sp),22(sp)
    e2d2:	|  |         move.l 1cfbe <DOSBase>,d0
    e2d8:	|  |         movea.l d0,a6
    e2da:	|  |         move.l 22(sp),d1
    e2de:	|  |         jsr -306(a6)
    e2e2:	|  |         move.l d0,18(sp)
    e2e6:	|  |         move.l 18(sp),d0
    e2ea:	|  |         move.l d0,110(sp)
        char gotChar = (char) tmp;
    e2ee:	|  |         move.b 113(sp),17(sp)
        if (gotChar == '\n' || tmp == -1) {
    e2f4:	|  |         cmpi.b #10,17(sp)
    e2fa:	|  |  ,----- beq.s e304 <readTextPlain+0x7e>
    e2fc:	|  |  |      moveq #-1,d0
    e2fe:	|  |  |      cmp.l 110(sp),d0
    e302:	|  |  |  ,-- bne.s e30a <readTextPlain+0x84>
            keepGoing = FALSE;
    e304:	|  |  '--|-> clr.w 114(sp)
    e308:	|  +-----|-- bra.s e30e <readTextPlain+0x88>
        } else {
            stringSize++;
    e30a:	|  |     '-> addq.l #1,116(sp)
    while (keepGoing) {
    e30e:	|  '-------> tst.w 114(sp)
    e312:	'----------- bne.s e2cc <readTextPlain+0x46>
        }
    }

    if ((stringSize == 0) && tmp == -1) {
    e314:	             tst.l 116(sp)
    e318:	         ,-- bne.s e328 <readTextPlain+0xa2>
    e31a:	         |   moveq #-1,d0
    e31c:	         |   cmp.l 110(sp),d0
    e320:	         +-- bne.s e328 <readTextPlain+0xa2>
        return NULL;
    e322:	         |   moveq #0,d0
    e324:	      ,--|-- bra.w e40e <readTextPlain+0x188>
    } else {
        Seek(fp, startPos, OFFSET_BEGINNING);
    e328:	      |  '-> move.l 124(sp),86(sp)
    e32e:	      |      move.l 90(sp),82(sp)
    e334:	      |      moveq #-1,d0
    e336:	      |      move.l d0,78(sp)
    e33a:	      |      move.l 1cfbe <DOSBase>,d0
    e340:	      |      movea.l d0,a6
    e342:	      |      move.l 86(sp),d1
    e346:	      |      move.l 82(sp),d2
    e34a:	      |      move.l 78(sp),d3
    e34e:	      |      jsr -66(a6)
    e352:	      |      move.l d0,74(sp)
        reply = AllocVec(stringSize + 1, MEMF_ANY);
    e356:	      |      move.l 116(sp),d0
    e35a:	      |      addq.l #1,d0
    e35c:	      |      move.l d0,70(sp)
    e360:	      |      clr.l 66(sp)
    e364:	      |      move.l 1cfb6 <SysBase>,d0
    e36a:	      |      movea.l d0,a6
    e36c:	      |      move.l 70(sp),d0
    e370:	      |      move.l 66(sp),d1
    e374:	      |      jsr -684(a6)
    e378:	      |      move.l d0,62(sp)
    e37c:	      |      move.l 62(sp),d0
    e380:	      |      move.l d0,58(sp)
        if (reply == NULL) return NULL;
    e384:	      |  ,-- bne.s e38c <readTextPlain+0x106>
    e386:	      |  |   moveq #0,d0
    e388:	      +--|-- bra.w e40e <readTextPlain+0x188>
        int bytesRead = FRead(fp, reply, 1, stringSize);
    e38c:	      |  '-> move.l 124(sp),54(sp)
    e392:	      |      move.l 58(sp),50(sp)
    e398:	      |      moveq #1,d0
    e39a:	      |      move.l d0,46(sp)
    e39e:	      |      move.l 116(sp),42(sp)
    e3a4:	      |      move.l 1cfbe <DOSBase>,d0
    e3aa:	      |      movea.l d0,a6
    e3ac:	      |      move.l 54(sp),d1
    e3b0:	      |      move.l 50(sp),d2
    e3b4:	      |      move.l 46(sp),d3
    e3b8:	      |      move.l 42(sp),d4
    e3bc:	      |      jsr -324(a6)
    e3c0:	      |      move.l d0,38(sp)
    e3c4:	      |      move.l 38(sp),d0
    e3c8:	      |      move.l d0,34(sp)
        if (bytesRead != stringSize) {
    e3cc:	      |      move.l 34(sp),d0
    e3d0:	      |      cmp.l 116(sp),d0
    e3d4:	      |  ,-- beq.s e3e4 <readTextPlain+0x15e>
            KPrintF("Reading error in readTextPlain.\n");
    e3d6:	      |  |   pea 19d4c <PutChar+0x1b02>
    e3dc:	      |  |   jsr 177a8 <KPrintF>
    e3e2:	      |  |   addq.l #4,sp
        }
        FGetC(fp); // Skip the newline character
    e3e4:	      |  '-> move.l 124(sp),30(sp)
    e3ea:	      |      move.l 1cfbe <DOSBase>,d0
    e3f0:	      |      movea.l d0,a6
    e3f2:	      |      move.l 30(sp),d1
    e3f6:	      |      jsr -306(a6)
    e3fa:	      |      move.l d0,26(sp)
        reply[stringSize] = 0;
    e3fe:	      |      move.l 116(sp),d0
    e402:	      |      movea.l 58(sp),a0
    e406:	      |      adda.l d0,a0
    e408:	      |      clr.b (a0)
    }

    return reply;
    e40a:	      |      move.l 58(sp),d0
}
    e40e:	      '----> movem.l (sp)+,d2-d4/a6
    e412:	             lea 104(sp),sp
    e416:	             rts

0000e418 <stackToFile>:


BOOL stackToFile (char * filename, const struct variable * from) {
    e418:	                      lea -144(sp),sp
    e41c:	                      movem.l d2-d3/a6,-(sp)
    BPTR fp = Open( filename, MODE_NEWFILE);
    e420:	                      move.l 160(sp),148(sp)
    e426:	                      move.l #1006,144(sp)
    e42e:	                      move.l 1cfbe <DOSBase>,d0
    e434:	                      movea.l d0,a6
    e436:	                      move.l 148(sp),d1
    e43a:	                      move.l 144(sp),d2
    e43e:	                      jsr -30(a6)
    e442:	                      move.l d0,140(sp)
    e446:	                      move.l 140(sp),d0
    e44a:	                      move.l d0,136(sp)

    if (!fp) {
    e44e:	                  ,-- bne.s e468 <stackToFile+0x50>
        KPrintF("Can't create file", filename);
    e450:	                  |   move.l 160(sp),-(sp)
    e454:	                  |   pea 19d6d <PutChar+0x1b23>
    e45a:	                  |   jsr 177a8 <KPrintF>
    e460:	                  |   addq.l #8,sp
        return FALSE;
    e462:	                  |   clr.w d0
    e464:	,-----------------|-- bra.w e724 <stackToFile+0x30c>
    }

    struct variableStack * hereWeAre = from->varData.theStack->first;
    e468:	|                 '-> movea.l 164(sp),a0
    e46c:	|                     movea.l 4(a0),a0
    e470:	|                     move.l (a0),152(sp)

    encode1 = (unsigned char) saveEncoding & 255;
    e474:	|                     move.w 1d06a <saveEncoding>,d0
    e47a:	|                     move.l d0,d0
    e47c:	|                     move.b d0,1d068 <encode1>
    encode2 = (unsigned char) (saveEncoding >> 8);
    e482:	|                     move.w 1d06a <saveEncoding>,d0
    e488:	|                     lsr.w #8,d0
    e48a:	|                     move.l d0,d0
    e48c:	|                     move.b d0,1d069 <encode2>

    if (saveEncoding) {
    e492:	|                     move.w 1d06a <saveEncoding>,d0
    e498:	|                 ,-- beq.s e4ea <stackToFile+0xd2>
        FPrintf(fp, "[Custom data (encoded)]\r\n");
    e49a:	|                 |   move.l 136(sp),116(sp)
    e4a0:	|                 |   move.l #105479,112(sp)
    e4a8:	|                 |   moveq #99,d0
    e4aa:	|                 |   not.b d0
    e4ac:	|                 |   add.l sp,d0
    e4ae:	|                 |   addi.l #-144,d0
    e4b4:	|                 |   move.l d0,108(sp)
    e4b8:	|                 |   move.l 1cfbe <DOSBase>,d0
    e4be:	|                 |   movea.l d0,a6
    e4c0:	|                 |   move.l 116(sp),d1
    e4c4:	|                 |   move.l 112(sp),d2
    e4c8:	|                 |   move.l 108(sp),d3
    e4cc:	|                 |   jsr -354(a6)
    e4d0:	|                 |   move.l d0,104(sp)
        writeStringEncoded("UN�LO�CKED", fp);
    e4d4:	|                 |   move.l 136(sp),-(sp)
    e4d8:	|                 |   pea 19c86 <PutChar+0x1a3c>
    e4de:	|                 |   jsr e72e <writeStringEncoded>
    e4e4:	|                 |   addq.l #8,sp
    e4e6:	|  ,--------------|-- bra.w e6fc <stackToFile+0x2e4>
    } else {
        FPrintf(fp, "[Custom data (ASCII)]\n");
    e4ea:	|  |              '-> move.l 136(sp),132(sp)
    e4f0:	|  |                  move.l #105505,128(sp)
    e4f8:	|  |                  moveq #99,d1
    e4fa:	|  |                  not.b d1
    e4fc:	|  |                  add.l sp,d1
    e4fe:	|  |                  addi.l #-144,d1
    e504:	|  |                  move.l d1,124(sp)
    e508:	|  |                  move.l 1cfbe <DOSBase>,d0
    e50e:	|  |                  movea.l d0,a6
    e510:	|  |                  move.l 132(sp),d1
    e514:	|  |                  move.l 128(sp),d2
    e518:	|  |                  move.l 124(sp),d3
    e51c:	|  |                  jsr -354(a6)
    e520:	|  |                  move.l d0,120(sp)
    }

    while (hereWeAre) {
    e524:	|  +----------------- bra.w e6fc <stackToFile+0x2e4>
        if (saveEncoding) {
    e528:	|  |  ,-------------> move.w 1d06a <saveEncoding>,d0
    e52e:	|  |  |     ,-------- beq.w e680 <stackToFile+0x268>
            switch (hereWeAre->thisVar.varType) {
    e532:	|  |  |     |         movea.l 152(sp),a0
    e536:	|  |  |     |         move.l (a0),d0
    e538:	|  |  |     |         moveq #1,d1
    e53a:	|  |  |     |         cmp.l d0,d1
    e53c:	|  |  |     |     ,-- beq.s e58c <stackToFile+0x174>
    e53e:	|  |  |     |     |   moveq #3,d1
    e540:	|  |  |     |     |   cmp.l d0,d1
    e542:	|  |  |     |  ,--|-- bne.w e64e <stackToFile+0x236>
                case SVT_STRING:
                    FPutC(fp, encode1);
    e546:	|  |  |     |  |  |   move.l 136(sp),76(sp)
    e54c:	|  |  |     |  |  |   move.b 1d068 <encode1>,d0
    e552:	|  |  |     |  |  |   ext.w d0
    e554:	|  |  |     |  |  |   movea.w d0,a0
    e556:	|  |  |     |  |  |   move.l a0,72(sp)
    e55a:	|  |  |     |  |  |   move.l 1cfbe <DOSBase>,d0
    e560:	|  |  |     |  |  |   movea.l d0,a6
    e562:	|  |  |     |  |  |   move.l 76(sp),d1
    e566:	|  |  |     |  |  |   move.l 72(sp),d2
    e56a:	|  |  |     |  |  |   jsr -312(a6)
    e56e:	|  |  |     |  |  |   move.l d0,68(sp)
                    writeStringEncoded(hereWeAre->thisVar.varData.theString, fp);
    e572:	|  |  |     |  |  |   movea.l 152(sp),a0
    e576:	|  |  |     |  |  |   move.l 4(a0),d0
    e57a:	|  |  |     |  |  |   move.l 136(sp),-(sp)
    e57e:	|  |  |     |  |  |   move.l d0,-(sp)
    e580:	|  |  |     |  |  |   jsr e72e <writeStringEncoded>
    e586:	|  |  |     |  |  |   addq.l #8,sp
                    break;
    e588:	|  |  |  ,--|--|--|-- bra.w e6f2 <stackToFile+0x2da>

                case SVT_INT:
                    // Small enough to be stored as a char
                    if (hereWeAre->thisVar.varData.intValue >= 0 && hereWeAre->thisVar.varData.intValue < 256) {
    e58c:	|  |  |  |  |  |  '-> movea.l 152(sp),a0
    e590:	|  |  |  |  |  |      move.l 4(a0),d0
    e594:	|  |  |  |  |  |  ,-- bmi.s e604 <stackToFile+0x1ec>
    e596:	|  |  |  |  |  |  |   movea.l 152(sp),a0
    e59a:	|  |  |  |  |  |  |   move.l 4(a0),d0
    e59e:	|  |  |  |  |  |  |   cmpi.l #255,d0
    e5a4:	|  |  |  |  |  |  +-- bgt.s e604 <stackToFile+0x1ec>
                        FPutC(fp, 2 ^ encode1);
    e5a6:	|  |  |  |  |  |  |   move.l 136(sp),64(sp)
    e5ac:	|  |  |  |  |  |  |   move.b 1d068 <encode1>,d0
    e5b2:	|  |  |  |  |  |  |   eori.b #2,d0
    e5b6:	|  |  |  |  |  |  |   ext.w d0
    e5b8:	|  |  |  |  |  |  |   movea.w d0,a0
    e5ba:	|  |  |  |  |  |  |   move.l a0,60(sp)
    e5be:	|  |  |  |  |  |  |   move.l 1cfbe <DOSBase>,d0
    e5c4:	|  |  |  |  |  |  |   movea.l d0,a6
    e5c6:	|  |  |  |  |  |  |   move.l 64(sp),d1
    e5ca:	|  |  |  |  |  |  |   move.l 60(sp),d2
    e5ce:	|  |  |  |  |  |  |   jsr -312(a6)
    e5d2:	|  |  |  |  |  |  |   move.l d0,56(sp)
                        FPutC(fp, hereWeAre->thisVar.varData.intValue);
    e5d6:	|  |  |  |  |  |  |   move.l 136(sp),52(sp)
    e5dc:	|  |  |  |  |  |  |   movea.l 152(sp),a0
    e5e0:	|  |  |  |  |  |  |   move.l 4(a0),48(sp)
    e5e6:	|  |  |  |  |  |  |   move.l 1cfbe <DOSBase>,d0
    e5ec:	|  |  |  |  |  |  |   movea.l d0,a6
    e5ee:	|  |  |  |  |  |  |   move.l 52(sp),d1
    e5f2:	|  |  |  |  |  |  |   move.l 48(sp),d2
    e5f6:	|  |  |  |  |  |  |   jsr -312(a6)
    e5fa:	|  |  |  |  |  |  |   move.l d0,44(sp)
    e5fe:	|  |  |  |  |  |  |   nop
                    } else {
                        FPutC(fp, 1 ^ encode1);
                        put4bytes(hereWeAre->thisVar.varData.intValue, fp);
                    }
                    break;
    e600:	|  |  |  +--|--|--|-- bra.w e6f2 <stackToFile+0x2da>
                        FPutC(fp, 1 ^ encode1);
    e604:	|  |  |  |  |  |  '-> move.l 136(sp),40(sp)
    e60a:	|  |  |  |  |  |      move.b 1d068 <encode1>,d0
    e610:	|  |  |  |  |  |      eori.b #1,d0
    e614:	|  |  |  |  |  |      ext.w d0
    e616:	|  |  |  |  |  |      movea.w d0,a0
    e618:	|  |  |  |  |  |      move.l a0,36(sp)
    e61c:	|  |  |  |  |  |      move.l 1cfbe <DOSBase>,d0
    e622:	|  |  |  |  |  |      movea.l d0,a6
    e624:	|  |  |  |  |  |      move.l 40(sp),d1
    e628:	|  |  |  |  |  |      move.l 36(sp),d2
    e62c:	|  |  |  |  |  |      jsr -312(a6)
    e630:	|  |  |  |  |  |      move.l d0,32(sp)
                        put4bytes(hereWeAre->thisVar.varData.intValue, fp);
    e634:	|  |  |  |  |  |      movea.l 152(sp),a0
    e638:	|  |  |  |  |  |      move.l 4(a0),d0
    e63c:	|  |  |  |  |  |      move.l 136(sp),-(sp)
    e640:	|  |  |  |  |  |      move.l d0,-(sp)
    e642:	|  |  |  |  |  |      jsr 958 <put4bytes>
    e648:	|  |  |  |  |  |      addq.l #8,sp
                    break;
    e64a:	|  |  |  +--|--|----- bra.w e6f2 <stackToFile+0x2da>

                default:
                    KPrintF("Can't create an encoded custom data file containing anything other than numbers and strings", filename);
    e64e:	|  |  |  |  |  '----> move.l 160(sp),-(sp)
    e652:	|  |  |  |  |         pea 19d7f <PutChar+0x1b35>
    e658:	|  |  |  |  |         jsr 177a8 <KPrintF>
    e65e:	|  |  |  |  |         addq.l #8,sp
                    Close(fp);
    e660:	|  |  |  |  |         move.l 136(sp),28(sp)
    e666:	|  |  |  |  |         move.l 1cfbe <DOSBase>,d0
    e66c:	|  |  |  |  |         movea.l d0,a6
    e66e:	|  |  |  |  |         move.l 28(sp),d1
    e672:	|  |  |  |  |         jsr -36(a6)
    e676:	|  |  |  |  |         move.l d0,24(sp)
                    return FALSE;
    e67a:	|  |  |  |  |         clr.w d0
    e67c:	+--|--|--|--|-------- bra.w e724 <stackToFile+0x30c>
            }
        } else {
            char * makeSureItsText = getTextFromAnyVar(&hereWeAre->thisVar);
    e680:	|  |  |  |  '-------> move.l 152(sp),d0
    e684:	|  |  |  |            move.l d0,-(sp)
    e686:	|  |  |  |            jsr 1529e <getTextFromAnyVar>
    e68c:	|  |  |  |            addq.l #4,sp
    e68e:	|  |  |  |            move.l d0,100(sp)
            if (makeSureItsText == NULL) break;
    e692:	|  |  |  |     ,----- beq.s e706 <stackToFile+0x2ee>
            FPrintf(fp, "%s\n", *makeSureItsText);
    e694:	|  |  |  |     |      movea.l 100(sp),a0
    e698:	|  |  |  |     |      move.b (a0),d0
    e69a:	|  |  |  |     |      ext.w d0
    e69c:	|  |  |  |     |      movea.w d0,a0
    e69e:	|  |  |  |     |      move.l a0,12(sp)
    e6a2:	|  |  |  |     |      move.l 136(sp),96(sp)
    e6a8:	|  |  |  |     |      move.l #105947,92(sp)
    e6b0:	|  |  |  |     |      moveq #99,d0
    e6b2:	|  |  |  |     |      not.b d0
    e6b4:	|  |  |  |     |      add.l sp,d0
    e6b6:	|  |  |  |     |      addi.l #-144,d0
    e6bc:	|  |  |  |     |      move.l d0,88(sp)
    e6c0:	|  |  |  |     |      move.l 1cfbe <DOSBase>,d0
    e6c6:	|  |  |  |     |      movea.l d0,a6
    e6c8:	|  |  |  |     |      move.l 96(sp),d1
    e6cc:	|  |  |  |     |      move.l 92(sp),d2
    e6d0:	|  |  |  |     |      move.l 88(sp),d3
    e6d4:	|  |  |  |     |      jsr -354(a6)
    e6d8:	|  |  |  |     |      move.l d0,84(sp)
            FreeVec(makeSureItsText);
    e6dc:	|  |  |  |     |      move.l 100(sp),80(sp)
    e6e2:	|  |  |  |     |      move.l 1cfb6 <SysBase>,d0
    e6e8:	|  |  |  |     |      movea.l d0,a6
    e6ea:	|  |  |  |     |      movea.l 80(sp),a1
    e6ee:	|  |  |  |     |      jsr -690(a6)
        }

        hereWeAre = hereWeAre->next;
    e6f2:	|  |  |  '-----|----> movea.l 152(sp),a0
    e6f6:	|  |  |        |      move.l 8(a0),152(sp)
    while (hereWeAre) {
    e6fc:	|  '--|--------|----> tst.l 152(sp)
    e700:	|     '--------|----- bne.w e528 <stackToFile+0x110>
    e704:	|              |  ,-- bra.s e708 <stackToFile+0x2f0>
            if (makeSureItsText == NULL) break;
    e706:	|              '--|-> nop
    }
    Close(fp);
    e708:	|                 '-> move.l 136(sp),20(sp)
    e70e:	|                     move.l 1cfbe <DOSBase>,d0
    e714:	|                     movea.l d0,a6
    e716:	|                     move.l 20(sp),d1
    e71a:	|                     jsr -36(a6)
    e71e:	|                     move.l d0,16(sp)
    return TRUE;
    e722:	|                     moveq #1,d0
}
    e724:	'-------------------> movem.l (sp)+,d2-d3/a6
    e728:	                      lea 144(sp),sp
    e72c:	                      rts

0000e72e <writeStringEncoded>:

void writeStringEncoded (const char * s, BPTR fp) {
    e72e:	       lea -20(sp),sp
    e732:	       move.l a6,-(sp)
    e734:	       move.l d2,-(sp)
	int a, len = strlen (s);
    e736:	       move.l 32(sp),-(sp)
    e73a:	       jsr 141b4 <strlen>
    e740:	       addq.l #4,sp
    e742:	       move.l d0,20(sp)

	put2bytes (len, fp);
    e746:	       move.l 36(sp),-(sp)
    e74a:	       move.l 24(sp),-(sp)
    e74e:	       jsr 8d0 <put2bytes>
    e754:	       addq.l #8,sp
	for (a = 0; a < len; a ++) {
    e756:	       clr.l 24(sp)
    e75a:	   ,-- bra.s e7b0 <writeStringEncoded+0x82>
		FPutC (fp, s[a] ^ encode1);
    e75c:	,--|-> move.l 36(sp),16(sp)
    e762:	|  |   move.l 24(sp),d0
    e766:	|  |   movea.l 32(sp),a0
    e76a:	|  |   adda.l d0,a0
    e76c:	|  |   move.b (a0),d1
    e76e:	|  |   move.b 1d068 <encode1>,d0
    e774:	|  |   eor.b d1,d0
    e776:	|  |   ext.w d0
    e778:	|  |   movea.w d0,a0
    e77a:	|  |   move.l a0,12(sp)
    e77e:	|  |   move.l 1cfbe <DOSBase>,d0
    e784:	|  |   movea.l d0,a6
    e786:	|  |   move.l 16(sp),d1
    e78a:	|  |   move.l 12(sp),d2
    e78e:	|  |   jsr -312(a6)
    e792:	|  |   move.l d0,8(sp)
		encode1 += encode2;
    e796:	|  |   move.b 1d068 <encode1>,d0
    e79c:	|  |   move.b d0,d1
    e79e:	|  |   move.b 1d069 <encode2>,d0
    e7a4:	|  |   add.b d1,d0
    e7a6:	|  |   move.b d0,1d068 <encode1>
	for (a = 0; a < len; a ++) {
    e7ac:	|  |   addq.l #1,24(sp)
    e7b0:	|  '-> move.l 24(sp),d0
    e7b4:	|      cmp.l 20(sp),d0
    e7b8:	'----- blt.s e75c <writeStringEncoded+0x2e>
	}
}
    e7ba:	       nop
    e7bc:	       nop
    e7be:	       move.l (sp)+,d2
    e7c0:	       movea.l (sp)+,a6
    e7c2:	       lea 20(sp),sp
    e7c6:	       rts

0000e7c8 <failSecurityCheck>:

#define builtIn(a) 			static enum builtReturn builtIn_ ## a (int numParams, struct loadedFunction * fun)

#define UNUSEDALL		 	(void) (0 && sizeof(numParams) && sizeof (fun));

BOOL failSecurityCheck(char * fn) {
    e7c8:	                   subq.l #4,sp
	if (fn == NULL) return TRUE;
    e7ca:	                   tst.l 8(sp)
    e7ce:	               ,-- bne.s e7d4 <failSecurityCheck+0xc>
    e7d0:	               |   moveq #1,d0
    e7d2:	,--------------|-- bra.s e852 <failSecurityCheck+0x8a>

	int a = 0;
    e7d4:	|              '-> clr.l (sp)

	while (fn[a]) {
    e7d6:	|     ,----------- bra.s e844 <failSecurityCheck+0x7c>
		switch (fn[a]) {
    e7d8:	|  ,--|----------> move.l (sp),d0
    e7da:	|  |  |            movea.l 8(sp),a0
    e7de:	|  |  |            adda.l d0,a0
    e7e0:	|  |  |            move.b (a0),d0
    e7e2:	|  |  |            ext.w d0
    e7e4:	|  |  |            movea.w d0,a0
    e7e6:	|  |  |            moveq #124,d0
    e7e8:	|  |  |            cmp.l a0,d0
    e7ea:	|  |  |     ,----- beq.s e82c <failSecurityCheck+0x64>
    e7ec:	|  |  |     |      moveq #124,d1
    e7ee:	|  |  |     |      cmp.l a0,d1
    e7f0:	|  |  |  ,--|----- blt.s e842 <failSecurityCheck+0x7a>
    e7f2:	|  |  |  |  |      moveq #92,d0
    e7f4:	|  |  |  |  |      cmp.l a0,d0
    e7f6:	|  |  |  |  +----- beq.s e82c <failSecurityCheck+0x64>
    e7f8:	|  |  |  |  |      moveq #92,d1
    e7fa:	|  |  |  |  |      cmp.l a0,d1
    e7fc:	|  |  |  +--|----- blt.s e842 <failSecurityCheck+0x7a>
    e7fe:	|  |  |  |  |      moveq #60,d0
    e800:	|  |  |  |  |      cmp.l a0,d0
    e802:	|  |  |  |  |  ,-- blt.s e822 <failSecurityCheck+0x5a>
    e804:	|  |  |  |  |  |   moveq #34,d1
    e806:	|  |  |  |  |  |   cmp.l a0,d1
    e808:	|  |  |  +--|--|-- bgt.s e842 <failSecurityCheck+0x7a>
    e80a:	|  |  |  |  |  |   moveq #-34,d1
    e80c:	|  |  |  |  |  |   add.l a0,d1
    e80e:	|  |  |  |  |  |   move.l #83894529,d0
    e814:	|  |  |  |  |  |   lsr.l d1,d0
    e816:	|  |  |  |  |  |   moveq #1,d1
    e818:	|  |  |  |  |  |   and.l d1,d0
    e81a:	|  |  |  |  |  |   sne d0
    e81c:	|  |  |  |  |  |   neg.b d0
    e81e:	|  |  |  |  +--|-- bne.s e82c <failSecurityCheck+0x64>
    e820:	|  |  |  +--|--|-- bra.s e842 <failSecurityCheck+0x7a>
    e822:	|  |  |  |  |  '-> lea -62(a0),a0
    e826:	|  |  |  |  |      moveq #1,d0
    e828:	|  |  |  |  |      cmp.l a0,d0
    e82a:	|  |  |  +--|----- bcs.s e842 <failSecurityCheck+0x7a>
			case '?':
			case '"':
			case '<':
			case '>':
			case '|':
				KPrintF("Filenames may not contain the following characters: \n\n\\  /  :  \"  <  >  |  ?  *\n\nConsequently, the following filename is not allowed:", fn);
    e82c:	|  |  |  |  '----> move.l 8(sp),-(sp)
    e830:	|  |  |  |         pea 19ddf <PutChar+0x1b95>
    e836:	|  |  |  |         jsr 177a8 <KPrintF>
    e83c:	|  |  |  |         addq.l #8,sp
				return TRUE;
    e83e:	|  |  |  |         moveq #1,d0
    e840:	+--|--|--|-------- bra.s e852 <failSecurityCheck+0x8a>
		}
		a++;
    e842:	|  |  |  '-------> addq.l #1,(sp)
	while (fn[a]) {
    e844:	|  |  '----------> move.l (sp),d0
    e846:	|  |               movea.l 8(sp),a0
    e84a:	|  |               adda.l d0,a0
    e84c:	|  |               move.b (a0),d0
    e84e:	|  '-------------- bne.s e7d8 <failSecurityCheck+0x10>
	}
	return FALSE;
    e850:	|                  clr.w d0
}
    e852:	'----------------> addq.l #4,sp
    e854:	                   rts

0000e856 <sayCore>:

static enum builtReturn sayCore (int numParams, struct loadedFunction * fun, BOOL sayIt)
{
    e856:	             lea -24(sp),sp
    e85a:	             move.l a6,-(sp)
    e85c:	             move.l 40(sp),d0
    e860:	             move.w d0,d0
    e862:	             move.w d0,6(sp)
	int fileNum = -1;
    e866:	             moveq #-1,d0
    e868:	             move.l d0,12(sp)
	char * newText;
	int objT, p;
	killSpeechTimers ();
    e86c:	             jsr 6dca <killSpeechTimers>

	switch (numParams) {
    e872:	             moveq #2,d0
    e874:	             cmp.l 32(sp),d0
    e878:	      ,----- beq.s e8bc <sayCore+0x66>
    e87a:	      |      moveq #3,d0
    e87c:	      |      cmp.l 32(sp),d0
    e880:	,-----|----- bne.w e99e <sayCore+0x148>
		case 3:
			if (! getValueType (&fileNum, SVT_FILE, &fun->stack->thisVar)) return BR_ERROR;
    e884:	|     |      movea.l 36(sp),a0
    e888:	|     |      move.l 24(a0),d0
    e88c:	|     |      move.l d0,-(sp)
    e88e:	|     |      pea 5 <_start+0x5>
    e892:	|     |      lea 20(sp),a0
    e896:	|     |      move.l a0,-(sp)
    e898:	|     |      jsr 14cc8 <getValueType>
    e89e:	|     |      lea 12(sp),sp
    e8a2:	|     |      tst.w d0
    e8a4:	|     |  ,-- bne.s e8ac <sayCore+0x56>
    e8a6:	|     |  |   moveq #1,d0
    e8a8:	|  ,--|--|-- bra.w e9ae <sayCore+0x158>
			trimStack (&fun -> stack);
    e8ac:	|  |  |  '-> moveq #24,d0
    e8ae:	|  |  |      add.l 36(sp),d0
    e8b2:	|  |  |      move.l d0,-(sp)
    e8b4:	|  |  |      jsr 1564c <trimStack>
    e8ba:	|  |  |      addq.l #4,sp
			[[fallthrough]];

		case 2:
			newText = getTextFromAnyVar (&(fun -> stack->thisVar));
    e8bc:	|  |  '----> movea.l 36(sp),a0
    e8c0:	|  |         move.l 24(a0),d0
    e8c4:	|  |         move.l d0,-(sp)
    e8c6:	|  |         jsr 1529e <getTextFromAnyVar>
    e8cc:	|  |         addq.l #4,sp
    e8ce:	|  |         move.l d0,24(sp)
			if (! newText) return BR_ERROR;
    e8d2:	|  |     ,-- bne.s e8da <sayCore+0x84>
    e8d4:	|  |     |   moveq #1,d0
    e8d6:	|  +-----|-- bra.w e9ae <sayCore+0x158>
			trimStack (&fun -> stack);
    e8da:	|  |     '-> moveq #24,d0
    e8dc:	|  |         add.l 36(sp),d0
    e8e0:	|  |         move.l d0,-(sp)
    e8e2:	|  |         jsr 1564c <trimStack>
    e8e8:	|  |         addq.l #4,sp
			if (! getValueType(&objT, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e8ea:	|  |         movea.l 36(sp),a0
    e8ee:	|  |         move.l 24(a0),d0
    e8f2:	|  |         move.l d0,-(sp)
    e8f4:	|  |         pea 7 <_start+0x7>
    e8f8:	|  |         lea 16(sp),a0
    e8fc:	|  |         move.l a0,-(sp)
    e8fe:	|  |         jsr 14cc8 <getValueType>
    e904:	|  |         lea 12(sp),sp
    e908:	|  |         tst.w d0
    e90a:	|  |     ,-- bne.s e912 <sayCore+0xbc>
    e90c:	|  |     |   moveq #1,d0
    e90e:	|  +-----|-- bra.w e9ae <sayCore+0x158>
			if (! getValueType(&objT, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e912:	|  |     '-> movea.l 36(sp),a0
    e916:	|  |         move.l 24(a0),d0
    e91a:	|  |         move.l d0,-(sp)
    e91c:	|  |         pea 7 <_start+0x7>
    e920:	|  |         lea 16(sp),a0
    e924:	|  |         move.l a0,-(sp)
    e926:	|  |         jsr 14cc8 <getValueType>
    e92c:	|  |         lea 12(sp),sp
    e930:	|  |         tst.w d0
    e932:	|  |     ,-- bne.s e938 <sayCore+0xe2>
    e934:	|  |     |   moveq #1,d0
    e936:	|  +-----|-- bra.s e9ae <sayCore+0x158>
			trimStack (&fun -> stack);
    e938:	|  |     '-> moveq #24,d0
    e93a:	|  |         add.l 36(sp),d0
    e93e:	|  |         move.l d0,-(sp)
    e940:	|  |         jsr 1564c <trimStack>
    e946:	|  |         addq.l #4,sp
			p = wrapSpeech (newText, objT, fileNum, sayIt);
    e948:	|  |         movea.w 6(sp),a0
    e94c:	|  |         move.l 12(sp),d1
    e950:	|  |         move.l 8(sp),d0
    e954:	|  |         move.l a0,-(sp)
    e956:	|  |         move.l d1,-(sp)
    e958:	|  |         move.l d0,-(sp)
    e95a:	|  |         move.l 36(sp),-(sp)
    e95e:	|  |         jsr 4560 <wrapSpeech>
    e964:	|  |         lea 16(sp),sp
    e968:	|  |         move.l d0,20(sp)
			fun -> timeLeft = p;
    e96c:	|  |         movea.l 36(sp),a0
    e970:	|  |         move.l 20(sp),12(a0)
			//debugOut ("BUILTIN: sayCore: %s (%i)\n", newText, p);
			fun -> isSpeech = TRUE;
    e976:	|  |         movea.l 36(sp),a0
    e97a:	|  |         move.w #1,50(a0)
			FreeVec(newText);
    e980:	|  |         move.l 24(sp),16(sp)
    e986:	|  |         move.l 1cfb6 <SysBase>,d0
    e98c:	|  |         movea.l d0,a6
    e98e:	|  |         movea.l 16(sp),a1
    e992:	|  |         jsr -690(a6)
			newText = NULL;
    e996:	|  |         clr.l 24(sp)
			return BR_KEEP_AND_PAUSE;
    e99a:	|  |         moveq #0,d0
    e99c:	|  +-------- bra.s e9ae <sayCore+0x158>
	}

	KPrintF("Function should have either 2 or 3 parameters");
    e99e:	'--|-------> pea 19e65 <PutChar+0x1c1b>
    e9a4:	   |         jsr 177a8 <KPrintF>
    e9aa:	   |         addq.l #4,sp
	return BR_ERROR;
    e9ac:	   |         moveq #1,d0
}
    e9ae:	   '-------> movea.l (sp)+,a6
    e9b0:	             lea 24(sp),sp
    e9b4:	             rts

0000e9b6 <builtIn_say>:

builtIn(say)
{
	UNUSEDALL
	return sayCore (numParams, fun, TRUE);
    e9b6:	pea 1 <_start+0x1>
    e9ba:	move.l 12(sp),-(sp)
    e9be:	move.l 12(sp),-(sp)
    e9c2:	jsr e856 <sayCore>
    e9c8:	lea 12(sp),sp
}
    e9cc:	rts

0000e9ce <builtIn_think>:

builtIn(think)
{
	UNUSEDALL
	return sayCore (numParams, fun, FALSE);
    e9ce:	clr.l -(sp)
    e9d0:	move.l 12(sp),-(sp)
    e9d4:	move.l 12(sp),-(sp)
    e9d8:	jsr e856 <sayCore>
    e9de:	lea 12(sp),sp
}
    e9e2:	rts

0000e9e4 <builtIn_freeze>:

builtIn(freeze)
{
	UNUSEDALL
	freeze ();
    e9e4:	jsr 15694 <freeze>
	freezeSubs (); 
    e9ea:	jsr 63ba <freezeSubs>
	fun -> freezerLevel = 0;
    e9f0:	movea.l 8(sp),a0
    e9f4:	clr.b 56(a0)
	return BR_CONTINUE;
    e9f8:	moveq #2,d0
}
    e9fa:	rts

0000e9fc <builtIn_unfreeze>:

builtIn(unfreeze)
{
	UNUSEDALL
	unfreeze ();
    e9fc:	jsr 15898 <unfreeze>
	unfreezeSubs (); 
    ea02:	jsr 7aa2 <unfreezeSubs>
	return BR_CONTINUE;
    ea08:	moveq #2,d0
}
    ea0a:	rts

0000ea0c <builtIn_howFrozen>:

builtIn(howFrozen)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, howFrozen ());
    ea0c:	jsr 15874 <howFrozen>
    ea12:	move.l d0,d1
    ea14:	moveq #28,d0
    ea16:	add.l 8(sp),d0
    ea1a:	move.l d1,-(sp)
    ea1c:	pea 1 <_start+0x1>
    ea20:	move.l d0,-(sp)
    ea22:	jsr 155ba <setVariable>
    ea28:	lea 12(sp),sp
	return BR_CONTINUE; 
    ea2c:	moveq #2,d0
}
    ea2e:	rts

0000ea30 <builtIn_setCursor>:

builtIn(setCursor)
{
    ea30:	subq.l #4,sp
	UNUSEDALL
	struct personaAnimation * aa = getAnimationFromVar (&(fun -> stack -> thisVar));
    ea32:	movea.l 12(sp),a0
    ea36:	move.l 24(a0),d0
    ea3a:	move.l d0,-(sp)
    ea3c:	jsr 151a0 <getAnimationFromVar>
    ea42:	addq.l #4,sp
    ea44:	move.l d0,(sp)
	pickAnimCursor (aa);
    ea46:	move.l (sp),-(sp)
    ea48:	jsr d6c <pickAnimCursor>
    ea4e:	addq.l #4,sp
	trimStack (&fun -> stack);
    ea50:	moveq #24,d0
    ea52:	add.l 12(sp),d0
    ea56:	move.l d0,-(sp)
    ea58:	jsr 1564c <trimStack>
    ea5e:	addq.l #4,sp
	return BR_CONTINUE;
    ea60:	moveq #2,d0
}
    ea62:	addq.l #4,sp
    ea64:	rts

0000ea66 <builtIn_getMouseX>:

builtIn(getMouseX)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseX + cameraX);
    ea66:	move.l 1cf6e <input+0xa>,d1
    ea6c:	move.l 1d06c <cameraX>,d0
    ea72:	add.l d0,d1
    ea74:	moveq #28,d0
    ea76:	add.l 8(sp),d0
    ea7a:	move.l d1,-(sp)
    ea7c:	pea 1 <_start+0x1>
    ea80:	move.l d0,-(sp)
    ea82:	jsr 155ba <setVariable>
    ea88:	lea 12(sp),sp
	return BR_CONTINUE;
    ea8c:	moveq #2,d0
}
    ea8e:	rts

0000ea90 <builtIn_getMouseY>:

builtIn(getMouseY)
{

	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseY + cameraY);
    ea90:	move.l 1cf72 <input+0xe>,d1
    ea96:	move.l 1d070 <cameraY>,d0
    ea9c:	add.l d0,d1
    ea9e:	moveq #28,d0
    eaa0:	add.l 8(sp),d0
    eaa4:	move.l d1,-(sp)
    eaa6:	pea 1 <_start+0x1>
    eaaa:	move.l d0,-(sp)
    eaac:	jsr 155ba <setVariable>
    eab2:	lea 12(sp),sp
	return BR_CONTINUE;
    eab6:	moveq #2,d0
}
    eab8:	rts

0000eaba <builtIn_getMouseScreenX>:

builtIn(getMouseScreenX)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseX*cameraZoom);
    eaba:	move.l 1cf6e <input+0xa>,d0
    eac0:	move.l d0,-(sp)
    eac2:	jsr 17bda <__floatsisf>
    eac8:	addq.l #4,sp
    eaca:	move.l d0,d1
    eacc:	move.l 1c946 <cameraZoom>,d0
    ead2:	move.l d0,-(sp)
    ead4:	move.l d1,-(sp)
    ead6:	jsr 17c8c <__mulsf3>
    eadc:	addq.l #8,sp
    eade:	move.l d0,-(sp)
    eae0:	jsr 17b72 <__fixsfsi>
    eae6:	addq.l #4,sp
    eae8:	move.l d0,d1
    eaea:	moveq #28,d0
    eaec:	add.l 8(sp),d0
    eaf0:	move.l d1,-(sp)
    eaf2:	pea 1 <_start+0x1>
    eaf6:	move.l d0,-(sp)
    eaf8:	jsr 155ba <setVariable>
    eafe:	lea 12(sp),sp
	return BR_CONTINUE;
    eb02:	moveq #2,d0
}
    eb04:	rts

0000eb06 <builtIn_getMouseScreenY>:

builtIn(getMouseScreenY)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseY*cameraZoom);
    eb06:	move.l 1cf72 <input+0xe>,d0
    eb0c:	move.l d0,-(sp)
    eb0e:	jsr 17bda <__floatsisf>
    eb14:	addq.l #4,sp
    eb16:	move.l d0,d1
    eb18:	move.l 1c946 <cameraZoom>,d0
    eb1e:	move.l d0,-(sp)
    eb20:	move.l d1,-(sp)
    eb22:	jsr 17c8c <__mulsf3>
    eb28:	addq.l #8,sp
    eb2a:	move.l d0,-(sp)
    eb2c:	jsr 17b72 <__fixsfsi>
    eb32:	addq.l #4,sp
    eb34:	move.l d0,d1
    eb36:	moveq #28,d0
    eb38:	add.l 8(sp),d0
    eb3c:	move.l d1,-(sp)
    eb3e:	pea 1 <_start+0x1>
    eb42:	move.l d0,-(sp)
    eb44:	jsr 155ba <setVariable>
    eb4a:	lea 12(sp),sp
	return BR_CONTINUE;
    eb4e:	moveq #2,d0
}
    eb50:	rts

0000eb52 <builtIn_getStatusText>:

builtIn(getStatusText)
{
	UNUSEDALL
	makeTextVar (&fun -> reg, statusBarText ());
    eb52:	jsr 8ad4 <statusBarText>
    eb58:	move.l d0,d1
    eb5a:	moveq #28,d0
    eb5c:	add.l 8(sp),d0
    eb60:	move.l d1,-(sp)
    eb62:	move.l d0,-(sp)
    eb64:	jsr 14eea <makeTextVar>
    eb6a:	addq.l #8,sp
	return BR_CONTINUE;
    eb6c:	moveq #2,d0
}
    eb6e:	rts

0000eb70 <builtIn_getMatchingFiles>:

builtIn(getMatchingFiles)
{
    eb70:	       lea -20(sp),sp
    eb74:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    eb76:	       movea.l 32(sp),a0
    eb7a:	       move.l 24(a0),d0
    eb7e:	       move.l d0,-(sp)
    eb80:	       jsr 1529e <getTextFromAnyVar>
    eb86:	       addq.l #4,sp
    eb88:	       move.l d0,20(sp)
	if (! newText) return BR_ERROR;
    eb8c:	   ,-- bne.s eb94 <builtIn_getMatchingFiles+0x24>
    eb8e:	   |   moveq #1,d0
    eb90:	,--|-- bra.w ec56 <builtIn_getMatchingFiles+0xe6>
	trimStack (&fun -> stack);
    eb94:	|  '-> moveq #24,d0
    eb96:	|      add.l 32(sp),d0
    eb9a:	|      move.l d0,-(sp)
    eb9c:	|      jsr 1564c <trimStack>
    eba2:	|      addq.l #4,sp
	unlinkVar (&fun -> reg);
    eba4:	|      moveq #28,d0
    eba6:	|      add.l 32(sp),d0
    ebaa:	|      move.l d0,-(sp)
    ebac:	|      jsr 14f16 <unlinkVar>
    ebb2:	|      addq.l #4,sp

	// Return value
	fun -> reg.varType = SVT_STACK;
    ebb4:	|      movea.l 32(sp),a0
    ebb8:	|      moveq #6,d0
    ebba:	|      move.l d0,28(a0)
	fun -> reg.varData.theStack = AllocVec(sizeof( struct stackHandler),MEMF_ANY);
    ebbe:	|      moveq #12,d0
    ebc0:	|      move.l d0,16(sp)
    ebc4:	|      clr.l 12(sp)
    ebc8:	|      move.l 1cfb6 <SysBase>,d0
    ebce:	|      movea.l d0,a6
    ebd0:	|      move.l 16(sp),d0
    ebd4:	|      move.l 12(sp),d1
    ebd8:	|      jsr -684(a6)
    ebdc:	|      move.l d0,8(sp)
    ebe0:	|      move.l 8(sp),d0
    ebe4:	|      movea.l 32(sp),a0
    ebe8:	|      move.l d0,32(a0)
	if (!(&fun -> reg.varData.theStack)) return BR_ERROR;
    ebec:	|      moveq #32,d0
    ebee:	|      add.l 32(sp),d0
    ebf2:	|  ,-- bne.s ebf8 <builtIn_getMatchingFiles+0x88>
    ebf4:	|  |   moveq #1,d0
    ebf6:	+--|-- bra.s ec56 <builtIn_getMatchingFiles+0xe6>
	fun -> reg.varData.theStack -> first = NULL;
    ebf8:	|  '-> movea.l 32(sp),a0
    ebfc:	|      movea.l 32(a0),a0
    ec00:	|      clr.l (a0)
	fun -> reg.varData.theStack -> last = NULL;
    ec02:	|      movea.l 32(sp),a0
    ec06:	|      movea.l 32(a0),a0
    ec0a:	|      clr.l 4(a0)
	fun -> reg.varData.theStack -> timesUsed = 1;
    ec0e:	|      movea.l 32(sp),a0
    ec12:	|      movea.l 32(a0),a0
    ec16:	|      moveq #1,d0
    ec18:	|      move.l d0,8(a0)
	if (! getSavedGamesStack (fun -> reg.varData.theStack, newText)) return BR_ERROR;
    ec1c:	|      movea.l 32(sp),a0
    ec20:	|      move.l 32(a0),d0
    ec24:	|      move.l 20(sp),-(sp)
    ec28:	|      move.l d0,-(sp)
    ec2a:	|      jsr 14a84 <getSavedGamesStack>
    ec30:	|      addq.l #8,sp
    ec32:	|      tst.w d0
    ec34:	|  ,-- bne.s ec3a <builtIn_getMatchingFiles+0xca>
    ec36:	|  |   moveq #1,d0
    ec38:	+--|-- bra.s ec56 <builtIn_getMatchingFiles+0xe6>
	FreeVec(newText);
    ec3a:	|  '-> move.l 20(sp),4(sp)
    ec40:	|      move.l 1cfb6 <SysBase>,d0
    ec46:	|      movea.l d0,a6
    ec48:	|      movea.l 4(sp),a1
    ec4c:	|      jsr -690(a6)
	newText = NULL;
    ec50:	|      clr.l 20(sp)
	return BR_CONTINUE;
    ec54:	|      moveq #2,d0
}
    ec56:	'----> movea.l (sp)+,a6
    ec58:	       lea 20(sp),sp
    ec5c:	       rts

0000ec5e <builtIn_saveGame>:

builtIn(saveGame)
{
    ec5e:	       lea -12(sp),sp
    ec62:	       move.l a6,-(sp)

    /*if (frozenStuff) {
        fatal ("Can't save game state while the engine is frozen");
    }*/

    loadNow = getTextFromAnyVar(&(fun->stack->thisVar));
    ec64:	       movea.l 24(sp),a0
    ec68:	       move.l 24(a0),d0
    ec6c:	       move.l d0,-(sp)
    ec6e:	       jsr 1529e <getTextFromAnyVar>
    ec74:	       addq.l #4,sp
    ec76:	       move.l d0,1cf7e <loadNow>
    trimStack(&fun->stack);
    ec7c:	       moveq #24,d0
    ec7e:	       add.l 24(sp),d0
    ec82:	       move.l d0,-(sp)
    ec84:	       jsr 1564c <trimStack>
    ec8a:	       addq.l #4,sp

    char *aaaaa = encodeFilename(loadNow);
    ec8c:	       move.l 1cf7e <loadNow>,d0
    ec92:	       move.l d0,-(sp)
    ec94:	       jsr 2fe <encodeFilename>
    ec9a:	       addq.l #4,sp
    ec9c:	       move.l d0,12(sp)
    FreeVec(loadNow);
    eca0:	       move.l 1cf7e <loadNow>,8(sp)
    eca8:	       move.l 1cfb6 <SysBase>,d0
    ecae:	       movea.l d0,a6
    ecb0:	       movea.l 8(sp),a1
    ecb4:	       jsr -690(a6)
    if (failSecurityCheck(aaaaa)) return BR_ERROR; // Won't fail if encoded, how cool is that? OK, not very.
    ecb8:	       move.l 12(sp),-(sp)
    ecbc:	       jsr e7c8 <failSecurityCheck>
    ecc2:	       addq.l #4,sp
    ecc4:	       tst.w d0
    ecc6:	   ,-- beq.s eccc <builtIn_saveGame+0x6e>
    ecc8:	   |   moveq #1,d0
    ecca:	,--|-- bra.s ed1c <builtIn_saveGame+0xbe>

    loadNow = joinStrings(":", aaaaa);
    eccc:	|  '-> move.l 12(sp),-(sp)
    ecd0:	|      pea 19e93 <PutChar+0x1c49>
    ecd6:	|      jsr 141f4 <joinStrings>
    ecdc:	|      addq.l #8,sp
    ecde:	|      move.l d0,1cf7e <loadNow>
    FreeVec(aaaaa);
    ece4:	|      move.l 12(sp),4(sp)
    ecea:	|      move.l 1cfb6 <SysBase>,d0
    ecf0:	|      movea.l d0,a6
    ecf2:	|      movea.l 4(sp),a1
    ecf6:	|      jsr -690(a6)

    setVariable(&fun->reg, SVT_INT, 0);
    ecfa:	|      moveq #28,d0
    ecfc:	|      add.l 24(sp),d0
    ed00:	|      clr.l -(sp)
    ed02:	|      pea 1 <_start+0x1>
    ed06:	|      move.l d0,-(sp)
    ed08:	|      jsr 155ba <setVariable>
    ed0e:	|      lea 12(sp),sp
    saverFunc = fun;
    ed12:	|      move.l 24(sp),1d07c <saverFunc>
    return BR_KEEP_AND_PAUSE;
    ed1a:	|      moveq #0,d0
}
    ed1c:	'----> movea.l (sp)+,a6
    ed1e:	       lea 12(sp),sp
    ed22:	       rts

0000ed24 <builtIn_fileExists>:

builtIn(fileExists)
{
    ed24:	       lea -36(sp),sp
    ed28:	       move.l a6,-(sp)
    ed2a:	       move.l d2,-(sp)
    UNUSEDALL
    loadNow = getTextFromAnyVar(&(fun->stack->thisVar));
    ed2c:	       movea.l 52(sp),a0
    ed30:	       move.l 24(a0),d0
    ed34:	       move.l d0,-(sp)
    ed36:	       jsr 1529e <getTextFromAnyVar>
    ed3c:	       addq.l #4,sp
    ed3e:	       move.l d0,1cf7e <loadNow>
    trimStack(&fun->stack);
    ed44:	       moveq #24,d0
    ed46:	       add.l 52(sp),d0
    ed4a:	       move.l d0,-(sp)
    ed4c:	       jsr 1564c <trimStack>
    ed52:	       addq.l #4,sp
    char *aaaaa = encodeFilename(loadNow);
    ed54:	       move.l 1cf7e <loadNow>,d0
    ed5a:	       move.l d0,-(sp)
    ed5c:	       jsr 2fe <encodeFilename>
    ed62:	       addq.l #4,sp
    ed64:	       move.l d0,40(sp)
    FreeVec(loadNow);
    ed68:	       move.l 1cf7e <loadNow>,36(sp)
    ed70:	       move.l 1cfb6 <SysBase>,d0
    ed76:	       movea.l d0,a6
    ed78:	       movea.l 36(sp),a1
    ed7c:	       jsr -690(a6)
    if (failSecurityCheck(aaaaa)) return BR_ERROR;
    ed80:	       move.l 40(sp),-(sp)
    ed84:	       jsr e7c8 <failSecurityCheck>
    ed8a:	       addq.l #4,sp
    ed8c:	       tst.w d0
    ed8e:	   ,-- beq.s ed96 <builtIn_fileExists+0x72>
    ed90:	   |   moveq #1,d0
    ed92:	,--|-- bra.w ee36 <builtIn_fileExists+0x112>
    BPTR fp = Open(aaaaa, MODE_OLDFILE);
    ed96:	|  '-> move.l 40(sp),32(sp)
    ed9c:	|      move.l #1005,28(sp)
    eda4:	|      move.l 1cfbe <DOSBase>,d0
    edaa:	|      movea.l d0,a6
    edac:	|      move.l 32(sp),d1
    edb0:	|      move.l 28(sp),d2
    edb4:	|      jsr -30(a6)
    edb8:	|      move.l d0,24(sp)
    edbc:	|      move.l 24(sp),d0
    edc0:	|      move.l d0,20(sp)
    if (!fp) {        
    edc4:	|  ,-- bne.s edd4 <builtIn_fileExists+0xb0>
        KPrintF("Can't get current directory.\n");      
    edc6:	|  |   pea 19e95 <PutChar+0x1c4b>
    edcc:	|  |   jsr 177a8 <KPrintF>
    edd2:	|  |   addq.l #4,sp
    }
    // Return value
    setVariable(&fun->reg, SVT_INT, (fp != NULL));
    edd4:	|  '-> tst.l 20(sp)
    edd8:	|      sne d0
    edda:	|      neg.b d0
    eddc:	|      moveq #0,d1
    edde:	|      move.b d0,d1
    ede0:	|      moveq #28,d0
    ede2:	|      add.l 52(sp),d0
    ede6:	|      move.l d1,-(sp)
    ede8:	|      pea 1 <_start+0x1>
    edec:	|      move.l d0,-(sp)
    edee:	|      jsr 155ba <setVariable>
    edf4:	|      lea 12(sp),sp
    if (fp) Close(fp);
    edf8:	|      tst.l 20(sp)
    edfc:	|  ,-- beq.s ee18 <builtIn_fileExists+0xf4>
    edfe:	|  |   move.l 20(sp),16(sp)
    ee04:	|  |   move.l 1cfbe <DOSBase>,d0
    ee0a:	|  |   movea.l d0,a6
    ee0c:	|  |   move.l 16(sp),d1
    ee10:	|  |   jsr -36(a6)
    ee14:	|  |   move.l d0,12(sp)
    FreeVec(aaaaa);
    ee18:	|  '-> move.l 40(sp),8(sp)
    ee1e:	|      move.l 1cfb6 <SysBase>,d0
    ee24:	|      movea.l d0,a6
    ee26:	|      movea.l 8(sp),a1
    ee2a:	|      jsr -690(a6)
    loadNow = NULL;
    ee2e:	|      clr.l 1cf7e <loadNow>
    return BR_CONTINUE;
    ee34:	|      moveq #2,d0
}
    ee36:	'----> move.l (sp)+,d2
    ee38:	       movea.l (sp)+,a6
    ee3a:	       lea 36(sp),sp
    ee3e:	       rts

0000ee40 <builtIn_loadGame>:

builtIn(loadGame)
{
    ee40:	       lea -36(sp),sp
    ee44:	       move.l a6,-(sp)
    ee46:	       move.l d2,-(sp)
    UNUSEDALL
    char *aaaaa = getTextFromAnyVar(&(fun->stack->thisVar));
    ee48:	       movea.l 52(sp),a0
    ee4c:	       move.l 24(a0),d0
    ee50:	       move.l d0,-(sp)
    ee52:	       jsr 1529e <getTextFromAnyVar>
    ee58:	       addq.l #4,sp
    ee5a:	       move.l d0,40(sp)
    trimStack(&fun->stack);
    ee5e:	       moveq #24,d0
    ee60:	       add.l 52(sp),d0
    ee64:	       move.l d0,-(sp)
    ee66:	       jsr 1564c <trimStack>
    ee6c:	       addq.l #4,sp
    loadNow = encodeFilename(aaaaa);
    ee6e:	       move.l 40(sp),-(sp)
    ee72:	       jsr 2fe <encodeFilename>
    ee78:	       addq.l #4,sp
    ee7a:	       move.l d0,1cf7e <loadNow>
    FreeVec(aaaaa);
    ee80:	       move.l 40(sp),36(sp)
    ee86:	       move.l 1cfb6 <SysBase>,d0
    ee8c:	       movea.l d0,a6
    ee8e:	       movea.l 36(sp),a1
    ee92:	       jsr -690(a6)

    /*if (frozenStuff) {
        fatal("Can't load a saved game while the engine is frozen");
    }*/

    if (failSecurityCheck(loadNow)) return BR_ERROR;
    ee96:	       move.l 1cf7e <loadNow>,d0
    ee9c:	       move.l d0,-(sp)
    ee9e:	       jsr e7c8 <failSecurityCheck>
    eea4:	       addq.l #4,sp
    eea6:	       tst.w d0
    eea8:	   ,-- beq.s eeae <builtIn_loadGame+0x6e>
    eeaa:	   |   moveq #1,d0
    eeac:	,--|-- bra.s ef1e <builtIn_loadGame+0xde>
    BPTR fp = Open(loadNow, MODE_OLDFILE);
    eeae:	|  '-> move.l 1cf7e <loadNow>,32(sp)
    eeb6:	|      move.l #1005,28(sp)
    eebe:	|      move.l 1cfbe <DOSBase>,d0
    eec4:	|      movea.l d0,a6
    eec6:	|      move.l 32(sp),d1
    eeca:	|      move.l 28(sp),d2
    eece:	|      jsr -30(a6)
    eed2:	|      move.l d0,24(sp)
    eed6:	|      move.l 24(sp),d0
    eeda:	|      move.l d0,20(sp)
    if (fp) {
    eede:	|  ,-- beq.s eefe <builtIn_loadGame+0xbe>
        Close(fp);
    eee0:	|  |   move.l 20(sp),12(sp)
    eee6:	|  |   move.l 1cfbe <DOSBase>,d0
    eeec:	|  |   movea.l d0,a6
    eeee:	|  |   move.l 12(sp),d1
    eef2:	|  |   jsr -36(a6)
    eef6:	|  |   move.l d0,8(sp)
        return BR_KEEP_AND_PAUSE;
    eefa:	|  |   moveq #0,d0
    eefc:	+--|-- bra.s ef1e <builtIn_loadGame+0xde>
    }
    FreeVec(loadNow);
    eefe:	|  '-> move.l 1cf7e <loadNow>,16(sp)
    ef06:	|      move.l 1cfb6 <SysBase>,d0
    ef0c:	|      movea.l d0,a6
    ef0e:	|      movea.l 16(sp),a1
    ef12:	|      jsr -690(a6)
    loadNow = NULL;
    ef16:	|      clr.l 1cf7e <loadNow>
    return BR_CONTINUE;
    ef1c:	|      moveq #2,d0
}
    ef1e:	'----> move.l (sp)+,d2
    ef20:	       movea.l (sp)+,a6
    ef22:	       lea 36(sp),sp
    ef26:	       rts

0000ef28 <builtIn_blankScreen>:
#pragma mark Background image - Painting

builtIn(blankScreen)
{
	UNUSEDALL
	blankScreen (0, 0, sceneWidth, sceneHeight);
    ef28:	move.l 1d052 <sceneHeight>,d0
    ef2e:	move.l d0,d1
    ef30:	move.l 1d04e <sceneWidth>,d0
    ef36:	move.l d1,-(sp)
    ef38:	move.l d0,-(sp)
    ef3a:	clr.l -(sp)
    ef3c:	clr.l -(sp)
    ef3e:	jsr d6b2 <blankScreen>
    ef44:	lea 16(sp),sp
	return BR_CONTINUE;
    ef48:	moveq #2,d0
}
    ef4a:	rts

0000ef4c <builtIn_blankArea>:

builtIn(blankArea)
{
    ef4c:	       lea -16(sp),sp
	UNUSEDALL
	int x1, y1, x2, y2;
	if (! getValueType (&y2, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    ef50:	       movea.l 24(sp),a0
    ef54:	       move.l 24(a0),d0
    ef58:	       move.l d0,-(sp)
    ef5a:	       pea 1 <_start+0x1>
    ef5e:	       lea 8(sp),a0
    ef62:	       move.l a0,-(sp)
    ef64:	       jsr 14cc8 <getValueType>
    ef6a:	       lea 12(sp),sp
    ef6e:	       tst.w d0
    ef70:	   ,-- bne.s ef78 <builtIn_blankArea+0x2c>
    ef72:	   |   moveq #1,d0
    ef74:	,--|-- bra.w f04e <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    ef78:	|  '-> moveq #24,d0
    ef7a:	|      add.l 24(sp),d0
    ef7e:	|      move.l d0,-(sp)
    ef80:	|      jsr 1564c <trimStack>
    ef86:	|      addq.l #4,sp
	if (! getValueType (&x2, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    ef88:	|      movea.l 24(sp),a0
    ef8c:	|      move.l 24(a0),d0
    ef90:	|      move.l d0,-(sp)
    ef92:	|      pea 1 <_start+0x1>
    ef96:	|      lea 12(sp),a0
    ef9a:	|      move.l a0,-(sp)
    ef9c:	|      jsr 14cc8 <getValueType>
    efa2:	|      lea 12(sp),sp
    efa6:	|      tst.w d0
    efa8:	|  ,-- bne.s efb0 <builtIn_blankArea+0x64>
    efaa:	|  |   moveq #1,d0
    efac:	+--|-- bra.w f04e <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    efb0:	|  '-> moveq #24,d0
    efb2:	|      add.l 24(sp),d0
    efb6:	|      move.l d0,-(sp)
    efb8:	|      jsr 1564c <trimStack>
    efbe:	|      addq.l #4,sp
	if (! getValueType (&y1, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    efc0:	|      movea.l 24(sp),a0
    efc4:	|      move.l 24(a0),d0
    efc8:	|      move.l d0,-(sp)
    efca:	|      pea 1 <_start+0x1>
    efce:	|      moveq #16,d0
    efd0:	|      add.l sp,d0
    efd2:	|      move.l d0,-(sp)
    efd4:	|      jsr 14cc8 <getValueType>
    efda:	|      lea 12(sp),sp
    efde:	|      tst.w d0
    efe0:	|  ,-- bne.s efe6 <builtIn_blankArea+0x9a>
    efe2:	|  |   moveq #1,d0
    efe4:	+--|-- bra.s f04e <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    efe6:	|  '-> moveq #24,d0
    efe8:	|      add.l 24(sp),d0
    efec:	|      move.l d0,-(sp)
    efee:	|      jsr 1564c <trimStack>
    eff4:	|      addq.l #4,sp
	if (! getValueType (&x1, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    eff6:	|      movea.l 24(sp),a0
    effa:	|      move.l 24(a0),d0
    effe:	|      move.l d0,-(sp)
    f000:	|      pea 1 <_start+0x1>
    f004:	|      moveq #20,d0
    f006:	|      add.l sp,d0
    f008:	|      move.l d0,-(sp)
    f00a:	|      jsr 14cc8 <getValueType>
    f010:	|      lea 12(sp),sp
    f014:	|      tst.w d0
    f016:	|  ,-- bne.s f01c <builtIn_blankArea+0xd0>
    f018:	|  |   moveq #1,d0
    f01a:	+--|-- bra.s f04e <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    f01c:	|  '-> moveq #24,d0
    f01e:	|      add.l 24(sp),d0
    f022:	|      move.l d0,-(sp)
    f024:	|      jsr 1564c <trimStack>
    f02a:	|      addq.l #4,sp
	blankScreen (x1, y1, x2, y2);
    f02c:	|      movea.l (sp),a1
    f02e:	|      movea.l 4(sp),a0
    f032:	|      move.l 8(sp),d1
    f036:	|      move.l 12(sp),d0
    f03a:	|      move.l a1,-(sp)
    f03c:	|      move.l a0,-(sp)
    f03e:	|      move.l d1,-(sp)
    f040:	|      move.l d0,-(sp)
    f042:	|      jsr d6b2 <blankScreen>
    f048:	|      lea 16(sp),sp
	return BR_CONTINUE;
    f04c:	|      moveq #2,d0
}
    f04e:	'----> lea 16(sp),sp
    f052:	       rts

0000f054 <builtIn_darkBackground>:

builtIn(darkBackground)
{
	UNUSEDALL
	darkScreen ();
    f054:	jsr d6d0 <darkScreen>
	return BR_CONTINUE;
    f05a:	moveq #2,d0
}
    f05c:	rts

0000f05e <builtIn_addOverlay>:

builtIn(addOverlay)
{
    f05e:	       lea -12(sp),sp
	UNUSEDALL
	int fileNumber, xPos, yPos;
	if (! getValueType(&yPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f062:	       movea.l 20(sp),a0
    f066:	       move.l 24(a0),d0
    f06a:	       move.l d0,-(sp)
    f06c:	       pea 1 <_start+0x1>
    f070:	       lea 8(sp),a0
    f074:	       move.l a0,-(sp)
    f076:	       jsr 14cc8 <getValueType>
    f07c:	       lea 12(sp),sp
    f080:	       tst.w d0
    f082:	   ,-- bne.s f08a <builtIn_addOverlay+0x2c>
    f084:	   |   moveq #1,d0
    f086:	,--|-- bra.w f122 <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    f08a:	|  '-> moveq #24,d0
    f08c:	|      add.l 20(sp),d0
    f090:	|      move.l d0,-(sp)
    f092:	|      jsr 1564c <trimStack>
    f098:	|      addq.l #4,sp
	if (! getValueType(&xPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f09a:	|      movea.l 20(sp),a0
    f09e:	|      move.l 24(a0),d0
    f0a2:	|      move.l d0,-(sp)
    f0a4:	|      pea 1 <_start+0x1>
    f0a8:	|      moveq #12,d0
    f0aa:	|      add.l sp,d0
    f0ac:	|      move.l d0,-(sp)
    f0ae:	|      jsr 14cc8 <getValueType>
    f0b4:	|      lea 12(sp),sp
    f0b8:	|      tst.w d0
    f0ba:	|  ,-- bne.s f0c0 <builtIn_addOverlay+0x62>
    f0bc:	|  |   moveq #1,d0
    f0be:	+--|-- bra.s f122 <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    f0c0:	|  '-> moveq #24,d0
    f0c2:	|      add.l 20(sp),d0
    f0c6:	|      move.l d0,-(sp)
    f0c8:	|      jsr 1564c <trimStack>
    f0ce:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    f0d0:	|      movea.l 20(sp),a0
    f0d4:	|      move.l 24(a0),d0
    f0d8:	|      move.l d0,-(sp)
    f0da:	|      pea 5 <_start+0x5>
    f0de:	|      moveq #16,d0
    f0e0:	|      add.l sp,d0
    f0e2:	|      move.l d0,-(sp)
    f0e4:	|      jsr 14cc8 <getValueType>
    f0ea:	|      lea 12(sp),sp
    f0ee:	|      tst.w d0
    f0f0:	|  ,-- bne.s f0f6 <builtIn_addOverlay+0x98>
    f0f2:	|  |   moveq #1,d0
    f0f4:	+--|-- bra.s f122 <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    f0f6:	|  '-> moveq #24,d0
    f0f8:	|      add.l 20(sp),d0
    f0fc:	|      move.l d0,-(sp)
    f0fe:	|      jsr 1564c <trimStack>
    f104:	|      addq.l #4,sp
	loadBackDrop (fileNumber, xPos, yPos);
    f106:	|      movea.l (sp),a0
    f108:	|      move.l 4(sp),d1
    f10c:	|      move.l 8(sp),d0
    f110:	|      move.l a0,-(sp)
    f112:	|      move.l d1,-(sp)
    f114:	|      move.l d0,-(sp)
    f116:	|      jsr d7ee <loadBackDrop>
    f11c:	|      lea 12(sp),sp
	return BR_CONTINUE;
    f120:	|      moveq #2,d0
}
    f122:	'----> lea 12(sp),sp
    f126:	       rts

0000f128 <builtIn_mixOverlay>:

builtIn(mixOverlay)
{
    f128:	       lea -12(sp),sp
	UNUSEDALL
	int fileNumber, xPos, yPos;
	if (! getValueType(&yPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f12c:	       movea.l 20(sp),a0
    f130:	       move.l 24(a0),d0
    f134:	       move.l d0,-(sp)
    f136:	       pea 1 <_start+0x1>
    f13a:	       lea 8(sp),a0
    f13e:	       move.l a0,-(sp)
    f140:	       jsr 14cc8 <getValueType>
    f146:	       lea 12(sp),sp
    f14a:	       tst.w d0
    f14c:	   ,-- bne.s f154 <builtIn_mixOverlay+0x2c>
    f14e:	   |   moveq #1,d0
    f150:	,--|-- bra.w f1ec <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    f154:	|  '-> moveq #24,d0
    f156:	|      add.l 20(sp),d0
    f15a:	|      move.l d0,-(sp)
    f15c:	|      jsr 1564c <trimStack>
    f162:	|      addq.l #4,sp
	if (! getValueType(&xPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f164:	|      movea.l 20(sp),a0
    f168:	|      move.l 24(a0),d0
    f16c:	|      move.l d0,-(sp)
    f16e:	|      pea 1 <_start+0x1>
    f172:	|      moveq #12,d0
    f174:	|      add.l sp,d0
    f176:	|      move.l d0,-(sp)
    f178:	|      jsr 14cc8 <getValueType>
    f17e:	|      lea 12(sp),sp
    f182:	|      tst.w d0
    f184:	|  ,-- bne.s f18a <builtIn_mixOverlay+0x62>
    f186:	|  |   moveq #1,d0
    f188:	+--|-- bra.s f1ec <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    f18a:	|  '-> moveq #24,d0
    f18c:	|      add.l 20(sp),d0
    f190:	|      move.l d0,-(sp)
    f192:	|      jsr 1564c <trimStack>
    f198:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    f19a:	|      movea.l 20(sp),a0
    f19e:	|      move.l 24(a0),d0
    f1a2:	|      move.l d0,-(sp)
    f1a4:	|      pea 5 <_start+0x5>
    f1a8:	|      moveq #16,d0
    f1aa:	|      add.l sp,d0
    f1ac:	|      move.l d0,-(sp)
    f1ae:	|      jsr 14cc8 <getValueType>
    f1b4:	|      lea 12(sp),sp
    f1b8:	|      tst.w d0
    f1ba:	|  ,-- bne.s f1c0 <builtIn_mixOverlay+0x98>
    f1bc:	|  |   moveq #1,d0
    f1be:	+--|-- bra.s f1ec <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    f1c0:	|  '-> moveq #24,d0
    f1c2:	|      add.l 20(sp),d0
    f1c6:	|      move.l d0,-(sp)
    f1c8:	|      jsr 1564c <trimStack>
    f1ce:	|      addq.l #4,sp
	mixBackDrop (fileNumber, xPos, yPos);
    f1d0:	|      movea.l (sp),a0
    f1d2:	|      move.l 4(sp),d1
    f1d6:	|      move.l 8(sp),d0
    f1da:	|      move.l a0,-(sp)
    f1dc:	|      move.l d1,-(sp)
    f1de:	|      move.l d0,-(sp)
    f1e0:	|      jsr d864 <mixBackDrop>
    f1e6:	|      lea 12(sp),sp
	return BR_CONTINUE;
    f1ea:	|      moveq #2,d0
}
    f1ec:	'----> lea 12(sp),sp
    f1f0:	       rts

0000f1f2 <builtIn_pasteImage>:

builtIn(pasteImage)
{
    f1f2:	       lea -12(sp),sp
	UNUSEDALL
	//KPrintF("pasteimage: Started\n");
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f1f6:	       movea.l 20(sp),a0
    f1fa:	       move.l 24(a0),d0
    f1fe:	       move.l d0,-(sp)
    f200:	       pea 1 <_start+0x1>
    f204:	       lea 8(sp),a0
    f208:	       move.l a0,-(sp)
    f20a:	       jsr 14cc8 <getValueType>
    f210:	       lea 12(sp),sp
    f214:	       tst.w d0
    f216:	   ,-- bne.s f21e <builtIn_pasteImage+0x2c>
    f218:	   |   moveq #1,d0
    f21a:	,--|-- bra.w f2ae <builtIn_pasteImage+0xbc>
	trimStack (&fun -> stack);
    f21e:	|  '-> moveq #24,d0
    f220:	|      add.l 20(sp),d0
    f224:	|      move.l d0,-(sp)
    f226:	|      jsr 1564c <trimStack>
    f22c:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f22e:	|      movea.l 20(sp),a0
    f232:	|      move.l 24(a0),d0
    f236:	|      move.l d0,-(sp)
    f238:	|      pea 1 <_start+0x1>
    f23c:	|      moveq #12,d0
    f23e:	|      add.l sp,d0
    f240:	|      move.l d0,-(sp)
    f242:	|      jsr 14cc8 <getValueType>
    f248:	|      lea 12(sp),sp
    f24c:	|      tst.w d0
    f24e:	|  ,-- bne.s f254 <builtIn_pasteImage+0x62>
    f250:	|  |   moveq #1,d0
    f252:	+--|-- bra.s f2ae <builtIn_pasteImage+0xbc>
	trimStack (&fun -> stack);
    f254:	|  '-> moveq #24,d0
    f256:	|      add.l 20(sp),d0
    f25a:	|      move.l d0,-(sp)
    f25c:	|      jsr 1564c <trimStack>
    f262:	|      addq.l #4,sp
	struct personaAnimation * pp = getAnimationFromVar (&(fun -> stack -> thisVar));
    f264:	|      movea.l 20(sp),a0
    f268:	|      move.l 24(a0),d0
    f26c:	|      move.l d0,-(sp)
    f26e:	|      jsr 151a0 <getAnimationFromVar>
    f274:	|      addq.l #4,sp
    f276:	|      move.l d0,8(sp)
	trimStack (&fun -> stack);
    f27a:	|      moveq #24,d0
    f27c:	|      add.l 20(sp),d0
    f280:	|      move.l d0,-(sp)
    f282:	|      jsr 1564c <trimStack>
    f288:	|      addq.l #4,sp
	if (pp == NULL) return BR_CONTINUE;
    f28a:	|      tst.l 8(sp)
    f28e:	|  ,-- bne.s f294 <builtIn_pasteImage+0xa2>
    f290:	|  |   moveq #2,d0
    f292:	+--|-- bra.s f2ae <builtIn_pasteImage+0xbc>

	pasteCursor (x, y, pp);
    f294:	|  '-> move.l (sp),d1
    f296:	|      move.l 4(sp),d0
    f29a:	|      move.l 8(sp),-(sp)
    f29e:	|      move.l d1,-(sp)
    f2a0:	|      move.l d0,-(sp)
    f2a2:	|      jsr d94 <pasteCursor>
    f2a8:	|      lea 12(sp),sp
	//KPrintF("pasteimage: Finished\n");
	return BR_CONTINUE;	
    f2ac:	|      moveq #2,d0
}
    f2ae:	'----> lea 12(sp),sp
    f2b2:	       rts

0000f2b4 <builtIn_setSceneDimensions>:

#pragma mark -
#pragma mark Background Image - Scrolling

builtIn(setSceneDimensions)
{
    f2b4:	       subq.l #8,sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f2b6:	       movea.l 16(sp),a0
    f2ba:	       move.l 24(a0),d0
    f2be:	       move.l d0,-(sp)
    f2c0:	       pea 1 <_start+0x1>
    f2c4:	       move.l sp,d0
    f2c6:	       addq.l #8,d0
    f2c8:	       move.l d0,-(sp)
    f2ca:	       jsr 14cc8 <getValueType>
    f2d0:	       lea 12(sp),sp
    f2d4:	       tst.w d0
    f2d6:	   ,-- bne.s f2de <builtIn_setSceneDimensions+0x2a>
    f2d8:	   |   moveq #1,d0
    f2da:	,--|-- bra.w f366 <builtIn_setSceneDimensions+0xb2>
	trimStack (&fun -> stack);
    f2de:	|  '-> moveq #24,d0
    f2e0:	|      add.l 16(sp),d0
    f2e4:	|      move.l d0,-(sp)
    f2e6:	|      jsr 1564c <trimStack>
    f2ec:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f2ee:	|      movea.l 16(sp),a0
    f2f2:	|      move.l 24(a0),d0
    f2f6:	|      move.l d0,-(sp)
    f2f8:	|      pea 1 <_start+0x1>
    f2fc:	|      moveq #12,d0
    f2fe:	|      add.l sp,d0
    f300:	|      move.l d0,-(sp)
    f302:	|      jsr 14cc8 <getValueType>
    f308:	|      lea 12(sp),sp
    f30c:	|      tst.w d0
    f30e:	|  ,-- bne.s f314 <builtIn_setSceneDimensions+0x60>
    f310:	|  |   moveq #1,d0
    f312:	+--|-- bra.s f366 <builtIn_setSceneDimensions+0xb2>
	trimStack (&fun -> stack);
    f314:	|  '-> moveq #24,d0
    f316:	|      add.l 16(sp),d0
    f31a:	|      move.l d0,-(sp)
    f31c:	|      jsr 1564c <trimStack>
    f322:	|      addq.l #4,sp
	if (resizeBackdrop (x, y)) {
    f324:	|      move.l (sp),d1
    f326:	|      move.l 4(sp),d0
    f32a:	|      move.l d1,-(sp)
    f32c:	|      move.l d0,-(sp)
    f32e:	|      jsr d8ba <resizeBackdrop>
    f334:	|      addq.l #8,sp
    f336:	|      tst.w d0
    f338:	|  ,-- beq.s f356 <builtIn_setSceneDimensions+0xa2>
		blankScreen (0, 0, x, y);
    f33a:	|  |   move.l (sp),d1
    f33c:	|  |   move.l 4(sp),d0
    f340:	|  |   move.l d1,-(sp)
    f342:	|  |   move.l d0,-(sp)
    f344:	|  |   clr.l -(sp)
    f346:	|  |   clr.l -(sp)
    f348:	|  |   jsr d6b2 <blankScreen>
    f34e:	|  |   lea 16(sp),sp
		return BR_CONTINUE;
    f352:	|  |   moveq #2,d0
    f354:	+--|-- bra.s f366 <builtIn_setSceneDimensions+0xb2>
	}
	KPrintF("Out of memory creating new backdrop.");
    f356:	|  '-> pea 19eb3 <PutChar+0x1c69>
    f35c:	|      jsr 177a8 <KPrintF>
    f362:	|      addq.l #4,sp
	return BR_ERROR;
    f364:	|      moveq #1,d0
}
    f366:	'----> addq.l #8,sp
    f368:	       rts

0000f36a <builtIn_aimCamera>:

builtIn(aimCamera)
{
    f36a:	          move.l d3,-(sp)
    f36c:	          move.l d2,-(sp)
	UNUSEDALL
	if (! getValueType(&cameraY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f36e:	          movea.l 16(sp),a0
    f372:	          move.l 24(a0),d0
    f376:	          move.l d0,-(sp)
    f378:	          pea 1 <_start+0x1>
    f37c:	          pea 1d070 <cameraY>
    f382:	          jsr 14cc8 <getValueType>
    f388:	          lea 12(sp),sp
    f38c:	          tst.w d0
    f38e:	      ,-- bne.s f396 <builtIn_aimCamera+0x2c>
    f390:	      |   moveq #1,d0
    f392:	,-----|-- bra.w f618 <builtIn_aimCamera+0x2ae>
	trimStack (&fun -> stack);
    f396:	|     '-> moveq #24,d0
    f398:	|         add.l 16(sp),d0
    f39c:	|         move.l d0,-(sp)
    f39e:	|         jsr 1564c <trimStack>
    f3a4:	|         addq.l #4,sp
	if (! getValueType(&cameraX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f3a6:	|         movea.l 16(sp),a0
    f3aa:	|         move.l 24(a0),d0
    f3ae:	|         move.l d0,-(sp)
    f3b0:	|         pea 1 <_start+0x1>
    f3b4:	|         pea 1d06c <cameraX>
    f3ba:	|         jsr 14cc8 <getValueType>
    f3c0:	|         lea 12(sp),sp
    f3c4:	|         tst.w d0
    f3c6:	|     ,-- bne.s f3ce <builtIn_aimCamera+0x64>
    f3c8:	|     |   moveq #1,d0
    f3ca:	+-----|-- bra.w f618 <builtIn_aimCamera+0x2ae>
	trimStack (&fun -> stack);
    f3ce:	|     '-> moveq #24,d0
    f3d0:	|         add.l 16(sp),d0
    f3d4:	|         move.l d0,-(sp)
    f3d6:	|         jsr 1564c <trimStack>
    f3dc:	|         addq.l #4,sp

	cameraX -= (FLOAT)(winWidth >> 1)/ cameraZoom;
    f3de:	|         move.l 1d06c <cameraX>,d0
    f3e4:	|         move.l d0,-(sp)
    f3e6:	|         jsr 17bda <__floatsisf>
    f3ec:	|         addq.l #4,sp
    f3ee:	|         move.l d0,d2
    f3f0:	|         move.l 1cefe <winWidth>,d0
    f3f6:	|         lsr.l #1,d0
    f3f8:	|         move.l d0,-(sp)
    f3fa:	|         jsr 17c02 <__floatunsisf>
    f400:	|         addq.l #4,sp
    f402:	|         move.l d0,d1
    f404:	|         move.l 1c946 <cameraZoom>,d0
    f40a:	|         move.l d0,-(sp)
    f40c:	|         move.l d1,-(sp)
    f40e:	|         jsr 17a90 <__divsf3>
    f414:	|         addq.l #8,sp
    f416:	|         move.l d0,-(sp)
    f418:	|         move.l d2,-(sp)
    f41a:	|         jsr 17ece <__subsf3>
    f420:	|         addq.l #8,sp
    f422:	|         move.l d0,-(sp)
    f424:	|         jsr 17b72 <__fixsfsi>
    f42a:	|         addq.l #4,sp
    f42c:	|         move.l d0,1d06c <cameraX>
	cameraY -= (FLOAT)(winHeight >> 1)/ cameraZoom;
    f432:	|         move.l 1d070 <cameraY>,d0
    f438:	|         move.l d0,-(sp)
    f43a:	|         jsr 17bda <__floatsisf>
    f440:	|         addq.l #4,sp
    f442:	|         move.l d0,d2
    f444:	|         move.l 1cf02 <winHeight>,d0
    f44a:	|         lsr.l #1,d0
    f44c:	|         move.l d0,-(sp)
    f44e:	|         jsr 17c02 <__floatunsisf>
    f454:	|         addq.l #4,sp
    f456:	|         move.l d0,d1
    f458:	|         move.l 1c946 <cameraZoom>,d0
    f45e:	|         move.l d0,-(sp)
    f460:	|         move.l d1,-(sp)
    f462:	|         jsr 17a90 <__divsf3>
    f468:	|         addq.l #8,sp
    f46a:	|         move.l d0,-(sp)
    f46c:	|         move.l d2,-(sp)
    f46e:	|         jsr 17ece <__subsf3>
    f474:	|         addq.l #8,sp
    f476:	|         move.l d0,-(sp)
    f478:	|         jsr 17b72 <__fixsfsi>
    f47e:	|         addq.l #4,sp
    f480:	|         move.l d0,1d070 <cameraY>

	if (cameraX < 0) cameraX = 0;
    f486:	|         move.l 1d06c <cameraX>,d0
    f48c:	|     ,-- bpl.s f498 <builtIn_aimCamera+0x12e>
    f48e:	|     |   clr.l 1d06c <cameraX>
    f494:	|  ,--|-- bra.w f54e <builtIn_aimCamera+0x1e4>
	else if (cameraX > sceneWidth - (FLOAT)winWidth/ cameraZoom) cameraX = sceneWidth - (FLOAT)winWidth/ cameraZoom;
    f498:	|  |  '-> move.l 1d06c <cameraX>,d0
    f49e:	|  |      move.l d0,-(sp)
    f4a0:	|  |      jsr 17bda <__floatsisf>
    f4a6:	|  |      addq.l #4,sp
    f4a8:	|  |      move.l d0,d2
    f4aa:	|  |      move.l 1d04e <sceneWidth>,d0
    f4b0:	|  |      move.l d0,-(sp)
    f4b2:	|  |      jsr 17c02 <__floatunsisf>
    f4b8:	|  |      addq.l #4,sp
    f4ba:	|  |      move.l d0,d3
    f4bc:	|  |      move.l 1cefe <winWidth>,d0
    f4c2:	|  |      move.l d0,-(sp)
    f4c4:	|  |      jsr 17c02 <__floatunsisf>
    f4ca:	|  |      addq.l #4,sp
    f4cc:	|  |      move.l d0,d1
    f4ce:	|  |      move.l 1c946 <cameraZoom>,d0
    f4d4:	|  |      move.l d0,-(sp)
    f4d6:	|  |      move.l d1,-(sp)
    f4d8:	|  |      jsr 17a90 <__divsf3>
    f4de:	|  |      addq.l #8,sp
    f4e0:	|  |      move.l d0,-(sp)
    f4e2:	|  |      move.l d3,-(sp)
    f4e4:	|  |      jsr 17ece <__subsf3>
    f4ea:	|  |      addq.l #8,sp
    f4ec:	|  |      move.l d0,-(sp)
    f4ee:	|  |      move.l d2,-(sp)
    f4f0:	|  |      jsr 17d46 <__gtsf2>
    f4f6:	|  |      addq.l #8,sp
    f4f8:	|  |      tst.l d0
    f4fa:	|  +----- ble.s f54e <builtIn_aimCamera+0x1e4>
    f4fc:	|  |      move.l 1d04e <sceneWidth>,d0
    f502:	|  |      move.l d0,-(sp)
    f504:	|  |      jsr 17c02 <__floatunsisf>
    f50a:	|  |      addq.l #4,sp
    f50c:	|  |      move.l d0,d2
    f50e:	|  |      move.l 1cefe <winWidth>,d0
    f514:	|  |      move.l d0,-(sp)
    f516:	|  |      jsr 17c02 <__floatunsisf>
    f51c:	|  |      addq.l #4,sp
    f51e:	|  |      move.l d0,d1
    f520:	|  |      move.l 1c946 <cameraZoom>,d0
    f526:	|  |      move.l d0,-(sp)
    f528:	|  |      move.l d1,-(sp)
    f52a:	|  |      jsr 17a90 <__divsf3>
    f530:	|  |      addq.l #8,sp
    f532:	|  |      move.l d0,-(sp)
    f534:	|  |      move.l d2,-(sp)
    f536:	|  |      jsr 17ece <__subsf3>
    f53c:	|  |      addq.l #8,sp
    f53e:	|  |      move.l d0,-(sp)
    f540:	|  |      jsr 17b72 <__fixsfsi>
    f546:	|  |      addq.l #4,sp
    f548:	|  |      move.l d0,1d06c <cameraX>
	if (cameraY < 0) cameraY = 0;
    f54e:	|  '----> move.l 1d070 <cameraY>,d0
    f554:	|     ,-- bpl.s f560 <builtIn_aimCamera+0x1f6>
    f556:	|     |   clr.l 1d070 <cameraY>
    f55c:	|  ,--|-- bra.w f616 <builtIn_aimCamera+0x2ac>
	else if (cameraY > sceneHeight - (FLOAT)winHeight/ cameraZoom) cameraY = sceneHeight - (FLOAT)winHeight/ cameraZoom;
    f560:	|  |  '-> move.l 1d070 <cameraY>,d0
    f566:	|  |      move.l d0,-(sp)
    f568:	|  |      jsr 17bda <__floatsisf>
    f56e:	|  |      addq.l #4,sp
    f570:	|  |      move.l d0,d2
    f572:	|  |      move.l 1d052 <sceneHeight>,d0
    f578:	|  |      move.l d0,-(sp)
    f57a:	|  |      jsr 17c02 <__floatunsisf>
    f580:	|  |      addq.l #4,sp
    f582:	|  |      move.l d0,d3
    f584:	|  |      move.l 1cf02 <winHeight>,d0
    f58a:	|  |      move.l d0,-(sp)
    f58c:	|  |      jsr 17c02 <__floatunsisf>
    f592:	|  |      addq.l #4,sp
    f594:	|  |      move.l d0,d1
    f596:	|  |      move.l 1c946 <cameraZoom>,d0
    f59c:	|  |      move.l d0,-(sp)
    f59e:	|  |      move.l d1,-(sp)
    f5a0:	|  |      jsr 17a90 <__divsf3>
    f5a6:	|  |      addq.l #8,sp
    f5a8:	|  |      move.l d0,-(sp)
    f5aa:	|  |      move.l d3,-(sp)
    f5ac:	|  |      jsr 17ece <__subsf3>
    f5b2:	|  |      addq.l #8,sp
    f5b4:	|  |      move.l d0,-(sp)
    f5b6:	|  |      move.l d2,-(sp)
    f5b8:	|  |      jsr 17d46 <__gtsf2>
    f5be:	|  |      addq.l #8,sp
    f5c0:	|  |      tst.l d0
    f5c2:	|  +----- ble.s f616 <builtIn_aimCamera+0x2ac>
    f5c4:	|  |      move.l 1d052 <sceneHeight>,d0
    f5ca:	|  |      move.l d0,-(sp)
    f5cc:	|  |      jsr 17c02 <__floatunsisf>
    f5d2:	|  |      addq.l #4,sp
    f5d4:	|  |      move.l d0,d2
    f5d6:	|  |      move.l 1cf02 <winHeight>,d0
    f5dc:	|  |      move.l d0,-(sp)
    f5de:	|  |      jsr 17c02 <__floatunsisf>
    f5e4:	|  |      addq.l #4,sp
    f5e6:	|  |      move.l d0,d1
    f5e8:	|  |      move.l 1c946 <cameraZoom>,d0
    f5ee:	|  |      move.l d0,-(sp)
    f5f0:	|  |      move.l d1,-(sp)
    f5f2:	|  |      jsr 17a90 <__divsf3>
    f5f8:	|  |      addq.l #8,sp
    f5fa:	|  |      move.l d0,-(sp)
    f5fc:	|  |      move.l d2,-(sp)
    f5fe:	|  |      jsr 17ece <__subsf3>
    f604:	|  |      addq.l #8,sp
    f606:	|  |      move.l d0,-(sp)
    f608:	|  |      jsr 17b72 <__fixsfsi>
    f60e:	|  |      addq.l #4,sp
    f610:	|  |      move.l d0,1d070 <cameraY>
	return BR_CONTINUE;
    f616:	|  '----> moveq #2,d0
}
    f618:	'-------> move.l (sp)+,d2
    f61a:	          move.l (sp)+,d3
    f61c:	          rts

0000f61e <builtIn_zoomCamera>:


builtIn(zoomCamera)
{
    f61e:	       subq.l #4,sp
    f620:	       move.l d2,-(sp)
	UNUSEDALL
	int z;
	if (! getValueType(&z, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f622:	       movea.l 16(sp),a0
    f626:	       move.l 24(a0),d0
    f62a:	       move.l d0,-(sp)
    f62c:	       pea 1 <_start+0x1>
    f630:	       moveq #12,d0
    f632:	       add.l sp,d0
    f634:	       move.l d0,-(sp)
    f636:	       jsr 14cc8 <getValueType>
    f63c:	       lea 12(sp),sp
    f640:	       tst.w d0
    f642:	   ,-- bne.s f64a <builtIn_zoomCamera+0x2c>
    f644:	   |   moveq #1,d0
    f646:	,--|-- bra.w f844 <builtIn_zoomCamera+0x226>
	trimStack (&fun -> stack);
    f64a:	|  '-> moveq #24,d0
    f64c:	|      add.l 16(sp),d0
    f650:	|      move.l d0,-(sp)
    f652:	|      jsr 1564c <trimStack>
    f658:	|      addq.l #4,sp

	input.mouseX = input.mouseX * cameraZoom;
    f65a:	|      move.l 1cf6e <input+0xa>,d0
    f660:	|      move.l d0,-(sp)
    f662:	|      jsr 17bda <__floatsisf>
    f668:	|      addq.l #4,sp
    f66a:	|      move.l d0,d1
    f66c:	|      move.l 1c946 <cameraZoom>,d0
    f672:	|      move.l d0,-(sp)
    f674:	|      move.l d1,-(sp)
    f676:	|      jsr 17c8c <__mulsf3>
    f67c:	|      addq.l #8,sp
    f67e:	|      move.l d0,-(sp)
    f680:	|      jsr 17b72 <__fixsfsi>
    f686:	|      addq.l #4,sp
    f688:	|      move.l d0,1cf6e <input+0xa>
	input.mouseY = input.mouseY * cameraZoom;
    f68e:	|      move.l 1cf72 <input+0xe>,d0
    f694:	|      move.l d0,-(sp)
    f696:	|      jsr 17bda <__floatsisf>
    f69c:	|      addq.l #4,sp
    f69e:	|      move.l d0,d1
    f6a0:	|      move.l 1c946 <cameraZoom>,d0
    f6a6:	|      move.l d0,-(sp)
    f6a8:	|      move.l d1,-(sp)
    f6aa:	|      jsr 17c8c <__mulsf3>
    f6b0:	|      addq.l #8,sp
    f6b2:	|      move.l d0,-(sp)
    f6b4:	|      jsr 17b72 <__fixsfsi>
    f6ba:	|      addq.l #4,sp
    f6bc:	|      move.l d0,1cf72 <input+0xe>


	cameraZoom = (FLOAT) z * (FLOAT) 0.01;
    f6c2:	|      move.l 4(sp),d0
    f6c6:	|      move.l d0,-(sp)
    f6c8:	|      jsr 17bda <__floatsisf>
    f6ce:	|      addq.l #4,sp
    f6d0:	|      move.l #1008981770,-(sp)
    f6d6:	|      move.l d0,-(sp)
    f6d8:	|      jsr 17c8c <__mulsf3>
    f6de:	|      addq.l #8,sp
    f6e0:	|      move.l d0,1c946 <cameraZoom>
	if ((FLOAT) winWidth / cameraZoom > sceneWidth) cameraZoom = (FLOAT)winWidth / sceneWidth;
    f6e6:	|      move.l 1cefe <winWidth>,d0
    f6ec:	|      move.l d0,-(sp)
    f6ee:	|      jsr 17c02 <__floatunsisf>
    f6f4:	|      addq.l #4,sp
    f6f6:	|      move.l d0,d1
    f6f8:	|      move.l 1c946 <cameraZoom>,d0
    f6fe:	|      move.l d0,-(sp)
    f700:	|      move.l d1,-(sp)
    f702:	|      jsr 17a90 <__divsf3>
    f708:	|      addq.l #8,sp
    f70a:	|      move.l d0,d2
    f70c:	|      move.l 1d04e <sceneWidth>,d0
    f712:	|      move.l d0,-(sp)
    f714:	|      jsr 17c02 <__floatunsisf>
    f71a:	|      addq.l #4,sp
    f71c:	|      move.l d0,-(sp)
    f71e:	|      move.l d2,-(sp)
    f720:	|      jsr 17d46 <__gtsf2>
    f726:	|      addq.l #8,sp
    f728:	|      tst.l d0
    f72a:	|  ,-- ble.s f760 <builtIn_zoomCamera+0x142>
    f72c:	|  |   move.l 1cefe <winWidth>,d0
    f732:	|  |   move.l d0,-(sp)
    f734:	|  |   jsr 17c02 <__floatunsisf>
    f73a:	|  |   addq.l #4,sp
    f73c:	|  |   move.l d0,d2
    f73e:	|  |   move.l 1d04e <sceneWidth>,d0
    f744:	|  |   move.l d0,-(sp)
    f746:	|  |   jsr 17c02 <__floatunsisf>
    f74c:	|  |   addq.l #4,sp
    f74e:	|  |   move.l d0,-(sp)
    f750:	|  |   move.l d2,-(sp)
    f752:	|  |   jsr 17a90 <__divsf3>
    f758:	|  |   addq.l #8,sp
    f75a:	|  |   move.l d0,1c946 <cameraZoom>
	if ((FLOAT) winHeight / cameraZoom > sceneHeight) cameraZoom = (FLOAT)winHeight / sceneHeight;
    f760:	|  '-> move.l 1cf02 <winHeight>,d0
    f766:	|      move.l d0,-(sp)
    f768:	|      jsr 17c02 <__floatunsisf>
    f76e:	|      addq.l #4,sp
    f770:	|      move.l d0,d1
    f772:	|      move.l 1c946 <cameraZoom>,d0
    f778:	|      move.l d0,-(sp)
    f77a:	|      move.l d1,-(sp)
    f77c:	|      jsr 17a90 <__divsf3>
    f782:	|      addq.l #8,sp
    f784:	|      move.l d0,d2
    f786:	|      move.l 1d052 <sceneHeight>,d0
    f78c:	|      move.l d0,-(sp)
    f78e:	|      jsr 17c02 <__floatunsisf>
    f794:	|      addq.l #4,sp
    f796:	|      move.l d0,-(sp)
    f798:	|      move.l d2,-(sp)
    f79a:	|      jsr 17d46 <__gtsf2>
    f7a0:	|      addq.l #8,sp
    f7a2:	|      tst.l d0
    f7a4:	|  ,-- ble.s f7da <builtIn_zoomCamera+0x1bc>
    f7a6:	|  |   move.l 1cf02 <winHeight>,d0
    f7ac:	|  |   move.l d0,-(sp)
    f7ae:	|  |   jsr 17c02 <__floatunsisf>
    f7b4:	|  |   addq.l #4,sp
    f7b6:	|  |   move.l d0,d2
    f7b8:	|  |   move.l 1d052 <sceneHeight>,d0
    f7be:	|  |   move.l d0,-(sp)
    f7c0:	|  |   jsr 17c02 <__floatunsisf>
    f7c6:	|  |   addq.l #4,sp
    f7c8:	|  |   move.l d0,-(sp)
    f7ca:	|  |   move.l d2,-(sp)
    f7cc:	|  |   jsr 17a90 <__divsf3>
    f7d2:	|  |   addq.l #8,sp
    f7d4:	|  |   move.l d0,1c946 <cameraZoom>
	//setPixelCoords (FALSE); Todo: Amigize this

	input.mouseX = input.mouseX / cameraZoom;
    f7da:	|  '-> move.l 1cf6e <input+0xa>,d0
    f7e0:	|      move.l d0,-(sp)
    f7e2:	|      jsr 17bda <__floatsisf>
    f7e8:	|      addq.l #4,sp
    f7ea:	|      move.l d0,d1
    f7ec:	|      move.l 1c946 <cameraZoom>,d0
    f7f2:	|      move.l d0,-(sp)
    f7f4:	|      move.l d1,-(sp)
    f7f6:	|      jsr 17a90 <__divsf3>
    f7fc:	|      addq.l #8,sp
    f7fe:	|      move.l d0,-(sp)
    f800:	|      jsr 17b72 <__fixsfsi>
    f806:	|      addq.l #4,sp
    f808:	|      move.l d0,1cf6e <input+0xa>
	input.mouseY = input.mouseY / cameraZoom;
    f80e:	|      move.l 1cf72 <input+0xe>,d0
    f814:	|      move.l d0,-(sp)
    f816:	|      jsr 17bda <__floatsisf>
    f81c:	|      addq.l #4,sp
    f81e:	|      move.l d0,d1
    f820:	|      move.l 1c946 <cameraZoom>,d0
    f826:	|      move.l d0,-(sp)
    f828:	|      move.l d1,-(sp)
    f82a:	|      jsr 17a90 <__divsf3>
    f830:	|      addq.l #8,sp
    f832:	|      move.l d0,-(sp)
    f834:	|      jsr 17b72 <__fixsfsi>
    f83a:	|      addq.l #4,sp
    f83c:	|      move.l d0,1cf72 <input+0xe>

	return BR_CONTINUE;
    f842:	|      moveq #2,d0
}
    f844:	'----> move.l (sp)+,d2
    f846:	       addq.l #4,sp
    f848:	       rts

0000f84a <builtIn_pickOne>:
#pragma mark -
#pragma mark Variables


builtIn(pickOne)
{
    f84a:	             subq.l #4,sp
	UNUSEDALL
	if (! numParams) {
    f84c:	             tst.l 8(sp)
    f850:	         ,-- bne.s f864 <builtIn_pickOne+0x1a>
		KPrintF ("Built-in function should have at least 1 parameter");
    f852:	         |   pea 19ed8 <PutChar+0x1c8e>
    f858:	         |   jsr 177a8 <KPrintF>
    f85e:	         |   addq.l #4,sp
		return BR_ERROR;
    f860:	         |   moveq #1,d0
    f862:	,--------|-- bra.s f8c4 <builtIn_pickOne+0x7a>
	}
	int i = rand() % numParams;
    f864:	|        '-> jsr 16368 <rand>
    f86a:	|            move.l d0,d1
    f86c:	|            move.l 8(sp),d0
    f870:	|            move.l d0,-(sp)
    f872:	|            move.l d1,-(sp)
    f874:	|            jsr 1820e <__umodsi3>
    f87a:	|            addq.l #8,sp
    f87c:	|            move.l d0,(sp)

	// Return value
	while (numParams --) {
    f87e:	|     ,----- bra.s f8b2 <builtIn_pickOne+0x68>
		if (i == numParams) copyVariable (&(fun -> stack -> thisVar), &fun -> reg);
    f880:	|  ,--|----> move.l (sp),d0
    f882:	|  |  |      cmp.l 8(sp),d0
    f886:	|  |  |  ,-- bne.s f8a2 <builtIn_pickOne+0x58>
    f888:	|  |  |  |   moveq #28,d0
    f88a:	|  |  |  |   add.l 12(sp),d0
    f88e:	|  |  |  |   movea.l 12(sp),a0
    f892:	|  |  |  |   move.l 24(a0),d1
    f896:	|  |  |  |   move.l d0,-(sp)
    f898:	|  |  |  |   move.l d1,-(sp)
    f89a:	|  |  |  |   jsr 15182 <copyVariable>
    f8a0:	|  |  |  |   addq.l #8,sp
		trimStack (&fun -> stack);
    f8a2:	|  |  |  '-> moveq #24,d0
    f8a4:	|  |  |      add.l 12(sp),d0
    f8a8:	|  |  |      move.l d0,-(sp)
    f8aa:	|  |  |      jsr 1564c <trimStack>
    f8b0:	|  |  |      addq.l #4,sp
	while (numParams --) {
    f8b2:	|  |  '----> move.l 8(sp),d0
    f8b6:	|  |         move.l d0,d1
    f8b8:	|  |         subq.l #1,d1
    f8ba:	|  |         move.l d1,8(sp)
    f8be:	|  |         tst.l d0
    f8c0:	|  '-------- bne.s f880 <builtIn_pickOne+0x36>
	}
	return BR_CONTINUE;
    f8c2:	|            moveq #2,d0
}
    f8c4:	'----------> addq.l #4,sp
    f8c6:	             rts

0000f8c8 <builtIn_substring>:

builtIn(substring)
{
    f8c8:	       lea -40(sp),sp
    f8cc:	       move.l a6,-(sp)
    f8ce:	       move.l d2,-(sp)
    char *newString;
    int start, length;

    //debugOut ("BUILTIN: substring\n");

    if (!getValueType(&length, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    f8d0:	       movea.l 56(sp),a0
    f8d4:	       move.l 24(a0),d0
    f8d8:	       move.l d0,-(sp)
    f8da:	       pea 1 <_start+0x1>
    f8de:	       lea 16(sp),a0
    f8e2:	       move.l a0,-(sp)
    f8e4:	       jsr 14cc8 <getValueType>
    f8ea:	       lea 12(sp),sp
    f8ee:	       tst.w d0
    f8f0:	   ,-- bne.s f8f8 <builtIn_substring+0x30>
    f8f2:	   |   moveq #1,d0
    f8f4:	,--|-- bra.w fa70 <builtIn_substring+0x1a8>
    trimStack(&fun->stack);
    f8f8:	|  '-> moveq #24,d0
    f8fa:	|      add.l 56(sp),d0
    f8fe:	|      move.l d0,-(sp)
    f900:	|      jsr 1564c <trimStack>
    f906:	|      addq.l #4,sp
    if (!getValueType(&start, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    f908:	|      movea.l 56(sp),a0
    f90c:	|      move.l 24(a0),d0
    f910:	|      move.l d0,-(sp)
    f912:	|      pea 1 <_start+0x1>
    f916:	|      lea 20(sp),a0
    f91a:	|      move.l a0,-(sp)
    f91c:	|      jsr 14cc8 <getValueType>
    f922:	|      lea 12(sp),sp
    f926:	|      tst.w d0
    f928:	|  ,-- bne.s f930 <builtIn_substring+0x68>
    f92a:	|  |   moveq #1,d0
    f92c:	+--|-- bra.w fa70 <builtIn_substring+0x1a8>
    trimStack(&fun->stack);
    f930:	|  '-> moveq #24,d0
    f932:	|      add.l 56(sp),d0
    f936:	|      move.l d0,-(sp)
    f938:	|      jsr 1564c <trimStack>
    f93e:	|      addq.l #4,sp
    wholeString = getTextFromAnyVar(&(fun->stack->thisVar));
    f940:	|      movea.l 56(sp),a0
    f944:	|      move.l 24(a0),d0
    f948:	|      move.l d0,-(sp)
    f94a:	|      jsr 1529e <getTextFromAnyVar>
    f950:	|      addq.l #4,sp
    f952:	|      move.l d0,44(sp)
    trimStack(&fun->stack);
    f956:	|      moveq #24,d0
    f958:	|      add.l 56(sp),d0
    f95c:	|      move.l d0,-(sp)
    f95e:	|      jsr 1564c <trimStack>
    f964:	|      addq.l #4,sp
    
    if (strlen(wholeString) < (ULONG) start + length) {
    f966:	|      move.l 44(sp),-(sp)
    f96a:	|      jsr 141b4 <strlen>
    f970:	|      addq.l #4,sp
    f972:	|      move.l d0,d1
    f974:	|      move.l 12(sp),d0
    f978:	|      movea.l d0,a0
    f97a:	|      move.l 8(sp),d0
    f97e:	|      add.l a0,d0
    f980:	|      cmp.l d1,d0
    f982:	|  ,-- bls.s f9b8 <builtIn_substring+0xf0>
        length = strlen(wholeString) - start;
    f984:	|  |   move.l 44(sp),-(sp)
    f988:	|  |   jsr 141b4 <strlen>
    f98e:	|  |   addq.l #4,sp
    f990:	|  |   move.l d0,d1
    f992:	|  |   move.l 12(sp),d0
    f996:	|  |   sub.l d0,d1
    f998:	|  |   move.l d1,d0
    f99a:	|  |   move.l d0,8(sp)
        if (strlen(wholeString) < (ULONG) start) {
    f99e:	|  |   move.l 44(sp),-(sp)
    f9a2:	|  |   jsr 141b4 <strlen>
    f9a8:	|  |   addq.l #4,sp
    f9aa:	|  |   move.l d0,d1
    f9ac:	|  |   move.l 12(sp),d0
    f9b0:	|  |   cmp.l d1,d0
    f9b2:	|  +-- bls.s f9b8 <builtIn_substring+0xf0>
            start = 0;
    f9b4:	|  |   clr.l 12(sp)
        }
    }
    if (length < 0) {
    f9b8:	|  '-> move.l 8(sp),d0
    f9bc:	|  ,-- bpl.s f9c2 <builtIn_substring+0xfa>
        length = 0;
    f9be:	|  |   clr.l 8(sp)
    }
    
    int startoffset = start;
    f9c2:	|  '-> move.l 12(sp),40(sp)
    int endoffset = start + length;
    f9c8:	|      move.l 12(sp),d1
    f9cc:	|      move.l 8(sp),d0
    f9d0:	|      move.l d1,d2
    f9d2:	|      add.l d0,d2
    f9d4:	|      move.l d2,36(sp)

    newString = AllocVec(endoffset - startoffset + 1, MEMF_ANY);
    f9d8:	|      move.l 36(sp),d0
    f9dc:	|      sub.l 40(sp),d0
    f9e0:	|      addq.l #1,d0
    f9e2:	|      move.l d0,32(sp)
    f9e6:	|      clr.l 28(sp)
    f9ea:	|      move.l 1cfb6 <SysBase>,d0
    f9f0:	|      movea.l d0,a6
    f9f2:	|      move.l 32(sp),d0
    f9f6:	|      move.l 28(sp),d1
    f9fa:	|      jsr -684(a6)
    f9fe:	|      move.l d0,24(sp)
    fa02:	|      move.l 24(sp),d0
    fa06:	|      move.l d0,20(sp)
    if (!newString) {
    fa0a:	|  ,-- bne.s fa10 <builtIn_substring+0x148>
        return BR_ERROR;
    fa0c:	|  |   moveq #1,d0
    fa0e:	+--|-- bra.s fa70 <builtIn_substring+0x1a8>
    }
    
    memcpy(newString, wholeString + startoffset, endoffset - startoffset);
    fa10:	|  '-> move.l 36(sp),d0
    fa14:	|      sub.l 40(sp),d0
    fa18:	|      move.l d0,d1
    fa1a:	|      move.l 40(sp),d0
    fa1e:	|      add.l 44(sp),d0
    fa22:	|      move.l d1,-(sp)
    fa24:	|      move.l d0,-(sp)
    fa26:	|      move.l 28(sp),-(sp)
    fa2a:	|      jsr 1775c <memcpy>
    fa30:	|      lea 12(sp),sp
    newString[endoffset - startoffset] = 0;
    fa34:	|      move.l 36(sp),d0
    fa38:	|      sub.l 40(sp),d0
    fa3c:	|      movea.l 20(sp),a0
    fa40:	|      adda.l d0,a0
    fa42:	|      clr.b (a0)
    
    makeTextVar(&fun->reg, newString);
    fa44:	|      moveq #28,d0
    fa46:	|      add.l 56(sp),d0
    fa4a:	|      move.l 20(sp),-(sp)
    fa4e:	|      move.l d0,-(sp)
    fa50:	|      jsr 14eea <makeTextVar>
    fa56:	|      addq.l #8,sp
    FreeVec(newString);
    fa58:	|      move.l 20(sp),16(sp)
    fa5e:	|      move.l 1cfb6 <SysBase>,d0
    fa64:	|      movea.l d0,a6
    fa66:	|      movea.l 16(sp),a1
    fa6a:	|      jsr -690(a6)
    return BR_CONTINUE;
    fa6e:	|      moveq #2,d0
}
    fa70:	'----> move.l (sp)+,d2
    fa72:	       movea.l (sp)+,a6
    fa74:	       lea 40(sp),sp
    fa78:	       rts

0000fa7a <builtIn_stringLength>:

builtIn(stringLength)
{
    fa7a:	subq.l #8,sp
    fa7c:	move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    fa7e:	movea.l 20(sp),a0
    fa82:	move.l 24(a0),d0
    fa86:	move.l d0,-(sp)
    fa88:	jsr 1529e <getTextFromAnyVar>
    fa8e:	addq.l #4,sp
    fa90:	move.l d0,8(sp)
	trimStack (&fun -> stack);
    fa94:	moveq #24,d0
    fa96:	add.l 20(sp),d0
    fa9a:	move.l d0,-(sp)
    fa9c:	jsr 1564c <trimStack>
    faa2:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, strlen(newText));
    faa4:	move.l 8(sp),-(sp)
    faa8:	jsr 141b4 <strlen>
    faae:	addq.l #4,sp
    fab0:	move.l d0,d1
    fab2:	moveq #28,d0
    fab4:	add.l 20(sp),d0
    fab8:	move.l d1,-(sp)
    faba:	pea 1 <_start+0x1>
    fabe:	move.l d0,-(sp)
    fac0:	jsr 155ba <setVariable>
    fac6:	lea 12(sp),sp
	FreeVec(newText);
    faca:	move.l 8(sp),4(sp)
    fad0:	move.l 1cfb6 <SysBase>,d0
    fad6:	movea.l d0,a6
    fad8:	movea.l 4(sp),a1
    fadc:	jsr -690(a6)
	return BR_CONTINUE;
    fae0:	moveq #2,d0
}
    fae2:	movea.l (sp)+,a6
    fae4:	addq.l #8,sp
    fae6:	rts

0000fae8 <builtIn_newStack>:

builtIn(newStack)
{
    fae8:	             lea -12(sp),sp
    faec:	             move.l a6,-(sp)
    UNUSEDALL
    unlinkVar(&fun->reg);
    faee:	             moveq #28,d0
    faf0:	             add.l 24(sp),d0
    faf4:	             move.l d0,-(sp)
    faf6:	             jsr 14f16 <unlinkVar>
    fafc:	             addq.l #4,sp

    // Return value
    fun->reg.varType = SVT_STACK;
    fafe:	             movea.l 24(sp),a0
    fb02:	             moveq #6,d0
    fb04:	             move.l d0,28(a0)
    fun->reg.varData.theStack = AllocVec(sizeof(struct stackHandler), MEMF_ANY);
    fb08:	             moveq #12,d1
    fb0a:	             move.l d1,12(sp)
    fb0e:	             clr.l 8(sp)
    fb12:	             move.l 1cfb6 <SysBase>,d0
    fb18:	             movea.l d0,a6
    fb1a:	             move.l 12(sp),d0
    fb1e:	             move.l 8(sp),d1
    fb22:	             jsr -684(a6)
    fb26:	             move.l d0,4(sp)
    fb2a:	             move.l 4(sp),d0
    fb2e:	             movea.l 24(sp),a0
    fb32:	             move.l d0,32(a0)
    if (!fun->reg.varData.theStack) return BR_ERROR;
    fb36:	             movea.l 24(sp),a0
    fb3a:	             move.l 32(a0),d0
    fb3e:	         ,-- bne.s fb46 <builtIn_newStack+0x5e>
    fb40:	         |   moveq #1,d0
    fb42:	,--------|-- bra.w fbd8 <builtIn_newStack+0xf0>
    fun->reg.varData.theStack->first = NULL;
    fb46:	|        '-> movea.l 24(sp),a0
    fb4a:	|            movea.l 32(a0),a0
    fb4e:	|            clr.l (a0)
    fun->reg.varData.theStack->last = NULL;
    fb50:	|            movea.l 24(sp),a0
    fb54:	|            movea.l 32(a0),a0
    fb58:	|            clr.l 4(a0)
    fun->reg.varData.theStack->timesUsed = 1;
    fb5c:	|            movea.l 24(sp),a0
    fb60:	|            movea.l 32(a0),a0
    fb64:	|            moveq #1,d0
    fb66:	|            move.l d0,8(a0)
    
    while (numParams--) {
    fb6a:	|     ,----- bra.s fbc6 <builtIn_newStack+0xde>
        if (!addVarToStack(&fun->stack->thisVar, &fun->reg.varData.theStack->first)) return BR_ERROR;
    fb6c:	|  ,--|----> movea.l 24(sp),a0
    fb70:	|  |  |      move.l 32(a0),d0
    fb74:	|  |  |      move.l d0,d1
    fb76:	|  |  |      movea.l 24(sp),a0
    fb7a:	|  |  |      move.l 24(a0),d0
    fb7e:	|  |  |      move.l d1,-(sp)
    fb80:	|  |  |      move.l d0,-(sp)
    fb82:	|  |  |      jsr 14504 <addVarToStack>
    fb88:	|  |  |      addq.l #8,sp
    fb8a:	|  |  |      tst.w d0
    fb8c:	|  |  |  ,-- bne.s fb92 <builtIn_newStack+0xaa>
    fb8e:	|  |  |  |   moveq #1,d0
    fb90:	+--|--|--|-- bra.s fbd8 <builtIn_newStack+0xf0>
        if (fun->reg.varData.theStack->last == NULL) {
    fb92:	|  |  |  '-> movea.l 24(sp),a0
    fb96:	|  |  |      movea.l 32(a0),a0
    fb9a:	|  |  |      move.l 4(a0),d0
    fb9e:	|  |  |  ,-- bne.s fbb6 <builtIn_newStack+0xce>
            fun->reg.varData.theStack->last = fun->reg.varData.theStack->first;
    fba0:	|  |  |  |   movea.l 24(sp),a0
    fba4:	|  |  |  |   movea.l 32(a0),a1
    fba8:	|  |  |  |   movea.l 24(sp),a0
    fbac:	|  |  |  |   movea.l 32(a0),a0
    fbb0:	|  |  |  |   move.l (a1),d0
    fbb2:	|  |  |  |   move.l d0,4(a0)
        }
        trimStack(&fun->stack);
    fbb6:	|  |  |  '-> moveq #24,d0
    fbb8:	|  |  |      add.l 24(sp),d0
    fbbc:	|  |  |      move.l d0,-(sp)
    fbbe:	|  |  |      jsr 1564c <trimStack>
    fbc4:	|  |  |      addq.l #4,sp
    while (numParams--) {
    fbc6:	|  |  '----> move.l 20(sp),d0
    fbca:	|  |         move.l d0,d1
    fbcc:	|  |         subq.l #1,d1
    fbce:	|  |         move.l d1,20(sp)
    fbd2:	|  |         tst.l d0
    fbd4:	|  '-------- bne.s fb6c <builtIn_newStack+0x84>
    }
    return BR_CONTINUE;
    fbd6:	|            moveq #2,d0
}
    fbd8:	'----------> movea.l (sp)+,a6
    fbda:	             lea 12(sp),sp
    fbde:	             rts

0000fbe0 <builtIn_stackSize>:
#define builtIn_wait builtIn_newStack

builtIn(stackSize)
{
	UNUSEDALL
	switch (fun -> stack -> thisVar.varType) {
    fbe0:	          movea.l 8(sp),a0
    fbe4:	          movea.l 24(a0),a0
    fbe8:	          move.l (a0),d0
    fbea:	          moveq #6,d1
    fbec:	          cmp.l d0,d1
    fbee:	      ,-- beq.s fc0a <builtIn_stackSize+0x2a>
    fbf0:	      |   moveq #10,d1
    fbf2:	      |   cmp.l d0,d1
    fbf4:	   ,--|-- beq.s fc4e <builtIn_stackSize+0x6e>
			setVariable (&fun -> reg, SVT_INT, fun -> stack -> thisVar.varData.fastArray -> size);
			trimStack (&fun -> stack);
			return BR_CONTINUE;

		default:
			break;
    fbf6:	   |  |   nop
	}
	KPrintF ("Parameter isn't a stack or a fast array.");
    fbf8:	   |  |   pea 19f0b <PutChar+0x1cc1>
    fbfe:	   |  |   jsr 177a8 <KPrintF>
    fc04:	   |  |   addq.l #4,sp
	return BR_ERROR;
    fc06:	   |  |   moveq #1,d0
    fc08:	,--|--|-- bra.s fc88 <builtIn_stackSize+0xa8>
			setVariable (&fun -> reg, SVT_INT, stackSize (fun -> stack -> thisVar.varData.theStack));
    fc0a:	|  |  '-> movea.l 8(sp),a0
    fc0e:	|  |      movea.l 24(a0),a0
    fc12:	|  |      move.l 4(a0),d0
    fc16:	|  |      move.l d0,-(sp)
    fc18:	|  |      jsr 15628 <stackSize>
    fc1e:	|  |      addq.l #4,sp
    fc20:	|  |      move.l d0,d1
    fc22:	|  |      moveq #28,d0
    fc24:	|  |      add.l 8(sp),d0
    fc28:	|  |      move.l d1,-(sp)
    fc2a:	|  |      pea 1 <_start+0x1>
    fc2e:	|  |      move.l d0,-(sp)
    fc30:	|  |      jsr 155ba <setVariable>
    fc36:	|  |      lea 12(sp),sp
			trimStack (&fun -> stack);
    fc3a:	|  |      moveq #24,d0
    fc3c:	|  |      add.l 8(sp),d0
    fc40:	|  |      move.l d0,-(sp)
    fc42:	|  |      jsr 1564c <trimStack>
    fc48:	|  |      addq.l #4,sp
			return BR_CONTINUE;
    fc4a:	|  |      moveq #2,d0
    fc4c:	+--|----- bra.s fc88 <builtIn_stackSize+0xa8>
			setVariable (&fun -> reg, SVT_INT, fun -> stack -> thisVar.varData.fastArray -> size);
    fc4e:	|  '----> movea.l 8(sp),a0
    fc52:	|         movea.l 24(a0),a0
    fc56:	|         movea.l 4(a0),a0
    fc5a:	|         move.l 4(a0),d1
    fc5e:	|         moveq #28,d0
    fc60:	|         add.l 8(sp),d0
    fc64:	|         move.l d1,-(sp)
    fc66:	|         pea 1 <_start+0x1>
    fc6a:	|         move.l d0,-(sp)
    fc6c:	|         jsr 155ba <setVariable>
    fc72:	|         lea 12(sp),sp
			trimStack (&fun -> stack);
    fc76:	|         moveq #24,d0
    fc78:	|         add.l 8(sp),d0
    fc7c:	|         move.l d0,-(sp)
    fc7e:	|         jsr 1564c <trimStack>
    fc84:	|         addq.l #4,sp
			return BR_CONTINUE;
    fc86:	|         moveq #2,d0
}
    fc88:	'-------> rts

0000fc8a <builtIn_copyStack>:

builtIn(copyStack)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    fc8a:	       movea.l 8(sp),a0
    fc8e:	       movea.l 24(a0),a0
    fc92:	       move.l (a0),d0
    fc94:	       moveq #6,d1
    fc96:	       cmp.l d0,d1
    fc98:	   ,-- beq.s fcac <builtIn_copyStack+0x22>
		KPrintF ("Parameter isn't a stack.");
    fc9a:	   |   pea 19f34 <PutChar+0x1cea>
    fca0:	   |   jsr 177a8 <KPrintF>
    fca6:	   |   addq.l #4,sp
		return BR_ERROR;
    fca8:	   |   moveq #1,d0
    fcaa:	,--|-- bra.s fce0 <builtIn_copyStack+0x56>
	}
	// Return value
	if (! copyStack (&fun -> stack -> thisVar, &fun -> reg)) return BR_ERROR;
    fcac:	|  '-> moveq #28,d0
    fcae:	|      add.l 8(sp),d0
    fcb2:	|      movea.l 8(sp),a0
    fcb6:	|      move.l 24(a0),d1
    fcba:	|      move.l d0,-(sp)
    fcbc:	|      move.l d1,-(sp)
    fcbe:	|      jsr 147ce <copyStack>
    fcc4:	|      addq.l #8,sp
    fcc6:	|      tst.w d0
    fcc8:	|  ,-- bne.s fcce <builtIn_copyStack+0x44>
    fcca:	|  |   moveq #1,d0
    fccc:	+--|-- bra.s fce0 <builtIn_copyStack+0x56>
	trimStack (&fun -> stack);
    fcce:	|  '-> moveq #24,d0
    fcd0:	|      add.l 8(sp),d0
    fcd4:	|      move.l d0,-(sp)
    fcd6:	|      jsr 1564c <trimStack>
    fcdc:	|      addq.l #4,sp
	return BR_CONTINUE;
    fcde:	|      moveq #2,d0
}
    fce0:	'----> rts

0000fce2 <builtIn_pushToStack>:

builtIn(pushToStack)
{
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    fce2:	       movea.l 8(sp),a0
    fce6:	       movea.l 24(a0),a0
    fcea:	       movea.l 8(a0),a0
    fcee:	       move.l (a0),d0
    fcf0:	       moveq #6,d1
    fcf2:	       cmp.l d0,d1
    fcf4:	   ,-- beq.s fd0a <builtIn_pushToStack+0x28>
		KPrintF("Parameter isn't a stack");
    fcf6:	   |   pea 19f4d <PutChar+0x1d03>
    fcfc:	   |   jsr 177a8 <KPrintF>
    fd02:	   |   addq.l #4,sp
		return BR_ERROR;
    fd04:	   |   moveq #1,d0
    fd06:	,--|-- bra.w fd98 <builtIn_pushToStack+0xb6>
	}

	if (! addVarToStack (&fun -> stack -> thisVar, &fun -> stack -> next -> thisVar.varData.theStack -> first))
    fd0a:	|  '-> movea.l 8(sp),a0
    fd0e:	|      movea.l 24(a0),a0
    fd12:	|      movea.l 8(a0),a0
    fd16:	|      move.l 4(a0),d0
    fd1a:	|      move.l d0,d1
    fd1c:	|      movea.l 8(sp),a0
    fd20:	|      move.l 24(a0),d0
    fd24:	|      move.l d1,-(sp)
    fd26:	|      move.l d0,-(sp)
    fd28:	|      jsr 14504 <addVarToStack>
    fd2e:	|      addq.l #8,sp
    fd30:	|      tst.w d0
    fd32:	|  ,-- bne.s fd38 <builtIn_pushToStack+0x56>
		return BR_ERROR;
    fd34:	|  |   moveq #1,d0
    fd36:	+--|-- bra.s fd98 <builtIn_pushToStack+0xb6>

	if (fun -> stack -> next -> thisVar.varData.theStack -> first -> next == NULL)
    fd38:	|  '-> movea.l 8(sp),a0
    fd3c:	|      movea.l 24(a0),a0
    fd40:	|      movea.l 8(a0),a0
    fd44:	|      movea.l 4(a0),a0
    fd48:	|      movea.l (a0),a0
    fd4a:	|      move.l 8(a0),d0
    fd4e:	|  ,-- bne.s fd76 <builtIn_pushToStack+0x94>
		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> first;
    fd50:	|  |   movea.l 8(sp),a0
    fd54:	|  |   movea.l 24(a0),a0
    fd58:	|  |   movea.l 8(a0),a0
    fd5c:	|  |   movea.l 4(a0),a1
    fd60:	|  |   movea.l 8(sp),a0
    fd64:	|  |   movea.l 24(a0),a0
    fd68:	|  |   movea.l 8(a0),a0
    fd6c:	|  |   movea.l 4(a0),a0
    fd70:	|  |   move.l (a1),d0
    fd72:	|  |   move.l d0,4(a0)

	trimStack (&fun -> stack);
    fd76:	|  '-> moveq #24,d0
    fd78:	|      add.l 8(sp),d0
    fd7c:	|      move.l d0,-(sp)
    fd7e:	|      jsr 1564c <trimStack>
    fd84:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    fd86:	|      moveq #24,d0
    fd88:	|      add.l 8(sp),d0
    fd8c:	|      move.l d0,-(sp)
    fd8e:	|      jsr 1564c <trimStack>
    fd94:	|      addq.l #4,sp
	return BR_CONTINUE;
    fd96:	|      moveq #2,d0
}
    fd98:	'----> rts

0000fd9a <builtIn_enqueue>:

builtIn(enqueue)
{
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    fd9a:	             movea.l 8(sp),a0
    fd9e:	             movea.l 24(a0),a0
    fda2:	             movea.l 8(a0),a0
    fda6:	             move.l (a0),d0
    fda8:	             moveq #6,d1
    fdaa:	             cmp.l d0,d1
    fdac:	         ,-- beq.s fdc2 <builtIn_enqueue+0x28>
		KPrintF ("Parameter isn't a stack");
    fdae:	         |   pea 19f4d <PutChar+0x1d03>
    fdb4:	         |   jsr 177a8 <KPrintF>
    fdba:	         |   addq.l #4,sp
		return BR_ERROR;
    fdbc:	         |   moveq #1,d0
    fdbe:	,--------|-- bra.w feb0 <builtIn_enqueue+0x116>
	}

	if (fun -> stack -> next -> thisVar.varData.theStack -> first == NULL)
    fdc2:	|        '-> movea.l 8(sp),a0
    fdc6:	|            movea.l 24(a0),a0
    fdca:	|            movea.l 8(a0),a0
    fdce:	|            movea.l 4(a0),a0
    fdd2:	|            move.l (a0),d0
    fdd4:	|     ,----- bne.s fe2e <builtIn_enqueue+0x94>
	{
		if (! addVarToStack (&fun -> stack -> thisVar, &fun -> stack -> next -> thisVar.varData.theStack -> first))
    fdd6:	|     |      movea.l 8(sp),a0
    fdda:	|     |      movea.l 24(a0),a0
    fdde:	|     |      movea.l 8(a0),a0
    fde2:	|     |      move.l 4(a0),d0
    fde6:	|     |      move.l d0,d1
    fde8:	|     |      movea.l 8(sp),a0
    fdec:	|     |      move.l 24(a0),d0
    fdf0:	|     |      move.l d1,-(sp)
    fdf2:	|     |      move.l d0,-(sp)
    fdf4:	|     |      jsr 14504 <addVarToStack>
    fdfa:	|     |      addq.l #8,sp
    fdfc:	|     |      tst.w d0
    fdfe:	|     |  ,-- bne.s fe06 <builtIn_enqueue+0x6c>
			return BR_ERROR;
    fe00:	|     |  |   moveq #1,d0
    fe02:	+-----|--|-- bra.w feb0 <builtIn_enqueue+0x116>

		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> first;
    fe06:	|     |  '-> movea.l 8(sp),a0
    fe0a:	|     |      movea.l 24(a0),a0
    fe0e:	|     |      movea.l 8(a0),a0
    fe12:	|     |      movea.l 4(a0),a1
    fe16:	|     |      movea.l 8(sp),a0
    fe1a:	|     |      movea.l 24(a0),a0
    fe1e:	|     |      movea.l 8(a0),a0
    fe22:	|     |      movea.l 4(a0),a0
    fe26:	|     |      move.l (a1),d0
    fe28:	|     |      move.l d0,4(a0)
    fe2c:	|  ,--|----- bra.s fe8e <builtIn_enqueue+0xf4>
	}
	else
	{
		if (! addVarToStack (&fun -> stack -> thisVar,
							 &fun -> stack -> next -> thisVar.varData.theStack -> last -> next))
    fe2e:	|  |  '----> movea.l 8(sp),a0
    fe32:	|  |         movea.l 24(a0),a0
    fe36:	|  |         movea.l 8(a0),a0
    fe3a:	|  |         movea.l 4(a0),a0
    fe3e:	|  |         move.l 4(a0),d0
		if (! addVarToStack (&fun -> stack -> thisVar,
    fe42:	|  |         move.l d0,d1
    fe44:	|  |         addq.l #8,d1
    fe46:	|  |         movea.l 8(sp),a0
    fe4a:	|  |         move.l 24(a0),d0
    fe4e:	|  |         move.l d1,-(sp)
    fe50:	|  |         move.l d0,-(sp)
    fe52:	|  |         jsr 14504 <addVarToStack>
    fe58:	|  |         addq.l #8,sp
    fe5a:	|  |         tst.w d0
    fe5c:	|  |     ,-- bne.s fe62 <builtIn_enqueue+0xc8>
			return BR_ERROR;
    fe5e:	|  |     |   moveq #1,d0
    fe60:	+--|-----|-- bra.s feb0 <builtIn_enqueue+0x116>
		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> last -> next;
    fe62:	|  |     '-> movea.l 8(sp),a0
    fe66:	|  |         movea.l 24(a0),a0
    fe6a:	|  |         movea.l 8(a0),a0
    fe6e:	|  |         movea.l 4(a0),a0
    fe72:	|  |         movea.l 4(a0),a1
    fe76:	|  |         movea.l 8(sp),a0
    fe7a:	|  |         movea.l 24(a0),a0
    fe7e:	|  |         movea.l 8(a0),a0
    fe82:	|  |         movea.l 4(a0),a0
    fe86:	|  |         move.l 8(a1),d0
    fe8a:	|  |         move.l d0,4(a0)
	}

	trimStack (&fun -> stack);
    fe8e:	|  '-------> moveq #24,d0
    fe90:	|            add.l 8(sp),d0
    fe94:	|            move.l d0,-(sp)
    fe96:	|            jsr 1564c <trimStack>
    fe9c:	|            addq.l #4,sp
	trimStack (&fun -> stack);
    fe9e:	|            moveq #24,d0
    fea0:	|            add.l 8(sp),d0
    fea4:	|            move.l d0,-(sp)
    fea6:	|            jsr 1564c <trimStack>
    feac:	|            addq.l #4,sp
	return BR_CONTINUE;
    feae:	|            moveq #2,d0
}
    feb0:	'----------> rts

0000feb2 <builtIn_deleteFromStack>:

builtIn(deleteFromStack)
{
    feb2:	       move.l a2,-(sp)
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    feb4:	       movea.l 12(sp),a0
    feb8:	       movea.l 24(a0),a0
    febc:	       movea.l 8(a0),a0
    fec0:	       move.l (a0),d0
    fec2:	       moveq #6,d1
    fec4:	       cmp.l d0,d1
    fec6:	   ,-- beq.s fedc <builtIn_deleteFromStack+0x2a>
		KPrintF ("Parameter isn't a stack.");
    fec8:	   |   pea 19f34 <PutChar+0x1cea>
    fece:	   |   jsr 177a8 <KPrintF>
    fed4:	   |   addq.l #4,sp
		return BR_ERROR;
    fed6:	   |   moveq #1,d0
    fed8:	,--|-- bra.w ff72 <builtIn_deleteFromStack+0xc0>
	}

	// Return value
	setVariable (&fun -> reg, SVT_INT,
				 deleteVarFromStack (&fun -> stack -> thisVar,
									 &fun -> stack -> next -> thisVar.varData.theStack -> first, FALSE));
    fedc:	|  '-> movea.l 12(sp),a0
    fee0:	|      movea.l 24(a0),a0
    fee4:	|      movea.l 8(a0),a0
    fee8:	|      move.l 4(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    feec:	|      move.l d0,d1
				 deleteVarFromStack (&fun -> stack -> thisVar,
    feee:	|      movea.l 12(sp),a0
    fef2:	|      move.l 24(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    fef6:	|      clr.l -(sp)
    fef8:	|      move.l d1,-(sp)
    fefa:	|      move.l d0,-(sp)
    fefc:	|      jsr 148a4 <deleteVarFromStack>
    ff02:	|      lea 12(sp),sp
    ff06:	|      move.l d0,d1
    ff08:	|      moveq #28,d0
    ff0a:	|      add.l 12(sp),d0
    ff0e:	|      move.l d1,-(sp)
    ff10:	|      pea 1 <_start+0x1>
    ff14:	|      move.l d0,-(sp)
    ff16:	|      jsr 155ba <setVariable>
    ff1c:	|      lea 12(sp),sp

	// Horrible hacking because 'last' value might now be wrong!
	fun->stack->next->thisVar.varData.theStack->last = stackFindLast (fun->stack->next->thisVar.varData.theStack->first);
    ff20:	|      movea.l 12(sp),a0
    ff24:	|      movea.l 24(a0),a0
    ff28:	|      movea.l 8(a0),a0
    ff2c:	|      movea.l 4(a0),a0
    ff30:	|      move.l (a0),d0
    ff32:	|      movea.l 12(sp),a0
    ff36:	|      movea.l 24(a0),a0
    ff3a:	|      movea.l 8(a0),a0
    ff3e:	|      movea.l 4(a0),a2
    ff42:	|      move.l d0,-(sp)
    ff44:	|      jsr 15604 <stackFindLast>
    ff4a:	|      addq.l #4,sp
    ff4c:	|      move.l d0,4(a2)

	trimStack (&fun -> stack);
    ff50:	|      moveq #24,d0
    ff52:	|      add.l 12(sp),d0
    ff56:	|      move.l d0,-(sp)
    ff58:	|      jsr 1564c <trimStack>
    ff5e:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    ff60:	|      moveq #24,d0
    ff62:	|      add.l 12(sp),d0
    ff66:	|      move.l d0,-(sp)
    ff68:	|      jsr 1564c <trimStack>
    ff6e:	|      addq.l #4,sp
	return BR_CONTINUE;
    ff70:	|      moveq #2,d0
}
    ff72:	'----> movea.l (sp)+,a2
    ff74:	       rts

0000ff76 <builtIn_deleteAllFromStack>:

builtIn(deleteAllFromStack)
{
    ff76:	       move.l a2,-(sp)
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    ff78:	       movea.l 12(sp),a0
    ff7c:	       movea.l 24(a0),a0
    ff80:	       movea.l 8(a0),a0
    ff84:	       move.l (a0),d0
    ff86:	       moveq #6,d1
    ff88:	       cmp.l d0,d1
    ff8a:	   ,-- beq.s ffa0 <builtIn_deleteAllFromStack+0x2a>
		KPrintF ("Parameter isn't a stack.");
    ff8c:	   |   pea 19f34 <PutChar+0x1cea>
    ff92:	   |   jsr 177a8 <KPrintF>
    ff98:	   |   addq.l #4,sp
		return BR_ERROR;
    ff9a:	   |   moveq #1,d0
    ff9c:	,--|-- bra.w 10038 <builtIn_deleteAllFromStack+0xc2>
	}

	// Return value
	setVariable (&fun -> reg, SVT_INT,
				 deleteVarFromStack (&fun -> stack -> thisVar,
									 &fun -> stack -> next -> thisVar.varData.theStack -> first, TRUE));
    ffa0:	|  '-> movea.l 12(sp),a0
    ffa4:	|      movea.l 24(a0),a0
    ffa8:	|      movea.l 8(a0),a0
    ffac:	|      move.l 4(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    ffb0:	|      move.l d0,d1
				 deleteVarFromStack (&fun -> stack -> thisVar,
    ffb2:	|      movea.l 12(sp),a0
    ffb6:	|      move.l 24(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    ffba:	|      pea 1 <_start+0x1>
    ffbe:	|      move.l d1,-(sp)
    ffc0:	|      move.l d0,-(sp)
    ffc2:	|      jsr 148a4 <deleteVarFromStack>
    ffc8:	|      lea 12(sp),sp
    ffcc:	|      move.l d0,d1
    ffce:	|      moveq #28,d0
    ffd0:	|      add.l 12(sp),d0
    ffd4:	|      move.l d1,-(sp)
    ffd6:	|      pea 1 <_start+0x1>
    ffda:	|      move.l d0,-(sp)
    ffdc:	|      jsr 155ba <setVariable>
    ffe2:	|      lea 12(sp),sp

	// Horrible hacking because 'last' value might now be wrong!
	fun->stack->next->thisVar.varData.theStack->last = stackFindLast (fun->stack->next->thisVar.varData.theStack->first);
    ffe6:	|      movea.l 12(sp),a0
    ffea:	|      movea.l 24(a0),a0
    ffee:	|      movea.l 8(a0),a0
    fff2:	|      movea.l 4(a0),a0
    fff6:	|      move.l (a0),d0
    fff8:	|      movea.l 12(sp),a0
    fffc:	|      movea.l 24(a0),a0
   10000:	|      movea.l 8(a0),a0
   10004:	|      movea.l 4(a0),a2
   10008:	|      move.l d0,-(sp)
   1000a:	|      jsr 15604 <stackFindLast>
   10010:	|      addq.l #4,sp
   10012:	|      move.l d0,4(a2)

	trimStack (&fun -> stack);
   10016:	|      moveq #24,d0
   10018:	|      add.l 12(sp),d0
   1001c:	|      move.l d0,-(sp)
   1001e:	|      jsr 1564c <trimStack>
   10024:	|      addq.l #4,sp
	trimStack (&fun -> stack);
   10026:	|      moveq #24,d0
   10028:	|      add.l 12(sp),d0
   1002c:	|      move.l d0,-(sp)
   1002e:	|      jsr 1564c <trimStack>
   10034:	|      addq.l #4,sp
	return BR_CONTINUE;
   10036:	|      moveq #2,d0
} 
   10038:	'----> movea.l (sp)+,a2
   1003a:	       rts

0001003c <builtIn_popFromStack>:

builtIn(popFromStack)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
   1003c:	       movea.l 8(sp),a0
   10040:	       movea.l 24(a0),a0
   10044:	       move.l (a0),d0
   10046:	       moveq #6,d1
   10048:	       cmp.l d0,d1
   1004a:	   ,-- beq.s 1005e <builtIn_popFromStack+0x22>
		KPrintF ("Parameter isn't a stack.");
   1004c:	   |   pea 19f34 <PutChar+0x1cea>
   10052:	   |   jsr 177a8 <KPrintF>
   10058:	   |   addq.l #4,sp
		return BR_ERROR;
   1005a:	   |   moveq #1,d0
   1005c:	,--|-- bra.s 100c8 <builtIn_popFromStack+0x8c>
	}	
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
   1005e:	|  '-> movea.l 8(sp),a0
   10062:	|      movea.l 24(a0),a0
   10066:	|      movea.l 4(a0),a0
   1006a:	|      move.l (a0),d0
   1006c:	|  ,-- bne.s 10080 <builtIn_popFromStack+0x44>
		KPrintF ("The stack's empty.");
   1006e:	|  |   pea 19f65 <PutChar+0x1d1b>
   10074:	|  |   jsr 177a8 <KPrintF>
   1007a:	|  |   addq.l #4,sp
		return BR_ERROR;
   1007c:	|  |   moveq #1,d0
   1007e:	+--|-- bra.s 100c8 <builtIn_popFromStack+0x8c>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> first -> thisVar), &fun -> reg);
   10080:	|  '-> moveq #28,d0
   10082:	|      add.l 8(sp),d0
   10086:	|      movea.l 8(sp),a0
   1008a:	|      movea.l 24(a0),a0
   1008e:	|      movea.l 4(a0),a0
   10092:	|      move.l (a0),d1
   10094:	|      move.l d0,-(sp)
   10096:	|      move.l d1,-(sp)
   10098:	|      jsr 15182 <copyVariable>
   1009e:	|      addq.l #8,sp
	trimStack (&fun -> stack -> thisVar.varData.theStack -> first);
   100a0:	|      movea.l 8(sp),a0
   100a4:	|      movea.l 24(a0),a0
   100a8:	|      move.l 4(a0),d0
   100ac:	|      move.l d0,-(sp)
   100ae:	|      jsr 1564c <trimStack>
   100b4:	|      addq.l #4,sp
	trimStack (&fun -> stack);
   100b6:	|      moveq #24,d0
   100b8:	|      add.l 8(sp),d0
   100bc:	|      move.l d0,-(sp)
   100be:	|      jsr 1564c <trimStack>
   100c4:	|      addq.l #4,sp
	return BR_CONTINUE;
   100c6:	|      moveq #2,d0
}
   100c8:	'----> rts

000100ca <builtIn_peekStart>:

builtIn(peekStart)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
   100ca:	       movea.l 8(sp),a0
   100ce:	       movea.l 24(a0),a0
   100d2:	       move.l (a0),d0
   100d4:	       moveq #6,d1
   100d6:	       cmp.l d0,d1
   100d8:	   ,-- beq.s 100ec <builtIn_peekStart+0x22>
		KPrintF ("Parameter isn't a stack.");
   100da:	   |   pea 19f34 <PutChar+0x1cea>
   100e0:	   |   jsr 177a8 <KPrintF>
   100e6:	   |   addq.l #4,sp
		return BR_ERROR;
   100e8:	   |   moveq #1,d0
   100ea:	,--|-- bra.s 10140 <builtIn_peekStart+0x76>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
   100ec:	|  '-> movea.l 8(sp),a0
   100f0:	|      movea.l 24(a0),a0
   100f4:	|      movea.l 4(a0),a0
   100f8:	|      move.l (a0),d0
   100fa:	|  ,-- bne.s 1010e <builtIn_peekStart+0x44>
		KPrintF ("The stack's empty.");
   100fc:	|  |   pea 19f65 <PutChar+0x1d1b>
   10102:	|  |   jsr 177a8 <KPrintF>
   10108:	|  |   addq.l #4,sp
		return BR_ERROR;
   1010a:	|  |   moveq #1,d0
   1010c:	+--|-- bra.s 10140 <builtIn_peekStart+0x76>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> first -> thisVar), &fun -> reg);
   1010e:	|  '-> moveq #28,d0
   10110:	|      add.l 8(sp),d0
   10114:	|      movea.l 8(sp),a0
   10118:	|      movea.l 24(a0),a0
   1011c:	|      movea.l 4(a0),a0
   10120:	|      move.l (a0),d1
   10122:	|      move.l d0,-(sp)
   10124:	|      move.l d1,-(sp)
   10126:	|      jsr 15182 <copyVariable>
   1012c:	|      addq.l #8,sp
	trimStack (&fun -> stack);
   1012e:	|      moveq #24,d0
   10130:	|      add.l 8(sp),d0
   10134:	|      move.l d0,-(sp)
   10136:	|      jsr 1564c <trimStack>
   1013c:	|      addq.l #4,sp
	return BR_CONTINUE;
   1013e:	|      moveq #2,d0
}
   10140:	'----> rts

00010142 <builtIn_peekEnd>:

builtIn(peekEnd)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
   10142:	       movea.l 8(sp),a0
   10146:	       movea.l 24(a0),a0
   1014a:	       move.l (a0),d0
   1014c:	       moveq #6,d1
   1014e:	       cmp.l d0,d1
   10150:	   ,-- beq.s 10164 <builtIn_peekEnd+0x22>
		KPrintF ("Parameter isn't a stack.");
   10152:	   |   pea 19f34 <PutChar+0x1cea>
   10158:	   |   jsr 177a8 <KPrintF>
   1015e:	   |   addq.l #4,sp
		return BR_ERROR;
   10160:	   |   moveq #1,d0
   10162:	,--|-- bra.s 101ba <builtIn_peekEnd+0x78>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
   10164:	|  '-> movea.l 8(sp),a0
   10168:	|      movea.l 24(a0),a0
   1016c:	|      movea.l 4(a0),a0
   10170:	|      move.l (a0),d0
   10172:	|  ,-- bne.s 10186 <builtIn_peekEnd+0x44>
		KPrintF ("The stack's empty.");
   10174:	|  |   pea 19f65 <PutChar+0x1d1b>
   1017a:	|  |   jsr 177a8 <KPrintF>
   10180:	|  |   addq.l #4,sp
		return BR_ERROR;
   10182:	|  |   moveq #1,d0
   10184:	+--|-- bra.s 101ba <builtIn_peekEnd+0x78>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> last -> thisVar), &fun -> reg);
   10186:	|  '-> moveq #28,d0
   10188:	|      add.l 8(sp),d0
   1018c:	|      movea.l 8(sp),a0
   10190:	|      movea.l 24(a0),a0
   10194:	|      movea.l 4(a0),a0
   10198:	|      move.l 4(a0),d1
   1019c:	|      move.l d0,-(sp)
   1019e:	|      move.l d1,-(sp)
   101a0:	|      jsr 15182 <copyVariable>
   101a6:	|      addq.l #8,sp
	trimStack (&fun -> stack);
   101a8:	|      moveq #24,d0
   101aa:	|      add.l 8(sp),d0
   101ae:	|      move.l d0,-(sp)
   101b0:	|      jsr 1564c <trimStack>
   101b6:	|      addq.l #4,sp
	return BR_CONTINUE;
   101b8:	|      moveq #2,d0
}
   101ba:	'----> rts

000101bc <builtIn_random>:

builtIn(random)
{
   101bc:	       subq.l #4,sp
	UNUSEDALL
	int num;

	if (! getValueType(&num, SVT_INT,&fun -> stack -> thisVar))
   101be:	       movea.l 12(sp),a0
   101c2:	       move.l 24(a0),d0
   101c6:	       move.l d0,-(sp)
   101c8:	       pea 1 <_start+0x1>
   101cc:	       move.l sp,d0
   101ce:	       addq.l #8,d0
   101d0:	       move.l d0,-(sp)
   101d2:	       jsr 14cc8 <getValueType>
   101d8:	       lea 12(sp),sp
   101dc:	       tst.w d0
   101de:	   ,-- bne.s 101e4 <builtIn_random+0x28>
		return BR_ERROR;
   101e0:	   |   moveq #1,d0
   101e2:	,--|-- bra.s 1022e <builtIn_random+0x72>

	trimStack (&fun -> stack);
   101e4:	|  '-> moveq #24,d0
   101e6:	|      add.l 12(sp),d0
   101ea:	|      move.l d0,-(sp)
   101ec:	|      jsr 1564c <trimStack>
   101f2:	|      addq.l #4,sp
	if (num <= 0) num = 1;
   101f4:	|      move.l (sp),d0
   101f6:	|  ,-- bgt.s 101fc <builtIn_random+0x40>
   101f8:	|  |   moveq #1,d0
   101fa:	|  |   move.l d0,(sp)
	setVariable (&fun -> reg, SVT_INT, rand() % num);
   101fc:	|  '-> jsr 16368 <rand>
   10202:	|      move.l d0,d1
   10204:	|      move.l (sp),d0
   10206:	|      move.l d0,-(sp)
   10208:	|      move.l d1,-(sp)
   1020a:	|      jsr 1820e <__umodsi3>
   10210:	|      addq.l #8,sp
   10212:	|      move.l d0,d1
   10214:	|      moveq #28,d0
   10216:	|      add.l 12(sp),d0
   1021a:	|      move.l d1,-(sp)
   1021c:	|      pea 1 <_start+0x1>
   10220:	|      move.l d0,-(sp)
   10222:	|      jsr 155ba <setVariable>
   10228:	|      lea 12(sp),sp
	return BR_CONTINUE;
   1022c:	|      moveq #2,d0
}
   1022e:	'----> addq.l #4,sp
   10230:	       rts

00010232 <builtIn_setStatusColour>:
	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	statusBarColour ((byte) red, (byte) green, (byte) blue);
	return BR_CONTINUE; ToDo amigize this?*/
}
   10232:	nop
   10234:	rts

00010236 <builtIn_setLitStatusColour>:

	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	statusBarLitColour ((byte) red, (byte) green, (byte) blue);Todo - Amigize this?*/
	return BR_CONTINUE;
   10236:	moveq #2,d0
}
   10238:	rts

0001023a <builtIn_setPasteColour>:

builtIn (setPasteColour)
{
   1023a:	       subq.l #4,sp
	UNUSEDALL
	int index;

	if (! getValueType ( &index, SVT_INT, &fun -> stack -> thisVar)) {
   1023c:	       movea.l 12(sp),a0
   10240:	       move.l 24(a0),d0
   10244:	       move.l d0,-(sp)
   10246:	       pea 1 <_start+0x1>
   1024a:	       move.l sp,d0
   1024c:	       addq.l #8,d0
   1024e:	       move.l d0,-(sp)
   10250:	       jsr 14cc8 <getValueType>
   10256:	       lea 12(sp),sp
   1025a:	       tst.w d0
   1025c:	   ,-- bne.s 10270 <builtIn_setPasteColour+0x36>
		KPrintF ("setPasteColour: Parameter not a number");
   1025e:	   |   pea 19f78 <PutChar+0x1d2e>
   10264:	   |   jsr 177a8 <KPrintF>
   1026a:	   |   addq.l #4,sp
		return BR_ERROR;
   1026c:	   |   moveq #1,d0
   1026e:	,--|-- bra.s 102b0 <builtIn_setPasteColour+0x76>
	}
	trimStack (&fun -> stack);
   10270:	|  '-> moveq #24,d0
   10272:	|      add.l 12(sp),d0
   10276:	|      move.l d0,-(sp)
   10278:	|      jsr 1564c <trimStack>
   1027e:	|      addq.l #4,sp


	textPaletteIndex = (UWORD)index;
   10280:	|      move.l (sp),d0
   10282:	|      move.l d0,d0
   10284:	|      move.w d0,1cec2 <textPaletteIndex>

	if( textPaletteIndex > 31) {
   1028a:	|      move.w 1cec2 <textPaletteIndex>,d0
   10290:	|      cmpi.w #31,d0
   10294:	|  ,-- bls.s 102ae <builtIn_setPasteColour+0x74>
		KPrintF ("setPasteColour: Paletteindex out of Range");
   10296:	|  |   pea 19f9f <PutChar+0x1d55>
   1029c:	|  |   jsr 177a8 <KPrintF>
   102a2:	|  |   addq.l #4,sp
		textPaletteIndex = 0;
   102a4:	|  |   clr.w 1cec2 <textPaletteIndex>
		return BR_ERROR;
   102aa:	|  |   moveq #1,d0
   102ac:	+--|-- bra.s 102b0 <builtIn_setPasteColour+0x76>
	}

	//setFontColour (pastePalette, (byte) red, (byte) green, (byte) blue);
	return BR_CONTINUE;
   102ae:	|  '-> moveq #2,d0
}
   102b0:	'----> addq.l #4,sp
   102b2:	       rts

000102b4 <builtIn_setBlankColour>:
	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	currentBlankColour = makeColour (red & 255, green & 255, blue & 255);
	setVariable (&fun -> reg, SVT_INT, 1);Todo Amigize this?*/
	return BR_CONTINUE;
   102b4:	moveq #2,d0
}
   102b6:	rts

000102b8 <builtIn_setBurnColour>:

	currentBurnR = red;
	currentBurnG = green;
	currentBurnB = blue;
	setVariable (&fun -> reg, SVT_INT, 1);Todo Amigize this?*/
	return BR_CONTINUE;
   102b8:	moveq #2,d0
}
   102ba:	rts

000102bc <builtIn_setFont>:


builtIn(setFont)
{
   102bc:	       lea -16(sp),sp
   102c0:	       move.l a6,-(sp)
    UNUSEDALL
    int fileNumber, newHeight;
    if (!getValueType(&newHeight, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
   102c2:	       movea.l 28(sp),a0
   102c6:	       move.l 24(a0),d0
   102ca:	       move.l d0,-(sp)
   102cc:	       pea 1 <_start+0x1>
   102d0:	       lea 12(sp),a0
   102d4:	       move.l a0,-(sp)
   102d6:	       jsr 14cc8 <getValueType>
   102dc:	       lea 12(sp),sp
   102e0:	       tst.w d0
   102e2:	   ,-- bne.s 102ea <builtIn_setFont+0x2e>
   102e4:	   |   moveq #1,d0
   102e6:	,--|-- bra.w 10398 <builtIn_setFont+0xdc>
    //              KPrintF("  Height: %d\n", newHeight);
    trimStack(&fun->stack);
   102ea:	|  '-> moveq #24,d0
   102ec:	|      add.l 28(sp),d0
   102f0:	|      move.l d0,-(sp)
   102f2:	|      jsr 1564c <trimStack>
   102f8:	|      addq.l #4,sp
    char *newText = getTextFromAnyVar(&(fun->stack->thisVar));
   102fa:	|      movea.l 28(sp),a0
   102fe:	|      move.l 24(a0),d0
   10302:	|      move.l d0,-(sp)
   10304:	|      jsr 1529e <getTextFromAnyVar>
   1030a:	|      addq.l #4,sp
   1030c:	|      move.l d0,16(sp)
    if (!newText) return BR_ERROR;
   10310:	|  ,-- bne.s 10318 <builtIn_setFont+0x5c>
   10312:	|  |   moveq #1,d0
   10314:	+--|-- bra.w 10398 <builtIn_setFont+0xdc>
    //              KPrintF("  Character supported: %s\n", newText);
    trimStack(&fun->stack);
   10318:	|  '-> moveq #24,d0
   1031a:	|      add.l 28(sp),d0
   1031e:	|      move.l d0,-(sp)
   10320:	|      jsr 1564c <trimStack>
   10326:	|      addq.l #4,sp
    if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) return BR_ERROR;
   10328:	|      movea.l 28(sp),a0
   1032c:	|      move.l 24(a0),d0
   10330:	|      move.l d0,-(sp)
   10332:	|      pea 5 <_start+0x5>
   10336:	|      lea 16(sp),a0
   1033a:	|      move.l a0,-(sp)
   1033c:	|      jsr 14cc8 <getValueType>
   10342:	|      lea 12(sp),sp
   10346:	|      tst.w d0
   10348:	|  ,-- bne.s 1034e <builtIn_setFont+0x92>
   1034a:	|  |   moveq #1,d0
   1034c:	+--|-- bra.s 10398 <builtIn_setFont+0xdc>
    //              KPrintF("  File: %d\n", fileNumber);
    trimStack(&fun->stack);
   1034e:	|  '-> moveq #24,d0
   10350:	|      add.l 28(sp),d0
   10354:	|      move.l d0,-(sp)
   10356:	|      jsr 1564c <trimStack>
   1035c:	|      addq.l #4,sp
    if (!loadFont(fileNumber, newText, newHeight)) return BR_ERROR;
   1035e:	|      move.l 4(sp),d1
   10362:	|      move.l 8(sp),d0
   10366:	|      move.l d1,-(sp)
   10368:	|      move.l 20(sp),-(sp)
   1036c:	|      move.l d0,-(sp)
   1036e:	|      jsr 15b00 <loadFont>
   10374:	|      lea 12(sp),sp
   10378:	|      tst.w d0
   1037a:	|  ,-- bne.s 10380 <builtIn_setFont+0xc4>
   1037c:	|  |   moveq #1,d0
   1037e:	+--|-- bra.s 10398 <builtIn_setFont+0xdc>
    //              KPrintF("  Done!\n");
    FreeVec(newText);
   10380:	|  '-> move.l 16(sp),12(sp)
   10386:	|      move.l 1cfb6 <SysBase>,d0
   1038c:	|      movea.l d0,a6
   1038e:	|      movea.l 12(sp),a1
   10392:	|      jsr -690(a6)

    return BR_CONTINUE;
   10396:	|      moveq #2,d0
}
   10398:	'----> movea.l (sp)+,a6
   1039a:	       lea 16(sp),sp
   1039e:	       rts

000103a0 <builtIn_inFont>:

builtIn(inFont)
{
   103a0:	       subq.l #4,sp
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
   103a2:	       movea.l 12(sp),a0
   103a6:	       move.l 24(a0),d0
   103aa:	       move.l d0,-(sp)
   103ac:	       jsr 1529e <getTextFromAnyVar>
   103b2:	       addq.l #4,sp
   103b4:	       move.l d0,(sp)
	if (! newText) return BR_ERROR;
   103b6:	   ,-- bne.s 103bc <builtIn_inFont+0x1c>
   103b8:	   |   moveq #1,d0
   103ba:	,--|-- bra.s 103f2 <builtIn_inFont+0x52>
	trimStack (&fun -> stack);
   103bc:	|  '-> moveq #24,d0
   103be:	|      add.l 12(sp),d0
   103c2:	|      move.l d0,-(sp)
   103c4:	|      jsr 1564c <trimStack>
   103ca:	|      addq.l #4,sp

	// Return value
	
	setVariable (&fun -> reg, SVT_INT, isInFont(newText));
   103cc:	|      move.l (sp),-(sp)
   103ce:	|      jsr 15aee <isInFont>
   103d4:	|      addq.l #4,sp
   103d6:	|      movea.w d0,a0
   103d8:	|      moveq #28,d0
   103da:	|      add.l 12(sp),d0
   103de:	|      move.l a0,-(sp)
   103e0:	|      pea 1 <_start+0x1>
   103e4:	|      move.l d0,-(sp)
   103e6:	|      jsr 155ba <setVariable>
   103ec:	|      lea 12(sp),sp
	return BR_CONTINUE;
   103f0:	|      moveq #2,d0
}
   103f2:	'----> addq.l #4,sp
   103f4:	       rts

000103f6 <builtIn_pasteString>:

builtIn(pasteString)
{
   103f6:	       lea -16(sp),sp
   103fa:	       move.l a6,-(sp)
   103fc:	       move.l d2,-(sp)
    UNUSEDALL
    char *newText = getTextFromAnyVar(&(fun->stack->thisVar));
   103fe:	       movea.l 32(sp),a0
   10402:	       move.l 24(a0),d0
   10406:	       move.l d0,-(sp)
   10408:	       jsr 1529e <getTextFromAnyVar>
   1040e:	       addq.l #4,sp
   10410:	       move.l d0,20(sp)
    trimStack(&fun->stack);
   10414:	       moveq #24,d0
   10416:	       add.l 32(sp),d0
   1041a:	       move.l d0,-(sp)
   1041c:	       jsr 1564c <trimStack>
   10422:	       addq.l #4,sp
    int y, x;
    if (!getValueType(&y, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
   10424:	       movea.l 32(sp),a0
   10428:	       move.l 24(a0),d0
   1042c:	       move.l d0,-(sp)
   1042e:	       pea 1 <_start+0x1>
   10432:	       lea 20(sp),a0
   10436:	       move.l a0,-(sp)
   10438:	       jsr 14cc8 <getValueType>
   1043e:	       lea 12(sp),sp
   10442:	       tst.w d0
   10444:	   ,-- bne.s 1044c <builtIn_pasteString+0x56>
   10446:	   |   moveq #1,d0
   10448:	,--|-- bra.w 104ee <builtIn_pasteString+0xf8>
    trimStack(&fun->stack);
   1044c:	|  '-> moveq #24,d0
   1044e:	|      add.l 32(sp),d0
   10452:	|      move.l d0,-(sp)
   10454:	|      jsr 1564c <trimStack>
   1045a:	|      addq.l #4,sp
    if (!getValueType(&x, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
   1045c:	|      movea.l 32(sp),a0
   10460:	|      move.l 24(a0),d0
   10464:	|      move.l d0,-(sp)
   10466:	|      pea 1 <_start+0x1>
   1046a:	|      lea 16(sp),a0
   1046e:	|      move.l a0,-(sp)
   10470:	|      jsr 14cc8 <getValueType>
   10476:	|      lea 12(sp),sp
   1047a:	|      tst.w d0
   1047c:	|  ,-- bne.s 10482 <builtIn_pasteString+0x8c>
   1047e:	|  |   moveq #1,d0
   10480:	+--|-- bra.s 104ee <builtIn_pasteString+0xf8>
    trimStack(&fun->stack);
   10482:	|  '-> moveq #24,d0
   10484:	|      add.l 32(sp),d0
   10488:	|      move.l d0,-(sp)
   1048a:	|      jsr 1564c <trimStack>
   10490:	|      addq.l #4,sp
    if (x == IN_THE_CENTRE) 
   10492:	|      move.l 8(sp),d0
   10496:	|      cmpi.l #65535,d0
   1049c:	|  ,-- bne.s 104bc <builtIn_pasteString+0xc6>
		x = (winWidth - stringWidth(newText)) >> 1;
   1049e:	|  |   move.l 1cefe <winWidth>,d2
   104a4:	|  |   move.l 20(sp),-(sp)
   104a8:	|  |   jsr 15db2 <stringWidth>
   104ae:	|  |   addq.l #4,sp
   104b0:	|  |   move.l d2,d1
   104b2:	|  |   sub.l d0,d1
   104b4:	|  |   move.l d1,d0
   104b6:	|  |   lsr.l #1,d0
   104b8:	|  |   move.l d0,8(sp)
    //fixFont(pastePalette); //Todo: Amigize this
    pasteStringToBackdrop(newText, x, y); 
   104bc:	|  '-> move.l 12(sp),d1
   104c0:	|      move.l 8(sp),d0
   104c4:	|      move.l d1,-(sp)
   104c6:	|      move.l d0,-(sp)
   104c8:	|      move.l 28(sp),-(sp)
   104cc:	|      jsr 15cd4 <pasteStringToBackdrop>
   104d2:	|      lea 12(sp),sp
    FreeVec(newText); 
   104d6:	|      move.l 20(sp),16(sp)
   104dc:	|      move.l 1cfb6 <SysBase>,d0
   104e2:	|      movea.l d0,a6
   104e4:	|      movea.l 16(sp),a1
   104e8:	|      jsr -690(a6)
    return BR_CONTINUE;
   104ec:	|      moveq #2,d0
}
   104ee:	'----> move.l (sp)+,d2
   104f0:	       movea.l (sp)+,a6
   104f2:	       lea 16(sp),sp
   104f6:	       rts

000104f8 <builtIn_anim>:

builtIn(anim)
{
   104f8:	       lea -12(sp),sp
	UNUSEDALL
	if (numParams < 2) {
   104fc:	       moveq #1,d0
   104fe:	       cmp.l 16(sp),d0
   10502:	   ,-- blt.s 10518 <builtIn_anim+0x20>
		KPrintF("Built-in function anim() must have at least 2 parameters.");
   10504:	   |   pea 19fc9 <PutChar+0x1d7f>
   1050a:	   |   jsr 177a8 <KPrintF>
   10510:	   |   addq.l #4,sp
		return BR_ERROR;
   10512:	   |   moveq #1,d0
   10514:	,--|-- bra.w 105a6 <builtIn_anim+0xae>
	}


	// First store the frame numbers and take 'em off the stack
	struct personaAnimation * ba = createPersonaAnim (numParams - 1, &fun -> stack);
   10518:	|  '-> moveq #24,d1
   1051a:	|      add.l 20(sp),d1
   1051e:	|      move.l 16(sp),d0
   10522:	|      subq.l #1,d0
   10524:	|      move.l d1,-(sp)
   10526:	|      move.l d0,-(sp)
   10528:	|      jsr 9b2a <createPersonaAnim>
   1052e:	|      addq.l #8,sp
   10530:	|      move.l d0,8(sp)

	// Only remaining paramter is the file number
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   10534:	|      movea.l 20(sp),a0
   10538:	|      move.l 24(a0),d0
   1053c:	|      move.l d0,-(sp)
   1053e:	|      pea 5 <_start+0x5>
   10542:	|      lea 8(sp),a0
   10546:	|      move.l a0,-(sp)
   10548:	|      jsr 14cc8 <getValueType>
   1054e:	|      lea 12(sp),sp
   10552:	|      tst.w d0
   10554:	|  ,-- bne.s 1055a <builtIn_anim+0x62>
   10556:	|  |   moveq #1,d0
   10558:	+--|-- bra.s 105a6 <builtIn_anim+0xae>
	trimStack (&fun -> stack);
   1055a:	|  '-> moveq #24,d0
   1055c:	|      add.l 20(sp),d0
   10560:	|      move.l d0,-(sp)
   10562:	|      jsr 1564c <trimStack>
   10568:	|      addq.l #4,sp

	// Load the required sprite bank
	struct loadedSpriteBank * sprBanky = loadBankForAnim (fileNumber);
   1056a:	|      move.l (sp),d0
   1056c:	|      move.l d0,-(sp)
   1056e:	|      jsr 164ca <loadBankForAnim>
   10574:	|      addq.l #4,sp
   10576:	|      move.l d0,4(sp)
	if (! sprBanky) return BR_ERROR;	// File not found, fatal done already
   1057a:	|  ,-- bne.s 10580 <builtIn_anim+0x88>
   1057c:	|  |   moveq #1,d0
   1057e:	+--|-- bra.s 105a6 <builtIn_anim+0xae>
	setBankFile (ba, sprBanky);
   10580:	|  '-> move.l 4(sp),-(sp)
   10584:	|      move.l 12(sp),-(sp)
   10588:	|      jsr ba36 <setBankFile>
   1058e:	|      addq.l #8,sp

	// Return value
	newAnimationVariable (&fun -> reg, ba);
   10590:	|      moveq #28,d0
   10592:	|      add.l 20(sp),d0
   10596:	|      move.l 8(sp),-(sp)
   1059a:	|      move.l d0,-(sp)
   1059c:	|      jsr 15576 <newAnimationVariable>
   105a2:	|      addq.l #8,sp
	return BR_CONTINUE;
   105a4:	|      moveq #2,d0
}
   105a6:	'----> lea 12(sp),sp
   105aa:	       rts

000105ac <builtIn_costume>:

builtIn(costume)
{
   105ac:	          lea -32(sp),sp
   105b0:	          move.l a6,-(sp)
   105b2:	          move.l a2,-(sp)
    UNUSEDALL
    struct persona * newPersona = AllocVec(sizeof(struct persona), MEMF_ANY);
   105b4:	          moveq #8,d0
   105b6:	          move.l d0,32(sp)
   105ba:	          clr.l 28(sp)
   105be:	          move.l 1cfb6 <SysBase>,d0
   105c4:	          movea.l d0,a6
   105c6:	          move.l 32(sp),d0
   105ca:	          move.l 28(sp),d1
   105ce:	          jsr -684(a6)
   105d2:	          move.l d0,24(sp)
   105d6:	          move.l 24(sp),d0
   105da:	          move.l d0,20(sp)
    if (!newPersona) return BR_ERROR;
   105de:	      ,-- bne.s 105e6 <builtIn_costume+0x3a>
   105e0:	      |   moveq #1,d0
   105e2:	,-----|-- bra.w 106ce <builtIn_costume+0x122>
    newPersona->numDirections = numParams / 3;
   105e6:	|     '-> move.l 44(sp),d0
   105ea:	|         pea 3 <_start+0x3>
   105ee:	|         move.l d0,-(sp)
   105f0:	|         jsr 181b2 <__divsi3>
   105f6:	|         addq.l #8,sp
   105f8:	|         movea.l 20(sp),a0
   105fc:	|         move.l d0,4(a0)
    if (numParams == 0 || newPersona->numDirections * 3 != numParams) {
   10600:	|         tst.l 44(sp)
   10604:	|     ,-- beq.s 1061a <builtIn_costume+0x6e>
   10606:	|     |   movea.l 20(sp),a0
   1060a:	|     |   move.l 4(a0),d1
   1060e:	|     |   move.l d1,d0
   10610:	|     |   add.l d0,d0
   10612:	|     |   add.l d1,d0
   10614:	|     |   cmp.l 44(sp),d0
   10618:	|  ,--|-- beq.s 1062e <builtIn_costume+0x82>
        KPrintF("Illegal number of parameters (should be greater than 0 and divisible by 3)");
   1061a:	|  |  '-> pea 1a003 <PutChar+0x1db9>
   10620:	|  |      jsr 177a8 <KPrintF>
   10626:	|  |      addq.l #4,sp
        return BR_ERROR;
   10628:	|  |      moveq #1,d0
   1062a:	+--|----- bra.w 106ce <builtIn_costume+0x122>
    }
    int iii;
    newPersona->animation = AllocVec(sizeof(struct personaAnimation *) * numParams, MEMF_ANY);
   1062e:	|  '----> move.l 44(sp),d0
   10632:	|         add.l d0,d0
   10634:	|         add.l d0,d0
   10636:	|         move.l d0,16(sp)
   1063a:	|         clr.l 12(sp)
   1063e:	|         move.l 1cfb6 <SysBase>,d0
   10644:	|         movea.l d0,a6
   10646:	|         move.l 16(sp),d0
   1064a:	|         move.l 12(sp),d1
   1064e:	|         jsr -684(a6)
   10652:	|         move.l d0,8(sp)
   10656:	|         move.l 8(sp),d0
   1065a:	|         movea.l 20(sp),a0
   1065e:	|         move.l d0,(a0)
    if (!newPersona->animation) return BR_ERROR;
   10660:	|         movea.l 20(sp),a0
   10664:	|         move.l (a0),d0
   10666:	|     ,-- bne.s 1066c <builtIn_costume+0xc0>
   10668:	|     |   moveq #1,d0
   1066a:	+-----|-- bra.s 106ce <builtIn_costume+0x122>
    for (iii = numParams - 1; iii >= 0; iii--) {
   1066c:	|     '-> move.l 44(sp),d0
   10670:	|         subq.l #1,d0
   10672:	|         move.l d0,36(sp)
   10676:	|     ,-- bra.s 106b2 <builtIn_costume+0x106>
        newPersona->animation[iii] = getAnimationFromVar(&(fun->stack->thisVar));
   10678:	|  ,--|-> movea.l 48(sp),a0
   1067c:	|  |  |   move.l 24(a0),d0
   10680:	|  |  |   movea.l 20(sp),a0
   10684:	|  |  |   movea.l (a0),a0
   10686:	|  |  |   move.l 36(sp),d1
   1068a:	|  |  |   add.l d1,d1
   1068c:	|  |  |   add.l d1,d1
   1068e:	|  |  |   lea (0,a0,d1.l),a2
   10692:	|  |  |   move.l d0,-(sp)
   10694:	|  |  |   jsr 151a0 <getAnimationFromVar>
   1069a:	|  |  |   addq.l #4,sp
   1069c:	|  |  |   move.l d0,(a2)
        trimStack(&fun->stack);
   1069e:	|  |  |   moveq #24,d0
   106a0:	|  |  |   add.l 48(sp),d0
   106a4:	|  |  |   move.l d0,-(sp)
   106a6:	|  |  |   jsr 1564c <trimStack>
   106ac:	|  |  |   addq.l #4,sp
    for (iii = numParams - 1; iii >= 0; iii--) {
   106ae:	|  |  |   subq.l #1,36(sp)
   106b2:	|  |  '-> tst.l 36(sp)
   106b6:	|  '----- bge.s 10678 <builtIn_costume+0xcc>
    }

    // Return value
    newCostumeVariable(&fun->reg, newPersona);
   106b8:	|         moveq #28,d0
   106ba:	|         add.l 48(sp),d0
   106be:	|         move.l 20(sp),-(sp)
   106c2:	|         move.l d0,-(sp)
   106c4:	|         jsr 15598 <newCostumeVariable>
   106ca:	|         addq.l #8,sp
    return BR_CONTINUE;
   106cc:	|         moveq #2,d0
}
   106ce:	'-------> movea.l (sp)+,a2
   106d0:	          movea.l (sp)+,a6
   106d2:	          lea 32(sp),sp
   106d6:	          rts

000106d8 <builtIn_launch>:

builtIn(launch)
{
   106d8:	          lea -20(sp),sp
   106dc:	          move.l a6,-(sp)
    UNUSEDALL
    char * newTextA = getTextFromAnyVar(&(fun->stack->thisVar));
   106de:	          movea.l 32(sp),a0
   106e2:	          move.l 24(a0),d0
   106e6:	          move.l d0,-(sp)
   106e8:	          jsr 1529e <getTextFromAnyVar>
   106ee:	          addq.l #4,sp
   106f0:	          move.l d0,20(sp)
    if (!newTextA) return BR_ERROR;
   106f4:	      ,-- bne.s 106fc <builtIn_launch+0x24>
   106f6:	      |   moveq #1,d0
   106f8:	,-----|-- bra.w 1082a <builtIn_launch+0x152>

    char * newText = encodeFilename(newTextA);
   106fc:	|     '-> move.l 20(sp),-(sp)
   10700:	|         jsr 2fe <encodeFilename>
   10706:	|         addq.l #4,sp
   10708:	|         move.l d0,16(sp)

    trimStack(&fun->stack);
   1070c:	|         moveq #24,d0
   1070e:	|         add.l 32(sp),d0
   10712:	|         move.l d0,-(sp)
   10714:	|         jsr 1564c <trimStack>
   1071a:	|         addq.l #4,sp
    if (newTextA[0] == 'h' &&
   1071c:	|         movea.l 20(sp),a0
   10720:	|         move.b (a0),d0
   10722:	|         cmpi.b #104,d0
   10726:	|  ,----- bne.s 10790 <builtIn_launch+0xb8>
        newTextA[1] == 't' &&
   10728:	|  |      movea.l 20(sp),a0
   1072c:	|  |      addq.l #1,a0
   1072e:	|  |      move.b (a0),d0
    if (newTextA[0] == 'h' &&
   10730:	|  |      cmpi.b #116,d0
   10734:	|  +----- bne.s 10790 <builtIn_launch+0xb8>
        newTextA[2] == 't' &&
   10736:	|  |      movea.l 20(sp),a0
   1073a:	|  |      addq.l #2,a0
   1073c:	|  |      move.b (a0),d0
        newTextA[1] == 't' &&
   1073e:	|  |      cmpi.b #116,d0
   10742:	|  +----- bne.s 10790 <builtIn_launch+0xb8>
        newTextA[3] == 'p' &&
   10744:	|  |      movea.l 20(sp),a0
   10748:	|  |      addq.l #3,a0
   1074a:	|  |      move.b (a0),d0
        newTextA[2] == 't' &&
   1074c:	|  |      cmpi.b #112,d0
   10750:	|  +----- bne.s 10790 <builtIn_launch+0xb8>
        (newTextA[4] == ':' || (newTextA[4] == 's' && newTextA[5] == ':'))) {
   10752:	|  |      movea.l 20(sp),a0
   10756:	|  |      addq.l #4,a0
   10758:	|  |      move.b (a0),d0
        newTextA[3] == 'p' &&
   1075a:	|  |      cmpi.b #58,d0
   1075e:	|  |  ,-- beq.s 1077c <builtIn_launch+0xa4>
        (newTextA[4] == ':' || (newTextA[4] == 's' && newTextA[5] == ':'))) {
   10760:	|  |  |   movea.l 20(sp),a0
   10764:	|  |  |   addq.l #4,a0
   10766:	|  |  |   move.b (a0),d0
   10768:	|  |  |   cmpi.b #115,d0
   1076c:	|  +--|-- bne.s 10790 <builtIn_launch+0xb8>
   1076e:	|  |  |   movea.l 20(sp),a0
   10772:	|  |  |   addq.l #5,a0
   10774:	|  |  |   move.b (a0),d0
   10776:	|  |  |   cmpi.b #58,d0
   1077a:	|  +--|-- bne.s 10790 <builtIn_launch+0xb8>

        // IT'S A WEBSITE!
        launchMe = copyString(newTextA);
   1077c:	|  |  '-> move.l 20(sp),-(sp)
   10780:	|  |      jsr b8 <copyString>
   10786:	|  |      addq.l #4,sp
   10788:	|  |      move.l d0,1d074 <launchMe>
   1078e:	|  |  ,-- bra.s 107e2 <builtIn_launch+0x10a>
    } else {
        char *gameDir;
        gameDir = joinStrings(gamePath, "/");
   10790:	|  '--|-> move.l 1cf12 <gamePath>,d0
   10796:	|     |   pea 1a04e <PutChar+0x1e04>
   1079c:	|     |   move.l d0,-(sp)
   1079e:	|     |   jsr 141f4 <joinStrings>
   107a4:	|     |   addq.l #8,sp
   107a6:	|     |   move.l d0,12(sp)

        launchMe = joinStrings(gameDir, newText);
   107aa:	|     |   move.l 16(sp),-(sp)
   107ae:	|     |   move.l 16(sp),-(sp)
   107b2:	|     |   jsr 141f4 <joinStrings>
   107b8:	|     |   addq.l #8,sp
   107ba:	|     |   move.l d0,1d074 <launchMe>
        FreeVec(newText);
   107c0:	|     |   move.l 16(sp),8(sp)
   107c6:	|     |   move.l 1cfb6 <SysBase>,d0
   107cc:	|     |   movea.l d0,a6
   107ce:	|     |   movea.l 8(sp),a1
   107d2:	|     |   jsr -690(a6)
        if (!launchMe) return BR_ERROR;
   107d6:	|     |   move.l 1d074 <launchMe>,d0
   107dc:	|     +-- bne.s 107e2 <builtIn_launch+0x10a>
   107de:	|     |   moveq #1,d0
   107e0:	+-----|-- bra.s 1082a <builtIn_launch+0x152>
    }
    FreeVec(newTextA);
   107e2:	|     '-> move.l 20(sp),4(sp)
   107e8:	|         move.l 1cfb6 <SysBase>,d0
   107ee:	|         movea.l d0,a6
   107f0:	|         movea.l 4(sp),a1
   107f4:	|         jsr -690(a6)
    setGraphicsWindow(FALSE);
   107f8:	|         clr.l -(sp)
   107fa:	|         jsr 4d3a <setGraphicsWindow>
   10800:	|         addq.l #4,sp
    setVariable(&fun->reg, SVT_INT, 1);
   10802:	|         moveq #28,d0
   10804:	|         add.l 32(sp),d0
   10808:	|         pea 1 <_start+0x1>
   1080c:	|         pea 1 <_start+0x1>
   10810:	|         move.l d0,-(sp)
   10812:	|         jsr 155ba <setVariable>
   10818:	|         lea 12(sp),sp
    launchResult = &fun->reg;
   1081c:	|         moveq #28,d0
   1081e:	|         add.l 32(sp),d0
   10822:	|         move.l d0,1d078 <launchResult>

    return BR_KEEP_AND_PAUSE;
   10828:	|         moveq #0,d0
}
   1082a:	'-------> movea.l (sp)+,a6
   1082c:	          lea 20(sp),sp
   10830:	          rts

00010832 <builtIn_pause>:

builtIn(pause)
{
   10832:	       subq.l #4,sp
	UNUSEDALL
	int theTime;
	if (! getValueType(&theTime, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10834:	       movea.l 12(sp),a0
   10838:	       move.l 24(a0),d0
   1083c:	       move.l d0,-(sp)
   1083e:	       pea 1 <_start+0x1>
   10842:	       move.l sp,d0
   10844:	       addq.l #8,d0
   10846:	       move.l d0,-(sp)
   10848:	       jsr 14cc8 <getValueType>
   1084e:	       lea 12(sp),sp
   10852:	       tst.w d0
   10854:	   ,-- bne.s 1085a <builtIn_pause+0x28>
   10856:	   |   moveq #1,d0
   10858:	,--|-- bra.s 10888 <builtIn_pause+0x56>
	trimStack (&fun -> stack);
   1085a:	|  '-> moveq #24,d0
   1085c:	|      add.l 12(sp),d0
   10860:	|      move.l d0,-(sp)
   10862:	|      jsr 1564c <trimStack>
   10868:	|      addq.l #4,sp
	if (theTime > 0) {
   1086a:	|      move.l (sp),d0
   1086c:	|  ,-- ble.s 10886 <builtIn_pause+0x54>
		fun -> timeLeft = theTime - 1;
   1086e:	|  |   move.l (sp),d0
   10870:	|  |   subq.l #1,d0
   10872:	|  |   movea.l 12(sp),a0
   10876:	|  |   move.l d0,12(a0)
		fun -> isSpeech = FALSE;
   1087a:	|  |   movea.l 12(sp),a0
   1087e:	|  |   clr.w 50(a0)
		return BR_KEEP_AND_PAUSE;
   10882:	|  |   moveq #0,d0
   10884:	+--|-- bra.s 10888 <builtIn_pause+0x56>
	}
	return BR_CONTINUE;
   10886:	|  '-> moveq #2,d0
}
   10888:	'----> addq.l #4,sp
   1088a:	       rts

0001088c <builtIn_completeTimers>:

builtIn(completeTimers)
{
	UNUSEDALL
	completeTimers();
   1088c:	jsr 54a0 <completeTimers>
	return BR_CONTINUE;
   10892:	moveq #2,d0
}
   10894:	rts

00010896 <builtIn_callEvent>:

builtIn(callEvent)
{
   10896:	       lea -12(sp),sp
	UNUSEDALL
	int obj1, obj2;
	if (! getValueType(&obj2, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1089a:	       movea.l 20(sp),a0
   1089e:	       move.l 24(a0),d0
   108a2:	       move.l d0,-(sp)
   108a4:	       pea 7 <_start+0x7>
   108a8:	       lea 8(sp),a0
   108ac:	       move.l a0,-(sp)
   108ae:	       jsr 14cc8 <getValueType>
   108b4:	       lea 12(sp),sp
   108b8:	       tst.w d0
   108ba:	   ,-- bne.s 108c2 <builtIn_callEvent+0x2c>
   108bc:	   |   moveq #1,d0
   108be:	,--|-- bra.w 10958 <builtIn_callEvent+0xc2>
	trimStack (&fun -> stack);
   108c2:	|  '-> moveq #24,d0
   108c4:	|      add.l 20(sp),d0
   108c8:	|      move.l d0,-(sp)
   108ca:	|      jsr 1564c <trimStack>
   108d0:	|      addq.l #4,sp
	if (! getValueType(&obj1, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   108d2:	|      movea.l 20(sp),a0
   108d6:	|      move.l 24(a0),d0
   108da:	|      move.l d0,-(sp)
   108dc:	|      pea 7 <_start+0x7>
   108e0:	|      moveq #12,d0
   108e2:	|      add.l sp,d0
   108e4:	|      move.l d0,-(sp)
   108e6:	|      jsr 14cc8 <getValueType>
   108ec:	|      lea 12(sp),sp
   108f0:	|      tst.w d0
   108f2:	|  ,-- bne.s 108f8 <builtIn_callEvent+0x62>
   108f4:	|  |   moveq #1,d0
   108f6:	+--|-- bra.s 10958 <builtIn_callEvent+0xc2>
	trimStack (&fun -> stack);
   108f8:	|  '-> moveq #24,d0
   108fa:	|      add.l 20(sp),d0
   108fe:	|      move.l d0,-(sp)
   10900:	|      jsr 1564c <trimStack>
   10906:	|      addq.l #4,sp

	int fNum = getCombinationFunction (obj1, obj2);
   10908:	|      move.l (sp),d1
   1090a:	|      move.l 4(sp),d0
   1090e:	|      move.l d1,-(sp)
   10910:	|      move.l d0,-(sp)
   10912:	|      jsr da10 <getCombinationFunction>
   10918:	|      addq.l #8,sp
   1091a:	|      move.l d0,8(sp)

	// Return value
	if (fNum) {
   1091e:	|  ,-- beq.s 1093e <builtIn_callEvent+0xa8>
		setVariable (&fun -> reg, SVT_FUNC, fNum);
   10920:	|  |   moveq #28,d0
   10922:	|  |   add.l 20(sp),d0
   10926:	|  |   move.l 8(sp),-(sp)
   1092a:	|  |   pea 2 <_start+0x2>
   1092e:	|  |   move.l d0,-(sp)
   10930:	|  |   jsr 155ba <setVariable>
   10936:	|  |   lea 12(sp),sp
		return BR_CALLAFUNC;
   1093a:	|  |   moveq #4,d0
   1093c:	+--|-- bra.s 10958 <builtIn_callEvent+0xc2>
	}
	setVariable (&fun -> reg, SVT_INT, 0);
   1093e:	|  '-> moveq #28,d0
   10940:	|      add.l 20(sp),d0
   10944:	|      clr.l -(sp)
   10946:	|      pea 1 <_start+0x1>
   1094a:	|      move.l d0,-(sp)
   1094c:	|      jsr 155ba <setVariable>
   10952:	|      lea 12(sp),sp
	return BR_CONTINUE;
   10956:	|      moveq #2,d0
}
   10958:	'----> lea 12(sp),sp
   1095c:	       rts

0001095e <builtIn_quitGame>:
BOOL reallyWantToQuit = FALSE;

builtIn(quitGame)
{
	UNUSEDALL
	reallyWantToQuit = TRUE;
   1095e:	move.w #1,1d084 <reallyWantToQuit>
	//quit_event.type=SDL_QUIT; Todo: Amigize
	//SDL_PushEvent(&quit_event);
	return BR_CONTINUE;
   10966:	moveq #2,d0
}
   10968:	rts

0001096a <builtIn__rem_movieStart>:

// The old movie functions are deprecated and does nothing.
builtIn(_rem_movieStart)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   1096a:	moveq #24,d0
   1096c:	add.l 8(sp),d0
   10970:	move.l d0,-(sp)
   10972:	jsr 1564c <trimStack>
   10978:	addq.l #4,sp
	KPrintF("Movie Stuff not supported on Amiga");
   1097a:	pea 1a050 <PutChar+0x1e06>
   10980:	jsr 177a8 <KPrintF>
   10986:	addq.l #4,sp
	return BR_CONTINUE;
   10988:	moveq #2,d0
}
   1098a:	rts

0001098c <builtIn__rem_movieAbort>:

builtIn(_rem_movieAbort)
{
	UNUSEDALL
	//setVariable (&fun -> reg, SVT_INT, 0);
	KPrintF("Movie Stuff not supported on Amiga");
   1098c:	pea 1a050 <PutChar+0x1e06>
   10992:	jsr 177a8 <KPrintF>
   10998:	addq.l #4,sp
	return BR_CONTINUE;
   1099a:	moveq #2,d0
}
   1099c:	rts

0001099e <builtIn__rem_moviePlaying>:

builtIn(_rem_moviePlaying)
{
	UNUSEDALL
	KPrintF("Movie Stuff not supported on Amiga");
   1099e:	pea 1a050 <PutChar+0x1e06>
   109a4:	jsr 177a8 <KPrintF>
   109aa:	addq.l #4,sp
	//setVariable (&fun -> reg, SVT_INT, 0);
	return BR_CONTINUE;
   109ac:	moveq #2,d0
}
   109ae:	rts

000109b0 <builtIn_playMovie>:
	
	if (r && (! fun->next)) {
		restartFunction (fun);
		return BR_ALREADY_GONE;
	}*/
	KPrintF("Movie Stuff not supported on Amiga");
   109b0:	pea 1a050 <PutChar+0x1e06>
   109b6:	jsr 177a8 <KPrintF>
   109bc:	addq.l #4,sp
	return BR_CONTINUE;
   109be:	moveq #2,d0
}
   109c0:	rts

000109c2 <builtIn_stopMovie>:
	/*int r;
	
	r = stopMovie();
	
	setVariable (&fun -> reg, SVT_INT, 0);*/
	KPrintF("Movie Stuff not supported on Amiga");
   109c2:	pea 1a050 <PutChar+0x1e06>
   109c8:	jsr 177a8 <KPrintF>
   109ce:	addq.l #4,sp
	return BR_CONTINUE;
   109d0:	moveq #2,d0
}
   109d2:	rts

000109d4 <builtIn_pauseMovie>:
	/*int r;
	
	r = pauseMovie();
	
	setVariable (&fun -> reg, SVT_INT, 0);*/
	KPrintF("Movie Stuff not supported on Amiga");
   109d4:	pea 1a050 <PutChar+0x1e06>
   109da:	jsr 177a8 <KPrintF>
   109e0:	addq.l #4,sp
	return BR_CONTINUE;
   109e2:	moveq #2,d0
}
   109e4:	rts

000109e6 <builtIn_startMusic>:

#pragma mark -
#pragma mark Audio functions

builtIn(startMusic)
{
   109e6:	       lea -12(sp),sp
	UNUSEDALL
	int fromTrack, musChan, fileNumber;
	if (! getValueType(&fromTrack, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   109ea:	       movea.l 20(sp),a0
   109ee:	       move.l 24(a0),d0
   109f2:	       move.l d0,-(sp)
   109f4:	       pea 1 <_start+0x1>
   109f8:	       moveq #16,d0
   109fa:	       add.l sp,d0
   109fc:	       move.l d0,-(sp)
   109fe:	       jsr 14cc8 <getValueType>
   10a04:	       lea 12(sp),sp
   10a08:	       tst.w d0
   10a0a:	   ,-- bne.s 10a12 <builtIn_startMusic+0x2c>
   10a0c:	   |   moveq #1,d0
   10a0e:	,--|-- bra.w 10ab2 <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
   10a12:	|  '-> moveq #24,d0
   10a14:	|      add.l 20(sp),d0
   10a18:	|      move.l d0,-(sp)
   10a1a:	|      jsr 1564c <trimStack>
   10a20:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10a22:	|      movea.l 20(sp),a0
   10a26:	|      move.l 24(a0),d0
   10a2a:	|      move.l d0,-(sp)
   10a2c:	|      pea 1 <_start+0x1>
   10a30:	|      moveq #12,d0
   10a32:	|      add.l sp,d0
   10a34:	|      move.l d0,-(sp)
   10a36:	|      jsr 14cc8 <getValueType>
   10a3c:	|      lea 12(sp),sp
   10a40:	|      tst.w d0
   10a42:	|  ,-- bne.s 10a48 <builtIn_startMusic+0x62>
   10a44:	|  |   moveq #1,d0
   10a46:	+--|-- bra.s 10ab2 <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
   10a48:	|  '-> moveq #24,d0
   10a4a:	|      add.l 20(sp),d0
   10a4e:	|      move.l d0,-(sp)
   10a50:	|      jsr 1564c <trimStack>
   10a56:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   10a58:	|      movea.l 20(sp),a0
   10a5c:	|      move.l 24(a0),d0
   10a60:	|      move.l d0,-(sp)
   10a62:	|      pea 5 <_start+0x5>
   10a66:	|      lea 8(sp),a0
   10a6a:	|      move.l a0,-(sp)
   10a6c:	|      jsr 14cc8 <getValueType>
   10a72:	|      lea 12(sp),sp
   10a76:	|      tst.w d0
   10a78:	|  ,-- bne.s 10a7e <builtIn_startMusic+0x98>
   10a7a:	|  |   moveq #1,d0
   10a7c:	+--|-- bra.s 10ab2 <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
   10a7e:	|  '-> moveq #24,d0
   10a80:	|      add.l 20(sp),d0
   10a84:	|      move.l d0,-(sp)
   10a86:	|      jsr 1564c <trimStack>
   10a8c:	|      addq.l #4,sp
	if (! playMOD (fileNumber, musChan, fromTrack)) return BR_CONTINUE; //BR_ERROR;
   10a8e:	|      movea.l 8(sp),a0
   10a92:	|      move.l 4(sp),d1
   10a96:	|      move.l (sp),d0
   10a98:	|      move.l a0,-(sp)
   10a9a:	|      move.l d1,-(sp)
   10a9c:	|      move.l d0,-(sp)
   10a9e:	|      jsr d612 <playMOD>
   10aa4:	|      lea 12(sp),sp
   10aa8:	|      tst.w d0
   10aaa:	|  ,-- bne.s 10ab0 <builtIn_startMusic+0xca>
   10aac:	|  |   moveq #2,d0
   10aae:	+--|-- bra.s 10ab2 <builtIn_startMusic+0xcc>
	return BR_CONTINUE;
   10ab0:	|  '-> moveq #2,d0
}
   10ab2:	'----> lea 12(sp),sp
   10ab6:	       rts

00010ab8 <builtIn_stopMusic>:

builtIn(stopMusic)
{
   10ab8:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10aba:	       movea.l 12(sp),a0
   10abe:	       move.l 24(a0),d0
   10ac2:	       move.l d0,-(sp)
   10ac4:	       pea 1 <_start+0x1>
   10ac8:	       move.l sp,d0
   10aca:	       addq.l #8,d0
   10acc:	       move.l d0,-(sp)
   10ace:	       jsr 14cc8 <getValueType>
   10ad4:	       lea 12(sp),sp
   10ad8:	       tst.w d0
   10ada:	   ,-- bne.s 10ae0 <builtIn_stopMusic+0x28>
   10adc:	   |   moveq #1,d0
   10ade:	,--|-- bra.s 10afe <builtIn_stopMusic+0x46>
	trimStack (&fun -> stack);
   10ae0:	|  '-> moveq #24,d0
   10ae2:	|      add.l 12(sp),d0
   10ae6:	|      move.l d0,-(sp)
   10ae8:	|      jsr 1564c <trimStack>
   10aee:	|      addq.l #4,sp
	stopMOD (v);
   10af0:	|      move.l (sp),d0
   10af2:	|      move.l d0,-(sp)
   10af4:	|      jsr d6ae <stopMOD>
   10afa:	|      addq.l #4,sp
	return BR_CONTINUE;
   10afc:	|      moveq #2,d0
}
   10afe:	'----> addq.l #4,sp
   10b00:	       rts

00010b02 <builtIn_setMusicVolume>:

builtIn(setMusicVolume)
{
   10b02:	       subq.l #8,sp
	UNUSEDALL
	int musChan, v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10b04:	       movea.l 16(sp),a0
   10b08:	       move.l 24(a0),d0
   10b0c:	       move.l d0,-(sp)
   10b0e:	       pea 1 <_start+0x1>
   10b12:	       move.l sp,d0
   10b14:	       addq.l #8,d0
   10b16:	       move.l d0,-(sp)
   10b18:	       jsr 14cc8 <getValueType>
   10b1e:	       lea 12(sp),sp
   10b22:	       tst.w d0
   10b24:	   ,-- bne.s 10b2a <builtIn_setMusicVolume+0x28>
   10b26:	   |   moveq #1,d0
   10b28:	,--|-- bra.s 10b84 <builtIn_setMusicVolume+0x82>
	trimStack (&fun -> stack);
   10b2a:	|  '-> moveq #24,d0
   10b2c:	|      add.l 16(sp),d0
   10b30:	|      move.l d0,-(sp)
   10b32:	|      jsr 1564c <trimStack>
   10b38:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10b3a:	|      movea.l 16(sp),a0
   10b3e:	|      move.l 24(a0),d0
   10b42:	|      move.l d0,-(sp)
   10b44:	|      pea 1 <_start+0x1>
   10b48:	|      moveq #12,d0
   10b4a:	|      add.l sp,d0
   10b4c:	|      move.l d0,-(sp)
   10b4e:	|      jsr 14cc8 <getValueType>
   10b54:	|      lea 12(sp),sp
   10b58:	|      tst.w d0
   10b5a:	|  ,-- bne.s 10b60 <builtIn_setMusicVolume+0x5e>
   10b5c:	|  |   moveq #1,d0
   10b5e:	+--|-- bra.s 10b84 <builtIn_setMusicVolume+0x82>
	trimStack (&fun -> stack);
   10b60:	|  '-> moveq #24,d0
   10b62:	|      add.l 16(sp),d0
   10b66:	|      move.l d0,-(sp)
   10b68:	|      jsr 1564c <trimStack>
   10b6e:	|      addq.l #4,sp
	setMusicVolume (musChan, v);
   10b70:	|      move.l (sp),d1
   10b72:	|      move.l 4(sp),d0
   10b76:	|      move.l d1,-(sp)
   10b78:	|      move.l d0,-(sp)
   10b7a:	|      jsr d694 <setMusicVolume>
   10b80:	|      addq.l #8,sp
	return BR_CONTINUE;
   10b82:	|      moveq #2,d0
}
   10b84:	'----> addq.l #8,sp
   10b86:	       rts

00010b88 <builtIn_setDefaultMusicVolume>:

builtIn(setDefaultMusicVolume)
{
   10b88:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10b8a:	       movea.l 12(sp),a0
   10b8e:	       move.l 24(a0),d0
   10b92:	       move.l d0,-(sp)
   10b94:	       pea 1 <_start+0x1>
   10b98:	       move.l sp,d0
   10b9a:	       addq.l #8,d0
   10b9c:	       move.l d0,-(sp)
   10b9e:	       jsr 14cc8 <getValueType>
   10ba4:	       lea 12(sp),sp
   10ba8:	       tst.w d0
   10baa:	   ,-- bne.s 10bb0 <builtIn_setDefaultMusicVolume+0x28>
   10bac:	   |   moveq #1,d0
   10bae:	,--|-- bra.s 10bce <builtIn_setDefaultMusicVolume+0x46>
	trimStack (&fun -> stack);
   10bb0:	|  '-> moveq #24,d0
   10bb2:	|      add.l 12(sp),d0
   10bb6:	|      move.l d0,-(sp)
   10bb8:	|      jsr 1564c <trimStack>
   10bbe:	|      addq.l #4,sp
	setDefaultMusicVolume (v);
   10bc0:	|      move.l (sp),d0
   10bc2:	|      move.l d0,-(sp)
   10bc4:	|      jsr d678 <setDefaultMusicVolume>
   10bca:	|      addq.l #4,sp
	return BR_CONTINUE;
   10bcc:	|      moveq #2,d0
}
   10bce:	'----> addq.l #4,sp
   10bd0:	       rts

00010bd2 <builtIn_playSound>:

builtIn(playSound)
{
   10bd2:	       subq.l #4,sp


	UNUSEDALL
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   10bd4:	       movea.l 12(sp),a0
   10bd8:	       move.l 24(a0),d0
   10bdc:	       move.l d0,-(sp)
   10bde:	       pea 5 <_start+0x5>
   10be2:	       move.l sp,d0
   10be4:	       addq.l #8,d0
   10be6:	       move.l d0,-(sp)
   10be8:	       jsr 14cc8 <getValueType>
   10bee:	       lea 12(sp),sp
   10bf2:	       tst.w d0
   10bf4:	   ,-- bne.s 10bfa <builtIn_playSound+0x28>
   10bf6:	   |   moveq #1,d0
   10bf8:	,--|-- bra.s 10c22 <builtIn_playSound+0x50>
	trimStack (&fun -> stack);
   10bfa:	|  '-> moveq #24,d0
   10bfc:	|      add.l 12(sp),d0
   10c00:	|      move.l d0,-(sp)
   10c02:	|      jsr 1564c <trimStack>
   10c08:	|      addq.l #4,sp
	if (! startSound (fileNumber, FALSE)) return BR_CONTINUE;	// Was BR_ERROR
   10c0a:	|      move.l (sp),d0
   10c0c:	|      clr.l -(sp)
   10c0e:	|      move.l d0,-(sp)
   10c10:	|      jsr d69c <startSound>
   10c16:	|      addq.l #8,sp
   10c18:	|      tst.w d0
   10c1a:	|  ,-- bne.s 10c20 <builtIn_playSound+0x4e>
   10c1c:	|  |   moveq #2,d0
   10c1e:	+--|-- bra.s 10c22 <builtIn_playSound+0x50>
	return BR_CONTINUE;
   10c20:	|  '-> moveq #2,d0
}
   10c22:	'----> addq.l #4,sp
   10c24:	       rts

00010c26 <builtIn_loopSound>:

builtIn(loopSound)
{
   10c26:	             lea -28(sp),sp
   10c2a:	             move.l a6,-(sp)
	UNUSEDALL
	int fileNumber;

	if (numParams < 1) {
   10c2c:	             tst.l 36(sp)
   10c30:	         ,-- bgt.s 10c46 <builtIn_loopSound+0x20>
		KPrintF("Built-in function loopSound() must have at least 1 parameter.");
   10c32:	         |   pea 1a073 <PutChar+0x1e29>
   10c38:	         |   jsr 177a8 <KPrintF>
   10c3e:	         |   addq.l #4,sp
		return BR_ERROR;
   10c40:	         |   moveq #1,d0
   10c42:	,--------|-- bra.w 10e02 <builtIn_loopSound+0x1dc>
	} else if (numParams < 2) {
   10c46:	|        '-> moveq #1,d0
   10c48:	|            cmp.l 36(sp),d0
   10c4c:	|     ,----- blt.s 10ca8 <builtIn_loopSound+0x82>

		if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) return BR_ERROR;
   10c4e:	|     |      movea.l 40(sp),a0
   10c52:	|     |      move.l 24(a0),d0
   10c56:	|     |      move.l d0,-(sp)
   10c58:	|     |      pea 5 <_start+0x5>
   10c5c:	|     |      lea 16(sp),a0
   10c60:	|     |      move.l a0,-(sp)
   10c62:	|     |      jsr 14cc8 <getValueType>
   10c68:	|     |      lea 12(sp),sp
   10c6c:	|     |      tst.w d0
   10c6e:	|     |  ,-- bne.s 10c76 <builtIn_loopSound+0x50>
   10c70:	|     |  |   moveq #1,d0
   10c72:	+-----|--|-- bra.w 10e02 <builtIn_loopSound+0x1dc>
		trimStack(&fun->stack);
   10c76:	|     |  '-> moveq #24,d0
   10c78:	|     |      add.l 40(sp),d0
   10c7c:	|     |      move.l d0,-(sp)
   10c7e:	|     |      jsr 1564c <trimStack>
   10c84:	|     |      addq.l #4,sp
		if (!startSound(fileNumber, TRUE)) return BR_CONTINUE;	// Was BR_ERROR
   10c86:	|     |      move.l 8(sp),d0
   10c8a:	|     |      pea 1 <_start+0x1>
   10c8e:	|     |      move.l d0,-(sp)
   10c90:	|     |      jsr d69c <startSound>
   10c96:	|     |      addq.l #8,sp
   10c98:	|     |      tst.w d0
   10c9a:	|     |  ,-- bne.s 10ca2 <builtIn_loopSound+0x7c>
   10c9c:	|     |  |   moveq #2,d0
   10c9e:	+-----|--|-- bra.w 10e02 <builtIn_loopSound+0x1dc>
		return BR_CONTINUE;
   10ca2:	|     |  '-> moveq #2,d0
   10ca4:	+-----|----- bra.w 10e02 <builtIn_loopSound+0x1dc>
	} else {
		// We have more than one sound to play!

		int doLoop = 2;
   10ca8:	|     '----> moveq #2,d1
   10caa:	|            move.l d1,4(sp)
		struct soundList *s = NULL;
   10cae:	|            clr.l 28(sp)
		struct soundList *old = NULL;
   10cb2:	|            clr.l 24(sp)

		// Should we loop?
		if (fun->stack->thisVar.varType != SVT_FILE) {
   10cb6:	|            movea.l 40(sp),a0
   10cba:	|            movea.l 24(a0),a0
   10cbe:	|            move.l (a0),d0
   10cc0:	|            moveq #5,d1
   10cc2:	|            cmp.l d0,d1
   10cc4:	|  ,-------- beq.w 10d9c <builtIn_loopSound+0x176>
			getValueType(&doLoop, SVT_INT,&fun->stack->thisVar);
   10cc8:	|  |         movea.l 40(sp),a0
   10ccc:	|  |         move.l 24(a0),d0
   10cd0:	|  |         move.l d0,-(sp)
   10cd2:	|  |         pea 1 <_start+0x1>
   10cd6:	|  |         lea 12(sp),a0
   10cda:	|  |         move.l a0,-(sp)
   10cdc:	|  |         jsr 14cc8 <getValueType>
   10ce2:	|  |         lea 12(sp),sp
			trimStack(&fun->stack);
   10ce6:	|  |         moveq #24,d0
   10ce8:	|  |         add.l 40(sp),d0
   10cec:	|  |         move.l d0,-(sp)
   10cee:	|  |         jsr 1564c <trimStack>
   10cf4:	|  |         addq.l #4,sp
			numParams--;
   10cf6:	|  |         subq.l #1,36(sp)
		}
		while (numParams) {
   10cfa:	|  +-------- bra.w 10d9c <builtIn_loopSound+0x176>
			if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) {
   10cfe:	|  |  ,----> movea.l 40(sp),a0
   10d02:	|  |  |      move.l 24(a0),d0
   10d06:	|  |  |      move.l d0,-(sp)
   10d08:	|  |  |      pea 5 <_start+0x5>
   10d0c:	|  |  |      lea 16(sp),a0
   10d10:	|  |  |      move.l a0,-(sp)
   10d12:	|  |  |      jsr 14cc8 <getValueType>
   10d18:	|  |  |      lea 12(sp),sp
   10d1c:	|  |  |      tst.w d0
   10d1e:	|  |  |  ,-- bne.s 10d34 <builtIn_loopSound+0x10e>
				KPrintF("Illegal parameter given built-in function loopSound().");
   10d20:	|  |  |  |   pea 1a0b1 <PutChar+0x1e67>
   10d26:	|  |  |  |   jsr 177a8 <KPrintF>
   10d2c:	|  |  |  |   addq.l #4,sp
				return BR_ERROR;
   10d2e:	|  |  |  |   moveq #1,d0
   10d30:	+--|--|--|-- bra.w 10e02 <builtIn_loopSound+0x1dc>
			}
			s = AllocVec(sizeof(struct soundList), MEMF_ANY);
   10d34:	|  |  |  '-> moveq #20,d0
   10d36:	|  |  |      move.l d0,20(sp)
   10d3a:	|  |  |      clr.l 16(sp)
   10d3e:	|  |  |      move.l 1cfb6 <SysBase>,d0
   10d44:	|  |  |      movea.l d0,a6
   10d46:	|  |  |      move.l 20(sp),d0
   10d4a:	|  |  |      move.l 16(sp),d1
   10d4e:	|  |  |      jsr -684(a6)
   10d52:	|  |  |      move.l d0,12(sp)
   10d56:	|  |  |      move.l 12(sp),d0
   10d5a:	|  |  |      move.l d0,28(sp)
			if (!s) return BR_ERROR;
   10d5e:	|  |  |  ,-- bne.s 10d66 <builtIn_loopSound+0x140>
   10d60:	|  |  |  |   moveq #1,d0
   10d62:	+--|--|--|-- bra.w 10e02 <builtIn_loopSound+0x1dc>

			s->next = old;
   10d66:	|  |  |  '-> movea.l 28(sp),a0
   10d6a:	|  |  |      move.l 24(sp),4(a0)
			s->prev = NULL;
   10d70:	|  |  |      movea.l 28(sp),a0
   10d74:	|  |  |      clr.l 8(a0)
			s->sound = fileNumber;
   10d78:	|  |  |      move.l 8(sp),d0
   10d7c:	|  |  |      movea.l 28(sp),a0
   10d80:	|  |  |      move.l d0,(a0)
			old = s;
   10d82:	|  |  |      move.l 28(sp),24(sp)

			trimStack(&fun->stack);
   10d88:	|  |  |      moveq #24,d0
   10d8a:	|  |  |      add.l 40(sp),d0
   10d8e:	|  |  |      move.l d0,-(sp)
   10d90:	|  |  |      jsr 1564c <trimStack>
   10d96:	|  |  |      addq.l #4,sp
			numParams--;
   10d98:	|  |  |      subq.l #1,36(sp)
		while (numParams) {
   10d9c:	|  '--|----> tst.l 36(sp)
   10da0:	|     '----- bne.w 10cfe <builtIn_loopSound+0xd8>
		}
		while (s->next) s = s->next;
   10da4:	|        ,-- bra.s 10db0 <builtIn_loopSound+0x18a>
   10da6:	|     ,--|-> movea.l 28(sp),a0
   10daa:	|     |  |   move.l 4(a0),28(sp)
   10db0:	|     |  '-> movea.l 28(sp),a0
   10db4:	|     |      move.l 4(a0),d0
   10db8:	|     '----- bne.s 10da6 <builtIn_loopSound+0x180>
		if (doLoop > 1) {
   10dba:	|            move.l 4(sp),d0
   10dbe:	|            moveq #1,d1
   10dc0:	|            cmp.l d0,d1
   10dc2:	|     ,----- bge.s 10dda <builtIn_loopSound+0x1b4>
			s->next = old;
   10dc4:	|     |      movea.l 28(sp),a0
   10dc8:	|     |      move.l 24(sp),4(a0)
			old->prev = s;
   10dce:	|     |      movea.l 24(sp),a0
   10dd2:	|     |      move.l 28(sp),8(a0)
   10dd8:	|     |  ,-- bra.s 10dea <builtIn_loopSound+0x1c4>
		} else if (doLoop) {
   10dda:	|     '--|-> move.l 4(sp),d0
   10dde:	|        +-- beq.s 10dea <builtIn_loopSound+0x1c4>
			s->next = s;
   10de0:	|        |   movea.l 28(sp),a0
   10de4:	|        |   move.l 28(sp),4(a0)
		}
		old->vol = -1;
   10dea:	|        '-> movea.l 24(sp),a0
   10dee:	|            moveq #-1,d0
   10df0:	|            move.l d0,16(a0)
		playSoundList(old);
   10df4:	|            move.l 24(sp),-(sp)
   10df8:	|            jsr d616 <playSoundList>
   10dfe:	|            addq.l #4,sp
		return BR_CONTINUE;
   10e00:	|            moveq #2,d0
	}
}
   10e02:	'----------> movea.l (sp)+,a6
   10e04:	             lea 28(sp),sp
   10e08:	             rts

00010e0a <builtIn_stopSound>:

builtIn(stopSound)
{
   10e0a:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   10e0c:	       movea.l 12(sp),a0
   10e10:	       move.l 24(a0),d0
   10e14:	       move.l d0,-(sp)
   10e16:	       pea 5 <_start+0x5>
   10e1a:	       move.l sp,d0
   10e1c:	       addq.l #8,d0
   10e1e:	       move.l d0,-(sp)
   10e20:	       jsr 14cc8 <getValueType>
   10e26:	       lea 12(sp),sp
   10e2a:	       tst.w d0
   10e2c:	   ,-- bne.s 10e32 <builtIn_stopSound+0x28>
   10e2e:	   |   moveq #1,d0
   10e30:	,--|-- bra.s 10e50 <builtIn_stopSound+0x46>
	trimStack (&fun -> stack);
   10e32:	|  '-> moveq #24,d0
   10e34:	|      add.l 12(sp),d0
   10e38:	|      move.l d0,-(sp)
   10e3a:	|      jsr 1564c <trimStack>
   10e40:	|      addq.l #4,sp
	huntKillSound (v);
   10e42:	|      move.l (sp),d0
   10e44:	|      move.l d0,-(sp)
   10e46:	|      jsr d60e <huntKillSound>
   10e4c:	|      addq.l #4,sp
	return BR_CONTINUE;
   10e4e:	|      moveq #2,d0
}
   10e50:	'----> addq.l #4,sp
   10e52:	       rts

00010e54 <builtIn_setDefaultSoundVolume>:

builtIn(setDefaultSoundVolume)
{
   10e54:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10e56:	       movea.l 12(sp),a0
   10e5a:	       move.l 24(a0),d0
   10e5e:	       move.l d0,-(sp)
   10e60:	       pea 1 <_start+0x1>
   10e64:	       move.l sp,d0
   10e66:	       addq.l #8,d0
   10e68:	       move.l d0,-(sp)
   10e6a:	       jsr 14cc8 <getValueType>
   10e70:	       lea 12(sp),sp
   10e74:	       tst.w d0
   10e76:	   ,-- bne.s 10e7c <builtIn_setDefaultSoundVolume+0x28>
   10e78:	   |   moveq #1,d0
   10e7a:	,--|-- bra.s 10e9a <builtIn_setDefaultSoundVolume+0x46>
	trimStack (&fun -> stack);
   10e7c:	|  '-> moveq #24,d0
   10e7e:	|      add.l 12(sp),d0
   10e82:	|      move.l d0,-(sp)
   10e84:	|      jsr 1564c <trimStack>
   10e8a:	|      addq.l #4,sp
	setDefaultSoundVolume (v);
   10e8c:	|      move.l (sp),d0
   10e8e:	|      move.l d0,-(sp)
   10e90:	|      jsr d684 <setDefaultSoundVolume>
   10e96:	|      addq.l #4,sp
	return BR_CONTINUE;
   10e98:	|      moveq #2,d0
}
   10e9a:	'----> addq.l #4,sp
   10e9c:	       rts

00010e9e <builtIn_setSoundVolume>:

builtIn(setSoundVolume)
{
   10e9e:	       subq.l #8,sp
	UNUSEDALL
	int musChan, v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10ea0:	       movea.l 16(sp),a0
   10ea4:	       move.l 24(a0),d0
   10ea8:	       move.l d0,-(sp)
   10eaa:	       pea 1 <_start+0x1>
   10eae:	       move.l sp,d0
   10eb0:	       addq.l #8,d0
   10eb2:	       move.l d0,-(sp)
   10eb4:	       jsr 14cc8 <getValueType>
   10eba:	       lea 12(sp),sp
   10ebe:	       tst.w d0
   10ec0:	   ,-- bne.s 10ec6 <builtIn_setSoundVolume+0x28>
   10ec2:	   |   moveq #1,d0
   10ec4:	,--|-- bra.s 10f20 <builtIn_setSoundVolume+0x82>
	trimStack (&fun -> stack);
   10ec6:	|  '-> moveq #24,d0
   10ec8:	|      add.l 16(sp),d0
   10ecc:	|      move.l d0,-(sp)
   10ece:	|      jsr 1564c <trimStack>
   10ed4:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   10ed6:	|      movea.l 16(sp),a0
   10eda:	|      move.l 24(a0),d0
   10ede:	|      move.l d0,-(sp)
   10ee0:	|      pea 5 <_start+0x5>
   10ee4:	|      moveq #12,d0
   10ee6:	|      add.l sp,d0
   10ee8:	|      move.l d0,-(sp)
   10eea:	|      jsr 14cc8 <getValueType>
   10ef0:	|      lea 12(sp),sp
   10ef4:	|      tst.w d0
   10ef6:	|  ,-- bne.s 10efc <builtIn_setSoundVolume+0x5e>
   10ef8:	|  |   moveq #1,d0
   10efa:	+--|-- bra.s 10f20 <builtIn_setSoundVolume+0x82>
	trimStack (&fun -> stack);
   10efc:	|  '-> moveq #24,d0
   10efe:	|      add.l 16(sp),d0
   10f02:	|      move.l d0,-(sp)
   10f04:	|      jsr 1564c <trimStack>
   10f0a:	|      addq.l #4,sp
	setSoundVolume (musChan, v);
   10f0c:	|      move.l (sp),d1
   10f0e:	|      move.l 4(sp),d0
   10f12:	|      move.l d1,-(sp)
   10f14:	|      move.l d0,-(sp)
   10f16:	|      jsr d698 <setSoundVolume>
   10f1c:	|      addq.l #8,sp
	return BR_CONTINUE;
   10f1e:	|      moveq #2,d0
}
   10f20:	'----> addq.l #8,sp
   10f22:	       rts

00010f24 <builtIn_setSoundLoopPoints>:


builtIn(setSoundLoopPoints)
{
   10f24:	       lea -12(sp),sp
	UNUSEDALL
	int musChan, theEnd, theStart;
	if (! getValueType(&theEnd, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10f28:	       movea.l 20(sp),a0
   10f2c:	       move.l 24(a0),d0
   10f30:	       move.l d0,-(sp)
   10f32:	       pea 1 <_start+0x1>
   10f36:	       moveq #12,d0
   10f38:	       add.l sp,d0
   10f3a:	       move.l d0,-(sp)
   10f3c:	       jsr 14cc8 <getValueType>
   10f42:	       lea 12(sp),sp
   10f46:	       tst.w d0
   10f48:	   ,-- bne.s 10f50 <builtIn_setSoundLoopPoints+0x2c>
   10f4a:	   |   moveq #1,d0
   10f4c:	,--|-- bra.w 10fe8 <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
   10f50:	|  '-> moveq #24,d0
   10f52:	|      add.l 20(sp),d0
   10f56:	|      move.l d0,-(sp)
   10f58:	|      jsr 1564c <trimStack>
   10f5e:	|      addq.l #4,sp
	if (! getValueType(&theStart, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10f60:	|      movea.l 20(sp),a0
   10f64:	|      move.l 24(a0),d0
   10f68:	|      move.l d0,-(sp)
   10f6a:	|      pea 1 <_start+0x1>
   10f6e:	|      lea 8(sp),a0
   10f72:	|      move.l a0,-(sp)
   10f74:	|      jsr 14cc8 <getValueType>
   10f7a:	|      lea 12(sp),sp
   10f7e:	|      tst.w d0
   10f80:	|  ,-- bne.s 10f86 <builtIn_setSoundLoopPoints+0x62>
   10f82:	|  |   moveq #1,d0
   10f84:	+--|-- bra.s 10fe8 <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
   10f86:	|  '-> moveq #24,d0
   10f88:	|      add.l 20(sp),d0
   10f8c:	|      move.l d0,-(sp)
   10f8e:	|      jsr 1564c <trimStack>
   10f94:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   10f96:	|      movea.l 20(sp),a0
   10f9a:	|      move.l 24(a0),d0
   10f9e:	|      move.l d0,-(sp)
   10fa0:	|      pea 5 <_start+0x5>
   10fa4:	|      moveq #16,d0
   10fa6:	|      add.l sp,d0
   10fa8:	|      move.l d0,-(sp)
   10faa:	|      jsr 14cc8 <getValueType>
   10fb0:	|      lea 12(sp),sp
   10fb4:	|      tst.w d0
   10fb6:	|  ,-- bne.s 10fbc <builtIn_setSoundLoopPoints+0x98>
   10fb8:	|  |   moveq #1,d0
   10fba:	+--|-- bra.s 10fe8 <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
   10fbc:	|  '-> moveq #24,d0
   10fbe:	|      add.l 20(sp),d0
   10fc2:	|      move.l d0,-(sp)
   10fc4:	|      jsr 1564c <trimStack>
   10fca:	|      addq.l #4,sp
	setSoundLoop (musChan, theStart, theEnd);
   10fcc:	|      movea.l 4(sp),a0
   10fd0:	|      move.l (sp),d1
   10fd2:	|      move.l 8(sp),d0
   10fd6:	|      move.l a0,-(sp)
   10fd8:	|      move.l d1,-(sp)
   10fda:	|      move.l d0,-(sp)
   10fdc:	|      jsr d690 <setSoundLoop>
   10fe2:	|      lea 12(sp),sp
	return BR_CONTINUE;
   10fe6:	|      moveq #2,d0
}
   10fe8:	'----> lea 12(sp),sp
   10fec:	       rts

00010fee <builtIn_setFloor>:

#pragma mark -
#pragma mark Extra room bits

builtIn(setFloor)
{
   10fee:	          subq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType == SVT_FILE) {
   10ff0:	          movea.l 12(sp),a0
   10ff4:	          movea.l 24(a0),a0
   10ff8:	          move.l (a0),d0
   10ffa:	          moveq #5,d1
   10ffc:	          cmp.l d0,d1
   10ffe:	,-------- bne.s 11042 <builtIn_setFloor+0x54>
		int v;
		getValueType(&v, SVT_FILE,&fun -> stack -> thisVar);
   11000:	|         movea.l 12(sp),a0
   11004:	|         move.l 24(a0),d0
   11008:	|         move.l d0,-(sp)
   1100a:	|         pea 5 <_start+0x5>
   1100e:	|         move.l sp,d0
   11010:	|         addq.l #8,d0
   11012:	|         move.l d0,-(sp)
   11014:	|         jsr 14cc8 <getValueType>
   1101a:	|         lea 12(sp),sp
		trimStack (&fun -> stack);
   1101e:	|         moveq #24,d0
   11020:	|         add.l 12(sp),d0
   11024:	|         move.l d0,-(sp)
   11026:	|         jsr 1564c <trimStack>
   1102c:	|         addq.l #4,sp
		if (! setFloor (v)) return BR_ERROR;
   1102e:	|         move.l (sp),d0
   11030:	|         move.l d0,-(sp)
   11032:	|         jsr 16f52 <setFloor>
   11038:	|         addq.l #4,sp
   1103a:	|         tst.w d0
   1103c:	|  ,----- bne.s 11058 <builtIn_setFloor+0x6a>
   1103e:	|  |      moveq #1,d0
   11040:	|  |  ,-- bra.s 1105a <builtIn_setFloor+0x6c>
	} else {
		trimStack (&fun -> stack);
   11042:	'--|--|-> moveq #24,d0
   11044:	   |  |   add.l 12(sp),d0
   11048:	   |  |   move.l d0,-(sp)
   1104a:	   |  |   jsr 1564c <trimStack>
   11050:	   |  |   addq.l #4,sp
		setFloorNull ();
   11052:	   |  |   jsr 176cc <setFloorNull>
	}
	return BR_CONTINUE;
   11058:	   '--|-> moveq #2,d0
}
   1105a:	      '-> addq.l #4,sp
   1105c:	          rts

0001105e <builtIn_showFloor>:

builtIn(showFloor)
{
	UNUSEDALL
	drawFloor ();
   1105e:	jsr 167ce <drawFloor>
	return BR_CONTINUE;
   11064:	moveq #2,d0
}
   11066:	rts

00011068 <builtIn_setZBuffer>:

builtIn(setZBuffer)
{
   11068:	          subq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType == SVT_FILE) {
   1106a:	          movea.l 12(sp),a0
   1106e:	          movea.l 24(a0),a0
   11072:	          move.l (a0),d0
   11074:	          moveq #5,d1
   11076:	          cmp.l d0,d1
   11078:	,-------- bne.s 110bc <builtIn_setZBuffer+0x54>
		int v;
		getValueType(&v, SVT_FILE,&fun -> stack -> thisVar);
   1107a:	|         movea.l 12(sp),a0
   1107e:	|         move.l 24(a0),d0
   11082:	|         move.l d0,-(sp)
   11084:	|         pea 5 <_start+0x5>
   11088:	|         move.l sp,d0
   1108a:	|         addq.l #8,d0
   1108c:	|         move.l d0,-(sp)
   1108e:	|         jsr 14cc8 <getValueType>
   11094:	|         lea 12(sp),sp
		trimStack (&fun -> stack);
   11098:	|         moveq #24,d0
   1109a:	|         add.l 12(sp),d0
   1109e:	|         move.l d0,-(sp)
   110a0:	|         jsr 1564c <trimStack>
   110a6:	|         addq.l #4,sp
		if (! setZBuffer (v)) return BR_ERROR;
   110a8:	|         move.l (sp),d0
   110aa:	|         move.l d0,-(sp)
   110ac:	|         jsr 8b3e <setZBuffer>
   110b2:	|         addq.l #4,sp
   110b4:	|         tst.w d0
   110b6:	|  ,----- bne.s 110d2 <builtIn_setZBuffer+0x6a>
   110b8:	|  |      moveq #1,d0
   110ba:	|  |  ,-- bra.s 110d4 <builtIn_setZBuffer+0x6c>
	} else {
		trimStack (&fun -> stack);
   110bc:	'--|--|-> moveq #24,d0
   110be:	   |  |   add.l 12(sp),d0
   110c2:	   |  |   move.l d0,-(sp)
   110c4:	   |  |   jsr 1564c <trimStack>
   110ca:	   |  |   addq.l #4,sp
		killZBuffer ();
   110cc:	   |  |   jsr 8af2 <killZBuffer>
	}
	return BR_CONTINUE;
   110d2:	   '--|-> moveq #2,d0
}
   110d4:	      '-> addq.l #4,sp
   110d6:	          rts

000110d8 <builtIn_setLightMap>:

		default:
			fatal ("Function should have either 2 or 3 parameters");
			return BR_ERROR;
	}*/
	KPrintF("Not implemented on Amiga");
   110d8:	pea 1a0e8 <PutChar+0x1e9e>
   110de:	jsr 177a8 <KPrintF>
   110e4:	addq.l #4,sp
	return BR_CONTINUE;
   110e6:	moveq #2,d0
}
   110e8:	rts

000110ea <builtIn_setSpeechMode>:
#pragma mark Objects

builtIn(setSpeechMode)
{
	UNUSEDALL
	if (! getValueType(&speechMode, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   110ea:	          movea.l 8(sp),a0
   110ee:	          move.l 24(a0),d0
   110f2:	          move.l d0,-(sp)
   110f4:	          pea 1 <_start+0x1>
   110f8:	          pea 1d080 <speechMode>
   110fe:	          jsr 14cc8 <getValueType>
   11104:	          lea 12(sp),sp
   11108:	          tst.w d0
   1110a:	      ,-- bne.s 11110 <builtIn_setSpeechMode+0x26>
   1110c:	      |   moveq #1,d0
   1110e:	,-----|-- bra.s 11148 <builtIn_setSpeechMode+0x5e>
	trimStack (&fun -> stack);
   11110:	|     '-> moveq #24,d0
   11112:	|         add.l 8(sp),d0
   11116:	|         move.l d0,-(sp)
   11118:	|         jsr 1564c <trimStack>
   1111e:	|         addq.l #4,sp
	if (speechMode < 0 || speechMode > 2) {
   11120:	|         move.l 1d080 <speechMode>,d0
   11126:	|     ,-- bmi.s 11134 <builtIn_setSpeechMode+0x4a>
   11128:	|     |   move.l 1d080 <speechMode>,d0
   1112e:	|     |   moveq #2,d1
   11130:	|     |   cmp.l d0,d1
   11132:	|  ,--|-- bge.s 11146 <builtIn_setSpeechMode+0x5c>
		KPrintF ("Valid parameters are be SPEECHANDTEXT, SPEECHONLY or TEXTONLY");
   11134:	|  |  '-> pea 1a101 <PutChar+0x1eb7>
   1113a:	|  |      jsr 177a8 <KPrintF>
   11140:	|  |      addq.l #4,sp
		return BR_ERROR;
   11142:	|  |      moveq #1,d0
   11144:	+--|----- bra.s 11148 <builtIn_setSpeechMode+0x5e>
	}
	return BR_CONTINUE;
   11146:	|  '----> moveq #2,d0
}
   11148:	'-------> rts

0001114a <builtIn_somethingSpeaking>:

builtIn(somethingSpeaking)
{
   1114a:	       subq.l #4,sp
	UNUSEDALL
	int i = isThereAnySpeechGoingOn ();
   1114c:	       jsr 42cc <isThereAnySpeechGoingOn>
   11152:	       move.l d0,(sp)
	if (i == -1) {
   11154:	       moveq #-1,d0
   11156:	       cmp.l (sp),d0
   11158:	,----- bne.s 11174 <builtIn_somethingSpeaking+0x2a>
		setVariable (&fun -> reg, SVT_INT, 0);
   1115a:	|      moveq #28,d0
   1115c:	|      add.l 12(sp),d0
   11160:	|      clr.l -(sp)
   11162:	|      pea 1 <_start+0x1>
   11166:	|      move.l d0,-(sp)
   11168:	|      jsr 155ba <setVariable>
   1116e:	|      lea 12(sp),sp
   11172:	|  ,-- bra.s 1118c <builtIn_somethingSpeaking+0x42>
	} else {
		setVariable (&fun -> reg, SVT_OBJTYPE, i);
   11174:	'--|-> moveq #28,d0
   11176:	   |   add.l 12(sp),d0
   1117a:	   |   move.l (sp),-(sp)
   1117c:	   |   pea 7 <_start+0x7>
   11180:	   |   move.l d0,-(sp)
   11182:	   |   jsr 155ba <setVariable>
   11188:	   |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   1118c:	   '-> moveq #2,d0
}
   1118e:	       addq.l #4,sp
   11190:	       rts

00011192 <builtIn_skipSpeech>:

builtIn(skipSpeech)
{
	UNUSEDALL
	killSpeechTimers ();
   11192:	jsr 6dca <killSpeechTimers>
	return BR_CONTINUE;
   11198:	moveq #2,d0
}
   1119a:	rts

0001119c <builtIn_getOverObject>:

builtIn(getOverObject)
{
	UNUSEDALL
	if (overRegion)
   1119c:	       move.l 1d0c6 <overRegion>,d0
   111a2:	,----- beq.s 111cc <builtIn_getOverObject+0x30>
		// Return value
		setVariable (&fun -> reg, SVT_OBJTYPE, overRegion -> thisType -> objectNum);
   111a4:	|      movea.l 1d0c6 <overRegion>,a0
   111aa:	|      movea.l 28(a0),a0
   111ae:	|      move.l 4(a0),d1
   111b2:	|      moveq #28,d0
   111b4:	|      add.l 8(sp),d0
   111b8:	|      move.l d1,-(sp)
   111ba:	|      pea 7 <_start+0x7>
   111be:	|      move.l d0,-(sp)
   111c0:	|      jsr 155ba <setVariable>
   111c6:	|      lea 12(sp),sp
   111ca:	|  ,-- bra.s 111e4 <builtIn_getOverObject+0x48>
	else
		// Return value
		setVariable (&fun -> reg, SVT_INT, 0);
   111cc:	'--|-> moveq #28,d0
   111ce:	   |   add.l 8(sp),d0
   111d2:	   |   clr.l -(sp)
   111d4:	   |   pea 1 <_start+0x1>
   111d8:	   |   move.l d0,-(sp)
   111da:	   |   jsr 155ba <setVariable>
   111e0:	   |   lea 12(sp),sp
	return BR_CONTINUE;
   111e4:	   '-> moveq #2,d0
}
   111e6:	       rts

000111e8 <builtIn_rename>:

builtIn(rename)
{
   111e8:	       lea -16(sp),sp
   111ec:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar(&(fun->stack->thisVar));
   111ee:	       movea.l 28(sp),a0
   111f2:	       move.l 24(a0),d0
   111f6:	       move.l d0,-(sp)
   111f8:	       jsr 1529e <getTextFromAnyVar>
   111fe:	       addq.l #4,sp
   11200:	       move.l d0,16(sp)
	int objT;
	if (!newText) return BR_ERROR;
   11204:	   ,-- bne.s 1120a <builtIn_rename+0x22>
   11206:	   |   moveq #1,d0
   11208:	,--|-- bra.s 11284 <builtIn_rename+0x9c>
	trimStack(&fun->stack);
   1120a:	|  '-> moveq #24,d0
   1120c:	|      add.l 28(sp),d0
   11210:	|      move.l d0,-(sp)
   11212:	|      jsr 1564c <trimStack>
   11218:	|      addq.l #4,sp
	if (!getValueType(&objT, SVT_OBJTYPE, &fun->stack->thisVar)) return BR_ERROR;
   1121a:	|      movea.l 28(sp),a0
   1121e:	|      move.l 24(a0),d0
   11222:	|      move.l d0,-(sp)
   11224:	|      pea 7 <_start+0x7>
   11228:	|      lea 12(sp),a0
   1122c:	|      move.l a0,-(sp)
   1122e:	|      jsr 14cc8 <getValueType>
   11234:	|      lea 12(sp),sp
   11238:	|      tst.w d0
   1123a:	|  ,-- bne.s 11240 <builtIn_rename+0x58>
   1123c:	|  |   moveq #1,d0
   1123e:	+--|-- bra.s 11284 <builtIn_rename+0x9c>
	trimStack(&fun->stack);
   11240:	|  '-> moveq #24,d0
   11242:	|      add.l 28(sp),d0
   11246:	|      move.l d0,-(sp)
   11248:	|      jsr 1564c <trimStack>
   1124e:	|      addq.l #4,sp
	struct objectType * o = findObjectType(objT);
   11250:	|      move.l 4(sp),d0
   11254:	|      move.l d0,-(sp)
   11256:	|      jsr d9dc <findObjectType>
   1125c:	|      addq.l #4,sp
   1125e:	|      move.l d0,12(sp)
	FreeVec(o->screenName);
   11262:	|      movea.l 12(sp),a0
   11266:	|      move.l (a0),8(sp)
   1126a:	|      move.l 1cfb6 <SysBase>,d0
   11270:	|      movea.l d0,a6
   11272:	|      movea.l 8(sp),a1
   11276:	|      jsr -690(a6)
	o->screenName = newText;
   1127a:	|      movea.l 12(sp),a0
   1127e:	|      move.l 16(sp),(a0)
	return BR_CONTINUE;
   11282:	|      moveq #2,d0
}
   11284:	'----> movea.l (sp)+,a6
   11286:	       lea 16(sp),sp
   1128a:	       rts

0001128c <builtIn_getObjectX>:

builtIn (getObjectX)
{
   1128c:	          lea -12(sp),sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11290:	          movea.l 20(sp),a0
   11294:	          move.l 24(a0),d0
   11298:	          move.l d0,-(sp)
   1129a:	          pea 7 <_start+0x7>
   1129e:	          lea 8(sp),a0
   112a2:	          move.l a0,-(sp)
   112a4:	          jsr 14cc8 <getValueType>
   112aa:	          lea 12(sp),sp
   112ae:	          tst.w d0
   112b0:	      ,-- bne.s 112b8 <builtIn_getObjectX+0x2c>
   112b2:	      |   moveq #1,d0
   112b4:	,-----|-- bra.w 11354 <builtIn_getObjectX+0xc8>
	trimStack (&fun -> stack);
   112b8:	|     '-> moveq #24,d0
   112ba:	|         add.l 20(sp),d0
   112be:	|         move.l d0,-(sp)
   112c0:	|         jsr 1564c <trimStack>
   112c6:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   112c8:	|         move.l (sp),d0
   112ca:	|         move.l d0,-(sp)
   112cc:	|         jsr aa6e <findPerson>
   112d2:	|         addq.l #4,sp
   112d4:	|         move.l d0,8(sp)
	if (pers) {
   112d8:	|     ,-- beq.s 11306 <builtIn_getObjectX+0x7a>
		setVariable (&fun -> reg, SVT_INT, pers -> x);
   112da:	|     |   movea.l 8(sp),a0
   112de:	|     |   move.l (a0),d0
   112e0:	|     |   move.l d0,-(sp)
   112e2:	|     |   jsr 17b72 <__fixsfsi>
   112e8:	|     |   addq.l #4,sp
   112ea:	|     |   move.l d0,d1
   112ec:	|     |   moveq #28,d0
   112ee:	|     |   add.l 20(sp),d0
   112f2:	|     |   move.l d1,-(sp)
   112f4:	|     |   pea 1 <_start+0x1>
   112f8:	|     |   move.l d0,-(sp)
   112fa:	|     |   jsr 155ba <setVariable>
   11300:	|     |   lea 12(sp),sp
   11304:	|  ,--|-- bra.s 11352 <builtIn_getObjectX+0xc6>
	} else {
		struct screenRegion * la = getRegionForObject (objectNumber);
   11306:	|  |  '-> move.l (sp),d0
   11308:	|  |      move.l d0,-(sp)
   1130a:	|  |      jsr 15f8a <getRegionForObject>
   11310:	|  |      addq.l #4,sp
   11312:	|  |      move.l d0,4(sp)
		if (la) {
   11316:	|  |  ,-- beq.s 1133a <builtIn_getObjectX+0xae>
			setVariable (&fun -> reg, SVT_INT, la -> sX);
   11318:	|  |  |   movea.l 4(sp),a0
   1131c:	|  |  |   move.l 16(a0),d1
   11320:	|  |  |   moveq #28,d0
   11322:	|  |  |   add.l 20(sp),d0
   11326:	|  |  |   move.l d1,-(sp)
   11328:	|  |  |   pea 1 <_start+0x1>
   1132c:	|  |  |   move.l d0,-(sp)
   1132e:	|  |  |   jsr 155ba <setVariable>
   11334:	|  |  |   lea 12(sp),sp
   11338:	|  +--|-- bra.s 11352 <builtIn_getObjectX+0xc6>
		} else {
			setVariable (&fun -> reg, SVT_INT, 0);
   1133a:	|  |  '-> moveq #28,d0
   1133c:	|  |      add.l 20(sp),d0
   11340:	|  |      clr.l -(sp)
   11342:	|  |      pea 1 <_start+0x1>
   11346:	|  |      move.l d0,-(sp)
   11348:	|  |      jsr 155ba <setVariable>
   1134e:	|  |      lea 12(sp),sp
		}
	}
	return BR_CONTINUE;
   11352:	|  '----> moveq #2,d0
}
   11354:	'-------> lea 12(sp),sp
   11358:	          rts

0001135a <builtIn_getObjectY>:

builtIn (getObjectY)
{
   1135a:	          lea -12(sp),sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1135e:	          movea.l 20(sp),a0
   11362:	          move.l 24(a0),d0
   11366:	          move.l d0,-(sp)
   11368:	          pea 7 <_start+0x7>
   1136c:	          lea 8(sp),a0
   11370:	          move.l a0,-(sp)
   11372:	          jsr 14cc8 <getValueType>
   11378:	          lea 12(sp),sp
   1137c:	          tst.w d0
   1137e:	      ,-- bne.s 11386 <builtIn_getObjectY+0x2c>
   11380:	      |   moveq #1,d0
   11382:	,-----|-- bra.w 11424 <builtIn_getObjectY+0xca>
	trimStack (&fun -> stack);
   11386:	|     '-> moveq #24,d0
   11388:	|         add.l 20(sp),d0
   1138c:	|         move.l d0,-(sp)
   1138e:	|         jsr 1564c <trimStack>
   11394:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   11396:	|         move.l (sp),d0
   11398:	|         move.l d0,-(sp)
   1139a:	|         jsr aa6e <findPerson>
   113a0:	|         addq.l #4,sp
   113a2:	|         move.l d0,8(sp)
	if (pers) {
   113a6:	|     ,-- beq.s 113d6 <builtIn_getObjectY+0x7c>
		setVariable (&fun -> reg, SVT_INT, pers -> y);
   113a8:	|     |   movea.l 8(sp),a0
   113ac:	|     |   move.l 4(a0),d0
   113b0:	|     |   move.l d0,-(sp)
   113b2:	|     |   jsr 17b72 <__fixsfsi>
   113b8:	|     |   addq.l #4,sp
   113ba:	|     |   move.l d0,d1
   113bc:	|     |   moveq #28,d0
   113be:	|     |   add.l 20(sp),d0
   113c2:	|     |   move.l d1,-(sp)
   113c4:	|     |   pea 1 <_start+0x1>
   113c8:	|     |   move.l d0,-(sp)
   113ca:	|     |   jsr 155ba <setVariable>
   113d0:	|     |   lea 12(sp),sp
   113d4:	|  ,--|-- bra.s 11422 <builtIn_getObjectY+0xc8>
	} else {
		struct screenRegion * la = getRegionForObject (objectNumber);
   113d6:	|  |  '-> move.l (sp),d0
   113d8:	|  |      move.l d0,-(sp)
   113da:	|  |      jsr 15f8a <getRegionForObject>
   113e0:	|  |      addq.l #4,sp
   113e2:	|  |      move.l d0,4(sp)
		if (la) {
   113e6:	|  |  ,-- beq.s 1140a <builtIn_getObjectY+0xb0>
			setVariable (&fun -> reg, SVT_INT, la -> sY);
   113e8:	|  |  |   movea.l 4(sp),a0
   113ec:	|  |  |   move.l 20(a0),d1
   113f0:	|  |  |   moveq #28,d0
   113f2:	|  |  |   add.l 20(sp),d0
   113f6:	|  |  |   move.l d1,-(sp)
   113f8:	|  |  |   pea 1 <_start+0x1>
   113fc:	|  |  |   move.l d0,-(sp)
   113fe:	|  |  |   jsr 155ba <setVariable>
   11404:	|  |  |   lea 12(sp),sp
   11408:	|  +--|-- bra.s 11422 <builtIn_getObjectY+0xc8>
		} else {
			setVariable (&fun -> reg, SVT_INT, 0);
   1140a:	|  |  '-> moveq #28,d0
   1140c:	|  |      add.l 20(sp),d0
   11410:	|  |      clr.l -(sp)
   11412:	|  |      pea 1 <_start+0x1>
   11416:	|  |      move.l d0,-(sp)
   11418:	|  |      jsr 155ba <setVariable>
   1141e:	|  |      lea 12(sp),sp
		}
	}
	return BR_CONTINUE;
   11422:	|  '----> moveq #2,d0
}
   11424:	'-------> lea 12(sp),sp
   11428:	          rts

0001142a <builtIn_addScreenRegion>:


builtIn(addScreenRegion)
{
   1142a:	       lea -32(sp),sp
   1142e:	       movem.l d2-d5,-(sp)
	UNUSEDALL
	int sX, sY, x1, y1, x2, y2, di, objectNumber;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11432:	       movea.l 56(sp),a0
   11436:	       move.l 24(a0),d0
   1143a:	       move.l d0,-(sp)
   1143c:	       pea 1 <_start+0x1>
   11440:	       lea 28(sp),a0
   11444:	       move.l a0,-(sp)
   11446:	       jsr 14cc8 <getValueType>
   1144c:	       lea 12(sp),sp
   11450:	       tst.w d0
   11452:	   ,-- bne.s 1145a <builtIn_addScreenRegion+0x30>
   11454:	   |   moveq #1,d0
   11456:	,--|-- bra.w 11634 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   1145a:	|  '-> moveq #24,d0
   1145c:	|      add.l 56(sp),d0
   11460:	|      move.l d0,-(sp)
   11462:	|      jsr 1564c <trimStack>
   11468:	|      addq.l #4,sp
	if (! getValueType(&sY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1146a:	|      movea.l 56(sp),a0
   1146e:	|      move.l 24(a0),d0
   11472:	|      move.l d0,-(sp)
   11474:	|      pea 1 <_start+0x1>
   11478:	|      moveq #48,d0
   1147a:	|      add.l sp,d0
   1147c:	|      move.l d0,-(sp)
   1147e:	|      jsr 14cc8 <getValueType>
   11484:	|      lea 12(sp),sp
   11488:	|      tst.w d0
   1148a:	|  ,-- bne.s 11492 <builtIn_addScreenRegion+0x68>
   1148c:	|  |   moveq #1,d0
   1148e:	+--|-- bra.w 11634 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   11492:	|  '-> moveq #24,d0
   11494:	|      add.l 56(sp),d0
   11498:	|      move.l d0,-(sp)
   1149a:	|      jsr 1564c <trimStack>
   114a0:	|      addq.l #4,sp
	if (! getValueType(&sX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   114a2:	|      movea.l 56(sp),a0
   114a6:	|      move.l 24(a0),d0
   114aa:	|      move.l d0,-(sp)
   114ac:	|      pea 1 <_start+0x1>
   114b0:	|      moveq #52,d0
   114b2:	|      add.l sp,d0
   114b4:	|      move.l d0,-(sp)
   114b6:	|      jsr 14cc8 <getValueType>
   114bc:	|      lea 12(sp),sp
   114c0:	|      tst.w d0
   114c2:	|  ,-- bne.s 114ca <builtIn_addScreenRegion+0xa0>
   114c4:	|  |   moveq #1,d0
   114c6:	+--|-- bra.w 11634 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   114ca:	|  '-> moveq #24,d0
   114cc:	|      add.l 56(sp),d0
   114d0:	|      move.l d0,-(sp)
   114d2:	|      jsr 1564c <trimStack>
   114d8:	|      addq.l #4,sp
	if (! getValueType(&y2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   114da:	|      movea.l 56(sp),a0
   114de:	|      move.l 24(a0),d0
   114e2:	|      move.l d0,-(sp)
   114e4:	|      pea 1 <_start+0x1>
   114e8:	|      lea 32(sp),a0
   114ec:	|      move.l a0,-(sp)
   114ee:	|      jsr 14cc8 <getValueType>
   114f4:	|      lea 12(sp),sp
   114f8:	|      tst.w d0
   114fa:	|  ,-- bne.s 11502 <builtIn_addScreenRegion+0xd8>
   114fc:	|  |   moveq #1,d0
   114fe:	+--|-- bra.w 11634 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   11502:	|  '-> moveq #24,d0
   11504:	|      add.l 56(sp),d0
   11508:	|      move.l d0,-(sp)
   1150a:	|      jsr 1564c <trimStack>
   11510:	|      addq.l #4,sp
	if (! getValueType(&x2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11512:	|      movea.l 56(sp),a0
   11516:	|      move.l 24(a0),d0
   1151a:	|      move.l d0,-(sp)
   1151c:	|      pea 1 <_start+0x1>
   11520:	|      lea 36(sp),a0
   11524:	|      move.l a0,-(sp)
   11526:	|      jsr 14cc8 <getValueType>
   1152c:	|      lea 12(sp),sp
   11530:	|      tst.w d0
   11532:	|  ,-- bne.s 1153a <builtIn_addScreenRegion+0x110>
   11534:	|  |   moveq #1,d0
   11536:	+--|-- bra.w 11634 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   1153a:	|  '-> moveq #24,d0
   1153c:	|      add.l 56(sp),d0
   11540:	|      move.l d0,-(sp)
   11542:	|      jsr 1564c <trimStack>
   11548:	|      addq.l #4,sp
	if (! getValueType(&y1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1154a:	|      movea.l 56(sp),a0
   1154e:	|      move.l 24(a0),d0
   11552:	|      move.l d0,-(sp)
   11554:	|      pea 1 <_start+0x1>
   11558:	|      lea 40(sp),a0
   1155c:	|      move.l a0,-(sp)
   1155e:	|      jsr 14cc8 <getValueType>
   11564:	|      lea 12(sp),sp
   11568:	|      tst.w d0
   1156a:	|  ,-- bne.s 11572 <builtIn_addScreenRegion+0x148>
   1156c:	|  |   moveq #1,d0
   1156e:	+--|-- bra.w 11634 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   11572:	|  '-> moveq #24,d0
   11574:	|      add.l 56(sp),d0
   11578:	|      move.l d0,-(sp)
   1157a:	|      jsr 1564c <trimStack>
   11580:	|      addq.l #4,sp
	if (! getValueType(&x1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11582:	|      movea.l 56(sp),a0
   11586:	|      move.l 24(a0),d0
   1158a:	|      move.l d0,-(sp)
   1158c:	|      pea 1 <_start+0x1>
   11590:	|      lea 44(sp),a0
   11594:	|      move.l a0,-(sp)
   11596:	|      jsr 14cc8 <getValueType>
   1159c:	|      lea 12(sp),sp
   115a0:	|      tst.w d0
   115a2:	|  ,-- bne.s 115aa <builtIn_addScreenRegion+0x180>
   115a4:	|  |   moveq #1,d0
   115a6:	+--|-- bra.w 11634 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   115aa:	|  '-> moveq #24,d0
   115ac:	|      add.l 56(sp),d0
   115b0:	|      move.l d0,-(sp)
   115b2:	|      jsr 1564c <trimStack>
   115b8:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   115ba:	|      movea.l 56(sp),a0
   115be:	|      move.l 24(a0),d0
   115c2:	|      move.l d0,-(sp)
   115c4:	|      pea 7 <_start+0x7>
   115c8:	|      lea 24(sp),a0
   115cc:	|      move.l a0,-(sp)
   115ce:	|      jsr 14cc8 <getValueType>
   115d4:	|      lea 12(sp),sp
   115d8:	|      tst.w d0
   115da:	|  ,-- bne.s 115e0 <builtIn_addScreenRegion+0x1b6>
   115dc:	|  |   moveq #1,d0
   115de:	+--|-- bra.s 11634 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   115e0:	|  '-> moveq #24,d0
   115e2:	|      add.l 56(sp),d0
   115e6:	|      move.l d0,-(sp)
   115e8:	|      jsr 1564c <trimStack>
   115ee:	|      addq.l #4,sp
	if (addScreenRegion (x1, y1, x2, y2, sX, sY, di, objectNumber)) return BR_CONTINUE;
   115f0:	|      move.l 16(sp),d5
   115f4:	|      move.l 20(sp),d4
   115f8:	|      move.l 40(sp),d3
   115fc:	|      move.l 44(sp),d2
   11600:	|      movea.l 24(sp),a1
   11604:	|      movea.l 28(sp),a0
   11608:	|      move.l 32(sp),d1
   1160c:	|      move.l 36(sp),d0
   11610:	|      move.l d5,-(sp)
   11612:	|      move.l d4,-(sp)
   11614:	|      move.l d3,-(sp)
   11616:	|      move.l d2,-(sp)
   11618:	|      move.l a1,-(sp)
   1161a:	|      move.l a0,-(sp)
   1161c:	|      move.l d1,-(sp)
   1161e:	|      move.l d0,-(sp)
   11620:	|      jsr 15e44 <addScreenRegion>
   11626:	|      lea 32(sp),sp
   1162a:	|      tst.w d0
   1162c:	|  ,-- beq.s 11632 <builtIn_addScreenRegion+0x208>
   1162e:	|  |   moveq #2,d0
   11630:	+--|-- bra.s 11634 <builtIn_addScreenRegion+0x20a>
	return BR_ERROR;
   11632:	|  '-> moveq #1,d0

}
   11634:	'----> movem.l (sp)+,d2-d5
   11638:	       lea 32(sp),sp
   1163c:	       rts

0001163e <builtIn_removeScreenRegion>:

builtIn(removeScreenRegion)
{
   1163e:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11640:	       movea.l 12(sp),a0
   11644:	       move.l 24(a0),d0
   11648:	       move.l d0,-(sp)
   1164a:	       pea 7 <_start+0x7>
   1164e:	       move.l sp,d0
   11650:	       addq.l #8,d0
   11652:	       move.l d0,-(sp)
   11654:	       jsr 14cc8 <getValueType>
   1165a:	       lea 12(sp),sp
   1165e:	       tst.w d0
   11660:	   ,-- bne.s 11666 <builtIn_removeScreenRegion+0x28>
   11662:	   |   moveq #1,d0
   11664:	,--|-- bra.s 11684 <builtIn_removeScreenRegion+0x46>
	trimStack (&fun -> stack);
   11666:	|  '-> moveq #24,d0
   11668:	|      add.l 12(sp),d0
   1166c:	|      move.l d0,-(sp)
   1166e:	|      jsr 1564c <trimStack>
   11674:	|      addq.l #4,sp
	removeScreenRegion (objectNumber);
   11676:	|      move.l (sp),d0
   11678:	|      move.l d0,-(sp)
   1167a:	|      jsr 16132 <removeScreenRegion>
   11680:	|      addq.l #4,sp
	return BR_CONTINUE;
   11682:	|      moveq #2,d0
}
   11684:	'----> addq.l #4,sp
   11686:	       rts

00011688 <builtIn_showBoxes>:

builtIn(showBoxes)
{
	UNUSEDALL
	showBoxes ();
   11688:	jsr 162b6 <showBoxes>
	return BR_CONTINUE;
   1168e:	moveq #2,d0
}
   11690:	rts

00011692 <builtIn_removeAllScreenRegions>:

builtIn(removeAllScreenRegions)
{
	UNUSEDALL
	killAllRegions ();
   11692:	jsr 15fb8 <killAllRegions>
	return BR_CONTINUE;
   11698:	moveq #2,d0
}
   1169a:	rts

0001169c <builtIn_addCharacter>:

builtIn(addCharacter)
{
   1169c:	       lea -16(sp),sp
	UNUSEDALL
	struct persona * p;
	int x, y, objectNumber;

	p = getCostumeFromVar (&(fun -> stack -> thisVar));
   116a0:	       movea.l 24(sp),a0
   116a4:	       move.l 24(a0),d0
   116a8:	       move.l d0,-(sp)
   116aa:	       jsr 14974 <getCostumeFromVar>
   116b0:	       addq.l #4,sp
   116b2:	       move.l d0,12(sp)
	if (p == NULL) return BR_ERROR;
   116b6:	   ,-- bne.s 116be <builtIn_addCharacter+0x22>
   116b8:	   |   moveq #1,d0
   116ba:	,--|-- bra.w 1179a <builtIn_addCharacter+0xfe>

	trimStack (&fun -> stack);
   116be:	|  '-> moveq #24,d0
   116c0:	|      add.l 24(sp),d0
   116c4:	|      move.l d0,-(sp)
   116c6:	|      jsr 1564c <trimStack>
   116cc:	|      addq.l #4,sp
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   116ce:	|      movea.l 24(sp),a0
   116d2:	|      move.l 24(a0),d0
   116d6:	|      move.l d0,-(sp)
   116d8:	|      pea 1 <_start+0x1>
   116dc:	|      lea 12(sp),a0
   116e0:	|      move.l a0,-(sp)
   116e2:	|      jsr 14cc8 <getValueType>
   116e8:	|      lea 12(sp),sp
   116ec:	|      tst.w d0
   116ee:	|  ,-- bne.s 116f6 <builtIn_addCharacter+0x5a>
   116f0:	|  |   moveq #1,d0
   116f2:	+--|-- bra.w 1179a <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
   116f6:	|  '-> moveq #24,d0
   116f8:	|      add.l 24(sp),d0
   116fc:	|      move.l d0,-(sp)
   116fe:	|      jsr 1564c <trimStack>
   11704:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11706:	|      movea.l 24(sp),a0
   1170a:	|      move.l 24(a0),d0
   1170e:	|      move.l d0,-(sp)
   11710:	|      pea 1 <_start+0x1>
   11714:	|      moveq #16,d0
   11716:	|      add.l sp,d0
   11718:	|      move.l d0,-(sp)
   1171a:	|      jsr 14cc8 <getValueType>
   11720:	|      lea 12(sp),sp
   11724:	|      tst.w d0
   11726:	|  ,-- bne.s 1172c <builtIn_addCharacter+0x90>
   11728:	|  |   moveq #1,d0
   1172a:	+--|-- bra.s 1179a <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
   1172c:	|  '-> moveq #24,d0
   1172e:	|      add.l 24(sp),d0
   11732:	|      move.l d0,-(sp)
   11734:	|      jsr 1564c <trimStack>
   1173a:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1173c:	|      movea.l 24(sp),a0
   11740:	|      move.l 24(a0),d0
   11744:	|      move.l d0,-(sp)
   11746:	|      pea 7 <_start+0x7>
   1174a:	|      lea 8(sp),a0
   1174e:	|      move.l a0,-(sp)
   11750:	|      jsr 14cc8 <getValueType>
   11756:	|      lea 12(sp),sp
   1175a:	|      tst.w d0
   1175c:	|  ,-- bne.s 11762 <builtIn_addCharacter+0xc6>
   1175e:	|  |   moveq #1,d0
   11760:	+--|-- bra.s 1179a <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
   11762:	|  '-> moveq #24,d0
   11764:	|      add.l 24(sp),d0
   11768:	|      move.l d0,-(sp)
   1176a:	|      jsr 1564c <trimStack>
   11770:	|      addq.l #4,sp
	if (addPerson (x, y, objectNumber, p)) return BR_CONTINUE;
   11772:	|      movea.l (sp),a0
   11774:	|      move.l 4(sp),d1
   11778:	|      move.l 8(sp),d0
   1177c:	|      move.l 12(sp),-(sp)
   11780:	|      move.l a0,-(sp)
   11782:	|      move.l d1,-(sp)
   11784:	|      move.l d0,-(sp)
   11786:	|      jsr 9668 <addPerson>
   1178c:	|      lea 16(sp),sp
   11790:	|      tst.w d0
   11792:	|  ,-- beq.s 11798 <builtIn_addCharacter+0xfc>
   11794:	|  |   moveq #2,d0
   11796:	+--|-- bra.s 1179a <builtIn_addCharacter+0xfe>
	return BR_ERROR;
   11798:	|  '-> moveq #1,d0
}
   1179a:	'----> lea 16(sp),sp
   1179e:	       rts

000117a0 <builtIn_hideCharacter>:

builtIn(hideCharacter)
{
   117a0:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   117a2:	       movea.l 12(sp),a0
   117a6:	       move.l 24(a0),d0
   117aa:	       move.l d0,-(sp)
   117ac:	       pea 7 <_start+0x7>
   117b0:	       move.l sp,d0
   117b2:	       addq.l #8,d0
   117b4:	       move.l d0,-(sp)
   117b6:	       jsr 14cc8 <getValueType>
   117bc:	       lea 12(sp),sp
   117c0:	       tst.w d0
   117c2:	   ,-- bne.s 117c8 <builtIn_hideCharacter+0x28>
   117c4:	   |   moveq #1,d0
   117c6:	,--|-- bra.s 117e8 <builtIn_hideCharacter+0x48>
	trimStack (&fun -> stack);
   117c8:	|  '-> moveq #24,d0
   117ca:	|      add.l 12(sp),d0
   117ce:	|      move.l d0,-(sp)
   117d0:	|      jsr 1564c <trimStack>
   117d6:	|      addq.l #4,sp
	setShown (FALSE, objectNumber);
   117d8:	|      move.l (sp),d0
   117da:	|      move.l d0,-(sp)
   117dc:	|      clr.l -(sp)
   117de:	|      jsr c104 <setShown>
   117e4:	|      addq.l #8,sp
	return BR_CONTINUE;
   117e6:	|      moveq #2,d0
}
   117e8:	'----> addq.l #4,sp
   117ea:	       rts

000117ec <builtIn_showCharacter>:

builtIn(showCharacter)
{
   117ec:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   117ee:	       movea.l 12(sp),a0
   117f2:	       move.l 24(a0),d0
   117f6:	       move.l d0,-(sp)
   117f8:	       pea 7 <_start+0x7>
   117fc:	       move.l sp,d0
   117fe:	       addq.l #8,d0
   11800:	       move.l d0,-(sp)
   11802:	       jsr 14cc8 <getValueType>
   11808:	       lea 12(sp),sp
   1180c:	       tst.w d0
   1180e:	   ,-- bne.s 11814 <builtIn_showCharacter+0x28>
   11810:	   |   moveq #1,d0
   11812:	,--|-- bra.s 11836 <builtIn_showCharacter+0x4a>
	trimStack (&fun -> stack);
   11814:	|  '-> moveq #24,d0
   11816:	|      add.l 12(sp),d0
   1181a:	|      move.l d0,-(sp)
   1181c:	|      jsr 1564c <trimStack>
   11822:	|      addq.l #4,sp
	setShown (TRUE, objectNumber);
   11824:	|      move.l (sp),d0
   11826:	|      move.l d0,-(sp)
   11828:	|      pea 1 <_start+0x1>
   1182c:	|      jsr c104 <setShown>
   11832:	|      addq.l #8,sp
	return BR_CONTINUE;
   11834:	|      moveq #2,d0
}
   11836:	'----> addq.l #4,sp
   11838:	       rts

0001183a <builtIn_removeAllCharacters>:

builtIn(removeAllCharacters)
{
	UNUSEDALL
	killSpeechTimers ();
   1183a:	jsr 6dca <killSpeechTimers>
	killMostPeople ();
   11840:	jsr af04 <killMostPeople>
	return BR_CONTINUE;
   11846:	moveq #2,d0
}
   11848:	rts

0001184a <builtIn_setCharacterDrawMode>:

builtIn(setCharacterDrawMode)
{
   1184a:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1184c:	       movea.l 16(sp),a0
   11850:	       move.l 24(a0),d0
   11854:	       move.l d0,-(sp)
   11856:	       pea 1 <_start+0x1>
   1185a:	       move.l sp,d0
   1185c:	       addq.l #8,d0
   1185e:	       move.l d0,-(sp)
   11860:	       jsr 14cc8 <getValueType>
   11866:	       lea 12(sp),sp
   1186a:	       tst.w d0
   1186c:	   ,-- bne.s 11872 <builtIn_setCharacterDrawMode+0x28>
   1186e:	   |   moveq #1,d0
   11870:	,--|-- bra.s 118cc <builtIn_setCharacterDrawMode+0x82>
	trimStack (&fun -> stack);
   11872:	|  '-> moveq #24,d0
   11874:	|      add.l 16(sp),d0
   11878:	|      move.l d0,-(sp)
   1187a:	|      jsr 1564c <trimStack>
   11880:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11882:	|      movea.l 16(sp),a0
   11886:	|      move.l 24(a0),d0
   1188a:	|      move.l d0,-(sp)
   1188c:	|      pea 7 <_start+0x7>
   11890:	|      moveq #12,d0
   11892:	|      add.l sp,d0
   11894:	|      move.l d0,-(sp)
   11896:	|      jsr 14cc8 <getValueType>
   1189c:	|      lea 12(sp),sp
   118a0:	|      tst.w d0
   118a2:	|  ,-- bne.s 118a8 <builtIn_setCharacterDrawMode+0x5e>
   118a4:	|  |   moveq #1,d0
   118a6:	+--|-- bra.s 118cc <builtIn_setCharacterDrawMode+0x82>
	trimStack (&fun -> stack);
   118a8:	|  '-> moveq #24,d0
   118aa:	|      add.l 16(sp),d0
   118ae:	|      move.l d0,-(sp)
   118b0:	|      jsr 1564c <trimStack>
   118b6:	|      addq.l #4,sp
	setDrawMode (di, obj);
   118b8:	|      move.l 4(sp),d1
   118bc:	|      move.l (sp),d0
   118be:	|      move.l d1,-(sp)
   118c0:	|      move.l d0,-(sp)
   118c2:	|      jsr ba42 <setDrawMode>
   118c8:	|      addq.l #8,sp
	return BR_CONTINUE;
   118ca:	|      moveq #2,d0
}
   118cc:	'----> addq.l #8,sp
   118ce:	       rts

000118d0 <builtIn_setCharacterTransparency>:

builtIn(setCharacterTransparency)
{
	UNUSEDALL
	KPrintF("setCharacterTransparency: Not implemented on Amiga");
   118d0:	pea 1a13f <PutChar+0x1ef5>
   118d6:	jsr 177a8 <KPrintF>
   118dc:	addq.l #4,sp
	return BR_CONTINUE;
   118de:	moveq #2,d0
}
   118e0:	rts

000118e2 <builtIn_setCharacterColourise>:

builtIn(setCharacterColourise)
{
	UNUSEDALL
	KPrintF("setCharacterColourise: Currently not implemented on Amiga");
   118e2:	pea 1a172 <PutChar+0x1f28>
   118e8:	jsr 177a8 <KPrintF>
   118ee:	addq.l #4,sp
	if (! getValueType(&r, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
	trimStack (&fun -> stack);
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
	trimStack (&fun -> stack);
	setPersonColourise (obj, r, g, b, mix);*/
	return BR_CONTINUE;
   118f0:	moveq #2,d0
}
   118f2:	rts

000118f4 <builtIn_setScale>:

builtIn(setScale)
{
   118f4:	       subq.l #8,sp
	UNUSEDALL
	int val1, val2;
	if (! getValueType(&val2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   118f6:	       movea.l 16(sp),a0
   118fa:	       move.l 24(a0),d0
   118fe:	       move.l d0,-(sp)
   11900:	       pea 1 <_start+0x1>
   11904:	       move.l sp,d0
   11906:	       addq.l #8,d0
   11908:	       move.l d0,-(sp)
   1190a:	       jsr 14cc8 <getValueType>
   11910:	       lea 12(sp),sp
   11914:	       tst.w d0
   11916:	   ,-- bne.s 1191c <builtIn_setScale+0x28>
   11918:	   |   moveq #1,d0
   1191a:	,--|-- bra.s 1197e <builtIn_setScale+0x8a>
	trimStack (&fun -> stack);
   1191c:	|  '-> moveq #24,d0
   1191e:	|      add.l 16(sp),d0
   11922:	|      move.l d0,-(sp)
   11924:	|      jsr 1564c <trimStack>
   1192a:	|      addq.l #4,sp
	if (! getValueType(&val1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1192c:	|      movea.l 16(sp),a0
   11930:	|      move.l 24(a0),d0
   11934:	|      move.l d0,-(sp)
   11936:	|      pea 1 <_start+0x1>
   1193a:	|      moveq #12,d0
   1193c:	|      add.l sp,d0
   1193e:	|      move.l d0,-(sp)
   11940:	|      jsr 14cc8 <getValueType>
   11946:	|      lea 12(sp),sp
   1194a:	|      tst.w d0
   1194c:	|  ,-- bne.s 11952 <builtIn_setScale+0x5e>
   1194e:	|  |   moveq #1,d0
   11950:	+--|-- bra.s 1197e <builtIn_setScale+0x8a>
	trimStack (&fun -> stack);
   11952:	|  '-> moveq #24,d0
   11954:	|      add.l 16(sp),d0
   11958:	|      move.l d0,-(sp)
   1195a:	|      jsr 1564c <trimStack>
   11960:	|      addq.l #4,sp
	setScale ((short int) val1, (short int) val2);
   11962:	|      move.l (sp),d0
   11964:	|      move.l d0,d0
   11966:	|      movea.w d0,a1
   11968:	|      move.l 4(sp),d0
   1196c:	|      move.l d0,d0
   1196e:	|      movea.w d0,a0
   11970:	|      move.l a1,-(sp)
   11972:	|      move.l a0,-(sp)
   11974:	|      jsr c0dc <setScale>
   1197a:	|      addq.l #8,sp
	return BR_CONTINUE;
   1197c:	|      moveq #2,d0
}
   1197e:	'----> addq.l #8,sp
   11980:	       rts

00011982 <builtIn_stopCharacter>:

builtIn(stopCharacter)
{
   11982:	       subq.l #4,sp
	UNUSEDALL
	int obj;
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11984:	       movea.l 12(sp),a0
   11988:	       move.l 24(a0),d0
   1198c:	       move.l d0,-(sp)
   1198e:	       pea 7 <_start+0x7>
   11992:	       move.l sp,d0
   11994:	       addq.l #8,d0
   11996:	       move.l d0,-(sp)
   11998:	       jsr 14cc8 <getValueType>
   1199e:	       lea 12(sp),sp
   119a2:	       tst.w d0
   119a4:	   ,-- bne.s 119aa <builtIn_stopCharacter+0x28>
   119a6:	   |   moveq #1,d0
   119a8:	,--|-- bra.s 119e2 <builtIn_stopCharacter+0x60>
	trimStack (&fun -> stack);
   119aa:	|  '-> moveq #24,d0
   119ac:	|      add.l 12(sp),d0
   119b0:	|      move.l d0,-(sp)
   119b2:	|      jsr 1564c <trimStack>
   119b8:	|      addq.l #4,sp

	// Return value
	setVariable (&fun -> reg, SVT_INT, stopPerson (obj));
   119ba:	|      move.l (sp),d0
   119bc:	|      move.l d0,-(sp)
   119be:	|      jsr c210 <stopPerson>
   119c4:	|      addq.l #4,sp
   119c6:	|      movea.w d0,a0
   119c8:	|      moveq #28,d0
   119ca:	|      add.l 12(sp),d0
   119ce:	|      move.l a0,-(sp)
   119d0:	|      pea 1 <_start+0x1>
   119d4:	|      move.l d0,-(sp)
   119d6:	|      jsr 155ba <setVariable>
   119dc:	|      lea 12(sp),sp
	return BR_CONTINUE;
   119e0:	|      moveq #2,d0
}
   119e2:	'----> addq.l #4,sp
   119e4:	       rts

000119e6 <builtIn_pasteCharacter>:
		fixScaleSprite (thisPerson -> x, thisPerson -> y, myAnim -> theSprites -> bank.sprites[abs (fNum)], myAnim -> theSprites -> bank.myPalette, thisPerson, 0, 0, fNum < 0);
		setVariable (&fun -> reg, SVT_INT, 1);
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
	} Todo: Amigize this*/
	KPrintF("Not implemented yet for Amiga");
   119e6:	pea 1a1ac <PutChar+0x1f62>
   119ec:	jsr 177a8 <KPrintF>
   119f2:	addq.l #4,sp
	return BR_CONTINUE;
   119f4:	moveq #2,d0
}
   119f6:	rts

000119f8 <builtIn_animate>:

builtIn(animate)
{
   119f8:	       subq.l #8,sp
	UNUSEDALL
	int obj;
	struct personaAnimation * pp = getAnimationFromVar (&(fun -> stack -> thisVar));
   119fa:	       movea.l 16(sp),a0
   119fe:	       move.l 24(a0),d0
   11a02:	       move.l d0,-(sp)
   11a04:	       jsr 151a0 <getAnimationFromVar>
   11a0a:	       addq.l #4,sp
   11a0c:	       move.l d0,4(sp)
	if (pp == NULL) return BR_ERROR;
   11a10:	   ,-- bne.s 11a16 <builtIn_animate+0x1e>
   11a12:	   |   moveq #1,d0
   11a14:	,--|-- bra.s 11a94 <builtIn_animate+0x9c>
	trimStack (&fun -> stack);
   11a16:	|  '-> moveq #24,d0
   11a18:	|      add.l 16(sp),d0
   11a1c:	|      move.l d0,-(sp)
   11a1e:	|      jsr 1564c <trimStack>
   11a24:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11a26:	|      movea.l 16(sp),a0
   11a2a:	|      move.l 24(a0),d0
   11a2e:	|      move.l d0,-(sp)
   11a30:	|      pea 7 <_start+0x7>
   11a34:	|      move.l sp,d0
   11a36:	|      addq.l #8,d0
   11a38:	|      move.l d0,-(sp)
   11a3a:	|      jsr 14cc8 <getValueType>
   11a40:	|      lea 12(sp),sp
   11a44:	|      tst.w d0
   11a46:	|  ,-- bne.s 11a4c <builtIn_animate+0x54>
   11a48:	|  |   moveq #1,d0
   11a4a:	+--|-- bra.s 11a94 <builtIn_animate+0x9c>
	trimStack (&fun -> stack);
   11a4c:	|  '-> moveq #24,d0
   11a4e:	|      add.l 16(sp),d0
   11a52:	|      move.l d0,-(sp)
   11a54:	|      jsr 1564c <trimStack>
   11a5a:	|      addq.l #4,sp
	animatePerson (obj, pp);
   11a5c:	|      move.l (sp),d0
   11a5e:	|      move.l 4(sp),-(sp)
   11a62:	|      move.l d0,-(sp)
   11a64:	|      jsr 98de <animatePerson>
   11a6a:	|      addq.l #8,sp
	setVariable (&fun -> reg, SVT_INT, timeForAnim (pp));
   11a6c:	|      move.l 4(sp),-(sp)
   11a70:	|      jsr c264 <timeForAnim>
   11a76:	|      addq.l #4,sp
   11a78:	|      move.l d0,d1
   11a7a:	|      moveq #28,d0
   11a7c:	|      add.l 16(sp),d0
   11a80:	|      move.l d1,-(sp)
   11a82:	|      pea 1 <_start+0x1>
   11a86:	|      move.l d0,-(sp)
   11a88:	|      jsr 155ba <setVariable>
   11a8e:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11a92:	|      moveq #2,d0
}
   11a94:	'----> addq.l #8,sp
   11a96:	       rts

00011a98 <builtIn_setCostume>:

builtIn(setCostume)
{
   11a98:	       subq.l #8,sp
	UNUSEDALL
	int obj;
	struct persona * pp = getCostumeFromVar(&(fun -> stack -> thisVar));
   11a9a:	       movea.l 16(sp),a0
   11a9e:	       move.l 24(a0),d0
   11aa2:	       move.l d0,-(sp)
   11aa4:	       jsr 14974 <getCostumeFromVar>
   11aaa:	       addq.l #4,sp
   11aac:	       move.l d0,4(sp)
	if (pp == NULL) return BR_ERROR;
   11ab0:	   ,-- bne.s 11ab6 <builtIn_setCostume+0x1e>
   11ab2:	   |   moveq #1,d0
   11ab4:	,--|-- bra.s 11b0e <builtIn_setCostume+0x76>
	trimStack (&fun -> stack);
   11ab6:	|  '-> moveq #24,d0
   11ab8:	|      add.l 16(sp),d0
   11abc:	|      move.l d0,-(sp)
   11abe:	|      jsr 1564c <trimStack>
   11ac4:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11ac6:	|      movea.l 16(sp),a0
   11aca:	|      move.l 24(a0),d0
   11ace:	|      move.l d0,-(sp)
   11ad0:	|      pea 7 <_start+0x7>
   11ad4:	|      move.l sp,d0
   11ad6:	|      addq.l #8,d0
   11ad8:	|      move.l d0,-(sp)
   11ada:	|      jsr 14cc8 <getValueType>
   11ae0:	|      lea 12(sp),sp
   11ae4:	|      tst.w d0
   11ae6:	|  ,-- bne.s 11aec <builtIn_setCostume+0x54>
   11ae8:	|  |   moveq #1,d0
   11aea:	+--|-- bra.s 11b0e <builtIn_setCostume+0x76>
	trimStack (&fun -> stack);
   11aec:	|  '-> moveq #24,d0
   11aee:	|      add.l 16(sp),d0
   11af2:	|      move.l d0,-(sp)
   11af4:	|      jsr 1564c <trimStack>
   11afa:	|      addq.l #4,sp
	animatePersonUsingPersona(obj, pp);
   11afc:	|      move.l (sp),d0
   11afe:	|      move.l 4(sp),-(sp)
   11b02:	|      move.l d0,-(sp)
   11b04:	|      jsr 9928 <animatePersonUsingPersona>
   11b0a:	|      addq.l #8,sp
	return BR_CONTINUE;
   11b0c:	|      moveq #2,d0
}
   11b0e:	'----> addq.l #8,sp
   11b10:	       rts

00011b12 <builtIn_floatCharacter>:

builtIn(floatCharacter)
{
   11b12:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11b14:	       movea.l 16(sp),a0
   11b18:	       move.l 24(a0),d0
   11b1c:	       move.l d0,-(sp)
   11b1e:	       pea 1 <_start+0x1>
   11b22:	       move.l sp,d0
   11b24:	       addq.l #8,d0
   11b26:	       move.l d0,-(sp)
   11b28:	       jsr 14cc8 <getValueType>
   11b2e:	       lea 12(sp),sp
   11b32:	       tst.w d0
   11b34:	   ,-- bne.s 11b3a <builtIn_floatCharacter+0x28>
   11b36:	   |   moveq #1,d0
   11b38:	,--|-- bra.s 11bae <builtIn_floatCharacter+0x9c>
	trimStack (&fun -> stack);
   11b3a:	|  '-> moveq #24,d0
   11b3c:	|      add.l 16(sp),d0
   11b40:	|      move.l d0,-(sp)
   11b42:	|      jsr 1564c <trimStack>
   11b48:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11b4a:	|      movea.l 16(sp),a0
   11b4e:	|      move.l 24(a0),d0
   11b52:	|      move.l d0,-(sp)
   11b54:	|      pea 7 <_start+0x7>
   11b58:	|      moveq #12,d0
   11b5a:	|      add.l sp,d0
   11b5c:	|      move.l d0,-(sp)
   11b5e:	|      jsr 14cc8 <getValueType>
   11b64:	|      lea 12(sp),sp
   11b68:	|      tst.w d0
   11b6a:	|  ,-- bne.s 11b70 <builtIn_floatCharacter+0x5e>
   11b6c:	|  |   moveq #1,d0
   11b6e:	+--|-- bra.s 11bae <builtIn_floatCharacter+0x9c>
	trimStack (&fun -> stack);
   11b70:	|  '-> moveq #24,d0
   11b72:	|      add.l 16(sp),d0
   11b76:	|      move.l d0,-(sp)
   11b78:	|      jsr 1564c <trimStack>
   11b7e:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, floatCharacter (di, obj));
   11b80:	|      move.l 4(sp),d1
   11b84:	|      move.l (sp),d0
   11b86:	|      move.l d1,-(sp)
   11b88:	|      move.l d0,-(sp)
   11b8a:	|      jsr aab8 <floatCharacter>
   11b90:	|      addq.l #8,sp
   11b92:	|      movea.w d0,a0
   11b94:	|      moveq #28,d0
   11b96:	|      add.l 16(sp),d0
   11b9a:	|      move.l a0,-(sp)
   11b9c:	|      pea 1 <_start+0x1>
   11ba0:	|      move.l d0,-(sp)
   11ba2:	|      jsr 155ba <setVariable>
   11ba8:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11bac:	|      moveq #2,d0
}
   11bae:	'----> addq.l #8,sp
   11bb0:	       rts

00011bb2 <builtIn_setCharacterWalkSpeed>:

builtIn(setCharacterWalkSpeed)
{
   11bb2:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11bb4:	       movea.l 16(sp),a0
   11bb8:	       move.l 24(a0),d0
   11bbc:	       move.l d0,-(sp)
   11bbe:	       pea 1 <_start+0x1>
   11bc2:	       move.l sp,d0
   11bc4:	       addq.l #8,d0
   11bc6:	       move.l d0,-(sp)
   11bc8:	       jsr 14cc8 <getValueType>
   11bce:	       lea 12(sp),sp
   11bd2:	       tst.w d0
   11bd4:	   ,-- bne.s 11bda <builtIn_setCharacterWalkSpeed+0x28>
   11bd6:	   |   moveq #1,d0
   11bd8:	,--|-- bra.s 11c4e <builtIn_setCharacterWalkSpeed+0x9c>
	trimStack (&fun -> stack);
   11bda:	|  '-> moveq #24,d0
   11bdc:	|      add.l 16(sp),d0
   11be0:	|      move.l d0,-(sp)
   11be2:	|      jsr 1564c <trimStack>
   11be8:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11bea:	|      movea.l 16(sp),a0
   11bee:	|      move.l 24(a0),d0
   11bf2:	|      move.l d0,-(sp)
   11bf4:	|      pea 7 <_start+0x7>
   11bf8:	|      moveq #12,d0
   11bfa:	|      add.l sp,d0
   11bfc:	|      move.l d0,-(sp)
   11bfe:	|      jsr 14cc8 <getValueType>
   11c04:	|      lea 12(sp),sp
   11c08:	|      tst.w d0
   11c0a:	|  ,-- bne.s 11c10 <builtIn_setCharacterWalkSpeed+0x5e>
   11c0c:	|  |   moveq #1,d0
   11c0e:	+--|-- bra.s 11c4e <builtIn_setCharacterWalkSpeed+0x9c>
	trimStack (&fun -> stack);
   11c10:	|  '-> moveq #24,d0
   11c12:	|      add.l 16(sp),d0
   11c16:	|      move.l d0,-(sp)
   11c18:	|      jsr 1564c <trimStack>
   11c1e:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, setCharacterWalkSpeed (di, obj));
   11c20:	|      move.l 4(sp),d1
   11c24:	|      move.l (sp),d0
   11c26:	|      move.l d1,-(sp)
   11c28:	|      move.l d0,-(sp)
   11c2a:	|      jsr c078 <setCharacterWalkSpeed>
   11c30:	|      addq.l #8,sp
   11c32:	|      movea.w d0,a0
   11c34:	|      moveq #28,d0
   11c36:	|      add.l 16(sp),d0
   11c3a:	|      move.l a0,-(sp)
   11c3c:	|      pea 1 <_start+0x1>
   11c40:	|      move.l d0,-(sp)
   11c42:	|      jsr 155ba <setVariable>
   11c48:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11c4c:	|      moveq #2,d0
}
   11c4e:	'----> addq.l #8,sp
   11c50:	       rts

00011c52 <builtIn_turnCharacter>:

builtIn(turnCharacter)
{
   11c52:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11c54:	       movea.l 16(sp),a0
   11c58:	       move.l 24(a0),d0
   11c5c:	       move.l d0,-(sp)
   11c5e:	       pea 1 <_start+0x1>
   11c62:	       move.l sp,d0
   11c64:	       addq.l #8,d0
   11c66:	       move.l d0,-(sp)
   11c68:	       jsr 14cc8 <getValueType>
   11c6e:	       lea 12(sp),sp
   11c72:	       tst.w d0
   11c74:	   ,-- bne.s 11c7a <builtIn_turnCharacter+0x28>
   11c76:	   |   moveq #1,d0
   11c78:	,--|-- bra.s 11cee <builtIn_turnCharacter+0x9c>
	trimStack (&fun -> stack);
   11c7a:	|  '-> moveq #24,d0
   11c7c:	|      add.l 16(sp),d0
   11c80:	|      move.l d0,-(sp)
   11c82:	|      jsr 1564c <trimStack>
   11c88:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11c8a:	|      movea.l 16(sp),a0
   11c8e:	|      move.l 24(a0),d0
   11c92:	|      move.l d0,-(sp)
   11c94:	|      pea 7 <_start+0x7>
   11c98:	|      moveq #12,d0
   11c9a:	|      add.l sp,d0
   11c9c:	|      move.l d0,-(sp)
   11c9e:	|      jsr 14cc8 <getValueType>
   11ca4:	|      lea 12(sp),sp
   11ca8:	|      tst.w d0
   11caa:	|  ,-- bne.s 11cb0 <builtIn_turnCharacter+0x5e>
   11cac:	|  |   moveq #1,d0
   11cae:	+--|-- bra.s 11cee <builtIn_turnCharacter+0x9c>
	trimStack (&fun -> stack);
   11cb0:	|  '-> moveq #24,d0
   11cb2:	|      add.l 16(sp),d0
   11cb6:	|      move.l d0,-(sp)
   11cb8:	|      jsr 1564c <trimStack>
   11cbe:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, turnPersonToFace (obj, di));
   11cc0:	|      move.l (sp),d1
   11cc2:	|      move.l 4(sp),d0
   11cc6:	|      move.l d1,-(sp)
   11cc8:	|      move.l d0,-(sp)
   11cca:	|      jsr c31c <turnPersonToFace>
   11cd0:	|      addq.l #8,sp
   11cd2:	|      movea.w d0,a0
   11cd4:	|      moveq #28,d0
   11cd6:	|      add.l 16(sp),d0
   11cda:	|      move.l a0,-(sp)
   11cdc:	|      pea 1 <_start+0x1>
   11ce0:	|      move.l d0,-(sp)
   11ce2:	|      jsr 155ba <setVariable>
   11ce8:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11cec:	|      moveq #2,d0
}
   11cee:	'----> addq.l #8,sp
   11cf0:	       rts

00011cf2 <builtIn_setCharacterExtra>:

builtIn(setCharacterExtra)
{
   11cf2:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11cf4:	       movea.l 16(sp),a0
   11cf8:	       move.l 24(a0),d0
   11cfc:	       move.l d0,-(sp)
   11cfe:	       pea 1 <_start+0x1>
   11d02:	       move.l sp,d0
   11d04:	       addq.l #8,d0
   11d06:	       move.l d0,-(sp)
   11d08:	       jsr 14cc8 <getValueType>
   11d0e:	       lea 12(sp),sp
   11d12:	       tst.w d0
   11d14:	   ,-- bne.s 11d1a <builtIn_setCharacterExtra+0x28>
   11d16:	   |   moveq #1,d0
   11d18:	,--|-- bra.s 11d8e <builtIn_setCharacterExtra+0x9c>
	trimStack (&fun -> stack);
   11d1a:	|  '-> moveq #24,d0
   11d1c:	|      add.l 16(sp),d0
   11d20:	|      move.l d0,-(sp)
   11d22:	|      jsr 1564c <trimStack>
   11d28:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11d2a:	|      movea.l 16(sp),a0
   11d2e:	|      move.l 24(a0),d0
   11d32:	|      move.l d0,-(sp)
   11d34:	|      pea 7 <_start+0x7>
   11d38:	|      moveq #12,d0
   11d3a:	|      add.l sp,d0
   11d3c:	|      move.l d0,-(sp)
   11d3e:	|      jsr 14cc8 <getValueType>
   11d44:	|      lea 12(sp),sp
   11d48:	|      tst.w d0
   11d4a:	|  ,-- bne.s 11d50 <builtIn_setCharacterExtra+0x5e>
   11d4c:	|  |   moveq #1,d0
   11d4e:	+--|-- bra.s 11d8e <builtIn_setCharacterExtra+0x9c>
	trimStack (&fun -> stack);
   11d50:	|  '-> moveq #24,d0
   11d52:	|      add.l 16(sp),d0
   11d56:	|      move.l d0,-(sp)
   11d58:	|      jsr 1564c <trimStack>
   11d5e:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, setPersonExtra (obj, di));
   11d60:	|      move.l (sp),d1
   11d62:	|      move.l 4(sp),d0
   11d66:	|      move.l d1,-(sp)
   11d68:	|      move.l d0,-(sp)
   11d6a:	|      jsr c0a6 <setPersonExtra>
   11d70:	|      addq.l #8,sp
   11d72:	|      movea.w d0,a0
   11d74:	|      moveq #28,d0
   11d76:	|      add.l 16(sp),d0
   11d7a:	|      move.l a0,-(sp)
   11d7c:	|      pea 1 <_start+0x1>
   11d80:	|      move.l d0,-(sp)
   11d82:	|      jsr 155ba <setVariable>
   11d88:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11d8c:	|      moveq #2,d0
}
   11d8e:	'----> addq.l #8,sp
   11d90:	       rts

00011d92 <builtIn_removeCharacter>:

builtIn(removeCharacter)
{	
   11d92:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11d94:	       movea.l 12(sp),a0
   11d98:	       move.l 24(a0),d0
   11d9c:	       move.l d0,-(sp)
   11d9e:	       pea 7 <_start+0x7>
   11da2:	       move.l sp,d0
   11da4:	       addq.l #8,d0
   11da6:	       move.l d0,-(sp)
   11da8:	       jsr 14cc8 <getValueType>
   11dae:	       lea 12(sp),sp
   11db2:	       tst.w d0
   11db4:	   ,-- bne.s 11dba <builtIn_removeCharacter+0x28>
   11db6:	   |   moveq #1,d0
   11db8:	,--|-- bra.s 11dd8 <builtIn_removeCharacter+0x46>
	trimStack (&fun -> stack);
   11dba:	|  '-> moveq #24,d0
   11dbc:	|      add.l 12(sp),d0
   11dc0:	|      move.l d0,-(sp)
   11dc2:	|      jsr 1564c <trimStack>
   11dc8:	|      addq.l #4,sp
	removeOneCharacter (objectNumber);
   11dca:	|      move.l (sp),d0
   11dcc:	|      move.l d0,-(sp)
   11dce:	|      jsr b2a6 <removeOneCharacter>
   11dd4:	|      addq.l #4,sp
	return BR_CONTINUE;
   11dd6:	|      moveq #2,d0
}
   11dd8:	'----> addq.l #4,sp
   11dda:	       rts

00011ddc <moveChr>:

static enum builtReturn moveChr(int numParams, struct loadedFunction * fun, BOOL force, BOOL immediate)
{
   11ddc:	                lea -28(sp),sp
   11de0:	                move.l d2,-(sp)
   11de2:	                move.l 44(sp),d1
   11de6:	                move.l 48(sp),d0
   11dea:	                move.w d1,d1
   11dec:	                move.w d1,6(sp)
   11df0:	                move.w d0,d0
   11df2:	                move.w d0,4(sp)
	switch (numParams) {
   11df6:	                moveq #2,d0
   11df8:	                cmp.l 36(sp),d0
   11dfc:	      ,-------- beq.w 11f3e <moveChr+0x162>
   11e00:	      |         moveq #3,d0
   11e02:	      |         cmp.l 36(sp),d0
   11e06:	,-----|-------- bne.w 12072 <moveChr+0x296>
		case 3:
		{
			int x, y, objectNumber;

			if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11e0a:	|     |         movea.l 40(sp),a0
   11e0e:	|     |         move.l 24(a0),d0
   11e12:	|     |         move.l d0,-(sp)
   11e14:	|     |         pea 1 <_start+0x1>
   11e18:	|     |         lea 20(sp),a0
   11e1c:	|     |         move.l a0,-(sp)
   11e1e:	|     |         jsr 14cc8 <getValueType>
   11e24:	|     |         lea 12(sp),sp
   11e28:	|     |         tst.w d0
   11e2a:	|     |     ,-- bne.s 11e32 <moveChr+0x56>
   11e2c:	|     |     |   moveq #1,d0
   11e2e:	|  ,--|-----|-- bra.w 12082 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   11e32:	|  |  |     '-> moveq #24,d0
   11e34:	|  |  |         add.l 40(sp),d0
   11e38:	|  |  |         move.l d0,-(sp)
   11e3a:	|  |  |         jsr 1564c <trimStack>
   11e40:	|  |  |         addq.l #4,sp
			if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11e42:	|  |  |         movea.l 40(sp),a0
   11e46:	|  |  |         move.l 24(a0),d0
   11e4a:	|  |  |         move.l d0,-(sp)
   11e4c:	|  |  |         pea 1 <_start+0x1>
   11e50:	|  |  |         lea 24(sp),a0
   11e54:	|  |  |         move.l a0,-(sp)
   11e56:	|  |  |         jsr 14cc8 <getValueType>
   11e5c:	|  |  |         lea 12(sp),sp
   11e60:	|  |  |         tst.w d0
   11e62:	|  |  |     ,-- bne.s 11e6a <moveChr+0x8e>
   11e64:	|  |  |     |   moveq #1,d0
   11e66:	|  +--|-----|-- bra.w 12082 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   11e6a:	|  |  |     '-> moveq #24,d0
   11e6c:	|  |  |         add.l 40(sp),d0
   11e70:	|  |  |         move.l d0,-(sp)
   11e72:	|  |  |         jsr 1564c <trimStack>
   11e78:	|  |  |         addq.l #4,sp
			if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11e7a:	|  |  |         movea.l 40(sp),a0
   11e7e:	|  |  |         move.l 24(a0),d0
   11e82:	|  |  |         move.l d0,-(sp)
   11e84:	|  |  |         pea 7 <_start+0x7>
   11e88:	|  |  |         lea 16(sp),a0
   11e8c:	|  |  |         move.l a0,-(sp)
   11e8e:	|  |  |         jsr 14cc8 <getValueType>
   11e94:	|  |  |         lea 12(sp),sp
   11e98:	|  |  |         tst.w d0
   11e9a:	|  |  |     ,-- bne.s 11ea2 <moveChr+0xc6>
   11e9c:	|  |  |     |   moveq #1,d0
   11e9e:	|  +--|-----|-- bra.w 12082 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   11ea2:	|  |  |     '-> moveq #24,d0
   11ea4:	|  |  |         add.l 40(sp),d0
   11ea8:	|  |  |         move.l d0,-(sp)
   11eaa:	|  |  |         jsr 1564c <trimStack>
   11eb0:	|  |  |         addq.l #4,sp

			if (force) {
   11eb2:	|  |  |         tst.w 6(sp)
   11eb6:	|  |  |     ,-- beq.s 11ee6 <moveChr+0x10a>
				if (forceWalkingPerson (x, y, objectNumber, fun, -1)) return BR_PAUSE;
   11eb8:	|  |  |     |   movea.l 8(sp),a0
   11ebc:	|  |  |     |   move.l 12(sp),d1
   11ec0:	|  |  |     |   move.l 16(sp),d0
   11ec4:	|  |  |     |   pea ffffffff <gcc8_c_support.c.c60c1f2b+0xfffb3dc5>
   11ec8:	|  |  |     |   move.l 44(sp),-(sp)
   11ecc:	|  |  |     |   move.l a0,-(sp)
   11ece:	|  |  |     |   move.l d1,-(sp)
   11ed0:	|  |  |     |   move.l d0,-(sp)
   11ed2:	|  |  |     |   jsr aadc <forceWalkingPerson>
   11ed8:	|  |  |     |   lea 20(sp),sp
   11edc:	|  |  |     |   tst.w d0
   11ede:	|  |  |  ,--|-- beq.s 11f38 <moveChr+0x15c>
   11ee0:	|  |  |  |  |   moveq #3,d0
   11ee2:	|  +--|--|--|-- bra.w 12082 <moveChr+0x2a6>
			} else if (immediate) {
   11ee6:	|  |  |  |  '-> tst.w 4(sp)
   11eea:	|  |  |  |  ,-- beq.s 11f0a <moveChr+0x12e>
				jumpPerson (x, y, objectNumber);
   11eec:	|  |  |  |  |   movea.l 8(sp),a0
   11ef0:	|  |  |  |  |   move.l 12(sp),d1
   11ef4:	|  |  |  |  |   move.l 16(sp),d0
   11ef8:	|  |  |  |  |   move.l a0,-(sp)
   11efa:	|  |  |  |  |   move.l d1,-(sp)
   11efc:	|  |  |  |  |   move.l d0,-(sp)
   11efe:	|  |  |  |  |   jsr adf2 <jumpPerson>
   11f04:	|  |  |  |  |   lea 12(sp),sp
   11f08:	|  |  |  +--|-- bra.s 11f38 <moveChr+0x15c>
			} else {
				if (makeWalkingPerson (x, y, objectNumber, fun, -1)) return BR_PAUSE;
   11f0a:	|  |  |  |  '-> movea.l 8(sp),a0
   11f0e:	|  |  |  |      move.l 12(sp),d1
   11f12:	|  |  |  |      move.l 16(sp),d0
   11f16:	|  |  |  |      pea ffffffff <gcc8_c_support.c.c60c1f2b+0xfffb3dc5>
   11f1a:	|  |  |  |      move.l 44(sp),-(sp)
   11f1e:	|  |  |  |      move.l a0,-(sp)
   11f20:	|  |  |  |      move.l d1,-(sp)
   11f22:	|  |  |  |      move.l d0,-(sp)
   11f24:	|  |  |  |      jsr afc2 <makeWalkingPerson>
   11f2a:	|  |  |  |      lea 20(sp),sp
   11f2e:	|  |  |  |      tst.w d0
   11f30:	|  |  |  +----- beq.s 11f38 <moveChr+0x15c>
   11f32:	|  |  |  |      moveq #3,d0
   11f34:	|  +--|--|----- bra.w 12082 <moveChr+0x2a6>
			}
			return BR_CONTINUE;
   11f38:	|  |  |  '----> moveq #2,d0
   11f3a:	|  +--|-------- bra.w 12082 <moveChr+0x2a6>
		case 2:
		{
			int toObj, objectNumber;
			struct screenRegion * reggie;

			if (! getValueType(&toObj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11f3e:	|  |  '-------> movea.l 40(sp),a0
   11f42:	|  |            move.l 24(a0),d0
   11f46:	|  |            move.l d0,-(sp)
   11f48:	|  |            pea 7 <_start+0x7>
   11f4c:	|  |            moveq #32,d0
   11f4e:	|  |            add.l sp,d0
   11f50:	|  |            move.l d0,-(sp)
   11f52:	|  |            jsr 14cc8 <getValueType>
   11f58:	|  |            lea 12(sp),sp
   11f5c:	|  |            tst.w d0
   11f5e:	|  |        ,-- bne.s 11f66 <moveChr+0x18a>
   11f60:	|  |        |   moveq #1,d0
   11f62:	|  +--------|-- bra.w 12082 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   11f66:	|  |        '-> moveq #24,d0
   11f68:	|  |            add.l 40(sp),d0
   11f6c:	|  |            move.l d0,-(sp)
   11f6e:	|  |            jsr 1564c <trimStack>
   11f74:	|  |            addq.l #4,sp
			if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11f76:	|  |            movea.l 40(sp),a0
   11f7a:	|  |            move.l 24(a0),d0
   11f7e:	|  |            move.l d0,-(sp)
   11f80:	|  |            pea 7 <_start+0x7>
   11f84:	|  |            lea 28(sp),a0
   11f88:	|  |            move.l a0,-(sp)
   11f8a:	|  |            jsr 14cc8 <getValueType>
   11f90:	|  |            lea 12(sp),sp
   11f94:	|  |            tst.w d0
   11f96:	|  |        ,-- bne.s 11f9e <moveChr+0x1c2>
   11f98:	|  |        |   moveq #1,d0
   11f9a:	|  +--------|-- bra.w 12082 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   11f9e:	|  |        '-> moveq #24,d0
   11fa0:	|  |            add.l 40(sp),d0
   11fa4:	|  |            move.l d0,-(sp)
   11fa6:	|  |            jsr 1564c <trimStack>
   11fac:	|  |            addq.l #4,sp
			reggie = getRegionForObject (toObj);
   11fae:	|  |            move.l 24(sp),d0
   11fb2:	|  |            move.l d0,-(sp)
   11fb4:	|  |            jsr 15f8a <getRegionForObject>
   11fba:	|  |            addq.l #4,sp
   11fbc:	|  |            move.l d0,28(sp)
			if (reggie == NULL) return BR_CONTINUE;
   11fc0:	|  |        ,-- bne.s 11fc8 <moveChr+0x1ec>
   11fc2:	|  |        |   moveq #2,d0
   11fc4:	|  +--------|-- bra.w 12082 <moveChr+0x2a6>

			if (force)
   11fc8:	|  |        '-> tst.w 6(sp)
   11fcc:	|  |        ,-- beq.s 12008 <moveChr+0x22c>
			{
				if (forceWalkingPerson (reggie -> sX, reggie -> sY,	objectNumber, fun, reggie -> di)) return BR_PAUSE;
   11fce:	|  |        |   movea.l 28(sp),a0
   11fd2:	|  |        |   move.l 24(a0),d2
   11fd6:	|  |        |   movea.l 20(sp),a1
   11fda:	|  |        |   movea.l 28(sp),a0
   11fde:	|  |        |   move.l 20(a0),d1
   11fe2:	|  |        |   movea.l 28(sp),a0
   11fe6:	|  |        |   move.l 16(a0),d0
   11fea:	|  |        |   move.l d2,-(sp)
   11fec:	|  |        |   move.l 44(sp),-(sp)
   11ff0:	|  |        |   move.l a1,-(sp)
   11ff2:	|  |        |   move.l d1,-(sp)
   11ff4:	|  |        |   move.l d0,-(sp)
   11ff6:	|  |        |   jsr aadc <forceWalkingPerson>
   11ffc:	|  |        |   lea 20(sp),sp
   12000:	|  |        |   tst.w d0
   12002:	|  |     ,--|-- beq.s 1206e <moveChr+0x292>
   12004:	|  |     |  |   moveq #3,d0
   12006:	|  +-----|--|-- bra.s 12082 <moveChr+0x2a6>
			}
			else if (immediate)
   12008:	|  |     |  '-> tst.w 4(sp)
   1200c:	|  |     |  ,-- beq.s 12034 <moveChr+0x258>
			{
				jumpPerson (reggie -> sX, reggie -> sY,	objectNumber);
   1200e:	|  |     |  |   movea.l 20(sp),a1
   12012:	|  |     |  |   movea.l 28(sp),a0
   12016:	|  |     |  |   move.l 20(a0),d1
   1201a:	|  |     |  |   movea.l 28(sp),a0
   1201e:	|  |     |  |   move.l 16(a0),d0
   12022:	|  |     |  |   move.l a1,-(sp)
   12024:	|  |     |  |   move.l d1,-(sp)
   12026:	|  |     |  |   move.l d0,-(sp)
   12028:	|  |     |  |   jsr adf2 <jumpPerson>
   1202e:	|  |     |  |   lea 12(sp),sp
   12032:	|  |     +--|-- bra.s 1206e <moveChr+0x292>
			}
			else
			{
				if (makeWalkingPerson (reggie -> sX, reggie -> sY, objectNumber, fun, reggie -> di)) return BR_PAUSE;
   12034:	|  |     |  '-> movea.l 28(sp),a0
   12038:	|  |     |      move.l 24(a0),d2
   1203c:	|  |     |      movea.l 20(sp),a1
   12040:	|  |     |      movea.l 28(sp),a0
   12044:	|  |     |      move.l 20(a0),d1
   12048:	|  |     |      movea.l 28(sp),a0
   1204c:	|  |     |      move.l 16(a0),d0
   12050:	|  |     |      move.l d2,-(sp)
   12052:	|  |     |      move.l 44(sp),-(sp)
   12056:	|  |     |      move.l a1,-(sp)
   12058:	|  |     |      move.l d1,-(sp)
   1205a:	|  |     |      move.l d0,-(sp)
   1205c:	|  |     |      jsr afc2 <makeWalkingPerson>
   12062:	|  |     |      lea 20(sp),sp
   12066:	|  |     |      tst.w d0
   12068:	|  |     +----- beq.s 1206e <moveChr+0x292>
   1206a:	|  |     |      moveq #3,d0
   1206c:	|  +-----|----- bra.s 12082 <moveChr+0x2a6>
			}
			return BR_CONTINUE;
   1206e:	|  |     '----> moveq #2,d0
   12070:	|  +----------- bra.s 12082 <moveChr+0x2a6>
		}

		default:
			KPrintF ("Built-in function must have either 2 or 3 parameters.");
   12072:	'--|----------> pea 1a1ca <PutChar+0x1f80>
   12078:	   |            jsr 177a8 <KPrintF>
   1207e:	   |            addq.l #4,sp
			return BR_ERROR;
   12080:	   |            moveq #1,d0
	}
}
   12082:	   '----------> move.l (sp)+,d2
   12084:	                lea 28(sp),sp
   12088:	                rts

0001208a <builtIn_moveCharacter>:

builtIn(moveCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, FALSE, FALSE);
   1208a:	clr.l -(sp)
   1208c:	clr.l -(sp)
   1208e:	move.l 16(sp),-(sp)
   12092:	move.l 16(sp),-(sp)
   12096:	jsr 11ddc <moveChr>
   1209c:	lea 16(sp),sp
}
   120a0:	rts

000120a2 <builtIn_forceCharacter>:

builtIn(forceCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, TRUE, FALSE);
   120a2:	clr.l -(sp)
   120a4:	pea 1 <_start+0x1>
   120a8:	move.l 16(sp),-(sp)
   120ac:	move.l 16(sp),-(sp)
   120b0:	jsr 11ddc <moveChr>
   120b6:	lea 16(sp),sp
}
   120ba:	rts

000120bc <builtIn_jumpCharacter>:

builtIn(jumpCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, FALSE, TRUE);
   120bc:	pea 1 <_start+0x1>
   120c0:	clr.l -(sp)
   120c2:	move.l 16(sp),-(sp)
   120c6:	move.l 16(sp),-(sp)
   120ca:	jsr 11ddc <moveChr>
   120d0:	lea 16(sp),sp
}
   120d4:	rts

000120d6 <builtIn_clearStatus>:

builtIn(clearStatus)
{
	UNUSEDALL
	clearStatusBar ();
   120d6:	jsr 8760 <clearStatusBar>
	return BR_CONTINUE;
   120dc:	moveq #2,d0
}
   120de:	rts

000120e0 <builtIn_removeLastStatus>:

builtIn(removeLastStatus)
{
	UNUSEDALL
	killLastStatus ();
   120e0:	jsr 8808 <killLastStatus>
	return BR_CONTINUE;
   120e6:	moveq #2,d0
}
   120e8:	rts

000120ea <builtIn_addStatus>:

builtIn(addStatus)
{
	UNUSEDALL
	addStatusBar ();
   120ea:	jsr 86f6 <addStatusBar>
	return BR_CONTINUE;
   120f0:	moveq #2,d0
}
   120f2:	rts

000120f4 <builtIn_statusText>:

builtIn(statusText)
{
   120f4:	       subq.l #8,sp
   120f6:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar(&(fun->stack->thisVar));
   120f8:	       movea.l 20(sp),a0
   120fc:	       move.l 24(a0),d0
   12100:	       move.l d0,-(sp)
   12102:	       jsr 1529e <getTextFromAnyVar>
   12108:	       addq.l #4,sp
   1210a:	       move.l d0,8(sp)
	if (!newText) return BR_ERROR;
   1210e:	   ,-- bne.s 12114 <builtIn_statusText+0x20>
   12110:	   |   moveq #1,d0
   12112:	,--|-- bra.s 12148 <builtIn_statusText+0x54>
	trimStack(&fun->stack);
   12114:	|  '-> moveq #24,d0
   12116:	|      add.l 20(sp),d0
   1211a:	|      move.l d0,-(sp)
   1211c:	|      jsr 1564c <trimStack>
   12122:	|      addq.l #4,sp
	setStatusBar(newText);
   12124:	|      move.l 8(sp),-(sp)
   12128:	|      jsr 8a88 <setStatusBar>
   1212e:	|      addq.l #4,sp
	FreeVec(newText);
   12130:	|      move.l 8(sp),4(sp)
   12136:	|      move.l 1cfb6 <SysBase>,d0
   1213c:	|      movea.l d0,a6
   1213e:	|      movea.l 4(sp),a1
   12142:	|      jsr -690(a6)
	return BR_CONTINUE;
   12146:	|      moveq #2,d0
}
   12148:	'----> movea.l (sp)+,a6
   1214a:	       addq.l #8,sp
   1214c:	       rts

0001214e <builtIn_lightStatus>:

builtIn(lightStatus)
{
   1214e:	       subq.l #4,sp
	UNUSEDALL
	int val;
	if (! getValueType(&val, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12150:	       movea.l 12(sp),a0
   12154:	       move.l 24(a0),d0
   12158:	       move.l d0,-(sp)
   1215a:	       pea 1 <_start+0x1>
   1215e:	       move.l sp,d0
   12160:	       addq.l #8,d0
   12162:	       move.l d0,-(sp)
   12164:	       jsr 14cc8 <getValueType>
   1216a:	       lea 12(sp),sp
   1216e:	       tst.w d0
   12170:	   ,-- bne.s 12176 <builtIn_lightStatus+0x28>
   12172:	   |   moveq #1,d0
   12174:	,--|-- bra.s 12194 <builtIn_lightStatus+0x46>
	trimStack (&fun -> stack);
   12176:	|  '-> moveq #24,d0
   12178:	|      add.l 12(sp),d0
   1217c:	|      move.l d0,-(sp)
   1217e:	|      jsr 1564c <trimStack>
   12184:	|      addq.l #4,sp
	setLitStatus (val);
   12186:	|      move.l (sp),d0
   12188:	|      move.l d0,-(sp)
   1218a:	|      jsr 8a78 <setLitStatus>
   12190:	|      addq.l #4,sp
	return BR_CONTINUE;
   12192:	|      moveq #2,d0
}
   12194:	'----> addq.l #4,sp
   12196:	       rts

00012198 <builtIn_positionStatus>:

builtIn(positionStatus)
{
   12198:	       subq.l #8,sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1219a:	       movea.l 16(sp),a0
   1219e:	       move.l 24(a0),d0
   121a2:	       move.l d0,-(sp)
   121a4:	       pea 1 <_start+0x1>
   121a8:	       move.l sp,d0
   121aa:	       addq.l #8,d0
   121ac:	       move.l d0,-(sp)
   121ae:	       jsr 14cc8 <getValueType>
   121b4:	       lea 12(sp),sp
   121b8:	       tst.w d0
   121ba:	   ,-- bne.s 121c0 <builtIn_positionStatus+0x28>
   121bc:	   |   moveq #1,d0
   121be:	,--|-- bra.s 1221a <builtIn_positionStatus+0x82>
	trimStack (&fun -> stack);
   121c0:	|  '-> moveq #24,d0
   121c2:	|      add.l 16(sp),d0
   121c6:	|      move.l d0,-(sp)
   121c8:	|      jsr 1564c <trimStack>
   121ce:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   121d0:	|      movea.l 16(sp),a0
   121d4:	|      move.l 24(a0),d0
   121d8:	|      move.l d0,-(sp)
   121da:	|      pea 1 <_start+0x1>
   121de:	|      moveq #12,d0
   121e0:	|      add.l sp,d0
   121e2:	|      move.l d0,-(sp)
   121e4:	|      jsr 14cc8 <getValueType>
   121ea:	|      lea 12(sp),sp
   121ee:	|      tst.w d0
   121f0:	|  ,-- bne.s 121f6 <builtIn_positionStatus+0x5e>
   121f2:	|  |   moveq #1,d0
   121f4:	+--|-- bra.s 1221a <builtIn_positionStatus+0x82>
	trimStack (&fun -> stack);
   121f6:	|  '-> moveq #24,d0
   121f8:	|      add.l 16(sp),d0
   121fc:	|      move.l d0,-(sp)
   121fe:	|      jsr 1564c <trimStack>
   12204:	|      addq.l #4,sp
	positionStatus (x, y);
   12206:	|      move.l (sp),d1
   12208:	|      move.l 4(sp),d0
   1220c:	|      move.l d1,-(sp)
   1220e:	|      move.l d0,-(sp)
   12210:	|      jsr 886a <positionStatus>
   12216:	|      addq.l #8,sp
	return BR_CONTINUE;
   12218:	|      moveq #2,d0
}
   1221a:	'----> addq.l #8,sp
   1221c:	       rts

0001221e <builtIn_alignStatus>:

builtIn(alignStatus)
{
   1221e:	       subq.l #4,sp
	UNUSEDALL
	int val;
	if (! getValueType(&val, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12220:	       movea.l 12(sp),a0
   12224:	       move.l 24(a0),d0
   12228:	       move.l d0,-(sp)
   1222a:	       pea 1 <_start+0x1>
   1222e:	       move.l sp,d0
   12230:	       addq.l #8,d0
   12232:	       move.l d0,-(sp)
   12234:	       jsr 14cc8 <getValueType>
   1223a:	       lea 12(sp),sp
   1223e:	       tst.w d0
   12240:	   ,-- bne.s 12246 <builtIn_alignStatus+0x28>
   12242:	   |   moveq #1,d0
   12244:	,--|-- bra.s 12266 <builtIn_alignStatus+0x48>
	trimStack (&fun -> stack);
   12246:	|  '-> moveq #24,d0
   12248:	|      add.l 12(sp),d0
   1224c:	|      move.l d0,-(sp)
   1224e:	|      jsr 1564c <trimStack>
   12254:	|      addq.l #4,sp
	nowStatus -> alignStatus = (short) val;
   12256:	|      move.l (sp),d0
   12258:	|      movea.l 1c932 <nowStatus>,a0
   1225e:	|      move.l d0,d0
   12260:	|      move.w d0,4(a0)
	return BR_CONTINUE;
   12264:	|      moveq #2,d0
}
   12266:	'----> addq.l #4,sp
   12268:	       rts

0001226a <getFuncNumForCallback>:

static BOOL getFuncNumForCallback(int numParams, struct loadedFunction * fun, int *functionNum)
{
	switch (numParams) {
   1226a:	             tst.l 4(sp)
   1226e:	      ,----- beq.s 1227a <getFuncNumForCallback+0x10>
   12270:	      |      moveq #1,d0
   12272:	      |      cmp.l 4(sp),d0
   12276:	      |  ,-- beq.s 12280 <getFuncNumForCallback+0x16>
   12278:	   ,--|--|-- bra.s 122b6 <getFuncNumForCallback+0x4c>
		case 0:
			functionNum = 0;
   1227a:	   |  '--|-> clr.l 12(sp)
			break;
   1227e:	,--|-----|-- bra.s 122c8 <getFuncNumForCallback+0x5e>

		case 1:
			if (! getValueType(functionNum, SVT_FUNC,&fun -> stack -> thisVar)) return FALSE;
   12280:	|  |     '-> movea.l 8(sp),a0
   12284:	|  |         move.l 24(a0),d0
   12288:	|  |         move.l d0,-(sp)
   1228a:	|  |         pea 2 <_start+0x2>
   1228e:	|  |         move.l 20(sp),-(sp)
   12292:	|  |         jsr 14cc8 <getValueType>
   12298:	|  |         lea 12(sp),sp
   1229c:	|  |         tst.w d0
   1229e:	|  |     ,-- bne.s 122a4 <getFuncNumForCallback+0x3a>
   122a0:	|  |     |   clr.w d0
   122a2:	|  |  ,--|-- bra.s 122ca <getFuncNumForCallback+0x60>
			trimStack (&fun -> stack);
   122a4:	|  |  |  '-> moveq #24,d0
   122a6:	|  |  |      add.l 8(sp),d0
   122aa:	|  |  |      move.l d0,-(sp)
   122ac:	|  |  |      jsr 1564c <trimStack>
   122b2:	|  |  |      addq.l #4,sp
			break;
   122b4:	+--|--|----- bra.s 122c8 <getFuncNumForCallback+0x5e>

		default:
			KPrintF ("Too many parameters.");
   122b6:	|  '--|----> pea 1a200 <PutChar+0x1fb6>
   122bc:	|     |      jsr 177a8 <KPrintF>
   122c2:	|     |      addq.l #4,sp
			return FALSE;
   122c4:	|     |      clr.w d0
   122c6:	|     +----- bra.s 122ca <getFuncNumForCallback+0x60>
	}
	return TRUE;
   122c8:	'-----|----> moveq #1,d0
}
   122ca:	      '----> rts

000122cc <builtIn_onLeftMouse>:

builtIn (onLeftMouse)
{
   122cc:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   122ce:	       move.l sp,d0
   122d0:	       move.l d0,-(sp)
   122d2:	       move.l 16(sp),-(sp)
   122d6:	       move.l 16(sp),-(sp)
   122da:	       jsr 1226a <getFuncNumForCallback>
   122e0:	       lea 12(sp),sp
   122e4:	       tst.w d0
   122e6:	,----- beq.s 122f6 <builtIn_onLeftMouse+0x2a>
	{
		currentEvents -> leftMouseFunction = functionNum;
   122e8:	|      movea.l 1c924 <currentEvents>,a0
   122ee:	|      move.l (sp),d0
   122f0:	|      move.l d0,(a0)
		return BR_CONTINUE;
   122f2:	|      moveq #2,d0
   122f4:	|  ,-- bra.s 122f8 <builtIn_onLeftMouse+0x2c>
	}
	return BR_ERROR;
   122f6:	'--|-> moveq #1,d0
}
   122f8:	   '-> addq.l #4,sp
   122fa:	       rts

000122fc <builtIn_onLeftMouseUp>:

builtIn (onLeftMouseUp)
{
   122fc:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   122fe:	       move.l sp,d0
   12300:	       move.l d0,-(sp)
   12302:	       move.l 16(sp),-(sp)
   12306:	       move.l 16(sp),-(sp)
   1230a:	       jsr 1226a <getFuncNumForCallback>
   12310:	       lea 12(sp),sp
   12314:	       tst.w d0
   12316:	,----- beq.s 12328 <builtIn_onLeftMouseUp+0x2c>
	{
		currentEvents -> leftMouseUpFunction = functionNum;
   12318:	|      movea.l 1c924 <currentEvents>,a0
   1231e:	|      move.l (sp),d0
   12320:	|      move.l d0,4(a0)
		return BR_CONTINUE;
   12324:	|      moveq #2,d0
   12326:	|  ,-- bra.s 1232a <builtIn_onLeftMouseUp+0x2e>
	}
	return BR_ERROR;
   12328:	'--|-> moveq #1,d0
}
   1232a:	   '-> addq.l #4,sp
   1232c:	       rts

0001232e <builtIn_onRightMouse>:

builtIn (onRightMouse)
{
   1232e:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   12330:	       move.l sp,d0
   12332:	       move.l d0,-(sp)
   12334:	       move.l 16(sp),-(sp)
   12338:	       move.l 16(sp),-(sp)
   1233c:	       jsr 1226a <getFuncNumForCallback>
   12342:	       lea 12(sp),sp
   12346:	       tst.w d0
   12348:	,----- beq.s 1235a <builtIn_onRightMouse+0x2c>
	{
		currentEvents -> rightMouseFunction = functionNum;
   1234a:	|      movea.l 1c924 <currentEvents>,a0
   12350:	|      move.l (sp),d0
   12352:	|      move.l d0,8(a0)
		return BR_CONTINUE;
   12356:	|      moveq #2,d0
   12358:	|  ,-- bra.s 1235c <builtIn_onRightMouse+0x2e>
	}
	return BR_ERROR;
   1235a:	'--|-> moveq #1,d0
}
   1235c:	   '-> addq.l #4,sp
   1235e:	       rts

00012360 <builtIn_onRightMouseUp>:

builtIn (onRightMouseUp)
{
   12360:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   12362:	       move.l sp,d0
   12364:	       move.l d0,-(sp)
   12366:	       move.l 16(sp),-(sp)
   1236a:	       move.l 16(sp),-(sp)
   1236e:	       jsr 1226a <getFuncNumForCallback>
   12374:	       lea 12(sp),sp
   12378:	       tst.w d0
   1237a:	,----- beq.s 1238c <builtIn_onRightMouseUp+0x2c>
	{
		currentEvents -> rightMouseUpFunction = functionNum;
   1237c:	|      movea.l 1c924 <currentEvents>,a0
   12382:	|      move.l (sp),d0
   12384:	|      move.l d0,12(a0)
		return BR_CONTINUE;
   12388:	|      moveq #2,d0
   1238a:	|  ,-- bra.s 1238e <builtIn_onRightMouseUp+0x2e>
	}
	return BR_ERROR;
   1238c:	'--|-> moveq #1,d0
}
   1238e:	   '-> addq.l #4,sp
   12390:	       rts

00012392 <builtIn_onFocusChange>:

builtIn (onFocusChange)
{
   12392:	          subq.l #8,sp
   12394:	          move.l a2,-(sp)
	UNUSEDALL
	int functionNum;	

	if (getFuncNumForCallback (numParams, fun, &functionNum))
   12396:	          move.l sp,d0
   12398:	          addq.l #4,d0
   1239a:	          move.l d0,-(sp)
   1239c:	          move.l 24(sp),-(sp)
   123a0:	          move.l 24(sp),-(sp)
   123a4:	          jsr 1226a <getFuncNumForCallback>
   123aa:	          lea 12(sp),sp
   123ae:	          tst.w d0
   123b0:	,-------- beq.s 1240e <builtIn_onFocusChange+0x7c>
	{
		struct loadedFunction *oldfunc = currentEvents -> focusFunction;
   123b2:	|         movea.l 1c924 <currentEvents>,a0
   123b8:	|         move.l 20(a0),8(sp)
		if( functionNum != NULL) 
   123be:	|         move.l 4(sp),d0
   123c2:	|  ,----- beq.s 123de <builtIn_onFocusChange+0x4c>
			currentEvents -> focusFunction = preloadNewFunctionNum(functionNum);		
   123c4:	|  |      move.l 4(sp),d0
   123c8:	|  |      movea.l 1c924 <currentEvents>,a2
   123ce:	|  |      move.l d0,-(sp)
   123d0:	|  |      jsr 7640 <preloadNewFunctionNum>
   123d6:	|  |      addq.l #4,sp
   123d8:	|  |      move.l d0,20(a2)
   123dc:	|  |  ,-- bra.s 123e8 <builtIn_onFocusChange+0x56>
		else
			currentEvents -> focusFunction = NULL;
   123de:	|  '--|-> movea.l 1c924 <currentEvents>,a0
   123e4:	|     |   clr.l 20(a0)

		if( oldfunc != NULL && oldfunc != currentEvents -> focusFunction )
   123e8:	|     '-> tst.l 8(sp)
   123ec:	|     ,-- beq.s 1240a <builtIn_onFocusChange+0x78>
   123ee:	|     |   movea.l 1c924 <currentEvents>,a0
   123f4:	|     |   move.l 20(a0),d0
   123f8:	|     |   cmp.l 8(sp),d0
   123fc:	|     +-- beq.s 1240a <builtIn_onFocusChange+0x78>
		{
			unloadFunction(oldfunc);
   123fe:	|     |   move.l 8(sp),-(sp)
   12402:	|     |   jsr 79f8 <unloadFunction>
   12408:	|     |   addq.l #4,sp
		}
		

		return BR_CONTINUE;
   1240a:	|     '-> moveq #2,d0
   1240c:	|     ,-- bra.s 12410 <builtIn_onFocusChange+0x7e>
	}
	return BR_ERROR;
   1240e:	'-----|-> moveq #1,d0
}
   12410:	      '-> movea.l (sp)+,a2
   12412:	          addq.l #8,sp
   12414:	          rts

00012416 <builtIn_onMoveMouse>:

builtIn (onMoveMouse)
{
   12416:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   12418:	       move.l sp,d0
   1241a:	       move.l d0,-(sp)
   1241c:	       move.l 16(sp),-(sp)
   12420:	       move.l 16(sp),-(sp)
   12424:	       jsr 1226a <getFuncNumForCallback>
   1242a:	       lea 12(sp),sp
   1242e:	       tst.w d0
   12430:	,----- beq.s 12442 <builtIn_onMoveMouse+0x2c>
	{
		currentEvents -> moveMouseFunction = functionNum;
   12432:	|      movea.l 1c924 <currentEvents>,a0
   12438:	|      move.l (sp),d0
   1243a:	|      move.l d0,16(a0)
		return BR_CONTINUE;
   1243e:	|      moveq #2,d0
   12440:	|  ,-- bra.s 12444 <builtIn_onMoveMouse+0x2e>
	}
	return BR_ERROR;
   12442:	'--|-> moveq #1,d0
}
   12444:	   '-> addq.l #4,sp
   12446:	       rts

00012448 <builtIn_onKeyboard>:

builtIn (onKeyboard)
{
   12448:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   1244a:	       move.l sp,d0
   1244c:	       move.l d0,-(sp)
   1244e:	       move.l 16(sp),-(sp)
   12452:	       move.l 16(sp),-(sp)
   12456:	       jsr 1226a <getFuncNumForCallback>
   1245c:	       lea 12(sp),sp
   12460:	       tst.w d0
   12462:	,----- beq.s 12474 <builtIn_onKeyboard+0x2c>
	{
		currentEvents -> spaceFunction = functionNum;
   12464:	|      movea.l 1c924 <currentEvents>,a0
   1246a:	|      move.l (sp),d0
   1246c:	|      move.l d0,24(a0)
		return BR_CONTINUE;
   12470:	|      moveq #2,d0
   12472:	|  ,-- bra.s 12476 <builtIn_onKeyboard+0x2e>
	}
	return BR_ERROR;
   12474:	'--|-> moveq #1,d0
}
   12476:	   '-> addq.l #4,sp
   12478:	       rts

0001247a <builtIn_spawnSub>:

builtIn (spawnSub)
{
   1247a:	          subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   1247c:	          move.l sp,d0
   1247e:	          move.l d0,-(sp)
   12480:	          move.l 16(sp),-(sp)
   12484:	          move.l 16(sp),-(sp)
   12488:	          jsr 1226a <getFuncNumForCallback>
   1248e:	          lea 12(sp),sp
   12492:	          tst.w d0
   12494:	,-------- beq.s 124c0 <builtIn_spawnSub+0x46>
	{
		if (! startNewFunctionNum (functionNum, 0, NULL, noStack, TRUE)) return BR_ERROR;
   12496:	|         move.l 1cf82 <noStack>,d1
   1249c:	|         move.l (sp),d0
   1249e:	|         pea 1 <_start+0x1>
   124a2:	|         move.l d1,-(sp)
   124a4:	|         clr.l -(sp)
   124a6:	|         clr.l -(sp)
   124a8:	|         move.l d0,-(sp)
   124aa:	|         jsr 79ac <startNewFunctionNum>
   124b0:	|         lea 20(sp),sp
   124b4:	|         tst.l d0
   124b6:	|     ,-- bne.s 124bc <builtIn_spawnSub+0x42>
   124b8:	|     |   moveq #1,d0
   124ba:	|  ,--|-- bra.s 124c2 <builtIn_spawnSub+0x48>
		return BR_CONTINUE;
   124bc:	|  |  '-> moveq #2,d0
   124be:	|  +----- bra.s 124c2 <builtIn_spawnSub+0x48>
	}
	return BR_ERROR;
   124c0:	'--|----> moveq #1,d0
}
   124c2:	   '----> addq.l #4,sp
   124c4:	          rts

000124c6 <builtIn_cancelSub>:

builtIn (cancelSub)
{
   124c6:	          subq.l #8,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   124c8:	          move.l sp,d0
   124ca:	          addq.l #4,d0
   124cc:	          move.l d0,-(sp)
   124ce:	          move.l 20(sp),-(sp)
   124d2:	          move.l 20(sp),-(sp)
   124d6:	          jsr 1226a <getFuncNumForCallback>
   124dc:	          lea 12(sp),sp
   124e0:	          tst.w d0
   124e2:	,-------- beq.s 12518 <builtIn_cancelSub+0x52>
	{
		BOOL killedMyself;
		cancelAFunction (functionNum, fun, &killedMyself);
   124e4:	|         move.l 4(sp),d1
   124e8:	|         move.l sp,d0
   124ea:	|         addq.l #2,d0
   124ec:	|         move.l d0,-(sp)
   124ee:	|         move.l 20(sp),-(sp)
   124f2:	|         move.l d1,-(sp)
   124f4:	|         jsr 5454 <cancelAFunction>
   124fa:	|         lea 12(sp),sp
		if (killedMyself) {
   124fe:	|         move.w 2(sp),d0
   12502:	|  ,----- beq.s 12514 <builtIn_cancelSub+0x4e>
			abortFunction (fun);
   12504:	|  |      move.l 16(sp),-(sp)
   12508:	|  |      jsr 5374 <abortFunction>
   1250e:	|  |      addq.l #4,sp
			return BR_ALREADY_GONE;
   12510:	|  |      moveq #5,d0
   12512:	|  |  ,-- bra.s 1251a <builtIn_cancelSub+0x54>
		}
		return BR_CONTINUE;
   12514:	|  '--|-> moveq #2,d0
   12516:	|     +-- bra.s 1251a <builtIn_cancelSub+0x54>
	}
	return BR_ERROR;
   12518:	'-----|-> moveq #1,d0
}
   1251a:	      '-> addq.l #8,sp
   1251c:	          rts

0001251e <builtIn_stringWidth>:

builtIn(stringWidth)
{
   1251e:	       subq.l #8,sp
   12520:	       move.l a6,-(sp)
	UNUSEDALL
	char * theText = getTextFromAnyVar(&(fun->stack->thisVar));
   12522:	       movea.l 20(sp),a0
   12526:	       move.l 24(a0),d0
   1252a:	       move.l d0,-(sp)
   1252c:	       jsr 1529e <getTextFromAnyVar>
   12532:	       addq.l #4,sp
   12534:	       move.l d0,8(sp)
	if (!theText) return BR_ERROR;
   12538:	   ,-- bne.s 1253e <builtIn_stringWidth+0x20>
   1253a:	   |   moveq #1,d0
   1253c:	,--|-- bra.s 1258c <builtIn_stringWidth+0x6e>
	trimStack(&fun->stack);
   1253e:	|  '-> moveq #24,d0
   12540:	|      add.l 20(sp),d0
   12544:	|      move.l d0,-(sp)
   12546:	|      jsr 1564c <trimStack>
   1254c:	|      addq.l #4,sp

	// Return value
	setVariable(&fun->reg, SVT_INT, stringWidth(theText));
   1254e:	|      move.l 8(sp),-(sp)
   12552:	|      jsr 15db2 <stringWidth>
   12558:	|      addq.l #4,sp
   1255a:	|      move.l d0,d1
   1255c:	|      moveq #28,d0
   1255e:	|      add.l 20(sp),d0
   12562:	|      move.l d1,-(sp)
   12564:	|      pea 1 <_start+0x1>
   12568:	|      move.l d0,-(sp)
   1256a:	|      jsr 155ba <setVariable>
   12570:	|      lea 12(sp),sp
	FreeVec(theText);
   12574:	|      move.l 8(sp),4(sp)
   1257a:	|      move.l 1cfb6 <SysBase>,d0
   12580:	|      movea.l d0,a6
   12582:	|      movea.l 4(sp),a1
   12586:	|      jsr -690(a6)
	return BR_CONTINUE;
   1258a:	|      moveq #2,d0
}
   1258c:	'----> movea.l (sp)+,a6
   1258e:	       addq.l #8,sp
   12590:	       rts

00012592 <builtIn_hardScroll>:

builtIn(hardScroll)
{
   12592:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12594:	       movea.l 12(sp),a0
   12598:	       move.l 24(a0),d0
   1259c:	       move.l d0,-(sp)
   1259e:	       pea 1 <_start+0x1>
   125a2:	       move.l sp,d0
   125a4:	       addq.l #8,d0
   125a6:	       move.l d0,-(sp)
   125a8:	       jsr 14cc8 <getValueType>
   125ae:	       lea 12(sp),sp
   125b2:	       tst.w d0
   125b4:	   ,-- bne.s 125ba <builtIn_hardScroll+0x28>
   125b6:	   |   moveq #1,d0
   125b8:	,--|-- bra.s 125d8 <builtIn_hardScroll+0x46>
	trimStack (&fun -> stack);
   125ba:	|  '-> moveq #24,d0
   125bc:	|      add.l 12(sp),d0
   125c0:	|      move.l d0,-(sp)
   125c2:	|      jsr 1564c <trimStack>
   125c8:	|      addq.l #4,sp
	hardScroll (v);
   125ca:	|      move.l (sp),d0
   125cc:	|      move.l d0,-(sp)
   125ce:	|      jsr d72e <hardScroll>
   125d4:	|      addq.l #4,sp
	return BR_CONTINUE;
   125d6:	|      moveq #2,d0
}
   125d8:	'----> addq.l #4,sp
   125da:	       rts

000125dc <builtIn_isScreenRegion>:


builtIn(isScreenRegion)
{
   125dc:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   125de:	       movea.l 12(sp),a0
   125e2:	       move.l 24(a0),d0
   125e6:	       move.l d0,-(sp)
   125e8:	       pea 7 <_start+0x7>
   125ec:	       move.l sp,d0
   125ee:	       addq.l #8,d0
   125f0:	       move.l d0,-(sp)
   125f2:	       jsr 14cc8 <getValueType>
   125f8:	       lea 12(sp),sp
   125fc:	       tst.w d0
   125fe:	   ,-- bne.s 12604 <builtIn_isScreenRegion+0x28>
   12600:	   |   moveq #1,d0
   12602:	,--|-- bra.s 12644 <builtIn_isScreenRegion+0x68>
	trimStack (&fun -> stack);
   12604:	|  '-> moveq #24,d0
   12606:	|      add.l 12(sp),d0
   1260a:	|      move.l d0,-(sp)
   1260c:	|      jsr 1564c <trimStack>
   12612:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, getRegionForObject (objectNumber) != NULL);
   12614:	|      move.l (sp),d0
   12616:	|      move.l d0,-(sp)
   12618:	|      jsr 15f8a <getRegionForObject>
   1261e:	|      addq.l #4,sp
   12620:	|      tst.l d0
   12622:	|      sne d0
   12624:	|      neg.b d0
   12626:	|      moveq #0,d1
   12628:	|      move.b d0,d1
   1262a:	|      moveq #28,d0
   1262c:	|      add.l 12(sp),d0
   12630:	|      move.l d1,-(sp)
   12632:	|      pea 1 <_start+0x1>
   12636:	|      move.l d0,-(sp)
   12638:	|      jsr 155ba <setVariable>
   1263e:	|      lea 12(sp),sp
	return BR_CONTINUE;
   12642:	|      moveq #2,d0
}
   12644:	'----> addq.l #4,sp
   12646:	       rts

00012648 <builtIn_setSpeechSpeed>:

builtIn(setSpeechSpeed)
{
   12648:	       subq.l #4,sp
	UNUSEDALL
	int number;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1264a:	       movea.l 12(sp),a0
   1264e:	       move.l 24(a0),d0
   12652:	       move.l d0,-(sp)
   12654:	       pea 1 <_start+0x1>
   12658:	       move.l sp,d0
   1265a:	       addq.l #8,d0
   1265c:	       move.l d0,-(sp)
   1265e:	       jsr 14cc8 <getValueType>
   12664:	       lea 12(sp),sp
   12668:	       tst.w d0
   1266a:	   ,-- bne.s 12670 <builtIn_setSpeechSpeed+0x28>
   1266c:	   |   moveq #1,d0
   1266e:	,--|-- bra.s 126be <builtIn_setSpeechSpeed+0x76>
	trimStack (&fun -> stack);
   12670:	|  '-> moveq #24,d0
   12672:	|      add.l 12(sp),d0
   12676:	|      move.l d0,-(sp)
   12678:	|      jsr 1564c <trimStack>
   1267e:	|      addq.l #4,sp
	speechSpeed = number * (FLOAT) 0.01;
   12680:	|      move.l (sp),d0
   12682:	|      move.l d0,-(sp)
   12684:	|      jsr 17bda <__floatsisf>
   1268a:	|      addq.l #4,sp
   1268c:	|      move.l #1008981770,-(sp)
   12692:	|      move.l d0,-(sp)
   12694:	|      jsr 17c8c <__mulsf3>
   1269a:	|      addq.l #8,sp
   1269c:	|      move.l d0,1c91e <speechSpeed>
	setVariable (&fun -> reg, SVT_INT, 1);
   126a2:	|      moveq #28,d0
   126a4:	|      add.l 12(sp),d0
   126a8:	|      pea 1 <_start+0x1>
   126ac:	|      pea 1 <_start+0x1>
   126b0:	|      move.l d0,-(sp)
   126b2:	|      jsr 155ba <setVariable>
   126b8:	|      lea 12(sp),sp
	return BR_CONTINUE;
   126bc:	|      moveq #2,d0
}
   126be:	'----> addq.l #4,sp
   126c0:	       rts

000126c2 <builtIn_setFontSpacing>:

builtIn(setFontSpacing)
{
   126c2:	       subq.l #4,sp
	UNUSEDALL
	int fontSpaceI;
	if (! getValueType(&fontSpaceI, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   126c4:	       movea.l 12(sp),a0
   126c8:	       move.l 24(a0),d0
   126cc:	       move.l d0,-(sp)
   126ce:	       pea 1 <_start+0x1>
   126d2:	       move.l sp,d0
   126d4:	       addq.l #8,d0
   126d6:	       move.l d0,-(sp)
   126d8:	       jsr 14cc8 <getValueType>
   126de:	       lea 12(sp),sp
   126e2:	       tst.w d0
   126e4:	   ,-- bne.s 126ea <builtIn_setFontSpacing+0x28>
   126e6:	   |   moveq #1,d0
   126e8:	,--|-- bra.s 12720 <builtIn_setFontSpacing+0x5e>
	fontSpace = fontSpaceI;
   126ea:	|  '-> move.l (sp),d0
   126ec:	|      move.l d0,d0
   126ee:	|      move.w d0,1ceac <fontSpace>
	trimStack (&fun -> stack);
   126f4:	|      moveq #24,d0
   126f6:	|      add.l 12(sp),d0
   126fa:	|      move.l d0,-(sp)
   126fc:	|      jsr 1564c <trimStack>
   12702:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   12704:	|      moveq #28,d0
   12706:	|      add.l 12(sp),d0
   1270a:	|      pea 1 <_start+0x1>
   1270e:	|      pea 1 <_start+0x1>
   12712:	|      move.l d0,-(sp)
   12714:	|      jsr 155ba <setVariable>
   1271a:	|      lea 12(sp),sp
	return BR_CONTINUE;
   1271e:	|      moveq #2,d0
}
   12720:	'----> addq.l #4,sp
   12722:	       rts

00012724 <builtIn_transitionLevel>:

builtIn(transitionLevel)
{
   12724:	          subq.l #4,sp
	UNUSEDALL
	int number;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12726:	          movea.l 12(sp),a0
   1272a:	          move.l 24(a0),d0
   1272e:	          move.l d0,-(sp)
   12730:	          pea 1 <_start+0x1>
   12734:	          move.l sp,d0
   12736:	          addq.l #8,d0
   12738:	          move.l d0,-(sp)
   1273a:	          jsr 14cc8 <getValueType>
   12740:	          lea 12(sp),sp
   12744:	          tst.w d0
   12746:	      ,-- bne.s 1274c <builtIn_transitionLevel+0x28>
   12748:	      |   moveq #1,d0
   1274a:	,-----|-- bra.s 127a0 <builtIn_transitionLevel+0x7c>
	trimStack (&fun -> stack);
   1274c:	|     '-> moveq #24,d0
   1274e:	|         add.l 12(sp),d0
   12752:	|         move.l d0,-(sp)
   12754:	|         jsr 1564c <trimStack>
   1275a:	|         addq.l #4,sp

	if (number < 0)
   1275c:	|         move.l (sp),d0
   1275e:	|     ,-- bpl.s 12768 <builtIn_transitionLevel+0x44>
		brightnessLevel = 0;
   12760:	|     |   clr.b 1c922 <brightnessLevel>
   12766:	|  ,--|-- bra.s 12784 <builtIn_transitionLevel+0x60>
	else if (number > 255)
   12768:	|  |  '-> move.l (sp),d0
   1276a:	|  |      cmpi.l #255,d0
   12770:	|  |  ,-- ble.s 1277a <builtIn_transitionLevel+0x56>
		brightnessLevel = 255;
   12772:	|  |  |   st 1c922 <brightnessLevel>
   12778:	|  +--|-- bra.s 12784 <builtIn_transitionLevel+0x60>
	else
		brightnessLevel = number;
   1277a:	|  |  '-> move.l (sp),d0
   1277c:	|  |      move.l d0,d0
   1277e:	|  |      move.b d0,1c922 <brightnessLevel>

	setVariable (&fun -> reg, SVT_INT, 1);
   12784:	|  '----> moveq #28,d0
   12786:	|         add.l 12(sp),d0
   1278a:	|         pea 1 <_start+0x1>
   1278e:	|         pea 1 <_start+0x1>
   12792:	|         move.l d0,-(sp)
   12794:	|         jsr 155ba <setVariable>
   1279a:	|         lea 12(sp),sp
	return BR_CONTINUE;
   1279e:	|         moveq #2,d0
}
   127a0:	'-------> addq.l #4,sp
   127a2:	          rts

000127a4 <builtIn_captureAllKeys>:

builtIn(captureAllKeys)
{
	UNUSEDALL
	captureAllKeys = getBoolean(&(fun -> stack -> thisVar));
   127a4:	movea.l 8(sp),a0
   127a8:	move.l 24(a0),d0
   127ac:	move.l d0,-(sp)
   127ae:	jsr 15208 <getBoolean>
   127b4:	addq.l #4,sp
   127b6:	move.w d0,1cf52 <captureAllKeys>
	trimStack (&fun -> stack);
   127bc:	moveq #24,d0
   127be:	add.l 8(sp),d0
   127c2:	move.l d0,-(sp)
   127c4:	jsr 1564c <trimStack>
   127ca:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, captureAllKeys);
   127cc:	move.w 1cf52 <captureAllKeys>,d0
   127d2:	movea.w d0,a0
   127d4:	moveq #28,d0
   127d6:	add.l 8(sp),d0
   127da:	move.l a0,-(sp)
   127dc:	pea 1 <_start+0x1>
   127e0:	move.l d0,-(sp)
   127e2:	jsr 155ba <setVariable>
   127e8:	lea 12(sp),sp
	return BR_CONTINUE;
   127ec:	moveq #2,d0
}
   127ee:	rts

000127f0 <builtIn_spinCharacter>:


builtIn(spinCharacter)
{
   127f0:	       lea -12(sp),sp
	UNUSEDALL
	int number, objectNumber;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   127f4:	       movea.l 20(sp),a0
   127f8:	       move.l 24(a0),d0
   127fc:	       move.l d0,-(sp)
   127fe:	       pea 1 <_start+0x1>
   12802:	       moveq #12,d0
   12804:	       add.l sp,d0
   12806:	       move.l d0,-(sp)
   12808:	       jsr 14cc8 <getValueType>
   1280e:	       lea 12(sp),sp
   12812:	       tst.w d0
   12814:	   ,-- bne.s 1281c <builtIn_spinCharacter+0x2c>
   12816:	   |   moveq #1,d0
   12818:	,--|-- bra.w 128cc <builtIn_spinCharacter+0xdc>
	trimStack (&fun -> stack);
   1281c:	|  '-> moveq #24,d0
   1281e:	|      add.l 20(sp),d0
   12822:	|      move.l d0,-(sp)
   12824:	|      jsr 1564c <trimStack>
   1282a:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1282c:	|      movea.l 20(sp),a0
   12830:	|      move.l 24(a0),d0
   12834:	|      move.l d0,-(sp)
   12836:	|      pea 7 <_start+0x7>
   1283a:	|      lea 8(sp),a0
   1283e:	|      move.l a0,-(sp)
   12840:	|      jsr 14cc8 <getValueType>
   12846:	|      lea 12(sp),sp
   1284a:	|      tst.w d0
   1284c:	|  ,-- bne.s 12852 <builtIn_spinCharacter+0x62>
   1284e:	|  |   moveq #1,d0
   12850:	+--|-- bra.s 128cc <builtIn_spinCharacter+0xdc>
	trimStack (&fun -> stack);
   12852:	|  '-> moveq #24,d0
   12854:	|      add.l 20(sp),d0
   12858:	|      move.l d0,-(sp)
   1285a:	|      jsr 1564c <trimStack>
   12860:	|      addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   12862:	|      move.l (sp),d0
   12864:	|      move.l d0,-(sp)
   12866:	|      jsr aa6e <findPerson>
   1286c:	|      addq.l #4,sp
   1286e:	|      move.l d0,8(sp)
	if (thisPerson) {
   12872:	|  ,-- beq.s 128b2 <builtIn_spinCharacter+0xc2>
		thisPerson -> wantAngle = number;
   12874:	|  |   move.l 4(sp),d0
   12878:	|  |   movea.l 8(sp),a0
   1287c:	|  |   move.l d0,96(a0)
		thisPerson -> spinning = TRUE;
   12880:	|  |   movea.l 8(sp),a0
   12884:	|  |   move.w #1,66(a0)
		thisPerson -> continueAfterWalking = fun;
   1288a:	|  |   movea.l 8(sp),a0
   1288e:	|  |   move.l 20(sp),68(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   12894:	|  |   moveq #28,d0
   12896:	|  |   add.l 20(sp),d0
   1289a:	|  |   pea 1 <_start+0x1>
   1289e:	|  |   pea 1 <_start+0x1>
   128a2:	|  |   move.l d0,-(sp)
   128a4:	|  |   jsr 155ba <setVariable>
   128aa:	|  |   lea 12(sp),sp
		return BR_PAUSE;
   128ae:	|  |   moveq #3,d0
   128b0:	+--|-- bra.s 128cc <builtIn_spinCharacter+0xdc>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   128b2:	|  '-> moveq #28,d0
   128b4:	|      add.l 20(sp),d0
   128b8:	|      clr.l -(sp)
   128ba:	|      pea 1 <_start+0x1>
   128be:	|      move.l d0,-(sp)
   128c0:	|      jsr 155ba <setVariable>
   128c6:	|      lea 12(sp),sp
		return BR_CONTINUE;
   128ca:	|      moveq #2,d0
	}
}
   128cc:	'----> lea 12(sp),sp
   128d0:	       rts

000128d2 <builtIn_getCharacterDirection>:

builtIn(getCharacterDirection)
{
   128d2:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   128d4:	          movea.l 16(sp),a0
   128d8:	          move.l 24(a0),d0
   128dc:	          move.l d0,-(sp)
   128de:	          pea 7 <_start+0x7>
   128e2:	          move.l sp,d0
   128e4:	          addq.l #8,d0
   128e6:	          move.l d0,-(sp)
   128e8:	          jsr 14cc8 <getValueType>
   128ee:	          lea 12(sp),sp
   128f2:	          tst.w d0
   128f4:	      ,-- bne.s 128fa <builtIn_getCharacterDirection+0x28>
   128f6:	      |   moveq #1,d0
   128f8:	,-----|-- bra.s 12958 <builtIn_getCharacterDirection+0x86>
	trimStack (&fun -> stack);
   128fa:	|     '-> moveq #24,d0
   128fc:	|         add.l 16(sp),d0
   12900:	|         move.l d0,-(sp)
   12902:	|         jsr 1564c <trimStack>
   12908:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   1290a:	|         move.l (sp),d0
   1290c:	|         move.l d0,-(sp)
   1290e:	|         jsr aa6e <findPerson>
   12914:	|         addq.l #4,sp
   12916:	|         move.l d0,4(sp)
	if (thisPerson) {
   1291a:	|  ,----- beq.s 1293e <builtIn_getCharacterDirection+0x6c>
		setVariable (&fun -> reg, SVT_INT, thisPerson -> direction);
   1291c:	|  |      movea.l 4(sp),a0
   12920:	|  |      move.l 106(a0),d1
   12924:	|  |      moveq #28,d0
   12926:	|  |      add.l 16(sp),d0
   1292a:	|  |      move.l d1,-(sp)
   1292c:	|  |      pea 1 <_start+0x1>
   12930:	|  |      move.l d0,-(sp)
   12932:	|  |      jsr 155ba <setVariable>
   12938:	|  |      lea 12(sp),sp
   1293c:	|  |  ,-- bra.s 12956 <builtIn_getCharacterDirection+0x84>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   1293e:	|  '--|-> moveq #28,d0
   12940:	|     |   add.l 16(sp),d0
   12944:	|     |   clr.l -(sp)
   12946:	|     |   pea 1 <_start+0x1>
   1294a:	|     |   move.l d0,-(sp)
   1294c:	|     |   jsr 155ba <setVariable>
   12952:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   12956:	|     '-> moveq #2,d0
}
   12958:	'-------> addq.l #8,sp
   1295a:	          rts

0001295c <builtIn_isCharacter>:

builtIn(isCharacter)
{
   1295c:	       subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1295e:	       movea.l 16(sp),a0
   12962:	       move.l 24(a0),d0
   12966:	       move.l d0,-(sp)
   12968:	       pea 7 <_start+0x7>
   1296c:	       move.l sp,d0
   1296e:	       addq.l #8,d0
   12970:	       move.l d0,-(sp)
   12972:	       jsr 14cc8 <getValueType>
   12978:	       lea 12(sp),sp
   1297c:	       tst.w d0
   1297e:	   ,-- bne.s 12984 <builtIn_isCharacter+0x28>
   12980:	   |   moveq #1,d0
   12982:	,--|-- bra.s 129c6 <builtIn_isCharacter+0x6a>
	trimStack (&fun -> stack);
   12984:	|  '-> moveq #24,d0
   12986:	|      add.l 16(sp),d0
   1298a:	|      move.l d0,-(sp)
   1298c:	|      jsr 1564c <trimStack>
   12992:	|      addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   12994:	|      move.l (sp),d0
   12996:	|      move.l d0,-(sp)
   12998:	|      jsr aa6e <findPerson>
   1299e:	|      addq.l #4,sp
   129a0:	|      move.l d0,4(sp)
	setVariable (&fun -> reg, SVT_INT, thisPerson != NULL);
   129a4:	|      sne d0
   129a6:	|      neg.b d0
   129a8:	|      moveq #0,d1
   129aa:	|      move.b d0,d1
   129ac:	|      moveq #28,d0
   129ae:	|      add.l 16(sp),d0
   129b2:	|      move.l d1,-(sp)
   129b4:	|      pea 1 <_start+0x1>
   129b8:	|      move.l d0,-(sp)
   129ba:	|      jsr 155ba <setVariable>
   129c0:	|      lea 12(sp),sp
	return BR_CONTINUE;
   129c4:	|      moveq #2,d0
}
   129c6:	'----> addq.l #8,sp
   129c8:	       rts

000129ca <builtIn_normalCharacter>:

builtIn(normalCharacter)
{
   129ca:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   129cc:	          movea.l 16(sp),a0
   129d0:	          move.l 24(a0),d0
   129d4:	          move.l d0,-(sp)
   129d6:	          pea 7 <_start+0x7>
   129da:	          move.l sp,d0
   129dc:	          addq.l #8,d0
   129de:	          move.l d0,-(sp)
   129e0:	          jsr 14cc8 <getValueType>
   129e6:	          lea 12(sp),sp
   129ea:	          tst.w d0
   129ec:	      ,-- bne.s 129f2 <builtIn_normalCharacter+0x28>
   129ee:	      |   moveq #1,d0
   129f0:	,-----|-- bra.s 12a6e <builtIn_normalCharacter+0xa4>
	trimStack (&fun -> stack);
   129f2:	|     '-> moveq #24,d0
   129f4:	|         add.l 16(sp),d0
   129f8:	|         move.l d0,-(sp)
   129fa:	|         jsr 1564c <trimStack>
   12a00:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   12a02:	|         move.l (sp),d0
   12a04:	|         move.l d0,-(sp)
   12a06:	|         jsr aa6e <findPerson>
   12a0c:	|         addq.l #4,sp
   12a0e:	|         move.l d0,4(sp)
	if (thisPerson)
   12a12:	|  ,----- beq.s 12a54 <builtIn_normalCharacter+0x8a>
	{
		thisPerson -> myAnim = thisPerson -> myPersona -> animation[thisPerson -> direction];
   12a14:	|  |      movea.l 4(sp),a0
   12a18:	|  |      movea.l 80(a0),a0
   12a1c:	|  |      move.l (a0),d1
   12a1e:	|  |      movea.l 4(sp),a0
   12a22:	|  |      move.l 106(a0),d0
   12a26:	|  |      add.l d0,d0
   12a28:	|  |      add.l d0,d0
   12a2a:	|  |      movea.l d1,a0
   12a2c:	|  |      adda.l d0,a0
   12a2e:	|  |      move.l (a0),d0
   12a30:	|  |      movea.l 4(sp),a0
   12a34:	|  |      move.l d0,72(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   12a38:	|  |      moveq #28,d0
   12a3a:	|  |      add.l 16(sp),d0
   12a3e:	|  |      pea 1 <_start+0x1>
   12a42:	|  |      pea 1 <_start+0x1>
   12a46:	|  |      move.l d0,-(sp)
   12a48:	|  |      jsr 155ba <setVariable>
   12a4e:	|  |      lea 12(sp),sp
   12a52:	|  |  ,-- bra.s 12a6c <builtIn_normalCharacter+0xa2>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   12a54:	|  '--|-> moveq #28,d0
   12a56:	|     |   add.l 16(sp),d0
   12a5a:	|     |   clr.l -(sp)
   12a5c:	|     |   pea 1 <_start+0x1>
   12a60:	|     |   move.l d0,-(sp)
   12a62:	|     |   jsr 155ba <setVariable>
   12a68:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   12a6c:	|     '-> moveq #2,d0
}
   12a6e:	'-------> addq.l #8,sp
   12a70:	          rts

00012a72 <builtIn_isMoving>:

builtIn(isMoving)
{
   12a72:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12a74:	          movea.l 16(sp),a0
   12a78:	          move.l 24(a0),d0
   12a7c:	          move.l d0,-(sp)
   12a7e:	          pea 7 <_start+0x7>
   12a82:	          move.l sp,d0
   12a84:	          addq.l #8,d0
   12a86:	          move.l d0,-(sp)
   12a88:	          jsr 14cc8 <getValueType>
   12a8e:	          lea 12(sp),sp
   12a92:	          tst.w d0
   12a94:	      ,-- bne.s 12a9a <builtIn_isMoving+0x28>
   12a96:	      |   moveq #1,d0
   12a98:	,-----|-- bra.s 12afa <builtIn_isMoving+0x88>
	trimStack (&fun -> stack);
   12a9a:	|     '-> moveq #24,d0
   12a9c:	|         add.l 16(sp),d0
   12aa0:	|         move.l d0,-(sp)
   12aa2:	|         jsr 1564c <trimStack>
   12aa8:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   12aaa:	|         move.l (sp),d0
   12aac:	|         move.l d0,-(sp)
   12aae:	|         jsr aa6e <findPerson>
   12ab4:	|         addq.l #4,sp
   12ab6:	|         move.l d0,4(sp)
	if (thisPerson)
   12aba:	|  ,----- beq.s 12ae0 <builtIn_isMoving+0x6e>
	{
		setVariable (&fun -> reg, SVT_INT, thisPerson -> walking);
   12abc:	|  |      movea.l 4(sp),a0
   12ac0:	|  |      move.w 64(a0),d0
   12ac4:	|  |      movea.w d0,a0
   12ac6:	|  |      moveq #28,d0
   12ac8:	|  |      add.l 16(sp),d0
   12acc:	|  |      move.l a0,-(sp)
   12ace:	|  |      pea 1 <_start+0x1>
   12ad2:	|  |      move.l d0,-(sp)
   12ad4:	|  |      jsr 155ba <setVariable>
   12ada:	|  |      lea 12(sp),sp
   12ade:	|  |  ,-- bra.s 12af8 <builtIn_isMoving+0x86>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   12ae0:	|  '--|-> moveq #28,d0
   12ae2:	|     |   add.l 16(sp),d0
   12ae6:	|     |   clr.l -(sp)
   12ae8:	|     |   pea 1 <_start+0x1>
   12aec:	|     |   move.l d0,-(sp)
   12aee:	|     |   jsr 155ba <setVariable>
   12af4:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   12af8:	|     '-> moveq #2,d0
}
   12afa:	'-------> addq.l #8,sp
   12afc:	          rts

00012afe <builtIn_fetchEvent>:

builtIn(fetchEvent)
{
   12afe:	          lea -12(sp),sp
	UNUSEDALL
	int obj1, obj2;
	if (! getValueType(&obj2, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12b02:	          movea.l 20(sp),a0
   12b06:	          move.l 24(a0),d0
   12b0a:	          move.l d0,-(sp)
   12b0c:	          pea 7 <_start+0x7>
   12b10:	          lea 8(sp),a0
   12b14:	          move.l a0,-(sp)
   12b16:	          jsr 14cc8 <getValueType>
   12b1c:	          lea 12(sp),sp
   12b20:	          tst.w d0
   12b22:	      ,-- bne.s 12b2a <builtIn_fetchEvent+0x2c>
   12b24:	      |   moveq #1,d0
   12b26:	,-----|-- bra.w 12bbe <builtIn_fetchEvent+0xc0>
	trimStack (&fun -> stack);
   12b2a:	|     '-> moveq #24,d0
   12b2c:	|         add.l 20(sp),d0
   12b30:	|         move.l d0,-(sp)
   12b32:	|         jsr 1564c <trimStack>
   12b38:	|         addq.l #4,sp
	if (! getValueType(&obj1, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12b3a:	|         movea.l 20(sp),a0
   12b3e:	|         move.l 24(a0),d0
   12b42:	|         move.l d0,-(sp)
   12b44:	|         pea 7 <_start+0x7>
   12b48:	|         moveq #12,d0
   12b4a:	|         add.l sp,d0
   12b4c:	|         move.l d0,-(sp)
   12b4e:	|         jsr 14cc8 <getValueType>
   12b54:	|         lea 12(sp),sp
   12b58:	|         tst.w d0
   12b5a:	|     ,-- bne.s 12b60 <builtIn_fetchEvent+0x62>
   12b5c:	|     |   moveq #1,d0
   12b5e:	+-----|-- bra.s 12bbe <builtIn_fetchEvent+0xc0>
	trimStack (&fun -> stack);
   12b60:	|     '-> moveq #24,d0
   12b62:	|         add.l 20(sp),d0
   12b66:	|         move.l d0,-(sp)
   12b68:	|         jsr 1564c <trimStack>
   12b6e:	|         addq.l #4,sp

	int fNum = getCombinationFunction (obj1, obj2);
   12b70:	|         move.l (sp),d1
   12b72:	|         move.l 4(sp),d0
   12b76:	|         move.l d1,-(sp)
   12b78:	|         move.l d0,-(sp)
   12b7a:	|         jsr da10 <getCombinationFunction>
   12b80:	|         addq.l #8,sp
   12b82:	|         move.l d0,8(sp)

	// Return value
	if (fNum) {
   12b86:	|  ,----- beq.s 12ba4 <builtIn_fetchEvent+0xa6>
		setVariable (&fun -> reg, SVT_FUNC, fNum);
   12b88:	|  |      moveq #28,d0
   12b8a:	|  |      add.l 20(sp),d0
   12b8e:	|  |      move.l 8(sp),-(sp)
   12b92:	|  |      pea 2 <_start+0x2>
   12b96:	|  |      move.l d0,-(sp)
   12b98:	|  |      jsr 155ba <setVariable>
   12b9e:	|  |      lea 12(sp),sp
   12ba2:	|  |  ,-- bra.s 12bbc <builtIn_fetchEvent+0xbe>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   12ba4:	|  '--|-> moveq #28,d0
   12ba6:	|     |   add.l 20(sp),d0
   12baa:	|     |   clr.l -(sp)
   12bac:	|     |   pea 1 <_start+0x1>
   12bb0:	|     |   move.l d0,-(sp)
   12bb2:	|     |   jsr 155ba <setVariable>
   12bb8:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   12bbc:	|     '-> moveq #2,d0
}
   12bbe:	'-------> lea 12(sp),sp
   12bc2:	          rts

00012bc4 <builtIn_deleteFile>:

builtIn(deleteFile)
{
   12bc4:	       lea -24(sp),sp
   12bc8:	       move.l a6,-(sp)
    UNUSEDALL

    char *namNormal = getTextFromAnyVar(&(fun->stack->thisVar));
   12bca:	       movea.l 36(sp),a0
   12bce:	       move.l 24(a0),d0
   12bd2:	       move.l d0,-(sp)
   12bd4:	       jsr 1529e <getTextFromAnyVar>
   12bda:	       addq.l #4,sp
   12bdc:	       move.l d0,24(sp)
    trimStack(&fun->stack);
   12be0:	       moveq #24,d0
   12be2:	       add.l 36(sp),d0
   12be6:	       move.l d0,-(sp)
   12be8:	       jsr 1564c <trimStack>
   12bee:	       addq.l #4,sp
    char *nam = encodeFilename(namNormal);
   12bf0:	       move.l 24(sp),-(sp)
   12bf4:	       jsr 2fe <encodeFilename>
   12bfa:	       addq.l #4,sp
   12bfc:	       move.l d0,20(sp)
    FreeVec(namNormal);
   12c00:	       move.l 24(sp),16(sp)
   12c06:	       move.l 1cfb6 <SysBase>,d0
   12c0c:	       movea.l d0,a6
   12c0e:	       movea.l 16(sp),a1
   12c12:	       jsr -690(a6)
    if (failSecurityCheck(nam)) return BR_ERROR;
   12c16:	       move.l 20(sp),-(sp)
   12c1a:	       jsr e7c8 <failSecurityCheck>
   12c20:	       addq.l #4,sp
   12c22:	       tst.w d0
   12c24:	   ,-- beq.s 12c2a <builtIn_deleteFile+0x66>
   12c26:	   |   moveq #1,d0
   12c28:	,--|-- bra.s 12c78 <builtIn_deleteFile+0xb4>
    setVariable(&fun->reg, SVT_INT, DeleteFile(nam));
   12c2a:	|  '-> move.l 20(sp),12(sp)
   12c30:	|      move.l 1cfbe <DOSBase>,d0
   12c36:	|      movea.l d0,a6
   12c38:	|      move.l 12(sp),d1
   12c3c:	|      jsr -72(a6)
   12c40:	|      move.l d0,8(sp)
   12c44:	|      move.l 8(sp),d1
   12c48:	|      moveq #28,d0
   12c4a:	|      add.l 36(sp),d0
   12c4e:	|      move.l d1,-(sp)
   12c50:	|      pea 1 <_start+0x1>
   12c54:	|      move.l d0,-(sp)
   12c56:	|      jsr 155ba <setVariable>
   12c5c:	|      lea 12(sp),sp
    FreeVec(nam);
   12c60:	|      move.l 20(sp),4(sp)
   12c66:	|      move.l 1cfb6 <SysBase>,d0
   12c6c:	|      movea.l d0,a6
   12c6e:	|      movea.l 4(sp),a1
   12c72:	|      jsr -690(a6)

    return BR_CONTINUE;
   12c76:	|      moveq #2,d0
}
   12c78:	'----> movea.l (sp)+,a6
   12c7a:	       lea 24(sp),sp
   12c7e:	       rts

00012c80 <builtIn_renameFile>:

builtIn(renameFile)
{
   12c80:	       lea -40(sp),sp
   12c84:	       move.l a6,-(sp)
   12c86:	       move.l d2,-(sp)
	UNUSEDALL
	char * temp;

	temp = getTextFromAnyVar(&(fun->stack->thisVar));
   12c88:	       movea.l 56(sp),a0
   12c8c:	       move.l 24(a0),d0
   12c90:	       move.l d0,-(sp)
   12c92:	       jsr 1529e <getTextFromAnyVar>
   12c98:	       addq.l #4,sp
   12c9a:	       move.l d0,44(sp)
	char * newnam = encodeFilename(temp);
   12c9e:	       move.l 44(sp),-(sp)
   12ca2:	       jsr 2fe <encodeFilename>
   12ca8:	       addq.l #4,sp
   12caa:	       move.l d0,40(sp)
	trimStack(&fun->stack);
   12cae:	       moveq #24,d0
   12cb0:	       add.l 56(sp),d0
   12cb4:	       move.l d0,-(sp)
   12cb6:	       jsr 1564c <trimStack>
   12cbc:	       addq.l #4,sp
	if (failSecurityCheck(newnam)) return BR_ERROR;
   12cbe:	       move.l 40(sp),-(sp)
   12cc2:	       jsr e7c8 <failSecurityCheck>
   12cc8:	       addq.l #4,sp
   12cca:	       tst.w d0
   12ccc:	   ,-- beq.s 12cd4 <builtIn_renameFile+0x54>
   12cce:	   |   moveq #1,d0
   12cd0:	,--|-- bra.w 12dba <builtIn_renameFile+0x13a>
	FreeVec(temp);
   12cd4:	|  '-> move.l 44(sp),36(sp)
   12cda:	|      move.l 1cfb6 <SysBase>,d0
   12ce0:	|      movea.l d0,a6
   12ce2:	|      movea.l 36(sp),a1
   12ce6:	|      jsr -690(a6)

	temp = getTextFromAnyVar(&(fun->stack->thisVar));
   12cea:	|      movea.l 56(sp),a0
   12cee:	|      move.l 24(a0),d0
   12cf2:	|      move.l d0,-(sp)
   12cf4:	|      jsr 1529e <getTextFromAnyVar>
   12cfa:	|      addq.l #4,sp
   12cfc:	|      move.l d0,44(sp)
	char * nam = encodeFilename(temp);
   12d00:	|      move.l 44(sp),-(sp)
   12d04:	|      jsr 2fe <encodeFilename>
   12d0a:	|      addq.l #4,sp
   12d0c:	|      move.l d0,32(sp)
	trimStack(&fun->stack);
   12d10:	|      moveq #24,d0
   12d12:	|      add.l 56(sp),d0
   12d16:	|      move.l d0,-(sp)
   12d18:	|      jsr 1564c <trimStack>
   12d1e:	|      addq.l #4,sp
	if (failSecurityCheck(nam)) return BR_ERROR;
   12d20:	|      move.l 32(sp),-(sp)
   12d24:	|      jsr e7c8 <failSecurityCheck>
   12d2a:	|      addq.l #4,sp
   12d2c:	|      tst.w d0
   12d2e:	|  ,-- beq.s 12d36 <builtIn_renameFile+0xb6>
   12d30:	|  |   moveq #1,d0
   12d32:	+--|-- bra.w 12dba <builtIn_renameFile+0x13a>
	FreeVec(temp);
   12d36:	|  '-> move.l 44(sp),28(sp)
   12d3c:	|      move.l 1cfb6 <SysBase>,d0
   12d42:	|      movea.l d0,a6
   12d44:	|      movea.l 28(sp),a1
   12d48:	|      jsr -690(a6)

	setVariable(&fun->reg, SVT_INT, Rename(nam, newnam));
   12d4c:	|      move.l 32(sp),24(sp)
   12d52:	|      move.l 40(sp),20(sp)
   12d58:	|      move.l 1cfbe <DOSBase>,d0
   12d5e:	|      movea.l d0,a6
   12d60:	|      move.l 24(sp),d1
   12d64:	|      move.l 20(sp),d2
   12d68:	|      jsr -78(a6)
   12d6c:	|      move.l d0,16(sp)
   12d70:	|      move.l 16(sp),d1
   12d74:	|      moveq #28,d0
   12d76:	|      add.l 56(sp),d0
   12d7a:	|      move.l d1,-(sp)
   12d7c:	|      pea 1 <_start+0x1>
   12d80:	|      move.l d0,-(sp)
   12d82:	|      jsr 155ba <setVariable>
   12d88:	|      lea 12(sp),sp
	FreeVec(nam);
   12d8c:	|      move.l 32(sp),12(sp)
   12d92:	|      move.l 1cfb6 <SysBase>,d0
   12d98:	|      movea.l d0,a6
   12d9a:	|      movea.l 12(sp),a1
   12d9e:	|      jsr -690(a6)
	FreeVec(newnam);
   12da2:	|      move.l 40(sp),8(sp)
   12da8:	|      move.l 1cfb6 <SysBase>,d0
   12dae:	|      movea.l d0,a6
   12db0:	|      movea.l 8(sp),a1
   12db4:	|      jsr -690(a6)

	return BR_CONTINUE;
   12db8:	|      moveq #2,d0
}
   12dba:	'----> move.l (sp)+,d2
   12dbc:	       movea.l (sp)+,a6
   12dbe:	       lea 40(sp),sp
   12dc2:	       rts

00012dc4 <builtIn_cacheSound>:

builtIn(cacheSound)
{
   12dc4:	       subq.l #4,sp
	UNUSEDALL
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   12dc6:	       movea.l 12(sp),a0
   12dca:	       move.l 24(a0),d0
   12dce:	       move.l d0,-(sp)
   12dd0:	       pea 5 <_start+0x5>
   12dd4:	       move.l sp,d0
   12dd6:	       addq.l #8,d0
   12dd8:	       move.l d0,-(sp)
   12dda:	       jsr 14cc8 <getValueType>
   12de0:	       lea 12(sp),sp
   12de4:	       tst.w d0
   12de6:	   ,-- bne.s 12dec <builtIn_cacheSound+0x28>
   12de8:	   |   moveq #1,d0
   12dea:	,--|-- bra.s 12e14 <builtIn_cacheSound+0x50>
	trimStack (&fun -> stack);
   12dec:	|  '-> moveq #24,d0
   12dee:	|      add.l 12(sp),d0
   12df2:	|      move.l d0,-(sp)
   12df4:	|      jsr 1564c <trimStack>
   12dfa:	|      addq.l #4,sp
	if (cacheSound (fileNumber) == -1) return BR_ERROR;
   12dfc:	|      move.l (sp),d0
   12dfe:	|      move.l d0,-(sp)
   12e00:	|      jsr d606 <cacheSound>
   12e06:	|      addq.l #4,sp
   12e08:	|      moveq #-1,d1
   12e0a:	|      cmp.l d0,d1
   12e0c:	|  ,-- bne.s 12e12 <builtIn_cacheSound+0x4e>
   12e0e:	|  |   moveq #1,d0
   12e10:	+--|-- bra.s 12e14 <builtIn_cacheSound+0x50>
	return BR_CONTINUE;
   12e12:	|  '-> moveq #2,d0
}
   12e14:	'----> addq.l #4,sp
   12e16:	       rts

00012e18 <builtIn_burnString>:
	trimStack (&fun -> stack);
	if (x == IN_THE_CENTRE) x = (winWidth - stringWidth (newText)) >> 1;
	fixFont (pastePalette);
	burnStringToBackdrop (newText, x, y, pastePalette);
	delete[] newText; Todo: Amigize this*/
	KPrintF("burnString: Not implemented for Amiga yet");
   12e18:	pea 1a215 <PutChar+0x1fcb>
   12e1e:	jsr 177a8 <KPrintF>
   12e24:	addq.l #4,sp
	return BR_CONTINUE;
   12e26:	moveq #2,d0
}
   12e28:	rts

00012e2a <builtIn_setCharacterSpinSpeed>:

builtIn(setCharacterSpinSpeed)
{
   12e2a:	          lea -12(sp),sp
	UNUSEDALL
	int speed, who;
	if (! getValueType(&speed, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12e2e:	          movea.l 20(sp),a0
   12e32:	          move.l 24(a0),d0
   12e36:	          move.l d0,-(sp)
   12e38:	          pea 1 <_start+0x1>
   12e3c:	          moveq #12,d0
   12e3e:	          add.l sp,d0
   12e40:	          move.l d0,-(sp)
   12e42:	          jsr 14cc8 <getValueType>
   12e48:	          lea 12(sp),sp
   12e4c:	          tst.w d0
   12e4e:	      ,-- bne.s 12e56 <builtIn_setCharacterSpinSpeed+0x2c>
   12e50:	      |   moveq #1,d0
   12e52:	,-----|-- bra.w 12ef0 <builtIn_setCharacterSpinSpeed+0xc6>
	trimStack (&fun -> stack);
   12e56:	|     '-> moveq #24,d0
   12e58:	|         add.l 20(sp),d0
   12e5c:	|         move.l d0,-(sp)
   12e5e:	|         jsr 1564c <trimStack>
   12e64:	|         addq.l #4,sp
	if (! getValueType(&who, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12e66:	|         movea.l 20(sp),a0
   12e6a:	|         move.l 24(a0),d0
   12e6e:	|         move.l d0,-(sp)
   12e70:	|         pea 7 <_start+0x7>
   12e74:	|         lea 8(sp),a0
   12e78:	|         move.l a0,-(sp)
   12e7a:	|         jsr 14cc8 <getValueType>
   12e80:	|         lea 12(sp),sp
   12e84:	|         tst.w d0
   12e86:	|     ,-- bne.s 12e8c <builtIn_setCharacterSpinSpeed+0x62>
   12e88:	|     |   moveq #1,d0
   12e8a:	+-----|-- bra.s 12ef0 <builtIn_setCharacterSpinSpeed+0xc6>
	trimStack (&fun -> stack);
   12e8c:	|     '-> moveq #24,d0
   12e8e:	|         add.l 20(sp),d0
   12e92:	|         move.l d0,-(sp)
   12e94:	|         jsr 1564c <trimStack>
   12e9a:	|         addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (who);
   12e9c:	|         move.l (sp),d0
   12e9e:	|         move.l d0,-(sp)
   12ea0:	|         jsr aa6e <findPerson>
   12ea6:	|         addq.l #4,sp
   12ea8:	|         move.l d0,8(sp)

	if (thisPerson) {
   12eac:	|  ,----- beq.s 12ed6 <builtIn_setCharacterSpinSpeed+0xac>
		thisPerson -> spinSpeed = speed;
   12eae:	|  |      move.l 4(sp),d0
   12eb2:	|  |      movea.l 8(sp),a0
   12eb6:	|  |      move.l d0,122(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   12eba:	|  |      moveq #28,d0
   12ebc:	|  |      add.l 20(sp),d0
   12ec0:	|  |      pea 1 <_start+0x1>
   12ec4:	|  |      pea 1 <_start+0x1>
   12ec8:	|  |      move.l d0,-(sp)
   12eca:	|  |      jsr 155ba <setVariable>
   12ed0:	|  |      lea 12(sp),sp
   12ed4:	|  |  ,-- bra.s 12eee <builtIn_setCharacterSpinSpeed+0xc4>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   12ed6:	|  '--|-> moveq #28,d0
   12ed8:	|     |   add.l 20(sp),d0
   12edc:	|     |   clr.l -(sp)
   12ede:	|     |   pea 1 <_start+0x1>
   12ee2:	|     |   move.l d0,-(sp)
   12ee4:	|     |   jsr 155ba <setVariable>
   12eea:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   12eee:	|     '-> moveq #2,d0
}
   12ef0:	'-------> lea 12(sp),sp
   12ef4:	          rts

00012ef6 <builtIn_setCharacterAngleOffset>:

builtIn(setCharacterAngleOffset)
{
   12ef6:	          lea -12(sp),sp
	UNUSEDALL
	int angle, who;
	if (! getValueType(&angle, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12efa:	          movea.l 20(sp),a0
   12efe:	          move.l 24(a0),d0
   12f02:	          move.l d0,-(sp)
   12f04:	          pea 1 <_start+0x1>
   12f08:	          moveq #12,d0
   12f0a:	          add.l sp,d0
   12f0c:	          move.l d0,-(sp)
   12f0e:	          jsr 14cc8 <getValueType>
   12f14:	          lea 12(sp),sp
   12f18:	          tst.w d0
   12f1a:	      ,-- bne.s 12f22 <builtIn_setCharacterAngleOffset+0x2c>
   12f1c:	      |   moveq #1,d0
   12f1e:	,-----|-- bra.w 12fbc <builtIn_setCharacterAngleOffset+0xc6>
	trimStack (&fun -> stack);
   12f22:	|     '-> moveq #24,d0
   12f24:	|         add.l 20(sp),d0
   12f28:	|         move.l d0,-(sp)
   12f2a:	|         jsr 1564c <trimStack>
   12f30:	|         addq.l #4,sp
	if (! getValueType(&who, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12f32:	|         movea.l 20(sp),a0
   12f36:	|         move.l 24(a0),d0
   12f3a:	|         move.l d0,-(sp)
   12f3c:	|         pea 7 <_start+0x7>
   12f40:	|         lea 8(sp),a0
   12f44:	|         move.l a0,-(sp)
   12f46:	|         jsr 14cc8 <getValueType>
   12f4c:	|         lea 12(sp),sp
   12f50:	|         tst.w d0
   12f52:	|     ,-- bne.s 12f58 <builtIn_setCharacterAngleOffset+0x62>
   12f54:	|     |   moveq #1,d0
   12f56:	+-----|-- bra.s 12fbc <builtIn_setCharacterAngleOffset+0xc6>
	trimStack (&fun -> stack);
   12f58:	|     '-> moveq #24,d0
   12f5a:	|         add.l 20(sp),d0
   12f5e:	|         move.l d0,-(sp)
   12f60:	|         jsr 1564c <trimStack>
   12f66:	|         addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (who);
   12f68:	|         move.l (sp),d0
   12f6a:	|         move.l d0,-(sp)
   12f6c:	|         jsr aa6e <findPerson>
   12f72:	|         addq.l #4,sp
   12f74:	|         move.l d0,8(sp)

	if (thisPerson) {
   12f78:	|  ,----- beq.s 12fa2 <builtIn_setCharacterAngleOffset+0xac>
		thisPerson -> angleOffset = angle;
   12f7a:	|  |      move.l 4(sp),d0
   12f7e:	|  |      movea.l 8(sp),a0
   12f82:	|  |      move.l d0,100(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   12f86:	|  |      moveq #28,d0
   12f88:	|  |      add.l 20(sp),d0
   12f8c:	|  |      pea 1 <_start+0x1>
   12f90:	|  |      pea 1 <_start+0x1>
   12f94:	|  |      move.l d0,-(sp)
   12f96:	|  |      jsr 155ba <setVariable>
   12f9c:	|  |      lea 12(sp),sp
   12fa0:	|  |  ,-- bra.s 12fba <builtIn_setCharacterAngleOffset+0xc4>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   12fa2:	|  '--|-> moveq #28,d0
   12fa4:	|     |   add.l 20(sp),d0
   12fa8:	|     |   clr.l -(sp)
   12faa:	|     |   pea 1 <_start+0x1>
   12fae:	|     |   move.l d0,-(sp)
   12fb0:	|     |   jsr 155ba <setVariable>
   12fb6:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   12fba:	|     '-> moveq #2,d0
}
   12fbc:	'-------> lea 12(sp),sp
   12fc0:	          rts

00012fc2 <builtIn_transitionMode>:


builtIn(transitionMode)
{
   12fc2:	       subq.l #4,sp
	UNUSEDALL
	int n;
	if (! getValueType(&n, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12fc4:	       movea.l 12(sp),a0
   12fc8:	       move.l 24(a0),d0
   12fcc:	       move.l d0,-(sp)
   12fce:	       pea 1 <_start+0x1>
   12fd2:	       move.l sp,d0
   12fd4:	       addq.l #8,d0
   12fd6:	       move.l d0,-(sp)
   12fd8:	       jsr 14cc8 <getValueType>
   12fde:	       lea 12(sp),sp
   12fe2:	       tst.w d0
   12fe4:	   ,-- bne.s 12fea <builtIn_transitionMode+0x28>
   12fe6:	   |   moveq #1,d0
   12fe8:	,--|-- bra.s 13020 <builtIn_transitionMode+0x5e>
	fadeMode = n;
   12fea:	|  '-> move.l (sp),d0
   12fec:	|      move.l d0,d0
   12fee:	|      move.b d0,1ce82 <fadeMode>
	trimStack (&fun -> stack);
   12ff4:	|      moveq #24,d0
   12ff6:	|      add.l 12(sp),d0
   12ffa:	|      move.l d0,-(sp)
   12ffc:	|      jsr 1564c <trimStack>
   13002:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   13004:	|      moveq #28,d0
   13006:	|      add.l 12(sp),d0
   1300a:	|      pea 1 <_start+0x1>
   1300e:	|      pea 1 <_start+0x1>
   13012:	|      move.l d0,-(sp)
   13014:	|      jsr 155ba <setVariable>
   1301a:	|      lea 12(sp),sp
	return BR_CONTINUE;
   1301e:	|      moveq #2,d0
}
   13020:	'----> addq.l #4,sp
   13022:	       rts

00013024 <builtIn__rem_updateDisplay>:

// Removed function - does nothing
builtIn(_rem_updateDisplay)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   13024:	moveq #24,d0
   13026:	add.l 8(sp),d0
   1302a:	move.l d0,-(sp)
   1302c:	jsr 1564c <trimStack>
   13032:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, TRUE);
   13034:	moveq #28,d0
   13036:	add.l 8(sp),d0
   1303a:	pea 1 <_start+0x1>
   1303e:	pea 1 <_start+0x1>
   13042:	move.l d0,-(sp)
   13044:	jsr 155ba <setVariable>
   1304a:	lea 12(sp),sp
	return BR_CONTINUE;
   1304e:	moveq #2,d0
}
   13050:	rts

00013052 <builtIn_getSoundCache>:
	if (! checkNew (&fun -> reg.varData.theStack)) return BR_ERROR;
	fun -> reg.varData.theStack -> first = NULL;
	fun -> reg.varData.theStack -> last = NULL;
	fun -> reg.varData.theStack -> timesUsed = 1;
	if (! getSoundCacheStack (&fun -> reg.varData.theStack)) return BR_ERROR; Todo: Amigize this?*/
	KPrintF("getSoundCache: Not implemented yet for Amiga");
   13052:	pea 1a23f <PutChar+0x1ff5>
   13058:	jsr 177a8 <KPrintF>
   1305e:	addq.l #4,sp
	return BR_CONTINUE;
   13060:	moveq #2,d0
}
   13062:	rts

00013064 <builtIn_saveCustomData>:

builtIn(saveCustomData)
{
   13064:	       lea -16(sp),sp
   13068:	       move.l a6,-(sp)
	UNUSEDALL
	// saveCustomData (thisStack, fileName);
	char * fileNameB = getTextFromAnyVar(&(fun->stack->thisVar));
   1306a:	       movea.l 28(sp),a0
   1306e:	       move.l 24(a0),d0
   13072:	       move.l d0,-(sp)
   13074:	       jsr 1529e <getTextFromAnyVar>
   1307a:	       addq.l #4,sp
   1307c:	       move.l d0,16(sp)
	if (!fileNameB) return BR_ERROR;
   13080:	   ,-- bne.s 13088 <builtIn_saveCustomData+0x24>
   13082:	   |   moveq #1,d0
   13084:	,--|-- bra.w 1313a <builtIn_saveCustomData+0xd6>

	char * fileName = encodeFilename(fileNameB);
   13088:	|  '-> move.l 16(sp),-(sp)
   1308c:	|      jsr 2fe <encodeFilename>
   13092:	|      addq.l #4,sp
   13094:	|      move.l d0,12(sp)
	FreeVec(fileNameB);
   13098:	|      move.l 16(sp),8(sp)
   1309e:	|      move.l 1cfb6 <SysBase>,d0
   130a4:	|      movea.l d0,a6
   130a6:	|      movea.l 8(sp),a1
   130aa:	|      jsr -690(a6)

	if (failSecurityCheck(fileName)) return BR_ERROR;
   130ae:	|      move.l 12(sp),-(sp)
   130b2:	|      jsr e7c8 <failSecurityCheck>
   130b8:	|      addq.l #4,sp
   130ba:	|      tst.w d0
   130bc:	|  ,-- beq.s 130c2 <builtIn_saveCustomData+0x5e>
   130be:	|  |   moveq #1,d0
   130c0:	+--|-- bra.s 1313a <builtIn_saveCustomData+0xd6>
	trimStack(&fun->stack);
   130c2:	|  '-> moveq #24,d0
   130c4:	|      add.l 28(sp),d0
   130c8:	|      move.l d0,-(sp)
   130ca:	|      jsr 1564c <trimStack>
   130d0:	|      addq.l #4,sp

	if (fun->stack->thisVar.varType != SVT_STACK) {
   130d2:	|      movea.l 28(sp),a0
   130d6:	|      movea.l 24(a0),a0
   130da:	|      move.l (a0),d0
   130dc:	|      moveq #6,d1
   130de:	|      cmp.l d0,d1
   130e0:	|  ,-- beq.s 130f4 <builtIn_saveCustomData+0x90>
		KPrintF("First parameter isn't a stack");
   130e2:	|  |   pea 1a26c <PutChar+0x2022>
   130e8:	|  |   jsr 177a8 <KPrintF>
   130ee:	|  |   addq.l #4,sp
		return BR_ERROR;
   130f0:	|  |   moveq #1,d0
   130f2:	+--|-- bra.s 1313a <builtIn_saveCustomData+0xd6>
	}
	if (!stackToFile(fileName, &fun->stack->thisVar)) return BR_ERROR;
   130f4:	|  '-> movea.l 28(sp),a0
   130f8:	|      move.l 24(a0),d0
   130fc:	|      move.l d0,-(sp)
   130fe:	|      move.l 16(sp),-(sp)
   13102:	|      jsr e418 <stackToFile>
   13108:	|      addq.l #8,sp
   1310a:	|      tst.w d0
   1310c:	|  ,-- bne.s 13112 <builtIn_saveCustomData+0xae>
   1310e:	|  |   moveq #1,d0
   13110:	+--|-- bra.s 1313a <builtIn_saveCustomData+0xd6>
	trimStack(&fun->stack);
   13112:	|  '-> moveq #24,d0
   13114:	|      add.l 28(sp),d0
   13118:	|      move.l d0,-(sp)
   1311a:	|      jsr 1564c <trimStack>
   13120:	|      addq.l #4,sp
	FreeVec(fileName);
   13122:	|      move.l 12(sp),4(sp)
   13128:	|      move.l 1cfb6 <SysBase>,d0
   1312e:	|      movea.l d0,a6
   13130:	|      movea.l 4(sp),a1
   13134:	|      jsr -690(a6)
	return BR_CONTINUE;
   13138:	|      moveq #2,d0
}
   1313a:	'----> movea.l (sp)+,a6
   1313c:	       lea 16(sp),sp
   13140:	       rts

00013142 <builtIn_loadCustomData>:

builtIn(loadCustomData)
{
   13142:	       lea -28(sp),sp
   13146:	       move.l a6,-(sp)
	UNUSEDALL

	char * newTextA = getTextFromAnyVar(&(fun->stack->thisVar));
   13148:	       movea.l 40(sp),a0
   1314c:	       move.l 24(a0),d0
   13150:	       move.l d0,-(sp)
   13152:	       jsr 1529e <getTextFromAnyVar>
   13158:	       addq.l #4,sp
   1315a:	       move.l d0,28(sp)
	if (!newTextA) return BR_ERROR;
   1315e:	   ,-- bne.s 13166 <builtIn_loadCustomData+0x24>
   13160:	   |   moveq #1,d0
   13162:	,--|-- bra.w 13262 <builtIn_loadCustomData+0x120>

	char * newText = encodeFilename(newTextA);
   13166:	|  '-> move.l 28(sp),-(sp)
   1316a:	|      jsr 2fe <encodeFilename>
   13170:	|      addq.l #4,sp
   13172:	|      move.l d0,24(sp)
	FreeVec(newTextA);
   13176:	|      move.l 28(sp),20(sp)
   1317c:	|      move.l 1cfb6 <SysBase>,d0
   13182:	|      movea.l d0,a6
   13184:	|      movea.l 20(sp),a1
   13188:	|      jsr -690(a6)

	if (failSecurityCheck(newText)) return BR_ERROR;
   1318c:	|      move.l 24(sp),-(sp)
   13190:	|      jsr e7c8 <failSecurityCheck>
   13196:	|      addq.l #4,sp
   13198:	|      tst.w d0
   1319a:	|  ,-- beq.s 131a2 <builtIn_loadCustomData+0x60>
   1319c:	|  |   moveq #1,d0
   1319e:	+--|-- bra.w 13262 <builtIn_loadCustomData+0x120>
	trimStack(&fun->stack);
   131a2:	|  '-> moveq #24,d0
   131a4:	|      add.l 40(sp),d0
   131a8:	|      move.l d0,-(sp)
   131aa:	|      jsr 1564c <trimStack>
   131b0:	|      addq.l #4,sp

	unlinkVar(&fun->reg);
   131b2:	|      moveq #28,d0
   131b4:	|      add.l 40(sp),d0
   131b8:	|      move.l d0,-(sp)
   131ba:	|      jsr 14f16 <unlinkVar>
   131c0:	|      addq.l #4,sp
	fun->reg.varType = SVT_STACK;
   131c2:	|      movea.l 40(sp),a0
   131c6:	|      moveq #6,d0
   131c8:	|      move.l d0,28(a0)
	fun->reg.varData.theStack = AllocVec(sizeof(struct stackHandler), MEMF_ANY);
   131cc:	|      moveq #12,d0
   131ce:	|      move.l d0,16(sp)
   131d2:	|      clr.l 12(sp)
   131d6:	|      move.l 1cfb6 <SysBase>,d0
   131dc:	|      movea.l d0,a6
   131de:	|      move.l 16(sp),d0
   131e2:	|      move.l 12(sp),d1
   131e6:	|      jsr -684(a6)
   131ea:	|      move.l d0,8(sp)
   131ee:	|      move.l 8(sp),d0
   131f2:	|      movea.l 40(sp),a0
   131f6:	|      move.l d0,32(a0)
	if (!fun->reg.varData.theStack) return BR_ERROR;
   131fa:	|      movea.l 40(sp),a0
   131fe:	|      move.l 32(a0),d0
   13202:	|  ,-- bne.s 13208 <builtIn_loadCustomData+0xc6>
   13204:	|  |   moveq #1,d0
   13206:	+--|-- bra.s 13262 <builtIn_loadCustomData+0x120>
	fun->reg.varData.theStack->first = NULL;
   13208:	|  '-> movea.l 40(sp),a0
   1320c:	|      movea.l 32(a0),a0
   13210:	|      clr.l (a0)
	fun->reg.varData.theStack->last = NULL;
   13212:	|      movea.l 40(sp),a0
   13216:	|      movea.l 32(a0),a0
   1321a:	|      clr.l 4(a0)
	fun->reg.varData.theStack->timesUsed = 1;
   1321e:	|      movea.l 40(sp),a0
   13222:	|      movea.l 32(a0),a0
   13226:	|      moveq #1,d0
   13228:	|      move.l d0,8(a0)
	if (!fileToStack(newText, fun->reg.varData.theStack)) return BR_ERROR;
   1322c:	|      movea.l 40(sp),a0
   13230:	|      move.l 32(a0),d0
   13234:	|      move.l d0,-(sp)
   13236:	|      move.l 28(sp),-(sp)
   1323a:	|      jsr de52 <fileToStack>
   13240:	|      addq.l #8,sp
   13242:	|      tst.w d0
   13244:	|  ,-- bne.s 1324a <builtIn_loadCustomData+0x108>
   13246:	|  |   moveq #1,d0
   13248:	+--|-- bra.s 13262 <builtIn_loadCustomData+0x120>
	FreeVec(newText);
   1324a:	|  '-> move.l 24(sp),4(sp)
   13250:	|      move.l 1cfb6 <SysBase>,d0
   13256:	|      movea.l d0,a6
   13258:	|      movea.l 4(sp),a1
   1325c:	|      jsr -690(a6)
	return BR_CONTINUE;
   13260:	|      moveq #2,d0
}
   13262:	'----> movea.l (sp)+,a6
   13264:	       lea 28(sp),sp
   13268:	       rts

0001326a <builtIn_setCustomEncoding>:

builtIn(setCustomEncoding)
{
   1326a:	       subq.l #4,sp
	UNUSEDALL
	int n;
	if (! getValueType(&n, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1326c:	       movea.l 12(sp),a0
   13270:	       move.l 24(a0),d0
   13274:	       move.l d0,-(sp)
   13276:	       pea 1 <_start+0x1>
   1327a:	       move.l sp,d0
   1327c:	       addq.l #8,d0
   1327e:	       move.l d0,-(sp)
   13280:	       jsr 14cc8 <getValueType>
   13286:	       lea 12(sp),sp
   1328a:	       tst.w d0
   1328c:	   ,-- bne.s 13292 <builtIn_setCustomEncoding+0x28>
   1328e:	   |   moveq #1,d0
   13290:	,--|-- bra.s 132c8 <builtIn_setCustomEncoding+0x5e>
	saveEncoding = n;
   13292:	|  '-> move.l (sp),d0
   13294:	|      move.l d0,d0
   13296:	|      move.w d0,1d06a <saveEncoding>
	trimStack (&fun -> stack);
   1329c:	|      moveq #24,d0
   1329e:	|      add.l 12(sp),d0
   132a2:	|      move.l d0,-(sp)
   132a4:	|      jsr 1564c <trimStack>
   132aa:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   132ac:	|      moveq #28,d0
   132ae:	|      add.l 12(sp),d0
   132b2:	|      pea 1 <_start+0x1>
   132b6:	|      pea 1 <_start+0x1>
   132ba:	|      move.l d0,-(sp)
   132bc:	|      jsr 155ba <setVariable>
   132c2:	|      lea 12(sp),sp
	return BR_CONTINUE;
   132c6:	|      moveq #2,d0
}
   132c8:	'----> addq.l #4,sp
   132ca:	       rts

000132cc <builtIn_freeSound>:

builtIn(freeSound)
{
   132cc:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   132ce:	       movea.l 12(sp),a0
   132d2:	       move.l 24(a0),d0
   132d6:	       move.l d0,-(sp)
   132d8:	       pea 5 <_start+0x5>
   132dc:	       move.l sp,d0
   132de:	       addq.l #8,d0
   132e0:	       move.l d0,-(sp)
   132e2:	       jsr 14cc8 <getValueType>
   132e8:	       lea 12(sp),sp
   132ec:	       tst.w d0
   132ee:	   ,-- bne.s 132f4 <builtIn_freeSound+0x28>
   132f0:	   |   moveq #1,d0
   132f2:	,--|-- bra.s 13312 <builtIn_freeSound+0x46>
	trimStack (&fun -> stack);
   132f4:	|  '-> moveq #24,d0
   132f6:	|      add.l 12(sp),d0
   132fa:	|      move.l d0,-(sp)
   132fc:	|      jsr 1564c <trimStack>
   13302:	|      addq.l #4,sp
	huntKillFreeSound (v);
   13304:	|      move.l (sp),d0
   13306:	|      move.l d0,-(sp)
   13308:	|      jsr d60a <huntKillFreeSound>
   1330e:	|      addq.l #4,sp
	return BR_CONTINUE;
   13310:	|      moveq #2,d0
}
   13312:	'----> addq.l #4,sp
   13314:	       rts

00013316 <builtIn_parallaxAdd>:

builtIn(parallaxAdd)
{
   13316:	       lea -12(sp),sp
   1331a:	       move.l d2,-(sp)
	/*if (frozenStuff) {
		fatal ("Can't set background parallax image while frozen");
		return BR_ERROR;
	} else { Todo: Amigize this*/
		int wrapX, wrapY, v;
		if (! getValueType(&wrapY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1331c:	       movea.l 24(sp),a0
   13320:	       move.l 24(a0),d0
   13324:	       move.l d0,-(sp)
   13326:	       pea 1 <_start+0x1>
   1332a:	       moveq #16,d0
   1332c:	       add.l sp,d0
   1332e:	       move.l d0,-(sp)
   13330:	       jsr 14cc8 <getValueType>
   13336:	       lea 12(sp),sp
   1333a:	       tst.w d0
   1333c:	   ,-- bne.s 13344 <builtIn_parallaxAdd+0x2e>
   1333e:	   |   moveq #1,d0
   13340:	,--|-- bra.w 13418 <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   13344:	|  '-> moveq #24,d0
   13346:	|      add.l 24(sp),d0
   1334a:	|      move.l d0,-(sp)
   1334c:	|      jsr 1564c <trimStack>
   13352:	|      addq.l #4,sp
		if (! getValueType(&wrapX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   13354:	|      movea.l 24(sp),a0
   13358:	|      move.l 24(a0),d0
   1335c:	|      move.l d0,-(sp)
   1335e:	|      pea 1 <_start+0x1>
   13362:	|      moveq #20,d0
   13364:	|      add.l sp,d0
   13366:	|      move.l d0,-(sp)
   13368:	|      jsr 14cc8 <getValueType>
   1336e:	|      lea 12(sp),sp
   13372:	|      tst.w d0
   13374:	|  ,-- bne.s 1337c <builtIn_parallaxAdd+0x66>
   13376:	|  |   moveq #1,d0
   13378:	+--|-- bra.w 13418 <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   1337c:	|  '-> moveq #24,d0
   1337e:	|      add.l 24(sp),d0
   13382:	|      move.l d0,-(sp)
   13384:	|      jsr 1564c <trimStack>
   1338a:	|      addq.l #4,sp
		if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   1338c:	|      movea.l 24(sp),a0
   13390:	|      move.l 24(a0),d0
   13394:	|      move.l d0,-(sp)
   13396:	|      pea 5 <_start+0x5>
   1339a:	|      lea 12(sp),a0
   1339e:	|      move.l a0,-(sp)
   133a0:	|      jsr 14cc8 <getValueType>
   133a6:	|      lea 12(sp),sp
   133aa:	|      tst.w d0
   133ac:	|  ,-- bne.s 133b2 <builtIn_parallaxAdd+0x9c>
   133ae:	|  |   moveq #1,d0
   133b0:	+--|-- bra.s 13418 <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   133b2:	|  '-> moveq #24,d0
   133b4:	|      add.l 24(sp),d0
   133b8:	|      move.l d0,-(sp)
   133ba:	|      jsr 1564c <trimStack>
   133c0:	|      addq.l #4,sp

		if (! loadParallax (v, wrapX, wrapY)) return BR_ERROR;
   133c2:	|      move.l 8(sp),d0
   133c6:	|      move.l d0,d0
   133c8:	|      moveq #0,d2
   133ca:	|      move.w d0,d2
   133cc:	|      move.l 12(sp),d0
   133d0:	|      move.l d0,d0
   133d2:	|      moveq #0,d1
   133d4:	|      move.w d0,d1
   133d6:	|      move.l 4(sp),d0
   133da:	|      move.l d0,d0
   133dc:	|      move.w d0,d0
   133de:	|      andi.l #65535,d0
   133e4:	|      move.l d2,-(sp)
   133e6:	|      move.l d1,-(sp)
   133e8:	|      move.l d0,-(sp)
   133ea:	|      jsr d830 <loadParallax>
   133f0:	|      lea 12(sp),sp
   133f4:	|      tst.w d0
   133f6:	|  ,-- bne.s 133fc <builtIn_parallaxAdd+0xe6>
   133f8:	|  |   moveq #1,d0
   133fa:	+--|-- bra.s 13418 <builtIn_parallaxAdd+0x102>
		setVariable (&fun -> reg, SVT_INT, 1);
   133fc:	|  '-> moveq #28,d0
   133fe:	|      add.l 24(sp),d0
   13402:	|      pea 1 <_start+0x1>
   13406:	|      pea 1 <_start+0x1>
   1340a:	|      move.l d0,-(sp)
   1340c:	|      jsr 155ba <setVariable>
   13412:	|      lea 12(sp),sp
	//}
	return BR_CONTINUE;
   13416:	|      moveq #2,d0
}
   13418:	'----> move.l (sp)+,d2
   1341a:	       lea 12(sp),sp
   1341e:	       rts

00013420 <builtIn_parallaxClear>:

builtIn(parallaxClear)
{
	UNUSEDALL
	killParallax ();
   13420:	jsr d768 <killParallax>
	setVariable (&fun -> reg, SVT_INT, 1);
   13426:	moveq #28,d0
   13428:	add.l 8(sp),d0
   1342c:	pea 1 <_start+0x1>
   13430:	pea 1 <_start+0x1>
   13434:	move.l d0,-(sp)
   13436:	jsr 155ba <setVariable>
   1343c:	lea 12(sp),sp
	return BR_CONTINUE;
   13440:	moveq #2,d0
}
   13442:	rts

00013444 <builtIn_getPixelColour>:
	if (! checkNew (&fun -> reg.varData.theStack)) return BR_ERROR;
	fun -> reg.varData.theStack -> first = NULL;
	fun -> reg.varData.theStack -> last = NULL;
	fun -> reg.varData.theStack -> timesUsed = 1;
	if (! getRGBIntoStack (x, y, &fun -> reg.varData.theStack)) return BR_ERROR; Todo: Amigize this*/
	KPrintF("getPixelColor: Not implemented for Amiga");
   13444:	pea 1a28a <PutChar+0x2040>
   1344a:	jsr 177a8 <KPrintF>
   13450:	addq.l #4,sp

	return BR_CONTINUE;
   13452:	moveq #2,d0
}
   13454:	rts

00013456 <builtIn_makeFastArray>:

builtIn(makeFastArray)
{
   13456:	             subq.l #8,sp
	UNUSEDALL
	switch (fun -> stack -> thisVar.varType) {
   13458:	             movea.l 16(sp),a0
   1345c:	             movea.l 24(a0),a0
   13460:	             move.l (a0),d0
   13462:	             moveq #1,d1
   13464:	             cmp.l d0,d1
   13466:	      ,----- beq.s 134ae <builtIn_makeFastArray+0x58>
   13468:	      |      moveq #6,d1
   1346a:	      |      cmp.l d0,d1
   1346c:	,-----|----- bne.s 134ec <builtIn_makeFastArray+0x96>
		case SVT_STACK:
		{
			BOOL success = makeFastArrayFromStack (&fun -> reg, fun -> stack -> thisVar.varData.theStack);
   1346e:	|     |      movea.l 16(sp),a0
   13472:	|     |      movea.l 24(a0),a0
   13476:	|     |      move.l 4(a0),d1
   1347a:	|     |      moveq #28,d0
   1347c:	|     |      add.l 16(sp),d0
   13480:	|     |      move.l d1,-(sp)
   13482:	|     |      move.l d0,-(sp)
   13484:	|     |      jsr 14d7a <makeFastArrayFromStack>
   1348a:	|     |      addq.l #8,sp
   1348c:	|     |      move.w d0,6(sp)
			trimStack (&fun -> stack);
   13490:	|     |      moveq #24,d0
   13492:	|     |      add.l 16(sp),d0
   13496:	|     |      move.l d0,-(sp)
   13498:	|     |      jsr 1564c <trimStack>
   1349e:	|     |      addq.l #4,sp
			return success ? BR_CONTINUE : BR_ERROR;
   134a0:	|     |      tst.w 6(sp)
   134a4:	|     |  ,-- beq.s 134aa <builtIn_makeFastArray+0x54>
   134a6:	|     |  |   moveq #2,d0
   134a8:	|  ,--|--|-- bra.s 134fe <builtIn_makeFastArray+0xa8>
   134aa:	|  |  |  '-> moveq #1,d0
   134ac:	|  +--|----- bra.s 134fe <builtIn_makeFastArray+0xa8>
		}
			break;

		case SVT_INT:
		{
			int i = fun -> stack -> thisVar.varData.intValue;
   134ae:	|  |  '----> movea.l 16(sp),a0
   134b2:	|  |         movea.l 24(a0),a0
   134b6:	|  |         move.l 4(a0),2(sp)
			trimStack (&fun -> stack);
   134bc:	|  |         moveq #24,d0
   134be:	|  |         add.l 16(sp),d0
   134c2:	|  |         move.l d0,-(sp)
   134c4:	|  |         jsr 1564c <trimStack>
   134ca:	|  |         addq.l #4,sp
			return makeFastArraySize (&fun -> reg, i) ? BR_CONTINUE : BR_ERROR;
   134cc:	|  |         moveq #28,d0
   134ce:	|  |         add.l 16(sp),d0
   134d2:	|  |         move.l 2(sp),-(sp)
   134d6:	|  |         move.l d0,-(sp)
   134d8:	|  |         jsr 14de4 <makeFastArraySize>
   134de:	|  |         addq.l #8,sp
   134e0:	|  |         tst.w d0
   134e2:	|  |     ,-- beq.s 134e8 <builtIn_makeFastArray+0x92>
   134e4:	|  |     |   moveq #2,d0
   134e6:	|  +-----|-- bra.s 134fe <builtIn_makeFastArray+0xa8>
   134e8:	|  |     '-> moveq #1,d0
   134ea:	|  +-------- bra.s 134fe <builtIn_makeFastArray+0xa8>
		}
			break;

		default:
			break;
   134ec:	'--|-------> nop
	}
	KPrintF ("Parameter must be a number or a stack.");
   134ee:	   |         pea 1a2b3 <PutChar+0x2069>
   134f4:	   |         jsr 177a8 <KPrintF>
   134fa:	   |         addq.l #4,sp
	return BR_ERROR;
   134fc:	   |         moveq #1,d0
}
   134fe:	   '-------> addq.l #8,sp
   13500:	             rts

00013502 <builtIn_getCharacterScale>:

builtIn(getCharacterScale)
{
   13502:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   13504:	          movea.l 16(sp),a0
   13508:	          move.l 24(a0),d0
   1350c:	          move.l d0,-(sp)
   1350e:	          pea 7 <_start+0x7>
   13512:	          move.l sp,d0
   13514:	          addq.l #8,d0
   13516:	          move.l d0,-(sp)
   13518:	          jsr 14cc8 <getValueType>
   1351e:	          lea 12(sp),sp
   13522:	          tst.w d0
   13524:	      ,-- bne.s 1352a <builtIn_getCharacterScale+0x28>
   13526:	      |   moveq #1,d0
   13528:	,-----|-- bra.s 135a4 <builtIn_getCharacterScale+0xa2>
	trimStack (&fun -> stack);
   1352a:	|     '-> moveq #24,d0
   1352c:	|         add.l 16(sp),d0
   13530:	|         move.l d0,-(sp)
   13532:	|         jsr 1564c <trimStack>
   13538:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   1353a:	|         move.l (sp),d0
   1353c:	|         move.l d0,-(sp)
   1353e:	|         jsr aa6e <findPerson>
   13544:	|         addq.l #4,sp
   13546:	|         move.l d0,4(sp)
	if (pers) {
   1354a:	|  ,----- beq.s 1358a <builtIn_getCharacterScale+0x88>
		setVariable (&fun -> reg, SVT_INT, pers -> scale * (FLOAT) 100); 
   1354c:	|  |      movea.l 4(sp),a0
   13550:	|  |      move.l 32(a0),d0
   13554:	|  |      move.l #1120403456,-(sp)
   1355a:	|  |      move.l d0,-(sp)
   1355c:	|  |      jsr 17c8c <__mulsf3>
   13562:	|  |      addq.l #8,sp
   13564:	|  |      move.l d0,-(sp)
   13566:	|  |      jsr 17b72 <__fixsfsi>
   1356c:	|  |      addq.l #4,sp
   1356e:	|  |      move.l d0,d1
   13570:	|  |      moveq #28,d0
   13572:	|  |      add.l 16(sp),d0
   13576:	|  |      move.l d1,-(sp)
   13578:	|  |      pea 1 <_start+0x1>
   1357c:	|  |      move.l d0,-(sp)
   1357e:	|  |      jsr 155ba <setVariable>
   13584:	|  |      lea 12(sp),sp
   13588:	|  |  ,-- bra.s 135a2 <builtIn_getCharacterScale+0xa0>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   1358a:	|  '--|-> moveq #28,d0
   1358c:	|     |   add.l 16(sp),d0
   13590:	|     |   clr.l -(sp)
   13592:	|     |   pea 1 <_start+0x1>
   13596:	|     |   move.l d0,-(sp)
   13598:	|     |   jsr 155ba <setVariable>
   1359e:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   135a2:	|     '-> moveq #2,d0
}
   135a4:	'-------> addq.l #8,sp
   135a6:	          rts

000135a8 <builtIn_getLanguageID>:

builtIn(getLanguageID)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, gameSettings.languageID);
   135a8:	move.l 1d08e <gameSettings>,d0
   135ae:	move.l d0,d1
   135b0:	moveq #28,d0
   135b2:	add.l 8(sp),d0
   135b6:	move.l d1,-(sp)
   135b8:	pea 1 <_start+0x1>
   135bc:	move.l d0,-(sp)
   135be:	jsr 155ba <setVariable>
   135c4:	lea 12(sp),sp
	return BR_CONTINUE;
   135c8:	moveq #2,d0
}
   135ca:	rts

000135cc <builtIn__rem_launchWith>:
// Removed function
builtIn(_rem_launchWith)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   135cc:	moveq #24,d0
   135ce:	add.l 8(sp),d0
   135d2:	move.l d0,-(sp)
   135d4:	jsr 1564c <trimStack>
   135da:	addq.l #4,sp
	trimStack (&fun -> stack);
   135dc:	moveq #24,d0
   135de:	add.l 8(sp),d0
   135e2:	move.l d0,-(sp)
   135e4:	jsr 1564c <trimStack>
   135ea:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, FALSE);
   135ec:	moveq #28,d0
   135ee:	add.l 8(sp),d0
   135f2:	clr.l -(sp)
   135f4:	pea 1 <_start+0x1>
   135f8:	move.l d0,-(sp)
   135fa:	jsr 155ba <setVariable>
   13600:	lea 12(sp),sp

	return BR_CONTINUE;
   13604:	moveq #2,d0

}
   13606:	rts

00013608 <builtIn_getFramesPerSecond>:

builtIn(getFramesPerSecond)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, lastFramesPerSecond);
   13608:	move.l 1c92c <lastFramesPerSecond>,d1
   1360e:	moveq #28,d0
   13610:	add.l 8(sp),d0
   13614:	move.l d1,-(sp)
   13616:	pea 1 <_start+0x1>
   1361a:	move.l d0,-(sp)
   1361c:	jsr 155ba <setVariable>
   13622:	lea 12(sp),sp
	return BR_CONTINUE;
   13626:	moveq #2,d0
}
   13628:	rts

0001362a <builtIn_showThumbnail>:
	//				deb ("aaaaa is still ", aaaaa);
	delete[] aaaaa;
	//				deb ("Deleted", "aaaaa");
	showThumbnail (file, x, y);
	delete[] file; Todo Amigize this?*/
	return BR_CONTINUE;
   1362a:	moveq #2,d0
}
   1362c:	rts

0001362e <builtIn_setThumbnailSize>:

builtIn(setThumbnailSize)
{
   1362e:	          lea -52(sp),sp
	UNUSEDALL
	if (! getValueType(&thumbHeight, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   13632:	          movea.l 60(sp),a0
   13636:	          move.l 24(a0),d0
   1363a:	          move.l d0,-(sp)
   1363c:	          pea 1 <_start+0x1>
   13640:	          pea 1cebe <thumbHeight>
   13646:	          jsr 14cc8 <getValueType>
   1364c:	          lea 12(sp),sp
   13650:	          tst.w d0
   13652:	      ,-- bne.s 1365a <builtIn_setThumbnailSize+0x2c>
   13654:	      |   moveq #1,d0
   13656:	,-----|-- bra.w 13716 <builtIn_setThumbnailSize+0xe8>
	trimStack (&fun -> stack);
   1365a:	|     '-> moveq #24,d0
   1365c:	|         add.l 60(sp),d0
   13660:	|         move.l d0,-(sp)
   13662:	|         jsr 1564c <trimStack>
   13668:	|         addq.l #4,sp
	if (! getValueType(&thumbWidth, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1366a:	|         movea.l 60(sp),a0
   1366e:	|         move.l 24(a0),d0
   13672:	|         move.l d0,-(sp)
   13674:	|         pea 1 <_start+0x1>
   13678:	|         pea 1ceba <thumbWidth>
   1367e:	|         jsr 14cc8 <getValueType>
   13684:	|         lea 12(sp),sp
   13688:	|         tst.w d0
   1368a:	|     ,-- bne.s 13692 <builtIn_setThumbnailSize+0x64>
   1368c:	|     |   moveq #1,d0
   1368e:	+-----|-- bra.w 13716 <builtIn_setThumbnailSize+0xe8>
	trimStack (&fun -> stack);
   13692:	|     '-> moveq #24,d0
   13694:	|         add.l 60(sp),d0
   13698:	|         move.l d0,-(sp)
   1369a:	|         jsr 1564c <trimStack>
   136a0:	|         addq.l #4,sp
	if (thumbWidth < 0 || thumbHeight < 0 || (unsigned int) thumbWidth > winWidth || (unsigned int) thumbHeight > winHeight) {
   136a2:	|         move.l 1ceba <thumbWidth>,d0
   136a8:	|     ,-- bmi.s 136d6 <builtIn_setThumbnailSize+0xa8>
   136aa:	|     |   move.l 1cebe <thumbHeight>,d0
   136b0:	|     +-- bmi.s 136d6 <builtIn_setThumbnailSize+0xa8>
   136b2:	|     |   move.l 1ceba <thumbWidth>,d0
   136b8:	|     |   move.l d0,d1
   136ba:	|     |   move.l 1cefe <winWidth>,d0
   136c0:	|     |   cmp.l d1,d0
   136c2:	|     +-- bcs.s 136d6 <builtIn_setThumbnailSize+0xa8>
   136c4:	|     |   move.l 1cebe <thumbHeight>,d0
   136ca:	|     |   move.l d0,d1
   136cc:	|     |   move.l 1cf02 <winHeight>,d0
   136d2:	|     |   cmp.l d1,d0
   136d4:	|  ,--|-- bcc.s 13714 <builtIn_setThumbnailSize+0xe6>
		char buff[50];
		sprintf (buff, "%d x %d", thumbWidth, thumbHeight);
   136d6:	|  |  '-> move.l 1cebe <thumbHeight>,d1
   136dc:	|  |      move.l 1ceba <thumbWidth>,d0
   136e2:	|  |      move.l d1,-(sp)
   136e4:	|  |      move.l d0,-(sp)
   136e6:	|  |      pea 1a2da <PutChar+0x2090>
   136ec:	|  |      lea 14(sp),a0
   136f0:	|  |      move.l a0,-(sp)
   136f2:	|  |      jsr 144d2 <sprintf>
   136f8:	|  |      lea 16(sp),sp
		KPrintF ("Invalid thumbnail size", buff);
   136fc:	|  |      lea 2(sp),a0
   13700:	|  |      move.l a0,-(sp)
   13702:	|  |      pea 1a2e2 <PutChar+0x2098>
   13708:	|  |      jsr 177a8 <KPrintF>
   1370e:	|  |      addq.l #8,sp
		return BR_ERROR;
   13710:	|  |      moveq #1,d0
   13712:	+--|----- bra.s 13716 <builtIn_setThumbnailSize+0xe8>
	}
	return BR_CONTINUE;
   13714:	|  '----> moveq #2,d0
}
   13716:	'-------> lea 52(sp),sp
   1371a:	          rts

0001371c <builtIn_hasFlag>:

builtIn(hasFlag)
{
   1371c:	       lea -12(sp),sp
   13720:	       move.l d2,-(sp)
	UNUSEDALL
	int objNum, flagIndex;
	if (! getValueType(&flagIndex, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   13722:	       movea.l 24(sp),a0
   13726:	       move.l 24(a0),d0
   1372a:	       move.l d0,-(sp)
   1372c:	       pea 1 <_start+0x1>
   13730:	       lea 12(sp),a0
   13734:	       move.l a0,-(sp)
   13736:	       jsr 14cc8 <getValueType>
   1373c:	       lea 12(sp),sp
   13740:	       tst.w d0
   13742:	   ,-- bne.s 1374a <builtIn_hasFlag+0x2e>
   13744:	   |   moveq #1,d0
   13746:	,--|-- bra.w 137da <builtIn_hasFlag+0xbe>
	trimStack (&fun -> stack);
   1374a:	|  '-> moveq #24,d0
   1374c:	|      add.l 24(sp),d0
   13750:	|      move.l d0,-(sp)
   13752:	|      jsr 1564c <trimStack>
   13758:	|      addq.l #4,sp
	if (! getValueType(&objNum, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1375a:	|      movea.l 24(sp),a0
   1375e:	|      move.l 24(a0),d0
   13762:	|      move.l d0,-(sp)
   13764:	|      pea 7 <_start+0x7>
   13768:	|      moveq #16,d0
   1376a:	|      add.l sp,d0
   1376c:	|      move.l d0,-(sp)
   1376e:	|      jsr 14cc8 <getValueType>
   13774:	|      lea 12(sp),sp
   13778:	|      tst.w d0
   1377a:	|  ,-- bne.s 13780 <builtIn_hasFlag+0x64>
   1377c:	|  |   moveq #1,d0
   1377e:	+--|-- bra.s 137da <builtIn_hasFlag+0xbe>
	trimStack (&fun -> stack);
   13780:	|  '-> moveq #24,d0
   13782:	|      add.l 24(sp),d0
   13786:	|      move.l d0,-(sp)
   13788:	|      jsr 1564c <trimStack>
   1378e:	|      addq.l #4,sp
	struct objectType * objT = findObjectType (objNum);
   13790:	|      move.l 8(sp),d0
   13794:	|      move.l d0,-(sp)
   13796:	|      jsr d9dc <findObjectType>
   1379c:	|      addq.l #4,sp
   1379e:	|      move.l d0,12(sp)
	if (! objT) return BR_ERROR;
   137a2:	|  ,-- bne.s 137a8 <builtIn_hasFlag+0x8c>
   137a4:	|  |   moveq #1,d0
   137a6:	+--|-- bra.s 137da <builtIn_hasFlag+0xbe>
	setVariable (&fun -> reg, SVT_INT, objT->flags & (1 << flagIndex));
   137a8:	|  '-> movea.l 12(sp),a0
   137ac:	|      move.w 36(a0),d0
   137b0:	|      moveq #0,d2
   137b2:	|      move.w d0,d2
   137b4:	|      move.l 4(sp),d1
   137b8:	|      moveq #1,d0
   137ba:	|      lsl.l d1,d0
   137bc:	|      move.l d2,d1
   137be:	|      and.l d0,d1
   137c0:	|      moveq #28,d0
   137c2:	|      add.l 24(sp),d0
   137c6:	|      move.l d1,-(sp)
   137c8:	|      pea 1 <_start+0x1>
   137cc:	|      move.l d0,-(sp)
   137ce:	|      jsr 155ba <setVariable>
   137d4:	|      lea 12(sp),sp
	return BR_CONTINUE;
   137d8:	|      moveq #2,d0
}
   137da:	'----> move.l (sp)+,d2
   137dc:	       lea 12(sp),sp
   137e0:	       rts

000137e2 <builtIn_snapshotGrab>:

builtIn(snapshotGrab)
{
	UNUSEDALL
	return snapshot () ? BR_CONTINUE : BR_ERROR;
   137e2:	       jsr d9ca <snapshot>
   137e8:	       tst.w d0
   137ea:	,----- beq.s 137f0 <builtIn_snapshotGrab+0xe>
   137ec:	|      moveq #2,d0
   137ee:	|  ,-- bra.s 137f2 <builtIn_snapshotGrab+0x10>
   137f0:	'--|-> moveq #1,d0
}
   137f2:	   '-> rts

000137f4 <builtIn_snapshotClear>:

builtIn(snapshotClear)
{
	UNUSEDALL
	nosnapshot ();
   137f4:	jsr d876 <nosnapshot>
	return BR_CONTINUE;
   137fa:	moveq #2,d0
}
   137fc:	rts

000137fe <builtIn_bodgeFilenames>:

builtIn(bodgeFilenames)
{
   137fe:	subq.l #4,sp
	UNUSEDALL
	BOOL lastValue = allowAnyFilename;
   13800:	move.w 1c804 <allowAnyFilename>,2(sp)
	allowAnyFilename = getBoolean(&(fun -> stack -> thisVar));
   13808:	movea.l 12(sp),a0
   1380c:	move.l 24(a0),d0
   13810:	move.l d0,-(sp)
   13812:	jsr 15208 <getBoolean>
   13818:	addq.l #4,sp
   1381a:	move.w d0,1c804 <allowAnyFilename>
	trimStack (&fun -> stack);
   13820:	moveq #24,d0
   13822:	add.l 12(sp),d0
   13826:	move.l d0,-(sp)
   13828:	jsr 1564c <trimStack>
   1382e:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, lastValue);
   13830:	movea.w 2(sp),a0
   13834:	moveq #28,d0
   13836:	add.l 12(sp),d0
   1383a:	move.l a0,-(sp)
   1383c:	pea 1 <_start+0x1>
   13840:	move.l d0,-(sp)
   13842:	jsr 155ba <setVariable>
   13848:	lea 12(sp),sp
	return BR_CONTINUE;
   1384c:	moveq #2,d0
}
   1384e:	addq.l #4,sp
   13850:	rts

00013852 <builtIn__rem_registryGetString>:

// Deprecated - does nothing.
builtIn(_rem_registryGetString)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   13852:	moveq #24,d0
   13854:	add.l 8(sp),d0
   13858:	move.l d0,-(sp)
   1385a:	jsr 1564c <trimStack>
   13860:	addq.l #4,sp
	trimStack (&fun -> stack);
   13862:	moveq #24,d0
   13864:	add.l 8(sp),d0
   13868:	move.l d0,-(sp)
   1386a:	jsr 1564c <trimStack>
   13870:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 0);
   13872:	moveq #28,d0
   13874:	add.l 8(sp),d0
   13878:	clr.l -(sp)
   1387a:	pea 1 <_start+0x1>
   1387e:	move.l d0,-(sp)
   13880:	jsr 155ba <setVariable>
   13886:	lea 12(sp),sp

	return BR_CONTINUE;
   1388a:	moveq #2,d0
}
   1388c:	rts

0001388e <builtIn_quitWithFatalError>:

builtIn(quitWithFatalError)
{
   1388e:	subq.l #4,sp
	UNUSEDALL
	char * mess = getTextFromAnyVar(&(fun -> stack -> thisVar));
   13890:	movea.l 12(sp),a0
   13894:	move.l 24(a0),d0
   13898:	move.l d0,-(sp)
   1389a:	jsr 1529e <getTextFromAnyVar>
   138a0:	addq.l #4,sp
   138a2:	move.l d0,(sp)
	trimStack (&fun -> stack);
   138a4:	moveq #24,d0
   138a6:	add.l 12(sp),d0
   138aa:	move.l d0,-(sp)
   138ac:	jsr 1564c <trimStack>
   138b2:	addq.l #4,sp
	KPrintF (mess);
   138b4:	move.l (sp),-(sp)
   138b6:	jsr 177a8 <KPrintF>
   138bc:	addq.l #4,sp
	return BR_ERROR;
   138be:	moveq #1,d0
}
   138c0:	addq.l #4,sp
   138c2:	rts

000138c4 <builtIn__rem_setCharacterAA>:

builtIn(_rem_setCharacterAA)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   138c4:	moveq #24,d0
   138c6:	add.l 8(sp),d0
   138ca:	move.l d0,-(sp)
   138cc:	jsr 1564c <trimStack>
   138d2:	addq.l #4,sp
	trimStack (&fun -> stack);
   138d4:	moveq #24,d0
   138d6:	add.l 8(sp),d0
   138da:	move.l d0,-(sp)
   138dc:	jsr 1564c <trimStack>
   138e2:	addq.l #4,sp
	trimStack (&fun -> stack);
   138e4:	moveq #24,d0
   138e6:	add.l 8(sp),d0
   138ea:	move.l d0,-(sp)
   138ec:	jsr 1564c <trimStack>
   138f2:	addq.l #4,sp
	trimStack (&fun -> stack);
   138f4:	moveq #24,d0
   138f6:	add.l 8(sp),d0
   138fa:	move.l d0,-(sp)
   138fc:	jsr 1564c <trimStack>
   13902:	addq.l #4,sp

	return BR_CONTINUE;
   13904:	moveq #2,d0
}
   13906:	rts

00013908 <builtIn__rem_setMaximumAA>:

builtIn(_rem_setMaximumAA)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   13908:	moveq #24,d0
   1390a:	add.l 8(sp),d0
   1390e:	move.l d0,-(sp)
   13910:	jsr 1564c <trimStack>
   13916:	addq.l #4,sp
	trimStack (&fun -> stack);
   13918:	moveq #24,d0
   1391a:	add.l 8(sp),d0
   1391e:	move.l d0,-(sp)
   13920:	jsr 1564c <trimStack>
   13926:	addq.l #4,sp
	trimStack (&fun -> stack);
   13928:	moveq #24,d0
   1392a:	add.l 8(sp),d0
   1392e:	move.l d0,-(sp)
   13930:	jsr 1564c <trimStack>
   13936:	addq.l #4,sp

	return BR_CONTINUE;
   13938:	moveq #2,d0

}
   1393a:	rts

0001393c <builtIn_setBackgroundEffect>:

builtIn(setBackgroundEffect)
{
   1393c:	subq.l #4,sp
	UNUSEDALL
	BOOL done = TRUE;
   1393e:	move.w #1,2(sp)
	//BOOL done = blur_createSettings(numParams, fun->stack); Amiga Todo: Amigize?
	setVariable (&fun -> reg, SVT_INT, done ? 1 : 0);
   13944:	sne d0
   13946:	neg.b d0
   13948:	moveq #0,d1
   1394a:	move.b d0,d1
   1394c:	moveq #28,d0
   1394e:	add.l 12(sp),d0
   13952:	move.l d1,-(sp)
   13954:	pea 1 <_start+0x1>
   13958:	move.l d0,-(sp)
   1395a:	jsr 155ba <setVariable>
   13960:	lea 12(sp),sp
	return BR_CONTINUE;
   13964:	moveq #2,d0
}
   13966:	addq.l #4,sp
   13968:	rts

0001396a <builtIn_doBackgroundEffect>:

builtIn(doBackgroundEffect)
{
   1396a:	subq.l #4,sp
	UNUSEDALL
	//BOOL done = blurScreen ();
	BOOL done = TRUE;
   1396c:	move.w #1,2(sp)
	KPrintF("doBackgroundEffect: Function not implemented on Amiga");
   13972:	pea 1a2f9 <PutChar+0x20af>
   13978:	jsr 177a8 <KPrintF>
   1397e:	addq.l #4,sp
	//Amiga Todo: Amigize this
	setVariable (&fun -> reg, SVT_INT, done ? 1 : 0);
   13980:	tst.w 2(sp)
   13984:	sne d0
   13986:	neg.b d0
   13988:	moveq #0,d1
   1398a:	move.b d0,d1
   1398c:	moveq #28,d0
   1398e:	add.l 12(sp),d0
   13992:	move.l d1,-(sp)
   13994:	pea 1 <_start+0x1>
   13998:	move.l d0,-(sp)
   1399a:	jsr 155ba <setVariable>
   139a0:	lea 12(sp),sp
	return BR_CONTINUE;
   139a4:	moveq #2,d0
}
   139a6:	addq.l #4,sp
   139a8:	rts

000139aa <callBuiltIn>:
#undef FUNC

#define NUM_FUNCS			(sizeof (builtInFunctionArray) / sizeof (builtInFunctionArray[0]))


enum builtReturn callBuiltIn (int whichFunc, int numParams, struct loadedFunction * fun) {
   139aa:	             lea -100(sp),sp
   // fprintf (stderr, "Calling function %d: %s\n", whichFunc, builtInFunctionNames[whichFunc]);    fflush (stderr);

	if ((unsigned int)whichFunc < NUM_FUNCS) {
   139ae:	             move.l 104(sp),d0
   139b2:	             cmpi.l #166,d0
   139b8:	,----------- bhi.w 13a9a <callBuiltIn+0xf0>
		if (paramNum[whichFunc] != -1) {
   139bc:	|            move.l 104(sp),d0
   139c0:	|            add.l d0,d0
   139c2:	|            movea.l d0,a1
   139c4:	|            adda.l d0,a1
   139c6:	|            lea 1c94a <paramNum>,a0
   139cc:	|            move.l (0,a1,a0.l),d0
   139d0:	|            moveq #-1,d1
   139d2:	|            cmp.l d0,d1
   139d4:	|  ,-------- beq.w 13a62 <callBuiltIn+0xb8>
			if (paramNum[whichFunc] != numParams) {
   139d8:	|  |         move.l 104(sp),d0
   139dc:	|  |         add.l d0,d0
   139de:	|  |         movea.l d0,a1
   139e0:	|  |         adda.l d0,a1
   139e2:	|  |         lea 1c94a <paramNum>,a0
   139e8:	|  |         move.l (0,a1,a0.l),d0
   139ec:	|  |         cmp.l 108(sp),d0
   139f0:	|  +-------- beq.s 13a62 <callBuiltIn+0xb8>
				char buff[100];
				sprintf (buff, "Built in function must have %i parameter%s",
						 paramNum[whichFunc],
						 (paramNum[whichFunc] == 1) ? "" : "s");
   139f2:	|  |         move.l 104(sp),d0
   139f6:	|  |         add.l d0,d0
   139f8:	|  |         movea.l d0,a1
   139fa:	|  |         adda.l d0,a1
   139fc:	|  |         lea 1c94a <paramNum>,a0
   13a02:	|  |         move.l (0,a1,a0.l),d0
				sprintf (buff, "Built in function must have %i parameter%s",
   13a06:	|  |         moveq #1,d1
   13a08:	|  |         cmp.l d0,d1
   13a0a:	|  |  ,----- bne.s 13a14 <callBuiltIn+0x6a>
   13a0c:	|  |  |      move.l #102231,d0
   13a12:	|  |  |  ,-- bra.s 13a1a <callBuiltIn+0x70>
   13a14:	|  |  '--|-> move.l #107311,d0
   13a1a:	|  |     '-> move.l 104(sp),d1
   13a1e:	|  |         add.l d1,d1
   13a20:	|  |         movea.l d1,a1
   13a22:	|  |         adda.l d1,a1
   13a24:	|  |         lea 1c94a <paramNum>,a0
   13a2a:	|  |         move.l (0,a1,a0.l),d1
   13a2e:	|  |         move.l d0,-(sp)
   13a30:	|  |         move.l d1,-(sp)
   13a32:	|  |         pea 1a331 <PutChar+0x20e7>
   13a38:	|  |         lea 12(sp),a0
   13a3c:	|  |         move.l a0,-(sp)
   13a3e:	|  |         jsr 144d2 <sprintf>
   13a44:	|  |         lea 16(sp),sp

				KPrintF(copyString (buff));
   13a48:	|  |         movea.l sp,a0
   13a4a:	|  |         move.l a0,-(sp)
   13a4c:	|  |         jsr b8 <copyString>
   13a52:	|  |         addq.l #4,sp
   13a54:	|  |         move.l d0,-(sp)
   13a56:	|  |         jsr 177a8 <KPrintF>
   13a5c:	|  |         addq.l #4,sp
				return BR_ERROR;
   13a5e:	|  |         moveq #1,d0
   13a60:	|  |     ,-- bra.s 13aaa <callBuiltIn+0x100>
			}
		}

		if (builtInFunctionArray[whichFunc].func)
   13a62:	|  '-----|-> move.l 104(sp),d0
   13a66:	|        |   add.l d0,d0
   13a68:	|        |   movea.l d0,a1
   13a6a:	|        |   adda.l d0,a1
   13a6c:	|        |   lea 1cbe6 <builtInFunctionArray>,a0
   13a72:	|        |   move.l (0,a1,a0.l),d0
   13a76:	+--------|-- beq.s 13a9a <callBuiltIn+0xf0>
		{
			//fprintf (stderr, "Calling %i: %s\n", whichFunc, builtInFunctionNames[whichFunc]);
			return builtInFunctionArray[whichFunc].func (numParams, fun);
   13a78:	|        |   move.l 104(sp),d0
   13a7c:	|        |   add.l d0,d0
   13a7e:	|        |   movea.l d0,a1
   13a80:	|        |   adda.l d0,a1
   13a82:	|        |   lea 1cbe6 <builtInFunctionArray>,a0
   13a88:	|        |   movea.l (0,a1,a0.l),a0
   13a8c:	|        |   move.l 112(sp),-(sp)
   13a90:	|        |   move.l 112(sp),-(sp)
   13a94:	|        |   jsr (a0)
   13a96:	|        |   addq.l #8,sp
   13a98:	|        +-- bra.s 13aaa <callBuiltIn+0x100>
		}
	}

	KPrintF("Unknown / unimplemented built-in function.");
   13a9a:	'--------|-> pea 1a35c <PutChar+0x2112>
   13aa0:	         |   jsr 177a8 <KPrintF>
   13aa6:	         |   addq.l #4,sp
	return BR_ERROR;
   13aa8:	         |   moveq #1,d0
}
   13aaa:	         '-> lea 100(sp),sp
   13aae:	             rts

00013ab0 <getLanguageForFileB>:
int *languageTable;
char **languageName;
struct settingsStruct gameSettings;

int getLanguageForFileB ()
{
   13ab0:	          subq.l #8,sp
	int indexNum = -1;
   13ab2:	          moveq #-1,d0
   13ab4:	          move.l d0,4(sp)

	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   13ab8:	          clr.l (sp)
   13aba:	   ,----- bra.s 13ae0 <getLanguageForFileB+0x30>
		if ((unsigned int) languageTable[i] == gameSettings.languageID) indexNum = i;
   13abc:	,--|----> move.l 1d086 <languageTable>,d1
   13ac2:	|  |      move.l (sp),d0
   13ac4:	|  |      add.l d0,d0
   13ac6:	|  |      add.l d0,d0
   13ac8:	|  |      movea.l d1,a0
   13aca:	|  |      adda.l d0,a0
   13acc:	|  |      move.l (a0),d0
   13ace:	|  |      move.l d0,d1
   13ad0:	|  |      move.l 1d08e <gameSettings>,d0
   13ad6:	|  |      cmp.l d1,d0
   13ad8:	|  |  ,-- bne.s 13ade <getLanguageForFileB+0x2e>
   13ada:	|  |  |   move.l (sp),4(sp)
	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   13ade:	|  |  '-> addq.l #1,(sp)
   13ae0:	|  '----> move.l 1d092 <gameSettings+0x4>,d0
   13ae6:	|         cmp.l (sp),d0
   13ae8:	'-------- bcc.s 13abc <getLanguageForFileB+0xc>
	}

	return indexNum;
   13aea:	          move.l 4(sp),d0
}
   13aee:	          addq.l #8,sp
   13af0:	          rts

00013af2 <getPrefsFilename>:

char * getPrefsFilename (char * filename) {
   13af2:	          lea -20(sp),sp
   13af6:	          move.l a6,-(sp)
	// Yes, this trashes the original string, but
	// we also free it at the end (warning!)...

	int n, i;

	n = strlen (filename);
   13af8:	          move.l 28(sp),-(sp)
   13afc:	          jsr 141b4 <strlen>
   13b02:	          addq.l #4,sp
   13b04:	          move.l d0,12(sp)


	if (n > 4 && filename[n-4] == '.') {
   13b08:	          moveq #4,d0
   13b0a:	          cmp.l 12(sp),d0
   13b0e:	      ,-- bge.s 13b32 <getPrefsFilename+0x40>
   13b10:	      |   move.l 12(sp),d0
   13b14:	      |   subq.l #4,d0
   13b16:	      |   movea.l 28(sp),a0
   13b1a:	      |   adda.l d0,a0
   13b1c:	      |   move.b (a0),d0
   13b1e:	      |   cmpi.b #46,d0
   13b22:	      +-- bne.s 13b32 <getPrefsFilename+0x40>
		filename[n-4] = 0;
   13b24:	      |   move.l 12(sp),d0
   13b28:	      |   subq.l #4,d0
   13b2a:	      |   movea.l 28(sp),a0
   13b2e:	      |   adda.l d0,a0
   13b30:	      |   clr.b (a0)
	}

	char * f = filename;
   13b32:	      '-> move.l 28(sp),16(sp)
	for (i = 0; i<n; i++) {
   13b38:	          clr.l 20(sp)
   13b3c:	   ,----- bra.s 13b64 <getPrefsFilename+0x72>
		if (filename[i] == '/') f = filename + i + 1;
   13b3e:	,--|----> move.l 20(sp),d0
   13b42:	|  |      movea.l 28(sp),a0
   13b46:	|  |      adda.l d0,a0
   13b48:	|  |      move.b (a0),d0
   13b4a:	|  |      cmpi.b #47,d0
   13b4e:	|  |  ,-- bne.s 13b60 <getPrefsFilename+0x6e>
   13b50:	|  |  |   move.l 20(sp),d0
   13b54:	|  |  |   addq.l #1,d0
   13b56:	|  |  |   move.l 28(sp),d1
   13b5a:	|  |  |   add.l d0,d1
   13b5c:	|  |  |   move.l d1,16(sp)
	for (i = 0; i<n; i++) {
   13b60:	|  |  '-> addq.l #1,20(sp)
   13b64:	|  '----> move.l 20(sp),d0
   13b68:	|         cmp.l 12(sp),d0
   13b6c:	'-------- blt.s 13b3e <getPrefsFilename+0x4c>
	}

	char * joined = joinStrings (f, ".ini");
   13b6e:	          pea 1a387 <PutChar+0x213d>
   13b74:	          move.l 20(sp),-(sp)
   13b78:	          jsr 141f4 <joinStrings>
   13b7e:	          addq.l #8,sp
   13b80:	          move.l d0,8(sp)

	FreeVec(filename);
   13b84:	          move.l 28(sp),4(sp)
   13b8a:	          move.l 1cfb6 <SysBase>,d0
   13b90:	          movea.l d0,a6
   13b92:	          movea.l 4(sp),a1
   13b96:	          jsr -690(a6)
	filename = NULL;
   13b9a:	          clr.l 28(sp)
	return joined;
   13b9e:	          move.l 8(sp),d0
}
   13ba2:	          movea.l (sp)+,a6
   13ba4:	          lea 20(sp),sp
   13ba8:	          rts

00013baa <makeLanguageTable>:

void makeLanguageTable (BPTR table)
{
   13baa:	             lea -28(sp),sp
   13bae:	             move.l a6,-(sp)
   13bb0:	             move.l a2,-(sp)
	languageTable = AllocVec(gameSettings.numLanguages + 1,MEMF_ANY);
   13bb2:	             move.l 1d092 <gameSettings+0x4>,d0
   13bb8:	             move.l d0,d1
   13bba:	             addq.l #1,d1
   13bbc:	             move.l d1,28(sp)
   13bc0:	             clr.l 24(sp)
   13bc4:	             move.l 1cfb6 <SysBase>,d0
   13bca:	             movea.l d0,a6
   13bcc:	             move.l 28(sp),d0
   13bd0:	             move.l 24(sp),d1
   13bd4:	             jsr -684(a6)
   13bd8:	             move.l d0,20(sp)
   13bdc:	             move.l 20(sp),d0
   13be0:	             move.l d0,1d086 <languageTable>
    if( languageTable == 0) {
   13be6:	             move.l 1d086 <languageTable>,d0
   13bec:	         ,-- bne.s 13bfc <makeLanguageTable+0x52>
        KPrintF("makeLanguageTable: Cannot Alloc Mem for languageTable");
   13bee:	         |   pea 1a38c <PutChar+0x2142>
   13bf4:	         |   jsr 177a8 <KPrintF>
   13bfa:	         |   addq.l #4,sp
    }

	languageName = AllocVec(gameSettings.numLanguages + 1,MEMF_ANY);
   13bfc:	         '-> move.l 1d092 <gameSettings+0x4>,d0
   13c02:	             move.l d0,d1
   13c04:	             addq.l #1,d1
   13c06:	             move.l d1,16(sp)
   13c0a:	             clr.l 12(sp)
   13c0e:	             move.l 1cfb6 <SysBase>,d0
   13c14:	             movea.l d0,a6
   13c16:	             move.l 16(sp),d0
   13c1a:	             move.l 12(sp),d1
   13c1e:	             jsr -684(a6)
   13c22:	             move.l d0,8(sp)
   13c26:	             move.l 8(sp),d0
   13c2a:	             move.l d0,1d08a <languageName>
	if( languageName == 0) {
   13c30:	             move.l 1d08a <languageName>,d0
   13c36:	         ,-- bne.s 13c46 <makeLanguageTable+0x9c>
        KPrintF("makeLanguageName: Cannot Alloc Mem for languageName");
   13c38:	         |   pea 1a3c2 <PutChar+0x2178>
   13c3e:	         |   jsr 177a8 <KPrintF>
   13c44:	         |   addq.l #4,sp
    }

	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   13c46:	         '-> clr.l 32(sp)
   13c4a:	   ,-------- bra.s 13cc2 <makeLanguageTable+0x118>
		languageTable[i] = i ? get2bytes (table) : 0;
   13c4c:	,--|-------> tst.l 32(sp)
   13c50:	|  |  ,----- beq.s 13c60 <makeLanguageTable+0xb6>
   13c52:	|  |  |      move.l 40(sp),-(sp)
   13c56:	|  |  |      jsr 6bc <get2bytes>
   13c5c:	|  |  |      addq.l #4,sp
   13c5e:	|  |  |  ,-- bra.s 13c62 <makeLanguageTable+0xb8>
   13c60:	|  |  '--|-> moveq #0,d0
   13c62:	|  |     '-> movea.l 1d086 <languageTable>,a0
   13c68:	|  |         move.l 32(sp),d1
   13c6c:	|  |         add.l d1,d1
   13c6e:	|  |         add.l d1,d1
   13c70:	|  |         adda.l d1,a0
   13c72:	|  |         move.l d0,(a0)
		languageName[i] = 0;
   13c74:	|  |         move.l 1d08a <languageName>,d1
   13c7a:	|  |         move.l 32(sp),d0
   13c7e:	|  |         add.l d0,d0
   13c80:	|  |         add.l d0,d0
   13c82:	|  |         movea.l d1,a0
   13c84:	|  |         adda.l d0,a0
   13c86:	|  |         clr.l (a0)
		if (gameVersion >= VERSION(2,0)) {
   13c88:	|  |         move.l 1cf5c <gameVersion>,d0
   13c8e:	|  |         cmpi.l #511,d0
   13c94:	|  |     ,-- ble.s 13cbe <makeLanguageTable+0x114>
			if (gameSettings.numLanguages)
   13c96:	|  |     |   move.l 1d092 <gameSettings+0x4>,d0
   13c9c:	|  |     +-- beq.s 13cbe <makeLanguageTable+0x114>
				languageName[i] = readString (table);
   13c9e:	|  |     |   move.l 1d08a <languageName>,d1
   13ca4:	|  |     |   move.l 32(sp),d0
   13ca8:	|  |     |   add.l d0,d0
   13caa:	|  |     |   add.l d0,d0
   13cac:	|  |     |   movea.l d1,a2
   13cae:	|  |     |   adda.l d0,a2
   13cb0:	|  |     |   move.l 40(sp),-(sp)
   13cb4:	|  |     |   jsr b02 <readString>
   13cba:	|  |     |   addq.l #4,sp
   13cbc:	|  |     |   move.l d0,(a2)
	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   13cbe:	|  |     '-> addq.l #1,32(sp)
   13cc2:	|  '-------> move.l 1d092 <gameSettings+0x4>,d0
   13cc8:	|            cmp.l 32(sp),d0
   13ccc:	'----------- bcc.w 13c4c <makeLanguageTable+0xa2>
		}
	}
}
   13cd0:	             nop
   13cd2:	             nop
   13cd4:	             movea.l (sp)+,a2
   13cd6:	             movea.l (sp)+,a6
   13cd8:	             lea 28(sp),sp
   13cdc:	             rts

00013cde <readIniFile>:

void readIniFile (char * filename) {
   13cde:	                      lea -564(sp),sp
   13ce2:	                      move.l a6,-(sp)
   13ce4:	                      move.l d2,-(sp)
	char * langName = getPrefsFilename (copyString (filename));
   13ce6:	                      move.l 576(sp),-(sp)
   13cea:	                      jsr b8 <copyString>
   13cf0:	                      addq.l #4,sp
   13cf2:	                      move.l d0,-(sp)
   13cf4:	                      jsr 13af2 <getPrefsFilename>
   13cfa:	                      addq.l #4,sp
   13cfc:	                      move.l d0,562(sp)

	BPTR fp = Open(langName,MODE_OLDFILE);	
   13d00:	                      move.l 562(sp),558(sp)
   13d06:	                      move.l #1005,554(sp)
   13d0e:	                      move.l 1cfbe <DOSBase>,d0
   13d14:	                      movea.l d0,a6
   13d16:	                      move.l 558(sp),d1
   13d1a:	                      move.l 554(sp),d2
   13d1e:	                      jsr -30(a6)
   13d22:	                      move.l d0,550(sp)
   13d26:	                      move.l 550(sp),d0
   13d2a:	                      move.l d0,546(sp)

	gameSettings.languageID = 0;
   13d2e:	                      clr.l 1d08e <gameSettings>
	gameSettings.userFullScreen = TRUE; //Always fullscreen on AMIGA
   13d34:	                      move.w #1,1d096 <gameSettings+0x8>
	gameSettings.refreshRate = 0;
   13d3c:	                      clr.l 1d098 <gameSettings+0xa>
	gameSettings.antiAlias = 1;
   13d42:	                      moveq #1,d0
   13d44:	                      move.l d0,1d09c <gameSettings+0xe>
	gameSettings.fixedPixels = FALSE;
   13d4a:	                      clr.w 1d0a0 <gameSettings+0x12>
	gameSettings.noStartWindow = FALSE;
   13d50:	                      clr.w 1d0a2 <gameSettings+0x14>
	gameSettings.debugMode = FALSE;
   13d56:	                      clr.w 1d0a4 <gameSettings+0x16>

	FreeVec(langName);
   13d5c:	                      move.l 562(sp),542(sp)
   13d62:	                      move.l 1cfb6 <SysBase>,d0
   13d68:	                      movea.l d0,a6
   13d6a:	                      movea.l 542(sp),a1
   13d6e:	                      jsr -690(a6)
	langName = NULL;
   13d72:	                      clr.l 562(sp)

	if (fp) {
   13d76:	                      tst.l 546(sp)
   13d7a:	,-------------------- beq.w 14058 <readIniFile+0x37a>
		char lineSoFar[257] = "";
   13d7e:	|                     move.l sp,d0
   13d80:	|                     addi.l #265,d0
   13d86:	|                     move.l #257,d1
   13d8c:	|                     move.l d1,-(sp)
   13d8e:	|                     clr.l -(sp)
   13d90:	|                     move.l d0,-(sp)
   13d92:	|                     jsr 1772c <memset>
   13d98:	|                     lea 12(sp),sp
		char secondSoFar[257] = "";
   13d9c:	|                     move.l sp,d0
   13d9e:	|                     addq.l #8,d0
   13da0:	|                     move.l #257,d1
   13da6:	|                     move.l d1,-(sp)
   13da8:	|                     clr.l -(sp)
   13daa:	|                     move.l d0,-(sp)
   13dac:	|                     jsr 1772c <memset>
   13db2:	|                     lea 12(sp),sp
		unsigned char here = 0;
   13db6:	|                     clr.b 571(sp)
		char readChar = ' ';
   13dba:	|                     move.b #32,570(sp)
		BOOL keepGoing = TRUE;
   13dc0:	|                     move.w #1,568(sp)
		BOOL doingSecond = FALSE;
   13dc6:	|                     clr.w 566(sp)
		LONG tmp = 0;
   13dca:	|                     clr.l 538(sp)

		do {

			tmp = FGetC (fp);
   13dce:	|  ,----------------> move.l 546(sp),534(sp)
   13dd4:	|  |                  move.l 1cfbe <DOSBase>,d0
   13dda:	|  |                  movea.l d0,a6
   13ddc:	|  |                  move.l 534(sp),d1
   13de0:	|  |                  jsr -306(a6)
   13de4:	|  |                  move.l d0,530(sp)
   13de8:	|  |                  move.l 530(sp),d0
   13dec:	|  |                  move.l d0,538(sp)
			if (tmp == - 1) {
   13df0:	|  |                  moveq #-1,d1
   13df2:	|  |                  cmp.l 538(sp),d1
   13df6:	|  |           ,----- bne.s 13e04 <readIniFile+0x126>
				readChar = '\n';
   13df8:	|  |           |      move.b #10,570(sp)
				keepGoing = FALSE;
   13dfe:	|  |           |      clr.w 568(sp)
   13e02:	|  |           |  ,-- bra.s 13e0a <readIniFile+0x12c>
			} else {
				readChar = (char) tmp;
   13e04:	|  |           '--|-> move.b 541(sp),570(sp)
			}

			switch (readChar) {
   13e0a:	|  |              '-> move.b 570(sp),d0
   13e0e:	|  |                  ext.w d0
   13e10:	|  |                  movea.w d0,a0
   13e12:	|  |                  moveq #61,d0
   13e14:	|  |                  cmp.l a0,d0
   13e16:	|  |     ,----------- beq.w 13fc0 <readIniFile+0x2e2>
   13e1a:	|  |     |            moveq #61,d1
   13e1c:	|  |     |            cmp.l a0,d1
   13e1e:	|  |  ,--|----------- blt.w 13fcc <readIniFile+0x2ee>
   13e22:	|  |  |  |            moveq #10,d0
   13e24:	|  |  |  |            cmp.l a0,d0
   13e26:	|  |  |  |        ,-- beq.s 13e30 <readIniFile+0x152>
   13e28:	|  |  |  |        |   moveq #13,d1
   13e2a:	|  |  |  |        |   cmp.l a0,d1
   13e2c:	|  |  +--|--------|-- bne.w 13fcc <readIniFile+0x2ee>
				case '\n':
				case '\r':
				if (doingSecond) {
   13e30:	|  |  |  |        '-> tst.w 566(sp)
   13e34:	|  |  |  |     ,----- beq.w 13fae <readIniFile+0x2d0>
					if (strcmp (lineSoFar, "LANGUAGE") == 0)
   13e38:	|  |  |  |     |      pea 1a3f6 <PutChar+0x21ac>
   13e3e:	|  |  |  |     |      move.l sp,d0
   13e40:	|  |  |  |     |      addi.l #269,d0
   13e46:	|  |  |  |     |      move.l d0,-(sp)
   13e48:	|  |  |  |     |      jsr 14174 <strcmp>
   13e4e:	|  |  |  |     |      addq.l #8,sp
   13e50:	|  |  |  |     |      tst.l d0
   13e52:	|  |  |  |     |  ,-- bne.s 13e6c <readIniFile+0x18e>
					{
						gameSettings.languageID = stringToInt (secondSoFar);
   13e54:	|  |  |  |     |  |   move.l sp,d0
   13e56:	|  |  |  |     |  |   addq.l #8,d0
   13e58:	|  |  |  |     |  |   move.l d0,-(sp)
   13e5a:	|  |  |  |     |  |   jsr 14064 <stringToInt>
   13e60:	|  |  |  |     |  |   addq.l #4,sp
   13e62:	|  |  |  |     |  |   move.l d0,1d08e <gameSettings>
   13e68:	|  |  |  |     +--|-- bra.w 13fae <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "WINDOW") == 0)
   13e6c:	|  |  |  |     |  '-> pea 1a3ff <PutChar+0x21b5>
   13e72:	|  |  |  |     |      move.l sp,d0
   13e74:	|  |  |  |     |      addi.l #269,d0
   13e7a:	|  |  |  |     |      move.l d0,-(sp)
   13e7c:	|  |  |  |     |      jsr 14174 <strcmp>
   13e82:	|  |  |  |     |      addq.l #8,sp
   13e84:	|  |  |  |     |      tst.l d0
   13e86:	|  |  |  |     |  ,-- bne.s 13eac <readIniFile+0x1ce>
					{
						gameSettings.userFullScreen = ! stringToInt (secondSoFar);
   13e88:	|  |  |  |     |  |   move.l sp,d0
   13e8a:	|  |  |  |     |  |   addq.l #8,d0
   13e8c:	|  |  |  |     |  |   move.l d0,-(sp)
   13e8e:	|  |  |  |     |  |   jsr 14064 <stringToInt>
   13e94:	|  |  |  |     |  |   addq.l #4,sp
   13e96:	|  |  |  |     |  |   tst.l d0
   13e98:	|  |  |  |     |  |   seq d0
   13e9a:	|  |  |  |     |  |   neg.b d0
   13e9c:	|  |  |  |     |  |   move.b d0,d0
   13e9e:	|  |  |  |     |  |   andi.w #255,d0
   13ea2:	|  |  |  |     |  |   move.w d0,1d096 <gameSettings+0x8>
   13ea8:	|  |  |  |     +--|-- bra.w 13fae <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "REFRESH") == 0)
   13eac:	|  |  |  |     |  '-> pea 1a406 <PutChar+0x21bc>
   13eb2:	|  |  |  |     |      move.l sp,d0
   13eb4:	|  |  |  |     |      addi.l #269,d0
   13eba:	|  |  |  |     |      move.l d0,-(sp)
   13ebc:	|  |  |  |     |      jsr 14174 <strcmp>
   13ec2:	|  |  |  |     |      addq.l #8,sp
   13ec4:	|  |  |  |     |      tst.l d0
   13ec6:	|  |  |  |     |  ,-- bne.s 13ee0 <readIniFile+0x202>
					{
						gameSettings.refreshRate = stringToInt (secondSoFar);
   13ec8:	|  |  |  |     |  |   move.l sp,d0
   13eca:	|  |  |  |     |  |   addq.l #8,d0
   13ecc:	|  |  |  |     |  |   move.l d0,-(sp)
   13ece:	|  |  |  |     |  |   jsr 14064 <stringToInt>
   13ed4:	|  |  |  |     |  |   addq.l #4,sp
   13ed6:	|  |  |  |     |  |   move.l d0,1d098 <gameSettings+0xa>
   13edc:	|  |  |  |     +--|-- bra.w 13fae <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "ANTIALIAS") == 0)
   13ee0:	|  |  |  |     |  '-> pea 1a40e <PutChar+0x21c4>
   13ee6:	|  |  |  |     |      move.l sp,d0
   13ee8:	|  |  |  |     |      addi.l #269,d0
   13eee:	|  |  |  |     |      move.l d0,-(sp)
   13ef0:	|  |  |  |     |      jsr 14174 <strcmp>
   13ef6:	|  |  |  |     |      addq.l #8,sp
   13ef8:	|  |  |  |     |      tst.l d0
   13efa:	|  |  |  |     |  ,-- bne.s 13f14 <readIniFile+0x236>
					{
						gameSettings.antiAlias = stringToInt (secondSoFar);
   13efc:	|  |  |  |     |  |   move.l sp,d0
   13efe:	|  |  |  |     |  |   addq.l #8,d0
   13f00:	|  |  |  |     |  |   move.l d0,-(sp)
   13f02:	|  |  |  |     |  |   jsr 14064 <stringToInt>
   13f08:	|  |  |  |     |  |   addq.l #4,sp
   13f0a:	|  |  |  |     |  |   move.l d0,1d09c <gameSettings+0xe>
   13f10:	|  |  |  |     +--|-- bra.w 13fae <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "FIXEDPIXELS") == 0)
   13f14:	|  |  |  |     |  '-> pea 1a418 <PutChar+0x21ce>
   13f1a:	|  |  |  |     |      move.l sp,d0
   13f1c:	|  |  |  |     |      addi.l #269,d0
   13f22:	|  |  |  |     |      move.l d0,-(sp)
   13f24:	|  |  |  |     |      jsr 14174 <strcmp>
   13f2a:	|  |  |  |     |      addq.l #8,sp
   13f2c:	|  |  |  |     |      tst.l d0
   13f2e:	|  |  |  |     |  ,-- bne.s 13f48 <readIniFile+0x26a>
					{
						gameSettings.fixedPixels = stringToInt (secondSoFar);
   13f30:	|  |  |  |     |  |   move.l sp,d0
   13f32:	|  |  |  |     |  |   addq.l #8,d0
   13f34:	|  |  |  |     |  |   move.l d0,-(sp)
   13f36:	|  |  |  |     |  |   jsr 14064 <stringToInt>
   13f3c:	|  |  |  |     |  |   addq.l #4,sp
   13f3e:	|  |  |  |     |  |   move.l d0,d0
   13f40:	|  |  |  |     |  |   move.w d0,1d0a0 <gameSettings+0x12>
   13f46:	|  |  |  |     +--|-- bra.s 13fae <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "NOSTARTWINDOW") == 0)
   13f48:	|  |  |  |     |  '-> pea 1a424 <PutChar+0x21da>
   13f4e:	|  |  |  |     |      move.l sp,d0
   13f50:	|  |  |  |     |      addi.l #269,d0
   13f56:	|  |  |  |     |      move.l d0,-(sp)
   13f58:	|  |  |  |     |      jsr 14174 <strcmp>
   13f5e:	|  |  |  |     |      addq.l #8,sp
   13f60:	|  |  |  |     |      tst.l d0
   13f62:	|  |  |  |     |  ,-- bne.s 13f7c <readIniFile+0x29e>
					{
						gameSettings.noStartWindow = stringToInt (secondSoFar);
   13f64:	|  |  |  |     |  |   move.l sp,d0
   13f66:	|  |  |  |     |  |   addq.l #8,d0
   13f68:	|  |  |  |     |  |   move.l d0,-(sp)
   13f6a:	|  |  |  |     |  |   jsr 14064 <stringToInt>
   13f70:	|  |  |  |     |  |   addq.l #4,sp
   13f72:	|  |  |  |     |  |   move.l d0,d0
   13f74:	|  |  |  |     |  |   move.w d0,1d0a2 <gameSettings+0x14>
   13f7a:	|  |  |  |     +--|-- bra.s 13fae <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "DEBUGMODE") == 0)
   13f7c:	|  |  |  |     |  '-> pea 1a432 <PutChar+0x21e8>
   13f82:	|  |  |  |     |      move.l sp,d0
   13f84:	|  |  |  |     |      addi.l #269,d0
   13f8a:	|  |  |  |     |      move.l d0,-(sp)
   13f8c:	|  |  |  |     |      jsr 14174 <strcmp>
   13f92:	|  |  |  |     |      addq.l #8,sp
   13f94:	|  |  |  |     |      tst.l d0
   13f96:	|  |  |  |     +----- bne.s 13fae <readIniFile+0x2d0>
					{
						gameSettings.debugMode = stringToInt (secondSoFar);
   13f98:	|  |  |  |     |      move.l sp,d0
   13f9a:	|  |  |  |     |      addq.l #8,d0
   13f9c:	|  |  |  |     |      move.l d0,-(sp)
   13f9e:	|  |  |  |     |      jsr 14064 <stringToInt>
   13fa4:	|  |  |  |     |      addq.l #4,sp
   13fa6:	|  |  |  |     |      move.l d0,d0
   13fa8:	|  |  |  |     |      move.w d0,1d0a4 <gameSettings+0x16>
					}
				}
				here = 0;
   13fae:	|  |  |  |     '----> clr.b 571(sp)
				doingSecond = FALSE;
   13fb2:	|  |  |  |            clr.w 566(sp)
				lineSoFar[0] = 0;
   13fb6:	|  |  |  |            clr.b 265(sp)
				secondSoFar[0] = 0;
   13fba:	|  |  |  |            clr.b 8(sp)
				break;
   13fbe:	|  |  |  |  ,-------- bra.s 14036 <readIniFile+0x358>

				case '=':
				doingSecond = TRUE;
   13fc0:	|  |  |  '--|-------> move.w #1,566(sp)
				here = 0;
   13fc6:	|  |  |     |         clr.b 571(sp)
				break;
   13fca:	|  |  |     +-------- bra.s 14036 <readIniFile+0x358>

				default:
				if (doingSecond) {
   13fcc:	|  |  '-----|-------> tst.w 566(sp)
   13fd0:	|  |        |  ,----- beq.s 14004 <readIniFile+0x326>
					secondSoFar[here ++] = readChar;
   13fd2:	|  |        |  |      move.b 571(sp),d0
   13fd6:	|  |        |  |      move.b d0,d1
   13fd8:	|  |        |  |      addq.b #1,d1
   13fda:	|  |        |  |      move.b d1,571(sp)
   13fde:	|  |        |  |      move.b d0,d0
   13fe0:	|  |        |  |      andi.l #255,d0
   13fe6:	|  |        |  |      lea 572(sp),a0
   13fea:	|  |        |  |      adda.l d0,a0
   13fec:	|  |        |  |      move.b 570(sp),-564(a0)
					secondSoFar[here] = 0;
   13ff2:	|  |        |  |      moveq #0,d0
   13ff4:	|  |        |  |      move.b 571(sp),d0
   13ff8:	|  |        |  |      lea 572(sp),a0
   13ffc:	|  |        |  |      adda.l d0,a0
   13ffe:	|  |        |  |      clr.b -564(a0)
				} else {
					lineSoFar[here ++] = readChar;
					lineSoFar[here] = 0;
				}
				break;
   14002:	|  |        |  |  ,-- bra.s 14034 <readIniFile+0x356>
					lineSoFar[here ++] = readChar;
   14004:	|  |        |  '--|-> move.b 571(sp),d0
   14008:	|  |        |     |   move.b d0,d1
   1400a:	|  |        |     |   addq.b #1,d1
   1400c:	|  |        |     |   move.b d1,571(sp)
   14010:	|  |        |     |   move.b d0,d0
   14012:	|  |        |     |   andi.l #255,d0
   14018:	|  |        |     |   lea 572(sp),a0
   1401c:	|  |        |     |   adda.l d0,a0
   1401e:	|  |        |     |   move.b 570(sp),-307(a0)
					lineSoFar[here] = 0;
   14024:	|  |        |     |   moveq #0,d0
   14026:	|  |        |     |   move.b 571(sp),d0
   1402a:	|  |        |     |   lea 572(sp),a0
   1402e:	|  |        |     |   adda.l d0,a0
   14030:	|  |        |     |   clr.b -307(a0)
				break;
   14034:	|  |        |     '-> nop
			}
		} while (keepGoing);
   14036:	|  |        '-------> tst.w 568(sp)
   1403a:	|  '----------------- bne.w 13dce <readIniFile+0xf0>

		Close(fp);
   1403e:	|                     move.l 546(sp),526(sp)
   14044:	|                     move.l 1cfbe <DOSBase>,d0
   1404a:	|                     movea.l d0,a6
   1404c:	|                     move.l 526(sp),d1
   14050:	|                     jsr -36(a6)
   14054:	|                     move.l d0,522(sp)
	}
}
   14058:	'-------------------> nop
   1405a:	                      move.l (sp)+,d2
   1405c:	                      movea.l (sp)+,a6
   1405e:	                      lea 564(sp),sp
   14062:	                      rts

00014064 <stringToInt>:

unsigned int stringToInt (char * s) {
   14064:	             subq.l #8,sp
	int i = 0;
   14066:	             clr.l 4(sp)
	BOOL negative = FALSE;
   1406a:	             clr.w 2(sp)
	for (;;) {
		if (*s >= '0' && *s <= '9') {
   1406e:	,----------> movea.l 12(sp),a0
   14072:	|            move.b (a0),d0
   14074:	|            cmpi.b #47,d0
   14078:	|        ,-- ble.s 140b0 <stringToInt+0x4c>
   1407a:	|        |   movea.l 12(sp),a0
   1407e:	|        |   move.b (a0),d0
   14080:	|        |   cmpi.b #57,d0
   14084:	|        +-- bgt.s 140b0 <stringToInt+0x4c>
			i *= 10;
   14086:	|        |   move.l 4(sp),d1
   1408a:	|        |   move.l d1,d0
   1408c:	|        |   add.l d0,d0
   1408e:	|        |   add.l d0,d0
   14090:	|        |   add.l d1,d0
   14092:	|        |   add.l d0,d0
   14094:	|        |   move.l d0,4(sp)
			i += *s - '0';
   14098:	|        |   movea.l 12(sp),a0
   1409c:	|        |   move.b (a0),d0
   1409e:	|        |   ext.w d0
   140a0:	|        |   movea.w d0,a0
   140a2:	|        |   moveq #-48,d0
   140a4:	|        |   add.l a0,d0
   140a6:	|        |   add.l d0,4(sp)
			s ++;
   140aa:	|        |   addq.l #1,12(sp)
   140ae:	|  ,-----|-- bra.s 140e8 <stringToInt+0x84>
		} else if (*s == '-') {
   140b0:	|  |     '-> movea.l 12(sp),a0
   140b4:	|  |         move.b (a0),d0
   140b6:	|  |         cmpi.b #45,d0
   140ba:	|  |     ,-- bne.s 140d4 <stringToInt+0x70>
			negative = ! negative;
   140bc:	|  |     |   tst.w 2(sp)
   140c0:	|  |     |   seq d0
   140c2:	|  |     |   neg.b d0
   140c4:	|  |     |   move.b d0,d0
   140c6:	|  |     |   andi.w #255,d0
   140ca:	|  |     |   move.w d0,2(sp)
			s++;
   140ce:	|  |     |   addq.l #1,12(sp)
   140d2:	+--|-----|-- bra.s 1406e <stringToInt+0xa>
		} else {
			if (negative)
   140d4:	|  |     '-> tst.w 2(sp)
   140d8:	|  |     ,-- beq.s 140e2 <stringToInt+0x7e>
				return -i;
   140da:	|  |     |   move.l 4(sp),d0
   140de:	|  |     |   neg.l d0
   140e0:	|  |  ,--|-- bra.s 140ea <stringToInt+0x86>
			return i;
   140e2:	|  |  |  '-> move.l 4(sp),d0
   140e6:	|  |  +----- bra.s 140ea <stringToInt+0x86>
		if (*s >= '0' && *s <= '9') {
   140e8:	'--'--|----X bra.s 1406e <stringToInt+0xa>
		}
	}
   140ea:	      '----> addq.l #8,sp
   140ec:	             rts

000140ee <fileExists>:
 */
#include <proto/dos.h>
#include "helpers.h"
#include "support/gcc8_c_support.h"

BYTE fileExists(const char * file) {
   140ee:	    lea -28(sp),sp
   140f2:	    move.l a6,-(sp)
   140f4:	    move.l d2,-(sp)
	KPrintF("fileexists: Checking File");
   140f6:	    pea 1a43c <PutChar+0x21f2>
   140fc:	    jsr 177a8 <KPrintF>
   14102:	    addq.l #4,sp
	BPTR tester;
	BYTE retval = 0;
   14104:	    clr.b 35(sp)
	tester = Open(file, MODE_OLDFILE);
   14108:	    move.l 40(sp),30(sp)
   1410e:	    move.l #1005,26(sp)
   14116:	    move.l 1cfbe <DOSBase>,d0
   1411c:	    movea.l d0,a6
   1411e:	    move.l 30(sp),d1
   14122:	    move.l 26(sp),d2
   14126:	    jsr -30(a6)
   1412a:	    move.l d0,22(sp)
   1412e:	    move.l 22(sp),d0
   14132:	    move.l d0,18(sp)
	if (tester) {
   14136:	,-- beq.s 14166 <fileExists+0x78>
		KPrintF("fileexists: File exists");
   14138:	|   pea 1a456 <PutChar+0x220c>
   1413e:	|   jsr 177a8 <KPrintF>
   14144:	|   addq.l #4,sp
		retval = 1;
   14146:	|   move.b #1,35(sp)
		Close(tester);
   1414c:	|   move.l 18(sp),14(sp)
   14152:	|   move.l 1cfbe <DOSBase>,d0
   14158:	|   movea.l d0,a6
   1415a:	|   move.l 14(sp),d1
   1415e:	|   jsr -36(a6)
   14162:	|   move.l d0,10(sp)
	}
	return retval;
   14166:	'-> move.b 35(sp),d0
   1416a:	    move.l (sp)+,d2
   1416c:	    movea.l (sp)+,a6
   1416e:	    lea 28(sp),sp
   14172:	    rts

00014174 <strcmp>:
#endif


int strcmp(const char* s1, const char* s2)
{
    while(*s1 && (*s1 == *s2))
   14174:	   ,-- bra.s 1417e <strcmp+0xa>
    {
        s1++;
   14176:	,--|-> addq.l #1,4(sp)
        s2++;
   1417a:	|  |   addq.l #1,8(sp)
    while(*s1 && (*s1 == *s2))
   1417e:	|  '-> movea.l 4(sp),a0
   14182:	|      move.b (a0),d0
   14184:	|  ,-- beq.s 14196 <strcmp+0x22>
   14186:	|  |   movea.l 4(sp),a0
   1418a:	|  |   move.b (a0),d1
   1418c:	|  |   movea.l 8(sp),a0
   14190:	|  |   move.b (a0),d0
   14192:	|  |   cmp.b d1,d0
   14194:	'--|-- beq.s 14176 <strcmp+0x2>
    }
    return *(const unsigned char*)s1 - *(const unsigned char*)s2;
   14196:	   '-> movea.l 4(sp),a0
   1419a:	       move.b (a0),d0
   1419c:	       moveq #0,d1
   1419e:	       move.b d0,d1
   141a0:	       movea.l 8(sp),a0
   141a4:	       move.b (a0),d0
   141a6:	       move.b d0,d0
   141a8:	       andi.l #255,d0
   141ae:	       sub.l d0,d1
   141b0:	       move.l d1,d0
}
   141b2:	       rts

000141b4 <strlen>:

long unsigned int strlen (const char *s) 
{  
   141b4:	       subq.l #4,sp
	long unsigned int i = 0;
   141b6:	       clr.l (sp)
	while(s[i]) i++; 
   141b8:	   ,-- bra.s 141bc <strlen+0x8>
   141ba:	,--|-> addq.l #1,(sp)
   141bc:	|  '-> movea.l 8(sp),a0
   141c0:	|      adda.l (sp),a0
   141c2:	|      move.b (a0),d0
   141c4:	'----- bne.s 141ba <strlen+0x6>
	return(i);
   141c6:	       move.l (sp),d0
}
   141c8:	       addq.l #4,sp
   141ca:	       rts

000141cc <strcpy>:

char *strcpy(char *t, const char *s) 
{
	while(*t++ = *s++);
   141cc:	    nop
   141ce:	,-> move.l 8(sp),d0
   141d2:	|   move.l d0,d1
   141d4:	|   addq.l #1,d1
   141d6:	|   move.l d1,8(sp)
   141da:	|   movea.l 4(sp),a0
   141de:	|   lea 1(a0),a1
   141e2:	|   move.l a1,4(sp)
   141e6:	|   movea.l d0,a1
   141e8:	|   move.b (a1),d0
   141ea:	|   move.b d0,(a0)
   141ec:	|   move.b (a0),d0
   141ee:	'-- bne.s 141ce <strcpy+0x2>
}
   141f0:	    nop
   141f2:	    rts

000141f4 <joinStrings>:

char * joinStrings (const char * s1, const char * s2) {
   141f4:	    lea -20(sp),sp
   141f8:	    move.l a6,-(sp)
   141fa:	    move.l d2,-(sp)
	char * newString = AllocVec(strlen (s1) + strlen (s2) + 1, MEMF_ANY); 
   141fc:	    move.l 32(sp),-(sp)
   14200:	    jsr 141b4 <strlen>
   14206:	    addq.l #4,sp
   14208:	    move.l d0,d2
   1420a:	    move.l 36(sp),-(sp)
   1420e:	    jsr 141b4 <strlen>
   14214:	    addq.l #4,sp
   14216:	    add.l d2,d0
   14218:	    move.l d0,d1
   1421a:	    addq.l #1,d1
   1421c:	    move.l d1,20(sp)
   14220:	    clr.l 16(sp)
   14224:	    move.l 1cfb6 <SysBase>,d0
   1422a:	    movea.l d0,a6
   1422c:	    move.l 20(sp),d0
   14230:	    move.l 16(sp),d1
   14234:	    jsr -684(a6)
   14238:	    move.l d0,12(sp)
   1423c:	    move.l 12(sp),d0
   14240:	    move.l d0,8(sp)
	char * t = newString;
   14244:	    move.l 8(sp),24(sp)

	while(*t++ = *s1++);
   1424a:	    nop
   1424c:	,-> move.l 32(sp),d0
   14250:	|   move.l d0,d1
   14252:	|   addq.l #1,d1
   14254:	|   move.l d1,32(sp)
   14258:	|   movea.l 24(sp),a0
   1425c:	|   lea 1(a0),a1
   14260:	|   move.l a1,24(sp)
   14264:	|   movea.l d0,a1
   14266:	|   move.b (a1),d0
   14268:	|   move.b d0,(a0)
   1426a:	|   move.b (a0),d0
   1426c:	'-- bne.s 1424c <joinStrings+0x58>
	t--;
   1426e:	    subq.l #1,24(sp)
	while(*t++ = *s2++);
   14272:	    nop
   14274:	,-> move.l 36(sp),d0
   14278:	|   move.l d0,d1
   1427a:	|   addq.l #1,d1
   1427c:	|   move.l d1,36(sp)
   14280:	|   movea.l 24(sp),a0
   14284:	|   lea 1(a0),a1
   14288:	|   move.l a1,24(sp)
   1428c:	|   movea.l d0,a1
   1428e:	|   move.b (a1),d0
   14290:	|   move.b d0,(a0)
   14292:	|   move.b (a0),d0
   14294:	'-- bne.s 14274 <joinStrings+0x80>

	return newString;
   14296:	    move.l 8(sp),d0
}
   1429a:	    move.l (sp)+,d2
   1429c:	    movea.l (sp)+,a6
   1429e:	    lea 20(sp),sp
   142a2:	    rts

000142a4 <itoa>:

#define va_start(ap, last) (ap = (va_list)&last + sizeof(last))
#define va_arg(ap, type) (*(type*)(ap += sizeof(type)) - 1)
#define va_end(ap) (ap = (va_list)0)

char* itoa(int value, char* str, int base) {
   142a4:	       lea -16(sp),sp
    char* rc;
    char* ptr;
    char* low;
    // Set '-' for negative decimals.
    if (base == 10 && value < 0) {
   142a8:	       moveq #10,d0
   142aa:	       cmp.l 28(sp),d0
   142ae:	   ,-- bne.s 142cc <itoa+0x28>
   142b0:	   |   tst.l 20(sp)
   142b4:	   +-- bge.s 142cc <itoa+0x28>
        *str++ = '-';
   142b6:	   |   move.l 24(sp),d0
   142ba:	   |   move.l d0,d1
   142bc:	   |   addq.l #1,d1
   142be:	   |   move.l d1,24(sp)
   142c2:	   |   movea.l d0,a0
   142c4:	   |   move.b #45,(a0)
        value *= -1;
   142c8:	   |   neg.l 20(sp)
    }
    rc = ptr = str;
   142cc:	   '-> move.l 24(sp),12(sp)
   142d2:	       move.l 12(sp),4(sp)
    // Set pointer to last digit's place.
    do {
        *ptr++ = "0123456789abcdef"[value % base];
   142d8:	   ,-> move.l 20(sp),d0
   142dc:	   |   move.l 28(sp),-(sp)
   142e0:	   |   move.l d0,-(sp)
   142e2:	   |   jsr 181e0 <__modsi3>
   142e8:	   |   addq.l #8,sp
   142ea:	   |   movea.l d0,a1
   142ec:	   |   move.l 12(sp),d0
   142f0:	   |   move.l d0,d1
   142f2:	   |   addq.l #1,d1
   142f4:	   |   move.l d1,12(sp)
   142f8:	   |   lea 1a46e <PutChar+0x2224>,a0
   142fe:	   |   move.b (0,a1,a0.l),d1
   14302:	   |   movea.l d0,a0
   14304:	   |   move.b d1,(a0)
        value /= base;
   14306:	   |   move.l 28(sp),-(sp)
   1430a:	   |   move.l 24(sp),-(sp)
   1430e:	   |   jsr 181b2 <__divsi3>
   14314:	   |   addq.l #8,sp
   14316:	   |   move.l d0,20(sp)
    } while (value);
   1431a:	   '-- bne.s 142d8 <itoa+0x34>
    // Null-terminate string.
    *ptr-- = '\0';
   1431c:	       move.l 12(sp),d0
   14320:	       move.l d0,d1
   14322:	       subq.l #1,d1
   14324:	       move.l d1,12(sp)
   14328:	       movea.l d0,a0
   1432a:	       clr.b (a0)
    // Reverse string.
    for (low = rc; low < ptr; low++, ptr--) {
   1432c:	       move.l 4(sp),8(sp)
   14332:	   ,-- bra.s 14358 <itoa+0xb4>
        char temp = *low;
   14334:	,--|-> movea.l 8(sp),a0
   14338:	|  |   move.b (a0),3(sp)
        *low = *ptr;
   1433c:	|  |   movea.l 12(sp),a0
   14340:	|  |   move.b (a0),d0
   14342:	|  |   movea.l 8(sp),a0
   14346:	|  |   move.b d0,(a0)
        *ptr = temp;
   14348:	|  |   movea.l 12(sp),a0
   1434c:	|  |   move.b 3(sp),(a0)
    for (low = rc; low < ptr; low++, ptr--) {
   14350:	|  |   addq.l #1,8(sp)
   14354:	|  |   subq.l #1,12(sp)
   14358:	|  '-> move.l 8(sp),d0
   1435c:	|      cmp.l 12(sp),d0
   14360:	'----- bcs.s 14334 <itoa+0x90>
    }
    return rc;
   14362:	       move.l 4(sp),d0
}
   14366:	       lea 16(sp),sp
   1436a:	       rts

0001436c <vsprintf2>:

int vsprintf2(char* str, const char* format, va_list args) {
   1436c:	                            lea -40(sp),sp
   14370:	                            move.l d2,-(sp)
    char* s = str;
   14372:	                            move.l 48(sp),40(sp)
    const char* p = format;
   14378:	                            move.l 52(sp),36(sp)
    int i;
    char* sval;
    char buffer[20];

    while (*p) {
   1437e:	   ,----------------------- bra.w 144b2 <vsprintf2+0x146>
        if (*p == '%') {
   14382:	,--|----------------------> movea.l 36(sp),a0
   14386:	|  |                        move.b (a0),d0
   14388:	|  |                        cmpi.b #37,d0
   1438c:	|  |  ,-------------------- bne.w 14498 <vsprintf2+0x12c>
            switch (*++p) {
   14390:	|  |  |                     addq.l #1,36(sp)
   14394:	|  |  |                     movea.l 36(sp),a0
   14398:	|  |  |                     move.b (a0),d0
   1439a:	|  |  |                     ext.w d0
   1439c:	|  |  |                     movea.w d0,a0
   1439e:	|  |  |                     moveq #115,d0
   143a0:	|  |  |                     cmp.l a0,d0
   143a2:	|  |  |           ,-------- beq.s 1441a <vsprintf2+0xae>
   143a4:	|  |  |           |         moveq #115,d1
   143a6:	|  |  |           |         cmp.l a0,d1
   143a8:	|  |  |  ,--------|-------- blt.w 14480 <vsprintf2+0x114>
   143ac:	|  |  |  |        |         moveq #99,d2
   143ae:	|  |  |  |        |         cmp.l a0,d2
   143b0:	|  |  |  |  ,-----|-------- beq.w 14458 <vsprintf2+0xec>
   143b4:	|  |  |  |  |     |         moveq #100,d0
   143b6:	|  |  |  |  |     |         cmp.l a0,d0
   143b8:	|  |  |  +--|-----|-------- bne.w 14480 <vsprintf2+0x114>
                case 'd':
                    i = va_arg(args, int);
   143bc:	|  |  |  |  |     |         addq.l #4,56(sp)
   143c0:	|  |  |  |  |     |         movea.l 56(sp),a0
   143c4:	|  |  |  |  |     |         move.l (a0),d0
   143c6:	|  |  |  |  |     |         move.l d0,d1
   143c8:	|  |  |  |  |     |         subq.l #1,d1
   143ca:	|  |  |  |  |     |         move.l d1,24(sp)
                    itoa(i, buffer, 10);
   143ce:	|  |  |  |  |     |         pea a <_start+0xa>
   143d2:	|  |  |  |  |     |         lea 8(sp),a0
   143d6:	|  |  |  |  |     |         move.l a0,-(sp)
   143d8:	|  |  |  |  |     |         move.l 32(sp),-(sp)
   143dc:	|  |  |  |  |     |         jsr 142a4 <itoa>
   143e2:	|  |  |  |  |     |         lea 12(sp),sp
					for (char* b = buffer; *b; b++) {
   143e6:	|  |  |  |  |     |         lea 44(sp),a0
   143ea:	|  |  |  |  |     |         lea -40(a0),a0
   143ee:	|  |  |  |  |     |         move.l a0,28(sp)
   143f2:	|  |  |  |  |     |     ,-- bra.s 1440e <vsprintf2+0xa2>
                        *s++ = *b;
   143f4:	|  |  |  |  |     |  ,--|-> move.l 40(sp),d0
   143f8:	|  |  |  |  |     |  |  |   move.l d0,d1
   143fa:	|  |  |  |  |     |  |  |   addq.l #1,d1
   143fc:	|  |  |  |  |     |  |  |   move.l d1,40(sp)
   14400:	|  |  |  |  |     |  |  |   movea.l 28(sp),a0
   14404:	|  |  |  |  |     |  |  |   move.b (a0),d1
   14406:	|  |  |  |  |     |  |  |   movea.l d0,a0
   14408:	|  |  |  |  |     |  |  |   move.b d1,(a0)
					for (char* b = buffer; *b; b++) {
   1440a:	|  |  |  |  |     |  |  |   addq.l #1,28(sp)
   1440e:	|  |  |  |  |     |  |  '-> movea.l 28(sp),a0
   14412:	|  |  |  |  |     |  |      move.b (a0),d0
   14414:	|  |  |  |  |     |  '----- bne.s 143f4 <vsprintf2+0x88>
                    }
                    break;
   14416:	|  |  |  |  |  ,--|-------- bra.w 144ae <vsprintf2+0x142>
                case 's':
                    sval = va_arg(args, char*);
   1441a:	|  |  |  |  |  |  '-------> addq.l #4,56(sp)
   1441e:	|  |  |  |  |  |            movea.l 56(sp),a0
   14422:	|  |  |  |  |  |            move.l (a0),d0
   14424:	|  |  |  |  |  |            move.l d0,d1
   14426:	|  |  |  |  |  |            subq.l #1,d1
   14428:	|  |  |  |  |  |            move.l d1,32(sp)
                    while (*sval) {
   1442c:	|  |  |  |  |  |        ,-- bra.s 1444e <vsprintf2+0xe2>
                        *s++ = *sval++;
   1442e:	|  |  |  |  |  |     ,--|-> move.l 32(sp),d1
   14432:	|  |  |  |  |  |     |  |   move.l d1,d2
   14434:	|  |  |  |  |  |     |  |   addq.l #1,d2
   14436:	|  |  |  |  |  |     |  |   move.l d2,32(sp)
   1443a:	|  |  |  |  |  |     |  |   move.l 40(sp),d0
   1443e:	|  |  |  |  |  |     |  |   move.l d0,d2
   14440:	|  |  |  |  |  |     |  |   addq.l #1,d2
   14442:	|  |  |  |  |  |     |  |   move.l d2,40(sp)
   14446:	|  |  |  |  |  |     |  |   movea.l d1,a0
   14448:	|  |  |  |  |  |     |  |   move.b (a0),d1
   1444a:	|  |  |  |  |  |     |  |   movea.l d0,a0
   1444c:	|  |  |  |  |  |     |  |   move.b d1,(a0)
                    while (*sval) {
   1444e:	|  |  |  |  |  |     |  '-> movea.l 32(sp),a0
   14452:	|  |  |  |  |  |     |      move.b (a0),d0
   14454:	|  |  |  |  |  |     '----- bne.s 1442e <vsprintf2+0xc2>
                    }
                    break;
   14456:	|  |  |  |  |  +----------- bra.s 144ae <vsprintf2+0x142>
                case 'c':
                    i = va_arg(args, int);
   14458:	|  |  |  |  '--|----------> addq.l #4,56(sp)
   1445c:	|  |  |  |     |            movea.l 56(sp),a0
   14460:	|  |  |  |     |            move.l (a0),d0
   14462:	|  |  |  |     |            move.l d0,d1
   14464:	|  |  |  |     |            subq.l #1,d1
   14466:	|  |  |  |     |            move.l d1,24(sp)
                    *s++ = (char)i;
   1446a:	|  |  |  |     |            move.l 40(sp),d0
   1446e:	|  |  |  |     |            move.l d0,d2
   14470:	|  |  |  |     |            addq.l #1,d2
   14472:	|  |  |  |     |            move.l d2,40(sp)
   14476:	|  |  |  |     |            move.l 24(sp),d1
   1447a:	|  |  |  |     |            movea.l d0,a0
   1447c:	|  |  |  |     |            move.b d1,(a0)
                    break;
   1447e:	|  |  |  |     +----------- bra.s 144ae <vsprintf2+0x142>
                default:
                    *s++ = *p;
   14480:	|  |  |  '-----|----------> move.l 40(sp),d0
   14484:	|  |  |        |            move.l d0,d1
   14486:	|  |  |        |            addq.l #1,d1
   14488:	|  |  |        |            move.l d1,40(sp)
   1448c:	|  |  |        |            movea.l 36(sp),a0
   14490:	|  |  |        |            move.b (a0),d1
   14492:	|  |  |        |            movea.l d0,a0
   14494:	|  |  |        |            move.b d1,(a0)
                    break;
   14496:	|  |  |        +----------- bra.s 144ae <vsprintf2+0x142>
            }
        } else {
            *s++ = *p;
   14498:	|  |  '--------|----------> move.l 40(sp),d0
   1449c:	|  |           |            move.l d0,d1
   1449e:	|  |           |            addq.l #1,d1
   144a0:	|  |           |            move.l d1,40(sp)
   144a4:	|  |           |            movea.l 36(sp),a0
   144a8:	|  |           |            move.b (a0),d1
   144aa:	|  |           |            movea.l d0,a0
   144ac:	|  |           |            move.b d1,(a0)
        }
        p++;
   144ae:	|  |           '----------> addq.l #1,36(sp)
    while (*p) {
   144b2:	|  '----------------------> movea.l 36(sp),a0
   144b6:	|                           move.b (a0),d0
   144b8:	'-------------------------- bne.w 14382 <vsprintf2+0x16>
    }
    *s = '\0';
   144bc:	                            movea.l 40(sp),a0
   144c0:	                            clr.b (a0)
    return s - str;
   144c2:	                            move.l 40(sp),d0
   144c6:	                            sub.l 48(sp),d0
}
   144ca:	                            move.l (sp)+,d2
   144cc:	                            lea 40(sp),sp
   144d0:	                            rts

000144d2 <sprintf>:

int sprintf(char* str, const char* format, ...) {
   144d2:	subq.l #8,sp
    va_list args;
    int done;

    va_start(args, format);
   144d4:	moveq #16,d0
   144d6:	add.l sp,d0
   144d8:	move.l d0,d1
   144da:	addq.l #4,d1
   144dc:	move.l d1,4(sp)
    done = vsprintf2(str, format, args);
   144e0:	move.l 16(sp),d0
   144e4:	move.l 4(sp),-(sp)
   144e8:	move.l d0,-(sp)
   144ea:	move.l 20(sp),-(sp)
   144ee:	jsr 1436c <vsprintf2>
   144f4:	lea 12(sp),sp
   144f8:	move.l d0,(sp)
    va_end(args);
   144fa:	clr.l 4(sp)

    return done;
   144fe:	move.l (sp),d0
}
   14500:	addq.l #8,sp
   14502:	rts

00014504 <addVarToStack>:
const char * typeName[] = {"undefined", "number", "user function", "string",
							"built-in function", "file", "stack",
							"object type", "animation", "costume"};


BOOL addVarToStack(const struct variable * va, struct variableStack ** thisStack) {
   14504:	       lea -20(sp),sp
   14508:	       move.l a6,-(sp)
    struct variableStack * newStack = (struct variableStack *)AllocVec(sizeof(struct variableStack), MEMF_ANY);
   1450a:	       moveq #12,d0
   1450c:	       move.l d0,20(sp)
   14510:	       clr.l 16(sp)
   14514:	       move.l 1cfb6 <SysBase>,d0
   1451a:	       movea.l d0,a6
   1451c:	       move.l 20(sp),d0
   14520:	       move.l 16(sp),d1
   14524:	       jsr -684(a6)
   14528:	       move.l d0,12(sp)
   1452c:	       move.l 12(sp),d0
   14530:	       move.l d0,8(sp)
    if (!newStack) return FALSE;
   14534:	   ,-- bne.s 1453a <addVarToStack+0x36>
   14536:	   |   clr.w d0
   14538:	,--|-- bra.s 14582 <addVarToStack+0x7e>

    if (!copyMain(va, &newStack->thisVar)) {
   1453a:	|  '-> move.l 8(sp),d0
   1453e:	|      move.l d0,-(sp)
   14540:	|      move.l 32(sp),-(sp)
   14544:	|      jsr 15066 <copyMain>
   1454a:	|      addq.l #8,sp
   1454c:	|      tst.w d0
   1454e:	|  ,-- bne.s 1456a <addVarToStack+0x66>
        FreeVec(newStack);
   14550:	|  |   move.l 8(sp),4(sp)
   14556:	|  |   move.l 1cfb6 <SysBase>,d0
   1455c:	|  |   movea.l d0,a6
   1455e:	|  |   movea.l 4(sp),a1
   14562:	|  |   jsr -690(a6)
        return FALSE;
   14566:	|  |   clr.w d0
   14568:	+--|-- bra.s 14582 <addVarToStack+0x7e>
    }

    newStack->next = *thisStack;
   1456a:	|  '-> movea.l 32(sp),a0
   1456e:	|      move.l (a0),d0
   14570:	|      movea.l 8(sp),a0
   14574:	|      move.l d0,8(a0)
    *thisStack = newStack;
   14578:	|      movea.l 32(sp),a0
   1457c:	|      move.l 8(sp),(a0)
    return TRUE;
   14580:	|      moveq #1,d0
}
   14582:	'----> movea.l (sp)+,a6
   14584:	       lea 20(sp),sp
   14588:	       rts

0001458a <addVarToStackQuick>:

BOOL addVarToStackQuick(struct variable *va, struct variableStack **thisStack) {
   1458a:	       lea -16(sp),sp
   1458e:	       move.l a6,-(sp)
    struct variableStack *newStack = AllocVec(sizeof(struct variableStack), MEMF_ANY);
   14590:	       moveq #12,d0
   14592:	       move.l d0,16(sp)
   14596:	       clr.l 12(sp)
   1459a:	       move.l 1cfb6 <SysBase>,d0
   145a0:	       movea.l d0,a6
   145a2:	       move.l 16(sp),d0
   145a6:	       move.l 12(sp),d1
   145aa:	       jsr -684(a6)
   145ae:	       move.l d0,8(sp)
   145b2:	       move.l 8(sp),d0
   145b6:	       move.l d0,4(sp)
    if (!newStack) return FALSE;
   145ba:	   ,-- bne.s 145c0 <addVarToStackQuick+0x36>
   145bc:	   |   clr.w d0
   145be:	,--|-- bra.s 145f6 <addVarToStackQuick+0x6c>

//    if (!copyMain(va, &newStack->thisVar)) return FALSE;

    memcpy(&(newStack->thisVar), va, sizeof(struct variable));
   145c0:	|  '-> move.l 4(sp),d0
   145c4:	|      pea 8 <_start+0x8>
   145c8:	|      move.l 28(sp),-(sp)
   145cc:	|      move.l d0,-(sp)
   145ce:	|      jsr 1775c <memcpy>
   145d4:	|      lea 12(sp),sp
    va->varType = SVT_NULL;
   145d8:	|      movea.l 24(sp),a0
   145dc:	|      clr.l (a0)

    newStack->next = *thisStack;
   145de:	|      movea.l 28(sp),a0
   145e2:	|      move.l (a0),d0
   145e4:	|      movea.l 4(sp),a0
   145e8:	|      move.l d0,8(a0)
    *thisStack = newStack;
   145ec:	|      movea.l 28(sp),a0
   145f0:	|      move.l 4(sp),(a0)
    return TRUE;
   145f4:	|      moveq #1,d0
}
   145f6:	'----> movea.l (sp)+,a6
   145f8:	       lea 16(sp),sp
   145fc:	       rts

000145fe <addVariablesInSecond>:

void addVariablesInSecond(struct variable * var1, struct variable * var2) {
   145fe:	       lea -16(sp),sp
   14602:	       move.l a6,-(sp)
	if (var1->varType == SVT_INT && var2->varType == SVT_INT) {
   14604:	       movea.l 24(sp),a0
   14608:	       move.l (a0),d0
   1460a:	       moveq #1,d1
   1460c:	       cmp.l d0,d1
   1460e:	   ,-- bne.s 14638 <addVariablesInSecond+0x3a>
   14610:	   |   movea.l 28(sp),a0
   14614:	   |   move.l (a0),d0
   14616:	   |   moveq #1,d1
   14618:	   |   cmp.l d0,d1
   1461a:	   +-- bne.s 14638 <addVariablesInSecond+0x3a>
		var2->varData.intValue += var1->varData.intValue;
   1461c:	   |   movea.l 28(sp),a0
   14620:	   |   move.l 4(a0),d1
   14624:	   |   movea.l 24(sp),a0
   14628:	   |   move.l 4(a0),d0
   1462c:	   |   add.l d1,d0
   1462e:	   |   movea.l 28(sp),a0
   14632:	   |   move.l d0,4(a0)
   14636:	,--|-- bra.s 146b2 <addVariablesInSecond+0xb4>
	} else {
		char * string1 = getTextFromAnyVar(var1);
   14638:	|  '-> move.l 24(sp),-(sp)
   1463c:	|      jsr 1529e <getTextFromAnyVar>
   14642:	|      addq.l #4,sp
   14644:	|      move.l d0,16(sp)
		char * string2 = getTextFromAnyVar(var2);
   14648:	|      move.l 28(sp),-(sp)
   1464c:	|      jsr 1529e <getTextFromAnyVar>
   14652:	|      addq.l #4,sp
   14654:	|      move.l d0,12(sp)

		unlinkVar(var2);
   14658:	|      move.l 28(sp),-(sp)
   1465c:	|      jsr 14f16 <unlinkVar>
   14662:	|      addq.l #4,sp
		var2->varData.theString = joinStrings(string1, string2);
   14664:	|      move.l 12(sp),-(sp)
   14668:	|      move.l 20(sp),-(sp)
   1466c:	|      jsr 141f4 <joinStrings>
   14672:	|      addq.l #8,sp
   14674:	|      movea.l 28(sp),a0
   14678:	|      move.l d0,4(a0)
		var2->varType = SVT_STRING;
   1467c:	|      movea.l 28(sp),a0
   14680:	|      moveq #3,d0
   14682:	|      move.l d0,(a0)
		FreeVec(string1);
   14684:	|      move.l 16(sp),8(sp)
   1468a:	|      move.l 1cfb6 <SysBase>,d0
   14690:	|      movea.l d0,a6
   14692:	|      movea.l 8(sp),a1
   14696:	|      jsr -690(a6)
		FreeVec(string2);
   1469a:	|      move.l 12(sp),4(sp)
   146a0:	|      move.l 1cfb6 <SysBase>,d0
   146a6:	|      movea.l d0,a6
   146a8:	|      movea.l 4(sp),a1
   146ac:	|      jsr -690(a6)
	}
}
   146b0:	|      nop
   146b2:	'----> nop
   146b4:	       movea.l (sp)+,a6
   146b6:	       lea 16(sp),sp
   146ba:	       rts

000146bc <compareVariablesInSecond>:

void compareVariablesInSecond (const struct variable *var1, struct variable *var2) {	
	setVariable (var2, SVT_INT, compareVars (*var1, *var2));
   146bc:	movea.l 8(sp),a0
   146c0:	move.l 4(a0),-(sp)
   146c4:	move.l (a0),-(sp)
   146c6:	movea.l 12(sp),a0
   146ca:	move.l 4(a0),-(sp)
   146ce:	move.l (a0),-(sp)
   146d0:	jsr 146f2 <compareVars>
   146d6:	lea 16(sp),sp
   146da:	move.l d0,-(sp)
   146dc:	pea 1 <_start+0x1>
   146e0:	move.l 16(sp),-(sp)
   146e4:	jsr 155ba <setVariable>
   146ea:	lea 12(sp),sp
}
   146ee:	nop
   146f0:	rts

000146f2 <compareVars>:


int compareVars (const struct variable var1, const struct variable var2) {
   146f2:	       subq.l #4,sp
	int re = 0;
   146f4:	       clr.l (sp)
	if (var1.varType == var2.varType) {
   146f6:	       move.l 8(sp),d1
   146fa:	       move.l 16(sp),d0
   146fe:	       cmp.l d1,d0
   14700:	,----- bne.w 147c8 <compareVars+0xd6>
		switch (var1.varType) {
   14704:	|      move.l 8(sp),d0
   14708:	|      moveq #9,d1
   1470a:	|      cmp.l d0,d1
   1470c:	|  ,-- bcs.w 147b0 <compareVars+0xbe>
   14710:	|  |   add.l d0,d0
   14712:	|  |   movea.l d0,a0
   14714:	|  |   adda.l #83744,a0
   1471a:	|  |   move.w (a0),d0
   1471c:	|  |   jmp (14720 <compareVars+0x2e>,pc,d0.w)
   14720:	|  |   ori.b #-112,(a4)
   14724:	|  |   ori.l #5243024,(a0)
   1472a:	|  |   ori.l #7733392,(a0)
   14730:	|  |   ori.b #28,(1,a6,d7.w)
			case SVT_NULL:
			re = 1;
   14736:	|  |   move.l d0,(sp)
			break;
   14738:	+--|-- bra.w 147c8 <compareVars+0xd6>

			case SVT_COSTUME:
			re = (var1.varData.costumeHandler == var2.varData.costumeHandler);
   1473c:	|  |   move.l 12(sp),d1
   14740:	|  |   move.l 20(sp),d0
   14744:	|  |   cmp.l d1,d0
   14746:	|  |   seq d0
   14748:	|  |   neg.b d0
   1474a:	|  |   move.b d0,d0
   1474c:	|  |   andi.l #255,d0
   14752:	|  |   move.l d0,(sp)
			break;
   14754:	+--|-- bra.s 147c8 <compareVars+0xd6>

			case SVT_ANIM:
			re = (var1.varData.animHandler == var2.varData.animHandler);
   14756:	|  |   move.l 12(sp),d1
   1475a:	|  |   move.l 20(sp),d0
   1475e:	|  |   cmp.l d1,d0
   14760:	|  |   seq d0
   14762:	|  |   neg.b d0
   14764:	|  |   move.b d0,d0
   14766:	|  |   andi.l #255,d0
   1476c:	|  |   move.l d0,(sp)
			break;
   1476e:	+--|-- bra.s 147c8 <compareVars+0xd6>

			case SVT_STRING:

			re = (strcmp (var1.varData.theString, var2.varData.theString) == 0);
   14770:	|  |   move.l 20(sp),d1
   14774:	|  |   move.l 12(sp),d0
   14778:	|  |   move.l d1,-(sp)
   1477a:	|  |   move.l d0,-(sp)
   1477c:	|  |   jsr 14174 <strcmp>
   14782:	|  |   addq.l #8,sp
   14784:	|  |   tst.l d0
   14786:	|  |   seq d0
   14788:	|  |   neg.b d0
   1478a:	|  |   move.b d0,d0
   1478c:	|  |   andi.l #255,d0
   14792:	|  |   move.l d0,(sp)
			break;
   14794:	+--|-- bra.s 147c8 <compareVars+0xd6>

			case SVT_STACK:
			re = (var1.varData.theStack == var2.varData.theStack);
   14796:	|  |   move.l 12(sp),d1
   1479a:	|  |   move.l 20(sp),d0
   1479e:	|  |   cmp.l d1,d0
   147a0:	|  |   seq d0
   147a2:	|  |   neg.b d0
   147a4:	|  |   move.b d0,d0
   147a6:	|  |   andi.l #255,d0
   147ac:	|  |   move.l d0,(sp)
			break;
   147ae:	+--|-- bra.s 147c8 <compareVars+0xd6>

			default:
			re = (var1.varData.intValue == var2.varData.intValue);
   147b0:	|  '-> move.l 12(sp),d1
   147b4:	|      move.l 20(sp),d0
   147b8:	|      cmp.l d1,d0
   147ba:	|      seq d0
   147bc:	|      neg.b d0
   147be:	|      move.b d0,d0
   147c0:	|      andi.l #255,d0
   147c6:	|      move.l d0,(sp)
		}
	}
	return re;
   147c8:	'----> move.l (sp),d0
}
   147ca:	       addq.l #4,sp
   147cc:	       rts

000147ce <copyStack>:

BOOL copyStack (const struct variable * from, struct variable * to) {
   147ce:	             lea -16(sp),sp
   147d2:	             move.l a6,-(sp)
	to->varType = SVT_STACK;
   147d4:	             movea.l 28(sp),a0
   147d8:	             moveq #6,d0
   147da:	             move.l d0,(a0)
	to->varData.theStack = (struct stackHandler *)AllocVec(sizeof(struct stackHandler), MEMF_ANY);
   147dc:	             moveq #12,d0
   147de:	             move.l d0,12(sp)
   147e2:	             clr.l 8(sp)
   147e6:	             move.l 1cfb6 <SysBase>,d0
   147ec:	             movea.l d0,a6
   147ee:	             move.l 12(sp),d0
   147f2:	             move.l 8(sp),d1
   147f6:	             jsr -684(a6)
   147fa:	             move.l d0,4(sp)
   147fe:	             move.l 4(sp),d0
   14802:	             movea.l 28(sp),a0
   14806:	             move.l d0,4(a0)
	if (!to->varData.theStack) return FALSE;
   1480a:	             movea.l 28(sp),a0
   1480e:	             move.l 4(a0),d0
   14812:	         ,-- bne.s 1481a <copyStack+0x4c>
   14814:	         |   clr.w d0
   14816:	,--------|-- bra.w 1489c <copyStack+0xce>
	to->varData.theStack->first = NULL;
   1481a:	|        '-> movea.l 28(sp),a0
   1481e:	|            movea.l 4(a0),a0
   14822:	|            clr.l (a0)
	to->varData.theStack->last = NULL;
   14824:	|            movea.l 28(sp),a0
   14828:	|            movea.l 4(a0),a0
   1482c:	|            clr.l 4(a0)
	to->varData.theStack->timesUsed = 1;
   14830:	|            movea.l 28(sp),a0
   14834:	|            movea.l 4(a0),a0
   14838:	|            moveq #1,d0
   1483a:	|            move.l d0,8(a0)
	struct variableStack * a = from->varData.theStack->first;
   1483e:	|            movea.l 24(sp),a0
   14842:	|            movea.l 4(a0),a0
   14846:	|            move.l (a0),16(sp)

	while (a) {
   1484a:	|     ,----- bra.s 14894 <copyStack+0xc6>
		addVarToStack(&a->thisVar, &(to->varData.theStack->first));
   1484c:	|  ,--|----> movea.l 28(sp),a0
   14850:	|  |  |      move.l 4(a0),d0
   14854:	|  |  |      move.l d0,d1
   14856:	|  |  |      move.l 16(sp),d0
   1485a:	|  |  |      move.l d1,-(sp)
   1485c:	|  |  |      move.l d0,-(sp)
   1485e:	|  |  |      jsr 14504 <addVarToStack>
   14864:	|  |  |      addq.l #8,sp
		if (to->varData.theStack->last == NULL) {
   14866:	|  |  |      movea.l 28(sp),a0
   1486a:	|  |  |      movea.l 4(a0),a0
   1486e:	|  |  |      move.l 4(a0),d0
   14872:	|  |  |  ,-- bne.s 1488a <copyStack+0xbc>
			to->varData.theStack->last = to->varData.theStack->first;
   14874:	|  |  |  |   movea.l 28(sp),a0
   14878:	|  |  |  |   movea.l 4(a0),a1
   1487c:	|  |  |  |   movea.l 28(sp),a0
   14880:	|  |  |  |   movea.l 4(a0),a0
   14884:	|  |  |  |   move.l (a1),d0
   14886:	|  |  |  |   move.l d0,4(a0)
		}
		a = a->next;
   1488a:	|  |  |  '-> movea.l 16(sp),a0
   1488e:	|  |  |      move.l 8(a0),16(sp)
	while (a) {
   14894:	|  |  '----> tst.l 16(sp)
   14898:	|  '-------- bne.s 1484c <copyStack+0x7e>
	}

	return TRUE;
   1489a:	|            moveq #1,d0
}
   1489c:	'----------> movea.l (sp)+,a6
   1489e:	             lea 16(sp),sp
   148a2:	             rts

000148a4 <deleteVarFromStack>:

int deleteVarFromStack (const struct variable * va, struct variableStack ** thisStack, BOOL allOfEm) {
   148a4:	                lea -20(sp),sp
   148a8:	                move.l a6,-(sp)
   148aa:	                move.l 36(sp),d0
   148ae:	                move.w d0,d0
   148b0:	                move.w d0,6(sp)
    struct variableStack ** huntVar = thisStack;
   148b4:	                move.l 32(sp),20(sp)
    struct variableStack * killMe;
    int reply = 0;
   148ba:	                clr.l 16(sp)

    while (*huntVar) {
   148be:	   ,----------- bra.s 1493c <deleteVarFromStack+0x98>
        if (compareVars((*huntVar)->thisVar, *va)) {
   148c0:	,--|----------> movea.l 20(sp),a0
   148c4:	|  |            movea.l (a0),a0
   148c6:	|  |            movea.l 28(sp),a1
   148ca:	|  |            move.l 4(a1),-(sp)
   148ce:	|  |            move.l (a1),-(sp)
   148d0:	|  |            move.l 4(a0),-(sp)
   148d4:	|  |            move.l (a0),-(sp)
   148d6:	|  |            jsr 146f2 <compareVars>
   148dc:	|  |            lea 16(sp),sp
   148e0:	|  |            tst.l d0
   148e2:	|  |  ,-------- beq.s 1492e <deleteVarFromStack+0x8a>
            killMe = *huntVar;
   148e4:	|  |  |         movea.l 20(sp),a0
   148e8:	|  |  |         move.l (a0),12(sp)
            *huntVar = killMe->next;
   148ec:	|  |  |         movea.l 12(sp),a0
   148f0:	|  |  |         move.l 8(a0),d0
   148f4:	|  |  |         movea.l 20(sp),a0
   148f8:	|  |  |         move.l d0,(a0)
            unlinkVar(&killMe->thisVar);
   148fa:	|  |  |         move.l 12(sp),d0
   148fe:	|  |  |         move.l d0,-(sp)
   14900:	|  |  |         jsr 14f16 <unlinkVar>
   14906:	|  |  |         addq.l #4,sp
            FreeVec(killMe);
   14908:	|  |  |         move.l 12(sp),8(sp)
   1490e:	|  |  |         move.l 1cfb6 <SysBase>,d0
   14914:	|  |  |         movea.l d0,a6
   14916:	|  |  |         movea.l 8(sp),a1
   1491a:	|  |  |         jsr -690(a6)
            if (!allOfEm) return 1;
   1491e:	|  |  |         tst.w 6(sp)
   14922:	|  |  |     ,-- bne.s 14928 <deleteVarFromStack+0x84>
   14924:	|  |  |     |   moveq #1,d0
   14926:	|  |  |  ,--|-- bra.s 1494a <deleteVarFromStack+0xa6>
            reply++;
   14928:	|  |  |  |  '-> addq.l #1,16(sp)
   1492c:	|  +--|--|----- bra.s 1493c <deleteVarFromStack+0x98>
        } else {
            huntVar = &((*huntVar)->next);
   1492e:	|  |  '--|----> movea.l 20(sp),a0
   14932:	|  |     |      move.l (a0),d0
   14934:	|  |     |      move.l d0,d1
   14936:	|  |     |      addq.l #8,d1
   14938:	|  |     |      move.l d1,20(sp)
    while (*huntVar) {
   1493c:	|  '-----|----> movea.l 20(sp),a0
   14940:	|        |      move.l (a0),d0
   14942:	'--------|----- bne.w 148c0 <deleteVarFromStack+0x1c>
        }
    }

    return reply;
   14946:	         |      move.l 16(sp),d0
}
   1494a:	         '----> movea.l (sp)+,a6
   1494c:	                lea 20(sp),sp
   14950:	                rts

00014952 <fastArrayGetByIndex>:


struct variable * fastArrayGetByIndex (struct fastArrayHandler * vS, unsigned int theIndex) {
	if (theIndex >= (unsigned int) vS -> size) return NULL;
   14952:	       movea.l 4(sp),a0
   14956:	       move.l 4(a0),d0
   1495a:	       cmp.l 8(sp),d0
   1495e:	   ,-- bhi.s 14964 <fastArrayGetByIndex+0x12>
   14960:	   |   moveq #0,d0
   14962:	,--|-- bra.s 14972 <fastArrayGetByIndex+0x20>
	return & vS -> fastVariables[theIndex];
   14964:	|  '-> movea.l 4(sp),a0
   14968:	|      move.l (a0),d1
   1496a:	|      move.l 8(sp),d0
   1496e:	|      lsl.l #3,d0
   14970:	|      add.l d1,d0
}
   14972:	'----> rts

00014974 <getCostumeFromVar>:

struct persona * getCostumeFromVar(struct variable *thisVar) {
   14974:	                lea -32(sp),sp
   14978:	                move.l a6,-(sp)
   1497a:	                move.l a2,-(sp)
    struct persona *p = NULL;
   1497c:	                clr.l 36(sp)

    switch (thisVar->varType) {
   14980:	                movea.l 44(sp),a0
   14984:	                move.l (a0),d0
   14986:	                moveq #8,d1
   14988:	                cmp.l d0,d1
   1498a:	            ,-- beq.s 14998 <getCostumeFromVar+0x24>
   1498c:	            |   moveq #9,d1
   1498e:	            |   cmp.l d0,d1
   14990:	   ,--------|-- beq.w 14a46 <getCostumeFromVar+0xd2>
   14994:	,--|--------|-- bra.w 14a50 <getCostumeFromVar+0xdc>
        case SVT_ANIM:
            p = AllocVec(sizeof(struct persona), MEMF_ANY);
   14998:	|  |        '-> moveq #8,d0
   1499a:	|  |            move.l d0,28(sp)
   1499e:	|  |            clr.l 24(sp)
   149a2:	|  |            move.l 1cfb6 <SysBase>,d0
   149a8:	|  |            movea.l d0,a6
   149aa:	|  |            move.l 28(sp),d0
   149ae:	|  |            move.l 24(sp),d1
   149b2:	|  |            jsr -684(a6)
   149b6:	|  |            move.l d0,20(sp)
   149ba:	|  |            move.l 20(sp),d0
   149be:	|  |            move.l d0,36(sp)
            if (!p) return NULL;
   149c2:	|  |        ,-- bne.s 149ca <getCostumeFromVar+0x56>
   149c4:	|  |        |   moveq #0,d0
   149c6:	|  |  ,-----|-- bra.w 14a7a <getCostumeFromVar+0x106>
            p->numDirections = 1;
   149ca:	|  |  |     '-> movea.l 36(sp),a0
   149ce:	|  |  |         moveq #1,d1
   149d0:	|  |  |         move.l d1,4(a0)
            p->animation = AllocVec(3 * sizeof(struct personaAnimation *), MEMF_ANY);
   149d4:	|  |  |         moveq #12,d0
   149d6:	|  |  |         move.l d0,16(sp)
   149da:	|  |  |         clr.l 12(sp)
   149de:	|  |  |         move.l 1cfb6 <SysBase>,d0
   149e4:	|  |  |         movea.l d0,a6
   149e6:	|  |  |         move.l 16(sp),d0
   149ea:	|  |  |         move.l 12(sp),d1
   149ee:	|  |  |         jsr -684(a6)
   149f2:	|  |  |         move.l d0,8(sp)
   149f6:	|  |  |         move.l 8(sp),d0
   149fa:	|  |  |         movea.l 36(sp),a0
   149fe:	|  |  |         move.l d0,(a0)
            if (!p->animation) return NULL;
   14a00:	|  |  |         movea.l 36(sp),a0
   14a04:	|  |  |         move.l (a0),d0
   14a06:	|  |  |     ,-- bne.s 14a0c <getCostumeFromVar+0x98>
   14a08:	|  |  |     |   moveq #0,d0
   14a0a:	|  |  +-----|-- bra.s 14a7a <getCostumeFromVar+0x106>

            for (int iii = 0; iii < 3; iii++) {
   14a0c:	|  |  |     '-> clr.l 32(sp)
   14a10:	|  |  |     ,-- bra.s 14a3c <getCostumeFromVar+0xc8>
                p->animation[iii] = copyAnim(thisVar->varData.animHandler);
   14a12:	|  |  |  ,--|-> movea.l 44(sp),a0
   14a16:	|  |  |  |  |   move.l 4(a0),d0
   14a1a:	|  |  |  |  |   movea.l 36(sp),a0
   14a1e:	|  |  |  |  |   movea.l (a0),a0
   14a20:	|  |  |  |  |   move.l 32(sp),d1
   14a24:	|  |  |  |  |   add.l d1,d1
   14a26:	|  |  |  |  |   add.l d1,d1
   14a28:	|  |  |  |  |   lea (0,a0,d1.l),a2
   14a2c:	|  |  |  |  |   move.l d0,-(sp)
   14a2e:	|  |  |  |  |   jsr 9980 <copyAnim>
   14a34:	|  |  |  |  |   addq.l #4,sp
   14a36:	|  |  |  |  |   move.l d0,(a2)
            for (int iii = 0; iii < 3; iii++) {
   14a38:	|  |  |  |  |   addq.l #1,32(sp)
   14a3c:	|  |  |  |  '-> moveq #2,d1
   14a3e:	|  |  |  |      cmp.l 32(sp),d1
   14a42:	|  |  |  '----- bge.s 14a12 <getCostumeFromVar+0x9e>
            }
            break;
   14a44:	|  |  |     ,-- bra.s 14a76 <getCostumeFromVar+0x102>

        case SVT_COSTUME:
            return thisVar->varData.costumeHandler;
   14a46:	|  '--|-----|-> movea.l 44(sp),a0
   14a4a:	|     |     |   move.l 4(a0),d0
   14a4e:	|     +-----|-- bra.s 14a7a <getCostumeFromVar+0x106>
            break;

        default:
            KPrintF("Expecting an animation variable; found variable of type", typeName[thisVar->varType]);
   14a50:	'-----|-----|-> movea.l 44(sp),a0
   14a54:	      |     |   move.l (a0),d0
   14a56:	      |     |   add.l d0,d0
   14a58:	      |     |   movea.l d0,a1
   14a5a:	      |     |   adda.l d0,a1
   14a5c:	      |     |   lea 1ce84 <typeName>,a0
   14a62:	      |     |   move.l (0,a1,a0.l),d0
   14a66:	      |     |   move.l d0,-(sp)
   14a68:	      |     |   pea 1a4e0 <PutChar+0x2296>
   14a6e:	      |     |   jsr 177a8 <KPrintF>
   14a74:	      |     |   addq.l #8,sp
    }

    return p;
   14a76:	      |     '-> move.l 36(sp),d0
}
   14a7a:	      '-------> movea.l (sp)+,a2
   14a7c:	                movea.l (sp)+,a6
   14a7e:	                lea 32(sp),sp
   14a82:	                rts

00014a84 <getSavedGamesStack>:

BOOL getSavedGamesStack(struct stackHandler * sH, char * ext) {
   14a84:	                lea -96(sp),sp
   14a88:	                movem.l d2-d3/a6,-(sp)
	char * pattern = joinStrings("*", ext);
   14a8c:	                move.l 116(sp),-(sp)
   14a90:	                pea 1a518 <PutChar+0x22ce>
   14a96:	                jsr 141f4 <joinStrings>
   14a9c:	                addq.l #8,sp
   14a9e:	                move.l d0,102(sp)
	if (!pattern) return FALSE;
   14aa2:	            ,-- bne.s 14aaa <getSavedGamesStack+0x26>
   14aa4:	            |   clr.w d0
   14aa6:	,-----------|-- bra.w 14cbe <getSavedGamesStack+0x23a>

	struct variable newName;
	newName.varType = SVT_NULL;
   14aaa:	|           '-> clr.l 14(sp)

	BPTR dirLock = Lock(".", ACCESS_READ);
   14aae:	|               move.l #107802,98(sp)
   14ab6:	|               moveq #-2,d0
   14ab8:	|               move.l d0,94(sp)
   14abc:	|               move.l 1cfbe <DOSBase>,d0
   14ac2:	|               movea.l d0,a6
   14ac4:	|               move.l 98(sp),d1
   14ac8:	|               move.l 94(sp),d2
   14acc:	|               jsr -84(a6)
   14ad0:	|               move.l d0,90(sp)
   14ad4:	|               move.l 90(sp),d0
   14ad8:	|               move.l d0,86(sp)
	if (!dirLock) return FALSE;
   14adc:	|           ,-- bne.s 14ae4 <getSavedGamesStack+0x60>
   14ade:	|           |   clr.w d0
   14ae0:	+-----------|-- bra.w 14cbe <getSavedGamesStack+0x23a>

	struct FileInfoBlock *fib = (struct FileInfoBlock *)AllocVec(sizeof(struct FileInfoBlock), MEMF_CLEAR);
   14ae4:	|           '-> move.l #260,82(sp)
   14aec:	|               move.l #65536,78(sp)
   14af4:	|               move.l 1cfb6 <SysBase>,d0
   14afa:	|               movea.l d0,a6
   14afc:	|               move.l 82(sp),d0
   14b00:	|               move.l 78(sp),d1
   14b04:	|               jsr -684(a6)
   14b08:	|               move.l d0,74(sp)
   14b0c:	|               move.l 74(sp),d0
   14b10:	|               move.l d0,70(sp)
	if (!fib) {
   14b14:	|           ,-- bne.s 14b32 <getSavedGamesStack+0xae>
		UnLock(dirLock);
   14b16:	|           |   move.l 86(sp),22(sp)
   14b1c:	|           |   move.l 1cfbe <DOSBase>,d0
   14b22:	|           |   movea.l d0,a6
   14b24:	|           |   move.l 22(sp),d1
   14b28:	|           |   jsr -90(a6)
		return FALSE;
   14b2c:	|           |   clr.w d0
   14b2e:	+-----------|-- bra.w 14cbe <getSavedGamesStack+0x23a>
	}

	BOOL result = FALSE;
   14b32:	|           '-> clr.w 106(sp)
	if (Examine(dirLock, fib)) {
   14b36:	|               move.l 86(sp),66(sp)
   14b3c:	|               move.l 70(sp),62(sp)
   14b42:	|               move.l 1cfbe <DOSBase>,d0
   14b48:	|               movea.l d0,a6
   14b4a:	|               move.l 66(sp),d1
   14b4e:	|               move.l 62(sp),d2
   14b52:	|               jsr -102(a6)
   14b56:	|               move.l d0,58(sp)
   14b5a:	|               move.l 58(sp),d0
   14b5e:	|  ,----------- beq.w 14c72 <getSavedGamesStack+0x1ee>
		while (ExNext(dirLock, fib)) {
   14b62:	|  |        ,-- bra.w 14c3e <getSavedGamesStack+0x1ba>
			if (!strcmp(fib->fib_FileName + strlen(fib->fib_FileName) - strlen(ext), ext)) {
   14b66:	|  |  ,-----|-> move.l 70(sp),d2
   14b6a:	|  |  |     |   addq.l #8,d2
   14b6c:	|  |  |     |   move.l 70(sp),d0
   14b70:	|  |  |     |   addq.l #8,d0
   14b72:	|  |  |     |   move.l d0,-(sp)
   14b74:	|  |  |     |   jsr 141b4 <strlen>
   14b7a:	|  |  |     |   addq.l #4,sp
   14b7c:	|  |  |     |   move.l d0,d3
   14b7e:	|  |  |     |   move.l 116(sp),-(sp)
   14b82:	|  |  |     |   jsr 141b4 <strlen>
   14b88:	|  |  |     |   addq.l #4,sp
   14b8a:	|  |  |     |   move.l d3,d1
   14b8c:	|  |  |     |   sub.l d0,d1
   14b8e:	|  |  |     |   move.l d2,d0
   14b90:	|  |  |     |   add.l d1,d0
   14b92:	|  |  |     |   move.l 116(sp),-(sp)
   14b96:	|  |  |     |   move.l d0,-(sp)
   14b98:	|  |  |     |   jsr 14174 <strcmp>
   14b9e:	|  |  |     |   addq.l #8,sp
   14ba0:	|  |  |     |   tst.l d0
   14ba2:	|  |  |     +-- bne.w 14c3e <getSavedGamesStack+0x1ba>
				fib->fib_FileName[strlen(fib->fib_FileName) - strlen(ext)] = 0;
   14ba6:	|  |  |     |   move.l 70(sp),d0
   14baa:	|  |  |     |   addq.l #8,d0
   14bac:	|  |  |     |   move.l d0,-(sp)
   14bae:	|  |  |     |   jsr 141b4 <strlen>
   14bb4:	|  |  |     |   addq.l #4,sp
   14bb6:	|  |  |     |   move.l d0,d2
   14bb8:	|  |  |     |   move.l 116(sp),-(sp)
   14bbc:	|  |  |     |   jsr 141b4 <strlen>
   14bc2:	|  |  |     |   addq.l #4,sp
   14bc4:	|  |  |     |   move.l d0,d1
   14bc6:	|  |  |     |   move.l d2,d0
   14bc8:	|  |  |     |   sub.l d1,d0
   14bca:	|  |  |     |   movea.l 70(sp),a0
   14bce:	|  |  |     |   clr.b (8,a0,d0.l)
				char * decoded = decodeFilename(fib->fib_FileName);
   14bd2:	|  |  |     |   move.l 70(sp),d0
   14bd6:	|  |  |     |   addq.l #8,d0
   14bd8:	|  |  |     |   move.l d0,-(sp)
   14bda:	|  |  |     |   jsr 118 <decodeFilename>
   14be0:	|  |  |     |   addq.l #4,sp
   14be2:	|  |  |     |   move.l d0,42(sp)
				makeTextVar(&newName, decoded);
   14be6:	|  |  |     |   move.l 42(sp),-(sp)
   14bea:	|  |  |     |   lea 18(sp),a0
   14bee:	|  |  |     |   move.l a0,-(sp)
   14bf0:	|  |  |     |   jsr 14eea <makeTextVar>
   14bf6:	|  |  |     |   addq.l #8,sp
				FreeVec(decoded);
   14bf8:	|  |  |     |   move.l 42(sp),38(sp)
   14bfe:	|  |  |     |   move.l 1cfb6 <SysBase>,d0
   14c04:	|  |  |     |   movea.l d0,a6
   14c06:	|  |  |     |   movea.l 38(sp),a1
   14c0a:	|  |  |     |   jsr -690(a6)
				if (!addVarToStack(&newName, &sH->first)) goto cleanup;
   14c0e:	|  |  |     |   move.l 112(sp),d0
   14c12:	|  |  |     |   move.l d0,-(sp)
   14c14:	|  |  |     |   lea 18(sp),a0
   14c18:	|  |  |     |   move.l a0,-(sp)
   14c1a:	|  |  |     |   jsr 14504 <addVarToStack>
   14c20:	|  |  |     |   addq.l #8,sp
   14c22:	|  |  |     |   tst.w d0
   14c24:	|  |  |  ,--|-- beq.s 14c76 <getSavedGamesStack+0x1f2>
				if (sH->last == NULL) sH->last = sH->first;
   14c26:	|  |  |  |  |   movea.l 112(sp),a0
   14c2a:	|  |  |  |  |   move.l 4(a0),d0
   14c2e:	|  |  |  |  +-- bne.s 14c3e <getSavedGamesStack+0x1ba>
   14c30:	|  |  |  |  |   movea.l 112(sp),a0
   14c34:	|  |  |  |  |   move.l (a0),d0
   14c36:	|  |  |  |  |   movea.l 112(sp),a0
   14c3a:	|  |  |  |  |   move.l d0,4(a0)
		while (ExNext(dirLock, fib)) {
   14c3e:	|  |  |  |  '-> move.l 86(sp),54(sp)
   14c44:	|  |  |  |      move.l 70(sp),50(sp)
   14c4a:	|  |  |  |      move.l 1cfbe <DOSBase>,d0
   14c50:	|  |  |  |      movea.l d0,a6
   14c52:	|  |  |  |      move.l 54(sp),d1
   14c56:	|  |  |  |      move.l 50(sp),d2
   14c5a:	|  |  |  |      jsr -108(a6)
   14c5e:	|  |  |  |      move.l d0,46(sp)
   14c62:	|  |  |  |      move.l 46(sp),d0
   14c66:	|  |  '--|----- bne.w 14b66 <getSavedGamesStack+0xe2>
			}
		}
		result = TRUE;
   14c6a:	|  |     |      move.w #1,106(sp)
   14c70:	|  |     |  ,-- bra.s 14c78 <getSavedGamesStack+0x1f4>
	}

cleanup:
   14c72:	|  '-----|--|-> nop
   14c74:	|        |  +-- bra.s 14c78 <getSavedGamesStack+0x1f4>
				if (!addVarToStack(&newName, &sH->first)) goto cleanup;
   14c76:	|        '--|-> nop
	FreeVec(fib);
   14c78:	|           '-> move.l 70(sp),34(sp)
   14c7e:	|               move.l 1cfb6 <SysBase>,d0
   14c84:	|               movea.l d0,a6
   14c86:	|               movea.l 34(sp),a1
   14c8a:	|               jsr -690(a6)
	UnLock(dirLock);
   14c8e:	|               move.l 86(sp),30(sp)
   14c94:	|               move.l 1cfbe <DOSBase>,d0
   14c9a:	|               movea.l d0,a6
   14c9c:	|               move.l 30(sp),d1
   14ca0:	|               jsr -90(a6)
	FreeVec(pattern);
   14ca4:	|               move.l 102(sp),26(sp)
   14caa:	|               move.l 1cfb6 <SysBase>,d0
   14cb0:	|               movea.l d0,a6
   14cb2:	|               movea.l 26(sp),a1
   14cb6:	|               jsr -690(a6)
	return result;
   14cba:	|               move.w 106(sp),d0
}
   14cbe:	'-------------> movem.l (sp)+,d2-d3/a6
   14cc2:	                lea 96(sp),sp
   14cc6:	                rts

00014cc8 <getValueType>:


BOOL getValueType (int *toHere, enum variableType vT, const struct variable *v) {
   14cc8:	       subq.l #8,sp
	//if (! v) return false;
	if (v->varType != vT) {
   14cca:	       movea.l 20(sp),a0
   14cce:	       move.l (a0),d0
   14cd0:	       cmp.l 16(sp),d0
   14cd4:	,----- beq.s 14d38 <getValueType+0x70>
		char * e1 = joinStrings ("Can only perform specified operation on a value which is of type ", typeName[vT]);
   14cd6:	|      move.l 16(sp),d0
   14cda:	|      add.l d0,d0
   14cdc:	|      movea.l d0,a1
   14cde:	|      adda.l d0,a1
   14ce0:	|      lea 1ce84 <typeName>,a0
   14ce6:	|      move.l (0,a1,a0.l),d0
   14cea:	|      move.l d0,-(sp)
   14cec:	|      pea 1a51c <PutChar+0x22d2>
   14cf2:	|      jsr 141f4 <joinStrings>
   14cf8:	|      addq.l #8,sp
   14cfa:	|      move.l d0,4(sp)
		char * e2 = joinStrings ("... value supplied was of type ", typeName[v->varType]);
   14cfe:	|      movea.l 20(sp),a0
   14d02:	|      move.l (a0),d0
   14d04:	|      add.l d0,d0
   14d06:	|      movea.l d0,a1
   14d08:	|      adda.l d0,a1
   14d0a:	|      lea 1ce84 <typeName>,a0
   14d10:	|      move.l (0,a1,a0.l),d0
   14d14:	|      move.l d0,-(sp)
   14d16:	|      pea 1a55e <PutChar+0x2314>
   14d1c:	|      jsr 141f4 <joinStrings>
   14d22:	|      addq.l #8,sp
   14d24:	|      move.l d0,(sp)
		KPrintF(e1, e2);
   14d26:	|      move.l (sp),-(sp)
   14d28:	|      move.l 8(sp),-(sp)
   14d2c:	|      jsr 177a8 <KPrintF>
   14d32:	|      addq.l #8,sp

		return FALSE;
   14d34:	|      clr.w d0
   14d36:	|  ,-- bra.s 14d48 <getValueType+0x80>
	}
	*toHere = v->varData.intValue;
   14d38:	'--|-> movea.l 20(sp),a0
   14d3c:	   |   move.l 4(a0),d0
   14d40:	   |   movea.l 12(sp),a0
   14d44:	   |   move.l d0,(a0)
	return TRUE;
   14d46:	   |   moveq #1,d0
}
   14d48:	   '-> addq.l #8,sp
   14d4a:	       rts

00014d4c <loadStringToVar>:

BOOL loadStringToVar (struct variable *thisVar, int value) {
	makeTextVar (thisVar, getNumberedString (value));
   14d4c:	move.l 8(sp),-(sp)
   14d50:	jsr 7ade <getNumberedString>
   14d56:	addq.l #4,sp
   14d58:	move.l d0,-(sp)
   14d5a:	move.l 8(sp),-(sp)
   14d5e:	jsr 14eea <makeTextVar>
   14d64:	addq.l #8,sp
	return (BOOL) (thisVar->varData.theString != NULL);
   14d66:	movea.l 4(sp),a0
   14d6a:	move.l 4(a0),d0
   14d6e:	sne d0
   14d70:	neg.b d0
   14d72:	move.b d0,d0
   14d74:	andi.w #255,d0
}
   14d78:	rts

00014d7a <makeFastArrayFromStack>:
		break;
	}
	return TRUE;
}

BOOL makeFastArrayFromStack (struct variable *to, const struct stackHandler *stacky) {
   14d7a:	          subq.l #8,sp
    int size = stackSize(stacky);
   14d7c:	          move.l 16(sp),-(sp)
   14d80:	          jsr 15628 <stackSize>
   14d86:	          addq.l #4,sp
   14d88:	          move.l d0,4(sp)
    if (!makeFastArraySize(to, size)) return FALSE;
   14d8c:	          move.l 4(sp),-(sp)
   14d90:	          move.l 16(sp),-(sp)
   14d94:	          jsr 14de4 <makeFastArraySize>
   14d9a:	          addq.l #8,sp
   14d9c:	          tst.w d0
   14d9e:	      ,-- bne.s 14da4 <makeFastArrayFromStack+0x2a>
   14da0:	      |   clr.w d0
   14da2:	,-----|-- bra.s 14de0 <makeFastArrayFromStack+0x66>

    // Now let's fill up the new array

    struct variableStack *allV = stacky->first;
   14da4:	|     '-> movea.l 16(sp),a0
   14da8:	|         move.l (a0),(sp)
    size = 0;
   14daa:	|         clr.l 4(sp)
    while (allV) {
   14dae:	|     ,-- bra.s 14dda <makeFastArrayFromStack+0x60>
        copyMain(&allV->thisVar, &to->varData.fastArray->fastVariables[size]);
   14db0:	|  ,--|-> movea.l 12(sp),a0
   14db4:	|  |  |   movea.l 4(a0),a0
   14db8:	|  |  |   move.l (a0),d1
   14dba:	|  |  |   move.l 4(sp),d0
   14dbe:	|  |  |   lsl.l #3,d0
   14dc0:	|  |  |   add.l d0,d1
   14dc2:	|  |  |   move.l (sp),d0
   14dc4:	|  |  |   move.l d1,-(sp)
   14dc6:	|  |  |   move.l d0,-(sp)
   14dc8:	|  |  |   jsr 15066 <copyMain>
   14dce:	|  |  |   addq.l #8,sp
        size++;
   14dd0:	|  |  |   addq.l #1,4(sp)
        allV = allV->next;
   14dd4:	|  |  |   movea.l (sp),a0
   14dd6:	|  |  |   move.l 8(a0),(sp)
    while (allV) {
   14dda:	|  |  '-> tst.l (sp)
   14ddc:	|  '----- bne.s 14db0 <makeFastArrayFromStack+0x36>
    }
    return TRUE;
   14dde:	|         moveq #1,d0
}
   14de0:	'-------> addq.l #8,sp
   14de2:	          rts

00014de4 <makeFastArraySize>:


BOOL makeFastArraySize (struct variable *to, int size) {
   14de4:	          lea -28(sp),sp
   14de8:	          move.l a6,-(sp)
    if (size < 0) {
   14dea:	          tst.l 40(sp)
   14dee:	      ,-- bge.s 14e04 <makeFastArraySize+0x20>
		KPrintF("makeFastArraySize: Can't create a fast array with a negative number of elements!");
   14df0:	      |   pea 1a5a3 <PutChar+0x2359>
   14df6:	      |   jsr 177a8 <KPrintF>
   14dfc:	      |   addq.l #4,sp
		return FALSE;
   14dfe:	      |   clr.w d0
   14e00:	,-----|-- bra.w 14ee2 <makeFastArraySize+0xfe>
	}		
    unlinkVar(to);
   14e04:	|     '-> move.l 36(sp),-(sp)
   14e08:	|         jsr 14f16 <unlinkVar>
   14e0e:	|         addq.l #4,sp
    to->varType = SVT_FASTARRAY;
   14e10:	|         movea.l 36(sp),a0
   14e14:	|         moveq #10,d0
   14e16:	|         move.l d0,(a0)
    to->varData.fastArray = AllocVec(sizeof(struct fastArrayHandler), MEMF_ANY);
   14e18:	|         moveq #12,d0
   14e1a:	|         move.l d0,24(sp)
   14e1e:	|         clr.l 20(sp)
   14e22:	|         move.l 1cfb6 <SysBase>,d0
   14e28:	|         movea.l d0,a6
   14e2a:	|         move.l 24(sp),d0
   14e2e:	|         move.l 20(sp),d1
   14e32:	|         jsr -684(a6)
   14e36:	|         move.l d0,16(sp)
   14e3a:	|         move.l 16(sp),d0
   14e3e:	|         movea.l 36(sp),a0
   14e42:	|         move.l d0,4(a0)
    if (!to->varData.fastArray) return FALSE;
   14e46:	|         movea.l 36(sp),a0
   14e4a:	|         move.l 4(a0),d0
   14e4e:	|     ,-- bne.s 14e56 <makeFastArraySize+0x72>
   14e50:	|     |   clr.w d0
   14e52:	+-----|-- bra.w 14ee2 <makeFastArraySize+0xfe>
    to->varData.fastArray->fastVariables = AllocVec(size * sizeof(struct variable), MEMF_ANY);
   14e56:	|     '-> move.l 40(sp),d0
   14e5a:	|         lsl.l #3,d0
   14e5c:	|         move.l d0,12(sp)
   14e60:	|         clr.l 8(sp)
   14e64:	|         move.l 1cfb6 <SysBase>,d0
   14e6a:	|         movea.l d0,a6
   14e6c:	|         move.l 12(sp),d0
   14e70:	|         move.l 8(sp),d1
   14e74:	|         jsr -684(a6)
   14e78:	|         move.l d0,4(sp)
   14e7c:	|         move.l 4(sp),d0
   14e80:	|         movea.l 36(sp),a0
   14e84:	|         movea.l 4(a0),a0
   14e88:	|         move.l d0,(a0)
    if (!to->varData.fastArray->fastVariables) return FALSE;
   14e8a:	|         movea.l 36(sp),a0
   14e8e:	|         movea.l 4(a0),a0
   14e92:	|         move.l (a0),d0
   14e94:	|     ,-- bne.s 14e9a <makeFastArraySize+0xb6>
   14e96:	|     |   clr.w d0
   14e98:	+-----|-- bra.s 14ee2 <makeFastArraySize+0xfe>
    for (int i = 0; i < size; i++) {
   14e9a:	|     '-> clr.l 28(sp)
   14e9e:	|     ,-- bra.s 14eba <makeFastArraySize+0xd6>
        to->varData.fastArray->fastVariables[i].varType = SVT_NULL;
   14ea0:	|  ,--|-> movea.l 36(sp),a0
   14ea4:	|  |  |   movea.l 4(a0),a0
   14ea8:	|  |  |   move.l (a0),d1
   14eaa:	|  |  |   move.l 28(sp),d0
   14eae:	|  |  |   lsl.l #3,d0
   14eb0:	|  |  |   movea.l d1,a0
   14eb2:	|  |  |   adda.l d0,a0
   14eb4:	|  |  |   clr.l (a0)
    for (int i = 0; i < size; i++) {
   14eb6:	|  |  |   addq.l #1,28(sp)
   14eba:	|  |  '-> move.l 28(sp),d0
   14ebe:	|  |      cmp.l 40(sp),d0
   14ec2:	|  '----- blt.s 14ea0 <makeFastArraySize+0xbc>
    }
    to->varData.fastArray->size = size;
   14ec4:	|         movea.l 36(sp),a0
   14ec8:	|         movea.l 4(a0),a0
   14ecc:	|         move.l 40(sp),4(a0)
    to->varData.fastArray->timesUsed = 1;
   14ed2:	|         movea.l 36(sp),a0
   14ed6:	|         movea.l 4(a0),a0
   14eda:	|         moveq #1,d0
   14edc:	|         move.l d0,8(a0)
    return TRUE;
   14ee0:	|         moveq #1,d0
}
   14ee2:	'-------> movea.l (sp)+,a6
   14ee4:	          lea 28(sp),sp
   14ee8:	          rts

00014eea <makeTextVar>:

void makeTextVar (struct variable *thisVar, const char * txt) {
	unlinkVar (thisVar);
   14eea:	move.l 4(sp),-(sp)
   14eee:	jsr 14f16 <unlinkVar>
   14ef4:	addq.l #4,sp
	thisVar->varType = SVT_STRING;
   14ef6:	movea.l 4(sp),a0
   14efa:	moveq #3,d0
   14efc:	move.l d0,(a0)
	thisVar->varData.theString = copyString (txt);
   14efe:	move.l 8(sp),-(sp)
   14f02:	jsr b8 <copyString>
   14f08:	addq.l #4,sp
   14f0a:	movea.l 4(sp),a0
   14f0e:	move.l d0,4(a0)
}
   14f12:	nop
   14f14:	rts

00014f16 <unlinkVar>:

void unlinkVar (struct variable *thisVar) {
   14f16:	                      lea -16(sp),sp
   14f1a:	                      move.l a6,-(sp)

	switch (thisVar->varType) {
   14f1c:	                      movea.l 24(sp),a0
   14f20:	                      move.l (a0),d0
   14f22:	                      moveq #10,d1
   14f24:	                      cmp.l d0,d1
   14f26:	            ,-------- beq.w 14fde <unlinkVar+0xc8>
   14f2a:	            |         moveq #10,d1
   14f2c:	            |         cmp.l d0,d1
   14f2e:	,-----------|-------- bcs.w 15052 <unlinkVar+0x13c>
   14f32:	|           |         moveq #8,d1
   14f34:	|           |         cmp.l d0,d1
   14f36:	|  ,--------|-------- beq.w 1503e <unlinkVar+0x128>
   14f3a:	|  |        |         moveq #8,d1
   14f3c:	|  |        |         cmp.l d0,d1
   14f3e:	+--|--------|-------- bcs.w 15052 <unlinkVar+0x13c>
   14f42:	|  |        |         moveq #3,d1
   14f44:	|  |        |         cmp.l d0,d1
   14f46:	|  |        |     ,-- beq.s 14f52 <unlinkVar+0x3c>
   14f48:	|  |        |     |   moveq #6,d1
   14f4a:	|  |        |     |   cmp.l d0,d1
   14f4c:	|  |        |  ,--|-- beq.s 14f78 <unlinkVar+0x62>
		case SVT_ANIM:
		deleteAnim (thisVar->varData.animHandler);
		break;

		default:
		break;
   14f4e:	+--|--------|--|--|-- bra.w 15052 <unlinkVar+0x13c>
        FreeVec(thisVar->varData.theString);
   14f52:	|  |        |  |  '-> movea.l 24(sp),a0
   14f56:	|  |        |  |      move.l 4(a0),4(sp)
   14f5c:	|  |        |  |      move.l 1cfb6 <SysBase>,d0
   14f62:	|  |        |  |      movea.l d0,a6
   14f64:	|  |        |  |      movea.l 4(sp),a1
   14f68:	|  |        |  |      jsr -690(a6)
		thisVar->varData.theString = NULL;
   14f6c:	|  |        |  |      movea.l 24(sp),a0
   14f70:	|  |        |  |      clr.l 4(a0)
		break;
   14f74:	|  |  ,-----|--|----- bra.w 1505c <unlinkVar+0x146>
		thisVar->varData.theStack -> timesUsed --;
   14f78:	|  |  |     |  '----> movea.l 24(sp),a0
   14f7c:	|  |  |     |         movea.l 4(a0),a0
   14f80:	|  |  |     |         move.l 8(a0),d0
   14f84:	|  |  |     |         subq.l #1,d0
   14f86:	|  |  |     |         move.l d0,8(a0)
		if (thisVar->varData.theStack -> timesUsed <= 0) {
   14f8a:	|  |  |     |         movea.l 24(sp),a0
   14f8e:	|  |  |     |         movea.l 4(a0),a0
   14f92:	|  |  |     |         move.l 8(a0),d0
   14f96:	|  |  |  ,--|-------- bgt.w 15056 <unlinkVar+0x140>
			while (thisVar->varData.theStack -> first) trimStack (&thisVar->varData.theStack -> first);
   14f9a:	|  |  |  |  |     ,-- bra.s 14fae <unlinkVar+0x98>
   14f9c:	|  |  |  |  |  ,--|-> movea.l 24(sp),a0
   14fa0:	|  |  |  |  |  |  |   move.l 4(a0),d0
   14fa4:	|  |  |  |  |  |  |   move.l d0,-(sp)
   14fa6:	|  |  |  |  |  |  |   jsr 1564c <trimStack>
   14fac:	|  |  |  |  |  |  |   addq.l #4,sp
   14fae:	|  |  |  |  |  |  '-> movea.l 24(sp),a0
   14fb2:	|  |  |  |  |  |      movea.l 4(a0),a0
   14fb6:	|  |  |  |  |  |      move.l (a0),d0
   14fb8:	|  |  |  |  |  '----- bne.s 14f9c <unlinkVar+0x86>
			FreeVec(thisVar->varData.theStack);
   14fba:	|  |  |  |  |         movea.l 24(sp),a0
   14fbe:	|  |  |  |  |         move.l 4(a0),8(sp)
   14fc4:	|  |  |  |  |         move.l 1cfb6 <SysBase>,d0
   14fca:	|  |  |  |  |         movea.l d0,a6
   14fcc:	|  |  |  |  |         movea.l 8(sp),a1
   14fd0:	|  |  |  |  |         jsr -690(a6)
			thisVar->varData.theStack = NULL;
   14fd4:	|  |  |  |  |         movea.l 24(sp),a0
   14fd8:	|  |  |  |  |         clr.l 4(a0)
		break;
   14fdc:	|  |  |  +--|-------- bra.s 15056 <unlinkVar+0x140>
		thisVar->varData.fastArray -> timesUsed --;
   14fde:	|  |  |  |  '-------> movea.l 24(sp),a0
   14fe2:	|  |  |  |            movea.l 4(a0),a0
   14fe6:	|  |  |  |            move.l 8(a0),d0
   14fea:	|  |  |  |            subq.l #1,d0
   14fec:	|  |  |  |            move.l d0,8(a0)
		if (thisVar->varData.theStack -> timesUsed <= 0) {
   14ff0:	|  |  |  |            movea.l 24(sp),a0
   14ff4:	|  |  |  |            movea.l 4(a0),a0
   14ff8:	|  |  |  |            move.l 8(a0),d0
   14ffc:	|  |  |  |        ,-- bgt.s 1505a <unlinkVar+0x144>
            FreeVec( thisVar->varData.fastArray -> fastVariables);
   14ffe:	|  |  |  |        |   movea.l 24(sp),a0
   15002:	|  |  |  |        |   movea.l 4(a0),a0
   15006:	|  |  |  |        |   move.l (a0),16(sp)
   1500a:	|  |  |  |        |   move.l 1cfb6 <SysBase>,d0
   15010:	|  |  |  |        |   movea.l d0,a6
   15012:	|  |  |  |        |   movea.l 16(sp),a1
   15016:	|  |  |  |        |   jsr -690(a6)
			FreeVec(thisVar->varData.fastArray);
   1501a:	|  |  |  |        |   movea.l 24(sp),a0
   1501e:	|  |  |  |        |   move.l 4(a0),12(sp)
   15024:	|  |  |  |        |   move.l 1cfb6 <SysBase>,d0
   1502a:	|  |  |  |        |   movea.l d0,a6
   1502c:	|  |  |  |        |   movea.l 12(sp),a1
   15030:	|  |  |  |        |   jsr -690(a6)
			thisVar->varData.fastArray = NULL;
   15034:	|  |  |  |        |   movea.l 24(sp),a0
   15038:	|  |  |  |        |   clr.l 4(a0)
		break;
   1503c:	|  |  |  |        +-- bra.s 1505a <unlinkVar+0x144>
		deleteAnim (thisVar->varData.animHandler);
   1503e:	|  '--|--|--------|-> movea.l 24(sp),a0
   15042:	|     |  |        |   move.l 4(a0),d0
   15046:	|     |  |        |   move.l d0,-(sp)
   15048:	|     |  |        |   jsr 9d4c <deleteAnim>
   1504e:	|     |  |        |   addq.l #4,sp
		break;
   15050:	|     +--|--------|-- bra.s 1505c <unlinkVar+0x146>
		break;
   15052:	'-----|--|--------|-> nop
   15054:	      +--|--------|-- bra.s 1505c <unlinkVar+0x146>
		break;
   15056:	      |  '--------|-> nop
   15058:	      +-----------|-- bra.s 1505c <unlinkVar+0x146>
		break;
   1505a:	      |           '-> nop
	}
}
   1505c:	      '-------------> nop
   1505e:	                      movea.l (sp)+,a6
   15060:	                      lea 16(sp),sp
   15064:	                      rts

00015066 <copyMain>:

BOOL copyMain (const struct variable *from, struct variable *to) {
	to->varType = from->varType;
   15066:	       movea.l 4(sp),a0
   1506a:	       move.l (a0),d0
   1506c:	       movea.l 8(sp),a0
   15070:	       move.l d0,(a0)
	switch (to->varType) {
   15072:	       movea.l 8(sp),a0
   15076:	       move.l (a0),d0
   15078:	       moveq #10,d1
   1507a:	       cmp.l d0,d1
   1507c:	,----- bcs.w 1516e <copyMain+0x108>
   15080:	|      add.l d0,d0
   15082:	|      movea.l d0,a0
   15084:	|      adda.l #86160,a0
   1508a:	|      move.w (a0),d0
   1508c:	|      jmp (15090 <copyMain+0x2a>,pc,d0.w)
   15090:	|      .short 0x00da
   15092:	|      ori.b #22,(a6)
   15096:	|      ori.w #22,(a4)
   1509a:	|      ori.b #-126,(a6)
   1509e:	|      ori.b #-68,(a6)
   150a2:	|      ori.l #2891887,4(a0)
		case SVT_INT:
		case SVT_FUNC:
		case SVT_BUILT:
		case SVT_FILE:
		case SVT_OBJTYPE:
		to->varData.intValue = from->varData.intValue;
   150aa:	|      move.l 4(a0),d0
   150ae:	|      movea.l 8(sp),a0
   150b2:	|      move.l d0,4(a0)
		return TRUE;
   150b6:	|      moveq #1,d0
   150b8:	|  ,-- bra.w 15180 <copyMain+0x11a>

		case SVT_FASTARRAY:
		to->varData.fastArray = from->varData.fastArray;
   150bc:	|  |   movea.l 4(sp),a0
   150c0:	|  |   move.l 4(a0),d0
   150c4:	|  |   movea.l 8(sp),a0
   150c8:	|  |   move.l d0,4(a0)
		to->varData.fastArray -> timesUsed ++;
   150cc:	|  |   movea.l 8(sp),a0
   150d0:	|  |   movea.l 4(a0),a0
   150d4:	|  |   move.l 8(a0),d0
   150d8:	|  |   addq.l #1,d0
   150da:	|  |   move.l d0,8(a0)
		return TRUE;
   150de:	|  |   moveq #1,d0
   150e0:	|  +-- bra.w 15180 <copyMain+0x11a>

		case SVT_STRING:
		to->varData.theString = copyString (from->varData.theString);
   150e4:	|  |   movea.l 4(sp),a0
   150e8:	|  |   move.l 4(a0),d0
   150ec:	|  |   move.l d0,-(sp)
   150ee:	|  |   jsr b8 <copyString>
   150f4:	|  |   addq.l #4,sp
   150f6:	|  |   movea.l 8(sp),a0
   150fa:	|  |   move.l d0,4(a0)
		return to->varData.theString ? TRUE : FALSE;
   150fe:	|  |   movea.l 8(sp),a0
   15102:	|  |   move.l 4(a0),d0
   15106:	|  |   sne d0
   15108:	|  |   neg.b d0
   1510a:	|  |   move.b d0,d0
   1510c:	|  |   andi.w #255,d0
   15110:	|  +-- bra.s 15180 <copyMain+0x11a>

		case SVT_STACK:
		to->varData.theStack = from->varData.theStack;
   15112:	|  |   movea.l 4(sp),a0
   15116:	|  |   move.l 4(a0),d0
   1511a:	|  |   movea.l 8(sp),a0
   1511e:	|  |   move.l d0,4(a0)
		to->varData.theStack -> timesUsed ++;
   15122:	|  |   movea.l 8(sp),a0
   15126:	|  |   movea.l 4(a0),a0
   1512a:	|  |   move.l 8(a0),d0
   1512e:	|  |   addq.l #1,d0
   15130:	|  |   move.l d0,8(a0)
		return TRUE;
   15134:	|  |   moveq #1,d0
   15136:	|  +-- bra.s 15180 <copyMain+0x11a>

		case SVT_COSTUME:
		to->varData.costumeHandler = from->varData.costumeHandler;
   15138:	|  |   movea.l 4(sp),a0
   1513c:	|  |   move.l 4(a0),d0
   15140:	|  |   movea.l 8(sp),a0
   15144:	|  |   move.l d0,4(a0)
		return TRUE;
   15148:	|  |   moveq #1,d0
   1514a:	|  +-- bra.s 15180 <copyMain+0x11a>

		case SVT_ANIM:
		to->varData.animHandler = copyAnim (from->varData.animHandler);
   1514c:	|  |   movea.l 4(sp),a0
   15150:	|  |   move.l 4(a0),d0
   15154:	|  |   move.l d0,-(sp)
   15156:	|  |   jsr 9980 <copyAnim>
   1515c:	|  |   addq.l #4,sp
   1515e:	|  |   movea.l 8(sp),a0
   15162:	|  |   move.l d0,4(a0)
		return TRUE;
   15166:	|  |   moveq #1,d0
   15168:	|  +-- bra.s 15180 <copyMain+0x11a>

		case SVT_NULL:
		return TRUE;
   1516a:	|  |   moveq #1,d0
   1516c:	|  +-- bra.s 15180 <copyMain+0x11a>

		default:
		break;
   1516e:	'--|-> nop
	}
	KPrintF("Unknown value type");
   15170:	   |   pea 1a5f4 <PutChar+0x23aa>
   15176:	   |   jsr 177a8 <KPrintF>
   1517c:	   |   addq.l #4,sp
	return FALSE;
   1517e:	   |   clr.w d0
}
   15180:	   '-> rts

00015182 <copyVariable>:

BOOL copyVariable (const struct variable *from, struct variable *to) {
	unlinkVar (to);
   15182:	move.l 8(sp),-(sp)
   15186:	jsr 14f16 <unlinkVar>
   1518c:	addq.l #4,sp
	return copyMain(from, to);
   1518e:	move.l 8(sp),-(sp)
   15192:	move.l 8(sp),-(sp)
   15196:	jsr 15066 <copyMain>
   1519c:	addq.l #8,sp
}
   1519e:	rts

000151a0 <getAnimationFromVar>:

struct personaAnimation * getAnimationFromVar (struct variable *thisVar) {
	if (thisVar->varType == SVT_ANIM)
   151a0:	       movea.l 4(sp),a0
   151a4:	       move.l (a0),d0
   151a6:	       moveq #8,d1
   151a8:	       cmp.l d0,d1
   151aa:	   ,-- bne.s 151c0 <getAnimationFromVar+0x20>
		return copyAnim (thisVar->varData.animHandler);
   151ac:	   |   movea.l 4(sp),a0
   151b0:	   |   move.l 4(a0),d0
   151b4:	   |   move.l d0,-(sp)
   151b6:	   |   jsr 9980 <copyAnim>
   151bc:	   |   addq.l #4,sp
   151be:	,--|-- bra.s 15206 <getAnimationFromVar+0x66>

	if (thisVar->varType == SVT_INT && thisVar->varData.intValue == 0)
   151c0:	|  '-> movea.l 4(sp),a0
   151c4:	|      move.l (a0),d0
   151c6:	|      moveq #1,d1
   151c8:	|      cmp.l d0,d1
   151ca:	|  ,-- bne.s 151de <getAnimationFromVar+0x3e>
   151cc:	|  |   movea.l 4(sp),a0
   151d0:	|  |   move.l 4(a0),d0
   151d4:	|  +-- bne.s 151de <getAnimationFromVar+0x3e>
		return makeNullAnim();
   151d6:	|  |   jsr b1b2 <makeNullAnim>
   151dc:	+--|-- bra.s 15206 <getAnimationFromVar+0x66>

	KPrintF("Expecting an animation variable; found variable of type", typeName[thisVar->varType]);
   151de:	|  '-> movea.l 4(sp),a0
   151e2:	|      move.l (a0),d0
   151e4:	|      add.l d0,d0
   151e6:	|      movea.l d0,a1
   151e8:	|      adda.l d0,a1
   151ea:	|      lea 1ce84 <typeName>,a0
   151f0:	|      move.l (0,a1,a0.l),d0
   151f4:	|      move.l d0,-(sp)
   151f6:	|      pea 1a4e0 <PutChar+0x2296>
   151fc:	|      jsr 177a8 <KPrintF>
   15202:	|      addq.l #8,sp
	return NULL;
   15204:	|      moveq #0,d0
}
   15206:	'----> rts

00015208 <getBoolean>:

BOOL getBoolean (const struct variable *from) {
	switch (from->varType) {
   15208:	       movea.l 4(sp),a0
   1520c:	       move.l (a0),d0
   1520e:	       moveq #10,d1
   15210:	       cmp.l d0,d1
   15212:	,----- bcs.w 15298 <getBoolean+0x90>
   15216:	|      add.l d0,d0
   15218:	|      movea.l d0,a0
   1521a:	|      adda.l #86566,a0
   15220:	|      move.w (a0),d0
   15222:	|      jmp (15226 <getBoolean+0x1e>,pc,d0.w)
   15226:	|      ori.b #26,(a6)
   1522a:	|      ori.w #68,(114,a2,d0.w)
   15230:	|      ori.w #46,(114,a2,d0.w)
   15236:	|      ori.w #114,(90,a2,d0.w)
		case SVT_NULL:
		return FALSE;
   1523c:	|      clr.w d0
   1523e:	|  ,-- bra.s 1529c <getBoolean+0x94>

		case SVT_INT:
		return (BOOL) (from->varData.intValue != 0);
   15240:	|  |   movea.l 4(sp),a0
   15244:	|  |   move.l 4(a0),d0
   15248:	|  |   sne d0
   1524a:	|  |   neg.b d0
   1524c:	|  |   move.b d0,d0
   1524e:	|  |   andi.w #255,d0
   15252:	|  +-- bra.s 1529c <getBoolean+0x94>

		case SVT_STACK:
		return (BOOL) (from->varData.theStack -> first != NULL);
   15254:	|  |   movea.l 4(sp),a0
   15258:	|  |   movea.l 4(a0),a0
   1525c:	|  |   move.l (a0),d0
   1525e:	|  |   sne d0
   15260:	|  |   neg.b d0
   15262:	|  |   move.b d0,d0
   15264:	|  |   andi.w #255,d0
   15268:	|  +-- bra.s 1529c <getBoolean+0x94>

		case SVT_STRING:
		return (BOOL) (from->varData.theString[0] != 0);
   1526a:	|  |   movea.l 4(sp),a0
   1526e:	|  |   movea.l 4(a0),a0
   15272:	|  |   move.b (a0),d0
   15274:	|  |   sne d0
   15276:	|  |   neg.b d0
   15278:	|  |   move.b d0,d0
   1527a:	|  |   andi.w #255,d0
   1527e:	|  +-- bra.s 1529c <getBoolean+0x94>

		case SVT_FASTARRAY:
		return (BOOL) (from->varData.fastArray -> size != 0);
   15280:	|  |   movea.l 4(sp),a0
   15284:	|  |   movea.l 4(a0),a0
   15288:	|  |   move.l 4(a0),d0
   1528c:	|  |   sne d0
   1528e:	|  |   neg.b d0
   15290:	|  |   move.b d0,d0
   15292:	|  |   andi.w #255,d0
   15296:	|  +-- bra.s 1529c <getBoolean+0x94>

		default:
		break;
   15298:	'--|-> nop
	}
	return TRUE;
   1529a:	   |   moveq #1,d0
}
   1529c:	   '-> rts

0001529e <getTextFromAnyVar>:

char * getTextFromAnyVar (const struct variable *from) {
   1529e:	      ,----------> lea -76(sp),sp
   152a2:	      |            move.l a6,-(sp)
	switch (from->varType) {
   152a4:	      |            movea.l 84(sp),a0
   152a8:	      |            move.l (a0),d0
   152aa:	      |            moveq #10,d1
   152ac:	      |            cmp.l d0,d1
   152ae:	,-----|----------- bcs.w 1554c <getTextFromAnyVar+0x2ae>
   152b2:	|     |            add.l d0,d0
   152b4:	|     |            movea.l d0,a0
   152b6:	|     |            adda.l #86722,a0
   152bc:	|     |            move.w (a0),d0
   152be:	|     |            jmp (152c2 <getTextFromAnyVar+0x24>,pc,d0.w)
   152c2:	|     |            .short 0x028a
   152c4:	|     |            bset d0,(a0)+
   152c6:	|     |            .short 0x028a
   152c8:	|     |            ori.b #-118,(a6)
   152cc:	|     |            andi.b #8,ccr
   152d0:	|     |            andi.w #650,-(a0)
   152d4:	|     |            .short 0x028a
   152d6:	|     |            ori.b #111,84(a4)
		case SVT_STRING:
		return copyString (from->varData.theString);
   152dc:	|     |            move.l 4(a0),d0
   152e0:	|     |            move.l d0,-(sp)
   152e2:	|     |            jsr b8 <copyString>
   152e8:	|     |            addq.l #4,sp
   152ea:	|  ,--|----------- bra.w 1556e <getTextFromAnyVar+0x2d0>

		case SVT_FASTARRAY:
		{
			char * builder = copyString ("FAST:");
   152ee:	|  |  |            pea 1a607 <PutChar+0x23bd>
   152f4:	|  |  |            jsr b8 <copyString>
   152fa:	|  |  |            addq.l #4,sp
   152fc:	|  |  |            move.l d0,76(sp)
			char * builder2;
			char * grabText;

			for (int i = 0; i < from->varData.fastArray -> size; i ++) {
   15300:	|  |  |            clr.l 72(sp)
   15304:	|  |  |     ,----- bra.w 153ae <getTextFromAnyVar+0x110>
				builder2 = joinStrings (builder, " ");
   15308:	|  |  |  ,--|----> pea 1a60d <PutChar+0x23c3>
   1530e:	|  |  |  |  |      move.l 80(sp),-(sp)
   15312:	|  |  |  |  |      jsr 141f4 <joinStrings>
   15318:	|  |  |  |  |      addq.l #8,sp
   1531a:	|  |  |  |  |      move.l d0,60(sp)
				if (! builder2) return NULL;
   1531e:	|  |  |  |  |  ,-- bne.s 15326 <getTextFromAnyVar+0x88>
   15320:	|  |  |  |  |  |   moveq #0,d0
   15322:	|  +--|--|--|--|-- bra.w 1556e <getTextFromAnyVar+0x2d0>
				FreeVec(builder);
   15326:	|  |  |  |  |  '-> move.l 76(sp),56(sp)
   1532c:	|  |  |  |  |      move.l 1cfb6 <SysBase>,d0
   15332:	|  |  |  |  |      movea.l d0,a6
   15334:	|  |  |  |  |      movea.l 56(sp),a1
   15338:	|  |  |  |  |      jsr -690(a6)
				grabText = getTextFromAnyVar (&from->varData.fastArray -> fastVariables[i]);
   1533c:	|  |  |  |  |      movea.l 84(sp),a0
   15340:	|  |  |  |  |      movea.l 4(a0),a0
   15344:	|  |  |  |  |      move.l (a0),d1
   15346:	|  |  |  |  |      move.l 72(sp),d0
   1534a:	|  |  |  |  |      lsl.l #3,d0
   1534c:	|  |  |  |  |      add.l d1,d0
   1534e:	|  |  |  |  |      move.l d0,-(sp)
   15350:	|  |  +--|--|----- jsr 1529e <getTextFromAnyVar>(pc)
   15354:	|  |  |  |  |      addq.l #4,sp
   15356:	|  |  |  |  |      move.l d0,52(sp)
				builder = joinStrings (builder2, grabText);
   1535a:	|  |  |  |  |      move.l 52(sp),-(sp)
   1535e:	|  |  |  |  |      move.l 64(sp),-(sp)
   15362:	|  |  |  |  |      jsr 141f4 <joinStrings>
   15368:	|  |  |  |  |      addq.l #8,sp
   1536a:	|  |  |  |  |      move.l d0,76(sp)
				if (! builder) return NULL;
   1536e:	|  |  |  |  |  ,-- bne.s 15376 <getTextFromAnyVar+0xd8>
   15370:	|  |  |  |  |  |   moveq #0,d0
   15372:	|  +--|--|--|--|-- bra.w 1556e <getTextFromAnyVar+0x2d0>
				FreeVec(grabText);
   15376:	|  |  |  |  |  '-> move.l 52(sp),48(sp)
   1537c:	|  |  |  |  |      move.l 1cfb6 <SysBase>,d0
   15382:	|  |  |  |  |      movea.l d0,a6
   15384:	|  |  |  |  |      movea.l 48(sp),a1
   15388:	|  |  |  |  |      jsr -690(a6)
				grabText = NULL;
   1538c:	|  |  |  |  |      clr.l 52(sp)
				FreeVec(builder2);
   15390:	|  |  |  |  |      move.l 60(sp),44(sp)
   15396:	|  |  |  |  |      move.l 1cfb6 <SysBase>,d0
   1539c:	|  |  |  |  |      movea.l d0,a6
   1539e:	|  |  |  |  |      movea.l 44(sp),a1
   153a2:	|  |  |  |  |      jsr -690(a6)
				builder2 = NULL;
   153a6:	|  |  |  |  |      clr.l 60(sp)
			for (int i = 0; i < from->varData.fastArray -> size; i ++) {
   153aa:	|  |  |  |  |      addq.l #1,72(sp)
   153ae:	|  |  |  |  '----> movea.l 84(sp),a0
   153b2:	|  |  |  |         movea.l 4(a0),a0
   153b6:	|  |  |  |         move.l 4(a0),d0
   153ba:	|  |  |  |         cmp.l 72(sp),d0
   153be:	|  |  |  '-------- bgt.w 15308 <getTextFromAnyVar+0x6a>
			}
			return builder;
   153c2:	|  |  |            move.l 76(sp),d0
   153c6:	|  +--|----------- bra.w 1556e <getTextFromAnyVar+0x2d0>
		}

		case SVT_STACK:
		{
			char * builder = copyString ("ARRAY:");
   153ca:	|  |  |            pea 1a60f <PutChar+0x23c5>
   153d0:	|  |  |            jsr b8 <copyString>
   153d6:	|  |  |            addq.l #4,sp
   153d8:	|  |  |            move.l d0,68(sp)
			char * builder2;
			char * grabText;

			struct variableStack * stacky = from->varData.theStack -> first;
   153dc:	|  |  |            movea.l 84(sp),a0
   153e0:	|  |  |            movea.l 4(a0),a0
   153e4:	|  |  |            move.l (a0),64(sp)

			while (stacky) {
   153e8:	|  |  |     ,----- bra.w 1548a <getTextFromAnyVar+0x1ec>
				builder2 = joinStrings (builder, " ");
   153ec:	|  |  |  ,--|----> pea 1a60d <PutChar+0x23c3>
   153f2:	|  |  |  |  |      move.l 72(sp),-(sp)
   153f6:	|  |  |  |  |      jsr 141f4 <joinStrings>
   153fc:	|  |  |  |  |      addq.l #8,sp
   153fe:	|  |  |  |  |      move.l d0,36(sp)
				if (! builder2) return NULL;
   15402:	|  |  |  |  |  ,-- bne.s 1540a <getTextFromAnyVar+0x16c>
   15404:	|  |  |  |  |  |   moveq #0,d0
   15406:	|  +--|--|--|--|-- bra.w 1556e <getTextFromAnyVar+0x2d0>
				FreeVec(builder);
   1540a:	|  |  |  |  |  '-> move.l 68(sp),32(sp)
   15410:	|  |  |  |  |      move.l 1cfb6 <SysBase>,d0
   15416:	|  |  |  |  |      movea.l d0,a6
   15418:	|  |  |  |  |      movea.l 32(sp),a1
   1541c:	|  |  |  |  |      jsr -690(a6)
				grabText = getTextFromAnyVar (&stacky -> thisVar);
   15420:	|  |  |  |  |      move.l 64(sp),d0
   15424:	|  |  |  |  |      move.l d0,-(sp)
   15426:	|  |  '--|--|----- jsr 1529e <getTextFromAnyVar>(pc)
   1542a:	|  |     |  |      addq.l #4,sp
   1542c:	|  |     |  |      move.l d0,28(sp)
				builder = joinStrings (builder2, grabText);
   15430:	|  |     |  |      move.l 28(sp),-(sp)
   15434:	|  |     |  |      move.l 40(sp),-(sp)
   15438:	|  |     |  |      jsr 141f4 <joinStrings>
   1543e:	|  |     |  |      addq.l #8,sp
   15440:	|  |     |  |      move.l d0,68(sp)
				if (! builder) return NULL;
   15444:	|  |     |  |  ,-- bne.s 1544c <getTextFromAnyVar+0x1ae>
   15446:	|  |     |  |  |   moveq #0,d0
   15448:	|  +-----|--|--|-- bra.w 1556e <getTextFromAnyVar+0x2d0>
				FreeVec(grabText);
   1544c:	|  |     |  |  '-> move.l 28(sp),24(sp)
   15452:	|  |     |  |      move.l 1cfb6 <SysBase>,d0
   15458:	|  |     |  |      movea.l d0,a6
   1545a:	|  |     |  |      movea.l 24(sp),a1
   1545e:	|  |     |  |      jsr -690(a6)
				grabText = NULL;
   15462:	|  |     |  |      clr.l 28(sp)
				FreeVec(builder2);
   15466:	|  |     |  |      move.l 36(sp),20(sp)
   1546c:	|  |     |  |      move.l 1cfb6 <SysBase>,d0
   15472:	|  |     |  |      movea.l d0,a6
   15474:	|  |     |  |      movea.l 20(sp),a1
   15478:	|  |     |  |      jsr -690(a6)
				builder2 = NULL;
   1547c:	|  |     |  |      clr.l 36(sp)
				stacky = stacky -> next;
   15480:	|  |     |  |      movea.l 64(sp),a0
   15484:	|  |     |  |      move.l 8(a0),64(sp)
			while (stacky) {
   1548a:	|  |     |  '----> tst.l 64(sp)
   1548e:	|  |     '-------- bne.w 153ec <getTextFromAnyVar+0x14e>
			}
			return builder;
   15492:	|  |               move.l 68(sp),d0
   15496:	|  +-------------- bra.w 1556e <getTextFromAnyVar+0x2d0>
		}

		case SVT_INT:
		{
			char * buff = AllocVec(10, MEMF_ANY);
   1549a:	|  |               moveq #10,d0
   1549c:	|  |               move.l d0,16(sp)
   154a0:	|  |               clr.l 12(sp)
   154a4:	|  |               move.l 1cfb6 <SysBase>,d0
   154aa:	|  |               movea.l d0,a6
   154ac:	|  |               move.l 16(sp),d0
   154b0:	|  |               move.l 12(sp),d1
   154b4:	|  |               jsr -684(a6)
   154b8:	|  |               move.l d0,8(sp)
   154bc:	|  |               move.l 8(sp),d0
   154c0:	|  |               move.l d0,4(sp)
			if (! buff) {
   154c4:	|  |           ,-- bne.s 154da <getTextFromAnyVar+0x23c>
				KPrintF("getTextFromAnyVar: Cannot allocate Memory");
   154c6:	|  |           |   pea 1a616 <PutChar+0x23cc>
   154cc:	|  |           |   jsr 177a8 <KPrintF>
   154d2:	|  |           |   addq.l #4,sp
				return NULL;
   154d4:	|  |           |   moveq #0,d0
   154d6:	|  +-----------|-- bra.w 1556e <getTextFromAnyVar+0x2d0>
			}
			sprintf (buff, "%i", from->varData.intValue);
   154da:	|  |           '-> movea.l 84(sp),a0
   154de:	|  |               move.l 4(a0),d0
   154e2:	|  |               move.l d0,-(sp)
   154e4:	|  |               pea 1a640 <PutChar+0x23f6>
   154ea:	|  |               move.l 12(sp),-(sp)
   154ee:	|  |               jsr 144d2 <sprintf>
   154f4:	|  |               lea 12(sp),sp
			return buff;
   154f8:	|  |               move.l 4(sp),d0
   154fc:	|  +-------------- bra.s 1556e <getTextFromAnyVar+0x2d0>
		}

		case SVT_FILE:
		{

			return joinStrings ("", resourceNameFromNum (from->varData.intValue));
   154fe:	|  |               movea.l 84(sp),a0
   15502:	|  |               move.l 4(a0),d0
   15506:	|  |               move.l d0,-(sp)
   15508:	|  |               jsr 4d5a <resourceNameFromNum>
   1550e:	|  |               addq.l #4,sp
   15510:	|  |               move.l d0,-(sp)
   15512:	|  |               pea 18f57 <PutChar+0xd0d>
   15518:	|  |               jsr 141f4 <joinStrings>
   1551e:	|  |               addq.l #8,sp
   15520:	|  +-------------- bra.s 1556e <getTextFromAnyVar+0x2d0>
		}

		case SVT_OBJTYPE:
		{
			struct objectType * thisType = findObjectType (from->varData.intValue);
   15522:	|  |               movea.l 84(sp),a0
   15526:	|  |               move.l 4(a0),d0
   1552a:	|  |               move.l d0,-(sp)
   1552c:	|  |               jsr d9dc <findObjectType>
   15532:	|  |               addq.l #4,sp
   15534:	|  |               move.l d0,40(sp)
			if (thisType) return copyString (thisType -> screenName);
   15538:	+--|-------------- beq.s 1554c <getTextFromAnyVar+0x2ae>
   1553a:	|  |               movea.l 40(sp),a0
   1553e:	|  |               move.l (a0),d0
   15540:	|  |               move.l d0,-(sp)
   15542:	|  |               jsr b8 <copyString>
   15548:	|  |               addq.l #4,sp
   1554a:	|  +-------------- bra.s 1556e <getTextFromAnyVar+0x2d0>
		}

		default:
		break;
   1554c:	'--|-------------> nop
	}

	return copyString (typeName[from->varType]);
   1554e:	   |               movea.l 84(sp),a0
   15552:	   |               move.l (a0),d0
   15554:	   |               add.l d0,d0
   15556:	   |               movea.l d0,a1
   15558:	   |               adda.l d0,a1
   1555a:	   |               lea 1ce84 <typeName>,a0
   15560:	   |               move.l (0,a1,a0.l),d0
   15564:	   |               move.l d0,-(sp)
   15566:	   |               jsr b8 <copyString>
   1556c:	   |               addq.l #4,sp
}
   1556e:	   '-------------> movea.l (sp)+,a6
   15570:	                   lea 76(sp),sp
   15574:	                   rts

00015576 <newAnimationVariable>:


void newAnimationVariable (struct variable *thisVar, struct personaAnimation * i) {
	unlinkVar (thisVar);
   15576:	move.l 4(sp),-(sp)
   1557a:	jsr 14f16 <unlinkVar>
   15580:	addq.l #4,sp
	thisVar->varType = SVT_ANIM;
   15582:	movea.l 4(sp),a0
   15586:	moveq #8,d0
   15588:	move.l d0,(a0)
	thisVar->varData.animHandler = i;
   1558a:	movea.l 4(sp),a0
   1558e:	move.l 8(sp),4(a0)
}
   15594:	nop
   15596:	rts

00015598 <newCostumeVariable>:

void newCostumeVariable (struct variable * thisVar, struct persona * i) {
	unlinkVar(thisVar);
   15598:	move.l 4(sp),-(sp)
   1559c:	jsr 14f16 <unlinkVar>
   155a2:	addq.l #4,sp
	thisVar->varType = SVT_COSTUME;
   155a4:	movea.l 4(sp),a0
   155a8:	moveq #9,d0
   155aa:	move.l d0,(a0)
	thisVar->varData.costumeHandler = i;
   155ac:	movea.l 4(sp),a0
   155b0:	move.l 8(sp),4(a0)
}
   155b6:	nop
   155b8:	rts

000155ba <setVariable>:

void setVariable (struct variable *thisVar, enum variableType vT, int value) {
	unlinkVar (thisVar);	thisVar->varType = vT;
   155ba:	move.l 4(sp),-(sp)
   155be:	jsr 14f16 <unlinkVar>
   155c4:	addq.l #4,sp
   155c6:	movea.l 4(sp),a0
   155ca:	move.l 8(sp),(a0)
	thisVar->varData.intValue = value;}
   155ce:	movea.l 4(sp),a0
   155d2:	move.l 12(sp),4(a0)
   155d8:	nop
   155da:	rts

000155dc <stackGetByIndex>:

struct variable * stackGetByIndex (struct variableStack * vS, unsigned int theIndex) {
    while (theIndex--) {
   155dc:	      ,-- bra.s 155ee <stackGetByIndex+0x12>
        vS = vS->next;
   155de:	,-----|-> movea.l 4(sp),a0
   155e2:	|     |   move.l 8(a0),4(sp)
        if (!vS) {
   155e8:	|     +-- bne.s 155ee <stackGetByIndex+0x12>
            return NULL;
   155ea:	|     |   moveq #0,d0
   155ec:	|  ,--|-- bra.s 15602 <stackGetByIndex+0x26>
    while (theIndex--) {
   155ee:	|  |  '-> move.l 8(sp),d0
   155f2:	|  |      move.l d0,d1
   155f4:	|  |      subq.l #1,d1
   155f6:	|  |      move.l d1,8(sp)
   155fa:	|  |      tst.l d0
   155fc:	'--|----- bne.s 155de <stackGetByIndex+0x2>
        }
    }
    return &(vS->thisVar);
   155fe:	   |      move.l 4(sp),d0
}
   15602:	   '----> rts

00015604 <stackFindLast>:

// Would be a LOT better just to keep this up to date in deletevarfromstack function... ah well
struct variableStack * stackFindLast (struct variableStack * hunt) {
	if (hunt == NULL)
   15604:	          tst.l 4(sp)
   15608:	      ,-- bne.s 15618 <stackFindLast+0x14>
		return NULL;
   1560a:	      |   moveq #0,d0
   1560c:	,-----|-- bra.s 15626 <stackFindLast+0x22>

	while (hunt->next)
		hunt = hunt->next;
   1560e:	|  ,--|-> movea.l 4(sp),a0
   15612:	|  |  |   move.l 8(a0),4(sp)
	while (hunt->next)
   15618:	|  |  '-> movea.l 4(sp),a0
   1561c:	|  |      move.l 8(a0),d0
   15620:	|  '----- bne.s 1560e <stackFindLast+0xa>

	return hunt;
   15622:	|         move.l 4(sp),d0
}
   15626:	'-------> rts

00015628 <stackSize>:

int stackSize (const struct stackHandler * me) {
   15628:	       subq.l #8,sp
	int r = 0;
   1562a:	       clr.l 4(sp)
	struct variableStack * a = me -> first;
   1562e:	       movea.l 12(sp),a0
   15632:	       move.l (a0),(sp)
	while (a) {
   15634:	   ,-- bra.s 15640 <stackSize+0x18>
		r ++;
   15636:	,--|-> addq.l #1,4(sp)
		a = a -> next;
   1563a:	|  |   movea.l (sp),a0
   1563c:	|  |   move.l 8(a0),(sp)
	while (a) {
   15640:	|  '-> tst.l (sp)
   15642:	'----- bne.s 15636 <stackSize+0xe>
	}
	return r;
   15644:	       move.l 4(sp),d0
}
   15648:	       addq.l #8,sp
   1564a:	       rts

0001564c <trimStack>:

void trimStack (struct variableStack ** stack) {
   1564c:	subq.l #8,sp
   1564e:	move.l a6,-(sp)

	struct variableStack* killMe = *stack;
   15650:	movea.l 16(sp),a0
   15654:	move.l (a0),8(sp)

	*stack = (*stack)->next;
   15658:	movea.l 16(sp),a0
   1565c:	movea.l (a0),a0
   1565e:	move.l 8(a0),d0
   15662:	movea.l 16(sp),a0
   15666:	move.l d0,(a0)

	// When calling this, we've ALWAYS checked that stack != NULL
	unlinkVar (&(killMe -> thisVar));
   15668:	move.l 8(sp),d0
   1566c:	move.l d0,-(sp)
   1566e:	jsr 14f16 <unlinkVar>
   15674:	addq.l #4,sp
	FreeVec(killMe);
   15676:	move.l 8(sp),4(sp)
   1567c:	move.l 1cfb6 <SysBase>,d0
   15682:	movea.l d0,a6
   15684:	movea.l 4(sp),a1
   15688:	jsr -690(a6)
   1568c:	nop
   1568e:	movea.l (sp)+,a6
   15690:	addq.l #8,sp
   15692:	rts

00015694 <freeze>:
extern BOOL backdropExists;

struct frozenStuffStruct * frozenStuff = NULL;


BOOL freeze () {
   15694:	       lea -52(sp),sp
   15698:	       move.l a6,-(sp)
	KPrintF("calling freeze()\n");
   1569a:	       pea 1a643 <PutChar+0x23f9>
   156a0:	       jsr 177a8 <KPrintF>
   156a6:	       addq.l #4,sp

	struct frozenStuffStruct * newFreezer = (struct frozenStuffStruct *) AllocVec(sizeof(struct frozenStuffStruct), MEMF_ANY);
   156a8:	       moveq #68,d0
   156aa:	       move.l d0,52(sp)
   156ae:	       clr.l 48(sp)
   156b2:	       move.l 1cfb6 <SysBase>,d0
   156b8:	       movea.l d0,a6
   156ba:	       move.l 52(sp),d0
   156be:	       move.l 48(sp),d1
   156c2:	       jsr -684(a6)
   156c6:	       move.l d0,44(sp)
   156ca:	       move.l 44(sp),d0
   156ce:	       move.l d0,40(sp)
	if (!newFreezer) return FALSE;
   156d2:	   ,-- bne.s 156da <freeze+0x46>
   156d4:	   |   clr.w d0
   156d6:	,--|-- bra.w 1586c <freeze+0x1d8>

	CstFreeze();
   156da:	|  '-> jsr 1a6c <CstFreeze>

	// Grab a copy of the current scene
	//ToDo: Amiga Graphics handling here	

	int picWidth = sceneWidth;
   156e0:	|      move.l 1d04e <sceneWidth>,d0
   156e6:	|      move.l d0,36(sp)
	int picHeight = sceneHeight;	
   156ea:	|      move.l 1d052 <sceneHeight>,d0
   156f0:	|      move.l d0,32(sp)



	newFreezer -> sceneWidth = sceneWidth;
   156f4:	|      move.l 1d04e <sceneWidth>,d0
   156fa:	|      movea.l 40(sp),a0
   156fe:	|      move.l d0,48(a0)
	newFreezer -> sceneHeight = sceneHeight;
   15702:	|      move.l 1d052 <sceneHeight>,d0
   15708:	|      movea.l 40(sp),a0
   1570c:	|      move.l d0,52(a0)
	newFreezer -> cameraX = cameraX;
   15710:	|      move.l 1d06c <cameraX>,d0
   15716:	|      movea.l 40(sp),a0
   1571a:	|      move.l d0,40(a0)
	newFreezer -> cameraY = cameraY;
   1571e:	|      move.l 1d070 <cameraY>,d0
   15724:	|      movea.l 40(sp),a0
   15728:	|      move.l d0,44(a0)
	newFreezer -> cameraZoom = cameraZoom;
   1572c:	|      move.l 1c946 <cameraZoom>,d0
   15732:	|      movea.l 40(sp),a0
   15736:	|      move.l d0,56(a0)
	// resizeBackdrop kills parallax stuff, light map, z-buffer...
	/*if (! resizeBackdrop (winWidth, winHeight)) {
		KPrintF("Can't create new temporary backdrop buffer");
	}*/

	backdropExists = TRUE;
   1573a:	|      move.w #1,1d05a <backdropExists>

	newFreezer -> allPeople = allPeople;
   15742:	|      move.l 1d016 <allPeople>,d0
   15748:	|      movea.l 40(sp),a0
   1574c:	|      move.l d0,(a0)
	allPeople = NULL;
   1574e:	|      clr.l 1d016 <allPeople>

	struct statusStuff * newStatusStuff = (struct statusStuff *) AllocVec(sizeof(struct statusStuff), MEMF_ANY);
   15754:	|      moveq #42,d0
   15756:	|      move.l d0,28(sp)
   1575a:	|      clr.l 24(sp)
   1575e:	|      move.l 1cfb6 <SysBase>,d0
   15764:	|      movea.l d0,a6
   15766:	|      move.l 28(sp),d0
   1576a:	|      move.l 24(sp),d1
   1576e:	|      jsr -684(a6)
   15772:	|      move.l d0,20(sp)
   15776:	|      move.l 20(sp),d0
   1577a:	|      move.l d0,16(sp)
	if (!newStatusStuff) return FALSE;	
   1577e:	|  ,-- bne.s 15786 <freeze+0xf2>
   15780:	|  |   clr.w d0
   15782:	+--|-- bra.w 1586c <freeze+0x1d8>

	newFreezer -> allScreenRegions = allScreenRegions;
   15786:	|  '-> move.l 1d0c2 <allScreenRegions>,d0
   1578c:	|      movea.l 40(sp),a0
   15790:	|      move.l d0,4(a0)
	allScreenRegions = NULL;
   15794:	|      clr.l 1d0c2 <allScreenRegions>
	overRegion = NULL;
   1579a:	|      clr.l 1d0c6 <overRegion>

	newFreezer -> mouseCursorAnim = mouseCursorAnim;
   157a0:	|      move.l 1ceae <mouseCursorAnim>,d0
   157a6:	|      movea.l 40(sp),a0
   157aa:	|      move.l d0,32(a0)
	newFreezer -> mouseCursorFrameNum = mouseCursorFrameNum;
   157ae:	|      move.l 1ceb2 <mouseCursorFrameNum>,d0
   157b4:	|      movea.l 40(sp),a0
   157b8:	|      move.l d0,36(a0)
	mouseCursorAnim = makeNullAnim ();
   157bc:	|      jsr b1b2 <makeNullAnim>
   157c2:	|      move.l d0,1ceae <mouseCursorAnim>
	mouseCursorFrameNum = 0;
   157c8:	|      clr.l 1ceb2 <mouseCursorFrameNum>

	newFreezer -> zBuffer = zBuffer;
   157ce:	|      move.l 1d012 <zBuffer>,d0
   157d4:	|      movea.l 40(sp),a0
   157d8:	|      move.l d0,60(a0)
	zBuffer = NULL;
   157dc:	|      clr.l 1d012 <zBuffer>

	newFreezer -> speech = speech;
   157e2:	|      move.l 1cefa <speech>,d0
   157e8:	|      movea.l 40(sp),a0
   157ec:	|      move.l d0,20(a0)
	initSpeech ();
   157f0:	|      jsr 4250 <initSpeech>

	newFreezer -> currentEvents = currentEvents;
   157f6:	|      move.l 1c924 <currentEvents>,d0
   157fc:	|      movea.l 40(sp),a0
   15800:	|      move.l d0,28(a0)
	currentEvents = (struct eventHandlers *) AllocVec(sizeof(struct eventHandlers), MEMF_ANY);
   15804:	|      moveq #28,d0
   15806:	|      move.l d0,12(sp)
   1580a:	|      clr.l 8(sp)
   1580e:	|      move.l 1cfb6 <SysBase>,d0
   15814:	|      movea.l d0,a6
   15816:	|      move.l 12(sp),d0
   1581a:	|      move.l 8(sp),d1
   1581e:	|      jsr -684(a6)
   15822:	|      move.l d0,4(sp)
   15826:	|      move.l 4(sp),d0
   1582a:	|      move.l d0,1c924 <currentEvents>
	if (!currentEvents) return FALSE;
   15830:	|      move.l 1c924 <currentEvents>,d0
   15836:	|  ,-- bne.s 1583c <freeze+0x1a8>
   15838:	|  |   clr.w d0
   1583a:	+--|-- bra.s 1586c <freeze+0x1d8>
	memset ( currentEvents, 0, sizeof(struct eventHandlers));
   1583c:	|  '-> move.l 1c924 <currentEvents>,d0
   15842:	|      pea 1c <_start+0x1c>
   15846:	|      clr.l -(sp)
   15848:	|      move.l d0,-(sp)
   1584a:	|      jsr 1772c <memset>
   15850:	|      lea 12(sp),sp

	newFreezer -> next = frozenStuff;
   15854:	|      move.l 1d0a6 <frozenStuff>,d0
   1585a:	|      movea.l 40(sp),a0
   1585e:	|      move.l d0,64(a0)
	frozenStuff = newFreezer;
   15862:	|      move.l 40(sp),1d0a6 <frozenStuff>

	return TRUE;
   1586a:	|      moveq #1,d0
}
   1586c:	'----> movea.l (sp)+,a6
   1586e:	       lea 52(sp),sp
   15872:	       rts

00015874 <howFrozen>:

int howFrozen () {
   15874:	       subq.l #8,sp
	int a = 0;
   15876:	       clr.l 4(sp)
	struct frozenStuffStruct * f = frozenStuff;
   1587a:	       move.l 1d0a6 <frozenStuff>,(sp)
	while (f) {
   15880:	   ,-- bra.s 1588c <howFrozen+0x18>
		a ++;
   15882:	,--|-> addq.l #1,4(sp)
		f = f -> next;
   15886:	|  |   movea.l (sp),a0
   15888:	|  |   move.l 64(a0),(sp)
	while (f) {
   1588c:	|  '-> tst.l (sp)
   1588e:	'----- bne.s 15882 <howFrozen+0xe>
	}
	return a;
   15890:	       move.l 4(sp),d0
}
   15894:	       addq.l #8,sp
   15896:	       rts

00015898 <unfreeze>:

void unfreeze () {
   15898:	       lea -16(sp),sp
   1589c:	       move.l a6,-(sp)
	struct frozenStuffStruct * killMe = frozenStuff;
   1589e:	       move.l 1d0a6 <frozenStuff>,16(sp)

	if (! frozenStuff) return;
   158a6:	       move.l 1d0a6 <frozenStuff>,d0
   158ac:	,----- beq.w 15ae4 <unfreeze+0x24c>

	CstUnfreeze();
   158b0:	|      jsr 3dfa <CstUnfreeze>

	sceneWidth = frozenStuff -> sceneWidth;
   158b6:	|      movea.l 1d0a6 <frozenStuff>,a0
   158bc:	|      move.l 48(a0),d0
   158c0:	|      move.l d0,1d04e <sceneWidth>
	sceneHeight = frozenStuff -> sceneHeight;
   158c6:	|      movea.l 1d0a6 <frozenStuff>,a0
   158cc:	|      move.l 52(a0),d0
   158d0:	|      move.l d0,1d052 <sceneHeight>

	cameraX = frozenStuff -> cameraX;
   158d6:	|      movea.l 1d0a6 <frozenStuff>,a0
   158dc:	|      move.l 40(a0),d0
   158e0:	|      move.l d0,1d06c <cameraX>
	cameraY = frozenStuff -> cameraY;
   158e6:	|      movea.l 1d0a6 <frozenStuff>,a0
   158ec:	|      move.l 44(a0),d0
   158f0:	|      move.l d0,1d070 <cameraY>
	input.mouseX = (int)(input.mouseX * cameraZoom);
   158f6:	|      move.l 1cf6e <input+0xa>,d0
   158fc:	|      move.l d0,-(sp)
   158fe:	|      jsr 17bda <__floatsisf>
   15904:	|      addq.l #4,sp
   15906:	|      move.l d0,d1
   15908:	|      move.l 1c946 <cameraZoom>,d0
   1590e:	|      move.l d0,-(sp)
   15910:	|      move.l d1,-(sp)
   15912:	|      jsr 17c8c <__mulsf3>
   15918:	|      addq.l #8,sp
   1591a:	|      move.l d0,-(sp)
   1591c:	|      jsr 17b72 <__fixsfsi>
   15922:	|      addq.l #4,sp
   15924:	|      move.l d0,1cf6e <input+0xa>
	input.mouseY = (int)(input.mouseY * cameraZoom);
   1592a:	|      move.l 1cf72 <input+0xe>,d0
   15930:	|      move.l d0,-(sp)
   15932:	|      jsr 17bda <__floatsisf>
   15938:	|      addq.l #4,sp
   1593a:	|      move.l d0,d1
   1593c:	|      move.l 1c946 <cameraZoom>,d0
   15942:	|      move.l d0,-(sp)
   15944:	|      move.l d1,-(sp)
   15946:	|      jsr 17c8c <__mulsf3>
   1594c:	|      addq.l #8,sp
   1594e:	|      move.l d0,-(sp)
   15950:	|      jsr 17b72 <__fixsfsi>
   15956:	|      addq.l #4,sp
   15958:	|      move.l d0,1cf72 <input+0xe>
	cameraZoom = frozenStuff -> cameraZoom;
   1595e:	|      movea.l 1d0a6 <frozenStuff>,a0
   15964:	|      move.l 56(a0),d0
   15968:	|      move.l d0,1c946 <cameraZoom>
	input.mouseX = (int)(input.mouseX / cameraZoom);
   1596e:	|      move.l 1cf6e <input+0xa>,d0
   15974:	|      move.l d0,-(sp)
   15976:	|      jsr 17bda <__floatsisf>
   1597c:	|      addq.l #4,sp
   1597e:	|      move.l d0,d1
   15980:	|      move.l 1c946 <cameraZoom>,d0
   15986:	|      move.l d0,-(sp)
   15988:	|      move.l d1,-(sp)
   1598a:	|      jsr 17a90 <__divsf3>
   15990:	|      addq.l #8,sp
   15992:	|      move.l d0,-(sp)
   15994:	|      jsr 17b72 <__fixsfsi>
   1599a:	|      addq.l #4,sp
   1599c:	|      move.l d0,1cf6e <input+0xa>
	input.mouseY = (int)(input.mouseY / cameraZoom);
   159a2:	|      move.l 1cf72 <input+0xe>,d0
   159a8:	|      move.l d0,-(sp)
   159aa:	|      jsr 17bda <__floatsisf>
   159b0:	|      addq.l #4,sp
   159b2:	|      move.l d0,d1
   159b4:	|      move.l 1c946 <cameraZoom>,d0
   159ba:	|      move.l d0,-(sp)
   159bc:	|      move.l d1,-(sp)
   159be:	|      jsr 17a90 <__divsf3>
   159c4:	|      addq.l #8,sp
   159c6:	|      move.l d0,-(sp)
   159c8:	|      jsr 17b72 <__fixsfsi>
   159ce:	|      addq.l #4,sp
   159d0:	|      move.l d0,1cf72 <input+0xe>

	killAllPeople ();
   159d6:	|      jsr ae82 <killAllPeople>
	allPeople = frozenStuff -> allPeople;
   159dc:	|      movea.l 1d0a6 <frozenStuff>,a0
   159e2:	|      move.l (a0),d0
   159e4:	|      move.l d0,1d016 <allPeople>

	killAllRegions ();
   159ea:	|      jsr 15fb8 <killAllRegions>
	allScreenRegions = frozenStuff -> allScreenRegions;
   159f0:	|      movea.l 1d0a6 <frozenStuff>,a0
   159f6:	|      move.l 4(a0),d0
   159fa:	|      move.l d0,1d0c2 <allScreenRegions>
	
	deleteAnim (mouseCursorAnim);  
   15a00:	|      move.l 1ceae <mouseCursorAnim>,d0
   15a06:	|      move.l d0,-(sp)
   15a08:	|      jsr 9d4c <deleteAnim>
   15a0e:	|      addq.l #4,sp
	mouseCursorAnim = frozenStuff -> mouseCursorAnim;
   15a10:	|      movea.l 1d0a6 <frozenStuff>,a0
   15a16:	|      move.l 32(a0),d0
   15a1a:	|      move.l d0,1ceae <mouseCursorAnim>
	mouseCursorFrameNum = frozenStuff -> mouseCursorFrameNum;	
   15a20:	|      movea.l 1d0a6 <frozenStuff>,a0
   15a26:	|      move.l 36(a0),d0
   15a2a:	|      move.l d0,1ceb2 <mouseCursorFrameNum>

	killZBuffer ();
   15a30:	|      jsr 8af2 <killZBuffer>
	zBuffer = frozenStuff->zBuffer;
   15a36:	|      movea.l 1d0a6 <frozenStuff>,a0
   15a3c:	|      move.l 60(a0),d0
   15a40:	|      move.l d0,1d012 <zBuffer>

	if (currentEvents) FreeVec(currentEvents);
   15a46:	|      move.l 1c924 <currentEvents>,d0
   15a4c:	|  ,-- beq.s 15a66 <unfreeze+0x1ce>
   15a4e:	|  |   move.l 1c924 <currentEvents>,12(sp)
   15a56:	|  |   move.l 1cfb6 <SysBase>,d0
   15a5c:	|  |   movea.l d0,a6
   15a5e:	|  |   movea.l 12(sp),a1
   15a62:	|  |   jsr -690(a6)
	currentEvents = frozenStuff -> currentEvents;
   15a66:	|  '-> movea.l 1d0a6 <frozenStuff>,a0
   15a6c:	|      move.l 28(a0),d0
   15a70:	|      move.l d0,1c924 <currentEvents>

	killAllSpeech ();
   15a76:	|      jsr 42e8 <killAllSpeech>
	if (speech) FreeVec(speech);
   15a7c:	|      move.l 1cefa <speech>,d0
   15a82:	|  ,-- beq.s 15a9c <unfreeze+0x204>
   15a84:	|  |   move.l 1cefa <speech>,8(sp)
   15a8c:	|  |   move.l 1cfb6 <SysBase>,d0
   15a92:	|  |   movea.l d0,a6
   15a94:	|  |   movea.l 8(sp),a1
   15a98:	|  |   jsr -690(a6)
	speech = frozenStuff -> speech;
   15a9c:	|  '-> movea.l 1d0a6 <frozenStuff>,a0
   15aa2:	|      move.l 20(a0),d0
   15aa6:	|      move.l d0,1cefa <speech>

	frozenStuff = frozenStuff -> next;
   15aac:	|      movea.l 1d0a6 <frozenStuff>,a0
   15ab2:	|      move.l 64(a0),d0
   15ab6:	|      move.l d0,1d0a6 <frozenStuff>

	overRegion = NULL;
   15abc:	|      clr.l 1d0c6 <overRegion>
	if (killMe) FreeVec(killMe);
   15ac2:	|      tst.l 16(sp)
   15ac6:	|  ,-- beq.s 15ade <unfreeze+0x246>
   15ac8:	|  |   move.l 16(sp),4(sp)
   15ace:	|  |   move.l 1cfb6 <SysBase>,d0
   15ad4:	|  |   movea.l d0,a6
   15ad6:	|  |   movea.l 4(sp),a1
   15ada:	|  |   jsr -690(a6)
	killMe = NULL;
   15ade:	|  '-> clr.l 16(sp)
   15ae2:	|  ,-- bra.s 15ae6 <unfreeze+0x24e>
	if (! frozenStuff) return;
   15ae4:	'--|-> nop
}
   15ae6:	   '-> movea.l (sp)+,a6
   15ae8:	       lea 16(sp),sp
   15aec:	       rts

00015aee <isInFont>:
unsigned int fontTableSize = 0;
struct loadedSpriteBank *theFont;


BOOL isInFont (char * theText) {
	KPrintF("isInFont: Not implemented yet on Amiga"); //Todo: Implement on Amiga
   15aee:	pea 1a655 <PutChar+0x240b>
   15af4:	jsr 177a8 <KPrintF>
   15afa:	addq.l #4,sp
	return FALSE;
   15afc:	clr.w d0
}
   15afe:	rts

00015b00 <loadFont>:

BOOL loadFont (int filenum, char * charOrder, int h) {
   15b00:	          lea -32(sp),sp
   15b04:	          move.l a6,-(sp)
   15b06:	          move.l d2,-(sp)
	unsigned int a = 0;
   15b08:	          clr.l 36(sp)
	ULONG c;

	if( fontOrderString) FreeVec(fontOrderString);
   15b0c:	          move.l 1d0b2 <fontOrderString>,d0
   15b12:	      ,-- beq.s 15b2c <loadFont+0x2c>
   15b14:	      |   move.l 1d0b2 <fontOrderString>,24(sp)
   15b1c:	      |   move.l 1cfb6 <SysBase>,d0
   15b22:	      |   movea.l d0,a6
   15b24:	      |   movea.l 24(sp),a1
   15b28:	      |   jsr -690(a6)
	fontOrderString = copyString(charOrder);
   15b2c:	      '-> move.l 48(sp),-(sp)
   15b30:	          jsr b8 <copyString>
   15b36:	          addq.l #4,sp
   15b38:	          move.l d0,1d0b2 <fontOrderString>
	if( theFont) forgetSpriteBank(theFont);	
   15b3e:	          move.l 1d0be <theFont>,d0
   15b44:	      ,-- beq.s 15b56 <loadFont+0x56>
   15b46:	      |   move.l 1d0be <theFont>,d0
   15b4c:	      |   move.l d0,-(sp)
   15b4e:	      |   jsr 8e30 <forgetSpriteBank>
   15b54:	      |   addq.l #4,sp
	theFont = NULL;
   15b56:	      '-> clr.l 1d0be <theFont>

	loadedFontNum = filenum;
   15b5c:	          move.l 44(sp),1d0ae <loadedFontNum>

	fontTableSize = 0;
   15b64:	          clr.l 1d0ba <fontTableSize>
	char *tmp = charOrder;
   15b6a:	          move.l 48(sp),32(sp)
	while (*tmp) {        
   15b70:	   ,----- bra.s 15bac <loadFont+0xac>
		if (*tmp > (UBYTE) fontTableSize) fontTableSize = *tmp;
   15b72:	,--|----> movea.l 32(sp),a0
   15b76:	|  |      move.b (a0),d0
   15b78:	|  |      ext.w d0
   15b7a:	|  |      movea.w d0,a0
   15b7c:	|  |      move.l 1d0ba <fontTableSize>,d0
   15b82:	|  |      move.l d0,d0
   15b84:	|  |      move.b d0,d0
   15b86:	|  |      andi.l #255,d0
   15b8c:	|  |      cmp.l a0,d0
   15b8e:	|  |  ,-- bge.s 15ba0 <loadFont+0xa0>
   15b90:	|  |  |   movea.l 32(sp),a0
   15b94:	|  |  |   move.b (a0),d0
   15b96:	|  |  |   ext.w d0
   15b98:	|  |  |   movea.w d0,a0
   15b9a:	|  |  |   move.l a0,1d0ba <fontTableSize>
		*tmp++;
   15ba0:	|  |  '-> move.l 32(sp),d0
   15ba4:	|  |      move.l d0,d1
   15ba6:	|  |      addq.l #1,d1
   15ba8:	|  |      move.l d1,32(sp)
	while (*tmp) {        
   15bac:	|  '----> movea.l 32(sp),a0
   15bb0:	|         move.b (a0),d0
   15bb2:	'-------- bne.s 15b72 <loadFont+0x72>
	}
	fontTableSize++;
   15bb4:	          move.l 1d0ba <fontTableSize>,d0
   15bba:	          addq.l #1,d0
   15bbc:	          move.l d0,1d0ba <fontTableSize>

	if( fontTable) FreeVec(fontTable);
   15bc2:	          move.l 1d0b6 <fontTable>,d0
   15bc8:	      ,-- beq.s 15be2 <loadFont+0xe2>
   15bca:	      |   move.l 1d0b6 <fontTable>,20(sp)
   15bd2:	      |   move.l 1cfb6 <SysBase>,d0
   15bd8:	      |   movea.l d0,a6
   15bda:	      |   movea.l 20(sp),a1
   15bde:	      |   jsr -690(a6)
	fontTable = AllocVec(sizeof(ULONG) * fontTableSize, MEMF_ANY);
   15be2:	      '-> move.l 1d0ba <fontTableSize>,d0
   15be8:	          add.l d0,d0
   15bea:	          add.l d0,d0
   15bec:	          move.l d0,16(sp)
   15bf0:	          clr.l 12(sp)
   15bf4:	          move.l 1cfb6 <SysBase>,d0
   15bfa:	          movea.l d0,a6
   15bfc:	          move.l 16(sp),d0
   15c00:	          move.l 12(sp),d1
   15c04:	          jsr -684(a6)
   15c08:	          move.l d0,8(sp)
   15c0c:	          move.l 8(sp),d0
   15c10:	          move.l d0,1d0b6 <fontTable>
	if (!fontTable) return FALSE;
   15c16:	          move.l 1d0b6 <fontTable>,d0
   15c1c:	      ,-- bne.s 15c24 <loadFont+0x124>
   15c1e:	      |   clr.w d0
   15c20:	,-----|-- bra.w 15cca <loadFont+0x1ca>

	for (a = 0;  a < fontTableSize; a++) {
   15c24:	|     '-> clr.l 36(sp)
   15c28:	|     ,-- bra.s 15c42 <loadFont+0x142>
		fontTable[a] = 0;
   15c2a:	|  ,--|-> move.l 1d0b6 <fontTable>,d1
   15c30:	|  |  |   move.l 36(sp),d0
   15c34:	|  |  |   add.l d0,d0
   15c36:	|  |  |   add.l d0,d0
   15c38:	|  |  |   movea.l d1,a0
   15c3a:	|  |  |   adda.l d0,a0
   15c3c:	|  |  |   clr.l (a0)
	for (a = 0;  a < fontTableSize; a++) {
   15c3e:	|  |  |   addq.l #1,36(sp)
   15c42:	|  |  '-> move.l 1d0ba <fontTableSize>,d0
   15c48:	|  |      cmp.l 36(sp),d0
   15c4c:	|  '----- bhi.s 15c2a <loadFont+0x12a>
	}
	a = 0;
   15c4e:	|         clr.l 36(sp)
	int i = 0;
   15c52:	|         clr.l 28(sp)
	tmp = charOrder;
   15c56:	|         move.l 48(sp),32(sp)
	while (*tmp) {
   15c5c:	|     ,-- bra.s 15c8c <loadFont+0x18c>
		fontTable[*tmp++] = i;
   15c5e:	|  ,--|-> move.l 1d0b6 <fontTable>,d1
   15c64:	|  |  |   move.l 32(sp),d0
   15c68:	|  |  |   move.l d0,d2
   15c6a:	|  |  |   addq.l #1,d2
   15c6c:	|  |  |   move.l d2,32(sp)
   15c70:	|  |  |   movea.l d0,a0
   15c72:	|  |  |   move.b (a0),d0
   15c74:	|  |  |   ext.w d0
   15c76:	|  |  |   movea.w d0,a0
   15c78:	|  |  |   move.l a0,d0
   15c7a:	|  |  |   add.l a0,d0
   15c7c:	|  |  |   add.l d0,d0
   15c7e:	|  |  |   movea.l d1,a0
   15c80:	|  |  |   adda.l d0,a0
   15c82:	|  |  |   move.l 28(sp),d0
   15c86:	|  |  |   move.l d0,(a0)
		i++;
   15c88:	|  |  |   addq.l #1,28(sp)
	while (*tmp) {
   15c8c:	|  |  '-> movea.l 32(sp),a0
   15c90:	|  |      move.b (a0),d0
   15c92:	|  '----- bne.s 15c5e <loadFont+0x15e>
	}
	
	theFont = loadBankForAnim(filenum);
   15c94:	|         move.l 44(sp),-(sp)
   15c98:	|         jsr 164ca <loadBankForAnim>
   15c9e:	|         addq.l #4,sp
   15ca0:	|         move.l d0,1d0be <theFont>
	if (!theFont) {
   15ca6:	|         move.l 1d0be <theFont>,d0
   15cac:	|     ,-- bne.s 15cc0 <loadFont+0x1c0>
		KPrintF("loadFont: Can't load font");
   15cae:	|     |   pea 1a67c <PutChar+0x2432>
   15cb4:	|     |   jsr 177a8 <KPrintF>
   15cba:	|     |   addq.l #4,sp
		return FALSE;
   15cbc:	|     |   clr.w d0
   15cbe:	+-----|-- bra.s 15cca <loadFont+0x1ca>
	}
	fontHeight = h;
   15cc0:	|     '-> move.l 52(sp),1d0aa <fontHeight>
	return TRUE;
   15cc8:	|         moveq #1,d0
}
   15cca:	'-------> move.l (sp)+,d2
   15ccc:	          movea.l (sp)+,a6
   15cce:	          lea 32(sp),sp
   15cd2:	          rts

00015cd4 <pasteStringToBackdrop>:

void pasteStringToBackdrop(char *theText, int xOff, int y) {
   15cd4:	                lea -12(sp),sp
    struct sprite *mySprite;
    int a = 0;
   15cd8:	                clr.l 4(sp)

    if (!fontTableSize) return;
   15cdc:	                move.l 1d0ba <fontTableSize>,d0
   15ce2:	,-------------- beq.w 15daa <pasteStringToBackdrop+0xd6>

    xOff += fontSpace >> 1;
   15ce6:	|               move.w 1ceac <fontSpace>,d0
   15cec:	|               asr.w #1,d0
   15cee:	|               ext.l d0
   15cf0:	|               add.l d0,20(sp)
	char *tmp = theText;
   15cf4:	|               move.l 16(sp),8(sp)
    while (*tmp) {        
   15cfa:	|     ,-------- bra.w 15d9e <pasteStringToBackdrop+0xca>
        mySprite = &theFont->bank.sprites[fontInTable( (UBYTE) *tmp)];
   15cfe:	|  ,--|-------> movea.l 1d0be <theFont>,a0
   15d04:	|  |  |         movea.l 16(a0),a0
   15d08:	|  |  |         movea.l 8(sp),a1
   15d0c:	|  |  |         move.b (a1),d0
   15d0e:	|  |  |         move.b d0,d0
   15d10:	|  |  |         andi.l #255,d0
   15d16:	|  |  |         move.l 1d0ba <fontTableSize>,d1
   15d1c:	|  |  |         cmp.l d0,d1
   15d1e:	|  |  |  ,----- bls.s 15d4a <pasteStringToBackdrop+0x76>
   15d20:	|  |  |  |      move.l 1d0b6 <fontTable>,d1
   15d26:	|  |  |  |      movea.l 8(sp),a1
   15d2a:	|  |  |  |      move.b (a1),d0
   15d2c:	|  |  |  |      move.b d0,d0
   15d2e:	|  |  |  |      andi.l #255,d0
   15d34:	|  |  |  |      add.l d0,d0
   15d36:	|  |  |  |      add.l d0,d0
   15d38:	|  |  |  |      movea.l d1,a1
   15d3a:	|  |  |  |      adda.l d0,a1
   15d3c:	|  |  |  |      move.l (a1),d1
   15d3e:	|  |  |  |      move.l d1,d0
   15d40:	|  |  |  |      lsl.l #3,d0
   15d42:	|  |  |  |      sub.l d1,d0
   15d44:	|  |  |  |      add.l d0,d0
   15d46:	|  |  |  |      add.l d0,d0
   15d48:	|  |  |  |  ,-- bra.s 15d4c <pasteStringToBackdrop+0x78>
   15d4a:	|  |  |  '--|-> moveq #0,d0
   15d4c:	|  |  |     '-> adda.l d0,a0
   15d4e:	|  |  |         move.l a0,(sp)
        CstPasteChar( mySprite, xOff - mySprite->xhot, y - mySprite->yhot);
   15d50:	|  |  |         move.l 24(sp),d1
   15d54:	|  |  |         movea.l (sp),a0
   15d56:	|  |  |         move.l 12(a0),d0
   15d5a:	|  |  |         move.l d0,d0
   15d5c:	|  |  |         sub.w d0,d1
   15d5e:	|  |  |         move.w d1,d0
   15d60:	|  |  |         movea.w d0,a1
   15d62:	|  |  |         move.l 20(sp),d1
   15d66:	|  |  |         movea.l (sp),a0
   15d68:	|  |  |         move.l 8(a0),d0
   15d6c:	|  |  |         move.l d0,d0
   15d6e:	|  |  |         sub.w d0,d1
   15d70:	|  |  |         move.w d1,d0
   15d72:	|  |  |         movea.w d0,a0
   15d74:	|  |  |         move.l a1,-(sp)
   15d76:	|  |  |         move.l a0,-(sp)
   15d78:	|  |  |         move.l 8(sp),-(sp)
   15d7c:	|  |  |         jsr 228a <CstPasteChar>
   15d82:	|  |  |         lea 12(sp),sp
        xOff += mySprite->width + fontSpace;
   15d86:	|  |  |         movea.l (sp),a0
   15d88:	|  |  |         move.l (a0),d1
   15d8a:	|  |  |         move.w 1ceac <fontSpace>,d0
   15d90:	|  |  |         movea.w d0,a0
   15d92:	|  |  |         move.l d1,d0
   15d94:	|  |  |         add.l a0,d0
   15d96:	|  |  |         add.l d0,20(sp)
		tmp++;
   15d9a:	|  |  |         addq.l #1,8(sp)
    while (*tmp) {        
   15d9e:	|  |  '-------> movea.l 8(sp),a0
   15da2:	|  |            move.b (a0),d0
   15da4:	|  '----------- bne.w 15cfe <pasteStringToBackdrop+0x2a>
   15da8:	|           ,-- bra.s 15dac <pasteStringToBackdrop+0xd8>
    if (!fontTableSize) return;
   15daa:	'-----------|-> nop
    }
}
   15dac:	            '-> lea 12(sp),sp
   15db0:	                rts

00015db2 <stringWidth>:


int stringWidth (char * theText) {
   15db2:	                lea -16(sp),sp
	int a = 0;
   15db6:	                clr.l 4(sp)
    ULONG c;
	int xOff = 0;
   15dba:	                clr.l 12(sp)

	if (! fontTableSize) return 0;
   15dbe:	                move.l 1d0ba <fontTableSize>,d0
   15dc4:	            ,-- bne.s 15dca <stringWidth+0x18>
   15dc6:	            |   moveq #0,d0
   15dc8:	,-----------|-- bra.s 15e3e <stringWidth+0x8c>

	char *tmp = theText;
   15dca:	|           '-> move.l 20(sp),8(sp)
	
	while (*tmp) {
   15dd0:	|     ,-------- bra.s 15e32 <stringWidth+0x80>
        c = *tmp++;
   15dd2:	|  ,--|-------> move.l 8(sp),d0
   15dd6:	|  |  |         move.l d0,d1
   15dd8:	|  |  |         addq.l #1,d1
   15dda:	|  |  |         move.l d1,8(sp)
   15dde:	|  |  |         movea.l d0,a0
   15de0:	|  |  |         move.b (a0),d0
   15de2:	|  |  |         ext.w d0
   15de4:	|  |  |         movea.w d0,a0
   15de6:	|  |  |         move.l a0,(sp)
		xOff += theFont->bank.sprites[fontInTable(c)].width + fontSpace;
   15de8:	|  |  |         movea.l 1d0be <theFont>,a0
   15dee:	|  |  |         movea.l 16(a0),a1
   15df2:	|  |  |         move.l 1d0ba <fontTableSize>,d0
   15df8:	|  |  |         cmp.l (sp),d0
   15dfa:	|  |  |  ,----- bls.s 15e1a <stringWidth+0x68>
   15dfc:	|  |  |  |      move.l 1d0b6 <fontTable>,d1
   15e02:	|  |  |  |      move.l (sp),d0
   15e04:	|  |  |  |      add.l d0,d0
   15e06:	|  |  |  |      add.l d0,d0
   15e08:	|  |  |  |      movea.l d1,a0
   15e0a:	|  |  |  |      adda.l d0,a0
   15e0c:	|  |  |  |      move.l (a0),d1
   15e0e:	|  |  |  |      move.l d1,d0
   15e10:	|  |  |  |      lsl.l #3,d0
   15e12:	|  |  |  |      sub.l d1,d0
   15e14:	|  |  |  |      add.l d0,d0
   15e16:	|  |  |  |      add.l d0,d0
   15e18:	|  |  |  |  ,-- bra.s 15e1c <stringWidth+0x6a>
   15e1a:	|  |  |  '--|-> moveq #0,d0
   15e1c:	|  |  |     '-> lea (0,a1,d0.l),a0
   15e20:	|  |  |         move.l (a0),d1
   15e22:	|  |  |         move.w 1ceac <fontSpace>,d0
   15e28:	|  |  |         movea.w d0,a0
   15e2a:	|  |  |         move.l d1,d0
   15e2c:	|  |  |         add.l a0,d0
   15e2e:	|  |  |         add.l d0,12(sp)
	while (*tmp) {
   15e32:	|  |  '-------> movea.l 8(sp),a0
   15e36:	|  |            move.b (a0),d0
   15e38:	|  '----------- bne.s 15dd2 <stringWidth+0x20>
	
	}//Todo: Amigize this
	
	return xOff;
   15e3a:	|               move.l 12(sp),d0
}
   15e3e:	'-------------> lea 16(sp),sp
   15e42:	                rts

00015e44 <addScreenRegion>:
struct screenRegion * allScreenRegions = NULL;
struct screenRegion * overRegion = NULL;



BOOL addScreenRegion(int x1, int y1, int x2, int y2, int sX, int sY, int di, int objectNum) {
   15e44:	       lea -16(sp),sp
   15e48:	       move.l a6,-(sp)
    struct screenRegion *newRegion = AllocVec(sizeof(struct screenRegion), MEMF_ANY);
   15e4a:	       moveq #36,d0
   15e4c:	       move.l d0,16(sp)
   15e50:	       clr.l 12(sp)
   15e54:	       move.l 1cfb6 <SysBase>,d0
   15e5a:	       movea.l d0,a6
   15e5c:	       move.l 16(sp),d0
   15e60:	       move.l 12(sp),d1
   15e64:	       jsr -684(a6)
   15e68:	       move.l d0,8(sp)
   15e6c:	       move.l 8(sp),d0
   15e70:	       move.l d0,4(sp)
    if (!newRegion) return FALSE;
   15e74:	   ,-- bne.s 15e7c <addScreenRegion+0x38>
   15e76:	   |   clr.w d0
   15e78:	,--|-- bra.w 15efc <addScreenRegion+0xb8>
    newRegion->di = di;
   15e7c:	|  '-> movea.l 4(sp),a0
   15e80:	|      move.l 48(sp),24(a0)
    newRegion->x1 = x1;
   15e86:	|      movea.l 4(sp),a0
   15e8a:	|      move.l 24(sp),(a0)
    newRegion->y1 = y1;
   15e8e:	|      movea.l 4(sp),a0
   15e92:	|      move.l 28(sp),4(a0)
    newRegion->x2 = x2;
   15e98:	|      movea.l 4(sp),a0
   15e9c:	|      move.l 32(sp),8(a0)
    newRegion->y2 = y2;
   15ea2:	|      movea.l 4(sp),a0
   15ea6:	|      move.l 36(sp),12(a0)
    newRegion->sX = sX;
   15eac:	|      movea.l 4(sp),a0
   15eb0:	|      move.l 40(sp),16(a0)
    newRegion->sY = sY;
   15eb6:	|      movea.l 4(sp),a0
   15eba:	|      move.l 44(sp),20(a0)
    newRegion->thisType = loadObjectType(objectNum);
   15ec0:	|      move.l 52(sp),-(sp)
   15ec4:	|      jsr dacc <loadObjectType>
   15eca:	|      addq.l #4,sp
   15ecc:	|      movea.l 4(sp),a0
   15ed0:	|      move.l d0,28(a0)
    newRegion->next = allScreenRegions;
   15ed4:	|      move.l 1d0c2 <allScreenRegions>,d0
   15eda:	|      movea.l 4(sp),a0
   15ede:	|      move.l d0,32(a0)
    allScreenRegions = newRegion;
   15ee2:	|      move.l 4(sp),1d0c2 <allScreenRegions>
    return (BOOL) (newRegion->thisType != NULL);
   15eea:	|      movea.l 4(sp),a0
   15eee:	|      move.l 28(a0),d0
   15ef2:	|      sne d0
   15ef4:	|      neg.b d0
   15ef6:	|      move.b d0,d0
   15ef8:	|      andi.w #255,d0
}
   15efc:	'----> movea.l (sp)+,a6
   15efe:	       lea 16(sp),sp
   15f02:	       rts

00015f04 <getOverRegion>:

void getOverRegion () {
   15f04:	             subq.l #4,sp
	struct screenRegion * thisRegion = allScreenRegions;
   15f06:	             move.l 1d0c2 <allScreenRegions>,(sp)
	while (thisRegion) {
   15f0c:	   ,-------- bra.s 15f7a <getOverRegion+0x76>
		if ((input.mouseX >= thisRegion -> x1 - cameraX) && (input.mouseY >= thisRegion -> y1 - cameraY) &&
   15f0e:	,--|-------> move.l 1cf6e <input+0xa>,d0
   15f14:	|  |         movea.l (sp),a0
   15f16:	|  |         movea.l (a0),a0
   15f18:	|  |         move.l 1d06c <cameraX>,d1
   15f1e:	|  |         suba.l d1,a0
   15f20:	|  |         cmpa.l d0,a0
   15f22:	|  |  ,----- bgt.s 15f74 <getOverRegion+0x70>
   15f24:	|  |  |      move.l 1cf72 <input+0xe>,d0
   15f2a:	|  |  |      movea.l (sp),a0
   15f2c:	|  |  |      movea.l 4(a0),a0
   15f30:	|  |  |      move.l 1d070 <cameraY>,d1
   15f36:	|  |  |      suba.l d1,a0
   15f38:	|  |  |      cmpa.l d0,a0
   15f3a:	|  |  +----- bgt.s 15f74 <getOverRegion+0x70>
			 (input.mouseX <= thisRegion -> x2 - cameraX) && (input.mouseY <= thisRegion -> y2 - cameraY)) {
   15f3c:	|  |  |      move.l 1cf6e <input+0xa>,d0
   15f42:	|  |  |      movea.l (sp),a0
   15f44:	|  |  |      movea.l 8(a0),a0
   15f48:	|  |  |      move.l 1d06c <cameraX>,d1
   15f4e:	|  |  |      suba.l d1,a0
		if ((input.mouseX >= thisRegion -> x1 - cameraX) && (input.mouseY >= thisRegion -> y1 - cameraY) &&
   15f50:	|  |  |      cmpa.l d0,a0
   15f52:	|  |  +----- blt.s 15f74 <getOverRegion+0x70>
			 (input.mouseX <= thisRegion -> x2 - cameraX) && (input.mouseY <= thisRegion -> y2 - cameraY)) {
   15f54:	|  |  |      move.l 1cf72 <input+0xe>,d0
   15f5a:	|  |  |      movea.l (sp),a0
   15f5c:	|  |  |      movea.l 12(a0),a0
   15f60:	|  |  |      move.l 1d070 <cameraY>,d1
   15f66:	|  |  |      suba.l d1,a0
   15f68:	|  |  |      cmpa.l d0,a0
   15f6a:	|  |  +----- blt.s 15f74 <getOverRegion+0x70>
			overRegion = thisRegion;
   15f6c:	|  |  |      move.l (sp),1d0c6 <overRegion>
			return;
   15f72:	|  |  |  ,-- bra.s 15f86 <getOverRegion+0x82>
		}
		thisRegion = thisRegion -> next;
   15f74:	|  |  '--|-> movea.l (sp),a0
   15f76:	|  |     |   move.l 32(a0),(sp)
	while (thisRegion) {
   15f7a:	|  '-----|-> tst.l (sp)
   15f7c:	'--------|-- bne.s 15f0e <getOverRegion+0xa>
	}
	overRegion = NULL;
   15f7e:	         |   clr.l 1d0c6 <overRegion>
	return;
   15f84:	         |   nop
}
   15f86:	         '-> addq.l #4,sp
   15f88:	             rts

00015f8a <getRegionForObject>:


struct screenRegion * getRegionForObject (int obj) {
   15f8a:	             subq.l #4,sp
	struct screenRegion * thisRegion = allScreenRegions;
   15f8c:	             move.l 1d0c2 <allScreenRegions>,(sp)

	while (thisRegion) {
   15f92:	   ,-------- bra.s 15fae <getRegionForObject+0x24>
		if (obj == thisRegion -> thisType -> objectNum) {
   15f94:	,--|-------> movea.l (sp),a0
   15f96:	|  |         movea.l 28(a0),a0
   15f9a:	|  |         move.l 4(a0),d0
   15f9e:	|  |         cmp.l 8(sp),d0
   15fa2:	|  |     ,-- bne.s 15fa8 <getRegionForObject+0x1e>
			return thisRegion;
   15fa4:	|  |     |   move.l (sp),d0
   15fa6:	|  |  ,--|-- bra.s 15fb4 <getRegionForObject+0x2a>
		}
		thisRegion = thisRegion -> next;
   15fa8:	|  |  |  '-> movea.l (sp),a0
   15faa:	|  |  |      move.l 32(a0),(sp)
	while (thisRegion) {
   15fae:	|  '--|----> tst.l (sp)
   15fb0:	'-----|----- bne.s 15f94 <getRegionForObject+0xa>
	}

	return NULL;
   15fb2:	      |      moveq #0,d0
}
   15fb4:	      '----> addq.l #4,sp
   15fb6:	             rts

00015fb8 <killAllRegions>:

void killAllRegions () {
   15fb8:	       subq.l #8,sp
   15fba:	       move.l a6,-(sp)
	struct screenRegion * killRegion;
	while (allScreenRegions) {
   15fbc:	   ,-- bra.s 15ffe <killAllRegions+0x46>
		killRegion = allScreenRegions;
   15fbe:	,--|-> move.l 1d0c2 <allScreenRegions>,8(sp)
		allScreenRegions = allScreenRegions -> next;
   15fc6:	|  |   movea.l 1d0c2 <allScreenRegions>,a0
   15fcc:	|  |   move.l 32(a0),d0
   15fd0:	|  |   move.l d0,1d0c2 <allScreenRegions>
		removeObjectType (killRegion -> thisType);
   15fd6:	|  |   movea.l 8(sp),a0
   15fda:	|  |   move.l 28(a0),d0
   15fde:	|  |   move.l d0,-(sp)
   15fe0:	|  |   jsr dd84 <removeObjectType>
   15fe6:	|  |   addq.l #4,sp
		FreeVec(killRegion);
   15fe8:	|  |   move.l 8(sp),4(sp)
   15fee:	|  |   move.l 1cfb6 <SysBase>,d0
   15ff4:	|  |   movea.l d0,a6
   15ff6:	|  |   movea.l 4(sp),a1
   15ffa:	|  |   jsr -690(a6)
	while (allScreenRegions) {
   15ffe:	|  '-> move.l 1d0c2 <allScreenRegions>,d0
   16004:	'----- bne.s 15fbe <killAllRegions+0x6>
	}
	overRegion = NULL;
   16006:	       clr.l 1d0c6 <overRegion>
}
   1600c:	       nop
   1600e:	       movea.l (sp)+,a6
   16010:	       addq.l #8,sp
   16012:	       rts

00016014 <loadRegions>:

void loadRegions (BPTR fp) {
   16014:	       lea -24(sp),sp
   16018:	       move.l a6,-(sp)
	int numRegions = get2bytes (fp);
   1601a:	       move.l 32(sp),-(sp)
   1601e:	       jsr 6bc <get2bytes>
   16024:	       addq.l #4,sp
   16026:	       move.l d0,24(sp)

	struct screenRegion * newRegion;
	struct screenRegion * * pointy = & allScreenRegions;
   1602a:	       move.l #118978,20(sp)

	while (numRegions --) {
   16032:	   ,-- bra.w 16110 <loadRegions+0xfc>
		newRegion = AllocVec( sizeof(struct screenRegion),MEMF_ANY);
   16036:	,--|-> moveq #36,d0
   16038:	|  |   move.l d0,16(sp)
   1603c:	|  |   clr.l 12(sp)
   16040:	|  |   move.l 1cfb6 <SysBase>,d0
   16046:	|  |   movea.l d0,a6
   16048:	|  |   move.l 16(sp),d0
   1604c:	|  |   move.l 12(sp),d1
   16050:	|  |   jsr -684(a6)
   16054:	|  |   move.l d0,8(sp)
   16058:	|  |   move.l 8(sp),d0
   1605c:	|  |   move.l d0,4(sp)
		* pointy = newRegion;
   16060:	|  |   movea.l 20(sp),a0
   16064:	|  |   move.l 4(sp),(a0)
		pointy = & (newRegion -> next);
   16068:	|  |   moveq #32,d1
   1606a:	|  |   add.l 4(sp),d1
   1606e:	|  |   move.l d1,20(sp)

		newRegion -> x1 = get2bytes (fp);
   16072:	|  |   move.l 32(sp),-(sp)
   16076:	|  |   jsr 6bc <get2bytes>
   1607c:	|  |   addq.l #4,sp
   1607e:	|  |   movea.l 4(sp),a0
   16082:	|  |   move.l d0,(a0)
		newRegion -> y1 = get2bytes (fp);
   16084:	|  |   move.l 32(sp),-(sp)
   16088:	|  |   jsr 6bc <get2bytes>
   1608e:	|  |   addq.l #4,sp
   16090:	|  |   movea.l 4(sp),a0
   16094:	|  |   move.l d0,4(a0)
		newRegion -> x2 = get2bytes (fp);
   16098:	|  |   move.l 32(sp),-(sp)
   1609c:	|  |   jsr 6bc <get2bytes>
   160a2:	|  |   addq.l #4,sp
   160a4:	|  |   movea.l 4(sp),a0
   160a8:	|  |   move.l d0,8(a0)
		newRegion -> y2 = get2bytes (fp);
   160ac:	|  |   move.l 32(sp),-(sp)
   160b0:	|  |   jsr 6bc <get2bytes>
   160b6:	|  |   addq.l #4,sp
   160b8:	|  |   movea.l 4(sp),a0
   160bc:	|  |   move.l d0,12(a0)
		newRegion -> sX = get2bytes (fp);
   160c0:	|  |   move.l 32(sp),-(sp)
   160c4:	|  |   jsr 6bc <get2bytes>
   160ca:	|  |   addq.l #4,sp
   160cc:	|  |   movea.l 4(sp),a0
   160d0:	|  |   move.l d0,16(a0)
		newRegion -> sY = get2bytes (fp);
   160d4:	|  |   move.l 32(sp),-(sp)
   160d8:	|  |   jsr 6bc <get2bytes>
   160de:	|  |   addq.l #4,sp
   160e0:	|  |   movea.l 4(sp),a0
   160e4:	|  |   move.l d0,20(a0)
		newRegion -> di = get2bytes (fp);
   160e8:	|  |   move.l 32(sp),-(sp)
   160ec:	|  |   jsr 6bc <get2bytes>
   160f2:	|  |   addq.l #4,sp
   160f4:	|  |   movea.l 4(sp),a0
   160f8:	|  |   move.l d0,24(a0)
		newRegion -> thisType = loadObjectRef (fp);
   160fc:	|  |   move.l 32(sp),-(sp)
   16100:	|  |   jsr da7a <loadObjectRef>
   16106:	|  |   addq.l #4,sp
   16108:	|  |   movea.l 4(sp),a0
   1610c:	|  |   move.l d0,28(a0)
	while (numRegions --) {
   16110:	|  '-> move.l 24(sp),d0
   16114:	|      move.l d0,d1
   16116:	|      subq.l #1,d1
   16118:	|      move.l d1,24(sp)
   1611c:	|      tst.l d0
   1611e:	'----- bne.w 16036 <loadRegions+0x22>
	}
	* pointy = NULL;
   16122:	       movea.l 20(sp),a0
   16126:	       clr.l (a0)
}
   16128:	       nop
   1612a:	       movea.l (sp)+,a6
   1612c:	       lea 24(sp),sp
   16130:	       rts

00016132 <removeScreenRegion>:

void removeScreenRegion (int objectNum) {
   16132:	             lea -12(sp),sp
   16136:	             move.l a6,-(sp)
    struct screenRegion ** huntRegion = &allScreenRegions;
   16138:	             move.l #118978,12(sp)
    struct screenRegion * killMe;

    while (*huntRegion) {
   16140:	   ,-------- bra.s 161ba <removeScreenRegion+0x88>
        if ((*huntRegion)->thisType->objectNum == objectNum) {
   16142:	,--|-------> movea.l 12(sp),a0
   16146:	|  |         movea.l (a0),a0
   16148:	|  |         movea.l 28(a0),a0
   1614c:	|  |         move.l 4(a0),d0
   16150:	|  |         cmp.l 20(sp),d0
   16154:	|  |  ,----- bne.s 161ac <removeScreenRegion+0x7a>
            killMe = *huntRegion;
   16156:	|  |  |      movea.l 12(sp),a0
   1615a:	|  |  |      move.l (a0),8(sp)
            *huntRegion = killMe->next;
   1615e:	|  |  |      movea.l 8(sp),a0
   16162:	|  |  |      move.l 32(a0),d0
   16166:	|  |  |      movea.l 12(sp),a0
   1616a:	|  |  |      move.l d0,(a0)
            removeObjectType(killMe->thisType);
   1616c:	|  |  |      movea.l 8(sp),a0
   16170:	|  |  |      move.l 28(a0),d0
   16174:	|  |  |      move.l d0,-(sp)
   16176:	|  |  |      jsr dd84 <removeObjectType>
   1617c:	|  |  |      addq.l #4,sp
            if (killMe == overRegion) overRegion = NULL;
   1617e:	|  |  |      move.l 1d0c6 <overRegion>,d0
   16184:	|  |  |      cmp.l 8(sp),d0
   16188:	|  |  |  ,-- bne.s 16190 <removeScreenRegion+0x5e>
   1618a:	|  |  |  |   clr.l 1d0c6 <overRegion>
            FreeVec(killMe);
   16190:	|  |  |  '-> move.l 8(sp),4(sp)
   16196:	|  |  |      move.l 1cfb6 <SysBase>,d0
   1619c:	|  |  |      movea.l d0,a6
   1619e:	|  |  |      movea.l 4(sp),a1
   161a2:	|  |  |      jsr -690(a6)
            killMe = NULL;
   161a6:	|  |  |      clr.l 8(sp)
   161aa:	|  +--|----- bra.s 161ba <removeScreenRegion+0x88>
        } else {
            huntRegion = &((*huntRegion)->next);
   161ac:	|  |  '----> movea.l 12(sp),a0
   161b0:	|  |         move.l (a0),d0
   161b2:	|  |         moveq #32,d1
   161b4:	|  |         add.l d0,d1
   161b6:	|  |         move.l d1,12(sp)
    while (*huntRegion) {
   161ba:	|  '-------> movea.l 12(sp),a0
   161be:	|            move.l (a0),d0
   161c0:	'----------- bne.s 16142 <removeScreenRegion+0x10>
        }
    }
}
   161c2:	             nop
   161c4:	             nop
   161c6:	             movea.l (sp)+,a6
   161c8:	             lea 12(sp),sp
   161cc:	             rts

000161ce <saveRegions>:

void saveRegions (BPTR fp) {
   161ce:	       subq.l #8,sp
	int numRegions = 0;
   161d0:	       clr.l 4(sp)
	struct screenRegion * thisRegion = allScreenRegions;
   161d4:	       move.l 1d0c2 <allScreenRegions>,(sp)
	while (thisRegion) {
   161da:	   ,-- bra.s 161e6 <saveRegions+0x18>
		thisRegion = thisRegion -> next;
   161dc:	,--|-> movea.l (sp),a0
   161de:	|  |   move.l 32(a0),(sp)
		numRegions ++;
   161e2:	|  |   addq.l #1,4(sp)
	while (thisRegion) {
   161e6:	|  '-> tst.l (sp)
   161e8:	'----- bne.s 161dc <saveRegions+0xe>
	}
	put2bytes (numRegions, fp);
   161ea:	       move.l 12(sp),-(sp)
   161ee:	       move.l 8(sp),-(sp)
   161f2:	       jsr 8d0 <put2bytes>
   161f8:	       addq.l #8,sp
	thisRegion = allScreenRegions;
   161fa:	       move.l 1d0c2 <allScreenRegions>,(sp)
	while (thisRegion) {
   16200:	,----- bra.w 162a8 <saveRegions+0xda>
		put2bytes (thisRegion -> x1, fp);
   16204:	|  ,-> movea.l (sp),a0
   16206:	|  |   move.l (a0),d0
   16208:	|  |   move.l 12(sp),-(sp)
   1620c:	|  |   move.l d0,-(sp)
   1620e:	|  |   jsr 8d0 <put2bytes>
   16214:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> y1, fp);
   16216:	|  |   movea.l (sp),a0
   16218:	|  |   move.l 4(a0),d0
   1621c:	|  |   move.l 12(sp),-(sp)
   16220:	|  |   move.l d0,-(sp)
   16222:	|  |   jsr 8d0 <put2bytes>
   16228:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> x2, fp);
   1622a:	|  |   movea.l (sp),a0
   1622c:	|  |   move.l 8(a0),d0
   16230:	|  |   move.l 12(sp),-(sp)
   16234:	|  |   move.l d0,-(sp)
   16236:	|  |   jsr 8d0 <put2bytes>
   1623c:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> y2, fp);
   1623e:	|  |   movea.l (sp),a0
   16240:	|  |   move.l 12(a0),d0
   16244:	|  |   move.l 12(sp),-(sp)
   16248:	|  |   move.l d0,-(sp)
   1624a:	|  |   jsr 8d0 <put2bytes>
   16250:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> sX, fp);
   16252:	|  |   movea.l (sp),a0
   16254:	|  |   move.l 16(a0),d0
   16258:	|  |   move.l 12(sp),-(sp)
   1625c:	|  |   move.l d0,-(sp)
   1625e:	|  |   jsr 8d0 <put2bytes>
   16264:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> sY, fp);
   16266:	|  |   movea.l (sp),a0
   16268:	|  |   move.l 20(a0),d0
   1626c:	|  |   move.l 12(sp),-(sp)
   16270:	|  |   move.l d0,-(sp)
   16272:	|  |   jsr 8d0 <put2bytes>
   16278:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> di, fp);
   1627a:	|  |   movea.l (sp),a0
   1627c:	|  |   move.l 24(a0),d0
   16280:	|  |   move.l 12(sp),-(sp)
   16284:	|  |   move.l d0,-(sp)
   16286:	|  |   jsr 8d0 <put2bytes>
   1628c:	|  |   addq.l #8,sp
		saveObjectRef (thisRegion -> thisType, fp);
   1628e:	|  |   movea.l (sp),a0
   16290:	|  |   move.l 28(a0),d0
   16294:	|  |   move.l 12(sp),-(sp)
   16298:	|  |   move.l d0,-(sp)
   1629a:	|  |   jsr de24 <saveObjectRef>
   162a0:	|  |   addq.l #8,sp

		thisRegion = thisRegion -> next;
   162a2:	|  |   movea.l (sp),a0
   162a4:	|  |   move.l 32(a0),(sp)
	while (thisRegion) {
   162a8:	'--|-> tst.l (sp)
   162aa:	   '-- bne.w 16204 <saveRegions+0x36>
	}
}
   162ae:	       nop
   162b0:	       nop
   162b2:	       addq.l #8,sp
   162b4:	       rts

000162b6 <showBoxes>:

void showBoxes () {
   162b6:	       subq.l #4,sp
	struct screenRegion * huntRegion = allScreenRegions;
   162b8:	       move.l 1d0c2 <allScreenRegions>,(sp)

	while (huntRegion) {
   162be:	,----- bra.w 1635a <showBoxes+0xa4>
		drawVerticalLine (huntRegion -> x1, huntRegion -> y1, huntRegion -> y2);
   162c2:	|  ,-> movea.l (sp),a0
   162c4:	|  |   move.l 12(a0),d0
   162c8:	|  |   movea.l d0,a1
   162ca:	|  |   movea.l (sp),a0
   162cc:	|  |   move.l 4(a0),d0
   162d0:	|  |   move.l d0,d1
   162d2:	|  |   movea.l (sp),a0
   162d4:	|  |   move.l (a0),d0
   162d6:	|  |   move.l a1,-(sp)
   162d8:	|  |   move.l d1,-(sp)
   162da:	|  |   move.l d0,-(sp)
   162dc:	|  |   jsr d708 <drawVerticalLine>
   162e2:	|  |   lea 12(sp),sp
		drawVerticalLine (huntRegion -> x2, huntRegion -> y1, huntRegion -> y2);
   162e6:	|  |   movea.l (sp),a0
   162e8:	|  |   move.l 12(a0),d0
   162ec:	|  |   movea.l d0,a1
   162ee:	|  |   movea.l (sp),a0
   162f0:	|  |   move.l 4(a0),d0
   162f4:	|  |   move.l d0,d1
   162f6:	|  |   movea.l (sp),a0
   162f8:	|  |   move.l 8(a0),d0
   162fc:	|  |   move.l a1,-(sp)
   162fe:	|  |   move.l d1,-(sp)
   16300:	|  |   move.l d0,-(sp)
   16302:	|  |   jsr d708 <drawVerticalLine>
   16308:	|  |   lea 12(sp),sp
		drawHorizontalLine (huntRegion -> x1, huntRegion -> y1, huntRegion -> x2);
   1630c:	|  |   movea.l (sp),a0
   1630e:	|  |   move.l 8(a0),d0
   16312:	|  |   movea.l d0,a1
   16314:	|  |   movea.l (sp),a0
   16316:	|  |   move.l 4(a0),d0
   1631a:	|  |   move.l d0,d1
   1631c:	|  |   movea.l (sp),a0
   1631e:	|  |   move.l (a0),d0
   16320:	|  |   move.l a1,-(sp)
   16322:	|  |   move.l d1,-(sp)
   16324:	|  |   move.l d0,-(sp)
   16326:	|  |   jsr d6e2 <drawHorizontalLine>
   1632c:	|  |   lea 12(sp),sp
		drawHorizontalLine (huntRegion -> x1, huntRegion -> y2, huntRegion -> x2);
   16330:	|  |   movea.l (sp),a0
   16332:	|  |   move.l 8(a0),d0
   16336:	|  |   movea.l d0,a1
   16338:	|  |   movea.l (sp),a0
   1633a:	|  |   move.l 12(a0),d0
   1633e:	|  |   move.l d0,d1
   16340:	|  |   movea.l (sp),a0
   16342:	|  |   move.l (a0),d0
   16344:	|  |   move.l a1,-(sp)
   16346:	|  |   move.l d1,-(sp)
   16348:	|  |   move.l d0,-(sp)
   1634a:	|  |   jsr d6e2 <drawHorizontalLine>
   16350:	|  |   lea 12(sp),sp
		huntRegion = huntRegion -> next;
   16354:	|  |   movea.l (sp),a0
   16356:	|  |   move.l 32(a0),(sp)
	while (huntRegion) {
   1635a:	'--|-> tst.l (sp)
   1635c:	   '-- bne.w 162c2 <showBoxes+0xc>
	}
   16360:	       nop
   16362:	       nop
   16364:	       addq.l #4,sp
   16366:	       rts

00016368 <rand>:
// Define constants for LCG
#define MULTIPLIER 1103515245UL
#define INCREMENT 12345UL
#define MODULUS 0x7FFFFFFFUL

ULONG rand() {
   16368:	       lea -88(sp),sp
   1636c:	       move.l a6,-(sp)
    struct timerequest *timereq;

    struct MsgPort *timerport = CreateMsgPort();
   1636e:	       move.l 1cfb6 <SysBase>,d0
   16374:	       movea.l d0,a6
   16376:	       jsr -666(a6)
   1637a:	       move.l d0,88(sp)
   1637e:	       move.l 88(sp),d0
   16382:	       move.l d0,84(sp)

    timereq = CreateIORequest(timerport, sizeof(struct timerequest));
   16386:	       move.l 84(sp),80(sp)
   1638c:	       moveq #40,d0
   1638e:	       move.l d0,76(sp)
   16392:	       move.l 1cfb6 <SysBase>,d0
   16398:	       movea.l d0,a6
   1639a:	       movea.l 80(sp),a0
   1639e:	       move.l 76(sp),d0
   163a2:	       jsr -654(a6)
   163a6:	       move.l d0,72(sp)
   163aa:	       move.l 72(sp),d0
   163ae:	       move.l d0,68(sp)
    struct IORequest* ioreq = (struct IORequest*)timereq;
   163b2:	       move.l 68(sp),64(sp)
    if (OpenDevice(TIMERNAME, UNIT_MICROHZ, ioreq, 0)) {
   163b8:	       move.l #108182,60(sp)
   163c0:	       clr.l 56(sp)
   163c4:	       move.l 64(sp),52(sp)
   163ca:	       clr.l 48(sp)
   163ce:	       move.l 1cfb6 <SysBase>,d0
   163d4:	       movea.l d0,a6
   163d6:	       movea.l 60(sp),a0
   163da:	       move.l 56(sp),d0
   163de:	       movea.l 52(sp),a1
   163e2:	       move.l 48(sp),d1
   163e6:	       jsr -444(a6)
   163ea:	       move.b d0,47(sp)
   163ee:	       move.b 47(sp),d0
   163f2:	   ,-- beq.s 16408 <rand+0xa0>
        KPrintF("Unable to open timer device\n");
   163f4:	   |   pea 1a6a3 <PutChar+0x2459>
   163fa:	   |   jsr 177a8 <KPrintF>
   16400:	   |   addq.l #4,sp
        return 0;
   16402:	   |   moveq #0,d0
   16404:	,--|-- bra.w 164c2 <rand+0x15a>
    }
    struct Device* TimerBase = ioreq->io_Device;
   16408:	|  '-> movea.l 64(sp),a0
   1640c:	|      move.l 20(a0),42(sp)

    struct EClockVal eclock;
    ReadEClock(&eclock);
   16412:	|      lea 92(sp),a0
   16416:	|      lea -86(a0),a0
   1641a:	|      move.l a0,38(sp)
   1641e:	|      movea.l 42(sp),a6
   16422:	|      movea.l 38(sp),a0
   16426:	|      jsr -60(a6)
   1642a:	|      move.l d0,34(sp)

    ULONG seed = eclock.ev_lo; // Using the lower part of EClock value as seed
   1642e:	|      move.l 10(sp),30(sp)
    seed = (seed * MULTIPLIER + INCREMENT) & 0x7fffffff; // Simple LCG
   16434:	|      move.l #1103515245,-(sp)
   1643a:	|      move.l 34(sp),-(sp)
   1643e:	|      jsr 18134 <__mulsi3>
   16444:	|      addq.l #8,sp
   16446:	|      addi.l #12345,d0
   1644c:	|      move.l d0,d1
   1644e:	|      bclr #31,d1
   16452:	|      move.l d1,30(sp)

    // Transform the seed to a random number
    int random_number = seed % 100; // For example, a random number between 0 and 99
   16456:	|      move.l 30(sp),d0
   1645a:	|      pea 64 <_start+0x64>
   1645e:	|      move.l d0,-(sp)
   16460:	|      jsr 1820e <__umodsi3>
   16466:	|      addq.l #8,sp
   16468:	|      move.l d0,26(sp)
    KPrintF("Random Number: %d\n", random_number);
   1646c:	|      move.l 26(sp),-(sp)
   16470:	|      pea 1a6c0 <PutChar+0x2476>
   16476:	|      jsr 177a8 <KPrintF>
   1647c:	|      addq.l #8,sp

    CloseDevice(ioreq);
   1647e:	|      move.l 64(sp),22(sp)
   16484:	|      move.l 1cfb6 <SysBase>,d0
   1648a:	|      movea.l d0,a6
   1648c:	|      movea.l 22(sp),a1
   16490:	|      jsr -450(a6)
    DeleteIORequest(ioreq);
   16494:	|      move.l 64(sp),18(sp)
   1649a:	|      move.l 1cfb6 <SysBase>,d0
   164a0:	|      movea.l d0,a6
   164a2:	|      movea.l 18(sp),a0
   164a6:	|      jsr -660(a6)
    DeleteMsgPort(timerport);
   164aa:	|      move.l 84(sp),14(sp)
   164b0:	|      move.l 1cfb6 <SysBase>,d0
   164b6:	|      movea.l d0,a6
   164b8:	|      movea.l 14(sp),a0
   164bc:	|      jsr -672(a6)
    return 0;
   164c0:	|      moveq #0,d0
   164c2:	'----> movea.l (sp)+,a6
   164c4:	       lea 88(sp),sp
   164c8:	       rts

000164ca <loadBankForAnim>:
#include "sprbanks.h"
#include "support/gcc8_c_support.h"

struct loadedSpriteBank * allLoadedBanks = NULL;

struct loadedSpriteBank * loadBankForAnim (int ID) {
   164ca:	             lea -20(sp),sp
   164ce:	             move.l a6,-(sp)
	// KPrintF("loadBankForAnim: Looking for sprite bank with ID %d\n", ID);	
	struct loadedSpriteBank * returnMe = allLoadedBanks;
   164d0:	             move.l 1d0ca <allLoadedBanks>,20(sp)
	while (returnMe) {
   164d8:	      ,----- bra.s 1650a <loadBankForAnim+0x40>
		if (returnMe->ID == ID) {
   164da:	   ,--|----> movea.l 20(sp),a0
   164de:	   |  |      move.l (a0),d0
   164e0:	   |  |      cmp.l 28(sp),d0
   164e4:	   |  |  ,-- bne.s 16500 <loadBankForAnim+0x36>
			// KPrintF("loadBankForAnim: Found existing sprite bank with ID %d\n", returnMe->ID);
			returnMe->timesUsed++;
   164e6:	   |  |  |   movea.l 20(sp),a0
   164ea:	   |  |  |   move.l 4(a0),d0
   164ee:	   |  |  |   addq.l #1,d0
   164f0:	   |  |  |   movea.l 20(sp),a0
   164f4:	   |  |  |   move.l d0,4(a0)
			return returnMe;			
   164f8:	   |  |  |   move.l 20(sp),d0
   164fc:	,--|--|--|-- bra.w 1659e <loadBankForAnim+0xd4>
		}		
		returnMe = returnMe->next;
   16500:	|  |  |  '-> movea.l 20(sp),a0
   16504:	|  |  |      move.l 22(a0),20(sp)
	while (returnMe) {
   1650a:	|  |  '----> tst.l 20(sp)
   1650e:	|  '-------- bne.s 164da <loadBankForAnim+0x10>
	}
	returnMe = AllocVec(sizeof(struct loadedSpriteBank), MEMF_ANY);
   16510:	|            moveq #26,d0
   16512:	|            move.l d0,16(sp)
   16516:	|            clr.l 12(sp)
   1651a:	|            move.l 1cfb6 <SysBase>,d0
   16520:	|            movea.l d0,a6
   16522:	|            move.l 16(sp),d0
   16526:	|            move.l 12(sp),d1
   1652a:	|            jsr -684(a6)
   1652e:	|            move.l d0,8(sp)
   16532:	|            move.l 8(sp),d0
   16536:	|            move.l d0,20(sp)
	// KPrintF("loadBankForAnim: No existing sprite bank with ID %d\n", ID);
	if (returnMe) {
   1653a:	|     ,----- beq.s 1659c <loadBankForAnim+0xd2>
		returnMe->ID = ID;
   1653c:	|     |      movea.l 20(sp),a0
   16540:	|     |      move.l 28(sp),(a0)
		if (loadSpriteBank(ID, (struct spriteBank *) &returnMe->bank)) {
   16544:	|     |      move.l 20(sp),d0
   16548:	|     |      addq.l #8,d0
   1654a:	|     |      move.l d0,-(sp)
   1654c:	|     |      move.l 32(sp),-(sp)
   16550:	|     |      jsr 8f3c <loadSpriteBank>
   16556:	|     |      addq.l #8,sp
   16558:	|     |      tst.w d0
   1655a:	|     |  ,-- beq.s 16582 <loadBankForAnim+0xb8>
			returnMe->timesUsed = 1;
   1655c:	|     |  |   movea.l 20(sp),a0
   16560:	|     |  |   moveq #1,d0
   16562:	|     |  |   move.l d0,4(a0)
			returnMe->next = allLoadedBanks;
   16566:	|     |  |   move.l 1d0ca <allLoadedBanks>,d0
   1656c:	|     |  |   movea.l 20(sp),a0
   16570:	|     |  |   move.l d0,22(a0)
			allLoadedBanks = returnMe;
   16574:	|     |  |   move.l 20(sp),1d0ca <allLoadedBanks>
			//KPrintF("loadBankForAnim: New sprite bank created OK\n");
			return returnMe;
   1657c:	|     |  |   move.l 20(sp),d0
   16580:	+-----|--|-- bra.s 1659e <loadBankForAnim+0xd4>
		} else {
			//KPrintF("loadBankForAnim: I guess I couldn't load the sprites...\n");
			FreeVec(returnMe);
   16582:	|     |  '-> move.l 20(sp),4(sp)
   16588:	|     |      move.l 1cfb6 <SysBase>,d0
   1658e:	|     |      movea.l d0,a6
   16590:	|     |      movea.l 4(sp),a1
   16594:	|     |      jsr -690(a6)
			return NULL;
   16598:	|     |      moveq #0,d0
   1659a:	+-----|----- bra.s 1659e <loadBankForAnim+0xd4>
		}
	} else return NULL;
   1659c:	|     '----> moveq #0,d0
}
   1659e:	'----------> movea.l (sp)+,a6
   165a0:	             lea 20(sp),sp
   165a4:	             rts

000165a6 <closestPointOnLine>:
#include "support/gcc8_c_support.h"
#include "line.h"

struct flor * currentFloor = NULL;

BOOL closestPointOnLine (int * closestX, int * closestY, int x1, int y1, int x2, int y2, int xP, int yP) {
   165a6:	       lea -60(sp),sp
   165aa:	       move.l d3,-(sp)
   165ac:	       move.l d2,-(sp)
 	DOUBLE xDiff = x2 - x1;
   165ae:	       move.l 88(sp),d0
   165b2:	       sub.l 80(sp),d0
   165b6:	       move.l d0,-(sp)
   165b8:	       jsr 17b9a <__floatsidf>
   165be:	       addq.l #4,sp
   165c0:	       move.l d0,32(sp)
   165c4:	       move.l d1,36(sp)
   165c8:	       move.l 32(sp),60(sp)
   165ce:	       move.l 36(sp),64(sp)
	int yDiff = y2 - y1;
   165d4:	       move.l 92(sp),d0
   165d8:	       sub.l 84(sp),d0
   165dc:	       move.l d0,56(sp)

	DOUBLE m = xDiff * (xP - x1) + yDiff * (yP - y1);
   165e0:	       move.l 96(sp),d0
   165e4:	       sub.l 80(sp),d0
   165e8:	       move.l d0,-(sp)
   165ea:	       jsr 17b9a <__floatsidf>
   165f0:	       addq.l #4,sp
   165f2:	       move.l 64(sp),-(sp)
   165f6:	       move.l 64(sp),-(sp)
   165fa:	       move.l d1,-(sp)
   165fc:	       move.l d0,-(sp)
   165fe:	       jsr 17c2a <__muldf3>
   16604:	       lea 16(sp),sp
   16608:	       move.l d0,d2
   1660a:	       move.l d1,d3
   1660c:	       move.l 100(sp),d0
   16610:	       sub.l 84(sp),d0
   16614:	       move.l 56(sp),-(sp)
   16618:	       move.l d0,-(sp)
   1661a:	       jsr 18134 <__mulsi3>
   16620:	       addq.l #8,sp
   16622:	       move.l d0,-(sp)
   16624:	       jsr 17b9a <__floatsidf>
   1662a:	       addq.l #4,sp
   1662c:	       move.l d1,-(sp)
   1662e:	       move.l d0,-(sp)
   16630:	       move.l d3,-(sp)
   16632:	       move.l d2,-(sp)
   16634:	       jsr 179cc <__adddf3>
   1663a:	       lea 16(sp),sp
   1663e:	       move.l d0,24(sp)
   16642:	       move.l d1,28(sp)
   16646:	       move.l 24(sp),48(sp)
   1664c:	       move.l 28(sp),52(sp)
	m /= (xDiff * xDiff) + (yDiff * yDiff);
   16652:	       move.l 64(sp),-(sp)
   16656:	       move.l 64(sp),-(sp)
   1665a:	       move.l 72(sp),-(sp)
   1665e:	       move.l 72(sp),-(sp)
   16662:	       jsr 17c2a <__muldf3>
   16668:	       lea 16(sp),sp
   1666c:	       move.l d0,d2
   1666e:	       move.l d1,d3
   16670:	       move.l 56(sp),-(sp)
   16674:	       move.l 60(sp),-(sp)
   16678:	       jsr 18134 <__mulsi3>
   1667e:	       addq.l #8,sp
   16680:	       move.l d0,-(sp)
   16682:	       jsr 17b9a <__floatsidf>
   16688:	       addq.l #4,sp
   1668a:	       move.l d1,-(sp)
   1668c:	       move.l d0,-(sp)
   1668e:	       move.l d3,-(sp)
   16690:	       move.l d2,-(sp)
   16692:	       jsr 179cc <__adddf3>
   16698:	       lea 16(sp),sp
   1669c:	       move.l d1,-(sp)
   1669e:	       move.l d0,-(sp)
   166a0:	       move.l 60(sp),-(sp)
   166a4:	       move.l 60(sp),-(sp)
   166a8:	       jsr 17a2e <__divdf3>
   166ae:	       lea 16(sp),sp
   166b2:	       move.l d0,16(sp)
   166b6:	       move.l d1,20(sp)
   166ba:	       move.l 16(sp),48(sp)
   166c0:	       move.l 20(sp),52(sp)

	if (m < 0) {		
   166c6:	       clr.l -(sp)
   166c8:	       clr.l -(sp)
   166ca:	       move.l 60(sp),-(sp)
   166ce:	       move.l 60(sp),-(sp)
   166d2:	       jsr 17db2 <__ltdf2>
   166d8:	       lea 16(sp),sp
   166dc:	       tst.l d0
   166de:	   ,-- bge.s 166f4 <closestPointOnLine+0x14e>
		*closestX = x1;
   166e0:	   |   movea.l 72(sp),a0
   166e4:	   |   move.l 80(sp),(a0)
		*closestY = y1;
   166e8:	   |   movea.l 76(sp),a0
   166ec:	   |   move.l 84(sp),(a0)
   166f0:	,--|-- bra.w 167c2 <closestPointOnLine+0x21c>
	} else if (m > 1) {
   166f4:	|  '-> clr.l -(sp)
   166f6:	|      move.l #1072693248,-(sp)
   166fc:	|      move.l 60(sp),-(sp)
   16700:	|      move.l 60(sp),-(sp)
   16704:	|      jsr 17cf8 <__gtdf2>
   1670a:	|      lea 16(sp),sp
   1670e:	|      tst.l d0
   16710:	|  ,-- ble.s 16726 <closestPointOnLine+0x180>
		*closestX = x2;
   16712:	|  |   movea.l 72(sp),a0
   16716:	|  |   move.l 88(sp),(a0)
		*closestY = y2;
   1671a:	|  |   movea.l 76(sp),a0
   1671e:	|  |   move.l 92(sp),(a0)
   16722:	+--|-- bra.w 167c2 <closestPointOnLine+0x21c>
	} else {
		DOUBLE tmp = m * xDiff; 
   16726:	|  '-> move.l 64(sp),-(sp)
   1672a:	|      move.l 64(sp),-(sp)
   1672e:	|      move.l 60(sp),-(sp)
   16732:	|      move.l 60(sp),-(sp)
   16736:	|      jsr 17c2a <__muldf3>
   1673c:	|      lea 16(sp),sp
   16740:	|      move.l d0,8(sp)
   16744:	|      move.l d1,12(sp)
   16748:	|      move.l 8(sp),40(sp)
   1674e:	|      move.l 12(sp),44(sp)
		*closestX = (int) tmp;
   16754:	|      move.l 44(sp),-(sp)
   16758:	|      move.l 44(sp),-(sp)
   1675c:	|      jsr 17b3c <__fixdfsi>
   16762:	|      addq.l #8,sp
   16764:	|      movea.l 72(sp),a0
   16768:	|      move.l d0,(a0)
		*closestX += x1;
   1676a:	|      movea.l 72(sp),a0
   1676e:	|      move.l (a0),d0
   16770:	|      add.l 80(sp),d0
   16774:	|      movea.l 72(sp),a0
   16778:	|      move.l d0,(a0)
		*closestY = m * yDiff;
   1677a:	|      move.l 56(sp),-(sp)
   1677e:	|      jsr 17b9a <__floatsidf>
   16784:	|      addq.l #4,sp
   16786:	|      move.l 52(sp),-(sp)
   1678a:	|      move.l 52(sp),-(sp)
   1678e:	|      move.l d1,-(sp)
   16790:	|      move.l d0,-(sp)
   16792:	|      jsr 17c2a <__muldf3>
   16798:	|      lea 16(sp),sp
   1679c:	|      move.l d1,-(sp)
   1679e:	|      move.l d0,-(sp)
   167a0:	|      jsr 17b3c <__fixdfsi>
   167a6:	|      addq.l #8,sp
   167a8:	|      movea.l 76(sp),a0
   167ac:	|      move.l d0,(a0)
		*closestY += y1;
   167ae:	|      movea.l 76(sp),a0
   167b2:	|      move.l (a0),d0
   167b4:	|      add.l 84(sp),d0
   167b8:	|      movea.l 76(sp),a0
   167bc:	|      move.l d0,(a0)
		return TRUE;
   167be:	|      moveq #1,d0
   167c0:	|  ,-- bra.s 167c4 <closestPointOnLine+0x21e>
	}
	return FALSE;
   167c2:	'--|-> clr.w d0
}
   167c4:	   '-> move.l (sp)+,d2
   167c6:	       move.l (sp)+,d3
   167c8:	       lea 60(sp),sp
   167cc:	       rts

000167ce <drawFloor>:

void drawFloor() {
   167ce:	                lea -12(sp),sp
   167d2:	                move.l d3,-(sp)
   167d4:	                move.l d2,-(sp)
    int i, j, nV;
    for (i = 0; i < currentFloor->numPolygons; i++) {
   167d6:	                clr.l 16(sp)
   167da:	   ,----------- bra.w 169ee <drawFloor+0x220>
        nV = currentFloor->polygon[i].numVertices;
   167de:	,--|----------> movea.l 1d0ce <currentFloor>,a0
   167e4:	|  |            move.l 12(a0),d1
   167e8:	|  |            move.l 16(sp),d0
   167ec:	|  |            lsl.l #3,d0
   167ee:	|  |            movea.l d1,a0
   167f0:	|  |            adda.l d0,a0
   167f2:	|  |            move.l (a0),8(sp)
        if (nV > 1) {
   167f6:	|  |            moveq #1,d0
   167f8:	|  |            cmp.l 8(sp),d0
   167fc:	|  |  ,-------- bge.w 169ea <drawFloor+0x21c>
            for (j = 1; j < nV; j++) {
   16800:	|  |  |         moveq #1,d0
   16802:	|  |  |         move.l d0,12(sp)
   16806:	|  |  |     ,-- bra.w 16900 <drawFloor+0x132>
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].y,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].x,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].y);
   1680a:	|  |  |  ,--|-> movea.l 1d0ce <currentFloor>,a0
   16810:	|  |  |  |  |   move.l 4(a0),d1
   16814:	|  |  |  |  |   movea.l 1d0ce <currentFloor>,a0
   1681a:	|  |  |  |  |   movea.l 12(a0),a0
   1681e:	|  |  |  |  |   move.l 16(sp),d0
   16822:	|  |  |  |  |   lsl.l #3,d0
   16824:	|  |  |  |  |   adda.l d0,a0
   16826:	|  |  |  |  |   movea.l 4(a0),a0
   1682a:	|  |  |  |  |   move.l 12(sp),d0
   1682e:	|  |  |  |  |   add.l d0,d0
   16830:	|  |  |  |  |   add.l d0,d0
   16832:	|  |  |  |  |   adda.l d0,a0
   16834:	|  |  |  |  |   move.l (a0),d0
   16836:	|  |  |  |  |   lsl.l #3,d0
   16838:	|  |  |  |  |   movea.l d1,a0
   1683a:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   1683c:	|  |  |  |  |   move.l 4(a0),d2
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].x,
   16840:	|  |  |  |  |   movea.l 1d0ce <currentFloor>,a0
   16846:	|  |  |  |  |   move.l 4(a0),d1
   1684a:	|  |  |  |  |   movea.l 1d0ce <currentFloor>,a0
   16850:	|  |  |  |  |   movea.l 12(a0),a0
   16854:	|  |  |  |  |   move.l 16(sp),d0
   16858:	|  |  |  |  |   lsl.l #3,d0
   1685a:	|  |  |  |  |   adda.l d0,a0
   1685c:	|  |  |  |  |   movea.l 4(a0),a0
   16860:	|  |  |  |  |   move.l 12(sp),d0
   16864:	|  |  |  |  |   add.l d0,d0
   16866:	|  |  |  |  |   add.l d0,d0
   16868:	|  |  |  |  |   adda.l d0,a0
   1686a:	|  |  |  |  |   move.l (a0),d0
   1686c:	|  |  |  |  |   lsl.l #3,d0
   1686e:	|  |  |  |  |   movea.l d1,a0
   16870:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   16872:	|  |  |  |  |   movea.l (a0),a1
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].y,
   16874:	|  |  |  |  |   movea.l 1d0ce <currentFloor>,a0
   1687a:	|  |  |  |  |   move.l 4(a0),d1
   1687e:	|  |  |  |  |   movea.l 1d0ce <currentFloor>,a0
   16884:	|  |  |  |  |   movea.l 12(a0),a0
   16888:	|  |  |  |  |   move.l 16(sp),d0
   1688c:	|  |  |  |  |   lsl.l #3,d0
   1688e:	|  |  |  |  |   adda.l d0,a0
   16890:	|  |  |  |  |   movea.l 4(a0),a0
   16894:	|  |  |  |  |   move.l 12(sp),d0
   16898:	|  |  |  |  |   addi.l #1073741823,d0
   1689e:	|  |  |  |  |   add.l d0,d0
   168a0:	|  |  |  |  |   add.l d0,d0
   168a2:	|  |  |  |  |   adda.l d0,a0
   168a4:	|  |  |  |  |   move.l (a0),d0
   168a6:	|  |  |  |  |   lsl.l #3,d0
   168a8:	|  |  |  |  |   movea.l d1,a0
   168aa:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   168ac:	|  |  |  |  |   move.l 4(a0),d1
   168b0:	|  |  |  |  |   movea.l 1d0ce <currentFloor>,a0
   168b6:	|  |  |  |  |   move.l 4(a0),d3
   168ba:	|  |  |  |  |   movea.l 1d0ce <currentFloor>,a0
   168c0:	|  |  |  |  |   movea.l 12(a0),a0
   168c4:	|  |  |  |  |   move.l 16(sp),d0
   168c8:	|  |  |  |  |   lsl.l #3,d0
   168ca:	|  |  |  |  |   adda.l d0,a0
   168cc:	|  |  |  |  |   movea.l 4(a0),a0
   168d0:	|  |  |  |  |   move.l 12(sp),d0
   168d4:	|  |  |  |  |   addi.l #1073741823,d0
   168da:	|  |  |  |  |   add.l d0,d0
   168dc:	|  |  |  |  |   add.l d0,d0
   168de:	|  |  |  |  |   adda.l d0,a0
   168e0:	|  |  |  |  |   move.l (a0),d0
   168e2:	|  |  |  |  |   lsl.l #3,d0
   168e4:	|  |  |  |  |   movea.l d3,a0
   168e6:	|  |  |  |  |   adda.l d0,a0
   168e8:	|  |  |  |  |   move.l (a0),d0
   168ea:	|  |  |  |  |   move.l d2,-(sp)
   168ec:	|  |  |  |  |   move.l a1,-(sp)
   168ee:	|  |  |  |  |   move.l d1,-(sp)
   168f0:	|  |  |  |  |   move.l d0,-(sp)
   168f2:	|  |  |  |  |   jsr 4ac4 <drawLine>
   168f8:	|  |  |  |  |   lea 16(sp),sp
            for (j = 1; j < nV; j++) {
   168fc:	|  |  |  |  |   addq.l #1,12(sp)
   16900:	|  |  |  |  '-> move.l 12(sp),d0
   16904:	|  |  |  |      cmp.l 8(sp),d0
   16908:	|  |  |  '----- blt.w 1680a <drawFloor+0x3c>
            }
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].y,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].x,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].y);
   1690c:	|  |  |         movea.l 1d0ce <currentFloor>,a0
   16912:	|  |  |         move.l 4(a0),d1
   16916:	|  |  |         movea.l 1d0ce <currentFloor>,a0
   1691c:	|  |  |         movea.l 12(a0),a0
   16920:	|  |  |         move.l 16(sp),d0
   16924:	|  |  |         lsl.l #3,d0
   16926:	|  |  |         adda.l d0,a0
   16928:	|  |  |         movea.l 4(a0),a0
   1692c:	|  |  |         move.l 8(sp),d0
   16930:	|  |  |         addi.l #1073741823,d0
   16936:	|  |  |         add.l d0,d0
   16938:	|  |  |         add.l d0,d0
   1693a:	|  |  |         adda.l d0,a0
   1693c:	|  |  |         move.l (a0),d0
   1693e:	|  |  |         lsl.l #3,d0
   16940:	|  |  |         movea.l d1,a0
   16942:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   16944:	|  |  |         move.l 4(a0),d2
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].x,
   16948:	|  |  |         movea.l 1d0ce <currentFloor>,a0
   1694e:	|  |  |         move.l 4(a0),d1
   16952:	|  |  |         movea.l 1d0ce <currentFloor>,a0
   16958:	|  |  |         movea.l 12(a0),a0
   1695c:	|  |  |         move.l 16(sp),d0
   16960:	|  |  |         lsl.l #3,d0
   16962:	|  |  |         adda.l d0,a0
   16964:	|  |  |         movea.l 4(a0),a0
   16968:	|  |  |         move.l 8(sp),d0
   1696c:	|  |  |         addi.l #1073741823,d0
   16972:	|  |  |         add.l d0,d0
   16974:	|  |  |         add.l d0,d0
   16976:	|  |  |         adda.l d0,a0
   16978:	|  |  |         move.l (a0),d0
   1697a:	|  |  |         lsl.l #3,d0
   1697c:	|  |  |         movea.l d1,a0
   1697e:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   16980:	|  |  |         movea.l (a0),a1
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].y,
   16982:	|  |  |         movea.l 1d0ce <currentFloor>,a0
   16988:	|  |  |         move.l 4(a0),d1
   1698c:	|  |  |         movea.l 1d0ce <currentFloor>,a0
   16992:	|  |  |         movea.l 12(a0),a0
   16996:	|  |  |         move.l 16(sp),d0
   1699a:	|  |  |         lsl.l #3,d0
   1699c:	|  |  |         adda.l d0,a0
   1699e:	|  |  |         movea.l 4(a0),a0
   169a2:	|  |  |         move.l (a0),d0
   169a4:	|  |  |         lsl.l #3,d0
   169a6:	|  |  |         movea.l d1,a0
   169a8:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   169aa:	|  |  |         move.l 4(a0),d1
   169ae:	|  |  |         movea.l 1d0ce <currentFloor>,a0
   169b4:	|  |  |         move.l 4(a0),d3
   169b8:	|  |  |         movea.l 1d0ce <currentFloor>,a0
   169be:	|  |  |         movea.l 12(a0),a0
   169c2:	|  |  |         move.l 16(sp),d0
   169c6:	|  |  |         lsl.l #3,d0
   169c8:	|  |  |         adda.l d0,a0
   169ca:	|  |  |         movea.l 4(a0),a0
   169ce:	|  |  |         move.l (a0),d0
   169d0:	|  |  |         lsl.l #3,d0
   169d2:	|  |  |         movea.l d3,a0
   169d4:	|  |  |         adda.l d0,a0
   169d6:	|  |  |         move.l (a0),d0
   169d8:	|  |  |         move.l d2,-(sp)
   169da:	|  |  |         move.l a1,-(sp)
   169dc:	|  |  |         move.l d1,-(sp)
   169de:	|  |  |         move.l d0,-(sp)
   169e0:	|  |  |         jsr 4ac4 <drawLine>
   169e6:	|  |  |         lea 16(sp),sp
    for (i = 0; i < currentFloor->numPolygons; i++) {
   169ea:	|  |  '-------> addq.l #1,16(sp)
   169ee:	|  '----------> movea.l 1d0ce <currentFloor>,a0
   169f4:	|               move.l 8(a0),d0
   169f8:	|               cmp.l 16(sp),d0
   169fc:	'-------------- bgt.w 167de <drawFloor+0x10>
        }
    }
}
   16a00:	                nop
   16a02:	                nop
   16a04:	                move.l (sp)+,d2
   16a06:	                move.l (sp)+,d3
   16a08:	                lea 12(sp),sp
   16a0c:	                rts

00016a0e <getMatchingCorners>:

BOOL getMatchingCorners(struct floorPolygon *a, struct floorPolygon *b, int *cornerA, int *cornerB) {
   16a0e:	                      lea -12(sp),sp
    int sharedVertices = 0;
   16a12:	                      clr.l 8(sp)
    int i, j;

    for (i = 0; i < a->numVertices; i++) {
   16a16:	                      clr.l 4(sp)
   16a1a:	   ,----------------- bra.w 16aac <getMatchingCorners+0x9e>
        for (j = 0; j < b->numVertices; j++) {
   16a1e:	,--|----------------> clr.l (sp)
   16a20:	|  |     ,----------- bra.s 16a9c <getMatchingCorners+0x8e>
            if (a->vertexID[i] == b->vertexID[j]) {
   16a22:	|  |  ,--|----------> movea.l 16(sp),a0
   16a26:	|  |  |  |            move.l 4(a0),d1
   16a2a:	|  |  |  |            move.l 4(sp),d0
   16a2e:	|  |  |  |            add.l d0,d0
   16a30:	|  |  |  |            add.l d0,d0
   16a32:	|  |  |  |            movea.l d1,a0
   16a34:	|  |  |  |            adda.l d0,a0
   16a36:	|  |  |  |            move.l (a0),d1
   16a38:	|  |  |  |            movea.l 20(sp),a0
   16a3c:	|  |  |  |            movea.l 4(a0),a0
   16a40:	|  |  |  |            move.l (sp),d0
   16a42:	|  |  |  |            add.l d0,d0
   16a44:	|  |  |  |            add.l d0,d0
   16a46:	|  |  |  |            adda.l d0,a0
   16a48:	|  |  |  |            move.l (a0),d0
   16a4a:	|  |  |  |            cmp.l d1,d0
   16a4c:	|  |  |  |  ,-------- bne.s 16a9a <getMatchingCorners+0x8c>
                if (sharedVertices++) {
   16a4e:	|  |  |  |  |         move.l 8(sp),d0
   16a52:	|  |  |  |  |         move.l d0,d1
   16a54:	|  |  |  |  |         addq.l #1,d1
   16a56:	|  |  |  |  |         move.l d1,8(sp)
   16a5a:	|  |  |  |  |         tst.l d0
   16a5c:	|  |  |  |  |     ,-- beq.s 16a7e <getMatchingCorners+0x70>
                    *cornerB = a->vertexID[i];
   16a5e:	|  |  |  |  |     |   movea.l 16(sp),a0
   16a62:	|  |  |  |  |     |   move.l 4(a0),d1
   16a66:	|  |  |  |  |     |   move.l 4(sp),d0
   16a6a:	|  |  |  |  |     |   add.l d0,d0
   16a6c:	|  |  |  |  |     |   add.l d0,d0
   16a6e:	|  |  |  |  |     |   movea.l d1,a0
   16a70:	|  |  |  |  |     |   adda.l d0,a0
   16a72:	|  |  |  |  |     |   move.l (a0),d0
   16a74:	|  |  |  |  |     |   movea.l 28(sp),a0
   16a78:	|  |  |  |  |     |   move.l d0,(a0)
                    return TRUE;
   16a7a:	|  |  |  |  |     |   moveq #1,d0
   16a7c:	|  |  |  |  |  ,--|-- bra.s 16abc <getMatchingCorners+0xae>
                } else {
                    *cornerA = a->vertexID[i];
   16a7e:	|  |  |  |  |  |  '-> movea.l 16(sp),a0
   16a82:	|  |  |  |  |  |      move.l 4(a0),d1
   16a86:	|  |  |  |  |  |      move.l 4(sp),d0
   16a8a:	|  |  |  |  |  |      add.l d0,d0
   16a8c:	|  |  |  |  |  |      add.l d0,d0
   16a8e:	|  |  |  |  |  |      movea.l d1,a0
   16a90:	|  |  |  |  |  |      adda.l d0,a0
   16a92:	|  |  |  |  |  |      move.l (a0),d0
   16a94:	|  |  |  |  |  |      movea.l 24(sp),a0
   16a98:	|  |  |  |  |  |      move.l d0,(a0)
        for (j = 0; j < b->numVertices; j++) {
   16a9a:	|  |  |  |  '--|----> addq.l #1,(sp)
   16a9c:	|  |  |  '-----|----> movea.l 20(sp),a0
   16aa0:	|  |  |        |      move.l (a0),d0
   16aa2:	|  |  |        |      cmp.l (sp),d0
   16aa4:	|  |  '--------|----- bgt.w 16a22 <getMatchingCorners+0x14>
    for (i = 0; i < a->numVertices; i++) {
   16aa8:	|  |           |      addq.l #1,4(sp)
   16aac:	|  '-----------|----> movea.l 16(sp),a0
   16ab0:	|              |      move.l (a0),d0
   16ab2:	|              |      cmp.l 4(sp),d0
   16ab6:	'--------------|----- bgt.w 16a1e <getMatchingCorners+0x10>
                }
            }
        }
    }

    return FALSE;
   16aba:	               |      clr.w d0
}
   16abc:	               '----> lea 12(sp),sp
   16ac0:	                      rts

00016ac2 <noFloor>:



void noFloor () {
	currentFloor -> numPolygons = 0;
   16ac2:	movea.l 1d0ce <currentFloor>,a0
   16ac8:	clr.l 8(a0)
	currentFloor -> polygon = NULL;
   16acc:	movea.l 1d0ce <currentFloor>,a0
   16ad2:	clr.l 12(a0)
	currentFloor -> vertex = NULL;
   16ad6:	movea.l 1d0ce <currentFloor>,a0
   16adc:	clr.l 4(a0)
	currentFloor -> matrix = NULL;
   16ae0:	movea.l 1d0ce <currentFloor>,a0
   16ae6:	clr.l 16(a0)
}
   16aea:	nop
   16aec:	rts

00016aee <inFloor>:

int inFloor (int x, int y) {
   16aee:	          subq.l #8,sp
	KPrintF("inFloor started\n");
   16af0:	          pea 1a6d3 <PutChar+0x2489>
   16af6:	          jsr 177a8 <KPrintF>
   16afc:	          addq.l #4,sp
	int i, r = -1;
   16afe:	          moveq #-1,d0
   16b00:	          move.l d0,(sp)

	for (i = 0; i < currentFloor -> numPolygons; i ++)
   16b02:	          clr.l 4(sp)
   16b06:	   ,----- bra.s 16b3a <inFloor+0x4c>
		if (pointInFloorPolygon (&currentFloor -> polygon[i], x, y))
   16b08:	,--|----> movea.l 1d0ce <currentFloor>,a0
   16b0e:	|  |      move.l 12(a0),d1
   16b12:	|  |      move.l 4(sp),d0
   16b16:	|  |      lsl.l #3,d0
   16b18:	|  |      add.l d1,d0
   16b1a:	|  |      move.l 16(sp),-(sp)
   16b1e:	|  |      move.l 16(sp),-(sp)
   16b22:	|  |      move.l d0,-(sp)
   16b24:	|  |      jsr 16d14 <pointInFloorPolygon>
   16b2a:	|  |      lea 12(sp),sp
   16b2e:	|  |      tst.w d0
   16b30:	|  |  ,-- beq.s 16b36 <inFloor+0x48>
			r = i;
   16b32:	|  |  |   move.l 4(sp),(sp)
	for (i = 0; i < currentFloor -> numPolygons; i ++)
   16b36:	|  |  '-> addq.l #1,4(sp)
   16b3a:	|  '----> movea.l 1d0ce <currentFloor>,a0
   16b40:	|         move.l 8(a0),d0
   16b44:	|         cmp.l 4(sp),d0
   16b48:	'-------- bgt.s 16b08 <inFloor+0x1a>

	KPrintF("infloor finished\n");
   16b4a:	          pea 1a6e4 <PutChar+0x249a>
   16b50:	          jsr 177a8 <KPrintF>
   16b56:	          addq.l #4,sp
	return r;
   16b58:	          move.l (sp),d0
}
   16b5a:	          addq.l #8,sp
   16b5c:	          rts

00016b5e <initFloor>:

BOOL initFloor () {
   16b5e:	       lea -12(sp),sp
   16b62:	       move.l a6,-(sp)
	currentFloor = AllocVec(sizeof(struct flor), MEMF_ANY);
   16b64:	       moveq #20,d0
   16b66:	       move.l d0,12(sp)
   16b6a:	       clr.l 8(sp)
   16b6e:	       move.l 1cfb6 <SysBase>,d0
   16b74:	       movea.l d0,a6
   16b76:	       move.l 12(sp),d0
   16b7a:	       move.l 8(sp),d1
   16b7e:	       jsr -684(a6)
   16b82:	       move.l d0,4(sp)
   16b86:	       move.l 4(sp),d0
   16b8a:	       move.l d0,1d0ce <currentFloor>

    if(currentFloor == 0) {
   16b90:	       move.l 1d0ce <currentFloor>,d0
   16b96:	,----- bne.s 16baa <initFloor+0x4c>
        KPrintF("initFloor: Could not initialize Mem");
   16b98:	|      pea 1a6f6 <PutChar+0x24ac>
   16b9e:	|      jsr 177a8 <KPrintF>
   16ba4:	|      addq.l #4,sp
        return FALSE;
   16ba6:	|      clr.w d0
   16ba8:	|  ,-- bra.s 16bb2 <initFloor+0x54>
    }

	noFloor ();
   16baa:	'--|-> jsr 16ac2 <noFloor>
	return TRUE;
   16bb0:	   |   moveq #1,d0
}
   16bb2:	   '-> movea.l (sp)+,a6
   16bb4:	       lea 12(sp),sp
   16bb8:	       rts

00016bba <killFloor>:

void killFloor () {
   16bba:	       lea -24(sp),sp
   16bbe:	       move.l a6,-(sp)
	for (int i = 0; i < currentFloor -> numPolygons; i ++) {
   16bc0:	       clr.l 24(sp)
   16bc4:	   ,-- bra.s 16c1e <killFloor+0x64>
		FreeVec(currentFloor -> polygon[i].vertexID);
   16bc6:	,--|-> movea.l 1d0ce <currentFloor>,a0
   16bcc:	|  |   move.l 12(a0),d1
   16bd0:	|  |   move.l 24(sp),d0
   16bd4:	|  |   lsl.l #3,d0
   16bd6:	|  |   movea.l d1,a0
   16bd8:	|  |   adda.l d0,a0
   16bda:	|  |   move.l 4(a0),8(sp)
   16be0:	|  |   move.l 1cfb6 <SysBase>,d0
   16be6:	|  |   movea.l d0,a6
   16be8:	|  |   movea.l 8(sp),a1
   16bec:	|  |   jsr -690(a6)
		FreeVec(currentFloor -> matrix[i]);
   16bf0:	|  |   movea.l 1d0ce <currentFloor>,a0
   16bf6:	|  |   move.l 16(a0),d1
   16bfa:	|  |   move.l 24(sp),d0
   16bfe:	|  |   add.l d0,d0
   16c00:	|  |   add.l d0,d0
   16c02:	|  |   movea.l d1,a0
   16c04:	|  |   adda.l d0,a0
   16c06:	|  |   move.l (a0),4(sp)
   16c0a:	|  |   move.l 1cfb6 <SysBase>,d0
   16c10:	|  |   movea.l d0,a6
   16c12:	|  |   movea.l 4(sp),a1
   16c16:	|  |   jsr -690(a6)
	for (int i = 0; i < currentFloor -> numPolygons; i ++) {
   16c1a:	|  |   addq.l #1,24(sp)
   16c1e:	|  '-> movea.l 1d0ce <currentFloor>,a0
   16c24:	|      move.l 8(a0),d0
   16c28:	|      cmp.l 24(sp),d0
   16c2c:	'----- bgt.s 16bc6 <killFloor+0xc>
	}
	FreeVec(currentFloor -> polygon);
   16c2e:	       movea.l 1d0ce <currentFloor>,a0
   16c34:	       move.l 12(a0),20(sp)
   16c3a:	       move.l 1cfb6 <SysBase>,d0
   16c40:	       movea.l d0,a6
   16c42:	       movea.l 20(sp),a1
   16c46:	       jsr -690(a6)
	currentFloor -> polygon = NULL;
   16c4a:	       movea.l 1d0ce <currentFloor>,a0
   16c50:	       clr.l 12(a0)
	FreeVec(currentFloor -> vertex);
   16c54:	       movea.l 1d0ce <currentFloor>,a0
   16c5a:	       move.l 4(a0),16(sp)
   16c60:	       move.l 1cfb6 <SysBase>,d0
   16c66:	       movea.l d0,a6
   16c68:	       movea.l 16(sp),a1
   16c6c:	       jsr -690(a6)
	currentFloor -> vertex = NULL;
   16c70:	       movea.l 1d0ce <currentFloor>,a0
   16c76:	       clr.l 4(a0)
	FreeVec(currentFloor -> matrix);
   16c7a:	       movea.l 1d0ce <currentFloor>,a0
   16c80:	       move.l 16(a0),12(sp)
   16c86:	       move.l 1cfb6 <SysBase>,d0
   16c8c:	       movea.l d0,a6
   16c8e:	       movea.l 12(sp),a1
   16c92:	       jsr -690(a6)
	currentFloor -> matrix = NULL;
   16c96:	       movea.l 1d0ce <currentFloor>,a0
   16c9c:	       clr.l 16(a0)
}
   16ca0:	       nop
   16ca2:	       movea.l (sp)+,a6
   16ca4:	       lea 24(sp),sp
   16ca8:	       rts

00016caa <polysShareSide>:

BOOL polysShareSide (struct floorPolygon a, struct floorPolygon b) {
   16caa:	                   lea -12(sp),sp
	int sharedVertices = 0;
   16cae:	                   clr.l 8(sp)
	int i, j;

	for (i = 0; i < a.numVertices; i ++) {
   16cb2:	                   clr.l 4(sp)
   16cb6:	   ,-------------- bra.s 16d02 <polysShareSide+0x58>
		for (j = 0; j < b.numVertices; j ++) {
   16cb8:	,--|-------------> clr.l (sp)
   16cba:	|  |     ,-------- bra.s 16cf6 <polysShareSide+0x4c>
			if (a.vertexID[i] == b.vertexID[j]) {
   16cbc:	|  |  ,--|-------> move.l 20(sp),d1
   16cc0:	|  |  |  |         move.l 4(sp),d0
   16cc4:	|  |  |  |         add.l d0,d0
   16cc6:	|  |  |  |         add.l d0,d0
   16cc8:	|  |  |  |         movea.l d1,a0
   16cca:	|  |  |  |         adda.l d0,a0
   16ccc:	|  |  |  |         move.l (a0),d1
   16cce:	|  |  |  |         movea.l 28(sp),a0
   16cd2:	|  |  |  |         move.l (sp),d0
   16cd4:	|  |  |  |         add.l d0,d0
   16cd6:	|  |  |  |         add.l d0,d0
   16cd8:	|  |  |  |         adda.l d0,a0
   16cda:	|  |  |  |         move.l (a0),d0
   16cdc:	|  |  |  |         cmp.l d1,d0
   16cde:	|  |  |  |     ,-- bne.s 16cf4 <polysShareSide+0x4a>
				if (sharedVertices ++) return TRUE;
   16ce0:	|  |  |  |     |   move.l 8(sp),d0
   16ce4:	|  |  |  |     |   move.l d0,d1
   16ce6:	|  |  |  |     |   addq.l #1,d1
   16ce8:	|  |  |  |     |   move.l d1,8(sp)
   16cec:	|  |  |  |     |   tst.l d0
   16cee:	|  |  |  |     +-- beq.s 16cf4 <polysShareSide+0x4a>
   16cf0:	|  |  |  |     |   moveq #1,d0
   16cf2:	|  |  |  |  ,--|-- bra.s 16d0e <polysShareSide+0x64>
		for (j = 0; j < b.numVertices; j ++) {
   16cf4:	|  |  |  |  |  '-> addq.l #1,(sp)
   16cf6:	|  |  |  '--|----> move.l 24(sp),d0
   16cfa:	|  |  |     |      cmp.l (sp),d0
   16cfc:	|  |  '-----|----- bgt.s 16cbc <polysShareSide+0x12>
	for (i = 0; i < a.numVertices; i ++) {
   16cfe:	|  |        |      addq.l #1,4(sp)
   16d02:	|  '--------|----> move.l 16(sp),d0
   16d06:	|           |      cmp.l 4(sp),d0
   16d0a:	'-----------|----- bgt.s 16cb8 <polysShareSide+0xe>
			}
		}
	}

	return FALSE;
   16d0c:	            |      clr.w d0
}
   16d0e:	            '----> lea 12(sp),sp
   16d12:	                   rts

00016d14 <pointInFloorPolygon>:

BOOL pointInFloorPolygon (struct floorPolygon * floorPoly, int x, int y) {
   16d14:	             lea -28(sp),sp
   16d18:	             move.l d3,-(sp)
   16d1a:	             move.l d2,-(sp)
	int i = 0, j, c = 0;
   16d1c:	             clr.l 32(sp)
   16d20:	             clr.l 24(sp)
	float xp_i, yp_i;
	float xp_j, yp_j;

	for (j = floorPoly->numVertices - 1; i < floorPoly->numVertices; j = i++) {
   16d24:	             movea.l 40(sp),a0
   16d28:	             move.l (a0),d0
   16d2a:	             move.l d0,d1
   16d2c:	             subq.l #1,d1
   16d2e:	             move.l d1,28(sp)
   16d32:	   ,-------- bra.w 16f2c <pointInFloorPolygon+0x218>

		xp_i = currentFloor->vertex[floorPoly->vertexID[i]].x;
   16d36:	,--|-------> movea.l 1d0ce <currentFloor>,a0
   16d3c:	|  |         move.l 4(a0),d1
   16d40:	|  |         movea.l 40(sp),a0
   16d44:	|  |         movea.l 4(a0),a0
   16d48:	|  |         move.l 32(sp),d0
   16d4c:	|  |         add.l d0,d0
   16d4e:	|  |         add.l d0,d0
   16d50:	|  |         adda.l d0,a0
   16d52:	|  |         move.l (a0),d0
   16d54:	|  |         lsl.l #3,d0
   16d56:	|  |         movea.l d1,a0
   16d58:	|  |         adda.l d0,a0
   16d5a:	|  |         move.l (a0),d0
   16d5c:	|  |         move.l d0,-(sp)
   16d5e:	|  |         jsr 17bda <__floatsisf>
   16d64:	|  |         addq.l #4,sp
   16d66:	|  |         move.l d0,20(sp)
		yp_i = currentFloor->vertex[floorPoly->vertexID[i]].y;
   16d6a:	|  |         movea.l 1d0ce <currentFloor>,a0
   16d70:	|  |         move.l 4(a0),d1
   16d74:	|  |         movea.l 40(sp),a0
   16d78:	|  |         movea.l 4(a0),a0
   16d7c:	|  |         move.l 32(sp),d0
   16d80:	|  |         add.l d0,d0
   16d82:	|  |         add.l d0,d0
   16d84:	|  |         adda.l d0,a0
   16d86:	|  |         move.l (a0),d0
   16d88:	|  |         lsl.l #3,d0
   16d8a:	|  |         movea.l d1,a0
   16d8c:	|  |         adda.l d0,a0
   16d8e:	|  |         move.l 4(a0),d0
   16d92:	|  |         move.l d0,-(sp)
   16d94:	|  |         jsr 17bda <__floatsisf>
   16d9a:	|  |         addq.l #4,sp
   16d9c:	|  |         move.l d0,16(sp)
		xp_j = currentFloor->vertex[floorPoly->vertexID[j]].x;
   16da0:	|  |         movea.l 1d0ce <currentFloor>,a0
   16da6:	|  |         move.l 4(a0),d1
   16daa:	|  |         movea.l 40(sp),a0
   16dae:	|  |         movea.l 4(a0),a0
   16db2:	|  |         move.l 28(sp),d0
   16db6:	|  |         add.l d0,d0
   16db8:	|  |         add.l d0,d0
   16dba:	|  |         adda.l d0,a0
   16dbc:	|  |         move.l (a0),d0
   16dbe:	|  |         lsl.l #3,d0
   16dc0:	|  |         movea.l d1,a0
   16dc2:	|  |         adda.l d0,a0
   16dc4:	|  |         move.l (a0),d0
   16dc6:	|  |         move.l d0,-(sp)
   16dc8:	|  |         jsr 17bda <__floatsisf>
   16dce:	|  |         addq.l #4,sp
   16dd0:	|  |         move.l d0,12(sp)
		yp_j = currentFloor->vertex[floorPoly->vertexID[j]].y;
   16dd4:	|  |         movea.l 1d0ce <currentFloor>,a0
   16dda:	|  |         move.l 4(a0),d1
   16dde:	|  |         movea.l 40(sp),a0
   16de2:	|  |         movea.l 4(a0),a0
   16de6:	|  |         move.l 28(sp),d0
   16dea:	|  |         add.l d0,d0
   16dec:	|  |         add.l d0,d0
   16dee:	|  |         adda.l d0,a0
   16df0:	|  |         move.l (a0),d0
   16df2:	|  |         lsl.l #3,d0
   16df4:	|  |         movea.l d1,a0
   16df6:	|  |         adda.l d0,a0
   16df8:	|  |         move.l 4(a0),d0
   16dfc:	|  |         move.l d0,-(sp)
   16dfe:	|  |         jsr 17bda <__floatsisf>
   16e04:	|  |         addq.l #4,sp
   16e06:	|  |         move.l d0,8(sp)

		if ((((yp_i <= y) && (y < yp_j)) || ((yp_j <= y) && (y < yp_i))) &&
   16e0a:	|  |         move.l 48(sp),-(sp)
   16e0e:	|  |         jsr 17bda <__floatsisf>
   16e14:	|  |         addq.l #4,sp
   16e16:	|  |         move.l d0,-(sp)
   16e18:	|  |         move.l 20(sp),-(sp)
   16e1c:	|  |         jsr 17d7c <__lesf2>
   16e22:	|  |         addq.l #8,sp
   16e24:	|  |         tst.l d0
   16e26:	|  |     ,-- bgt.s 16e46 <pointInFloorPolygon+0x132>
   16e28:	|  |     |   move.l 48(sp),-(sp)
   16e2c:	|  |     |   jsr 17bda <__floatsisf>
   16e32:	|  |     |   addq.l #4,sp
   16e34:	|  |     |   move.l d0,-(sp)
   16e36:	|  |     |   move.l 12(sp),-(sp)
   16e3a:	|  |     |   jsr 17d46 <__gtsf2>
   16e40:	|  |     |   addq.l #8,sp
   16e42:	|  |     |   tst.l d0
   16e44:	|  |  ,--|-- bgt.s 16e86 <pointInFloorPolygon+0x172>
   16e46:	|  |  |  '-> move.l 48(sp),-(sp)
   16e4a:	|  |  |      jsr 17bda <__floatsisf>
   16e50:	|  |  |      addq.l #4,sp
   16e52:	|  |  |      move.l d0,-(sp)
   16e54:	|  |  |      move.l 12(sp),-(sp)
   16e58:	|  |  |      jsr 17d7c <__lesf2>
   16e5e:	|  |  |      addq.l #8,sp
   16e60:	|  |  |      tst.l d0
   16e62:	|  |  |  ,-- bgt.w 16f1c <pointInFloorPolygon+0x208>
   16e66:	|  |  |  |   move.l 48(sp),-(sp)
   16e6a:	|  |  |  |   jsr 17bda <__floatsisf>
   16e70:	|  |  |  |   addq.l #4,sp
   16e72:	|  |  |  |   move.l d0,-(sp)
   16e74:	|  |  |  |   move.l 20(sp),-(sp)
   16e78:	|  |  |  |   jsr 17d46 <__gtsf2>
   16e7e:	|  |  |  |   addq.l #8,sp
   16e80:	|  |  |  |   tst.l d0
   16e82:	|  |  |  +-- ble.w 16f1c <pointInFloorPolygon+0x208>
			(x < (xp_j - xp_i) * (y - yp_i) / (yp_j - yp_i) + xp_i)) {
   16e86:	|  |  '--|-> move.l 44(sp),-(sp)
   16e8a:	|  |     |   jsr 17bda <__floatsisf>
   16e90:	|  |     |   addq.l #4,sp
   16e92:	|  |     |   move.l d0,d3
   16e94:	|  |     |   move.l 20(sp),-(sp)
   16e98:	|  |     |   move.l 16(sp),-(sp)
   16e9c:	|  |     |   jsr 17ece <__subsf3>
   16ea2:	|  |     |   addq.l #8,sp
   16ea4:	|  |     |   move.l d0,d2
   16ea6:	|  |     |   move.l 48(sp),-(sp)
   16eaa:	|  |     |   jsr 17bda <__floatsisf>
   16eb0:	|  |     |   addq.l #4,sp
   16eb2:	|  |     |   move.l 16(sp),-(sp)
   16eb6:	|  |     |   move.l d0,-(sp)
   16eb8:	|  |     |   jsr 17ece <__subsf3>
   16ebe:	|  |     |   addq.l #8,sp
   16ec0:	|  |     |   move.l d0,-(sp)
   16ec2:	|  |     |   move.l d2,-(sp)
   16ec4:	|  |     |   jsr 17c8c <__mulsf3>
   16eca:	|  |     |   addq.l #8,sp
   16ecc:	|  |     |   move.l d0,d2
   16ece:	|  |     |   move.l 16(sp),-(sp)
   16ed2:	|  |     |   move.l 12(sp),-(sp)
   16ed6:	|  |     |   jsr 17ece <__subsf3>
   16edc:	|  |     |   addq.l #8,sp
   16ede:	|  |     |   move.l d0,-(sp)
   16ee0:	|  |     |   move.l d2,-(sp)
   16ee2:	|  |     |   jsr 17a90 <__divsf3>
   16ee8:	|  |     |   addq.l #8,sp
   16eea:	|  |     |   move.l 20(sp),-(sp)
   16eee:	|  |     |   move.l d0,-(sp)
   16ef0:	|  |     |   jsr 17996 <__addsf3>
   16ef6:	|  |     |   addq.l #8,sp
		if ((((yp_i <= y) && (y < yp_j)) || ((yp_j <= y) && (y < yp_i))) &&
   16ef8:	|  |     |   move.l d0,-(sp)
   16efa:	|  |     |   move.l d3,-(sp)
   16efc:	|  |     |   jsr 17e00 <__ltsf2>
   16f02:	|  |     |   addq.l #8,sp
   16f04:	|  |     |   tst.l d0
   16f06:	|  |     +-- bge.s 16f1c <pointInFloorPolygon+0x208>

			c = !c;
   16f08:	|  |     |   tst.l 24(sp)
   16f0c:	|  |     |   seq d0
   16f0e:	|  |     |   neg.b d0
   16f10:	|  |     |   move.b d0,d0
   16f12:	|  |     |   andi.l #255,d0
   16f18:	|  |     |   move.l d0,24(sp)
	for (j = floorPoly->numVertices - 1; i < floorPoly->numVertices; j = i++) {
   16f1c:	|  |     '-> move.l 32(sp),d0
   16f20:	|  |         move.l d0,d1
   16f22:	|  |         addq.l #1,d1
   16f24:	|  |         move.l d1,32(sp)
   16f28:	|  |         move.l d0,28(sp)
   16f2c:	|  '-------> movea.l 40(sp),a0
   16f30:	|            move.l (a0),d0
   16f32:	|            cmp.l 32(sp),d0
   16f36:	'----------- bgt.w 16d36 <pointInFloorPolygon+0x22>
		}
	}
	return c ? TRUE : FALSE;
   16f3a:	             tst.l 24(sp)
   16f3e:	             sne d0
   16f40:	             neg.b d0
   16f42:	             move.b d0,d0
   16f44:	             andi.w #255,d0
}
   16f48:	             move.l (sp)+,d2
   16f4a:	             move.l (sp)+,d3
   16f4c:	             lea 28(sp),sp
   16f50:	             rts

00016f52 <setFloor>:

BOOL setFloor (int fileNum) {
   16f52:	                               lea -132(sp),sp
   16f56:	                               move.l a6,-(sp)
   16f58:	                               move.l a2,-(sp)
	int i, j;

	killFloor ();
   16f5a:	                               jsr 16bba <killFloor>

	if (! openFileFromNum (fileNum)) return FALSE;
   16f60:	                               move.l 144(sp),-(sp)
   16f64:	                               jsr 7bdc <openFileFromNum>
   16f6a:	                               addq.l #4,sp
   16f6c:	                               tst.l d0
   16f6e:	                           ,-- bne.s 16f76 <setFloor+0x24>
   16f70:	                           |   clr.w d0
   16f72:	,--------------------------|-- bra.w 176c2 <setFloor+0x770>

	// Find out how many polygons there are and reserve memory

	currentFloor -> originalNum = fileNum;
   16f76:	|                          '-> movea.l 1d0ce <currentFloor>,a0
   16f7c:	|                              move.l 144(sp),(a0)
	currentFloor -> numPolygons = FGetC (bigDataFile);
   16f80:	|                              move.l 1cf9e <bigDataFile>,118(sp)
   16f88:	|                              move.l 1cfbe <DOSBase>,d0
   16f8e:	|                              movea.l d0,a6
   16f90:	|                              move.l 118(sp),d1
   16f94:	|                              jsr -306(a6)
   16f98:	|                              move.l d0,114(sp)
   16f9c:	|                              move.l 114(sp),d0
   16fa0:	|                              movea.l 1d0ce <currentFloor>,a0
   16fa6:	|                              move.l d0,8(a0)
	currentFloor -> polygon = AllocVec(  sizeof( struct floorPolygon) * currentFloor -> numPolygons, MEMF_ANY);
   16faa:	|                              movea.l 1d0ce <currentFloor>,a0
   16fb0:	|                              move.l 8(a0),d0
   16fb4:	|                              lsl.l #3,d0
   16fb6:	|                              move.l d0,110(sp)
   16fba:	|                              clr.l 106(sp)
   16fbe:	|                              move.l 1cfb6 <SysBase>,d0
   16fc4:	|                              movea.l d0,a6
   16fc6:	|                              move.l 110(sp),d0
   16fca:	|                              move.l 106(sp),d1
   16fce:	|                              jsr -684(a6)
   16fd2:	|                              move.l d0,102(sp)
   16fd6:	|                              move.l 102(sp),d0
   16fda:	|                              movea.l 1d0ce <currentFloor>,a0
   16fe0:	|                              move.l d0,12(a0)
	if (!(currentFloor -> polygon)) {
   16fe4:	|                              movea.l 1d0ce <currentFloor>,a0
   16fea:	|                              move.l 12(a0),d0
   16fee:	|                          ,-- bne.s 17004 <setFloor+0xb2>
		KPrintF("setFloor: Cannot allocate memory");
   16ff0:	|                          |   pea 1a71a <PutChar+0x24d0>
   16ff6:	|                          |   jsr 177a8 <KPrintF>
   16ffc:	|                          |   addq.l #4,sp
		return FALSE;
   16ffe:	|                          |   clr.w d0
   17000:	+--------------------------|-- bra.w 176c2 <setFloor+0x770>
	}

	// Read in each polygon

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   17004:	|                          '-> clr.l 136(sp)
   17008:	|                    ,-------- bra.w 17120 <setFloor+0x1ce>

		// Find out how many vertex IDs there are and reserve memory

		currentFloor -> polygon[i].numVertices = FGetC (bigDataFile);
   1700c:	|                 ,--|-------> move.l 1cf9e <bigDataFile>,26(sp)
   17014:	|                 |  |         move.l 1cfbe <DOSBase>,d0
   1701a:	|                 |  |         movea.l d0,a6
   1701c:	|                 |  |         move.l 26(sp),d1
   17020:	|                 |  |         jsr -306(a6)
   17024:	|                 |  |         move.l d0,22(sp)
   17028:	|                 |  |         move.l 22(sp),d1
   1702c:	|                 |  |         movea.l 1d0ce <currentFloor>,a0
   17032:	|                 |  |         movea.l 12(a0),a0
   17036:	|                 |  |         move.l 136(sp),d0
   1703a:	|                 |  |         lsl.l #3,d0
   1703c:	|                 |  |         adda.l d0,a0
   1703e:	|                 |  |         move.l d1,(a0)
		currentFloor -> polygon[i].vertexID = AllocVec(sizeof (int) * currentFloor -> polygon[i].numVertices, MEMF_ANY);
   17040:	|                 |  |         movea.l 1d0ce <currentFloor>,a0
   17046:	|                 |  |         move.l 12(a0),d1
   1704a:	|                 |  |         move.l 136(sp),d0
   1704e:	|                 |  |         lsl.l #3,d0
   17050:	|                 |  |         movea.l d1,a0
   17052:	|                 |  |         adda.l d0,a0
   17054:	|                 |  |         move.l (a0),d0
   17056:	|                 |  |         add.l d0,d0
   17058:	|                 |  |         add.l d0,d0
   1705a:	|                 |  |         move.l d0,18(sp)
   1705e:	|                 |  |         clr.l 14(sp)
   17062:	|                 |  |         move.l 1cfb6 <SysBase>,d0
   17068:	|                 |  |         movea.l d0,a6
   1706a:	|                 |  |         move.l 18(sp),d0
   1706e:	|                 |  |         move.l 14(sp),d1
   17072:	|                 |  |         jsr -684(a6)
   17076:	|                 |  |         move.l d0,10(sp)
   1707a:	|                 |  |         move.l 10(sp),d1
   1707e:	|                 |  |         movea.l 1d0ce <currentFloor>,a0
   17084:	|                 |  |         movea.l 12(a0),a0
   17088:	|                 |  |         move.l 136(sp),d0
   1708c:	|                 |  |         lsl.l #3,d0
   1708e:	|                 |  |         adda.l d0,a0
   17090:	|                 |  |         move.l d1,4(a0)
		if (!(currentFloor -> polygon[i].vertexID)) {
   17094:	|                 |  |         movea.l 1d0ce <currentFloor>,a0
   1709a:	|                 |  |         move.l 12(a0),d1
   1709e:	|                 |  |         move.l 136(sp),d0
   170a2:	|                 |  |         lsl.l #3,d0
   170a4:	|                 |  |         movea.l d1,a0
   170a6:	|                 |  |         adda.l d0,a0
   170a8:	|                 |  |         move.l 4(a0),d0
   170ac:	|                 |  |     ,-- bne.s 170c2 <setFloor+0x170>
			KPrintF("setFloor: Cannot allocate memory");
   170ae:	|                 |  |     |   pea 1a71a <PutChar+0x24d0>
   170b4:	|                 |  |     |   jsr 177a8 <KPrintF>
   170ba:	|                 |  |     |   addq.l #4,sp
			return FALSE;
   170bc:	|                 |  |     |   clr.w d0
   170be:	+-----------------|--|-----|-- bra.w 176c2 <setFloor+0x770>
		}

		// Read in each vertex ID

		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
   170c2:	|                 |  |     '-> clr.l 132(sp)
   170c6:	|                 |  |     ,-- bra.s 17100 <setFloor+0x1ae>
			currentFloor -> polygon[i].vertexID[j] = get2bytes (bigDataFile);
   170c8:	|                 |  |  ,--|-> move.l 1cf9e <bigDataFile>,d1
   170ce:	|                 |  |  |  |   movea.l 1d0ce <currentFloor>,a0
   170d4:	|                 |  |  |  |   movea.l 12(a0),a0
   170d8:	|                 |  |  |  |   move.l 136(sp),d0
   170dc:	|                 |  |  |  |   lsl.l #3,d0
   170de:	|                 |  |  |  |   adda.l d0,a0
   170e0:	|                 |  |  |  |   movea.l 4(a0),a0
   170e4:	|                 |  |  |  |   move.l 132(sp),d0
   170e8:	|                 |  |  |  |   add.l d0,d0
   170ea:	|                 |  |  |  |   add.l d0,d0
   170ec:	|                 |  |  |  |   lea (0,a0,d0.l),a2
   170f0:	|                 |  |  |  |   move.l d1,-(sp)
   170f2:	|                 |  |  |  |   jsr 6bc <get2bytes>
   170f8:	|                 |  |  |  |   addq.l #4,sp
   170fa:	|                 |  |  |  |   move.l d0,(a2)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
   170fc:	|                 |  |  |  |   addq.l #1,132(sp)
   17100:	|                 |  |  |  '-> movea.l 1d0ce <currentFloor>,a0
   17106:	|                 |  |  |      move.l 12(a0),d1
   1710a:	|                 |  |  |      move.l 136(sp),d0
   1710e:	|                 |  |  |      lsl.l #3,d0
   17110:	|                 |  |  |      movea.l d1,a0
   17112:	|                 |  |  |      adda.l d0,a0
   17114:	|                 |  |  |      move.l (a0),d0
   17116:	|                 |  |  |      cmp.l 132(sp),d0
   1711a:	|                 |  |  '----- bgt.s 170c8 <setFloor+0x176>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   1711c:	|                 |  |         addq.l #1,136(sp)
   17120:	|                 |  '-------> movea.l 1d0ce <currentFloor>,a0
   17126:	|                 |            move.l 8(a0),d0
   1712a:	|                 |            cmp.l 136(sp),d0
   1712e:	|                 '----------- bgt.w 1700c <setFloor+0xba>
		}
	}

	// Find out how many vertices there are and reserve memory

	i = get2bytes (bigDataFile);
   17132:	|                              move.l 1cf9e <bigDataFile>,d0
   17138:	|                              move.l d0,-(sp)
   1713a:	|                              jsr 6bc <get2bytes>
   17140:	|                              addq.l #4,sp
   17142:	|                              move.l d0,136(sp)
	currentFloor -> vertex = AllocVec( sizeof(struct POINT)*i,MEMF_ANY);
   17146:	|                              move.l 136(sp),d0
   1714a:	|                              lsl.l #3,d0
   1714c:	|                              move.l d0,98(sp)
   17150:	|                              clr.l 94(sp)
   17154:	|                              move.l 1cfb6 <SysBase>,d0
   1715a:	|                              movea.l d0,a6
   1715c:	|                              move.l 98(sp),d0
   17160:	|                              move.l 94(sp),d1
   17164:	|                              jsr -684(a6)
   17168:	|                              move.l d0,90(sp)
   1716c:	|                              move.l 90(sp),d0
   17170:	|                              movea.l 1d0ce <currentFloor>,a0
   17176:	|                              move.l d0,4(a0)

	if (!(currentFloor -> vertex)) {
   1717a:	|                              movea.l 1d0ce <currentFloor>,a0
   17180:	|                              move.l 4(a0),d0
   17184:	|                          ,-- bne.s 1719a <setFloor+0x248>
		KPrintF("setFloor: Cannot allocate memory");
   17186:	|                          |   pea 1a71a <PutChar+0x24d0>
   1718c:	|                          |   jsr 177a8 <KPrintF>
   17192:	|                          |   addq.l #4,sp
		return FALSE;
   17194:	|                          |   clr.w d0
   17196:	+--------------------------|-- bra.w 176c2 <setFloor+0x770>
	}

	for (j = 0; j < i; j ++) {
   1719a:	|                          '-> clr.l 132(sp)
   1719e:	|                          ,-- bra.s 171f2 <setFloor+0x2a0>
		currentFloor -> vertex[j].x = get2bytes (bigDataFile);
   171a0:	|                       ,--|-> move.l 1cf9e <bigDataFile>,d1
   171a6:	|                       |  |   movea.l 1d0ce <currentFloor>,a0
   171ac:	|                       |  |   movea.l 4(a0),a0
   171b0:	|                       |  |   move.l 132(sp),d0
   171b4:	|                       |  |   lsl.l #3,d0
   171b6:	|                       |  |   lea (0,a0,d0.l),a2
   171ba:	|                       |  |   move.l d1,-(sp)
   171bc:	|                       |  |   jsr 6bc <get2bytes>
   171c2:	|                       |  |   addq.l #4,sp
   171c4:	|                       |  |   move.l d0,(a2)
		currentFloor -> vertex[j].y = get2bytes (bigDataFile);
   171c6:	|                       |  |   move.l 1cf9e <bigDataFile>,d1
   171cc:	|                       |  |   movea.l 1d0ce <currentFloor>,a0
   171d2:	|                       |  |   movea.l 4(a0),a0
   171d6:	|                       |  |   move.l 132(sp),d0
   171da:	|                       |  |   lsl.l #3,d0
   171dc:	|                       |  |   lea (0,a0,d0.l),a2
   171e0:	|                       |  |   move.l d1,-(sp)
   171e2:	|                       |  |   jsr 6bc <get2bytes>
   171e8:	|                       |  |   addq.l #4,sp
   171ea:	|                       |  |   move.l d0,4(a2)
	for (j = 0; j < i; j ++) {
   171ee:	|                       |  |   addq.l #1,132(sp)
   171f2:	|                       |  '-> move.l 132(sp),d0
   171f6:	|                       |      cmp.l 136(sp),d0
   171fa:	|                       '----- blt.s 171a0 <setFloor+0x24e>
	}

	finishAccess ();
   171fc:	|                              jsr 7ad4 <finishAccess>

	// Now build the movement martix

	currentFloor -> matrix = AllocVec( sizeof(int) * currentFloor -> numPolygons, MEMF_ANY);
   17202:	|                              movea.l 1d0ce <currentFloor>,a0
   17208:	|                              move.l 8(a0),d0
   1720c:	|                              add.l d0,d0
   1720e:	|                              add.l d0,d0
   17210:	|                              move.l d0,86(sp)
   17214:	|                              clr.l 82(sp)
   17218:	|                              move.l 1cfb6 <SysBase>,d0
   1721e:	|                              movea.l d0,a6
   17220:	|                              move.l 86(sp),d0
   17224:	|                              move.l 82(sp),d1
   17228:	|                              jsr -684(a6)
   1722c:	|                              move.l d0,78(sp)
   17230:	|                              move.l 78(sp),d0
   17234:	|                              movea.l 1d0ce <currentFloor>,a0
   1723a:	|                              move.l d0,16(a0)
	int * * distanceMatrix = AllocVec( sizeof(int) * currentFloor -> numPolygons, MEMF_ANY);
   1723e:	|                              movea.l 1d0ce <currentFloor>,a0
   17244:	|                              move.l 8(a0),d0
   17248:	|                              add.l d0,d0
   1724a:	|                              add.l d0,d0
   1724c:	|                              move.l d0,74(sp)
   17250:	|                              clr.l 70(sp)
   17254:	|                              move.l 1cfb6 <SysBase>,d0
   1725a:	|                              movea.l d0,a6
   1725c:	|                              move.l 74(sp),d0
   17260:	|                              move.l 70(sp),d1
   17264:	|                              jsr -684(a6)
   17268:	|                              move.l d0,66(sp)
   1726c:	|                              move.l 66(sp),d0
   17270:	|                              move.l d0,62(sp)


	if (!(currentFloor -> matrix)) {
   17274:	|                              movea.l 1d0ce <currentFloor>,a0
   1727a:	|                              move.l 16(a0),d0
   1727e:	|                          ,-- bne.s 17294 <setFloor+0x342>
		KPrintF("setFloor: Cannot allocate memory");
   17280:	|                          |   pea 1a71a <PutChar+0x24d0>
   17286:	|                          |   jsr 177a8 <KPrintF>
   1728c:	|                          |   addq.l #4,sp
		return FALSE;
   1728e:	|                          |   clr.w d0
   17290:	+--------------------------|-- bra.w 176c2 <setFloor+0x770>
	}

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   17294:	|                          '-> clr.l 136(sp)
   17298:	|                    ,-------- bra.w 173bc <setFloor+0x46a>
		currentFloor -> matrix[i] = AllocVec( sizeof(int) * currentFloor -> numPolygons,MEMF_ANY);
   1729c:	|                 ,--|-------> movea.l 1d0ce <currentFloor>,a0
   172a2:	|                 |  |         move.l 8(a0),d0
   172a6:	|                 |  |         add.l d0,d0
   172a8:	|                 |  |         add.l d0,d0
   172aa:	|                 |  |         move.l d0,50(sp)
   172ae:	|                 |  |         clr.l 46(sp)
   172b2:	|                 |  |         move.l 1cfb6 <SysBase>,d0
   172b8:	|                 |  |         movea.l d0,a6
   172ba:	|                 |  |         move.l 50(sp),d0
   172be:	|                 |  |         move.l 46(sp),d1
   172c2:	|                 |  |         jsr -684(a6)
   172c6:	|                 |  |         move.l d0,42(sp)
   172ca:	|                 |  |         move.l 42(sp),d0
   172ce:	|                 |  |         movea.l 1d0ce <currentFloor>,a0
   172d4:	|                 |  |         movea.l 16(a0),a0
   172d8:	|                 |  |         move.l 136(sp),d1
   172dc:	|                 |  |         add.l d1,d1
   172de:	|                 |  |         add.l d1,d1
   172e0:	|                 |  |         adda.l d1,a0
   172e2:	|                 |  |         move.l d0,(a0)
		distanceMatrix        [i] = AllocVec( sizeof(int) * currentFloor -> numPolygons,MEMF_ANY);
   172e4:	|                 |  |         movea.l 1d0ce <currentFloor>,a0
   172ea:	|                 |  |         move.l 8(a0),d0
   172ee:	|                 |  |         add.l d0,d0
   172f0:	|                 |  |         add.l d0,d0
   172f2:	|                 |  |         move.l d0,38(sp)
   172f6:	|                 |  |         clr.l 34(sp)
   172fa:	|                 |  |         move.l 1cfb6 <SysBase>,d0
   17300:	|                 |  |         movea.l d0,a6
   17302:	|                 |  |         move.l 38(sp),d0
   17306:	|                 |  |         move.l 34(sp),d1
   1730a:	|                 |  |         jsr -684(a6)
   1730e:	|                 |  |         move.l d0,30(sp)
   17312:	|                 |  |         move.l 30(sp),d1
   17316:	|                 |  |         move.l 136(sp),d0
   1731a:	|                 |  |         add.l d0,d0
   1731c:	|                 |  |         add.l d0,d0
   1731e:	|                 |  |         movea.l 62(sp),a0
   17322:	|                 |  |         adda.l d0,a0
   17324:	|                 |  |         move.l d1,(a0)
		if (!(currentFloor -> matrix[i])) { 
   17326:	|                 |  |         movea.l 1d0ce <currentFloor>,a0
   1732c:	|                 |  |         move.l 16(a0),d1
   17330:	|                 |  |         move.l 136(sp),d0
   17334:	|                 |  |         add.l d0,d0
   17336:	|                 |  |         add.l d0,d0
   17338:	|                 |  |         movea.l d1,a0
   1733a:	|                 |  |         adda.l d0,a0
   1733c:	|                 |  |         move.l (a0),d0
   1733e:	|                 |  |     ,-- bne.s 17354 <setFloor+0x402>
			KPrintF("setFloor: Cannot allocate memory");
   17340:	|                 |  |     |   pea 1a71a <PutChar+0x24d0>
   17346:	|                 |  |     |   jsr 177a8 <KPrintF>
   1734c:	|                 |  |     |   addq.l #4,sp
			return FALSE;
   1734e:	|                 |  |     |   clr.w d0
   17350:	+-----------------|--|-----|-- bra.w 176c2 <setFloor+0x770>
		}
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   17354:	|                 |  |     '-> clr.l 132(sp)
   17358:	|                 |  |     ,-- bra.s 173a8 <setFloor+0x456>
			currentFloor -> matrix[i][j] = -1;
   1735a:	|                 |  |  ,--|-> movea.l 1d0ce <currentFloor>,a0
   17360:	|                 |  |  |  |   move.l 16(a0),d1
   17364:	|                 |  |  |  |   move.l 136(sp),d0
   17368:	|                 |  |  |  |   add.l d0,d0
   1736a:	|                 |  |  |  |   add.l d0,d0
   1736c:	|                 |  |  |  |   movea.l d1,a0
   1736e:	|                 |  |  |  |   adda.l d0,a0
   17370:	|                 |  |  |  |   move.l (a0),d1
   17372:	|                 |  |  |  |   move.l 132(sp),d0
   17376:	|                 |  |  |  |   add.l d0,d0
   17378:	|                 |  |  |  |   add.l d0,d0
   1737a:	|                 |  |  |  |   movea.l d1,a0
   1737c:	|                 |  |  |  |   adda.l d0,a0
   1737e:	|                 |  |  |  |   moveq #-1,d1
   17380:	|                 |  |  |  |   move.l d1,(a0)
			distanceMatrix        [i][j] = 10000;
   17382:	|                 |  |  |  |   move.l 136(sp),d0
   17386:	|                 |  |  |  |   add.l d0,d0
   17388:	|                 |  |  |  |   add.l d0,d0
   1738a:	|                 |  |  |  |   movea.l 62(sp),a0
   1738e:	|                 |  |  |  |   adda.l d0,a0
   17390:	|                 |  |  |  |   move.l (a0),d1
   17392:	|                 |  |  |  |   move.l 132(sp),d0
   17396:	|                 |  |  |  |   add.l d0,d0
   17398:	|                 |  |  |  |   add.l d0,d0
   1739a:	|                 |  |  |  |   movea.l d1,a0
   1739c:	|                 |  |  |  |   adda.l d0,a0
   1739e:	|                 |  |  |  |   move.l #10000,(a0)
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   173a4:	|                 |  |  |  |   addq.l #1,132(sp)
   173a8:	|                 |  |  |  '-> movea.l 1d0ce <currentFloor>,a0
   173ae:	|                 |  |  |      move.l 8(a0),d0
   173b2:	|                 |  |  |      cmp.l 132(sp),d0
   173b6:	|                 |  |  '----- bgt.s 1735a <setFloor+0x408>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   173b8:	|                 |  |         addq.l #1,136(sp)
   173bc:	|                 |  '-------> movea.l 1d0ce <currentFloor>,a0
   173c2:	|                 |            move.l 8(a0),d0
   173c6:	|                 |            cmp.l 136(sp),d0
   173ca:	|                 '----------- bgt.w 1729c <setFloor+0x34a>
		}
	}

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   173ce:	|                              clr.l 136(sp)
   173d2:	|              ,-------------- bra.w 174d8 <setFloor+0x586>
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   173d6:	|           ,--|-------------> clr.l 132(sp)
   173da:	|           |  |     ,-------- bra.w 174c2 <setFloor+0x570>
			if (i != j) {
   173de:	|           |  |  ,--|-------> move.l 136(sp),d0
   173e2:	|           |  |  |  |         cmp.l 132(sp),d0
   173e6:	|           |  |  |  |     ,-- beq.w 17478 <setFloor+0x526>
				if (polysShareSide (currentFloor -> polygon[i], currentFloor -> polygon[j])) {
   173ea:	|           |  |  |  |     |   movea.l 1d0ce <currentFloor>,a0
   173f0:	|           |  |  |  |     |   move.l 12(a0),d1
   173f4:	|           |  |  |  |     |   move.l 132(sp),d0
   173f8:	|           |  |  |  |     |   lsl.l #3,d0
   173fa:	|           |  |  |  |     |   movea.l d1,a1
   173fc:	|           |  |  |  |     |   adda.l d0,a1
   173fe:	|           |  |  |  |     |   movea.l 1d0ce <currentFloor>,a0
   17404:	|           |  |  |  |     |   move.l 12(a0),d1
   17408:	|           |  |  |  |     |   move.l 136(sp),d0
   1740c:	|           |  |  |  |     |   lsl.l #3,d0
   1740e:	|           |  |  |  |     |   movea.l d1,a0
   17410:	|           |  |  |  |     |   adda.l d0,a0
   17412:	|           |  |  |  |     |   move.l 4(a1),-(sp)
   17416:	|           |  |  |  |     |   move.l (a1),-(sp)
   17418:	|           |  |  |  |     |   move.l 4(a0),-(sp)
   1741c:	|           |  |  |  |     |   move.l (a0),-(sp)
   1741e:	|           |  |  |  |     |   jsr 16caa <polysShareSide>
   17424:	|           |  |  |  |     |   lea 16(sp),sp
   17428:	|           |  |  |  |     |   tst.w d0
   1742a:	|           |  |  |  |  ,--|-- beq.w 174be <setFloor+0x56c>
					currentFloor -> matrix[i][j] = j;
   1742e:	|           |  |  |  |  |  |   movea.l 1d0ce <currentFloor>,a0
   17434:	|           |  |  |  |  |  |   move.l 16(a0),d1
   17438:	|           |  |  |  |  |  |   move.l 136(sp),d0
   1743c:	|           |  |  |  |  |  |   add.l d0,d0
   1743e:	|           |  |  |  |  |  |   add.l d0,d0
   17440:	|           |  |  |  |  |  |   movea.l d1,a0
   17442:	|           |  |  |  |  |  |   adda.l d0,a0
   17444:	|           |  |  |  |  |  |   move.l (a0),d1
   17446:	|           |  |  |  |  |  |   move.l 132(sp),d0
   1744a:	|           |  |  |  |  |  |   add.l d0,d0
   1744c:	|           |  |  |  |  |  |   add.l d0,d0
   1744e:	|           |  |  |  |  |  |   movea.l d1,a0
   17450:	|           |  |  |  |  |  |   adda.l d0,a0
   17452:	|           |  |  |  |  |  |   move.l 132(sp),(a0)
					distanceMatrix        [i][j] = 1;
   17456:	|           |  |  |  |  |  |   move.l 136(sp),d0
   1745a:	|           |  |  |  |  |  |   add.l d0,d0
   1745c:	|           |  |  |  |  |  |   add.l d0,d0
   1745e:	|           |  |  |  |  |  |   movea.l 62(sp),a0
   17462:	|           |  |  |  |  |  |   adda.l d0,a0
   17464:	|           |  |  |  |  |  |   move.l (a0),d1
   17466:	|           |  |  |  |  |  |   move.l 132(sp),d0
   1746a:	|           |  |  |  |  |  |   add.l d0,d0
   1746c:	|           |  |  |  |  |  |   add.l d0,d0
   1746e:	|           |  |  |  |  |  |   movea.l d1,a0
   17470:	|           |  |  |  |  |  |   adda.l d0,a0
   17472:	|           |  |  |  |  |  |   moveq #1,d1
   17474:	|           |  |  |  |  |  |   move.l d1,(a0)
   17476:	|           |  |  |  |  +--|-- bra.s 174be <setFloor+0x56c>
				}
			} else {
				currentFloor -> matrix[i][j] = -2;
   17478:	|           |  |  |  |  |  '-> movea.l 1d0ce <currentFloor>,a0
   1747e:	|           |  |  |  |  |      move.l 16(a0),d1
   17482:	|           |  |  |  |  |      move.l 136(sp),d0
   17486:	|           |  |  |  |  |      add.l d0,d0
   17488:	|           |  |  |  |  |      add.l d0,d0
   1748a:	|           |  |  |  |  |      movea.l d1,a0
   1748c:	|           |  |  |  |  |      adda.l d0,a0
   1748e:	|           |  |  |  |  |      move.l (a0),d1
   17490:	|           |  |  |  |  |      move.l 132(sp),d0
   17494:	|           |  |  |  |  |      add.l d0,d0
   17496:	|           |  |  |  |  |      add.l d0,d0
   17498:	|           |  |  |  |  |      movea.l d1,a0
   1749a:	|           |  |  |  |  |      adda.l d0,a0
   1749c:	|           |  |  |  |  |      moveq #-2,d0
   1749e:	|           |  |  |  |  |      move.l d0,(a0)
				distanceMatrix        [i][j] = 0;
   174a0:	|           |  |  |  |  |      move.l 136(sp),d0
   174a4:	|           |  |  |  |  |      add.l d0,d0
   174a6:	|           |  |  |  |  |      add.l d0,d0
   174a8:	|           |  |  |  |  |      movea.l 62(sp),a0
   174ac:	|           |  |  |  |  |      adda.l d0,a0
   174ae:	|           |  |  |  |  |      move.l (a0),d1
   174b0:	|           |  |  |  |  |      move.l 132(sp),d0
   174b4:	|           |  |  |  |  |      add.l d0,d0
   174b6:	|           |  |  |  |  |      add.l d0,d0
   174b8:	|           |  |  |  |  |      movea.l d1,a0
   174ba:	|           |  |  |  |  |      adda.l d0,a0
   174bc:	|           |  |  |  |  |      clr.l (a0)
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   174be:	|           |  |  |  |  '----> addq.l #1,132(sp)
   174c2:	|           |  |  |  '-------> movea.l 1d0ce <currentFloor>,a0
   174c8:	|           |  |  |            move.l 8(a0),d0
   174cc:	|           |  |  |            cmp.l 132(sp),d0
   174d0:	|           |  |  '----------- bgt.w 173de <setFloor+0x48c>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   174d4:	|           |  |               addq.l #1,136(sp)
   174d8:	|           |  '-------------> movea.l 1d0ce <currentFloor>,a0
   174de:	|           |                  move.l 8(a0),d0
   174e2:	|           |                  cmp.l 136(sp),d0
   174e6:	|           '----------------- bgt.w 173d6 <setFloor+0x484>
			}
		}
	}

	BOOL madeChange;
	int lookForDistance = 0;
   174ea:	|                              clr.l 126(sp)

	do {
		lookForDistance ++;
   174ee:	|  ,-------------------------> addq.l #1,126(sp)
//		debugMatrix ();
		madeChange = FALSE;
   174f2:	|  |                           clr.w 130(sp)
		for (i = 0; i < currentFloor -> numPolygons; i ++) {
   174f6:	|  |                           clr.l 136(sp)
   174fa:	|  |     ,-------------------- bra.w 17650 <setFloor+0x6fe>
			for (j = 0; j < currentFloor -> numPolygons; j ++) {
   174fe:	|  |  ,--|-------------------> clr.l 132(sp)
   17502:	|  |  |  |     ,-------------- bra.w 1763a <setFloor+0x6e8>
				if (currentFloor -> matrix[i][j] == -1) {
   17506:	|  |  |  |  ,--|-------------> movea.l 1d0ce <currentFloor>,a0
   1750c:	|  |  |  |  |  |               move.l 16(a0),d1
   17510:	|  |  |  |  |  |               move.l 136(sp),d0
   17514:	|  |  |  |  |  |               add.l d0,d0
   17516:	|  |  |  |  |  |               add.l d0,d0
   17518:	|  |  |  |  |  |               movea.l d1,a0
   1751a:	|  |  |  |  |  |               adda.l d0,a0
   1751c:	|  |  |  |  |  |               move.l (a0),d1
   1751e:	|  |  |  |  |  |               move.l 132(sp),d0
   17522:	|  |  |  |  |  |               add.l d0,d0
   17524:	|  |  |  |  |  |               add.l d0,d0
   17526:	|  |  |  |  |  |               movea.l d1,a0
   17528:	|  |  |  |  |  |               adda.l d0,a0
   1752a:	|  |  |  |  |  |               move.l (a0),d0
   1752c:	|  |  |  |  |  |               moveq #-1,d1
   1752e:	|  |  |  |  |  |               cmp.l d0,d1
   17530:	|  |  |  |  |  |  ,----------- bne.w 17636 <setFloor+0x6e4>

					// OK, so we don't know how to get from i to j...
					for (int d = 0; d < currentFloor -> numPolygons; d ++) {
   17534:	|  |  |  |  |  |  |            clr.l 122(sp)
   17538:	|  |  |  |  |  |  |     ,----- bra.w 17624 <setFloor+0x6d2>
						if (d != i && d != j) {
   1753c:	|  |  |  |  |  |  |  ,--|----> move.l 122(sp),d0
   17540:	|  |  |  |  |  |  |  |  |      cmp.l 136(sp),d0
   17544:	|  |  |  |  |  |  |  |  |  ,-- beq.w 17620 <setFloor+0x6ce>
   17548:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d1
   1754c:	|  |  |  |  |  |  |  |  |  |   cmp.l 132(sp),d1
   17550:	|  |  |  |  |  |  |  |  |  +-- beq.w 17620 <setFloor+0x6ce>
							if (currentFloor -> matrix[i][d] == d &&
   17554:	|  |  |  |  |  |  |  |  |  |   movea.l 1d0ce <currentFloor>,a0
   1755a:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   1755e:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   17562:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17564:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17566:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   17568:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   1756a:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   1756c:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   17570:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17572:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17574:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   17576:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   17578:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
   1757a:	|  |  |  |  |  |  |  |  |  |   cmp.l 122(sp),d0
   1757e:	|  |  |  |  |  |  |  |  |  +-- bne.w 17620 <setFloor+0x6ce>
								currentFloor -> matrix[d][j] >= 0 &&
   17582:	|  |  |  |  |  |  |  |  |  |   movea.l 1d0ce <currentFloor>,a0
   17588:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   1758c:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   17590:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17592:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17594:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   17596:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   17598:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   1759a:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   1759e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   175a0:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   175a2:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   175a4:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   175a6:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
							if (currentFloor -> matrix[i][d] == d &&
   175a8:	|  |  |  |  |  |  |  |  |  +-- bmi.s 17620 <setFloor+0x6ce>
								distanceMatrix        [d][j] <= lookForDistance) {
   175aa:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   175ae:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   175b0:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   175b2:	|  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a0
   175b6:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   175b8:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   175ba:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   175be:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   175c0:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   175c2:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   175c4:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   175c6:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
								currentFloor -> matrix[d][j] >= 0 &&
   175c8:	|  |  |  |  |  |  |  |  |  |   cmp.l 126(sp),d0
   175cc:	|  |  |  |  |  |  |  |  |  +-- bgt.s 17620 <setFloor+0x6ce>

								 currentFloor -> matrix[i][j] = d;
   175ce:	|  |  |  |  |  |  |  |  |  |   movea.l 1d0ce <currentFloor>,a0
   175d4:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   175d8:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   175dc:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   175de:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   175e0:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   175e2:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   175e4:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   175e6:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   175ea:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   175ec:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   175ee:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   175f0:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   175f2:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),(a0)
								 distanceMatrix		  [i][j] = lookForDistance + 1;
   175f6:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   175fa:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   175fc:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   175fe:	|  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a0
   17602:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   17604:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   17606:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   1760a:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1760c:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1760e:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   17610:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   17612:	|  |  |  |  |  |  |  |  |  |   move.l 126(sp),d0
   17616:	|  |  |  |  |  |  |  |  |  |   addq.l #1,d0
   17618:	|  |  |  |  |  |  |  |  |  |   move.l d0,(a0)
								 madeChange = TRUE;
   1761a:	|  |  |  |  |  |  |  |  |  |   move.w #1,130(sp)
					for (int d = 0; d < currentFloor -> numPolygons; d ++) {
   17620:	|  |  |  |  |  |  |  |  |  '-> addq.l #1,122(sp)
   17624:	|  |  |  |  |  |  |  |  '----> movea.l 1d0ce <currentFloor>,a0
   1762a:	|  |  |  |  |  |  |  |         move.l 8(a0),d0
   1762e:	|  |  |  |  |  |  |  |         cmp.l 122(sp),d0
   17632:	|  |  |  |  |  |  |  '-------- bgt.w 1753c <setFloor+0x5ea>
			for (j = 0; j < currentFloor -> numPolygons; j ++) {
   17636:	|  |  |  |  |  |  '----------> addq.l #1,132(sp)
   1763a:	|  |  |  |  |  '-------------> movea.l 1d0ce <currentFloor>,a0
   17640:	|  |  |  |  |                  move.l 8(a0),d0
   17644:	|  |  |  |  |                  cmp.l 132(sp),d0
   17648:	|  |  |  |  '----------------- bgt.w 17506 <setFloor+0x5b4>
		for (i = 0; i < currentFloor -> numPolygons; i ++) {
   1764c:	|  |  |  |                     addq.l #1,136(sp)
   17650:	|  |  |  '-------------------> movea.l 1d0ce <currentFloor>,a0
   17656:	|  |  |                        move.l 8(a0),d0
   1765a:	|  |  |                        cmp.l 136(sp),d0
   1765e:	|  |  '----------------------- bgt.w 174fe <setFloor+0x5ac>
						}
					}
				}
			}
		}
	} while (madeChange);
   17662:	|  |                           tst.w 130(sp)
   17666:	|  '-------------------------- bne.w 174ee <setFloor+0x59c>

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   1766a:	|                              clr.l 136(sp)
   1766e:	|                          ,-- bra.s 17696 <setFloor+0x744>
		FreeVec(distanceMatrix [i]);
   17670:	|                       ,--|-> move.l 136(sp),d0
   17674:	|                       |  |   add.l d0,d0
   17676:	|                       |  |   add.l d0,d0
   17678:	|                       |  |   movea.l 62(sp),a0
   1767c:	|                       |  |   adda.l d0,a0
   1767e:	|                       |  |   move.l (a0),54(sp)
   17682:	|                       |  |   move.l 1cfb6 <SysBase>,d0
   17688:	|                       |  |   movea.l d0,a6
   1768a:	|                       |  |   movea.l 54(sp),a1
   1768e:	|                       |  |   jsr -690(a6)
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   17692:	|                       |  |   addq.l #1,136(sp)
   17696:	|                       |  '-> movea.l 1d0ce <currentFloor>,a0
   1769c:	|                       |      move.l 8(a0),d0
   176a0:	|                       |      cmp.l 136(sp),d0
   176a4:	|                       '----- bgt.s 17670 <setFloor+0x71e>
	}

	FreeVec(distanceMatrix);
   176a6:	|                              move.l 62(sp),58(sp)
   176ac:	|                              move.l 1cfb6 <SysBase>,d0
   176b2:	|                              movea.l d0,a6
   176b4:	|                              movea.l 58(sp),a1
   176b8:	|                              jsr -690(a6)
	distanceMatrix = NULL;	
   176bc:	|                              clr.l 62(sp)

	return TRUE;
   176c0:	|                              moveq #1,d0
}
   176c2:	'----------------------------> movea.l (sp)+,a2
   176c4:	                               movea.l (sp)+,a6
   176c6:	                               lea 132(sp),sp
   176ca:	                               rts

000176cc <setFloorNull>:

void setFloorNull () {
	killFloor ();
   176cc:	jsr 16bba <killFloor>
	noFloor ();
   176d2:	jsr 16ac2 <noFloor>
   176d8:	nop
   176da:	rts

000176dc <WaitVbl>:
void WaitVbl() {
   176dc:	       subq.l #8,sp
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
   176de:	   ,-> movea.l #14675972,a0
   176e4:	   |   move.l (a0),d0
   176e6:	   |   move.l d0,(sp)
		vpos&=0x1ff00;
   176e8:	   |   move.l (sp),d0
   176ea:	   |   andi.l #130816,d0
   176f0:	   |   move.l d0,(sp)
		if (vpos!=(300<<8))
   176f2:	   |   move.l (sp),d0
   176f4:	   |   cmpi.l #76800,d0
   176fa:	   '-- beq.s 176de <WaitVbl+0x2>
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
   176fc:	,----> movea.l #14675972,a0
   17702:	|      move.l (a0),d0
   17704:	|      move.l d0,4(sp)
		vpos&=0x1ff00;
   17708:	|      move.l 4(sp),d0
   1770c:	|      andi.l #130816,d0
   17712:	|      move.l d0,4(sp)
		if (vpos==(300<<8))
   17716:	|      move.l 4(sp),d0
   1771a:	|      cmpi.l #76800,d0
   17720:	|  ,-- beq.s 17724 <WaitVbl+0x48>
	while (1) {
   17722:	'--|-- bra.s 176fc <WaitVbl+0x20>
			break;
   17724:	   '-> nop
}
   17726:	       nop
   17728:	       addq.l #8,sp
   1772a:	       rts

0001772c <memset>:
void* memset(void *dest, int val, unsigned long len) {
   1772c:	       subq.l #4,sp
	unsigned char *ptr = (unsigned char *)dest;
   1772e:	       move.l 8(sp),(sp)
	while(len-- > 0)
   17732:	   ,-- bra.s 17744 <memset+0x18>
		*ptr++ = val;
   17734:	,--|-> move.l (sp),d0
   17736:	|  |   move.l d0,d1
   17738:	|  |   addq.l #1,d1
   1773a:	|  |   move.l d1,(sp)
   1773c:	|  |   move.l 12(sp),d1
   17740:	|  |   movea.l d0,a0
   17742:	|  |   move.b d1,(a0)
	while(len-- > 0)
   17744:	|  '-> move.l 16(sp),d0
   17748:	|      move.l d0,d1
   1774a:	|      subq.l #1,d1
   1774c:	|      move.l d1,16(sp)
   17750:	|      tst.l d0
   17752:	'----- bne.s 17734 <memset+0x8>
	return dest;
   17754:	       move.l 8(sp),d0
}
   17758:	       addq.l #4,sp
   1775a:	       rts

0001775c <memcpy>:
void* memcpy(void *dest, const void *src, unsigned long len) {
   1775c:	       subq.l #8,sp
   1775e:	       move.l d2,-(sp)
	char *d = (char *)dest;
   17760:	       move.l 16(sp),8(sp)
	const char *s = (const char *)src;
   17766:	       move.l 20(sp),4(sp)
	while(len--)
   1776c:	   ,-- bra.s 1778e <memcpy+0x32>
		*d++ = *s++;
   1776e:	,--|-> move.l 4(sp),d1
   17772:	|  |   move.l d1,d0
   17774:	|  |   addq.l #1,d0
   17776:	|  |   move.l d0,4(sp)
   1777a:	|  |   move.l 8(sp),d0
   1777e:	|  |   move.l d0,d2
   17780:	|  |   addq.l #1,d2
   17782:	|  |   move.l d2,8(sp)
   17786:	|  |   movea.l d1,a0
   17788:	|  |   move.b (a0),d1
   1778a:	|  |   movea.l d0,a0
   1778c:	|  |   move.b d1,(a0)
	while(len--)
   1778e:	|  '-> move.l 24(sp),d0
   17792:	|      move.l d0,d1
   17794:	|      subq.l #1,d1
   17796:	|      move.l d1,24(sp)
   1779a:	|      tst.l d0
   1779c:	'----- bne.s 1776e <memcpy+0x12>
	return dest;
   1779e:	       move.l 16(sp),d0
}
   177a2:	       move.l (sp)+,d2
   177a4:	       addq.l #8,sp
   177a6:	       rts

000177a8 <KPrintF>:
void KPrintF(const char* fmt, ...) {
   177a8:	       lea -128(sp),sp
   177ac:	       movem.l a2-a3/a6,-(sp)
	if(*((UWORD *)UaeDbgLog) == 0x4eb9 || *((UWORD *)UaeDbgLog) == 0xa00e) {
   177b0:	       move.w f0ff60 <gcc8_c_support.c.c60c1f2b+0xec3d26>,d0
   177b6:	       cmpi.w #20153,d0
   177ba:	   ,-- beq.s 177de <KPrintF+0x36>
   177bc:	   |   cmpi.w #-24562,d0
   177c0:	   +-- beq.s 177de <KPrintF+0x36>
		RawDoFmt((CONST_STRPTR)fmt, vl, KPutCharX, 0);
   177c2:	   |   movea.l 1cfb6 <SysBase>,a6
   177c8:	   |   movea.l 144(sp),a0
   177cc:	   |   lea 148(sp),a1
   177d0:	   |   lea 1823c <KPutCharX>,a2
   177d6:	   |   suba.l a3,a3
   177d8:	   |   jsr -522(a6)
}
   177dc:	,--|-- bra.s 17808 <KPrintF+0x60>
		RawDoFmt((CONST_STRPTR)fmt, vl, PutChar, temp);
   177de:	|  '-> movea.l 1cfb6 <SysBase>,a6
   177e4:	|      movea.l 144(sp),a0
   177e8:	|      lea 148(sp),a1
   177ec:	|      lea 1824a <PutChar>,a2
   177f2:	|      lea 12(sp),a3
   177f6:	|      jsr -522(a6)
		UaeDbgLog(86, temp);
   177fa:	|      move.l a3,-(sp)
   177fc:	|      pea 56 <_start+0x56>
   17800:	|      jsr f0ff60 <gcc8_c_support.c.c60c1f2b+0xec3d26>
	if(*((UWORD *)UaeDbgLog) == 0x4eb9 || *((UWORD *)UaeDbgLog) == 0xa00e) {
   17806:	|      addq.l #8,sp
}
   17808:	'----> movem.l (sp)+,a2-a3/a6
   1780c:	       lea 128(sp),sp
   17810:	       rts

00017812 <debug_cmd>:
		UaeConf(82, -1, on ? "blitter_cycle_exact false" : "blitter_cycle_exact true", 0, &outbuf, 1);
		UaeConf(82, -1, on ? "warp true" : "warp false", 0, &outbuf, 1);
	}
}

static void debug_cmd(unsigned int arg1, unsigned int arg2, unsigned int arg3, unsigned int arg4) {
   17812:	       subq.l #4,sp
	long(*UaeLib)(unsigned int arg0, unsigned int arg1, unsigned int arg2, unsigned int arg3, unsigned int arg4);
	UaeLib = (long(*)(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int))0xf0ff60;
   17814:	       move.l #15794016,(sp)
	if(*((UWORD *)UaeLib) == 0x4eb9 || *((UWORD *)UaeLib) == 0xa00e) {
   1781a:	       movea.l (sp),a0
   1781c:	       move.w (a0),d0
   1781e:	       cmpi.w #20153,d0
   17822:	   ,-- beq.s 1782e <debug_cmd+0x1c>
   17824:	   |   movea.l (sp),a0
   17826:	   |   move.w (a0),d0
   17828:	   |   cmpi.w #-24562,d0
   1782c:	,--|-- bne.s 1784c <debug_cmd+0x3a>
		UaeLib(88, arg1, arg2, arg3, arg4);
   1782e:	|  '-> move.l 20(sp),-(sp)
   17832:	|      move.l 20(sp),-(sp)
   17836:	|      move.l 20(sp),-(sp)
   1783a:	|      move.l 20(sp),-(sp)
   1783e:	|      pea 58 <_start+0x58>
   17842:	|      movea.l 20(sp),a0
   17846:	|      jsr (a0)
   17848:	|      lea 20(sp),sp
	}
}
   1784c:	'----> nop
   1784e:	       addq.l #4,sp
   17850:	       rts

00017852 <my_strncpy>:
void debug_stop_idle() {
	debug_cmd(barto_cmd_set_idle, 0, 0, 0);
}

// gfx debugger
static void my_strncpy(char* destination, const char* source, unsigned long num) {
   17852:	       move.l d2,-(sp)
	while(*source && --num > 0)
   17854:	   ,-- bra.s 17876 <my_strncpy+0x24>
		*destination++ = *source++;
   17856:	,--|-> move.l 12(sp),d1
   1785a:	|  |   move.l d1,d0
   1785c:	|  |   addq.l #1,d0
   1785e:	|  |   move.l d0,12(sp)
   17862:	|  |   move.l 8(sp),d0
   17866:	|  |   move.l d0,d2
   17868:	|  |   addq.l #1,d2
   1786a:	|  |   move.l d2,8(sp)
   1786e:	|  |   movea.l d1,a0
   17870:	|  |   move.b (a0),d1
   17872:	|  |   movea.l d0,a0
   17874:	|  |   move.b d1,(a0)
	while(*source && --num > 0)
   17876:	|  '-> movea.l 12(sp),a0
   1787a:	|      move.b (a0),d0
   1787c:	|  ,-- beq.s 17884 <my_strncpy+0x32>
   1787e:	|  |   subq.l #1,16(sp)
   17882:	'--|-- bne.s 17856 <my_strncpy+0x4>
	*destination = '\0';
   17884:	   '-> movea.l 8(sp),a0
   17888:	       clr.b (a0)
}
   1788a:	       nop
   1788c:	       move.l (sp)+,d2
   1788e:	       rts

00017890 <debug_register_bitmap>:

void debug_register_bitmap(const void* addr, const char* name, short width, short height, short numPlanes, unsigned short flags) {
   17890:	    lea -60(sp),sp
   17894:	    movea.l 72(sp),a1
   17898:	    movea.l 76(sp),a0
   1789c:	    move.l 80(sp),d1
   178a0:	    move.l 84(sp),d0
   178a4:	    movea.w a1,a1
   178a6:	    move.w a1,8(sp)
   178aa:	    movea.w a0,a0
   178ac:	    move.w a0,6(sp)
   178b0:	    move.w d1,d1
   178b2:	    move.w d1,4(sp)
   178b6:	    move.w d0,d0
   178b8:	    move.w d0,2(sp)
	struct debug_resource resource = {
   178bc:	    lea 10(sp),a0
   178c0:	    clr.l (a0)
   178c2:	    addq.l #4,a0
   178c4:	    clr.l (a0)
   178c6:	    addq.l #4,a0
   178c8:	    clr.l (a0)
   178ca:	    addq.l #4,a0
   178cc:	    clr.l (a0)
   178ce:	    addq.l #4,a0
   178d0:	    clr.l (a0)
   178d2:	    addq.l #4,a0
   178d4:	    clr.l (a0)
   178d6:	    addq.l #4,a0
   178d8:	    clr.l (a0)
   178da:	    addq.l #4,a0
   178dc:	    clr.l (a0)
   178de:	    addq.l #4,a0
   178e0:	    clr.l (a0)
   178e2:	    addq.l #4,a0
   178e4:	    clr.l (a0)
   178e6:	    addq.l #4,a0
   178e8:	    clr.l (a0)
   178ea:	    addq.l #4,a0
   178ec:	    clr.l (a0)
   178ee:	    addq.l #4,a0
   178f0:	    clr.w (a0)
   178f2:	    addq.l #2,a0
		.address = (unsigned int)addr,
   178f4:	    move.l 64(sp),d0
	struct debug_resource resource = {
   178f8:	    move.l d0,10(sp)
		.size = width / 8 * height * numPlanes,
   178fc:	    move.w 8(sp),d0
   17900:	,-- bpl.s 17904 <debug_register_bitmap+0x74>
   17902:	|   addq.w #7,d0
   17904:	'-> asr.w #3,d0
   17906:	    movea.w d0,a0
   17908:	    movea.w 6(sp),a1
   1790c:	    move.l a1,-(sp)
   1790e:	    move.l a0,-(sp)
   17910:	    jsr 18134 <__mulsi3>
   17916:	    addq.l #8,sp
   17918:	    movea.w 4(sp),a0
   1791c:	    move.l a0,-(sp)
   1791e:	    move.l d0,-(sp)
   17920:	    jsr 18134 <__mulsi3>
   17926:	    addq.l #8,sp
	struct debug_resource resource = {
   17928:	    move.l d0,14(sp)
   1792c:	    move.w 2(sp),52(sp)
   17932:	    move.w 8(sp),54(sp)
   17938:	    move.w 6(sp),56(sp)
   1793e:	    move.w 4(sp),58(sp)
		.type = debug_resource_type_bitmap,
		.flags = flags,
		.bitmap = { width, height, numPlanes }
	};

	if (flags & debug_resource_bitmap_masked)
   17944:	    moveq #0,d0
   17946:	    move.w 2(sp),d0
   1794a:	    moveq #2,d1
   1794c:	    and.l d1,d0
   1794e:	,-- beq.s 1795a <debug_register_bitmap+0xca>
		resource.size *= 2;
   17950:	|   move.l 14(sp),d0
   17954:	|   add.l d0,d0
   17956:	|   move.l d0,14(sp)

	my_strncpy(resource.name, name, sizeof(resource.name));
   1795a:	'-> pea 20 <_start+0x20>
   1795e:	    move.l 72(sp),-(sp)
   17962:	    lea 18(sp),a0
   17966:	    move.l a0,d0
   17968:	    addq.l #8,d0
   1796a:	    move.l d0,-(sp)
   1796c:	    jsr 17852 <my_strncpy>
   17972:	    lea 12(sp),sp
	debug_cmd(barto_cmd_register_resource, (unsigned int)&resource, 0, 0);
   17976:	    lea 10(sp),a0
   1797a:	    clr.l -(sp)
   1797c:	    clr.l -(sp)
   1797e:	    move.l a0,-(sp)
   17980:	    pea 4 <_start+0x4>
   17984:	    jsr 17812 <debug_cmd>
   1798a:	    lea 16(sp),sp
}
   1798e:	    nop
   17990:	    lea 60(sp),sp
   17994:	    rts

00017996 <__addsf3>:
	};
	my_strncpy(resource.name, name, sizeof(resource.name));
	debug_cmd(barto_cmd_save, (unsigned int)&resource, 0, 0);
}

FLOAT __addsf3( FLOAT a, FLOAT b) {
   17996:	lea -12(sp),sp
   1799a:	move.l a6,-(sp)
	return IEEESPAdd( a, b);
   1799c:	move.l 20(sp),12(sp)
   179a2:	move.l 24(sp),8(sp)
   179a8:	move.l 1cfc6 <MathIeeeSingBasBase>,d0
   179ae:	movea.l d0,a6
   179b0:	move.l 12(sp),d0
   179b4:	move.l 8(sp),d1
   179b8:	jsr -66(a6)
   179bc:	move.l d0,4(sp)
   179c0:	move.l 4(sp),d0
}
   179c4:	movea.l (sp)+,a6
   179c6:	lea 12(sp),sp
   179ca:	rts

000179cc <__adddf3>:

DOUBLE __adddf3( DOUBLE a, DOUBLE b) {
   179cc:	lea -32(sp),sp
   179d0:	movem.l d2-d3/a6,-(sp)
	return IEEEDPAdd( a, b);
   179d4:	move.l 48(sp),36(sp)
   179da:	move.l 52(sp),40(sp)
   179e0:	move.l 56(sp),28(sp)
   179e6:	move.l 60(sp),32(sp)
   179ec:	move.l 1cfce <MathIeeeDoubBasBase>,d0
   179f2:	movea.l d0,a6
   179f4:	move.l 36(sp),d0
   179f8:	move.l 40(sp),d1
   179fc:	move.l 28(sp),d2
   17a00:	move.l 32(sp),d3
   17a04:	jsr -66(a6)
   17a08:	move.l d0,12(sp)
   17a0c:	move.l d1,16(sp)
   17a10:	move.l 12(sp),20(sp)
   17a16:	move.l 16(sp),24(sp)
   17a1c:	move.l 20(sp),d0
   17a20:	move.l 24(sp),d1
}
   17a24:	movem.l (sp)+,d2-d3/a6
   17a28:	lea 32(sp),sp
   17a2c:	rts

00017a2e <__divdf3>:

DOUBLE __divdf3( DOUBLE a, DOUBLE b) {
   17a2e:	lea -32(sp),sp
   17a32:	movem.l d2-d3/a6,-(sp)
	return IEEEDPDiv( a, b);
   17a36:	move.l 48(sp),36(sp)
   17a3c:	move.l 52(sp),40(sp)
   17a42:	move.l 56(sp),28(sp)
   17a48:	move.l 60(sp),32(sp)
   17a4e:	move.l 1cfce <MathIeeeDoubBasBase>,d0
   17a54:	movea.l d0,a6
   17a56:	move.l 36(sp),d0
   17a5a:	move.l 40(sp),d1
   17a5e:	move.l 28(sp),d2
   17a62:	move.l 32(sp),d3
   17a66:	jsr -84(a6)
   17a6a:	move.l d0,12(sp)
   17a6e:	move.l d1,16(sp)
   17a72:	move.l 12(sp),20(sp)
   17a78:	move.l 16(sp),24(sp)
   17a7e:	move.l 20(sp),d0
   17a82:	move.l 24(sp),d1
}
   17a86:	movem.l (sp)+,d2-d3/a6
   17a8a:	lea 32(sp),sp
   17a8e:	rts

00017a90 <__divsf3>:

FLOAT __divsf3( FLOAT a, FLOAT b) {
   17a90:	lea -12(sp),sp
   17a94:	move.l a6,-(sp)
	return IEEESPDiv( a, b);
   17a96:	move.l 20(sp),12(sp)
   17a9c:	move.l 24(sp),8(sp)
   17aa2:	move.l 1cfc6 <MathIeeeSingBasBase>,d0
   17aa8:	movea.l d0,a6
   17aaa:	move.l 12(sp),d0
   17aae:	move.l 8(sp),d1
   17ab2:	jsr -84(a6)
   17ab6:	move.l d0,4(sp)
   17aba:	move.l 4(sp),d0
}
   17abe:	movea.l (sp)+,a6
   17ac0:	lea 12(sp),sp
   17ac4:	rts

00017ac6 <__eqsf2>:

int __eqsf2( FLOAT a, FLOAT b) {
   17ac6:	lea -12(sp),sp
   17aca:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   17acc:	move.l 20(sp),12(sp)
   17ad2:	move.l 24(sp),8(sp)
   17ad8:	move.l 1cfc6 <MathIeeeSingBasBase>,d0
   17ade:	movea.l d0,a6
   17ae0:	move.l 12(sp),d0
   17ae4:	move.l 8(sp),d1
   17ae8:	jsr -42(a6)
   17aec:	move.l d0,4(sp)
   17af0:	move.l 4(sp),d0
}
   17af4:	movea.l (sp)+,a6
   17af6:	lea 12(sp),sp
   17afa:	rts

00017afc <__extendsfdf2>:

DOUBLE __extendsfdf2 (FLOAT a) {
   17afc:	lea -20(sp),sp
   17b00:	move.l a6,-(sp)
	return IEEEDPFieee( a );
   17b02:	move.l 28(sp),20(sp)
   17b08:	move.l 1cfd2 <MathIeeeDoubTransBase>,d0
   17b0e:	movea.l d0,a6
   17b10:	move.l 20(sp),d0
   17b14:	jsr -108(a6)
   17b18:	move.l d0,4(sp)
   17b1c:	move.l d1,8(sp)
   17b20:	move.l 4(sp),12(sp)
   17b26:	move.l 8(sp),16(sp)
   17b2c:	move.l 12(sp),d0
   17b30:	move.l 16(sp),d1
}
   17b34:	movea.l (sp)+,a6
   17b36:	lea 20(sp),sp
   17b3a:	rts

00017b3c <__fixdfsi>:

LONG __fixdfsi(DOUBLE value) {
   17b3c:	lea -12(sp),sp
   17b40:	move.l a6,-(sp)
	return IEEEDPFix(value);
   17b42:	move.l 20(sp),8(sp)
   17b48:	move.l 24(sp),12(sp)
   17b4e:	move.l 1cfce <MathIeeeDoubBasBase>,d0
   17b54:	movea.l d0,a6
   17b56:	move.l 8(sp),d0
   17b5a:	move.l 12(sp),d1
   17b5e:	jsr -30(a6)
   17b62:	move.l d0,4(sp)
   17b66:	move.l 4(sp),d0
}
   17b6a:	movea.l (sp)+,a6
   17b6c:	lea 12(sp),sp
   17b70:	rts

00017b72 <__fixsfsi>:

LONG __fixsfsi(FLOAT value) {
   17b72:	subq.l #8,sp
   17b74:	move.l a6,-(sp)
	return IEEESPFix(value);
   17b76:	move.l 16(sp),8(sp)
   17b7c:	move.l 1cfc6 <MathIeeeSingBasBase>,d0
   17b82:	movea.l d0,a6
   17b84:	move.l 8(sp),d0
   17b88:	jsr -30(a6)
   17b8c:	move.l d0,4(sp)
   17b90:	move.l 4(sp),d0
}
   17b94:	movea.l (sp)+,a6
   17b96:	addq.l #8,sp
   17b98:	rts

00017b9a <__floatsidf>:


DOUBLE __floatsidf (int i) {
   17b9a:	lea -20(sp),sp
   17b9e:	move.l a6,-(sp)
	return IEEEDPFlt((LONG) i);  
   17ba0:	move.l 28(sp),20(sp)
   17ba6:	move.l 1cfce <MathIeeeDoubBasBase>,d0
   17bac:	movea.l d0,a6
   17bae:	move.l 20(sp),d0
   17bb2:	jsr -36(a6)
   17bb6:	move.l d0,4(sp)
   17bba:	move.l d1,8(sp)
   17bbe:	move.l 4(sp),12(sp)
   17bc4:	move.l 8(sp),16(sp)
   17bca:	move.l 12(sp),d0
   17bce:	move.l 16(sp),d1
}
   17bd2:	movea.l (sp)+,a6
   17bd4:	lea 20(sp),sp
   17bd8:	rts

00017bda <__floatsisf>:

FLOAT __floatsisf(int i) {
   17bda:	subq.l #8,sp
   17bdc:	move.l a6,-(sp)
	return IEEESPFlt((LONG) i); 
   17bde:	move.l 16(sp),8(sp)
   17be4:	move.l 1cfc6 <MathIeeeSingBasBase>,d0
   17bea:	movea.l d0,a6
   17bec:	move.l 8(sp),d0
   17bf0:	jsr -36(a6)
   17bf4:	move.l d0,4(sp)
   17bf8:	move.l 4(sp),d0
}
   17bfc:	movea.l (sp)+,a6
   17bfe:	addq.l #8,sp
   17c00:	rts

00017c02 <__floatunsisf>:

FLOAT __floatunsisf(unsigned int i) {	
   17c02:	subq.l #8,sp
   17c04:	move.l a6,-(sp)
	return IEEESPFlt((LONG) i); 
   17c06:	move.l 16(sp),8(sp)
   17c0c:	move.l 1cfc6 <MathIeeeSingBasBase>,d0
   17c12:	movea.l d0,a6
   17c14:	move.l 8(sp),d0
   17c18:	jsr -36(a6)
   17c1c:	move.l d0,4(sp)
   17c20:	move.l 4(sp),d0
}
   17c24:	movea.l (sp)+,a6
   17c26:	addq.l #8,sp
   17c28:	rts

00017c2a <__muldf3>:

DOUBLE __muldf3( DOUBLE leftParm, DOUBLE rightParm ) {
   17c2a:	lea -32(sp),sp
   17c2e:	movem.l d2-d3/a6,-(sp)
	return IEEEDPMul( leftParm, rightParm);
   17c32:	move.l 48(sp),36(sp)
   17c38:	move.l 52(sp),40(sp)
   17c3e:	move.l 56(sp),28(sp)
   17c44:	move.l 60(sp),32(sp)
   17c4a:	move.l 1cfce <MathIeeeDoubBasBase>,d0
   17c50:	movea.l d0,a6
   17c52:	move.l 36(sp),d0
   17c56:	move.l 40(sp),d1
   17c5a:	move.l 28(sp),d2
   17c5e:	move.l 32(sp),d3
   17c62:	jsr -78(a6)
   17c66:	move.l d0,12(sp)
   17c6a:	move.l d1,16(sp)
   17c6e:	move.l 12(sp),20(sp)
   17c74:	move.l 16(sp),24(sp)
   17c7a:	move.l 20(sp),d0
   17c7e:	move.l 24(sp),d1
}
   17c82:	movem.l (sp)+,d2-d3/a6
   17c86:	lea 32(sp),sp
   17c8a:	rts

00017c8c <__mulsf3>:

 //FLOAT IEEESPMul( FLOAT leftParm, FLOAT rightParm );
FLOAT __mulsf3( FLOAT leftParm, FLOAT rightParm ) {
   17c8c:	lea -12(sp),sp
   17c90:	move.l a6,-(sp)
	return IEEESPMul( leftParm, rightParm);
   17c92:	move.l 20(sp),12(sp)
   17c98:	move.l 24(sp),8(sp)
   17c9e:	move.l 1cfc6 <MathIeeeSingBasBase>,d0
   17ca4:	movea.l d0,a6
   17ca6:	move.l 12(sp),d0
   17caa:	move.l 8(sp),d1
   17cae:	jsr -78(a6)
   17cb2:	move.l d0,4(sp)
   17cb6:	move.l 4(sp),d0
}
   17cba:	movea.l (sp)+,a6
   17cbc:	lea 12(sp),sp
   17cc0:	rts

00017cc2 <__gesf2>:


int __gesf2( FLOAT a, FLOAT b) {
   17cc2:	lea -12(sp),sp
   17cc6:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   17cc8:	move.l 20(sp),12(sp)
   17cce:	move.l 24(sp),8(sp)
   17cd4:	move.l 1cfc6 <MathIeeeSingBasBase>,d0
   17cda:	movea.l d0,a6
   17cdc:	move.l 12(sp),d0
   17ce0:	move.l 8(sp),d1
   17ce4:	jsr -42(a6)
   17ce8:	move.l d0,4(sp)
   17cec:	move.l 4(sp),d0
}
   17cf0:	movea.l (sp)+,a6
   17cf2:	lea 12(sp),sp
   17cf6:	rts

00017cf8 <__gtdf2>:

int __gtdf2( DOUBLE a, DOUBLE b) {
   17cf8:	lea -20(sp),sp
   17cfc:	movem.l d2-d3/a6,-(sp)
	return IEEEDPCmp( a, b);
   17d00:	move.l 36(sp),24(sp)
   17d06:	move.l 40(sp),28(sp)
   17d0c:	move.l 44(sp),16(sp)
   17d12:	move.l 48(sp),20(sp)
   17d18:	move.l 1cfce <MathIeeeDoubBasBase>,d0
   17d1e:	movea.l d0,a6
   17d20:	move.l 24(sp),d0
   17d24:	move.l 28(sp),d1
   17d28:	move.l 16(sp),d2
   17d2c:	move.l 20(sp),d3
   17d30:	jsr -42(a6)
   17d34:	move.l d0,12(sp)
   17d38:	move.l 12(sp),d0
}
   17d3c:	movem.l (sp)+,d2-d3/a6
   17d40:	lea 20(sp),sp
   17d44:	rts

00017d46 <__gtsf2>:

int __gtsf2( FLOAT a, FLOAT b) {
   17d46:	lea -12(sp),sp
   17d4a:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   17d4c:	move.l 20(sp),12(sp)
   17d52:	move.l 24(sp),8(sp)
   17d58:	move.l 1cfc6 <MathIeeeSingBasBase>,d0
   17d5e:	movea.l d0,a6
   17d60:	move.l 12(sp),d0
   17d64:	move.l 8(sp),d1
   17d68:	jsr -42(a6)
   17d6c:	move.l d0,4(sp)
   17d70:	move.l 4(sp),d0
}
   17d74:	movea.l (sp)+,a6
   17d76:	lea 12(sp),sp
   17d7a:	rts

00017d7c <__lesf2>:

int __lesf2( FLOAT a, FLOAT b) {
   17d7c:	lea -12(sp),sp
   17d80:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   17d82:	move.l 20(sp),12(sp)
   17d88:	move.l 24(sp),8(sp)
   17d8e:	move.l 1cfc6 <MathIeeeSingBasBase>,d0
   17d94:	movea.l d0,a6
   17d96:	move.l 12(sp),d0
   17d9a:	move.l 8(sp),d1
   17d9e:	jsr -42(a6)
   17da2:	move.l d0,4(sp)
   17da6:	move.l 4(sp),d0
}
   17daa:	movea.l (sp)+,a6
   17dac:	lea 12(sp),sp
   17db0:	rts

00017db2 <__ltdf2>:

int __ltdf2( DOUBLE a, DOUBLE b) {
   17db2:	lea -20(sp),sp
   17db6:	movem.l d2-d3/a6,-(sp)
	return IEEEDPCmp( a, b);
   17dba:	move.l 36(sp),24(sp)
   17dc0:	move.l 40(sp),28(sp)
   17dc6:	move.l 44(sp),16(sp)
   17dcc:	move.l 48(sp),20(sp)
   17dd2:	move.l 1cfce <MathIeeeDoubBasBase>,d0
   17dd8:	movea.l d0,a6
   17dda:	move.l 24(sp),d0
   17dde:	move.l 28(sp),d1
   17de2:	move.l 16(sp),d2
   17de6:	move.l 20(sp),d3
   17dea:	jsr -42(a6)
   17dee:	move.l d0,12(sp)
   17df2:	move.l 12(sp),d0
}
   17df6:	movem.l (sp)+,d2-d3/a6
   17dfa:	lea 20(sp),sp
   17dfe:	rts

00017e00 <__ltsf2>:

int __ltsf2( FLOAT a, FLOAT b) {
   17e00:	lea -12(sp),sp
   17e04:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   17e06:	move.l 20(sp),12(sp)
   17e0c:	move.l 24(sp),8(sp)
   17e12:	move.l 1cfc6 <MathIeeeSingBasBase>,d0
   17e18:	movea.l d0,a6
   17e1a:	move.l 12(sp),d0
   17e1e:	move.l 8(sp),d1
   17e22:	jsr -42(a6)
   17e26:	move.l d0,4(sp)
   17e2a:	move.l 4(sp),d0
}
   17e2e:	movea.l (sp)+,a6
   17e30:	lea 12(sp),sp
   17e34:	rts

00017e36 <__nesf2>:

int __nesf2( FLOAT a, FLOAT b) {
   17e36:	lea -12(sp),sp
   17e3a:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   17e3c:	move.l 20(sp),12(sp)
   17e42:	move.l 24(sp),8(sp)
   17e48:	move.l 1cfc6 <MathIeeeSingBasBase>,d0
   17e4e:	movea.l d0,a6
   17e50:	move.l 12(sp),d0
   17e54:	move.l 8(sp),d1
   17e58:	jsr -42(a6)
   17e5c:	move.l d0,4(sp)
   17e60:	move.l 4(sp),d0
}
   17e64:	movea.l (sp)+,a6
   17e66:	lea 12(sp),sp
   17e6a:	rts

00017e6c <__subdf3>:

DOUBLE __subdf3 (DOUBLE a, DOUBLE b) {
   17e6c:	lea -32(sp),sp
   17e70:	movem.l d2-d3/a6,-(sp)
	return IEEEDPSub( a, b);
   17e74:	move.l 48(sp),36(sp)
   17e7a:	move.l 52(sp),40(sp)
   17e80:	move.l 56(sp),28(sp)
   17e86:	move.l 60(sp),32(sp)
   17e8c:	move.l 1cfce <MathIeeeDoubBasBase>,d0
   17e92:	movea.l d0,a6
   17e94:	move.l 36(sp),d0
   17e98:	move.l 40(sp),d1
   17e9c:	move.l 28(sp),d2
   17ea0:	move.l 32(sp),d3
   17ea4:	jsr -72(a6)
   17ea8:	move.l d0,12(sp)
   17eac:	move.l d1,16(sp)
   17eb0:	move.l 12(sp),20(sp)
   17eb6:	move.l 16(sp),24(sp)
   17ebc:	move.l 20(sp),d0
   17ec0:	move.l 24(sp),d1
}
   17ec4:	movem.l (sp)+,d2-d3/a6
   17ec8:	lea 32(sp),sp
   17ecc:	rts

00017ece <__subsf3>:

FLOAT __subsf3 (float a, float b) {
   17ece:	lea -12(sp),sp
   17ed2:	move.l a6,-(sp)
	return IEEESPSub( a, b);
   17ed4:	move.l 20(sp),12(sp)
   17eda:	move.l 24(sp),8(sp)
   17ee0:	move.l 1cfc6 <MathIeeeSingBasBase>,d0
   17ee6:	movea.l d0,a6
   17ee8:	move.l 12(sp),d0
   17eec:	move.l 8(sp),d1
   17ef0:	jsr -72(a6)
   17ef4:	move.l d0,4(sp)
   17ef8:	move.l 4(sp),d0
}
   17efc:	movea.l (sp)+,a6
   17efe:	lea 12(sp),sp
   17f02:	rts

00017f04 <__truncdfsf2>:

FLOAT __truncdfsf2(DOUBLE a) {
   17f04:	lea -12(sp),sp
   17f08:	move.l a6,-(sp)
	return IEEEDPTieee( a);
   17f0a:	move.l 20(sp),8(sp)
   17f10:	move.l 24(sp),12(sp)
   17f16:	move.l 1cfd2 <MathIeeeDoubTransBase>,d0
   17f1c:	movea.l d0,a6
   17f1e:	move.l 8(sp),d0
   17f22:	move.l 12(sp),d1
   17f26:	jsr -102(a6)
   17f2a:	move.l d0,4(sp)
   17f2e:	move.l 4(sp),d0
}
   17f32:	movea.l (sp)+,a6
   17f34:	lea 12(sp),sp
   17f38:	rts

00017f3a <atan2f>:

unsigned int __fixunssfsi (float a) {
	return IEEESPFix(a);
}

FLOAT atan2f(FLOAT y, FLOAT x) {
   17f3a:	       lea -24(sp),sp
   17f3e:	       move.l a6,-(sp)
    if (x > 0) {
   17f40:	       clr.l -(sp)
   17f42:	       move.l 40(sp),-(sp)
   17f46:	       jsr 17d46 <__gtsf2>
   17f4c:	       addq.l #8,sp
   17f4e:	       tst.l d0
   17f50:	   ,-- ble.s 17f82 <atan2f+0x48>
        return IEEESPAtan(y / x);
   17f52:	   |   move.l 36(sp),-(sp)
   17f56:	   |   move.l 36(sp),-(sp)
   17f5a:	   |   jsr 17a90 <__divsf3>
   17f60:	   |   addq.l #8,sp
   17f62:	   |   move.l d0,8(sp)
   17f66:	   |   move.l 1cfca <MathIeeeSingTransBase>,d0
   17f6c:	   |   movea.l d0,a6
   17f6e:	   |   move.l 8(sp),d0
   17f72:	   |   jsr -30(a6)
   17f76:	   |   move.l d0,4(sp)
   17f7a:	   |   move.l 4(sp),d0
   17f7e:	,--|-- bra.w 180e2 <atan2f+0x1a8>
    } else if (x < 0 && y >= 0) {
   17f82:	|  '-> clr.l -(sp)
   17f84:	|      move.l 40(sp),-(sp)
   17f88:	|      jsr 17e00 <__ltsf2>
   17f8e:	|      addq.l #8,sp
   17f90:	|      tst.l d0
   17f92:	|  ,-- bge.s 18006 <atan2f+0xcc>
   17f94:	|  |   clr.l -(sp)
   17f96:	|  |   move.l 36(sp),-(sp)
   17f9a:	|  |   jsr 17cc2 <__gesf2>
   17fa0:	|  |   addq.l #8,sp
   17fa2:	|  |   tst.l d0
   17fa4:	|  +-- blt.s 18006 <atan2f+0xcc>
        return IEEESPAtan(y / x) + PI;
   17fa6:	|  |   move.l 36(sp),-(sp)
   17faa:	|  |   move.l 36(sp),-(sp)
   17fae:	|  |   jsr 17a90 <__divsf3>
   17fb4:	|  |   addq.l #8,sp
   17fb6:	|  |   move.l d0,24(sp)
   17fba:	|  |   move.l 1cfca <MathIeeeSingTransBase>,d0
   17fc0:	|  |   movea.l d0,a6
   17fc2:	|  |   move.l 24(sp),d0
   17fc6:	|  |   jsr -30(a6)
   17fca:	|  |   move.l d0,20(sp)
   17fce:	|  |   move.l 20(sp),d0
   17fd2:	|  |   move.l d0,-(sp)
   17fd4:	|  |   jsr 17afc <__extendsfdf2>
   17fda:	|  |   addq.l #4,sp
   17fdc:	|  |   move.l #1413754136,-(sp)
   17fe2:	|  |   move.l #1074340347,-(sp)
   17fe8:	|  |   move.l d1,-(sp)
   17fea:	|  |   move.l d0,-(sp)
   17fec:	|  |   jsr 179cc <__adddf3>
   17ff2:	|  |   lea 16(sp),sp
   17ff6:	|  |   move.l d1,-(sp)
   17ff8:	|  |   move.l d0,-(sp)
   17ffa:	|  |   jsr 17f04 <__truncdfsf2>
   18000:	|  |   addq.l #8,sp
   18002:	+--|-- bra.w 180e2 <atan2f+0x1a8>
    } else if (x < 0 && y < 0) {
   18006:	|  '-> clr.l -(sp)
   18008:	|      move.l 40(sp),-(sp)
   1800c:	|      jsr 17e00 <__ltsf2>
   18012:	|      addq.l #8,sp
   18014:	|      tst.l d0
   18016:	|  ,-- bge.s 18088 <atan2f+0x14e>
   18018:	|  |   clr.l -(sp)
   1801a:	|  |   move.l 36(sp),-(sp)
   1801e:	|  |   jsr 17e00 <__ltsf2>
   18024:	|  |   addq.l #8,sp
   18026:	|  |   tst.l d0
   18028:	|  +-- bge.s 18088 <atan2f+0x14e>
        return IEEESPAtan(y / x) - PI;
   1802a:	|  |   move.l 36(sp),-(sp)
   1802e:	|  |   move.l 36(sp),-(sp)
   18032:	|  |   jsr 17a90 <__divsf3>
   18038:	|  |   addq.l #8,sp
   1803a:	|  |   move.l d0,16(sp)
   1803e:	|  |   move.l 1cfca <MathIeeeSingTransBase>,d0
   18044:	|  |   movea.l d0,a6
   18046:	|  |   move.l 16(sp),d0
   1804a:	|  |   jsr -30(a6)
   1804e:	|  |   move.l d0,12(sp)
   18052:	|  |   move.l 12(sp),d0
   18056:	|  |   move.l d0,-(sp)
   18058:	|  |   jsr 17afc <__extendsfdf2>
   1805e:	|  |   addq.l #4,sp
   18060:	|  |   move.l #1413754136,-(sp)
   18066:	|  |   move.l #1074340347,-(sp)
   1806c:	|  |   move.l d1,-(sp)
   1806e:	|  |   move.l d0,-(sp)
   18070:	|  |   jsr 17e6c <__subdf3>
   18076:	|  |   lea 16(sp),sp
   1807a:	|  |   move.l d1,-(sp)
   1807c:	|  |   move.l d0,-(sp)
   1807e:	|  |   jsr 17f04 <__truncdfsf2>
   18084:	|  |   addq.l #8,sp
   18086:	+--|-- bra.s 180e2 <atan2f+0x1a8>
    } else if (x == 0 && y > 0) {
   18088:	|  '-> clr.l -(sp)
   1808a:	|      move.l 40(sp),-(sp)
   1808e:	|      jsr 17ac6 <__eqsf2>
   18094:	|      addq.l #8,sp
   18096:	|      tst.l d0
   18098:	|  ,-- bne.s 180b4 <atan2f+0x17a>
   1809a:	|  |   clr.l -(sp)
   1809c:	|  |   move.l 36(sp),-(sp)
   180a0:	|  |   jsr 17d46 <__gtsf2>
   180a6:	|  |   addq.l #8,sp
   180a8:	|  |   tst.l d0
   180aa:	|  +-- ble.s 180b4 <atan2f+0x17a>
        return PI / 2;
   180ac:	|  |   move.l #1070141403,d0
   180b2:	+--|-- bra.s 180e2 <atan2f+0x1a8>
    } else if (x == 0 && y < 0) {
   180b4:	|  '-> clr.l -(sp)
   180b6:	|      move.l 40(sp),-(sp)
   180ba:	|      jsr 17ac6 <__eqsf2>
   180c0:	|      addq.l #8,sp
   180c2:	|      tst.l d0
   180c4:	|  ,-- bne.s 180e0 <atan2f+0x1a6>
   180c6:	|  |   clr.l -(sp)
   180c8:	|  |   move.l 36(sp),-(sp)
   180cc:	|  |   jsr 17e00 <__ltsf2>
   180d2:	|  |   addq.l #8,sp
   180d4:	|  |   tst.l d0
   180d6:	|  +-- bge.s 180e0 <atan2f+0x1a6>
        return -PI / 2;
   180d8:	|  |   move.l #-1077342245,d0
   180de:	+--|-- bra.s 180e2 <atan2f+0x1a8>
    } else {
        // This case is x == 0 and y == 0, atan2(0, 0) is undefined, but often treated as 0.
        return 0;
   180e0:	|  '-> moveq #0,d0
    }
}
   180e2:	'----> movea.l (sp)+,a6
   180e4:	       lea 24(sp),sp
   180e8:	       rts

000180ea <sqrt>:

DOUBLE sqrt( DOUBLE input) {
   180ea:	lea -24(sp),sp
   180ee:	move.l a6,-(sp)
	return IEEEDPSqrt(input);
   180f0:	move.l 32(sp),20(sp)
   180f6:	move.l 36(sp),24(sp)
   180fc:	move.l 1cfd2 <MathIeeeDoubTransBase>,d0
   18102:	movea.l d0,a6
   18104:	move.l 20(sp),d0
   18108:	move.l 24(sp),d1
   1810c:	jsr -96(a6)
   18110:	move.l d0,4(sp)
   18114:	move.l d1,8(sp)
   18118:	move.l 4(sp),12(sp)
   1811e:	move.l 8(sp),16(sp)
   18124:	move.l 12(sp),d0
   18128:	move.l 16(sp),d1
}
   1812c:	movea.l (sp)+,a6
   1812e:	lea 24(sp),sp
   18132:	rts

00018134 <__mulsi3>:
	.section .text.__mulsi3,"ax",@progbits
	.type __mulsi3, function
	.globl	__mulsi3
__mulsi3:
	.cfi_startproc
	movew	sp@(4), d0	/* x0 -> d0 */
   18134:	move.w 4(sp),d0
	muluw	sp@(10), d0	/* x0*y1 */
   18138:	mulu.w 10(sp),d0
	movew	sp@(6), d1	/* x1 -> d1 */
   1813c:	move.w 6(sp),d1
	muluw	sp@(8), d1	/* x1*y0 */
   18140:	mulu.w 8(sp),d1
	addw	d1, d0
   18144:	add.w d1,d0
	swap	d0
   18146:	swap d0
	clrw	d0
   18148:	clr.w d0
	movew	sp@(6), d1	/* x1 -> d1 */
   1814a:	move.w 6(sp),d1
	muluw	sp@(10), d1	/* x1*y1 */
   1814e:	mulu.w 10(sp),d1
	addl	d1, d0
   18152:	add.l d1,d0
	rts
   18154:	rts

00018156 <__udivsi3>:
	.section .text.__udivsi3,"ax",@progbits
	.type __udivsi3, function
	.globl	__udivsi3
__udivsi3:
	.cfi_startproc
	movel	d2, sp@-
   18156:	       move.l d2,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	sp@(12), d1	/* d1 = divisor */
   18158:	       move.l 12(sp),d1
	movel	sp@(8), d0	/* d0 = dividend */
   1815c:	       move.l 8(sp),d0

	cmpl	#0x10000, d1 /* divisor >= 2 ^ 16 ?   */
   18160:	       cmpi.l #65536,d1
	jcc	3f		/* then try next algorithm */
   18166:	   ,-- bcc.s 1817e <__udivsi3+0x28>
	movel	d0, d2
   18168:	   |   move.l d0,d2
	clrw	d2
   1816a:	   |   clr.w d2
	swap	d2
   1816c:	   |   swap d2
	divu	d1, d2          /* high quotient in lower word */
   1816e:	   |   divu.w d1,d2
	movew	d2, d0		/* save high quotient */
   18170:	   |   move.w d2,d0
	swap	d0
   18172:	   |   swap d0
	movew	sp@(10), d2	/* get low dividend + high rest */
   18174:	   |   move.w 10(sp),d2
	divu	d1, d2		/* low quotient */
   18178:	   |   divu.w d1,d2
	movew	d2, d0
   1817a:	   |   move.w d2,d0
	jra	6f
   1817c:	,--|-- bra.s 181ae <__udivsi3+0x58>

3:	movel	d1, d2		/* use d2 as divisor backup */
   1817e:	|  '-> move.l d1,d2
4:	lsrl	#1, d1	/* shift divisor */
   18180:	|  ,-> lsr.l #1,d1
	lsrl	#1, d0	/* shift dividend */
   18182:	|  |   lsr.l #1,d0
	cmpl	#0x10000, d1 /* still divisor >= 2 ^ 16 ?  */
   18184:	|  |   cmpi.l #65536,d1
	jcc	4b
   1818a:	|  '-- bcc.s 18180 <__udivsi3+0x2a>
	divu	d1, d0		/* now we have 16-bit divisor */
   1818c:	|      divu.w d1,d0
	andl	#0xffff, d0 /* mask out divisor, ignore remainder */
   1818e:	|      andi.l #65535,d0

/* Multiply the 16-bit tentative quotient with the 32-bit divisor.  Because of
   the operand ranges, this might give a 33-bit product.  If this product is
   greater than the dividend, the tentative quotient was too large. */
	movel	d2, d1
   18194:	|      move.l d2,d1
	mulu	d0, d1		/* low part, 32 bits */
   18196:	|      mulu.w d0,d1
	swap	d2
   18198:	|      swap d2
	mulu	d0, d2		/* high part, at most 17 bits */
   1819a:	|      mulu.w d0,d2
	swap	d2		/* align high part with low part */
   1819c:	|      swap d2
	tstw	d2		/* high part 17 bits? */
   1819e:	|      tst.w d2
	jne	5f		/* if 17 bits, quotient was too large */
   181a0:	|  ,-- bne.s 181ac <__udivsi3+0x56>
	addl	d2, d1		/* add parts */
   181a2:	|  |   add.l d2,d1
	jcs	5f		/* if sum is 33 bits, quotient was too large */
   181a4:	|  +-- bcs.s 181ac <__udivsi3+0x56>
	cmpl	sp@(8), d1	/* compare the sum with the dividend */
   181a6:	|  |   cmp.l 8(sp),d1
	jls	6f		/* if sum > dividend, quotient was too large */
   181aa:	+--|-- bls.s 181ae <__udivsi3+0x58>
5:	subql	#1, d0	/* adjust quotient */
   181ac:	|  '-> subq.l #1,d0

6:	movel	sp@+, d2
   181ae:	'----> move.l (sp)+,d2
	.cfi_adjust_cfa_offset -4
	rts
   181b0:	       rts

000181b2 <__divsi3>:
	.section .text.__divsi3,"ax",@progbits
	.type __divsi3, function
	.globl	__divsi3
 __divsi3:
 	.cfi_startproc
	movel	d2, sp@-
   181b2:	    move.l d2,-(sp)
	.cfi_adjust_cfa_offset 4

	moveq	#1, d2	/* sign of result stored in d2 (=1 or =-1) */
   181b4:	    moveq #1,d2
	movel	sp@(12), d1	/* d1 = divisor */
   181b6:	    move.l 12(sp),d1
	jpl	1f
   181ba:	,-- bpl.s 181c0 <__divsi3+0xe>
	negl	d1
   181bc:	|   neg.l d1
	negb	d2		/* change sign because divisor <0  */
   181be:	|   neg.b d2
1:	movel	sp@(8), d0	/* d0 = dividend */
   181c0:	'-> move.l 8(sp),d0
	jpl	2f
   181c4:	,-- bpl.s 181ca <__divsi3+0x18>
	negl	d0
   181c6:	|   neg.l d0
	negb	d2
   181c8:	|   neg.b d2

2:	movel	d1, sp@-
   181ca:	'-> move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   181cc:	    move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__udivsi3	/* divide abs(dividend) by abs(divisor) */
   181ce:	    jsr 18156 <__udivsi3>
	addql	#8, sp
   181d4:	    addq.l #8,sp
	.cfi_adjust_cfa_offset -8

	tstb	d2
   181d6:	    tst.b d2
	jpl	3f
   181d8:	,-- bpl.s 181dc <__divsi3+0x2a>
	negl	d0
   181da:	|   neg.l d0

3:	movel	sp@+, d2
   181dc:	'-> move.l (sp)+,d2
	.cfi_adjust_cfa_offset -4
	rts
   181de:	    rts

000181e0 <__modsi3>:
	.section .text.__modsi3,"ax",@progbits
	.type __modsi3, function
	.globl	__modsi3
__modsi3:
	.cfi_startproc
	movel	sp@(8), d1	/* d1 = divisor */
   181e0:	move.l 8(sp),d1
	movel	sp@(4), d0	/* d0 = dividend */
   181e4:	move.l 4(sp),d0
	movel	d1, sp@-
   181e8:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   181ea:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__divsi3
   181ec:	jsr 181b2 <__divsi3>
	addql	#8, sp
   181f2:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(8), d1	/* d1 = divisor */
   181f4:	move.l 8(sp),d1
	movel	d1, sp@-
   181f8:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   181fa:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__mulsi3	/* d0 = (a/b)*b */
   181fc:	jsr 18134 <__mulsi3>
	addql	#8, sp
   18202:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(4), d1	/* d1 = dividend */
   18204:	move.l 4(sp),d1
	subl	d0, d1		/* d1 = a - (a/b)*b */
   18208:	sub.l d0,d1
	movel	d1, d0
   1820a:	move.l d1,d0
	rts
   1820c:	rts

0001820e <__umodsi3>:
	.section .text.__umodsi3,"ax",@progbits
	.type __umodsi3, function
	.globl	__umodsi3
__umodsi3:
	.cfi_startproc
	movel	sp@(8), d1	/* d1 = divisor */
   1820e:	move.l 8(sp),d1
	movel	sp@(4), d0	/* d0 = dividend */
   18212:	move.l 4(sp),d0
	movel	d1, sp@-
   18216:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   18218:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__udivsi3
   1821a:	jsr 18156 <__udivsi3>
	addql	#8, sp
   18220:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(8), d1	/* d1 = divisor */
   18222:	move.l 8(sp),d1
	movel	d1, sp@-
   18226:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   18228:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__mulsi3	/* d0 = (a/b)*b */
   1822a:	jsr 18134 <__mulsi3>
	addql	#8, sp
   18230:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(4), d1	/* d1 = dividend */
   18232:	move.l 4(sp),d1
	subl	d0, d1		/* d1 = a - (a/b)*b */
   18236:	sub.l d0,d1
	movel	d1, d0
   18238:	move.l d1,d0
	rts
   1823a:	rts

0001823c <KPutCharX>:
	.type KPutCharX, function
	.globl	KPutCharX

KPutCharX:
	.cfi_startproc
    move.l  a6, -(sp)
   1823c:	move.l a6,-(sp)
	.cfi_adjust_cfa_offset 4
    move.l  4.w, a6
   1823e:	movea.l 4 <_start+0x4>,a6
    jsr     -0x204(a6)
   18242:	jsr -516(a6)
    move.l (sp)+, a6
   18246:	movea.l (sp)+,a6
	.cfi_adjust_cfa_offset -4
    rts
   18248:	rts

0001824a <PutChar>:
	.type PutChar, function
	.globl	PutChar

PutChar:
	.cfi_startproc
	move.b d0, (a3)+
   1824a:	move.b d0,(a3)+
	rts
   1824c:	rts
