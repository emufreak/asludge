
out/a.elf:     file format elf32-m68k


Disassembly of section .text:

00000000 <_start>:
extern void (*__init_array_start[])() __attribute__((weak));
extern void (*__init_array_end[])() __attribute__((weak));
extern void (*__fini_array_start[])() __attribute__((weak));
extern void (*__fini_array_end[])() __attribute__((weak));

__attribute__((used)) __attribute__((section(".text.unlikely"))) void _start() {
       0:	       subq.l #8,sp
	// initialize globals, ctors etc.
	unsigned long count;
	unsigned long i;

	count = __preinit_array_end - __preinit_array_start;
       2:	       move.l #106496,d0
       8:	       subi.l #106496,d0
       e:	       asr.l #2,d0
      10:	       move.l d0,(sp)
	for (i = 0; i < count; i++)
      12:	       clr.l 4(sp)
      16:	   /-- bra.s 32 <_start+0x32>
		__preinit_array_start[i]();
      18:	/--|-> move.l 4(sp),d0
      1c:	|  |   add.l d0,d0
      1e:	|  |   movea.l d0,a1
      20:	|  |   adda.l d0,a1
      22:	|  |   lea 1a000 <allowAnyFilename>,a0
      28:	|  |   movea.l (0,a1,a0.l),a0
      2c:	|  |   jsr (a0)
	for (i = 0; i < count; i++)
      2e:	|  |   addq.l #1,4(sp)
      32:	|  \-> move.l 4(sp),d0
      36:	|      cmp.l (sp),d0
      38:	\----- bcs.s 18 <_start+0x18>

	count = __init_array_end - __init_array_start;
      3a:	       move.l #106496,d0
      40:	       subi.l #106496,d0
      46:	       asr.l #2,d0
      48:	       move.l d0,(sp)
	for (i = 0; i < count; i++)
      4a:	       clr.l 4(sp)
      4e:	   /-- bra.s 6a <_start+0x6a>
		__init_array_start[i]();
      50:	/--|-> move.l 4(sp),d0
      54:	|  |   add.l d0,d0
      56:	|  |   movea.l d0,a1
      58:	|  |   adda.l d0,a1
      5a:	|  |   lea 1a000 <allowAnyFilename>,a0
      60:	|  |   movea.l (0,a1,a0.l),a0
      64:	|  |   jsr (a0)
	for (i = 0; i < count; i++)
      66:	|  |   addq.l #1,4(sp)
      6a:	|  \-> move.l 4(sp),d0
      6e:	|      cmp.l (sp),d0
      70:	\----- bcs.s 50 <_start+0x50>

	main();
      72:	       jsr 7368 <main>

	// call dtors
	count = __fini_array_end - __fini_array_start;
      78:	       move.l #106496,d0
      7e:	       subi.l #106496,d0
      84:	       asr.l #2,d0
      86:	       move.l d0,(sp)
	for (i = count; i > 0; i--)
      88:	       move.l (sp),4(sp)
      8c:	   /-- bra.s aa <_start+0xaa>
		__fini_array_start[i - 1]();
      8e:	/--|-> move.l 4(sp),d0
      92:	|  |   subq.l #1,d0
      94:	|  |   add.l d0,d0
      96:	|  |   movea.l d0,a1
      98:	|  |   adda.l d0,a1
      9a:	|  |   lea 1a000 <allowAnyFilename>,a0
      a0:	|  |   movea.l (0,a1,a0.l),a0
      a4:	|  |   jsr (a0)
	for (i = count; i > 0; i--)
      a6:	|  |   subq.l #1,4(sp)
      aa:	|  \-> tst.l 4(sp)
      ae:	\----- bne.s 8e <_start+0x8e>
}
      b0:	       nop
      b2:	       nop
      b4:	       addq.l #8,sp
      b6:	       rts

000000b8 <copyString>:
#include "support/gcc8_c_support.h"
#include "moreio.h"

BOOL allowAnyFilename = TRUE;

char * copyString(const char * c) {
      b8:	       lea -16(sp),sp
      bc:	       move.l a6,-(sp)
    char * r = (char *)AllocVec(strlen(c) + 1, MEMF_ANY);
      be:	       move.l 24(sp),-(sp)
      c2:	       jsr 13adc <strlen>
      c8:	       addq.l #4,sp
      ca:	       move.l d0,d1
      cc:	       addq.l #1,d1
      ce:	       move.l d1,16(sp)
      d2:	       clr.l 12(sp)
      d6:	       move.l 1a7a4 <SysBase>,d0
      dc:	       movea.l d0,a6
      de:	       move.l 16(sp),d0
      e2:	       move.l 12(sp),d1
      e6:	       jsr -684(a6)
      ea:	       move.l d0,8(sp)
      ee:	       move.l 8(sp),d0
      f2:	       move.l d0,4(sp)
    if (!r) return NULL;
      f6:	   /-- bne.s fc <copyString+0x44>
      f8:	   |   moveq #0,d0
      fa:	/--|-- bra.s 110 <copyString+0x58>
    strcpy(r, c);
      fc:	|  \-> move.l 24(sp),-(sp)
     100:	|      move.l 8(sp),-(sp)
     104:	|      jsr 13af4 <strcpy>
     10a:	|      addq.l #8,sp
    return r;
     10c:	|      move.l 4(sp),d0
}
     110:	\----> movea.l (sp)+,a6
     112:	       lea 16(sp),sp
     116:	       rts

00000118 <decodeFilename>:

char * decodeFilename(char * nameIn) {
     118:	                      lea -20(sp),sp
     11c:	                      move.l a6,-(sp)
	if (allowAnyFilename) {
     11e:	                      move.w 1a000 <allowAnyFilename>,d0
     124:	/-------------------- beq.w 2ea <decodeFilename+0x1d2>
		char * newName = (char *)AllocVec(strlen(nameIn) + 1, MEMF_ANY);
     128:	|                     move.l 28(sp),-(sp)
     12c:	|                     jsr 13adc <strlen>
     132:	|                     addq.l #4,sp
     134:	|                     move.l d0,d1
     136:	|                     addq.l #1,d1
     138:	|                     move.l d1,16(sp)
     13c:	|                     clr.l 12(sp)
     140:	|                     move.l 1a7a4 <SysBase>,d0
     146:	|                     movea.l d0,a6
     148:	|                     move.l 16(sp),d0
     14c:	|                     move.l 12(sp),d1
     150:	|                     jsr -684(a6)
     154:	|                     move.l d0,8(sp)
     158:	|                     move.l 8(sp),d0
     15c:	|                     move.l d0,4(sp)
		if (!newName) return NULL;
     160:	|                 /-- bne.s 168 <decodeFilename+0x50>
     162:	|                 |   moveq #0,d0
     164:	|  /--------------|-- bra.w 2f6 <decodeFilename+0x1de>

		int i = 0;
     168:	|  |              \-> clr.l 20(sp)
		while (*nameIn) {
     16c:	|  |     /----------- bra.w 2ce <decodeFilename+0x1b6>
			if (*nameIn == '_') {
     170:	|  |  /--|----------> movea.l 28(sp),a0
     174:	|  |  |  |            move.b (a0),d0
     176:	|  |  |  |            cmpi.b #95,d0
     17a:	|  |  |  |  /-------- bne.w 2b4 <decodeFilename+0x19c>
				nameIn++;
     17e:	|  |  |  |  |         addq.l #1,28(sp)
				switch (*nameIn) {
     182:	|  |  |  |  |         movea.l 28(sp),a0
     186:	|  |  |  |  |         move.b (a0),d0
     188:	|  |  |  |  |         ext.w d0
     18a:	|  |  |  |  |         movea.w d0,a0
     18c:	|  |  |  |  |         moveq #-65,d0
     18e:	|  |  |  |  |         add.l a0,d0
     190:	|  |  |  |  |         moveq #20,d1
     192:	|  |  |  |  |         cmp.l d0,d1
     194:	|  |  |  |  |  /----- bcs.w 2a4 <decodeFilename+0x18c>
     198:	|  |  |  |  |  |      add.l d0,d0
     19a:	|  |  |  |  |  |      movea.l d0,a0
     19c:	|  |  |  |  |  |      adda.l #424,a0
     1a2:	|  |  |  |  |  |      move.w (a0),d0
     1a4:	|  |  |  |  |  |      jmp (1a8 <decodeFilename+0x90>,pc,d0.w)
     1a8:	|  |  |  |  |  |      .short 0x00d4
     1aa:	|  |  |  |  |  |      ori.l #12583164,(a0)+
     1b0:	|  |  |  |  |  |      .short 0x00fc
     1b2:	|  |  |  |  |  |      ori.l #4194556,252(a4)
     1ba:	|  |  |  |  |  |      .short 0x00fc
     1bc:	|  |  |  |  |  |      .short 0x00fc
     1be:	|  |  |  |  |  |      ori.b #-4,252(a2)
     1c4:	|  |  |  |  |  |      .short 0x00fc
     1c6:	|  |  |  |  |  |      ori.w #232,(a6)
     1ca:	|  |  |  |  |  |      .short 0x00fc
     1cc:	|  |  |  |  |  |      ori.l #16515180,d2
					case 'L':	newName[i] = '<';	nameIn++;	break;
     1d2:	|  |  |  |  |  |      move.l 20(sp),d0
     1d6:	|  |  |  |  |  |      movea.l 4(sp),a0
     1da:	|  |  |  |  |  |      adda.l d0,a0
     1dc:	|  |  |  |  |  |      move.b #60,(a0)
     1e0:	|  |  |  |  |  |      addq.l #1,28(sp)
     1e4:	|  |  |  |  |  |  /-- bra.w 2ca <decodeFilename+0x1b2>
					case 'G':	newName[i] = '>';	nameIn++;	break;
     1e8:	|  |  |  |  |  |  |   move.l 20(sp),d0
     1ec:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     1f0:	|  |  |  |  |  |  |   adda.l d0,a0
     1f2:	|  |  |  |  |  |  |   move.b #62,(a0)
     1f6:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     1fa:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'P':	newName[i] = '|';	nameIn++;	break;
     1fe:	|  |  |  |  |  |  |   move.l 20(sp),d0
     202:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     206:	|  |  |  |  |  |  |   adda.l d0,a0
     208:	|  |  |  |  |  |  |   move.b #124,(a0)
     20c:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     210:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'U':	newName[i] = '_';	nameIn++;	break;
     214:	|  |  |  |  |  |  |   move.l 20(sp),d0
     218:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     21c:	|  |  |  |  |  |  |   adda.l d0,a0
     21e:	|  |  |  |  |  |  |   move.b #95,(a0)
     222:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     226:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'S':	newName[i] = '\"';	nameIn++;	break;
     22a:	|  |  |  |  |  |  |   move.l 20(sp),d0
     22e:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     232:	|  |  |  |  |  |  |   adda.l d0,a0
     234:	|  |  |  |  |  |  |   move.b #34,(a0)
     238:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     23c:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'B':	newName[i] = '\\';	nameIn++;	break;
     240:	|  |  |  |  |  |  |   move.l 20(sp),d0
     244:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     248:	|  |  |  |  |  |  |   adda.l d0,a0
     24a:	|  |  |  |  |  |  |   move.b #92,(a0)
     24e:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     252:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'F':	newName[i] = '/';	nameIn++;	break;
     254:	|  |  |  |  |  |  |   move.l 20(sp),d0
     258:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     25c:	|  |  |  |  |  |  |   adda.l d0,a0
     25e:	|  |  |  |  |  |  |   move.b #47,(a0)
     262:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     266:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'C':	newName[i] = ':';	nameIn++;	break;
     268:	|  |  |  |  |  |  |   move.l 20(sp),d0
     26c:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     270:	|  |  |  |  |  |  |   adda.l d0,a0
     272:	|  |  |  |  |  |  |   move.b #58,(a0)
     276:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     27a:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'A':	newName[i] = '*';	nameIn++;	break;
     27c:	|  |  |  |  |  |  |   move.l 20(sp),d0
     280:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     284:	|  |  |  |  |  |  |   adda.l d0,a0
     286:	|  |  |  |  |  |  |   move.b #42,(a0)
     28a:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     28e:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'Q':	newName[i] = '?';	nameIn++;	break;
     290:	|  |  |  |  |  |  |   move.l 20(sp),d0
     294:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     298:	|  |  |  |  |  |  |   adda.l d0,a0
     29a:	|  |  |  |  |  |  |   move.b #63,(a0)
     29e:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     2a2:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					default:	newName[i] = '_';
     2a4:	|  |  |  |  |  \--|-> move.l 20(sp),d0
     2a8:	|  |  |  |  |     |   movea.l 4(sp),a0
     2ac:	|  |  |  |  |     |   adda.l d0,a0
     2ae:	|  |  |  |  |     |   move.b #95,(a0)
     2b2:	|  |  |  |  |     +-- bra.s 2ca <decodeFilename+0x1b2>
				}
			} else {
				newName[i] = *nameIn;
     2b4:	|  |  |  |  \-----|-> move.l 20(sp),d0
     2b8:	|  |  |  |        |   movea.l 4(sp),a0
     2bc:	|  |  |  |        |   adda.l d0,a0
     2be:	|  |  |  |        |   movea.l 28(sp),a1
     2c2:	|  |  |  |        |   move.b (a1),d0
     2c4:	|  |  |  |        |   move.b d0,(a0)
				nameIn++;
     2c6:	|  |  |  |        |   addq.l #1,28(sp)
			}
			i++;
     2ca:	|  |  |  |        \-> addq.l #1,20(sp)
		while (*nameIn) {
     2ce:	|  |  |  \----------> movea.l 28(sp),a0
     2d2:	|  |  |               move.b (a0),d0
     2d4:	|  |  \-------------- bne.w 170 <decodeFilename+0x58>
		}
		newName[i] = 0;
     2d8:	|  |                  move.l 20(sp),d0
     2dc:	|  |                  movea.l 4(sp),a0
     2e0:	|  |                  adda.l d0,a0
     2e2:	|  |                  clr.b (a0)
		return newName;
     2e4:	|  |                  move.l 4(sp),d0
     2e8:	|  +----------------- bra.s 2f6 <decodeFilename+0x1de>
	} else {
		return copyString(nameIn);
     2ea:	\--|----------------> move.l 28(sp),-(sp)
     2ee:	   |                  jsr b8 <copyString>
     2f4:	   |                  addq.l #4,sp
	}
}
     2f6:	   \----------------> movea.l (sp)+,a6
     2f8:	                      lea 20(sp),sp
     2fc:	                      rts

000002fe <encodeFilename>:

char * encodeFilename (char * nameIn) {
     2fe:	                      lea -24(sp),sp
     302:	                      move.l a6,-(sp)
	if (! nameIn) return NULL;
     304:	                      tst.l 32(sp)
     308:	                  /-- bne.s 310 <encodeFilename+0x12>
     30a:	                  |   moveq #0,d0
     30c:	/-----------------|-- bra.w 688 <encodeFilename+0x38a>
	if (allowAnyFilename) {
     310:	|                 \-> move.w 1a000 <allowAnyFilename>,d0
     316:	|  /----------------- beq.w 644 <encodeFilename+0x346>
		char * newName = AllocVec( strlen(nameIn)*2+1,MEMF_ANY);
     31a:	|  |                  move.l 32(sp),-(sp)
     31e:	|  |                  jsr 13adc <strlen>
     324:	|  |                  addq.l #4,sp
     326:	|  |                  add.l d0,d0
     328:	|  |                  move.l d0,d1
     32a:	|  |                  addq.l #1,d1
     32c:	|  |                  move.l d1,16(sp)
     330:	|  |                  clr.l 12(sp)
     334:	|  |                  move.l 1a7a4 <SysBase>,d0
     33a:	|  |                  movea.l d0,a6
     33c:	|  |                  move.l 16(sp),d0
     340:	|  |                  move.l 12(sp),d1
     344:	|  |                  jsr -684(a6)
     348:	|  |                  move.l d0,8(sp)
     34c:	|  |                  move.l 8(sp),d0
     350:	|  |                  move.l d0,4(sp)
		if(newName == 0) {
     354:	|  |              /-- bne.s 36a <encodeFilename+0x6c>
			KPrintF( "encodefilename: Could not allocate Memory");
     356:	|  |              |   pea 17ae2 <PutChar+0x4>
     35c:	|  |              |   jsr 1703c <KPrintF>
     362:	|  |              |   addq.l #4,sp
			return NULL;
     364:	|  |              |   moveq #0,d0
     366:	+--|--------------|-- bra.w 688 <encodeFilename+0x38a>
		}

		int i = 0;
     36a:	|  |              \-> clr.l 24(sp)
		while (*nameIn) {
     36e:	|  |     /----------- bra.w 634 <encodeFilename+0x336>
			switch (*nameIn) {
     372:	|  |  /--|----------> movea.l 32(sp),a0
     376:	|  |  |  |            move.b (a0),d0
     378:	|  |  |  |            ext.w d0
     37a:	|  |  |  |            movea.w d0,a0
     37c:	|  |  |  |            moveq #95,d0
     37e:	|  |  |  |            cmp.l a0,d0
     380:	|  |  |  |        /-- blt.w 424 <encodeFilename+0x126>
     384:	|  |  |  |        |   moveq #34,d1
     386:	|  |  |  |        |   cmp.l a0,d1
     388:	|  |  |  |  /-----|-- bgt.w 608 <encodeFilename+0x30a>
     38c:	|  |  |  |  |     |   moveq #-34,d0
     38e:	|  |  |  |  |     |   add.l a0,d0
     390:	|  |  |  |  |     |   moveq #61,d1
     392:	|  |  |  |  |     |   cmp.l d0,d1
     394:	|  |  |  |  +-----|-- bcs.w 608 <encodeFilename+0x30a>
     398:	|  |  |  |  |     |   add.l d0,d0
     39a:	|  |  |  |  |     |   movea.l d0,a0
     39c:	|  |  |  |  |     |   adda.l #936,a0
     3a2:	|  |  |  |  |     |   move.w (a0),d0
     3a4:	|  |  |  |  |     |   jmp (3a8 <encodeFilename+0xaa>,pc,d0.w)
     3a8:	|  |  |  |  |     |   bchg d0,d6
     3aa:	|  |  |  |  |     |   andi.w #608,-(a0)
     3ae:	|  |  |  |  |     |   andi.w #608,-(a0)
     3b2:	|  |  |  |  |     |   andi.w #608,-(a0)
     3b6:	|  |  |  |  |     |   andi.w #516,-(a0)
     3ba:	|  |  |  |  |     |   andi.w #608,-(a0)
     3be:	|  |  |  |  |     |   andi.w #608,-(a0)
     3c2:	|  |  |  |  |     |   bclr d0,-(a6)
     3c4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3c8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3cc:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d0:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d8:	|  |  |  |  |     |   bset d0,(a6)
     3da:	|  |  |  |  |     |   andi.w #134,-(a0)
     3de:	|  |  |  |  |     |   andi.w #182,-(a0)
     3e2:	|  |  |  |  |     |   andi.b #96,(96,a2,d0.w:2)
     3e8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3ec:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f0:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3fc:	|  |  |  |  |     |   andi.w #608,-(a0)
     400:	|  |  |  |  |     |   andi.w #608,-(a0)
     404:	|  |  |  |  |     |   andi.w #608,-(a0)
     408:	|  |  |  |  |     |   andi.w #608,-(a0)
     40c:	|  |  |  |  |     |   andi.w #608,-(a0)
     410:	|  |  |  |  |     |   andi.w #608,-(a0)
     414:	|  |  |  |  |     |   andi.w #608,-(a0)
     418:	|  |  |  |  |     |   andi.w #608,-(a0)
     41c:	|  |  |  |  |     |   bchg d0,(96,a6,d0.w:2)
     420:	|  |  |  |  |     |   andi.w #278,-(a0)
     424:	|  |  |  |  |     \-> moveq #124,d0
     426:	|  |  |  |  |         cmp.l a0,d0
     428:	|  |  |  |  |     /-- beq.s 48e <encodeFilename+0x190>
     42a:	|  |  |  |  +-----|-- bra.w 608 <encodeFilename+0x30a>
				case '<':	newName[i++] = '_';		newName[i++] = 'L';		break;
     42e:	|  |  |  |  |     |   move.l 24(sp),d0
     432:	|  |  |  |  |     |   move.l d0,d1
     434:	|  |  |  |  |     |   addq.l #1,d1
     436:	|  |  |  |  |     |   move.l d1,24(sp)
     43a:	|  |  |  |  |     |   movea.l 4(sp),a0
     43e:	|  |  |  |  |     |   adda.l d0,a0
     440:	|  |  |  |  |     |   move.b #95,(a0)
     444:	|  |  |  |  |     |   move.l 24(sp),d0
     448:	|  |  |  |  |     |   move.l d0,d1
     44a:	|  |  |  |  |     |   addq.l #1,d1
     44c:	|  |  |  |  |     |   move.l d1,24(sp)
     450:	|  |  |  |  |     |   movea.l 4(sp),a0
     454:	|  |  |  |  |     |   adda.l d0,a0
     456:	|  |  |  |  |     |   move.b #76,(a0)
     45a:	|  |  |  |  |  /--|-- bra.w 624 <encodeFilename+0x326>
				case '>':	newName[i++] = '_';		newName[i++] = 'G';		break;
     45e:	|  |  |  |  |  |  |   move.l 24(sp),d0
     462:	|  |  |  |  |  |  |   move.l d0,d1
     464:	|  |  |  |  |  |  |   addq.l #1,d1
     466:	|  |  |  |  |  |  |   move.l d1,24(sp)
     46a:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     46e:	|  |  |  |  |  |  |   adda.l d0,a0
     470:	|  |  |  |  |  |  |   move.b #95,(a0)
     474:	|  |  |  |  |  |  |   move.l 24(sp),d0
     478:	|  |  |  |  |  |  |   move.l d0,d1
     47a:	|  |  |  |  |  |  |   addq.l #1,d1
     47c:	|  |  |  |  |  |  |   move.l d1,24(sp)
     480:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     484:	|  |  |  |  |  |  |   adda.l d0,a0
     486:	|  |  |  |  |  |  |   move.b #71,(a0)
     48a:	|  |  |  |  |  +--|-- bra.w 624 <encodeFilename+0x326>
				case '|':	newName[i++] = '_';		newName[i++] = 'P';		break;
     48e:	|  |  |  |  |  |  \-> move.l 24(sp),d0
     492:	|  |  |  |  |  |      move.l d0,d1
     494:	|  |  |  |  |  |      addq.l #1,d1
     496:	|  |  |  |  |  |      move.l d1,24(sp)
     49a:	|  |  |  |  |  |      movea.l 4(sp),a0
     49e:	|  |  |  |  |  |      adda.l d0,a0
     4a0:	|  |  |  |  |  |      move.b #95,(a0)
     4a4:	|  |  |  |  |  |      move.l 24(sp),d0
     4a8:	|  |  |  |  |  |      move.l d0,d1
     4aa:	|  |  |  |  |  |      addq.l #1,d1
     4ac:	|  |  |  |  |  |      move.l d1,24(sp)
     4b0:	|  |  |  |  |  |      movea.l 4(sp),a0
     4b4:	|  |  |  |  |  |      adda.l d0,a0
     4b6:	|  |  |  |  |  |      move.b #80,(a0)
     4ba:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '_':	newName[i++] = '_';		newName[i++] = 'U';		break;
     4be:	|  |  |  |  |  |      move.l 24(sp),d0
     4c2:	|  |  |  |  |  |      move.l d0,d1
     4c4:	|  |  |  |  |  |      addq.l #1,d1
     4c6:	|  |  |  |  |  |      move.l d1,24(sp)
     4ca:	|  |  |  |  |  |      movea.l 4(sp),a0
     4ce:	|  |  |  |  |  |      adda.l d0,a0
     4d0:	|  |  |  |  |  |      move.b #95,(a0)
     4d4:	|  |  |  |  |  |      move.l 24(sp),d0
     4d8:	|  |  |  |  |  |      move.l d0,d1
     4da:	|  |  |  |  |  |      addq.l #1,d1
     4dc:	|  |  |  |  |  |      move.l d1,24(sp)
     4e0:	|  |  |  |  |  |      movea.l 4(sp),a0
     4e4:	|  |  |  |  |  |      adda.l d0,a0
     4e6:	|  |  |  |  |  |      move.b #85,(a0)
     4ea:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '\"':	newName[i++] = '_';		newName[i++] = 'S';		break;
     4ee:	|  |  |  |  |  |      move.l 24(sp),d0
     4f2:	|  |  |  |  |  |      move.l d0,d1
     4f4:	|  |  |  |  |  |      addq.l #1,d1
     4f6:	|  |  |  |  |  |      move.l d1,24(sp)
     4fa:	|  |  |  |  |  |      movea.l 4(sp),a0
     4fe:	|  |  |  |  |  |      adda.l d0,a0
     500:	|  |  |  |  |  |      move.b #95,(a0)
     504:	|  |  |  |  |  |      move.l 24(sp),d0
     508:	|  |  |  |  |  |      move.l d0,d1
     50a:	|  |  |  |  |  |      addq.l #1,d1
     50c:	|  |  |  |  |  |      move.l d1,24(sp)
     510:	|  |  |  |  |  |      movea.l 4(sp),a0
     514:	|  |  |  |  |  |      adda.l d0,a0
     516:	|  |  |  |  |  |      move.b #83,(a0)
     51a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '\\':	newName[i++] = '_';		newName[i++] = 'B';		break;
     51e:	|  |  |  |  |  |      move.l 24(sp),d0
     522:	|  |  |  |  |  |      move.l d0,d1
     524:	|  |  |  |  |  |      addq.l #1,d1
     526:	|  |  |  |  |  |      move.l d1,24(sp)
     52a:	|  |  |  |  |  |      movea.l 4(sp),a0
     52e:	|  |  |  |  |  |      adda.l d0,a0
     530:	|  |  |  |  |  |      move.b #95,(a0)
     534:	|  |  |  |  |  |      move.l 24(sp),d0
     538:	|  |  |  |  |  |      move.l d0,d1
     53a:	|  |  |  |  |  |      addq.l #1,d1
     53c:	|  |  |  |  |  |      move.l d1,24(sp)
     540:	|  |  |  |  |  |      movea.l 4(sp),a0
     544:	|  |  |  |  |  |      adda.l d0,a0
     546:	|  |  |  |  |  |      move.b #66,(a0)
     54a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '/':	newName[i++] = '_';		newName[i++] = 'F';		break;
     54e:	|  |  |  |  |  |      move.l 24(sp),d0
     552:	|  |  |  |  |  |      move.l d0,d1
     554:	|  |  |  |  |  |      addq.l #1,d1
     556:	|  |  |  |  |  |      move.l d1,24(sp)
     55a:	|  |  |  |  |  |      movea.l 4(sp),a0
     55e:	|  |  |  |  |  |      adda.l d0,a0
     560:	|  |  |  |  |  |      move.b #95,(a0)
     564:	|  |  |  |  |  |      move.l 24(sp),d0
     568:	|  |  |  |  |  |      move.l d0,d1
     56a:	|  |  |  |  |  |      addq.l #1,d1
     56c:	|  |  |  |  |  |      move.l d1,24(sp)
     570:	|  |  |  |  |  |      movea.l 4(sp),a0
     574:	|  |  |  |  |  |      adda.l d0,a0
     576:	|  |  |  |  |  |      move.b #70,(a0)
     57a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case ':':	newName[i++] = '_';		newName[i++] = 'C';		break;
     57e:	|  |  |  |  |  |      move.l 24(sp),d0
     582:	|  |  |  |  |  |      move.l d0,d1
     584:	|  |  |  |  |  |      addq.l #1,d1
     586:	|  |  |  |  |  |      move.l d1,24(sp)
     58a:	|  |  |  |  |  |      movea.l 4(sp),a0
     58e:	|  |  |  |  |  |      adda.l d0,a0
     590:	|  |  |  |  |  |      move.b #95,(a0)
     594:	|  |  |  |  |  |      move.l 24(sp),d0
     598:	|  |  |  |  |  |      move.l d0,d1
     59a:	|  |  |  |  |  |      addq.l #1,d1
     59c:	|  |  |  |  |  |      move.l d1,24(sp)
     5a0:	|  |  |  |  |  |      movea.l 4(sp),a0
     5a4:	|  |  |  |  |  |      adda.l d0,a0
     5a6:	|  |  |  |  |  |      move.b #67,(a0)
     5aa:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>
				case '*':	newName[i++] = '_';		newName[i++] = 'A';		break;
     5ac:	|  |  |  |  |  |      move.l 24(sp),d0
     5b0:	|  |  |  |  |  |      move.l d0,d1
     5b2:	|  |  |  |  |  |      addq.l #1,d1
     5b4:	|  |  |  |  |  |      move.l d1,24(sp)
     5b8:	|  |  |  |  |  |      movea.l 4(sp),a0
     5bc:	|  |  |  |  |  |      adda.l d0,a0
     5be:	|  |  |  |  |  |      move.b #95,(a0)
     5c2:	|  |  |  |  |  |      move.l 24(sp),d0
     5c6:	|  |  |  |  |  |      move.l d0,d1
     5c8:	|  |  |  |  |  |      addq.l #1,d1
     5ca:	|  |  |  |  |  |      move.l d1,24(sp)
     5ce:	|  |  |  |  |  |      movea.l 4(sp),a0
     5d2:	|  |  |  |  |  |      adda.l d0,a0
     5d4:	|  |  |  |  |  |      move.b #65,(a0)
     5d8:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>
				case '?':	newName[i++] = '_';		newName[i++] = 'Q';		break;
     5da:	|  |  |  |  |  |      move.l 24(sp),d0
     5de:	|  |  |  |  |  |      move.l d0,d1
     5e0:	|  |  |  |  |  |      addq.l #1,d1
     5e2:	|  |  |  |  |  |      move.l d1,24(sp)
     5e6:	|  |  |  |  |  |      movea.l 4(sp),a0
     5ea:	|  |  |  |  |  |      adda.l d0,a0
     5ec:	|  |  |  |  |  |      move.b #95,(a0)
     5f0:	|  |  |  |  |  |      move.l 24(sp),d0
     5f4:	|  |  |  |  |  |      move.l d0,d1
     5f6:	|  |  |  |  |  |      addq.l #1,d1
     5f8:	|  |  |  |  |  |      move.l d1,24(sp)
     5fc:	|  |  |  |  |  |      movea.l 4(sp),a0
     600:	|  |  |  |  |  |      adda.l d0,a0
     602:	|  |  |  |  |  |      move.b #81,(a0)
     606:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>

				default:	newName[i++] = *nameIn;							break;
     608:	|  |  |  |  \--|----> move.l 24(sp),d0
     60c:	|  |  |  |     |      move.l d0,d1
     60e:	|  |  |  |     |      addq.l #1,d1
     610:	|  |  |  |     |      move.l d1,24(sp)
     614:	|  |  |  |     |      movea.l 4(sp),a0
     618:	|  |  |  |     |      adda.l d0,a0
     61a:	|  |  |  |     |      movea.l 32(sp),a1
     61e:	|  |  |  |     |      move.b (a1),d0
     620:	|  |  |  |     |      move.b d0,(a0)
     622:	|  |  |  |     |      nop
			}
			newName[i] = 0;
     624:	|  |  |  |     \----> move.l 24(sp),d0
     628:	|  |  |  |            movea.l 4(sp),a0
     62c:	|  |  |  |            adda.l d0,a0
     62e:	|  |  |  |            clr.b (a0)
			nameIn ++;
     630:	|  |  |  |            addq.l #1,32(sp)
		while (*nameIn) {
     634:	|  |  |  \----------> movea.l 32(sp),a0
     638:	|  |  |               move.b (a0),d0
     63a:	|  |  \-------------- bne.w 372 <encodeFilename+0x74>
		}
		return newName;
     63e:	|  |                  move.l 4(sp),d0
     642:	+--|----------------- bra.s 688 <encodeFilename+0x38a>
	} else {
		int a;
		for (a = 0; nameIn[a]; a ++) {
     644:	|  \----------------> clr.l 20(sp)
     648:	|              /----- bra.s 66e <encodeFilename+0x370>
			if (nameIn[a] == '\\') nameIn[a] ='/';
     64a:	|           /--|----> move.l 20(sp),d0
     64e:	|           |  |      movea.l 32(sp),a0
     652:	|           |  |      adda.l d0,a0
     654:	|           |  |      move.b (a0),d0
     656:	|           |  |      cmpi.b #92,d0
     65a:	|           |  |  /-- bne.s 66a <encodeFilename+0x36c>
     65c:	|           |  |  |   move.l 20(sp),d0
     660:	|           |  |  |   movea.l 32(sp),a0
     664:	|           |  |  |   adda.l d0,a0
     666:	|           |  |  |   move.b #47,(a0)
		for (a = 0; nameIn[a]; a ++) {
     66a:	|           |  |  \-> addq.l #1,20(sp)
     66e:	|           |  \----> move.l 20(sp),d0
     672:	|           |         movea.l 32(sp),a0
     676:	|           |         adda.l d0,a0
     678:	|           |         move.b (a0),d0
     67a:	|           \-------- bne.s 64a <encodeFilename+0x34c>
		}

		return copyString (nameIn);
     67c:	|                     move.l 32(sp),-(sp)
     680:	|                     jsr b8 <copyString>
     686:	|                     addq.l #4,sp
	}
}
     688:	\-------------------> movea.l (sp)+,a6
     68a:	                      lea 24(sp),sp
     68e:	                      rts

00000690 <FLOATSwap>:

FLOAT FLOATSwap( FLOAT f )
{
     690:	subq.l #8,sp
	{
		FLOAT f;
		unsigned char b[4];
	} dat1, dat2;

	dat1.f = f;
     692:	move.l 12(sp),4(sp)
	dat2.b[0] = dat1.b[3];
     698:	move.b 7(sp),d0
     69c:	move.b d0,(sp)
	dat2.b[1] = dat1.b[2];
     69e:	move.b 6(sp),d0
     6a2:	move.b d0,1(sp)
	dat2.b[2] = dat1.b[1];
     6a6:	move.b 5(sp),d0
     6aa:	move.b d0,2(sp)
	dat2.b[3] = dat1.b[0];
     6ae:	move.b 4(sp),d0
     6b2:	move.b d0,3(sp)
	return dat2.f;
     6b6:	move.l (sp),d0
}
     6b8:	addq.l #8,sp
     6ba:	rts

000006bc <get2bytes>:

int get2bytes (BPTR fp) {
     6bc:	lea -24(sp),sp
     6c0:	move.l a6,-(sp)
	int f1, f2;

	f1 = FGetC (fp);
     6c2:	move.l 32(sp),24(sp)
     6c8:	move.l 1a7ac <DOSBase>,d0
     6ce:	movea.l d0,a6
     6d0:	move.l 24(sp),d1
     6d4:	jsr -306(a6)
     6d8:	move.l d0,20(sp)
     6dc:	move.l 20(sp),d0
     6e0:	move.l d0,16(sp)
	f2 = FGetC (fp);
     6e4:	move.l 32(sp),12(sp)
     6ea:	move.l 1a7ac <DOSBase>,d0
     6f0:	movea.l d0,a6
     6f2:	move.l 12(sp),d1
     6f6:	jsr -306(a6)
     6fa:	move.l d0,8(sp)
     6fe:	move.l 8(sp),d0
     702:	move.l d0,4(sp)

	return (f1 * 256 + f2);
     706:	move.l 16(sp),d0
     70a:	lsl.l #8,d0
     70c:	add.l 4(sp),d0
}
     710:	movea.l (sp)+,a6
     712:	lea 24(sp),sp
     716:	rts

00000718 <get4bytes>:

ULONG get4bytes (BPTR fp) {
     718:	lea -52(sp),sp
     71c:	move.l a6,-(sp)
	int f1, f2, f3, f4;

	f1 = FGetC (fp);
     71e:	move.l 60(sp),52(sp)
     724:	move.l 1a7ac <DOSBase>,d0
     72a:	movea.l d0,a6
     72c:	move.l 52(sp),d1
     730:	jsr -306(a6)
     734:	move.l d0,48(sp)
     738:	move.l 48(sp),d0
     73c:	move.l d0,44(sp)
	f2 = FGetC (fp);
     740:	move.l 60(sp),40(sp)
     746:	move.l 1a7ac <DOSBase>,d0
     74c:	movea.l d0,a6
     74e:	move.l 40(sp),d1
     752:	jsr -306(a6)
     756:	move.l d0,36(sp)
     75a:	move.l 36(sp),d0
     75e:	move.l d0,32(sp)
	f3 = FGetC (fp);
     762:	move.l 60(sp),28(sp)
     768:	move.l 1a7ac <DOSBase>,d0
     76e:	movea.l d0,a6
     770:	move.l 28(sp),d1
     774:	jsr -306(a6)
     778:	move.l d0,24(sp)
     77c:	move.l 24(sp),d0
     780:	move.l d0,20(sp)
	f4 = FGetC (fp);
     784:	move.l 60(sp),16(sp)
     78a:	move.l 1a7ac <DOSBase>,d0
     790:	movea.l d0,a6
     792:	move.l 16(sp),d1
     796:	jsr -306(a6)
     79a:	move.l d0,12(sp)
     79e:	move.l 12(sp),d0
     7a2:	move.l d0,8(sp)

	ULONG x = f1 + f2*256 + f3*256*256 + f4*256*256*256;
     7a6:	move.l 32(sp),d0
     7aa:	lsl.l #8,d0
     7ac:	move.l d0,d1
     7ae:	add.l 44(sp),d1
     7b2:	move.l 20(sp),d0
     7b6:	swap d0
     7b8:	clr.w d0
     7ba:	add.l d0,d1
     7bc:	move.l 8(sp),d0
     7c0:	lsl.w #8,d0
     7c2:	swap d0
     7c4:	clr.w d0
     7c6:	add.l d1,d0
     7c8:	move.l d0,4(sp)

	return x;
     7cc:	move.l 4(sp),d0
}
     7d0:	movea.l (sp)+,a6
     7d2:	lea 52(sp),sp
     7d6:	rts

000007d8 <getFloat>:

FLOAT getFloat (BPTR fp) {
     7d8:	    lea -28(sp),sp
     7dc:	    movem.l d2-d4/a6,-(sp)
	FLOAT f;
	LONG blocks_read = FRead( fp, &f, sizeof (FLOAT), 1 ); 
     7e0:	    move.l 48(sp),40(sp)
     7e6:	    lea 44(sp),a0
     7ea:	    lea -28(a0),a0
     7ee:	    move.l a0,36(sp)
     7f2:	    moveq #4,d0
     7f4:	    move.l d0,32(sp)
     7f8:	    moveq #1,d0
     7fa:	    move.l d0,28(sp)
     7fe:	    move.l 1a7ac <DOSBase>,d0
     804:	    movea.l d0,a6
     806:	    move.l 40(sp),d1
     80a:	    move.l 36(sp),d2
     80e:	    move.l 32(sp),d3
     812:	    move.l 28(sp),d4
     816:	    jsr -324(a6)
     81a:	    move.l d0,24(sp)
     81e:	    move.l 24(sp),d0
     822:	    move.l d0,20(sp)
	if (blocks_read != 1) {
     826:	    moveq #1,d0
     828:	    cmp.l 20(sp),d0
     82c:	/-- beq.s 83c <getFloat+0x64>
		KPrintF("Reading error in getFloat.\n");
     82e:	|   pea 17b0c <PutChar+0x2e>
     834:	|   jsr 1703c <KPrintF>
     83a:	|   addq.l #4,sp
	}
	return FLOATSwap(f);
     83c:	\-> move.l 16(sp),d0
     840:	    move.l d0,-(sp)
     842:	    jsr 690 <FLOATSwap>
     848:	    addq.l #4,sp
	return f;
}
     84a:	    movem.l (sp)+,d2-d4/a6
     84e:	    lea 28(sp),sp
     852:	    rts

00000854 <getSigned>:

short getSigned (BPTR fp) {
     854:	    lea -24(sp),sp
     858:	    movem.l d2-d3/a6,-(sp)
	short f;
	LONG bytes_read = Read(fp, &f, sizeof(short));
     85c:	    move.l 40(sp),32(sp)
     862:	    lea 36(sp),a0
     866:	    lea -22(a0),a0
     86a:	    move.l a0,28(sp)
     86e:	    moveq #2,d0
     870:	    move.l d0,24(sp)
     874:	    move.l 1a7ac <DOSBase>,d0
     87a:	    movea.l d0,a6
     87c:	    move.l 32(sp),d1
     880:	    move.l 28(sp),d2
     884:	    move.l 24(sp),d3
     888:	    jsr -42(a6)
     88c:	    move.l d0,20(sp)
     890:	    move.l 20(sp),d0
     894:	    move.l d0,16(sp)
	if (bytes_read != sizeof (short)) {
     898:	    moveq #2,d0
     89a:	    cmp.l 16(sp),d0
     89e:	/-- beq.s 8ae <getSigned+0x5a>
		KPrintF("getSigned: Reading error in getSigned.\n");
     8a0:	|   pea 17b28 <PutChar+0x4a>
     8a6:	|   jsr 1703c <KPrintF>
     8ac:	|   addq.l #4,sp
	}
	f = shortSwap(f);
     8ae:	\-> move.w 14(sp),d0
     8b2:	    movea.w d0,a0
     8b4:	    move.l a0,-(sp)
     8b6:	    jsr baa <shortSwap>
     8bc:	    addq.l #4,sp
     8be:	    move.w d0,14(sp)
	return f;
     8c2:	    move.w 14(sp),d0
}
     8c6:	    movem.l (sp)+,d2-d3/a6
     8ca:	    lea 24(sp),sp
     8ce:	    rts

000008d0 <put2bytes>:

void put2bytes (int numtoput, BPTR fp) {
     8d0:	    lea -24(sp),sp
     8d4:	    move.l a6,-(sp)
     8d6:	    move.l d2,-(sp)
	FPutC( fp, (char) (numtoput / 256));
     8d8:	    move.l 40(sp),28(sp)
     8de:	    move.l 36(sp),d0
     8e2:	/-- bpl.s 8ea <put2bytes+0x1a>
     8e4:	|   addi.l #255,d0
     8ea:	\-> asr.l #8,d0
     8ec:	    move.l d0,d0
     8ee:	    ext.w d0
     8f0:	    movea.w d0,a0
     8f2:	    move.l a0,24(sp)
     8f6:	    move.l 1a7ac <DOSBase>,d0
     8fc:	    movea.l d0,a6
     8fe:	    move.l 28(sp),d1
     902:	    move.l 24(sp),d2
     906:	    jsr -312(a6)
     90a:	    move.l d0,20(sp)
	FPutC( fp, (char) (numtoput % 256));
     90e:	    move.l 40(sp),16(sp)
     914:	    move.l 36(sp),d0
     918:	    andi.l #-2147483393,d0
     91e:	/-- bpl.s 92a <put2bytes+0x5a>
     920:	|   subq.l #1,d0
     922:	|   moveq #-1,d1
     924:	|   not.b d1
     926:	|   or.l d1,d0
     928:	|   addq.l #1,d0
     92a:	\-> move.l d0,d0
     92c:	    ext.w d0
     92e:	    movea.w d0,a0
     930:	    move.l a0,12(sp)
     934:	    move.l 1a7ac <DOSBase>,d0
     93a:	    movea.l d0,a6
     93c:	    move.l 16(sp),d1
     940:	    move.l 12(sp),d2
     944:	    jsr -312(a6)
     948:	    move.l d0,8(sp)
}
     94c:	    nop
     94e:	    move.l (sp)+,d2
     950:	    movea.l (sp)+,a6
     952:	    lea 24(sp),sp
     956:	    rts

00000958 <put4bytes>:

void put4bytes (ULONG i, BPTR fp) {
     958:	lea -52(sp),sp
     95c:	move.l a6,-(sp)
     95e:	move.l d2,-(sp)
	//	fwrite (&i, sizeof (long int), 1, fp);
	unsigned char f1, f2, f3, f4;

	f4 = i / (256*256*256);
     960:	move.l 64(sp),d0
     964:	clr.w d0
     966:	swap d0
     968:	lsr.w #8,d0
     96a:	move.b d0,59(sp)
	i = i % (256*256*256);
     96e:	andi.l #16777215,64(sp)
	f3 = i / (256*256);
     976:	move.l 64(sp),d0
     97a:	clr.w d0
     97c:	swap d0
     97e:	move.b d0,58(sp)
	i = i % (256*256);
     982:	andi.l #65535,64(sp)
	f2 = i / 256;
     98a:	move.l 64(sp),d0
     98e:	lsr.l #8,d0
     990:	move.b d0,57(sp)
	f1 = i % 256;
     994:	move.b 67(sp),56(sp)

	FPutC (fp,f1);
     99a:	move.l 68(sp),52(sp)
     9a0:	moveq #0,d0
     9a2:	move.b 56(sp),d0
     9a6:	move.l d0,48(sp)
     9aa:	move.l 1a7ac <DOSBase>,d0
     9b0:	movea.l d0,a6
     9b2:	move.l 52(sp),d1
     9b6:	move.l 48(sp),d2
     9ba:	jsr -312(a6)
     9be:	move.l d0,44(sp)
	FPutC (fp,f2);
     9c2:	move.l 68(sp),40(sp)
     9c8:	moveq #0,d0
     9ca:	move.b 57(sp),d0
     9ce:	move.l d0,36(sp)
     9d2:	move.l 1a7ac <DOSBase>,d0
     9d8:	movea.l d0,a6
     9da:	move.l 40(sp),d1
     9de:	move.l 36(sp),d2
     9e2:	jsr -312(a6)
     9e6:	move.l d0,32(sp)
	FPutC (fp,f3);
     9ea:	move.l 68(sp),28(sp)
     9f0:	moveq #0,d0
     9f2:	move.b 58(sp),d0
     9f6:	move.l d0,24(sp)
     9fa:	move.l 1a7ac <DOSBase>,d0
     a00:	movea.l d0,a6
     a02:	move.l 28(sp),d1
     a06:	move.l 24(sp),d2
     a0a:	jsr -312(a6)
     a0e:	move.l d0,20(sp)
	FPutC (fp,f4);
     a12:	move.l 68(sp),16(sp)
     a18:	moveq #0,d0
     a1a:	move.b 59(sp),d0
     a1e:	move.l d0,12(sp)
     a22:	move.l 1a7ac <DOSBase>,d0
     a28:	movea.l d0,a6
     a2a:	move.l 16(sp),d1
     a2e:	move.l 12(sp),d2
     a32:	jsr -312(a6)
     a36:	move.l d0,8(sp)
}
     a3a:	nop
     a3c:	move.l (sp)+,d2
     a3e:	movea.l (sp)+,a6
     a40:	lea 52(sp),sp
     a44:	rts

00000a46 <putFloat>:

void putFloat (FLOAT f, BPTR fp) {
     a46:	lea -16(sp),sp
     a4a:	movem.l d2-d3/a6,-(sp)
	f = FLOATSwap(f);
     a4e:	move.l 32(sp),d0
     a52:	move.l d0,-(sp)
     a54:	jsr 690 <FLOATSwap>
     a5a:	addq.l #4,sp
     a5c:	move.l d0,32(sp)
	Write( fp, &f, sizeof (FLOAT));
     a60:	move.l 36(sp),24(sp)
     a66:	moveq #32,d0
     a68:	add.l sp,d0
     a6a:	move.l d0,20(sp)
     a6e:	moveq #4,d0
     a70:	move.l d0,16(sp)
     a74:	move.l 1a7ac <DOSBase>,d0
     a7a:	movea.l d0,a6
     a7c:	move.l 24(sp),d1
     a80:	move.l 20(sp),d2
     a84:	move.l 16(sp),d3
     a88:	jsr -48(a6)
     a8c:	move.l d0,12(sp)
}
     a90:	nop
     a92:	movem.l (sp)+,d2-d3/a6
     a96:	lea 16(sp),sp
     a9a:	rts

00000a9c <putSigned>:

void putSigned (short f, BPTR fp) {
     a9c:	lea -20(sp),sp
     aa0:	movem.l d2-d3/a6,-(sp)
     aa4:	move.l 36(sp),d0
     aa8:	move.w d0,d0
     aaa:	move.w d0,14(sp)
	f = shortSwap(f);
     aae:	move.w 14(sp),d0
     ab2:	movea.w d0,a0
     ab4:	move.l a0,-(sp)
     ab6:	jsr baa <shortSwap>
     abc:	addq.l #4,sp
     abe:	move.w d0,14(sp)
	Write(fp, &f, sizeof(short));
     ac2:	move.l 40(sp),28(sp)
     ac8:	lea 32(sp),a0
     acc:	lea -18(a0),a0
     ad0:	move.l a0,24(sp)
     ad4:	moveq #2,d0
     ad6:	move.l d0,20(sp)
     ada:	move.l 1a7ac <DOSBase>,d0
     ae0:	movea.l d0,a6
     ae2:	move.l 28(sp),d1
     ae6:	move.l 24(sp),d2
     aea:	move.l 20(sp),d3
     aee:	jsr -48(a6)
     af2:	move.l d0,16(sp)
}
     af6:	nop
     af8:	movem.l (sp)+,d2-d3/a6
     afc:	lea 20(sp),sp
     b00:	rts

00000b02 <readString>:

char * readString (BPTR fp) {
     b02:	          lea -32(sp),sp
     b06:	          move.l a6,-(sp)

	int a, len = get2bytes (fp);
     b08:	          move.l 40(sp),-(sp)
     b0c:	          jsr 6bc <get2bytes>
     b12:	          addq.l #4,sp
     b14:	          move.l d0,28(sp)
	//debugOut ("MOREIO: readString - len %i\n", len);
	char * s = AllocVec(len+1,MEMF_ANY);
     b18:	          move.l 28(sp),d0
     b1c:	          addq.l #1,d0
     b1e:	          move.l d0,24(sp)
     b22:	          clr.l 20(sp)
     b26:	          move.l 1a7a4 <SysBase>,d0
     b2c:	          movea.l d0,a6
     b2e:	          move.l 24(sp),d0
     b32:	          move.l 20(sp),d1
     b36:	          jsr -684(a6)
     b3a:	          move.l d0,16(sp)
     b3e:	          move.l 16(sp),d0
     b42:	          move.l d0,12(sp)
	if(s == 0) return NULL;
     b46:	      /-- bne.s b4c <readString+0x4a>
     b48:	      |   moveq #0,d0
     b4a:	/-----|-- bra.s ba2 <readString+0xa0>
	for (a = 0; a < len; a ++) {
     b4c:	|     \-> clr.l 32(sp)
     b50:	|     /-- bra.s b88 <readString+0x86>
		s[a] = (char) (FGetC (fp) - 1);
     b52:	|  /--|-> move.l 40(sp),8(sp)
     b58:	|  |  |   move.l 1a7ac <DOSBase>,d0
     b5e:	|  |  |   movea.l d0,a6
     b60:	|  |  |   move.l 8(sp),d1
     b64:	|  |  |   jsr -306(a6)
     b68:	|  |  |   move.l d0,4(sp)
     b6c:	|  |  |   move.l 4(sp),d0
     b70:	|  |  |   move.l d0,d0
     b72:	|  |  |   move.b d0,d1
     b74:	|  |  |   subq.b #1,d1
     b76:	|  |  |   move.l 32(sp),d0
     b7a:	|  |  |   movea.l 12(sp),a0
     b7e:	|  |  |   adda.l d0,a0
     b80:	|  |  |   move.b d1,d0
     b82:	|  |  |   move.b d0,(a0)
	for (a = 0; a < len; a ++) {
     b84:	|  |  |   addq.l #1,32(sp)
     b88:	|  |  \-> move.l 32(sp),d0
     b8c:	|  |      cmp.l 28(sp),d0
     b90:	|  \----- blt.s b52 <readString+0x50>
	}
	s[len] = 0;
     b92:	|         move.l 28(sp),d0
     b96:	|         movea.l 12(sp),a0
     b9a:	|         adda.l d0,a0
     b9c:	|         clr.b (a0)
	//debugOut ("MOREIO: readString: %s\n", s);
	return s;
     b9e:	|         move.l 12(sp),d0
}
     ba2:	\-------> movea.l (sp)+,a6
     ba4:	          lea 32(sp),sp
     ba8:	          rts

00000baa <shortSwap>:

short shortSwap( short s )
{
     baa:	subq.l #4,sp
     bac:	move.l 8(sp),d0
     bb0:	move.w d0,d0
     bb2:	move.w d0,(sp)
	unsigned char b1, b2;
	
	b1 = s & 255;
     bb4:	move.b 1(sp),3(sp)
	b2 = (s >> 8) & 255;
     bba:	move.w (sp),d0
     bbc:	asr.w #8,d0
     bbe:	move.b d0,2(sp)
	
	return (b1 << 8) + b2;
     bc2:	clr.w d0
     bc4:	move.b 3(sp),d0
     bc8:	move.w d0,d1
     bca:	lsl.w #8,d1
     bcc:	clr.w d0
     bce:	move.b 2(sp),d0
     bd2:	add.w d1,d0
}
     bd4:	addq.l #4,sp
     bd6:	rts

00000bd8 <writeString>:

void writeString (char * s, BPTR fp) {
     bd8:	       lea -20(sp),sp
     bdc:	       move.l a6,-(sp)
     bde:	       move.l d2,-(sp)
	int a, len = strlen (s);
     be0:	       move.l 32(sp),-(sp)
     be4:	       jsr 13adc <strlen>
     bea:	       addq.l #4,sp
     bec:	       move.l d0,20(sp)
	put2bytes (len, fp);
     bf0:	       move.l 36(sp),-(sp)
     bf4:	       move.l 24(sp),-(sp)
     bf8:	       jsr 8d0 <put2bytes>
     bfe:	       addq.l #8,sp
	for (a = 0; a < len; a ++) {
     c00:	       clr.l 24(sp)
     c04:	   /-- bra.s c40 <writeString+0x68>
		FPutC (fp,s[a] + 1);
     c06:	/--|-> move.l 36(sp),16(sp)
     c0c:	|  |   move.l 24(sp),d0
     c10:	|  |   movea.l 32(sp),a0
     c14:	|  |   adda.l d0,a0
     c16:	|  |   move.b (a0),d0
     c18:	|  |   ext.w d0
     c1a:	|  |   ext.l d0
     c1c:	|  |   move.l d0,d1
     c1e:	|  |   addq.l #1,d1
     c20:	|  |   move.l d1,12(sp)
     c24:	|  |   move.l 1a7ac <DOSBase>,d0
     c2a:	|  |   movea.l d0,a6
     c2c:	|  |   move.l 16(sp),d1
     c30:	|  |   move.l 12(sp),d2
     c34:	|  |   jsr -312(a6)
     c38:	|  |   move.l d0,8(sp)
	for (a = 0; a < len; a ++) {
     c3c:	|  |   addq.l #1,24(sp)
     c40:	|  \-> move.l 24(sp),d0
     c44:	|      cmp.l 20(sp),d0
     c48:	\----- blt.s c06 <writeString+0x2e>
	}
     c4a:	       nop
     c4c:	       nop
     c4e:	       move.l (sp)+,d2
     c50:	       movea.l (sp)+,a6
     c52:	       lea 20(sp),sp
     c56:	       rts

00000c58 <displayCursor>:
int mouseCursorFrameNum = 0;
int mouseCursorCountUp = 0;

extern struct inputType input;

void displayCursor () {
     c58:	    movem.l d2-d5,-(sp)

	
	if( mouseCursorAnim->theSprites)
     c5c:	    movea.l 1a6aa <mouseCursorAnim>,a0
     c62:	    move.l (a0),d0
     c64:	/-- beq.w d64 <displayCursor+0x10c>
	{		
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
			input.mouseY + 44 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].yhot,
			mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].height,
			(UBYTE *) mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].data);
     c68:	|   movea.l 1a6aa <mouseCursorAnim>,a0
     c6e:	|   movea.l (a0),a0
     c70:	|   movea.l 16(a0),a1
     c74:	|   movea.l 1a6aa <mouseCursorAnim>,a0
     c7a:	|   movea.l 4(a0),a0
     c7e:	|   move.l (a0),d0
     c80:	|   move.l d0,d1
     c82:	|   move.l d1,d0
     c84:	|   lsl.l #3,d0
     c86:	|   sub.l d1,d0
     c88:	|   add.l d0,d0
     c8a:	|   add.l d0,d0
     c8c:	|   lea (0,a1,d0.l),a0
     c90:	|   movea.l 24(a0),a1
			mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].height,
     c94:	|   movea.l 1a6aa <mouseCursorAnim>,a0
     c9a:	|   movea.l (a0),a0
     c9c:	|   move.l 16(a0),d2
     ca0:	|   movea.l 1a6aa <mouseCursorAnim>,a0
     ca6:	|   movea.l 4(a0),a0
     caa:	|   move.l (a0),d0
     cac:	|   move.l d0,d1
     cae:	|   move.l d1,d0
     cb0:	|   lsl.l #3,d0
     cb2:	|   sub.l d1,d0
     cb4:	|   add.l d0,d0
     cb6:	|   add.l d0,d0
     cb8:	|   movea.l d2,a0
     cba:	|   adda.l d0,a0
     cbc:	|   move.l 4(a0),d0
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
     cc0:	|   move.l d0,d0
     cc2:	|   moveq #0,d3
     cc4:	|   move.w d0,d3
			input.mouseY + 44 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].yhot,
     cc6:	|   move.l 1a764 <input+0xe>,d0
     ccc:	|   move.l d0,d2
     cce:	|   movea.l 1a6aa <mouseCursorAnim>,a0
     cd4:	|   movea.l (a0),a0
     cd6:	|   move.l 16(a0),d4
     cda:	|   movea.l 1a6aa <mouseCursorAnim>,a0
     ce0:	|   movea.l 4(a0),a0
     ce4:	|   move.l (a0),d0
     ce6:	|   move.l d0,d1
     ce8:	|   move.l d1,d0
     cea:	|   lsl.l #3,d0
     cec:	|   sub.l d1,d0
     cee:	|   add.l d0,d0
     cf0:	|   add.l d0,d0
     cf2:	|   movea.l d4,a0
     cf4:	|   adda.l d0,a0
     cf6:	|   move.l 12(a0),d0
     cfa:	|   move.l d0,d0
     cfc:	|   move.w d2,d1
     cfe:	|   sub.w d0,d1
     d00:	|   move.w d1,d0
     d02:	|   addi.w #44,d0
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
     d06:	|   moveq #0,d2
     d08:	|   move.w d0,d2
     d0a:	|   move.l 1a760 <input+0xa>,d0
     d10:	|   move.l d0,d4
     d12:	|   movea.l 1a6aa <mouseCursorAnim>,a0
     d18:	|   movea.l (a0),a0
     d1a:	|   move.l 16(a0),d5
     d1e:	|   movea.l 1a6aa <mouseCursorAnim>,a0
     d24:	|   movea.l 4(a0),a0
     d28:	|   move.l (a0),d0
     d2a:	|   move.l d0,d1
     d2c:	|   move.l d1,d0
     d2e:	|   lsl.l #3,d0
     d30:	|   sub.l d1,d0
     d32:	|   add.l d0,d0
     d34:	|   add.l d0,d0
     d36:	|   movea.l d5,a0
     d38:	|   adda.l d0,a0
     d3a:	|   move.l 8(a0),d0
     d3e:	|   move.l d0,d0
     d40:	|   move.w d4,d1
     d42:	|   sub.w d0,d1
     d44:	|   move.w d1,d0
     d46:	|   addi.w #128,d0
     d4a:	|   move.w d0,d0
     d4c:	|   andi.l #65535,d0
     d52:	|   move.l a1,-(sp)
     d54:	|   move.l d3,-(sp)
     d56:	|   move.l d2,-(sp)
     d58:	|   move.l d0,-(sp)
     d5a:	|   jsr 13ee <CstDisplayCursor>
     d60:	|   lea 16(sp),sp
	}
}
     d64:	\-> nop
     d66:	    movem.l (sp)+,d2-d5
     d6a:	    rts

00000d6c <pickAnimCursor>:

void pickAnimCursor (struct personaAnimation * pp) {
	deleteAnim (mouseCursorAnim);
     d6c:	move.l 1a6aa <mouseCursorAnim>,d0
     d72:	move.l d0,-(sp)
     d74:	jsr 9732 <deleteAnim>
     d7a:	addq.l #4,sp
	mouseCursorAnim = pp;
     d7c:	move.l 4(sp),1a6aa <mouseCursorAnim>
	mouseCursorFrameNum = 0;
     d84:	clr.l 1a6ae <mouseCursorFrameNum>
	mouseCursorCountUp = 0;
     d8a:	clr.l 1a6b2 <mouseCursorCountUp>
}
     d90:	nop
     d92:	rts

00000d94 <pasteCursor>:

void pasteCursor (int x, int y, struct personaAnimation * c) {
     d94:	subq.l #8,sp

				//int fNumSign = myAnim -> frames[thisPerson -> frameNum].frameNum;
	
	struct sprite *spritetouse = &c->theSprites->bank.sprites[c->frames[0].frameNum];
     d96:	movea.l 20(sp),a0
     d9a:	movea.l (a0),a0
     d9c:	movea.l 16(a0),a0
     da0:	movea.l 20(sp),a1
     da4:	movea.l 4(a1),a1
     da8:	move.l (a1),d0
     daa:	move.l d0,d1
     dac:	move.l d1,d0
     dae:	lsl.l #3,d0
     db0:	sub.l d1,d0
     db2:	add.l d0,d0
     db4:	add.l d0,d0
     db6:	adda.l d0,a0
     db8:	move.l a0,4(sp)

	UWORD absx =  x - spritetouse->xhot;
     dbc:	move.l 12(sp),d0
     dc0:	movea.l 4(sp),a0
     dc4:	move.l 8(a0),d1
     dc8:	move.l d1,d1
     dca:	movea.w d0,a0
     dcc:	suba.w d1,a0
     dce:	move.w a0,2(sp)
	UWORD absy =  y - spritetouse->yhot;
     dd2:	move.l 16(sp),d0
     dd6:	movea.l 4(sp),a0
     dda:	move.l 12(a0),d1
     dde:	move.l d1,d1
     de0:	movea.w d0,a0
     de2:	suba.w d1,a0
     de4:	move.w a0,(sp)

	CstScaleSprite( spritetouse, (struct onScreenPerson *) NULL, absx, absy, BACKDROP);
     de6:	move.w (sp),d0
     de8:	movea.w d0,a1
     dea:	move.w 2(sp),d0
     dee:	movea.w d0,a0
     df0:	pea 2 <_start+0x2>
     df4:	move.l a1,-(sp)
     df6:	move.l a0,-(sp)
     df8:	clr.l -(sp)
     dfa:	move.l 20(sp),-(sp)
     dfe:	jsr 2c10 <CstScaleSprite>
     e04:	lea 20(sp),sp
     e08:	nop
     e0a:	addq.l #8,sp
     e0c:	rts

00000e0e <CstBlankScreen>:
    0x1900000, 0x1920000, 0x1940000, 0x1960000, 0x1980000, 0x19a0000, 0x19c0000, 0x19e0000,
    0x1a00000, 0x1a20000, 0x1a40000, 0x1a60000, 0x1a80000, 0x1aa0000, 0x1ac0000, 0x1ae0000,
    0x1b00000, 0x1b20000, 0x1b40000, 0x1b60000, 0x1b80000, 0x1ba0000, 0x1bc0000, 0x1be0000 
};

void CstBlankScreen( int width, int height) {
     e0e:	          lea -16(sp),sp
     e12:	          move.l a6,-(sp)

  KPrintF("CstBlankScreen: started\n");
     e14:	          pea 17b50 <PutChar+0x72>
     e1a:	          jsr 1703c <KPrintF>
     e20:	          addq.l #4,sp

  if( !CstBackDrop) {
     e22:	          move.l 1a6c6 <CstBackDrop>,d0
     e28:	      /-- bne.s e3c <CstBlankScreen+0x2e>
    KPrintF("CstBlankScreen: Backdrop empty nothing to do\n");
     e2a:	      |   pea 17b69 <PutChar+0x8b>
     e30:	      |   jsr 1703c <KPrintF>
     e36:	      |   addq.l #4,sp
    return;
     e38:	/-----|-- bra.w fc6 <CstBlankScreen+0x1b8>
  }

  CstPaletteLoaded = 0;
     e3c:	|     \-> clr.w 1a6c0 <CstPaletteLoaded>

  volatile struct Custom *custom = (struct Custom*)0xdff000;
     e42:	|         move.l #14675968,8(sp)

  width /= 16;
     e4a:	|         move.l 24(sp),d0
     e4e:	|         movea.l d0,a0
     e50:	|         cmpa.w #0,a0
     e54:	|     /-- bge.s e5a <CstBlankScreen+0x4c>
     e56:	|     |   lea 15(a0),a0
     e5a:	|     \-> move.l a0,d0
     e5c:	|         asr.l #4,d0
     e5e:	|         move.l d0,24(sp)

  WaitBlit();
     e62:	|         move.l 1a7b0 <GfxBase>,d0
     e68:	|         movea.l d0,a6
     e6a:	|         jsr -228(a6)

  //Both Buffers need to be done
  custom->bltafwm = 0xffff;
     e6e:	|         movea.l 8(sp),a0
     e72:	|         move.w #-1,68(a0)
  custom->bltalwm = 0xffff;
     e78:	|         movea.l 8(sp),a0
     e7c:	|         move.w #-1,70(a0)
  custom->bltamod = 0;
     e82:	|         movea.l 8(sp),a0
     e86:	|         move.w #0,100(a0)
  custom->bltbmod = 0;
     e8c:	|         movea.l 8(sp),a0
     e90:	|         move.w #0,98(a0)
  custom->bltcmod = 0;
     e96:	|         movea.l 8(sp),a0
     e9a:	|         move.w #0,96(a0)
  custom->bltdmod = 0;
     ea0:	|         movea.l 8(sp),a0
     ea4:	|         move.w #0,102(a0)
  custom->bltcon1 = 0;
     eaa:	|         movea.l 8(sp),a0
     eae:	|         move.w #0,66(a0)
  custom->bltcon0 = 0x0100;
     eb4:	|         movea.l 8(sp),a0
     eb8:	|         move.w #256,64(a0)
  ULONG bltdpt = (ULONG) CstBackDrop;
     ebe:	|         move.l 1a6c6 <CstBackDrop>,d0
     ec4:	|         move.l d0,16(sp)
  UWORD bltsize = height*64+width;    
     ec8:	|         move.l 28(sp),d0
     ecc:	|         lsl.w #6,d0
     ece:	|         move.l 24(sp),d1
     ed2:	|         movea.w d0,a0
     ed4:	|         adda.w d1,a0
     ed6:	|         move.w a0,6(sp)
  UWORD blitsize = width*height*2;
     eda:	|         move.l 24(sp),d1
     ede:	|         move.l 28(sp),d0
     ee2:	|         muls.w d1,d0
     ee4:	|         add.w d0,d0
     ee6:	|         move.w d0,4(sp)

  KPrintF("CstBlankScreen: Starting Blits\n");
     eea:	|         pea 17b97 <PutChar+0xb9>
     ef0:	|         jsr 1703c <KPrintF>
     ef6:	|         addq.l #4,sp

  for(int i2=0;i2<5;i2++)
     ef8:	|         clr.l 12(sp)
     efc:	|     /-- bra.s f2e <CstBlankScreen+0x120>
  {            
    custom->bltdpt = (APTR) bltdpt;
     efe:	|  /--|-> move.l 16(sp),d0
     f02:	|  |  |   movea.l 8(sp),a0
     f06:	|  |  |   move.l d0,84(a0)
    custom->bltsize = bltsize;            
     f0a:	|  |  |   movea.l 8(sp),a0
     f0e:	|  |  |   move.w 6(sp),88(a0)
    WaitBlit();
     f14:	|  |  |   move.l 1a7b0 <GfxBase>,d0
     f1a:	|  |  |   movea.l d0,a6
     f1c:	|  |  |   jsr -228(a6)
    bltdpt += blitsize;
     f20:	|  |  |   moveq #0,d0
     f22:	|  |  |   move.w 4(sp),d0
     f26:	|  |  |   add.l d0,16(sp)
  for(int i2=0;i2<5;i2++)
     f2a:	|  |  |   addq.l #1,12(sp)
     f2e:	|  |  \-> moveq #4,d0
     f30:	|  |      cmp.l 12(sp),d0
     f34:	|  \----- bge.s efe <CstBlankScreen+0xf0>
  }

  KPrintF("CstBlankScreen: Finished Blits\n");
     f36:	|         pea 17bb7 <PutChar+0xd9>
     f3c:	|         jsr 1703c <KPrintF>
     f42:	|         addq.l #4,sp

  CstApplyBackDropCounter = 2;
     f44:	|         move.w #2,1a6d2 <CstApplyBackDropCounter>

  *CstBackDropBufferApplyCursor++ = winWidth/16;
     f4c:	|         move.l 1a6f8 <winWidth>,d0
     f52:	|         lsr.l #4,d0
     f54:	|         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
     f5a:	|         move.l a0,d1
     f5c:	|         addq.l #2,d1
     f5e:	|         move.l d1,1a6e8 <CstBackDropBufferApplyCursor>
     f64:	|         move.l d0,d0
     f66:	|         move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = winHeight;
     f68:	|         move.l 1a6fc <winHeight>,d0
     f6e:	|         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
     f74:	|         move.l a0,d1
     f76:	|         addq.l #2,d1
     f78:	|         move.l d1,1a6e8 <CstBackDropBufferApplyCursor>
     f7e:	|         move.l d0,d0
     f80:	|         move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = 0;
     f82:	|         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
     f88:	|         move.l a0,d0
     f8a:	|         addq.l #2,d0
     f8c:	|         move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
     f92:	|         clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
     f94:	|         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
     f9a:	|         move.l a0,d0
     f9c:	|         addq.l #2,d0
     f9e:	|         move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
     fa4:	|         clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
     fa6:	|         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
     fac:	|         move.l a0,d0
     fae:	|         addq.l #2,d0
     fb0:	|         move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
     fb6:	|         clr.w (a0)

  KPrintF("CstBlankScreen: end\n");
     fb8:	|         pea 17bd7 <PutChar+0xf9>
     fbe:	|         jsr 1703c <KPrintF>
     fc4:	|         addq.l #4,sp


}
     fc6:	\-------> movea.l (sp)+,a6
     fc8:	          lea 16(sp),sp
     fcc:	          rts

00000fce <CstCreateCopperlist>:

UWORD * CstCreateCopperlist( int width) {
     fce:	       lea -52(sp),sp
     fd2:	       move.l a6,-(sp)
     fd4:	       move.l d2,-(sp)
  
  ULONG *retval = AllocMem(  CSTCOPSIZE, MEMF_CHIP);
     fd6:	       move.l #400,32(sp)
     fde:	       moveq #2,d0
     fe0:	       move.l d0,28(sp)
     fe4:	       move.l 1a7a4 <SysBase>,d0
     fea:	       movea.l d0,a6
     fec:	       move.l 32(sp),d0
     ff0:	       move.l 28(sp),d1
     ff4:	       jsr -198(a6)
     ff8:	       move.l d0,24(sp)
     ffc:	       move.l 24(sp),d0
    1000:	       move.l d0,20(sp)
  
  if( retval == 0) {
    1004:	   /-- bne.s 102e <CstCreateCopperlist+0x60>
    KPrintF("CstCreateCopperlist: Allocation of Ram for Copper failed.\n", 40);
    1006:	   |   pea 28 <_start+0x28>
    100a:	   |   pea 17bec <PutChar+0x10e>
    1010:	   |   jsr 1703c <KPrintF>
    1016:	   |   addq.l #8,sp
    Exit(1);
    1018:	   |   moveq #1,d1
    101a:	   |   move.l d1,16(sp)
    101e:	   |   move.l 1a7ac <DOSBase>,d0
    1024:	   |   movea.l d0,a6
    1026:	   |   move.l 16(sp),d1
    102a:	   |   jsr -144(a6)
  }
  ULONG *cl = retval;
    102e:	   \-> move.l 20(sp),56(sp)
  CstClCursor = (UWORD *)cl;
    1034:	       move.l 56(sp),1a6f4 <CstClCursor>

  ULONG *clpartinstruction;
  clpartinstruction = CstClSprites;
    103c:	       move.l #106498,52(sp)
  for(int i=0; i<16;i++)
    1044:	       clr.l 48(sp)
    1048:	   /-- bra.s 106e <CstCreateCopperlist+0xa0>
    *cl++ = *clpartinstruction++;
    104a:	/--|-> move.l 52(sp),d1
    104e:	|  |   move.l d1,d2
    1050:	|  |   addq.l #4,d2
    1052:	|  |   move.l d2,52(sp)
    1056:	|  |   move.l 56(sp),d0
    105a:	|  |   move.l d0,d2
    105c:	|  |   addq.l #4,d2
    105e:	|  |   move.l d2,56(sp)
    1062:	|  |   movea.l d1,a0
    1064:	|  |   move.l (a0),d1
    1066:	|  |   movea.l d0,a0
    1068:	|  |   move.l d1,(a0)
  for(int i=0; i<16;i++)
    106a:	|  |   addq.l #1,48(sp)
    106e:	|  \-> moveq #15,d0
    1070:	|      cmp.l 48(sp),d0
    1074:	\----- bge.s 104a <CstCreateCopperlist+0x7c>

  clpartinstruction = CstClScreen;
    1076:	       move.l #106562,52(sp)

  for(int i=0; i<12;i++)
    107e:	       clr.l 44(sp)
    1082:	   /-- bra.s 10a8 <CstCreateCopperlist+0xda>
    *cl++ = *clpartinstruction++;
    1084:	/--|-> move.l 52(sp),d1
    1088:	|  |   move.l d1,d2
    108a:	|  |   addq.l #4,d2
    108c:	|  |   move.l d2,52(sp)
    1090:	|  |   move.l 56(sp),d0
    1094:	|  |   move.l d0,d2
    1096:	|  |   addq.l #4,d2
    1098:	|  |   move.l d2,56(sp)
    109c:	|  |   movea.l d1,a0
    109e:	|  |   move.l (a0),d1
    10a0:	|  |   movea.l d0,a0
    10a2:	|  |   move.l d1,(a0)
  for(int i=0; i<12;i++)
    10a4:	|  |   addq.l #1,44(sp)
    10a8:	|  \-> moveq #11,d0
    10aa:	|      cmp.l 44(sp),d0
    10ae:	\----- bge.s 1084 <CstCreateCopperlist+0xb6>

  clpartinstruction = CstClBitplanes;
    10b0:	       move.l #106610,52(sp)
  for(int i=0; i<10;i++)
    10b8:	       clr.l 40(sp)
    10bc:	   /-- bra.s 10e2 <CstCreateCopperlist+0x114>
    *cl++ = *clpartinstruction++;        
    10be:	/--|-> move.l 52(sp),d1
    10c2:	|  |   move.l d1,d2
    10c4:	|  |   addq.l #4,d2
    10c6:	|  |   move.l d2,52(sp)
    10ca:	|  |   move.l 56(sp),d0
    10ce:	|  |   move.l d0,d2
    10d0:	|  |   addq.l #4,d2
    10d2:	|  |   move.l d2,56(sp)
    10d6:	|  |   movea.l d1,a0
    10d8:	|  |   move.l (a0),d1
    10da:	|  |   movea.l d0,a0
    10dc:	|  |   move.l d1,(a0)
  for(int i=0; i<10;i++)
    10de:	|  |   addq.l #1,40(sp)
    10e2:	|  \-> moveq #9,d0
    10e4:	|      cmp.l 40(sp),d0
    10e8:	\----- bge.s 10be <CstCreateCopperlist+0xf0>

  
  clpartinstruction = CstClColorTemplate;
    10ea:	       move.l #106650,52(sp)
  CstClColor = (UWORD *) cl;
    10f2:	       move.l 56(sp),1a6ec <CstClColor>
  for(int i=0; i<32;i++)
    10fa:	       clr.l 36(sp)
    10fe:	   /-- bra.s 1124 <CstCreateCopperlist+0x156>
    *cl++ = *clpartinstruction++;        
    1100:	/--|-> move.l 52(sp),d1
    1104:	|  |   move.l d1,d2
    1106:	|  |   addq.l #4,d2
    1108:	|  |   move.l d2,52(sp)
    110c:	|  |   move.l 56(sp),d0
    1110:	|  |   move.l d0,d2
    1112:	|  |   addq.l #4,d2
    1114:	|  |   move.l d2,56(sp)
    1118:	|  |   movea.l d1,a0
    111a:	|  |   move.l (a0),d1
    111c:	|  |   movea.l d0,a0
    111e:	|  |   move.l d1,(a0)
  for(int i=0; i<32;i++)
    1120:	|  |   addq.l #1,36(sp)
    1124:	|  \-> moveq #31,d0
    1126:	|      cmp.l 36(sp),d0
    112a:	\----- bge.s 1100 <CstCreateCopperlist+0x132>
 
  /* Screen is bigger than real screen? Setup BPLxMod accordingly*/
  if(width > 40) {
    112c:	       moveq #40,d1
    112e:	       cmp.l 64(sp),d1
    1132:	   /-- bge.s 1190 <CstCreateCopperlist+0x1c2>
    int tmp = width - 40;
    1134:	   |   moveq #-40,d2
    1136:	   |   add.l 64(sp),d2
    113a:	   |   move.l d2,12(sp)
    UWORD *cw = (UWORD *) cl; 
    113e:	   |   move.l 56(sp),8(sp)
    *cw++ = 0x108;
    1144:	   |   move.l 8(sp),d0
    1148:	   |   move.l d0,d1
    114a:	   |   addq.l #2,d1
    114c:	   |   move.l d1,8(sp)
    1150:	   |   movea.l d0,a0
    1152:	   |   move.w #264,(a0)
    *cw++ = tmp;
    1156:	   |   move.l 8(sp),d0
    115a:	   |   move.l d0,d1
    115c:	   |   addq.l #2,d1
    115e:	   |   move.l d1,8(sp)
    1162:	   |   move.l 12(sp),d1
    1166:	   |   movea.l d0,a0
    1168:	   |   move.w d1,(a0)
    *cw++ = 0x10a;
    116a:	   |   move.l 8(sp),d0
    116e:	   |   move.l d0,d1
    1170:	   |   addq.l #2,d1
    1172:	   |   move.l d1,8(sp)
    1176:	   |   movea.l d0,a0
    1178:	   |   move.w #266,(a0)
    *cw++ = tmp;     
    117c:	   |   move.l 8(sp),d0
    1180:	   |   move.l d0,d1
    1182:	   |   addq.l #2,d1
    1184:	   |   move.l d1,8(sp)
    1188:	   |   move.l 12(sp),d1
    118c:	   |   movea.l d0,a0
    118e:	   |   move.w d1,(a0)
  }

  *cl++ = 0xfffffffe;
    1190:	   \-> move.l 56(sp),d0
    1194:	       move.l d0,d1
    1196:	       addq.l #4,d1
    1198:	       move.l d1,56(sp)
    119c:	       moveq #-2,d2
    119e:	       movea.l d0,a0
    11a0:	       move.l d2,(a0)
  return (UWORD *) retval;  
    11a2:	       move.l 20(sp),d0
}
    11a6:	       move.l (sp)+,d2
    11a8:	       movea.l (sp)+,a6
    11aa:	       lea 52(sp),sp
    11ae:	       rts

000011b0 <CstDisplayBackDrop>:

void CstDisplayBackDrop() 
{
    11b0:	                lea -40(sp),sp
    11b4:	                move.l a6,-(sp)
    11b6:	                move.l d2,-(sp)
 volatile struct Custom *custom = (struct Custom*)0xdff000;  
    11b8:	                move.l #14675968,16(sp)

  KPrintF("CstDisplayBackDrop: Started");
    11c0:	                pea 17c27 <PutChar+0x149>
    11c6:	                jsr 1703c <KPrintF>
    11cc:	                addq.l #4,sp

  CstBackDropBufferApplyCursor = CstBackDropBufferApplyStart;
    11ce:	                move.l 1a6e4 <CstBackDropBufferApplyStart>,d0
    11d4:	                move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
  UWORD *cursor = CstBackDropBufferApplyStart;
    11da:	                move.l 1a6e4 <CstBackDropBufferApplyStart>,44(sp)
  if(!*cursor || !CstDrawBuffer) {
    11e2:	                movea.l 44(sp),a0
    11e6:	                move.w (a0),d0
    11e8:	/-------------- beq.w 13e2 <CstDisplayBackDrop+0x232>
    11ec:	|               move.l 1a6d8 <CstDrawBuffer>,d0
    11f2:	+-------------- beq.w 13e2 <CstDisplayBackDrop+0x232>
    return;
  } 

  WaitBlit();
    11f6:	|               move.l 1a7b0 <GfxBase>,d0
    11fc:	|               movea.l d0,a6
    11fe:	|               jsr -228(a6)
  
  custom->bltafwm = 0xffff;
    1202:	|               movea.l 16(sp),a0
    1206:	|               move.w #-1,68(a0)
  custom->bltalwm = 0xffff;  
    120c:	|               movea.l 16(sp),a0
    1210:	|               move.w #-1,70(a0)
  custom->bltcon0 = 0x9f0;
    1216:	|               movea.l 16(sp),a0
    121a:	|               move.w #2544,64(a0)
  
  while(*cursor)
    1220:	|     /-------- bra.w 1388 <CstDisplayBackDrop+0x1d8>
  {    
    UWORD width = *cursor++;
    1224:	|  /--|-------> move.l 44(sp),d0
    1228:	|  |  |         move.l d0,d1
    122a:	|  |  |         addq.l #2,d1
    122c:	|  |  |         move.l d1,44(sp)
    1230:	|  |  |         movea.l d0,a0
    1232:	|  |  |         move.w (a0),14(sp)
    UWORD height = *cursor++;
    1236:	|  |  |         move.l 44(sp),d0
    123a:	|  |  |         move.l d0,d1
    123c:	|  |  |         addq.l #2,d1
    123e:	|  |  |         move.l d1,44(sp)
    1242:	|  |  |         movea.l d0,a0
    1244:	|  |  |         move.w (a0),12(sp)
    UWORD xpos = *cursor++;
    1248:	|  |  |         move.l 44(sp),d0
    124c:	|  |  |         move.l d0,d1
    124e:	|  |  |         addq.l #2,d1
    1250:	|  |  |         move.l d1,44(sp)
    1254:	|  |  |         movea.l d0,a0
    1256:	|  |  |         move.w (a0),10(sp)
    UWORD ypos = *cursor++;
    125a:	|  |  |         move.l 44(sp),d0
    125e:	|  |  |         move.l d0,d1
    1260:	|  |  |         addq.l #2,d1
    1262:	|  |  |         move.l d1,44(sp)
    1266:	|  |  |         movea.l d0,a0
    1268:	|  |  |         move.w (a0),8(sp)

    custom->bltamod = winWidth/8-width*2;
    126c:	|  |  |         move.l 1a6f8 <winWidth>,d0
    1272:	|  |  |         lsr.l #3,d0
    1274:	|  |  |         move.l d0,d1
    1276:	|  |  |         move.w 14(sp),d0
    127a:	|  |  |         add.w d0,d0
    127c:	|  |  |         sub.w d0,d1
    127e:	|  |  |         movea.l 16(sp),a0
    1282:	|  |  |         move.w d1,100(a0)
    custom->bltdmod = winWidth/8-width*2;
    1286:	|  |  |         move.l 1a6f8 <winWidth>,d0
    128c:	|  |  |         lsr.l #3,d0
    128e:	|  |  |         move.l d0,d1
    1290:	|  |  |         move.w 14(sp),d0
    1294:	|  |  |         add.w d0,d0
    1296:	|  |  |         sub.w d0,d1
    1298:	|  |  |         movea.l 16(sp),a0
    129c:	|  |  |         move.w d1,102(a0)
    ULONG bltapt = ((ULONG) CstBackDrop) + ypos*winWidth/8 + xpos;
    12a0:	|  |  |         moveq #0,d0
    12a2:	|  |  |         move.w 8(sp),d0
    12a6:	|  |  |         move.l 1a6f8 <winWidth>,d1
    12ac:	|  |  |         move.l d1,-(sp)
    12ae:	|  |  |         move.l d0,-(sp)
    12b0:	|  |  |         jsr 179c8 <__mulsi3>
    12b6:	|  |  |         addq.l #8,sp
    12b8:	|  |  |         move.l d0,d1
    12ba:	|  |  |         lsr.l #3,d1
    12bc:	|  |  |         move.l 1a6c6 <CstBackDrop>,d0
    12c2:	|  |  |         add.l d0,d1
    12c4:	|  |  |         moveq #0,d0
    12c6:	|  |  |         move.w 10(sp),d0
    12ca:	|  |  |         move.l d1,d2
    12cc:	|  |  |         add.l d0,d2
    12ce:	|  |  |         move.l d2,40(sp)
    ULONG bltdpt = ((ULONG) CstDrawBuffer) + ypos*winWidth/8 + xpos;
    12d2:	|  |  |         moveq #0,d0
    12d4:	|  |  |         move.w 8(sp),d0
    12d8:	|  |  |         move.l 1a6f8 <winWidth>,d1
    12de:	|  |  |         move.l d1,-(sp)
    12e0:	|  |  |         move.l d0,-(sp)
    12e2:	|  |  |         jsr 179c8 <__mulsi3>
    12e8:	|  |  |         addq.l #8,sp
    12ea:	|  |  |         move.l d0,d1
    12ec:	|  |  |         lsr.l #3,d1
    12ee:	|  |  |         move.l 1a6d8 <CstDrawBuffer>,d0
    12f4:	|  |  |         add.l d0,d1
    12f6:	|  |  |         moveq #0,d0
    12f8:	|  |  |         move.w 10(sp),d0
    12fc:	|  |  |         move.l d1,d2
    12fe:	|  |  |         add.l d0,d2
    1300:	|  |  |         move.l d2,36(sp)
    for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    1304:	|  |  |         clr.l 32(sp)
    1308:	|  |  |     /-- bra.s 1380 <CstDisplayBackDrop+0x1d0>
    {
      custom->bltapt = (APTR) bltapt;
    130a:	|  |  |  /--|-> move.l 40(sp),d0
    130e:	|  |  |  |  |   movea.l 16(sp),a0
    1312:	|  |  |  |  |   move.l d0,80(a0)
      custom->bltdpt = (APTR) bltdpt;
    1316:	|  |  |  |  |   move.l 36(sp),d0
    131a:	|  |  |  |  |   movea.l 16(sp),a0
    131e:	|  |  |  |  |   move.l d0,84(a0)
      custom->bltsize = (height << 6) + width;
    1322:	|  |  |  |  |   move.w 12(sp),d0
    1326:	|  |  |  |  |   lsl.w #6,d0
    1328:	|  |  |  |  |   add.w 14(sp),d0
    132c:	|  |  |  |  |   movea.l 16(sp),a0
    1330:	|  |  |  |  |   move.w d0,88(a0)
      bltapt += winWidth/8*winHeight;
    1334:	|  |  |  |  |   move.l 1a6f8 <winWidth>,d0
    133a:	|  |  |  |  |   lsr.l #3,d0
    133c:	|  |  |  |  |   move.l 1a6fc <winHeight>,d1
    1342:	|  |  |  |  |   move.l d1,-(sp)
    1344:	|  |  |  |  |   move.l d0,-(sp)
    1346:	|  |  |  |  |   jsr 179c8 <__mulsi3>
    134c:	|  |  |  |  |   addq.l #8,sp
    134e:	|  |  |  |  |   add.l d0,40(sp)
      bltdpt += winWidth/8*winHeight;
    1352:	|  |  |  |  |   move.l 1a6f8 <winWidth>,d0
    1358:	|  |  |  |  |   lsr.l #3,d0
    135a:	|  |  |  |  |   move.l 1a6fc <winHeight>,d1
    1360:	|  |  |  |  |   move.l d1,-(sp)
    1362:	|  |  |  |  |   move.l d0,-(sp)
    1364:	|  |  |  |  |   jsr 179c8 <__mulsi3>
    136a:	|  |  |  |  |   addq.l #8,sp
    136c:	|  |  |  |  |   add.l d0,36(sp)
      WaitBlit();
    1370:	|  |  |  |  |   move.l 1a7b0 <GfxBase>,d0
    1376:	|  |  |  |  |   movea.l d0,a6
    1378:	|  |  |  |  |   jsr -228(a6)
    for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    137c:	|  |  |  |  |   addq.l #1,32(sp)
    1380:	|  |  |  |  \-> moveq #4,d0
    1382:	|  |  |  |      cmp.l 32(sp),d0
    1386:	|  |  |  \----- bge.s 130a <CstDisplayBackDrop+0x15a>
  while(*cursor)
    1388:	|  |  \-------> movea.l 44(sp),a0
    138c:	|  |            move.w (a0),d0
    138e:	|  \----------- bne.w 1224 <CstDisplayBackDrop+0x74>
    }  
  }
  UWORD *colorpos = CstPalette;
    1392:	|               move.l 1a6f0 <CstPalette>,28(sp)
  
  UWORD *tmp = CstClColor;
    139a:	|               move.l 1a6ec <CstClColor>,24(sp)
  for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes
    13a2:	|               clr.l 20(sp)
    13a6:	|           /-- bra.s 13d8 <CstDisplayBackDrop+0x228>
    *tmp++;
    13a8:	|        /--|-> move.l 24(sp),d0
    13ac:	|        |  |   move.l d0,d1
    13ae:	|        |  |   addq.l #2,d1
    13b0:	|        |  |   move.l d1,24(sp)
    *tmp++ = *colorpos++;
    13b4:	|        |  |   move.l 28(sp),d1
    13b8:	|        |  |   move.l d1,d2
    13ba:	|        |  |   addq.l #2,d2
    13bc:	|        |  |   move.l d2,28(sp)
    13c0:	|        |  |   move.l 24(sp),d0
    13c4:	|        |  |   move.l d0,d2
    13c6:	|        |  |   addq.l #2,d2
    13c8:	|        |  |   move.l d2,24(sp)
    13cc:	|        |  |   movea.l d1,a0
    13ce:	|        |  |   move.w (a0),d1
    13d0:	|        |  |   movea.l d0,a0
    13d2:	|        |  |   move.w d1,(a0)
  for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes
    13d4:	|        |  |   addq.l #1,20(sp)
    13d8:	|        |  \-> moveq #31,d0
    13da:	|        |      cmp.l 20(sp),d0
    13de:	|        \----- bge.s 13a8 <CstDisplayBackDrop+0x1f8>
    13e0:	|           /-- bra.s 13e4 <CstDisplayBackDrop+0x234>
    return;
    13e2:	\-----------|-> nop
  }
}
    13e4:	            \-> move.l (sp)+,d2
    13e6:	                movea.l (sp)+,a6
    13e8:	                lea 40(sp),sp
    13ec:	                rts

000013ee <CstDisplayCursor>:

void CstDisplayCursor(UWORD x, UWORD y, UWORD height, UBYTE *spritedata)
{
    13ee:	lea -20(sp),sp
    13f2:	movea.l 24(sp),a0
    13f6:	move.l 28(sp),d1
    13fa:	move.l 32(sp),d0
    13fe:	movea.w a0,a0
    1400:	move.w a0,4(sp)
    1404:	move.w d1,d1
    1406:	move.w d1,2(sp)
    140a:	move.w d0,d0
    140c:	move.w d0,(sp)
  spritedata[0] = (UBYTE) (y & 0xff); //Low 8 Bits of y
    140e:	move.w 2(sp),d0
    1412:	movea.l 36(sp),a0
    1416:	move.b d0,(a0)
  spritedata[1] = (UBYTE) (x >> 1); //High 8 Bits of x
    1418:	move.w 4(sp),d0
    141c:	lsr.w #1,d0
    141e:	movea.l 36(sp),a0
    1422:	addq.l #1,a0
    1424:	move.l d0,d0
    1426:	move.b d0,(a0)
  spritedata[2] = (UBYTE) (y+height & 0xff); //Sprite Stop Low 8 Bits
    1428:	move.w 2(sp),d1
    142c:	move.w (sp),d0
    142e:	movea.l 36(sp),a0
    1432:	addq.l #2,a0
    1434:	add.b d1,d0
    1436:	move.b d0,(a0)

  UWORD lowbitx = x & 0x1;
    1438:	move.w 4(sp),d0
    143c:	andi.w #1,d0
    1440:	move.w d0,18(sp)
  UWORD vstophighbit = ((y+height) & 0x100) >> 7;
    1444:	move.w 2(sp),d0
    1448:	add.w (sp),d0
    144a:	move.w d0,d0
    144c:	andi.l #65535,d0
    1452:	asr.l #7,d0
    1454:	move.l d0,d0
    1456:	move.w d0,d1
    1458:	andi.w #2,d1
    145c:	move.w d1,16(sp)
  UWORD vstarthighbit = (y & 0x100) >> 6;
    1460:	moveq #0,d0
    1462:	move.w 2(sp),d0
    1466:	asr.l #6,d0
    1468:	move.l d0,d0
    146a:	move.w d0,d1
    146c:	andi.w #4,d1
    1470:	move.w d1,14(sp)

  spritedata[3] = lowbitx + vstophighbit + vstarthighbit; //Low Bit X, Sprite Stop High Bit
    1474:	move.w 18(sp),d1
    1478:	move.w 16(sp),d0
    147c:	add.b d0,d1
    147e:	move.w 14(sp),d0
    1482:	movea.l 36(sp),a0
    1486:	addq.l #3,a0
    1488:	add.b d1,d0
    148a:	move.b d0,(a0)

  ULONG ptr = (ULONG) spritedata; 
    148c:	move.l 36(sp),10(sp)
  UWORD loptr = (UWORD) ptr & 0xffff;
    1492:	move.w 12(sp),8(sp)
  UWORD hiptr = ptr >> 16;
    1498:	move.l 10(sp),d0
    149c:	clr.w d0
    149e:	swap d0
    14a0:	move.w d0,6(sp)

  CstClCursor[1] = hiptr;
    14a4:	move.l 1a6f4 <CstClCursor>,d0
    14aa:	movea.l d0,a0
    14ac:	addq.l #2,a0
    14ae:	move.w 6(sp),(a0)
  CstClCursor[3] = loptr;
    14b2:	move.l 1a6f4 <CstClCursor>,d0
    14b8:	movea.l d0,a0
    14ba:	addq.l #6,a0
    14bc:	move.w 8(sp),(a0)

}
    14c0:	nop
    14c2:	lea 20(sp),sp
    14c6:	rts

000014c8 <CstDrawBackdrop>:

void CstDrawBackdrop() {  
  if(CstApplyBackDropCounter > 0) 
    14c8:	    move.w 1a6d2 <CstApplyBackDropCounter>,d0
    14ce:	/-- beq.s 14e4 <CstDrawBackdrop+0x1c>
  {
    CstDisplayBackDrop();
    14d0:	|   jsr 11b0 <CstDisplayBackDrop>
    CstApplyBackDropCounter--;
    14d6:	|   move.w 1a6d2 <CstApplyBackDropCounter>,d0
    14dc:	|   subq.w #1,d0
    14de:	|   move.w d0,1a6d2 <CstApplyBackDropCounter>
  }    
}
    14e4:	\-> nop
    14e6:	    rts

000014e8 <CstDrawZBuffer>:

__attribute__((optimize("Ofast"))) 
UBYTE *CstDrawZBuffer( struct sprite *sprite, struct zBufferData *zbuffer, WORD x, WORD y) 
{
    14e8:	                                                                                     lea -20(sp),sp
    14ec:	                                                                                     movem.l d2-d7/a2-a6,-(sp)
    14f0:	                                                                                     movea.l 68(sp),a3
    14f4:	                                                                                     movea.l 72(sp),a2
    14f8:	                                                                                     move.l 76(sp),d2
    14fc:	                                                                                     movea.l 80(sp),a4
    1500:	                                                                                     move.w d2,48(sp)
    1504:	                                                                                     move.w a4,50(sp)
  volatile struct Custom *custom = (struct Custom*)0xdff000;
  //In Case nothing needs to be done return sprite mask without changes
  UBYTE *returnvalue = AllocVec( sprite->width/8*sprite->height, MEMF_CHIP); 
    1508:	                                                                                     move.l (a3),d0
    150a:	   /-------------------------------------------------------------------------------- bmi.w 1a22 <CstDrawZBuffer+0x53a>
    150e:	   |                                                                                 asr.l #3,d0
    1510:	   |                                                                                 lea 179c8 <__mulsi3>,a5
    1516:	   |                                                                                 move.l 4(a3),-(sp)
    151a:	   |                                                                                 move.l d0,-(sp)
    151c:	   |                                                                                 jsr (a5)
    151e:	   |                                                                                 addq.l #8,sp
    1520:	   |                                                                                 lea 1a7a4 <SysBase>,a0
    1526:	   |                                                                                 movea.l (a0),a6
    1528:	   |                                                                                 moveq #2,d1
    152a:	   |                                                                                 jsr -684(a6)
    152e:	   |                                                                                 move.l d0,52(sp)
  UBYTE *tmpbuffer = AllocVec( (sprite->width/8+2)*sprite->height, MEMF_CHIP);               
    1532:	   |                                                                                 move.l (a3),d0
    1534:	/--|-------------------------------------------------------------------------------- bmi.w 1a1c <CstDrawZBuffer+0x534>
    1538:	|  |  /----------------------------------------------------------------------------> asr.l #3,d0
    153a:	|  |  |                                                                              move.l 4(a3),-(sp)
    153e:	|  |  |                                                                              movea.l d0,a0
    1540:	|  |  |                                                                              pea 2(a0)
    1544:	|  |  |                                                                              jsr (a5)
    1546:	|  |  |                                                                              addq.l #8,sp
    1548:	|  |  |                                                                              lea 1a7a4 <SysBase>,a0
    154e:	|  |  |                                                                              movea.l (a0),a6
    1550:	|  |  |                                                                              moveq #2,d1
    1552:	|  |  |                                                                              jsr -684(a6)
    1556:	|  |  |                                                                              move.l d0,56(sp)
  WORD zbufferset = 0;

  #ifdef EMULATOR
    debug_register_bitmap(returnvalue, "SpriteMask", sprite->width, sprite->height, 1, 0);
    155a:	|  |  |                                                                              clr.l -(sp)
    155c:	|  |  |                                                                              pea 1 <_start+0x1>
    1560:	|  |  |                                                                              movea.w 6(a3),a0
    1564:	|  |  |                                                                              move.l a0,-(sp)
    1566:	|  |  |                                                                              movea.w 2(a3),a0
    156a:	|  |  |                                                                              move.l a0,-(sp)
    156c:	|  |  |                                                                              pea 17c43 <PutChar+0x165>
    1572:	|  |  |                                                                              move.l 72(sp),-(sp)
    1576:	|  |  |                                                                              lea 17124 <debug_register_bitmap>,a6
    157c:	|  |  |                                                                              jsr (a6)
    debug_register_bitmap(tmpbuffer, "tmbpuffer", sprite->width+16, sprite->height, 1, 0);
    157e:	|  |  |                                                                              clr.l -(sp)
    1580:	|  |  |                                                                              pea 1 <_start+0x1>
    1584:	|  |  |                                                                              movea.w 6(a3),a0
    1588:	|  |  |                                                                              move.l a0,-(sp)
    158a:	|  |  |                                                                              move.w 2(a3),d0
    158e:	|  |  |                                                                              addi.w #16,d0
    1592:	|  |  |                                                                              movea.w d0,a0
    1594:	|  |  |                                                                              move.l a0,-(sp)
    1596:	|  |  |                                                                              pea 17c4e <PutChar+0x170>
    159c:	|  |  |                                                                              move.l 100(sp),-(sp)
    15a0:	|  |  |                                                                              jsr (a6)
  #endif    

  while(zbuffer) 
    15a2:	|  |  |                                                                              lea 48(sp),sp
    15a6:	|  |  |                                                                              cmpa.w #0,a2
    15aa:	|  |  |  /-------------------------------------------------------------------------- beq.w 1a50 <CstDrawZBuffer+0x568>
  {              
    WORD spritex1oncanvas = x;
    UWORD spritex2oncanvas = spritex1oncanvas+sprite->width;
    15ae:	|  |  |  |                                                                           move.w d2,46(sp)
    15b2:	|  |  |  |                                                                           move.l (a3),d2
    WORD spritey1oncanvas = y;
    UWORD spritey2oncanvas = spritey1oncanvas + sprite->height;
    15b4:	|  |  |  |                                                                           movea.l 4(a3),a6
  WORD zbufferset = 0;
    15b8:	|  |  |  |                                                                           clr.w d6
          else
          {       
            //xdiffbyte += -2;      
            bltapt = zbuffer->bitplane + xdiffbyte;  
            WaitBlit();         
            custom->bltdpt = tmpbuffer + 2;       
    15ba:	|  |  |  |                                                                           move.l 56(sp),d0
    15be:	|  |  |  |                                                                           addq.l #2,d0
    15c0:	|  |  |  |                                                                           move.l d0,60(sp)
    WORD zbufferx1oncanvas = zbuffer->topx;
    15c4:	|  |  |  |                                /----------------------------------------> move.l 8(a2),d5
    WORD zbufferx2oncanvas = zbufferx1oncanvas + zbuffer->width;
    15c8:	|  |  |  |                                |                                          move.l (a2),d0
    WORD zbuffery1oncanvas = zbuffer->topy;
    15ca:	|  |  |  |                                |                                          move.l 12(a2),d7
    WORD zbuffery2oncanvas = zbuffery1oncanvas + zbuffer->height;
    15ce:	|  |  |  |                                |                                          move.l 4(a2),d4
    UWORD spritey2oncanvas = spritey1oncanvas + sprite->height;
    15d2:	|  |  |  |                                |                                          move.w a4,d3
    15d4:	|  |  |  |                                |                                          add.w a6,d3
    if(spritey2oncanvas < zbuffer->yz) 
    15d6:	|  |  |  |                                |                                          andi.l #65535,d3
    15dc:	|  |  |  |                                |                                          cmp.l 16(a2),d3
    15e0:	|  |  |  |                       /--------|----------------------------------------- bge.w 1754 <CstDrawZBuffer+0x26c>
    WORD zbufferx2oncanvas = zbufferx1oncanvas + zbuffer->width;
    15e4:	|  |  |  |                       |        |                                          add.w d5,d0
    WORD zbuffery2oncanvas = zbuffery1oncanvas + zbuffer->height;
    15e6:	|  |  |  |                       |        |                                          add.w d7,d4
      if(spritex1oncanvas <= zbufferx1oncanvas && spritex2oncanvas > zbufferx1oncanvas)
    15e8:	|  |  |  |                       |        |                                          cmp.w 48(sp),d5
    15ec:	|  |  |  |                       |     /--|----------------------------------------- bge.w 18d8 <CstDrawZBuffer+0x3f0>
      else if(spritex1oncanvas > zbufferx1oncanvas && spritex1oncanvas < zbufferx2oncanvas)
    15f0:	|  |  |  |                       |     |  |                                          cmp.w 48(sp),d0
    15f4:	|  |  |  |  /--------------------|-----|--|----------------------------------------- ble.w 178c <CstDrawZBuffer+0x2a4>
        if(spritey1oncanvas <= zbuffery1oncanvas && spritey2oncanvas > zbuffery1oncanvas)
    15f8:	|  |  |  |  |                    |     |  |                                          move.w 50(sp),d6
    15fc:	|  |  |  |  |                    |     |  |                                          cmp.w d6,d7
    15fe:	|  |  |  |  |  /-----------------|-----|--|----------------------------------------- blt.w 19c4 <CstDrawZBuffer+0x4dc>
    1602:	|  |  |  |  |  |                 |     |  |                                          movea.w d7,a0
      if( (zbufferfromright || zbufferfromleft) && (zbufferfrombottom || zbufferfromtop))
    1604:	|  |  |  |  |  |                 |     |  |                                          cmpa.l d3,a0
    1606:	|  |  |  |  +--|-----------------|-----|--|----------------------------------------- bge.w 178c <CstDrawZBuffer+0x2a4>
          xdiff = spritex1oncanvas - zbufferx1oncanvas;
    160a:	|  |  |  |  |  |                 |     |  |                                          move.w 46(sp),d6
    160e:	|  |  |  |  |  |                 |     |  |                                          sub.w d5,d6
          xdiffrest = (xdiff - xdiffbyte * 8);    
    1610:	|  |  |  |  |  |                 |     |  |                                          move.w d6,d5
    1612:	|  |  |  |  |  |                 |     |  |                                          andi.w #15,d5
          bytewidth = (sprite->width/16)*2;
    1616:	|  |  |  |  |  |                 |     |  |                                          tst.l d2
    1618:	|  |  |  |  |  |  /--------------|-----|--|----------------------------------------- blt.w 179c <CstDrawZBuffer+0x2b4>
    161c:	|  |  |  |  |  |  |  /-----------|-----|--|----------------------------------------> asr.l #4,d2
    161e:	|  |  |  |  |  |  |  |           |     |  |                                          add.w d2,d2
          custom->bltafwm = 0xffff;
    1620:	|  |  |  |  |  |  |  |           |     |  |                                          move.w #-1,dff044 <gcc8_c_support.c.1fed348d+0xdb3d86>
          custom->bltalwm = 0xffff;                      
    1628:	|  |  |  |  |  |  |  |           |     |  |                                          move.w #-1,dff046 <gcc8_c_support.c.1fed348d+0xdb3d88>
          custom->bltcon1 = 0;          
    1630:	|  |  |  |  |  |  |  |           |     |  |                                          move.w #0,dff042 <gcc8_c_support.c.1fed348d+0xdb3d84>
            WaitBlit();   
    1638:	|  |  |  |  |  |  |  |           |     |  |                                          lea 1a7b0 <GfxBase>,a0
    163e:	|  |  |  |  |  |  |  |           |     |  |                                          movea.l (a0),a6
          xdiffbyte = (xdiff / 16) * 2;          
    1640:	|  |  |  |  |  |  |  |           |     |  |                                          lsr.w #4,d6
    1642:	|  |  |  |  |  |  |  |           |     |  |                                          add.w d6,d6
            bltapt = zbuffer->bitplane + xdiffbyte;  
    1644:	|  |  |  |  |  |  |  |           |     |  |                                          andi.l #65535,d6
    164a:	|  |  |  |  |  |  |  |           |     |  |                                          add.l 20(a2),d6
          if (xdiffrest) {
    164e:	|  |  |  |  |  |  |  |           |     |  |                                          tst.w d5
    1650:	|  |  |  |  |  |  |  |           |     |  |  /-------------------------------------- beq.w 17d8 <CstDrawZBuffer+0x2f0>
            bytewidth += 2; 
    1654:	|  |  |  |  |  |  |  |           |     |  |  |     /-------------------------------> addq.w #2,d2
            WaitBlit();   
    1656:	|  |  |  |  |  |  |  |           |     |  |  |     |                                 jsr -228(a6)
            custom->bltdpt = tmpbuffer;                
    165a:	|  |  |  |  |  |  |  |           |     |  |  |     |                                 move.l 56(sp),dff054 <gcc8_c_support.c.1fed348d+0xdb3d96>
            custom->bltcon0 = (16 - xdiffrest) * 4096 + 0x9f0;              
    1662:	|  |  |  |  |  |  |  |           |     |  |  |     |                                 moveq #12,d0
    1664:	|  |  |  |  |  |  |  |           |     |  |  |     |                                 lsl.w d0,d5
    1666:	|  |  |  |  |  |  |  |           |     |  |  |     |                                 move.w #2544,d0
    166a:	|  |  |  |  |  |  |  |           |     |  |  |     |                                 sub.w d5,d0
    166c:	|  |  |  |  |  |  |  |           |     |  |  |     |                                 move.w d0,dff040 <gcc8_c_support.c.1fed348d+0xdb3d82>
            custom->bltamod = zbuffer->width/8 - bytewidth;
    1672:	|  |  |  |  |  |  |  |           |     |  |  |     |                                 move.l (a2),d0
    1674:	|  |  |  |  |  |  |  |           |     |  |  |     |                                 move.l d0,d1
    1676:	|  |  |  |  |  |  |  |  /--------|-----|--|--|-----|-------------------------------- bmi.w 197a <CstDrawZBuffer+0x492>
    167a:	|  |  |  |  |  |  |  |  |     /--|-----|--|--|-----|-------------------------------> asr.l #3,d1
    167c:	|  |  |  |  |  |  |  |  |     |  |     |  |  |     |                                 sub.w d2,d1
    167e:	|  |  |  |  |  |  |  |  |     |  |     |  |  |     |                                 move.w d1,dff064 <gcc8_c_support.c.1fed348d+0xdb3da6>
            custom->bltdmod = 0;                                                            
    1684:	|  |  |  |  |  |  |  |  |     |  |     |  |  |     |                                 move.w #0,dff066 <gcc8_c_support.c.1fed348d+0xdb3da8>
        } 
        
        //Get Distance R
        //zbuffer ------------x1+++++++++++++++++++x2-----------------*/
        /*sprite--------------RRRRRRRRx1++++++++++?????????------------*/    
        UWORD ydiff = spritey1oncanvas - zbuffery1oncanvas;
    168c:	|  |  |  |  |  |  |  |  |  /--|--|-----|--|--|-----|-------------------------------> move.w a4,d1
    168e:	|  |  |  |  |  |  |  |  |  |  |  |     |  |  |     |                                 sub.w d7,d1

        UWORD height;
        if( zbuffery2oncanvas > spritey2oncanvas) 
    1690:	|  |  |  |  |  |  |  |  |  |  |  |     |  |  |     |                                 movea.w d4,a0
    1692:	|  |  |  |  |  |  |  |  |  |  |  |     |  |  |     |                                 cmpa.l d3,a0
    1694:	|  |  |  |  |  |  |  |  |  |  |  |     |  |  |     |     /-------------------------- ble.w 1812 <CstDrawZBuffer+0x32a>
          height = sprite->height;
    1698:	|  |  |  |  |  |  |  |  |  |  |  |     |  |  |     |     |           /-------------> move.l 4(a3),d4
        else
          height = zbuffery2oncanvas - spritey1oncanvas;

        custom->bltapt = bltapt + ydiff*zbuffer->width/8; 
    169c:	|  |  |  |  |  |  |  |  |  |  |  |     |  |  |     |     |           |               move.l d0,-(sp)
    169e:	|  |  |  |  |  |  |  |  |  |  |  |     |  |  |     |     |           |               move.w d1,-(sp)
    16a0:	|  |  |  |  |  |  |  |  |  |  |  |     |  |  |     |     |           |               clr.w -(sp)
    16a2:	|  |  |  |  |  |  |  |  |  |  |  |     |  |  |     |     |           |               jsr (a5)
    16a4:	|  |  |  |  |  |  |  |  |  |  |  |     |  |  |     |     |           |               addq.l #8,sp
    16a6:	|  |  |  |  |  |  |  |  |  |  |  |     |  |  |     |     |           |               tst.l d0
    16a8:	|  |  |  |  |  |  |  |  |  |  |  |     |  |  |     |     |  /--------|-------------- blt.w 1824 <CstDrawZBuffer+0x33c>
    16ac:	|  |  |  |  |  |  |  |  |  |  |  |     |  |  |     |     |  |        |     /-------> asr.l #3,d0
    16ae:	|  |  |  |  |  |  |  |  |  |  |  |     |  |  |     |     |  |        |     |         add.l d6,d0
    16b0:	|  |  |  |  |  |  |  |  |  |  |  |     |  |  |     |     |  |        |     |         move.l d0,dff050 <gcc8_c_support.c.1fed348d+0xdb3d92>
        UWORD bltsize =  height*64+bytewidth/2;          
    16b6:	|  |  |  |  |  |  |  |  |  |  |  |     |  |  |     |     |  |        |     |         lsl.w #6,d4
    16b8:	|  |  |  |  |  |  |  |  |  |  |  |     |  |  |     |     |  |        |     |         lsr.w #1,d2
        custom->bltsize = height*64+bytewidth/2;
    16ba:	|  |  |  |  |  |  |  |  |  |  |  |     |  |  |     |     |  |        |     |         add.w d2,d4
    16bc:	|  |  |  |  |  |  |  |  |  |  |  |     |  |  |     |     |  |        |     |         move.w d4,dff058 <gcc8_c_support.c.1fed348d+0xdb3d9a>
       
        WaitBlit();
    16c2:	|  |  |  |  |  |  |  |  |  |  |  |     |  |  |     |     |  |        |     |         lea 1a7b0 <GfxBase>,a0
    16c8:	|  |  |  |  |  |  |  |  |  |  |  |     |  |  |     |     |  |        |     |         movea.l (a0),a6
    16ca:	|  |  |  |  |  |  |  |  |  |  |  |     |  |  |     |     |  |        |     |         jsr -228(a6)

        custom->bltafwm = 0xffff;
    16ce:	|  |  |  |  |  |  |  |  |  |  |  |     |  |  |     |     |  |        |     |         move.w #-1,dff044 <gcc8_c_support.c.1fed348d+0xdb3d86>
        custom->bltalwm = 0xffff;
    16d6:	|  |  |  |  |  |  |  |  |  |  |  |     |  |  |     |     |  |        |     |         move.w #-1,dff046 <gcc8_c_support.c.1fed348d+0xdb3d88>
        custom->bltamod = 2;
    16de:	|  |  |  |  |  |  |  |  |  |  |  |     |  |  |     |     |  |        |     |         move.w #2,dff064 <gcc8_c_support.c.1fed348d+0xdb3da6>
        custom->bltbmod = 0;
    16e6:	|  |  |  |  |  |  |  |  |  |  |  |     |  |  |     |     |  |        |     |         move.w #0,dff062 <gcc8_c_support.c.1fed348d+0xdb3da4>
        custom->bltdmod = 0;
    16ee:	|  |  |  |  |  |  |  |  |  |  |  |     |  |  |     |     |  |        |     |         move.w #0,dff066 <gcc8_c_support.c.1fed348d+0xdb3da8>
        custom->bltcon0 = 0xd0c; //Copy A to D
    16f6:	|  |  |  |  |  |  |  |  |  |  |  |     |  |  |     |     |  |        |     |         move.w #3340,dff040 <gcc8_c_support.c.1fed348d+0xdb3d82>
        custom->bltcon1 = 0;        
    16fe:	|  |  |  |  |  |  |  |  |  |  |  |     |  |  |     |     |  |        |     |         move.w #0,dff042 <gcc8_c_support.c.1fed348d+0xdb3d84>

        custom->bltapt = (APTR) tmpbuffer + 2;
    1706:	|  |  |  |  |  |  |  |  |  |  |  |     |  |  |     |     |  |        |     |         move.l 60(sp),dff050 <gcc8_c_support.c.1fed348d+0xdb3d92>
        custom->bltbpt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    170e:	|  |  |  |  |  |  |  |  |  |  |  |     |  |  |     |     |  |        |     |         move.l (a3),d2
    1710:	|  |  |  |  |  |  |  |  |  |  |  |     |  |  |     |     |  |        |     |         movea.l 4(a3),a6
    1714:	|  |  |  |  |  |  |  |  |  |  |  |     |  |  |     |     |  |        |     |         move.l d2,d0
    1716:	|  |  |  |  |  |  |  |  |  |  |  |     |  |  |     |  /--|--|--------|-----|-------- bmi.w 1894 <CstDrawZBuffer+0x3ac>
    171a:	|  |  |  |  |  |  |  |  |  |  |  |     |  |  |     |  |  |  |     /--|-----|-------> asr.l #3,d0
    171c:	|  |  |  |  |  |  |  |  |  |  |  |     |  |  |     |  |  |  |     |  |     |         move.l a6,-(sp)
    171e:	|  |  |  |  |  |  |  |  |  |  |  |     |  |  |     |  |  |  |     |  |     |         move.l d0,-(sp)
    1720:	|  |  |  |  |  |  |  |  |  |  |  |     |  |  |     |  |  |  |     |  |     |         jsr (a5)
    1722:	|  |  |  |  |  |  |  |  |  |  |  |     |  |  |     |  |  |  |     |  |     |         addq.l #8,sp
    1724:	|  |  |  |  |  |  |  |  |  |  |  |     |  |  |     |  |  |  |     |  |     |         move.l d0,d1
    1726:	|  |  |  |  |  |  |  |  |  |  |  |     |  |  |     |  |  |  |     |  |     |         add.l d0,d1
    1728:	|  |  |  |  |  |  |  |  |  |  |  |     |  |  |     |  |  |  |     |  |     |         add.l d1,d1
    172a:	|  |  |  |  |  |  |  |  |  |  |  |     |  |  |     |  |  |  |     |  |     |         add.l d0,d1
    172c:	|  |  |  |  |  |  |  |  |  |  |  |     |  |  |     |  |  |  |     |  |     |         add.l 24(a3),d1
    1730:	|  |  |  |  |  |  |  |  |  |  |  |     |  |  |     |  |  |  |     |  |     |         move.l d1,dff04c <gcc8_c_support.c.1fed348d+0xdb3d8e>
        custom->bltdpt = (APTR) returnvalue;
    1736:	|  |  |  |  |  |  |  |  |  |  |  |     |  |  |     |  |  |  |     |  |     |         move.l 52(sp),dff054 <gcc8_c_support.c.1fed348d+0xdb3d96>
        custom->bltsize = (sprite->height<<6)+sprite->width/16;  
    173e:	|  |  |  |  |  |  |  |  |  |  |  |     |  |  |     |  |  |  |     |  |     |         move.w a6,d1
    1740:	|  |  |  |  |  |  |  |  |  |  |  |     |  |  |     |  |  |  |     |  |     |         lsl.w #6,d1
    1742:	|  |  |  |  |  |  |  |  |  |  |  |     |  |  |     |  |  |  |     |  |     |         move.l d2,d0
    1744:	|  |  |  |  |  |  |  |  |  |  |  |     |  |  |  /--|--|--|--|-----|--|-----|-------- bmi.w 18c4 <CstDrawZBuffer+0x3dc>
    1748:	|  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  /--|--|-----|-------> asr.l #4,d0
    174a:	|  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |     |         add.w d1,d0
    174c:	|  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |     |         move.w d0,dff058 <gcc8_c_support.c.1fed348d+0xdb3d9a>
      zbufferset = 1;
    1752:	|  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |     |         moveq #1,d6

      }
    }
    zbuffer = zbuffer->nextPanel;
    1754:	|  |  |  |  |  |  |  |  |  |  |  >-----|--|--|--|--|--|--|--|--|--|--|-----|-------> movea.l 24(a2),a2
  while(zbuffer) 
    1758:	|  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |     |         cmpa.w #0,a2
    175c:	|  |  |  |  |  |  |  |  |  |  |  |     |  +--|--|--|--|--|--|--|--|--|-----|-------- bne.w 15c4 <CstDrawZBuffer+0xdc>
  }
  FreeVec( tmpbuffer);
    1760:	|  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |     |     /-> lea 1a7a4 <SysBase>,a0
    1766:	|  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |     |     |   movea.l (a0),a6
    1768:	|  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |     |     |   movea.l 56(sp),a1
    176c:	|  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |     |     |   jsr -690(a6)
  if(zbufferset == 0)
    1770:	|  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |     |     |   tst.w d6
    1772:	|  |  |  |  |  |  |  |  |  |  |  |  /--|--|--|--|--|--|--|--|--|--|--|-----|-----|-- beq.w 1a60 <CstDrawZBuffer+0x578>

  }

  return returnvalue;

}
    1776:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |   move.l 52(sp),d0
    177a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |   movem.l (sp)+,d2-d7/a2-a6
    177e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |   lea 20(sp),sp
    1782:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |   rts
        if(spritey1oncanvas <= zbuffery1oncanvas && spritey2oncanvas > zbuffery1oncanvas)
    1784:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  /--|-> movea.w d7,a0
      if( (zbufferfromright || zbufferfromleft) && (zbufferfrombottom || zbufferfromtop))
    1786:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |   cmpa.l d3,a0
    1788:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  /--|--|--|-- blt.w 18fc <CstDrawZBuffer+0x414>
      zbufferset = 1;
    178c:	|  |  |  |  >--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|-> moveq #1,d6
    zbuffer = zbuffer->nextPanel;
    178e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   movea.l 24(a2),a2
  while(zbuffer) 
    1792:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   cmpa.w #0,a2
    1796:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  \--|--|--|--|--|--|--|--|--|--|--|--|--|-- bne.w 15c4 <CstDrawZBuffer+0xdc>
    179a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  \-- bra.s 1760 <CstDrawZBuffer+0x278>
          bytewidth = (sprite->width/16)*2;
    179c:	|  |  |  |  |  |  >--|--|--|--|--|--|--|-----|--|--|--|--|--|--|--|--|--|--|--|----> moveq #15,d0
    179e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |      add.l d0,d2
    17a0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |      asr.l #4,d2
    17a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |      add.w d2,d2
          custom->bltafwm = 0xffff;
    17a4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |      move.w #-1,dff044 <gcc8_c_support.c.1fed348d+0xdb3d86>
          custom->bltalwm = 0xffff;                      
    17ac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |      move.w #-1,dff046 <gcc8_c_support.c.1fed348d+0xdb3d88>
          custom->bltcon1 = 0;          
    17b4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |      move.w #0,dff042 <gcc8_c_support.c.1fed348d+0xdb3d84>
            WaitBlit();   
    17bc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |      lea 1a7b0 <GfxBase>,a0
    17c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |      movea.l (a0),a6
          xdiffbyte = (xdiff / 16) * 2;          
    17c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |      lsr.w #4,d6
    17c6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |      add.w d6,d6
            bltapt = zbuffer->bitplane + xdiffbyte;  
    17c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |      andi.l #65535,d6
    17ce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |      add.l 20(a2),d6
          if (xdiffrest) {
    17d2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |      tst.w d5
    17d4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  \--|--|--|--|--|--|--|--|--|----- bne.w 1654 <CstDrawZBuffer+0x16c>
            WaitBlit();         
    17d8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     \--|-----|--|--|--|--|--|--|--|--|----> jsr -228(a6)
            custom->bltdpt = tmpbuffer + 2;       
    17dc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |        |     |  |  |  |  |  |  |  |  |      move.l 60(sp),dff054 <gcc8_c_support.c.1fed348d+0xdb3d96>
            custom->bltcon0 = 4096 + 0x9f0;              
    17e4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |        |     |  |  |  |  |  |  |  |  |      move.w #6640,dff040 <gcc8_c_support.c.1fed348d+0xdb3d82>
            custom->bltamod = zbuffer->width/8 - bytewidth;
    17ec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |        |     |  |  |  |  |  |  |  |  |      move.l (a2),d0
    17ee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |        |     |  |  |  |  |  |  |  |  |      move.l d0,d1
    17f0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     /--|-----|--|--|--|--|--|--|--|--|----- bmi.w 1a04 <CstDrawZBuffer+0x51c>
    17f4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |  |  |  |  |  |  |  |  |      asr.l #3,d1
    17f6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |  |  |  |  |  |  |  |  |      sub.w d2,d1
    17f8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |  |  |  |  |  |  |  |  |      move.w d1,dff064 <gcc8_c_support.c.1fed348d+0xdb3da6>
            custom->bltdmod = 2;                                                            
    17fe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |  |  |  |  |  |  |  |  |      move.w #2,dff066 <gcc8_c_support.c.1fed348d+0xdb3da8>
        UWORD ydiff = spritey1oncanvas - zbuffery1oncanvas;
    1806:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  /--|--|--|--|--|--|--|--|--|----> move.w a4,d1
    1808:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |      sub.w d7,d1
        if( zbuffery2oncanvas > spritey2oncanvas) 
    180a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |      movea.w d4,a0
    180c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |      cmpa.l d3,a0
    180e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  \--|--|--|----- bgt.w 1698 <CstDrawZBuffer+0x1b0>
          height = zbuffery2oncanvas - spritey1oncanvas;
    1812:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  \--|--|--|-----|--|--|----> sub.w a4,d4
        custom->bltapt = bltapt + ydiff*zbuffer->width/8; 
    1814:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |     |  |  |     |  |  |      move.l d0,-(sp)
    1816:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |     |  |  |     |  |  |      move.w d1,-(sp)
    1818:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |     |  |  |     |  |  |      clr.w -(sp)
    181a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |     |  |  |     |  |  |      jsr (a5)
    181c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |     |  |  |     |  |  |      addq.l #8,sp
    181e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |     |  |  |     |  |  |      tst.l d0
    1820:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |     |  |  |     |  \--|----- bge.w 16ac <CstDrawZBuffer+0x1c4>
    1824:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |     \--|--|-----|-----|----> addq.l #7,d0
    1826:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |        |  |     |     |      asr.l #3,d0
    1828:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |        |  |     |     |      add.l d6,d0
    182a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |        |  |     |     |      move.l d0,dff050 <gcc8_c_support.c.1fed348d+0xdb3d92>
        UWORD bltsize =  height*64+bytewidth/2;          
    1830:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |        |  |     |     |      lsl.w #6,d4
    1832:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |        |  |     |     |      lsr.w #1,d2
        custom->bltsize = height*64+bytewidth/2;
    1834:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |        |  |     |     |      add.w d2,d4
    1836:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |        |  |     |     |      move.w d4,dff058 <gcc8_c_support.c.1fed348d+0xdb3d9a>
        WaitBlit();
    183c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |        |  |     |     |      lea 1a7b0 <GfxBase>,a0
    1842:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |        |  |     |     |      movea.l (a0),a6
    1844:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |        |  |     |     |      jsr -228(a6)
        custom->bltafwm = 0xffff;
    1848:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |        |  |     |     |      move.w #-1,dff044 <gcc8_c_support.c.1fed348d+0xdb3d86>
        custom->bltalwm = 0xffff;
    1850:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |        |  |     |     |      move.w #-1,dff046 <gcc8_c_support.c.1fed348d+0xdb3d88>
        custom->bltamod = 2;
    1858:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |        |  |     |     |      move.w #2,dff064 <gcc8_c_support.c.1fed348d+0xdb3da6>
        custom->bltbmod = 0;
    1860:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |        |  |     |     |      move.w #0,dff062 <gcc8_c_support.c.1fed348d+0xdb3da4>
        custom->bltdmod = 0;
    1868:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |        |  |     |     |      move.w #0,dff066 <gcc8_c_support.c.1fed348d+0xdb3da8>
        custom->bltcon0 = 0xd0c; //Copy A to D
    1870:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |        |  |     |     |      move.w #3340,dff040 <gcc8_c_support.c.1fed348d+0xdb3d82>
        custom->bltcon1 = 0;        
    1878:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |        |  |     |     |      move.w #0,dff042 <gcc8_c_support.c.1fed348d+0xdb3d84>
        custom->bltapt = (APTR) tmpbuffer + 2;
    1880:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |        |  |     |     |      move.l 60(sp),dff050 <gcc8_c_support.c.1fed348d+0xdb3d92>
        custom->bltbpt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    1888:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |        |  |     |     |      move.l (a3),d2
    188a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |        |  |     |     |      movea.l 4(a3),a6
    188e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |        |  |     |     |      move.l d2,d0
    1890:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |        |  \-----|-----|----- bpl.w 171a <CstDrawZBuffer+0x232>
    1894:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  \--------|--------|-----|----> addq.l #7,d0
    1896:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |           |        |     |      asr.l #3,d0
    1898:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |           |        |     |      move.l a6,-(sp)
    189a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |           |        |     |      move.l d0,-(sp)
    189c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |           |        |     |      jsr (a5)
    189e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |           |        |     |      addq.l #8,sp
    18a0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |           |        |     |      move.l d0,d1
    18a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |           |        |     |      add.l d0,d1
    18a4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |           |        |     |      add.l d1,d1
    18a6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |           |        |     |      add.l d0,d1
    18a8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |           |        |     |      add.l 24(a3),d1
    18ac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |           |        |     |      move.l d1,dff04c <gcc8_c_support.c.1fed348d+0xdb3d8e>
        custom->bltdpt = (APTR) returnvalue;
    18b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |           |        |     |      move.l 52(sp),dff054 <gcc8_c_support.c.1fed348d+0xdb3d96>
        custom->bltsize = (sprite->height<<6)+sprite->width/16;  
    18ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |           |        |     |      move.w a6,d1
    18bc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |           |        |     |      lsl.w #6,d1
    18be:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |           |        |     |      move.l d2,d0
    18c0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |           \--------|-----|----- bpl.w 1748 <CstDrawZBuffer+0x260>
    18c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |  \--|--------------------|-----|----> moveq #15,d0
    18c6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |                    |     |      add.l d2,d0
    18c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |                    |     |      asr.l #4,d0
    18ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |                    |     |      add.w d1,d0
    18cc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |                    |     |      move.w d0,dff058 <gcc8_c_support.c.1fed348d+0xdb3d9a>
      zbufferset = 1;
    18d2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |                    |     |      moveq #1,d6
    18d4:	|  |  |  |  |  |  |  |  |  |  |  \--|--|-----|-----|--------------------|-----|----- bra.w 1754 <CstDrawZBuffer+0x26c>
    UWORD spritex2oncanvas = spritex1oncanvas+sprite->width;
    18d8:	|  |  |  |  |  |  |  |  |  |  |     |  \-----|-----|--------------------|-----|----> move.w 46(sp),d1
    18dc:	|  |  |  |  |  |  |  |  |  |  |     |        |     |                    |     |      add.w d2,d1
      if(spritex1oncanvas <= zbufferx1oncanvas && spritex2oncanvas > zbufferx1oncanvas)
    18de:	|  |  |  |  |  |  |  |  |  |  |     |        |     |                    |     |      andi.l #65535,d1
    18e4:	|  |  |  |  |  |  |  |  |  |  |     |        |     |                    |     |      movea.w d5,a1
    18e6:	|  |  |  |  |  |  |  |  |  |  |     |        |     |                    |     |      cmpa.l d1,a1
    18e8:	|  |  |  |  +--|--|--|--|--|--|-----|--------|-----|--------------------|-----|----- bge.w 178c <CstDrawZBuffer+0x2a4>
        if(spritey1oncanvas <= zbuffery1oncanvas && spritey2oncanvas > zbuffery1oncanvas)
    18ec:	|  |  |  |  |  |  |  |  |  |  |     |        |     |                    |     |      move.w 50(sp),d6
    18f0:	|  |  |  |  |  |  |  |  |  |  |     |        |     |                    |     |      cmp.w d6,d7
    18f2:	|  |  |  |  |  |  |  |  |  |  |     |        |     |                    |     \----- bge.w 1784 <CstDrawZBuffer+0x29c>
      if( (zbufferfromright || zbufferfromleft) && (zbufferfrombottom || zbufferfromtop))
    18f6:	|  |  |  |  |  |  |  |  |  |  |     |        |     |                    |            cmp.w d6,d4
    18f8:	|  |  |  |  +--|--|--|--|--|--|-----|--------|-----|--------------------|----------- ble.w 178c <CstDrawZBuffer+0x2a4>
          xdiff = zbufferx1oncanvas - spritex1oncanvas;
    18fc:	|  |  |  |  |  |  |  |  |  |  |     |        |     |                    \----------> sub.w 46(sp),d5
          xdiffbyte = (xdiff / 16) * 2;          
    1900:	|  |  |  |  |  |  |  |  |  |  |     |        |     |                                 move.w d5,d6
    1902:	|  |  |  |  |  |  |  |  |  |  |     |        |     |                                 lsr.w #4,d6
    1904:	|  |  |  |  |  |  |  |  |  |  |     |        |     |                                 move.w d6,44(sp)
          xdiffrest = (xdiff - xdiffbyte * 8);       
    1908:	|  |  |  |  |  |  |  |  |  |  |     |        |     |                                 andi.w #15,d5
          bytewidth = (sprite->width/16)*2 + 2;
    190c:	|  |  |  |  |  |  |  |  |  |  |     |        |     |                                 tst.l d2
    190e:	|  |  |  |  |  |  |  |  |  |  |     |        |     |                       /-------- blt.w 1992 <CstDrawZBuffer+0x4aa>
    1912:	|  |  |  |  |  |  |  |  |  |  |     |        |     |                       |         asr.l #4,d2
    1914:	|  |  |  |  |  |  |  |  |  |  |     |        |     |                       |         addq.l #1,d2
    1916:	|  |  |  |  |  |  |  |  |  |  |     |        |     |                       |         add.w d2,d2
          if( zbufferx2oncanvas > spritex2oncanvas)    
    1918:	|  |  |  |  |  |  |  |  |  |  |     |        |     |                       |         movea.w d0,a0
    191a:	|  |  |  |  |  |  |  |  |  |  |     |        |     |                       |         cmp.l a0,d1
    191c:	|  |  |  |  |  |  |  |  |  |  |     |        |     |                    /--|-------- bge.w 19a4 <CstDrawZBuffer+0x4bc>
            WaitBlit();  
    1920:	|  |  |  |  |  |  |  |  |  |  |     |        |     |                    |  |  /----> lea 1a7b0 <GfxBase>,a0
    1926:	|  |  |  |  |  |  |  |  |  |  |     |        |     |                    |  |  |      movea.l (a0),a6
    1928:	|  |  |  |  |  |  |  |  |  |  |     |        |     |                    |  |  |      jsr -228(a6)
            custom->bltafwm = 0xffff;
    192c:	|  |  |  |  |  |  |  |  |  |  |     |        |     |                    |  |  |      move.w #-1,dff044 <gcc8_c_support.c.1fed348d+0xdb3d86>
            custom->bltalwm = 0xffff;          
    1934:	|  |  |  |  |  |  |  |  |  |  |     |        |     |                    |  |  |      move.w #-1,dff046 <gcc8_c_support.c.1fed348d+0xdb3d88>
            custom->bltdpt = tmpbuffer;        
    193c:	|  |  |  |  |  |  |  |  |  |  |     |        |     |                    |  |  |      move.l 56(sp),dff054 <gcc8_c_support.c.1fed348d+0xdb3d96>
            custom->bltcon1 = 0;               
    1944:	|  |  |  |  |  |  |  |  |  |  |     |        |     |                    |  |  |      move.w #0,dff042 <gcc8_c_support.c.1fed348d+0xdb3d84>
              xdiffbyte += 2;                 
    194c:	|  |  |  |  |  |  |  |  |  |  |     |        |     |                    |  |  |      move.w 44(sp),d6
    1950:	|  |  |  |  |  |  |  |  |  |  |     |        |     |                    |  |  |      addq.w #1,d6
    1952:	|  |  |  |  |  |  |  |  |  |  |     |        |     |                    |  |  |      add.w d6,d6
              bltapt = zbuffer->bitplane - xdiffbyte;          
    1954:	|  |  |  |  |  |  |  |  |  |  |     |        |     |                    |  |  |      andi.l #65535,d6
    195a:	|  |  |  |  |  |  |  |  |  |  |     |        |     |                    |  |  |      neg.l d6
    195c:	|  |  |  |  |  |  |  |  |  |  |     |        |     |                    |  |  |      add.l 20(a2),d6
            if (xdiffrest) {
    1960:	|  |  |  |  |  |  |  |  |  |  |     |        |     |                    |  |  |      tst.w d5
    1962:	|  |  |  |  |  |  |  |  |  |  |     |        |     |                    |  |  |  /-- beq.s 19e0 <CstDrawZBuffer+0x4f8>
              custom->bltcon0 = xdiffrest * 4096 + 0x9f0;              
    1964:	|  |  |  |  |  |  |  |  |  |  |     |        |     |                    |  |  |  |   moveq #12,d0
    1966:	|  |  |  |  |  |  |  |  |  |  |     |        |     |                    |  |  |  |   lsl.w d0,d5
    1968:	|  |  |  |  |  |  |  |  |  |  |     |        |     |                    |  |  |  |   addi.w #2544,d5
    196c:	|  |  |  |  |  |  |  |  |  |  |     |        |     |                    |  |  |  |   move.w d5,dff040 <gcc8_c_support.c.1fed348d+0xdb3d82>
              custom->bltamod = zbuffer->width/8 - bytewidth;
    1972:	|  |  |  |  |  |  |  |  |  |  |     |        |     |                    |  |  |  |   move.l (a2),d0
    1974:	|  |  |  |  |  |  |  |  |  |  |     |        |     |                    |  |  |  |   move.l d0,d1
    1976:	|  |  |  |  |  |  |  |  |  |  \-----|--------|-----|--------------------|--|--|--|-- bpl.w 167a <CstDrawZBuffer+0x192>
            custom->bltamod = zbuffer->width/8 - bytewidth;
    197a:	|  |  |  |  |  |  |  |  >--|--------|--------|-----|--------------------|--|--|--|-> addq.l #7,d1
    197c:	|  |  |  |  |  |  |  |  |  |        |        |     |                    |  |  |  |   asr.l #3,d1
    197e:	|  |  |  |  |  |  |  |  |  |        |        |     |                    |  |  |  |   sub.w d2,d1
    1980:	|  |  |  |  |  |  |  |  |  |        |        |     |                    |  |  |  |   move.w d1,dff064 <gcc8_c_support.c.1fed348d+0xdb3da6>
            custom->bltdmod = 0;                                                            
    1986:	|  |  |  |  |  |  |  |  |  |        |        |     |                    |  |  |  |   move.w #0,dff066 <gcc8_c_support.c.1fed348d+0xdb3da8>
    198e:	|  |  |  |  |  |  |  |  |  +--------|--------|-----|--------------------|--|--|--|-- bra.w 168c <CstDrawZBuffer+0x1a4>
          bytewidth = (sprite->width/16)*2 + 2;
    1992:	|  |  |  |  |  |  |  |  |  |        |        |     |                    |  \--|--|-> moveq #15,d6
    1994:	|  |  |  |  |  |  |  |  |  |        |        |     |                    |     |  |   add.l d6,d2
    1996:	|  |  |  |  |  |  |  |  |  |        |        |     |                    |     |  |   asr.l #4,d2
    1998:	|  |  |  |  |  |  |  |  |  |        |        |     |                    |     |  |   addq.l #1,d2
    199a:	|  |  |  |  |  |  |  |  |  |        |        |     |                    |     |  |   add.w d2,d2
          if( zbufferx2oncanvas > spritex2oncanvas)    
    199c:	|  |  |  |  |  |  |  |  |  |        |        |     |                    |     |  |   movea.w d0,a0
    199e:	|  |  |  |  |  |  |  |  |  |        |        |     |                    |     |  |   cmp.l a0,d1
    19a0:	|  |  |  |  |  |  |  |  |  |        |        |     |                    |     \--|-- blt.w 1920 <CstDrawZBuffer+0x438>
              KPrintF("Cstdrawzbuffer: Current version onl supports zbuffer size equal to screen size");
    19a4:	|  |  |  |  |  |  |  |  |  |        |        |     |                    \--------|-> pea 17c58 <PutChar+0x17a>
    19aa:	|  |  |  |  |  |  |  |  |  |        |        |     |                             |   jsr 1703c <KPrintF>
              return FALSE;
    19b0:	|  |  |  |  |  |  |  |  |  |        |        |     |                             |   addq.l #4,sp
    19b2:	|  |  |  |  |  |  |  |  |  |        |        |     |                             |   clr.l 52(sp)
}
    19b6:	|  |  |  |  |  |  |  |  |  |        |        |     |                             |   move.l 52(sp),d0
    19ba:	|  |  |  |  |  |  |  |  |  |        |        |     |                             |   movem.l (sp)+,d2-d7/a2-a6
    19be:	|  |  |  |  |  |  |  |  |  |        |        |     |                             |   lea 20(sp),sp
    19c2:	|  |  |  |  |  |  |  |  |  |        |        |     |                             |   rts
      if( (zbufferfromright || zbufferfromleft) && (zbufferfrombottom || zbufferfromtop))
    19c4:	|  |  |  |  |  \--|--|--|--|--------|--------|-----|-----------------------------|-> cmp.w d6,d4
    19c6:	|  |  |  |  \-----|--|--|--|--------|--------|-----|-----------------------------|-- ble.w 178c <CstDrawZBuffer+0x2a4>
          xdiff = spritex1oncanvas - zbufferx1oncanvas;
    19ca:	|  |  |  |        |  |  |  |        |        |     |                             |   move.w 46(sp),d6
    19ce:	|  |  |  |        |  |  |  |        |        |     |                             |   sub.w d5,d6
          xdiffrest = (xdiff - xdiffbyte * 8);    
    19d0:	|  |  |  |        |  |  |  |        |        |     |                             |   move.w d6,d5
    19d2:	|  |  |  |        |  |  |  |        |        |     |                             |   andi.w #15,d5
          bytewidth = (sprite->width/16)*2;
    19d6:	|  |  |  |        |  |  |  |        |        |     |                             |   tst.l d2
    19d8:	|  |  |  |        |  \--|--|--------|--------|-----|-----------------------------|-- bge.w 161c <CstDrawZBuffer+0x134>
    19dc:	|  |  |  |        \-----|--|--------|--------|-----|-----------------------------|-- bra.w 179c <CstDrawZBuffer+0x2b4>
              custom->bltcon0 = 0x9f0;              
    19e0:	|  |  |  |              |  |        |        |     |                             \-> move.w #2544,dff040 <gcc8_c_support.c.1fed348d+0xdb3d82>
              custom->bltamod = zbuffer->width/8 - bytewidth;
    19e8:	|  |  |  |              |  |        |        |     |                                 move.l (a2),d0
    19ea:	|  |  |  |              |  |        |        |     |                                 move.l d0,d1
    19ec:	|  |  |  |              \--|--------|--------|-----|-------------------------------- bmi.s 197a <CstDrawZBuffer+0x492>
            custom->bltamod = zbuffer->width/8 - bytewidth;
    19ee:	|  |  |  |                 |        |        |     |                                 asr.l #3,d1
    19f0:	|  |  |  |                 |        |        |     |                                 sub.w d2,d1
    19f2:	|  |  |  |                 |        |        |     |                                 move.w d1,dff064 <gcc8_c_support.c.1fed348d+0xdb3da6>
            custom->bltdmod = 0;                                                            
    19f8:	|  |  |  |                 |        |        |     |                                 move.w #0,dff066 <gcc8_c_support.c.1fed348d+0xdb3da8>
    1a00:	|  |  |  |                 \--------|--------|-----|-------------------------------- bra.w 168c <CstDrawZBuffer+0x1a4>
            custom->bltamod = zbuffer->width/8 - bytewidth;
    1a04:	|  |  |  |                          |        \-----|-------------------------------> addq.l #7,d1
    1a06:	|  |  |  |                          |              |                                 asr.l #3,d1
    1a08:	|  |  |  |                          |              |                                 sub.w d2,d1
    1a0a:	|  |  |  |                          |              |                                 move.w d1,dff064 <gcc8_c_support.c.1fed348d+0xdb3da6>
            custom->bltdmod = 2;                                                            
    1a10:	|  |  |  |                          |              |                                 move.w #2,dff066 <gcc8_c_support.c.1fed348d+0xdb3da8>
    1a18:	|  |  |  |                          |              \-------------------------------- bra.w 1806 <CstDrawZBuffer+0x31e>
  UBYTE *tmpbuffer = AllocVec( (sprite->width/8+2)*sprite->height, MEMF_CHIP);               
    1a1c:	>--|--|--|--------------------------|----------------------------------------------> addq.l #7,d0
    1a1e:	|  |  +--|--------------------------|----------------------------------------------- bra.w 1538 <CstDrawZBuffer+0x50>
  UBYTE *returnvalue = AllocVec( sprite->width/8*sprite->height, MEMF_CHIP); 
    1a22:	|  \--|--|--------------------------|----------------------------------------------> addq.l #7,d0
    1a24:	|     |  |                          |                                                asr.l #3,d0
    1a26:	|     |  |                          |                                                lea 179c8 <__mulsi3>,a5
    1a2c:	|     |  |                          |                                                move.l 4(a3),-(sp)
    1a30:	|     |  |                          |                                                move.l d0,-(sp)
    1a32:	|     |  |                          |                                                jsr (a5)
    1a34:	|     |  |                          |                                                addq.l #8,sp
    1a36:	|     |  |                          |                                                lea 1a7a4 <SysBase>,a0
    1a3c:	|     |  |                          |                                                movea.l (a0),a6
    1a3e:	|     |  |                          |                                                moveq #2,d1
    1a40:	|     |  |                          |                                                jsr -684(a6)
    1a44:	|     |  |                          |                                                move.l d0,52(sp)
  UBYTE *tmpbuffer = AllocVec( (sprite->width/8+2)*sprite->height, MEMF_CHIP);               
    1a48:	|     |  |                          |                                                move.l (a3),d0
    1a4a:	|     \--|--------------------------|----------------------------------------------- bpl.w 1538 <CstDrawZBuffer+0x50>
    1a4e:	\--------|--------------------------|----------------------------------------------- bra.s 1a1c <CstDrawZBuffer+0x534>
  FreeVec( tmpbuffer);
    1a50:	         \--------------------------|----------------------------------------------> lea 1a7a4 <SysBase>,a0
    1a56:	                                    |                                                movea.l (a0),a6
    1a58:	                                    |                                                movea.l 56(sp),a1
    1a5c:	                                    |                                                jsr -690(a6)
    WaitBlit();
    1a60:	                                    \----------------------------------------------> movea.l 1a7b0 <GfxBase>,a6
    1a66:	                                                                                     jsr -228(a6)
    custom->bltafwm = 0xffff;
    1a6a:	                                                                                     move.w #-1,dff044 <gcc8_c_support.c.1fed348d+0xdb3d86>
    custom->bltalwm = 0xffff;
    1a72:	                                                                                     move.w #-1,dff046 <gcc8_c_support.c.1fed348d+0xdb3d88>
    custom->bltamod = 0;
    1a7a:	                                                                                     move.w #0,dff064 <gcc8_c_support.c.1fed348d+0xdb3da6>
    custom->bltbmod = 0;
    1a82:	                                                                                     move.w #0,dff062 <gcc8_c_support.c.1fed348d+0xdb3da4>
    custom->bltcmod = 0;
    1a8a:	                                                                                     move.w #0,dff060 <gcc8_c_support.c.1fed348d+0xdb3da2>
    custom->bltdmod = 0;
    1a92:	                                                                                     move.w #0,dff066 <gcc8_c_support.c.1fed348d+0xdb3da8>
    custom->bltcon0 = 0x9f0; //Copy A to D
    1a9a:	                                                                                     move.w #2544,dff040 <gcc8_c_support.c.1fed348d+0xdb3d82>
    custom->bltcon1 = 0;        
    1aa2:	                                                                                     move.w #0,dff042 <gcc8_c_support.c.1fed348d+0xdb3d84>
    custom->bltapt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    1aaa:	                                                                                     move.l (a3),d2
    1aac:	                                                                                     move.l 4(a3),d3
    1ab0:	                                                                                     move.l d2,d0
    1ab2:	                                                                           /-------- bmi.s 1b06 <CstDrawZBuffer+0x61e>
    1ab4:	                                                                           |         asr.l #3,d0
    1ab6:	                                                                           |         move.l d3,-(sp)
    1ab8:	                                                                           |         move.l d0,-(sp)
    1aba:	                                                                           |         jsr (a5)
    1abc:	                                                                           |         addq.l #8,sp
    1abe:	                                                                           |         move.l d0,d1
    1ac0:	                                                                           |         add.l d0,d1
    1ac2:	                                                                           |         add.l d1,d1
    1ac4:	                                                                           |         add.l d1,d0
    1ac6:	                                                                           |         add.l 24(a3),d0
    1aca:	                                                                           |         move.l d0,dff050 <gcc8_c_support.c.1fed348d+0xdb3d92>
    custom->bltdpt = (APTR) returnvalue;
    1ad0:	                                                                           |         move.l 52(sp),dff054 <gcc8_c_support.c.1fed348d+0xdb3d96>
    custom->bltsize = (sprite->height<<6)+sprite->width/16;      
    1ad8:	                                                                           |         lsl.w #6,d3
    1ada:	                                                                           |         tst.l d2
    1adc:	                                                                        /--|-------- blt.s 1af6 <CstDrawZBuffer+0x60e>
    1ade:	                                                                        |  |  /----> asr.l #4,d2
    1ae0:	                                                                        |  |  |      add.w d2,d3
    1ae2:	                                                                        |  |  |      move.w d3,dff058 <gcc8_c_support.c.1fed348d+0xdb3d9a>
}
    1ae8:	                                                                        |  |  |  /-> move.l 52(sp),d0
    1aec:	                                                                        |  |  |  |   movem.l (sp)+,d2-d7/a2-a6
    1af0:	                                                                        |  |  |  |   lea 20(sp),sp
    1af4:	                                                                        |  |  |  |   rts
    custom->bltsize = (sprite->height<<6)+sprite->width/16;      
    1af6:	                                                                        >--|--|--|-> moveq #15,d0
    1af8:	                                                                        |  |  |  |   add.l d0,d2
    1afa:	                                                                        |  |  |  |   asr.l #4,d2
    1afc:	                                                                        |  |  |  |   add.w d2,d3
    1afe:	                                                                        |  |  |  |   move.w d3,dff058 <gcc8_c_support.c.1fed348d+0xdb3d9a>
    1b04:	                                                                        |  |  |  \-- bra.s 1ae8 <CstDrawZBuffer+0x600>
    custom->bltapt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    1b06:	                                                                        |  \--|----> addq.l #7,d0
    1b08:	                                                                        |     |      asr.l #3,d0
    1b0a:	                                                                        |     |      move.l d3,-(sp)
    1b0c:	                                                                        |     |      move.l d0,-(sp)
    1b0e:	                                                                        |     |      jsr (a5)
    1b10:	                                                                        |     |      addq.l #8,sp
    1b12:	                                                                        |     |      move.l d0,d1
    1b14:	                                                                        |     |      add.l d0,d1
    1b16:	                                                                        |     |      add.l d1,d1
    1b18:	                                                                        |     |      add.l d1,d0
    1b1a:	                                                                        |     |      add.l 24(a3),d0
    1b1e:	                                                                        |     |      move.l d0,dff050 <gcc8_c_support.c.1fed348d+0xdb3d92>
    custom->bltdpt = (APTR) returnvalue;
    1b24:	                                                                        |     |      move.l 52(sp),dff054 <gcc8_c_support.c.1fed348d+0xdb3d96>
    custom->bltsize = (sprite->height<<6)+sprite->width/16;      
    1b2c:	                                                                        |     |      lsl.w #6,d3
    1b2e:	                                                                        |     |      tst.l d2
    1b30:	                                                                        |     \----- bge.s 1ade <CstDrawZBuffer+0x5f6>
    1b32:	                                                                        \----------- bra.s 1af6 <CstDrawZBuffer+0x60e>

00001b34 <CstFreeBuffer>:

void CstFreeBuffer( ) {
    1b34:	    lea -20(sp),sp
    1b38:	    move.l a6,-(sp)
  if( CstDrawBuffer) FreeVec(CstDrawBuffer);
    1b3a:	    move.l 1a6d8 <CstDrawBuffer>,d0
    1b40:	/-- beq.s 1b5a <CstFreeBuffer+0x26>
    1b42:	|   move.l 1a6d8 <CstDrawBuffer>,20(sp)
    1b4a:	|   move.l 1a7a4 <SysBase>,d0
    1b50:	|   movea.l d0,a6
    1b52:	|   movea.l 20(sp),a1
    1b56:	|   jsr -690(a6)
  if( CstViewBuffer) FreeVec(CstViewBuffer);
    1b5a:	\-> move.l 1a6d4 <CstViewBuffer>,d0
    1b60:	/-- beq.s 1b7a <CstFreeBuffer+0x46>
    1b62:	|   move.l 1a6d4 <CstViewBuffer>,16(sp)
    1b6a:	|   move.l 1a7a4 <SysBase>,d0
    1b70:	|   movea.l d0,a6
    1b72:	|   movea.l 16(sp),a1
    1b76:	|   jsr -690(a6)
  if( CstCopperList) FreeVec(CstCopperList);  
    1b7a:	\-> move.l 1a6ce <CstCopperList>,d0
    1b80:	/-- beq.s 1b9a <CstFreeBuffer+0x66>
    1b82:	|   move.l 1a6ce <CstCopperList>,12(sp)
    1b8a:	|   move.l 1a7a4 <SysBase>,d0
    1b90:	|   movea.l d0,a6
    1b92:	|   movea.l 12(sp),a1
    1b96:	|   jsr -690(a6)
  if( CstBackDrop) FreeVec(CstBackDrop);  
    1b9a:	\-> move.l 1a6c6 <CstBackDrop>,d0
    1ba0:	/-- beq.s 1bba <CstFreeBuffer+0x86>
    1ba2:	|   move.l 1a6c6 <CstBackDrop>,8(sp)
    1baa:	|   move.l 1a7a4 <SysBase>,d0
    1bb0:	|   movea.l d0,a6
    1bb2:	|   movea.l 8(sp),a1
    1bb6:	|   jsr -690(a6)
  if( CstBackDropBackup) FreeVec(CstBackDropBackup);
    1bba:	\-> move.l 1a6ca <CstBackDropBackup>,d0
    1bc0:	/-- beq.s 1bda <CstFreeBuffer+0xa6>
    1bc2:	|   move.l 1a6ca <CstBackDropBackup>,4(sp)
    1bca:	|   move.l 1a7a4 <SysBase>,d0
    1bd0:	|   movea.l d0,a6
    1bd2:	|   movea.l 4(sp),a1
    1bd6:	|   jsr -690(a6)
  CstDrawBuffer = NULL;
    1bda:	\-> clr.l 1a6d8 <CstDrawBuffer>
  CstViewBuffer = NULL;
    1be0:	    clr.l 1a6d4 <CstViewBuffer>
  CstCopperList = NULL;
    1be6:	    clr.l 1a6ce <CstCopperList>
  CstBackDrop = NULL;
    1bec:	    clr.l 1a6c6 <CstBackDrop>

}
    1bf2:	    nop
    1bf4:	    movea.l (sp)+,a6
    1bf6:	    lea 20(sp),sp
    1bfa:	    rts

00001bfc <CstFreeze>:



void CstFreeze( ) {
    1bfc:	       lea -36(sp),sp
    1c00:	       move.l a6,-(sp)
    1c02:	       move.l d2,-(sp)

	KPrintF("CstFreeze: Freezing Background Started");  
    1c04:	       pea 17ca7 <PutChar+0x1c9>
    1c0a:	       jsr 1703c <KPrintF>
    1c10:	       addq.l #4,sp

  UWORD size = winWidth/8*winHeight*5;
    1c12:	       move.l 1a6f8 <winWidth>,d0
    1c18:	       lsr.l #3,d0
    1c1a:	       move.l d0,d1
    1c1c:	       move.l 1a6fc <winHeight>,d0
    1c22:	       move.l d0,d0
    1c24:	       muls.w d0,d1
    1c26:	       move.w d1,d0
    1c28:	       add.w d0,d0
    1c2a:	       add.w d0,d0
    1c2c:	       move.w d0,d2
    1c2e:	       add.w d1,d2
    1c30:	       move.w d2,26(sp)

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    1c34:	       move.l #14675968,22(sp)

  //Backup Existing Backdrop to save location
  CstBackDropBackup = AllocVec(size, MEMF_ANY);
    1c3c:	       moveq #0,d0
    1c3e:	       move.w 26(sp),d0
    1c42:	       move.l d0,18(sp)
    1c46:	       clr.l 14(sp)
    1c4a:	       move.l 1a7a4 <SysBase>,d0
    1c50:	       movea.l d0,a6
    1c52:	       move.l 18(sp),d0
    1c56:	       move.l 14(sp),d1
    1c5a:	       jsr -684(a6)
    1c5e:	       move.l d0,10(sp)
    1c62:	       move.l 10(sp),d0
    1c66:	       move.l d0,1a6ca <CstBackDropBackup>
  if( !CstBackDropBackup)
    1c6c:	       move.l 1a6ca <CstBackDropBackup>,d0
    1c72:	   /-- bne.s 1c82 <CstFreeze+0x86>
  {
    KPrintF("CstFreeze: Cannot allocate Memory for CstBackDropBackup");
    1c74:	   |   pea 17cce <PutChar+0x1f0>
    1c7a:	   |   jsr 1703c <KPrintF>
    1c80:	   |   addq.l #4,sp
  }

#ifdef EMULATOR
  debug_register_bitmap(CstBackDropBackup, "BackDropBackup", winWidth, winHeight, 5, 0);
    1c82:	   \-> move.l 1a6fc <winHeight>,d0
    1c88:	       move.l d0,d0
    1c8a:	       movea.w d0,a1
    1c8c:	       move.l 1a6f8 <winWidth>,d0
    1c92:	       move.l d0,d0
    1c94:	       movea.w d0,a0
    1c96:	       move.l 1a6ca <CstBackDropBackup>,d0
    1c9c:	       clr.l -(sp)
    1c9e:	       pea 5 <_start+0x5>
    1ca2:	       move.l a1,-(sp)
    1ca4:	       move.l a0,-(sp)
    1ca6:	       pea 17d06 <PutChar+0x228>
    1cac:	       move.l d0,-(sp)
    1cae:	       jsr 17124 <debug_register_bitmap>
    1cb4:	       lea 24(sp),sp
#endif  

  ULONG *src = (ULONG *) CstBackDrop;
    1cb8:	       move.l 1a6c6 <CstBackDrop>,40(sp)
  ULONG *dst = (ULONG *) CstBackDropBackup;
    1cc0:	       move.l 1a6ca <CstBackDropBackup>,36(sp)
  for(int i=0;i<size/4;i++) 
    1cc8:	       clr.l 32(sp)
    1ccc:	   /-- bra.s 1cf2 <CstFreeze+0xf6>
  {
    *dst++ = *src++;
    1cce:	/--|-> move.l 40(sp),d1
    1cd2:	|  |   move.l d1,d0
    1cd4:	|  |   addq.l #4,d0
    1cd6:	|  |   move.l d0,40(sp)
    1cda:	|  |   move.l 36(sp),d0
    1cde:	|  |   move.l d0,d2
    1ce0:	|  |   addq.l #4,d2
    1ce2:	|  |   move.l d2,36(sp)
    1ce6:	|  |   movea.l d1,a0
    1ce8:	|  |   move.l (a0),d1
    1cea:	|  |   movea.l d0,a0
    1cec:	|  |   move.l d1,(a0)
  for(int i=0;i<size/4;i++) 
    1cee:	|  |   addq.l #1,32(sp)
    1cf2:	|  \-> move.w 26(sp),d0
    1cf6:	|      lsr.w #2,d0
    1cf8:	|      move.w d0,d0
    1cfa:	|      andi.l #65535,d0
    1d00:	|      cmp.l 32(sp),d0
    1d04:	\----- bgt.s 1cce <CstFreeze+0xd2>
  }

  //Replace existing Backdrop with ViewBuffer
  src = (ULONG *) CstViewBuffer;
    1d06:	       move.l 1a6d4 <CstViewBuffer>,40(sp)
  dst = (ULONG *) CstBackDrop;
    1d0e:	       move.l 1a6c6 <CstBackDrop>,36(sp)

  for(int i=0;i<size/4;i++) 
    1d16:	       clr.l 28(sp)
    1d1a:	   /-- bra.s 1d40 <CstFreeze+0x144>
  {
    *dst++ = *src++;
    1d1c:	/--|-> move.l 40(sp),d1
    1d20:	|  |   move.l d1,d0
    1d22:	|  |   addq.l #4,d0
    1d24:	|  |   move.l d0,40(sp)
    1d28:	|  |   move.l 36(sp),d0
    1d2c:	|  |   move.l d0,d2
    1d2e:	|  |   addq.l #4,d2
    1d30:	|  |   move.l d2,36(sp)
    1d34:	|  |   movea.l d1,a0
    1d36:	|  |   move.l (a0),d1
    1d38:	|  |   movea.l d0,a0
    1d3a:	|  |   move.l d1,(a0)
  for(int i=0;i<size/4;i++) 
    1d3c:	|  |   addq.l #1,28(sp)
    1d40:	|  \-> move.w 26(sp),d0
    1d44:	|      lsr.w #2,d0
    1d46:	|      move.w d0,d0
    1d48:	|      andi.l #65535,d0
    1d4e:	|      cmp.l 28(sp),d0
    1d52:	\----- bgt.s 1d1c <CstFreeze+0x120>
  }

  CstApplyBackDropCounter = 2;
    1d54:	       move.w #2,1a6d2 <CstApplyBackDropCounter>

  *CstBackDropBufferApplyCursor++ = winWidth/16;
    1d5c:	       move.l 1a6f8 <winWidth>,d0
    1d62:	       lsr.l #4,d0
    1d64:	       movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    1d6a:	       move.l a0,d1
    1d6c:	       addq.l #2,d1
    1d6e:	       move.l d1,1a6e8 <CstBackDropBufferApplyCursor>
    1d74:	       move.l d0,d0
    1d76:	       move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = winHeight;
    1d78:	       move.l 1a6fc <winHeight>,d0
    1d7e:	       movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    1d84:	       move.l a0,d1
    1d86:	       addq.l #2,d1
    1d88:	       move.l d1,1a6e8 <CstBackDropBufferApplyCursor>
    1d8e:	       move.l d0,d0
    1d90:	       move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = 0;
    1d92:	       movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    1d98:	       move.l a0,d0
    1d9a:	       addq.l #2,d0
    1d9c:	       move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    1da2:	       clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    1da4:	       movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    1daa:	       move.l a0,d0
    1dac:	       addq.l #2,d0
    1dae:	       move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    1db4:	       clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    1db6:	       movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    1dbc:	       move.l a0,d0
    1dbe:	       addq.l #2,d0
    1dc0:	       move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    1dc6:	       clr.w (a0)

  KPrintF("CstFreeze: Finished");
    1dc8:	       pea 17d15 <PutChar+0x237>
    1dce:	       jsr 1703c <KPrintF>
    1dd4:	       addq.l #4,sp

}  
    1dd6:	       nop
    1dd8:	       move.l (sp)+,d2
    1dda:	       movea.l (sp)+,a6
    1ddc:	       lea 36(sp),sp
    1de0:	       rts

00001de2 <CstLoadBackdrop>:

void CstLoadBackdrop( BPTR fp, int x, int y) {
    1de2:	             lea -144(sp),sp
    1de6:	             movem.l d2-d4/a6,-(sp)

	KPrintF("CstLoadBackDrop: Loading of Background started");
    1dea:	             pea 17d29 <PutChar+0x24b>
    1df0:	             jsr 1703c <KPrintF>
    1df6:	             addq.l #4,sp

  UWORD width = get2bytes(fp);
    1df8:	             move.l 164(sp),-(sp)
    1dfc:	             jsr 6bc <get2bytes>
    1e02:	             addq.l #4,sp
    1e04:	             move.w d0,134(sp)
  UWORD height = get2bytes(fp);  
    1e08:	             move.l 164(sp),-(sp)
    1e0c:	             jsr 6bc <get2bytes>
    1e12:	             addq.l #4,sp
    1e14:	             move.w d0,132(sp)

  UWORD widthbyteslayer = width/8;
    1e18:	             move.w 134(sp),d0
    1e1c:	             lsr.w #3,d0
    1e1e:	             move.w d0,130(sp)
  UWORD widthwordslayer = widthbyteslayer/2;  
    1e22:	             move.w 130(sp),d0
    1e26:	             lsr.w #1,d0
    1e28:	             move.w d0,128(sp)
  UWORD widthbytesbackdrop = winWidth / 8;
    1e2c:	             move.l 1a6f8 <winWidth>,d0
    1e32:	             lsr.l #3,d0
    1e34:	             move.w d0,126(sp)
  UWORD sizeplane =  widthbyteslayer*height;
    1e38:	             move.w 130(sp),d0
    1e3c:	             muls.w 132(sp),d0
    1e40:	             move.w d0,124(sp)
  UWORD size = sizeplane * 5; //Todo other number of bitplanes
    1e44:	             move.w 124(sp),d1
    1e48:	             move.w d1,d0
    1e4a:	             add.w d0,d0
    1e4c:	             add.w d0,d0
    1e4e:	             move.w d0,d2
    1e50:	             add.w d1,d2
    1e52:	             move.w d2,122(sp)

  //Load Palette to Copper
  if( CstPaletteLoaded == 0)
    1e56:	             move.w 1a6c0 <CstPaletteLoaded>,d0
    1e5c:	/----------- bne.w 1ef6 <CstLoadBackdrop+0x114>
  {    
    UWORD reg = 0x180;
    1e60:	|            move.w #384,120(sp)

    if(CstPalette) {
    1e66:	|            move.l 1a6f0 <CstPalette>,d0
    1e6c:	|        /-- beq.s 1e86 <CstLoadBackdrop+0xa4>
      FreeVec(CstPalette);
    1e6e:	|        |   move.l 1a6f0 <CstPalette>,116(sp)
    1e76:	|        |   move.l 1a7a4 <SysBase>,d0
    1e7c:	|        |   movea.l d0,a6
    1e7e:	|        |   movea.l 116(sp),a1
    1e82:	|        |   jsr -690(a6)
    }

    CstPalette = AllocVec(32*2,MEMF_ANY); //ToDo other number of bitplanes
    1e86:	|        \-> moveq #64,d0
    1e88:	|            move.l d0,112(sp)
    1e8c:	|            clr.l 108(sp)
    1e90:	|            move.l 1a7a4 <SysBase>,d0
    1e96:	|            movea.l d0,a6
    1e98:	|            move.l 112(sp),d0
    1e9c:	|            move.l 108(sp),d1
    1ea0:	|            jsr -684(a6)
    1ea4:	|            move.l d0,104(sp)
    1ea8:	|            move.l 104(sp),d0
    1eac:	|            move.l d0,1a6f0 <CstPalette>
    CstPaletteLoaded = 1;
    1eb2:	|            move.w #1,1a6c0 <CstPaletteLoaded>
    UWORD *tmp = CstPalette;
    1eba:	|            move.l 1a6f0 <CstPalette>,156(sp)
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    1ec2:	|            clr.l 152(sp)
    1ec6:	|        /-- bra.s 1eec <CstLoadBackdrop+0x10a>
      *tmp++ = get2bytes(fp);
    1ec8:	|     /--|-> move.l 164(sp),-(sp)
    1ecc:	|     |  |   jsr 6bc <get2bytes>
    1ed2:	|     |  |   addq.l #4,sp
    1ed4:	|     |  |   move.l d0,d1
    1ed6:	|     |  |   move.l 156(sp),d0
    1eda:	|     |  |   move.l d0,d2
    1edc:	|     |  |   addq.l #2,d2
    1ede:	|     |  |   move.l d2,156(sp)
    1ee2:	|     |  |   move.l d1,d1
    1ee4:	|     |  |   movea.l d0,a0
    1ee6:	|     |  |   move.w d1,(a0)
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    1ee8:	|     |  |   addq.l #1,152(sp)
    1eec:	|     |  \-> moveq #31,d0
    1eee:	|     |      cmp.l 152(sp),d0
    1ef2:	|     \----- bge.s 1ec8 <CstLoadBackdrop+0xe6>
    1ef4:	|  /-------- bra.s 1f14 <CstLoadBackdrop+0x132>
    }
  }
  else
  //There's already a palette loaded for this background. Do not load palette
  {
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    1ef6:	\--|-------> clr.l 148(sp)
    1efa:	   |     /-- bra.s 1f0c <CstLoadBackdrop+0x12a>
      get2bytes(fp);
    1efc:	   |  /--|-> move.l 164(sp),-(sp)
    1f00:	   |  |  |   jsr 6bc <get2bytes>
    1f06:	   |  |  |   addq.l #4,sp
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    1f08:	   |  |  |   addq.l #1,148(sp)
    1f0c:	   |  |  \-> moveq #31,d2
    1f0e:	   |  |      cmp.l 148(sp),d2
    1f12:	   |  \----- bge.s 1efc <CstLoadBackdrop+0x11a>
    }
  }

  //Load Picture From Disk
  UWORD *tmpbuffer = AllocVec(size, MEMF_CHIP); //Todo other number of bitplanes
    1f14:	   \-------> moveq #0,d0
    1f16:	             move.w 122(sp),d0
    1f1a:	             move.l d0,100(sp)
    1f1e:	             moveq #2,d0
    1f20:	             move.l d0,96(sp)
    1f24:	             move.l 1a7a4 <SysBase>,d0
    1f2a:	             movea.l d0,a6
    1f2c:	             move.l 100(sp),d0
    1f30:	             move.l 96(sp),d1
    1f34:	             jsr -684(a6)
    1f38:	             move.l d0,92(sp)
    1f3c:	             move.l 92(sp),d0
    1f40:	             move.l d0,88(sp)
  if( !tmpbuffer)
    1f44:	         /-- bne.s 1f54 <CstLoadBackdrop+0x172>
  {
    KPrintF("CstLoadBackDrop: Cannot allocate Memory for tmpbuffer");
    1f46:	         |   pea 17d58 <PutChar+0x27a>
    1f4c:	         |   jsr 1703c <KPrintF>
    1f52:	         |   addq.l #4,sp
  }
  UWORD *tmpmask = AllocVec(sizeplane, MEMF_CHIP);
    1f54:	         \-> moveq #0,d0
    1f56:	             move.w 124(sp),d0
    1f5a:	             move.l d0,84(sp)
    1f5e:	             moveq #2,d2
    1f60:	             move.l d2,80(sp)
    1f64:	             move.l 1a7a4 <SysBase>,d0
    1f6a:	             movea.l d0,a6
    1f6c:	             move.l 84(sp),d0
    1f70:	             move.l 80(sp),d1
    1f74:	             jsr -684(a6)
    1f78:	             move.l d0,76(sp)
    1f7c:	             move.l 76(sp),d0
    1f80:	             move.l d0,72(sp)
  if( !tmpmask)
    1f84:	         /-- bne.s 1f94 <CstLoadBackdrop+0x1b2>
  {
    KPrintF("CstLoadBackDrop: Cannot allocate Memory for tmpmask");
    1f86:	         |   pea 17d8e <PutChar+0x2b0>
    1f8c:	         |   jsr 1703c <KPrintF>
    1f92:	         |   addq.l #4,sp
  }

#ifdef EMULATOR
  debug_register_bitmap(tmpbuffer, "tmpbuffer.bpl", width, height, 5, 0);
    1f94:	         \-> move.w 132(sp),d0
    1f98:	             movea.w d0,a1
    1f9a:	             move.w 134(sp),d0
    1f9e:	             movea.w d0,a0
    1fa0:	             clr.l -(sp)
    1fa2:	             pea 5 <_start+0x5>
    1fa6:	             move.l a1,-(sp)
    1fa8:	             move.l a0,-(sp)
    1faa:	             pea 17dc2 <PutChar+0x2e4>
    1fb0:	             move.l 108(sp),-(sp)
    1fb4:	             jsr 17124 <debug_register_bitmap>
    1fba:	             lea 24(sp),sp
  debug_register_bitmap(tmpbuffer, "tmpmask.bpl", width, height, 1, 0);
    1fbe:	             move.w 132(sp),d0
    1fc2:	             movea.w d0,a1
    1fc4:	             move.w 134(sp),d0
    1fc8:	             movea.w d0,a0
    1fca:	             clr.l -(sp)
    1fcc:	             pea 1 <_start+0x1>
    1fd0:	             move.l a1,-(sp)
    1fd2:	             move.l a0,-(sp)
    1fd4:	             pea 17dd0 <PutChar+0x2f2>
    1fda:	             move.l 108(sp),-(sp)
    1fde:	             jsr 17124 <debug_register_bitmap>
    1fe4:	             lea 24(sp),sp
#endif  

  UWORD count = FRead( fp, tmpbuffer, 2, size/2);
    1fe8:	             move.l 164(sp),68(sp)
    1fee:	             move.l 88(sp),64(sp)
    1ff4:	             moveq #2,d0
    1ff6:	             move.l d0,60(sp)
    1ffa:	             move.w 122(sp),d0
    1ffe:	             lsr.w #1,d0
    2000:	             move.w d0,d0
    2002:	             andi.l #65535,d0
    2008:	             move.l d0,56(sp)
    200c:	             move.l 1a7ac <DOSBase>,d0
    2012:	             movea.l d0,a6
    2014:	             move.l 68(sp),d1
    2018:	             move.l 64(sp),d2
    201c:	             move.l 60(sp),d3
    2020:	             move.l 56(sp),d4
    2024:	             jsr -324(a6)
    2028:	             move.l d0,52(sp)
    202c:	             move.l 52(sp),d0
    2030:	             move.w d0,50(sp)
  if(!count) {
    2034:	         /-- bne.s 2048 <CstLoadBackdrop+0x266>
    KPrintF("Error while reading stream");
    2036:	         |   pea 17ddc <PutChar+0x2fe>
    203c:	         |   jsr 1703c <KPrintF>
    2042:	         |   addq.l #4,sp
    return;
    2044:	   /-----|-- bra.w 2294 <CstLoadBackdrop+0x4b2>
  }  
  count = FRead( fp, tmpmask, 2, sizeplane/2);
    2048:	   |     \-> move.l 164(sp),46(sp)
    204e:	   |         move.l 72(sp),42(sp)
    2054:	   |         moveq #2,d2
    2056:	   |         move.l d2,38(sp)
    205a:	   |         move.w 124(sp),d0
    205e:	   |         lsr.w #1,d0
    2060:	   |         move.w d0,d0
    2062:	   |         andi.l #65535,d0
    2068:	   |         move.l d0,34(sp)
    206c:	   |         move.l 1a7ac <DOSBase>,d0
    2072:	   |         movea.l d0,a6
    2074:	   |         move.l 46(sp),d1
    2078:	   |         move.l 42(sp),d2
    207c:	   |         move.l 38(sp),d3
    2080:	   |         move.l 34(sp),d4
    2084:	   |         jsr -324(a6)
    2088:	   |         move.l d0,30(sp)
    208c:	   |         move.l 30(sp),d0
    2090:	   |         move.w d0,50(sp)
   

  if(!count) {
    2094:	   |     /-- bne.s 20a8 <CstLoadBackdrop+0x2c6>
    KPrintF("Error while reading stream");
    2096:	   |     |   pea 17ddc <PutChar+0x2fe>
    209c:	   |     |   jsr 1703c <KPrintF>
    20a2:	   |     |   addq.l #4,sp
    return;
    20a4:	   +-----|-- bra.w 2294 <CstLoadBackdrop+0x4b2>
  }

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    20a8:	   |     \-> move.l #14675968,26(sp)

  ULONG backdropcursor = (ULONG) CstBackDrop; 
    20b0:	   |         move.l 1a6c6 <CstBackDrop>,d0
    20b6:	   |         move.l d0,144(sp)
  UWORD offset = widthbytesbackdrop*y + x / 8;
    20ba:	   |         move.l 172(sp),d0
    20be:	   |         move.w d0,d1
    20c0:	   |         muls.w 126(sp),d1
    20c4:	   |         move.l 168(sp),d0
    20c8:	   |     /-- bpl.s 20cc <CstLoadBackdrop+0x2ea>
    20ca:	   |     |   addq.l #7,d0
    20cc:	   |     \-> asr.l #3,d0
    20ce:	   |         move.l d0,d0
    20d0:	   |         movea.w d1,a0
    20d2:	   |         adda.w d0,a0
    20d4:	   |         move.w a0,24(sp)
  backdropcursor += offset; 
    20d8:	   |         moveq #0,d0
    20da:	   |         move.w 24(sp),d0
    20de:	   |         add.l d0,144(sp)

 	KPrintF("CstLoadBackDrop: Starting Blit");
    20e2:	   |         pea 17df7 <PutChar+0x319>
    20e8:	   |         jsr 1703c <KPrintF>
    20ee:	   |         addq.l #4,sp


  WaitBlit();
    20f0:	   |         move.l 1a7b0 <GfxBase>,d0
    20f6:	   |         movea.l d0,a6
    20f8:	   |         jsr -228(a6)

  custom->bltafwm = 0xffff;
    20fc:	   |         movea.l 26(sp),a0
    2100:	   |         move.w #-1,68(a0)
  custom->bltalwm = 0xffff;
    2106:	   |         movea.l 26(sp),a0
    210a:	   |         move.w #-1,70(a0)
  custom->bltamod = 0;
    2110:	   |         movea.l 26(sp),a0
    2114:	   |         move.w #0,100(a0)
  custom->bltbmod = 0;
    211a:	   |         movea.l 26(sp),a0
    211e:	   |         move.w #0,98(a0)
  custom->bltcmod = widthbytesbackdrop - widthbyteslayer;
    2124:	   |         move.w 126(sp),d0
    2128:	   |         sub.w 130(sp),d0
    212c:	   |         movea.l 26(sp),a0
    2130:	   |         move.w d0,96(a0)
  custom->bltdmod = widthbytesbackdrop - widthbyteslayer;
    2134:	   |         move.w 126(sp),d0
    2138:	   |         sub.w 130(sp),d0
    213c:	   |         movea.l 26(sp),a0
    2140:	   |         move.w d0,102(a0)
  custom->bltcon0 = 0xfca;
    2144:	   |         movea.l 26(sp),a0
    2148:	   |         move.w #4042,64(a0)
  custom->bltcon1 = 0;
    214e:	   |         movea.l 26(sp),a0
    2152:	   |         move.w #0,66(a0)
  
  ULONG tmpbuffercursor = (ULONG) tmpbuffer;
    2158:	   |         move.l 88(sp),140(sp)
  for(int i=0;i<5;i++) //Todo other number of bitplanes
    215e:	   |         clr.l 136(sp)
    2162:	   |     /-- bra.s 21c4 <CstLoadBackdrop+0x3e2>
  {    
    custom->bltapt = (APTR) tmpmask;
    2164:	   |  /--|-> movea.l 26(sp),a0
    2168:	   |  |  |   move.l 72(sp),80(a0)
    custom->bltbpt = (APTR) tmpbuffercursor;
    216e:	   |  |  |   move.l 140(sp),d0
    2172:	   |  |  |   movea.l 26(sp),a0
    2176:	   |  |  |   move.l d0,76(a0)
    custom->bltcpt = (APTR)backdropcursor;
    217a:	   |  |  |   move.l 144(sp),d0
    217e:	   |  |  |   movea.l 26(sp),a0
    2182:	   |  |  |   move.l d0,72(a0)
    custom->bltdpt = (APTR) backdropcursor;
    2186:	   |  |  |   move.l 144(sp),d0
    218a:	   |  |  |   movea.l 26(sp),a0
    218e:	   |  |  |   move.l d0,84(a0)
    custom->bltsize = (height<<6)+widthwordslayer;
    2192:	   |  |  |   move.w 132(sp),d0
    2196:	   |  |  |   lsl.w #6,d0
    2198:	   |  |  |   add.w 128(sp),d0
    219c:	   |  |  |   movea.l 26(sp),a0
    21a0:	   |  |  |   move.w d0,88(a0)
    tmpbuffercursor += sizeplane;
    21a4:	   |  |  |   moveq #0,d0
    21a6:	   |  |  |   move.w 124(sp),d0
    21aa:	   |  |  |   add.l d0,140(sp)
    backdropcursor += CstBackdropSizePlane;
    21ae:	   |  |  |   move.w 1a6c4 <CstBackdropSizePlane>,d0
    21b4:	   |  |  |   move.w d0,d0
    21b6:	   |  |  |   andi.l #65535,d0
    21bc:	   |  |  |   add.l d0,144(sp)
  for(int i=0;i<5;i++) //Todo other number of bitplanes
    21c0:	   |  |  |   addq.l #1,136(sp)
    21c4:	   |  |  \-> moveq #4,d0
    21c6:	   |  |      cmp.l 136(sp),d0
    21ca:	   |  \----- bge.s 2164 <CstLoadBackdrop+0x382>
  }    

  WaitBlit();
    21cc:	   |         move.l 1a7b0 <GfxBase>,d0
    21d2:	   |         movea.l d0,a6
    21d4:	   |         jsr -228(a6)

 	KPrintF("CstLoadBackDrop: Freeing Memory");
    21d8:	   |         pea 17e16 <PutChar+0x338>
    21de:	   |         jsr 1703c <KPrintF>
    21e4:	   |         addq.l #4,sp


  FreeVec(tmpbuffer);
    21e6:	   |         move.l 88(sp),20(sp)
    21ec:	   |         move.l 1a7a4 <SysBase>,d0
    21f2:	   |         movea.l d0,a6
    21f4:	   |         movea.l 20(sp),a1
    21f8:	   |         jsr -690(a6)
  FreeVec(tmpmask);
    21fc:	   |         move.l 72(sp),16(sp)
    2202:	   |         move.l 1a7a4 <SysBase>,d0
    2208:	   |         movea.l d0,a6
    220a:	   |         movea.l 16(sp),a1
    220e:	   |         jsr -690(a6)

  CstApplyBackDropCounter = 2;
    2212:	   |         move.w #2,1a6d2 <CstApplyBackDropCounter>

  *CstBackDropBufferApplyCursor++ = winWidth/16;
    221a:	   |         move.l 1a6f8 <winWidth>,d0
    2220:	   |         lsr.l #4,d0
    2222:	   |         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    2228:	   |         move.l a0,d1
    222a:	   |         addq.l #2,d1
    222c:	   |         move.l d1,1a6e8 <CstBackDropBufferApplyCursor>
    2232:	   |         move.l d0,d0
    2234:	   |         move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = winHeight;
    2236:	   |         move.l 1a6fc <winHeight>,d0
    223c:	   |         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    2242:	   |         move.l a0,d1
    2244:	   |         addq.l #2,d1
    2246:	   |         move.l d1,1a6e8 <CstBackDropBufferApplyCursor>
    224c:	   |         move.l d0,d0
    224e:	   |         move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = 0;
    2250:	   |         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    2256:	   |         move.l a0,d0
    2258:	   |         addq.l #2,d0
    225a:	   |         move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    2260:	   |         clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    2262:	   |         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    2268:	   |         move.l a0,d0
    226a:	   |         addq.l #2,d0
    226c:	   |         move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    2272:	   |         clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    2274:	   |         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    227a:	   |         move.l a0,d0
    227c:	   |         addq.l #2,d0
    227e:	   |         move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    2284:	   |         clr.w (a0)

  KPrintF("CstLoadBackDrop: Finished");
    2286:	   |         pea 17e36 <PutChar+0x358>
    228c:	   |         jsr 1703c <KPrintF>
    2292:	   |         addq.l #4,sp

}
    2294:	   \-------> movem.l (sp)+,d2-d4/a6
    2298:	             lea 144(sp),sp
    229c:	             rts

0000229e <CstPasteChar>:

ULONG test = 0;

void CstPasteChar( struct sprite *single, WORD x, WORD y)
{  
    229e:	                lea -72(sp),sp
    22a2:	                move.l a6,-(sp)
    22a4:	                move.l d2,-(sp)
    22a6:	                move.l 88(sp),d1
    22aa:	                move.l 92(sp),d0
    22ae:	                move.w d1,d1
    22b0:	                move.w d1,10(sp)
    22b4:	                move.w d0,d0
    22b6:	                move.w d0,8(sp)
  UWORD *destination = 0;
    22ba:	                clr.l 28(sp)
  CstApplyBackDropCounter = 2;
    22be:	                move.w #2,1a6d2 <CstApplyBackDropCounter>
  destination = (UWORD *) CstBackDrop;      
    22c6:	                move.l 1a6c6 <CstBackDrop>,28(sp)
  ULONG ystartdst;
  ULONG ystartsrc; 
  ULONG blitheight;
  ULONG blitwidth;

  bltcon0 = 0;
    22ce:	                clr.l 56(sp)

  blitwidth = single->width/16;
    22d2:	                movea.l 84(sp),a0
    22d6:	                move.l (a0),d0
    22d8:	                movea.l d0,a0
    22da:	                cmpa.w #0,a0
    22de:	            /-- bge.s 22e4 <CstPasteChar+0x46>
    22e0:	            |   lea 15(a0),a0
    22e4:	            \-> move.l a0,d0
    22e6:	                asr.l #4,d0
    22e8:	                move.l d0,40(sp)
  if(blitwidth == 0) blitwidth = 1;
    22ec:	            /-- bne.s 22f4 <CstPasteChar+0x56>
    22ee:	            |   moveq #1,d0
    22f0:	            |   move.l d0,40(sp)

  if( y < 0) {
    22f4:	            \-> tst.w 8(sp)
    22f8:	         /----- bge.s 2340 <CstPasteChar+0xa2>
    if(y + single->height < 0) {
    22fa:	         |      movea.w 8(sp),a1
    22fe:	         |      movea.l 84(sp),a0
    2302:	         |      move.l 4(a0),d0
    2306:	         |      add.l a1,d0
    2308:	         |  /-- bpl.s 231c <CstPasteChar+0x7e>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    230a:	         |  |   pea 17e50 <PutChar+0x372>
    2310:	         |  |   jsr 1703c <KPrintF>
    2316:	         |  |   addq.l #4,sp
      return;
    2318:	/--------|--|-- bra.w 29dc <CstPasteChar+0x73e>
    }
    ystartdst = 0;
    231c:	|        |  \-> clr.l 52(sp)
    ystartsrc = y*-1;
    2320:	|        |      move.w 8(sp),d0
    2324:	|        |      ext.l d0
    2326:	|        |      neg.l d0
    2328:	|        |      move.l d0,48(sp)
    blitheight = single->height+y;
    232c:	|        |      movea.l 84(sp),a0
    2330:	|        |      move.l 4(a0),d0
    2334:	|        |      movea.w 8(sp),a0
    2338:	|        |      add.l a0,d0
    233a:	|        |      move.l d0,44(sp)
    233e:	|     /--|----- bra.s 23b2 <CstPasteChar+0x114>
  } else if(y+single->height > (int) winHeight) {
    2340:	|     |  \----> movea.w 8(sp),a1
    2344:	|     |         movea.l 84(sp),a0
    2348:	|     |         move.l 4(a0),d0
    234c:	|     |         move.l a1,d1
    234e:	|     |         add.l d0,d1
    2350:	|     |         move.l 1a6fc <winHeight>,d0
    2356:	|     |         cmp.l d1,d0
    2358:	|     |  /----- bge.s 239a <CstPasteChar+0xfc>
    if(y  > (int) winHeight) {
    235a:	|     |  |      movea.w 8(sp),a0
    235e:	|     |  |      move.l 1a6fc <winHeight>,d0
    2364:	|     |  |      cmp.l a0,d0
    2366:	|     |  |  /-- bge.s 237a <CstPasteChar+0xdc>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    2368:	|     |  |  |   pea 17e50 <PutChar+0x372>
    236e:	|     |  |  |   jsr 1703c <KPrintF>
    2374:	|     |  |  |   addq.l #4,sp
      return;
    2376:	+-----|--|--|-- bra.w 29dc <CstPasteChar+0x73e>
    }
    ystartdst = y;
    237a:	|     |  |  \-> movea.w 8(sp),a0
    237e:	|     |  |      move.l a0,52(sp)
    ystartsrc = 0;
    2382:	|     |  |      clr.l 48(sp)
    blitheight = winHeight-y;
    2386:	|     |  |      move.l 1a6fc <winHeight>,d0
    238c:	|     |  |      movea.w 8(sp),a0
    2390:	|     |  |      move.l d0,d1
    2392:	|     |  |      sub.l a0,d1
    2394:	|     |  |      move.l d1,44(sp)
    2398:	|     +--|----- bra.s 23b2 <CstPasteChar+0x114>
  } else {
    ystartdst = y;
    239a:	|     |  \----> movea.w 8(sp),a0
    239e:	|     |         move.l a0,52(sp)
    ystartsrc = 0;
    23a2:	|     |         clr.l 48(sp)
    blitheight = single->height;
    23a6:	|     |         movea.l 84(sp),a0
    23aa:	|     |         move.l 4(a0),d0
    23ae:	|     |         move.l d0,44(sp)
  }


  if( x < 0) { //Leftmost part outside screen
    23b2:	|     \-------> tst.w 10(sp)
    23b6:	|        /----- bge.w 2528 <CstPasteChar+0x28a>
    if(x + single->width < 0) {
    23ba:	|        |      movea.w 10(sp),a1
    23be:	|        |      movea.l 84(sp),a0
    23c2:	|        |      move.l (a0),d0
    23c4:	|        |      add.l a1,d0
    23c6:	|        |  /-- bpl.s 23da <CstPasteChar+0x13c>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    23c8:	|        |  |   pea 17e50 <PutChar+0x372>
    23ce:	|        |  |   jsr 1703c <KPrintF>
    23d4:	|        |  |   addq.l #4,sp
      return;
    23d6:	+--------|--|-- bra.w 29dc <CstPasteChar+0x73e>

    }
    
    extrawords = 1;
    23da:	|        |  \-> move.w #1,78(sp)

    cutwordssource = (x*-1)/16; 
    23e0:	|        |      move.w 10(sp),d0
    23e4:	|        |  /-- bpl.s 23ea <CstPasteChar+0x14c>
    23e6:	|        |  |   addi.w #15,d0
    23ea:	|        |  \-> asr.w #4,d0
    23ec:	|        |      neg.w d0
    23ee:	|        |      move.w d0,76(sp)
    cutmaskpixel = (x*-1)%16;     
    23f2:	|        |      move.w 10(sp),d0
    23f6:	|        |      ext.l d0
    23f8:	|        |      neg.l d0
    23fa:	|        |      andi.l #-2147483633,d0
    2400:	|        |  /-- bpl.s 240a <CstPasteChar+0x16c>
    2402:	|        |  |   subq.l #1,d0
    2404:	|        |  |   moveq #-16,d1
    2406:	|        |  |   or.l d1,d0
    2408:	|        |  |   addq.l #1,d0
    240a:	|        |  \-> move.w d0,74(sp)
    bltalwm = 0; //Last Word of this channel almost masked out
    240e:	|        |      clr.w 72(sp)
    bltapt = ((ULONG) single->data)+cutwordssource*2+ystartsrc*single->width/8;
    2412:	|        |      movea.l 84(sp),a0
    2416:	|        |      move.l 24(a0),d0
    241a:	|        |      move.l d0,d1
    241c:	|        |      moveq #0,d0
    241e:	|        |      move.w 76(sp),d0
    2422:	|        |      add.l d0,d0
    2424:	|        |      move.l d1,d2
    2426:	|        |      add.l d0,d2
    2428:	|        |      movea.l 84(sp),a0
    242c:	|        |      move.l (a0),d0
    242e:	|        |      move.l 48(sp),-(sp)
    2432:	|        |      move.l d0,-(sp)
    2434:	|        |      jsr 179c8 <__mulsi3>
    243a:	|        |      addq.l #8,sp
    243c:	|        |      lsr.l #3,d0
    243e:	|        |      move.l d2,d1
    2440:	|        |      add.l d0,d1
    2442:	|        |      move.l d1,68(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    2446:	|        |      move.l 1a6f8 <winWidth>,d0
    244c:	|        |      move.l 52(sp),-(sp)
    2450:	|        |      move.l d0,-(sp)
    2452:	|        |      jsr 179c8 <__mulsi3>
    2458:	|        |      addq.l #8,sp
    245a:	|        |      lsr.l #3,d0
    245c:	|        |      move.l 28(sp),d1
    2460:	|        |      add.l d1,d0
    2462:	|        |      move.l d0,d2
    2464:	|        |      subq.l #2,d2
    2466:	|        |      move.l d2,64(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    246a:	|        |      move.l 1a6f8 <winWidth>,d0
    2470:	|        |      move.l 52(sp),-(sp)
    2474:	|        |      move.l d0,-(sp)
    2476:	|        |      jsr 179c8 <__mulsi3>
    247c:	|        |      addq.l #8,sp
    247e:	|        |      lsr.l #3,d0
    2480:	|        |      move.l 28(sp),d1
    2484:	|        |      add.l d1,d0
    2486:	|        |      move.l d0,d1
    2488:	|        |      subq.l #2,d1
    248a:	|        |      move.l d1,60(sp)
    bltcon0 = ((16-cutmaskpixel) << 12);
    248e:	|        |      moveq #0,d0
    2490:	|        |      move.w 74(sp),d0
    2494:	|        |      moveq #16,d1
    2496:	|        |      sub.l d0,d1
    2498:	|        |      move.l d1,d0
    249a:	|        |      moveq #12,d2
    249c:	|        |      lsl.l d2,d0
    249e:	|        |      move.l d0,56(sp)

    *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    24a2:	|        |      movea.l 84(sp),a0
    24a6:	|        |      move.l (a0),d0
    24a8:	|        |      movea.l d0,a0
    24aa:	|        |      cmpa.w #0,a0
    24ae:	|        |  /-- bge.s 24b4 <CstPasteChar+0x216>
    24b0:	|        |  |   lea 15(a0),a0
    24b4:	|        |  \-> move.l a0,d0
    24b6:	|        |      asr.l #4,d0
    24b8:	|        |      move.l d0,d0
    24ba:	|        |      add.w 76(sp),d0
    24be:	|        |      movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    24c4:	|        |      move.l a0,d1
    24c6:	|        |      addq.l #2,d1
    24c8:	|        |      move.l d1,1a6e8 <CstBackDropBufferApplyCursor>
    24ce:	|        |      add.w 78(sp),d0
    24d2:	|        |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = blitheight;
    24d4:	|        |      movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    24da:	|        |      move.l a0,d0
    24dc:	|        |      addq.l #2,d0
    24de:	|        |      move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    24e4:	|        |      move.l 44(sp),d0
    24e8:	|        |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = 0;
    24ea:	|        |      movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    24f0:	|        |      move.l a0,d0
    24f2:	|        |      addq.l #2,d0
    24f4:	|        |      move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    24fa:	|        |      clr.w (a0)
    *CstBackDropBufferApplyCursor++ = ystartdst;
    24fc:	|        |      movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    2502:	|        |      move.l a0,d0
    2504:	|        |      addq.l #2,d0
    2506:	|        |      move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    250c:	|        |      move.l 52(sp),d0
    2510:	|        |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = 0;
    2512:	|        |      movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    2518:	|        |      move.l a0,d0
    251a:	|        |      addq.l #2,d0
    251c:	|        |      move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    2522:	|        |      clr.w (a0)
    2524:	|     /--|----- bra.w 283c <CstPasteChar+0x59e>

  } else if(x + single->width > (int) winWidth) { //Rightmost part outside screen   
    2528:	|     |  \----> movea.w 10(sp),a1
    252c:	|     |         movea.l 84(sp),a0
    2530:	|     |         move.l (a0),d0
    2532:	|     |         move.l a1,d1
    2534:	|     |         add.l d0,d1
    2536:	|     |         move.l 1a6f8 <winWidth>,d0
    253c:	|     |         cmp.l d1,d0
    253e:	|     |  /----- bge.w 26da <CstPasteChar+0x43c>

    if(x - single->width > (int) winWidth)
    2542:	|     |  |      movea.w 10(sp),a1
    2546:	|     |  |      movea.l 84(sp),a0
    254a:	|     |  |      move.l (a0),d0
    254c:	|     |  |      move.l a1,d1
    254e:	|     |  |      sub.l d0,d1
    2550:	|     |  |      move.l 1a6f8 <winWidth>,d0
    2556:	|     |  |      cmp.l d1,d0
    2558:	|     |  |  /-- bge.s 256c <CstPasteChar+0x2ce>
    {    
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    255a:	|     |  |  |   pea 17e50 <PutChar+0x372>
    2560:	|     |  |  |   jsr 1703c <KPrintF>
    2566:	|     |  |  |   addq.l #4,sp
      return;
    2568:	+-----|--|--|-- bra.w 29dc <CstPasteChar+0x73e>
    }
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    256c:	|     |  |  \-> clr.w 78(sp)
    cutwordssource = (x+single->width - winWidth)/16;
    2570:	|     |  |      movea.w 10(sp),a1
    2574:	|     |  |      movea.l 84(sp),a0
    2578:	|     |  |      move.l (a0),d0
    257a:	|     |  |      add.l a1,d0
    257c:	|     |  |      move.l d0,d1
    257e:	|     |  |      move.l 1a6f8 <winWidth>,d0
    2584:	|     |  |      sub.l d0,d1
    2586:	|     |  |      move.l d1,d0
    2588:	|     |  |      lsr.l #4,d0
    258a:	|     |  |      move.w d0,76(sp)
    cutmaskpixel = 0;
    258e:	|     |  |      clr.w 74(sp)
    bltalwm = 0xffff; //Last word contains source data to be blit
    2592:	|     |  |      move.w #-1,72(sp)
    bltapt = (ULONG) single->data+ystartsrc*single->width/8;
    2598:	|     |  |      movea.l 84(sp),a0
    259c:	|     |  |      move.l 24(a0),d0
    25a0:	|     |  |      move.l d0,d2
    25a2:	|     |  |      movea.l 84(sp),a0
    25a6:	|     |  |      move.l (a0),d0
    25a8:	|     |  |      move.l 48(sp),-(sp)
    25ac:	|     |  |      move.l d0,-(sp)
    25ae:	|     |  |      jsr 179c8 <__mulsi3>
    25b4:	|     |  |      addq.l #8,sp
    25b6:	|     |  |      lsr.l #3,d0
    25b8:	|     |  |      move.l d2,d1
    25ba:	|     |  |      add.l d0,d1
    25bc:	|     |  |      move.l d1,68(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    25c0:	|     |  |      move.l 1a6f8 <winWidth>,d0
    25c6:	|     |  |      move.l 52(sp),-(sp)
    25ca:	|     |  |      move.l d0,-(sp)
    25cc:	|     |  |      jsr 179c8 <__mulsi3>
    25d2:	|     |  |      addq.l #8,sp
    25d4:	|     |  |      lsr.l #3,d0
    25d6:	|     |  |      move.l 28(sp),d1
    25da:	|     |  |      add.l d0,d1
    25dc:	|     |  |      move.w 10(sp),d0
    25e0:	|     |  |  /-- bpl.s 25e6 <CstPasteChar+0x348>
    25e2:	|     |  |  |   addi.w #15,d0
    25e6:	|     |  |  \-> asr.w #4,d0
    25e8:	|     |  |      movea.w d0,a0
    25ea:	|     |  |      move.l a0,d0
    25ec:	|     |  |      add.l a0,d0
    25ee:	|     |  |      move.l d1,d2
    25f0:	|     |  |      add.l d0,d2
    25f2:	|     |  |      move.l d2,64(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    25f6:	|     |  |      move.l 1a6f8 <winWidth>,d0
    25fc:	|     |  |      move.l 52(sp),-(sp)
    2600:	|     |  |      move.l d0,-(sp)
    2602:	|     |  |      jsr 179c8 <__mulsi3>
    2608:	|     |  |      addq.l #8,sp
    260a:	|     |  |      lsr.l #3,d0
    260c:	|     |  |      move.l 28(sp),d1
    2610:	|     |  |      add.l d0,d1
    2612:	|     |  |      move.w 10(sp),d0
    2616:	|     |  |  /-- bpl.s 261c <CstPasteChar+0x37e>
    2618:	|     |  |  |   addi.w #15,d0
    261c:	|     |  |  \-> asr.w #4,d0
    261e:	|     |  |      movea.w d0,a0
    2620:	|     |  |      move.l a0,d0
    2622:	|     |  |      add.l a0,d0
    2624:	|     |  |      move.l d1,d2
    2626:	|     |  |      add.l d0,d2
    2628:	|     |  |      move.l d2,60(sp)
    bltcon0 = ((single->width%16) << 12);    
    262c:	|     |  |      movea.l 84(sp),a0
    2630:	|     |  |      move.l (a0),d0
    2632:	|     |  |      andi.l #-2147483633,d0
    2638:	|     |  |  /-- bpl.s 2642 <CstPasteChar+0x3a4>
    263a:	|     |  |  |   subq.l #1,d0
    263c:	|     |  |  |   moveq #-16,d1
    263e:	|     |  |  |   or.l d1,d0
    2640:	|     |  |  |   addq.l #1,d0
    2642:	|     |  |  \-> moveq #12,d2
    2644:	|     |  |      lsl.l d2,d0
    2646:	|     |  |      move.l d0,56(sp)
    
    *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource;
    264a:	|     |  |      movea.l 84(sp),a0
    264e:	|     |  |      move.l (a0),d0
    2650:	|     |  |      movea.l d0,a0
    2652:	|     |  |      cmpa.w #0,a0
    2656:	|     |  |  /-- bge.s 265c <CstPasteChar+0x3be>
    2658:	|     |  |  |   lea 15(a0),a0
    265c:	|     |  |  \-> move.l a0,d0
    265e:	|     |  |      asr.l #4,d0
    2660:	|     |  |      move.l d0,d0
    2662:	|     |  |      movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    2668:	|     |  |      move.l a0,d1
    266a:	|     |  |      addq.l #2,d1
    266c:	|     |  |      move.l d1,1a6e8 <CstBackDropBufferApplyCursor>
    2672:	|     |  |      add.w 76(sp),d0
    2676:	|     |  |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = blitheight;
    2678:	|     |  |      movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    267e:	|     |  |      move.l a0,d0
    2680:	|     |  |      addq.l #2,d0
    2682:	|     |  |      move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    2688:	|     |  |      move.l 44(sp),d0
    268c:	|     |  |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = (x/16)*2;
    268e:	|     |  |      move.w 10(sp),d0
    2692:	|     |  |  /-- bpl.s 2698 <CstPasteChar+0x3fa>
    2694:	|     |  |  |   addi.w #15,d0
    2698:	|     |  |  \-> asr.w #4,d0
    269a:	|     |  |      movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    26a0:	|     |  |      move.l a0,d1
    26a2:	|     |  |      addq.l #2,d1
    26a4:	|     |  |      move.l d1,1a6e8 <CstBackDropBufferApplyCursor>
    26aa:	|     |  |      add.w d0,d0
    26ac:	|     |  |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = ystartdst;
    26ae:	|     |  |      movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    26b4:	|     |  |      move.l a0,d0
    26b6:	|     |  |      addq.l #2,d0
    26b8:	|     |  |      move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    26be:	|     |  |      move.l 52(sp),d0
    26c2:	|     |  |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = 0;
    26c4:	|     |  |      movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    26ca:	|     |  |      move.l a0,d0
    26cc:	|     |  |      addq.l #2,d0
    26ce:	|     |  |      move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    26d4:	|     |  |      clr.w (a0)
    26d6:	|     +--|----- bra.w 283c <CstPasteChar+0x59e>
    
  } else { //Whole Sprite on Screen

    extrawords = 1;
    26da:	|     |  \----> move.w #1,78(sp)
    cutwordssource = 0;
    26e0:	|     |         clr.w 76(sp)
    cutmaskpixel = 0;
    26e4:	|     |         clr.w 74(sp)
    bltalwm = 0; //Last Word of this channel almost masked out
    26e8:	|     |         clr.w 72(sp)
    bltapt = (ULONG) single->data+ystartsrc*(single->width/16)*2;
    26ec:	|     |         movea.l 84(sp),a0
    26f0:	|     |         move.l 24(a0),d0
    26f4:	|     |         move.l d0,d2
    26f6:	|     |         movea.l 84(sp),a0
    26fa:	|     |         move.l (a0),d0
    26fc:	|     |         movea.l d0,a0
    26fe:	|     |         cmpa.w #0,a0
    2702:	|     |     /-- bge.s 2708 <CstPasteChar+0x46a>
    2704:	|     |     |   lea 15(a0),a0
    2708:	|     |     \-> move.l a0,d0
    270a:	|     |         asr.l #4,d0
    270c:	|     |         move.l 48(sp),-(sp)
    2710:	|     |         move.l d0,-(sp)
    2712:	|     |         jsr 179c8 <__mulsi3>
    2718:	|     |         addq.l #8,sp
    271a:	|     |         add.l d0,d0
    271c:	|     |         move.l d2,d1
    271e:	|     |         add.l d0,d1
    2720:	|     |         move.l d1,68(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    2724:	|     |         move.l 1a6f8 <winWidth>,d0
    272a:	|     |         move.l 52(sp),-(sp)
    272e:	|     |         move.l d0,-(sp)
    2730:	|     |         jsr 179c8 <__mulsi3>
    2736:	|     |         addq.l #8,sp
    2738:	|     |         lsr.l #3,d0
    273a:	|     |         move.l 28(sp),d1
    273e:	|     |         add.l d0,d1
    2740:	|     |         move.w 10(sp),d0
    2744:	|     |     /-- bpl.s 274a <CstPasteChar+0x4ac>
    2746:	|     |     |   addi.w #15,d0
    274a:	|     |     \-> asr.w #4,d0
    274c:	|     |         movea.w d0,a0
    274e:	|     |         move.l a0,d0
    2750:	|     |         add.l a0,d0
    2752:	|     |         move.l d1,d2
    2754:	|     |         add.l d0,d2
    2756:	|     |         move.l d2,64(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    275a:	|     |         move.l 1a6f8 <winWidth>,d0
    2760:	|     |         move.l 52(sp),-(sp)
    2764:	|     |         move.l d0,-(sp)
    2766:	|     |         jsr 179c8 <__mulsi3>
    276c:	|     |         addq.l #8,sp
    276e:	|     |         lsr.l #3,d0
    2770:	|     |         move.l 28(sp),d1
    2774:	|     |         add.l d0,d1
    2776:	|     |         move.w 10(sp),d0
    277a:	|     |     /-- bpl.s 2780 <CstPasteChar+0x4e2>
    277c:	|     |     |   addi.w #15,d0
    2780:	|     |     \-> asr.w #4,d0
    2782:	|     |         movea.w d0,a0
    2784:	|     |         move.l a0,d0
    2786:	|     |         add.l a0,d0
    2788:	|     |         move.l d1,d2
    278a:	|     |         add.l d0,d2
    278c:	|     |         move.l d2,60(sp)
    bltcon0 = ((x%16) << 12);
    2790:	|     |         move.w 10(sp),d0
    2794:	|     |         andi.w #-32753,d0
    2798:	|     |     /-- bpl.s 27a2 <CstPasteChar+0x504>
    279a:	|     |     |   subq.w #1,d0
    279c:	|     |     |   ori.w #-16,d0
    27a0:	|     |     |   addq.w #1,d0
    27a2:	|     |     \-> ext.l d0
    27a4:	|     |         moveq #12,d1
    27a6:	|     |         lsl.l d1,d0
    27a8:	|     |         move.l d0,56(sp)

    *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    27ac:	|     |         movea.l 84(sp),a0
    27b0:	|     |         move.l (a0),d0
    27b2:	|     |         movea.l d0,a0
    27b4:	|     |         cmpa.w #0,a0
    27b8:	|     |     /-- bge.s 27be <CstPasteChar+0x520>
    27ba:	|     |     |   lea 15(a0),a0
    27be:	|     |     \-> move.l a0,d0
    27c0:	|     |         asr.l #4,d0
    27c2:	|     |         move.l d0,d0
    27c4:	|     |         add.w 76(sp),d0
    27c8:	|     |         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    27ce:	|     |         move.l a0,d1
    27d0:	|     |         addq.l #2,d1
    27d2:	|     |         move.l d1,1a6e8 <CstBackDropBufferApplyCursor>
    27d8:	|     |         add.w 78(sp),d0
    27dc:	|     |         move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = blitheight;
    27de:	|     |         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    27e4:	|     |         move.l a0,d0
    27e6:	|     |         addq.l #2,d0
    27e8:	|     |         move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    27ee:	|     |         move.l 44(sp),d0
    27f2:	|     |         move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = (x/16)*2;
    27f4:	|     |         move.w 10(sp),d0
    27f8:	|     |     /-- bpl.s 27fe <CstPasteChar+0x560>
    27fa:	|     |     |   addi.w #15,d0
    27fe:	|     |     \-> asr.w #4,d0
    2800:	|     |         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    2806:	|     |         move.l a0,d1
    2808:	|     |         addq.l #2,d1
    280a:	|     |         move.l d1,1a6e8 <CstBackDropBufferApplyCursor>
    2810:	|     |         add.w d0,d0
    2812:	|     |         move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = ystartdst;
    2814:	|     |         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    281a:	|     |         move.l a0,d0
    281c:	|     |         addq.l #2,d0
    281e:	|     |         move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    2824:	|     |         move.l 52(sp),d0
    2828:	|     |         move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = 0;
    282a:	|     |         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    2830:	|     |         move.l a0,d0
    2832:	|     |         addq.l #2,d0
    2834:	|     |         move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    283a:	|     |         clr.w (a0)
    
  }

  UWORD bltafwm = 0xffff >> cutmaskpixel;
    283c:	|     \-------> moveq #0,d0
    283e:	|               move.w 74(sp),d0
    2842:	|               moveq #0,d1
    2844:	|               not.w d1
    2846:	|               asr.l d0,d1
    2848:	|               move.w d1,26(sp)
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    284c:	|               moveq #0,d1
    284e:	|               move.w 76(sp),d1
    2852:	|               moveq #0,d0
    2854:	|               move.w 78(sp),d0
    2858:	|               sub.l d0,d1
    285a:	|               move.l d1,d0
    285c:	|               add.w d0,d0
    285e:	|               move.w d0,24(sp)
  WORD bltcmod = winWidth/8-blitwidth*2-extrawords*2+cutwordssource*2;
    2862:	|               move.l 1a6f8 <winWidth>,d0
    2868:	|               lsr.l #3,d0
    286a:	|               move.l d0,d2
    286c:	|               move.w 76(sp),d1
    2870:	|               sub.w 78(sp),d1
    2874:	|               move.l 40(sp),d0
    2878:	|               sub.w d0,d1
    287a:	|               move.w d1,d0
    287c:	|               add.w d1,d0
    287e:	|               add.w d2,d0
    2880:	|               move.w d0,22(sp)
  WORD bltdmod = winWidth/8-blitwidth*2-extrawords*2+cutwordssource*2;
    2884:	|               move.l 1a6f8 <winWidth>,d0
    288a:	|               lsr.l #3,d0
    288c:	|               move.l d0,d2
    288e:	|               move.w 76(sp),d1
    2892:	|               sub.w 78(sp),d1
    2896:	|               move.l 40(sp),d0
    289a:	|               sub.w d0,d1
    289c:	|               move.w d1,d0
    289e:	|               add.w d1,d0
    28a0:	|               add.w d2,d0
    28a2:	|               move.w d0,20(sp)

  volatile struct Custom *custom = (struct Custom*)0xdff000;
    28a6:	|               move.l #14675968,16(sp)
  WaitBlit();
    28ae:	|               move.l 1a7b0 <GfxBase>,d0
    28b4:	|               movea.l d0,a6
    28b6:	|               jsr -228(a6)

  custom->bltafwm = bltafwm;
    28ba:	|               movea.l 16(sp),a0
    28be:	|               move.w 26(sp),68(a0)
  custom->bltalwm = bltalwm;
    28c4:	|               movea.l 16(sp),a0
    28c8:	|               move.w 72(sp),70(a0)
  custom->bltamod = bltamod;
    28ce:	|               move.w 24(sp),d0
    28d2:	|               movea.l 16(sp),a0
    28d6:	|               move.w d0,100(a0)
  custom->bltcmod = bltcmod;
    28da:	|               move.w 22(sp),d0
    28de:	|               movea.l 16(sp),a0
    28e2:	|               move.w d0,96(a0)
  custom->bltdmod = bltdmod;
    28e6:	|               move.w 20(sp),d0
    28ea:	|               movea.l 16(sp),a0
    28ee:	|               move.w d0,102(a0)

  UWORD bltcptplus = winWidth/8*winHeight;
    28f2:	|               move.l 1a6f8 <winWidth>,d0
    28f8:	|               lsr.l #3,d0
    28fa:	|               move.l d0,d1
    28fc:	|               move.l 1a6fc <winHeight>,d0
    2902:	|               move.l d0,d0
    2904:	|               move.w d1,d2
    2906:	|               muls.w d0,d2
    2908:	|               move.w d2,14(sp)
  UWORD tmp = textPaletteIndex;
    290c:	|               move.w 1a6be <textPaletteIndex>,38(sp)

  UWORD minterm;
  //Apply palette color to planeblit
  //Ugly double code in the name of performance
  UWORD tmp2 = tmp & 0x01;
    2914:	|               move.w 38(sp),d0
    2918:	|               andi.w #1,d0
    291c:	|               move.w d0,12(sp)
  if(tmp2) {
    2920:	|        /----- beq.s 292a <CstPasteChar+0x68c>
    minterm = 0xbfa;
    2922:	|        |      move.w #3066,36(sp)
    2928:	|        |  /-- bra.s 2930 <CstPasteChar+0x692>
  } else {
    minterm = 0xb0a;
    292a:	|        \--|-> move.w #2826,36(sp)
  }

  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2930:	|           \-> clr.l 32(sp)
    2934:	|     /-------- bra.w 29d2 <CstPasteChar+0x734>
  {

    custom->bltcon0 = bltcon0 + minterm;
    2938:	|  /--|-------> move.l 56(sp),d0
    293c:	|  |  |         add.w 36(sp),d0
    2940:	|  |  |         movea.l 16(sp),a0
    2944:	|  |  |         move.w d0,64(a0)
    custom->bltapt = (APTR) bltapt;
    2948:	|  |  |         move.l 68(sp),d0
    294c:	|  |  |         movea.l 16(sp),a0
    2950:	|  |  |         move.l d0,80(a0)
    custom->bltcpt = (APTR) bltcpt;
    2954:	|  |  |         move.l 64(sp),d0
    2958:	|  |  |         movea.l 16(sp),a0
    295c:	|  |  |         move.l d0,72(a0)
    custom->bltdpt = (APTR) bltdpt;
    2960:	|  |  |         move.l 60(sp),d0
    2964:	|  |  |         movea.l 16(sp),a0
    2968:	|  |  |         move.l d0,84(a0)
    custom->bltsize = (blitheight << 6) + blitwidth-cutwordssource+extrawords;
    296c:	|  |  |         move.l 44(sp),d0
    2970:	|  |  |         lsl.w #6,d0
    2972:	|  |  |         move.l 40(sp),d1
    2976:	|  |  |         add.w d1,d0
    2978:	|  |  |         sub.w 76(sp),d0
    297c:	|  |  |         add.w 78(sp),d0
    2980:	|  |  |         movea.l 16(sp),a0
    2984:	|  |  |         move.w d0,88(a0)
    bltcpt += bltcptplus;
    2988:	|  |  |         moveq #0,d0
    298a:	|  |  |         move.w 14(sp),d0
    298e:	|  |  |         add.l d0,64(sp)
    bltdpt += bltcptplus;
    2992:	|  |  |         moveq #0,d0
    2994:	|  |  |         move.w 14(sp),d0
    2998:	|  |  |         add.l d0,60(sp)

    //Apply palette color to planeblit
    //Ugly double code in the name of performance
    tmp = tmp >> 1;
    299c:	|  |  |         move.w 38(sp),d0
    29a0:	|  |  |         lsr.w #1,d0
    29a2:	|  |  |         move.w d0,38(sp)
    tmp2 = tmp & 0x01;
    29a6:	|  |  |         move.w 38(sp),d1
    29aa:	|  |  |         andi.w #1,d1
    29ae:	|  |  |         move.w d1,12(sp)
    if(tmp2) {
    29b2:	|  |  |  /----- beq.s 29bc <CstPasteChar+0x71e>
      minterm = 0xbfa;
    29b4:	|  |  |  |      move.w #3066,36(sp)
    29ba:	|  |  |  |  /-- bra.s 29c2 <CstPasteChar+0x724>
    } else {
      minterm = 0xb0a;
    29bc:	|  |  |  \--|-> move.w #2826,36(sp)
    }   

    WaitBlit();    
    29c2:	|  |  |     \-> move.l 1a7b0 <GfxBase>,d0
    29c8:	|  |  |         movea.l d0,a6
    29ca:	|  |  |         jsr -228(a6)
  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    29ce:	|  |  |         addq.l #1,32(sp)
    29d2:	|  |  \-------> moveq #4,d2
    29d4:	|  |            cmp.l 32(sp),d2
    29d8:	|  \----------- bge.w 2938 <CstPasteChar+0x69a>
 
  }   
}
    29dc:	\-------------> move.l (sp)+,d2
    29de:	                movea.l (sp)+,a6
    29e0:	                lea 72(sp),sp
    29e4:	                rts

000029e6 <CstRestoreScreen>:


void CstRestoreScreen()
{
    29e6:	                   lea -24(sp),sp
    29ea:	                   move.l a6,-(sp)
    29ec:	                   move.l d2,-(sp)
  volatile struct Custom *custom = (struct Custom*)0xdff000;  
    29ee:	                   move.l #14675968,16(sp)

  //struct CleanupQueue *cursor  = CstCleanupQueueDrawBuffer;
  if(!CstCleanupQueueDrawBuffer || !CstDrawBuffer) {
    29f6:	                   move.l 1a6e0 <CstCleanupQueueDrawBuffer>,d0
    29fc:	/----------------- beq.w 2c04 <CstRestoreScreen+0x21e>
    2a00:	|                  move.l 1a6d8 <CstDrawBuffer>,d0
    2a06:	+----------------- beq.w 2c04 <CstRestoreScreen+0x21e>
    return;
  } 

  WaitBlit();
    2a0a:	|                  move.l 1a7b0 <GfxBase>,d0
    2a10:	|                  movea.l d0,a6
    2a12:	|                  jsr -228(a6)
  
  custom->bltafwm = 0xffff;
    2a16:	|                  movea.l 16(sp),a0
    2a1a:	|                  move.w #-1,68(a0)
  custom->bltalwm = 0xffff;  
    2a20:	|                  movea.l 16(sp),a0
    2a24:	|                  move.w #-1,70(a0)
  custom->bltcon0 = 0x9f0;
    2a2a:	|                  movea.l 16(sp),a0
    2a2e:	|                  move.w #2544,64(a0)
  
  while(CstCleanupQueueDrawBuffer)
    2a34:	|     /----------- bra.w 2bf8 <CstRestoreScreen+0x212>
  {    

    if( CstCleanupQueueDrawBuffer->person && CstCleanupQueueDrawBuffer->person->samePosCount < 3)
    2a38:	|  /--|----------> movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    2a3e:	|  |  |            move.l 4(a0),d0
    2a42:	|  |  |  /-------- beq.w 2bc6 <CstRestoreScreen+0x1e0>
    2a46:	|  |  |  |         movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    2a4c:	|  |  |  |         movea.l 4(a0),a0
    2a50:	|  |  |  |         move.l 16(a0),d0
    2a54:	|  |  |  |         moveq #2,d1
    2a56:	|  |  |  |         cmp.l d0,d1
    2a58:	|  |  |  +-------- blt.w 2bc6 <CstRestoreScreen+0x1e0>
    {
      custom->bltamod = winWidth/8-CstCleanupQueueDrawBuffer->widthinwords*2;
    2a5c:	|  |  |  |         move.l 1a6f8 <winWidth>,d0
    2a62:	|  |  |  |         lsr.l #3,d0
    2a64:	|  |  |  |         move.l d0,d1
    2a66:	|  |  |  |         movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    2a6c:	|  |  |  |         move.w 8(a0),d0
    2a70:	|  |  |  |         add.w d0,d0
    2a72:	|  |  |  |         sub.w d0,d1
    2a74:	|  |  |  |         movea.l 16(sp),a0
    2a78:	|  |  |  |         move.w d1,100(a0)
      custom->bltdmod = winWidth/8-CstCleanupQueueDrawBuffer->widthinwords*2;
    2a7c:	|  |  |  |         move.l 1a6f8 <winWidth>,d0
    2a82:	|  |  |  |         lsr.l #3,d0
    2a84:	|  |  |  |         move.l d0,d1
    2a86:	|  |  |  |         movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    2a8c:	|  |  |  |         move.w 8(a0),d0
    2a90:	|  |  |  |         add.w d0,d0
    2a92:	|  |  |  |         sub.w d0,d1
    2a94:	|  |  |  |         movea.l 16(sp),a0
    2a98:	|  |  |  |         move.w d1,102(a0)
      ULONG bltapt = ((ULONG) CstBackDrop) + CstCleanupQueueDrawBuffer->starty*winWidth/8 + CstCleanupQueueDrawBuffer->startxinbytes;
    2a9c:	|  |  |  |         movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    2aa2:	|  |  |  |         move.w 14(a0),d0
    2aa6:	|  |  |  |         move.w d0,d0
    2aa8:	|  |  |  |         andi.l #65535,d0
    2aae:	|  |  |  |         move.l 1a6f8 <winWidth>,d1
    2ab4:	|  |  |  |         move.l d1,-(sp)
    2ab6:	|  |  |  |         move.l d0,-(sp)
    2ab8:	|  |  |  |         jsr 179c8 <__mulsi3>
    2abe:	|  |  |  |         addq.l #8,sp
    2ac0:	|  |  |  |         move.l d0,d1
    2ac2:	|  |  |  |         lsr.l #3,d1
    2ac4:	|  |  |  |         move.l 1a6c6 <CstBackDrop>,d0
    2aca:	|  |  |  |         add.l d0,d1
    2acc:	|  |  |  |         movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    2ad2:	|  |  |  |         move.w 12(a0),d0
    2ad6:	|  |  |  |         move.w d0,d0
    2ad8:	|  |  |  |         andi.l #65535,d0
    2ade:	|  |  |  |         move.l d1,d2
    2ae0:	|  |  |  |         add.l d0,d2
    2ae2:	|  |  |  |         move.l d2,28(sp)
      ULONG bltdpt = ((ULONG) CstDrawBuffer) + CstCleanupQueueDrawBuffer->starty*winWidth/8 + CstCleanupQueueDrawBuffer->startxinbytes;
    2ae6:	|  |  |  |         movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    2aec:	|  |  |  |         move.w 14(a0),d0
    2af0:	|  |  |  |         move.w d0,d0
    2af2:	|  |  |  |         andi.l #65535,d0
    2af8:	|  |  |  |         move.l 1a6f8 <winWidth>,d1
    2afe:	|  |  |  |         move.l d1,-(sp)
    2b00:	|  |  |  |         move.l d0,-(sp)
    2b02:	|  |  |  |         jsr 179c8 <__mulsi3>
    2b08:	|  |  |  |         addq.l #8,sp
    2b0a:	|  |  |  |         move.l d0,d1
    2b0c:	|  |  |  |         lsr.l #3,d1
    2b0e:	|  |  |  |         move.l 1a6d8 <CstDrawBuffer>,d0
    2b14:	|  |  |  |         add.l d0,d1
    2b16:	|  |  |  |         movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    2b1c:	|  |  |  |         move.w 12(a0),d0
    2b20:	|  |  |  |         move.w d0,d0
    2b22:	|  |  |  |         andi.l #65535,d0
    2b28:	|  |  |  |         move.l d1,d2
    2b2a:	|  |  |  |         add.l d0,d2
    2b2c:	|  |  |  |         move.l d2,24(sp)
      for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2b30:	|  |  |  |         clr.l 20(sp)
    2b34:	|  |  |  |     /-- bra.w 2bbc <CstRestoreScreen+0x1d6>
      {
        custom->bltapt = (APTR) bltapt;
    2b38:	|  |  |  |  /--|-> move.l 28(sp),d0
    2b3c:	|  |  |  |  |  |   movea.l 16(sp),a0
    2b40:	|  |  |  |  |  |   move.l d0,80(a0)
        custom->bltdpt = (APTR) bltdpt;
    2b44:	|  |  |  |  |  |   move.l 24(sp),d0
    2b48:	|  |  |  |  |  |   movea.l 16(sp),a0
    2b4c:	|  |  |  |  |  |   move.l d0,84(a0)
        custom->bltsize = (CstCleanupQueueDrawBuffer->height << 6) + CstCleanupQueueDrawBuffer->widthinwords;
    2b50:	|  |  |  |  |  |   movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    2b56:	|  |  |  |  |  |   move.w 10(a0),d0
    2b5a:	|  |  |  |  |  |   lsl.w #6,d0
    2b5c:	|  |  |  |  |  |   movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    2b62:	|  |  |  |  |  |   move.w 8(a0),d1
    2b66:	|  |  |  |  |  |   add.w d1,d0
    2b68:	|  |  |  |  |  |   movea.l 16(sp),a0
    2b6c:	|  |  |  |  |  |   move.w d0,88(a0)
        bltapt += winWidth/8*winHeight;
    2b70:	|  |  |  |  |  |   move.l 1a6f8 <winWidth>,d0
    2b76:	|  |  |  |  |  |   lsr.l #3,d0
    2b78:	|  |  |  |  |  |   move.l 1a6fc <winHeight>,d1
    2b7e:	|  |  |  |  |  |   move.l d1,-(sp)
    2b80:	|  |  |  |  |  |   move.l d0,-(sp)
    2b82:	|  |  |  |  |  |   jsr 179c8 <__mulsi3>
    2b88:	|  |  |  |  |  |   addq.l #8,sp
    2b8a:	|  |  |  |  |  |   add.l d0,28(sp)
        bltdpt += winWidth/8*winHeight;
    2b8e:	|  |  |  |  |  |   move.l 1a6f8 <winWidth>,d0
    2b94:	|  |  |  |  |  |   lsr.l #3,d0
    2b96:	|  |  |  |  |  |   move.l 1a6fc <winHeight>,d1
    2b9c:	|  |  |  |  |  |   move.l d1,-(sp)
    2b9e:	|  |  |  |  |  |   move.l d0,-(sp)
    2ba0:	|  |  |  |  |  |   jsr 179c8 <__mulsi3>
    2ba6:	|  |  |  |  |  |   addq.l #8,sp
    2ba8:	|  |  |  |  |  |   add.l d0,24(sp)
        WaitBlit();
    2bac:	|  |  |  |  |  |   move.l 1a7b0 <GfxBase>,d0
    2bb2:	|  |  |  |  |  |   movea.l d0,a6
    2bb4:	|  |  |  |  |  |   jsr -228(a6)
      for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2bb8:	|  |  |  |  |  |   addq.l #1,20(sp)
    2bbc:	|  |  |  |  |  \-> moveq #4,d0
    2bbe:	|  |  |  |  |      cmp.l 20(sp),d0
    2bc2:	|  |  |  |  \----- bge.w 2b38 <CstRestoreScreen+0x152>
      }
    }
    struct CleanupQueue *todelete = CstCleanupQueueDrawBuffer;
    2bc6:	|  |  |  \-------> move.l 1a6e0 <CstCleanupQueueDrawBuffer>,12(sp)
    CstCleanupQueueDrawBuffer = CstCleanupQueueDrawBuffer->next;  
    2bce:	|  |  |            movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    2bd4:	|  |  |            move.l 16(a0),d0
    2bd8:	|  |  |            move.l d0,1a6e0 <CstCleanupQueueDrawBuffer>
    FreeVec(todelete);    
    2bde:	|  |  |            move.l 12(sp),8(sp)
    2be4:	|  |  |            move.l 1a7a4 <SysBase>,d0
    2bea:	|  |  |            movea.l d0,a6
    2bec:	|  |  |            movea.l 8(sp),a1
    2bf0:	|  |  |            jsr -690(a6)
    todelete = NULL;
    2bf4:	|  |  |            clr.l 12(sp)
  while(CstCleanupQueueDrawBuffer)
    2bf8:	|  |  \----------> move.l 1a6e0 <CstCleanupQueueDrawBuffer>,d0
    2bfe:	|  \-------------- bne.w 2a38 <CstRestoreScreen+0x52>
    2c02:	|              /-- bra.s 2c06 <CstRestoreScreen+0x220>
    return;
    2c04:	\--------------|-> nop
  }
  
}
    2c06:	               \-> move.l (sp)+,d2
    2c08:	                   movea.l (sp)+,a6
    2c0a:	                   lea 24(sp),sp
    2c0e:	                   rts

00002c10 <CstScaleSprite>:

__attribute__((optimize("Ofast"))) 
void CstScaleSprite( struct sprite *single, struct onScreenPerson *person, WORD x, WORD y, UWORD destinationtype)
{  
    2c10:	                                                                               lea -44(sp),sp
    2c14:	                                                                               movem.l d2-d7/a2-a6,-(sp)
    2c18:	                                                                               movea.l 92(sp),a2
    2c1c:	                                                                               move.l 96(sp),82(sp)
    2c22:	                                                                               move.l 100(sp),d6
    2c26:	                                                                               movea.l 104(sp),a4
    2c2a:	                                                                               move.l 108(sp),d2
    2c2e:	                                                                               move.w d6,d5
    2c30:	                                                                               move.w a4,d3
    2c32:	                                                                               move.w d2,50(sp)
  if( single->width == 320)
  {
    single->width = 320;
  }

  UBYTE *mask = CstDrawZBuffer( single, zBuffer, x, y);
    2c36:	                                                                               movea.w a4,a5
    2c38:	                                                                               move.w d6,d4
    2c3a:	                                                                               ext.l d4
    2c3c:	                                                                               move.l a5,-(sp)
    2c3e:	                                                                               move.l d4,-(sp)
    2c40:	                                                                               move.l 1a804 <zBuffer>,-(sp)
    2c46:	                                                                               move.l a2,-(sp)
    2c48:	                                                                               jsr 14e8 <CstDrawZBuffer>
    2c4e:	                                                                               move.l d0,84(sp)

  UWORD *destination = 0;
  switch(destinationtype)
    2c52:	                                                                               lea 16(sp),sp
    2c56:	                                                                               cmpi.w #1,50(sp)
    2c5c:	                                                /----------------------------- beq.w 3066 <CstScaleSprite+0x456>
    2c60:	                                                |                              cmpi.w #2,50(sp)
    2c66:	                                                |                       /----- beq.w 2f2c <CstScaleSprite+0x31c>
    2c6a:	                                                |                       |      suba.l a6,a6
  ULONG ystartdst;
  ULONG ystartsrc; 
  ULONG blitheight;

  if( y < 0) {
    if(y + single->height < 0) {
    2c6c:	                                                |  /--------------------|----> move.l 4(a2),d1
    2c70:	                                                |  |                    |      move.l a5,d0
    2c72:	                                                |  |                    |      add.l d1,d0
  if( y < 0) {
    2c74:	                                                |  |                    |      tst.w d3
    2c76:	                                                |  |           /--------|----- blt.w 2f48 <CstScaleSprite+0x338>
      return;
    }
    ystartdst = 0;
    ystartsrc = y*-1;
    blitheight = single->height+y;
  } else if(y+single->height > (int) winHeight) {
    2c7a:	                                                |  |           |  /-----|----> movea.l 1a6fc <winHeight>,a0
    2c80:	                                                |  |           |  |     |      cmp.l a0,d0
    2c82:	                                                |  |  /--------|--|-----|----- ble.w 3070 <CstScaleSprite+0x460>
    if(y  > (int) winHeight) {
    2c86:	                                                |  |  |        |  |     |      cmpa.l a5,a0
    2c88:	                     /--------------------------|--|--|--------|--|-----|----- blt.w 312e <CstScaleSprite+0x51e>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
      return;
    }
    ystartdst = y;
    ystartsrc = 0;
    blitheight = winHeight-y;
    2c8c:	                     |                          |  |  |        |  |     |      suba.l a5,a0
    2c8e:	                     |                          |  |  |        |  |     |      move.l a0,74(sp)
    ystartsrc = 0;
    2c92:	                     |                          |  |  |        |  |     |      moveq #0,d7


  if( x < 0) 
  { //Leftmost part outside screen

    if(x + single->width < 0) {
    2c94:	                     |                          |  |  |  /-----|--|-----|----> move.l (a2),d3
    2c96:	                     |                          |  |  |  |     |  |     |      move.l d4,d0
    2c98:	                     |                          |  |  |  |     |  |     |      add.l d3,d0
  if( x < 0) 
    2c9a:	                     |                          |  |  |  |     |  |     |      tst.w d5
    2c9c:	                     |                          |  |  |  |     |  |  /--|----- blt.w 2f64 <CstScaleSprite+0x354>
      *CstBackDropBufferApplyCursor++ = blitheight;
      *CstBackDropBufferApplyCursor++ = 0;
      *CstBackDropBufferApplyCursor++ = ystartdst;
      *CstBackDropBufferApplyCursor++ = 0;
    }
  } else if(x + single->width > (int) winWidth) { //Rightmost part outside screen   
    2ca0:	                     |                          |  |  |  |     |  |  |  |  /-> move.l 1a6f8 <winWidth>,d5
    2ca6:	                     |                          |  |  |  |     |  |  |  |  |   cmp.l d5,d0
    2ca8:	                     |                          |  |  |  |  /--|--|--|--|--|-- ble.w 307a <CstScaleSprite+0x46a>

    if(x - single->width > (int) winWidth)
    2cac:	                     |                          |  |  |  |  |  |  |  |  |  |   sub.l d3,d4
    2cae:	                     |                          |  |  |  |  |  |  |  |  |  |   cmp.l d5,d4
    2cb0:	                     +--------------------------|--|--|--|--|--|--|--|--|--|-- bgt.w 312e <CstScaleSprite+0x51e>
    {    
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
      return;
    }
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    cutwordssource = (x+single->width - winWidth)/16;
    2cb4:	                     |                          |  |  |  |  |  |  |  |  |  |   sub.l d5,d0
    2cb6:	                     |                          |  |  |  |  |  |  |  |  |  |   lsr.l #4,d0
    2cb8:	                     |                          |  |  |  |  |  |  |  |  |  |   move.l d0,64(sp)
    2cbc:	                     |                          |  |  |  |  |  |  |  |  |  |   movea.w d0,a3
    cutmaskpixel = 0;    
    bltapt = ((ULONG) mask)+ystartsrc*single->width/8;
    2cbe:	                     |                          |  |  |  |  |  |  |  |  |  |   move.l #96712,d2
    2cc4:	                     |                          |  |  |  |  |  |  |  |  |  |   move.l d7,-(sp)
    2cc6:	                     |                          |  |  |  |  |  |  |  |  |  |   move.l d3,-(sp)
    2cc8:	                     |                          |  |  |  |  |  |  |  |  |  |   movea.l d2,a0
    2cca:	                     |                          |  |  |  |  |  |  |  |  |  |   jsr (a0)
    2ccc:	                     |                          |  |  |  |  |  |  |  |  |  |   addq.l #8,sp
    2cce:	                     |                          |  |  |  |  |  |  |  |  |  |   lsr.l #3,d0
    2cd0:	                     |                          |  |  |  |  |  |  |  |  |  |   move.l 68(sp),d7
    2cd4:	                     |                          |  |  |  |  |  |  |  |  |  |   add.l d0,d7
    bltbpt = (ULONG) single->data+ystartsrc*single->width/8;
    2cd6:	                     |                          |  |  |  |  |  |  |  |  |  |   add.l 24(a2),d0
    2cda:	                     |                          |  |  |  |  |  |  |  |  |  |   move.l d0,60(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    2cde:	                     |                          |  |  |  |  |  |  |  |  |  |   move.l a5,-(sp)
    2ce0:	                     |                          |  |  |  |  |  |  |  |  |  |   move.l d5,-(sp)
    2ce2:	                     |                          |  |  |  |  |  |  |  |  |  |   movea.l d2,a1
    2ce4:	                     |                          |  |  |  |  |  |  |  |  |  |   jsr (a1)
    2ce6:	                     |                          |  |  |  |  |  |  |  |  |  |   addq.l #8,sp
    2ce8:	                     |                          |  |  |  |  |  |  |  |  |  |   lsr.l #3,d0
    2cea:	                     |                          |  |  |  |  |  |  |  |  |  |   move.w d6,d1
    2cec:	                     |                          |  |  |  |  |  |  |  |  |  |   asr.w #4,d1
    2cee:	                     |                          |  |  |  |  |  |  |  |  |  |   movea.w d1,a0
    2cf0:	                     |                          |  |  |  |  |  |  |  |  |  |   adda.l a0,a0
    2cf2:	                     |                          |  |  |  |  |  |  |  |  |  |   adda.l a0,a6
    2cf4:	                     |                          |  |  |  |  |  |  |  |  |  |   adda.l d0,a6
    2cf6:	                     |                          |  |  |  |  |  |  |  |  |  |   move.l a6,54(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    bltcon0 = 0xfca + ((x%16) << 12);
    2cfa:	                     |                          |  |  |  |  |  |  |  |  |  |   moveq #15,d0
    2cfc:	                     |                          |  |  |  |  |  |  |  |  |  |   and.l d6,d0
    bltcon1 = ((x%16) << 12);
    bltalwm = 0xffff << (x%16); 
    2cfe:	                     |                          |  |  |  |  |  |  |  |  |  |   moveq #0,d2
    2d00:	                     |                          |  |  |  |  |  |  |  |  |  |   not.w d2
    2d02:	                     |                          |  |  |  |  |  |  |  |  |  |   lsl.l d0,d2
    2d04:	                     |                          |  |  |  |  |  |  |  |  |  |   move.w d2,58(sp)
      CstCleanupQueueDrawBuffer->height = blitheight;
    2d08:	                     |                          |  |  |  |  |  |  |  |  |  |   move.w 76(sp),72(sp)
      CstCleanupQueueDrawBuffer->x = x;
      CstCleanupQueueDrawBuffer->y = y;
      CstCleanupQueueDrawBuffer->person = person; 
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource; //Width in X Bytes
      CstCleanupQueueDrawBuffer->height =  blitheight; //Height
      CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; //X Start in Bytes;
    2d0e:	                     |                          |  |  |  |  |  |  |  |  |  |   move.w d1,d2
    2d10:	                     |                          |  |  |  |  |  |  |  |  |  |   add.w d1,d2
      *CstBackDropBufferApplyCursor++ = 0;
    }
  }

  UWORD bltafwm = 0xffff >> cutmaskpixel;
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    2d12:	                     |                          |  |  |  |  |  |  |  |  |  |   move.w 66(sp),d4
    2d16:	                     |                          |  |  |  |  |  |  |  |  |  |   add.w d4,d4
    bltcon0 = 0xfca + ((x%16) << 12);
    2d18:	                     |                          |  |  |  |  |  |  |  |  |  |   moveq #12,d1
    2d1a:	                     |                          |  |  |  |  |  |  |  |  |  |   lsl.l d1,d0
  custom->bltalwm = bltalwm;
  custom->bltamod = bltamod;
  custom->bltbmod = bltbmod;
  custom->bltcmod = bltcmod;
  custom->bltdmod = bltdmod;
  custom->bltcon0 = bltcon0;
    2d1c:	                     |                          |  |  |  |  |  |  |  |  |  |   addi.w #4042,d0
    2d20:	                     |                          |  |  |  |  |  |  |  |  |  |   move.w d0,78(sp)
  custom->bltcon1 = bltcon1;  
    2d24:	                     |                          |  |  |  |  |  |  |  |  |  |   move.w d6,d0
    2d26:	                     |                          |  |  |  |  |  |  |  |  |  |   lsl.w d1,d0
    2d28:	                     |                          |  |  |  |  |  |  |  |  |  |   move.w d0,80(sp)
    if( destinationtype == SCREEN)
    2d2c:	                     |                          |  |  |  |  |  |  |  |  |  |   cmpi.w #1,50(sp)
    2d32:	            /--------|--------------------------|--|--|--|--|--|--|--|--|--|-- beq.w 3458 <CstScaleSprite+0x848>
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource;
    2d36:	            |        |                          |  |  |  |  |  |  |  |  |  |   movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    2d3c:	            |        |                          |  |  |  |  |  |  |  |  |  |   move.l d3,d0
    2d3e:	   /--------|--------|--------------------------|--|--|--|--|--|--|--|--|--|-- bmi.w 350e <CstScaleSprite+0x8fe>
    2d42:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   asr.l #4,d0
    2d44:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   move.w 66(sp),d1
    2d48:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   add.w d0,d1
    2d4a:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   move.w d1,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    2d4c:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   move.w 72(sp),2(a0)
      *CstBackDropBufferApplyCursor++ = (x/16)*2;
    2d52:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   move.w d2,4(a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    2d56:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   move.w a5,6(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    2d5a:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   lea 10(a0),a1
    2d5e:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   move.l a1,1a6e8 <CstBackDropBufferApplyCursor>
    2d64:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   clr.w 8(a0)
    2d68:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   move.w #-1,66(sp)
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    2d6e:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   clr.w d2
    2d70:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   move.l #108452,50(sp)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    2d78:	/--|--------|--------|--------------------------|--|--|--|--|--|--|--|--|--|-> lsr.l #3,d5
    2d7a:	|  |        |        |                          |  |  |  |  |  |  |  |  |  |   add.w d4,d5
    2d7c:	|  |        |        |                          |  |  |  |  |  |  |  |  |  |   tst.l d3
    2d7e:	|  |  /-----|--------|--------------------------|--|--|--|--|--|--|--|--|--|-- blt.w 3346 <CstScaleSprite+0x736>
    2d82:	|  |  |  /--|--------|--------------------------|--|--|--|--|--|--|--|--|--|-> asr.l #3,d3
    2d84:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   sub.w d3,d5
  WaitBlit();
    2d86:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   lea 1a7b0 <GfxBase>,a4
    2d8c:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   movea.l (a4),a6
    2d8e:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
  custom->bltafwm = bltafwm;
    2d92:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.w 66(sp),dff044 <gcc8_c_support.c.1fed348d+0xdb3d86>
  custom->bltalwm = bltalwm;
    2d9a:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.w 58(sp),dff046 <gcc8_c_support.c.1fed348d+0xdb3d88>
  custom->bltamod = bltamod;
    2da2:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.w d4,dff064 <gcc8_c_support.c.1fed348d+0xdb3da6>
  custom->bltbmod = bltbmod;
    2da8:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.w d4,dff062 <gcc8_c_support.c.1fed348d+0xdb3da4>
  custom->bltcmod = bltcmod;
    2dae:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.w d5,dff060 <gcc8_c_support.c.1fed348d+0xdb3da2>
  custom->bltdmod = bltdmod;
    2db4:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.w d5,dff066 <gcc8_c_support.c.1fed348d+0xdb3da8>
  custom->bltcon0 = bltcon0;
    2dba:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.w 78(sp),dff040 <gcc8_c_support.c.1fed348d+0xdb3d82>
  custom->bltcon1 = bltcon1;  
    2dc2:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.w 80(sp),dff042 <gcc8_c_support.c.1fed348d+0xdb3d84>

  UWORD bltbptplus = (single->width >> 3)*single->height;
    2dca:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.l (a2),d0
  {
    custom->bltapt = (APTR) bltapt;
    custom->bltbpt = (APTR) bltbpt;
    custom->bltcpt = (APTR) bltcpt;
    custom->bltdpt = (APTR) bltdpt;
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    2dcc:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.w 72(sp),d5
    2dd0:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   lsl.w #6,d5
  UWORD bltbptplus = (single->width >> 3)*single->height;
    2dd2:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.l d0,d4
    2dd4:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   asr.l #3,d4
    2dd6:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   muls.w 6(a2),d4
    bltbpt += bltbptplus;
    2dda:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   andi.l #65535,d4
  UWORD bltcptplus = winWidth/8*winHeight;
    2de0:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.l 1a6f8 <winWidth>,d3
    2de6:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   lsr.l #3,d3
    2de8:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   muls.w 1a6fe <winHeight+0x2>,d3
    bltcpt += bltcptplus;
    2dee:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   andi.l #65535,d3
    custom->bltapt = (APTR) bltapt;
    2df4:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.l d7,dff050 <gcc8_c_support.c.1fed348d+0xdb3d92>
    custom->bltbpt = (APTR) bltbpt;
    2dfa:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.l 60(sp),dff04c <gcc8_c_support.c.1fed348d+0xdb3d8e>
    custom->bltcpt = (APTR) bltcpt;
    2e02:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.l 54(sp),dff048 <gcc8_c_support.c.1fed348d+0xdb3d8a>
    custom->bltdpt = (APTR) bltdpt;
    2e0a:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.l 54(sp),dff054 <gcc8_c_support.c.1fed348d+0xdb3d96>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    2e12:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   tst.l d0
    2e14:	|  |  |  |  |  /-----|--------------------------|--|--|--|--|--|--|--|--|--|-- blt.w 324a <CstScaleSprite+0x63a>
    2e18:	|  |  |  |  |  |  /--|--------------------------|--|--|--|--|--|--|--|--|--|-> asr.l #4,d0
    2e1a:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   add.w d2,d0
    2e1c:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   add.w d5,d0
    2e1e:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   sub.w a3,d0
    2e20:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   move.w d0,dff058 <gcc8_c_support.c.1fed348d+0xdb3d9a>
    bltbpt += bltbptplus;
    2e26:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   movea.l 60(sp),a5
    2e2a:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   adda.l d4,a5
    bltcpt += bltcptplus;
    2e2c:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   move.l 54(sp),d6
    2e30:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   add.l d3,d6
    bltdpt += bltcptplus;
    WaitBlit();
    2e32:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   movea.l (a4),a6
    2e34:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    2e38:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    2e3a:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   move.l d7,dff050 <gcc8_c_support.c.1fed348d+0xdb3d92>
    custom->bltbpt = (APTR) bltbpt;
    2e40:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   move.l a5,dff04c <gcc8_c_support.c.1fed348d+0xdb3d8e>
    custom->bltcpt = (APTR) bltcpt;
    2e46:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   move.l d6,dff048 <gcc8_c_support.c.1fed348d+0xdb3d8a>
    custom->bltdpt = (APTR) bltdpt;
    2e4c:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   move.l d6,dff054 <gcc8_c_support.c.1fed348d+0xdb3d96>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    2e52:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   tst.l d0
    2e54:	|  |  |  |  |  |  |  |                 /--------|--|--|--|--|--|--|--|--|--|-- blt.w 328e <CstScaleSprite+0x67e>
    2e58:	|  |  |  |  |  |  |  |                 |     /--|--|--|--|--|--|--|--|--|--|-> asr.l #4,d0
    2e5a:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   add.w d2,d0
    2e5c:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   add.w d5,d0
    2e5e:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   sub.w a3,d0
    2e60:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   move.w d0,dff058 <gcc8_c_support.c.1fed348d+0xdb3d9a>
    bltbpt += bltbptplus;
    2e66:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   adda.l d4,a5
    bltcpt += bltcptplus;
    2e68:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   add.l d3,d6
    WaitBlit();
    2e6a:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   movea.l (a4),a6
    2e6c:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    2e70:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    2e72:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   move.l d7,dff050 <gcc8_c_support.c.1fed348d+0xdb3d92>
    custom->bltbpt = (APTR) bltbpt;
    2e78:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   move.l a5,dff04c <gcc8_c_support.c.1fed348d+0xdb3d8e>
    custom->bltcpt = (APTR) bltcpt;
    2e7e:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   move.l d6,dff048 <gcc8_c_support.c.1fed348d+0xdb3d8a>
    custom->bltdpt = (APTR) bltdpt;
    2e84:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   move.l d6,dff054 <gcc8_c_support.c.1fed348d+0xdb3d96>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    2e8a:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   tst.l d0
    2e8c:	|  |  |  |  |  |  |  |           /-----|-----|--|--|--|--|--|--|--|--|--|--|-- blt.w 32ca <CstScaleSprite+0x6ba>
    2e90:	|  |  |  |  |  |  |  |           |     |  /--|--|--|--|--|--|--|--|--|--|--|-> asr.l #4,d0
    2e92:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   add.w d2,d0
    2e94:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   add.w d5,d0
    2e96:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   sub.w a3,d0
    2e98:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   move.w d0,dff058 <gcc8_c_support.c.1fed348d+0xdb3d9a>
    bltbpt += bltbptplus;
    2e9e:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   adda.l d4,a5
    bltcpt += bltcptplus;
    2ea0:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   add.l d3,d6
    WaitBlit();
    2ea2:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   movea.l (a4),a6
    2ea4:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    2ea8:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    2eaa:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   move.l d7,dff050 <gcc8_c_support.c.1fed348d+0xdb3d92>
    custom->bltbpt = (APTR) bltbpt;
    2eb0:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   move.l a5,dff04c <gcc8_c_support.c.1fed348d+0xdb3d8e>
    custom->bltcpt = (APTR) bltcpt;
    2eb6:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   move.l d6,dff048 <gcc8_c_support.c.1fed348d+0xdb3d8a>
    custom->bltdpt = (APTR) bltdpt;
    2ebc:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   move.l d6,dff054 <gcc8_c_support.c.1fed348d+0xdb3d96>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    2ec2:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   tst.l d0
    2ec4:	|  |  |  |  |  |  |  |     /-----|-----|--|--|--|--|--|--|--|--|--|--|--|--|-- blt.w 3306 <CstScaleSprite+0x6f6>
    2ec8:	|  |  |  |  |  |  |  |     |     |  /--|--|--|--|--|--|--|--|--|--|--|--|--|-> asr.l #4,d0
    2eca:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   add.w d2,d0
    2ecc:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   add.w d5,d0
    2ece:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   sub.w a3,d0
    2ed0:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.w d0,dff058 <gcc8_c_support.c.1fed348d+0xdb3d9a>
    bltbpt += bltbptplus;
    2ed6:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   add.l a5,d4
    bltcpt += bltcptplus;
    2ed8:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   add.l d6,d3
    WaitBlit();
    2eda:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   movea.l (a4),a6
    2edc:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    2ee0:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    2ee2:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.l d7,dff050 <gcc8_c_support.c.1fed348d+0xdb3d92>
    custom->bltbpt = (APTR) bltbpt;
    2ee8:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.l d4,dff04c <gcc8_c_support.c.1fed348d+0xdb3d8e>
    custom->bltcpt = (APTR) bltcpt;
    2eee:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.l d3,dff048 <gcc8_c_support.c.1fed348d+0xdb3d8a>
    custom->bltdpt = (APTR) bltdpt;
    2ef4:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.l d3,dff054 <gcc8_c_support.c.1fed348d+0xdb3d96>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    2efa:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   tst.l d0
    2efc:	|  |  |  |  |  |  |  |  /--|-----|--|--|--|--|--|--|--|--|--|--|--|--|--|--|-- blt.w 321a <CstScaleSprite+0x60a>
    2f00:	|  |  |  |  |  |  |  |  |  |  /--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|-> asr.l #4,d0
    2f02:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   add.w d0,d2
    2f04:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   add.w d5,d2
    2f06:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   sub.w a3,d2
    2f08:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.w d2,dff058 <gcc8_c_support.c.1fed348d+0xdb3d9a>
    WaitBlit();
    2f0e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   movea.l (a4),a6
    2f10:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
  }   

  FreeVec(mask);
    2f14:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   movea.l 50(sp),a0
    2f18:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   movea.l (a0),a6
    2f1a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   movea.l 68(sp),a1
    2f1e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   jsr -690(a6)
}
    2f22:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   movem.l (sp)+,d2-d7/a2-a6
    2f26:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   lea 44(sp),sp
    2f2a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   rts
      CstApplyBackDropCounter = 2;
    2f2c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \--|-> move.w #2,1a6d2 <CstApplyBackDropCounter>
      destination = (UWORD *) CstBackDrop;      
    2f34:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   movea.l 1a6c6 <CstBackDrop>,a6
    if(y + single->height < 0) {
    2f3a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   move.l 4(a2),d1
    2f3e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   move.l a5,d0
    2f40:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   add.l d1,d0
  if( y < 0) {
    2f42:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   tst.w d3
    2f44:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \--|-----|-- bge.w 2c7a <CstScaleSprite+0x6a>
    if(y + single->height < 0) {
    2f48:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \-----|-----|-> tst.l d0
    2f4a:	|  |  |  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|--|--|--|--------|-----|-- blt.w 312e <CstScaleSprite+0x51e>
    ystartsrc = y*-1;
    2f4e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     |   move.l a5,d7
    2f50:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     |   neg.l d7
    blitheight = single->height+y;
    2f52:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     |   move.l d0,74(sp)
    ystartdst = 0;
    2f56:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     |   suba.l a5,a5
    if(x + single->width < 0) {
    2f58:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     |   move.l (a2),d3
    2f5a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     |   move.l d4,d0
    2f5c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     |   add.l d3,d0
  if( x < 0) 
    2f5e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     |   tst.w d5
    2f60:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     \-- bge.w 2ca0 <CstScaleSprite+0x90>
    if(x + single->width < 0) {
    2f64:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        \-------> tst.l d0
    2f66:	|  |  |  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|--|--|--|----------------- blt.w 312e <CstScaleSprite+0x51e>
    cutwordssource = (x*-1)/16; 
    2f6a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w d6,d0
    2f6c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  addi.w #15,d0
    2f70:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  asr.w #4,d0
    2f72:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  neg.w d0
    2f74:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w d0,58(sp)
    2f78:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  movea.w d0,a3
    cutmaskpixel = (x*-1)%16;   
    2f7a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  neg.l d4
    2f7c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  moveq #15,d0
    2f7e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  and.l d0,d4
      bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    2f80:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l 1a6f8 <winWidth>,d5
    2f86:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  lea 179c8 <__mulsi3>,a0
    2f8c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l d5,-(sp)
    2f8e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l a5,-(sp)
    2f90:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l a0,54(sp)
    2f94:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  jsr (a0)
    2f96:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  addq.l #8,sp
    2f98:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  lsr.l #3,d0
    if( cutmaskpixel > 0)
    2f9a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  movea.l 46(sp),a0
    2f9e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  tst.l d4
    2fa0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        /-------- beq.w 3144 <CstScaleSprite+0x534>
      bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    2fa4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         lea (-2,a6,d0.l),a6
    2fa8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.l a6,54(sp)
      bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    2fac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.w 58(sp),d1
    2fb0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         subq.w #1,d1
      bltcon0 = 0xfca + ((16-cutmaskpixel) << 12);
    2fb2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         movea.w #16,a1
    2fb6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         suba.l d4,a1
    2fb8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.l a1,d2
    2fba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #12,d0
    2fbc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         lsl.l d0,d2
  custom->bltcon0 = bltcon0;
    2fbe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         addi.w #4042,d2
    2fc2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.w d2,78(sp)
  custom->bltcon1 = bltcon1;  
    2fc6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.w a1,d2
    2fc8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         lsl.w d0,d2
    2fca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.w d2,80(sp)
      extrawords = 1;
    2fce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #1,d2
    bltapt = ((ULONG) mask)+cutwordssource*2+ystartsrc*single->width/8;
    2fd0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         movea.w 58(sp),a6
    2fd4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         adda.l a6,a6
    2fd6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.l d7,-(sp)
    2fd8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.l d3,-(sp)
    2fda:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.l d1,54(sp)
    2fde:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         jsr (a0)
    2fe0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         addq.l #8,sp
    2fe2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         lsr.l #3,d0
    2fe4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         movea.l 68(sp),a0
    2fe8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         adda.l a6,a0
    2fea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.l a0,d7
    2fec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         add.l d0,d7
    bltbpt = ((ULONG) single->data)+cutwordssource*2+ystartsrc*single->width/8;
    2fee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         adda.l 24(a2),a6
    2ff2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         add.l a6,d0
    2ff4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.l d0,60(sp)
      CstCleanupQueueDrawBuffer->height = blitheight;
    2ff8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.w 76(sp),72(sp)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    2ffe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.w a5,86(sp)
  UWORD bltafwm = 0xffff >> cutmaskpixel;
    3002:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #0,d0
    3004:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         not.w d0
    3006:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         asr.l d4,d0
    3008:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.w d0,66(sp)
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    300c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.l 46(sp),d1
    3010:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.w d1,d4
    3012:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         add.w d1,d4
    if( destinationtype == SCREEN)
    3014:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         cmpi.w #1,50(sp)
    301a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  /----- beq.w 31a8 <CstScaleSprite+0x598>
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    301e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  /-> movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    3024:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   move.l d3,d0
    3026:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   asr.l #4,d0
    3028:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   add.w 58(sp),d0
    302c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   add.w d2,d0
    302e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    3030:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   move.w 76(sp),2(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    3036:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   clr.w 4(a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    303a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   move.w a5,6(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    303e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   lea 10(a0),a1
    3042:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   move.l a1,1a6e8 <CstBackDropBufferApplyCursor>
    3048:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   clr.w 8(a0)
    bltalwm = 0; //Last Word of this channel almost masked out
    304c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   clr.w 58(sp)
    3050:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   move.l #108452,50(sp)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    3058:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   lsr.l #3,d5
    305a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   add.w d4,d5
    305c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   tst.l d3
    305e:	|  |  |  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--------|--|--|-- bge.w 2d82 <CstScaleSprite+0x172>
    3062:	|  |  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--------|--|--|-- bra.w 3346 <CstScaleSprite+0x736>
      destination = (UWORD *) CstDrawBuffer;      
    3066:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \--|--|--|--|--------|--|--|-> movea.l 1a6d8 <CstDrawBuffer>,a6
      break;
    306c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     \--|--|--|--------|--|--|-- bra.w 2c6c <CstScaleSprite+0x5c>
    blitheight = single->height;
    3070:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        \--|--|--------|--|--|-> move.l d1,74(sp)
    ystartsrc = 0;
    3074:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |  |        |  |  |   moveq #0,d7
    3076:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           \--|--------|--|--|-- bra.w 2c94 <CstScaleSprite+0x84>
    bltapt = ((ULONG) mask) +ystartsrc*single->width/8;
    307a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              \--------|--|--|-> lea 179c8 <__mulsi3>,a3
    3080:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.l d7,-(sp)
    3082:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.l d3,-(sp)
    3084:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   jsr (a3)
    3086:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   addq.l #8,sp
    3088:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   lsr.l #3,d0
    308a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.l 68(sp),d7
    308e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   add.l d0,d7
    bltbpt = (ULONG) single->data+ystartsrc*single->width/8;
    3090:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   add.l 24(a2),d0
    3094:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.l d0,60(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    3098:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.l a5,-(sp)
    309a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.l d5,-(sp)
    309c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   jsr (a3)
    309e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   addq.l #8,sp
    30a0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   lsr.l #3,d0
    30a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.w d6,d4
    30a4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   asr.w #4,d4
    30a6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   movea.w d4,a0
    30a8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   adda.l a0,a0
    30aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   adda.l a0,a6
    30ac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   adda.l d0,a6
    30ae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.l a6,54(sp)
      CstCleanupQueueDrawBuffer->height = blitheight;
    30b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.w 76(sp),72(sp)
      CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; 
    30b8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   add.w d4,d4
    bltcon0 = 0xfca + ((x%16) << 12);
    30ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.w d6,d0
    30bc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   moveq #12,d1
    30be:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   lsl.w d1,d0
  custom->bltcon0 = bltcon0;
    30c0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   addi.w #4042,d0
    30c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.w d0,78(sp)
  custom->bltcon1 = bltcon1;  
    30c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.w d6,d0
    30ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   lsl.w d1,d0
    30cc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.w d0,80(sp)
    if( destinationtype == SCREEN)
    30d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   cmpi.w #1,50(sp)
    30d6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                    /--|--|--|-- beq.w 33e2 <CstScaleSprite+0x7d2>
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    30da:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                    |  |  |  |   movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    30e0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                    |  |  |  |   move.l d3,d0
    30e2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           /--------|--|--|--|-- bmi.w 34cc <CstScaleSprite+0x8bc>
    30e6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   asr.l #4,d0
    30e8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   addq.w #1,d0
    30ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    30ec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   move.w 72(sp),2(a0)
      *CstBackDropBufferApplyCursor++ = (x/16)*2;
    30f2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   move.w d4,4(a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    30f6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   move.w a5,6(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    30fa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   lea 10(a0),a1
    30fe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   move.l a1,1a6e8 <CstBackDropBufferApplyCursor>
    3104:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   clr.w 8(a0)
    3108:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   move.w #-1,66(sp)
    310e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   moveq #-2,d4
    bltalwm = 0; //Last Word of this channel almost masked out
    3110:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   clr.w 58(sp)
    cutwordssource = 0;
    3114:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   suba.l a3,a3
    extrawords = 1;
    3116:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   moveq #1,d2
    3118:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   move.l #108452,50(sp)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    3120:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        /--|--------|--|--|--|-> lsr.l #3,d5
    3122:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |        |  |  |  |   add.w d4,d5
    3124:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |        |  |  |  |   tst.l d3
    3126:	|  |  |  +--|--|--|--|--|--|--|--|--|--|--|--|--------|--|--------|--|--|--|-- bge.w 2d82 <CstScaleSprite+0x172>
    312a:	|  |  +--|--|--|--|--|--|--|--|--|--|--|--|--|--------|--|--------|--|--|--|-- bra.w 3346 <CstScaleSprite+0x736>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    312e:	|  |  |  |  |  |  |  \--|--|--|--|--|--|--|--|--------|--|--------|--|--|--|-> move.l #97872,92(sp)
}
    3136:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |  |  |  |   movem.l (sp)+,d2-d7/a2-a6
    313a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |  |  |  |   lea 44(sp),sp
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    313e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |  |  |  |   jmp 1703c <KPrintF>
      bltcpt = ((ULONG) destination) + ystartdst*winWidth/8;
    3144:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |  \--|--|-> adda.l d0,a6
    3146:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.l a6,54(sp)
    314a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.w 58(sp),d1
    314e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   clr.w 80(sp)
    3152:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.w #4042,78(sp)
      extrawords = 0;
    3158:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   clr.w d2
    bltapt = ((ULONG) mask)+cutwordssource*2+ystartsrc*single->width/8;
    315a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   movea.w 58(sp),a6
    315e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   adda.l a6,a6
    3160:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.l d7,-(sp)
    3162:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.l d3,-(sp)
    3164:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.l d1,54(sp)
    3168:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   jsr (a0)
    316a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   addq.l #8,sp
    316c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   lsr.l #3,d0
    316e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   movea.l 68(sp),a0
    3172:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   adda.l a6,a0
    3174:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.l a0,d7
    3176:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   add.l d0,d7
    bltbpt = ((ULONG) single->data)+cutwordssource*2+ystartsrc*single->width/8;
    3178:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   adda.l 24(a2),a6
    317c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   add.l a6,d0
    317e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.l d0,60(sp)
      CstCleanupQueueDrawBuffer->height = blitheight;
    3182:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.w 76(sp),72(sp)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    3188:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.w a5,86(sp)
  UWORD bltafwm = 0xffff >> cutmaskpixel;
    318c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   moveq #0,d0
    318e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   not.w d0
    3190:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   asr.l d4,d0
    3192:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.w d0,66(sp)
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    3196:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.l 46(sp),d1
    319a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.w d1,d4
    319c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   add.w d1,d4
    if( destinationtype == SCREEN)
    319e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   cmpi.w #1,50(sp)
    31a4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  \-- bne.w 301e <CstScaleSprite+0x40e>
      struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    31a8:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     \----> move.l 1a6e0 <CstCleanupQueueDrawBuffer>,d3
      CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    31ae:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            move.l #108452,50(sp)
    31b6:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            lea 1a7a4 <SysBase>,a1
    31bc:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            movea.l (a1),a6
    31be:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            moveq #20,d0
    31c0:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            moveq #0,d1
    31c2:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            jsr -684(a6)
    31c6:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            movea.l d0,a0
    31c8:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            move.l d0,1a6e0 <CstCleanupQueueDrawBuffer>
      CstCleanupQueueDrawBuffer->next = next;   
    31ce:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            move.l d3,16(a0)
      CstCleanupQueueDrawBuffer->x = x;
    31d2:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            move.w d6,(a0)
      CstCleanupQueueDrawBuffer->y = y;
    31d4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            move.w a4,2(a0)
      CstCleanupQueueDrawBuffer->person = person;      
    31d8:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            move.l 82(sp),4(a0)
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; //Width in X Bytes
    31de:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            move.l (a2),d3
    31e0:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            move.l d3,d0
    31e2:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     /--|----------- bmi.w 354c <CstScaleSprite+0x93c>
    31e6:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     |  |            asr.l #4,d0
    31e8:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     |  |            add.w 58(sp),d0
    31ec:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     |  |            add.w d2,d0
    31ee:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     |  |            move.w d0,8(a0)
      CstCleanupQueueDrawBuffer->height = blitheight;
    31f2:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     |  |            move.w 72(sp),10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes = 0;
    31f8:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     |  |            clr.w 12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    31fc:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     |  |            move.w 86(sp),14(a0)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    3202:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     |  |            move.l 1a6f8 <winWidth>,d5
    bltalwm = 0; //Last Word of this channel almost masked out
    3208:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     |  |            clr.w 58(sp)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    320c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  /--|--|----------> lsr.l #3,d5
    320e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            add.w d4,d5
    3210:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            tst.l d3
    3212:	|  |  |  +--|--|--|-----|--|--|--|--|--|--|--|--------|--|--|--|--|----------- bge.w 2d82 <CstScaleSprite+0x172>
    3216:	|  |  +--|--|--|--|-----|--|--|--|--|--|--|--|--------|--|--|--|--|----------- bra.w 3346 <CstScaleSprite+0x736>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    321a:	|  |  |  |  |  |  |     >--|--|--|--|--|--|--|--------|--|--|--|--|----------> moveq #15,d1
    321c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            add.l d1,d0
    321e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            asr.l #4,d0
    3220:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            add.w d0,d2
    3222:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            add.w d5,d2
    3224:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            sub.w a3,d2
    3226:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            move.w d2,dff058 <gcc8_c_support.c.1fed348d+0xdb3d9a>
    WaitBlit();
    322c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            movea.l (a4),a6
    322e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            jsr -228(a6)
  FreeVec(mask);
    3232:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            movea.l 50(sp),a0
    3236:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            movea.l (a0),a6
    3238:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            movea.l 68(sp),a1
    323c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            jsr -690(a6)
}
    3240:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            movem.l (sp)+,d2-d7/a2-a6
    3244:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            lea 44(sp),sp
    3248:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            rts
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    324a:	|  |  |  |  |  >--|-----|--|--|--|--|--|--|--|--------|--|--|--|--|----------> moveq #15,d1
    324c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            add.l d1,d0
    324e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            asr.l #4,d0
    3250:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            add.w d2,d0
    3252:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            add.w d5,d0
    3254:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            sub.w a3,d0
    3256:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            move.w d0,dff058 <gcc8_c_support.c.1fed348d+0xdb3d9a>
    bltbpt += bltbptplus;
    325c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            movea.l 60(sp),a5
    3260:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            adda.l d4,a5
    bltcpt += bltcptplus;
    3262:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            move.l 54(sp),d6
    3266:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            add.l d3,d6
    WaitBlit();
    3268:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            movea.l (a4),a6
    326a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    326e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    3270:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            move.l d7,dff050 <gcc8_c_support.c.1fed348d+0xdb3d92>
    custom->bltbpt = (APTR) bltbpt;
    3276:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            move.l a5,dff04c <gcc8_c_support.c.1fed348d+0xdb3d8e>
    custom->bltcpt = (APTR) bltcpt;
    327c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            move.l d6,dff048 <gcc8_c_support.c.1fed348d+0xdb3d8a>
    custom->bltdpt = (APTR) bltdpt;
    3282:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            move.l d6,dff054 <gcc8_c_support.c.1fed348d+0xdb3d96>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3288:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            tst.l d0
    328a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  \--------|--|--|--|--|----------- bge.w 2e58 <CstScaleSprite+0x248>
    328e:	|  |  |  |  |  |  |     |  |  |  |  |  \--|-----------|--|--|--|--|----------> moveq #15,d1
    3290:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            add.l d1,d0
    3292:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            asr.l #4,d0
    3294:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            add.w d2,d0
    3296:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            add.w d5,d0
    3298:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            sub.w a3,d0
    329a:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            move.w d0,dff058 <gcc8_c_support.c.1fed348d+0xdb3d9a>
    bltbpt += bltbptplus;
    32a0:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            adda.l d4,a5
    bltcpt += bltcptplus;
    32a2:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            add.l d3,d6
    WaitBlit();
    32a4:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            movea.l (a4),a6
    32a6:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    32aa:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    32ac:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            move.l d7,dff050 <gcc8_c_support.c.1fed348d+0xdb3d92>
    custom->bltbpt = (APTR) bltbpt;
    32b2:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            move.l a5,dff04c <gcc8_c_support.c.1fed348d+0xdb3d8e>
    custom->bltcpt = (APTR) bltcpt;
    32b8:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            move.l d6,dff048 <gcc8_c_support.c.1fed348d+0xdb3d8a>
    custom->bltdpt = (APTR) bltdpt;
    32be:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            move.l d6,dff054 <gcc8_c_support.c.1fed348d+0xdb3d96>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    32c4:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            tst.l d0
    32c6:	|  |  |  |  |  |  |     |  |  |  |  |     \-----------|--|--|--|--|----------- bge.w 2e90 <CstScaleSprite+0x280>
    32ca:	|  |  |  |  |  |  |     |  |  |  \--|-----------------|--|--|--|--|----------> moveq #15,d1
    32cc:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            add.l d1,d0
    32ce:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            asr.l #4,d0
    32d0:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            add.w d2,d0
    32d2:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            add.w d5,d0
    32d4:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            sub.w a3,d0
    32d6:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            move.w d0,dff058 <gcc8_c_support.c.1fed348d+0xdb3d9a>
    bltbpt += bltbptplus;
    32dc:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            adda.l d4,a5
    bltcpt += bltcptplus;
    32de:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            add.l d3,d6
    WaitBlit();
    32e0:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            movea.l (a4),a6
    32e2:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    32e6:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    32e8:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            move.l d7,dff050 <gcc8_c_support.c.1fed348d+0xdb3d92>
    custom->bltbpt = (APTR) bltbpt;
    32ee:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            move.l a5,dff04c <gcc8_c_support.c.1fed348d+0xdb3d8e>
    custom->bltcpt = (APTR) bltcpt;
    32f4:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            move.l d6,dff048 <gcc8_c_support.c.1fed348d+0xdb3d8a>
    custom->bltdpt = (APTR) bltdpt;
    32fa:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            move.l d6,dff054 <gcc8_c_support.c.1fed348d+0xdb3d96>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3300:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            tst.l d0
    3302:	|  |  |  |  |  |  |     |  |  |     \-----------------|--|--|--|--|----------- bge.w 2ec8 <CstScaleSprite+0x2b8>
    3306:	|  |  |  |  |  |  |     |  \--|-----------------------|--|--|--|--|----------> moveq #15,d1
    3308:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            add.l d1,d0
    330a:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            asr.l #4,d0
    330c:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            add.w d2,d0
    330e:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            add.w d5,d0
    3310:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            sub.w a3,d0
    3312:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            move.w d0,dff058 <gcc8_c_support.c.1fed348d+0xdb3d9a>
    bltbpt += bltbptplus;
    3318:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            add.l a5,d4
    bltcpt += bltcptplus;
    331a:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            add.l d6,d3
    WaitBlit();
    331c:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            movea.l (a4),a6
    331e:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3322:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    3324:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            move.l d7,dff050 <gcc8_c_support.c.1fed348d+0xdb3d92>
    custom->bltbpt = (APTR) bltbpt;
    332a:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            move.l d4,dff04c <gcc8_c_support.c.1fed348d+0xdb3d8e>
    custom->bltcpt = (APTR) bltcpt;
    3330:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            move.l d3,dff048 <gcc8_c_support.c.1fed348d+0xdb3d8a>
    custom->bltdpt = (APTR) bltdpt;
    3336:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            move.l d3,dff054 <gcc8_c_support.c.1fed348d+0xdb3d96>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    333c:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            tst.l d0
    333e:	|  |  |  |  |  |  |     |     \-----------------------|--|--|--|--|----------- bge.w 2f00 <CstScaleSprite+0x2f0>
    3342:	|  |  |  |  |  |  |     \-----------------------------|--|--|--|--|----------- bra.w 321a <CstScaleSprite+0x60a>
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    3346:	|  |  >--|--|--|--|-----------------------------------|--|--|--|--|----------> addq.l #7,d3
    3348:	|  |  |  |  |  |  |                                   |  |  |  |  |            asr.l #3,d3
    334a:	|  |  |  |  |  |  |                                   |  |  |  |  |            sub.w d3,d5
  WaitBlit();
    334c:	|  |  |  |  |  |  |                                   |  |  |  |  |            lea 1a7b0 <GfxBase>,a4
    3352:	|  |  |  |  |  |  |                                   |  |  |  |  |            movea.l (a4),a6
    3354:	|  |  |  |  |  |  |                                   |  |  |  |  |            jsr -228(a6)
  custom->bltafwm = bltafwm;
    3358:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.w 66(sp),dff044 <gcc8_c_support.c.1fed348d+0xdb3d86>
  custom->bltalwm = bltalwm;
    3360:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.w 58(sp),dff046 <gcc8_c_support.c.1fed348d+0xdb3d88>
  custom->bltamod = bltamod;
    3368:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.w d4,dff064 <gcc8_c_support.c.1fed348d+0xdb3da6>
  custom->bltbmod = bltbmod;
    336e:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.w d4,dff062 <gcc8_c_support.c.1fed348d+0xdb3da4>
  custom->bltcmod = bltcmod;
    3374:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.w d5,dff060 <gcc8_c_support.c.1fed348d+0xdb3da2>
  custom->bltdmod = bltdmod;
    337a:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.w d5,dff066 <gcc8_c_support.c.1fed348d+0xdb3da8>
  custom->bltcon0 = bltcon0;
    3380:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.w 78(sp),dff040 <gcc8_c_support.c.1fed348d+0xdb3d82>
  custom->bltcon1 = bltcon1;  
    3388:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.w 80(sp),dff042 <gcc8_c_support.c.1fed348d+0xdb3d84>
  UWORD bltbptplus = (single->width >> 3)*single->height;
    3390:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.l (a2),d0
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3392:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.w 72(sp),d5
    3396:	|  |  |  |  |  |  |                                   |  |  |  |  |            lsl.w #6,d5
  UWORD bltbptplus = (single->width >> 3)*single->height;
    3398:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.l d0,d4
    339a:	|  |  |  |  |  |  |                                   |  |  |  |  |            asr.l #3,d4
    339c:	|  |  |  |  |  |  |                                   |  |  |  |  |            muls.w 6(a2),d4
    bltbpt += bltbptplus;
    33a0:	|  |  |  |  |  |  |                                   |  |  |  |  |            andi.l #65535,d4
  UWORD bltcptplus = winWidth/8*winHeight;
    33a6:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.l 1a6f8 <winWidth>,d3
    33ac:	|  |  |  |  |  |  |                                   |  |  |  |  |            lsr.l #3,d3
    33ae:	|  |  |  |  |  |  |                                   |  |  |  |  |            muls.w 1a6fe <winHeight+0x2>,d3
    bltcpt += bltcptplus;
    33b4:	|  |  |  |  |  |  |                                   |  |  |  |  |            andi.l #65535,d3
    custom->bltapt = (APTR) bltapt;
    33ba:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.l d7,dff050 <gcc8_c_support.c.1fed348d+0xdb3d92>
    custom->bltbpt = (APTR) bltbpt;
    33c0:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.l 60(sp),dff04c <gcc8_c_support.c.1fed348d+0xdb3d8e>
    custom->bltcpt = (APTR) bltcpt;
    33c8:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.l 54(sp),dff048 <gcc8_c_support.c.1fed348d+0xdb3d8a>
    custom->bltdpt = (APTR) bltdpt;
    33d0:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.l 54(sp),dff054 <gcc8_c_support.c.1fed348d+0xdb3d96>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    33d8:	|  |  |  |  |  |  |                                   |  |  |  |  |            tst.l d0
    33da:	|  |  |  |  |  |  \-----------------------------------|--|--|--|--|----------- bge.w 2e18 <CstScaleSprite+0x208>
    33de:	|  |  |  |  |  \--------------------------------------|--|--|--|--|----------- bra.w 324a <CstScaleSprite+0x63a>
      struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    33e2:	|  |  |  |  |                                         |  |  |  |  \----------> move.l 1a6e0 <CstCleanupQueueDrawBuffer>,d3
      CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    33e8:	|  |  |  |  |                                         |  |  |  |               move.l #108452,50(sp)
    33f0:	|  |  |  |  |                                         |  |  |  |               lea 1a7a4 <SysBase>,a0
    33f6:	|  |  |  |  |                                         |  |  |  |               movea.l (a0),a6
    33f8:	|  |  |  |  |                                         |  |  |  |               moveq #20,d0
    33fa:	|  |  |  |  |                                         |  |  |  |               moveq #0,d1
    33fc:	|  |  |  |  |                                         |  |  |  |               jsr -684(a6)
    3400:	|  |  |  |  |                                         |  |  |  |               movea.l d0,a0
    3402:	|  |  |  |  |                                         |  |  |  |               move.l d0,1a6e0 <CstCleanupQueueDrawBuffer>
      CstCleanupQueueDrawBuffer->next = next;   
    3408:	|  |  |  |  |                                         |  |  |  |               move.l d3,16(a0)
      CstCleanupQueueDrawBuffer->x = x;
    340c:	|  |  |  |  |                                         |  |  |  |               move.w d6,(a0)
      CstCleanupQueueDrawBuffer->y = y;
    340e:	|  |  |  |  |                                         |  |  |  |               move.w a4,2(a0)
      CstCleanupQueueDrawBuffer->person = person; 
    3412:	|  |  |  |  |                                         |  |  |  |               move.l 82(sp),4(a0)
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; 
    3418:	|  |  |  |  |                                         |  |  |  |               move.l (a2),d3
    341a:	|  |  |  |  |                                         |  |  |  |               move.l d3,d0
    341c:	|  |  |  |  |                                         |  |  |  |     /-------- bmi.w 357a <CstScaleSprite+0x96a>
    3420:	|  |  |  |  |                                         |  |  |  |     |         asr.l #4,d0
    3422:	|  |  |  |  |                                         |  |  |  |     |         addq.w #1,d0
    3424:	|  |  |  |  |                                         |  |  |  |     |         move.w d0,8(a0)
      CstCleanupQueueDrawBuffer->height =  blitheight; 
    3428:	|  |  |  |  |                                         |  |  |  |     |         move.w 72(sp),10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; 
    342e:	|  |  |  |  |                                         |  |  |  |     |         move.w d4,12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    3432:	|  |  |  |  |                                         |  |  |  |     |         move.w a5,14(a0)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    3436:	|  |  |  |  |                                         |  |  |  |     |         move.l 1a6f8 <winWidth>,d5
    343c:	|  |  |  |  |                                         |  |  |  |     |         move.w #-1,66(sp)
    3442:	|  |  |  |  |                                         |  |  |  |     |         moveq #-2,d4
    bltalwm = 0; //Last Word of this channel almost masked out
    3444:	|  |  |  |  |                                         |  |  |  |     |         clr.w 58(sp)
    cutwordssource = 0;
    3448:	|  |  |  |  |                                         |  |  |  |     |         suba.l a3,a3
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    344a:	|  |  |  |  |                                         |  |  |  |  /--|-------> lsr.l #3,d5
    344c:	|  |  |  |  |                                         |  |  |  |  |  |         add.w d4,d5
    344e:	|  |  |  |  |                                         |  |  |  |  |  |         tst.l d3
    3450:	|  |  |  +--|-----------------------------------------|--|--|--|--|--|-------- bge.w 2d82 <CstScaleSprite+0x172>
    3454:	|  |  +--|--|-----------------------------------------|--|--|--|--|--|-------- bra.w 3346 <CstScaleSprite+0x736>
      struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    3458:	|  |  |  |  \-----------------------------------------|--|--|--|--|--|-------> move.l 1a6e0 <CstCleanupQueueDrawBuffer>,d3
      CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    345e:	|  |  |  |                                            |  |  |  |  |  |         move.l #108452,50(sp)
    3466:	|  |  |  |                                            |  |  |  |  |  |         lea 1a7a4 <SysBase>,a0
    346c:	|  |  |  |                                            |  |  |  |  |  |         movea.l (a0),a6
    346e:	|  |  |  |                                            |  |  |  |  |  |         moveq #20,d0
    3470:	|  |  |  |                                            |  |  |  |  |  |         moveq #0,d1
    3472:	|  |  |  |                                            |  |  |  |  |  |         jsr -684(a6)
    3476:	|  |  |  |                                            |  |  |  |  |  |         movea.l d0,a0
    3478:	|  |  |  |                                            |  |  |  |  |  |         move.l d0,1a6e0 <CstCleanupQueueDrawBuffer>
      CstCleanupQueueDrawBuffer->next = next;   
    347e:	|  |  |  |                                            |  |  |  |  |  |         move.l d3,16(a0)
      CstCleanupQueueDrawBuffer->x = x;
    3482:	|  |  |  |                                            |  |  |  |  |  |         move.w d6,(a0)
      CstCleanupQueueDrawBuffer->y = y;
    3484:	|  |  |  |                                            |  |  |  |  |  |         move.w a4,2(a0)
      CstCleanupQueueDrawBuffer->person = person; 
    3488:	|  |  |  |                                            |  |  |  |  |  |         move.l 82(sp),4(a0)
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource; //Width in X Bytes
    348e:	|  |  |  |                                            |  |  |  |  |  |         move.l (a2),d3
    3490:	|  |  |  |                                            |  |  |  |  |  |         move.l d3,d0
    3492:	|  |  |  |                                            |  |  |  |  |  |     /-- bmi.w 35ac <CstScaleSprite+0x99c>
    3496:	|  |  |  |                                            |  |  |  |  |  |     |   asr.l #4,d0
    3498:	|  |  |  |                                            |  |  |  |  |  |     |   movea.w 66(sp),a1
    349c:	|  |  |  |                                            |  |  |  |  |  |     |   adda.w d0,a1
    349e:	|  |  |  |                                            |  |  |  |  |  |     |   move.w a1,8(a0)
      CstCleanupQueueDrawBuffer->height =  blitheight; //Height
    34a2:	|  |  |  |                                            |  |  |  |  |  |     |   move.w 72(sp),10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; //X Start in Bytes;
    34a8:	|  |  |  |                                            |  |  |  |  |  |     |   move.w d2,12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    34ac:	|  |  |  |                                            |  |  |  |  |  |     |   move.w a5,14(a0)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    34b0:	|  |  |  |                                            |  |  |  |  |  |     |   move.l 1a6f8 <winWidth>,d5
    34b6:	|  |  |  |                                            |  |  |  |  |  |     |   move.w #-1,66(sp)
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    34bc:	|  |  |  |                                            |  |  |  |  |  |     |   clr.w d2
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    34be:	|  |  |  |                                            |  |  |  |  |  |  /--|-> lsr.l #3,d5
    34c0:	|  |  |  |                                            |  |  |  |  |  |  |  |   add.w d4,d5
    34c2:	|  |  |  |                                            |  |  |  |  |  |  |  |   tst.l d3
    34c4:	|  |  |  \--------------------------------------------|--|--|--|--|--|--|--|-- bge.w 2d82 <CstScaleSprite+0x172>
    34c8:	|  |  \-----------------------------------------------|--|--|--|--|--|--|--|-- bra.w 3346 <CstScaleSprite+0x736>
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    34cc:	|  |                                                  |  \--|--|--|--|--|--|-> moveq #15,d0
    34ce:	|  |                                                  |     |  |  |  |  |  |   add.l d3,d0
    34d0:	|  |                                                  |     |  |  |  |  |  |   asr.l #4,d0
    34d2:	|  |                                                  |     |  |  |  |  |  |   addq.w #1,d0
    34d4:	|  |                                                  |     |  |  |  |  |  |   move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    34d6:	|  |                                                  |     |  |  |  |  |  |   move.w 72(sp),2(a0)
      *CstBackDropBufferApplyCursor++ = (x/16)*2;
    34dc:	|  |                                                  |     |  |  |  |  |  |   move.w d4,4(a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    34e0:	|  |                                                  |     |  |  |  |  |  |   move.w a5,6(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    34e4:	|  |                                                  |     |  |  |  |  |  |   lea 10(a0),a1
    34e8:	|  |                                                  |     |  |  |  |  |  |   move.l a1,1a6e8 <CstBackDropBufferApplyCursor>
    34ee:	|  |                                                  |     |  |  |  |  |  |   clr.w 8(a0)
    34f2:	|  |                                                  |     |  |  |  |  |  |   move.w #-1,66(sp)
    34f8:	|  |                                                  |     |  |  |  |  |  |   moveq #-2,d4
    bltalwm = 0; //Last Word of this channel almost masked out
    34fa:	|  |                                                  |     |  |  |  |  |  |   clr.w 58(sp)
    cutwordssource = 0;
    34fe:	|  |                                                  |     |  |  |  |  |  |   suba.l a3,a3
    extrawords = 1;
    3500:	|  |                                                  |     |  |  |  |  |  |   moveq #1,d2
    3502:	|  |                                                  |     |  |  |  |  |  |   move.l #108452,50(sp)
    350a:	|  |                                                  \-----|--|--|--|--|--|-- bra.w 3120 <CstScaleSprite+0x510>
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource;
    350e:	|  \--------------------------------------------------------|--|--|--|--|--|-> moveq #15,d0
    3510:	|                                                           |  |  |  |  |  |   add.l d3,d0
    3512:	|                                                           |  |  |  |  |  |   asr.l #4,d0
    3514:	|                                                           |  |  |  |  |  |   move.w 66(sp),d1
    3518:	|                                                           |  |  |  |  |  |   add.w d0,d1
    351a:	|                                                           |  |  |  |  |  |   move.w d1,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    351c:	|                                                           |  |  |  |  |  |   move.w 72(sp),2(a0)
      *CstBackDropBufferApplyCursor++ = (x/16)*2;
    3522:	|                                                           |  |  |  |  |  |   move.w d2,4(a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    3526:	|                                                           |  |  |  |  |  |   move.w a5,6(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    352a:	|                                                           |  |  |  |  |  |   lea 10(a0),a1
    352e:	|                                                           |  |  |  |  |  |   move.l a1,1a6e8 <CstBackDropBufferApplyCursor>
    3534:	|                                                           |  |  |  |  |  |   clr.w 8(a0)
    3538:	|                                                           |  |  |  |  |  |   move.w #-1,66(sp)
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    353e:	|                                                           |  |  |  |  |  |   clr.w d2
    3540:	|                                                           |  |  |  |  |  |   move.l #108452,50(sp)
    3548:	\-----------------------------------------------------------|--|--|--|--|--|-- bra.w 2d78 <CstScaleSprite+0x168>
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; //Width in X Bytes
    354c:	                                                            |  \--|--|--|--|-> moveq #15,d0
    354e:	                                                            |     |  |  |  |   add.l d3,d0
    3550:	                                                            |     |  |  |  |   asr.l #4,d0
    3552:	                                                            |     |  |  |  |   add.w 58(sp),d0
    3556:	                                                            |     |  |  |  |   add.w d2,d0
    3558:	                                                            |     |  |  |  |   move.w d0,8(a0)
      CstCleanupQueueDrawBuffer->height = blitheight;
    355c:	                                                            |     |  |  |  |   move.w 72(sp),10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes = 0;
    3562:	                                                            |     |  |  |  |   clr.w 12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    3566:	                                                            |     |  |  |  |   move.w 86(sp),14(a0)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    356c:	                                                            |     |  |  |  |   move.l 1a6f8 <winWidth>,d5
    bltalwm = 0; //Last Word of this channel almost masked out
    3572:	                                                            |     |  |  |  |   clr.w 58(sp)
    3576:	                                                            \-----|--|--|--|-- bra.w 320c <CstScaleSprite+0x5fc>
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; 
    357a:	                                                                  |  \--|--|-> moveq #15,d0
    357c:	                                                                  |     |  |   add.l d3,d0
    357e:	                                                                  |     |  |   asr.l #4,d0
    3580:	                                                                  |     |  |   addq.w #1,d0
    3582:	                                                                  |     |  |   move.w d0,8(a0)
      CstCleanupQueueDrawBuffer->height =  blitheight; 
    3586:	                                                                  |     |  |   move.w 72(sp),10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; 
    358c:	                                                                  |     |  |   move.w d4,12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    3590:	                                                                  |     |  |   move.w a5,14(a0)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    3594:	                                                                  |     |  |   move.l 1a6f8 <winWidth>,d5
    359a:	                                                                  |     |  |   move.w #-1,66(sp)
    35a0:	                                                                  |     |  |   moveq #-2,d4
    bltalwm = 0; //Last Word of this channel almost masked out
    35a2:	                                                                  |     |  |   clr.w 58(sp)
    cutwordssource = 0;
    35a6:	                                                                  |     |  |   suba.l a3,a3
    35a8:	                                                                  \-----|--|-- bra.w 344a <CstScaleSprite+0x83a>
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource; //Width in X Bytes
    35ac:	                                                                        |  \-> moveq #15,d0
    35ae:	                                                                        |      add.l d3,d0
    35b0:	                                                                        |      asr.l #4,d0
    35b2:	                                                                        |      movea.w 66(sp),a1
    35b6:	                                                                        |      adda.w d0,a1
    35b8:	                                                                        |      move.w a1,8(a0)
      CstCleanupQueueDrawBuffer->height =  blitheight; //Height
    35bc:	                                                                        |      move.w 72(sp),10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; //X Start in Bytes;
    35c2:	                                                                        |      move.w d2,12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    35c6:	                                                                        |      move.w a5,14(a0)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    35ca:	                                                                        |      move.l 1a6f8 <winWidth>,d5
    35d0:	                                                                        |      move.w #-1,66(sp)
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    35d6:	                                                                        |      clr.w d2
    35d8:	                                                                        \----- bra.w 34be <CstScaleSprite+0x8ae>

000035dc <CstSetCl>:

void CstSetCl(UWORD *copperlist)
{
    35dc:	subq.l #4,sp
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    35de:	move.l #14675968,(sp)
  custom->cop1lc = (ULONG) copperlist;
    35e4:	move.l 8(sp),d0
    35e8:	movea.l (sp),a0
    35ea:	move.l d0,128(a0)
}
    35ee:	nop
    35f0:	addq.l #4,sp
    35f2:	rts

000035f4 <CstSwapBuffer>:

void CstSwapBuffer( ) {
    35f4:	lea -20(sp),sp
  ULONG *tmp;
  tmp = CstViewBuffer;
    35f8:	move.l 1a6d4 <CstViewBuffer>,16(sp)
  CstViewBuffer = CstDrawBuffer;
    3600:	move.l 1a6d8 <CstDrawBuffer>,d0
    3606:	move.l d0,1a6d4 <CstViewBuffer>
  CstDrawBuffer = tmp;
    360c:	move.l 16(sp),1a6d8 <CstDrawBuffer>

  struct CleanupQueue *tmp2 = CstCleanupQueueViewBuffer;
    3614:	move.l 1a6dc <CstCleanupQueueViewBuffer>,12(sp)
  CstCleanupQueueViewBuffer = CstCleanupQueueDrawBuffer;
    361c:	move.l 1a6e0 <CstCleanupQueueDrawBuffer>,d0
    3622:	move.l d0,1a6dc <CstCleanupQueueViewBuffer>
  CstCleanupQueueDrawBuffer = tmp2;
    3628:	move.l 12(sp),1a6e0 <CstCleanupQueueDrawBuffer>


  UWORD *copword = CstCopperList;
    3630:	move.l 1a6ce <CstCopperList>,8(sp)
  ULONG ptr = (ULONG) CstViewBuffer;
    3638:	move.l 1a6d4 <CstViewBuffer>,d0
    363e:	move.l d0,4(sp)
  UWORD highword = ptr >> 16;
    3642:	move.l 4(sp),d0
    3646:	clr.w d0
    3648:	swap d0
    364a:	move.w d0,2(sp)
  UWORD lowword = ptr & 0xffff;  
    364e:	move.w 6(sp),(sp)

  copword[CSTBPL1LOW] = lowword;
    3652:	movea.w #118,a0
    3656:	adda.l 8(sp),a0
    365a:	move.w (sp),(a0)
  copword[CSTBPL1HIGH] = highword;
    365c:	movea.w #114,a0
    3660:	adda.l 8(sp),a0
    3664:	move.w 2(sp),(a0)

  ptr +=  40*256;
    3668:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    3670:	move.l 4(sp),d0
    3674:	clr.w d0
    3676:	swap d0
    3678:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    367c:	move.w 6(sp),(sp)

  copword[CSTBPL2LOW] = lowword;
    3680:	movea.w #126,a0
    3684:	adda.l 8(sp),a0
    3688:	move.w (sp),(a0)
  copword[CSTBPL2HIGH] = highword;
    368a:	movea.w #122,a0
    368e:	adda.l 8(sp),a0
    3692:	move.w 2(sp),(a0)
  
  ptr +=  40*256;
    3696:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    369e:	move.l 4(sp),d0
    36a2:	clr.w d0
    36a4:	swap d0
    36a6:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    36aa:	move.w 6(sp),(sp)
  
  copword[CSTBPL3LOW] = lowword;
    36ae:	movea.l 8(sp),a0
    36b2:	lea 134(a0),a0
    36b6:	move.w (sp),(a0)
  copword[CSTBPL3HIGH] = highword;
    36b8:	movea.l 8(sp),a0
    36bc:	lea 130(a0),a0
    36c0:	move.w 2(sp),(a0)

  ptr +=  40*256;
    36c4:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    36cc:	move.l 4(sp),d0
    36d0:	clr.w d0
    36d2:	swap d0
    36d4:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    36d8:	move.w 6(sp),(sp)

  copword[CSTBPL4LOW] = lowword;
    36dc:	movea.l 8(sp),a0
    36e0:	lea 142(a0),a0
    36e4:	move.w (sp),(a0)
  copword[CSTBPL4HIGH] = highword;
    36e6:	movea.l 8(sp),a0
    36ea:	lea 138(a0),a0
    36ee:	move.w 2(sp),(a0)

  ptr +=  40*256;
    36f2:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    36fa:	move.l 4(sp),d0
    36fe:	clr.w d0
    3700:	swap d0
    3702:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    3706:	move.w 6(sp),(sp)

  copword[CSTBPL5LOW] = lowword;
    370a:	movea.l 8(sp),a0
    370e:	lea 150(a0),a0
    3712:	move.w (sp),(a0)
  copword[CSTBPL5HIGH] = highword;
    3714:	movea.l 8(sp),a0
    3718:	lea 146(a0),a0
    371c:	move.w 2(sp),(a0)

}
    3720:	nop
    3722:	lea 20(sp),sp
    3726:	rts

00003728 <CstReserveBackdrop>:

BOOL CstReserveBackdrop(int width, int height) {
    3728:	          lea -56(sp),sp
    372c:	          move.l a6,-(sp)

 	KPrintF("CstReserveBackdrop: Begin");
    372e:	          pea 17e83 <PutChar+0x3a5>
    3734:	          jsr 1703c <KPrintF>
    373a:	          addq.l #4,sp

  width = width / 8;
    373c:	          move.l 64(sp),d0
    3740:	      /-- bpl.s 3744 <CstReserveBackdrop+0x1c>
    3742:	      |   addq.l #7,d0
    3744:	      \-> asr.l #3,d0
    3746:	          move.l d0,64(sp)

  if( width < 40) 
    374a:	          moveq #39,d0
    374c:	          cmp.l 64(sp),d0
    3750:	      /-- blt.s 3766 <CstReserveBackdrop+0x3e>
  {
    KPrintF("CstReserveBackdrop: Screens smaller than 320px not supported.");
    3752:	      |   pea 17e9d <PutChar+0x3bf>
    3758:	      |   jsr 1703c <KPrintF>
    375e:	      |   addq.l #4,sp
    return FALSE;
    3760:	      |   clr.w d0
    3762:	/-----|-- bra.w 3aa8 <CstReserveBackdrop+0x380>
  }  
  KPrintF("CstReserveBackdrop: Screen Okay");
    3766:	|     \-> pea 17edb <PutChar+0x3fd>
    376c:	|         jsr 1703c <KPrintF>
    3772:	|         addq.l #4,sp

  CstCopperList = CstCreateCopperlist( width);
    3774:	|         move.l 64(sp),-(sp)
    3778:	|         jsr fce <CstCreateCopperlist>
    377e:	|         addq.l #4,sp
    3780:	|         move.l d0,1a6ce <CstCopperList>
  KPrintF("CstReserveBackdrop: Copperlist created");
    3786:	|         pea 17efb <PutChar+0x41d>
    378c:	|         jsr 1703c <KPrintF>
    3792:	|         addq.l #4,sp
  CstBackdropSizePlane = width*height;
    3794:	|         move.l 64(sp),d1
    3798:	|         move.l 68(sp),d0
    379c:	|         muls.w d1,d0
    379e:	|         move.w d0,1a6c4 <CstBackdropSizePlane>
  CstBackdropSize = CstBackdropSizePlane * 5; //Todo: Support other Bitplane Modes;  
    37a4:	|         move.w 1a6c4 <CstBackdropSizePlane>,d1
    37aa:	|         move.w d1,d0
    37ac:	|         add.w d0,d0
    37ae:	|         add.w d0,d0
    37b0:	|         add.w d1,d0
    37b2:	|         move.w d0,1a6c2 <CstBackdropSize>
  

  CstBackDrop = AllocVec(CstBackdropSize,MEMF_CHIP);
    37b8:	|         move.w 1a6c2 <CstBackdropSize>,d0
    37be:	|         move.w d0,d0
    37c0:	|         andi.l #65535,d0
    37c6:	|         move.l d0,48(sp)
    37ca:	|         moveq #2,d1
    37cc:	|         move.l d1,44(sp)
    37d0:	|         move.l 1a7a4 <SysBase>,d0
    37d6:	|         movea.l d0,a6
    37d8:	|         move.l 48(sp),d0
    37dc:	|         move.l 44(sp),d1
    37e0:	|         jsr -684(a6)
    37e4:	|         move.l d0,40(sp)
    37e8:	|         move.l 40(sp),d0
    37ec:	|         move.l d0,1a6c6 <CstBackDrop>
  if( !CstBackDrop)
    37f2:	|         move.l 1a6c6 <CstBackDrop>,d0
    37f8:	|     /-- bne.s 380e <CstReserveBackdrop+0xe6>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for Backdrop");
    37fa:	|     |   pea 17f22 <PutChar+0x444>
    3800:	|     |   jsr 1703c <KPrintF>
    3806:	|     |   addq.l #4,sp
    return FALSE;  
    3808:	|     |   clr.w d0
    380a:	+-----|-- bra.w 3aa8 <CstReserveBackdrop+0x380>
  }
  KPrintF("CstReserveBackdrop: Backdrop reserved");
    380e:	|     \-> pea 17f5a <PutChar+0x47c>
    3814:	|         jsr 1703c <KPrintF>
    381a:	|         addq.l #4,sp

  //Initialize Buffer
  ULONG *cursor = (ULONG *)CstBackDrop;
    381c:	|         move.l 1a6c6 <CstBackDrop>,56(sp)
  for(int i=0;i<CstBackdropSize/4;i++)
    3824:	|         clr.l 52(sp)
    3828:	|     /-- bra.s 383e <CstReserveBackdrop+0x116>
  {
    *cursor++ = 0;
    382a:	|  /--|-> move.l 56(sp),d0
    382e:	|  |  |   move.l d0,d1
    3830:	|  |  |   addq.l #4,d1
    3832:	|  |  |   move.l d1,56(sp)
    3836:	|  |  |   movea.l d0,a0
    3838:	|  |  |   clr.l (a0)
  for(int i=0;i<CstBackdropSize/4;i++)
    383a:	|  |  |   addq.l #1,52(sp)
    383e:	|  |  \-> move.w 1a6c2 <CstBackdropSize>,d0
    3844:	|  |      lsr.w #2,d0
    3846:	|  |      move.w d0,d0
    3848:	|  |      andi.l #65535,d0
    384e:	|  |      cmp.l 52(sp),d0
    3852:	|  \----- bgt.s 382a <CstReserveBackdrop+0x102>
  }  
  
  CstDrawBuffer = AllocVec(CstBackdropSize+width*2,MEMF_CHIP); //Some extra size for bob routine border area
    3854:	|         move.w 1a6c2 <CstBackdropSize>,d0
    385a:	|         move.w d0,d0
    385c:	|         andi.l #65535,d0
    3862:	|         move.l 64(sp),d1
    3866:	|         add.l d1,d1
    3868:	|         add.l d1,d0
    386a:	|         move.l d0,36(sp)
    386e:	|         moveq #2,d0
    3870:	|         move.l d0,32(sp)
    3874:	|         move.l 1a7a4 <SysBase>,d0
    387a:	|         movea.l d0,a6
    387c:	|         move.l 36(sp),d0
    3880:	|         move.l 32(sp),d1
    3884:	|         jsr -684(a6)
    3888:	|         move.l d0,28(sp)
    388c:	|         move.l 28(sp),d0
    3890:	|         move.l d0,1a6d8 <CstDrawBuffer>
  if( !CstDrawBuffer)
    3896:	|         move.l 1a6d8 <CstDrawBuffer>,d0
    389c:	|     /-- bne.s 38b2 <CstReserveBackdrop+0x18a>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for DrawBuffer");
    389e:	|     |   pea 17f80 <PutChar+0x4a2>
    38a4:	|     |   jsr 1703c <KPrintF>
    38aa:	|     |   addq.l #4,sp
    return FALSE;  
    38ac:	|     |   clr.w d0
    38ae:	+-----|-- bra.w 3aa8 <CstReserveBackdrop+0x380>
  }
  KPrintF("CstReserveBackdrop: DrawBuffer reserved");
    38b2:	|     \-> pea 17fba <PutChar+0x4dc>
    38b8:	|         jsr 1703c <KPrintF>
    38be:	|         addq.l #4,sp
    
  CstBackDropBufferApplyStart = AllocVec( 1000*5*2,MEMF_ANY);
    38c0:	|         move.l #10000,24(sp)
    38c8:	|         clr.l 20(sp)
    38cc:	|         move.l 1a7a4 <SysBase>,d0
    38d2:	|         movea.l d0,a6
    38d4:	|         move.l 24(sp),d0
    38d8:	|         move.l 20(sp),d1
    38dc:	|         jsr -684(a6)
    38e0:	|         move.l d0,16(sp)
    38e4:	|         move.l 16(sp),d0
    38e8:	|         move.l d0,1a6e4 <CstBackDropBufferApplyStart>
  if( !CstBackDropBufferApplyStart)
    38ee:	|         move.l 1a6e4 <CstBackDropBufferApplyStart>,d0
    38f4:	|     /-- bne.s 390a <CstReserveBackdrop+0x1e2>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for CstBackDropBufferApplyStart");
    38f6:	|     |   pea 17fe2 <PutChar+0x504>
    38fc:	|     |   jsr 1703c <KPrintF>
    3902:	|     |   addq.l #4,sp
    return FALSE;  
    3904:	|     |   clr.w d0
    3906:	+-----|-- bra.w 3aa8 <CstReserveBackdrop+0x380>
  }
  CstBackDropBufferApplyCursor = CstBackDropBufferApplyStart;
    390a:	|     \-> move.l 1a6e4 <CstBackDropBufferApplyStart>,d0
    3910:	|         move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
  *CstBackDropBufferApplyStart = 0;
    3916:	|         movea.l 1a6e4 <CstBackDropBufferApplyStart>,a0
    391c:	|         clr.w (a0)

  *CstBackDropBufferApplyStart = 0;
    391e:	|         movea.l 1a6e4 <CstBackDropBufferApplyStart>,a0
    3924:	|         clr.w (a0)
  CstViewBuffer = AllocVec(CstBackdropSize+width*2,MEMF_CHIP); //Some extra size for bob routine border area
    3926:	|         move.w 1a6c2 <CstBackdropSize>,d0
    392c:	|         move.w d0,d0
    392e:	|         andi.l #65535,d0
    3934:	|         move.l 64(sp),d1
    3938:	|         add.l d1,d1
    393a:	|         add.l d1,d0
    393c:	|         move.l d0,12(sp)
    3940:	|         moveq #2,d1
    3942:	|         move.l d1,8(sp)
    3946:	|         move.l 1a7a4 <SysBase>,d0
    394c:	|         movea.l d0,a6
    394e:	|         move.l 12(sp),d0
    3952:	|         move.l 8(sp),d1
    3956:	|         jsr -684(a6)
    395a:	|         move.l d0,4(sp)
    395e:	|         move.l 4(sp),d0
    3962:	|         move.l d0,1a6d4 <CstViewBuffer>
  if( !CstViewBuffer)
    3968:	|         move.l 1a6d4 <CstViewBuffer>,d0
    396e:	|     /-- bne.s 3984 <CstReserveBackdrop+0x25c>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for ViewBuffer");
    3970:	|     |   pea 1802d <PutChar+0x54f>
    3976:	|     |   jsr 1703c <KPrintF>
    397c:	|     |   addq.l #4,sp
    return FALSE;  
    397e:	|     |   clr.w d0
    3980:	+-----|-- bra.w 3aa8 <CstReserveBackdrop+0x380>
  }
  KPrintF("CstReserveBackdrop: ViewBuffer reserved");
    3984:	|     \-> pea 18067 <PutChar+0x589>
    398a:	|         jsr 1703c <KPrintF>
    3990:	|         addq.l #4,sp
  
  CstDrawBuffer += width/4; //divide with 4 because pointer is ulong 
    3992:	|         move.l 1a6d8 <CstDrawBuffer>,d1
    3998:	|         move.l 64(sp),d0
    399c:	|     /-- bpl.s 39a0 <CstReserveBackdrop+0x278>
    399e:	|     |   addq.l #3,d0
    39a0:	|     \-> asr.l #2,d0
    39a2:	|         add.l d0,d0
    39a4:	|         add.l d0,d0
    39a6:	|         add.l d1,d0
    39a8:	|         move.l d0,1a6d8 <CstDrawBuffer>
  CstViewBuffer += width/4; //divide with 4 because pointer is ulong
    39ae:	|         move.l 1a6d4 <CstViewBuffer>,d1
    39b4:	|         move.l 64(sp),d0
    39b8:	|     /-- bpl.s 39bc <CstReserveBackdrop+0x294>
    39ba:	|     |   addq.l #3,d0
    39bc:	|     \-> asr.l #2,d0
    39be:	|         add.l d0,d0
    39c0:	|         add.l d0,d0
    39c2:	|         add.l d1,d0
    39c4:	|         move.l d0,1a6d4 <CstViewBuffer>
  

#ifdef EMULATOR
 	debug_register_bitmap(CstBackDrop, "CstBackDrop.bpl", 320, 256, 5, 0);
    39ca:	|         move.l 1a6c6 <CstBackDrop>,d0
    39d0:	|         clr.l -(sp)
    39d2:	|         pea 5 <_start+0x5>
    39d6:	|         pea 100 <copyString+0x48>
    39da:	|         pea 140 <decodeFilename+0x28>
    39de:	|         pea 1808f <PutChar+0x5b1>
    39e4:	|         move.l d0,-(sp)
    39e6:	|         jsr 17124 <debug_register_bitmap>
    39ec:	|         lea 24(sp),sp
  debug_register_bitmap(CstDrawBuffer, "drawbuffer.bpl", width*8, height, 5, 0);
    39f0:	|         move.l 68(sp),d0
    39f4:	|         movea.w d0,a1
    39f6:	|         move.l 64(sp),d0
    39fa:	|         lsl.w #3,d0
    39fc:	|         movea.w d0,a0
    39fe:	|         move.l 1a6d8 <CstDrawBuffer>,d0
    3a04:	|         clr.l -(sp)
    3a06:	|         pea 5 <_start+0x5>
    3a0a:	|         move.l a1,-(sp)
    3a0c:	|         move.l a0,-(sp)
    3a0e:	|         pea 1809f <PutChar+0x5c1>
    3a14:	|         move.l d0,-(sp)
    3a16:	|         jsr 17124 <debug_register_bitmap>
    3a1c:	|         lea 24(sp),sp
  debug_register_bitmap(CstViewBuffer, "viewbuffer.bpl", width*8, height, 5, 0);
    3a20:	|         move.l 68(sp),d0
    3a24:	|         movea.w d0,a1
    3a26:	|         move.l 64(sp),d0
    3a2a:	|         lsl.w #3,d0
    3a2c:	|         movea.w d0,a0
    3a2e:	|         move.l 1a6d4 <CstViewBuffer>,d0
    3a34:	|         clr.l -(sp)
    3a36:	|         pea 5 <_start+0x5>
    3a3a:	|         move.l a1,-(sp)
    3a3c:	|         move.l a0,-(sp)
    3a3e:	|         pea 180ae <PutChar+0x5d0>
    3a44:	|         move.l d0,-(sp)
    3a46:	|         jsr 17124 <debug_register_bitmap>
    3a4c:	|         lea 24(sp),sp
#endif

  

  if( !CstCopperList || ! CstDrawBuffer || !CstViewBuffer)
    3a50:	|         move.l 1a6ce <CstCopperList>,d0
    3a56:	|     /-- beq.s 3a68 <CstReserveBackdrop+0x340>
    3a58:	|     |   move.l 1a6d8 <CstDrawBuffer>,d0
    3a5e:	|     +-- beq.s 3a68 <CstReserveBackdrop+0x340>
    3a60:	|     |   move.l 1a6d4 <CstViewBuffer>,d0
    3a66:	|  /--|-- bne.s 3a7a <CstReserveBackdrop+0x352>
  {
    KPrintF("CstReserveBackdrop: Memory allocation failed");
    3a68:	|  |  \-> pea 180bd <PutChar+0x5df>
    3a6e:	|  |      jsr 1703c <KPrintF>
    3a74:	|  |      addq.l #4,sp
    return FALSE;
    3a76:	|  |      clr.w d0
    3a78:	+--|----- bra.s 3aa8 <CstReserveBackdrop+0x380>
  }

  KPrintF("CstReserveBackdrop: Setting Copperlist");
    3a7a:	|  \----> pea 180ea <PutChar+0x60c>
    3a80:	|         jsr 1703c <KPrintF>
    3a86:	|         addq.l #4,sp
  CstSetCl( CstCopperList);
    3a88:	|         move.l 1a6ce <CstCopperList>,d0
    3a8e:	|         move.l d0,-(sp)
    3a90:	|         jsr 35dc <CstSetCl>
    3a96:	|         addq.l #4,sp
  KPrintF("CstReserveBackdrop: Copperlist Set");
    3a98:	|         pea 18111 <PutChar+0x633>
    3a9e:	|         jsr 1703c <KPrintF>
    3aa4:	|         addq.l #4,sp
  return TRUE;
    3aa6:	|         moveq #1,d0

}
    3aa8:	\-------> movea.l (sp)+,a6
    3aaa:	          lea 56(sp),sp
    3aae:	          rts

00003ab0 <CstUnfreeze>:

void CstUnfreeze() {
    3ab0:	       lea -24(sp),sp
    3ab4:	       move.l a6,-(sp)
    3ab6:	       move.l d2,-(sp)
	KPrintF("CstUnfreeze: Unfreezing Background Started");  
    3ab8:	       pea 18134 <PutChar+0x656>
    3abe:	       jsr 1703c <KPrintF>
    3ac4:	       addq.l #4,sp

  UWORD size = winWidth/8*winHeight*5;
    3ac6:	       move.l 1a6f8 <winWidth>,d0
    3acc:	       lsr.l #3,d0
    3ace:	       move.l d0,d1
    3ad0:	       move.l 1a6fc <winHeight>,d0
    3ad6:	       move.l d0,d0
    3ad8:	       muls.w d0,d1
    3ada:	       move.w d1,d0
    3adc:	       add.w d0,d0
    3ade:	       add.w d0,d0
    3ae0:	       move.w d0,d2
    3ae2:	       add.w d1,d2
    3ae4:	       move.w d2,18(sp)

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    3ae8:	       move.l #14675968,14(sp)

#ifdef EMULATOR
  debug_register_bitmap(CstBackDropBackup, "BackDropBackup", winWidth, winHeight, 5, 0);
    3af0:	       move.l 1a6fc <winHeight>,d0
    3af6:	       move.l d0,d0
    3af8:	       movea.w d0,a1
    3afa:	       move.l 1a6f8 <winWidth>,d0
    3b00:	       move.l d0,d0
    3b02:	       movea.w d0,a0
    3b04:	       move.l 1a6ca <CstBackDropBackup>,d0
    3b0a:	       clr.l -(sp)
    3b0c:	       pea 5 <_start+0x5>
    3b10:	       move.l a1,-(sp)
    3b12:	       move.l a0,-(sp)
    3b14:	       pea 17d06 <PutChar+0x228>
    3b1a:	       move.l d0,-(sp)
    3b1c:	       jsr 17124 <debug_register_bitmap>
    3b22:	       lea 24(sp),sp
#endif  

  ULONG *src = (ULONG *) CstBackDropBackup;
    3b26:	       move.l 1a6ca <CstBackDropBackup>,28(sp)
  ULONG *dst = (ULONG *) CstBackDrop;
    3b2e:	       move.l 1a6c6 <CstBackDrop>,24(sp)
  for(int i=0;i<size/4;i++) 
    3b36:	       clr.l 20(sp)
    3b3a:	   /-- bra.s 3b60 <CstUnfreeze+0xb0>
  {
    *dst++ = *src++;
    3b3c:	/--|-> move.l 28(sp),d1
    3b40:	|  |   move.l d1,d0
    3b42:	|  |   addq.l #4,d0
    3b44:	|  |   move.l d0,28(sp)
    3b48:	|  |   move.l 24(sp),d0
    3b4c:	|  |   move.l d0,d2
    3b4e:	|  |   addq.l #4,d2
    3b50:	|  |   move.l d2,24(sp)
    3b54:	|  |   movea.l d1,a0
    3b56:	|  |   move.l (a0),d1
    3b58:	|  |   movea.l d0,a0
    3b5a:	|  |   move.l d1,(a0)
  for(int i=0;i<size/4;i++) 
    3b5c:	|  |   addq.l #1,20(sp)
    3b60:	|  \-> move.w 18(sp),d0
    3b64:	|      lsr.w #2,d0
    3b66:	|      move.w d0,d0
    3b68:	|      andi.l #65535,d0
    3b6e:	|      cmp.l 20(sp),d0
    3b72:	\----- bgt.s 3b3c <CstUnfreeze+0x8c>
  }

  CstApplyBackDropCounter = 2;
    3b74:	       move.w #2,1a6d2 <CstApplyBackDropCounter>

  *CstBackDropBufferApplyCursor++ = winWidth/16;
    3b7c:	       move.l 1a6f8 <winWidth>,d0
    3b82:	       lsr.l #4,d0
    3b84:	       movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    3b8a:	       move.l a0,d1
    3b8c:	       addq.l #2,d1
    3b8e:	       move.l d1,1a6e8 <CstBackDropBufferApplyCursor>
    3b94:	       move.l d0,d0
    3b96:	       move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = winHeight;
    3b98:	       move.l 1a6fc <winHeight>,d0
    3b9e:	       movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    3ba4:	       move.l a0,d1
    3ba6:	       addq.l #2,d1
    3ba8:	       move.l d1,1a6e8 <CstBackDropBufferApplyCursor>
    3bae:	       move.l d0,d0
    3bb0:	       move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = 0;
    3bb2:	       movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    3bb8:	       move.l a0,d0
    3bba:	       addq.l #2,d0
    3bbc:	       move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    3bc2:	       clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    3bc4:	       movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    3bca:	       move.l a0,d0
    3bcc:	       addq.l #2,d0
    3bce:	       move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    3bd4:	       clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    3bd6:	       movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    3bdc:	       move.l a0,d0
    3bde:	       addq.l #2,d0
    3be0:	       move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    3be6:	       clr.w (a0)
  
  if( !CstBackDropBackup) {
    3be8:	       move.l 1a6ca <CstBackDropBackup>,d0
    3bee:	   /-- bne.s 3c08 <CstUnfreeze+0x158>
    FreeVec( CstBackDropBackup);
    3bf0:	   |   move.l 1a6ca <CstBackDropBackup>,10(sp)
    3bf8:	   |   move.l 1a7a4 <SysBase>,d0
    3bfe:	   |   movea.l d0,a6
    3c00:	   |   movea.l 10(sp),a1
    3c04:	   |   jsr -690(a6)
  }

  KPrintF("CstFreeze: Finished");
    3c08:	   \-> pea 17d15 <PutChar+0x237>
    3c0e:	       jsr 1703c <KPrintF>
    3c14:	       addq.l #4,sp

}
    3c16:	       nop
    3c18:	       move.l (sp)+,d2
    3c1a:	       movea.l (sp)+,a6
    3c1c:	       lea 24(sp),sp
    3c20:	       rts

00003c22 <drawLine>:
#include "support/gcc8_c_support.h"
#include "line.h"

extern int sceneWidth, sceneHeight;

void drawLine(int x1, int y1, int x2, int y2) {
    3c22:	       lea -20(sp),sp
	int x, y;
	BOOL backwards = FALSE;
    3c26:	       clr.w 10(sp)
	
	if (x1 < 0)  x1 = 0;
    3c2a:	       tst.l 24(sp)
    3c2e:	   /-- bge.s 3c34 <drawLine+0x12>
    3c30:	   |   clr.l 24(sp)
	if (y1 < 0)  y1 = 0;
    3c34:	   \-> tst.l 28(sp)
    3c38:	   /-- bge.s 3c3e <drawLine+0x1c>
    3c3a:	   |   clr.l 28(sp)
	if (x2 < 0)  x2 = 0;
    3c3e:	   \-> tst.l 32(sp)
    3c42:	   /-- bge.s 3c48 <drawLine+0x26>
    3c44:	   |   clr.l 32(sp)
	if (y2 < 0)  y2 = 0;
    3c48:	   \-> tst.l 36(sp)
    3c4c:	   /-- bge.s 3c52 <drawLine+0x30>
    3c4e:	   |   clr.l 36(sp)
	if (x1 > sceneWidth) x1 = sceneWidth - 1;
    3c52:	   \-> move.l 1a840 <sceneWidth>,d0
    3c58:	       cmp.l 24(sp),d0
    3c5c:	   /-- bge.s 3c6c <drawLine+0x4a>
    3c5e:	   |   move.l 1a840 <sceneWidth>,d0
    3c64:	   |   move.l d0,d1
    3c66:	   |   subq.l #1,d1
    3c68:	   |   move.l d1,24(sp)
	if (x2 > sceneWidth) x2 = sceneWidth - 1;
    3c6c:	   \-> move.l 1a840 <sceneWidth>,d0
    3c72:	       cmp.l 32(sp),d0
    3c76:	   /-- bge.s 3c86 <drawLine+0x64>
    3c78:	   |   move.l 1a840 <sceneWidth>,d0
    3c7e:	   |   move.l d0,d1
    3c80:	   |   subq.l #1,d1
    3c82:	   |   move.l d1,32(sp)
	if (y1 > sceneHeight) y1 = sceneHeight - 1;
    3c86:	   \-> move.l 1a844 <sceneHeight>,d0
    3c8c:	       cmp.l 28(sp),d0
    3c90:	   /-- bge.s 3ca0 <drawLine+0x7e>
    3c92:	   |   move.l 1a844 <sceneHeight>,d0
    3c98:	   |   move.l d0,d1
    3c9a:	   |   subq.l #1,d1
    3c9c:	   |   move.l d1,28(sp)
	if (y2 > sceneHeight) y2 = sceneHeight - 1;
    3ca0:	   \-> move.l 1a844 <sceneHeight>,d0
    3ca6:	       cmp.l 36(sp),d0
    3caa:	   /-- bge.s 3cba <drawLine+0x98>
    3cac:	   |   move.l 1a844 <sceneHeight>,d0
    3cb2:	   |   move.l d0,d1
    3cb4:	   |   subq.l #1,d1
    3cb6:	   |   move.l d1,36(sp)

	if (x1 > x2) {
    3cba:	   \-> move.l 24(sp),d0
    3cbe:	       cmp.l 32(sp),d0
    3cc2:	/----- ble.s 3cde <drawLine+0xbc>
		x = x2; 
    3cc4:	|      move.l 32(sp),16(sp)
		backwards = !backwards;
    3cca:	|      tst.w 10(sp)
    3cce:	|      seq d0
    3cd0:	|      neg.b d0
    3cd2:	|      move.b d0,d0
    3cd4:	|      andi.w #255,d0
    3cd8:	|      move.w d0,10(sp)
    3cdc:	|  /-- bra.s 3ce4 <drawLine+0xc2>
	} else x = x1;
    3cde:	\--|-> move.l 24(sp),16(sp)
		
	if (y1 > y2) {
    3ce4:	   \-> move.l 28(sp),d1
    3ce8:	       cmp.l 36(sp),d1
    3cec:	/----- ble.s 3d08 <drawLine+0xe6>
		y = y2; 
    3cee:	|      move.l 36(sp),12(sp)
		backwards = !backwards;
    3cf4:	|      tst.w 10(sp)
    3cf8:	|      seq d0
    3cfa:	|      neg.b d0
    3cfc:	|      move.b d0,d0
    3cfe:	|      andi.w #255,d0
    3d02:	|      move.w d0,10(sp)
    3d06:	|  /-- bra.s 3d0e <drawLine+0xec>
	} else y = y1;	
    3d08:	\--|-> move.l 28(sp),12(sp)
	
	int diffX = x2-x1;
    3d0e:	   \-> move.l 32(sp),d0
    3d12:	       sub.l 24(sp),d0
    3d16:	       move.l d0,6(sp)
    diffX = diffX < 0 ? diffX * -1 : diffX;
    3d1a:	       move.l 6(sp),d0
    3d1e:	   /-- bpl.s 3d22 <drawLine+0x100>
    3d20:	   |   neg.l d0
    3d22:	   \-> move.l d0,6(sp)
	int diffY = y2-y1;	
    3d26:	       move.l 36(sp),d1
    3d2a:	       sub.l 28(sp),d1
    3d2e:	       move.l d1,2(sp)
    diffY = diffY < 0 ? diffY * -1 : diffY;
    3d32:	       move.l 2(sp),d0
    3d36:	   /-- bpl.s 3d3a <drawLine+0x118>
    3d38:	   |   neg.l d0
    3d3a:	   \-> move.l d0,2(sp)
	
	if (! diffX) {
    3d3e:	       tst.l 6(sp)
    3d42:	   /-- bne.s 3d66 <drawLine+0x144>
		diffX = 1;
    3d44:	   |   moveq #1,d0
    3d46:	   |   move.l d0,6(sp)
		if (x == sceneWidth - 1) x = sceneWidth -2;
    3d4a:	   |   move.l 1a840 <sceneWidth>,d0
    3d50:	   |   subq.l #1,d0
    3d52:	   |   cmp.l 16(sp),d0
    3d56:	   +-- bne.s 3d66 <drawLine+0x144>
    3d58:	   |   move.l 1a840 <sceneWidth>,d0
    3d5e:	   |   move.l d0,d1
    3d60:	   |   subq.l #2,d1
    3d62:	   |   move.l d1,16(sp)
	}
	if (! diffY) {
    3d66:	   \-> tst.l 2(sp)
    3d6a:	   /-- bne.s 3d8e <drawLine+0x16c>
		diffY = 1;
    3d6c:	   |   moveq #1,d0
    3d6e:	   |   move.l d0,2(sp)
		if (y == sceneHeight - 1) y = sceneHeight -2;
    3d72:	   |   move.l 1a844 <sceneHeight>,d0
    3d78:	   |   subq.l #1,d0
    3d7a:	   |   cmp.l 12(sp),d0
    3d7e:	   +-- bne.s 3d8e <drawLine+0x16c>
    3d80:	   |   move.l 1a844 <sceneHeight>,d0
    3d86:	   |   move.l d0,d1
    3d88:	   |   subq.l #2,d1
    3d8a:	   |   move.l d1,12(sp)
	}

    KPrintF("drawLine: Not implemented on Amiga"); //Amiga Todo: Implement 	
    3d8e:	   \-> pea 1815f <PutChar+0x681>
    3d94:	       jsr 1703c <KPrintF>
    3d9a:	       addq.l #4,sp
	
}
    3d9c:	       nop
    3d9e:	       lea 20(sp),sp
    3da2:	       rts

00003da4 <deleteTextures>:
extern int specialSettings;
struct textureList *firstTexture = NULL;
BOOL NPOT_textures = TRUE;

void deleteTextures(unsigned int n,  unsigned int * textures)
{
    3da4:	                      lea -24(sp),sp
    3da8:	                      move.l a6,-(sp)
	if (firstTexture == NULL) {
    3daa:	                      move.l 1a700 <firstTexture>,d0
    3db0:	/-------------------- beq.w 3e8e <deleteTextures+0xea>
		//debugOut("Deleting texture while list is already empty.\n");
	} else {
		for (unsigned int i = 0; i < n; i++) {
    3db4:	|                     clr.l 24(sp)
    3db8:	|     /-------------- bra.w 3e82 <deleteTextures+0xde>
			BOOL found = FALSE;
    3dbc:	|  /--|-------------> clr.w 18(sp)
			struct textureList *list = firstTexture;
    3dc0:	|  |  |               move.l 1a700 <firstTexture>,20(sp)
			if (list->name == textures[i]) {
    3dc8:	|  |  |               movea.l 20(sp),a0
    3dcc:	|  |  |               move.l (a0),d1
    3dce:	|  |  |               move.l 24(sp),d0
    3dd2:	|  |  |               add.l d0,d0
    3dd4:	|  |  |               add.l d0,d0
    3dd6:	|  |  |               movea.l 36(sp),a0
    3dda:	|  |  |               adda.l d0,a0
    3ddc:	|  |  |               move.l (a0),d0
    3dde:	|  |  |               cmp.l d1,d0
    3de0:	|  |  |  /----------- bne.w 3e74 <deleteTextures+0xd0>
				found = TRUE;
    3de4:	|  |  |  |            move.w #1,18(sp)
				firstTexture = list->next;
    3dea:	|  |  |  |            movea.l 20(sp),a0
    3dee:	|  |  |  |            move.l 12(a0),d0
    3df2:	|  |  |  |            move.l d0,1a700 <firstTexture>
				FreeVec(list);
    3df8:	|  |  |  |            move.l 20(sp),6(sp)
    3dfe:	|  |  |  |            move.l 1a7a4 <SysBase>,d0
    3e04:	|  |  |  |            movea.l d0,a6
    3e06:	|  |  |  |            movea.l 6(sp),a1
    3e0a:	|  |  |  |            jsr -690(a6)
				continue;
    3e0e:	|  |  |  |  /-------- bra.s 3e7e <deleteTextures+0xda>
			}

			while (list->next) {
				if (list->next->name == textures[i]) {
    3e10:	|  |  |  |  |  /----> movea.l 20(sp),a0
    3e14:	|  |  |  |  |  |      movea.l 12(a0),a0
    3e18:	|  |  |  |  |  |      move.l (a0),d1
    3e1a:	|  |  |  |  |  |      move.l 24(sp),d0
    3e1e:	|  |  |  |  |  |      add.l d0,d0
    3e20:	|  |  |  |  |  |      add.l d0,d0
    3e22:	|  |  |  |  |  |      movea.l 36(sp),a0
    3e26:	|  |  |  |  |  |      adda.l d0,a0
    3e28:	|  |  |  |  |  |      move.l (a0),d0
    3e2a:	|  |  |  |  |  |      cmp.l d1,d0
    3e2c:	|  |  |  |  |  |  /-- bne.s 3e6a <deleteTextures+0xc6>
					found = TRUE;
    3e2e:	|  |  |  |  |  |  |   move.w #1,18(sp)
					struct textureList *deleteMe = list->next;
    3e34:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    3e38:	|  |  |  |  |  |  |   move.l 12(a0),14(sp)
					list->next = list->next->next;
    3e3e:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    3e42:	|  |  |  |  |  |  |   movea.l 12(a0),a0
    3e46:	|  |  |  |  |  |  |   move.l 12(a0),d0
    3e4a:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    3e4e:	|  |  |  |  |  |  |   move.l d0,12(a0)
					FreeVec(deleteMe);
    3e52:	|  |  |  |  |  |  |   move.l 14(sp),10(sp)
    3e58:	|  |  |  |  |  |  |   move.l 1a7a4 <SysBase>,d0
    3e5e:	|  |  |  |  |  |  |   movea.l d0,a6
    3e60:	|  |  |  |  |  |  |   movea.l 10(sp),a1
    3e64:	|  |  |  |  |  |  |   jsr -690(a6)
					break;
    3e68:	|  |  |  |  +--|--|-- bra.s 3e7e <deleteTextures+0xda>
				}
				list = list->next;
    3e6a:	|  |  |  |  |  |  \-> movea.l 20(sp),a0
    3e6e:	|  |  |  |  |  |      move.l 12(a0),20(sp)
			while (list->next) {
    3e74:	|  |  |  \--|--|----> movea.l 20(sp),a0
    3e78:	|  |  |     |  |      move.l 12(a0),d0
    3e7c:	|  |  |     |  \----- bne.s 3e10 <deleteTextures+0x6c>
		for (unsigned int i = 0; i < n; i++) {
    3e7e:	|  |  |     \-------> addq.l #1,24(sp)
    3e82:	|  |  \-------------> move.l 24(sp),d0
    3e86:	|  |                  cmp.l 32(sp),d0
    3e8a:	|  \----------------- bcs.w 3dbc <deleteTextures+0x18>
			}
		}
	}
}
    3e8e:	\-------------------> nop
    3e90:	                      movea.l (sp)+,a6
    3e92:	                      lea 24(sp),sp
    3e96:	                      rts

00003e98 <setGraphicsWindow>:

void setGraphicsWindow(BOOL fullscreen) {
    3e98:	subq.l #4,sp
    3e9a:	move.l 8(sp),d0
    3e9e:	move.w d0,d0
    3ea0:	move.w d0,2(sp)
	KPrintF("setGraphicsWindow: Not implemented on Amiga yet"); //TODO
    3ea4:	pea 18182 <PutChar+0x6a4>
    3eaa:	jsr 1703c <KPrintF>
    3eb0:	addq.l #4,sp
}
    3eb2:	nop
    3eb4:	addq.l #4,sp
    3eb6:	rts

00003eb8 <resourceNameFromNum>:

extern int numResourceNames /* = 0*/;
extern char * * allResourceNames /*= NULL*/;

const char * resourceNameFromNum (int i) {
	if (i == -1) return NULL;
    3eb8:	       moveq #-1,d0
    3eba:	       cmp.l 4(sp),d0
    3ebe:	   /-- bne.s 3ec4 <resourceNameFromNum+0xc>
    3ec0:	   |   moveq #0,d0
    3ec2:	/--|-- bra.s 3efc <resourceNameFromNum+0x44>
	if (numResourceNames == 0) return "RESOURCE";
    3ec4:	|  \-> move.l 1a780 <numResourceNames>,d0
    3eca:	|  /-- bne.s 3ed4 <resourceNameFromNum+0x1c>
    3ecc:	|  |   move.l #98738,d0
    3ed2:	+--|-- bra.s 3efc <resourceNameFromNum+0x44>
	if (i < numResourceNames) return allResourceNames[i];
    3ed4:	|  \-> move.l 1a780 <numResourceNames>,d0
    3eda:	|      cmp.l 4(sp),d0
    3ede:	|  /-- ble.s 3ef6 <resourceNameFromNum+0x3e>
    3ee0:	|  |   move.l 1a738 <allResourceNames>,d1
    3ee6:	|  |   move.l 4(sp),d0
    3eea:	|  |   add.l d0,d0
    3eec:	|  |   add.l d0,d0
    3eee:	|  |   movea.l d1,a0
    3ef0:	|  |   adda.l d0,a0
    3ef2:	|  |   move.l (a0),d0
    3ef4:	+--|-- bra.s 3efc <resourceNameFromNum+0x44>
	return "Unknown resource";
    3ef6:	|  \-> move.l #98747,d0
    3efc:	\----> rts

00003efe <main_sludge>:
char * gamePath = NULL;
char *bundleFolder;
int weAreDoneSoQuit;

int main_sludge(int argc, char *argv[])
{
    3efe:	          lea -44(sp),sp
    3f02:	          movem.l d2-d3/a6,-(sp)
	/* Dimensions of our window. */
	//AMIGA TODO: Maybe remove as there will be no windowed mode
    winWidth = 320;
    3f06:	          move.l #320,1a6f8 <winWidth>
    winHeight = 256;
    3f10:	          move.l #256,1a6fc <winHeight>

	char * sludgeFile;

	if(argc == 0) {
    3f1a:	          tst.l 60(sp)
    3f1e:	      /-- bne.s 3f36 <main_sludge+0x38>
		bundleFolder = copyString("game/");
    3f20:	      |   pea 181cc <PutChar+0x6ee>
    3f26:	      |   jsr b8 <copyString>
    3f2c:	      |   addq.l #4,sp
    3f2e:	      |   move.l d0,1a710 <bundleFolder>
    3f34:	   /--|-- bra.s 3f4c <main_sludge+0x4e>
	} else {
		bundleFolder = copyString(argv[0]);
    3f36:	   |  \-> movea.l 64(sp),a0
    3f3a:	   |      move.l (a0),d0
    3f3c:	   |      move.l d0,-(sp)
    3f3e:	   |      jsr b8 <copyString>
    3f44:	   |      addq.l #4,sp
    3f46:	   |      move.l d0,1a710 <bundleFolder>
	}
    
	int lastSlash = -1;
    3f4c:	   \----> moveq #-1,d0
    3f4e:	          move.l d0,48(sp)
	for (int i = 0; bundleFolder[i]; i ++) {
    3f52:	          clr.l 44(sp)
    3f56:	   /----- bra.s 3f78 <main_sludge+0x7a>
		if (bundleFolder[i] == PATHSLASH) lastSlash = i;
    3f58:	/--|----> move.l 1a710 <bundleFolder>,d1
    3f5e:	|  |      move.l 44(sp),d0
    3f62:	|  |      movea.l d1,a0
    3f64:	|  |      adda.l d0,a0
    3f66:	|  |      move.b (a0),d0
    3f68:	|  |      cmpi.b #47,d0
    3f6c:	|  |  /-- bne.s 3f74 <main_sludge+0x76>
    3f6e:	|  |  |   move.l 44(sp),48(sp)
	for (int i = 0; bundleFolder[i]; i ++) {
    3f74:	|  |  \-> addq.l #1,44(sp)
    3f78:	|  \----> move.l 1a710 <bundleFolder>,d1
    3f7e:	|         move.l 44(sp),d0
    3f82:	|         movea.l d1,a0
    3f84:	|         adda.l d0,a0
    3f86:	|         move.b (a0),d0
    3f88:	\-------- bne.s 3f58 <main_sludge+0x5a>
	}
	bundleFolder[lastSlash+1] = NULL;
    3f8a:	          move.l 1a710 <bundleFolder>,d0
    3f90:	          move.l 48(sp),d1
    3f94:	          addq.l #1,d1
    3f96:	          movea.l d0,a0
    3f98:	          adda.l d1,a0
    3f9a:	          clr.b (a0)

	if (argc > 1) {
    3f9c:	          moveq #1,d0
    3f9e:	          cmp.l 60(sp),d0
    3fa2:	      /-- bge.s 3fbe <main_sludge+0xc0>
		sludgeFile = argv[argc - 1];
    3fa4:	      |   move.l 60(sp),d0
    3fa8:	      |   addi.l #1073741823,d0
    3fae:	      |   add.l d0,d0
    3fb0:	      |   add.l d0,d0
    3fb2:	      |   movea.l 64(sp),a0
    3fb6:	      |   adda.l d0,a0
    3fb8:	      |   move.l (a0),52(sp)
    3fbc:	   /--|-- bra.s 4018 <main_sludge+0x11a>
	} else {
		sludgeFile = joinStrings (bundleFolder, "gamedata.slg");
    3fbe:	   |  \-> move.l 1a710 <bundleFolder>,d0
    3fc4:	   |      pea 181d2 <PutChar+0x6f4>
    3fca:	   |      move.l d0,-(sp)
    3fcc:	   |      jsr 13b1c <joinStrings>
    3fd2:	   |      addq.l #8,sp
    3fd4:	   |      move.l d0,52(sp)
		if (! ( fileExists (sludgeFile) ) ) {
    3fd8:	   |      move.l 52(sp),-(sp)
    3fdc:	   |      jsr 13a16 <fileExists>
    3fe2:	   |      addq.l #4,sp
    3fe4:	   |      tst.b d0
    3fe6:	   +----- bne.s 4018 <main_sludge+0x11a>
			FreeVec(sludgeFile);
    3fe8:	   |      move.l 52(sp),40(sp)
    3fee:	   |      move.l 1a7a4 <SysBase>,d0
    3ff4:	   |      movea.l d0,a6
    3ff6:	   |      movea.l 40(sp),a1
    3ffa:	   |      jsr -690(a6)
			sludgeFile = joinStrings (bundleFolder, "gamedata");			
    3ffe:	   |      move.l 1a710 <bundleFolder>,d0
    4004:	   |      pea 181df <PutChar+0x701>
    400a:	   |      move.l d0,-(sp)
    400c:	   |      jsr 13b1c <joinStrings>
    4012:	   |      addq.l #8,sp
    4014:	   |      move.l d0,52(sp)
	//AMIGA TODO: Show arguments
	/*if (! parseCmdlineParameters(argc, argv) && !(sludgeFile) ) {
		printCmdlineUsage();
		return 0;
	}*/
	KPrintF("Game file not found.\n");
    4018:	   \----> pea 181e8 <PutChar+0x70a>
    401e:	          jsr 1703c <KPrintF>
    4024:	          addq.l #4,sp
	if (! fileExists(sludgeFile) ) {	
    4026:	          move.l 52(sp),-(sp)
    402a:	          jsr 13a16 <fileExists>
    4030:	          addq.l #4,sp
    4032:	          tst.b d0
    4034:	      /-- bne.s 408c <main_sludge+0x18e>
		Write(Output(), (APTR)"Game file not found.\n", 21);
    4036:	      |   move.l 1a7ac <DOSBase>,d0
    403c:	      |   movea.l d0,a6
    403e:	      |   jsr -60(a6)
    4042:	      |   move.l d0,28(sp)
    4046:	      |   move.l 28(sp),d0
    404a:	      |   move.l d0,24(sp)
    404e:	      |   move.l #98792,20(sp)
    4056:	      |   moveq #21,d0
    4058:	      |   move.l d0,16(sp)
    405c:	      |   move.l 1a7ac <DOSBase>,d0
    4062:	      |   movea.l d0,a6
    4064:	      |   move.l 24(sp),d1
    4068:	      |   move.l 20(sp),d2
    406c:	      |   move.l 16(sp),d3
    4070:	      |   jsr -48(a6)
    4074:	      |   move.l d0,12(sp)
		KPrintF("Game file not found.\n");
    4078:	      |   pea 181e8 <PutChar+0x70a>
    407e:	      |   jsr 1703c <KPrintF>
    4084:	      |   addq.l #4,sp
		//AMIGA TODO: Show arguments
		//printCmdlineUsage();
		return 0;
    4086:	      |   moveq #0,d0
    4088:	/-----|-- bra.w 428a <main_sludge+0x38c>
	}

	KPrintF("Setgamefilepath\n");
    408c:	|     \-> pea 181fe <PutChar+0x720>
    4092:	|         jsr 1703c <KPrintF>
    4098:	|         addq.l #4,sp
	setGameFilePath (sludgeFile);	
    409a:	|         move.l 52(sp),-(sp)
    409e:	|         jsr 4294 <setGameFilePath>
    40a4:	|         addq.l #4,sp
	if (! initSludge (sludgeFile)) return 0;
    40a6:	|         move.l 52(sp),-(sp)
    40aa:	|         jsr 5842 <initSludge>
    40b0:	|         addq.l #4,sp
    40b2:	|         tst.w d0
    40b4:	|     /-- bne.s 40bc <main_sludge+0x1be>
    40b6:	|     |   moveq #0,d0
    40b8:	+-----|-- bra.w 428a <main_sludge+0x38c>
	
	if( winWidth != 320 || winHeight != 256) {
    40bc:	|     \-> move.l 1a6f8 <winWidth>,d0
    40c2:	|         cmpi.l #320,d0
    40c8:	|     /-- bne.s 40d8 <main_sludge+0x1da>
    40ca:	|     |   move.l 1a6fc <winHeight>,d0
    40d0:	|     |   cmpi.l #256,d0
    40d6:	|  /--|-- beq.s 40fa <main_sludge+0x1fc>
		KPrintF("This Screen Format is currently unsupported on Amiga. Only PAL Lowres supported atm. winWidth and winHeight will be reseted.");	
    40d8:	|  |  \-> pea 1820f <PutChar+0x731>
    40de:	|  |      jsr 1703c <KPrintF>
    40e4:	|  |      addq.l #4,sp
		winWidth = 320;
    40e6:	|  |      move.l #320,1a6f8 <winWidth>
		winHeight = 256;
    40f0:	|  |      move.l #256,1a6fc <winHeight>
	}

	KPrintF("Resizing Backdrop\n");
    40fa:	|  \----> pea 1828c <PutChar+0x7ae>
    4100:	|         jsr 1703c <KPrintF>
    4106:	|         addq.l #4,sp
	if (! resizeBackdrop (winWidth, winHeight)) {
    4108:	|         move.l 1a6fc <winHeight>,d0
    410e:	|         move.l d0,d1
    4110:	|         move.l 1a6f8 <winWidth>,d0
    4116:	|         move.l d1,-(sp)
    4118:	|         move.l d0,-(sp)
    411a:	|         jsr d234 <resizeBackdrop>
    4120:	|         addq.l #8,sp
    4122:	|         tst.w d0
    4124:	|     /-- bne.s 413a <main_sludge+0x23c>
		KPrintF("Couldn't allocate memory for backdrop");
    4126:	|     |   pea 1829f <PutChar+0x7c1>
    412c:	|     |   jsr 1703c <KPrintF>
    4132:	|     |   addq.l #4,sp
		return FALSE;
    4134:	|     |   moveq #0,d0
    4136:	+-----|-- bra.w 428a <main_sludge+0x38c>
	}

	KPrintF("Init People\n");
    413a:	|     \-> pea 182c5 <PutChar+0x7e7>
    4140:	|         jsr 1703c <KPrintF>
    4146:	|         addq.l #4,sp
	if (! initPeople ())
    4148:	|         jsr a790 <initPeople>
    414e:	|         tst.w d0
    4150:	|     /-- bne.s 4166 <main_sludge+0x268>
	{
		KPrintF("Couldn't initialise people stuff");
    4152:	|     |   pea 182d2 <PutChar+0x7f4>
    4158:	|     |   jsr 1703c <KPrintF>
    415e:	|     |   addq.l #4,sp
		return FALSE;
    4160:	|     |   moveq #0,d0
    4162:	+-----|-- bra.w 428a <main_sludge+0x38c>
	}

	KPrintF("Init Floor\n");
    4166:	|     \-> pea 182f3 <PutChar+0x815>
    416c:	|         jsr 1703c <KPrintF>
    4172:	|         addq.l #4,sp
	if (! initFloor ())
    4174:	|         jsr 163f2 <initFloor>
    417a:	|         tst.w d0
    417c:	|     /-- bne.s 4192 <main_sludge+0x294>
	{
		KPrintF("Couldn't initialise floor stuff");
    417e:	|     |   pea 182ff <PutChar+0x821>
    4184:	|     |   jsr 1703c <KPrintF>
    418a:	|     |   addq.l #4,sp
		
		return FALSE;
    418c:	|     |   moveq #0,d0
    418e:	+-----|-- bra.w 428a <main_sludge+0x38c>
	}

	KPrintF("Init Objecttype\n");
    4192:	|     \-> pea 1831f <PutChar+0x841>
    4198:	|         jsr 1703c <KPrintF>
    419e:	|         addq.l #4,sp
	if (! initObjectTypes ())
    41a0:	|         jsr d3f0 <initObjectTypes>
    41a6:	|         tst.w d0
    41a8:	|     /-- bne.s 41be <main_sludge+0x2c0>
	{
		KPrintF("Couldn't initialise object type stuff");
    41aa:	|     |   pea 18330 <PutChar+0x852>
    41b0:	|     |   jsr 1703c <KPrintF>
    41b6:	|     |   addq.l #4,sp
		return FALSE;
    41b8:	|     |   moveq #0,d0
    41ba:	+-----|-- bra.w 428a <main_sludge+0x38c>
	}

	KPrintF("Init speech\n");
    41be:	|     \-> pea 18356 <PutChar+0x878>
    41c4:	|         jsr 1703c <KPrintF>
    41ca:	|         addq.l #4,sp
	initSpeech ();
    41cc:	|         jsr 7c64 <initSpeech>
	KPrintF("Init status bar\n");
    41d2:	|         pea 18363 <PutChar+0x885>
    41d8:	|         jsr 1703c <KPrintF>
    41de:	|         addq.l #4,sp
	initStatusBar ();
    41e0:	|         jsr 7728 <initStatusBar>

	KPrintF("Get numbered string\n");
    41e6:	|         pea 18374 <PutChar+0x896>
    41ec:	|         jsr 1703c <KPrintF>
    41f2:	|         addq.l #4,sp
	gameName = getNumberedString(1);
    41f4:	|         pea 1 <_start+0x1>
    41f8:	|         jsr 6a38 <getNumberedString>
    41fe:	|         addq.l #4,sp
    4200:	|         move.l d0,1a708 <gameName>
	//initSoundStuff (hMainWindow); Todo Amiga: Maybe move soundstuff here
	KPrintF("Start new function num\n");
    4206:	|         pea 18389 <PutChar+0x8ab>
    420c:	|         jsr 1703c <KPrintF>
    4212:	|         addq.l #4,sp
	startNewFunctionNum (0, 0, NULL, noStack, TRUE);
    4214:	|         move.l 1a774 <noStack>,d0
    421a:	|         pea 1 <_start+0x1>
    421e:	|         move.l d0,-(sp)
    4220:	|         clr.l -(sp)
    4222:	|         clr.l -(sp)
    4224:	|         clr.l -(sp)
    4226:	|         jsr 688e <startNewFunctionNum>
    422c:	|         lea 20(sp),sp

	KPrintF("Starting main loop");
    4230:	|         pea 183a1 <PutChar+0x8c3>
    4236:	|         jsr 1703c <KPrintF>
    423c:	|         addq.l #4,sp

	volatile struct Custom *custom = (struct Custom*)0xdff000;
    423e:	|         move.l #14675968,36(sp)
	weAreDoneSoQuit = 0;
    4246:	|         clr.l 1a714 <weAreDoneSoQuit>
	while ( !weAreDoneSoQuit ) {	
    424c:	|     /-- bra.s 426c <main_sludge+0x36e>
		//custom->color[0] = 0xf00;			
		sludgeDisplay ();
    424e:	|  /--|-> jsr 681e <sludgeDisplay>
		CsiCheckInput();
    4254:	|  |  |   jsr cd5c <CsiCheckInput>
		walkAllPeople();
    425a:	|  |  |   jsr bd16 <walkAllPeople>
		handleInput();
    4260:	|  |  |   jsr 55dc <handleInput>
		//custom->color[0] = 0x000;			
		WaitVbl();
    4266:	|  |  |   jsr 16f70 <WaitVbl>
	while ( !weAreDoneSoQuit ) {	
    426c:	|  |  \-> move.l 1a714 <weAreDoneSoQuit>,d0
    4272:	|  \----- beq.s 424e <main_sludge+0x350>
	}	
	//Amiga Cleanup
	FreeVec(sludgeFile);
    4274:	|         move.l 52(sp),32(sp)
    427a:	|         move.l 1a7a4 <SysBase>,d0
    4280:	|         movea.l d0,a6
    4282:	|         movea.l 32(sp),a1
    4286:	|         jsr -690(a6)
}
    428a:	\-------> movem.l (sp)+,d2-d3/a6
    428e:	          lea 44(sp),sp
    4292:	          rts

00004294 <setGameFilePath>:

void setGameFilePath (char * f) {
    4294:	          lea -1104(sp),sp
    4298:	          move.l a6,-(sp)
    429a:	          move.l d2,-(sp)
	char currentDir[1000];

	if (!GetCurrentDirName( currentDir, 998)) {
    429c:	          move.l #1112,d0
    42a2:	          add.l sp,d0
    42a4:	          addi.l #-1102,d0
    42aa:	          move.l d0,1100(sp)
    42ae:	          move.l #998,1096(sp)
    42b6:	          move.l 1a7ac <DOSBase>,d0
    42bc:	          movea.l d0,a6
    42be:	          move.l 1100(sp),d1
    42c2:	          move.l 1096(sp),d2
    42c6:	          jsr -564(a6)
    42ca:	          move.w d0,1094(sp)
    42ce:	          move.w 1094(sp),d0
    42d2:	      /-- bne.s 42e2 <setGameFilePath+0x4e>
		KPrintF("setGameFilePath:  current directory.\n");
    42d4:	      |   pea 183b4 <PutChar+0x8d6>
    42da:	      |   jsr 1703c <KPrintF>
    42e0:	      |   addq.l #4,sp
	}	

	int got = -1, a;	
    42e2:	      \-> moveq #-1,d0
    42e4:	          move.l d0,1108(sp)

	for (a = 0; f[a]; a ++) {
    42e8:	          clr.l 1104(sp)
    42ec:	   /----- bra.s 430a <setGameFilePath+0x76>
		if (f[a] == PATHSLASH) got = a;
    42ee:	/--|----> move.l 1104(sp),d0
    42f2:	|  |      movea.l 1116(sp),a0
    42f6:	|  |      adda.l d0,a0
    42f8:	|  |      move.b (a0),d0
    42fa:	|  |      cmpi.b #47,d0
    42fe:	|  |  /-- bne.s 4306 <setGameFilePath+0x72>
    4300:	|  |  |   move.l 1104(sp),1108(sp)
	for (a = 0; f[a]; a ++) {
    4306:	|  |  \-> addq.l #1,1104(sp)
    430a:	|  \----> move.l 1104(sp),d0
    430e:	|         movea.l 1116(sp),a0
    4312:	|         adda.l d0,a0
    4314:	|         move.b (a0),d0
    4316:	\-------- bne.s 42ee <setGameFilePath+0x5a>
	}

	if (got != -1) {
    4318:	          moveq #-1,d0
    431a:	          cmp.l 1108(sp),d0
    431e:	   /----- beq.s 4398 <setGameFilePath+0x104>
		f[got] = 0;	
    4320:	   |      move.l 1108(sp),d0
    4324:	   |      movea.l 1116(sp),a0
    4328:	   |      adda.l d0,a0
    432a:	   |      clr.b (a0)
		BPTR lock = Lock(f, ACCESS_READ);	
    432c:	   |      move.l 1116(sp),1090(sp)
    4332:	   |      moveq #-2,d0
    4334:	   |      move.l d0,1086(sp)
    4338:	   |      move.l 1a7ac <DOSBase>,d0
    433e:	   |      movea.l d0,a6
    4340:	   |      move.l 1090(sp),d1
    4344:	   |      move.l 1086(sp),d2
    4348:	   |      jsr -84(a6)
    434c:	   |      move.l d0,1082(sp)
    4350:	   |      move.l 1082(sp),d0
    4354:	   |      move.l d0,1078(sp)
		if (!CurrentDir(lock)) {
    4358:	   |      move.l 1078(sp),1074(sp)
    435e:	   |      move.l 1a7ac <DOSBase>,d0
    4364:	   |      movea.l d0,a6
    4366:	   |      move.l 1074(sp),d1
    436a:	   |      jsr -126(a6)
    436e:	   |      move.l d0,1070(sp)
    4372:	   |      move.l 1070(sp),d0
    4376:	   |  /-- bne.s 438a <setGameFilePath+0xf6>
			KPrintF("setGameFilePath:: Failed changing to directory %s\n", f);
    4378:	   |  |   move.l 1116(sp),-(sp)
    437c:	   |  |   pea 183da <PutChar+0x8fc>
    4382:	   |  |   jsr 1703c <KPrintF>
    4388:	   |  |   addq.l #8,sp
		}
		f[got] = PATHSLASH;
    438a:	   |  \-> move.l 1108(sp),d0
    438e:	   |      movea.l 1116(sp),a0
    4392:	   |      adda.l d0,a0
    4394:	   |      move.b #47,(a0)
	}

	gamePath = AllocVec(400, MEMF_ANY);
    4398:	   \----> move.l #400,1066(sp)
    43a0:	          clr.l 1062(sp)
    43a4:	          move.l 1a7a4 <SysBase>,d0
    43aa:	          movea.l d0,a6
    43ac:	          move.l 1066(sp),d0
    43b0:	          move.l 1062(sp),d1
    43b4:	          jsr -684(a6)
    43b8:	          move.l d0,1058(sp)
    43bc:	          move.l 1058(sp),d0
    43c0:	          move.l d0,1a70c <gamePath>
	if (gamePath==0) {
    43c6:	          move.l 1a70c <gamePath>,d0
    43cc:	      /-- bne.s 43e0 <setGameFilePath+0x14c>
		KPrintF("setGameFilePath: Can't reserve memory for game directory.\n");
    43ce:	      |   pea 1840d <PutChar+0x92f>
    43d4:	      |   jsr 1703c <KPrintF>
    43da:	      |   addq.l #4,sp
    43dc:	   /--|-- bra.w 44c8 <setGameFilePath+0x234>
		return;
	}

	BPTR lock = Lock(gamePath, ACCESS_READ);	
    43e0:	   |  \-> move.l 1a70c <gamePath>,1054(sp)
    43e8:	   |      moveq #-2,d0
    43ea:	   |      move.l d0,1050(sp)
    43ee:	   |      move.l 1a7ac <DOSBase>,d0
    43f4:	   |      movea.l d0,a6
    43f6:	   |      move.l 1054(sp),d1
    43fa:	   |      move.l 1050(sp),d2
    43fe:	   |      jsr -84(a6)
    4402:	   |      move.l d0,1046(sp)
    4406:	   |      move.l 1046(sp),d0
    440a:	   |      move.l d0,1042(sp)
	if (! CurrentDir(lock)) {
    440e:	   |      move.l 1042(sp),1038(sp)
    4414:	   |      move.l 1a7ac <DOSBase>,d0
    441a:	   |      movea.l d0,a6
    441c:	   |      move.l 1038(sp),d1
    4420:	   |      jsr -126(a6)
    4424:	   |      move.l d0,1034(sp)
    4428:	   |      move.l 1034(sp),d0
    442c:	   |  /-- bne.s 443c <setGameFilePath+0x1a8>
		KPrintF("setGameFilePath: Can't get game directory.\n");
    442e:	   |  |   pea 18448 <PutChar+0x96a>
    4434:	   |  |   jsr 1703c <KPrintF>
    443a:	   |  |   addq.l #4,sp
	}
	
	lock = Lock(currentDir, ACCESS_READ);	
    443c:	   |  \-> move.l #1112,d0
    4442:	   |      add.l sp,d0
    4444:	   |      addi.l #-1102,d0
    444a:	   |      move.l d0,1030(sp)
    444e:	   |      moveq #-2,d0
    4450:	   |      move.l d0,1026(sp)
    4454:	   |      move.l 1a7ac <DOSBase>,d0
    445a:	   |      movea.l d0,a6
    445c:	   |      move.l 1030(sp),d1
    4460:	   |      move.l 1026(sp),d2
    4464:	   |      jsr -84(a6)
    4468:	   |      move.l d0,1022(sp)
    446c:	   |      move.l 1022(sp),d0
    4470:	   |      move.l d0,1042(sp)
	if (!CurrentDir(lock)) {	
    4474:	   |      move.l 1042(sp),1018(sp)
    447a:	   |      move.l 1a7ac <DOSBase>,d0
    4480:	   |      movea.l d0,a6
    4482:	   |      move.l 1018(sp),d1
    4486:	   |      jsr -126(a6)
    448a:	   |      move.l d0,1014(sp)
    448e:	   |      move.l 1014(sp),d0
    4492:	   |  /-- bne.s 44a8 <setGameFilePath+0x214>
		KPrintF("setGameFilePath: Failed changing to directory %s\n", currentDir);
    4494:	   |  |   moveq #10,d0
    4496:	   |  |   add.l sp,d0
    4498:	   |  |   move.l d0,-(sp)
    449a:	   |  |   pea 18474 <PutChar+0x996>
    44a0:	   |  |   jsr 1703c <KPrintF>
    44a6:	   |  |   addq.l #8,sp
	}

	//Free Mem
	if (gamePath != 0) FreeVec(gamePath);
    44a8:	   |  \-> move.l 1a70c <gamePath>,d0
    44ae:	   +----- beq.s 44c8 <setGameFilePath+0x234>
    44b0:	   |      move.l 1a70c <gamePath>,1010(sp)
    44b8:	   |      move.l 1a7a4 <SysBase>,d0
    44be:	   |      movea.l d0,a6
    44c0:	   |      movea.l 1010(sp),a1
    44c4:	   |      jsr -690(a6)
}
    44c8:	   \----> move.l (sp)+,d2
    44ca:	          movea.l (sp)+,a6
    44cc:	          lea 1104(sp),sp
    44d0:	          rts

000044d2 <abortFunction>:
int numResourceNames = 0;
int numUserFunc = 0;
int specialSettings;


void abortFunction (struct loadedFunction * fun) {
    44d2:	/-------> lea -16(sp),sp
    44d6:	|         move.l a6,-(sp)
	int a;

	pauseFunction (fun);
    44d8:	|         move.l 24(sp),-(sp)
    44dc:	|         jsr 6600 <pauseFunction>
    44e2:	|         addq.l #4,sp
	while (fun -> stack) trimStack (&fun -> stack);
    44e4:	|     /-- bra.s 44f6 <abortFunction+0x24>
    44e6:	|  /--|-> moveq #24,d0
    44e8:	|  |  |   add.l 24(sp),d0
    44ec:	|  |  |   move.l d0,-(sp)
    44ee:	|  |  |   jsr 14f74 <trimStack>
    44f4:	|  |  |   addq.l #4,sp
    44f6:	|  |  \-> movea.l 24(sp),a0
    44fa:	|  |      move.l 24(a0),d0
    44fe:	|  \----- bne.s 44e6 <abortFunction+0x14>
	FreeVec( fun -> compiledLines);
    4500:	|         movea.l 24(sp),a0
    4504:	|         move.l 4(a0),12(sp)
    450a:	|         move.l 1a7a4 <SysBase>,d0
    4510:	|         movea.l d0,a6
    4512:	|         movea.l 12(sp),a1
    4516:	|         jsr -690(a6)
	for (a = 0; a < fun -> numLocals; a ++) unlinkVar (&(fun -> localVars[a]));
    451a:	|         clr.l 16(sp)
    451e:	|     /-- bra.s 453e <abortFunction+0x6c>
    4520:	|  /--|-> movea.l 24(sp),a0
    4524:	|  |  |   move.l 20(a0),d1
    4528:	|  |  |   move.l 16(sp),d0
    452c:	|  |  |   lsl.l #3,d0
    452e:	|  |  |   add.l d1,d0
    4530:	|  |  |   move.l d0,-(sp)
    4532:	|  |  |   jsr 1483e <unlinkVar>
    4538:	|  |  |   addq.l #4,sp
    453a:	|  |  |   addq.l #1,16(sp)
    453e:	|  |  \-> movea.l 24(sp),a0
    4542:	|  |      move.l 8(a0),d0
    4546:	|  |      cmp.l 16(sp),d0
    454a:	|  \----- bgt.s 4520 <abortFunction+0x4e>
	FreeVec(fun -> localVars);
    454c:	|         movea.l 24(sp),a0
    4550:	|         move.l 20(a0),8(sp)
    4556:	|         move.l 1a7a4 <SysBase>,d0
    455c:	|         movea.l d0,a6
    455e:	|         movea.l 8(sp),a1
    4562:	|         jsr -690(a6)
	unlinkVar (&fun -> reg);
    4566:	|         moveq #28,d0
    4568:	|         add.l 24(sp),d0
    456c:	|         move.l d0,-(sp)
    456e:	|         jsr 1483e <unlinkVar>
    4574:	|         addq.l #4,sp
	if (fun -> calledBy) abortFunction (fun -> calledBy);
    4576:	|         movea.l 24(sp),a0
    457a:	|         move.l 40(a0),d0
    457e:	|     /-- beq.s 4590 <abortFunction+0xbe>
    4580:	|     |   movea.l 24(sp),a0
    4584:	|     |   move.l 40(a0),d0
    4588:	|     |   move.l d0,-(sp)
    458a:	\-----|-- jsr 44d2 <abortFunction>(pc)
    458e:	      |   addq.l #4,sp
	FreeVec(fun);
    4590:	      \-> move.l 24(sp),4(sp)
    4596:	          move.l 1a7a4 <SysBase>,d0
    459c:	          movea.l d0,a6
    459e:	          movea.l 4(sp),a1
    45a2:	          jsr -690(a6)
	fun = NULL;
    45a6:	          clr.l 24(sp)
}
    45aa:	          nop
    45ac:	          movea.l (sp)+,a6
    45ae:	          lea 16(sp),sp
    45b2:	          rts

000045b4 <cancelAFunction>:

int cancelAFunction (int funcNum, struct loadedFunction * myself, BOOL * killedMyself) {
    45b4:	          subq.l #8,sp
	int n = 0;
    45b6:	          clr.l 4(sp)
	*killedMyself = FALSE;
    45ba:	          movea.l 20(sp),a0
    45be:	          clr.w (a0)

	struct loadedFunction * fun = allRunningFunctions;
    45c0:	          move.l 1a73c <allRunningFunctions>,(sp)
	while (fun) {
    45c6:	   /----- bra.s 45f4 <cancelAFunction+0x40>
		if (fun -> originalNumber == funcNum) {
    45c8:	/--|----> movea.l (sp),a0
    45ca:	|  |      move.l (a0),d0
    45cc:	|  |      cmp.l 12(sp),d0
    45d0:	|  |  /-- bne.s 45ee <cancelAFunction+0x3a>
			fun -> cancelMe = TRUE;
    45d2:	|  |  |   movea.l (sp),a0
    45d4:	|  |  |   move.w #1,54(a0)
			n++;
    45da:	|  |  |   addq.l #1,4(sp)
			if (fun == myself) *killedMyself = TRUE;
    45de:	|  |  |   move.l (sp),d0
    45e0:	|  |  |   cmp.l 16(sp),d0
    45e4:	|  |  +-- bne.s 45ee <cancelAFunction+0x3a>
    45e6:	|  |  |   movea.l 20(sp),a0
    45ea:	|  |  |   move.w #1,(a0)
		}
		fun = fun -> next;
    45ee:	|  |  \-> movea.l (sp),a0
    45f0:	|  |      move.l 44(a0),(sp)
	while (fun) {
    45f4:	|  \----> tst.l (sp)
    45f6:	\-------- bne.s 45c8 <cancelAFunction+0x14>
	}
	return n;
    45f8:	          move.l 4(sp),d0
}
    45fc:	          addq.l #8,sp
    45fe:	          rts

00004600 <completeTimers>:


void completeTimers () {
    4600:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    4602:	          move.l 1a73c <allRunningFunctions>,(sp)

	while (thisFunction) {
    4608:	   /----- bra.s 461e <completeTimers+0x1e>
		if (thisFunction->freezerLevel == 0) thisFunction->timeLeft = 0;
    460a:	/--|----> movea.l (sp),a0
    460c:	|  |      move.b 56(a0),d0
    4610:	|  |  /-- bne.s 4618 <completeTimers+0x18>
    4612:	|  |  |   movea.l (sp),a0
    4614:	|  |  |   clr.l 12(a0)
		thisFunction = thisFunction->next;
    4618:	|  |  \-> movea.l (sp),a0
    461a:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    461e:	|  \----> tst.l (sp)
    4620:	\-------- bne.s 460a <completeTimers+0xa>
	}
}
    4622:	          nop
    4624:	          nop
    4626:	          addq.l #4,sp
    4628:	          rts

0000462a <continueFunction>:

BOOL continueFunction (struct loadedFunction * fun) {
    462a:	                                                             lea -76(sp),sp
	BOOL keepLooping = TRUE;
    462e:	                                                             move.w #1,74(sp)
	BOOL advanceNow;
	unsigned int param;
	enum sludgeCommand com;

	if (fun -> cancelMe) {
    4634:	                                                             movea.l 80(sp),a0
    4638:	                                                             move.w 54(a0),d0
    463c:	/----------------------------------------------------------- beq.w 54ca <continueFunction+0xea0>
		abortFunction (fun);
    4640:	|                                                            move.l 80(sp),-(sp)
    4644:	|                                                            jsr 44d2 <abortFunction>
    464a:	|                                                            addq.l #4,sp
		return TRUE;
    464c:	|                                                            moveq #1,d0
    464e:	|  /-------------------------------------------------------- bra.w 54d4 <continueFunction+0xeaa>
	}

	while (keepLooping) {
		advanceNow = TRUE;
    4652:	|  |  /----------------------------------------------------> move.w #1,72(sp)
		param = fun -> compiledLines[fun -> runThisLine].param;
    4658:	|  |  |                                                      movea.l 80(sp),a0
    465c:	|  |  |                                                      move.l 4(a0),d1
    4660:	|  |  |                                                      movea.l 80(sp),a0
    4664:	|  |  |                                                      move.l 36(a0),d0
    4668:	|  |  |                                                      lsl.l #3,d0
    466a:	|  |  |                                                      movea.l d1,a0
    466c:	|  |  |                                                      adda.l d0,a0
    466e:	|  |  |                                                      move.l 4(a0),68(sp)
		com = fun -> compiledLines[fun -> runThisLine].theCommand;
    4674:	|  |  |                                                      movea.l 80(sp),a0
    4678:	|  |  |                                                      move.l 4(a0),d1
    467c:	|  |  |                                                      movea.l 80(sp),a0
    4680:	|  |  |                                                      move.l 36(a0),d0
    4684:	|  |  |                                                      lsl.l #3,d0
    4686:	|  |  |                                                      movea.l d1,a0
    4688:	|  |  |                                                      adda.l d0,a0
    468a:	|  |  |                                                      move.l (a0),64(sp)

//		fprintf (stderr, "com: %d param: %d (%s)\n", com, param,
//				(com < numSludgeCommands) ? sludgeText[com] : ERROR_UNKNOWN_MCODE); fflush(stderr);


		switch (com) {
    468e:	|  |  |                                                      moveq #41,d0
    4690:	|  |  |                                                      cmp.l 64(sp),d0
    4694:	|  |  |  /-------------------------------------------------- bcs.w 547e <continueFunction+0xe54>
    4698:	|  |  |  |                                                   move.l 64(sp),d0
    469c:	|  |  |  |                                                   add.l d0,d0
    469e:	|  |  |  |                                                   movea.l d0,a0
    46a0:	|  |  |  |                                                   adda.l #18092,a0
    46a6:	|  |  |  |                                                   move.w (a0),d0
    46a8:	|  |  |  |                                                   jmp (46ac <continueFunction+0x82>,pc,d0.w)
    46ac:	|  |  |  |                                                   bset d6,(a2)
    46ae:	|  |  |  |                                                   ori.w #2670,(a4)
    46b2:	|  |  |  |                                                   eori.w #2416,d6
    46b6:	|  |  |  |                                                   bchg d4,d2
    46b8:	|  |  |  |                                                   bclr d4,(a4)+
    46ba:	|  |  |  |                                                   andi.l #181013194,d4
    46c0:	|  |  |  |                                                   .short 0x0aca
    46c2:	|  |  |  |                                                   .short 0x0aca
    46c4:	|  |  |  |                                                   andi.l #51251914,(-54,a2,d0.l:2)
    46cc:	|  |  |  |                                                   .short 0x0aca
    46ce:	|  |  |  |                                                   andi.w #906,-(a4)
    46d2:	|  |  |  |                                                   bchg d1,196(a2)
    46d6:	|  |  |  |                                                   bset d1,580(a4)
    46da:	|  |  |  |                                                   bclr d1,2576(a2)
    46de:	|  |  |  |                                                   andi.b #-56,2762(a2)
    46e4:	|  |  |  |                                                   .short 0x0aca
    46e6:	|  |  |  |                                                   eori.l #63572682,d0
    46ec:	|  |  |  |                                                   .short 0x0aca
    46ee:	|  |  |  |                                                   bchg d3,-(a2)
    46f0:	|  |  |  |                                                   bchg #-36,(a2)
    46f4:	|  |  |  |                                                   .short 0x08cc
    46f6:	|  |  |  |                                                   addi.b #14,1038(a0)
    46fc:	|  |  |  |                                                   .short 0x040e
    46fe:	|  |  |  |                                                   bset d4,8303(a4)
			case SLU_RETURN:
			if (fun -> calledBy) {
    4702:	|  |  |  |                                                   ori.w #8232,(a0)
    4706:	|  |  |  |                                                   ori.b #78,8303(a0)
				struct loadedFunction * returnTo = fun -> calledBy;
    470c:	|  |  |  |                                                   ori.w #12136,(a0)
    4710:	|  |  |  |                                                   ori.b #44,8303(a0)
				if (fun -> returnSomething) copyVariable (&fun -> reg, &returnTo -> reg);
    4716:	|  |  |  |                                                   ori.w #12328,(a0)
    471a:	|  |  |  |                                                   ori.b #24,(28,a0,d7.w:2)
    4720:	|  |  |  |                                                   add.l 44(sp),d1
    4724:	|  |  |  |                                                   moveq #28,d0
    4726:	|  |  |  |                                                   add.l 80(sp),d0
    472a:	|  |  |  |                                                   move.l d1,-(sp)
    472c:	|  |  |  |                                                   move.l d0,-(sp)
    472e:	|  |  |  |                                                   jsr 14aaa <copyVariable>
    4734:	|  |  |  |                                                   addq.l #8,sp
				finishFunction (fun);
    4736:	|  |  |  |                                                   move.l 80(sp),-(sp)
    473a:	|  |  |  |                                                   jsr 54da <finishFunction>
    4740:	|  |  |  |                                                   addq.l #4,sp
				fun = returnTo;
    4742:	|  |  |  |                                                   move.l 44(sp),80(sp)
				restartFunction (fun);
    4748:	|  |  |  |                                                   move.l 80(sp),-(sp)
    474c:	|  |  |  |                                                   jsr 6642 <restartFunction>
    4752:	|  |  |  |                                                   addq.l #4,sp
			} else {
				finishFunction (fun);
				advanceNow = FALSE;		// So we don't do anything else with "fun"
				keepLooping = FALSE;	// So we drop out of the loop
			}
			break;
    4754:	|  |  |  |  /----------------------------------------------- bra.w 54b2 <continueFunction+0xe88>
				finishFunction (fun);
    4758:	|  |  |  |  |                                                move.l 80(sp),-(sp)
    475c:	|  |  |  |  |                                                jsr 54da <finishFunction>
    4762:	|  |  |  |  |                                                addq.l #4,sp
				advanceNow = FALSE;		// So we don't do anything else with "fun"
    4764:	|  |  |  |  |                                                clr.w 72(sp)
				keepLooping = FALSE;	// So we drop out of the loop
    4768:	|  |  |  |  |                                                clr.w 74(sp)
			break;
    476c:	|  |  |  |  +----------------------------------------------- bra.w 54b2 <continueFunction+0xe88>

			case SLU_CALLIT:
			switch (fun -> reg.varType) {
    4770:	|  |  |  |  |                                                movea.l 80(sp),a0
    4774:	|  |  |  |  |                                                move.l 28(a0),d0
    4778:	|  |  |  |  |                                                moveq #2,d1
    477a:	|  |  |  |  |                                                cmp.l d0,d1
    477c:	|  |  |  |  |                                            /-- beq.s 4788 <continueFunction+0x15e>
    477e:	|  |  |  |  |                                            |   moveq #4,d1
    4780:	|  |  |  |  |                                            |   cmp.l d0,d1
    4782:	|  |  |  |  |                                         /--|-- beq.s 47d6 <continueFunction+0x1ac>
    4784:	|  |  |  |  |                                /--------|--|-- bra.w 48be <continueFunction+0x294>
				case SVT_FUNC:
				pauseFunction (fun);		
    4788:	|  |  |  |  |                                |        |  \-> move.l 80(sp),-(sp)
    478c:	|  |  |  |  |                                |        |      jsr 6600 <pauseFunction>
    4792:	|  |  |  |  |                                |        |      addq.l #4,sp
				if (! startNewFunctionNum (fun -> reg.varData.intValue, param, fun, &fun -> stack,TRUE)) return FALSE;
    4794:	|  |  |  |  |                                |        |      moveq #24,d0
    4796:	|  |  |  |  |                                |        |      add.l 80(sp),d0
    479a:	|  |  |  |  |                                |        |      movea.l 80(sp),a0
    479e:	|  |  |  |  |                                |        |      move.l 32(a0),d1
    47a2:	|  |  |  |  |                                |        |      pea 1 <_start+0x1>
    47a6:	|  |  |  |  |                                |        |      move.l d0,-(sp)
    47a8:	|  |  |  |  |                                |        |      move.l 88(sp),-(sp)
    47ac:	|  |  |  |  |                                |        |      move.l 80(sp),-(sp)
    47b0:	|  |  |  |  |                                |        |      move.l d1,-(sp)
    47b2:	|  |  |  |  |                                |        |      jsr 688e <startNewFunctionNum>
    47b8:	|  |  |  |  |                                |        |      lea 20(sp),sp
    47bc:	|  |  |  |  |                                |        |      tst.l d0
    47be:	|  |  |  |  |                                |        |  /-- bne.s 47c6 <continueFunction+0x19c>
    47c0:	|  |  |  |  |                                |        |  |   clr.w d0
    47c2:	|  +--|--|--|--------------------------------|--------|--|-- bra.w 54d4 <continueFunction+0xeaa>
				fun = allRunningFunctions;
    47c6:	|  |  |  |  |                                |        |  \-> move.l 1a73c <allRunningFunctions>,80(sp)
				advanceNow = FALSE;		// So we don't do anything else with "fun"
    47ce:	|  |  |  |  |                                |        |      clr.w 72(sp)
				break;
    47d2:	|  |  |  |  |                                |  /-----|----- bra.w 48d2 <continueFunction+0x2a8>

				case SVT_BUILT:
					{
					//KPrintF("Loading function %ld",fun -> reg.varData.intValue);
					enum builtReturn br = callBuiltIn (fun -> reg.varData.intValue, param, fun);
    47d6:	|  |  |  |  |                                |  |     \----> move.l 68(sp),d1
    47da:	|  |  |  |  |                                |  |            movea.l 80(sp),a0
    47de:	|  |  |  |  |                                |  |            move.l 32(a0),d0
    47e2:	|  |  |  |  |                                |  |            move.l 80(sp),-(sp)
    47e6:	|  |  |  |  |                                |  |            move.l d1,-(sp)
    47e8:	|  |  |  |  |                                |  |            move.l d0,-(sp)
    47ea:	|  |  |  |  |                                |  |            jsr 132d2 <callBuiltIn>
    47f0:	|  |  |  |  |                                |  |            lea 12(sp),sp
    47f4:	|  |  |  |  |                                |  |            move.l d0,52(sp)
    47f8:	|  |  |  |  |                                |  |            moveq #5,d0
    47fa:	|  |  |  |  |                                |  |            cmp.l 52(sp),d0
    47fe:	|  |  |  |  |                                |  |  /-------- bcs.w 48ba <continueFunction+0x290>
    4802:	|  |  |  |  |                                |  |  |         move.l 52(sp),d0
    4806:	|  |  |  |  |                                |  |  |         add.l d0,d0
    4808:	|  |  |  |  |                                |  |  |         movea.l d0,a0
    480a:	|  |  |  |  |                                |  |  |         adda.l #18454,a0
    4810:	|  |  |  |  |                                |  |  |         move.w (a0),d0
    4812:	|  |  |  |  |                                |  |  |         jmp (4816 <continueFunction+0x1ec>,pc,d0.w)
    4816:	|  |  |  |  |                                |  |  |         ori.b #12,164(a4)
    481c:	|  |  |  |  |                                |  |  |         ori.b #60,-(a0)
    4820:	|  |  |  |  |                                |  |  |         ori.b #121,(1,a2,d0.w)

					switch (br) {
						case BR_ERROR:
							KPrintF("Unknown error. This shouldn't happen. Please notify the SLUDGE developers.");
    4826:	|  |  |  |  |                                |  |  |         .short 0x857c
    4828:	|  |  |  |  |                                |  |  |         jsr 1703c <KPrintF>
    482e:	|  |  |  |  |                                |  |  |         addq.l #4,sp
							return FALSE;
    4830:	|  |  |  |  |                                |  |  |         clr.w d0
    4832:	|  +--|--|--|--------------------------------|--|--|-------- bra.w 54d4 <continueFunction+0xeaa>

						case BR_PAUSE:
						pauseFunction (fun);
    4836:	|  |  |  |  |                                |  |  |         move.l 80(sp),-(sp)
    483a:	|  |  |  |  |                                |  |  |         jsr 6600 <pauseFunction>
    4840:	|  |  |  |  |                                |  |  |         addq.l #4,sp
						[[fallthrough]];
						// No break!

						case BR_KEEP_AND_PAUSE:
						keepLooping = FALSE;
    4842:	|  |  |  |  |                                |  |  |         clr.w 74(sp)
						break;
    4846:	|  |  |  |  |                                |  |  |  /----- bra.s 48bc <continueFunction+0x292>

						case BR_ALREADY_GONE:
						keepLooping = FALSE;
    4848:	|  |  |  |  |                                |  |  |  |      clr.w 74(sp)
						advanceNow = FALSE;
    484c:	|  |  |  |  |                                |  |  |  |      clr.w 72(sp)
						break;
    4850:	|  |  |  |  |                                |  |  |  +----- bra.s 48bc <continueFunction+0x292>

						case BR_CALLAFUNC:
						{
							int i = fun -> reg.varData.intValue;
    4852:	|  |  |  |  |                                |  |  |  |      movea.l 80(sp),a0
    4856:	|  |  |  |  |                                |  |  |  |      move.l 32(a0),48(sp)
							setVariable (&fun -> reg, SVT_INT, 1);
    485c:	|  |  |  |  |                                |  |  |  |      moveq #28,d0
    485e:	|  |  |  |  |                                |  |  |  |      add.l 80(sp),d0
    4862:	|  |  |  |  |                                |  |  |  |      pea 1 <_start+0x1>
    4866:	|  |  |  |  |                                |  |  |  |      pea 1 <_start+0x1>
    486a:	|  |  |  |  |                                |  |  |  |      move.l d0,-(sp)
    486c:	|  |  |  |  |                                |  |  |  |      jsr 14ee2 <setVariable>
    4872:	|  |  |  |  |                                |  |  |  |      lea 12(sp),sp
							pauseFunction (fun);							
    4876:	|  |  |  |  |                                |  |  |  |      move.l 80(sp),-(sp)
    487a:	|  |  |  |  |                                |  |  |  |      jsr 6600 <pauseFunction>
    4880:	|  |  |  |  |                                |  |  |  |      addq.l #4,sp
							if (! startNewFunctionNum (i, 0, fun, noStack, FALSE)) return FALSE;
    4882:	|  |  |  |  |                                |  |  |  |      move.l 1a774 <noStack>,d1
    4888:	|  |  |  |  |                                |  |  |  |      move.l 48(sp),d0
    488c:	|  |  |  |  |                                |  |  |  |      clr.l -(sp)
    488e:	|  |  |  |  |                                |  |  |  |      move.l d1,-(sp)
    4890:	|  |  |  |  |                                |  |  |  |      move.l 88(sp),-(sp)
    4894:	|  |  |  |  |                                |  |  |  |      clr.l -(sp)
    4896:	|  |  |  |  |                                |  |  |  |      move.l d0,-(sp)
    4898:	|  |  |  |  |                                |  |  |  |      jsr 688e <startNewFunctionNum>
    489e:	|  |  |  |  |                                |  |  |  |      lea 20(sp),sp
    48a2:	|  |  |  |  |                                |  |  |  |      tst.l d0
    48a4:	|  |  |  |  |                                |  |  |  |  /-- bne.s 48ac <continueFunction+0x282>
    48a6:	|  |  |  |  |                                |  |  |  |  |   clr.w d0
    48a8:	|  +--|--|--|--------------------------------|--|--|--|--|-- bra.w 54d4 <continueFunction+0xeaa>
							fun = allRunningFunctions;
    48ac:	|  |  |  |  |                                |  |  |  |  \-> move.l 1a73c <allRunningFunctions>,80(sp)
							advanceNow = FALSE;		// So we don't do anything else with "fun"
    48b4:	|  |  |  |  |                                |  |  |  |      clr.w 72(sp)
						}
						break;
    48b8:	|  |  |  |  |                                |  |  |  +----- bra.s 48bc <continueFunction+0x292>

						default:
						break;
    48ba:	|  |  |  |  |                                |  |  \--|----> nop
					}
				}
				break;
    48bc:	|  |  |  |  |                                |  +-----\----X bra.s 48d2 <continueFunction+0x2a8>

				default:
				KPrintF(ERROR_CALL_NONFUNCTION);
    48be:	|  |  |  |  |                                \--|----------> pea 185c7 <PutChar+0xae9>
    48c4:	|  |  |  |  |                                   |            jsr 1703c <KPrintF>
    48ca:	|  |  |  |  |                                   |            addq.l #4,sp
				return FALSE;
    48cc:	|  |  |  |  |                                   |            clr.w d0
    48ce:	|  +--|--|--|-----------------------------------|----------- bra.w 54d4 <continueFunction+0xeaa>
			}
			break;
    48d2:	|  |  |  |  +-----------------------------------\----------X bra.w 54b2 <continueFunction+0xe88>

			// These all grab things and shove 'em into the register

			case SLU_LOAD_NULL:
			setVariable (&fun -> reg, SVT_NULL, 0);
    48d6:	|  |  |  |  |                                                moveq #28,d0
    48d8:	|  |  |  |  |                                                add.l 80(sp),d0
    48dc:	|  |  |  |  |                                                clr.l -(sp)
    48de:	|  |  |  |  |                                                clr.l -(sp)
    48e0:	|  |  |  |  |                                                move.l d0,-(sp)
    48e2:	|  |  |  |  |                                                jsr 14ee2 <setVariable>
    48e8:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    48ec:	|  |  |  |  +----------------------------------------------- bra.w 54b2 <continueFunction+0xe88>

			case SLU_LOAD_FILE:
			setVariable (&fun -> reg, SVT_FILE, param);
    48f0:	|  |  |  |  |                                                move.l 68(sp),d1
    48f4:	|  |  |  |  |                                                moveq #28,d0
    48f6:	|  |  |  |  |                                                add.l 80(sp),d0
    48fa:	|  |  |  |  |                                                move.l d1,-(sp)
    48fc:	|  |  |  |  |                                                pea 5 <_start+0x5>
    4900:	|  |  |  |  |                                                move.l d0,-(sp)
    4902:	|  |  |  |  |                                                jsr 14ee2 <setVariable>
    4908:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    490c:	|  |  |  |  +----------------------------------------------- bra.w 54b2 <continueFunction+0xe88>

			case SLU_LOAD_VALUE:
			setVariable (&fun -> reg, SVT_INT, param);
    4910:	|  |  |  |  |                                                move.l 68(sp),d1
    4914:	|  |  |  |  |                                                moveq #28,d0
    4916:	|  |  |  |  |                                                add.l 80(sp),d0
    491a:	|  |  |  |  |                                                move.l d1,-(sp)
    491c:	|  |  |  |  |                                                pea 1 <_start+0x1>
    4920:	|  |  |  |  |                                                move.l d0,-(sp)
    4922:	|  |  |  |  |                                                jsr 14ee2 <setVariable>
    4928:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    492c:	|  |  |  |  +----------------------------------------------- bra.w 54b2 <continueFunction+0xe88>

			case SLU_LOAD_LOCAL:
			if (! copyVariable (&(fun -> localVars[param]), &fun -> reg)) return FALSE;
    4930:	|  |  |  |  |                                                moveq #28,d0
    4932:	|  |  |  |  |                                                add.l 80(sp),d0
    4936:	|  |  |  |  |                                                movea.l 80(sp),a0
    493a:	|  |  |  |  |                                                movea.l 20(a0),a0
    493e:	|  |  |  |  |                                                move.l 68(sp),d1
    4942:	|  |  |  |  |                                                lsl.l #3,d1
    4944:	|  |  |  |  |                                                add.l a0,d1
    4946:	|  |  |  |  |                                                move.l d0,-(sp)
    4948:	|  |  |  |  |                                                move.l d1,-(sp)
    494a:	|  |  |  |  |                                                jsr 14aaa <copyVariable>
    4950:	|  |  |  |  |                                                addq.l #8,sp
    4952:	|  |  |  |  |                                                tst.w d0
    4954:	|  |  |  |  |  /-------------------------------------------- bne.w 5490 <continueFunction+0xe66>
    4958:	|  |  |  |  |  |                                             clr.w d0
    495a:	|  +--|--|--|--|-------------------------------------------- bra.w 54d4 <continueFunction+0xeaa>
			break;

			case SLU_AND:
			setVariable (&fun -> reg, SVT_INT, getBoolean (&fun -> reg) && getBoolean(&(fun -> stack -> thisVar)));
    495e:	|  |  |  |  |  |                                             moveq #28,d0
    4960:	|  |  |  |  |  |                                             add.l 80(sp),d0
    4964:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4966:	|  |  |  |  |  |                                             jsr 14b30 <getBoolean>
    496c:	|  |  |  |  |  |                                             addq.l #4,sp
    496e:	|  |  |  |  |  |                                             tst.w d0
    4970:	|  |  |  |  |  |                                      /----- beq.s 498c <continueFunction+0x362>
    4972:	|  |  |  |  |  |                                      |      movea.l 80(sp),a0
    4976:	|  |  |  |  |  |                                      |      move.l 24(a0),d0
    497a:	|  |  |  |  |  |                                      |      move.l d0,-(sp)
    497c:	|  |  |  |  |  |                                      |      jsr 14b30 <getBoolean>
    4982:	|  |  |  |  |  |                                      |      addq.l #4,sp
    4984:	|  |  |  |  |  |                                      |      tst.w d0
    4986:	|  |  |  |  |  |                                      +----- beq.s 498c <continueFunction+0x362>
    4988:	|  |  |  |  |  |                                      |      moveq #1,d0
    498a:	|  |  |  |  |  |                                      |  /-- bra.s 498e <continueFunction+0x364>
    498c:	|  |  |  |  |  |                                      \--|-> moveq #0,d0
    498e:	|  |  |  |  |  |                                         \-> moveq #28,d1
    4990:	|  |  |  |  |  |                                             add.l 80(sp),d1
    4994:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4996:	|  |  |  |  |  |                                             pea 1 <_start+0x1>
    499a:	|  |  |  |  |  |                                             move.l d1,-(sp)
    499c:	|  |  |  |  |  |                                             jsr 14ee2 <setVariable>
    49a2:	|  |  |  |  |  |                                             lea 12(sp),sp
			trimStack (&fun -> stack);
    49a6:	|  |  |  |  |  |                                             moveq #24,d0
    49a8:	|  |  |  |  |  |                                             add.l 80(sp),d0
    49ac:	|  |  |  |  |  |                                             move.l d0,-(sp)
    49ae:	|  |  |  |  |  |                                             jsr 14f74 <trimStack>
    49b4:	|  |  |  |  |  |                                             addq.l #4,sp
			break;
    49b6:	|  |  |  |  +--|-------------------------------------------- bra.w 54b2 <continueFunction+0xe88>

			case SLU_OR:
			setVariable (&fun -> reg, SVT_INT, getBoolean (&fun -> reg) || getBoolean (&(fun -> stack -> thisVar)));
    49ba:	|  |  |  |  |  |                                             moveq #28,d0
    49bc:	|  |  |  |  |  |                                             add.l 80(sp),d0
    49c0:	|  |  |  |  |  |                                             move.l d0,-(sp)
    49c2:	|  |  |  |  |  |                                             jsr 14b30 <getBoolean>
    49c8:	|  |  |  |  |  |                                             addq.l #4,sp
    49ca:	|  |  |  |  |  |                                             tst.w d0
    49cc:	|  |  |  |  |  |                                         /-- bne.s 49e4 <continueFunction+0x3ba>
    49ce:	|  |  |  |  |  |                                         |   movea.l 80(sp),a0
    49d2:	|  |  |  |  |  |                                         |   move.l 24(a0),d0
    49d6:	|  |  |  |  |  |                                         |   move.l d0,-(sp)
    49d8:	|  |  |  |  |  |                                         |   jsr 14b30 <getBoolean>
    49de:	|  |  |  |  |  |                                         |   addq.l #4,sp
    49e0:	|  |  |  |  |  |                                         |   tst.w d0
    49e2:	|  |  |  |  |  |                                      /--|-- beq.s 49e8 <continueFunction+0x3be>
    49e4:	|  |  |  |  |  |                                      |  \-> moveq #1,d0
    49e6:	|  |  |  |  |  |                                      |  /-- bra.s 49ea <continueFunction+0x3c0>
    49e8:	|  |  |  |  |  |                                      \--|-> moveq #0,d0
    49ea:	|  |  |  |  |  |                                         \-> moveq #28,d1
    49ec:	|  |  |  |  |  |                                             add.l 80(sp),d1
    49f0:	|  |  |  |  |  |                                             move.l d0,-(sp)
    49f2:	|  |  |  |  |  |                                             pea 1 <_start+0x1>
    49f6:	|  |  |  |  |  |                                             move.l d1,-(sp)
    49f8:	|  |  |  |  |  |                                             jsr 14ee2 <setVariable>
    49fe:	|  |  |  |  |  |                                             lea 12(sp),sp
			trimStack (&fun -> stack);
    4a02:	|  |  |  |  |  |                                             moveq #24,d0
    4a04:	|  |  |  |  |  |                                             add.l 80(sp),d0
    4a08:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4a0a:	|  |  |  |  |  |                                             jsr 14f74 <trimStack>
    4a10:	|  |  |  |  |  |                                             addq.l #4,sp
			break;
    4a12:	|  |  |  |  +--|-------------------------------------------- bra.w 54b2 <continueFunction+0xe88>

			case SLU_LOAD_FUNC:
    		setVariable (&fun -> reg, SVT_FUNC, param);
    4a16:	|  |  |  |  |  |                                             move.l 68(sp),d1
    4a1a:	|  |  |  |  |  |                                             moveq #28,d0
    4a1c:	|  |  |  |  |  |                                             add.l 80(sp),d0
    4a20:	|  |  |  |  |  |                                             move.l d1,-(sp)
    4a22:	|  |  |  |  |  |                                             pea 2 <_start+0x2>
    4a26:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4a28:	|  |  |  |  |  |                                             jsr 14ee2 <setVariable>
    4a2e:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    4a32:	|  |  |  |  +--|-------------------------------------------- bra.w 54b2 <continueFunction+0xe88>

			case SLU_LOAD_BUILT:
			setVariable (&fun -> reg, SVT_BUILT, param);
    4a36:	|  |  |  |  |  |                                             move.l 68(sp),d1
    4a3a:	|  |  |  |  |  |                                             moveq #28,d0
    4a3c:	|  |  |  |  |  |                                             add.l 80(sp),d0
    4a40:	|  |  |  |  |  |                                             move.l d1,-(sp)
    4a42:	|  |  |  |  |  |                                             pea 4 <_start+0x4>
    4a46:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4a48:	|  |  |  |  |  |                                             jsr 14ee2 <setVariable>
    4a4e:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    4a52:	|  |  |  |  +--|-------------------------------------------- bra.w 54b2 <continueFunction+0xe88>

			case SLU_LOAD_OBJTYPE:
			setVariable (&fun -> reg, SVT_OBJTYPE, param);
    4a56:	|  |  |  |  |  |                                             move.l 68(sp),d1
    4a5a:	|  |  |  |  |  |                                             moveq #28,d0
    4a5c:	|  |  |  |  |  |                                             add.l 80(sp),d0
    4a60:	|  |  |  |  |  |                                             move.l d1,-(sp)
    4a62:	|  |  |  |  |  |                                             pea 7 <_start+0x7>
    4a66:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4a68:	|  |  |  |  |  |                                             jsr 14ee2 <setVariable>
    4a6e:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    4a72:	|  |  |  |  +--|-------------------------------------------- bra.w 54b2 <continueFunction+0xe88>

			case SLU_UNREG:
			if (dialogValue != 1) {
    4a76:	|  |  |  |  |  |                                             move.l 1a704 <dialogValue>,d0
    4a7c:	|  |  |  |  |  |                                             moveq #1,d1
    4a7e:	|  |  |  |  |  |                                             cmp.l d0,d1
    4a80:	|  |  |  |  |  |  /----------------------------------------- beq.w 5494 <continueFunction+0xe6a>
				KPrintF(ERROR_HACKER);
    4a84:	|  |  |  |  |  |  |                                          pea 185dc <PutChar+0xafe>
    4a8a:	|  |  |  |  |  |  |                                          jsr 1703c <KPrintF>
    4a90:	|  |  |  |  |  |  |                                          addq.l #4,sp
				return FALSE;
    4a92:	|  |  |  |  |  |  |                                          clr.w d0
    4a94:	|  +--|--|--|--|--|----------------------------------------- bra.w 54d4 <continueFunction+0xeaa>
			}
			break;

			case SLU_LOAD_STRING:
				if (! loadStringToVar (&fun -> reg, param)) {
    4a98:	|  |  |  |  |  |  |                                          move.l 68(sp),d1
    4a9c:	|  |  |  |  |  |  |                                          moveq #28,d0
    4a9e:	|  |  |  |  |  |  |                                          add.l 80(sp),d0
    4aa2:	|  |  |  |  |  |  |                                          move.l d1,-(sp)
    4aa4:	|  |  |  |  |  |  |                                          move.l d0,-(sp)
    4aa6:	|  |  |  |  |  |  |                                          jsr 14674 <loadStringToVar>
    4aac:	|  |  |  |  |  |  |                                          addq.l #8,sp
    4aae:	|  |  |  |  |  |  |                                          tst.w d0
    4ab0:	|  |  |  |  |  |  |  /-------------------------------------- bne.w 5498 <continueFunction+0xe6e>
					return FALSE;
    4ab4:	|  |  |  |  |  |  |  |                                       clr.w d0
    4ab6:	|  +--|--|--|--|--|--|-------------------------------------- bra.w 54d4 <continueFunction+0xeaa>
			break;

			case SLU_INDEXGET:
			case SLU_INCREMENT_INDEX:
			case SLU_DECREMENT_INDEX:
			switch (fun -> stack -> thisVar.varType) {
    4aba:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    4abe:	|  |  |  |  |  |  |  |                                       movea.l 24(a0),a0
    4ac2:	|  |  |  |  |  |  |  |                                       move.l (a0),d0
    4ac4:	|  |  |  |  |  |  |  |                                       moveq #10,d1
    4ac6:	|  |  |  |  |  |  |  |                                       cmp.l d0,d1
    4ac8:	|  |  |  |  |  |  |  |                                /----- beq.s 4b26 <continueFunction+0x4fc>
    4aca:	|  |  |  |  |  |  |  |                                |      moveq #10,d1
    4acc:	|  |  |  |  |  |  |  |                                |      cmp.l d0,d1
    4ace:	|  |  |  |  |  |  |  |              /-----------------|----- bcs.w 4cba <continueFunction+0x690>
    4ad2:	|  |  |  |  |  |  |  |              |                 |      tst.l d0
    4ad4:	|  |  |  |  |  |  |  |              |                 |  /-- beq.s 4ae0 <continueFunction+0x4b6>
    4ad6:	|  |  |  |  |  |  |  |              |                 |  |   moveq #6,d1
    4ad8:	|  |  |  |  |  |  |  |              |                 |  |   cmp.l d0,d1
    4ada:	|  |  |  |  |  |  |  |              |                 +--|-- beq.s 4b26 <continueFunction+0x4fc>
    4adc:	|  |  |  |  |  |  |  |              +-----------------|--|-- bra.w 4cba <continueFunction+0x690>
				case SVT_NULL:
				if (com == SLU_INDEXGET) {
    4ae0:	|  |  |  |  |  |  |  |              |                 |  \-> moveq #38,d0
    4ae2:	|  |  |  |  |  |  |  |              |                 |      cmp.l 64(sp),d0
    4ae6:	|  |  |  |  |  |  |  |              |                 |  /-- bne.s 4b12 <continueFunction+0x4e8>
					setVariable (&fun -> reg, SVT_NULL, 0);
    4ae8:	|  |  |  |  |  |  |  |              |                 |  |   moveq #28,d0
    4aea:	|  |  |  |  |  |  |  |              |                 |  |   add.l 80(sp),d0
    4aee:	|  |  |  |  |  |  |  |              |                 |  |   clr.l -(sp)
    4af0:	|  |  |  |  |  |  |  |              |                 |  |   clr.l -(sp)
    4af2:	|  |  |  |  |  |  |  |              |                 |  |   move.l d0,-(sp)
    4af4:	|  |  |  |  |  |  |  |              |                 |  |   jsr 14ee2 <setVariable>
    4afa:	|  |  |  |  |  |  |  |              |                 |  |   lea 12(sp),sp
					trimStack (&fun -> stack);
    4afe:	|  |  |  |  |  |  |  |              |                 |  |   moveq #24,d0
    4b00:	|  |  |  |  |  |  |  |              |                 |  |   add.l 80(sp),d0
    4b04:	|  |  |  |  |  |  |  |              |                 |  |   move.l d0,-(sp)
    4b06:	|  |  |  |  |  |  |  |              |                 |  |   jsr 14f74 <trimStack>
    4b0c:	|  |  |  |  |  |  |  |              |                 |  |   addq.l #4,sp
				} else {
					KPrintF((ERROR_INCDEC_UNKNOWN));
					return FALSE;
				}
				break;
    4b0e:	|  |  |  |  |  |  |  |              |  /--------------|--|-- bra.w 4cd0 <continueFunction+0x6a6>
					KPrintF((ERROR_INCDEC_UNKNOWN));
    4b12:	|  |  |  |  |  |  |  |              |  |              |  \-> pea 1861d <PutChar+0xb3f>
    4b18:	|  |  |  |  |  |  |  |              |  |              |      jsr 1703c <KPrintF>
    4b1e:	|  |  |  |  |  |  |  |              |  |              |      addq.l #4,sp
					return FALSE;
    4b20:	|  |  |  |  |  |  |  |              |  |              |      clr.w d0
    4b22:	|  +--|--|--|--|--|--|--------------|--|--------------|----- bra.w 54d4 <continueFunction+0xeaa>

				case SVT_FASTARRAY:
				case SVT_STACK:
				if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    4b26:	|  |  |  |  |  |  |  |              |  |              \----> movea.l 80(sp),a0
    4b2a:	|  |  |  |  |  |  |  |              |  |                     movea.l 24(a0),a0
    4b2e:	|  |  |  |  |  |  |  |              |  |                     movea.l 4(a0),a0
    4b32:	|  |  |  |  |  |  |  |              |  |                     move.l (a0),d0
    4b34:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 4b4a <continueFunction+0x520>
					KPrintF((ERROR_INDEX_EMPTY));
    4b36:	|  |  |  |  |  |  |  |              |  |                 |   pea 18659 <PutChar+0xb7b>
    4b3c:	|  |  |  |  |  |  |  |              |  |                 |   jsr 1703c <KPrintF>
    4b42:	|  |  |  |  |  |  |  |              |  |                 |   addq.l #4,sp
					return FALSE;
    4b44:	|  |  |  |  |  |  |  |              |  |                 |   clr.w d0
    4b46:	|  +--|--|--|--|--|--|--------------|--|-----------------|-- bra.w 54d4 <continueFunction+0xeaa>
				} else {
					int ii;
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    4b4a:	|  |  |  |  |  |  |  |              |  |                 \-> moveq #28,d0
    4b4c:	|  |  |  |  |  |  |  |              |  |                     add.l 80(sp),d0
    4b50:	|  |  |  |  |  |  |  |              |  |                     move.l d0,-(sp)
    4b52:	|  |  |  |  |  |  |  |              |  |                     pea 1 <_start+0x1>
    4b56:	|  |  |  |  |  |  |  |              |  |                     lea 12(sp),a0
    4b5a:	|  |  |  |  |  |  |  |              |  |                     move.l a0,-(sp)
    4b5c:	|  |  |  |  |  |  |  |              |  |                     jsr 145f0 <getValueType>
    4b62:	|  |  |  |  |  |  |  |              |  |                     lea 12(sp),sp
    4b66:	|  |  |  |  |  |  |  |              |  |                     tst.w d0
    4b68:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 4b70 <continueFunction+0x546>
    4b6a:	|  |  |  |  |  |  |  |              |  |                 |   clr.w d0
    4b6c:	|  +--|--|--|--|--|--|--------------|--|-----------------|-- bra.w 54d4 <continueFunction+0xeaa>
					struct variable * grab = (fun -> stack -> thisVar.varType == SVT_FASTARRAY) ?
    4b70:	|  |  |  |  |  |  |  |              |  |                 \-> movea.l 80(sp),a0
    4b74:	|  |  |  |  |  |  |  |              |  |                     movea.l 24(a0),a0
    4b78:	|  |  |  |  |  |  |  |              |  |                     move.l (a0),d0
						fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii)
							:
    4b7a:	|  |  |  |  |  |  |  |              |  |                     moveq #10,d1
    4b7c:	|  |  |  |  |  |  |  |              |  |                     cmp.l d0,d1
    4b7e:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 4ba0 <continueFunction+0x576>
						fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii)
    4b80:	|  |  |  |  |  |  |  |              |  |                 |   move.l 4(sp),d0
    4b84:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,d1
    4b86:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 80(sp),a0
    4b8a:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 24(a0),a0
    4b8e:	|  |  |  |  |  |  |  |              |  |                 |   move.l 4(a0),d0
    4b92:	|  |  |  |  |  |  |  |              |  |                 |   move.l d1,-(sp)
    4b94:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,-(sp)
    4b96:	|  |  |  |  |  |  |  |              |  |                 |   jsr 1427a <fastArrayGetByIndex>
    4b9c:	|  |  |  |  |  |  |  |              |  |                 |   addq.l #8,sp
    4b9e:	|  |  |  |  |  |  |  |              |  |              /--|-- bra.s 4bc0 <continueFunction+0x596>
						stackGetByIndex (fun -> stack -> thisVar.varData.theStack -> first, ii);
    4ba0:	|  |  |  |  |  |  |  |              |  |              |  \-> move.l 4(sp),d0
    4ba4:	|  |  |  |  |  |  |  |              |  |              |      move.l d0,d1
    4ba6:	|  |  |  |  |  |  |  |              |  |              |      movea.l 80(sp),a0
    4baa:	|  |  |  |  |  |  |  |              |  |              |      movea.l 24(a0),a0
    4bae:	|  |  |  |  |  |  |  |              |  |              |      movea.l 4(a0),a0
    4bb2:	|  |  |  |  |  |  |  |              |  |              |      move.l (a0),d0
    4bb4:	|  |  |  |  |  |  |  |              |  |              |      move.l d1,-(sp)
    4bb6:	|  |  |  |  |  |  |  |              |  |              |      move.l d0,-(sp)
    4bb8:	|  |  |  |  |  |  |  |              |  |              |      jsr 14f04 <stackGetByIndex>
    4bbe:	|  |  |  |  |  |  |  |              |  |              |      addq.l #8,sp
					struct variable * grab = (fun -> stack -> thisVar.varType == SVT_FASTARRAY) ?
    4bc0:	|  |  |  |  |  |  |  |              |  |              \----> move.l d0,60(sp)

					trimStack (&fun -> stack);
    4bc4:	|  |  |  |  |  |  |  |              |  |                     moveq #24,d0
    4bc6:	|  |  |  |  |  |  |  |              |  |                     add.l 80(sp),d0
    4bca:	|  |  |  |  |  |  |  |              |  |                     move.l d0,-(sp)
    4bcc:	|  |  |  |  |  |  |  |              |  |                     jsr 14f74 <trimStack>
    4bd2:	|  |  |  |  |  |  |  |              |  |                     addq.l #4,sp

					if (! grab) {
    4bd4:	|  |  |  |  |  |  |  |              |  |                     tst.l 60(sp)
    4bd8:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 4bf4 <continueFunction+0x5ca>
						setVariable (&fun -> reg, SVT_NULL, 0);
    4bda:	|  |  |  |  |  |  |  |              |  |                 |   moveq #28,d0
    4bdc:	|  |  |  |  |  |  |  |              |  |                 |   add.l 80(sp),d0
    4be0:	|  |  |  |  |  |  |  |              |  |                 |   clr.l -(sp)
    4be2:	|  |  |  |  |  |  |  |              |  |                 |   clr.l -(sp)
    4be4:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,-(sp)
    4be6:	|  |  |  |  |  |  |  |              |  |                 |   jsr 14ee2 <setVariable>
    4bec:	|  |  |  |  |  |  |  |              |  |                 |   lea 12(sp),sp
							default:
							if (! copyVariable (grab, &fun -> reg)) return FALSE;
						}
					}
				}
				break;
    4bf0:	|  |  |  |  |  |  |  |              |  |  /--------------|-- bra.w 4cce <continueFunction+0x6a4>
    4bf4:	|  |  |  |  |  |  |  |              |  |  |              \-> moveq #39,d0
    4bf6:	|  |  |  |  |  |  |  |              |  |  |                  cmp.l 64(sp),d0
    4bfa:	|  |  |  |  |  |  |  |              |  |  |              /-- beq.s 4c08 <continueFunction+0x5de>
    4bfc:	|  |  |  |  |  |  |  |              |  |  |              |   moveq #40,d1
    4bfe:	|  |  |  |  |  |  |  |              |  |  |              |   cmp.l 64(sp),d1
    4c02:	|  |  |  |  |  |  |  |              |  |  |           /--|-- beq.s 4c52 <continueFunction+0x628>
    4c04:	|  |  |  |  |  |  |  |              |  |  |  /--------|--|-- bra.w 4c9a <continueFunction+0x670>
							if (! getValueType (&ii, SVT_INT, grab)) return FALSE;
    4c08:	|  |  |  |  |  |  |  |              |  |  |  |        |  \-> move.l 60(sp),-(sp)
    4c0c:	|  |  |  |  |  |  |  |              |  |  |  |        |      pea 1 <_start+0x1>
    4c10:	|  |  |  |  |  |  |  |              |  |  |  |        |      lea 8(sp),a0
    4c14:	|  |  |  |  |  |  |  |              |  |  |  |        |      move.l a0,-(sp)
    4c16:	|  |  |  |  |  |  |  |              |  |  |  |        |      jsr 145f0 <getValueType>
    4c1c:	|  |  |  |  |  |  |  |              |  |  |  |        |      lea 12(sp),sp
    4c20:	|  |  |  |  |  |  |  |              |  |  |  |        |      tst.w d0
    4c22:	|  |  |  |  |  |  |  |              |  |  |  |        |  /-- bne.s 4c2a <continueFunction+0x600>
    4c24:	|  |  |  |  |  |  |  |              |  |  |  |        |  |   clr.w d0
    4c26:	|  |  |  |  |  |  |  |              |  |  |  |  /-----|--|-- bra.w 4cb4 <continueFunction+0x68a>
							setVariable (&fun -> reg, SVT_INT, ii);
    4c2a:	|  |  |  |  |  |  |  |              |  |  |  |  |     |  \-> move.l (sp),d1
    4c2c:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      moveq #28,d0
    4c2e:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      add.l 80(sp),d0
    4c32:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d1,-(sp)
    4c34:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      pea 1 <_start+0x1>
    4c38:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d0,-(sp)
    4c3a:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      jsr 14ee2 <setVariable>
    4c40:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      lea 12(sp),sp
							grab -> varData.intValue = ii + 1;
    4c44:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l (sp),d0
    4c46:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      addq.l #1,d0
    4c48:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      movea.l 60(sp),a0
    4c4c:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d0,4(a0)
							break;
    4c50:	|  |  |  |  |  |  |  |              |  |  |  |  |  /--|----- bra.s 4cb8 <continueFunction+0x68e>
							if (! getValueType (&ii, SVT_INT, grab)) return FALSE;
    4c52:	|  |  |  |  |  |  |  |              |  |  |  |  |  |  \----> move.l 60(sp),-(sp)
    4c56:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         pea 1 <_start+0x1>
    4c5a:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 8(sp),a0
    4c5e:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l a0,-(sp)
    4c60:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         jsr 145f0 <getValueType>
    4c66:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 12(sp),sp
    4c6a:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         tst.w d0
    4c6c:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     /-- bne.s 4c72 <continueFunction+0x648>
    4c6e:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     |   clr.w d0
    4c70:	|  |  |  |  |  |  |  |              |  |  |  |  +--|-----|-- bra.s 4cb4 <continueFunction+0x68a>
							setVariable (&fun -> reg, SVT_INT, ii);
    4c72:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     \-> move.l (sp),d1
    4c74:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         moveq #28,d0
    4c76:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         add.l 80(sp),d0
    4c7a:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d1,-(sp)
    4c7c:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         pea 1 <_start+0x1>
    4c80:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d0,-(sp)
    4c82:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         jsr 14ee2 <setVariable>
    4c88:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 12(sp),sp
							grab -> varData.intValue = ii - 1;
    4c8c:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l (sp),d0
    4c8e:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         subq.l #1,d0
    4c90:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         movea.l 60(sp),a0
    4c94:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d0,4(a0)
							break;
    4c98:	|  |  |  |  |  |  |  |              |  |  |  |  |  +-------- bra.s 4cb8 <continueFunction+0x68e>
							if (! copyVariable (grab, &fun -> reg)) return FALSE;
    4c9a:	|  |  |  |  |  |  |  |              |  |  |  \--|--|-------> moveq #28,d0
    4c9c:	|  |  |  |  |  |  |  |              |  |  |     |  |         add.l 80(sp),d0
    4ca0:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l d0,-(sp)
    4ca2:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l 64(sp),-(sp)
    4ca6:	|  |  |  |  |  |  |  |              |  |  |     |  |         jsr 14aaa <copyVariable>
    4cac:	|  |  |  |  |  |  |  |              |  |  |     |  |         addq.l #8,sp
    4cae:	|  |  |  |  |  |  |  |              |  |  |     |  |         tst.w d0
    4cb0:	|  |  |  |  |  |  |  |              |  |  +-----|--|-------- bne.s 4cce <continueFunction+0x6a4>
    4cb2:	|  |  |  |  |  |  |  |              |  |  |     |  |         clr.w d0
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    4cb4:	|  +--|--|--|--|--|--|--------------|--|--|-----\--|-------X bra.w 54d4 <continueFunction+0xeaa>
				break;
    4cb8:	|  |  |  |  |  |  |  |              |  |  +--------\-------X bra.s 4cce <continueFunction+0x6a4>

				default:
				KPrintF((ERROR_INDEX_NONSTACK));
    4cba:	|  |  |  |  |  |  |  |              \--|--|----------------> pea 18677 <PutChar+0xb99>
    4cc0:	|  |  |  |  |  |  |  |                 |  |                  jsr 1703c <KPrintF>
    4cc6:	|  |  |  |  |  |  |  |                 |  |                  addq.l #4,sp
				return FALSE;
    4cc8:	|  |  |  |  |  |  |  |                 |  |                  clr.w d0
    4cca:	|  +--|--|--|--|--|--|-----------------|--|----------------- bra.w 54d4 <continueFunction+0xeaa>
				break;
    4cce:	|  |  |  |  |  |  |  |                 |  \----------------> nop
			}
			break;
    4cd0:	|  |  |  |  +--|--|--|-----------------\-------------------X bra.w 54b2 <continueFunction+0xe88>

			case SLU_INDEXSET:
			switch (fun -> stack -> thisVar.varType) {
    4cd4:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    4cd8:	|  |  |  |  |  |  |  |                                       movea.l 24(a0),a0
    4cdc:	|  |  |  |  |  |  |  |                                       move.l (a0),d0
    4cde:	|  |  |  |  |  |  |  |                                       moveq #6,d1
    4ce0:	|  |  |  |  |  |  |  |                                       cmp.l d0,d1
    4ce2:	|  |  |  |  |  |  |  |                                   /-- beq.s 4cf0 <continueFunction+0x6c6>
    4ce4:	|  |  |  |  |  |  |  |                                   |   moveq #10,d1
    4ce6:	|  |  |  |  |  |  |  |                                   |   cmp.l d0,d1
    4ce8:	|  |  |  |  |  |  |  |                                /--|-- beq.w 4d9c <continueFunction+0x772>
    4cec:	|  |  |  |  |  |  |  |                             /--|--|-- bra.w 4dfa <continueFunction+0x7d0>
				case SVT_STACK:
				if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    4cf0:	|  |  |  |  |  |  |  |                             |  |  \-> movea.l 80(sp),a0
    4cf4:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    4cf8:	|  |  |  |  |  |  |  |                             |  |      movea.l 4(a0),a0
    4cfc:	|  |  |  |  |  |  |  |                             |  |      move.l (a0),d0
    4cfe:	|  |  |  |  |  |  |  |                             |  |  /-- bne.s 4d14 <continueFunction+0x6ea>
					KPrintF((ERROR_INDEX_EMPTY));
    4d00:	|  |  |  |  |  |  |  |                             |  |  |   pea 18659 <PutChar+0xb7b>
    4d06:	|  |  |  |  |  |  |  |                             |  |  |   jsr 1703c <KPrintF>
    4d0c:	|  |  |  |  |  |  |  |                             |  |  |   addq.l #4,sp
					return FALSE;
    4d0e:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    4d10:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 54d4 <continueFunction+0xeaa>
				} else {
					int ii;
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    4d14:	|  |  |  |  |  |  |  |                             |  |  \-> moveq #28,d0
    4d16:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    4d1a:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    4d1c:	|  |  |  |  |  |  |  |                             |  |      pea 1 <_start+0x1>
    4d20:	|  |  |  |  |  |  |  |                             |  |      lea 16(sp),a0
    4d24:	|  |  |  |  |  |  |  |                             |  |      move.l a0,-(sp)
    4d26:	|  |  |  |  |  |  |  |                             |  |      jsr 145f0 <getValueType>
    4d2c:	|  |  |  |  |  |  |  |                             |  |      lea 12(sp),sp
    4d30:	|  |  |  |  |  |  |  |                             |  |      tst.w d0
    4d32:	|  |  |  |  |  |  |  |                             |  |  /-- bne.s 4d3a <continueFunction+0x710>
    4d34:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    4d36:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 54d4 <continueFunction+0xeaa>
					if (! stackSetByIndex (fun -> stack -> thisVar.varData.theStack -> first, ii, &fun -> stack -> next -> thisVar)) {
    4d3a:	|  |  |  |  |  |  |  |                             |  |  \-> movea.l 80(sp),a0
    4d3e:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    4d42:	|  |  |  |  |  |  |  |                             |  |      move.l 8(a0),d0
    4d46:	|  |  |  |  |  |  |  |                             |  |      movea.l d0,a1
    4d48:	|  |  |  |  |  |  |  |                             |  |      move.l 8(sp),d0
    4d4c:	|  |  |  |  |  |  |  |                             |  |      move.l d0,d1
    4d4e:	|  |  |  |  |  |  |  |                             |  |      movea.l 80(sp),a0
    4d52:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    4d56:	|  |  |  |  |  |  |  |                             |  |      movea.l 4(a0),a0
    4d5a:	|  |  |  |  |  |  |  |                             |  |      move.l (a0),d0
    4d5c:	|  |  |  |  |  |  |  |                             |  |      move.l a1,-(sp)
    4d5e:	|  |  |  |  |  |  |  |                             |  |      move.l d1,-(sp)
    4d60:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    4d62:	|  |  |  |  |  |  |  |                             |  |      jsr 684a <stackSetByIndex>
    4d68:	|  |  |  |  |  |  |  |                             |  |      lea 12(sp),sp
    4d6c:	|  |  |  |  |  |  |  |                             |  |      tst.w d0
    4d6e:	|  |  |  |  |  |  |  |                             |  |  /-- bne.s 4d76 <continueFunction+0x74c>
						return FALSE;
    4d70:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    4d72:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 54d4 <continueFunction+0xeaa>
					}
					trimStack (&fun -> stack);
    4d76:	|  |  |  |  |  |  |  |                             |  |  \-> moveq #24,d0
    4d78:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    4d7c:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    4d7e:	|  |  |  |  |  |  |  |                             |  |      jsr 14f74 <trimStack>
    4d84:	|  |  |  |  |  |  |  |                             |  |      addq.l #4,sp
					trimStack (&fun -> stack);
    4d86:	|  |  |  |  |  |  |  |                             |  |      moveq #24,d0
    4d88:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    4d8c:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    4d8e:	|  |  |  |  |  |  |  |                             |  |      jsr 14f74 <trimStack>
    4d94:	|  |  |  |  |  |  |  |                             |  |      addq.l #4,sp
				}
				break;
    4d96:	|  |  |  |  |  |  |  |                             |  |      nop

				default:
				KPrintF((ERROR_INDEX_NONSTACK));
				return FALSE;
			}
			break;
    4d98:	|  |  |  |  +--|--|--|-----------------------------|--|----- bra.w 54b2 <continueFunction+0xe88>
					if (! getValueType (&ii, SVT_INT, &fun->reg)) return FALSE;
    4d9c:	|  |  |  |  |  |  |  |                             |  \----> moveq #28,d0
    4d9e:	|  |  |  |  |  |  |  |                             |         add.l 80(sp),d0
    4da2:	|  |  |  |  |  |  |  |                             |         move.l d0,-(sp)
    4da4:	|  |  |  |  |  |  |  |                             |         pea 1 <_start+0x1>
    4da8:	|  |  |  |  |  |  |  |                             |         lea 20(sp),a0
    4dac:	|  |  |  |  |  |  |  |                             |         move.l a0,-(sp)
    4dae:	|  |  |  |  |  |  |  |                             |         jsr 145f0 <getValueType>
    4db4:	|  |  |  |  |  |  |  |                             |         lea 12(sp),sp
    4db8:	|  |  |  |  |  |  |  |                             |         tst.w d0
    4dba:	|  |  |  |  |  |  |  |                             |     /-- bne.s 4dc2 <continueFunction+0x798>
    4dbc:	|  |  |  |  |  |  |  |                             |     |   clr.w d0
    4dbe:	|  +--|--|--|--|--|--|-----------------------------|-----|-- bra.w 54d4 <continueFunction+0xeaa>
					struct variable * v = fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii);
    4dc2:	|  |  |  |  |  |  |  |                             |     \-> move.l 12(sp),d0
    4dc6:	|  |  |  |  |  |  |  |                             |         move.l d0,d1
    4dc8:	|  |  |  |  |  |  |  |                             |         movea.l 80(sp),a0
    4dcc:	|  |  |  |  |  |  |  |                             |         movea.l 24(a0),a0
    4dd0:	|  |  |  |  |  |  |  |                             |         move.l 4(a0),d0
    4dd4:	|  |  |  |  |  |  |  |                             |         move.l d1,-(sp)
    4dd6:	|  |  |  |  |  |  |  |                             |         move.l d0,-(sp)
    4dd8:	|  |  |  |  |  |  |  |                             |         jsr 1427a <fastArrayGetByIndex>
    4dde:	|  |  |  |  |  |  |  |                             |         addq.l #8,sp
    4de0:	|  |  |  |  |  |  |  |                             |         move.l d0,56(sp)
					if (v == NULL) KPrintF(("Not within bounds of fast array."));
    4de4:	|  |  |  |  |  |  |  |                             |     /-- bne.s 4df4 <continueFunction+0x7ca>
    4de6:	|  |  |  |  |  |  |  |                             |     |   pea 1869b <PutChar+0xbbd>
    4dec:	|  |  |  |  |  |  |  |                             |     |   jsr 1703c <KPrintF>
    4df2:	|  |  |  |  |  |  |  |                             |     |   addq.l #4,sp
					return FALSE;
    4df4:	|  |  |  |  |  |  |  |                             |     \-> clr.w d0
    4df6:	|  +--|--|--|--|--|--|-----------------------------|-------- bra.w 54d4 <continueFunction+0xeaa>
				KPrintF((ERROR_INDEX_NONSTACK));
    4dfa:	|  |  |  |  |  |  |  |                             \-------> pea 18677 <PutChar+0xb99>
    4e00:	|  |  |  |  |  |  |  |                                       jsr 1703c <KPrintF>
    4e06:	|  |  |  |  |  |  |  |                                       addq.l #4,sp
				return FALSE;
    4e08:	|  |  |  |  |  |  |  |                                       clr.w d0
    4e0a:	|  +--|--|--|--|--|--|-------------------------------------- bra.w 54d4 <continueFunction+0xeaa>
			// variable, a global or onto the stack...

			case SLU_INCREMENT_LOCAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&fun -> localVars[param])) return FALSE;
    4e0e:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    4e12:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    4e16:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    4e1a:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    4e1c:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    4e1e:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    4e20:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    4e24:	|  |  |  |  |  |  |  |                                       lea 24(sp),a0
    4e28:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    4e2a:	|  |  |  |  |  |  |  |                                       jsr 145f0 <getValueType>
    4e30:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    4e34:	|  |  |  |  |  |  |  |                                       tst.w d0
    4e36:	|  |  |  |  |  |  |  |                                   /-- bne.s 4e3e <continueFunction+0x814>
    4e38:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    4e3a:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 54d4 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    4e3e:	|  |  |  |  |  |  |  |                                   \-> move.l 16(sp),d1
    4e42:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    4e44:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    4e48:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    4e4a:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    4e4e:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    4e50:	|  |  |  |  |  |  |  |                                       jsr 14ee2 <setVariable>
    4e56:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&(fun -> localVars[param]), SVT_INT, ii + 1);
    4e5a:	|  |  |  |  |  |  |  |                                       move.l 16(sp),d0
    4e5e:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    4e60:	|  |  |  |  |  |  |  |                                       addq.l #1,d1
    4e62:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    4e66:	|  |  |  |  |  |  |  |                                       movea.l 20(a0),a0
    4e6a:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    4e6e:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    4e70:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    4e72:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    4e74:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    4e78:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    4e7a:	|  |  |  |  |  |  |  |                                       jsr 14ee2 <setVariable>
    4e80:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    4e84:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 54b2 <continueFunction+0xe88>

			case SLU_INCREMENT_GLOBAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&globalVars[param])) return FALSE;
    4e88:	|  |  |  |  |  |  |  |                                       move.l 1a752 <globalVars>,d1
    4e8e:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    4e92:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    4e94:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    4e96:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    4e98:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    4e9c:	|  |  |  |  |  |  |  |                                       lea 28(sp),a0
    4ea0:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    4ea2:	|  |  |  |  |  |  |  |                                       jsr 145f0 <getValueType>
    4ea8:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    4eac:	|  |  |  |  |  |  |  |                                       tst.w d0
    4eae:	|  |  |  |  |  |  |  |                                   /-- bne.s 4eb6 <continueFunction+0x88c>
    4eb0:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    4eb2:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 54d4 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    4eb6:	|  |  |  |  |  |  |  |                                   \-> move.l 20(sp),d1
    4eba:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    4ebc:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    4ec0:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    4ec2:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    4ec6:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    4ec8:	|  |  |  |  |  |  |  |                                       jsr 14ee2 <setVariable>
    4ece:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&globalVars[param], SVT_INT, ii + 1);
    4ed2:	|  |  |  |  |  |  |  |                                       move.l 20(sp),d0
    4ed6:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    4ed8:	|  |  |  |  |  |  |  |                                       addq.l #1,d1
    4eda:	|  |  |  |  |  |  |  |                                       movea.l 1a752 <globalVars>,a0
    4ee0:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    4ee4:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    4ee6:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    4ee8:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    4eea:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    4eee:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    4ef0:	|  |  |  |  |  |  |  |                                       jsr 14ee2 <setVariable>
    4ef6:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    4efa:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 54b2 <continueFunction+0xe88>

			case SLU_DECREMENT_LOCAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&fun -> localVars[param])) return FALSE;
    4efe:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    4f02:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    4f06:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    4f0a:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    4f0c:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    4f0e:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    4f10:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    4f14:	|  |  |  |  |  |  |  |                                       lea 32(sp),a0
    4f18:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    4f1a:	|  |  |  |  |  |  |  |                                       jsr 145f0 <getValueType>
    4f20:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    4f24:	|  |  |  |  |  |  |  |                                       tst.w d0
    4f26:	|  |  |  |  |  |  |  |                                   /-- bne.s 4f2e <continueFunction+0x904>
    4f28:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    4f2a:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 54d4 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    4f2e:	|  |  |  |  |  |  |  |                                   \-> move.l 24(sp),d1
    4f32:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    4f34:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    4f38:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    4f3a:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    4f3e:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    4f40:	|  |  |  |  |  |  |  |                                       jsr 14ee2 <setVariable>
    4f46:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&(fun -> localVars[param]), SVT_INT, ii - 1);
    4f4a:	|  |  |  |  |  |  |  |                                       move.l 24(sp),d0
    4f4e:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    4f50:	|  |  |  |  |  |  |  |                                       subq.l #1,d1
    4f52:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    4f56:	|  |  |  |  |  |  |  |                                       movea.l 20(a0),a0
    4f5a:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    4f5e:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    4f60:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    4f62:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    4f64:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    4f68:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    4f6a:	|  |  |  |  |  |  |  |                                       jsr 14ee2 <setVariable>
    4f70:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    4f74:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 54b2 <continueFunction+0xe88>

			case SLU_DECREMENT_GLOBAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&globalVars[param])) return FALSE;
    4f78:	|  |  |  |  |  |  |  |                                       move.l 1a752 <globalVars>,d1
    4f7e:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    4f82:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    4f84:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    4f86:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    4f88:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    4f8c:	|  |  |  |  |  |  |  |                                       lea 36(sp),a0
    4f90:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    4f92:	|  |  |  |  |  |  |  |                                       jsr 145f0 <getValueType>
    4f98:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    4f9c:	|  |  |  |  |  |  |  |                                       tst.w d0
    4f9e:	|  |  |  |  |  |  |  |                                   /-- bne.s 4fa6 <continueFunction+0x97c>
    4fa0:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    4fa2:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 54d4 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    4fa6:	|  |  |  |  |  |  |  |                                   \-> move.l 28(sp),d1
    4faa:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    4fac:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    4fb0:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    4fb2:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    4fb6:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    4fb8:	|  |  |  |  |  |  |  |                                       jsr 14ee2 <setVariable>
    4fbe:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&globalVars[param], SVT_INT, ii - 1);
    4fc2:	|  |  |  |  |  |  |  |                                       move.l 28(sp),d0
    4fc6:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    4fc8:	|  |  |  |  |  |  |  |                                       subq.l #1,d1
    4fca:	|  |  |  |  |  |  |  |                                       movea.l 1a752 <globalVars>,a0
    4fd0:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    4fd4:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    4fd6:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    4fd8:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    4fda:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    4fde:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    4fe0:	|  |  |  |  |  |  |  |                                       jsr 14ee2 <setVariable>
    4fe6:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    4fea:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 54b2 <continueFunction+0xe88>

			case SLU_SET_LOCAL:
			if (! copyVariable (&fun -> reg, &(fun -> localVars[param]))) return FALSE;
    4fee:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    4ff2:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    4ff6:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    4ffa:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    4ffc:	|  |  |  |  |  |  |  |                                       add.l d0,d1
    4ffe:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    5000:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    5004:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5006:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5008:	|  |  |  |  |  |  |  |                                       jsr 14aaa <copyVariable>
    500e:	|  |  |  |  |  |  |  |                                       addq.l #8,sp
    5010:	|  |  |  |  |  |  |  |                                       tst.w d0
    5012:	|  |  |  |  |  |  |  |  /----------------------------------- bne.w 549c <continueFunction+0xe72>
    5016:	|  |  |  |  |  |  |  |  |                                    clr.w d0
    5018:	|  +--|--|--|--|--|--|--|----------------------------------- bra.w 54d4 <continueFunction+0xeaa>
			break;

			case SLU_SET_GLOBAL:
//			newDebug ("  Copying TO global variable", param);
//			newDebug ("  Global type at the moment", globalVars[param].varType);
			if (! copyVariable (&fun -> reg, &globalVars[param])) return FALSE;
    501c:	|  |  |  |  |  |  |  |  |                                    move.l 1a752 <globalVars>,d1
    5022:	|  |  |  |  |  |  |  |  |                                    move.l 68(sp),d0
    5026:	|  |  |  |  |  |  |  |  |                                    lsl.l #3,d0
    5028:	|  |  |  |  |  |  |  |  |                                    add.l d0,d1
    502a:	|  |  |  |  |  |  |  |  |                                    moveq #28,d0
    502c:	|  |  |  |  |  |  |  |  |                                    add.l 80(sp),d0
    5030:	|  |  |  |  |  |  |  |  |                                    move.l d1,-(sp)
    5032:	|  |  |  |  |  |  |  |  |                                    move.l d0,-(sp)
    5034:	|  |  |  |  |  |  |  |  |                                    jsr 14aaa <copyVariable>
    503a:	|  |  |  |  |  |  |  |  |                                    addq.l #8,sp
    503c:	|  |  |  |  |  |  |  |  |                                    tst.w d0
    503e:	|  |  |  |  |  |  |  |  |  /-------------------------------- bne.w 54a0 <continueFunction+0xe76>
    5042:	|  |  |  |  |  |  |  |  |  |                                 clr.w d0
    5044:	|  +--|--|--|--|--|--|--|--|-------------------------------- bra.w 54d4 <continueFunction+0xeaa>
			break;

			case SLU_LOAD_GLOBAL:
//			newDebug ("  Copying FROM global variable", param);
//			newDebug ("  Global type at the moment", globalVars[param].varType);
			if (! copyVariable (&globalVars[param], &fun -> reg)) return FALSE;
    5048:	|  |  |  |  |  |  |  |  |  |                                 moveq #28,d0
    504a:	|  |  |  |  |  |  |  |  |  |                                 add.l 80(sp),d0
    504e:	|  |  |  |  |  |  |  |  |  |                                 movea.l 1a752 <globalVars>,a0
    5054:	|  |  |  |  |  |  |  |  |  |                                 move.l 68(sp),d1
    5058:	|  |  |  |  |  |  |  |  |  |                                 lsl.l #3,d1
    505a:	|  |  |  |  |  |  |  |  |  |                                 add.l a0,d1
    505c:	|  |  |  |  |  |  |  |  |  |                                 move.l d0,-(sp)
    505e:	|  |  |  |  |  |  |  |  |  |                                 move.l d1,-(sp)
    5060:	|  |  |  |  |  |  |  |  |  |                                 jsr 14aaa <copyVariable>
    5066:	|  |  |  |  |  |  |  |  |  |                                 addq.l #8,sp
    5068:	|  |  |  |  |  |  |  |  |  |                                 tst.w d0
    506a:	|  |  |  |  |  |  |  |  |  |  /----------------------------- bne.w 54a4 <continueFunction+0xe7a>
    506e:	|  |  |  |  |  |  |  |  |  |  |                              clr.w d0
    5070:	|  +--|--|--|--|--|--|--|--|--|----------------------------- bra.w 54d4 <continueFunction+0xeaa>
			break;

			case SLU_STACK_PUSH:
			if (! addVarToStack (&fun -> reg, &fun -> stack)) return FALSE;
    5074:	|  |  |  |  |  |  |  |  |  |  |                              moveq #24,d1
    5076:	|  |  |  |  |  |  |  |  |  |  |                              add.l 80(sp),d1
    507a:	|  |  |  |  |  |  |  |  |  |  |                              moveq #28,d0
    507c:	|  |  |  |  |  |  |  |  |  |  |                              add.l 80(sp),d0
    5080:	|  |  |  |  |  |  |  |  |  |  |                              move.l d1,-(sp)
    5082:	|  |  |  |  |  |  |  |  |  |  |                              move.l d0,-(sp)
    5084:	|  |  |  |  |  |  |  |  |  |  |                              jsr 13e2c <addVarToStack>
    508a:	|  |  |  |  |  |  |  |  |  |  |                              addq.l #8,sp
    508c:	|  |  |  |  |  |  |  |  |  |  |                              tst.w d0
    508e:	|  |  |  |  |  |  |  |  |  |  |  /-------------------------- bne.w 54a8 <continueFunction+0xe7e>
    5092:	|  |  |  |  |  |  |  |  |  |  |  |                           clr.w d0
    5094:	|  +--|--|--|--|--|--|--|--|--|--|-------------------------- bra.w 54d4 <continueFunction+0xeaa>
			break;

			case SLU_QUICK_PUSH:
			if (! addVarToStackQuick (&fun -> reg, &fun -> stack)) return FALSE;
    5098:	|  |  |  |  |  |  |  |  |  |  |  |                           moveq #24,d1
    509a:	|  |  |  |  |  |  |  |  |  |  |  |                           add.l 80(sp),d1
    509e:	|  |  |  |  |  |  |  |  |  |  |  |                           moveq #28,d0
    50a0:	|  |  |  |  |  |  |  |  |  |  |  |                           add.l 80(sp),d0
    50a4:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l d1,-(sp)
    50a6:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l d0,-(sp)
    50a8:	|  |  |  |  |  |  |  |  |  |  |  |                           jsr 13eb2 <addVarToStackQuick>
    50ae:	|  |  |  |  |  |  |  |  |  |  |  |                           addq.l #8,sp
    50b0:	|  |  |  |  |  |  |  |  |  |  |  |                           tst.w d0
    50b2:	|  |  |  |  |  |  |  |  |  |  |  |  /----------------------- bne.w 54ac <continueFunction+0xe82>
    50b6:	|  |  |  |  |  |  |  |  |  |  |  |  |                        clr.w d0
    50b8:	|  +--|--|--|--|--|--|--|--|--|--|--|----------------------- bra.w 54d4 <continueFunction+0xeaa>
			break;

			case SLU_NOT:
			setVariable (&fun -> reg, SVT_INT, ! getBoolean (&fun -> reg));
    50bc:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    50be:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    50c2:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    50c4:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 14b30 <getBoolean>
    50ca:	|  |  |  |  |  |  |  |  |  |  |  |  |                        addq.l #4,sp
    50cc:	|  |  |  |  |  |  |  |  |  |  |  |  |                        tst.w d0
    50ce:	|  |  |  |  |  |  |  |  |  |  |  |  |                        seq d0
    50d0:	|  |  |  |  |  |  |  |  |  |  |  |  |                        neg.b d0
    50d2:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #0,d1
    50d4:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.b d0,d1
    50d6:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    50d8:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    50dc:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d1,-(sp)
    50de:	|  |  |  |  |  |  |  |  |  |  |  |  |                        pea 1 <_start+0x1>
    50e2:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    50e4:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 14ee2 <setVariable>
    50ea:	|  |  |  |  |  |  |  |  |  |  |  |  |                        lea 12(sp),sp
			break;
    50ee:	|  |  |  |  +--|--|--|--|--|--|--|--|----------------------- bra.w 54b2 <continueFunction+0xe88>

			case SLU_BR_ZERO:
			if (! getBoolean (&fun -> reg)) {
    50f2:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    50f4:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    50f8:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    50fa:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 14b30 <getBoolean>
    5100:	|  |  |  |  |  |  |  |  |  |  |  |  |                        addq.l #4,sp
    5102:	|  |  |  |  |  |  |  |  |  |  |  |  |                        tst.w d0
    5104:	|  |  |  |  |  |  |  |  |  |  |  |  |  /-------------------- bne.w 54b0 <continueFunction+0xe86>
				advanceNow = FALSE;
    5108:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     clr.w 72(sp)
				fun -> runThisLine = param;
    510c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    5110:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 68(sp),36(a0)
			}
			break;
    5116:	|  |  |  |  |  |  |  |  |  |  |  |  |  +-------------------- bra.w 54b0 <continueFunction+0xe86>

			case SLU_BRANCH:
			advanceNow = FALSE;
    511a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     clr.w 72(sp)
			fun -> runThisLine = param;
    511e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    5122:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 68(sp),36(a0)
			break;
    5128:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-------------------- bra.w 54b2 <continueFunction+0xe88>

			case SLU_NEGATIVE:
			{
				int i;
				if (! getValueType(&i, SVT_INT,&fun -> reg)) return FALSE;
    512c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     moveq #28,d0
    512e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     add.l 80(sp),d0
    5132:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,-(sp)
    5134:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     pea 1 <_start+0x1>
    5138:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 40(sp),a0
    513c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l a0,-(sp)
    513e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     jsr 145f0 <getValueType>
    5144:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 12(sp),sp
    5148:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     tst.w d0
    514a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 /-- bne.s 5152 <continueFunction+0xb28>
    514c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 |   clr.w d0
    514e:	|  +--|--|--|--|--|--|--|--|--|--|--|--|-----------------|-- bra.w 54d4 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, -i);
    5152:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 \-> move.l 32(sp),d0
    5156:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,d1
    5158:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     neg.l d1
    515a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     moveq #28,d0
    515c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     add.l 80(sp),d0
    5160:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d1,-(sp)
    5162:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     pea 1 <_start+0x1>
    5166:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,-(sp)
    5168:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     jsr 14ee2 <setVariable>
    516e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 12(sp),sp
			}
			break;
    5172:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-------------------- bra.w 54b2 <continueFunction+0xe88>
			case SLU_NOT_EQ:
			case SLU_LESSTHAN:
			case SLU_MORETHAN:
			case SLU_LESS_EQUAL:
			case SLU_MORE_EQUAL:
			if (fun -> stack) {
    5176:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    517a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 24(a0),d0
    517e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  /----------------- beq.w 5468 <continueFunction+0xe3e>
    5182:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  moveq #15,d0
    5184:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  cmp.l 64(sp),d0
    5188:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        /-------- beq.s 5204 <continueFunction+0xbda>
    518a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #15,d1
    518c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         cmp.l 64(sp),d1
    5190:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     /--|-------- bcs.w 524e <continueFunction+0xc24>
    5194:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |         moveq #8,d0
    5196:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |         cmp.l 64(sp),d0
    519a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     /-- beq.s 51a8 <continueFunction+0xb7e>
    519c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |   moveq #14,d1
    519e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |   cmp.l 64(sp),d1
    51a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  /--|-- beq.s 51d6 <continueFunction+0xbac>
    51a4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     +--|--|--|-- bra.w 524e <continueFunction+0xc24>
				int firstValue, secondValue;

				switch (com) {
					case SLU_PLUS:
					addVariablesInSecond (&fun -> stack -> thisVar, &fun -> reg);
    51a8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  \-> moveq #28,d0
    51aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      add.l 80(sp),d0
    51ae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      movea.l 80(sp),a0
    51b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l 24(a0),d1
    51b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d0,-(sp)
    51b8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d1,-(sp)
    51ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      jsr 13f26 <addVariablesInSecond>
    51c0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      addq.l #8,sp
					trimStack (&fun -> stack);
    51c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      moveq #24,d0
    51c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      add.l 80(sp),d0
    51c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d0,-(sp)
    51ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      jsr 14f74 <trimStack>
    51d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      addq.l #4,sp
					break;
    51d2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  /--|--|--|----- bra.w 547c <continueFunction+0xe52>

					case SLU_EQUALS:
					compareVariablesInSecond (&(fun -> stack -> thisVar), &fun -> reg);
    51d6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \----> moveq #28,d0
    51d8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         add.l 80(sp),d0
    51dc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         movea.l 80(sp),a0
    51e0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l 24(a0),d1
    51e4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d0,-(sp)
    51e6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d1,-(sp)
    51e8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         jsr 13fe4 <compareVariablesInSecond>
    51ee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         addq.l #8,sp
					trimStack (&fun -> stack);
    51f0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         moveq #24,d0
    51f2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         add.l 80(sp),d0
    51f6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d0,-(sp)
    51f8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         jsr 14f74 <trimStack>
    51fe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         addq.l #4,sp
					break;
    5200:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|--|-------- bra.w 547c <continueFunction+0xe52>

					case SLU_NOT_EQ:
					compareVariablesInSecond (&(fun -> stack -> thisVar), &fun -> reg);
    5204:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \-------> moveq #28,d0
    5206:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            add.l 80(sp),d0
    520a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    520e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 24(a0),d1
    5212:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,-(sp)
    5214:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d1,-(sp)
    5216:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            jsr 13fe4 <compareVariablesInSecond>
    521c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            addq.l #8,sp
					trimStack (&fun -> stack);
    521e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            moveq #24,d0
    5220:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            add.l 80(sp),d0
    5224:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,-(sp)
    5226:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            jsr 14f74 <trimStack>
    522c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            addq.l #4,sp
	               	fun -> reg.varData.intValue = ! fun -> reg.varData.intValue;
    522e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    5232:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 32(a0),d0
    5236:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            seq d0
    5238:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            neg.b d0
    523a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.b d0,d0
    523c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            andi.l #255,d0
    5242:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    5246:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,32(a0)
					break;
    524a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|----------- bra.w 547c <continueFunction+0xe52>

					default:
					if (! getValueType (&firstValue, SVT_INT, &fun->stack->thisVar)) return FALSE;
    524e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \----------> movea.l 80(sp),a0
    5252:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l 24(a0),d0
    5256:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    5258:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               pea 1 <_start+0x1>
    525c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 48(sp),a0
    5260:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l a0,-(sp)
    5262:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 145f0 <getValueType>
    5268:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 12(sp),sp
    526c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               tst.w d0
    526e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           /-- bne.s 5276 <continueFunction+0xc4c>
    5270:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   clr.w d0
    5272:	|  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|-----------|-- bra.w 54d4 <continueFunction+0xeaa>
					if (! getValueType(&secondValue, SVT_INT,&fun -> reg)) return FALSE;
    5276:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           \-> moveq #28,d0
    5278:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 80(sp),d0
    527c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    527e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               pea 1 <_start+0x1>
    5282:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 44(sp),a0
    5286:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l a0,-(sp)
    5288:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 145f0 <getValueType>
    528e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 12(sp),sp
    5292:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               tst.w d0
    5294:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           /-- bne.s 529c <continueFunction+0xc72>
    5296:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   clr.w d0
    5298:	|  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|-----------|-- bra.w 54d4 <continueFunction+0xeaa>
					trimStack (&fun -> stack);
    529c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           \-> moveq #24,d0
    529e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 80(sp),d0
    52a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    52a4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 14f74 <trimStack>
    52aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               addq.l #4,sp
    52ac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               moveq #-9,d0
    52ae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 64(sp),d0
    52b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               moveq #23,d1
    52b4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               cmp.l d0,d1
    52b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           /-- bcs.w 547a <continueFunction+0xe50>
    52ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l d0,d0
    52bc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   movea.l d0,a0
    52be:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   adda.l #21194,a0
    52c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.w (a0),d0
    52c6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jmp (52ca <continueFunction+0xca0>,pc,d0.w)
    52ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   ori.w #48,-(a2)
    52ce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x00ba
    52d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    52d8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x0088
    52da:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    52e2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    52ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(15466778,d0.w)
    52f2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(21365106,d0.w)

					switch (com) {
						case SLU_MULT:
						setVariable (&fun -> reg, SVT_INT, firstValue * secondValue);
    52fa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    52fe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    5302:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5304:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5306:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 179c8 <__mulsi3>
    530c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    530e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    5310:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    5312:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    5316:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5318:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    531c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    531e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14ee2 <setVariable>
    5324:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    5328:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 547c <continueFunction+0xe52>

						case SLU_MINUS:
						setVariable (&fun -> reg, SVT_INT, firstValue - secondValue);
    532c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    5330:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    5334:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sub.l d0,d1
    5336:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    5338:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    533c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    533e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    5342:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5344:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14ee2 <setVariable>
    534a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    534e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 547c <continueFunction+0xe52>

						case SLU_MODULUS:
						setVariable (&fun -> reg, SVT_INT, firstValue % secondValue);
    5352:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    5356:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    535a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    535c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    535e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 17a74 <__modsi3>
    5364:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    5366:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    5368:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    536a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    536e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5370:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    5374:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5376:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14ee2 <setVariable>
    537c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    5380:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 547c <continueFunction+0xe52>

						case SLU_DIVIDE:
						setVariable (&fun -> reg, SVT_INT, firstValue / secondValue);
    5384:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    5388:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    538c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    538e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5390:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 17a46 <__divsi3>
    5396:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    5398:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    539a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    539c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    53a0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    53a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    53a6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    53a8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14ee2 <setVariable>
    53ae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    53b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 547c <continueFunction+0xe52>

						case SLU_LESSTHAN:
						setVariable (&fun -> reg, SVT_INT, firstValue < secondValue);
    53b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    53ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    53be:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    53c0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sgt d0
    53c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    53c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    53c6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    53c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    53ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    53ce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    53d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    53d4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    53d6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14ee2 <setVariable>
    53dc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    53e0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 547c <continueFunction+0xe52>

						case SLU_MORETHAN:
						setVariable (&fun -> reg, SVT_INT, firstValue > secondValue);
    53e4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    53e8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    53ec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    53ee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   slt d0
    53f0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    53f2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    53f4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    53f6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    53f8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    53fc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    53fe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    5402:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5404:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14ee2 <setVariable>
    540a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    540e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 547c <continueFunction+0xe52>

						case SLU_LESS_EQUAL:
						setVariable (&fun -> reg, SVT_INT, firstValue <= secondValue);
    5410:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    5414:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    5418:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    541a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sge d0
    541c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    541e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    5420:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    5422:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    5424:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    5428:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    542a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    542e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5430:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14ee2 <setVariable>
    5436:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    543a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 547c <continueFunction+0xe52>

						case SLU_MORE_EQUAL:
						setVariable (&fun -> reg, SVT_INT, firstValue >= secondValue);
    543c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    5440:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    5444:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    5446:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sle d0
    5448:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    544a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    544c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    544e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    5450:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    5454:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5456:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    545a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    545c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14ee2 <setVariable>
    5462:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    5466:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 547c <continueFunction+0xe52>
						default:
						break;
					}
				}
			} else {
				KPrintF((ERROR_NOSTACK));
    5468:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  \--|-----------|-> pea 186bc <PutChar+0xbde>
    546e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   jsr 1703c <KPrintF>
    5474:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   addq.l #4,sp
				return FALSE;
    5476:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   clr.w d0
    5478:	|  +--|--|--|--|--|--|--|--|--|--|--|--|-----|-----------|-- bra.s 54d4 <continueFunction+0xeaa>
						break;
    547a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           \-> nop
			}
			break;
    547c:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-----\-------------X bra.s 54b2 <continueFunction+0xe88>

			default:
			KPrintF((ERROR_UNKNOWN_CODE));
    547e:	|  |  |  \--|--|--|--|--|--|--|--|--|--|-------------------> pea 186d4 <PutChar+0xbf6>
    5484:	|  |  |     |  |  |  |  |  |  |  |  |  |                     jsr 1703c <KPrintF>
    548a:	|  |  |     |  |  |  |  |  |  |  |  |  |                     addq.l #4,sp
			return FALSE;
    548c:	|  |  |     |  |  |  |  |  |  |  |  |  |                     clr.w d0
    548e:	|  +--|-----|--|--|--|--|--|--|--|--|--|-------------------- bra.s 54d4 <continueFunction+0xeaa>
			break;
    5490:	|  |  |     |  \--|--|--|--|--|--|--|--|-------------------> nop
    5492:	|  |  |     +-----|--|--|--|--|--|--|--|-------------------- bra.s 54b2 <continueFunction+0xe88>
			break;
    5494:	|  |  |     |     \--|--|--|--|--|--|--|-------------------> nop
    5496:	|  |  |     +--------|--|--|--|--|--|--|-------------------- bra.s 54b2 <continueFunction+0xe88>
			break;
    5498:	|  |  |     |        \--|--|--|--|--|--|-------------------> nop
    549a:	|  |  |     +-----------|--|--|--|--|--|-------------------- bra.s 54b2 <continueFunction+0xe88>
			break;
    549c:	|  |  |     |           \--|--|--|--|--|-------------------> nop
    549e:	|  |  |     +--------------|--|--|--|--|-------------------- bra.s 54b2 <continueFunction+0xe88>
			break;
    54a0:	|  |  |     |              \--|--|--|--|-------------------> nop
    54a2:	|  |  |     +-----------------|--|--|--|-------------------- bra.s 54b2 <continueFunction+0xe88>
			break;
    54a4:	|  |  |     |                 \--|--|--|-------------------> nop
    54a6:	|  |  |     +--------------------|--|--|-------------------- bra.s 54b2 <continueFunction+0xe88>
			break;
    54a8:	|  |  |     |                    \--|--|-------------------> nop
    54aa:	|  |  |     +-----------------------|--|-------------------- bra.s 54b2 <continueFunction+0xe88>
			break;
    54ac:	|  |  |     |                       \--|-------------------> nop
    54ae:	|  |  |     +--------------------------|-------------------- bra.s 54b2 <continueFunction+0xe88>
			break;
    54b0:	|  |  |     |                          \-------------------> nop
		}

		if (advanceNow) fun -> runThisLine ++;
    54b2:	|  |  |     \----------------------------------------------> tst.w 72(sp)
    54b6:	+--|--|----------------------------------------------------- beq.s 54ca <continueFunction+0xea0>
    54b8:	|  |  |                                                      movea.l 80(sp),a0
    54bc:	|  |  |                                                      move.l 36(a0),d0
    54c0:	|  |  |                                                      addq.l #1,d0
    54c2:	|  |  |                                                      movea.l 80(sp),a0
    54c6:	|  |  |                                                      move.l d0,36(a0)
	while (keepLooping) {
    54ca:	\--|--|----------------------------------------------------> tst.w 74(sp)
    54ce:	   |  \----------------------------------------------------- bne.w 4652 <continueFunction+0x28>

	}
	return TRUE;
    54d2:	   |                                                         moveq #1,d0
}
    54d4:	   \-------------------------------------------------------> lea 76(sp),sp
    54d8:	                                                             rts

000054da <finishFunction>:

void finishFunction (struct loadedFunction * fun) {
    54da:	          lea -16(sp),sp
    54de:	          move.l a6,-(sp)
	int a;

	pauseFunction (fun);
    54e0:	          move.l 24(sp),-(sp)
    54e4:	          jsr 6600 <pauseFunction>
    54ea:	          addq.l #4,sp
	if (fun -> stack) 
    54ec:	          movea.l 24(sp),a0
    54f0:	          move.l 24(a0),d0
    54f4:	      /-- beq.s 5508 <finishFunction+0x2e>
	{
		KPrintF("finishfunction: error non empty stack");
    54f6:	      |   pea 18700 <PutChar+0xc22>
    54fc:	      |   jsr 1703c <KPrintF>
    5502:	      |   addq.l #4,sp
		return;
    5504:	/-----|-- bra.w 55a2 <finishFunction+0xc8>
	}
	FreeVec( fun -> compiledLines);
    5508:	|     \-> movea.l 24(sp),a0
    550c:	|         move.l 4(a0),12(sp)
    5512:	|         move.l 1a7a4 <SysBase>,d0
    5518:	|         movea.l d0,a6
    551a:	|         movea.l 12(sp),a1
    551e:	|         jsr -690(a6)
	for (a = 0; a < fun -> numLocals; a ++) unlinkVar (&(fun -> localVars[a]));
    5522:	|         clr.l 16(sp)
    5526:	|     /-- bra.s 5546 <finishFunction+0x6c>
    5528:	|  /--|-> movea.l 24(sp),a0
    552c:	|  |  |   move.l 20(a0),d1
    5530:	|  |  |   move.l 16(sp),d0
    5534:	|  |  |   lsl.l #3,d0
    5536:	|  |  |   add.l d1,d0
    5538:	|  |  |   move.l d0,-(sp)
    553a:	|  |  |   jsr 1483e <unlinkVar>
    5540:	|  |  |   addq.l #4,sp
    5542:	|  |  |   addq.l #1,16(sp)
    5546:	|  |  \-> movea.l 24(sp),a0
    554a:	|  |      move.l 8(a0),d0
    554e:	|  |      cmp.l 16(sp),d0
    5552:	|  \----- bgt.s 5528 <finishFunction+0x4e>
	if( fun->numLocals > 0) {
    5554:	|         movea.l 24(sp),a0
    5558:	|         move.l 8(a0),d0
    555c:	|     /-- ble.s 5578 <finishFunction+0x9e>
		FreeVec(fun -> localVars);
    555e:	|     |   movea.l 24(sp),a0
    5562:	|     |   move.l 20(a0),8(sp)
    5568:	|     |   move.l 1a7a4 <SysBase>,d0
    556e:	|     |   movea.l d0,a6
    5570:	|     |   movea.l 8(sp),a1
    5574:	|     |   jsr -690(a6)
	}
	unlinkVar (&fun -> reg);
    5578:	|     \-> moveq #28,d0
    557a:	|         add.l 24(sp),d0
    557e:	|         move.l d0,-(sp)
    5580:	|         jsr 1483e <unlinkVar>
    5586:	|         addq.l #4,sp
	FreeVec(fun);
    5588:	|         move.l 24(sp),4(sp)
    558e:	|         move.l 1a7a4 <SysBase>,d0
    5594:	|         movea.l d0,a6
    5596:	|         movea.l 4(sp),a1
    559a:	|         jsr -690(a6)
	fun = NULL;
    559e:	|         clr.l 24(sp)
}
    55a2:	\-------> movea.l (sp)+,a6
    55a4:	          lea 16(sp),sp
    55a8:	          rts

000055aa <freezeSubs>:

void freezeSubs () {
    55aa:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    55ac:	          move.l 1a73c <allRunningFunctions>,(sp)

	while (thisFunction) {
    55b2:	   /----- bra.s 55d0 <freezeSubs+0x26>
		if (thisFunction -> unfreezable) {
    55b4:	/--|----> movea.l (sp),a0
    55b6:	|  |      move.w 52(a0),d0
    55ba:	|  |  /-- bne.s 55ca <freezeSubs+0x20>
			//msgBox ("SLUDGE debugging bollocks!", "Trying to freeze an unfreezable function!");
		} else {
			thisFunction -> freezerLevel ++;
    55bc:	|  |  |   movea.l (sp),a0
    55be:	|  |  |   move.b 56(a0),d0
    55c2:	|  |  |   addq.b #1,d0
    55c4:	|  |  |   movea.l (sp),a0
    55c6:	|  |  |   move.b d0,56(a0)
		}
		thisFunction = thisFunction -> next;
    55ca:	|  |  \-> movea.l (sp),a0
    55cc:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    55d0:	|  \----> tst.l (sp)
    55d2:	\-------- bne.s 55b4 <freezeSubs+0xa>
	}
}
    55d4:	          nop
    55d6:	          nop
    55d8:	          addq.l #4,sp
    55da:	          rts

000055dc <handleInput>:

BOOL handleInput () {
    55dc:	             lea -16(sp),sp
    55e0:	             move.l a6,-(sp)
	//Amiga Todo: import more from orig code and adjust 

	if (! overRegion) getOverRegion ();
    55e2:	             move.l 1a8b8 <overRegion>,d0
    55e8:	         /-- bne.s 55f0 <handleInput+0x14>
    55ea:	         |   jsr 157b4 <getOverRegion>

	if (input.justMoved) {
    55f0:	         \-> move.w 1a75a <input+0x4>,d0
    55f6:	         /-- beq.s 5634 <handleInput+0x58>
		if (currentEvents -> moveMouseFunction) {
    55f8:	         |   movea.l 1a11c <currentEvents>,a0
    55fe:	         |   move.l 16(a0),d0
    5602:	         +-- beq.s 5634 <handleInput+0x58>
			if (! startNewFunctionNum (currentEvents -> moveMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    5604:	         |   move.l 1a774 <noStack>,d1
    560a:	         |   movea.l 1a11c <currentEvents>,a0
    5610:	         |   move.l 16(a0),d0
    5614:	         |   pea 1 <_start+0x1>
    5618:	         |   move.l d1,-(sp)
    561a:	         |   clr.l -(sp)
    561c:	         |   clr.l -(sp)
    561e:	         |   move.l d0,-(sp)
    5620:	         |   jsr 688e <startNewFunctionNum>
    5626:	         |   lea 20(sp),sp
    562a:	         |   tst.l d0
    562c:	         +-- bne.s 5634 <handleInput+0x58>
    562e:	         |   clr.w d0
    5630:	/--------|-- bra.w 583a <handleInput+0x25e>
		}
	}
	input.justMoved = FALSE;
    5634:	|        \-> clr.w 1a75a <input+0x4>

	if (lastRegion != overRegion && currentEvents -> focusFunction) {
    563a:	|            move.l 1a76c <lastRegion>,d1
    5640:	|            move.l 1a8b8 <overRegion>,d0
    5646:	|            cmp.l d1,d0
    5648:	|  /-------- beq.w 5720 <handleInput+0x144>
    564c:	|  |         movea.l 1a11c <currentEvents>,a0
    5652:	|  |         move.l 20(a0),d0
    5656:	|  +-------- beq.w 5720 <handleInput+0x144>
		struct variableStack * tempStack = AllocVec( sizeof(struct variableStack), MEMF_ANY);
    565a:	|  |         moveq #12,d0
    565c:	|  |         move.l d0,16(sp)
    5660:	|  |         clr.l 12(sp)
    5664:	|  |         move.l 1a7a4 <SysBase>,d0
    566a:	|  |         movea.l d0,a6
    566c:	|  |         move.l 16(sp),d0
    5670:	|  |         move.l 12(sp),d1
    5674:	|  |         jsr -684(a6)
    5678:	|  |         move.l d0,8(sp)
    567c:	|  |         move.l 8(sp),d0
    5680:	|  |         move.l d0,4(sp)
		if(!tempStack) {
    5684:	|  |         move.l 4(sp),d0
    5688:	|  |     /-- bne.s 569e <handleInput+0xc2>
			KPrintF("handleInput: Cannot allocate memory for variablestack");
    568a:	|  |     |   pea 18726 <PutChar+0xc48>
    5690:	|  |     |   jsr 1703c <KPrintF>
    5696:	|  |     |   addq.l #4,sp
			return FALSE;
    5698:	|  |     |   clr.w d0
    569a:	+--|-----|-- bra.w 583a <handleInput+0x25e>
		}
		
		initVarNew (tempStack -> thisVar);
    569e:	|  |     \-> movea.l 4(sp),a0
    56a2:	|  |         clr.l (a0)
		if (overRegion) {
    56a4:	|  |         move.l 1a8b8 <overRegion>,d0
    56aa:	|  |  /----- beq.s 56d2 <handleInput+0xf6>
			setVariable (&tempStack -> thisVar, SVT_OBJTYPE, overRegion -> thisType -> objectNum);
    56ac:	|  |  |      movea.l 1a8b8 <overRegion>,a0
    56b2:	|  |  |      movea.l 28(a0),a0
    56b6:	|  |  |      move.l 4(a0),d1
    56ba:	|  |  |      move.l 4(sp),d0
    56be:	|  |  |      move.l d1,-(sp)
    56c0:	|  |  |      pea 7 <_start+0x7>
    56c4:	|  |  |      move.l d0,-(sp)
    56c6:	|  |  |      jsr 14ee2 <setVariable>
    56cc:	|  |  |      lea 12(sp),sp
    56d0:	|  |  |  /-- bra.s 56e8 <handleInput+0x10c>
		} else {
			setVariable (&tempStack -> thisVar, SVT_INT, 0);
    56d2:	|  |  \--|-> move.l 4(sp),d0
    56d6:	|  |     |   clr.l -(sp)
    56d8:	|  |     |   pea 1 <_start+0x1>
    56dc:	|  |     |   move.l d0,-(sp)
    56de:	|  |     |   jsr 14ee2 <setVariable>
    56e4:	|  |     |   lea 12(sp),sp
		}
		tempStack -> next = NULL;
    56e8:	|  |     \-> movea.l 4(sp),a0
    56ec:	|  |         clr.l 8(a0)
		if (! startNewFunctionNum (currentEvents -> focusFunction, 1, NULL, &tempStack, TRUE)) return FALSE;
    56f0:	|  |         movea.l 1a11c <currentEvents>,a0
    56f6:	|  |         move.l 20(a0),d0
    56fa:	|  |         pea 1 <_start+0x1>
    56fe:	|  |         lea 8(sp),a0
    5702:	|  |         move.l a0,-(sp)
    5704:	|  |         clr.l -(sp)
    5706:	|  |         pea 1 <_start+0x1>
    570a:	|  |         move.l d0,-(sp)
    570c:	|  |         jsr 688e <startNewFunctionNum>
    5712:	|  |         lea 20(sp),sp
    5716:	|  |         tst.l d0
    5718:	|  +-------- bne.s 5720 <handleInput+0x144>
    571a:	|  |         clr.w d0
    571c:	+--|-------- bra.w 583a <handleInput+0x25e>
	}
	if (input.leftRelease && currentEvents -> leftMouseUpFunction)  {
    5720:	|  \-------> move.w 1a75c <input+0x6>,d0
    5726:	|        /-- beq.s 5764 <handleInput+0x188>
    5728:	|        |   movea.l 1a11c <currentEvents>,a0
    572e:	|        |   move.l 4(a0),d0
    5732:	|        +-- beq.s 5764 <handleInput+0x188>
		if (! startNewFunctionNum (currentEvents -> leftMouseUpFunction, 0, NULL, noStack, TRUE)) return FALSE;
    5734:	|        |   move.l 1a774 <noStack>,d1
    573a:	|        |   movea.l 1a11c <currentEvents>,a0
    5740:	|        |   move.l 4(a0),d0
    5744:	|        |   pea 1 <_start+0x1>
    5748:	|        |   move.l d1,-(sp)
    574a:	|        |   clr.l -(sp)
    574c:	|        |   clr.l -(sp)
    574e:	|        |   move.l d0,-(sp)
    5750:	|        |   jsr 688e <startNewFunctionNum>
    5756:	|        |   lea 20(sp),sp
    575a:	|        |   tst.l d0
    575c:	|        +-- bne.s 5764 <handleInput+0x188>
    575e:	|        |   clr.w d0
    5760:	+--------|-- bra.w 583a <handleInput+0x25e>
	}
	if (input.rightRelease && currentEvents -> rightMouseUpFunction) {
    5764:	|        \-> move.w 1a75e <input+0x8>,d0
    576a:	|        /-- beq.s 57a8 <handleInput+0x1cc>
    576c:	|        |   movea.l 1a11c <currentEvents>,a0
    5772:	|        |   move.l 12(a0),d0
    5776:	|        +-- beq.s 57a8 <handleInput+0x1cc>
		if (! startNewFunctionNum (currentEvents -> rightMouseUpFunction, 0, NULL, noStack, TRUE)) return FALSE;
    5778:	|        |   move.l 1a774 <noStack>,d1
    577e:	|        |   movea.l 1a11c <currentEvents>,a0
    5784:	|        |   move.l 12(a0),d0
    5788:	|        |   pea 1 <_start+0x1>
    578c:	|        |   move.l d1,-(sp)
    578e:	|        |   clr.l -(sp)
    5790:	|        |   clr.l -(sp)
    5792:	|        |   move.l d0,-(sp)
    5794:	|        |   jsr 688e <startNewFunctionNum>
    579a:	|        |   lea 20(sp),sp
    579e:	|        |   tst.l d0
    57a0:	|        +-- bne.s 57a8 <handleInput+0x1cc>
    57a2:	|        |   clr.w d0
    57a4:	+--------|-- bra.w 583a <handleInput+0x25e>
	}
	if (input.leftClick && currentEvents -> leftMouseFunction)
    57a8:	|        \-> move.w 1a756 <input>,d0
    57ae:	|        /-- beq.s 57e6 <handleInput+0x20a>
    57b0:	|        |   movea.l 1a11c <currentEvents>,a0
    57b6:	|        |   move.l (a0),d0
    57b8:	|        +-- beq.s 57e6 <handleInput+0x20a>
		if (! startNewFunctionNum (currentEvents -> leftMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    57ba:	|        |   move.l 1a774 <noStack>,d1
    57c0:	|        |   movea.l 1a11c <currentEvents>,a0
    57c6:	|        |   move.l (a0),d0
    57c8:	|        |   pea 1 <_start+0x1>
    57cc:	|        |   move.l d1,-(sp)
    57ce:	|        |   clr.l -(sp)
    57d0:	|        |   clr.l -(sp)
    57d2:	|        |   move.l d0,-(sp)
    57d4:	|        |   jsr 688e <startNewFunctionNum>
    57da:	|        |   lea 20(sp),sp
    57de:	|        |   tst.l d0
    57e0:	|        +-- bne.s 57e6 <handleInput+0x20a>
    57e2:	|        |   clr.w d0
    57e4:	+--------|-- bra.s 583a <handleInput+0x25e>
	if (input.rightClick && currentEvents -> rightMouseFunction) {
    57e6:	|        \-> move.w 1a758 <input+0x2>,d0
    57ec:	|        /-- beq.s 5828 <handleInput+0x24c>
    57ee:	|        |   movea.l 1a11c <currentEvents>,a0
    57f4:	|        |   move.l 8(a0),d0
    57f8:	|        +-- beq.s 5828 <handleInput+0x24c>
		if (! startNewFunctionNum (currentEvents -> rightMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    57fa:	|        |   move.l 1a774 <noStack>,d1
    5800:	|        |   movea.l 1a11c <currentEvents>,a0
    5806:	|        |   move.l 8(a0),d0
    580a:	|        |   pea 1 <_start+0x1>
    580e:	|        |   move.l d1,-(sp)
    5810:	|        |   clr.l -(sp)
    5812:	|        |   clr.l -(sp)
    5814:	|        |   move.l d0,-(sp)
    5816:	|        |   jsr 688e <startNewFunctionNum>
    581c:	|        |   lea 20(sp),sp
    5820:	|        |   tst.l d0
    5822:	|        +-- bne.s 5828 <handleInput+0x24c>
    5824:	|        |   clr.w d0
    5826:	+--------|-- bra.s 583a <handleInput+0x25e>
	}

	lastRegion = overRegion;
    5828:	|        \-> move.l 1a8b8 <overRegion>,d0
    582e:	|            move.l d0,1a76c <lastRegion>
	return runSludge ();
    5834:	|            jsr 665c <runSludge>
}
    583a:	\----------> movea.l (sp)+,a6
    583c:	             lea 16(sp),sp
    5840:	             rts

00005842 <initSludge>:

BOOL initSludge (char * filename) {
    5842:	             lea -292(sp),sp
    5846:	             movem.l d2-d4/a2/a6,-(sp)
	int a = 0;
    584a:	             clr.l 308(sp)
	mouseCursorAnim = makeNullAnim ();
    584e:	             jsr ab36 <makeNullAnim>
    5854:	             move.l d0,1a6aa <mouseCursorAnim>

	//Amiga: Attention. This was changed to a Nonpointer Type
	BPTR fp = openAndVerify (filename, 'G', 'E', ERROR_BAD_HEADER, &gameVersion);
    585a:	             pea 1a74e <gameVersion>
    5860:	             pea 1875c <PutChar+0xc7e>
    5866:	             pea 45 <_start+0x45>
    586a:	             pea 47 <_start+0x47>
    586e:	             move.l 332(sp),-(sp)
    5872:	             jsr 6290 <openAndVerify>
    5878:	             lea 20(sp),sp
    587c:	             move.l d0,288(sp)
	if (! fp) return FALSE;
    5880:	         /-- bne.s 5888 <initSludge+0x46>
    5882:	         |   clr.w d0
    5884:	/--------|-- bra.w 5fb0 <initSludge+0x76e>
	if (FGetC (fp)) {
    5888:	|        \-> move.l 288(sp),284(sp)
    588e:	|            move.l 1a7ac <DOSBase>,d0
    5894:	|            movea.l d0,a6
    5896:	|            move.l 284(sp),d1
    589a:	|            jsr -306(a6)
    589e:	|            move.l d0,280(sp)
    58a2:	|            move.l 280(sp),d0
    58a6:	|  /-------- beq.w 5a50 <initSludge+0x20e>
		numBIFNames = get2bytes (fp);
    58aa:	|  |         move.l 288(sp),-(sp)
    58ae:	|  |         jsr 6bc <get2bytes>
    58b4:	|  |         addq.l #4,sp
    58b6:	|  |         move.l d0,1a778 <numBIFNames>
		allBIFNames = AllocVec(numBIFNames,MEMF_ANY);
    58bc:	|  |         move.l 1a778 <numBIFNames>,d0
    58c2:	|  |         move.l d0,276(sp)
    58c6:	|  |         clr.l 272(sp)
    58ca:	|  |         move.l 1a7a4 <SysBase>,d0
    58d0:	|  |         movea.l d0,a6
    58d2:	|  |         move.l 276(sp),d0
    58d6:	|  |         move.l 272(sp),d1
    58da:	|  |         jsr -684(a6)
    58de:	|  |         move.l d0,268(sp)
    58e2:	|  |         move.l 268(sp),d0
    58e6:	|  |         move.l d0,1a734 <allBIFNames>
		if(allBIFNames == 0) return FALSE;
    58ec:	|  |         move.l 1a734 <allBIFNames>,d0
    58f2:	|  |     /-- bne.s 58fa <initSludge+0xb8>
    58f4:	|  |     |   clr.w d0
    58f6:	+--|-----|-- bra.w 5fb0 <initSludge+0x76e>
		for (int fn = 0; fn < numBIFNames; fn ++) {
    58fa:	|  |     \-> clr.l 304(sp)
    58fe:	|  |     /-- bra.s 5924 <initSludge+0xe2>
			allBIFNames[fn] = (char *) readString (fp);
    5900:	|  |  /--|-> move.l 1a734 <allBIFNames>,d1
    5906:	|  |  |  |   move.l 304(sp),d0
    590a:	|  |  |  |   add.l d0,d0
    590c:	|  |  |  |   add.l d0,d0
    590e:	|  |  |  |   movea.l d1,a2
    5910:	|  |  |  |   adda.l d0,a2
    5912:	|  |  |  |   move.l 288(sp),-(sp)
    5916:	|  |  |  |   jsr b02 <readString>
    591c:	|  |  |  |   addq.l #4,sp
    591e:	|  |  |  |   move.l d0,(a2)
		for (int fn = 0; fn < numBIFNames; fn ++) {
    5920:	|  |  |  |   addq.l #1,304(sp)
    5924:	|  |  |  \-> move.l 1a778 <numBIFNames>,d0
    592a:	|  |  |      cmp.l 304(sp),d0
    592e:	|  |  \----- bgt.s 5900 <initSludge+0xbe>
		}
		numUserFunc = get2bytes (fp);
    5930:	|  |         move.l 288(sp),-(sp)
    5934:	|  |         jsr 6bc <get2bytes>
    593a:	|  |         addq.l #4,sp
    593c:	|  |         move.l d0,1a784 <numUserFunc>
		allUserFunc = AllocVec(numUserFunc,MEMF_ANY);
    5942:	|  |         move.l 1a784 <numUserFunc>,d0
    5948:	|  |         move.l d0,264(sp)
    594c:	|  |         clr.l 260(sp)
    5950:	|  |         move.l 1a7a4 <SysBase>,d0
    5956:	|  |         movea.l d0,a6
    5958:	|  |         move.l 264(sp),d0
    595c:	|  |         move.l 260(sp),d1
    5960:	|  |         jsr -684(a6)
    5964:	|  |         move.l d0,256(sp)
    5968:	|  |         move.l 256(sp),d0
    596c:	|  |         move.l d0,1a740 <allUserFunc>
		if( allUserFunc == 0) return FALSE;
    5972:	|  |         move.l 1a740 <allUserFunc>,d0
    5978:	|  |     /-- bne.s 5980 <initSludge+0x13e>
    597a:	|  |     |   clr.w d0
    597c:	+--|-----|-- bra.w 5fb0 <initSludge+0x76e>

		for (int fn = 0; fn < numUserFunc; fn ++) {
    5980:	|  |     \-> clr.l 300(sp)
    5984:	|  |     /-- bra.s 59aa <initSludge+0x168>
			allUserFunc[fn] =   (char *) readString (fp);
    5986:	|  |  /--|-> move.l 1a740 <allUserFunc>,d1
    598c:	|  |  |  |   move.l 300(sp),d0
    5990:	|  |  |  |   add.l d0,d0
    5992:	|  |  |  |   add.l d0,d0
    5994:	|  |  |  |   movea.l d1,a2
    5996:	|  |  |  |   adda.l d0,a2
    5998:	|  |  |  |   move.l 288(sp),-(sp)
    599c:	|  |  |  |   jsr b02 <readString>
    59a2:	|  |  |  |   addq.l #4,sp
    59a4:	|  |  |  |   move.l d0,(a2)
		for (int fn = 0; fn < numUserFunc; fn ++) {
    59a6:	|  |  |  |   addq.l #1,300(sp)
    59aa:	|  |  |  \-> move.l 1a784 <numUserFunc>,d0
    59b0:	|  |  |      cmp.l 300(sp),d0
    59b4:	|  |  \----- bgt.s 5986 <initSludge+0x144>
		}
		if (gameVersion >= VERSION(1,3)) {
    59b6:	|  |         move.l 1a74e <gameVersion>,d0
    59bc:	|  |         cmpi.l #258,d0
    59c2:	|  +-------- ble.w 5a50 <initSludge+0x20e>
			numResourceNames = get2bytes (fp);
    59c6:	|  |         move.l 288(sp),-(sp)
    59ca:	|  |         jsr 6bc <get2bytes>
    59d0:	|  |         addq.l #4,sp
    59d2:	|  |         move.l d0,1a780 <numResourceNames>
			allResourceNames = AllocVec(sizeof(char *) * numResourceNames,MEMF_ANY);
    59d8:	|  |         move.l 1a780 <numResourceNames>,d0
    59de:	|  |         add.l d0,d0
    59e0:	|  |         add.l d0,d0
    59e2:	|  |         move.l d0,252(sp)
    59e6:	|  |         clr.l 248(sp)
    59ea:	|  |         move.l 1a7a4 <SysBase>,d0
    59f0:	|  |         movea.l d0,a6
    59f2:	|  |         move.l 252(sp),d0
    59f6:	|  |         move.l 248(sp),d1
    59fa:	|  |         jsr -684(a6)
    59fe:	|  |         move.l d0,244(sp)
    5a02:	|  |         move.l 244(sp),d0
    5a06:	|  |         move.l d0,1a738 <allResourceNames>
			if(allResourceNames == 0) return FALSE;
    5a0c:	|  |         move.l 1a738 <allResourceNames>,d0
    5a12:	|  |     /-- bne.s 5a1a <initSludge+0x1d8>
    5a14:	|  |     |   clr.w d0
    5a16:	+--|-----|-- bra.w 5fb0 <initSludge+0x76e>

			for (int fn = 0; fn < numResourceNames; fn ++) {
    5a1a:	|  |     \-> clr.l 296(sp)
    5a1e:	|  |     /-- bra.s 5a44 <initSludge+0x202>
				allResourceNames[fn] =  (char *) readString (fp);
    5a20:	|  |  /--|-> move.l 1a738 <allResourceNames>,d1
    5a26:	|  |  |  |   move.l 296(sp),d0
    5a2a:	|  |  |  |   add.l d0,d0
    5a2c:	|  |  |  |   add.l d0,d0
    5a2e:	|  |  |  |   movea.l d1,a2
    5a30:	|  |  |  |   adda.l d0,a2
    5a32:	|  |  |  |   move.l 288(sp),-(sp)
    5a36:	|  |  |  |   jsr b02 <readString>
    5a3c:	|  |  |  |   addq.l #4,sp
    5a3e:	|  |  |  |   move.l d0,(a2)
			for (int fn = 0; fn < numResourceNames; fn ++) {
    5a40:	|  |  |  |   addq.l #1,296(sp)
    5a44:	|  |  |  \-> move.l 1a780 <numResourceNames>,d0
    5a4a:	|  |  |      cmp.l 296(sp),d0
    5a4e:	|  |  \----- bgt.s 5a20 <initSludge+0x1de>
			}
		}
	}

	input.mouseX = 129;
    5a50:	|  \-------> move.l #129,1a760 <input+0xa>
	input.mouseY = 100;
    5a5a:	|            moveq #100,d0
    5a5c:	|            move.l d0,1a764 <input+0xe>
	winWidth = get2bytes (fp);
    5a62:	|            move.l 288(sp),-(sp)
    5a66:	|            jsr 6bc <get2bytes>
    5a6c:	|            addq.l #4,sp
    5a6e:	|            move.l d0,1a6f8 <winWidth>
	winHeight = get2bytes (fp);
    5a74:	|            move.l 288(sp),-(sp)
    5a78:	|            jsr 6bc <get2bytes>
    5a7e:	|            addq.l #4,sp
    5a80:	|            move.l d0,1a6fc <winHeight>
	specialSettings = FGetC (fp);
    5a86:	|            move.l 288(sp),240(sp)
    5a8c:	|            move.l 1a7ac <DOSBase>,d0
    5a92:	|            movea.l d0,a6
    5a94:	|            move.l 240(sp),d1
    5a98:	|            jsr -306(a6)
    5a9c:	|            move.l d0,236(sp)
    5aa0:	|            move.l 236(sp),d0
    5aa4:	|            move.l d0,1a788 <specialSettings>

	desiredfps = 1000/FGetC (fp);
    5aaa:	|            move.l 288(sp),232(sp)
    5ab0:	|            move.l 1a7ac <DOSBase>,d0
    5ab6:	|            movea.l d0,a6
    5ab8:	|            move.l 232(sp),d1
    5abc:	|            jsr -306(a6)
    5ac0:	|            move.l d0,228(sp)
    5ac4:	|            move.l 228(sp),d0
    5ac8:	|            move.l d0,-(sp)
    5aca:	|            pea 3e8 <encodeFilename+0xea>
    5ace:	|            jsr 17a46 <__divsi3>
    5ad4:	|            addq.l #8,sp
    5ad6:	|            move.l d0,1a132 <desiredfps>

	readString(fp); //Need to keep reading to stay on track. But the comented line below looks wrong.
    5adc:	|            move.l 288(sp),-(sp)
    5ae0:	|            jsr b02 <readString>
    5ae6:	|            addq.l #4,sp
	//FreeVec(readString (fp));

	ULONG blocks_read = FRead( fp, &fileTime, sizeof (FILETIME), 1 ); 
    5ae8:	|            move.l 288(sp),224(sp)
    5aee:	|            move.l #108358,220(sp)
    5af6:	|            moveq #8,d1
    5af8:	|            move.l d1,216(sp)
    5afc:	|            moveq #1,d0
    5afe:	|            move.l d0,212(sp)
    5b02:	|            move.l 1a7ac <DOSBase>,d0
    5b08:	|            movea.l d0,a6
    5b0a:	|            move.l 224(sp),d1
    5b0e:	|            move.l 220(sp),d2
    5b12:	|            move.l 216(sp),d3
    5b16:	|            move.l 212(sp),d4
    5b1a:	|            jsr -324(a6)
    5b1e:	|            move.l d0,208(sp)
    5b22:	|            move.l 208(sp),d0
    5b26:	|            move.l d0,204(sp)
	if (blocks_read != 1) {
    5b2a:	|            moveq #1,d1
    5b2c:	|            cmp.l 204(sp),d1
    5b30:	|        /-- beq.s 5b40 <initSludge+0x2fe>
		KPrintF("Reading error in initSludge.\n");
    5b32:	|        |   pea 18795 <PutChar+0xcb7>
    5b38:	|        |   jsr 1703c <KPrintF>
    5b3e:	|        |   addq.l #4,sp
	}

	char * dataFol = (gameVersion >= VERSION(1,3)) ? readString(fp) : joinStrings ("", "");
    5b40:	|        \-> move.l 1a74e <gameVersion>,d0
    5b46:	|            cmpi.l #258,d0
    5b4c:	|        /-- ble.s 5b5c <initSludge+0x31a>
    5b4e:	|        |   move.l 288(sp),-(sp)
    5b52:	|        |   jsr b02 <readString>
    5b58:	|        |   addq.l #4,sp
    5b5a:	|     /--|-- bra.s 5b70 <initSludge+0x32e>
    5b5c:	|     |  \-> pea 187b3 <PutChar+0xcd5>
    5b62:	|     |      pea 187b3 <PutChar+0xcd5>
    5b68:	|     |      jsr 13b1c <joinStrings>
    5b6e:	|     |      addq.l #8,sp
    5b70:	|     \----> move.l d0,200(sp)

	gameSettings.numLanguages = (gameVersion >= VERSION(1,3)) ? (FGetC (fp)) : 0;
    5b74:	|            move.l 1a74e <gameVersion>,d0
    5b7a:	|            cmpi.l #258,d0
    5b80:	|     /----- ble.s 5ba2 <initSludge+0x360>
    5b82:	|     |      move.l 288(sp),196(sp)
    5b88:	|     |      move.l 1a7ac <DOSBase>,d0
    5b8e:	|     |      movea.l d0,a6
    5b90:	|     |      move.l 196(sp),d1
    5b94:	|     |      jsr -306(a6)
    5b98:	|     |      move.l d0,192(sp)
    5b9c:	|     |      move.l 192(sp),d0
    5ba0:	|     |  /-- bra.s 5ba4 <initSludge+0x362>
    5ba2:	|     \--|-> moveq #0,d0
    5ba4:	|        \-> move.l d0,1a884 <gameSettings+0x4>
	makeLanguageTable (fp);
    5baa:	|            move.l 288(sp),-(sp)
    5bae:	|            jsr 134d2 <makeLanguageTable>
    5bb4:	|            addq.l #4,sp

	if (gameVersion >= VERSION(1,6))
    5bb6:	|            move.l 1a74e <gameVersion>,d0
    5bbc:	|            cmpi.l #261,d0
    5bc2:	|        /-- ble.s 5c10 <initSludge+0x3ce>
	{
		FGetC(fp);
    5bc4:	|        |   move.l 288(sp),188(sp)
    5bca:	|        |   move.l 1a7ac <DOSBase>,d0
    5bd0:	|        |   movea.l d0,a6
    5bd2:	|        |   move.l 188(sp),d1
    5bd6:	|        |   jsr -306(a6)
    5bda:	|        |   move.l d0,184(sp)
		// aaLoad
		FGetC (fp);
    5bde:	|        |   move.l 288(sp),180(sp)
    5be4:	|        |   move.l 1a7ac <DOSBase>,d0
    5bea:	|        |   movea.l d0,a6
    5bec:	|        |   move.l 180(sp),d1
    5bf0:	|        |   jsr -306(a6)
    5bf4:	|        |   move.l d0,176(sp)
		getFloat (fp);
    5bf8:	|        |   move.l 288(sp),-(sp)
    5bfc:	|        |   jsr 7d8 <getFloat>
    5c02:	|        |   addq.l #4,sp
		getFloat (fp);
    5c04:	|        |   move.l 288(sp),-(sp)
    5c08:	|        |   jsr 7d8 <getFloat>
    5c0e:	|        |   addq.l #4,sp
	}

	char * checker = readString (fp);
    5c10:	|        \-> move.l 288(sp),-(sp)
    5c14:	|            jsr b02 <readString>
    5c1a:	|            addq.l #4,sp
    5c1c:	|            move.l d0,172(sp)

	if (strcmp (checker, "okSoFar")) {
    5c20:	|            pea 187b4 <PutChar+0xcd6>
    5c26:	|            move.l 176(sp),-(sp)
    5c2a:	|            jsr 13a9c <strcmp>
    5c30:	|            addq.l #8,sp
    5c32:	|            tst.l d0
    5c34:	|        /-- beq.s 5c3c <initSludge+0x3fa>
		return FALSE;
    5c36:	|        |   clr.w d0
    5c38:	+--------|-- bra.w 5fb0 <initSludge+0x76e>
	}
	FreeVec( checker);
    5c3c:	|        \-> move.l 172(sp),168(sp)
    5c42:	|            move.l 1a7a4 <SysBase>,d0
    5c48:	|            movea.l d0,a6
    5c4a:	|            movea.l 168(sp),a1
    5c4e:	|            jsr -690(a6)
	checker = NULL;
    5c52:	|            clr.l 172(sp)

    unsigned char customIconLogo = FGetC (fp);
    5c56:	|            move.l 288(sp),164(sp)
    5c5c:	|            move.l 1a7ac <DOSBase>,d0
    5c62:	|            movea.l d0,a6
    5c64:	|            move.l 164(sp),d1
    5c68:	|            jsr -306(a6)
    5c6c:	|            move.l d0,160(sp)
    5c70:	|            move.l 160(sp),d0
    5c74:	|            move.b d0,159(sp)

	if (customIconLogo & 1) {
    5c78:	|            moveq #0,d0
    5c7a:	|            move.b 159(sp),d0
    5c7e:	|            moveq #1,d1
    5c80:	|            and.l d1,d0
    5c82:	|        /-- beq.s 5cda <initSludge+0x498>
		// There is an icon - read it!
		Write(Output(), (APTR)"initsludge:Game Icon not supported on this plattform.\n", 54);
    5c84:	|        |   move.l 1a7ac <DOSBase>,d0
    5c8a:	|        |   movea.l d0,a6
    5c8c:	|        |   jsr -60(a6)
    5c90:	|        |   move.l d0,38(sp)
    5c94:	|        |   move.l 38(sp),d0
    5c98:	|        |   move.l d0,34(sp)
    5c9c:	|        |   move.l #100284,30(sp)
    5ca4:	|        |   moveq #54,d0
    5ca6:	|        |   move.l d0,26(sp)
    5caa:	|        |   move.l 1a7ac <DOSBase>,d0
    5cb0:	|        |   movea.l d0,a6
    5cb2:	|        |   move.l 34(sp),d1
    5cb6:	|        |   move.l 30(sp),d2
    5cba:	|        |   move.l 26(sp),d3
    5cbe:	|        |   jsr -48(a6)
    5cc2:	|        |   move.l d0,22(sp)
		KPrintF("initsludge: Game Icon not supported on this plattform.\n");
    5cc6:	|        |   pea 187f3 <PutChar+0xd15>
    5ccc:	|        |   jsr 1703c <KPrintF>
    5cd2:	|        |   addq.l #4,sp
		return FALSE;
    5cd4:	|        |   clr.w d0
    5cd6:	+--------|-- bra.w 5fb0 <initSludge+0x76e>
	}

	numGlobals = get2bytes (fp);
    5cda:	|        \-> move.l 288(sp),-(sp)
    5cde:	|            jsr 6bc <get2bytes>
    5ce4:	|            addq.l #4,sp
    5ce6:	|            move.l d0,1a77c <numGlobals>

	globalVars = AllocVec( sizeof(struct variable) * numGlobals,MEMF_ANY);
    5cec:	|            move.l 1a77c <numGlobals>,d0
    5cf2:	|            lsl.l #3,d0
    5cf4:	|            move.l d0,154(sp)
    5cf8:	|            clr.l 150(sp)
    5cfc:	|            move.l 1a7a4 <SysBase>,d0
    5d02:	|            movea.l d0,a6
    5d04:	|            move.l 154(sp),d0
    5d08:	|            move.l 150(sp),d1
    5d0c:	|            jsr -684(a6)
    5d10:	|            move.l d0,146(sp)
    5d14:	|            move.l 146(sp),d0
    5d18:	|            move.l d0,1a752 <globalVars>
	if(globalVars == 0 && numGlobals > 0) {
    5d1e:	|            move.l 1a752 <globalVars>,d0
    5d24:	|        /-- bne.s 5d42 <initSludge+0x500>
    5d26:	|        |   move.l 1a77c <numGlobals>,d0
    5d2c:	|        +-- ble.s 5d42 <initSludge+0x500>
		KPrintF("initsludge: Cannot allocate memory for globalvars\n");
    5d2e:	|        |   pea 1882b <PutChar+0xd4d>
    5d34:	|        |   jsr 1703c <KPrintF>
    5d3a:	|        |   addq.l #4,sp
		return FALSE;
    5d3c:	|        |   clr.w d0
    5d3e:	+--------|-- bra.w 5fb0 <initSludge+0x76e>
	}		 
	for (a = 0; a < numGlobals; a ++) initVarNew (globalVars[a]);
    5d42:	|        \-> clr.l 308(sp)
    5d46:	|        /-- bra.s 5d5e <initSludge+0x51c>
    5d48:	|     /--|-> move.l 1a752 <globalVars>,d1
    5d4e:	|     |  |   move.l 308(sp),d0
    5d52:	|     |  |   lsl.l #3,d0
    5d54:	|     |  |   movea.l d1,a0
    5d56:	|     |  |   adda.l d0,a0
    5d58:	|     |  |   clr.l (a0)
    5d5a:	|     |  |   addq.l #1,308(sp)
    5d5e:	|     |  \-> move.l 1a77c <numGlobals>,d0
    5d64:	|     |      cmp.l 308(sp),d0
    5d68:	|     \----- bgt.s 5d48 <initSludge+0x506>

	setFileIndices (fp, gameSettings.numLanguages, 0);
    5d6a:	|            move.l 1a884 <gameSettings+0x4>,d0
    5d70:	|            clr.l -(sp)
    5d72:	|            move.l d0,-(sp)
    5d74:	|            move.l 296(sp),-(sp)
    5d78:	|            jsr 6d7e <setFileIndices>
    5d7e:	|            lea 12(sp),sp

	char * gameNameOrig = getNumberedString(1);	
    5d82:	|            pea 1 <_start+0x1>
    5d86:	|            jsr 6a38 <getNumberedString>
    5d8c:	|            addq.l #4,sp
    5d8e:	|            move.l d0,142(sp)
	char * gameName = encodeFilename (gameNameOrig);
    5d92:	|            move.l 142(sp),-(sp)
    5d96:	|            jsr 2fe <encodeFilename>
    5d9c:	|            addq.l #4,sp
    5d9e:	|            move.l d0,138(sp)

	FreeVec(gameNameOrig);
    5da2:	|            move.l 142(sp),134(sp)
    5da8:	|            move.l 1a7a4 <SysBase>,d0
    5dae:	|            movea.l d0,a6
    5db0:	|            movea.l 134(sp),a1
    5db4:	|            jsr -690(a6)

	BPTR lock = CreateDir( gameName );
    5db8:	|            move.l 138(sp),130(sp)
    5dbe:	|            move.l 1a7ac <DOSBase>,d0
    5dc4:	|            movea.l d0,a6
    5dc6:	|            move.l 130(sp),d1
    5dca:	|            jsr -120(a6)
    5dce:	|            move.l d0,126(sp)
    5dd2:	|            move.l 126(sp),d0
    5dd6:	|            move.l d0,292(sp)
	if(lock == 0) {
    5dda:	|        /-- bne.s 5e08 <initSludge+0x5c6>
		//Directory does already exist
		lock = Lock(gameName, ACCESS_READ);
    5ddc:	|        |   move.l 138(sp),122(sp)
    5de2:	|        |   moveq #-2,d1
    5de4:	|        |   move.l d1,118(sp)
    5de8:	|        |   move.l 1a7ac <DOSBase>,d0
    5dee:	|        |   movea.l d0,a6
    5df0:	|        |   move.l 122(sp),d1
    5df4:	|        |   move.l 118(sp),d2
    5df8:	|        |   jsr -84(a6)
    5dfc:	|        |   move.l d0,114(sp)
    5e00:	|        |   move.l 114(sp),d0
    5e04:	|        |   move.l d0,292(sp)
	}

	if (!CurrentDir(lock)) {
    5e08:	|        \-> move.l 292(sp),110(sp)
    5e0e:	|            move.l 1a7ac <DOSBase>,d0
    5e14:	|            movea.l d0,a6
    5e16:	|            move.l 110(sp),d1
    5e1a:	|            jsr -126(a6)
    5e1e:	|            move.l d0,106(sp)
    5e22:	|            move.l 106(sp),d0
    5e26:	|        /-- bne.s 5e82 <initSludge+0x640>
		KPrintF("initsludge: Failed changing to directory %s\n", gameName);
    5e28:	|        |   move.l 138(sp),-(sp)
    5e2c:	|        |   pea 1885e <PutChar+0xd80>
    5e32:	|        |   jsr 1703c <KPrintF>
    5e38:	|        |   addq.l #8,sp
		Write(Output(), (APTR)"initsludge:Failed changing to directory\n", 40);
    5e3a:	|        |   move.l 1a7ac <DOSBase>,d0
    5e40:	|        |   movea.l d0,a6
    5e42:	|        |   jsr -60(a6)
    5e46:	|        |   move.l d0,58(sp)
    5e4a:	|        |   move.l 58(sp),d0
    5e4e:	|        |   move.l d0,54(sp)
    5e52:	|        |   move.l #100491,50(sp)
    5e5a:	|        |   moveq #40,d0
    5e5c:	|        |   move.l d0,46(sp)
    5e60:	|        |   move.l 1a7ac <DOSBase>,d0
    5e66:	|        |   movea.l d0,a6
    5e68:	|        |   move.l 54(sp),d1
    5e6c:	|        |   move.l 50(sp),d2
    5e70:	|        |   move.l 46(sp),d3
    5e74:	|        |   jsr -48(a6)
    5e78:	|        |   move.l d0,42(sp)
		return FALSE;
    5e7c:	|        |   clr.w d0
    5e7e:	+--------|-- bra.w 5fb0 <initSludge+0x76e>
	}

	FreeVec(gameName);
    5e82:	|        \-> move.l 138(sp),102(sp)
    5e88:	|            move.l 1a7a4 <SysBase>,d0
    5e8e:	|            movea.l d0,a6
    5e90:	|            movea.l 102(sp),a1
    5e94:	|            jsr -690(a6)

	readIniFile (filename);
    5e98:	|            move.l 316(sp),-(sp)
    5e9c:	|            jsr 13606 <readIniFile>
    5ea2:	|            addq.l #4,sp

	// Now set file indices properly to the chosen language.
	languageNum = getLanguageForFileB ();
    5ea4:	|            jsr 133d8 <getLanguageForFileB>
    5eaa:	|            move.l d0,1a120 <languageNum>
	if (languageNum < 0) KPrintF("Can't find the translation data specified!");
    5eb0:	|            move.l 1a120 <languageNum>,d0
    5eb6:	|        /-- bpl.s 5ec6 <initSludge+0x684>
    5eb8:	|        |   pea 188b4 <PutChar+0xdd6>
    5ebe:	|        |   jsr 1703c <KPrintF>
    5ec4:	|        |   addq.l #4,sp
	setFileIndices (NULL, gameSettings.numLanguages, languageNum);
    5ec6:	|        \-> move.l 1a120 <languageNum>,d0
    5ecc:	|            move.l d0,d1
    5ece:	|            move.l 1a884 <gameSettings+0x4>,d0
    5ed4:	|            move.l d1,-(sp)
    5ed6:	|            move.l d0,-(sp)
    5ed8:	|            clr.l -(sp)
    5eda:	|            jsr 6d7e <setFileIndices>
    5ee0:	|            lea 12(sp),sp

	if (dataFol[0]) {
    5ee4:	|            movea.l 200(sp),a0
    5ee8:	|            move.b (a0),d0
    5eea:	|     /----- beq.w 5f94 <initSludge+0x752>
		char *dataFolder = encodeFilename(dataFol);
    5eee:	|     |      move.l 200(sp),-(sp)
    5ef2:	|     |      jsr 2fe <encodeFilename>
    5ef8:	|     |      addq.l #4,sp
    5efa:	|     |      move.l d0,98(sp)
		lock = CreateDir( dataFolder );
    5efe:	|     |      move.l 98(sp),94(sp)
    5f04:	|     |      move.l 1a7ac <DOSBase>,d0
    5f0a:	|     |      movea.l d0,a6
    5f0c:	|     |      move.l 94(sp),d1
    5f10:	|     |      jsr -120(a6)
    5f14:	|     |      move.l d0,90(sp)
    5f18:	|     |      move.l 90(sp),d0
    5f1c:	|     |      move.l d0,292(sp)
		if(lock == 0) {
    5f20:	|     |  /-- bne.s 5f4e <initSludge+0x70c>
			//Directory does already exist
			lock = Lock(dataFolder, ACCESS_READ);		
    5f22:	|     |  |   move.l 98(sp),86(sp)
    5f28:	|     |  |   moveq #-2,d1
    5f2a:	|     |  |   move.l d1,82(sp)
    5f2e:	|     |  |   move.l 1a7ac <DOSBase>,d0
    5f34:	|     |  |   movea.l d0,a6
    5f36:	|     |  |   move.l 86(sp),d1
    5f3a:	|     |  |   move.l 82(sp),d2
    5f3e:	|     |  |   jsr -84(a6)
    5f42:	|     |  |   move.l d0,78(sp)
    5f46:	|     |  |   move.l 78(sp),d0
    5f4a:	|     |  |   move.l d0,292(sp)
		}


		if (!CurrentDir(lock)) {
    5f4e:	|     |  \-> move.l 292(sp),74(sp)
    5f54:	|     |      move.l 1a7ac <DOSBase>,d0
    5f5a:	|     |      movea.l d0,a6
    5f5c:	|     |      move.l 74(sp),d1
    5f60:	|     |      jsr -126(a6)
    5f64:	|     |      move.l d0,70(sp)
    5f68:	|     |      move.l 70(sp),d0
    5f6c:	|     |  /-- bne.s 5f7e <initSludge+0x73c>
			(Output(), (APTR)"initsludge:This game's data folder is inaccessible!\n", 52);
    5f6e:	|     |  |   move.l 1a7ac <DOSBase>,d0
    5f74:	|     |  |   movea.l d0,a6
    5f76:	|     |  |   jsr -60(a6)
    5f7a:	|     |  |   move.l d0,66(sp)
		}
		FreeVec(dataFolder);
    5f7e:	|     |  \-> move.l 98(sp),62(sp)
    5f84:	|     |      move.l 1a7a4 <SysBase>,d0
    5f8a:	|     |      movea.l d0,a6
    5f8c:	|     |      movea.l 62(sp),a1
    5f90:	|     |      jsr -690(a6)
	}

 	positionStatus (10, winHeight - 15);
    5f94:	|     \----> movea.l 1a6fc <winHeight>,a0
    5f9a:	|            lea -15(a0),a0
    5f9e:	|            move.l a0,d0
    5fa0:	|            move.l d0,-(sp)
    5fa2:	|            pea a <_start+0xa>
    5fa6:	|            jsr 77be <positionStatus>
    5fac:	|            addq.l #8,sp

	return TRUE;
    5fae:	|            moveq #1,d0
}
    5fb0:	\----------> movem.l (sp)+,d2-d4/a2/a6
    5fb4:	             lea 292(sp),sp
    5fb8:	             rts

00005fba <killSpeechTimers>:

void killSpeechTimers () {
    5fba:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    5fbc:	          move.l 1a73c <allRunningFunctions>,(sp)

	while (thisFunction) {
    5fc2:	   /----- bra.s 5fee <killSpeechTimers+0x34>
		if (thisFunction -> freezerLevel == 0 && thisFunction -> isSpeech && thisFunction -> timeLeft) {
    5fc4:	/--|----> movea.l (sp),a0
    5fc6:	|  |      move.b 56(a0),d0
    5fca:	|  |  /-- bne.s 5fe8 <killSpeechTimers+0x2e>
    5fcc:	|  |  |   movea.l (sp),a0
    5fce:	|  |  |   move.w 50(a0),d0
    5fd2:	|  |  +-- beq.s 5fe8 <killSpeechTimers+0x2e>
    5fd4:	|  |  |   movea.l (sp),a0
    5fd6:	|  |  |   move.l 12(a0),d0
    5fda:	|  |  +-- beq.s 5fe8 <killSpeechTimers+0x2e>
			thisFunction -> timeLeft = 0;
    5fdc:	|  |  |   movea.l (sp),a0
    5fde:	|  |  |   clr.l 12(a0)
			thisFunction -> isSpeech = FALSE;
    5fe2:	|  |  |   movea.l (sp),a0
    5fe4:	|  |  |   clr.w 50(a0)
		}
		thisFunction = thisFunction -> next;
    5fe8:	|  |  \-> movea.l (sp),a0
    5fea:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    5fee:	|  \----> tst.l (sp)
    5ff0:	\-------- bne.s 5fc4 <killSpeechTimers+0xa>
	}

	killAllSpeech ();
    5ff2:	          jsr 7cfc <killAllSpeech>
}
    5ff8:	          nop
    5ffa:	          addq.l #4,sp
    5ffc:	          rts

00005ffe <loadFunctionCode>:

BOOL loadFunctionCode (struct loadedFunction * newFunc) {
    5ffe:	             lea -52(sp),sp
    6002:	             move.l a6,-(sp)
	unsigned int numLines, numLinesRead;
	int a;

	if (! openSubSlice (newFunc -> originalNumber)) return FALSE;
    6004:	             movea.l 60(sp),a0
    6008:	             move.l (a0),d0
    600a:	             move.l d0,-(sp)
    600c:	             jsr 6cbe <openSubSlice>
    6012:	             addq.l #4,sp
    6014:	             tst.w d0
    6016:	         /-- bne.s 601e <loadFunctionCode+0x20>
    6018:	         |   clr.w d0
    601a:	/--------|-- bra.w 61e8 <loadFunctionCode+0x1ea>
	

	newFunc-> unfreezable	= FGetC (bigDataFile);
    601e:	|        \-> move.l 1a78c <bigDataFile>,44(sp)
    6026:	|            move.l 1a7ac <DOSBase>,d0
    602c:	|            movea.l d0,a6
    602e:	|            move.l 44(sp),d1
    6032:	|            jsr -306(a6)
    6036:	|            move.l d0,40(sp)
    603a:	|            move.l 40(sp),d0
    603e:	|            move.l d0,d0
    6040:	|            movea.l 60(sp),a0
    6044:	|            move.w d0,52(a0)
	numLines				= get2bytes (bigDataFile);
    6048:	|            move.l 1a78c <bigDataFile>,d0
    604e:	|            move.l d0,-(sp)
    6050:	|            jsr 6bc <get2bytes>
    6056:	|            addq.l #4,sp
    6058:	|            move.l d0,36(sp)
	newFunc -> numArgs		= get2bytes (bigDataFile);
    605c:	|            move.l 1a78c <bigDataFile>,d0
    6062:	|            move.l d0,-(sp)
    6064:	|            jsr 6bc <get2bytes>
    606a:	|            addq.l #4,sp
    606c:	|            movea.l 60(sp),a0
    6070:	|            move.l d0,16(a0)
	newFunc -> numLocals	= get2bytes (bigDataFile);
    6074:	|            move.l 1a78c <bigDataFile>,d0
    607a:	|            move.l d0,-(sp)
    607c:	|            jsr 6bc <get2bytes>
    6082:	|            addq.l #4,sp
    6084:	|            movea.l 60(sp),a0
    6088:	|            move.l d0,8(a0)
	newFunc -> compiledLines = AllocVec( sizeof(struct lineOfCode) * numLines,MEMF_ANY);
    608c:	|            move.l 36(sp),d0
    6090:	|            lsl.l #3,d0
    6092:	|            move.l d0,32(sp)
    6096:	|            clr.l 28(sp)
    609a:	|            move.l 1a7a4 <SysBase>,d0
    60a0:	|            movea.l d0,a6
    60a2:	|            move.l 32(sp),d0
    60a6:	|            move.l 28(sp),d1
    60aa:	|            jsr -684(a6)
    60ae:	|            move.l d0,24(sp)
    60b2:	|            move.l 24(sp),d0
    60b6:	|            movea.l 60(sp),a0
    60ba:	|            move.l d0,4(a0)
	if (! newFunc -> compiledLines) {
    60be:	|            movea.l 60(sp),a0
    60c2:	|            move.l 4(a0),d0
    60c6:	|        /-- bne.s 60dc <loadFunctionCode+0xde>
		KPrintF("loadFunctionCode: cannot allocate memory");
    60c8:	|        |   pea 188df <PutChar+0xe01>
    60ce:	|        |   jsr 1703c <KPrintF>
    60d4:	|        |   addq.l #4,sp
		return FALSE;
    60d6:	|        |   clr.w d0
    60d8:	+--------|-- bra.w 61e8 <loadFunctionCode+0x1ea>
	}

	for (numLinesRead = 0; numLinesRead < numLines; numLinesRead ++) {
    60dc:	|        \-> clr.l 52(sp)
    60e0:	|        /-- bra.s 6142 <loadFunctionCode+0x144>
		newFunc -> compiledLines[numLinesRead].theCommand = (enum sludgeCommand) FGetC(bigDataFile);
    60e2:	|     /--|-> move.l 1a78c <bigDataFile>,8(sp)
    60ea:	|     |  |   move.l 1a7ac <DOSBase>,d0
    60f0:	|     |  |   movea.l d0,a6
    60f2:	|     |  |   move.l 8(sp),d1
    60f6:	|     |  |   jsr -306(a6)
    60fa:	|     |  |   move.l d0,4(sp)
    60fe:	|     |  |   move.l 4(sp),d1
    6102:	|     |  |   movea.l 60(sp),a0
    6106:	|     |  |   movea.l 4(a0),a0
    610a:	|     |  |   move.l 52(sp),d0
    610e:	|     |  |   lsl.l #3,d0
    6110:	|     |  |   adda.l d0,a0
    6112:	|     |  |   move.l d1,d0
    6114:	|     |  |   move.l d0,(a0)
		newFunc -> compiledLines[numLinesRead].param = get2bytes (bigDataFile);
    6116:	|     |  |   move.l 1a78c <bigDataFile>,d0
    611c:	|     |  |   move.l d0,-(sp)
    611e:	|     |  |   jsr 6bc <get2bytes>
    6124:	|     |  |   addq.l #4,sp
    6126:	|     |  |   move.l d0,d1
    6128:	|     |  |   movea.l 60(sp),a0
    612c:	|     |  |   movea.l 4(a0),a0
    6130:	|     |  |   move.l 52(sp),d0
    6134:	|     |  |   lsl.l #3,d0
    6136:	|     |  |   adda.l d0,a0
    6138:	|     |  |   move.l d1,d0
    613a:	|     |  |   move.l d0,4(a0)
	for (numLinesRead = 0; numLinesRead < numLines; numLinesRead ++) {
    613e:	|     |  |   addq.l #1,52(sp)
    6142:	|     |  \-> move.l 52(sp),d0
    6146:	|     |      cmp.l 36(sp),d0
    614a:	|     \----- bcs.s 60e2 <loadFunctionCode+0xe4>
	}

	finishAccess ();
    614c:	|            jsr 6a2e <finishAccess>

	// Now we need to reserve memory for the local variables
	if(newFunc->numLocals > 0) {
    6152:	|            movea.l 60(sp),a0
    6156:	|            move.l 8(a0),d0
    615a:	|  /-------- ble.w 61de <loadFunctionCode+0x1e0>
		newFunc -> localVars = AllocVec( sizeof(struct variable) * newFunc->numLocals,MEMF_ANY);
    615e:	|  |         movea.l 60(sp),a0
    6162:	|  |         move.l 8(a0),d0
    6166:	|  |         lsl.l #3,d0
    6168:	|  |         move.l d0,20(sp)
    616c:	|  |         clr.l 16(sp)
    6170:	|  |         move.l 1a7a4 <SysBase>,d0
    6176:	|  |         movea.l d0,a6
    6178:	|  |         move.l 20(sp),d0
    617c:	|  |         move.l 16(sp),d1
    6180:	|  |         jsr -684(a6)
    6184:	|  |         move.l d0,12(sp)
    6188:	|  |         move.l 12(sp),d0
    618c:	|  |         movea.l 60(sp),a0
    6190:	|  |         move.l d0,20(a0)
		if (!newFunc -> localVars) {
    6194:	|  |         movea.l 60(sp),a0
    6198:	|  |         move.l 20(a0),d0
    619c:	|  |     /-- bne.s 61b0 <loadFunctionCode+0x1b2>
			KPrintF("loadFunctionCode: cannot allocate memory");
    619e:	|  |     |   pea 188df <PutChar+0xe01>
    61a4:	|  |     |   jsr 1703c <KPrintF>
    61aa:	|  |     |   addq.l #4,sp
			return FALSE;
    61ac:	|  |     |   clr.w d0
    61ae:	+--|-----|-- bra.s 61e8 <loadFunctionCode+0x1ea>
		}

		for (a = 0; a < newFunc -> numLocals; a ++) {
    61b0:	|  |     \-> clr.l 48(sp)
    61b4:	|  |     /-- bra.s 61ce <loadFunctionCode+0x1d0>
			initVarNew (newFunc -> localVars[a]);
    61b6:	|  |  /--|-> movea.l 60(sp),a0
    61ba:	|  |  |  |   move.l 20(a0),d1
    61be:	|  |  |  |   move.l 48(sp),d0
    61c2:	|  |  |  |   lsl.l #3,d0
    61c4:	|  |  |  |   movea.l d1,a0
    61c6:	|  |  |  |   adda.l d0,a0
    61c8:	|  |  |  |   clr.l (a0)
		for (a = 0; a < newFunc -> numLocals; a ++) {
    61ca:	|  |  |  |   addq.l #1,48(sp)
    61ce:	|  |  |  \-> movea.l 60(sp),a0
    61d2:	|  |  |      move.l 8(a0),d0
    61d6:	|  |  |      cmp.l 48(sp),d0
    61da:	|  |  \----- bgt.s 61b6 <loadFunctionCode+0x1b8>
    61dc:	|  |     /-- bra.s 61e6 <loadFunctionCode+0x1e8>
		}
	} else
	{
		newFunc->numLocals = NULL;
    61de:	|  \-----|-> movea.l 60(sp),a0
    61e2:	|        |   clr.l 8(a0)
	}
	return TRUE;
    61e6:	|        \-> moveq #1,d0
}
    61e8:	\----------> movea.l (sp)+,a6
    61ea:	             lea 52(sp),sp
    61ee:	             rts

000061f0 <loadHandlers>:

void loadHandlers (BPTR fp) {
    61f0:	move.l a2,-(sp)
	currentEvents -> leftMouseFunction		= get2bytes (fp);
    61f2:	movea.l 1a11c <currentEvents>,a2
    61f8:	move.l 8(sp),-(sp)
    61fc:	jsr 6bc <get2bytes>
    6202:	addq.l #4,sp
    6204:	move.l d0,(a2)
	currentEvents -> leftMouseUpFunction	= get2bytes (fp);
    6206:	movea.l 1a11c <currentEvents>,a2
    620c:	move.l 8(sp),-(sp)
    6210:	jsr 6bc <get2bytes>
    6216:	addq.l #4,sp
    6218:	move.l d0,4(a2)
	currentEvents -> rightMouseFunction		= get2bytes (fp);
    621c:	movea.l 1a11c <currentEvents>,a2
    6222:	move.l 8(sp),-(sp)
    6226:	jsr 6bc <get2bytes>
    622c:	addq.l #4,sp
    622e:	move.l d0,8(a2)
	currentEvents -> rightMouseUpFunction	= get2bytes (fp);
    6232:	movea.l 1a11c <currentEvents>,a2
    6238:	move.l 8(sp),-(sp)
    623c:	jsr 6bc <get2bytes>
    6242:	addq.l #4,sp
    6244:	move.l d0,12(a2)
	currentEvents -> moveMouseFunction		= get2bytes (fp);
    6248:	movea.l 1a11c <currentEvents>,a2
    624e:	move.l 8(sp),-(sp)
    6252:	jsr 6bc <get2bytes>
    6258:	addq.l #4,sp
    625a:	move.l d0,16(a2)
	currentEvents -> focusFunction			= get2bytes (fp);
    625e:	movea.l 1a11c <currentEvents>,a2
    6264:	move.l 8(sp),-(sp)
    6268:	jsr 6bc <get2bytes>
    626e:	addq.l #4,sp
    6270:	move.l d0,20(a2)
	currentEvents -> spaceFunction			= get2bytes (fp);
    6274:	movea.l 1a11c <currentEvents>,a2
    627a:	move.l 8(sp),-(sp)
    627e:	jsr 6bc <get2bytes>
    6284:	addq.l #4,sp
    6286:	move.l d0,24(a2)
}
    628a:	nop
    628c:	movea.l (sp)+,a2
    628e:	rts

00006290 <openAndVerify>:

BPTR openAndVerify (char * filename, char extra1, char extra2, const char * er, int *fileVersion) {
    6290:	       lea -312(sp),sp
    6294:	       movem.l d2-d3/a6,-(sp)
    6298:	       move.l 332(sp),d1
    629c:	       move.l 336(sp),d0
    62a0:	       move.b d1,d1
    62a2:	       move.b d1,16(sp)
    62a6:	       move.b d0,d0
    62a8:	       move.b d0,14(sp)
	BPTR fp = Open(filename,MODE_OLDFILE);
    62ac:	       move.l 328(sp),318(sp)
    62b2:	       move.l #1005,314(sp)
    62ba:	       move.l 1a7ac <DOSBase>,d0
    62c0:	       movea.l d0,a6
    62c2:	       move.l 318(sp),d1
    62c6:	       move.l 314(sp),d2
    62ca:	       jsr -30(a6)
    62ce:	       move.l d0,310(sp)
    62d2:	       move.l 310(sp),d0
    62d6:	       move.l d0,306(sp)

	if (! fp) {
    62da:	   /-- bne.s 6336 <openAndVerify+0xa6>
		Write(Output(), (APTR)"openAndVerify: Can't open file\n", 31);
    62dc:	   |   move.l 1a7ac <DOSBase>,d0
    62e2:	   |   movea.l d0,a6
    62e4:	   |   jsr -60(a6)
    62e8:	   |   move.l d0,154(sp)
    62ec:	   |   move.l 154(sp),d0
    62f0:	   |   move.l d0,150(sp)
    62f4:	   |   move.l #100616,146(sp)
    62fc:	   |   moveq #31,d0
    62fe:	   |   move.l d0,142(sp)
    6302:	   |   move.l 1a7ac <DOSBase>,d0
    6308:	   |   movea.l d0,a6
    630a:	   |   move.l 150(sp),d1
    630e:	   |   move.l 146(sp),d2
    6312:	   |   move.l 142(sp),d3
    6316:	   |   jsr -48(a6)
    631a:	   |   move.l d0,138(sp)
		KPrintF("openAndVerify: Can't open file", filename);
    631e:	   |   move.l 328(sp),-(sp)
    6322:	   |   pea 18928 <PutChar+0xe4a>
    6328:	   |   jsr 1703c <KPrintF>
    632e:	   |   addq.l #8,sp
		return NULL;
    6330:	   |   moveq #0,d0
    6332:	/--|-- bra.w 65f6 <openAndVerify+0x366>
	}
	BOOL headerBad = FALSE;
    6336:	|  \-> clr.w 322(sp)
	if (FGetC (fp) != 'S') headerBad = TRUE;
    633a:	|      move.l 306(sp),302(sp)
    6340:	|      move.l 1a7ac <DOSBase>,d0
    6346:	|      movea.l d0,a6
    6348:	|      move.l 302(sp),d1
    634c:	|      jsr -306(a6)
    6350:	|      move.l d0,298(sp)
    6354:	|      move.l 298(sp),d0
    6358:	|      moveq #83,d1
    635a:	|      cmp.l d0,d1
    635c:	|  /-- beq.s 6364 <openAndVerify+0xd4>
    635e:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'L') headerBad = TRUE;
    6364:	|  \-> move.l 306(sp),294(sp)
    636a:	|      move.l 1a7ac <DOSBase>,d0
    6370:	|      movea.l d0,a6
    6372:	|      move.l 294(sp),d1
    6376:	|      jsr -306(a6)
    637a:	|      move.l d0,290(sp)
    637e:	|      move.l 290(sp),d0
    6382:	|      moveq #76,d1
    6384:	|      cmp.l d0,d1
    6386:	|  /-- beq.s 638e <openAndVerify+0xfe>
    6388:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'U') headerBad = TRUE;
    638e:	|  \-> move.l 306(sp),286(sp)
    6394:	|      move.l 1a7ac <DOSBase>,d0
    639a:	|      movea.l d0,a6
    639c:	|      move.l 286(sp),d1
    63a0:	|      jsr -306(a6)
    63a4:	|      move.l d0,282(sp)
    63a8:	|      move.l 282(sp),d0
    63ac:	|      moveq #85,d1
    63ae:	|      cmp.l d0,d1
    63b0:	|  /-- beq.s 63b8 <openAndVerify+0x128>
    63b2:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'D') headerBad = TRUE;
    63b8:	|  \-> move.l 306(sp),278(sp)
    63be:	|      move.l 1a7ac <DOSBase>,d0
    63c4:	|      movea.l d0,a6
    63c6:	|      move.l 278(sp),d1
    63ca:	|      jsr -306(a6)
    63ce:	|      move.l d0,274(sp)
    63d2:	|      move.l 274(sp),d0
    63d6:	|      moveq #68,d1
    63d8:	|      cmp.l d0,d1
    63da:	|  /-- beq.s 63e2 <openAndVerify+0x152>
    63dc:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != extra1) headerBad = TRUE;
    63e2:	|  \-> move.l 306(sp),270(sp)
    63e8:	|      move.l 1a7ac <DOSBase>,d0
    63ee:	|      movea.l d0,a6
    63f0:	|      move.l 270(sp),d1
    63f4:	|      jsr -306(a6)
    63f8:	|      move.l d0,266(sp)
    63fc:	|      move.l 266(sp),d1
    6400:	|      move.b 16(sp),d0
    6404:	|      ext.w d0
    6406:	|      movea.w d0,a0
    6408:	|      cmpa.l d1,a0
    640a:	|  /-- beq.s 6412 <openAndVerify+0x182>
    640c:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != extra2) headerBad = TRUE;
    6412:	|  \-> move.l 306(sp),262(sp)
    6418:	|      move.l 1a7ac <DOSBase>,d0
    641e:	|      movea.l d0,a6
    6420:	|      move.l 262(sp),d1
    6424:	|      jsr -306(a6)
    6428:	|      move.l d0,258(sp)
    642c:	|      move.l 258(sp),d1
    6430:	|      move.b 14(sp),d0
    6434:	|      ext.w d0
    6436:	|      movea.w d0,a0
    6438:	|      cmpa.l d1,a0
    643a:	|  /-- beq.s 6442 <openAndVerify+0x1b2>
    643c:	|  |   move.w #1,322(sp)
	if (headerBad) {
    6442:	|  \-> tst.w 322(sp)
    6446:	|  /-- beq.s 649e <openAndVerify+0x20e>
		Write(Output(), (APTR)"openAndVerify: Bad Header\n", 31);
    6448:	|  |   move.l 1a7ac <DOSBase>,d0
    644e:	|  |   movea.l d0,a6
    6450:	|  |   jsr -60(a6)
    6454:	|  |   move.l d0,174(sp)
    6458:	|  |   move.l 174(sp),d0
    645c:	|  |   move.l d0,170(sp)
    6460:	|  |   move.l #100679,166(sp)
    6468:	|  |   moveq #31,d0
    646a:	|  |   move.l d0,162(sp)
    646e:	|  |   move.l 1a7ac <DOSBase>,d0
    6474:	|  |   movea.l d0,a6
    6476:	|  |   move.l 170(sp),d1
    647a:	|  |   move.l 166(sp),d2
    647e:	|  |   move.l 162(sp),d3
    6482:	|  |   jsr -48(a6)
    6486:	|  |   move.l d0,158(sp)
		KPrintF("openAndVerify: Bad Header\n");
    648a:	|  |   pea 18947 <PutChar+0xe69>
    6490:	|  |   jsr 1703c <KPrintF>
    6496:	|  |   addq.l #4,sp
		return NULL;
    6498:	|  |   moveq #0,d0
    649a:	+--|-- bra.w 65f6 <openAndVerify+0x366>
	}
	FGetC (fp);
    649e:	|  \-> move.l 306(sp),254(sp)
    64a4:	|      move.l 1a7ac <DOSBase>,d0
    64aa:	|      movea.l d0,a6
    64ac:	|      move.l 254(sp),d1
    64b0:	|      jsr -306(a6)
    64b4:	|      move.l d0,250(sp)
	while (FGetC(fp)) {;}
    64b8:	|      nop
    64ba:	|  /-> move.l 306(sp),246(sp)
    64c0:	|  |   move.l 1a7ac <DOSBase>,d0
    64c6:	|  |   movea.l d0,a6
    64c8:	|  |   move.l 246(sp),d1
    64cc:	|  |   jsr -306(a6)
    64d0:	|  |   move.l d0,242(sp)
    64d4:	|  |   move.l 242(sp),d0
    64d8:	|  \-- bne.s 64ba <openAndVerify+0x22a>

	int majVersion = FGetC (fp);
    64da:	|      move.l 306(sp),238(sp)
    64e0:	|      move.l 1a7ac <DOSBase>,d0
    64e6:	|      movea.l d0,a6
    64e8:	|      move.l 238(sp),d1
    64ec:	|      jsr -306(a6)
    64f0:	|      move.l d0,234(sp)
    64f4:	|      move.l 234(sp),d0
    64f8:	|      move.l d0,230(sp)
	int minVersion = FGetC (fp);
    64fc:	|      move.l 306(sp),226(sp)
    6502:	|      move.l 1a7ac <DOSBase>,d0
    6508:	|      movea.l d0,a6
    650a:	|      move.l 226(sp),d1
    650e:	|      jsr -306(a6)
    6512:	|      move.l d0,222(sp)
    6516:	|      move.l 222(sp),d0
    651a:	|      move.l d0,218(sp)
	*fileVersion = majVersion * 256 + minVersion;
    651e:	|      move.l 230(sp),d0
    6522:	|      lsl.l #8,d0
    6524:	|      add.l 218(sp),d0
    6528:	|      movea.l 344(sp),a0
    652c:	|      move.l d0,(a0)

	char txtVer[120];

	if (*fileVersion > WHOLE_VERSION) {
    652e:	|      movea.l 344(sp),a0
    6532:	|      move.l (a0),d0
    6534:	|      cmpi.l #514,d0
    653a:	|  /-- ble.s 6590 <openAndVerify+0x300>
		//sprintf (txtVer, ERROR_VERSION_TOO_LOW_2, majVersion, minVersion);
		Write(Output(), (APTR)ERROR_VERSION_TOO_LOW_1, 100);
    653c:	|  |   move.l 1a7ac <DOSBase>,d0
    6542:	|  |   movea.l d0,a6
    6544:	|  |   jsr -60(a6)
    6548:	|  |   move.l d0,194(sp)
    654c:	|  |   move.l 194(sp),d0
    6550:	|  |   move.l d0,190(sp)
    6554:	|  |   move.l #100706,186(sp)
    655c:	|  |   moveq #100,d1
    655e:	|  |   move.l d1,182(sp)
    6562:	|  |   move.l 1a7ac <DOSBase>,d0
    6568:	|  |   movea.l d0,a6
    656a:	|  |   move.l 190(sp),d1
    656e:	|  |   move.l 186(sp),d2
    6572:	|  |   move.l 182(sp),d3
    6576:	|  |   jsr -48(a6)
    657a:	|  |   move.l d0,178(sp)
		KPrintF(ERROR_VERSION_TOO_LOW_1);
    657e:	|  |   pea 18962 <PutChar+0xe84>
    6584:	|  |   jsr 1703c <KPrintF>
    658a:	|  |   addq.l #4,sp
		return NULL;
    658c:	|  |   moveq #0,d0
    658e:	+--|-- bra.s 65f6 <openAndVerify+0x366>
	} else if (*fileVersion < MINIM_VERSION) {
    6590:	|  \-> movea.l 344(sp),a0
    6594:	|      move.l (a0),d0
    6596:	|      cmpi.l #257,d0
    659c:	|  /-- bgt.s 65f2 <openAndVerify+0x362>
		Write(Output(), (APTR)ERROR_VERSION_TOO_HIGH_1, 100);
    659e:	|  |   move.l 1a7ac <DOSBase>,d0
    65a4:	|  |   movea.l d0,a6
    65a6:	|  |   jsr -60(a6)
    65aa:	|  |   move.l d0,214(sp)
    65ae:	|  |   move.l 214(sp),d0
    65b2:	|  |   move.l d0,210(sp)
    65b6:	|  |   move.l #100775,206(sp)
    65be:	|  |   moveq #100,d0
    65c0:	|  |   move.l d0,202(sp)
    65c4:	|  |   move.l 1a7ac <DOSBase>,d0
    65ca:	|  |   movea.l d0,a6
    65cc:	|  |   move.l 210(sp),d1
    65d0:	|  |   move.l 206(sp),d2
    65d4:	|  |   move.l 202(sp),d3
    65d8:	|  |   jsr -48(a6)
    65dc:	|  |   move.l d0,198(sp)
		KPrintF(ERROR_VERSION_TOO_HIGH_1);
    65e0:	|  |   pea 189a7 <PutChar+0xec9>
    65e6:	|  |   jsr 1703c <KPrintF>
    65ec:	|  |   addq.l #4,sp
		return NULL;
    65ee:	|  |   moveq #0,d0
    65f0:	+--|-- bra.s 65f6 <openAndVerify+0x366>
	}
	return fp;
    65f2:	|  \-> move.l 306(sp),d0
}
    65f6:	\----> movem.l (sp)+,d2-d3/a6
    65fa:	       lea 312(sp),sp
    65fe:	       rts

00006600 <pauseFunction>:

void pauseFunction (struct loadedFunction * fun) {
    6600:	          subq.l #4,sp
	struct loadedFunction * * huntAndDestroy = & allRunningFunctions;
    6602:	          move.l #108348,(sp)
	while (* huntAndDestroy) {
    6608:	   /----- bra.s 6634 <pauseFunction+0x34>
		if (fun == * huntAndDestroy) {
    660a:	/--|----> movea.l (sp),a0
    660c:	|  |      move.l (a0),d0
    660e:	|  |      cmp.l 8(sp),d0
    6612:	|  |  /-- bne.s 662a <pauseFunction+0x2a>
			(* huntAndDestroy) = (* huntAndDestroy) -> next;
    6614:	|  |  |   movea.l (sp),a0
    6616:	|  |  |   movea.l (a0),a0
    6618:	|  |  |   move.l 44(a0),d0
    661c:	|  |  |   movea.l (sp),a0
    661e:	|  |  |   move.l d0,(a0)
			fun->next = NULL;
    6620:	|  |  |   movea.l 8(sp),a0
    6624:	|  |  |   clr.l 44(a0)
    6628:	|  +--|-- bra.s 6634 <pauseFunction+0x34>
		} else {
			huntAndDestroy = & (* huntAndDestroy) -> next;
    662a:	|  |  \-> movea.l (sp),a0
    662c:	|  |      move.l (a0),d0
    662e:	|  |      moveq #44,d1
    6630:	|  |      add.l d0,d1
    6632:	|  |      move.l d1,(sp)
	while (* huntAndDestroy) {
    6634:	|  \----> movea.l (sp),a0
    6636:	|         move.l (a0),d0
    6638:	\-------- bne.s 660a <pauseFunction+0xa>
		}
	}
}
    663a:	          nop
    663c:	          nop
    663e:	          addq.l #4,sp
    6640:	          rts

00006642 <restartFunction>:

void restartFunction (struct loadedFunction * fun) {
	fun -> next = allRunningFunctions;
    6642:	move.l 1a73c <allRunningFunctions>,d0
    6648:	movea.l 4(sp),a0
    664c:	move.l d0,44(a0)
	allRunningFunctions = fun;
    6650:	move.l 4(sp),1a73c <allRunningFunctions>
}
    6658:	nop
    665a:	rts

0000665c <runSludge>:

BOOL runSludge () {
    665c:	                   lea -12(sp),sp
    6660:	                   move.l a6,-(sp)
	
	struct loadedFunction * thisFunction = allRunningFunctions;
    6662:	                   move.l 1a73c <allRunningFunctions>,12(sp)
	struct loadedFunction * nextFunction;

	while (thisFunction) {
    666a:	      /----------- bra.s 66e6 <runSludge+0x8a>
		nextFunction = thisFunction -> next;
    666c:	   /--|----------> movea.l 12(sp),a0
    6670:	   |  |            move.l 44(a0),4(sp)

		if (! thisFunction -> freezerLevel) {
    6676:	   |  |            movea.l 12(sp),a0
    667a:	   |  |            move.b 56(a0),d0
    667e:	   |  |  /-------- bne.s 66e0 <runSludge+0x84>
			if (thisFunction -> timeLeft) {
    6680:	   |  |  |         movea.l 12(sp),a0
    6684:	   |  |  |         move.l 12(a0),d0
    6688:	   |  |  |  /----- beq.s 66b2 <runSludge+0x56>
				if (thisFunction -> timeLeft < 0) {				
    668a:	   |  |  |  |      movea.l 12(sp),a0
    668e:	   |  |  |  |      move.l 12(a0),d0
    6692:	   |  |  |  |  /-- bpl.s 669e <runSludge+0x42>
					thisFunction -> timeLeft = 0;
    6694:	   |  |  |  |  |   movea.l 12(sp),a0
    6698:	   |  |  |  |  |   clr.l 12(a0)
    669c:	   |  |  +--|--|-- bra.s 66e0 <runSludge+0x84>
				} else if (! -- (thisFunction -> timeLeft)) {
    669e:	   |  |  |  |  \-> movea.l 12(sp),a0
    66a2:	   |  |  |  |      move.l 12(a0),d0
    66a6:	   |  |  |  |      subq.l #1,d0
    66a8:	   |  |  |  |      movea.l 12(sp),a0
    66ac:	   |  |  |  |      move.l d0,12(a0)
    66b0:	   |  |  +--|----- bra.s 66e0 <runSludge+0x84>
				}
			} else {
				if (thisFunction -> isSpeech) {
    66b2:	   |  |  |  \----> movea.l 12(sp),a0
    66b6:	   |  |  |         move.w 50(a0),d0
    66ba:	   |  |  |     /-- beq.s 66ca <runSludge+0x6e>
					thisFunction -> isSpeech = FALSE;
    66bc:	   |  |  |     |   movea.l 12(sp),a0
    66c0:	   |  |  |     |   clr.w 50(a0)
					killAllSpeech ();
    66c4:	   |  |  |     |   jsr 7cfc <killAllSpeech>
				}
				if (! continueFunction (thisFunction))
    66ca:	   |  |  |     \-> move.l 12(sp),-(sp)
    66ce:	   |  |  |         jsr 462a <continueFunction>
    66d4:	   |  |  |         addq.l #4,sp
    66d6:	   |  |  |         tst.w d0
    66d8:	   |  |  +-------- bne.s 66e0 <runSludge+0x84>
					return FALSE;
    66da:	   |  |  |         clr.w d0
    66dc:	/--|--|--|-------- bra.w 676c <runSludge+0x110>
			}
		}

		thisFunction = nextFunction;
    66e0:	|  |  |  \-------> move.l 4(sp),12(sp)
	while (thisFunction) {
    66e6:	|  |  \----------> tst.l 12(sp)
    66ea:	|  \-------------- bne.s 666c <runSludge+0x10>
	}

	if (loadNow) {
    66ec:	|                  move.l 1a770 <loadNow>,d0
    66f2:	|        /-------- beq.s 676a <runSludge+0x10e>
		if (loadNow[0] == ':') {
    66f4:	|        |         movea.l 1a770 <loadNow>,a0
    66fa:	|        |         move.b (a0),d0
    66fc:	|        |         cmpi.b #58,d0
    6700:	|        |  /----- bne.s 6734 <runSludge+0xd8>
			saveGame (loadNow + 1);
    6702:	|        |  |      move.l 1a770 <loadNow>,d0
    6708:	|        |  |      addq.l #1,d0
    670a:	|        |  |      move.l d0,-(sp)
    670c:	|        |  |      jsr c58c <saveGame>
    6712:	|        |  |      addq.l #4,sp
			setVariable (&saverFunc->reg, SVT_INT, 1);
    6714:	|        |  |      movea.l 1a86e <saverFunc>,a0
    671a:	|        |  |      lea 28(a0),a0
    671e:	|        |  |      pea 1 <_start+0x1>
    6722:	|        |  |      pea 1 <_start+0x1>
    6726:	|        |  |      move.l a0,-(sp)
    6728:	|        |  |      jsr 14ee2 <setVariable>
    672e:	|        |  |      lea 12(sp),sp
    6732:	|        |  |  /-- bra.s 674c <runSludge+0xf0>
		} else {
			if (! loadGame (loadNow)) return FALSE;
    6734:	|        |  \--|-> move.l 1a770 <loadNow>,d0
    673a:	|        |     |   move.l d0,-(sp)
    673c:	|        |     |   jsr c0d4 <loadGame>
    6742:	|        |     |   addq.l #4,sp
    6744:	|        |     |   tst.w d0
    6746:	|        |     +-- bne.s 674c <runSludge+0xf0>
    6748:	|        |     |   clr.w d0
    674a:	+--------|-----|-- bra.s 676c <runSludge+0x110>
		}
		FreeVec(loadNow);
    674c:	|        |     \-> move.l 1a770 <loadNow>,8(sp)
    6754:	|        |         move.l 1a7a4 <SysBase>,d0
    675a:	|        |         movea.l d0,a6
    675c:	|        |         movea.l 8(sp),a1
    6760:	|        |         jsr -690(a6)
		loadNow = NULL;
    6764:	|        |         clr.l 1a770 <loadNow>
	}

	return TRUE;
    676a:	|        \-------> moveq #1,d0
}
    676c:	\----------------> movea.l (sp)+,a6
    676e:	                   lea 12(sp),sp
    6772:	                   rts

00006774 <saveHandlers>:

void saveHandlers (BPTR fp) {
	put2bytes (currentEvents -> leftMouseFunction,		fp);
    6774:	movea.l 1a11c <currentEvents>,a0
    677a:	move.l (a0),d0
    677c:	move.l 4(sp),-(sp)
    6780:	move.l d0,-(sp)
    6782:	jsr 8d0 <put2bytes>
    6788:	addq.l #8,sp
	put2bytes (currentEvents -> leftMouseUpFunction,	fp);
    678a:	movea.l 1a11c <currentEvents>,a0
    6790:	move.l 4(a0),d0
    6794:	move.l 4(sp),-(sp)
    6798:	move.l d0,-(sp)
    679a:	jsr 8d0 <put2bytes>
    67a0:	addq.l #8,sp
	put2bytes (currentEvents -> rightMouseFunction,		fp);
    67a2:	movea.l 1a11c <currentEvents>,a0
    67a8:	move.l 8(a0),d0
    67ac:	move.l 4(sp),-(sp)
    67b0:	move.l d0,-(sp)
    67b2:	jsr 8d0 <put2bytes>
    67b8:	addq.l #8,sp
	put2bytes (currentEvents -> rightMouseUpFunction,	fp);
    67ba:	movea.l 1a11c <currentEvents>,a0
    67c0:	move.l 12(a0),d0
    67c4:	move.l 4(sp),-(sp)
    67c8:	move.l d0,-(sp)
    67ca:	jsr 8d0 <put2bytes>
    67d0:	addq.l #8,sp
	put2bytes (currentEvents -> moveMouseFunction,		fp);
    67d2:	movea.l 1a11c <currentEvents>,a0
    67d8:	move.l 16(a0),d0
    67dc:	move.l 4(sp),-(sp)
    67e0:	move.l d0,-(sp)
    67e2:	jsr 8d0 <put2bytes>
    67e8:	addq.l #8,sp
	put2bytes (currentEvents -> focusFunction,			fp);
    67ea:	movea.l 1a11c <currentEvents>,a0
    67f0:	move.l 20(a0),d0
    67f4:	move.l 4(sp),-(sp)
    67f8:	move.l d0,-(sp)
    67fa:	jsr 8d0 <put2bytes>
    6800:	addq.l #8,sp
	put2bytes (currentEvents -> spaceFunction,			fp);
    6802:	movea.l 1a11c <currentEvents>,a0
    6808:	move.l 24(a0),d0
    680c:	move.l 4(sp),-(sp)
    6810:	move.l d0,-(sp)
    6812:	jsr 8d0 <put2bytes>
    6818:	addq.l #8,sp
}
    681a:	nop
    681c:	rts

0000681e <sludgeDisplay>:

void sludgeDisplay () {					
    681e:	subq.l #4,sp
  	volatile struct Custom *custom = (struct Custom*)0xdff000;
    6820:	move.l #14675968,(sp)
	displayCursor();
    6826:	jsr c58 <displayCursor>
	CstDrawBackdrop();
    682c:	jsr 14c8 <CstDrawBackdrop>
	CstRestoreScreen();
    6832:	jsr 29e6 <CstRestoreScreen>
	drawPeople();
    6838:	jsr 9e70 <drawPeople>
	CstSwapBuffer();
    683e:	jsr 35f4 <CstSwapBuffer>
}
    6844:	nop
    6846:	addq.l #4,sp
    6848:	rts

0000684a <stackSetByIndex>:

BOOL stackSetByIndex (struct variableStack * vS, unsigned int theIndex, const struct variable * va) {
	while (theIndex--) {
    684a:	      /-- bra.s 686a <stackSetByIndex+0x20>
		vS = vS->next;
    684c:	/-----|-> movea.l 4(sp),a0
    6850:	|     |   move.l 8(a0),4(sp)
		if (!vS) {
    6856:	|     +-- bne.s 686a <stackSetByIndex+0x20>
			KPrintF("Index past end of stack.");
    6858:	|     |   pea 189ee <PutChar+0xf10>
    685e:	|     |   jsr 1703c <KPrintF>
    6864:	|     |   addq.l #4,sp
			return FALSE;
    6866:	|     |   clr.w d0
    6868:	|  /--|-- bra.s 688c <stackSetByIndex+0x42>
	while (theIndex--) {
    686a:	|  |  \-> move.l 8(sp),d0
    686e:	|  |      move.l d0,d1
    6870:	|  |      subq.l #1,d1
    6872:	|  |      move.l d1,8(sp)
    6876:	|  |      tst.l d0
    6878:	\--|----- bne.s 684c <stackSetByIndex+0x2>
		}
	}
	return copyVariable(va, &(vS->thisVar));
    687a:	   |      move.l 4(sp),d0
    687e:	   |      move.l d0,-(sp)
    6880:	   |      move.l 16(sp),-(sp)
    6884:	   |      jsr 14aaa <copyVariable>
    688a:	   |      addq.l #8,sp
}
    688c:	   \----> rts

0000688e <startNewFunctionNum>:

int startNewFunctionNum (unsigned int funcNum, unsigned int numParamsExpected, struct loadedFunction * calledBy, struct variableStack ** vStack, BOOL returnSommet) {
    688e:	             lea -24(sp),sp
    6892:	             move.l a6,-(sp)
    6894:	             move.l 48(sp),d0
    6898:	             move.w d0,d0
    689a:	             move.w d0,6(sp)
		
	struct loadedFunction * newFunc = AllocVec(sizeof(struct loadedFunction),MEMF_ANY);
    689e:	             moveq #58,d0
    68a0:	             move.l d0,24(sp)
    68a4:	             clr.l 20(sp)
    68a8:	             move.l 1a7a4 <SysBase>,d0
    68ae:	             movea.l d0,a6
    68b0:	             move.l 24(sp),d0
    68b4:	             move.l 20(sp),d1
    68b8:	             jsr -684(a6)
    68bc:	             move.l d0,16(sp)
    68c0:	             move.l 16(sp),d0
    68c4:	             move.l d0,12(sp)
	if(!newFunc) {
    68c8:	         /-- bne.s 68de <startNewFunctionNum+0x50>
		KPrintF("startNewFunction: Cannot allocate memory");
    68ca:	         |   pea 18a07 <PutChar+0xf29>
    68d0:	         |   jsr 1703c <KPrintF>
    68d6:	         |   addq.l #4,sp
		return 0;
    68d8:	         |   moveq #0,d0
    68da:	/--------|-- bra.w 69f4 <startNewFunctionNum+0x166>
	}
	newFunc -> originalNumber = funcNum;
    68de:	|        \-> move.l 32(sp),d0
    68e2:	|            movea.l 12(sp),a0
    68e6:	|            move.l d0,(a0)

	loadFunctionCode (newFunc);
    68e8:	|            move.l 12(sp),-(sp)
    68ec:	|            jsr 5ffe <loadFunctionCode>
    68f2:	|            addq.l #4,sp

	if (newFunc -> numArgs != (int)numParamsExpected) {
    68f4:	|            movea.l 12(sp),a0
    68f8:	|            move.l 16(a0),d1
    68fc:	|            move.l 36(sp),d0
    6900:	|            cmp.l d1,d0
    6902:	|        /-- beq.s 6918 <startNewFunctionNum+0x8a>
		KPrintF("Wrong number of parameters!");
    6904:	|        |   pea 18a30 <PutChar+0xf52>
    690a:	|        |   jsr 1703c <KPrintF>
    6910:	|        |   addq.l #4,sp
		return NULL; 
    6912:	|        |   moveq #0,d0
    6914:	+--------|-- bra.w 69f4 <startNewFunctionNum+0x166>
	}
	if (newFunc -> numArgs > newFunc -> numLocals)  {
    6918:	|        \-> movea.l 12(sp),a0
    691c:	|            move.l 16(a0),d1
    6920:	|            movea.l 12(sp),a0
    6924:	|            move.l 8(a0),d0
    6928:	|            cmp.l d1,d0
    692a:	|  /-------- bge.s 6994 <startNewFunctionNum+0x106>
		KPrintF ("More arguments than local variable space!");
    692c:	|  |         pea 18a4c <PutChar+0xf6e>
    6932:	|  |         jsr 1703c <KPrintF>
    6938:	|  |         addq.l #4,sp
		return NULL; 
    693a:	|  |         moveq #0,d0
    693c:	+--|-------- bra.w 69f4 <startNewFunctionNum+0x166>
	}
	
	// Now, lets copy the parameters from the calling function's stack...

	while (numParamsExpected) {
		struct variableStack *vStacksimpleptr = *vStack;
    6940:	|  |  /----> movea.l 44(sp),a0
    6944:	|  |  |      move.l (a0),8(sp)
		numParamsExpected --;
    6948:	|  |  |      subq.l #1,36(sp)
		if (*vStack == NULL) {
    694c:	|  |  |      movea.l 44(sp),a0
    6950:	|  |  |      move.l (a0),d0
    6952:	|  |  |  /-- bne.s 6968 <startNewFunctionNum+0xda>
			KPrintF("Corrupted file! The stack's empty and there were still parameters expected");
    6954:	|  |  |  |   pea 18a76 <PutChar+0xf98>
    695a:	|  |  |  |   jsr 1703c <KPrintF>
    6960:	|  |  |  |   addq.l #4,sp
			return NULL;
    6962:	|  |  |  |   moveq #0,d0
    6964:	+--|--|--|-- bra.w 69f4 <startNewFunctionNum+0x166>
		}
		copyVariable (&vStacksimpleptr -> thisVar, &newFunc->localVars[numParamsExpected]);
    6968:	|  |  |  \-> movea.l 12(sp),a0
    696c:	|  |  |      move.l 20(a0),d1
    6970:	|  |  |      move.l 36(sp),d0
    6974:	|  |  |      lsl.l #3,d0
    6976:	|  |  |      add.l d0,d1
    6978:	|  |  |      move.l 8(sp),d0
    697c:	|  |  |      move.l d1,-(sp)
    697e:	|  |  |      move.l d0,-(sp)
    6980:	|  |  |      jsr 14aaa <copyVariable>
    6986:	|  |  |      addq.l #8,sp
		trimStack ( vStack);
    6988:	|  |  |      move.l 44(sp),-(sp)
    698c:	|  |  |      jsr 14f74 <trimStack>
    6992:	|  |  |      addq.l #4,sp
	while (numParamsExpected) {
    6994:	|  \--|----> tst.l 36(sp)
    6998:	|     \----- bne.s 6940 <startNewFunctionNum+0xb2>
	}

	newFunc -> cancelMe = FALSE;
    699a:	|            movea.l 12(sp),a0
    699e:	|            clr.w 54(a0)
	newFunc -> timeLeft = 0;
    69a2:	|            movea.l 12(sp),a0
    69a6:	|            clr.l 12(a0)
	newFunc -> returnSomething = returnSommet;
    69aa:	|            movea.l 12(sp),a0
    69ae:	|            move.w 6(sp),48(a0)
	newFunc -> calledBy = calledBy;
    69b4:	|            movea.l 12(sp),a0
    69b8:	|            move.l 40(sp),40(a0)
	newFunc -> stack = NULL;
    69be:	|            movea.l 12(sp),a0
    69c2:	|            clr.l 24(a0)
	newFunc -> freezerLevel = 0;
    69c6:	|            movea.l 12(sp),a0
    69ca:	|            clr.b 56(a0)
	newFunc -> runThisLine = 0;
    69ce:	|            movea.l 12(sp),a0
    69d2:	|            clr.l 36(a0)
	newFunc -> isSpeech = 0;
    69d6:	|            movea.l 12(sp),a0
    69da:	|            clr.w 50(a0)
	newFunc -> reg.varType = SVT_NULL;
    69de:	|            movea.l 12(sp),a0
    69e2:	|            clr.l 28(a0)

	restartFunction (newFunc);
    69e6:	|            move.l 12(sp),-(sp)
    69ea:	|            jsr 6642 <restartFunction>
    69f0:	|            addq.l #4,sp
	return 1;
    69f2:	|            moveq #1,d0
}
    69f4:	\----------> movea.l (sp)+,a6
    69f6:	             lea 24(sp),sp
    69fa:	             rts

000069fc <unfreezeSubs>:

void unfreezeSubs () {
    69fc:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    69fe:	          move.l 1a73c <allRunningFunctions>,(sp)

	while (thisFunction) {
    6a04:	   /----- bra.s 6a22 <unfreezeSubs+0x26>
		if (thisFunction -> freezerLevel) thisFunction -> freezerLevel--;
    6a06:	/--|----> movea.l (sp),a0
    6a08:	|  |      move.b 56(a0),d0
    6a0c:	|  |  /-- beq.s 6a1c <unfreezeSubs+0x20>
    6a0e:	|  |  |   movea.l (sp),a0
    6a10:	|  |  |   move.b 56(a0),d0
    6a14:	|  |  |   subq.b #1,d0
    6a16:	|  |  |   movea.l (sp),a0
    6a18:	|  |  |   move.b d0,56(a0)
		thisFunction = thisFunction -> next;
    6a1c:	|  |  \-> movea.l (sp),a0
    6a1e:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    6a22:	|  \----> tst.l (sp)
    6a24:	\-------- bne.s 6a06 <unfreezeSubs+0xa>
	}
}
    6a26:	          nop
    6a28:	          nop
    6a2a:	          addq.l #4,sp
    6a2c:	          rts

00006a2e <finishAccess>:
char * convertString(char * s) {
	return NULL;
}

void finishAccess () {
	sliceBusy = FALSE;
    6a2e:	clr.w 1a128 <sliceBusy>
}
    6a34:	nop
    6a36:	rts

00006a38 <getNumberedString>:

char * getNumberedString (int value) {
    6a38:	       lea -56(sp),sp
    6a3c:	       movem.l d2-d3/a6,-(sp)

	if (sliceBusy) {
    6a40:	       move.w 1a128 <sliceBusy>,d0
    6a46:	   /-- beq.s 6a90 <getNumberedString+0x58>
		Write(Output(), (APTR)"getNumberedString: Can't read from data file. I'm already reading something\n", 76);        
    6a48:	   |   move.l 1a7ac <DOSBase>,d0
    6a4e:	   |   movea.l d0,a6
    6a50:	   |   jsr -60(a6)
    6a54:	   |   move.l d0,28(sp)
    6a58:	   |   move.l 28(sp),d0
    6a5c:	   |   move.l d0,24(sp)
    6a60:	   |   move.l #101057,20(sp)
    6a68:	   |   moveq #76,d0
    6a6a:	   |   move.l d0,16(sp)
    6a6e:	   |   move.l 1a7ac <DOSBase>,d0
    6a74:	   |   movea.l d0,a6
    6a76:	   |   move.l 24(sp),d1
    6a7a:	   |   move.l 20(sp),d2
    6a7e:	   |   move.l 16(sp),d3
    6a82:	   |   jsr -48(a6)
    6a86:	   |   move.l d0,12(sp)
		return NULL;
    6a8a:	   |   moveq #0,d0
    6a8c:	/--|-- bra.w 6b2c <getNumberedString+0xf4>
	}

	Seek(bigDataFile, (value << 2) + startOfTextIndex, OFFSET_BEGINNING);
    6a90:	|  \-> move.l 1a78c <bigDataFile>,64(sp)
    6a98:	|      move.l 72(sp),d0
    6a9c:	|      add.l d0,d0
    6a9e:	|      add.l d0,d0
    6aa0:	|      move.l d0,d1
    6aa2:	|      move.l 1a798 <startOfTextIndex>,d0
    6aa8:	|      add.l d1,d0
    6aaa:	|      move.l d0,60(sp)
    6aae:	|      moveq #-1,d0
    6ab0:	|      move.l d0,56(sp)
    6ab4:	|      move.l 1a7ac <DOSBase>,d0
    6aba:	|      movea.l d0,a6
    6abc:	|      move.l 64(sp),d1
    6ac0:	|      move.l 60(sp),d2
    6ac4:	|      move.l 56(sp),d3
    6ac8:	|      jsr -66(a6)
    6acc:	|      move.l d0,52(sp)
	value = get4bytes (bigDataFile);
    6ad0:	|      move.l 1a78c <bigDataFile>,d0
    6ad6:	|      move.l d0,-(sp)
    6ad8:	|      jsr 718 <get4bytes>
    6ade:	|      addq.l #4,sp
    6ae0:	|      move.l d0,72(sp)
	Seek (bigDataFile, value, OFFSET_BEGINING);
    6ae4:	|      move.l 1a78c <bigDataFile>,48(sp)
    6aec:	|      move.l 72(sp),44(sp)
    6af2:	|      moveq #-1,d0
    6af4:	|      move.l d0,40(sp)
    6af8:	|      move.l 1a7ac <DOSBase>,d0
    6afe:	|      movea.l d0,a6
    6b00:	|      move.l 48(sp),d1
    6b04:	|      move.l 44(sp),d2
    6b08:	|      move.l 40(sp),d3
    6b0c:	|      jsr -66(a6)
    6b10:	|      move.l d0,36(sp)

	char * s = readString (bigDataFile);    
    6b14:	|      move.l 1a78c <bigDataFile>,d0
    6b1a:	|      move.l d0,-(sp)
    6b1c:	|      jsr b02 <readString>
    6b22:	|      addq.l #4,sp
    6b24:	|      move.l d0,32(sp)
	
	return s;
    6b28:	|      move.l 32(sp),d0
}
    6b2c:	\----> movem.l (sp)+,d2-d3/a6
    6b30:	       lea 56(sp),sp
    6b34:	       rts

00006b36 <openFileFromNum>:

unsigned int openFileFromNum (int num) {
    6b36:	       lea -32(sp),sp
    6b3a:	       movem.l d2-d3/a6,-(sp)
//	FILE * dbug = fopen ("debuggy.txt", "at");

	if (sliceBusy) {
    6b3e:	       move.w 1a128 <sliceBusy>,d0
    6b44:	   /-- beq.s 6b60 <openFileFromNum+0x2a>
		KPrintF("Can't read from data file", "I'm already reading something");
    6b46:	   |   pea 18b0e <PutChar+0x1030>
    6b4c:	   |   pea 18b2c <PutChar+0x104e>
    6b52:	   |   jsr 1703c <KPrintF>
    6b58:	   |   addq.l #8,sp
		return 0;
    6b5a:	   |   moveq #0,d0
    6b5c:	/--|-- bra.w 6bf4 <openFileFromNum+0xbe>
	}

	Seek( bigDataFile,  startOfDataIndex + (num << 2), OFFSET_BEGINING);	
    6b60:	|  \-> move.l 1a78c <bigDataFile>,40(sp)
    6b68:	|      move.l 48(sp),d0
    6b6c:	|      add.l d0,d0
    6b6e:	|      add.l d0,d0
    6b70:	|      move.l d0,d1
    6b72:	|      move.l 1a794 <startOfDataIndex>,d0
    6b78:	|      add.l d1,d0
    6b7a:	|      move.l d0,36(sp)
    6b7e:	|      moveq #-1,d0
    6b80:	|      move.l d0,32(sp)
    6b84:	|      move.l 1a7ac <DOSBase>,d0
    6b8a:	|      movea.l d0,a6
    6b8c:	|      move.l 40(sp),d1
    6b90:	|      move.l 36(sp),d2
    6b94:	|      move.l 32(sp),d3
    6b98:	|      jsr -66(a6)
    6b9c:	|      move.l d0,28(sp)
	Seek( bigDataFile, get4bytes (bigDataFile), OFFSET_CURRENT);
    6ba0:	|      move.l 1a78c <bigDataFile>,24(sp)
    6ba8:	|      move.l 1a78c <bigDataFile>,d0
    6bae:	|      move.l d0,-(sp)
    6bb0:	|      jsr 718 <get4bytes>
    6bb6:	|      addq.l #4,sp
    6bb8:	|      move.l d0,20(sp)
    6bbc:	|      clr.l 16(sp)
    6bc0:	|      move.l 1a7ac <DOSBase>,d0
    6bc6:	|      movea.l d0,a6
    6bc8:	|      move.l 24(sp),d1
    6bcc:	|      move.l 20(sp),d2
    6bd0:	|      move.l 16(sp),d3
    6bd4:	|      jsr -66(a6)
    6bd8:	|      move.l d0,12(sp)
//	fprintf (dbug, "Jumping to %li (for data) \n", ftell (bigDataFile));
	sliceBusy = TRUE;
    6bdc:	|      move.w #1,1a128 <sliceBusy>
//	fclose (dbug);

	return get4bytes (bigDataFile);
    6be4:	|      move.l 1a78c <bigDataFile>,d0
    6bea:	|      move.l d0,-(sp)
    6bec:	|      jsr 718 <get4bytes>
    6bf2:	|      addq.l #4,sp
}
    6bf4:	\----> movem.l (sp)+,d2-d3/a6
    6bf8:	       lea 32(sp),sp
    6bfc:	       rts

00006bfe <openObjectSlice>:

BOOL openObjectSlice (int num) {
    6bfe:	       lea -32(sp),sp
    6c02:	       movem.l d2-d3/a6,-(sp)
    // BPTR dbug = FOpen("debuggy.txt", MODE_NEWFILE);

    // FPrintf(dbug, "\nTrying to open object %i\n", num);

    if (sliceBusy) {
    6c06:	       move.w 1a128 <sliceBusy>,d0
    6c0c:	   /-- beq.s 6c28 <openObjectSlice+0x2a>
        KPrintF("Can't read from data file", "I'm already reading something");
    6c0e:	   |   pea 18b0e <PutChar+0x1030>
    6c14:	   |   pea 18b2c <PutChar+0x104e>
    6c1a:	   |   jsr 1703c <KPrintF>
    6c20:	   |   addq.l #8,sp
        return FALSE;
    6c22:	   |   clr.w d0
    6c24:	/--|-- bra.w 6cb4 <openObjectSlice+0xb6>
    }

    // FPrintf(dbug, "Going to position %ld\n", startOfObjectIndex + (num << 2));
    Seek(bigDataFile, startOfObjectIndex + (num << 2), OFFSET_BEGINNING);
    6c28:	|  \-> move.l 1a78c <bigDataFile>,40(sp)
    6c30:	|      move.l 48(sp),d0
    6c34:	|      add.l d0,d0
    6c36:	|      add.l d0,d0
    6c38:	|      move.l d0,d1
    6c3a:	|      move.l 1a7a0 <startOfObjectIndex>,d0
    6c40:	|      add.l d1,d0
    6c42:	|      move.l d0,36(sp)
    6c46:	|      moveq #-1,d0
    6c48:	|      move.l d0,32(sp)
    6c4c:	|      move.l 1a7ac <DOSBase>,d0
    6c52:	|      movea.l d0,a6
    6c54:	|      move.l 40(sp),d1
    6c58:	|      move.l 36(sp),d2
    6c5c:	|      move.l 32(sp),d3
    6c60:	|      jsr -66(a6)
    6c64:	|      move.l d0,28(sp)
    Seek(bigDataFile, get4bytes(bigDataFile), OFFSET_BEGINNING);
    6c68:	|      move.l 1a78c <bigDataFile>,24(sp)
    6c70:	|      move.l 1a78c <bigDataFile>,d0
    6c76:	|      move.l d0,-(sp)
    6c78:	|      jsr 718 <get4bytes>
    6c7e:	|      addq.l #4,sp
    6c80:	|      move.l d0,20(sp)
    6c84:	|      moveq #-1,d0
    6c86:	|      move.l d0,16(sp)
    6c8a:	|      move.l 1a7ac <DOSBase>,d0
    6c90:	|      movea.l d0,a6
    6c92:	|      move.l 24(sp),d1
    6c96:	|      move.l 20(sp),d2
    6c9a:	|      move.l 16(sp),d3
    6c9e:	|      jsr -66(a6)
    6ca2:	|      move.l d0,12(sp)
    // FPrintf(dbug, "Told to skip forward to %ld\n", FTell(bigDataFile));
    // FClose(dbug);
    return sliceBusy = TRUE;
    6ca6:	|      move.w #1,1a128 <sliceBusy>
    6cae:	|      move.w 1a128 <sliceBusy>,d0
}
    6cb4:	\----> movem.l (sp)+,d2-d3/a6
    6cb8:	       lea 32(sp),sp
    6cbc:	       rts

00006cbe <openSubSlice>:

BOOL openSubSlice (int num) {
    6cbe:	       lea -32(sp),sp
    6cc2:	       movem.l d2-d3/a6,-(sp)
//	FILE * dbug = fopen ("debuggy.txt", "at");

//	fprintf (dbug, "\nTrying to open sub %i\n", num);

	if (sliceBusy) {
    6cc6:	       move.w 1a128 <sliceBusy>,d0
    6ccc:	   /-- beq.s 6ce8 <openSubSlice+0x2a>
		KPrintF("Can't read from data file", "I'm already reading something");
    6cce:	   |   pea 18b0e <PutChar+0x1030>
    6cd4:	   |   pea 18b2c <PutChar+0x104e>
    6cda:	   |   jsr 1703c <KPrintF>
    6ce0:	   |   addq.l #8,sp
		return FALSE;
    6ce2:	   |   clr.w d0
    6ce4:	/--|-- bra.w 6d74 <openSubSlice+0xb6>
	}

//	fprintf (dbug, "Going to position %li\n", startOfSubIndex + (num << 2));
	Seek(bigDataFile, startOfSubIndex + (num << 2), OFFSET_BEGINNING);
    6ce8:	|  \-> move.l 1a78c <bigDataFile>,40(sp)
    6cf0:	|      move.l 48(sp),d0
    6cf4:	|      add.l d0,d0
    6cf6:	|      add.l d0,d0
    6cf8:	|      move.l d0,d1
    6cfa:	|      move.l 1a79c <startOfSubIndex>,d0
    6d00:	|      add.l d1,d0
    6d02:	|      move.l d0,36(sp)
    6d06:	|      moveq #-1,d0
    6d08:	|      move.l d0,32(sp)
    6d0c:	|      move.l 1a7ac <DOSBase>,d0
    6d12:	|      movea.l d0,a6
    6d14:	|      move.l 40(sp),d1
    6d18:	|      move.l 36(sp),d2
    6d1c:	|      move.l 32(sp),d3
    6d20:	|      jsr -66(a6)
    6d24:	|      move.l d0,28(sp)
	Seek(bigDataFile, get4bytes (bigDataFile), OFFSET_BEGINNING);
    6d28:	|      move.l 1a78c <bigDataFile>,24(sp)
    6d30:	|      move.l 1a78c <bigDataFile>,d0
    6d36:	|      move.l d0,-(sp)
    6d38:	|      jsr 718 <get4bytes>
    6d3e:	|      addq.l #4,sp
    6d40:	|      move.l d0,20(sp)
    6d44:	|      moveq #-1,d0
    6d46:	|      move.l d0,16(sp)
    6d4a:	|      move.l 1a7ac <DOSBase>,d0
    6d50:	|      movea.l d0,a6
    6d52:	|      move.l 24(sp),d1
    6d56:	|      move.l 20(sp),d2
    6d5a:	|      move.l 16(sp),d3
    6d5e:	|      jsr -66(a6)
    6d62:	|      move.l d0,12(sp)
//	fprintf (dbug, "Told to skip forward to %li\n", ftell (bigDataFile));
//	fclose (dbug);
	return sliceBusy = TRUE;
    6d66:	|      move.w #1,1a128 <sliceBusy>
    6d6e:	|      move.w 1a128 <sliceBusy>,d0
}
    6d74:	\----> movem.l (sp)+,d2-d3/a6
    6d78:	       lea 32(sp),sp
    6d7c:	       rts

00006d7e <setFileIndices>:

void setFileIndices (BPTR fp, unsigned int numLanguages, unsigned int skipBefore) {
    6d7e:	       lea -180(sp),sp
    6d82:	       movem.l d2-d3/a6,-(sp)
	if (fp) {
    6d86:	       tst.l 196(sp)
    6d8a:	/----- beq.s 6dca <setFileIndices+0x4c>
		// Keep hold of the file handle, and let things get at it
		bigDataFile = fp;
    6d8c:	|      move.l 196(sp),1a78c <bigDataFile>
		startIndex = Seek( fp, 0, OFFSET_CURRENT);
    6d94:	|      move.l 196(sp),168(sp)
    6d9a:	|      clr.l 164(sp)
    6d9e:	|      clr.l 160(sp)
    6da2:	|      move.l 1a7ac <DOSBase>,d0
    6da8:	|      movea.l d0,a6
    6daa:	|      move.l 168(sp),d1
    6dae:	|      move.l 164(sp),d2
    6db2:	|      move.l 160(sp),d3
    6db6:	|      jsr -66(a6)
    6dba:	|      move.l d0,156(sp)
    6dbe:	|      move.l 156(sp),d0
    6dc2:	|      move.l d0,1a790 <startIndex>
    6dc8:	|  /-- bra.s 6e04 <setFileIndices+0x86>
	} else {
		// No file pointer - this means that we reuse the bigDataFile
		fp = bigDataFile;
    6dca:	\--|-> move.l 1a78c <bigDataFile>,196(sp)
        Seek(fp, startIndex, OFFSET_BEGINNING);
    6dd2:	   |   move.l 196(sp),184(sp)
    6dd8:	   |   move.l 1a790 <startIndex>,d0
    6dde:	   |   move.l d0,180(sp)
    6de2:	   |   moveq #-1,d0
    6de4:	   |   move.l d0,176(sp)
    6de8:	   |   move.l 1a7ac <DOSBase>,d0
    6dee:	   |   movea.l d0,a6
    6df0:	   |   move.l 184(sp),d1
    6df4:	   |   move.l 180(sp),d2
    6df8:	   |   move.l 176(sp),d3
    6dfc:	   |   jsr -66(a6)
    6e00:	   |   move.l d0,172(sp)
	}
	sliceBusy = FALSE;
    6e04:	   \-> clr.w 1a128 <sliceBusy>

	if (skipBefore > numLanguages) {
    6e0a:	       move.l 204(sp),d0
    6e0e:	       cmp.l 200(sp),d0
    6e12:	   /-- bls.s 6e26 <setFileIndices+0xa8>
		KPrintF("setFileIndices: Warning: Not a valid language ID! Using default instead.");
    6e14:	   |   pea 18b46 <PutChar+0x1068>
    6e1a:	   |   jsr 1703c <KPrintF>
    6e20:	   |   addq.l #4,sp
		skipBefore = 0;
    6e22:	   |   clr.l 204(sp)
	}

	// STRINGS
	int skipAfter = numLanguages - skipBefore;
    6e26:	   \-> move.l 200(sp),d0
    6e2a:	       sub.l 204(sp),d0
    6e2e:	       move.l d0,188(sp)
	while (skipBefore) {
    6e32:	   /-- bra.s 6e70 <setFileIndices+0xf2>
        Seek(fp, get4bytes(fp),OFFSET_BEGINING);		
    6e34:	/--|-> move.l 196(sp),24(sp)
    6e3a:	|  |   move.l 196(sp),-(sp)
    6e3e:	|  |   jsr 718 <get4bytes>
    6e44:	|  |   addq.l #4,sp
    6e46:	|  |   move.l d0,20(sp)
    6e4a:	|  |   moveq #-1,d0
    6e4c:	|  |   move.l d0,16(sp)
    6e50:	|  |   move.l 1a7ac <DOSBase>,d0
    6e56:	|  |   movea.l d0,a6
    6e58:	|  |   move.l 24(sp),d1
    6e5c:	|  |   move.l 20(sp),d2
    6e60:	|  |   move.l 16(sp),d3
    6e64:	|  |   jsr -66(a6)
    6e68:	|  |   move.l d0,12(sp)
		skipBefore --;
    6e6c:	|  |   subq.l #1,204(sp)
	while (skipBefore) {
    6e70:	|  \-> tst.l 204(sp)
    6e74:	\----- bne.s 6e34 <setFileIndices+0xb6>
	}
	startOfTextIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    6e76:	       move.l 196(sp),152(sp)
    6e7c:	       clr.l 148(sp)
    6e80:	       clr.l 144(sp)
    6e84:	       move.l 1a7ac <DOSBase>,d0
    6e8a:	       movea.l d0,a6
    6e8c:	       move.l 152(sp),d1
    6e90:	       move.l 148(sp),d2
    6e94:	       move.l 144(sp),d3
    6e98:	       jsr -66(a6)
    6e9c:	       move.l d0,140(sp)
    6ea0:	       move.l 140(sp),d0
    6ea4:	       addq.l #4,d0
    6ea6:	       move.l d0,1a798 <startOfTextIndex>

	Seek(fp, get4bytes (fp), OFFSET_BEGINNING);
    6eac:	       move.l 196(sp),136(sp)
    6eb2:	       move.l 196(sp),-(sp)
    6eb6:	       jsr 718 <get4bytes>
    6ebc:	       addq.l #4,sp
    6ebe:	       move.l d0,132(sp)
    6ec2:	       moveq #-1,d0
    6ec4:	       move.l d0,128(sp)
    6ec8:	       move.l 1a7ac <DOSBase>,d0
    6ece:	       movea.l d0,a6
    6ed0:	       move.l 136(sp),d1
    6ed4:	       move.l 132(sp),d2
    6ed8:	       move.l 128(sp),d3
    6edc:	       jsr -66(a6)
    6ee0:	       move.l d0,124(sp)

	while (skipAfter) {
    6ee4:	   /-- bra.s 6f22 <setFileIndices+0x1a4>
        Seek( fp, get4bytes (fp), OFFSET_BEGINING);
    6ee6:	/--|-> move.l 196(sp),40(sp)
    6eec:	|  |   move.l 196(sp),-(sp)
    6ef0:	|  |   jsr 718 <get4bytes>
    6ef6:	|  |   addq.l #4,sp
    6ef8:	|  |   move.l d0,36(sp)
    6efc:	|  |   moveq #-1,d0
    6efe:	|  |   move.l d0,32(sp)
    6f02:	|  |   move.l 1a7ac <DOSBase>,d0
    6f08:	|  |   movea.l d0,a6
    6f0a:	|  |   move.l 40(sp),d1
    6f0e:	|  |   move.l 36(sp),d2
    6f12:	|  |   move.l 32(sp),d3
    6f16:	|  |   jsr -66(a6)
    6f1a:	|  |   move.l d0,28(sp)
		skipAfter --;
    6f1e:	|  |   subq.l #1,188(sp)
	while (skipAfter) {
    6f22:	|  \-> tst.l 188(sp)
    6f26:	\----- bne.s 6ee6 <setFileIndices+0x168>
	}

	startOfSubIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    6f28:	       move.l 196(sp),120(sp)
    6f2e:	       clr.l 116(sp)
    6f32:	       clr.l 112(sp)
    6f36:	       move.l 1a7ac <DOSBase>,d0
    6f3c:	       movea.l d0,a6
    6f3e:	       move.l 120(sp),d1
    6f42:	       move.l 116(sp),d2
    6f46:	       move.l 112(sp),d3
    6f4a:	       jsr -66(a6)
    6f4e:	       move.l d0,108(sp)
    6f52:	       move.l 108(sp),d0
    6f56:	       addq.l #4,d0
    6f58:	       move.l d0,1a79c <startOfSubIndex>
    Seek( fp, get4bytes (fp), OFFSET_CURRENT);
    6f5e:	       move.l 196(sp),104(sp)
    6f64:	       move.l 196(sp),-(sp)
    6f68:	       jsr 718 <get4bytes>
    6f6e:	       addq.l #4,sp
    6f70:	       move.l d0,100(sp)
    6f74:	       clr.l 96(sp)
    6f78:	       move.l 1a7ac <DOSBase>,d0
    6f7e:	       movea.l d0,a6
    6f80:	       move.l 104(sp),d1
    6f84:	       move.l 100(sp),d2
    6f88:	       move.l 96(sp),d3
    6f8c:	       jsr -66(a6)
    6f90:	       move.l d0,92(sp)

	startOfObjectIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    6f94:	       move.l 196(sp),88(sp)
    6f9a:	       clr.l 84(sp)
    6f9e:	       clr.l 80(sp)
    6fa2:	       move.l 1a7ac <DOSBase>,d0
    6fa8:	       movea.l d0,a6
    6faa:	       move.l 88(sp),d1
    6fae:	       move.l 84(sp),d2
    6fb2:	       move.l 80(sp),d3
    6fb6:	       jsr -66(a6)
    6fba:	       move.l d0,76(sp)
    6fbe:	       move.l 76(sp),d0
    6fc2:	       addq.l #4,d0
    6fc4:	       move.l d0,1a7a0 <startOfObjectIndex>
	Seek (fp, get4bytes (fp), OFFSET_CURRENT);
    6fca:	       move.l 196(sp),72(sp)
    6fd0:	       move.l 196(sp),-(sp)
    6fd4:	       jsr 718 <get4bytes>
    6fda:	       addq.l #4,sp
    6fdc:	       move.l d0,68(sp)
    6fe0:	       clr.l 64(sp)
    6fe4:	       move.l 1a7ac <DOSBase>,d0
    6fea:	       movea.l d0,a6
    6fec:	       move.l 72(sp),d1
    6ff0:	       move.l 68(sp),d2
    6ff4:	       move.l 64(sp),d3
    6ff8:	       jsr -66(a6)
    6ffc:	       move.l d0,60(sp)

	// Remember that the data section starts here
	startOfDataIndex =  Seek( fp, 0, OFFSET_CURRENT);
    7000:	       move.l 196(sp),56(sp)
    7006:	       clr.l 52(sp)
    700a:	       clr.l 48(sp)
    700e:	       move.l 1a7ac <DOSBase>,d0
    7014:	       movea.l d0,a6
    7016:	       move.l 56(sp),d1
    701a:	       move.l 52(sp),d2
    701e:	       move.l 48(sp),d3
    7022:	       jsr -66(a6)
    7026:	       move.l d0,44(sp)
    702a:	       move.l 44(sp),d0
    702e:	       move.l d0,1a794 <startOfDataIndex>
    7034:	       nop
    7036:	       movem.l (sp)+,d2-d3/a6
    703a:	       lea 180(sp),sp
    703e:	       rts

00007040 <GetVBR>:
static volatile APTR VBR=0;
static APTR SystemIrq;
 
struct View *ActiView;

static APTR GetVBR(void) {
    7040:	    lea -20(sp),sp
    7044:	    move.l a6,-(sp)
    7046:	    move.l d7,-(sp)
	APTR vbr = 0;
    7048:	    clr.l 24(sp)
	UWORD getvbr[] = { 0x4e7a, 0x0801, 0x4e73 }; // MOVEC.L VBR,D0 RTE
    704c:	    move.w #20090,10(sp)
    7052:	    move.w #2049,12(sp)
    7058:	    move.w #20083,14(sp)

	if (SysBase->AttnFlags & AFF_68010) 
    705e:	    movea.l 1a7a4 <SysBase>,a0
    7064:	    move.w 296(a0),d0
    7068:	    move.w d0,d0
    706a:	    andi.l #65535,d0
    7070:	    moveq #1,d1
    7072:	    and.l d1,d0
    7074:	/-- beq.s 70a2 <GetVBR+0x62>
		vbr = (APTR)Supervisor((ULONG (*)())getvbr);
    7076:	|   lea 28(sp),a0
    707a:	|   lea -18(a0),a0
    707e:	|   move.l a0,20(sp)
    7082:	|   move.l 1a7a4 <SysBase>,d0
    7088:	|   movea.l d0,a6
    708a:	|   move.l 20(sp),d7
    708e:	|   exg d7,a5
    7090:	|   jsr -30(a6)
    7094:	|   exg d7,a5
    7096:	|   move.l d0,16(sp)
    709a:	|   move.l 16(sp),d0
    709e:	|   move.l d0,24(sp)

	return vbr;
    70a2:	\-> move.l 24(sp),d0
}
    70a6:	    move.l (sp)+,d7
    70a8:	    movea.l (sp)+,a6
    70aa:	    lea 20(sp),sp
    70ae:	    rts

000070b0 <SetInterruptHandler>:

void SetInterruptHandler(APTR interrupt) {
	*(volatile APTR*)(((UBYTE*)VBR)+0x6c) = interrupt;
    70b0:	movea.l 1a7ca <VBR>,a0
    70b6:	lea 108(a0),a0
    70ba:	move.l 4(sp),(a0)
}
    70be:	nop
    70c0:	rts

000070c2 <GetInterruptHandler>:

APTR GetInterruptHandler() {
	return *(volatile APTR*)(((UBYTE*)VBR)+0x6c);
    70c2:	movea.l 1a7ca <VBR>,a0
    70c8:	move.l 108(a0),d0
}
    70cc:	rts

000070ce <TakeSystem>:
	UWORD tst=*(volatile UWORD*)&custom->dmaconr; //for compatiblity a1000
	(void)tst;
	while (*(volatile UWORD*)&custom->dmaconr&(1<<14)) {} //blitter busy wait
}

void TakeSystem() {
    70ce:	       subq.l #8,sp
    70d0:	       move.l a6,-(sp)
	KPrintF("TakeSystem: Run Forbid\n");
    70d2:	       pea 18b8f <PutChar+0x10b1>
    70d8:	       jsr 1703c <KPrintF>
    70de:	       addq.l #4,sp
	Forbid();
    70e0:	       move.l 1a7a4 <SysBase>,d0
    70e6:	       movea.l d0,a6
    70e8:	       jsr -132(a6)
	//Save current interrupts and DMA settings so we can restore them upon exit. 
	KPrintF("TakeSystem: Saving Registers\n");
    70ec:	       pea 18ba7 <PutChar+0x10c9>
    70f2:	       jsr 1703c <KPrintF>
    70f8:	       addq.l #4,sp
	SystemADKCON=custom->adkconr;
    70fa:	       movea.l 1a7a8 <custom>,a0
    7100:	       move.w 16(a0),d0
    7104:	       move.w d0,1a7c8 <SystemADKCON>
	SystemInts=custom->intenar;
    710a:	       movea.l 1a7a8 <custom>,a0
    7110:	       move.w 28(a0),d0
    7114:	       move.w d0,1a7c4 <SystemInts>
	SystemDMA=custom->dmaconr;
    711a:	       movea.l 1a7a8 <custom>,a0
    7120:	       move.w 2(a0),d0
    7124:	       move.w d0,1a7c6 <SystemDMA>
	ActiView=GfxBase->ActiView; //store current view
    712a:	       movea.l 1a7b0 <GfxBase>,a0
    7130:	       move.l 34(a0),d0
    7134:	       move.l d0,1a7d2 <ActiView>

	KPrintF("TakeSystem: LoadView\n");
    713a:	       pea 18bc5 <PutChar+0x10e7>
    7140:	       jsr 1703c <KPrintF>
    7146:	       addq.l #4,sp
	LoadView(0);
    7148:	       clr.l 4(sp)
    714c:	       move.l 1a7b0 <GfxBase>,d0
    7152:	       movea.l d0,a6
    7154:	       movea.l 4(sp),a1
    7158:	       jsr -222(a6)
	KPrintF("TakeSystem: WaitTof\n");
    715c:	       pea 18bdb <PutChar+0x10fd>
    7162:	       jsr 1703c <KPrintF>
    7168:	       addq.l #4,sp
	WaitTOF();
    716a:	       move.l 1a7b0 <GfxBase>,d0
    7170:	       movea.l d0,a6
    7172:	       jsr -270(a6)
	WaitTOF();
    7176:	       move.l 1a7b0 <GfxBase>,d0
    717c:	       movea.l d0,a6
    717e:	       jsr -270(a6)

	KPrintF("TakeSystem: WaitVBL\n");
    7182:	       pea 18bf0 <PutChar+0x1112>
    7188:	       jsr 1703c <KPrintF>
    718e:	       addq.l #4,sp
	WaitVbl();
    7190:	       jsr 16f70 <WaitVbl>
	WaitVbl();
    7196:	       jsr 16f70 <WaitVbl>

	KPrintF("TakeSystem: Doing Blitter Stuff\n");
    719c:	       pea 18c05 <PutChar+0x1127>
    71a2:	       jsr 1703c <KPrintF>
    71a8:	       addq.l #4,sp
	OwnBlitter();
    71aa:	       move.l 1a7b0 <GfxBase>,d0
    71b0:	       movea.l d0,a6
    71b2:	       jsr -456(a6)
	WaitBlit();	
    71b6:	       move.l 1a7b0 <GfxBase>,d0
    71bc:	       movea.l d0,a6
    71be:	       jsr -228(a6)
	Disable();
    71c2:	       move.l 1a7a4 <SysBase>,d0
    71c8:	       movea.l d0,a6
    71ca:	       jsr -120(a6)
	
	//custom->intena=0x7fff;//disable all interrupts
	//custom->intreq=0x7fff;//Clear any interrupts that were pending
	
	KPrintF("TakeSystem: Clear DMA\n");
    71ce:	       pea 18c26 <PutChar+0x1148>
    71d4:	       jsr 1703c <KPrintF>
    71da:	       addq.l #4,sp
	custom->dmacon=0x7fff;//Clear all DMA channels
    71dc:	       movea.l 1a7a8 <custom>,a0
    71e2:	       move.w #32767,150(a0)

	KPrintF("TakeSystem: Set all colors to black\n");
    71e8:	       pea 18c3d <PutChar+0x115f>
    71ee:	       jsr 1703c <KPrintF>
    71f4:	       addq.l #4,sp
	//set all colors black
	for(int a=0;a<32;a++)
    71f6:	       clr.l 8(sp)
    71fa:	   /-- bra.s 7218 <TakeSystem+0x14a>
		custom->color[a]=0;
    71fc:	/--|-> movea.l 1a7a8 <custom>,a0
    7202:	|  |   move.l 8(sp),d0
    7206:	|  |   addi.l #192,d0
    720c:	|  |   add.l d0,d0
    720e:	|  |   move.w #0,(0,a0,d0.l)
	for(int a=0;a<32;a++)
    7214:	|  |   addq.l #1,8(sp)
    7218:	|  \-> moveq #31,d0
    721a:	|      cmp.l 8(sp),d0
    721e:	\----- bge.s 71fc <TakeSystem+0x12e>

	WaitVbl();
    7220:	       jsr 16f70 <WaitVbl>
	WaitVbl();
    7226:	       jsr 16f70 <WaitVbl>

	KPrintF("TakeSystem: Save System interrupts\n");
    722c:	       pea 18c62 <PutChar+0x1184>
    7232:	       jsr 1703c <KPrintF>
    7238:	       addq.l #4,sp
	VBR=GetVBR();
    723a:	       jsr 7040 <GetVBR>
    7240:	       move.l d0,1a7ca <VBR>
	SystemIrq=GetInterruptHandler(); //store interrupt register*/
    7246:	       jsr 70c2 <GetInterruptHandler>
    724c:	       move.l d0,1a7ce <SystemIrq>
}
    7252:	       nop
    7254:	       movea.l (sp)+,a6
    7256:	       addq.l #8,sp
    7258:	       rts

0000725a <FreeSystem>:

void FreeSystem() { 
    725a:	subq.l #4,sp
    725c:	move.l a6,-(sp)
	WaitVbl();
    725e:	jsr 16f70 <WaitVbl>
	WaitBlit();
    7264:	move.l 1a7b0 <GfxBase>,d0
    726a:	movea.l d0,a6
    726c:	jsr -228(a6)
	custom->intena=0x7fff;//disable all interrupts
    7270:	movea.l 1a7a8 <custom>,a0
    7276:	move.w #32767,154(a0)
	custom->intreq=0x7fff;//Clear any interrupts that were pending
    727c:	movea.l 1a7a8 <custom>,a0
    7282:	move.w #32767,156(a0)
	custom->dmacon=0x7fff;//Clear all DMA channels
    7288:	movea.l 1a7a8 <custom>,a0
    728e:	move.w #32767,150(a0)

	//restore interrupts
	SetInterruptHandler(SystemIrq);
    7294:	move.l 1a7ce <SystemIrq>,d0
    729a:	move.l d0,-(sp)
    729c:	jsr 70b0 <SetInterruptHandler>
    72a2:	addq.l #4,sp

	/*Restore system copper list(s). */
	custom->cop1lc=(ULONG)GfxBase->copinit;
    72a4:	movea.l 1a7b0 <GfxBase>,a0
    72aa:	move.l 38(a0),d0
    72ae:	movea.l 1a7a8 <custom>,a0
    72b4:	move.l d0,128(a0)
	custom->cop2lc=(ULONG)GfxBase->LOFlist;
    72b8:	movea.l 1a7b0 <GfxBase>,a0
    72be:	move.l 50(a0),d0
    72c2:	movea.l 1a7a8 <custom>,a0
    72c8:	move.l d0,132(a0)
	custom->copjmp1=0x7fff; //start coppper
    72cc:	movea.l 1a7a8 <custom>,a0
    72d2:	move.w #32767,136(a0)

	/*Restore all interrupts and DMA settings. */
	//custom->intena=SystemInts|0x8000;
	custom->dmacon=SystemDMA|0x8000;
    72d8:	move.w 1a7c6 <SystemDMA>,d0
    72de:	movea.l 1a7a8 <custom>,a0
    72e4:	ori.w #-32768,d0
    72e8:	move.w d0,150(a0)
	custom->adkcon=SystemADKCON|0x8000;
    72ec:	move.w 1a7c8 <SystemADKCON>,d0
    72f2:	movea.l 1a7a8 <custom>,a0
    72f8:	ori.w #-32768,d0
    72fc:	move.w d0,158(a0)

	WaitBlit();	
    7300:	move.l 1a7b0 <GfxBase>,d0
    7306:	movea.l d0,a6
    7308:	jsr -228(a6)
	DisownBlitter();
    730c:	move.l 1a7b0 <GfxBase>,d0
    7312:	movea.l d0,a6
    7314:	jsr -462(a6)
	Enable();
    7318:	move.l 1a7a4 <SysBase>,d0
    731e:	movea.l d0,a6
    7320:	jsr -126(a6)

	LoadView(ActiView);
    7324:	move.l 1a7d2 <ActiView>,4(sp)
    732c:	move.l 1a7b0 <GfxBase>,d0
    7332:	movea.l d0,a6
    7334:	movea.l 4(sp),a1
    7338:	jsr -222(a6)
	WaitTOF();
    733c:	move.l 1a7b0 <GfxBase>,d0
    7342:	movea.l d0,a6
    7344:	jsr -270(a6)
	WaitTOF();
    7348:	move.l 1a7b0 <GfxBase>,d0
    734e:	movea.l d0,a6
    7350:	jsr -270(a6)

	Permit();
    7354:	move.l 1a7a4 <SysBase>,d0
    735a:	movea.l d0,a6
    735c:	jsr -138(a6)
}
    7360:	nop
    7362:	movea.l (sp)+,a6
    7364:	addq.l #4,sp
    7366:	rts

00007368 <main>:
static void Wait10() { WaitLine(0x10); }
static void Wait11() { WaitLine(0x11); }
static void Wait12() { WaitLine(0x12); }
static void Wait13() { WaitLine(0x13); }

int main(int argc, char *argv[]) {
    7368:	    lea -132(sp),sp
    736c:	    movem.l d2-d3/a6,-(sp)

	int *bp = 0x200;
    7370:	    move.l #512,140(sp)
  	*bp = 0;
    7378:	    movea.l 140(sp),a0
    737c:	    clr.l (a0)

	SysBase = *((struct ExecBase**)4UL);
    737e:	    movea.w #4,a0
    7382:	    move.l (a0),d0
    7384:	    move.l d0,1a7a4 <SysBase>
	custom = (struct Custom*)0xdff000;	
    738a:	    move.l #14675968,1a7a8 <custom>


	// We will use the graphics library only to locate and restore the system copper list once we are through.
	GfxBase = (struct GfxBase *)OpenLibrary((CONST_STRPTR)"graphics.library",0);
    7394:	    move.l #101510,136(sp)
    739c:	    clr.l 132(sp)
    73a0:	    move.l 1a7a4 <SysBase>,d0
    73a6:	    movea.l d0,a6
    73a8:	    movea.l 136(sp),a1
    73ac:	    move.l 132(sp),d0
    73b0:	    jsr -552(a6)
    73b4:	    move.l d0,128(sp)
    73b8:	    move.l 128(sp),d0
    73bc:	    move.l d0,1a7b0 <GfxBase>
	if (!GfxBase)
    73c2:	    move.l 1a7b0 <GfxBase>,d0
    73c8:	/-- bne.s 73de <main+0x76>
		Exit(0);
    73ca:	|   clr.l 124(sp)
    73ce:	|   move.l 1a7ac <DOSBase>,d0
    73d4:	|   movea.l d0,a6
    73d6:	|   move.l 124(sp),d1
    73da:	|   jsr -144(a6)

	// used for printing
	DOSBase = (struct DosLibrary*)OpenLibrary((CONST_STRPTR)"dos.library", 0);
    73de:	\-> move.l #101527,120(sp)
    73e6:	    clr.l 116(sp)
    73ea:	    move.l 1a7a4 <SysBase>,d0
    73f0:	    movea.l d0,a6
    73f2:	    movea.l 120(sp),a1
    73f6:	    move.l 116(sp),d0
    73fa:	    jsr -552(a6)
    73fe:	    move.l d0,112(sp)
    7402:	    move.l 112(sp),d0
    7406:	    move.l d0,1a7ac <DOSBase>
	if (!DOSBase)
    740c:	    move.l 1a7ac <DOSBase>,d0
    7412:	/-- bne.s 7428 <main+0xc0>
		Exit(0);
    7414:	|   clr.l 108(sp)
    7418:	|   move.l 1a7ac <DOSBase>,d0
    741e:	|   movea.l d0,a6
    7420:	|   move.l 108(sp),d1
    7424:	|   jsr -144(a6)

	MathIeeeSingBasBase = (struct MathIEEEBase *) OpenLibrary("mathieeesingbas.library", 0);	
    7428:	\-> move.l #101539,104(sp)
    7430:	    clr.l 100(sp)
    7434:	    move.l 1a7a4 <SysBase>,d0
    743a:	    movea.l d0,a6
    743c:	    movea.l 104(sp),a1
    7440:	    move.l 100(sp),d0
    7444:	    jsr -552(a6)
    7448:	    move.l d0,96(sp)
    744c:	    move.l 96(sp),d0
    7450:	    move.l d0,1a7b4 <MathIeeeSingBasBase>
	if (!MathIeeeSingBasBase)
    7456:	    move.l 1a7b4 <MathIeeeSingBasBase>,d0
    745c:	/-- bne.s 7472 <main+0x10a>
		Exit(0);	
    745e:	|   clr.l 92(sp)
    7462:	|   move.l 1a7ac <DOSBase>,d0
    7468:	|   movea.l d0,a6
    746a:	|   move.l 92(sp),d1
    746e:	|   jsr -144(a6)

	MathIeeeSingTransBase = (struct MathIEEEBase *) OpenLibrary("mathieeesingtrans.library",0);													
    7472:	\-> move.l #101563,88(sp)
    747a:	    clr.l 84(sp)
    747e:	    move.l 1a7a4 <SysBase>,d0
    7484:	    movea.l d0,a6
    7486:	    movea.l 88(sp),a1
    748a:	    move.l 84(sp),d0
    748e:	    jsr -552(a6)
    7492:	    move.l d0,80(sp)
    7496:	    move.l 80(sp),d0
    749a:	    move.l d0,1a7b8 <MathIeeeSingTransBase>
	if (!MathIeeeSingTransBase)
    74a0:	    move.l 1a7b8 <MathIeeeSingTransBase>,d0
    74a6:	/-- bne.s 74bc <main+0x154>
		Exit(0);
    74a8:	|   clr.l 76(sp)
    74ac:	|   move.l 1a7ac <DOSBase>,d0
    74b2:	|   movea.l d0,a6
    74b4:	|   move.l 76(sp),d1
    74b8:	|   jsr -144(a6)

	MathIeeeDoubTransBase =  (struct MathIEEEBase *) OpenLibrary("mathieeedoubtrans.library",0);
    74bc:	\-> move.l #101589,72(sp)
    74c4:	    clr.l 68(sp)
    74c8:	    move.l 1a7a4 <SysBase>,d0
    74ce:	    movea.l d0,a6
    74d0:	    movea.l 72(sp),a1
    74d4:	    move.l 68(sp),d0
    74d8:	    jsr -552(a6)
    74dc:	    move.l d0,64(sp)
    74e0:	    move.l 64(sp),d0
    74e4:	    move.l d0,1a7c0 <MathIeeeDoubTransBase>
	if (!MathIeeeDoubTransBase)		
    74ea:	    move.l 1a7c0 <MathIeeeDoubTransBase>,d0
    74f0:	/-- bne.s 7506 <main+0x19e>
		Exit(0);
    74f2:	|   clr.l 60(sp)
    74f6:	|   move.l 1a7ac <DOSBase>,d0
    74fc:	|   movea.l d0,a6
    74fe:	|   move.l 60(sp),d1
    7502:	|   jsr -144(a6)

	MathIeeeDoubBasBase = (struct MathIEEEBase *) OpenLibrary("mathieeedoubbas.library",0);
    7506:	\-> move.l #101615,56(sp)
    750e:	    clr.l 52(sp)
    7512:	    move.l 1a7a4 <SysBase>,d0
    7518:	    movea.l d0,a6
    751a:	    movea.l 56(sp),a1
    751e:	    move.l 52(sp),d0
    7522:	    jsr -552(a6)
    7526:	    move.l d0,48(sp)
    752a:	    move.l 48(sp),d0
    752e:	    move.l d0,1a7bc <MathIeeeDoubBasBase>
	if( !MathIeeeDoubBasBase) 
    7534:	    move.l 1a7bc <MathIeeeDoubBasBase>,d0
    753a:	/-- bne.s 7550 <main+0x1e8>
		Exit(0);
    753c:	|   clr.l 44(sp)
    7540:	|   move.l 1a7ac <DOSBase>,d0
    7546:	|   movea.l d0,a6
    7548:	|   move.l 44(sp),d1
    754c:	|   jsr -144(a6)
	

	KPrintF(" debugger from Amiga Test 032!\n");
    7550:	\-> pea 18d07 <PutChar+0x1229>
    7556:	    jsr 1703c <KPrintF>
    755c:	    addq.l #4,sp

	Write(Output(), (APTR)"Hello console Test 032!\n", 25);
    755e:	    move.l 1a7ac <DOSBase>,d0
    7564:	    movea.l d0,a6
    7566:	    jsr -60(a6)
    756a:	    move.l d0,40(sp)
    756e:	    move.l 40(sp),d0
    7572:	    move.l d0,36(sp)
    7576:	    move.l #101671,32(sp)
    757e:	    moveq #25,d0
    7580:	    move.l d0,28(sp)
    7584:	    move.l 1a7ac <DOSBase>,d0
    758a:	    movea.l d0,a6
    758c:	    move.l 36(sp),d1
    7590:	    move.l 32(sp),d2
    7594:	    move.l 28(sp),d3
    7598:	    jsr -48(a6)
    759c:	    move.l d0,24(sp)
	Delay(50);
    75a0:	    moveq #50,d0
    75a2:	    move.l d0,20(sp)
    75a6:	    move.l 1a7ac <DOSBase>,d0
    75ac:	    movea.l d0,a6
    75ae:	    move.l 20(sp),d1
    75b2:	    jsr -198(a6)
	if(p61Init(module) != 0)
		KPrintF("p61Init failed!\n");
#endif
	warpmode(0);*/

	KPrintF("Taking System\n");
    75b6:	    pea 18d40 <PutChar+0x1262>
    75bc:	    jsr 1703c <KPrintF>
    75c2:	    addq.l #4,sp
	TakeSystem();
    75c4:	    jsr 70ce <TakeSystem>
	KPrintF("System Taken\n");
    75ca:	    pea 18d4f <PutChar+0x1271>
    75d0:	    jsr 1703c <KPrintF>
    75d6:	    addq.l #4,sp

	custom->dmacon = 0x87ff;
    75d8:	    movea.l 1a7a8 <custom>,a0
    75de:	    move.w #-30721,150(a0)
	WaitVbl();
    75e4:	    jsr 16f70 <WaitVbl>

	KPrintF("Starting main_sludge\n");
    75ea:	    pea 18d5d <PutChar+0x127f>
    75f0:	    jsr 1703c <KPrintF>
    75f6:	    addq.l #4,sp
	main_sludge(argc, argv);	
    75f8:	    move.l 152(sp),-(sp)
    75fc:	    move.l 152(sp),-(sp)
    7600:	    jsr 3efe <main_sludge>
    7606:	    addq.l #8,sp
#ifdef MUSIC
	p61End();
#endif

	// END
	FreeSystem();
    7608:	    jsr 725a <FreeSystem>

	CloseLibrary((struct Library*)DOSBase);
    760e:	    move.l 1a7ac <DOSBase>,16(sp)
    7616:	    move.l 1a7a4 <SysBase>,d0
    761c:	    movea.l d0,a6
    761e:	    movea.l 16(sp),a1
    7622:	    jsr -414(a6)
	CloseLibrary((struct Library*)GfxBase);
    7626:	    move.l 1a7b0 <GfxBase>,12(sp)
    762e:	    move.l 1a7a4 <SysBase>,d0
    7634:	    movea.l d0,a6
    7636:	    movea.l 12(sp),a1
    763a:	    jsr -414(a6)
    763e:	    moveq #0,d0
}
    7640:	    movem.l (sp)+,d2-d3/a6
    7644:	    lea 132(sp),sp
    7648:	    rts

0000764a <addStatusBar>:
#include "support/gcc8_c_support.h"

struct statusStuff mainStatus;
struct statusStuff * nowStatus = & mainStatus;

void addStatusBar () {
    764a:	    lea -16(sp),sp
    764e:	    move.l a6,-(sp)
	struct statusBar * newStat = AllocVec(sizeof(struct statusBar), MEMF_ANY);
    7650:	    moveq #8,d0
    7652:	    move.l d0,16(sp)
    7656:	    clr.l 12(sp)
    765a:	    move.l 1a7a4 <SysBase>,d0
    7660:	    movea.l d0,a6
    7662:	    move.l 16(sp),d0
    7666:	    move.l 12(sp),d1
    766a:	    jsr -684(a6)
    766e:	    move.l d0,8(sp)
    7672:	    move.l 8(sp),d0
    7676:	    move.l d0,4(sp)
	if (!newStat) {
    767a:	/-- bne.s 76aa <addStatusBar+0x60>
		newStat -> next = nowStatus -> firstStatusBar;
    767c:	|   movea.l 1a12a <nowStatus>,a0
    7682:	|   move.l (a0),d0
    7684:	|   movea.l 4(sp),a0
    7688:	|   move.l d0,4(a0)
		newStat -> text = copyString ("");
    768c:	|   pea 187b3 <PutChar+0xcd5>
    7692:	|   jsr b8 <copyString>
    7698:	|   addq.l #4,sp
    769a:	|   movea.l 4(sp),a0
    769e:	|   move.l d0,(a0)
		nowStatus -> firstStatusBar = newStat;
    76a0:	|   movea.l 1a12a <nowStatus>,a0
    76a6:	|   move.l 4(sp),(a0)
	}
}
    76aa:	\-> nop
    76ac:	    movea.l (sp)+,a6
    76ae:	    lea 16(sp),sp
    76b2:	    rts

000076b4 <clearStatusBar>:

void clearStatusBar () {
    76b4:	       lea -16(sp),sp
    76b8:	       move.l a6,-(sp)
	struct statusBar * stat = nowStatus -> firstStatusBar;
    76ba:	       movea.l 1a12a <nowStatus>,a0
    76c0:	       move.l (a0),16(sp)
	struct statusBar * kill;
	nowStatus -> litStatus = -1;
    76c4:	       movea.l 1a12a <nowStatus>,a0
    76ca:	       moveq #-1,d0
    76cc:	       move.l d0,6(a0)
	while (stat) {
    76d0:	   /-- bra.s 7710 <clearStatusBar+0x5c>
		kill = stat;
    76d2:	/--|-> move.l 16(sp),12(sp)
		stat = stat -> next;
    76d8:	|  |   movea.l 16(sp),a0
    76dc:	|  |   move.l 4(a0),16(sp)
		FreeVec(kill -> text);
    76e2:	|  |   movea.l 12(sp),a0
    76e6:	|  |   move.l (a0),8(sp)
    76ea:	|  |   move.l 1a7a4 <SysBase>,d0
    76f0:	|  |   movea.l d0,a6
    76f2:	|  |   movea.l 8(sp),a1
    76f6:	|  |   jsr -690(a6)
		FreeVec(kill);
    76fa:	|  |   move.l 12(sp),4(sp)
    7700:	|  |   move.l 1a7a4 <SysBase>,d0
    7706:	|  |   movea.l d0,a6
    7708:	|  |   movea.l 4(sp),a1
    770c:	|  |   jsr -690(a6)
	while (stat) {
    7710:	|  \-> tst.l 16(sp)
    7714:	\----- bne.s 76d2 <clearStatusBar+0x1e>
	}
	nowStatus -> firstStatusBar = NULL;
    7716:	       movea.l 1a12a <nowStatus>,a0
    771c:	       clr.l (a0)
}
    771e:	       nop
    7720:	       movea.l (sp)+,a6
    7722:	       lea 16(sp),sp
    7726:	       rts

00007728 <initStatusBar>:

void initStatusBar () {
	mainStatus.firstStatusBar = NULL;
    7728:	clr.l 1a7d6 <mainStatus>
	mainStatus.alignStatus = IN_THE_CENTRE;
    772e:	move.w #-1,1a7da <mainStatus+0x4>
	mainStatus.litStatus = -1;
    7736:	moveq #-1,d0
    7738:	move.l d0,1a7dc <mainStatus+0x6>
	mainStatus.statusX = 10;
    773e:	moveq #10,d0
    7740:	move.l d0,1a7e0 <mainStatus+0xa>
	mainStatus.statusY = winHeight - 15;
    7746:	movea.l 1a6fc <winHeight>,a0
    774c:	lea -15(a0),a0
    7750:	move.l a0,d0
    7752:	move.l d0,1a7e4 <mainStatus+0xe>
	//statusBarColour (255, 255, 255); Amiga Todo: Amigize this
	//statusBarLitColour (255, 255, 128); Amiga Todo: Amigize this
}
    7758:	nop
    775a:	rts

0000775c <killLastStatus>:

void killLastStatus () {
    775c:	    lea -12(sp),sp
    7760:	    move.l a6,-(sp)
	if (nowStatus -> firstStatusBar) {
    7762:	    movea.l 1a12a <nowStatus>,a0
    7768:	    move.l (a0),d0
    776a:	/-- beq.s 77b4 <killLastStatus+0x58>
		struct statusBar * kill = nowStatus -> firstStatusBar;
    776c:	|   movea.l 1a12a <nowStatus>,a0
    7772:	|   move.l (a0),12(sp)
		nowStatus -> firstStatusBar = kill -> next;
    7776:	|   movea.l 1a12a <nowStatus>,a0
    777c:	|   movea.l 12(sp),a1
    7780:	|   move.l 4(a1),d0
    7784:	|   move.l d0,(a0)
		FreeVec(kill -> text);
    7786:	|   movea.l 12(sp),a0
    778a:	|   move.l (a0),8(sp)
    778e:	|   move.l 1a7a4 <SysBase>,d0
    7794:	|   movea.l d0,a6
    7796:	|   movea.l 8(sp),a1
    779a:	|   jsr -690(a6)
		FreeVec(kill);
    779e:	|   move.l 12(sp),4(sp)
    77a4:	|   move.l 1a7a4 <SysBase>,d0
    77aa:	|   movea.l d0,a6
    77ac:	|   movea.l 4(sp),a1
    77b0:	|   jsr -690(a6)
	}
}
    77b4:	\-> nop
    77b6:	    movea.l (sp)+,a6
    77b8:	    lea 12(sp),sp
    77bc:	    rts

000077be <positionStatus>:
	}
	return TRUE;
}

void positionStatus (int x, int y) {
	nowStatus -> statusX = x;
    77be:	movea.l 1a12a <nowStatus>,a0
    77c4:	move.l 4(sp),10(a0)
	nowStatus -> statusY = y;
    77ca:	movea.l 1a12a <nowStatus>,a0
    77d0:	move.l 8(sp),14(a0)
}
    77d6:	nop
    77d8:	rts

000077da <saveStatusBars>:


void saveStatusBars (BPTR fp) {
    77da:	       lea -100(sp),sp
    77de:	       move.l a6,-(sp)
    77e0:	       move.l d2,-(sp)
	struct statusBar * viewLine = nowStatus -> firstStatusBar;
    77e2:	       movea.l 1a12a <nowStatus>,a0
    77e8:	       move.l (a0),104(sp)

	put2bytes (nowStatus -> alignStatus, fp);
    77ec:	       movea.l 1a12a <nowStatus>,a0
    77f2:	       move.w 4(a0),d0
    77f6:	       move.w d0,d0
    77f8:	       andi.l #65535,d0
    77fe:	       move.l 112(sp),-(sp)
    7802:	       move.l d0,-(sp)
    7804:	       jsr 8d0 <put2bytes>
    780a:	       addq.l #8,sp
	putSigned (nowStatus -> litStatus, fp);
    780c:	       movea.l 1a12a <nowStatus>,a0
    7812:	       move.l 6(a0),d0
    7816:	       move.l d0,d0
    7818:	       movea.w d0,a0
    781a:	       move.l 112(sp),-(sp)
    781e:	       move.l a0,-(sp)
    7820:	       jsr a9c <putSigned>
    7826:	       addq.l #8,sp
	put2bytes (nowStatus -> statusX, fp);
    7828:	       movea.l 1a12a <nowStatus>,a0
    782e:	       move.l 10(a0),d0
    7832:	       move.l 112(sp),-(sp)
    7836:	       move.l d0,-(sp)
    7838:	       jsr 8d0 <put2bytes>
    783e:	       addq.l #8,sp
	put2bytes (nowStatus -> statusY, fp);
    7840:	       movea.l 1a12a <nowStatus>,a0
    7846:	       move.l 14(a0),d0
    784a:	       move.l 112(sp),-(sp)
    784e:	       move.l d0,-(sp)
    7850:	       jsr 8d0 <put2bytes>
    7856:	       addq.l #8,sp

	FPutC (fp, nowStatus -> statusR);
    7858:	       move.l 112(sp),100(sp)
    785e:	       movea.l 1a12a <nowStatus>,a0
    7864:	       move.l 18(a0),96(sp)
    786a:	       move.l 1a7ac <DOSBase>,d0
    7870:	       movea.l d0,a6
    7872:	       move.l 100(sp),d1
    7876:	       move.l 96(sp),d2
    787a:	       jsr -312(a6)
    787e:	       move.l d0,92(sp)
	FPutC (fp, nowStatus -> statusG);
    7882:	       move.l 112(sp),88(sp)
    7888:	       movea.l 1a12a <nowStatus>,a0
    788e:	       move.l 22(a0),84(sp)
    7894:	       move.l 1a7ac <DOSBase>,d0
    789a:	       movea.l d0,a6
    789c:	       move.l 88(sp),d1
    78a0:	       move.l 84(sp),d2
    78a4:	       jsr -312(a6)
    78a8:	       move.l d0,80(sp)
	FPutC (fp, nowStatus -> statusB);
    78ac:	       move.l 112(sp),76(sp)
    78b2:	       movea.l 1a12a <nowStatus>,a0
    78b8:	       move.l 26(a0),72(sp)
    78be:	       move.l 1a7ac <DOSBase>,d0
    78c4:	       movea.l d0,a6
    78c6:	       move.l 76(sp),d1
    78ca:	       move.l 72(sp),d2
    78ce:	       jsr -312(a6)
    78d2:	       move.l d0,68(sp)
	FPutC (fp, nowStatus -> statusLR);
    78d6:	       move.l 112(sp),64(sp)
    78dc:	       movea.l 1a12a <nowStatus>,a0
    78e2:	       move.l 30(a0),60(sp)
    78e8:	       move.l 1a7ac <DOSBase>,d0
    78ee:	       movea.l d0,a6
    78f0:	       move.l 64(sp),d1
    78f4:	       move.l 60(sp),d2
    78f8:	       jsr -312(a6)
    78fc:	       move.l d0,56(sp)
	FPutC (fp, nowStatus -> statusLG);
    7900:	       move.l 112(sp),52(sp)
    7906:	       movea.l 1a12a <nowStatus>,a0
    790c:	       move.l 34(a0),48(sp)
    7912:	       move.l 1a7ac <DOSBase>,d0
    7918:	       movea.l d0,a6
    791a:	       move.l 52(sp),d1
    791e:	       move.l 48(sp),d2
    7922:	       jsr -312(a6)
    7926:	       move.l d0,44(sp)
	FPutC (fp, nowStatus -> statusLB);
    792a:	       move.l 112(sp),40(sp)
    7930:	       movea.l 1a12a <nowStatus>,a0
    7936:	       move.l 38(a0),36(sp)
    793c:	       move.l 1a7ac <DOSBase>,d0
    7942:	       movea.l d0,a6
    7944:	       move.l 40(sp),d1
    7948:	       move.l 36(sp),d2
    794c:	       jsr -312(a6)
    7950:	       move.l d0,32(sp)

	// Write what's being said
	while (viewLine) {
    7954:	   /-- bra.s 7998 <saveStatusBars+0x1be>
		FPutC (fp,1);
    7956:	/--|-> move.l 112(sp),16(sp)
    795c:	|  |   moveq #1,d0
    795e:	|  |   move.l d0,12(sp)
    7962:	|  |   move.l 1a7ac <DOSBase>,d0
    7968:	|  |   movea.l d0,a6
    796a:	|  |   move.l 16(sp),d1
    796e:	|  |   move.l 12(sp),d2
    7972:	|  |   jsr -312(a6)
    7976:	|  |   move.l d0,8(sp)
		writeString (viewLine -> text, fp);
    797a:	|  |   movea.l 104(sp),a0
    797e:	|  |   move.l (a0),d0
    7980:	|  |   move.l 112(sp),-(sp)
    7984:	|  |   move.l d0,-(sp)
    7986:	|  |   jsr bd8 <writeString>
    798c:	|  |   addq.l #8,sp
		viewLine = viewLine -> next;
    798e:	|  |   movea.l 104(sp),a0
    7992:	|  |   move.l 4(a0),104(sp)
	while (viewLine) {
    7998:	|  \-> tst.l 104(sp)
    799c:	\----- bne.s 7956 <saveStatusBars+0x17c>
	}
	FPutC (fp,0);
    799e:	       move.l 112(sp),28(sp)
    79a4:	       clr.l 24(sp)
    79a8:	       move.l 1a7ac <DOSBase>,d0
    79ae:	       movea.l d0,a6
    79b0:	       move.l 28(sp),d1
    79b4:	       move.l 24(sp),d2
    79b8:	       jsr -312(a6)
    79bc:	       move.l d0,20(sp)
}
    79c0:	       nop
    79c2:	       move.l (sp)+,d2
    79c4:	       movea.l (sp)+,a6
    79c6:	       lea 100(sp),sp
    79ca:	       rts

000079cc <setLitStatus>:

void setLitStatus (int i) {
	nowStatus -> litStatus = i;
    79cc:	movea.l 1a12a <nowStatus>,a0
    79d2:	move.l 4(sp),6(a0)
}
    79d8:	nop
    79da:	rts

000079dc <setStatusBar>:

void setStatusBar (char * txt) {
    79dc:	    subq.l #4,sp
    79de:	    move.l a6,-(sp)
    79e0:	    move.l a2,-(sp)
	if (nowStatus -> firstStatusBar) {
    79e2:	    movea.l 1a12a <nowStatus>,a0
    79e8:	    move.l (a0),d0
    79ea:	/-- beq.s 7a1e <setStatusBar+0x42>
		FreeVec(nowStatus -> firstStatusBar -> text);
    79ec:	|   movea.l 1a12a <nowStatus>,a0
    79f2:	|   movea.l (a0),a0
    79f4:	|   move.l (a0),8(sp)
    79f8:	|   move.l 1a7a4 <SysBase>,d0
    79fe:	|   movea.l d0,a6
    7a00:	|   movea.l 8(sp),a1
    7a04:	|   jsr -690(a6)
		nowStatus -> firstStatusBar -> text = copyString (txt);
    7a08:	|   movea.l 1a12a <nowStatus>,a0
    7a0e:	|   movea.l (a0),a2
    7a10:	|   move.l 16(sp),-(sp)
    7a14:	|   jsr b8 <copyString>
    7a1a:	|   addq.l #4,sp
    7a1c:	|   move.l d0,(a2)
	}
}
    7a1e:	\-> nop
    7a20:	    movea.l (sp)+,a2
    7a22:	    movea.l (sp)+,a6
    7a24:	    addq.l #4,sp
    7a26:	    rts

00007a28 <statusBarText>:

const char * statusBarText () {
	if (nowStatus -> firstStatusBar) {
    7a28:	       movea.l 1a12a <nowStatus>,a0
    7a2e:	       move.l (a0),d0
    7a30:	/----- beq.s 7a3e <statusBarText+0x16>
		return nowStatus -> firstStatusBar -> text;
    7a32:	|      movea.l 1a12a <nowStatus>,a0
    7a38:	|      movea.l (a0),a0
    7a3a:	|      move.l (a0),d0
    7a3c:	|  /-- bra.s 7a44 <statusBarText+0x1c>
	} else {
		return "";
    7a3e:	\--|-> move.l #100275,d0
	}
    7a44:	   \-> rts

00007a46 <addSpeechLine>:

struct speechStruct * speech;
FLOAT speechSpeed = 1;


void addSpeechLine (char * theLine, int x, int *offset) {
    7a46:	       lea -28(sp),sp
    7a4a:	       movem.l d2-d5/a6,-(sp)
	int halfWidth = (stringWidth (theLine) >> 1)/cameraZoom;
    7a4e:	       move.l 52(sp),-(sp)
    7a52:	       jsr 156da <stringWidth>
    7a58:	       addq.l #4,sp
    7a5a:	       asr.l #1,d0
    7a5c:	       move.l d0,-(sp)
    7a5e:	       jsr 1746e <__floatsisf>
    7a64:	       addq.l #4,sp
    7a66:	       move.l d0,d1
    7a68:	       move.l 1a142 <cameraZoom>,d0
    7a6e:	       move.l d0,-(sp)
    7a70:	       move.l d1,-(sp)
    7a72:	       jsr 17324 <__divsf3>
    7a78:	       addq.l #8,sp
    7a7a:	       move.l d0,-(sp)
    7a7c:	       jsr 17406 <__fixsfsi>
    7a82:	       addq.l #4,sp
    7a84:	       move.l d0,44(sp)
	int xx1 = x - (halfWidth);
    7a88:	       move.l 56(sp),d0
    7a8c:	       sub.l 44(sp),d0
    7a90:	       move.l d0,40(sp)
	int xx2 = x + (halfWidth);
    7a94:	       move.l 56(sp),d0
    7a98:	       add.l 44(sp),d0
    7a9c:	       move.l d0,36(sp)
	struct speechLine * newLine = AllocVec(sizeof(struct speechLine),MEMF_ANY);
    7aa0:	       moveq #12,d0
    7aa2:	       move.l d0,32(sp)
    7aa6:	       clr.l 28(sp)
    7aaa:	       move.l 1a7a4 <SysBase>,d0
    7ab0:	       movea.l d0,a6
    7ab2:	       move.l 32(sp),d0
    7ab6:	       move.l 28(sp),d1
    7aba:	       jsr -684(a6)
    7abe:	       move.l d0,24(sp)
    7ac2:	       move.l 24(sp),d0
    7ac6:	       move.l d0,20(sp)

	newLine -> next = speech -> allSpeech;
    7aca:	       movea.l 1a800 <speech>,a0
    7ad0:	       move.l 4(a0),d0
    7ad4:	       movea.l 20(sp),a0
    7ad8:	       move.l d0,4(a0)
	newLine -> textLine = copyString (theLine);
    7adc:	       move.l 52(sp),-(sp)
    7ae0:	       jsr b8 <copyString>
    7ae6:	       addq.l #4,sp
    7ae8:	       movea.l 20(sp),a0
    7aec:	       move.l d0,(a0)
	newLine -> x = xx1;
    7aee:	       movea.l 20(sp),a0
    7af2:	       move.l 40(sp),8(a0)
	speech -> allSpeech = newLine;
    7af8:	       movea.l 1a800 <speech>,a0
    7afe:	       move.l 20(sp),4(a0)
	if ((xx1 < 5) && (*offset < (5 - xx1))) {
    7b04:	       moveq #4,d0
    7b06:	       cmp.l 40(sp),d0
    7b0a:	   /-- blt.s 7b2c <addSpeechLine+0xe6>
    7b0c:	   |   movea.l 60(sp),a0
    7b10:	   |   move.l (a0),d1
    7b12:	   |   moveq #5,d0
    7b14:	   |   sub.l 40(sp),d0
    7b18:	   |   cmp.l d1,d0
    7b1a:	   +-- ble.s 7b2c <addSpeechLine+0xe6>
		*offset = 5 - xx1;
    7b1c:	   |   moveq #5,d0
    7b1e:	   |   sub.l 40(sp),d0
    7b22:	   |   movea.l 60(sp),a0
    7b26:	   |   move.l d0,(a0)
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
		*offset = (int) ((FLOAT)winWidth/cameraZoom) - 5 - xx2;
	}
}
    7b28:	/--|-- bra.w 7c58 <addSpeechLine+0x212>
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
    7b2c:	|  \-> move.l 36(sp),-(sp)
    7b30:	|      jsr 1746e <__floatsisf>
    7b36:	|      addq.l #4,sp
    7b38:	|      move.l d0,d2
    7b3a:	|      move.l 1a6f8 <winWidth>,d0
    7b40:	|      move.l d0,-(sp)
    7b42:	|      jsr 17496 <__floatunsisf>
    7b48:	|      addq.l #4,sp
    7b4a:	|      move.l d0,d1
    7b4c:	|      move.l 1a142 <cameraZoom>,d0
    7b52:	|      move.l d0,-(sp)
    7b54:	|      move.l d1,-(sp)
    7b56:	|      jsr 17324 <__divsf3>
    7b5c:	|      addq.l #8,sp
    7b5e:	|      move.l #1084227584,-(sp)
    7b64:	|      move.l d0,-(sp)
    7b66:	|      jsr 17762 <__subsf3>
    7b6c:	|      addq.l #8,sp
    7b6e:	|      move.l d0,-(sp)
    7b70:	|      move.l d2,-(sp)
    7b72:	|      jsr 17556 <__gesf2>
    7b78:	|      addq.l #8,sp
    7b7a:	|      tst.l d0
    7b7c:	|  /-- bge.s 7b82 <addSpeechLine+0x13c>
}
    7b7e:	+--|-- bra.w 7c58 <addSpeechLine+0x212>
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
    7b82:	|  \-> movea.l 60(sp),a0
    7b86:	|      move.l (a0),d0
    7b88:	|      move.l d0,-(sp)
    7b8a:	|      jsr 1746e <__floatsisf>
    7b90:	|      addq.l #4,sp
    7b92:	|      move.l d0,-(sp)
    7b94:	|      jsr 17390 <__extendsfdf2>
    7b9a:	|      addq.l #4,sp
    7b9c:	|      move.l d0,d4
    7b9e:	|      move.l d1,d5
    7ba0:	|      move.l 1a6f8 <winWidth>,d0
    7ba6:	|      move.l d0,-(sp)
    7ba8:	|      jsr 17496 <__floatunsisf>
    7bae:	|      addq.l #4,sp
    7bb0:	|      move.l d0,d1
    7bb2:	|      move.l 1a142 <cameraZoom>,d0
    7bb8:	|      move.l d0,-(sp)
    7bba:	|      move.l d1,-(sp)
    7bbc:	|      jsr 17324 <__divsf3>
    7bc2:	|      addq.l #8,sp
    7bc4:	|      move.l d0,-(sp)
    7bc6:	|      jsr 17390 <__extendsfdf2>
    7bcc:	|      addq.l #4,sp
    7bce:	|      clr.l -(sp)
    7bd0:	|      move.l #1075052544,-(sp)
    7bd6:	|      move.l d1,-(sp)
    7bd8:	|      move.l d0,-(sp)
    7bda:	|      jsr 17700 <__subdf3>
    7be0:	|      lea 16(sp),sp
    7be4:	|      move.l d0,d2
    7be6:	|      move.l d1,d3
    7be8:	|      move.l 36(sp),-(sp)
    7bec:	|      jsr 1742e <__floatsidf>
    7bf2:	|      addq.l #4,sp
    7bf4:	|      move.l d1,-(sp)
    7bf6:	|      move.l d0,-(sp)
    7bf8:	|      move.l d3,-(sp)
    7bfa:	|      move.l d2,-(sp)
    7bfc:	|      jsr 17700 <__subdf3>
    7c02:	|      lea 16(sp),sp
    7c06:	|      move.l d1,-(sp)
    7c08:	|      move.l d0,-(sp)
    7c0a:	|      move.l d5,-(sp)
    7c0c:	|      move.l d4,-(sp)
    7c0e:	|      jsr 1758c <__gtdf2>
    7c14:	|      lea 16(sp),sp
    7c18:	|      tst.l d0
    7c1a:	|  /-- bgt.s 7c1e <addSpeechLine+0x1d8>
}
    7c1c:	+--|-- bra.s 7c58 <addSpeechLine+0x212>
		*offset = (int) ((FLOAT)winWidth/cameraZoom) - 5 - xx2;
    7c1e:	|  \-> move.l 1a6f8 <winWidth>,d0
    7c24:	|      move.l d0,-(sp)
    7c26:	|      jsr 17496 <__floatunsisf>
    7c2c:	|      addq.l #4,sp
    7c2e:	|      move.l d0,d1
    7c30:	|      move.l 1a142 <cameraZoom>,d0
    7c36:	|      move.l d0,-(sp)
    7c38:	|      move.l d1,-(sp)
    7c3a:	|      jsr 17324 <__divsf3>
    7c40:	|      addq.l #8,sp
    7c42:	|      move.l d0,-(sp)
    7c44:	|      jsr 17406 <__fixsfsi>
    7c4a:	|      addq.l #4,sp
    7c4c:	|      subq.l #5,d0
    7c4e:	|      sub.l 36(sp),d0
    7c52:	|      movea.l 60(sp),a0
    7c56:	|      move.l d0,(a0)
}
    7c58:	\----> nop
    7c5a:	       movem.l (sp)+,d2-d5/a6
    7c5e:	       lea 28(sp),sp
    7c62:	       rts

00007c64 <initSpeech>:


void initSpeech () {
    7c64:	       lea -12(sp),sp
    7c68:	       move.l a6,-(sp)
	speech = AllocVec(sizeof(struct speechStruct), MEMF_ANY);
    7c6a:	       moveq #20,d0
    7c6c:	       move.l d0,12(sp)
    7c70:	       clr.l 8(sp)
    7c74:	       move.l 1a7a4 <SysBase>,d0
    7c7a:	       movea.l d0,a6
    7c7c:	       move.l 12(sp),d0
    7c80:	       move.l 8(sp),d1
    7c84:	       jsr -684(a6)
    7c88:	       move.l d0,4(sp)
    7c8c:	       move.l 4(sp),d0
    7c90:	       move.l d0,1a800 <speech>
	if (speech) {
    7c96:	       move.l 1a800 <speech>,d0
    7c9c:	/----- beq.s 7cc8 <initSpeech+0x64>
		speech -> currentTalker = NULL;
    7c9e:	|      movea.l 1a800 <speech>,a0
    7ca4:	|      clr.l (a0)
		speech -> allSpeech = NULL;
    7ca6:	|      movea.l 1a800 <speech>,a0
    7cac:	|      clr.l 4(a0)
		speech -> speechY = 0;
    7cb0:	|      movea.l 1a800 <speech>,a0
    7cb6:	|      clr.l 8(a0)
		speech -> lastFile = -1;
    7cba:	|      movea.l 1a800 <speech>,a0
    7cc0:	|      moveq #-1,d0
    7cc2:	|      move.l d0,12(a0)
	} else
    {
        KPrintF("Could not allocate memory");
    }
}
    7cc6:	|  /-- bra.s 7cd6 <initSpeech+0x72>
        KPrintF("Could not allocate memory");
    7cc8:	\--|-> pea 18d9a <PutChar+0x12bc>
    7cce:	   |   jsr 1703c <KPrintF>
    7cd4:	   |   addq.l #4,sp
}
    7cd6:	   \-> nop
    7cd8:	       movea.l (sp)+,a6
    7cda:	       lea 12(sp),sp
    7cde:	       rts

00007ce0 <isThereAnySpeechGoingOn>:

int isThereAnySpeechGoingOn () {
	return speech -> allSpeech ? speech -> lookWhosTalking : -1;
    7ce0:	       movea.l 1a800 <speech>,a0
    7ce6:	       move.l 4(a0),d0
    7cea:	/----- beq.s 7cf8 <isThereAnySpeechGoingOn+0x18>
    7cec:	|      movea.l 1a800 <speech>,a0
    7cf2:	|      move.l 16(a0),d0
    7cf6:	|  /-- bra.s 7cfa <isThereAnySpeechGoingOn+0x1a>
    7cf8:	\--|-> moveq #-1,d0
}
    7cfa:	   \-> rts

00007cfc <killAllSpeech>:

void killAllSpeech () {
    7cfc:	       lea -12(sp),sp
    7d00:	       move.l a6,-(sp)
	if (speech -> lastFile != -1) {
    7d02:	       movea.l 1a800 <speech>,a0
    7d08:	       move.l 12(a0),d0
    7d0c:	       moveq #-1,d1
    7d0e:	       cmp.l d0,d1
    7d10:	   /-- beq.s 7d1e <killAllSpeech+0x22>
		//huntKillSound (speech -> lastFile); Amiga Todo: Replace?
		speech -> lastFile = -1;
    7d12:	   |   movea.l 1a800 <speech>,a0
    7d18:	   |   moveq #-1,d0
    7d1a:	   |   move.l d0,12(a0)
	}

	if (speech -> currentTalker) {
    7d1e:	   \-> movea.l 1a800 <speech>,a0
    7d24:	       move.l (a0),d0
    7d26:	/----- beq.w 7db2 <killAllSpeech+0xb6>
		makeSilent (* (speech -> currentTalker));
    7d2a:	|      movea.l 1a800 <speech>,a0
    7d30:	|      move.l (a0),d1
    7d32:	|      lea -132(sp),sp
    7d36:	|      move.l sp,d0
    7d38:	|      movea.w #132,a0
    7d3c:	|      move.l a0,-(sp)
    7d3e:	|      move.l d1,-(sp)
    7d40:	|      move.l d0,-(sp)
    7d42:	|      jsr 16ff0 <memcpy>
    7d48:	|      lea 12(sp),sp
    7d4c:	|      jsr a96a <makeSilent>
    7d52:	|      lea 132(sp),sp
		speech -> currentTalker = NULL;
    7d56:	|      movea.l 1a800 <speech>,a0
    7d5c:	|      clr.l (a0)
	}
	
	struct speechLine * killMe;
	
	while (speech -> allSpeech) {
    7d5e:	+----- bra.s 7db2 <killAllSpeech+0xb6>
		killMe = speech -> allSpeech;
    7d60:	|  /-> movea.l 1a800 <speech>,a0
    7d66:	|  |   move.l 4(a0),12(sp)
		speech -> allSpeech = speech -> allSpeech -> next;
    7d6c:	|  |   movea.l 1a800 <speech>,a0
    7d72:	|  |   movea.l 4(a0),a1
    7d76:	|  |   movea.l 1a800 <speech>,a0
    7d7c:	|  |   move.l 4(a1),d0
    7d80:	|  |   move.l d0,4(a0)
		FreeVec(killMe -> textLine);
    7d84:	|  |   movea.l 12(sp),a0
    7d88:	|  |   move.l (a0),8(sp)
    7d8c:	|  |   move.l 1a7a4 <SysBase>,d0
    7d92:	|  |   movea.l d0,a6
    7d94:	|  |   movea.l 8(sp),a1
    7d98:	|  |   jsr -690(a6)
		FreeVec(killMe);
    7d9c:	|  |   move.l 12(sp),4(sp)
    7da2:	|  |   move.l 1a7a4 <SysBase>,d0
    7da8:	|  |   movea.l d0,a6
    7daa:	|  |   movea.l 4(sp),a1
    7dae:	|  |   jsr -690(a6)
	while (speech -> allSpeech) {
    7db2:	\--|-> movea.l 1a800 <speech>,a0
    7db8:	   |   move.l 4(a0),d0
    7dbc:	   \-- bne.s 7d60 <killAllSpeech+0x64>
	}
}
    7dbe:	       nop
    7dc0:	       nop
    7dc2:	       movea.l (sp)+,a6
    7dc4:	       lea 12(sp),sp
    7dc8:	       rts

00007dca <makeTalker>:

	return TRUE;
}

void makeTalker (struct onScreenPerson *me) {
	setFrames (me, ANI_TALK);
    7dca:	pea 2 <_start+0x2>
    7dce:	move.l 8(sp),-(sp)
    7dd2:	jsr 7f2a <setFrames>
    7dd8:	addq.l #8,sp
}
    7dda:	nop
    7ddc:	rts

00007dde <saveSpeech>:

void saveSpeech (struct speechStruct * sS, BPTR fp) {
    7dde:	       lea -52(sp),sp
    7de2:	       move.l a6,-(sp)
    7de4:	       move.l d2,-(sp)
	struct speechLine * viewLine = sS -> allSpeech;
    7de6:	       movea.l 64(sp),a0
    7dea:	       move.l 4(a0),56(sp)
	
	putFloat (speechSpeed, fp);
    7df0:	       move.l 1a12e <speechSpeed>,d0
    7df6:	       move.l 68(sp),-(sp)
    7dfa:	       move.l d0,-(sp)
    7dfc:	       jsr a46 <putFloat>
    7e02:	       addq.l #8,sp
	
		// Write y co-ordinate
		put2bytes (sS -> speechY, fp);
    7e04:	       movea.l 64(sp),a0
    7e08:	       move.l 8(a0),d0
    7e0c:	       move.l 68(sp),-(sp)
    7e10:	       move.l d0,-(sp)
    7e12:	       jsr 8d0 <put2bytes>
    7e18:	       addq.l #8,sp
		
		// Write which character's talking
		put2bytes (sS -> lookWhosTalking, fp);		
    7e1a:	       movea.l 64(sp),a0
    7e1e:	       move.l 16(a0),d0
    7e22:	       move.l 68(sp),-(sp)
    7e26:	       move.l d0,-(sp)
    7e28:	       jsr 8d0 <put2bytes>
    7e2e:	       addq.l #8,sp
		if (sS -> currentTalker) {
    7e30:	       movea.l 64(sp),a0
    7e34:	       move.l (a0),d0
    7e36:	   /-- beq.s 7e7a <saveSpeech+0x9c>
			FPutC (fp, 1);
    7e38:	   |   move.l 68(sp),40(sp)
    7e3e:	   |   moveq #1,d0
    7e40:	   |   move.l d0,36(sp)
    7e44:	   |   move.l 1a7ac <DOSBase>,d0
    7e4a:	   |   movea.l d0,a6
    7e4c:	   |   move.l 40(sp),d1
    7e50:	   |   move.l 36(sp),d2
    7e54:	   |   jsr -312(a6)
    7e58:	   |   move.l d0,32(sp)
			put2bytes (sS->currentTalker->thisType->objectNum, fp);
    7e5c:	   |   movea.l 64(sp),a0
    7e60:	   |   movea.l (a0),a0
    7e62:	   |   movea.l 114(a0),a0
    7e66:	   |   move.l 4(a0),d0
    7e6a:	   |   move.l 68(sp),-(sp)
    7e6e:	   |   move.l d0,-(sp)
    7e70:	   |   jsr 8d0 <put2bytes>
    7e76:	   |   addq.l #8,sp
    7e78:	/--|-- bra.s 7ef6 <saveSpeech+0x118>
		} else {
			FPutC (fp, 0);
    7e7a:	|  \-> move.l 68(sp),52(sp)
    7e80:	|      clr.l 48(sp)
    7e84:	|      move.l 1a7ac <DOSBase>,d0
    7e8a:	|      movea.l d0,a6
    7e8c:	|      move.l 52(sp),d1
    7e90:	|      move.l 48(sp),d2
    7e94:	|      jsr -312(a6)
    7e98:	|      move.l d0,44(sp)
		}
		
		// Write what's being said
		while (viewLine) {
    7e9c:	+----- bra.s 7ef6 <saveSpeech+0x118>
			FPutC (fp, 1);
    7e9e:	|  /-> move.l 68(sp),16(sp)
    7ea4:	|  |   moveq #1,d0
    7ea6:	|  |   move.l d0,12(sp)
    7eaa:	|  |   move.l 1a7ac <DOSBase>,d0
    7eb0:	|  |   movea.l d0,a6
    7eb2:	|  |   move.l 16(sp),d1
    7eb6:	|  |   move.l 12(sp),d2
    7eba:	|  |   jsr -312(a6)
    7ebe:	|  |   move.l d0,8(sp)
			writeString (viewLine -> textLine, fp);
    7ec2:	|  |   movea.l 56(sp),a0
    7ec6:	|  |   move.l (a0),d0
    7ec8:	|  |   move.l 68(sp),-(sp)
    7ecc:	|  |   move.l d0,-(sp)
    7ece:	|  |   jsr bd8 <writeString>
    7ed4:	|  |   addq.l #8,sp
			put2bytes (viewLine -> x, fp);
    7ed6:	|  |   movea.l 56(sp),a0
    7eda:	|  |   move.l 8(a0),d0
    7ede:	|  |   move.l 68(sp),-(sp)
    7ee2:	|  |   move.l d0,-(sp)
    7ee4:	|  |   jsr 8d0 <put2bytes>
    7eea:	|  |   addq.l #8,sp
			viewLine = viewLine -> next;
    7eec:	|  |   movea.l 56(sp),a0
    7ef0:	|  |   move.l 4(a0),56(sp)
		while (viewLine) {
    7ef6:	\--|-> tst.l 56(sp)
    7efa:	   \-- bne.s 7e9e <saveSpeech+0xc0>
		}
		FPutC (fp, 0);
    7efc:	       move.l 68(sp),28(sp)
    7f02:	       clr.l 24(sp)
    7f06:	       move.l 1a7ac <DOSBase>,d0
    7f0c:	       movea.l d0,a6
    7f0e:	       move.l 28(sp),d1
    7f12:	       move.l 24(sp),d2
    7f16:	       jsr -312(a6)
    7f1a:	       move.l d0,20(sp)
}
    7f1e:	       nop
    7f20:	       move.l (sp)+,d2
    7f22:	       movea.l (sp)+,a6
    7f24:	       lea 52(sp),sp
    7f28:	       rts

00007f2a <setFrames>:

void setFrames (struct onScreenPerson *m, int a) {
    7f2a:	move.l d2,-(sp)
	m->myAnim = m->myPersona -> animation[(a * m->myPersona -> numDirections) + m->direction];
    7f2c:	movea.l 8(sp),a0
    7f30:	movea.l 80(a0),a0
    7f34:	move.l (a0),d2
    7f36:	movea.l 8(sp),a0
    7f3a:	movea.l 80(a0),a0
    7f3e:	move.l 4(a0),d0
    7f42:	move.l 12(sp),-(sp)
    7f46:	move.l d0,-(sp)
    7f48:	jsr 179c8 <__mulsi3>
    7f4e:	addq.l #8,sp
    7f50:	move.l d0,d1
    7f52:	movea.l 8(sp),a0
    7f56:	move.l 106(a0),d0
    7f5a:	add.l d1,d0
    7f5c:	add.l d0,d0
    7f5e:	add.l d0,d0
    7f60:	movea.l d2,a0
    7f62:	adda.l d0,a0
    7f64:	move.l (a0),d0
    7f66:	movea.l 8(sp),a0
    7f6a:	move.l d0,72(a0)
}
    7f6e:	nop
    7f70:	move.l (sp)+,d2
    7f72:	rts

00007f74 <wrapSpeech>:

int wrapSpeech(char * theText, int objT, int sampleFile, BOOL animPerson) {
    7f74:	       lea -20(sp),sp
    7f78:	       move.l d2,-(sp)
    7f7a:	       move.l 40(sp),d0
    7f7e:	       move.w d0,d0
    7f80:	       move.w d0,6(sp)
    int i;

    speech->lookWhosTalking = objT;
    7f84:	       movea.l 1a800 <speech>,a0
    7f8a:	       move.l 32(sp),16(a0)
    struct onScreenPerson * thisPerson = findPerson(objT);
    7f90:	       move.l 32(sp),-(sp)
    7f94:	       jsr a454 <findPerson>
    7f9a:	       addq.l #4,sp
    7f9c:	       move.l d0,16(sp)
    if (thisPerson) {
    7fa0:	   /-- beq.s 7fc6 <wrapSpeech+0x52>
        //setObjFontColour(thisPerson->thisType); Todo Amigize this
        i = wrapSpeechPerson(theText, thisPerson, sampleFile, animPerson);
    7fa2:	   |   movea.w 6(sp),a0
    7fa6:	   |   move.l a0,-(sp)
    7fa8:	   |   move.l 40(sp),-(sp)
    7fac:	   |   move.l 24(sp),-(sp)
    7fb0:	   |   move.l 40(sp),-(sp)
    7fb4:	   |   jsr 808c <wrapSpeechPerson>
    7fba:	   |   lea 16(sp),sp
    7fbe:	   |   move.l d0,20(sp)
    7fc2:	/--|-- bra.w 8080 <wrapSpeech+0x10c>
    } else {
        struct screenRegion * thisRegion = getRegionForObject(objT);
    7fc6:	|  \-> move.l 32(sp),-(sp)
    7fca:	|      jsr 1583a <getRegionForObject>
    7fd0:	|      addq.l #4,sp
    7fd2:	|      move.l d0,12(sp)
        if (thisRegion) {
    7fd6:	|  /-- beq.s 8042 <wrapSpeech+0xce>
            //setObjFontColour(thisRegion->thisType); Todo Amigize this
            i = wrapSpeechXY(theText, ((thisRegion->x1 + thisRegion->x2) >> 1) - cameraX, thisRegion->y1 - thisRegion->thisType->speechGap - cameraY, thisRegion->thisType->wrapSpeech, sampleFile);
    7fd8:	|  |   movea.l 12(sp),a0
    7fdc:	|  |   movea.l 28(a0),a0
    7fe0:	|  |   move.l 28(a0),d0
    7fe4:	|  |   movea.l 12(sp),a0
    7fe8:	|  |   movea.l 4(a0),a1
    7fec:	|  |   movea.l 12(sp),a0
    7ff0:	|  |   movea.l 28(a0),a0
    7ff4:	|  |   move.l 20(a0),d1
    7ff8:	|  |   movea.l a1,a0
    7ffa:	|  |   suba.l d1,a0
    7ffc:	|  |   move.l 1a862 <cameraY>,d1
    8002:	|  |   movea.l a0,a1
    8004:	|  |   suba.l d1,a1
    8006:	|  |   movea.l 12(sp),a0
    800a:	|  |   move.l (a0),d2
    800c:	|  |   movea.l 12(sp),a0
    8010:	|  |   move.l 8(a0),d1
    8014:	|  |   add.l d2,d1
    8016:	|  |   move.l d1,d2
    8018:	|  |   asr.l #1,d2
    801a:	|  |   move.l 1a85e <cameraX>,d1
    8020:	|  |   movea.l d2,a0
    8022:	|  |   suba.l d1,a0
    8024:	|  |   move.l 36(sp),-(sp)
    8028:	|  |   move.l d0,-(sp)
    802a:	|  |   move.l a1,-(sp)
    802c:	|  |   move.l a0,-(sp)
    802e:	|  |   move.l 44(sp),-(sp)
    8032:	|  |   jsr 81aa <wrapSpeechXY>
    8038:	|  |   lea 20(sp),sp
    803c:	|  |   move.l d0,20(sp)
    8040:	+--|-- bra.s 8080 <wrapSpeech+0x10c>
        } else {
            struct objectType * temp = findObjectType(objT);
    8042:	|  \-> move.l 32(sp),-(sp)
    8046:	|      jsr d356 <findObjectType>
    804c:	|      addq.l #4,sp
    804e:	|      move.l d0,8(sp)
            //setObjFontColour(temp); Todo: Amigize this
            i = wrapSpeechXY(theText, winWidth >> 1, 10, temp->wrapSpeech, sampleFile);
    8052:	|      movea.l 8(sp),a0
    8056:	|      move.l 28(a0),d1
    805a:	|      move.l 1a6f8 <winWidth>,d0
    8060:	|      lsr.l #1,d0
    8062:	|      move.l 36(sp),-(sp)
    8066:	|      move.l d1,-(sp)
    8068:	|      pea a <_start+0xa>
    806c:	|      move.l d0,-(sp)
    806e:	|      move.l 44(sp),-(sp)
    8072:	|      jsr 81aa <wrapSpeechXY>
    8078:	|      lea 20(sp),sp
    807c:	|      move.l d0,20(sp)
        }
    }
    return i;
    8080:	\----> move.l 20(sp),d0
}
    8084:	       move.l (sp)+,d2
    8086:	       lea 20(sp),sp
    808a:	       rts

0000808c <wrapSpeechPerson>:

int wrapSpeechPerson (char * theText, struct onScreenPerson *thePerson, int sampleFile, BOOL animPerson) {
    808c:	    subq.l #8,sp
    808e:	    movem.l d2-d4,-(sp)
    8092:	    move.l 36(sp),d0
    8096:	    move.w d0,d0
    8098:	    move.w d0,14(sp)
	int i = wrapSpeechXY (theText, thePerson->x - cameraX, thePerson->y - cameraY - (thePerson->scale * (thePerson->height - thePerson->floaty)) - thePerson->thisType -> speechGap, thePerson->thisType -> wrapSpeech, sampleFile);
    809c:	    movea.l 28(sp),a0
    80a0:	    movea.l 114(a0),a0
    80a4:	    move.l 28(a0),d2
    80a8:	    movea.l 28(sp),a0
    80ac:	    move.l 4(a0),d3
    80b0:	    move.l 1a862 <cameraY>,d0
    80b6:	    move.l d0,-(sp)
    80b8:	    jsr 1746e <__floatsisf>
    80be:	    addq.l #4,sp
    80c0:	    move.l d0,-(sp)
    80c2:	    move.l d3,-(sp)
    80c4:	    jsr 17762 <__subsf3>
    80ca:	    addq.l #8,sp
    80cc:	    move.l d0,d3
    80ce:	    movea.l 28(sp),a0
    80d2:	    move.l 32(a0),d4
    80d6:	    movea.l 28(sp),a0
    80da:	    move.l 20(a0),d1
    80de:	    movea.l 28(sp),a0
    80e2:	    move.l 24(a0),d0
    80e6:	    sub.l d0,d1
    80e8:	    move.l d1,-(sp)
    80ea:	    jsr 1746e <__floatsisf>
    80f0:	    addq.l #4,sp
    80f2:	    move.l d0,-(sp)
    80f4:	    move.l d4,-(sp)
    80f6:	    jsr 17520 <__mulsf3>
    80fc:	    addq.l #8,sp
    80fe:	    move.l d0,-(sp)
    8100:	    move.l d3,-(sp)
    8102:	    jsr 17762 <__subsf3>
    8108:	    addq.l #8,sp
    810a:	    move.l d0,d3
    810c:	    movea.l 28(sp),a0
    8110:	    movea.l 114(a0),a0
    8114:	    move.l 20(a0),d0
    8118:	    move.l d0,-(sp)
    811a:	    jsr 1746e <__floatsisf>
    8120:	    addq.l #4,sp
    8122:	    move.l d0,-(sp)
    8124:	    move.l d3,-(sp)
    8126:	    jsr 17762 <__subsf3>
    812c:	    addq.l #8,sp
    812e:	    move.l d0,-(sp)
    8130:	    jsr 17406 <__fixsfsi>
    8136:	    addq.l #4,sp
    8138:	    move.l d0,d4
    813a:	    movea.l 28(sp),a0
    813e:	    move.l (a0),d3
    8140:	    move.l 1a85e <cameraX>,d0
    8146:	    move.l d0,-(sp)
    8148:	    jsr 1746e <__floatsisf>
    814e:	    addq.l #4,sp
    8150:	    move.l d0,-(sp)
    8152:	    move.l d3,-(sp)
    8154:	    jsr 17762 <__subsf3>
    815a:	    addq.l #8,sp
    815c:	    move.l d0,-(sp)
    815e:	    jsr 17406 <__fixsfsi>
    8164:	    addq.l #4,sp
    8166:	    move.l 32(sp),-(sp)
    816a:	    move.l d2,-(sp)
    816c:	    move.l d4,-(sp)
    816e:	    move.l d0,-(sp)
    8170:	    move.l 40(sp),-(sp)
    8174:	    jsr 81aa <wrapSpeechXY>
    817a:	    lea 20(sp),sp
    817e:	    move.l d0,16(sp)
	if (animPerson) {
    8182:	    tst.w 14(sp)
    8186:	/-- beq.s 819e <wrapSpeechPerson+0x112>
		makeTalker (thePerson);
    8188:	|   move.l 28(sp),-(sp)
    818c:	|   jsr 7dca <makeTalker>
    8192:	|   addq.l #4,sp
		speech -> currentTalker = thePerson;
    8194:	|   movea.l 1a800 <speech>,a0
    819a:	|   move.l 28(sp),(a0)
	}
	return i;
    819e:	\-> move.l 16(sp),d0
}
    81a2:	    movem.l (sp)+,d2-d4
    81a6:	    addq.l #8,sp
    81a8:	    rts

000081aa <wrapSpeechXY>:

int wrapSpeechXY(char * theText, int x, int y, int wrap, int sampleFile) {
    81aa:	                   lea -16(sp),sp
    81ae:	                   movem.l d2-d4/a2,-(sp)
    int a, offset = 0;
    81b2:	                   clr.l 16(sp)
    killAllSpeech();
    81b6:	                   jsr 7cfc <killAllSpeech>

    int speechTime = (strlen(theText) + 20) * speechSpeed;
    81bc:	                   move.l 36(sp),-(sp)
    81c0:	                   jsr 13adc <strlen>
    81c6:	                   addq.l #4,sp
    81c8:	                   movea.l d0,a0
    81ca:	                   lea 20(a0),a0
    81ce:	                   move.l a0,-(sp)
    81d0:	                   jsr 17496 <__floatunsisf>
    81d6:	                   addq.l #4,sp
    81d8:	                   move.l d0,d1
    81da:	                   move.l 1a12e <speechSpeed>,d0
    81e0:	                   move.l d0,-(sp)
    81e2:	                   move.l d1,-(sp)
    81e4:	                   jsr 17520 <__mulsf3>
    81ea:	                   addq.l #8,sp
    81ec:	                   move.l d0,-(sp)
    81ee:	                   jsr 17406 <__fixsfsi>
    81f4:	                   addq.l #4,sp
    81f6:	                   move.l d0,24(sp)
    if (speechTime < 1) speechTime = 1;
    81fa:	               /-- bgt.s 8202 <wrapSpeechXY+0x58>
    81fc:	               |   moveq #1,d0
    81fe:	               |   move.l d0,24(sp)

    if (sampleFile != -1) {
    8202:	               \-> moveq #-1,d1
    8204:	                   cmp.l 52(sp),d1
    8208:	               /-- beq.s 8248 <wrapSpeechXY+0x9e>
        if (speechMode >= 1) {
    820a:	               |   move.l 1a872 <speechMode>,d0
    8210:	               +-- ble.s 8248 <wrapSpeechXY+0x9e>
            if (startSound(sampleFile, FALSE)) {
    8212:	               |   clr.l -(sp)
    8214:	               |   move.l 56(sp),-(sp)
    8218:	               |   jsr d020 <startSound>
    821e:	               |   addq.l #8,sp
    8220:	               |   tst.w d0
    8222:	               +-- beq.s 8248 <wrapSpeechXY+0x9e>
                speechTime = -10;
    8224:	               |   moveq #-10,d0
    8226:	               |   move.l d0,24(sp)
                speech->lastFile = sampleFile;
    822a:	               |   movea.l 1a800 <speech>,a0
    8230:	               |   move.l 52(sp),12(a0)
                if (speechMode == 2) return -10;
    8236:	               |   move.l 1a872 <speechMode>,d0
    823c:	               |   moveq #2,d1
    823e:	               |   cmp.l d0,d1
    8240:	               +-- bne.s 8248 <wrapSpeechXY+0x9e>
    8242:	               |   moveq #-10,d0
    8244:	/--------------|-- bra.w 84ce <wrapSpeechXY+0x324>
            }
        }
    }
    speech->speechY = y;
    8248:	|              \-> movea.l 1a800 <speech>,a0
    824e:	|                  move.l 44(sp),8(a0)

    while (strlen(theText) > (unsigned long) wrap) {
    8254:	|     /----------- bra.w 8308 <wrapSpeechXY+0x15e>
        a = wrap;
    8258:	|  /--|----------> move.l 48(sp),28(sp)
        while (theText[a] != ' ') {
    825e:	|  |  |        /-- bra.s 826e <wrapSpeechXY+0xc4>
            a--;
    8260:	|  |  |  /-----|-> subq.l #1,28(sp)
            if (a == 0) {
    8264:	|  |  |  |     +-- bne.s 826e <wrapSpeechXY+0xc4>
                a = wrap;
    8266:	|  |  |  |     |   move.l 48(sp),28(sp)
                break;
    826c:	|  |  |  |  /--|-- bra.s 8280 <wrapSpeechXY+0xd6>
        while (theText[a] != ' ') {
    826e:	|  |  |  |  |  \-> move.l 28(sp),d0
    8272:	|  |  |  |  |      movea.l 36(sp),a0
    8276:	|  |  |  |  |      adda.l d0,a0
    8278:	|  |  |  |  |      move.b (a0),d0
    827a:	|  |  |  |  |      cmpi.b #32,d0
    827e:	|  |  |  \--|----- bne.s 8260 <wrapSpeechXY+0xb6>
            }
        }
        theText[a] = 0;
    8280:	|  |  |     \----> move.l 28(sp),d0
    8284:	|  |  |            movea.l 36(sp),a0
    8288:	|  |  |            adda.l d0,a0
    828a:	|  |  |            clr.b (a0)
        addSpeechLine(theText, x, &offset);
    828c:	|  |  |            lea 16(sp),a0
    8290:	|  |  |            move.l a0,-(sp)
    8292:	|  |  |            move.l 44(sp),-(sp)
    8296:	|  |  |            move.l 44(sp),-(sp)
    829a:	|  |  |            jsr 7a46 <addSpeechLine>
    82a0:	|  |  |            lea 12(sp),sp
        theText[a] = ' ';
    82a4:	|  |  |            move.l 28(sp),d0
    82a8:	|  |  |            movea.l 36(sp),a0
    82ac:	|  |  |            adda.l d0,a0
    82ae:	|  |  |            move.b #32,(a0)
        theText += a + 1;
    82b2:	|  |  |            move.l 28(sp),d0
    82b6:	|  |  |            addq.l #1,d0
    82b8:	|  |  |            add.l d0,36(sp)
        y -= fontHeight / cameraZoom;
    82bc:	|  |  |            move.l 44(sp),-(sp)
    82c0:	|  |  |            jsr 1746e <__floatsisf>
    82c6:	|  |  |            addq.l #4,sp
    82c8:	|  |  |            move.l d0,d2
    82ca:	|  |  |            move.l 1a89c <fontHeight>,d0
    82d0:	|  |  |            move.l d0,-(sp)
    82d2:	|  |  |            jsr 1746e <__floatsisf>
    82d8:	|  |  |            addq.l #4,sp
    82da:	|  |  |            move.l d0,d1
    82dc:	|  |  |            move.l 1a142 <cameraZoom>,d0
    82e2:	|  |  |            move.l d0,-(sp)
    82e4:	|  |  |            move.l d1,-(sp)
    82e6:	|  |  |            jsr 17324 <__divsf3>
    82ec:	|  |  |            addq.l #8,sp
    82ee:	|  |  |            move.l d0,-(sp)
    82f0:	|  |  |            move.l d2,-(sp)
    82f2:	|  |  |            jsr 17762 <__subsf3>
    82f8:	|  |  |            addq.l #8,sp
    82fa:	|  |  |            move.l d0,-(sp)
    82fc:	|  |  |            jsr 17406 <__fixsfsi>
    8302:	|  |  |            addq.l #4,sp
    8304:	|  |  |            move.l d0,44(sp)
    while (strlen(theText) > (unsigned long) wrap) {
    8308:	|  |  \----------> move.l 36(sp),-(sp)
    830c:	|  |               jsr 13adc <strlen>
    8312:	|  |               addq.l #4,sp
    8314:	|  |               move.l d0,d1
    8316:	|  |               move.l 48(sp),d0
    831a:	|  |               cmp.l d1,d0
    831c:	|  \-------------- bcs.w 8258 <wrapSpeechXY+0xae>
    }
    addSpeechLine(theText, x, &offset);
    8320:	|                  lea 16(sp),a0
    8324:	|                  move.l a0,-(sp)
    8326:	|                  move.l 44(sp),-(sp)
    832a:	|                  move.l 44(sp),-(sp)
    832e:	|                  jsr 7a46 <addSpeechLine>
    8334:	|                  lea 12(sp),sp
    y -= fontHeight / cameraZoom;
    8338:	|                  move.l 44(sp),-(sp)
    833c:	|                  jsr 1746e <__floatsisf>
    8342:	|                  addq.l #4,sp
    8344:	|                  move.l d0,d2
    8346:	|                  move.l 1a89c <fontHeight>,d0
    834c:	|                  move.l d0,-(sp)
    834e:	|                  jsr 1746e <__floatsisf>
    8354:	|                  addq.l #4,sp
    8356:	|                  move.l d0,d1
    8358:	|                  move.l 1a142 <cameraZoom>,d0
    835e:	|                  move.l d0,-(sp)
    8360:	|                  move.l d1,-(sp)
    8362:	|                  jsr 17324 <__divsf3>
    8368:	|                  addq.l #8,sp
    836a:	|                  move.l d0,-(sp)
    836c:	|                  move.l d2,-(sp)
    836e:	|                  jsr 17762 <__subsf3>
    8374:	|                  addq.l #8,sp
    8376:	|                  move.l d0,-(sp)
    8378:	|                  jsr 17406 <__fixsfsi>
    837e:	|                  addq.l #4,sp
    8380:	|                  move.l d0,44(sp)

    if (y < 0) speech->speechY -= y;
    8384:	|              /-- bpl.s 83a2 <wrapSpeechXY+0x1f8>
    8386:	|              |   movea.l 1a800 <speech>,a0
    838c:	|              |   move.l 8(a0),d0
    8390:	|              |   movea.l 1a800 <speech>,a0
    8396:	|              |   sub.l 44(sp),d0
    839a:	|              |   move.l d0,8(a0)
    839e:	|           /--|-- bra.w 8490 <wrapSpeechXY+0x2e6>
    else if (speech->speechY > cameraY + (FLOAT)(winHeight - fontHeight / 3) / cameraZoom) speech->speechY = cameraY + (FLOAT)(winHeight - fontHeight / 3) / cameraZoom;
    83a2:	|           |  \-> movea.l 1a800 <speech>,a0
    83a8:	|           |      move.l 8(a0),d0
    83ac:	|           |      move.l d0,-(sp)
    83ae:	|           |      jsr 1746e <__floatsisf>
    83b4:	|           |      addq.l #4,sp
    83b6:	|           |      move.l d0,d2
    83b8:	|           |      move.l 1a862 <cameraY>,d0
    83be:	|           |      move.l d0,-(sp)
    83c0:	|           |      jsr 1746e <__floatsisf>
    83c6:	|           |      addq.l #4,sp
    83c8:	|           |      move.l d0,d3
    83ca:	|           |      move.l 1a6fc <winHeight>,d4
    83d0:	|           |      move.l 1a89c <fontHeight>,d0
    83d6:	|           |      pea 3 <_start+0x3>
    83da:	|           |      move.l d0,-(sp)
    83dc:	|           |      jsr 17a46 <__divsi3>
    83e2:	|           |      addq.l #8,sp
    83e4:	|           |      move.l d4,d1
    83e6:	|           |      sub.l d0,d1
    83e8:	|           |      move.l d1,-(sp)
    83ea:	|           |      jsr 17496 <__floatunsisf>
    83f0:	|           |      addq.l #4,sp
    83f2:	|           |      move.l d0,d1
    83f4:	|           |      move.l 1a142 <cameraZoom>,d0
    83fa:	|           |      move.l d0,-(sp)
    83fc:	|           |      move.l d1,-(sp)
    83fe:	|           |      jsr 17324 <__divsf3>
    8404:	|           |      addq.l #8,sp
    8406:	|           |      move.l d0,-(sp)
    8408:	|           |      move.l d3,-(sp)
    840a:	|           |      jsr 1722a <__addsf3>
    8410:	|           |      addq.l #8,sp
    8412:	|           |      move.l d0,-(sp)
    8414:	|           |      move.l d2,-(sp)
    8416:	|           |      jsr 175da <__gtsf2>
    841c:	|           |      addq.l #8,sp
    841e:	|           |      tst.l d0
    8420:	|           +----- ble.s 8490 <wrapSpeechXY+0x2e6>
    8422:	|           |      move.l 1a862 <cameraY>,d0
    8428:	|           |      move.l d0,-(sp)
    842a:	|           |      jsr 1746e <__floatsisf>
    8430:	|           |      addq.l #4,sp
    8432:	|           |      move.l d0,d2
    8434:	|           |      move.l 1a6fc <winHeight>,d3
    843a:	|           |      move.l 1a89c <fontHeight>,d0
    8440:	|           |      pea 3 <_start+0x3>
    8444:	|           |      move.l d0,-(sp)
    8446:	|           |      jsr 17a46 <__divsi3>
    844c:	|           |      addq.l #8,sp
    844e:	|           |      move.l d3,d1
    8450:	|           |      sub.l d0,d1
    8452:	|           |      move.l d1,-(sp)
    8454:	|           |      jsr 17496 <__floatunsisf>
    845a:	|           |      addq.l #4,sp
    845c:	|           |      move.l d0,d1
    845e:	|           |      move.l 1a142 <cameraZoom>,d0
    8464:	|           |      move.l d0,-(sp)
    8466:	|           |      move.l d1,-(sp)
    8468:	|           |      jsr 17324 <__divsf3>
    846e:	|           |      addq.l #8,sp
    8470:	|           |      move.l d0,-(sp)
    8472:	|           |      move.l d2,-(sp)
    8474:	|           |      jsr 1722a <__addsf3>
    847a:	|           |      addq.l #8,sp
    847c:	|           |      movea.l 1a800 <speech>,a2
    8482:	|           |      move.l d0,-(sp)
    8484:	|           |      jsr 17406 <__fixsfsi>
    848a:	|           |      addq.l #4,sp
    848c:	|           |      move.l d0,8(a2)

    if (offset) {
    8490:	|           \----> move.l 16(sp),d0
    8494:	|        /-------- beq.s 84ca <wrapSpeechXY+0x320>
        struct speechLine * viewLine = speech->allSpeech;
    8496:	|        |         movea.l 1a800 <speech>,a0
    849c:	|        |         move.l 4(a0),20(sp)
        while (viewLine) {
    84a2:	|        |     /-- bra.s 84c4 <wrapSpeechXY+0x31a>
            viewLine->x += offset;
    84a4:	|        |  /--|-> movea.l 20(sp),a0
    84a8:	|        |  |  |   move.l 8(a0),d1
    84ac:	|        |  |  |   move.l 16(sp),d0
    84b0:	|        |  |  |   add.l d1,d0
    84b2:	|        |  |  |   movea.l 20(sp),a0
    84b6:	|        |  |  |   move.l d0,8(a0)
            viewLine = viewLine->next;
    84ba:	|        |  |  |   movea.l 20(sp),a0
    84be:	|        |  |  |   move.l 4(a0),20(sp)
        while (viewLine) {
    84c4:	|        |  |  \-> tst.l 20(sp)
    84c8:	|        |  \----- bne.s 84a4 <wrapSpeechXY+0x2fa>
        }
    }

    return speechTime;
    84ca:	|        \-------> move.l 24(sp),d0
}
    84ce:	\----------------> movem.l (sp)+,d2-d4/a2
    84d2:	                   lea 16(sp),sp
    84d6:	                   rts

000084d8 <killZBuffer>:

#define EMULATOR

struct zBufferData *zBuffer;

void killZBuffer () {
    84d8:	       lea -12(sp),sp
    84dc:	       move.l a6,-(sp)
	struct zBufferData *zbuffercursor =  zBuffer;
    84de:	       move.l 1a804 <zBuffer>,12(sp)

	while(zbuffercursor) {
    84e6:	   /-- bra.s 850e <killZBuffer+0x36>
		struct zBufferData *deleteme = zbuffercursor;
    84e8:	/--|-> move.l 12(sp),8(sp)
		zbuffercursor = zbuffercursor->nextPanel;
    84ee:	|  |   movea.l 12(sp),a0
    84f2:	|  |   move.l 24(a0),12(sp)
		FreeVec(deleteme);
    84f8:	|  |   move.l 8(sp),4(sp)
    84fe:	|  |   move.l 1a7a4 <SysBase>,d0
    8504:	|  |   movea.l d0,a6
    8506:	|  |   movea.l 4(sp),a1
    850a:	|  |   jsr -690(a6)
	while(zbuffercursor) {
    850e:	|  \-> tst.l 12(sp)
    8512:	\----- bne.s 84e8 <killZBuffer+0x10>
	}
	zBuffer = NULL;
    8514:	       clr.l 1a804 <zBuffer>
}
    851a:	       nop
    851c:	       movea.l (sp)+,a6
    851e:	       lea 12(sp),sp
    8522:	       rts

00008524 <setZBuffer>:

BOOL setZBuffer (unsigned int y) {
    8524:	                lea -304(sp),sp
    8528:	                movem.l d2-d4/a2/a6,-(sp)
	int x, n;
	ULONG stillToGo = 0;
    852c:	                clr.l 314(sp)
	int yPalette[16], sorted[16], sortback[16];

	killZBuffer ();	
    8530:	                jsr 84d8 <killZBuffer>
	
	if (! openFileFromNum (y)) return FALSE;
    8536:	                move.l 328(sp),d0
    853a:	                move.l d0,-(sp)
    853c:	                jsr 6b36 <openFileFromNum>
    8542:	                addq.l #4,sp
    8544:	                tst.l d0
    8546:	            /-- bne.s 854e <setZBuffer+0x2a>
    8548:	            |   clr.w d0
    854a:	/-----------|-- bra.w 880c <setZBuffer+0x2e8>
	
	if (FGetC (bigDataFile) != 'a' || FGetC (bigDataFile) != 's' || FGetC (bigDataFile) != 'z' || FGetC (bigDataFile) != 'b') 
    854e:	|           \-> move.l 1a78c <bigDataFile>,310(sp)
    8556:	|               move.l 1a7ac <DOSBase>,d0
    855c:	|               movea.l d0,a6
    855e:	|               move.l 310(sp),d1
    8562:	|               jsr -306(a6)
    8566:	|               move.l d0,306(sp)
    856a:	|               move.l 306(sp),d0
    856e:	|               moveq #97,d1
    8570:	|               cmp.l d0,d1
    8572:	|        /----- bne.s 85e6 <setZBuffer+0xc2>
    8574:	|        |      move.l 1a78c <bigDataFile>,302(sp)
    857c:	|        |      move.l 1a7ac <DOSBase>,d0
    8582:	|        |      movea.l d0,a6
    8584:	|        |      move.l 302(sp),d1
    8588:	|        |      jsr -306(a6)
    858c:	|        |      move.l d0,298(sp)
    8590:	|        |      move.l 298(sp),d0
    8594:	|        |      moveq #115,d1
    8596:	|        |      cmp.l d0,d1
    8598:	|        +----- bne.s 85e6 <setZBuffer+0xc2>
    859a:	|        |      move.l 1a78c <bigDataFile>,294(sp)
    85a2:	|        |      move.l 1a7ac <DOSBase>,d0
    85a8:	|        |      movea.l d0,a6
    85aa:	|        |      move.l 294(sp),d1
    85ae:	|        |      jsr -306(a6)
    85b2:	|        |      move.l d0,290(sp)
    85b6:	|        |      move.l 290(sp),d0
    85ba:	|        |      moveq #122,d1
    85bc:	|        |      cmp.l d0,d1
    85be:	|        +----- bne.s 85e6 <setZBuffer+0xc2>
    85c0:	|        |      move.l 1a78c <bigDataFile>,286(sp)
    85c8:	|        |      move.l 1a7ac <DOSBase>,d0
    85ce:	|        |      movea.l d0,a6
    85d0:	|        |      move.l 286(sp),d1
    85d4:	|        |      jsr -306(a6)
    85d8:	|        |      move.l d0,282(sp)
    85dc:	|        |      move.l 282(sp),d0
    85e0:	|        |      moveq #98,d1
    85e2:	|        |      cmp.l d0,d1
    85e4:	|        |  /-- beq.s 85fa <setZBuffer+0xd6>
	{ 
		 KPrintF("Not a Z-buffer file");
    85e6:	|        \--|-> pea 18dd7 <PutChar+0x12f9>
    85ec:	|           |   jsr 1703c <KPrintF>
    85f2:	|           |   addq.l #4,sp
		 return FALSE;
    85f4:	|           |   clr.w d0
    85f6:	+-----------|-- bra.w 880c <setZBuffer+0x2e8>
	}

	UWORD numelements = FGetC(bigDataFile);
    85fa:	|           \-> move.l 1a78c <bigDataFile>,278(sp)
    8602:	|               move.l 1a7ac <DOSBase>,d0
    8608:	|               movea.l d0,a6
    860a:	|               move.l 278(sp),d1
    860e:	|               jsr -306(a6)
    8612:	|               move.l d0,274(sp)
    8616:	|               move.l 274(sp),d0
    861a:	|               move.w d0,322(sp)

	UWORD size;
	UWORD count;

	zBuffer = AllocVec(sizeof(struct zBufferData), MEMF_ANY);
    861e:	|               moveq #28,d0
    8620:	|               move.l d0,270(sp)
    8624:	|               clr.l 266(sp)
    8628:	|               move.l 1a7a4 <SysBase>,d0
    862e:	|               movea.l d0,a6
    8630:	|               move.l 270(sp),d0
    8634:	|               move.l 266(sp),d1
    8638:	|               jsr -684(a6)
    863c:	|               move.l d0,262(sp)
    8640:	|               move.l 262(sp),d0
    8644:	|               move.l d0,1a804 <zBuffer>

	struct zBufferData *currentitem;
	currentitem = zBuffer;
    864a:	|               move.l 1a804 <zBuffer>,318(sp)

	while(numelements--)
    8652:	|     /-------- bra.w 87f2 <setZBuffer+0x2ce>
	{		
		currentitem->width = get2bytes (bigDataFile);
    8656:	|  /--|-------> move.l 1a78c <bigDataFile>,d0
    865c:	|  |  |         move.l d0,-(sp)
    865e:	|  |  |         jsr 6bc <get2bytes>
    8664:	|  |  |         addq.l #4,sp
    8666:	|  |  |         movea.l 318(sp),a0
    866a:	|  |  |         move.l d0,(a0)
		currentitem->height = get2bytes (bigDataFile);
    866c:	|  |  |         move.l 1a78c <bigDataFile>,d0
    8672:	|  |  |         move.l d0,-(sp)
    8674:	|  |  |         jsr 6bc <get2bytes>
    867a:	|  |  |         addq.l #4,sp
    867c:	|  |  |         movea.l 318(sp),a0
    8680:	|  |  |         move.l d0,4(a0)

		currentitem->topx = get2bytes (bigDataFile);
    8684:	|  |  |         move.l 1a78c <bigDataFile>,d0
    868a:	|  |  |         move.l d0,-(sp)
    868c:	|  |  |         jsr 6bc <get2bytes>
    8692:	|  |  |         addq.l #4,sp
    8694:	|  |  |         movea.l 318(sp),a0
    8698:	|  |  |         move.l d0,8(a0)
		currentitem->topy = get2bytes (bigDataFile);
    869c:	|  |  |         move.l 1a78c <bigDataFile>,d0
    86a2:	|  |  |         move.l d0,-(sp)
    86a4:	|  |  |         jsr 6bc <get2bytes>
    86aa:	|  |  |         addq.l #4,sp
    86ac:	|  |  |         movea.l 318(sp),a0
    86b0:	|  |  |         move.l d0,12(a0)
		currentitem->yz = get2bytes (bigDataFile);
    86b4:	|  |  |         move.l 1a78c <bigDataFile>,d0
    86ba:	|  |  |         move.l d0,-(sp)
    86bc:	|  |  |         jsr 6bc <get2bytes>
    86c2:	|  |  |         addq.l #4,sp
    86c4:	|  |  |         movea.l 318(sp),a0
    86c8:	|  |  |         move.l d0,16(a0)

		UWORD size = currentitem->width * currentitem->height / 8;
    86cc:	|  |  |         movea.l 318(sp),a0
    86d0:	|  |  |         move.l (a0),d0
    86d2:	|  |  |         movea.l 318(sp),a0
    86d6:	|  |  |         move.l 4(a0),d1
    86da:	|  |  |         move.l d1,-(sp)
    86dc:	|  |  |         move.l d0,-(sp)
    86de:	|  |  |         jsr 179c8 <__mulsi3>
    86e4:	|  |  |         addq.l #8,sp
    86e6:	|  |  |         tst.l d0
    86e8:	|  |  |     /-- bge.s 86ec <setZBuffer+0x1c8>
    86ea:	|  |  |     |   addq.l #7,d0
    86ec:	|  |  |     \-> asr.l #3,d0
    86ee:	|  |  |         move.w d0,260(sp)
		currentitem->bitplane = AllocVec( size, MEMF_CHIP);
    86f2:	|  |  |         moveq #0,d0
    86f4:	|  |  |         move.w 260(sp),d0
    86f8:	|  |  |         move.l d0,256(sp)
    86fc:	|  |  |         moveq #2,d1
    86fe:	|  |  |         move.l d1,252(sp)
    8702:	|  |  |         move.l 1a7a4 <SysBase>,d0
    8708:	|  |  |         movea.l d0,a6
    870a:	|  |  |         move.l 256(sp),d0
    870e:	|  |  |         move.l 252(sp),d1
    8712:	|  |  |         jsr -684(a6)
    8716:	|  |  |         move.l d0,248(sp)
    871a:	|  |  |         move.l 248(sp),d0
    871e:	|  |  |         movea.l 318(sp),a0
    8722:	|  |  |         move.l d0,20(a0)
		count = FRead( bigDataFile, currentitem->bitplane, 1, size);				
    8726:	|  |  |         move.l 1a78c <bigDataFile>,244(sp)
    872e:	|  |  |         movea.l 318(sp),a0
    8732:	|  |  |         move.l 20(a0),240(sp)
    8738:	|  |  |         moveq #1,d0
    873a:	|  |  |         move.l d0,236(sp)
    873e:	|  |  |         moveq #0,d0
    8740:	|  |  |         move.w 260(sp),d0
    8744:	|  |  |         move.l d0,232(sp)
    8748:	|  |  |         move.l 1a7ac <DOSBase>,d0
    874e:	|  |  |         movea.l d0,a6
    8750:	|  |  |         move.l 244(sp),d1
    8754:	|  |  |         move.l 240(sp),d2
    8758:	|  |  |         move.l 236(sp),d3
    875c:	|  |  |         move.l 232(sp),d4
    8760:	|  |  |         jsr -324(a6)
    8764:	|  |  |         move.l d0,228(sp)
    8768:	|  |  |         move.l 228(sp),d0
    876c:	|  |  |         move.w d0,226(sp)

		if(numelements > 0) {
    8770:	|  |  |         tst.w 322(sp)
    8774:	|  |  |  /----- beq.s 87b0 <setZBuffer+0x28c>
			currentitem->nextPanel = AllocVec(sizeof(struct zBufferData), MEMF_ANY);
    8776:	|  |  |  |      moveq #28,d1
    8778:	|  |  |  |      move.l d1,222(sp)
    877c:	|  |  |  |      clr.l 218(sp)
    8780:	|  |  |  |      move.l 1a7a4 <SysBase>,d0
    8786:	|  |  |  |      movea.l d0,a6
    8788:	|  |  |  |      move.l 222(sp),d0
    878c:	|  |  |  |      move.l 218(sp),d1
    8790:	|  |  |  |      jsr -684(a6)
    8794:	|  |  |  |      move.l d0,214(sp)
    8798:	|  |  |  |      move.l 214(sp),d0
    879c:	|  |  |  |      movea.l 318(sp),a0
    87a0:	|  |  |  |      move.l d0,24(a0)
			currentitem = currentitem->nextPanel;
    87a4:	|  |  |  |      movea.l 318(sp),a0
    87a8:	|  |  |  |      move.l 24(a0),318(sp)
    87ae:	|  |  |  |  /-- bra.s 87b8 <setZBuffer+0x294>
		} else {
			currentitem->nextPanel = NULL;
    87b0:	|  |  |  \--|-> movea.l 318(sp),a0
    87b4:	|  |  |     |   clr.l 24(a0)
		}
		#ifdef EMULATOR  
  			debug_register_bitmap(currentitem->bitplane, "zBuffer.bpl", currentitem->width, currentitem->height , 1, 0);
    87b8:	|  |  |     \-> movea.l 318(sp),a0
    87bc:	|  |  |         move.l 4(a0),d0
    87c0:	|  |  |         move.l d0,d0
    87c2:	|  |  |         movea.w d0,a1
    87c4:	|  |  |         movea.l 318(sp),a0
    87c8:	|  |  |         move.l (a0),d0
    87ca:	|  |  |         move.l d0,d0
    87cc:	|  |  |         movea.w d0,a0
    87ce:	|  |  |         movea.l 318(sp),a2
    87d2:	|  |  |         move.l 20(a2),d0
    87d6:	|  |  |         clr.l -(sp)
    87d8:	|  |  |         pea 1 <_start+0x1>
    87dc:	|  |  |         move.l a1,-(sp)
    87de:	|  |  |         move.l a0,-(sp)
    87e0:	|  |  |         pea 18deb <PutChar+0x130d>
    87e6:	|  |  |         move.l d0,-(sp)
    87e8:	|  |  |         jsr 17124 <debug_register_bitmap>
    87ee:	|  |  |         lea 24(sp),sp
	while(numelements--)
    87f2:	|  |  \-------> move.w 322(sp),d0
    87f6:	|  |            move.w d0,d1
    87f8:	|  |            subq.w #1,d1
    87fa:	|  |            move.w d1,322(sp)
    87fe:	|  |            tst.w d0
    8800:	|  \----------- bne.w 8656 <setZBuffer+0x132>
		#endif  
		
	}


	finishAccess ();
    8804:	|               jsr 6a2e <finishAccess>
	
	return TRUE;
    880a:	|               moveq #1,d0
}
    880c:	\-------------> movem.l (sp)+,d2-d4/a2/a6
    8810:	                lea 304(sp),sp
    8814:	                rts

00008816 <forgetSpriteBank>:
extern int cameraX, cameraY;
extern struct inputType input;


void forgetSpriteBank (struct loadedSpriteBank * forgetme)
{			
    8816:	          lea -32(sp),sp
    881a:	          move.l a6,-(sp)
	struct spriteBank *spritebanktoforget = &forgetme->bank;
    881c:	          move.l 40(sp),d0
    8820:	          addq.l #8,d0
    8822:	          move.l d0,24(sp)
	
	for (int i = 0; i < spritebanktoforget->total; i++) {
    8826:	          clr.l 32(sp)
    882a:	   /----- bra.s 8870 <forgetSpriteBank+0x5a>
		struct sprite *cursprite = &spritebanktoforget->sprites[i];		
    882c:	/--|----> movea.l 24(sp),a0
    8830:	|  |      movea.l 8(a0),a0
    8834:	|  |      move.l 32(sp),d1
    8838:	|  |      move.l d1,d0
    883a:	|  |      lsl.l #3,d0
    883c:	|  |      sub.l d1,d0
    883e:	|  |      add.l d0,d0
    8840:	|  |      add.l d0,d0
    8842:	|  |      adda.l d0,a0
    8844:	|  |      move.l a0,8(sp)
		if(cursprite->data) {		
    8848:	|  |      movea.l 8(sp),a0
    884c:	|  |      move.l 24(a0),d0
    8850:	|  |  /-- beq.s 886c <forgetSpriteBank+0x56>
			FreeVec(cursprite->data);			
    8852:	|  |  |   movea.l 8(sp),a0
    8856:	|  |  |   move.l 24(a0),4(sp)
    885c:	|  |  |   move.l 1a7a4 <SysBase>,d0
    8862:	|  |  |   movea.l d0,a6
    8864:	|  |  |   movea.l 4(sp),a1
    8868:	|  |  |   jsr -690(a6)
	for (int i = 0; i < spritebanktoforget->total; i++) {
    886c:	|  |  \-> addq.l #1,32(sp)
    8870:	|  \----> movea.l 24(sp),a0
    8874:	|         move.l (a0),d0
    8876:	|         cmp.l 32(sp),d0
    887a:	\-------- bgt.s 882c <forgetSpriteBank+0x16>
		}		
	}

	FreeVec(spritebanktoforget->sprites);	
    887c:	          movea.l 24(sp),a0
    8880:	          move.l 8(a0),20(sp)
    8886:	          move.l 1a7a4 <SysBase>,d0
    888c:	          movea.l d0,a6
    888e:	          movea.l 20(sp),a1
    8892:	          jsr -690(a6)
	
	
	struct loadedSpriteBank *precedingbank = allLoadedBanks;
    8896:	          move.l 1a8bc <allLoadedBanks>,28(sp)
	
	while(precedingbank->next->ID != forgetme->ID && precedingbank != NULL)
    889e:	      /-- bra.s 88aa <forgetSpriteBank+0x94>
	{
		precedingbank = precedingbank->next;
    88a0:	   /--|-> movea.l 28(sp),a0
    88a4:	   |  |   move.l 22(a0),28(sp)
	while(precedingbank->next->ID != forgetme->ID && precedingbank != NULL)
    88aa:	   |  \-> movea.l 28(sp),a0
    88ae:	   |      movea.l 22(a0),a0
    88b2:	   |      move.l (a0),d1
    88b4:	   |      movea.l 40(sp),a0
    88b8:	   |      move.l (a0),d0
    88ba:	   |      cmp.l d1,d0
    88bc:	   |  /-- beq.s 88c4 <forgetSpriteBank+0xae>
    88be:	   |  |   tst.l 28(sp)
    88c2:	   \--|-- bne.s 88a0 <forgetSpriteBank+0x8a>
	}	

	if(precedingbank)
    88c4:	      \-> tst.l 28(sp)
    88c8:	   /----- beq.s 88f2 <forgetSpriteBank+0xdc>
	{
		//Forget element in the middle of the chain or the last one
		precedingbank->next = forgetme->next;
    88ca:	   |      movea.l 40(sp),a0
    88ce:	   |      move.l 22(a0),d0
    88d2:	   |      movea.l 28(sp),a0
    88d6:	   |      move.l d0,22(a0)
		FreeVec( forgetme);
    88da:	   |      move.l 40(sp),12(sp)
    88e0:	   |      move.l 1a7a4 <SysBase>,d0
    88e6:	   |      movea.l d0,a6
    88e8:	   |      movea.l 12(sp),a1
    88ec:	   |      jsr -690(a6)
	{
		//Forget first element in the chain
		allLoadedBanks = allLoadedBanks->next;
		FreeVec( forgetme);
	}	
}
    88f0:	   |  /-- bra.s 8918 <forgetSpriteBank+0x102>
		allLoadedBanks = allLoadedBanks->next;
    88f2:	   \--|-> movea.l 1a8bc <allLoadedBanks>,a0
    88f8:	      |   move.l 22(a0),d0
    88fc:	      |   move.l d0,1a8bc <allLoadedBanks>
		FreeVec( forgetme);
    8902:	      |   move.l 40(sp),16(sp)
    8908:	      |   move.l 1a7a4 <SysBase>,d0
    890e:	      |   movea.l d0,a6
    8910:	      |   movea.l 16(sp),a1
    8914:	      |   jsr -690(a6)
}
    8918:	      \-> nop
    891a:	          movea.l (sp)+,a6
    891c:	          lea 32(sp),sp
    8920:	          rts

00008922 <loadSpriteBank>:

BOOL loadSpriteBank (int fileNum, struct spriteBank *loadhere) {
    8922:	                      lea -84(sp),sp
    8926:	                      movem.l d2-d4/a2/a6,-(sp)

	KPrintF("loadSpriteBank: Starting\n");
    892a:	                      pea 18df7 <PutChar+0x1319>
    8930:	                      jsr 1703c <KPrintF>
    8936:	                      addq.l #4,sp

	int i, tex_num, total, picwidth, picheight, howmany = 0, startIndex = 0;
    8938:	                      clr.l 94(sp)
    893c:	                      clr.l 90(sp)
	int *totalwidth, *maxheight;
	int numTextures = 0;
    8940:	                      clr.l 86(sp)
	UBYTE *data;

	if (!openFileFromNum(fileNum)) {
    8944:	                      move.l 108(sp),-(sp)
    8948:	                      jsr 6b36 <openFileFromNum>
    894e:	                      addq.l #4,sp
    8950:	                      tst.l d0
    8952:	                  /-- bne.s 8968 <loadSpriteBank+0x46>
		KPrintF("loadSpriteBank: Can't open sprite bank / font");
    8954:	                  |   pea 18e11 <PutChar+0x1333>
    895a:	                  |   jsr 1703c <KPrintF>
    8960:	                  |   addq.l #4,sp
		return FALSE;
    8962:	                  |   clr.w d0
    8964:	/-----------------|-- bra.w 8d5c <loadSpriteBank+0x43a>
	}

	get2bytes(bigDataFile); // Ignore first 2 bytes
    8968:	|                 \-> move.l 1a78c <bigDataFile>,d0
    896e:	|                     move.l d0,-(sp)
    8970:	|                     jsr 6bc <get2bytes>
    8976:	|                     addq.l #4,sp
	loadhere->type = FGetC(bigDataFile);
    8978:	|                     move.l 1a78c <bigDataFile>,82(sp)
    8980:	|                     move.l 1a7ac <DOSBase>,d0
    8986:	|                     movea.l d0,a6
    8988:	|                     move.l 82(sp),d1
    898c:	|                     jsr -306(a6)
    8990:	|                     move.l d0,78(sp)
    8994:	|                     move.l 78(sp),d0
    8998:	|                     movea.l 112(sp),a0
    899c:	|                     move.l d0,4(a0)
	total = get2bytes(bigDataFile);
    89a0:	|                     move.l 1a78c <bigDataFile>,d0
    89a6:	|                     move.l d0,-(sp)
    89a8:	|                     jsr 6bc <get2bytes>
    89ae:	|                     addq.l #4,sp
    89b0:	|                     move.l d0,74(sp)

	if (total <= 0) {
    89b4:	|                 /-- bgt.s 89ca <loadSpriteBank+0xa8>
		KPrintF("loadSpriteBank: No sprites in bank or invalid sprite bank file\n");
    89b6:	|                 |   pea 18e3f <PutChar+0x1361>
    89bc:	|                 |   jsr 1703c <KPrintF>
    89c2:	|                 |   addq.l #4,sp
		return FALSE;
    89c4:	|                 |   clr.w d0
    89c6:	+-----------------|-- bra.w 8d5c <loadSpriteBank+0x43a>
	}
	if (loadhere->type == 3)
    89ca:	|                 \-> movea.l 112(sp),a0
    89ce:	|                     move.l 4(a0),d0
    89d2:	|                     moveq #3,d1
    89d4:	|                     cmp.l d0,d1
    89d6:	|                 /-- bne.s 89e4 <loadSpriteBank+0xc2>
	{
		loadhere->isFont = TRUE;
    89d8:	|                 |   movea.l 112(sp),a0
    89dc:	|                 |   move.w #1,12(a0)
    89e2:	|              /--|-- bra.s 8a06 <loadSpriteBank+0xe4>
	}
	else if (loadhere->type > 3) {
    89e4:	|              |  \-> movea.l 112(sp),a0
    89e8:	|              |      move.l 4(a0),d0
    89ec:	|              |      moveq #3,d1
    89ee:	|              |      cmp.l d0,d1
    89f0:	|              +----- bge.s 8a06 <loadSpriteBank+0xe4>
		KPrintF("loadSpriteBank: Unsupported sprite bank file format\n");
    89f2:	|              |      pea 18e7f <PutChar+0x13a1>
    89f8:	|              |      jsr 1703c <KPrintF>
    89fe:	|              |      addq.l #4,sp
		return FALSE;
    8a00:	|              |      clr.w d0
    8a02:	+--------------|----- bra.w 8d5c <loadSpriteBank+0x43a>
	}

	loadhere->total = total;
    8a06:	|              \----> movea.l 112(sp),a0
    8a0a:	|                     move.l 74(sp),(a0)
	loadhere->sprites = AllocVec(sizeof(struct sprite) * total, MEMF_ANY);
    8a0e:	|                     move.l 74(sp),d1
    8a12:	|                     move.l d1,d0
    8a14:	|                     lsl.l #3,d0
    8a16:	|                     sub.l d1,d0
    8a18:	|                     add.l d0,d0
    8a1a:	|                     add.l d0,d0
    8a1c:	|                     move.l d0,70(sp)
    8a20:	|                     clr.l 66(sp)
    8a24:	|                     move.l 1a7a4 <SysBase>,d0
    8a2a:	|                     movea.l d0,a6
    8a2c:	|                     move.l 70(sp),d0
    8a30:	|                     move.l 66(sp),d1
    8a34:	|                     jsr -684(a6)
    8a38:	|                     move.l d0,62(sp)
    8a3c:	|                     move.l 62(sp),d0
    8a40:	|                     movea.l 112(sp),a0
    8a44:	|                     move.l d0,8(a0)
	if (!loadhere->sprites) return FALSE;	
    8a48:	|                     movea.l 112(sp),a0
    8a4c:	|                     move.l 8(a0),d0
    8a50:	|                 /-- bne.s 8a58 <loadSpriteBank+0x136>
    8a52:	|                 |   clr.w d0
    8a54:	+-----------------|-- bra.w 8d5c <loadSpriteBank+0x43a>
	
	startIndex = 1;
    8a58:	|                 \-> moveq #1,d0
    8a5a:	|                     move.l d0,90(sp)

	for (i = 0; i < total; i++) {
    8a5e:	|                     clr.l 100(sp)
    8a62:	|     /-------------- bra.w 8d3a <loadSpriteBank+0x418>

		UWORD width = get2bytes(bigDataFile);
    8a66:	|  /--|-------------> move.l 1a78c <bigDataFile>,d0
    8a6c:	|  |  |               move.l d0,-(sp)
    8a6e:	|  |  |               jsr 6bc <get2bytes>
    8a74:	|  |  |               addq.l #4,sp
    8a76:	|  |  |               move.w d0,60(sp)
		loadhere->sprites[i].width = width;
    8a7a:	|  |  |               movea.l 112(sp),a0
    8a7e:	|  |  |               movea.l 8(a0),a0
    8a82:	|  |  |               move.l 100(sp),d1
    8a86:	|  |  |               move.l d1,d0
    8a88:	|  |  |               lsl.l #3,d0
    8a8a:	|  |  |               sub.l d1,d0
    8a8c:	|  |  |               add.l d0,d0
    8a8e:	|  |  |               add.l d0,d0
    8a90:	|  |  |               adda.l d0,a0
    8a92:	|  |  |               moveq #0,d0
    8a94:	|  |  |               move.w 60(sp),d0
    8a98:	|  |  |               move.l d0,(a0)
		loadhere->sprites[i].height = get2bytes(bigDataFile);
    8a9a:	|  |  |               movea.l 1a78c <bigDataFile>,a1
    8aa0:	|  |  |               movea.l 112(sp),a0
    8aa4:	|  |  |               movea.l 8(a0),a0
    8aa8:	|  |  |               move.l 100(sp),d1
    8aac:	|  |  |               move.l d1,d0
    8aae:	|  |  |               lsl.l #3,d0
    8ab0:	|  |  |               sub.l d1,d0
    8ab2:	|  |  |               add.l d0,d0
    8ab4:	|  |  |               add.l d0,d0
    8ab6:	|  |  |               lea (0,a0,d0.l),a2
    8aba:	|  |  |               move.l a1,-(sp)
    8abc:	|  |  |               jsr 6bc <get2bytes>
    8ac2:	|  |  |               addq.l #4,sp
    8ac4:	|  |  |               move.l d0,4(a2)
		loadhere->sprites[i].xhot = get2bytes(bigDataFile);
    8ac8:	|  |  |               movea.l 1a78c <bigDataFile>,a1
    8ace:	|  |  |               movea.l 112(sp),a0
    8ad2:	|  |  |               movea.l 8(a0),a0
    8ad6:	|  |  |               move.l 100(sp),d1
    8ada:	|  |  |               move.l d1,d0
    8adc:	|  |  |               lsl.l #3,d0
    8ade:	|  |  |               sub.l d1,d0
    8ae0:	|  |  |               add.l d0,d0
    8ae2:	|  |  |               add.l d0,d0
    8ae4:	|  |  |               lea (0,a0,d0.l),a2
    8ae8:	|  |  |               move.l a1,-(sp)
    8aea:	|  |  |               jsr 6bc <get2bytes>
    8af0:	|  |  |               addq.l #4,sp
    8af2:	|  |  |               move.l d0,8(a2)
		loadhere->sprites[i].yhot = get2bytes(bigDataFile);
    8af6:	|  |  |               movea.l 1a78c <bigDataFile>,a1
    8afc:	|  |  |               movea.l 112(sp),a0
    8b00:	|  |  |               movea.l 8(a0),a0
    8b04:	|  |  |               move.l 100(sp),d1
    8b08:	|  |  |               move.l d1,d0
    8b0a:	|  |  |               lsl.l #3,d0
    8b0c:	|  |  |               sub.l d1,d0
    8b0e:	|  |  |               add.l d0,d0
    8b10:	|  |  |               add.l d0,d0
    8b12:	|  |  |               lea (0,a0,d0.l),a2
    8b16:	|  |  |               move.l a1,-(sp)
    8b18:	|  |  |               jsr 6bc <get2bytes>
    8b1e:	|  |  |               addq.l #4,sp
    8b20:	|  |  |               move.l d0,12(a2)

		UWORD size;
		
		switch( loadhere->type) 
    8b24:	|  |  |               movea.l 112(sp),a0
    8b28:	|  |  |               move.l 4(a0),d0
    8b2c:	|  |  |               moveq #3,d1
    8b2e:	|  |  |               cmp.l d0,d1
    8b30:	|  |  |     /-------- beq.w 8bcc <loadSpriteBank+0x2aa>
    8b34:	|  |  |     |         moveq #3,d1
    8b36:	|  |  |     |         cmp.l d0,d1
    8b38:	|  |  |  /--|-------- blt.w 8c72 <loadSpriteBank+0x350>
    8b3c:	|  |  |  |  |         moveq #1,d1
    8b3e:	|  |  |  |  |         cmp.l d0,d1
    8b40:	|  |  |  |  |     /-- beq.s 8b4c <loadSpriteBank+0x22a>
    8b42:	|  |  |  |  |     |   moveq #2,d1
    8b44:	|  |  |  |  |     |   cmp.l d0,d1
    8b46:	|  |  |  |  |  /--|-- beq.s 8b78 <loadSpriteBank+0x256>
    8b48:	|  |  |  +--|--|--|-- bra.w 8c72 <loadSpriteBank+0x350>
		{
			case 1: //Sprite
				size = 4*loadhere->sprites[i].height+8;
    8b4c:	|  |  |  |  |  |  \-> movea.l 112(sp),a0
    8b50:	|  |  |  |  |  |      movea.l 8(a0),a0
    8b54:	|  |  |  |  |  |      move.l 100(sp),d1
    8b58:	|  |  |  |  |  |      move.l d1,d0
    8b5a:	|  |  |  |  |  |      lsl.l #3,d0
    8b5c:	|  |  |  |  |  |      sub.l d1,d0
    8b5e:	|  |  |  |  |  |      add.l d0,d0
    8b60:	|  |  |  |  |  |      add.l d0,d0
    8b62:	|  |  |  |  |  |      adda.l d0,a0
    8b64:	|  |  |  |  |  |      move.l 4(a0),d0
    8b68:	|  |  |  |  |  |      addq.l #2,d0
    8b6a:	|  |  |  |  |  |      move.l d0,d0
    8b6c:	|  |  |  |  |  |      add.w d0,d0
    8b6e:	|  |  |  |  |  |      add.w d0,d0
    8b70:	|  |  |  |  |  |      move.w d0,98(sp)
				break;
    8b74:	|  |  |  +--|--|----- bra.w 8c72 <loadSpriteBank+0x350>
			case 2: //Bob
				size = loadhere->sprites[i].width / 8 * loadhere->sprites[i].height * 6;
    8b78:	|  |  |  |  |  \----> movea.l 112(sp),a0
    8b7c:	|  |  |  |  |         movea.l 8(a0),a0
    8b80:	|  |  |  |  |         move.l 100(sp),d1
    8b84:	|  |  |  |  |         move.l d1,d0
    8b86:	|  |  |  |  |         lsl.l #3,d0
    8b88:	|  |  |  |  |         sub.l d1,d0
    8b8a:	|  |  |  |  |         add.l d0,d0
    8b8c:	|  |  |  |  |         add.l d0,d0
    8b8e:	|  |  |  |  |         adda.l d0,a0
    8b90:	|  |  |  |  |         move.l (a0),d0
    8b92:	|  |  |  |  |     /-- bpl.s 8b96 <loadSpriteBank+0x274>
    8b94:	|  |  |  |  |     |   addq.l #7,d0
    8b96:	|  |  |  |  |     \-> asr.l #3,d0
    8b98:	|  |  |  |  |         move.l d0,d2
    8b9a:	|  |  |  |  |         movea.l 112(sp),a0
    8b9e:	|  |  |  |  |         movea.l 8(a0),a0
    8ba2:	|  |  |  |  |         move.l 100(sp),d1
    8ba6:	|  |  |  |  |         move.l d1,d0
    8ba8:	|  |  |  |  |         lsl.l #3,d0
    8baa:	|  |  |  |  |         sub.l d1,d0
    8bac:	|  |  |  |  |         add.l d0,d0
    8bae:	|  |  |  |  |         add.l d0,d0
    8bb0:	|  |  |  |  |         adda.l d0,a0
    8bb2:	|  |  |  |  |         move.l 4(a0),d0
    8bb6:	|  |  |  |  |         move.l d0,d0
    8bb8:	|  |  |  |  |         move.w d2,d1
    8bba:	|  |  |  |  |         muls.w d0,d1
    8bbc:	|  |  |  |  |         move.w d1,d0
    8bbe:	|  |  |  |  |         add.w d0,d0
    8bc0:	|  |  |  |  |         add.w d1,d0
    8bc2:	|  |  |  |  |         add.w d0,d0
    8bc4:	|  |  |  |  |         move.w d0,98(sp)
				break;
    8bc8:	|  |  |  +--|-------- bra.w 8c72 <loadSpriteBank+0x350>
			case 3: //Font
				UWORD widthextra = loadhere->sprites[i].width % 16 > 0 ? 2 : 0;
    8bcc:	|  |  |  |  \-------> movea.l 112(sp),a0
    8bd0:	|  |  |  |            movea.l 8(a0),a0
    8bd4:	|  |  |  |            move.l 100(sp),d1
    8bd8:	|  |  |  |            move.l d1,d0
    8bda:	|  |  |  |            lsl.l #3,d0
    8bdc:	|  |  |  |            sub.l d1,d0
    8bde:	|  |  |  |            add.l d0,d0
    8be0:	|  |  |  |            add.l d0,d0
    8be2:	|  |  |  |            adda.l d0,a0
    8be4:	|  |  |  |            move.l (a0),d0
    8be6:	|  |  |  |            andi.l #-2147483633,d0
    8bec:	|  |  |  |        /-- bpl.s 8bf6 <loadSpriteBank+0x2d4>
    8bee:	|  |  |  |        |   subq.l #1,d0
    8bf0:	|  |  |  |        |   moveq #-16,d1
    8bf2:	|  |  |  |        |   or.l d1,d0
    8bf4:	|  |  |  |        |   addq.l #1,d0
    8bf6:	|  |  |  |        \-> tst.l d0
    8bf8:	|  |  |  |     /----- ble.s 8bfe <loadSpriteBank+0x2dc>
    8bfa:	|  |  |  |     |      moveq #2,d0
    8bfc:	|  |  |  |     |  /-- bra.s 8c00 <loadSpriteBank+0x2de>
    8bfe:	|  |  |  |     \--|-> clr.w d0
    8c00:	|  |  |  |        \-> move.w d0,58(sp)
				size = ((loadhere->sprites[i].width  / 16) * 2 + widthextra) * loadhere->sprites[i].height;
    8c04:	|  |  |  |            movea.l 112(sp),a0
    8c08:	|  |  |  |            movea.l 8(a0),a0
    8c0c:	|  |  |  |            move.l 100(sp),d1
    8c10:	|  |  |  |            move.l d1,d0
    8c12:	|  |  |  |            lsl.l #3,d0
    8c14:	|  |  |  |            sub.l d1,d0
    8c16:	|  |  |  |            add.l d0,d0
    8c18:	|  |  |  |            add.l d0,d0
    8c1a:	|  |  |  |            adda.l d0,a0
    8c1c:	|  |  |  |            move.l (a0),d0
    8c1e:	|  |  |  |            movea.l d0,a0
    8c20:	|  |  |  |            cmpa.w #0,a0
    8c24:	|  |  |  |        /-- bge.s 8c2a <loadSpriteBank+0x308>
    8c26:	|  |  |  |        |   lea 15(a0),a0
    8c2a:	|  |  |  |        \-> move.l a0,d0
    8c2c:	|  |  |  |            asr.l #4,d0
    8c2e:	|  |  |  |            add.l d0,d0
    8c30:	|  |  |  |            move.l d0,d1
    8c32:	|  |  |  |            moveq #0,d0
    8c34:	|  |  |  |            move.w 58(sp),d0
    8c38:	|  |  |  |            add.l d1,d0
    8c3a:	|  |  |  |            move.l d0,d2
    8c3c:	|  |  |  |            movea.l 112(sp),a0
    8c40:	|  |  |  |            movea.l 8(a0),a0
    8c44:	|  |  |  |            move.l 100(sp),d1
    8c48:	|  |  |  |            move.l d1,d0
    8c4a:	|  |  |  |            lsl.l #3,d0
    8c4c:	|  |  |  |            sub.l d1,d0
    8c4e:	|  |  |  |            add.l d0,d0
    8c50:	|  |  |  |            add.l d0,d0
    8c52:	|  |  |  |            adda.l d0,a0
    8c54:	|  |  |  |            move.l 4(a0),d0
    8c58:	|  |  |  |            move.l d0,d0
    8c5a:	|  |  |  |            move.w d2,d1
    8c5c:	|  |  |  |            muls.w d0,d1
    8c5e:	|  |  |  |            move.w d1,98(sp)
				if(size > 100)
    8c62:	|  |  |  |            cmpi.w #100,98(sp)
    8c68:	|  |  |  |        /-- bls.s 8c70 <loadSpriteBank+0x34e>
				{
					UWORD br1 = 1;
    8c6a:	|  |  |  |        |   move.w #1,56(sp)
				}
				break;
    8c70:	|  |  |  |        \-> nop
		}

		loadhere->sprites[i].data = AllocVec(sizeof(UWORD) * size, MEMF_CHIP);
    8c72:	|  |  |  \----------> moveq #0,d0
    8c74:	|  |  |               move.w 98(sp),d0
    8c78:	|  |  |               add.l d0,d0
    8c7a:	|  |  |               move.l d0,52(sp)
    8c7e:	|  |  |               moveq #2,d0
    8c80:	|  |  |               move.l d0,48(sp)
    8c84:	|  |  |               move.l 1a7a4 <SysBase>,d0
    8c8a:	|  |  |               movea.l d0,a6
    8c8c:	|  |  |               move.l 52(sp),d0
    8c90:	|  |  |               move.l 48(sp),d1
    8c94:	|  |  |               jsr -684(a6)
    8c98:	|  |  |               move.l d0,44(sp)
    8c9c:	|  |  |               movea.l 44(sp),a1
    8ca0:	|  |  |               movea.l 112(sp),a0
    8ca4:	|  |  |               movea.l 8(a0),a0
    8ca8:	|  |  |               move.l 100(sp),d1
    8cac:	|  |  |               move.l d1,d0
    8cae:	|  |  |               lsl.l #3,d0
    8cb0:	|  |  |               sub.l d1,d0
    8cb2:	|  |  |               add.l d0,d0
    8cb4:	|  |  |               add.l d0,d0
    8cb6:	|  |  |               adda.l d0,a0
    8cb8:	|  |  |               move.l a1,24(a0)
		UWORD count = FRead(bigDataFile, loadhere->sprites[i].data, 2, size / 2);
    8cbc:	|  |  |               move.l 1a78c <bigDataFile>,40(sp)
    8cc4:	|  |  |               movea.l 112(sp),a0
    8cc8:	|  |  |               movea.l 8(a0),a0
    8ccc:	|  |  |               move.l 100(sp),d1
    8cd0:	|  |  |               move.l d1,d0
    8cd2:	|  |  |               lsl.l #3,d0
    8cd4:	|  |  |               sub.l d1,d0
    8cd6:	|  |  |               add.l d0,d0
    8cd8:	|  |  |               add.l d0,d0
    8cda:	|  |  |               adda.l d0,a0
    8cdc:	|  |  |               move.l 24(a0),36(sp)
    8ce2:	|  |  |               moveq #2,d1
    8ce4:	|  |  |               move.l d1,32(sp)
    8ce8:	|  |  |               move.w 98(sp),d0
    8cec:	|  |  |               lsr.w #1,d0
    8cee:	|  |  |               move.w d0,d0
    8cf0:	|  |  |               andi.l #65535,d0
    8cf6:	|  |  |               move.l d0,28(sp)
    8cfa:	|  |  |               move.l 1a7ac <DOSBase>,d0
    8d00:	|  |  |               movea.l d0,a6
    8d02:	|  |  |               move.l 40(sp),d1
    8d06:	|  |  |               move.l 36(sp),d2
    8d0a:	|  |  |               move.l 32(sp),d3
    8d0e:	|  |  |               move.l 28(sp),d4
    8d12:	|  |  |               jsr -324(a6)
    8d16:	|  |  |               move.l d0,24(sp)
    8d1a:	|  |  |               move.l 24(sp),d0
    8d1e:	|  |  |               move.w d0,22(sp)
		if (!count) {
    8d22:	|  |  |           /-- bne.s 8d36 <loadSpriteBank+0x414>
			KPrintF("loadSpriteBank: Cannot read sprite Data from File\n");
    8d24:	|  |  |           |   pea 18eb4 <PutChar+0x13d6>
    8d2a:	|  |  |           |   jsr 1703c <KPrintF>
    8d30:	|  |  |           |   addq.l #4,sp
			return FALSE;
    8d32:	|  |  |           |   clr.w d0
    8d34:	+--|--|-----------|-- bra.s 8d5c <loadSpriteBank+0x43a>
	for (i = 0; i < total; i++) {
    8d36:	|  |  |           \-> addq.l #1,100(sp)
    8d3a:	|  |  \-------------> move.l 100(sp),d0
    8d3e:	|  |                  cmp.l 74(sp),d0
    8d42:	|  \----------------- blt.w 8a66 <loadSpriteBank+0x144>
		}
	}

	finishAccess ();
    8d46:	|                     jsr 6a2e <finishAccess>

	KPrintF("loadSpriteBank: Complete\n");
    8d4c:	|                     pea 18ee7 <PutChar+0x1409>
    8d52:	|                     jsr 1703c <KPrintF>
    8d58:	|                     addq.l #4,sp
	return TRUE;
    8d5a:	|                     moveq #1,d0
}
    8d5c:	\-------------------> movem.l (sp)+,d2-d4/a2/a6
    8d60:	                      lea 84(sp),sp
    8d64:	                      rts

00008d66 <scaleSprite>:

BOOL scaleSprite (struct sprite *single, struct onScreenPerson * thisPerson, BOOL mirror) 
{
    8d66:	                   lea -16(sp),sp
    8d6a:	                   move.l d2,-(sp)
    8d6c:	                   move.l 32(sp),d0
    8d70:	                   move.w d0,d0
    8d72:	                   move.w d0,6(sp)
	WORD x =  thisPerson->x - single->xhot;
    8d76:	                   movea.l 28(sp),a0
    8d7a:	                   move.l (a0),d2
    8d7c:	                   movea.l 24(sp),a0
    8d80:	                   move.l 8(a0),d0
    8d84:	                   move.l d0,-(sp)
    8d86:	                   jsr 1746e <__floatsisf>
    8d8c:	                   addq.l #4,sp
    8d8e:	                   move.l d0,-(sp)
    8d90:	                   move.l d2,-(sp)
    8d92:	                   jsr 17762 <__subsf3>
    8d98:	                   addq.l #8,sp
    8d9a:	                   move.l d0,-(sp)
    8d9c:	                   jsr 17406 <__fixsfsi>
    8da2:	                   addq.l #4,sp
    8da4:	                   move.w d0,18(sp)
	WORD y =  thisPerson->y - single->yhot;			
    8da8:	                   movea.l 28(sp),a0
    8dac:	                   move.l 4(a0),d2
    8db0:	                   movea.l 24(sp),a0
    8db4:	                   move.l 12(a0),d0
    8db8:	                   move.l d0,-(sp)
    8dba:	                   jsr 1746e <__floatsisf>
    8dc0:	                   addq.l #4,sp
    8dc2:	                   move.l d0,-(sp)
    8dc4:	                   move.l d2,-(sp)
    8dc6:	                   jsr 17762 <__subsf3>
    8dcc:	                   addq.l #8,sp
    8dce:	                   move.l d0,-(sp)
    8dd0:	                   jsr 17406 <__fixsfsi>
    8dd6:	                   addq.l #4,sp
    8dd8:	                   move.w d0,8(sp)

	if( x < 0)
    8ddc:	                   tst.w 18(sp)
    8de0:	               /-- bge.s 8e14 <scaleSprite+0xae>
	{
		x = thisPerson->x - single->xhot;
    8de2:	               |   movea.l 28(sp),a0
    8de6:	               |   move.l (a0),d2
    8de8:	               |   movea.l 24(sp),a0
    8dec:	               |   move.l 8(a0),d0
    8df0:	               |   move.l d0,-(sp)
    8df2:	               |   jsr 1746e <__floatsisf>
    8df8:	               |   addq.l #4,sp
    8dfa:	               |   move.l d0,-(sp)
    8dfc:	               |   move.l d2,-(sp)
    8dfe:	               |   jsr 17762 <__subsf3>
    8e04:	               |   addq.l #8,sp
    8e06:	               |   move.l d0,-(sp)
    8e08:	               |   jsr 17406 <__fixsfsi>
    8e0e:	               |   addq.l #4,sp
    8e10:	               |   move.w d0,18(sp)
	}

	CstScaleSprite( single, thisPerson, x, y,SCREEN);
    8e14:	               \-> movea.w 8(sp),a1
    8e18:	                   movea.w 18(sp),a0
    8e1c:	                   pea 1 <_start+0x1>
    8e20:	                   move.l a1,-(sp)
    8e22:	                   move.l a0,-(sp)
    8e24:	                   move.l 40(sp),-(sp)
    8e28:	                   move.l 40(sp),-(sp)
    8e2c:	                   jsr 2c10 <CstScaleSprite>
    8e32:	                   lea 20(sp),sp

	UWORD x1, y1, x2, y2;

	if (thisPerson -> extra & EXTRA_FIXTOSCREEN) {
    8e36:	                   movea.l 28(sp),a0
    8e3a:	                   move.l 118(a0),d0
    8e3e:	                   moveq #8,d1
    8e40:	                   and.l d1,d0
    8e42:	   /-------------- beq.w 8f0e <scaleSprite+0x1a8>
		if (single->xhot < 0)
    8e46:	   |               movea.l 24(sp),a0
    8e4a:	   |               move.l 8(a0),d0
    8e4e:	   |  /----------- bpl.s 8e8a <scaleSprite+0x124>
			x1 = x - (int)(mirror ? single->width - single->xhot : single->xhot+1);
    8e50:	   |  |            move.w 18(sp),d0
    8e54:	   |  |            tst.w 6(sp)
    8e58:	   |  |     /----- beq.s 8e72 <scaleSprite+0x10c>
    8e5a:	   |  |     |      movea.l 24(sp),a0
    8e5e:	   |  |     |      move.l (a0),d1
    8e60:	   |  |     |      move.l d1,d2
    8e62:	   |  |     |      movea.l 24(sp),a0
    8e66:	   |  |     |      move.l 8(a0),d1
    8e6a:	   |  |     |      move.l d1,d1
    8e6c:	   |  |     |      movea.w d2,a0
    8e6e:	   |  |     |      suba.w d1,a0
    8e70:	   |  |     |  /-- bra.s 8e80 <scaleSprite+0x11a>
    8e72:	   |  |     \--|-> movea.l 24(sp),a0
    8e76:	   |  |        |   move.l 8(a0),d1
    8e7a:	   |  |        |   move.l d1,d1
    8e7c:	   |  |        |   movea.w d1,a0
    8e7e:	   |  |        |   addq.w #1,a0
    8e80:	   |  |        \-> move.w d0,d1
    8e82:	   |  |            sub.w a0,d1
    8e84:	   |  |            move.w d1,16(sp)
    8e88:	   |  |  /-------- bra.s 8ec2 <scaleSprite+0x15c>
		else
			x1 = x - (int)(mirror ? single->width - (single->xhot+1) : single->xhot);
    8e8a:	   |  \--|-------> move.w 18(sp),d1
    8e8e:	   |     |         tst.w 6(sp)
    8e92:	   |     |  /----- beq.s 8eb0 <scaleSprite+0x14a>
    8e94:	   |     |  |      movea.l 24(sp),a0
    8e98:	   |     |  |      move.l (a0),d0
    8e9a:	   |     |  |      move.l d0,d2
    8e9c:	   |     |  |      movea.l 24(sp),a0
    8ea0:	   |     |  |      move.l 8(a0),d0
    8ea4:	   |     |  |      move.l d0,d0
    8ea6:	   |     |  |      movea.w d2,a0
    8ea8:	   |     |  |      suba.w d0,a0
    8eaa:	   |     |  |      move.w a0,d0
    8eac:	   |     |  |      subq.w #1,d0
    8eae:	   |     |  |  /-- bra.s 8eba <scaleSprite+0x154>
    8eb0:	   |     |  \--|-> movea.l 24(sp),a0
    8eb4:	   |     |     |   move.l 8(a0),d0
    8eb8:	   |     |     |   move.l d0,d0
    8eba:	   |     |     \-> movea.w d1,a0
    8ebc:	   |     |         suba.w d0,a0
    8ebe:	   |     |         move.w a0,16(sp)
		
		y1 = y - (single->yhot - thisPerson->floaty);
    8ec2:	   |     \-------> movea.l 28(sp),a0
    8ec6:	   |               move.l 24(a0),d0
    8eca:	   |               move.l d0,d1
    8ecc:	   |               movea.l 24(sp),a0
    8ed0:	   |               move.l 12(a0),d0
    8ed4:	   |               move.l d0,d0
    8ed6:	   |               sub.w d0,d1
    8ed8:	   |               move.w 8(sp),d0
    8edc:	   |               movea.w d1,a0
    8ede:	   |               adda.w d0,a0
    8ee0:	   |               move.w a0,14(sp)
		x2 = x1 + single->width;
    8ee4:	   |               movea.l 24(sp),a0
    8ee8:	   |               move.l (a0),d0
    8eea:	   |               move.l d0,d0
    8eec:	   |               move.w 16(sp),d1
    8ef0:	   |               add.w d0,d1
    8ef2:	   |               move.w d1,12(sp)
		y2 = y1 + single->height;
    8ef6:	   |               movea.l 24(sp),a0
    8efa:	   |               move.l 4(a0),d0
    8efe:	   |               move.l d0,d0
    8f00:	   |               movea.w 14(sp),a0
    8f04:	   |               adda.w d0,a0
    8f06:	   |               move.w a0,10(sp)
    8f0a:	/--|-------------- bra.w 8ff6 <scaleSprite+0x290>
	} else {
		x -= cameraX;
    8f0e:	|  \-------------> move.w 18(sp),d1
    8f12:	|                  move.l 1a85e <cameraX>,d0
    8f18:	|                  move.l d0,d0
    8f1a:	|                  sub.w d0,d1
    8f1c:	|                  move.w d1,18(sp)
		y -= cameraY;
    8f20:	|                  move.w 8(sp),d1
    8f24:	|                  move.l 1a862 <cameraY>,d0
    8f2a:	|                  move.l d0,d0
    8f2c:	|                  sub.w d0,d1
    8f2e:	|                  move.w d1,8(sp)
		if (single->xhot < 0)
    8f32:	|                  movea.l 24(sp),a0
    8f36:	|                  move.l 8(a0),d0
    8f3a:	|     /----------- bpl.s 8f76 <scaleSprite+0x210>
			x1 = x - (int)(mirror ? single->width - single->xhot : single->xhot+1);
    8f3c:	|     |            move.w 18(sp),d0
    8f40:	|     |            tst.w 6(sp)
    8f44:	|     |     /----- beq.s 8f5e <scaleSprite+0x1f8>
    8f46:	|     |     |      movea.l 24(sp),a0
    8f4a:	|     |     |      move.l (a0),d1
    8f4c:	|     |     |      move.l d1,d2
    8f4e:	|     |     |      movea.l 24(sp),a0
    8f52:	|     |     |      move.l 8(a0),d1
    8f56:	|     |     |      move.l d1,d1
    8f58:	|     |     |      movea.w d2,a0
    8f5a:	|     |     |      suba.w d1,a0
    8f5c:	|     |     |  /-- bra.s 8f6c <scaleSprite+0x206>
    8f5e:	|     |     \--|-> movea.l 24(sp),a0
    8f62:	|     |        |   move.l 8(a0),d1
    8f66:	|     |        |   move.l d1,d1
    8f68:	|     |        |   movea.w d1,a0
    8f6a:	|     |        |   addq.w #1,a0
    8f6c:	|     |        \-> move.w d0,d1
    8f6e:	|     |            sub.w a0,d1
    8f70:	|     |            move.w d1,16(sp)
    8f74:	|     |  /-------- bra.s 8fae <scaleSprite+0x248>
		else
			x1 = x - (int)(mirror ? single->width - (single->xhot+1) : single->xhot);
    8f76:	|     \--|-------> move.w 18(sp),d1
    8f7a:	|        |         tst.w 6(sp)
    8f7e:	|        |  /----- beq.s 8f9c <scaleSprite+0x236>
    8f80:	|        |  |      movea.l 24(sp),a0
    8f84:	|        |  |      move.l (a0),d0
    8f86:	|        |  |      move.l d0,d2
    8f88:	|        |  |      movea.l 24(sp),a0
    8f8c:	|        |  |      move.l 8(a0),d0
    8f90:	|        |  |      move.l d0,d0
    8f92:	|        |  |      movea.w d2,a0
    8f94:	|        |  |      suba.w d0,a0
    8f96:	|        |  |      move.w a0,d0
    8f98:	|        |  |      subq.w #1,d0
    8f9a:	|        |  |  /-- bra.s 8fa6 <scaleSprite+0x240>
    8f9c:	|        |  \--|-> movea.l 24(sp),a0
    8fa0:	|        |     |   move.l 8(a0),d0
    8fa4:	|        |     |   move.l d0,d0
    8fa6:	|        |     \-> movea.w d1,a0
    8fa8:	|        |         suba.w d0,a0
    8faa:	|        |         move.w a0,16(sp)
		
		y1 = y - (single->yhot - thisPerson->floaty);
    8fae:	|        \-------> movea.l 28(sp),a0
    8fb2:	|                  move.l 24(a0),d0
    8fb6:	|                  move.l d0,d1
    8fb8:	|                  movea.l 24(sp),a0
    8fbc:	|                  move.l 12(a0),d0
    8fc0:	|                  move.l d0,d0
    8fc2:	|                  sub.w d0,d1
    8fc4:	|                  move.w 8(sp),d0
    8fc8:	|                  movea.w d1,a0
    8fca:	|                  adda.w d0,a0
    8fcc:	|                  move.w a0,14(sp)
		x2 = x1 + single->width;
    8fd0:	|                  movea.l 24(sp),a0
    8fd4:	|                  move.l (a0),d0
    8fd6:	|                  move.l d0,d0
    8fd8:	|                  move.w 16(sp),d1
    8fdc:	|                  add.w d0,d1
    8fde:	|                  move.w d1,12(sp)
		y2 = y1 + single->height;
    8fe2:	|                  movea.l 24(sp),a0
    8fe6:	|                  move.l 4(a0),d0
    8fea:	|                  move.l d0,d0
    8fec:	|                  movea.w 14(sp),a0
    8ff0:	|                  adda.w d0,a0
    8ff2:	|                  move.w a0,10(sp)
	}

	if (input.mouseX >= x1 && input.mouseX <= x2 && input.mouseY >= y1 && input.mouseY <= y2) {
    8ff6:	\----------------> move.l 1a760 <input+0xa>,d1
    8ffc:	                   moveq #0,d0
    8ffe:	                   move.w 16(sp),d0
    9002:	                   cmp.l d1,d0
    9004:	            /----- bgt.s 903a <scaleSprite+0x2d4>
    9006:	            |      move.l 1a760 <input+0xa>,d1
    900c:	            |      moveq #0,d0
    900e:	            |      move.w 12(sp),d0
    9012:	            |      cmp.l d1,d0
    9014:	            +----- blt.s 903a <scaleSprite+0x2d4>
    9016:	            |      move.l 1a764 <input+0xe>,d1
    901c:	            |      moveq #0,d0
    901e:	            |      move.w 14(sp),d0
    9022:	            |      cmp.l d1,d0
    9024:	            +----- bgt.s 903a <scaleSprite+0x2d4>
    9026:	            |      move.l 1a764 <input+0xe>,d1
    902c:	            |      moveq #0,d0
    902e:	            |      move.w 10(sp),d0
    9032:	            |      cmp.l d1,d0
    9034:	            +----- blt.s 903a <scaleSprite+0x2d4>
		return TRUE;
    9036:	            |      moveq #1,d0
    9038:	            |  /-- bra.s 903c <scaleSprite+0x2d6>
	}
	return FALSE;
    903a:	            \--|-> clr.w d0
    903c:	               \-> move.l (sp)+,d2
    903e:	                   lea 16(sp),sp
    9042:	                   rts

00009044 <TF_abs>:

short int scaleHorizon = 75;
short int scaleDivide = 150;

int TF_abs (int a) {
	return (a > 0) ? a : -a;
    9044:	    move.l 4(sp),d0
    9048:	/-- bpl.s 904c <TF_abs+0x8>
    904a:	|   neg.l d0
}
    904c:	\-> rts

0000904e <addPerson>:


BOOL addPerson(int x, int y, int objNum, struct persona *p) {
    904e:	             lea -28(sp),sp
    9052:	             move.l a6,-(sp)
    9054:	             move.l d2,-(sp)
    struct onScreenPerson *newPerson = AllocVec(sizeof(struct onScreenPerson), MEMF_ANY);
    9056:	             move.l #132,28(sp)
    905e:	             clr.l 24(sp)
    9062:	             move.l 1a7a4 <SysBase>,d0
    9068:	             movea.l d0,a6
    906a:	             move.l 28(sp),d0
    906e:	             move.l 24(sp),d1
    9072:	             jsr -684(a6)
    9076:	             move.l d0,20(sp)
    907a:	             move.l 20(sp),d0
    907e:	             move.l d0,16(sp)
    if (!newPerson) return FALSE;
    9082:	         /-- bne.s 908a <addPerson+0x3c>
    9084:	         |   clr.w d0
    9086:	/--------|-- bra.w 92ba <addPerson+0x26c>

    // EASY STUFF
    newPerson->thisType = loadObjectType(objNum);
    908a:	|        \-> move.l 48(sp),-(sp)
    908e:	|            jsr d446 <loadObjectType>
    9094:	|            addq.l #4,sp
    9096:	|            movea.l 16(sp),a0
    909a:	|            move.l d0,114(a0)
    newPerson->scale = 1;
    909e:	|            movea.l 16(sp),a0
    90a2:	|            move.l #1065353216,32(a0)
    newPerson->extra = 0;
    90aa:	|            movea.l 16(sp),a0
    90ae:	|            clr.l 118(a0)
    newPerson->continueAfterWalking = NULL;
    90b2:	|            movea.l 16(sp),a0
    90b6:	|            clr.l 68(a0)
    moveAndScale(newPerson, x, y);
    90ba:	|            move.l 44(sp),-(sp)
    90be:	|            jsr 1746e <__floatsisf>
    90c4:	|            addq.l #4,sp
    90c6:	|            move.l d0,d2
    90c8:	|            move.l 40(sp),-(sp)
    90cc:	|            jsr 1746e <__floatsisf>
    90d2:	|            addq.l #4,sp
    90d4:	|            move.l d2,-(sp)
    90d6:	|            move.l d0,-(sp)
    90d8:	|            move.l 24(sp),-(sp)
    90dc:	|            jsr ab9c <moveAndScale>
    90e2:	|            lea 12(sp),sp
    newPerson->frameNum = 0;
    90e6:	|            movea.l 16(sp),a0
    90ea:	|            clr.l 84(a0)
    newPerson->walkToX = x;
    90ee:	|            movea.l 16(sp),a0
    90f2:	|            move.l 40(sp),40(a0)
    newPerson->walkToY = y;
    90f8:	|            movea.l 16(sp),a0
    90fc:	|            move.l 44(sp),44(a0)
    newPerson->walking = FALSE;
    9102:	|            movea.l 16(sp),a0
    9106:	|            clr.w 64(a0)
    newPerson->spinning = FALSE;
    910a:	|            movea.l 16(sp),a0
    910e:	|            clr.w 66(a0)
    newPerson->show = TRUE;
    9112:	|            movea.l 16(sp),a0
    9116:	|            move.w #1,104(a0)
    newPerson->direction = 0;
    911c:	|            movea.l 16(sp),a0
    9120:	|            clr.l 106(a0)
    newPerson->angle = 180;
    9124:	|            movea.l 16(sp),a0
    9128:	|            move.l #180,92(a0)
    newPerson->wantAngle = 180;
    9130:	|            movea.l 16(sp),a0
    9134:	|            move.l #180,96(a0)
    newPerson->angleOffset = 0;
    913c:	|            movea.l 16(sp),a0
    9140:	|            clr.l 100(a0)
    newPerson->floaty = 0;
    9144:	|            movea.l 16(sp),a0
    9148:	|            clr.l 24(a0)
    newPerson->walkSpeed = newPerson->thisType->walkSpeed;
    914c:	|            movea.l 16(sp),a0
    9150:	|            movea.l 114(a0),a0
    9154:	|            move.l 24(a0),d0
    9158:	|            movea.l 16(sp),a0
    915c:	|            move.l d0,28(a0)
    newPerson->myAnim = NULL;
    9160:	|            movea.l 16(sp),a0
    9164:	|            clr.l 72(a0)
    newPerson->spinSpeed = newPerson->thisType->spinSpeed;
    9168:	|            movea.l 16(sp),a0
    916c:	|            movea.l 114(a0),a0
    9170:	|            move.l 32(a0),d0
    9174:	|            movea.l 16(sp),a0
    9178:	|            move.l d0,122(a0)
    newPerson->r = 0;
    917c:	|            movea.l 16(sp),a0
    9180:	|            clr.b 126(a0)
    newPerson->g = 0;
    9184:	|            movea.l 16(sp),a0
    9188:	|            clr.b 127(a0)
    newPerson->b = 0;
    918c:	|            movea.l 16(sp),a0
    9190:	|            clr.b 128(a0)
    newPerson->colourmix = 0;
    9194:	|            movea.l 16(sp),a0
    9198:	|            clr.b 129(a0)
    newPerson->transparency = 0;
    919c:	|            movea.l 16(sp),a0
    91a0:	|            clr.b 130(a0)
    newPerson->myPersona = p;
    91a4:	|            movea.l 16(sp),a0
    91a8:	|            move.l 52(sp),80(a0)

    setFrames(newPerson, ANI_STAND);
    91ae:	|            clr.l -(sp)
    91b0:	|            move.l 20(sp),-(sp)
    91b4:	|            jsr 7f2a <setFrames>
    91ba:	|            addq.l #8,sp

    // HEIGHT (BASED ON 1st FRAME OF 1st ANIMATION... INC. SPECIAL CASES)
    int fNumSigned = p->animation[0]->frames[0].frameNum;
    91bc:	|            movea.l 52(sp),a0
    91c0:	|            movea.l (a0),a0
    91c2:	|            movea.l (a0),a0
    91c4:	|            movea.l 4(a0),a0
    91c8:	|            move.l (a0),12(sp)
    int fNum = fNumSigned < 0 ? fNumSigned * - 1 : 1;
    91cc:	|     /----- bpl.s 91d6 <addPerson+0x188>
    91ce:	|     |      move.l 12(sp),d0
    91d2:	|     |      neg.l d0
    91d4:	|     |  /-- bra.s 91d8 <addPerson+0x18a>
    91d6:	|     \--|-> moveq #1,d0
    91d8:	|        \-> move.l d0,8(sp)
    if (fNum >= p->animation[0]->theSprites->bank.total) {
    91dc:	|            movea.l 52(sp),a0
    91e0:	|            movea.l (a0),a0
    91e2:	|            movea.l (a0),a0
    91e4:	|            movea.l (a0),a0
    91e6:	|            move.l 8(a0),d0
    91ea:	|            cmp.l 8(sp),d0
    91ee:	|     /----- bgt.s 9220 <addPerson+0x1d2>
        if (fNumSigned < 0) {
    91f0:	|     |      tst.l 12(sp)
    91f4:	|     |  /-- bge.s 9202 <addPerson+0x1b4>
            newPerson->height = 5;
    91f6:	|     |  |   movea.l 16(sp),a0
    91fa:	|     |  |   moveq #5,d0
    91fc:	|     |  |   move.l d0,20(a0)
    9200:	|  /--|--|-- bra.s 924c <addPerson+0x1fe>
        } else {
            newPerson->height = p->animation[0]->theSprites->bank.sprites[0].yhot + 5;
    9202:	|  |  |  \-> movea.l 52(sp),a0
    9206:	|  |  |      movea.l (a0),a0
    9208:	|  |  |      movea.l (a0),a0
    920a:	|  |  |      movea.l (a0),a0
    920c:	|  |  |      movea.l 16(a0),a0
    9210:	|  |  |      move.l 12(a0),d0
    9214:	|  |  |      addq.l #5,d0
    9216:	|  |  |      movea.l 16(sp),a0
    921a:	|  |  |      move.l d0,20(a0)
    921e:	|  +--|----- bra.s 924c <addPerson+0x1fe>
        }
    } else {
        newPerson->height = p->animation[0]->theSprites->bank.sprites[fNum].yhot + 5;
    9220:	|  |  \----> movea.l 52(sp),a0
    9224:	|  |         movea.l (a0),a0
    9226:	|  |         movea.l (a0),a0
    9228:	|  |         movea.l (a0),a0
    922a:	|  |         movea.l 16(a0),a0
    922e:	|  |         move.l 8(sp),d1
    9232:	|  |         move.l d1,d0
    9234:	|  |         lsl.l #3,d0
    9236:	|  |         sub.l d1,d0
    9238:	|  |         add.l d0,d0
    923a:	|  |         add.l d0,d0
    923c:	|  |         adda.l d0,a0
    923e:	|  |         move.l 12(a0),d0
    9242:	|  |         addq.l #5,d0
    9244:	|  |         movea.l 16(sp),a0
    9248:	|  |         move.l d0,20(a0)
    }

    // NOW ADD IT IN THE RIGHT PLACE
    struct onScreenPerson **changethat = &allPeople;
    924c:	|  \-------> move.l #108552,32(sp)

    while (((*changethat) != NULL) && ((*changethat)->y < y)) {
    9254:	|        /-- bra.s 9264 <addPerson+0x216>
        changethat = &((*changethat)->next);
    9256:	|     /--|-> movea.l 32(sp),a0
    925a:	|     |  |   move.l (a0),d0
    925c:	|     |  |   moveq #36,d1
    925e:	|     |  |   add.l d0,d1
    9260:	|     |  |   move.l d1,32(sp)
    while (((*changethat) != NULL) && ((*changethat)->y < y)) {
    9264:	|     |  \-> movea.l 32(sp),a0
    9268:	|     |      move.l (a0),d0
    926a:	|     |  /-- beq.s 9292 <addPerson+0x244>
    926c:	|     |  |   movea.l 32(sp),a0
    9270:	|     |  |   movea.l (a0),a0
    9272:	|     |  |   move.l 4(a0),d2
    9276:	|     |  |   move.l 44(sp),-(sp)
    927a:	|     |  |   jsr 1746e <__floatsisf>
    9280:	|     |  |   addq.l #4,sp
    9282:	|     |  |   move.l d0,-(sp)
    9284:	|     |  |   move.l d2,-(sp)
    9286:	|     |  |   jsr 17694 <__ltsf2>
    928c:	|     |  |   addq.l #8,sp
    928e:	|     |  |   tst.l d0
    9290:	|     \--|-- blt.s 9256 <addPerson+0x208>
    }

    newPerson->next = (*changethat);
    9292:	|        \-> movea.l 32(sp),a0
    9296:	|            move.l (a0),d0
    9298:	|            movea.l 16(sp),a0
    929c:	|            move.l d0,36(a0)
    (*changethat) = newPerson;
    92a0:	|            movea.l 32(sp),a0
    92a4:	|            move.l 16(sp),(a0)

    return (BOOL) (newPerson->thisType != NULL);
    92a8:	|            movea.l 16(sp),a0
    92ac:	|            move.l 114(a0),d0
    92b0:	|            sne d0
    92b2:	|            neg.b d0
    92b4:	|            move.b d0,d0
    92b6:	|            andi.w #255,d0
}
    92ba:	\----------> move.l (sp)+,d2
    92bc:	             movea.l (sp)+,a6
    92be:	             lea 28(sp),sp
    92c2:	             rts

000092c4 <animatePerson>:

void animatePerson (int obj, struct personaAnimation * fram) { // Set a new SINGLE animation
    92c4:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(obj);
    92c6:	       move.l 8(sp),-(sp)
    92ca:	       jsr a454 <findPerson>
    92d0:	       addq.l #4,sp
    92d2:	       move.l d0,(sp)
    if (moveMe) {
    92d4:	/----- beq.s 9308 <animatePerson+0x44>
        if (moveMe -> continueAfterWalking) abortFunction(moveMe -> continueAfterWalking);
    92d6:	|      movea.l (sp),a0
    92d8:	|      move.l 68(a0),d0
    92dc:	|  /-- beq.s 92ee <animatePerson+0x2a>
    92de:	|  |   movea.l (sp),a0
    92e0:	|  |   move.l 68(a0),d0
    92e4:	|  |   move.l d0,-(sp)
    92e6:	|  |   jsr 44d2 <abortFunction>
    92ec:	|  |   addq.l #4,sp
        moveMe -> continueAfterWalking = NULL;
    92ee:	|  \-> movea.l (sp),a0
    92f0:	|      clr.l 68(a0)
        moveMe -> walking = FALSE;
    92f4:	|      movea.l (sp),a0
    92f6:	|      clr.w 64(a0)
        moveMe -> spinning = FALSE;
    92fa:	|      movea.l (sp),a0
    92fc:	|      clr.w 66(a0)
        moveMe -> myAnim = fram;
    9300:	|      movea.l (sp),a0
    9302:	|      move.l 12(sp),72(a0)
    }
}
    9308:	\----> nop
    930a:	       addq.l #4,sp
    930c:	       rts

0000930e <animatePersonUsingPersona>:

void animatePersonUsingPersona (int obj, struct persona * per) { // Set a new costume
    930e:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(obj);
    9310:	       move.l 8(sp),-(sp)
    9314:	       jsr a454 <findPerson>
    931a:	       addq.l #4,sp
    931c:	       move.l d0,(sp)
    if (moveMe) {
    931e:	/----- beq.s 9360 <animatePersonUsingPersona+0x52>
        // if (moveMe -> continueAfterWalking) abortFunction (moveMe -> continueAfterWalking);
        // moveMe -> continueAfterWalking = NULL;
        // moveMe -> walking = false;
        moveMe -> spinning = FALSE;
    9320:	|      movea.l (sp),a0
    9322:	|      clr.w 66(a0)
        moveMe -> myPersona = per;
    9326:	|      movea.l (sp),a0
    9328:	|      move.l 12(sp),80(a0)
        rethinkAngle(moveMe);
    932e:	|      move.l (sp),-(sp)
    9330:	|      jsr ad2a <rethinkAngle>
    9336:	|      addq.l #4,sp
        if (moveMe->walking) {
    9338:	|      movea.l (sp),a0
    933a:	|      move.w 64(a0),d0
    933e:	|  /-- beq.s 9352 <animatePersonUsingPersona+0x44>
            setFrames(moveMe, ANI_WALK);
    9340:	|  |   pea 1 <_start+0x1>
    9344:	|  |   move.l 4(sp),-(sp)
    9348:	|  |   jsr 7f2a <setFrames>
    934e:	|  |   addq.l #8,sp
        } else {
            setFrames(moveMe, ANI_STAND);
        }
    }
}
    9350:	+--|-- bra.s 9360 <animatePersonUsingPersona+0x52>
            setFrames(moveMe, ANI_STAND);
    9352:	|  \-> clr.l -(sp)
    9354:	|      move.l 4(sp),-(sp)
    9358:	|      jsr 7f2a <setFrames>
    935e:	|      addq.l #8,sp
}
    9360:	\----> nop
    9362:	       addq.l #4,sp
    9364:	       rts

00009366 <copyAnim>:
		thisPerson = thisPerson->next;
	}
}


struct personaAnimation * copyAnim (struct personaAnimation * orig) {
    9366:	             lea -36(sp),sp
    936a:	             move.l a6,-(sp)
	int num = orig -> numFrames;
    936c:	             movea.l 44(sp),a0
    9370:	             move.l 8(a0),32(sp)


	struct personaAnimation * newAnim	= AllocVec(sizeof( struct personaAnimation), MEMF_ANY);
    9376:	             moveq #12,d0
    9378:	             move.l d0,28(sp)
    937c:	             clr.l 24(sp)
    9380:	             move.l 1a7a4 <SysBase>,d0
    9386:	             movea.l d0,a6
    9388:	             move.l 28(sp),d0
    938c:	             move.l 24(sp),d1
    9390:	             jsr -684(a6)
    9394:	             move.l d0,20(sp)
    9398:	             move.l 20(sp),d0
    939c:	             move.l d0,16(sp)
	if (!(newAnim)) {
    93a0:	         /-- bne.s 93b6 <copyAnim+0x50>
		KPrintF("copyAnim: Cannot allocate memory");
    93a2:	         |   pea 18f01 <PutChar+0x1423>
    93a8:	         |   jsr 1703c <KPrintF>
    93ae:	         |   addq.l #4,sp
		return NULL;
    93b0:	         |   moveq #0,d0
    93b2:	/--------|-- bra.w 9508 <copyAnim+0x1a2>
	}

	// Copy the easy bits...
	newAnim -> theSprites		= orig -> theSprites;
    93b6:	|        \-> movea.l 44(sp),a0
    93ba:	|            move.l (a0),d0
    93bc:	|            movea.l 16(sp),a0
    93c0:	|            move.l d0,(a0)
	newAnim -> theSprites ->timesUsed++;
    93c2:	|            movea.l 16(sp),a0
    93c6:	|            movea.l (a0),a0
    93c8:	|            move.l 4(a0),d0
    93cc:	|            addq.l #1,d0
    93ce:	|            move.l d0,4(a0)
	newAnim -> numFrames		= num;
    93d2:	|            movea.l 16(sp),a0
    93d6:	|            move.l 32(sp),8(a0)

	if (num) {
    93dc:	|  /-------- beq.w 94fc <copyAnim+0x196>

		// Argh! Frames! We need a whole NEW array of animFrame structures...

		newAnim->frames = AllocVec(sizeof(struct animFrame) * num, MEMF_ANY);
    93e0:	|  |         move.l 32(sp),d1
    93e4:	|  |         move.l d1,d0
    93e6:	|  |         add.l d0,d0
    93e8:	|  |         add.l d1,d0
    93ea:	|  |         add.l d0,d0
    93ec:	|  |         add.l d0,d0
    93ee:	|  |         move.l d0,12(sp)
    93f2:	|  |         clr.l 8(sp)
    93f6:	|  |         move.l 1a7a4 <SysBase>,d0
    93fc:	|  |         movea.l d0,a6
    93fe:	|  |         move.l 12(sp),d0
    9402:	|  |         move.l 8(sp),d1
    9406:	|  |         jsr -684(a6)
    940a:	|  |         move.l d0,4(sp)
    940e:	|  |         move.l 4(sp),d0
    9412:	|  |         movea.l 16(sp),a0
    9416:	|  |         move.l d0,4(a0)
		if (!newAnim->frames) {
    941a:	|  |         movea.l 16(sp),a0
    941e:	|  |         move.l 4(a0),d0
    9422:	|  |     /-- bne.s 9438 <copyAnim+0xd2>
			KPrintF("copyAnim: Cannot allocate memory");
    9424:	|  |     |   pea 18f01 <PutChar+0x1423>
    942a:	|  |     |   jsr 1703c <KPrintF>
    9430:	|  |     |   addq.l #4,sp
			return NULL;
    9432:	|  |     |   moveq #0,d0
    9434:	+--|-----|-- bra.w 9508 <copyAnim+0x1a2>
		}

		for (int a = 0; a < num; a ++) {
    9438:	|  |     \-> clr.l 36(sp)
    943c:	|  |     /-- bra.w 94ee <copyAnim+0x188>
			newAnim -> frames[a].frameNum = orig -> frames[a].frameNum;
    9440:	|  |  /--|-> movea.l 44(sp),a0
    9444:	|  |  |  |   movea.l 4(a0),a0
    9448:	|  |  |  |   move.l 36(sp),d1
    944c:	|  |  |  |   move.l d1,d0
    944e:	|  |  |  |   add.l d0,d0
    9450:	|  |  |  |   add.l d1,d0
    9452:	|  |  |  |   add.l d0,d0
    9454:	|  |  |  |   add.l d0,d0
    9456:	|  |  |  |   lea (0,a0,d0.l),a1
    945a:	|  |  |  |   movea.l 16(sp),a0
    945e:	|  |  |  |   movea.l 4(a0),a0
    9462:	|  |  |  |   move.l 36(sp),d1
    9466:	|  |  |  |   move.l d1,d0
    9468:	|  |  |  |   add.l d0,d0
    946a:	|  |  |  |   add.l d1,d0
    946c:	|  |  |  |   add.l d0,d0
    946e:	|  |  |  |   add.l d0,d0
    9470:	|  |  |  |   adda.l d0,a0
    9472:	|  |  |  |   move.l (a1),d0
    9474:	|  |  |  |   move.l d0,(a0)
			newAnim -> frames[a].howMany = orig -> frames[a].howMany;
    9476:	|  |  |  |   movea.l 44(sp),a0
    947a:	|  |  |  |   movea.l 4(a0),a0
    947e:	|  |  |  |   move.l 36(sp),d1
    9482:	|  |  |  |   move.l d1,d0
    9484:	|  |  |  |   add.l d0,d0
    9486:	|  |  |  |   add.l d1,d0
    9488:	|  |  |  |   add.l d0,d0
    948a:	|  |  |  |   add.l d0,d0
    948c:	|  |  |  |   lea (0,a0,d0.l),a1
    9490:	|  |  |  |   movea.l 16(sp),a0
    9494:	|  |  |  |   movea.l 4(a0),a0
    9498:	|  |  |  |   move.l 36(sp),d1
    949c:	|  |  |  |   move.l d1,d0
    949e:	|  |  |  |   add.l d0,d0
    94a0:	|  |  |  |   add.l d1,d0
    94a2:	|  |  |  |   add.l d0,d0
    94a4:	|  |  |  |   add.l d0,d0
    94a6:	|  |  |  |   adda.l d0,a0
    94a8:	|  |  |  |   move.l 4(a1),d0
    94ac:	|  |  |  |   move.l d0,4(a0)
			newAnim -> frames[a].noise = orig -> frames[a].noise;
    94b0:	|  |  |  |   movea.l 44(sp),a0
    94b4:	|  |  |  |   movea.l 4(a0),a0
    94b8:	|  |  |  |   move.l 36(sp),d1
    94bc:	|  |  |  |   move.l d1,d0
    94be:	|  |  |  |   add.l d0,d0
    94c0:	|  |  |  |   add.l d1,d0
    94c2:	|  |  |  |   add.l d0,d0
    94c4:	|  |  |  |   add.l d0,d0
    94c6:	|  |  |  |   lea (0,a0,d0.l),a1
    94ca:	|  |  |  |   movea.l 16(sp),a0
    94ce:	|  |  |  |   movea.l 4(a0),a0
    94d2:	|  |  |  |   move.l 36(sp),d1
    94d6:	|  |  |  |   move.l d1,d0
    94d8:	|  |  |  |   add.l d0,d0
    94da:	|  |  |  |   add.l d1,d0
    94dc:	|  |  |  |   add.l d0,d0
    94de:	|  |  |  |   add.l d0,d0
    94e0:	|  |  |  |   adda.l d0,a0
    94e2:	|  |  |  |   move.l 8(a1),d0
    94e6:	|  |  |  |   move.l d0,8(a0)
		for (int a = 0; a < num; a ++) {
    94ea:	|  |  |  |   addq.l #1,36(sp)
    94ee:	|  |  |  \-> move.l 36(sp),d0
    94f2:	|  |  |      cmp.l 32(sp),d0
    94f6:	|  |  \----- blt.w 9440 <copyAnim+0xda>
    94fa:	|  |     /-- bra.s 9504 <copyAnim+0x19e>
		}
	} else {
		newAnim -> frames = NULL;
    94fc:	|  \-----|-> movea.l 16(sp),a0
    9500:	|        |   clr.l 4(a0)
	}

	return newAnim;
    9504:	|        \-> move.l 16(sp),d0
}
    9508:	\----------> movea.l (sp)+,a6
    950a:	             lea 36(sp),sp
    950e:	             rts

00009510 <createPersonaAnim>:


struct personaAnimation * createPersonaAnim (int num, struct variableStack **stacky) {
    9510:	                lea -44(sp),sp
    9514:	                move.l a6,-(sp)
    9516:	                move.l d2,-(sp)
	struct personaAnimation * newP = AllocVec( sizeof(struct personaAnimation), MEMF_ANY);
    9518:	                moveq #12,d0
    951a:	                move.l d0,40(sp)
    951e:	                clr.l 36(sp)
    9522:	                move.l 1a7a4 <SysBase>,d0
    9528:	                movea.l d0,a6
    952a:	                move.l 40(sp),d0
    952e:	                move.l 36(sp),d1
    9532:	                jsr -684(a6)
    9536:	                move.l d0,32(sp)
    953a:	                move.l 32(sp),d0
    953e:	                move.l d0,28(sp)
	if( !newP) {
    9542:	            /-- bne.s 9558 <createPersonaAnim+0x48>
		KPrintF("createPersonaAnim: Cannot allocate memory");
    9544:	            |   pea 18f22 <PutChar+0x1444>
    954a:	            |   jsr 1703c <KPrintF>
    9550:	            |   addq.l #4,sp
		return NULL;
    9552:	            |   moveq #0,d0
    9554:	/-----------|-- bra.w 9728 <createPersonaAnim+0x218>
	}

	newP -> numFrames = num;
    9558:	|           \-> movea.l 28(sp),a0
    955c:	|               move.l 56(sp),8(a0)
	newP -> frames = AllocVec( sizeof( struct animFrame) * num,MEMF_ANY);
    9562:	|               move.l 56(sp),d1
    9566:	|               move.l d1,d0
    9568:	|               add.l d0,d0
    956a:	|               add.l d1,d0
    956c:	|               add.l d0,d0
    956e:	|               add.l d0,d0
    9570:	|               move.l d0,24(sp)
    9574:	|               clr.l 20(sp)
    9578:	|               move.l 1a7a4 <SysBase>,d0
    957e:	|               movea.l d0,a6
    9580:	|               move.l 24(sp),d0
    9584:	|               move.l 20(sp),d1
    9588:	|               jsr -684(a6)
    958c:	|               move.l d0,16(sp)
    9590:	|               move.l 16(sp),d0
    9594:	|               movea.l 28(sp),a0
    9598:	|               move.l d0,4(a0)
	if( !newP->frames) {
    959c:	|               movea.l 28(sp),a0
    95a0:	|               move.l 4(a0),d0
    95a4:	|           /-- bne.s 95ba <createPersonaAnim+0xaa>
		KPrintF("createPersonaAnim: Cannot allocate memory");
    95a6:	|           |   pea 18f22 <PutChar+0x1444>
    95ac:	|           |   jsr 1703c <KPrintF>
    95b2:	|           |   addq.l #4,sp
		return NULL;
    95b4:	|           |   moveq #0,d0
    95b6:	+-----------|-- bra.w 9728 <createPersonaAnim+0x218>
	}

	int a = num, frameNum, howMany;
    95ba:	|           \-> move.l 56(sp),48(sp)

	struct variableStack *tmp = *stacky;
    95c0:	|               movea.l 60(sp),a0
    95c4:	|               move.l (a0),44(sp)
	while (a) {
    95c8:	|     /-------- bra.w 971c <createPersonaAnim+0x20c>
		a --;
    95cc:	|  /--|-------> subq.l #1,48(sp)
		newP -> frames[a].noise = 0;
    95d0:	|  |  |         movea.l 28(sp),a0
    95d4:	|  |  |         movea.l 4(a0),a0
    95d8:	|  |  |         move.l 48(sp),d1
    95dc:	|  |  |         move.l d1,d0
    95de:	|  |  |         add.l d0,d0
    95e0:	|  |  |         add.l d1,d0
    95e2:	|  |  |         add.l d0,d0
    95e4:	|  |  |         add.l d0,d0
    95e6:	|  |  |         adda.l d0,a0
    95e8:	|  |  |         clr.l 8(a0)
		if ( tmp->thisVar.varType == SVT_FILE) {
    95ec:	|  |  |         movea.l 44(sp),a0
    95f0:	|  |  |         move.l (a0),d0
    95f2:	|  |  |         moveq #5,d1
    95f4:	|  |  |         cmp.l d0,d1
    95f6:	|  |  |     /-- bne.s 9622 <createPersonaAnim+0x112>
			newP -> frames[a].noise = tmp -> thisVar.varData.intValue;
    95f8:	|  |  |     |   movea.l 28(sp),a0
    95fc:	|  |  |     |   movea.l 4(a0),a0
    9600:	|  |  |     |   move.l 48(sp),d1
    9604:	|  |  |     |   move.l d1,d0
    9606:	|  |  |     |   add.l d0,d0
    9608:	|  |  |     |   add.l d1,d0
    960a:	|  |  |     |   add.l d0,d0
    960c:	|  |  |     |   add.l d0,d0
    960e:	|  |  |     |   lea (0,a0,d0.l),a1
    9612:	|  |  |     |   movea.l 44(sp),a0
    9616:	|  |  |     |   move.l 4(a0),d0
    961a:	|  |  |     |   move.l d0,8(a1)
    961e:	|  |  |  /--|-- bra.w 96ca <createPersonaAnim+0x1ba>
		} else if ( tmp -> thisVar.varType == SVT_FUNC) {
    9622:	|  |  |  |  \-> movea.l 44(sp),a0
    9626:	|  |  |  |      move.l (a0),d0
    9628:	|  |  |  |      moveq #2,d1
    962a:	|  |  |  |      cmp.l d0,d1
    962c:	|  |  |  |  /-- bne.s 9658 <createPersonaAnim+0x148>
			newP -> frames[a].noise = - tmp -> thisVar.varData.intValue;
    962e:	|  |  |  |  |   movea.l 44(sp),a0
    9632:	|  |  |  |  |   move.l 4(a0),d2
    9636:	|  |  |  |  |   movea.l 28(sp),a0
    963a:	|  |  |  |  |   movea.l 4(a0),a0
    963e:	|  |  |  |  |   move.l 48(sp),d1
    9642:	|  |  |  |  |   move.l d1,d0
    9644:	|  |  |  |  |   add.l d0,d0
    9646:	|  |  |  |  |   add.l d1,d0
    9648:	|  |  |  |  |   add.l d0,d0
    964a:	|  |  |  |  |   add.l d0,d0
    964c:	|  |  |  |  |   adda.l d0,a0
    964e:	|  |  |  |  |   move.l d2,d0
    9650:	|  |  |  |  |   neg.l d0
    9652:	|  |  |  |  |   move.l d0,8(a0)
    9656:	|  |  |  +--|-- bra.s 96ca <createPersonaAnim+0x1ba>
		} else if ( tmp -> thisVar.varType == SVT_STACK) {
    9658:	|  |  |  |  \-> movea.l 44(sp),a0
    965c:	|  |  |  |      move.l (a0),d0
    965e:	|  |  |  |      moveq #6,d1
    9660:	|  |  |  |      cmp.l d0,d1
    9662:	|  |  |  |  /-- bne.s 96aa <createPersonaAnim+0x19a>
			getValueType (&frameNum, SVT_INT, &tmp->thisVar.varData.theStack -> first -> thisVar);
    9664:	|  |  |  |  |   movea.l 44(sp),a0
    9668:	|  |  |  |  |   movea.l 4(a0),a0
    966c:	|  |  |  |  |   move.l (a0),d0
    966e:	|  |  |  |  |   move.l d0,-(sp)
    9670:	|  |  |  |  |   pea 1 <_start+0x1>
    9674:	|  |  |  |  |   lea 20(sp),a0
    9678:	|  |  |  |  |   move.l a0,-(sp)
    967a:	|  |  |  |  |   jsr 145f0 <getValueType>
    9680:	|  |  |  |  |   lea 12(sp),sp
			getValueType (&howMany, SVT_INT, &tmp -> thisVar.varData.theStack -> first -> next -> thisVar);
    9684:	|  |  |  |  |   movea.l 44(sp),a0
    9688:	|  |  |  |  |   movea.l 4(a0),a0
    968c:	|  |  |  |  |   movea.l (a0),a0
    968e:	|  |  |  |  |   move.l 8(a0),d0
    9692:	|  |  |  |  |   move.l d0,-(sp)
    9694:	|  |  |  |  |   pea 1 <_start+0x1>
    9698:	|  |  |  |  |   lea 16(sp),a0
    969c:	|  |  |  |  |   move.l a0,-(sp)
    969e:	|  |  |  |  |   jsr 145f0 <getValueType>
    96a4:	|  |  |  |  |   lea 12(sp),sp
    96a8:	|  |  |  +--|-- bra.s 96ca <createPersonaAnim+0x1ba>
		} else {
			getValueType (&frameNum, SVT_INT, &tmp -> thisVar);
    96aa:	|  |  |  |  \-> move.l 44(sp),d0
    96ae:	|  |  |  |      move.l d0,-(sp)
    96b0:	|  |  |  |      pea 1 <_start+0x1>
    96b4:	|  |  |  |      lea 20(sp),a0
    96b8:	|  |  |  |      move.l a0,-(sp)
    96ba:	|  |  |  |      jsr 145f0 <getValueType>
    96c0:	|  |  |  |      lea 12(sp),sp
			howMany = 1;
    96c4:	|  |  |  |      moveq #1,d0
    96c6:	|  |  |  |      move.l d0,8(sp)
		}
		trimStack (stacky);
    96ca:	|  |  |  \----> move.l 60(sp),-(sp)
    96ce:	|  |  |         jsr 14f74 <trimStack>
    96d4:	|  |  |         addq.l #4,sp
		newP -> frames[a].frameNum = frameNum;
    96d6:	|  |  |         movea.l 28(sp),a0
    96da:	|  |  |         movea.l 4(a0),a0
    96de:	|  |  |         move.l 48(sp),d1
    96e2:	|  |  |         move.l d1,d0
    96e4:	|  |  |         add.l d0,d0
    96e6:	|  |  |         add.l d1,d0
    96e8:	|  |  |         add.l d0,d0
    96ea:	|  |  |         add.l d0,d0
    96ec:	|  |  |         adda.l d0,a0
    96ee:	|  |  |         move.l 12(sp),d0
    96f2:	|  |  |         move.l d0,(a0)
		newP -> frames[a].howMany = howMany;
    96f4:	|  |  |         movea.l 28(sp),a0
    96f8:	|  |  |         movea.l 4(a0),a0
    96fc:	|  |  |         move.l 48(sp),d1
    9700:	|  |  |         move.l d1,d0
    9702:	|  |  |         add.l d0,d0
    9704:	|  |  |         add.l d1,d0
    9706:	|  |  |         add.l d0,d0
    9708:	|  |  |         add.l d0,d0
    970a:	|  |  |         adda.l d0,a0
    970c:	|  |  |         move.l 8(sp),d0
    9710:	|  |  |         move.l d0,4(a0)
		tmp = *stacky;
    9714:	|  |  |         movea.l 60(sp),a0
    9718:	|  |  |         move.l (a0),44(sp)
	while (a) {
    971c:	|  |  \-------> tst.l 48(sp)
    9720:	|  \----------- bne.w 95cc <createPersonaAnim+0xbc>
	}

	return newP;
    9724:	|               move.l 28(sp),d0
}
    9728:	\-------------> move.l (sp)+,d2
    972a:	                movea.l (sp)+,a6
    972c:	                lea 44(sp),sp
    9730:	                rts

00009732 <deleteAnim>:

void deleteAnim (struct personaAnimation * orig) {
    9732:	       lea -12(sp),sp
    9736:	       move.l a6,-(sp)

	if(orig->theSprites)
    9738:	       movea.l 20(sp),a0
    973c:	       move.l (a0),d0
    973e:	   /-- beq.s 9768 <deleteAnim+0x36>
	{
		int timesused = --orig->theSprites->timesUsed;
    9740:	   |   movea.l 20(sp),a0
    9744:	   |   movea.l (a0),a0
    9746:	   |   move.l 4(a0),d0
    974a:	   |   subq.l #1,d0
    974c:	   |   move.l d0,4(a0)
    9750:	   |   move.l 4(a0),12(sp)
		
		if(!timesused)
    9756:	   +-- bne.s 9768 <deleteAnim+0x36>
		{
			forgetSpriteBank( orig->theSprites);
    9758:	   |   movea.l 20(sp),a0
    975c:	   |   move.l (a0),d0
    975e:	   |   move.l d0,-(sp)
    9760:	   |   jsr 8816 <forgetSpriteBank>
    9766:	   |   addq.l #4,sp
		}
	}			
	
	if (orig)
    9768:	   \-> tst.l 20(sp)
    976c:	/----- beq.s 97ac <deleteAnim+0x7a>
	{
		if (orig -> numFrames) {
    976e:	|      movea.l 20(sp),a0
    9772:	|      move.l 8(a0),d0
    9776:	|  /-- beq.s 9792 <deleteAnim+0x60>
			FreeVec( orig->frames);
    9778:	|  |   movea.l 20(sp),a0
    977c:	|  |   move.l 4(a0),8(sp)
    9782:	|  |   move.l 1a7a4 <SysBase>,d0
    9788:	|  |   movea.l d0,a6
    978a:	|  |   movea.l 8(sp),a1
    978e:	|  |   jsr -690(a6)
		}
		FreeVec(orig);
    9792:	|  \-> move.l 20(sp),4(sp)
    9798:	|      move.l 1a7a4 <SysBase>,d0
    979e:	|      movea.l d0,a6
    97a0:	|      movea.l 4(sp),a1
    97a4:	|      jsr -690(a6)
		orig = NULL;
    97a8:	|      clr.l 20(sp)
	}	
	
}
    97ac:	\----> nop
    97ae:	       movea.l (sp)+,a6
    97b0:	       lea 12(sp),sp
    97b4:	       rts

000097b6 <doBorderStuff>:

BOOL doBorderStuff (struct onScreenPerson * moveMe) {
    97b6:	          lea -124(sp),sp
    97ba:	          movem.l d2-d7,-(sp)
    if (moveMe -> inPoly == moveMe -> walkToPoly) {
    97be:	          movea.l 152(sp),a0
    97c2:	          move.l 56(a0),d1
    97c6:	          movea.l 152(sp),a0
    97ca:	          move.l 60(a0),d0
    97ce:	          cmp.l d1,d0
    97d0:	      /-- bne.s 9800 <doBorderStuff+0x4a>
        moveMe -> inPoly = -1;
    97d2:	      |   movea.l 152(sp),a0
    97d6:	      |   moveq #-1,d0
    97d8:	      |   move.l d0,56(a0)
        moveMe -> thisStepX = moveMe -> walkToX;
    97dc:	      |   movea.l 152(sp),a0
    97e0:	      |   move.l 40(a0),d0
    97e4:	      |   movea.l 152(sp),a0
    97e8:	      |   move.l d0,48(a0)
        moveMe -> thisStepY = moveMe -> walkToY;
    97ec:	      |   movea.l 152(sp),a0
    97f0:	      |   move.l 44(a0),d0
    97f4:	      |   movea.l 152(sp),a0
    97f8:	      |   move.l d0,52(a0)
    97fc:	   /--|-- bra.w 9d66 <doBorderStuff+0x5b0>
    } else {
        // The section in which we need to be next...
        int newPoly = currentFloor -> matrix[moveMe -> inPoly][moveMe -> walkToPoly];
    9800:	   |  \-> movea.l 1a8c0 <currentFloor>,a0
    9806:	   |      move.l 16(a0),d1
    980a:	   |      movea.l 152(sp),a0
    980e:	   |      move.l 56(a0),d0
    9812:	   |      add.l d0,d0
    9814:	   |      add.l d0,d0
    9816:	   |      movea.l d1,a0
    9818:	   |      adda.l d0,a0
    981a:	   |      move.l (a0),d1
    981c:	   |      movea.l 152(sp),a0
    9820:	   |      move.l 60(a0),d0
    9824:	   |      add.l d0,d0
    9826:	   |      add.l d0,d0
    9828:	   |      movea.l d1,a0
    982a:	   |      adda.l d0,a0
    982c:	   |      move.l (a0),144(sp)
        if (newPoly == -1) return FALSE;
    9830:	   |      moveq #-1,d0
    9832:	   |      cmp.l 144(sp),d0
    9836:	   |  /-- bne.s 983e <doBorderStuff+0x88>
    9838:	   |  |   clr.w d0
    983a:	/--|--|-- bra.w 9e66 <doBorderStuff+0x6b0>

        // Grab the index of the second matching corner...
        int ID, ID2;
        if (! getMatchingCorners (&(currentFloor -> polygon[moveMe -> inPoly]), &(currentFloor -> polygon[newPoly]), &ID, &ID2))
    983e:	|  |  \-> movea.l 1a8c0 <currentFloor>,a0
    9844:	|  |      move.l 12(a0),d1
    9848:	|  |      move.l 144(sp),d0
    984c:	|  |      lsl.l #3,d0
    984e:	|  |      add.l d0,d1
    9850:	|  |      movea.l 1a8c0 <currentFloor>,a0
    9856:	|  |      movea.l 12(a0),a1
    985a:	|  |      movea.l 152(sp),a0
    985e:	|  |      move.l 56(a0),d0
    9862:	|  |      lsl.l #3,d0
    9864:	|  |      add.l a1,d0
    9866:	|  |      lea 40(sp),a0
    986a:	|  |      move.l a0,-(sp)
    986c:	|  |      lea 48(sp),a0
    9870:	|  |      move.l a0,-(sp)
    9872:	|  |      move.l d1,-(sp)
    9874:	|  |      move.l d0,-(sp)
    9876:	|  |      jsr 162be <getMatchingCorners>
    987c:	|  |      lea 16(sp),sp
    9880:	|  |      tst.w d0
    9882:	|  |  /-- bne.s 9898 <doBorderStuff+0xe2>
		{
			KPrintF ("Not a valid floor plan!");
    9884:	|  |  |   pea 18f4c <PutChar+0x146e>
    988a:	|  |  |   jsr 1703c <KPrintF>
    9890:	|  |  |   addq.l #4,sp
            return FALSE;
    9892:	|  |  |   clr.w d0
    9894:	+--|--|-- bra.w 9e66 <doBorderStuff+0x6b0>
		}

        // Remember that we're walking to the new polygon...
        moveMe -> inPoly = newPoly;
    9898:	|  |  \-> movea.l 152(sp),a0
    989c:	|  |      move.l 144(sp),56(a0)

        // Calculate the destination position on the coincidental line...
        int x1 = moveMe -> x, y1 = moveMe -> y;
    98a2:	|  |      movea.l 152(sp),a0
    98a6:	|  |      move.l (a0),d0
    98a8:	|  |      move.l d0,-(sp)
    98aa:	|  |      jsr 17406 <__fixsfsi>
    98b0:	|  |      addq.l #4,sp
    98b2:	|  |      move.l d0,140(sp)
    98b6:	|  |      movea.l 152(sp),a0
    98ba:	|  |      move.l 4(a0),d0
    98be:	|  |      move.l d0,-(sp)
    98c0:	|  |      jsr 17406 <__fixsfsi>
    98c6:	|  |      addq.l #4,sp
    98c8:	|  |      move.l d0,136(sp)
        int x2 = moveMe -> walkToX, y2 = moveMe -> walkToY;
    98cc:	|  |      movea.l 152(sp),a0
    98d0:	|  |      move.l 40(a0),132(sp)
    98d6:	|  |      movea.l 152(sp),a0
    98da:	|  |      move.l 44(a0),128(sp)
        int x3 = currentFloor -> vertex[ID].x, y3 = currentFloor -> vertex[ID].y;
    98e0:	|  |      movea.l 1a8c0 <currentFloor>,a0
    98e6:	|  |      move.l 4(a0),d1
    98ea:	|  |      move.l 44(sp),d0
    98ee:	|  |      lsl.l #3,d0
    98f0:	|  |      movea.l d1,a0
    98f2:	|  |      adda.l d0,a0
    98f4:	|  |      move.l (a0),124(sp)
    98f8:	|  |      movea.l 1a8c0 <currentFloor>,a0
    98fe:	|  |      move.l 4(a0),d1
    9902:	|  |      move.l 44(sp),d0
    9906:	|  |      lsl.l #3,d0
    9908:	|  |      movea.l d1,a0
    990a:	|  |      adda.l d0,a0
    990c:	|  |      move.l 4(a0),120(sp)
        int x4 = currentFloor -> vertex[ID2].x, y4 = currentFloor -> vertex[ID2].y;
    9912:	|  |      movea.l 1a8c0 <currentFloor>,a0
    9918:	|  |      move.l 4(a0),d1
    991c:	|  |      move.l 40(sp),d0
    9920:	|  |      lsl.l #3,d0
    9922:	|  |      movea.l d1,a0
    9924:	|  |      adda.l d0,a0
    9926:	|  |      move.l (a0),116(sp)
    992a:	|  |      movea.l 1a8c0 <currentFloor>,a0
    9930:	|  |      move.l 4(a0),d1
    9934:	|  |      move.l 40(sp),d0
    9938:	|  |      lsl.l #3,d0
    993a:	|  |      movea.l d1,a0
    993c:	|  |      adda.l d0,a0
    993e:	|  |      move.l 4(a0),112(sp)

        int xAB = x1 - x2;
    9944:	|  |      move.l 140(sp),d0
    9948:	|  |      sub.l 132(sp),d0
    994c:	|  |      move.l d0,108(sp)
        int yAB = y1 - y2;
    9950:	|  |      move.l 136(sp),d0
    9954:	|  |      sub.l 128(sp),d0
    9958:	|  |      move.l d0,104(sp)
        int xCD = x4 - x3;
    995c:	|  |      move.l 116(sp),d0
    9960:	|  |      sub.l 124(sp),d0
    9964:	|  |      move.l d0,100(sp)
        int yCD = y4 - y3;
    9968:	|  |      move.l 112(sp),d0
    996c:	|  |      sub.l 120(sp),d0
    9970:	|  |      move.l d0,96(sp)

        double m = (yAB * (x3 - x1) - xAB * (y3 - y1));
    9974:	|  |      move.l 124(sp),d0
    9978:	|  |      sub.l 140(sp),d0
    997c:	|  |      move.l 104(sp),-(sp)
    9980:	|  |      move.l d0,-(sp)
    9982:	|  |      jsr 179c8 <__mulsi3>
    9988:	|  |      addq.l #8,sp
    998a:	|  |      move.l d0,d2
    998c:	|  |      move.l 120(sp),d0
    9990:	|  |      sub.l 136(sp),d0
    9994:	|  |      move.l 108(sp),-(sp)
    9998:	|  |      move.l d0,-(sp)
    999a:	|  |      jsr 179c8 <__mulsi3>
    99a0:	|  |      addq.l #8,sp
    99a2:	|  |      move.l d2,d1
    99a4:	|  |      sub.l d0,d1
    99a6:	|  |      move.l d1,-(sp)
    99a8:	|  |      jsr 1742e <__floatsidf>
    99ae:	|  |      addq.l #4,sp
    99b0:	|  |      move.l d0,32(sp)
    99b4:	|  |      move.l d1,36(sp)
    99b8:	|  |      move.l 32(sp),88(sp)
    99be:	|  |      move.l 36(sp),92(sp)
        m /= ((xAB * yCD) - (yAB * xCD));
    99c4:	|  |      move.l 96(sp),-(sp)
    99c8:	|  |      move.l 112(sp),-(sp)
    99cc:	|  |      jsr 179c8 <__mulsi3>
    99d2:	|  |      addq.l #8,sp
    99d4:	|  |      move.l d0,d2
    99d6:	|  |      move.l 100(sp),-(sp)
    99da:	|  |      move.l 108(sp),-(sp)
    99de:	|  |      jsr 179c8 <__mulsi3>
    99e4:	|  |      addq.l #8,sp
    99e6:	|  |      move.l d2,d1
    99e8:	|  |      sub.l d0,d1
    99ea:	|  |      move.l d1,-(sp)
    99ec:	|  |      jsr 1742e <__floatsidf>
    99f2:	|  |      addq.l #4,sp
    99f4:	|  |      move.l d1,-(sp)
    99f6:	|  |      move.l d0,-(sp)
    99f8:	|  |      move.l 100(sp),-(sp)
    99fc:	|  |      move.l 100(sp),-(sp)
    9a00:	|  |      jsr 172c2 <__divdf3>
    9a06:	|  |      lea 16(sp),sp
    9a0a:	|  |      move.l d0,24(sp)
    9a0e:	|  |      move.l d1,28(sp)
    9a12:	|  |      move.l 24(sp),88(sp)
    9a18:	|  |      move.l 28(sp),92(sp)

        if (m > 0 && m < 1) {
    9a1e:	|  |      clr.l -(sp)
    9a20:	|  |      clr.l -(sp)
    9a22:	|  |      move.l 100(sp),-(sp)
    9a26:	|  |      move.l 100(sp),-(sp)
    9a2a:	|  |      jsr 1758c <__gtdf2>
    9a30:	|  |      lea 16(sp),sp
    9a34:	|  |      tst.l d0
    9a36:	|  |  /-- ble.w 9b0e <doBorderStuff+0x358>
    9a3a:	|  |  |   clr.l -(sp)
    9a3c:	|  |  |   move.l #1072693248,-(sp)
    9a42:	|  |  |   move.l 100(sp),-(sp)
    9a46:	|  |  |   move.l 100(sp),-(sp)
    9a4a:	|  |  |   jsr 17646 <__ltdf2>
    9a50:	|  |  |   lea 16(sp),sp
    9a54:	|  |  |   tst.l d0
    9a56:	|  |  +-- bge.w 9b0e <doBorderStuff+0x358>
            moveMe -> thisStepX = x3 + m * xCD;
    9a5a:	|  |  |   move.l 124(sp),-(sp)
    9a5e:	|  |  |   jsr 1742e <__floatsidf>
    9a64:	|  |  |   addq.l #4,sp
    9a66:	|  |  |   move.l d0,d2
    9a68:	|  |  |   move.l d1,d3
    9a6a:	|  |  |   move.l 100(sp),-(sp)
    9a6e:	|  |  |   jsr 1742e <__floatsidf>
    9a74:	|  |  |   addq.l #4,sp
    9a76:	|  |  |   move.l 92(sp),-(sp)
    9a7a:	|  |  |   move.l 92(sp),-(sp)
    9a7e:	|  |  |   move.l d1,-(sp)
    9a80:	|  |  |   move.l d0,-(sp)
    9a82:	|  |  |   jsr 174be <__muldf3>
    9a88:	|  |  |   lea 16(sp),sp
    9a8c:	|  |  |   move.l d1,-(sp)
    9a8e:	|  |  |   move.l d0,-(sp)
    9a90:	|  |  |   move.l d3,-(sp)
    9a92:	|  |  |   move.l d2,-(sp)
    9a94:	|  |  |   jsr 17260 <__adddf3>
    9a9a:	|  |  |   lea 16(sp),sp
    9a9e:	|  |  |   move.l d1,-(sp)
    9aa0:	|  |  |   move.l d0,-(sp)
    9aa2:	|  |  |   jsr 173d0 <__fixdfsi>
    9aa8:	|  |  |   addq.l #8,sp
    9aaa:	|  |  |   movea.l 152(sp),a0
    9aae:	|  |  |   move.l d0,48(a0)
            moveMe -> thisStepY = y3 + m * yCD;
    9ab2:	|  |  |   move.l 120(sp),-(sp)
    9ab6:	|  |  |   jsr 1742e <__floatsidf>
    9abc:	|  |  |   addq.l #4,sp
    9abe:	|  |  |   move.l d0,d2
    9ac0:	|  |  |   move.l d1,d3
    9ac2:	|  |  |   move.l 96(sp),-(sp)
    9ac6:	|  |  |   jsr 1742e <__floatsidf>
    9acc:	|  |  |   addq.l #4,sp
    9ace:	|  |  |   move.l 92(sp),-(sp)
    9ad2:	|  |  |   move.l 92(sp),-(sp)
    9ad6:	|  |  |   move.l d1,-(sp)
    9ad8:	|  |  |   move.l d0,-(sp)
    9ada:	|  |  |   jsr 174be <__muldf3>
    9ae0:	|  |  |   lea 16(sp),sp
    9ae4:	|  |  |   move.l d1,-(sp)
    9ae6:	|  |  |   move.l d0,-(sp)
    9ae8:	|  |  |   move.l d3,-(sp)
    9aea:	|  |  |   move.l d2,-(sp)
    9aec:	|  |  |   jsr 17260 <__adddf3>
    9af2:	|  |  |   lea 16(sp),sp
    9af6:	|  |  |   move.l d1,-(sp)
    9af8:	|  |  |   move.l d0,-(sp)
    9afa:	|  |  |   jsr 173d0 <__fixdfsi>
    9b00:	|  |  |   addq.l #8,sp
    9b02:	|  |  |   movea.l 152(sp),a0
    9b06:	|  |  |   move.l d0,52(a0)
    9b0a:	|  +--|-- bra.w 9d66 <doBorderStuff+0x5b0>
        } else {
            int dx13 = x1 - x3, dx14 = x1 - x4, dx23 = x2 - x3, dx24 = x2 - x4;
    9b0e:	|  |  \-> move.l 140(sp),d0
    9b12:	|  |      sub.l 124(sp),d0
    9b16:	|  |      move.l d0,84(sp)
    9b1a:	|  |      move.l 140(sp),d0
    9b1e:	|  |      sub.l 116(sp),d0
    9b22:	|  |      move.l d0,80(sp)
    9b26:	|  |      move.l 132(sp),d0
    9b2a:	|  |      sub.l 124(sp),d0
    9b2e:	|  |      move.l d0,76(sp)
    9b32:	|  |      move.l 132(sp),d0
    9b36:	|  |      sub.l 116(sp),d0
    9b3a:	|  |      move.l d0,72(sp)
            int dy13 = y1 - y3, dy14 = y1 - y4, dy23 = y2 - y3, dy24 = y2 - y4;
    9b3e:	|  |      move.l 136(sp),d0
    9b42:	|  |      sub.l 120(sp),d0
    9b46:	|  |      move.l d0,68(sp)
    9b4a:	|  |      move.l 136(sp),d0
    9b4e:	|  |      sub.l 112(sp),d0
    9b52:	|  |      move.l d0,64(sp)
    9b56:	|  |      move.l 128(sp),d0
    9b5a:	|  |      sub.l 120(sp),d0
    9b5e:	|  |      move.l d0,60(sp)
    9b62:	|  |      move.l 128(sp),d0
    9b66:	|  |      sub.l 112(sp),d0
    9b6a:	|  |      move.l d0,56(sp)

            dx13 *= dx13; dx14 *= dx14; dx23 *= dx23; dx24 *= dx24;
    9b6e:	|  |      move.l 84(sp),-(sp)
    9b72:	|  |      move.l 88(sp),-(sp)
    9b76:	|  |      jsr 179c8 <__mulsi3>
    9b7c:	|  |      addq.l #8,sp
    9b7e:	|  |      move.l d0,84(sp)
    9b82:	|  |      move.l 80(sp),-(sp)
    9b86:	|  |      move.l 84(sp),-(sp)
    9b8a:	|  |      jsr 179c8 <__mulsi3>
    9b90:	|  |      addq.l #8,sp
    9b92:	|  |      move.l d0,80(sp)
    9b96:	|  |      move.l 76(sp),-(sp)
    9b9a:	|  |      move.l 80(sp),-(sp)
    9b9e:	|  |      jsr 179c8 <__mulsi3>
    9ba4:	|  |      addq.l #8,sp
    9ba6:	|  |      move.l d0,76(sp)
    9baa:	|  |      move.l 72(sp),-(sp)
    9bae:	|  |      move.l 76(sp),-(sp)
    9bb2:	|  |      jsr 179c8 <__mulsi3>
    9bb8:	|  |      addq.l #8,sp
    9bba:	|  |      move.l d0,72(sp)
            dy13 *= dy13; dy14 *= dy14; dy23 *= dy23; dy24 *= dy24;
    9bbe:	|  |      move.l 68(sp),-(sp)
    9bc2:	|  |      move.l 72(sp),-(sp)
    9bc6:	|  |      jsr 179c8 <__mulsi3>
    9bcc:	|  |      addq.l #8,sp
    9bce:	|  |      move.l d0,68(sp)
    9bd2:	|  |      move.l 64(sp),-(sp)
    9bd6:	|  |      move.l 68(sp),-(sp)
    9bda:	|  |      jsr 179c8 <__mulsi3>
    9be0:	|  |      addq.l #8,sp
    9be2:	|  |      move.l d0,64(sp)
    9be6:	|  |      move.l 60(sp),-(sp)
    9bea:	|  |      move.l 64(sp),-(sp)
    9bee:	|  |      jsr 179c8 <__mulsi3>
    9bf4:	|  |      addq.l #8,sp
    9bf6:	|  |      move.l d0,60(sp)
    9bfa:	|  |      move.l 56(sp),-(sp)
    9bfe:	|  |      move.l 60(sp),-(sp)
    9c02:	|  |      jsr 179c8 <__mulsi3>
    9c08:	|  |      addq.l #8,sp
    9c0a:	|  |      move.l d0,56(sp)

            if (sqrt((double) dx13 + dy13) + sqrt((double) dx23 + dy23) <
    9c0e:	|  |      move.l 84(sp),-(sp)
    9c12:	|  |      jsr 1742e <__floatsidf>
    9c18:	|  |      addq.l #4,sp
    9c1a:	|  |      move.l d0,d2
    9c1c:	|  |      move.l d1,d3
    9c1e:	|  |      move.l 68(sp),-(sp)
    9c22:	|  |      jsr 1742e <__floatsidf>
    9c28:	|  |      addq.l #4,sp
    9c2a:	|  |      move.l d1,-(sp)
    9c2c:	|  |      move.l d0,-(sp)
    9c2e:	|  |      move.l d3,-(sp)
    9c30:	|  |      move.l d2,-(sp)
    9c32:	|  |      jsr 17260 <__adddf3>
    9c38:	|  |      lea 16(sp),sp
    9c3c:	|  |      move.l d1,-(sp)
    9c3e:	|  |      move.l d0,-(sp)
    9c40:	|  |      jsr 1797e <sqrt>
    9c46:	|  |      addq.l #8,sp
    9c48:	|  |      move.l d0,d2
    9c4a:	|  |      move.l d1,d3
    9c4c:	|  |      move.l 76(sp),-(sp)
    9c50:	|  |      jsr 1742e <__floatsidf>
    9c56:	|  |      addq.l #4,sp
    9c58:	|  |      move.l d0,d4
    9c5a:	|  |      move.l d1,d5
    9c5c:	|  |      move.l 60(sp),-(sp)
    9c60:	|  |      jsr 1742e <__floatsidf>
    9c66:	|  |      addq.l #4,sp
    9c68:	|  |      move.l d1,-(sp)
    9c6a:	|  |      move.l d0,-(sp)
    9c6c:	|  |      move.l d5,-(sp)
    9c6e:	|  |      move.l d4,-(sp)
    9c70:	|  |      jsr 17260 <__adddf3>
    9c76:	|  |      lea 16(sp),sp
    9c7a:	|  |      move.l d1,-(sp)
    9c7c:	|  |      move.l d0,-(sp)
    9c7e:	|  |      jsr 1797e <sqrt>
    9c84:	|  |      addq.l #8,sp
    9c86:	|  |      move.l d1,-(sp)
    9c88:	|  |      move.l d0,-(sp)
    9c8a:	|  |      move.l d3,-(sp)
    9c8c:	|  |      move.l d2,-(sp)
    9c8e:	|  |      jsr 17260 <__adddf3>
    9c94:	|  |      lea 16(sp),sp
    9c98:	|  |      move.l d0,d2
    9c9a:	|  |      move.l d1,d3
                sqrt((double) dx14 + dy14) + sqrt((double) dx24 + dy24)) {
    9c9c:	|  |      move.l 80(sp),-(sp)
    9ca0:	|  |      jsr 1742e <__floatsidf>
    9ca6:	|  |      addq.l #4,sp
    9ca8:	|  |      move.l d0,d4
    9caa:	|  |      move.l d1,d5
    9cac:	|  |      move.l 64(sp),-(sp)
    9cb0:	|  |      jsr 1742e <__floatsidf>
    9cb6:	|  |      addq.l #4,sp
    9cb8:	|  |      move.l d1,-(sp)
    9cba:	|  |      move.l d0,-(sp)
    9cbc:	|  |      move.l d5,-(sp)
    9cbe:	|  |      move.l d4,-(sp)
    9cc0:	|  |      jsr 17260 <__adddf3>
    9cc6:	|  |      lea 16(sp),sp
    9cca:	|  |      move.l d1,-(sp)
    9ccc:	|  |      move.l d0,-(sp)
    9cce:	|  |      jsr 1797e <sqrt>
    9cd4:	|  |      addq.l #8,sp
    9cd6:	|  |      move.l d0,d4
    9cd8:	|  |      move.l d1,d5
    9cda:	|  |      move.l 72(sp),-(sp)
    9cde:	|  |      jsr 1742e <__floatsidf>
    9ce4:	|  |      addq.l #4,sp
    9ce6:	|  |      move.l d0,d6
    9ce8:	|  |      move.l d1,d7
    9cea:	|  |      move.l 56(sp),-(sp)
    9cee:	|  |      jsr 1742e <__floatsidf>
    9cf4:	|  |      addq.l #4,sp
    9cf6:	|  |      move.l d1,-(sp)
    9cf8:	|  |      move.l d0,-(sp)
    9cfa:	|  |      move.l d7,-(sp)
    9cfc:	|  |      move.l d6,-(sp)
    9cfe:	|  |      jsr 17260 <__adddf3>
    9d04:	|  |      lea 16(sp),sp
    9d08:	|  |      move.l d1,-(sp)
    9d0a:	|  |      move.l d0,-(sp)
    9d0c:	|  |      jsr 1797e <sqrt>
    9d12:	|  |      addq.l #8,sp
    9d14:	|  |      move.l d1,-(sp)
    9d16:	|  |      move.l d0,-(sp)
    9d18:	|  |      move.l d5,-(sp)
    9d1a:	|  |      move.l d4,-(sp)
    9d1c:	|  |      jsr 17260 <__adddf3>
    9d22:	|  |      lea 16(sp),sp
            if (sqrt((double) dx13 + dy13) + sqrt((double) dx23 + dy23) <
    9d26:	|  |      move.l d1,-(sp)
    9d28:	|  |      move.l d0,-(sp)
    9d2a:	|  |      move.l d3,-(sp)
    9d2c:	|  |      move.l d2,-(sp)
    9d2e:	|  |      jsr 17646 <__ltdf2>
    9d34:	|  |      lea 16(sp),sp
    9d38:	|  |      tst.l d0
    9d3a:	|  |  /-- bge.s 9d52 <doBorderStuff+0x59c>
                moveMe -> thisStepX = x3;
    9d3c:	|  |  |   movea.l 152(sp),a0
    9d40:	|  |  |   move.l 124(sp),48(a0)
                moveMe -> thisStepY = y3;
    9d46:	|  |  |   movea.l 152(sp),a0
    9d4a:	|  |  |   move.l 120(sp),52(a0)
    9d50:	|  +--|-- bra.s 9d66 <doBorderStuff+0x5b0>
            } else {
                moveMe -> thisStepX = x4;
    9d52:	|  |  \-> movea.l 152(sp),a0
    9d56:	|  |      move.l 116(sp),48(a0)
                moveMe -> thisStepY = y4;
    9d5c:	|  |      movea.l 152(sp),a0
    9d60:	|  |      move.l 112(sp),52(a0)
            }
        }
    }

    float yDiff = moveMe -> thisStepY - moveMe -> y;
    9d66:	|  \----> movea.l 152(sp),a0
    9d6a:	|         move.l 52(a0),d0
    9d6e:	|         move.l d0,-(sp)
    9d70:	|         jsr 1746e <__floatsisf>
    9d76:	|         addq.l #4,sp
    9d78:	|         move.l d0,d1
    9d7a:	|         movea.l 152(sp),a0
    9d7e:	|         move.l 4(a0),d0
    9d82:	|         move.l d0,-(sp)
    9d84:	|         move.l d1,-(sp)
    9d86:	|         jsr 17762 <__subsf3>
    9d8c:	|         addq.l #8,sp
    9d8e:	|         move.l d0,52(sp)
    float xDiff = moveMe -> x - moveMe -> thisStepX;
    9d92:	|         movea.l 152(sp),a0
    9d96:	|         move.l (a0),d2
    9d98:	|         movea.l 152(sp),a0
    9d9c:	|         move.l 48(a0),d0
    9da0:	|         move.l d0,-(sp)
    9da2:	|         jsr 1746e <__floatsisf>
    9da8:	|         addq.l #4,sp
    9daa:	|         move.l d0,-(sp)
    9dac:	|         move.l d2,-(sp)
    9dae:	|         jsr 17762 <__subsf3>
    9db4:	|         addq.l #8,sp
    9db6:	|         move.l d0,48(sp)
    if (xDiff || yDiff) {
    9dba:	|         clr.l -(sp)
    9dbc:	|         move.l 52(sp),-(sp)
    9dc0:	|         jsr 176ca <__nesf2>
    9dc6:	|         addq.l #8,sp
    9dc8:	|         tst.l d0
    9dca:	|     /-- bne.s 9dde <doBorderStuff+0x628>
    9dcc:	|     |   clr.l -(sp)
    9dce:	|     |   move.l 56(sp),-(sp)
    9dd2:	|     |   jsr 176ca <__nesf2>
    9dd8:	|     |   addq.l #8,sp
    9dda:	|     |   tst.l d0
    9ddc:	|  /--|-- beq.s 9e54 <doBorderStuff+0x69e>
        moveMe -> wantAngle = 180 + ANGLEFIX * atan2f(xDiff, yDiff * 2);
    9dde:	|  |  \-> move.l 52(sp),d0
    9de2:	|  |      move.l d0,-(sp)
    9de4:	|  |      move.l d0,-(sp)
    9de6:	|  |      jsr 1722a <__addsf3>
    9dec:	|  |      addq.l #8,sp
    9dee:	|  |      move.l d0,-(sp)
    9df0:	|  |      move.l 52(sp),-(sp)
    9df4:	|  |      jsr 177ce <atan2f>
    9dfa:	|  |      addq.l #8,sp
    9dfc:	|  |      move.l d0,-(sp)
    9dfe:	|  |      jsr 17390 <__extendsfdf2>
    9e04:	|  |      addq.l #4,sp
    9e06:	|  |      move.l #-1540411785,-(sp)
    9e0c:	|  |      move.l #1078765033,-(sp)
    9e12:	|  |      move.l d1,-(sp)
    9e14:	|  |      move.l d0,-(sp)
    9e16:	|  |      jsr 174be <__muldf3>
    9e1c:	|  |      lea 16(sp),sp
    9e20:	|  |      clr.l -(sp)
    9e22:	|  |      move.l #1080459264,-(sp)
    9e28:	|  |      move.l d1,-(sp)
    9e2a:	|  |      move.l d0,-(sp)
    9e2c:	|  |      jsr 17260 <__adddf3>
    9e32:	|  |      lea 16(sp),sp
    9e36:	|  |      move.l d1,-(sp)
    9e38:	|  |      move.l d0,-(sp)
    9e3a:	|  |      jsr 173d0 <__fixdfsi>
    9e40:	|  |      addq.l #8,sp
    9e42:	|  |      movea.l 152(sp),a0
    9e46:	|  |      move.l d0,96(a0)
        moveMe -> spinning = TRUE;
    9e4a:	|  |      movea.l 152(sp),a0
    9e4e:	|  |      move.w #1,66(a0)
    }

    setFrames (moveMe, ANI_WALK);
    9e54:	|  \----> pea 1 <_start+0x1>
    9e58:	|         move.l 156(sp),-(sp)
    9e5c:	|         jsr 7f2a <setFrames>
    9e62:	|         addq.l #8,sp
    return TRUE;
    9e64:	|         moveq #1,d0
}
    9e66:	\-------> movem.l (sp)+,d2-d7
    9e6a:	          lea 124(sp),sp
    9e6e:	          rts

00009e70 <drawPeople>:

void drawPeople () {
    9e70:	                   lea -24(sp),sp
    9e74:	                   move.l d2,-(sp)

	shufflePeople ();
    9e76:	                   jsr b90c <shufflePeople>

	struct onScreenPerson * thisPerson = allPeople;
    9e7c:	                   move.l 1a808 <allPeople>,24(sp)
	struct personaAnimation * myAnim = NULL;
    9e84:	                   clr.l 20(sp)
	overRegion = NULL;
    9e88:	                   clr.l 1a8b8 <overRegion>

	while (thisPerson) {
    9e8e:	   /-------------- bra.w a440 <drawPeople+0x5d0>
		if (thisPerson -> show) {
    9e92:	/--|-------------> movea.l 24(sp),a0
    9e96:	|  |               move.w 104(a0),d0
    9e9a:	|  |  /----------- beq.w a1f4 <drawPeople+0x384>
			myAnim = thisPerson -> myAnim;
    9e9e:	|  |  |            movea.l 24(sp),a0
    9ea2:	|  |  |            move.l 72(a0),20(sp)
			if (myAnim != thisPerson -> lastUsedAnim) {
    9ea8:	|  |  |            movea.l 24(sp),a0
    9eac:	|  |  |            move.l 76(a0),d0
    9eb0:	|  |  |            cmp.l 20(sp),d0
    9eb4:	|  |  |  /-------- beq.w a082 <drawPeople+0x212>
				thisPerson -> samePosCount = 0;
    9eb8:	|  |  |  |         movea.l 24(sp),a0
    9ebc:	|  |  |  |         clr.l 16(a0)
				thisPerson -> lastUsedAnim = myAnim;
    9ec0:	|  |  |  |         movea.l 24(sp),a0
    9ec4:	|  |  |  |         move.l 20(sp),76(a0)
				thisPerson -> frameNum = 0;
    9eca:	|  |  |  |         movea.l 24(sp),a0
    9ece:	|  |  |  |         clr.l 84(a0)
				thisPerson -> frameTick = myAnim -> frames[0].howMany;
    9ed2:	|  |  |  |         movea.l 20(sp),a0
    9ed6:	|  |  |  |         movea.l 4(a0),a0
    9eda:	|  |  |  |         move.l 4(a0),d0
    9ede:	|  |  |  |         movea.l 24(sp),a0
    9ee2:	|  |  |  |         move.l d0,88(a0)
				if (myAnim -> frames[thisPerson -> frameNum].noise > 0) {
    9ee6:	|  |  |  |         movea.l 20(sp),a0
    9eea:	|  |  |  |         movea.l 4(a0),a1
    9eee:	|  |  |  |         movea.l 24(sp),a0
    9ef2:	|  |  |  |         move.l 84(a0),d0
    9ef6:	|  |  |  |         move.l d0,d1
    9ef8:	|  |  |  |         move.l d1,d0
    9efa:	|  |  |  |         add.l d0,d0
    9efc:	|  |  |  |         add.l d1,d0
    9efe:	|  |  |  |         add.l d0,d0
    9f00:	|  |  |  |         add.l d0,d0
    9f02:	|  |  |  |         lea (0,a1,d0.l),a0
    9f06:	|  |  |  |         move.l 8(a0),d0
    9f0a:	|  |  |  |     /-- ble.w 9fac <drawPeople+0x13c>
					startSound(myAnim -> frames[thisPerson -> frameNum].noise, FALSE);
    9f0e:	|  |  |  |     |   movea.l 20(sp),a0
    9f12:	|  |  |  |     |   movea.l 4(a0),a1
    9f16:	|  |  |  |     |   movea.l 24(sp),a0
    9f1a:	|  |  |  |     |   move.l 84(a0),d0
    9f1e:	|  |  |  |     |   move.l d0,d1
    9f20:	|  |  |  |     |   move.l d1,d0
    9f22:	|  |  |  |     |   add.l d0,d0
    9f24:	|  |  |  |     |   add.l d1,d0
    9f26:	|  |  |  |     |   add.l d0,d0
    9f28:	|  |  |  |     |   add.l d0,d0
    9f2a:	|  |  |  |     |   lea (0,a1,d0.l),a0
    9f2e:	|  |  |  |     |   move.l 8(a0),d0
    9f32:	|  |  |  |     |   clr.l -(sp)
    9f34:	|  |  |  |     |   move.l d0,-(sp)
    9f36:	|  |  |  |     |   jsr d020 <startSound>
    9f3c:	|  |  |  |     |   addq.l #8,sp
					thisPerson -> frameNum ++;
    9f3e:	|  |  |  |     |   movea.l 24(sp),a0
    9f42:	|  |  |  |     |   move.l 84(a0),d0
    9f46:	|  |  |  |     |   addq.l #1,d0
    9f48:	|  |  |  |     |   movea.l 24(sp),a0
    9f4c:	|  |  |  |     |   move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    9f50:	|  |  |  |     |   movea.l 24(sp),a0
    9f54:	|  |  |  |     |   move.l 84(a0),d0
    9f58:	|  |  |  |     |   movea.l 24(sp),a0
    9f5c:	|  |  |  |     |   movea.l 72(a0),a0
    9f60:	|  |  |  |     |   move.l 8(a0),d1
    9f64:	|  |  |  |     |   move.l d1,-(sp)
    9f66:	|  |  |  |     |   move.l d0,-(sp)
    9f68:	|  |  |  |     |   jsr 17a74 <__modsi3>
    9f6e:	|  |  |  |     |   addq.l #8,sp
    9f70:	|  |  |  |     |   movea.l 24(sp),a0
    9f74:	|  |  |  |     |   move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    9f78:	|  |  |  |     |   movea.l 24(sp),a0
    9f7c:	|  |  |  |     |   movea.l 72(a0),a0
    9f80:	|  |  |  |     |   movea.l 4(a0),a1
    9f84:	|  |  |  |     |   movea.l 24(sp),a0
    9f88:	|  |  |  |     |   move.l 84(a0),d0
    9f8c:	|  |  |  |     |   move.l d0,d1
    9f8e:	|  |  |  |     |   move.l d1,d0
    9f90:	|  |  |  |     |   add.l d0,d0
    9f92:	|  |  |  |     |   add.l d1,d0
    9f94:	|  |  |  |     |   add.l d0,d0
    9f96:	|  |  |  |     |   add.l d0,d0
    9f98:	|  |  |  |     |   lea (0,a1,d0.l),a0
    9f9c:	|  |  |  |     |   move.l 4(a0),d0
    9fa0:	|  |  |  |     |   movea.l 24(sp),a0
    9fa4:	|  |  |  |     |   move.l d0,88(a0)
    9fa8:	|  |  |  |  /--|-- bra.w a0ea <drawPeople+0x27a>
				} else if (myAnim -> frames[thisPerson -> frameNum].noise) {
    9fac:	|  |  |  |  |  \-> movea.l 20(sp),a0
    9fb0:	|  |  |  |  |      movea.l 4(a0),a1
    9fb4:	|  |  |  |  |      movea.l 24(sp),a0
    9fb8:	|  |  |  |  |      move.l 84(a0),d0
    9fbc:	|  |  |  |  |      move.l d0,d1
    9fbe:	|  |  |  |  |      move.l d1,d0
    9fc0:	|  |  |  |  |      add.l d0,d0
    9fc2:	|  |  |  |  |      add.l d1,d0
    9fc4:	|  |  |  |  |      add.l d0,d0
    9fc6:	|  |  |  |  |      add.l d0,d0
    9fc8:	|  |  |  |  |      lea (0,a1,d0.l),a0
    9fcc:	|  |  |  |  |      move.l 8(a0),d0
    9fd0:	|  |  |  |  +----- beq.w a0ea <drawPeople+0x27a>
					startNewFunctionNum (- myAnim -> frames[thisPerson -> frameNum].noise, 0, NULL, noStack, TRUE);
    9fd4:	|  |  |  |  |      movea.l 1a774 <noStack>,a1
    9fda:	|  |  |  |  |      movea.l 20(sp),a0
    9fde:	|  |  |  |  |      move.l 4(a0),d2
    9fe2:	|  |  |  |  |      movea.l 24(sp),a0
    9fe6:	|  |  |  |  |      move.l 84(a0),d0
    9fea:	|  |  |  |  |      move.l d0,d1
    9fec:	|  |  |  |  |      move.l d1,d0
    9fee:	|  |  |  |  |      add.l d0,d0
    9ff0:	|  |  |  |  |      add.l d1,d0
    9ff2:	|  |  |  |  |      add.l d0,d0
    9ff4:	|  |  |  |  |      add.l d0,d0
    9ff6:	|  |  |  |  |      movea.l d2,a0
    9ff8:	|  |  |  |  |      adda.l d0,a0
    9ffa:	|  |  |  |  |      move.l 8(a0),d0
    9ffe:	|  |  |  |  |      neg.l d0
    a000:	|  |  |  |  |      pea 1 <_start+0x1>
    a004:	|  |  |  |  |      move.l a1,-(sp)
    a006:	|  |  |  |  |      clr.l -(sp)
    a008:	|  |  |  |  |      clr.l -(sp)
    a00a:	|  |  |  |  |      move.l d0,-(sp)
    a00c:	|  |  |  |  |      jsr 688e <startNewFunctionNum>
    a012:	|  |  |  |  |      lea 20(sp),sp
					thisPerson -> frameNum ++;
    a016:	|  |  |  |  |      movea.l 24(sp),a0
    a01a:	|  |  |  |  |      move.l 84(a0),d0
    a01e:	|  |  |  |  |      addq.l #1,d0
    a020:	|  |  |  |  |      movea.l 24(sp),a0
    a024:	|  |  |  |  |      move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a028:	|  |  |  |  |      movea.l 24(sp),a0
    a02c:	|  |  |  |  |      move.l 84(a0),d0
    a030:	|  |  |  |  |      movea.l 24(sp),a0
    a034:	|  |  |  |  |      movea.l 72(a0),a0
    a038:	|  |  |  |  |      move.l 8(a0),d1
    a03c:	|  |  |  |  |      move.l d1,-(sp)
    a03e:	|  |  |  |  |      move.l d0,-(sp)
    a040:	|  |  |  |  |      jsr 17a74 <__modsi3>
    a046:	|  |  |  |  |      addq.l #8,sp
    a048:	|  |  |  |  |      movea.l 24(sp),a0
    a04c:	|  |  |  |  |      move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a050:	|  |  |  |  |      movea.l 24(sp),a0
    a054:	|  |  |  |  |      movea.l 72(a0),a0
    a058:	|  |  |  |  |      movea.l 4(a0),a1
    a05c:	|  |  |  |  |      movea.l 24(sp),a0
    a060:	|  |  |  |  |      move.l 84(a0),d0
    a064:	|  |  |  |  |      move.l d0,d1
    a066:	|  |  |  |  |      move.l d1,d0
    a068:	|  |  |  |  |      add.l d0,d0
    a06a:	|  |  |  |  |      add.l d1,d0
    a06c:	|  |  |  |  |      add.l d0,d0
    a06e:	|  |  |  |  |      add.l d0,d0
    a070:	|  |  |  |  |      lea (0,a1,d0.l),a0
    a074:	|  |  |  |  |      move.l 4(a0),d0
    a078:	|  |  |  |  |      movea.l 24(sp),a0
    a07c:	|  |  |  |  |      move.l d0,88(a0)
    a080:	|  |  |  |  +----- bra.s a0ea <drawPeople+0x27a>
				}
			} else {
				if(thisPerson->x == thisPerson->oldx && thisPerson->y == thisPerson->oldy && myAnim->numFrames == 1)
    a082:	|  |  |  \--|----> movea.l 24(sp),a0
    a086:	|  |  |     |      move.l (a0),d0
    a088:	|  |  |     |      movea.l 24(sp),a0
    a08c:	|  |  |     |      move.l 8(a0),d1
    a090:	|  |  |     |      move.l d1,-(sp)
    a092:	|  |  |     |      move.l d0,-(sp)
    a094:	|  |  |     |      jsr 1735a <__eqsf2>
    a09a:	|  |  |     |      addq.l #8,sp
    a09c:	|  |  |     |      tst.l d0
    a09e:	|  |  |     |  /-- bne.s a0e2 <drawPeople+0x272>
    a0a0:	|  |  |     |  |   movea.l 24(sp),a0
    a0a4:	|  |  |     |  |   move.l 4(a0),d0
    a0a8:	|  |  |     |  |   movea.l 24(sp),a0
    a0ac:	|  |  |     |  |   move.l 12(a0),d1
    a0b0:	|  |  |     |  |   move.l d1,-(sp)
    a0b2:	|  |  |     |  |   move.l d0,-(sp)
    a0b4:	|  |  |     |  |   jsr 1735a <__eqsf2>
    a0ba:	|  |  |     |  |   addq.l #8,sp
    a0bc:	|  |  |     |  |   tst.l d0
    a0be:	|  |  |     |  +-- bne.s a0e2 <drawPeople+0x272>
    a0c0:	|  |  |     |  |   movea.l 20(sp),a0
    a0c4:	|  |  |     |  |   move.l 8(a0),d0
    a0c8:	|  |  |     |  |   moveq #1,d1
    a0ca:	|  |  |     |  |   cmp.l d0,d1
    a0cc:	|  |  |     |  +-- bne.s a0e2 <drawPeople+0x272>
				{
					thisPerson->samePosCount++;
    a0ce:	|  |  |     |  |   movea.l 24(sp),a0
    a0d2:	|  |  |     |  |   move.l 16(a0),d0
    a0d6:	|  |  |     |  |   addq.l #1,d0
    a0d8:	|  |  |     |  |   movea.l 24(sp),a0
    a0dc:	|  |  |     |  |   move.l d0,16(a0)
    a0e0:	|  |  |     +--|-- bra.s a0ea <drawPeople+0x27a>
				} else
				{
					thisPerson->samePosCount = 0;
    a0e2:	|  |  |     |  \-> movea.l 24(sp),a0
    a0e6:	|  |  |     |      clr.l 16(a0)
				}
			}

			thisPerson->oldx = thisPerson->x;
    a0ea:	|  |  |     \----> movea.l 24(sp),a0
    a0ee:	|  |  |            move.l (a0),d0
    a0f0:	|  |  |            movea.l 24(sp),a0
    a0f4:	|  |  |            move.l d0,8(a0)
			thisPerson->oldy = thisPerson->y;
    a0f8:	|  |  |            movea.l 24(sp),a0
    a0fc:	|  |  |            move.l 4(a0),d0
    a100:	|  |  |            movea.l 24(sp),a0
    a104:	|  |  |            move.l d0,12(a0)
			int fNumSign = myAnim -> frames[thisPerson -> frameNum].frameNum;
    a108:	|  |  |            movea.l 20(sp),a0
    a10c:	|  |  |            movea.l 4(a0),a1
    a110:	|  |  |            movea.l 24(sp),a0
    a114:	|  |  |            move.l 84(a0),d0
    a118:	|  |  |            move.l d0,d1
    a11a:	|  |  |            move.l d1,d0
    a11c:	|  |  |            add.l d0,d0
    a11e:	|  |  |            add.l d1,d0
    a120:	|  |  |            add.l d0,d0
    a122:	|  |  |            add.l d0,d0
    a124:	|  |  |            lea (0,a1,d0.l),a0
    a128:	|  |  |            move.l (a0),8(sp)
			int m = fNumSign < 0;
    a12c:	|  |  |            move.l 8(sp),d0
    a130:	|  |  |            add.l d0,d0
    a132:	|  |  |            subx.l d0,d0
    a134:	|  |  |            neg.l d0
    a136:	|  |  |            move.b d0,d0
    a138:	|  |  |            move.b d0,d0
    a13a:	|  |  |            andi.l #255,d0
    a140:	|  |  |            move.l d0,16(sp)
			int fNum = TF_abs(fNumSign);
    a144:	|  |  |            move.l 8(sp),-(sp)
    a148:	|  |  |            jsr 9044 <TF_abs>
    a14e:	|  |  |            addq.l #4,sp
    a150:	|  |  |            move.l d0,12(sp)
			if (fNum >= myAnim -> theSprites -> bank.total) {
    a154:	|  |  |            movea.l 20(sp),a0
    a158:	|  |  |            movea.l (a0),a0
    a15a:	|  |  |            move.l 8(a0),d0
    a15e:	|  |  |            cmp.l 12(sp),d0
    a162:	|  |  |        /-- bgt.s a172 <drawPeople+0x302>
				fNum = 0;
    a164:	|  |  |        |   clr.l 12(sp)
				m = 2 - m;
    a168:	|  |  |        |   moveq #2,d0
    a16a:	|  |  |        |   sub.l 16(sp),d0
    a16e:	|  |  |        |   move.l d0,16(sp)
			}
			if (m != 2) {
    a172:	|  |  |        \-> moveq #2,d1
    a174:	|  |  |            cmp.l 16(sp),d1
    a178:	|  |  +----------- beq.s a1f4 <drawPeople+0x384>
				BOOL r = FALSE;
    a17a:	|  |  |            clr.w 6(sp)

				r = scaleSprite ( &myAnim->theSprites->bank.sprites[fNum], thisPerson, m);
    a17e:	|  |  |            move.l 16(sp),d0
    a182:	|  |  |            movea.w d0,a0
    a184:	|  |  |            movea.l 20(sp),a1
    a188:	|  |  |            movea.l (a1),a1
    a18a:	|  |  |            movea.l 16(a1),a1
    a18e:	|  |  |            move.l 12(sp),d1
    a192:	|  |  |            move.l d1,d0
    a194:	|  |  |            lsl.l #3,d0
    a196:	|  |  |            sub.l d1,d0
    a198:	|  |  |            add.l d0,d0
    a19a:	|  |  |            add.l d0,d0
    a19c:	|  |  |            add.l a1,d0
    a19e:	|  |  |            move.l a0,-(sp)
    a1a0:	|  |  |            move.l 28(sp),-(sp)
    a1a4:	|  |  |            move.l d0,-(sp)
    a1a6:	|  |  |            jsr 8d66 <scaleSprite>
    a1ac:	|  |  |            lea 12(sp),sp
    a1b0:	|  |  |            move.w d0,6(sp)
				if (r) {
    a1b4:	|  |  +----------- beq.s a1f4 <drawPeople+0x384>
					if (thisPerson -> thisType -> screenName[0]) {
    a1b6:	|  |  |            movea.l 24(sp),a0
    a1ba:	|  |  |            movea.l 114(a0),a0
    a1be:	|  |  |            movea.l (a0),a0
    a1c0:	|  |  |            move.b (a0),d0
    a1c2:	|  |  +----------- beq.s a1f4 <drawPeople+0x384>
						if (personRegion.thisType != thisPerson -> thisType) lastRegion = NULL;
    a1c4:	|  |  |            move.l 1a828 <personRegion+0x1c>,d1
    a1ca:	|  |  |            movea.l 24(sp),a0
    a1ce:	|  |  |            move.l 114(a0),d0
    a1d2:	|  |  |            cmp.l d1,d0
    a1d4:	|  |  |        /-- beq.s a1dc <drawPeople+0x36c>
    a1d6:	|  |  |        |   clr.l 1a76c <lastRegion>
						personRegion.thisType = thisPerson -> thisType;
    a1dc:	|  |  |        \-> movea.l 24(sp),a0
    a1e0:	|  |  |            move.l 114(a0),d0
    a1e4:	|  |  |            move.l d0,1a828 <personRegion+0x1c>
						overRegion = & personRegion;
    a1ea:	|  |  |            move.l #108556,1a8b8 <overRegion>
					}
				}
			}
		}
		if (! -- thisPerson -> frameTick) {
    a1f4:	|  |  \----------> movea.l 24(sp),a0
    a1f8:	|  |               move.l 88(a0),d0
    a1fc:	|  |               subq.l #1,d0
    a1fe:	|  |               movea.l 24(sp),a0
    a202:	|  |               move.l d0,88(a0)
    a206:	|  |               movea.l 24(sp),a0
    a20a:	|  |               move.l 88(a0),d0
    a20e:	|  |        /----- bne.w a436 <drawPeople+0x5c6>
			thisPerson -> frameNum ++;
    a212:	|  |        |      movea.l 24(sp),a0
    a216:	|  |        |      move.l 84(a0),d0
    a21a:	|  |        |      addq.l #1,d0
    a21c:	|  |        |      movea.l 24(sp),a0
    a220:	|  |        |      move.l d0,84(a0)
			thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a224:	|  |        |      movea.l 24(sp),a0
    a228:	|  |        |      move.l 84(a0),d0
    a22c:	|  |        |      movea.l 24(sp),a0
    a230:	|  |        |      movea.l 72(a0),a0
    a234:	|  |        |      move.l 8(a0),d1
    a238:	|  |        |      move.l d1,-(sp)
    a23a:	|  |        |      move.l d0,-(sp)
    a23c:	|  |        |      jsr 17a74 <__modsi3>
    a242:	|  |        |      addq.l #8,sp
    a244:	|  |        |      movea.l 24(sp),a0
    a248:	|  |        |      move.l d0,84(a0)
			thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a24c:	|  |        |      movea.l 24(sp),a0
    a250:	|  |        |      movea.l 72(a0),a0
    a254:	|  |        |      movea.l 4(a0),a1
    a258:	|  |        |      movea.l 24(sp),a0
    a25c:	|  |        |      move.l 84(a0),d0
    a260:	|  |        |      move.l d0,d1
    a262:	|  |        |      move.l d1,d0
    a264:	|  |        |      add.l d0,d0
    a266:	|  |        |      add.l d1,d0
    a268:	|  |        |      add.l d0,d0
    a26a:	|  |        |      add.l d0,d0
    a26c:	|  |        |      lea (0,a1,d0.l),a0
    a270:	|  |        |      move.l 4(a0),d0
    a274:	|  |        |      movea.l 24(sp),a0
    a278:	|  |        |      move.l d0,88(a0)
			if (thisPerson -> show && myAnim && myAnim -> frames) {
    a27c:	|  |        |      movea.l 24(sp),a0
    a280:	|  |        |      move.w 104(a0),d0
    a284:	|  |        +----- beq.w a436 <drawPeople+0x5c6>
    a288:	|  |        |      tst.l 20(sp)
    a28c:	|  |        +----- beq.w a436 <drawPeople+0x5c6>
    a290:	|  |        |      movea.l 20(sp),a0
    a294:	|  |        |      move.l 4(a0),d0
    a298:	|  |        +----- beq.w a436 <drawPeople+0x5c6>
				if (myAnim -> frames[thisPerson -> frameNum].noise > 0) {
    a29c:	|  |        |      movea.l 20(sp),a0
    a2a0:	|  |        |      movea.l 4(a0),a1
    a2a4:	|  |        |      movea.l 24(sp),a0
    a2a8:	|  |        |      move.l 84(a0),d0
    a2ac:	|  |        |      move.l d0,d1
    a2ae:	|  |        |      move.l d1,d0
    a2b0:	|  |        |      add.l d0,d0
    a2b2:	|  |        |      add.l d1,d0
    a2b4:	|  |        |      add.l d0,d0
    a2b6:	|  |        |      add.l d0,d0
    a2b8:	|  |        |      lea (0,a1,d0.l),a0
    a2bc:	|  |        |      move.l 8(a0),d0
    a2c0:	|  |        |  /-- ble.w a362 <drawPeople+0x4f2>
					startSound(myAnim -> frames[thisPerson -> frameNum].noise, FALSE);
    a2c4:	|  |        |  |   movea.l 20(sp),a0
    a2c8:	|  |        |  |   movea.l 4(a0),a1
    a2cc:	|  |        |  |   movea.l 24(sp),a0
    a2d0:	|  |        |  |   move.l 84(a0),d0
    a2d4:	|  |        |  |   move.l d0,d1
    a2d6:	|  |        |  |   move.l d1,d0
    a2d8:	|  |        |  |   add.l d0,d0
    a2da:	|  |        |  |   add.l d1,d0
    a2dc:	|  |        |  |   add.l d0,d0
    a2de:	|  |        |  |   add.l d0,d0
    a2e0:	|  |        |  |   lea (0,a1,d0.l),a0
    a2e4:	|  |        |  |   move.l 8(a0),d0
    a2e8:	|  |        |  |   clr.l -(sp)
    a2ea:	|  |        |  |   move.l d0,-(sp)
    a2ec:	|  |        |  |   jsr d020 <startSound>
    a2f2:	|  |        |  |   addq.l #8,sp
					thisPerson -> frameNum ++;
    a2f4:	|  |        |  |   movea.l 24(sp),a0
    a2f8:	|  |        |  |   move.l 84(a0),d0
    a2fc:	|  |        |  |   addq.l #1,d0
    a2fe:	|  |        |  |   movea.l 24(sp),a0
    a302:	|  |        |  |   move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a306:	|  |        |  |   movea.l 24(sp),a0
    a30a:	|  |        |  |   move.l 84(a0),d0
    a30e:	|  |        |  |   movea.l 24(sp),a0
    a312:	|  |        |  |   movea.l 72(a0),a0
    a316:	|  |        |  |   move.l 8(a0),d1
    a31a:	|  |        |  |   move.l d1,-(sp)
    a31c:	|  |        |  |   move.l d0,-(sp)
    a31e:	|  |        |  |   jsr 17a74 <__modsi3>
    a324:	|  |        |  |   addq.l #8,sp
    a326:	|  |        |  |   movea.l 24(sp),a0
    a32a:	|  |        |  |   move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a32e:	|  |        |  |   movea.l 24(sp),a0
    a332:	|  |        |  |   movea.l 72(a0),a0
    a336:	|  |        |  |   movea.l 4(a0),a1
    a33a:	|  |        |  |   movea.l 24(sp),a0
    a33e:	|  |        |  |   move.l 84(a0),d0
    a342:	|  |        |  |   move.l d0,d1
    a344:	|  |        |  |   move.l d1,d0
    a346:	|  |        |  |   add.l d0,d0
    a348:	|  |        |  |   add.l d1,d0
    a34a:	|  |        |  |   add.l d0,d0
    a34c:	|  |        |  |   add.l d0,d0
    a34e:	|  |        |  |   lea (0,a1,d0.l),a0
    a352:	|  |        |  |   move.l 4(a0),d0
    a356:	|  |        |  |   movea.l 24(sp),a0
    a35a:	|  |        |  |   move.l d0,88(a0)
    a35e:	|  |        +--|-- bra.w a436 <drawPeople+0x5c6>
				} else if (myAnim -> frames[thisPerson -> frameNum].noise) {
    a362:	|  |        |  \-> movea.l 20(sp),a0
    a366:	|  |        |      movea.l 4(a0),a1
    a36a:	|  |        |      movea.l 24(sp),a0
    a36e:	|  |        |      move.l 84(a0),d0
    a372:	|  |        |      move.l d0,d1
    a374:	|  |        |      move.l d1,d0
    a376:	|  |        |      add.l d0,d0
    a378:	|  |        |      add.l d1,d0
    a37a:	|  |        |      add.l d0,d0
    a37c:	|  |        |      add.l d0,d0
    a37e:	|  |        |      lea (0,a1,d0.l),a0
    a382:	|  |        |      move.l 8(a0),d0
    a386:	|  |        +----- beq.w a436 <drawPeople+0x5c6>
					startNewFunctionNum (- myAnim -> frames[thisPerson -> frameNum].noise, 0, NULL, noStack, TRUE);
    a38a:	|  |        |      movea.l 1a774 <noStack>,a1
    a390:	|  |        |      movea.l 20(sp),a0
    a394:	|  |        |      move.l 4(a0),d2
    a398:	|  |        |      movea.l 24(sp),a0
    a39c:	|  |        |      move.l 84(a0),d0
    a3a0:	|  |        |      move.l d0,d1
    a3a2:	|  |        |      move.l d1,d0
    a3a4:	|  |        |      add.l d0,d0
    a3a6:	|  |        |      add.l d1,d0
    a3a8:	|  |        |      add.l d0,d0
    a3aa:	|  |        |      add.l d0,d0
    a3ac:	|  |        |      movea.l d2,a0
    a3ae:	|  |        |      adda.l d0,a0
    a3b0:	|  |        |      move.l 8(a0),d0
    a3b4:	|  |        |      neg.l d0
    a3b6:	|  |        |      pea 1 <_start+0x1>
    a3ba:	|  |        |      move.l a1,-(sp)
    a3bc:	|  |        |      clr.l -(sp)
    a3be:	|  |        |      clr.l -(sp)
    a3c0:	|  |        |      move.l d0,-(sp)
    a3c2:	|  |        |      jsr 688e <startNewFunctionNum>
    a3c8:	|  |        |      lea 20(sp),sp
					thisPerson -> frameNum ++;
    a3cc:	|  |        |      movea.l 24(sp),a0
    a3d0:	|  |        |      move.l 84(a0),d0
    a3d4:	|  |        |      addq.l #1,d0
    a3d6:	|  |        |      movea.l 24(sp),a0
    a3da:	|  |        |      move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a3de:	|  |        |      movea.l 24(sp),a0
    a3e2:	|  |        |      move.l 84(a0),d0
    a3e6:	|  |        |      movea.l 24(sp),a0
    a3ea:	|  |        |      movea.l 72(a0),a0
    a3ee:	|  |        |      move.l 8(a0),d1
    a3f2:	|  |        |      move.l d1,-(sp)
    a3f4:	|  |        |      move.l d0,-(sp)
    a3f6:	|  |        |      jsr 17a74 <__modsi3>
    a3fc:	|  |        |      addq.l #8,sp
    a3fe:	|  |        |      movea.l 24(sp),a0
    a402:	|  |        |      move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a406:	|  |        |      movea.l 24(sp),a0
    a40a:	|  |        |      movea.l 72(a0),a0
    a40e:	|  |        |      movea.l 4(a0),a1
    a412:	|  |        |      movea.l 24(sp),a0
    a416:	|  |        |      move.l 84(a0),d0
    a41a:	|  |        |      move.l d0,d1
    a41c:	|  |        |      move.l d1,d0
    a41e:	|  |        |      add.l d0,d0
    a420:	|  |        |      add.l d1,d0
    a422:	|  |        |      add.l d0,d0
    a424:	|  |        |      add.l d0,d0
    a426:	|  |        |      lea (0,a1,d0.l),a0
    a42a:	|  |        |      move.l 4(a0),d0
    a42e:	|  |        |      movea.l 24(sp),a0
    a432:	|  |        |      move.l d0,88(a0)
				}
			}
		}
		thisPerson = thisPerson -> next;
    a436:	|  |        \----> movea.l 24(sp),a0
    a43a:	|  |               move.l 36(a0),24(sp)
	while (thisPerson) {
    a440:	|  \-------------> tst.l 24(sp)
    a444:	\----------------- bne.w 9e92 <drawPeople+0x22>
	}
}
    a448:	                   nop
    a44a:	                   nop
    a44c:	                   move.l (sp)+,d2
    a44e:	                   lea 24(sp),sp
    a452:	                   rts

0000a454 <findPerson>:


struct onScreenPerson * findPerson (int v) {
    a454:	          subq.l #4,sp
	struct onScreenPerson * thisPerson = allPeople;
    a456:	          move.l 1a808 <allPeople>,(sp)
	while (thisPerson) {
    a45c:	      /-- bra.s a474 <findPerson+0x20>
		if (v == thisPerson -> thisType -> objectNum) break;
    a45e:	/-----|-> movea.l (sp),a0
    a460:	|     |   movea.l 114(a0),a0
    a464:	|     |   move.l 4(a0),d0
    a468:	|     |   cmp.l 8(sp),d0
    a46c:	|  /--|-- beq.s a47a <findPerson+0x26>
		thisPerson = thisPerson -> next;
    a46e:	|  |  |   movea.l (sp),a0
    a470:	|  |  |   move.l 36(a0),(sp)
	while (thisPerson) {
    a474:	|  |  \-> tst.l (sp)
    a476:	\--|----- bne.s a45e <findPerson+0xa>
    a478:	   |  /-- bra.s a47c <findPerson+0x28>
		if (v == thisPerson -> thisType -> objectNum) break;
    a47a:	   \--|-> nop
	}
	return thisPerson;
    a47c:	      \-> move.l (sp),d0
}
    a47e:	          addq.l #4,sp
    a480:	          rts

0000a482 <floatCharacter>:

BOOL floatCharacter (int f, int objNum) {
    a482:	       subq.l #4,sp
	struct onScreenPerson * moveMe = findPerson (objNum);
    a484:	       move.l 12(sp),-(sp)
    a488:	       jsr a454 <findPerson>
    a48e:	       addq.l #4,sp
    a490:	       move.l d0,(sp)
	if (! moveMe) return FALSE;
    a492:	   /-- bne.s a498 <floatCharacter+0x16>
    a494:	   |   clr.w d0
    a496:	/--|-- bra.s a4a2 <floatCharacter+0x20>
	moveMe -> floaty = f;
    a498:	|  \-> movea.l (sp),a0
    a49a:	|      move.l 8(sp),24(a0)
	return TRUE;
    a4a0:	|      moveq #1,d0
}
    a4a2:	\----> addq.l #4,sp
    a4a4:	       rts

0000a4a6 <forceWalkingPerson>:

BOOL forceWalkingPerson (int x, int y, int objNum, struct loadedFunction * func, int di) {
    a4a6:	          subq.l #4,sp
    if (x == 0 && y == 0) return FALSE;
    a4a8:	          tst.l 8(sp)
    a4ac:	      /-- bne.s a4ba <forceWalkingPerson+0x14>
    a4ae:	      |   tst.l 12(sp)
    a4b2:	      +-- bne.s a4ba <forceWalkingPerson+0x14>
    a4b4:	      |   clr.w d0
    a4b6:	/-----|-- bra.w a54c <forceWalkingPerson+0xa6>
    struct onScreenPerson * moveMe = findPerson(objNum);
    a4ba:	|     \-> move.l 16(sp),-(sp)
    a4be:	|         jsr a454 <findPerson>
    a4c4:	|         addq.l #4,sp
    a4c6:	|         move.l d0,(sp)
    if (!moveMe) return FALSE;
    a4c8:	|     /-- bne.s a4ce <forceWalkingPerson+0x28>
    a4ca:	|     |   clr.w d0
    a4cc:	+-----|-- bra.s a54c <forceWalkingPerson+0xa6>

    if (moveMe->continueAfterWalking) abortFunction(moveMe->continueAfterWalking);
    a4ce:	|     \-> movea.l (sp),a0
    a4d0:	|         move.l 68(a0),d0
    a4d4:	|     /-- beq.s a4e6 <forceWalkingPerson+0x40>
    a4d6:	|     |   movea.l (sp),a0
    a4d8:	|     |   move.l 68(a0),d0
    a4dc:	|     |   move.l d0,-(sp)
    a4de:	|     |   jsr 44d2 <abortFunction>
    a4e4:	|     |   addq.l #4,sp
    moveMe->walking = TRUE;
    a4e6:	|     \-> movea.l (sp),a0
    a4e8:	|         move.w #1,64(a0)
    moveMe->continueAfterWalking = NULL;
    a4ee:	|         movea.l (sp),a0
    a4f0:	|         clr.l 68(a0)
    moveMe->directionWhenDoneWalking = di;
    a4f4:	|         movea.l (sp),a0
    a4f6:	|         move.l 24(sp),110(a0)

    moveMe->walkToX = x;
    a4fc:	|         movea.l (sp),a0
    a4fe:	|         move.l 8(sp),40(a0)
    moveMe->walkToY = y;
    a504:	|         movea.l (sp),a0
    a506:	|         move.l 12(sp),44(a0)

    // Let's pretend the start and end points are both in the same
    // polygon (which one isn't important)
    moveMe->inPoly = 0;
    a50c:	|         movea.l (sp),a0
    a50e:	|         clr.l 56(a0)
    moveMe->walkToPoly = 0;
    a512:	|         movea.l (sp),a0
    a514:	|         clr.l 60(a0)

    doBorderStuff(moveMe);
    a518:	|         move.l (sp),-(sp)
    a51a:	|         jsr 97b6 <doBorderStuff>
    a520:	|         addq.l #4,sp
    if (walkMe(moveMe, TRUE) || moveMe->spinning) {
    a522:	|         pea 1 <_start+0x1>
    a526:	|         move.l 4(sp),-(sp)
    a52a:	|         jsr bd9a <walkMe>
    a530:	|         addq.l #8,sp
    a532:	|         tst.w d0
    a534:	|     /-- bne.s a53e <forceWalkingPerson+0x98>
    a536:	|     |   movea.l (sp),a0
    a538:	|     |   move.w 66(a0),d0
    a53c:	|  /--|-- beq.s a54a <forceWalkingPerson+0xa4>
        moveMe->continueAfterWalking = func;
    a53e:	|  |  \-> movea.l (sp),a0
    a540:	|  |      move.l 20(sp),68(a0)
        return TRUE;
    a546:	|  |      moveq #1,d0
    a548:	+--|----- bra.s a54c <forceWalkingPerson+0xa6>
    } else {
        return FALSE;
    a54a:	|  \----> clr.w d0
    }
}
    a54c:	\-------> addq.l #4,sp
    a54e:	          rts

0000a550 <handleClosestPoint>:

BOOL handleClosestPoint (int * setX, int * setY, int * setPoly) {
    a550:	                lea -56(sp),sp
    a554:	                move.l d2,-(sp)
	int gotX = 320, gotY = 200, gotPoly = -1, i, j, xTest1, yTest1,
    a556:	                move.l #320,56(sp)
    a55e:	                move.l #200,52(sp)
    a566:	                moveq #-1,d0
    a568:	                move.l d0,48(sp)
		xTest2, yTest2, closestX, closestY, oldJ, currentDistance = 0xFFFFF,
    a56c:	                move.l #1048575,32(sp)
		thisDistance;

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
    a574:	                clr.l 44(sp)
    a578:	   /----------- bra.w a750 <handleClosestPoint+0x200>
		oldJ = currentFloor -> polygon[i].numVertices - 1;
    a57c:	/--|----------> movea.l 1a8c0 <currentFloor>,a0
    a582:	|  |            move.l 12(a0),d1
    a586:	|  |            move.l 44(sp),d0
    a58a:	|  |            lsl.l #3,d0
    a58c:	|  |            movea.l d1,a0
    a58e:	|  |            adda.l d0,a0
    a590:	|  |            move.l (a0),d0
    a592:	|  |            move.l d0,d1
    a594:	|  |            subq.l #1,d1
    a596:	|  |            move.l d1,36(sp)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
    a59a:	|  |            clr.l 40(sp)
    a59e:	|  |     /----- bra.w a72e <handleClosestPoint+0x1de>
			xTest1 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[j]].x;
    a5a2:	|  |  /--|----> movea.l 1a8c0 <currentFloor>,a0
    a5a8:	|  |  |  |      move.l 4(a0),d1
    a5ac:	|  |  |  |      movea.l 1a8c0 <currentFloor>,a0
    a5b2:	|  |  |  |      movea.l 12(a0),a0
    a5b6:	|  |  |  |      move.l 44(sp),d0
    a5ba:	|  |  |  |      lsl.l #3,d0
    a5bc:	|  |  |  |      adda.l d0,a0
    a5be:	|  |  |  |      movea.l 4(a0),a0
    a5c2:	|  |  |  |      move.l 40(sp),d0
    a5c6:	|  |  |  |      add.l d0,d0
    a5c8:	|  |  |  |      add.l d0,d0
    a5ca:	|  |  |  |      adda.l d0,a0
    a5cc:	|  |  |  |      move.l (a0),d0
    a5ce:	|  |  |  |      lsl.l #3,d0
    a5d0:	|  |  |  |      movea.l d1,a0
    a5d2:	|  |  |  |      adda.l d0,a0
    a5d4:	|  |  |  |      move.l (a0),28(sp)
			yTest1 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[j]].y;
    a5d8:	|  |  |  |      movea.l 1a8c0 <currentFloor>,a0
    a5de:	|  |  |  |      move.l 4(a0),d1
    a5e2:	|  |  |  |      movea.l 1a8c0 <currentFloor>,a0
    a5e8:	|  |  |  |      movea.l 12(a0),a0
    a5ec:	|  |  |  |      move.l 44(sp),d0
    a5f0:	|  |  |  |      lsl.l #3,d0
    a5f2:	|  |  |  |      adda.l d0,a0
    a5f4:	|  |  |  |      movea.l 4(a0),a0
    a5f8:	|  |  |  |      move.l 40(sp),d0
    a5fc:	|  |  |  |      add.l d0,d0
    a5fe:	|  |  |  |      add.l d0,d0
    a600:	|  |  |  |      adda.l d0,a0
    a602:	|  |  |  |      move.l (a0),d0
    a604:	|  |  |  |      lsl.l #3,d0
    a606:	|  |  |  |      movea.l d1,a0
    a608:	|  |  |  |      adda.l d0,a0
    a60a:	|  |  |  |      move.l 4(a0),24(sp)
			xTest2 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[oldJ]].x;
    a610:	|  |  |  |      movea.l 1a8c0 <currentFloor>,a0
    a616:	|  |  |  |      move.l 4(a0),d1
    a61a:	|  |  |  |      movea.l 1a8c0 <currentFloor>,a0
    a620:	|  |  |  |      movea.l 12(a0),a0
    a624:	|  |  |  |      move.l 44(sp),d0
    a628:	|  |  |  |      lsl.l #3,d0
    a62a:	|  |  |  |      adda.l d0,a0
    a62c:	|  |  |  |      movea.l 4(a0),a0
    a630:	|  |  |  |      move.l 36(sp),d0
    a634:	|  |  |  |      add.l d0,d0
    a636:	|  |  |  |      add.l d0,d0
    a638:	|  |  |  |      adda.l d0,a0
    a63a:	|  |  |  |      move.l (a0),d0
    a63c:	|  |  |  |      lsl.l #3,d0
    a63e:	|  |  |  |      movea.l d1,a0
    a640:	|  |  |  |      adda.l d0,a0
    a642:	|  |  |  |      move.l (a0),20(sp)
			yTest2 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[oldJ]].y;
    a646:	|  |  |  |      movea.l 1a8c0 <currentFloor>,a0
    a64c:	|  |  |  |      move.l 4(a0),d1
    a650:	|  |  |  |      movea.l 1a8c0 <currentFloor>,a0
    a656:	|  |  |  |      movea.l 12(a0),a0
    a65a:	|  |  |  |      move.l 44(sp),d0
    a65e:	|  |  |  |      lsl.l #3,d0
    a660:	|  |  |  |      adda.l d0,a0
    a662:	|  |  |  |      movea.l 4(a0),a0
    a666:	|  |  |  |      move.l 36(sp),d0
    a66a:	|  |  |  |      add.l d0,d0
    a66c:	|  |  |  |      add.l d0,d0
    a66e:	|  |  |  |      adda.l d0,a0
    a670:	|  |  |  |      move.l (a0),d0
    a672:	|  |  |  |      lsl.l #3,d0
    a674:	|  |  |  |      movea.l d1,a0
    a676:	|  |  |  |      adda.l d0,a0
    a678:	|  |  |  |      move.l 4(a0),16(sp)
			closestPointOnLine (&closestX, &closestY, xTest1, yTest1, xTest2, yTest2, *setX, *setY);
    a67e:	|  |  |  |      movea.l 68(sp),a0
    a682:	|  |  |  |      move.l (a0),d1
    a684:	|  |  |  |      movea.l 64(sp),a0
    a688:	|  |  |  |      move.l (a0),d0
    a68a:	|  |  |  |      move.l d1,-(sp)
    a68c:	|  |  |  |      move.l d0,-(sp)
    a68e:	|  |  |  |      move.l 24(sp),-(sp)
    a692:	|  |  |  |      move.l 32(sp),-(sp)
    a696:	|  |  |  |      move.l 40(sp),-(sp)
    a69a:	|  |  |  |      move.l 48(sp),-(sp)
    a69e:	|  |  |  |      lea 28(sp),a0
    a6a2:	|  |  |  |      move.l a0,-(sp)
    a6a4:	|  |  |  |      lea 36(sp),a0
    a6a8:	|  |  |  |      move.l a0,-(sp)
    a6aa:	|  |  |  |      jsr 15e56 <closestPointOnLine>
    a6b0:	|  |  |  |      lea 32(sp),sp

			xTest1 = *setX - closestX;
    a6b4:	|  |  |  |      movea.l 64(sp),a0
    a6b8:	|  |  |  |      move.l (a0),d0
    a6ba:	|  |  |  |      move.l 8(sp),d1
    a6be:	|  |  |  |      move.l d0,d2
    a6c0:	|  |  |  |      sub.l d1,d2
    a6c2:	|  |  |  |      move.l d2,28(sp)
			yTest1 = *setY - closestY;
    a6c6:	|  |  |  |      movea.l 68(sp),a0
    a6ca:	|  |  |  |      move.l (a0),d0
    a6cc:	|  |  |  |      move.l 4(sp),d1
    a6d0:	|  |  |  |      move.l d0,d2
    a6d2:	|  |  |  |      sub.l d1,d2
    a6d4:	|  |  |  |      move.l d2,24(sp)
			thisDistance = xTest1 * xTest1 + yTest1 * yTest1;
    a6d8:	|  |  |  |      move.l 28(sp),-(sp)
    a6dc:	|  |  |  |      move.l 32(sp),-(sp)
    a6e0:	|  |  |  |      jsr 179c8 <__mulsi3>
    a6e6:	|  |  |  |      addq.l #8,sp
    a6e8:	|  |  |  |      move.l d0,d2
    a6ea:	|  |  |  |      move.l 24(sp),-(sp)
    a6ee:	|  |  |  |      move.l 28(sp),-(sp)
    a6f2:	|  |  |  |      jsr 179c8 <__mulsi3>
    a6f8:	|  |  |  |      addq.l #8,sp
    a6fa:	|  |  |  |      move.l d2,d1
    a6fc:	|  |  |  |      add.l d0,d1
    a6fe:	|  |  |  |      move.l d1,12(sp)


			if (thisDistance < currentDistance) {
    a702:	|  |  |  |      move.l 12(sp),d2
    a706:	|  |  |  |      cmp.l 32(sp),d2
    a70a:	|  |  |  |  /-- bge.s a724 <handleClosestPoint+0x1d4>

				currentDistance = thisDistance;
    a70c:	|  |  |  |  |   move.l 12(sp),32(sp)
				gotX = closestX;
    a712:	|  |  |  |  |   move.l 8(sp),56(sp)
				gotY = closestY;
    a718:	|  |  |  |  |   move.l 4(sp),52(sp)
				gotPoly = i;
    a71e:	|  |  |  |  |   move.l 44(sp),48(sp)
			}
			oldJ = j;
    a724:	|  |  |  |  \-> move.l 40(sp),36(sp)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
    a72a:	|  |  |  |      addq.l #1,40(sp)
    a72e:	|  |  |  \----> movea.l 1a8c0 <currentFloor>,a0
    a734:	|  |  |         move.l 12(a0),d1
    a738:	|  |  |         move.l 44(sp),d0
    a73c:	|  |  |         lsl.l #3,d0
    a73e:	|  |  |         movea.l d1,a0
    a740:	|  |  |         adda.l d0,a0
    a742:	|  |  |         move.l (a0),d0
    a744:	|  |  |         cmp.l 40(sp),d0
    a748:	|  |  \-------- bgt.w a5a2 <handleClosestPoint+0x52>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
    a74c:	|  |            addq.l #1,44(sp)
    a750:	|  \----------> movea.l 1a8c0 <currentFloor>,a0
    a756:	|               move.l 8(a0),d0
    a75a:	|               cmp.l 44(sp),d0
    a75e:	\-------------- bgt.w a57c <handleClosestPoint+0x2c>
		}
	}

	if (gotPoly == -1) return FALSE;
    a762:	                moveq #-1,d0
    a764:	                cmp.l 48(sp),d0
    a768:	            /-- bne.s a76e <handleClosestPoint+0x21e>
    a76a:	            |   clr.w d0
    a76c:	         /--|-- bra.s a788 <handleClosestPoint+0x238>
	*setX = gotX;
    a76e:	         |  \-> movea.l 64(sp),a0
    a772:	         |      move.l 56(sp),(a0)
	*setY = gotY;
    a776:	         |      movea.l 68(sp),a0
    a77a:	         |      move.l 52(sp),(a0)
	*setPoly = gotPoly;
    a77e:	         |      movea.l 72(sp),a0
    a782:	         |      move.l 48(sp),(a0)

	return TRUE;
    a786:	         |      moveq #1,d0
}
    a788:	         \----> move.l (sp)+,d2
    a78a:	                lea 56(sp),sp
    a78e:	                rts

0000a790 <initPeople>:


BOOL initPeople () {
	personRegion.sX = 0;
    a790:	clr.l 1a81c <personRegion+0x10>
	personRegion.sY = 0;
    a796:	clr.l 1a820 <personRegion+0x14>
	personRegion.di = -1;
    a79c:	moveq #-1,d0
    a79e:	move.l d0,1a824 <personRegion+0x18>
	allScreenRegions = NULL;
    a7a4:	clr.l 1a8b4 <allScreenRegions>

	return TRUE;
    a7aa:	moveq #1,d0
}
    a7ac:	rts

0000a7ae <jumpPerson>:

void jumpPerson (int x, int y, int objNum) {
    a7ae:	          subq.l #4,sp
    a7b0:	          move.l d2,-(sp)
    if (x == 0 && y == 0) return;
    a7b2:	          tst.l 12(sp)
    a7b6:	      /-- bne.s a7be <jumpPerson+0x10>
    a7b8:	      |   tst.l 16(sp)
    a7bc:	/-----|-- beq.s a832 <jumpPerson+0x84>
    struct onScreenPerson * moveMe = findPerson(objNum);
    a7be:	|     \-> move.l 20(sp),-(sp)
    a7c2:	|         jsr a454 <findPerson>
    a7c8:	|         addq.l #4,sp
    a7ca:	|         move.l d0,4(sp)
    if (!moveMe) return;
    a7ce:	|  /----- beq.s a836 <jumpPerson+0x88>
    if (moveMe->continueAfterWalking) abortFunction(moveMe->continueAfterWalking);
    a7d0:	|  |      movea.l 4(sp),a0
    a7d4:	|  |      move.l 68(a0),d0
    a7d8:	|  |  /-- beq.s a7ec <jumpPerson+0x3e>
    a7da:	|  |  |   movea.l 4(sp),a0
    a7de:	|  |  |   move.l 68(a0),d0
    a7e2:	|  |  |   move.l d0,-(sp)
    a7e4:	|  |  |   jsr 44d2 <abortFunction>
    a7ea:	|  |  |   addq.l #4,sp
    moveMe->continueAfterWalking = NULL;
    a7ec:	|  |  \-> movea.l 4(sp),a0
    a7f0:	|  |      clr.l 68(a0)
    moveMe->walking = FALSE;
    a7f4:	|  |      movea.l 4(sp),a0
    a7f8:	|  |      clr.w 64(a0)
    moveMe->spinning = FALSE;
    a7fc:	|  |      movea.l 4(sp),a0
    a800:	|  |      clr.w 66(a0)
    moveAndScale(moveMe, x, y);
    a804:	|  |      move.l 16(sp),-(sp)
    a808:	|  |      jsr 1746e <__floatsisf>
    a80e:	|  |      addq.l #4,sp
    a810:	|  |      move.l d0,d2
    a812:	|  |      move.l 12(sp),-(sp)
    a816:	|  |      jsr 1746e <__floatsisf>
    a81c:	|  |      addq.l #4,sp
    a81e:	|  |      move.l d2,-(sp)
    a820:	|  |      move.l d0,-(sp)
    a822:	|  |      move.l 12(sp),-(sp)
    a826:	|  |      jsr ab9c <moveAndScale>
    a82c:	|  |      lea 12(sp),sp
    a830:	|  |  /-- bra.s a838 <jumpPerson+0x8a>
    if (x == 0 && y == 0) return;
    a832:	\--|--|-> nop
    a834:	   |  +-- bra.s a838 <jumpPerson+0x8a>
    if (!moveMe) return;
    a836:	   \--|-> nop
}
    a838:	      \-> move.l (sp)+,d2
    a83a:	          addq.l #4,sp
    a83c:	          rts

0000a83e <killAllPeople>:


void killAllPeople () {
    a83e:	          subq.l #8,sp
    a840:	          move.l a6,-(sp)
	struct onScreenPerson * killPeople;
	while (allPeople) {
    a842:	   /----- bra.s a8ae <killAllPeople+0x70>
		if (allPeople -> continueAfterWalking) abortFunction (allPeople -> continueAfterWalking);
    a844:	/--|----> movea.l 1a808 <allPeople>,a0
    a84a:	|  |      move.l 68(a0),d0
    a84e:	|  |  /-- beq.s a864 <killAllPeople+0x26>
    a850:	|  |  |   movea.l 1a808 <allPeople>,a0
    a856:	|  |  |   move.l 68(a0),d0
    a85a:	|  |  |   move.l d0,-(sp)
    a85c:	|  |  |   jsr 44d2 <abortFunction>
    a862:	|  |  |   addq.l #4,sp
		allPeople -> continueAfterWalking = NULL;
    a864:	|  |  \-> movea.l 1a808 <allPeople>,a0
    a86a:	|  |      clr.l 68(a0)
		killPeople = allPeople;
    a86e:	|  |      move.l 1a808 <allPeople>,8(sp)
		allPeople = allPeople -> next;
    a876:	|  |      movea.l 1a808 <allPeople>,a0
    a87c:	|  |      move.l 36(a0),d0
    a880:	|  |      move.l d0,1a808 <allPeople>
		removeObjectType (killPeople -> thisType);
    a886:	|  |      movea.l 8(sp),a0
    a88a:	|  |      move.l 114(a0),d0
    a88e:	|  |      move.l d0,-(sp)
    a890:	|  |      jsr d6fe <removeObjectType>
    a896:	|  |      addq.l #4,sp
		FreeVec(killPeople);
    a898:	|  |      move.l 8(sp),4(sp)
    a89e:	|  |      move.l 1a7a4 <SysBase>,d0
    a8a4:	|  |      movea.l d0,a6
    a8a6:	|  |      movea.l 4(sp),a1
    a8aa:	|  |      jsr -690(a6)
	while (allPeople) {
    a8ae:	|  \----> move.l 1a808 <allPeople>,d0
    a8b4:	\-------- bne.s a844 <killAllPeople+0x6>
	}
}
    a8b6:	          nop
    a8b8:	          nop
    a8ba:	          movea.l (sp)+,a6
    a8bc:	          addq.l #8,sp
    a8be:	          rts

0000a8c0 <killMostPeople>:

void killMostPeople() {
    a8c0:	          lea -12(sp),sp
    a8c4:	          move.l a6,-(sp)
    struct onScreenPerson *killPeople;
    struct onScreenPerson **lookyHere = &allPeople;
    a8c6:	          move.l #108552,12(sp)

    while (*lookyHere) {
    a8ce:	   /----- bra.w a954 <killMostPeople+0x94>
        if ((*lookyHere)->extra & EXTRA_NOREMOVE) {
    a8d2:	/--|----> movea.l 12(sp),a0
    a8d6:	|  |      movea.l (a0),a0
    a8d8:	|  |      move.l 118(a0),d0
    a8dc:	|  |      moveq #32,d1
    a8de:	|  |      and.l d1,d0
    a8e0:	|  |  /-- beq.s a8f2 <killMostPeople+0x32>
            lookyHere = &(*lookyHere)->next;
    a8e2:	|  |  |   movea.l 12(sp),a0
    a8e6:	|  |  |   move.l (a0),d0
    a8e8:	|  |  |   moveq #36,d1
    a8ea:	|  |  |   add.l d0,d1
    a8ec:	|  |  |   move.l d1,12(sp)
    a8f0:	|  +--|-- bra.s a954 <killMostPeople+0x94>
        } else {
            killPeople = (*lookyHere);
    a8f2:	|  |  \-> movea.l 12(sp),a0
    a8f6:	|  |      move.l (a0),8(sp)

            // Change last pointer to NEXT in the list instead
            (*lookyHere) = killPeople->next;
    a8fa:	|  |      movea.l 8(sp),a0
    a8fe:	|  |      move.l 36(a0),d0
    a902:	|  |      movea.l 12(sp),a0
    a906:	|  |      move.l d0,(a0)

            // Gone from the list... now free some memory
            if (killPeople->continueAfterWalking) abortFunction(killPeople->continueAfterWalking);
    a908:	|  |      movea.l 8(sp),a0
    a90c:	|  |      move.l 68(a0),d0
    a910:	|  |  /-- beq.s a924 <killMostPeople+0x64>
    a912:	|  |  |   movea.l 8(sp),a0
    a916:	|  |  |   move.l 68(a0),d0
    a91a:	|  |  |   move.l d0,-(sp)
    a91c:	|  |  |   jsr 44d2 <abortFunction>
    a922:	|  |  |   addq.l #4,sp
            killPeople->continueAfterWalking = NULL;
    a924:	|  |  \-> movea.l 8(sp),a0
    a928:	|  |      clr.l 68(a0)
            removeObjectType(killPeople->thisType);
    a92c:	|  |      movea.l 8(sp),a0
    a930:	|  |      move.l 114(a0),d0
    a934:	|  |      move.l d0,-(sp)
    a936:	|  |      jsr d6fe <removeObjectType>
    a93c:	|  |      addq.l #4,sp
            FreeVec(killPeople);
    a93e:	|  |      move.l 8(sp),4(sp)
    a944:	|  |      move.l 1a7a4 <SysBase>,d0
    a94a:	|  |      movea.l d0,a6
    a94c:	|  |      movea.l 4(sp),a1
    a950:	|  |      jsr -690(a6)
    while (*lookyHere) {
    a954:	|  \----> movea.l 12(sp),a0
    a958:	|         move.l (a0),d0
    a95a:	\-------- bne.w a8d2 <killMostPeople+0x12>
        }
    }
}
    a95e:	          nop
    a960:	          nop
    a962:	          movea.l (sp)+,a6
    a964:	          lea 12(sp),sp
    a968:	          rts

0000a96a <makeSilent>:
//	db ("End of loadPeople");
	return TRUE;
}

void makeSilent (struct onScreenPerson me) {
	setFrames (&me, ANI_STAND);
    a96a:	clr.l -(sp)
    a96c:	move.l sp,d0
    a96e:	addq.l #8,d0
    a970:	move.l d0,-(sp)
    a972:	jsr 7f2a <setFrames>
    a978:	addq.l #8,sp
}
    a97a:	nop
    a97c:	rts

0000a97e <makeWalkingPerson>:

BOOL makeWalkingPerson (int x, int y, int objNum, struct loadedFunction * func, int di) {
    a97e:	          lea -12(sp),sp
    a982:	          move.l d2,-(sp)
	if (x == 0 && y == 0) return FALSE;
    a984:	          tst.l 20(sp)
    a988:	      /-- bne.s a996 <makeWalkingPerson+0x18>
    a98a:	      |   tst.l 24(sp)
    a98e:	      +-- bne.s a996 <makeWalkingPerson+0x18>
    a990:	      |   clr.w d0
    a992:	/-----|-- bra.w ab2e <makeWalkingPerson+0x1b0>
	if (currentFloor -> numPolygons == 0) return FALSE;
    a996:	|     \-> movea.l 1a8c0 <currentFloor>,a0
    a99c:	|         move.l 8(a0),d0
    a9a0:	|     /-- bne.s a9a8 <makeWalkingPerson+0x2a>
    a9a2:	|     |   clr.w d0
    a9a4:	+-----|-- bra.w ab2e <makeWalkingPerson+0x1b0>
	struct onScreenPerson * moveMe = findPerson (objNum);
    a9a8:	|     \-> move.l 28(sp),-(sp)
    a9ac:	|         jsr a454 <findPerson>
    a9b2:	|         addq.l #4,sp
    a9b4:	|         move.l d0,12(sp)
	if (! moveMe) return FALSE;
    a9b8:	|     /-- bne.s a9c0 <makeWalkingPerson+0x42>
    a9ba:	|     |   clr.w d0
    a9bc:	+-----|-- bra.w ab2e <makeWalkingPerson+0x1b0>

	if (moveMe -> continueAfterWalking) abortFunction (moveMe -> continueAfterWalking);
    a9c0:	|     \-> movea.l 12(sp),a0
    a9c4:	|         move.l 68(a0),d0
    a9c8:	|     /-- beq.s a9dc <makeWalkingPerson+0x5e>
    a9ca:	|     |   movea.l 12(sp),a0
    a9ce:	|     |   move.l 68(a0),d0
    a9d2:	|     |   move.l d0,-(sp)
    a9d4:	|     |   jsr 44d2 <abortFunction>
    a9da:	|     |   addq.l #4,sp
	moveMe -> continueAfterWalking = NULL;
    a9dc:	|     \-> movea.l 12(sp),a0
    a9e0:	|         clr.l 68(a0)
	moveMe -> walking = TRUE;
    a9e4:	|         movea.l 12(sp),a0
    a9e8:	|         move.w #1,64(a0)
	moveMe -> directionWhenDoneWalking = di;
    a9ee:	|         movea.l 12(sp),a0
    a9f2:	|         move.l 36(sp),110(a0)

	moveMe -> walkToX = x;
    a9f8:	|         movea.l 12(sp),a0
    a9fc:	|         move.l 20(sp),40(a0)
	moveMe -> walkToY = y;
    aa02:	|         movea.l 12(sp),a0
    aa06:	|         move.l 24(sp),44(a0)
	moveMe -> walkToPoly = inFloor (x, y);
    aa0c:	|         move.l 24(sp),-(sp)
    aa10:	|         move.l 24(sp),-(sp)
    aa14:	|         jsr 1639e <inFloor>
    aa1a:	|         addq.l #8,sp
    aa1c:	|         movea.l 12(sp),a0
    aa20:	|         move.l d0,60(a0)
	if (moveMe -> walkToPoly == -1) {
    aa24:	|         movea.l 12(sp),a0
    aa28:	|         move.l 60(a0),d0
    aa2c:	|         moveq #-1,d1
    aa2e:	|         cmp.l d0,d1
    aa30:	|     /-- bne.s aa60 <makeWalkingPerson+0xe2>
		if (! handleClosestPoint (&moveMe -> walkToX, &moveMe -> walkToY, &moveMe -> walkToPoly)) return FALSE;
    aa32:	|     |   movea.w #60,a0
    aa36:	|     |   adda.l 12(sp),a0
    aa3a:	|     |   moveq #44,d1
    aa3c:	|     |   add.l 12(sp),d1
    aa40:	|     |   moveq #40,d0
    aa42:	|     |   add.l 12(sp),d0
    aa46:	|     |   move.l a0,-(sp)
    aa48:	|     |   move.l d1,-(sp)
    aa4a:	|     |   move.l d0,-(sp)
    aa4c:	|     |   jsr a550 <handleClosestPoint>
    aa52:	|     |   lea 12(sp),sp
    aa56:	|     |   tst.w d0
    aa58:	|     +-- bne.s aa60 <makeWalkingPerson+0xe2>
    aa5a:	|     |   clr.w d0
    aa5c:	+-----|-- bra.w ab2e <makeWalkingPerson+0x1b0>
	}

	moveMe -> inPoly = inFloor (moveMe -> x, moveMe -> y);
    aa60:	|     \-> movea.l 12(sp),a0
    aa64:	|         move.l 4(a0),d0
    aa68:	|         move.l d0,-(sp)
    aa6a:	|         jsr 17406 <__fixsfsi>
    aa70:	|         addq.l #4,sp
    aa72:	|         move.l d0,d2
    aa74:	|         movea.l 12(sp),a0
    aa78:	|         move.l (a0),d0
    aa7a:	|         move.l d0,-(sp)
    aa7c:	|         jsr 17406 <__fixsfsi>
    aa82:	|         addq.l #4,sp
    aa84:	|         move.l d2,-(sp)
    aa86:	|         move.l d0,-(sp)
    aa88:	|         jsr 1639e <inFloor>
    aa8e:	|         addq.l #8,sp
    aa90:	|         movea.l 12(sp),a0
    aa94:	|         move.l d0,56(a0)
	if (moveMe -> inPoly == -1) {
    aa98:	|         movea.l 12(sp),a0
    aa9c:	|         move.l 56(a0),d0
    aaa0:	|         moveq #-1,d1
    aaa2:	|         cmp.l d0,d1
    aaa4:	|     /-- bne.s aaf6 <makeWalkingPerson+0x178>
		int xxx = moveMe -> x, yyy = moveMe -> y;
    aaa6:	|     |   movea.l 12(sp),a0
    aaaa:	|     |   move.l (a0),d0
    aaac:	|     |   move.l d0,-(sp)
    aaae:	|     |   jsr 17406 <__fixsfsi>
    aab4:	|     |   addq.l #4,sp
    aab6:	|     |   move.l d0,8(sp)
    aaba:	|     |   movea.l 12(sp),a0
    aabe:	|     |   move.l 4(a0),d0
    aac2:	|     |   move.l d0,-(sp)
    aac4:	|     |   jsr 17406 <__fixsfsi>
    aaca:	|     |   addq.l #4,sp
    aacc:	|     |   move.l d0,4(sp)
		if (! handleClosestPoint (&xxx, &yyy, &moveMe -> inPoly)) return FALSE;
    aad0:	|     |   moveq #56,d0
    aad2:	|     |   add.l 12(sp),d0
    aad6:	|     |   move.l d0,-(sp)
    aad8:	|     |   lea 8(sp),a0
    aadc:	|     |   move.l a0,-(sp)
    aade:	|     |   moveq #16,d0
    aae0:	|     |   add.l sp,d0
    aae2:	|     |   move.l d0,-(sp)
    aae4:	|     |   jsr a550 <handleClosestPoint>
    aaea:	|     |   lea 12(sp),sp
    aaee:	|     |   tst.w d0
    aaf0:	|     +-- bne.s aaf6 <makeWalkingPerson+0x178>
    aaf2:	|     |   clr.w d0
    aaf4:	+-----|-- bra.s ab2e <makeWalkingPerson+0x1b0>
	}

	doBorderStuff (moveMe);
    aaf6:	|     \-> move.l 12(sp),-(sp)
    aafa:	|         jsr 97b6 <doBorderStuff>
    ab00:	|         addq.l #4,sp
	if (walkMe (moveMe, FALSE) || moveMe -> spinning) {
    ab02:	|         clr.l -(sp)
    ab04:	|         move.l 16(sp),-(sp)
    ab08:	|         jsr bd9a <walkMe>
    ab0e:	|         addq.l #8,sp
    ab10:	|         tst.w d0
    ab12:	|     /-- bne.s ab1e <makeWalkingPerson+0x1a0>
    ab14:	|     |   movea.l 12(sp),a0
    ab18:	|     |   move.w 66(a0),d0
    ab1c:	|  /--|-- beq.s ab2c <makeWalkingPerson+0x1ae>
		moveMe -> continueAfterWalking = func;
    ab1e:	|  |  \-> movea.l 12(sp),a0
    ab22:	|  |      move.l 32(sp),68(a0)
		return TRUE;
    ab28:	|  |      moveq #1,d0
    ab2a:	+--|----- bra.s ab2e <makeWalkingPerson+0x1b0>
	} else {
		return FALSE;
    ab2c:	|  \----> clr.w d0
	}
}
    ab2e:	\-------> move.l (sp)+,d2
    ab30:	          lea 12(sp),sp
    ab34:	          rts

0000ab36 <makeNullAnim>:


struct personaAnimation * makeNullAnim () {
    ab36:	       lea -16(sp),sp
    ab3a:	       move.l a6,-(sp)

	struct personaAnimation * newAnim	= AllocVec(sizeof(struct personaAnimation),MEMF_ANY);
    ab3c:	       moveq #12,d0
    ab3e:	       move.l d0,16(sp)
    ab42:	       clr.l 12(sp)
    ab46:	       move.l 1a7a4 <SysBase>,d0
    ab4c:	       movea.l d0,a6
    ab4e:	       move.l 16(sp),d0
    ab52:	       move.l 12(sp),d1
    ab56:	       jsr -684(a6)
    ab5a:	       move.l d0,8(sp)
    ab5e:	       move.l 8(sp),d0
    ab62:	       move.l d0,4(sp)
    if(newAnim == 0) {
    ab66:	   /-- bne.s ab7a <makeNullAnim+0x44>
     	KPrintF("makeNullAnim: Can't reserve Memory\n");
    ab68:	   |   pea 18fcc <PutChar+0x14ee>
    ab6e:	   |   jsr 1703c <KPrintF>
    ab74:	   |   addq.l #4,sp
        return NULL;    
    ab76:	   |   moveq #0,d0
    ab78:	/--|-- bra.s ab94 <makeNullAnim+0x5e>
    }  

	newAnim -> theSprites		= NULL;
    ab7a:	|  \-> movea.l 4(sp),a0
    ab7e:	|      clr.l (a0)
	newAnim -> numFrames		= 0;
    ab80:	|      movea.l 4(sp),a0
    ab84:	|      clr.l 8(a0)
	newAnim -> frames			= NULL;
    ab88:	|      movea.l 4(sp),a0
    ab8c:	|      clr.l 4(a0)
	return newAnim;
    ab90:	|      move.l 4(sp),d0
}
    ab94:	\----> movea.l (sp)+,a6
    ab96:	       lea 16(sp),sp
    ab9a:	       rts

0000ab9c <moveAndScale>:

void moveAndScale (struct onScreenPerson *me, FLOAT x, FLOAT y) {
    ab9c:	    move.l d2,-(sp)
	me->x = x;
    ab9e:	    movea.l 8(sp),a0
    aba2:	    move.l 12(sp),(a0)
	me->y = y;
    aba6:	    movea.l 8(sp),a0
    abaa:	    move.l 16(sp),4(a0)
	me->oldx = 0;
    abb0:	    movea.l 8(sp),a0
    abb4:	    clr.l 8(a0)
	me->oldy = 0;
    abb8:	    movea.l 8(sp),a0
    abbc:	    clr.l 12(a0)
	if (! (me->extra & EXTRA_NOSCALE) && scaleDivide) me->scale = (me->y - scaleHorizon) / scaleDivide;
    abc0:	    movea.l 8(sp),a0
    abc4:	    move.l 118(a0),d0
    abc8:	    moveq #2,d1
    abca:	    and.l d1,d0
    abcc:	/-- bne.s ac24 <moveAndScale+0x88>
    abce:	|   move.w 1a138 <scaleDivide>,d0
    abd4:	+-- beq.s ac24 <moveAndScale+0x88>
    abd6:	|   movea.l 8(sp),a0
    abda:	|   move.l 4(a0),d2
    abde:	|   move.w 1a136 <scaleHorizon>,d0
    abe4:	|   movea.w d0,a0
    abe6:	|   move.l a0,-(sp)
    abe8:	|   jsr 1746e <__floatsisf>
    abee:	|   addq.l #4,sp
    abf0:	|   move.l d0,-(sp)
    abf2:	|   move.l d2,-(sp)
    abf4:	|   jsr 17762 <__subsf3>
    abfa:	|   addq.l #8,sp
    abfc:	|   move.l d0,d2
    abfe:	|   move.w 1a138 <scaleDivide>,d0
    ac04:	|   movea.w d0,a0
    ac06:	|   move.l a0,-(sp)
    ac08:	|   jsr 1746e <__floatsisf>
    ac0e:	|   addq.l #4,sp
    ac10:	|   move.l d0,-(sp)
    ac12:	|   move.l d2,-(sp)
    ac14:	|   jsr 17324 <__divsf3>
    ac1a:	|   addq.l #8,sp
    ac1c:	|   movea.l 8(sp),a0
    ac20:	|   move.l d0,32(a0)
}
    ac24:	\-> nop
    ac26:	    move.l (sp)+,d2
    ac28:	    rts

0000ac2a <removeOneCharacter>:

void removeOneCharacter (int i) {
    ac2a:	          lea -16(sp),sp
    ac2e:	          move.l a6,-(sp)
    struct onScreenPerson * p = findPerson(i);	
    ac30:	          move.l 24(sp),-(sp)
    ac34:	          jsr a454 <findPerson>
    ac3a:	          addq.l #4,sp
    ac3c:	          move.l d0,8(sp)

    if (p) {
    ac40:	/-------- beq.w ad20 <removeOneCharacter+0xf6>
		/*if( p->myAnim->numFrames == 0) {
			CstRestoreScreen(p->x, p->y, &p->myAnim->theSprites->bank.sprites[0].width, &p->myAnim->theSprites->bank.sprites[0].height );
		} ToDo: Remove this*/


        if (overRegion == &personRegion && overRegion->thisType == p->thisType) {
    ac44:	|         move.l 1a8b8 <overRegion>,d0
    ac4a:	|         cmpi.l #108556,d0
    ac50:	|     /-- bne.s ac6e <removeOneCharacter+0x44>
    ac52:	|     |   movea.l 1a8b8 <overRegion>,a0
    ac58:	|     |   move.l 28(a0),d1
    ac5c:	|     |   movea.l 8(sp),a0
    ac60:	|     |   move.l 114(a0),d0
    ac64:	|     |   cmp.l d1,d0
    ac66:	|     +-- bne.s ac6e <removeOneCharacter+0x44>
            overRegion = NULL;
    ac68:	|     |   clr.l 1a8b8 <overRegion>
        }

        if (p->continueAfterWalking) abortFunction(p->continueAfterWalking);
    ac6e:	|     \-> movea.l 8(sp),a0
    ac72:	|         move.l 68(a0),d0
    ac76:	|     /-- beq.s ac8a <removeOneCharacter+0x60>
    ac78:	|     |   movea.l 8(sp),a0
    ac7c:	|     |   move.l 68(a0),d0
    ac80:	|     |   move.l d0,-(sp)
    ac82:	|     |   jsr 44d2 <abortFunction>
    ac88:	|     |   addq.l #4,sp
        p->continueAfterWalking = NULL;
    ac8a:	|     \-> movea.l 8(sp),a0
    ac8e:	|         clr.l 68(a0)
        struct onScreenPerson ** killPeople;

		for(int i=0; i<3;i++)
    ac92:	|         clr.l 12(sp)
    ac96:	|     /-- bra.s acbe <removeOneCharacter+0x94>
		{
			deleteAnim( p->myPersona->animation[i]);
    ac98:	|  /--|-> movea.l 8(sp),a0
    ac9c:	|  |  |   movea.l 80(a0),a0
    aca0:	|  |  |   move.l (a0),d1
    aca2:	|  |  |   move.l 12(sp),d0
    aca6:	|  |  |   add.l d0,d0
    aca8:	|  |  |   add.l d0,d0
    acaa:	|  |  |   movea.l d1,a0
    acac:	|  |  |   adda.l d0,a0
    acae:	|  |  |   move.l (a0),d0
    acb0:	|  |  |   move.l d0,-(sp)
    acb2:	|  |  |   jsr 9732 <deleteAnim>
    acb8:	|  |  |   addq.l #4,sp
		for(int i=0; i<3;i++)
    acba:	|  |  |   addq.l #1,12(sp)
    acbe:	|  |  \-> moveq #2,d0
    acc0:	|  |      cmp.l 12(sp),d0
    acc4:	|  \----- bge.s ac98 <removeOneCharacter+0x6e>
		}

        for (killPeople = &allPeople;
    acc6:	|         move.l #108552,16(sp)
    acce:	|     /-- bra.s acde <removeOneCharacter+0xb4>
            *killPeople != p;
            killPeople = &((*killPeople)->next)) {;}
    acd0:	|  /--|-> movea.l 16(sp),a0
    acd4:	|  |  |   move.l (a0),d0
    acd6:	|  |  |   moveq #36,d1
    acd8:	|  |  |   add.l d0,d1
    acda:	|  |  |   move.l d1,16(sp)
            *killPeople != p;
    acde:	|  |  \-> movea.l 16(sp),a0
    ace2:	|  |      move.l (a0),d0
    ace4:	|  |      cmp.l 8(sp),d0
    ace8:	|  \----- bne.s acd0 <removeOneCharacter+0xa6>

        *killPeople = p->next;
    acea:	|         movea.l 8(sp),a0
    acee:	|         move.l 36(a0),d0
    acf2:	|         movea.l 16(sp),a0
    acf6:	|         move.l d0,(a0)
        removeObjectType(p->thisType);
    acf8:	|         movea.l 8(sp),a0
    acfc:	|         move.l 114(a0),d0
    ad00:	|         move.l d0,-(sp)
    ad02:	|         jsr d6fe <removeObjectType>
    ad08:	|         addq.l #4,sp
        FreeVec(p);
    ad0a:	|         move.l 8(sp),4(sp)
    ad10:	|         move.l 1a7a4 <SysBase>,d0
    ad16:	|         movea.l d0,a6
    ad18:	|         movea.l 4(sp),a1
    ad1c:	|         jsr -690(a6)
    }
}
    ad20:	\-------> nop
    ad22:	          movea.l (sp)+,a6
    ad24:	          lea 16(sp),sp
    ad28:	          rts

0000ad2a <rethinkAngle>:

void rethinkAngle (struct onScreenPerson * thisPerson) {
    ad2a:	       subq.l #8,sp
    ad2c:	       move.l d2,-(sp)
	int d = thisPerson -> myPersona -> numDirections;
    ad2e:	       movea.l 16(sp),a0
    ad32:	       movea.l 80(a0),a0
    ad36:	       move.l 4(a0),4(sp)
	int direc = thisPerson -> angle + (180 / d) + 180 + thisPerson -> angleOffset;
    ad3c:	       movea.l 16(sp),a0
    ad40:	       move.l 92(a0),d2
    ad44:	       move.l 4(sp),-(sp)
    ad48:	       pea b4 <_start+0xb4>
    ad4c:	       jsr 17a46 <__divsi3>
    ad52:	       addq.l #8,sp
    ad54:	       add.l d2,d0
    ad56:	       move.l d0,d1
    ad58:	       addi.l #180,d1
    ad5e:	       movea.l 16(sp),a0
    ad62:	       move.l 100(a0),d0
    ad66:	       move.l d1,d2
    ad68:	       add.l d0,d2
    ad6a:	       move.l d2,8(sp)
	while (direc >= 360) direc -= 360;
    ad6e:	   /-- bra.s ad78 <rethinkAngle+0x4e>
    ad70:	/--|-> addi.l #-360,8(sp)
    ad78:	|  \-> cmpi.l #359,8(sp)
    ad80:	\----- bgt.s ad70 <rethinkAngle+0x46>
	thisPerson -> direction = (direc * d) / 360;
    ad82:	       move.l 4(sp),-(sp)
    ad86:	       move.l 12(sp),-(sp)
    ad8a:	       jsr 179c8 <__mulsi3>
    ad90:	       addq.l #8,sp
    ad92:	       pea 168 <decodeFilename+0x50>
    ad96:	       move.l d0,-(sp)
    ad98:	       jsr 17a46 <__divsi3>
    ad9e:	       addq.l #8,sp
    ada0:	       movea.l 16(sp),a0
    ada4:	       move.l d0,106(a0)
}
    ada8:	       nop
    adaa:	       move.l (sp)+,d2
    adac:	       addq.l #8,sp
    adae:	       rts

0000adb0 <saveAnim>:


BOOL saveAnim (struct personaAnimation * p, BPTR fp) {
    adb0:	          subq.l #4,sp
	put2bytes (p -> numFrames, fp);
    adb2:	          movea.l 8(sp),a0
    adb6:	          move.l 8(a0),d0
    adba:	          move.l 12(sp),-(sp)
    adbe:	          move.l d0,-(sp)
    adc0:	          jsr 8d0 <put2bytes>
    adc6:	          addq.l #8,sp
	if (p -> numFrames) {
    adc8:	          movea.l 8(sp),a0
    adcc:	          move.l 8(a0),d0
    add0:	/-------- beq.w ae74 <saveAnim+0xc4>
		put4bytes (p -> theSprites -> ID, fp);
    add4:	|         movea.l 8(sp),a0
    add8:	|         movea.l (a0),a0
    adda:	|         move.l (a0),d0
    addc:	|         move.l 12(sp),-(sp)
    ade0:	|         move.l d0,-(sp)
    ade2:	|         jsr 958 <put4bytes>
    ade8:	|         addq.l #8,sp

		for (int a = 0; a < p -> numFrames; a ++) {
    adea:	|         clr.l (sp)
    adec:	|     /-- bra.s ae66 <saveAnim+0xb6>
			put4bytes (p -> frames[a].frameNum, fp);
    adee:	|  /--|-> movea.l 8(sp),a0
    adf2:	|  |  |   movea.l 4(a0),a0
    adf6:	|  |  |   move.l (sp),d1
    adf8:	|  |  |   move.l d1,d0
    adfa:	|  |  |   add.l d0,d0
    adfc:	|  |  |   add.l d1,d0
    adfe:	|  |  |   add.l d0,d0
    ae00:	|  |  |   add.l d0,d0
    ae02:	|  |  |   adda.l d0,a0
    ae04:	|  |  |   move.l (a0),d0
    ae06:	|  |  |   move.l 12(sp),-(sp)
    ae0a:	|  |  |   move.l d0,-(sp)
    ae0c:	|  |  |   jsr 958 <put4bytes>
    ae12:	|  |  |   addq.l #8,sp
			put4bytes (p -> frames[a].howMany, fp);
    ae14:	|  |  |   movea.l 8(sp),a0
    ae18:	|  |  |   movea.l 4(a0),a0
    ae1c:	|  |  |   move.l (sp),d1
    ae1e:	|  |  |   move.l d1,d0
    ae20:	|  |  |   add.l d0,d0
    ae22:	|  |  |   add.l d1,d0
    ae24:	|  |  |   add.l d0,d0
    ae26:	|  |  |   add.l d0,d0
    ae28:	|  |  |   adda.l d0,a0
    ae2a:	|  |  |   move.l 4(a0),d0
    ae2e:	|  |  |   move.l 12(sp),-(sp)
    ae32:	|  |  |   move.l d0,-(sp)
    ae34:	|  |  |   jsr 958 <put4bytes>
    ae3a:	|  |  |   addq.l #8,sp
			put4bytes (p -> frames[a].noise, fp);
    ae3c:	|  |  |   movea.l 8(sp),a0
    ae40:	|  |  |   movea.l 4(a0),a0
    ae44:	|  |  |   move.l (sp),d1
    ae46:	|  |  |   move.l d1,d0
    ae48:	|  |  |   add.l d0,d0
    ae4a:	|  |  |   add.l d1,d0
    ae4c:	|  |  |   add.l d0,d0
    ae4e:	|  |  |   add.l d0,d0
    ae50:	|  |  |   adda.l d0,a0
    ae52:	|  |  |   move.l 8(a0),d0
    ae56:	|  |  |   move.l 12(sp),-(sp)
    ae5a:	|  |  |   move.l d0,-(sp)
    ae5c:	|  |  |   jsr 958 <put4bytes>
    ae62:	|  |  |   addq.l #8,sp
		for (int a = 0; a < p -> numFrames; a ++) {
    ae64:	|  |  |   addq.l #1,(sp)
    ae66:	|  |  \-> movea.l 8(sp),a0
    ae6a:	|  |      move.l 8(a0),d0
    ae6e:	|  |      cmp.l (sp),d0
    ae70:	|  \----- bgt.w adee <saveAnim+0x3e>
		}
	}
	return TRUE;
    ae74:	\-------> moveq #1,d0
}
    ae76:	          addq.l #4,sp
    ae78:	          rts

0000ae7a <saveCostume>:

BOOL saveCostume (struct persona * cossy, BPTR fp) {
    ae7a:	             subq.l #4,sp
	int a;
	put2bytes (cossy -> numDirections, fp);
    ae7c:	             movea.l 8(sp),a0
    ae80:	             move.l 4(a0),d0
    ae84:	             move.l 12(sp),-(sp)
    ae88:	             move.l d0,-(sp)
    ae8a:	             jsr 8d0 <put2bytes>
    ae90:	             addq.l #8,sp
	for (a = 0; a < cossy -> numDirections * 3; a ++) {
    ae92:	             clr.l (sp)
    ae94:	   /-------- bra.s aec0 <saveCostume+0x46>
		if (! saveAnim (cossy -> animation[a], fp)) return FALSE;
    ae96:	/--|-------> movea.l 8(sp),a0
    ae9a:	|  |         move.l (a0),d1
    ae9c:	|  |         move.l (sp),d0
    ae9e:	|  |         add.l d0,d0
    aea0:	|  |         add.l d0,d0
    aea2:	|  |         movea.l d1,a0
    aea4:	|  |         adda.l d0,a0
    aea6:	|  |         move.l (a0),d0
    aea8:	|  |         move.l 12(sp),-(sp)
    aeac:	|  |         move.l d0,-(sp)
    aeae:	|  |         jsr adb0 <saveAnim>
    aeb4:	|  |         addq.l #8,sp
    aeb6:	|  |         tst.w d0
    aeb8:	|  |     /-- bne.s aebe <saveCostume+0x44>
    aeba:	|  |     |   clr.w d0
    aebc:	|  |  /--|-- bra.s aed4 <saveCostume+0x5a>
	for (a = 0; a < cossy -> numDirections * 3; a ++) {
    aebe:	|  |  |  \-> addq.l #1,(sp)
    aec0:	|  \--|----> movea.l 8(sp),a0
    aec4:	|     |      move.l 4(a0),d1
    aec8:	|     |      move.l d1,d0
    aeca:	|     |      add.l d0,d0
    aecc:	|     |      add.l d1,d0
    aece:	|     |      cmp.l (sp),d0
    aed0:	\-----|----- bgt.s ae96 <saveCostume+0x1c>
	}

	return TRUE;
    aed2:	      |      moveq #1,d0
}
    aed4:	      \----> addq.l #4,sp
    aed6:	             rts

0000aed8 <savePeople>:

BOOL savePeople (BPTR fp) {
    aed8:	             lea -144(sp),sp
    aedc:	             move.l a6,-(sp)
    aede:	             move.l d2,-(sp)
	struct onScreenPerson * me = allPeople;
    aee0:	             move.l 1a808 <allPeople>,148(sp)
	int countPeople = 0, a;
    aee8:	             clr.l 144(sp)

	putSigned (scaleHorizon, fp);
    aeec:	             move.w 1a136 <scaleHorizon>,d0
    aef2:	             movea.w d0,a0
    aef4:	             move.l 156(sp),-(sp)
    aef8:	             move.l a0,-(sp)
    aefa:	             jsr a9c <putSigned>
    af00:	             addq.l #8,sp
	putSigned (scaleDivide, fp);
    af02:	             move.w 1a138 <scaleDivide>,d0
    af08:	             movea.w d0,a0
    af0a:	             move.l 156(sp),-(sp)
    af0e:	             move.l a0,-(sp)
    af10:	             jsr a9c <putSigned>
    af16:	             addq.l #8,sp

	while (me) {
    af18:	         /-- bra.s af28 <savePeople+0x50>
		countPeople ++;
    af1a:	      /--|-> addq.l #1,144(sp)
		me = me -> next;
    af1e:	      |  |   movea.l 148(sp),a0
    af22:	      |  |   move.l 36(a0),148(sp)
	while (me) {
    af28:	      |  \-> tst.l 148(sp)
    af2c:	      \----- bne.s af1a <savePeople+0x42>
	}

	put2bytes (countPeople, fp);
    af2e:	             move.l 156(sp),-(sp)
    af32:	             move.l 148(sp),-(sp)
    af36:	             jsr 8d0 <put2bytes>
    af3c:	             addq.l #8,sp

	me = allPeople;
    af3e:	             move.l 1a808 <allPeople>,148(sp)
	for (a = 0; a < countPeople; a ++) {
    af46:	             clr.l 140(sp)
    af4a:	   /-------- bra.w b3a2 <savePeople+0x4ca>

		putFloat (me -> x, fp);
    af4e:	/--|-------> movea.l 148(sp),a0
    af52:	|  |         move.l (a0),d0
    af54:	|  |         move.l 156(sp),-(sp)
    af58:	|  |         move.l d0,-(sp)
    af5a:	|  |         jsr a46 <putFloat>
    af60:	|  |         addq.l #8,sp
		putFloat (me -> y, fp);
    af62:	|  |         movea.l 148(sp),a0
    af66:	|  |         move.l 4(a0),d0
    af6a:	|  |         move.l 156(sp),-(sp)
    af6e:	|  |         move.l d0,-(sp)
    af70:	|  |         jsr a46 <putFloat>
    af76:	|  |         addq.l #8,sp

		saveCostume (me -> myPersona, fp);
    af78:	|  |         movea.l 148(sp),a0
    af7c:	|  |         move.l 80(a0),d0
    af80:	|  |         move.l 156(sp),-(sp)
    af84:	|  |         move.l d0,-(sp)
    af86:	|  |         jsr ae7a <saveCostume>
    af8c:	|  |         addq.l #8,sp
		saveAnim (me -> myAnim, fp);
    af8e:	|  |         movea.l 148(sp),a0
    af92:	|  |         move.l 72(a0),d0
    af96:	|  |         move.l 156(sp),-(sp)
    af9a:	|  |         move.l d0,-(sp)
    af9c:	|  |         jsr adb0 <saveAnim>
    afa2:	|  |         addq.l #8,sp
		FPutC( fp, me -> myAnim == me -> lastUsedAnim);
    afa4:	|  |         move.l 156(sp),136(sp)
    afaa:	|  |         movea.l 148(sp),a0
    afae:	|  |         move.l 72(a0),d1
    afb2:	|  |         movea.l 148(sp),a0
    afb6:	|  |         move.l 76(a0),d0
    afba:	|  |         cmp.l d1,d0
    afbc:	|  |         seq d0
    afbe:	|  |         neg.b d0
    afc0:	|  |         move.b d0,d0
    afc2:	|  |         andi.l #255,d0
    afc8:	|  |         move.l d0,132(sp)
    afcc:	|  |         move.l 1a7ac <DOSBase>,d0
    afd2:	|  |         movea.l d0,a6
    afd4:	|  |         move.l 136(sp),d1
    afd8:	|  |         move.l 132(sp),d2
    afdc:	|  |         jsr -312(a6)
    afe0:	|  |         move.l d0,128(sp)

		putFloat (me -> scale, fp);
    afe4:	|  |         movea.l 148(sp),a0
    afe8:	|  |         move.l 32(a0),d0
    afec:	|  |         move.l 156(sp),-(sp)
    aff0:	|  |         move.l d0,-(sp)
    aff2:	|  |         jsr a46 <putFloat>
    aff8:	|  |         addq.l #8,sp

		put2bytes (me -> extra, fp);
    affa:	|  |         movea.l 148(sp),a0
    affe:	|  |         move.l 118(a0),d0
    b002:	|  |         move.l 156(sp),-(sp)
    b006:	|  |         move.l d0,-(sp)
    b008:	|  |         jsr 8d0 <put2bytes>
    b00e:	|  |         addq.l #8,sp
		put2bytes (me -> height, fp);
    b010:	|  |         movea.l 148(sp),a0
    b014:	|  |         move.l 20(a0),d0
    b018:	|  |         move.l 156(sp),-(sp)
    b01c:	|  |         move.l d0,-(sp)
    b01e:	|  |         jsr 8d0 <put2bytes>
    b024:	|  |         addq.l #8,sp
		put2bytes (me -> walkToX, fp);
    b026:	|  |         movea.l 148(sp),a0
    b02a:	|  |         move.l 40(a0),d0
    b02e:	|  |         move.l 156(sp),-(sp)
    b032:	|  |         move.l d0,-(sp)
    b034:	|  |         jsr 8d0 <put2bytes>
    b03a:	|  |         addq.l #8,sp
		put2bytes (me -> walkToY, fp);
    b03c:	|  |         movea.l 148(sp),a0
    b040:	|  |         move.l 44(a0),d0
    b044:	|  |         move.l 156(sp),-(sp)
    b048:	|  |         move.l d0,-(sp)
    b04a:	|  |         jsr 8d0 <put2bytes>
    b050:	|  |         addq.l #8,sp
		put2bytes (me -> thisStepX, fp);
    b052:	|  |         movea.l 148(sp),a0
    b056:	|  |         move.l 48(a0),d0
    b05a:	|  |         move.l 156(sp),-(sp)
    b05e:	|  |         move.l d0,-(sp)
    b060:	|  |         jsr 8d0 <put2bytes>
    b066:	|  |         addq.l #8,sp
		put2bytes (me -> thisStepY, fp);
    b068:	|  |         movea.l 148(sp),a0
    b06c:	|  |         move.l 52(a0),d0
    b070:	|  |         move.l 156(sp),-(sp)
    b074:	|  |         move.l d0,-(sp)
    b076:	|  |         jsr 8d0 <put2bytes>
    b07c:	|  |         addq.l #8,sp
		put2bytes (me -> frameNum, fp);
    b07e:	|  |         movea.l 148(sp),a0
    b082:	|  |         move.l 84(a0),d0
    b086:	|  |         move.l 156(sp),-(sp)
    b08a:	|  |         move.l d0,-(sp)
    b08c:	|  |         jsr 8d0 <put2bytes>
    b092:	|  |         addq.l #8,sp
		put2bytes (me -> frameTick, fp);
    b094:	|  |         movea.l 148(sp),a0
    b098:	|  |         move.l 88(a0),d0
    b09c:	|  |         move.l 156(sp),-(sp)
    b0a0:	|  |         move.l d0,-(sp)
    b0a2:	|  |         jsr 8d0 <put2bytes>
    b0a8:	|  |         addq.l #8,sp
		put2bytes (me -> walkSpeed, fp);
    b0aa:	|  |         movea.l 148(sp),a0
    b0ae:	|  |         move.l 28(a0),d0
    b0b2:	|  |         move.l 156(sp),-(sp)
    b0b6:	|  |         move.l d0,-(sp)
    b0b8:	|  |         jsr 8d0 <put2bytes>
    b0be:	|  |         addq.l #8,sp
		put2bytes (me -> spinSpeed, fp);
    b0c0:	|  |         movea.l 148(sp),a0
    b0c4:	|  |         move.l 122(a0),d0
    b0c8:	|  |         move.l 156(sp),-(sp)
    b0cc:	|  |         move.l d0,-(sp)
    b0ce:	|  |         jsr 8d0 <put2bytes>
    b0d4:	|  |         addq.l #8,sp
		putSigned (me -> floaty, fp);
    b0d6:	|  |         movea.l 148(sp),a0
    b0da:	|  |         move.l 24(a0),d0
    b0de:	|  |         move.l d0,d0
    b0e0:	|  |         movea.w d0,a0
    b0e2:	|  |         move.l 156(sp),-(sp)
    b0e6:	|  |         move.l a0,-(sp)
    b0e8:	|  |         jsr a9c <putSigned>
    b0ee:	|  |         addq.l #8,sp
		FPutC (fp, me -> show);
    b0f0:	|  |         move.l 156(sp),124(sp)
    b0f6:	|  |         movea.l 148(sp),a0
    b0fa:	|  |         move.w 104(a0),d0
    b0fe:	|  |         movea.w d0,a0
    b100:	|  |         move.l a0,120(sp)
    b104:	|  |         move.l 1a7ac <DOSBase>,d0
    b10a:	|  |         movea.l d0,a6
    b10c:	|  |         move.l 124(sp),d1
    b110:	|  |         move.l 120(sp),d2
    b114:	|  |         jsr -312(a6)
    b118:	|  |         move.l d0,116(sp)
		FPutC (fp, me -> walking);
    b11c:	|  |         move.l 156(sp),112(sp)
    b122:	|  |         movea.l 148(sp),a0
    b126:	|  |         move.w 64(a0),d0
    b12a:	|  |         movea.w d0,a0
    b12c:	|  |         move.l a0,108(sp)
    b130:	|  |         move.l 1a7ac <DOSBase>,d0
    b136:	|  |         movea.l d0,a6
    b138:	|  |         move.l 112(sp),d1
    b13c:	|  |         move.l 108(sp),d2
    b140:	|  |         jsr -312(a6)
    b144:	|  |         move.l d0,104(sp)
		FPutC (fp, me -> spinning);
    b148:	|  |         move.l 156(sp),100(sp)
    b14e:	|  |         movea.l 148(sp),a0
    b152:	|  |         move.w 66(a0),d0
    b156:	|  |         movea.w d0,a0
    b158:	|  |         move.l a0,96(sp)
    b15c:	|  |         move.l 1a7ac <DOSBase>,d0
    b162:	|  |         movea.l d0,a6
    b164:	|  |         move.l 100(sp),d1
    b168:	|  |         move.l 96(sp),d2
    b16c:	|  |         jsr -312(a6)
    b170:	|  |         move.l d0,92(sp)
		if (me -> continueAfterWalking) {
    b174:	|  |         movea.l 148(sp),a0
    b178:	|  |         move.l 68(a0),d0
    b17c:	|  |  /----- beq.s b1ba <savePeople+0x2e2>
			FPutC (fp, 1);
    b17e:	|  |  |      move.l 156(sp),76(sp)
    b184:	|  |  |      moveq #1,d0
    b186:	|  |  |      move.l d0,72(sp)
    b18a:	|  |  |      move.l 1a7ac <DOSBase>,d0
    b190:	|  |  |      movea.l d0,a6
    b192:	|  |  |      move.l 76(sp),d1
    b196:	|  |  |      move.l 72(sp),d2
    b19a:	|  |  |      jsr -312(a6)
    b19e:	|  |  |      move.l d0,68(sp)
			saveFunction (me -> continueAfterWalking, fp);
    b1a2:	|  |  |      movea.l 148(sp),a0
    b1a6:	|  |  |      move.l 68(a0),d0
    b1aa:	|  |  |      move.l 156(sp),-(sp)
    b1ae:	|  |  |      move.l d0,-(sp)
    b1b0:	|  |  |      jsr c3d4 <saveFunction>
    b1b6:	|  |  |      addq.l #8,sp
    b1b8:	|  |  |  /-- bra.s b1de <savePeople+0x306>
		} else {
			FPutC (fp, 1);
    b1ba:	|  |  \--|-> move.l 156(sp),88(sp)
    b1c0:	|  |     |   moveq #1,d0
    b1c2:	|  |     |   move.l d0,84(sp)
    b1c6:	|  |     |   move.l 1a7ac <DOSBase>,d0
    b1cc:	|  |     |   movea.l d0,a6
    b1ce:	|  |     |   move.l 88(sp),d1
    b1d2:	|  |     |   move.l 84(sp),d2
    b1d6:	|  |     |   jsr -312(a6)
    b1da:	|  |     |   move.l d0,80(sp)
		}
		put2bytes (me -> direction, fp);
    b1de:	|  |     \-> movea.l 148(sp),a0
    b1e2:	|  |         move.l 106(a0),d0
    b1e6:	|  |         move.l 156(sp),-(sp)
    b1ea:	|  |         move.l d0,-(sp)
    b1ec:	|  |         jsr 8d0 <put2bytes>
    b1f2:	|  |         addq.l #8,sp
		put2bytes (me -> angle, fp);
    b1f4:	|  |         movea.l 148(sp),a0
    b1f8:	|  |         move.l 92(a0),d0
    b1fc:	|  |         move.l 156(sp),-(sp)
    b200:	|  |         move.l d0,-(sp)
    b202:	|  |         jsr 8d0 <put2bytes>
    b208:	|  |         addq.l #8,sp
		put2bytes (me -> angleOffset, fp);
    b20a:	|  |         movea.l 148(sp),a0
    b20e:	|  |         move.l 100(a0),d0
    b212:	|  |         move.l 156(sp),-(sp)
    b216:	|  |         move.l d0,-(sp)
    b218:	|  |         jsr 8d0 <put2bytes>
    b21e:	|  |         addq.l #8,sp
		put2bytes (me -> wantAngle, fp);
    b220:	|  |         movea.l 148(sp),a0
    b224:	|  |         move.l 96(a0),d0
    b228:	|  |         move.l 156(sp),-(sp)
    b22c:	|  |         move.l d0,-(sp)
    b22e:	|  |         jsr 8d0 <put2bytes>
    b234:	|  |         addq.l #8,sp
		putSigned (me -> directionWhenDoneWalking, fp);
    b236:	|  |         movea.l 148(sp),a0
    b23a:	|  |         move.l 110(a0),d0
    b23e:	|  |         move.l d0,d0
    b240:	|  |         movea.w d0,a0
    b242:	|  |         move.l 156(sp),-(sp)
    b246:	|  |         move.l a0,-(sp)
    b248:	|  |         jsr a9c <putSigned>
    b24e:	|  |         addq.l #8,sp
		putSigned (me -> inPoly, fp);
    b250:	|  |         movea.l 148(sp),a0
    b254:	|  |         move.l 56(a0),d0
    b258:	|  |         move.l d0,d0
    b25a:	|  |         movea.w d0,a0
    b25c:	|  |         move.l 156(sp),-(sp)
    b260:	|  |         move.l a0,-(sp)
    b262:	|  |         jsr a9c <putSigned>
    b268:	|  |         addq.l #8,sp
		putSigned (me -> walkToPoly, fp);
    b26a:	|  |         movea.l 148(sp),a0
    b26e:	|  |         move.l 60(a0),d0
    b272:	|  |         move.l d0,d0
    b274:	|  |         movea.w d0,a0
    b276:	|  |         move.l 156(sp),-(sp)
    b27a:	|  |         move.l a0,-(sp)
    b27c:	|  |         jsr a9c <putSigned>
    b282:	|  |         addq.l #8,sp

		FPutC (fp, me -> r);
    b284:	|  |         move.l 156(sp),64(sp)
    b28a:	|  |         movea.l 148(sp),a0
    b28e:	|  |         move.b 126(a0),d0
    b292:	|  |         move.b d0,d0
    b294:	|  |         andi.l #255,d0
    b29a:	|  |         move.l d0,60(sp)
    b29e:	|  |         move.l 1a7ac <DOSBase>,d0
    b2a4:	|  |         movea.l d0,a6
    b2a6:	|  |         move.l 64(sp),d1
    b2aa:	|  |         move.l 60(sp),d2
    b2ae:	|  |         jsr -312(a6)
    b2b2:	|  |         move.l d0,56(sp)
		FPutC (fp, me -> g);
    b2b6:	|  |         move.l 156(sp),52(sp)
    b2bc:	|  |         movea.l 148(sp),a0
    b2c0:	|  |         move.b 127(a0),d0
    b2c4:	|  |         move.b d0,d0
    b2c6:	|  |         andi.l #255,d0
    b2cc:	|  |         move.l d0,48(sp)
    b2d0:	|  |         move.l 1a7ac <DOSBase>,d0
    b2d6:	|  |         movea.l d0,a6
    b2d8:	|  |         move.l 52(sp),d1
    b2dc:	|  |         move.l 48(sp),d2
    b2e0:	|  |         jsr -312(a6)
    b2e4:	|  |         move.l d0,44(sp)
		FPutC (fp, me -> b);
    b2e8:	|  |         move.l 156(sp),40(sp)
    b2ee:	|  |         movea.l 148(sp),a0
    b2f2:	|  |         move.b 128(a0),d0
    b2f6:	|  |         move.b d0,d0
    b2f8:	|  |         andi.l #255,d0
    b2fe:	|  |         move.l d0,36(sp)
    b302:	|  |         move.l 1a7ac <DOSBase>,d0
    b308:	|  |         movea.l d0,a6
    b30a:	|  |         move.l 40(sp),d1
    b30e:	|  |         move.l 36(sp),d2
    b312:	|  |         jsr -312(a6)
    b316:	|  |         move.l d0,32(sp)
		FPutC (fp, me -> colourmix);
    b31a:	|  |         move.l 156(sp),28(sp)
    b320:	|  |         movea.l 148(sp),a0
    b324:	|  |         move.b 129(a0),d0
    b328:	|  |         move.b d0,d0
    b32a:	|  |         andi.l #255,d0
    b330:	|  |         move.l d0,24(sp)
    b334:	|  |         move.l 1a7ac <DOSBase>,d0
    b33a:	|  |         movea.l d0,a6
    b33c:	|  |         move.l 28(sp),d1
    b340:	|  |         move.l 24(sp),d2
    b344:	|  |         jsr -312(a6)
    b348:	|  |         move.l d0,20(sp)
		FPutC (fp, me -> transparency);
    b34c:	|  |         move.l 156(sp),16(sp)
    b352:	|  |         movea.l 148(sp),a0
    b356:	|  |         move.b 130(a0),d0
    b35a:	|  |         move.b d0,d0
    b35c:	|  |         andi.l #255,d0
    b362:	|  |         move.l d0,12(sp)
    b366:	|  |         move.l 1a7ac <DOSBase>,d0
    b36c:	|  |         movea.l d0,a6
    b36e:	|  |         move.l 16(sp),d1
    b372:	|  |         move.l 12(sp),d2
    b376:	|  |         jsr -312(a6)
    b37a:	|  |         move.l d0,8(sp)
		
		saveObjectRef (me -> thisType, fp);
    b37e:	|  |         movea.l 148(sp),a0
    b382:	|  |         move.l 114(a0),d0
    b386:	|  |         move.l 156(sp),-(sp)
    b38a:	|  |         move.l d0,-(sp)
    b38c:	|  |         jsr d79e <saveObjectRef>
    b392:	|  |         addq.l #8,sp

		me = me -> next;
    b394:	|  |         movea.l 148(sp),a0
    b398:	|  |         move.l 36(a0),148(sp)
	for (a = 0; a < countPeople; a ++) {
    b39e:	|  |         addq.l #1,140(sp)
    b3a2:	|  \-------> movea.l 140(sp),a0
    b3a6:	|            cmpa.l 144(sp),a0
    b3aa:	\----------- blt.w af4e <savePeople+0x76>
	}
	return TRUE;
    b3ae:	             moveq #1,d0
}
    b3b0:	             move.l (sp)+,d2
    b3b2:	             movea.l (sp)+,a6
    b3b4:	             lea 144(sp),sp
    b3b8:	             rts

0000b3ba <setBankFile>:

void setBankFile (struct personaAnimation * newP, struct loadedSpriteBank * sB) { 
	newP -> theSprites = sB; 
    b3ba:	movea.l 4(sp),a0
    b3be:	move.l 8(sp),(a0)
}
    b3c2:	nop
    b3c4:	rts

0000b3c6 <setDrawMode>:


void setDrawMode (int h, int ob) {
    b3c6:	       subq.l #4,sp
	struct onScreenPerson * moveMe = findPerson (ob);
    b3c8:	       move.l 12(sp),-(sp)
    b3cc:	       jsr a454 <findPerson>
    b3d2:	       addq.l #4,sp
    b3d4:	       move.l d0,(sp)
	if (! moveMe) return;
    b3d6:	/----- beq.s b3ea <setDrawMode+0x24>
		
	setMyDrawMode (moveMe, h);
    b3d8:	|      move.l 8(sp),-(sp)
    b3dc:	|      move.l 4(sp),-(sp)
    b3e0:	|      jsr b3f0 <setMyDrawMode>
    b3e6:	|      addq.l #8,sp
    b3e8:	|  /-- bra.s b3ec <setDrawMode+0x26>
	if (! moveMe) return;
    b3ea:	\--|-> nop
}
    b3ec:	   \-> addq.l #4,sp
    b3ee:	       rts

0000b3f0 <setMyDrawMode>:
	drawModeInvisible,
	numDrawModes
};

void setMyDrawMode (struct onScreenPerson *moveMe, int h) {
	switch (h) {
    b3f0:	       moveq #19,d0
    b3f2:	       cmp.l 8(sp),d0
    b3f6:	/----- bcs.w b8ce <setMyDrawMode+0x4de>
    b3fa:	|      move.l 8(sp),d0
    b3fe:	|      add.l d0,d0
    b400:	|      movea.l d0,a0
    b402:	|      adda.l #46094,a0
    b408:	|      move.w (a0),d0
    b40a:	|      jmp (b40e <setMyDrawMode+0x1e>,pc,d0.w)
    b40e:	|      .short 0x04c0
    b410:	|      ori.l #6684712,-(a4)
    b416:	|      btst d0,-(a0)
    b418:	|      bchg d0,(a6)+
    b41a:	|      bclr d0,(a4)+
    b41c:	|      bset d0,(a2)+
    b41e:	|      andi.b #84,(a6)
    b422:	|      andi.l #55575312,(a2)
    b428:	|      .short 0x02d0
    b42a:	|      bclr d1,(a0)
    b42c:	|      .short 0x044a
    b42e:	|      .short 0x040c
    b430:	|      movep.l d1,1158(a6)
    b434:	|      .short 0x00e2
		case drawModeTransparent3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b436:	|      movea.l 4(sp),a0
    b43a:	|      clr.b 128(a0)
    b43e:	|      movea.l 4(sp),a0
    b442:	|      move.b 128(a0),d0
    b446:	|      movea.l 4(sp),a0
    b44a:	|      move.b d0,127(a0)
    b44e:	|      movea.l 4(sp),a0
    b452:	|      move.b 127(a0),d0
    b456:	|      movea.l 4(sp),a0
    b45a:	|      move.b d0,126(a0)
			moveMe->colourmix = 0;
    b45e:	|      movea.l 4(sp),a0
    b462:	|      clr.b 129(a0)
			moveMe->transparency = 64;
    b466:	|      movea.l 4(sp),a0
    b46a:	|      move.b #64,130(a0)
			break;
    b470:	|  /-- bra.w b908 <setMyDrawMode+0x518>
		case drawModeTransparent2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b474:	|  |   movea.l 4(sp),a0
    b478:	|  |   clr.b 128(a0)
    b47c:	|  |   movea.l 4(sp),a0
    b480:	|  |   move.b 128(a0),d0
    b484:	|  |   movea.l 4(sp),a0
    b488:	|  |   move.b d0,127(a0)
    b48c:	|  |   movea.l 4(sp),a0
    b490:	|  |   move.b 127(a0),d0
    b494:	|  |   movea.l 4(sp),a0
    b498:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    b49c:	|  |   movea.l 4(sp),a0
    b4a0:	|  |   clr.b 129(a0)
			moveMe->transparency = 128;
    b4a4:	|  |   movea.l 4(sp),a0
    b4a8:	|  |   move.b #-128,130(a0)
			break;
    b4ae:	|  +-- bra.w b908 <setMyDrawMode+0x518>
		case drawModeTransparent1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b4b2:	|  |   movea.l 4(sp),a0
    b4b6:	|  |   clr.b 128(a0)
    b4ba:	|  |   movea.l 4(sp),a0
    b4be:	|  |   move.b 128(a0),d0
    b4c2:	|  |   movea.l 4(sp),a0
    b4c6:	|  |   move.b d0,127(a0)
    b4ca:	|  |   movea.l 4(sp),a0
    b4ce:	|  |   move.b 127(a0),d0
    b4d2:	|  |   movea.l 4(sp),a0
    b4d6:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    b4da:	|  |   movea.l 4(sp),a0
    b4de:	|  |   clr.b 129(a0)
			moveMe->transparency = 192;
    b4e2:	|  |   movea.l 4(sp),a0
    b4e6:	|  |   move.b #-64,130(a0)
			break;
    b4ec:	|  +-- bra.w b908 <setMyDrawMode+0x518>
		case drawModeInvisible:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b4f0:	|  |   movea.l 4(sp),a0
    b4f4:	|  |   clr.b 128(a0)
    b4f8:	|  |   movea.l 4(sp),a0
    b4fc:	|  |   move.b 128(a0),d0
    b500:	|  |   movea.l 4(sp),a0
    b504:	|  |   move.b d0,127(a0)
    b508:	|  |   movea.l 4(sp),a0
    b50c:	|  |   move.b 127(a0),d0
    b510:	|  |   movea.l 4(sp),a0
    b514:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    b518:	|  |   movea.l 4(sp),a0
    b51c:	|  |   clr.b 129(a0)
			moveMe->transparency = 254;
    b520:	|  |   movea.l 4(sp),a0
    b524:	|  |   move.b #-2,130(a0)
			break;
    b52a:	|  +-- bra.w b908 <setMyDrawMode+0x518>
		case drawModeDark1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b52e:	|  |   movea.l 4(sp),a0
    b532:	|  |   clr.b 128(a0)
    b536:	|  |   movea.l 4(sp),a0
    b53a:	|  |   move.b 128(a0),d0
    b53e:	|  |   movea.l 4(sp),a0
    b542:	|  |   move.b d0,127(a0)
    b546:	|  |   movea.l 4(sp),a0
    b54a:	|  |   move.b 127(a0),d0
    b54e:	|  |   movea.l 4(sp),a0
    b552:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    b556:	|  |   movea.l 4(sp),a0
    b55a:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    b560:	|  |   movea.l 4(sp),a0
    b564:	|  |   clr.b 130(a0)
			break;
    b568:	|  +-- bra.w b908 <setMyDrawMode+0x518>
		case drawModeDark2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b56c:	|  |   movea.l 4(sp),a0
    b570:	|  |   clr.b 128(a0)
    b574:	|  |   movea.l 4(sp),a0
    b578:	|  |   move.b 128(a0),d0
    b57c:	|  |   movea.l 4(sp),a0
    b580:	|  |   move.b d0,127(a0)
    b584:	|  |   movea.l 4(sp),a0
    b588:	|  |   move.b 127(a0),d0
    b58c:	|  |   movea.l 4(sp),a0
    b590:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    b594:	|  |   movea.l 4(sp),a0
    b598:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    b59e:	|  |   movea.l 4(sp),a0
    b5a2:	|  |   clr.b 130(a0)
			break;
    b5a6:	|  +-- bra.w b908 <setMyDrawMode+0x518>
		case drawModeDark3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b5aa:	|  |   movea.l 4(sp),a0
    b5ae:	|  |   clr.b 128(a0)
    b5b2:	|  |   movea.l 4(sp),a0
    b5b6:	|  |   move.b 128(a0),d0
    b5ba:	|  |   movea.l 4(sp),a0
    b5be:	|  |   move.b d0,127(a0)
    b5c2:	|  |   movea.l 4(sp),a0
    b5c6:	|  |   move.b 127(a0),d0
    b5ca:	|  |   movea.l 4(sp),a0
    b5ce:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    b5d2:	|  |   movea.l 4(sp),a0
    b5d6:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    b5dc:	|  |   movea.l 4(sp),a0
    b5e0:	|  |   clr.b 130(a0)
			break;
    b5e4:	|  +-- bra.w b908 <setMyDrawMode+0x518>
		case drawModeBlack:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b5e8:	|  |   movea.l 4(sp),a0
    b5ec:	|  |   clr.b 128(a0)
    b5f0:	|  |   movea.l 4(sp),a0
    b5f4:	|  |   move.b 128(a0),d0
    b5f8:	|  |   movea.l 4(sp),a0
    b5fc:	|  |   move.b d0,127(a0)
    b600:	|  |   movea.l 4(sp),a0
    b604:	|  |   move.b 127(a0),d0
    b608:	|  |   movea.l 4(sp),a0
    b60c:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b610:	|  |   movea.l 4(sp),a0
    b614:	|  |   st 129(a0)
			moveMe->transparency = 0;
    b618:	|  |   movea.l 4(sp),a0
    b61c:	|  |   clr.b 130(a0)
			break;
    b620:	|  +-- bra.w b908 <setMyDrawMode+0x518>
		case drawModeShadow1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b624:	|  |   movea.l 4(sp),a0
    b628:	|  |   clr.b 128(a0)
    b62c:	|  |   movea.l 4(sp),a0
    b630:	|  |   move.b 128(a0),d0
    b634:	|  |   movea.l 4(sp),a0
    b638:	|  |   move.b d0,127(a0)
    b63c:	|  |   movea.l 4(sp),a0
    b640:	|  |   move.b 127(a0),d0
    b644:	|  |   movea.l 4(sp),a0
    b648:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b64c:	|  |   movea.l 4(sp),a0
    b650:	|  |   st 129(a0)
			moveMe->transparency = 64;
    b654:	|  |   movea.l 4(sp),a0
    b658:	|  |   move.b #64,130(a0)
			break;
    b65e:	|  +-- bra.w b908 <setMyDrawMode+0x518>
		case drawModeShadow2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b662:	|  |   movea.l 4(sp),a0
    b666:	|  |   clr.b 128(a0)
    b66a:	|  |   movea.l 4(sp),a0
    b66e:	|  |   move.b 128(a0),d0
    b672:	|  |   movea.l 4(sp),a0
    b676:	|  |   move.b d0,127(a0)
    b67a:	|  |   movea.l 4(sp),a0
    b67e:	|  |   move.b 127(a0),d0
    b682:	|  |   movea.l 4(sp),a0
    b686:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b68a:	|  |   movea.l 4(sp),a0
    b68e:	|  |   st 129(a0)
			moveMe->transparency = 128;
    b692:	|  |   movea.l 4(sp),a0
    b696:	|  |   move.b #-128,130(a0)
			break;
    b69c:	|  +-- bra.w b908 <setMyDrawMode+0x518>
		case drawModeShadow3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b6a0:	|  |   movea.l 4(sp),a0
    b6a4:	|  |   clr.b 128(a0)
    b6a8:	|  |   movea.l 4(sp),a0
    b6ac:	|  |   move.b 128(a0),d0
    b6b0:	|  |   movea.l 4(sp),a0
    b6b4:	|  |   move.b d0,127(a0)
    b6b8:	|  |   movea.l 4(sp),a0
    b6bc:	|  |   move.b 127(a0),d0
    b6c0:	|  |   movea.l 4(sp),a0
    b6c4:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b6c8:	|  |   movea.l 4(sp),a0
    b6cc:	|  |   st 129(a0)
			moveMe->transparency = 192;
    b6d0:	|  |   movea.l 4(sp),a0
    b6d4:	|  |   move.b #-64,130(a0)
			break;
    b6da:	|  +-- bra.w b908 <setMyDrawMode+0x518>
		case drawModeFoggy3:
			moveMe->r = moveMe->g = moveMe->b = 128;
    b6de:	|  |   movea.l 4(sp),a0
    b6e2:	|  |   move.b #-128,128(a0)
    b6e8:	|  |   movea.l 4(sp),a0
    b6ec:	|  |   move.b 128(a0),d0
    b6f0:	|  |   movea.l 4(sp),a0
    b6f4:	|  |   move.b d0,127(a0)
    b6f8:	|  |   movea.l 4(sp),a0
    b6fc:	|  |   move.b 127(a0),d0
    b700:	|  |   movea.l 4(sp),a0
    b704:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    b708:	|  |   movea.l 4(sp),a0
    b70c:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    b712:	|  |   movea.l 4(sp),a0
    b716:	|  |   clr.b 130(a0)
			break;
    b71a:	|  +-- bra.w b908 <setMyDrawMode+0x518>
		case drawModeFoggy2:
			moveMe->r = moveMe->g = moveMe->b = 128;
    b71e:	|  |   movea.l 4(sp),a0
    b722:	|  |   move.b #-128,128(a0)
    b728:	|  |   movea.l 4(sp),a0
    b72c:	|  |   move.b 128(a0),d0
    b730:	|  |   movea.l 4(sp),a0
    b734:	|  |   move.b d0,127(a0)
    b738:	|  |   movea.l 4(sp),a0
    b73c:	|  |   move.b 127(a0),d0
    b740:	|  |   movea.l 4(sp),a0
    b744:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    b748:	|  |   movea.l 4(sp),a0
    b74c:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    b752:	|  |   movea.l 4(sp),a0
    b756:	|  |   clr.b 130(a0)
			break;
    b75a:	|  +-- bra.w b908 <setMyDrawMode+0x518>
		case drawModeFoggy1:
			moveMe->r = moveMe->g = moveMe->b = 128;
    b75e:	|  |   movea.l 4(sp),a0
    b762:	|  |   move.b #-128,128(a0)
    b768:	|  |   movea.l 4(sp),a0
    b76c:	|  |   move.b 128(a0),d0
    b770:	|  |   movea.l 4(sp),a0
    b774:	|  |   move.b d0,127(a0)
    b778:	|  |   movea.l 4(sp),a0
    b77c:	|  |   move.b 127(a0),d0
    b780:	|  |   movea.l 4(sp),a0
    b784:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    b788:	|  |   movea.l 4(sp),a0
    b78c:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    b792:	|  |   movea.l 4(sp),a0
    b796:	|  |   clr.b 130(a0)
			break;
    b79a:	|  +-- bra.w b908 <setMyDrawMode+0x518>
		case drawModeFoggy4:
			moveMe->r = moveMe->g = moveMe->b = 128;
    b79e:	|  |   movea.l 4(sp),a0
    b7a2:	|  |   move.b #-128,128(a0)
    b7a8:	|  |   movea.l 4(sp),a0
    b7ac:	|  |   move.b 128(a0),d0
    b7b0:	|  |   movea.l 4(sp),a0
    b7b4:	|  |   move.b d0,127(a0)
    b7b8:	|  |   movea.l 4(sp),a0
    b7bc:	|  |   move.b 127(a0),d0
    b7c0:	|  |   movea.l 4(sp),a0
    b7c4:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b7c8:	|  |   movea.l 4(sp),a0
    b7cc:	|  |   st 129(a0)
			moveMe->transparency = 0;
    b7d0:	|  |   movea.l 4(sp),a0
    b7d4:	|  |   clr.b 130(a0)
			break;
    b7d8:	|  +-- bra.w b908 <setMyDrawMode+0x518>
		case drawModeGlow3:
			moveMe->r = moveMe->g = moveMe->b = 255;
    b7dc:	|  |   movea.l 4(sp),a0
    b7e0:	|  |   st 128(a0)
    b7e4:	|  |   movea.l 4(sp),a0
    b7e8:	|  |   move.b 128(a0),d0
    b7ec:	|  |   movea.l 4(sp),a0
    b7f0:	|  |   move.b d0,127(a0)
    b7f4:	|  |   movea.l 4(sp),a0
    b7f8:	|  |   move.b 127(a0),d0
    b7fc:	|  |   movea.l 4(sp),a0
    b800:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    b804:	|  |   movea.l 4(sp),a0
    b808:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    b80e:	|  |   movea.l 4(sp),a0
    b812:	|  |   clr.b 130(a0)
			break;
    b816:	|  +-- bra.w b908 <setMyDrawMode+0x518>
		case drawModeGlow2:
			moveMe->r = moveMe->g = moveMe->b = 255;
    b81a:	|  |   movea.l 4(sp),a0
    b81e:	|  |   st 128(a0)
    b822:	|  |   movea.l 4(sp),a0
    b826:	|  |   move.b 128(a0),d0
    b82a:	|  |   movea.l 4(sp),a0
    b82e:	|  |   move.b d0,127(a0)
    b832:	|  |   movea.l 4(sp),a0
    b836:	|  |   move.b 127(a0),d0
    b83a:	|  |   movea.l 4(sp),a0
    b83e:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    b842:	|  |   movea.l 4(sp),a0
    b846:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    b84c:	|  |   movea.l 4(sp),a0
    b850:	|  |   clr.b 130(a0)
			break;
    b854:	|  +-- bra.w b908 <setMyDrawMode+0x518>
		case drawModeGlow1:
			moveMe->r = moveMe->g = moveMe->b = 255;
    b858:	|  |   movea.l 4(sp),a0
    b85c:	|  |   st 128(a0)
    b860:	|  |   movea.l 4(sp),a0
    b864:	|  |   move.b 128(a0),d0
    b868:	|  |   movea.l 4(sp),a0
    b86c:	|  |   move.b d0,127(a0)
    b870:	|  |   movea.l 4(sp),a0
    b874:	|  |   move.b 127(a0),d0
    b878:	|  |   movea.l 4(sp),a0
    b87c:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    b880:	|  |   movea.l 4(sp),a0
    b884:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    b88a:	|  |   movea.l 4(sp),a0
    b88e:	|  |   clr.b 130(a0)
			break;
    b892:	|  +-- bra.s b908 <setMyDrawMode+0x518>
		case drawModeGlow4:
			moveMe->r = moveMe->g = moveMe->b = 255;
    b894:	|  |   movea.l 4(sp),a0
    b898:	|  |   st 128(a0)
    b89c:	|  |   movea.l 4(sp),a0
    b8a0:	|  |   move.b 128(a0),d0
    b8a4:	|  |   movea.l 4(sp),a0
    b8a8:	|  |   move.b d0,127(a0)
    b8ac:	|  |   movea.l 4(sp),a0
    b8b0:	|  |   move.b 127(a0),d0
    b8b4:	|  |   movea.l 4(sp),a0
    b8b8:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b8bc:	|  |   movea.l 4(sp),a0
    b8c0:	|  |   st 129(a0)
			moveMe->transparency = 0;
    b8c4:	|  |   movea.l 4(sp),a0
    b8c8:	|  |   clr.b 130(a0)
			break;
    b8cc:	|  +-- bra.s b908 <setMyDrawMode+0x518>
		default:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b8ce:	\--|-> movea.l 4(sp),a0
    b8d2:	   |   clr.b 128(a0)
    b8d6:	   |   movea.l 4(sp),a0
    b8da:	   |   move.b 128(a0),d0
    b8de:	   |   movea.l 4(sp),a0
    b8e2:	   |   move.b d0,127(a0)
    b8e6:	   |   movea.l 4(sp),a0
    b8ea:	   |   move.b 127(a0),d0
    b8ee:	   |   movea.l 4(sp),a0
    b8f2:	   |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    b8f6:	   |   movea.l 4(sp),a0
    b8fa:	   |   clr.b 129(a0)
			moveMe->transparency = 0;
    b8fe:	   |   movea.l 4(sp),a0
    b902:	   |   clr.b 130(a0)
			break;
    b906:	   |   nop
	}
}
    b908:	   \-> nop
    b90a:	       rts

0000b90c <shufflePeople>:

void shufflePeople () {
    b90c:	             lea -20(sp),sp
	struct onScreenPerson ** thisReference = &allPeople;
    b910:	             move.l #108552,16(sp)
	struct onScreenPerson * A, * B;

	if (!allPeople) return;
    b918:	             move.l 1a808 <allPeople>,d0
    b91e:	/----------- beq.w b9f4 <shufflePeople+0xe8>

	while ((*thisReference)->next) {
    b922:	|     /----- bra.w b9e4 <shufflePeople+0xd8>
		float y1 = (*thisReference)->y;
    b926:	|  /--|----> movea.l 16(sp),a0
    b92a:	|  |  |      movea.l (a0),a0
    b92c:	|  |  |      move.l 4(a0),12(sp)
		if ((*thisReference)->extra & EXTRA_FRONT) y1 += 1000;
    b932:	|  |  |      movea.l 16(sp),a0
    b936:	|  |  |      movea.l (a0),a0
    b938:	|  |  |      move.l 118(a0),d0
    b93c:	|  |  |      moveq #1,d1
    b93e:	|  |  |      and.l d1,d0
    b940:	|  |  |  /-- beq.s b958 <shufflePeople+0x4c>
    b942:	|  |  |  |   move.l #1148846080,-(sp)
    b948:	|  |  |  |   move.l 16(sp),-(sp)
    b94c:	|  |  |  |   jsr 1722a <__addsf3>
    b952:	|  |  |  |   addq.l #8,sp
    b954:	|  |  |  |   move.l d0,12(sp)

		float y2 = (*thisReference)->next->y;
    b958:	|  |  |  \-> movea.l 16(sp),a0
    b95c:	|  |  |      movea.l (a0),a0
    b95e:	|  |  |      movea.l 36(a0),a0
    b962:	|  |  |      move.l 4(a0),8(sp)
		if ((*thisReference)->next->extra & EXTRA_FRONT) y2 += 1000;
    b968:	|  |  |      movea.l 16(sp),a0
    b96c:	|  |  |      movea.l (a0),a0
    b96e:	|  |  |      movea.l 36(a0),a0
    b972:	|  |  |      move.l 118(a0),d0
    b976:	|  |  |      moveq #1,d1
    b978:	|  |  |      and.l d1,d0
    b97a:	|  |  |  /-- beq.s b992 <shufflePeople+0x86>
    b97c:	|  |  |  |   move.l #1148846080,-(sp)
    b982:	|  |  |  |   move.l 12(sp),-(sp)
    b986:	|  |  |  |   jsr 1722a <__addsf3>
    b98c:	|  |  |  |   addq.l #8,sp
    b98e:	|  |  |  |   move.l d0,8(sp)

		if (y1 > y2) {
    b992:	|  |  |  \-> move.l 8(sp),-(sp)
    b996:	|  |  |      move.l 16(sp),-(sp)
    b99a:	|  |  |      jsr 175da <__gtsf2>
    b9a0:	|  |  |      addq.l #8,sp
    b9a2:	|  |  |      tst.l d0
    b9a4:	|  |  |  /-- ble.s b9d6 <shufflePeople+0xca>
			A = (*thisReference);
    b9a6:	|  |  |  |   movea.l 16(sp),a0
    b9aa:	|  |  |  |   move.l (a0),4(sp)
			B = (*thisReference)->next;
    b9ae:	|  |  |  |   movea.l 16(sp),a0
    b9b2:	|  |  |  |   movea.l (a0),a0
    b9b4:	|  |  |  |   move.l 36(a0),(sp)
			A->next = B->next;
    b9b8:	|  |  |  |   movea.l (sp),a0
    b9ba:	|  |  |  |   move.l 36(a0),d0
    b9be:	|  |  |  |   movea.l 4(sp),a0
    b9c2:	|  |  |  |   move.l d0,36(a0)
			B->next = A;
    b9c6:	|  |  |  |   movea.l (sp),a0
    b9c8:	|  |  |  |   move.l 4(sp),36(a0)
			(*thisReference) = B;
    b9ce:	|  |  |  |   movea.l 16(sp),a0
    b9d2:	|  |  |  |   move.l (sp),(a0)
    b9d4:	|  |  +--|-- bra.s b9e4 <shufflePeople+0xd8>
		} else {
			thisReference = &((*thisReference)->next);
    b9d6:	|  |  |  \-> movea.l 16(sp),a0
    b9da:	|  |  |      move.l (a0),d0
    b9dc:	|  |  |      moveq #36,d1
    b9de:	|  |  |      add.l d0,d1
    b9e0:	|  |  |      move.l d1,16(sp)
	while ((*thisReference)->next) {
    b9e4:	|  |  \----> movea.l 16(sp),a0
    b9e8:	|  |         movea.l (a0),a0
    b9ea:	|  |         move.l 36(a0),d0
    b9ee:	|  \-------- bne.w b926 <shufflePeople+0x1a>
    b9f2:	|        /-- bra.s b9f6 <shufflePeople+0xea>
	if (!allPeople) return;
    b9f4:	\--------|-> nop
		}
	}
}
    b9f6:	         \-> lea 20(sp),sp
    b9fa:	             rts

0000b9fc <setCharacterWalkSpeed>:


BOOL setCharacterWalkSpeed (int f, int objNum) {
    b9fc:	       subq.l #4,sp
	if (f <= 0) return FALSE;
    b9fe:	       tst.l 8(sp)
    ba02:	   /-- bgt.s ba08 <setCharacterWalkSpeed+0xc>
    ba04:	   |   clr.w d0
    ba06:	/--|-- bra.s ba26 <setCharacterWalkSpeed+0x2a>
	struct onScreenPerson * moveMe = findPerson (objNum);
    ba08:	|  \-> move.l 12(sp),-(sp)
    ba0c:	|      jsr a454 <findPerson>
    ba12:	|      addq.l #4,sp
    ba14:	|      move.l d0,(sp)
	if (! moveMe) return FALSE;
    ba16:	|  /-- bne.s ba1c <setCharacterWalkSpeed+0x20>
    ba18:	|  |   clr.w d0
    ba1a:	+--|-- bra.s ba26 <setCharacterWalkSpeed+0x2a>
	moveMe -> walkSpeed = f;
    ba1c:	|  \-> movea.l (sp),a0
    ba1e:	|      move.l 8(sp),28(a0)
	return TRUE;
    ba24:	|      moveq #1,d0
}
    ba26:	\----> addq.l #4,sp
    ba28:	       rts

0000ba2a <setPersonExtra>:

BOOL setPersonExtra (int thisNum, int extra) {
    ba2a:	       subq.l #4,sp
    struct onScreenPerson * thisPerson = findPerson(thisNum);
    ba2c:	       move.l 8(sp),-(sp)
    ba30:	       jsr a454 <findPerson>
    ba36:	       addq.l #4,sp
    ba38:	       move.l d0,(sp)
    if (thisPerson) {
    ba3a:	/----- beq.s ba5a <setPersonExtra+0x30>
        thisPerson -> extra = extra;
    ba3c:	|      movea.l (sp),a0
    ba3e:	|      move.l 12(sp),118(a0)
        if (extra & EXTRA_NOSCALE) thisPerson -> scale = 1;
    ba44:	|      moveq #2,d0
    ba46:	|      and.l 12(sp),d0
    ba4a:	|  /-- beq.s ba56 <setPersonExtra+0x2c>
    ba4c:	|  |   movea.l (sp),a0
    ba4e:	|  |   move.l #1065353216,32(a0)
        return TRUE;
    ba56:	|  \-> moveq #1,d0
    ba58:	|  /-- bra.s ba5c <setPersonExtra+0x32>
    }
    return FALSE;
    ba5a:	\--|-> clr.w d0
}
    ba5c:	   \-> addq.l #4,sp
    ba5e:	       rts

0000ba60 <setScale>:


void setScale (short int h, short int d) {
    ba60:	subq.l #4,sp
    ba62:	move.l 8(sp),d1
    ba66:	move.l 12(sp),d0
    ba6a:	move.w d1,d1
    ba6c:	move.w d1,2(sp)
    ba70:	move.w d0,d0
    ba72:	move.w d0,(sp)
	scaleHorizon = h;
    ba74:	move.w 2(sp),1a136 <scaleHorizon>
	scaleDivide = d;
    ba7c:	move.w (sp),1a138 <scaleDivide>
}
    ba82:	nop
    ba84:	addq.l #4,sp
    ba86:	rts

0000ba88 <setShown>:

void setShown (BOOL h, int ob) {
    ba88:	    subq.l #8,sp
    ba8a:	    move.l 12(sp),d0
    ba8e:	    move.w d0,d0
    ba90:	    move.w d0,2(sp)
	struct onScreenPerson * moveMe = findPerson (ob);
    ba94:	    move.l 16(sp),-(sp)
    ba98:	    jsr a454 <findPerson>
    ba9e:	    addq.l #4,sp
    baa0:	    move.l d0,4(sp)
	if (moveMe) moveMe -> show = h;
    baa4:	/-- beq.s bab0 <setShown+0x28>
    baa6:	|   movea.l 4(sp),a0
    baaa:	|   move.w 2(sp),104(a0)
}
    bab0:	\-> nop
    bab2:	    addq.l #8,sp
    bab4:	    rts

0000bab6 <spinStep>:

void spinStep (struct onScreenPerson * thisPerson) {
    bab6:	       subq.l #8,sp
    bab8:	       move.l d2,-(sp)
	int diff = (thisPerson->angle + 360) - thisPerson->wantAngle;
    baba:	       movea.l 16(sp),a0
    babe:	       move.l 92(a0),d0
    bac2:	       move.l d0,d1
    bac4:	       addi.l #360,d1
    baca:	       movea.l 16(sp),a0
    bace:	       move.l 96(a0),d0
    bad2:	       move.l d1,d2
    bad4:	       sub.l d0,d2
    bad6:	       move.l d2,8(sp)
	int eachSlice = thisPerson->spinSpeed ? thisPerson->spinSpeed : (360 / thisPerson->myPersona->numDirections);
    bada:	       movea.l 16(sp),a0
    bade:	       move.l 122(a0),d0
    bae2:	   /-- beq.s baee <spinStep+0x38>
    bae4:	   |   movea.l 16(sp),a0
    bae8:	   |   move.l 122(a0),d0
    baec:	/--|-- bra.s bb08 <spinStep+0x52>
    baee:	|  \-> movea.l 16(sp),a0
    baf2:	|      movea.l 80(a0),a0
    baf6:	|      move.l 4(a0),d0
    bafa:	|      move.l d0,-(sp)
    bafc:	|      pea 168 <decodeFilename+0x50>
    bb00:	|      jsr 17a46 <__divsi3>
    bb06:	|      addq.l #8,sp
    bb08:	\----> move.l d0,4(sp)
	while (diff > 180) {
    bb0c:	   /-- bra.s bb16 <spinStep+0x60>
		diff -= 360;
    bb0e:	/--|-> addi.l #-360,8(sp)
	while (diff > 180) {
    bb16:	|  \-> cmpi.l #180,8(sp)
    bb1e:	\----- bgt.s bb0e <spinStep+0x58>
	}

	if (diff >= eachSlice) {
    bb20:	       move.l 8(sp),d0
    bb24:	       cmp.l 4(sp),d0
    bb28:	   /-- blt.s bb46 <spinStep+0x90>
		turnMeAngle(thisPerson, thisPerson->angle - eachSlice);
    bb2a:	   |   movea.l 16(sp),a0
    bb2e:	   |   move.l 92(a0),d0
    bb32:	   |   sub.l 4(sp),d0
    bb36:	   |   move.l d0,-(sp)
    bb38:	   |   move.l 20(sp),-(sp)
    bb3c:	   |   jsr bc26 <turnMeAngle>
    bb42:	   |   addq.l #8,sp
		turnMeAngle(thisPerson, thisPerson->angle + eachSlice);
	} else {
		turnMeAngle(thisPerson, thisPerson->wantAngle);
		thisPerson->spinning = FALSE;
	}
}
    bb44:	/--|-- bra.s bb8c <spinStep+0xd6>
	} else if (diff <= -eachSlice) {
    bb46:	|  \-> move.l 4(sp),d0
    bb4a:	|      neg.l d0
    bb4c:	|      cmp.l 8(sp),d0
    bb50:	|  /-- blt.s bb6e <spinStep+0xb8>
		turnMeAngle(thisPerson, thisPerson->angle + eachSlice);
    bb52:	|  |   movea.l 16(sp),a0
    bb56:	|  |   move.l 92(a0),d0
    bb5a:	|  |   add.l 4(sp),d0
    bb5e:	|  |   move.l d0,-(sp)
    bb60:	|  |   move.l 20(sp),-(sp)
    bb64:	|  |   jsr bc26 <turnMeAngle>
    bb6a:	|  |   addq.l #8,sp
}
    bb6c:	+--|-- bra.s bb8c <spinStep+0xd6>
		turnMeAngle(thisPerson, thisPerson->wantAngle);
    bb6e:	|  \-> movea.l 16(sp),a0
    bb72:	|      move.l 96(a0),d0
    bb76:	|      move.l d0,-(sp)
    bb78:	|      move.l 20(sp),-(sp)
    bb7c:	|      jsr bc26 <turnMeAngle>
    bb82:	|      addq.l #8,sp
		thisPerson->spinning = FALSE;
    bb84:	|      movea.l 16(sp),a0
    bb88:	|      clr.w 66(a0)
}
    bb8c:	\----> nop
    bb8e:	       move.l (sp)+,d2
    bb90:	       addq.l #8,sp
    bb92:	       rts

0000bb94 <stopPerson>:


BOOL stopPerson (int o) {
    bb94:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(o);
    bb96:	       move.l 8(sp),-(sp)
    bb9a:	       jsr a454 <findPerson>
    bba0:	       addq.l #4,sp
    bba2:	       move.l d0,(sp)
    if (moveMe)
    bba4:	/----- beq.s bbe2 <stopPerson+0x4e>
        if (moveMe -> continueAfterWalking) {
    bba6:	|      movea.l (sp),a0
    bba8:	|      move.l 68(a0),d0
    bbac:	+----- beq.s bbe2 <stopPerson+0x4e>
            abortFunction(moveMe -> continueAfterWalking);
    bbae:	|      movea.l (sp),a0
    bbb0:	|      move.l 68(a0),d0
    bbb4:	|      move.l d0,-(sp)
    bbb6:	|      jsr 44d2 <abortFunction>
    bbbc:	|      addq.l #4,sp
            moveMe -> continueAfterWalking = NULL;
    bbbe:	|      movea.l (sp),a0
    bbc0:	|      clr.l 68(a0)
            moveMe -> walking = FALSE;
    bbc4:	|      movea.l (sp),a0
    bbc6:	|      clr.w 64(a0)
            moveMe -> spinning = FALSE;
    bbca:	|      movea.l (sp),a0
    bbcc:	|      clr.w 66(a0)
            setFrames(moveMe, ANI_STAND);
    bbd0:	|      clr.l -(sp)
    bbd2:	|      move.l 4(sp),-(sp)
    bbd6:	|      jsr 7f2a <setFrames>
    bbdc:	|      addq.l #8,sp
            return TRUE;
    bbde:	|      moveq #1,d0
    bbe0:	|  /-- bra.s bbe4 <stopPerson+0x50>
        }
    return FALSE;
    bbe2:	\--|-> clr.w d0
}
    bbe4:	   \-> addq.l #4,sp
    bbe6:	       rts

0000bbe8 <timeForAnim>:


int timeForAnim (struct personaAnimation * fram) {
    bbe8:	       subq.l #8,sp
	int total = 0;
    bbea:	       clr.l 4(sp)
	for (int a = 0; a < fram -> numFrames; a ++) {
    bbee:	       clr.l (sp)
    bbf0:	   /-- bra.s bc12 <timeForAnim+0x2a>
		total += fram -> frames[a].howMany;
    bbf2:	/--|-> movea.l 12(sp),a0
    bbf6:	|  |   movea.l 4(a0),a0
    bbfa:	|  |   move.l (sp),d1
    bbfc:	|  |   move.l d1,d0
    bbfe:	|  |   add.l d0,d0
    bc00:	|  |   add.l d1,d0
    bc02:	|  |   add.l d0,d0
    bc04:	|  |   add.l d0,d0
    bc06:	|  |   adda.l d0,a0
    bc08:	|  |   move.l 4(a0),d0
    bc0c:	|  |   add.l d0,4(sp)
	for (int a = 0; a < fram -> numFrames; a ++) {
    bc10:	|  |   addq.l #1,(sp)
    bc12:	|  \-> movea.l 12(sp),a0
    bc16:	|      move.l 8(a0),d0
    bc1a:	|      cmp.l (sp),d0
    bc1c:	\----- bgt.s bbf2 <timeForAnim+0xa>
	}
	return total;
    bc1e:	       move.l 4(sp),d0
}
    bc22:	       addq.l #8,sp
    bc24:	       rts

0000bc26 <turnMeAngle>:

void turnMeAngle (struct onScreenPerson * thisPerson, int direc) {
    bc26:	       subq.l #4,sp
	int d = thisPerson -> myPersona -> numDirections;
    bc28:	       movea.l 8(sp),a0
    bc2c:	       movea.l 80(a0),a0
    bc30:	       move.l 4(a0),(sp)
	thisPerson -> angle = direc;
    bc34:	       movea.l 8(sp),a0
    bc38:	       move.l 12(sp),92(a0)
	direc += (180 / d) + 180 + thisPerson -> angleOffset;
    bc3e:	       move.l (sp),-(sp)
    bc40:	       pea b4 <_start+0xb4>
    bc44:	       jsr 17a46 <__divsi3>
    bc4a:	       addq.l #8,sp
    bc4c:	       move.l d0,d1
    bc4e:	       addi.l #180,d1
    bc54:	       movea.l 8(sp),a0
    bc58:	       move.l 100(a0),d0
    bc5c:	       add.l d1,d0
    bc5e:	       add.l d0,12(sp)
	while (direc >= 360) direc -= 360;
    bc62:	   /-- bra.s bc6c <turnMeAngle+0x46>
    bc64:	/--|-> addi.l #-360,12(sp)
    bc6c:	|  \-> cmpi.l #359,12(sp)
    bc74:	\----- bgt.s bc64 <turnMeAngle+0x3e>
	thisPerson -> direction = (direc * d) / 360;
    bc76:	       move.l (sp),-(sp)
    bc78:	       move.l 16(sp),-(sp)
    bc7c:	       jsr 179c8 <__mulsi3>
    bc82:	       addq.l #8,sp
    bc84:	       pea 168 <decodeFilename+0x50>
    bc88:	       move.l d0,-(sp)
    bc8a:	       jsr 17a46 <__divsi3>
    bc90:	       addq.l #8,sp
    bc92:	       movea.l 8(sp),a0
    bc96:	       move.l d0,106(a0)
}
    bc9a:	       nop
    bc9c:	       addq.l #4,sp
    bc9e:	       rts

0000bca0 <turnPersonToFace>:

BOOL turnPersonToFace (int thisNum, int direc) {
    bca0:	          subq.l #4,sp
    struct onScreenPerson * thisPerson = findPerson(thisNum);
    bca2:	          move.l 8(sp),-(sp)
    bca6:	          jsr a454 <findPerson>
    bcac:	          addq.l #4,sp
    bcae:	          move.l d0,(sp)
    if (thisPerson) {
    bcb0:	/-------- beq.s bd10 <turnPersonToFace+0x70>
        if (thisPerson -> continueAfterWalking) abortFunction(thisPerson -> continueAfterWalking);
    bcb2:	|         movea.l (sp),a0
    bcb4:	|         move.l 68(a0),d0
    bcb8:	|     /-- beq.s bcca <turnPersonToFace+0x2a>
    bcba:	|     |   movea.l (sp),a0
    bcbc:	|     |   move.l 68(a0),d0
    bcc0:	|     |   move.l d0,-(sp)
    bcc2:	|     |   jsr 44d2 <abortFunction>
    bcc8:	|     |   addq.l #4,sp
        thisPerson -> continueAfterWalking = NULL;
    bcca:	|     \-> movea.l (sp),a0
    bccc:	|         clr.l 68(a0)
        thisPerson -> walking = FALSE;
    bcd0:	|         movea.l (sp),a0
    bcd2:	|         clr.w 64(a0)
        thisPerson -> spinning = FALSE;
    bcd6:	|         movea.l (sp),a0
    bcd8:	|         clr.w 66(a0)
        turnMeAngle(thisPerson, direc);
    bcdc:	|         move.l 12(sp),-(sp)
    bce0:	|         move.l 4(sp),-(sp)
    bce4:	|         jsr bc26 <turnMeAngle>
    bcea:	|         addq.l #8,sp
        setFrames(thisPerson, (thisPerson == speech->currentTalker) ? ANI_TALK : ANI_STAND);
    bcec:	|         movea.l 1a800 <speech>,a0
    bcf2:	|         move.l (a0),d0
    bcf4:	|         cmp.l (sp),d0
    bcf6:	|  /----- bne.s bcfc <turnPersonToFace+0x5c>
    bcf8:	|  |      moveq #2,d0
    bcfa:	|  |  /-- bra.s bcfe <turnPersonToFace+0x5e>
    bcfc:	|  \--|-> moveq #0,d0
    bcfe:	|     \-> move.l d0,-(sp)
    bd00:	|         move.l 4(sp),-(sp)
    bd04:	|         jsr 7f2a <setFrames>
    bd0a:	|         addq.l #8,sp
        return TRUE;
    bd0c:	|         moveq #1,d0
    bd0e:	|     /-- bra.s bd12 <turnPersonToFace+0x72>
    }
    return FALSE;
    bd10:	\-----|-> clr.w d0
}
    bd12:	      \-> addq.l #4,sp
    bd14:	          rts

0000bd16 <walkAllPeople>:

void walkAllPeople() {
    bd16:	             subq.l #4,sp
	struct onScreenPerson *thisPerson = allPeople;
    bd18:	             move.l 1a808 <allPeople>,(sp)

	while (thisPerson) {
    bd1e:	   /-------- bra.s bd8e <walkAllPeople+0x78>
		if (thisPerson->walking) {
    bd20:	/--|-------> movea.l (sp),a0
    bd22:	|  |         move.w 64(a0),d0
    bd26:	|  |     /-- beq.s bd3a <walkAllPeople+0x24>
			walkMe(thisPerson, TRUE);
    bd28:	|  |     |   pea 1 <_start+0x1>
    bd2c:	|  |     |   move.l 4(sp),-(sp)
    bd30:	|  |     |   jsr bd9a <walkMe>
    bd36:	|  |     |   addq.l #8,sp
    bd38:	|  |  /--|-- bra.s bd5a <walkAllPeople+0x44>
		} else if (thisPerson->spinning) {
    bd3a:	|  |  |  \-> movea.l (sp),a0
    bd3c:	|  |  |      move.w 66(a0),d0
    bd40:	|  |  +----- beq.s bd5a <walkAllPeople+0x44>
			spinStep(thisPerson);
    bd42:	|  |  |      move.l (sp),-(sp)
    bd44:	|  |  |      jsr bab6 <spinStep>
    bd4a:	|  |  |      addq.l #4,sp
			setFrames(thisPerson, ANI_STAND);
    bd4c:	|  |  |      clr.l -(sp)
    bd4e:	|  |  |      move.l 4(sp),-(sp)
    bd52:	|  |  |      jsr 7f2a <setFrames>
    bd58:	|  |  |      addq.l #8,sp
		}
		if ((!thisPerson->walking) && (!thisPerson->spinning) && thisPerson->continueAfterWalking) {
    bd5a:	|  |  \----> movea.l (sp),a0
    bd5c:	|  |         move.w 64(a0),d0
    bd60:	|  |     /-- bne.s bd88 <walkAllPeople+0x72>
    bd62:	|  |     |   movea.l (sp),a0
    bd64:	|  |     |   move.w 66(a0),d0
    bd68:	|  |     +-- bne.s bd88 <walkAllPeople+0x72>
    bd6a:	|  |     |   movea.l (sp),a0
    bd6c:	|  |     |   move.l 68(a0),d0
    bd70:	|  |     +-- beq.s bd88 <walkAllPeople+0x72>
			restartFunction(thisPerson->continueAfterWalking);
    bd72:	|  |     |   movea.l (sp),a0
    bd74:	|  |     |   move.l 68(a0),d0
    bd78:	|  |     |   move.l d0,-(sp)
    bd7a:	|  |     |   jsr 6642 <restartFunction>
    bd80:	|  |     |   addq.l #4,sp
			thisPerson->continueAfterWalking = NULL;
    bd82:	|  |     |   movea.l (sp),a0
    bd84:	|  |     |   clr.l 68(a0)
		}
		thisPerson = thisPerson->next;
    bd88:	|  |     \-> movea.l (sp),a0
    bd8a:	|  |         move.l 36(a0),(sp)
	while (thisPerson) {
    bd8e:	|  \-------> tst.l (sp)
    bd90:	\----------- bne.s bd20 <walkAllPeople+0xa>
	}
}
    bd92:	             nop
    bd94:	             nop
    bd96:	             addq.l #4,sp
    bd98:	             rts

0000bd9a <walkMe>:

BOOL walkMe (struct onScreenPerson * thisPerson, BOOL move) {
    bd9a:	                lea -20(sp),sp
    bd9e:	                move.l d3,-(sp)
    bda0:	                move.l d2,-(sp)
    bda2:	                move.l 36(sp),d0
    bda6:	                move.w d0,d0
    bda8:	                move.w d0,10(sp)
	float xDiff, yDiff, maxDiff, s;

	if (move == -1) move = TRUE;  // Initialize default value for move
    bdac:	                cmpi.w #-1,10(sp)
    bdb2:	/-------------- bne.s bdba <walkMe+0x20>
    bdb4:	|               move.w #1,10(sp)

	for (;;) {
		xDiff = thisPerson->thisStepX - thisPerson->x;
    bdba:	>-------------> movea.l 32(sp),a0
    bdbe:	|               move.l 48(a0),d0
    bdc2:	|               move.l d0,-(sp)
    bdc4:	|               jsr 1746e <__floatsisf>
    bdca:	|               addq.l #4,sp
    bdcc:	|               move.l d0,d1
    bdce:	|               movea.l 32(sp),a0
    bdd2:	|               move.l (a0),d0
    bdd4:	|               move.l d0,-(sp)
    bdd6:	|               move.l d1,-(sp)
    bdd8:	|               jsr 17762 <__subsf3>
    bdde:	|               addq.l #8,sp
    bde0:	|               move.l d0,20(sp)
		yDiff = (thisPerson->thisStepY - thisPerson->y) * 2;
    bde4:	|               movea.l 32(sp),a0
    bde8:	|               move.l 52(a0),d0
    bdec:	|               move.l d0,-(sp)
    bdee:	|               jsr 1746e <__floatsisf>
    bdf4:	|               addq.l #4,sp
    bdf6:	|               move.l d0,d1
    bdf8:	|               movea.l 32(sp),a0
    bdfc:	|               move.l 4(a0),d0
    be00:	|               move.l d0,-(sp)
    be02:	|               move.l d1,-(sp)
    be04:	|               jsr 17762 <__subsf3>
    be0a:	|               addq.l #8,sp
    be0c:	|               move.l d0,-(sp)
    be0e:	|               move.l d0,-(sp)
    be10:	|               jsr 1722a <__addsf3>
    be16:	|               addq.l #8,sp
    be18:	|               move.l d0,16(sp)
		s = thisPerson->scale * thisPerson->walkSpeed;
    be1c:	|               movea.l 32(sp),a0
    be20:	|               move.l 32(a0),d2
    be24:	|               movea.l 32(sp),a0
    be28:	|               move.l 28(a0),d0
    be2c:	|               move.l d0,-(sp)
    be2e:	|               jsr 1746e <__floatsisf>
    be34:	|               addq.l #4,sp
    be36:	|               move.l d0,-(sp)
    be38:	|               move.l d2,-(sp)
    be3a:	|               jsr 17520 <__mulsf3>
    be40:	|               addq.l #8,sp
    be42:	|               move.l d0,24(sp)
		if (s < 0.2) s = 0.2;
    be46:	|               move.l 24(sp),-(sp)
    be4a:	|               jsr 17390 <__extendsfdf2>
    be50:	|               addq.l #4,sp
    be52:	|               move.l #-1717986918,-(sp)
    be58:	|               move.l #1070176665,-(sp)
    be5e:	|               move.l d1,-(sp)
    be60:	|               move.l d0,-(sp)
    be62:	|               jsr 17646 <__ltdf2>
    be68:	|               lea 16(sp),sp
    be6c:	|               tst.l d0
    be6e:	|           /-- bge.s be78 <walkMe+0xde>
    be70:	|           |   move.l #1045220557,24(sp)

		maxDiff = (TF_abs(xDiff) >= TF_abs(yDiff)) ? TF_abs(xDiff) : TF_abs(yDiff);
    be78:	|           \-> move.l 20(sp),-(sp)
    be7c:	|               jsr 17406 <__fixsfsi>
    be82:	|               addq.l #4,sp
    be84:	|               move.l d0,-(sp)
    be86:	|               jsr 9044 <TF_abs>
    be8c:	|               addq.l #4,sp
    be8e:	|               move.l d0,d2
    be90:	|               move.l 16(sp),-(sp)
    be94:	|               jsr 17406 <__fixsfsi>
    be9a:	|               addq.l #4,sp
    be9c:	|               move.l d0,-(sp)
    be9e:	|               jsr 9044 <TF_abs>
    bea4:	|               addq.l #4,sp
    bea6:	|               cmp.l d2,d0
    bea8:	|        /----- bgt.s becc <walkMe+0x132>
    beaa:	|        |      move.l 20(sp),-(sp)
    beae:	|        |      jsr 17406 <__fixsfsi>
    beb4:	|        |      addq.l #4,sp
    beb6:	|        |      move.l d0,-(sp)
    beb8:	|        |      jsr 9044 <TF_abs>
    bebe:	|        |      addq.l #4,sp
    bec0:	|        |      move.l d0,-(sp)
    bec2:	|        |      jsr 1746e <__floatsisf>
    bec8:	|        |      addq.l #4,sp
    beca:	|        |  /-- bra.s beec <walkMe+0x152>
    becc:	|        \--|-> move.l 16(sp),-(sp)
    bed0:	|           |   jsr 17406 <__fixsfsi>
    bed6:	|           |   addq.l #4,sp
    bed8:	|           |   move.l d0,-(sp)
    beda:	|           |   jsr 9044 <TF_abs>
    bee0:	|           |   addq.l #4,sp
    bee2:	|           |   move.l d0,-(sp)
    bee4:	|           |   jsr 1746e <__floatsisf>
    beea:	|           |   addq.l #4,sp
    beec:	|           \-> move.l d0,12(sp)

		if (TF_abs(maxDiff) > s) {
    bef0:	|               move.l 12(sp),-(sp)
    bef4:	|               jsr 17406 <__fixsfsi>
    befa:	|               addq.l #4,sp
    befc:	|               move.l d0,-(sp)
    befe:	|               jsr 9044 <TF_abs>
    bf04:	|               addq.l #4,sp
    bf06:	|               move.l d0,-(sp)
    bf08:	|               jsr 1746e <__floatsisf>
    bf0e:	|               addq.l #4,sp
    bf10:	|               move.l d0,-(sp)
    bf12:	|               move.l 28(sp),-(sp)
    bf16:	|               jsr 17694 <__ltsf2>
    bf1c:	|               addq.l #8,sp
    bf1e:	|               tst.l d0
    bf20:	|        /----- bge.w bfd2 <walkMe+0x238>
			if (thisPerson->spinning) {
    bf24:	|        |      movea.l 32(sp),a0
    bf28:	|        |      move.w 66(a0),d0
    bf2c:	|        |  /-- beq.s bf4a <walkMe+0x1b0>
				spinStep(thisPerson);
    bf2e:	|        |  |   move.l 32(sp),-(sp)
    bf32:	|        |  |   jsr bab6 <spinStep>
    bf38:	|        |  |   addq.l #4,sp
				setFrames(thisPerson, ANI_WALK);
    bf3a:	|        |  |   pea 1 <_start+0x1>
    bf3e:	|        |  |   move.l 36(sp),-(sp)
    bf42:	|        |  |   jsr 7f2a <setFrames>
    bf48:	|        |  |   addq.l #8,sp
			}
			s = maxDiff / s;
    bf4a:	|        |  \-> move.l 24(sp),-(sp)
    bf4e:	|        |      move.l 16(sp),-(sp)
    bf52:	|        |      jsr 17324 <__divsf3>
    bf58:	|        |      addq.l #8,sp
    bf5a:	|        |      move.l d0,24(sp)
			if (move)
    bf5e:	|        |      tst.w 10(sp)
    bf62:	|        |  /-- beq.s bfcc <walkMe+0x232>
				moveAndScale(thisPerson,
							 thisPerson->x + xDiff / s,
							 thisPerson->y + yDiff / (s * 2));
    bf64:	|        |  |   movea.l 32(sp),a0
    bf68:	|        |  |   move.l 4(a0),d2
    bf6c:	|        |  |   move.l 24(sp),d0
    bf70:	|        |  |   move.l d0,-(sp)
    bf72:	|        |  |   move.l d0,-(sp)
    bf74:	|        |  |   jsr 1722a <__addsf3>
    bf7a:	|        |  |   addq.l #8,sp
    bf7c:	|        |  |   move.l d0,-(sp)
    bf7e:	|        |  |   move.l 20(sp),-(sp)
    bf82:	|        |  |   jsr 17324 <__divsf3>
    bf88:	|        |  |   addq.l #8,sp
				moveAndScale(thisPerson,
    bf8a:	|        |  |   move.l d0,-(sp)
    bf8c:	|        |  |   move.l d2,-(sp)
    bf8e:	|        |  |   jsr 1722a <__addsf3>
    bf94:	|        |  |   addq.l #8,sp
    bf96:	|        |  |   move.l d0,d2
							 thisPerson->x + xDiff / s,
    bf98:	|        |  |   movea.l 32(sp),a0
    bf9c:	|        |  |   move.l (a0),d3
    bf9e:	|        |  |   move.l 24(sp),-(sp)
    bfa2:	|        |  |   move.l 24(sp),-(sp)
    bfa6:	|        |  |   jsr 17324 <__divsf3>
    bfac:	|        |  |   addq.l #8,sp
				moveAndScale(thisPerson,
    bfae:	|        |  |   move.l d0,-(sp)
    bfb0:	|        |  |   move.l d3,-(sp)
    bfb2:	|        |  |   jsr 1722a <__addsf3>
    bfb8:	|        |  |   addq.l #8,sp
    bfba:	|        |  |   move.l d2,-(sp)
    bfbc:	|        |  |   move.l d0,-(sp)
    bfbe:	|        |  |   move.l 40(sp),-(sp)
    bfc2:	|        |  |   jsr ab9c <moveAndScale>
    bfc8:	|        |  |   lea 12(sp),sp
			return TRUE;
    bfcc:	|        |  \-> moveq #1,d0
    bfce:	|  /-----|----- bra.w c080 <walkMe+0x2e6>
		}

		if (thisPerson->inPoly == -1) {
    bfd2:	|  |     \----> movea.l 32(sp),a0
    bfd6:	|  |            move.l 56(a0),d0
    bfda:	|  |            moveq #-1,d1
    bfdc:	|  |            cmp.l d0,d1
    bfde:	|  |        /-- bne.s c016 <walkMe+0x27c>
			if (thisPerson->directionWhenDoneWalking != -1) {
    bfe0:	|  |        |   movea.l 32(sp),a0
    bfe4:	|  |        |   move.l 110(a0),d0
    bfe8:	|  |        |   moveq #-1,d1
    bfea:	|  |        |   cmp.l d0,d1
    bfec:	|  |  /-----|-- beq.s c02a <walkMe+0x290>
				thisPerson->wantAngle = thisPerson->directionWhenDoneWalking;
    bfee:	|  |  |     |   movea.l 32(sp),a0
    bff2:	|  |  |     |   move.l 110(a0),d0
    bff6:	|  |  |     |   movea.l 32(sp),a0
    bffa:	|  |  |     |   move.l d0,96(a0)
				thisPerson->spinning = TRUE;
    bffe:	|  |  |     |   movea.l 32(sp),a0
    c002:	|  |  |     |   move.w #1,66(a0)
				spinStep(thisPerson);
    c008:	|  |  |     |   move.l 32(sp),-(sp)
    c00c:	|  |  |     |   jsr bab6 <spinStep>
    c012:	|  |  |     |   addq.l #4,sp
			}
			break;
    c014:	|  |  +-----|-- bra.s c02a <walkMe+0x290>
		}
		if (!doBorderStuff(thisPerson)) break;
    c016:	|  |  |     \-> move.l 32(sp),-(sp)
    c01a:	|  |  |         jsr 97b6 <doBorderStuff>
    c020:	|  |  |         addq.l #4,sp
    c022:	|  |  |         tst.w d0
    c024:	|  |  |  /----- beq.s c02e <walkMe+0x294>
		xDiff = thisPerson->thisStepX - thisPerson->x;
    c026:	\--|--|--|----- bra.w bdba <walkMe+0x20>
			break;
    c02a:	   |  \--|----> nop
    c02c:	   |     |  /-- bra.s c030 <walkMe+0x296>
		if (!doBorderStuff(thisPerson)) break;
    c02e:	   |     \--|-> nop
	}

	thisPerson->walking = FALSE;
    c030:	   |        \-> movea.l 32(sp),a0
    c034:	   |            clr.w 64(a0)
	setFrames(thisPerson, ANI_STAND);
    c038:	   |            clr.l -(sp)
    c03a:	   |            move.l 36(sp),-(sp)
    c03e:	   |            jsr 7f2a <setFrames>
    c044:	   |            addq.l #8,sp
	moveAndScale(thisPerson,
				 thisPerson->walkToX,
				 thisPerson->walkToY);
    c046:	   |            movea.l 32(sp),a0
    c04a:	   |            move.l 44(a0),d0
	moveAndScale(thisPerson,
    c04e:	   |            move.l d0,-(sp)
    c050:	   |            jsr 1746e <__floatsisf>
    c056:	   |            addq.l #4,sp
    c058:	   |            move.l d0,d2
				 thisPerson->walkToX,
    c05a:	   |            movea.l 32(sp),a0
    c05e:	   |            move.l 40(a0),d0
	moveAndScale(thisPerson,
    c062:	   |            move.l d0,-(sp)
    c064:	   |            jsr 1746e <__floatsisf>
    c06a:	   |            addq.l #4,sp
    c06c:	   |            move.l d2,-(sp)
    c06e:	   |            move.l d0,-(sp)
    c070:	   |            move.l 40(sp),-(sp)
    c074:	   |            jsr ab9c <moveAndScale>
    c07a:	   |            lea 12(sp),sp
	return FALSE;
    c07e:	   |            clr.w d0
}
    c080:	   \----------> move.l (sp)+,d2
    c082:	                move.l (sp)+,d3
    c084:	                lea 20(sp),sp
    c088:	                rts

0000c08a <clearStackLib>:
};

int stackLibTotal = 0;
struct stackLibrary * stackLib = NULL;

void clearStackLib () {
    c08a:	       subq.l #8,sp
    c08c:	       move.l a6,-(sp)
	struct stackLibrary * k;
	while (stackLib) {
    c08e:	   /-- bra.s c0be <clearStackLib+0x34>
		k = stackLib;
    c090:	/--|-> move.l 1a834 <stackLib>,8(sp)
		stackLib = stackLib -> next;
    c098:	|  |   movea.l 1a834 <stackLib>,a0
    c09e:	|  |   move.l 4(a0),d0
    c0a2:	|  |   move.l d0,1a834 <stackLib>
		FreeVec(k);
    c0a8:	|  |   move.l 8(sp),4(sp)
    c0ae:	|  |   move.l 1a7a4 <SysBase>,d0
    c0b4:	|  |   movea.l d0,a6
    c0b6:	|  |   movea.l 4(sp),a1
    c0ba:	|  |   jsr -690(a6)
	while (stackLib) {
    c0be:	|  \-> move.l 1a834 <stackLib>,d0
    c0c4:	\----- bne.s c090 <clearStackLib+0x6>
	}
	stackLibTotal = 0;
    c0c6:	       clr.l 1a830 <stackLibTotal>
}
    c0cc:	       nop
    c0ce:	       movea.l (sp)+,a6
    c0d0:	       addq.l #8,sp
    c0d2:	       rts

0000c0d4 <loadGame>:
	}

	return buildFunc;
}

BOOL loadGame (char * fname) {
    c0d4:	          lea -128(sp),sp
    c0d8:	          movem.l d2-d3/a6,-(sp)
	BPTR fp;
	FILETIME savedGameTime;
	int a;

	while (allRunningFunctions) finishFunction (allRunningFunctions);
    c0dc:	      /-- bra.s c0ee <loadGame+0x1a>
    c0de:	   /--|-> move.l 1a73c <allRunningFunctions>,d0
    c0e4:	   |  |   move.l d0,-(sp)
    c0e6:	   |  |   jsr 54da <finishFunction>
    c0ec:	   |  |   addq.l #4,sp
    c0ee:	   |  \-> move.l 1a73c <allRunningFunctions>,d0
    c0f4:	   \----- bne.s c0de <loadGame+0xa>

	fp = openAndVerify (fname, 'S', 'A', ERROR_GAME_LOAD_NO, &ssgVersion);
    c0f6:	          pea 1a838 <ssgVersion>
    c0fc:	          pea 19015 <PutChar+0x1537>
    c102:	          pea 41 <_start+0x41>
    c106:	          pea 53 <_start+0x53>
    c10a:	          move.l 160(sp),-(sp)
    c10e:	          jsr 6290 <openAndVerify>
    c114:	          lea 20(sp),sp
    c118:	          move.l d0,112(sp)
	if (fp == NULL) return FALSE;
    c11c:	      /-- bne.s c124 <loadGame+0x50>
    c11e:	      |   clr.w d0
    c120:	/-----|-- bra.w c3ca <loadGame+0x2f6>

	unsigned int bytes_read = Read( fp, &savedGameTime, sizeof (FILETIME));
    c124:	|     \-> move.l 112(sp),108(sp)
    c12a:	|         lea 140(sp),a0
    c12e:	|         lea -126(a0),a0
    c132:	|         move.l a0,120(sp)
    c136:	|         moveq #8,d0
    c138:	|         move.l d0,116(sp)
    c13c:	|         move.l 1a7ac <DOSBase>,d0
    c142:	|         movea.l d0,a6
    c144:	|         move.l 108(sp),d1
    c148:	|         move.l 120(sp),d2
    c14c:	|         move.l 116(sp),d3
    c150:	|         jsr -42(a6)
    c154:	|         move.l d0,132(sp)
    c158:	|         move.l 132(sp),d0
    c15c:	|         move.l d0,128(sp)
	
	if (bytes_read != sizeof (FILETIME)) {
    c160:	|         moveq #8,d0
    c162:	|         cmp.l 128(sp),d0
    c166:	|     /-- beq.s c176 <loadGame+0xa2>
		KPrintF("Reading error in loadGame.\n");
    c168:	|     |   pea 19036 <PutChar+0x1558>
    c16e:	|     |   jsr 1703c <KPrintF>
    c174:	|     |   addq.l #4,sp
	}

	if (savedGameTime.dwLowDateTime != fileTime.dwLowDateTime ||
    c176:	|     \-> move.l 14(sp),d1
    c17a:	|         move.l 1a746 <fileTime>,d0
    c180:	|         cmp.l d1,d0
    c182:	|     /-- bne.s c192 <loadGame+0xbe>
		savedGameTime.dwHighDateTime != fileTime.dwHighDateTime) {
    c184:	|     |   move.l 18(sp),d1
    c188:	|     |   move.l 1a74a <fileTime+0x4>,d0
	if (savedGameTime.dwLowDateTime != fileTime.dwLowDateTime ||
    c18e:	|     |   cmp.l d1,d0
    c190:	|  /--|-- beq.s c1b2 <loadGame+0xde>
		KPrintF("loadgame:", ERROR_GAME_LOAD_WRONG, fname);
    c192:	|  |  \-> move.l 144(sp),-(sp)
    c196:	|  |      pea 19052 <PutChar+0x1574>
    c19c:	|  |      pea 19119 <PutChar+0x163b>
    c1a2:	|  |      jsr 1703c <KPrintF>
    c1a8:	|  |      lea 12(sp),sp
		return FALSE; 
    c1ac:	|  |      clr.w d0
    c1ae:	+--|----- bra.w c3ca <loadGame+0x2f6>
	}

	// DON'T ADD ANYTHING NEW BEFORE THIS POINT!

	allowAnyFilename = FGetC (fp);
    c1b2:	|  \----> move.l 112(sp),124(sp)
    c1b8:	|         move.l 1a7ac <DOSBase>,d0
    c1be:	|         movea.l d0,a6
    c1c0:	|         move.l 124(sp),d1
    c1c4:	|         jsr -306(a6)
    c1c8:	|         move.l d0,136(sp)
    c1cc:	|         move.l 136(sp),d0
    c1d0:	|         move.l d0,d0
    c1d2:	|         move.w d0,1a000 <allowAnyFilename>
	captureAllKeys = FGetC (fp);
    c1d8:	|         move.l 112(sp),100(sp)
    c1de:	|         move.l 1a7ac <DOSBase>,d0
    c1e4:	|         movea.l d0,a6
    c1e6:	|         move.l 100(sp),d1
    c1ea:	|         jsr -306(a6)
    c1ee:	|         move.l d0,96(sp)
    c1f2:	|         move.l 96(sp),d0
    c1f6:	|         move.l d0,d0
    c1f8:	|         move.w d0,1a744 <captureAllKeys>
	FGetC (fp); // updateDisplay (part of movie playing)
    c1fe:	|         move.l 112(sp),92(sp)
    c204:	|         move.l 1a7ac <DOSBase>,d0
    c20a:	|         movea.l d0,a6
    c20c:	|         move.l 92(sp),d1
    c210:	|         jsr -306(a6)
    c214:	|         move.l d0,88(sp)

	BOOL fontLoaded = FGetC (fp);
    c218:	|         move.l 112(sp),84(sp)
    c21e:	|         move.l 1a7ac <DOSBase>,d0
    c224:	|         movea.l d0,a6
    c226:	|         move.l 84(sp),d1
    c22a:	|         jsr -306(a6)
    c22e:	|         move.l d0,80(sp)
    c232:	|         move.l 80(sp),d0
    c236:	|         move.w d0,78(sp)
	int fontNum;
	char * charOrder;
	if (fontLoaded) {
    c23a:	|     /-- beq.s c26e <loadGame+0x19a>
		fontNum = get2bytes (fp);
    c23c:	|     |   move.l 112(sp),-(sp)
    c240:	|     |   jsr 6bc <get2bytes>
    c246:	|     |   addq.l #4,sp
    c248:	|     |   move.l d0,74(sp)
		fontHeight = get2bytes (fp);		
    c24c:	|     |   move.l 112(sp),-(sp)
    c250:	|     |   jsr 6bc <get2bytes>
    c256:	|     |   addq.l #4,sp
    c258:	|     |   move.l d0,1a89c <fontHeight>
		charOrder = readString(fp);		
    c25e:	|     |   move.l 112(sp),-(sp)
    c262:	|     |   jsr b02 <readString>
    c268:	|     |   addq.l #4,sp
    c26a:	|     |   move.l d0,104(sp)
	}
	//loadFont (fontNum, charOrder, fontHeight); Amiga Todo: Implement Graphics stuff
	FreeVec(charOrder);
    c26e:	|     \-> move.l 104(sp),70(sp)
    c274:	|         move.l 1a7a4 <SysBase>,d0
    c27a:	|         movea.l d0,a6
    c27c:	|         movea.l 70(sp),a1
    c280:	|         jsr -690(a6)
	
	fontSpace = getSigned (fp);
    c284:	|         move.l 112(sp),-(sp)
    c288:	|         jsr 854 <getSigned>
    c28e:	|         addq.l #4,sp
    c290:	|         move.w d0,1a6a8 <fontSpace>

	killAllPeople ();
    c296:	|         jsr a83e <killAllPeople>
	killAllRegions ();
    c29c:	|         jsr 15868 <killAllRegions>

	int camerX = get2bytes (fp);
    c2a2:	|         move.l 112(sp),-(sp)
    c2a6:	|         jsr 6bc <get2bytes>
    c2ac:	|         addq.l #4,sp
    c2ae:	|         move.l d0,66(sp)
	int camerY = get2bytes (fp);
    c2b2:	|         move.l 112(sp),-(sp)
    c2b6:	|         jsr 6bc <get2bytes>
    c2bc:	|         addq.l #4,sp
    c2be:	|         move.l d0,62(sp)
	FLOAT camerZ;
	camerZ = getFloat(fp);
    c2c2:	|         move.l 112(sp),-(sp)
    c2c6:	|         jsr 7d8 <getFloat>
    c2cc:	|         addq.l #4,sp
    c2ce:	|         move.l d0,58(sp)

	brightnessLevel = FGetC (fp);
    c2d2:	|         move.l 112(sp),54(sp)
    c2d8:	|         move.l 1a7ac <DOSBase>,d0
    c2de:	|         movea.l d0,a6
    c2e0:	|         move.l 54(sp),d1
    c2e4:	|         jsr -306(a6)
    c2e8:	|         move.l d0,50(sp)
    c2ec:	|         move.l 50(sp),d0
    c2f0:	|         move.l d0,d0
    c2f2:	|         move.b d0,1a11a <brightnessLevel>

	loadHandlers (fp);
    c2f8:	|         move.l 112(sp),-(sp)
    c2fc:	|         jsr 61f0 <loadHandlers>
    c302:	|         addq.l #4,sp
	loadRegions (fp);
    c304:	|         move.l 112(sp),-(sp)
    c308:	|         jsr 158c4 <loadRegions>
    c30e:	|         addq.l #4,sp

	mouseCursorAnim = AllocVec( sizeof( struct personaAnimation), MEMF_ANY);
    c310:	|         moveq #12,d0
    c312:	|         move.l d0,46(sp)
    c316:	|         clr.l 42(sp)
    c31a:	|         move.l 1a7a4 <SysBase>,d0
    c320:	|         movea.l d0,a6
    c322:	|         move.l 46(sp),d0
    c326:	|         move.l 42(sp),d1
    c32a:	|         jsr -684(a6)
    c32e:	|         move.l d0,38(sp)
    c332:	|         move.l 38(sp),d0
    c336:	|         move.l d0,1a6aa <mouseCursorAnim>
	if (! mouseCursorAnim) {
    c33c:	|         move.l 1a6aa <mouseCursorAnim>,d0
    c342:	|     /-- bne.s c356 <loadGame+0x282>
		KPrintF("loadGame: Cannot allocate memory");
    c344:	|     |   pea 19123 <PutChar+0x1645>
    c34a:	|     |   jsr 1703c <KPrintF>
    c350:	|     |   addq.l #4,sp
		return FALSE;
    c352:	|     |   clr.w d0
    c354:	+-----|-- bra.s c3ca <loadGame+0x2f6>
			languageNum = selectedLanguage;
			setFileIndices (NULL, gameSettings.numLanguages, languageNum);
		}
	}

	nosnapshot ();
    c356:	|     \-> jsr d1f0 <nosnapshot>
	if (FGetC (fp)) {
    c35c:	|         move.l 112(sp),34(sp)
    c362:	|         move.l 1a7ac <DOSBase>,d0
    c368:	|         movea.l d0,a6
    c36a:	|         move.l 34(sp),d1
    c36e:	|         jsr -306(a6)
    c372:	|         move.l d0,30(sp)
    c376:	|         move.l 30(sp),d0
    c37a:	|     /-- beq.s c390 <loadGame+0x2bc>
		if (! restoreSnapshot (fp)) return FALSE;
    c37c:	|     |   move.l 112(sp),-(sp)
    c380:	|     |   jsr d270 <restoreSnapshot>
    c386:	|     |   addq.l #4,sp
    c388:	|     |   tst.w d0
    c38a:	|     +-- bne.s c390 <loadGame+0x2bc>
    c38c:	|     |   clr.w d0
    c38e:	+-----|-- bra.s c3ca <loadGame+0x2f6>
	}

	Close (fp);
    c390:	|     \-> move.l 112(sp),26(sp)
    c396:	|         move.l 1a7ac <DOSBase>,d0
    c39c:	|         movea.l d0,a6
    c39e:	|         move.l 26(sp),d1
    c3a2:	|         jsr -36(a6)
    c3a6:	|         move.l d0,22(sp)
	clearStackLib ();
    c3aa:	|         jsr c08a <clearStackLib>

	cameraX = camerX;
    c3b0:	|         move.l 66(sp),1a85e <cameraX>
	cameraY = camerY;
    c3b8:	|         move.l 62(sp),1a862 <cameraY>
	cameraZoom = camerZ;
    c3c0:	|         move.l 58(sp),1a142 <cameraZoom>

	return TRUE;
    c3c8:	|         moveq #1,d0
}
    c3ca:	\-------> movem.l (sp)+,d2-d3/a6
    c3ce:	          lea 128(sp),sp
    c3d2:	          rts

0000c3d4 <saveFunction>:

void saveFunction (struct loadedFunction * fun, BPTR fp) {
    c3d4:	   /-> lea -64(sp),sp
    c3d8:	   |   move.l a6,-(sp)
    c3da:	   |   move.l d2,-(sp)
	int a;
	put2bytes (fun -> originalNumber, fp);
    c3dc:	   |   movea.l 76(sp),a0
    c3e0:	   |   move.l (a0),d0
    c3e2:	   |   move.l 80(sp),-(sp)
    c3e6:	   |   move.l d0,-(sp)
    c3e8:	   |   jsr 8d0 <put2bytes>
    c3ee:	   |   addq.l #8,sp
	if (fun -> calledBy) {
    c3f0:	   |   movea.l 76(sp),a0
    c3f4:	   |   move.l 40(a0),d0
    c3f8:	/--|-- beq.s c434 <saveFunction+0x60>
		FPutC (fp, 1);
    c3fa:	|  |   move.l 80(sp),52(sp)
    c400:	|  |   moveq #1,d0
    c402:	|  |   move.l d0,48(sp)
    c406:	|  |   move.l 1a7ac <DOSBase>,d0
    c40c:	|  |   movea.l d0,a6
    c40e:	|  |   move.l 52(sp),d1
    c412:	|  |   move.l 48(sp),d2
    c416:	|  |   jsr -312(a6)
    c41a:	|  |   move.l d0,44(sp)
		saveFunction (fun -> calledBy, fp);
    c41e:	|  |   movea.l 76(sp),a0
    c422:	|  |   move.l 40(a0),d0
    c426:	|  |   move.l 80(sp),-(sp)
    c42a:	|  |   move.l d0,-(sp)
    c42c:	|  \-- jsr c3d4 <saveFunction>(pc)
    c430:	|      addq.l #8,sp
    c432:	|  /-- bra.s c456 <saveFunction+0x82>
	} else {
		FPutC (fp, 0);
    c434:	\--|-> move.l 80(sp),64(sp)
    c43a:	   |   clr.l 60(sp)
    c43e:	   |   move.l 1a7ac <DOSBase>,d0
    c444:	   |   movea.l d0,a6
    c446:	   |   move.l 64(sp),d1
    c44a:	   |   move.l 60(sp),d2
    c44e:	   |   jsr -312(a6)
    c452:	   |   move.l d0,56(sp)
	}
	put4bytes (fun -> timeLeft, fp);
    c456:	   \-> movea.l 76(sp),a0
    c45a:	       move.l 12(a0),d0
    c45e:	       move.l 80(sp),-(sp)
    c462:	       move.l d0,-(sp)
    c464:	       jsr 958 <put4bytes>
    c46a:	       addq.l #8,sp
	put2bytes (fun -> runThisLine, fp);
    c46c:	       movea.l 76(sp),a0
    c470:	       move.l 36(a0),d0
    c474:	       move.l 80(sp),-(sp)
    c478:	       move.l d0,-(sp)
    c47a:	       jsr 8d0 <put2bytes>
    c480:	       addq.l #8,sp
	FPutC (fp, fun -> cancelMe);
    c482:	       move.l 80(sp),40(sp)
    c488:	       movea.l 76(sp),a0
    c48c:	       move.w 54(a0),d0
    c490:	       movea.w d0,a0
    c492:	       move.l a0,36(sp)
    c496:	       move.l 1a7ac <DOSBase>,d0
    c49c:	       movea.l d0,a6
    c49e:	       move.l 40(sp),d1
    c4a2:	       move.l 36(sp),d2
    c4a6:	       jsr -312(a6)
    c4aa:	       move.l d0,32(sp)
	FPutC (fp, fun -> returnSomething);
    c4ae:	       move.l 80(sp),28(sp)
    c4b4:	       movea.l 76(sp),a0
    c4b8:	       move.w 48(a0),d0
    c4bc:	       movea.w d0,a0
    c4be:	       move.l a0,24(sp)
    c4c2:	       move.l 1a7ac <DOSBase>,d0
    c4c8:	       movea.l d0,a6
    c4ca:	       move.l 28(sp),d1
    c4ce:	       move.l 24(sp),d2
    c4d2:	       jsr -312(a6)
    c4d6:	       move.l d0,20(sp)
	FPutC (fp, fun -> isSpeech);
    c4da:	       move.l 80(sp),16(sp)
    c4e0:	       movea.l 76(sp),a0
    c4e4:	       move.w 50(a0),d0
    c4e8:	       movea.w d0,a0
    c4ea:	       move.l a0,12(sp)
    c4ee:	       move.l 1a7ac <DOSBase>,d0
    c4f4:	       movea.l d0,a6
    c4f6:	       move.l 16(sp),d1
    c4fa:	       move.l 12(sp),d2
    c4fe:	       jsr -312(a6)
    c502:	       move.l d0,8(sp)
	saveVariable (&fun -> reg, fp);
    c506:	       moveq #28,d0
    c508:	       add.l 76(sp),d0
    c50c:	       move.l 80(sp),-(sp)
    c510:	       move.l d0,-(sp)
    c512:	       jsr cc2c <saveVariable>
    c518:	       addq.l #8,sp

	if (fun -> freezerLevel) {
    c51a:	       movea.l 76(sp),a0
    c51e:	       move.b 56(a0),d0
    c522:	   /-- beq.s c532 <saveFunction+0x15e>
		KPrintF(ERROR_GAME_SAVE_FROZEN);		
    c524:	   |   pea 19144 <PutChar+0x1666>
    c52a:	   |   jsr 1703c <KPrintF>
    c530:	   |   addq.l #4,sp
	}
	saveStack (fun -> stack, fp);
    c532:	   \-> movea.l 76(sp),a0
    c536:	       move.l 24(a0),d0
    c53a:	       move.l 80(sp),-(sp)
    c53e:	       move.l d0,-(sp)
    c540:	       jsr caa0 <saveStack>
    c546:	       addq.l #8,sp
	for (a = 0; a < fun -> numLocals; a ++) {
    c548:	       clr.l 68(sp)
    c54c:	   /-- bra.s c570 <saveFunction+0x19c>
		saveVariable (& (fun -> localVars[a]), fp);
    c54e:	/--|-> movea.l 76(sp),a0
    c552:	|  |   move.l 20(a0),d1
    c556:	|  |   move.l 68(sp),d0
    c55a:	|  |   lsl.l #3,d0
    c55c:	|  |   add.l d1,d0
    c55e:	|  |   move.l 80(sp),-(sp)
    c562:	|  |   move.l d0,-(sp)
    c564:	|  |   jsr cc2c <saveVariable>
    c56a:	|  |   addq.l #8,sp
	for (a = 0; a < fun -> numLocals; a ++) {
    c56c:	|  |   addq.l #1,68(sp)
    c570:	|  \-> movea.l 76(sp),a0
    c574:	|      move.l 8(a0),d0
    c578:	|      cmp.l 68(sp),d0
    c57c:	\----- bgt.s c54e <saveFunction+0x17a>
	}
}
    c57e:	       nop
    c580:	       nop
    c582:	       move.l (sp)+,d2
    c584:	       movea.l (sp)+,a6
    c586:	       lea 64(sp),sp
    c58a:	       rts

0000c58c <saveGame>:

BOOL saveGame (char * fname) {
    c58c:	          lea -248(sp),sp
    c590:	          movem.l d2-d3/a6,-(sp)
	int a;

	BPTR fp = Open( fname, MODE_NEWFILE);
    c594:	          move.l 264(sp),244(sp)
    c59a:	          move.l #1006,240(sp)
    c5a2:	          move.l 1a7ac <DOSBase>,d0
    c5a8:	          movea.l d0,a6
    c5aa:	          move.l 244(sp),d1
    c5ae:	          move.l 240(sp),d2
    c5b2:	          jsr -30(a6)
    c5b6:	          move.l d0,236(sp)
    c5ba:	          move.l 236(sp),d0
    c5be:	          move.l d0,232(sp)
	if (fp == NULL) {
    c5c2:	      /-- bne.s c5d8 <saveGame+0x4c>
		KPrintF("saveGame: Cannot create file");
    c5c4:	      |   pea 19166 <PutChar+0x1688>
    c5ca:	      |   jsr 1703c <KPrintF>
    c5d0:	      |   addq.l #4,sp
		return FALSE;
    c5d2:	      |   clr.w d0
    c5d4:	/-----|-- bra.w ca96 <saveGame+0x50a>
	}

	Write( fp, &"SLUDSA", 6);
    c5d8:	|     \-> move.l 232(sp),228(sp)
    c5de:	|         move.l #102787,224(sp)
    c5e6:	|         moveq #6,d0
    c5e8:	|         move.l d0,220(sp)
    c5ec:	|         move.l 1a7ac <DOSBase>,d0
    c5f2:	|         movea.l d0,a6
    c5f4:	|         move.l 228(sp),d1
    c5f8:	|         move.l 224(sp),d2
    c5fc:	|         move.l 220(sp),d3
    c600:	|         jsr -48(a6)
    c604:	|         move.l d0,216(sp)
	FPutC (fp, 0);
    c608:	|         move.l 232(sp),212(sp)
    c60e:	|         clr.l 208(sp)
    c612:	|         move.l 1a7ac <DOSBase>,d0
    c618:	|         movea.l d0,a6
    c61a:	|         move.l 212(sp),d1
    c61e:	|         move.l 208(sp),d2
    c622:	|         jsr -312(a6)
    c626:	|         move.l d0,204(sp)
	FPutC (fp, 0);
    c62a:	|         move.l 232(sp),200(sp)
    c630:	|         clr.l 196(sp)
    c634:	|         move.l 1a7ac <DOSBase>,d0
    c63a:	|         movea.l d0,a6
    c63c:	|         move.l 200(sp),d1
    c640:	|         move.l 196(sp),d2
    c644:	|         jsr -312(a6)
    c648:	|         move.l d0,192(sp)
	FPutC (fp, MAJOR_VERSION);
    c64c:	|         move.l 232(sp),188(sp)
    c652:	|         moveq #2,d0
    c654:	|         move.l d0,184(sp)
    c658:	|         move.l 1a7ac <DOSBase>,d0
    c65e:	|         movea.l d0,a6
    c660:	|         move.l 188(sp),d1
    c664:	|         move.l 184(sp),d2
    c668:	|         jsr -312(a6)
    c66c:	|         move.l d0,180(sp)
	FPutC (fp, MINOR_VERSION);
    c670:	|         move.l 232(sp),176(sp)
    c676:	|         moveq #2,d0
    c678:	|         move.l d0,172(sp)
    c67c:	|         move.l 1a7ac <DOSBase>,d0
    c682:	|         movea.l d0,a6
    c684:	|         move.l 176(sp),d1
    c688:	|         move.l 172(sp),d2
    c68c:	|         jsr -312(a6)
    c690:	|         move.l d0,168(sp)

	Write ( fp, &fileTime, sizeof(FILETIME));
    c694:	|         move.l 232(sp),164(sp)
    c69a:	|         move.l #108358,160(sp)
    c6a2:	|         moveq #8,d0
    c6a4:	|         move.l d0,156(sp)
    c6a8:	|         move.l 1a7ac <DOSBase>,d0
    c6ae:	|         movea.l d0,a6
    c6b0:	|         move.l 164(sp),d1
    c6b4:	|         move.l 160(sp),d2
    c6b8:	|         move.l 156(sp),d3
    c6bc:	|         jsr -48(a6)
    c6c0:	|         move.l d0,152(sp)

	// DON'T ADD ANYTHING NEW BEFORE THIS POINT!

	FPutC (fp, allowAnyFilename);
    c6c4:	|         move.l 232(sp),148(sp)
    c6ca:	|         move.w 1a000 <allowAnyFilename>,d0
    c6d0:	|         movea.w d0,a0
    c6d2:	|         move.l a0,144(sp)
    c6d6:	|         move.l 1a7ac <DOSBase>,d0
    c6dc:	|         movea.l d0,a6
    c6de:	|         move.l 148(sp),d1
    c6e2:	|         move.l 144(sp),d2
    c6e6:	|         jsr -312(a6)
    c6ea:	|         move.l d0,140(sp)
	FPutC (fp, captureAllKeys);
    c6ee:	|         move.l 232(sp),136(sp)
    c6f4:	|         move.w 1a744 <captureAllKeys>,d0
    c6fa:	|         movea.w d0,a0
    c6fc:	|         move.l a0,132(sp)
    c700:	|         move.l 1a7ac <DOSBase>,d0
    c706:	|         movea.l d0,a6
    c708:	|         move.l 136(sp),d1
    c70c:	|         move.l 132(sp),d2
    c710:	|         jsr -312(a6)
    c714:	|         move.l d0,128(sp)
	FPutC (fp, TRUE); // updateDisplay
    c718:	|         move.l 232(sp),124(sp)
    c71e:	|         moveq #1,d0
    c720:	|         move.l d0,120(sp)
    c724:	|         move.l 1a7ac <DOSBase>,d0
    c72a:	|         movea.l d0,a6
    c72c:	|         move.l 124(sp),d1
    c730:	|         move.l 120(sp),d2
    c734:	|         jsr -312(a6)
    c738:	|         move.l d0,116(sp)
	FPutC (fp, fontTableSize>0);
    c73c:	|         move.l 232(sp),112(sp)
    c742:	|         move.l 1a8ac <fontTableSize>,d0
    c748:	|         sgt d0
    c74a:	|         neg.b d0
    c74c:	|         move.b d0,d0
    c74e:	|         andi.l #255,d0
    c754:	|         move.l d0,108(sp)
    c758:	|         move.l 1a7ac <DOSBase>,d0
    c75e:	|         movea.l d0,a6
    c760:	|         move.l 112(sp),d1
    c764:	|         move.l 108(sp),d2
    c768:	|         jsr -312(a6)
    c76c:	|         move.l d0,104(sp)

	if (fontTableSize>0) {
    c770:	|         move.l 1a8ac <fontTableSize>,d0
    c776:	|     /-- ble.s c7b4 <saveGame+0x228>
		put2bytes (loadedFontNum, fp);
    c778:	|     |   move.l 1a8a0 <loadedFontNum>,d0
    c77e:	|     |   move.l 232(sp),-(sp)
    c782:	|     |   move.l d0,-(sp)
    c784:	|     |   jsr 8d0 <put2bytes>
    c78a:	|     |   addq.l #8,sp
		put2bytes (fontHeight, fp);
    c78c:	|     |   move.l 1a89c <fontHeight>,d0
    c792:	|     |   move.l 232(sp),-(sp)
    c796:	|     |   move.l d0,-(sp)
    c798:	|     |   jsr 8d0 <put2bytes>
    c79e:	|     |   addq.l #8,sp
		writeString(fontOrderString, fp);
    c7a0:	|     |   move.l 1a8a4 <fontOrderString>,d0
    c7a6:	|     |   move.l 232(sp),-(sp)
    c7aa:	|     |   move.l d0,-(sp)
    c7ac:	|     |   jsr bd8 <writeString>
    c7b2:	|     |   addq.l #8,sp
	}
	putSigned (fontSpace, fp);
    c7b4:	|     \-> move.w 1a6a8 <fontSpace>,d0
    c7ba:	|         movea.w d0,a0
    c7bc:	|         move.l 232(sp),-(sp)
    c7c0:	|         move.l a0,-(sp)
    c7c2:	|         jsr a9c <putSigned>
    c7c8:	|         addq.l #8,sp

	// Save backdrop
	put2bytes (cameraX, fp);
    c7ca:	|         move.l 1a85e <cameraX>,d0
    c7d0:	|         move.l 232(sp),-(sp)
    c7d4:	|         move.l d0,-(sp)
    c7d6:	|         jsr 8d0 <put2bytes>
    c7dc:	|         addq.l #8,sp
	put2bytes (cameraY, fp);
    c7de:	|         move.l 1a862 <cameraY>,d0
    c7e4:	|         move.l 232(sp),-(sp)
    c7e8:	|         move.l d0,-(sp)
    c7ea:	|         jsr 8d0 <put2bytes>
    c7f0:	|         addq.l #8,sp
	putFloat(cameraZoom, fp);
    c7f2:	|         move.l 1a142 <cameraZoom>,d0
    c7f8:	|         move.l 232(sp),-(sp)
    c7fc:	|         move.l d0,-(sp)
    c7fe:	|         jsr a46 <putFloat>
    c804:	|         addq.l #8,sp

	FPutC (fp, brightnessLevel);
    c806:	|         move.l 232(sp),100(sp)
    c80c:	|         move.b 1a11a <brightnessLevel>,d0
    c812:	|         move.b d0,d0
    c814:	|         andi.l #255,d0
    c81a:	|         move.l d0,96(sp)
    c81e:	|         move.l 1a7ac <DOSBase>,d0
    c824:	|         movea.l d0,a6
    c826:	|         move.l 100(sp),d1
    c82a:	|         move.l 96(sp),d2
    c82e:	|         jsr -312(a6)
    c832:	|         move.l d0,92(sp)

	// Save event handlers
	saveHandlers (fp);
    c836:	|         move.l 232(sp),-(sp)
    c83a:	|         jsr 6774 <saveHandlers>
    c840:	|         addq.l #4,sp

	// Save regions
	saveRegions (fp);
    c842:	|         move.l 232(sp),-(sp)
    c846:	|         jsr 15a7e <saveRegions>
    c84c:	|         addq.l #4,sp

	saveAnim (mouseCursorAnim, fp);
    c84e:	|         move.l 1a6aa <mouseCursorAnim>,d0
    c854:	|         move.l 232(sp),-(sp)
    c858:	|         move.l d0,-(sp)
    c85a:	|         jsr adb0 <saveAnim>
    c860:	|         addq.l #8,sp
	put2bytes (mouseCursorFrameNum, fp);
    c862:	|         move.l 1a6ae <mouseCursorFrameNum>,d0
    c868:	|         move.l 232(sp),-(sp)
    c86c:	|         move.l d0,-(sp)
    c86e:	|         jsr 8d0 <put2bytes>
    c874:	|         addq.l #8,sp

	// Save functions
	struct loadedFunction * thisFunction = allRunningFunctions;
    c876:	|         move.l 1a73c <allRunningFunctions>,252(sp)
	int countFunctions = 0;
    c87e:	|         clr.l 248(sp)
	while (thisFunction) {
    c882:	|     /-- bra.s c892 <saveGame+0x306>
		countFunctions ++;
    c884:	|  /--|-> addq.l #1,248(sp)
		thisFunction = thisFunction -> next;
    c888:	|  |  |   movea.l 252(sp),a0
    c88c:	|  |  |   move.l 44(a0),252(sp)
	while (thisFunction) {
    c892:	|  |  \-> tst.l 252(sp)
    c896:	|  \----- bne.s c884 <saveGame+0x2f8>
	}
	put2bytes (countFunctions, fp);
    c898:	|         move.l 232(sp),-(sp)
    c89c:	|         move.l 252(sp),-(sp)
    c8a0:	|         jsr 8d0 <put2bytes>
    c8a6:	|         addq.l #8,sp

	thisFunction = allRunningFunctions;
    c8a8:	|         move.l 1a73c <allRunningFunctions>,252(sp)
	while (thisFunction) {
    c8b0:	|     /-- bra.s c8cc <saveGame+0x340>
		saveFunction (thisFunction, fp);
    c8b2:	|  /--|-> move.l 232(sp),-(sp)
    c8b6:	|  |  |   move.l 256(sp),-(sp)
    c8ba:	|  |  |   jsr c3d4 <saveFunction>
    c8c0:	|  |  |   addq.l #8,sp
		thisFunction = thisFunction -> next;
    c8c2:	|  |  |   movea.l 252(sp),a0
    c8c6:	|  |  |   move.l 44(a0),252(sp)
	while (thisFunction) {
    c8cc:	|  |  \-> tst.l 252(sp)
    c8d0:	|  \----- bne.s c8b2 <saveGame+0x326>
	}

	for (a = 0; a < numGlobals; a ++) {
    c8d2:	|         clr.l 256(sp)
    c8d6:	|     /-- bra.s c8f8 <saveGame+0x36c>
		saveVariable (& globalVars[a], fp);
    c8d8:	|  /--|-> move.l 1a752 <globalVars>,d1
    c8de:	|  |  |   move.l 256(sp),d0
    c8e2:	|  |  |   lsl.l #3,d0
    c8e4:	|  |  |   add.l d1,d0
    c8e6:	|  |  |   move.l 232(sp),-(sp)
    c8ea:	|  |  |   move.l d0,-(sp)
    c8ec:	|  |  |   jsr cc2c <saveVariable>
    c8f2:	|  |  |   addq.l #8,sp
	for (a = 0; a < numGlobals; a ++) {
    c8f4:	|  |  |   addq.l #1,256(sp)
    c8f8:	|  |  \-> move.l 1a77c <numGlobals>,d0
    c8fe:	|  |      cmp.l 256(sp),d0
    c902:	|  \----- bgt.s c8d8 <saveGame+0x34c>
	}

	savePeople (fp);
    c904:	|         move.l 232(sp),-(sp)
    c908:	|         jsr aed8 <savePeople>
    c90e:	|         addq.l #4,sp

	if (currentFloor -> numPolygons) {
    c910:	|         movea.l 1a8c0 <currentFloor>,a0
    c916:	|         move.l 8(a0),d0
    c91a:	|  /----- beq.s c958 <saveGame+0x3cc>
		FPutC (fp, 1);
    c91c:	|  |      move.l 232(sp),76(sp)
    c922:	|  |      moveq #1,d0
    c924:	|  |      move.l d0,72(sp)
    c928:	|  |      move.l 1a7ac <DOSBase>,d0
    c92e:	|  |      movea.l d0,a6
    c930:	|  |      move.l 76(sp),d1
    c934:	|  |      move.l 72(sp),d2
    c938:	|  |      jsr -312(a6)
    c93c:	|  |      move.l d0,68(sp)
		put2bytes (currentFloor -> originalNum, fp);
    c940:	|  |      movea.l 1a8c0 <currentFloor>,a0
    c946:	|  |      move.l (a0),d0
    c948:	|  |      move.l 232(sp),-(sp)
    c94c:	|  |      move.l d0,-(sp)
    c94e:	|  |      jsr 8d0 <put2bytes>
    c954:	|  |      addq.l #8,sp
    c956:	|  |  /-- bra.s c97a <saveGame+0x3ee>
	} else FPutC (fp, 0);
    c958:	|  \--|-> move.l 232(sp),88(sp)
    c95e:	|     |   clr.l 84(sp)
    c962:	|     |   move.l 1a7ac <DOSBase>,d0
    c968:	|     |   movea.l d0,a6
    c96a:	|     |   move.l 88(sp),d1
    c96e:	|     |   move.l 84(sp),d2
    c972:	|     |   jsr -312(a6)
    c976:	|     |   move.l d0,80(sp)
	/*if (zBuffer.tex) {
		FPutC (fp, 1);
		put2bytes (zBuffer.originalNum, fp);
	} else FPutC (fp,0);*/ 

	FPutC (fp, speechMode);
    c97a:	|     \-> move.l 232(sp),64(sp)
    c980:	|         move.l 1a872 <speechMode>,60(sp)
    c988:	|         move.l 1a7ac <DOSBase>,d0
    c98e:	|         movea.l d0,a6
    c990:	|         move.l 64(sp),d1
    c994:	|         move.l 60(sp),d2
    c998:	|         jsr -312(a6)
    c99c:	|         move.l d0,56(sp)
	FPutC (fadeMode, fp);
    c9a0:	|         move.b 1a67e <fadeMode>,d0
    c9a6:	|         move.b d0,d0
    c9a8:	|         andi.l #255,d0
    c9ae:	|         move.l d0,52(sp)
    c9b2:	|         move.l 232(sp),48(sp)
    c9b8:	|         move.l 1a7ac <DOSBase>,d0
    c9be:	|         movea.l d0,a6
    c9c0:	|         move.l 52(sp),d1
    c9c4:	|         move.l 48(sp),d2
    c9c8:	|         jsr -312(a6)
    c9cc:	|         move.l d0,44(sp)
	saveSpeech (speech, fp);
    c9d0:	|         move.l 1a800 <speech>,d0
    c9d6:	|         move.l 232(sp),-(sp)
    c9da:	|         move.l d0,-(sp)
    c9dc:	|         jsr 7dde <saveSpeech>
    c9e2:	|         addq.l #8,sp
	saveStatusBars (fp);
    c9e4:	|         move.l 232(sp),-(sp)
    c9e8:	|         jsr 77da <saveStatusBars>
    c9ee:	|         addq.l #4,sp
	saveSounds (fp);
    c9f0:	|         move.l 232(sp),-(sp)
    c9f4:	|         jsr cf9e <saveSounds>
    c9fa:	|         addq.l #4,sp

	put2bytes (saveEncoding, fp);
    c9fc:	|         move.w 1a85c <saveEncoding>,d0
    ca02:	|         move.w d0,d0
    ca04:	|         andi.l #65535,d0
    ca0a:	|         move.l 232(sp),-(sp)
    ca0e:	|         move.l d0,-(sp)
    ca10:	|         jsr 8d0 <put2bytes>
    ca16:	|         addq.l #8,sp

	saveParallaxRecursive (parallaxStuff, fp);
    ca18:	|         move.l 1a84e <parallaxStuff>,d0
    ca1e:	|         move.l 232(sp),-(sp)
    ca22:	|         move.l d0,-(sp)
    ca24:	|         jsr d296 <saveParallaxRecursive>
    ca2a:	|         addq.l #8,sp
	FPutC (fp, 0);
    ca2c:	|         move.l 232(sp),40(sp)
    ca32:	|         clr.l 36(sp)
    ca36:	|         move.l 1a7ac <DOSBase>,d0
    ca3c:	|         movea.l d0,a6
    ca3e:	|         move.l 40(sp),d1
    ca42:	|         move.l 36(sp),d2
    ca46:	|         jsr -312(a6)
    ca4a:	|         move.l d0,32(sp)

	FPutC(fp, languageNum);	// Selected language
    ca4e:	|         move.l 232(sp),28(sp)
    ca54:	|         move.l 1a120 <languageNum>,24(sp)
    ca5c:	|         move.l 1a7ac <DOSBase>,d0
    ca62:	|         movea.l d0,a6
    ca64:	|         move.l 28(sp),d1
    ca68:	|         move.l 24(sp),d2
    ca6c:	|         jsr -312(a6)
    ca70:	|         move.l d0,20(sp)

	Close(fp);
    ca74:	|         move.l 232(sp),16(sp)
    ca7a:	|         move.l 1a7ac <DOSBase>,d0
    ca80:	|         movea.l d0,a6
    ca82:	|         move.l 16(sp),d1
    ca86:	|         jsr -36(a6)
    ca8a:	|         move.l d0,12(sp)
	clearStackLib ();
    ca8e:	|         jsr c08a <clearStackLib>
	return TRUE;
    ca94:	|         moveq #1,d0
}
    ca96:	\-------> movem.l (sp)+,d2-d3/a6
    ca9a:	          lea 248(sp),sp
    ca9e:	          rts

0000caa0 <saveStack>:

//----------------------------------------------------------------------
// For saving and loading stacks...
//----------------------------------------------------------------------

void saveStack (struct variableStack * vs, BPTR fp) {
    caa0:	       lea -12(sp),sp
	int elements = 0;
    caa4:	       clr.l 8(sp)
	int a;

	struct variableStack * search = vs;
    caa8:	       move.l 16(sp),(sp)
	while (search) {
    caac:	   /-- bra.s cab8 <saveStack+0x18>
		elements ++;
    caae:	/--|-> addq.l #1,8(sp)
		search = search -> next;
    cab2:	|  |   movea.l (sp),a0
    cab4:	|  |   move.l 8(a0),(sp)
	while (search) {
    cab8:	|  \-> tst.l (sp)
    caba:	\----- bne.s caae <saveStack+0xe>
	}

	put2bytes (elements, fp);
    cabc:	       move.l 20(sp),-(sp)
    cac0:	       move.l 12(sp),-(sp)
    cac4:	       jsr 8d0 <put2bytes>
    caca:	       addq.l #8,sp
	search = vs;
    cacc:	       move.l 16(sp),(sp)
	for (a = 0; a < elements; a ++) {
    cad0:	       clr.l 4(sp)
    cad4:	   /-- bra.s caf0 <saveStack+0x50>
		saveVariable (& search -> thisVar, fp);
    cad6:	/--|-> move.l (sp),d0
    cad8:	|  |   move.l 20(sp),-(sp)
    cadc:	|  |   move.l d0,-(sp)
    cade:	|  |   jsr cc2c <saveVariable>
    cae4:	|  |   addq.l #8,sp
		search = search -> next;
    cae6:	|  |   movea.l (sp),a0
    cae8:	|  |   move.l 8(a0),(sp)
	for (a = 0; a < elements; a ++) {
    caec:	|  |   addq.l #1,4(sp)
    caf0:	|  \-> move.l 4(sp),d0
    caf4:	|      cmp.l 8(sp),d0
    caf8:	\----- blt.s cad6 <saveStack+0x36>
	}
}
    cafa:	       nop
    cafc:	       nop
    cafe:	       lea 12(sp),sp
    cb02:	       rts

0000cb04 <saveStackRef>:


BOOL saveStackRef (struct stackHandler * vs, BPTR fp) {
    cb04:	             lea -44(sp),sp
    cb08:	             move.l a6,-(sp)
    cb0a:	             move.l d2,-(sp)
	struct stackLibrary * s = stackLib;
    cb0c:	             move.l 1a834 <stackLib>,48(sp)
	int a = 0;
    cb14:	             clr.l 44(sp)
	while (s) {
    cb18:	      /----- bra.s cb76 <saveStackRef+0x72>
		if (s -> stack == vs) {
    cb1a:	   /--|----> movea.l 48(sp),a0
    cb1e:	   |  |      move.l (a0),d0
    cb20:	   |  |      cmp.l 56(sp),d0
    cb24:	   |  |  /-- bne.s cb68 <saveStackRef+0x64>
			FPutC (fp, 1);
    cb26:	   |  |  |   move.l 60(sp),16(sp)
    cb2c:	   |  |  |   moveq #1,d0
    cb2e:	   |  |  |   move.l d0,12(sp)
    cb32:	   |  |  |   move.l 1a7ac <DOSBase>,d0
    cb38:	   |  |  |   movea.l d0,a6
    cb3a:	   |  |  |   move.l 16(sp),d1
    cb3e:	   |  |  |   move.l 12(sp),d2
    cb42:	   |  |  |   jsr -312(a6)
    cb46:	   |  |  |   move.l d0,8(sp)
			put2bytes (stackLibTotal - a, fp);
    cb4a:	   |  |  |   move.l 1a830 <stackLibTotal>,d0
    cb50:	   |  |  |   sub.l 44(sp),d0
    cb54:	   |  |  |   move.l 60(sp),-(sp)
    cb58:	   |  |  |   move.l d0,-(sp)
    cb5a:	   |  |  |   jsr 8d0 <put2bytes>
    cb60:	   |  |  |   addq.l #8,sp
			return TRUE;
    cb62:	   |  |  |   moveq #1,d0
    cb64:	/--|--|--|-- bra.w cc22 <saveStackRef+0x11e>
		}
		s = s -> next;
    cb68:	|  |  |  \-> movea.l 48(sp),a0
    cb6c:	|  |  |      move.l 4(a0),48(sp)
		a ++;
    cb72:	|  |  |      addq.l #1,44(sp)
	while (s) {
    cb76:	|  |  \----> tst.l 48(sp)
    cb7a:	|  \-------- bne.s cb1a <saveStackRef+0x16>
	}
	FPutC (fp, 0);
    cb7c:	|            move.l 60(sp),40(sp)
    cb82:	|            clr.l 36(sp)
    cb86:	|            move.l 1a7ac <DOSBase>,d0
    cb8c:	|            movea.l d0,a6
    cb8e:	|            move.l 40(sp),d1
    cb92:	|            move.l 36(sp),d2
    cb96:	|            jsr -312(a6)
    cb9a:	|            move.l d0,32(sp)
	saveStack (vs -> first, fp);
    cb9e:	|            movea.l 56(sp),a0
    cba2:	|            move.l (a0),d0
    cba4:	|            move.l 60(sp),-(sp)
    cba8:	|            move.l d0,-(sp)
    cbaa:	|            jsr caa0 <saveStack>
    cbb0:	|            addq.l #8,sp
	s = AllocVec( sizeof(struct stackLibrary), MEMF_ANY);
    cbb2:	|            moveq #8,d0
    cbb4:	|            move.l d0,28(sp)
    cbb8:	|            clr.l 24(sp)
    cbbc:	|            move.l 1a7a4 <SysBase>,d0
    cbc2:	|            movea.l d0,a6
    cbc4:	|            move.l 28(sp),d0
    cbc8:	|            move.l 24(sp),d1
    cbcc:	|            jsr -684(a6)
    cbd0:	|            move.l d0,20(sp)
    cbd4:	|            move.l 20(sp),d0
    cbd8:	|            move.l d0,48(sp)
	stackLibTotal ++;
    cbdc:	|            move.l 1a830 <stackLibTotal>,d0
    cbe2:	|            addq.l #1,d0
    cbe4:	|            move.l d0,1a830 <stackLibTotal>
	if (! s) {
    cbea:	|            tst.l 48(sp)
    cbee:	|        /-- bne.s cc02 <saveStackRef+0xfe>
		KPrintF("saveStackRef: Cannot allocate memory");
    cbf0:	|        |   pea 191b2 <PutChar+0x16d4>
    cbf6:	|        |   jsr 1703c <KPrintF>
    cbfc:	|        |   addq.l #4,sp
		return FALSE;
    cbfe:	|        |   clr.w d0
    cc00:	+--------|-- bra.s cc22 <saveStackRef+0x11e>
	}
	s -> next = stackLib;
    cc02:	|        \-> move.l 1a834 <stackLib>,d0
    cc08:	|            movea.l 48(sp),a0
    cc0c:	|            move.l d0,4(a0)
	s -> stack = vs;
    cc10:	|            movea.l 48(sp),a0
    cc14:	|            move.l 56(sp),(a0)
	stackLib = s;
    cc18:	|            move.l 48(sp),1a834 <stackLib>
	return TRUE;
    cc20:	|            moveq #1,d0
}
    cc22:	\----------> move.l (sp)+,d2
    cc24:	             movea.l (sp)+,a6
    cc26:	             lea 44(sp),sp
    cc2a:	             rts

0000cc2c <saveVariable>:

BOOL saveVariable (struct variable * from, BPTR fp)
{
    cc2c:	          lea -12(sp),sp
    cc30:	          move.l a6,-(sp)
    cc32:	          move.l d2,-(sp)
	FPutC (fp,from -> varType);
    cc34:	          move.l 28(sp),16(sp)
    cc3a:	          movea.l 24(sp),a0
    cc3e:	          move.l (a0),d0
    cc40:	          move.l d0,12(sp)
    cc44:	          move.l 1a7ac <DOSBase>,d0
    cc4a:	          movea.l d0,a6
    cc4c:	          move.l 16(sp),d1
    cc50:	          move.l 12(sp),d2
    cc54:	          jsr -312(a6)
    cc58:	          move.l d0,8(sp)
	switch (from -> varType) {
    cc5c:	          movea.l 24(sp),a0
    cc60:	          move.l (a0),d0
    cc62:	          moveq #9,d1
    cc64:	          cmp.l d0,d1
    cc66:	      /-- bcs.w cd16 <saveVariable+0xea>
    cc6a:	      |   add.l d0,d0
    cc6c:	      |   movea.l d0,a0
    cc6e:	      |   adda.l #52346,a0
    cc74:	      |   move.w (a0),d0
    cc76:	      |   jmp (cc7a <saveVariable+0x4e>,pc,d0.w)
    cc7a:	      |   ori.l #1310740,(a0)+
    cc80:	      |   ori.b #20,(20,a0,d0.w)
    cc86:	      |   .short 0x004c
    cc88:	      |   ori.b #126,(a4)
    cc8c:	      |   ori.w #8303,-(a4)
		case SVT_INT:
		case SVT_FUNC:
		case SVT_BUILT:
		case SVT_FILE:
		case SVT_OBJTYPE:
		put4bytes (from -> varData.intValue, fp);
    cc90:	      |   ori.b #40,(a0)+
    cc94:	      |   ori.b #47,d4
    cc98:	      |   ori.b #0,(a4)+
    cc9c:	      |   jsr 958 <put4bytes>
    cca2:	      |   addq.l #8,sp
		return TRUE;
    cca4:	      |   moveq #1,d0
    cca6:	/-----|-- bra.w cd52 <saveVariable+0x126>

		case SVT_STRING:
		writeString (from -> varData.theString, fp);
    ccaa:	|     |   movea.l 24(sp),a0
    ccae:	|     |   move.l 4(a0),d0
    ccb2:	|     |   move.l 28(sp),-(sp)
    ccb6:	|     |   move.l d0,-(sp)
    ccb8:	|     |   jsr bd8 <writeString>
    ccbe:	|     |   addq.l #8,sp
		return TRUE;
    ccc0:	|     |   moveq #1,d0
    ccc2:	+-----|-- bra.w cd52 <saveVariable+0x126>

		case SVT_STACK:
		return saveStackRef (from -> varData.theStack, fp);
    ccc6:	|     |   movea.l 24(sp),a0
    ccca:	|     |   move.l 4(a0),d0
    ccce:	|     |   move.l 28(sp),-(sp)
    ccd2:	|     |   move.l d0,-(sp)
    ccd4:	|     |   jsr cb04 <saveStackRef>
    ccda:	|     |   addq.l #8,sp
    ccdc:	+-----|-- bra.s cd52 <saveVariable+0x126>

		case SVT_COSTUME:
		saveCostume (from -> varData.costumeHandler, fp);
    ccde:	|     |   movea.l 24(sp),a0
    cce2:	|     |   move.l 4(a0),d0
    cce6:	|     |   move.l 28(sp),-(sp)
    ccea:	|     |   move.l d0,-(sp)
    ccec:	|     |   jsr ae7a <saveCostume>
    ccf2:	|     |   addq.l #8,sp
		return FALSE;
    ccf4:	|     |   clr.w d0
    ccf6:	+-----|-- bra.s cd52 <saveVariable+0x126>

		case SVT_ANIM:
		saveAnim (from -> varData.animHandler, fp);
    ccf8:	|     |   movea.l 24(sp),a0
    ccfc:	|     |   move.l 4(a0),d0
    cd00:	|     |   move.l 28(sp),-(sp)
    cd04:	|     |   move.l d0,-(sp)
    cd06:	|     |   jsr adb0 <saveAnim>
    cd0c:	|     |   addq.l #8,sp
		return FALSE;
    cd0e:	|     |   clr.w d0
    cd10:	+-----|-- bra.s cd52 <saveVariable+0x126>

		case SVT_NULL:
		return FALSE;
    cd12:	|     |   clr.w d0
    cd14:	+-----|-- bra.s cd52 <saveVariable+0x126>

		default:
		KPrintF("Can't save variables of this type:",
					(from->varType < SVT_NUM_TYPES) ?
    cd16:	|     \-> movea.l 24(sp),a0
    cd1a:	|         move.l (a0),d0
		KPrintF("Can't save variables of this type:",
    cd1c:	|         moveq #10,d1
    cd1e:	|         cmp.l d0,d1
    cd20:	|  /----- bcs.s cd3a <saveVariable+0x10e>
						typeName[from->varType] :
    cd22:	|  |      movea.l 24(sp),a0
    cd26:	|  |      move.l (a0),d0
		KPrintF("Can't save variables of this type:",
    cd28:	|  |      add.l d0,d0
    cd2a:	|  |      movea.l d0,a1
    cd2c:	|  |      adda.l d0,a1
    cd2e:	|  |      lea 1a680 <typeName>,a0
    cd34:	|  |      move.l (0,a1,a0.l),d0
    cd38:	|  |  /-- bra.s cd40 <saveVariable+0x114>
    cd3a:	|  \--|-> move.l #102871,d0
    cd40:	|     \-> move.l d0,-(sp)
    cd42:	|         pea 191de <PutChar+0x1700>
    cd48:	|         jsr 1703c <KPrintF>
    cd4e:	|         addq.l #8,sp
						"bad ID");						
	}
	return TRUE;
    cd50:	|         moveq #1,d0
    cd52:	\-------> move.l (sp)+,d2
    cd54:	          movea.l (sp)+,a6
    cd56:	          lea 12(sp),sp
    cd5a:	          rts

0000cd5c <CsiCheckInput>:
extern struct inputType input;

UWORD counterx_old = 0;
UWORD countery_old = 0;

void CsiCheckInput() {
    cd5c:	          lea -12(sp),sp
    volatile struct Custom *custom = (struct Custom*)0xdff000;
    cd60:	          move.l #14675968,4(sp)
    UWORD value = custom->joy0dat;
    cd68:	          movea.l 4(sp),a0
    cd6c:	          move.w 10(a0),2(sp)
    UBYTE countery_new = (UBYTE) (custom->joy0dat >> 8);
    cd72:	          movea.l 4(sp),a0
    cd76:	          move.w 10(a0),d0
    cd7a:	          lsr.w #8,d0
    cd7c:	          move.b d0,1(sp)
    UBYTE counterx_new = (UBYTE) (custom->joy0dat & 0xffff);
    cd80:	          movea.l 4(sp),a0
    cd84:	          move.w 10(a0),d0
    cd88:	          move.b d0,(sp)

    if(counterx_new)
    cd8a:	/-------- beq.w ce30 <CsiCheckInput+0xd4>
    {
        WORD counterx_diff = counterx_new - counterx_old;
    cd8e:	|         clr.w d1
    cd90:	|         move.b (sp),d1
    cd92:	|         move.w 1a83c <counterx_old>,d0
    cd98:	|         sub.w d0,d1
    cd9a:	|         move.w d1,10(sp)

        if(counterx_diff > 127) {
    cd9e:	|         cmpi.w #128,10(sp)
    cda4:	|     /-- blt.s cdbc <CsiCheckInput+0x60>
            input.justMoved = TRUE;                
    cda6:	|     |   move.w #1,1a75a <input+0x4>
            counterx_diff -= 256;    
    cdae:	|     |   move.w 10(sp),d0
    cdb2:	|     |   addi.w #-256,d0
    cdb6:	|     |   move.w d0,10(sp)
    cdba:	|  /--|-- bra.s cde8 <CsiCheckInput+0x8c>
        } else if (counterx_diff < -128) {
    cdbc:	|  |  \-> cmpi.w #-129,10(sp)
    cdc2:	|  |  /-- bgt.s cdda <CsiCheckInput+0x7e>
            counterx_diff += 256;
    cdc4:	|  |  |   move.w 10(sp),d0
    cdc8:	|  |  |   addi.w #256,d0
    cdcc:	|  |  |   move.w d0,10(sp)
            input.justMoved = TRUE;
    cdd0:	|  |  |   move.w #1,1a75a <input+0x4>
    cdd8:	|  +--|-- bra.s cde8 <CsiCheckInput+0x8c>
        } else if (counterx_diff) {
    cdda:	|  |  \-> tst.w 10(sp)
    cdde:	|  +----- beq.s cde8 <CsiCheckInput+0x8c>
            input.justMoved = TRUE;
    cde0:	|  |      move.w #1,1a75a <input+0x4>
        }

        input.mouseX += counterx_diff;
    cde8:	|  \----> move.l 1a760 <input+0xa>,d0
    cdee:	|         movea.w 10(sp),a0
    cdf2:	|         add.l a0,d0
    cdf4:	|         move.l d0,1a760 <input+0xa>

        if( input.mouseX > (int) winWidth) {
    cdfa:	|         move.l 1a760 <input+0xa>,d1
    ce00:	|         move.l 1a6f8 <winWidth>,d0
    ce06:	|         cmp.l d1,d0
    ce08:	|     /-- bge.s ce18 <CsiCheckInput+0xbc>
            input.mouseX = winWidth;            
    ce0a:	|     |   move.l 1a6f8 <winWidth>,d0
    ce10:	|     |   move.l d0,1a760 <input+0xa>
    ce16:	|  /--|-- bra.s ce26 <CsiCheckInput+0xca>
        }
        else if(input.mouseX < 0) {
    ce18:	|  |  \-> move.l 1a760 <input+0xa>,d0
    ce1e:	|  +----- bpl.s ce26 <CsiCheckInput+0xca>
            input.mouseX = 0;
    ce20:	|  |      clr.l 1a760 <input+0xa>
        }

        //KPrintF("CsiCheckInput: MouseX = %d\n", input.mouseX);
        counterx_old = counterx_new;
    ce26:	|  \----> clr.w d0
    ce28:	|         move.b (sp),d0
    ce2a:	|         move.w d0,1a83c <counterx_old>
    }    

    if(countery_new)
    ce30:	\-------> tst.b 1(sp)
    ce34:	/-------- beq.w cede <CsiCheckInput+0x182>
    {
        WORD countery_diff = countery_new - countery_old;
    ce38:	|         clr.w d1
    ce3a:	|         move.b 1(sp),d1
    ce3e:	|         move.w 1a83e <countery_old>,d0
    ce44:	|         sub.w d0,d1
    ce46:	|         move.w d1,8(sp)

        if(countery_diff > 127) {
    ce4a:	|         cmpi.w #128,8(sp)
    ce50:	|     /-- blt.s ce68 <CsiCheckInput+0x10c>
            input.justMoved = TRUE;                
    ce52:	|     |   move.w #1,1a75a <input+0x4>
            countery_diff -= 256;    
    ce5a:	|     |   move.w 8(sp),d0
    ce5e:	|     |   addi.w #-256,d0
    ce62:	|     |   move.w d0,8(sp)
    ce66:	|  /--|-- bra.s ce94 <CsiCheckInput+0x138>
        } else if (countery_diff < -128) {
    ce68:	|  |  \-> cmpi.w #-129,8(sp)
    ce6e:	|  |  /-- bgt.s ce86 <CsiCheckInput+0x12a>
            input.justMoved = TRUE;                
    ce70:	|  |  |   move.w #1,1a75a <input+0x4>
            countery_diff += 256;
    ce78:	|  |  |   move.w 8(sp),d0
    ce7c:	|  |  |   addi.w #256,d0
    ce80:	|  |  |   move.w d0,8(sp)
    ce84:	|  +--|-- bra.s ce94 <CsiCheckInput+0x138>
        } else if (countery_diff) {
    ce86:	|  |  \-> tst.w 8(sp)
    ce8a:	|  +----- beq.s ce94 <CsiCheckInput+0x138>
            input.justMoved = TRUE;
    ce8c:	|  |      move.w #1,1a75a <input+0x4>
        }

        input.mouseY += countery_diff;
    ce94:	|  \----> move.l 1a764 <input+0xe>,d0
    ce9a:	|         movea.w 8(sp),a0
    ce9e:	|         add.l a0,d0
    cea0:	|         move.l d0,1a764 <input+0xe>

        if( input.mouseY > (int) winHeight) {
    cea6:	|         move.l 1a764 <input+0xe>,d1
    ceac:	|         move.l 1a6fc <winHeight>,d0
    ceb2:	|         cmp.l d1,d0
    ceb4:	|     /-- bge.s cec4 <CsiCheckInput+0x168>
            input.mouseY = winHeight;            
    ceb6:	|     |   move.l 1a6fc <winHeight>,d0
    cebc:	|     |   move.l d0,1a764 <input+0xe>
    cec2:	|  /--|-- bra.s ced2 <CsiCheckInput+0x176>
        }
        else if(input.mouseY < 0) {
    cec4:	|  |  \-> move.l 1a764 <input+0xe>,d0
    ceca:	|  +----- bpl.s ced2 <CsiCheckInput+0x176>
            input.mouseY = 0;
    cecc:	|  |      clr.l 1a764 <input+0xe>
        }

        //KPrintF("CsiCheckInput: MouseX = %d\n", input.mouseX);
        countery_old = countery_new;
    ced2:	|  \----> clr.w d0
    ced4:	|         move.b 1(sp),d0
    ced8:	|         move.w d0,1a83e <countery_old>
    } 

    input.leftRelease = FALSE;
    cede:	\-------> clr.w 1a75c <input+0x6>
    input.rightRelease = FALSE;
    cee4:	          clr.w 1a75e <input+0x8>

    if(input.leftClick && ((*(volatile UBYTE*)0xbfe001)&64))
    ceea:	          move.w 1a756 <input>,d0
    cef0:	      /-- beq.s cf16 <CsiCheckInput+0x1ba>
    cef2:	      |   movea.l #12574721,a0
    cef8:	      |   move.b (a0),d0
    cefa:	      |   move.b d0,d0
    cefc:	      |   andi.l #255,d0
    cf02:	      |   moveq #64,d1
    cf04:	      |   and.l d1,d0
    cf06:	      +-- beq.s cf16 <CsiCheckInput+0x1ba>
    {
        input.leftClick = FALSE;
    cf08:	      |   clr.w 1a756 <input>
        input.leftRelease = TRUE;
    cf0e:	      |   move.w #1,1a75c <input+0x6>
    }

    if(input.rightClick && ((*(volatile UWORD*)0xdff016)&(1<<10)))
    cf16:	      \-> move.w 1a758 <input+0x2>,d0
    cf1c:	      /-- beq.s cf44 <CsiCheckInput+0x1e8>
    cf1e:	      |   movea.l #14675990,a0
    cf24:	      |   move.w (a0),d0
    cf26:	      |   move.w d0,d0
    cf28:	      |   andi.l #65535,d0
    cf2e:	      |   andi.l #1024,d0
    cf34:	      +-- beq.s cf44 <CsiCheckInput+0x1e8>
    {
        input.rightClick = FALSE;
    cf36:	      |   clr.w 1a758 <input+0x2>
        input.rightRelease = TRUE;
    cf3c:	      |   move.w #1,1a75e <input+0x8>
    }


    if(!((*(volatile UBYTE*)0xbfe001)&64)) {
    cf44:	      \-> movea.l #12574721,a0
    cf4a:	          move.b (a0),d0
    cf4c:	          move.b d0,d0
    cf4e:	          andi.l #255,d0
    cf54:	          moveq #64,d1
    cf56:	          and.l d1,d0
    cf58:	      /-- bne.s cf62 <CsiCheckInput+0x206>
        input.leftClick = TRUE;              
    cf5a:	      |   move.w #1,1a756 <input>
    } 
    if(!((*(volatile UWORD*)0xdff016)&(1<<10)) ) {
    cf62:	      \-> movea.l #14675990,a0
    cf68:	          move.w (a0),d0
    cf6a:	          move.w d0,d0
    cf6c:	          andi.l #65535,d0
    cf72:	          andi.l #1024,d0
    cf78:	      /-- bne.s cf82 <CsiCheckInput+0x226>
        input.rightClick = TRUE;
    cf7a:	      |   move.w #1,1a758 <input+0x2>
    }

    cf82:	      \-> nop
    cf84:	          lea 12(sp),sp
    cf88:	          rts

0000cf8a <cacheSound>:

struct soundThing soundCache[MAX_SAMPLES];

int cacheSound (int f) {
//#pragma unused (f)
	return 0;
    cf8a:	moveq #0,d0
}
    cf8c:	rts

0000cf8e <huntKillFreeSound>:

void huntKillFreeSound (int filenum) {
//#pragma unused(filenum)
}
    cf8e:	nop
    cf90:	rts

0000cf92 <huntKillSound>:

void huntKillSound (int filenum) {
//#pragma unused(filenum)
}
    cf92:	nop
    cf94:	rts

0000cf96 <playMOD>:
	defVol = get2bytes (fp);
}

BOOL playMOD (int f, int a, int fromTrack) {
//#pragma unused (f,a,fromTrack)
    return TRUE;
    cf96:	moveq #1,d0
}
    cf98:	rts

0000cf9a <playSoundList>:

void playSoundList(struct soundList *s) {
}
    cf9a:	nop
    cf9c:	rts

0000cf9e <saveSounds>:

void saveSounds (BPTR fp) {
    cf9e:	lea -12(sp),sp
    cfa2:	move.l a6,-(sp)
    cfa4:	move.l d2,-(sp)
	FPutC (fp,0);
    cfa6:	move.l 24(sp),16(sp)
    cfac:	clr.l 12(sp)
    cfb0:	move.l 1a7ac <DOSBase>,d0
    cfb6:	movea.l d0,a6
    cfb8:	move.l 16(sp),d1
    cfbc:	move.l 12(sp),d2
    cfc0:	jsr -312(a6)
    cfc4:	move.l d0,8(sp)
	put2bytes (defSoundVol, fp);
    cfc8:	move.l 1a13e <defSoundVol>,d0
    cfce:	move.l 24(sp),-(sp)
    cfd2:	move.l d0,-(sp)
    cfd4:	jsr 8d0 <put2bytes>
    cfda:	addq.l #8,sp
	put2bytes (defVol, fp);
    cfdc:	move.l 1a13a <defVol>,d0
    cfe2:	move.l 24(sp),-(sp)
    cfe6:	move.l d0,-(sp)
    cfe8:	jsr 8d0 <put2bytes>
    cfee:	addq.l #8,sp
}
    cff0:	nop
    cff2:	move.l (sp)+,d2
    cff4:	movea.l (sp)+,a6
    cff6:	lea 12(sp),sp
    cffa:	rts

0000cffc <setDefaultMusicVolume>:

void setDefaultMusicVolume (int v) {
	defVol = v;
    cffc:	move.l 4(sp),1a13a <defVol>
}
    d004:	nop
    d006:	rts

0000d008 <setDefaultSoundVolume>:

void setDefaultSoundVolume (int v) {
	defSoundVol = v;
    d008:	move.l 4(sp),1a13e <defSoundVol>
}
    d010:	nop
    d012:	rts

0000d014 <setSoundLoop>:

void setSoundLoop (int a, int s, int e) {
//#pragma unused (a,s,e)
}
    d014:	nop
    d016:	rts

0000d018 <setMusicVolume>:

void setMusicVolume (int a, int v) {
//#pragma unused (a,v)
}
    d018:	nop
    d01a:	rts

0000d01c <setSoundVolume>:

void setSoundVolume (int a, int v) {
//#pragma unused (a,v)
}
    d01c:	nop
    d01e:	rts

0000d020 <startSound>:

BOOL startSound (int f, BOOL loopy) {	
    d020:	subq.l #4,sp
    d022:	move.l 12(sp),d0
    d026:	move.w d0,d0
    d028:	move.w d0,2(sp)
//#pragma unused (f,loopy)
	return TRUE;
    d02c:	moveq #1,d0
}
    d02e:	addq.l #4,sp
    d030:	rts

0000d032 <stopMOD>:

void stopMOD (int i) {
//#pragma unused(i)
    d032:	nop
    d034:	rts

0000d036 <blankScreen>:
int viewportWidth = 320;
int viewportOffsetX = 0, viewportOffsetY = 0;
unsigned int snapshotTextureName = 0;

void blankScreen(int x1, int y1, int x2, int y2) {
	CstBlankScreen(x2, y2);
    d036:	move.l 16(sp),-(sp)
    d03a:	move.l 16(sp),-(sp)
    d03e:	jsr e0e <CstBlankScreen>
    d044:	addq.l #8,sp
}
    d046:	nop
    d048:	rts

0000d04a <darkScreen>:

void darkScreen () {
	KPrintF("darkScreen: Amiga: Graphics Display not implemented yet."); //Todo: Amigize this
    d04a:	pea 19201 <PutChar+0x1723>
    d050:	jsr 1703c <KPrintF>
    d056:	addq.l #4,sp
}
    d058:	nop
    d05a:	rts

0000d05c <drawHorizontalLine>:
	//Amiga todo: Maybe some parallaxstuff here?
	//}
}

void drawHorizontalLine (unsigned int x1, unsigned int y, unsigned int x2) {
	drawLine (x1, y, x2, y);
    d05c:	movea.l 8(sp),a1
    d060:	movea.l 12(sp),a0
    d064:	move.l 8(sp),d1
    d068:	move.l 4(sp),d0
    d06c:	move.l a1,-(sp)
    d06e:	move.l a0,-(sp)
    d070:	move.l d1,-(sp)
    d072:	move.l d0,-(sp)
    d074:	jsr 3c22 <drawLine>
    d07a:	lea 16(sp),sp
}
    d07e:	nop
    d080:	rts

0000d082 <drawVerticalLine>:


void drawVerticalLine (unsigned int x, unsigned int y1, unsigned int y2) {
	drawLine (x, y1, x, y2);
    d082:	movea.l 12(sp),a1
    d086:	movea.l 4(sp),a0
    d08a:	move.l 8(sp),d1
    d08e:	move.l 4(sp),d0
    d092:	move.l a1,-(sp)
    d094:	move.l a0,-(sp)
    d096:	move.l d1,-(sp)
    d098:	move.l d0,-(sp)
    d09a:	jsr 3c22 <drawLine>
    d0a0:	lea 16(sp),sp
}
    d0a4:	nop
    d0a6:	rts

0000d0a8 <hardScroll>:

void hardScroll (int distance) {
   	KPrintF("Amiga: Function not implemented."); //Todo: Amigize this
    d0a8:	pea 1923a <PutChar+0x175c>
    d0ae:	jsr 1703c <KPrintF>
    d0b4:	addq.l #4,sp
}
    d0b6:	nop
    d0b8:	rts

0000d0ba <killBackDrop>:


void killBackDrop () {
	CstFreeBuffer();
    d0ba:	jsr 1b34 <CstFreeBuffer>
	deleteTextures (1, &backdropTextureName);
    d0c0:	pea 1a848 <backdropTextureName>
    d0c6:	pea 1 <_start+0x1>
    d0ca:	jsr 3da4 <deleteTextures>
    d0d0:	addq.l #8,sp
	backdropTextureName = 0;
    d0d2:	clr.l 1a848 <backdropTextureName>
	backdropExists = FALSE;
    d0d8:	clr.w 1a84c <backdropExists>
}
    d0de:	nop
    d0e0:	rts

0000d0e2 <killParallax>:

void killParallax () {
    d0e2:	          lea -12(sp),sp
    d0e6:	          move.l a6,-(sp)
	while (parallaxStuff) {
    d0e8:	   /----- bra.s d154 <killParallax+0x72>

		struct parallaxLayer * k = parallaxStuff;
    d0ea:	/--|----> move.l 1a84e <parallaxStuff>,12(sp)
		parallaxStuff = k->next;
    d0f2:	|  |      movea.l 12(sp),a0
    d0f6:	|  |      move.l 42(a0),d0
    d0fa:	|  |      move.l d0,1a84e <parallaxStuff>

		// Now kill the image
		deleteTextures (1, &k->textureName);
    d100:	|  |      move.l 12(sp),d0
    d104:	|  |      addq.l #4,d0
    d106:	|  |      move.l d0,-(sp)
    d108:	|  |      pea 1 <_start+0x1>
    d10c:	|  |      jsr 3da4 <deleteTextures>
    d112:	|  |      addq.l #8,sp
		if( k->texture) FreeVec(k->texture);
    d114:	|  |      movea.l 12(sp),a0
    d118:	|  |      move.l (a0),d0
    d11a:	|  |  /-- beq.s d134 <killParallax+0x52>
    d11c:	|  |  |   movea.l 12(sp),a0
    d120:	|  |  |   move.l (a0),8(sp)
    d124:	|  |  |   move.l 1a7a4 <SysBase>,d0
    d12a:	|  |  |   movea.l d0,a6
    d12c:	|  |  |   movea.l 8(sp),a1
    d130:	|  |  |   jsr -690(a6)
		if( k) FreeVec(k);
    d134:	|  |  \-> tst.l 12(sp)
    d138:	|  |  /-- beq.s d150 <killParallax+0x6e>
    d13a:	|  |  |   move.l 12(sp),4(sp)
    d140:	|  |  |   move.l 1a7a4 <SysBase>,d0
    d146:	|  |  |   movea.l d0,a6
    d148:	|  |  |   movea.l 4(sp),a1
    d14c:	|  |  |   jsr -690(a6)
		k = NULL;
    d150:	|  |  \-> clr.l 12(sp)
	while (parallaxStuff) {
    d154:	|  \----> move.l 1a84e <parallaxStuff>,d0
    d15a:	\-------- bne.s d0ea <killParallax+0x8>
	}
}
    d15c:	          nop
    d15e:	          nop
    d160:	          movea.l (sp)+,a6
    d162:	          lea 12(sp),sp
    d166:	          rts

0000d168 <loadBackDrop>:

void loadBackDrop (int fileNum, int x, int y) {
	if (! openFileFromNum (fileNum)) {
    d168:	       move.l 4(sp),-(sp)
    d16c:	       jsr 6b36 <openFileFromNum>
    d172:	       addq.l #4,sp
    d174:	       tst.l d0
    d176:	   /-- bne.s d188 <loadBackDrop+0x20>
		KPrintF("Can't load overlay image");
    d178:	   |   pea 1925b <PutChar+0x177d>
    d17e:	   |   jsr 1703c <KPrintF>
    d184:	   |   addq.l #4,sp
		return;
    d186:	/--|-- bra.s d1a8 <loadBackDrop+0x40>
	}
	CstLoadBackdrop( bigDataFile, x, y);
    d188:	|  \-> move.l 1a78c <bigDataFile>,d0
    d18e:	|      move.l 12(sp),-(sp)
    d192:	|      move.l 12(sp),-(sp)
    d196:	|      move.l d0,-(sp)
    d198:	|      jsr 1de2 <CstLoadBackdrop>
    d19e:	|      lea 12(sp),sp
	finishAccess ();
    d1a2:	|      jsr 6a2e <finishAccess>
	
}
    d1a8:	\----> rts

0000d1aa <loadParallax>:
	
	backdropExists = TRUE;
	return TRUE;
}

BOOL loadParallax (unsigned short v, unsigned short fracX, unsigned short fracY) {
    d1aa:	subq.l #8,sp
    d1ac:	movea.l 12(sp),a0
    d1b0:	move.l 16(sp),d1
    d1b4:	move.l 20(sp),d0
    d1b8:	movea.w a0,a0
    d1ba:	move.w a0,6(sp)
    d1be:	move.w d1,d1
    d1c0:	move.w d1,4(sp)
    d1c4:	move.w d0,d0
    d1c6:	move.w d0,2(sp)
	KPrintF("loadParallax: Not implemented yet."); //Amiga Todo: Amigize this	
    d1ca:	pea 192aa <PutChar+0x17cc>
    d1d0:	jsr 1703c <KPrintF>
    d1d6:	addq.l #4,sp

}
    d1d8:	nop
    d1da:	addq.l #8,sp
    d1dc:	rts

0000d1de <mixBackDrop>:

void mixBackDrop (int fileNum, int x, int y) {
	KPrintF("mixBackdrop: Amiga Graphics Display not implemented yet."); //Todo: Amigize this	
    d1de:	pea 192cd <PutChar+0x17ef>
    d1e4:	jsr 1703c <KPrintF>
    d1ea:	addq.l #4,sp
}
    d1ec:	nop
    d1ee:	rts

0000d1f0 <nosnapshot>:

void nosnapshot () {
	deleteTextures (1, &snapshotTextureName);
    d1f0:	pea 1a852 <snapshotTextureName>
    d1f6:	pea 1 <_start+0x1>
    d1fa:	jsr 3da4 <deleteTextures>
    d200:	addq.l #8,sp
	snapshotTextureName = 0;
    d202:	clr.l 1a852 <snapshotTextureName>
}
    d208:	nop
    d20a:	rts

0000d20c <reserveBackdrop>:

BOOL reserveBackdrop () {	
	cameraX = 0;
    d20c:	clr.l 1a85e <cameraX>
	cameraY = 0;
    d212:	clr.l 1a862 <cameraY>
	
	return CstReserveBackdrop(sceneWidth, sceneHeight);
    d218:	move.l 1a844 <sceneHeight>,d0
    d21e:	move.l d0,d1
    d220:	move.l 1a840 <sceneWidth>,d0
    d226:	move.l d1,-(sp)
    d228:	move.l d0,-(sp)
    d22a:	jsr 3728 <CstReserveBackdrop>
    d230:	addq.l #8,sp
}
    d232:	rts

0000d234 <resizeBackdrop>:

BOOL resizeBackdrop (int x, int y) {
    killBackDrop ();
    d234:	jsr d0ba <killBackDrop>
	killParallax ();
    d23a:	jsr d0e2 <killParallax>
	killZBuffer ();
    d240:	jsr 84d8 <killZBuffer>
	sceneWidth = x;
    d246:	move.l 4(sp),d0
    d24a:	move.l d0,1a840 <sceneWidth>
	sceneHeight = y;
    d250:	move.l 8(sp),d0
    d254:	move.l d0,1a844 <sceneHeight>
	KPrintF("resizeBackdrop: Reserving new Backdrop");
    d25a:	pea 19306 <PutChar+0x1828>
    d260:	jsr 1703c <KPrintF>
    d266:	addq.l #4,sp
	return reserveBackdrop();
    d268:	jsr d20c <reserveBackdrop>
	KPrintF("resizeBackdrop: Backdrop reserved");	
}
    d26e:	rts

0000d270 <restoreSnapshot>:

BOOL restoreSnapshot (BPTR fp) {
    d270:	subq.l #8,sp
	unsigned int picWidth = get2bytes (fp);
    d272:	move.l 12(sp),-(sp)
    d276:	jsr 6bc <get2bytes>
    d27c:	addq.l #4,sp
    d27e:	move.l d0,4(sp)
	unsigned int picHeight = get2bytes (fp);
    d282:	move.l 12(sp),-(sp)
    d286:	jsr 6bc <get2bytes>
    d28c:	addq.l #4,sp
    d28e:	move.l d0,(sp)

	//Todo: Amigize this?

	return TRUE;
    d290:	moveq #1,d0
}
    d292:	addq.l #8,sp
    d294:	rts

0000d296 <saveParallaxRecursive>:

void saveParallaxRecursive (struct parallaxLayer * me, BPTR fp) {
    d296:	   /-> lea -12(sp),sp
    d29a:	   |   move.l a6,-(sp)
    d29c:	   |   move.l d2,-(sp)
	if (me) {
    d29e:	   |   tst.l 24(sp)
    d2a2:	/--|-- beq.w d338 <saveParallaxRecursive+0xa2>
		saveParallaxRecursive (me -> next, fp);
    d2a6:	|  |   movea.l 24(sp),a0
    d2aa:	|  |   move.l 42(a0),d0
    d2ae:	|  |   move.l 28(sp),-(sp)
    d2b2:	|  |   move.l d0,-(sp)
    d2b4:	|  \-- jsr d296 <saveParallaxRecursive>(pc)
    d2b8:	|      addq.l #8,sp
		FPutC (fp, 1);
    d2ba:	|      move.l 28(sp),16(sp)
    d2c0:	|      moveq #1,d0
    d2c2:	|      move.l d0,12(sp)
    d2c6:	|      move.l 1a7ac <DOSBase>,d0
    d2cc:	|      movea.l d0,a6
    d2ce:	|      move.l 16(sp),d1
    d2d2:	|      move.l 12(sp),d2
    d2d6:	|      jsr -312(a6)
    d2da:	|      move.l d0,8(sp)
		put2bytes (me->fileNum, fp);
    d2de:	|      movea.l 24(sp),a0
    d2e2:	|      move.w 28(a0),d0
    d2e6:	|      move.w d0,d0
    d2e8:	|      andi.l #65535,d0
    d2ee:	|      move.l 28(sp),-(sp)
    d2f2:	|      move.l d0,-(sp)
    d2f4:	|      jsr 8d0 <put2bytes>
    d2fa:	|      addq.l #8,sp
		put2bytes (me ->fractionX, fp);
    d2fc:	|      movea.l 24(sp),a0
    d300:	|      move.w 30(a0),d0
    d304:	|      move.w d0,d0
    d306:	|      andi.l #65535,d0
    d30c:	|      move.l 28(sp),-(sp)
    d310:	|      move.l d0,-(sp)
    d312:	|      jsr 8d0 <put2bytes>
    d318:	|      addq.l #8,sp
		put2bytes (me->fractionY, fp);
    d31a:	|      movea.l 24(sp),a0
    d31e:	|      move.w 32(a0),d0
    d322:	|      move.w d0,d0
    d324:	|      andi.l #65535,d0
    d32a:	|      move.l 28(sp),-(sp)
    d32e:	|      move.l d0,-(sp)
    d330:	|      jsr 8d0 <put2bytes>
    d336:	|      addq.l #8,sp
	}
}
    d338:	\----> nop
    d33a:	       move.l (sp)+,d2
    d33c:	       movea.l (sp)+,a6
    d33e:	       lea 12(sp),sp
    d342:	       rts

0000d344 <snapshot>:

BOOL snapshot () {

	KPrintF("snapshot: Not yet implemented on Amiga"); //Todo
    d344:	pea 1932d <PutChar+0x184f>
    d34a:	jsr 1703c <KPrintF>
    d350:	addq.l #4,sp
	return TRUE;
    d352:	moveq #1,d0
    d354:	rts

0000d356 <findObjectType>:
#include "moreio.h"
#include "support/gcc8_c_support.h"

struct objectType * allObjectTypes = NULL;

struct objectType * findObjectType (int i) {
    d356:	             subq.l #4,sp
	struct objectType * huntType = allObjectTypes;
    d358:	             move.l 1a856 <allObjectTypes>,(sp)

	while (huntType) {
    d35e:	      /----- bra.s d376 <findObjectType+0x20>
		if (huntType -> objectNum == i) return huntType;
    d360:	   /--|----> movea.l (sp),a0
    d362:	   |  |      move.l 4(a0),d0
    d366:	   |  |      cmp.l 8(sp),d0
    d36a:	   |  |  /-- bne.s d370 <findObjectType+0x1a>
    d36c:	   |  |  |   move.l (sp),d0
    d36e:	/--|--|--|-- bra.s d386 <findObjectType+0x30>
		huntType = huntType -> next;
    d370:	|  |  |  \-> movea.l (sp),a0
    d372:	|  |  |      move.l 8(a0),(sp)
	while (huntType) {
    d376:	|  |  \----> tst.l (sp)
    d378:	|  \-------- bne.s d360 <findObjectType+0xa>
	}

	return loadObjectType (i);
    d37a:	|            move.l 8(sp),-(sp)
    d37e:	|            jsr d446 <loadObjectType>
    d384:	|            addq.l #4,sp
}
    d386:	\----------> addq.l #4,sp
    d388:	             rts

0000d38a <getCombinationFunction>:

int getCombinationFunction (int withThis, int thisObject) {
    d38a:	             lea -12(sp),sp
	int i, num = 0;
    d38e:	             clr.l 4(sp)
	struct objectType * obj = findObjectType (thisObject);
    d392:	             move.l 20(sp),-(sp)
    d396:	             jsr d356 <findObjectType>
    d39c:	             addq.l #4,sp
    d39e:	             move.l d0,(sp)

	for (i = 0; i < obj -> numCom; i ++) {
    d3a0:	             clr.l 8(sp)
    d3a4:	   /-------- bra.s d3da <getCombinationFunction+0x50>
		if (obj -> allCombis[i].withObj == withThis)
    d3a6:	/--|-------> movea.l (sp),a0
    d3a8:	|  |         move.l 38(a0),d1
    d3ac:	|  |         move.l 8(sp),d0
    d3b0:	|  |         lsl.l #3,d0
    d3b2:	|  |         movea.l d1,a0
    d3b4:	|  |         adda.l d0,a0
    d3b6:	|  |         move.l (a0),d0
    d3b8:	|  |         cmp.l 16(sp),d0
    d3bc:	|  |  /----- bne.s d3d6 <getCombinationFunction+0x4c>
		{
			num = obj -> allCombis[i].funcNum;
    d3be:	|  |  |      movea.l (sp),a0
    d3c0:	|  |  |      move.l 38(a0),d1
    d3c4:	|  |  |      move.l 8(sp),d0
    d3c8:	|  |  |      lsl.l #3,d0
    d3ca:	|  |  |      movea.l d1,a0
    d3cc:	|  |  |      adda.l d0,a0
    d3ce:	|  |  |      move.l 4(a0),4(sp)
			break;
    d3d4:	|  |  |  /-- bra.s d3e6 <getCombinationFunction+0x5c>
	for (i = 0; i < obj -> numCom; i ++) {
    d3d6:	|  |  \--|-> addq.l #1,8(sp)
    d3da:	|  \-----|-> movea.l (sp),a0
    d3dc:	|        |   move.l 16(a0),d0
    d3e0:	|        |   cmp.l 8(sp),d0
    d3e4:	\--------|-- bgt.s d3a6 <getCombinationFunction+0x1c>
		}
	}

	return num;
    d3e6:	         \-> move.l 4(sp),d0
}
    d3ea:	             lea 12(sp),sp
    d3ee:	             rts

0000d3f0 <initObjectTypes>:

BOOL initObjectTypes () {
	return TRUE;
    d3f0:	moveq #1,d0
}
    d3f2:	rts

0000d3f4 <loadObjectRef>:

struct objectType * loadObjectRef (BPTR fp) {
    d3f4:	subq.l #8,sp
    d3f6:	move.l a6,-(sp)
	struct objectType * r = loadObjectType (get2bytes (fp));
    d3f8:	move.l 16(sp),-(sp)
    d3fc:	jsr 6bc <get2bytes>
    d402:	addq.l #4,sp
    d404:	move.l d0,-(sp)
    d406:	jsr d446 <loadObjectType>
    d40c:	addq.l #4,sp
    d40e:	move.l d0,8(sp)
	FreeVec(r -> screenName);
    d412:	movea.l 8(sp),a0
    d416:	move.l (a0),4(sp)
    d41a:	move.l 1a7a4 <SysBase>,d0
    d420:	movea.l d0,a6
    d422:	movea.l 4(sp),a1
    d426:	jsr -690(a6)
	r -> screenName = readString (fp);
    d42a:	move.l 16(sp),-(sp)
    d42e:	jsr b02 <readString>
    d434:	addq.l #4,sp
    d436:	movea.l 8(sp),a0
    d43a:	move.l d0,(a0)
	return r;
    d43c:	move.l 8(sp),d0
}
    d440:	movea.l (sp)+,a6
    d442:	addq.l #8,sp
    d444:	rts

0000d446 <loadObjectType>:

struct objectType * loadObjectType (int i) {
    d446:	          lea -84(sp),sp
    d44a:	          move.l a6,-(sp)
    d44c:	          move.l a2,-(sp)
    int a, nameNum;
    struct objectType * newType = AllocVec(sizeof(struct objectType), MEMF_ANY);
    d44e:	          moveq #42,d0
    d450:	          move.l d0,84(sp)
    d454:	          clr.l 80(sp)
    d458:	          move.l 1a7a4 <SysBase>,d0
    d45e:	          movea.l d0,a6
    d460:	          move.l 84(sp),d0
    d464:	          move.l 80(sp),d1
    d468:	          jsr -684(a6)
    d46c:	          move.l d0,76(sp)
    d470:	          move.l 76(sp),d0
    d474:	          move.l d0,72(sp)

    if (newType) {
    d478:	/-------- beq.w d6f2 <loadObjectType+0x2ac>
        if (openObjectSlice(i)) {
    d47c:	|         move.l 96(sp),-(sp)
    d480:	|         jsr 6bfe <openObjectSlice>
    d486:	|         addq.l #4,sp
    d488:	|         tst.w d0
    d48a:	+-------- beq.w d6f2 <loadObjectType+0x2ac>
            nameNum = get2bytes(bigDataFile);
    d48e:	|         move.l 1a78c <bigDataFile>,d0
    d494:	|         move.l d0,-(sp)
    d496:	|         jsr 6bc <get2bytes>
    d49c:	|         addq.l #4,sp
    d49e:	|         move.l d0,68(sp)
            newType->r = (BYTE) FGetC(bigDataFile);
    d4a2:	|         move.l 1a78c <bigDataFile>,64(sp)
    d4aa:	|         move.l 1a7ac <DOSBase>,d0
    d4b0:	|         movea.l d0,a6
    d4b2:	|         move.l 64(sp),d1
    d4b6:	|         jsr -306(a6)
    d4ba:	|         move.l d0,60(sp)
    d4be:	|         move.l 60(sp),d0
    d4c2:	|         move.l d0,d0
    d4c4:	|         movea.l 72(sp),a0
    d4c8:	|         move.b d0,12(a0)
            newType->g = (BYTE) FGetC(bigDataFile);
    d4cc:	|         move.l 1a78c <bigDataFile>,56(sp)
    d4d4:	|         move.l 1a7ac <DOSBase>,d0
    d4da:	|         movea.l d0,a6
    d4dc:	|         move.l 56(sp),d1
    d4e0:	|         jsr -306(a6)
    d4e4:	|         move.l d0,52(sp)
    d4e8:	|         move.l 52(sp),d0
    d4ec:	|         move.l d0,d0
    d4ee:	|         movea.l 72(sp),a0
    d4f2:	|         move.b d0,13(a0)
            newType->b = (BYTE) FGetC(bigDataFile);
    d4f6:	|         move.l 1a78c <bigDataFile>,48(sp)
    d4fe:	|         move.l 1a7ac <DOSBase>,d0
    d504:	|         movea.l d0,a6
    d506:	|         move.l 48(sp),d1
    d50a:	|         jsr -306(a6)
    d50e:	|         move.l d0,44(sp)
    d512:	|         move.l 44(sp),d0
    d516:	|         move.l d0,d0
    d518:	|         movea.l 72(sp),a0
    d51c:	|         move.b d0,14(a0)
            newType->speechGap = FGetC(bigDataFile);
    d520:	|         move.l 1a78c <bigDataFile>,40(sp)
    d528:	|         move.l 1a7ac <DOSBase>,d0
    d52e:	|         movea.l d0,a6
    d530:	|         move.l 40(sp),d1
    d534:	|         jsr -306(a6)
    d538:	|         move.l d0,36(sp)
    d53c:	|         move.l 36(sp),d0
    d540:	|         movea.l 72(sp),a0
    d544:	|         move.l d0,20(a0)
            newType->walkSpeed = FGetC(bigDataFile);
    d548:	|         move.l 1a78c <bigDataFile>,32(sp)
    d550:	|         move.l 1a7ac <DOSBase>,d0
    d556:	|         movea.l d0,a6
    d558:	|         move.l 32(sp),d1
    d55c:	|         jsr -306(a6)
    d560:	|         move.l d0,28(sp)
    d564:	|         move.l 28(sp),d0
    d568:	|         movea.l 72(sp),a0
    d56c:	|         move.l d0,24(a0)
            newType->wrapSpeech = get4bytes(bigDataFile);
    d570:	|         move.l 1a78c <bigDataFile>,d0
    d576:	|         move.l d0,-(sp)
    d578:	|         jsr 718 <get4bytes>
    d57e:	|         addq.l #4,sp
    d580:	|         movea.l 72(sp),a0
    d584:	|         move.l d0,28(a0)
            newType->spinSpeed = get2bytes(bigDataFile);
    d588:	|         move.l 1a78c <bigDataFile>,d0
    d58e:	|         move.l d0,-(sp)
    d590:	|         jsr 6bc <get2bytes>
    d596:	|         addq.l #4,sp
    d598:	|         movea.l 72(sp),a0
    d59c:	|         move.l d0,32(a0)

            FGetC(bigDataFile);
    d5a0:	|         move.l 1a78c <bigDataFile>,24(sp)
    d5a8:	|         move.l 1a7ac <DOSBase>,d0
    d5ae:	|         movea.l d0,a6
    d5b0:	|         move.l 24(sp),d1
    d5b4:	|         jsr -306(a6)
    d5b8:	|         move.l d0,20(sp)
            getFloat(bigDataFile);
    d5bc:	|         move.l 1a78c <bigDataFile>,d0
    d5c2:	|         move.l d0,-(sp)
    d5c4:	|         jsr 7d8 <getFloat>
    d5ca:	|         addq.l #4,sp
            getFloat(bigDataFile);
    d5cc:	|         move.l 1a78c <bigDataFile>,d0
    d5d2:	|         move.l d0,-(sp)
    d5d4:	|         jsr 7d8 <getFloat>
    d5da:	|         addq.l #4,sp

            newType->flags = get2bytes(bigDataFile);
    d5dc:	|         move.l 1a78c <bigDataFile>,d0
    d5e2:	|         move.l d0,-(sp)
    d5e4:	|         jsr 6bc <get2bytes>
    d5ea:	|         addq.l #4,sp
    d5ec:	|         move.l d0,d0
    d5ee:	|         movea.l 72(sp),a0
    d5f2:	|         move.w d0,36(a0)

            newType->numCom = get2bytes(bigDataFile);
    d5f6:	|         move.l 1a78c <bigDataFile>,d0
    d5fc:	|         move.l d0,-(sp)
    d5fe:	|         jsr 6bc <get2bytes>
    d604:	|         addq.l #4,sp
    d606:	|         movea.l 72(sp),a0
    d60a:	|         move.l d0,16(a0)
            newType->allCombis = (newType->numCom) ? AllocVec(sizeof(struct combination) * newType->numCom, MEMF_ANY) : NULL;
    d60e:	|         movea.l 72(sp),a0
    d612:	|         move.l 16(a0),d0
    d616:	|  /----- beq.s d648 <loadObjectType+0x202>
    d618:	|  |      movea.l 72(sp),a0
    d61c:	|  |      move.l 16(a0),d0
    d620:	|  |      lsl.l #3,d0
    d622:	|  |      move.l d0,16(sp)
    d626:	|  |      clr.l 12(sp)
    d62a:	|  |      move.l 1a7a4 <SysBase>,d0
    d630:	|  |      movea.l d0,a6
    d632:	|  |      move.l 16(sp),d0
    d636:	|  |      move.l 12(sp),d1
    d63a:	|  |      jsr -684(a6)
    d63e:	|  |      move.l d0,8(sp)
    d642:	|  |      move.l 8(sp),d0
    d646:	|  |  /-- bra.s d64a <loadObjectType+0x204>
    d648:	|  \--|-> moveq #0,d0
    d64a:	|     \-> movea.l 72(sp),a0
    d64e:	|         move.l d0,38(a0)

            for (a = 0; a < newType->numCom; a++) {
    d652:	|         clr.l 88(sp)
    d656:	|     /-- bra.s d6a6 <loadObjectType+0x260>
                newType->allCombis[a].withObj = get2bytes(bigDataFile);
    d658:	|  /--|-> move.l 1a78c <bigDataFile>,d1
    d65e:	|  |  |   movea.l 72(sp),a0
    d662:	|  |  |   movea.l 38(a0),a0
    d666:	|  |  |   move.l 88(sp),d0
    d66a:	|  |  |   lsl.l #3,d0
    d66c:	|  |  |   lea (0,a0,d0.l),a2
    d670:	|  |  |   move.l d1,-(sp)
    d672:	|  |  |   jsr 6bc <get2bytes>
    d678:	|  |  |   addq.l #4,sp
    d67a:	|  |  |   move.l d0,(a2)
                newType->allCombis[a].funcNum = get2bytes(bigDataFile);
    d67c:	|  |  |   move.l 1a78c <bigDataFile>,d1
    d682:	|  |  |   movea.l 72(sp),a0
    d686:	|  |  |   movea.l 38(a0),a0
    d68a:	|  |  |   move.l 88(sp),d0
    d68e:	|  |  |   lsl.l #3,d0
    d690:	|  |  |   lea (0,a0,d0.l),a2
    d694:	|  |  |   move.l d1,-(sp)
    d696:	|  |  |   jsr 6bc <get2bytes>
    d69c:	|  |  |   addq.l #4,sp
    d69e:	|  |  |   move.l d0,4(a2)
            for (a = 0; a < newType->numCom; a++) {
    d6a2:	|  |  |   addq.l #1,88(sp)
    d6a6:	|  |  \-> movea.l 72(sp),a0
    d6aa:	|  |      move.l 16(a0),d0
    d6ae:	|  |      cmp.l 88(sp),d0
    d6b2:	|  \----- bgt.s d658 <loadObjectType+0x212>
            }
            finishAccess();
    d6b4:	|         jsr 6a2e <finishAccess>
            newType->screenName = getNumberedString(nameNum);
    d6ba:	|         move.l 68(sp),-(sp)
    d6be:	|         jsr 6a38 <getNumberedString>
    d6c4:	|         addq.l #4,sp
    d6c6:	|         movea.l 72(sp),a0
    d6ca:	|         move.l d0,(a0)
            newType->objectNum = i;
    d6cc:	|         movea.l 72(sp),a0
    d6d0:	|         move.l 96(sp),4(a0)
            newType->next = allObjectTypes;
    d6d6:	|         move.l 1a856 <allObjectTypes>,d0
    d6dc:	|         movea.l 72(sp),a0
    d6e0:	|         move.l d0,8(a0)
            allObjectTypes = newType;
    d6e4:	|         move.l 72(sp),1a856 <allObjectTypes>
            return newType;
    d6ec:	|         move.l 72(sp),d0
    d6f0:	|     /-- bra.s d6f4 <loadObjectType+0x2ae>
        }
    }
    return NULL;
    d6f2:	\-----|-> moveq #0,d0
}
    d6f4:	      \-> movea.l (sp)+,a2
    d6f6:	          movea.l (sp)+,a6
    d6f8:	          lea 84(sp),sp
    d6fc:	          rts

0000d6fe <removeObjectType>:


void removeObjectType (struct objectType * oT) {
    d6fe:	             lea -16(sp),sp
    d702:	             move.l a6,-(sp)
	struct objectType * * huntRegion = &allObjectTypes;
    d704:	             move.l #108630,16(sp)

	while (* huntRegion) {
    d70c:	   /-------- bra.s d780 <removeObjectType+0x82>
		if ((* huntRegion) == oT) {
    d70e:	/--|-------> movea.l 16(sp),a0
    d712:	|  |         move.l (a0),d0
    d714:	|  |         cmp.l 24(sp),d0
    d718:	|  |  /----- bne.s d772 <removeObjectType+0x74>
//			FILE * debuggy2 = fopen ("debug.txt", "at");
//			fprintf (debuggy2, "DELETING OBJECT TYPE: %p %s\n", oT, oT -> screenName);
//			fclose (debuggy2);

			* huntRegion = oT -> next;
    d71a:	|  |  |      movea.l 24(sp),a0
    d71e:	|  |  |      move.l 8(a0),d0
    d722:	|  |  |      movea.l 16(sp),a0
    d726:	|  |  |      move.l d0,(a0)
			FreeVec(oT -> allCombis);
    d728:	|  |  |      movea.l 24(sp),a0
    d72c:	|  |  |      move.l 38(a0),12(sp)
    d732:	|  |  |      move.l 1a7a4 <SysBase>,d0
    d738:	|  |  |      movea.l d0,a6
    d73a:	|  |  |      movea.l 12(sp),a1
    d73e:	|  |  |      jsr -690(a6)
			FreeVec(oT -> screenName);
    d742:	|  |  |      movea.l 24(sp),a0
    d746:	|  |  |      move.l (a0),8(sp)
    d74a:	|  |  |      move.l 1a7a4 <SysBase>,d0
    d750:	|  |  |      movea.l d0,a6
    d752:	|  |  |      movea.l 8(sp),a1
    d756:	|  |  |      jsr -690(a6)
			FreeVec(oT);
    d75a:	|  |  |      move.l 24(sp),4(sp)
    d760:	|  |  |      move.l 1a7a4 <SysBase>,d0
    d766:	|  |  |      movea.l d0,a6
    d768:	|  |  |      movea.l 4(sp),a1
    d76c:	|  |  |      jsr -690(a6)
			return;
    d770:	|  |  |  /-- bra.s d796 <removeObjectType+0x98>
		} else {
			huntRegion = & ((* huntRegion) -> next);
    d772:	|  |  \--|-> movea.l 16(sp),a0
    d776:	|  |     |   move.l (a0),d0
    d778:	|  |     |   move.l d0,d1
    d77a:	|  |     |   addq.l #8,d1
    d77c:	|  |     |   move.l d1,16(sp)
	while (* huntRegion) {
    d780:	|  \-----|-> movea.l 16(sp),a0
    d784:	|        |   move.l (a0),d0
    d786:	\--------|-- bne.s d70e <removeObjectType+0x10>
		}
	}
	KPrintF("Can't delete object type: bad pointer");
    d788:	         |   pea 19354 <PutChar+0x1876>
    d78e:	         |   jsr 1703c <KPrintF>
    d794:	         |   addq.l #4,sp
}
    d796:	         \-> movea.l (sp)+,a6
    d798:	             lea 16(sp),sp
    d79c:	             rts

0000d79e <saveObjectRef>:

void saveObjectRef (struct objectType * r, BPTR fp) {
	put2bytes (r -> objectNum, fp);
    d79e:	movea.l 4(sp),a0
    d7a2:	move.l 4(a0),d0
    d7a6:	move.l 8(sp),-(sp)
    d7aa:	move.l d0,-(sp)
    d7ac:	jsr 8d0 <put2bytes>
    d7b2:	addq.l #8,sp
	writeString (r -> screenName, fp);
    d7b4:	movea.l 4(sp),a0
    d7b8:	move.l (a0),d0
    d7ba:	move.l 8(sp),-(sp)
    d7be:	move.l d0,-(sp)
    d7c0:	jsr bd8 <writeString>
    d7c6:	addq.l #8,sp
    d7c8:	nop
    d7ca:	rts

0000d7cc <fileToStack>:

char encode1 = 0;
char encode2 = 0;
unsigned short saveEncoding = FALSE;

BOOL fileToStack(char *filename, struct stackHandler *sH) {
    d7cc:	                         lea -112(sp),sp
    d7d0:	                         move.l a6,-(sp)
    d7d2:	                         move.l d2,-(sp)
    struct variable stringVar;
    stringVar.varType = SVT_NULL;
    d7d4:	                         clr.l 10(sp)
    const char *checker = saveEncoding ? "[Custom data (encoded)]\r\n" : "[Custom data (ASCII)]\n";
    d7d8:	                         move.w 1a85c <saveEncoding>,d0
    d7de:	                  /----- beq.s d7e8 <fileToStack+0x1c>
    d7e0:	                  |      move.l #103290,d0
    d7e6:	                  |  /-- bra.s d7ee <fileToStack+0x22>
    d7e8:	                  \--|-> move.l #103316,d0
    d7ee:	                     \-> move.l d0,116(sp)

    BPTR fp = Open(filename, MODE_OLDFILE);
    d7f2:	                         move.l 124(sp),112(sp)
    d7f8:	                         move.l #1005,108(sp)
    d800:	                         move.l 1a7ac <DOSBase>,d0
    d806:	                         movea.l d0,a6
    d808:	                         move.l 112(sp),d1
    d80c:	                         move.l 108(sp),d2
    d810:	                         jsr -30(a6)
    d814:	                         move.l d0,104(sp)
    d818:	                         move.l 104(sp),d0
    d81c:	                         move.l d0,100(sp)
    if (!fp) {
    d820:	                     /-- bne.s d83a <fileToStack+0x6e>
        KPrintF("No such file", filename);
    d822:	                     |   move.l 124(sp),-(sp)
    d826:	                     |   pea 193ab <PutChar+0x18cd>
    d82c:	                     |   jsr 1703c <KPrintF>
    d832:	                     |   addq.l #8,sp
        return FALSE;
    d834:	                     |   clr.w d0
    d836:	/--------------------|-- bra.w db30 <fileToStack+0x364>
    }

    encode1 = (unsigned char)saveEncoding & 255;
    d83a:	|                    \-> move.w 1a85c <saveEncoding>,d0
    d840:	|                        move.l d0,d0
    d842:	|                        move.b d0,1a85a <encode1>
    encode2 = (unsigned char)(saveEncoding >> 8);
    d848:	|                        move.w 1a85c <saveEncoding>,d0
    d84e:	|                        lsr.w #8,d0
    d850:	|                        move.l d0,d0
    d852:	|                        move.b d0,1a85b <encode2>

    while (*checker) {
    d858:	|                 /----- bra.s d8bc <fileToStack+0xf0>
        if (FGetC(fp) != *checker) {
    d85a:	|              /--|----> move.l 100(sp),30(sp)
    d860:	|              |  |      move.l 1a7ac <DOSBase>,d0
    d866:	|              |  |      movea.l d0,a6
    d868:	|              |  |      move.l 30(sp),d1
    d86c:	|              |  |      jsr -306(a6)
    d870:	|              |  |      move.l d0,26(sp)
    d874:	|              |  |      move.l 26(sp),d1
    d878:	|              |  |      movea.l 116(sp),a0
    d87c:	|              |  |      move.b (a0),d0
    d87e:	|              |  |      ext.w d0
    d880:	|              |  |      movea.w d0,a0
    d882:	|              |  |      cmpa.l d1,a0
    d884:	|              |  |  /-- beq.s d8b8 <fileToStack+0xec>
            Close(fp);
    d886:	|              |  |  |   move.l 100(sp),22(sp)
    d88c:	|              |  |  |   move.l 1a7ac <DOSBase>,d0
    d892:	|              |  |  |   movea.l d0,a6
    d894:	|              |  |  |   move.l 22(sp),d1
    d898:	|              |  |  |   jsr -36(a6)
    d89c:	|              |  |  |   move.l d0,18(sp)
            KPrintF(LOAD_ERROR "This isn't a SLUDGE custom data file:", filename);
    d8a0:	|              |  |  |   move.l 124(sp),-(sp)
    d8a4:	|              |  |  |   pea 193b8 <PutChar+0x18da>
    d8aa:	|              |  |  |   jsr 1703c <KPrintF>
    d8b0:	|              |  |  |   addq.l #8,sp
            return FALSE;
    d8b2:	|              |  |  |   clr.w d0
    d8b4:	+--------------|--|--|-- bra.w db30 <fileToStack+0x364>
        }
        checker++;
    d8b8:	|              |  |  \-> addq.l #1,116(sp)
    while (*checker) {
    d8bc:	|              |  \----> movea.l 116(sp),a0
    d8c0:	|              |         move.b (a0),d0
    d8c2:	|              \-------- bne.s d85a <fileToStack+0x8e>
    }

    if (saveEncoding) {
    d8c4:	|                        move.w 1a85c <saveEncoding>,d0
    d8ca:	|  /-------------------- beq.s d93e <fileToStack+0x172>
        char *checker = readStringEncoded(fp);
    d8cc:	|  |                     move.l 100(sp),-(sp)
    d8d0:	|  |                     jsr db3a <readStringEncoded>
    d8d6:	|  |                     addq.l #4,sp
    d8d8:	|  |                     move.l d0,96(sp)
        if (strcmp(checker, "UN�LO�CKED")) {
    d8dc:	|  |                     pea 193f9 <PutChar+0x191b>
    d8e2:	|  |                     move.l 100(sp),-(sp)
    d8e6:	|  |                     jsr 13a9c <strcmp>
    d8ec:	|  |                     addq.l #8,sp
    d8ee:	|  |                     tst.l d0
    d8f0:	|  |                 /-- beq.s d924 <fileToStack+0x158>
            Close(fp);
    d8f2:	|  |                 |   move.l 100(sp),88(sp)
    d8f8:	|  |                 |   move.l 1a7ac <DOSBase>,d0
    d8fe:	|  |                 |   movea.l d0,a6
    d900:	|  |                 |   move.l 88(sp),d1
    d904:	|  |                 |   jsr -36(a6)
    d908:	|  |                 |   move.l d0,84(sp)
            KPrintF(LOAD_ERROR "The current file encoding setting does not match the encoding setting used when this file was created:", filename);
    d90c:	|  |                 |   move.l 124(sp),-(sp)
    d910:	|  |                 |   pea 19408 <PutChar+0x192a>
    d916:	|  |                 |   jsr 1703c <KPrintF>
    d91c:	|  |                 |   addq.l #8,sp
            return FALSE;
    d91e:	|  |                 |   clr.w d0
    d920:	+--|-----------------|-- bra.w db30 <fileToStack+0x364>
        }
        FreeVec(checker);
    d924:	|  |                 \-> move.l 96(sp),92(sp)
    d92a:	|  |                     move.l 1a7a4 <SysBase>,d0
    d930:	|  |                     movea.l d0,a6
    d932:	|  |                     movea.l 92(sp),a1
    d936:	|  |                     jsr -690(a6)
        checker = NULL;
    d93a:	|  |                     clr.l 96(sp)
    }

    for (;;) {
        if (saveEncoding) {
    d93e:	|  >-------------------> move.w 1a85c <saveEncoding>,d0
    d944:	|  |     /-------------- beq.w da78 <fileToStack+0x2ac>
            LONG tmp = FGetC(fp) ^ encode1;
    d948:	|  |     |               move.l 100(sp),76(sp)
    d94e:	|  |     |               move.l 1a7ac <DOSBase>,d0
    d954:	|  |     |               movea.l d0,a6
    d956:	|  |     |               move.l 76(sp),d1
    d95a:	|  |     |               jsr -306(a6)
    d95e:	|  |     |               move.l d0,72(sp)
    d962:	|  |     |               move.l 72(sp),d0
    d966:	|  |     |               move.b 1a85a <encode1>,d1
    d96c:	|  |     |               ext.w d1
    d96e:	|  |     |               ext.l d1
    d970:	|  |     |               move.l d0,d2
    d972:	|  |     |               eor.l d1,d2
    d974:	|  |     |               move.l d2,68(sp)

            if (tmp == -1) break;
    d978:	|  |     |               moveq #-1,d0
    d97a:	|  |     |               cmp.l 68(sp),d0
    d97e:	|  |  /--|-------------- beq.w db0e <fileToStack+0x342>

            char i = (char) tmp;
    d982:	|  |  |  |               move.b 71(sp),67(sp)

            switch (i) {
    d988:	|  |  |  |               move.b 67(sp),d0
    d98c:	|  |  |  |               ext.w d0
    d98e:	|  |  |  |               movea.w d0,a0
    d990:	|  |  |  |               moveq #2,d2
    d992:	|  |  |  |               cmp.l a0,d2
    d994:	|  |  |  |     /-------- beq.s da10 <fileToStack+0x244>
    d996:	|  |  |  |     |         moveq #2,d0
    d998:	|  |  |  |     |         cmp.l a0,d0
    d99a:	|  |  |  |  /--|-------- blt.w da46 <fileToStack+0x27a>
    d99e:	|  |  |  |  |  |         cmpa.w #0,a0
    d9a2:	|  |  |  |  |  |     /-- beq.s d9ae <fileToStack+0x1e2>
    d9a4:	|  |  |  |  |  |     |   moveq #1,d2
    d9a6:	|  |  |  |  |  |     |   cmp.l a0,d2
    d9a8:	|  |  |  |  |  |  /--|-- beq.s d9ea <fileToStack+0x21e>
    d9aa:	|  |  |  |  +--|--|--|-- bra.w da46 <fileToStack+0x27a>
                case 0: {
                    char *g = readStringEncoded(fp);
    d9ae:	|  |  |  |  |  |  |  \-> move.l 100(sp),-(sp)
    d9b2:	|  |  |  |  |  |  |      jsr db3a <readStringEncoded>
    d9b8:	|  |  |  |  |  |  |      addq.l #4,sp
    d9ba:	|  |  |  |  |  |  |      move.l d0,54(sp)
                    makeTextVar(&stringVar, g);
    d9be:	|  |  |  |  |  |  |      move.l 54(sp),-(sp)
    d9c2:	|  |  |  |  |  |  |      lea 14(sp),a0
    d9c6:	|  |  |  |  |  |  |      move.l a0,-(sp)
    d9c8:	|  |  |  |  |  |  |      jsr 14812 <makeTextVar>
    d9ce:	|  |  |  |  |  |  |      addq.l #8,sp
                    FreeVec(g);
    d9d0:	|  |  |  |  |  |  |      move.l 54(sp),50(sp)
    d9d6:	|  |  |  |  |  |  |      move.l 1a7a4 <SysBase>,d0
    d9dc:	|  |  |  |  |  |  |      movea.l d0,a6
    d9de:	|  |  |  |  |  |  |      movea.l 50(sp),a1
    d9e2:	|  |  |  |  |  |  |      jsr -690(a6)
                }
                break;
    d9e6:	|  |  |  |  |  |  |  /-- bra.w da9e <fileToStack+0x2d2>

                case 1:
                    setVariable(&stringVar, SVT_INT, get4bytes(fp));
    d9ea:	|  |  |  |  |  |  \--|-> move.l 100(sp),-(sp)
    d9ee:	|  |  |  |  |  |     |   jsr 718 <get4bytes>
    d9f4:	|  |  |  |  |  |     |   addq.l #4,sp
    d9f6:	|  |  |  |  |  |     |   move.l d0,-(sp)
    d9f8:	|  |  |  |  |  |     |   pea 1 <_start+0x1>
    d9fc:	|  |  |  |  |  |     |   lea 18(sp),a0
    da00:	|  |  |  |  |  |     |   move.l a0,-(sp)
    da02:	|  |  |  |  |  |     |   jsr 14ee2 <setVariable>
    da08:	|  |  |  |  |  |     |   lea 12(sp),sp
                    break;
    da0c:	|  |  |  |  |  |     +-- bra.w da9e <fileToStack+0x2d2>

                case 2:
                    setVariable(&stringVar, SVT_INT, FGetC(fp));
    da10:	|  |  |  |  |  \-----|-> move.l 100(sp),62(sp)
    da16:	|  |  |  |  |        |   move.l 1a7ac <DOSBase>,d0
    da1c:	|  |  |  |  |        |   movea.l d0,a6
    da1e:	|  |  |  |  |        |   move.l 62(sp),d1
    da22:	|  |  |  |  |        |   jsr -306(a6)
    da26:	|  |  |  |  |        |   move.l d0,58(sp)
    da2a:	|  |  |  |  |        |   move.l 58(sp),d0
    da2e:	|  |  |  |  |        |   move.l d0,-(sp)
    da30:	|  |  |  |  |        |   pea 1 <_start+0x1>
    da34:	|  |  |  |  |        |   lea 18(sp),a0
    da38:	|  |  |  |  |        |   move.l a0,-(sp)
    da3a:	|  |  |  |  |        |   jsr 14ee2 <setVariable>
    da40:	|  |  |  |  |        |   lea 12(sp),sp
                    break;
    da44:	|  |  |  |  |        +-- bra.s da9e <fileToStack+0x2d2>

                default:
                    KPrintF(LOAD_ERROR "Corrupt custom data file:", filename);
    da46:	|  |  |  |  \--------|-> move.l 124(sp),-(sp)
    da4a:	|  |  |  |           |   pea 1948a <PutChar+0x19ac>
    da50:	|  |  |  |           |   jsr 1703c <KPrintF>
    da56:	|  |  |  |           |   addq.l #8,sp
                    Close(fp);
    da58:	|  |  |  |           |   move.l 100(sp),46(sp)
    da5e:	|  |  |  |           |   move.l 1a7ac <DOSBase>,d0
    da64:	|  |  |  |           |   movea.l d0,a6
    da66:	|  |  |  |           |   move.l 46(sp),d1
    da6a:	|  |  |  |           |   jsr -36(a6)
    da6e:	|  |  |  |           |   move.l d0,42(sp)
                    return FALSE;
    da72:	|  |  |  |           |   clr.w d0
    da74:	+--|--|--|-----------|-- bra.w db30 <fileToStack+0x364>
            }
        } else {
            char *line = readTextPlain(fp);
    da78:	|  |  |  \-----------|-> move.l 100(sp),-(sp)
    da7c:	|  |  |              |   jsr dc00 <readTextPlain>
    da82:	|  |  |              |   addq.l #4,sp
    da84:	|  |  |              |   move.l d0,80(sp)
            if (!line) break;
    da88:	|  |  |        /-----|-- beq.w db12 <fileToStack+0x346>
            makeTextVar(&stringVar, line);
    da8c:	|  |  |        |     |   move.l 80(sp),-(sp)
    da90:	|  |  |        |     |   lea 14(sp),a0
    da94:	|  |  |        |     |   move.l a0,-(sp)
    da96:	|  |  |        |     |   jsr 14812 <makeTextVar>
    da9c:	|  |  |        |     |   addq.l #8,sp
        }

        if (sH->first == NULL) {
    da9e:	|  |  |        |     \-> movea.l 128(sp),a0
    daa2:	|  |  |        |         move.l (a0),d0
    daa4:	|  |  |        |  /----- bne.s dad4 <fileToStack+0x308>
            // Adds to the TOP of the array... oops!
            if (!addVarToStackQuick(&stringVar, &sH->first)) return FALSE;
    daa6:	|  |  |        |  |      move.l 128(sp),d0
    daaa:	|  |  |        |  |      move.l d0,-(sp)
    daac:	|  |  |        |  |      lea 14(sp),a0
    dab0:	|  |  |        |  |      move.l a0,-(sp)
    dab2:	|  |  |        |  |      jsr 13eb2 <addVarToStackQuick>
    dab8:	|  |  |        |  |      addq.l #8,sp
    daba:	|  |  |        |  |      tst.w d0
    dabc:	|  |  |        |  |  /-- bne.s dac2 <fileToStack+0x2f6>
    dabe:	|  |  |        |  |  |   clr.w d0
    dac0:	+--|--|--------|--|--|-- bra.s db30 <fileToStack+0x364>
            sH->last = sH->first;
    dac2:	|  |  |        |  |  \-> movea.l 128(sp),a0
    dac6:	|  |  |        |  |      move.l (a0),d0
    dac8:	|  |  |        |  |      movea.l 128(sp),a0
    dacc:	|  |  |        |  |      move.l d0,4(a0)
    dad0:	|  +--|--------|--|----- bra.w d93e <fileToStack+0x172>
        } else {
            // Adds to the END of the array... much better
            if (!addVarToStackQuick(&stringVar, &sH->last->next)) return FALSE;
    dad4:	|  |  |        |  \----> movea.l 128(sp),a0
    dad8:	|  |  |        |         move.l 4(a0),d0
    dadc:	|  |  |        |         addq.l #8,d0
    dade:	|  |  |        |         move.l d0,-(sp)
    dae0:	|  |  |        |         lea 14(sp),a0
    dae4:	|  |  |        |         move.l a0,-(sp)
    dae6:	|  |  |        |         jsr 13eb2 <addVarToStackQuick>
    daec:	|  |  |        |         addq.l #8,sp
    daee:	|  |  |        |         tst.w d0
    daf0:	|  |  |        |     /-- bne.s daf6 <fileToStack+0x32a>
    daf2:	|  |  |        |     |   clr.w d0
    daf4:	+--|--|--------|-----|-- bra.s db30 <fileToStack+0x364>
            sH->last = sH->last->next;
    daf6:	|  |  |        |     \-> movea.l 128(sp),a0
    dafa:	|  |  |        |         movea.l 4(a0),a0
    dafe:	|  |  |        |         move.l 8(a0),d0
    db02:	|  |  |        |         movea.l 128(sp),a0
    db06:	|  |  |        |         move.l d0,4(a0)
        if (saveEncoding) {
    db0a:	|  \--|--------|-------- bra.w d93e <fileToStack+0x172>
            if (tmp == -1) break;
    db0e:	|     \--------|-------> nop
    db10:	|              |     /-- bra.s db14 <fileToStack+0x348>
            if (!line) break;
    db12:	|              \-----|-> nop
        }
    }
    Close(fp);
    db14:	|                    \-> move.l 100(sp),38(sp)
    db1a:	|                        move.l 1a7ac <DOSBase>,d0
    db20:	|                        movea.l d0,a6
    db22:	|                        move.l 38(sp),d1
    db26:	|                        jsr -36(a6)
    db2a:	|                        move.l d0,34(sp)
    return TRUE;
    db2e:	|                        moveq #1,d0
}
    db30:	\----------------------> move.l (sp)+,d2
    db32:	                         movea.l (sp)+,a6
    db34:	                         lea 112(sp),sp
    db38:	                         rts

0000db3a <readStringEncoded>:

char *readStringEncoded(BPTR fp) {
    db3a:	          lea -32(sp),sp
    db3e:	          move.l a6,-(sp)
    db40:	          move.l d2,-(sp)
    int a, len = get2bytes(fp);
    db42:	          move.l 44(sp),-(sp)
    db46:	          jsr 6bc <get2bytes>
    db4c:	          addq.l #4,sp
    db4e:	          move.l d0,32(sp)
    char *s = AllocVec(len + 1, MEMF_ANY);
    db52:	          move.l 32(sp),d0
    db56:	          addq.l #1,d0
    db58:	          move.l d0,28(sp)
    db5c:	          clr.l 24(sp)
    db60:	          move.l 1a7a4 <SysBase>,d0
    db66:	          movea.l d0,a6
    db68:	          move.l 28(sp),d0
    db6c:	          move.l 24(sp),d1
    db70:	          jsr -684(a6)
    db74:	          move.l d0,20(sp)
    db78:	          move.l 20(sp),d0
    db7c:	          move.l d0,16(sp)
    if (!s) return NULL;
    db80:	      /-- bne.s db86 <readStringEncoded+0x4c>
    db82:	      |   moveq #0,d0
    db84:	/-----|-- bra.s dbf6 <readStringEncoded+0xbc>
    for (a = 0; a < len; a++) {
    db86:	|     \-> clr.l 36(sp)
    db8a:	|     /-- bra.s dbdc <readStringEncoded+0xa2>
        s[a] = (char)(FGetC(fp) ^ encode1);
    db8c:	|  /--|-> move.l 44(sp),12(sp)
    db92:	|  |  |   move.l 1a7ac <DOSBase>,d0
    db98:	|  |  |   movea.l d0,a6
    db9a:	|  |  |   move.l 12(sp),d1
    db9e:	|  |  |   jsr -306(a6)
    dba2:	|  |  |   move.l d0,8(sp)
    dba6:	|  |  |   move.l 8(sp),d0
    dbaa:	|  |  |   move.l d0,d1
    dbac:	|  |  |   move.b 1a85a <encode1>,d2
    dbb2:	|  |  |   move.l 36(sp),d0
    dbb6:	|  |  |   movea.l 16(sp),a0
    dbba:	|  |  |   adda.l d0,a0
    dbbc:	|  |  |   move.b d1,d0
    dbbe:	|  |  |   eor.b d2,d0
    dbc0:	|  |  |   move.b d0,(a0)
        encode1 += encode2;
    dbc2:	|  |  |   move.b 1a85a <encode1>,d0
    dbc8:	|  |  |   move.b d0,d1
    dbca:	|  |  |   move.b 1a85b <encode2>,d0
    dbd0:	|  |  |   add.b d1,d0
    dbd2:	|  |  |   move.b d0,1a85a <encode1>
    for (a = 0; a < len; a++) {
    dbd8:	|  |  |   addq.l #1,36(sp)
    dbdc:	|  |  \-> move.l 36(sp),d0
    dbe0:	|  |      cmp.l 32(sp),d0
    dbe4:	|  \----- blt.s db8c <readStringEncoded+0x52>
    }
    s[len] = 0;
    dbe6:	|         move.l 32(sp),d0
    dbea:	|         movea.l 16(sp),a0
    dbee:	|         adda.l d0,a0
    dbf0:	|         clr.b (a0)
    return s;
    dbf2:	|         move.l 16(sp),d0
}
    dbf6:	\-------> move.l (sp)+,d2
    dbf8:	          movea.l (sp)+,a6
    dbfa:	          lea 32(sp),sp
    dbfe:	          rts

0000dc00 <readTextPlain>:

char *readTextPlain(BPTR fp) {
    dc00:	             lea -104(sp),sp
    dc04:	             movem.l d2-d4/a6,-(sp)
    ULONG startPos;
    int stringSize = 0;
    dc08:	             clr.l 116(sp)
    BOOL keepGoing = TRUE;
    dc0c:	             move.w #1,114(sp)
    char gotChar;
    char *reply;

    startPos = Seek(fp, 0, OFFSET_CURRENT);
    dc12:	             move.l 124(sp),106(sp)
    dc18:	             clr.l 102(sp)
    dc1c:	             clr.l 98(sp)
    dc20:	             move.l 1a7ac <DOSBase>,d0
    dc26:	             movea.l d0,a6
    dc28:	             move.l 106(sp),d1
    dc2c:	             move.l 102(sp),d2
    dc30:	             move.l 98(sp),d3
    dc34:	             jsr -66(a6)
    dc38:	             move.l d0,94(sp)
    dc3c:	             move.l 94(sp),d0
    dc40:	             move.l d0,90(sp)

    LONG tmp;
    while (keepGoing) {
    dc44:	   /-------- bra.s dc88 <readTextPlain+0x88>
        tmp = FGetC(fp);
    dc46:	/--|-------> move.l 124(sp),22(sp)
    dc4c:	|  |         move.l 1a7ac <DOSBase>,d0
    dc52:	|  |         movea.l d0,a6
    dc54:	|  |         move.l 22(sp),d1
    dc58:	|  |         jsr -306(a6)
    dc5c:	|  |         move.l d0,18(sp)
    dc60:	|  |         move.l 18(sp),d0
    dc64:	|  |         move.l d0,110(sp)
        char gotChar = (char) tmp;
    dc68:	|  |         move.b 113(sp),17(sp)
        if (gotChar == '\n' || tmp == -1) {
    dc6e:	|  |         cmpi.b #10,17(sp)
    dc74:	|  |  /----- beq.s dc7e <readTextPlain+0x7e>
    dc76:	|  |  |      moveq #-1,d0
    dc78:	|  |  |      cmp.l 110(sp),d0
    dc7c:	|  |  |  /-- bne.s dc84 <readTextPlain+0x84>
            keepGoing = FALSE;
    dc7e:	|  |  \--|-> clr.w 114(sp)
    dc82:	|  +-----|-- bra.s dc88 <readTextPlain+0x88>
        } else {
            stringSize++;
    dc84:	|  |     \-> addq.l #1,116(sp)
    while (keepGoing) {
    dc88:	|  \-------> tst.w 114(sp)
    dc8c:	\----------- bne.s dc46 <readTextPlain+0x46>
        }
    }

    if ((stringSize == 0) && tmp == -1) {
    dc8e:	             tst.l 116(sp)
    dc92:	         /-- bne.s dca2 <readTextPlain+0xa2>
    dc94:	         |   moveq #-1,d0
    dc96:	         |   cmp.l 110(sp),d0
    dc9a:	         +-- bne.s dca2 <readTextPlain+0xa2>
        return NULL;
    dc9c:	         |   moveq #0,d0
    dc9e:	      /--|-- bra.w dd88 <readTextPlain+0x188>
    } else {
        Seek(fp, startPos, OFFSET_BEGINNING);
    dca2:	      |  \-> move.l 124(sp),86(sp)
    dca8:	      |      move.l 90(sp),82(sp)
    dcae:	      |      moveq #-1,d0
    dcb0:	      |      move.l d0,78(sp)
    dcb4:	      |      move.l 1a7ac <DOSBase>,d0
    dcba:	      |      movea.l d0,a6
    dcbc:	      |      move.l 86(sp),d1
    dcc0:	      |      move.l 82(sp),d2
    dcc4:	      |      move.l 78(sp),d3
    dcc8:	      |      jsr -66(a6)
    dccc:	      |      move.l d0,74(sp)
        reply = AllocVec(stringSize + 1, MEMF_ANY);
    dcd0:	      |      move.l 116(sp),d0
    dcd4:	      |      addq.l #1,d0
    dcd6:	      |      move.l d0,70(sp)
    dcda:	      |      clr.l 66(sp)
    dcde:	      |      move.l 1a7a4 <SysBase>,d0
    dce4:	      |      movea.l d0,a6
    dce6:	      |      move.l 70(sp),d0
    dcea:	      |      move.l 66(sp),d1
    dcee:	      |      jsr -684(a6)
    dcf2:	      |      move.l d0,62(sp)
    dcf6:	      |      move.l 62(sp),d0
    dcfa:	      |      move.l d0,58(sp)
        if (reply == NULL) return NULL;
    dcfe:	      |  /-- bne.s dd06 <readTextPlain+0x106>
    dd00:	      |  |   moveq #0,d0
    dd02:	      +--|-- bra.w dd88 <readTextPlain+0x188>
        int bytesRead = FRead(fp, reply, 1, stringSize);
    dd06:	      |  \-> move.l 124(sp),54(sp)
    dd0c:	      |      move.l 58(sp),50(sp)
    dd12:	      |      moveq #1,d0
    dd14:	      |      move.l d0,46(sp)
    dd18:	      |      move.l 116(sp),42(sp)
    dd1e:	      |      move.l 1a7ac <DOSBase>,d0
    dd24:	      |      movea.l d0,a6
    dd26:	      |      move.l 54(sp),d1
    dd2a:	      |      move.l 50(sp),d2
    dd2e:	      |      move.l 46(sp),d3
    dd32:	      |      move.l 42(sp),d4
    dd36:	      |      jsr -324(a6)
    dd3a:	      |      move.l d0,38(sp)
    dd3e:	      |      move.l 38(sp),d0
    dd42:	      |      move.l d0,34(sp)
        if (bytesRead != stringSize) {
    dd46:	      |      move.l 34(sp),d0
    dd4a:	      |      cmp.l 116(sp),d0
    dd4e:	      |  /-- beq.s dd5e <readTextPlain+0x15e>
            KPrintF("Reading error in readTextPlain.\n");
    dd50:	      |  |   pea 194bf <PutChar+0x19e1>
    dd56:	      |  |   jsr 1703c <KPrintF>
    dd5c:	      |  |   addq.l #4,sp
        }
        FGetC(fp); // Skip the newline character
    dd5e:	      |  \-> move.l 124(sp),30(sp)
    dd64:	      |      move.l 1a7ac <DOSBase>,d0
    dd6a:	      |      movea.l d0,a6
    dd6c:	      |      move.l 30(sp),d1
    dd70:	      |      jsr -306(a6)
    dd74:	      |      move.l d0,26(sp)
        reply[stringSize] = 0;
    dd78:	      |      move.l 116(sp),d0
    dd7c:	      |      movea.l 58(sp),a0
    dd80:	      |      adda.l d0,a0
    dd82:	      |      clr.b (a0)
    }

    return reply;
    dd84:	      |      move.l 58(sp),d0
}
    dd88:	      \----> movem.l (sp)+,d2-d4/a6
    dd8c:	             lea 104(sp),sp
    dd90:	             rts

0000dd92 <stackToFile>:


BOOL stackToFile (char * filename, const struct variable * from) {
    dd92:	                      lea -144(sp),sp
    dd96:	                      movem.l d2-d3/a6,-(sp)
    BPTR fp = Open( filename, MODE_NEWFILE);
    dd9a:	                      move.l 160(sp),148(sp)
    dda0:	                      move.l #1006,144(sp)
    dda8:	                      move.l 1a7ac <DOSBase>,d0
    ddae:	                      movea.l d0,a6
    ddb0:	                      move.l 148(sp),d1
    ddb4:	                      move.l 144(sp),d2
    ddb8:	                      jsr -30(a6)
    ddbc:	                      move.l d0,140(sp)
    ddc0:	                      move.l 140(sp),d0
    ddc4:	                      move.l d0,136(sp)

    if (!fp) {
    ddc8:	                  /-- bne.s dde2 <stackToFile+0x50>
        KPrintF("Can't create file", filename);
    ddca:	                  |   move.l 160(sp),-(sp)
    ddce:	                  |   pea 194e0 <PutChar+0x1a02>
    ddd4:	                  |   jsr 1703c <KPrintF>
    ddda:	                  |   addq.l #8,sp
        return FALSE;
    dddc:	                  |   clr.w d0
    ddde:	/-----------------|-- bra.w e09e <stackToFile+0x30c>
    }

    struct variableStack * hereWeAre = from->varData.theStack->first;
    dde2:	|                 \-> movea.l 164(sp),a0
    dde6:	|                     movea.l 4(a0),a0
    ddea:	|                     move.l (a0),152(sp)

    encode1 = (unsigned char) saveEncoding & 255;
    ddee:	|                     move.w 1a85c <saveEncoding>,d0
    ddf4:	|                     move.l d0,d0
    ddf6:	|                     move.b d0,1a85a <encode1>
    encode2 = (unsigned char) (saveEncoding >> 8);
    ddfc:	|                     move.w 1a85c <saveEncoding>,d0
    de02:	|                     lsr.w #8,d0
    de04:	|                     move.l d0,d0
    de06:	|                     move.b d0,1a85b <encode2>

    if (saveEncoding) {
    de0c:	|                     move.w 1a85c <saveEncoding>,d0
    de12:	|                 /-- beq.s de64 <stackToFile+0xd2>
        FPrintf(fp, "[Custom data (encoded)]\r\n");
    de14:	|                 |   move.l 136(sp),116(sp)
    de1a:	|                 |   move.l #103290,112(sp)
    de22:	|                 |   moveq #99,d0
    de24:	|                 |   not.b d0
    de26:	|                 |   add.l sp,d0
    de28:	|                 |   addi.l #-144,d0
    de2e:	|                 |   move.l d0,108(sp)
    de32:	|                 |   move.l 1a7ac <DOSBase>,d0
    de38:	|                 |   movea.l d0,a6
    de3a:	|                 |   move.l 116(sp),d1
    de3e:	|                 |   move.l 112(sp),d2
    de42:	|                 |   move.l 108(sp),d3
    de46:	|                 |   jsr -354(a6)
    de4a:	|                 |   move.l d0,104(sp)
        writeStringEncoded("UN�LO�CKED", fp);
    de4e:	|                 |   move.l 136(sp),-(sp)
    de52:	|                 |   pea 193f9 <PutChar+0x191b>
    de58:	|                 |   jsr e0a8 <writeStringEncoded>
    de5e:	|                 |   addq.l #8,sp
    de60:	|  /--------------|-- bra.w e076 <stackToFile+0x2e4>
    } else {
        FPrintf(fp, "[Custom data (ASCII)]\n");
    de64:	|  |              \-> move.l 136(sp),132(sp)
    de6a:	|  |                  move.l #103316,128(sp)
    de72:	|  |                  moveq #99,d1
    de74:	|  |                  not.b d1
    de76:	|  |                  add.l sp,d1
    de78:	|  |                  addi.l #-144,d1
    de7e:	|  |                  move.l d1,124(sp)
    de82:	|  |                  move.l 1a7ac <DOSBase>,d0
    de88:	|  |                  movea.l d0,a6
    de8a:	|  |                  move.l 132(sp),d1
    de8e:	|  |                  move.l 128(sp),d2
    de92:	|  |                  move.l 124(sp),d3
    de96:	|  |                  jsr -354(a6)
    de9a:	|  |                  move.l d0,120(sp)
    }

    while (hereWeAre) {
    de9e:	|  +----------------- bra.w e076 <stackToFile+0x2e4>
        if (saveEncoding) {
    dea2:	|  |  /-------------> move.w 1a85c <saveEncoding>,d0
    dea8:	|  |  |     /-------- beq.w dffa <stackToFile+0x268>
            switch (hereWeAre->thisVar.varType) {
    deac:	|  |  |     |         movea.l 152(sp),a0
    deb0:	|  |  |     |         move.l (a0),d0
    deb2:	|  |  |     |         moveq #1,d1
    deb4:	|  |  |     |         cmp.l d0,d1
    deb6:	|  |  |     |     /-- beq.s df06 <stackToFile+0x174>
    deb8:	|  |  |     |     |   moveq #3,d1
    deba:	|  |  |     |     |   cmp.l d0,d1
    debc:	|  |  |     |  /--|-- bne.w dfc8 <stackToFile+0x236>
                case SVT_STRING:
                    FPutC(fp, encode1);
    dec0:	|  |  |     |  |  |   move.l 136(sp),76(sp)
    dec6:	|  |  |     |  |  |   move.b 1a85a <encode1>,d0
    decc:	|  |  |     |  |  |   ext.w d0
    dece:	|  |  |     |  |  |   movea.w d0,a0
    ded0:	|  |  |     |  |  |   move.l a0,72(sp)
    ded4:	|  |  |     |  |  |   move.l 1a7ac <DOSBase>,d0
    deda:	|  |  |     |  |  |   movea.l d0,a6
    dedc:	|  |  |     |  |  |   move.l 76(sp),d1
    dee0:	|  |  |     |  |  |   move.l 72(sp),d2
    dee4:	|  |  |     |  |  |   jsr -312(a6)
    dee8:	|  |  |     |  |  |   move.l d0,68(sp)
                    writeStringEncoded(hereWeAre->thisVar.varData.theString, fp);
    deec:	|  |  |     |  |  |   movea.l 152(sp),a0
    def0:	|  |  |     |  |  |   move.l 4(a0),d0
    def4:	|  |  |     |  |  |   move.l 136(sp),-(sp)
    def8:	|  |  |     |  |  |   move.l d0,-(sp)
    defa:	|  |  |     |  |  |   jsr e0a8 <writeStringEncoded>
    df00:	|  |  |     |  |  |   addq.l #8,sp
                    break;
    df02:	|  |  |  /--|--|--|-- bra.w e06c <stackToFile+0x2da>

                case SVT_INT:
                    // Small enough to be stored as a char
                    if (hereWeAre->thisVar.varData.intValue >= 0 && hereWeAre->thisVar.varData.intValue < 256) {
    df06:	|  |  |  |  |  |  \-> movea.l 152(sp),a0
    df0a:	|  |  |  |  |  |      move.l 4(a0),d0
    df0e:	|  |  |  |  |  |  /-- bmi.s df7e <stackToFile+0x1ec>
    df10:	|  |  |  |  |  |  |   movea.l 152(sp),a0
    df14:	|  |  |  |  |  |  |   move.l 4(a0),d0
    df18:	|  |  |  |  |  |  |   cmpi.l #255,d0
    df1e:	|  |  |  |  |  |  +-- bgt.s df7e <stackToFile+0x1ec>
                        FPutC(fp, 2 ^ encode1);
    df20:	|  |  |  |  |  |  |   move.l 136(sp),64(sp)
    df26:	|  |  |  |  |  |  |   move.b 1a85a <encode1>,d0
    df2c:	|  |  |  |  |  |  |   eori.b #2,d0
    df30:	|  |  |  |  |  |  |   ext.w d0
    df32:	|  |  |  |  |  |  |   movea.w d0,a0
    df34:	|  |  |  |  |  |  |   move.l a0,60(sp)
    df38:	|  |  |  |  |  |  |   move.l 1a7ac <DOSBase>,d0
    df3e:	|  |  |  |  |  |  |   movea.l d0,a6
    df40:	|  |  |  |  |  |  |   move.l 64(sp),d1
    df44:	|  |  |  |  |  |  |   move.l 60(sp),d2
    df48:	|  |  |  |  |  |  |   jsr -312(a6)
    df4c:	|  |  |  |  |  |  |   move.l d0,56(sp)
                        FPutC(fp, hereWeAre->thisVar.varData.intValue);
    df50:	|  |  |  |  |  |  |   move.l 136(sp),52(sp)
    df56:	|  |  |  |  |  |  |   movea.l 152(sp),a0
    df5a:	|  |  |  |  |  |  |   move.l 4(a0),48(sp)
    df60:	|  |  |  |  |  |  |   move.l 1a7ac <DOSBase>,d0
    df66:	|  |  |  |  |  |  |   movea.l d0,a6
    df68:	|  |  |  |  |  |  |   move.l 52(sp),d1
    df6c:	|  |  |  |  |  |  |   move.l 48(sp),d2
    df70:	|  |  |  |  |  |  |   jsr -312(a6)
    df74:	|  |  |  |  |  |  |   move.l d0,44(sp)
    df78:	|  |  |  |  |  |  |   nop
                    } else {
                        FPutC(fp, 1 ^ encode1);
                        put4bytes(hereWeAre->thisVar.varData.intValue, fp);
                    }
                    break;
    df7a:	|  |  |  +--|--|--|-- bra.w e06c <stackToFile+0x2da>
                        FPutC(fp, 1 ^ encode1);
    df7e:	|  |  |  |  |  |  \-> move.l 136(sp),40(sp)
    df84:	|  |  |  |  |  |      move.b 1a85a <encode1>,d0
    df8a:	|  |  |  |  |  |      eori.b #1,d0
    df8e:	|  |  |  |  |  |      ext.w d0
    df90:	|  |  |  |  |  |      movea.w d0,a0
    df92:	|  |  |  |  |  |      move.l a0,36(sp)
    df96:	|  |  |  |  |  |      move.l 1a7ac <DOSBase>,d0
    df9c:	|  |  |  |  |  |      movea.l d0,a6
    df9e:	|  |  |  |  |  |      move.l 40(sp),d1
    dfa2:	|  |  |  |  |  |      move.l 36(sp),d2
    dfa6:	|  |  |  |  |  |      jsr -312(a6)
    dfaa:	|  |  |  |  |  |      move.l d0,32(sp)
                        put4bytes(hereWeAre->thisVar.varData.intValue, fp);
    dfae:	|  |  |  |  |  |      movea.l 152(sp),a0
    dfb2:	|  |  |  |  |  |      move.l 4(a0),d0
    dfb6:	|  |  |  |  |  |      move.l 136(sp),-(sp)
    dfba:	|  |  |  |  |  |      move.l d0,-(sp)
    dfbc:	|  |  |  |  |  |      jsr 958 <put4bytes>
    dfc2:	|  |  |  |  |  |      addq.l #8,sp
                    break;
    dfc4:	|  |  |  +--|--|----- bra.w e06c <stackToFile+0x2da>

                default:
                    KPrintF("Can't create an encoded custom data file containing anything other than numbers and strings", filename);
    dfc8:	|  |  |  |  |  \----> move.l 160(sp),-(sp)
    dfcc:	|  |  |  |  |         pea 194f2 <PutChar+0x1a14>
    dfd2:	|  |  |  |  |         jsr 1703c <KPrintF>
    dfd8:	|  |  |  |  |         addq.l #8,sp
                    Close(fp);
    dfda:	|  |  |  |  |         move.l 136(sp),28(sp)
    dfe0:	|  |  |  |  |         move.l 1a7ac <DOSBase>,d0
    dfe6:	|  |  |  |  |         movea.l d0,a6
    dfe8:	|  |  |  |  |         move.l 28(sp),d1
    dfec:	|  |  |  |  |         jsr -36(a6)
    dff0:	|  |  |  |  |         move.l d0,24(sp)
                    return FALSE;
    dff4:	|  |  |  |  |         clr.w d0
    dff6:	+--|--|--|--|-------- bra.w e09e <stackToFile+0x30c>
            }
        } else {
            char * makeSureItsText = getTextFromAnyVar(&hereWeAre->thisVar);
    dffa:	|  |  |  |  \-------> move.l 152(sp),d0
    dffe:	|  |  |  |            move.l d0,-(sp)
    e000:	|  |  |  |            jsr 14bc6 <getTextFromAnyVar>
    e006:	|  |  |  |            addq.l #4,sp
    e008:	|  |  |  |            move.l d0,100(sp)
            if (makeSureItsText == NULL) break;
    e00c:	|  |  |  |     /----- beq.s e080 <stackToFile+0x2ee>
            FPrintf(fp, "%s\n", *makeSureItsText);
    e00e:	|  |  |  |     |      movea.l 100(sp),a0
    e012:	|  |  |  |     |      move.b (a0),d0
    e014:	|  |  |  |     |      ext.w d0
    e016:	|  |  |  |     |      movea.w d0,a0
    e018:	|  |  |  |     |      move.l a0,12(sp)
    e01c:	|  |  |  |     |      move.l 136(sp),96(sp)
    e022:	|  |  |  |     |      move.l #103758,92(sp)
    e02a:	|  |  |  |     |      moveq #99,d0
    e02c:	|  |  |  |     |      not.b d0
    e02e:	|  |  |  |     |      add.l sp,d0
    e030:	|  |  |  |     |      addi.l #-144,d0
    e036:	|  |  |  |     |      move.l d0,88(sp)
    e03a:	|  |  |  |     |      move.l 1a7ac <DOSBase>,d0
    e040:	|  |  |  |     |      movea.l d0,a6
    e042:	|  |  |  |     |      move.l 96(sp),d1
    e046:	|  |  |  |     |      move.l 92(sp),d2
    e04a:	|  |  |  |     |      move.l 88(sp),d3
    e04e:	|  |  |  |     |      jsr -354(a6)
    e052:	|  |  |  |     |      move.l d0,84(sp)
            FreeVec(makeSureItsText);
    e056:	|  |  |  |     |      move.l 100(sp),80(sp)
    e05c:	|  |  |  |     |      move.l 1a7a4 <SysBase>,d0
    e062:	|  |  |  |     |      movea.l d0,a6
    e064:	|  |  |  |     |      movea.l 80(sp),a1
    e068:	|  |  |  |     |      jsr -690(a6)
        }

        hereWeAre = hereWeAre->next;
    e06c:	|  |  |  \-----|----> movea.l 152(sp),a0
    e070:	|  |  |        |      move.l 8(a0),152(sp)
    while (hereWeAre) {
    e076:	|  \--|--------|----> tst.l 152(sp)
    e07a:	|     \--------|----- bne.w dea2 <stackToFile+0x110>
    e07e:	|              |  /-- bra.s e082 <stackToFile+0x2f0>
            if (makeSureItsText == NULL) break;
    e080:	|              \--|-> nop
    }
    Close(fp);
    e082:	|                 \-> move.l 136(sp),20(sp)
    e088:	|                     move.l 1a7ac <DOSBase>,d0
    e08e:	|                     movea.l d0,a6
    e090:	|                     move.l 20(sp),d1
    e094:	|                     jsr -36(a6)
    e098:	|                     move.l d0,16(sp)
    return TRUE;
    e09c:	|                     moveq #1,d0
}
    e09e:	\-------------------> movem.l (sp)+,d2-d3/a6
    e0a2:	                      lea 144(sp),sp
    e0a6:	                      rts

0000e0a8 <writeStringEncoded>:

void writeStringEncoded (const char * s, BPTR fp) {
    e0a8:	       lea -20(sp),sp
    e0ac:	       move.l a6,-(sp)
    e0ae:	       move.l d2,-(sp)
	int a, len = strlen (s);
    e0b0:	       move.l 32(sp),-(sp)
    e0b4:	       jsr 13adc <strlen>
    e0ba:	       addq.l #4,sp
    e0bc:	       move.l d0,20(sp)

	put2bytes (len, fp);
    e0c0:	       move.l 36(sp),-(sp)
    e0c4:	       move.l 24(sp),-(sp)
    e0c8:	       jsr 8d0 <put2bytes>
    e0ce:	       addq.l #8,sp
	for (a = 0; a < len; a ++) {
    e0d0:	       clr.l 24(sp)
    e0d4:	   /-- bra.s e12a <writeStringEncoded+0x82>
		FPutC (fp, s[a] ^ encode1);
    e0d6:	/--|-> move.l 36(sp),16(sp)
    e0dc:	|  |   move.l 24(sp),d0
    e0e0:	|  |   movea.l 32(sp),a0
    e0e4:	|  |   adda.l d0,a0
    e0e6:	|  |   move.b (a0),d1
    e0e8:	|  |   move.b 1a85a <encode1>,d0
    e0ee:	|  |   eor.b d1,d0
    e0f0:	|  |   ext.w d0
    e0f2:	|  |   movea.w d0,a0
    e0f4:	|  |   move.l a0,12(sp)
    e0f8:	|  |   move.l 1a7ac <DOSBase>,d0
    e0fe:	|  |   movea.l d0,a6
    e100:	|  |   move.l 16(sp),d1
    e104:	|  |   move.l 12(sp),d2
    e108:	|  |   jsr -312(a6)
    e10c:	|  |   move.l d0,8(sp)
		encode1 += encode2;
    e110:	|  |   move.b 1a85a <encode1>,d0
    e116:	|  |   move.b d0,d1
    e118:	|  |   move.b 1a85b <encode2>,d0
    e11e:	|  |   add.b d1,d0
    e120:	|  |   move.b d0,1a85a <encode1>
	for (a = 0; a < len; a ++) {
    e126:	|  |   addq.l #1,24(sp)
    e12a:	|  \-> move.l 24(sp),d0
    e12e:	|      cmp.l 20(sp),d0
    e132:	\----- blt.s e0d6 <writeStringEncoded+0x2e>
	}
}
    e134:	       nop
    e136:	       nop
    e138:	       move.l (sp)+,d2
    e13a:	       movea.l (sp)+,a6
    e13c:	       lea 20(sp),sp
    e140:	       rts

0000e142 <failSecurityCheck>:

#define builtIn(a) 			static enum builtReturn builtIn_ ## a (int numParams, struct loadedFunction * fun)

#define UNUSEDALL		 	(void) (0 && sizeof(numParams) && sizeof (fun));

BOOL failSecurityCheck(char * fn) {
    e142:	                   subq.l #4,sp
	if (fn == NULL) return TRUE;
    e144:	                   tst.l 8(sp)
    e148:	               /-- bne.s e14e <failSecurityCheck+0xc>
    e14a:	               |   moveq #1,d0
    e14c:	/--------------|-- bra.s e1cc <failSecurityCheck+0x8a>

	int a = 0;
    e14e:	|              \-> clr.l (sp)

	while (fn[a]) {
    e150:	|     /----------- bra.s e1be <failSecurityCheck+0x7c>
		switch (fn[a]) {
    e152:	|  /--|----------> move.l (sp),d0
    e154:	|  |  |            movea.l 8(sp),a0
    e158:	|  |  |            adda.l d0,a0
    e15a:	|  |  |            move.b (a0),d0
    e15c:	|  |  |            ext.w d0
    e15e:	|  |  |            movea.w d0,a0
    e160:	|  |  |            moveq #124,d0
    e162:	|  |  |            cmp.l a0,d0
    e164:	|  |  |     /----- beq.s e1a6 <failSecurityCheck+0x64>
    e166:	|  |  |     |      moveq #124,d1
    e168:	|  |  |     |      cmp.l a0,d1
    e16a:	|  |  |  /--|----- blt.s e1bc <failSecurityCheck+0x7a>
    e16c:	|  |  |  |  |      moveq #92,d0
    e16e:	|  |  |  |  |      cmp.l a0,d0
    e170:	|  |  |  |  +----- beq.s e1a6 <failSecurityCheck+0x64>
    e172:	|  |  |  |  |      moveq #92,d1
    e174:	|  |  |  |  |      cmp.l a0,d1
    e176:	|  |  |  +--|----- blt.s e1bc <failSecurityCheck+0x7a>
    e178:	|  |  |  |  |      moveq #60,d0
    e17a:	|  |  |  |  |      cmp.l a0,d0
    e17c:	|  |  |  |  |  /-- blt.s e19c <failSecurityCheck+0x5a>
    e17e:	|  |  |  |  |  |   moveq #34,d1
    e180:	|  |  |  |  |  |   cmp.l a0,d1
    e182:	|  |  |  +--|--|-- bgt.s e1bc <failSecurityCheck+0x7a>
    e184:	|  |  |  |  |  |   moveq #-34,d1
    e186:	|  |  |  |  |  |   add.l a0,d1
    e188:	|  |  |  |  |  |   move.l #83894529,d0
    e18e:	|  |  |  |  |  |   lsr.l d1,d0
    e190:	|  |  |  |  |  |   moveq #1,d1
    e192:	|  |  |  |  |  |   and.l d1,d0
    e194:	|  |  |  |  |  |   sne d0
    e196:	|  |  |  |  |  |   neg.b d0
    e198:	|  |  |  |  +--|-- bne.s e1a6 <failSecurityCheck+0x64>
    e19a:	|  |  |  +--|--|-- bra.s e1bc <failSecurityCheck+0x7a>
    e19c:	|  |  |  |  |  \-> lea -62(a0),a0
    e1a0:	|  |  |  |  |      moveq #1,d0
    e1a2:	|  |  |  |  |      cmp.l a0,d0
    e1a4:	|  |  |  +--|----- bcs.s e1bc <failSecurityCheck+0x7a>
			case '?':
			case '"':
			case '<':
			case '>':
			case '|':
				KPrintF("Filenames may not contain the following characters: \n\n\\  /  :  \"  <  >  |  ?  *\n\nConsequently, the following filename is not allowed:", fn);
    e1a6:	|  |  |  |  \----> move.l 8(sp),-(sp)
    e1aa:	|  |  |  |         pea 19552 <PutChar+0x1a74>
    e1b0:	|  |  |  |         jsr 1703c <KPrintF>
    e1b6:	|  |  |  |         addq.l #8,sp
				return TRUE;
    e1b8:	|  |  |  |         moveq #1,d0
    e1ba:	+--|--|--|-------- bra.s e1cc <failSecurityCheck+0x8a>
		}
		a++;
    e1bc:	|  |  |  \-------> addq.l #1,(sp)
	while (fn[a]) {
    e1be:	|  |  \----------> move.l (sp),d0
    e1c0:	|  |               movea.l 8(sp),a0
    e1c4:	|  |               adda.l d0,a0
    e1c6:	|  |               move.b (a0),d0
    e1c8:	|  \-------------- bne.s e152 <failSecurityCheck+0x10>
	}
	return FALSE;
    e1ca:	|                  clr.w d0
}
    e1cc:	\----------------> addq.l #4,sp
    e1ce:	                   rts

0000e1d0 <sayCore>:

static enum builtReturn sayCore (int numParams, struct loadedFunction * fun, BOOL sayIt)
{
    e1d0:	             lea -24(sp),sp
    e1d4:	             move.l a6,-(sp)
    e1d6:	             move.l 40(sp),d0
    e1da:	             move.w d0,d0
    e1dc:	             move.w d0,6(sp)
	int fileNum = -1;
    e1e0:	             moveq #-1,d0
    e1e2:	             move.l d0,12(sp)
	char * newText;
	int objT, p;
	killSpeechTimers ();
    e1e6:	             jsr 5fba <killSpeechTimers>

	switch (numParams) {
    e1ec:	             moveq #2,d0
    e1ee:	             cmp.l 32(sp),d0
    e1f2:	      /----- beq.s e236 <sayCore+0x66>
    e1f4:	      |      moveq #3,d0
    e1f6:	      |      cmp.l 32(sp),d0
    e1fa:	/-----|----- bne.w e318 <sayCore+0x148>
		case 3:
			if (! getValueType (&fileNum, SVT_FILE, &fun->stack->thisVar)) return BR_ERROR;
    e1fe:	|     |      movea.l 36(sp),a0
    e202:	|     |      move.l 24(a0),d0
    e206:	|     |      move.l d0,-(sp)
    e208:	|     |      pea 5 <_start+0x5>
    e20c:	|     |      lea 20(sp),a0
    e210:	|     |      move.l a0,-(sp)
    e212:	|     |      jsr 145f0 <getValueType>
    e218:	|     |      lea 12(sp),sp
    e21c:	|     |      tst.w d0
    e21e:	|     |  /-- bne.s e226 <sayCore+0x56>
    e220:	|     |  |   moveq #1,d0
    e222:	|  /--|--|-- bra.w e328 <sayCore+0x158>
			trimStack (&fun -> stack);
    e226:	|  |  |  \-> moveq #24,d0
    e228:	|  |  |      add.l 36(sp),d0
    e22c:	|  |  |      move.l d0,-(sp)
    e22e:	|  |  |      jsr 14f74 <trimStack>
    e234:	|  |  |      addq.l #4,sp
			[[fallthrough]];

		case 2:
			newText = getTextFromAnyVar (&(fun -> stack->thisVar));
    e236:	|  |  \----> movea.l 36(sp),a0
    e23a:	|  |         move.l 24(a0),d0
    e23e:	|  |         move.l d0,-(sp)
    e240:	|  |         jsr 14bc6 <getTextFromAnyVar>
    e246:	|  |         addq.l #4,sp
    e248:	|  |         move.l d0,24(sp)
			if (! newText) return BR_ERROR;
    e24c:	|  |     /-- bne.s e254 <sayCore+0x84>
    e24e:	|  |     |   moveq #1,d0
    e250:	|  +-----|-- bra.w e328 <sayCore+0x158>
			trimStack (&fun -> stack);
    e254:	|  |     \-> moveq #24,d0
    e256:	|  |         add.l 36(sp),d0
    e25a:	|  |         move.l d0,-(sp)
    e25c:	|  |         jsr 14f74 <trimStack>
    e262:	|  |         addq.l #4,sp
			if (! getValueType(&objT, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e264:	|  |         movea.l 36(sp),a0
    e268:	|  |         move.l 24(a0),d0
    e26c:	|  |         move.l d0,-(sp)
    e26e:	|  |         pea 7 <_start+0x7>
    e272:	|  |         lea 16(sp),a0
    e276:	|  |         move.l a0,-(sp)
    e278:	|  |         jsr 145f0 <getValueType>
    e27e:	|  |         lea 12(sp),sp
    e282:	|  |         tst.w d0
    e284:	|  |     /-- bne.s e28c <sayCore+0xbc>
    e286:	|  |     |   moveq #1,d0
    e288:	|  +-----|-- bra.w e328 <sayCore+0x158>
			if (! getValueType(&objT, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e28c:	|  |     \-> movea.l 36(sp),a0
    e290:	|  |         move.l 24(a0),d0
    e294:	|  |         move.l d0,-(sp)
    e296:	|  |         pea 7 <_start+0x7>
    e29a:	|  |         lea 16(sp),a0
    e29e:	|  |         move.l a0,-(sp)
    e2a0:	|  |         jsr 145f0 <getValueType>
    e2a6:	|  |         lea 12(sp),sp
    e2aa:	|  |         tst.w d0
    e2ac:	|  |     /-- bne.s e2b2 <sayCore+0xe2>
    e2ae:	|  |     |   moveq #1,d0
    e2b0:	|  +-----|-- bra.s e328 <sayCore+0x158>
			trimStack (&fun -> stack);
    e2b2:	|  |     \-> moveq #24,d0
    e2b4:	|  |         add.l 36(sp),d0
    e2b8:	|  |         move.l d0,-(sp)
    e2ba:	|  |         jsr 14f74 <trimStack>
    e2c0:	|  |         addq.l #4,sp
			p = wrapSpeech (newText, objT, fileNum, sayIt);
    e2c2:	|  |         movea.w 6(sp),a0
    e2c6:	|  |         move.l 12(sp),d1
    e2ca:	|  |         move.l 8(sp),d0
    e2ce:	|  |         move.l a0,-(sp)
    e2d0:	|  |         move.l d1,-(sp)
    e2d2:	|  |         move.l d0,-(sp)
    e2d4:	|  |         move.l 36(sp),-(sp)
    e2d8:	|  |         jsr 7f74 <wrapSpeech>
    e2de:	|  |         lea 16(sp),sp
    e2e2:	|  |         move.l d0,20(sp)
			fun -> timeLeft = p;
    e2e6:	|  |         movea.l 36(sp),a0
    e2ea:	|  |         move.l 20(sp),12(a0)
			//debugOut ("BUILTIN: sayCore: %s (%i)\n", newText, p);
			fun -> isSpeech = TRUE;
    e2f0:	|  |         movea.l 36(sp),a0
    e2f4:	|  |         move.w #1,50(a0)
			FreeVec(newText);
    e2fa:	|  |         move.l 24(sp),16(sp)
    e300:	|  |         move.l 1a7a4 <SysBase>,d0
    e306:	|  |         movea.l d0,a6
    e308:	|  |         movea.l 16(sp),a1
    e30c:	|  |         jsr -690(a6)
			newText = NULL;
    e310:	|  |         clr.l 24(sp)
			return BR_KEEP_AND_PAUSE;
    e314:	|  |         moveq #0,d0
    e316:	|  +-------- bra.s e328 <sayCore+0x158>
	}

	KPrintF("Function should have either 2 or 3 parameters");
    e318:	\--|-------> pea 195d8 <PutChar+0x1afa>
    e31e:	   |         jsr 1703c <KPrintF>
    e324:	   |         addq.l #4,sp
	return BR_ERROR;
    e326:	   |         moveq #1,d0
}
    e328:	   \-------> movea.l (sp)+,a6
    e32a:	             lea 24(sp),sp
    e32e:	             rts

0000e330 <builtIn_say>:

builtIn(say)
{
	UNUSEDALL
	return sayCore (numParams, fun, TRUE);
    e330:	pea 1 <_start+0x1>
    e334:	move.l 12(sp),-(sp)
    e338:	move.l 12(sp),-(sp)
    e33c:	jsr e1d0 <sayCore>
    e342:	lea 12(sp),sp
}
    e346:	rts

0000e348 <builtIn_think>:

builtIn(think)
{
	UNUSEDALL
	return sayCore (numParams, fun, FALSE);
    e348:	clr.l -(sp)
    e34a:	move.l 12(sp),-(sp)
    e34e:	move.l 12(sp),-(sp)
    e352:	jsr e1d0 <sayCore>
    e358:	lea 12(sp),sp
}
    e35c:	rts

0000e35e <builtIn_freeze>:

builtIn(freeze)
{
	UNUSEDALL
	freeze ();
    e35e:	jsr 14fbc <freeze>
	freezeSubs (); 
    e364:	jsr 55aa <freezeSubs>
	fun -> freezerLevel = 0;
    e36a:	movea.l 8(sp),a0
    e36e:	clr.b 56(a0)
	return BR_CONTINUE;
    e372:	moveq #2,d0
}
    e374:	rts

0000e376 <builtIn_unfreeze>:

builtIn(unfreeze)
{
	UNUSEDALL
	unfreeze ();
    e376:	jsr 151c0 <unfreeze>
	unfreezeSubs (); 
    e37c:	jsr 69fc <unfreezeSubs>
	return BR_CONTINUE;
    e382:	moveq #2,d0
}
    e384:	rts

0000e386 <builtIn_howFrozen>:

builtIn(howFrozen)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, howFrozen ());
    e386:	jsr 1519c <howFrozen>
    e38c:	move.l d0,d1
    e38e:	moveq #28,d0
    e390:	add.l 8(sp),d0
    e394:	move.l d1,-(sp)
    e396:	pea 1 <_start+0x1>
    e39a:	move.l d0,-(sp)
    e39c:	jsr 14ee2 <setVariable>
    e3a2:	lea 12(sp),sp
	return BR_CONTINUE; 
    e3a6:	moveq #2,d0
}
    e3a8:	rts

0000e3aa <builtIn_setCursor>:

builtIn(setCursor)
{
    e3aa:	subq.l #4,sp
	UNUSEDALL
	struct personaAnimation * aa = getAnimationFromVar (&(fun -> stack -> thisVar));
    e3ac:	movea.l 12(sp),a0
    e3b0:	move.l 24(a0),d0
    e3b4:	move.l d0,-(sp)
    e3b6:	jsr 14ac8 <getAnimationFromVar>
    e3bc:	addq.l #4,sp
    e3be:	move.l d0,(sp)
	pickAnimCursor (aa);
    e3c0:	move.l (sp),-(sp)
    e3c2:	jsr d6c <pickAnimCursor>
    e3c8:	addq.l #4,sp
	trimStack (&fun -> stack);
    e3ca:	moveq #24,d0
    e3cc:	add.l 12(sp),d0
    e3d0:	move.l d0,-(sp)
    e3d2:	jsr 14f74 <trimStack>
    e3d8:	addq.l #4,sp
	return BR_CONTINUE;
    e3da:	moveq #2,d0
}
    e3dc:	addq.l #4,sp
    e3de:	rts

0000e3e0 <builtIn_getMouseX>:

builtIn(getMouseX)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseX + cameraX);
    e3e0:	move.l 1a760 <input+0xa>,d1
    e3e6:	move.l 1a85e <cameraX>,d0
    e3ec:	add.l d0,d1
    e3ee:	moveq #28,d0
    e3f0:	add.l 8(sp),d0
    e3f4:	move.l d1,-(sp)
    e3f6:	pea 1 <_start+0x1>
    e3fa:	move.l d0,-(sp)
    e3fc:	jsr 14ee2 <setVariable>
    e402:	lea 12(sp),sp
	return BR_CONTINUE;
    e406:	moveq #2,d0
}
    e408:	rts

0000e40a <builtIn_getMouseY>:

builtIn(getMouseY)
{

	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseY + cameraY);
    e40a:	move.l 1a764 <input+0xe>,d1
    e410:	move.l 1a862 <cameraY>,d0
    e416:	add.l d0,d1
    e418:	moveq #28,d0
    e41a:	add.l 8(sp),d0
    e41e:	move.l d1,-(sp)
    e420:	pea 1 <_start+0x1>
    e424:	move.l d0,-(sp)
    e426:	jsr 14ee2 <setVariable>
    e42c:	lea 12(sp),sp
	return BR_CONTINUE;
    e430:	moveq #2,d0
}
    e432:	rts

0000e434 <builtIn_getMouseScreenX>:

builtIn(getMouseScreenX)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseX*cameraZoom);
    e434:	move.l 1a760 <input+0xa>,d0
    e43a:	move.l d0,-(sp)
    e43c:	jsr 1746e <__floatsisf>
    e442:	addq.l #4,sp
    e444:	move.l d0,d1
    e446:	move.l 1a142 <cameraZoom>,d0
    e44c:	move.l d0,-(sp)
    e44e:	move.l d1,-(sp)
    e450:	jsr 17520 <__mulsf3>
    e456:	addq.l #8,sp
    e458:	move.l d0,-(sp)
    e45a:	jsr 17406 <__fixsfsi>
    e460:	addq.l #4,sp
    e462:	move.l d0,d1
    e464:	moveq #28,d0
    e466:	add.l 8(sp),d0
    e46a:	move.l d1,-(sp)
    e46c:	pea 1 <_start+0x1>
    e470:	move.l d0,-(sp)
    e472:	jsr 14ee2 <setVariable>
    e478:	lea 12(sp),sp
	return BR_CONTINUE;
    e47c:	moveq #2,d0
}
    e47e:	rts

0000e480 <builtIn_getMouseScreenY>:

builtIn(getMouseScreenY)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseY*cameraZoom);
    e480:	move.l 1a764 <input+0xe>,d0
    e486:	move.l d0,-(sp)
    e488:	jsr 1746e <__floatsisf>
    e48e:	addq.l #4,sp
    e490:	move.l d0,d1
    e492:	move.l 1a142 <cameraZoom>,d0
    e498:	move.l d0,-(sp)
    e49a:	move.l d1,-(sp)
    e49c:	jsr 17520 <__mulsf3>
    e4a2:	addq.l #8,sp
    e4a4:	move.l d0,-(sp)
    e4a6:	jsr 17406 <__fixsfsi>
    e4ac:	addq.l #4,sp
    e4ae:	move.l d0,d1
    e4b0:	moveq #28,d0
    e4b2:	add.l 8(sp),d0
    e4b6:	move.l d1,-(sp)
    e4b8:	pea 1 <_start+0x1>
    e4bc:	move.l d0,-(sp)
    e4be:	jsr 14ee2 <setVariable>
    e4c4:	lea 12(sp),sp
	return BR_CONTINUE;
    e4c8:	moveq #2,d0
}
    e4ca:	rts

0000e4cc <builtIn_getStatusText>:

builtIn(getStatusText)
{
	UNUSEDALL
	makeTextVar (&fun -> reg, statusBarText ());
    e4cc:	jsr 7a28 <statusBarText>
    e4d2:	move.l d0,d1
    e4d4:	moveq #28,d0
    e4d6:	add.l 8(sp),d0
    e4da:	move.l d1,-(sp)
    e4dc:	move.l d0,-(sp)
    e4de:	jsr 14812 <makeTextVar>
    e4e4:	addq.l #8,sp
	return BR_CONTINUE;
    e4e6:	moveq #2,d0
}
    e4e8:	rts

0000e4ea <builtIn_getMatchingFiles>:

builtIn(getMatchingFiles)
{
    e4ea:	       lea -20(sp),sp
    e4ee:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    e4f0:	       movea.l 32(sp),a0
    e4f4:	       move.l 24(a0),d0
    e4f8:	       move.l d0,-(sp)
    e4fa:	       jsr 14bc6 <getTextFromAnyVar>
    e500:	       addq.l #4,sp
    e502:	       move.l d0,20(sp)
	if (! newText) return BR_ERROR;
    e506:	   /-- bne.s e50e <builtIn_getMatchingFiles+0x24>
    e508:	   |   moveq #1,d0
    e50a:	/--|-- bra.w e5d0 <builtIn_getMatchingFiles+0xe6>
	trimStack (&fun -> stack);
    e50e:	|  \-> moveq #24,d0
    e510:	|      add.l 32(sp),d0
    e514:	|      move.l d0,-(sp)
    e516:	|      jsr 14f74 <trimStack>
    e51c:	|      addq.l #4,sp
	unlinkVar (&fun -> reg);
    e51e:	|      moveq #28,d0
    e520:	|      add.l 32(sp),d0
    e524:	|      move.l d0,-(sp)
    e526:	|      jsr 1483e <unlinkVar>
    e52c:	|      addq.l #4,sp

	// Return value
	fun -> reg.varType = SVT_STACK;
    e52e:	|      movea.l 32(sp),a0
    e532:	|      moveq #6,d0
    e534:	|      move.l d0,28(a0)
	fun -> reg.varData.theStack = AllocVec(sizeof( struct stackHandler),MEMF_ANY);
    e538:	|      moveq #12,d0
    e53a:	|      move.l d0,16(sp)
    e53e:	|      clr.l 12(sp)
    e542:	|      move.l 1a7a4 <SysBase>,d0
    e548:	|      movea.l d0,a6
    e54a:	|      move.l 16(sp),d0
    e54e:	|      move.l 12(sp),d1
    e552:	|      jsr -684(a6)
    e556:	|      move.l d0,8(sp)
    e55a:	|      move.l 8(sp),d0
    e55e:	|      movea.l 32(sp),a0
    e562:	|      move.l d0,32(a0)
	if (!(&fun -> reg.varData.theStack)) return BR_ERROR;
    e566:	|      moveq #32,d0
    e568:	|      add.l 32(sp),d0
    e56c:	|  /-- bne.s e572 <builtIn_getMatchingFiles+0x88>
    e56e:	|  |   moveq #1,d0
    e570:	+--|-- bra.s e5d0 <builtIn_getMatchingFiles+0xe6>
	fun -> reg.varData.theStack -> first = NULL;
    e572:	|  \-> movea.l 32(sp),a0
    e576:	|      movea.l 32(a0),a0
    e57a:	|      clr.l (a0)
	fun -> reg.varData.theStack -> last = NULL;
    e57c:	|      movea.l 32(sp),a0
    e580:	|      movea.l 32(a0),a0
    e584:	|      clr.l 4(a0)
	fun -> reg.varData.theStack -> timesUsed = 1;
    e588:	|      movea.l 32(sp),a0
    e58c:	|      movea.l 32(a0),a0
    e590:	|      moveq #1,d0
    e592:	|      move.l d0,8(a0)
	if (! getSavedGamesStack (fun -> reg.varData.theStack, newText)) return BR_ERROR;
    e596:	|      movea.l 32(sp),a0
    e59a:	|      move.l 32(a0),d0
    e59e:	|      move.l 20(sp),-(sp)
    e5a2:	|      move.l d0,-(sp)
    e5a4:	|      jsr 143ac <getSavedGamesStack>
    e5aa:	|      addq.l #8,sp
    e5ac:	|      tst.w d0
    e5ae:	|  /-- bne.s e5b4 <builtIn_getMatchingFiles+0xca>
    e5b0:	|  |   moveq #1,d0
    e5b2:	+--|-- bra.s e5d0 <builtIn_getMatchingFiles+0xe6>
	FreeVec(newText);
    e5b4:	|  \-> move.l 20(sp),4(sp)
    e5ba:	|      move.l 1a7a4 <SysBase>,d0
    e5c0:	|      movea.l d0,a6
    e5c2:	|      movea.l 4(sp),a1
    e5c6:	|      jsr -690(a6)
	newText = NULL;
    e5ca:	|      clr.l 20(sp)
	return BR_CONTINUE;
    e5ce:	|      moveq #2,d0
}
    e5d0:	\----> movea.l (sp)+,a6
    e5d2:	       lea 20(sp),sp
    e5d6:	       rts

0000e5d8 <builtIn_saveGame>:

builtIn(saveGame)
{
    e5d8:	       lea -12(sp),sp
    e5dc:	       move.l a6,-(sp)

    /*if (frozenStuff) {
        fatal ("Can't save game state while the engine is frozen");
    }*/

    loadNow = getTextFromAnyVar(&(fun->stack->thisVar));
    e5de:	       movea.l 24(sp),a0
    e5e2:	       move.l 24(a0),d0
    e5e6:	       move.l d0,-(sp)
    e5e8:	       jsr 14bc6 <getTextFromAnyVar>
    e5ee:	       addq.l #4,sp
    e5f0:	       move.l d0,1a770 <loadNow>
    trimStack(&fun->stack);
    e5f6:	       moveq #24,d0
    e5f8:	       add.l 24(sp),d0
    e5fc:	       move.l d0,-(sp)
    e5fe:	       jsr 14f74 <trimStack>
    e604:	       addq.l #4,sp

    char *aaaaa = encodeFilename(loadNow);
    e606:	       move.l 1a770 <loadNow>,d0
    e60c:	       move.l d0,-(sp)
    e60e:	       jsr 2fe <encodeFilename>
    e614:	       addq.l #4,sp
    e616:	       move.l d0,12(sp)
    FreeVec(loadNow);
    e61a:	       move.l 1a770 <loadNow>,8(sp)
    e622:	       move.l 1a7a4 <SysBase>,d0
    e628:	       movea.l d0,a6
    e62a:	       movea.l 8(sp),a1
    e62e:	       jsr -690(a6)
    if (failSecurityCheck(aaaaa)) return BR_ERROR; // Won't fail if encoded, how cool is that? OK, not very.
    e632:	       move.l 12(sp),-(sp)
    e636:	       jsr e142 <failSecurityCheck>
    e63c:	       addq.l #4,sp
    e63e:	       tst.w d0
    e640:	   /-- beq.s e646 <builtIn_saveGame+0x6e>
    e642:	   |   moveq #1,d0
    e644:	/--|-- bra.s e696 <builtIn_saveGame+0xbe>

    loadNow = joinStrings(":", aaaaa);
    e646:	|  \-> move.l 12(sp),-(sp)
    e64a:	|      pea 19606 <PutChar+0x1b28>
    e650:	|      jsr 13b1c <joinStrings>
    e656:	|      addq.l #8,sp
    e658:	|      move.l d0,1a770 <loadNow>
    FreeVec(aaaaa);
    e65e:	|      move.l 12(sp),4(sp)
    e664:	|      move.l 1a7a4 <SysBase>,d0
    e66a:	|      movea.l d0,a6
    e66c:	|      movea.l 4(sp),a1
    e670:	|      jsr -690(a6)

    setVariable(&fun->reg, SVT_INT, 0);
    e674:	|      moveq #28,d0
    e676:	|      add.l 24(sp),d0
    e67a:	|      clr.l -(sp)
    e67c:	|      pea 1 <_start+0x1>
    e680:	|      move.l d0,-(sp)
    e682:	|      jsr 14ee2 <setVariable>
    e688:	|      lea 12(sp),sp
    saverFunc = fun;
    e68c:	|      move.l 24(sp),1a86e <saverFunc>
    return BR_KEEP_AND_PAUSE;
    e694:	|      moveq #0,d0
}
    e696:	\----> movea.l (sp)+,a6
    e698:	       lea 12(sp),sp
    e69c:	       rts

0000e69e <builtIn_fileExists>:

builtIn(fileExists)
{
    e69e:	       lea -36(sp),sp
    e6a2:	       move.l a6,-(sp)
    e6a4:	       move.l d2,-(sp)
    UNUSEDALL
    loadNow = getTextFromAnyVar(&(fun->stack->thisVar));
    e6a6:	       movea.l 52(sp),a0
    e6aa:	       move.l 24(a0),d0
    e6ae:	       move.l d0,-(sp)
    e6b0:	       jsr 14bc6 <getTextFromAnyVar>
    e6b6:	       addq.l #4,sp
    e6b8:	       move.l d0,1a770 <loadNow>
    trimStack(&fun->stack);
    e6be:	       moveq #24,d0
    e6c0:	       add.l 52(sp),d0
    e6c4:	       move.l d0,-(sp)
    e6c6:	       jsr 14f74 <trimStack>
    e6cc:	       addq.l #4,sp
    char *aaaaa = encodeFilename(loadNow);
    e6ce:	       move.l 1a770 <loadNow>,d0
    e6d4:	       move.l d0,-(sp)
    e6d6:	       jsr 2fe <encodeFilename>
    e6dc:	       addq.l #4,sp
    e6de:	       move.l d0,40(sp)
    FreeVec(loadNow);
    e6e2:	       move.l 1a770 <loadNow>,36(sp)
    e6ea:	       move.l 1a7a4 <SysBase>,d0
    e6f0:	       movea.l d0,a6
    e6f2:	       movea.l 36(sp),a1
    e6f6:	       jsr -690(a6)
    if (failSecurityCheck(aaaaa)) return BR_ERROR;
    e6fa:	       move.l 40(sp),-(sp)
    e6fe:	       jsr e142 <failSecurityCheck>
    e704:	       addq.l #4,sp
    e706:	       tst.w d0
    e708:	   /-- beq.s e710 <builtIn_fileExists+0x72>
    e70a:	   |   moveq #1,d0
    e70c:	/--|-- bra.w e7b0 <builtIn_fileExists+0x112>
    BPTR fp = Open(aaaaa, MODE_OLDFILE);
    e710:	|  \-> move.l 40(sp),32(sp)
    e716:	|      move.l #1005,28(sp)
    e71e:	|      move.l 1a7ac <DOSBase>,d0
    e724:	|      movea.l d0,a6
    e726:	|      move.l 32(sp),d1
    e72a:	|      move.l 28(sp),d2
    e72e:	|      jsr -30(a6)
    e732:	|      move.l d0,24(sp)
    e736:	|      move.l 24(sp),d0
    e73a:	|      move.l d0,20(sp)
    if (!fp) {        
    e73e:	|  /-- bne.s e74e <builtIn_fileExists+0xb0>
        KPrintF("Can't get current directory.\n");      
    e740:	|  |   pea 19608 <PutChar+0x1b2a>
    e746:	|  |   jsr 1703c <KPrintF>
    e74c:	|  |   addq.l #4,sp
    }
    // Return value
    setVariable(&fun->reg, SVT_INT, (fp != NULL));
    e74e:	|  \-> tst.l 20(sp)
    e752:	|      sne d0
    e754:	|      neg.b d0
    e756:	|      moveq #0,d1
    e758:	|      move.b d0,d1
    e75a:	|      moveq #28,d0
    e75c:	|      add.l 52(sp),d0
    e760:	|      move.l d1,-(sp)
    e762:	|      pea 1 <_start+0x1>
    e766:	|      move.l d0,-(sp)
    e768:	|      jsr 14ee2 <setVariable>
    e76e:	|      lea 12(sp),sp
    if (fp) Close(fp);
    e772:	|      tst.l 20(sp)
    e776:	|  /-- beq.s e792 <builtIn_fileExists+0xf4>
    e778:	|  |   move.l 20(sp),16(sp)
    e77e:	|  |   move.l 1a7ac <DOSBase>,d0
    e784:	|  |   movea.l d0,a6
    e786:	|  |   move.l 16(sp),d1
    e78a:	|  |   jsr -36(a6)
    e78e:	|  |   move.l d0,12(sp)
    FreeVec(aaaaa);
    e792:	|  \-> move.l 40(sp),8(sp)
    e798:	|      move.l 1a7a4 <SysBase>,d0
    e79e:	|      movea.l d0,a6
    e7a0:	|      movea.l 8(sp),a1
    e7a4:	|      jsr -690(a6)
    loadNow = NULL;
    e7a8:	|      clr.l 1a770 <loadNow>
    return BR_CONTINUE;
    e7ae:	|      moveq #2,d0
}
    e7b0:	\----> move.l (sp)+,d2
    e7b2:	       movea.l (sp)+,a6
    e7b4:	       lea 36(sp),sp
    e7b8:	       rts

0000e7ba <builtIn_loadGame>:

builtIn(loadGame)
{
    e7ba:	       lea -36(sp),sp
    e7be:	       move.l a6,-(sp)
    e7c0:	       move.l d2,-(sp)
    UNUSEDALL
    char *aaaaa = getTextFromAnyVar(&(fun->stack->thisVar));
    e7c2:	       movea.l 52(sp),a0
    e7c6:	       move.l 24(a0),d0
    e7ca:	       move.l d0,-(sp)
    e7cc:	       jsr 14bc6 <getTextFromAnyVar>
    e7d2:	       addq.l #4,sp
    e7d4:	       move.l d0,40(sp)
    trimStack(&fun->stack);
    e7d8:	       moveq #24,d0
    e7da:	       add.l 52(sp),d0
    e7de:	       move.l d0,-(sp)
    e7e0:	       jsr 14f74 <trimStack>
    e7e6:	       addq.l #4,sp
    loadNow = encodeFilename(aaaaa);
    e7e8:	       move.l 40(sp),-(sp)
    e7ec:	       jsr 2fe <encodeFilename>
    e7f2:	       addq.l #4,sp
    e7f4:	       move.l d0,1a770 <loadNow>
    FreeVec(aaaaa);
    e7fa:	       move.l 40(sp),36(sp)
    e800:	       move.l 1a7a4 <SysBase>,d0
    e806:	       movea.l d0,a6
    e808:	       movea.l 36(sp),a1
    e80c:	       jsr -690(a6)

    /*if (frozenStuff) {
        fatal("Can't load a saved game while the engine is frozen");
    }*/

    if (failSecurityCheck(loadNow)) return BR_ERROR;
    e810:	       move.l 1a770 <loadNow>,d0
    e816:	       move.l d0,-(sp)
    e818:	       jsr e142 <failSecurityCheck>
    e81e:	       addq.l #4,sp
    e820:	       tst.w d0
    e822:	   /-- beq.s e828 <builtIn_loadGame+0x6e>
    e824:	   |   moveq #1,d0
    e826:	/--|-- bra.s e898 <builtIn_loadGame+0xde>
    BPTR fp = Open(loadNow, MODE_OLDFILE);
    e828:	|  \-> move.l 1a770 <loadNow>,32(sp)
    e830:	|      move.l #1005,28(sp)
    e838:	|      move.l 1a7ac <DOSBase>,d0
    e83e:	|      movea.l d0,a6
    e840:	|      move.l 32(sp),d1
    e844:	|      move.l 28(sp),d2
    e848:	|      jsr -30(a6)
    e84c:	|      move.l d0,24(sp)
    e850:	|      move.l 24(sp),d0
    e854:	|      move.l d0,20(sp)
    if (fp) {
    e858:	|  /-- beq.s e878 <builtIn_loadGame+0xbe>
        Close(fp);
    e85a:	|  |   move.l 20(sp),12(sp)
    e860:	|  |   move.l 1a7ac <DOSBase>,d0
    e866:	|  |   movea.l d0,a6
    e868:	|  |   move.l 12(sp),d1
    e86c:	|  |   jsr -36(a6)
    e870:	|  |   move.l d0,8(sp)
        return BR_KEEP_AND_PAUSE;
    e874:	|  |   moveq #0,d0
    e876:	+--|-- bra.s e898 <builtIn_loadGame+0xde>
    }
    FreeVec(loadNow);
    e878:	|  \-> move.l 1a770 <loadNow>,16(sp)
    e880:	|      move.l 1a7a4 <SysBase>,d0
    e886:	|      movea.l d0,a6
    e888:	|      movea.l 16(sp),a1
    e88c:	|      jsr -690(a6)
    loadNow = NULL;
    e890:	|      clr.l 1a770 <loadNow>
    return BR_CONTINUE;
    e896:	|      moveq #2,d0
}
    e898:	\----> move.l (sp)+,d2
    e89a:	       movea.l (sp)+,a6
    e89c:	       lea 36(sp),sp
    e8a0:	       rts

0000e8a2 <builtIn_blankScreen>:
#pragma mark Background image - Painting

builtIn(blankScreen)
{
	UNUSEDALL
	blankScreen (0, 0, sceneWidth, sceneHeight);
    e8a2:	move.l 1a844 <sceneHeight>,d0
    e8a8:	move.l d0,d1
    e8aa:	move.l 1a840 <sceneWidth>,d0
    e8b0:	move.l d1,-(sp)
    e8b2:	move.l d0,-(sp)
    e8b4:	clr.l -(sp)
    e8b6:	clr.l -(sp)
    e8b8:	jsr d036 <blankScreen>
    e8be:	lea 16(sp),sp
	return BR_CONTINUE;
    e8c2:	moveq #2,d0
}
    e8c4:	rts

0000e8c6 <builtIn_blankArea>:

builtIn(blankArea)
{
    e8c6:	       lea -16(sp),sp
	UNUSEDALL
	int x1, y1, x2, y2;
	if (! getValueType (&y2, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    e8ca:	       movea.l 24(sp),a0
    e8ce:	       move.l 24(a0),d0
    e8d2:	       move.l d0,-(sp)
    e8d4:	       pea 1 <_start+0x1>
    e8d8:	       lea 8(sp),a0
    e8dc:	       move.l a0,-(sp)
    e8de:	       jsr 145f0 <getValueType>
    e8e4:	       lea 12(sp),sp
    e8e8:	       tst.w d0
    e8ea:	   /-- bne.s e8f2 <builtIn_blankArea+0x2c>
    e8ec:	   |   moveq #1,d0
    e8ee:	/--|-- bra.w e9c8 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    e8f2:	|  \-> moveq #24,d0
    e8f4:	|      add.l 24(sp),d0
    e8f8:	|      move.l d0,-(sp)
    e8fa:	|      jsr 14f74 <trimStack>
    e900:	|      addq.l #4,sp
	if (! getValueType (&x2, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    e902:	|      movea.l 24(sp),a0
    e906:	|      move.l 24(a0),d0
    e90a:	|      move.l d0,-(sp)
    e90c:	|      pea 1 <_start+0x1>
    e910:	|      lea 12(sp),a0
    e914:	|      move.l a0,-(sp)
    e916:	|      jsr 145f0 <getValueType>
    e91c:	|      lea 12(sp),sp
    e920:	|      tst.w d0
    e922:	|  /-- bne.s e92a <builtIn_blankArea+0x64>
    e924:	|  |   moveq #1,d0
    e926:	+--|-- bra.w e9c8 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    e92a:	|  \-> moveq #24,d0
    e92c:	|      add.l 24(sp),d0
    e930:	|      move.l d0,-(sp)
    e932:	|      jsr 14f74 <trimStack>
    e938:	|      addq.l #4,sp
	if (! getValueType (&y1, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    e93a:	|      movea.l 24(sp),a0
    e93e:	|      move.l 24(a0),d0
    e942:	|      move.l d0,-(sp)
    e944:	|      pea 1 <_start+0x1>
    e948:	|      moveq #16,d0
    e94a:	|      add.l sp,d0
    e94c:	|      move.l d0,-(sp)
    e94e:	|      jsr 145f0 <getValueType>
    e954:	|      lea 12(sp),sp
    e958:	|      tst.w d0
    e95a:	|  /-- bne.s e960 <builtIn_blankArea+0x9a>
    e95c:	|  |   moveq #1,d0
    e95e:	+--|-- bra.s e9c8 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    e960:	|  \-> moveq #24,d0
    e962:	|      add.l 24(sp),d0
    e966:	|      move.l d0,-(sp)
    e968:	|      jsr 14f74 <trimStack>
    e96e:	|      addq.l #4,sp
	if (! getValueType (&x1, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    e970:	|      movea.l 24(sp),a0
    e974:	|      move.l 24(a0),d0
    e978:	|      move.l d0,-(sp)
    e97a:	|      pea 1 <_start+0x1>
    e97e:	|      moveq #20,d0
    e980:	|      add.l sp,d0
    e982:	|      move.l d0,-(sp)
    e984:	|      jsr 145f0 <getValueType>
    e98a:	|      lea 12(sp),sp
    e98e:	|      tst.w d0
    e990:	|  /-- bne.s e996 <builtIn_blankArea+0xd0>
    e992:	|  |   moveq #1,d0
    e994:	+--|-- bra.s e9c8 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    e996:	|  \-> moveq #24,d0
    e998:	|      add.l 24(sp),d0
    e99c:	|      move.l d0,-(sp)
    e99e:	|      jsr 14f74 <trimStack>
    e9a4:	|      addq.l #4,sp
	blankScreen (x1, y1, x2, y2);
    e9a6:	|      movea.l (sp),a1
    e9a8:	|      movea.l 4(sp),a0
    e9ac:	|      move.l 8(sp),d1
    e9b0:	|      move.l 12(sp),d0
    e9b4:	|      move.l a1,-(sp)
    e9b6:	|      move.l a0,-(sp)
    e9b8:	|      move.l d1,-(sp)
    e9ba:	|      move.l d0,-(sp)
    e9bc:	|      jsr d036 <blankScreen>
    e9c2:	|      lea 16(sp),sp
	return BR_CONTINUE;
    e9c6:	|      moveq #2,d0
}
    e9c8:	\----> lea 16(sp),sp
    e9cc:	       rts

0000e9ce <builtIn_darkBackground>:

builtIn(darkBackground)
{
	UNUSEDALL
	darkScreen ();
    e9ce:	jsr d04a <darkScreen>
	return BR_CONTINUE;
    e9d4:	moveq #2,d0
}
    e9d6:	rts

0000e9d8 <builtIn_addOverlay>:

builtIn(addOverlay)
{
    e9d8:	       lea -12(sp),sp
	UNUSEDALL
	int fileNumber, xPos, yPos;
	if (! getValueType(&yPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e9dc:	       movea.l 20(sp),a0
    e9e0:	       move.l 24(a0),d0
    e9e4:	       move.l d0,-(sp)
    e9e6:	       pea 1 <_start+0x1>
    e9ea:	       lea 8(sp),a0
    e9ee:	       move.l a0,-(sp)
    e9f0:	       jsr 145f0 <getValueType>
    e9f6:	       lea 12(sp),sp
    e9fa:	       tst.w d0
    e9fc:	   /-- bne.s ea04 <builtIn_addOverlay+0x2c>
    e9fe:	   |   moveq #1,d0
    ea00:	/--|-- bra.w ea9c <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    ea04:	|  \-> moveq #24,d0
    ea06:	|      add.l 20(sp),d0
    ea0a:	|      move.l d0,-(sp)
    ea0c:	|      jsr 14f74 <trimStack>
    ea12:	|      addq.l #4,sp
	if (! getValueType(&xPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ea14:	|      movea.l 20(sp),a0
    ea18:	|      move.l 24(a0),d0
    ea1c:	|      move.l d0,-(sp)
    ea1e:	|      pea 1 <_start+0x1>
    ea22:	|      moveq #12,d0
    ea24:	|      add.l sp,d0
    ea26:	|      move.l d0,-(sp)
    ea28:	|      jsr 145f0 <getValueType>
    ea2e:	|      lea 12(sp),sp
    ea32:	|      tst.w d0
    ea34:	|  /-- bne.s ea3a <builtIn_addOverlay+0x62>
    ea36:	|  |   moveq #1,d0
    ea38:	+--|-- bra.s ea9c <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    ea3a:	|  \-> moveq #24,d0
    ea3c:	|      add.l 20(sp),d0
    ea40:	|      move.l d0,-(sp)
    ea42:	|      jsr 14f74 <trimStack>
    ea48:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    ea4a:	|      movea.l 20(sp),a0
    ea4e:	|      move.l 24(a0),d0
    ea52:	|      move.l d0,-(sp)
    ea54:	|      pea 5 <_start+0x5>
    ea58:	|      moveq #16,d0
    ea5a:	|      add.l sp,d0
    ea5c:	|      move.l d0,-(sp)
    ea5e:	|      jsr 145f0 <getValueType>
    ea64:	|      lea 12(sp),sp
    ea68:	|      tst.w d0
    ea6a:	|  /-- bne.s ea70 <builtIn_addOverlay+0x98>
    ea6c:	|  |   moveq #1,d0
    ea6e:	+--|-- bra.s ea9c <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    ea70:	|  \-> moveq #24,d0
    ea72:	|      add.l 20(sp),d0
    ea76:	|      move.l d0,-(sp)
    ea78:	|      jsr 14f74 <trimStack>
    ea7e:	|      addq.l #4,sp
	loadBackDrop (fileNumber, xPos, yPos);
    ea80:	|      movea.l (sp),a0
    ea82:	|      move.l 4(sp),d1
    ea86:	|      move.l 8(sp),d0
    ea8a:	|      move.l a0,-(sp)
    ea8c:	|      move.l d1,-(sp)
    ea8e:	|      move.l d0,-(sp)
    ea90:	|      jsr d168 <loadBackDrop>
    ea96:	|      lea 12(sp),sp
	return BR_CONTINUE;
    ea9a:	|      moveq #2,d0
}
    ea9c:	\----> lea 12(sp),sp
    eaa0:	       rts

0000eaa2 <builtIn_mixOverlay>:

builtIn(mixOverlay)
{
    eaa2:	       lea -12(sp),sp
	UNUSEDALL
	int fileNumber, xPos, yPos;
	if (! getValueType(&yPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    eaa6:	       movea.l 20(sp),a0
    eaaa:	       move.l 24(a0),d0
    eaae:	       move.l d0,-(sp)
    eab0:	       pea 1 <_start+0x1>
    eab4:	       lea 8(sp),a0
    eab8:	       move.l a0,-(sp)
    eaba:	       jsr 145f0 <getValueType>
    eac0:	       lea 12(sp),sp
    eac4:	       tst.w d0
    eac6:	   /-- bne.s eace <builtIn_mixOverlay+0x2c>
    eac8:	   |   moveq #1,d0
    eaca:	/--|-- bra.w eb66 <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    eace:	|  \-> moveq #24,d0
    ead0:	|      add.l 20(sp),d0
    ead4:	|      move.l d0,-(sp)
    ead6:	|      jsr 14f74 <trimStack>
    eadc:	|      addq.l #4,sp
	if (! getValueType(&xPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    eade:	|      movea.l 20(sp),a0
    eae2:	|      move.l 24(a0),d0
    eae6:	|      move.l d0,-(sp)
    eae8:	|      pea 1 <_start+0x1>
    eaec:	|      moveq #12,d0
    eaee:	|      add.l sp,d0
    eaf0:	|      move.l d0,-(sp)
    eaf2:	|      jsr 145f0 <getValueType>
    eaf8:	|      lea 12(sp),sp
    eafc:	|      tst.w d0
    eafe:	|  /-- bne.s eb04 <builtIn_mixOverlay+0x62>
    eb00:	|  |   moveq #1,d0
    eb02:	+--|-- bra.s eb66 <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    eb04:	|  \-> moveq #24,d0
    eb06:	|      add.l 20(sp),d0
    eb0a:	|      move.l d0,-(sp)
    eb0c:	|      jsr 14f74 <trimStack>
    eb12:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    eb14:	|      movea.l 20(sp),a0
    eb18:	|      move.l 24(a0),d0
    eb1c:	|      move.l d0,-(sp)
    eb1e:	|      pea 5 <_start+0x5>
    eb22:	|      moveq #16,d0
    eb24:	|      add.l sp,d0
    eb26:	|      move.l d0,-(sp)
    eb28:	|      jsr 145f0 <getValueType>
    eb2e:	|      lea 12(sp),sp
    eb32:	|      tst.w d0
    eb34:	|  /-- bne.s eb3a <builtIn_mixOverlay+0x98>
    eb36:	|  |   moveq #1,d0
    eb38:	+--|-- bra.s eb66 <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    eb3a:	|  \-> moveq #24,d0
    eb3c:	|      add.l 20(sp),d0
    eb40:	|      move.l d0,-(sp)
    eb42:	|      jsr 14f74 <trimStack>
    eb48:	|      addq.l #4,sp
	mixBackDrop (fileNumber, xPos, yPos);
    eb4a:	|      movea.l (sp),a0
    eb4c:	|      move.l 4(sp),d1
    eb50:	|      move.l 8(sp),d0
    eb54:	|      move.l a0,-(sp)
    eb56:	|      move.l d1,-(sp)
    eb58:	|      move.l d0,-(sp)
    eb5a:	|      jsr d1de <mixBackDrop>
    eb60:	|      lea 12(sp),sp
	return BR_CONTINUE;
    eb64:	|      moveq #2,d0
}
    eb66:	\----> lea 12(sp),sp
    eb6a:	       rts

0000eb6c <builtIn_pasteImage>:

builtIn(pasteImage)
{
    eb6c:	       lea -12(sp),sp
	UNUSEDALL
	//KPrintF("pasteimage: Started\n");
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    eb70:	       movea.l 20(sp),a0
    eb74:	       move.l 24(a0),d0
    eb78:	       move.l d0,-(sp)
    eb7a:	       pea 1 <_start+0x1>
    eb7e:	       lea 8(sp),a0
    eb82:	       move.l a0,-(sp)
    eb84:	       jsr 145f0 <getValueType>
    eb8a:	       lea 12(sp),sp
    eb8e:	       tst.w d0
    eb90:	   /-- bne.s eb98 <builtIn_pasteImage+0x2c>
    eb92:	   |   moveq #1,d0
    eb94:	/--|-- bra.w ec28 <builtIn_pasteImage+0xbc>
	trimStack (&fun -> stack);
    eb98:	|  \-> moveq #24,d0
    eb9a:	|      add.l 20(sp),d0
    eb9e:	|      move.l d0,-(sp)
    eba0:	|      jsr 14f74 <trimStack>
    eba6:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    eba8:	|      movea.l 20(sp),a0
    ebac:	|      move.l 24(a0),d0
    ebb0:	|      move.l d0,-(sp)
    ebb2:	|      pea 1 <_start+0x1>
    ebb6:	|      moveq #12,d0
    ebb8:	|      add.l sp,d0
    ebba:	|      move.l d0,-(sp)
    ebbc:	|      jsr 145f0 <getValueType>
    ebc2:	|      lea 12(sp),sp
    ebc6:	|      tst.w d0
    ebc8:	|  /-- bne.s ebce <builtIn_pasteImage+0x62>
    ebca:	|  |   moveq #1,d0
    ebcc:	+--|-- bra.s ec28 <builtIn_pasteImage+0xbc>
	trimStack (&fun -> stack);
    ebce:	|  \-> moveq #24,d0
    ebd0:	|      add.l 20(sp),d0
    ebd4:	|      move.l d0,-(sp)
    ebd6:	|      jsr 14f74 <trimStack>
    ebdc:	|      addq.l #4,sp
	struct personaAnimation * pp = getAnimationFromVar (&(fun -> stack -> thisVar));
    ebde:	|      movea.l 20(sp),a0
    ebe2:	|      move.l 24(a0),d0
    ebe6:	|      move.l d0,-(sp)
    ebe8:	|      jsr 14ac8 <getAnimationFromVar>
    ebee:	|      addq.l #4,sp
    ebf0:	|      move.l d0,8(sp)
	trimStack (&fun -> stack);
    ebf4:	|      moveq #24,d0
    ebf6:	|      add.l 20(sp),d0
    ebfa:	|      move.l d0,-(sp)
    ebfc:	|      jsr 14f74 <trimStack>
    ec02:	|      addq.l #4,sp
	if (pp == NULL) return BR_CONTINUE;
    ec04:	|      tst.l 8(sp)
    ec08:	|  /-- bne.s ec0e <builtIn_pasteImage+0xa2>
    ec0a:	|  |   moveq #2,d0
    ec0c:	+--|-- bra.s ec28 <builtIn_pasteImage+0xbc>

	pasteCursor (x, y, pp);
    ec0e:	|  \-> move.l (sp),d1
    ec10:	|      move.l 4(sp),d0
    ec14:	|      move.l 8(sp),-(sp)
    ec18:	|      move.l d1,-(sp)
    ec1a:	|      move.l d0,-(sp)
    ec1c:	|      jsr d94 <pasteCursor>
    ec22:	|      lea 12(sp),sp
	//KPrintF("pasteimage: Finished\n");
	return BR_CONTINUE;	
    ec26:	|      moveq #2,d0
}
    ec28:	\----> lea 12(sp),sp
    ec2c:	       rts

0000ec2e <builtIn_setSceneDimensions>:

#pragma mark -
#pragma mark Background Image - Scrolling

builtIn(setSceneDimensions)
{
    ec2e:	       subq.l #8,sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ec30:	       movea.l 16(sp),a0
    ec34:	       move.l 24(a0),d0
    ec38:	       move.l d0,-(sp)
    ec3a:	       pea 1 <_start+0x1>
    ec3e:	       move.l sp,d0
    ec40:	       addq.l #8,d0
    ec42:	       move.l d0,-(sp)
    ec44:	       jsr 145f0 <getValueType>
    ec4a:	       lea 12(sp),sp
    ec4e:	       tst.w d0
    ec50:	   /-- bne.s ec58 <builtIn_setSceneDimensions+0x2a>
    ec52:	   |   moveq #1,d0
    ec54:	/--|-- bra.w ece0 <builtIn_setSceneDimensions+0xb2>
	trimStack (&fun -> stack);
    ec58:	|  \-> moveq #24,d0
    ec5a:	|      add.l 16(sp),d0
    ec5e:	|      move.l d0,-(sp)
    ec60:	|      jsr 14f74 <trimStack>
    ec66:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ec68:	|      movea.l 16(sp),a0
    ec6c:	|      move.l 24(a0),d0
    ec70:	|      move.l d0,-(sp)
    ec72:	|      pea 1 <_start+0x1>
    ec76:	|      moveq #12,d0
    ec78:	|      add.l sp,d0
    ec7a:	|      move.l d0,-(sp)
    ec7c:	|      jsr 145f0 <getValueType>
    ec82:	|      lea 12(sp),sp
    ec86:	|      tst.w d0
    ec88:	|  /-- bne.s ec8e <builtIn_setSceneDimensions+0x60>
    ec8a:	|  |   moveq #1,d0
    ec8c:	+--|-- bra.s ece0 <builtIn_setSceneDimensions+0xb2>
	trimStack (&fun -> stack);
    ec8e:	|  \-> moveq #24,d0
    ec90:	|      add.l 16(sp),d0
    ec94:	|      move.l d0,-(sp)
    ec96:	|      jsr 14f74 <trimStack>
    ec9c:	|      addq.l #4,sp
	if (resizeBackdrop (x, y)) {
    ec9e:	|      move.l (sp),d1
    eca0:	|      move.l 4(sp),d0
    eca4:	|      move.l d1,-(sp)
    eca6:	|      move.l d0,-(sp)
    eca8:	|      jsr d234 <resizeBackdrop>
    ecae:	|      addq.l #8,sp
    ecb0:	|      tst.w d0
    ecb2:	|  /-- beq.s ecd0 <builtIn_setSceneDimensions+0xa2>
		blankScreen (0, 0, x, y);
    ecb4:	|  |   move.l (sp),d1
    ecb6:	|  |   move.l 4(sp),d0
    ecba:	|  |   move.l d1,-(sp)
    ecbc:	|  |   move.l d0,-(sp)
    ecbe:	|  |   clr.l -(sp)
    ecc0:	|  |   clr.l -(sp)
    ecc2:	|  |   jsr d036 <blankScreen>
    ecc8:	|  |   lea 16(sp),sp
		return BR_CONTINUE;
    eccc:	|  |   moveq #2,d0
    ecce:	+--|-- bra.s ece0 <builtIn_setSceneDimensions+0xb2>
	}
	KPrintF("Out of memory creating new backdrop.");
    ecd0:	|  \-> pea 19626 <PutChar+0x1b48>
    ecd6:	|      jsr 1703c <KPrintF>
    ecdc:	|      addq.l #4,sp
	return BR_ERROR;
    ecde:	|      moveq #1,d0
}
    ece0:	\----> addq.l #8,sp
    ece2:	       rts

0000ece4 <builtIn_aimCamera>:

builtIn(aimCamera)
{
    ece4:	          move.l d3,-(sp)
    ece6:	          move.l d2,-(sp)
	UNUSEDALL
	if (! getValueType(&cameraY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ece8:	          movea.l 16(sp),a0
    ecec:	          move.l 24(a0),d0
    ecf0:	          move.l d0,-(sp)
    ecf2:	          pea 1 <_start+0x1>
    ecf6:	          pea 1a862 <cameraY>
    ecfc:	          jsr 145f0 <getValueType>
    ed02:	          lea 12(sp),sp
    ed06:	          tst.w d0
    ed08:	      /-- bne.s ed10 <builtIn_aimCamera+0x2c>
    ed0a:	      |   moveq #1,d0
    ed0c:	/-----|-- bra.w ef92 <builtIn_aimCamera+0x2ae>
	trimStack (&fun -> stack);
    ed10:	|     \-> moveq #24,d0
    ed12:	|         add.l 16(sp),d0
    ed16:	|         move.l d0,-(sp)
    ed18:	|         jsr 14f74 <trimStack>
    ed1e:	|         addq.l #4,sp
	if (! getValueType(&cameraX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ed20:	|         movea.l 16(sp),a0
    ed24:	|         move.l 24(a0),d0
    ed28:	|         move.l d0,-(sp)
    ed2a:	|         pea 1 <_start+0x1>
    ed2e:	|         pea 1a85e <cameraX>
    ed34:	|         jsr 145f0 <getValueType>
    ed3a:	|         lea 12(sp),sp
    ed3e:	|         tst.w d0
    ed40:	|     /-- bne.s ed48 <builtIn_aimCamera+0x64>
    ed42:	|     |   moveq #1,d0
    ed44:	+-----|-- bra.w ef92 <builtIn_aimCamera+0x2ae>
	trimStack (&fun -> stack);
    ed48:	|     \-> moveq #24,d0
    ed4a:	|         add.l 16(sp),d0
    ed4e:	|         move.l d0,-(sp)
    ed50:	|         jsr 14f74 <trimStack>
    ed56:	|         addq.l #4,sp

	cameraX -= (FLOAT)(winWidth >> 1)/ cameraZoom;
    ed58:	|         move.l 1a85e <cameraX>,d0
    ed5e:	|         move.l d0,-(sp)
    ed60:	|         jsr 1746e <__floatsisf>
    ed66:	|         addq.l #4,sp
    ed68:	|         move.l d0,d2
    ed6a:	|         move.l 1a6f8 <winWidth>,d0
    ed70:	|         lsr.l #1,d0
    ed72:	|         move.l d0,-(sp)
    ed74:	|         jsr 17496 <__floatunsisf>
    ed7a:	|         addq.l #4,sp
    ed7c:	|         move.l d0,d1
    ed7e:	|         move.l 1a142 <cameraZoom>,d0
    ed84:	|         move.l d0,-(sp)
    ed86:	|         move.l d1,-(sp)
    ed88:	|         jsr 17324 <__divsf3>
    ed8e:	|         addq.l #8,sp
    ed90:	|         move.l d0,-(sp)
    ed92:	|         move.l d2,-(sp)
    ed94:	|         jsr 17762 <__subsf3>
    ed9a:	|         addq.l #8,sp
    ed9c:	|         move.l d0,-(sp)
    ed9e:	|         jsr 17406 <__fixsfsi>
    eda4:	|         addq.l #4,sp
    eda6:	|         move.l d0,1a85e <cameraX>
	cameraY -= (FLOAT)(winHeight >> 1)/ cameraZoom;
    edac:	|         move.l 1a862 <cameraY>,d0
    edb2:	|         move.l d0,-(sp)
    edb4:	|         jsr 1746e <__floatsisf>
    edba:	|         addq.l #4,sp
    edbc:	|         move.l d0,d2
    edbe:	|         move.l 1a6fc <winHeight>,d0
    edc4:	|         lsr.l #1,d0
    edc6:	|         move.l d0,-(sp)
    edc8:	|         jsr 17496 <__floatunsisf>
    edce:	|         addq.l #4,sp
    edd0:	|         move.l d0,d1
    edd2:	|         move.l 1a142 <cameraZoom>,d0
    edd8:	|         move.l d0,-(sp)
    edda:	|         move.l d1,-(sp)
    eddc:	|         jsr 17324 <__divsf3>
    ede2:	|         addq.l #8,sp
    ede4:	|         move.l d0,-(sp)
    ede6:	|         move.l d2,-(sp)
    ede8:	|         jsr 17762 <__subsf3>
    edee:	|         addq.l #8,sp
    edf0:	|         move.l d0,-(sp)
    edf2:	|         jsr 17406 <__fixsfsi>
    edf8:	|         addq.l #4,sp
    edfa:	|         move.l d0,1a862 <cameraY>

	if (cameraX < 0) cameraX = 0;
    ee00:	|         move.l 1a85e <cameraX>,d0
    ee06:	|     /-- bpl.s ee12 <builtIn_aimCamera+0x12e>
    ee08:	|     |   clr.l 1a85e <cameraX>
    ee0e:	|  /--|-- bra.w eec8 <builtIn_aimCamera+0x1e4>
	else if (cameraX > sceneWidth - (FLOAT)winWidth/ cameraZoom) cameraX = sceneWidth - (FLOAT)winWidth/ cameraZoom;
    ee12:	|  |  \-> move.l 1a85e <cameraX>,d0
    ee18:	|  |      move.l d0,-(sp)
    ee1a:	|  |      jsr 1746e <__floatsisf>
    ee20:	|  |      addq.l #4,sp
    ee22:	|  |      move.l d0,d2
    ee24:	|  |      move.l 1a840 <sceneWidth>,d0
    ee2a:	|  |      move.l d0,-(sp)
    ee2c:	|  |      jsr 17496 <__floatunsisf>
    ee32:	|  |      addq.l #4,sp
    ee34:	|  |      move.l d0,d3
    ee36:	|  |      move.l 1a6f8 <winWidth>,d0
    ee3c:	|  |      move.l d0,-(sp)
    ee3e:	|  |      jsr 17496 <__floatunsisf>
    ee44:	|  |      addq.l #4,sp
    ee46:	|  |      move.l d0,d1
    ee48:	|  |      move.l 1a142 <cameraZoom>,d0
    ee4e:	|  |      move.l d0,-(sp)
    ee50:	|  |      move.l d1,-(sp)
    ee52:	|  |      jsr 17324 <__divsf3>
    ee58:	|  |      addq.l #8,sp
    ee5a:	|  |      move.l d0,-(sp)
    ee5c:	|  |      move.l d3,-(sp)
    ee5e:	|  |      jsr 17762 <__subsf3>
    ee64:	|  |      addq.l #8,sp
    ee66:	|  |      move.l d0,-(sp)
    ee68:	|  |      move.l d2,-(sp)
    ee6a:	|  |      jsr 175da <__gtsf2>
    ee70:	|  |      addq.l #8,sp
    ee72:	|  |      tst.l d0
    ee74:	|  +----- ble.s eec8 <builtIn_aimCamera+0x1e4>
    ee76:	|  |      move.l 1a840 <sceneWidth>,d0
    ee7c:	|  |      move.l d0,-(sp)
    ee7e:	|  |      jsr 17496 <__floatunsisf>
    ee84:	|  |      addq.l #4,sp
    ee86:	|  |      move.l d0,d2
    ee88:	|  |      move.l 1a6f8 <winWidth>,d0
    ee8e:	|  |      move.l d0,-(sp)
    ee90:	|  |      jsr 17496 <__floatunsisf>
    ee96:	|  |      addq.l #4,sp
    ee98:	|  |      move.l d0,d1
    ee9a:	|  |      move.l 1a142 <cameraZoom>,d0
    eea0:	|  |      move.l d0,-(sp)
    eea2:	|  |      move.l d1,-(sp)
    eea4:	|  |      jsr 17324 <__divsf3>
    eeaa:	|  |      addq.l #8,sp
    eeac:	|  |      move.l d0,-(sp)
    eeae:	|  |      move.l d2,-(sp)
    eeb0:	|  |      jsr 17762 <__subsf3>
    eeb6:	|  |      addq.l #8,sp
    eeb8:	|  |      move.l d0,-(sp)
    eeba:	|  |      jsr 17406 <__fixsfsi>
    eec0:	|  |      addq.l #4,sp
    eec2:	|  |      move.l d0,1a85e <cameraX>
	if (cameraY < 0) cameraY = 0;
    eec8:	|  \----> move.l 1a862 <cameraY>,d0
    eece:	|     /-- bpl.s eeda <builtIn_aimCamera+0x1f6>
    eed0:	|     |   clr.l 1a862 <cameraY>
    eed6:	|  /--|-- bra.w ef90 <builtIn_aimCamera+0x2ac>
	else if (cameraY > sceneHeight - (FLOAT)winHeight/ cameraZoom) cameraY = sceneHeight - (FLOAT)winHeight/ cameraZoom;
    eeda:	|  |  \-> move.l 1a862 <cameraY>,d0
    eee0:	|  |      move.l d0,-(sp)
    eee2:	|  |      jsr 1746e <__floatsisf>
    eee8:	|  |      addq.l #4,sp
    eeea:	|  |      move.l d0,d2
    eeec:	|  |      move.l 1a844 <sceneHeight>,d0
    eef2:	|  |      move.l d0,-(sp)
    eef4:	|  |      jsr 17496 <__floatunsisf>
    eefa:	|  |      addq.l #4,sp
    eefc:	|  |      move.l d0,d3
    eefe:	|  |      move.l 1a6fc <winHeight>,d0
    ef04:	|  |      move.l d0,-(sp)
    ef06:	|  |      jsr 17496 <__floatunsisf>
    ef0c:	|  |      addq.l #4,sp
    ef0e:	|  |      move.l d0,d1
    ef10:	|  |      move.l 1a142 <cameraZoom>,d0
    ef16:	|  |      move.l d0,-(sp)
    ef18:	|  |      move.l d1,-(sp)
    ef1a:	|  |      jsr 17324 <__divsf3>
    ef20:	|  |      addq.l #8,sp
    ef22:	|  |      move.l d0,-(sp)
    ef24:	|  |      move.l d3,-(sp)
    ef26:	|  |      jsr 17762 <__subsf3>
    ef2c:	|  |      addq.l #8,sp
    ef2e:	|  |      move.l d0,-(sp)
    ef30:	|  |      move.l d2,-(sp)
    ef32:	|  |      jsr 175da <__gtsf2>
    ef38:	|  |      addq.l #8,sp
    ef3a:	|  |      tst.l d0
    ef3c:	|  +----- ble.s ef90 <builtIn_aimCamera+0x2ac>
    ef3e:	|  |      move.l 1a844 <sceneHeight>,d0
    ef44:	|  |      move.l d0,-(sp)
    ef46:	|  |      jsr 17496 <__floatunsisf>
    ef4c:	|  |      addq.l #4,sp
    ef4e:	|  |      move.l d0,d2
    ef50:	|  |      move.l 1a6fc <winHeight>,d0
    ef56:	|  |      move.l d0,-(sp)
    ef58:	|  |      jsr 17496 <__floatunsisf>
    ef5e:	|  |      addq.l #4,sp
    ef60:	|  |      move.l d0,d1
    ef62:	|  |      move.l 1a142 <cameraZoom>,d0
    ef68:	|  |      move.l d0,-(sp)
    ef6a:	|  |      move.l d1,-(sp)
    ef6c:	|  |      jsr 17324 <__divsf3>
    ef72:	|  |      addq.l #8,sp
    ef74:	|  |      move.l d0,-(sp)
    ef76:	|  |      move.l d2,-(sp)
    ef78:	|  |      jsr 17762 <__subsf3>
    ef7e:	|  |      addq.l #8,sp
    ef80:	|  |      move.l d0,-(sp)
    ef82:	|  |      jsr 17406 <__fixsfsi>
    ef88:	|  |      addq.l #4,sp
    ef8a:	|  |      move.l d0,1a862 <cameraY>
	return BR_CONTINUE;
    ef90:	|  \----> moveq #2,d0
}
    ef92:	\-------> move.l (sp)+,d2
    ef94:	          move.l (sp)+,d3
    ef96:	          rts

0000ef98 <builtIn_zoomCamera>:


builtIn(zoomCamera)
{
    ef98:	       subq.l #4,sp
    ef9a:	       move.l d2,-(sp)
	UNUSEDALL
	int z;
	if (! getValueType(&z, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ef9c:	       movea.l 16(sp),a0
    efa0:	       move.l 24(a0),d0
    efa4:	       move.l d0,-(sp)
    efa6:	       pea 1 <_start+0x1>
    efaa:	       moveq #12,d0
    efac:	       add.l sp,d0
    efae:	       move.l d0,-(sp)
    efb0:	       jsr 145f0 <getValueType>
    efb6:	       lea 12(sp),sp
    efba:	       tst.w d0
    efbc:	   /-- bne.s efc4 <builtIn_zoomCamera+0x2c>
    efbe:	   |   moveq #1,d0
    efc0:	/--|-- bra.w f1be <builtIn_zoomCamera+0x226>
	trimStack (&fun -> stack);
    efc4:	|  \-> moveq #24,d0
    efc6:	|      add.l 16(sp),d0
    efca:	|      move.l d0,-(sp)
    efcc:	|      jsr 14f74 <trimStack>
    efd2:	|      addq.l #4,sp

	input.mouseX = input.mouseX * cameraZoom;
    efd4:	|      move.l 1a760 <input+0xa>,d0
    efda:	|      move.l d0,-(sp)
    efdc:	|      jsr 1746e <__floatsisf>
    efe2:	|      addq.l #4,sp
    efe4:	|      move.l d0,d1
    efe6:	|      move.l 1a142 <cameraZoom>,d0
    efec:	|      move.l d0,-(sp)
    efee:	|      move.l d1,-(sp)
    eff0:	|      jsr 17520 <__mulsf3>
    eff6:	|      addq.l #8,sp
    eff8:	|      move.l d0,-(sp)
    effa:	|      jsr 17406 <__fixsfsi>
    f000:	|      addq.l #4,sp
    f002:	|      move.l d0,1a760 <input+0xa>
	input.mouseY = input.mouseY * cameraZoom;
    f008:	|      move.l 1a764 <input+0xe>,d0
    f00e:	|      move.l d0,-(sp)
    f010:	|      jsr 1746e <__floatsisf>
    f016:	|      addq.l #4,sp
    f018:	|      move.l d0,d1
    f01a:	|      move.l 1a142 <cameraZoom>,d0
    f020:	|      move.l d0,-(sp)
    f022:	|      move.l d1,-(sp)
    f024:	|      jsr 17520 <__mulsf3>
    f02a:	|      addq.l #8,sp
    f02c:	|      move.l d0,-(sp)
    f02e:	|      jsr 17406 <__fixsfsi>
    f034:	|      addq.l #4,sp
    f036:	|      move.l d0,1a764 <input+0xe>


	cameraZoom = (FLOAT) z * (FLOAT) 0.01;
    f03c:	|      move.l 4(sp),d0
    f040:	|      move.l d0,-(sp)
    f042:	|      jsr 1746e <__floatsisf>
    f048:	|      addq.l #4,sp
    f04a:	|      move.l #1008981770,-(sp)
    f050:	|      move.l d0,-(sp)
    f052:	|      jsr 17520 <__mulsf3>
    f058:	|      addq.l #8,sp
    f05a:	|      move.l d0,1a142 <cameraZoom>
	if ((FLOAT) winWidth / cameraZoom > sceneWidth) cameraZoom = (FLOAT)winWidth / sceneWidth;
    f060:	|      move.l 1a6f8 <winWidth>,d0
    f066:	|      move.l d0,-(sp)
    f068:	|      jsr 17496 <__floatunsisf>
    f06e:	|      addq.l #4,sp
    f070:	|      move.l d0,d1
    f072:	|      move.l 1a142 <cameraZoom>,d0
    f078:	|      move.l d0,-(sp)
    f07a:	|      move.l d1,-(sp)
    f07c:	|      jsr 17324 <__divsf3>
    f082:	|      addq.l #8,sp
    f084:	|      move.l d0,d2
    f086:	|      move.l 1a840 <sceneWidth>,d0
    f08c:	|      move.l d0,-(sp)
    f08e:	|      jsr 17496 <__floatunsisf>
    f094:	|      addq.l #4,sp
    f096:	|      move.l d0,-(sp)
    f098:	|      move.l d2,-(sp)
    f09a:	|      jsr 175da <__gtsf2>
    f0a0:	|      addq.l #8,sp
    f0a2:	|      tst.l d0
    f0a4:	|  /-- ble.s f0da <builtIn_zoomCamera+0x142>
    f0a6:	|  |   move.l 1a6f8 <winWidth>,d0
    f0ac:	|  |   move.l d0,-(sp)
    f0ae:	|  |   jsr 17496 <__floatunsisf>
    f0b4:	|  |   addq.l #4,sp
    f0b6:	|  |   move.l d0,d2
    f0b8:	|  |   move.l 1a840 <sceneWidth>,d0
    f0be:	|  |   move.l d0,-(sp)
    f0c0:	|  |   jsr 17496 <__floatunsisf>
    f0c6:	|  |   addq.l #4,sp
    f0c8:	|  |   move.l d0,-(sp)
    f0ca:	|  |   move.l d2,-(sp)
    f0cc:	|  |   jsr 17324 <__divsf3>
    f0d2:	|  |   addq.l #8,sp
    f0d4:	|  |   move.l d0,1a142 <cameraZoom>
	if ((FLOAT) winHeight / cameraZoom > sceneHeight) cameraZoom = (FLOAT)winHeight / sceneHeight;
    f0da:	|  \-> move.l 1a6fc <winHeight>,d0
    f0e0:	|      move.l d0,-(sp)
    f0e2:	|      jsr 17496 <__floatunsisf>
    f0e8:	|      addq.l #4,sp
    f0ea:	|      move.l d0,d1
    f0ec:	|      move.l 1a142 <cameraZoom>,d0
    f0f2:	|      move.l d0,-(sp)
    f0f4:	|      move.l d1,-(sp)
    f0f6:	|      jsr 17324 <__divsf3>
    f0fc:	|      addq.l #8,sp
    f0fe:	|      move.l d0,d2
    f100:	|      move.l 1a844 <sceneHeight>,d0
    f106:	|      move.l d0,-(sp)
    f108:	|      jsr 17496 <__floatunsisf>
    f10e:	|      addq.l #4,sp
    f110:	|      move.l d0,-(sp)
    f112:	|      move.l d2,-(sp)
    f114:	|      jsr 175da <__gtsf2>
    f11a:	|      addq.l #8,sp
    f11c:	|      tst.l d0
    f11e:	|  /-- ble.s f154 <builtIn_zoomCamera+0x1bc>
    f120:	|  |   move.l 1a6fc <winHeight>,d0
    f126:	|  |   move.l d0,-(sp)
    f128:	|  |   jsr 17496 <__floatunsisf>
    f12e:	|  |   addq.l #4,sp
    f130:	|  |   move.l d0,d2
    f132:	|  |   move.l 1a844 <sceneHeight>,d0
    f138:	|  |   move.l d0,-(sp)
    f13a:	|  |   jsr 17496 <__floatunsisf>
    f140:	|  |   addq.l #4,sp
    f142:	|  |   move.l d0,-(sp)
    f144:	|  |   move.l d2,-(sp)
    f146:	|  |   jsr 17324 <__divsf3>
    f14c:	|  |   addq.l #8,sp
    f14e:	|  |   move.l d0,1a142 <cameraZoom>
	//setPixelCoords (FALSE); Todo: Amigize this

	input.mouseX = input.mouseX / cameraZoom;
    f154:	|  \-> move.l 1a760 <input+0xa>,d0
    f15a:	|      move.l d0,-(sp)
    f15c:	|      jsr 1746e <__floatsisf>
    f162:	|      addq.l #4,sp
    f164:	|      move.l d0,d1
    f166:	|      move.l 1a142 <cameraZoom>,d0
    f16c:	|      move.l d0,-(sp)
    f16e:	|      move.l d1,-(sp)
    f170:	|      jsr 17324 <__divsf3>
    f176:	|      addq.l #8,sp
    f178:	|      move.l d0,-(sp)
    f17a:	|      jsr 17406 <__fixsfsi>
    f180:	|      addq.l #4,sp
    f182:	|      move.l d0,1a760 <input+0xa>
	input.mouseY = input.mouseY / cameraZoom;
    f188:	|      move.l 1a764 <input+0xe>,d0
    f18e:	|      move.l d0,-(sp)
    f190:	|      jsr 1746e <__floatsisf>
    f196:	|      addq.l #4,sp
    f198:	|      move.l d0,d1
    f19a:	|      move.l 1a142 <cameraZoom>,d0
    f1a0:	|      move.l d0,-(sp)
    f1a2:	|      move.l d1,-(sp)
    f1a4:	|      jsr 17324 <__divsf3>
    f1aa:	|      addq.l #8,sp
    f1ac:	|      move.l d0,-(sp)
    f1ae:	|      jsr 17406 <__fixsfsi>
    f1b4:	|      addq.l #4,sp
    f1b6:	|      move.l d0,1a764 <input+0xe>

	return BR_CONTINUE;
    f1bc:	|      moveq #2,d0
}
    f1be:	\----> move.l (sp)+,d2
    f1c0:	       addq.l #4,sp
    f1c2:	       rts

0000f1c4 <builtIn_pickOne>:
#pragma mark -
#pragma mark Variables


builtIn(pickOne)
{
    f1c4:	             subq.l #4,sp
	UNUSEDALL
	if (! numParams) {
    f1c6:	             tst.l 8(sp)
    f1ca:	         /-- bne.s f1de <builtIn_pickOne+0x1a>
		KPrintF ("Built-in function should have at least 1 parameter");
    f1cc:	         |   pea 1964b <PutChar+0x1b6d>
    f1d2:	         |   jsr 1703c <KPrintF>
    f1d8:	         |   addq.l #4,sp
		return BR_ERROR;
    f1da:	         |   moveq #1,d0
    f1dc:	/--------|-- bra.s f23e <builtIn_pickOne+0x7a>
	}
	int i = rand() % numParams;
    f1de:	|        \-> jsr 15c18 <rand>
    f1e4:	|            move.l d0,d1
    f1e6:	|            move.l 8(sp),d0
    f1ea:	|            move.l d0,-(sp)
    f1ec:	|            move.l d1,-(sp)
    f1ee:	|            jsr 17aa2 <__umodsi3>
    f1f4:	|            addq.l #8,sp
    f1f6:	|            move.l d0,(sp)

	// Return value
	while (numParams --) {
    f1f8:	|     /----- bra.s f22c <builtIn_pickOne+0x68>
		if (i == numParams) copyVariable (&(fun -> stack -> thisVar), &fun -> reg);
    f1fa:	|  /--|----> move.l (sp),d0
    f1fc:	|  |  |      cmp.l 8(sp),d0
    f200:	|  |  |  /-- bne.s f21c <builtIn_pickOne+0x58>
    f202:	|  |  |  |   moveq #28,d0
    f204:	|  |  |  |   add.l 12(sp),d0
    f208:	|  |  |  |   movea.l 12(sp),a0
    f20c:	|  |  |  |   move.l 24(a0),d1
    f210:	|  |  |  |   move.l d0,-(sp)
    f212:	|  |  |  |   move.l d1,-(sp)
    f214:	|  |  |  |   jsr 14aaa <copyVariable>
    f21a:	|  |  |  |   addq.l #8,sp
		trimStack (&fun -> stack);
    f21c:	|  |  |  \-> moveq #24,d0
    f21e:	|  |  |      add.l 12(sp),d0
    f222:	|  |  |      move.l d0,-(sp)
    f224:	|  |  |      jsr 14f74 <trimStack>
    f22a:	|  |  |      addq.l #4,sp
	while (numParams --) {
    f22c:	|  |  \----> move.l 8(sp),d0
    f230:	|  |         move.l d0,d1
    f232:	|  |         subq.l #1,d1
    f234:	|  |         move.l d1,8(sp)
    f238:	|  |         tst.l d0
    f23a:	|  \-------- bne.s f1fa <builtIn_pickOne+0x36>
	}
	return BR_CONTINUE;
    f23c:	|            moveq #2,d0
}
    f23e:	\----------> addq.l #4,sp
    f240:	             rts

0000f242 <builtIn_substring>:

builtIn(substring)
{
    f242:	       lea -40(sp),sp
    f246:	       move.l a6,-(sp)
    f248:	       move.l d2,-(sp)
    char *newString;
    int start, length;

    //debugOut ("BUILTIN: substring\n");

    if (!getValueType(&length, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    f24a:	       movea.l 56(sp),a0
    f24e:	       move.l 24(a0),d0
    f252:	       move.l d0,-(sp)
    f254:	       pea 1 <_start+0x1>
    f258:	       lea 16(sp),a0
    f25c:	       move.l a0,-(sp)
    f25e:	       jsr 145f0 <getValueType>
    f264:	       lea 12(sp),sp
    f268:	       tst.w d0
    f26a:	   /-- bne.s f272 <builtIn_substring+0x30>
    f26c:	   |   moveq #1,d0
    f26e:	/--|-- bra.w f3ea <builtIn_substring+0x1a8>
    trimStack(&fun->stack);
    f272:	|  \-> moveq #24,d0
    f274:	|      add.l 56(sp),d0
    f278:	|      move.l d0,-(sp)
    f27a:	|      jsr 14f74 <trimStack>
    f280:	|      addq.l #4,sp
    if (!getValueType(&start, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    f282:	|      movea.l 56(sp),a0
    f286:	|      move.l 24(a0),d0
    f28a:	|      move.l d0,-(sp)
    f28c:	|      pea 1 <_start+0x1>
    f290:	|      lea 20(sp),a0
    f294:	|      move.l a0,-(sp)
    f296:	|      jsr 145f0 <getValueType>
    f29c:	|      lea 12(sp),sp
    f2a0:	|      tst.w d0
    f2a2:	|  /-- bne.s f2aa <builtIn_substring+0x68>
    f2a4:	|  |   moveq #1,d0
    f2a6:	+--|-- bra.w f3ea <builtIn_substring+0x1a8>
    trimStack(&fun->stack);
    f2aa:	|  \-> moveq #24,d0
    f2ac:	|      add.l 56(sp),d0
    f2b0:	|      move.l d0,-(sp)
    f2b2:	|      jsr 14f74 <trimStack>
    f2b8:	|      addq.l #4,sp
    wholeString = getTextFromAnyVar(&(fun->stack->thisVar));
    f2ba:	|      movea.l 56(sp),a0
    f2be:	|      move.l 24(a0),d0
    f2c2:	|      move.l d0,-(sp)
    f2c4:	|      jsr 14bc6 <getTextFromAnyVar>
    f2ca:	|      addq.l #4,sp
    f2cc:	|      move.l d0,44(sp)
    trimStack(&fun->stack);
    f2d0:	|      moveq #24,d0
    f2d2:	|      add.l 56(sp),d0
    f2d6:	|      move.l d0,-(sp)
    f2d8:	|      jsr 14f74 <trimStack>
    f2de:	|      addq.l #4,sp
    
    if (strlen(wholeString) < (ULONG) start + length) {
    f2e0:	|      move.l 44(sp),-(sp)
    f2e4:	|      jsr 13adc <strlen>
    f2ea:	|      addq.l #4,sp
    f2ec:	|      move.l d0,d1
    f2ee:	|      move.l 12(sp),d0
    f2f2:	|      movea.l d0,a0
    f2f4:	|      move.l 8(sp),d0
    f2f8:	|      add.l a0,d0
    f2fa:	|      cmp.l d1,d0
    f2fc:	|  /-- bls.s f332 <builtIn_substring+0xf0>
        length = strlen(wholeString) - start;
    f2fe:	|  |   move.l 44(sp),-(sp)
    f302:	|  |   jsr 13adc <strlen>
    f308:	|  |   addq.l #4,sp
    f30a:	|  |   move.l d0,d1
    f30c:	|  |   move.l 12(sp),d0
    f310:	|  |   sub.l d0,d1
    f312:	|  |   move.l d1,d0
    f314:	|  |   move.l d0,8(sp)
        if (strlen(wholeString) < (ULONG) start) {
    f318:	|  |   move.l 44(sp),-(sp)
    f31c:	|  |   jsr 13adc <strlen>
    f322:	|  |   addq.l #4,sp
    f324:	|  |   move.l d0,d1
    f326:	|  |   move.l 12(sp),d0
    f32a:	|  |   cmp.l d1,d0
    f32c:	|  +-- bls.s f332 <builtIn_substring+0xf0>
            start = 0;
    f32e:	|  |   clr.l 12(sp)
        }
    }
    if (length < 0) {
    f332:	|  \-> move.l 8(sp),d0
    f336:	|  /-- bpl.s f33c <builtIn_substring+0xfa>
        length = 0;
    f338:	|  |   clr.l 8(sp)
    }
    
    int startoffset = start;
    f33c:	|  \-> move.l 12(sp),40(sp)
    int endoffset = start + length;
    f342:	|      move.l 12(sp),d1
    f346:	|      move.l 8(sp),d0
    f34a:	|      move.l d1,d2
    f34c:	|      add.l d0,d2
    f34e:	|      move.l d2,36(sp)

    newString = AllocVec(endoffset - startoffset + 1, MEMF_ANY);
    f352:	|      move.l 36(sp),d0
    f356:	|      sub.l 40(sp),d0
    f35a:	|      addq.l #1,d0
    f35c:	|      move.l d0,32(sp)
    f360:	|      clr.l 28(sp)
    f364:	|      move.l 1a7a4 <SysBase>,d0
    f36a:	|      movea.l d0,a6
    f36c:	|      move.l 32(sp),d0
    f370:	|      move.l 28(sp),d1
    f374:	|      jsr -684(a6)
    f378:	|      move.l d0,24(sp)
    f37c:	|      move.l 24(sp),d0
    f380:	|      move.l d0,20(sp)
    if (!newString) {
    f384:	|  /-- bne.s f38a <builtIn_substring+0x148>
        return BR_ERROR;
    f386:	|  |   moveq #1,d0
    f388:	+--|-- bra.s f3ea <builtIn_substring+0x1a8>
    }
    
    memcpy(newString, wholeString + startoffset, endoffset - startoffset);
    f38a:	|  \-> move.l 36(sp),d0
    f38e:	|      sub.l 40(sp),d0
    f392:	|      move.l d0,d1
    f394:	|      move.l 40(sp),d0
    f398:	|      add.l 44(sp),d0
    f39c:	|      move.l d1,-(sp)
    f39e:	|      move.l d0,-(sp)
    f3a0:	|      move.l 28(sp),-(sp)
    f3a4:	|      jsr 16ff0 <memcpy>
    f3aa:	|      lea 12(sp),sp
    newString[endoffset - startoffset] = 0;
    f3ae:	|      move.l 36(sp),d0
    f3b2:	|      sub.l 40(sp),d0
    f3b6:	|      movea.l 20(sp),a0
    f3ba:	|      adda.l d0,a0
    f3bc:	|      clr.b (a0)
    
    makeTextVar(&fun->reg, newString);
    f3be:	|      moveq #28,d0
    f3c0:	|      add.l 56(sp),d0
    f3c4:	|      move.l 20(sp),-(sp)
    f3c8:	|      move.l d0,-(sp)
    f3ca:	|      jsr 14812 <makeTextVar>
    f3d0:	|      addq.l #8,sp
    FreeVec(newString);
    f3d2:	|      move.l 20(sp),16(sp)
    f3d8:	|      move.l 1a7a4 <SysBase>,d0
    f3de:	|      movea.l d0,a6
    f3e0:	|      movea.l 16(sp),a1
    f3e4:	|      jsr -690(a6)
    return BR_CONTINUE;
    f3e8:	|      moveq #2,d0
}
    f3ea:	\----> move.l (sp)+,d2
    f3ec:	       movea.l (sp)+,a6
    f3ee:	       lea 40(sp),sp
    f3f2:	       rts

0000f3f4 <builtIn_stringLength>:

builtIn(stringLength)
{
    f3f4:	subq.l #8,sp
    f3f6:	move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    f3f8:	movea.l 20(sp),a0
    f3fc:	move.l 24(a0),d0
    f400:	move.l d0,-(sp)
    f402:	jsr 14bc6 <getTextFromAnyVar>
    f408:	addq.l #4,sp
    f40a:	move.l d0,8(sp)
	trimStack (&fun -> stack);
    f40e:	moveq #24,d0
    f410:	add.l 20(sp),d0
    f414:	move.l d0,-(sp)
    f416:	jsr 14f74 <trimStack>
    f41c:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, strlen(newText));
    f41e:	move.l 8(sp),-(sp)
    f422:	jsr 13adc <strlen>
    f428:	addq.l #4,sp
    f42a:	move.l d0,d1
    f42c:	moveq #28,d0
    f42e:	add.l 20(sp),d0
    f432:	move.l d1,-(sp)
    f434:	pea 1 <_start+0x1>
    f438:	move.l d0,-(sp)
    f43a:	jsr 14ee2 <setVariable>
    f440:	lea 12(sp),sp
	FreeVec(newText);
    f444:	move.l 8(sp),4(sp)
    f44a:	move.l 1a7a4 <SysBase>,d0
    f450:	movea.l d0,a6
    f452:	movea.l 4(sp),a1
    f456:	jsr -690(a6)
	return BR_CONTINUE;
    f45a:	moveq #2,d0
}
    f45c:	movea.l (sp)+,a6
    f45e:	addq.l #8,sp
    f460:	rts

0000f462 <builtIn_newStack>:

builtIn(newStack)
{
    f462:	             lea -12(sp),sp
    f466:	             move.l a6,-(sp)
    UNUSEDALL
    unlinkVar(&fun->reg);
    f468:	             moveq #28,d0
    f46a:	             add.l 24(sp),d0
    f46e:	             move.l d0,-(sp)
    f470:	             jsr 1483e <unlinkVar>
    f476:	             addq.l #4,sp

    // Return value
    fun->reg.varType = SVT_STACK;
    f478:	             movea.l 24(sp),a0
    f47c:	             moveq #6,d0
    f47e:	             move.l d0,28(a0)
    fun->reg.varData.theStack = AllocVec(sizeof(struct stackHandler), MEMF_ANY);
    f482:	             moveq #12,d1
    f484:	             move.l d1,12(sp)
    f488:	             clr.l 8(sp)
    f48c:	             move.l 1a7a4 <SysBase>,d0
    f492:	             movea.l d0,a6
    f494:	             move.l 12(sp),d0
    f498:	             move.l 8(sp),d1
    f49c:	             jsr -684(a6)
    f4a0:	             move.l d0,4(sp)
    f4a4:	             move.l 4(sp),d0
    f4a8:	             movea.l 24(sp),a0
    f4ac:	             move.l d0,32(a0)
    if (!fun->reg.varData.theStack) return BR_ERROR;
    f4b0:	             movea.l 24(sp),a0
    f4b4:	             move.l 32(a0),d0
    f4b8:	         /-- bne.s f4c0 <builtIn_newStack+0x5e>
    f4ba:	         |   moveq #1,d0
    f4bc:	/--------|-- bra.w f552 <builtIn_newStack+0xf0>
    fun->reg.varData.theStack->first = NULL;
    f4c0:	|        \-> movea.l 24(sp),a0
    f4c4:	|            movea.l 32(a0),a0
    f4c8:	|            clr.l (a0)
    fun->reg.varData.theStack->last = NULL;
    f4ca:	|            movea.l 24(sp),a0
    f4ce:	|            movea.l 32(a0),a0
    f4d2:	|            clr.l 4(a0)
    fun->reg.varData.theStack->timesUsed = 1;
    f4d6:	|            movea.l 24(sp),a0
    f4da:	|            movea.l 32(a0),a0
    f4de:	|            moveq #1,d0
    f4e0:	|            move.l d0,8(a0)
    
    while (numParams--) {
    f4e4:	|     /----- bra.s f540 <builtIn_newStack+0xde>
        if (!addVarToStack(&fun->stack->thisVar, &fun->reg.varData.theStack->first)) return BR_ERROR;
    f4e6:	|  /--|----> movea.l 24(sp),a0
    f4ea:	|  |  |      move.l 32(a0),d0
    f4ee:	|  |  |      move.l d0,d1
    f4f0:	|  |  |      movea.l 24(sp),a0
    f4f4:	|  |  |      move.l 24(a0),d0
    f4f8:	|  |  |      move.l d1,-(sp)
    f4fa:	|  |  |      move.l d0,-(sp)
    f4fc:	|  |  |      jsr 13e2c <addVarToStack>
    f502:	|  |  |      addq.l #8,sp
    f504:	|  |  |      tst.w d0
    f506:	|  |  |  /-- bne.s f50c <builtIn_newStack+0xaa>
    f508:	|  |  |  |   moveq #1,d0
    f50a:	+--|--|--|-- bra.s f552 <builtIn_newStack+0xf0>
        if (fun->reg.varData.theStack->last == NULL) {
    f50c:	|  |  |  \-> movea.l 24(sp),a0
    f510:	|  |  |      movea.l 32(a0),a0
    f514:	|  |  |      move.l 4(a0),d0
    f518:	|  |  |  /-- bne.s f530 <builtIn_newStack+0xce>
            fun->reg.varData.theStack->last = fun->reg.varData.theStack->first;
    f51a:	|  |  |  |   movea.l 24(sp),a0
    f51e:	|  |  |  |   movea.l 32(a0),a1
    f522:	|  |  |  |   movea.l 24(sp),a0
    f526:	|  |  |  |   movea.l 32(a0),a0
    f52a:	|  |  |  |   move.l (a1),d0
    f52c:	|  |  |  |   move.l d0,4(a0)
        }
        trimStack(&fun->stack);
    f530:	|  |  |  \-> moveq #24,d0
    f532:	|  |  |      add.l 24(sp),d0
    f536:	|  |  |      move.l d0,-(sp)
    f538:	|  |  |      jsr 14f74 <trimStack>
    f53e:	|  |  |      addq.l #4,sp
    while (numParams--) {
    f540:	|  |  \----> move.l 20(sp),d0
    f544:	|  |         move.l d0,d1
    f546:	|  |         subq.l #1,d1
    f548:	|  |         move.l d1,20(sp)
    f54c:	|  |         tst.l d0
    f54e:	|  \-------- bne.s f4e6 <builtIn_newStack+0x84>
    }
    return BR_CONTINUE;
    f550:	|            moveq #2,d0
}
    f552:	\----------> movea.l (sp)+,a6
    f554:	             lea 12(sp),sp
    f558:	             rts

0000f55a <builtIn_stackSize>:
#define builtIn_wait builtIn_newStack

builtIn(stackSize)
{
	UNUSEDALL
	switch (fun -> stack -> thisVar.varType) {
    f55a:	          movea.l 8(sp),a0
    f55e:	          movea.l 24(a0),a0
    f562:	          move.l (a0),d0
    f564:	          moveq #6,d1
    f566:	          cmp.l d0,d1
    f568:	      /-- beq.s f584 <builtIn_stackSize+0x2a>
    f56a:	      |   moveq #10,d1
    f56c:	      |   cmp.l d0,d1
    f56e:	   /--|-- beq.s f5c8 <builtIn_stackSize+0x6e>
			setVariable (&fun -> reg, SVT_INT, fun -> stack -> thisVar.varData.fastArray -> size);
			trimStack (&fun -> stack);
			return BR_CONTINUE;

		default:
			break;
    f570:	   |  |   nop
	}
	KPrintF ("Parameter isn't a stack or a fast array.");
    f572:	   |  |   pea 1967e <PutChar+0x1ba0>
    f578:	   |  |   jsr 1703c <KPrintF>
    f57e:	   |  |   addq.l #4,sp
	return BR_ERROR;
    f580:	   |  |   moveq #1,d0
    f582:	/--|--|-- bra.s f602 <builtIn_stackSize+0xa8>
			setVariable (&fun -> reg, SVT_INT, stackSize (fun -> stack -> thisVar.varData.theStack));
    f584:	|  |  \-> movea.l 8(sp),a0
    f588:	|  |      movea.l 24(a0),a0
    f58c:	|  |      move.l 4(a0),d0
    f590:	|  |      move.l d0,-(sp)
    f592:	|  |      jsr 14f50 <stackSize>
    f598:	|  |      addq.l #4,sp
    f59a:	|  |      move.l d0,d1
    f59c:	|  |      moveq #28,d0
    f59e:	|  |      add.l 8(sp),d0
    f5a2:	|  |      move.l d1,-(sp)
    f5a4:	|  |      pea 1 <_start+0x1>
    f5a8:	|  |      move.l d0,-(sp)
    f5aa:	|  |      jsr 14ee2 <setVariable>
    f5b0:	|  |      lea 12(sp),sp
			trimStack (&fun -> stack);
    f5b4:	|  |      moveq #24,d0
    f5b6:	|  |      add.l 8(sp),d0
    f5ba:	|  |      move.l d0,-(sp)
    f5bc:	|  |      jsr 14f74 <trimStack>
    f5c2:	|  |      addq.l #4,sp
			return BR_CONTINUE;
    f5c4:	|  |      moveq #2,d0
    f5c6:	+--|----- bra.s f602 <builtIn_stackSize+0xa8>
			setVariable (&fun -> reg, SVT_INT, fun -> stack -> thisVar.varData.fastArray -> size);
    f5c8:	|  \----> movea.l 8(sp),a0
    f5cc:	|         movea.l 24(a0),a0
    f5d0:	|         movea.l 4(a0),a0
    f5d4:	|         move.l 4(a0),d1
    f5d8:	|         moveq #28,d0
    f5da:	|         add.l 8(sp),d0
    f5de:	|         move.l d1,-(sp)
    f5e0:	|         pea 1 <_start+0x1>
    f5e4:	|         move.l d0,-(sp)
    f5e6:	|         jsr 14ee2 <setVariable>
    f5ec:	|         lea 12(sp),sp
			trimStack (&fun -> stack);
    f5f0:	|         moveq #24,d0
    f5f2:	|         add.l 8(sp),d0
    f5f6:	|         move.l d0,-(sp)
    f5f8:	|         jsr 14f74 <trimStack>
    f5fe:	|         addq.l #4,sp
			return BR_CONTINUE;
    f600:	|         moveq #2,d0
}
    f602:	\-------> rts

0000f604 <builtIn_copyStack>:

builtIn(copyStack)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    f604:	       movea.l 8(sp),a0
    f608:	       movea.l 24(a0),a0
    f60c:	       move.l (a0),d0
    f60e:	       moveq #6,d1
    f610:	       cmp.l d0,d1
    f612:	   /-- beq.s f626 <builtIn_copyStack+0x22>
		KPrintF ("Parameter isn't a stack.");
    f614:	   |   pea 196a7 <PutChar+0x1bc9>
    f61a:	   |   jsr 1703c <KPrintF>
    f620:	   |   addq.l #4,sp
		return BR_ERROR;
    f622:	   |   moveq #1,d0
    f624:	/--|-- bra.s f65a <builtIn_copyStack+0x56>
	}
	// Return value
	if (! copyStack (&fun -> stack -> thisVar, &fun -> reg)) return BR_ERROR;
    f626:	|  \-> moveq #28,d0
    f628:	|      add.l 8(sp),d0
    f62c:	|      movea.l 8(sp),a0
    f630:	|      move.l 24(a0),d1
    f634:	|      move.l d0,-(sp)
    f636:	|      move.l d1,-(sp)
    f638:	|      jsr 140f6 <copyStack>
    f63e:	|      addq.l #8,sp
    f640:	|      tst.w d0
    f642:	|  /-- bne.s f648 <builtIn_copyStack+0x44>
    f644:	|  |   moveq #1,d0
    f646:	+--|-- bra.s f65a <builtIn_copyStack+0x56>
	trimStack (&fun -> stack);
    f648:	|  \-> moveq #24,d0
    f64a:	|      add.l 8(sp),d0
    f64e:	|      move.l d0,-(sp)
    f650:	|      jsr 14f74 <trimStack>
    f656:	|      addq.l #4,sp
	return BR_CONTINUE;
    f658:	|      moveq #2,d0
}
    f65a:	\----> rts

0000f65c <builtIn_pushToStack>:

builtIn(pushToStack)
{
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    f65c:	       movea.l 8(sp),a0
    f660:	       movea.l 24(a0),a0
    f664:	       movea.l 8(a0),a0
    f668:	       move.l (a0),d0
    f66a:	       moveq #6,d1
    f66c:	       cmp.l d0,d1
    f66e:	   /-- beq.s f684 <builtIn_pushToStack+0x28>
		KPrintF("Parameter isn't a stack");
    f670:	   |   pea 196c0 <PutChar+0x1be2>
    f676:	   |   jsr 1703c <KPrintF>
    f67c:	   |   addq.l #4,sp
		return BR_ERROR;
    f67e:	   |   moveq #1,d0
    f680:	/--|-- bra.w f712 <builtIn_pushToStack+0xb6>
	}

	if (! addVarToStack (&fun -> stack -> thisVar, &fun -> stack -> next -> thisVar.varData.theStack -> first))
    f684:	|  \-> movea.l 8(sp),a0
    f688:	|      movea.l 24(a0),a0
    f68c:	|      movea.l 8(a0),a0
    f690:	|      move.l 4(a0),d0
    f694:	|      move.l d0,d1
    f696:	|      movea.l 8(sp),a0
    f69a:	|      move.l 24(a0),d0
    f69e:	|      move.l d1,-(sp)
    f6a0:	|      move.l d0,-(sp)
    f6a2:	|      jsr 13e2c <addVarToStack>
    f6a8:	|      addq.l #8,sp
    f6aa:	|      tst.w d0
    f6ac:	|  /-- bne.s f6b2 <builtIn_pushToStack+0x56>
		return BR_ERROR;
    f6ae:	|  |   moveq #1,d0
    f6b0:	+--|-- bra.s f712 <builtIn_pushToStack+0xb6>

	if (fun -> stack -> next -> thisVar.varData.theStack -> first -> next == NULL)
    f6b2:	|  \-> movea.l 8(sp),a0
    f6b6:	|      movea.l 24(a0),a0
    f6ba:	|      movea.l 8(a0),a0
    f6be:	|      movea.l 4(a0),a0
    f6c2:	|      movea.l (a0),a0
    f6c4:	|      move.l 8(a0),d0
    f6c8:	|  /-- bne.s f6f0 <builtIn_pushToStack+0x94>
		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> first;
    f6ca:	|  |   movea.l 8(sp),a0
    f6ce:	|  |   movea.l 24(a0),a0
    f6d2:	|  |   movea.l 8(a0),a0
    f6d6:	|  |   movea.l 4(a0),a1
    f6da:	|  |   movea.l 8(sp),a0
    f6de:	|  |   movea.l 24(a0),a0
    f6e2:	|  |   movea.l 8(a0),a0
    f6e6:	|  |   movea.l 4(a0),a0
    f6ea:	|  |   move.l (a1),d0
    f6ec:	|  |   move.l d0,4(a0)

	trimStack (&fun -> stack);
    f6f0:	|  \-> moveq #24,d0
    f6f2:	|      add.l 8(sp),d0
    f6f6:	|      move.l d0,-(sp)
    f6f8:	|      jsr 14f74 <trimStack>
    f6fe:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    f700:	|      moveq #24,d0
    f702:	|      add.l 8(sp),d0
    f706:	|      move.l d0,-(sp)
    f708:	|      jsr 14f74 <trimStack>
    f70e:	|      addq.l #4,sp
	return BR_CONTINUE;
    f710:	|      moveq #2,d0
}
    f712:	\----> rts

0000f714 <builtIn_enqueue>:

builtIn(enqueue)
{
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    f714:	             movea.l 8(sp),a0
    f718:	             movea.l 24(a0),a0
    f71c:	             movea.l 8(a0),a0
    f720:	             move.l (a0),d0
    f722:	             moveq #6,d1
    f724:	             cmp.l d0,d1
    f726:	         /-- beq.s f73c <builtIn_enqueue+0x28>
		KPrintF ("Parameter isn't a stack");
    f728:	         |   pea 196c0 <PutChar+0x1be2>
    f72e:	         |   jsr 1703c <KPrintF>
    f734:	         |   addq.l #4,sp
		return BR_ERROR;
    f736:	         |   moveq #1,d0
    f738:	/--------|-- bra.w f82a <builtIn_enqueue+0x116>
	}

	if (fun -> stack -> next -> thisVar.varData.theStack -> first == NULL)
    f73c:	|        \-> movea.l 8(sp),a0
    f740:	|            movea.l 24(a0),a0
    f744:	|            movea.l 8(a0),a0
    f748:	|            movea.l 4(a0),a0
    f74c:	|            move.l (a0),d0
    f74e:	|     /----- bne.s f7a8 <builtIn_enqueue+0x94>
	{
		if (! addVarToStack (&fun -> stack -> thisVar, &fun -> stack -> next -> thisVar.varData.theStack -> first))
    f750:	|     |      movea.l 8(sp),a0
    f754:	|     |      movea.l 24(a0),a0
    f758:	|     |      movea.l 8(a0),a0
    f75c:	|     |      move.l 4(a0),d0
    f760:	|     |      move.l d0,d1
    f762:	|     |      movea.l 8(sp),a0
    f766:	|     |      move.l 24(a0),d0
    f76a:	|     |      move.l d1,-(sp)
    f76c:	|     |      move.l d0,-(sp)
    f76e:	|     |      jsr 13e2c <addVarToStack>
    f774:	|     |      addq.l #8,sp
    f776:	|     |      tst.w d0
    f778:	|     |  /-- bne.s f780 <builtIn_enqueue+0x6c>
			return BR_ERROR;
    f77a:	|     |  |   moveq #1,d0
    f77c:	+-----|--|-- bra.w f82a <builtIn_enqueue+0x116>

		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> first;
    f780:	|     |  \-> movea.l 8(sp),a0
    f784:	|     |      movea.l 24(a0),a0
    f788:	|     |      movea.l 8(a0),a0
    f78c:	|     |      movea.l 4(a0),a1
    f790:	|     |      movea.l 8(sp),a0
    f794:	|     |      movea.l 24(a0),a0
    f798:	|     |      movea.l 8(a0),a0
    f79c:	|     |      movea.l 4(a0),a0
    f7a0:	|     |      move.l (a1),d0
    f7a2:	|     |      move.l d0,4(a0)
    f7a6:	|  /--|----- bra.s f808 <builtIn_enqueue+0xf4>
	}
	else
	{
		if (! addVarToStack (&fun -> stack -> thisVar,
							 &fun -> stack -> next -> thisVar.varData.theStack -> last -> next))
    f7a8:	|  |  \----> movea.l 8(sp),a0
    f7ac:	|  |         movea.l 24(a0),a0
    f7b0:	|  |         movea.l 8(a0),a0
    f7b4:	|  |         movea.l 4(a0),a0
    f7b8:	|  |         move.l 4(a0),d0
		if (! addVarToStack (&fun -> stack -> thisVar,
    f7bc:	|  |         move.l d0,d1
    f7be:	|  |         addq.l #8,d1
    f7c0:	|  |         movea.l 8(sp),a0
    f7c4:	|  |         move.l 24(a0),d0
    f7c8:	|  |         move.l d1,-(sp)
    f7ca:	|  |         move.l d0,-(sp)
    f7cc:	|  |         jsr 13e2c <addVarToStack>
    f7d2:	|  |         addq.l #8,sp
    f7d4:	|  |         tst.w d0
    f7d6:	|  |     /-- bne.s f7dc <builtIn_enqueue+0xc8>
			return BR_ERROR;
    f7d8:	|  |     |   moveq #1,d0
    f7da:	+--|-----|-- bra.s f82a <builtIn_enqueue+0x116>
		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> last -> next;
    f7dc:	|  |     \-> movea.l 8(sp),a0
    f7e0:	|  |         movea.l 24(a0),a0
    f7e4:	|  |         movea.l 8(a0),a0
    f7e8:	|  |         movea.l 4(a0),a0
    f7ec:	|  |         movea.l 4(a0),a1
    f7f0:	|  |         movea.l 8(sp),a0
    f7f4:	|  |         movea.l 24(a0),a0
    f7f8:	|  |         movea.l 8(a0),a0
    f7fc:	|  |         movea.l 4(a0),a0
    f800:	|  |         move.l 8(a1),d0
    f804:	|  |         move.l d0,4(a0)
	}

	trimStack (&fun -> stack);
    f808:	|  \-------> moveq #24,d0
    f80a:	|            add.l 8(sp),d0
    f80e:	|            move.l d0,-(sp)
    f810:	|            jsr 14f74 <trimStack>
    f816:	|            addq.l #4,sp
	trimStack (&fun -> stack);
    f818:	|            moveq #24,d0
    f81a:	|            add.l 8(sp),d0
    f81e:	|            move.l d0,-(sp)
    f820:	|            jsr 14f74 <trimStack>
    f826:	|            addq.l #4,sp
	return BR_CONTINUE;
    f828:	|            moveq #2,d0
}
    f82a:	\----------> rts

0000f82c <builtIn_deleteFromStack>:

builtIn(deleteFromStack)
{
    f82c:	       move.l a2,-(sp)
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    f82e:	       movea.l 12(sp),a0
    f832:	       movea.l 24(a0),a0
    f836:	       movea.l 8(a0),a0
    f83a:	       move.l (a0),d0
    f83c:	       moveq #6,d1
    f83e:	       cmp.l d0,d1
    f840:	   /-- beq.s f856 <builtIn_deleteFromStack+0x2a>
		KPrintF ("Parameter isn't a stack.");
    f842:	   |   pea 196a7 <PutChar+0x1bc9>
    f848:	   |   jsr 1703c <KPrintF>
    f84e:	   |   addq.l #4,sp
		return BR_ERROR;
    f850:	   |   moveq #1,d0
    f852:	/--|-- bra.w f8ec <builtIn_deleteFromStack+0xc0>
	}

	// Return value
	setVariable (&fun -> reg, SVT_INT,
				 deleteVarFromStack (&fun -> stack -> thisVar,
									 &fun -> stack -> next -> thisVar.varData.theStack -> first, FALSE));
    f856:	|  \-> movea.l 12(sp),a0
    f85a:	|      movea.l 24(a0),a0
    f85e:	|      movea.l 8(a0),a0
    f862:	|      move.l 4(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    f866:	|      move.l d0,d1
				 deleteVarFromStack (&fun -> stack -> thisVar,
    f868:	|      movea.l 12(sp),a0
    f86c:	|      move.l 24(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    f870:	|      clr.l -(sp)
    f872:	|      move.l d1,-(sp)
    f874:	|      move.l d0,-(sp)
    f876:	|      jsr 141cc <deleteVarFromStack>
    f87c:	|      lea 12(sp),sp
    f880:	|      move.l d0,d1
    f882:	|      moveq #28,d0
    f884:	|      add.l 12(sp),d0
    f888:	|      move.l d1,-(sp)
    f88a:	|      pea 1 <_start+0x1>
    f88e:	|      move.l d0,-(sp)
    f890:	|      jsr 14ee2 <setVariable>
    f896:	|      lea 12(sp),sp

	// Horrible hacking because 'last' value might now be wrong!
	fun->stack->next->thisVar.varData.theStack->last = stackFindLast (fun->stack->next->thisVar.varData.theStack->first);
    f89a:	|      movea.l 12(sp),a0
    f89e:	|      movea.l 24(a0),a0
    f8a2:	|      movea.l 8(a0),a0
    f8a6:	|      movea.l 4(a0),a0
    f8aa:	|      move.l (a0),d0
    f8ac:	|      movea.l 12(sp),a0
    f8b0:	|      movea.l 24(a0),a0
    f8b4:	|      movea.l 8(a0),a0
    f8b8:	|      movea.l 4(a0),a2
    f8bc:	|      move.l d0,-(sp)
    f8be:	|      jsr 14f2c <stackFindLast>
    f8c4:	|      addq.l #4,sp
    f8c6:	|      move.l d0,4(a2)

	trimStack (&fun -> stack);
    f8ca:	|      moveq #24,d0
    f8cc:	|      add.l 12(sp),d0
    f8d0:	|      move.l d0,-(sp)
    f8d2:	|      jsr 14f74 <trimStack>
    f8d8:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    f8da:	|      moveq #24,d0
    f8dc:	|      add.l 12(sp),d0
    f8e0:	|      move.l d0,-(sp)
    f8e2:	|      jsr 14f74 <trimStack>
    f8e8:	|      addq.l #4,sp
	return BR_CONTINUE;
    f8ea:	|      moveq #2,d0
}
    f8ec:	\----> movea.l (sp)+,a2
    f8ee:	       rts

0000f8f0 <builtIn_deleteAllFromStack>:

builtIn(deleteAllFromStack)
{
    f8f0:	       move.l a2,-(sp)
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    f8f2:	       movea.l 12(sp),a0
    f8f6:	       movea.l 24(a0),a0
    f8fa:	       movea.l 8(a0),a0
    f8fe:	       move.l (a0),d0
    f900:	       moveq #6,d1
    f902:	       cmp.l d0,d1
    f904:	   /-- beq.s f91a <builtIn_deleteAllFromStack+0x2a>
		KPrintF ("Parameter isn't a stack.");
    f906:	   |   pea 196a7 <PutChar+0x1bc9>
    f90c:	   |   jsr 1703c <KPrintF>
    f912:	   |   addq.l #4,sp
		return BR_ERROR;
    f914:	   |   moveq #1,d0
    f916:	/--|-- bra.w f9b2 <builtIn_deleteAllFromStack+0xc2>
	}

	// Return value
	setVariable (&fun -> reg, SVT_INT,
				 deleteVarFromStack (&fun -> stack -> thisVar,
									 &fun -> stack -> next -> thisVar.varData.theStack -> first, TRUE));
    f91a:	|  \-> movea.l 12(sp),a0
    f91e:	|      movea.l 24(a0),a0
    f922:	|      movea.l 8(a0),a0
    f926:	|      move.l 4(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    f92a:	|      move.l d0,d1
				 deleteVarFromStack (&fun -> stack -> thisVar,
    f92c:	|      movea.l 12(sp),a0
    f930:	|      move.l 24(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    f934:	|      pea 1 <_start+0x1>
    f938:	|      move.l d1,-(sp)
    f93a:	|      move.l d0,-(sp)
    f93c:	|      jsr 141cc <deleteVarFromStack>
    f942:	|      lea 12(sp),sp
    f946:	|      move.l d0,d1
    f948:	|      moveq #28,d0
    f94a:	|      add.l 12(sp),d0
    f94e:	|      move.l d1,-(sp)
    f950:	|      pea 1 <_start+0x1>
    f954:	|      move.l d0,-(sp)
    f956:	|      jsr 14ee2 <setVariable>
    f95c:	|      lea 12(sp),sp

	// Horrible hacking because 'last' value might now be wrong!
	fun->stack->next->thisVar.varData.theStack->last = stackFindLast (fun->stack->next->thisVar.varData.theStack->first);
    f960:	|      movea.l 12(sp),a0
    f964:	|      movea.l 24(a0),a0
    f968:	|      movea.l 8(a0),a0
    f96c:	|      movea.l 4(a0),a0
    f970:	|      move.l (a0),d0
    f972:	|      movea.l 12(sp),a0
    f976:	|      movea.l 24(a0),a0
    f97a:	|      movea.l 8(a0),a0
    f97e:	|      movea.l 4(a0),a2
    f982:	|      move.l d0,-(sp)
    f984:	|      jsr 14f2c <stackFindLast>
    f98a:	|      addq.l #4,sp
    f98c:	|      move.l d0,4(a2)

	trimStack (&fun -> stack);
    f990:	|      moveq #24,d0
    f992:	|      add.l 12(sp),d0
    f996:	|      move.l d0,-(sp)
    f998:	|      jsr 14f74 <trimStack>
    f99e:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    f9a0:	|      moveq #24,d0
    f9a2:	|      add.l 12(sp),d0
    f9a6:	|      move.l d0,-(sp)
    f9a8:	|      jsr 14f74 <trimStack>
    f9ae:	|      addq.l #4,sp
	return BR_CONTINUE;
    f9b0:	|      moveq #2,d0
}
    f9b2:	\----> movea.l (sp)+,a2
    f9b4:	       rts

0000f9b6 <builtIn_popFromStack>:

builtIn(popFromStack)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    f9b6:	       movea.l 8(sp),a0
    f9ba:	       movea.l 24(a0),a0
    f9be:	       move.l (a0),d0
    f9c0:	       moveq #6,d1
    f9c2:	       cmp.l d0,d1
    f9c4:	   /-- beq.s f9d8 <builtIn_popFromStack+0x22>
		KPrintF ("Parameter isn't a stack.");
    f9c6:	   |   pea 196a7 <PutChar+0x1bc9>
    f9cc:	   |   jsr 1703c <KPrintF>
    f9d2:	   |   addq.l #4,sp
		return BR_ERROR;
    f9d4:	   |   moveq #1,d0
    f9d6:	/--|-- bra.s fa42 <builtIn_popFromStack+0x8c>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    f9d8:	|  \-> movea.l 8(sp),a0
    f9dc:	|      movea.l 24(a0),a0
    f9e0:	|      movea.l 4(a0),a0
    f9e4:	|      move.l (a0),d0
    f9e6:	|  /-- bne.s f9fa <builtIn_popFromStack+0x44>
		KPrintF ("The stack's empty.");
    f9e8:	|  |   pea 196d8 <PutChar+0x1bfa>
    f9ee:	|  |   jsr 1703c <KPrintF>
    f9f4:	|  |   addq.l #4,sp
		return BR_ERROR;
    f9f6:	|  |   moveq #1,d0
    f9f8:	+--|-- bra.s fa42 <builtIn_popFromStack+0x8c>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> first -> thisVar), &fun -> reg);
    f9fa:	|  \-> moveq #28,d0
    f9fc:	|      add.l 8(sp),d0
    fa00:	|      movea.l 8(sp),a0
    fa04:	|      movea.l 24(a0),a0
    fa08:	|      movea.l 4(a0),a0
    fa0c:	|      move.l (a0),d1
    fa0e:	|      move.l d0,-(sp)
    fa10:	|      move.l d1,-(sp)
    fa12:	|      jsr 14aaa <copyVariable>
    fa18:	|      addq.l #8,sp
	trimStack (&fun -> stack -> thisVar.varData.theStack -> first);
    fa1a:	|      movea.l 8(sp),a0
    fa1e:	|      movea.l 24(a0),a0
    fa22:	|      move.l 4(a0),d0
    fa26:	|      move.l d0,-(sp)
    fa28:	|      jsr 14f74 <trimStack>
    fa2e:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    fa30:	|      moveq #24,d0
    fa32:	|      add.l 8(sp),d0
    fa36:	|      move.l d0,-(sp)
    fa38:	|      jsr 14f74 <trimStack>
    fa3e:	|      addq.l #4,sp
	return BR_CONTINUE;
    fa40:	|      moveq #2,d0
}
    fa42:	\----> rts

0000fa44 <builtIn_peekStart>:

builtIn(peekStart)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    fa44:	       movea.l 8(sp),a0
    fa48:	       movea.l 24(a0),a0
    fa4c:	       move.l (a0),d0
    fa4e:	       moveq #6,d1
    fa50:	       cmp.l d0,d1
    fa52:	   /-- beq.s fa66 <builtIn_peekStart+0x22>
		KPrintF ("Parameter isn't a stack.");
    fa54:	   |   pea 196a7 <PutChar+0x1bc9>
    fa5a:	   |   jsr 1703c <KPrintF>
    fa60:	   |   addq.l #4,sp
		return BR_ERROR;
    fa62:	   |   moveq #1,d0
    fa64:	/--|-- bra.s faba <builtIn_peekStart+0x76>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    fa66:	|  \-> movea.l 8(sp),a0
    fa6a:	|      movea.l 24(a0),a0
    fa6e:	|      movea.l 4(a0),a0
    fa72:	|      move.l (a0),d0
    fa74:	|  /-- bne.s fa88 <builtIn_peekStart+0x44>
		KPrintF ("The stack's empty.");
    fa76:	|  |   pea 196d8 <PutChar+0x1bfa>
    fa7c:	|  |   jsr 1703c <KPrintF>
    fa82:	|  |   addq.l #4,sp
		return BR_ERROR;
    fa84:	|  |   moveq #1,d0
    fa86:	+--|-- bra.s faba <builtIn_peekStart+0x76>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> first -> thisVar), &fun -> reg);
    fa88:	|  \-> moveq #28,d0
    fa8a:	|      add.l 8(sp),d0
    fa8e:	|      movea.l 8(sp),a0
    fa92:	|      movea.l 24(a0),a0
    fa96:	|      movea.l 4(a0),a0
    fa9a:	|      move.l (a0),d1
    fa9c:	|      move.l d0,-(sp)
    fa9e:	|      move.l d1,-(sp)
    faa0:	|      jsr 14aaa <copyVariable>
    faa6:	|      addq.l #8,sp
	trimStack (&fun -> stack);
    faa8:	|      moveq #24,d0
    faaa:	|      add.l 8(sp),d0
    faae:	|      move.l d0,-(sp)
    fab0:	|      jsr 14f74 <trimStack>
    fab6:	|      addq.l #4,sp
	return BR_CONTINUE;
    fab8:	|      moveq #2,d0
}
    faba:	\----> rts

0000fabc <builtIn_peekEnd>:

builtIn(peekEnd)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    fabc:	       movea.l 8(sp),a0
    fac0:	       movea.l 24(a0),a0
    fac4:	       move.l (a0),d0
    fac6:	       moveq #6,d1
    fac8:	       cmp.l d0,d1
    faca:	   /-- beq.s fade <builtIn_peekEnd+0x22>
		KPrintF ("Parameter isn't a stack.");
    facc:	   |   pea 196a7 <PutChar+0x1bc9>
    fad2:	   |   jsr 1703c <KPrintF>
    fad8:	   |   addq.l #4,sp
		return BR_ERROR;
    fada:	   |   moveq #1,d0
    fadc:	/--|-- bra.s fb34 <builtIn_peekEnd+0x78>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    fade:	|  \-> movea.l 8(sp),a0
    fae2:	|      movea.l 24(a0),a0
    fae6:	|      movea.l 4(a0),a0
    faea:	|      move.l (a0),d0
    faec:	|  /-- bne.s fb00 <builtIn_peekEnd+0x44>
		KPrintF ("The stack's empty.");
    faee:	|  |   pea 196d8 <PutChar+0x1bfa>
    faf4:	|  |   jsr 1703c <KPrintF>
    fafa:	|  |   addq.l #4,sp
		return BR_ERROR;
    fafc:	|  |   moveq #1,d0
    fafe:	+--|-- bra.s fb34 <builtIn_peekEnd+0x78>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> last -> thisVar), &fun -> reg);
    fb00:	|  \-> moveq #28,d0
    fb02:	|      add.l 8(sp),d0
    fb06:	|      movea.l 8(sp),a0
    fb0a:	|      movea.l 24(a0),a0
    fb0e:	|      movea.l 4(a0),a0
    fb12:	|      move.l 4(a0),d1
    fb16:	|      move.l d0,-(sp)
    fb18:	|      move.l d1,-(sp)
    fb1a:	|      jsr 14aaa <copyVariable>
    fb20:	|      addq.l #8,sp
	trimStack (&fun -> stack);
    fb22:	|      moveq #24,d0
    fb24:	|      add.l 8(sp),d0
    fb28:	|      move.l d0,-(sp)
    fb2a:	|      jsr 14f74 <trimStack>
    fb30:	|      addq.l #4,sp
	return BR_CONTINUE;
    fb32:	|      moveq #2,d0
}
    fb34:	\----> rts

0000fb36 <builtIn_random>:

builtIn(random)
{
    fb36:	       subq.l #4,sp
	UNUSEDALL
	int num;

	if (! getValueType(&num, SVT_INT,&fun -> stack -> thisVar))
    fb38:	       movea.l 12(sp),a0
    fb3c:	       move.l 24(a0),d0
    fb40:	       move.l d0,-(sp)
    fb42:	       pea 1 <_start+0x1>
    fb46:	       move.l sp,d0
    fb48:	       addq.l #8,d0
    fb4a:	       move.l d0,-(sp)
    fb4c:	       jsr 145f0 <getValueType>
    fb52:	       lea 12(sp),sp
    fb56:	       tst.w d0
    fb58:	   /-- bne.s fb5e <builtIn_random+0x28>
		return BR_ERROR;
    fb5a:	   |   moveq #1,d0
    fb5c:	/--|-- bra.s fba8 <builtIn_random+0x72>

	trimStack (&fun -> stack);
    fb5e:	|  \-> moveq #24,d0
    fb60:	|      add.l 12(sp),d0
    fb64:	|      move.l d0,-(sp)
    fb66:	|      jsr 14f74 <trimStack>
    fb6c:	|      addq.l #4,sp
	if (num <= 0) num = 1;
    fb6e:	|      move.l (sp),d0
    fb70:	|  /-- bgt.s fb76 <builtIn_random+0x40>
    fb72:	|  |   moveq #1,d0
    fb74:	|  |   move.l d0,(sp)
	setVariable (&fun -> reg, SVT_INT, rand() % num);
    fb76:	|  \-> jsr 15c18 <rand>
    fb7c:	|      move.l d0,d1
    fb7e:	|      move.l (sp),d0
    fb80:	|      move.l d0,-(sp)
    fb82:	|      move.l d1,-(sp)
    fb84:	|      jsr 17aa2 <__umodsi3>
    fb8a:	|      addq.l #8,sp
    fb8c:	|      move.l d0,d1
    fb8e:	|      moveq #28,d0
    fb90:	|      add.l 12(sp),d0
    fb94:	|      move.l d1,-(sp)
    fb96:	|      pea 1 <_start+0x1>
    fb9a:	|      move.l d0,-(sp)
    fb9c:	|      jsr 14ee2 <setVariable>
    fba2:	|      lea 12(sp),sp
	return BR_CONTINUE;
    fba6:	|      moveq #2,d0
}
    fba8:	\----> addq.l #4,sp
    fbaa:	       rts

0000fbac <builtIn_setStatusColour>:
	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	statusBarColour ((byte) red, (byte) green, (byte) blue);
	return BR_CONTINUE; ToDo amigize this?*/
}
    fbac:	nop
    fbae:	rts

0000fbb0 <builtIn_setLitStatusColour>:

	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	statusBarLitColour ((byte) red, (byte) green, (byte) blue);Todo - Amigize this?*/
	return BR_CONTINUE;
    fbb0:	moveq #2,d0
}
    fbb2:	rts

0000fbb4 <builtIn_setPasteColour>:

builtIn (setPasteColour)
{
    fbb4:	       subq.l #4,sp
	UNUSEDALL
	int index;

	if (! getValueType ( &index, SVT_INT, &fun -> stack -> thisVar)) {
    fbb6:	       movea.l 12(sp),a0
    fbba:	       move.l 24(a0),d0
    fbbe:	       move.l d0,-(sp)
    fbc0:	       pea 1 <_start+0x1>
    fbc4:	       move.l sp,d0
    fbc6:	       addq.l #8,d0
    fbc8:	       move.l d0,-(sp)
    fbca:	       jsr 145f0 <getValueType>
    fbd0:	       lea 12(sp),sp
    fbd4:	       tst.w d0
    fbd6:	   /-- bne.s fbea <builtIn_setPasteColour+0x36>
		KPrintF ("setPasteColour: Parameter not a number");
    fbd8:	   |   pea 196eb <PutChar+0x1c0d>
    fbde:	   |   jsr 1703c <KPrintF>
    fbe4:	   |   addq.l #4,sp
		return BR_ERROR;
    fbe6:	   |   moveq #1,d0
    fbe8:	/--|-- bra.s fc2a <builtIn_setPasteColour+0x76>
	}
	trimStack (&fun -> stack);
    fbea:	|  \-> moveq #24,d0
    fbec:	|      add.l 12(sp),d0
    fbf0:	|      move.l d0,-(sp)
    fbf2:	|      jsr 14f74 <trimStack>
    fbf8:	|      addq.l #4,sp


	textPaletteIndex = (UWORD)index;
    fbfa:	|      move.l (sp),d0
    fbfc:	|      move.l d0,d0
    fbfe:	|      move.w d0,1a6be <textPaletteIndex>

	if( textPaletteIndex > 31) {
    fc04:	|      move.w 1a6be <textPaletteIndex>,d0
    fc0a:	|      cmpi.w #31,d0
    fc0e:	|  /-- bls.s fc28 <builtIn_setPasteColour+0x74>
		KPrintF ("setPasteColour: Paletteindex out of Range");
    fc10:	|  |   pea 19712 <PutChar+0x1c34>
    fc16:	|  |   jsr 1703c <KPrintF>
    fc1c:	|  |   addq.l #4,sp
		textPaletteIndex = 0;
    fc1e:	|  |   clr.w 1a6be <textPaletteIndex>
		return BR_ERROR;
    fc24:	|  |   moveq #1,d0
    fc26:	+--|-- bra.s fc2a <builtIn_setPasteColour+0x76>
	}

	//setFontColour (pastePalette, (byte) red, (byte) green, (byte) blue);
	return BR_CONTINUE;
    fc28:	|  \-> moveq #2,d0
}
    fc2a:	\----> addq.l #4,sp
    fc2c:	       rts

0000fc2e <builtIn_setBlankColour>:
	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	currentBlankColour = makeColour (red & 255, green & 255, blue & 255);
	setVariable (&fun -> reg, SVT_INT, 1);Todo Amigize this?*/
	return BR_CONTINUE;
    fc2e:	moveq #2,d0
}
    fc30:	rts

0000fc32 <builtIn_setBurnColour>:

	currentBurnR = red;
	currentBurnG = green;
	currentBurnB = blue;
	setVariable (&fun -> reg, SVT_INT, 1);Todo Amigize this?*/
	return BR_CONTINUE;
    fc32:	moveq #2,d0
}
    fc34:	rts

0000fc36 <builtIn_setFont>:


builtIn(setFont)
{
    fc36:	       lea -16(sp),sp
    fc3a:	       move.l a6,-(sp)
    UNUSEDALL
    int fileNumber, newHeight;
    if (!getValueType(&newHeight, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    fc3c:	       movea.l 28(sp),a0
    fc40:	       move.l 24(a0),d0
    fc44:	       move.l d0,-(sp)
    fc46:	       pea 1 <_start+0x1>
    fc4a:	       lea 12(sp),a0
    fc4e:	       move.l a0,-(sp)
    fc50:	       jsr 145f0 <getValueType>
    fc56:	       lea 12(sp),sp
    fc5a:	       tst.w d0
    fc5c:	   /-- bne.s fc64 <builtIn_setFont+0x2e>
    fc5e:	   |   moveq #1,d0
    fc60:	/--|-- bra.w fd12 <builtIn_setFont+0xdc>
    //              KPrintF("  Height: %d\n", newHeight);
    trimStack(&fun->stack);
    fc64:	|  \-> moveq #24,d0
    fc66:	|      add.l 28(sp),d0
    fc6a:	|      move.l d0,-(sp)
    fc6c:	|      jsr 14f74 <trimStack>
    fc72:	|      addq.l #4,sp
    char *newText = getTextFromAnyVar(&(fun->stack->thisVar));
    fc74:	|      movea.l 28(sp),a0
    fc78:	|      move.l 24(a0),d0
    fc7c:	|      move.l d0,-(sp)
    fc7e:	|      jsr 14bc6 <getTextFromAnyVar>
    fc84:	|      addq.l #4,sp
    fc86:	|      move.l d0,16(sp)
    if (!newText) return BR_ERROR;
    fc8a:	|  /-- bne.s fc92 <builtIn_setFont+0x5c>
    fc8c:	|  |   moveq #1,d0
    fc8e:	+--|-- bra.w fd12 <builtIn_setFont+0xdc>
    //              KPrintF("  Character supported: %s\n", newText);
    trimStack(&fun->stack);
    fc92:	|  \-> moveq #24,d0
    fc94:	|      add.l 28(sp),d0
    fc98:	|      move.l d0,-(sp)
    fc9a:	|      jsr 14f74 <trimStack>
    fca0:	|      addq.l #4,sp
    if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) return BR_ERROR;
    fca2:	|      movea.l 28(sp),a0
    fca6:	|      move.l 24(a0),d0
    fcaa:	|      move.l d0,-(sp)
    fcac:	|      pea 5 <_start+0x5>
    fcb0:	|      lea 16(sp),a0
    fcb4:	|      move.l a0,-(sp)
    fcb6:	|      jsr 145f0 <getValueType>
    fcbc:	|      lea 12(sp),sp
    fcc0:	|      tst.w d0
    fcc2:	|  /-- bne.s fcc8 <builtIn_setFont+0x92>
    fcc4:	|  |   moveq #1,d0
    fcc6:	+--|-- bra.s fd12 <builtIn_setFont+0xdc>
    //              KPrintF("  File: %d\n", fileNumber);
    trimStack(&fun->stack);
    fcc8:	|  \-> moveq #24,d0
    fcca:	|      add.l 28(sp),d0
    fcce:	|      move.l d0,-(sp)
    fcd0:	|      jsr 14f74 <trimStack>
    fcd6:	|      addq.l #4,sp
    if (!loadFont(fileNumber, newText, newHeight)) return BR_ERROR;
    fcd8:	|      move.l 4(sp),d1
    fcdc:	|      move.l 8(sp),d0
    fce0:	|      move.l d1,-(sp)
    fce2:	|      move.l 20(sp),-(sp)
    fce6:	|      move.l d0,-(sp)
    fce8:	|      jsr 15428 <loadFont>
    fcee:	|      lea 12(sp),sp
    fcf2:	|      tst.w d0
    fcf4:	|  /-- bne.s fcfa <builtIn_setFont+0xc4>
    fcf6:	|  |   moveq #1,d0
    fcf8:	+--|-- bra.s fd12 <builtIn_setFont+0xdc>
    //              KPrintF("  Done!\n");
    FreeVec(newText);
    fcfa:	|  \-> move.l 16(sp),12(sp)
    fd00:	|      move.l 1a7a4 <SysBase>,d0
    fd06:	|      movea.l d0,a6
    fd08:	|      movea.l 12(sp),a1
    fd0c:	|      jsr -690(a6)

    return BR_CONTINUE;
    fd10:	|      moveq #2,d0
}
    fd12:	\----> movea.l (sp)+,a6
    fd14:	       lea 16(sp),sp
    fd18:	       rts

0000fd1a <builtIn_inFont>:

builtIn(inFont)
{
    fd1a:	       subq.l #4,sp
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    fd1c:	       movea.l 12(sp),a0
    fd20:	       move.l 24(a0),d0
    fd24:	       move.l d0,-(sp)
    fd26:	       jsr 14bc6 <getTextFromAnyVar>
    fd2c:	       addq.l #4,sp
    fd2e:	       move.l d0,(sp)
	if (! newText) return BR_ERROR;
    fd30:	   /-- bne.s fd36 <builtIn_inFont+0x1c>
    fd32:	   |   moveq #1,d0
    fd34:	/--|-- bra.s fd6c <builtIn_inFont+0x52>
	trimStack (&fun -> stack);
    fd36:	|  \-> moveq #24,d0
    fd38:	|      add.l 12(sp),d0
    fd3c:	|      move.l d0,-(sp)
    fd3e:	|      jsr 14f74 <trimStack>
    fd44:	|      addq.l #4,sp

	// Return value
	
	setVariable (&fun -> reg, SVT_INT, isInFont(newText));
    fd46:	|      move.l (sp),-(sp)
    fd48:	|      jsr 15416 <isInFont>
    fd4e:	|      addq.l #4,sp
    fd50:	|      movea.w d0,a0
    fd52:	|      moveq #28,d0
    fd54:	|      add.l 12(sp),d0
    fd58:	|      move.l a0,-(sp)
    fd5a:	|      pea 1 <_start+0x1>
    fd5e:	|      move.l d0,-(sp)
    fd60:	|      jsr 14ee2 <setVariable>
    fd66:	|      lea 12(sp),sp
	return BR_CONTINUE;
    fd6a:	|      moveq #2,d0
}
    fd6c:	\----> addq.l #4,sp
    fd6e:	       rts

0000fd70 <builtIn_pasteString>:

builtIn(pasteString)
{
    fd70:	       lea -16(sp),sp
    fd74:	       move.l a6,-(sp)
    fd76:	       move.l d2,-(sp)
    UNUSEDALL
    char *newText = getTextFromAnyVar(&(fun->stack->thisVar));
    fd78:	       movea.l 32(sp),a0
    fd7c:	       move.l 24(a0),d0
    fd80:	       move.l d0,-(sp)
    fd82:	       jsr 14bc6 <getTextFromAnyVar>
    fd88:	       addq.l #4,sp
    fd8a:	       move.l d0,20(sp)
    trimStack(&fun->stack);
    fd8e:	       moveq #24,d0
    fd90:	       add.l 32(sp),d0
    fd94:	       move.l d0,-(sp)
    fd96:	       jsr 14f74 <trimStack>
    fd9c:	       addq.l #4,sp
    int y, x;
    if (!getValueType(&y, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    fd9e:	       movea.l 32(sp),a0
    fda2:	       move.l 24(a0),d0
    fda6:	       move.l d0,-(sp)
    fda8:	       pea 1 <_start+0x1>
    fdac:	       lea 20(sp),a0
    fdb0:	       move.l a0,-(sp)
    fdb2:	       jsr 145f0 <getValueType>
    fdb8:	       lea 12(sp),sp
    fdbc:	       tst.w d0
    fdbe:	   /-- bne.s fdc6 <builtIn_pasteString+0x56>
    fdc0:	   |   moveq #1,d0
    fdc2:	/--|-- bra.w fe68 <builtIn_pasteString+0xf8>
    trimStack(&fun->stack);
    fdc6:	|  \-> moveq #24,d0
    fdc8:	|      add.l 32(sp),d0
    fdcc:	|      move.l d0,-(sp)
    fdce:	|      jsr 14f74 <trimStack>
    fdd4:	|      addq.l #4,sp
    if (!getValueType(&x, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    fdd6:	|      movea.l 32(sp),a0
    fdda:	|      move.l 24(a0),d0
    fdde:	|      move.l d0,-(sp)
    fde0:	|      pea 1 <_start+0x1>
    fde4:	|      lea 16(sp),a0
    fde8:	|      move.l a0,-(sp)
    fdea:	|      jsr 145f0 <getValueType>
    fdf0:	|      lea 12(sp),sp
    fdf4:	|      tst.w d0
    fdf6:	|  /-- bne.s fdfc <builtIn_pasteString+0x8c>
    fdf8:	|  |   moveq #1,d0
    fdfa:	+--|-- bra.s fe68 <builtIn_pasteString+0xf8>
    trimStack(&fun->stack);
    fdfc:	|  \-> moveq #24,d0
    fdfe:	|      add.l 32(sp),d0
    fe02:	|      move.l d0,-(sp)
    fe04:	|      jsr 14f74 <trimStack>
    fe0a:	|      addq.l #4,sp
    if (x == IN_THE_CENTRE) x = (winWidth - stringWidth(newText)) >> 1;
    fe0c:	|      move.l 8(sp),d0
    fe10:	|      cmpi.l #65535,d0
    fe16:	|  /-- bne.s fe36 <builtIn_pasteString+0xc6>
    fe18:	|  |   move.l 1a6f8 <winWidth>,d2
    fe1e:	|  |   move.l 20(sp),-(sp)
    fe22:	|  |   jsr 156da <stringWidth>
    fe28:	|  |   addq.l #4,sp
    fe2a:	|  |   move.l d2,d1
    fe2c:	|  |   sub.l d0,d1
    fe2e:	|  |   move.l d1,d0
    fe30:	|  |   lsr.l #1,d0
    fe32:	|  |   move.l d0,8(sp)
    //fixFont(pastePalette); //Todo: Amigize this
    pasteStringToBackdrop(newText, x, y); 
    fe36:	|  \-> move.l 12(sp),d1
    fe3a:	|      move.l 8(sp),d0
    fe3e:	|      move.l d1,-(sp)
    fe40:	|      move.l d0,-(sp)
    fe42:	|      move.l 28(sp),-(sp)
    fe46:	|      jsr 155fc <pasteStringToBackdrop>
    fe4c:	|      lea 12(sp),sp
    FreeVec(newText); 
    fe50:	|      move.l 20(sp),16(sp)
    fe56:	|      move.l 1a7a4 <SysBase>,d0
    fe5c:	|      movea.l d0,a6
    fe5e:	|      movea.l 16(sp),a1
    fe62:	|      jsr -690(a6)
    return BR_CONTINUE;
    fe66:	|      moveq #2,d0
}
    fe68:	\----> move.l (sp)+,d2
    fe6a:	       movea.l (sp)+,a6
    fe6c:	       lea 16(sp),sp
    fe70:	       rts

0000fe72 <builtIn_anim>:

builtIn(anim)
{
    fe72:	       lea -12(sp),sp
	UNUSEDALL
	if (numParams < 2) {
    fe76:	       moveq #1,d0
    fe78:	       cmp.l 16(sp),d0
    fe7c:	   /-- blt.s fe92 <builtIn_anim+0x20>
		KPrintF("Built-in function anim() must have at least 2 parameters.");
    fe7e:	   |   pea 1973c <PutChar+0x1c5e>
    fe84:	   |   jsr 1703c <KPrintF>
    fe8a:	   |   addq.l #4,sp
		return BR_ERROR;
    fe8c:	   |   moveq #1,d0
    fe8e:	/--|-- bra.w ff20 <builtIn_anim+0xae>
	}


	// First store the frame numbers and take 'em off the stack
	struct personaAnimation * ba = createPersonaAnim (numParams - 1, &fun -> stack);
    fe92:	|  \-> moveq #24,d1
    fe94:	|      add.l 20(sp),d1
    fe98:	|      move.l 16(sp),d0
    fe9c:	|      subq.l #1,d0
    fe9e:	|      move.l d1,-(sp)
    fea0:	|      move.l d0,-(sp)
    fea2:	|      jsr 9510 <createPersonaAnim>
    fea8:	|      addq.l #8,sp
    feaa:	|      move.l d0,8(sp)

	// Only remaining paramter is the file number
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    feae:	|      movea.l 20(sp),a0
    feb2:	|      move.l 24(a0),d0
    feb6:	|      move.l d0,-(sp)
    feb8:	|      pea 5 <_start+0x5>
    febc:	|      lea 8(sp),a0
    fec0:	|      move.l a0,-(sp)
    fec2:	|      jsr 145f0 <getValueType>
    fec8:	|      lea 12(sp),sp
    fecc:	|      tst.w d0
    fece:	|  /-- bne.s fed4 <builtIn_anim+0x62>
    fed0:	|  |   moveq #1,d0
    fed2:	+--|-- bra.s ff20 <builtIn_anim+0xae>
	trimStack (&fun -> stack);
    fed4:	|  \-> moveq #24,d0
    fed6:	|      add.l 20(sp),d0
    feda:	|      move.l d0,-(sp)
    fedc:	|      jsr 14f74 <trimStack>
    fee2:	|      addq.l #4,sp

	// Load the required sprite bank
	struct loadedSpriteBank * sprBanky = loadBankForAnim (fileNumber);
    fee4:	|      move.l (sp),d0
    fee6:	|      move.l d0,-(sp)
    fee8:	|      jsr 15d7a <loadBankForAnim>
    feee:	|      addq.l #4,sp
    fef0:	|      move.l d0,4(sp)
	if (! sprBanky) return BR_ERROR;	// File not found, fatal done already
    fef4:	|  /-- bne.s fefa <builtIn_anim+0x88>
    fef6:	|  |   moveq #1,d0
    fef8:	+--|-- bra.s ff20 <builtIn_anim+0xae>
	setBankFile (ba, sprBanky);
    fefa:	|  \-> move.l 4(sp),-(sp)
    fefe:	|      move.l 12(sp),-(sp)
    ff02:	|      jsr b3ba <setBankFile>
    ff08:	|      addq.l #8,sp

	// Return value
	newAnimationVariable (&fun -> reg, ba);
    ff0a:	|      moveq #28,d0
    ff0c:	|      add.l 20(sp),d0
    ff10:	|      move.l 8(sp),-(sp)
    ff14:	|      move.l d0,-(sp)
    ff16:	|      jsr 14e9e <newAnimationVariable>
    ff1c:	|      addq.l #8,sp
	return BR_CONTINUE;
    ff1e:	|      moveq #2,d0
}
    ff20:	\----> lea 12(sp),sp
    ff24:	       rts

0000ff26 <builtIn_costume>:

builtIn(costume)
{
    ff26:	          lea -32(sp),sp
    ff2a:	          move.l a6,-(sp)
    ff2c:	          move.l a2,-(sp)
    UNUSEDALL
    struct persona * newPersona = AllocVec(sizeof(struct persona), MEMF_ANY);
    ff2e:	          moveq #8,d0
    ff30:	          move.l d0,32(sp)
    ff34:	          clr.l 28(sp)
    ff38:	          move.l 1a7a4 <SysBase>,d0
    ff3e:	          movea.l d0,a6
    ff40:	          move.l 32(sp),d0
    ff44:	          move.l 28(sp),d1
    ff48:	          jsr -684(a6)
    ff4c:	          move.l d0,24(sp)
    ff50:	          move.l 24(sp),d0
    ff54:	          move.l d0,20(sp)
    if (!newPersona) return BR_ERROR;
    ff58:	      /-- bne.s ff60 <builtIn_costume+0x3a>
    ff5a:	      |   moveq #1,d0
    ff5c:	/-----|-- bra.w 10048 <builtIn_costume+0x122>
    newPersona->numDirections = numParams / 3;
    ff60:	|     \-> move.l 44(sp),d0
    ff64:	|         pea 3 <_start+0x3>
    ff68:	|         move.l d0,-(sp)
    ff6a:	|         jsr 17a46 <__divsi3>
    ff70:	|         addq.l #8,sp
    ff72:	|         movea.l 20(sp),a0
    ff76:	|         move.l d0,4(a0)
    if (numParams == 0 || newPersona->numDirections * 3 != numParams) {
    ff7a:	|         tst.l 44(sp)
    ff7e:	|     /-- beq.s ff94 <builtIn_costume+0x6e>
    ff80:	|     |   movea.l 20(sp),a0
    ff84:	|     |   move.l 4(a0),d1
    ff88:	|     |   move.l d1,d0
    ff8a:	|     |   add.l d0,d0
    ff8c:	|     |   add.l d1,d0
    ff8e:	|     |   cmp.l 44(sp),d0
    ff92:	|  /--|-- beq.s ffa8 <builtIn_costume+0x82>
        KPrintF("Illegal number of parameters (should be greater than 0 and divisible by 3)");
    ff94:	|  |  \-> pea 19776 <PutChar+0x1c98>
    ff9a:	|  |      jsr 1703c <KPrintF>
    ffa0:	|  |      addq.l #4,sp
        return BR_ERROR;
    ffa2:	|  |      moveq #1,d0
    ffa4:	+--|----- bra.w 10048 <builtIn_costume+0x122>
    }
    int iii;
    newPersona->animation = AllocVec(sizeof(struct personaAnimation *) * numParams, MEMF_ANY);
    ffa8:	|  \----> move.l 44(sp),d0
    ffac:	|         add.l d0,d0
    ffae:	|         add.l d0,d0
    ffb0:	|         move.l d0,16(sp)
    ffb4:	|         clr.l 12(sp)
    ffb8:	|         move.l 1a7a4 <SysBase>,d0
    ffbe:	|         movea.l d0,a6
    ffc0:	|         move.l 16(sp),d0
    ffc4:	|         move.l 12(sp),d1
    ffc8:	|         jsr -684(a6)
    ffcc:	|         move.l d0,8(sp)
    ffd0:	|         move.l 8(sp),d0
    ffd4:	|         movea.l 20(sp),a0
    ffd8:	|         move.l d0,(a0)
    if (!newPersona->animation) return BR_ERROR;
    ffda:	|         movea.l 20(sp),a0
    ffde:	|         move.l (a0),d0
    ffe0:	|     /-- bne.s ffe6 <builtIn_costume+0xc0>
    ffe2:	|     |   moveq #1,d0
    ffe4:	+-----|-- bra.s 10048 <builtIn_costume+0x122>
    for (iii = numParams - 1; iii >= 0; iii--) {
    ffe6:	|     \-> move.l 44(sp),d0
    ffea:	|         subq.l #1,d0
    ffec:	|         move.l d0,36(sp)
    fff0:	|     /-- bra.s 1002c <builtIn_costume+0x106>
        newPersona->animation[iii] = getAnimationFromVar(&(fun->stack->thisVar));
    fff2:	|  /--|-> movea.l 48(sp),a0
    fff6:	|  |  |   move.l 24(a0),d0
    fffa:	|  |  |   movea.l 20(sp),a0
    fffe:	|  |  |   movea.l (a0),a0
   10000:	|  |  |   move.l 36(sp),d1
   10004:	|  |  |   add.l d1,d1
   10006:	|  |  |   add.l d1,d1
   10008:	|  |  |   lea (0,a0,d1.l),a2
   1000c:	|  |  |   move.l d0,-(sp)
   1000e:	|  |  |   jsr 14ac8 <getAnimationFromVar>
   10014:	|  |  |   addq.l #4,sp
   10016:	|  |  |   move.l d0,(a2)
        trimStack(&fun->stack);
   10018:	|  |  |   moveq #24,d0
   1001a:	|  |  |   add.l 48(sp),d0
   1001e:	|  |  |   move.l d0,-(sp)
   10020:	|  |  |   jsr 14f74 <trimStack>
   10026:	|  |  |   addq.l #4,sp
    for (iii = numParams - 1; iii >= 0; iii--) {
   10028:	|  |  |   subq.l #1,36(sp)
   1002c:	|  |  \-> tst.l 36(sp)
   10030:	|  \----- bge.s fff2 <builtIn_costume+0xcc>
    }

    // Return value
    newCostumeVariable(&fun->reg, newPersona);
   10032:	|         moveq #28,d0
   10034:	|         add.l 48(sp),d0
   10038:	|         move.l 20(sp),-(sp)
   1003c:	|         move.l d0,-(sp)
   1003e:	|         jsr 14ec0 <newCostumeVariable>
   10044:	|         addq.l #8,sp
    return BR_CONTINUE;
   10046:	|         moveq #2,d0
}
   10048:	\-------> movea.l (sp)+,a2
   1004a:	          movea.l (sp)+,a6
   1004c:	          lea 32(sp),sp
   10050:	          rts

00010052 <builtIn_launch>:

builtIn(launch)
{
   10052:	          lea -20(sp),sp
   10056:	          move.l a6,-(sp)
    UNUSEDALL
    char * newTextA = getTextFromAnyVar(&(fun->stack->thisVar));
   10058:	          movea.l 32(sp),a0
   1005c:	          move.l 24(a0),d0
   10060:	          move.l d0,-(sp)
   10062:	          jsr 14bc6 <getTextFromAnyVar>
   10068:	          addq.l #4,sp
   1006a:	          move.l d0,20(sp)
    if (!newTextA) return BR_ERROR;
   1006e:	      /-- bne.s 10076 <builtIn_launch+0x24>
   10070:	      |   moveq #1,d0
   10072:	/-----|-- bra.w 101a4 <builtIn_launch+0x152>

    char * newText = encodeFilename(newTextA);
   10076:	|     \-> move.l 20(sp),-(sp)
   1007a:	|         jsr 2fe <encodeFilename>
   10080:	|         addq.l #4,sp
   10082:	|         move.l d0,16(sp)

    trimStack(&fun->stack);
   10086:	|         moveq #24,d0
   10088:	|         add.l 32(sp),d0
   1008c:	|         move.l d0,-(sp)
   1008e:	|         jsr 14f74 <trimStack>
   10094:	|         addq.l #4,sp
    if (newTextA[0] == 'h' &&
   10096:	|         movea.l 20(sp),a0
   1009a:	|         move.b (a0),d0
   1009c:	|         cmpi.b #104,d0
   100a0:	|  /----- bne.s 1010a <builtIn_launch+0xb8>
        newTextA[1] == 't' &&
   100a2:	|  |      movea.l 20(sp),a0
   100a6:	|  |      addq.l #1,a0
   100a8:	|  |      move.b (a0),d0
    if (newTextA[0] == 'h' &&
   100aa:	|  |      cmpi.b #116,d0
   100ae:	|  +----- bne.s 1010a <builtIn_launch+0xb8>
        newTextA[2] == 't' &&
   100b0:	|  |      movea.l 20(sp),a0
   100b4:	|  |      addq.l #2,a0
   100b6:	|  |      move.b (a0),d0
        newTextA[1] == 't' &&
   100b8:	|  |      cmpi.b #116,d0
   100bc:	|  +----- bne.s 1010a <builtIn_launch+0xb8>
        newTextA[3] == 'p' &&
   100be:	|  |      movea.l 20(sp),a0
   100c2:	|  |      addq.l #3,a0
   100c4:	|  |      move.b (a0),d0
        newTextA[2] == 't' &&
   100c6:	|  |      cmpi.b #112,d0
   100ca:	|  +----- bne.s 1010a <builtIn_launch+0xb8>
        (newTextA[4] == ':' || (newTextA[4] == 's' && newTextA[5] == ':'))) {
   100cc:	|  |      movea.l 20(sp),a0
   100d0:	|  |      addq.l #4,a0
   100d2:	|  |      move.b (a0),d0
        newTextA[3] == 'p' &&
   100d4:	|  |      cmpi.b #58,d0
   100d8:	|  |  /-- beq.s 100f6 <builtIn_launch+0xa4>
        (newTextA[4] == ':' || (newTextA[4] == 's' && newTextA[5] == ':'))) {
   100da:	|  |  |   movea.l 20(sp),a0
   100de:	|  |  |   addq.l #4,a0
   100e0:	|  |  |   move.b (a0),d0
   100e2:	|  |  |   cmpi.b #115,d0
   100e6:	|  +--|-- bne.s 1010a <builtIn_launch+0xb8>
   100e8:	|  |  |   movea.l 20(sp),a0
   100ec:	|  |  |   addq.l #5,a0
   100ee:	|  |  |   move.b (a0),d0
   100f0:	|  |  |   cmpi.b #58,d0
   100f4:	|  +--|-- bne.s 1010a <builtIn_launch+0xb8>

        // IT'S A WEBSITE!
        launchMe = copyString(newTextA);
   100f6:	|  |  \-> move.l 20(sp),-(sp)
   100fa:	|  |      jsr b8 <copyString>
   10100:	|  |      addq.l #4,sp
   10102:	|  |      move.l d0,1a866 <launchMe>
   10108:	|  |  /-- bra.s 1015c <builtIn_launch+0x10a>
    } else {
        char *gameDir;
        gameDir = joinStrings(gamePath, "/");
   1010a:	|  \--|-> move.l 1a70c <gamePath>,d0
   10110:	|     |   pea 197c1 <PutChar+0x1ce3>
   10116:	|     |   move.l d0,-(sp)
   10118:	|     |   jsr 13b1c <joinStrings>
   1011e:	|     |   addq.l #8,sp
   10120:	|     |   move.l d0,12(sp)

        launchMe = joinStrings(gameDir, newText);
   10124:	|     |   move.l 16(sp),-(sp)
   10128:	|     |   move.l 16(sp),-(sp)
   1012c:	|     |   jsr 13b1c <joinStrings>
   10132:	|     |   addq.l #8,sp
   10134:	|     |   move.l d0,1a866 <launchMe>
        FreeVec(newText);
   1013a:	|     |   move.l 16(sp),8(sp)
   10140:	|     |   move.l 1a7a4 <SysBase>,d0
   10146:	|     |   movea.l d0,a6
   10148:	|     |   movea.l 8(sp),a1
   1014c:	|     |   jsr -690(a6)
        if (!launchMe) return BR_ERROR;
   10150:	|     |   move.l 1a866 <launchMe>,d0
   10156:	|     +-- bne.s 1015c <builtIn_launch+0x10a>
   10158:	|     |   moveq #1,d0
   1015a:	+-----|-- bra.s 101a4 <builtIn_launch+0x152>
    }
    FreeVec(newTextA);
   1015c:	|     \-> move.l 20(sp),4(sp)
   10162:	|         move.l 1a7a4 <SysBase>,d0
   10168:	|         movea.l d0,a6
   1016a:	|         movea.l 4(sp),a1
   1016e:	|         jsr -690(a6)
    setGraphicsWindow(FALSE);
   10172:	|         clr.l -(sp)
   10174:	|         jsr 3e98 <setGraphicsWindow>
   1017a:	|         addq.l #4,sp
    setVariable(&fun->reg, SVT_INT, 1);
   1017c:	|         moveq #28,d0
   1017e:	|         add.l 32(sp),d0
   10182:	|         pea 1 <_start+0x1>
   10186:	|         pea 1 <_start+0x1>
   1018a:	|         move.l d0,-(sp)
   1018c:	|         jsr 14ee2 <setVariable>
   10192:	|         lea 12(sp),sp
    launchResult = &fun->reg;
   10196:	|         moveq #28,d0
   10198:	|         add.l 32(sp),d0
   1019c:	|         move.l d0,1a86a <launchResult>

    return BR_KEEP_AND_PAUSE;
   101a2:	|         moveq #0,d0
}
   101a4:	\-------> movea.l (sp)+,a6
   101a6:	          lea 20(sp),sp
   101aa:	          rts

000101ac <builtIn_pause>:

builtIn(pause)
{
   101ac:	       subq.l #4,sp
	UNUSEDALL
	int theTime;
	if (! getValueType(&theTime, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   101ae:	       movea.l 12(sp),a0
   101b2:	       move.l 24(a0),d0
   101b6:	       move.l d0,-(sp)
   101b8:	       pea 1 <_start+0x1>
   101bc:	       move.l sp,d0
   101be:	       addq.l #8,d0
   101c0:	       move.l d0,-(sp)
   101c2:	       jsr 145f0 <getValueType>
   101c8:	       lea 12(sp),sp
   101cc:	       tst.w d0
   101ce:	   /-- bne.s 101d4 <builtIn_pause+0x28>
   101d0:	   |   moveq #1,d0
   101d2:	/--|-- bra.s 10202 <builtIn_pause+0x56>
	trimStack (&fun -> stack);
   101d4:	|  \-> moveq #24,d0
   101d6:	|      add.l 12(sp),d0
   101da:	|      move.l d0,-(sp)
   101dc:	|      jsr 14f74 <trimStack>
   101e2:	|      addq.l #4,sp
	if (theTime > 0) {
   101e4:	|      move.l (sp),d0
   101e6:	|  /-- ble.s 10200 <builtIn_pause+0x54>
		fun -> timeLeft = theTime - 1;
   101e8:	|  |   move.l (sp),d0
   101ea:	|  |   subq.l #1,d0
   101ec:	|  |   movea.l 12(sp),a0
   101f0:	|  |   move.l d0,12(a0)
		fun -> isSpeech = FALSE;
   101f4:	|  |   movea.l 12(sp),a0
   101f8:	|  |   clr.w 50(a0)
		return BR_KEEP_AND_PAUSE;
   101fc:	|  |   moveq #0,d0
   101fe:	+--|-- bra.s 10202 <builtIn_pause+0x56>
	}
	return BR_CONTINUE;
   10200:	|  \-> moveq #2,d0
}
   10202:	\----> addq.l #4,sp
   10204:	       rts

00010206 <builtIn_completeTimers>:

builtIn(completeTimers)
{
	UNUSEDALL
	completeTimers();
   10206:	jsr 4600 <completeTimers>
	return BR_CONTINUE;
   1020c:	moveq #2,d0
}
   1020e:	rts

00010210 <builtIn_callEvent>:

builtIn(callEvent)
{
   10210:	       lea -12(sp),sp
	UNUSEDALL
	int obj1, obj2;
	if (! getValueType(&obj2, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10214:	       movea.l 20(sp),a0
   10218:	       move.l 24(a0),d0
   1021c:	       move.l d0,-(sp)
   1021e:	       pea 7 <_start+0x7>
   10222:	       lea 8(sp),a0
   10226:	       move.l a0,-(sp)
   10228:	       jsr 145f0 <getValueType>
   1022e:	       lea 12(sp),sp
   10232:	       tst.w d0
   10234:	   /-- bne.s 1023c <builtIn_callEvent+0x2c>
   10236:	   |   moveq #1,d0
   10238:	/--|-- bra.w 102d2 <builtIn_callEvent+0xc2>
	trimStack (&fun -> stack);
   1023c:	|  \-> moveq #24,d0
   1023e:	|      add.l 20(sp),d0
   10242:	|      move.l d0,-(sp)
   10244:	|      jsr 14f74 <trimStack>
   1024a:	|      addq.l #4,sp
	if (! getValueType(&obj1, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1024c:	|      movea.l 20(sp),a0
   10250:	|      move.l 24(a0),d0
   10254:	|      move.l d0,-(sp)
   10256:	|      pea 7 <_start+0x7>
   1025a:	|      moveq #12,d0
   1025c:	|      add.l sp,d0
   1025e:	|      move.l d0,-(sp)
   10260:	|      jsr 145f0 <getValueType>
   10266:	|      lea 12(sp),sp
   1026a:	|      tst.w d0
   1026c:	|  /-- bne.s 10272 <builtIn_callEvent+0x62>
   1026e:	|  |   moveq #1,d0
   10270:	+--|-- bra.s 102d2 <builtIn_callEvent+0xc2>
	trimStack (&fun -> stack);
   10272:	|  \-> moveq #24,d0
   10274:	|      add.l 20(sp),d0
   10278:	|      move.l d0,-(sp)
   1027a:	|      jsr 14f74 <trimStack>
   10280:	|      addq.l #4,sp

	int fNum = getCombinationFunction (obj1, obj2);
   10282:	|      move.l (sp),d1
   10284:	|      move.l 4(sp),d0
   10288:	|      move.l d1,-(sp)
   1028a:	|      move.l d0,-(sp)
   1028c:	|      jsr d38a <getCombinationFunction>
   10292:	|      addq.l #8,sp
   10294:	|      move.l d0,8(sp)

	// Return value
	if (fNum) {
   10298:	|  /-- beq.s 102b8 <builtIn_callEvent+0xa8>
		setVariable (&fun -> reg, SVT_FUNC, fNum);
   1029a:	|  |   moveq #28,d0
   1029c:	|  |   add.l 20(sp),d0
   102a0:	|  |   move.l 8(sp),-(sp)
   102a4:	|  |   pea 2 <_start+0x2>
   102a8:	|  |   move.l d0,-(sp)
   102aa:	|  |   jsr 14ee2 <setVariable>
   102b0:	|  |   lea 12(sp),sp
		return BR_CALLAFUNC;
   102b4:	|  |   moveq #4,d0
   102b6:	+--|-- bra.s 102d2 <builtIn_callEvent+0xc2>
	}
	setVariable (&fun -> reg, SVT_INT, 0);
   102b8:	|  \-> moveq #28,d0
   102ba:	|      add.l 20(sp),d0
   102be:	|      clr.l -(sp)
   102c0:	|      pea 1 <_start+0x1>
   102c4:	|      move.l d0,-(sp)
   102c6:	|      jsr 14ee2 <setVariable>
   102cc:	|      lea 12(sp),sp
	return BR_CONTINUE;
   102d0:	|      moveq #2,d0
}
   102d2:	\----> lea 12(sp),sp
   102d6:	       rts

000102d8 <builtIn_quitGame>:
BOOL reallyWantToQuit = FALSE;

builtIn(quitGame)
{
	UNUSEDALL
	reallyWantToQuit = TRUE;
   102d8:	move.w #1,1a876 <reallyWantToQuit>
	//quit_event.type=SDL_QUIT; Todo: Amigize
	//SDL_PushEvent(&quit_event);
	return BR_CONTINUE;
   102e0:	moveq #2,d0
}
   102e2:	rts

000102e4 <builtIn__rem_movieStart>:

// The old movie functions are deprecated and does nothing.
builtIn(_rem_movieStart)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   102e4:	moveq #24,d0
   102e6:	add.l 8(sp),d0
   102ea:	move.l d0,-(sp)
   102ec:	jsr 14f74 <trimStack>
   102f2:	addq.l #4,sp
	KPrintF("Movie Stuff not supported on Amiga");
   102f4:	pea 197c3 <PutChar+0x1ce5>
   102fa:	jsr 1703c <KPrintF>
   10300:	addq.l #4,sp
	return BR_CONTINUE;
   10302:	moveq #2,d0
}
   10304:	rts

00010306 <builtIn__rem_movieAbort>:

builtIn(_rem_movieAbort)
{
	UNUSEDALL
	//setVariable (&fun -> reg, SVT_INT, 0);
	KPrintF("Movie Stuff not supported on Amiga");
   10306:	pea 197c3 <PutChar+0x1ce5>
   1030c:	jsr 1703c <KPrintF>
   10312:	addq.l #4,sp
	return BR_CONTINUE;
   10314:	moveq #2,d0
}
   10316:	rts

00010318 <builtIn__rem_moviePlaying>:

builtIn(_rem_moviePlaying)
{
	UNUSEDALL
	KPrintF("Movie Stuff not supported on Amiga");
   10318:	pea 197c3 <PutChar+0x1ce5>
   1031e:	jsr 1703c <KPrintF>
   10324:	addq.l #4,sp
	//setVariable (&fun -> reg, SVT_INT, 0);
	return BR_CONTINUE;
   10326:	moveq #2,d0
}
   10328:	rts

0001032a <builtIn_playMovie>:
	
	if (r && (! fun->next)) {
		restartFunction (fun);
		return BR_ALREADY_GONE;
	}*/
	KPrintF("Movie Stuff not supported on Amiga");
   1032a:	pea 197c3 <PutChar+0x1ce5>
   10330:	jsr 1703c <KPrintF>
   10336:	addq.l #4,sp
	return BR_CONTINUE;
   10338:	moveq #2,d0
}
   1033a:	rts

0001033c <builtIn_stopMovie>:
	/*int r;
	
	r = stopMovie();
	
	setVariable (&fun -> reg, SVT_INT, 0);*/
	KPrintF("Movie Stuff not supported on Amiga");
   1033c:	pea 197c3 <PutChar+0x1ce5>
   10342:	jsr 1703c <KPrintF>
   10348:	addq.l #4,sp
	return BR_CONTINUE;
   1034a:	moveq #2,d0
}
   1034c:	rts

0001034e <builtIn_pauseMovie>:
	/*int r;
	
	r = pauseMovie();
	
	setVariable (&fun -> reg, SVT_INT, 0);*/
	KPrintF("Movie Stuff not supported on Amiga");
   1034e:	pea 197c3 <PutChar+0x1ce5>
   10354:	jsr 1703c <KPrintF>
   1035a:	addq.l #4,sp
	return BR_CONTINUE;
   1035c:	moveq #2,d0
}
   1035e:	rts

00010360 <builtIn_startMusic>:

#pragma mark -
#pragma mark Audio functions

builtIn(startMusic)
{
   10360:	       lea -12(sp),sp
	UNUSEDALL
	int fromTrack, musChan, fileNumber;
	if (! getValueType(&fromTrack, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10364:	       movea.l 20(sp),a0
   10368:	       move.l 24(a0),d0
   1036c:	       move.l d0,-(sp)
   1036e:	       pea 1 <_start+0x1>
   10372:	       moveq #16,d0
   10374:	       add.l sp,d0
   10376:	       move.l d0,-(sp)
   10378:	       jsr 145f0 <getValueType>
   1037e:	       lea 12(sp),sp
   10382:	       tst.w d0
   10384:	   /-- bne.s 1038c <builtIn_startMusic+0x2c>
   10386:	   |   moveq #1,d0
   10388:	/--|-- bra.w 1042c <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
   1038c:	|  \-> moveq #24,d0
   1038e:	|      add.l 20(sp),d0
   10392:	|      move.l d0,-(sp)
   10394:	|      jsr 14f74 <trimStack>
   1039a:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1039c:	|      movea.l 20(sp),a0
   103a0:	|      move.l 24(a0),d0
   103a4:	|      move.l d0,-(sp)
   103a6:	|      pea 1 <_start+0x1>
   103aa:	|      moveq #12,d0
   103ac:	|      add.l sp,d0
   103ae:	|      move.l d0,-(sp)
   103b0:	|      jsr 145f0 <getValueType>
   103b6:	|      lea 12(sp),sp
   103ba:	|      tst.w d0
   103bc:	|  /-- bne.s 103c2 <builtIn_startMusic+0x62>
   103be:	|  |   moveq #1,d0
   103c0:	+--|-- bra.s 1042c <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
   103c2:	|  \-> moveq #24,d0
   103c4:	|      add.l 20(sp),d0
   103c8:	|      move.l d0,-(sp)
   103ca:	|      jsr 14f74 <trimStack>
   103d0:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   103d2:	|      movea.l 20(sp),a0
   103d6:	|      move.l 24(a0),d0
   103da:	|      move.l d0,-(sp)
   103dc:	|      pea 5 <_start+0x5>
   103e0:	|      lea 8(sp),a0
   103e4:	|      move.l a0,-(sp)
   103e6:	|      jsr 145f0 <getValueType>
   103ec:	|      lea 12(sp),sp
   103f0:	|      tst.w d0
   103f2:	|  /-- bne.s 103f8 <builtIn_startMusic+0x98>
   103f4:	|  |   moveq #1,d0
   103f6:	+--|-- bra.s 1042c <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
   103f8:	|  \-> moveq #24,d0
   103fa:	|      add.l 20(sp),d0
   103fe:	|      move.l d0,-(sp)
   10400:	|      jsr 14f74 <trimStack>
   10406:	|      addq.l #4,sp
	if (! playMOD (fileNumber, musChan, fromTrack)) return BR_CONTINUE; //BR_ERROR;
   10408:	|      movea.l 8(sp),a0
   1040c:	|      move.l 4(sp),d1
   10410:	|      move.l (sp),d0
   10412:	|      move.l a0,-(sp)
   10414:	|      move.l d1,-(sp)
   10416:	|      move.l d0,-(sp)
   10418:	|      jsr cf96 <playMOD>
   1041e:	|      lea 12(sp),sp
   10422:	|      tst.w d0
   10424:	|  /-- bne.s 1042a <builtIn_startMusic+0xca>
   10426:	|  |   moveq #2,d0
   10428:	+--|-- bra.s 1042c <builtIn_startMusic+0xcc>
	return BR_CONTINUE;
   1042a:	|  \-> moveq #2,d0
}
   1042c:	\----> lea 12(sp),sp
   10430:	       rts

00010432 <builtIn_stopMusic>:

builtIn(stopMusic)
{
   10432:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10434:	       movea.l 12(sp),a0
   10438:	       move.l 24(a0),d0
   1043c:	       move.l d0,-(sp)
   1043e:	       pea 1 <_start+0x1>
   10442:	       move.l sp,d0
   10444:	       addq.l #8,d0
   10446:	       move.l d0,-(sp)
   10448:	       jsr 145f0 <getValueType>
   1044e:	       lea 12(sp),sp
   10452:	       tst.w d0
   10454:	   /-- bne.s 1045a <builtIn_stopMusic+0x28>
   10456:	   |   moveq #1,d0
   10458:	/--|-- bra.s 10478 <builtIn_stopMusic+0x46>
	trimStack (&fun -> stack);
   1045a:	|  \-> moveq #24,d0
   1045c:	|      add.l 12(sp),d0
   10460:	|      move.l d0,-(sp)
   10462:	|      jsr 14f74 <trimStack>
   10468:	|      addq.l #4,sp
	stopMOD (v);
   1046a:	|      move.l (sp),d0
   1046c:	|      move.l d0,-(sp)
   1046e:	|      jsr d032 <stopMOD>
   10474:	|      addq.l #4,sp
	return BR_CONTINUE;
   10476:	|      moveq #2,d0
}
   10478:	\----> addq.l #4,sp
   1047a:	       rts

0001047c <builtIn_setMusicVolume>:

builtIn(setMusicVolume)
{
   1047c:	       subq.l #8,sp
	UNUSEDALL
	int musChan, v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1047e:	       movea.l 16(sp),a0
   10482:	       move.l 24(a0),d0
   10486:	       move.l d0,-(sp)
   10488:	       pea 1 <_start+0x1>
   1048c:	       move.l sp,d0
   1048e:	       addq.l #8,d0
   10490:	       move.l d0,-(sp)
   10492:	       jsr 145f0 <getValueType>
   10498:	       lea 12(sp),sp
   1049c:	       tst.w d0
   1049e:	   /-- bne.s 104a4 <builtIn_setMusicVolume+0x28>
   104a0:	   |   moveq #1,d0
   104a2:	/--|-- bra.s 104fe <builtIn_setMusicVolume+0x82>
	trimStack (&fun -> stack);
   104a4:	|  \-> moveq #24,d0
   104a6:	|      add.l 16(sp),d0
   104aa:	|      move.l d0,-(sp)
   104ac:	|      jsr 14f74 <trimStack>
   104b2:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   104b4:	|      movea.l 16(sp),a0
   104b8:	|      move.l 24(a0),d0
   104bc:	|      move.l d0,-(sp)
   104be:	|      pea 1 <_start+0x1>
   104c2:	|      moveq #12,d0
   104c4:	|      add.l sp,d0
   104c6:	|      move.l d0,-(sp)
   104c8:	|      jsr 145f0 <getValueType>
   104ce:	|      lea 12(sp),sp
   104d2:	|      tst.w d0
   104d4:	|  /-- bne.s 104da <builtIn_setMusicVolume+0x5e>
   104d6:	|  |   moveq #1,d0
   104d8:	+--|-- bra.s 104fe <builtIn_setMusicVolume+0x82>
	trimStack (&fun -> stack);
   104da:	|  \-> moveq #24,d0
   104dc:	|      add.l 16(sp),d0
   104e0:	|      move.l d0,-(sp)
   104e2:	|      jsr 14f74 <trimStack>
   104e8:	|      addq.l #4,sp
	setMusicVolume (musChan, v);
   104ea:	|      move.l (sp),d1
   104ec:	|      move.l 4(sp),d0
   104f0:	|      move.l d1,-(sp)
   104f2:	|      move.l d0,-(sp)
   104f4:	|      jsr d018 <setMusicVolume>
   104fa:	|      addq.l #8,sp
	return BR_CONTINUE;
   104fc:	|      moveq #2,d0
}
   104fe:	\----> addq.l #8,sp
   10500:	       rts

00010502 <builtIn_setDefaultMusicVolume>:

builtIn(setDefaultMusicVolume)
{
   10502:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10504:	       movea.l 12(sp),a0
   10508:	       move.l 24(a0),d0
   1050c:	       move.l d0,-(sp)
   1050e:	       pea 1 <_start+0x1>
   10512:	       move.l sp,d0
   10514:	       addq.l #8,d0
   10516:	       move.l d0,-(sp)
   10518:	       jsr 145f0 <getValueType>
   1051e:	       lea 12(sp),sp
   10522:	       tst.w d0
   10524:	   /-- bne.s 1052a <builtIn_setDefaultMusicVolume+0x28>
   10526:	   |   moveq #1,d0
   10528:	/--|-- bra.s 10548 <builtIn_setDefaultMusicVolume+0x46>
	trimStack (&fun -> stack);
   1052a:	|  \-> moveq #24,d0
   1052c:	|      add.l 12(sp),d0
   10530:	|      move.l d0,-(sp)
   10532:	|      jsr 14f74 <trimStack>
   10538:	|      addq.l #4,sp
	setDefaultMusicVolume (v);
   1053a:	|      move.l (sp),d0
   1053c:	|      move.l d0,-(sp)
   1053e:	|      jsr cffc <setDefaultMusicVolume>
   10544:	|      addq.l #4,sp
	return BR_CONTINUE;
   10546:	|      moveq #2,d0
}
   10548:	\----> addq.l #4,sp
   1054a:	       rts

0001054c <builtIn_playSound>:

builtIn(playSound)
{
   1054c:	       subq.l #4,sp


	UNUSEDALL
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   1054e:	       movea.l 12(sp),a0
   10552:	       move.l 24(a0),d0
   10556:	       move.l d0,-(sp)
   10558:	       pea 5 <_start+0x5>
   1055c:	       move.l sp,d0
   1055e:	       addq.l #8,d0
   10560:	       move.l d0,-(sp)
   10562:	       jsr 145f0 <getValueType>
   10568:	       lea 12(sp),sp
   1056c:	       tst.w d0
   1056e:	   /-- bne.s 10574 <builtIn_playSound+0x28>
   10570:	   |   moveq #1,d0
   10572:	/--|-- bra.s 1059c <builtIn_playSound+0x50>
	trimStack (&fun -> stack);
   10574:	|  \-> moveq #24,d0
   10576:	|      add.l 12(sp),d0
   1057a:	|      move.l d0,-(sp)
   1057c:	|      jsr 14f74 <trimStack>
   10582:	|      addq.l #4,sp
	if (! startSound (fileNumber, FALSE)) return BR_CONTINUE;	// Was BR_ERROR
   10584:	|      move.l (sp),d0
   10586:	|      clr.l -(sp)
   10588:	|      move.l d0,-(sp)
   1058a:	|      jsr d020 <startSound>
   10590:	|      addq.l #8,sp
   10592:	|      tst.w d0
   10594:	|  /-- bne.s 1059a <builtIn_playSound+0x4e>
   10596:	|  |   moveq #2,d0
   10598:	+--|-- bra.s 1059c <builtIn_playSound+0x50>
	return BR_CONTINUE;
   1059a:	|  \-> moveq #2,d0
}
   1059c:	\----> addq.l #4,sp
   1059e:	       rts

000105a0 <builtIn_loopSound>:

builtIn(loopSound)
{
   105a0:	             lea -28(sp),sp
   105a4:	             move.l a6,-(sp)
	UNUSEDALL
	int fileNumber;

	if (numParams < 1) {
   105a6:	             tst.l 36(sp)
   105aa:	         /-- bgt.s 105c0 <builtIn_loopSound+0x20>
		KPrintF("Built-in function loopSound() must have at least 1 parameter.");
   105ac:	         |   pea 197e6 <PutChar+0x1d08>
   105b2:	         |   jsr 1703c <KPrintF>
   105b8:	         |   addq.l #4,sp
		return BR_ERROR;
   105ba:	         |   moveq #1,d0
   105bc:	/--------|-- bra.w 1077c <builtIn_loopSound+0x1dc>
	} else if (numParams < 2) {
   105c0:	|        \-> moveq #1,d0
   105c2:	|            cmp.l 36(sp),d0
   105c6:	|     /----- blt.s 10622 <builtIn_loopSound+0x82>

		if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) return BR_ERROR;
   105c8:	|     |      movea.l 40(sp),a0
   105cc:	|     |      move.l 24(a0),d0
   105d0:	|     |      move.l d0,-(sp)
   105d2:	|     |      pea 5 <_start+0x5>
   105d6:	|     |      lea 16(sp),a0
   105da:	|     |      move.l a0,-(sp)
   105dc:	|     |      jsr 145f0 <getValueType>
   105e2:	|     |      lea 12(sp),sp
   105e6:	|     |      tst.w d0
   105e8:	|     |  /-- bne.s 105f0 <builtIn_loopSound+0x50>
   105ea:	|     |  |   moveq #1,d0
   105ec:	+-----|--|-- bra.w 1077c <builtIn_loopSound+0x1dc>
		trimStack(&fun->stack);
   105f0:	|     |  \-> moveq #24,d0
   105f2:	|     |      add.l 40(sp),d0
   105f6:	|     |      move.l d0,-(sp)
   105f8:	|     |      jsr 14f74 <trimStack>
   105fe:	|     |      addq.l #4,sp
		if (!startSound(fileNumber, TRUE)) return BR_CONTINUE;	// Was BR_ERROR
   10600:	|     |      move.l 8(sp),d0
   10604:	|     |      pea 1 <_start+0x1>
   10608:	|     |      move.l d0,-(sp)
   1060a:	|     |      jsr d020 <startSound>
   10610:	|     |      addq.l #8,sp
   10612:	|     |      tst.w d0
   10614:	|     |  /-- bne.s 1061c <builtIn_loopSound+0x7c>
   10616:	|     |  |   moveq #2,d0
   10618:	+-----|--|-- bra.w 1077c <builtIn_loopSound+0x1dc>
		return BR_CONTINUE;
   1061c:	|     |  \-> moveq #2,d0
   1061e:	+-----|----- bra.w 1077c <builtIn_loopSound+0x1dc>
	} else {
		// We have more than one sound to play!

		int doLoop = 2;
   10622:	|     \----> moveq #2,d1
   10624:	|            move.l d1,4(sp)
		struct soundList *s = NULL;
   10628:	|            clr.l 28(sp)
		struct soundList *old = NULL;
   1062c:	|            clr.l 24(sp)

		// Should we loop?
		if (fun->stack->thisVar.varType != SVT_FILE) {
   10630:	|            movea.l 40(sp),a0
   10634:	|            movea.l 24(a0),a0
   10638:	|            move.l (a0),d0
   1063a:	|            moveq #5,d1
   1063c:	|            cmp.l d0,d1
   1063e:	|  /-------- beq.w 10716 <builtIn_loopSound+0x176>
			getValueType(&doLoop, SVT_INT,&fun->stack->thisVar);
   10642:	|  |         movea.l 40(sp),a0
   10646:	|  |         move.l 24(a0),d0
   1064a:	|  |         move.l d0,-(sp)
   1064c:	|  |         pea 1 <_start+0x1>
   10650:	|  |         lea 12(sp),a0
   10654:	|  |         move.l a0,-(sp)
   10656:	|  |         jsr 145f0 <getValueType>
   1065c:	|  |         lea 12(sp),sp
			trimStack(&fun->stack);
   10660:	|  |         moveq #24,d0
   10662:	|  |         add.l 40(sp),d0
   10666:	|  |         move.l d0,-(sp)
   10668:	|  |         jsr 14f74 <trimStack>
   1066e:	|  |         addq.l #4,sp
			numParams--;
   10670:	|  |         subq.l #1,36(sp)
		}
		while (numParams) {
   10674:	|  +-------- bra.w 10716 <builtIn_loopSound+0x176>
			if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) {
   10678:	|  |  /----> movea.l 40(sp),a0
   1067c:	|  |  |      move.l 24(a0),d0
   10680:	|  |  |      move.l d0,-(sp)
   10682:	|  |  |      pea 5 <_start+0x5>
   10686:	|  |  |      lea 16(sp),a0
   1068a:	|  |  |      move.l a0,-(sp)
   1068c:	|  |  |      jsr 145f0 <getValueType>
   10692:	|  |  |      lea 12(sp),sp
   10696:	|  |  |      tst.w d0
   10698:	|  |  |  /-- bne.s 106ae <builtIn_loopSound+0x10e>
				KPrintF("Illegal parameter given built-in function loopSound().");
   1069a:	|  |  |  |   pea 19824 <PutChar+0x1d46>
   106a0:	|  |  |  |   jsr 1703c <KPrintF>
   106a6:	|  |  |  |   addq.l #4,sp
				return BR_ERROR;
   106a8:	|  |  |  |   moveq #1,d0
   106aa:	+--|--|--|-- bra.w 1077c <builtIn_loopSound+0x1dc>
			}
			s = AllocVec(sizeof(struct soundList), MEMF_ANY);
   106ae:	|  |  |  \-> moveq #20,d0
   106b0:	|  |  |      move.l d0,20(sp)
   106b4:	|  |  |      clr.l 16(sp)
   106b8:	|  |  |      move.l 1a7a4 <SysBase>,d0
   106be:	|  |  |      movea.l d0,a6
   106c0:	|  |  |      move.l 20(sp),d0
   106c4:	|  |  |      move.l 16(sp),d1
   106c8:	|  |  |      jsr -684(a6)
   106cc:	|  |  |      move.l d0,12(sp)
   106d0:	|  |  |      move.l 12(sp),d0
   106d4:	|  |  |      move.l d0,28(sp)
			if (!s) return BR_ERROR;
   106d8:	|  |  |  /-- bne.s 106e0 <builtIn_loopSound+0x140>
   106da:	|  |  |  |   moveq #1,d0
   106dc:	+--|--|--|-- bra.w 1077c <builtIn_loopSound+0x1dc>

			s->next = old;
   106e0:	|  |  |  \-> movea.l 28(sp),a0
   106e4:	|  |  |      move.l 24(sp),4(a0)
			s->prev = NULL;
   106ea:	|  |  |      movea.l 28(sp),a0
   106ee:	|  |  |      clr.l 8(a0)
			s->sound = fileNumber;
   106f2:	|  |  |      move.l 8(sp),d0
   106f6:	|  |  |      movea.l 28(sp),a0
   106fa:	|  |  |      move.l d0,(a0)
			old = s;
   106fc:	|  |  |      move.l 28(sp),24(sp)

			trimStack(&fun->stack);
   10702:	|  |  |      moveq #24,d0
   10704:	|  |  |      add.l 40(sp),d0
   10708:	|  |  |      move.l d0,-(sp)
   1070a:	|  |  |      jsr 14f74 <trimStack>
   10710:	|  |  |      addq.l #4,sp
			numParams--;
   10712:	|  |  |      subq.l #1,36(sp)
		while (numParams) {
   10716:	|  \--|----> tst.l 36(sp)
   1071a:	|     \----- bne.w 10678 <builtIn_loopSound+0xd8>
		}
		while (s->next) s = s->next;
   1071e:	|        /-- bra.s 1072a <builtIn_loopSound+0x18a>
   10720:	|     /--|-> movea.l 28(sp),a0
   10724:	|     |  |   move.l 4(a0),28(sp)
   1072a:	|     |  \-> movea.l 28(sp),a0
   1072e:	|     |      move.l 4(a0),d0
   10732:	|     \----- bne.s 10720 <builtIn_loopSound+0x180>
		if (doLoop > 1) {
   10734:	|            move.l 4(sp),d0
   10738:	|            moveq #1,d1
   1073a:	|            cmp.l d0,d1
   1073c:	|     /----- bge.s 10754 <builtIn_loopSound+0x1b4>
			s->next = old;
   1073e:	|     |      movea.l 28(sp),a0
   10742:	|     |      move.l 24(sp),4(a0)
			old->prev = s;
   10748:	|     |      movea.l 24(sp),a0
   1074c:	|     |      move.l 28(sp),8(a0)
   10752:	|     |  /-- bra.s 10764 <builtIn_loopSound+0x1c4>
		} else if (doLoop) {
   10754:	|     \--|-> move.l 4(sp),d0
   10758:	|        +-- beq.s 10764 <builtIn_loopSound+0x1c4>
			s->next = s;
   1075a:	|        |   movea.l 28(sp),a0
   1075e:	|        |   move.l 28(sp),4(a0)
		}
		old->vol = -1;
   10764:	|        \-> movea.l 24(sp),a0
   10768:	|            moveq #-1,d0
   1076a:	|            move.l d0,16(a0)
		playSoundList(old);
   1076e:	|            move.l 24(sp),-(sp)
   10772:	|            jsr cf9a <playSoundList>
   10778:	|            addq.l #4,sp
		return BR_CONTINUE;
   1077a:	|            moveq #2,d0
	}
}
   1077c:	\----------> movea.l (sp)+,a6
   1077e:	             lea 28(sp),sp
   10782:	             rts

00010784 <builtIn_stopSound>:

builtIn(stopSound)
{
   10784:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   10786:	       movea.l 12(sp),a0
   1078a:	       move.l 24(a0),d0
   1078e:	       move.l d0,-(sp)
   10790:	       pea 5 <_start+0x5>
   10794:	       move.l sp,d0
   10796:	       addq.l #8,d0
   10798:	       move.l d0,-(sp)
   1079a:	       jsr 145f0 <getValueType>
   107a0:	       lea 12(sp),sp
   107a4:	       tst.w d0
   107a6:	   /-- bne.s 107ac <builtIn_stopSound+0x28>
   107a8:	   |   moveq #1,d0
   107aa:	/--|-- bra.s 107ca <builtIn_stopSound+0x46>
	trimStack (&fun -> stack);
   107ac:	|  \-> moveq #24,d0
   107ae:	|      add.l 12(sp),d0
   107b2:	|      move.l d0,-(sp)
   107b4:	|      jsr 14f74 <trimStack>
   107ba:	|      addq.l #4,sp
	huntKillSound (v);
   107bc:	|      move.l (sp),d0
   107be:	|      move.l d0,-(sp)
   107c0:	|      jsr cf92 <huntKillSound>
   107c6:	|      addq.l #4,sp
	return BR_CONTINUE;
   107c8:	|      moveq #2,d0
}
   107ca:	\----> addq.l #4,sp
   107cc:	       rts

000107ce <builtIn_setDefaultSoundVolume>:

builtIn(setDefaultSoundVolume)
{
   107ce:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   107d0:	       movea.l 12(sp),a0
   107d4:	       move.l 24(a0),d0
   107d8:	       move.l d0,-(sp)
   107da:	       pea 1 <_start+0x1>
   107de:	       move.l sp,d0
   107e0:	       addq.l #8,d0
   107e2:	       move.l d0,-(sp)
   107e4:	       jsr 145f0 <getValueType>
   107ea:	       lea 12(sp),sp
   107ee:	       tst.w d0
   107f0:	   /-- bne.s 107f6 <builtIn_setDefaultSoundVolume+0x28>
   107f2:	   |   moveq #1,d0
   107f4:	/--|-- bra.s 10814 <builtIn_setDefaultSoundVolume+0x46>
	trimStack (&fun -> stack);
   107f6:	|  \-> moveq #24,d0
   107f8:	|      add.l 12(sp),d0
   107fc:	|      move.l d0,-(sp)
   107fe:	|      jsr 14f74 <trimStack>
   10804:	|      addq.l #4,sp
	setDefaultSoundVolume (v);
   10806:	|      move.l (sp),d0
   10808:	|      move.l d0,-(sp)
   1080a:	|      jsr d008 <setDefaultSoundVolume>
   10810:	|      addq.l #4,sp
	return BR_CONTINUE;
   10812:	|      moveq #2,d0
}
   10814:	\----> addq.l #4,sp
   10816:	       rts

00010818 <builtIn_setSoundVolume>:

builtIn(setSoundVolume)
{
   10818:	       subq.l #8,sp
	UNUSEDALL
	int musChan, v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1081a:	       movea.l 16(sp),a0
   1081e:	       move.l 24(a0),d0
   10822:	       move.l d0,-(sp)
   10824:	       pea 1 <_start+0x1>
   10828:	       move.l sp,d0
   1082a:	       addq.l #8,d0
   1082c:	       move.l d0,-(sp)
   1082e:	       jsr 145f0 <getValueType>
   10834:	       lea 12(sp),sp
   10838:	       tst.w d0
   1083a:	   /-- bne.s 10840 <builtIn_setSoundVolume+0x28>
   1083c:	   |   moveq #1,d0
   1083e:	/--|-- bra.s 1089a <builtIn_setSoundVolume+0x82>
	trimStack (&fun -> stack);
   10840:	|  \-> moveq #24,d0
   10842:	|      add.l 16(sp),d0
   10846:	|      move.l d0,-(sp)
   10848:	|      jsr 14f74 <trimStack>
   1084e:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   10850:	|      movea.l 16(sp),a0
   10854:	|      move.l 24(a0),d0
   10858:	|      move.l d0,-(sp)
   1085a:	|      pea 5 <_start+0x5>
   1085e:	|      moveq #12,d0
   10860:	|      add.l sp,d0
   10862:	|      move.l d0,-(sp)
   10864:	|      jsr 145f0 <getValueType>
   1086a:	|      lea 12(sp),sp
   1086e:	|      tst.w d0
   10870:	|  /-- bne.s 10876 <builtIn_setSoundVolume+0x5e>
   10872:	|  |   moveq #1,d0
   10874:	+--|-- bra.s 1089a <builtIn_setSoundVolume+0x82>
	trimStack (&fun -> stack);
   10876:	|  \-> moveq #24,d0
   10878:	|      add.l 16(sp),d0
   1087c:	|      move.l d0,-(sp)
   1087e:	|      jsr 14f74 <trimStack>
   10884:	|      addq.l #4,sp
	setSoundVolume (musChan, v);
   10886:	|      move.l (sp),d1
   10888:	|      move.l 4(sp),d0
   1088c:	|      move.l d1,-(sp)
   1088e:	|      move.l d0,-(sp)
   10890:	|      jsr d01c <setSoundVolume>
   10896:	|      addq.l #8,sp
	return BR_CONTINUE;
   10898:	|      moveq #2,d0
}
   1089a:	\----> addq.l #8,sp
   1089c:	       rts

0001089e <builtIn_setSoundLoopPoints>:


builtIn(setSoundLoopPoints)
{
   1089e:	       lea -12(sp),sp
	UNUSEDALL
	int musChan, theEnd, theStart;
	if (! getValueType(&theEnd, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   108a2:	       movea.l 20(sp),a0
   108a6:	       move.l 24(a0),d0
   108aa:	       move.l d0,-(sp)
   108ac:	       pea 1 <_start+0x1>
   108b0:	       moveq #12,d0
   108b2:	       add.l sp,d0
   108b4:	       move.l d0,-(sp)
   108b6:	       jsr 145f0 <getValueType>
   108bc:	       lea 12(sp),sp
   108c0:	       tst.w d0
   108c2:	   /-- bne.s 108ca <builtIn_setSoundLoopPoints+0x2c>
   108c4:	   |   moveq #1,d0
   108c6:	/--|-- bra.w 10962 <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
   108ca:	|  \-> moveq #24,d0
   108cc:	|      add.l 20(sp),d0
   108d0:	|      move.l d0,-(sp)
   108d2:	|      jsr 14f74 <trimStack>
   108d8:	|      addq.l #4,sp
	if (! getValueType(&theStart, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   108da:	|      movea.l 20(sp),a0
   108de:	|      move.l 24(a0),d0
   108e2:	|      move.l d0,-(sp)
   108e4:	|      pea 1 <_start+0x1>
   108e8:	|      lea 8(sp),a0
   108ec:	|      move.l a0,-(sp)
   108ee:	|      jsr 145f0 <getValueType>
   108f4:	|      lea 12(sp),sp
   108f8:	|      tst.w d0
   108fa:	|  /-- bne.s 10900 <builtIn_setSoundLoopPoints+0x62>
   108fc:	|  |   moveq #1,d0
   108fe:	+--|-- bra.s 10962 <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
   10900:	|  \-> moveq #24,d0
   10902:	|      add.l 20(sp),d0
   10906:	|      move.l d0,-(sp)
   10908:	|      jsr 14f74 <trimStack>
   1090e:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   10910:	|      movea.l 20(sp),a0
   10914:	|      move.l 24(a0),d0
   10918:	|      move.l d0,-(sp)
   1091a:	|      pea 5 <_start+0x5>
   1091e:	|      moveq #16,d0
   10920:	|      add.l sp,d0
   10922:	|      move.l d0,-(sp)
   10924:	|      jsr 145f0 <getValueType>
   1092a:	|      lea 12(sp),sp
   1092e:	|      tst.w d0
   10930:	|  /-- bne.s 10936 <builtIn_setSoundLoopPoints+0x98>
   10932:	|  |   moveq #1,d0
   10934:	+--|-- bra.s 10962 <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
   10936:	|  \-> moveq #24,d0
   10938:	|      add.l 20(sp),d0
   1093c:	|      move.l d0,-(sp)
   1093e:	|      jsr 14f74 <trimStack>
   10944:	|      addq.l #4,sp
	setSoundLoop (musChan, theStart, theEnd);
   10946:	|      movea.l 4(sp),a0
   1094a:	|      move.l (sp),d1
   1094c:	|      move.l 8(sp),d0
   10950:	|      move.l a0,-(sp)
   10952:	|      move.l d1,-(sp)
   10954:	|      move.l d0,-(sp)
   10956:	|      jsr d014 <setSoundLoop>
   1095c:	|      lea 12(sp),sp
	return BR_CONTINUE;
   10960:	|      moveq #2,d0
}
   10962:	\----> lea 12(sp),sp
   10966:	       rts

00010968 <builtIn_setFloor>:

#pragma mark -
#pragma mark Extra room bits

builtIn(setFloor)
{
   10968:	          subq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType == SVT_FILE) {
   1096a:	          movea.l 12(sp),a0
   1096e:	          movea.l 24(a0),a0
   10972:	          move.l (a0),d0
   10974:	          moveq #5,d1
   10976:	          cmp.l d0,d1
   10978:	/-------- bne.s 109bc <builtIn_setFloor+0x54>
		int v;
		getValueType(&v, SVT_FILE,&fun -> stack -> thisVar);
   1097a:	|         movea.l 12(sp),a0
   1097e:	|         move.l 24(a0),d0
   10982:	|         move.l d0,-(sp)
   10984:	|         pea 5 <_start+0x5>
   10988:	|         move.l sp,d0
   1098a:	|         addq.l #8,d0
   1098c:	|         move.l d0,-(sp)
   1098e:	|         jsr 145f0 <getValueType>
   10994:	|         lea 12(sp),sp
		trimStack (&fun -> stack);
   10998:	|         moveq #24,d0
   1099a:	|         add.l 12(sp),d0
   1099e:	|         move.l d0,-(sp)
   109a0:	|         jsr 14f74 <trimStack>
   109a6:	|         addq.l #4,sp
		if (! setFloor (v)) return BR_ERROR;
   109a8:	|         move.l (sp),d0
   109aa:	|         move.l d0,-(sp)
   109ac:	|         jsr 167e6 <setFloor>
   109b2:	|         addq.l #4,sp
   109b4:	|         tst.w d0
   109b6:	|  /----- bne.s 109d2 <builtIn_setFloor+0x6a>
   109b8:	|  |      moveq #1,d0
   109ba:	|  |  /-- bra.s 109d4 <builtIn_setFloor+0x6c>
	} else {
		trimStack (&fun -> stack);
   109bc:	\--|--|-> moveq #24,d0
   109be:	   |  |   add.l 12(sp),d0
   109c2:	   |  |   move.l d0,-(sp)
   109c4:	   |  |   jsr 14f74 <trimStack>
   109ca:	   |  |   addq.l #4,sp
		setFloorNull ();
   109cc:	   |  |   jsr 16f60 <setFloorNull>
	}
	return BR_CONTINUE;
   109d2:	   \--|-> moveq #2,d0
}
   109d4:	      \-> addq.l #4,sp
   109d6:	          rts

000109d8 <builtIn_showFloor>:

builtIn(showFloor)
{
	UNUSEDALL
	drawFloor ();
   109d8:	jsr 1607e <drawFloor>
	return BR_CONTINUE;
   109de:	moveq #2,d0
}
   109e0:	rts

000109e2 <builtIn_setZBuffer>:

builtIn(setZBuffer)
{
   109e2:	          subq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType == SVT_FILE) {
   109e4:	          movea.l 12(sp),a0
   109e8:	          movea.l 24(a0),a0
   109ec:	          move.l (a0),d0
   109ee:	          moveq #5,d1
   109f0:	          cmp.l d0,d1
   109f2:	/-------- bne.s 10a36 <builtIn_setZBuffer+0x54>
		int v;
		getValueType(&v, SVT_FILE,&fun -> stack -> thisVar);
   109f4:	|         movea.l 12(sp),a0
   109f8:	|         move.l 24(a0),d0
   109fc:	|         move.l d0,-(sp)
   109fe:	|         pea 5 <_start+0x5>
   10a02:	|         move.l sp,d0
   10a04:	|         addq.l #8,d0
   10a06:	|         move.l d0,-(sp)
   10a08:	|         jsr 145f0 <getValueType>
   10a0e:	|         lea 12(sp),sp
		trimStack (&fun -> stack);
   10a12:	|         moveq #24,d0
   10a14:	|         add.l 12(sp),d0
   10a18:	|         move.l d0,-(sp)
   10a1a:	|         jsr 14f74 <trimStack>
   10a20:	|         addq.l #4,sp
		if (! setZBuffer (v)) return BR_ERROR;
   10a22:	|         move.l (sp),d0
   10a24:	|         move.l d0,-(sp)
   10a26:	|         jsr 8524 <setZBuffer>
   10a2c:	|         addq.l #4,sp
   10a2e:	|         tst.w d0
   10a30:	|  /----- bne.s 10a4c <builtIn_setZBuffer+0x6a>
   10a32:	|  |      moveq #1,d0
   10a34:	|  |  /-- bra.s 10a4e <builtIn_setZBuffer+0x6c>
	} else {
		trimStack (&fun -> stack);
   10a36:	\--|--|-> moveq #24,d0
   10a38:	   |  |   add.l 12(sp),d0
   10a3c:	   |  |   move.l d0,-(sp)
   10a3e:	   |  |   jsr 14f74 <trimStack>
   10a44:	   |  |   addq.l #4,sp
		killZBuffer ();
   10a46:	   |  |   jsr 84d8 <killZBuffer>
	}
	return BR_CONTINUE;
   10a4c:	   \--|-> moveq #2,d0
}
   10a4e:	      \-> addq.l #4,sp
   10a50:	          rts

00010a52 <builtIn_setLightMap>:

		default:
			fatal ("Function should have either 2 or 3 parameters");
			return BR_ERROR;
	}*/
	KPrintF("Not implemented on Amiga");
   10a52:	pea 1985b <PutChar+0x1d7d>
   10a58:	jsr 1703c <KPrintF>
   10a5e:	addq.l #4,sp
	return BR_CONTINUE;
   10a60:	moveq #2,d0
}
   10a62:	rts

00010a64 <builtIn_setSpeechMode>:
#pragma mark Objects

builtIn(setSpeechMode)
{
	UNUSEDALL
	if (! getValueType(&speechMode, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10a64:	          movea.l 8(sp),a0
   10a68:	          move.l 24(a0),d0
   10a6c:	          move.l d0,-(sp)
   10a6e:	          pea 1 <_start+0x1>
   10a72:	          pea 1a872 <speechMode>
   10a78:	          jsr 145f0 <getValueType>
   10a7e:	          lea 12(sp),sp
   10a82:	          tst.w d0
   10a84:	      /-- bne.s 10a8a <builtIn_setSpeechMode+0x26>
   10a86:	      |   moveq #1,d0
   10a88:	/-----|-- bra.s 10ac2 <builtIn_setSpeechMode+0x5e>
	trimStack (&fun -> stack);
   10a8a:	|     \-> moveq #24,d0
   10a8c:	|         add.l 8(sp),d0
   10a90:	|         move.l d0,-(sp)
   10a92:	|         jsr 14f74 <trimStack>
   10a98:	|         addq.l #4,sp
	if (speechMode < 0 || speechMode > 2) {
   10a9a:	|         move.l 1a872 <speechMode>,d0
   10aa0:	|     /-- bmi.s 10aae <builtIn_setSpeechMode+0x4a>
   10aa2:	|     |   move.l 1a872 <speechMode>,d0
   10aa8:	|     |   moveq #2,d1
   10aaa:	|     |   cmp.l d0,d1
   10aac:	|  /--|-- bge.s 10ac0 <builtIn_setSpeechMode+0x5c>
		KPrintF ("Valid parameters are be SPEECHANDTEXT, SPEECHONLY or TEXTONLY");
   10aae:	|  |  \-> pea 19874 <PutChar+0x1d96>
   10ab4:	|  |      jsr 1703c <KPrintF>
   10aba:	|  |      addq.l #4,sp
		return BR_ERROR;
   10abc:	|  |      moveq #1,d0
   10abe:	+--|----- bra.s 10ac2 <builtIn_setSpeechMode+0x5e>
	}
	return BR_CONTINUE;
   10ac0:	|  \----> moveq #2,d0
}
   10ac2:	\-------> rts

00010ac4 <builtIn_somethingSpeaking>:

builtIn(somethingSpeaking)
{
   10ac4:	       subq.l #4,sp
	UNUSEDALL
	int i = isThereAnySpeechGoingOn ();
   10ac6:	       jsr 7ce0 <isThereAnySpeechGoingOn>
   10acc:	       move.l d0,(sp)
	if (i == -1) {
   10ace:	       moveq #-1,d0
   10ad0:	       cmp.l (sp),d0
   10ad2:	/----- bne.s 10aee <builtIn_somethingSpeaking+0x2a>
		setVariable (&fun -> reg, SVT_INT, 0);
   10ad4:	|      moveq #28,d0
   10ad6:	|      add.l 12(sp),d0
   10ada:	|      clr.l -(sp)
   10adc:	|      pea 1 <_start+0x1>
   10ae0:	|      move.l d0,-(sp)
   10ae2:	|      jsr 14ee2 <setVariable>
   10ae8:	|      lea 12(sp),sp
   10aec:	|  /-- bra.s 10b06 <builtIn_somethingSpeaking+0x42>
	} else {
		setVariable (&fun -> reg, SVT_OBJTYPE, i);
   10aee:	\--|-> moveq #28,d0
   10af0:	   |   add.l 12(sp),d0
   10af4:	   |   move.l (sp),-(sp)
   10af6:	   |   pea 7 <_start+0x7>
   10afa:	   |   move.l d0,-(sp)
   10afc:	   |   jsr 14ee2 <setVariable>
   10b02:	   |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   10b06:	   \-> moveq #2,d0
}
   10b08:	       addq.l #4,sp
   10b0a:	       rts

00010b0c <builtIn_skipSpeech>:

builtIn(skipSpeech)
{
	UNUSEDALL
	killSpeechTimers ();
   10b0c:	jsr 5fba <killSpeechTimers>
	return BR_CONTINUE;
   10b12:	moveq #2,d0
}
   10b14:	rts

00010b16 <builtIn_getOverObject>:

builtIn(getOverObject)
{
	UNUSEDALL
	if (overRegion)
   10b16:	       move.l 1a8b8 <overRegion>,d0
   10b1c:	/----- beq.s 10b46 <builtIn_getOverObject+0x30>
		// Return value
		setVariable (&fun -> reg, SVT_OBJTYPE, overRegion -> thisType -> objectNum);
   10b1e:	|      movea.l 1a8b8 <overRegion>,a0
   10b24:	|      movea.l 28(a0),a0
   10b28:	|      move.l 4(a0),d1
   10b2c:	|      moveq #28,d0
   10b2e:	|      add.l 8(sp),d0
   10b32:	|      move.l d1,-(sp)
   10b34:	|      pea 7 <_start+0x7>
   10b38:	|      move.l d0,-(sp)
   10b3a:	|      jsr 14ee2 <setVariable>
   10b40:	|      lea 12(sp),sp
   10b44:	|  /-- bra.s 10b5e <builtIn_getOverObject+0x48>
	else
		// Return value
		setVariable (&fun -> reg, SVT_INT, 0);
   10b46:	\--|-> moveq #28,d0
   10b48:	   |   add.l 8(sp),d0
   10b4c:	   |   clr.l -(sp)
   10b4e:	   |   pea 1 <_start+0x1>
   10b52:	   |   move.l d0,-(sp)
   10b54:	   |   jsr 14ee2 <setVariable>
   10b5a:	   |   lea 12(sp),sp
	return BR_CONTINUE;
   10b5e:	   \-> moveq #2,d0
}
   10b60:	       rts

00010b62 <builtIn_rename>:

builtIn(rename)
{
   10b62:	       lea -16(sp),sp
   10b66:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar(&(fun->stack->thisVar));
   10b68:	       movea.l 28(sp),a0
   10b6c:	       move.l 24(a0),d0
   10b70:	       move.l d0,-(sp)
   10b72:	       jsr 14bc6 <getTextFromAnyVar>
   10b78:	       addq.l #4,sp
   10b7a:	       move.l d0,16(sp)
	int objT;
	if (!newText) return BR_ERROR;
   10b7e:	   /-- bne.s 10b84 <builtIn_rename+0x22>
   10b80:	   |   moveq #1,d0
   10b82:	/--|-- bra.s 10bfe <builtIn_rename+0x9c>
	trimStack(&fun->stack);
   10b84:	|  \-> moveq #24,d0
   10b86:	|      add.l 28(sp),d0
   10b8a:	|      move.l d0,-(sp)
   10b8c:	|      jsr 14f74 <trimStack>
   10b92:	|      addq.l #4,sp
	if (!getValueType(&objT, SVT_OBJTYPE, &fun->stack->thisVar)) return BR_ERROR;
   10b94:	|      movea.l 28(sp),a0
   10b98:	|      move.l 24(a0),d0
   10b9c:	|      move.l d0,-(sp)
   10b9e:	|      pea 7 <_start+0x7>
   10ba2:	|      lea 12(sp),a0
   10ba6:	|      move.l a0,-(sp)
   10ba8:	|      jsr 145f0 <getValueType>
   10bae:	|      lea 12(sp),sp
   10bb2:	|      tst.w d0
   10bb4:	|  /-- bne.s 10bba <builtIn_rename+0x58>
   10bb6:	|  |   moveq #1,d0
   10bb8:	+--|-- bra.s 10bfe <builtIn_rename+0x9c>
	trimStack(&fun->stack);
   10bba:	|  \-> moveq #24,d0
   10bbc:	|      add.l 28(sp),d0
   10bc0:	|      move.l d0,-(sp)
   10bc2:	|      jsr 14f74 <trimStack>
   10bc8:	|      addq.l #4,sp
	struct objectType * o = findObjectType(objT);
   10bca:	|      move.l 4(sp),d0
   10bce:	|      move.l d0,-(sp)
   10bd0:	|      jsr d356 <findObjectType>
   10bd6:	|      addq.l #4,sp
   10bd8:	|      move.l d0,12(sp)
	FreeVec(o->screenName);
   10bdc:	|      movea.l 12(sp),a0
   10be0:	|      move.l (a0),8(sp)
   10be4:	|      move.l 1a7a4 <SysBase>,d0
   10bea:	|      movea.l d0,a6
   10bec:	|      movea.l 8(sp),a1
   10bf0:	|      jsr -690(a6)
	o->screenName = newText;
   10bf4:	|      movea.l 12(sp),a0
   10bf8:	|      move.l 16(sp),(a0)
	return BR_CONTINUE;
   10bfc:	|      moveq #2,d0
}
   10bfe:	\----> movea.l (sp)+,a6
   10c00:	       lea 16(sp),sp
   10c04:	       rts

00010c06 <builtIn_getObjectX>:

builtIn (getObjectX)
{
   10c06:	          lea -12(sp),sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10c0a:	          movea.l 20(sp),a0
   10c0e:	          move.l 24(a0),d0
   10c12:	          move.l d0,-(sp)
   10c14:	          pea 7 <_start+0x7>
   10c18:	          lea 8(sp),a0
   10c1c:	          move.l a0,-(sp)
   10c1e:	          jsr 145f0 <getValueType>
   10c24:	          lea 12(sp),sp
   10c28:	          tst.w d0
   10c2a:	      /-- bne.s 10c32 <builtIn_getObjectX+0x2c>
   10c2c:	      |   moveq #1,d0
   10c2e:	/-----|-- bra.w 10cce <builtIn_getObjectX+0xc8>
	trimStack (&fun -> stack);
   10c32:	|     \-> moveq #24,d0
   10c34:	|         add.l 20(sp),d0
   10c38:	|         move.l d0,-(sp)
   10c3a:	|         jsr 14f74 <trimStack>
   10c40:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   10c42:	|         move.l (sp),d0
   10c44:	|         move.l d0,-(sp)
   10c46:	|         jsr a454 <findPerson>
   10c4c:	|         addq.l #4,sp
   10c4e:	|         move.l d0,8(sp)
	if (pers) {
   10c52:	|     /-- beq.s 10c80 <builtIn_getObjectX+0x7a>
		setVariable (&fun -> reg, SVT_INT, pers -> x);
   10c54:	|     |   movea.l 8(sp),a0
   10c58:	|     |   move.l (a0),d0
   10c5a:	|     |   move.l d0,-(sp)
   10c5c:	|     |   jsr 17406 <__fixsfsi>
   10c62:	|     |   addq.l #4,sp
   10c64:	|     |   move.l d0,d1
   10c66:	|     |   moveq #28,d0
   10c68:	|     |   add.l 20(sp),d0
   10c6c:	|     |   move.l d1,-(sp)
   10c6e:	|     |   pea 1 <_start+0x1>
   10c72:	|     |   move.l d0,-(sp)
   10c74:	|     |   jsr 14ee2 <setVariable>
   10c7a:	|     |   lea 12(sp),sp
   10c7e:	|  /--|-- bra.s 10ccc <builtIn_getObjectX+0xc6>
	} else {
		struct screenRegion * la = getRegionForObject (objectNumber);
   10c80:	|  |  \-> move.l (sp),d0
   10c82:	|  |      move.l d0,-(sp)
   10c84:	|  |      jsr 1583a <getRegionForObject>
   10c8a:	|  |      addq.l #4,sp
   10c8c:	|  |      move.l d0,4(sp)
		if (la) {
   10c90:	|  |  /-- beq.s 10cb4 <builtIn_getObjectX+0xae>
			setVariable (&fun -> reg, SVT_INT, la -> sX);
   10c92:	|  |  |   movea.l 4(sp),a0
   10c96:	|  |  |   move.l 16(a0),d1
   10c9a:	|  |  |   moveq #28,d0
   10c9c:	|  |  |   add.l 20(sp),d0
   10ca0:	|  |  |   move.l d1,-(sp)
   10ca2:	|  |  |   pea 1 <_start+0x1>
   10ca6:	|  |  |   move.l d0,-(sp)
   10ca8:	|  |  |   jsr 14ee2 <setVariable>
   10cae:	|  |  |   lea 12(sp),sp
   10cb2:	|  +--|-- bra.s 10ccc <builtIn_getObjectX+0xc6>
		} else {
			setVariable (&fun -> reg, SVT_INT, 0);
   10cb4:	|  |  \-> moveq #28,d0
   10cb6:	|  |      add.l 20(sp),d0
   10cba:	|  |      clr.l -(sp)
   10cbc:	|  |      pea 1 <_start+0x1>
   10cc0:	|  |      move.l d0,-(sp)
   10cc2:	|  |      jsr 14ee2 <setVariable>
   10cc8:	|  |      lea 12(sp),sp
		}
	}
	return BR_CONTINUE;
   10ccc:	|  \----> moveq #2,d0
}
   10cce:	\-------> lea 12(sp),sp
   10cd2:	          rts

00010cd4 <builtIn_getObjectY>:

builtIn (getObjectY)
{
   10cd4:	          lea -12(sp),sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10cd8:	          movea.l 20(sp),a0
   10cdc:	          move.l 24(a0),d0
   10ce0:	          move.l d0,-(sp)
   10ce2:	          pea 7 <_start+0x7>
   10ce6:	          lea 8(sp),a0
   10cea:	          move.l a0,-(sp)
   10cec:	          jsr 145f0 <getValueType>
   10cf2:	          lea 12(sp),sp
   10cf6:	          tst.w d0
   10cf8:	      /-- bne.s 10d00 <builtIn_getObjectY+0x2c>
   10cfa:	      |   moveq #1,d0
   10cfc:	/-----|-- bra.w 10d9e <builtIn_getObjectY+0xca>
	trimStack (&fun -> stack);
   10d00:	|     \-> moveq #24,d0
   10d02:	|         add.l 20(sp),d0
   10d06:	|         move.l d0,-(sp)
   10d08:	|         jsr 14f74 <trimStack>
   10d0e:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   10d10:	|         move.l (sp),d0
   10d12:	|         move.l d0,-(sp)
   10d14:	|         jsr a454 <findPerson>
   10d1a:	|         addq.l #4,sp
   10d1c:	|         move.l d0,8(sp)
	if (pers) {
   10d20:	|     /-- beq.s 10d50 <builtIn_getObjectY+0x7c>
		setVariable (&fun -> reg, SVT_INT, pers -> y);
   10d22:	|     |   movea.l 8(sp),a0
   10d26:	|     |   move.l 4(a0),d0
   10d2a:	|     |   move.l d0,-(sp)
   10d2c:	|     |   jsr 17406 <__fixsfsi>
   10d32:	|     |   addq.l #4,sp
   10d34:	|     |   move.l d0,d1
   10d36:	|     |   moveq #28,d0
   10d38:	|     |   add.l 20(sp),d0
   10d3c:	|     |   move.l d1,-(sp)
   10d3e:	|     |   pea 1 <_start+0x1>
   10d42:	|     |   move.l d0,-(sp)
   10d44:	|     |   jsr 14ee2 <setVariable>
   10d4a:	|     |   lea 12(sp),sp
   10d4e:	|  /--|-- bra.s 10d9c <builtIn_getObjectY+0xc8>
	} else {
		struct screenRegion * la = getRegionForObject (objectNumber);
   10d50:	|  |  \-> move.l (sp),d0
   10d52:	|  |      move.l d0,-(sp)
   10d54:	|  |      jsr 1583a <getRegionForObject>
   10d5a:	|  |      addq.l #4,sp
   10d5c:	|  |      move.l d0,4(sp)
		if (la) {
   10d60:	|  |  /-- beq.s 10d84 <builtIn_getObjectY+0xb0>
			setVariable (&fun -> reg, SVT_INT, la -> sY);
   10d62:	|  |  |   movea.l 4(sp),a0
   10d66:	|  |  |   move.l 20(a0),d1
   10d6a:	|  |  |   moveq #28,d0
   10d6c:	|  |  |   add.l 20(sp),d0
   10d70:	|  |  |   move.l d1,-(sp)
   10d72:	|  |  |   pea 1 <_start+0x1>
   10d76:	|  |  |   move.l d0,-(sp)
   10d78:	|  |  |   jsr 14ee2 <setVariable>
   10d7e:	|  |  |   lea 12(sp),sp
   10d82:	|  +--|-- bra.s 10d9c <builtIn_getObjectY+0xc8>
		} else {
			setVariable (&fun -> reg, SVT_INT, 0);
   10d84:	|  |  \-> moveq #28,d0
   10d86:	|  |      add.l 20(sp),d0
   10d8a:	|  |      clr.l -(sp)
   10d8c:	|  |      pea 1 <_start+0x1>
   10d90:	|  |      move.l d0,-(sp)
   10d92:	|  |      jsr 14ee2 <setVariable>
   10d98:	|  |      lea 12(sp),sp
		}
	}
	return BR_CONTINUE;
   10d9c:	|  \----> moveq #2,d0
}
   10d9e:	\-------> lea 12(sp),sp
   10da2:	          rts

00010da4 <builtIn_addScreenRegion>:


builtIn(addScreenRegion)
{
   10da4:	       lea -32(sp),sp
   10da8:	       movem.l d2-d5,-(sp)
	UNUSEDALL
	int sX, sY, x1, y1, x2, y2, di, objectNumber;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10dac:	       movea.l 56(sp),a0
   10db0:	       move.l 24(a0),d0
   10db4:	       move.l d0,-(sp)
   10db6:	       pea 1 <_start+0x1>
   10dba:	       lea 28(sp),a0
   10dbe:	       move.l a0,-(sp)
   10dc0:	       jsr 145f0 <getValueType>
   10dc6:	       lea 12(sp),sp
   10dca:	       tst.w d0
   10dcc:	   /-- bne.s 10dd4 <builtIn_addScreenRegion+0x30>
   10dce:	   |   moveq #1,d0
   10dd0:	/--|-- bra.w 10fae <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   10dd4:	|  \-> moveq #24,d0
   10dd6:	|      add.l 56(sp),d0
   10dda:	|      move.l d0,-(sp)
   10ddc:	|      jsr 14f74 <trimStack>
   10de2:	|      addq.l #4,sp
	if (! getValueType(&sY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10de4:	|      movea.l 56(sp),a0
   10de8:	|      move.l 24(a0),d0
   10dec:	|      move.l d0,-(sp)
   10dee:	|      pea 1 <_start+0x1>
   10df2:	|      moveq #48,d0
   10df4:	|      add.l sp,d0
   10df6:	|      move.l d0,-(sp)
   10df8:	|      jsr 145f0 <getValueType>
   10dfe:	|      lea 12(sp),sp
   10e02:	|      tst.w d0
   10e04:	|  /-- bne.s 10e0c <builtIn_addScreenRegion+0x68>
   10e06:	|  |   moveq #1,d0
   10e08:	+--|-- bra.w 10fae <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   10e0c:	|  \-> moveq #24,d0
   10e0e:	|      add.l 56(sp),d0
   10e12:	|      move.l d0,-(sp)
   10e14:	|      jsr 14f74 <trimStack>
   10e1a:	|      addq.l #4,sp
	if (! getValueType(&sX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10e1c:	|      movea.l 56(sp),a0
   10e20:	|      move.l 24(a0),d0
   10e24:	|      move.l d0,-(sp)
   10e26:	|      pea 1 <_start+0x1>
   10e2a:	|      moveq #52,d0
   10e2c:	|      add.l sp,d0
   10e2e:	|      move.l d0,-(sp)
   10e30:	|      jsr 145f0 <getValueType>
   10e36:	|      lea 12(sp),sp
   10e3a:	|      tst.w d0
   10e3c:	|  /-- bne.s 10e44 <builtIn_addScreenRegion+0xa0>
   10e3e:	|  |   moveq #1,d0
   10e40:	+--|-- bra.w 10fae <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   10e44:	|  \-> moveq #24,d0
   10e46:	|      add.l 56(sp),d0
   10e4a:	|      move.l d0,-(sp)
   10e4c:	|      jsr 14f74 <trimStack>
   10e52:	|      addq.l #4,sp
	if (! getValueType(&y2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10e54:	|      movea.l 56(sp),a0
   10e58:	|      move.l 24(a0),d0
   10e5c:	|      move.l d0,-(sp)
   10e5e:	|      pea 1 <_start+0x1>
   10e62:	|      lea 32(sp),a0
   10e66:	|      move.l a0,-(sp)
   10e68:	|      jsr 145f0 <getValueType>
   10e6e:	|      lea 12(sp),sp
   10e72:	|      tst.w d0
   10e74:	|  /-- bne.s 10e7c <builtIn_addScreenRegion+0xd8>
   10e76:	|  |   moveq #1,d0
   10e78:	+--|-- bra.w 10fae <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   10e7c:	|  \-> moveq #24,d0
   10e7e:	|      add.l 56(sp),d0
   10e82:	|      move.l d0,-(sp)
   10e84:	|      jsr 14f74 <trimStack>
   10e8a:	|      addq.l #4,sp
	if (! getValueType(&x2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10e8c:	|      movea.l 56(sp),a0
   10e90:	|      move.l 24(a0),d0
   10e94:	|      move.l d0,-(sp)
   10e96:	|      pea 1 <_start+0x1>
   10e9a:	|      lea 36(sp),a0
   10e9e:	|      move.l a0,-(sp)
   10ea0:	|      jsr 145f0 <getValueType>
   10ea6:	|      lea 12(sp),sp
   10eaa:	|      tst.w d0
   10eac:	|  /-- bne.s 10eb4 <builtIn_addScreenRegion+0x110>
   10eae:	|  |   moveq #1,d0
   10eb0:	+--|-- bra.w 10fae <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   10eb4:	|  \-> moveq #24,d0
   10eb6:	|      add.l 56(sp),d0
   10eba:	|      move.l d0,-(sp)
   10ebc:	|      jsr 14f74 <trimStack>
   10ec2:	|      addq.l #4,sp
	if (! getValueType(&y1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10ec4:	|      movea.l 56(sp),a0
   10ec8:	|      move.l 24(a0),d0
   10ecc:	|      move.l d0,-(sp)
   10ece:	|      pea 1 <_start+0x1>
   10ed2:	|      lea 40(sp),a0
   10ed6:	|      move.l a0,-(sp)
   10ed8:	|      jsr 145f0 <getValueType>
   10ede:	|      lea 12(sp),sp
   10ee2:	|      tst.w d0
   10ee4:	|  /-- bne.s 10eec <builtIn_addScreenRegion+0x148>
   10ee6:	|  |   moveq #1,d0
   10ee8:	+--|-- bra.w 10fae <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   10eec:	|  \-> moveq #24,d0
   10eee:	|      add.l 56(sp),d0
   10ef2:	|      move.l d0,-(sp)
   10ef4:	|      jsr 14f74 <trimStack>
   10efa:	|      addq.l #4,sp
	if (! getValueType(&x1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10efc:	|      movea.l 56(sp),a0
   10f00:	|      move.l 24(a0),d0
   10f04:	|      move.l d0,-(sp)
   10f06:	|      pea 1 <_start+0x1>
   10f0a:	|      lea 44(sp),a0
   10f0e:	|      move.l a0,-(sp)
   10f10:	|      jsr 145f0 <getValueType>
   10f16:	|      lea 12(sp),sp
   10f1a:	|      tst.w d0
   10f1c:	|  /-- bne.s 10f24 <builtIn_addScreenRegion+0x180>
   10f1e:	|  |   moveq #1,d0
   10f20:	+--|-- bra.w 10fae <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   10f24:	|  \-> moveq #24,d0
   10f26:	|      add.l 56(sp),d0
   10f2a:	|      move.l d0,-(sp)
   10f2c:	|      jsr 14f74 <trimStack>
   10f32:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10f34:	|      movea.l 56(sp),a0
   10f38:	|      move.l 24(a0),d0
   10f3c:	|      move.l d0,-(sp)
   10f3e:	|      pea 7 <_start+0x7>
   10f42:	|      lea 24(sp),a0
   10f46:	|      move.l a0,-(sp)
   10f48:	|      jsr 145f0 <getValueType>
   10f4e:	|      lea 12(sp),sp
   10f52:	|      tst.w d0
   10f54:	|  /-- bne.s 10f5a <builtIn_addScreenRegion+0x1b6>
   10f56:	|  |   moveq #1,d0
   10f58:	+--|-- bra.s 10fae <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   10f5a:	|  \-> moveq #24,d0
   10f5c:	|      add.l 56(sp),d0
   10f60:	|      move.l d0,-(sp)
   10f62:	|      jsr 14f74 <trimStack>
   10f68:	|      addq.l #4,sp
	if (addScreenRegion (x1, y1, x2, y2, sX, sY, di, objectNumber)) return BR_CONTINUE;
   10f6a:	|      move.l 16(sp),d5
   10f6e:	|      move.l 20(sp),d4
   10f72:	|      move.l 40(sp),d3
   10f76:	|      move.l 44(sp),d2
   10f7a:	|      movea.l 24(sp),a1
   10f7e:	|      movea.l 28(sp),a0
   10f82:	|      move.l 32(sp),d1
   10f86:	|      move.l 36(sp),d0
   10f8a:	|      move.l d5,-(sp)
   10f8c:	|      move.l d4,-(sp)
   10f8e:	|      move.l d3,-(sp)
   10f90:	|      move.l d2,-(sp)
   10f92:	|      move.l a1,-(sp)
   10f94:	|      move.l a0,-(sp)
   10f96:	|      move.l d1,-(sp)
   10f98:	|      move.l d0,-(sp)
   10f9a:	|      jsr 156f4 <addScreenRegion>
   10fa0:	|      lea 32(sp),sp
   10fa4:	|      tst.w d0
   10fa6:	|  /-- beq.s 10fac <builtIn_addScreenRegion+0x208>
   10fa8:	|  |   moveq #2,d0
   10faa:	+--|-- bra.s 10fae <builtIn_addScreenRegion+0x20a>
	return BR_ERROR;
   10fac:	|  \-> moveq #1,d0

}
   10fae:	\----> movem.l (sp)+,d2-d5
   10fb2:	       lea 32(sp),sp
   10fb6:	       rts

00010fb8 <builtIn_removeScreenRegion>:

builtIn(removeScreenRegion)
{
   10fb8:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10fba:	       movea.l 12(sp),a0
   10fbe:	       move.l 24(a0),d0
   10fc2:	       move.l d0,-(sp)
   10fc4:	       pea 7 <_start+0x7>
   10fc8:	       move.l sp,d0
   10fca:	       addq.l #8,d0
   10fcc:	       move.l d0,-(sp)
   10fce:	       jsr 145f0 <getValueType>
   10fd4:	       lea 12(sp),sp
   10fd8:	       tst.w d0
   10fda:	   /-- bne.s 10fe0 <builtIn_removeScreenRegion+0x28>
   10fdc:	   |   moveq #1,d0
   10fde:	/--|-- bra.s 10ffe <builtIn_removeScreenRegion+0x46>
	trimStack (&fun -> stack);
   10fe0:	|  \-> moveq #24,d0
   10fe2:	|      add.l 12(sp),d0
   10fe6:	|      move.l d0,-(sp)
   10fe8:	|      jsr 14f74 <trimStack>
   10fee:	|      addq.l #4,sp
	removeScreenRegion (objectNumber);
   10ff0:	|      move.l (sp),d0
   10ff2:	|      move.l d0,-(sp)
   10ff4:	|      jsr 159e2 <removeScreenRegion>
   10ffa:	|      addq.l #4,sp
	return BR_CONTINUE;
   10ffc:	|      moveq #2,d0
}
   10ffe:	\----> addq.l #4,sp
   11000:	       rts

00011002 <builtIn_showBoxes>:

builtIn(showBoxes)
{
	UNUSEDALL
	showBoxes ();
   11002:	jsr 15b66 <showBoxes>
	return BR_CONTINUE;
   11008:	moveq #2,d0
}
   1100a:	rts

0001100c <builtIn_removeAllScreenRegions>:

builtIn(removeAllScreenRegions)
{
	UNUSEDALL
	killAllRegions ();
   1100c:	jsr 15868 <killAllRegions>
	return BR_CONTINUE;
   11012:	moveq #2,d0
}
   11014:	rts

00011016 <builtIn_addCharacter>:

builtIn(addCharacter)
{
   11016:	       lea -16(sp),sp
	UNUSEDALL
	struct persona * p;
	int x, y, objectNumber;

	p = getCostumeFromVar (&(fun -> stack -> thisVar));
   1101a:	       movea.l 24(sp),a0
   1101e:	       move.l 24(a0),d0
   11022:	       move.l d0,-(sp)
   11024:	       jsr 1429c <getCostumeFromVar>
   1102a:	       addq.l #4,sp
   1102c:	       move.l d0,12(sp)
	if (p == NULL) return BR_ERROR;
   11030:	   /-- bne.s 11038 <builtIn_addCharacter+0x22>
   11032:	   |   moveq #1,d0
   11034:	/--|-- bra.w 11114 <builtIn_addCharacter+0xfe>

	trimStack (&fun -> stack);
   11038:	|  \-> moveq #24,d0
   1103a:	|      add.l 24(sp),d0
   1103e:	|      move.l d0,-(sp)
   11040:	|      jsr 14f74 <trimStack>
   11046:	|      addq.l #4,sp
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11048:	|      movea.l 24(sp),a0
   1104c:	|      move.l 24(a0),d0
   11050:	|      move.l d0,-(sp)
   11052:	|      pea 1 <_start+0x1>
   11056:	|      lea 12(sp),a0
   1105a:	|      move.l a0,-(sp)
   1105c:	|      jsr 145f0 <getValueType>
   11062:	|      lea 12(sp),sp
   11066:	|      tst.w d0
   11068:	|  /-- bne.s 11070 <builtIn_addCharacter+0x5a>
   1106a:	|  |   moveq #1,d0
   1106c:	+--|-- bra.w 11114 <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
   11070:	|  \-> moveq #24,d0
   11072:	|      add.l 24(sp),d0
   11076:	|      move.l d0,-(sp)
   11078:	|      jsr 14f74 <trimStack>
   1107e:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11080:	|      movea.l 24(sp),a0
   11084:	|      move.l 24(a0),d0
   11088:	|      move.l d0,-(sp)
   1108a:	|      pea 1 <_start+0x1>
   1108e:	|      moveq #16,d0
   11090:	|      add.l sp,d0
   11092:	|      move.l d0,-(sp)
   11094:	|      jsr 145f0 <getValueType>
   1109a:	|      lea 12(sp),sp
   1109e:	|      tst.w d0
   110a0:	|  /-- bne.s 110a6 <builtIn_addCharacter+0x90>
   110a2:	|  |   moveq #1,d0
   110a4:	+--|-- bra.s 11114 <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
   110a6:	|  \-> moveq #24,d0
   110a8:	|      add.l 24(sp),d0
   110ac:	|      move.l d0,-(sp)
   110ae:	|      jsr 14f74 <trimStack>
   110b4:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   110b6:	|      movea.l 24(sp),a0
   110ba:	|      move.l 24(a0),d0
   110be:	|      move.l d0,-(sp)
   110c0:	|      pea 7 <_start+0x7>
   110c4:	|      lea 8(sp),a0
   110c8:	|      move.l a0,-(sp)
   110ca:	|      jsr 145f0 <getValueType>
   110d0:	|      lea 12(sp),sp
   110d4:	|      tst.w d0
   110d6:	|  /-- bne.s 110dc <builtIn_addCharacter+0xc6>
   110d8:	|  |   moveq #1,d0
   110da:	+--|-- bra.s 11114 <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
   110dc:	|  \-> moveq #24,d0
   110de:	|      add.l 24(sp),d0
   110e2:	|      move.l d0,-(sp)
   110e4:	|      jsr 14f74 <trimStack>
   110ea:	|      addq.l #4,sp
	if (addPerson (x, y, objectNumber, p)) return BR_CONTINUE;
   110ec:	|      movea.l (sp),a0
   110ee:	|      move.l 4(sp),d1
   110f2:	|      move.l 8(sp),d0
   110f6:	|      move.l 12(sp),-(sp)
   110fa:	|      move.l a0,-(sp)
   110fc:	|      move.l d1,-(sp)
   110fe:	|      move.l d0,-(sp)
   11100:	|      jsr 904e <addPerson>
   11106:	|      lea 16(sp),sp
   1110a:	|      tst.w d0
   1110c:	|  /-- beq.s 11112 <builtIn_addCharacter+0xfc>
   1110e:	|  |   moveq #2,d0
   11110:	+--|-- bra.s 11114 <builtIn_addCharacter+0xfe>
	return BR_ERROR;
   11112:	|  \-> moveq #1,d0
}
   11114:	\----> lea 16(sp),sp
   11118:	       rts

0001111a <builtIn_hideCharacter>:

builtIn(hideCharacter)
{
   1111a:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1111c:	       movea.l 12(sp),a0
   11120:	       move.l 24(a0),d0
   11124:	       move.l d0,-(sp)
   11126:	       pea 7 <_start+0x7>
   1112a:	       move.l sp,d0
   1112c:	       addq.l #8,d0
   1112e:	       move.l d0,-(sp)
   11130:	       jsr 145f0 <getValueType>
   11136:	       lea 12(sp),sp
   1113a:	       tst.w d0
   1113c:	   /-- bne.s 11142 <builtIn_hideCharacter+0x28>
   1113e:	   |   moveq #1,d0
   11140:	/--|-- bra.s 11162 <builtIn_hideCharacter+0x48>
	trimStack (&fun -> stack);
   11142:	|  \-> moveq #24,d0
   11144:	|      add.l 12(sp),d0
   11148:	|      move.l d0,-(sp)
   1114a:	|      jsr 14f74 <trimStack>
   11150:	|      addq.l #4,sp
	setShown (FALSE, objectNumber);
   11152:	|      move.l (sp),d0
   11154:	|      move.l d0,-(sp)
   11156:	|      clr.l -(sp)
   11158:	|      jsr ba88 <setShown>
   1115e:	|      addq.l #8,sp
	return BR_CONTINUE;
   11160:	|      moveq #2,d0
}
   11162:	\----> addq.l #4,sp
   11164:	       rts

00011166 <builtIn_showCharacter>:

builtIn(showCharacter)
{
   11166:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11168:	       movea.l 12(sp),a0
   1116c:	       move.l 24(a0),d0
   11170:	       move.l d0,-(sp)
   11172:	       pea 7 <_start+0x7>
   11176:	       move.l sp,d0
   11178:	       addq.l #8,d0
   1117a:	       move.l d0,-(sp)
   1117c:	       jsr 145f0 <getValueType>
   11182:	       lea 12(sp),sp
   11186:	       tst.w d0
   11188:	   /-- bne.s 1118e <builtIn_showCharacter+0x28>
   1118a:	   |   moveq #1,d0
   1118c:	/--|-- bra.s 111b0 <builtIn_showCharacter+0x4a>
	trimStack (&fun -> stack);
   1118e:	|  \-> moveq #24,d0
   11190:	|      add.l 12(sp),d0
   11194:	|      move.l d0,-(sp)
   11196:	|      jsr 14f74 <trimStack>
   1119c:	|      addq.l #4,sp
	setShown (TRUE, objectNumber);
   1119e:	|      move.l (sp),d0
   111a0:	|      move.l d0,-(sp)
   111a2:	|      pea 1 <_start+0x1>
   111a6:	|      jsr ba88 <setShown>
   111ac:	|      addq.l #8,sp
	return BR_CONTINUE;
   111ae:	|      moveq #2,d0
}
   111b0:	\----> addq.l #4,sp
   111b2:	       rts

000111b4 <builtIn_removeAllCharacters>:

builtIn(removeAllCharacters)
{
	UNUSEDALL
	killSpeechTimers ();
   111b4:	jsr 5fba <killSpeechTimers>
	killMostPeople ();
   111ba:	jsr a8c0 <killMostPeople>
	return BR_CONTINUE;
   111c0:	moveq #2,d0
}
   111c2:	rts

000111c4 <builtIn_setCharacterDrawMode>:

builtIn(setCharacterDrawMode)
{
   111c4:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   111c6:	       movea.l 16(sp),a0
   111ca:	       move.l 24(a0),d0
   111ce:	       move.l d0,-(sp)
   111d0:	       pea 1 <_start+0x1>
   111d4:	       move.l sp,d0
   111d6:	       addq.l #8,d0
   111d8:	       move.l d0,-(sp)
   111da:	       jsr 145f0 <getValueType>
   111e0:	       lea 12(sp),sp
   111e4:	       tst.w d0
   111e6:	   /-- bne.s 111ec <builtIn_setCharacterDrawMode+0x28>
   111e8:	   |   moveq #1,d0
   111ea:	/--|-- bra.s 11246 <builtIn_setCharacterDrawMode+0x82>
	trimStack (&fun -> stack);
   111ec:	|  \-> moveq #24,d0
   111ee:	|      add.l 16(sp),d0
   111f2:	|      move.l d0,-(sp)
   111f4:	|      jsr 14f74 <trimStack>
   111fa:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   111fc:	|      movea.l 16(sp),a0
   11200:	|      move.l 24(a0),d0
   11204:	|      move.l d0,-(sp)
   11206:	|      pea 7 <_start+0x7>
   1120a:	|      moveq #12,d0
   1120c:	|      add.l sp,d0
   1120e:	|      move.l d0,-(sp)
   11210:	|      jsr 145f0 <getValueType>
   11216:	|      lea 12(sp),sp
   1121a:	|      tst.w d0
   1121c:	|  /-- bne.s 11222 <builtIn_setCharacterDrawMode+0x5e>
   1121e:	|  |   moveq #1,d0
   11220:	+--|-- bra.s 11246 <builtIn_setCharacterDrawMode+0x82>
	trimStack (&fun -> stack);
   11222:	|  \-> moveq #24,d0
   11224:	|      add.l 16(sp),d0
   11228:	|      move.l d0,-(sp)
   1122a:	|      jsr 14f74 <trimStack>
   11230:	|      addq.l #4,sp
	setDrawMode (di, obj);
   11232:	|      move.l 4(sp),d1
   11236:	|      move.l (sp),d0
   11238:	|      move.l d1,-(sp)
   1123a:	|      move.l d0,-(sp)
   1123c:	|      jsr b3c6 <setDrawMode>
   11242:	|      addq.l #8,sp
	return BR_CONTINUE;
   11244:	|      moveq #2,d0
}
   11246:	\----> addq.l #8,sp
   11248:	       rts

0001124a <builtIn_setCharacterTransparency>:

builtIn(setCharacterTransparency)
{
	UNUSEDALL
	KPrintF("setCharacterTransparency: Not implemented on Amiga");
   1124a:	pea 198b2 <PutChar+0x1dd4>
   11250:	jsr 1703c <KPrintF>
   11256:	addq.l #4,sp
	return BR_CONTINUE;
   11258:	moveq #2,d0
}
   1125a:	rts

0001125c <builtIn_setCharacterColourise>:

builtIn(setCharacterColourise)
{
	UNUSEDALL
	KPrintF("setCharacterColourise: Currently not implemented on Amiga");
   1125c:	pea 198e5 <PutChar+0x1e07>
   11262:	jsr 1703c <KPrintF>
   11268:	addq.l #4,sp
	if (! getValueType(&r, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
	trimStack (&fun -> stack);
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
	trimStack (&fun -> stack);
	setPersonColourise (obj, r, g, b, mix);*/
	return BR_CONTINUE;
   1126a:	moveq #2,d0
}
   1126c:	rts

0001126e <builtIn_setScale>:

builtIn(setScale)
{
   1126e:	       subq.l #8,sp
	UNUSEDALL
	int val1, val2;
	if (! getValueType(&val2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11270:	       movea.l 16(sp),a0
   11274:	       move.l 24(a0),d0
   11278:	       move.l d0,-(sp)
   1127a:	       pea 1 <_start+0x1>
   1127e:	       move.l sp,d0
   11280:	       addq.l #8,d0
   11282:	       move.l d0,-(sp)
   11284:	       jsr 145f0 <getValueType>
   1128a:	       lea 12(sp),sp
   1128e:	       tst.w d0
   11290:	   /-- bne.s 11296 <builtIn_setScale+0x28>
   11292:	   |   moveq #1,d0
   11294:	/--|-- bra.s 112f8 <builtIn_setScale+0x8a>
	trimStack (&fun -> stack);
   11296:	|  \-> moveq #24,d0
   11298:	|      add.l 16(sp),d0
   1129c:	|      move.l d0,-(sp)
   1129e:	|      jsr 14f74 <trimStack>
   112a4:	|      addq.l #4,sp
	if (! getValueType(&val1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   112a6:	|      movea.l 16(sp),a0
   112aa:	|      move.l 24(a0),d0
   112ae:	|      move.l d0,-(sp)
   112b0:	|      pea 1 <_start+0x1>
   112b4:	|      moveq #12,d0
   112b6:	|      add.l sp,d0
   112b8:	|      move.l d0,-(sp)
   112ba:	|      jsr 145f0 <getValueType>
   112c0:	|      lea 12(sp),sp
   112c4:	|      tst.w d0
   112c6:	|  /-- bne.s 112cc <builtIn_setScale+0x5e>
   112c8:	|  |   moveq #1,d0
   112ca:	+--|-- bra.s 112f8 <builtIn_setScale+0x8a>
	trimStack (&fun -> stack);
   112cc:	|  \-> moveq #24,d0
   112ce:	|      add.l 16(sp),d0
   112d2:	|      move.l d0,-(sp)
   112d4:	|      jsr 14f74 <trimStack>
   112da:	|      addq.l #4,sp
	setScale ((short int) val1, (short int) val2);
   112dc:	|      move.l (sp),d0
   112de:	|      move.l d0,d0
   112e0:	|      movea.w d0,a1
   112e2:	|      move.l 4(sp),d0
   112e6:	|      move.l d0,d0
   112e8:	|      movea.w d0,a0
   112ea:	|      move.l a1,-(sp)
   112ec:	|      move.l a0,-(sp)
   112ee:	|      jsr ba60 <setScale>
   112f4:	|      addq.l #8,sp
	return BR_CONTINUE;
   112f6:	|      moveq #2,d0
}
   112f8:	\----> addq.l #8,sp
   112fa:	       rts

000112fc <builtIn_stopCharacter>:

builtIn(stopCharacter)
{
   112fc:	       subq.l #4,sp
	UNUSEDALL
	int obj;
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   112fe:	       movea.l 12(sp),a0
   11302:	       move.l 24(a0),d0
   11306:	       move.l d0,-(sp)
   11308:	       pea 7 <_start+0x7>
   1130c:	       move.l sp,d0
   1130e:	       addq.l #8,d0
   11310:	       move.l d0,-(sp)
   11312:	       jsr 145f0 <getValueType>
   11318:	       lea 12(sp),sp
   1131c:	       tst.w d0
   1131e:	   /-- bne.s 11324 <builtIn_stopCharacter+0x28>
   11320:	   |   moveq #1,d0
   11322:	/--|-- bra.s 1135c <builtIn_stopCharacter+0x60>
	trimStack (&fun -> stack);
   11324:	|  \-> moveq #24,d0
   11326:	|      add.l 12(sp),d0
   1132a:	|      move.l d0,-(sp)
   1132c:	|      jsr 14f74 <trimStack>
   11332:	|      addq.l #4,sp

	// Return value
	setVariable (&fun -> reg, SVT_INT, stopPerson (obj));
   11334:	|      move.l (sp),d0
   11336:	|      move.l d0,-(sp)
   11338:	|      jsr bb94 <stopPerson>
   1133e:	|      addq.l #4,sp
   11340:	|      movea.w d0,a0
   11342:	|      moveq #28,d0
   11344:	|      add.l 12(sp),d0
   11348:	|      move.l a0,-(sp)
   1134a:	|      pea 1 <_start+0x1>
   1134e:	|      move.l d0,-(sp)
   11350:	|      jsr 14ee2 <setVariable>
   11356:	|      lea 12(sp),sp
	return BR_CONTINUE;
   1135a:	|      moveq #2,d0
}
   1135c:	\----> addq.l #4,sp
   1135e:	       rts

00011360 <builtIn_pasteCharacter>:
		fixScaleSprite (thisPerson -> x, thisPerson -> y, myAnim -> theSprites -> bank.sprites[abs (fNum)], myAnim -> theSprites -> bank.myPalette, thisPerson, 0, 0, fNum < 0);
		setVariable (&fun -> reg, SVT_INT, 1);
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
	} Todo: Amigize this*/
	KPrintF("Not implemented yet for Amiga");
   11360:	pea 1991f <PutChar+0x1e41>
   11366:	jsr 1703c <KPrintF>
   1136c:	addq.l #4,sp
	return BR_CONTINUE;
   1136e:	moveq #2,d0
}
   11370:	rts

00011372 <builtIn_animate>:

builtIn(animate)
{
   11372:	       subq.l #8,sp
	UNUSEDALL
	int obj;
	struct personaAnimation * pp = getAnimationFromVar (&(fun -> stack -> thisVar));
   11374:	       movea.l 16(sp),a0
   11378:	       move.l 24(a0),d0
   1137c:	       move.l d0,-(sp)
   1137e:	       jsr 14ac8 <getAnimationFromVar>
   11384:	       addq.l #4,sp
   11386:	       move.l d0,4(sp)
	if (pp == NULL) return BR_ERROR;
   1138a:	   /-- bne.s 11390 <builtIn_animate+0x1e>
   1138c:	   |   moveq #1,d0
   1138e:	/--|-- bra.s 1140e <builtIn_animate+0x9c>
	trimStack (&fun -> stack);
   11390:	|  \-> moveq #24,d0
   11392:	|      add.l 16(sp),d0
   11396:	|      move.l d0,-(sp)
   11398:	|      jsr 14f74 <trimStack>
   1139e:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   113a0:	|      movea.l 16(sp),a0
   113a4:	|      move.l 24(a0),d0
   113a8:	|      move.l d0,-(sp)
   113aa:	|      pea 7 <_start+0x7>
   113ae:	|      move.l sp,d0
   113b0:	|      addq.l #8,d0
   113b2:	|      move.l d0,-(sp)
   113b4:	|      jsr 145f0 <getValueType>
   113ba:	|      lea 12(sp),sp
   113be:	|      tst.w d0
   113c0:	|  /-- bne.s 113c6 <builtIn_animate+0x54>
   113c2:	|  |   moveq #1,d0
   113c4:	+--|-- bra.s 1140e <builtIn_animate+0x9c>
	trimStack (&fun -> stack);
   113c6:	|  \-> moveq #24,d0
   113c8:	|      add.l 16(sp),d0
   113cc:	|      move.l d0,-(sp)
   113ce:	|      jsr 14f74 <trimStack>
   113d4:	|      addq.l #4,sp
	animatePerson (obj, pp);
   113d6:	|      move.l (sp),d0
   113d8:	|      move.l 4(sp),-(sp)
   113dc:	|      move.l d0,-(sp)
   113de:	|      jsr 92c4 <animatePerson>
   113e4:	|      addq.l #8,sp
	setVariable (&fun -> reg, SVT_INT, timeForAnim (pp));
   113e6:	|      move.l 4(sp),-(sp)
   113ea:	|      jsr bbe8 <timeForAnim>
   113f0:	|      addq.l #4,sp
   113f2:	|      move.l d0,d1
   113f4:	|      moveq #28,d0
   113f6:	|      add.l 16(sp),d0
   113fa:	|      move.l d1,-(sp)
   113fc:	|      pea 1 <_start+0x1>
   11400:	|      move.l d0,-(sp)
   11402:	|      jsr 14ee2 <setVariable>
   11408:	|      lea 12(sp),sp
	return BR_CONTINUE;
   1140c:	|      moveq #2,d0
}
   1140e:	\----> addq.l #8,sp
   11410:	       rts

00011412 <builtIn_setCostume>:

builtIn(setCostume)
{
   11412:	       subq.l #8,sp
	UNUSEDALL
	int obj;
	struct persona * pp = getCostumeFromVar(&(fun -> stack -> thisVar));
   11414:	       movea.l 16(sp),a0
   11418:	       move.l 24(a0),d0
   1141c:	       move.l d0,-(sp)
   1141e:	       jsr 1429c <getCostumeFromVar>
   11424:	       addq.l #4,sp
   11426:	       move.l d0,4(sp)
	if (pp == NULL) return BR_ERROR;
   1142a:	   /-- bne.s 11430 <builtIn_setCostume+0x1e>
   1142c:	   |   moveq #1,d0
   1142e:	/--|-- bra.s 11488 <builtIn_setCostume+0x76>
	trimStack (&fun -> stack);
   11430:	|  \-> moveq #24,d0
   11432:	|      add.l 16(sp),d0
   11436:	|      move.l d0,-(sp)
   11438:	|      jsr 14f74 <trimStack>
   1143e:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11440:	|      movea.l 16(sp),a0
   11444:	|      move.l 24(a0),d0
   11448:	|      move.l d0,-(sp)
   1144a:	|      pea 7 <_start+0x7>
   1144e:	|      move.l sp,d0
   11450:	|      addq.l #8,d0
   11452:	|      move.l d0,-(sp)
   11454:	|      jsr 145f0 <getValueType>
   1145a:	|      lea 12(sp),sp
   1145e:	|      tst.w d0
   11460:	|  /-- bne.s 11466 <builtIn_setCostume+0x54>
   11462:	|  |   moveq #1,d0
   11464:	+--|-- bra.s 11488 <builtIn_setCostume+0x76>
	trimStack (&fun -> stack);
   11466:	|  \-> moveq #24,d0
   11468:	|      add.l 16(sp),d0
   1146c:	|      move.l d0,-(sp)
   1146e:	|      jsr 14f74 <trimStack>
   11474:	|      addq.l #4,sp
	animatePersonUsingPersona(obj, pp);
   11476:	|      move.l (sp),d0
   11478:	|      move.l 4(sp),-(sp)
   1147c:	|      move.l d0,-(sp)
   1147e:	|      jsr 930e <animatePersonUsingPersona>
   11484:	|      addq.l #8,sp
	return BR_CONTINUE;
   11486:	|      moveq #2,d0
}
   11488:	\----> addq.l #8,sp
   1148a:	       rts

0001148c <builtIn_floatCharacter>:

builtIn(floatCharacter)
{
   1148c:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1148e:	       movea.l 16(sp),a0
   11492:	       move.l 24(a0),d0
   11496:	       move.l d0,-(sp)
   11498:	       pea 1 <_start+0x1>
   1149c:	       move.l sp,d0
   1149e:	       addq.l #8,d0
   114a0:	       move.l d0,-(sp)
   114a2:	       jsr 145f0 <getValueType>
   114a8:	       lea 12(sp),sp
   114ac:	       tst.w d0
   114ae:	   /-- bne.s 114b4 <builtIn_floatCharacter+0x28>
   114b0:	   |   moveq #1,d0
   114b2:	/--|-- bra.s 11528 <builtIn_floatCharacter+0x9c>
	trimStack (&fun -> stack);
   114b4:	|  \-> moveq #24,d0
   114b6:	|      add.l 16(sp),d0
   114ba:	|      move.l d0,-(sp)
   114bc:	|      jsr 14f74 <trimStack>
   114c2:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   114c4:	|      movea.l 16(sp),a0
   114c8:	|      move.l 24(a0),d0
   114cc:	|      move.l d0,-(sp)
   114ce:	|      pea 7 <_start+0x7>
   114d2:	|      moveq #12,d0
   114d4:	|      add.l sp,d0
   114d6:	|      move.l d0,-(sp)
   114d8:	|      jsr 145f0 <getValueType>
   114de:	|      lea 12(sp),sp
   114e2:	|      tst.w d0
   114e4:	|  /-- bne.s 114ea <builtIn_floatCharacter+0x5e>
   114e6:	|  |   moveq #1,d0
   114e8:	+--|-- bra.s 11528 <builtIn_floatCharacter+0x9c>
	trimStack (&fun -> stack);
   114ea:	|  \-> moveq #24,d0
   114ec:	|      add.l 16(sp),d0
   114f0:	|      move.l d0,-(sp)
   114f2:	|      jsr 14f74 <trimStack>
   114f8:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, floatCharacter (di, obj));
   114fa:	|      move.l 4(sp),d1
   114fe:	|      move.l (sp),d0
   11500:	|      move.l d1,-(sp)
   11502:	|      move.l d0,-(sp)
   11504:	|      jsr a482 <floatCharacter>
   1150a:	|      addq.l #8,sp
   1150c:	|      movea.w d0,a0
   1150e:	|      moveq #28,d0
   11510:	|      add.l 16(sp),d0
   11514:	|      move.l a0,-(sp)
   11516:	|      pea 1 <_start+0x1>
   1151a:	|      move.l d0,-(sp)
   1151c:	|      jsr 14ee2 <setVariable>
   11522:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11526:	|      moveq #2,d0
}
   11528:	\----> addq.l #8,sp
   1152a:	       rts

0001152c <builtIn_setCharacterWalkSpeed>:

builtIn(setCharacterWalkSpeed)
{
   1152c:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1152e:	       movea.l 16(sp),a0
   11532:	       move.l 24(a0),d0
   11536:	       move.l d0,-(sp)
   11538:	       pea 1 <_start+0x1>
   1153c:	       move.l sp,d0
   1153e:	       addq.l #8,d0
   11540:	       move.l d0,-(sp)
   11542:	       jsr 145f0 <getValueType>
   11548:	       lea 12(sp),sp
   1154c:	       tst.w d0
   1154e:	   /-- bne.s 11554 <builtIn_setCharacterWalkSpeed+0x28>
   11550:	   |   moveq #1,d0
   11552:	/--|-- bra.s 115c8 <builtIn_setCharacterWalkSpeed+0x9c>
	trimStack (&fun -> stack);
   11554:	|  \-> moveq #24,d0
   11556:	|      add.l 16(sp),d0
   1155a:	|      move.l d0,-(sp)
   1155c:	|      jsr 14f74 <trimStack>
   11562:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11564:	|      movea.l 16(sp),a0
   11568:	|      move.l 24(a0),d0
   1156c:	|      move.l d0,-(sp)
   1156e:	|      pea 7 <_start+0x7>
   11572:	|      moveq #12,d0
   11574:	|      add.l sp,d0
   11576:	|      move.l d0,-(sp)
   11578:	|      jsr 145f0 <getValueType>
   1157e:	|      lea 12(sp),sp
   11582:	|      tst.w d0
   11584:	|  /-- bne.s 1158a <builtIn_setCharacterWalkSpeed+0x5e>
   11586:	|  |   moveq #1,d0
   11588:	+--|-- bra.s 115c8 <builtIn_setCharacterWalkSpeed+0x9c>
	trimStack (&fun -> stack);
   1158a:	|  \-> moveq #24,d0
   1158c:	|      add.l 16(sp),d0
   11590:	|      move.l d0,-(sp)
   11592:	|      jsr 14f74 <trimStack>
   11598:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, setCharacterWalkSpeed (di, obj));
   1159a:	|      move.l 4(sp),d1
   1159e:	|      move.l (sp),d0
   115a0:	|      move.l d1,-(sp)
   115a2:	|      move.l d0,-(sp)
   115a4:	|      jsr b9fc <setCharacterWalkSpeed>
   115aa:	|      addq.l #8,sp
   115ac:	|      movea.w d0,a0
   115ae:	|      moveq #28,d0
   115b0:	|      add.l 16(sp),d0
   115b4:	|      move.l a0,-(sp)
   115b6:	|      pea 1 <_start+0x1>
   115ba:	|      move.l d0,-(sp)
   115bc:	|      jsr 14ee2 <setVariable>
   115c2:	|      lea 12(sp),sp
	return BR_CONTINUE;
   115c6:	|      moveq #2,d0
}
   115c8:	\----> addq.l #8,sp
   115ca:	       rts

000115cc <builtIn_turnCharacter>:

builtIn(turnCharacter)
{
   115cc:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   115ce:	       movea.l 16(sp),a0
   115d2:	       move.l 24(a0),d0
   115d6:	       move.l d0,-(sp)
   115d8:	       pea 1 <_start+0x1>
   115dc:	       move.l sp,d0
   115de:	       addq.l #8,d0
   115e0:	       move.l d0,-(sp)
   115e2:	       jsr 145f0 <getValueType>
   115e8:	       lea 12(sp),sp
   115ec:	       tst.w d0
   115ee:	   /-- bne.s 115f4 <builtIn_turnCharacter+0x28>
   115f0:	   |   moveq #1,d0
   115f2:	/--|-- bra.s 11668 <builtIn_turnCharacter+0x9c>
	trimStack (&fun -> stack);
   115f4:	|  \-> moveq #24,d0
   115f6:	|      add.l 16(sp),d0
   115fa:	|      move.l d0,-(sp)
   115fc:	|      jsr 14f74 <trimStack>
   11602:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11604:	|      movea.l 16(sp),a0
   11608:	|      move.l 24(a0),d0
   1160c:	|      move.l d0,-(sp)
   1160e:	|      pea 7 <_start+0x7>
   11612:	|      moveq #12,d0
   11614:	|      add.l sp,d0
   11616:	|      move.l d0,-(sp)
   11618:	|      jsr 145f0 <getValueType>
   1161e:	|      lea 12(sp),sp
   11622:	|      tst.w d0
   11624:	|  /-- bne.s 1162a <builtIn_turnCharacter+0x5e>
   11626:	|  |   moveq #1,d0
   11628:	+--|-- bra.s 11668 <builtIn_turnCharacter+0x9c>
	trimStack (&fun -> stack);
   1162a:	|  \-> moveq #24,d0
   1162c:	|      add.l 16(sp),d0
   11630:	|      move.l d0,-(sp)
   11632:	|      jsr 14f74 <trimStack>
   11638:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, turnPersonToFace (obj, di));
   1163a:	|      move.l (sp),d1
   1163c:	|      move.l 4(sp),d0
   11640:	|      move.l d1,-(sp)
   11642:	|      move.l d0,-(sp)
   11644:	|      jsr bca0 <turnPersonToFace>
   1164a:	|      addq.l #8,sp
   1164c:	|      movea.w d0,a0
   1164e:	|      moveq #28,d0
   11650:	|      add.l 16(sp),d0
   11654:	|      move.l a0,-(sp)
   11656:	|      pea 1 <_start+0x1>
   1165a:	|      move.l d0,-(sp)
   1165c:	|      jsr 14ee2 <setVariable>
   11662:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11666:	|      moveq #2,d0
}
   11668:	\----> addq.l #8,sp
   1166a:	       rts

0001166c <builtIn_setCharacterExtra>:

builtIn(setCharacterExtra)
{
   1166c:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1166e:	       movea.l 16(sp),a0
   11672:	       move.l 24(a0),d0
   11676:	       move.l d0,-(sp)
   11678:	       pea 1 <_start+0x1>
   1167c:	       move.l sp,d0
   1167e:	       addq.l #8,d0
   11680:	       move.l d0,-(sp)
   11682:	       jsr 145f0 <getValueType>
   11688:	       lea 12(sp),sp
   1168c:	       tst.w d0
   1168e:	   /-- bne.s 11694 <builtIn_setCharacterExtra+0x28>
   11690:	   |   moveq #1,d0
   11692:	/--|-- bra.s 11708 <builtIn_setCharacterExtra+0x9c>
	trimStack (&fun -> stack);
   11694:	|  \-> moveq #24,d0
   11696:	|      add.l 16(sp),d0
   1169a:	|      move.l d0,-(sp)
   1169c:	|      jsr 14f74 <trimStack>
   116a2:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   116a4:	|      movea.l 16(sp),a0
   116a8:	|      move.l 24(a0),d0
   116ac:	|      move.l d0,-(sp)
   116ae:	|      pea 7 <_start+0x7>
   116b2:	|      moveq #12,d0
   116b4:	|      add.l sp,d0
   116b6:	|      move.l d0,-(sp)
   116b8:	|      jsr 145f0 <getValueType>
   116be:	|      lea 12(sp),sp
   116c2:	|      tst.w d0
   116c4:	|  /-- bne.s 116ca <builtIn_setCharacterExtra+0x5e>
   116c6:	|  |   moveq #1,d0
   116c8:	+--|-- bra.s 11708 <builtIn_setCharacterExtra+0x9c>
	trimStack (&fun -> stack);
   116ca:	|  \-> moveq #24,d0
   116cc:	|      add.l 16(sp),d0
   116d0:	|      move.l d0,-(sp)
   116d2:	|      jsr 14f74 <trimStack>
   116d8:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, setPersonExtra (obj, di));
   116da:	|      move.l (sp),d1
   116dc:	|      move.l 4(sp),d0
   116e0:	|      move.l d1,-(sp)
   116e2:	|      move.l d0,-(sp)
   116e4:	|      jsr ba2a <setPersonExtra>
   116ea:	|      addq.l #8,sp
   116ec:	|      movea.w d0,a0
   116ee:	|      moveq #28,d0
   116f0:	|      add.l 16(sp),d0
   116f4:	|      move.l a0,-(sp)
   116f6:	|      pea 1 <_start+0x1>
   116fa:	|      move.l d0,-(sp)
   116fc:	|      jsr 14ee2 <setVariable>
   11702:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11706:	|      moveq #2,d0
}
   11708:	\----> addq.l #8,sp
   1170a:	       rts

0001170c <builtIn_removeCharacter>:

builtIn(removeCharacter)
{	
   1170c:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1170e:	       movea.l 12(sp),a0
   11712:	       move.l 24(a0),d0
   11716:	       move.l d0,-(sp)
   11718:	       pea 7 <_start+0x7>
   1171c:	       move.l sp,d0
   1171e:	       addq.l #8,d0
   11720:	       move.l d0,-(sp)
   11722:	       jsr 145f0 <getValueType>
   11728:	       lea 12(sp),sp
   1172c:	       tst.w d0
   1172e:	   /-- bne.s 11734 <builtIn_removeCharacter+0x28>
   11730:	   |   moveq #1,d0
   11732:	/--|-- bra.s 11752 <builtIn_removeCharacter+0x46>
	trimStack (&fun -> stack);
   11734:	|  \-> moveq #24,d0
   11736:	|      add.l 12(sp),d0
   1173a:	|      move.l d0,-(sp)
   1173c:	|      jsr 14f74 <trimStack>
   11742:	|      addq.l #4,sp
	removeOneCharacter (objectNumber);
   11744:	|      move.l (sp),d0
   11746:	|      move.l d0,-(sp)
   11748:	|      jsr ac2a <removeOneCharacter>
   1174e:	|      addq.l #4,sp
	return BR_CONTINUE;
   11750:	|      moveq #2,d0
}
   11752:	\----> addq.l #4,sp
   11754:	       rts

00011756 <moveChr>:

static enum builtReturn moveChr(int numParams, struct loadedFunction * fun, BOOL force, BOOL immediate)
{
   11756:	                lea -28(sp),sp
   1175a:	                move.l d2,-(sp)
   1175c:	                move.l 44(sp),d1
   11760:	                move.l 48(sp),d0
   11764:	                move.w d1,d1
   11766:	                move.w d1,6(sp)
   1176a:	                move.w d0,d0
   1176c:	                move.w d0,4(sp)
	switch (numParams) {
   11770:	                moveq #2,d0
   11772:	                cmp.l 36(sp),d0
   11776:	      /-------- beq.w 118b8 <moveChr+0x162>
   1177a:	      |         moveq #3,d0
   1177c:	      |         cmp.l 36(sp),d0
   11780:	/-----|-------- bne.w 119ec <moveChr+0x296>
		case 3:
		{
			int x, y, objectNumber;

			if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11784:	|     |         movea.l 40(sp),a0
   11788:	|     |         move.l 24(a0),d0
   1178c:	|     |         move.l d0,-(sp)
   1178e:	|     |         pea 1 <_start+0x1>
   11792:	|     |         lea 20(sp),a0
   11796:	|     |         move.l a0,-(sp)
   11798:	|     |         jsr 145f0 <getValueType>
   1179e:	|     |         lea 12(sp),sp
   117a2:	|     |         tst.w d0
   117a4:	|     |     /-- bne.s 117ac <moveChr+0x56>
   117a6:	|     |     |   moveq #1,d0
   117a8:	|  /--|-----|-- bra.w 119fc <moveChr+0x2a6>
			trimStack (&fun -> stack);
   117ac:	|  |  |     \-> moveq #24,d0
   117ae:	|  |  |         add.l 40(sp),d0
   117b2:	|  |  |         move.l d0,-(sp)
   117b4:	|  |  |         jsr 14f74 <trimStack>
   117ba:	|  |  |         addq.l #4,sp
			if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   117bc:	|  |  |         movea.l 40(sp),a0
   117c0:	|  |  |         move.l 24(a0),d0
   117c4:	|  |  |         move.l d0,-(sp)
   117c6:	|  |  |         pea 1 <_start+0x1>
   117ca:	|  |  |         lea 24(sp),a0
   117ce:	|  |  |         move.l a0,-(sp)
   117d0:	|  |  |         jsr 145f0 <getValueType>
   117d6:	|  |  |         lea 12(sp),sp
   117da:	|  |  |         tst.w d0
   117dc:	|  |  |     /-- bne.s 117e4 <moveChr+0x8e>
   117de:	|  |  |     |   moveq #1,d0
   117e0:	|  +--|-----|-- bra.w 119fc <moveChr+0x2a6>
			trimStack (&fun -> stack);
   117e4:	|  |  |     \-> moveq #24,d0
   117e6:	|  |  |         add.l 40(sp),d0
   117ea:	|  |  |         move.l d0,-(sp)
   117ec:	|  |  |         jsr 14f74 <trimStack>
   117f2:	|  |  |         addq.l #4,sp
			if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   117f4:	|  |  |         movea.l 40(sp),a0
   117f8:	|  |  |         move.l 24(a0),d0
   117fc:	|  |  |         move.l d0,-(sp)
   117fe:	|  |  |         pea 7 <_start+0x7>
   11802:	|  |  |         lea 16(sp),a0
   11806:	|  |  |         move.l a0,-(sp)
   11808:	|  |  |         jsr 145f0 <getValueType>
   1180e:	|  |  |         lea 12(sp),sp
   11812:	|  |  |         tst.w d0
   11814:	|  |  |     /-- bne.s 1181c <moveChr+0xc6>
   11816:	|  |  |     |   moveq #1,d0
   11818:	|  +--|-----|-- bra.w 119fc <moveChr+0x2a6>
			trimStack (&fun -> stack);
   1181c:	|  |  |     \-> moveq #24,d0
   1181e:	|  |  |         add.l 40(sp),d0
   11822:	|  |  |         move.l d0,-(sp)
   11824:	|  |  |         jsr 14f74 <trimStack>
   1182a:	|  |  |         addq.l #4,sp

			if (force) {
   1182c:	|  |  |         tst.w 6(sp)
   11830:	|  |  |     /-- beq.s 11860 <moveChr+0x10a>
				if (forceWalkingPerson (x, y, objectNumber, fun, -1)) return BR_PAUSE;
   11832:	|  |  |     |   movea.l 8(sp),a0
   11836:	|  |  |     |   move.l 12(sp),d1
   1183a:	|  |  |     |   move.l 16(sp),d0
   1183e:	|  |  |     |   pea ffffffff <gcc8_c_support.c.1fed348d+0xfffb4d41>
   11842:	|  |  |     |   move.l 44(sp),-(sp)
   11846:	|  |  |     |   move.l a0,-(sp)
   11848:	|  |  |     |   move.l d1,-(sp)
   1184a:	|  |  |     |   move.l d0,-(sp)
   1184c:	|  |  |     |   jsr a4a6 <forceWalkingPerson>
   11852:	|  |  |     |   lea 20(sp),sp
   11856:	|  |  |     |   tst.w d0
   11858:	|  |  |  /--|-- beq.s 118b2 <moveChr+0x15c>
   1185a:	|  |  |  |  |   moveq #3,d0
   1185c:	|  +--|--|--|-- bra.w 119fc <moveChr+0x2a6>
			} else if (immediate) {
   11860:	|  |  |  |  \-> tst.w 4(sp)
   11864:	|  |  |  |  /-- beq.s 11884 <moveChr+0x12e>
				jumpPerson (x, y, objectNumber);
   11866:	|  |  |  |  |   movea.l 8(sp),a0
   1186a:	|  |  |  |  |   move.l 12(sp),d1
   1186e:	|  |  |  |  |   move.l 16(sp),d0
   11872:	|  |  |  |  |   move.l a0,-(sp)
   11874:	|  |  |  |  |   move.l d1,-(sp)
   11876:	|  |  |  |  |   move.l d0,-(sp)
   11878:	|  |  |  |  |   jsr a7ae <jumpPerson>
   1187e:	|  |  |  |  |   lea 12(sp),sp
   11882:	|  |  |  +--|-- bra.s 118b2 <moveChr+0x15c>
			} else {
				if (makeWalkingPerson (x, y, objectNumber, fun, -1)) return BR_PAUSE;
   11884:	|  |  |  |  \-> movea.l 8(sp),a0
   11888:	|  |  |  |      move.l 12(sp),d1
   1188c:	|  |  |  |      move.l 16(sp),d0
   11890:	|  |  |  |      pea ffffffff <gcc8_c_support.c.1fed348d+0xfffb4d41>
   11894:	|  |  |  |      move.l 44(sp),-(sp)
   11898:	|  |  |  |      move.l a0,-(sp)
   1189a:	|  |  |  |      move.l d1,-(sp)
   1189c:	|  |  |  |      move.l d0,-(sp)
   1189e:	|  |  |  |      jsr a97e <makeWalkingPerson>
   118a4:	|  |  |  |      lea 20(sp),sp
   118a8:	|  |  |  |      tst.w d0
   118aa:	|  |  |  +----- beq.s 118b2 <moveChr+0x15c>
   118ac:	|  |  |  |      moveq #3,d0
   118ae:	|  +--|--|----- bra.w 119fc <moveChr+0x2a6>
			}
			return BR_CONTINUE;
   118b2:	|  |  |  \----> moveq #2,d0
   118b4:	|  +--|-------- bra.w 119fc <moveChr+0x2a6>
		case 2:
		{
			int toObj, objectNumber;
			struct screenRegion * reggie;

			if (! getValueType(&toObj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   118b8:	|  |  \-------> movea.l 40(sp),a0
   118bc:	|  |            move.l 24(a0),d0
   118c0:	|  |            move.l d0,-(sp)
   118c2:	|  |            pea 7 <_start+0x7>
   118c6:	|  |            moveq #32,d0
   118c8:	|  |            add.l sp,d0
   118ca:	|  |            move.l d0,-(sp)
   118cc:	|  |            jsr 145f0 <getValueType>
   118d2:	|  |            lea 12(sp),sp
   118d6:	|  |            tst.w d0
   118d8:	|  |        /-- bne.s 118e0 <moveChr+0x18a>
   118da:	|  |        |   moveq #1,d0
   118dc:	|  +--------|-- bra.w 119fc <moveChr+0x2a6>
			trimStack (&fun -> stack);
   118e0:	|  |        \-> moveq #24,d0
   118e2:	|  |            add.l 40(sp),d0
   118e6:	|  |            move.l d0,-(sp)
   118e8:	|  |            jsr 14f74 <trimStack>
   118ee:	|  |            addq.l #4,sp
			if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   118f0:	|  |            movea.l 40(sp),a0
   118f4:	|  |            move.l 24(a0),d0
   118f8:	|  |            move.l d0,-(sp)
   118fa:	|  |            pea 7 <_start+0x7>
   118fe:	|  |            lea 28(sp),a0
   11902:	|  |            move.l a0,-(sp)
   11904:	|  |            jsr 145f0 <getValueType>
   1190a:	|  |            lea 12(sp),sp
   1190e:	|  |            tst.w d0
   11910:	|  |        /-- bne.s 11918 <moveChr+0x1c2>
   11912:	|  |        |   moveq #1,d0
   11914:	|  +--------|-- bra.w 119fc <moveChr+0x2a6>
			trimStack (&fun -> stack);
   11918:	|  |        \-> moveq #24,d0
   1191a:	|  |            add.l 40(sp),d0
   1191e:	|  |            move.l d0,-(sp)
   11920:	|  |            jsr 14f74 <trimStack>
   11926:	|  |            addq.l #4,sp
			reggie = getRegionForObject (toObj);
   11928:	|  |            move.l 24(sp),d0
   1192c:	|  |            move.l d0,-(sp)
   1192e:	|  |            jsr 1583a <getRegionForObject>
   11934:	|  |            addq.l #4,sp
   11936:	|  |            move.l d0,28(sp)
			if (reggie == NULL) return BR_CONTINUE;
   1193a:	|  |        /-- bne.s 11942 <moveChr+0x1ec>
   1193c:	|  |        |   moveq #2,d0
   1193e:	|  +--------|-- bra.w 119fc <moveChr+0x2a6>

			if (force)
   11942:	|  |        \-> tst.w 6(sp)
   11946:	|  |        /-- beq.s 11982 <moveChr+0x22c>
			{
				if (forceWalkingPerson (reggie -> sX, reggie -> sY,	objectNumber, fun, reggie -> di)) return BR_PAUSE;
   11948:	|  |        |   movea.l 28(sp),a0
   1194c:	|  |        |   move.l 24(a0),d2
   11950:	|  |        |   movea.l 20(sp),a1
   11954:	|  |        |   movea.l 28(sp),a0
   11958:	|  |        |   move.l 20(a0),d1
   1195c:	|  |        |   movea.l 28(sp),a0
   11960:	|  |        |   move.l 16(a0),d0
   11964:	|  |        |   move.l d2,-(sp)
   11966:	|  |        |   move.l 44(sp),-(sp)
   1196a:	|  |        |   move.l a1,-(sp)
   1196c:	|  |        |   move.l d1,-(sp)
   1196e:	|  |        |   move.l d0,-(sp)
   11970:	|  |        |   jsr a4a6 <forceWalkingPerson>
   11976:	|  |        |   lea 20(sp),sp
   1197a:	|  |        |   tst.w d0
   1197c:	|  |     /--|-- beq.s 119e8 <moveChr+0x292>
   1197e:	|  |     |  |   moveq #3,d0
   11980:	|  +-----|--|-- bra.s 119fc <moveChr+0x2a6>
			}
			else if (immediate)
   11982:	|  |     |  \-> tst.w 4(sp)
   11986:	|  |     |  /-- beq.s 119ae <moveChr+0x258>
			{
				jumpPerson (reggie -> sX, reggie -> sY,	objectNumber);
   11988:	|  |     |  |   movea.l 20(sp),a1
   1198c:	|  |     |  |   movea.l 28(sp),a0
   11990:	|  |     |  |   move.l 20(a0),d1
   11994:	|  |     |  |   movea.l 28(sp),a0
   11998:	|  |     |  |   move.l 16(a0),d0
   1199c:	|  |     |  |   move.l a1,-(sp)
   1199e:	|  |     |  |   move.l d1,-(sp)
   119a0:	|  |     |  |   move.l d0,-(sp)
   119a2:	|  |     |  |   jsr a7ae <jumpPerson>
   119a8:	|  |     |  |   lea 12(sp),sp
   119ac:	|  |     +--|-- bra.s 119e8 <moveChr+0x292>
			}
			else
			{
				if (makeWalkingPerson (reggie -> sX, reggie -> sY, objectNumber, fun, reggie -> di)) return BR_PAUSE;
   119ae:	|  |     |  \-> movea.l 28(sp),a0
   119b2:	|  |     |      move.l 24(a0),d2
   119b6:	|  |     |      movea.l 20(sp),a1
   119ba:	|  |     |      movea.l 28(sp),a0
   119be:	|  |     |      move.l 20(a0),d1
   119c2:	|  |     |      movea.l 28(sp),a0
   119c6:	|  |     |      move.l 16(a0),d0
   119ca:	|  |     |      move.l d2,-(sp)
   119cc:	|  |     |      move.l 44(sp),-(sp)
   119d0:	|  |     |      move.l a1,-(sp)
   119d2:	|  |     |      move.l d1,-(sp)
   119d4:	|  |     |      move.l d0,-(sp)
   119d6:	|  |     |      jsr a97e <makeWalkingPerson>
   119dc:	|  |     |      lea 20(sp),sp
   119e0:	|  |     |      tst.w d0
   119e2:	|  |     +----- beq.s 119e8 <moveChr+0x292>
   119e4:	|  |     |      moveq #3,d0
   119e6:	|  +-----|----- bra.s 119fc <moveChr+0x2a6>
			}
			return BR_CONTINUE;
   119e8:	|  |     \----> moveq #2,d0
   119ea:	|  +----------- bra.s 119fc <moveChr+0x2a6>
		}

		default:
			KPrintF ("Built-in function must have either 2 or 3 parameters.");
   119ec:	\--|----------> pea 1993d <PutChar+0x1e5f>
   119f2:	   |            jsr 1703c <KPrintF>
   119f8:	   |            addq.l #4,sp
			return BR_ERROR;
   119fa:	   |            moveq #1,d0
	}
}
   119fc:	   \----------> move.l (sp)+,d2
   119fe:	                lea 28(sp),sp
   11a02:	                rts

00011a04 <builtIn_moveCharacter>:

builtIn(moveCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, FALSE, FALSE);
   11a04:	clr.l -(sp)
   11a06:	clr.l -(sp)
   11a08:	move.l 16(sp),-(sp)
   11a0c:	move.l 16(sp),-(sp)
   11a10:	jsr 11756 <moveChr>
   11a16:	lea 16(sp),sp
}
   11a1a:	rts

00011a1c <builtIn_forceCharacter>:

builtIn(forceCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, TRUE, FALSE);
   11a1c:	clr.l -(sp)
   11a1e:	pea 1 <_start+0x1>
   11a22:	move.l 16(sp),-(sp)
   11a26:	move.l 16(sp),-(sp)
   11a2a:	jsr 11756 <moveChr>
   11a30:	lea 16(sp),sp
}
   11a34:	rts

00011a36 <builtIn_jumpCharacter>:

builtIn(jumpCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, FALSE, TRUE);
   11a36:	pea 1 <_start+0x1>
   11a3a:	clr.l -(sp)
   11a3c:	move.l 16(sp),-(sp)
   11a40:	move.l 16(sp),-(sp)
   11a44:	jsr 11756 <moveChr>
   11a4a:	lea 16(sp),sp
}
   11a4e:	rts

00011a50 <builtIn_clearStatus>:

builtIn(clearStatus)
{
	UNUSEDALL
	clearStatusBar ();
   11a50:	jsr 76b4 <clearStatusBar>
	return BR_CONTINUE;
   11a56:	moveq #2,d0
}
   11a58:	rts

00011a5a <builtIn_removeLastStatus>:

builtIn(removeLastStatus)
{
	UNUSEDALL
	killLastStatus ();
   11a5a:	jsr 775c <killLastStatus>
	return BR_CONTINUE;
   11a60:	moveq #2,d0
}
   11a62:	rts

00011a64 <builtIn_addStatus>:

builtIn(addStatus)
{
	UNUSEDALL
	addStatusBar ();
   11a64:	jsr 764a <addStatusBar>
	return BR_CONTINUE;
   11a6a:	moveq #2,d0
}
   11a6c:	rts

00011a6e <builtIn_statusText>:

builtIn(statusText)
{
   11a6e:	       subq.l #8,sp
   11a70:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar(&(fun->stack->thisVar));
   11a72:	       movea.l 20(sp),a0
   11a76:	       move.l 24(a0),d0
   11a7a:	       move.l d0,-(sp)
   11a7c:	       jsr 14bc6 <getTextFromAnyVar>
   11a82:	       addq.l #4,sp
   11a84:	       move.l d0,8(sp)
	if (!newText) return BR_ERROR;
   11a88:	   /-- bne.s 11a8e <builtIn_statusText+0x20>
   11a8a:	   |   moveq #1,d0
   11a8c:	/--|-- bra.s 11ac2 <builtIn_statusText+0x54>
	trimStack(&fun->stack);
   11a8e:	|  \-> moveq #24,d0
   11a90:	|      add.l 20(sp),d0
   11a94:	|      move.l d0,-(sp)
   11a96:	|      jsr 14f74 <trimStack>
   11a9c:	|      addq.l #4,sp
	setStatusBar(newText);
   11a9e:	|      move.l 8(sp),-(sp)
   11aa2:	|      jsr 79dc <setStatusBar>
   11aa8:	|      addq.l #4,sp
	FreeVec(newText);
   11aaa:	|      move.l 8(sp),4(sp)
   11ab0:	|      move.l 1a7a4 <SysBase>,d0
   11ab6:	|      movea.l d0,a6
   11ab8:	|      movea.l 4(sp),a1
   11abc:	|      jsr -690(a6)
	return BR_CONTINUE;
   11ac0:	|      moveq #2,d0
}
   11ac2:	\----> movea.l (sp)+,a6
   11ac4:	       addq.l #8,sp
   11ac6:	       rts

00011ac8 <builtIn_lightStatus>:

builtIn(lightStatus)
{
   11ac8:	       subq.l #4,sp
	UNUSEDALL
	int val;
	if (! getValueType(&val, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11aca:	       movea.l 12(sp),a0
   11ace:	       move.l 24(a0),d0
   11ad2:	       move.l d0,-(sp)
   11ad4:	       pea 1 <_start+0x1>
   11ad8:	       move.l sp,d0
   11ada:	       addq.l #8,d0
   11adc:	       move.l d0,-(sp)
   11ade:	       jsr 145f0 <getValueType>
   11ae4:	       lea 12(sp),sp
   11ae8:	       tst.w d0
   11aea:	   /-- bne.s 11af0 <builtIn_lightStatus+0x28>
   11aec:	   |   moveq #1,d0
   11aee:	/--|-- bra.s 11b0e <builtIn_lightStatus+0x46>
	trimStack (&fun -> stack);
   11af0:	|  \-> moveq #24,d0
   11af2:	|      add.l 12(sp),d0
   11af6:	|      move.l d0,-(sp)
   11af8:	|      jsr 14f74 <trimStack>
   11afe:	|      addq.l #4,sp
	setLitStatus (val);
   11b00:	|      move.l (sp),d0
   11b02:	|      move.l d0,-(sp)
   11b04:	|      jsr 79cc <setLitStatus>
   11b0a:	|      addq.l #4,sp
	return BR_CONTINUE;
   11b0c:	|      moveq #2,d0
}
   11b0e:	\----> addq.l #4,sp
   11b10:	       rts

00011b12 <builtIn_positionStatus>:

builtIn(positionStatus)
{
   11b12:	       subq.l #8,sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11b14:	       movea.l 16(sp),a0
   11b18:	       move.l 24(a0),d0
   11b1c:	       move.l d0,-(sp)
   11b1e:	       pea 1 <_start+0x1>
   11b22:	       move.l sp,d0
   11b24:	       addq.l #8,d0
   11b26:	       move.l d0,-(sp)
   11b28:	       jsr 145f0 <getValueType>
   11b2e:	       lea 12(sp),sp
   11b32:	       tst.w d0
   11b34:	   /-- bne.s 11b3a <builtIn_positionStatus+0x28>
   11b36:	   |   moveq #1,d0
   11b38:	/--|-- bra.s 11b94 <builtIn_positionStatus+0x82>
	trimStack (&fun -> stack);
   11b3a:	|  \-> moveq #24,d0
   11b3c:	|      add.l 16(sp),d0
   11b40:	|      move.l d0,-(sp)
   11b42:	|      jsr 14f74 <trimStack>
   11b48:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11b4a:	|      movea.l 16(sp),a0
   11b4e:	|      move.l 24(a0),d0
   11b52:	|      move.l d0,-(sp)
   11b54:	|      pea 1 <_start+0x1>
   11b58:	|      moveq #12,d0
   11b5a:	|      add.l sp,d0
   11b5c:	|      move.l d0,-(sp)
   11b5e:	|      jsr 145f0 <getValueType>
   11b64:	|      lea 12(sp),sp
   11b68:	|      tst.w d0
   11b6a:	|  /-- bne.s 11b70 <builtIn_positionStatus+0x5e>
   11b6c:	|  |   moveq #1,d0
   11b6e:	+--|-- bra.s 11b94 <builtIn_positionStatus+0x82>
	trimStack (&fun -> stack);
   11b70:	|  \-> moveq #24,d0
   11b72:	|      add.l 16(sp),d0
   11b76:	|      move.l d0,-(sp)
   11b78:	|      jsr 14f74 <trimStack>
   11b7e:	|      addq.l #4,sp
	positionStatus (x, y);
   11b80:	|      move.l (sp),d1
   11b82:	|      move.l 4(sp),d0
   11b86:	|      move.l d1,-(sp)
   11b88:	|      move.l d0,-(sp)
   11b8a:	|      jsr 77be <positionStatus>
   11b90:	|      addq.l #8,sp
	return BR_CONTINUE;
   11b92:	|      moveq #2,d0
}
   11b94:	\----> addq.l #8,sp
   11b96:	       rts

00011b98 <builtIn_alignStatus>:

builtIn(alignStatus)
{
   11b98:	       subq.l #4,sp
	UNUSEDALL
	int val;
	if (! getValueType(&val, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11b9a:	       movea.l 12(sp),a0
   11b9e:	       move.l 24(a0),d0
   11ba2:	       move.l d0,-(sp)
   11ba4:	       pea 1 <_start+0x1>
   11ba8:	       move.l sp,d0
   11baa:	       addq.l #8,d0
   11bac:	       move.l d0,-(sp)
   11bae:	       jsr 145f0 <getValueType>
   11bb4:	       lea 12(sp),sp
   11bb8:	       tst.w d0
   11bba:	   /-- bne.s 11bc0 <builtIn_alignStatus+0x28>
   11bbc:	   |   moveq #1,d0
   11bbe:	/--|-- bra.s 11be0 <builtIn_alignStatus+0x48>
	trimStack (&fun -> stack);
   11bc0:	|  \-> moveq #24,d0
   11bc2:	|      add.l 12(sp),d0
   11bc6:	|      move.l d0,-(sp)
   11bc8:	|      jsr 14f74 <trimStack>
   11bce:	|      addq.l #4,sp
	nowStatus -> alignStatus = (short) val;
   11bd0:	|      move.l (sp),d0
   11bd2:	|      movea.l 1a12a <nowStatus>,a0
   11bd8:	|      move.l d0,d0
   11bda:	|      move.w d0,4(a0)
	return BR_CONTINUE;
   11bde:	|      moveq #2,d0
}
   11be0:	\----> addq.l #4,sp
   11be2:	       rts

00011be4 <getFuncNumForCallback>:

static BOOL getFuncNumForCallback(int numParams, struct loadedFunction * fun, int *functionNum)
{
	switch (numParams) {
   11be4:	             tst.l 4(sp)
   11be8:	      /----- beq.s 11bf4 <getFuncNumForCallback+0x10>
   11bea:	      |      moveq #1,d0
   11bec:	      |      cmp.l 4(sp),d0
   11bf0:	      |  /-- beq.s 11bfa <getFuncNumForCallback+0x16>
   11bf2:	   /--|--|-- bra.s 11c30 <getFuncNumForCallback+0x4c>
		case 0:
			functionNum = 0;
   11bf4:	   |  \--|-> clr.l 12(sp)
			break;
   11bf8:	/--|-----|-- bra.s 11c42 <getFuncNumForCallback+0x5e>

		case 1:
			if (! getValueType(functionNum, SVT_FUNC,&fun -> stack -> thisVar)) return FALSE;
   11bfa:	|  |     \-> movea.l 8(sp),a0
   11bfe:	|  |         move.l 24(a0),d0
   11c02:	|  |         move.l d0,-(sp)
   11c04:	|  |         pea 2 <_start+0x2>
   11c08:	|  |         move.l 20(sp),-(sp)
   11c0c:	|  |         jsr 145f0 <getValueType>
   11c12:	|  |         lea 12(sp),sp
   11c16:	|  |         tst.w d0
   11c18:	|  |     /-- bne.s 11c1e <getFuncNumForCallback+0x3a>
   11c1a:	|  |     |   clr.w d0
   11c1c:	|  |  /--|-- bra.s 11c44 <getFuncNumForCallback+0x60>
			trimStack (&fun -> stack);
   11c1e:	|  |  |  \-> moveq #24,d0
   11c20:	|  |  |      add.l 8(sp),d0
   11c24:	|  |  |      move.l d0,-(sp)
   11c26:	|  |  |      jsr 14f74 <trimStack>
   11c2c:	|  |  |      addq.l #4,sp
			break;
   11c2e:	+--|--|----- bra.s 11c42 <getFuncNumForCallback+0x5e>

		default:
			KPrintF ("Too many parameters.");
   11c30:	|  \--|----> pea 19973 <PutChar+0x1e95>
   11c36:	|     |      jsr 1703c <KPrintF>
   11c3c:	|     |      addq.l #4,sp
			return FALSE;
   11c3e:	|     |      clr.w d0
   11c40:	|     +----- bra.s 11c44 <getFuncNumForCallback+0x60>
	}
	return TRUE;
   11c42:	\-----|----> moveq #1,d0
}
   11c44:	      \----> rts

00011c46 <builtIn_onLeftMouse>:

builtIn (onLeftMouse)
{
   11c46:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11c48:	       move.l sp,d0
   11c4a:	       move.l d0,-(sp)
   11c4c:	       move.l 16(sp),-(sp)
   11c50:	       move.l 16(sp),-(sp)
   11c54:	       jsr 11be4 <getFuncNumForCallback>
   11c5a:	       lea 12(sp),sp
   11c5e:	       tst.w d0
   11c60:	/----- beq.s 11c70 <builtIn_onLeftMouse+0x2a>
	{
		currentEvents -> leftMouseFunction = functionNum;
   11c62:	|      movea.l 1a11c <currentEvents>,a0
   11c68:	|      move.l (sp),d0
   11c6a:	|      move.l d0,(a0)
		return BR_CONTINUE;
   11c6c:	|      moveq #2,d0
   11c6e:	|  /-- bra.s 11c72 <builtIn_onLeftMouse+0x2c>
	}
	return BR_ERROR;
   11c70:	\--|-> moveq #1,d0
}
   11c72:	   \-> addq.l #4,sp
   11c74:	       rts

00011c76 <builtIn_onLeftMouseUp>:

builtIn (onLeftMouseUp)
{
   11c76:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11c78:	       move.l sp,d0
   11c7a:	       move.l d0,-(sp)
   11c7c:	       move.l 16(sp),-(sp)
   11c80:	       move.l 16(sp),-(sp)
   11c84:	       jsr 11be4 <getFuncNumForCallback>
   11c8a:	       lea 12(sp),sp
   11c8e:	       tst.w d0
   11c90:	/----- beq.s 11ca2 <builtIn_onLeftMouseUp+0x2c>
	{
		currentEvents -> leftMouseUpFunction = functionNum;
   11c92:	|      movea.l 1a11c <currentEvents>,a0
   11c98:	|      move.l (sp),d0
   11c9a:	|      move.l d0,4(a0)
		return BR_CONTINUE;
   11c9e:	|      moveq #2,d0
   11ca0:	|  /-- bra.s 11ca4 <builtIn_onLeftMouseUp+0x2e>
	}
	return BR_ERROR;
   11ca2:	\--|-> moveq #1,d0
}
   11ca4:	   \-> addq.l #4,sp
   11ca6:	       rts

00011ca8 <builtIn_onRightMouse>:

builtIn (onRightMouse)
{
   11ca8:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11caa:	       move.l sp,d0
   11cac:	       move.l d0,-(sp)
   11cae:	       move.l 16(sp),-(sp)
   11cb2:	       move.l 16(sp),-(sp)
   11cb6:	       jsr 11be4 <getFuncNumForCallback>
   11cbc:	       lea 12(sp),sp
   11cc0:	       tst.w d0
   11cc2:	/----- beq.s 11cd4 <builtIn_onRightMouse+0x2c>
	{
		currentEvents -> rightMouseFunction = functionNum;
   11cc4:	|      movea.l 1a11c <currentEvents>,a0
   11cca:	|      move.l (sp),d0
   11ccc:	|      move.l d0,8(a0)
		return BR_CONTINUE;
   11cd0:	|      moveq #2,d0
   11cd2:	|  /-- bra.s 11cd6 <builtIn_onRightMouse+0x2e>
	}
	return BR_ERROR;
   11cd4:	\--|-> moveq #1,d0
}
   11cd6:	   \-> addq.l #4,sp
   11cd8:	       rts

00011cda <builtIn_onRightMouseUp>:

builtIn (onRightMouseUp)
{
   11cda:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11cdc:	       move.l sp,d0
   11cde:	       move.l d0,-(sp)
   11ce0:	       move.l 16(sp),-(sp)
   11ce4:	       move.l 16(sp),-(sp)
   11ce8:	       jsr 11be4 <getFuncNumForCallback>
   11cee:	       lea 12(sp),sp
   11cf2:	       tst.w d0
   11cf4:	/----- beq.s 11d06 <builtIn_onRightMouseUp+0x2c>
	{
		currentEvents -> rightMouseUpFunction = functionNum;
   11cf6:	|      movea.l 1a11c <currentEvents>,a0
   11cfc:	|      move.l (sp),d0
   11cfe:	|      move.l d0,12(a0)
		return BR_CONTINUE;
   11d02:	|      moveq #2,d0
   11d04:	|  /-- bra.s 11d08 <builtIn_onRightMouseUp+0x2e>
	}
	return BR_ERROR;
   11d06:	\--|-> moveq #1,d0
}
   11d08:	   \-> addq.l #4,sp
   11d0a:	       rts

00011d0c <builtIn_onFocusChange>:

builtIn (onFocusChange)
{
   11d0c:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11d0e:	       move.l sp,d0
   11d10:	       move.l d0,-(sp)
   11d12:	       move.l 16(sp),-(sp)
   11d16:	       move.l 16(sp),-(sp)
   11d1a:	       jsr 11be4 <getFuncNumForCallback>
   11d20:	       lea 12(sp),sp
   11d24:	       tst.w d0
   11d26:	/----- beq.s 11d38 <builtIn_onFocusChange+0x2c>
	{
		currentEvents -> focusFunction = functionNum;
   11d28:	|      movea.l 1a11c <currentEvents>,a0
   11d2e:	|      move.l (sp),d0
   11d30:	|      move.l d0,20(a0)
		return BR_CONTINUE;
   11d34:	|      moveq #2,d0
   11d36:	|  /-- bra.s 11d3a <builtIn_onFocusChange+0x2e>
	}
	return BR_ERROR;
   11d38:	\--|-> moveq #1,d0
}
   11d3a:	   \-> addq.l #4,sp
   11d3c:	       rts

00011d3e <builtIn_onMoveMouse>:

builtIn (onMoveMouse)
{
   11d3e:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11d40:	       move.l sp,d0
   11d42:	       move.l d0,-(sp)
   11d44:	       move.l 16(sp),-(sp)
   11d48:	       move.l 16(sp),-(sp)
   11d4c:	       jsr 11be4 <getFuncNumForCallback>
   11d52:	       lea 12(sp),sp
   11d56:	       tst.w d0
   11d58:	/----- beq.s 11d6a <builtIn_onMoveMouse+0x2c>
	{
		currentEvents -> moveMouseFunction = functionNum;
   11d5a:	|      movea.l 1a11c <currentEvents>,a0
   11d60:	|      move.l (sp),d0
   11d62:	|      move.l d0,16(a0)
		return BR_CONTINUE;
   11d66:	|      moveq #2,d0
   11d68:	|  /-- bra.s 11d6c <builtIn_onMoveMouse+0x2e>
	}
	return BR_ERROR;
   11d6a:	\--|-> moveq #1,d0
}
   11d6c:	   \-> addq.l #4,sp
   11d6e:	       rts

00011d70 <builtIn_onKeyboard>:

builtIn (onKeyboard)
{
   11d70:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11d72:	       move.l sp,d0
   11d74:	       move.l d0,-(sp)
   11d76:	       move.l 16(sp),-(sp)
   11d7a:	       move.l 16(sp),-(sp)
   11d7e:	       jsr 11be4 <getFuncNumForCallback>
   11d84:	       lea 12(sp),sp
   11d88:	       tst.w d0
   11d8a:	/----- beq.s 11d9c <builtIn_onKeyboard+0x2c>
	{
		currentEvents -> spaceFunction = functionNum;
   11d8c:	|      movea.l 1a11c <currentEvents>,a0
   11d92:	|      move.l (sp),d0
   11d94:	|      move.l d0,24(a0)
		return BR_CONTINUE;
   11d98:	|      moveq #2,d0
   11d9a:	|  /-- bra.s 11d9e <builtIn_onKeyboard+0x2e>
	}
	return BR_ERROR;
   11d9c:	\--|-> moveq #1,d0
}
   11d9e:	   \-> addq.l #4,sp
   11da0:	       rts

00011da2 <builtIn_spawnSub>:

builtIn (spawnSub)
{
   11da2:	          subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11da4:	          move.l sp,d0
   11da6:	          move.l d0,-(sp)
   11da8:	          move.l 16(sp),-(sp)
   11dac:	          move.l 16(sp),-(sp)
   11db0:	          jsr 11be4 <getFuncNumForCallback>
   11db6:	          lea 12(sp),sp
   11dba:	          tst.w d0
   11dbc:	/-------- beq.s 11de8 <builtIn_spawnSub+0x46>
	{
		if (! startNewFunctionNum (functionNum, 0, NULL, noStack, TRUE)) return BR_ERROR;
   11dbe:	|         move.l 1a774 <noStack>,d1
   11dc4:	|         move.l (sp),d0
   11dc6:	|         pea 1 <_start+0x1>
   11dca:	|         move.l d1,-(sp)
   11dcc:	|         clr.l -(sp)
   11dce:	|         clr.l -(sp)
   11dd0:	|         move.l d0,-(sp)
   11dd2:	|         jsr 688e <startNewFunctionNum>
   11dd8:	|         lea 20(sp),sp
   11ddc:	|         tst.l d0
   11dde:	|     /-- bne.s 11de4 <builtIn_spawnSub+0x42>
   11de0:	|     |   moveq #1,d0
   11de2:	|  /--|-- bra.s 11dea <builtIn_spawnSub+0x48>
		return BR_CONTINUE;
   11de4:	|  |  \-> moveq #2,d0
   11de6:	|  +----- bra.s 11dea <builtIn_spawnSub+0x48>
	}
	return BR_ERROR;
   11de8:	\--|----> moveq #1,d0
}
   11dea:	   \----> addq.l #4,sp
   11dec:	          rts

00011dee <builtIn_cancelSub>:

builtIn (cancelSub)
{
   11dee:	          subq.l #8,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11df0:	          move.l sp,d0
   11df2:	          addq.l #4,d0
   11df4:	          move.l d0,-(sp)
   11df6:	          move.l 20(sp),-(sp)
   11dfa:	          move.l 20(sp),-(sp)
   11dfe:	          jsr 11be4 <getFuncNumForCallback>
   11e04:	          lea 12(sp),sp
   11e08:	          tst.w d0
   11e0a:	/-------- beq.s 11e40 <builtIn_cancelSub+0x52>
	{
		BOOL killedMyself;
		cancelAFunction (functionNum, fun, &killedMyself);
   11e0c:	|         move.l 4(sp),d1
   11e10:	|         move.l sp,d0
   11e12:	|         addq.l #2,d0
   11e14:	|         move.l d0,-(sp)
   11e16:	|         move.l 20(sp),-(sp)
   11e1a:	|         move.l d1,-(sp)
   11e1c:	|         jsr 45b4 <cancelAFunction>
   11e22:	|         lea 12(sp),sp
		if (killedMyself) {
   11e26:	|         move.w 2(sp),d0
   11e2a:	|  /----- beq.s 11e3c <builtIn_cancelSub+0x4e>
			abortFunction (fun);
   11e2c:	|  |      move.l 16(sp),-(sp)
   11e30:	|  |      jsr 44d2 <abortFunction>
   11e36:	|  |      addq.l #4,sp
			return BR_ALREADY_GONE;
   11e38:	|  |      moveq #5,d0
   11e3a:	|  |  /-- bra.s 11e42 <builtIn_cancelSub+0x54>
		}
		return BR_CONTINUE;
   11e3c:	|  \--|-> moveq #2,d0
   11e3e:	|     +-- bra.s 11e42 <builtIn_cancelSub+0x54>
	}
	return BR_ERROR;
   11e40:	\-----|-> moveq #1,d0
}
   11e42:	      \-> addq.l #8,sp
   11e44:	          rts

00011e46 <builtIn_stringWidth>:

builtIn(stringWidth)
{
   11e46:	       subq.l #8,sp
   11e48:	       move.l a6,-(sp)
	UNUSEDALL
	char * theText = getTextFromAnyVar(&(fun->stack->thisVar));
   11e4a:	       movea.l 20(sp),a0
   11e4e:	       move.l 24(a0),d0
   11e52:	       move.l d0,-(sp)
   11e54:	       jsr 14bc6 <getTextFromAnyVar>
   11e5a:	       addq.l #4,sp
   11e5c:	       move.l d0,8(sp)
	if (!theText) return BR_ERROR;
   11e60:	   /-- bne.s 11e66 <builtIn_stringWidth+0x20>
   11e62:	   |   moveq #1,d0
   11e64:	/--|-- bra.s 11eb4 <builtIn_stringWidth+0x6e>
	trimStack(&fun->stack);
   11e66:	|  \-> moveq #24,d0
   11e68:	|      add.l 20(sp),d0
   11e6c:	|      move.l d0,-(sp)
   11e6e:	|      jsr 14f74 <trimStack>
   11e74:	|      addq.l #4,sp

	// Return value
	setVariable(&fun->reg, SVT_INT, stringWidth(theText));
   11e76:	|      move.l 8(sp),-(sp)
   11e7a:	|      jsr 156da <stringWidth>
   11e80:	|      addq.l #4,sp
   11e82:	|      move.l d0,d1
   11e84:	|      moveq #28,d0
   11e86:	|      add.l 20(sp),d0
   11e8a:	|      move.l d1,-(sp)
   11e8c:	|      pea 1 <_start+0x1>
   11e90:	|      move.l d0,-(sp)
   11e92:	|      jsr 14ee2 <setVariable>
   11e98:	|      lea 12(sp),sp
	FreeVec(theText);
   11e9c:	|      move.l 8(sp),4(sp)
   11ea2:	|      move.l 1a7a4 <SysBase>,d0
   11ea8:	|      movea.l d0,a6
   11eaa:	|      movea.l 4(sp),a1
   11eae:	|      jsr -690(a6)
	return BR_CONTINUE;
   11eb2:	|      moveq #2,d0
}
   11eb4:	\----> movea.l (sp)+,a6
   11eb6:	       addq.l #8,sp
   11eb8:	       rts

00011eba <builtIn_hardScroll>:

builtIn(hardScroll)
{
   11eba:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11ebc:	       movea.l 12(sp),a0
   11ec0:	       move.l 24(a0),d0
   11ec4:	       move.l d0,-(sp)
   11ec6:	       pea 1 <_start+0x1>
   11eca:	       move.l sp,d0
   11ecc:	       addq.l #8,d0
   11ece:	       move.l d0,-(sp)
   11ed0:	       jsr 145f0 <getValueType>
   11ed6:	       lea 12(sp),sp
   11eda:	       tst.w d0
   11edc:	   /-- bne.s 11ee2 <builtIn_hardScroll+0x28>
   11ede:	   |   moveq #1,d0
   11ee0:	/--|-- bra.s 11f00 <builtIn_hardScroll+0x46>
	trimStack (&fun -> stack);
   11ee2:	|  \-> moveq #24,d0
   11ee4:	|      add.l 12(sp),d0
   11ee8:	|      move.l d0,-(sp)
   11eea:	|      jsr 14f74 <trimStack>
   11ef0:	|      addq.l #4,sp
	hardScroll (v);
   11ef2:	|      move.l (sp),d0
   11ef4:	|      move.l d0,-(sp)
   11ef6:	|      jsr d0a8 <hardScroll>
   11efc:	|      addq.l #4,sp
	return BR_CONTINUE;
   11efe:	|      moveq #2,d0
}
   11f00:	\----> addq.l #4,sp
   11f02:	       rts

00011f04 <builtIn_isScreenRegion>:


builtIn(isScreenRegion)
{
   11f04:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11f06:	       movea.l 12(sp),a0
   11f0a:	       move.l 24(a0),d0
   11f0e:	       move.l d0,-(sp)
   11f10:	       pea 7 <_start+0x7>
   11f14:	       move.l sp,d0
   11f16:	       addq.l #8,d0
   11f18:	       move.l d0,-(sp)
   11f1a:	       jsr 145f0 <getValueType>
   11f20:	       lea 12(sp),sp
   11f24:	       tst.w d0
   11f26:	   /-- bne.s 11f2c <builtIn_isScreenRegion+0x28>
   11f28:	   |   moveq #1,d0
   11f2a:	/--|-- bra.s 11f6c <builtIn_isScreenRegion+0x68>
	trimStack (&fun -> stack);
   11f2c:	|  \-> moveq #24,d0
   11f2e:	|      add.l 12(sp),d0
   11f32:	|      move.l d0,-(sp)
   11f34:	|      jsr 14f74 <trimStack>
   11f3a:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, getRegionForObject (objectNumber) != NULL);
   11f3c:	|      move.l (sp),d0
   11f3e:	|      move.l d0,-(sp)
   11f40:	|      jsr 1583a <getRegionForObject>
   11f46:	|      addq.l #4,sp
   11f48:	|      tst.l d0
   11f4a:	|      sne d0
   11f4c:	|      neg.b d0
   11f4e:	|      moveq #0,d1
   11f50:	|      move.b d0,d1
   11f52:	|      moveq #28,d0
   11f54:	|      add.l 12(sp),d0
   11f58:	|      move.l d1,-(sp)
   11f5a:	|      pea 1 <_start+0x1>
   11f5e:	|      move.l d0,-(sp)
   11f60:	|      jsr 14ee2 <setVariable>
   11f66:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11f6a:	|      moveq #2,d0
}
   11f6c:	\----> addq.l #4,sp
   11f6e:	       rts

00011f70 <builtIn_setSpeechSpeed>:

builtIn(setSpeechSpeed)
{
   11f70:	       subq.l #4,sp
	UNUSEDALL
	int number;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11f72:	       movea.l 12(sp),a0
   11f76:	       move.l 24(a0),d0
   11f7a:	       move.l d0,-(sp)
   11f7c:	       pea 1 <_start+0x1>
   11f80:	       move.l sp,d0
   11f82:	       addq.l #8,d0
   11f84:	       move.l d0,-(sp)
   11f86:	       jsr 145f0 <getValueType>
   11f8c:	       lea 12(sp),sp
   11f90:	       tst.w d0
   11f92:	   /-- bne.s 11f98 <builtIn_setSpeechSpeed+0x28>
   11f94:	   |   moveq #1,d0
   11f96:	/--|-- bra.s 11fe6 <builtIn_setSpeechSpeed+0x76>
	trimStack (&fun -> stack);
   11f98:	|  \-> moveq #24,d0
   11f9a:	|      add.l 12(sp),d0
   11f9e:	|      move.l d0,-(sp)
   11fa0:	|      jsr 14f74 <trimStack>
   11fa6:	|      addq.l #4,sp
	speechSpeed = number * (FLOAT) 0.01;
   11fa8:	|      move.l (sp),d0
   11faa:	|      move.l d0,-(sp)
   11fac:	|      jsr 1746e <__floatsisf>
   11fb2:	|      addq.l #4,sp
   11fb4:	|      move.l #1008981770,-(sp)
   11fba:	|      move.l d0,-(sp)
   11fbc:	|      jsr 17520 <__mulsf3>
   11fc2:	|      addq.l #8,sp
   11fc4:	|      move.l d0,1a12e <speechSpeed>
	setVariable (&fun -> reg, SVT_INT, 1);
   11fca:	|      moveq #28,d0
   11fcc:	|      add.l 12(sp),d0
   11fd0:	|      pea 1 <_start+0x1>
   11fd4:	|      pea 1 <_start+0x1>
   11fd8:	|      move.l d0,-(sp)
   11fda:	|      jsr 14ee2 <setVariable>
   11fe0:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11fe4:	|      moveq #2,d0
}
   11fe6:	\----> addq.l #4,sp
   11fe8:	       rts

00011fea <builtIn_setFontSpacing>:

builtIn(setFontSpacing)
{
   11fea:	       subq.l #4,sp
	UNUSEDALL
	int fontSpaceI;
	if (! getValueType(&fontSpaceI, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11fec:	       movea.l 12(sp),a0
   11ff0:	       move.l 24(a0),d0
   11ff4:	       move.l d0,-(sp)
   11ff6:	       pea 1 <_start+0x1>
   11ffa:	       move.l sp,d0
   11ffc:	       addq.l #8,d0
   11ffe:	       move.l d0,-(sp)
   12000:	       jsr 145f0 <getValueType>
   12006:	       lea 12(sp),sp
   1200a:	       tst.w d0
   1200c:	   /-- bne.s 12012 <builtIn_setFontSpacing+0x28>
   1200e:	   |   moveq #1,d0
   12010:	/--|-- bra.s 12048 <builtIn_setFontSpacing+0x5e>
	fontSpace = fontSpaceI;
   12012:	|  \-> move.l (sp),d0
   12014:	|      move.l d0,d0
   12016:	|      move.w d0,1a6a8 <fontSpace>
	trimStack (&fun -> stack);
   1201c:	|      moveq #24,d0
   1201e:	|      add.l 12(sp),d0
   12022:	|      move.l d0,-(sp)
   12024:	|      jsr 14f74 <trimStack>
   1202a:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   1202c:	|      moveq #28,d0
   1202e:	|      add.l 12(sp),d0
   12032:	|      pea 1 <_start+0x1>
   12036:	|      pea 1 <_start+0x1>
   1203a:	|      move.l d0,-(sp)
   1203c:	|      jsr 14ee2 <setVariable>
   12042:	|      lea 12(sp),sp
	return BR_CONTINUE;
   12046:	|      moveq #2,d0
}
   12048:	\----> addq.l #4,sp
   1204a:	       rts

0001204c <builtIn_transitionLevel>:

builtIn(transitionLevel)
{
   1204c:	          subq.l #4,sp
	UNUSEDALL
	int number;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1204e:	          movea.l 12(sp),a0
   12052:	          move.l 24(a0),d0
   12056:	          move.l d0,-(sp)
   12058:	          pea 1 <_start+0x1>
   1205c:	          move.l sp,d0
   1205e:	          addq.l #8,d0
   12060:	          move.l d0,-(sp)
   12062:	          jsr 145f0 <getValueType>
   12068:	          lea 12(sp),sp
   1206c:	          tst.w d0
   1206e:	      /-- bne.s 12074 <builtIn_transitionLevel+0x28>
   12070:	      |   moveq #1,d0
   12072:	/-----|-- bra.s 120c8 <builtIn_transitionLevel+0x7c>
	trimStack (&fun -> stack);
   12074:	|     \-> moveq #24,d0
   12076:	|         add.l 12(sp),d0
   1207a:	|         move.l d0,-(sp)
   1207c:	|         jsr 14f74 <trimStack>
   12082:	|         addq.l #4,sp

	if (number < 0)
   12084:	|         move.l (sp),d0
   12086:	|     /-- bpl.s 12090 <builtIn_transitionLevel+0x44>
		brightnessLevel = 0;
   12088:	|     |   clr.b 1a11a <brightnessLevel>
   1208e:	|  /--|-- bra.s 120ac <builtIn_transitionLevel+0x60>
	else if (number > 255)
   12090:	|  |  \-> move.l (sp),d0
   12092:	|  |      cmpi.l #255,d0
   12098:	|  |  /-- ble.s 120a2 <builtIn_transitionLevel+0x56>
		brightnessLevel = 255;
   1209a:	|  |  |   st 1a11a <brightnessLevel>
   120a0:	|  +--|-- bra.s 120ac <builtIn_transitionLevel+0x60>
	else
		brightnessLevel = number;
   120a2:	|  |  \-> move.l (sp),d0
   120a4:	|  |      move.l d0,d0
   120a6:	|  |      move.b d0,1a11a <brightnessLevel>

	setVariable (&fun -> reg, SVT_INT, 1);
   120ac:	|  \----> moveq #28,d0
   120ae:	|         add.l 12(sp),d0
   120b2:	|         pea 1 <_start+0x1>
   120b6:	|         pea 1 <_start+0x1>
   120ba:	|         move.l d0,-(sp)
   120bc:	|         jsr 14ee2 <setVariable>
   120c2:	|         lea 12(sp),sp
	return BR_CONTINUE;
   120c6:	|         moveq #2,d0
}
   120c8:	\-------> addq.l #4,sp
   120ca:	          rts

000120cc <builtIn_captureAllKeys>:

builtIn(captureAllKeys)
{
	UNUSEDALL
	captureAllKeys = getBoolean(&(fun -> stack -> thisVar));
   120cc:	movea.l 8(sp),a0
   120d0:	move.l 24(a0),d0
   120d4:	move.l d0,-(sp)
   120d6:	jsr 14b30 <getBoolean>
   120dc:	addq.l #4,sp
   120de:	move.w d0,1a744 <captureAllKeys>
	trimStack (&fun -> stack);
   120e4:	moveq #24,d0
   120e6:	add.l 8(sp),d0
   120ea:	move.l d0,-(sp)
   120ec:	jsr 14f74 <trimStack>
   120f2:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, captureAllKeys);
   120f4:	move.w 1a744 <captureAllKeys>,d0
   120fa:	movea.w d0,a0
   120fc:	moveq #28,d0
   120fe:	add.l 8(sp),d0
   12102:	move.l a0,-(sp)
   12104:	pea 1 <_start+0x1>
   12108:	move.l d0,-(sp)
   1210a:	jsr 14ee2 <setVariable>
   12110:	lea 12(sp),sp
	return BR_CONTINUE;
   12114:	moveq #2,d0
}
   12116:	rts

00012118 <builtIn_spinCharacter>:


builtIn(spinCharacter)
{
   12118:	       lea -12(sp),sp
	UNUSEDALL
	int number, objectNumber;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1211c:	       movea.l 20(sp),a0
   12120:	       move.l 24(a0),d0
   12124:	       move.l d0,-(sp)
   12126:	       pea 1 <_start+0x1>
   1212a:	       moveq #12,d0
   1212c:	       add.l sp,d0
   1212e:	       move.l d0,-(sp)
   12130:	       jsr 145f0 <getValueType>
   12136:	       lea 12(sp),sp
   1213a:	       tst.w d0
   1213c:	   /-- bne.s 12144 <builtIn_spinCharacter+0x2c>
   1213e:	   |   moveq #1,d0
   12140:	/--|-- bra.w 121f4 <builtIn_spinCharacter+0xdc>
	trimStack (&fun -> stack);
   12144:	|  \-> moveq #24,d0
   12146:	|      add.l 20(sp),d0
   1214a:	|      move.l d0,-(sp)
   1214c:	|      jsr 14f74 <trimStack>
   12152:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12154:	|      movea.l 20(sp),a0
   12158:	|      move.l 24(a0),d0
   1215c:	|      move.l d0,-(sp)
   1215e:	|      pea 7 <_start+0x7>
   12162:	|      lea 8(sp),a0
   12166:	|      move.l a0,-(sp)
   12168:	|      jsr 145f0 <getValueType>
   1216e:	|      lea 12(sp),sp
   12172:	|      tst.w d0
   12174:	|  /-- bne.s 1217a <builtIn_spinCharacter+0x62>
   12176:	|  |   moveq #1,d0
   12178:	+--|-- bra.s 121f4 <builtIn_spinCharacter+0xdc>
	trimStack (&fun -> stack);
   1217a:	|  \-> moveq #24,d0
   1217c:	|      add.l 20(sp),d0
   12180:	|      move.l d0,-(sp)
   12182:	|      jsr 14f74 <trimStack>
   12188:	|      addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   1218a:	|      move.l (sp),d0
   1218c:	|      move.l d0,-(sp)
   1218e:	|      jsr a454 <findPerson>
   12194:	|      addq.l #4,sp
   12196:	|      move.l d0,8(sp)
	if (thisPerson) {
   1219a:	|  /-- beq.s 121da <builtIn_spinCharacter+0xc2>
		thisPerson -> wantAngle = number;
   1219c:	|  |   move.l 4(sp),d0
   121a0:	|  |   movea.l 8(sp),a0
   121a4:	|  |   move.l d0,96(a0)
		thisPerson -> spinning = TRUE;
   121a8:	|  |   movea.l 8(sp),a0
   121ac:	|  |   move.w #1,66(a0)
		thisPerson -> continueAfterWalking = fun;
   121b2:	|  |   movea.l 8(sp),a0
   121b6:	|  |   move.l 20(sp),68(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   121bc:	|  |   moveq #28,d0
   121be:	|  |   add.l 20(sp),d0
   121c2:	|  |   pea 1 <_start+0x1>
   121c6:	|  |   pea 1 <_start+0x1>
   121ca:	|  |   move.l d0,-(sp)
   121cc:	|  |   jsr 14ee2 <setVariable>
   121d2:	|  |   lea 12(sp),sp
		return BR_PAUSE;
   121d6:	|  |   moveq #3,d0
   121d8:	+--|-- bra.s 121f4 <builtIn_spinCharacter+0xdc>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   121da:	|  \-> moveq #28,d0
   121dc:	|      add.l 20(sp),d0
   121e0:	|      clr.l -(sp)
   121e2:	|      pea 1 <_start+0x1>
   121e6:	|      move.l d0,-(sp)
   121e8:	|      jsr 14ee2 <setVariable>
   121ee:	|      lea 12(sp),sp
		return BR_CONTINUE;
   121f2:	|      moveq #2,d0
	}
}
   121f4:	\----> lea 12(sp),sp
   121f8:	       rts

000121fa <builtIn_getCharacterDirection>:

builtIn(getCharacterDirection)
{
   121fa:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   121fc:	          movea.l 16(sp),a0
   12200:	          move.l 24(a0),d0
   12204:	          move.l d0,-(sp)
   12206:	          pea 7 <_start+0x7>
   1220a:	          move.l sp,d0
   1220c:	          addq.l #8,d0
   1220e:	          move.l d0,-(sp)
   12210:	          jsr 145f0 <getValueType>
   12216:	          lea 12(sp),sp
   1221a:	          tst.w d0
   1221c:	      /-- bne.s 12222 <builtIn_getCharacterDirection+0x28>
   1221e:	      |   moveq #1,d0
   12220:	/-----|-- bra.s 12280 <builtIn_getCharacterDirection+0x86>
	trimStack (&fun -> stack);
   12222:	|     \-> moveq #24,d0
   12224:	|         add.l 16(sp),d0
   12228:	|         move.l d0,-(sp)
   1222a:	|         jsr 14f74 <trimStack>
   12230:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   12232:	|         move.l (sp),d0
   12234:	|         move.l d0,-(sp)
   12236:	|         jsr a454 <findPerson>
   1223c:	|         addq.l #4,sp
   1223e:	|         move.l d0,4(sp)
	if (thisPerson) {
   12242:	|  /----- beq.s 12266 <builtIn_getCharacterDirection+0x6c>
		setVariable (&fun -> reg, SVT_INT, thisPerson -> direction);
   12244:	|  |      movea.l 4(sp),a0
   12248:	|  |      move.l 106(a0),d1
   1224c:	|  |      moveq #28,d0
   1224e:	|  |      add.l 16(sp),d0
   12252:	|  |      move.l d1,-(sp)
   12254:	|  |      pea 1 <_start+0x1>
   12258:	|  |      move.l d0,-(sp)
   1225a:	|  |      jsr 14ee2 <setVariable>
   12260:	|  |      lea 12(sp),sp
   12264:	|  |  /-- bra.s 1227e <builtIn_getCharacterDirection+0x84>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   12266:	|  \--|-> moveq #28,d0
   12268:	|     |   add.l 16(sp),d0
   1226c:	|     |   clr.l -(sp)
   1226e:	|     |   pea 1 <_start+0x1>
   12272:	|     |   move.l d0,-(sp)
   12274:	|     |   jsr 14ee2 <setVariable>
   1227a:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   1227e:	|     \-> moveq #2,d0
}
   12280:	\-------> addq.l #8,sp
   12282:	          rts

00012284 <builtIn_isCharacter>:

builtIn(isCharacter)
{
   12284:	       subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12286:	       movea.l 16(sp),a0
   1228a:	       move.l 24(a0),d0
   1228e:	       move.l d0,-(sp)
   12290:	       pea 7 <_start+0x7>
   12294:	       move.l sp,d0
   12296:	       addq.l #8,d0
   12298:	       move.l d0,-(sp)
   1229a:	       jsr 145f0 <getValueType>
   122a0:	       lea 12(sp),sp
   122a4:	       tst.w d0
   122a6:	   /-- bne.s 122ac <builtIn_isCharacter+0x28>
   122a8:	   |   moveq #1,d0
   122aa:	/--|-- bra.s 122ee <builtIn_isCharacter+0x6a>
	trimStack (&fun -> stack);
   122ac:	|  \-> moveq #24,d0
   122ae:	|      add.l 16(sp),d0
   122b2:	|      move.l d0,-(sp)
   122b4:	|      jsr 14f74 <trimStack>
   122ba:	|      addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   122bc:	|      move.l (sp),d0
   122be:	|      move.l d0,-(sp)
   122c0:	|      jsr a454 <findPerson>
   122c6:	|      addq.l #4,sp
   122c8:	|      move.l d0,4(sp)
	setVariable (&fun -> reg, SVT_INT, thisPerson != NULL);
   122cc:	|      sne d0
   122ce:	|      neg.b d0
   122d0:	|      moveq #0,d1
   122d2:	|      move.b d0,d1
   122d4:	|      moveq #28,d0
   122d6:	|      add.l 16(sp),d0
   122da:	|      move.l d1,-(sp)
   122dc:	|      pea 1 <_start+0x1>
   122e0:	|      move.l d0,-(sp)
   122e2:	|      jsr 14ee2 <setVariable>
   122e8:	|      lea 12(sp),sp
	return BR_CONTINUE;
   122ec:	|      moveq #2,d0
}
   122ee:	\----> addq.l #8,sp
   122f0:	       rts

000122f2 <builtIn_normalCharacter>:

builtIn(normalCharacter)
{
   122f2:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   122f4:	          movea.l 16(sp),a0
   122f8:	          move.l 24(a0),d0
   122fc:	          move.l d0,-(sp)
   122fe:	          pea 7 <_start+0x7>
   12302:	          move.l sp,d0
   12304:	          addq.l #8,d0
   12306:	          move.l d0,-(sp)
   12308:	          jsr 145f0 <getValueType>
   1230e:	          lea 12(sp),sp
   12312:	          tst.w d0
   12314:	      /-- bne.s 1231a <builtIn_normalCharacter+0x28>
   12316:	      |   moveq #1,d0
   12318:	/-----|-- bra.s 12396 <builtIn_normalCharacter+0xa4>
	trimStack (&fun -> stack);
   1231a:	|     \-> moveq #24,d0
   1231c:	|         add.l 16(sp),d0
   12320:	|         move.l d0,-(sp)
   12322:	|         jsr 14f74 <trimStack>
   12328:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   1232a:	|         move.l (sp),d0
   1232c:	|         move.l d0,-(sp)
   1232e:	|         jsr a454 <findPerson>
   12334:	|         addq.l #4,sp
   12336:	|         move.l d0,4(sp)
	if (thisPerson)
   1233a:	|  /----- beq.s 1237c <builtIn_normalCharacter+0x8a>
	{
		thisPerson -> myAnim = thisPerson -> myPersona -> animation[thisPerson -> direction];
   1233c:	|  |      movea.l 4(sp),a0
   12340:	|  |      movea.l 80(a0),a0
   12344:	|  |      move.l (a0),d1
   12346:	|  |      movea.l 4(sp),a0
   1234a:	|  |      move.l 106(a0),d0
   1234e:	|  |      add.l d0,d0
   12350:	|  |      add.l d0,d0
   12352:	|  |      movea.l d1,a0
   12354:	|  |      adda.l d0,a0
   12356:	|  |      move.l (a0),d0
   12358:	|  |      movea.l 4(sp),a0
   1235c:	|  |      move.l d0,72(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   12360:	|  |      moveq #28,d0
   12362:	|  |      add.l 16(sp),d0
   12366:	|  |      pea 1 <_start+0x1>
   1236a:	|  |      pea 1 <_start+0x1>
   1236e:	|  |      move.l d0,-(sp)
   12370:	|  |      jsr 14ee2 <setVariable>
   12376:	|  |      lea 12(sp),sp
   1237a:	|  |  /-- bra.s 12394 <builtIn_normalCharacter+0xa2>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   1237c:	|  \--|-> moveq #28,d0
   1237e:	|     |   add.l 16(sp),d0
   12382:	|     |   clr.l -(sp)
   12384:	|     |   pea 1 <_start+0x1>
   12388:	|     |   move.l d0,-(sp)
   1238a:	|     |   jsr 14ee2 <setVariable>
   12390:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   12394:	|     \-> moveq #2,d0
}
   12396:	\-------> addq.l #8,sp
   12398:	          rts

0001239a <builtIn_isMoving>:

builtIn(isMoving)
{
   1239a:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1239c:	          movea.l 16(sp),a0
   123a0:	          move.l 24(a0),d0
   123a4:	          move.l d0,-(sp)
   123a6:	          pea 7 <_start+0x7>
   123aa:	          move.l sp,d0
   123ac:	          addq.l #8,d0
   123ae:	          move.l d0,-(sp)
   123b0:	          jsr 145f0 <getValueType>
   123b6:	          lea 12(sp),sp
   123ba:	          tst.w d0
   123bc:	      /-- bne.s 123c2 <builtIn_isMoving+0x28>
   123be:	      |   moveq #1,d0
   123c0:	/-----|-- bra.s 12422 <builtIn_isMoving+0x88>
	trimStack (&fun -> stack);
   123c2:	|     \-> moveq #24,d0
   123c4:	|         add.l 16(sp),d0
   123c8:	|         move.l d0,-(sp)
   123ca:	|         jsr 14f74 <trimStack>
   123d0:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   123d2:	|         move.l (sp),d0
   123d4:	|         move.l d0,-(sp)
   123d6:	|         jsr a454 <findPerson>
   123dc:	|         addq.l #4,sp
   123de:	|         move.l d0,4(sp)
	if (thisPerson)
   123e2:	|  /----- beq.s 12408 <builtIn_isMoving+0x6e>
	{
		setVariable (&fun -> reg, SVT_INT, thisPerson -> walking);
   123e4:	|  |      movea.l 4(sp),a0
   123e8:	|  |      move.w 64(a0),d0
   123ec:	|  |      movea.w d0,a0
   123ee:	|  |      moveq #28,d0
   123f0:	|  |      add.l 16(sp),d0
   123f4:	|  |      move.l a0,-(sp)
   123f6:	|  |      pea 1 <_start+0x1>
   123fa:	|  |      move.l d0,-(sp)
   123fc:	|  |      jsr 14ee2 <setVariable>
   12402:	|  |      lea 12(sp),sp
   12406:	|  |  /-- bra.s 12420 <builtIn_isMoving+0x86>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   12408:	|  \--|-> moveq #28,d0
   1240a:	|     |   add.l 16(sp),d0
   1240e:	|     |   clr.l -(sp)
   12410:	|     |   pea 1 <_start+0x1>
   12414:	|     |   move.l d0,-(sp)
   12416:	|     |   jsr 14ee2 <setVariable>
   1241c:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   12420:	|     \-> moveq #2,d0
}
   12422:	\-------> addq.l #8,sp
   12424:	          rts

00012426 <builtIn_fetchEvent>:

builtIn(fetchEvent)
{
   12426:	          lea -12(sp),sp
	UNUSEDALL
	int obj1, obj2;
	if (! getValueType(&obj2, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1242a:	          movea.l 20(sp),a0
   1242e:	          move.l 24(a0),d0
   12432:	          move.l d0,-(sp)
   12434:	          pea 7 <_start+0x7>
   12438:	          lea 8(sp),a0
   1243c:	          move.l a0,-(sp)
   1243e:	          jsr 145f0 <getValueType>
   12444:	          lea 12(sp),sp
   12448:	          tst.w d0
   1244a:	      /-- bne.s 12452 <builtIn_fetchEvent+0x2c>
   1244c:	      |   moveq #1,d0
   1244e:	/-----|-- bra.w 124e6 <builtIn_fetchEvent+0xc0>
	trimStack (&fun -> stack);
   12452:	|     \-> moveq #24,d0
   12454:	|         add.l 20(sp),d0
   12458:	|         move.l d0,-(sp)
   1245a:	|         jsr 14f74 <trimStack>
   12460:	|         addq.l #4,sp
	if (! getValueType(&obj1, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12462:	|         movea.l 20(sp),a0
   12466:	|         move.l 24(a0),d0
   1246a:	|         move.l d0,-(sp)
   1246c:	|         pea 7 <_start+0x7>
   12470:	|         moveq #12,d0
   12472:	|         add.l sp,d0
   12474:	|         move.l d0,-(sp)
   12476:	|         jsr 145f0 <getValueType>
   1247c:	|         lea 12(sp),sp
   12480:	|         tst.w d0
   12482:	|     /-- bne.s 12488 <builtIn_fetchEvent+0x62>
   12484:	|     |   moveq #1,d0
   12486:	+-----|-- bra.s 124e6 <builtIn_fetchEvent+0xc0>
	trimStack (&fun -> stack);
   12488:	|     \-> moveq #24,d0
   1248a:	|         add.l 20(sp),d0
   1248e:	|         move.l d0,-(sp)
   12490:	|         jsr 14f74 <trimStack>
   12496:	|         addq.l #4,sp

	int fNum = getCombinationFunction (obj1, obj2);
   12498:	|         move.l (sp),d1
   1249a:	|         move.l 4(sp),d0
   1249e:	|         move.l d1,-(sp)
   124a0:	|         move.l d0,-(sp)
   124a2:	|         jsr d38a <getCombinationFunction>
   124a8:	|         addq.l #8,sp
   124aa:	|         move.l d0,8(sp)

	// Return value
	if (fNum) {
   124ae:	|  /----- beq.s 124cc <builtIn_fetchEvent+0xa6>
		setVariable (&fun -> reg, SVT_FUNC, fNum);
   124b0:	|  |      moveq #28,d0
   124b2:	|  |      add.l 20(sp),d0
   124b6:	|  |      move.l 8(sp),-(sp)
   124ba:	|  |      pea 2 <_start+0x2>
   124be:	|  |      move.l d0,-(sp)
   124c0:	|  |      jsr 14ee2 <setVariable>
   124c6:	|  |      lea 12(sp),sp
   124ca:	|  |  /-- bra.s 124e4 <builtIn_fetchEvent+0xbe>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   124cc:	|  \--|-> moveq #28,d0
   124ce:	|     |   add.l 20(sp),d0
   124d2:	|     |   clr.l -(sp)
   124d4:	|     |   pea 1 <_start+0x1>
   124d8:	|     |   move.l d0,-(sp)
   124da:	|     |   jsr 14ee2 <setVariable>
   124e0:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   124e4:	|     \-> moveq #2,d0
}
   124e6:	\-------> lea 12(sp),sp
   124ea:	          rts

000124ec <builtIn_deleteFile>:

builtIn(deleteFile)
{
   124ec:	       lea -24(sp),sp
   124f0:	       move.l a6,-(sp)
    UNUSEDALL

    char *namNormal = getTextFromAnyVar(&(fun->stack->thisVar));
   124f2:	       movea.l 36(sp),a0
   124f6:	       move.l 24(a0),d0
   124fa:	       move.l d0,-(sp)
   124fc:	       jsr 14bc6 <getTextFromAnyVar>
   12502:	       addq.l #4,sp
   12504:	       move.l d0,24(sp)
    trimStack(&fun->stack);
   12508:	       moveq #24,d0
   1250a:	       add.l 36(sp),d0
   1250e:	       move.l d0,-(sp)
   12510:	       jsr 14f74 <trimStack>
   12516:	       addq.l #4,sp
    char *nam = encodeFilename(namNormal);
   12518:	       move.l 24(sp),-(sp)
   1251c:	       jsr 2fe <encodeFilename>
   12522:	       addq.l #4,sp
   12524:	       move.l d0,20(sp)
    FreeVec(namNormal);
   12528:	       move.l 24(sp),16(sp)
   1252e:	       move.l 1a7a4 <SysBase>,d0
   12534:	       movea.l d0,a6
   12536:	       movea.l 16(sp),a1
   1253a:	       jsr -690(a6)
    if (failSecurityCheck(nam)) return BR_ERROR;
   1253e:	       move.l 20(sp),-(sp)
   12542:	       jsr e142 <failSecurityCheck>
   12548:	       addq.l #4,sp
   1254a:	       tst.w d0
   1254c:	   /-- beq.s 12552 <builtIn_deleteFile+0x66>
   1254e:	   |   moveq #1,d0
   12550:	/--|-- bra.s 125a0 <builtIn_deleteFile+0xb4>
    setVariable(&fun->reg, SVT_INT, DeleteFile(nam));
   12552:	|  \-> move.l 20(sp),12(sp)
   12558:	|      move.l 1a7ac <DOSBase>,d0
   1255e:	|      movea.l d0,a6
   12560:	|      move.l 12(sp),d1
   12564:	|      jsr -72(a6)
   12568:	|      move.l d0,8(sp)
   1256c:	|      move.l 8(sp),d1
   12570:	|      moveq #28,d0
   12572:	|      add.l 36(sp),d0
   12576:	|      move.l d1,-(sp)
   12578:	|      pea 1 <_start+0x1>
   1257c:	|      move.l d0,-(sp)
   1257e:	|      jsr 14ee2 <setVariable>
   12584:	|      lea 12(sp),sp
    FreeVec(nam);
   12588:	|      move.l 20(sp),4(sp)
   1258e:	|      move.l 1a7a4 <SysBase>,d0
   12594:	|      movea.l d0,a6
   12596:	|      movea.l 4(sp),a1
   1259a:	|      jsr -690(a6)

    return BR_CONTINUE;
   1259e:	|      moveq #2,d0
}
   125a0:	\----> movea.l (sp)+,a6
   125a2:	       lea 24(sp),sp
   125a6:	       rts

000125a8 <builtIn_renameFile>:

builtIn(renameFile)
{
   125a8:	       lea -40(sp),sp
   125ac:	       move.l a6,-(sp)
   125ae:	       move.l d2,-(sp)
	UNUSEDALL
	char * temp;

	temp = getTextFromAnyVar(&(fun->stack->thisVar));
   125b0:	       movea.l 56(sp),a0
   125b4:	       move.l 24(a0),d0
   125b8:	       move.l d0,-(sp)
   125ba:	       jsr 14bc6 <getTextFromAnyVar>
   125c0:	       addq.l #4,sp
   125c2:	       move.l d0,44(sp)
	char * newnam = encodeFilename(temp);
   125c6:	       move.l 44(sp),-(sp)
   125ca:	       jsr 2fe <encodeFilename>
   125d0:	       addq.l #4,sp
   125d2:	       move.l d0,40(sp)
	trimStack(&fun->stack);
   125d6:	       moveq #24,d0
   125d8:	       add.l 56(sp),d0
   125dc:	       move.l d0,-(sp)
   125de:	       jsr 14f74 <trimStack>
   125e4:	       addq.l #4,sp
	if (failSecurityCheck(newnam)) return BR_ERROR;
   125e6:	       move.l 40(sp),-(sp)
   125ea:	       jsr e142 <failSecurityCheck>
   125f0:	       addq.l #4,sp
   125f2:	       tst.w d0
   125f4:	   /-- beq.s 125fc <builtIn_renameFile+0x54>
   125f6:	   |   moveq #1,d0
   125f8:	/--|-- bra.w 126e2 <builtIn_renameFile+0x13a>
	FreeVec(temp);
   125fc:	|  \-> move.l 44(sp),36(sp)
   12602:	|      move.l 1a7a4 <SysBase>,d0
   12608:	|      movea.l d0,a6
   1260a:	|      movea.l 36(sp),a1
   1260e:	|      jsr -690(a6)

	temp = getTextFromAnyVar(&(fun->stack->thisVar));
   12612:	|      movea.l 56(sp),a0
   12616:	|      move.l 24(a0),d0
   1261a:	|      move.l d0,-(sp)
   1261c:	|      jsr 14bc6 <getTextFromAnyVar>
   12622:	|      addq.l #4,sp
   12624:	|      move.l d0,44(sp)
	char * nam = encodeFilename(temp);
   12628:	|      move.l 44(sp),-(sp)
   1262c:	|      jsr 2fe <encodeFilename>
   12632:	|      addq.l #4,sp
   12634:	|      move.l d0,32(sp)
	trimStack(&fun->stack);
   12638:	|      moveq #24,d0
   1263a:	|      add.l 56(sp),d0
   1263e:	|      move.l d0,-(sp)
   12640:	|      jsr 14f74 <trimStack>
   12646:	|      addq.l #4,sp
	if (failSecurityCheck(nam)) return BR_ERROR;
   12648:	|      move.l 32(sp),-(sp)
   1264c:	|      jsr e142 <failSecurityCheck>
   12652:	|      addq.l #4,sp
   12654:	|      tst.w d0
   12656:	|  /-- beq.s 1265e <builtIn_renameFile+0xb6>
   12658:	|  |   moveq #1,d0
   1265a:	+--|-- bra.w 126e2 <builtIn_renameFile+0x13a>
	FreeVec(temp);
   1265e:	|  \-> move.l 44(sp),28(sp)
   12664:	|      move.l 1a7a4 <SysBase>,d0
   1266a:	|      movea.l d0,a6
   1266c:	|      movea.l 28(sp),a1
   12670:	|      jsr -690(a6)

	setVariable(&fun->reg, SVT_INT, Rename(nam, newnam));
   12674:	|      move.l 32(sp),24(sp)
   1267a:	|      move.l 40(sp),20(sp)
   12680:	|      move.l 1a7ac <DOSBase>,d0
   12686:	|      movea.l d0,a6
   12688:	|      move.l 24(sp),d1
   1268c:	|      move.l 20(sp),d2
   12690:	|      jsr -78(a6)
   12694:	|      move.l d0,16(sp)
   12698:	|      move.l 16(sp),d1
   1269c:	|      moveq #28,d0
   1269e:	|      add.l 56(sp),d0
   126a2:	|      move.l d1,-(sp)
   126a4:	|      pea 1 <_start+0x1>
   126a8:	|      move.l d0,-(sp)
   126aa:	|      jsr 14ee2 <setVariable>
   126b0:	|      lea 12(sp),sp
	FreeVec(nam);
   126b4:	|      move.l 32(sp),12(sp)
   126ba:	|      move.l 1a7a4 <SysBase>,d0
   126c0:	|      movea.l d0,a6
   126c2:	|      movea.l 12(sp),a1
   126c6:	|      jsr -690(a6)
	FreeVec(newnam);
   126ca:	|      move.l 40(sp),8(sp)
   126d0:	|      move.l 1a7a4 <SysBase>,d0
   126d6:	|      movea.l d0,a6
   126d8:	|      movea.l 8(sp),a1
   126dc:	|      jsr -690(a6)

	return BR_CONTINUE;
   126e0:	|      moveq #2,d0
}
   126e2:	\----> move.l (sp)+,d2
   126e4:	       movea.l (sp)+,a6
   126e6:	       lea 40(sp),sp
   126ea:	       rts

000126ec <builtIn_cacheSound>:

builtIn(cacheSound)
{
   126ec:	       subq.l #4,sp
	UNUSEDALL
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   126ee:	       movea.l 12(sp),a0
   126f2:	       move.l 24(a0),d0
   126f6:	       move.l d0,-(sp)
   126f8:	       pea 5 <_start+0x5>
   126fc:	       move.l sp,d0
   126fe:	       addq.l #8,d0
   12700:	       move.l d0,-(sp)
   12702:	       jsr 145f0 <getValueType>
   12708:	       lea 12(sp),sp
   1270c:	       tst.w d0
   1270e:	   /-- bne.s 12714 <builtIn_cacheSound+0x28>
   12710:	   |   moveq #1,d0
   12712:	/--|-- bra.s 1273c <builtIn_cacheSound+0x50>
	trimStack (&fun -> stack);
   12714:	|  \-> moveq #24,d0
   12716:	|      add.l 12(sp),d0
   1271a:	|      move.l d0,-(sp)
   1271c:	|      jsr 14f74 <trimStack>
   12722:	|      addq.l #4,sp
	if (cacheSound (fileNumber) == -1) return BR_ERROR;
   12724:	|      move.l (sp),d0
   12726:	|      move.l d0,-(sp)
   12728:	|      jsr cf8a <cacheSound>
   1272e:	|      addq.l #4,sp
   12730:	|      moveq #-1,d1
   12732:	|      cmp.l d0,d1
   12734:	|  /-- bne.s 1273a <builtIn_cacheSound+0x4e>
   12736:	|  |   moveq #1,d0
   12738:	+--|-- bra.s 1273c <builtIn_cacheSound+0x50>
	return BR_CONTINUE;
   1273a:	|  \-> moveq #2,d0
}
   1273c:	\----> addq.l #4,sp
   1273e:	       rts

00012740 <builtIn_burnString>:
	trimStack (&fun -> stack);
	if (x == IN_THE_CENTRE) x = (winWidth - stringWidth (newText)) >> 1;
	fixFont (pastePalette);
	burnStringToBackdrop (newText, x, y, pastePalette);
	delete[] newText; Todo: Amigize this*/
	KPrintF("burnString: Not implemented for Amiga yet");
   12740:	pea 19988 <PutChar+0x1eaa>
   12746:	jsr 1703c <KPrintF>
   1274c:	addq.l #4,sp
	return BR_CONTINUE;
   1274e:	moveq #2,d0
}
   12750:	rts

00012752 <builtIn_setCharacterSpinSpeed>:

builtIn(setCharacterSpinSpeed)
{
   12752:	          lea -12(sp),sp
	UNUSEDALL
	int speed, who;
	if (! getValueType(&speed, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12756:	          movea.l 20(sp),a0
   1275a:	          move.l 24(a0),d0
   1275e:	          move.l d0,-(sp)
   12760:	          pea 1 <_start+0x1>
   12764:	          moveq #12,d0
   12766:	          add.l sp,d0
   12768:	          move.l d0,-(sp)
   1276a:	          jsr 145f0 <getValueType>
   12770:	          lea 12(sp),sp
   12774:	          tst.w d0
   12776:	      /-- bne.s 1277e <builtIn_setCharacterSpinSpeed+0x2c>
   12778:	      |   moveq #1,d0
   1277a:	/-----|-- bra.w 12818 <builtIn_setCharacterSpinSpeed+0xc6>
	trimStack (&fun -> stack);
   1277e:	|     \-> moveq #24,d0
   12780:	|         add.l 20(sp),d0
   12784:	|         move.l d0,-(sp)
   12786:	|         jsr 14f74 <trimStack>
   1278c:	|         addq.l #4,sp
	if (! getValueType(&who, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1278e:	|         movea.l 20(sp),a0
   12792:	|         move.l 24(a0),d0
   12796:	|         move.l d0,-(sp)
   12798:	|         pea 7 <_start+0x7>
   1279c:	|         lea 8(sp),a0
   127a0:	|         move.l a0,-(sp)
   127a2:	|         jsr 145f0 <getValueType>
   127a8:	|         lea 12(sp),sp
   127ac:	|         tst.w d0
   127ae:	|     /-- bne.s 127b4 <builtIn_setCharacterSpinSpeed+0x62>
   127b0:	|     |   moveq #1,d0
   127b2:	+-----|-- bra.s 12818 <builtIn_setCharacterSpinSpeed+0xc6>
	trimStack (&fun -> stack);
   127b4:	|     \-> moveq #24,d0
   127b6:	|         add.l 20(sp),d0
   127ba:	|         move.l d0,-(sp)
   127bc:	|         jsr 14f74 <trimStack>
   127c2:	|         addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (who);
   127c4:	|         move.l (sp),d0
   127c6:	|         move.l d0,-(sp)
   127c8:	|         jsr a454 <findPerson>
   127ce:	|         addq.l #4,sp
   127d0:	|         move.l d0,8(sp)

	if (thisPerson) {
   127d4:	|  /----- beq.s 127fe <builtIn_setCharacterSpinSpeed+0xac>
		thisPerson -> spinSpeed = speed;
   127d6:	|  |      move.l 4(sp),d0
   127da:	|  |      movea.l 8(sp),a0
   127de:	|  |      move.l d0,122(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   127e2:	|  |      moveq #28,d0
   127e4:	|  |      add.l 20(sp),d0
   127e8:	|  |      pea 1 <_start+0x1>
   127ec:	|  |      pea 1 <_start+0x1>
   127f0:	|  |      move.l d0,-(sp)
   127f2:	|  |      jsr 14ee2 <setVariable>
   127f8:	|  |      lea 12(sp),sp
   127fc:	|  |  /-- bra.s 12816 <builtIn_setCharacterSpinSpeed+0xc4>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   127fe:	|  \--|-> moveq #28,d0
   12800:	|     |   add.l 20(sp),d0
   12804:	|     |   clr.l -(sp)
   12806:	|     |   pea 1 <_start+0x1>
   1280a:	|     |   move.l d0,-(sp)
   1280c:	|     |   jsr 14ee2 <setVariable>
   12812:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   12816:	|     \-> moveq #2,d0
}
   12818:	\-------> lea 12(sp),sp
   1281c:	          rts

0001281e <builtIn_setCharacterAngleOffset>:

builtIn(setCharacterAngleOffset)
{
   1281e:	          lea -12(sp),sp
	UNUSEDALL
	int angle, who;
	if (! getValueType(&angle, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12822:	          movea.l 20(sp),a0
   12826:	          move.l 24(a0),d0
   1282a:	          move.l d0,-(sp)
   1282c:	          pea 1 <_start+0x1>
   12830:	          moveq #12,d0
   12832:	          add.l sp,d0
   12834:	          move.l d0,-(sp)
   12836:	          jsr 145f0 <getValueType>
   1283c:	          lea 12(sp),sp
   12840:	          tst.w d0
   12842:	      /-- bne.s 1284a <builtIn_setCharacterAngleOffset+0x2c>
   12844:	      |   moveq #1,d0
   12846:	/-----|-- bra.w 128e4 <builtIn_setCharacterAngleOffset+0xc6>
	trimStack (&fun -> stack);
   1284a:	|     \-> moveq #24,d0
   1284c:	|         add.l 20(sp),d0
   12850:	|         move.l d0,-(sp)
   12852:	|         jsr 14f74 <trimStack>
   12858:	|         addq.l #4,sp
	if (! getValueType(&who, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1285a:	|         movea.l 20(sp),a0
   1285e:	|         move.l 24(a0),d0
   12862:	|         move.l d0,-(sp)
   12864:	|         pea 7 <_start+0x7>
   12868:	|         lea 8(sp),a0
   1286c:	|         move.l a0,-(sp)
   1286e:	|         jsr 145f0 <getValueType>
   12874:	|         lea 12(sp),sp
   12878:	|         tst.w d0
   1287a:	|     /-- bne.s 12880 <builtIn_setCharacterAngleOffset+0x62>
   1287c:	|     |   moveq #1,d0
   1287e:	+-----|-- bra.s 128e4 <builtIn_setCharacterAngleOffset+0xc6>
	trimStack (&fun -> stack);
   12880:	|     \-> moveq #24,d0
   12882:	|         add.l 20(sp),d0
   12886:	|         move.l d0,-(sp)
   12888:	|         jsr 14f74 <trimStack>
   1288e:	|         addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (who);
   12890:	|         move.l (sp),d0
   12892:	|         move.l d0,-(sp)
   12894:	|         jsr a454 <findPerson>
   1289a:	|         addq.l #4,sp
   1289c:	|         move.l d0,8(sp)

	if (thisPerson) {
   128a0:	|  /----- beq.s 128ca <builtIn_setCharacterAngleOffset+0xac>
		thisPerson -> angleOffset = angle;
   128a2:	|  |      move.l 4(sp),d0
   128a6:	|  |      movea.l 8(sp),a0
   128aa:	|  |      move.l d0,100(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   128ae:	|  |      moveq #28,d0
   128b0:	|  |      add.l 20(sp),d0
   128b4:	|  |      pea 1 <_start+0x1>
   128b8:	|  |      pea 1 <_start+0x1>
   128bc:	|  |      move.l d0,-(sp)
   128be:	|  |      jsr 14ee2 <setVariable>
   128c4:	|  |      lea 12(sp),sp
   128c8:	|  |  /-- bra.s 128e2 <builtIn_setCharacterAngleOffset+0xc4>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   128ca:	|  \--|-> moveq #28,d0
   128cc:	|     |   add.l 20(sp),d0
   128d0:	|     |   clr.l -(sp)
   128d2:	|     |   pea 1 <_start+0x1>
   128d6:	|     |   move.l d0,-(sp)
   128d8:	|     |   jsr 14ee2 <setVariable>
   128de:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   128e2:	|     \-> moveq #2,d0
}
   128e4:	\-------> lea 12(sp),sp
   128e8:	          rts

000128ea <builtIn_transitionMode>:


builtIn(transitionMode)
{
   128ea:	       subq.l #4,sp
	UNUSEDALL
	int n;
	if (! getValueType(&n, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   128ec:	       movea.l 12(sp),a0
   128f0:	       move.l 24(a0),d0
   128f4:	       move.l d0,-(sp)
   128f6:	       pea 1 <_start+0x1>
   128fa:	       move.l sp,d0
   128fc:	       addq.l #8,d0
   128fe:	       move.l d0,-(sp)
   12900:	       jsr 145f0 <getValueType>
   12906:	       lea 12(sp),sp
   1290a:	       tst.w d0
   1290c:	   /-- bne.s 12912 <builtIn_transitionMode+0x28>
   1290e:	   |   moveq #1,d0
   12910:	/--|-- bra.s 12948 <builtIn_transitionMode+0x5e>
	fadeMode = n;
   12912:	|  \-> move.l (sp),d0
   12914:	|      move.l d0,d0
   12916:	|      move.b d0,1a67e <fadeMode>
	trimStack (&fun -> stack);
   1291c:	|      moveq #24,d0
   1291e:	|      add.l 12(sp),d0
   12922:	|      move.l d0,-(sp)
   12924:	|      jsr 14f74 <trimStack>
   1292a:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   1292c:	|      moveq #28,d0
   1292e:	|      add.l 12(sp),d0
   12932:	|      pea 1 <_start+0x1>
   12936:	|      pea 1 <_start+0x1>
   1293a:	|      move.l d0,-(sp)
   1293c:	|      jsr 14ee2 <setVariable>
   12942:	|      lea 12(sp),sp
	return BR_CONTINUE;
   12946:	|      moveq #2,d0
}
   12948:	\----> addq.l #4,sp
   1294a:	       rts

0001294c <builtIn__rem_updateDisplay>:

// Removed function - does nothing
builtIn(_rem_updateDisplay)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   1294c:	moveq #24,d0
   1294e:	add.l 8(sp),d0
   12952:	move.l d0,-(sp)
   12954:	jsr 14f74 <trimStack>
   1295a:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, TRUE);
   1295c:	moveq #28,d0
   1295e:	add.l 8(sp),d0
   12962:	pea 1 <_start+0x1>
   12966:	pea 1 <_start+0x1>
   1296a:	move.l d0,-(sp)
   1296c:	jsr 14ee2 <setVariable>
   12972:	lea 12(sp),sp
	return BR_CONTINUE;
   12976:	moveq #2,d0
}
   12978:	rts

0001297a <builtIn_getSoundCache>:
	if (! checkNew (&fun -> reg.varData.theStack)) return BR_ERROR;
	fun -> reg.varData.theStack -> first = NULL;
	fun -> reg.varData.theStack -> last = NULL;
	fun -> reg.varData.theStack -> timesUsed = 1;
	if (! getSoundCacheStack (&fun -> reg.varData.theStack)) return BR_ERROR; Todo: Amigize this?*/
	KPrintF("getSoundCache: Not implemented yet for Amiga");
   1297a:	pea 199b2 <PutChar+0x1ed4>
   12980:	jsr 1703c <KPrintF>
   12986:	addq.l #4,sp
	return BR_CONTINUE;
   12988:	moveq #2,d0
}
   1298a:	rts

0001298c <builtIn_saveCustomData>:

builtIn(saveCustomData)
{
   1298c:	       lea -16(sp),sp
   12990:	       move.l a6,-(sp)
	UNUSEDALL
	// saveCustomData (thisStack, fileName);
	char * fileNameB = getTextFromAnyVar(&(fun->stack->thisVar));
   12992:	       movea.l 28(sp),a0
   12996:	       move.l 24(a0),d0
   1299a:	       move.l d0,-(sp)
   1299c:	       jsr 14bc6 <getTextFromAnyVar>
   129a2:	       addq.l #4,sp
   129a4:	       move.l d0,16(sp)
	if (!fileNameB) return BR_ERROR;
   129a8:	   /-- bne.s 129b0 <builtIn_saveCustomData+0x24>
   129aa:	   |   moveq #1,d0
   129ac:	/--|-- bra.w 12a62 <builtIn_saveCustomData+0xd6>

	char * fileName = encodeFilename(fileNameB);
   129b0:	|  \-> move.l 16(sp),-(sp)
   129b4:	|      jsr 2fe <encodeFilename>
   129ba:	|      addq.l #4,sp
   129bc:	|      move.l d0,12(sp)
	FreeVec(fileNameB);
   129c0:	|      move.l 16(sp),8(sp)
   129c6:	|      move.l 1a7a4 <SysBase>,d0
   129cc:	|      movea.l d0,a6
   129ce:	|      movea.l 8(sp),a1
   129d2:	|      jsr -690(a6)

	if (failSecurityCheck(fileName)) return BR_ERROR;
   129d6:	|      move.l 12(sp),-(sp)
   129da:	|      jsr e142 <failSecurityCheck>
   129e0:	|      addq.l #4,sp
   129e2:	|      tst.w d0
   129e4:	|  /-- beq.s 129ea <builtIn_saveCustomData+0x5e>
   129e6:	|  |   moveq #1,d0
   129e8:	+--|-- bra.s 12a62 <builtIn_saveCustomData+0xd6>
	trimStack(&fun->stack);
   129ea:	|  \-> moveq #24,d0
   129ec:	|      add.l 28(sp),d0
   129f0:	|      move.l d0,-(sp)
   129f2:	|      jsr 14f74 <trimStack>
   129f8:	|      addq.l #4,sp

	if (fun->stack->thisVar.varType != SVT_STACK) {
   129fa:	|      movea.l 28(sp),a0
   129fe:	|      movea.l 24(a0),a0
   12a02:	|      move.l (a0),d0
   12a04:	|      moveq #6,d1
   12a06:	|      cmp.l d0,d1
   12a08:	|  /-- beq.s 12a1c <builtIn_saveCustomData+0x90>
		KPrintF("First parameter isn't a stack");
   12a0a:	|  |   pea 199df <PutChar+0x1f01>
   12a10:	|  |   jsr 1703c <KPrintF>
   12a16:	|  |   addq.l #4,sp
		return BR_ERROR;
   12a18:	|  |   moveq #1,d0
   12a1a:	+--|-- bra.s 12a62 <builtIn_saveCustomData+0xd6>
	}
	if (!stackToFile(fileName, &fun->stack->thisVar)) return BR_ERROR;
   12a1c:	|  \-> movea.l 28(sp),a0
   12a20:	|      move.l 24(a0),d0
   12a24:	|      move.l d0,-(sp)
   12a26:	|      move.l 16(sp),-(sp)
   12a2a:	|      jsr dd92 <stackToFile>
   12a30:	|      addq.l #8,sp
   12a32:	|      tst.w d0
   12a34:	|  /-- bne.s 12a3a <builtIn_saveCustomData+0xae>
   12a36:	|  |   moveq #1,d0
   12a38:	+--|-- bra.s 12a62 <builtIn_saveCustomData+0xd6>
	trimStack(&fun->stack);
   12a3a:	|  \-> moveq #24,d0
   12a3c:	|      add.l 28(sp),d0
   12a40:	|      move.l d0,-(sp)
   12a42:	|      jsr 14f74 <trimStack>
   12a48:	|      addq.l #4,sp
	FreeVec(fileName);
   12a4a:	|      move.l 12(sp),4(sp)
   12a50:	|      move.l 1a7a4 <SysBase>,d0
   12a56:	|      movea.l d0,a6
   12a58:	|      movea.l 4(sp),a1
   12a5c:	|      jsr -690(a6)
	return BR_CONTINUE;
   12a60:	|      moveq #2,d0
}
   12a62:	\----> movea.l (sp)+,a6
   12a64:	       lea 16(sp),sp
   12a68:	       rts

00012a6a <builtIn_loadCustomData>:

builtIn(loadCustomData)
{
   12a6a:	       lea -28(sp),sp
   12a6e:	       move.l a6,-(sp)
	UNUSEDALL

	char * newTextA = getTextFromAnyVar(&(fun->stack->thisVar));
   12a70:	       movea.l 40(sp),a0
   12a74:	       move.l 24(a0),d0
   12a78:	       move.l d0,-(sp)
   12a7a:	       jsr 14bc6 <getTextFromAnyVar>
   12a80:	       addq.l #4,sp
   12a82:	       move.l d0,28(sp)
	if (!newTextA) return BR_ERROR;
   12a86:	   /-- bne.s 12a8e <builtIn_loadCustomData+0x24>
   12a88:	   |   moveq #1,d0
   12a8a:	/--|-- bra.w 12b8a <builtIn_loadCustomData+0x120>

	char * newText = encodeFilename(newTextA);
   12a8e:	|  \-> move.l 28(sp),-(sp)
   12a92:	|      jsr 2fe <encodeFilename>
   12a98:	|      addq.l #4,sp
   12a9a:	|      move.l d0,24(sp)
	FreeVec(newTextA);
   12a9e:	|      move.l 28(sp),20(sp)
   12aa4:	|      move.l 1a7a4 <SysBase>,d0
   12aaa:	|      movea.l d0,a6
   12aac:	|      movea.l 20(sp),a1
   12ab0:	|      jsr -690(a6)

	if (failSecurityCheck(newText)) return BR_ERROR;
   12ab4:	|      move.l 24(sp),-(sp)
   12ab8:	|      jsr e142 <failSecurityCheck>
   12abe:	|      addq.l #4,sp
   12ac0:	|      tst.w d0
   12ac2:	|  /-- beq.s 12aca <builtIn_loadCustomData+0x60>
   12ac4:	|  |   moveq #1,d0
   12ac6:	+--|-- bra.w 12b8a <builtIn_loadCustomData+0x120>
	trimStack(&fun->stack);
   12aca:	|  \-> moveq #24,d0
   12acc:	|      add.l 40(sp),d0
   12ad0:	|      move.l d0,-(sp)
   12ad2:	|      jsr 14f74 <trimStack>
   12ad8:	|      addq.l #4,sp

	unlinkVar(&fun->reg);
   12ada:	|      moveq #28,d0
   12adc:	|      add.l 40(sp),d0
   12ae0:	|      move.l d0,-(sp)
   12ae2:	|      jsr 1483e <unlinkVar>
   12ae8:	|      addq.l #4,sp
	fun->reg.varType = SVT_STACK;
   12aea:	|      movea.l 40(sp),a0
   12aee:	|      moveq #6,d0
   12af0:	|      move.l d0,28(a0)
	fun->reg.varData.theStack = AllocVec(sizeof(struct stackHandler), MEMF_ANY);
   12af4:	|      moveq #12,d0
   12af6:	|      move.l d0,16(sp)
   12afa:	|      clr.l 12(sp)
   12afe:	|      move.l 1a7a4 <SysBase>,d0
   12b04:	|      movea.l d0,a6
   12b06:	|      move.l 16(sp),d0
   12b0a:	|      move.l 12(sp),d1
   12b0e:	|      jsr -684(a6)
   12b12:	|      move.l d0,8(sp)
   12b16:	|      move.l 8(sp),d0
   12b1a:	|      movea.l 40(sp),a0
   12b1e:	|      move.l d0,32(a0)
	if (!fun->reg.varData.theStack) return BR_ERROR;
   12b22:	|      movea.l 40(sp),a0
   12b26:	|      move.l 32(a0),d0
   12b2a:	|  /-- bne.s 12b30 <builtIn_loadCustomData+0xc6>
   12b2c:	|  |   moveq #1,d0
   12b2e:	+--|-- bra.s 12b8a <builtIn_loadCustomData+0x120>
	fun->reg.varData.theStack->first = NULL;
   12b30:	|  \-> movea.l 40(sp),a0
   12b34:	|      movea.l 32(a0),a0
   12b38:	|      clr.l (a0)
	fun->reg.varData.theStack->last = NULL;
   12b3a:	|      movea.l 40(sp),a0
   12b3e:	|      movea.l 32(a0),a0
   12b42:	|      clr.l 4(a0)
	fun->reg.varData.theStack->timesUsed = 1;
   12b46:	|      movea.l 40(sp),a0
   12b4a:	|      movea.l 32(a0),a0
   12b4e:	|      moveq #1,d0
   12b50:	|      move.l d0,8(a0)
	if (!fileToStack(newText, fun->reg.varData.theStack)) return BR_ERROR;
   12b54:	|      movea.l 40(sp),a0
   12b58:	|      move.l 32(a0),d0
   12b5c:	|      move.l d0,-(sp)
   12b5e:	|      move.l 28(sp),-(sp)
   12b62:	|      jsr d7cc <fileToStack>
   12b68:	|      addq.l #8,sp
   12b6a:	|      tst.w d0
   12b6c:	|  /-- bne.s 12b72 <builtIn_loadCustomData+0x108>
   12b6e:	|  |   moveq #1,d0
   12b70:	+--|-- bra.s 12b8a <builtIn_loadCustomData+0x120>
	FreeVec(newText);
   12b72:	|  \-> move.l 24(sp),4(sp)
   12b78:	|      move.l 1a7a4 <SysBase>,d0
   12b7e:	|      movea.l d0,a6
   12b80:	|      movea.l 4(sp),a1
   12b84:	|      jsr -690(a6)
	return BR_CONTINUE;
   12b88:	|      moveq #2,d0
}
   12b8a:	\----> movea.l (sp)+,a6
   12b8c:	       lea 28(sp),sp
   12b90:	       rts

00012b92 <builtIn_setCustomEncoding>:

builtIn(setCustomEncoding)
{
   12b92:	       subq.l #4,sp
	UNUSEDALL
	int n;
	if (! getValueType(&n, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12b94:	       movea.l 12(sp),a0
   12b98:	       move.l 24(a0),d0
   12b9c:	       move.l d0,-(sp)
   12b9e:	       pea 1 <_start+0x1>
   12ba2:	       move.l sp,d0
   12ba4:	       addq.l #8,d0
   12ba6:	       move.l d0,-(sp)
   12ba8:	       jsr 145f0 <getValueType>
   12bae:	       lea 12(sp),sp
   12bb2:	       tst.w d0
   12bb4:	   /-- bne.s 12bba <builtIn_setCustomEncoding+0x28>
   12bb6:	   |   moveq #1,d0
   12bb8:	/--|-- bra.s 12bf0 <builtIn_setCustomEncoding+0x5e>
	saveEncoding = n;
   12bba:	|  \-> move.l (sp),d0
   12bbc:	|      move.l d0,d0
   12bbe:	|      move.w d0,1a85c <saveEncoding>
	trimStack (&fun -> stack);
   12bc4:	|      moveq #24,d0
   12bc6:	|      add.l 12(sp),d0
   12bca:	|      move.l d0,-(sp)
   12bcc:	|      jsr 14f74 <trimStack>
   12bd2:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   12bd4:	|      moveq #28,d0
   12bd6:	|      add.l 12(sp),d0
   12bda:	|      pea 1 <_start+0x1>
   12bde:	|      pea 1 <_start+0x1>
   12be2:	|      move.l d0,-(sp)
   12be4:	|      jsr 14ee2 <setVariable>
   12bea:	|      lea 12(sp),sp
	return BR_CONTINUE;
   12bee:	|      moveq #2,d0
}
   12bf0:	\----> addq.l #4,sp
   12bf2:	       rts

00012bf4 <builtIn_freeSound>:

builtIn(freeSound)
{
   12bf4:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   12bf6:	       movea.l 12(sp),a0
   12bfa:	       move.l 24(a0),d0
   12bfe:	       move.l d0,-(sp)
   12c00:	       pea 5 <_start+0x5>
   12c04:	       move.l sp,d0
   12c06:	       addq.l #8,d0
   12c08:	       move.l d0,-(sp)
   12c0a:	       jsr 145f0 <getValueType>
   12c10:	       lea 12(sp),sp
   12c14:	       tst.w d0
   12c16:	   /-- bne.s 12c1c <builtIn_freeSound+0x28>
   12c18:	   |   moveq #1,d0
   12c1a:	/--|-- bra.s 12c3a <builtIn_freeSound+0x46>
	trimStack (&fun -> stack);
   12c1c:	|  \-> moveq #24,d0
   12c1e:	|      add.l 12(sp),d0
   12c22:	|      move.l d0,-(sp)
   12c24:	|      jsr 14f74 <trimStack>
   12c2a:	|      addq.l #4,sp
	huntKillFreeSound (v);
   12c2c:	|      move.l (sp),d0
   12c2e:	|      move.l d0,-(sp)
   12c30:	|      jsr cf8e <huntKillFreeSound>
   12c36:	|      addq.l #4,sp
	return BR_CONTINUE;
   12c38:	|      moveq #2,d0
}
   12c3a:	\----> addq.l #4,sp
   12c3c:	       rts

00012c3e <builtIn_parallaxAdd>:

builtIn(parallaxAdd)
{
   12c3e:	       lea -12(sp),sp
   12c42:	       move.l d2,-(sp)
	/*if (frozenStuff) {
		fatal ("Can't set background parallax image while frozen");
		return BR_ERROR;
	} else { Todo: Amigize this*/
		int wrapX, wrapY, v;
		if (! getValueType(&wrapY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12c44:	       movea.l 24(sp),a0
   12c48:	       move.l 24(a0),d0
   12c4c:	       move.l d0,-(sp)
   12c4e:	       pea 1 <_start+0x1>
   12c52:	       moveq #16,d0
   12c54:	       add.l sp,d0
   12c56:	       move.l d0,-(sp)
   12c58:	       jsr 145f0 <getValueType>
   12c5e:	       lea 12(sp),sp
   12c62:	       tst.w d0
   12c64:	   /-- bne.s 12c6c <builtIn_parallaxAdd+0x2e>
   12c66:	   |   moveq #1,d0
   12c68:	/--|-- bra.w 12d40 <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   12c6c:	|  \-> moveq #24,d0
   12c6e:	|      add.l 24(sp),d0
   12c72:	|      move.l d0,-(sp)
   12c74:	|      jsr 14f74 <trimStack>
   12c7a:	|      addq.l #4,sp
		if (! getValueType(&wrapX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12c7c:	|      movea.l 24(sp),a0
   12c80:	|      move.l 24(a0),d0
   12c84:	|      move.l d0,-(sp)
   12c86:	|      pea 1 <_start+0x1>
   12c8a:	|      moveq #20,d0
   12c8c:	|      add.l sp,d0
   12c8e:	|      move.l d0,-(sp)
   12c90:	|      jsr 145f0 <getValueType>
   12c96:	|      lea 12(sp),sp
   12c9a:	|      tst.w d0
   12c9c:	|  /-- bne.s 12ca4 <builtIn_parallaxAdd+0x66>
   12c9e:	|  |   moveq #1,d0
   12ca0:	+--|-- bra.w 12d40 <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   12ca4:	|  \-> moveq #24,d0
   12ca6:	|      add.l 24(sp),d0
   12caa:	|      move.l d0,-(sp)
   12cac:	|      jsr 14f74 <trimStack>
   12cb2:	|      addq.l #4,sp
		if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   12cb4:	|      movea.l 24(sp),a0
   12cb8:	|      move.l 24(a0),d0
   12cbc:	|      move.l d0,-(sp)
   12cbe:	|      pea 5 <_start+0x5>
   12cc2:	|      lea 12(sp),a0
   12cc6:	|      move.l a0,-(sp)
   12cc8:	|      jsr 145f0 <getValueType>
   12cce:	|      lea 12(sp),sp
   12cd2:	|      tst.w d0
   12cd4:	|  /-- bne.s 12cda <builtIn_parallaxAdd+0x9c>
   12cd6:	|  |   moveq #1,d0
   12cd8:	+--|-- bra.s 12d40 <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   12cda:	|  \-> moveq #24,d0
   12cdc:	|      add.l 24(sp),d0
   12ce0:	|      move.l d0,-(sp)
   12ce2:	|      jsr 14f74 <trimStack>
   12ce8:	|      addq.l #4,sp

		if (! loadParallax (v, wrapX, wrapY)) return BR_ERROR;
   12cea:	|      move.l 8(sp),d0
   12cee:	|      move.l d0,d0
   12cf0:	|      moveq #0,d2
   12cf2:	|      move.w d0,d2
   12cf4:	|      move.l 12(sp),d0
   12cf8:	|      move.l d0,d0
   12cfa:	|      moveq #0,d1
   12cfc:	|      move.w d0,d1
   12cfe:	|      move.l 4(sp),d0
   12d02:	|      move.l d0,d0
   12d04:	|      move.w d0,d0
   12d06:	|      andi.l #65535,d0
   12d0c:	|      move.l d2,-(sp)
   12d0e:	|      move.l d1,-(sp)
   12d10:	|      move.l d0,-(sp)
   12d12:	|      jsr d1aa <loadParallax>
   12d18:	|      lea 12(sp),sp
   12d1c:	|      tst.w d0
   12d1e:	|  /-- bne.s 12d24 <builtIn_parallaxAdd+0xe6>
   12d20:	|  |   moveq #1,d0
   12d22:	+--|-- bra.s 12d40 <builtIn_parallaxAdd+0x102>
		setVariable (&fun -> reg, SVT_INT, 1);
   12d24:	|  \-> moveq #28,d0
   12d26:	|      add.l 24(sp),d0
   12d2a:	|      pea 1 <_start+0x1>
   12d2e:	|      pea 1 <_start+0x1>
   12d32:	|      move.l d0,-(sp)
   12d34:	|      jsr 14ee2 <setVariable>
   12d3a:	|      lea 12(sp),sp
	//}
	return BR_CONTINUE;
   12d3e:	|      moveq #2,d0
}
   12d40:	\----> move.l (sp)+,d2
   12d42:	       lea 12(sp),sp
   12d46:	       rts

00012d48 <builtIn_parallaxClear>:

builtIn(parallaxClear)
{
	UNUSEDALL
	killParallax ();
   12d48:	jsr d0e2 <killParallax>
	setVariable (&fun -> reg, SVT_INT, 1);
   12d4e:	moveq #28,d0
   12d50:	add.l 8(sp),d0
   12d54:	pea 1 <_start+0x1>
   12d58:	pea 1 <_start+0x1>
   12d5c:	move.l d0,-(sp)
   12d5e:	jsr 14ee2 <setVariable>
   12d64:	lea 12(sp),sp
	return BR_CONTINUE;
   12d68:	moveq #2,d0
}
   12d6a:	rts

00012d6c <builtIn_getPixelColour>:
	if (! checkNew (&fun -> reg.varData.theStack)) return BR_ERROR;
	fun -> reg.varData.theStack -> first = NULL;
	fun -> reg.varData.theStack -> last = NULL;
	fun -> reg.varData.theStack -> timesUsed = 1;
	if (! getRGBIntoStack (x, y, &fun -> reg.varData.theStack)) return BR_ERROR; Todo: Amigize this*/
	KPrintF("getPixelColor: Not implemented for Amiga");
   12d6c:	pea 199fd <line.c.05397aaf+0x13>
   12d72:	jsr 1703c <KPrintF>
   12d78:	addq.l #4,sp

	return BR_CONTINUE;
   12d7a:	moveq #2,d0
}
   12d7c:	rts

00012d7e <builtIn_makeFastArray>:

builtIn(makeFastArray)
{
   12d7e:	             subq.l #8,sp
	UNUSEDALL
	switch (fun -> stack -> thisVar.varType) {
   12d80:	             movea.l 16(sp),a0
   12d84:	             movea.l 24(a0),a0
   12d88:	             move.l (a0),d0
   12d8a:	             moveq #1,d1
   12d8c:	             cmp.l d0,d1
   12d8e:	      /----- beq.s 12dd6 <builtIn_makeFastArray+0x58>
   12d90:	      |      moveq #6,d1
   12d92:	      |      cmp.l d0,d1
   12d94:	/-----|----- bne.s 12e14 <builtIn_makeFastArray+0x96>
		case SVT_STACK:
		{
			BOOL success = makeFastArrayFromStack (&fun -> reg, fun -> stack -> thisVar.varData.theStack);
   12d96:	|     |      movea.l 16(sp),a0
   12d9a:	|     |      movea.l 24(a0),a0
   12d9e:	|     |      move.l 4(a0),d1
   12da2:	|     |      moveq #28,d0
   12da4:	|     |      add.l 16(sp),d0
   12da8:	|     |      move.l d1,-(sp)
   12daa:	|     |      move.l d0,-(sp)
   12dac:	|     |      jsr 146a2 <makeFastArrayFromStack>
   12db2:	|     |      addq.l #8,sp
   12db4:	|     |      move.w d0,6(sp)
			trimStack (&fun -> stack);
   12db8:	|     |      moveq #24,d0
   12dba:	|     |      add.l 16(sp),d0
   12dbe:	|     |      move.l d0,-(sp)
   12dc0:	|     |      jsr 14f74 <trimStack>
   12dc6:	|     |      addq.l #4,sp
			return success ? BR_CONTINUE : BR_ERROR;
   12dc8:	|     |      tst.w 6(sp)
   12dcc:	|     |  /-- beq.s 12dd2 <builtIn_makeFastArray+0x54>
   12dce:	|     |  |   moveq #2,d0
   12dd0:	|  /--|--|-- bra.s 12e26 <builtIn_makeFastArray+0xa8>
   12dd2:	|  |  |  \-> moveq #1,d0
   12dd4:	|  +--|----- bra.s 12e26 <builtIn_makeFastArray+0xa8>
		}
			break;

		case SVT_INT:
		{
			int i = fun -> stack -> thisVar.varData.intValue;
   12dd6:	|  |  \----> movea.l 16(sp),a0
   12dda:	|  |         movea.l 24(a0),a0
   12dde:	|  |         move.l 4(a0),2(sp)
			trimStack (&fun -> stack);
   12de4:	|  |         moveq #24,d0
   12de6:	|  |         add.l 16(sp),d0
   12dea:	|  |         move.l d0,-(sp)
   12dec:	|  |         jsr 14f74 <trimStack>
   12df2:	|  |         addq.l #4,sp
			return makeFastArraySize (&fun -> reg, i) ? BR_CONTINUE : BR_ERROR;
   12df4:	|  |         moveq #28,d0
   12df6:	|  |         add.l 16(sp),d0
   12dfa:	|  |         move.l 2(sp),-(sp)
   12dfe:	|  |         move.l d0,-(sp)
   12e00:	|  |         jsr 1470c <makeFastArraySize>
   12e06:	|  |         addq.l #8,sp
   12e08:	|  |         tst.w d0
   12e0a:	|  |     /-- beq.s 12e10 <builtIn_makeFastArray+0x92>
   12e0c:	|  |     |   moveq #2,d0
   12e0e:	|  +-----|-- bra.s 12e26 <builtIn_makeFastArray+0xa8>
   12e10:	|  |     \-> moveq #1,d0
   12e12:	|  +-------- bra.s 12e26 <builtIn_makeFastArray+0xa8>
		}
			break;

		default:
			break;
   12e14:	\--|-------> nop
	}
	KPrintF ("Parameter must be a number or a stack.");
   12e16:	   |         pea 19a26 <line.c.05397aaf+0x3c>
   12e1c:	   |         jsr 1703c <KPrintF>
   12e22:	   |         addq.l #4,sp
	return BR_ERROR;
   12e24:	   |         moveq #1,d0
}
   12e26:	   \-------> addq.l #8,sp
   12e28:	             rts

00012e2a <builtIn_getCharacterScale>:

builtIn(getCharacterScale)
{
   12e2a:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12e2c:	          movea.l 16(sp),a0
   12e30:	          move.l 24(a0),d0
   12e34:	          move.l d0,-(sp)
   12e36:	          pea 7 <_start+0x7>
   12e3a:	          move.l sp,d0
   12e3c:	          addq.l #8,d0
   12e3e:	          move.l d0,-(sp)
   12e40:	          jsr 145f0 <getValueType>
   12e46:	          lea 12(sp),sp
   12e4a:	          tst.w d0
   12e4c:	      /-- bne.s 12e52 <builtIn_getCharacterScale+0x28>
   12e4e:	      |   moveq #1,d0
   12e50:	/-----|-- bra.s 12ecc <builtIn_getCharacterScale+0xa2>
	trimStack (&fun -> stack);
   12e52:	|     \-> moveq #24,d0
   12e54:	|         add.l 16(sp),d0
   12e58:	|         move.l d0,-(sp)
   12e5a:	|         jsr 14f74 <trimStack>
   12e60:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   12e62:	|         move.l (sp),d0
   12e64:	|         move.l d0,-(sp)
   12e66:	|         jsr a454 <findPerson>
   12e6c:	|         addq.l #4,sp
   12e6e:	|         move.l d0,4(sp)
	if (pers) {
   12e72:	|  /----- beq.s 12eb2 <builtIn_getCharacterScale+0x88>
		setVariable (&fun -> reg, SVT_INT, pers -> scale * (FLOAT) 100); 
   12e74:	|  |      movea.l 4(sp),a0
   12e78:	|  |      move.l 32(a0),d0
   12e7c:	|  |      move.l #1120403456,-(sp)
   12e82:	|  |      move.l d0,-(sp)
   12e84:	|  |      jsr 17520 <__mulsf3>
   12e8a:	|  |      addq.l #8,sp
   12e8c:	|  |      move.l d0,-(sp)
   12e8e:	|  |      jsr 17406 <__fixsfsi>
   12e94:	|  |      addq.l #4,sp
   12e96:	|  |      move.l d0,d1
   12e98:	|  |      moveq #28,d0
   12e9a:	|  |      add.l 16(sp),d0
   12e9e:	|  |      move.l d1,-(sp)
   12ea0:	|  |      pea 1 <_start+0x1>
   12ea4:	|  |      move.l d0,-(sp)
   12ea6:	|  |      jsr 14ee2 <setVariable>
   12eac:	|  |      lea 12(sp),sp
   12eb0:	|  |  /-- bra.s 12eca <builtIn_getCharacterScale+0xa0>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   12eb2:	|  \--|-> moveq #28,d0
   12eb4:	|     |   add.l 16(sp),d0
   12eb8:	|     |   clr.l -(sp)
   12eba:	|     |   pea 1 <_start+0x1>
   12ebe:	|     |   move.l d0,-(sp)
   12ec0:	|     |   jsr 14ee2 <setVariable>
   12ec6:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   12eca:	|     \-> moveq #2,d0
}
   12ecc:	\-------> addq.l #8,sp
   12ece:	          rts

00012ed0 <builtIn_getLanguageID>:

builtIn(getLanguageID)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, gameSettings.languageID);
   12ed0:	move.l 1a880 <gameSettings>,d0
   12ed6:	move.l d0,d1
   12ed8:	moveq #28,d0
   12eda:	add.l 8(sp),d0
   12ede:	move.l d1,-(sp)
   12ee0:	pea 1 <_start+0x1>
   12ee4:	move.l d0,-(sp)
   12ee6:	jsr 14ee2 <setVariable>
   12eec:	lea 12(sp),sp
	return BR_CONTINUE;
   12ef0:	moveq #2,d0
}
   12ef2:	rts

00012ef4 <builtIn__rem_launchWith>:
// Removed function
builtIn(_rem_launchWith)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   12ef4:	moveq #24,d0
   12ef6:	add.l 8(sp),d0
   12efa:	move.l d0,-(sp)
   12efc:	jsr 14f74 <trimStack>
   12f02:	addq.l #4,sp
	trimStack (&fun -> stack);
   12f04:	moveq #24,d0
   12f06:	add.l 8(sp),d0
   12f0a:	move.l d0,-(sp)
   12f0c:	jsr 14f74 <trimStack>
   12f12:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, FALSE);
   12f14:	moveq #28,d0
   12f16:	add.l 8(sp),d0
   12f1a:	clr.l -(sp)
   12f1c:	pea 1 <_start+0x1>
   12f20:	move.l d0,-(sp)
   12f22:	jsr 14ee2 <setVariable>
   12f28:	lea 12(sp),sp

	return BR_CONTINUE;
   12f2c:	moveq #2,d0

}
   12f2e:	rts

00012f30 <builtIn_getFramesPerSecond>:

builtIn(getFramesPerSecond)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, lastFramesPerSecond);
   12f30:	move.l 1a124 <lastFramesPerSecond>,d1
   12f36:	moveq #28,d0
   12f38:	add.l 8(sp),d0
   12f3c:	move.l d1,-(sp)
   12f3e:	pea 1 <_start+0x1>
   12f42:	move.l d0,-(sp)
   12f44:	jsr 14ee2 <setVariable>
   12f4a:	lea 12(sp),sp
	return BR_CONTINUE;
   12f4e:	moveq #2,d0
}
   12f50:	rts

00012f52 <builtIn_showThumbnail>:
	//				deb ("aaaaa is still ", aaaaa);
	delete[] aaaaa;
	//				deb ("Deleted", "aaaaa");
	showThumbnail (file, x, y);
	delete[] file; Todo Amigize this?*/
	return BR_CONTINUE;
   12f52:	moveq #2,d0
}
   12f54:	rts

00012f56 <builtIn_setThumbnailSize>:

builtIn(setThumbnailSize)
{
   12f56:	          lea -52(sp),sp
	UNUSEDALL
	if (! getValueType(&thumbHeight, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12f5a:	          movea.l 60(sp),a0
   12f5e:	          move.l 24(a0),d0
   12f62:	          move.l d0,-(sp)
   12f64:	          pea 1 <_start+0x1>
   12f68:	          pea 1a6ba <thumbHeight>
   12f6e:	          jsr 145f0 <getValueType>
   12f74:	          lea 12(sp),sp
   12f78:	          tst.w d0
   12f7a:	      /-- bne.s 12f82 <builtIn_setThumbnailSize+0x2c>
   12f7c:	      |   moveq #1,d0
   12f7e:	/-----|-- bra.w 1303e <builtIn_setThumbnailSize+0xe8>
	trimStack (&fun -> stack);
   12f82:	|     \-> moveq #24,d0
   12f84:	|         add.l 60(sp),d0
   12f88:	|         move.l d0,-(sp)
   12f8a:	|         jsr 14f74 <trimStack>
   12f90:	|         addq.l #4,sp
	if (! getValueType(&thumbWidth, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12f92:	|         movea.l 60(sp),a0
   12f96:	|         move.l 24(a0),d0
   12f9a:	|         move.l d0,-(sp)
   12f9c:	|         pea 1 <_start+0x1>
   12fa0:	|         pea 1a6b6 <thumbWidth>
   12fa6:	|         jsr 145f0 <getValueType>
   12fac:	|         lea 12(sp),sp
   12fb0:	|         tst.w d0
   12fb2:	|     /-- bne.s 12fba <builtIn_setThumbnailSize+0x64>
   12fb4:	|     |   moveq #1,d0
   12fb6:	+-----|-- bra.w 1303e <builtIn_setThumbnailSize+0xe8>
	trimStack (&fun -> stack);
   12fba:	|     \-> moveq #24,d0
   12fbc:	|         add.l 60(sp),d0
   12fc0:	|         move.l d0,-(sp)
   12fc2:	|         jsr 14f74 <trimStack>
   12fc8:	|         addq.l #4,sp
	if (thumbWidth < 0 || thumbHeight < 0 || (unsigned int) thumbWidth > winWidth || (unsigned int) thumbHeight > winHeight) {
   12fca:	|         move.l 1a6b6 <thumbWidth>,d0
   12fd0:	|     /-- bmi.s 12ffe <builtIn_setThumbnailSize+0xa8>
   12fd2:	|     |   move.l 1a6ba <thumbHeight>,d0
   12fd8:	|     +-- bmi.s 12ffe <builtIn_setThumbnailSize+0xa8>
   12fda:	|     |   move.l 1a6b6 <thumbWidth>,d0
   12fe0:	|     |   move.l d0,d1
   12fe2:	|     |   move.l 1a6f8 <winWidth>,d0
   12fe8:	|     |   cmp.l d1,d0
   12fea:	|     +-- bcs.s 12ffe <builtIn_setThumbnailSize+0xa8>
   12fec:	|     |   move.l 1a6ba <thumbHeight>,d0
   12ff2:	|     |   move.l d0,d1
   12ff4:	|     |   move.l 1a6fc <winHeight>,d0
   12ffa:	|     |   cmp.l d1,d0
   12ffc:	|  /--|-- bcc.s 1303c <builtIn_setThumbnailSize+0xe6>
		char buff[50];
		sprintf (buff, "%d x %d", thumbWidth, thumbHeight);
   12ffe:	|  |  \-> move.l 1a6ba <thumbHeight>,d1
   13004:	|  |      move.l 1a6b6 <thumbWidth>,d0
   1300a:	|  |      move.l d1,-(sp)
   1300c:	|  |      move.l d0,-(sp)
   1300e:	|  |      pea 19a4d <line.c.05397aaf+0x63>
   13014:	|  |      lea 14(sp),a0
   13018:	|  |      move.l a0,-(sp)
   1301a:	|  |      jsr 13dfa <sprintf>
   13020:	|  |      lea 16(sp),sp
		KPrintF ("Invalid thumbnail size", buff);
   13024:	|  |      lea 2(sp),a0
   13028:	|  |      move.l a0,-(sp)
   1302a:	|  |      pea 19a55 <line.c.05397aaf+0x6b>
   13030:	|  |      jsr 1703c <KPrintF>
   13036:	|  |      addq.l #8,sp
		return BR_ERROR;
   13038:	|  |      moveq #1,d0
   1303a:	+--|----- bra.s 1303e <builtIn_setThumbnailSize+0xe8>
	}
	return BR_CONTINUE;
   1303c:	|  \----> moveq #2,d0
}
   1303e:	\-------> lea 52(sp),sp
   13042:	          rts

00013044 <builtIn_hasFlag>:

builtIn(hasFlag)
{
   13044:	       lea -12(sp),sp
   13048:	       move.l d2,-(sp)
	UNUSEDALL
	int objNum, flagIndex;
	if (! getValueType(&flagIndex, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1304a:	       movea.l 24(sp),a0
   1304e:	       move.l 24(a0),d0
   13052:	       move.l d0,-(sp)
   13054:	       pea 1 <_start+0x1>
   13058:	       lea 12(sp),a0
   1305c:	       move.l a0,-(sp)
   1305e:	       jsr 145f0 <getValueType>
   13064:	       lea 12(sp),sp
   13068:	       tst.w d0
   1306a:	   /-- bne.s 13072 <builtIn_hasFlag+0x2e>
   1306c:	   |   moveq #1,d0
   1306e:	/--|-- bra.w 13102 <builtIn_hasFlag+0xbe>
	trimStack (&fun -> stack);
   13072:	|  \-> moveq #24,d0
   13074:	|      add.l 24(sp),d0
   13078:	|      move.l d0,-(sp)
   1307a:	|      jsr 14f74 <trimStack>
   13080:	|      addq.l #4,sp
	if (! getValueType(&objNum, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   13082:	|      movea.l 24(sp),a0
   13086:	|      move.l 24(a0),d0
   1308a:	|      move.l d0,-(sp)
   1308c:	|      pea 7 <_start+0x7>
   13090:	|      moveq #16,d0
   13092:	|      add.l sp,d0
   13094:	|      move.l d0,-(sp)
   13096:	|      jsr 145f0 <getValueType>
   1309c:	|      lea 12(sp),sp
   130a0:	|      tst.w d0
   130a2:	|  /-- bne.s 130a8 <builtIn_hasFlag+0x64>
   130a4:	|  |   moveq #1,d0
   130a6:	+--|-- bra.s 13102 <builtIn_hasFlag+0xbe>
	trimStack (&fun -> stack);
   130a8:	|  \-> moveq #24,d0
   130aa:	|      add.l 24(sp),d0
   130ae:	|      move.l d0,-(sp)
   130b0:	|      jsr 14f74 <trimStack>
   130b6:	|      addq.l #4,sp
	struct objectType * objT = findObjectType (objNum);
   130b8:	|      move.l 8(sp),d0
   130bc:	|      move.l d0,-(sp)
   130be:	|      jsr d356 <findObjectType>
   130c4:	|      addq.l #4,sp
   130c6:	|      move.l d0,12(sp)
	if (! objT) return BR_ERROR;
   130ca:	|  /-- bne.s 130d0 <builtIn_hasFlag+0x8c>
   130cc:	|  |   moveq #1,d0
   130ce:	+--|-- bra.s 13102 <builtIn_hasFlag+0xbe>
	setVariable (&fun -> reg, SVT_INT, objT->flags & (1 << flagIndex));
   130d0:	|  \-> movea.l 12(sp),a0
   130d4:	|      move.w 36(a0),d0
   130d8:	|      moveq #0,d2
   130da:	|      move.w d0,d2
   130dc:	|      move.l 4(sp),d1
   130e0:	|      moveq #1,d0
   130e2:	|      lsl.l d1,d0
   130e4:	|      move.l d2,d1
   130e6:	|      and.l d0,d1
   130e8:	|      moveq #28,d0
   130ea:	|      add.l 24(sp),d0
   130ee:	|      move.l d1,-(sp)
   130f0:	|      pea 1 <_start+0x1>
   130f4:	|      move.l d0,-(sp)
   130f6:	|      jsr 14ee2 <setVariable>
   130fc:	|      lea 12(sp),sp
	return BR_CONTINUE;
   13100:	|      moveq #2,d0
}
   13102:	\----> move.l (sp)+,d2
   13104:	       lea 12(sp),sp
   13108:	       rts

0001310a <builtIn_snapshotGrab>:

builtIn(snapshotGrab)
{
	UNUSEDALL
	return snapshot () ? BR_CONTINUE : BR_ERROR;
   1310a:	       jsr d344 <snapshot>
   13110:	       tst.w d0
   13112:	/----- beq.s 13118 <builtIn_snapshotGrab+0xe>
   13114:	|      moveq #2,d0
   13116:	|  /-- bra.s 1311a <builtIn_snapshotGrab+0x10>
   13118:	\--|-> moveq #1,d0
}
   1311a:	   \-> rts

0001311c <builtIn_snapshotClear>:

builtIn(snapshotClear)
{
	UNUSEDALL
	nosnapshot ();
   1311c:	jsr d1f0 <nosnapshot>
	return BR_CONTINUE;
   13122:	moveq #2,d0
}
   13124:	rts

00013126 <builtIn_bodgeFilenames>:

builtIn(bodgeFilenames)
{
   13126:	subq.l #4,sp
	UNUSEDALL
	BOOL lastValue = allowAnyFilename;
   13128:	move.w 1a000 <allowAnyFilename>,2(sp)
	allowAnyFilename = getBoolean(&(fun -> stack -> thisVar));
   13130:	movea.l 12(sp),a0
   13134:	move.l 24(a0),d0
   13138:	move.l d0,-(sp)
   1313a:	jsr 14b30 <getBoolean>
   13140:	addq.l #4,sp
   13142:	move.w d0,1a000 <allowAnyFilename>
	trimStack (&fun -> stack);
   13148:	moveq #24,d0
   1314a:	add.l 12(sp),d0
   1314e:	move.l d0,-(sp)
   13150:	jsr 14f74 <trimStack>
   13156:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, lastValue);
   13158:	movea.w 2(sp),a0
   1315c:	moveq #28,d0
   1315e:	add.l 12(sp),d0
   13162:	move.l a0,-(sp)
   13164:	pea 1 <_start+0x1>
   13168:	move.l d0,-(sp)
   1316a:	jsr 14ee2 <setVariable>
   13170:	lea 12(sp),sp
	return BR_CONTINUE;
   13174:	moveq #2,d0
}
   13176:	addq.l #4,sp
   13178:	rts

0001317a <builtIn__rem_registryGetString>:

// Deprecated - does nothing.
builtIn(_rem_registryGetString)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   1317a:	moveq #24,d0
   1317c:	add.l 8(sp),d0
   13180:	move.l d0,-(sp)
   13182:	jsr 14f74 <trimStack>
   13188:	addq.l #4,sp
	trimStack (&fun -> stack);
   1318a:	moveq #24,d0
   1318c:	add.l 8(sp),d0
   13190:	move.l d0,-(sp)
   13192:	jsr 14f74 <trimStack>
   13198:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 0);
   1319a:	moveq #28,d0
   1319c:	add.l 8(sp),d0
   131a0:	clr.l -(sp)
   131a2:	pea 1 <_start+0x1>
   131a6:	move.l d0,-(sp)
   131a8:	jsr 14ee2 <setVariable>
   131ae:	lea 12(sp),sp

	return BR_CONTINUE;
   131b2:	moveq #2,d0
}
   131b4:	rts

000131b6 <builtIn_quitWithFatalError>:

builtIn(quitWithFatalError)
{
   131b6:	subq.l #4,sp
	UNUSEDALL
	char * mess = getTextFromAnyVar(&(fun -> stack -> thisVar));
   131b8:	movea.l 12(sp),a0
   131bc:	move.l 24(a0),d0
   131c0:	move.l d0,-(sp)
   131c2:	jsr 14bc6 <getTextFromAnyVar>
   131c8:	addq.l #4,sp
   131ca:	move.l d0,(sp)
	trimStack (&fun -> stack);
   131cc:	moveq #24,d0
   131ce:	add.l 12(sp),d0
   131d2:	move.l d0,-(sp)
   131d4:	jsr 14f74 <trimStack>
   131da:	addq.l #4,sp
	KPrintF (mess);
   131dc:	move.l (sp),-(sp)
   131de:	jsr 1703c <KPrintF>
   131e4:	addq.l #4,sp
	return BR_ERROR;
   131e6:	moveq #1,d0
}
   131e8:	addq.l #4,sp
   131ea:	rts

000131ec <builtIn__rem_setCharacterAA>:

builtIn(_rem_setCharacterAA)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   131ec:	moveq #24,d0
   131ee:	add.l 8(sp),d0
   131f2:	move.l d0,-(sp)
   131f4:	jsr 14f74 <trimStack>
   131fa:	addq.l #4,sp
	trimStack (&fun -> stack);
   131fc:	moveq #24,d0
   131fe:	add.l 8(sp),d0
   13202:	move.l d0,-(sp)
   13204:	jsr 14f74 <trimStack>
   1320a:	addq.l #4,sp
	trimStack (&fun -> stack);
   1320c:	moveq #24,d0
   1320e:	add.l 8(sp),d0
   13212:	move.l d0,-(sp)
   13214:	jsr 14f74 <trimStack>
   1321a:	addq.l #4,sp
	trimStack (&fun -> stack);
   1321c:	moveq #24,d0
   1321e:	add.l 8(sp),d0
   13222:	move.l d0,-(sp)
   13224:	jsr 14f74 <trimStack>
   1322a:	addq.l #4,sp

	return BR_CONTINUE;
   1322c:	moveq #2,d0
}
   1322e:	rts

00013230 <builtIn__rem_setMaximumAA>:

builtIn(_rem_setMaximumAA)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   13230:	moveq #24,d0
   13232:	add.l 8(sp),d0
   13236:	move.l d0,-(sp)
   13238:	jsr 14f74 <trimStack>
   1323e:	addq.l #4,sp
	trimStack (&fun -> stack);
   13240:	moveq #24,d0
   13242:	add.l 8(sp),d0
   13246:	move.l d0,-(sp)
   13248:	jsr 14f74 <trimStack>
   1324e:	addq.l #4,sp
	trimStack (&fun -> stack);
   13250:	moveq #24,d0
   13252:	add.l 8(sp),d0
   13256:	move.l d0,-(sp)
   13258:	jsr 14f74 <trimStack>
   1325e:	addq.l #4,sp

	return BR_CONTINUE;
   13260:	moveq #2,d0

}
   13262:	rts

00013264 <builtIn_setBackgroundEffect>:

builtIn(setBackgroundEffect)
{
   13264:	subq.l #4,sp
	UNUSEDALL
	BOOL done = TRUE;
   13266:	move.w #1,2(sp)
	//BOOL done = blur_createSettings(numParams, fun->stack); Amiga Todo: Amigize?
	setVariable (&fun -> reg, SVT_INT, done ? 1 : 0);
   1326c:	sne d0
   1326e:	neg.b d0
   13270:	moveq #0,d1
   13272:	move.b d0,d1
   13274:	moveq #28,d0
   13276:	add.l 12(sp),d0
   1327a:	move.l d1,-(sp)
   1327c:	pea 1 <_start+0x1>
   13280:	move.l d0,-(sp)
   13282:	jsr 14ee2 <setVariable>
   13288:	lea 12(sp),sp
	return BR_CONTINUE;
   1328c:	moveq #2,d0
}
   1328e:	addq.l #4,sp
   13290:	rts

00013292 <builtIn_doBackgroundEffect>:

builtIn(doBackgroundEffect)
{
   13292:	subq.l #4,sp
	UNUSEDALL
	//BOOL done = blurScreen ();
	BOOL done = TRUE;
   13294:	move.w #1,2(sp)
	KPrintF("doBackgroundEffect: Function not implemented on Amiga");
   1329a:	pea 19a6c <line.c.05397aaf+0x82>
   132a0:	jsr 1703c <KPrintF>
   132a6:	addq.l #4,sp
	//Amiga Todo: Amigize this
	setVariable (&fun -> reg, SVT_INT, done ? 1 : 0);
   132a8:	tst.w 2(sp)
   132ac:	sne d0
   132ae:	neg.b d0
   132b0:	moveq #0,d1
   132b2:	move.b d0,d1
   132b4:	moveq #28,d0
   132b6:	add.l 12(sp),d0
   132ba:	move.l d1,-(sp)
   132bc:	pea 1 <_start+0x1>
   132c0:	move.l d0,-(sp)
   132c2:	jsr 14ee2 <setVariable>
   132c8:	lea 12(sp),sp
	return BR_CONTINUE;
   132cc:	moveq #2,d0
}
   132ce:	addq.l #4,sp
   132d0:	rts

000132d2 <callBuiltIn>:
#undef FUNC

#define NUM_FUNCS			(sizeof (builtInFunctionArray) / sizeof (builtInFunctionArray[0]))


enum builtReturn callBuiltIn (int whichFunc, int numParams, struct loadedFunction * fun) {
   132d2:	             lea -100(sp),sp
   // fprintf (stderr, "Calling function %d: %s\n", whichFunc, builtInFunctionNames[whichFunc]);    fflush (stderr);

	if ((unsigned int)whichFunc < NUM_FUNCS) {
   132d6:	             move.l 104(sp),d0
   132da:	             cmpi.l #166,d0
   132e0:	/----------- bhi.w 133c2 <callBuiltIn+0xf0>
		if (paramNum[whichFunc] != -1) {
   132e4:	|            move.l 104(sp),d0
   132e8:	|            add.l d0,d0
   132ea:	|            movea.l d0,a1
   132ec:	|            adda.l d0,a1
   132ee:	|            lea 1a146 <paramNum>,a0
   132f4:	|            move.l (0,a1,a0.l),d0
   132f8:	|            moveq #-1,d1
   132fa:	|            cmp.l d0,d1
   132fc:	|  /-------- beq.w 1338a <callBuiltIn+0xb8>
			if (paramNum[whichFunc] != numParams) {
   13300:	|  |         move.l 104(sp),d0
   13304:	|  |         add.l d0,d0
   13306:	|  |         movea.l d0,a1
   13308:	|  |         adda.l d0,a1
   1330a:	|  |         lea 1a146 <paramNum>,a0
   13310:	|  |         move.l (0,a1,a0.l),d0
   13314:	|  |         cmp.l 108(sp),d0
   13318:	|  +-------- beq.s 1338a <callBuiltIn+0xb8>
				char buff[100];
				sprintf (buff, "Built in function must have %i parameter%s",
						 paramNum[whichFunc],
						 (paramNum[whichFunc] == 1) ? "" : "s");
   1331a:	|  |         move.l 104(sp),d0
   1331e:	|  |         add.l d0,d0
   13320:	|  |         movea.l d0,a1
   13322:	|  |         adda.l d0,a1
   13324:	|  |         lea 1a146 <paramNum>,a0
   1332a:	|  |         move.l (0,a1,a0.l),d0
				sprintf (buff, "Built in function must have %i parameter%s",
   1332e:	|  |         moveq #1,d1
   13330:	|  |         cmp.l d0,d1
   13332:	|  |  /----- bne.s 1333c <callBuiltIn+0x6a>
   13334:	|  |  |      move.l #100275,d0
   1333a:	|  |  |  /-- bra.s 13342 <callBuiltIn+0x70>
   1333c:	|  |  \--|-> move.l #105122,d0
   13342:	|  |     \-> move.l 104(sp),d1
   13346:	|  |         add.l d1,d1
   13348:	|  |         movea.l d1,a1
   1334a:	|  |         adda.l d1,a1
   1334c:	|  |         lea 1a146 <paramNum>,a0
   13352:	|  |         move.l (0,a1,a0.l),d1
   13356:	|  |         move.l d0,-(sp)
   13358:	|  |         move.l d1,-(sp)
   1335a:	|  |         pea 19aa4 <line.c.05397aaf+0xba>
   13360:	|  |         lea 12(sp),a0
   13364:	|  |         move.l a0,-(sp)
   13366:	|  |         jsr 13dfa <sprintf>
   1336c:	|  |         lea 16(sp),sp

				KPrintF(copyString (buff));
   13370:	|  |         movea.l sp,a0
   13372:	|  |         move.l a0,-(sp)
   13374:	|  |         jsr b8 <copyString>
   1337a:	|  |         addq.l #4,sp
   1337c:	|  |         move.l d0,-(sp)
   1337e:	|  |         jsr 1703c <KPrintF>
   13384:	|  |         addq.l #4,sp
				return BR_ERROR;
   13386:	|  |         moveq #1,d0
   13388:	|  |     /-- bra.s 133d2 <callBuiltIn+0x100>
			}
		}

		if (builtInFunctionArray[whichFunc].func)
   1338a:	|  \-----|-> move.l 104(sp),d0
   1338e:	|        |   add.l d0,d0
   13390:	|        |   movea.l d0,a1
   13392:	|        |   adda.l d0,a1
   13394:	|        |   lea 1a3e2 <builtInFunctionArray>,a0
   1339a:	|        |   move.l (0,a1,a0.l),d0
   1339e:	+--------|-- beq.s 133c2 <callBuiltIn+0xf0>
		{
			//fprintf (stderr, "Calling %i: %s\n", whichFunc, builtInFunctionNames[whichFunc]);
			return builtInFunctionArray[whichFunc].func (numParams, fun);
   133a0:	|        |   move.l 104(sp),d0
   133a4:	|        |   add.l d0,d0
   133a6:	|        |   movea.l d0,a1
   133a8:	|        |   adda.l d0,a1
   133aa:	|        |   lea 1a3e2 <builtInFunctionArray>,a0
   133b0:	|        |   movea.l (0,a1,a0.l),a0
   133b4:	|        |   move.l 112(sp),-(sp)
   133b8:	|        |   move.l 112(sp),-(sp)
   133bc:	|        |   jsr (a0)
   133be:	|        |   addq.l #8,sp
   133c0:	|        +-- bra.s 133d2 <callBuiltIn+0x100>
		}
	}

	KPrintF("Unknown / unimplemented built-in function.");
   133c2:	\--------|-> pea 19acf <line.c.05397aaf+0xe5>
   133c8:	         |   jsr 1703c <KPrintF>
   133ce:	         |   addq.l #4,sp
	return BR_ERROR;
   133d0:	         |   moveq #1,d0
}
   133d2:	         \-> lea 100(sp),sp
   133d6:	             rts

000133d8 <getLanguageForFileB>:
int *languageTable;
char **languageName;
struct settingsStruct gameSettings;

int getLanguageForFileB ()
{
   133d8:	          subq.l #8,sp
	int indexNum = -1;
   133da:	          moveq #-1,d0
   133dc:	          move.l d0,4(sp)

	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   133e0:	          clr.l (sp)
   133e2:	   /----- bra.s 13408 <getLanguageForFileB+0x30>
		if ((unsigned int) languageTable[i] == gameSettings.languageID) indexNum = i;
   133e4:	/--|----> move.l 1a878 <languageTable>,d1
   133ea:	|  |      move.l (sp),d0
   133ec:	|  |      add.l d0,d0
   133ee:	|  |      add.l d0,d0
   133f0:	|  |      movea.l d1,a0
   133f2:	|  |      adda.l d0,a0
   133f4:	|  |      move.l (a0),d0
   133f6:	|  |      move.l d0,d1
   133f8:	|  |      move.l 1a880 <gameSettings>,d0
   133fe:	|  |      cmp.l d1,d0
   13400:	|  |  /-- bne.s 13406 <getLanguageForFileB+0x2e>
   13402:	|  |  |   move.l (sp),4(sp)
	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   13406:	|  |  \-> addq.l #1,(sp)
   13408:	|  \----> move.l 1a884 <gameSettings+0x4>,d0
   1340e:	|         cmp.l (sp),d0
   13410:	\-------- bcc.s 133e4 <getLanguageForFileB+0xc>
	}

	return indexNum;
   13412:	          move.l 4(sp),d0
}
   13416:	          addq.l #8,sp
   13418:	          rts

0001341a <getPrefsFilename>:

char * getPrefsFilename (char * filename) {
   1341a:	          lea -20(sp),sp
   1341e:	          move.l a6,-(sp)
	// Yes, this trashes the original string, but
	// we also free it at the end (warning!)...

	int n, i;

	n = strlen (filename);
   13420:	          move.l 28(sp),-(sp)
   13424:	          jsr 13adc <strlen>
   1342a:	          addq.l #4,sp
   1342c:	          move.l d0,12(sp)


	if (n > 4 && filename[n-4] == '.') {
   13430:	          moveq #4,d0
   13432:	          cmp.l 12(sp),d0
   13436:	      /-- bge.s 1345a <getPrefsFilename+0x40>
   13438:	      |   move.l 12(sp),d0
   1343c:	      |   subq.l #4,d0
   1343e:	      |   movea.l 28(sp),a0
   13442:	      |   adda.l d0,a0
   13444:	      |   move.b (a0),d0
   13446:	      |   cmpi.b #46,d0
   1344a:	      +-- bne.s 1345a <getPrefsFilename+0x40>
		filename[n-4] = 0;
   1344c:	      |   move.l 12(sp),d0
   13450:	      |   subq.l #4,d0
   13452:	      |   movea.l 28(sp),a0
   13456:	      |   adda.l d0,a0
   13458:	      |   clr.b (a0)
	}

	char * f = filename;
   1345a:	      \-> move.l 28(sp),16(sp)
	for (i = 0; i<n; i++) {
   13460:	          clr.l 20(sp)
   13464:	   /----- bra.s 1348c <getPrefsFilename+0x72>
		if (filename[i] == '/') f = filename + i + 1;
   13466:	/--|----> move.l 20(sp),d0
   1346a:	|  |      movea.l 28(sp),a0
   1346e:	|  |      adda.l d0,a0
   13470:	|  |      move.b (a0),d0
   13472:	|  |      cmpi.b #47,d0
   13476:	|  |  /-- bne.s 13488 <getPrefsFilename+0x6e>
   13478:	|  |  |   move.l 20(sp),d0
   1347c:	|  |  |   addq.l #1,d0
   1347e:	|  |  |   move.l 28(sp),d1
   13482:	|  |  |   add.l d0,d1
   13484:	|  |  |   move.l d1,16(sp)
	for (i = 0; i<n; i++) {
   13488:	|  |  \-> addq.l #1,20(sp)
   1348c:	|  \----> move.l 20(sp),d0
   13490:	|         cmp.l 12(sp),d0
   13494:	\-------- blt.s 13466 <getPrefsFilename+0x4c>
	}

	char * joined = joinStrings (f, ".ini");
   13496:	          pea 19afa <line.c.05397aaf+0x110>
   1349c:	          move.l 20(sp),-(sp)
   134a0:	          jsr 13b1c <joinStrings>
   134a6:	          addq.l #8,sp
   134a8:	          move.l d0,8(sp)

	FreeVec(filename);
   134ac:	          move.l 28(sp),4(sp)
   134b2:	          move.l 1a7a4 <SysBase>,d0
   134b8:	          movea.l d0,a6
   134ba:	          movea.l 4(sp),a1
   134be:	          jsr -690(a6)
	filename = NULL;
   134c2:	          clr.l 28(sp)
	return joined;
   134c6:	          move.l 8(sp),d0
}
   134ca:	          movea.l (sp)+,a6
   134cc:	          lea 20(sp),sp
   134d0:	          rts

000134d2 <makeLanguageTable>:

void makeLanguageTable (BPTR table)
{
   134d2:	             lea -28(sp),sp
   134d6:	             move.l a6,-(sp)
   134d8:	             move.l a2,-(sp)
	languageTable = AllocVec(gameSettings.numLanguages + 1,MEMF_ANY);
   134da:	             move.l 1a884 <gameSettings+0x4>,d0
   134e0:	             move.l d0,d1
   134e2:	             addq.l #1,d1
   134e4:	             move.l d1,28(sp)
   134e8:	             clr.l 24(sp)
   134ec:	             move.l 1a7a4 <SysBase>,d0
   134f2:	             movea.l d0,a6
   134f4:	             move.l 28(sp),d0
   134f8:	             move.l 24(sp),d1
   134fc:	             jsr -684(a6)
   13500:	             move.l d0,20(sp)
   13504:	             move.l 20(sp),d0
   13508:	             move.l d0,1a878 <languageTable>
    if( languageTable == 0) {
   1350e:	             move.l 1a878 <languageTable>,d0
   13514:	         /-- bne.s 13524 <makeLanguageTable+0x52>
        KPrintF("makeLanguageTable: Cannot Alloc Mem for languageTable");
   13516:	         |   pea 19aff <line.c.05397aaf+0x115>
   1351c:	         |   jsr 1703c <KPrintF>
   13522:	         |   addq.l #4,sp
    }

	languageName = AllocVec(gameSettings.numLanguages + 1,MEMF_ANY);
   13524:	         \-> move.l 1a884 <gameSettings+0x4>,d0
   1352a:	             move.l d0,d1
   1352c:	             addq.l #1,d1
   1352e:	             move.l d1,16(sp)
   13532:	             clr.l 12(sp)
   13536:	             move.l 1a7a4 <SysBase>,d0
   1353c:	             movea.l d0,a6
   1353e:	             move.l 16(sp),d0
   13542:	             move.l 12(sp),d1
   13546:	             jsr -684(a6)
   1354a:	             move.l d0,8(sp)
   1354e:	             move.l 8(sp),d0
   13552:	             move.l d0,1a87c <languageName>
	if( languageName == 0) {
   13558:	             move.l 1a87c <languageName>,d0
   1355e:	         /-- bne.s 1356e <makeLanguageTable+0x9c>
        KPrintF("makeLanguageName: Cannot Alloc Mem for languageName");
   13560:	         |   pea 19b35 <line.c.05397aaf+0x14b>
   13566:	         |   jsr 1703c <KPrintF>
   1356c:	         |   addq.l #4,sp
    }

	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   1356e:	         \-> clr.l 32(sp)
   13572:	   /-------- bra.s 135ea <makeLanguageTable+0x118>
		languageTable[i] = i ? get2bytes (table) : 0;
   13574:	/--|-------> tst.l 32(sp)
   13578:	|  |  /----- beq.s 13588 <makeLanguageTable+0xb6>
   1357a:	|  |  |      move.l 40(sp),-(sp)
   1357e:	|  |  |      jsr 6bc <get2bytes>
   13584:	|  |  |      addq.l #4,sp
   13586:	|  |  |  /-- bra.s 1358a <makeLanguageTable+0xb8>
   13588:	|  |  \--|-> moveq #0,d0
   1358a:	|  |     \-> movea.l 1a878 <languageTable>,a0
   13590:	|  |         move.l 32(sp),d1
   13594:	|  |         add.l d1,d1
   13596:	|  |         add.l d1,d1
   13598:	|  |         adda.l d1,a0
   1359a:	|  |         move.l d0,(a0)
		languageName[i] = 0;
   1359c:	|  |         move.l 1a87c <languageName>,d1
   135a2:	|  |         move.l 32(sp),d0
   135a6:	|  |         add.l d0,d0
   135a8:	|  |         add.l d0,d0
   135aa:	|  |         movea.l d1,a0
   135ac:	|  |         adda.l d0,a0
   135ae:	|  |         clr.l (a0)
		if (gameVersion >= VERSION(2,0)) {
   135b0:	|  |         move.l 1a74e <gameVersion>,d0
   135b6:	|  |         cmpi.l #511,d0
   135bc:	|  |     /-- ble.s 135e6 <makeLanguageTable+0x114>
			if (gameSettings.numLanguages)
   135be:	|  |     |   move.l 1a884 <gameSettings+0x4>,d0
   135c4:	|  |     +-- beq.s 135e6 <makeLanguageTable+0x114>
				languageName[i] = readString (table);
   135c6:	|  |     |   move.l 1a87c <languageName>,d1
   135cc:	|  |     |   move.l 32(sp),d0
   135d0:	|  |     |   add.l d0,d0
   135d2:	|  |     |   add.l d0,d0
   135d4:	|  |     |   movea.l d1,a2
   135d6:	|  |     |   adda.l d0,a2
   135d8:	|  |     |   move.l 40(sp),-(sp)
   135dc:	|  |     |   jsr b02 <readString>
   135e2:	|  |     |   addq.l #4,sp
   135e4:	|  |     |   move.l d0,(a2)
	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   135e6:	|  |     \-> addq.l #1,32(sp)
   135ea:	|  \-------> move.l 1a884 <gameSettings+0x4>,d0
   135f0:	|            cmp.l 32(sp),d0
   135f4:	\----------- bcc.w 13574 <makeLanguageTable+0xa2>
		}
	}
}
   135f8:	             nop
   135fa:	             nop
   135fc:	             movea.l (sp)+,a2
   135fe:	             movea.l (sp)+,a6
   13600:	             lea 28(sp),sp
   13604:	             rts

00013606 <readIniFile>:

void readIniFile (char * filename) {
   13606:	                      lea -564(sp),sp
   1360a:	                      move.l a6,-(sp)
   1360c:	                      move.l d2,-(sp)
	char * langName = getPrefsFilename (copyString (filename));
   1360e:	                      move.l 576(sp),-(sp)
   13612:	                      jsr b8 <copyString>
   13618:	                      addq.l #4,sp
   1361a:	                      move.l d0,-(sp)
   1361c:	                      jsr 1341a <getPrefsFilename>
   13622:	                      addq.l #4,sp
   13624:	                      move.l d0,562(sp)

	BPTR fp = Open(langName,MODE_OLDFILE);	
   13628:	                      move.l 562(sp),558(sp)
   1362e:	                      move.l #1005,554(sp)
   13636:	                      move.l 1a7ac <DOSBase>,d0
   1363c:	                      movea.l d0,a6
   1363e:	                      move.l 558(sp),d1
   13642:	                      move.l 554(sp),d2
   13646:	                      jsr -30(a6)
   1364a:	                      move.l d0,550(sp)
   1364e:	                      move.l 550(sp),d0
   13652:	                      move.l d0,546(sp)

	gameSettings.languageID = 0;
   13656:	                      clr.l 1a880 <gameSettings>
	gameSettings.userFullScreen = TRUE; //Always fullscreen on AMIGA
   1365c:	                      move.w #1,1a888 <gameSettings+0x8>
	gameSettings.refreshRate = 0;
   13664:	                      clr.l 1a88a <gameSettings+0xa>
	gameSettings.antiAlias = 1;
   1366a:	                      moveq #1,d0
   1366c:	                      move.l d0,1a88e <gameSettings+0xe>
	gameSettings.fixedPixels = FALSE;
   13672:	                      clr.w 1a892 <gameSettings+0x12>
	gameSettings.noStartWindow = FALSE;
   13678:	                      clr.w 1a894 <gameSettings+0x14>
	gameSettings.debugMode = FALSE;
   1367e:	                      clr.w 1a896 <gameSettings+0x16>

	FreeVec(langName);
   13684:	                      move.l 562(sp),542(sp)
   1368a:	                      move.l 1a7a4 <SysBase>,d0
   13690:	                      movea.l d0,a6
   13692:	                      movea.l 542(sp),a1
   13696:	                      jsr -690(a6)
	langName = NULL;
   1369a:	                      clr.l 562(sp)

	if (fp) {
   1369e:	                      tst.l 546(sp)
   136a2:	/-------------------- beq.w 13980 <readIniFile+0x37a>
		char lineSoFar[257] = "";
   136a6:	|                     move.l sp,d0
   136a8:	|                     addi.l #265,d0
   136ae:	|                     move.l #257,d1
   136b4:	|                     move.l d1,-(sp)
   136b6:	|                     clr.l -(sp)
   136b8:	|                     move.l d0,-(sp)
   136ba:	|                     jsr 16fc0 <memset>
   136c0:	|                     lea 12(sp),sp
		char secondSoFar[257] = "";
   136c4:	|                     move.l sp,d0
   136c6:	|                     addq.l #8,d0
   136c8:	|                     move.l #257,d1
   136ce:	|                     move.l d1,-(sp)
   136d0:	|                     clr.l -(sp)
   136d2:	|                     move.l d0,-(sp)
   136d4:	|                     jsr 16fc0 <memset>
   136da:	|                     lea 12(sp),sp
		unsigned char here = 0;
   136de:	|                     clr.b 571(sp)
		char readChar = ' ';
   136e2:	|                     move.b #32,570(sp)
		BOOL keepGoing = TRUE;
   136e8:	|                     move.w #1,568(sp)
		BOOL doingSecond = FALSE;
   136ee:	|                     clr.w 566(sp)
		LONG tmp = 0;
   136f2:	|                     clr.l 538(sp)

		do {

			tmp = FGetC (fp);
   136f6:	|  /----------------> move.l 546(sp),534(sp)
   136fc:	|  |                  move.l 1a7ac <DOSBase>,d0
   13702:	|  |                  movea.l d0,a6
   13704:	|  |                  move.l 534(sp),d1
   13708:	|  |                  jsr -306(a6)
   1370c:	|  |                  move.l d0,530(sp)
   13710:	|  |                  move.l 530(sp),d0
   13714:	|  |                  move.l d0,538(sp)
			if (tmp == - 1) {
   13718:	|  |                  moveq #-1,d1
   1371a:	|  |                  cmp.l 538(sp),d1
   1371e:	|  |           /----- bne.s 1372c <readIniFile+0x126>
				readChar = '\n';
   13720:	|  |           |      move.b #10,570(sp)
				keepGoing = FALSE;
   13726:	|  |           |      clr.w 568(sp)
   1372a:	|  |           |  /-- bra.s 13732 <readIniFile+0x12c>
			} else {
				readChar = (char) tmp;
   1372c:	|  |           \--|-> move.b 541(sp),570(sp)
			}

			switch (readChar) {
   13732:	|  |              \-> move.b 570(sp),d0
   13736:	|  |                  ext.w d0
   13738:	|  |                  movea.w d0,a0
   1373a:	|  |                  moveq #61,d0
   1373c:	|  |                  cmp.l a0,d0
   1373e:	|  |     /----------- beq.w 138e8 <readIniFile+0x2e2>
   13742:	|  |     |            moveq #61,d1
   13744:	|  |     |            cmp.l a0,d1
   13746:	|  |  /--|----------- blt.w 138f4 <readIniFile+0x2ee>
   1374a:	|  |  |  |            moveq #10,d0
   1374c:	|  |  |  |            cmp.l a0,d0
   1374e:	|  |  |  |        /-- beq.s 13758 <readIniFile+0x152>
   13750:	|  |  |  |        |   moveq #13,d1
   13752:	|  |  |  |        |   cmp.l a0,d1
   13754:	|  |  +--|--------|-- bne.w 138f4 <readIniFile+0x2ee>
				case '\n':
				case '\r':
				if (doingSecond) {
   13758:	|  |  |  |        \-> tst.w 566(sp)
   1375c:	|  |  |  |     /----- beq.w 138d6 <readIniFile+0x2d0>
					if (strcmp (lineSoFar, "LANGUAGE") == 0)
   13760:	|  |  |  |     |      pea 19b69 <line.c.05397aaf+0x17f>
   13766:	|  |  |  |     |      move.l sp,d0
   13768:	|  |  |  |     |      addi.l #269,d0
   1376e:	|  |  |  |     |      move.l d0,-(sp)
   13770:	|  |  |  |     |      jsr 13a9c <strcmp>
   13776:	|  |  |  |     |      addq.l #8,sp
   13778:	|  |  |  |     |      tst.l d0
   1377a:	|  |  |  |     |  /-- bne.s 13794 <readIniFile+0x18e>
					{
						gameSettings.languageID = stringToInt (secondSoFar);
   1377c:	|  |  |  |     |  |   move.l sp,d0
   1377e:	|  |  |  |     |  |   addq.l #8,d0
   13780:	|  |  |  |     |  |   move.l d0,-(sp)
   13782:	|  |  |  |     |  |   jsr 1398c <stringToInt>
   13788:	|  |  |  |     |  |   addq.l #4,sp
   1378a:	|  |  |  |     |  |   move.l d0,1a880 <gameSettings>
   13790:	|  |  |  |     +--|-- bra.w 138d6 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "WINDOW") == 0)
   13794:	|  |  |  |     |  \-> pea 19b72 <line.c.05397aaf+0x188>
   1379a:	|  |  |  |     |      move.l sp,d0
   1379c:	|  |  |  |     |      addi.l #269,d0
   137a2:	|  |  |  |     |      move.l d0,-(sp)
   137a4:	|  |  |  |     |      jsr 13a9c <strcmp>
   137aa:	|  |  |  |     |      addq.l #8,sp
   137ac:	|  |  |  |     |      tst.l d0
   137ae:	|  |  |  |     |  /-- bne.s 137d4 <readIniFile+0x1ce>
					{
						gameSettings.userFullScreen = ! stringToInt (secondSoFar);
   137b0:	|  |  |  |     |  |   move.l sp,d0
   137b2:	|  |  |  |     |  |   addq.l #8,d0
   137b4:	|  |  |  |     |  |   move.l d0,-(sp)
   137b6:	|  |  |  |     |  |   jsr 1398c <stringToInt>
   137bc:	|  |  |  |     |  |   addq.l #4,sp
   137be:	|  |  |  |     |  |   tst.l d0
   137c0:	|  |  |  |     |  |   seq d0
   137c2:	|  |  |  |     |  |   neg.b d0
   137c4:	|  |  |  |     |  |   move.b d0,d0
   137c6:	|  |  |  |     |  |   andi.w #255,d0
   137ca:	|  |  |  |     |  |   move.w d0,1a888 <gameSettings+0x8>
   137d0:	|  |  |  |     +--|-- bra.w 138d6 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "REFRESH") == 0)
   137d4:	|  |  |  |     |  \-> pea 19b79 <line.c.05397aaf+0x18f>
   137da:	|  |  |  |     |      move.l sp,d0
   137dc:	|  |  |  |     |      addi.l #269,d0
   137e2:	|  |  |  |     |      move.l d0,-(sp)
   137e4:	|  |  |  |     |      jsr 13a9c <strcmp>
   137ea:	|  |  |  |     |      addq.l #8,sp
   137ec:	|  |  |  |     |      tst.l d0
   137ee:	|  |  |  |     |  /-- bne.s 13808 <readIniFile+0x202>
					{
						gameSettings.refreshRate = stringToInt (secondSoFar);
   137f0:	|  |  |  |     |  |   move.l sp,d0
   137f2:	|  |  |  |     |  |   addq.l #8,d0
   137f4:	|  |  |  |     |  |   move.l d0,-(sp)
   137f6:	|  |  |  |     |  |   jsr 1398c <stringToInt>
   137fc:	|  |  |  |     |  |   addq.l #4,sp
   137fe:	|  |  |  |     |  |   move.l d0,1a88a <gameSettings+0xa>
   13804:	|  |  |  |     +--|-- bra.w 138d6 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "ANTIALIAS") == 0)
   13808:	|  |  |  |     |  \-> pea 19b81 <line.c.05397aaf+0x197>
   1380e:	|  |  |  |     |      move.l sp,d0
   13810:	|  |  |  |     |      addi.l #269,d0
   13816:	|  |  |  |     |      move.l d0,-(sp)
   13818:	|  |  |  |     |      jsr 13a9c <strcmp>
   1381e:	|  |  |  |     |      addq.l #8,sp
   13820:	|  |  |  |     |      tst.l d0
   13822:	|  |  |  |     |  /-- bne.s 1383c <readIniFile+0x236>
					{
						gameSettings.antiAlias = stringToInt (secondSoFar);
   13824:	|  |  |  |     |  |   move.l sp,d0
   13826:	|  |  |  |     |  |   addq.l #8,d0
   13828:	|  |  |  |     |  |   move.l d0,-(sp)
   1382a:	|  |  |  |     |  |   jsr 1398c <stringToInt>
   13830:	|  |  |  |     |  |   addq.l #4,sp
   13832:	|  |  |  |     |  |   move.l d0,1a88e <gameSettings+0xe>
   13838:	|  |  |  |     +--|-- bra.w 138d6 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "FIXEDPIXELS") == 0)
   1383c:	|  |  |  |     |  \-> pea 19b8b <line.c.05397aaf+0x1a1>
   13842:	|  |  |  |     |      move.l sp,d0
   13844:	|  |  |  |     |      addi.l #269,d0
   1384a:	|  |  |  |     |      move.l d0,-(sp)
   1384c:	|  |  |  |     |      jsr 13a9c <strcmp>
   13852:	|  |  |  |     |      addq.l #8,sp
   13854:	|  |  |  |     |      tst.l d0
   13856:	|  |  |  |     |  /-- bne.s 13870 <readIniFile+0x26a>
					{
						gameSettings.fixedPixels = stringToInt (secondSoFar);
   13858:	|  |  |  |     |  |   move.l sp,d0
   1385a:	|  |  |  |     |  |   addq.l #8,d0
   1385c:	|  |  |  |     |  |   move.l d0,-(sp)
   1385e:	|  |  |  |     |  |   jsr 1398c <stringToInt>
   13864:	|  |  |  |     |  |   addq.l #4,sp
   13866:	|  |  |  |     |  |   move.l d0,d0
   13868:	|  |  |  |     |  |   move.w d0,1a892 <gameSettings+0x12>
   1386e:	|  |  |  |     +--|-- bra.s 138d6 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "NOSTARTWINDOW") == 0)
   13870:	|  |  |  |     |  \-> pea 19b97 <line.c.05397aaf+0x1ad>
   13876:	|  |  |  |     |      move.l sp,d0
   13878:	|  |  |  |     |      addi.l #269,d0
   1387e:	|  |  |  |     |      move.l d0,-(sp)
   13880:	|  |  |  |     |      jsr 13a9c <strcmp>
   13886:	|  |  |  |     |      addq.l #8,sp
   13888:	|  |  |  |     |      tst.l d0
   1388a:	|  |  |  |     |  /-- bne.s 138a4 <readIniFile+0x29e>
					{
						gameSettings.noStartWindow = stringToInt (secondSoFar);
   1388c:	|  |  |  |     |  |   move.l sp,d0
   1388e:	|  |  |  |     |  |   addq.l #8,d0
   13890:	|  |  |  |     |  |   move.l d0,-(sp)
   13892:	|  |  |  |     |  |   jsr 1398c <stringToInt>
   13898:	|  |  |  |     |  |   addq.l #4,sp
   1389a:	|  |  |  |     |  |   move.l d0,d0
   1389c:	|  |  |  |     |  |   move.w d0,1a894 <gameSettings+0x14>
   138a2:	|  |  |  |     +--|-- bra.s 138d6 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "DEBUGMODE") == 0)
   138a4:	|  |  |  |     |  \-> pea 19ba5 <line.c.05397aaf+0x1bb>
   138aa:	|  |  |  |     |      move.l sp,d0
   138ac:	|  |  |  |     |      addi.l #269,d0
   138b2:	|  |  |  |     |      move.l d0,-(sp)
   138b4:	|  |  |  |     |      jsr 13a9c <strcmp>
   138ba:	|  |  |  |     |      addq.l #8,sp
   138bc:	|  |  |  |     |      tst.l d0
   138be:	|  |  |  |     +----- bne.s 138d6 <readIniFile+0x2d0>
					{
						gameSettings.debugMode = stringToInt (secondSoFar);
   138c0:	|  |  |  |     |      move.l sp,d0
   138c2:	|  |  |  |     |      addq.l #8,d0
   138c4:	|  |  |  |     |      move.l d0,-(sp)
   138c6:	|  |  |  |     |      jsr 1398c <stringToInt>
   138cc:	|  |  |  |     |      addq.l #4,sp
   138ce:	|  |  |  |     |      move.l d0,d0
   138d0:	|  |  |  |     |      move.w d0,1a896 <gameSettings+0x16>
					}
				}
				here = 0;
   138d6:	|  |  |  |     \----> clr.b 571(sp)
				doingSecond = FALSE;
   138da:	|  |  |  |            clr.w 566(sp)
				lineSoFar[0] = 0;
   138de:	|  |  |  |            clr.b 265(sp)
				secondSoFar[0] = 0;
   138e2:	|  |  |  |            clr.b 8(sp)
				break;
   138e6:	|  |  |  |  /-------- bra.s 1395e <readIniFile+0x358>

				case '=':
				doingSecond = TRUE;
   138e8:	|  |  |  \--|-------> move.w #1,566(sp)
				here = 0;
   138ee:	|  |  |     |         clr.b 571(sp)
				break;
   138f2:	|  |  |     +-------- bra.s 1395e <readIniFile+0x358>

				default:
				if (doingSecond) {
   138f4:	|  |  \-----|-------> tst.w 566(sp)
   138f8:	|  |        |  /----- beq.s 1392c <readIniFile+0x326>
					secondSoFar[here ++] = readChar;
   138fa:	|  |        |  |      move.b 571(sp),d0
   138fe:	|  |        |  |      move.b d0,d1
   13900:	|  |        |  |      addq.b #1,d1
   13902:	|  |        |  |      move.b d1,571(sp)
   13906:	|  |        |  |      move.b d0,d0
   13908:	|  |        |  |      andi.l #255,d0
   1390e:	|  |        |  |      lea 572(sp),a0
   13912:	|  |        |  |      adda.l d0,a0
   13914:	|  |        |  |      move.b 570(sp),-564(a0)
					secondSoFar[here] = 0;
   1391a:	|  |        |  |      moveq #0,d0
   1391c:	|  |        |  |      move.b 571(sp),d0
   13920:	|  |        |  |      lea 572(sp),a0
   13924:	|  |        |  |      adda.l d0,a0
   13926:	|  |        |  |      clr.b -564(a0)
				} else {
					lineSoFar[here ++] = readChar;
					lineSoFar[here] = 0;
				}
				break;
   1392a:	|  |        |  |  /-- bra.s 1395c <readIniFile+0x356>
					lineSoFar[here ++] = readChar;
   1392c:	|  |        |  \--|-> move.b 571(sp),d0
   13930:	|  |        |     |   move.b d0,d1
   13932:	|  |        |     |   addq.b #1,d1
   13934:	|  |        |     |   move.b d1,571(sp)
   13938:	|  |        |     |   move.b d0,d0
   1393a:	|  |        |     |   andi.l #255,d0
   13940:	|  |        |     |   lea 572(sp),a0
   13944:	|  |        |     |   adda.l d0,a0
   13946:	|  |        |     |   move.b 570(sp),-307(a0)
					lineSoFar[here] = 0;
   1394c:	|  |        |     |   moveq #0,d0
   1394e:	|  |        |     |   move.b 571(sp),d0
   13952:	|  |        |     |   lea 572(sp),a0
   13956:	|  |        |     |   adda.l d0,a0
   13958:	|  |        |     |   clr.b -307(a0)
				break;
   1395c:	|  |        |     \-> nop
			}
		} while (keepGoing);
   1395e:	|  |        \-------> tst.w 568(sp)
   13962:	|  \----------------- bne.w 136f6 <readIniFile+0xf0>

		Close(fp);
   13966:	|                     move.l 546(sp),526(sp)
   1396c:	|                     move.l 1a7ac <DOSBase>,d0
   13972:	|                     movea.l d0,a6
   13974:	|                     move.l 526(sp),d1
   13978:	|                     jsr -36(a6)
   1397c:	|                     move.l d0,522(sp)
	}
}
   13980:	\-------------------> nop
   13982:	                      move.l (sp)+,d2
   13984:	                      movea.l (sp)+,a6
   13986:	                      lea 564(sp),sp
   1398a:	                      rts

0001398c <stringToInt>:

unsigned int stringToInt (char * s) {
   1398c:	             subq.l #8,sp
	int i = 0;
   1398e:	             clr.l 4(sp)
	BOOL negative = FALSE;
   13992:	             clr.w 2(sp)
	for (;;) {
		if (*s >= '0' && *s <= '9') {
   13996:	/----------> movea.l 12(sp),a0
   1399a:	|            move.b (a0),d0
   1399c:	|            cmpi.b #47,d0
   139a0:	|        /-- ble.s 139d8 <stringToInt+0x4c>
   139a2:	|        |   movea.l 12(sp),a0
   139a6:	|        |   move.b (a0),d0
   139a8:	|        |   cmpi.b #57,d0
   139ac:	|        +-- bgt.s 139d8 <stringToInt+0x4c>
			i *= 10;
   139ae:	|        |   move.l 4(sp),d1
   139b2:	|        |   move.l d1,d0
   139b4:	|        |   add.l d0,d0
   139b6:	|        |   add.l d0,d0
   139b8:	|        |   add.l d1,d0
   139ba:	|        |   add.l d0,d0
   139bc:	|        |   move.l d0,4(sp)
			i += *s - '0';
   139c0:	|        |   movea.l 12(sp),a0
   139c4:	|        |   move.b (a0),d0
   139c6:	|        |   ext.w d0
   139c8:	|        |   movea.w d0,a0
   139ca:	|        |   moveq #-48,d0
   139cc:	|        |   add.l a0,d0
   139ce:	|        |   add.l d0,4(sp)
			s ++;
   139d2:	|        |   addq.l #1,12(sp)
   139d6:	|  /-----|-- bra.s 13a10 <stringToInt+0x84>
		} else if (*s == '-') {
   139d8:	|  |     \-> movea.l 12(sp),a0
   139dc:	|  |         move.b (a0),d0
   139de:	|  |         cmpi.b #45,d0
   139e2:	|  |     /-- bne.s 139fc <stringToInt+0x70>
			negative = ! negative;
   139e4:	|  |     |   tst.w 2(sp)
   139e8:	|  |     |   seq d0
   139ea:	|  |     |   neg.b d0
   139ec:	|  |     |   move.b d0,d0
   139ee:	|  |     |   andi.w #255,d0
   139f2:	|  |     |   move.w d0,2(sp)
			s++;
   139f6:	|  |     |   addq.l #1,12(sp)
   139fa:	+--|-----|-- bra.s 13996 <stringToInt+0xa>
		} else {
			if (negative)
   139fc:	|  |     \-> tst.w 2(sp)
   13a00:	|  |     /-- beq.s 13a0a <stringToInt+0x7e>
				return -i;
   13a02:	|  |     |   move.l 4(sp),d0
   13a06:	|  |     |   neg.l d0
   13a08:	|  |  /--|-- bra.s 13a12 <stringToInt+0x86>
			return i;
   13a0a:	|  |  |  \-> move.l 4(sp),d0
   13a0e:	|  |  +----- bra.s 13a12 <stringToInt+0x86>
		if (*s >= '0' && *s <= '9') {
   13a10:	\--\--|----X bra.s 13996 <stringToInt+0xa>
		}
	}
   13a12:	      \----> addq.l #8,sp
   13a14:	             rts

00013a16 <fileExists>:
 */
#include <proto/dos.h>
#include "helpers.h"
#include "support/gcc8_c_support.h"

BYTE fileExists(const char * file) {
   13a16:	    lea -28(sp),sp
   13a1a:	    move.l a6,-(sp)
   13a1c:	    move.l d2,-(sp)
	KPrintF("fileexists: Checking File");
   13a1e:	    pea 19baf <line.c.05397aaf+0x1c5>
   13a24:	    jsr 1703c <KPrintF>
   13a2a:	    addq.l #4,sp
	BPTR tester;
	BYTE retval = 0;
   13a2c:	    clr.b 35(sp)
	tester = Open(file, MODE_OLDFILE);
   13a30:	    move.l 40(sp),30(sp)
   13a36:	    move.l #1005,26(sp)
   13a3e:	    move.l 1a7ac <DOSBase>,d0
   13a44:	    movea.l d0,a6
   13a46:	    move.l 30(sp),d1
   13a4a:	    move.l 26(sp),d2
   13a4e:	    jsr -30(a6)
   13a52:	    move.l d0,22(sp)
   13a56:	    move.l 22(sp),d0
   13a5a:	    move.l d0,18(sp)
	if (tester) {
   13a5e:	/-- beq.s 13a8e <fileExists+0x78>
		KPrintF("fileexists: File exists");
   13a60:	|   pea 19bc9 <line.c.05397aaf+0x1df>
   13a66:	|   jsr 1703c <KPrintF>
   13a6c:	|   addq.l #4,sp
		retval = 1;
   13a6e:	|   move.b #1,35(sp)
		Close(tester);
   13a74:	|   move.l 18(sp),14(sp)
   13a7a:	|   move.l 1a7ac <DOSBase>,d0
   13a80:	|   movea.l d0,a6
   13a82:	|   move.l 14(sp),d1
   13a86:	|   jsr -36(a6)
   13a8a:	|   move.l d0,10(sp)
	}
	return retval;
   13a8e:	\-> move.b 35(sp),d0
   13a92:	    move.l (sp)+,d2
   13a94:	    movea.l (sp)+,a6
   13a96:	    lea 28(sp),sp
   13a9a:	    rts

00013a9c <strcmp>:
#endif


int strcmp(const char* s1, const char* s2)
{
    while(*s1 && (*s1 == *s2))
   13a9c:	   /-- bra.s 13aa6 <strcmp+0xa>
    {
        s1++;
   13a9e:	/--|-> addq.l #1,4(sp)
        s2++;
   13aa2:	|  |   addq.l #1,8(sp)
    while(*s1 && (*s1 == *s2))
   13aa6:	|  \-> movea.l 4(sp),a0
   13aaa:	|      move.b (a0),d0
   13aac:	|  /-- beq.s 13abe <strcmp+0x22>
   13aae:	|  |   movea.l 4(sp),a0
   13ab2:	|  |   move.b (a0),d1
   13ab4:	|  |   movea.l 8(sp),a0
   13ab8:	|  |   move.b (a0),d0
   13aba:	|  |   cmp.b d1,d0
   13abc:	\--|-- beq.s 13a9e <strcmp+0x2>
    }
    return *(const unsigned char*)s1 - *(const unsigned char*)s2;
   13abe:	   \-> movea.l 4(sp),a0
   13ac2:	       move.b (a0),d0
   13ac4:	       moveq #0,d1
   13ac6:	       move.b d0,d1
   13ac8:	       movea.l 8(sp),a0
   13acc:	       move.b (a0),d0
   13ace:	       move.b d0,d0
   13ad0:	       andi.l #255,d0
   13ad6:	       sub.l d0,d1
   13ad8:	       move.l d1,d0
}
   13ada:	       rts

00013adc <strlen>:

long unsigned int strlen (const char *s) 
{  
   13adc:	       subq.l #4,sp
	long unsigned int i = 0;
   13ade:	       clr.l (sp)
	while(s[i]) i++; 
   13ae0:	   /-- bra.s 13ae4 <strlen+0x8>
   13ae2:	/--|-> addq.l #1,(sp)
   13ae4:	|  \-> movea.l 8(sp),a0
   13ae8:	|      adda.l (sp),a0
   13aea:	|      move.b (a0),d0
   13aec:	\----- bne.s 13ae2 <strlen+0x6>
	return(i);
   13aee:	       move.l (sp),d0
}
   13af0:	       addq.l #4,sp
   13af2:	       rts

00013af4 <strcpy>:

char *strcpy(char *t, const char *s) 
{
	while(*t++ = *s++);
   13af4:	    nop
   13af6:	/-> move.l 8(sp),d0
   13afa:	|   move.l d0,d1
   13afc:	|   addq.l #1,d1
   13afe:	|   move.l d1,8(sp)
   13b02:	|   movea.l 4(sp),a0
   13b06:	|   lea 1(a0),a1
   13b0a:	|   move.l a1,4(sp)
   13b0e:	|   movea.l d0,a1
   13b10:	|   move.b (a1),d0
   13b12:	|   move.b d0,(a0)
   13b14:	|   move.b (a0),d0
   13b16:	\-- bne.s 13af6 <strcpy+0x2>
}
   13b18:	    nop
   13b1a:	    rts

00013b1c <joinStrings>:

char * joinStrings (const char * s1, const char * s2) {
   13b1c:	    lea -20(sp),sp
   13b20:	    move.l a6,-(sp)
   13b22:	    move.l d2,-(sp)
	char * newString = AllocVec(strlen (s1) + strlen (s2) + 1, MEMF_ANY); 
   13b24:	    move.l 32(sp),-(sp)
   13b28:	    jsr 13adc <strlen>
   13b2e:	    addq.l #4,sp
   13b30:	    move.l d0,d2
   13b32:	    move.l 36(sp),-(sp)
   13b36:	    jsr 13adc <strlen>
   13b3c:	    addq.l #4,sp
   13b3e:	    add.l d2,d0
   13b40:	    move.l d0,d1
   13b42:	    addq.l #1,d1
   13b44:	    move.l d1,20(sp)
   13b48:	    clr.l 16(sp)
   13b4c:	    move.l 1a7a4 <SysBase>,d0
   13b52:	    movea.l d0,a6
   13b54:	    move.l 20(sp),d0
   13b58:	    move.l 16(sp),d1
   13b5c:	    jsr -684(a6)
   13b60:	    move.l d0,12(sp)
   13b64:	    move.l 12(sp),d0
   13b68:	    move.l d0,8(sp)
	char * t = newString;
   13b6c:	    move.l 8(sp),24(sp)

	while(*t++ = *s1++);
   13b72:	    nop
   13b74:	/-> move.l 32(sp),d0
   13b78:	|   move.l d0,d1
   13b7a:	|   addq.l #1,d1
   13b7c:	|   move.l d1,32(sp)
   13b80:	|   movea.l 24(sp),a0
   13b84:	|   lea 1(a0),a1
   13b88:	|   move.l a1,24(sp)
   13b8c:	|   movea.l d0,a1
   13b8e:	|   move.b (a1),d0
   13b90:	|   move.b d0,(a0)
   13b92:	|   move.b (a0),d0
   13b94:	\-- bne.s 13b74 <joinStrings+0x58>
	t--;
   13b96:	    subq.l #1,24(sp)
	while(*t++ = *s2++);
   13b9a:	    nop
   13b9c:	/-> move.l 36(sp),d0
   13ba0:	|   move.l d0,d1
   13ba2:	|   addq.l #1,d1
   13ba4:	|   move.l d1,36(sp)
   13ba8:	|   movea.l 24(sp),a0
   13bac:	|   lea 1(a0),a1
   13bb0:	|   move.l a1,24(sp)
   13bb4:	|   movea.l d0,a1
   13bb6:	|   move.b (a1),d0
   13bb8:	|   move.b d0,(a0)
   13bba:	|   move.b (a0),d0
   13bbc:	\-- bne.s 13b9c <joinStrings+0x80>

	return newString;
   13bbe:	    move.l 8(sp),d0
}
   13bc2:	    move.l (sp)+,d2
   13bc4:	    movea.l (sp)+,a6
   13bc6:	    lea 20(sp),sp
   13bca:	    rts

00013bcc <itoa>:

#define va_start(ap, last) (ap = (va_list)&last + sizeof(last))
#define va_arg(ap, type) (*(type*)(ap += sizeof(type)) - 1)
#define va_end(ap) (ap = (va_list)0)

char* itoa(int value, char* str, int base) {
   13bcc:	       lea -16(sp),sp
    char* rc;
    char* ptr;
    char* low;
    // Set '-' for negative decimals.
    if (base == 10 && value < 0) {
   13bd0:	       moveq #10,d0
   13bd2:	       cmp.l 28(sp),d0
   13bd6:	   /-- bne.s 13bf4 <itoa+0x28>
   13bd8:	   |   tst.l 20(sp)
   13bdc:	   +-- bge.s 13bf4 <itoa+0x28>
        *str++ = '-';
   13bde:	   |   move.l 24(sp),d0
   13be2:	   |   move.l d0,d1
   13be4:	   |   addq.l #1,d1
   13be6:	   |   move.l d1,24(sp)
   13bea:	   |   movea.l d0,a0
   13bec:	   |   move.b #45,(a0)
        value *= -1;
   13bf0:	   |   neg.l 20(sp)
    }
    rc = ptr = str;
   13bf4:	   \-> move.l 24(sp),12(sp)
   13bfa:	       move.l 12(sp),4(sp)
    // Set pointer to last digit's place.
    do {
        *ptr++ = "0123456789abcdef"[value % base];
   13c00:	   /-> move.l 20(sp),d0
   13c04:	   |   move.l 28(sp),-(sp)
   13c08:	   |   move.l d0,-(sp)
   13c0a:	   |   jsr 17a74 <__modsi3>
   13c10:	   |   addq.l #8,sp
   13c12:	   |   movea.l d0,a1
   13c14:	   |   move.l 12(sp),d0
   13c18:	   |   move.l d0,d1
   13c1a:	   |   addq.l #1,d1
   13c1c:	   |   move.l d1,12(sp)
   13c20:	   |   lea 19be1 <line.c.05397aaf+0x1f7>,a0
   13c26:	   |   move.b (0,a1,a0.l),d1
   13c2a:	   |   movea.l d0,a0
   13c2c:	   |   move.b d1,(a0)
        value /= base;
   13c2e:	   |   move.l 28(sp),-(sp)
   13c32:	   |   move.l 24(sp),-(sp)
   13c36:	   |   jsr 17a46 <__divsi3>
   13c3c:	   |   addq.l #8,sp
   13c3e:	   |   move.l d0,20(sp)
    } while (value);
   13c42:	   \-- bne.s 13c00 <itoa+0x34>
    // Null-terminate string.
    *ptr-- = '\0';
   13c44:	       move.l 12(sp),d0
   13c48:	       move.l d0,d1
   13c4a:	       subq.l #1,d1
   13c4c:	       move.l d1,12(sp)
   13c50:	       movea.l d0,a0
   13c52:	       clr.b (a0)
    // Reverse string.
    for (low = rc; low < ptr; low++, ptr--) {
   13c54:	       move.l 4(sp),8(sp)
   13c5a:	   /-- bra.s 13c80 <itoa+0xb4>
        char temp = *low;
   13c5c:	/--|-> movea.l 8(sp),a0
   13c60:	|  |   move.b (a0),3(sp)
        *low = *ptr;
   13c64:	|  |   movea.l 12(sp),a0
   13c68:	|  |   move.b (a0),d0
   13c6a:	|  |   movea.l 8(sp),a0
   13c6e:	|  |   move.b d0,(a0)
        *ptr = temp;
   13c70:	|  |   movea.l 12(sp),a0
   13c74:	|  |   move.b 3(sp),(a0)
    for (low = rc; low < ptr; low++, ptr--) {
   13c78:	|  |   addq.l #1,8(sp)
   13c7c:	|  |   subq.l #1,12(sp)
   13c80:	|  \-> move.l 8(sp),d0
   13c84:	|      cmp.l 12(sp),d0
   13c88:	\----- bcs.s 13c5c <itoa+0x90>
    }
    return rc;
   13c8a:	       move.l 4(sp),d0
}
   13c8e:	       lea 16(sp),sp
   13c92:	       rts

00013c94 <vsprintf2>:

int vsprintf2(char* str, const char* format, va_list args) {
   13c94:	                            lea -40(sp),sp
   13c98:	                            move.l d2,-(sp)
    char* s = str;
   13c9a:	                            move.l 48(sp),40(sp)
    const char* p = format;
   13ca0:	                            move.l 52(sp),36(sp)
    int i;
    char* sval;
    char buffer[20];

    while (*p) {
   13ca6:	   /----------------------- bra.w 13dda <vsprintf2+0x146>
        if (*p == '%') {
   13caa:	/--|----------------------> movea.l 36(sp),a0
   13cae:	|  |                        move.b (a0),d0
   13cb0:	|  |                        cmpi.b #37,d0
   13cb4:	|  |  /-------------------- bne.w 13dc0 <vsprintf2+0x12c>
            switch (*++p) {
   13cb8:	|  |  |                     addq.l #1,36(sp)
   13cbc:	|  |  |                     movea.l 36(sp),a0
   13cc0:	|  |  |                     move.b (a0),d0
   13cc2:	|  |  |                     ext.w d0
   13cc4:	|  |  |                     movea.w d0,a0
   13cc6:	|  |  |                     moveq #115,d0
   13cc8:	|  |  |                     cmp.l a0,d0
   13cca:	|  |  |           /-------- beq.s 13d42 <vsprintf2+0xae>
   13ccc:	|  |  |           |         moveq #115,d1
   13cce:	|  |  |           |         cmp.l a0,d1
   13cd0:	|  |  |  /--------|-------- blt.w 13da8 <vsprintf2+0x114>
   13cd4:	|  |  |  |        |         moveq #99,d2
   13cd6:	|  |  |  |        |         cmp.l a0,d2
   13cd8:	|  |  |  |  /-----|-------- beq.w 13d80 <vsprintf2+0xec>
   13cdc:	|  |  |  |  |     |         moveq #100,d0
   13cde:	|  |  |  |  |     |         cmp.l a0,d0
   13ce0:	|  |  |  +--|-----|-------- bne.w 13da8 <vsprintf2+0x114>
                case 'd':
                    i = va_arg(args, int);
   13ce4:	|  |  |  |  |     |         addq.l #4,56(sp)
   13ce8:	|  |  |  |  |     |         movea.l 56(sp),a0
   13cec:	|  |  |  |  |     |         move.l (a0),d0
   13cee:	|  |  |  |  |     |         move.l d0,d1
   13cf0:	|  |  |  |  |     |         subq.l #1,d1
   13cf2:	|  |  |  |  |     |         move.l d1,24(sp)
                    itoa(i, buffer, 10);
   13cf6:	|  |  |  |  |     |         pea a <_start+0xa>
   13cfa:	|  |  |  |  |     |         lea 8(sp),a0
   13cfe:	|  |  |  |  |     |         move.l a0,-(sp)
   13d00:	|  |  |  |  |     |         move.l 32(sp),-(sp)
   13d04:	|  |  |  |  |     |         jsr 13bcc <itoa>
   13d0a:	|  |  |  |  |     |         lea 12(sp),sp
					for (char* b = buffer; *b; b++) {
   13d0e:	|  |  |  |  |     |         lea 44(sp),a0
   13d12:	|  |  |  |  |     |         lea -40(a0),a0
   13d16:	|  |  |  |  |     |         move.l a0,28(sp)
   13d1a:	|  |  |  |  |     |     /-- bra.s 13d36 <vsprintf2+0xa2>
                        *s++ = *b;
   13d1c:	|  |  |  |  |     |  /--|-> move.l 40(sp),d0
   13d20:	|  |  |  |  |     |  |  |   move.l d0,d1
   13d22:	|  |  |  |  |     |  |  |   addq.l #1,d1
   13d24:	|  |  |  |  |     |  |  |   move.l d1,40(sp)
   13d28:	|  |  |  |  |     |  |  |   movea.l 28(sp),a0
   13d2c:	|  |  |  |  |     |  |  |   move.b (a0),d1
   13d2e:	|  |  |  |  |     |  |  |   movea.l d0,a0
   13d30:	|  |  |  |  |     |  |  |   move.b d1,(a0)
					for (char* b = buffer; *b; b++) {
   13d32:	|  |  |  |  |     |  |  |   addq.l #1,28(sp)
   13d36:	|  |  |  |  |     |  |  \-> movea.l 28(sp),a0
   13d3a:	|  |  |  |  |     |  |      move.b (a0),d0
   13d3c:	|  |  |  |  |     |  \----- bne.s 13d1c <vsprintf2+0x88>
                    }
                    break;
   13d3e:	|  |  |  |  |  /--|-------- bra.w 13dd6 <vsprintf2+0x142>
                case 's':
                    sval = va_arg(args, char*);
   13d42:	|  |  |  |  |  |  \-------> addq.l #4,56(sp)
   13d46:	|  |  |  |  |  |            movea.l 56(sp),a0
   13d4a:	|  |  |  |  |  |            move.l (a0),d0
   13d4c:	|  |  |  |  |  |            move.l d0,d1
   13d4e:	|  |  |  |  |  |            subq.l #1,d1
   13d50:	|  |  |  |  |  |            move.l d1,32(sp)
                    while (*sval) {
   13d54:	|  |  |  |  |  |        /-- bra.s 13d76 <vsprintf2+0xe2>
                        *s++ = *sval++;
   13d56:	|  |  |  |  |  |     /--|-> move.l 32(sp),d1
   13d5a:	|  |  |  |  |  |     |  |   move.l d1,d2
   13d5c:	|  |  |  |  |  |     |  |   addq.l #1,d2
   13d5e:	|  |  |  |  |  |     |  |   move.l d2,32(sp)
   13d62:	|  |  |  |  |  |     |  |   move.l 40(sp),d0
   13d66:	|  |  |  |  |  |     |  |   move.l d0,d2
   13d68:	|  |  |  |  |  |     |  |   addq.l #1,d2
   13d6a:	|  |  |  |  |  |     |  |   move.l d2,40(sp)
   13d6e:	|  |  |  |  |  |     |  |   movea.l d1,a0
   13d70:	|  |  |  |  |  |     |  |   move.b (a0),d1
   13d72:	|  |  |  |  |  |     |  |   movea.l d0,a0
   13d74:	|  |  |  |  |  |     |  |   move.b d1,(a0)
                    while (*sval) {
   13d76:	|  |  |  |  |  |     |  \-> movea.l 32(sp),a0
   13d7a:	|  |  |  |  |  |     |      move.b (a0),d0
   13d7c:	|  |  |  |  |  |     \----- bne.s 13d56 <vsprintf2+0xc2>
                    }
                    break;
   13d7e:	|  |  |  |  |  +----------- bra.s 13dd6 <vsprintf2+0x142>
                case 'c':
                    i = va_arg(args, int);
   13d80:	|  |  |  |  \--|----------> addq.l #4,56(sp)
   13d84:	|  |  |  |     |            movea.l 56(sp),a0
   13d88:	|  |  |  |     |            move.l (a0),d0
   13d8a:	|  |  |  |     |            move.l d0,d1
   13d8c:	|  |  |  |     |            subq.l #1,d1
   13d8e:	|  |  |  |     |            move.l d1,24(sp)
                    *s++ = (char)i;
   13d92:	|  |  |  |     |            move.l 40(sp),d0
   13d96:	|  |  |  |     |            move.l d0,d2
   13d98:	|  |  |  |     |            addq.l #1,d2
   13d9a:	|  |  |  |     |            move.l d2,40(sp)
   13d9e:	|  |  |  |     |            move.l 24(sp),d1
   13da2:	|  |  |  |     |            movea.l d0,a0
   13da4:	|  |  |  |     |            move.b d1,(a0)
                    break;
   13da6:	|  |  |  |     +----------- bra.s 13dd6 <vsprintf2+0x142>
                default:
                    *s++ = *p;
   13da8:	|  |  |  \-----|----------> move.l 40(sp),d0
   13dac:	|  |  |        |            move.l d0,d1
   13dae:	|  |  |        |            addq.l #1,d1
   13db0:	|  |  |        |            move.l d1,40(sp)
   13db4:	|  |  |        |            movea.l 36(sp),a0
   13db8:	|  |  |        |            move.b (a0),d1
   13dba:	|  |  |        |            movea.l d0,a0
   13dbc:	|  |  |        |            move.b d1,(a0)
                    break;
   13dbe:	|  |  |        +----------- bra.s 13dd6 <vsprintf2+0x142>
            }
        } else {
            *s++ = *p;
   13dc0:	|  |  \--------|----------> move.l 40(sp),d0
   13dc4:	|  |           |            move.l d0,d1
   13dc6:	|  |           |            addq.l #1,d1
   13dc8:	|  |           |            move.l d1,40(sp)
   13dcc:	|  |           |            movea.l 36(sp),a0
   13dd0:	|  |           |            move.b (a0),d1
   13dd2:	|  |           |            movea.l d0,a0
   13dd4:	|  |           |            move.b d1,(a0)
        }
        p++;
   13dd6:	|  |           \----------> addq.l #1,36(sp)
    while (*p) {
   13dda:	|  \----------------------> movea.l 36(sp),a0
   13dde:	|                           move.b (a0),d0
   13de0:	\-------------------------- bne.w 13caa <vsprintf2+0x16>
    }
    *s = '\0';
   13de4:	                            movea.l 40(sp),a0
   13de8:	                            clr.b (a0)
    return s - str;
   13dea:	                            move.l 40(sp),d0
   13dee:	                            sub.l 48(sp),d0
}
   13df2:	                            move.l (sp)+,d2
   13df4:	                            lea 40(sp),sp
   13df8:	                            rts

00013dfa <sprintf>:

int sprintf(char* str, const char* format, ...) {
   13dfa:	subq.l #8,sp
    va_list args;
    int done;

    va_start(args, format);
   13dfc:	moveq #16,d0
   13dfe:	add.l sp,d0
   13e00:	move.l d0,d1
   13e02:	addq.l #4,d1
   13e04:	move.l d1,4(sp)
    done = vsprintf2(str, format, args);
   13e08:	move.l 16(sp),d0
   13e0c:	move.l 4(sp),-(sp)
   13e10:	move.l d0,-(sp)
   13e12:	move.l 20(sp),-(sp)
   13e16:	jsr 13c94 <vsprintf2>
   13e1c:	lea 12(sp),sp
   13e20:	move.l d0,(sp)
    va_end(args);
   13e22:	clr.l 4(sp)

    return done;
   13e26:	move.l (sp),d0
}
   13e28:	addq.l #8,sp
   13e2a:	rts

00013e2c <addVarToStack>:
const char * typeName[] = {"undefined", "number", "user function", "string",
							"built-in function", "file", "stack",
							"object type", "animation", "costume"};


BOOL addVarToStack(const struct variable * va, struct variableStack ** thisStack) {
   13e2c:	       lea -20(sp),sp
   13e30:	       move.l a6,-(sp)
    struct variableStack * newStack = (struct variableStack *)AllocVec(sizeof(struct variableStack), MEMF_ANY);
   13e32:	       moveq #12,d0
   13e34:	       move.l d0,20(sp)
   13e38:	       clr.l 16(sp)
   13e3c:	       move.l 1a7a4 <SysBase>,d0
   13e42:	       movea.l d0,a6
   13e44:	       move.l 20(sp),d0
   13e48:	       move.l 16(sp),d1
   13e4c:	       jsr -684(a6)
   13e50:	       move.l d0,12(sp)
   13e54:	       move.l 12(sp),d0
   13e58:	       move.l d0,8(sp)
    if (!newStack) return FALSE;
   13e5c:	   /-- bne.s 13e62 <addVarToStack+0x36>
   13e5e:	   |   clr.w d0
   13e60:	/--|-- bra.s 13eaa <addVarToStack+0x7e>

    if (!copyMain(va, &newStack->thisVar)) {
   13e62:	|  \-> move.l 8(sp),d0
   13e66:	|      move.l d0,-(sp)
   13e68:	|      move.l 32(sp),-(sp)
   13e6c:	|      jsr 1498e <copyMain>
   13e72:	|      addq.l #8,sp
   13e74:	|      tst.w d0
   13e76:	|  /-- bne.s 13e92 <addVarToStack+0x66>
        FreeVec(newStack);
   13e78:	|  |   move.l 8(sp),4(sp)
   13e7e:	|  |   move.l 1a7a4 <SysBase>,d0
   13e84:	|  |   movea.l d0,a6
   13e86:	|  |   movea.l 4(sp),a1
   13e8a:	|  |   jsr -690(a6)
        return FALSE;
   13e8e:	|  |   clr.w d0
   13e90:	+--|-- bra.s 13eaa <addVarToStack+0x7e>
    }

    newStack->next = *thisStack;
   13e92:	|  \-> movea.l 32(sp),a0
   13e96:	|      move.l (a0),d0
   13e98:	|      movea.l 8(sp),a0
   13e9c:	|      move.l d0,8(a0)
    *thisStack = newStack;
   13ea0:	|      movea.l 32(sp),a0
   13ea4:	|      move.l 8(sp),(a0)
    return TRUE;
   13ea8:	|      moveq #1,d0
}
   13eaa:	\----> movea.l (sp)+,a6
   13eac:	       lea 20(sp),sp
   13eb0:	       rts

00013eb2 <addVarToStackQuick>:

BOOL addVarToStackQuick(struct variable *va, struct variableStack **thisStack) {
   13eb2:	       lea -16(sp),sp
   13eb6:	       move.l a6,-(sp)
    struct variableStack *newStack = AllocVec(sizeof(struct variableStack), MEMF_ANY);
   13eb8:	       moveq #12,d0
   13eba:	       move.l d0,16(sp)
   13ebe:	       clr.l 12(sp)
   13ec2:	       move.l 1a7a4 <SysBase>,d0
   13ec8:	       movea.l d0,a6
   13eca:	       move.l 16(sp),d0
   13ece:	       move.l 12(sp),d1
   13ed2:	       jsr -684(a6)
   13ed6:	       move.l d0,8(sp)
   13eda:	       move.l 8(sp),d0
   13ede:	       move.l d0,4(sp)
    if (!newStack) return FALSE;
   13ee2:	   /-- bne.s 13ee8 <addVarToStackQuick+0x36>
   13ee4:	   |   clr.w d0
   13ee6:	/--|-- bra.s 13f1e <addVarToStackQuick+0x6c>

//    if (!copyMain(va, &newStack->thisVar)) return FALSE;

    memcpy(&(newStack->thisVar), va, sizeof(struct variable));
   13ee8:	|  \-> move.l 4(sp),d0
   13eec:	|      pea 8 <_start+0x8>
   13ef0:	|      move.l 28(sp),-(sp)
   13ef4:	|      move.l d0,-(sp)
   13ef6:	|      jsr 16ff0 <memcpy>
   13efc:	|      lea 12(sp),sp
    va->varType = SVT_NULL;
   13f00:	|      movea.l 24(sp),a0
   13f04:	|      clr.l (a0)

    newStack->next = *thisStack;
   13f06:	|      movea.l 28(sp),a0
   13f0a:	|      move.l (a0),d0
   13f0c:	|      movea.l 4(sp),a0
   13f10:	|      move.l d0,8(a0)
    *thisStack = newStack;
   13f14:	|      movea.l 28(sp),a0
   13f18:	|      move.l 4(sp),(a0)
    return TRUE;
   13f1c:	|      moveq #1,d0
}
   13f1e:	\----> movea.l (sp)+,a6
   13f20:	       lea 16(sp),sp
   13f24:	       rts

00013f26 <addVariablesInSecond>:

void addVariablesInSecond(struct variable * var1, struct variable * var2) {
   13f26:	       lea -16(sp),sp
   13f2a:	       move.l a6,-(sp)
	if (var1->varType == SVT_INT && var2->varType == SVT_INT) {
   13f2c:	       movea.l 24(sp),a0
   13f30:	       move.l (a0),d0
   13f32:	       moveq #1,d1
   13f34:	       cmp.l d0,d1
   13f36:	   /-- bne.s 13f60 <addVariablesInSecond+0x3a>
   13f38:	   |   movea.l 28(sp),a0
   13f3c:	   |   move.l (a0),d0
   13f3e:	   |   moveq #1,d1
   13f40:	   |   cmp.l d0,d1
   13f42:	   +-- bne.s 13f60 <addVariablesInSecond+0x3a>
		var2->varData.intValue += var1->varData.intValue;
   13f44:	   |   movea.l 28(sp),a0
   13f48:	   |   move.l 4(a0),d1
   13f4c:	   |   movea.l 24(sp),a0
   13f50:	   |   move.l 4(a0),d0
   13f54:	   |   add.l d1,d0
   13f56:	   |   movea.l 28(sp),a0
   13f5a:	   |   move.l d0,4(a0)
   13f5e:	/--|-- bra.s 13fda <addVariablesInSecond+0xb4>
	} else {
		char * string1 = getTextFromAnyVar(var1);
   13f60:	|  \-> move.l 24(sp),-(sp)
   13f64:	|      jsr 14bc6 <getTextFromAnyVar>
   13f6a:	|      addq.l #4,sp
   13f6c:	|      move.l d0,16(sp)
		char * string2 = getTextFromAnyVar(var2);
   13f70:	|      move.l 28(sp),-(sp)
   13f74:	|      jsr 14bc6 <getTextFromAnyVar>
   13f7a:	|      addq.l #4,sp
   13f7c:	|      move.l d0,12(sp)

		unlinkVar(var2);
   13f80:	|      move.l 28(sp),-(sp)
   13f84:	|      jsr 1483e <unlinkVar>
   13f8a:	|      addq.l #4,sp
		var2->varData.theString = joinStrings(string1, string2);
   13f8c:	|      move.l 12(sp),-(sp)
   13f90:	|      move.l 20(sp),-(sp)
   13f94:	|      jsr 13b1c <joinStrings>
   13f9a:	|      addq.l #8,sp
   13f9c:	|      movea.l 28(sp),a0
   13fa0:	|      move.l d0,4(a0)
		var2->varType = SVT_STRING;
   13fa4:	|      movea.l 28(sp),a0
   13fa8:	|      moveq #3,d0
   13faa:	|      move.l d0,(a0)
		FreeVec(string1);
   13fac:	|      move.l 16(sp),8(sp)
   13fb2:	|      move.l 1a7a4 <SysBase>,d0
   13fb8:	|      movea.l d0,a6
   13fba:	|      movea.l 8(sp),a1
   13fbe:	|      jsr -690(a6)
		FreeVec(string2);
   13fc2:	|      move.l 12(sp),4(sp)
   13fc8:	|      move.l 1a7a4 <SysBase>,d0
   13fce:	|      movea.l d0,a6
   13fd0:	|      movea.l 4(sp),a1
   13fd4:	|      jsr -690(a6)
	}
}
   13fd8:	|      nop
   13fda:	\----> nop
   13fdc:	       movea.l (sp)+,a6
   13fde:	       lea 16(sp),sp
   13fe2:	       rts

00013fe4 <compareVariablesInSecond>:

void compareVariablesInSecond (const struct variable *var1, struct variable *var2) {	
	setVariable (var2, SVT_INT, compareVars (*var1, *var2));
   13fe4:	movea.l 8(sp),a0
   13fe8:	move.l 4(a0),-(sp)
   13fec:	move.l (a0),-(sp)
   13fee:	movea.l 12(sp),a0
   13ff2:	move.l 4(a0),-(sp)
   13ff6:	move.l (a0),-(sp)
   13ff8:	jsr 1401a <compareVars>
   13ffe:	lea 16(sp),sp
   14002:	move.l d0,-(sp)
   14004:	pea 1 <_start+0x1>
   14008:	move.l 16(sp),-(sp)
   1400c:	jsr 14ee2 <setVariable>
   14012:	lea 12(sp),sp
}
   14016:	nop
   14018:	rts

0001401a <compareVars>:


int compareVars (const struct variable var1, const struct variable var2) {
   1401a:	       subq.l #4,sp
	int re = 0;
   1401c:	       clr.l (sp)
	if (var1.varType == var2.varType) {
   1401e:	       move.l 8(sp),d1
   14022:	       move.l 16(sp),d0
   14026:	       cmp.l d1,d0
   14028:	/----- bne.w 140f0 <compareVars+0xd6>
		switch (var1.varType) {
   1402c:	|      move.l 8(sp),d0
   14030:	|      moveq #9,d1
   14032:	|      cmp.l d0,d1
   14034:	|  /-- bcs.w 140d8 <compareVars+0xbe>
   14038:	|  |   add.l d0,d0
   1403a:	|  |   movea.l d0,a0
   1403c:	|  |   adda.l #81992,a0
   14042:	|  |   move.w (a0),d0
   14044:	|  |   jmp (14048 <compareVars+0x2e>,pc,d0.w)
   14048:	|  |   ori.b #-112,(a4)
   1404c:	|  |   ori.l #5243024,(a0)
   14052:	|  |   ori.l #7733392,(a0)
   14058:	|  |   ori.b #28,(1,a6,d7.w)
			case SVT_NULL:
			re = 1;
   1405e:	|  |   move.l d0,(sp)
			break;
   14060:	+--|-- bra.w 140f0 <compareVars+0xd6>

			case SVT_COSTUME:
			re = (var1.varData.costumeHandler == var2.varData.costumeHandler);
   14064:	|  |   move.l 12(sp),d1
   14068:	|  |   move.l 20(sp),d0
   1406c:	|  |   cmp.l d1,d0
   1406e:	|  |   seq d0
   14070:	|  |   neg.b d0
   14072:	|  |   move.b d0,d0
   14074:	|  |   andi.l #255,d0
   1407a:	|  |   move.l d0,(sp)
			break;
   1407c:	+--|-- bra.s 140f0 <compareVars+0xd6>

			case SVT_ANIM:
			re = (var1.varData.animHandler == var2.varData.animHandler);
   1407e:	|  |   move.l 12(sp),d1
   14082:	|  |   move.l 20(sp),d0
   14086:	|  |   cmp.l d1,d0
   14088:	|  |   seq d0
   1408a:	|  |   neg.b d0
   1408c:	|  |   move.b d0,d0
   1408e:	|  |   andi.l #255,d0
   14094:	|  |   move.l d0,(sp)
			break;
   14096:	+--|-- bra.s 140f0 <compareVars+0xd6>

			case SVT_STRING:

			re = (strcmp (var1.varData.theString, var2.varData.theString) == 0);
   14098:	|  |   move.l 20(sp),d1
   1409c:	|  |   move.l 12(sp),d0
   140a0:	|  |   move.l d1,-(sp)
   140a2:	|  |   move.l d0,-(sp)
   140a4:	|  |   jsr 13a9c <strcmp>
   140aa:	|  |   addq.l #8,sp
   140ac:	|  |   tst.l d0
   140ae:	|  |   seq d0
   140b0:	|  |   neg.b d0
   140b2:	|  |   move.b d0,d0
   140b4:	|  |   andi.l #255,d0
   140ba:	|  |   move.l d0,(sp)
			break;
   140bc:	+--|-- bra.s 140f0 <compareVars+0xd6>

			case SVT_STACK:
			re = (var1.varData.theStack == var2.varData.theStack);
   140be:	|  |   move.l 12(sp),d1
   140c2:	|  |   move.l 20(sp),d0
   140c6:	|  |   cmp.l d1,d0
   140c8:	|  |   seq d0
   140ca:	|  |   neg.b d0
   140cc:	|  |   move.b d0,d0
   140ce:	|  |   andi.l #255,d0
   140d4:	|  |   move.l d0,(sp)
			break;
   140d6:	+--|-- bra.s 140f0 <compareVars+0xd6>

			default:
			re = (var1.varData.intValue == var2.varData.intValue);
   140d8:	|  \-> move.l 12(sp),d1
   140dc:	|      move.l 20(sp),d0
   140e0:	|      cmp.l d1,d0
   140e2:	|      seq d0
   140e4:	|      neg.b d0
   140e6:	|      move.b d0,d0
   140e8:	|      andi.l #255,d0
   140ee:	|      move.l d0,(sp)
		}
	}
	return re;
   140f0:	\----> move.l (sp),d0
}
   140f2:	       addq.l #4,sp
   140f4:	       rts

000140f6 <copyStack>:

BOOL copyStack (const struct variable * from, struct variable * to) {
   140f6:	             lea -16(sp),sp
   140fa:	             move.l a6,-(sp)
	to->varType = SVT_STACK;
   140fc:	             movea.l 28(sp),a0
   14100:	             moveq #6,d0
   14102:	             move.l d0,(a0)
	to->varData.theStack = (struct stackHandler *)AllocVec(sizeof(struct stackHandler), MEMF_ANY);
   14104:	             moveq #12,d0
   14106:	             move.l d0,12(sp)
   1410a:	             clr.l 8(sp)
   1410e:	             move.l 1a7a4 <SysBase>,d0
   14114:	             movea.l d0,a6
   14116:	             move.l 12(sp),d0
   1411a:	             move.l 8(sp),d1
   1411e:	             jsr -684(a6)
   14122:	             move.l d0,4(sp)
   14126:	             move.l 4(sp),d0
   1412a:	             movea.l 28(sp),a0
   1412e:	             move.l d0,4(a0)
	if (!to->varData.theStack) return FALSE;
   14132:	             movea.l 28(sp),a0
   14136:	             move.l 4(a0),d0
   1413a:	         /-- bne.s 14142 <copyStack+0x4c>
   1413c:	         |   clr.w d0
   1413e:	/--------|-- bra.w 141c4 <copyStack+0xce>
	to->varData.theStack->first = NULL;
   14142:	|        \-> movea.l 28(sp),a0
   14146:	|            movea.l 4(a0),a0
   1414a:	|            clr.l (a0)
	to->varData.theStack->last = NULL;
   1414c:	|            movea.l 28(sp),a0
   14150:	|            movea.l 4(a0),a0
   14154:	|            clr.l 4(a0)
	to->varData.theStack->timesUsed = 1;
   14158:	|            movea.l 28(sp),a0
   1415c:	|            movea.l 4(a0),a0
   14160:	|            moveq #1,d0
   14162:	|            move.l d0,8(a0)
	struct variableStack * a = from->varData.theStack->first;
   14166:	|            movea.l 24(sp),a0
   1416a:	|            movea.l 4(a0),a0
   1416e:	|            move.l (a0),16(sp)

	while (a) {
   14172:	|     /----- bra.s 141bc <copyStack+0xc6>
		addVarToStack(&a->thisVar, &(to->varData.theStack->first));
   14174:	|  /--|----> movea.l 28(sp),a0
   14178:	|  |  |      move.l 4(a0),d0
   1417c:	|  |  |      move.l d0,d1
   1417e:	|  |  |      move.l 16(sp),d0
   14182:	|  |  |      move.l d1,-(sp)
   14184:	|  |  |      move.l d0,-(sp)
   14186:	|  |  |      jsr 13e2c <addVarToStack>
   1418c:	|  |  |      addq.l #8,sp
		if (to->varData.theStack->last == NULL) {
   1418e:	|  |  |      movea.l 28(sp),a0
   14192:	|  |  |      movea.l 4(a0),a0
   14196:	|  |  |      move.l 4(a0),d0
   1419a:	|  |  |  /-- bne.s 141b2 <copyStack+0xbc>
			to->varData.theStack->last = to->varData.theStack->first;
   1419c:	|  |  |  |   movea.l 28(sp),a0
   141a0:	|  |  |  |   movea.l 4(a0),a1
   141a4:	|  |  |  |   movea.l 28(sp),a0
   141a8:	|  |  |  |   movea.l 4(a0),a0
   141ac:	|  |  |  |   move.l (a1),d0
   141ae:	|  |  |  |   move.l d0,4(a0)
		}
		a = a->next;
   141b2:	|  |  |  \-> movea.l 16(sp),a0
   141b6:	|  |  |      move.l 8(a0),16(sp)
	while (a) {
   141bc:	|  |  \----> tst.l 16(sp)
   141c0:	|  \-------- bne.s 14174 <copyStack+0x7e>
	}

	return TRUE;
   141c2:	|            moveq #1,d0
}
   141c4:	\----------> movea.l (sp)+,a6
   141c6:	             lea 16(sp),sp
   141ca:	             rts

000141cc <deleteVarFromStack>:

int deleteVarFromStack (const struct variable * va, struct variableStack ** thisStack, BOOL allOfEm) {
   141cc:	                lea -20(sp),sp
   141d0:	                move.l a6,-(sp)
   141d2:	                move.l 36(sp),d0
   141d6:	                move.w d0,d0
   141d8:	                move.w d0,6(sp)
    struct variableStack ** huntVar = thisStack;
   141dc:	                move.l 32(sp),20(sp)
    struct variableStack * killMe;
    int reply = 0;
   141e2:	                clr.l 16(sp)

    while (*huntVar) {
   141e6:	   /----------- bra.s 14264 <deleteVarFromStack+0x98>
        if (compareVars((*huntVar)->thisVar, *va)) {
   141e8:	/--|----------> movea.l 20(sp),a0
   141ec:	|  |            movea.l (a0),a0
   141ee:	|  |            movea.l 28(sp),a1
   141f2:	|  |            move.l 4(a1),-(sp)
   141f6:	|  |            move.l (a1),-(sp)
   141f8:	|  |            move.l 4(a0),-(sp)
   141fc:	|  |            move.l (a0),-(sp)
   141fe:	|  |            jsr 1401a <compareVars>
   14204:	|  |            lea 16(sp),sp
   14208:	|  |            tst.l d0
   1420a:	|  |  /-------- beq.s 14256 <deleteVarFromStack+0x8a>
            killMe = *huntVar;
   1420c:	|  |  |         movea.l 20(sp),a0
   14210:	|  |  |         move.l (a0),12(sp)
            *huntVar = killMe->next;
   14214:	|  |  |         movea.l 12(sp),a0
   14218:	|  |  |         move.l 8(a0),d0
   1421c:	|  |  |         movea.l 20(sp),a0
   14220:	|  |  |         move.l d0,(a0)
            unlinkVar(&killMe->thisVar);
   14222:	|  |  |         move.l 12(sp),d0
   14226:	|  |  |         move.l d0,-(sp)
   14228:	|  |  |         jsr 1483e <unlinkVar>
   1422e:	|  |  |         addq.l #4,sp
            FreeVec(killMe);
   14230:	|  |  |         move.l 12(sp),8(sp)
   14236:	|  |  |         move.l 1a7a4 <SysBase>,d0
   1423c:	|  |  |         movea.l d0,a6
   1423e:	|  |  |         movea.l 8(sp),a1
   14242:	|  |  |         jsr -690(a6)
            if (!allOfEm) return 1;
   14246:	|  |  |         tst.w 6(sp)
   1424a:	|  |  |     /-- bne.s 14250 <deleteVarFromStack+0x84>
   1424c:	|  |  |     |   moveq #1,d0
   1424e:	|  |  |  /--|-- bra.s 14272 <deleteVarFromStack+0xa6>
            reply++;
   14250:	|  |  |  |  \-> addq.l #1,16(sp)
   14254:	|  +--|--|----- bra.s 14264 <deleteVarFromStack+0x98>
        } else {
            huntVar = &((*huntVar)->next);
   14256:	|  |  \--|----> movea.l 20(sp),a0
   1425a:	|  |     |      move.l (a0),d0
   1425c:	|  |     |      move.l d0,d1
   1425e:	|  |     |      addq.l #8,d1
   14260:	|  |     |      move.l d1,20(sp)
    while (*huntVar) {
   14264:	|  \-----|----> movea.l 20(sp),a0
   14268:	|        |      move.l (a0),d0
   1426a:	\--------|----- bne.w 141e8 <deleteVarFromStack+0x1c>
        }
    }

    return reply;
   1426e:	         |      move.l 16(sp),d0
}
   14272:	         \----> movea.l (sp)+,a6
   14274:	                lea 20(sp),sp
   14278:	                rts

0001427a <fastArrayGetByIndex>:


struct variable * fastArrayGetByIndex (struct fastArrayHandler * vS, unsigned int theIndex) {
	if (theIndex >= (unsigned int) vS -> size) return NULL;
   1427a:	       movea.l 4(sp),a0
   1427e:	       move.l 4(a0),d0
   14282:	       cmp.l 8(sp),d0
   14286:	   /-- bhi.s 1428c <fastArrayGetByIndex+0x12>
   14288:	   |   moveq #0,d0
   1428a:	/--|-- bra.s 1429a <fastArrayGetByIndex+0x20>
	return & vS -> fastVariables[theIndex];
   1428c:	|  \-> movea.l 4(sp),a0
   14290:	|      move.l (a0),d1
   14292:	|      move.l 8(sp),d0
   14296:	|      lsl.l #3,d0
   14298:	|      add.l d1,d0
}
   1429a:	\----> rts

0001429c <getCostumeFromVar>:

struct persona * getCostumeFromVar(struct variable *thisVar) {
   1429c:	                lea -32(sp),sp
   142a0:	                move.l a6,-(sp)
   142a2:	                move.l a2,-(sp)
    struct persona *p = NULL;
   142a4:	                clr.l 36(sp)

    switch (thisVar->varType) {
   142a8:	                movea.l 44(sp),a0
   142ac:	                move.l (a0),d0
   142ae:	                moveq #8,d1
   142b0:	                cmp.l d0,d1
   142b2:	            /-- beq.s 142c0 <getCostumeFromVar+0x24>
   142b4:	            |   moveq #9,d1
   142b6:	            |   cmp.l d0,d1
   142b8:	   /--------|-- beq.w 1436e <getCostumeFromVar+0xd2>
   142bc:	/--|--------|-- bra.w 14378 <getCostumeFromVar+0xdc>
        case SVT_ANIM:
            p = AllocVec(sizeof(struct persona), MEMF_ANY);
   142c0:	|  |        \-> moveq #8,d0
   142c2:	|  |            move.l d0,28(sp)
   142c6:	|  |            clr.l 24(sp)
   142ca:	|  |            move.l 1a7a4 <SysBase>,d0
   142d0:	|  |            movea.l d0,a6
   142d2:	|  |            move.l 28(sp),d0
   142d6:	|  |            move.l 24(sp),d1
   142da:	|  |            jsr -684(a6)
   142de:	|  |            move.l d0,20(sp)
   142e2:	|  |            move.l 20(sp),d0
   142e6:	|  |            move.l d0,36(sp)
            if (!p) return NULL;
   142ea:	|  |        /-- bne.s 142f2 <getCostumeFromVar+0x56>
   142ec:	|  |        |   moveq #0,d0
   142ee:	|  |  /-----|-- bra.w 143a2 <getCostumeFromVar+0x106>
            p->numDirections = 1;
   142f2:	|  |  |     \-> movea.l 36(sp),a0
   142f6:	|  |  |         moveq #1,d1
   142f8:	|  |  |         move.l d1,4(a0)
            p->animation = AllocVec(3 * sizeof(struct personaAnimation *), MEMF_ANY);
   142fc:	|  |  |         moveq #12,d0
   142fe:	|  |  |         move.l d0,16(sp)
   14302:	|  |  |         clr.l 12(sp)
   14306:	|  |  |         move.l 1a7a4 <SysBase>,d0
   1430c:	|  |  |         movea.l d0,a6
   1430e:	|  |  |         move.l 16(sp),d0
   14312:	|  |  |         move.l 12(sp),d1
   14316:	|  |  |         jsr -684(a6)
   1431a:	|  |  |         move.l d0,8(sp)
   1431e:	|  |  |         move.l 8(sp),d0
   14322:	|  |  |         movea.l 36(sp),a0
   14326:	|  |  |         move.l d0,(a0)
            if (!p->animation) return NULL;
   14328:	|  |  |         movea.l 36(sp),a0
   1432c:	|  |  |         move.l (a0),d0
   1432e:	|  |  |     /-- bne.s 14334 <getCostumeFromVar+0x98>
   14330:	|  |  |     |   moveq #0,d0
   14332:	|  |  +-----|-- bra.s 143a2 <getCostumeFromVar+0x106>

            for (int iii = 0; iii < 3; iii++) {
   14334:	|  |  |     \-> clr.l 32(sp)
   14338:	|  |  |     /-- bra.s 14364 <getCostumeFromVar+0xc8>
                p->animation[iii] = copyAnim(thisVar->varData.animHandler);
   1433a:	|  |  |  /--|-> movea.l 44(sp),a0
   1433e:	|  |  |  |  |   move.l 4(a0),d0
   14342:	|  |  |  |  |   movea.l 36(sp),a0
   14346:	|  |  |  |  |   movea.l (a0),a0
   14348:	|  |  |  |  |   move.l 32(sp),d1
   1434c:	|  |  |  |  |   add.l d1,d1
   1434e:	|  |  |  |  |   add.l d1,d1
   14350:	|  |  |  |  |   lea (0,a0,d1.l),a2
   14354:	|  |  |  |  |   move.l d0,-(sp)
   14356:	|  |  |  |  |   jsr 9366 <copyAnim>
   1435c:	|  |  |  |  |   addq.l #4,sp
   1435e:	|  |  |  |  |   move.l d0,(a2)
            for (int iii = 0; iii < 3; iii++) {
   14360:	|  |  |  |  |   addq.l #1,32(sp)
   14364:	|  |  |  |  \-> moveq #2,d1
   14366:	|  |  |  |      cmp.l 32(sp),d1
   1436a:	|  |  |  \----- bge.s 1433a <getCostumeFromVar+0x9e>
            }
            break;
   1436c:	|  |  |     /-- bra.s 1439e <getCostumeFromVar+0x102>

        case SVT_COSTUME:
            return thisVar->varData.costumeHandler;
   1436e:	|  \--|-----|-> movea.l 44(sp),a0
   14372:	|     |     |   move.l 4(a0),d0
   14376:	|     +-----|-- bra.s 143a2 <getCostumeFromVar+0x106>
            break;

        default:
            KPrintF("Expecting an animation variable; found variable of type", typeName[thisVar->varType]);
   14378:	\-----|-----|-> movea.l 44(sp),a0
   1437c:	      |     |   move.l (a0),d0
   1437e:	      |     |   add.l d0,d0
   14380:	      |     |   movea.l d0,a1
   14382:	      |     |   adda.l d0,a1
   14384:	      |     |   lea 1a680 <typeName>,a0
   1438a:	      |     |   move.l (0,a1,a0.l),d0
   1438e:	      |     |   move.l d0,-(sp)
   14390:	      |     |   pea 19c53 <graphics.c.1c13408a+0xd>
   14396:	      |     |   jsr 1703c <KPrintF>
   1439c:	      |     |   addq.l #8,sp
    }

    return p;
   1439e:	      |     \-> move.l 36(sp),d0
}
   143a2:	      \-------> movea.l (sp)+,a2
   143a4:	                movea.l (sp)+,a6
   143a6:	                lea 32(sp),sp
   143aa:	                rts

000143ac <getSavedGamesStack>:

BOOL getSavedGamesStack(struct stackHandler * sH, char * ext) {
   143ac:	                lea -96(sp),sp
   143b0:	                movem.l d2-d3/a6,-(sp)
	char * pattern = joinStrings("*", ext);
   143b4:	                move.l 116(sp),-(sp)
   143b8:	                pea 19c8b <graphics.c.1c13408a+0x45>
   143be:	                jsr 13b1c <joinStrings>
   143c4:	                addq.l #8,sp
   143c6:	                move.l d0,102(sp)
	if (!pattern) return FALSE;
   143ca:	            /-- bne.s 143d2 <getSavedGamesStack+0x26>
   143cc:	            |   clr.w d0
   143ce:	/-----------|-- bra.w 145e6 <getSavedGamesStack+0x23a>

	struct variable newName;
	newName.varType = SVT_NULL;
   143d2:	|           \-> clr.l 14(sp)

	BPTR dirLock = Lock(".", ACCESS_READ);
   143d6:	|               move.l #105613,98(sp)
   143de:	|               moveq #-2,d0
   143e0:	|               move.l d0,94(sp)
   143e4:	|               move.l 1a7ac <DOSBase>,d0
   143ea:	|               movea.l d0,a6
   143ec:	|               move.l 98(sp),d1
   143f0:	|               move.l 94(sp),d2
   143f4:	|               jsr -84(a6)
   143f8:	|               move.l d0,90(sp)
   143fc:	|               move.l 90(sp),d0
   14400:	|               move.l d0,86(sp)
	if (!dirLock) return FALSE;
   14404:	|           /-- bne.s 1440c <getSavedGamesStack+0x60>
   14406:	|           |   clr.w d0
   14408:	+-----------|-- bra.w 145e6 <getSavedGamesStack+0x23a>

	struct FileInfoBlock *fib = (struct FileInfoBlock *)AllocVec(sizeof(struct FileInfoBlock), MEMF_CLEAR);
   1440c:	|           \-> move.l #260,82(sp)
   14414:	|               move.l #65536,78(sp)
   1441c:	|               move.l 1a7a4 <SysBase>,d0
   14422:	|               movea.l d0,a6
   14424:	|               move.l 82(sp),d0
   14428:	|               move.l 78(sp),d1
   1442c:	|               jsr -684(a6)
   14430:	|               move.l d0,74(sp)
   14434:	|               move.l 74(sp),d0
   14438:	|               move.l d0,70(sp)
	if (!fib) {
   1443c:	|           /-- bne.s 1445a <getSavedGamesStack+0xae>
		UnLock(dirLock);
   1443e:	|           |   move.l 86(sp),22(sp)
   14444:	|           |   move.l 1a7ac <DOSBase>,d0
   1444a:	|           |   movea.l d0,a6
   1444c:	|           |   move.l 22(sp),d1
   14450:	|           |   jsr -90(a6)
		return FALSE;
   14454:	|           |   clr.w d0
   14456:	+-----------|-- bra.w 145e6 <getSavedGamesStack+0x23a>
	}

	BOOL result = FALSE;
   1445a:	|           \-> clr.w 106(sp)
	if (Examine(dirLock, fib)) {
   1445e:	|               move.l 86(sp),66(sp)
   14464:	|               move.l 70(sp),62(sp)
   1446a:	|               move.l 1a7ac <DOSBase>,d0
   14470:	|               movea.l d0,a6
   14472:	|               move.l 66(sp),d1
   14476:	|               move.l 62(sp),d2
   1447a:	|               jsr -102(a6)
   1447e:	|               move.l d0,58(sp)
   14482:	|               move.l 58(sp),d0
   14486:	|  /----------- beq.w 1459a <getSavedGamesStack+0x1ee>
		while (ExNext(dirLock, fib)) {
   1448a:	|  |        /-- bra.w 14566 <getSavedGamesStack+0x1ba>
			if (!strcmp(fib->fib_FileName + strlen(fib->fib_FileName) - strlen(ext), ext)) {
   1448e:	|  |  /-----|-> move.l 70(sp),d2
   14492:	|  |  |     |   addq.l #8,d2
   14494:	|  |  |     |   move.l 70(sp),d0
   14498:	|  |  |     |   addq.l #8,d0
   1449a:	|  |  |     |   move.l d0,-(sp)
   1449c:	|  |  |     |   jsr 13adc <strlen>
   144a2:	|  |  |     |   addq.l #4,sp
   144a4:	|  |  |     |   move.l d0,d3
   144a6:	|  |  |     |   move.l 116(sp),-(sp)
   144aa:	|  |  |     |   jsr 13adc <strlen>
   144b0:	|  |  |     |   addq.l #4,sp
   144b2:	|  |  |     |   move.l d3,d1
   144b4:	|  |  |     |   sub.l d0,d1
   144b6:	|  |  |     |   move.l d2,d0
   144b8:	|  |  |     |   add.l d1,d0
   144ba:	|  |  |     |   move.l 116(sp),-(sp)
   144be:	|  |  |     |   move.l d0,-(sp)
   144c0:	|  |  |     |   jsr 13a9c <strcmp>
   144c6:	|  |  |     |   addq.l #8,sp
   144c8:	|  |  |     |   tst.l d0
   144ca:	|  |  |     +-- bne.w 14566 <getSavedGamesStack+0x1ba>
				fib->fib_FileName[strlen(fib->fib_FileName) - strlen(ext)] = 0;
   144ce:	|  |  |     |   move.l 70(sp),d0
   144d2:	|  |  |     |   addq.l #8,d0
   144d4:	|  |  |     |   move.l d0,-(sp)
   144d6:	|  |  |     |   jsr 13adc <strlen>
   144dc:	|  |  |     |   addq.l #4,sp
   144de:	|  |  |     |   move.l d0,d2
   144e0:	|  |  |     |   move.l 116(sp),-(sp)
   144e4:	|  |  |     |   jsr 13adc <strlen>
   144ea:	|  |  |     |   addq.l #4,sp
   144ec:	|  |  |     |   move.l d0,d1
   144ee:	|  |  |     |   move.l d2,d0
   144f0:	|  |  |     |   sub.l d1,d0
   144f2:	|  |  |     |   movea.l 70(sp),a0
   144f6:	|  |  |     |   clr.b (8,a0,d0.l)
				char * decoded = decodeFilename(fib->fib_FileName);
   144fa:	|  |  |     |   move.l 70(sp),d0
   144fe:	|  |  |     |   addq.l #8,d0
   14500:	|  |  |     |   move.l d0,-(sp)
   14502:	|  |  |     |   jsr 118 <decodeFilename>
   14508:	|  |  |     |   addq.l #4,sp
   1450a:	|  |  |     |   move.l d0,42(sp)
				makeTextVar(&newName, decoded);
   1450e:	|  |  |     |   move.l 42(sp),-(sp)
   14512:	|  |  |     |   lea 18(sp),a0
   14516:	|  |  |     |   move.l a0,-(sp)
   14518:	|  |  |     |   jsr 14812 <makeTextVar>
   1451e:	|  |  |     |   addq.l #8,sp
				FreeVec(decoded);
   14520:	|  |  |     |   move.l 42(sp),38(sp)
   14526:	|  |  |     |   move.l 1a7a4 <SysBase>,d0
   1452c:	|  |  |     |   movea.l d0,a6
   1452e:	|  |  |     |   movea.l 38(sp),a1
   14532:	|  |  |     |   jsr -690(a6)
				if (!addVarToStack(&newName, &sH->first)) goto cleanup;
   14536:	|  |  |     |   move.l 112(sp),d0
   1453a:	|  |  |     |   move.l d0,-(sp)
   1453c:	|  |  |     |   lea 18(sp),a0
   14540:	|  |  |     |   move.l a0,-(sp)
   14542:	|  |  |     |   jsr 13e2c <addVarToStack>
   14548:	|  |  |     |   addq.l #8,sp
   1454a:	|  |  |     |   tst.w d0
   1454c:	|  |  |  /--|-- beq.s 1459e <getSavedGamesStack+0x1f2>
				if (sH->last == NULL) sH->last = sH->first;
   1454e:	|  |  |  |  |   movea.l 112(sp),a0
   14552:	|  |  |  |  |   move.l 4(a0),d0
   14556:	|  |  |  |  +-- bne.s 14566 <getSavedGamesStack+0x1ba>
   14558:	|  |  |  |  |   movea.l 112(sp),a0
   1455c:	|  |  |  |  |   move.l (a0),d0
   1455e:	|  |  |  |  |   movea.l 112(sp),a0
   14562:	|  |  |  |  |   move.l d0,4(a0)
		while (ExNext(dirLock, fib)) {
   14566:	|  |  |  |  \-> move.l 86(sp),54(sp)
   1456c:	|  |  |  |      move.l 70(sp),50(sp)
   14572:	|  |  |  |      move.l 1a7ac <DOSBase>,d0
   14578:	|  |  |  |      movea.l d0,a6
   1457a:	|  |  |  |      move.l 54(sp),d1
   1457e:	|  |  |  |      move.l 50(sp),d2
   14582:	|  |  |  |      jsr -108(a6)
   14586:	|  |  |  |      move.l d0,46(sp)
   1458a:	|  |  |  |      move.l 46(sp),d0
   1458e:	|  |  \--|----- bne.w 1448e <getSavedGamesStack+0xe2>
			}
		}
		result = TRUE;
   14592:	|  |     |      move.w #1,106(sp)
   14598:	|  |     |  /-- bra.s 145a0 <getSavedGamesStack+0x1f4>
	}

cleanup:
   1459a:	|  \-----|--|-> nop
   1459c:	|        |  +-- bra.s 145a0 <getSavedGamesStack+0x1f4>
				if (!addVarToStack(&newName, &sH->first)) goto cleanup;
   1459e:	|        \--|-> nop
	FreeVec(fib);
   145a0:	|           \-> move.l 70(sp),34(sp)
   145a6:	|               move.l 1a7a4 <SysBase>,d0
   145ac:	|               movea.l d0,a6
   145ae:	|               movea.l 34(sp),a1
   145b2:	|               jsr -690(a6)
	UnLock(dirLock);
   145b6:	|               move.l 86(sp),30(sp)
   145bc:	|               move.l 1a7ac <DOSBase>,d0
   145c2:	|               movea.l d0,a6
   145c4:	|               move.l 30(sp),d1
   145c8:	|               jsr -90(a6)
	FreeVec(pattern);
   145cc:	|               move.l 102(sp),26(sp)
   145d2:	|               move.l 1a7a4 <SysBase>,d0
   145d8:	|               movea.l d0,a6
   145da:	|               movea.l 26(sp),a1
   145de:	|               jsr -690(a6)
	return result;
   145e2:	|               move.w 106(sp),d0
}
   145e6:	\-------------> movem.l (sp)+,d2-d3/a6
   145ea:	                lea 96(sp),sp
   145ee:	                rts

000145f0 <getValueType>:


BOOL getValueType (int *toHere, enum variableType vT, const struct variable *v) {
   145f0:	       subq.l #8,sp
	//if (! v) return false;
	if (v->varType != vT) {
   145f2:	       movea.l 20(sp),a0
   145f6:	       move.l (a0),d0
   145f8:	       cmp.l 16(sp),d0
   145fc:	/----- beq.s 14660 <getValueType+0x70>
		char * e1 = joinStrings ("Can only perform specified operation on a value which is of type ", typeName[vT]);
   145fe:	|      move.l 16(sp),d0
   14602:	|      add.l d0,d0
   14604:	|      movea.l d0,a1
   14606:	|      adda.l d0,a1
   14608:	|      lea 1a680 <typeName>,a0
   1460e:	|      move.l (0,a1,a0.l),d0
   14612:	|      move.l d0,-(sp)
   14614:	|      pea 19c8f <graphics.c.1c13408a+0x49>
   1461a:	|      jsr 13b1c <joinStrings>
   14620:	|      addq.l #8,sp
   14622:	|      move.l d0,4(sp)
		char * e2 = joinStrings ("... value supplied was of type ", typeName[v->varType]);
   14626:	|      movea.l 20(sp),a0
   1462a:	|      move.l (a0),d0
   1462c:	|      add.l d0,d0
   1462e:	|      movea.l d0,a1
   14630:	|      adda.l d0,a1
   14632:	|      lea 1a680 <typeName>,a0
   14638:	|      move.l (0,a1,a0.l),d0
   1463c:	|      move.l d0,-(sp)
   1463e:	|      pea 19cd1 <graphics.c.1c13408a+0x8b>
   14644:	|      jsr 13b1c <joinStrings>
   1464a:	|      addq.l #8,sp
   1464c:	|      move.l d0,(sp)
		KPrintF(e1, e2);
   1464e:	|      move.l (sp),-(sp)
   14650:	|      move.l 8(sp),-(sp)
   14654:	|      jsr 1703c <KPrintF>
   1465a:	|      addq.l #8,sp

		return FALSE;
   1465c:	|      clr.w d0
   1465e:	|  /-- bra.s 14670 <getValueType+0x80>
	}
	*toHere = v->varData.intValue;
   14660:	\--|-> movea.l 20(sp),a0
   14664:	   |   move.l 4(a0),d0
   14668:	   |   movea.l 12(sp),a0
   1466c:	   |   move.l d0,(a0)
	return TRUE;
   1466e:	   |   moveq #1,d0
}
   14670:	   \-> addq.l #8,sp
   14672:	       rts

00014674 <loadStringToVar>:

BOOL loadStringToVar (struct variable *thisVar, int value) {
	makeTextVar (thisVar, getNumberedString (value));
   14674:	move.l 8(sp),-(sp)
   14678:	jsr 6a38 <getNumberedString>
   1467e:	addq.l #4,sp
   14680:	move.l d0,-(sp)
   14682:	move.l 8(sp),-(sp)
   14686:	jsr 14812 <makeTextVar>
   1468c:	addq.l #8,sp
	return (BOOL) (thisVar->varData.theString != NULL);
   1468e:	movea.l 4(sp),a0
   14692:	move.l 4(a0),d0
   14696:	sne d0
   14698:	neg.b d0
   1469a:	move.b d0,d0
   1469c:	andi.w #255,d0
}
   146a0:	rts

000146a2 <makeFastArrayFromStack>:
		break;
	}
	return TRUE;
}

BOOL makeFastArrayFromStack (struct variable *to, const struct stackHandler *stacky) {
   146a2:	          subq.l #8,sp
    int size = stackSize(stacky);
   146a4:	          move.l 16(sp),-(sp)
   146a8:	          jsr 14f50 <stackSize>
   146ae:	          addq.l #4,sp
   146b0:	          move.l d0,4(sp)
    if (!makeFastArraySize(to, size)) return FALSE;
   146b4:	          move.l 4(sp),-(sp)
   146b8:	          move.l 16(sp),-(sp)
   146bc:	          jsr 1470c <makeFastArraySize>
   146c2:	          addq.l #8,sp
   146c4:	          tst.w d0
   146c6:	      /-- bne.s 146cc <makeFastArrayFromStack+0x2a>
   146c8:	      |   clr.w d0
   146ca:	/-----|-- bra.s 14708 <makeFastArrayFromStack+0x66>

    // Now let's fill up the new array

    struct variableStack *allV = stacky->first;
   146cc:	|     \-> movea.l 16(sp),a0
   146d0:	|         move.l (a0),(sp)
    size = 0;
   146d2:	|         clr.l 4(sp)
    while (allV) {
   146d6:	|     /-- bra.s 14702 <makeFastArrayFromStack+0x60>
        copyMain(&allV->thisVar, &to->varData.fastArray->fastVariables[size]);
   146d8:	|  /--|-> movea.l 12(sp),a0
   146dc:	|  |  |   movea.l 4(a0),a0
   146e0:	|  |  |   move.l (a0),d1
   146e2:	|  |  |   move.l 4(sp),d0
   146e6:	|  |  |   lsl.l #3,d0
   146e8:	|  |  |   add.l d0,d1
   146ea:	|  |  |   move.l (sp),d0
   146ec:	|  |  |   move.l d1,-(sp)
   146ee:	|  |  |   move.l d0,-(sp)
   146f0:	|  |  |   jsr 1498e <copyMain>
   146f6:	|  |  |   addq.l #8,sp
        size++;
   146f8:	|  |  |   addq.l #1,4(sp)
        allV = allV->next;
   146fc:	|  |  |   movea.l (sp),a0
   146fe:	|  |  |   move.l 8(a0),(sp)
    while (allV) {
   14702:	|  |  \-> tst.l (sp)
   14704:	|  \----- bne.s 146d8 <makeFastArrayFromStack+0x36>
    }
    return TRUE;
   14706:	|         moveq #1,d0
}
   14708:	\-------> addq.l #8,sp
   1470a:	          rts

0001470c <makeFastArraySize>:


BOOL makeFastArraySize (struct variable *to, int size) {
   1470c:	          lea -28(sp),sp
   14710:	          move.l a6,-(sp)
    if (size < 0) {
   14712:	          tst.l 40(sp)
   14716:	      /-- bge.s 1472c <makeFastArraySize+0x20>
		KPrintF("makeFastArraySize: Can't create a fast array with a negative number of elements!");
   14718:	      |   pea 19d16 <graphics.c.1c13408a+0xd0>
   1471e:	      |   jsr 1703c <KPrintF>
   14724:	      |   addq.l #4,sp
		return FALSE;
   14726:	      |   clr.w d0
   14728:	/-----|-- bra.w 1480a <makeFastArraySize+0xfe>
	}		
    unlinkVar(to);
   1472c:	|     \-> move.l 36(sp),-(sp)
   14730:	|         jsr 1483e <unlinkVar>
   14736:	|         addq.l #4,sp
    to->varType = SVT_FASTARRAY;
   14738:	|         movea.l 36(sp),a0
   1473c:	|         moveq #10,d0
   1473e:	|         move.l d0,(a0)
    to->varData.fastArray = AllocVec(sizeof(struct fastArrayHandler), MEMF_ANY);
   14740:	|         moveq #12,d0
   14742:	|         move.l d0,24(sp)
   14746:	|         clr.l 20(sp)
   1474a:	|         move.l 1a7a4 <SysBase>,d0
   14750:	|         movea.l d0,a6
   14752:	|         move.l 24(sp),d0
   14756:	|         move.l 20(sp),d1
   1475a:	|         jsr -684(a6)
   1475e:	|         move.l d0,16(sp)
   14762:	|         move.l 16(sp),d0
   14766:	|         movea.l 36(sp),a0
   1476a:	|         move.l d0,4(a0)
    if (!to->varData.fastArray) return FALSE;
   1476e:	|         movea.l 36(sp),a0
   14772:	|         move.l 4(a0),d0
   14776:	|     /-- bne.s 1477e <makeFastArraySize+0x72>
   14778:	|     |   clr.w d0
   1477a:	+-----|-- bra.w 1480a <makeFastArraySize+0xfe>
    to->varData.fastArray->fastVariables = AllocVec(size * sizeof(struct variable), MEMF_ANY);
   1477e:	|     \-> move.l 40(sp),d0
   14782:	|         lsl.l #3,d0
   14784:	|         move.l d0,12(sp)
   14788:	|         clr.l 8(sp)
   1478c:	|         move.l 1a7a4 <SysBase>,d0
   14792:	|         movea.l d0,a6
   14794:	|         move.l 12(sp),d0
   14798:	|         move.l 8(sp),d1
   1479c:	|         jsr -684(a6)
   147a0:	|         move.l d0,4(sp)
   147a4:	|         move.l 4(sp),d0
   147a8:	|         movea.l 36(sp),a0
   147ac:	|         movea.l 4(a0),a0
   147b0:	|         move.l d0,(a0)
    if (!to->varData.fastArray->fastVariables) return FALSE;
   147b2:	|         movea.l 36(sp),a0
   147b6:	|         movea.l 4(a0),a0
   147ba:	|         move.l (a0),d0
   147bc:	|     /-- bne.s 147c2 <makeFastArraySize+0xb6>
   147be:	|     |   clr.w d0
   147c0:	+-----|-- bra.s 1480a <makeFastArraySize+0xfe>
    for (int i = 0; i < size; i++) {
   147c2:	|     \-> clr.l 28(sp)
   147c6:	|     /-- bra.s 147e2 <makeFastArraySize+0xd6>
        to->varData.fastArray->fastVariables[i].varType = SVT_NULL;
   147c8:	|  /--|-> movea.l 36(sp),a0
   147cc:	|  |  |   movea.l 4(a0),a0
   147d0:	|  |  |   move.l (a0),d1
   147d2:	|  |  |   move.l 28(sp),d0
   147d6:	|  |  |   lsl.l #3,d0
   147d8:	|  |  |   movea.l d1,a0
   147da:	|  |  |   adda.l d0,a0
   147dc:	|  |  |   clr.l (a0)
    for (int i = 0; i < size; i++) {
   147de:	|  |  |   addq.l #1,28(sp)
   147e2:	|  |  \-> move.l 28(sp),d0
   147e6:	|  |      cmp.l 40(sp),d0
   147ea:	|  \----- blt.s 147c8 <makeFastArraySize+0xbc>
    }
    to->varData.fastArray->size = size;
   147ec:	|         movea.l 36(sp),a0
   147f0:	|         movea.l 4(a0),a0
   147f4:	|         move.l 40(sp),4(a0)
    to->varData.fastArray->timesUsed = 1;
   147fa:	|         movea.l 36(sp),a0
   147fe:	|         movea.l 4(a0),a0
   14802:	|         moveq #1,d0
   14804:	|         move.l d0,8(a0)
    return TRUE;
   14808:	|         moveq #1,d0
}
   1480a:	\-------> movea.l (sp)+,a6
   1480c:	          lea 28(sp),sp
   14810:	          rts

00014812 <makeTextVar>:

void makeTextVar (struct variable *thisVar, const char * txt) {
	unlinkVar (thisVar);
   14812:	move.l 4(sp),-(sp)
   14816:	jsr 1483e <unlinkVar>
   1481c:	addq.l #4,sp
	thisVar->varType = SVT_STRING;
   1481e:	movea.l 4(sp),a0
   14822:	moveq #3,d0
   14824:	move.l d0,(a0)
	thisVar->varData.theString = copyString (txt);
   14826:	move.l 8(sp),-(sp)
   1482a:	jsr b8 <copyString>
   14830:	addq.l #4,sp
   14832:	movea.l 4(sp),a0
   14836:	move.l d0,4(a0)
}
   1483a:	nop
   1483c:	rts

0001483e <unlinkVar>:

void unlinkVar (struct variable *thisVar) {
   1483e:	                      lea -16(sp),sp
   14842:	                      move.l a6,-(sp)

	switch (thisVar->varType) {
   14844:	                      movea.l 24(sp),a0
   14848:	                      move.l (a0),d0
   1484a:	                      moveq #10,d1
   1484c:	                      cmp.l d0,d1
   1484e:	            /-------- beq.w 14906 <unlinkVar+0xc8>
   14852:	            |         moveq #10,d1
   14854:	            |         cmp.l d0,d1
   14856:	/-----------|-------- bcs.w 1497a <unlinkVar+0x13c>
   1485a:	|           |         moveq #8,d1
   1485c:	|           |         cmp.l d0,d1
   1485e:	|  /--------|-------- beq.w 14966 <unlinkVar+0x128>
   14862:	|  |        |         moveq #8,d1
   14864:	|  |        |         cmp.l d0,d1
   14866:	+--|--------|-------- bcs.w 1497a <unlinkVar+0x13c>
   1486a:	|  |        |         moveq #3,d1
   1486c:	|  |        |         cmp.l d0,d1
   1486e:	|  |        |     /-- beq.s 1487a <unlinkVar+0x3c>
   14870:	|  |        |     |   moveq #6,d1
   14872:	|  |        |     |   cmp.l d0,d1
   14874:	|  |        |  /--|-- beq.s 148a0 <unlinkVar+0x62>
		case SVT_ANIM:
		deleteAnim (thisVar->varData.animHandler);
		break;

		default:
		break;
   14876:	+--|--------|--|--|-- bra.w 1497a <unlinkVar+0x13c>
        FreeVec(thisVar->varData.theString);
   1487a:	|  |        |  |  \-> movea.l 24(sp),a0
   1487e:	|  |        |  |      move.l 4(a0),4(sp)
   14884:	|  |        |  |      move.l 1a7a4 <SysBase>,d0
   1488a:	|  |        |  |      movea.l d0,a6
   1488c:	|  |        |  |      movea.l 4(sp),a1
   14890:	|  |        |  |      jsr -690(a6)
		thisVar->varData.theString = NULL;
   14894:	|  |        |  |      movea.l 24(sp),a0
   14898:	|  |        |  |      clr.l 4(a0)
		break;
   1489c:	|  |  /-----|--|----- bra.w 14984 <unlinkVar+0x146>
		thisVar->varData.theStack -> timesUsed --;
   148a0:	|  |  |     |  \----> movea.l 24(sp),a0
   148a4:	|  |  |     |         movea.l 4(a0),a0
   148a8:	|  |  |     |         move.l 8(a0),d0
   148ac:	|  |  |     |         subq.l #1,d0
   148ae:	|  |  |     |         move.l d0,8(a0)
		if (thisVar->varData.theStack -> timesUsed <= 0) {
   148b2:	|  |  |     |         movea.l 24(sp),a0
   148b6:	|  |  |     |         movea.l 4(a0),a0
   148ba:	|  |  |     |         move.l 8(a0),d0
   148be:	|  |  |  /--|-------- bgt.w 1497e <unlinkVar+0x140>
			while (thisVar->varData.theStack -> first) trimStack (&thisVar->varData.theStack -> first);
   148c2:	|  |  |  |  |     /-- bra.s 148d6 <unlinkVar+0x98>
   148c4:	|  |  |  |  |  /--|-> movea.l 24(sp),a0
   148c8:	|  |  |  |  |  |  |   move.l 4(a0),d0
   148cc:	|  |  |  |  |  |  |   move.l d0,-(sp)
   148ce:	|  |  |  |  |  |  |   jsr 14f74 <trimStack>
   148d4:	|  |  |  |  |  |  |   addq.l #4,sp
   148d6:	|  |  |  |  |  |  \-> movea.l 24(sp),a0
   148da:	|  |  |  |  |  |      movea.l 4(a0),a0
   148de:	|  |  |  |  |  |      move.l (a0),d0
   148e0:	|  |  |  |  |  \----- bne.s 148c4 <unlinkVar+0x86>
			FreeVec(thisVar->varData.theStack);
   148e2:	|  |  |  |  |         movea.l 24(sp),a0
   148e6:	|  |  |  |  |         move.l 4(a0),8(sp)
   148ec:	|  |  |  |  |         move.l 1a7a4 <SysBase>,d0
   148f2:	|  |  |  |  |         movea.l d0,a6
   148f4:	|  |  |  |  |         movea.l 8(sp),a1
   148f8:	|  |  |  |  |         jsr -690(a6)
			thisVar->varData.theStack = NULL;
   148fc:	|  |  |  |  |         movea.l 24(sp),a0
   14900:	|  |  |  |  |         clr.l 4(a0)
		break;
   14904:	|  |  |  +--|-------- bra.s 1497e <unlinkVar+0x140>
		thisVar->varData.fastArray -> timesUsed --;
   14906:	|  |  |  |  \-------> movea.l 24(sp),a0
   1490a:	|  |  |  |            movea.l 4(a0),a0
   1490e:	|  |  |  |            move.l 8(a0),d0
   14912:	|  |  |  |            subq.l #1,d0
   14914:	|  |  |  |            move.l d0,8(a0)
		if (thisVar->varData.theStack -> timesUsed <= 0) {
   14918:	|  |  |  |            movea.l 24(sp),a0
   1491c:	|  |  |  |            movea.l 4(a0),a0
   14920:	|  |  |  |            move.l 8(a0),d0
   14924:	|  |  |  |        /-- bgt.s 14982 <unlinkVar+0x144>
            FreeVec( thisVar->varData.fastArray -> fastVariables);
   14926:	|  |  |  |        |   movea.l 24(sp),a0
   1492a:	|  |  |  |        |   movea.l 4(a0),a0
   1492e:	|  |  |  |        |   move.l (a0),16(sp)
   14932:	|  |  |  |        |   move.l 1a7a4 <SysBase>,d0
   14938:	|  |  |  |        |   movea.l d0,a6
   1493a:	|  |  |  |        |   movea.l 16(sp),a1
   1493e:	|  |  |  |        |   jsr -690(a6)
			FreeVec(thisVar->varData.fastArray);
   14942:	|  |  |  |        |   movea.l 24(sp),a0
   14946:	|  |  |  |        |   move.l 4(a0),12(sp)
   1494c:	|  |  |  |        |   move.l 1a7a4 <SysBase>,d0
   14952:	|  |  |  |        |   movea.l d0,a6
   14954:	|  |  |  |        |   movea.l 12(sp),a1
   14958:	|  |  |  |        |   jsr -690(a6)
			thisVar->varData.fastArray = NULL;
   1495c:	|  |  |  |        |   movea.l 24(sp),a0
   14960:	|  |  |  |        |   clr.l 4(a0)
		break;
   14964:	|  |  |  |        +-- bra.s 14982 <unlinkVar+0x144>
		deleteAnim (thisVar->varData.animHandler);
   14966:	|  \--|--|--------|-> movea.l 24(sp),a0
   1496a:	|     |  |        |   move.l 4(a0),d0
   1496e:	|     |  |        |   move.l d0,-(sp)
   14970:	|     |  |        |   jsr 9732 <deleteAnim>
   14976:	|     |  |        |   addq.l #4,sp
		break;
   14978:	|     +--|--------|-- bra.s 14984 <unlinkVar+0x146>
		break;
   1497a:	\-----|--|--------|-> nop
   1497c:	      +--|--------|-- bra.s 14984 <unlinkVar+0x146>
		break;
   1497e:	      |  \--------|-> nop
   14980:	      +-----------|-- bra.s 14984 <unlinkVar+0x146>
		break;
   14982:	      |           \-> nop
	}
}
   14984:	      \-------------> nop
   14986:	                      movea.l (sp)+,a6
   14988:	                      lea 16(sp),sp
   1498c:	                      rts

0001498e <copyMain>:

BOOL copyMain (const struct variable *from, struct variable *to) {
	to->varType = from->varType;
   1498e:	       movea.l 4(sp),a0
   14992:	       move.l (a0),d0
   14994:	       movea.l 8(sp),a0
   14998:	       move.l d0,(a0)
	switch (to->varType) {
   1499a:	       movea.l 8(sp),a0
   1499e:	       move.l (a0),d0
   149a0:	       moveq #10,d1
   149a2:	       cmp.l d0,d1
   149a4:	/----- bcs.w 14a96 <copyMain+0x108>
   149a8:	|      add.l d0,d0
   149aa:	|      movea.l d0,a0
   149ac:	|      adda.l #84408,a0
   149b2:	|      move.w (a0),d0
   149b4:	|      jmp (149b8 <copyMain+0x2a>,pc,d0.w)
   149b8:	|      .short 0x00da
   149ba:	|      ori.b #22,(a6)
   149be:	|      ori.w #22,(a4)
   149c2:	|      ori.b #-126,(a6)
   149c6:	|      ori.b #-68,(a6)
   149ca:	|      ori.l #2891887,4(a0)
		case SVT_INT:
		case SVT_FUNC:
		case SVT_BUILT:
		case SVT_FILE:
		case SVT_OBJTYPE:
		to->varData.intValue = from->varData.intValue;
   149d2:	|      move.l 4(a0),d0
   149d6:	|      movea.l 8(sp),a0
   149da:	|      move.l d0,4(a0)
		return TRUE;
   149de:	|      moveq #1,d0
   149e0:	|  /-- bra.w 14aa8 <copyMain+0x11a>

		case SVT_FASTARRAY:
		to->varData.fastArray = from->varData.fastArray;
   149e4:	|  |   movea.l 4(sp),a0
   149e8:	|  |   move.l 4(a0),d0
   149ec:	|  |   movea.l 8(sp),a0
   149f0:	|  |   move.l d0,4(a0)
		to->varData.fastArray -> timesUsed ++;
   149f4:	|  |   movea.l 8(sp),a0
   149f8:	|  |   movea.l 4(a0),a0
   149fc:	|  |   move.l 8(a0),d0
   14a00:	|  |   addq.l #1,d0
   14a02:	|  |   move.l d0,8(a0)
		return TRUE;
   14a06:	|  |   moveq #1,d0
   14a08:	|  +-- bra.w 14aa8 <copyMain+0x11a>

		case SVT_STRING:
		to->varData.theString = copyString (from->varData.theString);
   14a0c:	|  |   movea.l 4(sp),a0
   14a10:	|  |   move.l 4(a0),d0
   14a14:	|  |   move.l d0,-(sp)
   14a16:	|  |   jsr b8 <copyString>
   14a1c:	|  |   addq.l #4,sp
   14a1e:	|  |   movea.l 8(sp),a0
   14a22:	|  |   move.l d0,4(a0)
		return to->varData.theString ? TRUE : FALSE;
   14a26:	|  |   movea.l 8(sp),a0
   14a2a:	|  |   move.l 4(a0),d0
   14a2e:	|  |   sne d0
   14a30:	|  |   neg.b d0
   14a32:	|  |   move.b d0,d0
   14a34:	|  |   andi.w #255,d0
   14a38:	|  +-- bra.s 14aa8 <copyMain+0x11a>

		case SVT_STACK:
		to->varData.theStack = from->varData.theStack;
   14a3a:	|  |   movea.l 4(sp),a0
   14a3e:	|  |   move.l 4(a0),d0
   14a42:	|  |   movea.l 8(sp),a0
   14a46:	|  |   move.l d0,4(a0)
		to->varData.theStack -> timesUsed ++;
   14a4a:	|  |   movea.l 8(sp),a0
   14a4e:	|  |   movea.l 4(a0),a0
   14a52:	|  |   move.l 8(a0),d0
   14a56:	|  |   addq.l #1,d0
   14a58:	|  |   move.l d0,8(a0)
		return TRUE;
   14a5c:	|  |   moveq #1,d0
   14a5e:	|  +-- bra.s 14aa8 <copyMain+0x11a>

		case SVT_COSTUME:
		to->varData.costumeHandler = from->varData.costumeHandler;
   14a60:	|  |   movea.l 4(sp),a0
   14a64:	|  |   move.l 4(a0),d0
   14a68:	|  |   movea.l 8(sp),a0
   14a6c:	|  |   move.l d0,4(a0)
		return TRUE;
   14a70:	|  |   moveq #1,d0
   14a72:	|  +-- bra.s 14aa8 <copyMain+0x11a>

		case SVT_ANIM:
		to->varData.animHandler = copyAnim (from->varData.animHandler);
   14a74:	|  |   movea.l 4(sp),a0
   14a78:	|  |   move.l 4(a0),d0
   14a7c:	|  |   move.l d0,-(sp)
   14a7e:	|  |   jsr 9366 <copyAnim>
   14a84:	|  |   addq.l #4,sp
   14a86:	|  |   movea.l 8(sp),a0
   14a8a:	|  |   move.l d0,4(a0)
		return TRUE;
   14a8e:	|  |   moveq #1,d0
   14a90:	|  +-- bra.s 14aa8 <copyMain+0x11a>

		case SVT_NULL:
		return TRUE;
   14a92:	|  |   moveq #1,d0
   14a94:	|  +-- bra.s 14aa8 <copyMain+0x11a>

		default:
		break;
   14a96:	\--|-> nop
	}
	KPrintF("Unknown value type");
   14a98:	   |   pea 19d67 <graphics.c.1c13408a+0x121>
   14a9e:	   |   jsr 1703c <KPrintF>
   14aa4:	   |   addq.l #4,sp
	return FALSE;
   14aa6:	   |   clr.w d0
}
   14aa8:	   \-> rts

00014aaa <copyVariable>:

BOOL copyVariable (const struct variable *from, struct variable *to) {
	unlinkVar (to);
   14aaa:	move.l 8(sp),-(sp)
   14aae:	jsr 1483e <unlinkVar>
   14ab4:	addq.l #4,sp
	return copyMain(from, to);
   14ab6:	move.l 8(sp),-(sp)
   14aba:	move.l 8(sp),-(sp)
   14abe:	jsr 1498e <copyMain>
   14ac4:	addq.l #8,sp
}
   14ac6:	rts

00014ac8 <getAnimationFromVar>:

struct personaAnimation * getAnimationFromVar (struct variable *thisVar) {
	if (thisVar->varType == SVT_ANIM)
   14ac8:	       movea.l 4(sp),a0
   14acc:	       move.l (a0),d0
   14ace:	       moveq #8,d1
   14ad0:	       cmp.l d0,d1
   14ad2:	   /-- bne.s 14ae8 <getAnimationFromVar+0x20>
		return copyAnim (thisVar->varData.animHandler);
   14ad4:	   |   movea.l 4(sp),a0
   14ad8:	   |   move.l 4(a0),d0
   14adc:	   |   move.l d0,-(sp)
   14ade:	   |   jsr 9366 <copyAnim>
   14ae4:	   |   addq.l #4,sp
   14ae6:	/--|-- bra.s 14b2e <getAnimationFromVar+0x66>

	if (thisVar->varType == SVT_INT && thisVar->varData.intValue == 0)
   14ae8:	|  \-> movea.l 4(sp),a0
   14aec:	|      move.l (a0),d0
   14aee:	|      moveq #1,d1
   14af0:	|      cmp.l d0,d1
   14af2:	|  /-- bne.s 14b06 <getAnimationFromVar+0x3e>
   14af4:	|  |   movea.l 4(sp),a0
   14af8:	|  |   move.l 4(a0),d0
   14afc:	|  +-- bne.s 14b06 <getAnimationFromVar+0x3e>
		return makeNullAnim();
   14afe:	|  |   jsr ab36 <makeNullAnim>
   14b04:	+--|-- bra.s 14b2e <getAnimationFromVar+0x66>

	KPrintF("Expecting an animation variable; found variable of type", typeName[thisVar->varType]);
   14b06:	|  \-> movea.l 4(sp),a0
   14b0a:	|      move.l (a0),d0
   14b0c:	|      add.l d0,d0
   14b0e:	|      movea.l d0,a1
   14b10:	|      adda.l d0,a1
   14b12:	|      lea 1a680 <typeName>,a0
   14b18:	|      move.l (0,a1,a0.l),d0
   14b1c:	|      move.l d0,-(sp)
   14b1e:	|      pea 19c53 <graphics.c.1c13408a+0xd>
   14b24:	|      jsr 1703c <KPrintF>
   14b2a:	|      addq.l #8,sp
	return NULL;
   14b2c:	|      moveq #0,d0
}
   14b2e:	\----> rts

00014b30 <getBoolean>:

BOOL getBoolean (const struct variable *from) {
	switch (from->varType) {
   14b30:	       movea.l 4(sp),a0
   14b34:	       move.l (a0),d0
   14b36:	       moveq #10,d1
   14b38:	       cmp.l d0,d1
   14b3a:	/----- bcs.w 14bc0 <getBoolean+0x90>
   14b3e:	|      add.l d0,d0
   14b40:	|      movea.l d0,a0
   14b42:	|      adda.l #84814,a0
   14b48:	|      move.w (a0),d0
   14b4a:	|      jmp (14b4e <getBoolean+0x1e>,pc,d0.w)
   14b4e:	|      ori.b #26,(a6)
   14b52:	|      ori.w #68,(114,a2,d0.w)
   14b58:	|      ori.w #46,(114,a2,d0.w)
   14b5e:	|      ori.w #114,(90,a2,d0.w)
		case SVT_NULL:
		return FALSE;
   14b64:	|      clr.w d0
   14b66:	|  /-- bra.s 14bc4 <getBoolean+0x94>

		case SVT_INT:
		return (BOOL) (from->varData.intValue != 0);
   14b68:	|  |   movea.l 4(sp),a0
   14b6c:	|  |   move.l 4(a0),d0
   14b70:	|  |   sne d0
   14b72:	|  |   neg.b d0
   14b74:	|  |   move.b d0,d0
   14b76:	|  |   andi.w #255,d0
   14b7a:	|  +-- bra.s 14bc4 <getBoolean+0x94>

		case SVT_STACK:
		return (BOOL) (from->varData.theStack -> first != NULL);
   14b7c:	|  |   movea.l 4(sp),a0
   14b80:	|  |   movea.l 4(a0),a0
   14b84:	|  |   move.l (a0),d0
   14b86:	|  |   sne d0
   14b88:	|  |   neg.b d0
   14b8a:	|  |   move.b d0,d0
   14b8c:	|  |   andi.w #255,d0
   14b90:	|  +-- bra.s 14bc4 <getBoolean+0x94>

		case SVT_STRING:
		return (BOOL) (from->varData.theString[0] != 0);
   14b92:	|  |   movea.l 4(sp),a0
   14b96:	|  |   movea.l 4(a0),a0
   14b9a:	|  |   move.b (a0),d0
   14b9c:	|  |   sne d0
   14b9e:	|  |   neg.b d0
   14ba0:	|  |   move.b d0,d0
   14ba2:	|  |   andi.w #255,d0
   14ba6:	|  +-- bra.s 14bc4 <getBoolean+0x94>

		case SVT_FASTARRAY:
		return (BOOL) (from->varData.fastArray -> size != 0);
   14ba8:	|  |   movea.l 4(sp),a0
   14bac:	|  |   movea.l 4(a0),a0
   14bb0:	|  |   move.l 4(a0),d0
   14bb4:	|  |   sne d0
   14bb6:	|  |   neg.b d0
   14bb8:	|  |   move.b d0,d0
   14bba:	|  |   andi.w #255,d0
   14bbe:	|  +-- bra.s 14bc4 <getBoolean+0x94>

		default:
		break;
   14bc0:	\--|-> nop
	}
	return TRUE;
   14bc2:	   |   moveq #1,d0
}
   14bc4:	   \-> rts

00014bc6 <getTextFromAnyVar>:

char * getTextFromAnyVar (const struct variable *from) {
   14bc6:	      /----------> lea -76(sp),sp
   14bca:	      |            move.l a6,-(sp)
	switch (from->varType) {
   14bcc:	      |            movea.l 84(sp),a0
   14bd0:	      |            move.l (a0),d0
   14bd2:	      |            moveq #10,d1
   14bd4:	      |            cmp.l d0,d1
   14bd6:	/-----|----------- bcs.w 14e74 <getTextFromAnyVar+0x2ae>
   14bda:	|     |            add.l d0,d0
   14bdc:	|     |            movea.l d0,a0
   14bde:	|     |            adda.l #84970,a0
   14be4:	|     |            move.w (a0),d0
   14be6:	|     |            jmp (14bea <getTextFromAnyVar+0x24>,pc,d0.w)
   14bea:	|     |            .short 0x028a
   14bec:	|     |            bset d0,(a0)+
   14bee:	|     |            .short 0x028a
   14bf0:	|     |            ori.b #-118,(a6)
   14bf4:	|     |            andi.b #8,ccr
   14bf8:	|     |            andi.w #650,-(a0)
   14bfc:	|     |            .short 0x028a
   14bfe:	|     |            ori.b #111,84(a4)
		case SVT_STRING:
		return copyString (from->varData.theString);
   14c04:	|     |            move.l 4(a0),d0
   14c08:	|     |            move.l d0,-(sp)
   14c0a:	|     |            jsr b8 <copyString>
   14c10:	|     |            addq.l #4,sp
   14c12:	|  /--|----------- bra.w 14e96 <getTextFromAnyVar+0x2d0>

		case SVT_FASTARRAY:
		{
			char * builder = copyString ("FAST:");
   14c16:	|  |  |            pea 19d7a <graphics.c.1c13408a+0x134>
   14c1c:	|  |  |            jsr b8 <copyString>
   14c22:	|  |  |            addq.l #4,sp
   14c24:	|  |  |            move.l d0,76(sp)
			char * builder2;
			char * grabText;

			for (int i = 0; i < from->varData.fastArray -> size; i ++) {
   14c28:	|  |  |            clr.l 72(sp)
   14c2c:	|  |  |     /----- bra.w 14cd6 <getTextFromAnyVar+0x110>
				builder2 = joinStrings (builder, " ");
   14c30:	|  |  |  /--|----> pea 19d80 <graphics.c.1c13408a+0x13a>
   14c36:	|  |  |  |  |      move.l 80(sp),-(sp)
   14c3a:	|  |  |  |  |      jsr 13b1c <joinStrings>
   14c40:	|  |  |  |  |      addq.l #8,sp
   14c42:	|  |  |  |  |      move.l d0,60(sp)
				if (! builder2) return NULL;
   14c46:	|  |  |  |  |  /-- bne.s 14c4e <getTextFromAnyVar+0x88>
   14c48:	|  |  |  |  |  |   moveq #0,d0
   14c4a:	|  +--|--|--|--|-- bra.w 14e96 <getTextFromAnyVar+0x2d0>
				FreeVec(builder);
   14c4e:	|  |  |  |  |  \-> move.l 76(sp),56(sp)
   14c54:	|  |  |  |  |      move.l 1a7a4 <SysBase>,d0
   14c5a:	|  |  |  |  |      movea.l d0,a6
   14c5c:	|  |  |  |  |      movea.l 56(sp),a1
   14c60:	|  |  |  |  |      jsr -690(a6)
				grabText = getTextFromAnyVar (&from->varData.fastArray -> fastVariables[i]);
   14c64:	|  |  |  |  |      movea.l 84(sp),a0
   14c68:	|  |  |  |  |      movea.l 4(a0),a0
   14c6c:	|  |  |  |  |      move.l (a0),d1
   14c6e:	|  |  |  |  |      move.l 72(sp),d0
   14c72:	|  |  |  |  |      lsl.l #3,d0
   14c74:	|  |  |  |  |      add.l d1,d0
   14c76:	|  |  |  |  |      move.l d0,-(sp)
   14c78:	|  |  +--|--|----- jsr 14bc6 <getTextFromAnyVar>(pc)
   14c7c:	|  |  |  |  |      addq.l #4,sp
   14c7e:	|  |  |  |  |      move.l d0,52(sp)
				builder = joinStrings (builder2, grabText);
   14c82:	|  |  |  |  |      move.l 52(sp),-(sp)
   14c86:	|  |  |  |  |      move.l 64(sp),-(sp)
   14c8a:	|  |  |  |  |      jsr 13b1c <joinStrings>
   14c90:	|  |  |  |  |      addq.l #8,sp
   14c92:	|  |  |  |  |      move.l d0,76(sp)
				if (! builder) return NULL;
   14c96:	|  |  |  |  |  /-- bne.s 14c9e <getTextFromAnyVar+0xd8>
   14c98:	|  |  |  |  |  |   moveq #0,d0
   14c9a:	|  +--|--|--|--|-- bra.w 14e96 <getTextFromAnyVar+0x2d0>
				FreeVec(grabText);
   14c9e:	|  |  |  |  |  \-> move.l 52(sp),48(sp)
   14ca4:	|  |  |  |  |      move.l 1a7a4 <SysBase>,d0
   14caa:	|  |  |  |  |      movea.l d0,a6
   14cac:	|  |  |  |  |      movea.l 48(sp),a1
   14cb0:	|  |  |  |  |      jsr -690(a6)
				grabText = NULL;
   14cb4:	|  |  |  |  |      clr.l 52(sp)
				FreeVec(builder2);
   14cb8:	|  |  |  |  |      move.l 60(sp),44(sp)
   14cbe:	|  |  |  |  |      move.l 1a7a4 <SysBase>,d0
   14cc4:	|  |  |  |  |      movea.l d0,a6
   14cc6:	|  |  |  |  |      movea.l 44(sp),a1
   14cca:	|  |  |  |  |      jsr -690(a6)
				builder2 = NULL;
   14cce:	|  |  |  |  |      clr.l 60(sp)
			for (int i = 0; i < from->varData.fastArray -> size; i ++) {
   14cd2:	|  |  |  |  |      addq.l #1,72(sp)
   14cd6:	|  |  |  |  \----> movea.l 84(sp),a0
   14cda:	|  |  |  |         movea.l 4(a0),a0
   14cde:	|  |  |  |         move.l 4(a0),d0
   14ce2:	|  |  |  |         cmp.l 72(sp),d0
   14ce6:	|  |  |  \-------- bgt.w 14c30 <getTextFromAnyVar+0x6a>
			}
			return builder;
   14cea:	|  |  |            move.l 76(sp),d0
   14cee:	|  +--|----------- bra.w 14e96 <getTextFromAnyVar+0x2d0>
		}

		case SVT_STACK:
		{
			char * builder = copyString ("ARRAY:");
   14cf2:	|  |  |            pea 19d82 <graphics.c.1c13408a+0x13c>
   14cf8:	|  |  |            jsr b8 <copyString>
   14cfe:	|  |  |            addq.l #4,sp
   14d00:	|  |  |            move.l d0,68(sp)
			char * builder2;
			char * grabText;

			struct variableStack * stacky = from->varData.theStack -> first;
   14d04:	|  |  |            movea.l 84(sp),a0
   14d08:	|  |  |            movea.l 4(a0),a0
   14d0c:	|  |  |            move.l (a0),64(sp)

			while (stacky) {
   14d10:	|  |  |     /----- bra.w 14db2 <getTextFromAnyVar+0x1ec>
				builder2 = joinStrings (builder, " ");
   14d14:	|  |  |  /--|----> pea 19d80 <graphics.c.1c13408a+0x13a>
   14d1a:	|  |  |  |  |      move.l 72(sp),-(sp)
   14d1e:	|  |  |  |  |      jsr 13b1c <joinStrings>
   14d24:	|  |  |  |  |      addq.l #8,sp
   14d26:	|  |  |  |  |      move.l d0,36(sp)
				if (! builder2) return NULL;
   14d2a:	|  |  |  |  |  /-- bne.s 14d32 <getTextFromAnyVar+0x16c>
   14d2c:	|  |  |  |  |  |   moveq #0,d0
   14d2e:	|  +--|--|--|--|-- bra.w 14e96 <getTextFromAnyVar+0x2d0>
				FreeVec(builder);
   14d32:	|  |  |  |  |  \-> move.l 68(sp),32(sp)
   14d38:	|  |  |  |  |      move.l 1a7a4 <SysBase>,d0
   14d3e:	|  |  |  |  |      movea.l d0,a6
   14d40:	|  |  |  |  |      movea.l 32(sp),a1
   14d44:	|  |  |  |  |      jsr -690(a6)
				grabText = getTextFromAnyVar (&stacky -> thisVar);
   14d48:	|  |  |  |  |      move.l 64(sp),d0
   14d4c:	|  |  |  |  |      move.l d0,-(sp)
   14d4e:	|  |  \--|--|----- jsr 14bc6 <getTextFromAnyVar>(pc)
   14d52:	|  |     |  |      addq.l #4,sp
   14d54:	|  |     |  |      move.l d0,28(sp)
				builder = joinStrings (builder2, grabText);
   14d58:	|  |     |  |      move.l 28(sp),-(sp)
   14d5c:	|  |     |  |      move.l 40(sp),-(sp)
   14d60:	|  |     |  |      jsr 13b1c <joinStrings>
   14d66:	|  |     |  |      addq.l #8,sp
   14d68:	|  |     |  |      move.l d0,68(sp)
				if (! builder) return NULL;
   14d6c:	|  |     |  |  /-- bne.s 14d74 <getTextFromAnyVar+0x1ae>
   14d6e:	|  |     |  |  |   moveq #0,d0
   14d70:	|  +-----|--|--|-- bra.w 14e96 <getTextFromAnyVar+0x2d0>
				FreeVec(grabText);
   14d74:	|  |     |  |  \-> move.l 28(sp),24(sp)
   14d7a:	|  |     |  |      move.l 1a7a4 <SysBase>,d0
   14d80:	|  |     |  |      movea.l d0,a6
   14d82:	|  |     |  |      movea.l 24(sp),a1
   14d86:	|  |     |  |      jsr -690(a6)
				grabText = NULL;
   14d8a:	|  |     |  |      clr.l 28(sp)
				FreeVec(builder2);
   14d8e:	|  |     |  |      move.l 36(sp),20(sp)
   14d94:	|  |     |  |      move.l 1a7a4 <SysBase>,d0
   14d9a:	|  |     |  |      movea.l d0,a6
   14d9c:	|  |     |  |      movea.l 20(sp),a1
   14da0:	|  |     |  |      jsr -690(a6)
				builder2 = NULL;
   14da4:	|  |     |  |      clr.l 36(sp)
				stacky = stacky -> next;
   14da8:	|  |     |  |      movea.l 64(sp),a0
   14dac:	|  |     |  |      move.l 8(a0),64(sp)
			while (stacky) {
   14db2:	|  |     |  \----> tst.l 64(sp)
   14db6:	|  |     \-------- bne.w 14d14 <getTextFromAnyVar+0x14e>
			}
			return builder;
   14dba:	|  |               move.l 68(sp),d0
   14dbe:	|  +-------------- bra.w 14e96 <getTextFromAnyVar+0x2d0>
		}

		case SVT_INT:
		{
			char * buff = AllocVec(10, MEMF_ANY);
   14dc2:	|  |               moveq #10,d0
   14dc4:	|  |               move.l d0,16(sp)
   14dc8:	|  |               clr.l 12(sp)
   14dcc:	|  |               move.l 1a7a4 <SysBase>,d0
   14dd2:	|  |               movea.l d0,a6
   14dd4:	|  |               move.l 16(sp),d0
   14dd8:	|  |               move.l 12(sp),d1
   14ddc:	|  |               jsr -684(a6)
   14de0:	|  |               move.l d0,8(sp)
   14de4:	|  |               move.l 8(sp),d0
   14de8:	|  |               move.l d0,4(sp)
			if (! buff) {
   14dec:	|  |           /-- bne.s 14e02 <getTextFromAnyVar+0x23c>
				KPrintF("getTextFromAnyVar: Cannot allocate Memory");
   14dee:	|  |           |   pea 19d89 <graphics.c.1c13408a+0x143>
   14df4:	|  |           |   jsr 1703c <KPrintF>
   14dfa:	|  |           |   addq.l #4,sp
				return NULL;
   14dfc:	|  |           |   moveq #0,d0
   14dfe:	|  +-----------|-- bra.w 14e96 <getTextFromAnyVar+0x2d0>
			}
			sprintf (buff, "%i", from->varData.intValue);
   14e02:	|  |           \-> movea.l 84(sp),a0
   14e06:	|  |               move.l 4(a0),d0
   14e0a:	|  |               move.l d0,-(sp)
   14e0c:	|  |               pea 19db3 <graphics.c.1c13408a+0x16d>
   14e12:	|  |               move.l 12(sp),-(sp)
   14e16:	|  |               jsr 13dfa <sprintf>
   14e1c:	|  |               lea 12(sp),sp
			return buff;
   14e20:	|  |               move.l 4(sp),d0
   14e24:	|  +-------------- bra.s 14e96 <getTextFromAnyVar+0x2d0>
		}

		case SVT_FILE:
		{

			return joinStrings ("", resourceNameFromNum (from->varData.intValue));
   14e26:	|  |               movea.l 84(sp),a0
   14e2a:	|  |               move.l 4(a0),d0
   14e2e:	|  |               move.l d0,-(sp)
   14e30:	|  |               jsr 3eb8 <resourceNameFromNum>
   14e36:	|  |               addq.l #4,sp
   14e38:	|  |               move.l d0,-(sp)
   14e3a:	|  |               pea 187b3 <PutChar+0xcd5>
   14e40:	|  |               jsr 13b1c <joinStrings>
   14e46:	|  |               addq.l #8,sp
   14e48:	|  +-------------- bra.s 14e96 <getTextFromAnyVar+0x2d0>
		}

		case SVT_OBJTYPE:
		{
			struct objectType * thisType = findObjectType (from->varData.intValue);
   14e4a:	|  |               movea.l 84(sp),a0
   14e4e:	|  |               move.l 4(a0),d0
   14e52:	|  |               move.l d0,-(sp)
   14e54:	|  |               jsr d356 <findObjectType>
   14e5a:	|  |               addq.l #4,sp
   14e5c:	|  |               move.l d0,40(sp)
			if (thisType) return copyString (thisType -> screenName);
   14e60:	+--|-------------- beq.s 14e74 <getTextFromAnyVar+0x2ae>
   14e62:	|  |               movea.l 40(sp),a0
   14e66:	|  |               move.l (a0),d0
   14e68:	|  |               move.l d0,-(sp)
   14e6a:	|  |               jsr b8 <copyString>
   14e70:	|  |               addq.l #4,sp
   14e72:	|  +-------------- bra.s 14e96 <getTextFromAnyVar+0x2d0>
		}

		default:
		break;
   14e74:	\--|-------------> nop
	}

	return copyString (typeName[from->varType]);
   14e76:	   |               movea.l 84(sp),a0
   14e7a:	   |               move.l (a0),d0
   14e7c:	   |               add.l d0,d0
   14e7e:	   |               movea.l d0,a1
   14e80:	   |               adda.l d0,a1
   14e82:	   |               lea 1a680 <typeName>,a0
   14e88:	   |               move.l (0,a1,a0.l),d0
   14e8c:	   |               move.l d0,-(sp)
   14e8e:	   |               jsr b8 <copyString>
   14e94:	   |               addq.l #4,sp
}
   14e96:	   \-------------> movea.l (sp)+,a6
   14e98:	                   lea 76(sp),sp
   14e9c:	                   rts

00014e9e <newAnimationVariable>:


void newAnimationVariable (struct variable *thisVar, struct personaAnimation * i) {
	unlinkVar (thisVar);
   14e9e:	move.l 4(sp),-(sp)
   14ea2:	jsr 1483e <unlinkVar>
   14ea8:	addq.l #4,sp
	thisVar->varType = SVT_ANIM;
   14eaa:	movea.l 4(sp),a0
   14eae:	moveq #8,d0
   14eb0:	move.l d0,(a0)
	thisVar->varData.animHandler = i;
   14eb2:	movea.l 4(sp),a0
   14eb6:	move.l 8(sp),4(a0)
}
   14ebc:	nop
   14ebe:	rts

00014ec0 <newCostumeVariable>:

void newCostumeVariable (struct variable * thisVar, struct persona * i) {
	unlinkVar(thisVar);
   14ec0:	move.l 4(sp),-(sp)
   14ec4:	jsr 1483e <unlinkVar>
   14eca:	addq.l #4,sp
	thisVar->varType = SVT_COSTUME;
   14ecc:	movea.l 4(sp),a0
   14ed0:	moveq #9,d0
   14ed2:	move.l d0,(a0)
	thisVar->varData.costumeHandler = i;
   14ed4:	movea.l 4(sp),a0
   14ed8:	move.l 8(sp),4(a0)
}
   14ede:	nop
   14ee0:	rts

00014ee2 <setVariable>:

void setVariable (struct variable *thisVar, enum variableType vT, int value) {
	unlinkVar (thisVar);
   14ee2:	move.l 4(sp),-(sp)
   14ee6:	jsr 1483e <unlinkVar>
   14eec:	addq.l #4,sp
	thisVar->varType = vT;
   14eee:	movea.l 4(sp),a0
   14ef2:	move.l 8(sp),(a0)
	thisVar->varData.intValue = value;
   14ef6:	movea.l 4(sp),a0
   14efa:	move.l 12(sp),4(a0)
}
   14f00:	nop
   14f02:	rts

00014f04 <stackGetByIndex>:

struct variable * stackGetByIndex (struct variableStack * vS, unsigned int theIndex) {
    while (theIndex--) {
   14f04:	      /-- bra.s 14f16 <stackGetByIndex+0x12>
        vS = vS->next;
   14f06:	/-----|-> movea.l 4(sp),a0
   14f0a:	|     |   move.l 8(a0),4(sp)
        if (!vS) {
   14f10:	|     +-- bne.s 14f16 <stackGetByIndex+0x12>
            return NULL;
   14f12:	|     |   moveq #0,d0
   14f14:	|  /--|-- bra.s 14f2a <stackGetByIndex+0x26>
    while (theIndex--) {
   14f16:	|  |  \-> move.l 8(sp),d0
   14f1a:	|  |      move.l d0,d1
   14f1c:	|  |      subq.l #1,d1
   14f1e:	|  |      move.l d1,8(sp)
   14f22:	|  |      tst.l d0
   14f24:	\--|----- bne.s 14f06 <stackGetByIndex+0x2>
        }
    }
    return &(vS->thisVar);
   14f26:	   |      move.l 4(sp),d0
}
   14f2a:	   \----> rts

00014f2c <stackFindLast>:

// Would be a LOT better just to keep this up to date in deletevarfromstack function... ah well
struct variableStack * stackFindLast (struct variableStack * hunt) {
	if (hunt == NULL)
   14f2c:	          tst.l 4(sp)
   14f30:	      /-- bne.s 14f40 <stackFindLast+0x14>
		return NULL;
   14f32:	      |   moveq #0,d0
   14f34:	/-----|-- bra.s 14f4e <stackFindLast+0x22>

	while (hunt->next)
		hunt = hunt->next;
   14f36:	|  /--|-> movea.l 4(sp),a0
   14f3a:	|  |  |   move.l 8(a0),4(sp)
	while (hunt->next)
   14f40:	|  |  \-> movea.l 4(sp),a0
   14f44:	|  |      move.l 8(a0),d0
   14f48:	|  \----- bne.s 14f36 <stackFindLast+0xa>

	return hunt;
   14f4a:	|         move.l 4(sp),d0
}
   14f4e:	\-------> rts

00014f50 <stackSize>:

int stackSize (const struct stackHandler * me) {
   14f50:	       subq.l #8,sp
	int r = 0;
   14f52:	       clr.l 4(sp)
	struct variableStack * a = me -> first;
   14f56:	       movea.l 12(sp),a0
   14f5a:	       move.l (a0),(sp)
	while (a) {
   14f5c:	   /-- bra.s 14f68 <stackSize+0x18>
		r ++;
   14f5e:	/--|-> addq.l #1,4(sp)
		a = a -> next;
   14f62:	|  |   movea.l (sp),a0
   14f64:	|  |   move.l 8(a0),(sp)
	while (a) {
   14f68:	|  \-> tst.l (sp)
   14f6a:	\----- bne.s 14f5e <stackSize+0xe>
	}
	return r;
   14f6c:	       move.l 4(sp),d0
}
   14f70:	       addq.l #8,sp
   14f72:	       rts

00014f74 <trimStack>:

void trimStack (struct variableStack ** stack) {
   14f74:	subq.l #8,sp
   14f76:	move.l a6,-(sp)

	struct variableStack* killMe = *stack;
   14f78:	movea.l 16(sp),a0
   14f7c:	move.l (a0),8(sp)

	*stack = (*stack)->next;
   14f80:	movea.l 16(sp),a0
   14f84:	movea.l (a0),a0
   14f86:	move.l 8(a0),d0
   14f8a:	movea.l 16(sp),a0
   14f8e:	move.l d0,(a0)

	// When calling this, we've ALWAYS checked that stack != NULL
	unlinkVar (&(killMe -> thisVar));
   14f90:	move.l 8(sp),d0
   14f94:	move.l d0,-(sp)
   14f96:	jsr 1483e <unlinkVar>
   14f9c:	addq.l #4,sp
	FreeVec(killMe);
   14f9e:	move.l 8(sp),4(sp)
   14fa4:	move.l 1a7a4 <SysBase>,d0
   14faa:	movea.l d0,a6
   14fac:	movea.l 4(sp),a1
   14fb0:	jsr -690(a6)
   14fb4:	nop
   14fb6:	movea.l (sp)+,a6
   14fb8:	addq.l #8,sp
   14fba:	rts

00014fbc <freeze>:
extern BOOL backdropExists;

struct frozenStuffStruct * frozenStuff = NULL;


BOOL freeze () {
   14fbc:	       lea -52(sp),sp
   14fc0:	       move.l a6,-(sp)
	KPrintF("calling freeze()\n");
   14fc2:	       pea 19db6 <graphics.c.1c13408a+0x170>
   14fc8:	       jsr 1703c <KPrintF>
   14fce:	       addq.l #4,sp

	struct frozenStuffStruct * newFreezer = (struct frozenStuffStruct *) AllocVec(sizeof(struct frozenStuffStruct), MEMF_ANY);
   14fd0:	       moveq #68,d0
   14fd2:	       move.l d0,52(sp)
   14fd6:	       clr.l 48(sp)
   14fda:	       move.l 1a7a4 <SysBase>,d0
   14fe0:	       movea.l d0,a6
   14fe2:	       move.l 52(sp),d0
   14fe6:	       move.l 48(sp),d1
   14fea:	       jsr -684(a6)
   14fee:	       move.l d0,44(sp)
   14ff2:	       move.l 44(sp),d0
   14ff6:	       move.l d0,40(sp)
	if (!newFreezer) return FALSE;
   14ffa:	   /-- bne.s 15002 <freeze+0x46>
   14ffc:	   |   clr.w d0
   14ffe:	/--|-- bra.w 15194 <freeze+0x1d8>

	CstFreeze();
   15002:	|  \-> jsr 1bfc <CstFreeze>

	// Grab a copy of the current scene
	//ToDo: Amiga Graphics handling here	

	int picWidth = sceneWidth;
   15008:	|      move.l 1a840 <sceneWidth>,d0
   1500e:	|      move.l d0,36(sp)
	int picHeight = sceneHeight;	
   15012:	|      move.l 1a844 <sceneHeight>,d0
   15018:	|      move.l d0,32(sp)



	newFreezer -> sceneWidth = sceneWidth;
   1501c:	|      move.l 1a840 <sceneWidth>,d0
   15022:	|      movea.l 40(sp),a0
   15026:	|      move.l d0,48(a0)
	newFreezer -> sceneHeight = sceneHeight;
   1502a:	|      move.l 1a844 <sceneHeight>,d0
   15030:	|      movea.l 40(sp),a0
   15034:	|      move.l d0,52(a0)
	newFreezer -> cameraX = cameraX;
   15038:	|      move.l 1a85e <cameraX>,d0
   1503e:	|      movea.l 40(sp),a0
   15042:	|      move.l d0,40(a0)
	newFreezer -> cameraY = cameraY;
   15046:	|      move.l 1a862 <cameraY>,d0
   1504c:	|      movea.l 40(sp),a0
   15050:	|      move.l d0,44(a0)
	newFreezer -> cameraZoom = cameraZoom;
   15054:	|      move.l 1a142 <cameraZoom>,d0
   1505a:	|      movea.l 40(sp),a0
   1505e:	|      move.l d0,56(a0)
	// resizeBackdrop kills parallax stuff, light map, z-buffer...
	/*if (! resizeBackdrop (winWidth, winHeight)) {
		KPrintF("Can't create new temporary backdrop buffer");
	}*/

	backdropExists = TRUE;
   15062:	|      move.w #1,1a84c <backdropExists>

	newFreezer -> allPeople = allPeople;
   1506a:	|      move.l 1a808 <allPeople>,d0
   15070:	|      movea.l 40(sp),a0
   15074:	|      move.l d0,(a0)
	allPeople = NULL;
   15076:	|      clr.l 1a808 <allPeople>

	struct statusStuff * newStatusStuff = (struct statusStuff *) AllocVec(sizeof(struct statusStuff), MEMF_ANY);
   1507c:	|      moveq #42,d0
   1507e:	|      move.l d0,28(sp)
   15082:	|      clr.l 24(sp)
   15086:	|      move.l 1a7a4 <SysBase>,d0
   1508c:	|      movea.l d0,a6
   1508e:	|      move.l 28(sp),d0
   15092:	|      move.l 24(sp),d1
   15096:	|      jsr -684(a6)
   1509a:	|      move.l d0,20(sp)
   1509e:	|      move.l 20(sp),d0
   150a2:	|      move.l d0,16(sp)
	if (!newStatusStuff) return FALSE;	
   150a6:	|  /-- bne.s 150ae <freeze+0xf2>
   150a8:	|  |   clr.w d0
   150aa:	+--|-- bra.w 15194 <freeze+0x1d8>

	newFreezer -> allScreenRegions = allScreenRegions;
   150ae:	|  \-> move.l 1a8b4 <allScreenRegions>,d0
   150b4:	|      movea.l 40(sp),a0
   150b8:	|      move.l d0,4(a0)
	allScreenRegions = NULL;
   150bc:	|      clr.l 1a8b4 <allScreenRegions>
	overRegion = NULL;
   150c2:	|      clr.l 1a8b8 <overRegion>

	newFreezer -> mouseCursorAnim = mouseCursorAnim;
   150c8:	|      move.l 1a6aa <mouseCursorAnim>,d0
   150ce:	|      movea.l 40(sp),a0
   150d2:	|      move.l d0,32(a0)
	newFreezer -> mouseCursorFrameNum = mouseCursorFrameNum;
   150d6:	|      move.l 1a6ae <mouseCursorFrameNum>,d0
   150dc:	|      movea.l 40(sp),a0
   150e0:	|      move.l d0,36(a0)
	mouseCursorAnim = makeNullAnim ();
   150e4:	|      jsr ab36 <makeNullAnim>
   150ea:	|      move.l d0,1a6aa <mouseCursorAnim>
	mouseCursorFrameNum = 0;
   150f0:	|      clr.l 1a6ae <mouseCursorFrameNum>

	newFreezer -> zBuffer = zBuffer;
   150f6:	|      move.l 1a804 <zBuffer>,d0
   150fc:	|      movea.l 40(sp),a0
   15100:	|      move.l d0,60(a0)
	zBuffer = NULL;
   15104:	|      clr.l 1a804 <zBuffer>

	newFreezer -> speech = speech;
   1510a:	|      move.l 1a800 <speech>,d0
   15110:	|      movea.l 40(sp),a0
   15114:	|      move.l d0,20(a0)
	initSpeech ();
   15118:	|      jsr 7c64 <initSpeech>

	newFreezer -> currentEvents = currentEvents;
   1511e:	|      move.l 1a11c <currentEvents>,d0
   15124:	|      movea.l 40(sp),a0
   15128:	|      move.l d0,28(a0)
	currentEvents = (struct eventhandlers *) AllocVec(sizeof(struct eventHandlers), MEMF_ANY);
   1512c:	|      moveq #28,d0
   1512e:	|      move.l d0,12(sp)
   15132:	|      clr.l 8(sp)
   15136:	|      move.l 1a7a4 <SysBase>,d0
   1513c:	|      movea.l d0,a6
   1513e:	|      move.l 12(sp),d0
   15142:	|      move.l 8(sp),d1
   15146:	|      jsr -684(a6)
   1514a:	|      move.l d0,4(sp)
   1514e:	|      move.l 4(sp),d0
   15152:	|      move.l d0,1a11c <currentEvents>
	if (!currentEvents) return FALSE;
   15158:	|      move.l 1a11c <currentEvents>,d0
   1515e:	|  /-- bne.s 15164 <freeze+0x1a8>
   15160:	|  |   clr.w d0
   15162:	+--|-- bra.s 15194 <freeze+0x1d8>
	memset ( currentEvents, 0, sizeof(struct eventHandlers));
   15164:	|  \-> move.l 1a11c <currentEvents>,d0
   1516a:	|      pea 1c <_start+0x1c>
   1516e:	|      clr.l -(sp)
   15170:	|      move.l d0,-(sp)
   15172:	|      jsr 16fc0 <memset>
   15178:	|      lea 12(sp),sp

	newFreezer -> next = frozenStuff;
   1517c:	|      move.l 1a898 <frozenStuff>,d0
   15182:	|      movea.l 40(sp),a0
   15186:	|      move.l d0,64(a0)
	frozenStuff = newFreezer;
   1518a:	|      move.l 40(sp),1a898 <frozenStuff>

	return TRUE;
   15192:	|      moveq #1,d0
}
   15194:	\----> movea.l (sp)+,a6
   15196:	       lea 52(sp),sp
   1519a:	       rts

0001519c <howFrozen>:

int howFrozen () {
   1519c:	       subq.l #8,sp
	int a = 0;
   1519e:	       clr.l 4(sp)
	struct frozenStuffStruct * f = frozenStuff;
   151a2:	       move.l 1a898 <frozenStuff>,(sp)
	while (f) {
   151a8:	   /-- bra.s 151b4 <howFrozen+0x18>
		a ++;
   151aa:	/--|-> addq.l #1,4(sp)
		f = f -> next;
   151ae:	|  |   movea.l (sp),a0
   151b0:	|  |   move.l 64(a0),(sp)
	while (f) {
   151b4:	|  \-> tst.l (sp)
   151b6:	\----- bne.s 151aa <howFrozen+0xe>
	}
	return a;
   151b8:	       move.l 4(sp),d0
}
   151bc:	       addq.l #8,sp
   151be:	       rts

000151c0 <unfreeze>:

void unfreeze () {
   151c0:	       lea -16(sp),sp
   151c4:	       move.l a6,-(sp)
	struct frozenStuffStruct * killMe = frozenStuff;
   151c6:	       move.l 1a898 <frozenStuff>,16(sp)

	if (! frozenStuff) return;
   151ce:	       move.l 1a898 <frozenStuff>,d0
   151d4:	/----- beq.w 1540c <unfreeze+0x24c>

	CstUnfreeze();
   151d8:	|      jsr 3ab0 <CstUnfreeze>

	sceneWidth = frozenStuff -> sceneWidth;
   151de:	|      movea.l 1a898 <frozenStuff>,a0
   151e4:	|      move.l 48(a0),d0
   151e8:	|      move.l d0,1a840 <sceneWidth>
	sceneHeight = frozenStuff -> sceneHeight;
   151ee:	|      movea.l 1a898 <frozenStuff>,a0
   151f4:	|      move.l 52(a0),d0
   151f8:	|      move.l d0,1a844 <sceneHeight>

	cameraX = frozenStuff -> cameraX;
   151fe:	|      movea.l 1a898 <frozenStuff>,a0
   15204:	|      move.l 40(a0),d0
   15208:	|      move.l d0,1a85e <cameraX>
	cameraY = frozenStuff -> cameraY;
   1520e:	|      movea.l 1a898 <frozenStuff>,a0
   15214:	|      move.l 44(a0),d0
   15218:	|      move.l d0,1a862 <cameraY>
	input.mouseX = (int)(input.mouseX * cameraZoom);
   1521e:	|      move.l 1a760 <input+0xa>,d0
   15224:	|      move.l d0,-(sp)
   15226:	|      jsr 1746e <__floatsisf>
   1522c:	|      addq.l #4,sp
   1522e:	|      move.l d0,d1
   15230:	|      move.l 1a142 <cameraZoom>,d0
   15236:	|      move.l d0,-(sp)
   15238:	|      move.l d1,-(sp)
   1523a:	|      jsr 17520 <__mulsf3>
   15240:	|      addq.l #8,sp
   15242:	|      move.l d0,-(sp)
   15244:	|      jsr 17406 <__fixsfsi>
   1524a:	|      addq.l #4,sp
   1524c:	|      move.l d0,1a760 <input+0xa>
	input.mouseY = (int)(input.mouseY * cameraZoom);
   15252:	|      move.l 1a764 <input+0xe>,d0
   15258:	|      move.l d0,-(sp)
   1525a:	|      jsr 1746e <__floatsisf>
   15260:	|      addq.l #4,sp
   15262:	|      move.l d0,d1
   15264:	|      move.l 1a142 <cameraZoom>,d0
   1526a:	|      move.l d0,-(sp)
   1526c:	|      move.l d1,-(sp)
   1526e:	|      jsr 17520 <__mulsf3>
   15274:	|      addq.l #8,sp
   15276:	|      move.l d0,-(sp)
   15278:	|      jsr 17406 <__fixsfsi>
   1527e:	|      addq.l #4,sp
   15280:	|      move.l d0,1a764 <input+0xe>
	cameraZoom = frozenStuff -> cameraZoom;
   15286:	|      movea.l 1a898 <frozenStuff>,a0
   1528c:	|      move.l 56(a0),d0
   15290:	|      move.l d0,1a142 <cameraZoom>
	input.mouseX = (int)(input.mouseX / cameraZoom);
   15296:	|      move.l 1a760 <input+0xa>,d0
   1529c:	|      move.l d0,-(sp)
   1529e:	|      jsr 1746e <__floatsisf>
   152a4:	|      addq.l #4,sp
   152a6:	|      move.l d0,d1
   152a8:	|      move.l 1a142 <cameraZoom>,d0
   152ae:	|      move.l d0,-(sp)
   152b0:	|      move.l d1,-(sp)
   152b2:	|      jsr 17324 <__divsf3>
   152b8:	|      addq.l #8,sp
   152ba:	|      move.l d0,-(sp)
   152bc:	|      jsr 17406 <__fixsfsi>
   152c2:	|      addq.l #4,sp
   152c4:	|      move.l d0,1a760 <input+0xa>
	input.mouseY = (int)(input.mouseY / cameraZoom);
   152ca:	|      move.l 1a764 <input+0xe>,d0
   152d0:	|      move.l d0,-(sp)
   152d2:	|      jsr 1746e <__floatsisf>
   152d8:	|      addq.l #4,sp
   152da:	|      move.l d0,d1
   152dc:	|      move.l 1a142 <cameraZoom>,d0
   152e2:	|      move.l d0,-(sp)
   152e4:	|      move.l d1,-(sp)
   152e6:	|      jsr 17324 <__divsf3>
   152ec:	|      addq.l #8,sp
   152ee:	|      move.l d0,-(sp)
   152f0:	|      jsr 17406 <__fixsfsi>
   152f6:	|      addq.l #4,sp
   152f8:	|      move.l d0,1a764 <input+0xe>

	killAllPeople ();
   152fe:	|      jsr a83e <killAllPeople>
	allPeople = frozenStuff -> allPeople;
   15304:	|      movea.l 1a898 <frozenStuff>,a0
   1530a:	|      move.l (a0),d0
   1530c:	|      move.l d0,1a808 <allPeople>

	killAllRegions ();
   15312:	|      jsr 15868 <killAllRegions>
	allScreenRegions = frozenStuff -> allScreenRegions;
   15318:	|      movea.l 1a898 <frozenStuff>,a0
   1531e:	|      move.l 4(a0),d0
   15322:	|      move.l d0,1a8b4 <allScreenRegions>
	
	deleteAnim (mouseCursorAnim);  
   15328:	|      move.l 1a6aa <mouseCursorAnim>,d0
   1532e:	|      move.l d0,-(sp)
   15330:	|      jsr 9732 <deleteAnim>
   15336:	|      addq.l #4,sp
	mouseCursorAnim = frozenStuff -> mouseCursorAnim;
   15338:	|      movea.l 1a898 <frozenStuff>,a0
   1533e:	|      move.l 32(a0),d0
   15342:	|      move.l d0,1a6aa <mouseCursorAnim>
	mouseCursorFrameNum = frozenStuff -> mouseCursorFrameNum;	
   15348:	|      movea.l 1a898 <frozenStuff>,a0
   1534e:	|      move.l 36(a0),d0
   15352:	|      move.l d0,1a6ae <mouseCursorFrameNum>

	killZBuffer ();
   15358:	|      jsr 84d8 <killZBuffer>
	zBuffer = frozenStuff->zBuffer;
   1535e:	|      movea.l 1a898 <frozenStuff>,a0
   15364:	|      move.l 60(a0),d0
   15368:	|      move.l d0,1a804 <zBuffer>

	if (currentEvents) FreeVec(currentEvents);
   1536e:	|      move.l 1a11c <currentEvents>,d0
   15374:	|  /-- beq.s 1538e <unfreeze+0x1ce>
   15376:	|  |   move.l 1a11c <currentEvents>,12(sp)
   1537e:	|  |   move.l 1a7a4 <SysBase>,d0
   15384:	|  |   movea.l d0,a6
   15386:	|  |   movea.l 12(sp),a1
   1538a:	|  |   jsr -690(a6)
	currentEvents = frozenStuff -> currentEvents;
   1538e:	|  \-> movea.l 1a898 <frozenStuff>,a0
   15394:	|      move.l 28(a0),d0
   15398:	|      move.l d0,1a11c <currentEvents>

	killAllSpeech ();
   1539e:	|      jsr 7cfc <killAllSpeech>
	if (speech) FreeVec(speech);
   153a4:	|      move.l 1a800 <speech>,d0
   153aa:	|  /-- beq.s 153c4 <unfreeze+0x204>
   153ac:	|  |   move.l 1a800 <speech>,8(sp)
   153b4:	|  |   move.l 1a7a4 <SysBase>,d0
   153ba:	|  |   movea.l d0,a6
   153bc:	|  |   movea.l 8(sp),a1
   153c0:	|  |   jsr -690(a6)
	speech = frozenStuff -> speech;
   153c4:	|  \-> movea.l 1a898 <frozenStuff>,a0
   153ca:	|      move.l 20(a0),d0
   153ce:	|      move.l d0,1a800 <speech>

	frozenStuff = frozenStuff -> next;
   153d4:	|      movea.l 1a898 <frozenStuff>,a0
   153da:	|      move.l 64(a0),d0
   153de:	|      move.l d0,1a898 <frozenStuff>

	overRegion = NULL;
   153e4:	|      clr.l 1a8b8 <overRegion>
	if (killMe) FreeVec(killMe);
   153ea:	|      tst.l 16(sp)
   153ee:	|  /-- beq.s 15406 <unfreeze+0x246>
   153f0:	|  |   move.l 16(sp),4(sp)
   153f6:	|  |   move.l 1a7a4 <SysBase>,d0
   153fc:	|  |   movea.l d0,a6
   153fe:	|  |   movea.l 4(sp),a1
   15402:	|  |   jsr -690(a6)
	killMe = NULL;
   15406:	|  \-> clr.l 16(sp)
   1540a:	|  /-- bra.s 1540e <unfreeze+0x24e>
	if (! frozenStuff) return;
   1540c:	\--|-> nop
}
   1540e:	   \-> movea.l (sp)+,a6
   15410:	       lea 16(sp),sp
   15414:	       rts

00015416 <isInFont>:
unsigned int fontTableSize = 0;
struct loadedSpriteBank *theFont;


BOOL isInFont (char * theText) {
	KPrintF("isInFont: Not implemented yet on Amiga"); //Todo: Implement on Amiga
   15416:	pea 19dc8 <graphics.c.1c13408a+0x182>
   1541c:	jsr 1703c <KPrintF>
   15422:	addq.l #4,sp
	return FALSE;
   15424:	clr.w d0
}
   15426:	rts

00015428 <loadFont>:

BOOL loadFont (int filenum, char * charOrder, int h) {
   15428:	          lea -32(sp),sp
   1542c:	          move.l a6,-(sp)
   1542e:	          move.l d2,-(sp)
	unsigned int a = 0;
   15430:	          clr.l 36(sp)
	ULONG c;

	if( fontOrderString) FreeVec(fontOrderString);
   15434:	          move.l 1a8a4 <fontOrderString>,d0
   1543a:	      /-- beq.s 15454 <loadFont+0x2c>
   1543c:	      |   move.l 1a8a4 <fontOrderString>,24(sp)
   15444:	      |   move.l 1a7a4 <SysBase>,d0
   1544a:	      |   movea.l d0,a6
   1544c:	      |   movea.l 24(sp),a1
   15450:	      |   jsr -690(a6)
	fontOrderString = copyString(charOrder);
   15454:	      \-> move.l 48(sp),-(sp)
   15458:	          jsr b8 <copyString>
   1545e:	          addq.l #4,sp
   15460:	          move.l d0,1a8a4 <fontOrderString>
	if( theFont) forgetSpriteBank(theFont);	
   15466:	          move.l 1a8b0 <theFont>,d0
   1546c:	      /-- beq.s 1547e <loadFont+0x56>
   1546e:	      |   move.l 1a8b0 <theFont>,d0
   15474:	      |   move.l d0,-(sp)
   15476:	      |   jsr 8816 <forgetSpriteBank>
   1547c:	      |   addq.l #4,sp
	theFont = NULL;
   1547e:	      \-> clr.l 1a8b0 <theFont>

	loadedFontNum = filenum;
   15484:	          move.l 44(sp),1a8a0 <loadedFontNum>

	fontTableSize = 0;
   1548c:	          clr.l 1a8ac <fontTableSize>
	char *tmp = charOrder;
   15492:	          move.l 48(sp),32(sp)
	while (*tmp) {        
   15498:	   /----- bra.s 154d4 <loadFont+0xac>
		if (*tmp > (UBYTE) fontTableSize) fontTableSize = *tmp;
   1549a:	/--|----> movea.l 32(sp),a0
   1549e:	|  |      move.b (a0),d0
   154a0:	|  |      ext.w d0
   154a2:	|  |      movea.w d0,a0
   154a4:	|  |      move.l 1a8ac <fontTableSize>,d0
   154aa:	|  |      move.l d0,d0
   154ac:	|  |      move.b d0,d0
   154ae:	|  |      andi.l #255,d0
   154b4:	|  |      cmp.l a0,d0
   154b6:	|  |  /-- bge.s 154c8 <loadFont+0xa0>
   154b8:	|  |  |   movea.l 32(sp),a0
   154bc:	|  |  |   move.b (a0),d0
   154be:	|  |  |   ext.w d0
   154c0:	|  |  |   movea.w d0,a0
   154c2:	|  |  |   move.l a0,1a8ac <fontTableSize>
		*tmp++;
   154c8:	|  |  \-> move.l 32(sp),d0
   154cc:	|  |      move.l d0,d1
   154ce:	|  |      addq.l #1,d1
   154d0:	|  |      move.l d1,32(sp)
	while (*tmp) {        
   154d4:	|  \----> movea.l 32(sp),a0
   154d8:	|         move.b (a0),d0
   154da:	\-------- bne.s 1549a <loadFont+0x72>
	}
	fontTableSize++;
   154dc:	          move.l 1a8ac <fontTableSize>,d0
   154e2:	          addq.l #1,d0
   154e4:	          move.l d0,1a8ac <fontTableSize>

	if( fontTable) FreeVec(fontTable);
   154ea:	          move.l 1a8a8 <fontTable>,d0
   154f0:	      /-- beq.s 1550a <loadFont+0xe2>
   154f2:	      |   move.l 1a8a8 <fontTable>,20(sp)
   154fa:	      |   move.l 1a7a4 <SysBase>,d0
   15500:	      |   movea.l d0,a6
   15502:	      |   movea.l 20(sp),a1
   15506:	      |   jsr -690(a6)
	fontTable = AllocVec(sizeof(ULONG) * fontTableSize, MEMF_ANY);
   1550a:	      \-> move.l 1a8ac <fontTableSize>,d0
   15510:	          add.l d0,d0
   15512:	          add.l d0,d0
   15514:	          move.l d0,16(sp)
   15518:	          clr.l 12(sp)
   1551c:	          move.l 1a7a4 <SysBase>,d0
   15522:	          movea.l d0,a6
   15524:	          move.l 16(sp),d0
   15528:	          move.l 12(sp),d1
   1552c:	          jsr -684(a6)
   15530:	          move.l d0,8(sp)
   15534:	          move.l 8(sp),d0
   15538:	          move.l d0,1a8a8 <fontTable>
	if (!fontTable) return FALSE;
   1553e:	          move.l 1a8a8 <fontTable>,d0
   15544:	      /-- bne.s 1554c <loadFont+0x124>
   15546:	      |   clr.w d0
   15548:	/-----|-- bra.w 155f2 <loadFont+0x1ca>

	for (a = 0;  a < fontTableSize; a++) {
   1554c:	|     \-> clr.l 36(sp)
   15550:	|     /-- bra.s 1556a <loadFont+0x142>
		fontTable[a] = 0;
   15552:	|  /--|-> move.l 1a8a8 <fontTable>,d1
   15558:	|  |  |   move.l 36(sp),d0
   1555c:	|  |  |   add.l d0,d0
   1555e:	|  |  |   add.l d0,d0
   15560:	|  |  |   movea.l d1,a0
   15562:	|  |  |   adda.l d0,a0
   15564:	|  |  |   clr.l (a0)
	for (a = 0;  a < fontTableSize; a++) {
   15566:	|  |  |   addq.l #1,36(sp)
   1556a:	|  |  \-> move.l 1a8ac <fontTableSize>,d0
   15570:	|  |      cmp.l 36(sp),d0
   15574:	|  \----- bhi.s 15552 <loadFont+0x12a>
	}
	a = 0;
   15576:	|         clr.l 36(sp)
	int i = 0;
   1557a:	|         clr.l 28(sp)
	tmp = charOrder;
   1557e:	|         move.l 48(sp),32(sp)
	while (*tmp) {
   15584:	|     /-- bra.s 155b4 <loadFont+0x18c>
		fontTable[*tmp++] = i;
   15586:	|  /--|-> move.l 1a8a8 <fontTable>,d1
   1558c:	|  |  |   move.l 32(sp),d0
   15590:	|  |  |   move.l d0,d2
   15592:	|  |  |   addq.l #1,d2
   15594:	|  |  |   move.l d2,32(sp)
   15598:	|  |  |   movea.l d0,a0
   1559a:	|  |  |   move.b (a0),d0
   1559c:	|  |  |   ext.w d0
   1559e:	|  |  |   movea.w d0,a0
   155a0:	|  |  |   move.l a0,d0
   155a2:	|  |  |   add.l a0,d0
   155a4:	|  |  |   add.l d0,d0
   155a6:	|  |  |   movea.l d1,a0
   155a8:	|  |  |   adda.l d0,a0
   155aa:	|  |  |   move.l 28(sp),d0
   155ae:	|  |  |   move.l d0,(a0)
		i++;
   155b0:	|  |  |   addq.l #1,28(sp)
	while (*tmp) {
   155b4:	|  |  \-> movea.l 32(sp),a0
   155b8:	|  |      move.b (a0),d0
   155ba:	|  \----- bne.s 15586 <loadFont+0x15e>
	}
	
	theFont = loadBankForAnim(filenum);
   155bc:	|         move.l 44(sp),-(sp)
   155c0:	|         jsr 15d7a <loadBankForAnim>
   155c6:	|         addq.l #4,sp
   155c8:	|         move.l d0,1a8b0 <theFont>
	if (!theFont) {
   155ce:	|         move.l 1a8b0 <theFont>,d0
   155d4:	|     /-- bne.s 155e8 <loadFont+0x1c0>
		KPrintF("loadFont: Can't load font");
   155d6:	|     |   pea 19def <graphics.c.1c13408a+0x1a9>
   155dc:	|     |   jsr 1703c <KPrintF>
   155e2:	|     |   addq.l #4,sp
		return FALSE;
   155e4:	|     |   clr.w d0
   155e6:	+-----|-- bra.s 155f2 <loadFont+0x1ca>
	}
	fontHeight = h;
   155e8:	|     \-> move.l 52(sp),1a89c <fontHeight>
	return TRUE;
   155f0:	|         moveq #1,d0
}
   155f2:	\-------> move.l (sp)+,d2
   155f4:	          movea.l (sp)+,a6
   155f6:	          lea 32(sp),sp
   155fa:	          rts

000155fc <pasteStringToBackdrop>:

void pasteStringToBackdrop(char *theText, int xOff, int y) {
   155fc:	                lea -12(sp),sp
    struct sprite *mySprite;
    int a = 0;
   15600:	                clr.l 4(sp)

    if (!fontTableSize) return;
   15604:	                move.l 1a8ac <fontTableSize>,d0
   1560a:	/-------------- beq.w 156d2 <pasteStringToBackdrop+0xd6>

    xOff += fontSpace >> 1;
   1560e:	|               move.w 1a6a8 <fontSpace>,d0
   15614:	|               asr.w #1,d0
   15616:	|               ext.l d0
   15618:	|               add.l d0,20(sp)
	char *tmp = theText;
   1561c:	|               move.l 16(sp),8(sp)
    while (*tmp) {        
   15622:	|     /-------- bra.w 156c6 <pasteStringToBackdrop+0xca>
        mySprite = &theFont->bank.sprites[fontInTable( (UBYTE) *tmp)];
   15626:	|  /--|-------> movea.l 1a8b0 <theFont>,a0
   1562c:	|  |  |         movea.l 16(a0),a0
   15630:	|  |  |         movea.l 8(sp),a1
   15634:	|  |  |         move.b (a1),d0
   15636:	|  |  |         move.b d0,d0
   15638:	|  |  |         andi.l #255,d0
   1563e:	|  |  |         move.l 1a8ac <fontTableSize>,d1
   15644:	|  |  |         cmp.l d0,d1
   15646:	|  |  |  /----- bls.s 15672 <pasteStringToBackdrop+0x76>
   15648:	|  |  |  |      move.l 1a8a8 <fontTable>,d1
   1564e:	|  |  |  |      movea.l 8(sp),a1
   15652:	|  |  |  |      move.b (a1),d0
   15654:	|  |  |  |      move.b d0,d0
   15656:	|  |  |  |      andi.l #255,d0
   1565c:	|  |  |  |      add.l d0,d0
   1565e:	|  |  |  |      add.l d0,d0
   15660:	|  |  |  |      movea.l d1,a1
   15662:	|  |  |  |      adda.l d0,a1
   15664:	|  |  |  |      move.l (a1),d1
   15666:	|  |  |  |      move.l d1,d0
   15668:	|  |  |  |      lsl.l #3,d0
   1566a:	|  |  |  |      sub.l d1,d0
   1566c:	|  |  |  |      add.l d0,d0
   1566e:	|  |  |  |      add.l d0,d0
   15670:	|  |  |  |  /-- bra.s 15674 <pasteStringToBackdrop+0x78>
   15672:	|  |  |  \--|-> moveq #0,d0
   15674:	|  |  |     \-> adda.l d0,a0
   15676:	|  |  |         move.l a0,(sp)
        CstPasteChar( mySprite, xOff - mySprite->xhot, y - mySprite->yhot);
   15678:	|  |  |         move.l 24(sp),d1
   1567c:	|  |  |         movea.l (sp),a0
   1567e:	|  |  |         move.l 12(a0),d0
   15682:	|  |  |         move.l d0,d0
   15684:	|  |  |         sub.w d0,d1
   15686:	|  |  |         move.w d1,d0
   15688:	|  |  |         movea.w d0,a1
   1568a:	|  |  |         move.l 20(sp),d1
   1568e:	|  |  |         movea.l (sp),a0
   15690:	|  |  |         move.l 8(a0),d0
   15694:	|  |  |         move.l d0,d0
   15696:	|  |  |         sub.w d0,d1
   15698:	|  |  |         move.w d1,d0
   1569a:	|  |  |         movea.w d0,a0
   1569c:	|  |  |         move.l a1,-(sp)
   1569e:	|  |  |         move.l a0,-(sp)
   156a0:	|  |  |         move.l 8(sp),-(sp)
   156a4:	|  |  |         jsr 229e <CstPasteChar>
   156aa:	|  |  |         lea 12(sp),sp
        xOff += mySprite->width + fontSpace;
   156ae:	|  |  |         movea.l (sp),a0
   156b0:	|  |  |         move.l (a0),d1
   156b2:	|  |  |         move.w 1a6a8 <fontSpace>,d0
   156b8:	|  |  |         movea.w d0,a0
   156ba:	|  |  |         move.l d1,d0
   156bc:	|  |  |         add.l a0,d0
   156be:	|  |  |         add.l d0,20(sp)
		tmp++;
   156c2:	|  |  |         addq.l #1,8(sp)
    while (*tmp) {        
   156c6:	|  |  \-------> movea.l 8(sp),a0
   156ca:	|  |            move.b (a0),d0
   156cc:	|  \----------- bne.w 15626 <pasteStringToBackdrop+0x2a>
   156d0:	|           /-- bra.s 156d4 <pasteStringToBackdrop+0xd8>
    if (!fontTableSize) return;
   156d2:	\-----------|-> nop
    }
}
   156d4:	            \-> lea 12(sp),sp
   156d8:	                rts

000156da <stringWidth>:


int stringWidth (char * theText) {
   156da:	       subq.l #8,sp
	int a = 0;
   156dc:	       clr.l 4(sp)
    ULONG c;
	int xOff = 0;
   156e0:	       clr.l (sp)

	if (! fontTableSize) return 0;
   156e2:	       move.l 1a8ac <fontTableSize>,d0
   156e8:	/----- bne.s 156ee <stringWidth+0x14>
   156ea:	|      moveq #0,d0
   156ec:	|  /-- bra.s 156f0 <stringWidth+0x16>
	/*while (theText[a]) {
        c = u8_nextchar(theText, &a);
		xOff += theFont.sprites[fontInTable(c)].width + fontSpace;
	}Todo: Amigize this*/
	
	return xOff;
   156ee:	\--|-> move.l (sp),d0
}
   156f0:	   \-> addq.l #8,sp
   156f2:	       rts

000156f4 <addScreenRegion>:
struct screenRegion * allScreenRegions = NULL;
struct screenRegion * overRegion = NULL;



BOOL addScreenRegion(int x1, int y1, int x2, int y2, int sX, int sY, int di, int objectNum) {
   156f4:	       lea -16(sp),sp
   156f8:	       move.l a6,-(sp)
    struct screenRegion *newRegion = AllocVec(sizeof(struct screenRegion), MEMF_ANY);
   156fa:	       moveq #36,d0
   156fc:	       move.l d0,16(sp)
   15700:	       clr.l 12(sp)
   15704:	       move.l 1a7a4 <SysBase>,d0
   1570a:	       movea.l d0,a6
   1570c:	       move.l 16(sp),d0
   15710:	       move.l 12(sp),d1
   15714:	       jsr -684(a6)
   15718:	       move.l d0,8(sp)
   1571c:	       move.l 8(sp),d0
   15720:	       move.l d0,4(sp)
    if (!newRegion) return FALSE;
   15724:	   /-- bne.s 1572c <addScreenRegion+0x38>
   15726:	   |   clr.w d0
   15728:	/--|-- bra.w 157ac <addScreenRegion+0xb8>
    newRegion->di = di;
   1572c:	|  \-> movea.l 4(sp),a0
   15730:	|      move.l 48(sp),24(a0)
    newRegion->x1 = x1;
   15736:	|      movea.l 4(sp),a0
   1573a:	|      move.l 24(sp),(a0)
    newRegion->y1 = y1;
   1573e:	|      movea.l 4(sp),a0
   15742:	|      move.l 28(sp),4(a0)
    newRegion->x2 = x2;
   15748:	|      movea.l 4(sp),a0
   1574c:	|      move.l 32(sp),8(a0)
    newRegion->y2 = y2;
   15752:	|      movea.l 4(sp),a0
   15756:	|      move.l 36(sp),12(a0)
    newRegion->sX = sX;
   1575c:	|      movea.l 4(sp),a0
   15760:	|      move.l 40(sp),16(a0)
    newRegion->sY = sY;
   15766:	|      movea.l 4(sp),a0
   1576a:	|      move.l 44(sp),20(a0)
    newRegion->thisType = loadObjectType(objectNum);
   15770:	|      move.l 52(sp),-(sp)
   15774:	|      jsr d446 <loadObjectType>
   1577a:	|      addq.l #4,sp
   1577c:	|      movea.l 4(sp),a0
   15780:	|      move.l d0,28(a0)
    newRegion->next = allScreenRegions;
   15784:	|      move.l 1a8b4 <allScreenRegions>,d0
   1578a:	|      movea.l 4(sp),a0
   1578e:	|      move.l d0,32(a0)
    allScreenRegions = newRegion;
   15792:	|      move.l 4(sp),1a8b4 <allScreenRegions>
    return (BOOL) (newRegion->thisType != NULL);
   1579a:	|      movea.l 4(sp),a0
   1579e:	|      move.l 28(a0),d0
   157a2:	|      sne d0
   157a4:	|      neg.b d0
   157a6:	|      move.b d0,d0
   157a8:	|      andi.w #255,d0
}
   157ac:	\----> movea.l (sp)+,a6
   157ae:	       lea 16(sp),sp
   157b2:	       rts

000157b4 <getOverRegion>:

void getOverRegion () {
   157b4:	             subq.l #4,sp
	struct screenRegion * thisRegion = allScreenRegions;
   157b6:	             move.l 1a8b4 <allScreenRegions>,(sp)
	while (thisRegion) {
   157bc:	   /-------- bra.s 1582a <getOverRegion+0x76>
		if ((input.mouseX >= thisRegion -> x1 - cameraX) && (input.mouseY >= thisRegion -> y1 - cameraY) &&
   157be:	/--|-------> move.l 1a760 <input+0xa>,d0
   157c4:	|  |         movea.l (sp),a0
   157c6:	|  |         movea.l (a0),a0
   157c8:	|  |         move.l 1a85e <cameraX>,d1
   157ce:	|  |         suba.l d1,a0
   157d0:	|  |         cmpa.l d0,a0
   157d2:	|  |  /----- bgt.s 15824 <getOverRegion+0x70>
   157d4:	|  |  |      move.l 1a764 <input+0xe>,d0
   157da:	|  |  |      movea.l (sp),a0
   157dc:	|  |  |      movea.l 4(a0),a0
   157e0:	|  |  |      move.l 1a862 <cameraY>,d1
   157e6:	|  |  |      suba.l d1,a0
   157e8:	|  |  |      cmpa.l d0,a0
   157ea:	|  |  +----- bgt.s 15824 <getOverRegion+0x70>
			 (input.mouseX <= thisRegion -> x2 - cameraX) && (input.mouseY <= thisRegion -> y2 - cameraY)) {
   157ec:	|  |  |      move.l 1a760 <input+0xa>,d0
   157f2:	|  |  |      movea.l (sp),a0
   157f4:	|  |  |      movea.l 8(a0),a0
   157f8:	|  |  |      move.l 1a85e <cameraX>,d1
   157fe:	|  |  |      suba.l d1,a0
		if ((input.mouseX >= thisRegion -> x1 - cameraX) && (input.mouseY >= thisRegion -> y1 - cameraY) &&
   15800:	|  |  |      cmpa.l d0,a0
   15802:	|  |  +----- blt.s 15824 <getOverRegion+0x70>
			 (input.mouseX <= thisRegion -> x2 - cameraX) && (input.mouseY <= thisRegion -> y2 - cameraY)) {
   15804:	|  |  |      move.l 1a764 <input+0xe>,d0
   1580a:	|  |  |      movea.l (sp),a0
   1580c:	|  |  |      movea.l 12(a0),a0
   15810:	|  |  |      move.l 1a862 <cameraY>,d1
   15816:	|  |  |      suba.l d1,a0
   15818:	|  |  |      cmpa.l d0,a0
   1581a:	|  |  +----- blt.s 15824 <getOverRegion+0x70>
			overRegion = thisRegion;
   1581c:	|  |  |      move.l (sp),1a8b8 <overRegion>
			return;
   15822:	|  |  |  /-- bra.s 15836 <getOverRegion+0x82>
		}
		thisRegion = thisRegion -> next;
   15824:	|  |  \--|-> movea.l (sp),a0
   15826:	|  |     |   move.l 32(a0),(sp)
	while (thisRegion) {
   1582a:	|  \-----|-> tst.l (sp)
   1582c:	\--------|-- bne.s 157be <getOverRegion+0xa>
	}
	overRegion = NULL;
   1582e:	         |   clr.l 1a8b8 <overRegion>
	return;
   15834:	         |   nop
}
   15836:	         \-> addq.l #4,sp
   15838:	             rts

0001583a <getRegionForObject>:


struct screenRegion * getRegionForObject (int obj) {
   1583a:	             subq.l #4,sp
	struct screenRegion * thisRegion = allScreenRegions;
   1583c:	             move.l 1a8b4 <allScreenRegions>,(sp)

	while (thisRegion) {
   15842:	   /-------- bra.s 1585e <getRegionForObject+0x24>
		if (obj == thisRegion -> thisType -> objectNum) {
   15844:	/--|-------> movea.l (sp),a0
   15846:	|  |         movea.l 28(a0),a0
   1584a:	|  |         move.l 4(a0),d0
   1584e:	|  |         cmp.l 8(sp),d0
   15852:	|  |     /-- bne.s 15858 <getRegionForObject+0x1e>
			return thisRegion;
   15854:	|  |     |   move.l (sp),d0
   15856:	|  |  /--|-- bra.s 15864 <getRegionForObject+0x2a>
		}
		thisRegion = thisRegion -> next;
   15858:	|  |  |  \-> movea.l (sp),a0
   1585a:	|  |  |      move.l 32(a0),(sp)
	while (thisRegion) {
   1585e:	|  \--|----> tst.l (sp)
   15860:	\-----|----- bne.s 15844 <getRegionForObject+0xa>
	}

	return NULL;
   15862:	      |      moveq #0,d0
}
   15864:	      \----> addq.l #4,sp
   15866:	             rts

00015868 <killAllRegions>:

void killAllRegions () {
   15868:	       subq.l #8,sp
   1586a:	       move.l a6,-(sp)
	struct screenRegion * killRegion;
	while (allScreenRegions) {
   1586c:	   /-- bra.s 158ae <killAllRegions+0x46>
		killRegion = allScreenRegions;
   1586e:	/--|-> move.l 1a8b4 <allScreenRegions>,8(sp)
		allScreenRegions = allScreenRegions -> next;
   15876:	|  |   movea.l 1a8b4 <allScreenRegions>,a0
   1587c:	|  |   move.l 32(a0),d0
   15880:	|  |   move.l d0,1a8b4 <allScreenRegions>
		removeObjectType (killRegion -> thisType);
   15886:	|  |   movea.l 8(sp),a0
   1588a:	|  |   move.l 28(a0),d0
   1588e:	|  |   move.l d0,-(sp)
   15890:	|  |   jsr d6fe <removeObjectType>
   15896:	|  |   addq.l #4,sp
		FreeVec(killRegion);
   15898:	|  |   move.l 8(sp),4(sp)
   1589e:	|  |   move.l 1a7a4 <SysBase>,d0
   158a4:	|  |   movea.l d0,a6
   158a6:	|  |   movea.l 4(sp),a1
   158aa:	|  |   jsr -690(a6)
	while (allScreenRegions) {
   158ae:	|  \-> move.l 1a8b4 <allScreenRegions>,d0
   158b4:	\----- bne.s 1586e <killAllRegions+0x6>
	}
	overRegion = NULL;
   158b6:	       clr.l 1a8b8 <overRegion>
}
   158bc:	       nop
   158be:	       movea.l (sp)+,a6
   158c0:	       addq.l #8,sp
   158c2:	       rts

000158c4 <loadRegions>:

void loadRegions (BPTR fp) {
   158c4:	       lea -24(sp),sp
   158c8:	       move.l a6,-(sp)
	int numRegions = get2bytes (fp);
   158ca:	       move.l 32(sp),-(sp)
   158ce:	       jsr 6bc <get2bytes>
   158d4:	       addq.l #4,sp
   158d6:	       move.l d0,24(sp)

	struct screenRegion * newRegion;
	struct screenRegion * * pointy = & allScreenRegions;
   158da:	       move.l #108724,20(sp)

	while (numRegions --) {
   158e2:	   /-- bra.w 159c0 <loadRegions+0xfc>
		newRegion = AllocVec( sizeof(struct screenRegion),MEMF_ANY);
   158e6:	/--|-> moveq #36,d0
   158e8:	|  |   move.l d0,16(sp)
   158ec:	|  |   clr.l 12(sp)
   158f0:	|  |   move.l 1a7a4 <SysBase>,d0
   158f6:	|  |   movea.l d0,a6
   158f8:	|  |   move.l 16(sp),d0
   158fc:	|  |   move.l 12(sp),d1
   15900:	|  |   jsr -684(a6)
   15904:	|  |   move.l d0,8(sp)
   15908:	|  |   move.l 8(sp),d0
   1590c:	|  |   move.l d0,4(sp)
		* pointy = newRegion;
   15910:	|  |   movea.l 20(sp),a0
   15914:	|  |   move.l 4(sp),(a0)
		pointy = & (newRegion -> next);
   15918:	|  |   moveq #32,d1
   1591a:	|  |   add.l 4(sp),d1
   1591e:	|  |   move.l d1,20(sp)

		newRegion -> x1 = get2bytes (fp);
   15922:	|  |   move.l 32(sp),-(sp)
   15926:	|  |   jsr 6bc <get2bytes>
   1592c:	|  |   addq.l #4,sp
   1592e:	|  |   movea.l 4(sp),a0
   15932:	|  |   move.l d0,(a0)
		newRegion -> y1 = get2bytes (fp);
   15934:	|  |   move.l 32(sp),-(sp)
   15938:	|  |   jsr 6bc <get2bytes>
   1593e:	|  |   addq.l #4,sp
   15940:	|  |   movea.l 4(sp),a0
   15944:	|  |   move.l d0,4(a0)
		newRegion -> x2 = get2bytes (fp);
   15948:	|  |   move.l 32(sp),-(sp)
   1594c:	|  |   jsr 6bc <get2bytes>
   15952:	|  |   addq.l #4,sp
   15954:	|  |   movea.l 4(sp),a0
   15958:	|  |   move.l d0,8(a0)
		newRegion -> y2 = get2bytes (fp);
   1595c:	|  |   move.l 32(sp),-(sp)
   15960:	|  |   jsr 6bc <get2bytes>
   15966:	|  |   addq.l #4,sp
   15968:	|  |   movea.l 4(sp),a0
   1596c:	|  |   move.l d0,12(a0)
		newRegion -> sX = get2bytes (fp);
   15970:	|  |   move.l 32(sp),-(sp)
   15974:	|  |   jsr 6bc <get2bytes>
   1597a:	|  |   addq.l #4,sp
   1597c:	|  |   movea.l 4(sp),a0
   15980:	|  |   move.l d0,16(a0)
		newRegion -> sY = get2bytes (fp);
   15984:	|  |   move.l 32(sp),-(sp)
   15988:	|  |   jsr 6bc <get2bytes>
   1598e:	|  |   addq.l #4,sp
   15990:	|  |   movea.l 4(sp),a0
   15994:	|  |   move.l d0,20(a0)
		newRegion -> di = get2bytes (fp);
   15998:	|  |   move.l 32(sp),-(sp)
   1599c:	|  |   jsr 6bc <get2bytes>
   159a2:	|  |   addq.l #4,sp
   159a4:	|  |   movea.l 4(sp),a0
   159a8:	|  |   move.l d0,24(a0)
		newRegion -> thisType = loadObjectRef (fp);
   159ac:	|  |   move.l 32(sp),-(sp)
   159b0:	|  |   jsr d3f4 <loadObjectRef>
   159b6:	|  |   addq.l #4,sp
   159b8:	|  |   movea.l 4(sp),a0
   159bc:	|  |   move.l d0,28(a0)
	while (numRegions --) {
   159c0:	|  \-> move.l 24(sp),d0
   159c4:	|      move.l d0,d1
   159c6:	|      subq.l #1,d1
   159c8:	|      move.l d1,24(sp)
   159cc:	|      tst.l d0
   159ce:	\----- bne.w 158e6 <loadRegions+0x22>
	}
	* pointy = NULL;
   159d2:	       movea.l 20(sp),a0
   159d6:	       clr.l (a0)
}
   159d8:	       nop
   159da:	       movea.l (sp)+,a6
   159dc:	       lea 24(sp),sp
   159e0:	       rts

000159e2 <removeScreenRegion>:

void removeScreenRegion (int objectNum) {
   159e2:	             lea -12(sp),sp
   159e6:	             move.l a6,-(sp)
    struct screenRegion ** huntRegion = &allScreenRegions;
   159e8:	             move.l #108724,12(sp)
    struct screenRegion * killMe;

    while (*huntRegion) {
   159f0:	   /-------- bra.s 15a6a <removeScreenRegion+0x88>
        if ((*huntRegion)->thisType->objectNum == objectNum) {
   159f2:	/--|-------> movea.l 12(sp),a0
   159f6:	|  |         movea.l (a0),a0
   159f8:	|  |         movea.l 28(a0),a0
   159fc:	|  |         move.l 4(a0),d0
   15a00:	|  |         cmp.l 20(sp),d0
   15a04:	|  |  /----- bne.s 15a5c <removeScreenRegion+0x7a>
            killMe = *huntRegion;
   15a06:	|  |  |      movea.l 12(sp),a0
   15a0a:	|  |  |      move.l (a0),8(sp)
            *huntRegion = killMe->next;
   15a0e:	|  |  |      movea.l 8(sp),a0
   15a12:	|  |  |      move.l 32(a0),d0
   15a16:	|  |  |      movea.l 12(sp),a0
   15a1a:	|  |  |      move.l d0,(a0)
            removeObjectType(killMe->thisType);
   15a1c:	|  |  |      movea.l 8(sp),a0
   15a20:	|  |  |      move.l 28(a0),d0
   15a24:	|  |  |      move.l d0,-(sp)
   15a26:	|  |  |      jsr d6fe <removeObjectType>
   15a2c:	|  |  |      addq.l #4,sp
            if (killMe == overRegion) overRegion = NULL;
   15a2e:	|  |  |      move.l 1a8b8 <overRegion>,d0
   15a34:	|  |  |      cmp.l 8(sp),d0
   15a38:	|  |  |  /-- bne.s 15a40 <removeScreenRegion+0x5e>
   15a3a:	|  |  |  |   clr.l 1a8b8 <overRegion>
            FreeVec(killMe);
   15a40:	|  |  |  \-> move.l 8(sp),4(sp)
   15a46:	|  |  |      move.l 1a7a4 <SysBase>,d0
   15a4c:	|  |  |      movea.l d0,a6
   15a4e:	|  |  |      movea.l 4(sp),a1
   15a52:	|  |  |      jsr -690(a6)
            killMe = NULL;
   15a56:	|  |  |      clr.l 8(sp)
   15a5a:	|  +--|----- bra.s 15a6a <removeScreenRegion+0x88>
        } else {
            huntRegion = &((*huntRegion)->next);
   15a5c:	|  |  \----> movea.l 12(sp),a0
   15a60:	|  |         move.l (a0),d0
   15a62:	|  |         moveq #32,d1
   15a64:	|  |         add.l d0,d1
   15a66:	|  |         move.l d1,12(sp)
    while (*huntRegion) {
   15a6a:	|  \-------> movea.l 12(sp),a0
   15a6e:	|            move.l (a0),d0
   15a70:	\----------- bne.s 159f2 <removeScreenRegion+0x10>
        }
    }
}
   15a72:	             nop
   15a74:	             nop
   15a76:	             movea.l (sp)+,a6
   15a78:	             lea 12(sp),sp
   15a7c:	             rts

00015a7e <saveRegions>:

void saveRegions (BPTR fp) {
   15a7e:	       subq.l #8,sp
	int numRegions = 0;
   15a80:	       clr.l 4(sp)
	struct screenRegion * thisRegion = allScreenRegions;
   15a84:	       move.l 1a8b4 <allScreenRegions>,(sp)
	while (thisRegion) {
   15a8a:	   /-- bra.s 15a96 <saveRegions+0x18>
		thisRegion = thisRegion -> next;
   15a8c:	/--|-> movea.l (sp),a0
   15a8e:	|  |   move.l 32(a0),(sp)
		numRegions ++;
   15a92:	|  |   addq.l #1,4(sp)
	while (thisRegion) {
   15a96:	|  \-> tst.l (sp)
   15a98:	\----- bne.s 15a8c <saveRegions+0xe>
	}
	put2bytes (numRegions, fp);
   15a9a:	       move.l 12(sp),-(sp)
   15a9e:	       move.l 8(sp),-(sp)
   15aa2:	       jsr 8d0 <put2bytes>
   15aa8:	       addq.l #8,sp
	thisRegion = allScreenRegions;
   15aaa:	       move.l 1a8b4 <allScreenRegions>,(sp)
	while (thisRegion) {
   15ab0:	/----- bra.w 15b58 <saveRegions+0xda>
		put2bytes (thisRegion -> x1, fp);
   15ab4:	|  /-> movea.l (sp),a0
   15ab6:	|  |   move.l (a0),d0
   15ab8:	|  |   move.l 12(sp),-(sp)
   15abc:	|  |   move.l d0,-(sp)
   15abe:	|  |   jsr 8d0 <put2bytes>
   15ac4:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> y1, fp);
   15ac6:	|  |   movea.l (sp),a0
   15ac8:	|  |   move.l 4(a0),d0
   15acc:	|  |   move.l 12(sp),-(sp)
   15ad0:	|  |   move.l d0,-(sp)
   15ad2:	|  |   jsr 8d0 <put2bytes>
   15ad8:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> x2, fp);
   15ada:	|  |   movea.l (sp),a0
   15adc:	|  |   move.l 8(a0),d0
   15ae0:	|  |   move.l 12(sp),-(sp)
   15ae4:	|  |   move.l d0,-(sp)
   15ae6:	|  |   jsr 8d0 <put2bytes>
   15aec:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> y2, fp);
   15aee:	|  |   movea.l (sp),a0
   15af0:	|  |   move.l 12(a0),d0
   15af4:	|  |   move.l 12(sp),-(sp)
   15af8:	|  |   move.l d0,-(sp)
   15afa:	|  |   jsr 8d0 <put2bytes>
   15b00:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> sX, fp);
   15b02:	|  |   movea.l (sp),a0
   15b04:	|  |   move.l 16(a0),d0
   15b08:	|  |   move.l 12(sp),-(sp)
   15b0c:	|  |   move.l d0,-(sp)
   15b0e:	|  |   jsr 8d0 <put2bytes>
   15b14:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> sY, fp);
   15b16:	|  |   movea.l (sp),a0
   15b18:	|  |   move.l 20(a0),d0
   15b1c:	|  |   move.l 12(sp),-(sp)
   15b20:	|  |   move.l d0,-(sp)
   15b22:	|  |   jsr 8d0 <put2bytes>
   15b28:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> di, fp);
   15b2a:	|  |   movea.l (sp),a0
   15b2c:	|  |   move.l 24(a0),d0
   15b30:	|  |   move.l 12(sp),-(sp)
   15b34:	|  |   move.l d0,-(sp)
   15b36:	|  |   jsr 8d0 <put2bytes>
   15b3c:	|  |   addq.l #8,sp
		saveObjectRef (thisRegion -> thisType, fp);
   15b3e:	|  |   movea.l (sp),a0
   15b40:	|  |   move.l 28(a0),d0
   15b44:	|  |   move.l 12(sp),-(sp)
   15b48:	|  |   move.l d0,-(sp)
   15b4a:	|  |   jsr d79e <saveObjectRef>
   15b50:	|  |   addq.l #8,sp

		thisRegion = thisRegion -> next;
   15b52:	|  |   movea.l (sp),a0
   15b54:	|  |   move.l 32(a0),(sp)
	while (thisRegion) {
   15b58:	\--|-> tst.l (sp)
   15b5a:	   \-- bne.w 15ab4 <saveRegions+0x36>
	}
}
   15b5e:	       nop
   15b60:	       nop
   15b62:	       addq.l #8,sp
   15b64:	       rts

00015b66 <showBoxes>:

void showBoxes () {
   15b66:	       subq.l #4,sp
	struct screenRegion * huntRegion = allScreenRegions;
   15b68:	       move.l 1a8b4 <allScreenRegions>,(sp)

	while (huntRegion) {
   15b6e:	/----- bra.w 15c0a <showBoxes+0xa4>
		drawVerticalLine (huntRegion -> x1, huntRegion -> y1, huntRegion -> y2);
   15b72:	|  /-> movea.l (sp),a0
   15b74:	|  |   move.l 12(a0),d0
   15b78:	|  |   movea.l d0,a1
   15b7a:	|  |   movea.l (sp),a0
   15b7c:	|  |   move.l 4(a0),d0
   15b80:	|  |   move.l d0,d1
   15b82:	|  |   movea.l (sp),a0
   15b84:	|  |   move.l (a0),d0
   15b86:	|  |   move.l a1,-(sp)
   15b88:	|  |   move.l d1,-(sp)
   15b8a:	|  |   move.l d0,-(sp)
   15b8c:	|  |   jsr d082 <drawVerticalLine>
   15b92:	|  |   lea 12(sp),sp
		drawVerticalLine (huntRegion -> x2, huntRegion -> y1, huntRegion -> y2);
   15b96:	|  |   movea.l (sp),a0
   15b98:	|  |   move.l 12(a0),d0
   15b9c:	|  |   movea.l d0,a1
   15b9e:	|  |   movea.l (sp),a0
   15ba0:	|  |   move.l 4(a0),d0
   15ba4:	|  |   move.l d0,d1
   15ba6:	|  |   movea.l (sp),a0
   15ba8:	|  |   move.l 8(a0),d0
   15bac:	|  |   move.l a1,-(sp)
   15bae:	|  |   move.l d1,-(sp)
   15bb0:	|  |   move.l d0,-(sp)
   15bb2:	|  |   jsr d082 <drawVerticalLine>
   15bb8:	|  |   lea 12(sp),sp
		drawHorizontalLine (huntRegion -> x1, huntRegion -> y1, huntRegion -> x2);
   15bbc:	|  |   movea.l (sp),a0
   15bbe:	|  |   move.l 8(a0),d0
   15bc2:	|  |   movea.l d0,a1
   15bc4:	|  |   movea.l (sp),a0
   15bc6:	|  |   move.l 4(a0),d0
   15bca:	|  |   move.l d0,d1
   15bcc:	|  |   movea.l (sp),a0
   15bce:	|  |   move.l (a0),d0
   15bd0:	|  |   move.l a1,-(sp)
   15bd2:	|  |   move.l d1,-(sp)
   15bd4:	|  |   move.l d0,-(sp)
   15bd6:	|  |   jsr d05c <drawHorizontalLine>
   15bdc:	|  |   lea 12(sp),sp
		drawHorizontalLine (huntRegion -> x1, huntRegion -> y2, huntRegion -> x2);
   15be0:	|  |   movea.l (sp),a0
   15be2:	|  |   move.l 8(a0),d0
   15be6:	|  |   movea.l d0,a1
   15be8:	|  |   movea.l (sp),a0
   15bea:	|  |   move.l 12(a0),d0
   15bee:	|  |   move.l d0,d1
   15bf0:	|  |   movea.l (sp),a0
   15bf2:	|  |   move.l (a0),d0
   15bf4:	|  |   move.l a1,-(sp)
   15bf6:	|  |   move.l d1,-(sp)
   15bf8:	|  |   move.l d0,-(sp)
   15bfa:	|  |   jsr d05c <drawHorizontalLine>
   15c00:	|  |   lea 12(sp),sp
		huntRegion = huntRegion -> next;
   15c04:	|  |   movea.l (sp),a0
   15c06:	|  |   move.l 32(a0),(sp)
	while (huntRegion) {
   15c0a:	\--|-> tst.l (sp)
   15c0c:	   \-- bne.w 15b72 <showBoxes+0xc>
	}
   15c10:	       nop
   15c12:	       nop
   15c14:	       addq.l #4,sp
   15c16:	       rts

00015c18 <rand>:
// Define constants for LCG
#define MULTIPLIER 1103515245UL
#define INCREMENT 12345UL
#define MODULUS 0x7FFFFFFFUL

ULONG rand() {
   15c18:	       lea -88(sp),sp
   15c1c:	       move.l a6,-(sp)
    struct timerequest *timereq;

    struct MsgPort *timerport = CreateMsgPort();
   15c1e:	       move.l 1a7a4 <SysBase>,d0
   15c24:	       movea.l d0,a6
   15c26:	       jsr -666(a6)
   15c2a:	       move.l d0,88(sp)
   15c2e:	       move.l 88(sp),d0
   15c32:	       move.l d0,84(sp)

    timereq = CreateIORequest(timerport, sizeof(struct timerequest));
   15c36:	       move.l 84(sp),80(sp)
   15c3c:	       moveq #40,d0
   15c3e:	       move.l d0,76(sp)
   15c42:	       move.l 1a7a4 <SysBase>,d0
   15c48:	       movea.l d0,a6
   15c4a:	       movea.l 80(sp),a0
   15c4e:	       move.l 76(sp),d0
   15c52:	       jsr -654(a6)
   15c56:	       move.l d0,72(sp)
   15c5a:	       move.l 72(sp),d0
   15c5e:	       move.l d0,68(sp)
    struct IORequest* ioreq = (struct IORequest*)timereq;
   15c62:	       move.l 68(sp),64(sp)
    if (OpenDevice(TIMERNAME, UNIT_MICROHZ, ioreq, 0)) {
   15c68:	       move.l #105993,60(sp)
   15c70:	       clr.l 56(sp)
   15c74:	       move.l 64(sp),52(sp)
   15c7a:	       clr.l 48(sp)
   15c7e:	       move.l 1a7a4 <SysBase>,d0
   15c84:	       movea.l d0,a6
   15c86:	       movea.l 60(sp),a0
   15c8a:	       move.l 56(sp),d0
   15c8e:	       movea.l 52(sp),a1
   15c92:	       move.l 48(sp),d1
   15c96:	       jsr -444(a6)
   15c9a:	       move.b d0,47(sp)
   15c9e:	       move.b 47(sp),d0
   15ca2:	   /-- beq.s 15cb8 <rand+0xa0>
        KPrintF("Unable to open timer device\n");
   15ca4:	   |   pea 19e16 <graphics.c.1c13408a+0x1d0>
   15caa:	   |   jsr 1703c <KPrintF>
   15cb0:	   |   addq.l #4,sp
        return 0;
   15cb2:	   |   moveq #0,d0
   15cb4:	/--|-- bra.w 15d72 <rand+0x15a>
    }
    struct Device* TimerBase = ioreq->io_Device;
   15cb8:	|  \-> movea.l 64(sp),a0
   15cbc:	|      move.l 20(a0),42(sp)

    struct EClockVal eclock;
    ReadEClock(&eclock);
   15cc2:	|      lea 92(sp),a0
   15cc6:	|      lea -86(a0),a0
   15cca:	|      move.l a0,38(sp)
   15cce:	|      movea.l 42(sp),a6
   15cd2:	|      movea.l 38(sp),a0
   15cd6:	|      jsr -60(a6)
   15cda:	|      move.l d0,34(sp)

    ULONG seed = eclock.ev_lo; // Using the lower part of EClock value as seed
   15cde:	|      move.l 10(sp),30(sp)
    seed = (seed * MULTIPLIER + INCREMENT) & 0x7fffffff; // Simple LCG
   15ce4:	|      move.l #1103515245,-(sp)
   15cea:	|      move.l 34(sp),-(sp)
   15cee:	|      jsr 179c8 <__mulsi3>
   15cf4:	|      addq.l #8,sp
   15cf6:	|      addi.l #12345,d0
   15cfc:	|      move.l d0,d1
   15cfe:	|      bclr #31,d1
   15d02:	|      move.l d1,30(sp)

    // Transform the seed to a random number
    int random_number = seed % 100; // For example, a random number between 0 and 99
   15d06:	|      move.l 30(sp),d0
   15d0a:	|      pea 64 <_start+0x64>
   15d0e:	|      move.l d0,-(sp)
   15d10:	|      jsr 17aa2 <__umodsi3>
   15d16:	|      addq.l #8,sp
   15d18:	|      move.l d0,26(sp)
    KPrintF("Random Number: %d\n", random_number);
   15d1c:	|      move.l 26(sp),-(sp)
   15d20:	|      pea 19e33 <graphics.c.1c13408a+0x1ed>
   15d26:	|      jsr 1703c <KPrintF>
   15d2c:	|      addq.l #8,sp

    CloseDevice(ioreq);
   15d2e:	|      move.l 64(sp),22(sp)
   15d34:	|      move.l 1a7a4 <SysBase>,d0
   15d3a:	|      movea.l d0,a6
   15d3c:	|      movea.l 22(sp),a1
   15d40:	|      jsr -450(a6)
    DeleteIORequest(ioreq);
   15d44:	|      move.l 64(sp),18(sp)
   15d4a:	|      move.l 1a7a4 <SysBase>,d0
   15d50:	|      movea.l d0,a6
   15d52:	|      movea.l 18(sp),a0
   15d56:	|      jsr -660(a6)
    DeleteMsgPort(timerport);
   15d5a:	|      move.l 84(sp),14(sp)
   15d60:	|      move.l 1a7a4 <SysBase>,d0
   15d66:	|      movea.l d0,a6
   15d68:	|      movea.l 14(sp),a0
   15d6c:	|      jsr -672(a6)
    return 0;
   15d70:	|      moveq #0,d0
   15d72:	\----> movea.l (sp)+,a6
   15d74:	       lea 88(sp),sp
   15d78:	       rts

00015d7a <loadBankForAnim>:
#include "sprbanks.h"
#include "support/gcc8_c_support.h"

struct loadedSpriteBank * allLoadedBanks = NULL;

struct loadedSpriteBank * loadBankForAnim (int ID) {
   15d7a:	             lea -20(sp),sp
   15d7e:	             move.l a6,-(sp)
	// KPrintF("loadBankForAnim: Looking for sprite bank with ID %d\n", ID);	
	struct loadedSpriteBank * returnMe = allLoadedBanks;
   15d80:	             move.l 1a8bc <allLoadedBanks>,20(sp)
	while (returnMe) {
   15d88:	      /----- bra.s 15dba <loadBankForAnim+0x40>
		if (returnMe->ID == ID) {
   15d8a:	   /--|----> movea.l 20(sp),a0
   15d8e:	   |  |      move.l (a0),d0
   15d90:	   |  |      cmp.l 28(sp),d0
   15d94:	   |  |  /-- bne.s 15db0 <loadBankForAnim+0x36>
			// KPrintF("loadBankForAnim: Found existing sprite bank with ID %d\n", returnMe->ID);
			returnMe->timesUsed++;
   15d96:	   |  |  |   movea.l 20(sp),a0
   15d9a:	   |  |  |   move.l 4(a0),d0
   15d9e:	   |  |  |   addq.l #1,d0
   15da0:	   |  |  |   movea.l 20(sp),a0
   15da4:	   |  |  |   move.l d0,4(a0)
			return returnMe;			
   15da8:	   |  |  |   move.l 20(sp),d0
   15dac:	/--|--|--|-- bra.w 15e4e <loadBankForAnim+0xd4>
		}		
		returnMe = returnMe->next;
   15db0:	|  |  |  \-> movea.l 20(sp),a0
   15db4:	|  |  |      move.l 22(a0),20(sp)
	while (returnMe) {
   15dba:	|  |  \----> tst.l 20(sp)
   15dbe:	|  \-------- bne.s 15d8a <loadBankForAnim+0x10>
	}
	returnMe = AllocVec(sizeof(struct loadedSpriteBank), MEMF_ANY);
   15dc0:	|            moveq #26,d0
   15dc2:	|            move.l d0,16(sp)
   15dc6:	|            clr.l 12(sp)
   15dca:	|            move.l 1a7a4 <SysBase>,d0
   15dd0:	|            movea.l d0,a6
   15dd2:	|            move.l 16(sp),d0
   15dd6:	|            move.l 12(sp),d1
   15dda:	|            jsr -684(a6)
   15dde:	|            move.l d0,8(sp)
   15de2:	|            move.l 8(sp),d0
   15de6:	|            move.l d0,20(sp)
	// KPrintF("loadBankForAnim: No existing sprite bank with ID %d\n", ID);
	if (returnMe) {
   15dea:	|     /----- beq.s 15e4c <loadBankForAnim+0xd2>
		returnMe->ID = ID;
   15dec:	|     |      movea.l 20(sp),a0
   15df0:	|     |      move.l 28(sp),(a0)
		if (loadSpriteBank(ID, &returnMe->bank)) {
   15df4:	|     |      move.l 20(sp),d0
   15df8:	|     |      addq.l #8,d0
   15dfa:	|     |      move.l d0,-(sp)
   15dfc:	|     |      move.l 32(sp),-(sp)
   15e00:	|     |      jsr 8922 <loadSpriteBank>
   15e06:	|     |      addq.l #8,sp
   15e08:	|     |      tst.w d0
   15e0a:	|     |  /-- beq.s 15e32 <loadBankForAnim+0xb8>
			returnMe->timesUsed = 1;
   15e0c:	|     |  |   movea.l 20(sp),a0
   15e10:	|     |  |   moveq #1,d0
   15e12:	|     |  |   move.l d0,4(a0)
			returnMe->next = allLoadedBanks;
   15e16:	|     |  |   move.l 1a8bc <allLoadedBanks>,d0
   15e1c:	|     |  |   movea.l 20(sp),a0
   15e20:	|     |  |   move.l d0,22(a0)
			allLoadedBanks = returnMe;
   15e24:	|     |  |   move.l 20(sp),1a8bc <allLoadedBanks>
			//KPrintF("loadBankForAnim: New sprite bank created OK\n");
			return returnMe;
   15e2c:	|     |  |   move.l 20(sp),d0
   15e30:	+-----|--|-- bra.s 15e4e <loadBankForAnim+0xd4>
		} else {
			//KPrintF("loadBankForAnim: I guess I couldn't load the sprites...\n");
			FreeVec(returnMe);
   15e32:	|     |  \-> move.l 20(sp),4(sp)
   15e38:	|     |      move.l 1a7a4 <SysBase>,d0
   15e3e:	|     |      movea.l d0,a6
   15e40:	|     |      movea.l 4(sp),a1
   15e44:	|     |      jsr -690(a6)
			return NULL;
   15e48:	|     |      moveq #0,d0
   15e4a:	+-----|----- bra.s 15e4e <loadBankForAnim+0xd4>
		}
	} else return NULL;
   15e4c:	|     \----> moveq #0,d0
}
   15e4e:	\----------> movea.l (sp)+,a6
   15e50:	             lea 20(sp),sp
   15e54:	             rts

00015e56 <closestPointOnLine>:
#include "support/gcc8_c_support.h"
#include "line.h"

struct flor * currentFloor = NULL;

BOOL closestPointOnLine (int * closestX, int * closestY, int x1, int y1, int x2, int y2, int xP, int yP) {
   15e56:	       lea -60(sp),sp
   15e5a:	       move.l d3,-(sp)
   15e5c:	       move.l d2,-(sp)
 	DOUBLE xDiff = x2 - x1;
   15e5e:	       move.l 88(sp),d0
   15e62:	       sub.l 80(sp),d0
   15e66:	       move.l d0,-(sp)
   15e68:	       jsr 1742e <__floatsidf>
   15e6e:	       addq.l #4,sp
   15e70:	       move.l d0,32(sp)
   15e74:	       move.l d1,36(sp)
   15e78:	       move.l 32(sp),60(sp)
   15e7e:	       move.l 36(sp),64(sp)
	int yDiff = y2 - y1;
   15e84:	       move.l 92(sp),d0
   15e88:	       sub.l 84(sp),d0
   15e8c:	       move.l d0,56(sp)

	DOUBLE m = xDiff * (xP - x1) + yDiff * (yP - y1);
   15e90:	       move.l 96(sp),d0
   15e94:	       sub.l 80(sp),d0
   15e98:	       move.l d0,-(sp)
   15e9a:	       jsr 1742e <__floatsidf>
   15ea0:	       addq.l #4,sp
   15ea2:	       move.l 64(sp),-(sp)
   15ea6:	       move.l 64(sp),-(sp)
   15eaa:	       move.l d1,-(sp)
   15eac:	       move.l d0,-(sp)
   15eae:	       jsr 174be <__muldf3>
   15eb4:	       lea 16(sp),sp
   15eb8:	       move.l d0,d2
   15eba:	       move.l d1,d3
   15ebc:	       move.l 100(sp),d0
   15ec0:	       sub.l 84(sp),d0
   15ec4:	       move.l 56(sp),-(sp)
   15ec8:	       move.l d0,-(sp)
   15eca:	       jsr 179c8 <__mulsi3>
   15ed0:	       addq.l #8,sp
   15ed2:	       move.l d0,-(sp)
   15ed4:	       jsr 1742e <__floatsidf>
   15eda:	       addq.l #4,sp
   15edc:	       move.l d1,-(sp)
   15ede:	       move.l d0,-(sp)
   15ee0:	       move.l d3,-(sp)
   15ee2:	       move.l d2,-(sp)
   15ee4:	       jsr 17260 <__adddf3>
   15eea:	       lea 16(sp),sp
   15eee:	       move.l d0,24(sp)
   15ef2:	       move.l d1,28(sp)
   15ef6:	       move.l 24(sp),48(sp)
   15efc:	       move.l 28(sp),52(sp)
	m /= (xDiff * xDiff) + (yDiff * yDiff);
   15f02:	       move.l 64(sp),-(sp)
   15f06:	       move.l 64(sp),-(sp)
   15f0a:	       move.l 72(sp),-(sp)
   15f0e:	       move.l 72(sp),-(sp)
   15f12:	       jsr 174be <__muldf3>
   15f18:	       lea 16(sp),sp
   15f1c:	       move.l d0,d2
   15f1e:	       move.l d1,d3
   15f20:	       move.l 56(sp),-(sp)
   15f24:	       move.l 60(sp),-(sp)
   15f28:	       jsr 179c8 <__mulsi3>
   15f2e:	       addq.l #8,sp
   15f30:	       move.l d0,-(sp)
   15f32:	       jsr 1742e <__floatsidf>
   15f38:	       addq.l #4,sp
   15f3a:	       move.l d1,-(sp)
   15f3c:	       move.l d0,-(sp)
   15f3e:	       move.l d3,-(sp)
   15f40:	       move.l d2,-(sp)
   15f42:	       jsr 17260 <__adddf3>
   15f48:	       lea 16(sp),sp
   15f4c:	       move.l d1,-(sp)
   15f4e:	       move.l d0,-(sp)
   15f50:	       move.l 60(sp),-(sp)
   15f54:	       move.l 60(sp),-(sp)
   15f58:	       jsr 172c2 <__divdf3>
   15f5e:	       lea 16(sp),sp
   15f62:	       move.l d0,16(sp)
   15f66:	       move.l d1,20(sp)
   15f6a:	       move.l 16(sp),48(sp)
   15f70:	       move.l 20(sp),52(sp)

	if (m < 0) {		
   15f76:	       clr.l -(sp)
   15f78:	       clr.l -(sp)
   15f7a:	       move.l 60(sp),-(sp)
   15f7e:	       move.l 60(sp),-(sp)
   15f82:	       jsr 17646 <__ltdf2>
   15f88:	       lea 16(sp),sp
   15f8c:	       tst.l d0
   15f8e:	   /-- bge.s 15fa4 <closestPointOnLine+0x14e>
		*closestX = x1;
   15f90:	   |   movea.l 72(sp),a0
   15f94:	   |   move.l 80(sp),(a0)
		*closestY = y1;
   15f98:	   |   movea.l 76(sp),a0
   15f9c:	   |   move.l 84(sp),(a0)
   15fa0:	/--|-- bra.w 16072 <closestPointOnLine+0x21c>
	} else if (m > 1) {
   15fa4:	|  \-> clr.l -(sp)
   15fa6:	|      move.l #1072693248,-(sp)
   15fac:	|      move.l 60(sp),-(sp)
   15fb0:	|      move.l 60(sp),-(sp)
   15fb4:	|      jsr 1758c <__gtdf2>
   15fba:	|      lea 16(sp),sp
   15fbe:	|      tst.l d0
   15fc0:	|  /-- ble.s 15fd6 <closestPointOnLine+0x180>
		*closestX = x2;
   15fc2:	|  |   movea.l 72(sp),a0
   15fc6:	|  |   move.l 88(sp),(a0)
		*closestY = y2;
   15fca:	|  |   movea.l 76(sp),a0
   15fce:	|  |   move.l 92(sp),(a0)
   15fd2:	+--|-- bra.w 16072 <closestPointOnLine+0x21c>
	} else {
		DOUBLE tmp = m * xDiff; 
   15fd6:	|  \-> move.l 64(sp),-(sp)
   15fda:	|      move.l 64(sp),-(sp)
   15fde:	|      move.l 60(sp),-(sp)
   15fe2:	|      move.l 60(sp),-(sp)
   15fe6:	|      jsr 174be <__muldf3>
   15fec:	|      lea 16(sp),sp
   15ff0:	|      move.l d0,8(sp)
   15ff4:	|      move.l d1,12(sp)
   15ff8:	|      move.l 8(sp),40(sp)
   15ffe:	|      move.l 12(sp),44(sp)
		*closestX = (int) tmp;
   16004:	|      move.l 44(sp),-(sp)
   16008:	|      move.l 44(sp),-(sp)
   1600c:	|      jsr 173d0 <__fixdfsi>
   16012:	|      addq.l #8,sp
   16014:	|      movea.l 72(sp),a0
   16018:	|      move.l d0,(a0)
		*closestX += x1;
   1601a:	|      movea.l 72(sp),a0
   1601e:	|      move.l (a0),d0
   16020:	|      add.l 80(sp),d0
   16024:	|      movea.l 72(sp),a0
   16028:	|      move.l d0,(a0)
		*closestY = m * yDiff;
   1602a:	|      move.l 56(sp),-(sp)
   1602e:	|      jsr 1742e <__floatsidf>
   16034:	|      addq.l #4,sp
   16036:	|      move.l 52(sp),-(sp)
   1603a:	|      move.l 52(sp),-(sp)
   1603e:	|      move.l d1,-(sp)
   16040:	|      move.l d0,-(sp)
   16042:	|      jsr 174be <__muldf3>
   16048:	|      lea 16(sp),sp
   1604c:	|      move.l d1,-(sp)
   1604e:	|      move.l d0,-(sp)
   16050:	|      jsr 173d0 <__fixdfsi>
   16056:	|      addq.l #8,sp
   16058:	|      movea.l 76(sp),a0
   1605c:	|      move.l d0,(a0)
		*closestY += y1;
   1605e:	|      movea.l 76(sp),a0
   16062:	|      move.l (a0),d0
   16064:	|      add.l 84(sp),d0
   16068:	|      movea.l 76(sp),a0
   1606c:	|      move.l d0,(a0)
		return TRUE;
   1606e:	|      moveq #1,d0
   16070:	|  /-- bra.s 16074 <closestPointOnLine+0x21e>
	}
	return FALSE;
   16072:	\--|-> clr.w d0
}
   16074:	   \-> move.l (sp)+,d2
   16076:	       move.l (sp)+,d3
   16078:	       lea 60(sp),sp
   1607c:	       rts

0001607e <drawFloor>:

void drawFloor() {
   1607e:	                lea -12(sp),sp
   16082:	                move.l d3,-(sp)
   16084:	                move.l d2,-(sp)
    int i, j, nV;
    for (i = 0; i < currentFloor->numPolygons; i++) {
   16086:	                clr.l 16(sp)
   1608a:	   /----------- bra.w 1629e <drawFloor+0x220>
        nV = currentFloor->polygon[i].numVertices;
   1608e:	/--|----------> movea.l 1a8c0 <currentFloor>,a0
   16094:	|  |            move.l 12(a0),d1
   16098:	|  |            move.l 16(sp),d0
   1609c:	|  |            lsl.l #3,d0
   1609e:	|  |            movea.l d1,a0
   160a0:	|  |            adda.l d0,a0
   160a2:	|  |            move.l (a0),8(sp)
        if (nV > 1) {
   160a6:	|  |            moveq #1,d0
   160a8:	|  |            cmp.l 8(sp),d0
   160ac:	|  |  /-------- bge.w 1629a <drawFloor+0x21c>
            for (j = 1; j < nV; j++) {
   160b0:	|  |  |         moveq #1,d0
   160b2:	|  |  |         move.l d0,12(sp)
   160b6:	|  |  |     /-- bra.w 161b0 <drawFloor+0x132>
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].y,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].x,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].y);
   160ba:	|  |  |  /--|-> movea.l 1a8c0 <currentFloor>,a0
   160c0:	|  |  |  |  |   move.l 4(a0),d1
   160c4:	|  |  |  |  |   movea.l 1a8c0 <currentFloor>,a0
   160ca:	|  |  |  |  |   movea.l 12(a0),a0
   160ce:	|  |  |  |  |   move.l 16(sp),d0
   160d2:	|  |  |  |  |   lsl.l #3,d0
   160d4:	|  |  |  |  |   adda.l d0,a0
   160d6:	|  |  |  |  |   movea.l 4(a0),a0
   160da:	|  |  |  |  |   move.l 12(sp),d0
   160de:	|  |  |  |  |   add.l d0,d0
   160e0:	|  |  |  |  |   add.l d0,d0
   160e2:	|  |  |  |  |   adda.l d0,a0
   160e4:	|  |  |  |  |   move.l (a0),d0
   160e6:	|  |  |  |  |   lsl.l #3,d0
   160e8:	|  |  |  |  |   movea.l d1,a0
   160ea:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   160ec:	|  |  |  |  |   move.l 4(a0),d2
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].x,
   160f0:	|  |  |  |  |   movea.l 1a8c0 <currentFloor>,a0
   160f6:	|  |  |  |  |   move.l 4(a0),d1
   160fa:	|  |  |  |  |   movea.l 1a8c0 <currentFloor>,a0
   16100:	|  |  |  |  |   movea.l 12(a0),a0
   16104:	|  |  |  |  |   move.l 16(sp),d0
   16108:	|  |  |  |  |   lsl.l #3,d0
   1610a:	|  |  |  |  |   adda.l d0,a0
   1610c:	|  |  |  |  |   movea.l 4(a0),a0
   16110:	|  |  |  |  |   move.l 12(sp),d0
   16114:	|  |  |  |  |   add.l d0,d0
   16116:	|  |  |  |  |   add.l d0,d0
   16118:	|  |  |  |  |   adda.l d0,a0
   1611a:	|  |  |  |  |   move.l (a0),d0
   1611c:	|  |  |  |  |   lsl.l #3,d0
   1611e:	|  |  |  |  |   movea.l d1,a0
   16120:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   16122:	|  |  |  |  |   movea.l (a0),a1
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].y,
   16124:	|  |  |  |  |   movea.l 1a8c0 <currentFloor>,a0
   1612a:	|  |  |  |  |   move.l 4(a0),d1
   1612e:	|  |  |  |  |   movea.l 1a8c0 <currentFloor>,a0
   16134:	|  |  |  |  |   movea.l 12(a0),a0
   16138:	|  |  |  |  |   move.l 16(sp),d0
   1613c:	|  |  |  |  |   lsl.l #3,d0
   1613e:	|  |  |  |  |   adda.l d0,a0
   16140:	|  |  |  |  |   movea.l 4(a0),a0
   16144:	|  |  |  |  |   move.l 12(sp),d0
   16148:	|  |  |  |  |   addi.l #1073741823,d0
   1614e:	|  |  |  |  |   add.l d0,d0
   16150:	|  |  |  |  |   add.l d0,d0
   16152:	|  |  |  |  |   adda.l d0,a0
   16154:	|  |  |  |  |   move.l (a0),d0
   16156:	|  |  |  |  |   lsl.l #3,d0
   16158:	|  |  |  |  |   movea.l d1,a0
   1615a:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   1615c:	|  |  |  |  |   move.l 4(a0),d1
   16160:	|  |  |  |  |   movea.l 1a8c0 <currentFloor>,a0
   16166:	|  |  |  |  |   move.l 4(a0),d3
   1616a:	|  |  |  |  |   movea.l 1a8c0 <currentFloor>,a0
   16170:	|  |  |  |  |   movea.l 12(a0),a0
   16174:	|  |  |  |  |   move.l 16(sp),d0
   16178:	|  |  |  |  |   lsl.l #3,d0
   1617a:	|  |  |  |  |   adda.l d0,a0
   1617c:	|  |  |  |  |   movea.l 4(a0),a0
   16180:	|  |  |  |  |   move.l 12(sp),d0
   16184:	|  |  |  |  |   addi.l #1073741823,d0
   1618a:	|  |  |  |  |   add.l d0,d0
   1618c:	|  |  |  |  |   add.l d0,d0
   1618e:	|  |  |  |  |   adda.l d0,a0
   16190:	|  |  |  |  |   move.l (a0),d0
   16192:	|  |  |  |  |   lsl.l #3,d0
   16194:	|  |  |  |  |   movea.l d3,a0
   16196:	|  |  |  |  |   adda.l d0,a0
   16198:	|  |  |  |  |   move.l (a0),d0
   1619a:	|  |  |  |  |   move.l d2,-(sp)
   1619c:	|  |  |  |  |   move.l a1,-(sp)
   1619e:	|  |  |  |  |   move.l d1,-(sp)
   161a0:	|  |  |  |  |   move.l d0,-(sp)
   161a2:	|  |  |  |  |   jsr 3c22 <drawLine>
   161a8:	|  |  |  |  |   lea 16(sp),sp
            for (j = 1; j < nV; j++) {
   161ac:	|  |  |  |  |   addq.l #1,12(sp)
   161b0:	|  |  |  |  \-> move.l 12(sp),d0
   161b4:	|  |  |  |      cmp.l 8(sp),d0
   161b8:	|  |  |  \----- blt.w 160ba <drawFloor+0x3c>
            }
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].y,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].x,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].y);
   161bc:	|  |  |         movea.l 1a8c0 <currentFloor>,a0
   161c2:	|  |  |         move.l 4(a0),d1
   161c6:	|  |  |         movea.l 1a8c0 <currentFloor>,a0
   161cc:	|  |  |         movea.l 12(a0),a0
   161d0:	|  |  |         move.l 16(sp),d0
   161d4:	|  |  |         lsl.l #3,d0
   161d6:	|  |  |         adda.l d0,a0
   161d8:	|  |  |         movea.l 4(a0),a0
   161dc:	|  |  |         move.l 8(sp),d0
   161e0:	|  |  |         addi.l #1073741823,d0
   161e6:	|  |  |         add.l d0,d0
   161e8:	|  |  |         add.l d0,d0
   161ea:	|  |  |         adda.l d0,a0
   161ec:	|  |  |         move.l (a0),d0
   161ee:	|  |  |         lsl.l #3,d0
   161f0:	|  |  |         movea.l d1,a0
   161f2:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   161f4:	|  |  |         move.l 4(a0),d2
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].x,
   161f8:	|  |  |         movea.l 1a8c0 <currentFloor>,a0
   161fe:	|  |  |         move.l 4(a0),d1
   16202:	|  |  |         movea.l 1a8c0 <currentFloor>,a0
   16208:	|  |  |         movea.l 12(a0),a0
   1620c:	|  |  |         move.l 16(sp),d0
   16210:	|  |  |         lsl.l #3,d0
   16212:	|  |  |         adda.l d0,a0
   16214:	|  |  |         movea.l 4(a0),a0
   16218:	|  |  |         move.l 8(sp),d0
   1621c:	|  |  |         addi.l #1073741823,d0
   16222:	|  |  |         add.l d0,d0
   16224:	|  |  |         add.l d0,d0
   16226:	|  |  |         adda.l d0,a0
   16228:	|  |  |         move.l (a0),d0
   1622a:	|  |  |         lsl.l #3,d0
   1622c:	|  |  |         movea.l d1,a0
   1622e:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   16230:	|  |  |         movea.l (a0),a1
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].y,
   16232:	|  |  |         movea.l 1a8c0 <currentFloor>,a0
   16238:	|  |  |         move.l 4(a0),d1
   1623c:	|  |  |         movea.l 1a8c0 <currentFloor>,a0
   16242:	|  |  |         movea.l 12(a0),a0
   16246:	|  |  |         move.l 16(sp),d0
   1624a:	|  |  |         lsl.l #3,d0
   1624c:	|  |  |         adda.l d0,a0
   1624e:	|  |  |         movea.l 4(a0),a0
   16252:	|  |  |         move.l (a0),d0
   16254:	|  |  |         lsl.l #3,d0
   16256:	|  |  |         movea.l d1,a0
   16258:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   1625a:	|  |  |         move.l 4(a0),d1
   1625e:	|  |  |         movea.l 1a8c0 <currentFloor>,a0
   16264:	|  |  |         move.l 4(a0),d3
   16268:	|  |  |         movea.l 1a8c0 <currentFloor>,a0
   1626e:	|  |  |         movea.l 12(a0),a0
   16272:	|  |  |         move.l 16(sp),d0
   16276:	|  |  |         lsl.l #3,d0
   16278:	|  |  |         adda.l d0,a0
   1627a:	|  |  |         movea.l 4(a0),a0
   1627e:	|  |  |         move.l (a0),d0
   16280:	|  |  |         lsl.l #3,d0
   16282:	|  |  |         movea.l d3,a0
   16284:	|  |  |         adda.l d0,a0
   16286:	|  |  |         move.l (a0),d0
   16288:	|  |  |         move.l d2,-(sp)
   1628a:	|  |  |         move.l a1,-(sp)
   1628c:	|  |  |         move.l d1,-(sp)
   1628e:	|  |  |         move.l d0,-(sp)
   16290:	|  |  |         jsr 3c22 <drawLine>
   16296:	|  |  |         lea 16(sp),sp
    for (i = 0; i < currentFloor->numPolygons; i++) {
   1629a:	|  |  \-------> addq.l #1,16(sp)
   1629e:	|  \----------> movea.l 1a8c0 <currentFloor>,a0
   162a4:	|               move.l 8(a0),d0
   162a8:	|               cmp.l 16(sp),d0
   162ac:	\-------------- bgt.w 1608e <drawFloor+0x10>
        }
    }
}
   162b0:	                nop
   162b2:	                nop
   162b4:	                move.l (sp)+,d2
   162b6:	                move.l (sp)+,d3
   162b8:	                lea 12(sp),sp
   162bc:	                rts

000162be <getMatchingCorners>:

BOOL getMatchingCorners(struct floorPolygon *a, struct floorPolygon *b, int *cornerA, int *cornerB) {
   162be:	                      lea -12(sp),sp
    int sharedVertices = 0;
   162c2:	                      clr.l 8(sp)
    int i, j;

    for (i = 0; i < a->numVertices; i++) {
   162c6:	                      clr.l 4(sp)
   162ca:	   /----------------- bra.w 1635c <getMatchingCorners+0x9e>
        for (j = 0; j < b->numVertices; j++) {
   162ce:	/--|----------------> clr.l (sp)
   162d0:	|  |     /----------- bra.s 1634c <getMatchingCorners+0x8e>
            if (a->vertexID[i] == b->vertexID[j]) {
   162d2:	|  |  /--|----------> movea.l 16(sp),a0
   162d6:	|  |  |  |            move.l 4(a0),d1
   162da:	|  |  |  |            move.l 4(sp),d0
   162de:	|  |  |  |            add.l d0,d0
   162e0:	|  |  |  |            add.l d0,d0
   162e2:	|  |  |  |            movea.l d1,a0
   162e4:	|  |  |  |            adda.l d0,a0
   162e6:	|  |  |  |            move.l (a0),d1
   162e8:	|  |  |  |            movea.l 20(sp),a0
   162ec:	|  |  |  |            movea.l 4(a0),a0
   162f0:	|  |  |  |            move.l (sp),d0
   162f2:	|  |  |  |            add.l d0,d0
   162f4:	|  |  |  |            add.l d0,d0
   162f6:	|  |  |  |            adda.l d0,a0
   162f8:	|  |  |  |            move.l (a0),d0
   162fa:	|  |  |  |            cmp.l d1,d0
   162fc:	|  |  |  |  /-------- bne.s 1634a <getMatchingCorners+0x8c>
                if (sharedVertices++) {
   162fe:	|  |  |  |  |         move.l 8(sp),d0
   16302:	|  |  |  |  |         move.l d0,d1
   16304:	|  |  |  |  |         addq.l #1,d1
   16306:	|  |  |  |  |         move.l d1,8(sp)
   1630a:	|  |  |  |  |         tst.l d0
   1630c:	|  |  |  |  |     /-- beq.s 1632e <getMatchingCorners+0x70>
                    *cornerB = a->vertexID[i];
   1630e:	|  |  |  |  |     |   movea.l 16(sp),a0
   16312:	|  |  |  |  |     |   move.l 4(a0),d1
   16316:	|  |  |  |  |     |   move.l 4(sp),d0
   1631a:	|  |  |  |  |     |   add.l d0,d0
   1631c:	|  |  |  |  |     |   add.l d0,d0
   1631e:	|  |  |  |  |     |   movea.l d1,a0
   16320:	|  |  |  |  |     |   adda.l d0,a0
   16322:	|  |  |  |  |     |   move.l (a0),d0
   16324:	|  |  |  |  |     |   movea.l 28(sp),a0
   16328:	|  |  |  |  |     |   move.l d0,(a0)
                    return TRUE;
   1632a:	|  |  |  |  |     |   moveq #1,d0
   1632c:	|  |  |  |  |  /--|-- bra.s 1636c <getMatchingCorners+0xae>
                } else {
                    *cornerA = a->vertexID[i];
   1632e:	|  |  |  |  |  |  \-> movea.l 16(sp),a0
   16332:	|  |  |  |  |  |      move.l 4(a0),d1
   16336:	|  |  |  |  |  |      move.l 4(sp),d0
   1633a:	|  |  |  |  |  |      add.l d0,d0
   1633c:	|  |  |  |  |  |      add.l d0,d0
   1633e:	|  |  |  |  |  |      movea.l d1,a0
   16340:	|  |  |  |  |  |      adda.l d0,a0
   16342:	|  |  |  |  |  |      move.l (a0),d0
   16344:	|  |  |  |  |  |      movea.l 24(sp),a0
   16348:	|  |  |  |  |  |      move.l d0,(a0)
        for (j = 0; j < b->numVertices; j++) {
   1634a:	|  |  |  |  \--|----> addq.l #1,(sp)
   1634c:	|  |  |  \-----|----> movea.l 20(sp),a0
   16350:	|  |  |        |      move.l (a0),d0
   16352:	|  |  |        |      cmp.l (sp),d0
   16354:	|  |  \--------|----- bgt.w 162d2 <getMatchingCorners+0x14>
    for (i = 0; i < a->numVertices; i++) {
   16358:	|  |           |      addq.l #1,4(sp)
   1635c:	|  \-----------|----> movea.l 16(sp),a0
   16360:	|              |      move.l (a0),d0
   16362:	|              |      cmp.l 4(sp),d0
   16366:	\--------------|----- bgt.w 162ce <getMatchingCorners+0x10>
                }
            }
        }
    }

    return FALSE;
   1636a:	               |      clr.w d0
}
   1636c:	               \----> lea 12(sp),sp
   16370:	                      rts

00016372 <noFloor>:



void noFloor () {
	currentFloor -> numPolygons = 0;
   16372:	movea.l 1a8c0 <currentFloor>,a0
   16378:	clr.l 8(a0)
	currentFloor -> polygon = NULL;
   1637c:	movea.l 1a8c0 <currentFloor>,a0
   16382:	clr.l 12(a0)
	currentFloor -> vertex = NULL;
   16386:	movea.l 1a8c0 <currentFloor>,a0
   1638c:	clr.l 4(a0)
	currentFloor -> matrix = NULL;
   16390:	movea.l 1a8c0 <currentFloor>,a0
   16396:	clr.l 16(a0)
}
   1639a:	nop
   1639c:	rts

0001639e <inFloor>:

int inFloor (int x, int y) {
   1639e:	          subq.l #8,sp
	int i, r = -1;
   163a0:	          moveq #-1,d0
   163a2:	          move.l d0,(sp)

	for (i = 0; i < currentFloor -> numPolygons; i ++)
   163a4:	          clr.l 4(sp)
   163a8:	   /----- bra.s 163dc <inFloor+0x3e>
		if (pointInFloorPolygon (&currentFloor -> polygon[i], x, y))
   163aa:	/--|----> movea.l 1a8c0 <currentFloor>,a0
   163b0:	|  |      move.l 12(a0),d1
   163b4:	|  |      move.l 4(sp),d0
   163b8:	|  |      lsl.l #3,d0
   163ba:	|  |      add.l d1,d0
   163bc:	|  |      move.l 16(sp),-(sp)
   163c0:	|  |      move.l 16(sp),-(sp)
   163c4:	|  |      move.l d0,-(sp)
   163c6:	|  |      jsr 165a8 <pointInFloorPolygon>
   163cc:	|  |      lea 12(sp),sp
   163d0:	|  |      tst.w d0
   163d2:	|  |  /-- beq.s 163d8 <inFloor+0x3a>
			r = i;
   163d4:	|  |  |   move.l 4(sp),(sp)
	for (i = 0; i < currentFloor -> numPolygons; i ++)
   163d8:	|  |  \-> addq.l #1,4(sp)
   163dc:	|  \----> movea.l 1a8c0 <currentFloor>,a0
   163e2:	|         move.l 8(a0),d0
   163e6:	|         cmp.l 4(sp),d0
   163ea:	\-------- bgt.s 163aa <inFloor+0xc>

	return r;
   163ec:	          move.l (sp),d0
}
   163ee:	          addq.l #8,sp
   163f0:	          rts

000163f2 <initFloor>:

BOOL initFloor () {
   163f2:	       lea -12(sp),sp
   163f6:	       move.l a6,-(sp)
	currentFloor = AllocVec(sizeof(struct flor), MEMF_ANY);
   163f8:	       moveq #20,d0
   163fa:	       move.l d0,12(sp)
   163fe:	       clr.l 8(sp)
   16402:	       move.l 1a7a4 <SysBase>,d0
   16408:	       movea.l d0,a6
   1640a:	       move.l 12(sp),d0
   1640e:	       move.l 8(sp),d1
   16412:	       jsr -684(a6)
   16416:	       move.l d0,4(sp)
   1641a:	       move.l 4(sp),d0
   1641e:	       move.l d0,1a8c0 <currentFloor>

    if(currentFloor == 0) {
   16424:	       move.l 1a8c0 <currentFloor>,d0
   1642a:	/----- bne.s 1643e <initFloor+0x4c>
        KPrintF("initFloor: Could not initialize Mem");
   1642c:	|      pea 19e46 <graphics.c.1c13408a+0x200>
   16432:	|      jsr 1703c <KPrintF>
   16438:	|      addq.l #4,sp
        return FALSE;
   1643a:	|      clr.w d0
   1643c:	|  /-- bra.s 16446 <initFloor+0x54>
    }

	noFloor ();
   1643e:	\--|-> jsr 16372 <noFloor>
	return TRUE;
   16444:	   |   moveq #1,d0
}
   16446:	   \-> movea.l (sp)+,a6
   16448:	       lea 12(sp),sp
   1644c:	       rts

0001644e <killFloor>:

void killFloor () {
   1644e:	       lea -24(sp),sp
   16452:	       move.l a6,-(sp)
	for (int i = 0; i < currentFloor -> numPolygons; i ++) {
   16454:	       clr.l 24(sp)
   16458:	   /-- bra.s 164b2 <killFloor+0x64>
		FreeVec(currentFloor -> polygon[i].vertexID);
   1645a:	/--|-> movea.l 1a8c0 <currentFloor>,a0
   16460:	|  |   move.l 12(a0),d1
   16464:	|  |   move.l 24(sp),d0
   16468:	|  |   lsl.l #3,d0
   1646a:	|  |   movea.l d1,a0
   1646c:	|  |   adda.l d0,a0
   1646e:	|  |   move.l 4(a0),8(sp)
   16474:	|  |   move.l 1a7a4 <SysBase>,d0
   1647a:	|  |   movea.l d0,a6
   1647c:	|  |   movea.l 8(sp),a1
   16480:	|  |   jsr -690(a6)
		FreeVec(currentFloor -> matrix[i]);
   16484:	|  |   movea.l 1a8c0 <currentFloor>,a0
   1648a:	|  |   move.l 16(a0),d1
   1648e:	|  |   move.l 24(sp),d0
   16492:	|  |   add.l d0,d0
   16494:	|  |   add.l d0,d0
   16496:	|  |   movea.l d1,a0
   16498:	|  |   adda.l d0,a0
   1649a:	|  |   move.l (a0),4(sp)
   1649e:	|  |   move.l 1a7a4 <SysBase>,d0
   164a4:	|  |   movea.l d0,a6
   164a6:	|  |   movea.l 4(sp),a1
   164aa:	|  |   jsr -690(a6)
	for (int i = 0; i < currentFloor -> numPolygons; i ++) {
   164ae:	|  |   addq.l #1,24(sp)
   164b2:	|  \-> movea.l 1a8c0 <currentFloor>,a0
   164b8:	|      move.l 8(a0),d0
   164bc:	|      cmp.l 24(sp),d0
   164c0:	\----- bgt.s 1645a <killFloor+0xc>
	}
	FreeVec(currentFloor -> polygon);
   164c2:	       movea.l 1a8c0 <currentFloor>,a0
   164c8:	       move.l 12(a0),20(sp)
   164ce:	       move.l 1a7a4 <SysBase>,d0
   164d4:	       movea.l d0,a6
   164d6:	       movea.l 20(sp),a1
   164da:	       jsr -690(a6)
	currentFloor -> polygon = NULL;
   164de:	       movea.l 1a8c0 <currentFloor>,a0
   164e4:	       clr.l 12(a0)
	FreeVec(currentFloor -> vertex);
   164e8:	       movea.l 1a8c0 <currentFloor>,a0
   164ee:	       move.l 4(a0),16(sp)
   164f4:	       move.l 1a7a4 <SysBase>,d0
   164fa:	       movea.l d0,a6
   164fc:	       movea.l 16(sp),a1
   16500:	       jsr -690(a6)
	currentFloor -> vertex = NULL;
   16504:	       movea.l 1a8c0 <currentFloor>,a0
   1650a:	       clr.l 4(a0)
	FreeVec(currentFloor -> matrix);
   1650e:	       movea.l 1a8c0 <currentFloor>,a0
   16514:	       move.l 16(a0),12(sp)
   1651a:	       move.l 1a7a4 <SysBase>,d0
   16520:	       movea.l d0,a6
   16522:	       movea.l 12(sp),a1
   16526:	       jsr -690(a6)
	currentFloor -> matrix = NULL;
   1652a:	       movea.l 1a8c0 <currentFloor>,a0
   16530:	       clr.l 16(a0)
}
   16534:	       nop
   16536:	       movea.l (sp)+,a6
   16538:	       lea 24(sp),sp
   1653c:	       rts

0001653e <polysShareSide>:

BOOL polysShareSide (struct floorPolygon a, struct floorPolygon b) {
   1653e:	                   lea -12(sp),sp
	int sharedVertices = 0;
   16542:	                   clr.l 8(sp)
	int i, j;

	for (i = 0; i < a.numVertices; i ++) {
   16546:	                   clr.l 4(sp)
   1654a:	   /-------------- bra.s 16596 <polysShareSide+0x58>
		for (j = 0; j < b.numVertices; j ++) {
   1654c:	/--|-------------> clr.l (sp)
   1654e:	|  |     /-------- bra.s 1658a <polysShareSide+0x4c>
			if (a.vertexID[i] == b.vertexID[j]) {
   16550:	|  |  /--|-------> move.l 20(sp),d1
   16554:	|  |  |  |         move.l 4(sp),d0
   16558:	|  |  |  |         add.l d0,d0
   1655a:	|  |  |  |         add.l d0,d0
   1655c:	|  |  |  |         movea.l d1,a0
   1655e:	|  |  |  |         adda.l d0,a0
   16560:	|  |  |  |         move.l (a0),d1
   16562:	|  |  |  |         movea.l 28(sp),a0
   16566:	|  |  |  |         move.l (sp),d0
   16568:	|  |  |  |         add.l d0,d0
   1656a:	|  |  |  |         add.l d0,d0
   1656c:	|  |  |  |         adda.l d0,a0
   1656e:	|  |  |  |         move.l (a0),d0
   16570:	|  |  |  |         cmp.l d1,d0
   16572:	|  |  |  |     /-- bne.s 16588 <polysShareSide+0x4a>
				if (sharedVertices ++) return TRUE;
   16574:	|  |  |  |     |   move.l 8(sp),d0
   16578:	|  |  |  |     |   move.l d0,d1
   1657a:	|  |  |  |     |   addq.l #1,d1
   1657c:	|  |  |  |     |   move.l d1,8(sp)
   16580:	|  |  |  |     |   tst.l d0
   16582:	|  |  |  |     +-- beq.s 16588 <polysShareSide+0x4a>
   16584:	|  |  |  |     |   moveq #1,d0
   16586:	|  |  |  |  /--|-- bra.s 165a2 <polysShareSide+0x64>
		for (j = 0; j < b.numVertices; j ++) {
   16588:	|  |  |  |  |  \-> addq.l #1,(sp)
   1658a:	|  |  |  \--|----> move.l 24(sp),d0
   1658e:	|  |  |     |      cmp.l (sp),d0
   16590:	|  |  \-----|----- bgt.s 16550 <polysShareSide+0x12>
	for (i = 0; i < a.numVertices; i ++) {
   16592:	|  |        |      addq.l #1,4(sp)
   16596:	|  \--------|----> move.l 16(sp),d0
   1659a:	|           |      cmp.l 4(sp),d0
   1659e:	\-----------|----- bgt.s 1654c <polysShareSide+0xe>
			}
		}
	}

	return FALSE;
   165a0:	            |      clr.w d0
}
   165a2:	            \----> lea 12(sp),sp
   165a6:	                   rts

000165a8 <pointInFloorPolygon>:

BOOL pointInFloorPolygon (struct floorPolygon * floorPoly, int x, int y) {
   165a8:	             lea -28(sp),sp
   165ac:	             move.l d3,-(sp)
   165ae:	             move.l d2,-(sp)
	int i = 0, j, c = 0;
   165b0:	             clr.l 32(sp)
   165b4:	             clr.l 24(sp)
	float xp_i, yp_i;
	float xp_j, yp_j;

	for (j = floorPoly->numVertices - 1; i < floorPoly->numVertices; j = i++) {
   165b8:	             movea.l 40(sp),a0
   165bc:	             move.l (a0),d0
   165be:	             move.l d0,d1
   165c0:	             subq.l #1,d1
   165c2:	             move.l d1,28(sp)
   165c6:	   /-------- bra.w 167c0 <pointInFloorPolygon+0x218>

		xp_i = currentFloor->vertex[floorPoly->vertexID[i]].x;
   165ca:	/--|-------> movea.l 1a8c0 <currentFloor>,a0
   165d0:	|  |         move.l 4(a0),d1
   165d4:	|  |         movea.l 40(sp),a0
   165d8:	|  |         movea.l 4(a0),a0
   165dc:	|  |         move.l 32(sp),d0
   165e0:	|  |         add.l d0,d0
   165e2:	|  |         add.l d0,d0
   165e4:	|  |         adda.l d0,a0
   165e6:	|  |         move.l (a0),d0
   165e8:	|  |         lsl.l #3,d0
   165ea:	|  |         movea.l d1,a0
   165ec:	|  |         adda.l d0,a0
   165ee:	|  |         move.l (a0),d0
   165f0:	|  |         move.l d0,-(sp)
   165f2:	|  |         jsr 1746e <__floatsisf>
   165f8:	|  |         addq.l #4,sp
   165fa:	|  |         move.l d0,20(sp)
		yp_i = currentFloor->vertex[floorPoly->vertexID[i]].y;
   165fe:	|  |         movea.l 1a8c0 <currentFloor>,a0
   16604:	|  |         move.l 4(a0),d1
   16608:	|  |         movea.l 40(sp),a0
   1660c:	|  |         movea.l 4(a0),a0
   16610:	|  |         move.l 32(sp),d0
   16614:	|  |         add.l d0,d0
   16616:	|  |         add.l d0,d0
   16618:	|  |         adda.l d0,a0
   1661a:	|  |         move.l (a0),d0
   1661c:	|  |         lsl.l #3,d0
   1661e:	|  |         movea.l d1,a0
   16620:	|  |         adda.l d0,a0
   16622:	|  |         move.l 4(a0),d0
   16626:	|  |         move.l d0,-(sp)
   16628:	|  |         jsr 1746e <__floatsisf>
   1662e:	|  |         addq.l #4,sp
   16630:	|  |         move.l d0,16(sp)
		xp_j = currentFloor->vertex[floorPoly->vertexID[j]].x;
   16634:	|  |         movea.l 1a8c0 <currentFloor>,a0
   1663a:	|  |         move.l 4(a0),d1
   1663e:	|  |         movea.l 40(sp),a0
   16642:	|  |         movea.l 4(a0),a0
   16646:	|  |         move.l 28(sp),d0
   1664a:	|  |         add.l d0,d0
   1664c:	|  |         add.l d0,d0
   1664e:	|  |         adda.l d0,a0
   16650:	|  |         move.l (a0),d0
   16652:	|  |         lsl.l #3,d0
   16654:	|  |         movea.l d1,a0
   16656:	|  |         adda.l d0,a0
   16658:	|  |         move.l (a0),d0
   1665a:	|  |         move.l d0,-(sp)
   1665c:	|  |         jsr 1746e <__floatsisf>
   16662:	|  |         addq.l #4,sp
   16664:	|  |         move.l d0,12(sp)
		yp_j = currentFloor->vertex[floorPoly->vertexID[j]].y;
   16668:	|  |         movea.l 1a8c0 <currentFloor>,a0
   1666e:	|  |         move.l 4(a0),d1
   16672:	|  |         movea.l 40(sp),a0
   16676:	|  |         movea.l 4(a0),a0
   1667a:	|  |         move.l 28(sp),d0
   1667e:	|  |         add.l d0,d0
   16680:	|  |         add.l d0,d0
   16682:	|  |         adda.l d0,a0
   16684:	|  |         move.l (a0),d0
   16686:	|  |         lsl.l #3,d0
   16688:	|  |         movea.l d1,a0
   1668a:	|  |         adda.l d0,a0
   1668c:	|  |         move.l 4(a0),d0
   16690:	|  |         move.l d0,-(sp)
   16692:	|  |         jsr 1746e <__floatsisf>
   16698:	|  |         addq.l #4,sp
   1669a:	|  |         move.l d0,8(sp)

		if ((((yp_i <= y) && (y < yp_j)) || ((yp_j <= y) && (y < yp_i))) &&
   1669e:	|  |         move.l 48(sp),-(sp)
   166a2:	|  |         jsr 1746e <__floatsisf>
   166a8:	|  |         addq.l #4,sp
   166aa:	|  |         move.l d0,-(sp)
   166ac:	|  |         move.l 20(sp),-(sp)
   166b0:	|  |         jsr 17610 <__lesf2>
   166b6:	|  |         addq.l #8,sp
   166b8:	|  |         tst.l d0
   166ba:	|  |     /-- bgt.s 166da <pointInFloorPolygon+0x132>
   166bc:	|  |     |   move.l 48(sp),-(sp)
   166c0:	|  |     |   jsr 1746e <__floatsisf>
   166c6:	|  |     |   addq.l #4,sp
   166c8:	|  |     |   move.l d0,-(sp)
   166ca:	|  |     |   move.l 12(sp),-(sp)
   166ce:	|  |     |   jsr 175da <__gtsf2>
   166d4:	|  |     |   addq.l #8,sp
   166d6:	|  |     |   tst.l d0
   166d8:	|  |  /--|-- bgt.s 1671a <pointInFloorPolygon+0x172>
   166da:	|  |  |  \-> move.l 48(sp),-(sp)
   166de:	|  |  |      jsr 1746e <__floatsisf>
   166e4:	|  |  |      addq.l #4,sp
   166e6:	|  |  |      move.l d0,-(sp)
   166e8:	|  |  |      move.l 12(sp),-(sp)
   166ec:	|  |  |      jsr 17610 <__lesf2>
   166f2:	|  |  |      addq.l #8,sp
   166f4:	|  |  |      tst.l d0
   166f6:	|  |  |  /-- bgt.w 167b0 <pointInFloorPolygon+0x208>
   166fa:	|  |  |  |   move.l 48(sp),-(sp)
   166fe:	|  |  |  |   jsr 1746e <__floatsisf>
   16704:	|  |  |  |   addq.l #4,sp
   16706:	|  |  |  |   move.l d0,-(sp)
   16708:	|  |  |  |   move.l 20(sp),-(sp)
   1670c:	|  |  |  |   jsr 175da <__gtsf2>
   16712:	|  |  |  |   addq.l #8,sp
   16714:	|  |  |  |   tst.l d0
   16716:	|  |  |  +-- ble.w 167b0 <pointInFloorPolygon+0x208>
			(x < (xp_j - xp_i) * (y - yp_i) / (yp_j - yp_i) + xp_i)) {
   1671a:	|  |  \--|-> move.l 44(sp),-(sp)
   1671e:	|  |     |   jsr 1746e <__floatsisf>
   16724:	|  |     |   addq.l #4,sp
   16726:	|  |     |   move.l d0,d3
   16728:	|  |     |   move.l 20(sp),-(sp)
   1672c:	|  |     |   move.l 16(sp),-(sp)
   16730:	|  |     |   jsr 17762 <__subsf3>
   16736:	|  |     |   addq.l #8,sp
   16738:	|  |     |   move.l d0,d2
   1673a:	|  |     |   move.l 48(sp),-(sp)
   1673e:	|  |     |   jsr 1746e <__floatsisf>
   16744:	|  |     |   addq.l #4,sp
   16746:	|  |     |   move.l 16(sp),-(sp)
   1674a:	|  |     |   move.l d0,-(sp)
   1674c:	|  |     |   jsr 17762 <__subsf3>
   16752:	|  |     |   addq.l #8,sp
   16754:	|  |     |   move.l d0,-(sp)
   16756:	|  |     |   move.l d2,-(sp)
   16758:	|  |     |   jsr 17520 <__mulsf3>
   1675e:	|  |     |   addq.l #8,sp
   16760:	|  |     |   move.l d0,d2
   16762:	|  |     |   move.l 16(sp),-(sp)
   16766:	|  |     |   move.l 12(sp),-(sp)
   1676a:	|  |     |   jsr 17762 <__subsf3>
   16770:	|  |     |   addq.l #8,sp
   16772:	|  |     |   move.l d0,-(sp)
   16774:	|  |     |   move.l d2,-(sp)
   16776:	|  |     |   jsr 17324 <__divsf3>
   1677c:	|  |     |   addq.l #8,sp
   1677e:	|  |     |   move.l 20(sp),-(sp)
   16782:	|  |     |   move.l d0,-(sp)
   16784:	|  |     |   jsr 1722a <__addsf3>
   1678a:	|  |     |   addq.l #8,sp
		if ((((yp_i <= y) && (y < yp_j)) || ((yp_j <= y) && (y < yp_i))) &&
   1678c:	|  |     |   move.l d0,-(sp)
   1678e:	|  |     |   move.l d3,-(sp)
   16790:	|  |     |   jsr 17694 <__ltsf2>
   16796:	|  |     |   addq.l #8,sp
   16798:	|  |     |   tst.l d0
   1679a:	|  |     +-- bge.s 167b0 <pointInFloorPolygon+0x208>

			c = !c;
   1679c:	|  |     |   tst.l 24(sp)
   167a0:	|  |     |   seq d0
   167a2:	|  |     |   neg.b d0
   167a4:	|  |     |   move.b d0,d0
   167a6:	|  |     |   andi.l #255,d0
   167ac:	|  |     |   move.l d0,24(sp)
	for (j = floorPoly->numVertices - 1; i < floorPoly->numVertices; j = i++) {
   167b0:	|  |     \-> move.l 32(sp),d0
   167b4:	|  |         move.l d0,d1
   167b6:	|  |         addq.l #1,d1
   167b8:	|  |         move.l d1,32(sp)
   167bc:	|  |         move.l d0,28(sp)
   167c0:	|  \-------> movea.l 40(sp),a0
   167c4:	|            move.l (a0),d0
   167c6:	|            cmp.l 32(sp),d0
   167ca:	\----------- bgt.w 165ca <pointInFloorPolygon+0x22>
		}
	}
	return c ? TRUE : FALSE;
   167ce:	             tst.l 24(sp)
   167d2:	             sne d0
   167d4:	             neg.b d0
   167d6:	             move.b d0,d0
   167d8:	             andi.w #255,d0
}
   167dc:	             move.l (sp)+,d2
   167de:	             move.l (sp)+,d3
   167e0:	             lea 28(sp),sp
   167e4:	             rts

000167e6 <setFloor>:

BOOL setFloor (int fileNum) {
   167e6:	                               lea -132(sp),sp
   167ea:	                               move.l a6,-(sp)
   167ec:	                               move.l a2,-(sp)
	int i, j;

	killFloor ();
   167ee:	                               jsr 1644e <killFloor>

	if (! openFileFromNum (fileNum)) return FALSE;
   167f4:	                               move.l 144(sp),-(sp)
   167f8:	                               jsr 6b36 <openFileFromNum>
   167fe:	                               addq.l #4,sp
   16800:	                               tst.l d0
   16802:	                           /-- bne.s 1680a <setFloor+0x24>
   16804:	                           |   clr.w d0
   16806:	/--------------------------|-- bra.w 16f56 <setFloor+0x770>

	// Find out how many polygons there are and reserve memory

	currentFloor -> originalNum = fileNum;
   1680a:	|                          \-> movea.l 1a8c0 <currentFloor>,a0
   16810:	|                              move.l 144(sp),(a0)
	currentFloor -> numPolygons = FGetC (bigDataFile);
   16814:	|                              move.l 1a78c <bigDataFile>,118(sp)
   1681c:	|                              move.l 1a7ac <DOSBase>,d0
   16822:	|                              movea.l d0,a6
   16824:	|                              move.l 118(sp),d1
   16828:	|                              jsr -306(a6)
   1682c:	|                              move.l d0,114(sp)
   16830:	|                              move.l 114(sp),d0
   16834:	|                              movea.l 1a8c0 <currentFloor>,a0
   1683a:	|                              move.l d0,8(a0)
	currentFloor -> polygon = AllocVec(  sizeof( struct floorPolygon) * currentFloor -> numPolygons, MEMF_ANY);
   1683e:	|                              movea.l 1a8c0 <currentFloor>,a0
   16844:	|                              move.l 8(a0),d0
   16848:	|                              lsl.l #3,d0
   1684a:	|                              move.l d0,110(sp)
   1684e:	|                              clr.l 106(sp)
   16852:	|                              move.l 1a7a4 <SysBase>,d0
   16858:	|                              movea.l d0,a6
   1685a:	|                              move.l 110(sp),d0
   1685e:	|                              move.l 106(sp),d1
   16862:	|                              jsr -684(a6)
   16866:	|                              move.l d0,102(sp)
   1686a:	|                              move.l 102(sp),d0
   1686e:	|                              movea.l 1a8c0 <currentFloor>,a0
   16874:	|                              move.l d0,12(a0)
	if (!(currentFloor -> polygon)) {
   16878:	|                              movea.l 1a8c0 <currentFloor>,a0
   1687e:	|                              move.l 12(a0),d0
   16882:	|                          /-- bne.s 16898 <setFloor+0xb2>
		KPrintF("setFloor: Cannot allocate memory");
   16884:	|                          |   pea 19e6a <graphics.c.1c13408a+0x224>
   1688a:	|                          |   jsr 1703c <KPrintF>
   16890:	|                          |   addq.l #4,sp
		return FALSE;
   16892:	|                          |   clr.w d0
   16894:	+--------------------------|-- bra.w 16f56 <setFloor+0x770>
	}

	// Read in each polygon

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16898:	|                          \-> clr.l 136(sp)
   1689c:	|                    /-------- bra.w 169b4 <setFloor+0x1ce>

		// Find out how many vertex IDs there are and reserve memory

		currentFloor -> polygon[i].numVertices = FGetC (bigDataFile);
   168a0:	|                 /--|-------> move.l 1a78c <bigDataFile>,26(sp)
   168a8:	|                 |  |         move.l 1a7ac <DOSBase>,d0
   168ae:	|                 |  |         movea.l d0,a6
   168b0:	|                 |  |         move.l 26(sp),d1
   168b4:	|                 |  |         jsr -306(a6)
   168b8:	|                 |  |         move.l d0,22(sp)
   168bc:	|                 |  |         move.l 22(sp),d1
   168c0:	|                 |  |         movea.l 1a8c0 <currentFloor>,a0
   168c6:	|                 |  |         movea.l 12(a0),a0
   168ca:	|                 |  |         move.l 136(sp),d0
   168ce:	|                 |  |         lsl.l #3,d0
   168d0:	|                 |  |         adda.l d0,a0
   168d2:	|                 |  |         move.l d1,(a0)
		currentFloor -> polygon[i].vertexID = AllocVec(sizeof (int) * currentFloor -> polygon[i].numVertices, MEMF_ANY);
   168d4:	|                 |  |         movea.l 1a8c0 <currentFloor>,a0
   168da:	|                 |  |         move.l 12(a0),d1
   168de:	|                 |  |         move.l 136(sp),d0
   168e2:	|                 |  |         lsl.l #3,d0
   168e4:	|                 |  |         movea.l d1,a0
   168e6:	|                 |  |         adda.l d0,a0
   168e8:	|                 |  |         move.l (a0),d0
   168ea:	|                 |  |         add.l d0,d0
   168ec:	|                 |  |         add.l d0,d0
   168ee:	|                 |  |         move.l d0,18(sp)
   168f2:	|                 |  |         clr.l 14(sp)
   168f6:	|                 |  |         move.l 1a7a4 <SysBase>,d0
   168fc:	|                 |  |         movea.l d0,a6
   168fe:	|                 |  |         move.l 18(sp),d0
   16902:	|                 |  |         move.l 14(sp),d1
   16906:	|                 |  |         jsr -684(a6)
   1690a:	|                 |  |         move.l d0,10(sp)
   1690e:	|                 |  |         move.l 10(sp),d1
   16912:	|                 |  |         movea.l 1a8c0 <currentFloor>,a0
   16918:	|                 |  |         movea.l 12(a0),a0
   1691c:	|                 |  |         move.l 136(sp),d0
   16920:	|                 |  |         lsl.l #3,d0
   16922:	|                 |  |         adda.l d0,a0
   16924:	|                 |  |         move.l d1,4(a0)
		if (!(currentFloor -> polygon[i].vertexID)) {
   16928:	|                 |  |         movea.l 1a8c0 <currentFloor>,a0
   1692e:	|                 |  |         move.l 12(a0),d1
   16932:	|                 |  |         move.l 136(sp),d0
   16936:	|                 |  |         lsl.l #3,d0
   16938:	|                 |  |         movea.l d1,a0
   1693a:	|                 |  |         adda.l d0,a0
   1693c:	|                 |  |         move.l 4(a0),d0
   16940:	|                 |  |     /-- bne.s 16956 <setFloor+0x170>
			KPrintF("setFloor: Cannot allocate memory");
   16942:	|                 |  |     |   pea 19e6a <graphics.c.1c13408a+0x224>
   16948:	|                 |  |     |   jsr 1703c <KPrintF>
   1694e:	|                 |  |     |   addq.l #4,sp
			return FALSE;
   16950:	|                 |  |     |   clr.w d0
   16952:	+-----------------|--|-----|-- bra.w 16f56 <setFloor+0x770>
		}

		// Read in each vertex ID

		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
   16956:	|                 |  |     \-> clr.l 132(sp)
   1695a:	|                 |  |     /-- bra.s 16994 <setFloor+0x1ae>
			currentFloor -> polygon[i].vertexID[j] = get2bytes (bigDataFile);
   1695c:	|                 |  |  /--|-> move.l 1a78c <bigDataFile>,d1
   16962:	|                 |  |  |  |   movea.l 1a8c0 <currentFloor>,a0
   16968:	|                 |  |  |  |   movea.l 12(a0),a0
   1696c:	|                 |  |  |  |   move.l 136(sp),d0
   16970:	|                 |  |  |  |   lsl.l #3,d0
   16972:	|                 |  |  |  |   adda.l d0,a0
   16974:	|                 |  |  |  |   movea.l 4(a0),a0
   16978:	|                 |  |  |  |   move.l 132(sp),d0
   1697c:	|                 |  |  |  |   add.l d0,d0
   1697e:	|                 |  |  |  |   add.l d0,d0
   16980:	|                 |  |  |  |   lea (0,a0,d0.l),a2
   16984:	|                 |  |  |  |   move.l d1,-(sp)
   16986:	|                 |  |  |  |   jsr 6bc <get2bytes>
   1698c:	|                 |  |  |  |   addq.l #4,sp
   1698e:	|                 |  |  |  |   move.l d0,(a2)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
   16990:	|                 |  |  |  |   addq.l #1,132(sp)
   16994:	|                 |  |  |  \-> movea.l 1a8c0 <currentFloor>,a0
   1699a:	|                 |  |  |      move.l 12(a0),d1
   1699e:	|                 |  |  |      move.l 136(sp),d0
   169a2:	|                 |  |  |      lsl.l #3,d0
   169a4:	|                 |  |  |      movea.l d1,a0
   169a6:	|                 |  |  |      adda.l d0,a0
   169a8:	|                 |  |  |      move.l (a0),d0
   169aa:	|                 |  |  |      cmp.l 132(sp),d0
   169ae:	|                 |  |  \----- bgt.s 1695c <setFloor+0x176>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   169b0:	|                 |  |         addq.l #1,136(sp)
   169b4:	|                 |  \-------> movea.l 1a8c0 <currentFloor>,a0
   169ba:	|                 |            move.l 8(a0),d0
   169be:	|                 |            cmp.l 136(sp),d0
   169c2:	|                 \----------- bgt.w 168a0 <setFloor+0xba>
		}
	}

	// Find out how many vertices there are and reserve memory

	i = get2bytes (bigDataFile);
   169c6:	|                              move.l 1a78c <bigDataFile>,d0
   169cc:	|                              move.l d0,-(sp)
   169ce:	|                              jsr 6bc <get2bytes>
   169d4:	|                              addq.l #4,sp
   169d6:	|                              move.l d0,136(sp)
	currentFloor -> vertex = AllocVec( sizeof(struct POINT)*i,MEMF_ANY);
   169da:	|                              move.l 136(sp),d0
   169de:	|                              lsl.l #3,d0
   169e0:	|                              move.l d0,98(sp)
   169e4:	|                              clr.l 94(sp)
   169e8:	|                              move.l 1a7a4 <SysBase>,d0
   169ee:	|                              movea.l d0,a6
   169f0:	|                              move.l 98(sp),d0
   169f4:	|                              move.l 94(sp),d1
   169f8:	|                              jsr -684(a6)
   169fc:	|                              move.l d0,90(sp)
   16a00:	|                              move.l 90(sp),d0
   16a04:	|                              movea.l 1a8c0 <currentFloor>,a0
   16a0a:	|                              move.l d0,4(a0)

	if (!(currentFloor -> vertex)) {
   16a0e:	|                              movea.l 1a8c0 <currentFloor>,a0
   16a14:	|                              move.l 4(a0),d0
   16a18:	|                          /-- bne.s 16a2e <setFloor+0x248>
		KPrintF("setFloor: Cannot allocate memory");
   16a1a:	|                          |   pea 19e6a <graphics.c.1c13408a+0x224>
   16a20:	|                          |   jsr 1703c <KPrintF>
   16a26:	|                          |   addq.l #4,sp
		return FALSE;
   16a28:	|                          |   clr.w d0
   16a2a:	+--------------------------|-- bra.w 16f56 <setFloor+0x770>
	}

	for (j = 0; j < i; j ++) {
   16a2e:	|                          \-> clr.l 132(sp)
   16a32:	|                          /-- bra.s 16a86 <setFloor+0x2a0>
		currentFloor -> vertex[j].x = get2bytes (bigDataFile);
   16a34:	|                       /--|-> move.l 1a78c <bigDataFile>,d1
   16a3a:	|                       |  |   movea.l 1a8c0 <currentFloor>,a0
   16a40:	|                       |  |   movea.l 4(a0),a0
   16a44:	|                       |  |   move.l 132(sp),d0
   16a48:	|                       |  |   lsl.l #3,d0
   16a4a:	|                       |  |   lea (0,a0,d0.l),a2
   16a4e:	|                       |  |   move.l d1,-(sp)
   16a50:	|                       |  |   jsr 6bc <get2bytes>
   16a56:	|                       |  |   addq.l #4,sp
   16a58:	|                       |  |   move.l d0,(a2)
		currentFloor -> vertex[j].y = get2bytes (bigDataFile);
   16a5a:	|                       |  |   move.l 1a78c <bigDataFile>,d1
   16a60:	|                       |  |   movea.l 1a8c0 <currentFloor>,a0
   16a66:	|                       |  |   movea.l 4(a0),a0
   16a6a:	|                       |  |   move.l 132(sp),d0
   16a6e:	|                       |  |   lsl.l #3,d0
   16a70:	|                       |  |   lea (0,a0,d0.l),a2
   16a74:	|                       |  |   move.l d1,-(sp)
   16a76:	|                       |  |   jsr 6bc <get2bytes>
   16a7c:	|                       |  |   addq.l #4,sp
   16a7e:	|                       |  |   move.l d0,4(a2)
	for (j = 0; j < i; j ++) {
   16a82:	|                       |  |   addq.l #1,132(sp)
   16a86:	|                       |  \-> move.l 132(sp),d0
   16a8a:	|                       |      cmp.l 136(sp),d0
   16a8e:	|                       \----- blt.s 16a34 <setFloor+0x24e>
	}

	finishAccess ();
   16a90:	|                              jsr 6a2e <finishAccess>

	// Now build the movement martix

	currentFloor -> matrix = AllocVec( sizeof(int) * currentFloor -> numPolygons, MEMF_ANY);
   16a96:	|                              movea.l 1a8c0 <currentFloor>,a0
   16a9c:	|                              move.l 8(a0),d0
   16aa0:	|                              add.l d0,d0
   16aa2:	|                              add.l d0,d0
   16aa4:	|                              move.l d0,86(sp)
   16aa8:	|                              clr.l 82(sp)
   16aac:	|                              move.l 1a7a4 <SysBase>,d0
   16ab2:	|                              movea.l d0,a6
   16ab4:	|                              move.l 86(sp),d0
   16ab8:	|                              move.l 82(sp),d1
   16abc:	|                              jsr -684(a6)
   16ac0:	|                              move.l d0,78(sp)
   16ac4:	|                              move.l 78(sp),d0
   16ac8:	|                              movea.l 1a8c0 <currentFloor>,a0
   16ace:	|                              move.l d0,16(a0)
	int * * distanceMatrix = AllocVec( sizeof(int) * currentFloor -> numPolygons, MEMF_ANY);
   16ad2:	|                              movea.l 1a8c0 <currentFloor>,a0
   16ad8:	|                              move.l 8(a0),d0
   16adc:	|                              add.l d0,d0
   16ade:	|                              add.l d0,d0
   16ae0:	|                              move.l d0,74(sp)
   16ae4:	|                              clr.l 70(sp)
   16ae8:	|                              move.l 1a7a4 <SysBase>,d0
   16aee:	|                              movea.l d0,a6
   16af0:	|                              move.l 74(sp),d0
   16af4:	|                              move.l 70(sp),d1
   16af8:	|                              jsr -684(a6)
   16afc:	|                              move.l d0,66(sp)
   16b00:	|                              move.l 66(sp),d0
   16b04:	|                              move.l d0,62(sp)


	if (!(currentFloor -> matrix)) {
   16b08:	|                              movea.l 1a8c0 <currentFloor>,a0
   16b0e:	|                              move.l 16(a0),d0
   16b12:	|                          /-- bne.s 16b28 <setFloor+0x342>
		KPrintF("setFloor: Cannot allocate memory");
   16b14:	|                          |   pea 19e6a <graphics.c.1c13408a+0x224>
   16b1a:	|                          |   jsr 1703c <KPrintF>
   16b20:	|                          |   addq.l #4,sp
		return FALSE;
   16b22:	|                          |   clr.w d0
   16b24:	+--------------------------|-- bra.w 16f56 <setFloor+0x770>
	}

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16b28:	|                          \-> clr.l 136(sp)
   16b2c:	|                    /-------- bra.w 16c50 <setFloor+0x46a>
		currentFloor -> matrix[i] = AllocVec( sizeof(int) * currentFloor -> numPolygons,MEMF_ANY);
   16b30:	|                 /--|-------> movea.l 1a8c0 <currentFloor>,a0
   16b36:	|                 |  |         move.l 8(a0),d0
   16b3a:	|                 |  |         add.l d0,d0
   16b3c:	|                 |  |         add.l d0,d0
   16b3e:	|                 |  |         move.l d0,50(sp)
   16b42:	|                 |  |         clr.l 46(sp)
   16b46:	|                 |  |         move.l 1a7a4 <SysBase>,d0
   16b4c:	|                 |  |         movea.l d0,a6
   16b4e:	|                 |  |         move.l 50(sp),d0
   16b52:	|                 |  |         move.l 46(sp),d1
   16b56:	|                 |  |         jsr -684(a6)
   16b5a:	|                 |  |         move.l d0,42(sp)
   16b5e:	|                 |  |         move.l 42(sp),d0
   16b62:	|                 |  |         movea.l 1a8c0 <currentFloor>,a0
   16b68:	|                 |  |         movea.l 16(a0),a0
   16b6c:	|                 |  |         move.l 136(sp),d1
   16b70:	|                 |  |         add.l d1,d1
   16b72:	|                 |  |         add.l d1,d1
   16b74:	|                 |  |         adda.l d1,a0
   16b76:	|                 |  |         move.l d0,(a0)
		distanceMatrix        [i] = AllocVec( sizeof(int) * currentFloor -> numPolygons,MEMF_ANY);
   16b78:	|                 |  |         movea.l 1a8c0 <currentFloor>,a0
   16b7e:	|                 |  |         move.l 8(a0),d0
   16b82:	|                 |  |         add.l d0,d0
   16b84:	|                 |  |         add.l d0,d0
   16b86:	|                 |  |         move.l d0,38(sp)
   16b8a:	|                 |  |         clr.l 34(sp)
   16b8e:	|                 |  |         move.l 1a7a4 <SysBase>,d0
   16b94:	|                 |  |         movea.l d0,a6
   16b96:	|                 |  |         move.l 38(sp),d0
   16b9a:	|                 |  |         move.l 34(sp),d1
   16b9e:	|                 |  |         jsr -684(a6)
   16ba2:	|                 |  |         move.l d0,30(sp)
   16ba6:	|                 |  |         move.l 30(sp),d1
   16baa:	|                 |  |         move.l 136(sp),d0
   16bae:	|                 |  |         add.l d0,d0
   16bb0:	|                 |  |         add.l d0,d0
   16bb2:	|                 |  |         movea.l 62(sp),a0
   16bb6:	|                 |  |         adda.l d0,a0
   16bb8:	|                 |  |         move.l d1,(a0)
		if (!(currentFloor -> matrix[i])) { 
   16bba:	|                 |  |         movea.l 1a8c0 <currentFloor>,a0
   16bc0:	|                 |  |         move.l 16(a0),d1
   16bc4:	|                 |  |         move.l 136(sp),d0
   16bc8:	|                 |  |         add.l d0,d0
   16bca:	|                 |  |         add.l d0,d0
   16bcc:	|                 |  |         movea.l d1,a0
   16bce:	|                 |  |         adda.l d0,a0
   16bd0:	|                 |  |         move.l (a0),d0
   16bd2:	|                 |  |     /-- bne.s 16be8 <setFloor+0x402>
			KPrintF("setFloor: Cannot allocate memory");
   16bd4:	|                 |  |     |   pea 19e6a <graphics.c.1c13408a+0x224>
   16bda:	|                 |  |     |   jsr 1703c <KPrintF>
   16be0:	|                 |  |     |   addq.l #4,sp
			return FALSE;
   16be2:	|                 |  |     |   clr.w d0
   16be4:	+-----------------|--|-----|-- bra.w 16f56 <setFloor+0x770>
		}
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   16be8:	|                 |  |     \-> clr.l 132(sp)
   16bec:	|                 |  |     /-- bra.s 16c3c <setFloor+0x456>
			currentFloor -> matrix[i][j] = -1;
   16bee:	|                 |  |  /--|-> movea.l 1a8c0 <currentFloor>,a0
   16bf4:	|                 |  |  |  |   move.l 16(a0),d1
   16bf8:	|                 |  |  |  |   move.l 136(sp),d0
   16bfc:	|                 |  |  |  |   add.l d0,d0
   16bfe:	|                 |  |  |  |   add.l d0,d0
   16c00:	|                 |  |  |  |   movea.l d1,a0
   16c02:	|                 |  |  |  |   adda.l d0,a0
   16c04:	|                 |  |  |  |   move.l (a0),d1
   16c06:	|                 |  |  |  |   move.l 132(sp),d0
   16c0a:	|                 |  |  |  |   add.l d0,d0
   16c0c:	|                 |  |  |  |   add.l d0,d0
   16c0e:	|                 |  |  |  |   movea.l d1,a0
   16c10:	|                 |  |  |  |   adda.l d0,a0
   16c12:	|                 |  |  |  |   moveq #-1,d1
   16c14:	|                 |  |  |  |   move.l d1,(a0)
			distanceMatrix        [i][j] = 10000;
   16c16:	|                 |  |  |  |   move.l 136(sp),d0
   16c1a:	|                 |  |  |  |   add.l d0,d0
   16c1c:	|                 |  |  |  |   add.l d0,d0
   16c1e:	|                 |  |  |  |   movea.l 62(sp),a0
   16c22:	|                 |  |  |  |   adda.l d0,a0
   16c24:	|                 |  |  |  |   move.l (a0),d1
   16c26:	|                 |  |  |  |   move.l 132(sp),d0
   16c2a:	|                 |  |  |  |   add.l d0,d0
   16c2c:	|                 |  |  |  |   add.l d0,d0
   16c2e:	|                 |  |  |  |   movea.l d1,a0
   16c30:	|                 |  |  |  |   adda.l d0,a0
   16c32:	|                 |  |  |  |   move.l #10000,(a0)
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   16c38:	|                 |  |  |  |   addq.l #1,132(sp)
   16c3c:	|                 |  |  |  \-> movea.l 1a8c0 <currentFloor>,a0
   16c42:	|                 |  |  |      move.l 8(a0),d0
   16c46:	|                 |  |  |      cmp.l 132(sp),d0
   16c4a:	|                 |  |  \----- bgt.s 16bee <setFloor+0x408>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16c4c:	|                 |  |         addq.l #1,136(sp)
   16c50:	|                 |  \-------> movea.l 1a8c0 <currentFloor>,a0
   16c56:	|                 |            move.l 8(a0),d0
   16c5a:	|                 |            cmp.l 136(sp),d0
   16c5e:	|                 \----------- bgt.w 16b30 <setFloor+0x34a>
		}
	}

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16c62:	|                              clr.l 136(sp)
   16c66:	|              /-------------- bra.w 16d6c <setFloor+0x586>
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   16c6a:	|           /--|-------------> clr.l 132(sp)
   16c6e:	|           |  |     /-------- bra.w 16d56 <setFloor+0x570>
			if (i != j) {
   16c72:	|           |  |  /--|-------> move.l 136(sp),d0
   16c76:	|           |  |  |  |         cmp.l 132(sp),d0
   16c7a:	|           |  |  |  |     /-- beq.w 16d0c <setFloor+0x526>
				if (polysShareSide (currentFloor -> polygon[i], currentFloor -> polygon[j])) {
   16c7e:	|           |  |  |  |     |   movea.l 1a8c0 <currentFloor>,a0
   16c84:	|           |  |  |  |     |   move.l 12(a0),d1
   16c88:	|           |  |  |  |     |   move.l 132(sp),d0
   16c8c:	|           |  |  |  |     |   lsl.l #3,d0
   16c8e:	|           |  |  |  |     |   movea.l d1,a1
   16c90:	|           |  |  |  |     |   adda.l d0,a1
   16c92:	|           |  |  |  |     |   movea.l 1a8c0 <currentFloor>,a0
   16c98:	|           |  |  |  |     |   move.l 12(a0),d1
   16c9c:	|           |  |  |  |     |   move.l 136(sp),d0
   16ca0:	|           |  |  |  |     |   lsl.l #3,d0
   16ca2:	|           |  |  |  |     |   movea.l d1,a0
   16ca4:	|           |  |  |  |     |   adda.l d0,a0
   16ca6:	|           |  |  |  |     |   move.l 4(a1),-(sp)
   16caa:	|           |  |  |  |     |   move.l (a1),-(sp)
   16cac:	|           |  |  |  |     |   move.l 4(a0),-(sp)
   16cb0:	|           |  |  |  |     |   move.l (a0),-(sp)
   16cb2:	|           |  |  |  |     |   jsr 1653e <polysShareSide>
   16cb8:	|           |  |  |  |     |   lea 16(sp),sp
   16cbc:	|           |  |  |  |     |   tst.w d0
   16cbe:	|           |  |  |  |  /--|-- beq.w 16d52 <setFloor+0x56c>
					currentFloor -> matrix[i][j] = j;
   16cc2:	|           |  |  |  |  |  |   movea.l 1a8c0 <currentFloor>,a0
   16cc8:	|           |  |  |  |  |  |   move.l 16(a0),d1
   16ccc:	|           |  |  |  |  |  |   move.l 136(sp),d0
   16cd0:	|           |  |  |  |  |  |   add.l d0,d0
   16cd2:	|           |  |  |  |  |  |   add.l d0,d0
   16cd4:	|           |  |  |  |  |  |   movea.l d1,a0
   16cd6:	|           |  |  |  |  |  |   adda.l d0,a0
   16cd8:	|           |  |  |  |  |  |   move.l (a0),d1
   16cda:	|           |  |  |  |  |  |   move.l 132(sp),d0
   16cde:	|           |  |  |  |  |  |   add.l d0,d0
   16ce0:	|           |  |  |  |  |  |   add.l d0,d0
   16ce2:	|           |  |  |  |  |  |   movea.l d1,a0
   16ce4:	|           |  |  |  |  |  |   adda.l d0,a0
   16ce6:	|           |  |  |  |  |  |   move.l 132(sp),(a0)
					distanceMatrix        [i][j] = 1;
   16cea:	|           |  |  |  |  |  |   move.l 136(sp),d0
   16cee:	|           |  |  |  |  |  |   add.l d0,d0
   16cf0:	|           |  |  |  |  |  |   add.l d0,d0
   16cf2:	|           |  |  |  |  |  |   movea.l 62(sp),a0
   16cf6:	|           |  |  |  |  |  |   adda.l d0,a0
   16cf8:	|           |  |  |  |  |  |   move.l (a0),d1
   16cfa:	|           |  |  |  |  |  |   move.l 132(sp),d0
   16cfe:	|           |  |  |  |  |  |   add.l d0,d0
   16d00:	|           |  |  |  |  |  |   add.l d0,d0
   16d02:	|           |  |  |  |  |  |   movea.l d1,a0
   16d04:	|           |  |  |  |  |  |   adda.l d0,a0
   16d06:	|           |  |  |  |  |  |   moveq #1,d1
   16d08:	|           |  |  |  |  |  |   move.l d1,(a0)
   16d0a:	|           |  |  |  |  +--|-- bra.s 16d52 <setFloor+0x56c>
				}
			} else {
				currentFloor -> matrix[i][j] = -2;
   16d0c:	|           |  |  |  |  |  \-> movea.l 1a8c0 <currentFloor>,a0
   16d12:	|           |  |  |  |  |      move.l 16(a0),d1
   16d16:	|           |  |  |  |  |      move.l 136(sp),d0
   16d1a:	|           |  |  |  |  |      add.l d0,d0
   16d1c:	|           |  |  |  |  |      add.l d0,d0
   16d1e:	|           |  |  |  |  |      movea.l d1,a0
   16d20:	|           |  |  |  |  |      adda.l d0,a0
   16d22:	|           |  |  |  |  |      move.l (a0),d1
   16d24:	|           |  |  |  |  |      move.l 132(sp),d0
   16d28:	|           |  |  |  |  |      add.l d0,d0
   16d2a:	|           |  |  |  |  |      add.l d0,d0
   16d2c:	|           |  |  |  |  |      movea.l d1,a0
   16d2e:	|           |  |  |  |  |      adda.l d0,a0
   16d30:	|           |  |  |  |  |      moveq #-2,d0
   16d32:	|           |  |  |  |  |      move.l d0,(a0)
				distanceMatrix        [i][j] = 0;
   16d34:	|           |  |  |  |  |      move.l 136(sp),d0
   16d38:	|           |  |  |  |  |      add.l d0,d0
   16d3a:	|           |  |  |  |  |      add.l d0,d0
   16d3c:	|           |  |  |  |  |      movea.l 62(sp),a0
   16d40:	|           |  |  |  |  |      adda.l d0,a0
   16d42:	|           |  |  |  |  |      move.l (a0),d1
   16d44:	|           |  |  |  |  |      move.l 132(sp),d0
   16d48:	|           |  |  |  |  |      add.l d0,d0
   16d4a:	|           |  |  |  |  |      add.l d0,d0
   16d4c:	|           |  |  |  |  |      movea.l d1,a0
   16d4e:	|           |  |  |  |  |      adda.l d0,a0
   16d50:	|           |  |  |  |  |      clr.l (a0)
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   16d52:	|           |  |  |  |  \----> addq.l #1,132(sp)
   16d56:	|           |  |  |  \-------> movea.l 1a8c0 <currentFloor>,a0
   16d5c:	|           |  |  |            move.l 8(a0),d0
   16d60:	|           |  |  |            cmp.l 132(sp),d0
   16d64:	|           |  |  \----------- bgt.w 16c72 <setFloor+0x48c>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16d68:	|           |  |               addq.l #1,136(sp)
   16d6c:	|           |  \-------------> movea.l 1a8c0 <currentFloor>,a0
   16d72:	|           |                  move.l 8(a0),d0
   16d76:	|           |                  cmp.l 136(sp),d0
   16d7a:	|           \----------------- bgt.w 16c6a <setFloor+0x484>
			}
		}
	}

	BOOL madeChange;
	int lookForDistance = 0;
   16d7e:	|                              clr.l 126(sp)

	do {
		lookForDistance ++;
   16d82:	|  /-------------------------> addq.l #1,126(sp)
//		debugMatrix ();
		madeChange = FALSE;
   16d86:	|  |                           clr.w 130(sp)
		for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16d8a:	|  |                           clr.l 136(sp)
   16d8e:	|  |     /-------------------- bra.w 16ee4 <setFloor+0x6fe>
			for (j = 0; j < currentFloor -> numPolygons; j ++) {
   16d92:	|  |  /--|-------------------> clr.l 132(sp)
   16d96:	|  |  |  |     /-------------- bra.w 16ece <setFloor+0x6e8>
				if (currentFloor -> matrix[i][j] == -1) {
   16d9a:	|  |  |  |  /--|-------------> movea.l 1a8c0 <currentFloor>,a0
   16da0:	|  |  |  |  |  |               move.l 16(a0),d1
   16da4:	|  |  |  |  |  |               move.l 136(sp),d0
   16da8:	|  |  |  |  |  |               add.l d0,d0
   16daa:	|  |  |  |  |  |               add.l d0,d0
   16dac:	|  |  |  |  |  |               movea.l d1,a0
   16dae:	|  |  |  |  |  |               adda.l d0,a0
   16db0:	|  |  |  |  |  |               move.l (a0),d1
   16db2:	|  |  |  |  |  |               move.l 132(sp),d0
   16db6:	|  |  |  |  |  |               add.l d0,d0
   16db8:	|  |  |  |  |  |               add.l d0,d0
   16dba:	|  |  |  |  |  |               movea.l d1,a0
   16dbc:	|  |  |  |  |  |               adda.l d0,a0
   16dbe:	|  |  |  |  |  |               move.l (a0),d0
   16dc0:	|  |  |  |  |  |               moveq #-1,d1
   16dc2:	|  |  |  |  |  |               cmp.l d0,d1
   16dc4:	|  |  |  |  |  |  /----------- bne.w 16eca <setFloor+0x6e4>

					// OK, so we don't know how to get from i to j...
					for (int d = 0; d < currentFloor -> numPolygons; d ++) {
   16dc8:	|  |  |  |  |  |  |            clr.l 122(sp)
   16dcc:	|  |  |  |  |  |  |     /----- bra.w 16eb8 <setFloor+0x6d2>
						if (d != i && d != j) {
   16dd0:	|  |  |  |  |  |  |  /--|----> move.l 122(sp),d0
   16dd4:	|  |  |  |  |  |  |  |  |      cmp.l 136(sp),d0
   16dd8:	|  |  |  |  |  |  |  |  |  /-- beq.w 16eb4 <setFloor+0x6ce>
   16ddc:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d1
   16de0:	|  |  |  |  |  |  |  |  |  |   cmp.l 132(sp),d1
   16de4:	|  |  |  |  |  |  |  |  |  +-- beq.w 16eb4 <setFloor+0x6ce>
							if (currentFloor -> matrix[i][d] == d &&
   16de8:	|  |  |  |  |  |  |  |  |  |   movea.l 1a8c0 <currentFloor>,a0
   16dee:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   16df2:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   16df6:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16df8:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16dfa:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   16dfc:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16dfe:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   16e00:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   16e04:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16e06:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16e08:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   16e0a:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16e0c:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
   16e0e:	|  |  |  |  |  |  |  |  |  |   cmp.l 122(sp),d0
   16e12:	|  |  |  |  |  |  |  |  |  +-- bne.w 16eb4 <setFloor+0x6ce>
								currentFloor -> matrix[d][j] >= 0 &&
   16e16:	|  |  |  |  |  |  |  |  |  |   movea.l 1a8c0 <currentFloor>,a0
   16e1c:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   16e20:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   16e24:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16e26:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16e28:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   16e2a:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16e2c:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   16e2e:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   16e32:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16e34:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16e36:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   16e38:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16e3a:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
							if (currentFloor -> matrix[i][d] == d &&
   16e3c:	|  |  |  |  |  |  |  |  |  +-- bmi.s 16eb4 <setFloor+0x6ce>
								distanceMatrix        [d][j] <= lookForDistance) {
   16e3e:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   16e42:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16e44:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16e46:	|  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a0
   16e4a:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16e4c:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   16e4e:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   16e52:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16e54:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16e56:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   16e58:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16e5a:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
								currentFloor -> matrix[d][j] >= 0 &&
   16e5c:	|  |  |  |  |  |  |  |  |  |   cmp.l 126(sp),d0
   16e60:	|  |  |  |  |  |  |  |  |  +-- bgt.s 16eb4 <setFloor+0x6ce>

								 currentFloor -> matrix[i][j] = d;
   16e62:	|  |  |  |  |  |  |  |  |  |   movea.l 1a8c0 <currentFloor>,a0
   16e68:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   16e6c:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   16e70:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16e72:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16e74:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   16e76:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16e78:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   16e7a:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   16e7e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16e80:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16e82:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   16e84:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16e86:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),(a0)
								 distanceMatrix		  [i][j] = lookForDistance + 1;
   16e8a:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   16e8e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16e90:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16e92:	|  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a0
   16e96:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16e98:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   16e9a:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   16e9e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16ea0:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16ea2:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   16ea4:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16ea6:	|  |  |  |  |  |  |  |  |  |   move.l 126(sp),d0
   16eaa:	|  |  |  |  |  |  |  |  |  |   addq.l #1,d0
   16eac:	|  |  |  |  |  |  |  |  |  |   move.l d0,(a0)
								 madeChange = TRUE;
   16eae:	|  |  |  |  |  |  |  |  |  |   move.w #1,130(sp)
					for (int d = 0; d < currentFloor -> numPolygons; d ++) {
   16eb4:	|  |  |  |  |  |  |  |  |  \-> addq.l #1,122(sp)
   16eb8:	|  |  |  |  |  |  |  |  \----> movea.l 1a8c0 <currentFloor>,a0
   16ebe:	|  |  |  |  |  |  |  |         move.l 8(a0),d0
   16ec2:	|  |  |  |  |  |  |  |         cmp.l 122(sp),d0
   16ec6:	|  |  |  |  |  |  |  \-------- bgt.w 16dd0 <setFloor+0x5ea>
			for (j = 0; j < currentFloor -> numPolygons; j ++) {
   16eca:	|  |  |  |  |  |  \----------> addq.l #1,132(sp)
   16ece:	|  |  |  |  |  \-------------> movea.l 1a8c0 <currentFloor>,a0
   16ed4:	|  |  |  |  |                  move.l 8(a0),d0
   16ed8:	|  |  |  |  |                  cmp.l 132(sp),d0
   16edc:	|  |  |  |  \----------------- bgt.w 16d9a <setFloor+0x5b4>
		for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16ee0:	|  |  |  |                     addq.l #1,136(sp)
   16ee4:	|  |  |  \-------------------> movea.l 1a8c0 <currentFloor>,a0
   16eea:	|  |  |                        move.l 8(a0),d0
   16eee:	|  |  |                        cmp.l 136(sp),d0
   16ef2:	|  |  \----------------------- bgt.w 16d92 <setFloor+0x5ac>
						}
					}
				}
			}
		}
	} while (madeChange);
   16ef6:	|  |                           tst.w 130(sp)
   16efa:	|  \-------------------------- bne.w 16d82 <setFloor+0x59c>

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16efe:	|                              clr.l 136(sp)
   16f02:	|                          /-- bra.s 16f2a <setFloor+0x744>
		FreeVec(distanceMatrix [i]);
   16f04:	|                       /--|-> move.l 136(sp),d0
   16f08:	|                       |  |   add.l d0,d0
   16f0a:	|                       |  |   add.l d0,d0
   16f0c:	|                       |  |   movea.l 62(sp),a0
   16f10:	|                       |  |   adda.l d0,a0
   16f12:	|                       |  |   move.l (a0),54(sp)
   16f16:	|                       |  |   move.l 1a7a4 <SysBase>,d0
   16f1c:	|                       |  |   movea.l d0,a6
   16f1e:	|                       |  |   movea.l 54(sp),a1
   16f22:	|                       |  |   jsr -690(a6)
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16f26:	|                       |  |   addq.l #1,136(sp)
   16f2a:	|                       |  \-> movea.l 1a8c0 <currentFloor>,a0
   16f30:	|                       |      move.l 8(a0),d0
   16f34:	|                       |      cmp.l 136(sp),d0
   16f38:	|                       \----- bgt.s 16f04 <setFloor+0x71e>
	}

	FreeVec(distanceMatrix);
   16f3a:	|                              move.l 62(sp),58(sp)
   16f40:	|                              move.l 1a7a4 <SysBase>,d0
   16f46:	|                              movea.l d0,a6
   16f48:	|                              movea.l 58(sp),a1
   16f4c:	|                              jsr -690(a6)
	distanceMatrix = NULL;	
   16f50:	|                              clr.l 62(sp)

	return TRUE;
   16f54:	|                              moveq #1,d0
}
   16f56:	\----------------------------> movea.l (sp)+,a2
   16f58:	                               movea.l (sp)+,a6
   16f5a:	                               lea 132(sp),sp
   16f5e:	                               rts

00016f60 <setFloorNull>:

void setFloorNull () {
	killFloor ();
   16f60:	jsr 1644e <killFloor>
	noFloor ();
   16f66:	jsr 16372 <noFloor>
   16f6c:	nop
   16f6e:	rts

00016f70 <WaitVbl>:
void WaitVbl() {
   16f70:	       subq.l #8,sp
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
   16f72:	   /-> movea.l #14675972,a0
   16f78:	   |   move.l (a0),d0
   16f7a:	   |   move.l d0,(sp)
		vpos&=0x1ff00;
   16f7c:	   |   move.l (sp),d0
   16f7e:	   |   andi.l #130816,d0
   16f84:	   |   move.l d0,(sp)
		if (vpos!=(300<<8))
   16f86:	   |   move.l (sp),d0
   16f88:	   |   cmpi.l #76800,d0
   16f8e:	   \-- beq.s 16f72 <WaitVbl+0x2>
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
   16f90:	/----> movea.l #14675972,a0
   16f96:	|      move.l (a0),d0
   16f98:	|      move.l d0,4(sp)
		vpos&=0x1ff00;
   16f9c:	|      move.l 4(sp),d0
   16fa0:	|      andi.l #130816,d0
   16fa6:	|      move.l d0,4(sp)
		if (vpos==(300<<8))
   16faa:	|      move.l 4(sp),d0
   16fae:	|      cmpi.l #76800,d0
   16fb4:	|  /-- beq.s 16fb8 <WaitVbl+0x48>
	while (1) {
   16fb6:	\--|-- bra.s 16f90 <WaitVbl+0x20>
			break;
   16fb8:	   \-> nop
}
   16fba:	       nop
   16fbc:	       addq.l #8,sp
   16fbe:	       rts

00016fc0 <memset>:
void* memset(void *dest, int val, unsigned long len) {
   16fc0:	       subq.l #4,sp
	unsigned char *ptr = (unsigned char *)dest;
   16fc2:	       move.l 8(sp),(sp)
	while(len-- > 0)
   16fc6:	   /-- bra.s 16fd8 <memset+0x18>
		*ptr++ = val;
   16fc8:	/--|-> move.l (sp),d0
   16fca:	|  |   move.l d0,d1
   16fcc:	|  |   addq.l #1,d1
   16fce:	|  |   move.l d1,(sp)
   16fd0:	|  |   move.l 12(sp),d1
   16fd4:	|  |   movea.l d0,a0
   16fd6:	|  |   move.b d1,(a0)
	while(len-- > 0)
   16fd8:	|  \-> move.l 16(sp),d0
   16fdc:	|      move.l d0,d1
   16fde:	|      subq.l #1,d1
   16fe0:	|      move.l d1,16(sp)
   16fe4:	|      tst.l d0
   16fe6:	\----- bne.s 16fc8 <memset+0x8>
	return dest;
   16fe8:	       move.l 8(sp),d0
}
   16fec:	       addq.l #4,sp
   16fee:	       rts

00016ff0 <memcpy>:
void* memcpy(void *dest, const void *src, unsigned long len) {
   16ff0:	       subq.l #8,sp
   16ff2:	       move.l d2,-(sp)
	char *d = (char *)dest;
   16ff4:	       move.l 16(sp),8(sp)
	const char *s = (const char *)src;
   16ffa:	       move.l 20(sp),4(sp)
	while(len--)
   17000:	   /-- bra.s 17022 <memcpy+0x32>
		*d++ = *s++;
   17002:	/--|-> move.l 4(sp),d1
   17006:	|  |   move.l d1,d0
   17008:	|  |   addq.l #1,d0
   1700a:	|  |   move.l d0,4(sp)
   1700e:	|  |   move.l 8(sp),d0
   17012:	|  |   move.l d0,d2
   17014:	|  |   addq.l #1,d2
   17016:	|  |   move.l d2,8(sp)
   1701a:	|  |   movea.l d1,a0
   1701c:	|  |   move.b (a0),d1
   1701e:	|  |   movea.l d0,a0
   17020:	|  |   move.b d1,(a0)
	while(len--)
   17022:	|  \-> move.l 24(sp),d0
   17026:	|      move.l d0,d1
   17028:	|      subq.l #1,d1
   1702a:	|      move.l d1,24(sp)
   1702e:	|      tst.l d0
   17030:	\----- bne.s 17002 <memcpy+0x12>
	return dest;
   17032:	       move.l 16(sp),d0
}
   17036:	       move.l (sp)+,d2
   17038:	       addq.l #8,sp
   1703a:	       rts

0001703c <KPrintF>:
void KPrintF(const char* fmt, ...) {
   1703c:	       lea -128(sp),sp
   17040:	       movem.l a2-a3/a6,-(sp)
	if(*((UWORD *)UaeDbgLog) == 0x4eb9 || *((UWORD *)UaeDbgLog) == 0xa00e) {
   17044:	       move.w f0ff60 <gcc8_c_support.c.1fed348d+0xec4ca2>,d0
   1704a:	       cmpi.w #20153,d0
   1704e:	   /-- beq.s 17072 <KPrintF+0x36>
   17050:	   |   cmpi.w #-24562,d0
   17054:	   +-- beq.s 17072 <KPrintF+0x36>
		RawDoFmt((CONST_STRPTR)fmt, vl, KPutCharX, 0);
   17056:	   |   movea.l 1a7a4 <SysBase>,a6
   1705c:	   |   movea.l 144(sp),a0
   17060:	   |   lea 148(sp),a1
   17064:	   |   lea 17ad0 <KPutCharX>,a2
   1706a:	   |   suba.l a3,a3
   1706c:	   |   jsr -522(a6)
}
   17070:	/--|-- bra.s 1709c <KPrintF+0x60>
		RawDoFmt((CONST_STRPTR)fmt, vl, PutChar, temp);
   17072:	|  \-> movea.l 1a7a4 <SysBase>,a6
   17078:	|      movea.l 144(sp),a0
   1707c:	|      lea 148(sp),a1
   17080:	|      lea 17ade <PutChar>,a2
   17086:	|      lea 12(sp),a3
   1708a:	|      jsr -522(a6)
		UaeDbgLog(86, temp);
   1708e:	|      move.l a3,-(sp)
   17090:	|      pea 56 <_start+0x56>
   17094:	|      jsr f0ff60 <gcc8_c_support.c.1fed348d+0xec4ca2>
	if(*((UWORD *)UaeDbgLog) == 0x4eb9 || *((UWORD *)UaeDbgLog) == 0xa00e) {
   1709a:	|      addq.l #8,sp
}
   1709c:	\----> movem.l (sp)+,a2-a3/a6
   170a0:	       lea 128(sp),sp
   170a4:	       rts

000170a6 <debug_cmd>:
		UaeConf(82, -1, on ? "blitter_cycle_exact false" : "blitter_cycle_exact true", 0, &outbuf, 1);
		UaeConf(82, -1, on ? "warp true" : "warp false", 0, &outbuf, 1);
	}
}

static void debug_cmd(unsigned int arg1, unsigned int arg2, unsigned int arg3, unsigned int arg4) {
   170a6:	       subq.l #4,sp
	long(*UaeLib)(unsigned int arg0, unsigned int arg1, unsigned int arg2, unsigned int arg3, unsigned int arg4);
	UaeLib = (long(*)(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int))0xf0ff60;
   170a8:	       move.l #15794016,(sp)
	if(*((UWORD *)UaeLib) == 0x4eb9 || *((UWORD *)UaeLib) == 0xa00e) {
   170ae:	       movea.l (sp),a0
   170b0:	       move.w (a0),d0
   170b2:	       cmpi.w #20153,d0
   170b6:	   /-- beq.s 170c2 <debug_cmd+0x1c>
   170b8:	   |   movea.l (sp),a0
   170ba:	   |   move.w (a0),d0
   170bc:	   |   cmpi.w #-24562,d0
   170c0:	/--|-- bne.s 170e0 <debug_cmd+0x3a>
		UaeLib(88, arg1, arg2, arg3, arg4);
   170c2:	|  \-> move.l 20(sp),-(sp)
   170c6:	|      move.l 20(sp),-(sp)
   170ca:	|      move.l 20(sp),-(sp)
   170ce:	|      move.l 20(sp),-(sp)
   170d2:	|      pea 58 <_start+0x58>
   170d6:	|      movea.l 20(sp),a0
   170da:	|      jsr (a0)
   170dc:	|      lea 20(sp),sp
	}
}
   170e0:	\----> nop
   170e2:	       addq.l #4,sp
   170e4:	       rts

000170e6 <my_strncpy>:
void debug_stop_idle() {
	debug_cmd(barto_cmd_set_idle, 0, 0, 0);
}

// gfx debugger
static void my_strncpy(char* destination, const char* source, unsigned long num) {
   170e6:	       move.l d2,-(sp)
	while(*source && --num > 0)
   170e8:	   /-- bra.s 1710a <my_strncpy+0x24>
		*destination++ = *source++;
   170ea:	/--|-> move.l 12(sp),d1
   170ee:	|  |   move.l d1,d0
   170f0:	|  |   addq.l #1,d0
   170f2:	|  |   move.l d0,12(sp)
   170f6:	|  |   move.l 8(sp),d0
   170fa:	|  |   move.l d0,d2
   170fc:	|  |   addq.l #1,d2
   170fe:	|  |   move.l d2,8(sp)
   17102:	|  |   movea.l d1,a0
   17104:	|  |   move.b (a0),d1
   17106:	|  |   movea.l d0,a0
   17108:	|  |   move.b d1,(a0)
	while(*source && --num > 0)
   1710a:	|  \-> movea.l 12(sp),a0
   1710e:	|      move.b (a0),d0
   17110:	|  /-- beq.s 17118 <my_strncpy+0x32>
   17112:	|  |   subq.l #1,16(sp)
   17116:	\--|-- bne.s 170ea <my_strncpy+0x4>
	*destination = '\0';
   17118:	   \-> movea.l 8(sp),a0
   1711c:	       clr.b (a0)
}
   1711e:	       nop
   17120:	       move.l (sp)+,d2
   17122:	       rts

00017124 <debug_register_bitmap>:

void debug_register_bitmap(const void* addr, const char* name, short width, short height, short numPlanes, unsigned short flags) {
   17124:	    lea -60(sp),sp
   17128:	    movea.l 72(sp),a1
   1712c:	    movea.l 76(sp),a0
   17130:	    move.l 80(sp),d1
   17134:	    move.l 84(sp),d0
   17138:	    movea.w a1,a1
   1713a:	    move.w a1,8(sp)
   1713e:	    movea.w a0,a0
   17140:	    move.w a0,6(sp)
   17144:	    move.w d1,d1
   17146:	    move.w d1,4(sp)
   1714a:	    move.w d0,d0
   1714c:	    move.w d0,2(sp)
	struct debug_resource resource = {
   17150:	    lea 10(sp),a0
   17154:	    clr.l (a0)
   17156:	    addq.l #4,a0
   17158:	    clr.l (a0)
   1715a:	    addq.l #4,a0
   1715c:	    clr.l (a0)
   1715e:	    addq.l #4,a0
   17160:	    clr.l (a0)
   17162:	    addq.l #4,a0
   17164:	    clr.l (a0)
   17166:	    addq.l #4,a0
   17168:	    clr.l (a0)
   1716a:	    addq.l #4,a0
   1716c:	    clr.l (a0)
   1716e:	    addq.l #4,a0
   17170:	    clr.l (a0)
   17172:	    addq.l #4,a0
   17174:	    clr.l (a0)
   17176:	    addq.l #4,a0
   17178:	    clr.l (a0)
   1717a:	    addq.l #4,a0
   1717c:	    clr.l (a0)
   1717e:	    addq.l #4,a0
   17180:	    clr.l (a0)
   17182:	    addq.l #4,a0
   17184:	    clr.w (a0)
   17186:	    addq.l #2,a0
		.address = (unsigned int)addr,
   17188:	    move.l 64(sp),d0
	struct debug_resource resource = {
   1718c:	    move.l d0,10(sp)
		.size = width / 8 * height * numPlanes,
   17190:	    move.w 8(sp),d0
   17194:	/-- bpl.s 17198 <debug_register_bitmap+0x74>
   17196:	|   addq.w #7,d0
   17198:	\-> asr.w #3,d0
   1719a:	    movea.w d0,a0
   1719c:	    movea.w 6(sp),a1
   171a0:	    move.l a1,-(sp)
   171a2:	    move.l a0,-(sp)
   171a4:	    jsr 179c8 <__mulsi3>
   171aa:	    addq.l #8,sp
   171ac:	    movea.w 4(sp),a0
   171b0:	    move.l a0,-(sp)
   171b2:	    move.l d0,-(sp)
   171b4:	    jsr 179c8 <__mulsi3>
   171ba:	    addq.l #8,sp
	struct debug_resource resource = {
   171bc:	    move.l d0,14(sp)
   171c0:	    move.w 2(sp),52(sp)
   171c6:	    move.w 8(sp),54(sp)
   171cc:	    move.w 6(sp),56(sp)
   171d2:	    move.w 4(sp),58(sp)
		.type = debug_resource_type_bitmap,
		.flags = flags,
		.bitmap = { width, height, numPlanes }
	};

	if (flags & debug_resource_bitmap_masked)
   171d8:	    moveq #0,d0
   171da:	    move.w 2(sp),d0
   171de:	    moveq #2,d1
   171e0:	    and.l d1,d0
   171e2:	/-- beq.s 171ee <debug_register_bitmap+0xca>
		resource.size *= 2;
   171e4:	|   move.l 14(sp),d0
   171e8:	|   add.l d0,d0
   171ea:	|   move.l d0,14(sp)

	my_strncpy(resource.name, name, sizeof(resource.name));
   171ee:	\-> pea 20 <_start+0x20>
   171f2:	    move.l 72(sp),-(sp)
   171f6:	    lea 18(sp),a0
   171fa:	    move.l a0,d0
   171fc:	    addq.l #8,d0
   171fe:	    move.l d0,-(sp)
   17200:	    jsr 170e6 <my_strncpy>
   17206:	    lea 12(sp),sp
	debug_cmd(barto_cmd_register_resource, (unsigned int)&resource, 0, 0);
   1720a:	    lea 10(sp),a0
   1720e:	    clr.l -(sp)
   17210:	    clr.l -(sp)
   17212:	    move.l a0,-(sp)
   17214:	    pea 4 <_start+0x4>
   17218:	    jsr 170a6 <debug_cmd>
   1721e:	    lea 16(sp),sp
}
   17222:	    nop
   17224:	    lea 60(sp),sp
   17228:	    rts

0001722a <__addsf3>:
	};
	my_strncpy(resource.name, name, sizeof(resource.name));
	debug_cmd(barto_cmd_save, (unsigned int)&resource, 0, 0);
}

FLOAT __addsf3( FLOAT a, FLOAT b) {
   1722a:	lea -12(sp),sp
   1722e:	move.l a6,-(sp)
	return IEEESPAdd( a, b);
   17230:	move.l 20(sp),12(sp)
   17236:	move.l 24(sp),8(sp)
   1723c:	move.l 1a7b4 <MathIeeeSingBasBase>,d0
   17242:	movea.l d0,a6
   17244:	move.l 12(sp),d0
   17248:	move.l 8(sp),d1
   1724c:	jsr -66(a6)
   17250:	move.l d0,4(sp)
   17254:	move.l 4(sp),d0
}
   17258:	movea.l (sp)+,a6
   1725a:	lea 12(sp),sp
   1725e:	rts

00017260 <__adddf3>:

DOUBLE __adddf3( DOUBLE a, DOUBLE b) {
   17260:	lea -32(sp),sp
   17264:	movem.l d2-d3/a6,-(sp)
	return IEEEDPAdd( a, b);
   17268:	move.l 48(sp),36(sp)
   1726e:	move.l 52(sp),40(sp)
   17274:	move.l 56(sp),28(sp)
   1727a:	move.l 60(sp),32(sp)
   17280:	move.l 1a7bc <MathIeeeDoubBasBase>,d0
   17286:	movea.l d0,a6
   17288:	move.l 36(sp),d0
   1728c:	move.l 40(sp),d1
   17290:	move.l 28(sp),d2
   17294:	move.l 32(sp),d3
   17298:	jsr -66(a6)
   1729c:	move.l d0,12(sp)
   172a0:	move.l d1,16(sp)
   172a4:	move.l 12(sp),20(sp)
   172aa:	move.l 16(sp),24(sp)
   172b0:	move.l 20(sp),d0
   172b4:	move.l 24(sp),d1
}
   172b8:	movem.l (sp)+,d2-d3/a6
   172bc:	lea 32(sp),sp
   172c0:	rts

000172c2 <__divdf3>:

DOUBLE __divdf3( DOUBLE a, DOUBLE b) {
   172c2:	lea -32(sp),sp
   172c6:	movem.l d2-d3/a6,-(sp)
	return IEEEDPDiv( a, b);
   172ca:	move.l 48(sp),36(sp)
   172d0:	move.l 52(sp),40(sp)
   172d6:	move.l 56(sp),28(sp)
   172dc:	move.l 60(sp),32(sp)
   172e2:	move.l 1a7bc <MathIeeeDoubBasBase>,d0
   172e8:	movea.l d0,a6
   172ea:	move.l 36(sp),d0
   172ee:	move.l 40(sp),d1
   172f2:	move.l 28(sp),d2
   172f6:	move.l 32(sp),d3
   172fa:	jsr -84(a6)
   172fe:	move.l d0,12(sp)
   17302:	move.l d1,16(sp)
   17306:	move.l 12(sp),20(sp)
   1730c:	move.l 16(sp),24(sp)
   17312:	move.l 20(sp),d0
   17316:	move.l 24(sp),d1
}
   1731a:	movem.l (sp)+,d2-d3/a6
   1731e:	lea 32(sp),sp
   17322:	rts

00017324 <__divsf3>:

FLOAT __divsf3( FLOAT a, FLOAT b) {
   17324:	lea -12(sp),sp
   17328:	move.l a6,-(sp)
	return IEEESPDiv( a, b);
   1732a:	move.l 20(sp),12(sp)
   17330:	move.l 24(sp),8(sp)
   17336:	move.l 1a7b4 <MathIeeeSingBasBase>,d0
   1733c:	movea.l d0,a6
   1733e:	move.l 12(sp),d0
   17342:	move.l 8(sp),d1
   17346:	jsr -84(a6)
   1734a:	move.l d0,4(sp)
   1734e:	move.l 4(sp),d0
}
   17352:	movea.l (sp)+,a6
   17354:	lea 12(sp),sp
   17358:	rts

0001735a <__eqsf2>:

int __eqsf2( FLOAT a, FLOAT b) {
   1735a:	lea -12(sp),sp
   1735e:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   17360:	move.l 20(sp),12(sp)
   17366:	move.l 24(sp),8(sp)
   1736c:	move.l 1a7b4 <MathIeeeSingBasBase>,d0
   17372:	movea.l d0,a6
   17374:	move.l 12(sp),d0
   17378:	move.l 8(sp),d1
   1737c:	jsr -42(a6)
   17380:	move.l d0,4(sp)
   17384:	move.l 4(sp),d0
}
   17388:	movea.l (sp)+,a6
   1738a:	lea 12(sp),sp
   1738e:	rts

00017390 <__extendsfdf2>:

DOUBLE __extendsfdf2 (FLOAT a) {
   17390:	lea -20(sp),sp
   17394:	move.l a6,-(sp)
	return IEEEDPFieee( a );
   17396:	move.l 28(sp),20(sp)
   1739c:	move.l 1a7c0 <MathIeeeDoubTransBase>,d0
   173a2:	movea.l d0,a6
   173a4:	move.l 20(sp),d0
   173a8:	jsr -108(a6)
   173ac:	move.l d0,4(sp)
   173b0:	move.l d1,8(sp)
   173b4:	move.l 4(sp),12(sp)
   173ba:	move.l 8(sp),16(sp)
   173c0:	move.l 12(sp),d0
   173c4:	move.l 16(sp),d1
}
   173c8:	movea.l (sp)+,a6
   173ca:	lea 20(sp),sp
   173ce:	rts

000173d0 <__fixdfsi>:

LONG __fixdfsi(DOUBLE value) {
   173d0:	lea -12(sp),sp
   173d4:	move.l a6,-(sp)
	return IEEEDPFix(value);
   173d6:	move.l 20(sp),8(sp)
   173dc:	move.l 24(sp),12(sp)
   173e2:	move.l 1a7bc <MathIeeeDoubBasBase>,d0
   173e8:	movea.l d0,a6
   173ea:	move.l 8(sp),d0
   173ee:	move.l 12(sp),d1
   173f2:	jsr -30(a6)
   173f6:	move.l d0,4(sp)
   173fa:	move.l 4(sp),d0
}
   173fe:	movea.l (sp)+,a6
   17400:	lea 12(sp),sp
   17404:	rts

00017406 <__fixsfsi>:

LONG __fixsfsi(FLOAT value) {
   17406:	subq.l #8,sp
   17408:	move.l a6,-(sp)
	return IEEESPFix(value);
   1740a:	move.l 16(sp),8(sp)
   17410:	move.l 1a7b4 <MathIeeeSingBasBase>,d0
   17416:	movea.l d0,a6
   17418:	move.l 8(sp),d0
   1741c:	jsr -30(a6)
   17420:	move.l d0,4(sp)
   17424:	move.l 4(sp),d0
}
   17428:	movea.l (sp)+,a6
   1742a:	addq.l #8,sp
   1742c:	rts

0001742e <__floatsidf>:


DOUBLE __floatsidf (int i) {
   1742e:	lea -20(sp),sp
   17432:	move.l a6,-(sp)
	return IEEEDPFlt((LONG) i);  
   17434:	move.l 28(sp),20(sp)
   1743a:	move.l 1a7bc <MathIeeeDoubBasBase>,d0
   17440:	movea.l d0,a6
   17442:	move.l 20(sp),d0
   17446:	jsr -36(a6)
   1744a:	move.l d0,4(sp)
   1744e:	move.l d1,8(sp)
   17452:	move.l 4(sp),12(sp)
   17458:	move.l 8(sp),16(sp)
   1745e:	move.l 12(sp),d0
   17462:	move.l 16(sp),d1
}
   17466:	movea.l (sp)+,a6
   17468:	lea 20(sp),sp
   1746c:	rts

0001746e <__floatsisf>:

FLOAT __floatsisf(int i) {
   1746e:	subq.l #8,sp
   17470:	move.l a6,-(sp)
	return IEEESPFlt((LONG) i); 
   17472:	move.l 16(sp),8(sp)
   17478:	move.l 1a7b4 <MathIeeeSingBasBase>,d0
   1747e:	movea.l d0,a6
   17480:	move.l 8(sp),d0
   17484:	jsr -36(a6)
   17488:	move.l d0,4(sp)
   1748c:	move.l 4(sp),d0
}
   17490:	movea.l (sp)+,a6
   17492:	addq.l #8,sp
   17494:	rts

00017496 <__floatunsisf>:

FLOAT __floatunsisf(unsigned int i) {	
   17496:	subq.l #8,sp
   17498:	move.l a6,-(sp)
	return IEEESPFlt((LONG) i); 
   1749a:	move.l 16(sp),8(sp)
   174a0:	move.l 1a7b4 <MathIeeeSingBasBase>,d0
   174a6:	movea.l d0,a6
   174a8:	move.l 8(sp),d0
   174ac:	jsr -36(a6)
   174b0:	move.l d0,4(sp)
   174b4:	move.l 4(sp),d0
}
   174b8:	movea.l (sp)+,a6
   174ba:	addq.l #8,sp
   174bc:	rts

000174be <__muldf3>:

DOUBLE __muldf3( DOUBLE leftParm, DOUBLE rightParm ) {
   174be:	lea -32(sp),sp
   174c2:	movem.l d2-d3/a6,-(sp)
	return IEEEDPMul( leftParm, rightParm);
   174c6:	move.l 48(sp),36(sp)
   174cc:	move.l 52(sp),40(sp)
   174d2:	move.l 56(sp),28(sp)
   174d8:	move.l 60(sp),32(sp)
   174de:	move.l 1a7bc <MathIeeeDoubBasBase>,d0
   174e4:	movea.l d0,a6
   174e6:	move.l 36(sp),d0
   174ea:	move.l 40(sp),d1
   174ee:	move.l 28(sp),d2
   174f2:	move.l 32(sp),d3
   174f6:	jsr -78(a6)
   174fa:	move.l d0,12(sp)
   174fe:	move.l d1,16(sp)
   17502:	move.l 12(sp),20(sp)
   17508:	move.l 16(sp),24(sp)
   1750e:	move.l 20(sp),d0
   17512:	move.l 24(sp),d1
}
   17516:	movem.l (sp)+,d2-d3/a6
   1751a:	lea 32(sp),sp
   1751e:	rts

00017520 <__mulsf3>:

 //FLOAT IEEESPMul( FLOAT leftParm, FLOAT rightParm );
FLOAT __mulsf3( FLOAT leftParm, FLOAT rightParm ) {
   17520:	lea -12(sp),sp
   17524:	move.l a6,-(sp)
	return IEEESPMul( leftParm, rightParm);
   17526:	move.l 20(sp),12(sp)
   1752c:	move.l 24(sp),8(sp)
   17532:	move.l 1a7b4 <MathIeeeSingBasBase>,d0
   17538:	movea.l d0,a6
   1753a:	move.l 12(sp),d0
   1753e:	move.l 8(sp),d1
   17542:	jsr -78(a6)
   17546:	move.l d0,4(sp)
   1754a:	move.l 4(sp),d0
}
   1754e:	movea.l (sp)+,a6
   17550:	lea 12(sp),sp
   17554:	rts

00017556 <__gesf2>:


int __gesf2( FLOAT a, FLOAT b) {
   17556:	lea -12(sp),sp
   1755a:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   1755c:	move.l 20(sp),12(sp)
   17562:	move.l 24(sp),8(sp)
   17568:	move.l 1a7b4 <MathIeeeSingBasBase>,d0
   1756e:	movea.l d0,a6
   17570:	move.l 12(sp),d0
   17574:	move.l 8(sp),d1
   17578:	jsr -42(a6)
   1757c:	move.l d0,4(sp)
   17580:	move.l 4(sp),d0
}
   17584:	movea.l (sp)+,a6
   17586:	lea 12(sp),sp
   1758a:	rts

0001758c <__gtdf2>:

int __gtdf2( DOUBLE a, DOUBLE b) {
   1758c:	lea -20(sp),sp
   17590:	movem.l d2-d3/a6,-(sp)
	return IEEEDPCmp( a, b);
   17594:	move.l 36(sp),24(sp)
   1759a:	move.l 40(sp),28(sp)
   175a0:	move.l 44(sp),16(sp)
   175a6:	move.l 48(sp),20(sp)
   175ac:	move.l 1a7bc <MathIeeeDoubBasBase>,d0
   175b2:	movea.l d0,a6
   175b4:	move.l 24(sp),d0
   175b8:	move.l 28(sp),d1
   175bc:	move.l 16(sp),d2
   175c0:	move.l 20(sp),d3
   175c4:	jsr -42(a6)
   175c8:	move.l d0,12(sp)
   175cc:	move.l 12(sp),d0
}
   175d0:	movem.l (sp)+,d2-d3/a6
   175d4:	lea 20(sp),sp
   175d8:	rts

000175da <__gtsf2>:

int __gtsf2( FLOAT a, FLOAT b) {
   175da:	lea -12(sp),sp
   175de:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   175e0:	move.l 20(sp),12(sp)
   175e6:	move.l 24(sp),8(sp)
   175ec:	move.l 1a7b4 <MathIeeeSingBasBase>,d0
   175f2:	movea.l d0,a6
   175f4:	move.l 12(sp),d0
   175f8:	move.l 8(sp),d1
   175fc:	jsr -42(a6)
   17600:	move.l d0,4(sp)
   17604:	move.l 4(sp),d0
}
   17608:	movea.l (sp)+,a6
   1760a:	lea 12(sp),sp
   1760e:	rts

00017610 <__lesf2>:

int __lesf2( FLOAT a, FLOAT b) {
   17610:	lea -12(sp),sp
   17614:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   17616:	move.l 20(sp),12(sp)
   1761c:	move.l 24(sp),8(sp)
   17622:	move.l 1a7b4 <MathIeeeSingBasBase>,d0
   17628:	movea.l d0,a6
   1762a:	move.l 12(sp),d0
   1762e:	move.l 8(sp),d1
   17632:	jsr -42(a6)
   17636:	move.l d0,4(sp)
   1763a:	move.l 4(sp),d0
}
   1763e:	movea.l (sp)+,a6
   17640:	lea 12(sp),sp
   17644:	rts

00017646 <__ltdf2>:

int __ltdf2( DOUBLE a, DOUBLE b) {
   17646:	lea -20(sp),sp
   1764a:	movem.l d2-d3/a6,-(sp)
	return IEEEDPCmp( a, b);
   1764e:	move.l 36(sp),24(sp)
   17654:	move.l 40(sp),28(sp)
   1765a:	move.l 44(sp),16(sp)
   17660:	move.l 48(sp),20(sp)
   17666:	move.l 1a7bc <MathIeeeDoubBasBase>,d0
   1766c:	movea.l d0,a6
   1766e:	move.l 24(sp),d0
   17672:	move.l 28(sp),d1
   17676:	move.l 16(sp),d2
   1767a:	move.l 20(sp),d3
   1767e:	jsr -42(a6)
   17682:	move.l d0,12(sp)
   17686:	move.l 12(sp),d0
}
   1768a:	movem.l (sp)+,d2-d3/a6
   1768e:	lea 20(sp),sp
   17692:	rts

00017694 <__ltsf2>:

int __ltsf2( FLOAT a, FLOAT b) {
   17694:	lea -12(sp),sp
   17698:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   1769a:	move.l 20(sp),12(sp)
   176a0:	move.l 24(sp),8(sp)
   176a6:	move.l 1a7b4 <MathIeeeSingBasBase>,d0
   176ac:	movea.l d0,a6
   176ae:	move.l 12(sp),d0
   176b2:	move.l 8(sp),d1
   176b6:	jsr -42(a6)
   176ba:	move.l d0,4(sp)
   176be:	move.l 4(sp),d0
}
   176c2:	movea.l (sp)+,a6
   176c4:	lea 12(sp),sp
   176c8:	rts

000176ca <__nesf2>:

int __nesf2( FLOAT a, FLOAT b) {
   176ca:	lea -12(sp),sp
   176ce:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   176d0:	move.l 20(sp),12(sp)
   176d6:	move.l 24(sp),8(sp)
   176dc:	move.l 1a7b4 <MathIeeeSingBasBase>,d0
   176e2:	movea.l d0,a6
   176e4:	move.l 12(sp),d0
   176e8:	move.l 8(sp),d1
   176ec:	jsr -42(a6)
   176f0:	move.l d0,4(sp)
   176f4:	move.l 4(sp),d0
}
   176f8:	movea.l (sp)+,a6
   176fa:	lea 12(sp),sp
   176fe:	rts

00017700 <__subdf3>:

DOUBLE __subdf3 (DOUBLE a, DOUBLE b) {
   17700:	lea -32(sp),sp
   17704:	movem.l d2-d3/a6,-(sp)
	return IEEEDPSub( a, b);
   17708:	move.l 48(sp),36(sp)
   1770e:	move.l 52(sp),40(sp)
   17714:	move.l 56(sp),28(sp)
   1771a:	move.l 60(sp),32(sp)
   17720:	move.l 1a7bc <MathIeeeDoubBasBase>,d0
   17726:	movea.l d0,a6
   17728:	move.l 36(sp),d0
   1772c:	move.l 40(sp),d1
   17730:	move.l 28(sp),d2
   17734:	move.l 32(sp),d3
   17738:	jsr -72(a6)
   1773c:	move.l d0,12(sp)
   17740:	move.l d1,16(sp)
   17744:	move.l 12(sp),20(sp)
   1774a:	move.l 16(sp),24(sp)
   17750:	move.l 20(sp),d0
   17754:	move.l 24(sp),d1
}
   17758:	movem.l (sp)+,d2-d3/a6
   1775c:	lea 32(sp),sp
   17760:	rts

00017762 <__subsf3>:

FLOAT __subsf3 (float a, float b) {
   17762:	lea -12(sp),sp
   17766:	move.l a6,-(sp)
	return IEEESPSub( a, b);
   17768:	move.l 20(sp),12(sp)
   1776e:	move.l 24(sp),8(sp)
   17774:	move.l 1a7b4 <MathIeeeSingBasBase>,d0
   1777a:	movea.l d0,a6
   1777c:	move.l 12(sp),d0
   17780:	move.l 8(sp),d1
   17784:	jsr -72(a6)
   17788:	move.l d0,4(sp)
   1778c:	move.l 4(sp),d0
}
   17790:	movea.l (sp)+,a6
   17792:	lea 12(sp),sp
   17796:	rts

00017798 <__truncdfsf2>:

FLOAT __truncdfsf2(DOUBLE a) {
   17798:	lea -12(sp),sp
   1779c:	move.l a6,-(sp)
	return IEEEDPTieee( a);
   1779e:	move.l 20(sp),8(sp)
   177a4:	move.l 24(sp),12(sp)
   177aa:	move.l 1a7c0 <MathIeeeDoubTransBase>,d0
   177b0:	movea.l d0,a6
   177b2:	move.l 8(sp),d0
   177b6:	move.l 12(sp),d1
   177ba:	jsr -102(a6)
   177be:	move.l d0,4(sp)
   177c2:	move.l 4(sp),d0
}
   177c6:	movea.l (sp)+,a6
   177c8:	lea 12(sp),sp
   177cc:	rts

000177ce <atan2f>:

unsigned int __fixunssfsi (float a) {
	return IEEESPFix(a);
}

FLOAT atan2f(FLOAT y, FLOAT x) {
   177ce:	       lea -24(sp),sp
   177d2:	       move.l a6,-(sp)
    if (x > 0) {
   177d4:	       clr.l -(sp)
   177d6:	       move.l 40(sp),-(sp)
   177da:	       jsr 175da <__gtsf2>
   177e0:	       addq.l #8,sp
   177e2:	       tst.l d0
   177e4:	   /-- ble.s 17816 <atan2f+0x48>
        return IEEESPAtan(y / x);
   177e6:	   |   move.l 36(sp),-(sp)
   177ea:	   |   move.l 36(sp),-(sp)
   177ee:	   |   jsr 17324 <__divsf3>
   177f4:	   |   addq.l #8,sp
   177f6:	   |   move.l d0,8(sp)
   177fa:	   |   move.l 1a7b8 <MathIeeeSingTransBase>,d0
   17800:	   |   movea.l d0,a6
   17802:	   |   move.l 8(sp),d0
   17806:	   |   jsr -30(a6)
   1780a:	   |   move.l d0,4(sp)
   1780e:	   |   move.l 4(sp),d0
   17812:	/--|-- bra.w 17976 <atan2f+0x1a8>
    } else if (x < 0 && y >= 0) {
   17816:	|  \-> clr.l -(sp)
   17818:	|      move.l 40(sp),-(sp)
   1781c:	|      jsr 17694 <__ltsf2>
   17822:	|      addq.l #8,sp
   17824:	|      tst.l d0
   17826:	|  /-- bge.s 1789a <atan2f+0xcc>
   17828:	|  |   clr.l -(sp)
   1782a:	|  |   move.l 36(sp),-(sp)
   1782e:	|  |   jsr 17556 <__gesf2>
   17834:	|  |   addq.l #8,sp
   17836:	|  |   tst.l d0
   17838:	|  +-- blt.s 1789a <atan2f+0xcc>
        return IEEESPAtan(y / x) + PI;
   1783a:	|  |   move.l 36(sp),-(sp)
   1783e:	|  |   move.l 36(sp),-(sp)
   17842:	|  |   jsr 17324 <__divsf3>
   17848:	|  |   addq.l #8,sp
   1784a:	|  |   move.l d0,24(sp)
   1784e:	|  |   move.l 1a7b8 <MathIeeeSingTransBase>,d0
   17854:	|  |   movea.l d0,a6
   17856:	|  |   move.l 24(sp),d0
   1785a:	|  |   jsr -30(a6)
   1785e:	|  |   move.l d0,20(sp)
   17862:	|  |   move.l 20(sp),d0
   17866:	|  |   move.l d0,-(sp)
   17868:	|  |   jsr 17390 <__extendsfdf2>
   1786e:	|  |   addq.l #4,sp
   17870:	|  |   move.l #1413754136,-(sp)
   17876:	|  |   move.l #1074340347,-(sp)
   1787c:	|  |   move.l d1,-(sp)
   1787e:	|  |   move.l d0,-(sp)
   17880:	|  |   jsr 17260 <__adddf3>
   17886:	|  |   lea 16(sp),sp
   1788a:	|  |   move.l d1,-(sp)
   1788c:	|  |   move.l d0,-(sp)
   1788e:	|  |   jsr 17798 <__truncdfsf2>
   17894:	|  |   addq.l #8,sp
   17896:	+--|-- bra.w 17976 <atan2f+0x1a8>
    } else if (x < 0 && y < 0) {
   1789a:	|  \-> clr.l -(sp)
   1789c:	|      move.l 40(sp),-(sp)
   178a0:	|      jsr 17694 <__ltsf2>
   178a6:	|      addq.l #8,sp
   178a8:	|      tst.l d0
   178aa:	|  /-- bge.s 1791c <atan2f+0x14e>
   178ac:	|  |   clr.l -(sp)
   178ae:	|  |   move.l 36(sp),-(sp)
   178b2:	|  |   jsr 17694 <__ltsf2>
   178b8:	|  |   addq.l #8,sp
   178ba:	|  |   tst.l d0
   178bc:	|  +-- bge.s 1791c <atan2f+0x14e>
        return IEEESPAtan(y / x) - PI;
   178be:	|  |   move.l 36(sp),-(sp)
   178c2:	|  |   move.l 36(sp),-(sp)
   178c6:	|  |   jsr 17324 <__divsf3>
   178cc:	|  |   addq.l #8,sp
   178ce:	|  |   move.l d0,16(sp)
   178d2:	|  |   move.l 1a7b8 <MathIeeeSingTransBase>,d0
   178d8:	|  |   movea.l d0,a6
   178da:	|  |   move.l 16(sp),d0
   178de:	|  |   jsr -30(a6)
   178e2:	|  |   move.l d0,12(sp)
   178e6:	|  |   move.l 12(sp),d0
   178ea:	|  |   move.l d0,-(sp)
   178ec:	|  |   jsr 17390 <__extendsfdf2>
   178f2:	|  |   addq.l #4,sp
   178f4:	|  |   move.l #1413754136,-(sp)
   178fa:	|  |   move.l #1074340347,-(sp)
   17900:	|  |   move.l d1,-(sp)
   17902:	|  |   move.l d0,-(sp)
   17904:	|  |   jsr 17700 <__subdf3>
   1790a:	|  |   lea 16(sp),sp
   1790e:	|  |   move.l d1,-(sp)
   17910:	|  |   move.l d0,-(sp)
   17912:	|  |   jsr 17798 <__truncdfsf2>
   17918:	|  |   addq.l #8,sp
   1791a:	+--|-- bra.s 17976 <atan2f+0x1a8>
    } else if (x == 0 && y > 0) {
   1791c:	|  \-> clr.l -(sp)
   1791e:	|      move.l 40(sp),-(sp)
   17922:	|      jsr 1735a <__eqsf2>
   17928:	|      addq.l #8,sp
   1792a:	|      tst.l d0
   1792c:	|  /-- bne.s 17948 <atan2f+0x17a>
   1792e:	|  |   clr.l -(sp)
   17930:	|  |   move.l 36(sp),-(sp)
   17934:	|  |   jsr 175da <__gtsf2>
   1793a:	|  |   addq.l #8,sp
   1793c:	|  |   tst.l d0
   1793e:	|  +-- ble.s 17948 <atan2f+0x17a>
        return PI / 2;
   17940:	|  |   move.l #1070141403,d0
   17946:	+--|-- bra.s 17976 <atan2f+0x1a8>
    } else if (x == 0 && y < 0) {
   17948:	|  \-> clr.l -(sp)
   1794a:	|      move.l 40(sp),-(sp)
   1794e:	|      jsr 1735a <__eqsf2>
   17954:	|      addq.l #8,sp
   17956:	|      tst.l d0
   17958:	|  /-- bne.s 17974 <atan2f+0x1a6>
   1795a:	|  |   clr.l -(sp)
   1795c:	|  |   move.l 36(sp),-(sp)
   17960:	|  |   jsr 17694 <__ltsf2>
   17966:	|  |   addq.l #8,sp
   17968:	|  |   tst.l d0
   1796a:	|  +-- bge.s 17974 <atan2f+0x1a6>
        return -PI / 2;
   1796c:	|  |   move.l #-1077342245,d0
   17972:	+--|-- bra.s 17976 <atan2f+0x1a8>
    } else {
        // This case is x == 0 and y == 0, atan2(0, 0) is undefined, but often treated as 0.
        return 0;
   17974:	|  \-> moveq #0,d0
    }
}
   17976:	\----> movea.l (sp)+,a6
   17978:	       lea 24(sp),sp
   1797c:	       rts

0001797e <sqrt>:

DOUBLE sqrt( DOUBLE input) {
   1797e:	lea -24(sp),sp
   17982:	move.l a6,-(sp)
	return IEEEDPSqrt(input);
   17984:	move.l 32(sp),20(sp)
   1798a:	move.l 36(sp),24(sp)
   17990:	move.l 1a7c0 <MathIeeeDoubTransBase>,d0
   17996:	movea.l d0,a6
   17998:	move.l 20(sp),d0
   1799c:	move.l 24(sp),d1
   179a0:	jsr -96(a6)
   179a4:	move.l d0,4(sp)
   179a8:	move.l d1,8(sp)
   179ac:	move.l 4(sp),12(sp)
   179b2:	move.l 8(sp),16(sp)
   179b8:	move.l 12(sp),d0
   179bc:	move.l 16(sp),d1
}
   179c0:	movea.l (sp)+,a6
   179c2:	lea 24(sp),sp
   179c6:	rts

000179c8 <__mulsi3>:
	.section .text.__mulsi3,"ax",@progbits
	.type __mulsi3, function
	.globl	__mulsi3
__mulsi3:
	.cfi_startproc
	movew	sp@(4), d0	/* x0 -> d0 */
   179c8:	move.w 4(sp),d0
	muluw	sp@(10), d0	/* x0*y1 */
   179cc:	mulu.w 10(sp),d0
	movew	sp@(6), d1	/* x1 -> d1 */
   179d0:	move.w 6(sp),d1
	muluw	sp@(8), d1	/* x1*y0 */
   179d4:	mulu.w 8(sp),d1
	addw	d1, d0
   179d8:	add.w d1,d0
	swap	d0
   179da:	swap d0
	clrw	d0
   179dc:	clr.w d0
	movew	sp@(6), d1	/* x1 -> d1 */
   179de:	move.w 6(sp),d1
	muluw	sp@(10), d1	/* x1*y1 */
   179e2:	mulu.w 10(sp),d1
	addl	d1, d0
   179e6:	add.l d1,d0
	rts
   179e8:	rts

000179ea <__udivsi3>:
	.section .text.__udivsi3,"ax",@progbits
	.type __udivsi3, function
	.globl	__udivsi3
__udivsi3:
	.cfi_startproc
	movel	d2, sp@-
   179ea:	       move.l d2,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	sp@(12), d1	/* d1 = divisor */
   179ec:	       move.l 12(sp),d1
	movel	sp@(8), d0	/* d0 = dividend */
   179f0:	       move.l 8(sp),d0

	cmpl	#0x10000, d1 /* divisor >= 2 ^ 16 ?   */
   179f4:	       cmpi.l #65536,d1
	jcc	3f		/* then try next algorithm */
   179fa:	   /-- bcc.s 17a12 <__udivsi3+0x28>
	movel	d0, d2
   179fc:	   |   move.l d0,d2
	clrw	d2
   179fe:	   |   clr.w d2
	swap	d2
   17a00:	   |   swap d2
	divu	d1, d2          /* high quotient in lower word */
   17a02:	   |   divu.w d1,d2
	movew	d2, d0		/* save high quotient */
   17a04:	   |   move.w d2,d0
	swap	d0
   17a06:	   |   swap d0
	movew	sp@(10), d2	/* get low dividend + high rest */
   17a08:	   |   move.w 10(sp),d2
	divu	d1, d2		/* low quotient */
   17a0c:	   |   divu.w d1,d2
	movew	d2, d0
   17a0e:	   |   move.w d2,d0
	jra	6f
   17a10:	/--|-- bra.s 17a42 <__udivsi3+0x58>

3:	movel	d1, d2		/* use d2 as divisor backup */
   17a12:	|  \-> move.l d1,d2
4:	lsrl	#1, d1	/* shift divisor */
   17a14:	|  /-> lsr.l #1,d1
	lsrl	#1, d0	/* shift dividend */
   17a16:	|  |   lsr.l #1,d0
	cmpl	#0x10000, d1 /* still divisor >= 2 ^ 16 ?  */
   17a18:	|  |   cmpi.l #65536,d1
	jcc	4b
   17a1e:	|  \-- bcc.s 17a14 <__udivsi3+0x2a>
	divu	d1, d0		/* now we have 16-bit divisor */
   17a20:	|      divu.w d1,d0
	andl	#0xffff, d0 /* mask out divisor, ignore remainder */
   17a22:	|      andi.l #65535,d0

/* Multiply the 16-bit tentative quotient with the 32-bit divisor.  Because of
   the operand ranges, this might give a 33-bit product.  If this product is
   greater than the dividend, the tentative quotient was too large. */
	movel	d2, d1
   17a28:	|      move.l d2,d1
	mulu	d0, d1		/* low part, 32 bits */
   17a2a:	|      mulu.w d0,d1
	swap	d2
   17a2c:	|      swap d2
	mulu	d0, d2		/* high part, at most 17 bits */
   17a2e:	|      mulu.w d0,d2
	swap	d2		/* align high part with low part */
   17a30:	|      swap d2
	tstw	d2		/* high part 17 bits? */
   17a32:	|      tst.w d2
	jne	5f		/* if 17 bits, quotient was too large */
   17a34:	|  /-- bne.s 17a40 <__udivsi3+0x56>
	addl	d2, d1		/* add parts */
   17a36:	|  |   add.l d2,d1
	jcs	5f		/* if sum is 33 bits, quotient was too large */
   17a38:	|  +-- bcs.s 17a40 <__udivsi3+0x56>
	cmpl	sp@(8), d1	/* compare the sum with the dividend */
   17a3a:	|  |   cmp.l 8(sp),d1
	jls	6f		/* if sum > dividend, quotient was too large */
   17a3e:	+--|-- bls.s 17a42 <__udivsi3+0x58>
5:	subql	#1, d0	/* adjust quotient */
   17a40:	|  \-> subq.l #1,d0

6:	movel	sp@+, d2
   17a42:	\----> move.l (sp)+,d2
	.cfi_adjust_cfa_offset -4
	rts
   17a44:	       rts

00017a46 <__divsi3>:
	.section .text.__divsi3,"ax",@progbits
	.type __divsi3, function
	.globl	__divsi3
 __divsi3:
 	.cfi_startproc
	movel	d2, sp@-
   17a46:	    move.l d2,-(sp)
	.cfi_adjust_cfa_offset 4

	moveq	#1, d2	/* sign of result stored in d2 (=1 or =-1) */
   17a48:	    moveq #1,d2
	movel	sp@(12), d1	/* d1 = divisor */
   17a4a:	    move.l 12(sp),d1
	jpl	1f
   17a4e:	/-- bpl.s 17a54 <__divsi3+0xe>
	negl	d1
   17a50:	|   neg.l d1
	negb	d2		/* change sign because divisor <0  */
   17a52:	|   neg.b d2
1:	movel	sp@(8), d0	/* d0 = dividend */
   17a54:	\-> move.l 8(sp),d0
	jpl	2f
   17a58:	/-- bpl.s 17a5e <__divsi3+0x18>
	negl	d0
   17a5a:	|   neg.l d0
	negb	d2
   17a5c:	|   neg.b d2

2:	movel	d1, sp@-
   17a5e:	\-> move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   17a60:	    move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__udivsi3	/* divide abs(dividend) by abs(divisor) */
   17a62:	    jsr 179ea <__udivsi3>
	addql	#8, sp
   17a68:	    addq.l #8,sp
	.cfi_adjust_cfa_offset -8

	tstb	d2
   17a6a:	    tst.b d2
	jpl	3f
   17a6c:	/-- bpl.s 17a70 <__divsi3+0x2a>
	negl	d0
   17a6e:	|   neg.l d0

3:	movel	sp@+, d2
   17a70:	\-> move.l (sp)+,d2
	.cfi_adjust_cfa_offset -4
	rts
   17a72:	    rts

00017a74 <__modsi3>:
	.section .text.__modsi3,"ax",@progbits
	.type __modsi3, function
	.globl	__modsi3
__modsi3:
	.cfi_startproc
	movel	sp@(8), d1	/* d1 = divisor */
   17a74:	move.l 8(sp),d1
	movel	sp@(4), d0	/* d0 = dividend */
   17a78:	move.l 4(sp),d0
	movel	d1, sp@-
   17a7c:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   17a7e:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__divsi3
   17a80:	jsr 17a46 <__divsi3>
	addql	#8, sp
   17a86:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(8), d1	/* d1 = divisor */
   17a88:	move.l 8(sp),d1
	movel	d1, sp@-
   17a8c:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   17a8e:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__mulsi3	/* d0 = (a/b)*b */
   17a90:	jsr 179c8 <__mulsi3>
	addql	#8, sp
   17a96:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(4), d1	/* d1 = dividend */
   17a98:	move.l 4(sp),d1
	subl	d0, d1		/* d1 = a - (a/b)*b */
   17a9c:	sub.l d0,d1
	movel	d1, d0
   17a9e:	move.l d1,d0
	rts
   17aa0:	rts

00017aa2 <__umodsi3>:
	.section .text.__umodsi3,"ax",@progbits
	.type __umodsi3, function
	.globl	__umodsi3
__umodsi3:
	.cfi_startproc
	movel	sp@(8), d1	/* d1 = divisor */
   17aa2:	move.l 8(sp),d1
	movel	sp@(4), d0	/* d0 = dividend */
   17aa6:	move.l 4(sp),d0
	movel	d1, sp@-
   17aaa:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   17aac:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__udivsi3
   17aae:	jsr 179ea <__udivsi3>
	addql	#8, sp
   17ab4:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(8), d1	/* d1 = divisor */
   17ab6:	move.l 8(sp),d1
	movel	d1, sp@-
   17aba:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   17abc:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__mulsi3	/* d0 = (a/b)*b */
   17abe:	jsr 179c8 <__mulsi3>
	addql	#8, sp
   17ac4:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(4), d1	/* d1 = dividend */
   17ac6:	move.l 4(sp),d1
	subl	d0, d1		/* d1 = a - (a/b)*b */
   17aca:	sub.l d0,d1
	movel	d1, d0
   17acc:	move.l d1,d0
	rts
   17ace:	rts

00017ad0 <KPutCharX>:
	.type KPutCharX, function
	.globl	KPutCharX

KPutCharX:
	.cfi_startproc
    move.l  a6, -(sp)
   17ad0:	move.l a6,-(sp)
	.cfi_adjust_cfa_offset 4
    move.l  4.w, a6
   17ad2:	movea.l 4 <_start+0x4>,a6
    jsr     -0x204(a6)
   17ad6:	jsr -516(a6)
    move.l (sp)+, a6
   17ada:	movea.l (sp)+,a6
	.cfi_adjust_cfa_offset -4
    rts
   17adc:	rts

00017ade <PutChar>:
	.type PutChar, function
	.globl	PutChar

PutChar:
	.cfi_startproc
	move.b d0, (a3)+
   17ade:	move.b d0,(a3)+
	rts
   17ae0:	rts
