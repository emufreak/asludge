
out/a.elf:     file format elf32-m68k


Disassembly of section .text:

00000000 <_start>:
extern void (*__init_array_start[])() __attribute__((weak));
extern void (*__init_array_end[])() __attribute__((weak));
extern void (*__fini_array_start[])() __attribute__((weak));
extern void (*__fini_array_end[])() __attribute__((weak));

__attribute__((used)) __attribute__((section(".text.unlikely"))) void _start() {
       0:	       subq.l #8,sp
	// initialize globals, ctors etc.
	unsigned long count;
	unsigned long i;

	count = __preinit_array_end - __preinit_array_start;
       2:	       move.l #98304,d0
       8:	       subi.l #98304,d0
       e:	       asr.l #2,d0
      10:	       move.l d0,(sp)
	for (i = 0; i < count; i++)
      12:	       clr.l 4(sp)
      16:	   /-- bra.s 32 <_start+0x32>
		__preinit_array_start[i]();
      18:	/--|-> move.l 4(sp),d0
      1c:	|  |   add.l d0,d0
      1e:	|  |   movea.l d0,a1
      20:	|  |   adda.l d0,a1
      22:	|  |   lea 18000 <allowAnyFilename>,a0
      28:	|  |   movea.l (0,a1,a0.l),a0
      2c:	|  |   jsr (a0)
	for (i = 0; i < count; i++)
      2e:	|  |   addq.l #1,4(sp)
      32:	|  \-> move.l 4(sp),d0
      36:	|      cmp.l (sp),d0
      38:	\----- bcs.s 18 <_start+0x18>

	count = __init_array_end - __init_array_start;
      3a:	       move.l #98304,d0
      40:	       subi.l #98304,d0
      46:	       asr.l #2,d0
      48:	       move.l d0,(sp)
	for (i = 0; i < count; i++)
      4a:	       clr.l 4(sp)
      4e:	   /-- bra.s 6a <_start+0x6a>
		__init_array_start[i]();
      50:	/--|-> move.l 4(sp),d0
      54:	|  |   add.l d0,d0
      56:	|  |   movea.l d0,a1
      58:	|  |   adda.l d0,a1
      5a:	|  |   lea 18000 <allowAnyFilename>,a0
      60:	|  |   movea.l (0,a1,a0.l),a0
      64:	|  |   jsr (a0)
	for (i = 0; i < count; i++)
      66:	|  |   addq.l #1,4(sp)
      6a:	|  \-> move.l 4(sp),d0
      6e:	|      cmp.l (sp),d0
      70:	\----- bcs.s 50 <_start+0x50>

	main();
      72:	       jsr 50d8 <main>

	// call dtors
	count = __fini_array_end - __fini_array_start;
      78:	       move.l #98304,d0
      7e:	       subi.l #98304,d0
      84:	       asr.l #2,d0
      86:	       move.l d0,(sp)
	for (i = count; i > 0; i--)
      88:	       move.l (sp),4(sp)
      8c:	   /-- bra.s aa <_start+0xaa>
		__fini_array_start[i - 1]();
      8e:	/--|-> move.l 4(sp),d0
      92:	|  |   subq.l #1,d0
      94:	|  |   add.l d0,d0
      96:	|  |   movea.l d0,a1
      98:	|  |   adda.l d0,a1
      9a:	|  |   lea 18000 <allowAnyFilename>,a0
      a0:	|  |   movea.l (0,a1,a0.l),a0
      a4:	|  |   jsr (a0)
	for (i = count; i > 0; i--)
      a6:	|  |   subq.l #1,4(sp)
      aa:	|  \-> tst.l 4(sp)
      ae:	\----- bne.s 8e <_start+0x8e>
}
      b0:	       nop
      b2:	       nop
      b4:	       addq.l #8,sp
      b6:	       rts

000000b8 <copyString>:
#include "support/gcc8_c_support.h"
#include "moreio.h"

BOOL allowAnyFilename = TRUE;

char * copyString(const char * c) {
      b8:	       lea -16(sp),sp
      bc:	       move.l a6,-(sp)
    char * r = (char *)AllocVec(strlen(c) + 1, MEMF_ANY);
      be:	       move.l 24(sp),-(sp)
      c2:	       jsr 103ac <strlen>
      c8:	       addq.l #4,sp
      ca:	       move.l d0,d1
      cc:	       addq.l #1,d1
      ce:	       move.l d1,16(sp)
      d2:	       clr.l 12(sp)
      d6:	       move.l 19c5e <SysBase>,d0
      dc:	       movea.l d0,a6
      de:	       move.l 16(sp),d0
      e2:	       move.l 12(sp),d1
      e6:	       jsr -684(a6)
      ea:	       move.l d0,8(sp)
      ee:	       move.l 8(sp),d0
      f2:	       move.l d0,4(sp)
    if (!r) return NULL;
      f6:	   /-- bne.s fc <copyString+0x44>
      f8:	   |   moveq #0,d0
      fa:	/--|-- bra.s 110 <copyString+0x58>
    strcpy(r, c);
      fc:	|  \-> move.l 24(sp),-(sp)
     100:	|      move.l 8(sp),-(sp)
     104:	|      jsr 103c4 <strcpy>
     10a:	|      addq.l #8,sp
    return r;
     10c:	|      move.l 4(sp),d0
}
     110:	\----> movea.l (sp)+,a6
     112:	       lea 16(sp),sp
     116:	       rts

00000118 <decodeFilename>:

char * decodeFilename(char * nameIn) {
     118:	                      lea -20(sp),sp
     11c:	                      move.l a6,-(sp)
	if (allowAnyFilename) {
     11e:	                      move.w 18000 <allowAnyFilename>,d0
     124:	/-------------------- beq.w 2ea <decodeFilename+0x1d2>
		char * newName = (char *)AllocVec(strlen(nameIn) + 1, MEMF_ANY);
     128:	|                     move.l 28(sp),-(sp)
     12c:	|                     jsr 103ac <strlen>
     132:	|                     addq.l #4,sp
     134:	|                     move.l d0,d1
     136:	|                     addq.l #1,d1
     138:	|                     move.l d1,16(sp)
     13c:	|                     clr.l 12(sp)
     140:	|                     move.l 19c5e <SysBase>,d0
     146:	|                     movea.l d0,a6
     148:	|                     move.l 16(sp),d0
     14c:	|                     move.l 12(sp),d1
     150:	|                     jsr -684(a6)
     154:	|                     move.l d0,8(sp)
     158:	|                     move.l 8(sp),d0
     15c:	|                     move.l d0,4(sp)
		if (!newName) return NULL;
     160:	|                 /-- bne.s 168 <decodeFilename+0x50>
     162:	|                 |   moveq #0,d0
     164:	|  /--------------|-- bra.w 2f6 <decodeFilename+0x1de>

		int i = 0;
     168:	|  |              \-> clr.l 20(sp)
		while (*nameIn) {
     16c:	|  |     /----------- bra.w 2ce <decodeFilename+0x1b6>
			if (*nameIn == '_') {
     170:	|  |  /--|----------> movea.l 28(sp),a0
     174:	|  |  |  |            move.b (a0),d0
     176:	|  |  |  |            cmpi.b #95,d0
     17a:	|  |  |  |  /-------- bne.w 2b4 <decodeFilename+0x19c>
				nameIn++;
     17e:	|  |  |  |  |         addq.l #1,28(sp)
				switch (*nameIn) {
     182:	|  |  |  |  |         movea.l 28(sp),a0
     186:	|  |  |  |  |         move.b (a0),d0
     188:	|  |  |  |  |         ext.w d0
     18a:	|  |  |  |  |         movea.w d0,a0
     18c:	|  |  |  |  |         moveq #-65,d0
     18e:	|  |  |  |  |         add.l a0,d0
     190:	|  |  |  |  |         moveq #20,d1
     192:	|  |  |  |  |         cmp.l d0,d1
     194:	|  |  |  |  |  /----- bcs.w 2a4 <decodeFilename+0x18c>
     198:	|  |  |  |  |  |      add.l d0,d0
     19a:	|  |  |  |  |  |      movea.l d0,a0
     19c:	|  |  |  |  |  |      adda.l #424,a0
     1a2:	|  |  |  |  |  |      move.w (a0),d0
     1a4:	|  |  |  |  |  |      jmp (1a8 <decodeFilename+0x90>,pc,d0.w)
     1a8:	|  |  |  |  |  |      .short 0x00d4
     1aa:	|  |  |  |  |  |      ori.l #12583164,(a0)+
     1b0:	|  |  |  |  |  |      .short 0x00fc
     1b2:	|  |  |  |  |  |      ori.l #4194556,252(a4)
     1ba:	|  |  |  |  |  |      .short 0x00fc
     1bc:	|  |  |  |  |  |      .short 0x00fc
     1be:	|  |  |  |  |  |      ori.b #-4,252(a2)
     1c4:	|  |  |  |  |  |      .short 0x00fc
     1c6:	|  |  |  |  |  |      ori.w #232,(a6)
     1ca:	|  |  |  |  |  |      .short 0x00fc
     1cc:	|  |  |  |  |  |      ori.l #16515180,d2
					case 'L':	newName[i] = '<';	nameIn++;	break;
     1d2:	|  |  |  |  |  |      move.l 20(sp),d0
     1d6:	|  |  |  |  |  |      movea.l 4(sp),a0
     1da:	|  |  |  |  |  |      adda.l d0,a0
     1dc:	|  |  |  |  |  |      move.b #60,(a0)
     1e0:	|  |  |  |  |  |      addq.l #1,28(sp)
     1e4:	|  |  |  |  |  |  /-- bra.w 2ca <decodeFilename+0x1b2>
					case 'G':	newName[i] = '>';	nameIn++;	break;
     1e8:	|  |  |  |  |  |  |   move.l 20(sp),d0
     1ec:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     1f0:	|  |  |  |  |  |  |   adda.l d0,a0
     1f2:	|  |  |  |  |  |  |   move.b #62,(a0)
     1f6:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     1fa:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'P':	newName[i] = '|';	nameIn++;	break;
     1fe:	|  |  |  |  |  |  |   move.l 20(sp),d0
     202:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     206:	|  |  |  |  |  |  |   adda.l d0,a0
     208:	|  |  |  |  |  |  |   move.b #124,(a0)
     20c:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     210:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'U':	newName[i] = '_';	nameIn++;	break;
     214:	|  |  |  |  |  |  |   move.l 20(sp),d0
     218:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     21c:	|  |  |  |  |  |  |   adda.l d0,a0
     21e:	|  |  |  |  |  |  |   move.b #95,(a0)
     222:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     226:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'S':	newName[i] = '\"';	nameIn++;	break;
     22a:	|  |  |  |  |  |  |   move.l 20(sp),d0
     22e:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     232:	|  |  |  |  |  |  |   adda.l d0,a0
     234:	|  |  |  |  |  |  |   move.b #34,(a0)
     238:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     23c:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'B':	newName[i] = '\\';	nameIn++;	break;
     240:	|  |  |  |  |  |  |   move.l 20(sp),d0
     244:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     248:	|  |  |  |  |  |  |   adda.l d0,a0
     24a:	|  |  |  |  |  |  |   move.b #92,(a0)
     24e:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     252:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'F':	newName[i] = '/';	nameIn++;	break;
     254:	|  |  |  |  |  |  |   move.l 20(sp),d0
     258:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     25c:	|  |  |  |  |  |  |   adda.l d0,a0
     25e:	|  |  |  |  |  |  |   move.b #47,(a0)
     262:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     266:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'C':	newName[i] = ':';	nameIn++;	break;
     268:	|  |  |  |  |  |  |   move.l 20(sp),d0
     26c:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     270:	|  |  |  |  |  |  |   adda.l d0,a0
     272:	|  |  |  |  |  |  |   move.b #58,(a0)
     276:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     27a:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'A':	newName[i] = '*';	nameIn++;	break;
     27c:	|  |  |  |  |  |  |   move.l 20(sp),d0
     280:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     284:	|  |  |  |  |  |  |   adda.l d0,a0
     286:	|  |  |  |  |  |  |   move.b #42,(a0)
     28a:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     28e:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'Q':	newName[i] = '?';	nameIn++;	break;
     290:	|  |  |  |  |  |  |   move.l 20(sp),d0
     294:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     298:	|  |  |  |  |  |  |   adda.l d0,a0
     29a:	|  |  |  |  |  |  |   move.b #63,(a0)
     29e:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     2a2:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					default:	newName[i] = '_';
     2a4:	|  |  |  |  |  \--|-> move.l 20(sp),d0
     2a8:	|  |  |  |  |     |   movea.l 4(sp),a0
     2ac:	|  |  |  |  |     |   adda.l d0,a0
     2ae:	|  |  |  |  |     |   move.b #95,(a0)
     2b2:	|  |  |  |  |     +-- bra.s 2ca <decodeFilename+0x1b2>
				}
			} else {
				newName[i] = *nameIn;
     2b4:	|  |  |  |  \-----|-> move.l 20(sp),d0
     2b8:	|  |  |  |        |   movea.l 4(sp),a0
     2bc:	|  |  |  |        |   adda.l d0,a0
     2be:	|  |  |  |        |   movea.l 28(sp),a1
     2c2:	|  |  |  |        |   move.b (a1),d0
     2c4:	|  |  |  |        |   move.b d0,(a0)
				nameIn++;
     2c6:	|  |  |  |        |   addq.l #1,28(sp)
			}
			i++;
     2ca:	|  |  |  |        \-> addq.l #1,20(sp)
		while (*nameIn) {
     2ce:	|  |  |  \----------> movea.l 28(sp),a0
     2d2:	|  |  |               move.b (a0),d0
     2d4:	|  |  \-------------- bne.w 170 <decodeFilename+0x58>
		}
		newName[i] = 0;
     2d8:	|  |                  move.l 20(sp),d0
     2dc:	|  |                  movea.l 4(sp),a0
     2e0:	|  |                  adda.l d0,a0
     2e2:	|  |                  clr.b (a0)
		return newName;
     2e4:	|  |                  move.l 4(sp),d0
     2e8:	|  +----------------- bra.s 2f6 <decodeFilename+0x1de>
	} else {
		return copyString(nameIn);
     2ea:	\--|----------------> move.l 28(sp),-(sp)
     2ee:	   |                  jsr b8 <copyString>
     2f4:	   |                  addq.l #4,sp
	}
}
     2f6:	   \----------------> movea.l (sp)+,a6
     2f8:	                      lea 20(sp),sp
     2fc:	                      rts

000002fe <encodeFilename>:

char * encodeFilename (char * nameIn) {
     2fe:	                      lea -24(sp),sp
     302:	                      move.l a6,-(sp)
	if (! nameIn) return NULL;
     304:	                      tst.l 32(sp)
     308:	                  /-- bne.s 310 <encodeFilename+0x12>
     30a:	                  |   moveq #0,d0
     30c:	/-----------------|-- bra.w 688 <encodeFilename+0x38a>
	if (allowAnyFilename) {
     310:	|                 \-> move.w 18000 <allowAnyFilename>,d0
     316:	|  /----------------- beq.w 644 <encodeFilename+0x346>
		char * newName = AllocVec( strlen(nameIn)*2+1,MEMF_ANY);
     31a:	|  |                  move.l 32(sp),-(sp)
     31e:	|  |                  jsr 103ac <strlen>
     324:	|  |                  addq.l #4,sp
     326:	|  |                  add.l d0,d0
     328:	|  |                  move.l d0,d1
     32a:	|  |                  addq.l #1,d1
     32c:	|  |                  move.l d1,16(sp)
     330:	|  |                  clr.l 12(sp)
     334:	|  |                  move.l 19c5e <SysBase>,d0
     33a:	|  |                  movea.l d0,a6
     33c:	|  |                  move.l 16(sp),d0
     340:	|  |                  move.l 12(sp),d1
     344:	|  |                  jsr -684(a6)
     348:	|  |                  move.l d0,8(sp)
     34c:	|  |                  move.l 8(sp),d0
     350:	|  |                  move.l d0,4(sp)
		if(newName == 0) {
     354:	|  |              /-- bne.s 36a <encodeFilename+0x6c>
			KPrintF( "encodefilename: Could not allocate Memory");
     356:	|  |              |   pea 13b24 <PutChar+0x4>
     35c:	|  |              |   jsr 12f14 <KPrintF>
     362:	|  |              |   addq.l #4,sp
			return NULL;
     364:	|  |              |   moveq #0,d0
     366:	+--|--------------|-- bra.w 688 <encodeFilename+0x38a>
		}

		int i = 0;
     36a:	|  |              \-> clr.l 24(sp)
		while (*nameIn) {
     36e:	|  |     /----------- bra.w 634 <encodeFilename+0x336>
			switch (*nameIn) {
     372:	|  |  /--|----------> movea.l 32(sp),a0
     376:	|  |  |  |            move.b (a0),d0
     378:	|  |  |  |            ext.w d0
     37a:	|  |  |  |            movea.w d0,a0
     37c:	|  |  |  |            moveq #95,d0
     37e:	|  |  |  |            cmp.l a0,d0
     380:	|  |  |  |        /-- blt.w 424 <encodeFilename+0x126>
     384:	|  |  |  |        |   moveq #34,d1
     386:	|  |  |  |        |   cmp.l a0,d1
     388:	|  |  |  |  /-----|-- bgt.w 608 <encodeFilename+0x30a>
     38c:	|  |  |  |  |     |   moveq #-34,d0
     38e:	|  |  |  |  |     |   add.l a0,d0
     390:	|  |  |  |  |     |   moveq #61,d1
     392:	|  |  |  |  |     |   cmp.l d0,d1
     394:	|  |  |  |  +-----|-- bcs.w 608 <encodeFilename+0x30a>
     398:	|  |  |  |  |     |   add.l d0,d0
     39a:	|  |  |  |  |     |   movea.l d0,a0
     39c:	|  |  |  |  |     |   adda.l #936,a0
     3a2:	|  |  |  |  |     |   move.w (a0),d0
     3a4:	|  |  |  |  |     |   jmp (3a8 <encodeFilename+0xaa>,pc,d0.w)
     3a8:	|  |  |  |  |     |   bchg d0,d6
     3aa:	|  |  |  |  |     |   andi.w #608,-(a0)
     3ae:	|  |  |  |  |     |   andi.w #608,-(a0)
     3b2:	|  |  |  |  |     |   andi.w #608,-(a0)
     3b6:	|  |  |  |  |     |   andi.w #516,-(a0)
     3ba:	|  |  |  |  |     |   andi.w #608,-(a0)
     3be:	|  |  |  |  |     |   andi.w #608,-(a0)
     3c2:	|  |  |  |  |     |   bclr d0,-(a6)
     3c4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3c8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3cc:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d0:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d8:	|  |  |  |  |     |   bset d0,(a6)
     3da:	|  |  |  |  |     |   andi.w #134,-(a0)
     3de:	|  |  |  |  |     |   andi.w #182,-(a0)
     3e2:	|  |  |  |  |     |   andi.b #96,(96,a2,d0.w:2)
     3e8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3ec:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f0:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3fc:	|  |  |  |  |     |   andi.w #608,-(a0)
     400:	|  |  |  |  |     |   andi.w #608,-(a0)
     404:	|  |  |  |  |     |   andi.w #608,-(a0)
     408:	|  |  |  |  |     |   andi.w #608,-(a0)
     40c:	|  |  |  |  |     |   andi.w #608,-(a0)
     410:	|  |  |  |  |     |   andi.w #608,-(a0)
     414:	|  |  |  |  |     |   andi.w #608,-(a0)
     418:	|  |  |  |  |     |   andi.w #608,-(a0)
     41c:	|  |  |  |  |     |   bchg d0,(96,a6,d0.w:2)
     420:	|  |  |  |  |     |   andi.w #278,-(a0)
     424:	|  |  |  |  |     \-> moveq #124,d0
     426:	|  |  |  |  |         cmp.l a0,d0
     428:	|  |  |  |  |     /-- beq.s 48e <encodeFilename+0x190>
     42a:	|  |  |  |  +-----|-- bra.w 608 <encodeFilename+0x30a>
				case '<':	newName[i++] = '_';		newName[i++] = 'L';		break;
     42e:	|  |  |  |  |     |   move.l 24(sp),d0
     432:	|  |  |  |  |     |   move.l d0,d1
     434:	|  |  |  |  |     |   addq.l #1,d1
     436:	|  |  |  |  |     |   move.l d1,24(sp)
     43a:	|  |  |  |  |     |   movea.l 4(sp),a0
     43e:	|  |  |  |  |     |   adda.l d0,a0
     440:	|  |  |  |  |     |   move.b #95,(a0)
     444:	|  |  |  |  |     |   move.l 24(sp),d0
     448:	|  |  |  |  |     |   move.l d0,d1
     44a:	|  |  |  |  |     |   addq.l #1,d1
     44c:	|  |  |  |  |     |   move.l d1,24(sp)
     450:	|  |  |  |  |     |   movea.l 4(sp),a0
     454:	|  |  |  |  |     |   adda.l d0,a0
     456:	|  |  |  |  |     |   move.b #76,(a0)
     45a:	|  |  |  |  |  /--|-- bra.w 624 <encodeFilename+0x326>
				case '>':	newName[i++] = '_';		newName[i++] = 'G';		break;
     45e:	|  |  |  |  |  |  |   move.l 24(sp),d0
     462:	|  |  |  |  |  |  |   move.l d0,d1
     464:	|  |  |  |  |  |  |   addq.l #1,d1
     466:	|  |  |  |  |  |  |   move.l d1,24(sp)
     46a:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     46e:	|  |  |  |  |  |  |   adda.l d0,a0
     470:	|  |  |  |  |  |  |   move.b #95,(a0)
     474:	|  |  |  |  |  |  |   move.l 24(sp),d0
     478:	|  |  |  |  |  |  |   move.l d0,d1
     47a:	|  |  |  |  |  |  |   addq.l #1,d1
     47c:	|  |  |  |  |  |  |   move.l d1,24(sp)
     480:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     484:	|  |  |  |  |  |  |   adda.l d0,a0
     486:	|  |  |  |  |  |  |   move.b #71,(a0)
     48a:	|  |  |  |  |  +--|-- bra.w 624 <encodeFilename+0x326>
				case '|':	newName[i++] = '_';		newName[i++] = 'P';		break;
     48e:	|  |  |  |  |  |  \-> move.l 24(sp),d0
     492:	|  |  |  |  |  |      move.l d0,d1
     494:	|  |  |  |  |  |      addq.l #1,d1
     496:	|  |  |  |  |  |      move.l d1,24(sp)
     49a:	|  |  |  |  |  |      movea.l 4(sp),a0
     49e:	|  |  |  |  |  |      adda.l d0,a0
     4a0:	|  |  |  |  |  |      move.b #95,(a0)
     4a4:	|  |  |  |  |  |      move.l 24(sp),d0
     4a8:	|  |  |  |  |  |      move.l d0,d1
     4aa:	|  |  |  |  |  |      addq.l #1,d1
     4ac:	|  |  |  |  |  |      move.l d1,24(sp)
     4b0:	|  |  |  |  |  |      movea.l 4(sp),a0
     4b4:	|  |  |  |  |  |      adda.l d0,a0
     4b6:	|  |  |  |  |  |      move.b #80,(a0)
     4ba:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '_':	newName[i++] = '_';		newName[i++] = 'U';		break;
     4be:	|  |  |  |  |  |      move.l 24(sp),d0
     4c2:	|  |  |  |  |  |      move.l d0,d1
     4c4:	|  |  |  |  |  |      addq.l #1,d1
     4c6:	|  |  |  |  |  |      move.l d1,24(sp)
     4ca:	|  |  |  |  |  |      movea.l 4(sp),a0
     4ce:	|  |  |  |  |  |      adda.l d0,a0
     4d0:	|  |  |  |  |  |      move.b #95,(a0)
     4d4:	|  |  |  |  |  |      move.l 24(sp),d0
     4d8:	|  |  |  |  |  |      move.l d0,d1
     4da:	|  |  |  |  |  |      addq.l #1,d1
     4dc:	|  |  |  |  |  |      move.l d1,24(sp)
     4e0:	|  |  |  |  |  |      movea.l 4(sp),a0
     4e4:	|  |  |  |  |  |      adda.l d0,a0
     4e6:	|  |  |  |  |  |      move.b #85,(a0)
     4ea:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '\"':	newName[i++] = '_';		newName[i++] = 'S';		break;
     4ee:	|  |  |  |  |  |      move.l 24(sp),d0
     4f2:	|  |  |  |  |  |      move.l d0,d1
     4f4:	|  |  |  |  |  |      addq.l #1,d1
     4f6:	|  |  |  |  |  |      move.l d1,24(sp)
     4fa:	|  |  |  |  |  |      movea.l 4(sp),a0
     4fe:	|  |  |  |  |  |      adda.l d0,a0
     500:	|  |  |  |  |  |      move.b #95,(a0)
     504:	|  |  |  |  |  |      move.l 24(sp),d0
     508:	|  |  |  |  |  |      move.l d0,d1
     50a:	|  |  |  |  |  |      addq.l #1,d1
     50c:	|  |  |  |  |  |      move.l d1,24(sp)
     510:	|  |  |  |  |  |      movea.l 4(sp),a0
     514:	|  |  |  |  |  |      adda.l d0,a0
     516:	|  |  |  |  |  |      move.b #83,(a0)
     51a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '\\':	newName[i++] = '_';		newName[i++] = 'B';		break;
     51e:	|  |  |  |  |  |      move.l 24(sp),d0
     522:	|  |  |  |  |  |      move.l d0,d1
     524:	|  |  |  |  |  |      addq.l #1,d1
     526:	|  |  |  |  |  |      move.l d1,24(sp)
     52a:	|  |  |  |  |  |      movea.l 4(sp),a0
     52e:	|  |  |  |  |  |      adda.l d0,a0
     530:	|  |  |  |  |  |      move.b #95,(a0)
     534:	|  |  |  |  |  |      move.l 24(sp),d0
     538:	|  |  |  |  |  |      move.l d0,d1
     53a:	|  |  |  |  |  |      addq.l #1,d1
     53c:	|  |  |  |  |  |      move.l d1,24(sp)
     540:	|  |  |  |  |  |      movea.l 4(sp),a0
     544:	|  |  |  |  |  |      adda.l d0,a0
     546:	|  |  |  |  |  |      move.b #66,(a0)
     54a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '/':	newName[i++] = '_';		newName[i++] = 'F';		break;
     54e:	|  |  |  |  |  |      move.l 24(sp),d0
     552:	|  |  |  |  |  |      move.l d0,d1
     554:	|  |  |  |  |  |      addq.l #1,d1
     556:	|  |  |  |  |  |      move.l d1,24(sp)
     55a:	|  |  |  |  |  |      movea.l 4(sp),a0
     55e:	|  |  |  |  |  |      adda.l d0,a0
     560:	|  |  |  |  |  |      move.b #95,(a0)
     564:	|  |  |  |  |  |      move.l 24(sp),d0
     568:	|  |  |  |  |  |      move.l d0,d1
     56a:	|  |  |  |  |  |      addq.l #1,d1
     56c:	|  |  |  |  |  |      move.l d1,24(sp)
     570:	|  |  |  |  |  |      movea.l 4(sp),a0
     574:	|  |  |  |  |  |      adda.l d0,a0
     576:	|  |  |  |  |  |      move.b #70,(a0)
     57a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case ':':	newName[i++] = '_';		newName[i++] = 'C';		break;
     57e:	|  |  |  |  |  |      move.l 24(sp),d0
     582:	|  |  |  |  |  |      move.l d0,d1
     584:	|  |  |  |  |  |      addq.l #1,d1
     586:	|  |  |  |  |  |      move.l d1,24(sp)
     58a:	|  |  |  |  |  |      movea.l 4(sp),a0
     58e:	|  |  |  |  |  |      adda.l d0,a0
     590:	|  |  |  |  |  |      move.b #95,(a0)
     594:	|  |  |  |  |  |      move.l 24(sp),d0
     598:	|  |  |  |  |  |      move.l d0,d1
     59a:	|  |  |  |  |  |      addq.l #1,d1
     59c:	|  |  |  |  |  |      move.l d1,24(sp)
     5a0:	|  |  |  |  |  |      movea.l 4(sp),a0
     5a4:	|  |  |  |  |  |      adda.l d0,a0
     5a6:	|  |  |  |  |  |      move.b #67,(a0)
     5aa:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>
				case '*':	newName[i++] = '_';		newName[i++] = 'A';		break;
     5ac:	|  |  |  |  |  |      move.l 24(sp),d0
     5b0:	|  |  |  |  |  |      move.l d0,d1
     5b2:	|  |  |  |  |  |      addq.l #1,d1
     5b4:	|  |  |  |  |  |      move.l d1,24(sp)
     5b8:	|  |  |  |  |  |      movea.l 4(sp),a0
     5bc:	|  |  |  |  |  |      adda.l d0,a0
     5be:	|  |  |  |  |  |      move.b #95,(a0)
     5c2:	|  |  |  |  |  |      move.l 24(sp),d0
     5c6:	|  |  |  |  |  |      move.l d0,d1
     5c8:	|  |  |  |  |  |      addq.l #1,d1
     5ca:	|  |  |  |  |  |      move.l d1,24(sp)
     5ce:	|  |  |  |  |  |      movea.l 4(sp),a0
     5d2:	|  |  |  |  |  |      adda.l d0,a0
     5d4:	|  |  |  |  |  |      move.b #65,(a0)
     5d8:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>
				case '?':	newName[i++] = '_';		newName[i++] = 'Q';		break;
     5da:	|  |  |  |  |  |      move.l 24(sp),d0
     5de:	|  |  |  |  |  |      move.l d0,d1
     5e0:	|  |  |  |  |  |      addq.l #1,d1
     5e2:	|  |  |  |  |  |      move.l d1,24(sp)
     5e6:	|  |  |  |  |  |      movea.l 4(sp),a0
     5ea:	|  |  |  |  |  |      adda.l d0,a0
     5ec:	|  |  |  |  |  |      move.b #95,(a0)
     5f0:	|  |  |  |  |  |      move.l 24(sp),d0
     5f4:	|  |  |  |  |  |      move.l d0,d1
     5f6:	|  |  |  |  |  |      addq.l #1,d1
     5f8:	|  |  |  |  |  |      move.l d1,24(sp)
     5fc:	|  |  |  |  |  |      movea.l 4(sp),a0
     600:	|  |  |  |  |  |      adda.l d0,a0
     602:	|  |  |  |  |  |      move.b #81,(a0)
     606:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>

				default:	newName[i++] = *nameIn;							break;
     608:	|  |  |  |  \--|----> move.l 24(sp),d0
     60c:	|  |  |  |     |      move.l d0,d1
     60e:	|  |  |  |     |      addq.l #1,d1
     610:	|  |  |  |     |      move.l d1,24(sp)
     614:	|  |  |  |     |      movea.l 4(sp),a0
     618:	|  |  |  |     |      adda.l d0,a0
     61a:	|  |  |  |     |      movea.l 32(sp),a1
     61e:	|  |  |  |     |      move.b (a1),d0
     620:	|  |  |  |     |      move.b d0,(a0)
     622:	|  |  |  |     |      nop
			}
			newName[i] = 0;
     624:	|  |  |  |     \----> move.l 24(sp),d0
     628:	|  |  |  |            movea.l 4(sp),a0
     62c:	|  |  |  |            adda.l d0,a0
     62e:	|  |  |  |            clr.b (a0)
			nameIn ++;
     630:	|  |  |  |            addq.l #1,32(sp)
		while (*nameIn) {
     634:	|  |  |  \----------> movea.l 32(sp),a0
     638:	|  |  |               move.b (a0),d0
     63a:	|  |  \-------------- bne.w 372 <encodeFilename+0x74>
		}
		return newName;
     63e:	|  |                  move.l 4(sp),d0
     642:	+--|----------------- bra.s 688 <encodeFilename+0x38a>
	} else {
		int a;
		for (a = 0; nameIn[a]; a ++) {
     644:	|  \----------------> clr.l 20(sp)
     648:	|              /----- bra.s 66e <encodeFilename+0x370>
			if (nameIn[a] == '\\') nameIn[a] ='/';
     64a:	|           /--|----> move.l 20(sp),d0
     64e:	|           |  |      movea.l 32(sp),a0
     652:	|           |  |      adda.l d0,a0
     654:	|           |  |      move.b (a0),d0
     656:	|           |  |      cmpi.b #92,d0
     65a:	|           |  |  /-- bne.s 66a <encodeFilename+0x36c>
     65c:	|           |  |  |   move.l 20(sp),d0
     660:	|           |  |  |   movea.l 32(sp),a0
     664:	|           |  |  |   adda.l d0,a0
     666:	|           |  |  |   move.b #47,(a0)
		for (a = 0; nameIn[a]; a ++) {
     66a:	|           |  |  \-> addq.l #1,20(sp)
     66e:	|           |  \----> move.l 20(sp),d0
     672:	|           |         movea.l 32(sp),a0
     676:	|           |         adda.l d0,a0
     678:	|           |         move.b (a0),d0
     67a:	|           \-------- bne.s 64a <encodeFilename+0x34c>
		}

		return copyString (nameIn);
     67c:	|                     move.l 32(sp),-(sp)
     680:	|                     jsr b8 <copyString>
     686:	|                     addq.l #4,sp
	}
}
     688:	\-------------------> movea.l (sp)+,a6
     68a:	                      lea 24(sp),sp
     68e:	                      rts

00000690 <FLOATSwap>:

FLOAT FLOATSwap( FLOAT f )
{
     690:	subq.l #8,sp
	{
		FLOAT f;
		unsigned char b[4];
	} dat1, dat2;

	dat1.f = f;
     692:	move.l 12(sp),4(sp)
	dat2.b[0] = dat1.b[3];
     698:	move.b 7(sp),d0
     69c:	move.b d0,(sp)
	dat2.b[1] = dat1.b[2];
     69e:	move.b 6(sp),d0
     6a2:	move.b d0,1(sp)
	dat2.b[2] = dat1.b[1];
     6a6:	move.b 5(sp),d0
     6aa:	move.b d0,2(sp)
	dat2.b[3] = dat1.b[0];
     6ae:	move.b 4(sp),d0
     6b2:	move.b d0,3(sp)
	return dat2.f;
     6b6:	move.l (sp),d0
}
     6b8:	addq.l #8,sp
     6ba:	rts

000006bc <get2bytes>:

int get2bytes (BPTR fp) {
     6bc:	lea -24(sp),sp
     6c0:	move.l a6,-(sp)
	int f1, f2;

	f1 = FGetC (fp);
     6c2:	move.l 32(sp),24(sp)
     6c8:	move.l 19c66 <DOSBase>,d0
     6ce:	movea.l d0,a6
     6d0:	move.l 24(sp),d1
     6d4:	jsr -306(a6)
     6d8:	move.l d0,20(sp)
     6dc:	move.l 20(sp),d0
     6e0:	move.l d0,16(sp)
	f2 = FGetC (fp);
     6e4:	move.l 32(sp),12(sp)
     6ea:	move.l 19c66 <DOSBase>,d0
     6f0:	movea.l d0,a6
     6f2:	move.l 12(sp),d1
     6f6:	jsr -306(a6)
     6fa:	move.l d0,8(sp)
     6fe:	move.l 8(sp),d0
     702:	move.l d0,4(sp)

	return (f1 * 256 + f2);
     706:	move.l 16(sp),d0
     70a:	lsl.l #8,d0
     70c:	add.l 4(sp),d0
}
     710:	movea.l (sp)+,a6
     712:	lea 24(sp),sp
     716:	rts

00000718 <get4bytes>:

ULONG get4bytes (BPTR fp) {
     718:	lea -52(sp),sp
     71c:	move.l a6,-(sp)
	int f1, f2, f3, f4;

	f1 = FGetC (fp);
     71e:	move.l 60(sp),52(sp)
     724:	move.l 19c66 <DOSBase>,d0
     72a:	movea.l d0,a6
     72c:	move.l 52(sp),d1
     730:	jsr -306(a6)
     734:	move.l d0,48(sp)
     738:	move.l 48(sp),d0
     73c:	move.l d0,44(sp)
	f2 = FGetC (fp);
     740:	move.l 60(sp),40(sp)
     746:	move.l 19c66 <DOSBase>,d0
     74c:	movea.l d0,a6
     74e:	move.l 40(sp),d1
     752:	jsr -306(a6)
     756:	move.l d0,36(sp)
     75a:	move.l 36(sp),d0
     75e:	move.l d0,32(sp)
	f3 = FGetC (fp);
     762:	move.l 60(sp),28(sp)
     768:	move.l 19c66 <DOSBase>,d0
     76e:	movea.l d0,a6
     770:	move.l 28(sp),d1
     774:	jsr -306(a6)
     778:	move.l d0,24(sp)
     77c:	move.l 24(sp),d0
     780:	move.l d0,20(sp)
	f4 = FGetC (fp);
     784:	move.l 60(sp),16(sp)
     78a:	move.l 19c66 <DOSBase>,d0
     790:	movea.l d0,a6
     792:	move.l 16(sp),d1
     796:	jsr -306(a6)
     79a:	move.l d0,12(sp)
     79e:	move.l 12(sp),d0
     7a2:	move.l d0,8(sp)

	ULONG x = f1 + f2*256 + f3*256*256 + f4*256*256*256;
     7a6:	move.l 32(sp),d0
     7aa:	lsl.l #8,d0
     7ac:	move.l d0,d1
     7ae:	add.l 44(sp),d1
     7b2:	move.l 20(sp),d0
     7b6:	swap d0
     7b8:	clr.w d0
     7ba:	add.l d0,d1
     7bc:	move.l 8(sp),d0
     7c0:	lsl.w #8,d0
     7c2:	swap d0
     7c4:	clr.w d0
     7c6:	add.l d1,d0
     7c8:	move.l d0,4(sp)

	return x;
     7cc:	move.l 4(sp),d0
}
     7d0:	movea.l (sp)+,a6
     7d2:	lea 52(sp),sp
     7d6:	rts

000007d8 <getFloat>:

FLOAT getFloat (BPTR fp) {
     7d8:	    lea -28(sp),sp
     7dc:	    movem.l d2-d4/a6,-(sp)
	FLOAT f;
	LONG blocks_read = FRead( fp, &f, sizeof (FLOAT), 1 ); 
     7e0:	    move.l 48(sp),40(sp)
     7e6:	    lea 44(sp),a0
     7ea:	    lea -28(a0),a0
     7ee:	    move.l a0,36(sp)
     7f2:	    moveq #4,d0
     7f4:	    move.l d0,32(sp)
     7f8:	    moveq #1,d0
     7fa:	    move.l d0,28(sp)
     7fe:	    move.l 19c66 <DOSBase>,d0
     804:	    movea.l d0,a6
     806:	    move.l 40(sp),d1
     80a:	    move.l 36(sp),d2
     80e:	    move.l 32(sp),d3
     812:	    move.l 28(sp),d4
     816:	    jsr -324(a6)
     81a:	    move.l d0,24(sp)
     81e:	    move.l 24(sp),d0
     822:	    move.l d0,20(sp)
	if (blocks_read != 1) {
     826:	    moveq #1,d0
     828:	    cmp.l 20(sp),d0
     82c:	/-- beq.s 83c <getFloat+0x64>
		KPrintF("Reading error in getFloat.\n");
     82e:	|   pea 13b4e <PutChar+0x2e>
     834:	|   jsr 12f14 <KPrintF>
     83a:	|   addq.l #4,sp
	}
	return FLOATSwap(f);
     83c:	\-> move.l 16(sp),d0
     840:	    move.l d0,-(sp)
     842:	    jsr 690 <FLOATSwap>
     848:	    addq.l #4,sp
	return f;
}
     84a:	    movem.l (sp)+,d2-d4/a6
     84e:	    lea 28(sp),sp
     852:	    rts

00000854 <getSigned>:

short getSigned (BPTR fp) {
     854:	    lea -24(sp),sp
     858:	    movem.l d2-d3/a6,-(sp)
	short f;
	LONG bytes_read = Read(fp, &f, sizeof(short));
     85c:	    move.l 40(sp),32(sp)
     862:	    lea 36(sp),a0
     866:	    lea -22(a0),a0
     86a:	    move.l a0,28(sp)
     86e:	    moveq #2,d0
     870:	    move.l d0,24(sp)
     874:	    move.l 19c66 <DOSBase>,d0
     87a:	    movea.l d0,a6
     87c:	    move.l 32(sp),d1
     880:	    move.l 28(sp),d2
     884:	    move.l 24(sp),d3
     888:	    jsr -42(a6)
     88c:	    move.l d0,20(sp)
     890:	    move.l 20(sp),d0
     894:	    move.l d0,16(sp)
	if (bytes_read != sizeof (short)) {
     898:	    moveq #2,d0
     89a:	    cmp.l 16(sp),d0
     89e:	/-- beq.s 8ae <getSigned+0x5a>
		KPrintF("getSigned: Reading error in getSigned.\n");
     8a0:	|   pea 13b6a <PutChar+0x4a>
     8a6:	|   jsr 12f14 <KPrintF>
     8ac:	|   addq.l #4,sp
	}
	f = shortSwap(f);
     8ae:	\-> move.w 14(sp),d0
     8b2:	    movea.w d0,a0
     8b4:	    move.l a0,-(sp)
     8b6:	    jsr baa <shortSwap>
     8bc:	    addq.l #4,sp
     8be:	    move.w d0,14(sp)
	return f;
     8c2:	    move.w 14(sp),d0
}
     8c6:	    movem.l (sp)+,d2-d3/a6
     8ca:	    lea 24(sp),sp
     8ce:	    rts

000008d0 <put2bytes>:

void put2bytes (int numtoput, BPTR fp) {
     8d0:	    lea -24(sp),sp
     8d4:	    move.l a6,-(sp)
     8d6:	    move.l d2,-(sp)
	FPutC( fp, (char) (numtoput / 256));
     8d8:	    move.l 40(sp),28(sp)
     8de:	    move.l 36(sp),d0
     8e2:	/-- bpl.s 8ea <put2bytes+0x1a>
     8e4:	|   addi.l #255,d0
     8ea:	\-> asr.l #8,d0
     8ec:	    move.l d0,d0
     8ee:	    ext.w d0
     8f0:	    movea.w d0,a0
     8f2:	    move.l a0,24(sp)
     8f6:	    move.l 19c66 <DOSBase>,d0
     8fc:	    movea.l d0,a6
     8fe:	    move.l 28(sp),d1
     902:	    move.l 24(sp),d2
     906:	    jsr -312(a6)
     90a:	    move.l d0,20(sp)
	FPutC( fp, (char) (numtoput % 256));
     90e:	    move.l 40(sp),16(sp)
     914:	    move.l 36(sp),d0
     918:	    andi.l #-2147483393,d0
     91e:	/-- bpl.s 92a <put2bytes+0x5a>
     920:	|   subq.l #1,d0
     922:	|   moveq #-1,d1
     924:	|   not.b d1
     926:	|   or.l d1,d0
     928:	|   addq.l #1,d0
     92a:	\-> move.l d0,d0
     92c:	    ext.w d0
     92e:	    movea.w d0,a0
     930:	    move.l a0,12(sp)
     934:	    move.l 19c66 <DOSBase>,d0
     93a:	    movea.l d0,a6
     93c:	    move.l 16(sp),d1
     940:	    move.l 12(sp),d2
     944:	    jsr -312(a6)
     948:	    move.l d0,8(sp)
}
     94c:	    nop
     94e:	    move.l (sp)+,d2
     950:	    movea.l (sp)+,a6
     952:	    lea 24(sp),sp
     956:	    rts

00000958 <put4bytes>:

void put4bytes (ULONG i, BPTR fp) {
     958:	lea -52(sp),sp
     95c:	move.l a6,-(sp)
     95e:	move.l d2,-(sp)
	//	fwrite (&i, sizeof (long int), 1, fp);
	unsigned char f1, f2, f3, f4;

	f4 = i / (256*256*256);
     960:	move.l 64(sp),d0
     964:	clr.w d0
     966:	swap d0
     968:	lsr.w #8,d0
     96a:	move.b d0,59(sp)
	i = i % (256*256*256);
     96e:	andi.l #16777215,64(sp)
	f3 = i / (256*256);
     976:	move.l 64(sp),d0
     97a:	clr.w d0
     97c:	swap d0
     97e:	move.b d0,58(sp)
	i = i % (256*256);
     982:	andi.l #65535,64(sp)
	f2 = i / 256;
     98a:	move.l 64(sp),d0
     98e:	lsr.l #8,d0
     990:	move.b d0,57(sp)
	f1 = i % 256;
     994:	move.b 67(sp),56(sp)

	FPutC (fp,f1);
     99a:	move.l 68(sp),52(sp)
     9a0:	moveq #0,d0
     9a2:	move.b 56(sp),d0
     9a6:	move.l d0,48(sp)
     9aa:	move.l 19c66 <DOSBase>,d0
     9b0:	movea.l d0,a6
     9b2:	move.l 52(sp),d1
     9b6:	move.l 48(sp),d2
     9ba:	jsr -312(a6)
     9be:	move.l d0,44(sp)
	FPutC (fp,f2);
     9c2:	move.l 68(sp),40(sp)
     9c8:	moveq #0,d0
     9ca:	move.b 57(sp),d0
     9ce:	move.l d0,36(sp)
     9d2:	move.l 19c66 <DOSBase>,d0
     9d8:	movea.l d0,a6
     9da:	move.l 40(sp),d1
     9de:	move.l 36(sp),d2
     9e2:	jsr -312(a6)
     9e6:	move.l d0,32(sp)
	FPutC (fp,f3);
     9ea:	move.l 68(sp),28(sp)
     9f0:	moveq #0,d0
     9f2:	move.b 58(sp),d0
     9f6:	move.l d0,24(sp)
     9fa:	move.l 19c66 <DOSBase>,d0
     a00:	movea.l d0,a6
     a02:	move.l 28(sp),d1
     a06:	move.l 24(sp),d2
     a0a:	jsr -312(a6)
     a0e:	move.l d0,20(sp)
	FPutC (fp,f4);
     a12:	move.l 68(sp),16(sp)
     a18:	moveq #0,d0
     a1a:	move.b 59(sp),d0
     a1e:	move.l d0,12(sp)
     a22:	move.l 19c66 <DOSBase>,d0
     a28:	movea.l d0,a6
     a2a:	move.l 16(sp),d1
     a2e:	move.l 12(sp),d2
     a32:	jsr -312(a6)
     a36:	move.l d0,8(sp)
}
     a3a:	nop
     a3c:	move.l (sp)+,d2
     a3e:	movea.l (sp)+,a6
     a40:	lea 52(sp),sp
     a44:	rts

00000a46 <putFloat>:

void putFloat (FLOAT f, BPTR fp) {
     a46:	lea -16(sp),sp
     a4a:	movem.l d2-d3/a6,-(sp)
	f = FLOATSwap(f);
     a4e:	move.l 32(sp),d0
     a52:	move.l d0,-(sp)
     a54:	jsr 690 <FLOATSwap>
     a5a:	addq.l #4,sp
     a5c:	move.l d0,32(sp)
	Write( fp, &f, sizeof (FLOAT));
     a60:	move.l 36(sp),24(sp)
     a66:	moveq #32,d0
     a68:	add.l sp,d0
     a6a:	move.l d0,20(sp)
     a6e:	moveq #4,d0
     a70:	move.l d0,16(sp)
     a74:	move.l 19c66 <DOSBase>,d0
     a7a:	movea.l d0,a6
     a7c:	move.l 24(sp),d1
     a80:	move.l 20(sp),d2
     a84:	move.l 16(sp),d3
     a88:	jsr -48(a6)
     a8c:	move.l d0,12(sp)
}
     a90:	nop
     a92:	movem.l (sp)+,d2-d3/a6
     a96:	lea 16(sp),sp
     a9a:	rts

00000a9c <putSigned>:

void putSigned (short f, BPTR fp) {
     a9c:	lea -20(sp),sp
     aa0:	movem.l d2-d3/a6,-(sp)
     aa4:	move.l 36(sp),d0
     aa8:	move.w d0,d0
     aaa:	move.w d0,14(sp)
	f = shortSwap(f);
     aae:	move.w 14(sp),d0
     ab2:	movea.w d0,a0
     ab4:	move.l a0,-(sp)
     ab6:	jsr baa <shortSwap>
     abc:	addq.l #4,sp
     abe:	move.w d0,14(sp)
	Write(fp, &f, sizeof(short));
     ac2:	move.l 40(sp),28(sp)
     ac8:	lea 32(sp),a0
     acc:	lea -18(a0),a0
     ad0:	move.l a0,24(sp)
     ad4:	moveq #2,d0
     ad6:	move.l d0,20(sp)
     ada:	move.l 19c66 <DOSBase>,d0
     ae0:	movea.l d0,a6
     ae2:	move.l 28(sp),d1
     ae6:	move.l 24(sp),d2
     aea:	move.l 20(sp),d3
     aee:	jsr -48(a6)
     af2:	move.l d0,16(sp)
}
     af6:	nop
     af8:	movem.l (sp)+,d2-d3/a6
     afc:	lea 20(sp),sp
     b00:	rts

00000b02 <readString>:

char * readString (BPTR fp) {
     b02:	          lea -32(sp),sp
     b06:	          move.l a6,-(sp)

	int a, len = get2bytes (fp);
     b08:	          move.l 40(sp),-(sp)
     b0c:	          jsr 6bc <get2bytes>
     b12:	          addq.l #4,sp
     b14:	          move.l d0,28(sp)
	//debugOut ("MOREIO: readString - len %i\n", len);
	char * s = AllocVec(len+1,MEMF_ANY);
     b18:	          move.l 28(sp),d0
     b1c:	          addq.l #1,d0
     b1e:	          move.l d0,24(sp)
     b22:	          clr.l 20(sp)
     b26:	          move.l 19c5e <SysBase>,d0
     b2c:	          movea.l d0,a6
     b2e:	          move.l 24(sp),d0
     b32:	          move.l 20(sp),d1
     b36:	          jsr -684(a6)
     b3a:	          move.l d0,16(sp)
     b3e:	          move.l 16(sp),d0
     b42:	          move.l d0,12(sp)
	if(s == 0) return NULL;
     b46:	      /-- bne.s b4c <readString+0x4a>
     b48:	      |   moveq #0,d0
     b4a:	/-----|-- bra.s ba2 <readString+0xa0>
	for (a = 0; a < len; a ++) {
     b4c:	|     \-> clr.l 32(sp)
     b50:	|     /-- bra.s b88 <readString+0x86>
		s[a] = (char) (FGetC (fp) - 1);
     b52:	|  /--|-> move.l 40(sp),8(sp)
     b58:	|  |  |   move.l 19c66 <DOSBase>,d0
     b5e:	|  |  |   movea.l d0,a6
     b60:	|  |  |   move.l 8(sp),d1
     b64:	|  |  |   jsr -306(a6)
     b68:	|  |  |   move.l d0,4(sp)
     b6c:	|  |  |   move.l 4(sp),d0
     b70:	|  |  |   move.l d0,d0
     b72:	|  |  |   move.b d0,d1
     b74:	|  |  |   subq.b #1,d1
     b76:	|  |  |   move.l 32(sp),d0
     b7a:	|  |  |   movea.l 12(sp),a0
     b7e:	|  |  |   adda.l d0,a0
     b80:	|  |  |   move.b d1,d0
     b82:	|  |  |   move.b d0,(a0)
	for (a = 0; a < len; a ++) {
     b84:	|  |  |   addq.l #1,32(sp)
     b88:	|  |  \-> move.l 32(sp),d0
     b8c:	|  |      cmp.l 28(sp),d0
     b90:	|  \----- blt.s b52 <readString+0x50>
	}
	s[len] = 0;
     b92:	|         move.l 28(sp),d0
     b96:	|         movea.l 12(sp),a0
     b9a:	|         adda.l d0,a0
     b9c:	|         clr.b (a0)
	//debugOut ("MOREIO: readString: %s\n", s);
	return s;
     b9e:	|         move.l 12(sp),d0
}
     ba2:	\-------> movea.l (sp)+,a6
     ba4:	          lea 32(sp),sp
     ba8:	          rts

00000baa <shortSwap>:

short shortSwap( short s )
{
     baa:	subq.l #4,sp
     bac:	move.l 8(sp),d0
     bb0:	move.w d0,d0
     bb2:	move.w d0,(sp)
	unsigned char b1, b2;
	
	b1 = s & 255;
     bb4:	move.b 1(sp),3(sp)
	b2 = (s >> 8) & 255;
     bba:	move.w (sp),d0
     bbc:	asr.w #8,d0
     bbe:	move.b d0,2(sp)
	
	return (b1 << 8) + b2;
     bc2:	clr.w d0
     bc4:	move.b 3(sp),d0
     bc8:	move.w d0,d1
     bca:	lsl.w #8,d1
     bcc:	clr.w d0
     bce:	move.b 2(sp),d0
     bd2:	add.w d1,d0
}
     bd4:	addq.l #4,sp
     bd6:	rts

00000bd8 <writeString>:

void writeString (char * s, BPTR fp) {
     bd8:	       lea -20(sp),sp
     bdc:	       move.l a6,-(sp)
     bde:	       move.l d2,-(sp)
	int a, len = strlen (s);
     be0:	       move.l 32(sp),-(sp)
     be4:	       jsr 103ac <strlen>
     bea:	       addq.l #4,sp
     bec:	       move.l d0,20(sp)
	put2bytes (len, fp);
     bf0:	       move.l 36(sp),-(sp)
     bf4:	       move.l 24(sp),-(sp)
     bf8:	       jsr 8d0 <put2bytes>
     bfe:	       addq.l #8,sp
	for (a = 0; a < len; a ++) {
     c00:	       clr.l 24(sp)
     c04:	   /-- bra.s c40 <writeString+0x68>
		FPutC (fp,s[a] + 1);
     c06:	/--|-> move.l 36(sp),16(sp)
     c0c:	|  |   move.l 24(sp),d0
     c10:	|  |   movea.l 32(sp),a0
     c14:	|  |   adda.l d0,a0
     c16:	|  |   move.b (a0),d0
     c18:	|  |   ext.w d0
     c1a:	|  |   ext.l d0
     c1c:	|  |   move.l d0,d1
     c1e:	|  |   addq.l #1,d1
     c20:	|  |   move.l d1,12(sp)
     c24:	|  |   move.l 19c66 <DOSBase>,d0
     c2a:	|  |   movea.l d0,a6
     c2c:	|  |   move.l 16(sp),d1
     c30:	|  |   move.l 12(sp),d2
     c34:	|  |   jsr -312(a6)
     c38:	|  |   move.l d0,8(sp)
	for (a = 0; a < len; a ++) {
     c3c:	|  |   addq.l #1,24(sp)
     c40:	|  \-> move.l 24(sp),d0
     c44:	|      cmp.l 20(sp),d0
     c48:	\----- blt.s c06 <writeString+0x2e>
	}
     c4a:	       nop
     c4c:	       nop
     c4e:	       move.l (sp)+,d2
     c50:	       movea.l (sp)+,a6
     c52:	       lea 20(sp),sp
     c56:	       rts

00000c58 <rand>:
// Define constants for LCG
#define MULTIPLIER 1103515245UL
#define INCREMENT 12345UL
#define MODULUS 0x7FFFFFFFUL

ULONG rand() {
     c58:	       lea -88(sp),sp
     c5c:	       move.l a6,-(sp)
    struct timerequest *timereq;

    struct MsgPort *timerport = CreateMsgPort();
     c5e:	       move.l 19c5e <SysBase>,d0
     c64:	       movea.l d0,a6
     c66:	       jsr -666(a6)
     c6a:	       move.l d0,88(sp)
     c6e:	       move.l 88(sp),d0
     c72:	       move.l d0,84(sp)

    timereq = CreateIORequest(timerport, sizeof(struct timerequest));
     c76:	       move.l 84(sp),80(sp)
     c7c:	       moveq #40,d0
     c7e:	       move.l d0,76(sp)
     c82:	       move.l 19c5e <SysBase>,d0
     c88:	       movea.l d0,a6
     c8a:	       movea.l 80(sp),a0
     c8e:	       move.l 76(sp),d0
     c92:	       jsr -654(a6)
     c96:	       move.l d0,72(sp)
     c9a:	       move.l 72(sp),d0
     c9e:	       move.l d0,68(sp)
    struct IORequest* ioreq = (struct IORequest*)timereq;
     ca2:	       move.l 68(sp),64(sp)
    if (OpenDevice(TIMERNAME, UNIT_MICROHZ, ioreq, 0)) {
     ca8:	       move.l #80786,60(sp)
     cb0:	       clr.l 56(sp)
     cb4:	       move.l 64(sp),52(sp)
     cba:	       clr.l 48(sp)
     cbe:	       move.l 19c5e <SysBase>,d0
     cc4:	       movea.l d0,a6
     cc6:	       movea.l 60(sp),a0
     cca:	       move.l 56(sp),d0
     cce:	       movea.l 52(sp),a1
     cd2:	       move.l 48(sp),d1
     cd6:	       jsr -444(a6)
     cda:	       move.b d0,47(sp)
     cde:	       move.b 47(sp),d0
     ce2:	   /-- beq.s cf8 <rand+0xa0>
        KPrintF("Unable to open timer device\n");
     ce4:	   |   pea 13b9f <PutChar+0x7f>
     cea:	   |   jsr 12f14 <KPrintF>
     cf0:	   |   addq.l #4,sp
        return 0;
     cf2:	   |   moveq #0,d0
     cf4:	/--|-- bra.w db2 <rand+0x15a>
    }
    struct Device* TimerBase = ioreq->io_Device;
     cf8:	|  \-> movea.l 64(sp),a0
     cfc:	|      move.l 20(a0),42(sp)

    struct EClockVal eclock;
    ReadEClock(&eclock);
     d02:	|      lea 92(sp),a0
     d06:	|      lea -86(a0),a0
     d0a:	|      move.l a0,38(sp)
     d0e:	|      movea.l 42(sp),a6
     d12:	|      movea.l 38(sp),a0
     d16:	|      jsr -60(a6)
     d1a:	|      move.l d0,34(sp)

    ULONG seed = eclock.ev_lo; // Using the lower part of EClock value as seed
     d1e:	|      move.l 10(sp),30(sp)
    seed = (seed * MULTIPLIER + INCREMENT) & 0x7fffffff; // Simple LCG
     d24:	|      move.l #1103515245,-(sp)
     d2a:	|      move.l 34(sp),-(sp)
     d2e:	|      jsr 13a0a <__mulsi3>
     d34:	|      addq.l #8,sp
     d36:	|      addi.l #12345,d0
     d3c:	|      move.l d0,d1
     d3e:	|      bclr #31,d1
     d42:	|      move.l d1,30(sp)

    // Transform the seed to a random number
    int random_number = seed % 100; // For example, a random number between 0 and 99
     d46:	|      move.l 30(sp),d0
     d4a:	|      pea 64 <_start+0x64>
     d4e:	|      move.l d0,-(sp)
     d50:	|      jsr 13ae4 <__umodsi3>
     d56:	|      addq.l #8,sp
     d58:	|      move.l d0,26(sp)
    KPrintF("Random Number: %d\n", random_number);
     d5c:	|      move.l 26(sp),-(sp)
     d60:	|      pea 13bbc <PutChar+0x9c>
     d66:	|      jsr 12f14 <KPrintF>
     d6c:	|      addq.l #8,sp

    CloseDevice(ioreq);
     d6e:	|      move.l 64(sp),22(sp)
     d74:	|      move.l 19c5e <SysBase>,d0
     d7a:	|      movea.l d0,a6
     d7c:	|      movea.l 22(sp),a1
     d80:	|      jsr -450(a6)
    DeleteIORequest(ioreq);
     d84:	|      move.l 64(sp),18(sp)
     d8a:	|      move.l 19c5e <SysBase>,d0
     d90:	|      movea.l d0,a6
     d92:	|      movea.l 18(sp),a0
     d96:	|      jsr -660(a6)
    DeleteMsgPort(timerport);
     d9a:	|      move.l 84(sp),14(sp)
     da0:	|      move.l 19c5e <SysBase>,d0
     da6:	|      movea.l d0,a6
     da8:	|      movea.l 14(sp),a0
     dac:	|      jsr -672(a6)
    return 0;
     db0:	|      moveq #0,d0
}
     db2:	\----> movea.l (sp)+,a6
     db4:	       lea 88(sp),sp
     db8:	       rts

00000dba <pickAnimCursor>:
struct personaAnimation * mouseCursorAnim;
int mouseCursorFrameNum = 0;
int mouseCursorCountUp = 0;

void pickAnimCursor (struct personaAnimation * pp) {
	deleteAnim (mouseCursorAnim);
     dba:	move.l 19b2c <mouseCursorAnim>,d0
     dc0:	move.l d0,-(sp)
     dc2:	jsr 6948 <deleteAnim>
     dc8:	addq.l #4,sp
	mouseCursorAnim = pp;
     dca:	move.l 4(sp),19b2c <mouseCursorAnim>
	mouseCursorFrameNum = 0;
     dd2:	clr.l 19b30 <mouseCursorFrameNum>
	mouseCursorCountUp = 0;
     dd8:	clr.l 19b34 <mouseCursorCountUp>
}
     dde:	nop
     de0:	rts

00000de2 <pasteCursor>:

void pasteCursor (int x, int y, struct personaAnimation * c) {
	KPrintF("pasteCursor: Amiga Graphics Display not implemented yet."); //Todo: Amigize this	
     de2:	pea 13bcf <PutChar+0xaf>
     de8:	jsr 12f14 <KPrintF>
     dee:	addq.l #4,sp
     df0:	nop
     df2:	rts

00000df4 <CstBlankScreen>:
    0x1900000, 0x1920000, 0x1940000, 0x1960000, 0x1980000, 0x19a0000, 0x19c0000, 0x19e0000,
    0x1a00000, 0x1a20000, 0x1a40000, 0x1a60000, 0x1a80000, 0x1aa0000, 0x1ac0000, 0x1ae0000,
    0x1b00000, 0x1b20000, 0x1b40000, 0x1b60000, 0x1b80000, 0x1ba0000, 0x1bc0000, 0x1be0000 
};

void CstBlankScreen( int width, int height) {
     df4:	             lea -20(sp),sp
     df8:	             move.l a6,-(sp)
  volatile struct Custom *custom = (struct Custom*)0xdff000;
     dfa:	             move.l #14675968,8(sp)

  width /= 16;
     e02:	             move.l 28(sp),d0
     e06:	             movea.l d0,a0
     e08:	             cmpa.w #0,a0
     e0c:	         /-- bge.s e12 <CstBlankScreen+0x1e>
     e0e:	         |   lea 15(a0),a0
     e12:	         \-> move.l a0,d0
     e14:	             asr.l #4,d0
     e16:	             move.l d0,28(sp)

  WaitBlit();
     e1a:	             move.l 19c6a <GfxBase>,d0
     e20:	             movea.l d0,a6
     e22:	             jsr -228(a6)

  //Both Buffers need to be done
  for(int i=0;i<2;i++) {
     e26:	             clr.l 20(sp)
     e2a:	   /-------- bra.w f04 <CstBlankScreen+0x110>
    custom->bltafwm = 0xffff;
     e2e:	/--|-------> movea.l 8(sp),a0
     e32:	|  |         move.w #-1,68(a0)
    custom->bltalwm = 0xffff;
     e38:	|  |         movea.l 8(sp),a0
     e3c:	|  |         move.w #-1,70(a0)
    custom->bltamod = 0;
     e42:	|  |         movea.l 8(sp),a0
     e46:	|  |         move.w #0,100(a0)
    custom->bltbmod = 0;
     e4c:	|  |         movea.l 8(sp),a0
     e50:	|  |         move.w #0,98(a0)
    custom->bltcmod = 0;
     e56:	|  |         movea.l 8(sp),a0
     e5a:	|  |         move.w #0,96(a0)
    custom->bltdmod = 0;
     e60:	|  |         movea.l 8(sp),a0
     e64:	|  |         move.w #0,102(a0)
    custom->bltcon1 = 0;
     e6a:	|  |         movea.l 8(sp),a0
     e6e:	|  |         move.w #0,66(a0)
    custom->bltcon0 = 0x0100;
     e74:	|  |         movea.l 8(sp),a0
     e78:	|  |         move.w #256,64(a0)
    ULONG bltdpt = (ULONG) CstDrawBuffer;
     e7e:	|  |         move.l 19b52 <CstDrawBuffer>,d0
     e84:	|  |         move.l d0,16(sp)
    UWORD bltsize = height*64+width;    
     e88:	|  |         move.l 32(sp),d0
     e8c:	|  |         lsl.w #6,d0
     e8e:	|  |         move.l 28(sp),d1
     e92:	|  |         movea.w d0,a0
     e94:	|  |         adda.w d1,a0
     e96:	|  |         move.w a0,6(sp)
    UWORD blitsize = width*height*2;
     e9a:	|  |         move.l 28(sp),d1
     e9e:	|  |         move.l 32(sp),d0
     ea2:	|  |         muls.w d1,d0
     ea4:	|  |         add.w d0,d0
     ea6:	|  |         move.w d0,4(sp)
    for(int i2=0;i2<5;i2++)
     eaa:	|  |         clr.l 12(sp)
     eae:	|  |     /-- bra.s ee0 <CstBlankScreen+0xec>
    {            
      custom->bltdpt = (APTR) bltdpt;
     eb0:	|  |  /--|-> move.l 16(sp),d0
     eb4:	|  |  |  |   movea.l 8(sp),a0
     eb8:	|  |  |  |   move.l d0,84(a0)
      custom->bltsize = bltsize;            
     ebc:	|  |  |  |   movea.l 8(sp),a0
     ec0:	|  |  |  |   move.w 6(sp),88(a0)
      WaitBlit();
     ec6:	|  |  |  |   move.l 19c6a <GfxBase>,d0
     ecc:	|  |  |  |   movea.l d0,a6
     ece:	|  |  |  |   jsr -228(a6)
      bltdpt += blitsize;
     ed2:	|  |  |  |   moveq #0,d0
     ed4:	|  |  |  |   move.w 4(sp),d0
     ed8:	|  |  |  |   add.l d0,16(sp)
    for(int i2=0;i2<5;i2++)
     edc:	|  |  |  |   addq.l #1,12(sp)
     ee0:	|  |  |  \-> moveq #4,d0
     ee2:	|  |  |      cmp.l 12(sp),d0
     ee6:	|  |  \----- bge.s eb0 <CstBlankScreen+0xbc>
    }

    WaitBlit();
     ee8:	|  |         move.l 19c6a <GfxBase>,d0
     eee:	|  |         movea.l d0,a6
     ef0:	|  |         jsr -228(a6)
    WaitVbl();
     ef4:	|  |         jsr 12e3c <WaitVbl>
    CstSwapBuffer();
     efa:	|  |         jsr 145e <CstSwapBuffer>
  for(int i=0;i<2;i++) {
     f00:	|  |         addq.l #1,20(sp)
     f04:	|  \-------> moveq #1,d0
     f06:	|            cmp.l 20(sp),d0
     f0a:	\----------- bge.w e2e <CstBlankScreen+0x3a>
  }

}
     f0e:	             nop
     f10:	             nop
     f12:	             movea.l (sp)+,a6
     f14:	             lea 20(sp),sp
     f18:	             rts

00000f1a <CstCreateCopperlist>:

UWORD * CstCreateCopperlist( int width) {
     f1a:	       lea -52(sp),sp
     f1e:	       move.l a6,-(sp)
     f20:	       move.l d2,-(sp)
  
  ULONG *retval = AllocMem(  CSTCOPSIZE, MEMF_CHIP);
     f22:	       move.l #400,32(sp)
     f2a:	       moveq #2,d0
     f2c:	       move.l d0,28(sp)
     f30:	       move.l 19c5e <SysBase>,d0
     f36:	       movea.l d0,a6
     f38:	       move.l 32(sp),d0
     f3c:	       move.l 28(sp),d1
     f40:	       jsr -198(a6)
     f44:	       move.l d0,24(sp)
     f48:	       move.l 24(sp),d0
     f4c:	       move.l d0,20(sp)
  
  if( retval == 0) {
     f50:	   /-- bne.s f7a <CstCreateCopperlist+0x60>
    KPrintF("CstCreateCopperlist: Allocation of Ram for Copper failed.\n", 40);
     f52:	   |   pea 28 <_start+0x28>
     f56:	   |   pea 13c08 <PutChar+0xe8>
     f5c:	   |   jsr 12f14 <KPrintF>
     f62:	   |   addq.l #8,sp
    Exit(1);
     f64:	   |   moveq #1,d1
     f66:	   |   move.l d1,16(sp)
     f6a:	   |   move.l 19c66 <DOSBase>,d0
     f70:	   |   movea.l d0,a6
     f72:	   |   move.l 16(sp),d1
     f76:	   |   jsr -144(a6)
  }
  ULONG *cl = retval;
     f7a:	   \-> move.l 20(sp),56(sp)

  ULONG *clpartinstruction;
  clpartinstruction = CstClSprites;
     f80:	       move.l #98306,52(sp)
  for(int i=0; i<16;i++)
     f88:	       clr.l 48(sp)
     f8c:	   /-- bra.s fb2 <CstCreateCopperlist+0x98>
    *cl++ = *clpartinstruction++;
     f8e:	/--|-> move.l 52(sp),d1
     f92:	|  |   move.l d1,d2
     f94:	|  |   addq.l #4,d2
     f96:	|  |   move.l d2,52(sp)
     f9a:	|  |   move.l 56(sp),d0
     f9e:	|  |   move.l d0,d2
     fa0:	|  |   addq.l #4,d2
     fa2:	|  |   move.l d2,56(sp)
     fa6:	|  |   movea.l d1,a0
     fa8:	|  |   move.l (a0),d1
     faa:	|  |   movea.l d0,a0
     fac:	|  |   move.l d1,(a0)
  for(int i=0; i<16;i++)
     fae:	|  |   addq.l #1,48(sp)
     fb2:	|  \-> moveq #15,d0
     fb4:	|      cmp.l 48(sp),d0
     fb8:	\----- bge.s f8e <CstCreateCopperlist+0x74>

  clpartinstruction = CstClScreen;
     fba:	       move.l #98370,52(sp)

  for(int i=0; i<12;i++)
     fc2:	       clr.l 44(sp)
     fc6:	   /-- bra.s fec <CstCreateCopperlist+0xd2>
    *cl++ = *clpartinstruction++;
     fc8:	/--|-> move.l 52(sp),d1
     fcc:	|  |   move.l d1,d2
     fce:	|  |   addq.l #4,d2
     fd0:	|  |   move.l d2,52(sp)
     fd4:	|  |   move.l 56(sp),d0
     fd8:	|  |   move.l d0,d2
     fda:	|  |   addq.l #4,d2
     fdc:	|  |   move.l d2,56(sp)
     fe0:	|  |   movea.l d1,a0
     fe2:	|  |   move.l (a0),d1
     fe4:	|  |   movea.l d0,a0
     fe6:	|  |   move.l d1,(a0)
  for(int i=0; i<12;i++)
     fe8:	|  |   addq.l #1,44(sp)
     fec:	|  \-> moveq #11,d0
     fee:	|      cmp.l 44(sp),d0
     ff2:	\----- bge.s fc8 <CstCreateCopperlist+0xae>

  clpartinstruction = CstClBitplanes;
     ff4:	       move.l #98418,52(sp)
  for(int i=0; i<10;i++)
     ffc:	       clr.l 40(sp)
    1000:	   /-- bra.s 1026 <CstCreateCopperlist+0x10c>
    *cl++ = *clpartinstruction++;        
    1002:	/--|-> move.l 52(sp),d1
    1006:	|  |   move.l d1,d2
    1008:	|  |   addq.l #4,d2
    100a:	|  |   move.l d2,52(sp)
    100e:	|  |   move.l 56(sp),d0
    1012:	|  |   move.l d0,d2
    1014:	|  |   addq.l #4,d2
    1016:	|  |   move.l d2,56(sp)
    101a:	|  |   movea.l d1,a0
    101c:	|  |   move.l (a0),d1
    101e:	|  |   movea.l d0,a0
    1020:	|  |   move.l d1,(a0)
  for(int i=0; i<10;i++)
    1022:	|  |   addq.l #1,40(sp)
    1026:	|  \-> moveq #9,d0
    1028:	|      cmp.l 40(sp),d0
    102c:	\----- bge.s 1002 <CstCreateCopperlist+0xe8>

  
  clpartinstruction = CstClColorTemplate;
    102e:	       move.l #98458,52(sp)
  CstClColor = (UWORD *) cl;
    1036:	       move.l 56(sp),19b56 <CstClColor>
  for(int i=0; i<32;i++)
    103e:	       clr.l 36(sp)
    1042:	   /-- bra.s 1068 <CstCreateCopperlist+0x14e>
    *cl++ = *clpartinstruction++;        
    1044:	/--|-> move.l 52(sp),d1
    1048:	|  |   move.l d1,d2
    104a:	|  |   addq.l #4,d2
    104c:	|  |   move.l d2,52(sp)
    1050:	|  |   move.l 56(sp),d0
    1054:	|  |   move.l d0,d2
    1056:	|  |   addq.l #4,d2
    1058:	|  |   move.l d2,56(sp)
    105c:	|  |   movea.l d1,a0
    105e:	|  |   move.l (a0),d1
    1060:	|  |   movea.l d0,a0
    1062:	|  |   move.l d1,(a0)
  for(int i=0; i<32;i++)
    1064:	|  |   addq.l #1,36(sp)
    1068:	|  \-> moveq #31,d0
    106a:	|      cmp.l 36(sp),d0
    106e:	\----- bge.s 1044 <CstCreateCopperlist+0x12a>
 
  /* Screen is bigger than real screen? Setup BPLxMod accordingly*/
  if(width > 40) {
    1070:	       moveq #40,d1
    1072:	       cmp.l 64(sp),d1
    1076:	   /-- bge.s 10d4 <CstCreateCopperlist+0x1ba>
    int tmp = width - 40;
    1078:	   |   moveq #-40,d2
    107a:	   |   add.l 64(sp),d2
    107e:	   |   move.l d2,12(sp)
    UWORD *cw = (UWORD *) cl; 
    1082:	   |   move.l 56(sp),8(sp)
    *cw++ = 0x108;
    1088:	   |   move.l 8(sp),d0
    108c:	   |   move.l d0,d1
    108e:	   |   addq.l #2,d1
    1090:	   |   move.l d1,8(sp)
    1094:	   |   movea.l d0,a0
    1096:	   |   move.w #264,(a0)
    *cw++ = tmp;
    109a:	   |   move.l 8(sp),d0
    109e:	   |   move.l d0,d1
    10a0:	   |   addq.l #2,d1
    10a2:	   |   move.l d1,8(sp)
    10a6:	   |   move.l 12(sp),d1
    10aa:	   |   movea.l d0,a0
    10ac:	   |   move.w d1,(a0)
    *cw++ = 0x10a;
    10ae:	   |   move.l 8(sp),d0
    10b2:	   |   move.l d0,d1
    10b4:	   |   addq.l #2,d1
    10b6:	   |   move.l d1,8(sp)
    10ba:	   |   movea.l d0,a0
    10bc:	   |   move.w #266,(a0)
    *cw++ = tmp;     
    10c0:	   |   move.l 8(sp),d0
    10c4:	   |   move.l d0,d1
    10c6:	   |   addq.l #2,d1
    10c8:	   |   move.l d1,8(sp)
    10cc:	   |   move.l 12(sp),d1
    10d0:	   |   movea.l d0,a0
    10d2:	   |   move.w d1,(a0)
  }

  *cl++ = 0xfffffffe;
    10d4:	   \-> move.l 56(sp),d0
    10d8:	       move.l d0,d1
    10da:	       addq.l #4,d1
    10dc:	       move.l d1,56(sp)
    10e0:	       moveq #-2,d2
    10e2:	       movea.l d0,a0
    10e4:	       move.l d2,(a0)
  return (UWORD *) retval;  
    10e6:	       move.l 20(sp),d0
}
    10ea:	       move.l (sp)+,d2
    10ec:	       movea.l (sp)+,a6
    10ee:	       lea 52(sp),sp
    10f2:	       rts

000010f4 <CstDisplayBackDrop>:

void CstDisplayBackDrop() 
{
    10f4:	       lea -28(sp),sp
    10f8:	       move.l d2,-(sp)
  ULONG *bplcursorsrc = (ULONG *) CstBackDrop;
    10fa:	       move.l 19b44 <CstBackDrop>,28(sp)
  ULONG *bplcursordst = (ULONG *) CstDrawBuffer;
    1102:	       move.l 19b52 <CstDrawBuffer>,24(sp)
  for(int i=0;i<CstBackdropSize/4;i++)
    110a:	       clr.l 20(sp)
    110e:	   /-- bra.s 1134 <CstDisplayBackDrop+0x40>
  {
    *bplcursordst++ = *bplcursorsrc++;
    1110:	/--|-> move.l 28(sp),d1
    1114:	|  |   move.l d1,d0
    1116:	|  |   addq.l #4,d0
    1118:	|  |   move.l d0,28(sp)
    111c:	|  |   move.l 24(sp),d0
    1120:	|  |   move.l d0,d2
    1122:	|  |   addq.l #4,d2
    1124:	|  |   move.l d2,24(sp)
    1128:	|  |   movea.l d1,a0
    112a:	|  |   move.l (a0),d1
    112c:	|  |   movea.l d0,a0
    112e:	|  |   move.l d1,(a0)
  for(int i=0;i<CstBackdropSize/4;i++)
    1130:	|  |   addq.l #1,20(sp)
    1134:	|  \-> move.w 19b40 <CstBackdropSize>,d0
    113a:	|      lsr.w #2,d0
    113c:	|      move.w d0,d0
    113e:	|      andi.l #65535,d0
    1144:	|      cmp.l 20(sp),d0
    1148:	\----- bgt.s 1110 <CstDisplayBackDrop+0x1c>
  }

  UWORD *tmp = CstClColor;
    114a:	       move.l 19b56 <CstClColor>,16(sp)
  UWORD reg = 0x180;
    1152:	       move.w #384,14(sp)
  UWORD *colorpos = CstPalette;
    1158:	       move.l 19b5a <CstPalette>,10(sp)

  for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes
    1160:	       clr.l 6(sp)
    1164:	   /-- bra.s 11a0 <CstDisplayBackDrop+0xac>
    *tmp++ = reg;
    1166:	/--|-> move.l 16(sp),d0
    116a:	|  |   move.l d0,d1
    116c:	|  |   addq.l #2,d1
    116e:	|  |   move.l d1,16(sp)
    1172:	|  |   movea.l d0,a0
    1174:	|  |   move.w 14(sp),(a0)
    reg +=2;
    1178:	|  |   addq.w #2,14(sp)
    *tmp++ = *colorpos++;
    117c:	|  |   move.l 10(sp),d1
    1180:	|  |   move.l d1,d0
    1182:	|  |   addq.l #2,d0
    1184:	|  |   move.l d0,10(sp)
    1188:	|  |   move.l 16(sp),d0
    118c:	|  |   move.l d0,d2
    118e:	|  |   addq.l #2,d2
    1190:	|  |   move.l d2,16(sp)
    1194:	|  |   movea.l d1,a0
    1196:	|  |   move.w (a0),d1
    1198:	|  |   movea.l d0,a0
    119a:	|  |   move.w d1,(a0)
  for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes
    119c:	|  |   addq.l #1,6(sp)
    11a0:	|  \-> moveq #31,d0
    11a2:	|      cmp.l 6(sp),d0
    11a6:	\----- bge.s 1166 <CstDisplayBackDrop+0x72>
  }
}
    11a8:	       nop
    11aa:	       nop
    11ac:	       move.l (sp)+,d2
    11ae:	       lea 28(sp),sp
    11b2:	       rts

000011b4 <CstLoadBackdrop>:

void CstLoadBackdrop( BPTR fp, int x, int y) {
    11b4:	                      lea -96(sp),sp
    11b8:	                      movem.l d2-d4/a6,-(sp)
  UWORD width = get2bytes(fp);
    11bc:	                      move.l 116(sp),-(sp)
    11c0:	                      jsr 6bc <get2bytes>
    11c6:	                      addq.l #4,sp
    11c8:	                      move.w d0,82(sp)
  UWORD height = get2bytes(fp);  
    11cc:	                      move.l 116(sp),-(sp)
    11d0:	                      jsr 6bc <get2bytes>
    11d6:	                      addq.l #4,sp
    11d8:	                      move.w d0,80(sp)

  UWORD widthbytes = width/8;
    11dc:	                      move.w 82(sp),d0
    11e0:	                      lsr.w #3,d0
    11e2:	                      move.w d0,78(sp)
  UWORD widthwords = widthbytes/2;  
    11e6:	                      move.w 78(sp),d0
    11ea:	                      lsr.w #1,d0
    11ec:	                      move.w d0,76(sp)
  UWORD size = widthbytes*height*5; //Todo other number of bitplanes
    11f0:	                      move.w 78(sp),d1
    11f4:	                      muls.w 80(sp),d1
    11f8:	                      move.w d1,d0
    11fa:	                      add.w d0,d0
    11fc:	                      add.w d0,d0
    11fe:	                      move.w d0,d2
    1200:	                      add.w d1,d2
    1202:	                      move.w d2,74(sp)

  //Load Palette to Copper
  UWORD reg = 0x180;
    1206:	                      move.w #384,72(sp)
  CstPalette = AllocVec(32*2,MEMF_ANY); //ToDo other number of bitplanes
    120c:	                      moveq #64,d0
    120e:	                      move.l d0,68(sp)
    1212:	                      clr.l 64(sp)
    1216:	                      move.l 19c5e <SysBase>,d0
    121c:	                      movea.l d0,a6
    121e:	                      move.l 68(sp),d0
    1222:	                      move.l 64(sp),d1
    1226:	                      jsr -684(a6)
    122a:	                      move.l d0,60(sp)
    122e:	                      move.l 60(sp),d0
    1232:	                      move.l d0,19b5a <CstPalette>
  UWORD *tmp = CstPalette;
    1238:	                      move.l 19b5a <CstPalette>,108(sp)
  for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    1240:	                      clr.l 104(sp)
    1244:	                  /-- bra.s 126a <CstLoadBackdrop+0xb6>
    *tmp++ = get2bytes(fp);
    1246:	               /--|-> move.l 116(sp),-(sp)
    124a:	               |  |   jsr 6bc <get2bytes>
    1250:	               |  |   addq.l #4,sp
    1252:	               |  |   move.l d0,d1
    1254:	               |  |   move.l 108(sp),d0
    1258:	               |  |   move.l d0,d2
    125a:	               |  |   addq.l #2,d2
    125c:	               |  |   move.l d2,108(sp)
    1260:	               |  |   move.l d1,d1
    1262:	               |  |   movea.l d0,a0
    1264:	               |  |   move.w d1,(a0)
  for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    1266:	               |  |   addq.l #1,104(sp)
    126a:	               |  \-> moveq #31,d0
    126c:	               |      cmp.l 104(sp),d0
    1270:	               \----- bge.s 1246 <CstLoadBackdrop+0x92>
  }

  UWORD *tmpbuffer = AllocVec(size, MEMF_ANY); //Todo other number of bitplanes
    1272:	                      moveq #0,d0
    1274:	                      move.w 74(sp),d0
    1278:	                      move.l d0,56(sp)
    127c:	                      clr.l 52(sp)
    1280:	                      move.l 19c5e <SysBase>,d0
    1286:	                      movea.l d0,a6
    1288:	                      move.l 56(sp),d0
    128c:	                      move.l 52(sp),d1
    1290:	                      jsr -684(a6)
    1294:	                      move.l d0,48(sp)
    1298:	                      move.l 48(sp),d0
    129c:	                      move.l d0,44(sp)
  debug_register_bitmap(tmpbuffer, "tmpbuffer.bpl", width, height, 5, 0);
    12a0:	                      move.w 80(sp),d0
    12a4:	                      movea.w d0,a1
    12a6:	                      move.w 82(sp),d0
    12aa:	                      movea.w d0,a0
    12ac:	                      clr.l -(sp)
    12ae:	                      pea 5 <_start+0x5>
    12b2:	                      move.l a1,-(sp)
    12b4:	                      move.l a0,-(sp)
    12b6:	                      pea 13c43 <PutChar+0x123>
    12bc:	                      move.l 64(sp),-(sp)
    12c0:	                      jsr 1315c <debug_register_bitmap>
    12c6:	                      lea 24(sp),sp
  UWORD *tmpbuffercursor = tmpbuffer;
    12ca:	                      move.l 44(sp),100(sp)
  UWORD count = FRead( fp, tmpbuffer, 2, size/2);
    12d0:	                      move.l 116(sp),40(sp)
    12d6:	                      move.l 44(sp),36(sp)
    12dc:	                      moveq #2,d2
    12de:	                      move.l d2,32(sp)
    12e2:	                      move.w 74(sp),d0
    12e6:	                      lsr.w #1,d0
    12e8:	                      move.w d0,d0
    12ea:	                      andi.l #65535,d0
    12f0:	                      move.l d0,28(sp)
    12f4:	                      move.l 19c66 <DOSBase>,d0
    12fa:	                      movea.l d0,a6
    12fc:	                      move.l 40(sp),d1
    1300:	                      move.l 36(sp),d2
    1304:	                      move.l 32(sp),d3
    1308:	                      move.l 28(sp),d4
    130c:	                      jsr -324(a6)
    1310:	                      move.l d0,24(sp)
    1314:	                      move.l 24(sp),d0
    1318:	                      move.w d0,22(sp)
  
  if(!count) {
    131c:	                  /-- bne.s 1330 <CstLoadBackdrop+0x17c>
    KPrintF("Error while reading stream");
    131e:	                  |   pea 13c51 <PutChar+0x131>
    1324:	                  |   jsr 12f14 <KPrintF>
    132a:	                  |   addq.l #4,sp
    return;
    132c:	/-----------------|-- bra.w 1416 <CstLoadBackdrop+0x262>
  }
  

  tmp = CstBackDrop; 
    1330:	|                 \-> move.l 19b44 <CstBackDrop>,108(sp)
  UWORD offset = widthwords*y + x / 16;
    1338:	|                     move.l 124(sp),d0
    133c:	|                     muls.w 76(sp),d0
    1340:	|                     move.l 120(sp),d1
    1344:	|                     movea.l d1,a0
    1346:	|                     cmpa.w #0,a0
    134a:	|                 /-- bge.s 1350 <CstLoadBackdrop+0x19c>
    134c:	|                 |   lea 15(a0),a0
    1350:	|                 \-> move.l a0,d1
    1352:	|                     asr.l #4,d1
    1354:	|                     move.l d1,d1
    1356:	|                     movea.w d0,a0
    1358:	|                     adda.w d1,a0
    135a:	|                     move.w a0,20(sp)
  tmp += offset;    
    135e:	|                     moveq #0,d0
    1360:	|                     move.w 20(sp),d0
    1364:	|                     add.l d0,d0
    1366:	|                     add.l d0,108(sp)

  for(int i3=0;i3<5;i3++) //ToDo other number of bitplanes
    136a:	|                     clr.l 96(sp)
    136e:	|     /-------------- bra.s 13ee <CstLoadBackdrop+0x23a>
  {    
    UWORD *tmp2 = tmp;
    1370:	|  /--|-------------> move.l 108(sp),92(sp)
    for(int i2=0;i2<height;i2++)
    1376:	|  |  |               clr.l 88(sp)
    137a:	|  |  |     /-------- bra.s 13c8 <CstLoadBackdrop+0x214>
    {
      for(int i=0;i<widthwords;i++)
    137c:	|  |  |  /--|-------> clr.l 84(sp)
    1380:	|  |  |  |  |     /-- bra.s 13a6 <CstLoadBackdrop+0x1f2>
        *tmp2++ = *tmpbuffercursor++;
    1382:	|  |  |  |  |  /--|-> move.l 100(sp),d1
    1386:	|  |  |  |  |  |  |   move.l d1,d0
    1388:	|  |  |  |  |  |  |   addq.l #2,d0
    138a:	|  |  |  |  |  |  |   move.l d0,100(sp)
    138e:	|  |  |  |  |  |  |   move.l 92(sp),d0
    1392:	|  |  |  |  |  |  |   move.l d0,d2
    1394:	|  |  |  |  |  |  |   addq.l #2,d2
    1396:	|  |  |  |  |  |  |   move.l d2,92(sp)
    139a:	|  |  |  |  |  |  |   movea.l d1,a0
    139c:	|  |  |  |  |  |  |   move.w (a0),d1
    139e:	|  |  |  |  |  |  |   movea.l d0,a0
    13a0:	|  |  |  |  |  |  |   move.w d1,(a0)
      for(int i=0;i<widthwords;i++)
    13a2:	|  |  |  |  |  |  |   addq.l #1,84(sp)
    13a6:	|  |  |  |  |  |  \-> moveq #0,d0
    13a8:	|  |  |  |  |  |      move.w 76(sp),d0
    13ac:	|  |  |  |  |  |      cmp.l 84(sp),d0
    13b0:	|  |  |  |  |  \----- bgt.s 1382 <CstLoadBackdrop+0x1ce>
      tmp2 += 20-widthwords;
    13b2:	|  |  |  |  |         moveq #0,d0
    13b4:	|  |  |  |  |         move.w 76(sp),d0
    13b8:	|  |  |  |  |         moveq #20,d1
    13ba:	|  |  |  |  |         sub.l d0,d1
    13bc:	|  |  |  |  |         move.l d1,d0
    13be:	|  |  |  |  |         add.l d0,d0
    13c0:	|  |  |  |  |         add.l d0,92(sp)
    for(int i2=0;i2<height;i2++)
    13c4:	|  |  |  |  |         addq.l #1,88(sp)
    13c8:	|  |  |  |  \-------> moveq #0,d0
    13ca:	|  |  |  |            move.w 80(sp),d0
    13ce:	|  |  |  |            cmp.l 88(sp),d0
    13d2:	|  |  |  \----------- bgt.s 137c <CstLoadBackdrop+0x1c8>
    }
    tmp += CstBackdropSizePlane / 2;
    13d4:	|  |  |               move.w 19b42 <CstBackdropSizePlane>,d0
    13da:	|  |  |               lsr.w #1,d0
    13dc:	|  |  |               move.w d0,d0
    13de:	|  |  |               andi.l #65535,d0
    13e4:	|  |  |               add.l d0,d0
    13e6:	|  |  |               add.l d0,108(sp)
  for(int i3=0;i3<5;i3++) //ToDo other number of bitplanes
    13ea:	|  |  |               addq.l #1,96(sp)
    13ee:	|  |  \-------------> moveq #4,d0
    13f0:	|  |                  cmp.l 96(sp),d0
    13f4:	|  \----------------- bge.w 1370 <CstLoadBackdrop+0x1bc>
  }

  FreeVec(tmpbuffer);
    13f8:	|                     move.l 44(sp),16(sp)
    13fe:	|                     move.l 19c5e <SysBase>,d0
    1404:	|                     movea.l d0,a6
    1406:	|                     movea.l 16(sp),a1
    140a:	|                     jsr -690(a6)

  CstApplyBackDropCounter = 2;
    140e:	|                     move.w #2,19b4c <CstApplyBackDropCounter>

}
    1416:	\-------------------> movem.l (sp)+,d2-d4/a6
    141a:	                      lea 96(sp),sp
    141e:	                      rts

00001420 <CstSetCl>:

void CstSetCl(UWORD *copperlist)
{
    1420:	subq.l #4,sp
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    1422:	move.l #14675968,(sp)
  custom->cop1lc = (ULONG) copperlist;
    1428:	move.l 8(sp),d0
    142c:	movea.l (sp),a0
    142e:	move.l d0,128(a0)
}
    1432:	nop
    1434:	addq.l #4,sp
    1436:	rts

00001438 <CstSludgeDisplay>:

void CstSludgeDisplay() {  
  if(CstApplyBackDropCounter > 0) 
    1438:	    move.w 19b4c <CstApplyBackDropCounter>,d0
    143e:	/-- ble.s 1454 <CstSludgeDisplay+0x1c>
  {
    CstDisplayBackDrop();
    1440:	|   jsr 10f4 <CstDisplayBackDrop>
    CstApplyBackDropCounter--;
    1446:	|   move.w 19b4c <CstApplyBackDropCounter>,d0
    144c:	|   subq.w #1,d0
    144e:	|   move.w d0,19b4c <CstApplyBackDropCounter>
  }
  CstSwapBuffer();
    1454:	\-> jsr 145e <CstSwapBuffer>
  
}
    145a:	    nop
    145c:	    rts

0000145e <CstSwapBuffer>:

void CstSwapBuffer( ) {
    145e:	lea -16(sp),sp
  ULONG *tmp;
  tmp = CstViewBuffer;
    1462:	move.l 19b4e <CstViewBuffer>,12(sp)
  CstViewBuffer = CstDrawBuffer;
    146a:	move.l 19b52 <CstDrawBuffer>,d0
    1470:	move.l d0,19b4e <CstViewBuffer>
  CstDrawBuffer = tmp;
    1476:	move.l 12(sp),19b52 <CstDrawBuffer>

  UWORD *copword = CstCopperList;
    147e:	move.l 19b48 <CstCopperList>,8(sp)
  ULONG ptr = (ULONG) CstViewBuffer;
    1486:	move.l 19b4e <CstViewBuffer>,d0
    148c:	move.l d0,4(sp)
  UWORD highword = ptr >> 16;
    1490:	move.l 4(sp),d0
    1494:	clr.w d0
    1496:	swap d0
    1498:	move.w d0,2(sp)
  UWORD lowword = ptr & 0xffff;  
    149c:	move.w 6(sp),(sp)

  copword[CSTBPL1LOW] = lowword;
    14a0:	movea.w #118,a0
    14a4:	adda.l 8(sp),a0
    14a8:	move.w (sp),(a0)
  copword[CSTBPL1HIGH] = highword;
    14aa:	movea.w #114,a0
    14ae:	adda.l 8(sp),a0
    14b2:	move.w 2(sp),(a0)

  ptr +=  40*256;
    14b6:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    14be:	move.l 4(sp),d0
    14c2:	clr.w d0
    14c4:	swap d0
    14c6:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    14ca:	move.w 6(sp),(sp)

  copword[CSTBPL2LOW] = lowword;
    14ce:	movea.w #126,a0
    14d2:	adda.l 8(sp),a0
    14d6:	move.w (sp),(a0)
  copword[CSTBPL2HIGH] = highword;
    14d8:	movea.w #122,a0
    14dc:	adda.l 8(sp),a0
    14e0:	move.w 2(sp),(a0)
  
  ptr +=  40*256;
    14e4:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    14ec:	move.l 4(sp),d0
    14f0:	clr.w d0
    14f2:	swap d0
    14f4:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    14f8:	move.w 6(sp),(sp)
  
  copword[CSTBPL3LOW] = lowword;
    14fc:	movea.l 8(sp),a0
    1500:	lea 134(a0),a0
    1504:	move.w (sp),(a0)
  copword[CSTBPL3HIGH] = highword;
    1506:	movea.l 8(sp),a0
    150a:	lea 130(a0),a0
    150e:	move.w 2(sp),(a0)

  ptr +=  40*256;
    1512:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    151a:	move.l 4(sp),d0
    151e:	clr.w d0
    1520:	swap d0
    1522:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    1526:	move.w 6(sp),(sp)

  copword[CSTBPL4LOW] = lowword;
    152a:	movea.l 8(sp),a0
    152e:	lea 142(a0),a0
    1532:	move.w (sp),(a0)
  copword[CSTBPL4HIGH] = highword;
    1534:	movea.l 8(sp),a0
    1538:	lea 138(a0),a0
    153c:	move.w 2(sp),(a0)

  ptr +=  40*256;
    1540:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    1548:	move.l 4(sp),d0
    154c:	clr.w d0
    154e:	swap d0
    1550:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    1554:	move.w 6(sp),(sp)

  copword[CSTBPL5LOW] = lowword;
    1558:	movea.l 8(sp),a0
    155c:	lea 150(a0),a0
    1560:	move.w (sp),(a0)
  copword[CSTBPL5HIGH] = highword;
    1562:	movea.l 8(sp),a0
    1566:	lea 146(a0),a0
    156a:	move.w 2(sp),(a0)

}
    156e:	nop
    1570:	lea 16(sp),sp
    1574:	rts

00001576 <CstReserveBackdrop>:

BOOL CstReserveBackdrop(int width, int height) {
    1576:	          lea -44(sp),sp
    157a:	          move.l a6,-(sp)

  width = width / 8;
    157c:	          move.l 52(sp),d0
    1580:	      /-- bpl.s 1584 <CstReserveBackdrop+0xe>
    1582:	      |   addq.l #7,d0
    1584:	      \-> asr.l #3,d0
    1586:	          move.l d0,52(sp)

  if( width < 40) 
    158a:	          moveq #39,d0
    158c:	          cmp.l 52(sp),d0
    1590:	      /-- blt.s 15a6 <CstReserveBackdrop+0x30>
  {
    KPrintF("CstReserveBackdrop: Screens smaller than 320px not supported.");
    1592:	      |   pea 13c6c <PutChar+0x14c>
    1598:	      |   jsr 12f14 <KPrintF>
    159e:	      |   addq.l #4,sp
    return FALSE;
    15a0:	      |   clr.w d0
    15a2:	/-----|-- bra.w 1784 <CstReserveBackdrop+0x20e>
  }  

  CstCopperList = CstCreateCopperlist( width);
    15a6:	|     \-> move.l 52(sp),-(sp)
    15aa:	|         jsr f1a <CstCreateCopperlist>
    15b0:	|         addq.l #4,sp
    15b2:	|         move.l d0,19b48 <CstCopperList>
  CstBackdropSizePlane = width*height;
    15b8:	|         move.l 52(sp),d1
    15bc:	|         move.l 56(sp),d0
    15c0:	|         muls.w d1,d0
    15c2:	|         move.w d0,19b42 <CstBackdropSizePlane>
  CstBackdropSize = CstBackdropSizePlane * 5; //Todo: Support other Bitplane Modes;
    15c8:	|         move.w 19b42 <CstBackdropSizePlane>,d1
    15ce:	|         move.w d1,d0
    15d0:	|         add.w d0,d0
    15d2:	|         add.w d0,d0
    15d4:	|         add.w d1,d0
    15d6:	|         move.w d0,19b40 <CstBackdropSize>

  CstBackDrop = AllocVec(CstBackdropSize,MEMF_CHIP);
    15dc:	|         move.w 19b40 <CstBackdropSize>,d0
    15e2:	|         move.w d0,d0
    15e4:	|         andi.l #65535,d0
    15ea:	|         move.l d0,36(sp)
    15ee:	|         moveq #2,d1
    15f0:	|         move.l d1,32(sp)
    15f4:	|         move.l 19c5e <SysBase>,d0
    15fa:	|         movea.l d0,a6
    15fc:	|         move.l 36(sp),d0
    1600:	|         move.l 32(sp),d1
    1604:	|         jsr -684(a6)
    1608:	|         move.l d0,28(sp)
    160c:	|         move.l 28(sp),d0
    1610:	|         move.l d0,19b44 <CstBackDrop>
 	debug_register_bitmap(CstBackDrop, "CstBackDrop.bpl", 320, 256, 5, 0);
    1616:	|         move.l 19b44 <CstBackDrop>,d0
    161c:	|         clr.l -(sp)
    161e:	|         pea 5 <_start+0x5>
    1622:	|         pea 100 <copyString+0x48>
    1626:	|         pea 140 <decodeFilename+0x28>
    162a:	|         pea 13caa <PutChar+0x18a>
    1630:	|         move.l d0,-(sp)
    1632:	|         jsr 1315c <debug_register_bitmap>
    1638:	|         lea 24(sp),sp

  //Initialize Buffer
  ULONG *cursor = CstBackDrop;
    163c:	|         move.l 19b44 <CstBackDrop>,44(sp)
  for(int i=0;i<CstBackdropSize/4;i++)
    1644:	|         clr.l 40(sp)
    1648:	|     /-- bra.s 165e <CstReserveBackdrop+0xe8>
  {
    *cursor++ = 0;
    164a:	|  /--|-> move.l 44(sp),d0
    164e:	|  |  |   move.l d0,d1
    1650:	|  |  |   addq.l #4,d1
    1652:	|  |  |   move.l d1,44(sp)
    1656:	|  |  |   movea.l d0,a0
    1658:	|  |  |   clr.l (a0)
  for(int i=0;i<CstBackdropSize/4;i++)
    165a:	|  |  |   addq.l #1,40(sp)
    165e:	|  |  \-> move.w 19b40 <CstBackdropSize>,d0
    1664:	|  |      lsr.w #2,d0
    1666:	|  |      move.w d0,d0
    1668:	|  |      andi.l #65535,d0
    166e:	|  |      cmp.l 40(sp),d0
    1672:	|  \----- bgt.s 164a <CstReserveBackdrop+0xd4>
  }  
  
  CstDrawBuffer = AllocVec(CstBackdropSize,MEMF_CHIP);
    1674:	|         move.w 19b40 <CstBackdropSize>,d0
    167a:	|         move.w d0,d0
    167c:	|         andi.l #65535,d0
    1682:	|         move.l d0,24(sp)
    1686:	|         moveq #2,d0
    1688:	|         move.l d0,20(sp)
    168c:	|         move.l 19c5e <SysBase>,d0
    1692:	|         movea.l d0,a6
    1694:	|         move.l 24(sp),d0
    1698:	|         move.l 20(sp),d1
    169c:	|         jsr -684(a6)
    16a0:	|         move.l d0,16(sp)
    16a4:	|         move.l 16(sp),d0
    16a8:	|         move.l d0,19b52 <CstDrawBuffer>
  CstViewBuffer = AllocVec(CstBackdropSize,MEMF_CHIP);
    16ae:	|         move.w 19b40 <CstBackdropSize>,d0
    16b4:	|         move.w d0,d0
    16b6:	|         andi.l #65535,d0
    16bc:	|         move.l d0,12(sp)
    16c0:	|         moveq #2,d1
    16c2:	|         move.l d1,8(sp)
    16c6:	|         move.l 19c5e <SysBase>,d0
    16cc:	|         movea.l d0,a6
    16ce:	|         move.l 12(sp),d0
    16d2:	|         move.l 8(sp),d1
    16d6:	|         jsr -684(a6)
    16da:	|         move.l d0,4(sp)
    16de:	|         move.l 4(sp),d0
    16e2:	|         move.l d0,19b4e <CstViewBuffer>

  debug_register_bitmap(CstDrawBuffer, "drawbuffer.bpl", width*8, height, 5, 0);
    16e8:	|         move.l 56(sp),d0
    16ec:	|         movea.w d0,a1
    16ee:	|         move.l 52(sp),d0
    16f2:	|         lsl.w #3,d0
    16f4:	|         movea.w d0,a0
    16f6:	|         move.l 19b52 <CstDrawBuffer>,d0
    16fc:	|         clr.l -(sp)
    16fe:	|         pea 5 <_start+0x5>
    1702:	|         move.l a1,-(sp)
    1704:	|         move.l a0,-(sp)
    1706:	|         pea 13cba <PutChar+0x19a>
    170c:	|         move.l d0,-(sp)
    170e:	|         jsr 1315c <debug_register_bitmap>
    1714:	|         lea 24(sp),sp
  debug_register_bitmap(CstViewBuffer, "viewbuffer.bpl", width*8, height, 5, 0);
    1718:	|         move.l 56(sp),d0
    171c:	|         movea.w d0,a1
    171e:	|         move.l 52(sp),d0
    1722:	|         lsl.w #3,d0
    1724:	|         movea.w d0,a0
    1726:	|         move.l 19b4e <CstViewBuffer>,d0
    172c:	|         clr.l -(sp)
    172e:	|         pea 5 <_start+0x5>
    1732:	|         move.l a1,-(sp)
    1734:	|         move.l a0,-(sp)
    1736:	|         pea 13cc9 <PutChar+0x1a9>
    173c:	|         move.l d0,-(sp)
    173e:	|         jsr 1315c <debug_register_bitmap>
    1744:	|         lea 24(sp),sp


  if( !CstCopperList || ! CstDrawBuffer || !CstViewBuffer)
    1748:	|         move.l 19b48 <CstCopperList>,d0
    174e:	|     /-- beq.s 1760 <CstReserveBackdrop+0x1ea>
    1750:	|     |   move.l 19b52 <CstDrawBuffer>,d0
    1756:	|     +-- beq.s 1760 <CstReserveBackdrop+0x1ea>
    1758:	|     |   move.l 19b4e <CstViewBuffer>,d0
    175e:	|  /--|-- bne.s 1772 <CstReserveBackdrop+0x1fc>
  {
    KPrintF("CstReserveBackdrop: Memory allocation failed");
    1760:	|  |  \-> pea 13cd8 <PutChar+0x1b8>
    1766:	|  |      jsr 12f14 <KPrintF>
    176c:	|  |      addq.l #4,sp
    return FALSE;
    176e:	|  |      clr.w d0
    1770:	+--|----- bra.s 1784 <CstReserveBackdrop+0x20e>
  }

  CstSetCl( CstCopperList);
    1772:	|  \----> move.l 19b48 <CstCopperList>,d0
    1778:	|         move.l d0,-(sp)
    177a:	|         jsr 1420 <CstSetCl>
    1780:	|         addq.l #4,sp
  return TRUE;
    1782:	|         moveq #1,d0

}
    1784:	\-------> movea.l (sp)+,a6
    1786:	          lea 44(sp),sp
    178a:	          rts

0000178c <CstFreeBuffer>:

void CstFreeBuffer( ) {
    178c:	    lea -12(sp),sp
    1790:	    move.l a6,-(sp)
  if( CstDrawBuffer) FreeVec(CstDrawBuffer);
    1792:	    move.l 19b52 <CstDrawBuffer>,d0
    1798:	/-- beq.s 17b2 <CstFreeBuffer+0x26>
    179a:	|   move.l 19b52 <CstDrawBuffer>,12(sp)
    17a2:	|   move.l 19c5e <SysBase>,d0
    17a8:	|   movea.l d0,a6
    17aa:	|   movea.l 12(sp),a1
    17ae:	|   jsr -690(a6)
  if( CstViewBuffer) FreeVec(CstViewBuffer);
    17b2:	\-> move.l 19b4e <CstViewBuffer>,d0
    17b8:	/-- beq.s 17d2 <CstFreeBuffer+0x46>
    17ba:	|   move.l 19b4e <CstViewBuffer>,8(sp)
    17c2:	|   move.l 19c5e <SysBase>,d0
    17c8:	|   movea.l d0,a6
    17ca:	|   movea.l 8(sp),a1
    17ce:	|   jsr -690(a6)
  if( CstCopperList) FreeVec(CstCopperList);  
    17d2:	\-> move.l 19b48 <CstCopperList>,d0
    17d8:	/-- beq.s 17f2 <CstFreeBuffer+0x66>
    17da:	|   move.l 19b48 <CstCopperList>,4(sp)
    17e2:	|   move.l 19c5e <SysBase>,d0
    17e8:	|   movea.l d0,a6
    17ea:	|   movea.l 4(sp),a1
    17ee:	|   jsr -690(a6)
}
    17f2:	\-> nop
    17f4:	    movea.l (sp)+,a6
    17f6:	    lea 12(sp),sp
    17fa:	    rts

000017fc <drawLine>:
#include "support/gcc8_c_support.h"
#include "line.h"

extern int sceneWidth, sceneHeight;

void drawLine(int x1, int y1, int x2, int y2) {
    17fc:	       lea -20(sp),sp
	int x, y;
	BOOL backwards = FALSE;
    1800:	       clr.w 10(sp)
	
	if (x1 < 0)  x1 = 0;
    1804:	       tst.l 24(sp)
    1808:	   /-- bge.s 180e <drawLine+0x12>
    180a:	   |   clr.l 24(sp)
	if (y1 < 0)  y1 = 0;
    180e:	   \-> tst.l 28(sp)
    1812:	   /-- bge.s 1818 <drawLine+0x1c>
    1814:	   |   clr.l 28(sp)
	if (x2 < 0)  x2 = 0;
    1818:	   \-> tst.l 32(sp)
    181c:	   /-- bge.s 1822 <drawLine+0x26>
    181e:	   |   clr.l 32(sp)
	if (y2 < 0)  y2 = 0;
    1822:	   \-> tst.l 36(sp)
    1826:	   /-- bge.s 182c <drawLine+0x30>
    1828:	   |   clr.l 36(sp)
	if (x1 > sceneWidth) x1 = sceneWidth - 1;
    182c:	   \-> move.l 19cfa <sceneWidth>,d0
    1832:	       cmp.l 24(sp),d0
    1836:	   /-- bge.s 1846 <drawLine+0x4a>
    1838:	   |   move.l 19cfa <sceneWidth>,d0
    183e:	   |   move.l d0,d1
    1840:	   |   subq.l #1,d1
    1842:	   |   move.l d1,24(sp)
	if (x2 > sceneWidth) x2 = sceneWidth - 1;
    1846:	   \-> move.l 19cfa <sceneWidth>,d0
    184c:	       cmp.l 32(sp),d0
    1850:	   /-- bge.s 1860 <drawLine+0x64>
    1852:	   |   move.l 19cfa <sceneWidth>,d0
    1858:	   |   move.l d0,d1
    185a:	   |   subq.l #1,d1
    185c:	   |   move.l d1,32(sp)
	if (y1 > sceneHeight) y1 = sceneHeight - 1;
    1860:	   \-> move.l 19cfe <sceneHeight>,d0
    1866:	       cmp.l 28(sp),d0
    186a:	   /-- bge.s 187a <drawLine+0x7e>
    186c:	   |   move.l 19cfe <sceneHeight>,d0
    1872:	   |   move.l d0,d1
    1874:	   |   subq.l #1,d1
    1876:	   |   move.l d1,28(sp)
	if (y2 > sceneHeight) y2 = sceneHeight - 1;
    187a:	   \-> move.l 19cfe <sceneHeight>,d0
    1880:	       cmp.l 36(sp),d0
    1884:	   /-- bge.s 1894 <drawLine+0x98>
    1886:	   |   move.l 19cfe <sceneHeight>,d0
    188c:	   |   move.l d0,d1
    188e:	   |   subq.l #1,d1
    1890:	   |   move.l d1,36(sp)

	if (x1 > x2) {
    1894:	   \-> move.l 24(sp),d0
    1898:	       cmp.l 32(sp),d0
    189c:	/----- ble.s 18b8 <drawLine+0xbc>
		x = x2; 
    189e:	|      move.l 32(sp),16(sp)
		backwards = !backwards;
    18a4:	|      tst.w 10(sp)
    18a8:	|      seq d0
    18aa:	|      neg.b d0
    18ac:	|      move.b d0,d0
    18ae:	|      andi.w #255,d0
    18b2:	|      move.w d0,10(sp)
    18b6:	|  /-- bra.s 18be <drawLine+0xc2>
	} else x = x1;
    18b8:	\--|-> move.l 24(sp),16(sp)
		
	if (y1 > y2) {
    18be:	   \-> move.l 28(sp),d1
    18c2:	       cmp.l 36(sp),d1
    18c6:	/----- ble.s 18e2 <drawLine+0xe6>
		y = y2; 
    18c8:	|      move.l 36(sp),12(sp)
		backwards = !backwards;
    18ce:	|      tst.w 10(sp)
    18d2:	|      seq d0
    18d4:	|      neg.b d0
    18d6:	|      move.b d0,d0
    18d8:	|      andi.w #255,d0
    18dc:	|      move.w d0,10(sp)
    18e0:	|  /-- bra.s 18e8 <drawLine+0xec>
	} else y = y1;	
    18e2:	\--|-> move.l 28(sp),12(sp)
	
	int diffX = x2-x1;
    18e8:	   \-> move.l 32(sp),d0
    18ec:	       sub.l 24(sp),d0
    18f0:	       move.l d0,6(sp)
    diffX = diffX < 0 ? diffX * -1 : diffX;
    18f4:	       move.l 6(sp),d0
    18f8:	   /-- bpl.s 18fc <drawLine+0x100>
    18fa:	   |   neg.l d0
    18fc:	   \-> move.l d0,6(sp)
	int diffY = y2-y1;	
    1900:	       move.l 36(sp),d1
    1904:	       sub.l 28(sp),d1
    1908:	       move.l d1,2(sp)
    diffY = diffY < 0 ? diffY * -1 : diffY;
    190c:	       move.l 2(sp),d0
    1910:	   /-- bpl.s 1914 <drawLine+0x118>
    1912:	   |   neg.l d0
    1914:	   \-> move.l d0,2(sp)
	
	if (! diffX) {
    1918:	       tst.l 6(sp)
    191c:	   /-- bne.s 1940 <drawLine+0x144>
		diffX = 1;
    191e:	   |   moveq #1,d0
    1920:	   |   move.l d0,6(sp)
		if (x == sceneWidth - 1) x = sceneWidth -2;
    1924:	   |   move.l 19cfa <sceneWidth>,d0
    192a:	   |   subq.l #1,d0
    192c:	   |   cmp.l 16(sp),d0
    1930:	   +-- bne.s 1940 <drawLine+0x144>
    1932:	   |   move.l 19cfa <sceneWidth>,d0
    1938:	   |   move.l d0,d1
    193a:	   |   subq.l #2,d1
    193c:	   |   move.l d1,16(sp)
	}
	if (! diffY) {
    1940:	   \-> tst.l 2(sp)
    1944:	   /-- bne.s 1968 <drawLine+0x16c>
		diffY = 1;
    1946:	   |   moveq #1,d0
    1948:	   |   move.l d0,2(sp)
		if (y == sceneHeight - 1) y = sceneHeight -2;
    194c:	   |   move.l 19cfe <sceneHeight>,d0
    1952:	   |   subq.l #1,d0
    1954:	   |   cmp.l 12(sp),d0
    1958:	   +-- bne.s 1968 <drawLine+0x16c>
    195a:	   |   move.l 19cfe <sceneHeight>,d0
    1960:	   |   move.l d0,d1
    1962:	   |   subq.l #2,d1
    1964:	   |   move.l d1,12(sp)
	}

    KPrintF("drawLine: Not implemented on Amiga"); //Amiga Todo: Implement 	
    1968:	   \-> pea 13d05 <PutChar+0x1e5>
    196e:	       jsr 12f14 <KPrintF>
    1974:	       addq.l #4,sp
	
}
    1976:	       nop
    1978:	       lea 20(sp),sp
    197c:	       rts

0000197e <deleteTextures>:
extern int specialSettings;
struct textureList *firstTexture = NULL;
BOOL NPOT_textures = TRUE;

void deleteTextures(unsigned int n,  unsigned int * textures)
{
    197e:	                      lea -24(sp),sp
    1982:	                      move.l a6,-(sp)
	if (firstTexture == NULL) {
    1984:	                      move.l 19b66 <firstTexture>,d0
    198a:	/-------------------- beq.w 1a68 <deleteTextures+0xea>
		//debugOut("Deleting texture while list is already empty.\n");
	} else {
		for (unsigned int i = 0; i < n; i++) {
    198e:	|                     clr.l 24(sp)
    1992:	|     /-------------- bra.w 1a5c <deleteTextures+0xde>
			BOOL found = FALSE;
    1996:	|  /--|-------------> clr.w 18(sp)
			struct textureList *list = firstTexture;
    199a:	|  |  |               move.l 19b66 <firstTexture>,20(sp)
			if (list->name == textures[i]) {
    19a2:	|  |  |               movea.l 20(sp),a0
    19a6:	|  |  |               move.l (a0),d1
    19a8:	|  |  |               move.l 24(sp),d0
    19ac:	|  |  |               add.l d0,d0
    19ae:	|  |  |               add.l d0,d0
    19b0:	|  |  |               movea.l 36(sp),a0
    19b4:	|  |  |               adda.l d0,a0
    19b6:	|  |  |               move.l (a0),d0
    19b8:	|  |  |               cmp.l d1,d0
    19ba:	|  |  |  /----------- bne.w 1a4e <deleteTextures+0xd0>
				found = TRUE;
    19be:	|  |  |  |            move.w #1,18(sp)
				firstTexture = list->next;
    19c4:	|  |  |  |            movea.l 20(sp),a0
    19c8:	|  |  |  |            move.l 12(a0),d0
    19cc:	|  |  |  |            move.l d0,19b66 <firstTexture>
				FreeVec(list);
    19d2:	|  |  |  |            move.l 20(sp),6(sp)
    19d8:	|  |  |  |            move.l 19c5e <SysBase>,d0
    19de:	|  |  |  |            movea.l d0,a6
    19e0:	|  |  |  |            movea.l 6(sp),a1
    19e4:	|  |  |  |            jsr -690(a6)
				continue;
    19e8:	|  |  |  |  /-------- bra.s 1a58 <deleteTextures+0xda>
			}

			while (list->next) {
				if (list->next->name == textures[i]) {
    19ea:	|  |  |  |  |  /----> movea.l 20(sp),a0
    19ee:	|  |  |  |  |  |      movea.l 12(a0),a0
    19f2:	|  |  |  |  |  |      move.l (a0),d1
    19f4:	|  |  |  |  |  |      move.l 24(sp),d0
    19f8:	|  |  |  |  |  |      add.l d0,d0
    19fa:	|  |  |  |  |  |      add.l d0,d0
    19fc:	|  |  |  |  |  |      movea.l 36(sp),a0
    1a00:	|  |  |  |  |  |      adda.l d0,a0
    1a02:	|  |  |  |  |  |      move.l (a0),d0
    1a04:	|  |  |  |  |  |      cmp.l d1,d0
    1a06:	|  |  |  |  |  |  /-- bne.s 1a44 <deleteTextures+0xc6>
					found = TRUE;
    1a08:	|  |  |  |  |  |  |   move.w #1,18(sp)
					struct textureList *deleteMe = list->next;
    1a0e:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    1a12:	|  |  |  |  |  |  |   move.l 12(a0),14(sp)
					list->next = list->next->next;
    1a18:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    1a1c:	|  |  |  |  |  |  |   movea.l 12(a0),a0
    1a20:	|  |  |  |  |  |  |   move.l 12(a0),d0
    1a24:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    1a28:	|  |  |  |  |  |  |   move.l d0,12(a0)
					FreeVec(deleteMe);
    1a2c:	|  |  |  |  |  |  |   move.l 14(sp),10(sp)
    1a32:	|  |  |  |  |  |  |   move.l 19c5e <SysBase>,d0
    1a38:	|  |  |  |  |  |  |   movea.l d0,a6
    1a3a:	|  |  |  |  |  |  |   movea.l 10(sp),a1
    1a3e:	|  |  |  |  |  |  |   jsr -690(a6)
					break;
    1a42:	|  |  |  |  +--|--|-- bra.s 1a58 <deleteTextures+0xda>
				}
				list = list->next;
    1a44:	|  |  |  |  |  |  \-> movea.l 20(sp),a0
    1a48:	|  |  |  |  |  |      move.l 12(a0),20(sp)
			while (list->next) {
    1a4e:	|  |  |  \--|--|----> movea.l 20(sp),a0
    1a52:	|  |  |     |  |      move.l 12(a0),d0
    1a56:	|  |  |     |  \----- bne.s 19ea <deleteTextures+0x6c>
		for (unsigned int i = 0; i < n; i++) {
    1a58:	|  |  |     \-------> addq.l #1,24(sp)
    1a5c:	|  |  \-------------> move.l 24(sp),d0
    1a60:	|  |                  cmp.l 32(sp),d0
    1a64:	|  \----------------- bcs.w 1996 <deleteTextures+0x18>
			}
		}
	}
}
    1a68:	\-------------------> nop
    1a6a:	                      movea.l (sp)+,a6
    1a6c:	                      lea 24(sp),sp
    1a70:	                      rts

00001a72 <setGraphicsWindow>:

void setGraphicsWindow(BOOL fullscreen) {
    1a72:	subq.l #4,sp
    1a74:	move.l 8(sp),d0
    1a78:	move.w d0,d0
    1a7a:	move.w d0,2(sp)
	KPrintF("setGraphicsWindow: Not implemented on Amiga yet"); //TODO
    1a7e:	pea 13d28 <PutChar+0x208>
    1a84:	jsr 12f14 <KPrintF>
    1a8a:	addq.l #4,sp
}
    1a8c:	nop
    1a8e:	addq.l #4,sp
    1a90:	rts

00001a92 <resourceNameFromNum>:

extern int numResourceNames /* = 0*/;
extern char * * allResourceNames /*= NULL*/;

const char * resourceNameFromNum (int i) {
	if (i == -1) return NULL;
    1a92:	       moveq #-1,d0
    1a94:	       cmp.l 4(sp),d0
    1a98:	   /-- bne.s 1a9e <resourceNameFromNum+0xc>
    1a9a:	   |   moveq #0,d0
    1a9c:	/--|-- bra.s 1ad6 <resourceNameFromNum+0x44>
	if (numResourceNames == 0) return "RESOURCE";
    1a9e:	|  \-> move.l 19c3a <numResourceNames>,d0
    1aa4:	|  /-- bne.s 1aae <resourceNameFromNum+0x1c>
    1aa6:	|  |   move.l #81240,d0
    1aac:	+--|-- bra.s 1ad6 <resourceNameFromNum+0x44>
	if (i < numResourceNames) return allResourceNames[i];
    1aae:	|  \-> move.l 19c3a <numResourceNames>,d0
    1ab4:	|      cmp.l 4(sp),d0
    1ab8:	|  /-- ble.s 1ad0 <resourceNameFromNum+0x3e>
    1aba:	|  |   move.l 19bf6 <allResourceNames>,d1
    1ac0:	|  |   move.l 4(sp),d0
    1ac4:	|  |   add.l d0,d0
    1ac6:	|  |   add.l d0,d0
    1ac8:	|  |   movea.l d1,a0
    1aca:	|  |   adda.l d0,a0
    1acc:	|  |   move.l (a0),d0
    1ace:	+--|-- bra.s 1ad6 <resourceNameFromNum+0x44>
	return "Unknown resource";
    1ad0:	|  \-> move.l #81249,d0
    1ad6:	\----> rts

00001ad8 <main_sludge>:
char * gamePath = NULL;
char *bundleFolder;
int weAreDoneSoQuit;

int main_sludge(int argc, char *argv[])
{
    1ad8:	          lea -40(sp),sp
    1adc:	          movem.l d2-d3/a6,-(sp)
	/* Dimensions of our window. */
	//AMIGA TODO: Maybe remove as there will be no windowed mode
    winWidth = 320;
    1ae0:	          move.l #320,19b5e <winWidth>
    winHeight = 256;
    1aea:	          move.l #256,19b62 <winHeight>

	char * sludgeFile;

	if(argc == 0) {
    1af4:	          tst.l 56(sp)
    1af8:	      /-- bne.s 1b10 <main_sludge+0x38>
		bundleFolder = copyString("game/");
    1afa:	      |   pea 13d72 <PutChar+0x252>
    1b00:	      |   jsr b8 <copyString>
    1b06:	      |   addq.l #4,sp
    1b08:	      |   move.l d0,19b76 <bundleFolder>
    1b0e:	   /--|-- bra.s 1b26 <main_sludge+0x4e>
	} else {
		bundleFolder = copyString(argv[0]);
    1b10:	   |  \-> movea.l 60(sp),a0
    1b14:	   |      move.l (a0),d0
    1b16:	   |      move.l d0,-(sp)
    1b18:	   |      jsr b8 <copyString>
    1b1e:	   |      addq.l #4,sp
    1b20:	   |      move.l d0,19b76 <bundleFolder>
	}
    
	int lastSlash = -1;
    1b26:	   \----> moveq #-1,d0
    1b28:	          move.l d0,44(sp)
	for (int i = 0; bundleFolder[i]; i ++) {
    1b2c:	          clr.l 40(sp)
    1b30:	   /----- bra.s 1b52 <main_sludge+0x7a>
		if (bundleFolder[i] == PATHSLASH) lastSlash = i;
    1b32:	/--|----> move.l 19b76 <bundleFolder>,d1
    1b38:	|  |      move.l 40(sp),d0
    1b3c:	|  |      movea.l d1,a0
    1b3e:	|  |      adda.l d0,a0
    1b40:	|  |      move.b (a0),d0
    1b42:	|  |      cmpi.b #47,d0
    1b46:	|  |  /-- bne.s 1b4e <main_sludge+0x76>
    1b48:	|  |  |   move.l 40(sp),44(sp)
	for (int i = 0; bundleFolder[i]; i ++) {
    1b4e:	|  |  \-> addq.l #1,40(sp)
    1b52:	|  \----> move.l 19b76 <bundleFolder>,d1
    1b58:	|         move.l 40(sp),d0
    1b5c:	|         movea.l d1,a0
    1b5e:	|         adda.l d0,a0
    1b60:	|         move.b (a0),d0
    1b62:	\-------- bne.s 1b32 <main_sludge+0x5a>
	}
	bundleFolder[lastSlash+1] = NULL;
    1b64:	          move.l 19b76 <bundleFolder>,d0
    1b6a:	          move.l 44(sp),d1
    1b6e:	          addq.l #1,d1
    1b70:	          movea.l d0,a0
    1b72:	          adda.l d1,a0
    1b74:	          clr.b (a0)

	if (argc > 1) {
    1b76:	          moveq #1,d0
    1b78:	          cmp.l 56(sp),d0
    1b7c:	      /-- bge.s 1b98 <main_sludge+0xc0>
		sludgeFile = argv[argc - 1];
    1b7e:	      |   move.l 56(sp),d0
    1b82:	      |   addi.l #1073741823,d0
    1b88:	      |   add.l d0,d0
    1b8a:	      |   add.l d0,d0
    1b8c:	      |   movea.l 60(sp),a0
    1b90:	      |   adda.l d0,a0
    1b92:	      |   move.l (a0),48(sp)
    1b96:	   /--|-- bra.s 1bf2 <main_sludge+0x11a>
	} else {
		sludgeFile = joinStrings (bundleFolder, "gamedata.slg");
    1b98:	   |  \-> move.l 19b76 <bundleFolder>,d0
    1b9e:	   |      pea 13d78 <PutChar+0x258>
    1ba4:	   |      move.l d0,-(sp)
    1ba6:	   |      jsr 103ec <joinStrings>
    1bac:	   |      addq.l #8,sp
    1bae:	   |      move.l d0,48(sp)
		if (! ( fileExists (sludgeFile) ) ) {
    1bb2:	   |      move.l 48(sp),-(sp)
    1bb6:	   |      jsr 10302 <fileExists>
    1bbc:	   |      addq.l #4,sp
    1bbe:	   |      tst.b d0
    1bc0:	   +----- bne.s 1bf2 <main_sludge+0x11a>
			FreeVec(sludgeFile);
    1bc2:	   |      move.l 48(sp),36(sp)
    1bc8:	   |      move.l 19c5e <SysBase>,d0
    1bce:	   |      movea.l d0,a6
    1bd0:	   |      movea.l 36(sp),a1
    1bd4:	   |      jsr -690(a6)
			sludgeFile = joinStrings (bundleFolder, "gamedata");			
    1bd8:	   |      move.l 19b76 <bundleFolder>,d0
    1bde:	   |      pea 13d85 <PutChar+0x265>
    1be4:	   |      move.l d0,-(sp)
    1be6:	   |      jsr 103ec <joinStrings>
    1bec:	   |      addq.l #8,sp
    1bee:	   |      move.l d0,48(sp)
	//AMIGA TODO: Show arguments
	/*if (! parseCmdlineParameters(argc, argv) && !(sludgeFile) ) {
		printCmdlineUsage();
		return 0;
	}*/
	if (! fileExists(sludgeFile) ) {	
    1bf2:	   \----> move.l 48(sp),-(sp)
    1bf6:	          jsr 10302 <fileExists>
    1bfc:	          addq.l #4,sp
    1bfe:	          tst.b d0
    1c00:	      /-- bne.s 1c4a <main_sludge+0x172>
		Write(Output(), (APTR)"Game file not found.\n", 21);
    1c02:	      |   move.l 19c66 <DOSBase>,d0
    1c08:	      |   movea.l d0,a6
    1c0a:	      |   jsr -60(a6)
    1c0e:	      |   move.l d0,28(sp)
    1c12:	      |   move.l 28(sp),d0
    1c16:	      |   move.l d0,24(sp)
    1c1a:	      |   move.l #81294,20(sp)
    1c22:	      |   moveq #21,d0
    1c24:	      |   move.l d0,16(sp)
    1c28:	      |   move.l 19c66 <DOSBase>,d0
    1c2e:	      |   movea.l d0,a6
    1c30:	      |   move.l 24(sp),d1
    1c34:	      |   move.l 20(sp),d2
    1c38:	      |   move.l 16(sp),d3
    1c3c:	      |   jsr -48(a6)
    1c40:	      |   move.l d0,12(sp)
		//AMIGA TODO: Show arguments
		//printCmdlineUsage();
		return 0;
    1c44:	      |   moveq #0,d0
    1c46:	/-----|-- bra.w 1da6 <main_sludge+0x2ce>
	}

	setGameFilePath (sludgeFile);	
    1c4a:	|     \-> move.l 48(sp),-(sp)
    1c4e:	|         jsr 1db0 <setGameFilePath>
    1c54:	|         addq.l #4,sp
	if (! initSludge (sludgeFile)) return 0;
    1c56:	|         move.l 48(sp),-(sp)
    1c5a:	|         jsr 363c <initSludge>
    1c60:	|         addq.l #4,sp
    1c62:	|         tst.w d0
    1c64:	|     /-- bne.s 1c6c <main_sludge+0x194>
    1c66:	|     |   moveq #0,d0
    1c68:	+-----|-- bra.w 1da6 <main_sludge+0x2ce>
	
	if( winWidth != 320 || winHeight != 256) {
    1c6c:	|     \-> move.l 19b5e <winWidth>,d0
    1c72:	|         cmpi.l #320,d0
    1c78:	|     /-- bne.s 1c88 <main_sludge+0x1b0>
    1c7a:	|     |   move.l 19b62 <winHeight>,d0
    1c80:	|     |   cmpi.l #256,d0
    1c86:	|  /--|-- beq.s 1caa <main_sludge+0x1d2>
		KPrintF("This Screen Format is currently unsupported on Amiga. Only PAL Lowres supported atm. winWidth and winHeight will be reseted.");	
    1c88:	|  |  \-> pea 13da4 <PutChar+0x284>
    1c8e:	|  |      jsr 12f14 <KPrintF>
    1c94:	|  |      addq.l #4,sp
		winWidth = 320;
    1c96:	|  |      move.l #320,19b5e <winWidth>
		winHeight = 256;
    1ca0:	|  |      move.l #256,19b62 <winHeight>
	}

	if (! resizeBackdrop (winWidth, winHeight)) {
    1caa:	|  \----> move.l 19b62 <winHeight>,d0
    1cb0:	|         move.l d0,d1
    1cb2:	|         move.l 19b5e <winWidth>,d0
    1cb8:	|         move.l d1,-(sp)
    1cba:	|         move.l d0,-(sp)
    1cbc:	|         jsr 9bfe <resizeBackdrop>
    1cc2:	|         addq.l #8,sp
    1cc4:	|         tst.w d0
    1cc6:	|     /-- bne.s 1cdc <main_sludge+0x204>
		KPrintF("Couldn't allocate memory for backdrop");
    1cc8:	|     |   pea 13e21 <PutChar+0x301>
    1cce:	|     |   jsr 12f14 <KPrintF>
    1cd4:	|     |   addq.l #4,sp
		return FALSE;
    1cd6:	|     |   moveq #0,d0
    1cd8:	+-----|-- bra.w 1da6 <main_sludge+0x2ce>
	}

	if (! initPeople ())
    1cdc:	|     \-> jsr 738e <initPeople>
    1ce2:	|         tst.w d0
    1ce4:	|     /-- bne.s 1cfa <main_sludge+0x222>
	{
		KPrintF("Couldn't initialise people stuff");
    1ce6:	|     |   pea 13e47 <PutChar+0x327>
    1cec:	|     |   jsr 12f14 <KPrintF>
    1cf2:	|     |   addq.l #4,sp
		return FALSE;
    1cf4:	|     |   moveq #0,d0
    1cf6:	+-----|-- bra.w 1da6 <main_sludge+0x2ce>
	}

	if (! initFloor ())
    1cfa:	|     \-> jsr 122be <initFloor>
    1d00:	|         tst.w d0
    1d02:	|     /-- bne.s 1d18 <main_sludge+0x240>
	{
		KPrintF("Couldn't initialise floor stuff");
    1d04:	|     |   pea 13e68 <PutChar+0x348>
    1d0a:	|     |   jsr 12f14 <KPrintF>
    1d10:	|     |   addq.l #4,sp
		
		return FALSE;
    1d12:	|     |   moveq #0,d0
    1d14:	+-----|-- bra.w 1da6 <main_sludge+0x2ce>
	}

	if (! initObjectTypes ())
    1d18:	|     \-> jsr 9dac <initObjectTypes>
    1d1e:	|         tst.w d0
    1d20:	|     /-- bne.s 1d34 <main_sludge+0x25c>
	{
		KPrintF("Couldn't initialise object type stuff");
    1d22:	|     |   pea 13e88 <PutChar+0x368>
    1d28:	|     |   jsr 12f14 <KPrintF>
    1d2e:	|     |   addq.l #4,sp
		return FALSE;
    1d30:	|     |   moveq #0,d0
    1d32:	+-----|-- bra.s 1da6 <main_sludge+0x2ce>
	}

	initSpeech ();
    1d34:	|     \-> jsr 59da <initSpeech>
	initStatusBar ();
    1d3a:	|         jsr 549e <initStatusBar>

	gameName = getNumberedString(1);
    1d40:	|         pea 1 <_start+0x1>
    1d44:	|         jsr 47dc <getNumberedString>
    1d4a:	|         addq.l #4,sp
    1d4c:	|         move.l d0,19b6e <gameName>
	//initSoundStuff (hMainWindow); Todo Amiga: Maybe move soundstuff here
	startNewFunctionNum (0, 0, NULL, noStack, TRUE);
    1d52:	|         move.l 19c2e <noStack>,d0
    1d58:	|         pea 1 <_start+0x1>
    1d5c:	|         move.l d0,-(sp)
    1d5e:	|         clr.l -(sp)
    1d60:	|         clr.l -(sp)
    1d62:	|         clr.l -(sp)
    1d64:	|         jsr 4664 <startNewFunctionNum>
    1d6a:	|         lea 20(sp),sp

	weAreDoneSoQuit = 0;
    1d6e:	|         clr.l 19b7a <weAreDoneSoQuit>
	while ( !weAreDoneSoQuit ) {				
    1d74:	|     /-- bra.s 1d88 <main_sludge+0x2b0>
		sludgeDisplay ();
    1d76:	|  /--|-> jsr 4616 <sludgeDisplay>
		handleInput();
    1d7c:	|  |  |   jsr 3634 <handleInput>
		WaitVbl();
    1d82:	|  |  |   jsr 12e3c <WaitVbl>
	while ( !weAreDoneSoQuit ) {				
    1d88:	|  |  \-> move.l 19b7a <weAreDoneSoQuit>,d0
    1d8e:	|  \----- beq.s 1d76 <main_sludge+0x29e>
	}	
	//Amiga Cleanup
	FreeVec(sludgeFile);
    1d90:	|         move.l 48(sp),32(sp)
    1d96:	|         move.l 19c5e <SysBase>,d0
    1d9c:	|         movea.l d0,a6
    1d9e:	|         movea.l 32(sp),a1
    1da2:	|         jsr -690(a6)
}
    1da6:	\-------> movem.l (sp)+,d2-d3/a6
    1daa:	          lea 40(sp),sp
    1dae:	          rts

00001db0 <setGameFilePath>:

void setGameFilePath (char * f) {
    1db0:	          lea -1104(sp),sp
    1db4:	          move.l a6,-(sp)
    1db6:	          move.l d2,-(sp)
	char currentDir[1000];

	if (!GetCurrentDirName( currentDir, 998)) {
    1db8:	          move.l #1112,d0
    1dbe:	          add.l sp,d0
    1dc0:	          addi.l #-1102,d0
    1dc6:	          move.l d0,1100(sp)
    1dca:	          move.l #998,1096(sp)
    1dd2:	          move.l 19c66 <DOSBase>,d0
    1dd8:	          movea.l d0,a6
    1dda:	          move.l 1100(sp),d1
    1dde:	          move.l 1096(sp),d2
    1de2:	          jsr -564(a6)
    1de6:	          move.w d0,1094(sp)
    1dea:	          move.w 1094(sp),d0
    1dee:	      /-- bne.s 1dfe <setGameFilePath+0x4e>
		KPrintF("setGameFilePath:  current directory.\n");
    1df0:	      |   pea 13eae <PutChar+0x38e>
    1df6:	      |   jsr 12f14 <KPrintF>
    1dfc:	      |   addq.l #4,sp
	}	

	int got = -1, a;	
    1dfe:	      \-> moveq #-1,d0
    1e00:	          move.l d0,1108(sp)

	for (a = 0; f[a]; a ++) {
    1e04:	          clr.l 1104(sp)
    1e08:	   /----- bra.s 1e26 <setGameFilePath+0x76>
		if (f[a] == PATHSLASH) got = a;
    1e0a:	/--|----> move.l 1104(sp),d0
    1e0e:	|  |      movea.l 1116(sp),a0
    1e12:	|  |      adda.l d0,a0
    1e14:	|  |      move.b (a0),d0
    1e16:	|  |      cmpi.b #47,d0
    1e1a:	|  |  /-- bne.s 1e22 <setGameFilePath+0x72>
    1e1c:	|  |  |   move.l 1104(sp),1108(sp)
	for (a = 0; f[a]; a ++) {
    1e22:	|  |  \-> addq.l #1,1104(sp)
    1e26:	|  \----> move.l 1104(sp),d0
    1e2a:	|         movea.l 1116(sp),a0
    1e2e:	|         adda.l d0,a0
    1e30:	|         move.b (a0),d0
    1e32:	\-------- bne.s 1e0a <setGameFilePath+0x5a>
	}

	if (got != -1) {
    1e34:	          moveq #-1,d0
    1e36:	          cmp.l 1108(sp),d0
    1e3a:	   /----- beq.s 1eb4 <setGameFilePath+0x104>
		f[got] = 0;	
    1e3c:	   |      move.l 1108(sp),d0
    1e40:	   |      movea.l 1116(sp),a0
    1e44:	   |      adda.l d0,a0
    1e46:	   |      clr.b (a0)
		BPTR lock = Lock(f, ACCESS_READ);	
    1e48:	   |      move.l 1116(sp),1090(sp)
    1e4e:	   |      moveq #-2,d0
    1e50:	   |      move.l d0,1086(sp)
    1e54:	   |      move.l 19c66 <DOSBase>,d0
    1e5a:	   |      movea.l d0,a6
    1e5c:	   |      move.l 1090(sp),d1
    1e60:	   |      move.l 1086(sp),d2
    1e64:	   |      jsr -84(a6)
    1e68:	   |      move.l d0,1082(sp)
    1e6c:	   |      move.l 1082(sp),d0
    1e70:	   |      move.l d0,1078(sp)
		if (!CurrentDir(lock)) {
    1e74:	   |      move.l 1078(sp),1074(sp)
    1e7a:	   |      move.l 19c66 <DOSBase>,d0
    1e80:	   |      movea.l d0,a6
    1e82:	   |      move.l 1074(sp),d1
    1e86:	   |      jsr -126(a6)
    1e8a:	   |      move.l d0,1070(sp)
    1e8e:	   |      move.l 1070(sp),d0
    1e92:	   |  /-- bne.s 1ea6 <setGameFilePath+0xf6>
			KPrintF("setGameFilePath:: Failed changing to directory %s\n", f);
    1e94:	   |  |   move.l 1116(sp),-(sp)
    1e98:	   |  |   pea 13ed4 <PutChar+0x3b4>
    1e9e:	   |  |   jsr 12f14 <KPrintF>
    1ea4:	   |  |   addq.l #8,sp
		}
		f[got] = PATHSLASH;
    1ea6:	   |  \-> move.l 1108(sp),d0
    1eaa:	   |      movea.l 1116(sp),a0
    1eae:	   |      adda.l d0,a0
    1eb0:	   |      move.b #47,(a0)
	}

	gamePath = AllocVec(400, MEMF_ANY);
    1eb4:	   \----> move.l #400,1066(sp)
    1ebc:	          clr.l 1062(sp)
    1ec0:	          move.l 19c5e <SysBase>,d0
    1ec6:	          movea.l d0,a6
    1ec8:	          move.l 1066(sp),d0
    1ecc:	          move.l 1062(sp),d1
    1ed0:	          jsr -684(a6)
    1ed4:	          move.l d0,1058(sp)
    1ed8:	          move.l 1058(sp),d0
    1edc:	          move.l d0,19b72 <gamePath>
	if (gamePath==0) {
    1ee2:	          move.l 19b72 <gamePath>,d0
    1ee8:	      /-- bne.s 1efc <setGameFilePath+0x14c>
		KPrintF("setGameFilePath: Can't reserve memory for game directory.\n");
    1eea:	      |   pea 13f07 <PutChar+0x3e7>
    1ef0:	      |   jsr 12f14 <KPrintF>
    1ef6:	      |   addq.l #4,sp
    1ef8:	   /--|-- bra.w 1fe4 <setGameFilePath+0x234>
		return;
	}

	BPTR lock = Lock(gamePath, ACCESS_READ);	
    1efc:	   |  \-> move.l 19b72 <gamePath>,1054(sp)
    1f04:	   |      moveq #-2,d0
    1f06:	   |      move.l d0,1050(sp)
    1f0a:	   |      move.l 19c66 <DOSBase>,d0
    1f10:	   |      movea.l d0,a6
    1f12:	   |      move.l 1054(sp),d1
    1f16:	   |      move.l 1050(sp),d2
    1f1a:	   |      jsr -84(a6)
    1f1e:	   |      move.l d0,1046(sp)
    1f22:	   |      move.l 1046(sp),d0
    1f26:	   |      move.l d0,1042(sp)
	if (! CurrentDir(lock)) {
    1f2a:	   |      move.l 1042(sp),1038(sp)
    1f30:	   |      move.l 19c66 <DOSBase>,d0
    1f36:	   |      movea.l d0,a6
    1f38:	   |      move.l 1038(sp),d1
    1f3c:	   |      jsr -126(a6)
    1f40:	   |      move.l d0,1034(sp)
    1f44:	   |      move.l 1034(sp),d0
    1f48:	   |  /-- bne.s 1f58 <setGameFilePath+0x1a8>
		KPrintF("setGameFilePath: Can't get game directory.\n");
    1f4a:	   |  |   pea 13f42 <PutChar+0x422>
    1f50:	   |  |   jsr 12f14 <KPrintF>
    1f56:	   |  |   addq.l #4,sp
	}
	
	lock = Lock(currentDir, ACCESS_READ);	
    1f58:	   |  \-> move.l #1112,d0
    1f5e:	   |      add.l sp,d0
    1f60:	   |      addi.l #-1102,d0
    1f66:	   |      move.l d0,1030(sp)
    1f6a:	   |      moveq #-2,d0
    1f6c:	   |      move.l d0,1026(sp)
    1f70:	   |      move.l 19c66 <DOSBase>,d0
    1f76:	   |      movea.l d0,a6
    1f78:	   |      move.l 1030(sp),d1
    1f7c:	   |      move.l 1026(sp),d2
    1f80:	   |      jsr -84(a6)
    1f84:	   |      move.l d0,1022(sp)
    1f88:	   |      move.l 1022(sp),d0
    1f8c:	   |      move.l d0,1042(sp)
	if (!CurrentDir(lock)) {	
    1f90:	   |      move.l 1042(sp),1018(sp)
    1f96:	   |      move.l 19c66 <DOSBase>,d0
    1f9c:	   |      movea.l d0,a6
    1f9e:	   |      move.l 1018(sp),d1
    1fa2:	   |      jsr -126(a6)
    1fa6:	   |      move.l d0,1014(sp)
    1faa:	   |      move.l 1014(sp),d0
    1fae:	   |  /-- bne.s 1fc4 <setGameFilePath+0x214>
		KPrintF("setGameFilePath: Failed changing to directory %s\n", currentDir);
    1fb0:	   |  |   moveq #10,d0
    1fb2:	   |  |   add.l sp,d0
    1fb4:	   |  |   move.l d0,-(sp)
    1fb6:	   |  |   pea 13f6e <PutChar+0x44e>
    1fbc:	   |  |   jsr 12f14 <KPrintF>
    1fc2:	   |  |   addq.l #8,sp
	}

	//Free Mem
	if (gamePath != 0) FreeVec(gamePath);
    1fc4:	   |  \-> move.l 19b72 <gamePath>,d0
    1fca:	   +----- beq.s 1fe4 <setGameFilePath+0x234>
    1fcc:	   |      move.l 19b72 <gamePath>,1010(sp)
    1fd4:	   |      move.l 19c5e <SysBase>,d0
    1fda:	   |      movea.l d0,a6
    1fdc:	   |      movea.l 1010(sp),a1
    1fe0:	   |      jsr -690(a6)
}
    1fe4:	   \----> move.l (sp)+,d2
    1fe6:	          movea.l (sp)+,a6
    1fe8:	          lea 1104(sp),sp
    1fec:	          rts

00001fee <killZBuffer>:
#include "stringy.h"
#include "support/gcc8_c_support.h"

struct zBufferData zBuffer;

void killZBuffer () {
    1fee:	    subq.l #4,sp
    1ff0:	    move.l a6,-(sp)
	if (zBuffer.tex) {
    1ff2:	    move.l 19bce <zBuffer+0x50>,d0
    1ff8:	/-- beq.s 2030 <killZBuffer+0x42>
		deleteTextures (1, &zBuffer.texName);
    1ffa:	|   pea 19bd2 <zBuffer+0x54>
    2000:	|   pea 1 <_start+0x1>
    2004:	|   jsr 197e <deleteTextures>
    200a:	|   addq.l #8,sp
		zBuffer.texName = 0;
    200c:	|   clr.l 19bd2 <zBuffer+0x54>
        FreeVec(zBuffer.tex);
    2012:	|   move.l 19bce <zBuffer+0x50>,4(sp)
    201a:	|   move.l 19c5e <SysBase>,d0
    2020:	|   movea.l d0,a6
    2022:	|   movea.l 4(sp),a1
    2026:	|   jsr -690(a6)
		zBuffer.tex = NULL;
    202a:	|   clr.l 19bce <zBuffer+0x50>
	}
	zBuffer.numPanels = 0;
    2030:	\-> clr.l 19b86 <zBuffer+0x8>
	zBuffer.originalNum =0;
    2036:	    clr.l 19bca <zBuffer+0x4c>
}
    203c:	    nop
    203e:	    movea.l (sp)+,a6
    2040:	    addq.l #4,sp
    2042:	    rts

00002044 <setZBuffer>:

BOOL setZBuffer (unsigned int y) {
    2044:	                         lea -528(sp),sp
    2048:	                         movem.l d2-d3/a6,-(sp)
	int x, n;
	ULONG stillToGo = 0;
    204c:	                         clr.l 528(sp)
	int yPalette[16], sorted[16], sortback[16];

	killZBuffer ();
    2050:	                         jsr 1fee <killZBuffer>

	zBuffer.originalNum = y;
    2056:	                         move.l 544(sp),d0
    205a:	                         move.l d0,19bca <zBuffer+0x4c>
	if (! openFileFromNum (y)) return FALSE;
    2060:	                         move.l 544(sp),d0
    2064:	                         move.l d0,-(sp)
    2066:	                         jsr 48da <openFileFromNum>
    206c:	                         addq.l #4,sp
    206e:	                         tst.l d0
    2070:	                     /-- bne.s 2078 <setZBuffer+0x34>
    2072:	                     |   clr.w d0
    2074:	/--------------------|-- bra.w 2456 <setZBuffer+0x412>
	if (FGetC (bigDataFile) != 'S' && FGetC (bigDataFile) != 'z' && FGetC (bigDataFile) != 'b') 
    2078:	|                    \-> move.l 19c46 <bigDataFile>,524(sp)
    2080:	|                        move.l 19c66 <DOSBase>,d0
    2086:	|                        movea.l d0,a6
    2088:	|                        move.l 524(sp),d1
    208c:	|                        jsr -306(a6)
    2090:	|                        move.l d0,520(sp)
    2094:	|                        move.l 520(sp),d0
    2098:	|                        moveq #83,d1
    209a:	|                        cmp.l d0,d1
    209c:	|                    /-- beq.s 20fe <setZBuffer+0xba>
    209e:	|                    |   move.l 19c46 <bigDataFile>,516(sp)
    20a6:	|                    |   move.l 19c66 <DOSBase>,d0
    20ac:	|                    |   movea.l d0,a6
    20ae:	|                    |   move.l 516(sp),d1
    20b2:	|                    |   jsr -306(a6)
    20b6:	|                    |   move.l d0,512(sp)
    20ba:	|                    |   move.l 512(sp),d0
    20be:	|                    |   moveq #122,d1
    20c0:	|                    |   cmp.l d0,d1
    20c2:	|                    +-- beq.s 20fe <setZBuffer+0xba>
    20c4:	|                    |   move.l 19c46 <bigDataFile>,508(sp)
    20cc:	|                    |   move.l 19c66 <DOSBase>,d0
    20d2:	|                    |   movea.l d0,a6
    20d4:	|                    |   move.l 508(sp),d1
    20d8:	|                    |   jsr -306(a6)
    20dc:	|                    |   move.l d0,504(sp)
    20e0:	|                    |   move.l 504(sp),d0
    20e4:	|                    |   moveq #98,d1
    20e6:	|                    |   cmp.l d0,d1
    20e8:	|                    +-- beq.s 20fe <setZBuffer+0xba>
	{
		 KPrintF("Not a Z-buffer file");
    20ea:	|                    |   pea 13fa0 <PutChar+0x480>
    20f0:	|                    |   jsr 12f14 <KPrintF>
    20f6:	|                    |   addq.l #4,sp
		 return FALSE;
    20f8:	|                    |   clr.w d0
    20fa:	+--------------------|-- bra.w 2456 <setZBuffer+0x412>
	}

	switch (FGetC (bigDataFile)) {
    20fe:	|                    \-> move.l 19c46 <bigDataFile>,500(sp)
    2106:	|                        move.l 19c66 <DOSBase>,d0
    210c:	|                        movea.l d0,a6
    210e:	|                        move.l 500(sp),d1
    2112:	|                        jsr -306(a6)
    2116:	|                        move.l d0,496(sp)
    211a:	|                        move.l 496(sp),d0
    211e:	|                    /-- beq.s 2128 <setZBuffer+0xe4>
    2120:	|                    |   moveq #1,d1
    2122:	|                    |   cmp.l d0,d1
    2124:	|                 /--|-- beq.s 213e <setZBuffer+0xfa>
    2126:	|              /--|--|-- bra.s 216c <setZBuffer+0x128>
		case 0:
		zBuffer.width = 640;
    2128:	|              |  |  \-> move.l #640,19b7e <zBuffer>
		zBuffer.height = 480;
    2132:	|              |  |      move.l #480,19b82 <zBuffer+0x4>
		break;
    213c:	|              |  |  /-- bra.s 2180 <setZBuffer+0x13c>
		
		case 1:
		zBuffer.width = get2bytes (bigDataFile);
    213e:	|              |  \--|-> move.l 19c46 <bigDataFile>,d0
    2144:	|              |     |   move.l d0,-(sp)
    2146:	|              |     |   jsr 6bc <get2bytes>
    214c:	|              |     |   addq.l #4,sp
    214e:	|              |     |   move.l d0,19b7e <zBuffer>
		zBuffer.height = get2bytes (bigDataFile);
    2154:	|              |     |   move.l 19c46 <bigDataFile>,d0
    215a:	|              |     |   move.l d0,-(sp)
    215c:	|              |     |   jsr 6bc <get2bytes>
    2162:	|              |     |   addq.l #4,sp
    2164:	|              |     |   move.l d0,19b82 <zBuffer+0x4>
		break;
    216a:	|              |     +-- bra.s 2180 <setZBuffer+0x13c>
		
		default:
		KPrintF("Extended Z-buffer format not supported in this version of the SLUDGE engine");
    216c:	|              \-----|-> pea 13fb4 <PutChar+0x494>
    2172:	|                    |   jsr 12f14 <KPrintF>
    2178:	|                    |   addq.l #4,sp
		return FALSE;
    217a:	|                    |   clr.w d0
    217c:	+--------------------|-- bra.w 2456 <setZBuffer+0x412>
	}
	if ((unsigned int) zBuffer.width != sceneWidth || (unsigned int) zBuffer.height != sceneHeight) {
    2180:	|                    \-> move.l 19b7e <zBuffer>,d0
    2186:	|                        move.l d0,d1
    2188:	|                        move.l 19cfa <sceneWidth>,d0
    218e:	|                        cmp.l d1,d0
    2190:	|                    /-- bne.s 21a4 <setZBuffer+0x160>
    2192:	|                    |   move.l 19b82 <zBuffer+0x4>,d0
    2198:	|                    |   move.l d0,d1
    219a:	|                    |   move.l 19cfe <sceneHeight>,d0
    21a0:	|                    |   cmp.l d1,d0
    21a2:	|                 /--|-- beq.s 21f4 <setZBuffer+0x1b0>
		char tmp[256];
		sprintf (tmp, "Z-w: %d Z-h:%d w: %d, h:%d", zBuffer.width, zBuffer.height, sceneWidth, sceneHeight);
    21a4:	|                 |  \-> movea.l 19cfe <sceneHeight>,a1
    21aa:	|                 |      movea.l 19cfa <sceneWidth>,a0
    21b0:	|                 |      move.l 19b82 <zBuffer+0x4>,d1
    21b6:	|                 |      move.l 19b7e <zBuffer>,d0
    21bc:	|                 |      move.l a1,-(sp)
    21be:	|                 |      move.l a0,-(sp)
    21c0:	|                 |      move.l d1,-(sp)
    21c2:	|                 |      move.l d0,-(sp)
    21c4:	|                 |      pea 14000 <PutChar+0x4e0>
    21ca:	|                 |      moveq #32,d0
    21cc:	|                 |      add.l sp,d0
    21ce:	|                 |      move.l d0,-(sp)
    21d0:	|                 |      jsr 106ca <sprintf>
    21d6:	|                 |      lea 24(sp),sp
		KPrintF("Z-buffer width and height don't match scene width and height", tmp);
    21da:	|                 |      moveq #12,d0
    21dc:	|                 |      add.l sp,d0
    21de:	|                 |      move.l d0,-(sp)
    21e0:	|                 |      pea 1401b <PutChar+0x4fb>
    21e6:	|                 |      jsr 12f14 <KPrintF>
    21ec:	|                 |      addq.l #8,sp
		return FALSE;
    21ee:	|                 |      clr.w d0
    21f0:	+-----------------|----- bra.w 2456 <setZBuffer+0x412>
	}
		
	zBuffer.numPanels = FGetC (bigDataFile);
    21f4:	|                 \----> move.l 19c46 <bigDataFile>,492(sp)
    21fc:	|                        move.l 19c66 <DOSBase>,d0
    2202:	|                        movea.l d0,a6
    2204:	|                        move.l 492(sp),d1
    2208:	|                        jsr -306(a6)
    220c:	|                        move.l d0,488(sp)
    2210:	|                        move.l 488(sp),d0
    2214:	|                        move.l d0,19b86 <zBuffer+0x8>
	for (y = 0; y < (unsigned int) zBuffer.numPanels; y ++) {
    221a:	|                        clr.l 544(sp)
    221e:	|                    /-- bra.s 224a <setZBuffer+0x206>
		yPalette[y] = get2bytes (bigDataFile);
    2220:	|                 /--|-> move.l 19c46 <bigDataFile>,d0
    2226:	|                 |  |   move.l d0,-(sp)
    2228:	|                 |  |   jsr 6bc <get2bytes>
    222e:	|                 |  |   addq.l #4,sp
    2230:	|                 |  |   move.l 544(sp),d1
    2234:	|                 |  |   add.l d1,d1
    2236:	|                 |  |   add.l d1,d1
    2238:	|                 |  |   lea 540(sp),a0
    223c:	|                 |  |   add.l a0,d1
    223e:	|                 |  |   movea.l d1,a0
    2240:	|                 |  |   lea -144(a0),a0
    2244:	|                 |  |   move.l d0,(a0)
	for (y = 0; y < (unsigned int) zBuffer.numPanels; y ++) {
    2246:	|                 |  |   addq.l #1,544(sp)
    224a:	|                 |  \-> move.l 19b86 <zBuffer+0x8>,d0
    2250:	|                 |      cmp.l 544(sp),d0
    2254:	|                 \----- bhi.s 2220 <setZBuffer+0x1dc>
	}
	sortZPal (yPalette, sorted, zBuffer.numPanels);
    2256:	|                        move.l 19b86 <zBuffer+0x8>,d0
    225c:	|                        move.l d0,-(sp)
    225e:	|                        move.l sp,d0
    2260:	|                        addi.l #336,d0
    2266:	|                        move.l d0,-(sp)
    2268:	|                        move.l sp,d0
    226a:	|                        addi.l #404,d0
    2270:	|                        move.l d0,-(sp)
    2272:	|                        jsr 2460 <sortZPal>
    2278:	|                        lea 12(sp),sp
	for (y = 0; y < (unsigned int) zBuffer.numPanels; y ++) {
    227c:	|                        clr.l 544(sp)
    2280:	|                    /-- bra.s 22f8 <setZBuffer+0x2b4>
		zBuffer.panel[y] = yPalette[sorted[y]];
    2282:	|                 /--|-> move.l 544(sp),d0
    2286:	|                 |  |   add.l d0,d0
    2288:	|                 |  |   add.l d0,d0
    228a:	|                 |  |   move.l #540,d1
    2290:	|                 |  |   add.l sp,d1
    2292:	|                 |  |   add.l d1,d0
    2294:	|                 |  |   movea.l d0,a0
    2296:	|                 |  |   lea -208(a0),a0
    229a:	|                 |  |   move.l (a0),d0
    229c:	|                 |  |   add.l d0,d0
    229e:	|                 |  |   add.l d0,d0
    22a0:	|                 |  |   lea 540(sp),a0
    22a4:	|                 |  |   add.l a0,d0
    22a6:	|                 |  |   movea.l d0,a0
    22a8:	|                 |  |   lea -144(a0),a0
    22ac:	|                 |  |   move.l (a0),d0
    22ae:	|                 |  |   move.l 544(sp),d1
    22b2:	|                 |  |   addq.l #3,d1
    22b4:	|                 |  |   add.l d1,d1
    22b6:	|                 |  |   movea.l d1,a1
    22b8:	|                 |  |   adda.l d1,a1
    22ba:	|                 |  |   lea 19b7e <zBuffer>,a0
    22c0:	|                 |  |   move.l d0,(0,a1,a0.l)
		sortback[sorted[y]] = y; 
    22c4:	|                 |  |   move.l 544(sp),d0
    22c8:	|                 |  |   add.l d0,d0
    22ca:	|                 |  |   add.l d0,d0
    22cc:	|                 |  |   move.l #540,d1
    22d2:	|                 |  |   add.l sp,d1
    22d4:	|                 |  |   add.l d1,d0
    22d6:	|                 |  |   movea.l d0,a0
    22d8:	|                 |  |   lea -208(a0),a0
    22dc:	|                 |  |   move.l (a0),d1
    22de:	|                 |  |   move.l 544(sp),d0
    22e2:	|                 |  |   add.l d1,d1
    22e4:	|                 |  |   add.l d1,d1
    22e6:	|                 |  |   lea 540(sp),a0
    22ea:	|                 |  |   add.l a0,d1
    22ec:	|                 |  |   movea.l d1,a0
    22ee:	|                 |  |   lea -272(a0),a0
    22f2:	|                 |  |   move.l d0,(a0)
	for (y = 0; y < (unsigned int) zBuffer.numPanels; y ++) {
    22f4:	|                 |  |   addq.l #1,544(sp)
    22f8:	|                 |  \-> move.l 19b86 <zBuffer+0x8>,d0
    22fe:	|                 |      cmp.l 544(sp),d0
    2302:	|                 \----- bhi.w 2282 <setZBuffer+0x23e>
	}
	
	int picWidth = sceneWidth;
    2306:	|                        move.l 19cfa <sceneWidth>,d0
    230c:	|                        move.l d0,484(sp)
	int picHeight = sceneHeight;
    2310:	|                        move.l 19cfe <sceneHeight>,d0
    2316:	|                        move.l d0,480(sp)

	zBuffer.tex = AllocVec(picHeight*picWidth,MEMF_ANY);
    231a:	|                        move.l 484(sp),-(sp)
    231e:	|                        move.l 484(sp),-(sp)
    2322:	|                        jsr 13a0a <__mulsi3>
    2328:	|                        addq.l #8,sp
    232a:	|                        move.l d0,476(sp)
    232e:	|                        clr.l 472(sp)
    2332:	|                        move.l 19c5e <SysBase>,d0
    2338:	|                        movea.l d0,a6
    233a:	|                        move.l 476(sp),d0
    233e:	|                        move.l 472(sp),d1
    2342:	|                        jsr -684(a6)
    2346:	|                        move.l d0,468(sp)
    234a:	|                        move.l 468(sp),d0
    234e:	|                        move.l d0,19bce <zBuffer+0x50>
	if (!zBuffer.tex) {
    2354:	|                        move.l 19bce <zBuffer+0x50>,d0
    235a:	|                    /-- bne.s 2370 <setZBuffer+0x32c>
		KPrintF("setZBuffer: Cannot allocate memory");
    235c:	|                    |   pea 14058 <PutChar+0x538>
    2362:	|                    |   jsr 12f14 <KPrintF>
    2368:	|                    |   addq.l #4,sp
		return FALSE;
    236a:	|                    |   clr.w d0
    236c:	+--------------------|-- bra.w 2456 <setZBuffer+0x412>
	}

	for (y = 0; y < sceneHeight; y ++) {
    2370:	|                    \-> clr.l 544(sp)
    2374:	|     /----------------- bra.w 2440 <setZBuffer+0x3fc>
		for (x = 0; (unsigned int) x < sceneWidth; x ++) {
    2378:	|  /--|----------------> clr.l 536(sp)
    237c:	|  |  |     /----------- bra.w 242c <setZBuffer+0x3e8>
			if (stillToGo == 0) {
    2380:	|  |  |  /--|----------> tst.l 528(sp)
    2384:	|  |  |  |  |  /-------- bne.s 23e2 <setZBuffer+0x39e>
				n = FGetC (bigDataFile);
    2386:	|  |  |  |  |  |         move.l 19c46 <bigDataFile>,464(sp)
    238e:	|  |  |  |  |  |         move.l 19c66 <DOSBase>,d0
    2394:	|  |  |  |  |  |         movea.l d0,a6
    2396:	|  |  |  |  |  |         move.l 464(sp),d1
    239a:	|  |  |  |  |  |         jsr -306(a6)
    239e:	|  |  |  |  |  |         move.l d0,460(sp)
    23a2:	|  |  |  |  |  |         move.l 460(sp),d0
    23a6:	|  |  |  |  |  |         move.l d0,532(sp)
				stillToGo = n >> 4;
    23aa:	|  |  |  |  |  |         move.l 532(sp),d0
    23ae:	|  |  |  |  |  |         asr.l #4,d0
    23b0:	|  |  |  |  |  |         move.l d0,528(sp)
				if (stillToGo == 15) stillToGo = get2bytes (bigDataFile) + 16l;
    23b4:	|  |  |  |  |  |         moveq #15,d0
    23b6:	|  |  |  |  |  |         cmp.l 528(sp),d0
    23ba:	|  |  |  |  |  |  /----- bne.s 23d8 <setZBuffer+0x394>
    23bc:	|  |  |  |  |  |  |      move.l 19c46 <bigDataFile>,d0
    23c2:	|  |  |  |  |  |  |      move.l d0,-(sp)
    23c4:	|  |  |  |  |  |  |      jsr 6bc <get2bytes>
    23ca:	|  |  |  |  |  |  |      addq.l #4,sp
    23cc:	|  |  |  |  |  |  |      movea.l d0,a0
    23ce:	|  |  |  |  |  |  |      lea 16(a0),a0
    23d2:	|  |  |  |  |  |  |      move.l a0,528(sp)
    23d6:	|  |  |  |  |  |  |  /-- bra.s 23dc <setZBuffer+0x398>
				else stillToGo ++;
    23d8:	|  |  |  |  |  |  \--|-> addq.l #1,528(sp)
				n &= 15;
    23dc:	|  |  |  |  |  |     \-> moveq #15,d1
    23de:	|  |  |  |  |  |         and.l d1,532(sp)
			}
			zBuffer.tex[y*picWidth + x] = sortback[n]*16;
    23e2:	|  |  |  |  |  \-------> move.l 532(sp),d0
    23e6:	|  |  |  |  |            add.l d0,d0
    23e8:	|  |  |  |  |            add.l d0,d0
    23ea:	|  |  |  |  |            lea 540(sp),a0
    23ee:	|  |  |  |  |            add.l a0,d0
    23f0:	|  |  |  |  |            movea.l d0,a0
    23f2:	|  |  |  |  |            lea -272(a0),a0
    23f6:	|  |  |  |  |            move.l (a0),d0
    23f8:	|  |  |  |  |            move.l d0,d2
    23fa:	|  |  |  |  |            move.l 19bce <zBuffer+0x50>,d3
    2400:	|  |  |  |  |            move.l 484(sp),d0
    2404:	|  |  |  |  |            move.l 544(sp),-(sp)
    2408:	|  |  |  |  |            move.l d0,-(sp)
    240a:	|  |  |  |  |            jsr 13a0a <__mulsi3>
    2410:	|  |  |  |  |            addq.l #8,sp
    2412:	|  |  |  |  |            move.l d0,d1
    2414:	|  |  |  |  |            move.l 536(sp),d0
    2418:	|  |  |  |  |            add.l d1,d0
    241a:	|  |  |  |  |            movea.l d3,a0
    241c:	|  |  |  |  |            adda.l d0,a0
    241e:	|  |  |  |  |            move.b d2,d0
    2420:	|  |  |  |  |            lsl.b #4,d0
    2422:	|  |  |  |  |            move.b d0,(a0)
			stillToGo --;
    2424:	|  |  |  |  |            subq.l #1,528(sp)
		for (x = 0; (unsigned int) x < sceneWidth; x ++) {
    2428:	|  |  |  |  |            addq.l #1,536(sp)
    242c:	|  |  |  |  \----------> move.l 536(sp),d1
    2430:	|  |  |  |               move.l 19cfa <sceneWidth>,d0
    2436:	|  |  |  |               cmp.l d1,d0
    2438:	|  |  |  \-------------- bhi.w 2380 <setZBuffer+0x33c>
	for (y = 0; y < sceneHeight; y ++) {
    243c:	|  |  |                  addq.l #1,544(sp)
    2440:	|  |  \----------------> move.l 19cfe <sceneHeight>,d0
    2446:	|  |                     cmp.l 544(sp),d0
    244a:	|  \-------------------- bhi.w 2378 <setZBuffer+0x334>
		}
	}

	finishAccess ();
    244e:	|                        jsr 47d2 <finishAccess>
	
	return TRUE;
    2454:	|                        moveq #1,d0
}
    2456:	\----------------------> movem.l (sp)+,d2-d3/a6
    245a:	                         lea 528(sp),sp
    245e:	                         rts

00002460 <sortZPal>:

void sortZPal (int *oldpal, int *newpal, int size) {
    2460:	             subq.l #8,sp
	int i, tmp;

	for (i = 0; i < size; i ++) {
    2462:	             clr.l 4(sp)
    2466:	         /-- bra.s 247e <sortZPal+0x1e>
		newpal[i] = i;
    2468:	      /--|-> move.l 4(sp),d0
    246c:	      |  |   add.l d0,d0
    246e:	      |  |   add.l d0,d0
    2470:	      |  |   movea.l 16(sp),a0
    2474:	      |  |   adda.l d0,a0
    2476:	      |  |   move.l 4(sp),(a0)
	for (i = 0; i < size; i ++) {
    247a:	      |  |   addq.l #1,4(sp)
    247e:	      |  \-> move.l 4(sp),d0
    2482:	      |      cmp.l 20(sp),d0
    2486:	      \----- blt.s 2468 <sortZPal+0x8>
	}

	if (size < 2) return;		
    2488:	             moveq #1,d0
    248a:	             cmp.l 20(sp),d0
    248e:	/----------- bge.w 2540 <sortZPal+0xe0>
		
	for (i = 1; i < size; i ++) {
    2492:	|            moveq #1,d0
    2494:	|            move.l d0,4(sp)
    2498:	|     /----- bra.w 2532 <sortZPal+0xd2>
		if (oldpal[newpal[i]] < oldpal[newpal[i-1]]) {
    249c:	|  /--|----> move.l 4(sp),d0
    24a0:	|  |  |      add.l d0,d0
    24a2:	|  |  |      add.l d0,d0
    24a4:	|  |  |      movea.l 16(sp),a0
    24a8:	|  |  |      adda.l d0,a0
    24aa:	|  |  |      move.l (a0),d0
    24ac:	|  |  |      add.l d0,d0
    24ae:	|  |  |      add.l d0,d0
    24b0:	|  |  |      movea.l 12(sp),a0
    24b4:	|  |  |      adda.l d0,a0
    24b6:	|  |  |      move.l (a0),d1
    24b8:	|  |  |      move.l 4(sp),d0
    24bc:	|  |  |      addi.l #1073741823,d0
    24c2:	|  |  |      add.l d0,d0
    24c4:	|  |  |      add.l d0,d0
    24c6:	|  |  |      movea.l 16(sp),a0
    24ca:	|  |  |      adda.l d0,a0
    24cc:	|  |  |      move.l (a0),d0
    24ce:	|  |  |      add.l d0,d0
    24d0:	|  |  |      add.l d0,d0
    24d2:	|  |  |      movea.l 12(sp),a0
    24d6:	|  |  |      adda.l d0,a0
    24d8:	|  |  |      move.l (a0),d0
    24da:	|  |  |      cmp.l d1,d0
    24dc:	|  |  |  /-- ble.s 252e <sortZPal+0xce>
			tmp = newpal[i];
    24de:	|  |  |  |   move.l 4(sp),d0
    24e2:	|  |  |  |   add.l d0,d0
    24e4:	|  |  |  |   add.l d0,d0
    24e6:	|  |  |  |   movea.l 16(sp),a0
    24ea:	|  |  |  |   adda.l d0,a0
    24ec:	|  |  |  |   move.l (a0),(sp)
			newpal[i] = newpal[i-1];
    24ee:	|  |  |  |   move.l 4(sp),d0
    24f2:	|  |  |  |   addi.l #1073741823,d0
    24f8:	|  |  |  |   add.l d0,d0
    24fa:	|  |  |  |   add.l d0,d0
    24fc:	|  |  |  |   movea.l 16(sp),a1
    2500:	|  |  |  |   adda.l d0,a1
    2502:	|  |  |  |   move.l 4(sp),d0
    2506:	|  |  |  |   add.l d0,d0
    2508:	|  |  |  |   add.l d0,d0
    250a:	|  |  |  |   movea.l 16(sp),a0
    250e:	|  |  |  |   adda.l d0,a0
    2510:	|  |  |  |   move.l (a1),d0
    2512:	|  |  |  |   move.l d0,(a0)
			newpal[i-1] = tmp;
    2514:	|  |  |  |   move.l 4(sp),d0
    2518:	|  |  |  |   addi.l #1073741823,d0
    251e:	|  |  |  |   add.l d0,d0
    2520:	|  |  |  |   add.l d0,d0
    2522:	|  |  |  |   movea.l 16(sp),a0
    2526:	|  |  |  |   adda.l d0,a0
    2528:	|  |  |  |   move.l (sp),(a0)
			i = 0;
    252a:	|  |  |  |   clr.l 4(sp)
	for (i = 1; i < size; i ++) {
    252e:	|  |  |  \-> addq.l #1,4(sp)
    2532:	|  |  \----> move.l 4(sp),d0
    2536:	|  |         cmp.l 20(sp),d0
    253a:	|  \-------- blt.w 249c <sortZPal+0x3c>
    253e:	|        /-- bra.s 2542 <sortZPal+0xe2>
	if (size < 2) return;		
    2540:	\--------|-> nop
		}
	}
    2542:	         \-> addq.l #8,sp
    2544:	             rts

00002546 <abortFunction>:
int numResourceNames = 0;
int numUserFunc = 0;
int specialSettings;


void abortFunction (struct loadedFunction * fun) {
    2546:	/-------> lea -16(sp),sp
    254a:	|         move.l a6,-(sp)
	int a;

	pauseFunction (fun);
    254c:	|         move.l 24(sp),-(sp)
    2550:	|         jsr 43f8 <pauseFunction>
    2556:	|         addq.l #4,sp
	while (fun -> stack) trimStack (&fun -> stack);
    2558:	|     /-- bra.s 256a <abortFunction+0x24>
    255a:	|  /--|-> moveq #24,d0
    255c:	|  |  |   add.l 24(sp),d0
    2560:	|  |  |   move.l d0,-(sp)
    2562:	|  |  |   jsr 11844 <trimStack>
    2568:	|  |  |   addq.l #4,sp
    256a:	|  |  \-> movea.l 24(sp),a0
    256e:	|  |      move.l 24(a0),d0
    2572:	|  \----- bne.s 255a <abortFunction+0x14>
	FreeVec( fun -> compiledLines);
    2574:	|         movea.l 24(sp),a0
    2578:	|         move.l 4(a0),12(sp)
    257e:	|         move.l 19c5e <SysBase>,d0
    2584:	|         movea.l d0,a6
    2586:	|         movea.l 12(sp),a1
    258a:	|         jsr -690(a6)
	for (a = 0; a < fun -> numLocals; a ++) unlinkVar (&(fun -> localVars[a]));
    258e:	|         clr.l 16(sp)
    2592:	|     /-- bra.s 25b2 <abortFunction+0x6c>
    2594:	|  /--|-> movea.l 24(sp),a0
    2598:	|  |  |   move.l 20(a0),d1
    259c:	|  |  |   move.l 16(sp),d0
    25a0:	|  |  |   lsl.l #3,d0
    25a2:	|  |  |   add.l d1,d0
    25a4:	|  |  |   move.l d0,-(sp)
    25a6:	|  |  |   jsr 1110e <unlinkVar>
    25ac:	|  |  |   addq.l #4,sp
    25ae:	|  |  |   addq.l #1,16(sp)
    25b2:	|  |  \-> movea.l 24(sp),a0
    25b6:	|  |      move.l 8(a0),d0
    25ba:	|  |      cmp.l 16(sp),d0
    25be:	|  \----- bgt.s 2594 <abortFunction+0x4e>
	FreeVec(fun -> localVars);
    25c0:	|         movea.l 24(sp),a0
    25c4:	|         move.l 20(a0),8(sp)
    25ca:	|         move.l 19c5e <SysBase>,d0
    25d0:	|         movea.l d0,a6
    25d2:	|         movea.l 8(sp),a1
    25d6:	|         jsr -690(a6)
	unlinkVar (&fun -> reg);
    25da:	|         moveq #28,d0
    25dc:	|         add.l 24(sp),d0
    25e0:	|         move.l d0,-(sp)
    25e2:	|         jsr 1110e <unlinkVar>
    25e8:	|         addq.l #4,sp
	if (fun -> calledBy) abortFunction (fun -> calledBy);
    25ea:	|         movea.l 24(sp),a0
    25ee:	|         move.l 40(a0),d0
    25f2:	|     /-- beq.s 2604 <abortFunction+0xbe>
    25f4:	|     |   movea.l 24(sp),a0
    25f8:	|     |   move.l 40(a0),d0
    25fc:	|     |   move.l d0,-(sp)
    25fe:	\-----|-- jsr 2546 <abortFunction>(pc)
    2602:	      |   addq.l #4,sp
	FreeVec(fun);
    2604:	      \-> move.l 24(sp),4(sp)
    260a:	          move.l 19c5e <SysBase>,d0
    2610:	          movea.l d0,a6
    2612:	          movea.l 4(sp),a1
    2616:	          jsr -690(a6)
	fun = NULL;
    261a:	          clr.l 24(sp)
}
    261e:	          nop
    2620:	          movea.l (sp)+,a6
    2622:	          lea 16(sp),sp
    2626:	          rts

00002628 <cancelAFunction>:

int cancelAFunction (int funcNum, struct loadedFunction * myself, BOOL * killedMyself) {
    2628:	          subq.l #8,sp
	int n = 0;
    262a:	          clr.l 4(sp)
	*killedMyself = FALSE;
    262e:	          movea.l 20(sp),a0
    2632:	          clr.w (a0)

	struct loadedFunction * fun = allRunningFunctions;
    2634:	          move.l 19bfa <allRunningFunctions>,(sp)
	while (fun) {
    263a:	   /----- bra.s 2668 <cancelAFunction+0x40>
		if (fun -> originalNumber == funcNum) {
    263c:	/--|----> movea.l (sp),a0
    263e:	|  |      move.l (a0),d0
    2640:	|  |      cmp.l 12(sp),d0
    2644:	|  |  /-- bne.s 2662 <cancelAFunction+0x3a>
			fun -> cancelMe = TRUE;
    2646:	|  |  |   movea.l (sp),a0
    2648:	|  |  |   move.w #1,54(a0)
			n++;
    264e:	|  |  |   addq.l #1,4(sp)
			if (fun == myself) *killedMyself = TRUE;
    2652:	|  |  |   move.l (sp),d0
    2654:	|  |  |   cmp.l 16(sp),d0
    2658:	|  |  +-- bne.s 2662 <cancelAFunction+0x3a>
    265a:	|  |  |   movea.l 20(sp),a0
    265e:	|  |  |   move.w #1,(a0)
		}
		fun = fun -> next;
    2662:	|  |  \-> movea.l (sp),a0
    2664:	|  |      move.l 44(a0),(sp)
	while (fun) {
    2668:	|  \----> tst.l (sp)
    266a:	\-------- bne.s 263c <cancelAFunction+0x14>
	}
	return n;
    266c:	          move.l 4(sp),d0
}
    2670:	          addq.l #8,sp
    2672:	          rts

00002674 <completeTimers>:


void completeTimers () {
    2674:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    2676:	          move.l 19bfa <allRunningFunctions>,(sp)

	while (thisFunction) {
    267c:	   /----- bra.s 2692 <completeTimers+0x1e>
		if (thisFunction->freezerLevel == 0) thisFunction->timeLeft = 0;
    267e:	/--|----> movea.l (sp),a0
    2680:	|  |      move.b 56(a0),d0
    2684:	|  |  /-- bne.s 268c <completeTimers+0x18>
    2686:	|  |  |   movea.l (sp),a0
    2688:	|  |  |   clr.l 12(a0)
		thisFunction = thisFunction->next;
    268c:	|  |  \-> movea.l (sp),a0
    268e:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    2692:	|  \----> tst.l (sp)
    2694:	\-------- bne.s 267e <completeTimers+0xa>
	}
}
    2696:	          nop
    2698:	          nop
    269a:	          addq.l #4,sp
    269c:	          rts

0000269e <continueFunction>:

BOOL continueFunction (struct loadedFunction * fun) {
    269e:	                                                             lea -76(sp),sp
	BOOL keepLooping = TRUE;
    26a2:	                                                             move.w #1,74(sp)
	BOOL advanceNow;
	unsigned int param;
	enum sludgeCommand com;

	if (fun -> cancelMe) {
    26a8:	                                                             movea.l 80(sp),a0
    26ac:	                                                             move.w 54(a0),d0
    26b0:	/----------------------------------------------------------- beq.w 3550 <continueFunction+0xeb2>
		abortFunction (fun);
    26b4:	|                                                            move.l 80(sp),-(sp)
    26b8:	|                                                            jsr 2546 <abortFunction>
    26be:	|                                                            addq.l #4,sp
		return TRUE;
    26c0:	|                                                            moveq #1,d0
    26c2:	|  /-------------------------------------------------------- bra.w 355a <continueFunction+0xebc>
	}

	while (keepLooping) {
		advanceNow = TRUE;
    26c6:	|  |  /----------------------------------------------------> move.w #1,72(sp)
		param = fun -> compiledLines[fun -> runThisLine].param;
    26cc:	|  |  |                                                      movea.l 80(sp),a0
    26d0:	|  |  |                                                      move.l 4(a0),d1
    26d4:	|  |  |                                                      movea.l 80(sp),a0
    26d8:	|  |  |                                                      move.l 36(a0),d0
    26dc:	|  |  |                                                      lsl.l #3,d0
    26de:	|  |  |                                                      movea.l d1,a0
    26e0:	|  |  |                                                      adda.l d0,a0
    26e2:	|  |  |                                                      move.l 4(a0),68(sp)
		com = fun -> compiledLines[fun -> runThisLine].theCommand;
    26e8:	|  |  |                                                      movea.l 80(sp),a0
    26ec:	|  |  |                                                      move.l 4(a0),d1
    26f0:	|  |  |                                                      movea.l 80(sp),a0
    26f4:	|  |  |                                                      move.l 36(a0),d0
    26f8:	|  |  |                                                      lsl.l #3,d0
    26fa:	|  |  |                                                      movea.l d1,a0
    26fc:	|  |  |                                                      adda.l d0,a0
    26fe:	|  |  |                                                      move.l (a0),64(sp)
		KPrintF("Processing Type %ld",com);
    2702:	|  |  |                                                      move.l 64(sp),-(sp)
    2706:	|  |  |                                                      pea 14151 <PutChar+0x631>
    270c:	|  |  |                                                      jsr 12f14 <KPrintF>
    2712:	|  |  |                                                      addq.l #8,sp

//		fprintf (stderr, "com: %d param: %d (%s)\n", com, param,
//				(com < numSludgeCommands) ? sludgeText[com] : ERROR_UNKNOWN_MCODE); fflush(stderr);


		switch (com) {
    2714:	|  |  |                                                      moveq #41,d0
    2716:	|  |  |                                                      cmp.l 64(sp),d0
    271a:	|  |  |  /-------------------------------------------------- bcs.w 3504 <continueFunction+0xe66>
    271e:	|  |  |  |                                                   move.l 64(sp),d0
    2722:	|  |  |  |                                                   add.l d0,d0
    2724:	|  |  |  |                                                   movea.l d0,a0
    2726:	|  |  |  |                                                   adda.l #10034,a0
    272c:	|  |  |  |                                                   move.w (a0),d0
    272e:	|  |  |  |                                                   jmp (2732 <continueFunction+0x94>,pc,d0.w)
    2732:	|  |  |  |                                                   bset d6,(a2)
    2734:	|  |  |  |                                                   ori.w #2670,(a4)
    2738:	|  |  |  |                                                   eori.w #2416,d6
    273c:	|  |  |  |                                                   bchg d4,d2
    273e:	|  |  |  |                                                   bclr d4,(a4)+
    2740:	|  |  |  |                                                   andi.l #181013194,d4
    2746:	|  |  |  |                                                   .short 0x0aca
    2748:	|  |  |  |                                                   .short 0x0aca
    274a:	|  |  |  |                                                   andi.l #51251914,(-54,a2,d0.l:2)
    2752:	|  |  |  |                                                   .short 0x0aca
    2754:	|  |  |  |                                                   andi.w #906,-(a4)
    2758:	|  |  |  |                                                   bchg d1,196(a2)
    275c:	|  |  |  |                                                   bset d1,580(a4)
    2760:	|  |  |  |                                                   bclr d1,2576(a2)
    2764:	|  |  |  |                                                   andi.b #-56,2762(a2)
    276a:	|  |  |  |                                                   .short 0x0aca
    276c:	|  |  |  |                                                   eori.l #63572682,d0
    2772:	|  |  |  |                                                   .short 0x0aca
    2774:	|  |  |  |                                                   bchg d3,-(a2)
    2776:	|  |  |  |                                                   bchg #-36,(a2)
    277a:	|  |  |  |                                                   .short 0x08cc
    277c:	|  |  |  |                                                   addi.b #14,1038(a0)
    2782:	|  |  |  |                                                   .short 0x040e
    2784:	|  |  |  |                                                   bset d4,8303(a4)
			case SLU_RETURN:
			if (fun -> calledBy) {
    2788:	|  |  |  |                                                   ori.w #8232,(a0)
    278c:	|  |  |  |                                                   ori.b #78,8303(a0)
				struct loadedFunction * returnTo = fun -> calledBy;
    2792:	|  |  |  |                                                   ori.w #12136,(a0)
    2796:	|  |  |  |                                                   ori.b #44,8303(a0)
				if (fun -> returnSomething) copyVariable (&fun -> reg, &returnTo -> reg);
    279c:	|  |  |  |                                                   ori.w #12328,(a0)
    27a0:	|  |  |  |                                                   ori.b #24,(28,a0,d7.w:2)
    27a6:	|  |  |  |                                                   add.l 44(sp),d1
    27aa:	|  |  |  |                                                   moveq #28,d0
    27ac:	|  |  |  |                                                   add.l 80(sp),d0
    27b0:	|  |  |  |                                                   move.l d1,-(sp)
    27b2:	|  |  |  |                                                   move.l d0,-(sp)
    27b4:	|  |  |  |                                                   jsr 1137a <copyVariable>
    27ba:	|  |  |  |                                                   addq.l #8,sp
				finishFunction (fun);
    27bc:	|  |  |  |                                                   move.l 80(sp),-(sp)
    27c0:	|  |  |  |                                                   jsr 3560 <finishFunction>
    27c6:	|  |  |  |                                                   addq.l #4,sp
				fun = returnTo;
    27c8:	|  |  |  |                                                   move.l 44(sp),80(sp)
				restartFunction (fun);
    27ce:	|  |  |  |                                                   move.l 80(sp),-(sp)
    27d2:	|  |  |  |                                                   jsr 443a <restartFunction>
    27d8:	|  |  |  |                                                   addq.l #4,sp
			} else {
				finishFunction (fun);
				advanceNow = FALSE;		// So we don't do anything else with "fun"
				keepLooping = FALSE;	// So we drop out of the loop
			}
			break;
    27da:	|  |  |  |  /----------------------------------------------- bra.w 3538 <continueFunction+0xe9a>
				finishFunction (fun);
    27de:	|  |  |  |  |                                                move.l 80(sp),-(sp)
    27e2:	|  |  |  |  |                                                jsr 3560 <finishFunction>
    27e8:	|  |  |  |  |                                                addq.l #4,sp
				advanceNow = FALSE;		// So we don't do anything else with "fun"
    27ea:	|  |  |  |  |                                                clr.w 72(sp)
				keepLooping = FALSE;	// So we drop out of the loop
    27ee:	|  |  |  |  |                                                clr.w 74(sp)
			break;
    27f2:	|  |  |  |  +----------------------------------------------- bra.w 3538 <continueFunction+0xe9a>

			case SLU_CALLIT:
			switch (fun -> reg.varType) {
    27f6:	|  |  |  |  |                                                movea.l 80(sp),a0
    27fa:	|  |  |  |  |                                                move.l 28(a0),d0
    27fe:	|  |  |  |  |                                                moveq #2,d1
    2800:	|  |  |  |  |                                                cmp.l d0,d1
    2802:	|  |  |  |  |                                            /-- beq.s 280e <continueFunction+0x170>
    2804:	|  |  |  |  |                                            |   moveq #4,d1
    2806:	|  |  |  |  |                                            |   cmp.l d0,d1
    2808:	|  |  |  |  |                                         /--|-- beq.s 285c <continueFunction+0x1be>
    280a:	|  |  |  |  |                                /--------|--|-- bra.w 2944 <continueFunction+0x2a6>
				case SVT_FUNC:
				pauseFunction (fun);		
    280e:	|  |  |  |  |                                |        |  \-> move.l 80(sp),-(sp)
    2812:	|  |  |  |  |                                |        |      jsr 43f8 <pauseFunction>
    2818:	|  |  |  |  |                                |        |      addq.l #4,sp
				if (! startNewFunctionNum (fun -> reg.varData.intValue, param, fun, &fun -> stack,TRUE)) return FALSE;
    281a:	|  |  |  |  |                                |        |      moveq #24,d0
    281c:	|  |  |  |  |                                |        |      add.l 80(sp),d0
    2820:	|  |  |  |  |                                |        |      movea.l 80(sp),a0
    2824:	|  |  |  |  |                                |        |      move.l 32(a0),d1
    2828:	|  |  |  |  |                                |        |      pea 1 <_start+0x1>
    282c:	|  |  |  |  |                                |        |      move.l d0,-(sp)
    282e:	|  |  |  |  |                                |        |      move.l 88(sp),-(sp)
    2832:	|  |  |  |  |                                |        |      move.l 80(sp),-(sp)
    2836:	|  |  |  |  |                                |        |      move.l d1,-(sp)
    2838:	|  |  |  |  |                                |        |      jsr 4664 <startNewFunctionNum>
    283e:	|  |  |  |  |                                |        |      lea 20(sp),sp
    2842:	|  |  |  |  |                                |        |      tst.l d0
    2844:	|  |  |  |  |                                |        |  /-- bne.s 284c <continueFunction+0x1ae>
    2846:	|  |  |  |  |                                |        |  |   clr.w d0
    2848:	|  +--|--|--|--------------------------------|--------|--|-- bra.w 355a <continueFunction+0xebc>
				fun = allRunningFunctions;
    284c:	|  |  |  |  |                                |        |  \-> move.l 19bfa <allRunningFunctions>,80(sp)
				advanceNow = FALSE;		// So we don't do anything else with "fun"
    2854:	|  |  |  |  |                                |        |      clr.w 72(sp)
				break;
    2858:	|  |  |  |  |                                |  /-----|----- bra.w 2958 <continueFunction+0x2ba>

				case SVT_BUILT:
					{
					//KPrintF("Loading function %ld",fun -> reg.varData.intValue);
					enum builtReturn br = callBuiltIn (fun -> reg.varData.intValue, param, fun);
    285c:	|  |  |  |  |                                |  |     \----> move.l 68(sp),d1
    2860:	|  |  |  |  |                                |  |            movea.l 80(sp),a0
    2864:	|  |  |  |  |                                |  |            move.l 32(a0),d0
    2868:	|  |  |  |  |                                |  |            move.l 80(sp),-(sp)
    286c:	|  |  |  |  |                                |  |            move.l d1,-(sp)
    286e:	|  |  |  |  |                                |  |            move.l d0,-(sp)
    2870:	|  |  |  |  |                                |  |            jsr fbbe <callBuiltIn>
    2876:	|  |  |  |  |                                |  |            lea 12(sp),sp
    287a:	|  |  |  |  |                                |  |            move.l d0,52(sp)
    287e:	|  |  |  |  |                                |  |            moveq #5,d0
    2880:	|  |  |  |  |                                |  |            cmp.l 52(sp),d0
    2884:	|  |  |  |  |                                |  |  /-------- bcs.w 2940 <continueFunction+0x2a2>
    2888:	|  |  |  |  |                                |  |  |         move.l 52(sp),d0
    288c:	|  |  |  |  |                                |  |  |         add.l d0,d0
    288e:	|  |  |  |  |                                |  |  |         movea.l d0,a0
    2890:	|  |  |  |  |                                |  |  |         adda.l #10396,a0
    2896:	|  |  |  |  |                                |  |  |         move.w (a0),d0
    2898:	|  |  |  |  |                                |  |  |         jmp (289c <continueFunction+0x1fe>,pc,d0.w)
    289c:	|  |  |  |  |                                |  |  |         ori.b #12,164(a4)
    28a2:	|  |  |  |  |                                |  |  |         ori.b #60,-(a0)
    28a6:	|  |  |  |  |                                |  |  |         ori.b #121,(1,a2,d0.w)

					switch (br) {
						case BR_ERROR:
							KPrintF("Unknown error. This shouldn't happen. Please notify the SLUDGE developers.");
    28ac:	|  |  |  |  |                                |  |  |         .short 0x4165
    28ae:	|  |  |  |  |                                |  |  |         jsr 12f14 <KPrintF>
    28b4:	|  |  |  |  |                                |  |  |         addq.l #4,sp
							return FALSE;
    28b6:	|  |  |  |  |                                |  |  |         clr.w d0
    28b8:	|  +--|--|--|--------------------------------|--|--|-------- bra.w 355a <continueFunction+0xebc>

						case BR_PAUSE:
						pauseFunction (fun);
    28bc:	|  |  |  |  |                                |  |  |         move.l 80(sp),-(sp)
    28c0:	|  |  |  |  |                                |  |  |         jsr 43f8 <pauseFunction>
    28c6:	|  |  |  |  |                                |  |  |         addq.l #4,sp
						[[fallthrough]];
						// No break!

						case BR_KEEP_AND_PAUSE:
						keepLooping = FALSE;
    28c8:	|  |  |  |  |                                |  |  |         clr.w 74(sp)
						break;
    28cc:	|  |  |  |  |                                |  |  |  /----- bra.s 2942 <continueFunction+0x2a4>

						case BR_ALREADY_GONE:
						keepLooping = FALSE;
    28ce:	|  |  |  |  |                                |  |  |  |      clr.w 74(sp)
						advanceNow = FALSE;
    28d2:	|  |  |  |  |                                |  |  |  |      clr.w 72(sp)
						break;
    28d6:	|  |  |  |  |                                |  |  |  +----- bra.s 2942 <continueFunction+0x2a4>

						case BR_CALLAFUNC:
						{
							int i = fun -> reg.varData.intValue;
    28d8:	|  |  |  |  |                                |  |  |  |      movea.l 80(sp),a0
    28dc:	|  |  |  |  |                                |  |  |  |      move.l 32(a0),48(sp)
							setVariable (&fun -> reg, SVT_INT, 1);
    28e2:	|  |  |  |  |                                |  |  |  |      moveq #28,d0
    28e4:	|  |  |  |  |                                |  |  |  |      add.l 80(sp),d0
    28e8:	|  |  |  |  |                                |  |  |  |      pea 1 <_start+0x1>
    28ec:	|  |  |  |  |                                |  |  |  |      pea 1 <_start+0x1>
    28f0:	|  |  |  |  |                                |  |  |  |      move.l d0,-(sp)
    28f2:	|  |  |  |  |                                |  |  |  |      jsr 117b2 <setVariable>
    28f8:	|  |  |  |  |                                |  |  |  |      lea 12(sp),sp
							pauseFunction (fun);							
    28fc:	|  |  |  |  |                                |  |  |  |      move.l 80(sp),-(sp)
    2900:	|  |  |  |  |                                |  |  |  |      jsr 43f8 <pauseFunction>
    2906:	|  |  |  |  |                                |  |  |  |      addq.l #4,sp
							if (! startNewFunctionNum (i, 0, fun, noStack, FALSE)) return FALSE;
    2908:	|  |  |  |  |                                |  |  |  |      move.l 19c2e <noStack>,d1
    290e:	|  |  |  |  |                                |  |  |  |      move.l 48(sp),d0
    2912:	|  |  |  |  |                                |  |  |  |      clr.l -(sp)
    2914:	|  |  |  |  |                                |  |  |  |      move.l d1,-(sp)
    2916:	|  |  |  |  |                                |  |  |  |      move.l 88(sp),-(sp)
    291a:	|  |  |  |  |                                |  |  |  |      clr.l -(sp)
    291c:	|  |  |  |  |                                |  |  |  |      move.l d0,-(sp)
    291e:	|  |  |  |  |                                |  |  |  |      jsr 4664 <startNewFunctionNum>
    2924:	|  |  |  |  |                                |  |  |  |      lea 20(sp),sp
    2928:	|  |  |  |  |                                |  |  |  |      tst.l d0
    292a:	|  |  |  |  |                                |  |  |  |  /-- bne.s 2932 <continueFunction+0x294>
    292c:	|  |  |  |  |                                |  |  |  |  |   clr.w d0
    292e:	|  +--|--|--|--------------------------------|--|--|--|--|-- bra.w 355a <continueFunction+0xebc>
							fun = allRunningFunctions;
    2932:	|  |  |  |  |                                |  |  |  |  \-> move.l 19bfa <allRunningFunctions>,80(sp)
							advanceNow = FALSE;		// So we don't do anything else with "fun"
    293a:	|  |  |  |  |                                |  |  |  |      clr.w 72(sp)
						}
						break;
    293e:	|  |  |  |  |                                |  |  |  +----- bra.s 2942 <continueFunction+0x2a4>

						default:
						break;
    2940:	|  |  |  |  |                                |  |  \--|----> nop
					}
				}
				break;
    2942:	|  |  |  |  |                                |  +-----\----X bra.s 2958 <continueFunction+0x2ba>

				default:
				KPrintF(ERROR_CALL_NONFUNCTION);
    2944:	|  |  |  |  |                                \--|----------> pea 141b0 <PutChar+0x690>
    294a:	|  |  |  |  |                                   |            jsr 12f14 <KPrintF>
    2950:	|  |  |  |  |                                   |            addq.l #4,sp
				return FALSE;
    2952:	|  |  |  |  |                                   |            clr.w d0
    2954:	|  +--|--|--|-----------------------------------|----------- bra.w 355a <continueFunction+0xebc>
			}
			break;
    2958:	|  |  |  |  +-----------------------------------\----------X bra.w 3538 <continueFunction+0xe9a>

			// These all grab things and shove 'em into the register

			case SLU_LOAD_NULL:
			setVariable (&fun -> reg, SVT_NULL, 0);
    295c:	|  |  |  |  |                                                moveq #28,d0
    295e:	|  |  |  |  |                                                add.l 80(sp),d0
    2962:	|  |  |  |  |                                                clr.l -(sp)
    2964:	|  |  |  |  |                                                clr.l -(sp)
    2966:	|  |  |  |  |                                                move.l d0,-(sp)
    2968:	|  |  |  |  |                                                jsr 117b2 <setVariable>
    296e:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    2972:	|  |  |  |  +----------------------------------------------- bra.w 3538 <continueFunction+0xe9a>

			case SLU_LOAD_FILE:
			setVariable (&fun -> reg, SVT_FILE, param);
    2976:	|  |  |  |  |                                                move.l 68(sp),d1
    297a:	|  |  |  |  |                                                moveq #28,d0
    297c:	|  |  |  |  |                                                add.l 80(sp),d0
    2980:	|  |  |  |  |                                                move.l d1,-(sp)
    2982:	|  |  |  |  |                                                pea 5 <_start+0x5>
    2986:	|  |  |  |  |                                                move.l d0,-(sp)
    2988:	|  |  |  |  |                                                jsr 117b2 <setVariable>
    298e:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    2992:	|  |  |  |  +----------------------------------------------- bra.w 3538 <continueFunction+0xe9a>

			case SLU_LOAD_VALUE:
			setVariable (&fun -> reg, SVT_INT, param);
    2996:	|  |  |  |  |                                                move.l 68(sp),d1
    299a:	|  |  |  |  |                                                moveq #28,d0
    299c:	|  |  |  |  |                                                add.l 80(sp),d0
    29a0:	|  |  |  |  |                                                move.l d1,-(sp)
    29a2:	|  |  |  |  |                                                pea 1 <_start+0x1>
    29a6:	|  |  |  |  |                                                move.l d0,-(sp)
    29a8:	|  |  |  |  |                                                jsr 117b2 <setVariable>
    29ae:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    29b2:	|  |  |  |  +----------------------------------------------- bra.w 3538 <continueFunction+0xe9a>

			case SLU_LOAD_LOCAL:
			if (! copyVariable (&(fun -> localVars[param]), &fun -> reg)) return FALSE;
    29b6:	|  |  |  |  |                                                moveq #28,d0
    29b8:	|  |  |  |  |                                                add.l 80(sp),d0
    29bc:	|  |  |  |  |                                                movea.l 80(sp),a0
    29c0:	|  |  |  |  |                                                movea.l 20(a0),a0
    29c4:	|  |  |  |  |                                                move.l 68(sp),d1
    29c8:	|  |  |  |  |                                                lsl.l #3,d1
    29ca:	|  |  |  |  |                                                add.l a0,d1
    29cc:	|  |  |  |  |                                                move.l d0,-(sp)
    29ce:	|  |  |  |  |                                                move.l d1,-(sp)
    29d0:	|  |  |  |  |                                                jsr 1137a <copyVariable>
    29d6:	|  |  |  |  |                                                addq.l #8,sp
    29d8:	|  |  |  |  |                                                tst.w d0
    29da:	|  |  |  |  |  /-------------------------------------------- bne.w 3516 <continueFunction+0xe78>
    29de:	|  |  |  |  |  |                                             clr.w d0
    29e0:	|  +--|--|--|--|-------------------------------------------- bra.w 355a <continueFunction+0xebc>
			break;

			case SLU_AND:
			setVariable (&fun -> reg, SVT_INT, getBoolean (&fun -> reg) && getBoolean(&(fun -> stack -> thisVar)));
    29e4:	|  |  |  |  |  |                                             moveq #28,d0
    29e6:	|  |  |  |  |  |                                             add.l 80(sp),d0
    29ea:	|  |  |  |  |  |                                             move.l d0,-(sp)
    29ec:	|  |  |  |  |  |                                             jsr 11400 <getBoolean>
    29f2:	|  |  |  |  |  |                                             addq.l #4,sp
    29f4:	|  |  |  |  |  |                                             tst.w d0
    29f6:	|  |  |  |  |  |                                      /----- beq.s 2a12 <continueFunction+0x374>
    29f8:	|  |  |  |  |  |                                      |      movea.l 80(sp),a0
    29fc:	|  |  |  |  |  |                                      |      move.l 24(a0),d0
    2a00:	|  |  |  |  |  |                                      |      move.l d0,-(sp)
    2a02:	|  |  |  |  |  |                                      |      jsr 11400 <getBoolean>
    2a08:	|  |  |  |  |  |                                      |      addq.l #4,sp
    2a0a:	|  |  |  |  |  |                                      |      tst.w d0
    2a0c:	|  |  |  |  |  |                                      +----- beq.s 2a12 <continueFunction+0x374>
    2a0e:	|  |  |  |  |  |                                      |      moveq #1,d0
    2a10:	|  |  |  |  |  |                                      |  /-- bra.s 2a14 <continueFunction+0x376>
    2a12:	|  |  |  |  |  |                                      \--|-> moveq #0,d0
    2a14:	|  |  |  |  |  |                                         \-> moveq #28,d1
    2a16:	|  |  |  |  |  |                                             add.l 80(sp),d1
    2a1a:	|  |  |  |  |  |                                             move.l d0,-(sp)
    2a1c:	|  |  |  |  |  |                                             pea 1 <_start+0x1>
    2a20:	|  |  |  |  |  |                                             move.l d1,-(sp)
    2a22:	|  |  |  |  |  |                                             jsr 117b2 <setVariable>
    2a28:	|  |  |  |  |  |                                             lea 12(sp),sp
			trimStack (&fun -> stack);
    2a2c:	|  |  |  |  |  |                                             moveq #24,d0
    2a2e:	|  |  |  |  |  |                                             add.l 80(sp),d0
    2a32:	|  |  |  |  |  |                                             move.l d0,-(sp)
    2a34:	|  |  |  |  |  |                                             jsr 11844 <trimStack>
    2a3a:	|  |  |  |  |  |                                             addq.l #4,sp
			break;
    2a3c:	|  |  |  |  +--|-------------------------------------------- bra.w 3538 <continueFunction+0xe9a>

			case SLU_OR:
			setVariable (&fun -> reg, SVT_INT, getBoolean (&fun -> reg) || getBoolean (&(fun -> stack -> thisVar)));
    2a40:	|  |  |  |  |  |                                             moveq #28,d0
    2a42:	|  |  |  |  |  |                                             add.l 80(sp),d0
    2a46:	|  |  |  |  |  |                                             move.l d0,-(sp)
    2a48:	|  |  |  |  |  |                                             jsr 11400 <getBoolean>
    2a4e:	|  |  |  |  |  |                                             addq.l #4,sp
    2a50:	|  |  |  |  |  |                                             tst.w d0
    2a52:	|  |  |  |  |  |                                         /-- bne.s 2a6a <continueFunction+0x3cc>
    2a54:	|  |  |  |  |  |                                         |   movea.l 80(sp),a0
    2a58:	|  |  |  |  |  |                                         |   move.l 24(a0),d0
    2a5c:	|  |  |  |  |  |                                         |   move.l d0,-(sp)
    2a5e:	|  |  |  |  |  |                                         |   jsr 11400 <getBoolean>
    2a64:	|  |  |  |  |  |                                         |   addq.l #4,sp
    2a66:	|  |  |  |  |  |                                         |   tst.w d0
    2a68:	|  |  |  |  |  |                                      /--|-- beq.s 2a6e <continueFunction+0x3d0>
    2a6a:	|  |  |  |  |  |                                      |  \-> moveq #1,d0
    2a6c:	|  |  |  |  |  |                                      |  /-- bra.s 2a70 <continueFunction+0x3d2>
    2a6e:	|  |  |  |  |  |                                      \--|-> moveq #0,d0
    2a70:	|  |  |  |  |  |                                         \-> moveq #28,d1
    2a72:	|  |  |  |  |  |                                             add.l 80(sp),d1
    2a76:	|  |  |  |  |  |                                             move.l d0,-(sp)
    2a78:	|  |  |  |  |  |                                             pea 1 <_start+0x1>
    2a7c:	|  |  |  |  |  |                                             move.l d1,-(sp)
    2a7e:	|  |  |  |  |  |                                             jsr 117b2 <setVariable>
    2a84:	|  |  |  |  |  |                                             lea 12(sp),sp
			trimStack (&fun -> stack);
    2a88:	|  |  |  |  |  |                                             moveq #24,d0
    2a8a:	|  |  |  |  |  |                                             add.l 80(sp),d0
    2a8e:	|  |  |  |  |  |                                             move.l d0,-(sp)
    2a90:	|  |  |  |  |  |                                             jsr 11844 <trimStack>
    2a96:	|  |  |  |  |  |                                             addq.l #4,sp
			break;
    2a98:	|  |  |  |  +--|-------------------------------------------- bra.w 3538 <continueFunction+0xe9a>

			case SLU_LOAD_FUNC:
    		setVariable (&fun -> reg, SVT_FUNC, param);
    2a9c:	|  |  |  |  |  |                                             move.l 68(sp),d1
    2aa0:	|  |  |  |  |  |                                             moveq #28,d0
    2aa2:	|  |  |  |  |  |                                             add.l 80(sp),d0
    2aa6:	|  |  |  |  |  |                                             move.l d1,-(sp)
    2aa8:	|  |  |  |  |  |                                             pea 2 <_start+0x2>
    2aac:	|  |  |  |  |  |                                             move.l d0,-(sp)
    2aae:	|  |  |  |  |  |                                             jsr 117b2 <setVariable>
    2ab4:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    2ab8:	|  |  |  |  +--|-------------------------------------------- bra.w 3538 <continueFunction+0xe9a>

			case SLU_LOAD_BUILT:
			setVariable (&fun -> reg, SVT_BUILT, param);
    2abc:	|  |  |  |  |  |                                             move.l 68(sp),d1
    2ac0:	|  |  |  |  |  |                                             moveq #28,d0
    2ac2:	|  |  |  |  |  |                                             add.l 80(sp),d0
    2ac6:	|  |  |  |  |  |                                             move.l d1,-(sp)
    2ac8:	|  |  |  |  |  |                                             pea 4 <_start+0x4>
    2acc:	|  |  |  |  |  |                                             move.l d0,-(sp)
    2ace:	|  |  |  |  |  |                                             jsr 117b2 <setVariable>
    2ad4:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    2ad8:	|  |  |  |  +--|-------------------------------------------- bra.w 3538 <continueFunction+0xe9a>

			case SLU_LOAD_OBJTYPE:
			setVariable (&fun -> reg, SVT_OBJTYPE, param);
    2adc:	|  |  |  |  |  |                                             move.l 68(sp),d1
    2ae0:	|  |  |  |  |  |                                             moveq #28,d0
    2ae2:	|  |  |  |  |  |                                             add.l 80(sp),d0
    2ae6:	|  |  |  |  |  |                                             move.l d1,-(sp)
    2ae8:	|  |  |  |  |  |                                             pea 7 <_start+0x7>
    2aec:	|  |  |  |  |  |                                             move.l d0,-(sp)
    2aee:	|  |  |  |  |  |                                             jsr 117b2 <setVariable>
    2af4:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    2af8:	|  |  |  |  +--|-------------------------------------------- bra.w 3538 <continueFunction+0xe9a>

			case SLU_UNREG:
			if (dialogValue != 1) {
    2afc:	|  |  |  |  |  |                                             move.l 19b6a <dialogValue>,d0
    2b02:	|  |  |  |  |  |                                             moveq #1,d1
    2b04:	|  |  |  |  |  |                                             cmp.l d0,d1
    2b06:	|  |  |  |  |  |  /----------------------------------------- beq.w 351a <continueFunction+0xe7c>
				KPrintF(ERROR_HACKER);
    2b0a:	|  |  |  |  |  |  |                                          pea 141c5 <PutChar+0x6a5>
    2b10:	|  |  |  |  |  |  |                                          jsr 12f14 <KPrintF>
    2b16:	|  |  |  |  |  |  |                                          addq.l #4,sp
				return FALSE;
    2b18:	|  |  |  |  |  |  |                                          clr.w d0
    2b1a:	|  +--|--|--|--|--|----------------------------------------- bra.w 355a <continueFunction+0xebc>
			}
			break;

			case SLU_LOAD_STRING:
				if (! loadStringToVar (&fun -> reg, param)) {
    2b1e:	|  |  |  |  |  |  |                                          move.l 68(sp),d1
    2b22:	|  |  |  |  |  |  |                                          moveq #28,d0
    2b24:	|  |  |  |  |  |  |                                          add.l 80(sp),d0
    2b28:	|  |  |  |  |  |  |                                          move.l d1,-(sp)
    2b2a:	|  |  |  |  |  |  |                                          move.l d0,-(sp)
    2b2c:	|  |  |  |  |  |  |                                          jsr 10f44 <loadStringToVar>
    2b32:	|  |  |  |  |  |  |                                          addq.l #8,sp
    2b34:	|  |  |  |  |  |  |                                          tst.w d0
    2b36:	|  |  |  |  |  |  |  /-------------------------------------- bne.w 351e <continueFunction+0xe80>
					return FALSE;
    2b3a:	|  |  |  |  |  |  |  |                                       clr.w d0
    2b3c:	|  +--|--|--|--|--|--|-------------------------------------- bra.w 355a <continueFunction+0xebc>
			break;

			case SLU_INDEXGET:
			case SLU_INCREMENT_INDEX:
			case SLU_DECREMENT_INDEX:
			switch (fun -> stack -> thisVar.varType) {
    2b40:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    2b44:	|  |  |  |  |  |  |  |                                       movea.l 24(a0),a0
    2b48:	|  |  |  |  |  |  |  |                                       move.l (a0),d0
    2b4a:	|  |  |  |  |  |  |  |                                       moveq #10,d1
    2b4c:	|  |  |  |  |  |  |  |                                       cmp.l d0,d1
    2b4e:	|  |  |  |  |  |  |  |                                /----- beq.s 2bac <continueFunction+0x50e>
    2b50:	|  |  |  |  |  |  |  |                                |      moveq #10,d1
    2b52:	|  |  |  |  |  |  |  |                                |      cmp.l d0,d1
    2b54:	|  |  |  |  |  |  |  |              /-----------------|----- bcs.w 2d40 <continueFunction+0x6a2>
    2b58:	|  |  |  |  |  |  |  |              |                 |      tst.l d0
    2b5a:	|  |  |  |  |  |  |  |              |                 |  /-- beq.s 2b66 <continueFunction+0x4c8>
    2b5c:	|  |  |  |  |  |  |  |              |                 |  |   moveq #6,d1
    2b5e:	|  |  |  |  |  |  |  |              |                 |  |   cmp.l d0,d1
    2b60:	|  |  |  |  |  |  |  |              |                 +--|-- beq.s 2bac <continueFunction+0x50e>
    2b62:	|  |  |  |  |  |  |  |              +-----------------|--|-- bra.w 2d40 <continueFunction+0x6a2>
				case SVT_NULL:
				if (com == SLU_INDEXGET) {
    2b66:	|  |  |  |  |  |  |  |              |                 |  \-> moveq #38,d0
    2b68:	|  |  |  |  |  |  |  |              |                 |      cmp.l 64(sp),d0
    2b6c:	|  |  |  |  |  |  |  |              |                 |  /-- bne.s 2b98 <continueFunction+0x4fa>
					setVariable (&fun -> reg, SVT_NULL, 0);
    2b6e:	|  |  |  |  |  |  |  |              |                 |  |   moveq #28,d0
    2b70:	|  |  |  |  |  |  |  |              |                 |  |   add.l 80(sp),d0
    2b74:	|  |  |  |  |  |  |  |              |                 |  |   clr.l -(sp)
    2b76:	|  |  |  |  |  |  |  |              |                 |  |   clr.l -(sp)
    2b78:	|  |  |  |  |  |  |  |              |                 |  |   move.l d0,-(sp)
    2b7a:	|  |  |  |  |  |  |  |              |                 |  |   jsr 117b2 <setVariable>
    2b80:	|  |  |  |  |  |  |  |              |                 |  |   lea 12(sp),sp
					trimStack (&fun -> stack);
    2b84:	|  |  |  |  |  |  |  |              |                 |  |   moveq #24,d0
    2b86:	|  |  |  |  |  |  |  |              |                 |  |   add.l 80(sp),d0
    2b8a:	|  |  |  |  |  |  |  |              |                 |  |   move.l d0,-(sp)
    2b8c:	|  |  |  |  |  |  |  |              |                 |  |   jsr 11844 <trimStack>
    2b92:	|  |  |  |  |  |  |  |              |                 |  |   addq.l #4,sp
				} else {
					KPrintF((ERROR_INCDEC_UNKNOWN));
					return FALSE;
				}
				break;
    2b94:	|  |  |  |  |  |  |  |              |  /--------------|--|-- bra.w 2d56 <continueFunction+0x6b8>
					KPrintF((ERROR_INCDEC_UNKNOWN));
    2b98:	|  |  |  |  |  |  |  |              |  |              |  \-> pea 14206 <PutChar+0x6e6>
    2b9e:	|  |  |  |  |  |  |  |              |  |              |      jsr 12f14 <KPrintF>
    2ba4:	|  |  |  |  |  |  |  |              |  |              |      addq.l #4,sp
					return FALSE;
    2ba6:	|  |  |  |  |  |  |  |              |  |              |      clr.w d0
    2ba8:	|  +--|--|--|--|--|--|--------------|--|--------------|----- bra.w 355a <continueFunction+0xebc>

				case SVT_FASTARRAY:
				case SVT_STACK:
				if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    2bac:	|  |  |  |  |  |  |  |              |  |              \----> movea.l 80(sp),a0
    2bb0:	|  |  |  |  |  |  |  |              |  |                     movea.l 24(a0),a0
    2bb4:	|  |  |  |  |  |  |  |              |  |                     movea.l 4(a0),a0
    2bb8:	|  |  |  |  |  |  |  |              |  |                     move.l (a0),d0
    2bba:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 2bd0 <continueFunction+0x532>
					KPrintF((ERROR_INDEX_EMPTY));
    2bbc:	|  |  |  |  |  |  |  |              |  |                 |   pea 14242 <PutChar+0x722>
    2bc2:	|  |  |  |  |  |  |  |              |  |                 |   jsr 12f14 <KPrintF>
    2bc8:	|  |  |  |  |  |  |  |              |  |                 |   addq.l #4,sp
					return FALSE;
    2bca:	|  |  |  |  |  |  |  |              |  |                 |   clr.w d0
    2bcc:	|  +--|--|--|--|--|--|--------------|--|-----------------|-- bra.w 355a <continueFunction+0xebc>
				} else {
					int ii;
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    2bd0:	|  |  |  |  |  |  |  |              |  |                 \-> moveq #28,d0
    2bd2:	|  |  |  |  |  |  |  |              |  |                     add.l 80(sp),d0
    2bd6:	|  |  |  |  |  |  |  |              |  |                     move.l d0,-(sp)
    2bd8:	|  |  |  |  |  |  |  |              |  |                     pea 1 <_start+0x1>
    2bdc:	|  |  |  |  |  |  |  |              |  |                     lea 12(sp),a0
    2be0:	|  |  |  |  |  |  |  |              |  |                     move.l a0,-(sp)
    2be2:	|  |  |  |  |  |  |  |              |  |                     jsr 10ec0 <getValueType>
    2be8:	|  |  |  |  |  |  |  |              |  |                     lea 12(sp),sp
    2bec:	|  |  |  |  |  |  |  |              |  |                     tst.w d0
    2bee:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 2bf6 <continueFunction+0x558>
    2bf0:	|  |  |  |  |  |  |  |              |  |                 |   clr.w d0
    2bf2:	|  +--|--|--|--|--|--|--------------|--|-----------------|-- bra.w 355a <continueFunction+0xebc>
					struct variable * grab = (fun -> stack -> thisVar.varType == SVT_FASTARRAY) ?
    2bf6:	|  |  |  |  |  |  |  |              |  |                 \-> movea.l 80(sp),a0
    2bfa:	|  |  |  |  |  |  |  |              |  |                     movea.l 24(a0),a0
    2bfe:	|  |  |  |  |  |  |  |              |  |                     move.l (a0),d0
						fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii)
							:
    2c00:	|  |  |  |  |  |  |  |              |  |                     moveq #10,d1
    2c02:	|  |  |  |  |  |  |  |              |  |                     cmp.l d0,d1
    2c04:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 2c26 <continueFunction+0x588>
						fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii)
    2c06:	|  |  |  |  |  |  |  |              |  |                 |   move.l 4(sp),d0
    2c0a:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,d1
    2c0c:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 80(sp),a0
    2c10:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 24(a0),a0
    2c14:	|  |  |  |  |  |  |  |              |  |                 |   move.l 4(a0),d0
    2c18:	|  |  |  |  |  |  |  |              |  |                 |   move.l d1,-(sp)
    2c1a:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,-(sp)
    2c1c:	|  |  |  |  |  |  |  |              |  |                 |   jsr 10b4a <fastArrayGetByIndex>
    2c22:	|  |  |  |  |  |  |  |              |  |                 |   addq.l #8,sp
    2c24:	|  |  |  |  |  |  |  |              |  |              /--|-- bra.s 2c46 <continueFunction+0x5a8>
						stackGetByIndex (fun -> stack -> thisVar.varData.theStack -> first, ii);
    2c26:	|  |  |  |  |  |  |  |              |  |              |  \-> move.l 4(sp),d0
    2c2a:	|  |  |  |  |  |  |  |              |  |              |      move.l d0,d1
    2c2c:	|  |  |  |  |  |  |  |              |  |              |      movea.l 80(sp),a0
    2c30:	|  |  |  |  |  |  |  |              |  |              |      movea.l 24(a0),a0
    2c34:	|  |  |  |  |  |  |  |              |  |              |      movea.l 4(a0),a0
    2c38:	|  |  |  |  |  |  |  |              |  |              |      move.l (a0),d0
    2c3a:	|  |  |  |  |  |  |  |              |  |              |      move.l d1,-(sp)
    2c3c:	|  |  |  |  |  |  |  |              |  |              |      move.l d0,-(sp)
    2c3e:	|  |  |  |  |  |  |  |              |  |              |      jsr 117d4 <stackGetByIndex>
    2c44:	|  |  |  |  |  |  |  |              |  |              |      addq.l #8,sp
					struct variable * grab = (fun -> stack -> thisVar.varType == SVT_FASTARRAY) ?
    2c46:	|  |  |  |  |  |  |  |              |  |              \----> move.l d0,60(sp)

					trimStack (&fun -> stack);
    2c4a:	|  |  |  |  |  |  |  |              |  |                     moveq #24,d0
    2c4c:	|  |  |  |  |  |  |  |              |  |                     add.l 80(sp),d0
    2c50:	|  |  |  |  |  |  |  |              |  |                     move.l d0,-(sp)
    2c52:	|  |  |  |  |  |  |  |              |  |                     jsr 11844 <trimStack>
    2c58:	|  |  |  |  |  |  |  |              |  |                     addq.l #4,sp

					if (! grab) {
    2c5a:	|  |  |  |  |  |  |  |              |  |                     tst.l 60(sp)
    2c5e:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 2c7a <continueFunction+0x5dc>
						setVariable (&fun -> reg, SVT_NULL, 0);
    2c60:	|  |  |  |  |  |  |  |              |  |                 |   moveq #28,d0
    2c62:	|  |  |  |  |  |  |  |              |  |                 |   add.l 80(sp),d0
    2c66:	|  |  |  |  |  |  |  |              |  |                 |   clr.l -(sp)
    2c68:	|  |  |  |  |  |  |  |              |  |                 |   clr.l -(sp)
    2c6a:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,-(sp)
    2c6c:	|  |  |  |  |  |  |  |              |  |                 |   jsr 117b2 <setVariable>
    2c72:	|  |  |  |  |  |  |  |              |  |                 |   lea 12(sp),sp
							default:
							if (! copyVariable (grab, &fun -> reg)) return FALSE;
						}
					}
				}
				break;
    2c76:	|  |  |  |  |  |  |  |              |  |  /--------------|-- bra.w 2d54 <continueFunction+0x6b6>
    2c7a:	|  |  |  |  |  |  |  |              |  |  |              \-> moveq #39,d0
    2c7c:	|  |  |  |  |  |  |  |              |  |  |                  cmp.l 64(sp),d0
    2c80:	|  |  |  |  |  |  |  |              |  |  |              /-- beq.s 2c8e <continueFunction+0x5f0>
    2c82:	|  |  |  |  |  |  |  |              |  |  |              |   moveq #40,d1
    2c84:	|  |  |  |  |  |  |  |              |  |  |              |   cmp.l 64(sp),d1
    2c88:	|  |  |  |  |  |  |  |              |  |  |           /--|-- beq.s 2cd8 <continueFunction+0x63a>
    2c8a:	|  |  |  |  |  |  |  |              |  |  |  /--------|--|-- bra.w 2d20 <continueFunction+0x682>
							if (! getValueType (&ii, SVT_INT, grab)) return FALSE;
    2c8e:	|  |  |  |  |  |  |  |              |  |  |  |        |  \-> move.l 60(sp),-(sp)
    2c92:	|  |  |  |  |  |  |  |              |  |  |  |        |      pea 1 <_start+0x1>
    2c96:	|  |  |  |  |  |  |  |              |  |  |  |        |      lea 8(sp),a0
    2c9a:	|  |  |  |  |  |  |  |              |  |  |  |        |      move.l a0,-(sp)
    2c9c:	|  |  |  |  |  |  |  |              |  |  |  |        |      jsr 10ec0 <getValueType>
    2ca2:	|  |  |  |  |  |  |  |              |  |  |  |        |      lea 12(sp),sp
    2ca6:	|  |  |  |  |  |  |  |              |  |  |  |        |      tst.w d0
    2ca8:	|  |  |  |  |  |  |  |              |  |  |  |        |  /-- bne.s 2cb0 <continueFunction+0x612>
    2caa:	|  |  |  |  |  |  |  |              |  |  |  |        |  |   clr.w d0
    2cac:	|  |  |  |  |  |  |  |              |  |  |  |  /-----|--|-- bra.w 2d3a <continueFunction+0x69c>
							setVariable (&fun -> reg, SVT_INT, ii);
    2cb0:	|  |  |  |  |  |  |  |              |  |  |  |  |     |  \-> move.l (sp),d1
    2cb2:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      moveq #28,d0
    2cb4:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      add.l 80(sp),d0
    2cb8:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d1,-(sp)
    2cba:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      pea 1 <_start+0x1>
    2cbe:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d0,-(sp)
    2cc0:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      jsr 117b2 <setVariable>
    2cc6:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      lea 12(sp),sp
							grab -> varData.intValue = ii + 1;
    2cca:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l (sp),d0
    2ccc:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      addq.l #1,d0
    2cce:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      movea.l 60(sp),a0
    2cd2:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d0,4(a0)
							break;
    2cd6:	|  |  |  |  |  |  |  |              |  |  |  |  |  /--|----- bra.s 2d3e <continueFunction+0x6a0>
							if (! getValueType (&ii, SVT_INT, grab)) return FALSE;
    2cd8:	|  |  |  |  |  |  |  |              |  |  |  |  |  |  \----> move.l 60(sp),-(sp)
    2cdc:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         pea 1 <_start+0x1>
    2ce0:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 8(sp),a0
    2ce4:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l a0,-(sp)
    2ce6:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         jsr 10ec0 <getValueType>
    2cec:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 12(sp),sp
    2cf0:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         tst.w d0
    2cf2:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     /-- bne.s 2cf8 <continueFunction+0x65a>
    2cf4:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     |   clr.w d0
    2cf6:	|  |  |  |  |  |  |  |              |  |  |  |  +--|-----|-- bra.s 2d3a <continueFunction+0x69c>
							setVariable (&fun -> reg, SVT_INT, ii);
    2cf8:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     \-> move.l (sp),d1
    2cfa:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         moveq #28,d0
    2cfc:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         add.l 80(sp),d0
    2d00:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d1,-(sp)
    2d02:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         pea 1 <_start+0x1>
    2d06:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d0,-(sp)
    2d08:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         jsr 117b2 <setVariable>
    2d0e:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 12(sp),sp
							grab -> varData.intValue = ii - 1;
    2d12:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l (sp),d0
    2d14:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         subq.l #1,d0
    2d16:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         movea.l 60(sp),a0
    2d1a:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d0,4(a0)
							break;
    2d1e:	|  |  |  |  |  |  |  |              |  |  |  |  |  +-------- bra.s 2d3e <continueFunction+0x6a0>
							if (! copyVariable (grab, &fun -> reg)) return FALSE;
    2d20:	|  |  |  |  |  |  |  |              |  |  |  \--|--|-------> moveq #28,d0
    2d22:	|  |  |  |  |  |  |  |              |  |  |     |  |         add.l 80(sp),d0
    2d26:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l d0,-(sp)
    2d28:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l 64(sp),-(sp)
    2d2c:	|  |  |  |  |  |  |  |              |  |  |     |  |         jsr 1137a <copyVariable>
    2d32:	|  |  |  |  |  |  |  |              |  |  |     |  |         addq.l #8,sp
    2d34:	|  |  |  |  |  |  |  |              |  |  |     |  |         tst.w d0
    2d36:	|  |  |  |  |  |  |  |              |  |  +-----|--|-------- bne.s 2d54 <continueFunction+0x6b6>
    2d38:	|  |  |  |  |  |  |  |              |  |  |     |  |         clr.w d0
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    2d3a:	|  +--|--|--|--|--|--|--------------|--|--|-----\--|-------X bra.w 355a <continueFunction+0xebc>
				break;
    2d3e:	|  |  |  |  |  |  |  |              |  |  +--------\-------X bra.s 2d54 <continueFunction+0x6b6>

				default:
				KPrintF((ERROR_INDEX_NONSTACK));
    2d40:	|  |  |  |  |  |  |  |              \--|--|----------------> pea 14260 <PutChar+0x740>
    2d46:	|  |  |  |  |  |  |  |                 |  |                  jsr 12f14 <KPrintF>
    2d4c:	|  |  |  |  |  |  |  |                 |  |                  addq.l #4,sp
				return FALSE;
    2d4e:	|  |  |  |  |  |  |  |                 |  |                  clr.w d0
    2d50:	|  +--|--|--|--|--|--|-----------------|--|----------------- bra.w 355a <continueFunction+0xebc>
				break;
    2d54:	|  |  |  |  |  |  |  |                 |  \----------------> nop
			}
			break;
    2d56:	|  |  |  |  +--|--|--|-----------------\-------------------X bra.w 3538 <continueFunction+0xe9a>

			case SLU_INDEXSET:
			switch (fun -> stack -> thisVar.varType) {
    2d5a:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    2d5e:	|  |  |  |  |  |  |  |                                       movea.l 24(a0),a0
    2d62:	|  |  |  |  |  |  |  |                                       move.l (a0),d0
    2d64:	|  |  |  |  |  |  |  |                                       moveq #6,d1
    2d66:	|  |  |  |  |  |  |  |                                       cmp.l d0,d1
    2d68:	|  |  |  |  |  |  |  |                                   /-- beq.s 2d76 <continueFunction+0x6d8>
    2d6a:	|  |  |  |  |  |  |  |                                   |   moveq #10,d1
    2d6c:	|  |  |  |  |  |  |  |                                   |   cmp.l d0,d1
    2d6e:	|  |  |  |  |  |  |  |                                /--|-- beq.w 2e22 <continueFunction+0x784>
    2d72:	|  |  |  |  |  |  |  |                             /--|--|-- bra.w 2e80 <continueFunction+0x7e2>
				case SVT_STACK:
				if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    2d76:	|  |  |  |  |  |  |  |                             |  |  \-> movea.l 80(sp),a0
    2d7a:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    2d7e:	|  |  |  |  |  |  |  |                             |  |      movea.l 4(a0),a0
    2d82:	|  |  |  |  |  |  |  |                             |  |      move.l (a0),d0
    2d84:	|  |  |  |  |  |  |  |                             |  |  /-- bne.s 2d9a <continueFunction+0x6fc>
					KPrintF((ERROR_INDEX_EMPTY));
    2d86:	|  |  |  |  |  |  |  |                             |  |  |   pea 14242 <PutChar+0x722>
    2d8c:	|  |  |  |  |  |  |  |                             |  |  |   jsr 12f14 <KPrintF>
    2d92:	|  |  |  |  |  |  |  |                             |  |  |   addq.l #4,sp
					return FALSE;
    2d94:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    2d96:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 355a <continueFunction+0xebc>
				} else {
					int ii;
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    2d9a:	|  |  |  |  |  |  |  |                             |  |  \-> moveq #28,d0
    2d9c:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    2da0:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    2da2:	|  |  |  |  |  |  |  |                             |  |      pea 1 <_start+0x1>
    2da6:	|  |  |  |  |  |  |  |                             |  |      lea 16(sp),a0
    2daa:	|  |  |  |  |  |  |  |                             |  |      move.l a0,-(sp)
    2dac:	|  |  |  |  |  |  |  |                             |  |      jsr 10ec0 <getValueType>
    2db2:	|  |  |  |  |  |  |  |                             |  |      lea 12(sp),sp
    2db6:	|  |  |  |  |  |  |  |                             |  |      tst.w d0
    2db8:	|  |  |  |  |  |  |  |                             |  |  /-- bne.s 2dc0 <continueFunction+0x722>
    2dba:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    2dbc:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 355a <continueFunction+0xebc>
					if (! stackSetByIndex (fun -> stack -> thisVar.varData.theStack -> first, ii, &fun -> stack -> next -> thisVar)) {
    2dc0:	|  |  |  |  |  |  |  |                             |  |  \-> movea.l 80(sp),a0
    2dc4:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    2dc8:	|  |  |  |  |  |  |  |                             |  |      move.l 8(a0),d0
    2dcc:	|  |  |  |  |  |  |  |                             |  |      movea.l d0,a1
    2dce:	|  |  |  |  |  |  |  |                             |  |      move.l 8(sp),d0
    2dd2:	|  |  |  |  |  |  |  |                             |  |      move.l d0,d1
    2dd4:	|  |  |  |  |  |  |  |                             |  |      movea.l 80(sp),a0
    2dd8:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    2ddc:	|  |  |  |  |  |  |  |                             |  |      movea.l 4(a0),a0
    2de0:	|  |  |  |  |  |  |  |                             |  |      move.l (a0),d0
    2de2:	|  |  |  |  |  |  |  |                             |  |      move.l a1,-(sp)
    2de4:	|  |  |  |  |  |  |  |                             |  |      move.l d1,-(sp)
    2de6:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    2de8:	|  |  |  |  |  |  |  |                             |  |      jsr 4620 <stackSetByIndex>
    2dee:	|  |  |  |  |  |  |  |                             |  |      lea 12(sp),sp
    2df2:	|  |  |  |  |  |  |  |                             |  |      tst.w d0
    2df4:	|  |  |  |  |  |  |  |                             |  |  /-- bne.s 2dfc <continueFunction+0x75e>
						return FALSE;
    2df6:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    2df8:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 355a <continueFunction+0xebc>
					}
					trimStack (&fun -> stack);
    2dfc:	|  |  |  |  |  |  |  |                             |  |  \-> moveq #24,d0
    2dfe:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    2e02:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    2e04:	|  |  |  |  |  |  |  |                             |  |      jsr 11844 <trimStack>
    2e0a:	|  |  |  |  |  |  |  |                             |  |      addq.l #4,sp
					trimStack (&fun -> stack);
    2e0c:	|  |  |  |  |  |  |  |                             |  |      moveq #24,d0
    2e0e:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    2e12:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    2e14:	|  |  |  |  |  |  |  |                             |  |      jsr 11844 <trimStack>
    2e1a:	|  |  |  |  |  |  |  |                             |  |      addq.l #4,sp
				}
				break;
    2e1c:	|  |  |  |  |  |  |  |                             |  |      nop

				default:
				KPrintF((ERROR_INDEX_NONSTACK));
				return FALSE;
			}
			break;
    2e1e:	|  |  |  |  +--|--|--|-----------------------------|--|----- bra.w 3538 <continueFunction+0xe9a>
					if (! getValueType (&ii, SVT_INT, &fun->reg)) return FALSE;
    2e22:	|  |  |  |  |  |  |  |                             |  \----> moveq #28,d0
    2e24:	|  |  |  |  |  |  |  |                             |         add.l 80(sp),d0
    2e28:	|  |  |  |  |  |  |  |                             |         move.l d0,-(sp)
    2e2a:	|  |  |  |  |  |  |  |                             |         pea 1 <_start+0x1>
    2e2e:	|  |  |  |  |  |  |  |                             |         lea 20(sp),a0
    2e32:	|  |  |  |  |  |  |  |                             |         move.l a0,-(sp)
    2e34:	|  |  |  |  |  |  |  |                             |         jsr 10ec0 <getValueType>
    2e3a:	|  |  |  |  |  |  |  |                             |         lea 12(sp),sp
    2e3e:	|  |  |  |  |  |  |  |                             |         tst.w d0
    2e40:	|  |  |  |  |  |  |  |                             |     /-- bne.s 2e48 <continueFunction+0x7aa>
    2e42:	|  |  |  |  |  |  |  |                             |     |   clr.w d0
    2e44:	|  +--|--|--|--|--|--|-----------------------------|-----|-- bra.w 355a <continueFunction+0xebc>
					struct variable * v = fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii);
    2e48:	|  |  |  |  |  |  |  |                             |     \-> move.l 12(sp),d0
    2e4c:	|  |  |  |  |  |  |  |                             |         move.l d0,d1
    2e4e:	|  |  |  |  |  |  |  |                             |         movea.l 80(sp),a0
    2e52:	|  |  |  |  |  |  |  |                             |         movea.l 24(a0),a0
    2e56:	|  |  |  |  |  |  |  |                             |         move.l 4(a0),d0
    2e5a:	|  |  |  |  |  |  |  |                             |         move.l d1,-(sp)
    2e5c:	|  |  |  |  |  |  |  |                             |         move.l d0,-(sp)
    2e5e:	|  |  |  |  |  |  |  |                             |         jsr 10b4a <fastArrayGetByIndex>
    2e64:	|  |  |  |  |  |  |  |                             |         addq.l #8,sp
    2e66:	|  |  |  |  |  |  |  |                             |         move.l d0,56(sp)
					if (v == NULL) KPrintF(("Not within bounds of fast array."));
    2e6a:	|  |  |  |  |  |  |  |                             |     /-- bne.s 2e7a <continueFunction+0x7dc>
    2e6c:	|  |  |  |  |  |  |  |                             |     |   pea 14284 <PutChar+0x764>
    2e72:	|  |  |  |  |  |  |  |                             |     |   jsr 12f14 <KPrintF>
    2e78:	|  |  |  |  |  |  |  |                             |     |   addq.l #4,sp
					return FALSE;
    2e7a:	|  |  |  |  |  |  |  |                             |     \-> clr.w d0
    2e7c:	|  +--|--|--|--|--|--|-----------------------------|-------- bra.w 355a <continueFunction+0xebc>
				KPrintF((ERROR_INDEX_NONSTACK));
    2e80:	|  |  |  |  |  |  |  |                             \-------> pea 14260 <PutChar+0x740>
    2e86:	|  |  |  |  |  |  |  |                                       jsr 12f14 <KPrintF>
    2e8c:	|  |  |  |  |  |  |  |                                       addq.l #4,sp
				return FALSE;
    2e8e:	|  |  |  |  |  |  |  |                                       clr.w d0
    2e90:	|  +--|--|--|--|--|--|-------------------------------------- bra.w 355a <continueFunction+0xebc>
			// variable, a global or onto the stack...

			case SLU_INCREMENT_LOCAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&fun -> localVars[param])) return FALSE;
    2e94:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    2e98:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    2e9c:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    2ea0:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    2ea2:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    2ea4:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2ea6:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2eaa:	|  |  |  |  |  |  |  |                                       lea 24(sp),a0
    2eae:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    2eb0:	|  |  |  |  |  |  |  |                                       jsr 10ec0 <getValueType>
    2eb6:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    2eba:	|  |  |  |  |  |  |  |                                       tst.w d0
    2ebc:	|  |  |  |  |  |  |  |                                   /-- bne.s 2ec4 <continueFunction+0x826>
    2ebe:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    2ec0:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 355a <continueFunction+0xebc>
				setVariable (&fun -> reg, SVT_INT, ii);
    2ec4:	|  |  |  |  |  |  |  |                                   \-> move.l 16(sp),d1
    2ec8:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    2eca:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    2ece:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    2ed0:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2ed4:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2ed6:	|  |  |  |  |  |  |  |                                       jsr 117b2 <setVariable>
    2edc:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&(fun -> localVars[param]), SVT_INT, ii + 1);
    2ee0:	|  |  |  |  |  |  |  |                                       move.l 16(sp),d0
    2ee4:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    2ee6:	|  |  |  |  |  |  |  |                                       addq.l #1,d1
    2ee8:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    2eec:	|  |  |  |  |  |  |  |                                       movea.l 20(a0),a0
    2ef0:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    2ef4:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    2ef6:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    2ef8:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    2efa:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2efe:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2f00:	|  |  |  |  |  |  |  |                                       jsr 117b2 <setVariable>
    2f06:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    2f0a:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 3538 <continueFunction+0xe9a>

			case SLU_INCREMENT_GLOBAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&globalVars[param])) return FALSE;
    2f0e:	|  |  |  |  |  |  |  |                                       move.l 19c10 <globalVars>,d1
    2f14:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    2f18:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    2f1a:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    2f1c:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2f1e:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2f22:	|  |  |  |  |  |  |  |                                       lea 28(sp),a0
    2f26:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    2f28:	|  |  |  |  |  |  |  |                                       jsr 10ec0 <getValueType>
    2f2e:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    2f32:	|  |  |  |  |  |  |  |                                       tst.w d0
    2f34:	|  |  |  |  |  |  |  |                                   /-- bne.s 2f3c <continueFunction+0x89e>
    2f36:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    2f38:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 355a <continueFunction+0xebc>
				setVariable (&fun -> reg, SVT_INT, ii);
    2f3c:	|  |  |  |  |  |  |  |                                   \-> move.l 20(sp),d1
    2f40:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    2f42:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    2f46:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    2f48:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2f4c:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2f4e:	|  |  |  |  |  |  |  |                                       jsr 117b2 <setVariable>
    2f54:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&globalVars[param], SVT_INT, ii + 1);
    2f58:	|  |  |  |  |  |  |  |                                       move.l 20(sp),d0
    2f5c:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    2f5e:	|  |  |  |  |  |  |  |                                       addq.l #1,d1
    2f60:	|  |  |  |  |  |  |  |                                       movea.l 19c10 <globalVars>,a0
    2f66:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    2f6a:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    2f6c:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    2f6e:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    2f70:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2f74:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2f76:	|  |  |  |  |  |  |  |                                       jsr 117b2 <setVariable>
    2f7c:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    2f80:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 3538 <continueFunction+0xe9a>

			case SLU_DECREMENT_LOCAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&fun -> localVars[param])) return FALSE;
    2f84:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    2f88:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    2f8c:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    2f90:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    2f92:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    2f94:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2f96:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2f9a:	|  |  |  |  |  |  |  |                                       lea 32(sp),a0
    2f9e:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    2fa0:	|  |  |  |  |  |  |  |                                       jsr 10ec0 <getValueType>
    2fa6:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    2faa:	|  |  |  |  |  |  |  |                                       tst.w d0
    2fac:	|  |  |  |  |  |  |  |                                   /-- bne.s 2fb4 <continueFunction+0x916>
    2fae:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    2fb0:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 355a <continueFunction+0xebc>
				setVariable (&fun -> reg, SVT_INT, ii);
    2fb4:	|  |  |  |  |  |  |  |                                   \-> move.l 24(sp),d1
    2fb8:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    2fba:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    2fbe:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    2fc0:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2fc4:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2fc6:	|  |  |  |  |  |  |  |                                       jsr 117b2 <setVariable>
    2fcc:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&(fun -> localVars[param]), SVT_INT, ii - 1);
    2fd0:	|  |  |  |  |  |  |  |                                       move.l 24(sp),d0
    2fd4:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    2fd6:	|  |  |  |  |  |  |  |                                       subq.l #1,d1
    2fd8:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    2fdc:	|  |  |  |  |  |  |  |                                       movea.l 20(a0),a0
    2fe0:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    2fe4:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    2fe6:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    2fe8:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    2fea:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2fee:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2ff0:	|  |  |  |  |  |  |  |                                       jsr 117b2 <setVariable>
    2ff6:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    2ffa:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 3538 <continueFunction+0xe9a>

			case SLU_DECREMENT_GLOBAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&globalVars[param])) return FALSE;
    2ffe:	|  |  |  |  |  |  |  |                                       move.l 19c10 <globalVars>,d1
    3004:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    3008:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    300a:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    300c:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    300e:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    3012:	|  |  |  |  |  |  |  |                                       lea 36(sp),a0
    3016:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    3018:	|  |  |  |  |  |  |  |                                       jsr 10ec0 <getValueType>
    301e:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    3022:	|  |  |  |  |  |  |  |                                       tst.w d0
    3024:	|  |  |  |  |  |  |  |                                   /-- bne.s 302c <continueFunction+0x98e>
    3026:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    3028:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 355a <continueFunction+0xebc>
				setVariable (&fun -> reg, SVT_INT, ii);
    302c:	|  |  |  |  |  |  |  |                                   \-> move.l 28(sp),d1
    3030:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    3032:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    3036:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    3038:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    303c:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    303e:	|  |  |  |  |  |  |  |                                       jsr 117b2 <setVariable>
    3044:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&globalVars[param], SVT_INT, ii - 1);
    3048:	|  |  |  |  |  |  |  |                                       move.l 28(sp),d0
    304c:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    304e:	|  |  |  |  |  |  |  |                                       subq.l #1,d1
    3050:	|  |  |  |  |  |  |  |                                       movea.l 19c10 <globalVars>,a0
    3056:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    305a:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    305c:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    305e:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    3060:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    3064:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    3066:	|  |  |  |  |  |  |  |                                       jsr 117b2 <setVariable>
    306c:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    3070:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 3538 <continueFunction+0xe9a>

			case SLU_SET_LOCAL:
			if (! copyVariable (&fun -> reg, &(fun -> localVars[param]))) return FALSE;
    3074:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    3078:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    307c:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    3080:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    3082:	|  |  |  |  |  |  |  |                                       add.l d0,d1
    3084:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    3086:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    308a:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    308c:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    308e:	|  |  |  |  |  |  |  |                                       jsr 1137a <copyVariable>
    3094:	|  |  |  |  |  |  |  |                                       addq.l #8,sp
    3096:	|  |  |  |  |  |  |  |                                       tst.w d0
    3098:	|  |  |  |  |  |  |  |  /----------------------------------- bne.w 3522 <continueFunction+0xe84>
    309c:	|  |  |  |  |  |  |  |  |                                    clr.w d0
    309e:	|  +--|--|--|--|--|--|--|----------------------------------- bra.w 355a <continueFunction+0xebc>
			break;

			case SLU_SET_GLOBAL:
//			newDebug ("  Copying TO global variable", param);
//			newDebug ("  Global type at the moment", globalVars[param].varType);
			if (! copyVariable (&fun -> reg, &globalVars[param])) return FALSE;
    30a2:	|  |  |  |  |  |  |  |  |                                    move.l 19c10 <globalVars>,d1
    30a8:	|  |  |  |  |  |  |  |  |                                    move.l 68(sp),d0
    30ac:	|  |  |  |  |  |  |  |  |                                    lsl.l #3,d0
    30ae:	|  |  |  |  |  |  |  |  |                                    add.l d0,d1
    30b0:	|  |  |  |  |  |  |  |  |                                    moveq #28,d0
    30b2:	|  |  |  |  |  |  |  |  |                                    add.l 80(sp),d0
    30b6:	|  |  |  |  |  |  |  |  |                                    move.l d1,-(sp)
    30b8:	|  |  |  |  |  |  |  |  |                                    move.l d0,-(sp)
    30ba:	|  |  |  |  |  |  |  |  |                                    jsr 1137a <copyVariable>
    30c0:	|  |  |  |  |  |  |  |  |                                    addq.l #8,sp
    30c2:	|  |  |  |  |  |  |  |  |                                    tst.w d0
    30c4:	|  |  |  |  |  |  |  |  |  /-------------------------------- bne.w 3526 <continueFunction+0xe88>
    30c8:	|  |  |  |  |  |  |  |  |  |                                 clr.w d0
    30ca:	|  +--|--|--|--|--|--|--|--|-------------------------------- bra.w 355a <continueFunction+0xebc>
			break;

			case SLU_LOAD_GLOBAL:
//			newDebug ("  Copying FROM global variable", param);
//			newDebug ("  Global type at the moment", globalVars[param].varType);
			if (! copyVariable (&globalVars[param], &fun -> reg)) return FALSE;
    30ce:	|  |  |  |  |  |  |  |  |  |                                 moveq #28,d0
    30d0:	|  |  |  |  |  |  |  |  |  |                                 add.l 80(sp),d0
    30d4:	|  |  |  |  |  |  |  |  |  |                                 movea.l 19c10 <globalVars>,a0
    30da:	|  |  |  |  |  |  |  |  |  |                                 move.l 68(sp),d1
    30de:	|  |  |  |  |  |  |  |  |  |                                 lsl.l #3,d1
    30e0:	|  |  |  |  |  |  |  |  |  |                                 add.l a0,d1
    30e2:	|  |  |  |  |  |  |  |  |  |                                 move.l d0,-(sp)
    30e4:	|  |  |  |  |  |  |  |  |  |                                 move.l d1,-(sp)
    30e6:	|  |  |  |  |  |  |  |  |  |                                 jsr 1137a <copyVariable>
    30ec:	|  |  |  |  |  |  |  |  |  |                                 addq.l #8,sp
    30ee:	|  |  |  |  |  |  |  |  |  |                                 tst.w d0
    30f0:	|  |  |  |  |  |  |  |  |  |  /----------------------------- bne.w 352a <continueFunction+0xe8c>
    30f4:	|  |  |  |  |  |  |  |  |  |  |                              clr.w d0
    30f6:	|  +--|--|--|--|--|--|--|--|--|----------------------------- bra.w 355a <continueFunction+0xebc>
			break;

			case SLU_STACK_PUSH:
			if (! addVarToStack (&fun -> reg, &fun -> stack)) return FALSE;
    30fa:	|  |  |  |  |  |  |  |  |  |  |                              moveq #24,d1
    30fc:	|  |  |  |  |  |  |  |  |  |  |                              add.l 80(sp),d1
    3100:	|  |  |  |  |  |  |  |  |  |  |                              moveq #28,d0
    3102:	|  |  |  |  |  |  |  |  |  |  |                              add.l 80(sp),d0
    3106:	|  |  |  |  |  |  |  |  |  |  |                              move.l d1,-(sp)
    3108:	|  |  |  |  |  |  |  |  |  |  |                              move.l d0,-(sp)
    310a:	|  |  |  |  |  |  |  |  |  |  |                              jsr 106fc <addVarToStack>
    3110:	|  |  |  |  |  |  |  |  |  |  |                              addq.l #8,sp
    3112:	|  |  |  |  |  |  |  |  |  |  |                              tst.w d0
    3114:	|  |  |  |  |  |  |  |  |  |  |  /-------------------------- bne.w 352e <continueFunction+0xe90>
    3118:	|  |  |  |  |  |  |  |  |  |  |  |                           clr.w d0
    311a:	|  +--|--|--|--|--|--|--|--|--|--|-------------------------- bra.w 355a <continueFunction+0xebc>
			break;

			case SLU_QUICK_PUSH:
			if (! addVarToStackQuick (&fun -> reg, &fun -> stack)) return FALSE;
    311e:	|  |  |  |  |  |  |  |  |  |  |  |                           moveq #24,d1
    3120:	|  |  |  |  |  |  |  |  |  |  |  |                           add.l 80(sp),d1
    3124:	|  |  |  |  |  |  |  |  |  |  |  |                           moveq #28,d0
    3126:	|  |  |  |  |  |  |  |  |  |  |  |                           add.l 80(sp),d0
    312a:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l d1,-(sp)
    312c:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l d0,-(sp)
    312e:	|  |  |  |  |  |  |  |  |  |  |  |                           jsr 10782 <addVarToStackQuick>
    3134:	|  |  |  |  |  |  |  |  |  |  |  |                           addq.l #8,sp
    3136:	|  |  |  |  |  |  |  |  |  |  |  |                           tst.w d0
    3138:	|  |  |  |  |  |  |  |  |  |  |  |  /----------------------- bne.w 3532 <continueFunction+0xe94>
    313c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        clr.w d0
    313e:	|  +--|--|--|--|--|--|--|--|--|--|--|----------------------- bra.w 355a <continueFunction+0xebc>
			break;

			case SLU_NOT:
			setVariable (&fun -> reg, SVT_INT, ! getBoolean (&fun -> reg));
    3142:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    3144:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    3148:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    314a:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 11400 <getBoolean>
    3150:	|  |  |  |  |  |  |  |  |  |  |  |  |                        addq.l #4,sp
    3152:	|  |  |  |  |  |  |  |  |  |  |  |  |                        tst.w d0
    3154:	|  |  |  |  |  |  |  |  |  |  |  |  |                        seq d0
    3156:	|  |  |  |  |  |  |  |  |  |  |  |  |                        neg.b d0
    3158:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #0,d1
    315a:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.b d0,d1
    315c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    315e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    3162:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d1,-(sp)
    3164:	|  |  |  |  |  |  |  |  |  |  |  |  |                        pea 1 <_start+0x1>
    3168:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    316a:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 117b2 <setVariable>
    3170:	|  |  |  |  |  |  |  |  |  |  |  |  |                        lea 12(sp),sp
			break;
    3174:	|  |  |  |  +--|--|--|--|--|--|--|--|----------------------- bra.w 3538 <continueFunction+0xe9a>

			case SLU_BR_ZERO:
			if (! getBoolean (&fun -> reg)) {
    3178:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    317a:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    317e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    3180:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 11400 <getBoolean>
    3186:	|  |  |  |  |  |  |  |  |  |  |  |  |                        addq.l #4,sp
    3188:	|  |  |  |  |  |  |  |  |  |  |  |  |                        tst.w d0
    318a:	|  |  |  |  |  |  |  |  |  |  |  |  |  /-------------------- bne.w 3536 <continueFunction+0xe98>
				advanceNow = FALSE;
    318e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     clr.w 72(sp)
				fun -> runThisLine = param;
    3192:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    3196:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 68(sp),36(a0)
			}
			break;
    319c:	|  |  |  |  |  |  |  |  |  |  |  |  |  +-------------------- bra.w 3536 <continueFunction+0xe98>

			case SLU_BRANCH:
			advanceNow = FALSE;
    31a0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     clr.w 72(sp)
			fun -> runThisLine = param;
    31a4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    31a8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 68(sp),36(a0)
			break;
    31ae:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-------------------- bra.w 3538 <continueFunction+0xe9a>

			case SLU_NEGATIVE:
			{
				int i;
				if (! getValueType(&i, SVT_INT,&fun -> reg)) return FALSE;
    31b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     moveq #28,d0
    31b4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     add.l 80(sp),d0
    31b8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,-(sp)
    31ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     pea 1 <_start+0x1>
    31be:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 40(sp),a0
    31c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l a0,-(sp)
    31c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     jsr 10ec0 <getValueType>
    31ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 12(sp),sp
    31ce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     tst.w d0
    31d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 /-- bne.s 31d8 <continueFunction+0xb3a>
    31d2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 |   clr.w d0
    31d4:	|  +--|--|--|--|--|--|--|--|--|--|--|--|-----------------|-- bra.w 355a <continueFunction+0xebc>
				setVariable (&fun -> reg, SVT_INT, -i);
    31d8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 \-> move.l 32(sp),d0
    31dc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,d1
    31de:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     neg.l d1
    31e0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     moveq #28,d0
    31e2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     add.l 80(sp),d0
    31e6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d1,-(sp)
    31e8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     pea 1 <_start+0x1>
    31ec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,-(sp)
    31ee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     jsr 117b2 <setVariable>
    31f4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 12(sp),sp
			}
			break;
    31f8:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-------------------- bra.w 3538 <continueFunction+0xe9a>
			case SLU_NOT_EQ:
			case SLU_LESSTHAN:
			case SLU_MORETHAN:
			case SLU_LESS_EQUAL:
			case SLU_MORE_EQUAL:
			if (fun -> stack) {
    31fc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    3200:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 24(a0),d0
    3204:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  /----------------- beq.w 34ee <continueFunction+0xe50>
    3208:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  moveq #15,d0
    320a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  cmp.l 64(sp),d0
    320e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        /-------- beq.s 328a <continueFunction+0xbec>
    3210:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #15,d1
    3212:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         cmp.l 64(sp),d1
    3216:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     /--|-------- bcs.w 32d4 <continueFunction+0xc36>
    321a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |         moveq #8,d0
    321c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |         cmp.l 64(sp),d0
    3220:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     /-- beq.s 322e <continueFunction+0xb90>
    3222:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |   moveq #14,d1
    3224:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |   cmp.l 64(sp),d1
    3228:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  /--|-- beq.s 325c <continueFunction+0xbbe>
    322a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     +--|--|--|-- bra.w 32d4 <continueFunction+0xc36>
				int firstValue, secondValue;

				switch (com) {
					case SLU_PLUS:
					addVariablesInSecond (&fun -> stack -> thisVar, &fun -> reg);
    322e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  \-> moveq #28,d0
    3230:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      add.l 80(sp),d0
    3234:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      movea.l 80(sp),a0
    3238:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l 24(a0),d1
    323c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d0,-(sp)
    323e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d1,-(sp)
    3240:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      jsr 107f6 <addVariablesInSecond>
    3246:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      addq.l #8,sp
					trimStack (&fun -> stack);
    3248:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      moveq #24,d0
    324a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      add.l 80(sp),d0
    324e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d0,-(sp)
    3250:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      jsr 11844 <trimStack>
    3256:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      addq.l #4,sp
					break;
    3258:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  /--|--|--|----- bra.w 3502 <continueFunction+0xe64>

					case SLU_EQUALS:
					compareVariablesInSecond (&(fun -> stack -> thisVar), &fun -> reg);
    325c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \----> moveq #28,d0
    325e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         add.l 80(sp),d0
    3262:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         movea.l 80(sp),a0
    3266:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l 24(a0),d1
    326a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d0,-(sp)
    326c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d1,-(sp)
    326e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         jsr 108b4 <compareVariablesInSecond>
    3274:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         addq.l #8,sp
					trimStack (&fun -> stack);
    3276:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         moveq #24,d0
    3278:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         add.l 80(sp),d0
    327c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d0,-(sp)
    327e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         jsr 11844 <trimStack>
    3284:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         addq.l #4,sp
					break;
    3286:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|--|-------- bra.w 3502 <continueFunction+0xe64>

					case SLU_NOT_EQ:
					compareVariablesInSecond (&(fun -> stack -> thisVar), &fun -> reg);
    328a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \-------> moveq #28,d0
    328c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            add.l 80(sp),d0
    3290:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    3294:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 24(a0),d1
    3298:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,-(sp)
    329a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d1,-(sp)
    329c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            jsr 108b4 <compareVariablesInSecond>
    32a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            addq.l #8,sp
					trimStack (&fun -> stack);
    32a4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            moveq #24,d0
    32a6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            add.l 80(sp),d0
    32aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,-(sp)
    32ac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            jsr 11844 <trimStack>
    32b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            addq.l #4,sp
	               	fun -> reg.varData.intValue = ! fun -> reg.varData.intValue;
    32b4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    32b8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 32(a0),d0
    32bc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            seq d0
    32be:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            neg.b d0
    32c0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.b d0,d0
    32c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            andi.l #255,d0
    32c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    32cc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,32(a0)
					break;
    32d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|----------- bra.w 3502 <continueFunction+0xe64>

					default:
					if (! getValueType (&firstValue, SVT_INT, &fun->stack->thisVar)) return FALSE;
    32d4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \----------> movea.l 80(sp),a0
    32d8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l 24(a0),d0
    32dc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    32de:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               pea 1 <_start+0x1>
    32e2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 48(sp),a0
    32e6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l a0,-(sp)
    32e8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 10ec0 <getValueType>
    32ee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 12(sp),sp
    32f2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               tst.w d0
    32f4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           /-- bne.s 32fc <continueFunction+0xc5e>
    32f6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   clr.w d0
    32f8:	|  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|-----------|-- bra.w 355a <continueFunction+0xebc>
					if (! getValueType(&secondValue, SVT_INT,&fun -> reg)) return FALSE;
    32fc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           \-> moveq #28,d0
    32fe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 80(sp),d0
    3302:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    3304:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               pea 1 <_start+0x1>
    3308:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 44(sp),a0
    330c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l a0,-(sp)
    330e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 10ec0 <getValueType>
    3314:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 12(sp),sp
    3318:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               tst.w d0
    331a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           /-- bne.s 3322 <continueFunction+0xc84>
    331c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   clr.w d0
    331e:	|  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|-----------|-- bra.w 355a <continueFunction+0xebc>
					trimStack (&fun -> stack);
    3322:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           \-> moveq #24,d0
    3324:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 80(sp),d0
    3328:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    332a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 11844 <trimStack>
    3330:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               addq.l #4,sp
    3332:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               moveq #-9,d0
    3334:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 64(sp),d0
    3338:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               moveq #23,d1
    333a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               cmp.l d0,d1
    333c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           /-- bcs.w 3500 <continueFunction+0xe62>
    3340:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l d0,d0
    3342:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   movea.l d0,a0
    3344:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   adda.l #13136,a0
    334a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.w (a0),d0
    334c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jmp (3350 <continueFunction+0xcb2>,pc,d0.w)
    3350:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   ori.w #48,-(a2)
    3354:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x00ba
    3356:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    335e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x0088
    3360:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    3368:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    3370:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(15466778,d0.w)
    3378:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(21365106,d0.w)

					switch (com) {
						case SLU_MULT:
						setVariable (&fun -> reg, SVT_INT, firstValue * secondValue);
    3380:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    3384:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    3388:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    338a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    338c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 13a0a <__mulsi3>
    3392:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    3394:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    3396:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    3398:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    339c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    339e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    33a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    33a4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 117b2 <setVariable>
    33aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    33ae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 3502 <continueFunction+0xe64>

						case SLU_MINUS:
						setVariable (&fun -> reg, SVT_INT, firstValue - secondValue);
    33b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    33b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    33ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sub.l d0,d1
    33bc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    33be:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    33c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    33c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    33c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    33ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 117b2 <setVariable>
    33d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    33d4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 3502 <continueFunction+0xe64>

						case SLU_MODULUS:
						setVariable (&fun -> reg, SVT_INT, firstValue % secondValue);
    33d8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    33dc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    33e0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    33e2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    33e4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 13ab6 <__modsi3>
    33ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    33ec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    33ee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    33f0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    33f4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    33f6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    33fa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    33fc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 117b2 <setVariable>
    3402:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    3406:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 3502 <continueFunction+0xe64>

						case SLU_DIVIDE:
						setVariable (&fun -> reg, SVT_INT, firstValue / secondValue);
    340a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    340e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    3412:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    3414:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    3416:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 13a88 <__divsi3>
    341c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    341e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    3420:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    3422:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    3426:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    3428:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    342c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    342e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 117b2 <setVariable>
    3434:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    3438:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 3502 <continueFunction+0xe64>

						case SLU_LESSTHAN:
						setVariable (&fun -> reg, SVT_INT, firstValue < secondValue);
    343c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    3440:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    3444:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    3446:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sgt d0
    3448:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    344a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    344c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    344e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    3450:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    3454:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    3456:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    345a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    345c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 117b2 <setVariable>
    3462:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    3466:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 3502 <continueFunction+0xe64>

						case SLU_MORETHAN:
						setVariable (&fun -> reg, SVT_INT, firstValue > secondValue);
    346a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    346e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    3472:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    3474:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   slt d0
    3476:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    3478:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    347a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    347c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    347e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    3482:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    3484:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    3488:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    348a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 117b2 <setVariable>
    3490:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    3494:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 3502 <continueFunction+0xe64>

						case SLU_LESS_EQUAL:
						setVariable (&fun -> reg, SVT_INT, firstValue <= secondValue);
    3496:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    349a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    349e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    34a0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sge d0
    34a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    34a4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    34a6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    34a8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    34aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    34ae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    34b0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    34b4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    34b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 117b2 <setVariable>
    34bc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    34c0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 3502 <continueFunction+0xe64>

						case SLU_MORE_EQUAL:
						setVariable (&fun -> reg, SVT_INT, firstValue >= secondValue);
    34c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    34c6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    34ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    34cc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sle d0
    34ce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    34d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    34d2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    34d4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    34d6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    34da:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    34dc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    34e0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    34e2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 117b2 <setVariable>
    34e8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    34ec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 3502 <continueFunction+0xe64>
						default:
						break;
					}
				}
			} else {
				KPrintF((ERROR_NOSTACK));
    34ee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  \--|-----------|-> pea 142a5 <PutChar+0x785>
    34f4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   jsr 12f14 <KPrintF>
    34fa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   addq.l #4,sp
				return FALSE;
    34fc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   clr.w d0
    34fe:	|  +--|--|--|--|--|--|--|--|--|--|--|--|-----|-----------|-- bra.s 355a <continueFunction+0xebc>
						break;
    3500:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           \-> nop
			}
			break;
    3502:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-----\-------------X bra.s 3538 <continueFunction+0xe9a>

			default:
			KPrintF((ERROR_UNKNOWN_CODE));
    3504:	|  |  |  \--|--|--|--|--|--|--|--|--|--|-------------------> pea 142bd <PutChar+0x79d>
    350a:	|  |  |     |  |  |  |  |  |  |  |  |  |                     jsr 12f14 <KPrintF>
    3510:	|  |  |     |  |  |  |  |  |  |  |  |  |                     addq.l #4,sp
			return FALSE;
    3512:	|  |  |     |  |  |  |  |  |  |  |  |  |                     clr.w d0
    3514:	|  +--|-----|--|--|--|--|--|--|--|--|--|-------------------- bra.s 355a <continueFunction+0xebc>
			break;
    3516:	|  |  |     |  \--|--|--|--|--|--|--|--|-------------------> nop
    3518:	|  |  |     +-----|--|--|--|--|--|--|--|-------------------- bra.s 3538 <continueFunction+0xe9a>
			break;
    351a:	|  |  |     |     \--|--|--|--|--|--|--|-------------------> nop
    351c:	|  |  |     +--------|--|--|--|--|--|--|-------------------- bra.s 3538 <continueFunction+0xe9a>
			break;
    351e:	|  |  |     |        \--|--|--|--|--|--|-------------------> nop
    3520:	|  |  |     +-----------|--|--|--|--|--|-------------------- bra.s 3538 <continueFunction+0xe9a>
			break;
    3522:	|  |  |     |           \--|--|--|--|--|-------------------> nop
    3524:	|  |  |     +--------------|--|--|--|--|-------------------- bra.s 3538 <continueFunction+0xe9a>
			break;
    3526:	|  |  |     |              \--|--|--|--|-------------------> nop
    3528:	|  |  |     +-----------------|--|--|--|-------------------- bra.s 3538 <continueFunction+0xe9a>
			break;
    352a:	|  |  |     |                 \--|--|--|-------------------> nop
    352c:	|  |  |     +--------------------|--|--|-------------------- bra.s 3538 <continueFunction+0xe9a>
			break;
    352e:	|  |  |     |                    \--|--|-------------------> nop
    3530:	|  |  |     +-----------------------|--|-------------------- bra.s 3538 <continueFunction+0xe9a>
			break;
    3532:	|  |  |     |                       \--|-------------------> nop
    3534:	|  |  |     +--------------------------|-------------------- bra.s 3538 <continueFunction+0xe9a>
			break;
    3536:	|  |  |     |                          \-------------------> nop
		}

		if (advanceNow) fun -> runThisLine ++;
    3538:	|  |  |     \----------------------------------------------> tst.w 72(sp)
    353c:	+--|--|----------------------------------------------------- beq.s 3550 <continueFunction+0xeb2>
    353e:	|  |  |                                                      movea.l 80(sp),a0
    3542:	|  |  |                                                      move.l 36(a0),d0
    3546:	|  |  |                                                      addq.l #1,d0
    3548:	|  |  |                                                      movea.l 80(sp),a0
    354c:	|  |  |                                                      move.l d0,36(a0)
	while (keepLooping) {
    3550:	\--|--|----------------------------------------------------> tst.w 74(sp)
    3554:	   |  \----------------------------------------------------- bne.w 26c6 <continueFunction+0x28>

	}
	return TRUE;
    3558:	   |                                                         moveq #1,d0
}
    355a:	   \-------------------------------------------------------> lea 76(sp),sp
    355e:	                                                             rts

00003560 <finishFunction>:

void finishFunction (struct loadedFunction * fun) {
    3560:	       lea -16(sp),sp
    3564:	       move.l a6,-(sp)
	int a;

	pauseFunction (fun);
    3566:	       move.l 24(sp),-(sp)
    356a:	       jsr 43f8 <pauseFunction>
    3570:	       addq.l #4,sp
	if (fun -> stack) 
    3572:	       movea.l 24(sp),a0
    3576:	       move.l 24(a0),d0
    357a:	   /-- beq.s 3590 <finishFunction+0x30>
		KPrintF("finishfunction:", ERROR_NON_EMPTY_STACK);
    357c:	   |   pea 142e9 <PutChar+0x7c9>
    3582:	   |   pea 14316 <PutChar+0x7f6>
    3588:	   |   jsr 12f14 <KPrintF>
    358e:	   |   addq.l #8,sp
	FreeVec( fun -> compiledLines);
    3590:	   \-> movea.l 24(sp),a0
    3594:	       move.l 4(a0),12(sp)
    359a:	       move.l 19c5e <SysBase>,d0
    35a0:	       movea.l d0,a6
    35a2:	       movea.l 12(sp),a1
    35a6:	       jsr -690(a6)
	for (a = 0; a < fun -> numLocals; a ++) unlinkVar (&(fun -> localVars[a]));
    35aa:	       clr.l 16(sp)
    35ae:	   /-- bra.s 35ce <finishFunction+0x6e>
    35b0:	/--|-> movea.l 24(sp),a0
    35b4:	|  |   move.l 20(a0),d1
    35b8:	|  |   move.l 16(sp),d0
    35bc:	|  |   lsl.l #3,d0
    35be:	|  |   add.l d1,d0
    35c0:	|  |   move.l d0,-(sp)
    35c2:	|  |   jsr 1110e <unlinkVar>
    35c8:	|  |   addq.l #4,sp
    35ca:	|  |   addq.l #1,16(sp)
    35ce:	|  \-> movea.l 24(sp),a0
    35d2:	|      move.l 8(a0),d0
    35d6:	|      cmp.l 16(sp),d0
    35da:	\----- bgt.s 35b0 <finishFunction+0x50>
	if( fun->numLocals > 0) {
    35dc:	       movea.l 24(sp),a0
    35e0:	       move.l 8(a0),d0
    35e4:	   /-- ble.s 3600 <finishFunction+0xa0>
		FreeVec(fun -> localVars);
    35e6:	   |   movea.l 24(sp),a0
    35ea:	   |   move.l 20(a0),8(sp)
    35f0:	   |   move.l 19c5e <SysBase>,d0
    35f6:	   |   movea.l d0,a6
    35f8:	   |   movea.l 8(sp),a1
    35fc:	   |   jsr -690(a6)
	}
	unlinkVar (&fun -> reg);
    3600:	   \-> moveq #28,d0
    3602:	       add.l 24(sp),d0
    3606:	       move.l d0,-(sp)
    3608:	       jsr 1110e <unlinkVar>
    360e:	       addq.l #4,sp
	FreeVec(fun);
    3610:	       move.l 24(sp),4(sp)
    3616:	       move.l 19c5e <SysBase>,d0
    361c:	       movea.l d0,a6
    361e:	       movea.l 4(sp),a1
    3622:	       jsr -690(a6)
	fun = NULL;
    3626:	       clr.l 24(sp)
}
    362a:	       nop
    362c:	       movea.l (sp)+,a6
    362e:	       lea 16(sp),sp
    3632:	       rts

00003634 <handleInput>:

BOOL handleInput () {
	//Amiga Todo: Actually handle input
	return runSludge ();
    3634:	jsr 4454 <runSludge>
}
    363a:	rts

0000363c <initSludge>:

BOOL initSludge (char * filename) {
    363c:	             lea -296(sp),sp
    3640:	             movem.l d2-d4/a2/a6,-(sp)
	int a = 0;
    3644:	             clr.l 312(sp)
	mouseCursorAnim = makeNullAnim ();
    3648:	             jsr 7734 <makeNullAnim>
    364e:	             move.l d0,19b2c <mouseCursorAnim>

	//Amiga: Attention. This was changed to a Nonpointer Type
	BPTR fp = openAndVerify (filename, 'G', 'E', ERROR_BAD_HEADER, &gameVersion);
    3654:	             pea 19c0c <gameVersion>
    365a:	             pea 14326 <cursors.c.412ac4f3+0x6>
    3660:	             pea 45 <_start+0x45>
    3664:	             pea 47 <_start+0x47>
    3668:	             move.l 336(sp),-(sp)
    366c:	             jsr 4088 <openAndVerify>
    3672:	             lea 20(sp),sp
    3676:	             move.l d0,292(sp)
	if (! fp) return FALSE;
    367a:	         /-- bne.s 3682 <initSludge+0x46>
    367c:	         |   clr.w d0
    367e:	/--------|-- bra.w 3da8 <initSludge+0x76c>
	if (FGetC (fp)) {
    3682:	|        \-> move.l 292(sp),288(sp)
    3688:	|            move.l 19c66 <DOSBase>,d0
    368e:	|            movea.l d0,a6
    3690:	|            move.l 288(sp),d1
    3694:	|            jsr -306(a6)
    3698:	|            move.l d0,284(sp)
    369c:	|            move.l 284(sp),d0
    36a0:	|  /-------- beq.w 3846 <initSludge+0x20a>
		numBIFNames = get2bytes (fp);
    36a4:	|  |         move.l 292(sp),-(sp)
    36a8:	|  |         jsr 6bc <get2bytes>
    36ae:	|  |         addq.l #4,sp
    36b0:	|  |         move.l d0,19c32 <numBIFNames>
		allBIFNames = AllocVec(numBIFNames,MEMF_ANY);
    36b6:	|  |         move.l 19c32 <numBIFNames>,d0
    36bc:	|  |         move.l d0,280(sp)
    36c0:	|  |         clr.l 276(sp)
    36c4:	|  |         move.l 19c5e <SysBase>,d0
    36ca:	|  |         movea.l d0,a6
    36cc:	|  |         move.l 280(sp),d0
    36d0:	|  |         move.l 276(sp),d1
    36d4:	|  |         jsr -684(a6)
    36d8:	|  |         move.l d0,272(sp)
    36dc:	|  |         move.l 272(sp),d0
    36e0:	|  |         move.l d0,19bf2 <allBIFNames>
		if(allBIFNames == 0) return FALSE;
    36e6:	|  |         move.l 19bf2 <allBIFNames>,d0
    36ec:	|  |     /-- bne.s 36f4 <initSludge+0xb8>
    36ee:	|  |     |   clr.w d0
    36f0:	+--|-----|-- bra.w 3da8 <initSludge+0x76c>
		for (int fn = 0; fn < numBIFNames; fn ++) {
    36f4:	|  |     \-> clr.l 308(sp)
    36f8:	|  |     /-- bra.s 371e <initSludge+0xe2>
			allBIFNames[fn] = (char *) readString (fp);
    36fa:	|  |  /--|-> move.l 19bf2 <allBIFNames>,d1
    3700:	|  |  |  |   move.l 308(sp),d0
    3704:	|  |  |  |   add.l d0,d0
    3706:	|  |  |  |   add.l d0,d0
    3708:	|  |  |  |   movea.l d1,a2
    370a:	|  |  |  |   adda.l d0,a2
    370c:	|  |  |  |   move.l 292(sp),-(sp)
    3710:	|  |  |  |   jsr b02 <readString>
    3716:	|  |  |  |   addq.l #4,sp
    3718:	|  |  |  |   move.l d0,(a2)
		for (int fn = 0; fn < numBIFNames; fn ++) {
    371a:	|  |  |  |   addq.l #1,308(sp)
    371e:	|  |  |  \-> move.l 19c32 <numBIFNames>,d0
    3724:	|  |  |      cmp.l 308(sp),d0
    3728:	|  |  \----- bgt.s 36fa <initSludge+0xbe>
		}
		numUserFunc = get2bytes (fp);
    372a:	|  |         move.l 292(sp),-(sp)
    372e:	|  |         jsr 6bc <get2bytes>
    3734:	|  |         addq.l #4,sp
    3736:	|  |         move.l d0,19c3e <numUserFunc>
		allUserFunc = AllocVec(numUserFunc,MEMF_ANY);
    373c:	|  |         move.l 19c3e <numUserFunc>,d0
    3742:	|  |         move.l d0,268(sp)
    3746:	|  |         clr.l 264(sp)
    374a:	|  |         move.l 19c5e <SysBase>,d0
    3750:	|  |         movea.l d0,a6
    3752:	|  |         move.l 268(sp),d0
    3756:	|  |         move.l 264(sp),d1
    375a:	|  |         jsr -684(a6)
    375e:	|  |         move.l d0,260(sp)
    3762:	|  |         move.l 260(sp),d0
    3766:	|  |         move.l d0,19bfe <allUserFunc>
		if( allUserFunc == 0) return FALSE;
    376c:	|  |         move.l 19bfe <allUserFunc>,d0
    3772:	|  |     /-- bne.s 377a <initSludge+0x13e>
    3774:	|  |     |   clr.w d0
    3776:	+--|-----|-- bra.w 3da8 <initSludge+0x76c>

		for (int fn = 0; fn < numUserFunc; fn ++) {
    377a:	|  |     \-> clr.l 304(sp)
    377e:	|  |     /-- bra.s 37a4 <initSludge+0x168>
			allUserFunc[fn] =   (char *) readString (fp);
    3780:	|  |  /--|-> move.l 19bfe <allUserFunc>,d1
    3786:	|  |  |  |   move.l 304(sp),d0
    378a:	|  |  |  |   add.l d0,d0
    378c:	|  |  |  |   add.l d0,d0
    378e:	|  |  |  |   movea.l d1,a2
    3790:	|  |  |  |   adda.l d0,a2
    3792:	|  |  |  |   move.l 292(sp),-(sp)
    3796:	|  |  |  |   jsr b02 <readString>
    379c:	|  |  |  |   addq.l #4,sp
    379e:	|  |  |  |   move.l d0,(a2)
		for (int fn = 0; fn < numUserFunc; fn ++) {
    37a0:	|  |  |  |   addq.l #1,304(sp)
    37a4:	|  |  |  \-> move.l 19c3e <numUserFunc>,d0
    37aa:	|  |  |      cmp.l 304(sp),d0
    37ae:	|  |  \----- bgt.s 3780 <initSludge+0x144>
		}
		if (gameVersion >= VERSION(1,3)) {
    37b0:	|  |         move.l 19c0c <gameVersion>,d0
    37b6:	|  |         cmpi.l #258,d0
    37bc:	|  +-------- ble.w 3846 <initSludge+0x20a>
			numResourceNames = get2bytes (fp);
    37c0:	|  |         move.l 292(sp),-(sp)
    37c4:	|  |         jsr 6bc <get2bytes>
    37ca:	|  |         addq.l #4,sp
    37cc:	|  |         move.l d0,19c3a <numResourceNames>
			allResourceNames = AllocVec(numResourceNames,MEMF_ANY);
    37d2:	|  |         move.l 19c3a <numResourceNames>,d0
    37d8:	|  |         move.l d0,256(sp)
    37dc:	|  |         clr.l 252(sp)
    37e0:	|  |         move.l 19c5e <SysBase>,d0
    37e6:	|  |         movea.l d0,a6
    37e8:	|  |         move.l 256(sp),d0
    37ec:	|  |         move.l 252(sp),d1
    37f0:	|  |         jsr -684(a6)
    37f4:	|  |         move.l d0,248(sp)
    37f8:	|  |         move.l 248(sp),d0
    37fc:	|  |         move.l d0,19bf6 <allResourceNames>
			if(allResourceNames == 0) return FALSE;
    3802:	|  |         move.l 19bf6 <allResourceNames>,d0
    3808:	|  |     /-- bne.s 3810 <initSludge+0x1d4>
    380a:	|  |     |   clr.w d0
    380c:	+--|-----|-- bra.w 3da8 <initSludge+0x76c>

			for (int fn = 0; fn < numResourceNames; fn ++) {
    3810:	|  |     \-> clr.l 300(sp)
    3814:	|  |     /-- bra.s 383a <initSludge+0x1fe>
				allResourceNames[fn] =  (char *) readString (fp);
    3816:	|  |  /--|-> move.l 19bf6 <allResourceNames>,d1
    381c:	|  |  |  |   move.l 300(sp),d0
    3820:	|  |  |  |   add.l d0,d0
    3822:	|  |  |  |   add.l d0,d0
    3824:	|  |  |  |   movea.l d1,a2
    3826:	|  |  |  |   adda.l d0,a2
    3828:	|  |  |  |   move.l 292(sp),-(sp)
    382c:	|  |  |  |   jsr b02 <readString>
    3832:	|  |  |  |   addq.l #4,sp
    3834:	|  |  |  |   move.l d0,(a2)
			for (int fn = 0; fn < numResourceNames; fn ++) {
    3836:	|  |  |  |   addq.l #1,300(sp)
    383a:	|  |  |  \-> move.l 19c3a <numResourceNames>,d0
    3840:	|  |  |      cmp.l 300(sp),d0
    3844:	|  |  \----- bgt.s 3816 <initSludge+0x1da>
			}
		}
	}
	winWidth = get2bytes (fp);
    3846:	|  \-------> move.l 292(sp),-(sp)
    384a:	|            jsr 6bc <get2bytes>
    3850:	|            addq.l #4,sp
    3852:	|            move.l d0,19b5e <winWidth>
	winHeight = get2bytes (fp);
    3858:	|            move.l 292(sp),-(sp)
    385c:	|            jsr 6bc <get2bytes>
    3862:	|            addq.l #4,sp
    3864:	|            move.l d0,19b62 <winHeight>
	specialSettings = FGetC (fp);
    386a:	|            move.l 292(sp),244(sp)
    3870:	|            move.l 19c66 <DOSBase>,d0
    3876:	|            movea.l d0,a6
    3878:	|            move.l 244(sp),d1
    387c:	|            jsr -306(a6)
    3880:	|            move.l d0,240(sp)
    3884:	|            move.l 240(sp),d0
    3888:	|            move.l d0,19c42 <specialSettings>

	desiredfps = 1000/FGetC (fp);
    388e:	|            move.l 292(sp),236(sp)
    3894:	|            move.l 19c66 <DOSBase>,d0
    389a:	|            movea.l d0,a6
    389c:	|            move.l 236(sp),d1
    38a0:	|            jsr -306(a6)
    38a4:	|            move.l d0,232(sp)
    38a8:	|            move.l 232(sp),d0
    38ac:	|            move.l d0,-(sp)
    38ae:	|            pea 3e8 <encodeFilename+0xea>
    38b2:	|            jsr 13a88 <__divsi3>
    38b8:	|            addq.l #8,sp
    38ba:	|            move.l d0,1813a <desiredfps>

	FreeVec(readString (fp));
    38c0:	|            move.l 292(sp),-(sp)
    38c4:	|            jsr b02 <readString>
    38ca:	|            addq.l #4,sp
    38cc:	|            move.l d0,228(sp)
    38d0:	|            move.l 19c5e <SysBase>,d0
    38d6:	|            movea.l d0,a6
    38d8:	|            movea.l 228(sp),a1
    38dc:	|            jsr -690(a6)

	ULONG blocks_read = FRead( fp, &fileTime, sizeof (FILETIME), 1 ); 
    38e0:	|            move.l 292(sp),224(sp)
    38e6:	|            move.l #105476,220(sp)
    38ee:	|            moveq #8,d0
    38f0:	|            move.l d0,216(sp)
    38f4:	|            moveq #1,d1
    38f6:	|            move.l d1,212(sp)
    38fa:	|            move.l 19c66 <DOSBase>,d0
    3900:	|            movea.l d0,a6
    3902:	|            move.l 224(sp),d1
    3906:	|            move.l 220(sp),d2
    390a:	|            move.l 216(sp),d3
    390e:	|            move.l 212(sp),d4
    3912:	|            jsr -324(a6)
    3916:	|            move.l d0,208(sp)
    391a:	|            move.l 208(sp),d0
    391e:	|            move.l d0,204(sp)
	if (blocks_read != 1) {
    3922:	|            moveq #1,d0
    3924:	|            cmp.l 204(sp),d0
    3928:	|        /-- beq.s 3938 <initSludge+0x2fc>
		KPrintF("Reading error in initSludge.\n");
    392a:	|        |   pea 1435f <cursors.c.412ac4f3+0x3f>
    3930:	|        |   jsr 12f14 <KPrintF>
    3936:	|        |   addq.l #4,sp
	}

	char * dataFol = (gameVersion >= VERSION(1,3)) ? readString(fp) : joinStrings ("", "");
    3938:	|        \-> move.l 19c0c <gameVersion>,d0
    393e:	|            cmpi.l #258,d0
    3944:	|        /-- ble.s 3954 <initSludge+0x318>
    3946:	|        |   move.l 292(sp),-(sp)
    394a:	|        |   jsr b02 <readString>
    3950:	|        |   addq.l #4,sp
    3952:	|     /--|-- bra.s 3968 <initSludge+0x32c>
    3954:	|     |  \-> pea 1437d <cursors.c.412ac4f3+0x5d>
    395a:	|     |      pea 1437d <cursors.c.412ac4f3+0x5d>
    3960:	|     |      jsr 103ec <joinStrings>
    3966:	|     |      addq.l #8,sp
    3968:	|     \----> move.l d0,200(sp)

	gameSettings.numLanguages = (gameVersion >= VERSION(1,3)) ? (FGetC (fp)) : 0;
    396c:	|            move.l 19c0c <gameVersion>,d0
    3972:	|            cmpi.l #258,d0
    3978:	|     /----- ble.s 399a <initSludge+0x35e>
    397a:	|     |      move.l 292(sp),196(sp)
    3980:	|     |      move.l 19c66 <DOSBase>,d0
    3986:	|     |      movea.l d0,a6
    3988:	|     |      move.l 196(sp),d1
    398c:	|     |      jsr -306(a6)
    3990:	|     |      move.l d0,192(sp)
    3994:	|     |      move.l 192(sp),d0
    3998:	|     |  /-- bra.s 399c <initSludge+0x360>
    399a:	|     \--|-> moveq #0,d0
    399c:	|        \-> move.l d0,19d3e <gameSettings+0x4>
	makeLanguageTable (fp);
    39a2:	|            move.l 292(sp),-(sp)
    39a6:	|            jsr fdbe <makeLanguageTable>
    39ac:	|            addq.l #4,sp

	if (gameVersion >= VERSION(1,6))
    39ae:	|            move.l 19c0c <gameVersion>,d0
    39b4:	|            cmpi.l #261,d0
    39ba:	|        /-- ble.s 3a08 <initSludge+0x3cc>
	{
		FGetC(fp);
    39bc:	|        |   move.l 292(sp),188(sp)
    39c2:	|        |   move.l 19c66 <DOSBase>,d0
    39c8:	|        |   movea.l d0,a6
    39ca:	|        |   move.l 188(sp),d1
    39ce:	|        |   jsr -306(a6)
    39d2:	|        |   move.l d0,184(sp)
		// aaLoad
		FGetC (fp);
    39d6:	|        |   move.l 292(sp),180(sp)
    39dc:	|        |   move.l 19c66 <DOSBase>,d0
    39e2:	|        |   movea.l d0,a6
    39e4:	|        |   move.l 180(sp),d1
    39e8:	|        |   jsr -306(a6)
    39ec:	|        |   move.l d0,176(sp)
		getFloat (fp);
    39f0:	|        |   move.l 292(sp),-(sp)
    39f4:	|        |   jsr 7d8 <getFloat>
    39fa:	|        |   addq.l #4,sp
		getFloat (fp);
    39fc:	|        |   move.l 292(sp),-(sp)
    3a00:	|        |   jsr 7d8 <getFloat>
    3a06:	|        |   addq.l #4,sp
	}

	char * checker = readString (fp);
    3a08:	|        \-> move.l 292(sp),-(sp)
    3a0c:	|            jsr b02 <readString>
    3a12:	|            addq.l #4,sp
    3a14:	|            move.l d0,172(sp)

	if (strcmp (checker, "okSoFar")) {
    3a18:	|            pea 1437e <cursors.c.412ac4f3+0x5e>
    3a1e:	|            move.l 176(sp),-(sp)
    3a22:	|            jsr 1036c <strcmp>
    3a28:	|            addq.l #8,sp
    3a2a:	|            tst.l d0
    3a2c:	|        /-- beq.s 3a34 <initSludge+0x3f8>
		return FALSE;
    3a2e:	|        |   clr.w d0
    3a30:	+--------|-- bra.w 3da8 <initSludge+0x76c>
	}
	FreeVec( checker);
    3a34:	|        \-> move.l 172(sp),168(sp)
    3a3a:	|            move.l 19c5e <SysBase>,d0
    3a40:	|            movea.l d0,a6
    3a42:	|            movea.l 168(sp),a1
    3a46:	|            jsr -690(a6)
	checker = NULL;
    3a4a:	|            clr.l 172(sp)

    unsigned char customIconLogo = FGetC (fp);
    3a4e:	|            move.l 292(sp),164(sp)
    3a54:	|            move.l 19c66 <DOSBase>,d0
    3a5a:	|            movea.l d0,a6
    3a5c:	|            move.l 164(sp),d1
    3a60:	|            jsr -306(a6)
    3a64:	|            move.l d0,160(sp)
    3a68:	|            move.l 160(sp),d0
    3a6c:	|            move.b d0,159(sp)

	if (customIconLogo & 1) {
    3a70:	|            moveq #0,d0
    3a72:	|            move.b 159(sp),d0
    3a76:	|            moveq #1,d1
    3a78:	|            and.l d1,d0
    3a7a:	|        /-- beq.s 3ad2 <initSludge+0x496>
		// There is an icon - read it!
		Write(Output(), (APTR)"initsludge:Game Icon not supported on this plattform.\n", 54);
    3a7c:	|        |   move.l 19c66 <DOSBase>,d0
    3a82:	|        |   movea.l d0,a6
    3a84:	|        |   jsr -60(a6)
    3a88:	|        |   move.l d0,38(sp)
    3a8c:	|        |   move.l 38(sp),d0
    3a90:	|        |   move.l d0,34(sp)
    3a94:	|        |   move.l #82822,30(sp)
    3a9c:	|        |   moveq #54,d0
    3a9e:	|        |   move.l d0,26(sp)
    3aa2:	|        |   move.l 19c66 <DOSBase>,d0
    3aa8:	|        |   movea.l d0,a6
    3aaa:	|        |   move.l 34(sp),d1
    3aae:	|        |   move.l 30(sp),d2
    3ab2:	|        |   move.l 26(sp),d3
    3ab6:	|        |   jsr -48(a6)
    3aba:	|        |   move.l d0,22(sp)
		KPrintF("initsludge: Game Icon not supported on this plattform.\n");
    3abe:	|        |   pea 143bd <cursors.c.412ac4f3+0x9d>
    3ac4:	|        |   jsr 12f14 <KPrintF>
    3aca:	|        |   addq.l #4,sp
		return FALSE;
    3acc:	|        |   clr.w d0
    3ace:	+--------|-- bra.w 3da8 <initSludge+0x76c>
	}

	numGlobals = get2bytes (fp);
    3ad2:	|        \-> move.l 292(sp),-(sp)
    3ad6:	|            jsr 6bc <get2bytes>
    3adc:	|            addq.l #4,sp
    3ade:	|            move.l d0,19c36 <numGlobals>

	globalVars = AllocVec( sizeof(struct variable) * numGlobals,MEMF_ANY);
    3ae4:	|            move.l 19c36 <numGlobals>,d0
    3aea:	|            lsl.l #3,d0
    3aec:	|            move.l d0,154(sp)
    3af0:	|            clr.l 150(sp)
    3af4:	|            move.l 19c5e <SysBase>,d0
    3afa:	|            movea.l d0,a6
    3afc:	|            move.l 154(sp),d0
    3b00:	|            move.l 150(sp),d1
    3b04:	|            jsr -684(a6)
    3b08:	|            move.l d0,146(sp)
    3b0c:	|            move.l 146(sp),d0
    3b10:	|            move.l d0,19c10 <globalVars>
	if(globalVars == 0 && numGlobals > 0) {
    3b16:	|            move.l 19c10 <globalVars>,d0
    3b1c:	|        /-- bne.s 3b3a <initSludge+0x4fe>
    3b1e:	|        |   move.l 19c36 <numGlobals>,d0
    3b24:	|        +-- ble.s 3b3a <initSludge+0x4fe>
		KPrintF("initsludge: Cannot allocate memory for globalvars\n");
    3b26:	|        |   pea 143f5 <cursors.c.412ac4f3+0xd5>
    3b2c:	|        |   jsr 12f14 <KPrintF>
    3b32:	|        |   addq.l #4,sp
		return FALSE;
    3b34:	|        |   clr.w d0
    3b36:	+--------|-- bra.w 3da8 <initSludge+0x76c>
	}		 
	for (a = 0; a < numGlobals; a ++) initVarNew (globalVars[a]);
    3b3a:	|        \-> clr.l 312(sp)
    3b3e:	|        /-- bra.s 3b56 <initSludge+0x51a>
    3b40:	|     /--|-> move.l 19c10 <globalVars>,d1
    3b46:	|     |  |   move.l 312(sp),d0
    3b4a:	|     |  |   lsl.l #3,d0
    3b4c:	|     |  |   movea.l d1,a0
    3b4e:	|     |  |   adda.l d0,a0
    3b50:	|     |  |   clr.l (a0)
    3b52:	|     |  |   addq.l #1,312(sp)
    3b56:	|     |  \-> move.l 19c36 <numGlobals>,d0
    3b5c:	|     |      cmp.l 312(sp),d0
    3b60:	|     \----- bgt.s 3b40 <initSludge+0x504>

	setFileIndices (fp, gameSettings.numLanguages, 0);
    3b62:	|            move.l 19d3e <gameSettings+0x4>,d0
    3b68:	|            clr.l -(sp)
    3b6a:	|            move.l d0,-(sp)
    3b6c:	|            move.l 300(sp),-(sp)
    3b70:	|            jsr 4b22 <setFileIndices>
    3b76:	|            lea 12(sp),sp

	char * gameNameOrig = getNumberedString(1);	
    3b7a:	|            pea 1 <_start+0x1>
    3b7e:	|            jsr 47dc <getNumberedString>
    3b84:	|            addq.l #4,sp
    3b86:	|            move.l d0,142(sp)
	char * gameName = encodeFilename (gameNameOrig);
    3b8a:	|            move.l 142(sp),-(sp)
    3b8e:	|            jsr 2fe <encodeFilename>
    3b94:	|            addq.l #4,sp
    3b96:	|            move.l d0,138(sp)

	FreeVec(gameNameOrig);
    3b9a:	|            move.l 142(sp),134(sp)
    3ba0:	|            move.l 19c5e <SysBase>,d0
    3ba6:	|            movea.l d0,a6
    3ba8:	|            movea.l 134(sp),a1
    3bac:	|            jsr -690(a6)

	BPTR lock = CreateDir( gameName );
    3bb0:	|            move.l 138(sp),130(sp)
    3bb6:	|            move.l 19c66 <DOSBase>,d0
    3bbc:	|            movea.l d0,a6
    3bbe:	|            move.l 130(sp),d1
    3bc2:	|            jsr -120(a6)
    3bc6:	|            move.l d0,126(sp)
    3bca:	|            move.l 126(sp),d0
    3bce:	|            move.l d0,296(sp)
	if(lock == 0) {
    3bd2:	|        /-- bne.s 3c00 <initSludge+0x5c4>
		//Directory does already exist
		lock = Lock(gameName, ACCESS_READ);
    3bd4:	|        |   move.l 138(sp),122(sp)
    3bda:	|        |   moveq #-2,d1
    3bdc:	|        |   move.l d1,118(sp)
    3be0:	|        |   move.l 19c66 <DOSBase>,d0
    3be6:	|        |   movea.l d0,a6
    3be8:	|        |   move.l 122(sp),d1
    3bec:	|        |   move.l 118(sp),d2
    3bf0:	|        |   jsr -84(a6)
    3bf4:	|        |   move.l d0,114(sp)
    3bf8:	|        |   move.l 114(sp),d0
    3bfc:	|        |   move.l d0,296(sp)
	}

	if (!CurrentDir(lock)) {
    3c00:	|        \-> move.l 296(sp),110(sp)
    3c06:	|            move.l 19c66 <DOSBase>,d0
    3c0c:	|            movea.l d0,a6
    3c0e:	|            move.l 110(sp),d1
    3c12:	|            jsr -126(a6)
    3c16:	|            move.l d0,106(sp)
    3c1a:	|            move.l 106(sp),d0
    3c1e:	|        /-- bne.s 3c7a <initSludge+0x63e>
		KPrintF("initsludge: Failed changing to directory %s\n", gameName);
    3c20:	|        |   move.l 138(sp),-(sp)
    3c24:	|        |   pea 14428 <cursors.c.412ac4f3+0x108>
    3c2a:	|        |   jsr 12f14 <KPrintF>
    3c30:	|        |   addq.l #8,sp
		Write(Output(), (APTR)"initsludge:Failed changing to directory\n", 40);
    3c32:	|        |   move.l 19c66 <DOSBase>,d0
    3c38:	|        |   movea.l d0,a6
    3c3a:	|        |   jsr -60(a6)
    3c3e:	|        |   move.l d0,58(sp)
    3c42:	|        |   move.l 58(sp),d0
    3c46:	|        |   move.l d0,54(sp)
    3c4a:	|        |   move.l #83029,50(sp)
    3c52:	|        |   moveq #40,d0
    3c54:	|        |   move.l d0,46(sp)
    3c58:	|        |   move.l 19c66 <DOSBase>,d0
    3c5e:	|        |   movea.l d0,a6
    3c60:	|        |   move.l 54(sp),d1
    3c64:	|        |   move.l 50(sp),d2
    3c68:	|        |   move.l 46(sp),d3
    3c6c:	|        |   jsr -48(a6)
    3c70:	|        |   move.l d0,42(sp)
		return FALSE;
    3c74:	|        |   clr.w d0
    3c76:	+--------|-- bra.w 3da8 <initSludge+0x76c>
	}

	FreeVec(gameName);
    3c7a:	|        \-> move.l 138(sp),102(sp)
    3c80:	|            move.l 19c5e <SysBase>,d0
    3c86:	|            movea.l d0,a6
    3c88:	|            movea.l 102(sp),a1
    3c8c:	|            jsr -690(a6)

	readIniFile (filename);
    3c90:	|            move.l 320(sp),-(sp)
    3c94:	|            jsr fef2 <readIniFile>
    3c9a:	|            addq.l #4,sp

	// Now set file indices properly to the chosen language.
	languageNum = getLanguageForFileB ();
    3c9c:	|            jsr fcc4 <getLanguageForFileB>
    3ca2:	|            move.l d0,18120 <languageNum>
	if (languageNum < 0) KPrintF("Can't find the translation data specified!");
    3ca8:	|            move.l 18120 <languageNum>,d0
    3cae:	|        /-- bpl.s 3cbe <initSludge+0x682>
    3cb0:	|        |   pea 1447e <cursors.c.412ac4f3+0x15e>
    3cb6:	|        |   jsr 12f14 <KPrintF>
    3cbc:	|        |   addq.l #4,sp
	setFileIndices (NULL, gameSettings.numLanguages, languageNum);
    3cbe:	|        \-> move.l 18120 <languageNum>,d0
    3cc4:	|            move.l d0,d1
    3cc6:	|            move.l 19d3e <gameSettings+0x4>,d0
    3ccc:	|            move.l d1,-(sp)
    3cce:	|            move.l d0,-(sp)
    3cd0:	|            clr.l -(sp)
    3cd2:	|            jsr 4b22 <setFileIndices>
    3cd8:	|            lea 12(sp),sp

	if (dataFol[0]) {
    3cdc:	|            movea.l 200(sp),a0
    3ce0:	|            move.b (a0),d0
    3ce2:	|     /----- beq.w 3d8c <initSludge+0x750>
		char *dataFolder = encodeFilename(dataFol);
    3ce6:	|     |      move.l 200(sp),-(sp)
    3cea:	|     |      jsr 2fe <encodeFilename>
    3cf0:	|     |      addq.l #4,sp
    3cf2:	|     |      move.l d0,98(sp)
		lock = CreateDir( dataFolder );
    3cf6:	|     |      move.l 98(sp),94(sp)
    3cfc:	|     |      move.l 19c66 <DOSBase>,d0
    3d02:	|     |      movea.l d0,a6
    3d04:	|     |      move.l 94(sp),d1
    3d08:	|     |      jsr -120(a6)
    3d0c:	|     |      move.l d0,90(sp)
    3d10:	|     |      move.l 90(sp),d0
    3d14:	|     |      move.l d0,296(sp)
		if(lock == 0) {
    3d18:	|     |  /-- bne.s 3d46 <initSludge+0x70a>
			//Directory does already exist
			lock = Lock(dataFolder, ACCESS_READ);		
    3d1a:	|     |  |   move.l 98(sp),86(sp)
    3d20:	|     |  |   moveq #-2,d1
    3d22:	|     |  |   move.l d1,82(sp)
    3d26:	|     |  |   move.l 19c66 <DOSBase>,d0
    3d2c:	|     |  |   movea.l d0,a6
    3d2e:	|     |  |   move.l 86(sp),d1
    3d32:	|     |  |   move.l 82(sp),d2
    3d36:	|     |  |   jsr -84(a6)
    3d3a:	|     |  |   move.l d0,78(sp)
    3d3e:	|     |  |   move.l 78(sp),d0
    3d42:	|     |  |   move.l d0,296(sp)
		}


		if (!CurrentDir(lock)) {
    3d46:	|     |  \-> move.l 296(sp),74(sp)
    3d4c:	|     |      move.l 19c66 <DOSBase>,d0
    3d52:	|     |      movea.l d0,a6
    3d54:	|     |      move.l 74(sp),d1
    3d58:	|     |      jsr -126(a6)
    3d5c:	|     |      move.l d0,70(sp)
    3d60:	|     |      move.l 70(sp),d0
    3d64:	|     |  /-- bne.s 3d76 <initSludge+0x73a>
			(Output(), (APTR)"initsludge:This game's data folder is inaccessible!\n", 52);
    3d66:	|     |  |   move.l 19c66 <DOSBase>,d0
    3d6c:	|     |  |   movea.l d0,a6
    3d6e:	|     |  |   jsr -60(a6)
    3d72:	|     |  |   move.l d0,66(sp)
		}
		FreeVec(dataFolder);
    3d76:	|     |  \-> move.l 98(sp),62(sp)
    3d7c:	|     |      move.l 19c5e <SysBase>,d0
    3d82:	|     |      movea.l d0,a6
    3d84:	|     |      movea.l 62(sp),a1
    3d88:	|     |      jsr -690(a6)
	}

 	positionStatus (10, winHeight - 15);
    3d8c:	|     \----> movea.l 19b62 <winHeight>,a0
    3d92:	|            lea -15(a0),a0
    3d96:	|            move.l a0,d0
    3d98:	|            move.l d0,-(sp)
    3d9a:	|            pea a <_start+0xa>
    3d9e:	|            jsr 5534 <positionStatus>
    3da4:	|            addq.l #8,sp

	return TRUE;
    3da6:	|            moveq #1,d0
}
    3da8:	\----------> movem.l (sp)+,d2-d4/a2/a6
    3dac:	             lea 296(sp),sp
    3db0:	             rts

00003db2 <killSpeechTimers>:

void killSpeechTimers () {
    3db2:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    3db4:	          move.l 19bfa <allRunningFunctions>,(sp)

	while (thisFunction) {
    3dba:	   /----- bra.s 3de6 <killSpeechTimers+0x34>
		if (thisFunction -> freezerLevel == 0 && thisFunction -> isSpeech && thisFunction -> timeLeft) {
    3dbc:	/--|----> movea.l (sp),a0
    3dbe:	|  |      move.b 56(a0),d0
    3dc2:	|  |  /-- bne.s 3de0 <killSpeechTimers+0x2e>
    3dc4:	|  |  |   movea.l (sp),a0
    3dc6:	|  |  |   move.w 50(a0),d0
    3dca:	|  |  +-- beq.s 3de0 <killSpeechTimers+0x2e>
    3dcc:	|  |  |   movea.l (sp),a0
    3dce:	|  |  |   move.l 12(a0),d0
    3dd2:	|  |  +-- beq.s 3de0 <killSpeechTimers+0x2e>
			thisFunction -> timeLeft = 0;
    3dd4:	|  |  |   movea.l (sp),a0
    3dd6:	|  |  |   clr.l 12(a0)
			thisFunction -> isSpeech = FALSE;
    3dda:	|  |  |   movea.l (sp),a0
    3ddc:	|  |  |   clr.w 50(a0)
		}
		thisFunction = thisFunction -> next;
    3de0:	|  |  \-> movea.l (sp),a0
    3de2:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    3de6:	|  \----> tst.l (sp)
    3de8:	\-------- bne.s 3dbc <killSpeechTimers+0xa>
	}

	killAllSpeech ();
    3dea:	          jsr 5a72 <killAllSpeech>
}
    3df0:	          nop
    3df2:	          addq.l #4,sp
    3df4:	          rts

00003df6 <loadFunctionCode>:

BOOL loadFunctionCode (struct loadedFunction * newFunc) {
    3df6:	             lea -52(sp),sp
    3dfa:	             move.l a6,-(sp)
	unsigned int numLines, numLinesRead;
	int a;

	if (! openSubSlice (newFunc -> originalNumber)) return FALSE;
    3dfc:	             movea.l 60(sp),a0
    3e00:	             move.l (a0),d0
    3e02:	             move.l d0,-(sp)
    3e04:	             jsr 4a62 <openSubSlice>
    3e0a:	             addq.l #4,sp
    3e0c:	             tst.w d0
    3e0e:	         /-- bne.s 3e16 <loadFunctionCode+0x20>
    3e10:	         |   clr.w d0
    3e12:	/--------|-- bra.w 3fe0 <loadFunctionCode+0x1ea>
	

	newFunc-> unfreezable	= FGetC (bigDataFile);
    3e16:	|        \-> move.l 19c46 <bigDataFile>,44(sp)
    3e1e:	|            move.l 19c66 <DOSBase>,d0
    3e24:	|            movea.l d0,a6
    3e26:	|            move.l 44(sp),d1
    3e2a:	|            jsr -306(a6)
    3e2e:	|            move.l d0,40(sp)
    3e32:	|            move.l 40(sp),d0
    3e36:	|            move.l d0,d0
    3e38:	|            movea.l 60(sp),a0
    3e3c:	|            move.w d0,52(a0)
	numLines				= get2bytes (bigDataFile);
    3e40:	|            move.l 19c46 <bigDataFile>,d0
    3e46:	|            move.l d0,-(sp)
    3e48:	|            jsr 6bc <get2bytes>
    3e4e:	|            addq.l #4,sp
    3e50:	|            move.l d0,36(sp)
	newFunc -> numArgs		= get2bytes (bigDataFile);
    3e54:	|            move.l 19c46 <bigDataFile>,d0
    3e5a:	|            move.l d0,-(sp)
    3e5c:	|            jsr 6bc <get2bytes>
    3e62:	|            addq.l #4,sp
    3e64:	|            movea.l 60(sp),a0
    3e68:	|            move.l d0,16(a0)
	newFunc -> numLocals	= get2bytes (bigDataFile);
    3e6c:	|            move.l 19c46 <bigDataFile>,d0
    3e72:	|            move.l d0,-(sp)
    3e74:	|            jsr 6bc <get2bytes>
    3e7a:	|            addq.l #4,sp
    3e7c:	|            movea.l 60(sp),a0
    3e80:	|            move.l d0,8(a0)
	newFunc -> compiledLines = AllocVec( sizeof(struct lineOfCode) * numLines,MEMF_ANY);
    3e84:	|            move.l 36(sp),d0
    3e88:	|            lsl.l #3,d0
    3e8a:	|            move.l d0,32(sp)
    3e8e:	|            clr.l 28(sp)
    3e92:	|            move.l 19c5e <SysBase>,d0
    3e98:	|            movea.l d0,a6
    3e9a:	|            move.l 32(sp),d0
    3e9e:	|            move.l 28(sp),d1
    3ea2:	|            jsr -684(a6)
    3ea6:	|            move.l d0,24(sp)
    3eaa:	|            move.l 24(sp),d0
    3eae:	|            movea.l 60(sp),a0
    3eb2:	|            move.l d0,4(a0)
	if (! newFunc -> compiledLines) {
    3eb6:	|            movea.l 60(sp),a0
    3eba:	|            move.l 4(a0),d0
    3ebe:	|        /-- bne.s 3ed4 <loadFunctionCode+0xde>
		KPrintF("loadFunctionCode: cannot allocate memory");
    3ec0:	|        |   pea 144a9 <cursors.c.412ac4f3+0x189>
    3ec6:	|        |   jsr 12f14 <KPrintF>
    3ecc:	|        |   addq.l #4,sp
		return FALSE;
    3ece:	|        |   clr.w d0
    3ed0:	+--------|-- bra.w 3fe0 <loadFunctionCode+0x1ea>
	}

	for (numLinesRead = 0; numLinesRead < numLines; numLinesRead ++) {
    3ed4:	|        \-> clr.l 52(sp)
    3ed8:	|        /-- bra.s 3f3a <loadFunctionCode+0x144>
		newFunc -> compiledLines[numLinesRead].theCommand = (enum sludgeCommand) FGetC(bigDataFile);
    3eda:	|     /--|-> move.l 19c46 <bigDataFile>,8(sp)
    3ee2:	|     |  |   move.l 19c66 <DOSBase>,d0
    3ee8:	|     |  |   movea.l d0,a6
    3eea:	|     |  |   move.l 8(sp),d1
    3eee:	|     |  |   jsr -306(a6)
    3ef2:	|     |  |   move.l d0,4(sp)
    3ef6:	|     |  |   move.l 4(sp),d1
    3efa:	|     |  |   movea.l 60(sp),a0
    3efe:	|     |  |   movea.l 4(a0),a0
    3f02:	|     |  |   move.l 52(sp),d0
    3f06:	|     |  |   lsl.l #3,d0
    3f08:	|     |  |   adda.l d0,a0
    3f0a:	|     |  |   move.l d1,d0
    3f0c:	|     |  |   move.l d0,(a0)
		newFunc -> compiledLines[numLinesRead].param = get2bytes (bigDataFile);
    3f0e:	|     |  |   move.l 19c46 <bigDataFile>,d0
    3f14:	|     |  |   move.l d0,-(sp)
    3f16:	|     |  |   jsr 6bc <get2bytes>
    3f1c:	|     |  |   addq.l #4,sp
    3f1e:	|     |  |   move.l d0,d1
    3f20:	|     |  |   movea.l 60(sp),a0
    3f24:	|     |  |   movea.l 4(a0),a0
    3f28:	|     |  |   move.l 52(sp),d0
    3f2c:	|     |  |   lsl.l #3,d0
    3f2e:	|     |  |   adda.l d0,a0
    3f30:	|     |  |   move.l d1,d0
    3f32:	|     |  |   move.l d0,4(a0)
	for (numLinesRead = 0; numLinesRead < numLines; numLinesRead ++) {
    3f36:	|     |  |   addq.l #1,52(sp)
    3f3a:	|     |  \-> move.l 52(sp),d0
    3f3e:	|     |      cmp.l 36(sp),d0
    3f42:	|     \----- bcs.s 3eda <loadFunctionCode+0xe4>
	}

	finishAccess ();
    3f44:	|            jsr 47d2 <finishAccess>

	// Now we need to reserve memory for the local variables
	if(newFunc->numLocals > 0) {
    3f4a:	|            movea.l 60(sp),a0
    3f4e:	|            move.l 8(a0),d0
    3f52:	|  /-------- ble.w 3fd6 <loadFunctionCode+0x1e0>
		newFunc -> localVars = AllocVec( sizeof(struct variable) * newFunc->numLocals,MEMF_ANY);
    3f56:	|  |         movea.l 60(sp),a0
    3f5a:	|  |         move.l 8(a0),d0
    3f5e:	|  |         lsl.l #3,d0
    3f60:	|  |         move.l d0,20(sp)
    3f64:	|  |         clr.l 16(sp)
    3f68:	|  |         move.l 19c5e <SysBase>,d0
    3f6e:	|  |         movea.l d0,a6
    3f70:	|  |         move.l 20(sp),d0
    3f74:	|  |         move.l 16(sp),d1
    3f78:	|  |         jsr -684(a6)
    3f7c:	|  |         move.l d0,12(sp)
    3f80:	|  |         move.l 12(sp),d0
    3f84:	|  |         movea.l 60(sp),a0
    3f88:	|  |         move.l d0,20(a0)
		if (!newFunc -> localVars) {
    3f8c:	|  |         movea.l 60(sp),a0
    3f90:	|  |         move.l 20(a0),d0
    3f94:	|  |     /-- bne.s 3fa8 <loadFunctionCode+0x1b2>
			KPrintF("loadFunctionCode: cannot allocate memory");
    3f96:	|  |     |   pea 144a9 <cursors.c.412ac4f3+0x189>
    3f9c:	|  |     |   jsr 12f14 <KPrintF>
    3fa2:	|  |     |   addq.l #4,sp
			return FALSE;
    3fa4:	|  |     |   clr.w d0
    3fa6:	+--|-----|-- bra.s 3fe0 <loadFunctionCode+0x1ea>
		}

		for (a = 0; a < newFunc -> numLocals; a ++) {
    3fa8:	|  |     \-> clr.l 48(sp)
    3fac:	|  |     /-- bra.s 3fc6 <loadFunctionCode+0x1d0>
			initVarNew (newFunc -> localVars[a]);
    3fae:	|  |  /--|-> movea.l 60(sp),a0
    3fb2:	|  |  |  |   move.l 20(a0),d1
    3fb6:	|  |  |  |   move.l 48(sp),d0
    3fba:	|  |  |  |   lsl.l #3,d0
    3fbc:	|  |  |  |   movea.l d1,a0
    3fbe:	|  |  |  |   adda.l d0,a0
    3fc0:	|  |  |  |   clr.l (a0)
		for (a = 0; a < newFunc -> numLocals; a ++) {
    3fc2:	|  |  |  |   addq.l #1,48(sp)
    3fc6:	|  |  |  \-> movea.l 60(sp),a0
    3fca:	|  |  |      move.l 8(a0),d0
    3fce:	|  |  |      cmp.l 48(sp),d0
    3fd2:	|  |  \----- bgt.s 3fae <loadFunctionCode+0x1b8>
    3fd4:	|  |     /-- bra.s 3fde <loadFunctionCode+0x1e8>
		}
	} else
	{
		newFunc->numLocals = NULL;
    3fd6:	|  \-----|-> movea.l 60(sp),a0
    3fda:	|        |   clr.l 8(a0)
	}
	return TRUE;
    3fde:	|        \-> moveq #1,d0
}
    3fe0:	\----------> movea.l (sp)+,a6
    3fe2:	             lea 52(sp),sp
    3fe6:	             rts

00003fe8 <loadHandlers>:

void loadHandlers (BPTR fp) {
    3fe8:	move.l a2,-(sp)
	currentEvents -> leftMouseFunction		= get2bytes (fp);
    3fea:	movea.l 1811c <currentEvents>,a2
    3ff0:	move.l 8(sp),-(sp)
    3ff4:	jsr 6bc <get2bytes>
    3ffa:	addq.l #4,sp
    3ffc:	move.l d0,(a2)
	currentEvents -> leftMouseUpFunction	= get2bytes (fp);
    3ffe:	movea.l 1811c <currentEvents>,a2
    4004:	move.l 8(sp),-(sp)
    4008:	jsr 6bc <get2bytes>
    400e:	addq.l #4,sp
    4010:	move.l d0,4(a2)
	currentEvents -> rightMouseFunction		= get2bytes (fp);
    4014:	movea.l 1811c <currentEvents>,a2
    401a:	move.l 8(sp),-(sp)
    401e:	jsr 6bc <get2bytes>
    4024:	addq.l #4,sp
    4026:	move.l d0,8(a2)
	currentEvents -> rightMouseUpFunction	= get2bytes (fp);
    402a:	movea.l 1811c <currentEvents>,a2
    4030:	move.l 8(sp),-(sp)
    4034:	jsr 6bc <get2bytes>
    403a:	addq.l #4,sp
    403c:	move.l d0,12(a2)
	currentEvents -> moveMouseFunction		= get2bytes (fp);
    4040:	movea.l 1811c <currentEvents>,a2
    4046:	move.l 8(sp),-(sp)
    404a:	jsr 6bc <get2bytes>
    4050:	addq.l #4,sp
    4052:	move.l d0,16(a2)
	currentEvents -> focusFunction			= get2bytes (fp);
    4056:	movea.l 1811c <currentEvents>,a2
    405c:	move.l 8(sp),-(sp)
    4060:	jsr 6bc <get2bytes>
    4066:	addq.l #4,sp
    4068:	move.l d0,20(a2)
	currentEvents -> spaceFunction			= get2bytes (fp);
    406c:	movea.l 1811c <currentEvents>,a2
    4072:	move.l 8(sp),-(sp)
    4076:	jsr 6bc <get2bytes>
    407c:	addq.l #4,sp
    407e:	move.l d0,24(a2)
}
    4082:	nop
    4084:	movea.l (sp)+,a2
    4086:	rts

00004088 <openAndVerify>:

BPTR openAndVerify (char * filename, char extra1, char extra2, const char * er, int *fileVersion) {
    4088:	       lea -312(sp),sp
    408c:	       movem.l d2-d3/a6,-(sp)
    4090:	       move.l 332(sp),d1
    4094:	       move.l 336(sp),d0
    4098:	       move.b d1,d1
    409a:	       move.b d1,16(sp)
    409e:	       move.b d0,d0
    40a0:	       move.b d0,14(sp)
	BPTR fp = Open(filename,MODE_OLDFILE);
    40a4:	       move.l 328(sp),318(sp)
    40aa:	       move.l #1005,314(sp)
    40b2:	       move.l 19c66 <DOSBase>,d0
    40b8:	       movea.l d0,a6
    40ba:	       move.l 318(sp),d1
    40be:	       move.l 314(sp),d2
    40c2:	       jsr -30(a6)
    40c6:	       move.l d0,310(sp)
    40ca:	       move.l 310(sp),d0
    40ce:	       move.l d0,306(sp)

	if (! fp) {
    40d2:	   /-- bne.s 412e <openAndVerify+0xa6>
		Write(Output(), (APTR)"openAndVerify: Can't open file\n", 31);
    40d4:	   |   move.l 19c66 <DOSBase>,d0
    40da:	   |   movea.l d0,a6
    40dc:	   |   jsr -60(a6)
    40e0:	   |   move.l d0,154(sp)
    40e4:	   |   move.l 154(sp),d0
    40e8:	   |   move.l d0,150(sp)
    40ec:	   |   move.l #83154,146(sp)
    40f4:	   |   moveq #31,d0
    40f6:	   |   move.l d0,142(sp)
    40fa:	   |   move.l 19c66 <DOSBase>,d0
    4100:	   |   movea.l d0,a6
    4102:	   |   move.l 150(sp),d1
    4106:	   |   move.l 146(sp),d2
    410a:	   |   move.l 142(sp),d3
    410e:	   |   jsr -48(a6)
    4112:	   |   move.l d0,138(sp)
		KPrintF("openAndVerify: Can't open file", filename);
    4116:	   |   move.l 328(sp),-(sp)
    411a:	   |   pea 144f2 <cursors.c.412ac4f3+0x1d2>
    4120:	   |   jsr 12f14 <KPrintF>
    4126:	   |   addq.l #8,sp
		return NULL;
    4128:	   |   moveq #0,d0
    412a:	/--|-- bra.w 43ee <openAndVerify+0x366>
	}
	BOOL headerBad = FALSE;
    412e:	|  \-> clr.w 322(sp)
	if (FGetC (fp) != 'S') headerBad = TRUE;
    4132:	|      move.l 306(sp),302(sp)
    4138:	|      move.l 19c66 <DOSBase>,d0
    413e:	|      movea.l d0,a6
    4140:	|      move.l 302(sp),d1
    4144:	|      jsr -306(a6)
    4148:	|      move.l d0,298(sp)
    414c:	|      move.l 298(sp),d0
    4150:	|      moveq #83,d1
    4152:	|      cmp.l d0,d1
    4154:	|  /-- beq.s 415c <openAndVerify+0xd4>
    4156:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'L') headerBad = TRUE;
    415c:	|  \-> move.l 306(sp),294(sp)
    4162:	|      move.l 19c66 <DOSBase>,d0
    4168:	|      movea.l d0,a6
    416a:	|      move.l 294(sp),d1
    416e:	|      jsr -306(a6)
    4172:	|      move.l d0,290(sp)
    4176:	|      move.l 290(sp),d0
    417a:	|      moveq #76,d1
    417c:	|      cmp.l d0,d1
    417e:	|  /-- beq.s 4186 <openAndVerify+0xfe>
    4180:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'U') headerBad = TRUE;
    4186:	|  \-> move.l 306(sp),286(sp)
    418c:	|      move.l 19c66 <DOSBase>,d0
    4192:	|      movea.l d0,a6
    4194:	|      move.l 286(sp),d1
    4198:	|      jsr -306(a6)
    419c:	|      move.l d0,282(sp)
    41a0:	|      move.l 282(sp),d0
    41a4:	|      moveq #85,d1
    41a6:	|      cmp.l d0,d1
    41a8:	|  /-- beq.s 41b0 <openAndVerify+0x128>
    41aa:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'D') headerBad = TRUE;
    41b0:	|  \-> move.l 306(sp),278(sp)
    41b6:	|      move.l 19c66 <DOSBase>,d0
    41bc:	|      movea.l d0,a6
    41be:	|      move.l 278(sp),d1
    41c2:	|      jsr -306(a6)
    41c6:	|      move.l d0,274(sp)
    41ca:	|      move.l 274(sp),d0
    41ce:	|      moveq #68,d1
    41d0:	|      cmp.l d0,d1
    41d2:	|  /-- beq.s 41da <openAndVerify+0x152>
    41d4:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != extra1) headerBad = TRUE;
    41da:	|  \-> move.l 306(sp),270(sp)
    41e0:	|      move.l 19c66 <DOSBase>,d0
    41e6:	|      movea.l d0,a6
    41e8:	|      move.l 270(sp),d1
    41ec:	|      jsr -306(a6)
    41f0:	|      move.l d0,266(sp)
    41f4:	|      move.l 266(sp),d1
    41f8:	|      move.b 16(sp),d0
    41fc:	|      ext.w d0
    41fe:	|      movea.w d0,a0
    4200:	|      cmpa.l d1,a0
    4202:	|  /-- beq.s 420a <openAndVerify+0x182>
    4204:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != extra2) headerBad = TRUE;
    420a:	|  \-> move.l 306(sp),262(sp)
    4210:	|      move.l 19c66 <DOSBase>,d0
    4216:	|      movea.l d0,a6
    4218:	|      move.l 262(sp),d1
    421c:	|      jsr -306(a6)
    4220:	|      move.l d0,258(sp)
    4224:	|      move.l 258(sp),d1
    4228:	|      move.b 14(sp),d0
    422c:	|      ext.w d0
    422e:	|      movea.w d0,a0
    4230:	|      cmpa.l d1,a0
    4232:	|  /-- beq.s 423a <openAndVerify+0x1b2>
    4234:	|  |   move.w #1,322(sp)
	if (headerBad) {
    423a:	|  \-> tst.w 322(sp)
    423e:	|  /-- beq.s 4296 <openAndVerify+0x20e>
		Write(Output(), (APTR)"openAndVerify: Bad Header\n", 31);
    4240:	|  |   move.l 19c66 <DOSBase>,d0
    4246:	|  |   movea.l d0,a6
    4248:	|  |   jsr -60(a6)
    424c:	|  |   move.l d0,174(sp)
    4250:	|  |   move.l 174(sp),d0
    4254:	|  |   move.l d0,170(sp)
    4258:	|  |   move.l #83217,166(sp)
    4260:	|  |   moveq #31,d0
    4262:	|  |   move.l d0,162(sp)
    4266:	|  |   move.l 19c66 <DOSBase>,d0
    426c:	|  |   movea.l d0,a6
    426e:	|  |   move.l 170(sp),d1
    4272:	|  |   move.l 166(sp),d2
    4276:	|  |   move.l 162(sp),d3
    427a:	|  |   jsr -48(a6)
    427e:	|  |   move.l d0,158(sp)
		KPrintF("openAndVerify: Bad Header\n");
    4282:	|  |   pea 14511 <cursors.c.412ac4f3+0x1f1>
    4288:	|  |   jsr 12f14 <KPrintF>
    428e:	|  |   addq.l #4,sp
		return NULL;
    4290:	|  |   moveq #0,d0
    4292:	+--|-- bra.w 43ee <openAndVerify+0x366>
	}
	FGetC (fp);
    4296:	|  \-> move.l 306(sp),254(sp)
    429c:	|      move.l 19c66 <DOSBase>,d0
    42a2:	|      movea.l d0,a6
    42a4:	|      move.l 254(sp),d1
    42a8:	|      jsr -306(a6)
    42ac:	|      move.l d0,250(sp)
	while (FGetC(fp)) {;}
    42b0:	|      nop
    42b2:	|  /-> move.l 306(sp),246(sp)
    42b8:	|  |   move.l 19c66 <DOSBase>,d0
    42be:	|  |   movea.l d0,a6
    42c0:	|  |   move.l 246(sp),d1
    42c4:	|  |   jsr -306(a6)
    42c8:	|  |   move.l d0,242(sp)
    42cc:	|  |   move.l 242(sp),d0
    42d0:	|  \-- bne.s 42b2 <openAndVerify+0x22a>

	int majVersion = FGetC (fp);
    42d2:	|      move.l 306(sp),238(sp)
    42d8:	|      move.l 19c66 <DOSBase>,d0
    42de:	|      movea.l d0,a6
    42e0:	|      move.l 238(sp),d1
    42e4:	|      jsr -306(a6)
    42e8:	|      move.l d0,234(sp)
    42ec:	|      move.l 234(sp),d0
    42f0:	|      move.l d0,230(sp)
	int minVersion = FGetC (fp);
    42f4:	|      move.l 306(sp),226(sp)
    42fa:	|      move.l 19c66 <DOSBase>,d0
    4300:	|      movea.l d0,a6
    4302:	|      move.l 226(sp),d1
    4306:	|      jsr -306(a6)
    430a:	|      move.l d0,222(sp)
    430e:	|      move.l 222(sp),d0
    4312:	|      move.l d0,218(sp)
	*fileVersion = majVersion * 256 + minVersion;
    4316:	|      move.l 230(sp),d0
    431a:	|      lsl.l #8,d0
    431c:	|      add.l 218(sp),d0
    4320:	|      movea.l 344(sp),a0
    4324:	|      move.l d0,(a0)

	char txtVer[120];

	if (*fileVersion > WHOLE_VERSION) {
    4326:	|      movea.l 344(sp),a0
    432a:	|      move.l (a0),d0
    432c:	|      cmpi.l #514,d0
    4332:	|  /-- ble.s 4388 <openAndVerify+0x300>
		//sprintf (txtVer, ERROR_VERSION_TOO_LOW_2, majVersion, minVersion);
		Write(Output(), (APTR)ERROR_VERSION_TOO_LOW_1, 100);
    4334:	|  |   move.l 19c66 <DOSBase>,d0
    433a:	|  |   movea.l d0,a6
    433c:	|  |   jsr -60(a6)
    4340:	|  |   move.l d0,194(sp)
    4344:	|  |   move.l 194(sp),d0
    4348:	|  |   move.l d0,190(sp)
    434c:	|  |   move.l #83244,186(sp)
    4354:	|  |   moveq #100,d1
    4356:	|  |   move.l d1,182(sp)
    435a:	|  |   move.l 19c66 <DOSBase>,d0
    4360:	|  |   movea.l d0,a6
    4362:	|  |   move.l 190(sp),d1
    4366:	|  |   move.l 186(sp),d2
    436a:	|  |   move.l 182(sp),d3
    436e:	|  |   jsr -48(a6)
    4372:	|  |   move.l d0,178(sp)
		KPrintF(ERROR_VERSION_TOO_LOW_1);
    4376:	|  |   pea 1452c <cursors.c.412ac4f3+0x20c>
    437c:	|  |   jsr 12f14 <KPrintF>
    4382:	|  |   addq.l #4,sp
		return NULL;
    4384:	|  |   moveq #0,d0
    4386:	+--|-- bra.s 43ee <openAndVerify+0x366>
	} else if (*fileVersion < MINIM_VERSION) {
    4388:	|  \-> movea.l 344(sp),a0
    438c:	|      move.l (a0),d0
    438e:	|      cmpi.l #257,d0
    4394:	|  /-- bgt.s 43ea <openAndVerify+0x362>
		Write(Output(), (APTR)ERROR_VERSION_TOO_HIGH_1, 100);
    4396:	|  |   move.l 19c66 <DOSBase>,d0
    439c:	|  |   movea.l d0,a6
    439e:	|  |   jsr -60(a6)
    43a2:	|  |   move.l d0,214(sp)
    43a6:	|  |   move.l 214(sp),d0
    43aa:	|  |   move.l d0,210(sp)
    43ae:	|  |   move.l #83313,206(sp)
    43b6:	|  |   moveq #100,d0
    43b8:	|  |   move.l d0,202(sp)
    43bc:	|  |   move.l 19c66 <DOSBase>,d0
    43c2:	|  |   movea.l d0,a6
    43c4:	|  |   move.l 210(sp),d1
    43c8:	|  |   move.l 206(sp),d2
    43cc:	|  |   move.l 202(sp),d3
    43d0:	|  |   jsr -48(a6)
    43d4:	|  |   move.l d0,198(sp)
		KPrintF(ERROR_VERSION_TOO_HIGH_1);
    43d8:	|  |   pea 14571 <cursors.c.412ac4f3+0x251>
    43de:	|  |   jsr 12f14 <KPrintF>
    43e4:	|  |   addq.l #4,sp
		return NULL;
    43e6:	|  |   moveq #0,d0
    43e8:	+--|-- bra.s 43ee <openAndVerify+0x366>
	}
	return fp;
    43ea:	|  \-> move.l 306(sp),d0
}
    43ee:	\----> movem.l (sp)+,d2-d3/a6
    43f2:	       lea 312(sp),sp
    43f6:	       rts

000043f8 <pauseFunction>:

void pauseFunction (struct loadedFunction * fun) {
    43f8:	          subq.l #4,sp
	struct loadedFunction * * huntAndDestroy = & allRunningFunctions;
    43fa:	          move.l #105466,(sp)
	while (* huntAndDestroy) {
    4400:	   /----- bra.s 442c <pauseFunction+0x34>
		if (fun == * huntAndDestroy) {
    4402:	/--|----> movea.l (sp),a0
    4404:	|  |      move.l (a0),d0
    4406:	|  |      cmp.l 8(sp),d0
    440a:	|  |  /-- bne.s 4422 <pauseFunction+0x2a>
			(* huntAndDestroy) = (* huntAndDestroy) -> next;
    440c:	|  |  |   movea.l (sp),a0
    440e:	|  |  |   movea.l (a0),a0
    4410:	|  |  |   move.l 44(a0),d0
    4414:	|  |  |   movea.l (sp),a0
    4416:	|  |  |   move.l d0,(a0)
			fun->next = NULL;
    4418:	|  |  |   movea.l 8(sp),a0
    441c:	|  |  |   clr.l 44(a0)
    4420:	|  +--|-- bra.s 442c <pauseFunction+0x34>
		} else {
			huntAndDestroy = & (* huntAndDestroy) -> next;
    4422:	|  |  \-> movea.l (sp),a0
    4424:	|  |      move.l (a0),d0
    4426:	|  |      moveq #44,d1
    4428:	|  |      add.l d0,d1
    442a:	|  |      move.l d1,(sp)
	while (* huntAndDestroy) {
    442c:	|  \----> movea.l (sp),a0
    442e:	|         move.l (a0),d0
    4430:	\-------- bne.s 4402 <pauseFunction+0xa>
		}
	}
}
    4432:	          nop
    4434:	          nop
    4436:	          addq.l #4,sp
    4438:	          rts

0000443a <restartFunction>:

void restartFunction (struct loadedFunction * fun) {
	fun -> next = allRunningFunctions;
    443a:	move.l 19bfa <allRunningFunctions>,d0
    4440:	movea.l 4(sp),a0
    4444:	move.l d0,44(a0)
	allRunningFunctions = fun;
    4448:	move.l 4(sp),19bfa <allRunningFunctions>
}
    4450:	nop
    4452:	rts

00004454 <runSludge>:

BOOL runSludge () {
    4454:	                   lea -12(sp),sp
    4458:	                   move.l a6,-(sp)
	
	struct loadedFunction * thisFunction = allRunningFunctions;
    445a:	                   move.l 19bfa <allRunningFunctions>,12(sp)
	struct loadedFunction * nextFunction;

	while (thisFunction) {
    4462:	      /----------- bra.s 44de <runSludge+0x8a>
		nextFunction = thisFunction -> next;
    4464:	   /--|----------> movea.l 12(sp),a0
    4468:	   |  |            move.l 44(a0),4(sp)

		if (! thisFunction -> freezerLevel) {
    446e:	   |  |            movea.l 12(sp),a0
    4472:	   |  |            move.b 56(a0),d0
    4476:	   |  |  /-------- bne.s 44d8 <runSludge+0x84>
			if (thisFunction -> timeLeft) {
    4478:	   |  |  |         movea.l 12(sp),a0
    447c:	   |  |  |         move.l 12(a0),d0
    4480:	   |  |  |  /----- beq.s 44aa <runSludge+0x56>
				if (thisFunction -> timeLeft < 0) {				
    4482:	   |  |  |  |      movea.l 12(sp),a0
    4486:	   |  |  |  |      move.l 12(a0),d0
    448a:	   |  |  |  |  /-- bpl.s 4496 <runSludge+0x42>
					thisFunction -> timeLeft = 0;
    448c:	   |  |  |  |  |   movea.l 12(sp),a0
    4490:	   |  |  |  |  |   clr.l 12(a0)
    4494:	   |  |  +--|--|-- bra.s 44d8 <runSludge+0x84>
				} else if (! -- (thisFunction -> timeLeft)) {
    4496:	   |  |  |  |  \-> movea.l 12(sp),a0
    449a:	   |  |  |  |      move.l 12(a0),d0
    449e:	   |  |  |  |      subq.l #1,d0
    44a0:	   |  |  |  |      movea.l 12(sp),a0
    44a4:	   |  |  |  |      move.l d0,12(a0)
    44a8:	   |  |  +--|----- bra.s 44d8 <runSludge+0x84>
				}
			} else {
				if (thisFunction -> isSpeech) {
    44aa:	   |  |  |  \----> movea.l 12(sp),a0
    44ae:	   |  |  |         move.w 50(a0),d0
    44b2:	   |  |  |     /-- beq.s 44c2 <runSludge+0x6e>
					thisFunction -> isSpeech = FALSE;
    44b4:	   |  |  |     |   movea.l 12(sp),a0
    44b8:	   |  |  |     |   clr.w 50(a0)
					killAllSpeech ();
    44bc:	   |  |  |     |   jsr 5a72 <killAllSpeech>
				}
				if (! continueFunction (thisFunction))
    44c2:	   |  |  |     \-> move.l 12(sp),-(sp)
    44c6:	   |  |  |         jsr 269e <continueFunction>
    44cc:	   |  |  |         addq.l #4,sp
    44ce:	   |  |  |         tst.w d0
    44d0:	   |  |  +-------- bne.s 44d8 <runSludge+0x84>
					return FALSE;
    44d2:	   |  |  |         clr.w d0
    44d4:	/--|--|--|-------- bra.w 4564 <runSludge+0x110>
			}
		}

		thisFunction = nextFunction;
    44d8:	|  |  |  \-------> move.l 4(sp),12(sp)
	while (thisFunction) {
    44de:	|  |  \----------> tst.l 12(sp)
    44e2:	|  \-------------- bne.s 4464 <runSludge+0x10>
	}

	if (loadNow) {
    44e4:	|                  move.l 19c2a <loadNow>,d0
    44ea:	|        /-------- beq.s 4562 <runSludge+0x10e>
		if (loadNow[0] == ':') {
    44ec:	|        |         movea.l 19c2a <loadNow>,a0
    44f2:	|        |         move.b (a0),d0
    44f4:	|        |         cmpi.b #58,d0
    44f8:	|        |  /----- bne.s 452c <runSludge+0xd8>
			saveGame (loadNow + 1);
    44fa:	|        |  |      move.l 19c2a <loadNow>,d0
    4500:	|        |  |      addq.l #1,d0
    4502:	|        |  |      move.l d0,-(sp)
    4504:	|        |  |      jsr 90ba <saveGame>
    450a:	|        |  |      addq.l #4,sp
			setVariable (&saverFunc->reg, SVT_INT, 1);
    450c:	|        |  |      movea.l 19d28 <saverFunc>,a0
    4512:	|        |  |      lea 28(a0),a0
    4516:	|        |  |      pea 1 <_start+0x1>
    451a:	|        |  |      pea 1 <_start+0x1>
    451e:	|        |  |      move.l a0,-(sp)
    4520:	|        |  |      jsr 117b2 <setVariable>
    4526:	|        |  |      lea 12(sp),sp
    452a:	|        |  |  /-- bra.s 4544 <runSludge+0xf0>
		} else {
			if (! loadGame (loadNow)) return FALSE;
    452c:	|        |  \--|-> move.l 19c2a <loadNow>,d0
    4532:	|        |     |   move.l d0,-(sp)
    4534:	|        |     |   jsr 8c02 <loadGame>
    453a:	|        |     |   addq.l #4,sp
    453c:	|        |     |   tst.w d0
    453e:	|        |     +-- bne.s 4544 <runSludge+0xf0>
    4540:	|        |     |   clr.w d0
    4542:	+--------|-----|-- bra.s 4564 <runSludge+0x110>
		}
		FreeVec(loadNow);
    4544:	|        |     \-> move.l 19c2a <loadNow>,8(sp)
    454c:	|        |         move.l 19c5e <SysBase>,d0
    4552:	|        |         movea.l d0,a6
    4554:	|        |         movea.l 8(sp),a1
    4558:	|        |         jsr -690(a6)
		loadNow = NULL;
    455c:	|        |         clr.l 19c2a <loadNow>
	}

	return TRUE;
    4562:	|        \-------> moveq #1,d0
}
    4564:	\----------------> movea.l (sp)+,a6
    4566:	                   lea 12(sp),sp
    456a:	                   rts

0000456c <saveHandlers>:

void saveHandlers (BPTR fp) {
	put2bytes (currentEvents -> leftMouseFunction,		fp);
    456c:	movea.l 1811c <currentEvents>,a0
    4572:	move.l (a0),d0
    4574:	move.l 4(sp),-(sp)
    4578:	move.l d0,-(sp)
    457a:	jsr 8d0 <put2bytes>
    4580:	addq.l #8,sp
	put2bytes (currentEvents -> leftMouseUpFunction,	fp);
    4582:	movea.l 1811c <currentEvents>,a0
    4588:	move.l 4(a0),d0
    458c:	move.l 4(sp),-(sp)
    4590:	move.l d0,-(sp)
    4592:	jsr 8d0 <put2bytes>
    4598:	addq.l #8,sp
	put2bytes (currentEvents -> rightMouseFunction,		fp);
    459a:	movea.l 1811c <currentEvents>,a0
    45a0:	move.l 8(a0),d0
    45a4:	move.l 4(sp),-(sp)
    45a8:	move.l d0,-(sp)
    45aa:	jsr 8d0 <put2bytes>
    45b0:	addq.l #8,sp
	put2bytes (currentEvents -> rightMouseUpFunction,	fp);
    45b2:	movea.l 1811c <currentEvents>,a0
    45b8:	move.l 12(a0),d0
    45bc:	move.l 4(sp),-(sp)
    45c0:	move.l d0,-(sp)
    45c2:	jsr 8d0 <put2bytes>
    45c8:	addq.l #8,sp
	put2bytes (currentEvents -> moveMouseFunction,		fp);
    45ca:	movea.l 1811c <currentEvents>,a0
    45d0:	move.l 16(a0),d0
    45d4:	move.l 4(sp),-(sp)
    45d8:	move.l d0,-(sp)
    45da:	jsr 8d0 <put2bytes>
    45e0:	addq.l #8,sp
	put2bytes (currentEvents -> focusFunction,			fp);
    45e2:	movea.l 1811c <currentEvents>,a0
    45e8:	move.l 20(a0),d0
    45ec:	move.l 4(sp),-(sp)
    45f0:	move.l d0,-(sp)
    45f2:	jsr 8d0 <put2bytes>
    45f8:	addq.l #8,sp
	put2bytes (currentEvents -> spaceFunction,			fp);
    45fa:	movea.l 1811c <currentEvents>,a0
    4600:	move.l 24(a0),d0
    4604:	move.l 4(sp),-(sp)
    4608:	move.l d0,-(sp)
    460a:	jsr 8d0 <put2bytes>
    4610:	addq.l #8,sp
}
    4612:	nop
    4614:	rts

00004616 <sludgeDisplay>:

void sludgeDisplay () {
	CstSludgeDisplay();
    4616:	jsr 1438 <CstSludgeDisplay>
}
    461c:	nop
    461e:	rts

00004620 <stackSetByIndex>:

BOOL stackSetByIndex (struct variableStack * vS, unsigned int theIndex, const struct variable * va) {
	while (theIndex--) {
    4620:	      /-- bra.s 4640 <stackSetByIndex+0x20>
		vS = vS->next;
    4622:	/-----|-> movea.l 4(sp),a0
    4626:	|     |   move.l 8(a0),4(sp)
		if (!vS) {
    462c:	|     +-- bne.s 4640 <stackSetByIndex+0x20>
			KPrintF("Index past end of stack.");
    462e:	|     |   pea 145b8 <cursors.c.412ac4f3+0x298>
    4634:	|     |   jsr 12f14 <KPrintF>
    463a:	|     |   addq.l #4,sp
			return FALSE;
    463c:	|     |   clr.w d0
    463e:	|  /--|-- bra.s 4662 <stackSetByIndex+0x42>
	while (theIndex--) {
    4640:	|  |  \-> move.l 8(sp),d0
    4644:	|  |      move.l d0,d1
    4646:	|  |      subq.l #1,d1
    4648:	|  |      move.l d1,8(sp)
    464c:	|  |      tst.l d0
    464e:	\--|----- bne.s 4622 <stackSetByIndex+0x2>
		}
	}
	return copyVariable(va, &(vS->thisVar));
    4650:	   |      move.l 4(sp),d0
    4654:	   |      move.l d0,-(sp)
    4656:	   |      move.l 16(sp),-(sp)
    465a:	   |      jsr 1137a <copyVariable>
    4660:	   |      addq.l #8,sp
}
    4662:	   \----> rts

00004664 <startNewFunctionNum>:

int startNewFunctionNum (unsigned int funcNum, unsigned int numParamsExpected, struct loadedFunction * calledBy, struct variableStack ** vStack, BOOL returnSommet) {
    4664:	             lea -24(sp),sp
    4668:	             move.l a6,-(sp)
    466a:	             move.l 48(sp),d0
    466e:	             move.w d0,d0
    4670:	             move.w d0,6(sp)
		
	struct loadedFunction * newFunc = AllocVec(sizeof(struct loadedFunction),MEMF_ANY);
    4674:	             moveq #58,d0
    4676:	             move.l d0,24(sp)
    467a:	             clr.l 20(sp)
    467e:	             move.l 19c5e <SysBase>,d0
    4684:	             movea.l d0,a6
    4686:	             move.l 24(sp),d0
    468a:	             move.l 20(sp),d1
    468e:	             jsr -684(a6)
    4692:	             move.l d0,16(sp)
    4696:	             move.l 16(sp),d0
    469a:	             move.l d0,12(sp)
	if(!newFunc) {
    469e:	         /-- bne.s 46b4 <startNewFunctionNum+0x50>
		KPrintF("startNewFunction: Cannot allocate memory");
    46a0:	         |   pea 145d1 <cursors.c.412ac4f3+0x2b1>
    46a6:	         |   jsr 12f14 <KPrintF>
    46ac:	         |   addq.l #4,sp
		return 0;
    46ae:	         |   moveq #0,d0
    46b0:	/--------|-- bra.w 47ca <startNewFunctionNum+0x166>
	}
	newFunc -> originalNumber = funcNum;
    46b4:	|        \-> move.l 32(sp),d0
    46b8:	|            movea.l 12(sp),a0
    46bc:	|            move.l d0,(a0)

	loadFunctionCode (newFunc);
    46be:	|            move.l 12(sp),-(sp)
    46c2:	|            jsr 3df6 <loadFunctionCode>
    46c8:	|            addq.l #4,sp

	if (newFunc -> numArgs != (int)numParamsExpected) {
    46ca:	|            movea.l 12(sp),a0
    46ce:	|            move.l 16(a0),d1
    46d2:	|            move.l 36(sp),d0
    46d6:	|            cmp.l d1,d0
    46d8:	|        /-- beq.s 46ee <startNewFunctionNum+0x8a>
		KPrintF("Wrong number of parameters!");
    46da:	|        |   pea 145fa <cursors.c.412ac4f3+0x2da>
    46e0:	|        |   jsr 12f14 <KPrintF>
    46e6:	|        |   addq.l #4,sp
		return NULL; 
    46e8:	|        |   moveq #0,d0
    46ea:	+--------|-- bra.w 47ca <startNewFunctionNum+0x166>
	}
	if (newFunc -> numArgs > newFunc -> numLocals)  {
    46ee:	|        \-> movea.l 12(sp),a0
    46f2:	|            move.l 16(a0),d1
    46f6:	|            movea.l 12(sp),a0
    46fa:	|            move.l 8(a0),d0
    46fe:	|            cmp.l d1,d0
    4700:	|  /-------- bge.s 476a <startNewFunctionNum+0x106>
		KPrintF ("More arguments than local variable space!");
    4702:	|  |         pea 14616 <cursors.c.412ac4f3+0x2f6>
    4708:	|  |         jsr 12f14 <KPrintF>
    470e:	|  |         addq.l #4,sp
		return NULL; 
    4710:	|  |         moveq #0,d0
    4712:	+--|-------- bra.w 47ca <startNewFunctionNum+0x166>
	}
	
	// Now, lets copy the parameters from the calling function's stack...

	while (numParamsExpected) {
		struct variableStack *vStacksimpleptr = *vStack;
    4716:	|  |  /----> movea.l 44(sp),a0
    471a:	|  |  |      move.l (a0),8(sp)
		numParamsExpected --;
    471e:	|  |  |      subq.l #1,36(sp)
		if (*vStack == NULL) {
    4722:	|  |  |      movea.l 44(sp),a0
    4726:	|  |  |      move.l (a0),d0
    4728:	|  |  |  /-- bne.s 473e <startNewFunctionNum+0xda>
			KPrintF("Corrupted file! The stack's empty and there were still parameters expected");
    472a:	|  |  |  |   pea 14640 <thumbnail.c.7eb31449+0x3>
    4730:	|  |  |  |   jsr 12f14 <KPrintF>
    4736:	|  |  |  |   addq.l #4,sp
			return NULL;
    4738:	|  |  |  |   moveq #0,d0
    473a:	+--|--|--|-- bra.w 47ca <startNewFunctionNum+0x166>
		}
		copyVariable (&vStacksimpleptr -> thisVar, &newFunc->localVars[numParamsExpected]);
    473e:	|  |  |  \-> movea.l 12(sp),a0
    4742:	|  |  |      move.l 20(a0),d1
    4746:	|  |  |      move.l 36(sp),d0
    474a:	|  |  |      lsl.l #3,d0
    474c:	|  |  |      add.l d0,d1
    474e:	|  |  |      move.l 8(sp),d0
    4752:	|  |  |      move.l d1,-(sp)
    4754:	|  |  |      move.l d0,-(sp)
    4756:	|  |  |      jsr 1137a <copyVariable>
    475c:	|  |  |      addq.l #8,sp
		trimStack ( vStack);
    475e:	|  |  |      move.l 44(sp),-(sp)
    4762:	|  |  |      jsr 11844 <trimStack>
    4768:	|  |  |      addq.l #4,sp
	while (numParamsExpected) {
    476a:	|  \--|----> tst.l 36(sp)
    476e:	|     \----- bne.s 4716 <startNewFunctionNum+0xb2>
	}

	newFunc -> cancelMe = FALSE;
    4770:	|            movea.l 12(sp),a0
    4774:	|            clr.w 54(a0)
	newFunc -> timeLeft = 0;
    4778:	|            movea.l 12(sp),a0
    477c:	|            clr.l 12(a0)
	newFunc -> returnSomething = returnSommet;
    4780:	|            movea.l 12(sp),a0
    4784:	|            move.w 6(sp),48(a0)
	newFunc -> calledBy = calledBy;
    478a:	|            movea.l 12(sp),a0
    478e:	|            move.l 40(sp),40(a0)
	newFunc -> stack = NULL;
    4794:	|            movea.l 12(sp),a0
    4798:	|            clr.l 24(a0)
	newFunc -> freezerLevel = 0;
    479c:	|            movea.l 12(sp),a0
    47a0:	|            clr.b 56(a0)
	newFunc -> runThisLine = 0;
    47a4:	|            movea.l 12(sp),a0
    47a8:	|            clr.l 36(a0)
	newFunc -> isSpeech = 0;
    47ac:	|            movea.l 12(sp),a0
    47b0:	|            clr.w 50(a0)
	newFunc -> reg.varType = SVT_NULL;
    47b4:	|            movea.l 12(sp),a0
    47b8:	|            clr.l 28(a0)

	restartFunction (newFunc);
    47bc:	|            move.l 12(sp),-(sp)
    47c0:	|            jsr 443a <restartFunction>
    47c6:	|            addq.l #4,sp
	return 1;
    47c8:	|            moveq #1,d0
}
    47ca:	\----------> movea.l (sp)+,a6
    47cc:	             lea 24(sp),sp
    47d0:	             rts

000047d2 <finishAccess>:
char * convertString(char * s) {
	return NULL;
}

void finishAccess () {
	sliceBusy = FALSE;
    47d2:	clr.w 18128 <sliceBusy>
}
    47d8:	nop
    47da:	rts

000047dc <getNumberedString>:

char * getNumberedString (int value) {
    47dc:	       lea -56(sp),sp
    47e0:	       movem.l d2-d3/a6,-(sp)

	if (sliceBusy) {
    47e4:	       move.w 18128 <sliceBusy>,d0
    47ea:	   /-- beq.s 4834 <getNumberedString+0x58>
		Write(Output(), (APTR)"getNumberedString: Can't read from data file. I'm already reading something\n", 76);        
    47ec:	   |   move.l 19c66 <DOSBase>,d0
    47f2:	   |   movea.l d0,a6
    47f4:	   |   jsr -60(a6)
    47f8:	   |   move.l d0,28(sp)
    47fc:	   |   move.l 28(sp),d0
    4800:	   |   move.l d0,24(sp)
    4804:	   |   move.l #83595,20(sp)
    480c:	   |   moveq #76,d0
    480e:	   |   move.l d0,16(sp)
    4812:	   |   move.l 19c66 <DOSBase>,d0
    4818:	   |   movea.l d0,a6
    481a:	   |   move.l 24(sp),d1
    481e:	   |   move.l 20(sp),d2
    4822:	   |   move.l 16(sp),d3
    4826:	   |   jsr -48(a6)
    482a:	   |   move.l d0,12(sp)
		return NULL;
    482e:	   |   moveq #0,d0
    4830:	/--|-- bra.w 48d0 <getNumberedString+0xf4>
	}

	Seek(bigDataFile, (value << 2) + startOfTextIndex, OFFSET_BEGINNING);
    4834:	|  \-> move.l 19c46 <bigDataFile>,64(sp)
    483c:	|      move.l 72(sp),d0
    4840:	|      add.l d0,d0
    4842:	|      add.l d0,d0
    4844:	|      move.l d0,d1
    4846:	|      move.l 19c52 <startOfTextIndex>,d0
    484c:	|      add.l d1,d0
    484e:	|      move.l d0,60(sp)
    4852:	|      moveq #-1,d0
    4854:	|      move.l d0,56(sp)
    4858:	|      move.l 19c66 <DOSBase>,d0
    485e:	|      movea.l d0,a6
    4860:	|      move.l 64(sp),d1
    4864:	|      move.l 60(sp),d2
    4868:	|      move.l 56(sp),d3
    486c:	|      jsr -66(a6)
    4870:	|      move.l d0,52(sp)
	value = get4bytes (bigDataFile);
    4874:	|      move.l 19c46 <bigDataFile>,d0
    487a:	|      move.l d0,-(sp)
    487c:	|      jsr 718 <get4bytes>
    4882:	|      addq.l #4,sp
    4884:	|      move.l d0,72(sp)
	Seek (bigDataFile, value, OFFSET_BEGINING);
    4888:	|      move.l 19c46 <bigDataFile>,48(sp)
    4890:	|      move.l 72(sp),44(sp)
    4896:	|      moveq #-1,d0
    4898:	|      move.l d0,40(sp)
    489c:	|      move.l 19c66 <DOSBase>,d0
    48a2:	|      movea.l d0,a6
    48a4:	|      move.l 48(sp),d1
    48a8:	|      move.l 44(sp),d2
    48ac:	|      move.l 40(sp),d3
    48b0:	|      jsr -66(a6)
    48b4:	|      move.l d0,36(sp)

	char * s = readString (bigDataFile);    
    48b8:	|      move.l 19c46 <bigDataFile>,d0
    48be:	|      move.l d0,-(sp)
    48c0:	|      jsr b02 <readString>
    48c6:	|      addq.l #4,sp
    48c8:	|      move.l d0,32(sp)
	
	return s;
    48cc:	|      move.l 32(sp),d0
}
    48d0:	\----> movem.l (sp)+,d2-d3/a6
    48d4:	       lea 56(sp),sp
    48d8:	       rts

000048da <openFileFromNum>:

unsigned int openFileFromNum (int num) {
    48da:	       lea -32(sp),sp
    48de:	       movem.l d2-d3/a6,-(sp)
//	FILE * dbug = fopen ("debuggy.txt", "at");

	if (sliceBusy) {
    48e2:	       move.w 18128 <sliceBusy>,d0
    48e8:	   /-- beq.s 4904 <openFileFromNum+0x2a>
		KPrintF("Can't read from data file", "I'm already reading something");
    48ea:	   |   pea 146d8 <thumbnail.c.7eb31449+0x9b>
    48f0:	   |   pea 146f6 <thumbnail.c.7eb31449+0xb9>
    48f6:	   |   jsr 12f14 <KPrintF>
    48fc:	   |   addq.l #8,sp
		return 0;
    48fe:	   |   moveq #0,d0
    4900:	/--|-- bra.w 4998 <openFileFromNum+0xbe>
	}

	Seek( bigDataFile,  startOfDataIndex + (num << 2), OFFSET_BEGINING);	
    4904:	|  \-> move.l 19c46 <bigDataFile>,40(sp)
    490c:	|      move.l 48(sp),d0
    4910:	|      add.l d0,d0
    4912:	|      add.l d0,d0
    4914:	|      move.l d0,d1
    4916:	|      move.l 19c4e <startOfDataIndex>,d0
    491c:	|      add.l d1,d0
    491e:	|      move.l d0,36(sp)
    4922:	|      moveq #-1,d0
    4924:	|      move.l d0,32(sp)
    4928:	|      move.l 19c66 <DOSBase>,d0
    492e:	|      movea.l d0,a6
    4930:	|      move.l 40(sp),d1
    4934:	|      move.l 36(sp),d2
    4938:	|      move.l 32(sp),d3
    493c:	|      jsr -66(a6)
    4940:	|      move.l d0,28(sp)
	Seek( bigDataFile, get4bytes (bigDataFile), OFFSET_CURRENT);
    4944:	|      move.l 19c46 <bigDataFile>,24(sp)
    494c:	|      move.l 19c46 <bigDataFile>,d0
    4952:	|      move.l d0,-(sp)
    4954:	|      jsr 718 <get4bytes>
    495a:	|      addq.l #4,sp
    495c:	|      move.l d0,20(sp)
    4960:	|      clr.l 16(sp)
    4964:	|      move.l 19c66 <DOSBase>,d0
    496a:	|      movea.l d0,a6
    496c:	|      move.l 24(sp),d1
    4970:	|      move.l 20(sp),d2
    4974:	|      move.l 16(sp),d3
    4978:	|      jsr -66(a6)
    497c:	|      move.l d0,12(sp)
//	fprintf (dbug, "Jumping to %li (for data) \n", ftell (bigDataFile));
	sliceBusy = TRUE;
    4980:	|      move.w #1,18128 <sliceBusy>
//	fclose (dbug);

	return get4bytes (bigDataFile);
    4988:	|      move.l 19c46 <bigDataFile>,d0
    498e:	|      move.l d0,-(sp)
    4990:	|      jsr 718 <get4bytes>
    4996:	|      addq.l #4,sp
}
    4998:	\----> movem.l (sp)+,d2-d3/a6
    499c:	       lea 32(sp),sp
    49a0:	       rts

000049a2 <openObjectSlice>:

BOOL openObjectSlice (int num) {
    49a2:	       lea -32(sp),sp
    49a6:	       movem.l d2-d3/a6,-(sp)
    // BPTR dbug = FOpen("debuggy.txt", MODE_NEWFILE);

    // FPrintf(dbug, "\nTrying to open object %i\n", num);

    if (sliceBusy) {
    49aa:	       move.w 18128 <sliceBusy>,d0
    49b0:	   /-- beq.s 49cc <openObjectSlice+0x2a>
        KPrintF("Can't read from data file", "I'm already reading something");
    49b2:	   |   pea 146d8 <thumbnail.c.7eb31449+0x9b>
    49b8:	   |   pea 146f6 <thumbnail.c.7eb31449+0xb9>
    49be:	   |   jsr 12f14 <KPrintF>
    49c4:	   |   addq.l #8,sp
        return FALSE;
    49c6:	   |   clr.w d0
    49c8:	/--|-- bra.w 4a58 <openObjectSlice+0xb6>
    }

    // FPrintf(dbug, "Going to position %ld\n", startOfObjectIndex + (num << 2));
    Seek(bigDataFile, startOfObjectIndex + (num << 2), OFFSET_BEGINNING);
    49cc:	|  \-> move.l 19c46 <bigDataFile>,40(sp)
    49d4:	|      move.l 48(sp),d0
    49d8:	|      add.l d0,d0
    49da:	|      add.l d0,d0
    49dc:	|      move.l d0,d1
    49de:	|      move.l 19c5a <startOfObjectIndex>,d0
    49e4:	|      add.l d1,d0
    49e6:	|      move.l d0,36(sp)
    49ea:	|      moveq #-1,d0
    49ec:	|      move.l d0,32(sp)
    49f0:	|      move.l 19c66 <DOSBase>,d0
    49f6:	|      movea.l d0,a6
    49f8:	|      move.l 40(sp),d1
    49fc:	|      move.l 36(sp),d2
    4a00:	|      move.l 32(sp),d3
    4a04:	|      jsr -66(a6)
    4a08:	|      move.l d0,28(sp)
    Seek(bigDataFile, get4bytes(bigDataFile), OFFSET_BEGINNING);
    4a0c:	|      move.l 19c46 <bigDataFile>,24(sp)
    4a14:	|      move.l 19c46 <bigDataFile>,d0
    4a1a:	|      move.l d0,-(sp)
    4a1c:	|      jsr 718 <get4bytes>
    4a22:	|      addq.l #4,sp
    4a24:	|      move.l d0,20(sp)
    4a28:	|      moveq #-1,d0
    4a2a:	|      move.l d0,16(sp)
    4a2e:	|      move.l 19c66 <DOSBase>,d0
    4a34:	|      movea.l d0,a6
    4a36:	|      move.l 24(sp),d1
    4a3a:	|      move.l 20(sp),d2
    4a3e:	|      move.l 16(sp),d3
    4a42:	|      jsr -66(a6)
    4a46:	|      move.l d0,12(sp)
    // FPrintf(dbug, "Told to skip forward to %ld\n", FTell(bigDataFile));
    // FClose(dbug);
    return sliceBusy = TRUE;
    4a4a:	|      move.w #1,18128 <sliceBusy>
    4a52:	|      move.w 18128 <sliceBusy>,d0
}
    4a58:	\----> movem.l (sp)+,d2-d3/a6
    4a5c:	       lea 32(sp),sp
    4a60:	       rts

00004a62 <openSubSlice>:

BOOL openSubSlice (int num) {
    4a62:	       lea -32(sp),sp
    4a66:	       movem.l d2-d3/a6,-(sp)
//	FILE * dbug = fopen ("debuggy.txt", "at");

//	fprintf (dbug, "\nTrying to open sub %i\n", num);

	if (sliceBusy) {
    4a6a:	       move.w 18128 <sliceBusy>,d0
    4a70:	   /-- beq.s 4a8c <openSubSlice+0x2a>
		KPrintF("Can't read from data file", "I'm already reading something");
    4a72:	   |   pea 146d8 <thumbnail.c.7eb31449+0x9b>
    4a78:	   |   pea 146f6 <thumbnail.c.7eb31449+0xb9>
    4a7e:	   |   jsr 12f14 <KPrintF>
    4a84:	   |   addq.l #8,sp
		return FALSE;
    4a86:	   |   clr.w d0
    4a88:	/--|-- bra.w 4b18 <openSubSlice+0xb6>
	}

//	fprintf (dbug, "Going to position %li\n", startOfSubIndex + (num << 2));
	Seek(bigDataFile, startOfSubIndex + (num << 2), OFFSET_BEGINNING);
    4a8c:	|  \-> move.l 19c46 <bigDataFile>,40(sp)
    4a94:	|      move.l 48(sp),d0
    4a98:	|      add.l d0,d0
    4a9a:	|      add.l d0,d0
    4a9c:	|      move.l d0,d1
    4a9e:	|      move.l 19c56 <startOfSubIndex>,d0
    4aa4:	|      add.l d1,d0
    4aa6:	|      move.l d0,36(sp)
    4aaa:	|      moveq #-1,d0
    4aac:	|      move.l d0,32(sp)
    4ab0:	|      move.l 19c66 <DOSBase>,d0
    4ab6:	|      movea.l d0,a6
    4ab8:	|      move.l 40(sp),d1
    4abc:	|      move.l 36(sp),d2
    4ac0:	|      move.l 32(sp),d3
    4ac4:	|      jsr -66(a6)
    4ac8:	|      move.l d0,28(sp)
	Seek(bigDataFile, get4bytes (bigDataFile), OFFSET_BEGINNING);
    4acc:	|      move.l 19c46 <bigDataFile>,24(sp)
    4ad4:	|      move.l 19c46 <bigDataFile>,d0
    4ada:	|      move.l d0,-(sp)
    4adc:	|      jsr 718 <get4bytes>
    4ae2:	|      addq.l #4,sp
    4ae4:	|      move.l d0,20(sp)
    4ae8:	|      moveq #-1,d0
    4aea:	|      move.l d0,16(sp)
    4aee:	|      move.l 19c66 <DOSBase>,d0
    4af4:	|      movea.l d0,a6
    4af6:	|      move.l 24(sp),d1
    4afa:	|      move.l 20(sp),d2
    4afe:	|      move.l 16(sp),d3
    4b02:	|      jsr -66(a6)
    4b06:	|      move.l d0,12(sp)
//	fprintf (dbug, "Told to skip forward to %li\n", ftell (bigDataFile));
//	fclose (dbug);
	return sliceBusy = TRUE;
    4b0a:	|      move.w #1,18128 <sliceBusy>
    4b12:	|      move.w 18128 <sliceBusy>,d0
}
    4b18:	\----> movem.l (sp)+,d2-d3/a6
    4b1c:	       lea 32(sp),sp
    4b20:	       rts

00004b22 <setFileIndices>:

void setFileIndices (BPTR fp, unsigned int numLanguages, unsigned int skipBefore) {
    4b22:	       lea -180(sp),sp
    4b26:	       movem.l d2-d3/a6,-(sp)
	if (fp) {
    4b2a:	       tst.l 196(sp)
    4b2e:	/----- beq.s 4b6e <setFileIndices+0x4c>
		// Keep hold of the file handle, and let things get at it
		bigDataFile = fp;
    4b30:	|      move.l 196(sp),19c46 <bigDataFile>
		startIndex = Seek( fp, 0, OFFSET_CURRENT);
    4b38:	|      move.l 196(sp),168(sp)
    4b3e:	|      clr.l 164(sp)
    4b42:	|      clr.l 160(sp)
    4b46:	|      move.l 19c66 <DOSBase>,d0
    4b4c:	|      movea.l d0,a6
    4b4e:	|      move.l 168(sp),d1
    4b52:	|      move.l 164(sp),d2
    4b56:	|      move.l 160(sp),d3
    4b5a:	|      jsr -66(a6)
    4b5e:	|      move.l d0,156(sp)
    4b62:	|      move.l 156(sp),d0
    4b66:	|      move.l d0,19c4a <startIndex>
    4b6c:	|  /-- bra.s 4ba8 <setFileIndices+0x86>
	} else {
		// No file pointer - this means that we reuse the bigDataFile
		fp = bigDataFile;
    4b6e:	\--|-> move.l 19c46 <bigDataFile>,196(sp)
        Seek(fp, startIndex, OFFSET_BEGINNING);
    4b76:	   |   move.l 196(sp),184(sp)
    4b7c:	   |   move.l 19c4a <startIndex>,d0
    4b82:	   |   move.l d0,180(sp)
    4b86:	   |   moveq #-1,d0
    4b88:	   |   move.l d0,176(sp)
    4b8c:	   |   move.l 19c66 <DOSBase>,d0
    4b92:	   |   movea.l d0,a6
    4b94:	   |   move.l 184(sp),d1
    4b98:	   |   move.l 180(sp),d2
    4b9c:	   |   move.l 176(sp),d3
    4ba0:	   |   jsr -66(a6)
    4ba4:	   |   move.l d0,172(sp)
	}
	sliceBusy = FALSE;
    4ba8:	   \-> clr.w 18128 <sliceBusy>

	if (skipBefore > numLanguages) {
    4bae:	       move.l 204(sp),d0
    4bb2:	       cmp.l 200(sp),d0
    4bb6:	   /-- bls.s 4bca <setFileIndices+0xa8>
		KPrintF("setFileIndices: Warning: Not a valid language ID! Using default instead.");
    4bb8:	   |   pea 14710 <thumbnail.c.7eb31449+0xd3>
    4bbe:	   |   jsr 12f14 <KPrintF>
    4bc4:	   |   addq.l #4,sp
		skipBefore = 0;
    4bc6:	   |   clr.l 204(sp)
	}

	// STRINGS
	int skipAfter = numLanguages - skipBefore;
    4bca:	   \-> move.l 200(sp),d0
    4bce:	       sub.l 204(sp),d0
    4bd2:	       move.l d0,188(sp)
	while (skipBefore) {
    4bd6:	   /-- bra.s 4c14 <setFileIndices+0xf2>
        Seek(fp, get4bytes(fp),OFFSET_BEGINING);		
    4bd8:	/--|-> move.l 196(sp),24(sp)
    4bde:	|  |   move.l 196(sp),-(sp)
    4be2:	|  |   jsr 718 <get4bytes>
    4be8:	|  |   addq.l #4,sp
    4bea:	|  |   move.l d0,20(sp)
    4bee:	|  |   moveq #-1,d0
    4bf0:	|  |   move.l d0,16(sp)
    4bf4:	|  |   move.l 19c66 <DOSBase>,d0
    4bfa:	|  |   movea.l d0,a6
    4bfc:	|  |   move.l 24(sp),d1
    4c00:	|  |   move.l 20(sp),d2
    4c04:	|  |   move.l 16(sp),d3
    4c08:	|  |   jsr -66(a6)
    4c0c:	|  |   move.l d0,12(sp)
		skipBefore --;
    4c10:	|  |   subq.l #1,204(sp)
	while (skipBefore) {
    4c14:	|  \-> tst.l 204(sp)
    4c18:	\----- bne.s 4bd8 <setFileIndices+0xb6>
	}
	startOfTextIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    4c1a:	       move.l 196(sp),152(sp)
    4c20:	       clr.l 148(sp)
    4c24:	       clr.l 144(sp)
    4c28:	       move.l 19c66 <DOSBase>,d0
    4c2e:	       movea.l d0,a6
    4c30:	       move.l 152(sp),d1
    4c34:	       move.l 148(sp),d2
    4c38:	       move.l 144(sp),d3
    4c3c:	       jsr -66(a6)
    4c40:	       move.l d0,140(sp)
    4c44:	       move.l 140(sp),d0
    4c48:	       addq.l #4,d0
    4c4a:	       move.l d0,19c52 <startOfTextIndex>

	Seek(fp, get4bytes (fp), OFFSET_BEGINNING);
    4c50:	       move.l 196(sp),136(sp)
    4c56:	       move.l 196(sp),-(sp)
    4c5a:	       jsr 718 <get4bytes>
    4c60:	       addq.l #4,sp
    4c62:	       move.l d0,132(sp)
    4c66:	       moveq #-1,d0
    4c68:	       move.l d0,128(sp)
    4c6c:	       move.l 19c66 <DOSBase>,d0
    4c72:	       movea.l d0,a6
    4c74:	       move.l 136(sp),d1
    4c78:	       move.l 132(sp),d2
    4c7c:	       move.l 128(sp),d3
    4c80:	       jsr -66(a6)
    4c84:	       move.l d0,124(sp)

	while (skipAfter) {
    4c88:	   /-- bra.s 4cc6 <setFileIndices+0x1a4>
        Seek( fp, get4bytes (fp), OFFSET_BEGINING);
    4c8a:	/--|-> move.l 196(sp),40(sp)
    4c90:	|  |   move.l 196(sp),-(sp)
    4c94:	|  |   jsr 718 <get4bytes>
    4c9a:	|  |   addq.l #4,sp
    4c9c:	|  |   move.l d0,36(sp)
    4ca0:	|  |   moveq #-1,d0
    4ca2:	|  |   move.l d0,32(sp)
    4ca6:	|  |   move.l 19c66 <DOSBase>,d0
    4cac:	|  |   movea.l d0,a6
    4cae:	|  |   move.l 40(sp),d1
    4cb2:	|  |   move.l 36(sp),d2
    4cb6:	|  |   move.l 32(sp),d3
    4cba:	|  |   jsr -66(a6)
    4cbe:	|  |   move.l d0,28(sp)
		skipAfter --;
    4cc2:	|  |   subq.l #1,188(sp)
	while (skipAfter) {
    4cc6:	|  \-> tst.l 188(sp)
    4cca:	\----- bne.s 4c8a <setFileIndices+0x168>
	}

	startOfSubIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    4ccc:	       move.l 196(sp),120(sp)
    4cd2:	       clr.l 116(sp)
    4cd6:	       clr.l 112(sp)
    4cda:	       move.l 19c66 <DOSBase>,d0
    4ce0:	       movea.l d0,a6
    4ce2:	       move.l 120(sp),d1
    4ce6:	       move.l 116(sp),d2
    4cea:	       move.l 112(sp),d3
    4cee:	       jsr -66(a6)
    4cf2:	       move.l d0,108(sp)
    4cf6:	       move.l 108(sp),d0
    4cfa:	       addq.l #4,d0
    4cfc:	       move.l d0,19c56 <startOfSubIndex>
    Seek( fp, get4bytes (fp), OFFSET_CURRENT);
    4d02:	       move.l 196(sp),104(sp)
    4d08:	       move.l 196(sp),-(sp)
    4d0c:	       jsr 718 <get4bytes>
    4d12:	       addq.l #4,sp
    4d14:	       move.l d0,100(sp)
    4d18:	       clr.l 96(sp)
    4d1c:	       move.l 19c66 <DOSBase>,d0
    4d22:	       movea.l d0,a6
    4d24:	       move.l 104(sp),d1
    4d28:	       move.l 100(sp),d2
    4d2c:	       move.l 96(sp),d3
    4d30:	       jsr -66(a6)
    4d34:	       move.l d0,92(sp)

	startOfObjectIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    4d38:	       move.l 196(sp),88(sp)
    4d3e:	       clr.l 84(sp)
    4d42:	       clr.l 80(sp)
    4d46:	       move.l 19c66 <DOSBase>,d0
    4d4c:	       movea.l d0,a6
    4d4e:	       move.l 88(sp),d1
    4d52:	       move.l 84(sp),d2
    4d56:	       move.l 80(sp),d3
    4d5a:	       jsr -66(a6)
    4d5e:	       move.l d0,76(sp)
    4d62:	       move.l 76(sp),d0
    4d66:	       addq.l #4,d0
    4d68:	       move.l d0,19c5a <startOfObjectIndex>
	Seek (fp, get4bytes (fp), OFFSET_CURRENT);
    4d6e:	       move.l 196(sp),72(sp)
    4d74:	       move.l 196(sp),-(sp)
    4d78:	       jsr 718 <get4bytes>
    4d7e:	       addq.l #4,sp
    4d80:	       move.l d0,68(sp)
    4d84:	       clr.l 64(sp)
    4d88:	       move.l 19c66 <DOSBase>,d0
    4d8e:	       movea.l d0,a6
    4d90:	       move.l 72(sp),d1
    4d94:	       move.l 68(sp),d2
    4d98:	       move.l 64(sp),d3
    4d9c:	       jsr -66(a6)
    4da0:	       move.l d0,60(sp)

	// Remember that the data section starts here
	startOfDataIndex =  Seek( fp, 0, OFFSET_CURRENT);
    4da4:	       move.l 196(sp),56(sp)
    4daa:	       clr.l 52(sp)
    4dae:	       clr.l 48(sp)
    4db2:	       move.l 19c66 <DOSBase>,d0
    4db8:	       movea.l d0,a6
    4dba:	       move.l 56(sp),d1
    4dbe:	       move.l 52(sp),d2
    4dc2:	       move.l 48(sp),d3
    4dc6:	       jsr -66(a6)
    4dca:	       move.l d0,44(sp)
    4dce:	       move.l 44(sp),d0
    4dd2:	       move.l d0,19c4e <startOfDataIndex>
    4dd8:	       nop
    4dda:	       movem.l (sp)+,d2-d3/a6
    4dde:	       lea 180(sp),sp
    4de2:	       rts

00004de4 <GetVBR>:
static volatile APTR VBR=0;
static APTR SystemIrq;
 
struct View *ActiView;

static APTR GetVBR(void) {
    4de4:	    lea -20(sp),sp
    4de8:	    move.l a6,-(sp)
    4dea:	    move.l d7,-(sp)
	APTR vbr = 0;
    4dec:	    clr.l 24(sp)
	UWORD getvbr[] = { 0x4e7a, 0x0801, 0x4e73 }; // MOVEC.L VBR,D0 RTE
    4df0:	    move.w #20090,10(sp)
    4df6:	    move.w #2049,12(sp)
    4dfc:	    move.w #20083,14(sp)

	if (SysBase->AttnFlags & AFF_68010) 
    4e02:	    movea.l 19c5e <SysBase>,a0
    4e08:	    move.w 296(a0),d0
    4e0c:	    move.w d0,d0
    4e0e:	    andi.l #65535,d0
    4e14:	    moveq #1,d1
    4e16:	    and.l d1,d0
    4e18:	/-- beq.s 4e46 <GetVBR+0x62>
		vbr = (APTR)Supervisor((ULONG (*)())getvbr);
    4e1a:	|   lea 28(sp),a0
    4e1e:	|   lea -18(a0),a0
    4e22:	|   move.l a0,20(sp)
    4e26:	|   move.l 19c5e <SysBase>,d0
    4e2c:	|   movea.l d0,a6
    4e2e:	|   move.l 20(sp),d7
    4e32:	|   exg d7,a5
    4e34:	|   jsr -30(a6)
    4e38:	|   exg d7,a5
    4e3a:	|   move.l d0,16(sp)
    4e3e:	|   move.l 16(sp),d0
    4e42:	|   move.l d0,24(sp)

	return vbr;
    4e46:	\-> move.l 24(sp),d0
}
    4e4a:	    move.l (sp)+,d7
    4e4c:	    movea.l (sp)+,a6
    4e4e:	    lea 20(sp),sp
    4e52:	    rts

00004e54 <SetInterruptHandler>:

void SetInterruptHandler(APTR interrupt) {
	*(volatile APTR*)(((UBYTE*)VBR)+0x6c) = interrupt;
    4e54:	movea.l 19c84 <VBR>,a0
    4e5a:	lea 108(a0),a0
    4e5e:	move.l 4(sp),(a0)
}
    4e62:	nop
    4e64:	rts

00004e66 <GetInterruptHandler>:

APTR GetInterruptHandler() {
	return *(volatile APTR*)(((UBYTE*)VBR)+0x6c);
    4e66:	movea.l 19c84 <VBR>,a0
    4e6c:	move.l 108(a0),d0
}
    4e70:	rts

00004e72 <TakeSystem>:
	UWORD tst=*(volatile UWORD*)&custom->dmaconr; //for compatiblity a1000
	(void)tst;
	while (*(volatile UWORD*)&custom->dmaconr&(1<<14)) {} //blitter busy wait
}

void TakeSystem() {
    4e72:	       subq.l #8,sp
    4e74:	       move.l a6,-(sp)
	Forbid();
    4e76:	       move.l 19c5e <SysBase>,d0
    4e7c:	       movea.l d0,a6
    4e7e:	       jsr -132(a6)
	//Save current interrupts and DMA settings so we can restore them upon exit. 
	SystemADKCON=custom->adkconr;
    4e82:	       movea.l 19c62 <custom>,a0
    4e88:	       move.w 16(a0),d0
    4e8c:	       move.w d0,19c82 <SystemADKCON>
	SystemInts=custom->intenar;
    4e92:	       movea.l 19c62 <custom>,a0
    4e98:	       move.w 28(a0),d0
    4e9c:	       move.w d0,19c7e <SystemInts>
	SystemDMA=custom->dmaconr;
    4ea2:	       movea.l 19c62 <custom>,a0
    4ea8:	       move.w 2(a0),d0
    4eac:	       move.w d0,19c80 <SystemDMA>
	ActiView=GfxBase->ActiView; //store current view
    4eb2:	       movea.l 19c6a <GfxBase>,a0
    4eb8:	       move.l 34(a0),d0
    4ebc:	       move.l d0,19c8c <ActiView>

	LoadView(0);
    4ec2:	       clr.l 4(sp)
    4ec6:	       move.l 19c6a <GfxBase>,d0
    4ecc:	       movea.l d0,a6
    4ece:	       movea.l 4(sp),a1
    4ed2:	       jsr -222(a6)
	WaitTOF();
    4ed6:	       move.l 19c6a <GfxBase>,d0
    4edc:	       movea.l d0,a6
    4ede:	       jsr -270(a6)
	WaitTOF();
    4ee2:	       move.l 19c6a <GfxBase>,d0
    4ee8:	       movea.l d0,a6
    4eea:	       jsr -270(a6)

	WaitVbl();
    4eee:	       jsr 12e3c <WaitVbl>
	WaitVbl();
    4ef4:	       jsr 12e3c <WaitVbl>

	OwnBlitter();
    4efa:	       move.l 19c6a <GfxBase>,d0
    4f00:	       movea.l d0,a6
    4f02:	       jsr -456(a6)
	WaitBlit();	
    4f06:	       move.l 19c6a <GfxBase>,d0
    4f0c:	       movea.l d0,a6
    4f0e:	       jsr -228(a6)
	Disable();
    4f12:	       move.l 19c5e <SysBase>,d0
    4f18:	       movea.l d0,a6
    4f1a:	       jsr -120(a6)
	
	//custom->intena=0x7fff;//disable all interrupts
	//custom->intreq=0x7fff;//Clear any interrupts that were pending
	
	custom->dmacon=0x7fff;//Clear all DMA channels
    4f1e:	       movea.l 19c62 <custom>,a0
    4f24:	       move.w #32767,150(a0)

	//set all colors black
	for(int a=0;a<32;a++)
    4f2a:	       clr.l 8(sp)
    4f2e:	   /-- bra.s 4f4c <TakeSystem+0xda>
		custom->color[a]=0;
    4f30:	/--|-> movea.l 19c62 <custom>,a0
    4f36:	|  |   move.l 8(sp),d0
    4f3a:	|  |   addi.l #192,d0
    4f40:	|  |   add.l d0,d0
    4f42:	|  |   move.w #0,(0,a0,d0.l)
	for(int a=0;a<32;a++)
    4f48:	|  |   addq.l #1,8(sp)
    4f4c:	|  \-> moveq #31,d0
    4f4e:	|      cmp.l 8(sp),d0
    4f52:	\----- bge.s 4f30 <TakeSystem+0xbe>

	WaitVbl();
    4f54:	       jsr 12e3c <WaitVbl>
	WaitVbl();
    4f5a:	       jsr 12e3c <WaitVbl>

	VBR=GetVBR();
    4f60:	       jsr 4de4 <GetVBR>
    4f66:	       move.l d0,19c84 <VBR>
	SystemIrq=GetInterruptHandler(); //store interrupt register*/
    4f6c:	       jsr 4e66 <GetInterruptHandler>
    4f72:	       move.l d0,19c88 <SystemIrq>
}
    4f78:	       nop
    4f7a:	       movea.l (sp)+,a6
    4f7c:	       addq.l #8,sp
    4f7e:	       rts

00004f80 <FreeSystem>:

void FreeSystem() { 
    4f80:	subq.l #4,sp
    4f82:	move.l a6,-(sp)
	WaitVbl();
    4f84:	jsr 12e3c <WaitVbl>
	WaitBlit();
    4f8a:	move.l 19c6a <GfxBase>,d0
    4f90:	movea.l d0,a6
    4f92:	jsr -228(a6)
	custom->intena=0x7fff;//disable all interrupts
    4f96:	movea.l 19c62 <custom>,a0
    4f9c:	move.w #32767,154(a0)
	custom->intreq=0x7fff;//Clear any interrupts that were pending
    4fa2:	movea.l 19c62 <custom>,a0
    4fa8:	move.w #32767,156(a0)
	custom->dmacon=0x7fff;//Clear all DMA channels
    4fae:	movea.l 19c62 <custom>,a0
    4fb4:	move.w #32767,150(a0)

	//restore interrupts
	SetInterruptHandler(SystemIrq);
    4fba:	move.l 19c88 <SystemIrq>,d0
    4fc0:	move.l d0,-(sp)
    4fc2:	jsr 4e54 <SetInterruptHandler>
    4fc8:	addq.l #4,sp

	/*Restore system copper list(s). */
	custom->cop1lc=(ULONG)GfxBase->copinit;
    4fca:	movea.l 19c6a <GfxBase>,a0
    4fd0:	move.l 38(a0),d0
    4fd4:	movea.l 19c62 <custom>,a0
    4fda:	move.l d0,128(a0)
	custom->cop2lc=(ULONG)GfxBase->LOFlist;
    4fde:	movea.l 19c6a <GfxBase>,a0
    4fe4:	move.l 50(a0),d0
    4fe8:	movea.l 19c62 <custom>,a0
    4fee:	move.l d0,132(a0)
	custom->copjmp1=0x7fff; //start coppper
    4ff2:	movea.l 19c62 <custom>,a0
    4ff8:	move.w #32767,136(a0)

	/*Restore all interrupts and DMA settings. */
	//custom->intena=SystemInts|0x8000;
	custom->dmacon=SystemDMA|0x8000;
    4ffe:	move.w 19c80 <SystemDMA>,d0
    5004:	movea.l 19c62 <custom>,a0
    500a:	ori.w #-32768,d0
    500e:	move.w d0,150(a0)
	custom->adkcon=SystemADKCON|0x8000;
    5012:	move.w 19c82 <SystemADKCON>,d0
    5018:	movea.l 19c62 <custom>,a0
    501e:	ori.w #-32768,d0
    5022:	move.w d0,158(a0)

	WaitBlit();	
    5026:	move.l 19c6a <GfxBase>,d0
    502c:	movea.l d0,a6
    502e:	jsr -228(a6)
	DisownBlitter();
    5032:	move.l 19c6a <GfxBase>,d0
    5038:	movea.l d0,a6
    503a:	jsr -462(a6)
	Enable();
    503e:	move.l 19c5e <SysBase>,d0
    5044:	movea.l d0,a6
    5046:	jsr -126(a6)

	LoadView(ActiView);
    504a:	move.l 19c8c <ActiView>,4(sp)
    5052:	move.l 19c6a <GfxBase>,d0
    5058:	movea.l d0,a6
    505a:	movea.l 4(sp),a1
    505e:	jsr -222(a6)
	WaitTOF();
    5062:	move.l 19c6a <GfxBase>,d0
    5068:	movea.l d0,a6
    506a:	jsr -270(a6)
	WaitTOF();
    506e:	move.l 19c6a <GfxBase>,d0
    5074:	movea.l d0,a6
    5076:	jsr -270(a6)

	Permit();
    507a:	move.l 19c5e <SysBase>,d0
    5080:	movea.l d0,a6
    5082:	jsr -138(a6)
}
    5086:	nop
    5088:	movea.l (sp)+,a6
    508a:	addq.l #4,sp
    508c:	rts

0000508e <p61Init>:
	// The Player® 6.1A: Copyright © 1992-95 Jarno Paananen
	// P61.testmod - Module by Skylord/Sector 7 
	INCBIN(player, "player610.6.no_cia.bin")
	INCBIN_CHIP(module, "testmod.p61")

	int p61Init(const void* module) { // returns 0 if success, non-zero otherwise
    508e:	move.l a3,-(sp)
    5090:	move.l a2,-(sp)
		register volatile const void* _a0 ASM("a0") = module;
    5092:	movea.l 12(sp),a0
		register volatile const void* _a1 ASM("a1") = NULL;
    5096:	suba.l a1,a1
		register volatile const void* _a2 ASM("a2") = NULL;
    5098:	suba.l a2,a2
		register volatile const void* _a3 ASM("a3") = player;
    509a:	move.l 1812a <player>,d0
    50a0:	movea.l d0,a3
		register                int   _d0 ASM("d0"); // return value
		__asm volatile (
    50a2:	movem.l d1-d7/a4-a6,-(sp)
    50a6:	jsr (a3)
    50a8:	movem.l (sp)+,d1-d7/a4-a6
			"movem.l (%%sp)+,%%d1-%%d7/%%a4-%%a6"
		: "=r" (_d0), "+rf"(_a0), "+rf"(_a1), "+rf"(_a2), "+rf"(_a3)
		:
		: "cc", "memory");
		return _d0;
	}
    50ac:	movea.l (sp)+,a2
    50ae:	movea.l (sp)+,a3
    50b0:	rts

000050b2 <p61End>:
		: "+rf"(_a3), "+rf"(_a6)
		:
		: "cc", "memory");
	}

	void p61End() {
    50b2:	move.l a6,-(sp)
    50b4:	move.l a3,-(sp)
		register volatile const void* _a3 ASM("a3") = player;
    50b6:	move.l 1812a <player>,d0
    50bc:	movea.l d0,a3
		register volatile const void* _a6 ASM("a6") = (void*)0xdff000;
    50be:	movea.l #14675968,a6
		__asm volatile (
    50c4:	movem.l d0-d1/a0-a1,-(sp)
    50c8:	jsr 8(a3)
    50cc:	movem.l (sp)+,d0-d1/a0-a1
			"jsr 8(%%a3)\n"
			"movem.l (%%sp)+,%%d0-%%d1/%%a0-%%a1"
		: "+rf"(_a3), "+rf"(_a6)
		:
		: "cc", "memory");
	}
    50d0:	nop
    50d2:	movea.l (sp)+,a3
    50d4:	movea.l (sp)+,a6
    50d6:	rts

000050d8 <main>:
static void Wait10() { WaitLine(0x10); }
static void Wait11() { WaitLine(0x11); }
static void Wait12() { WaitLine(0x12); }
static void Wait13() { WaitLine(0x13); }

int main(int argc, char *argv[]) {
    50d8:	    lea -128(sp),sp
    50dc:	    movem.l d2-d3/a6,-(sp)
	SysBase = *((struct ExecBase**)4UL);
    50e0:	    movea.w #4,a0
    50e4:	    move.l (a0),d0
    50e6:	    move.l d0,19c5e <SysBase>
	custom = (struct Custom*)0xdff000;	
    50ec:	    move.l #14675968,19c62 <custom>


	// We will use the graphics library only to locate and restore the system copper list once we are through.
	GfxBase = (struct GfxBase *)OpenLibrary((CONST_STRPTR)"graphics.library",0);
    50f6:	    move.l #90305,136(sp)
    50fe:	    clr.l 132(sp)
    5102:	    move.l 19c5e <SysBase>,d0
    5108:	    movea.l d0,a6
    510a:	    movea.l 136(sp),a1
    510e:	    move.l 132(sp),d0
    5112:	    jsr -552(a6)
    5116:	    move.l d0,128(sp)
    511a:	    move.l 128(sp),d0
    511e:	    move.l d0,19c6a <GfxBase>
	if (!GfxBase)
    5124:	    move.l 19c6a <GfxBase>,d0
    512a:	/-- bne.s 5140 <main+0x68>
		Exit(0);
    512c:	|   clr.l 124(sp)
    5130:	|   move.l 19c66 <DOSBase>,d0
    5136:	|   movea.l d0,a6
    5138:	|   move.l 124(sp),d1
    513c:	|   jsr -144(a6)

	// used for printing
	DOSBase = (struct DosLibrary*)OpenLibrary((CONST_STRPTR)"dos.library", 0);
    5140:	\-> move.l #90322,120(sp)
    5148:	    clr.l 116(sp)
    514c:	    move.l 19c5e <SysBase>,d0
    5152:	    movea.l d0,a6
    5154:	    movea.l 120(sp),a1
    5158:	    move.l 116(sp),d0
    515c:	    jsr -552(a6)
    5160:	    move.l d0,112(sp)
    5164:	    move.l 112(sp),d0
    5168:	    move.l d0,19c66 <DOSBase>
	if (!DOSBase)
    516e:	    move.l 19c66 <DOSBase>,d0
    5174:	/-- bne.s 518a <main+0xb2>
		Exit(0);
    5176:	|   clr.l 108(sp)
    517a:	|   move.l 19c66 <DOSBase>,d0
    5180:	|   movea.l d0,a6
    5182:	|   move.l 108(sp),d1
    5186:	|   jsr -144(a6)

	MathIeeeSingBasBase = (struct MathIEEEBase *) OpenLibrary("mathieeesingbas.library", 0);	
    518a:	\-> move.l #90334,104(sp)
    5192:	    clr.l 100(sp)
    5196:	    move.l 19c5e <SysBase>,d0
    519c:	    movea.l d0,a6
    519e:	    movea.l 104(sp),a1
    51a2:	    move.l 100(sp),d0
    51a6:	    jsr -552(a6)
    51aa:	    move.l d0,96(sp)
    51ae:	    move.l 96(sp),d0
    51b2:	    move.l d0,19c6e <MathIeeeSingBasBase>
	if (!MathIeeeSingBasBase)
    51b8:	    move.l 19c6e <MathIeeeSingBasBase>,d0
    51be:	/-- bne.s 51d4 <main+0xfc>
		Exit(0);	
    51c0:	|   clr.l 92(sp)
    51c4:	|   move.l 19c66 <DOSBase>,d0
    51ca:	|   movea.l d0,a6
    51cc:	|   move.l 92(sp),d1
    51d0:	|   jsr -144(a6)

	MathIeeeSingTransBase = (struct MathIEEEBase *) OpenLibrary("mathieeesingtrans.library",0);													
    51d4:	\-> move.l #90358,88(sp)
    51dc:	    clr.l 84(sp)
    51e0:	    move.l 19c5e <SysBase>,d0
    51e6:	    movea.l d0,a6
    51e8:	    movea.l 88(sp),a1
    51ec:	    move.l 84(sp),d0
    51f0:	    jsr -552(a6)
    51f4:	    move.l d0,80(sp)
    51f8:	    move.l 80(sp),d0
    51fc:	    move.l d0,19c72 <MathIeeeSingTransBase>
	if (!MathIeeeSingTransBase)
    5202:	    move.l 19c72 <MathIeeeSingTransBase>,d0
    5208:	/-- bne.s 521e <main+0x146>
		Exit(0);
    520a:	|   clr.l 76(sp)
    520e:	|   move.l 19c66 <DOSBase>,d0
    5214:	|   movea.l d0,a6
    5216:	|   move.l 76(sp),d1
    521a:	|   jsr -144(a6)

	MathIeeeDoubTransBase =  (struct MathIEEEBase *) OpenLibrary("mathieeedoubtrans.library",0);
    521e:	\-> move.l #90384,72(sp)
    5226:	    clr.l 68(sp)
    522a:	    move.l 19c5e <SysBase>,d0
    5230:	    movea.l d0,a6
    5232:	    movea.l 72(sp),a1
    5236:	    move.l 68(sp),d0
    523a:	    jsr -552(a6)
    523e:	    move.l d0,64(sp)
    5242:	    move.l 64(sp),d0
    5246:	    move.l d0,19c7a <MathIeeeDoubTransBase>
	if (!MathIeeeDoubTransBase)		
    524c:	    move.l 19c7a <MathIeeeDoubTransBase>,d0
    5252:	/-- bne.s 5268 <main+0x190>
		Exit(0);
    5254:	|   clr.l 60(sp)
    5258:	|   move.l 19c66 <DOSBase>,d0
    525e:	|   movea.l d0,a6
    5260:	|   move.l 60(sp),d1
    5264:	|   jsr -144(a6)

	MathIeeeDoubBasBase = (struct MathIEEEBase *) OpenLibrary("mathieeedoubbas.library",0);
    5268:	\-> move.l #90410,56(sp)
    5270:	    clr.l 52(sp)
    5274:	    move.l 19c5e <SysBase>,d0
    527a:	    movea.l d0,a6
    527c:	    movea.l 56(sp),a1
    5280:	    move.l 52(sp),d0
    5284:	    jsr -552(a6)
    5288:	    move.l d0,48(sp)
    528c:	    move.l 48(sp),d0
    5290:	    move.l d0,19c76 <MathIeeeDoubBasBase>
	if( !MathIeeeDoubBasBase) 
    5296:	    move.l 19c76 <MathIeeeDoubBasBase>,d0
    529c:	/-- bne.s 52b2 <main+0x1da>
		Exit(0);
    529e:	|   clr.l 44(sp)
    52a2:	|   move.l 19c66 <DOSBase>,d0
    52a8:	|   movea.l d0,a6
    52aa:	|   move.l 44(sp),d1
    52ae:	|   jsr -144(a6)
	

	KPrintF("Hello debugger from Amiga!\n");
    52b2:	\-> pea 16142 <incbin_player_end+0x82>
    52b8:	    jsr 12f14 <KPrintF>
    52be:	    addq.l #4,sp

	Write(Output(), (APTR)"Hello console!\n", 15);
    52c0:	    move.l 19c66 <DOSBase>,d0
    52c6:	    movea.l d0,a6
    52c8:	    jsr -60(a6)
    52cc:	    move.l d0,40(sp)
    52d0:	    move.l 40(sp),d0
    52d4:	    move.l d0,36(sp)
    52d8:	    move.l #90462,32(sp)
    52e0:	    moveq #15,d0
    52e2:	    move.l d0,28(sp)
    52e6:	    move.l 19c66 <DOSBase>,d0
    52ec:	    movea.l d0,a6
    52ee:	    move.l 36(sp),d1
    52f2:	    move.l 32(sp),d2
    52f6:	    move.l 28(sp),d3
    52fa:	    jsr -48(a6)
    52fe:	    move.l d0,24(sp)
	Delay(50);
    5302:	    moveq #50,d0
    5304:	    move.l d0,20(sp)
    5308:	    move.l 19c66 <DOSBase>,d0
    530e:	    movea.l d0,a6
    5310:	    move.l 20(sp),d1
    5314:	    jsr -198(a6)

	warpmode(1);
    5318:	    pea 1 <_start+0x1>
    531c:	    jsr 12f7e <warpmode>
    5322:	    addq.l #4,sp
	// TODO: precalc stuff here
#ifdef MUSIC
	if(p61Init(module) != 0)
    5324:	    move.l 1812e <module>,d0
    532a:	    move.l d0,-(sp)
    532c:	    jsr 508e <p61Init>
    5332:	    addq.l #4,sp
    5334:	    tst.l d0
    5336:	/-- beq.s 5346 <main+0x26e>
		KPrintF("p61Init failed!\n");
    5338:	|   pea 1616e <incbin_player_end+0xae>
    533e:	|   jsr 12f14 <KPrintF>
    5344:	|   addq.l #4,sp
#endif
	warpmode(0);
    5346:	\-> clr.l -(sp)
    5348:	    jsr 12f7e <warpmode>
    534e:	    addq.l #4,sp

	TakeSystem();
    5350:	    jsr 4e72 <TakeSystem>

	custom->dmacon = 0x87ff;
    5356:	    movea.l 19c62 <custom>,a0
    535c:	    move.w #-30721,150(a0)
	WaitVbl();
    5362:	    jsr 12e3c <WaitVbl>

	main_sludge(argc, argv);
    5368:	    move.l 148(sp),-(sp)
    536c:	    move.l 148(sp),-(sp)
    5370:	    jsr 1ad8 <main_sludge>
    5376:	    addq.l #8,sp
	debug_register_palette(colors, "image.pal", 32, 0);
	debug_register_copperlist(copper1, "copper1", 1024, 0);
	debug_register_copperlist(copper2, "copper2", sizeof(copper2), 0);*/

#ifdef MUSIC
	p61End();
    5378:	    jsr 50b2 <p61End>
#endif

	// END
	FreeSystem();
    537e:	    jsr 4f80 <FreeSystem>

	CloseLibrary((struct Library*)DOSBase);
    5384:	    move.l 19c66 <DOSBase>,16(sp)
    538c:	    move.l 19c5e <SysBase>,d0
    5392:	    movea.l d0,a6
    5394:	    movea.l 16(sp),a1
    5398:	    jsr -414(a6)
	CloseLibrary((struct Library*)GfxBase);
    539c:	    move.l 19c6a <GfxBase>,12(sp)
    53a4:	    move.l 19c5e <SysBase>,d0
    53aa:	    movea.l d0,a6
    53ac:	    movea.l 12(sp),a1
    53b0:	    jsr -414(a6)
    53b4:	    moveq #0,d0
}
    53b6:	    movem.l (sp)+,d2-d3/a6
    53ba:	    lea 128(sp),sp
    53be:	    rts

000053c0 <addStatusBar>:
#include "support/gcc8_c_support.h"

struct statusStuff mainStatus;
struct statusStuff * nowStatus = & mainStatus;

void addStatusBar () {
    53c0:	    lea -16(sp),sp
    53c4:	    move.l a6,-(sp)
	struct statusBar * newStat = AllocVec(sizeof(struct statusBar), MEMF_ANY);
    53c6:	    moveq #8,d0
    53c8:	    move.l d0,16(sp)
    53cc:	    clr.l 12(sp)
    53d0:	    move.l 19c5e <SysBase>,d0
    53d6:	    movea.l d0,a6
    53d8:	    move.l 16(sp),d0
    53dc:	    move.l 12(sp),d1
    53e0:	    jsr -684(a6)
    53e4:	    move.l d0,8(sp)
    53e8:	    move.l 8(sp),d0
    53ec:	    move.l d0,4(sp)
	if (!newStat) {
    53f0:	/-- bne.s 5420 <addStatusBar+0x60>
		newStat -> next = nowStatus -> firstStatusBar;
    53f2:	|   movea.l 18132 <nowStatus>,a0
    53f8:	|   move.l (a0),d0
    53fa:	|   movea.l 4(sp),a0
    53fe:	|   move.l d0,4(a0)
		newStat -> text = copyString ("");
    5402:	|   pea 1437d <cursors.c.412ac4f3+0x5d>
    5408:	|   jsr b8 <copyString>
    540e:	|   addq.l #4,sp
    5410:	|   movea.l 4(sp),a0
    5414:	|   move.l d0,(a0)
		nowStatus -> firstStatusBar = newStat;
    5416:	|   movea.l 18132 <nowStatus>,a0
    541c:	|   move.l 4(sp),(a0)
	}
}
    5420:	\-> nop
    5422:	    movea.l (sp)+,a6
    5424:	    lea 16(sp),sp
    5428:	    rts

0000542a <clearStatusBar>:

void clearStatusBar () {
    542a:	       lea -16(sp),sp
    542e:	       move.l a6,-(sp)
	struct statusBar * stat = nowStatus -> firstStatusBar;
    5430:	       movea.l 18132 <nowStatus>,a0
    5436:	       move.l (a0),16(sp)
	struct statusBar * kill;
	nowStatus -> litStatus = -1;
    543a:	       movea.l 18132 <nowStatus>,a0
    5440:	       moveq #-1,d0
    5442:	       move.l d0,6(a0)
	while (stat) {
    5446:	   /-- bra.s 5486 <clearStatusBar+0x5c>
		kill = stat;
    5448:	/--|-> move.l 16(sp),12(sp)
		stat = stat -> next;
    544e:	|  |   movea.l 16(sp),a0
    5452:	|  |   move.l 4(a0),16(sp)
		FreeVec(kill -> text);
    5458:	|  |   movea.l 12(sp),a0
    545c:	|  |   move.l (a0),8(sp)
    5460:	|  |   move.l 19c5e <SysBase>,d0
    5466:	|  |   movea.l d0,a6
    5468:	|  |   movea.l 8(sp),a1
    546c:	|  |   jsr -690(a6)
		FreeVec(kill);
    5470:	|  |   move.l 12(sp),4(sp)
    5476:	|  |   move.l 19c5e <SysBase>,d0
    547c:	|  |   movea.l d0,a6
    547e:	|  |   movea.l 4(sp),a1
    5482:	|  |   jsr -690(a6)
	while (stat) {
    5486:	|  \-> tst.l 16(sp)
    548a:	\----- bne.s 5448 <clearStatusBar+0x1e>
	}
	nowStatus -> firstStatusBar = NULL;
    548c:	       movea.l 18132 <nowStatus>,a0
    5492:	       clr.l (a0)
}
    5494:	       nop
    5496:	       movea.l (sp)+,a6
    5498:	       lea 16(sp),sp
    549c:	       rts

0000549e <initStatusBar>:

void initStatusBar () {
	mainStatus.firstStatusBar = NULL;
    549e:	clr.l 19c90 <mainStatus>
	mainStatus.alignStatus = IN_THE_CENTRE;
    54a4:	move.w #-1,19c94 <mainStatus+0x4>
	mainStatus.litStatus = -1;
    54ac:	moveq #-1,d0
    54ae:	move.l d0,19c96 <mainStatus+0x6>
	mainStatus.statusX = 10;
    54b4:	moveq #10,d0
    54b6:	move.l d0,19c9a <mainStatus+0xa>
	mainStatus.statusY = winHeight - 15;
    54bc:	movea.l 19b62 <winHeight>,a0
    54c2:	lea -15(a0),a0
    54c6:	move.l a0,d0
    54c8:	move.l d0,19c9e <mainStatus+0xe>
	//statusBarColour (255, 255, 255); Amiga Todo: Amigize this
	//statusBarLitColour (255, 255, 128); Amiga Todo: Amigize this
}
    54ce:	nop
    54d0:	rts

000054d2 <killLastStatus>:

void killLastStatus () {
    54d2:	    lea -12(sp),sp
    54d6:	    move.l a6,-(sp)
	if (nowStatus -> firstStatusBar) {
    54d8:	    movea.l 18132 <nowStatus>,a0
    54de:	    move.l (a0),d0
    54e0:	/-- beq.s 552a <killLastStatus+0x58>
		struct statusBar * kill = nowStatus -> firstStatusBar;
    54e2:	|   movea.l 18132 <nowStatus>,a0
    54e8:	|   move.l (a0),12(sp)
		nowStatus -> firstStatusBar = kill -> next;
    54ec:	|   movea.l 18132 <nowStatus>,a0
    54f2:	|   movea.l 12(sp),a1
    54f6:	|   move.l 4(a1),d0
    54fa:	|   move.l d0,(a0)
		FreeVec(kill -> text);
    54fc:	|   movea.l 12(sp),a0
    5500:	|   move.l (a0),8(sp)
    5504:	|   move.l 19c5e <SysBase>,d0
    550a:	|   movea.l d0,a6
    550c:	|   movea.l 8(sp),a1
    5510:	|   jsr -690(a6)
		FreeVec(kill);
    5514:	|   move.l 12(sp),4(sp)
    551a:	|   move.l 19c5e <SysBase>,d0
    5520:	|   movea.l d0,a6
    5522:	|   movea.l 4(sp),a1
    5526:	|   jsr -690(a6)
	}
}
    552a:	\-> nop
    552c:	    movea.l (sp)+,a6
    552e:	    lea 12(sp),sp
    5532:	    rts

00005534 <positionStatus>:
	}
	return TRUE;
}

void positionStatus (int x, int y) {
	nowStatus -> statusX = x;
    5534:	movea.l 18132 <nowStatus>,a0
    553a:	move.l 4(sp),10(a0)
	nowStatus -> statusY = y;
    5540:	movea.l 18132 <nowStatus>,a0
    5546:	move.l 8(sp),14(a0)
}
    554c:	nop
    554e:	rts

00005550 <saveStatusBars>:


void saveStatusBars (BPTR fp) {
    5550:	       lea -100(sp),sp
    5554:	       move.l a6,-(sp)
    5556:	       move.l d2,-(sp)
	struct statusBar * viewLine = nowStatus -> firstStatusBar;
    5558:	       movea.l 18132 <nowStatus>,a0
    555e:	       move.l (a0),104(sp)

	put2bytes (nowStatus -> alignStatus, fp);
    5562:	       movea.l 18132 <nowStatus>,a0
    5568:	       move.w 4(a0),d0
    556c:	       move.w d0,d0
    556e:	       andi.l #65535,d0
    5574:	       move.l 112(sp),-(sp)
    5578:	       move.l d0,-(sp)
    557a:	       jsr 8d0 <put2bytes>
    5580:	       addq.l #8,sp
	putSigned (nowStatus -> litStatus, fp);
    5582:	       movea.l 18132 <nowStatus>,a0
    5588:	       move.l 6(a0),d0
    558c:	       move.l d0,d0
    558e:	       movea.w d0,a0
    5590:	       move.l 112(sp),-(sp)
    5594:	       move.l a0,-(sp)
    5596:	       jsr a9c <putSigned>
    559c:	       addq.l #8,sp
	put2bytes (nowStatus -> statusX, fp);
    559e:	       movea.l 18132 <nowStatus>,a0
    55a4:	       move.l 10(a0),d0
    55a8:	       move.l 112(sp),-(sp)
    55ac:	       move.l d0,-(sp)
    55ae:	       jsr 8d0 <put2bytes>
    55b4:	       addq.l #8,sp
	put2bytes (nowStatus -> statusY, fp);
    55b6:	       movea.l 18132 <nowStatus>,a0
    55bc:	       move.l 14(a0),d0
    55c0:	       move.l 112(sp),-(sp)
    55c4:	       move.l d0,-(sp)
    55c6:	       jsr 8d0 <put2bytes>
    55cc:	       addq.l #8,sp

	FPutC (fp, nowStatus -> statusR);
    55ce:	       move.l 112(sp),100(sp)
    55d4:	       movea.l 18132 <nowStatus>,a0
    55da:	       move.l 18(a0),96(sp)
    55e0:	       move.l 19c66 <DOSBase>,d0
    55e6:	       movea.l d0,a6
    55e8:	       move.l 100(sp),d1
    55ec:	       move.l 96(sp),d2
    55f0:	       jsr -312(a6)
    55f4:	       move.l d0,92(sp)
	FPutC (fp, nowStatus -> statusG);
    55f8:	       move.l 112(sp),88(sp)
    55fe:	       movea.l 18132 <nowStatus>,a0
    5604:	       move.l 22(a0),84(sp)
    560a:	       move.l 19c66 <DOSBase>,d0
    5610:	       movea.l d0,a6
    5612:	       move.l 88(sp),d1
    5616:	       move.l 84(sp),d2
    561a:	       jsr -312(a6)
    561e:	       move.l d0,80(sp)
	FPutC (fp, nowStatus -> statusB);
    5622:	       move.l 112(sp),76(sp)
    5628:	       movea.l 18132 <nowStatus>,a0
    562e:	       move.l 26(a0),72(sp)
    5634:	       move.l 19c66 <DOSBase>,d0
    563a:	       movea.l d0,a6
    563c:	       move.l 76(sp),d1
    5640:	       move.l 72(sp),d2
    5644:	       jsr -312(a6)
    5648:	       move.l d0,68(sp)
	FPutC (fp, nowStatus -> statusLR);
    564c:	       move.l 112(sp),64(sp)
    5652:	       movea.l 18132 <nowStatus>,a0
    5658:	       move.l 30(a0),60(sp)
    565e:	       move.l 19c66 <DOSBase>,d0
    5664:	       movea.l d0,a6
    5666:	       move.l 64(sp),d1
    566a:	       move.l 60(sp),d2
    566e:	       jsr -312(a6)
    5672:	       move.l d0,56(sp)
	FPutC (fp, nowStatus -> statusLG);
    5676:	       move.l 112(sp),52(sp)
    567c:	       movea.l 18132 <nowStatus>,a0
    5682:	       move.l 34(a0),48(sp)
    5688:	       move.l 19c66 <DOSBase>,d0
    568e:	       movea.l d0,a6
    5690:	       move.l 52(sp),d1
    5694:	       move.l 48(sp),d2
    5698:	       jsr -312(a6)
    569c:	       move.l d0,44(sp)
	FPutC (fp, nowStatus -> statusLB);
    56a0:	       move.l 112(sp),40(sp)
    56a6:	       movea.l 18132 <nowStatus>,a0
    56ac:	       move.l 38(a0),36(sp)
    56b2:	       move.l 19c66 <DOSBase>,d0
    56b8:	       movea.l d0,a6
    56ba:	       move.l 40(sp),d1
    56be:	       move.l 36(sp),d2
    56c2:	       jsr -312(a6)
    56c6:	       move.l d0,32(sp)

	// Write what's being said
	while (viewLine) {
    56ca:	   /-- bra.s 570e <saveStatusBars+0x1be>
		FPutC (fp,1);
    56cc:	/--|-> move.l 112(sp),16(sp)
    56d2:	|  |   moveq #1,d0
    56d4:	|  |   move.l d0,12(sp)
    56d8:	|  |   move.l 19c66 <DOSBase>,d0
    56de:	|  |   movea.l d0,a6
    56e0:	|  |   move.l 16(sp),d1
    56e4:	|  |   move.l 12(sp),d2
    56e8:	|  |   jsr -312(a6)
    56ec:	|  |   move.l d0,8(sp)
		writeString (viewLine -> text, fp);
    56f0:	|  |   movea.l 104(sp),a0
    56f4:	|  |   move.l (a0),d0
    56f6:	|  |   move.l 112(sp),-(sp)
    56fa:	|  |   move.l d0,-(sp)
    56fc:	|  |   jsr bd8 <writeString>
    5702:	|  |   addq.l #8,sp
		viewLine = viewLine -> next;
    5704:	|  |   movea.l 104(sp),a0
    5708:	|  |   move.l 4(a0),104(sp)
	while (viewLine) {
    570e:	|  \-> tst.l 104(sp)
    5712:	\----- bne.s 56cc <saveStatusBars+0x17c>
	}
	FPutC (fp,0);
    5714:	       move.l 112(sp),28(sp)
    571a:	       clr.l 24(sp)
    571e:	       move.l 19c66 <DOSBase>,d0
    5724:	       movea.l d0,a6
    5726:	       move.l 28(sp),d1
    572a:	       move.l 24(sp),d2
    572e:	       jsr -312(a6)
    5732:	       move.l d0,20(sp)
}
    5736:	       nop
    5738:	       move.l (sp)+,d2
    573a:	       movea.l (sp)+,a6
    573c:	       lea 100(sp),sp
    5740:	       rts

00005742 <setLitStatus>:

void setLitStatus (int i) {
	nowStatus -> litStatus = i;
    5742:	movea.l 18132 <nowStatus>,a0
    5748:	move.l 4(sp),6(a0)
}
    574e:	nop
    5750:	rts

00005752 <setStatusBar>:

void setStatusBar (char * txt) {
    5752:	    subq.l #4,sp
    5754:	    move.l a6,-(sp)
    5756:	    move.l a2,-(sp)
	if (nowStatus -> firstStatusBar) {
    5758:	    movea.l 18132 <nowStatus>,a0
    575e:	    move.l (a0),d0
    5760:	/-- beq.s 5794 <setStatusBar+0x42>
		FreeVec(nowStatus -> firstStatusBar -> text);
    5762:	|   movea.l 18132 <nowStatus>,a0
    5768:	|   movea.l (a0),a0
    576a:	|   move.l (a0),8(sp)
    576e:	|   move.l 19c5e <SysBase>,d0
    5774:	|   movea.l d0,a6
    5776:	|   movea.l 8(sp),a1
    577a:	|   jsr -690(a6)
		nowStatus -> firstStatusBar -> text = copyString (txt);
    577e:	|   movea.l 18132 <nowStatus>,a0
    5784:	|   movea.l (a0),a2
    5786:	|   move.l 16(sp),-(sp)
    578a:	|   jsr b8 <copyString>
    5790:	|   addq.l #4,sp
    5792:	|   move.l d0,(a2)
	}
}
    5794:	\-> nop
    5796:	    movea.l (sp)+,a2
    5798:	    movea.l (sp)+,a6
    579a:	    addq.l #4,sp
    579c:	    rts

0000579e <statusBarText>:

const char * statusBarText () {
	if (nowStatus -> firstStatusBar) {
    579e:	       movea.l 18132 <nowStatus>,a0
    57a4:	       move.l (a0),d0
    57a6:	/----- beq.s 57b4 <statusBarText+0x16>
		return nowStatus -> firstStatusBar -> text;
    57a8:	|      movea.l 18132 <nowStatus>,a0
    57ae:	|      movea.l (a0),a0
    57b0:	|      move.l (a0),d0
    57b2:	|  /-- bra.s 57ba <statusBarText+0x1c>
	} else {
		return "";
    57b4:	\--|-> move.l #82813,d0
	}
    57ba:	   \-> rts

000057bc <addSpeechLine>:

struct speechStruct * speech;
FLOAT speechSpeed = 1;


void addSpeechLine (char * theLine, int x, int *offset) {
    57bc:	       lea -28(sp),sp
    57c0:	       movem.l d2-d5/a6,-(sp)
	int halfWidth = (stringWidth (theLine) >> 1)/cameraZoom;
    57c4:	       move.l 52(sp),-(sp)
    57c8:	       jsr 1189e <stringWidth>
    57ce:	       addq.l #4,sp
    57d0:	       asr.l #1,d0
    57d2:	       move.l d0,-(sp)
    57d4:	       jsr 134b0 <__floatsisf>
    57da:	       addq.l #4,sp
    57dc:	       move.l d0,d1
    57de:	       move.l 1814a <cameraZoom>,d0
    57e4:	       move.l d0,-(sp)
    57e6:	       move.l d1,-(sp)
    57e8:	       jsr 1335c <__divsf3>
    57ee:	       addq.l #8,sp
    57f0:	       move.l d0,-(sp)
    57f2:	       jsr 13448 <__fixsfsi>
    57f8:	       addq.l #4,sp
    57fa:	       move.l d0,44(sp)
	int xx1 = x - (halfWidth);
    57fe:	       move.l 56(sp),d0
    5802:	       sub.l 44(sp),d0
    5806:	       move.l d0,40(sp)
	int xx2 = x + (halfWidth);
    580a:	       move.l 56(sp),d0
    580e:	       add.l 44(sp),d0
    5812:	       move.l d0,36(sp)
	struct speechLine * newLine = AllocVec(sizeof(struct speechLine),MEMF_ANY);
    5816:	       moveq #12,d0
    5818:	       move.l d0,32(sp)
    581c:	       clr.l 28(sp)
    5820:	       move.l 19c5e <SysBase>,d0
    5826:	       movea.l d0,a6
    5828:	       move.l 32(sp),d0
    582c:	       move.l 28(sp),d1
    5830:	       jsr -684(a6)
    5834:	       move.l d0,24(sp)
    5838:	       move.l 24(sp),d0
    583c:	       move.l d0,20(sp)

	newLine -> next = speech -> allSpeech;
    5840:	       movea.l 19cba <speech>,a0
    5846:	       move.l 4(a0),d0
    584a:	       movea.l 20(sp),a0
    584e:	       move.l d0,4(a0)
	newLine -> textLine = copyString (theLine);
    5852:	       move.l 52(sp),-(sp)
    5856:	       jsr b8 <copyString>
    585c:	       addq.l #4,sp
    585e:	       movea.l 20(sp),a0
    5862:	       move.l d0,(a0)
	newLine -> x = xx1;
    5864:	       movea.l 20(sp),a0
    5868:	       move.l 40(sp),8(a0)
	speech -> allSpeech = newLine;
    586e:	       movea.l 19cba <speech>,a0
    5874:	       move.l 20(sp),4(a0)
	if ((xx1 < 5) && (*offset < (5 - xx1))) {
    587a:	       moveq #4,d0
    587c:	       cmp.l 40(sp),d0
    5880:	   /-- blt.s 58a2 <addSpeechLine+0xe6>
    5882:	   |   movea.l 60(sp),a0
    5886:	   |   move.l (a0),d1
    5888:	   |   moveq #5,d0
    588a:	   |   sub.l 40(sp),d0
    588e:	   |   cmp.l d1,d0
    5890:	   +-- ble.s 58a2 <addSpeechLine+0xe6>
		*offset = 5 - xx1;
    5892:	   |   moveq #5,d0
    5894:	   |   sub.l 40(sp),d0
    5898:	   |   movea.l 60(sp),a0
    589c:	   |   move.l d0,(a0)
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
		*offset = (int) ((FLOAT)winWidth/cameraZoom) - 5 - xx2;
	}
}
    589e:	/--|-- bra.w 59ce <addSpeechLine+0x212>
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
    58a2:	|  \-> move.l 36(sp),-(sp)
    58a6:	|      jsr 134b0 <__floatsisf>
    58ac:	|      addq.l #4,sp
    58ae:	|      move.l d0,d2
    58b0:	|      move.l 19b5e <winWidth>,d0
    58b6:	|      move.l d0,-(sp)
    58b8:	|      jsr 134d8 <__floatunsisf>
    58be:	|      addq.l #4,sp
    58c0:	|      move.l d0,d1
    58c2:	|      move.l 1814a <cameraZoom>,d0
    58c8:	|      move.l d0,-(sp)
    58ca:	|      move.l d1,-(sp)
    58cc:	|      jsr 1335c <__divsf3>
    58d2:	|      addq.l #8,sp
    58d4:	|      move.l #1084227584,-(sp)
    58da:	|      move.l d0,-(sp)
    58dc:	|      jsr 137a4 <__subsf3>
    58e2:	|      addq.l #8,sp
    58e4:	|      move.l d0,-(sp)
    58e6:	|      move.l d2,-(sp)
    58e8:	|      jsr 13598 <__gesf2>
    58ee:	|      addq.l #8,sp
    58f0:	|      tst.l d0
    58f2:	|  /-- bge.s 58f8 <addSpeechLine+0x13c>
}
    58f4:	+--|-- bra.w 59ce <addSpeechLine+0x212>
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
    58f8:	|  \-> movea.l 60(sp),a0
    58fc:	|      move.l (a0),d0
    58fe:	|      move.l d0,-(sp)
    5900:	|      jsr 134b0 <__floatsisf>
    5906:	|      addq.l #4,sp
    5908:	|      move.l d0,-(sp)
    590a:	|      jsr 133c8 <__extendsfdf2>
    5910:	|      addq.l #4,sp
    5912:	|      move.l d0,d4
    5914:	|      move.l d1,d5
    5916:	|      move.l 19b5e <winWidth>,d0
    591c:	|      move.l d0,-(sp)
    591e:	|      jsr 134d8 <__floatunsisf>
    5924:	|      addq.l #4,sp
    5926:	|      move.l d0,d1
    5928:	|      move.l 1814a <cameraZoom>,d0
    592e:	|      move.l d0,-(sp)
    5930:	|      move.l d1,-(sp)
    5932:	|      jsr 1335c <__divsf3>
    5938:	|      addq.l #8,sp
    593a:	|      move.l d0,-(sp)
    593c:	|      jsr 133c8 <__extendsfdf2>
    5942:	|      addq.l #4,sp
    5944:	|      clr.l -(sp)
    5946:	|      move.l #1075052544,-(sp)
    594c:	|      move.l d1,-(sp)
    594e:	|      move.l d0,-(sp)
    5950:	|      jsr 13742 <__subdf3>
    5956:	|      lea 16(sp),sp
    595a:	|      move.l d0,d2
    595c:	|      move.l d1,d3
    595e:	|      move.l 36(sp),-(sp)
    5962:	|      jsr 13470 <__floatsidf>
    5968:	|      addq.l #4,sp
    596a:	|      move.l d1,-(sp)
    596c:	|      move.l d0,-(sp)
    596e:	|      move.l d3,-(sp)
    5970:	|      move.l d2,-(sp)
    5972:	|      jsr 13742 <__subdf3>
    5978:	|      lea 16(sp),sp
    597c:	|      move.l d1,-(sp)
    597e:	|      move.l d0,-(sp)
    5980:	|      move.l d5,-(sp)
    5982:	|      move.l d4,-(sp)
    5984:	|      jsr 135ce <__gtdf2>
    598a:	|      lea 16(sp),sp
    598e:	|      tst.l d0
    5990:	|  /-- bgt.s 5994 <addSpeechLine+0x1d8>
}
    5992:	+--|-- bra.s 59ce <addSpeechLine+0x212>
		*offset = (int) ((FLOAT)winWidth/cameraZoom) - 5 - xx2;
    5994:	|  \-> move.l 19b5e <winWidth>,d0
    599a:	|      move.l d0,-(sp)
    599c:	|      jsr 134d8 <__floatunsisf>
    59a2:	|      addq.l #4,sp
    59a4:	|      move.l d0,d1
    59a6:	|      move.l 1814a <cameraZoom>,d0
    59ac:	|      move.l d0,-(sp)
    59ae:	|      move.l d1,-(sp)
    59b0:	|      jsr 1335c <__divsf3>
    59b6:	|      addq.l #8,sp
    59b8:	|      move.l d0,-(sp)
    59ba:	|      jsr 13448 <__fixsfsi>
    59c0:	|      addq.l #4,sp
    59c2:	|      subq.l #5,d0
    59c4:	|      sub.l 36(sp),d0
    59c8:	|      movea.l 60(sp),a0
    59cc:	|      move.l d0,(a0)
}
    59ce:	\----> nop
    59d0:	       movem.l (sp)+,d2-d5/a6
    59d4:	       lea 28(sp),sp
    59d8:	       rts

000059da <initSpeech>:


void initSpeech () {
    59da:	       lea -12(sp),sp
    59de:	       move.l a6,-(sp)
	speech = AllocVec(sizeof(struct speechStruct), MEMF_ANY);
    59e0:	       moveq #20,d0
    59e2:	       move.l d0,12(sp)
    59e6:	       clr.l 8(sp)
    59ea:	       move.l 19c5e <SysBase>,d0
    59f0:	       movea.l d0,a6
    59f2:	       move.l 12(sp),d0
    59f6:	       move.l 8(sp),d1
    59fa:	       jsr -684(a6)
    59fe:	       move.l d0,4(sp)
    5a02:	       move.l 4(sp),d0
    5a06:	       move.l d0,19cba <speech>
	if (speech) {
    5a0c:	       move.l 19cba <speech>,d0
    5a12:	/----- beq.s 5a3e <initSpeech+0x64>
		speech -> currentTalker = NULL;
    5a14:	|      movea.l 19cba <speech>,a0
    5a1a:	|      clr.l (a0)
		speech -> allSpeech = NULL;
    5a1c:	|      movea.l 19cba <speech>,a0
    5a22:	|      clr.l 4(a0)
		speech -> speechY = 0;
    5a26:	|      movea.l 19cba <speech>,a0
    5a2c:	|      clr.l 8(a0)
		speech -> lastFile = -1;
    5a30:	|      movea.l 19cba <speech>,a0
    5a36:	|      moveq #-1,d0
    5a38:	|      move.l d0,12(a0)
	} else
    {
        KPrintF("Could not allocate memory");
    }
}
    5a3c:	|  /-- bra.s 5a4c <initSpeech+0x72>
        KPrintF("Could not allocate memory");
    5a3e:	\--|-> pea 161a6 <incbin_player_end+0xe6>
    5a44:	   |   jsr 12f14 <KPrintF>
    5a4a:	   |   addq.l #4,sp
}
    5a4c:	   \-> nop
    5a4e:	       movea.l (sp)+,a6
    5a50:	       lea 12(sp),sp
    5a54:	       rts

00005a56 <isThereAnySpeechGoingOn>:

int isThereAnySpeechGoingOn () {
	return speech -> allSpeech ? speech -> lookWhosTalking : -1;
    5a56:	       movea.l 19cba <speech>,a0
    5a5c:	       move.l 4(a0),d0
    5a60:	/----- beq.s 5a6e <isThereAnySpeechGoingOn+0x18>
    5a62:	|      movea.l 19cba <speech>,a0
    5a68:	|      move.l 16(a0),d0
    5a6c:	|  /-- bra.s 5a70 <isThereAnySpeechGoingOn+0x1a>
    5a6e:	\--|-> moveq #-1,d0
}
    5a70:	   \-> rts

00005a72 <killAllSpeech>:

void killAllSpeech () {
    5a72:	       lea -12(sp),sp
    5a76:	       move.l a6,-(sp)
	if (speech -> lastFile != -1) {
    5a78:	       movea.l 19cba <speech>,a0
    5a7e:	       move.l 12(a0),d0
    5a82:	       moveq #-1,d1
    5a84:	       cmp.l d0,d1
    5a86:	   /-- beq.s 5a94 <killAllSpeech+0x22>
		//huntKillSound (speech -> lastFile); Amiga Todo: Replace?
		speech -> lastFile = -1;
    5a88:	   |   movea.l 19cba <speech>,a0
    5a8e:	   |   moveq #-1,d0
    5a90:	   |   move.l d0,12(a0)
	}

	if (speech -> currentTalker) {
    5a94:	   \-> movea.l 19cba <speech>,a0
    5a9a:	       move.l (a0),d0
    5a9c:	/----- beq.w 5b28 <killAllSpeech+0xb6>
		makeSilent (* (speech -> currentTalker));
    5aa0:	|      movea.l 19cba <speech>,a0
    5aa6:	|      move.l (a0),d0
    5aa8:	|      lea -120(sp),sp
    5aac:	|      move.l sp,d1
    5aae:	|      movea.l d0,a0
    5ab0:	|      moveq #120,d0
    5ab2:	|      move.l d0,-(sp)
    5ab4:	|      move.l a0,-(sp)
    5ab6:	|      move.l d1,-(sp)
    5ab8:	|      jsr 12ec8 <memcpy>
    5abe:	|      lea 12(sp),sp
    5ac2:	|      jsr 7568 <makeSilent>
    5ac8:	|      lea 120(sp),sp
		speech -> currentTalker = NULL;
    5acc:	|      movea.l 19cba <speech>,a0
    5ad2:	|      clr.l (a0)
	}
	
	struct speechLine * killMe;
	
	while (speech -> allSpeech) {
    5ad4:	+----- bra.s 5b28 <killAllSpeech+0xb6>
		killMe = speech -> allSpeech;
    5ad6:	|  /-> movea.l 19cba <speech>,a0
    5adc:	|  |   move.l 4(a0),12(sp)
		speech -> allSpeech = speech -> allSpeech -> next;
    5ae2:	|  |   movea.l 19cba <speech>,a0
    5ae8:	|  |   movea.l 4(a0),a1
    5aec:	|  |   movea.l 19cba <speech>,a0
    5af2:	|  |   move.l 4(a1),d0
    5af6:	|  |   move.l d0,4(a0)
		FreeVec(killMe -> textLine);
    5afa:	|  |   movea.l 12(sp),a0
    5afe:	|  |   move.l (a0),8(sp)
    5b02:	|  |   move.l 19c5e <SysBase>,d0
    5b08:	|  |   movea.l d0,a6
    5b0a:	|  |   movea.l 8(sp),a1
    5b0e:	|  |   jsr -690(a6)
		FreeVec(killMe);
    5b12:	|  |   move.l 12(sp),4(sp)
    5b18:	|  |   move.l 19c5e <SysBase>,d0
    5b1e:	|  |   movea.l d0,a6
    5b20:	|  |   movea.l 4(sp),a1
    5b24:	|  |   jsr -690(a6)
	while (speech -> allSpeech) {
    5b28:	\--|-> movea.l 19cba <speech>,a0
    5b2e:	   |   move.l 4(a0),d0
    5b32:	   \-- bne.s 5ad6 <killAllSpeech+0x64>
	}
}
    5b34:	       nop
    5b36:	       nop
    5b38:	       movea.l (sp)+,a6
    5b3a:	       lea 12(sp),sp
    5b3e:	       rts

00005b40 <makeTalker>:

	return TRUE;
}

void makeTalker (struct onScreenPerson *me) {
	setFrames (me, ANI_TALK);
    5b40:	pea 2 <_start+0x2>
    5b44:	move.l 8(sp),-(sp)
    5b48:	jsr 5ca0 <setFrames>
    5b4e:	addq.l #8,sp
}
    5b50:	nop
    5b52:	rts

00005b54 <saveSpeech>:

void saveSpeech (struct speechStruct * sS, BPTR fp) {
    5b54:	       lea -52(sp),sp
    5b58:	       move.l a6,-(sp)
    5b5a:	       move.l d2,-(sp)
	struct speechLine * viewLine = sS -> allSpeech;
    5b5c:	       movea.l 64(sp),a0
    5b60:	       move.l 4(a0),56(sp)
	
	putFloat (speechSpeed, fp);
    5b66:	       move.l 18136 <speechSpeed>,d0
    5b6c:	       move.l 68(sp),-(sp)
    5b70:	       move.l d0,-(sp)
    5b72:	       jsr a46 <putFloat>
    5b78:	       addq.l #8,sp
	
		// Write y co-ordinate
		put2bytes (sS -> speechY, fp);
    5b7a:	       movea.l 64(sp),a0
    5b7e:	       move.l 8(a0),d0
    5b82:	       move.l 68(sp),-(sp)
    5b86:	       move.l d0,-(sp)
    5b88:	       jsr 8d0 <put2bytes>
    5b8e:	       addq.l #8,sp
		
		// Write which character's talking
		put2bytes (sS -> lookWhosTalking, fp);		
    5b90:	       movea.l 64(sp),a0
    5b94:	       move.l 16(a0),d0
    5b98:	       move.l 68(sp),-(sp)
    5b9c:	       move.l d0,-(sp)
    5b9e:	       jsr 8d0 <put2bytes>
    5ba4:	       addq.l #8,sp
		if (sS -> currentTalker) {
    5ba6:	       movea.l 64(sp),a0
    5baa:	       move.l (a0),d0
    5bac:	   /-- beq.s 5bf0 <saveSpeech+0x9c>
			FPutC (fp, 1);
    5bae:	   |   move.l 68(sp),40(sp)
    5bb4:	   |   moveq #1,d0
    5bb6:	   |   move.l d0,36(sp)
    5bba:	   |   move.l 19c66 <DOSBase>,d0
    5bc0:	   |   movea.l d0,a6
    5bc2:	   |   move.l 40(sp),d1
    5bc6:	   |   move.l 36(sp),d2
    5bca:	   |   jsr -312(a6)
    5bce:	   |   move.l d0,32(sp)
			put2bytes (sS->currentTalker->thisType->objectNum, fp);
    5bd2:	   |   movea.l 64(sp),a0
    5bd6:	   |   movea.l (a0),a0
    5bd8:	   |   movea.l 102(a0),a0
    5bdc:	   |   move.l 4(a0),d0
    5be0:	   |   move.l 68(sp),-(sp)
    5be4:	   |   move.l d0,-(sp)
    5be6:	   |   jsr 8d0 <put2bytes>
    5bec:	   |   addq.l #8,sp
    5bee:	/--|-- bra.s 5c6c <saveSpeech+0x118>
		} else {
			FPutC (fp, 0);
    5bf0:	|  \-> move.l 68(sp),52(sp)
    5bf6:	|      clr.l 48(sp)
    5bfa:	|      move.l 19c66 <DOSBase>,d0
    5c00:	|      movea.l d0,a6
    5c02:	|      move.l 52(sp),d1
    5c06:	|      move.l 48(sp),d2
    5c0a:	|      jsr -312(a6)
    5c0e:	|      move.l d0,44(sp)
		}
		
		// Write what's being said
		while (viewLine) {
    5c12:	+----- bra.s 5c6c <saveSpeech+0x118>
			FPutC (fp, 1);
    5c14:	|  /-> move.l 68(sp),16(sp)
    5c1a:	|  |   moveq #1,d0
    5c1c:	|  |   move.l d0,12(sp)
    5c20:	|  |   move.l 19c66 <DOSBase>,d0
    5c26:	|  |   movea.l d0,a6
    5c28:	|  |   move.l 16(sp),d1
    5c2c:	|  |   move.l 12(sp),d2
    5c30:	|  |   jsr -312(a6)
    5c34:	|  |   move.l d0,8(sp)
			writeString (viewLine -> textLine, fp);
    5c38:	|  |   movea.l 56(sp),a0
    5c3c:	|  |   move.l (a0),d0
    5c3e:	|  |   move.l 68(sp),-(sp)
    5c42:	|  |   move.l d0,-(sp)
    5c44:	|  |   jsr bd8 <writeString>
    5c4a:	|  |   addq.l #8,sp
			put2bytes (viewLine -> x, fp);
    5c4c:	|  |   movea.l 56(sp),a0
    5c50:	|  |   move.l 8(a0),d0
    5c54:	|  |   move.l 68(sp),-(sp)
    5c58:	|  |   move.l d0,-(sp)
    5c5a:	|  |   jsr 8d0 <put2bytes>
    5c60:	|  |   addq.l #8,sp
			viewLine = viewLine -> next;
    5c62:	|  |   movea.l 56(sp),a0
    5c66:	|  |   move.l 4(a0),56(sp)
		while (viewLine) {
    5c6c:	\--|-> tst.l 56(sp)
    5c70:	   \-- bne.s 5c14 <saveSpeech+0xc0>
		}
		FPutC (fp, 0);
    5c72:	       move.l 68(sp),28(sp)
    5c78:	       clr.l 24(sp)
    5c7c:	       move.l 19c66 <DOSBase>,d0
    5c82:	       movea.l d0,a6
    5c84:	       move.l 28(sp),d1
    5c88:	       move.l 24(sp),d2
    5c8c:	       jsr -312(a6)
    5c90:	       move.l d0,20(sp)
}
    5c94:	       nop
    5c96:	       move.l (sp)+,d2
    5c98:	       movea.l (sp)+,a6
    5c9a:	       lea 52(sp),sp
    5c9e:	       rts

00005ca0 <setFrames>:

void setFrames (struct onScreenPerson *m, int a) {
    5ca0:	move.l d2,-(sp)
	m->myAnim = m->myPersona -> animation[(a * m->myPersona -> numDirections) + m->direction];
    5ca2:	movea.l 8(sp),a0
    5ca6:	movea.l 68(a0),a0
    5caa:	move.l (a0),d2
    5cac:	movea.l 8(sp),a0
    5cb0:	movea.l 68(a0),a0
    5cb4:	move.l 4(a0),d0
    5cb8:	move.l 12(sp),-(sp)
    5cbc:	move.l d0,-(sp)
    5cbe:	jsr 13a0a <__mulsi3>
    5cc4:	addq.l #8,sp
    5cc6:	move.l d0,d1
    5cc8:	movea.l 8(sp),a0
    5ccc:	move.l 94(a0),d0
    5cd0:	add.l d1,d0
    5cd2:	add.l d0,d0
    5cd4:	add.l d0,d0
    5cd6:	movea.l d2,a0
    5cd8:	adda.l d0,a0
    5cda:	move.l (a0),d0
    5cdc:	movea.l 8(sp),a0
    5ce0:	move.l d0,60(a0)
}
    5ce4:	nop
    5ce6:	move.l (sp)+,d2
    5ce8:	rts

00005cea <wrapSpeech>:

int wrapSpeech(char * theText, int objT, int sampleFile, BOOL animPerson) {
    5cea:	       lea -20(sp),sp
    5cee:	       move.l d2,-(sp)
    5cf0:	       move.l 40(sp),d0
    5cf4:	       move.w d0,d0
    5cf6:	       move.w d0,6(sp)
    int i;

    speech->lookWhosTalking = objT;
    5cfa:	       movea.l 19cba <speech>,a0
    5d00:	       move.l 32(sp),16(a0)
    struct onScreenPerson * thisPerson = findPerson(objT);
    5d06:	       move.l 32(sp),-(sp)
    5d0a:	       jsr 7052 <findPerson>
    5d10:	       addq.l #4,sp
    5d12:	       move.l d0,16(sp)
    if (thisPerson) {
    5d16:	   /-- beq.s 5d3c <wrapSpeech+0x52>
        //setObjFontColour(thisPerson->thisType); Todo Amigize this
        i = wrapSpeechPerson(theText, thisPerson, sampleFile, animPerson);
    5d18:	   |   movea.w 6(sp),a0
    5d1c:	   |   move.l a0,-(sp)
    5d1e:	   |   move.l 40(sp),-(sp)
    5d22:	   |   move.l 24(sp),-(sp)
    5d26:	   |   move.l 40(sp),-(sp)
    5d2a:	   |   jsr 5e02 <wrapSpeechPerson>
    5d30:	   |   lea 16(sp),sp
    5d34:	   |   move.l d0,20(sp)
    5d38:	/--|-- bra.w 5df6 <wrapSpeech+0x10c>
    } else {
        struct screenRegion * thisRegion = getRegionForObject(objT);
    5d3c:	|  \-> move.l 32(sp),-(sp)
    5d40:	|      jsr 1198a <getRegionForObject>
    5d46:	|      addq.l #4,sp
    5d48:	|      move.l d0,12(sp)
        if (thisRegion) {
    5d4c:	|  /-- beq.s 5db8 <wrapSpeech+0xce>
            //setObjFontColour(thisRegion->thisType); Todo Amigize this
            i = wrapSpeechXY(theText, ((thisRegion->x1 + thisRegion->x2) >> 1) - cameraX, thisRegion->y1 - thisRegion->thisType->speechGap - cameraY, thisRegion->thisType->wrapSpeech, sampleFile);
    5d4e:	|  |   movea.l 12(sp),a0
    5d52:	|  |   movea.l 28(a0),a0
    5d56:	|  |   move.l 28(a0),d0
    5d5a:	|  |   movea.l 12(sp),a0
    5d5e:	|  |   movea.l 4(a0),a1
    5d62:	|  |   movea.l 12(sp),a0
    5d66:	|  |   movea.l 28(a0),a0
    5d6a:	|  |   move.l 20(a0),d1
    5d6e:	|  |   movea.l a1,a0
    5d70:	|  |   suba.l d1,a0
    5d72:	|  |   move.l 19d1c <cameraY>,d1
    5d78:	|  |   movea.l a0,a1
    5d7a:	|  |   suba.l d1,a1
    5d7c:	|  |   movea.l 12(sp),a0
    5d80:	|  |   move.l (a0),d2
    5d82:	|  |   movea.l 12(sp),a0
    5d86:	|  |   move.l 8(a0),d1
    5d8a:	|  |   add.l d2,d1
    5d8c:	|  |   move.l d1,d2
    5d8e:	|  |   asr.l #1,d2
    5d90:	|  |   move.l 19d18 <cameraX>,d1
    5d96:	|  |   movea.l d2,a0
    5d98:	|  |   suba.l d1,a0
    5d9a:	|  |   move.l 36(sp),-(sp)
    5d9e:	|  |   move.l d0,-(sp)
    5da0:	|  |   move.l a1,-(sp)
    5da2:	|  |   move.l a0,-(sp)
    5da4:	|  |   move.l 44(sp),-(sp)
    5da8:	|  |   jsr 5f20 <wrapSpeechXY>
    5dae:	|  |   lea 20(sp),sp
    5db2:	|  |   move.l d0,20(sp)
    5db6:	+--|-- bra.s 5df6 <wrapSpeech+0x10c>
        } else {
            struct objectType * temp = findObjectType(objT);
    5db8:	|  \-> move.l 32(sp),-(sp)
    5dbc:	|      jsr 9d12 <findObjectType>
    5dc2:	|      addq.l #4,sp
    5dc4:	|      move.l d0,8(sp)
            //setObjFontColour(temp); Todo: Amigize this
            i = wrapSpeechXY(theText, winWidth >> 1, 10, temp->wrapSpeech, sampleFile);
    5dc8:	|      movea.l 8(sp),a0
    5dcc:	|      move.l 28(a0),d1
    5dd0:	|      move.l 19b5e <winWidth>,d0
    5dd6:	|      lsr.l #1,d0
    5dd8:	|      move.l 36(sp),-(sp)
    5ddc:	|      move.l d1,-(sp)
    5dde:	|      pea a <_start+0xa>
    5de2:	|      move.l d0,-(sp)
    5de4:	|      move.l 44(sp),-(sp)
    5de8:	|      jsr 5f20 <wrapSpeechXY>
    5dee:	|      lea 20(sp),sp
    5df2:	|      move.l d0,20(sp)
        }
    }
    return i;
    5df6:	\----> move.l 20(sp),d0
}
    5dfa:	       move.l (sp)+,d2
    5dfc:	       lea 20(sp),sp
    5e00:	       rts

00005e02 <wrapSpeechPerson>:

int wrapSpeechPerson (char * theText, struct onScreenPerson *thePerson, int sampleFile, BOOL animPerson) {
    5e02:	    subq.l #8,sp
    5e04:	    movem.l d2-d4,-(sp)
    5e08:	    move.l 36(sp),d0
    5e0c:	    move.w d0,d0
    5e0e:	    move.w d0,14(sp)
	int i = wrapSpeechXY (theText, thePerson->x - cameraX, thePerson->y - cameraY - (thePerson->scale * (thePerson->height - thePerson->floaty)) - thePerson->thisType -> speechGap, thePerson->thisType -> wrapSpeech, sampleFile);
    5e12:	    movea.l 28(sp),a0
    5e16:	    movea.l 102(a0),a0
    5e1a:	    move.l 28(a0),d2
    5e1e:	    movea.l 28(sp),a0
    5e22:	    move.l 4(a0),d3
    5e26:	    move.l 19d1c <cameraY>,d0
    5e2c:	    move.l d0,-(sp)
    5e2e:	    jsr 134b0 <__floatsisf>
    5e34:	    addq.l #4,sp
    5e36:	    move.l d0,-(sp)
    5e38:	    move.l d3,-(sp)
    5e3a:	    jsr 137a4 <__subsf3>
    5e40:	    addq.l #8,sp
    5e42:	    move.l d0,d3
    5e44:	    movea.l 28(sp),a0
    5e48:	    move.l 20(a0),d4
    5e4c:	    movea.l 28(sp),a0
    5e50:	    move.l 8(a0),d1
    5e54:	    movea.l 28(sp),a0
    5e58:	    move.l 12(a0),d0
    5e5c:	    sub.l d0,d1
    5e5e:	    move.l d1,-(sp)
    5e60:	    jsr 134b0 <__floatsisf>
    5e66:	    addq.l #4,sp
    5e68:	    move.l d0,-(sp)
    5e6a:	    move.l d4,-(sp)
    5e6c:	    jsr 13562 <__mulsf3>
    5e72:	    addq.l #8,sp
    5e74:	    move.l d0,-(sp)
    5e76:	    move.l d3,-(sp)
    5e78:	    jsr 137a4 <__subsf3>
    5e7e:	    addq.l #8,sp
    5e80:	    move.l d0,d3
    5e82:	    movea.l 28(sp),a0
    5e86:	    movea.l 102(a0),a0
    5e8a:	    move.l 20(a0),d0
    5e8e:	    move.l d0,-(sp)
    5e90:	    jsr 134b0 <__floatsisf>
    5e96:	    addq.l #4,sp
    5e98:	    move.l d0,-(sp)
    5e9a:	    move.l d3,-(sp)
    5e9c:	    jsr 137a4 <__subsf3>
    5ea2:	    addq.l #8,sp
    5ea4:	    move.l d0,-(sp)
    5ea6:	    jsr 13448 <__fixsfsi>
    5eac:	    addq.l #4,sp
    5eae:	    move.l d0,d4
    5eb0:	    movea.l 28(sp),a0
    5eb4:	    move.l (a0),d3
    5eb6:	    move.l 19d18 <cameraX>,d0
    5ebc:	    move.l d0,-(sp)
    5ebe:	    jsr 134b0 <__floatsisf>
    5ec4:	    addq.l #4,sp
    5ec6:	    move.l d0,-(sp)
    5ec8:	    move.l d3,-(sp)
    5eca:	    jsr 137a4 <__subsf3>
    5ed0:	    addq.l #8,sp
    5ed2:	    move.l d0,-(sp)
    5ed4:	    jsr 13448 <__fixsfsi>
    5eda:	    addq.l #4,sp
    5edc:	    move.l 32(sp),-(sp)
    5ee0:	    move.l d2,-(sp)
    5ee2:	    move.l d4,-(sp)
    5ee4:	    move.l d0,-(sp)
    5ee6:	    move.l 40(sp),-(sp)
    5eea:	    jsr 5f20 <wrapSpeechXY>
    5ef0:	    lea 20(sp),sp
    5ef4:	    move.l d0,16(sp)
	if (animPerson) {
    5ef8:	    tst.w 14(sp)
    5efc:	/-- beq.s 5f14 <wrapSpeechPerson+0x112>
		makeTalker (thePerson);
    5efe:	|   move.l 28(sp),-(sp)
    5f02:	|   jsr 5b40 <makeTalker>
    5f08:	|   addq.l #4,sp
		speech -> currentTalker = thePerson;
    5f0a:	|   movea.l 19cba <speech>,a0
    5f10:	|   move.l 28(sp),(a0)
	}
	return i;
    5f14:	\-> move.l 16(sp),d0
}
    5f18:	    movem.l (sp)+,d2-d4
    5f1c:	    addq.l #8,sp
    5f1e:	    rts

00005f20 <wrapSpeechXY>:

int wrapSpeechXY(char * theText, int x, int y, int wrap, int sampleFile) {
    5f20:	                   lea -16(sp),sp
    5f24:	                   movem.l d2-d4/a2,-(sp)
    int a, offset = 0;
    5f28:	                   clr.l 16(sp)
    killAllSpeech();
    5f2c:	                   jsr 5a72 <killAllSpeech>

    int speechTime = (strlen(theText) + 20) * speechSpeed;
    5f32:	                   move.l 36(sp),-(sp)
    5f36:	                   jsr 103ac <strlen>
    5f3c:	                   addq.l #4,sp
    5f3e:	                   movea.l d0,a0
    5f40:	                   lea 20(a0),a0
    5f44:	                   move.l a0,-(sp)
    5f46:	                   jsr 134d8 <__floatunsisf>
    5f4c:	                   addq.l #4,sp
    5f4e:	                   move.l d0,d1
    5f50:	                   move.l 18136 <speechSpeed>,d0
    5f56:	                   move.l d0,-(sp)
    5f58:	                   move.l d1,-(sp)
    5f5a:	                   jsr 13562 <__mulsf3>
    5f60:	                   addq.l #8,sp
    5f62:	                   move.l d0,-(sp)
    5f64:	                   jsr 13448 <__fixsfsi>
    5f6a:	                   addq.l #4,sp
    5f6c:	                   move.l d0,24(sp)
    if (speechTime < 1) speechTime = 1;
    5f70:	               /-- bgt.s 5f78 <wrapSpeechXY+0x58>
    5f72:	               |   moveq #1,d0
    5f74:	               |   move.l d0,24(sp)

    if (sampleFile != -1) {
    5f78:	               \-> moveq #-1,d1
    5f7a:	                   cmp.l 52(sp),d1
    5f7e:	               /-- beq.s 5fbe <wrapSpeechXY+0x9e>
        if (speechMode >= 1) {
    5f80:	               |   move.l 19d2c <speechMode>,d0
    5f86:	               +-- ble.s 5fbe <wrapSpeechXY+0x9e>
            if (startSound(sampleFile, FALSE)) {
    5f88:	               |   clr.l -(sp)
    5f8a:	               |   move.l 56(sp),-(sp)
    5f8e:	               |   jsr 9984 <startSound>
    5f94:	               |   addq.l #8,sp
    5f96:	               |   tst.w d0
    5f98:	               +-- beq.s 5fbe <wrapSpeechXY+0x9e>
                speechTime = -10;
    5f9a:	               |   moveq #-10,d0
    5f9c:	               |   move.l d0,24(sp)
                speech->lastFile = sampleFile;
    5fa0:	               |   movea.l 19cba <speech>,a0
    5fa6:	               |   move.l 52(sp),12(a0)
                if (speechMode == 2) return -10;
    5fac:	               |   move.l 19d2c <speechMode>,d0
    5fb2:	               |   moveq #2,d1
    5fb4:	               |   cmp.l d0,d1
    5fb6:	               +-- bne.s 5fbe <wrapSpeechXY+0x9e>
    5fb8:	               |   moveq #-10,d0
    5fba:	/--------------|-- bra.w 6244 <wrapSpeechXY+0x324>
            }
        }
    }
    speech->speechY = y;
    5fbe:	|              \-> movea.l 19cba <speech>,a0
    5fc4:	|                  move.l 44(sp),8(a0)

    while (strlen(theText) > (unsigned long) wrap) {
    5fca:	|     /----------- bra.w 607e <wrapSpeechXY+0x15e>
        a = wrap;
    5fce:	|  /--|----------> move.l 48(sp),28(sp)
        while (theText[a] != ' ') {
    5fd4:	|  |  |        /-- bra.s 5fe4 <wrapSpeechXY+0xc4>
            a--;
    5fd6:	|  |  |  /-----|-> subq.l #1,28(sp)
            if (a == 0) {
    5fda:	|  |  |  |     +-- bne.s 5fe4 <wrapSpeechXY+0xc4>
                a = wrap;
    5fdc:	|  |  |  |     |   move.l 48(sp),28(sp)
                break;
    5fe2:	|  |  |  |  /--|-- bra.s 5ff6 <wrapSpeechXY+0xd6>
        while (theText[a] != ' ') {
    5fe4:	|  |  |  |  |  \-> move.l 28(sp),d0
    5fe8:	|  |  |  |  |      movea.l 36(sp),a0
    5fec:	|  |  |  |  |      adda.l d0,a0
    5fee:	|  |  |  |  |      move.b (a0),d0
    5ff0:	|  |  |  |  |      cmpi.b #32,d0
    5ff4:	|  |  |  \--|----- bne.s 5fd6 <wrapSpeechXY+0xb6>
            }
        }
        theText[a] = 0;
    5ff6:	|  |  |     \----> move.l 28(sp),d0
    5ffa:	|  |  |            movea.l 36(sp),a0
    5ffe:	|  |  |            adda.l d0,a0
    6000:	|  |  |            clr.b (a0)
        addSpeechLine(theText, x, &offset);
    6002:	|  |  |            lea 16(sp),a0
    6006:	|  |  |            move.l a0,-(sp)
    6008:	|  |  |            move.l 44(sp),-(sp)
    600c:	|  |  |            move.l 44(sp),-(sp)
    6010:	|  |  |            jsr 57bc <addSpeechLine>
    6016:	|  |  |            lea 12(sp),sp
        theText[a] = ' ';
    601a:	|  |  |            move.l 28(sp),d0
    601e:	|  |  |            movea.l 36(sp),a0
    6022:	|  |  |            adda.l d0,a0
    6024:	|  |  |            move.b #32,(a0)
        theText += a + 1;
    6028:	|  |  |            move.l 28(sp),d0
    602c:	|  |  |            addq.l #1,d0
    602e:	|  |  |            add.l d0,36(sp)
        y -= fontHeight / cameraZoom;
    6032:	|  |  |            move.l 44(sp),-(sp)
    6036:	|  |  |            jsr 134b0 <__floatsisf>
    603c:	|  |  |            addq.l #4,sp
    603e:	|  |  |            move.l d0,d2
    6040:	|  |  |            move.l 19d52 <fontHeight>,d0
    6046:	|  |  |            move.l d0,-(sp)
    6048:	|  |  |            jsr 134b0 <__floatsisf>
    604e:	|  |  |            addq.l #4,sp
    6050:	|  |  |            move.l d0,d1
    6052:	|  |  |            move.l 1814a <cameraZoom>,d0
    6058:	|  |  |            move.l d0,-(sp)
    605a:	|  |  |            move.l d1,-(sp)
    605c:	|  |  |            jsr 1335c <__divsf3>
    6062:	|  |  |            addq.l #8,sp
    6064:	|  |  |            move.l d0,-(sp)
    6066:	|  |  |            move.l d2,-(sp)
    6068:	|  |  |            jsr 137a4 <__subsf3>
    606e:	|  |  |            addq.l #8,sp
    6070:	|  |  |            move.l d0,-(sp)
    6072:	|  |  |            jsr 13448 <__fixsfsi>
    6078:	|  |  |            addq.l #4,sp
    607a:	|  |  |            move.l d0,44(sp)
    while (strlen(theText) > (unsigned long) wrap) {
    607e:	|  |  \----------> move.l 36(sp),-(sp)
    6082:	|  |               jsr 103ac <strlen>
    6088:	|  |               addq.l #4,sp
    608a:	|  |               move.l d0,d1
    608c:	|  |               move.l 48(sp),d0
    6090:	|  |               cmp.l d1,d0
    6092:	|  \-------------- bcs.w 5fce <wrapSpeechXY+0xae>
    }
    addSpeechLine(theText, x, &offset);
    6096:	|                  lea 16(sp),a0
    609a:	|                  move.l a0,-(sp)
    609c:	|                  move.l 44(sp),-(sp)
    60a0:	|                  move.l 44(sp),-(sp)
    60a4:	|                  jsr 57bc <addSpeechLine>
    60aa:	|                  lea 12(sp),sp
    y -= fontHeight / cameraZoom;
    60ae:	|                  move.l 44(sp),-(sp)
    60b2:	|                  jsr 134b0 <__floatsisf>
    60b8:	|                  addq.l #4,sp
    60ba:	|                  move.l d0,d2
    60bc:	|                  move.l 19d52 <fontHeight>,d0
    60c2:	|                  move.l d0,-(sp)
    60c4:	|                  jsr 134b0 <__floatsisf>
    60ca:	|                  addq.l #4,sp
    60cc:	|                  move.l d0,d1
    60ce:	|                  move.l 1814a <cameraZoom>,d0
    60d4:	|                  move.l d0,-(sp)
    60d6:	|                  move.l d1,-(sp)
    60d8:	|                  jsr 1335c <__divsf3>
    60de:	|                  addq.l #8,sp
    60e0:	|                  move.l d0,-(sp)
    60e2:	|                  move.l d2,-(sp)
    60e4:	|                  jsr 137a4 <__subsf3>
    60ea:	|                  addq.l #8,sp
    60ec:	|                  move.l d0,-(sp)
    60ee:	|                  jsr 13448 <__fixsfsi>
    60f4:	|                  addq.l #4,sp
    60f6:	|                  move.l d0,44(sp)

    if (y < 0) speech->speechY -= y;
    60fa:	|              /-- bpl.s 6118 <wrapSpeechXY+0x1f8>
    60fc:	|              |   movea.l 19cba <speech>,a0
    6102:	|              |   move.l 8(a0),d0
    6106:	|              |   movea.l 19cba <speech>,a0
    610c:	|              |   sub.l 44(sp),d0
    6110:	|              |   move.l d0,8(a0)
    6114:	|           /--|-- bra.w 6206 <wrapSpeechXY+0x2e6>
    else if (speech->speechY > cameraY + (FLOAT)(winHeight - fontHeight / 3) / cameraZoom) speech->speechY = cameraY + (FLOAT)(winHeight - fontHeight / 3) / cameraZoom;
    6118:	|           |  \-> movea.l 19cba <speech>,a0
    611e:	|           |      move.l 8(a0),d0
    6122:	|           |      move.l d0,-(sp)
    6124:	|           |      jsr 134b0 <__floatsisf>
    612a:	|           |      addq.l #4,sp
    612c:	|           |      move.l d0,d2
    612e:	|           |      move.l 19d1c <cameraY>,d0
    6134:	|           |      move.l d0,-(sp)
    6136:	|           |      jsr 134b0 <__floatsisf>
    613c:	|           |      addq.l #4,sp
    613e:	|           |      move.l d0,d3
    6140:	|           |      move.l 19b62 <winHeight>,d4
    6146:	|           |      move.l 19d52 <fontHeight>,d0
    614c:	|           |      pea 3 <_start+0x3>
    6150:	|           |      move.l d0,-(sp)
    6152:	|           |      jsr 13a88 <__divsi3>
    6158:	|           |      addq.l #8,sp
    615a:	|           |      move.l d4,d1
    615c:	|           |      sub.l d0,d1
    615e:	|           |      move.l d1,-(sp)
    6160:	|           |      jsr 134d8 <__floatunsisf>
    6166:	|           |      addq.l #4,sp
    6168:	|           |      move.l d0,d1
    616a:	|           |      move.l 1814a <cameraZoom>,d0
    6170:	|           |      move.l d0,-(sp)
    6172:	|           |      move.l d1,-(sp)
    6174:	|           |      jsr 1335c <__divsf3>
    617a:	|           |      addq.l #8,sp
    617c:	|           |      move.l d0,-(sp)
    617e:	|           |      move.l d3,-(sp)
    6180:	|           |      jsr 13262 <__addsf3>
    6186:	|           |      addq.l #8,sp
    6188:	|           |      move.l d0,-(sp)
    618a:	|           |      move.l d2,-(sp)
    618c:	|           |      jsr 1361c <__gtsf2>
    6192:	|           |      addq.l #8,sp
    6194:	|           |      tst.l d0
    6196:	|           +----- ble.s 6206 <wrapSpeechXY+0x2e6>
    6198:	|           |      move.l 19d1c <cameraY>,d0
    619e:	|           |      move.l d0,-(sp)
    61a0:	|           |      jsr 134b0 <__floatsisf>
    61a6:	|           |      addq.l #4,sp
    61a8:	|           |      move.l d0,d2
    61aa:	|           |      move.l 19b62 <winHeight>,d3
    61b0:	|           |      move.l 19d52 <fontHeight>,d0
    61b6:	|           |      pea 3 <_start+0x3>
    61ba:	|           |      move.l d0,-(sp)
    61bc:	|           |      jsr 13a88 <__divsi3>
    61c2:	|           |      addq.l #8,sp
    61c4:	|           |      move.l d3,d1
    61c6:	|           |      sub.l d0,d1
    61c8:	|           |      move.l d1,-(sp)
    61ca:	|           |      jsr 134d8 <__floatunsisf>
    61d0:	|           |      addq.l #4,sp
    61d2:	|           |      move.l d0,d1
    61d4:	|           |      move.l 1814a <cameraZoom>,d0
    61da:	|           |      move.l d0,-(sp)
    61dc:	|           |      move.l d1,-(sp)
    61de:	|           |      jsr 1335c <__divsf3>
    61e4:	|           |      addq.l #8,sp
    61e6:	|           |      move.l d0,-(sp)
    61e8:	|           |      move.l d2,-(sp)
    61ea:	|           |      jsr 13262 <__addsf3>
    61f0:	|           |      addq.l #8,sp
    61f2:	|           |      movea.l 19cba <speech>,a2
    61f8:	|           |      move.l d0,-(sp)
    61fa:	|           |      jsr 13448 <__fixsfsi>
    6200:	|           |      addq.l #4,sp
    6202:	|           |      move.l d0,8(a2)

    if (offset) {
    6206:	|           \----> move.l 16(sp),d0
    620a:	|        /-------- beq.s 6240 <wrapSpeechXY+0x320>
        struct speechLine * viewLine = speech->allSpeech;
    620c:	|        |         movea.l 19cba <speech>,a0
    6212:	|        |         move.l 4(a0),20(sp)
        while (viewLine) {
    6218:	|        |     /-- bra.s 623a <wrapSpeechXY+0x31a>
            viewLine->x += offset;
    621a:	|        |  /--|-> movea.l 20(sp),a0
    621e:	|        |  |  |   move.l 8(a0),d1
    6222:	|        |  |  |   move.l 16(sp),d0
    6226:	|        |  |  |   add.l d1,d0
    6228:	|        |  |  |   movea.l 20(sp),a0
    622c:	|        |  |  |   move.l d0,8(a0)
            viewLine = viewLine->next;
    6230:	|        |  |  |   movea.l 20(sp),a0
    6234:	|        |  |  |   move.l 4(a0),20(sp)
        while (viewLine) {
    623a:	|        |  |  \-> tst.l 20(sp)
    623e:	|        |  \----- bne.s 621a <wrapSpeechXY+0x2fa>
        }
    }

    return speechTime;
    6240:	|        \-------> move.l 24(sp),d0
}
    6244:	\----------------> movem.l (sp)+,d2-d4/a2
    6248:	                   lea 16(sp),sp
    624c:	                   rts

0000624e <loadSpriteBank>:
#include <exec/types.h>

#include "sprites.h"
#include "support/gcc8_c_support.h"

BOOL loadSpriteBank (int fileNum, struct spriteBank *loadhere, BOOL isFont) {
    624e:	subq.l #4,sp
    6250:	move.l 16(sp),d0
    6254:	move.w d0,d0
    6256:	move.w d0,2(sp)
    KPrintF("loadSpriteBank: Not implemented"); //Amiga Todo
    625a:	pea 161e3 <incbin_player_end+0x123>
    6260:	jsr 12f14 <KPrintF>
    6266:	addq.l #4,sp
    return TRUE;
    6268:	moveq #1,d0
}    
    626a:	addq.l #4,sp
    626c:	rts

0000626e <TF_abs>:

short int scaleHorizon = 75;
short int scaleDivide = 150;

int TF_abs (int a) {
	return (a > 0) ? a : -a;
    626e:	    move.l 4(sp),d0
    6272:	/-- bpl.s 6276 <TF_abs+0x8>
    6274:	|   neg.l d0
}
    6276:	\-> rts

00006278 <addPerson>:


BOOL addPerson(int x, int y, int objNum, struct persona *p) {
    6278:	             lea -28(sp),sp
    627c:	             move.l a6,-(sp)
    627e:	             move.l d2,-(sp)
    struct onScreenPerson *newPerson = AllocVec(sizeof(struct onScreenPerson), MEMF_ANY);
    6280:	             moveq #120,d0
    6282:	             move.l d0,28(sp)
    6286:	             clr.l 24(sp)
    628a:	             move.l 19c5e <SysBase>,d0
    6290:	             movea.l d0,a6
    6292:	             move.l 28(sp),d0
    6296:	             move.l 24(sp),d1
    629a:	             jsr -684(a6)
    629e:	             move.l d0,20(sp)
    62a2:	             move.l 20(sp),d0
    62a6:	             move.l d0,16(sp)
    if (!newPerson) return FALSE;
    62aa:	         /-- bne.s 62b2 <addPerson+0x3a>
    62ac:	         |   clr.w d0
    62ae:	/--------|-- bra.w 64e0 <addPerson+0x268>

    // EASY STUFF
    newPerson->thisType = loadObjectType(objNum);
    62b2:	|        \-> move.l 48(sp),-(sp)
    62b6:	|            jsr 9e02 <loadObjectType>
    62bc:	|            addq.l #4,sp
    62be:	|            movea.l 16(sp),a0
    62c2:	|            move.l d0,102(a0)
    newPerson->scale = 1;
    62c6:	|            movea.l 16(sp),a0
    62ca:	|            move.l #1065353216,20(a0)
    newPerson->extra = 0;
    62d2:	|            movea.l 16(sp),a0
    62d6:	|            clr.l 106(a0)
    newPerson->continueAfterWalking = NULL;
    62da:	|            movea.l 16(sp),a0
    62de:	|            clr.l 56(a0)
    moveAndScale(newPerson, x, y);
    62e2:	|            move.l 44(sp),-(sp)
    62e6:	|            jsr 134b0 <__floatsisf>
    62ec:	|            addq.l #4,sp
    62ee:	|            move.l d0,d2
    62f0:	|            move.l 40(sp),-(sp)
    62f4:	|            jsr 134b0 <__floatsisf>
    62fa:	|            addq.l #4,sp
    62fc:	|            move.l d2,-(sp)
    62fe:	|            move.l d0,-(sp)
    6300:	|            move.l 24(sp),-(sp)
    6304:	|            jsr 779a <moveAndScale>
    630a:	|            lea 12(sp),sp
    newPerson->frameNum = 0;
    630e:	|            movea.l 16(sp),a0
    6312:	|            clr.l 72(a0)
    newPerson->walkToX = x;
    6316:	|            movea.l 16(sp),a0
    631a:	|            move.l 40(sp),28(a0)
    newPerson->walkToY = y;
    6320:	|            movea.l 16(sp),a0
    6324:	|            move.l 44(sp),32(a0)
    newPerson->walking = FALSE;
    632a:	|            movea.l 16(sp),a0
    632e:	|            clr.w 52(a0)
    newPerson->spinning = FALSE;
    6332:	|            movea.l 16(sp),a0
    6336:	|            clr.w 54(a0)
    newPerson->show = TRUE;
    633a:	|            movea.l 16(sp),a0
    633e:	|            move.w #1,92(a0)
    newPerson->direction = 0;
    6344:	|            movea.l 16(sp),a0
    6348:	|            clr.l 94(a0)
    newPerson->angle = 180;
    634c:	|            movea.l 16(sp),a0
    6350:	|            move.l #180,80(a0)
    newPerson->wantAngle = 180;
    6358:	|            movea.l 16(sp),a0
    635c:	|            move.l #180,84(a0)
    newPerson->angleOffset = 0;
    6364:	|            movea.l 16(sp),a0
    6368:	|            clr.l 88(a0)
    newPerson->floaty = 0;
    636c:	|            movea.l 16(sp),a0
    6370:	|            clr.l 12(a0)
    newPerson->walkSpeed = newPerson->thisType->walkSpeed;
    6374:	|            movea.l 16(sp),a0
    6378:	|            movea.l 102(a0),a0
    637c:	|            move.l 24(a0),d0
    6380:	|            movea.l 16(sp),a0
    6384:	|            move.l d0,16(a0)
    newPerson->myAnim = NULL;
    6388:	|            movea.l 16(sp),a0
    638c:	|            clr.l 60(a0)
    newPerson->spinSpeed = newPerson->thisType->spinSpeed;
    6390:	|            movea.l 16(sp),a0
    6394:	|            movea.l 102(a0),a0
    6398:	|            move.l 32(a0),d0
    639c:	|            movea.l 16(sp),a0
    63a0:	|            move.l d0,110(a0)
    newPerson->r = 0;
    63a4:	|            movea.l 16(sp),a0
    63a8:	|            clr.b 114(a0)
    newPerson->g = 0;
    63ac:	|            movea.l 16(sp),a0
    63b0:	|            clr.b 115(a0)
    newPerson->b = 0;
    63b4:	|            movea.l 16(sp),a0
    63b8:	|            clr.b 116(a0)
    newPerson->colourmix = 0;
    63bc:	|            movea.l 16(sp),a0
    63c0:	|            clr.b 117(a0)
    newPerson->transparency = 0;
    63c4:	|            movea.l 16(sp),a0
    63c8:	|            clr.b 118(a0)
    newPerson->myPersona = p;
    63cc:	|            movea.l 16(sp),a0
    63d0:	|            move.l 52(sp),68(a0)

    setFrames(newPerson, ANI_STAND);
    63d6:	|            clr.l -(sp)
    63d8:	|            move.l 20(sp),-(sp)
    63dc:	|            jsr 5ca0 <setFrames>
    63e2:	|            addq.l #8,sp

    // HEIGHT (BASED ON 1st FRAME OF 1st ANIMATION... INC. SPECIAL CASES)
    int fNumSigned = p->animation[0]->frames[0].frameNum;
    63e4:	|            movea.l 52(sp),a0
    63e8:	|            movea.l (a0),a0
    63ea:	|            movea.l (a0),a0
    63ec:	|            movea.l 4(a0),a0
    63f0:	|            move.l (a0),12(sp)
    int fNum = fNumSigned < 0 ? fNumSigned * - 1 : 1;
    63f4:	|     /----- bpl.s 63fe <addPerson+0x186>
    63f6:	|     |      move.l 12(sp),d0
    63fa:	|     |      neg.l d0
    63fc:	|     |  /-- bra.s 6400 <addPerson+0x188>
    63fe:	|     \--|-> moveq #1,d0
    6400:	|        \-> move.l d0,8(sp)
    if (fNum >= p->animation[0]->theSprites->bank.total) {
    6404:	|            movea.l 52(sp),a0
    6408:	|            movea.l (a0),a0
    640a:	|            movea.l (a0),a0
    640c:	|            movea.l (a0),a0
    640e:	|            move.l 8(a0),d0
    6412:	|            cmp.l 8(sp),d0
    6416:	|     /----- bgt.s 6448 <addPerson+0x1d0>
        if (fNumSigned < 0) {
    6418:	|     |      tst.l 12(sp)
    641c:	|     |  /-- bge.s 642a <addPerson+0x1b2>
            newPerson->height = 5;
    641e:	|     |  |   movea.l 16(sp),a0
    6422:	|     |  |   moveq #5,d1
    6424:	|     |  |   move.l d1,8(a0)
    6428:	|  /--|--|-- bra.s 6472 <addPerson+0x1fa>
        } else {
            newPerson->height = p->animation[0]->theSprites->bank.sprites[0].yhot + 5;
    642a:	|  |  |  \-> movea.l 52(sp),a0
    642e:	|  |  |      movea.l (a0),a0
    6430:	|  |  |      movea.l (a0),a0
    6432:	|  |  |      movea.l (a0),a0
    6434:	|  |  |      movea.l 16(a0),a0
    6438:	|  |  |      move.l 12(a0),d0
    643c:	|  |  |      addq.l #5,d0
    643e:	|  |  |      movea.l 16(sp),a0
    6442:	|  |  |      move.l d0,8(a0)
    6446:	|  +--|----- bra.s 6472 <addPerson+0x1fa>
        }
    } else {
        newPerson->height = p->animation[0]->theSprites->bank.sprites[fNum].yhot + 5;
    6448:	|  |  \----> movea.l 52(sp),a0
    644c:	|  |         movea.l (a0),a0
    644e:	|  |         movea.l (a0),a0
    6450:	|  |         movea.l (a0),a0
    6452:	|  |         movea.l 16(a0),a0
    6456:	|  |         move.l 8(sp),d1
    645a:	|  |         move.l d1,d0
    645c:	|  |         add.l d0,d0
    645e:	|  |         add.l d1,d0
    6460:	|  |         lsl.l #3,d0
    6462:	|  |         adda.l d0,a0
    6464:	|  |         move.l 12(a0),d0
    6468:	|  |         addq.l #5,d0
    646a:	|  |         movea.l 16(sp),a0
    646e:	|  |         move.l d0,8(a0)
    }

    // NOW ADD IT IN THE RIGHT PLACE
    struct onScreenPerson **changethat = &allPeople;
    6472:	|  \-------> move.l #105662,32(sp)

    while (((*changethat) != NULL) && ((*changethat)->y < y)) {
    647a:	|        /-- bra.s 648a <addPerson+0x212>
        changethat = &((*changethat)->next);
    647c:	|     /--|-> movea.l 32(sp),a0
    6480:	|     |  |   move.l (a0),d0
    6482:	|     |  |   moveq #24,d1
    6484:	|     |  |   add.l d0,d1
    6486:	|     |  |   move.l d1,32(sp)
    while (((*changethat) != NULL) && ((*changethat)->y < y)) {
    648a:	|     |  \-> movea.l 32(sp),a0
    648e:	|     |      move.l (a0),d0
    6490:	|     |  /-- beq.s 64b8 <addPerson+0x240>
    6492:	|     |  |   movea.l 32(sp),a0
    6496:	|     |  |   movea.l (a0),a0
    6498:	|     |  |   move.l 4(a0),d2
    649c:	|     |  |   move.l 44(sp),-(sp)
    64a0:	|     |  |   jsr 134b0 <__floatsisf>
    64a6:	|     |  |   addq.l #4,sp
    64a8:	|     |  |   move.l d0,-(sp)
    64aa:	|     |  |   move.l d2,-(sp)
    64ac:	|     |  |   jsr 136d6 <__ltsf2>
    64b2:	|     |  |   addq.l #8,sp
    64b4:	|     |  |   tst.l d0
    64b6:	|     \--|-- blt.s 647c <addPerson+0x204>
    }

    newPerson->next = (*changethat);
    64b8:	|        \-> movea.l 32(sp),a0
    64bc:	|            move.l (a0),d0
    64be:	|            movea.l 16(sp),a0
    64c2:	|            move.l d0,24(a0)
    (*changethat) = newPerson;
    64c6:	|            movea.l 32(sp),a0
    64ca:	|            move.l 16(sp),(a0)

    return (BOOL) (newPerson->thisType != NULL);
    64ce:	|            movea.l 16(sp),a0
    64d2:	|            move.l 102(a0),d0
    64d6:	|            sne d0
    64d8:	|            neg.b d0
    64da:	|            move.b d0,d0
    64dc:	|            andi.w #255,d0
}
    64e0:	\----------> move.l (sp)+,d2
    64e2:	             movea.l (sp)+,a6
    64e4:	             lea 28(sp),sp
    64e8:	             rts

000064ea <animatePerson>:

void animatePerson (int obj, struct personaAnimation * fram) { // Set a new SINGLE animation
    64ea:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(obj);
    64ec:	       move.l 8(sp),-(sp)
    64f0:	       jsr 7052 <findPerson>
    64f6:	       addq.l #4,sp
    64f8:	       move.l d0,(sp)
    if (moveMe) {
    64fa:	/----- beq.s 652e <animatePerson+0x44>
        if (moveMe -> continueAfterWalking) abortFunction(moveMe -> continueAfterWalking);
    64fc:	|      movea.l (sp),a0
    64fe:	|      move.l 56(a0),d0
    6502:	|  /-- beq.s 6514 <animatePerson+0x2a>
    6504:	|  |   movea.l (sp),a0
    6506:	|  |   move.l 56(a0),d0
    650a:	|  |   move.l d0,-(sp)
    650c:	|  |   jsr 2546 <abortFunction>
    6512:	|  |   addq.l #4,sp
        moveMe -> continueAfterWalking = NULL;
    6514:	|  \-> movea.l (sp),a0
    6516:	|      clr.l 56(a0)
        moveMe -> walking = FALSE;
    651a:	|      movea.l (sp),a0
    651c:	|      clr.w 52(a0)
        moveMe -> spinning = FALSE;
    6520:	|      movea.l (sp),a0
    6522:	|      clr.w 54(a0)
        moveMe -> myAnim = fram;
    6526:	|      movea.l (sp),a0
    6528:	|      move.l 12(sp),60(a0)
    }
}
    652e:	\----> nop
    6530:	       addq.l #4,sp
    6532:	       rts

00006534 <animatePersonUsingPersona>:

void animatePersonUsingPersona (int obj, struct persona * per) { // Set a new costume
    6534:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(obj);
    6536:	       move.l 8(sp),-(sp)
    653a:	       jsr 7052 <findPerson>
    6540:	       addq.l #4,sp
    6542:	       move.l d0,(sp)
    if (moveMe) {
    6544:	/----- beq.s 6586 <animatePersonUsingPersona+0x52>
        // if (moveMe -> continueAfterWalking) abortFunction (moveMe -> continueAfterWalking);
        // moveMe -> continueAfterWalking = NULL;
        // moveMe -> walking = false;
        moveMe -> spinning = FALSE;
    6546:	|      movea.l (sp),a0
    6548:	|      clr.w 54(a0)
        moveMe -> myPersona = per;
    654c:	|      movea.l (sp),a0
    654e:	|      move.l 12(sp),68(a0)
        rethinkAngle(moveMe);
    6554:	|      move.l (sp),-(sp)
    6556:	|      jsr 78e4 <rethinkAngle>
    655c:	|      addq.l #4,sp
        if (moveMe->walking) {
    655e:	|      movea.l (sp),a0
    6560:	|      move.w 52(a0),d0
    6564:	|  /-- beq.s 6578 <animatePersonUsingPersona+0x44>
            setFrames(moveMe, ANI_WALK);
    6566:	|  |   pea 1 <_start+0x1>
    656a:	|  |   move.l 4(sp),-(sp)
    656e:	|  |   jsr 5ca0 <setFrames>
    6574:	|  |   addq.l #8,sp
        } else {
            setFrames(moveMe, ANI_STAND);
        }
    }
}
    6576:	+--|-- bra.s 6586 <animatePersonUsingPersona+0x52>
            setFrames(moveMe, ANI_STAND);
    6578:	|  \-> clr.l -(sp)
    657a:	|      move.l 4(sp),-(sp)
    657e:	|      jsr 5ca0 <setFrames>
    6584:	|      addq.l #8,sp
}
    6586:	\----> nop
    6588:	       addq.l #4,sp
    658a:	       rts

0000658c <copyAnim>:


struct personaAnimation * copyAnim (struct personaAnimation * orig) {
    658c:	             lea -36(sp),sp
    6590:	             move.l a6,-(sp)
	int num = orig -> numFrames;
    6592:	             movea.l 44(sp),a0
    6596:	             move.l 8(a0),32(sp)

	struct personaAnimation * newAnim	= AllocVec(sizeof( struct personaAnimation), MEMF_ANY);
    659c:	             moveq #12,d0
    659e:	             move.l d0,28(sp)
    65a2:	             clr.l 24(sp)
    65a6:	             move.l 19c5e <SysBase>,d0
    65ac:	             movea.l d0,a6
    65ae:	             move.l 28(sp),d0
    65b2:	             move.l 24(sp),d1
    65b6:	             jsr -684(a6)
    65ba:	             move.l d0,20(sp)
    65be:	             move.l 20(sp),d0
    65c2:	             move.l d0,16(sp)
	if (!(newAnim)) {
    65c6:	         /-- bne.s 65dc <copyAnim+0x50>
		KPrintF("copyAnim: Cannot allocate memory");
    65c8:	         |   pea 16203 <incbin_player_end+0x143>
    65ce:	         |   jsr 12f14 <KPrintF>
    65d4:	         |   addq.l #4,sp
		return NULL;
    65d6:	         |   moveq #0,d0
    65d8:	/--------|-- bra.w 671e <copyAnim+0x192>
	}

	// Copy the easy bits...
	newAnim -> theSprites		= orig -> theSprites;
    65dc:	|        \-> movea.l 44(sp),a0
    65e0:	|            move.l (a0),d0
    65e2:	|            movea.l 16(sp),a0
    65e6:	|            move.l d0,(a0)
	newAnim -> numFrames		= num;
    65e8:	|            movea.l 16(sp),a0
    65ec:	|            move.l 32(sp),8(a0)

	if (num) {
    65f2:	|  /-------- beq.w 6712 <copyAnim+0x186>

		// Argh! Frames! We need a whole NEW array of animFrame structures...

		newAnim->frames = AllocVec(sizeof(struct animFrame) * num, MEMF_ANY);
    65f6:	|  |         move.l 32(sp),d1
    65fa:	|  |         move.l d1,d0
    65fc:	|  |         add.l d0,d0
    65fe:	|  |         add.l d1,d0
    6600:	|  |         add.l d0,d0
    6602:	|  |         add.l d0,d0
    6604:	|  |         move.l d0,12(sp)
    6608:	|  |         clr.l 8(sp)
    660c:	|  |         move.l 19c5e <SysBase>,d0
    6612:	|  |         movea.l d0,a6
    6614:	|  |         move.l 12(sp),d0
    6618:	|  |         move.l 8(sp),d1
    661c:	|  |         jsr -684(a6)
    6620:	|  |         move.l d0,4(sp)
    6624:	|  |         move.l 4(sp),d0
    6628:	|  |         movea.l 16(sp),a0
    662c:	|  |         move.l d0,4(a0)
		if (!newAnim->frames) {
    6630:	|  |         movea.l 16(sp),a0
    6634:	|  |         move.l 4(a0),d0
    6638:	|  |     /-- bne.s 664e <copyAnim+0xc2>
			KPrintF("copyAnim: Cannot allocate memory");
    663a:	|  |     |   pea 16203 <incbin_player_end+0x143>
    6640:	|  |     |   jsr 12f14 <KPrintF>
    6646:	|  |     |   addq.l #4,sp
			return NULL;
    6648:	|  |     |   moveq #0,d0
    664a:	+--|-----|-- bra.w 671e <copyAnim+0x192>
		}

		for (int a = 0; a < num; a ++) {
    664e:	|  |     \-> clr.l 36(sp)
    6652:	|  |     /-- bra.w 6704 <copyAnim+0x178>
			newAnim -> frames[a].frameNum = orig -> frames[a].frameNum;
    6656:	|  |  /--|-> movea.l 44(sp),a0
    665a:	|  |  |  |   movea.l 4(a0),a0
    665e:	|  |  |  |   move.l 36(sp),d1
    6662:	|  |  |  |   move.l d1,d0
    6664:	|  |  |  |   add.l d0,d0
    6666:	|  |  |  |   add.l d1,d0
    6668:	|  |  |  |   add.l d0,d0
    666a:	|  |  |  |   add.l d0,d0
    666c:	|  |  |  |   lea (0,a0,d0.l),a1
    6670:	|  |  |  |   movea.l 16(sp),a0
    6674:	|  |  |  |   movea.l 4(a0),a0
    6678:	|  |  |  |   move.l 36(sp),d1
    667c:	|  |  |  |   move.l d1,d0
    667e:	|  |  |  |   add.l d0,d0
    6680:	|  |  |  |   add.l d1,d0
    6682:	|  |  |  |   add.l d0,d0
    6684:	|  |  |  |   add.l d0,d0
    6686:	|  |  |  |   adda.l d0,a0
    6688:	|  |  |  |   move.l (a1),d0
    668a:	|  |  |  |   move.l d0,(a0)
			newAnim -> frames[a].howMany = orig -> frames[a].howMany;
    668c:	|  |  |  |   movea.l 44(sp),a0
    6690:	|  |  |  |   movea.l 4(a0),a0
    6694:	|  |  |  |   move.l 36(sp),d1
    6698:	|  |  |  |   move.l d1,d0
    669a:	|  |  |  |   add.l d0,d0
    669c:	|  |  |  |   add.l d1,d0
    669e:	|  |  |  |   add.l d0,d0
    66a0:	|  |  |  |   add.l d0,d0
    66a2:	|  |  |  |   lea (0,a0,d0.l),a1
    66a6:	|  |  |  |   movea.l 16(sp),a0
    66aa:	|  |  |  |   movea.l 4(a0),a0
    66ae:	|  |  |  |   move.l 36(sp),d1
    66b2:	|  |  |  |   move.l d1,d0
    66b4:	|  |  |  |   add.l d0,d0
    66b6:	|  |  |  |   add.l d1,d0
    66b8:	|  |  |  |   add.l d0,d0
    66ba:	|  |  |  |   add.l d0,d0
    66bc:	|  |  |  |   adda.l d0,a0
    66be:	|  |  |  |   move.l 4(a1),d0
    66c2:	|  |  |  |   move.l d0,4(a0)
			newAnim -> frames[a].noise = orig -> frames[a].noise;
    66c6:	|  |  |  |   movea.l 44(sp),a0
    66ca:	|  |  |  |   movea.l 4(a0),a0
    66ce:	|  |  |  |   move.l 36(sp),d1
    66d2:	|  |  |  |   move.l d1,d0
    66d4:	|  |  |  |   add.l d0,d0
    66d6:	|  |  |  |   add.l d1,d0
    66d8:	|  |  |  |   add.l d0,d0
    66da:	|  |  |  |   add.l d0,d0
    66dc:	|  |  |  |   lea (0,a0,d0.l),a1
    66e0:	|  |  |  |   movea.l 16(sp),a0
    66e4:	|  |  |  |   movea.l 4(a0),a0
    66e8:	|  |  |  |   move.l 36(sp),d1
    66ec:	|  |  |  |   move.l d1,d0
    66ee:	|  |  |  |   add.l d0,d0
    66f0:	|  |  |  |   add.l d1,d0
    66f2:	|  |  |  |   add.l d0,d0
    66f4:	|  |  |  |   add.l d0,d0
    66f6:	|  |  |  |   adda.l d0,a0
    66f8:	|  |  |  |   move.l 8(a1),d0
    66fc:	|  |  |  |   move.l d0,8(a0)
		for (int a = 0; a < num; a ++) {
    6700:	|  |  |  |   addq.l #1,36(sp)
    6704:	|  |  |  \-> move.l 36(sp),d0
    6708:	|  |  |      cmp.l 32(sp),d0
    670c:	|  |  \----- blt.w 6656 <copyAnim+0xca>
    6710:	|  |     /-- bra.s 671a <copyAnim+0x18e>
		}
	} else {
		newAnim -> frames = NULL;
    6712:	|  \-----|-> movea.l 16(sp),a0
    6716:	|        |   clr.l 4(a0)
	}

	return newAnim;
    671a:	|        \-> move.l 16(sp),d0
}
    671e:	\----------> movea.l (sp)+,a6
    6720:	             lea 36(sp),sp
    6724:	             rts

00006726 <createPersonaAnim>:


struct personaAnimation * createPersonaAnim (int num, struct variableStack **stacky) {
    6726:	                lea -44(sp),sp
    672a:	                move.l a6,-(sp)
    672c:	                move.l d2,-(sp)
	struct personaAnimation * newP = AllocVec( sizeof(struct personaAnimation), MEMF_ANY);
    672e:	                moveq #12,d0
    6730:	                move.l d0,40(sp)
    6734:	                clr.l 36(sp)
    6738:	                move.l 19c5e <SysBase>,d0
    673e:	                movea.l d0,a6
    6740:	                move.l 40(sp),d0
    6744:	                move.l 36(sp),d1
    6748:	                jsr -684(a6)
    674c:	                move.l d0,32(sp)
    6750:	                move.l 32(sp),d0
    6754:	                move.l d0,28(sp)
	if( !newP) {
    6758:	            /-- bne.s 676e <createPersonaAnim+0x48>
		KPrintF("createPersonaAnim: Cannot allocate memory");
    675a:	            |   pea 16224 <incbin_player_end+0x164>
    6760:	            |   jsr 12f14 <KPrintF>
    6766:	            |   addq.l #4,sp
		return NULL;
    6768:	            |   moveq #0,d0
    676a:	/-----------|-- bra.w 693e <createPersonaAnim+0x218>
	}

	newP -> numFrames = num;
    676e:	|           \-> movea.l 28(sp),a0
    6772:	|               move.l 56(sp),8(a0)
	newP -> frames = AllocVec( sizeof( struct animFrame) * num,MEMF_ANY);
    6778:	|               move.l 56(sp),d1
    677c:	|               move.l d1,d0
    677e:	|               add.l d0,d0
    6780:	|               add.l d1,d0
    6782:	|               add.l d0,d0
    6784:	|               add.l d0,d0
    6786:	|               move.l d0,24(sp)
    678a:	|               clr.l 20(sp)
    678e:	|               move.l 19c5e <SysBase>,d0
    6794:	|               movea.l d0,a6
    6796:	|               move.l 24(sp),d0
    679a:	|               move.l 20(sp),d1
    679e:	|               jsr -684(a6)
    67a2:	|               move.l d0,16(sp)
    67a6:	|               move.l 16(sp),d0
    67aa:	|               movea.l 28(sp),a0
    67ae:	|               move.l d0,4(a0)
	if( !newP->frames) {
    67b2:	|               movea.l 28(sp),a0
    67b6:	|               move.l 4(a0),d0
    67ba:	|           /-- bne.s 67d0 <createPersonaAnim+0xaa>
		KPrintF("createPersonaAnim: Cannot allocate memory");
    67bc:	|           |   pea 16224 <incbin_player_end+0x164>
    67c2:	|           |   jsr 12f14 <KPrintF>
    67c8:	|           |   addq.l #4,sp
		return NULL;
    67ca:	|           |   moveq #0,d0
    67cc:	+-----------|-- bra.w 693e <createPersonaAnim+0x218>
	}

	int a = num, frameNum, howMany;
    67d0:	|           \-> move.l 56(sp),48(sp)

	struct variableStack *tmp = *stacky;
    67d6:	|               movea.l 60(sp),a0
    67da:	|               move.l (a0),44(sp)
	while (a) {
    67de:	|     /-------- bra.w 6932 <createPersonaAnim+0x20c>
		a --;
    67e2:	|  /--|-------> subq.l #1,48(sp)
		newP -> frames[a].noise = 0;
    67e6:	|  |  |         movea.l 28(sp),a0
    67ea:	|  |  |         movea.l 4(a0),a0
    67ee:	|  |  |         move.l 48(sp),d1
    67f2:	|  |  |         move.l d1,d0
    67f4:	|  |  |         add.l d0,d0
    67f6:	|  |  |         add.l d1,d0
    67f8:	|  |  |         add.l d0,d0
    67fa:	|  |  |         add.l d0,d0
    67fc:	|  |  |         adda.l d0,a0
    67fe:	|  |  |         clr.l 8(a0)
		if ( tmp->thisVar.varType == SVT_FILE) {
    6802:	|  |  |         movea.l 44(sp),a0
    6806:	|  |  |         move.l (a0),d0
    6808:	|  |  |         moveq #5,d1
    680a:	|  |  |         cmp.l d0,d1
    680c:	|  |  |     /-- bne.s 6838 <createPersonaAnim+0x112>
			newP -> frames[a].noise = tmp -> thisVar.varData.intValue;
    680e:	|  |  |     |   movea.l 28(sp),a0
    6812:	|  |  |     |   movea.l 4(a0),a0
    6816:	|  |  |     |   move.l 48(sp),d1
    681a:	|  |  |     |   move.l d1,d0
    681c:	|  |  |     |   add.l d0,d0
    681e:	|  |  |     |   add.l d1,d0
    6820:	|  |  |     |   add.l d0,d0
    6822:	|  |  |     |   add.l d0,d0
    6824:	|  |  |     |   lea (0,a0,d0.l),a1
    6828:	|  |  |     |   movea.l 44(sp),a0
    682c:	|  |  |     |   move.l 4(a0),d0
    6830:	|  |  |     |   move.l d0,8(a1)
    6834:	|  |  |  /--|-- bra.w 68e0 <createPersonaAnim+0x1ba>
		} else if ( tmp -> thisVar.varType == SVT_FUNC) {
    6838:	|  |  |  |  \-> movea.l 44(sp),a0
    683c:	|  |  |  |      move.l (a0),d0
    683e:	|  |  |  |      moveq #2,d1
    6840:	|  |  |  |      cmp.l d0,d1
    6842:	|  |  |  |  /-- bne.s 686e <createPersonaAnim+0x148>
			newP -> frames[a].noise = - tmp -> thisVar.varData.intValue;
    6844:	|  |  |  |  |   movea.l 44(sp),a0
    6848:	|  |  |  |  |   move.l 4(a0),d2
    684c:	|  |  |  |  |   movea.l 28(sp),a0
    6850:	|  |  |  |  |   movea.l 4(a0),a0
    6854:	|  |  |  |  |   move.l 48(sp),d1
    6858:	|  |  |  |  |   move.l d1,d0
    685a:	|  |  |  |  |   add.l d0,d0
    685c:	|  |  |  |  |   add.l d1,d0
    685e:	|  |  |  |  |   add.l d0,d0
    6860:	|  |  |  |  |   add.l d0,d0
    6862:	|  |  |  |  |   adda.l d0,a0
    6864:	|  |  |  |  |   move.l d2,d0
    6866:	|  |  |  |  |   neg.l d0
    6868:	|  |  |  |  |   move.l d0,8(a0)
    686c:	|  |  |  +--|-- bra.s 68e0 <createPersonaAnim+0x1ba>
		} else if ( tmp -> thisVar.varType == SVT_STACK) {
    686e:	|  |  |  |  \-> movea.l 44(sp),a0
    6872:	|  |  |  |      move.l (a0),d0
    6874:	|  |  |  |      moveq #6,d1
    6876:	|  |  |  |      cmp.l d0,d1
    6878:	|  |  |  |  /-- bne.s 68c0 <createPersonaAnim+0x19a>
			getValueType (&frameNum, SVT_INT, &tmp->thisVar.varData.theStack -> first -> thisVar);
    687a:	|  |  |  |  |   movea.l 44(sp),a0
    687e:	|  |  |  |  |   movea.l 4(a0),a0
    6882:	|  |  |  |  |   move.l (a0),d0
    6884:	|  |  |  |  |   move.l d0,-(sp)
    6886:	|  |  |  |  |   pea 1 <_start+0x1>
    688a:	|  |  |  |  |   lea 20(sp),a0
    688e:	|  |  |  |  |   move.l a0,-(sp)
    6890:	|  |  |  |  |   jsr 10ec0 <getValueType>
    6896:	|  |  |  |  |   lea 12(sp),sp
			getValueType (&howMany, SVT_INT, &tmp -> thisVar.varData.theStack -> first -> next -> thisVar);
    689a:	|  |  |  |  |   movea.l 44(sp),a0
    689e:	|  |  |  |  |   movea.l 4(a0),a0
    68a2:	|  |  |  |  |   movea.l (a0),a0
    68a4:	|  |  |  |  |   move.l 8(a0),d0
    68a8:	|  |  |  |  |   move.l d0,-(sp)
    68aa:	|  |  |  |  |   pea 1 <_start+0x1>
    68ae:	|  |  |  |  |   lea 16(sp),a0
    68b2:	|  |  |  |  |   move.l a0,-(sp)
    68b4:	|  |  |  |  |   jsr 10ec0 <getValueType>
    68ba:	|  |  |  |  |   lea 12(sp),sp
    68be:	|  |  |  +--|-- bra.s 68e0 <createPersonaAnim+0x1ba>
		} else {
			getValueType (&frameNum, SVT_INT, &tmp -> thisVar);
    68c0:	|  |  |  |  \-> move.l 44(sp),d0
    68c4:	|  |  |  |      move.l d0,-(sp)
    68c6:	|  |  |  |      pea 1 <_start+0x1>
    68ca:	|  |  |  |      lea 20(sp),a0
    68ce:	|  |  |  |      move.l a0,-(sp)
    68d0:	|  |  |  |      jsr 10ec0 <getValueType>
    68d6:	|  |  |  |      lea 12(sp),sp
			howMany = 1;
    68da:	|  |  |  |      moveq #1,d0
    68dc:	|  |  |  |      move.l d0,8(sp)
		}
		trimStack (stacky);
    68e0:	|  |  |  \----> move.l 60(sp),-(sp)
    68e4:	|  |  |         jsr 11844 <trimStack>
    68ea:	|  |  |         addq.l #4,sp
		newP -> frames[a].frameNum = frameNum;
    68ec:	|  |  |         movea.l 28(sp),a0
    68f0:	|  |  |         movea.l 4(a0),a0
    68f4:	|  |  |         move.l 48(sp),d1
    68f8:	|  |  |         move.l d1,d0
    68fa:	|  |  |         add.l d0,d0
    68fc:	|  |  |         add.l d1,d0
    68fe:	|  |  |         add.l d0,d0
    6900:	|  |  |         add.l d0,d0
    6902:	|  |  |         adda.l d0,a0
    6904:	|  |  |         move.l 12(sp),d0
    6908:	|  |  |         move.l d0,(a0)
		newP -> frames[a].howMany = howMany;
    690a:	|  |  |         movea.l 28(sp),a0
    690e:	|  |  |         movea.l 4(a0),a0
    6912:	|  |  |         move.l 48(sp),d1
    6916:	|  |  |         move.l d1,d0
    6918:	|  |  |         add.l d0,d0
    691a:	|  |  |         add.l d1,d0
    691c:	|  |  |         add.l d0,d0
    691e:	|  |  |         add.l d0,d0
    6920:	|  |  |         adda.l d0,a0
    6922:	|  |  |         move.l 8(sp),d0
    6926:	|  |  |         move.l d0,4(a0)
		tmp = *stacky;
    692a:	|  |  |         movea.l 60(sp),a0
    692e:	|  |  |         move.l (a0),44(sp)
	while (a) {
    6932:	|  |  \-------> tst.l 48(sp)
    6936:	|  \----------- bne.w 67e2 <createPersonaAnim+0xbc>
	}

	return newP;
    693a:	|               move.l 28(sp),d0
}
    693e:	\-------------> move.l (sp)+,d2
    6940:	                movea.l (sp)+,a6
    6942:	                lea 44(sp),sp
    6946:	                rts

00006948 <deleteAnim>:

void deleteAnim (struct personaAnimation * orig) {
    6948:	       subq.l #8,sp
    694a:	       move.l a6,-(sp)

	if (orig)
    694c:	       tst.l 16(sp)
    6950:	/----- beq.s 6990 <deleteAnim+0x48>
	{
		if (orig -> numFrames) {
    6952:	|      movea.l 16(sp),a0
    6956:	|      move.l 8(a0),d0
    695a:	|  /-- beq.s 6976 <deleteAnim+0x2e>
			FreeVec( orig->frames);
    695c:	|  |   movea.l 16(sp),a0
    6960:	|  |   move.l 4(a0),8(sp)
    6966:	|  |   move.l 19c5e <SysBase>,d0
    696c:	|  |   movea.l d0,a6
    696e:	|  |   movea.l 8(sp),a1
    6972:	|  |   jsr -690(a6)
		}
		FreeVec(orig);
    6976:	|  \-> move.l 16(sp),4(sp)
    697c:	|      move.l 19c5e <SysBase>,d0
    6982:	|      movea.l d0,a6
    6984:	|      movea.l 4(sp),a1
    6988:	|      jsr -690(a6)
		orig = NULL;
    698c:	|      clr.l 16(sp)
	}
}
    6990:	\----> nop
    6992:	       movea.l (sp)+,a6
    6994:	       addq.l #8,sp
    6996:	       rts

00006998 <doBorderStuff>:

BOOL doBorderStuff (struct onScreenPerson * moveMe) {
    6998:	          lea -124(sp),sp
    699c:	          movem.l d2-d7,-(sp)
    if (moveMe -> inPoly == moveMe -> walkToPoly) {
    69a0:	          movea.l 152(sp),a0
    69a4:	          move.l 44(a0),d1
    69a8:	          movea.l 152(sp),a0
    69ac:	          move.l 48(a0),d0
    69b0:	          cmp.l d1,d0
    69b2:	      /-- bne.s 69e2 <doBorderStuff+0x4a>
        moveMe -> inPoly = -1;
    69b4:	      |   movea.l 152(sp),a0
    69b8:	      |   moveq #-1,d0
    69ba:	      |   move.l d0,44(a0)
        moveMe -> thisStepX = moveMe -> walkToX;
    69be:	      |   movea.l 152(sp),a0
    69c2:	      |   move.l 28(a0),d0
    69c6:	      |   movea.l 152(sp),a0
    69ca:	      |   move.l d0,36(a0)
        moveMe -> thisStepY = moveMe -> walkToY;
    69ce:	      |   movea.l 152(sp),a0
    69d2:	      |   move.l 32(a0),d0
    69d6:	      |   movea.l 152(sp),a0
    69da:	      |   move.l d0,40(a0)
    69de:	   /--|-- bra.w 6f48 <doBorderStuff+0x5b0>
    } else {
        // The section in which we need to be next...
        int newPoly = currentFloor -> matrix[moveMe -> inPoly][moveMe -> walkToPoly];
    69e2:	   |  \-> movea.l 19d6a <currentFloor>,a0
    69e8:	   |      move.l 16(a0),d1
    69ec:	   |      movea.l 152(sp),a0
    69f0:	   |      move.l 44(a0),d0
    69f4:	   |      add.l d0,d0
    69f6:	   |      add.l d0,d0
    69f8:	   |      movea.l d1,a0
    69fa:	   |      adda.l d0,a0
    69fc:	   |      move.l (a0),d1
    69fe:	   |      movea.l 152(sp),a0
    6a02:	   |      move.l 48(a0),d0
    6a06:	   |      add.l d0,d0
    6a08:	   |      add.l d0,d0
    6a0a:	   |      movea.l d1,a0
    6a0c:	   |      adda.l d0,a0
    6a0e:	   |      move.l (a0),144(sp)
        if (newPoly == -1) return FALSE;
    6a12:	   |      moveq #-1,d0
    6a14:	   |      cmp.l 144(sp),d0
    6a18:	   |  /-- bne.s 6a20 <doBorderStuff+0x88>
    6a1a:	   |  |   clr.w d0
    6a1c:	/--|--|-- bra.w 7048 <doBorderStuff+0x6b0>

        // Grab the index of the second matching corner...
        int ID, ID2;
        if (! getMatchingCorners (&(currentFloor -> polygon[moveMe -> inPoly]), &(currentFloor -> polygon[newPoly]), &ID, &ID2))
    6a20:	|  |  \-> movea.l 19d6a <currentFloor>,a0
    6a26:	|  |      move.l 12(a0),d1
    6a2a:	|  |      move.l 144(sp),d0
    6a2e:	|  |      lsl.l #3,d0
    6a30:	|  |      add.l d0,d1
    6a32:	|  |      movea.l 19d6a <currentFloor>,a0
    6a38:	|  |      movea.l 12(a0),a1
    6a3c:	|  |      movea.l 152(sp),a0
    6a40:	|  |      move.l 44(a0),d0
    6a44:	|  |      lsl.l #3,d0
    6a46:	|  |      add.l a1,d0
    6a48:	|  |      lea 40(sp),a0
    6a4c:	|  |      move.l a0,-(sp)
    6a4e:	|  |      lea 48(sp),a0
    6a52:	|  |      move.l a0,-(sp)
    6a54:	|  |      move.l d1,-(sp)
    6a56:	|  |      move.l d0,-(sp)
    6a58:	|  |      jsr 1218a <getMatchingCorners>
    6a5e:	|  |      lea 16(sp),sp
    6a62:	|  |      tst.w d0
    6a64:	|  |  /-- bne.s 6a7a <doBorderStuff+0xe2>
		{
			KPrintF ("Not a valid floor plan!");
    6a66:	|  |  |   pea 1624e <incbin_player_end+0x18e>
    6a6c:	|  |  |   jsr 12f14 <KPrintF>
    6a72:	|  |  |   addq.l #4,sp
            return FALSE;
    6a74:	|  |  |   clr.w d0
    6a76:	+--|--|-- bra.w 7048 <doBorderStuff+0x6b0>
		}

        // Remember that we're walking to the new polygon...
        moveMe -> inPoly = newPoly;
    6a7a:	|  |  \-> movea.l 152(sp),a0
    6a7e:	|  |      move.l 144(sp),44(a0)

        // Calculate the destination position on the coincidental line...
        int x1 = moveMe -> x, y1 = moveMe -> y;
    6a84:	|  |      movea.l 152(sp),a0
    6a88:	|  |      move.l (a0),d0
    6a8a:	|  |      move.l d0,-(sp)
    6a8c:	|  |      jsr 13448 <__fixsfsi>
    6a92:	|  |      addq.l #4,sp
    6a94:	|  |      move.l d0,140(sp)
    6a98:	|  |      movea.l 152(sp),a0
    6a9c:	|  |      move.l 4(a0),d0
    6aa0:	|  |      move.l d0,-(sp)
    6aa2:	|  |      jsr 13448 <__fixsfsi>
    6aa8:	|  |      addq.l #4,sp
    6aaa:	|  |      move.l d0,136(sp)
        int x2 = moveMe -> walkToX, y2 = moveMe -> walkToY;
    6aae:	|  |      movea.l 152(sp),a0
    6ab2:	|  |      move.l 28(a0),132(sp)
    6ab8:	|  |      movea.l 152(sp),a0
    6abc:	|  |      move.l 32(a0),128(sp)
        int x3 = currentFloor -> vertex[ID].x, y3 = currentFloor -> vertex[ID].y;
    6ac2:	|  |      movea.l 19d6a <currentFloor>,a0
    6ac8:	|  |      move.l 4(a0),d1
    6acc:	|  |      move.l 44(sp),d0
    6ad0:	|  |      lsl.l #3,d0
    6ad2:	|  |      movea.l d1,a0
    6ad4:	|  |      adda.l d0,a0
    6ad6:	|  |      move.l (a0),124(sp)
    6ada:	|  |      movea.l 19d6a <currentFloor>,a0
    6ae0:	|  |      move.l 4(a0),d1
    6ae4:	|  |      move.l 44(sp),d0
    6ae8:	|  |      lsl.l #3,d0
    6aea:	|  |      movea.l d1,a0
    6aec:	|  |      adda.l d0,a0
    6aee:	|  |      move.l 4(a0),120(sp)
        int x4 = currentFloor -> vertex[ID2].x, y4 = currentFloor -> vertex[ID2].y;
    6af4:	|  |      movea.l 19d6a <currentFloor>,a0
    6afa:	|  |      move.l 4(a0),d1
    6afe:	|  |      move.l 40(sp),d0
    6b02:	|  |      lsl.l #3,d0
    6b04:	|  |      movea.l d1,a0
    6b06:	|  |      adda.l d0,a0
    6b08:	|  |      move.l (a0),116(sp)
    6b0c:	|  |      movea.l 19d6a <currentFloor>,a0
    6b12:	|  |      move.l 4(a0),d1
    6b16:	|  |      move.l 40(sp),d0
    6b1a:	|  |      lsl.l #3,d0
    6b1c:	|  |      movea.l d1,a0
    6b1e:	|  |      adda.l d0,a0
    6b20:	|  |      move.l 4(a0),112(sp)

        int xAB = x1 - x2;
    6b26:	|  |      move.l 140(sp),d0
    6b2a:	|  |      sub.l 132(sp),d0
    6b2e:	|  |      move.l d0,108(sp)
        int yAB = y1 - y2;
    6b32:	|  |      move.l 136(sp),d0
    6b36:	|  |      sub.l 128(sp),d0
    6b3a:	|  |      move.l d0,104(sp)
        int xCD = x4 - x3;
    6b3e:	|  |      move.l 116(sp),d0
    6b42:	|  |      sub.l 124(sp),d0
    6b46:	|  |      move.l d0,100(sp)
        int yCD = y4 - y3;
    6b4a:	|  |      move.l 112(sp),d0
    6b4e:	|  |      sub.l 120(sp),d0
    6b52:	|  |      move.l d0,96(sp)

        double m = (yAB * (x3 - x1) - xAB * (y3 - y1));
    6b56:	|  |      move.l 124(sp),d0
    6b5a:	|  |      sub.l 140(sp),d0
    6b5e:	|  |      move.l 104(sp),-(sp)
    6b62:	|  |      move.l d0,-(sp)
    6b64:	|  |      jsr 13a0a <__mulsi3>
    6b6a:	|  |      addq.l #8,sp
    6b6c:	|  |      move.l d0,d2
    6b6e:	|  |      move.l 120(sp),d0
    6b72:	|  |      sub.l 136(sp),d0
    6b76:	|  |      move.l 108(sp),-(sp)
    6b7a:	|  |      move.l d0,-(sp)
    6b7c:	|  |      jsr 13a0a <__mulsi3>
    6b82:	|  |      addq.l #8,sp
    6b84:	|  |      move.l d2,d1
    6b86:	|  |      sub.l d0,d1
    6b88:	|  |      move.l d1,-(sp)
    6b8a:	|  |      jsr 13470 <__floatsidf>
    6b90:	|  |      addq.l #4,sp
    6b92:	|  |      move.l d0,32(sp)
    6b96:	|  |      move.l d1,36(sp)
    6b9a:	|  |      move.l 32(sp),88(sp)
    6ba0:	|  |      move.l 36(sp),92(sp)
        m /= ((xAB * yCD) - (yAB * xCD));
    6ba6:	|  |      move.l 96(sp),-(sp)
    6baa:	|  |      move.l 112(sp),-(sp)
    6bae:	|  |      jsr 13a0a <__mulsi3>
    6bb4:	|  |      addq.l #8,sp
    6bb6:	|  |      move.l d0,d2
    6bb8:	|  |      move.l 100(sp),-(sp)
    6bbc:	|  |      move.l 108(sp),-(sp)
    6bc0:	|  |      jsr 13a0a <__mulsi3>
    6bc6:	|  |      addq.l #8,sp
    6bc8:	|  |      move.l d2,d1
    6bca:	|  |      sub.l d0,d1
    6bcc:	|  |      move.l d1,-(sp)
    6bce:	|  |      jsr 13470 <__floatsidf>
    6bd4:	|  |      addq.l #4,sp
    6bd6:	|  |      move.l d1,-(sp)
    6bd8:	|  |      move.l d0,-(sp)
    6bda:	|  |      move.l 100(sp),-(sp)
    6bde:	|  |      move.l 100(sp),-(sp)
    6be2:	|  |      jsr 132fa <__divdf3>
    6be8:	|  |      lea 16(sp),sp
    6bec:	|  |      move.l d0,24(sp)
    6bf0:	|  |      move.l d1,28(sp)
    6bf4:	|  |      move.l 24(sp),88(sp)
    6bfa:	|  |      move.l 28(sp),92(sp)

        if (m > 0 && m < 1) {
    6c00:	|  |      clr.l -(sp)
    6c02:	|  |      clr.l -(sp)
    6c04:	|  |      move.l 100(sp),-(sp)
    6c08:	|  |      move.l 100(sp),-(sp)
    6c0c:	|  |      jsr 135ce <__gtdf2>
    6c12:	|  |      lea 16(sp),sp
    6c16:	|  |      tst.l d0
    6c18:	|  |  /-- ble.w 6cf0 <doBorderStuff+0x358>
    6c1c:	|  |  |   clr.l -(sp)
    6c1e:	|  |  |   move.l #1072693248,-(sp)
    6c24:	|  |  |   move.l 100(sp),-(sp)
    6c28:	|  |  |   move.l 100(sp),-(sp)
    6c2c:	|  |  |   jsr 13688 <__ltdf2>
    6c32:	|  |  |   lea 16(sp),sp
    6c36:	|  |  |   tst.l d0
    6c38:	|  |  +-- bge.w 6cf0 <doBorderStuff+0x358>
            moveMe -> thisStepX = x3 + m * xCD;
    6c3c:	|  |  |   move.l 124(sp),-(sp)
    6c40:	|  |  |   jsr 13470 <__floatsidf>
    6c46:	|  |  |   addq.l #4,sp
    6c48:	|  |  |   move.l d0,d2
    6c4a:	|  |  |   move.l d1,d3
    6c4c:	|  |  |   move.l 100(sp),-(sp)
    6c50:	|  |  |   jsr 13470 <__floatsidf>
    6c56:	|  |  |   addq.l #4,sp
    6c58:	|  |  |   move.l 92(sp),-(sp)
    6c5c:	|  |  |   move.l 92(sp),-(sp)
    6c60:	|  |  |   move.l d1,-(sp)
    6c62:	|  |  |   move.l d0,-(sp)
    6c64:	|  |  |   jsr 13500 <__muldf3>
    6c6a:	|  |  |   lea 16(sp),sp
    6c6e:	|  |  |   move.l d1,-(sp)
    6c70:	|  |  |   move.l d0,-(sp)
    6c72:	|  |  |   move.l d3,-(sp)
    6c74:	|  |  |   move.l d2,-(sp)
    6c76:	|  |  |   jsr 13298 <__adddf3>
    6c7c:	|  |  |   lea 16(sp),sp
    6c80:	|  |  |   move.l d1,-(sp)
    6c82:	|  |  |   move.l d0,-(sp)
    6c84:	|  |  |   jsr 13408 <__fixdfsi>
    6c8a:	|  |  |   addq.l #8,sp
    6c8c:	|  |  |   movea.l 152(sp),a0
    6c90:	|  |  |   move.l d0,36(a0)
            moveMe -> thisStepY = y3 + m * yCD;
    6c94:	|  |  |   move.l 120(sp),-(sp)
    6c98:	|  |  |   jsr 13470 <__floatsidf>
    6c9e:	|  |  |   addq.l #4,sp
    6ca0:	|  |  |   move.l d0,d2
    6ca2:	|  |  |   move.l d1,d3
    6ca4:	|  |  |   move.l 96(sp),-(sp)
    6ca8:	|  |  |   jsr 13470 <__floatsidf>
    6cae:	|  |  |   addq.l #4,sp
    6cb0:	|  |  |   move.l 92(sp),-(sp)
    6cb4:	|  |  |   move.l 92(sp),-(sp)
    6cb8:	|  |  |   move.l d1,-(sp)
    6cba:	|  |  |   move.l d0,-(sp)
    6cbc:	|  |  |   jsr 13500 <__muldf3>
    6cc2:	|  |  |   lea 16(sp),sp
    6cc6:	|  |  |   move.l d1,-(sp)
    6cc8:	|  |  |   move.l d0,-(sp)
    6cca:	|  |  |   move.l d3,-(sp)
    6ccc:	|  |  |   move.l d2,-(sp)
    6cce:	|  |  |   jsr 13298 <__adddf3>
    6cd4:	|  |  |   lea 16(sp),sp
    6cd8:	|  |  |   move.l d1,-(sp)
    6cda:	|  |  |   move.l d0,-(sp)
    6cdc:	|  |  |   jsr 13408 <__fixdfsi>
    6ce2:	|  |  |   addq.l #8,sp
    6ce4:	|  |  |   movea.l 152(sp),a0
    6ce8:	|  |  |   move.l d0,40(a0)
    6cec:	|  +--|-- bra.w 6f48 <doBorderStuff+0x5b0>
        } else {
            int dx13 = x1 - x3, dx14 = x1 - x4, dx23 = x2 - x3, dx24 = x2 - x4;
    6cf0:	|  |  \-> move.l 140(sp),d0
    6cf4:	|  |      sub.l 124(sp),d0
    6cf8:	|  |      move.l d0,84(sp)
    6cfc:	|  |      move.l 140(sp),d0
    6d00:	|  |      sub.l 116(sp),d0
    6d04:	|  |      move.l d0,80(sp)
    6d08:	|  |      move.l 132(sp),d0
    6d0c:	|  |      sub.l 124(sp),d0
    6d10:	|  |      move.l d0,76(sp)
    6d14:	|  |      move.l 132(sp),d0
    6d18:	|  |      sub.l 116(sp),d0
    6d1c:	|  |      move.l d0,72(sp)
            int dy13 = y1 - y3, dy14 = y1 - y4, dy23 = y2 - y3, dy24 = y2 - y4;
    6d20:	|  |      move.l 136(sp),d0
    6d24:	|  |      sub.l 120(sp),d0
    6d28:	|  |      move.l d0,68(sp)
    6d2c:	|  |      move.l 136(sp),d0
    6d30:	|  |      sub.l 112(sp),d0
    6d34:	|  |      move.l d0,64(sp)
    6d38:	|  |      move.l 128(sp),d0
    6d3c:	|  |      sub.l 120(sp),d0
    6d40:	|  |      move.l d0,60(sp)
    6d44:	|  |      move.l 128(sp),d0
    6d48:	|  |      sub.l 112(sp),d0
    6d4c:	|  |      move.l d0,56(sp)

            dx13 *= dx13; dx14 *= dx14; dx23 *= dx23; dx24 *= dx24;
    6d50:	|  |      move.l 84(sp),-(sp)
    6d54:	|  |      move.l 88(sp),-(sp)
    6d58:	|  |      jsr 13a0a <__mulsi3>
    6d5e:	|  |      addq.l #8,sp
    6d60:	|  |      move.l d0,84(sp)
    6d64:	|  |      move.l 80(sp),-(sp)
    6d68:	|  |      move.l 84(sp),-(sp)
    6d6c:	|  |      jsr 13a0a <__mulsi3>
    6d72:	|  |      addq.l #8,sp
    6d74:	|  |      move.l d0,80(sp)
    6d78:	|  |      move.l 76(sp),-(sp)
    6d7c:	|  |      move.l 80(sp),-(sp)
    6d80:	|  |      jsr 13a0a <__mulsi3>
    6d86:	|  |      addq.l #8,sp
    6d88:	|  |      move.l d0,76(sp)
    6d8c:	|  |      move.l 72(sp),-(sp)
    6d90:	|  |      move.l 76(sp),-(sp)
    6d94:	|  |      jsr 13a0a <__mulsi3>
    6d9a:	|  |      addq.l #8,sp
    6d9c:	|  |      move.l d0,72(sp)
            dy13 *= dy13; dy14 *= dy14; dy23 *= dy23; dy24 *= dy24;
    6da0:	|  |      move.l 68(sp),-(sp)
    6da4:	|  |      move.l 72(sp),-(sp)
    6da8:	|  |      jsr 13a0a <__mulsi3>
    6dae:	|  |      addq.l #8,sp
    6db0:	|  |      move.l d0,68(sp)
    6db4:	|  |      move.l 64(sp),-(sp)
    6db8:	|  |      move.l 68(sp),-(sp)
    6dbc:	|  |      jsr 13a0a <__mulsi3>
    6dc2:	|  |      addq.l #8,sp
    6dc4:	|  |      move.l d0,64(sp)
    6dc8:	|  |      move.l 60(sp),-(sp)
    6dcc:	|  |      move.l 64(sp),-(sp)
    6dd0:	|  |      jsr 13a0a <__mulsi3>
    6dd6:	|  |      addq.l #8,sp
    6dd8:	|  |      move.l d0,60(sp)
    6ddc:	|  |      move.l 56(sp),-(sp)
    6de0:	|  |      move.l 60(sp),-(sp)
    6de4:	|  |      jsr 13a0a <__mulsi3>
    6dea:	|  |      addq.l #8,sp
    6dec:	|  |      move.l d0,56(sp)

            if (sqrt((double) dx13 + dy13) + sqrt((double) dx23 + dy23) <
    6df0:	|  |      move.l 84(sp),-(sp)
    6df4:	|  |      jsr 13470 <__floatsidf>
    6dfa:	|  |      addq.l #4,sp
    6dfc:	|  |      move.l d0,d2
    6dfe:	|  |      move.l d1,d3
    6e00:	|  |      move.l 68(sp),-(sp)
    6e04:	|  |      jsr 13470 <__floatsidf>
    6e0a:	|  |      addq.l #4,sp
    6e0c:	|  |      move.l d1,-(sp)
    6e0e:	|  |      move.l d0,-(sp)
    6e10:	|  |      move.l d3,-(sp)
    6e12:	|  |      move.l d2,-(sp)
    6e14:	|  |      jsr 13298 <__adddf3>
    6e1a:	|  |      lea 16(sp),sp
    6e1e:	|  |      move.l d1,-(sp)
    6e20:	|  |      move.l d0,-(sp)
    6e22:	|  |      jsr 139c0 <sqrt>
    6e28:	|  |      addq.l #8,sp
    6e2a:	|  |      move.l d0,d2
    6e2c:	|  |      move.l d1,d3
    6e2e:	|  |      move.l 76(sp),-(sp)
    6e32:	|  |      jsr 13470 <__floatsidf>
    6e38:	|  |      addq.l #4,sp
    6e3a:	|  |      move.l d0,d4
    6e3c:	|  |      move.l d1,d5
    6e3e:	|  |      move.l 60(sp),-(sp)
    6e42:	|  |      jsr 13470 <__floatsidf>
    6e48:	|  |      addq.l #4,sp
    6e4a:	|  |      move.l d1,-(sp)
    6e4c:	|  |      move.l d0,-(sp)
    6e4e:	|  |      move.l d5,-(sp)
    6e50:	|  |      move.l d4,-(sp)
    6e52:	|  |      jsr 13298 <__adddf3>
    6e58:	|  |      lea 16(sp),sp
    6e5c:	|  |      move.l d1,-(sp)
    6e5e:	|  |      move.l d0,-(sp)
    6e60:	|  |      jsr 139c0 <sqrt>
    6e66:	|  |      addq.l #8,sp
    6e68:	|  |      move.l d1,-(sp)
    6e6a:	|  |      move.l d0,-(sp)
    6e6c:	|  |      move.l d3,-(sp)
    6e6e:	|  |      move.l d2,-(sp)
    6e70:	|  |      jsr 13298 <__adddf3>
    6e76:	|  |      lea 16(sp),sp
    6e7a:	|  |      move.l d0,d2
    6e7c:	|  |      move.l d1,d3
                sqrt((double) dx14 + dy14) + sqrt((double) dx24 + dy24)) {
    6e7e:	|  |      move.l 80(sp),-(sp)
    6e82:	|  |      jsr 13470 <__floatsidf>
    6e88:	|  |      addq.l #4,sp
    6e8a:	|  |      move.l d0,d4
    6e8c:	|  |      move.l d1,d5
    6e8e:	|  |      move.l 64(sp),-(sp)
    6e92:	|  |      jsr 13470 <__floatsidf>
    6e98:	|  |      addq.l #4,sp
    6e9a:	|  |      move.l d1,-(sp)
    6e9c:	|  |      move.l d0,-(sp)
    6e9e:	|  |      move.l d5,-(sp)
    6ea0:	|  |      move.l d4,-(sp)
    6ea2:	|  |      jsr 13298 <__adddf3>
    6ea8:	|  |      lea 16(sp),sp
    6eac:	|  |      move.l d1,-(sp)
    6eae:	|  |      move.l d0,-(sp)
    6eb0:	|  |      jsr 139c0 <sqrt>
    6eb6:	|  |      addq.l #8,sp
    6eb8:	|  |      move.l d0,d4
    6eba:	|  |      move.l d1,d5
    6ebc:	|  |      move.l 72(sp),-(sp)
    6ec0:	|  |      jsr 13470 <__floatsidf>
    6ec6:	|  |      addq.l #4,sp
    6ec8:	|  |      move.l d0,d6
    6eca:	|  |      move.l d1,d7
    6ecc:	|  |      move.l 56(sp),-(sp)
    6ed0:	|  |      jsr 13470 <__floatsidf>
    6ed6:	|  |      addq.l #4,sp
    6ed8:	|  |      move.l d1,-(sp)
    6eda:	|  |      move.l d0,-(sp)
    6edc:	|  |      move.l d7,-(sp)
    6ede:	|  |      move.l d6,-(sp)
    6ee0:	|  |      jsr 13298 <__adddf3>
    6ee6:	|  |      lea 16(sp),sp
    6eea:	|  |      move.l d1,-(sp)
    6eec:	|  |      move.l d0,-(sp)
    6eee:	|  |      jsr 139c0 <sqrt>
    6ef4:	|  |      addq.l #8,sp
    6ef6:	|  |      move.l d1,-(sp)
    6ef8:	|  |      move.l d0,-(sp)
    6efa:	|  |      move.l d5,-(sp)
    6efc:	|  |      move.l d4,-(sp)
    6efe:	|  |      jsr 13298 <__adddf3>
    6f04:	|  |      lea 16(sp),sp
            if (sqrt((double) dx13 + dy13) + sqrt((double) dx23 + dy23) <
    6f08:	|  |      move.l d1,-(sp)
    6f0a:	|  |      move.l d0,-(sp)
    6f0c:	|  |      move.l d3,-(sp)
    6f0e:	|  |      move.l d2,-(sp)
    6f10:	|  |      jsr 13688 <__ltdf2>
    6f16:	|  |      lea 16(sp),sp
    6f1a:	|  |      tst.l d0
    6f1c:	|  |  /-- bge.s 6f34 <doBorderStuff+0x59c>
                moveMe -> thisStepX = x3;
    6f1e:	|  |  |   movea.l 152(sp),a0
    6f22:	|  |  |   move.l 124(sp),36(a0)
                moveMe -> thisStepY = y3;
    6f28:	|  |  |   movea.l 152(sp),a0
    6f2c:	|  |  |   move.l 120(sp),40(a0)
    6f32:	|  +--|-- bra.s 6f48 <doBorderStuff+0x5b0>
            } else {
                moveMe -> thisStepX = x4;
    6f34:	|  |  \-> movea.l 152(sp),a0
    6f38:	|  |      move.l 116(sp),36(a0)
                moveMe -> thisStepY = y4;
    6f3e:	|  |      movea.l 152(sp),a0
    6f42:	|  |      move.l 112(sp),40(a0)
            }
        }
    }

    float yDiff = moveMe -> thisStepY - moveMe -> y;
    6f48:	|  \----> movea.l 152(sp),a0
    6f4c:	|         move.l 40(a0),d0
    6f50:	|         move.l d0,-(sp)
    6f52:	|         jsr 134b0 <__floatsisf>
    6f58:	|         addq.l #4,sp
    6f5a:	|         move.l d0,d1
    6f5c:	|         movea.l 152(sp),a0
    6f60:	|         move.l 4(a0),d0
    6f64:	|         move.l d0,-(sp)
    6f66:	|         move.l d1,-(sp)
    6f68:	|         jsr 137a4 <__subsf3>
    6f6e:	|         addq.l #8,sp
    6f70:	|         move.l d0,52(sp)
    float xDiff = moveMe -> x - moveMe -> thisStepX;
    6f74:	|         movea.l 152(sp),a0
    6f78:	|         move.l (a0),d2
    6f7a:	|         movea.l 152(sp),a0
    6f7e:	|         move.l 36(a0),d0
    6f82:	|         move.l d0,-(sp)
    6f84:	|         jsr 134b0 <__floatsisf>
    6f8a:	|         addq.l #4,sp
    6f8c:	|         move.l d0,-(sp)
    6f8e:	|         move.l d2,-(sp)
    6f90:	|         jsr 137a4 <__subsf3>
    6f96:	|         addq.l #8,sp
    6f98:	|         move.l d0,48(sp)
    if (xDiff || yDiff) {
    6f9c:	|         clr.l -(sp)
    6f9e:	|         move.l 52(sp),-(sp)
    6fa2:	|         jsr 1370c <__nesf2>
    6fa8:	|         addq.l #8,sp
    6faa:	|         tst.l d0
    6fac:	|     /-- bne.s 6fc0 <doBorderStuff+0x628>
    6fae:	|     |   clr.l -(sp)
    6fb0:	|     |   move.l 56(sp),-(sp)
    6fb4:	|     |   jsr 1370c <__nesf2>
    6fba:	|     |   addq.l #8,sp
    6fbc:	|     |   tst.l d0
    6fbe:	|  /--|-- beq.s 7036 <doBorderStuff+0x69e>
        moveMe -> wantAngle = 180 + ANGLEFIX * atan2f(xDiff, yDiff * 2);
    6fc0:	|  |  \-> move.l 52(sp),d0
    6fc4:	|  |      move.l d0,-(sp)
    6fc6:	|  |      move.l d0,-(sp)
    6fc8:	|  |      jsr 13262 <__addsf3>
    6fce:	|  |      addq.l #8,sp
    6fd0:	|  |      move.l d0,-(sp)
    6fd2:	|  |      move.l 52(sp),-(sp)
    6fd6:	|  |      jsr 13810 <atan2f>
    6fdc:	|  |      addq.l #8,sp
    6fde:	|  |      move.l d0,-(sp)
    6fe0:	|  |      jsr 133c8 <__extendsfdf2>
    6fe6:	|  |      addq.l #4,sp
    6fe8:	|  |      move.l #-1540411785,-(sp)
    6fee:	|  |      move.l #1078765033,-(sp)
    6ff4:	|  |      move.l d1,-(sp)
    6ff6:	|  |      move.l d0,-(sp)
    6ff8:	|  |      jsr 13500 <__muldf3>
    6ffe:	|  |      lea 16(sp),sp
    7002:	|  |      clr.l -(sp)
    7004:	|  |      move.l #1080459264,-(sp)
    700a:	|  |      move.l d1,-(sp)
    700c:	|  |      move.l d0,-(sp)
    700e:	|  |      jsr 13298 <__adddf3>
    7014:	|  |      lea 16(sp),sp
    7018:	|  |      move.l d1,-(sp)
    701a:	|  |      move.l d0,-(sp)
    701c:	|  |      jsr 13408 <__fixdfsi>
    7022:	|  |      addq.l #8,sp
    7024:	|  |      movea.l 152(sp),a0
    7028:	|  |      move.l d0,84(a0)
        moveMe -> spinning = TRUE;
    702c:	|  |      movea.l 152(sp),a0
    7030:	|  |      move.w #1,54(a0)
    }

    setFrames (moveMe, ANI_WALK);
    7036:	|  \----> pea 1 <_start+0x1>
    703a:	|         move.l 156(sp),-(sp)
    703e:	|         jsr 5ca0 <setFrames>
    7044:	|         addq.l #8,sp
    return TRUE;
    7046:	|         moveq #1,d0
}
    7048:	\-------> movem.l (sp)+,d2-d7
    704c:	          lea 124(sp),sp
    7050:	          rts

00007052 <findPerson>:


struct onScreenPerson * findPerson (int v) {
    7052:	          subq.l #4,sp
	struct onScreenPerson * thisPerson = allPeople;
    7054:	          move.l 19cbe <allPeople>,(sp)
	while (thisPerson) {
    705a:	      /-- bra.s 7072 <findPerson+0x20>
		if (v == thisPerson -> thisType -> objectNum) break;
    705c:	/-----|-> movea.l (sp),a0
    705e:	|     |   movea.l 102(a0),a0
    7062:	|     |   move.l 4(a0),d0
    7066:	|     |   cmp.l 8(sp),d0
    706a:	|  /--|-- beq.s 7078 <findPerson+0x26>
		thisPerson = thisPerson -> next;
    706c:	|  |  |   movea.l (sp),a0
    706e:	|  |  |   move.l 24(a0),(sp)
	while (thisPerson) {
    7072:	|  |  \-> tst.l (sp)
    7074:	\--|----- bne.s 705c <findPerson+0xa>
    7076:	   |  /-- bra.s 707a <findPerson+0x28>
		if (v == thisPerson -> thisType -> objectNum) break;
    7078:	   \--|-> nop
	}
	return thisPerson;
    707a:	      \-> move.l (sp),d0
}
    707c:	          addq.l #4,sp
    707e:	          rts

00007080 <floatCharacter>:

BOOL floatCharacter (int f, int objNum) {
    7080:	       subq.l #4,sp
	struct onScreenPerson * moveMe = findPerson (objNum);
    7082:	       move.l 12(sp),-(sp)
    7086:	       jsr 7052 <findPerson>
    708c:	       addq.l #4,sp
    708e:	       move.l d0,(sp)
	if (! moveMe) return FALSE;
    7090:	   /-- bne.s 7096 <floatCharacter+0x16>
    7092:	   |   clr.w d0
    7094:	/--|-- bra.s 70a0 <floatCharacter+0x20>
	moveMe -> floaty = f;
    7096:	|  \-> movea.l (sp),a0
    7098:	|      move.l 8(sp),12(a0)
	return TRUE;
    709e:	|      moveq #1,d0
}
    70a0:	\----> addq.l #4,sp
    70a2:	       rts

000070a4 <forceWalkingPerson>:

BOOL forceWalkingPerson (int x, int y, int objNum, struct loadedFunction * func, int di) {
    70a4:	          subq.l #4,sp
    if (x == 0 && y == 0) return FALSE;
    70a6:	          tst.l 8(sp)
    70aa:	      /-- bne.s 70b8 <forceWalkingPerson+0x14>
    70ac:	      |   tst.l 12(sp)
    70b0:	      +-- bne.s 70b8 <forceWalkingPerson+0x14>
    70b2:	      |   clr.w d0
    70b4:	/-----|-- bra.w 714a <forceWalkingPerson+0xa6>
    struct onScreenPerson * moveMe = findPerson(objNum);
    70b8:	|     \-> move.l 16(sp),-(sp)
    70bc:	|         jsr 7052 <findPerson>
    70c2:	|         addq.l #4,sp
    70c4:	|         move.l d0,(sp)
    if (!moveMe) return FALSE;
    70c6:	|     /-- bne.s 70cc <forceWalkingPerson+0x28>
    70c8:	|     |   clr.w d0
    70ca:	+-----|-- bra.s 714a <forceWalkingPerson+0xa6>

    if (moveMe->continueAfterWalking) abortFunction(moveMe->continueAfterWalking);
    70cc:	|     \-> movea.l (sp),a0
    70ce:	|         move.l 56(a0),d0
    70d2:	|     /-- beq.s 70e4 <forceWalkingPerson+0x40>
    70d4:	|     |   movea.l (sp),a0
    70d6:	|     |   move.l 56(a0),d0
    70da:	|     |   move.l d0,-(sp)
    70dc:	|     |   jsr 2546 <abortFunction>
    70e2:	|     |   addq.l #4,sp
    moveMe->walking = TRUE;
    70e4:	|     \-> movea.l (sp),a0
    70e6:	|         move.w #1,52(a0)
    moveMe->continueAfterWalking = NULL;
    70ec:	|         movea.l (sp),a0
    70ee:	|         clr.l 56(a0)
    moveMe->directionWhenDoneWalking = di;
    70f2:	|         movea.l (sp),a0
    70f4:	|         move.l 24(sp),98(a0)

    moveMe->walkToX = x;
    70fa:	|         movea.l (sp),a0
    70fc:	|         move.l 8(sp),28(a0)
    moveMe->walkToY = y;
    7102:	|         movea.l (sp),a0
    7104:	|         move.l 12(sp),32(a0)

    // Let's pretend the start and end points are both in the same
    // polygon (which one isn't important)
    moveMe->inPoly = 0;
    710a:	|         movea.l (sp),a0
    710c:	|         clr.l 44(a0)
    moveMe->walkToPoly = 0;
    7110:	|         movea.l (sp),a0
    7112:	|         clr.l 48(a0)

    doBorderStuff(moveMe);
    7116:	|         move.l (sp),-(sp)
    7118:	|         jsr 6998 <doBorderStuff>
    711e:	|         addq.l #4,sp
    if (walkMe(moveMe, TRUE) || moveMe->spinning) {
    7120:	|         pea 1 <_start+0x1>
    7124:	|         move.l 4(sp),-(sp)
    7128:	|         jsr 87e0 <walkMe>
    712e:	|         addq.l #8,sp
    7130:	|         tst.w d0
    7132:	|     /-- bne.s 713c <forceWalkingPerson+0x98>
    7134:	|     |   movea.l (sp),a0
    7136:	|     |   move.w 54(a0),d0
    713a:	|  /--|-- beq.s 7148 <forceWalkingPerson+0xa4>
        moveMe->continueAfterWalking = func;
    713c:	|  |  \-> movea.l (sp),a0
    713e:	|  |      move.l 20(sp),56(a0)
        return TRUE;
    7144:	|  |      moveq #1,d0
    7146:	+--|----- bra.s 714a <forceWalkingPerson+0xa6>
    } else {
        return FALSE;
    7148:	|  \----> clr.w d0
    }
}
    714a:	\-------> addq.l #4,sp
    714c:	          rts

0000714e <handleClosestPoint>:

BOOL handleClosestPoint (int * setX, int * setY, int * setPoly) {
    714e:	                lea -56(sp),sp
    7152:	                move.l d2,-(sp)
	int gotX = 320, gotY = 200, gotPoly = -1, i, j, xTest1, yTest1,
    7154:	                move.l #320,56(sp)
    715c:	                move.l #200,52(sp)
    7164:	                moveq #-1,d0
    7166:	                move.l d0,48(sp)
		xTest2, yTest2, closestX, closestY, oldJ, currentDistance = 0xFFFFF,
    716a:	                move.l #1048575,32(sp)
		thisDistance;

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
    7172:	                clr.l 44(sp)
    7176:	   /----------- bra.w 734e <handleClosestPoint+0x200>
		oldJ = currentFloor -> polygon[i].numVertices - 1;
    717a:	/--|----------> movea.l 19d6a <currentFloor>,a0
    7180:	|  |            move.l 12(a0),d1
    7184:	|  |            move.l 44(sp),d0
    7188:	|  |            lsl.l #3,d0
    718a:	|  |            movea.l d1,a0
    718c:	|  |            adda.l d0,a0
    718e:	|  |            move.l (a0),d0
    7190:	|  |            move.l d0,d1
    7192:	|  |            subq.l #1,d1
    7194:	|  |            move.l d1,36(sp)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
    7198:	|  |            clr.l 40(sp)
    719c:	|  |     /----- bra.w 732c <handleClosestPoint+0x1de>
			xTest1 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[j]].x;
    71a0:	|  |  /--|----> movea.l 19d6a <currentFloor>,a0
    71a6:	|  |  |  |      move.l 4(a0),d1
    71aa:	|  |  |  |      movea.l 19d6a <currentFloor>,a0
    71b0:	|  |  |  |      movea.l 12(a0),a0
    71b4:	|  |  |  |      move.l 44(sp),d0
    71b8:	|  |  |  |      lsl.l #3,d0
    71ba:	|  |  |  |      adda.l d0,a0
    71bc:	|  |  |  |      movea.l 4(a0),a0
    71c0:	|  |  |  |      move.l 40(sp),d0
    71c4:	|  |  |  |      add.l d0,d0
    71c6:	|  |  |  |      add.l d0,d0
    71c8:	|  |  |  |      adda.l d0,a0
    71ca:	|  |  |  |      move.l (a0),d0
    71cc:	|  |  |  |      lsl.l #3,d0
    71ce:	|  |  |  |      movea.l d1,a0
    71d0:	|  |  |  |      adda.l d0,a0
    71d2:	|  |  |  |      move.l (a0),28(sp)
			yTest1 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[j]].y;
    71d6:	|  |  |  |      movea.l 19d6a <currentFloor>,a0
    71dc:	|  |  |  |      move.l 4(a0),d1
    71e0:	|  |  |  |      movea.l 19d6a <currentFloor>,a0
    71e6:	|  |  |  |      movea.l 12(a0),a0
    71ea:	|  |  |  |      move.l 44(sp),d0
    71ee:	|  |  |  |      lsl.l #3,d0
    71f0:	|  |  |  |      adda.l d0,a0
    71f2:	|  |  |  |      movea.l 4(a0),a0
    71f6:	|  |  |  |      move.l 40(sp),d0
    71fa:	|  |  |  |      add.l d0,d0
    71fc:	|  |  |  |      add.l d0,d0
    71fe:	|  |  |  |      adda.l d0,a0
    7200:	|  |  |  |      move.l (a0),d0
    7202:	|  |  |  |      lsl.l #3,d0
    7204:	|  |  |  |      movea.l d1,a0
    7206:	|  |  |  |      adda.l d0,a0
    7208:	|  |  |  |      move.l 4(a0),24(sp)
			xTest2 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[oldJ]].x;
    720e:	|  |  |  |      movea.l 19d6a <currentFloor>,a0
    7214:	|  |  |  |      move.l 4(a0),d1
    7218:	|  |  |  |      movea.l 19d6a <currentFloor>,a0
    721e:	|  |  |  |      movea.l 12(a0),a0
    7222:	|  |  |  |      move.l 44(sp),d0
    7226:	|  |  |  |      lsl.l #3,d0
    7228:	|  |  |  |      adda.l d0,a0
    722a:	|  |  |  |      movea.l 4(a0),a0
    722e:	|  |  |  |      move.l 36(sp),d0
    7232:	|  |  |  |      add.l d0,d0
    7234:	|  |  |  |      add.l d0,d0
    7236:	|  |  |  |      adda.l d0,a0
    7238:	|  |  |  |      move.l (a0),d0
    723a:	|  |  |  |      lsl.l #3,d0
    723c:	|  |  |  |      movea.l d1,a0
    723e:	|  |  |  |      adda.l d0,a0
    7240:	|  |  |  |      move.l (a0),20(sp)
			yTest2 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[oldJ]].y;
    7244:	|  |  |  |      movea.l 19d6a <currentFloor>,a0
    724a:	|  |  |  |      move.l 4(a0),d1
    724e:	|  |  |  |      movea.l 19d6a <currentFloor>,a0
    7254:	|  |  |  |      movea.l 12(a0),a0
    7258:	|  |  |  |      move.l 44(sp),d0
    725c:	|  |  |  |      lsl.l #3,d0
    725e:	|  |  |  |      adda.l d0,a0
    7260:	|  |  |  |      movea.l 4(a0),a0
    7264:	|  |  |  |      move.l 36(sp),d0
    7268:	|  |  |  |      add.l d0,d0
    726a:	|  |  |  |      add.l d0,d0
    726c:	|  |  |  |      adda.l d0,a0
    726e:	|  |  |  |      move.l (a0),d0
    7270:	|  |  |  |      lsl.l #3,d0
    7272:	|  |  |  |      movea.l d1,a0
    7274:	|  |  |  |      adda.l d0,a0
    7276:	|  |  |  |      move.l 4(a0),16(sp)
			closestPointOnLine (&closestX, &closestY, xTest1, yTest1, xTest2, yTest2, *setX, *setY);
    727c:	|  |  |  |      movea.l 68(sp),a0
    7280:	|  |  |  |      move.l (a0),d1
    7282:	|  |  |  |      movea.l 64(sp),a0
    7286:	|  |  |  |      move.l (a0),d0
    7288:	|  |  |  |      move.l d1,-(sp)
    728a:	|  |  |  |      move.l d0,-(sp)
    728c:	|  |  |  |      move.l 24(sp),-(sp)
    7290:	|  |  |  |      move.l 32(sp),-(sp)
    7294:	|  |  |  |      move.l 40(sp),-(sp)
    7298:	|  |  |  |      move.l 48(sp),-(sp)
    729c:	|  |  |  |      lea 28(sp),a0
    72a0:	|  |  |  |      move.l a0,-(sp)
    72a2:	|  |  |  |      lea 36(sp),a0
    72a6:	|  |  |  |      move.l a0,-(sp)
    72a8:	|  |  |  |      jsr 11d68 <closestPointOnLine>
    72ae:	|  |  |  |      lea 32(sp),sp

			xTest1 = *setX - closestX;
    72b2:	|  |  |  |      movea.l 64(sp),a0
    72b6:	|  |  |  |      move.l (a0),d0
    72b8:	|  |  |  |      move.l 8(sp),d1
    72bc:	|  |  |  |      move.l d0,d2
    72be:	|  |  |  |      sub.l d1,d2
    72c0:	|  |  |  |      move.l d2,28(sp)
			yTest1 = *setY - closestY;
    72c4:	|  |  |  |      movea.l 68(sp),a0
    72c8:	|  |  |  |      move.l (a0),d0
    72ca:	|  |  |  |      move.l 4(sp),d1
    72ce:	|  |  |  |      move.l d0,d2
    72d0:	|  |  |  |      sub.l d1,d2
    72d2:	|  |  |  |      move.l d2,24(sp)
			thisDistance = xTest1 * xTest1 + yTest1 * yTest1;
    72d6:	|  |  |  |      move.l 28(sp),-(sp)
    72da:	|  |  |  |      move.l 32(sp),-(sp)
    72de:	|  |  |  |      jsr 13a0a <__mulsi3>
    72e4:	|  |  |  |      addq.l #8,sp
    72e6:	|  |  |  |      move.l d0,d2
    72e8:	|  |  |  |      move.l 24(sp),-(sp)
    72ec:	|  |  |  |      move.l 28(sp),-(sp)
    72f0:	|  |  |  |      jsr 13a0a <__mulsi3>
    72f6:	|  |  |  |      addq.l #8,sp
    72f8:	|  |  |  |      move.l d2,d1
    72fa:	|  |  |  |      add.l d0,d1
    72fc:	|  |  |  |      move.l d1,12(sp)


			if (thisDistance < currentDistance) {
    7300:	|  |  |  |      move.l 12(sp),d2
    7304:	|  |  |  |      cmp.l 32(sp),d2
    7308:	|  |  |  |  /-- bge.s 7322 <handleClosestPoint+0x1d4>

				currentDistance = thisDistance;
    730a:	|  |  |  |  |   move.l 12(sp),32(sp)
				gotX = closestX;
    7310:	|  |  |  |  |   move.l 8(sp),56(sp)
				gotY = closestY;
    7316:	|  |  |  |  |   move.l 4(sp),52(sp)
				gotPoly = i;
    731c:	|  |  |  |  |   move.l 44(sp),48(sp)
			}
			oldJ = j;
    7322:	|  |  |  |  \-> move.l 40(sp),36(sp)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
    7328:	|  |  |  |      addq.l #1,40(sp)
    732c:	|  |  |  \----> movea.l 19d6a <currentFloor>,a0
    7332:	|  |  |         move.l 12(a0),d1
    7336:	|  |  |         move.l 44(sp),d0
    733a:	|  |  |         lsl.l #3,d0
    733c:	|  |  |         movea.l d1,a0
    733e:	|  |  |         adda.l d0,a0
    7340:	|  |  |         move.l (a0),d0
    7342:	|  |  |         cmp.l 40(sp),d0
    7346:	|  |  \-------- bgt.w 71a0 <handleClosestPoint+0x52>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
    734a:	|  |            addq.l #1,44(sp)
    734e:	|  \----------> movea.l 19d6a <currentFloor>,a0
    7354:	|               move.l 8(a0),d0
    7358:	|               cmp.l 44(sp),d0
    735c:	\-------------- bgt.w 717a <handleClosestPoint+0x2c>
		}
	}

	if (gotPoly == -1) return FALSE;
    7360:	                moveq #-1,d0
    7362:	                cmp.l 48(sp),d0
    7366:	            /-- bne.s 736c <handleClosestPoint+0x21e>
    7368:	            |   clr.w d0
    736a:	         /--|-- bra.s 7386 <handleClosestPoint+0x238>
	*setX = gotX;
    736c:	         |  \-> movea.l 64(sp),a0
    7370:	         |      move.l 56(sp),(a0)
	*setY = gotY;
    7374:	         |      movea.l 68(sp),a0
    7378:	         |      move.l 52(sp),(a0)
	*setPoly = gotPoly;
    737c:	         |      movea.l 72(sp),a0
    7380:	         |      move.l 48(sp),(a0)

	return TRUE;
    7384:	         |      moveq #1,d0
}
    7386:	         \----> move.l (sp)+,d2
    7388:	                lea 56(sp),sp
    738c:	                rts

0000738e <initPeople>:


BOOL initPeople () {
	personRegion.sX = 0;
    738e:	clr.l 19cd2 <personRegion+0x10>
	personRegion.sY = 0;
    7394:	clr.l 19cd6 <personRegion+0x14>
	personRegion.di = -1;
    739a:	moveq #-1,d0
    739c:	move.l d0,19cda <personRegion+0x18>
	allScreenRegions = NULL;
    73a2:	clr.l 19d62 <allScreenRegions>

	return TRUE;
    73a8:	moveq #1,d0
}
    73aa:	rts

000073ac <jumpPerson>:

void jumpPerson (int x, int y, int objNum) {
    73ac:	          subq.l #4,sp
    73ae:	          move.l d2,-(sp)
    if (x == 0 && y == 0) return;
    73b0:	          tst.l 12(sp)
    73b4:	      /-- bne.s 73bc <jumpPerson+0x10>
    73b6:	      |   tst.l 16(sp)
    73ba:	/-----|-- beq.s 7430 <jumpPerson+0x84>
    struct onScreenPerson * moveMe = findPerson(objNum);
    73bc:	|     \-> move.l 20(sp),-(sp)
    73c0:	|         jsr 7052 <findPerson>
    73c6:	|         addq.l #4,sp
    73c8:	|         move.l d0,4(sp)
    if (!moveMe) return;
    73cc:	|  /----- beq.s 7434 <jumpPerson+0x88>
    if (moveMe->continueAfterWalking) abortFunction(moveMe->continueAfterWalking);
    73ce:	|  |      movea.l 4(sp),a0
    73d2:	|  |      move.l 56(a0),d0
    73d6:	|  |  /-- beq.s 73ea <jumpPerson+0x3e>
    73d8:	|  |  |   movea.l 4(sp),a0
    73dc:	|  |  |   move.l 56(a0),d0
    73e0:	|  |  |   move.l d0,-(sp)
    73e2:	|  |  |   jsr 2546 <abortFunction>
    73e8:	|  |  |   addq.l #4,sp
    moveMe->continueAfterWalking = NULL;
    73ea:	|  |  \-> movea.l 4(sp),a0
    73ee:	|  |      clr.l 56(a0)
    moveMe->walking = FALSE;
    73f2:	|  |      movea.l 4(sp),a0
    73f6:	|  |      clr.w 52(a0)
    moveMe->spinning = FALSE;
    73fa:	|  |      movea.l 4(sp),a0
    73fe:	|  |      clr.w 54(a0)
    moveAndScale(moveMe, x, y);
    7402:	|  |      move.l 16(sp),-(sp)
    7406:	|  |      jsr 134b0 <__floatsisf>
    740c:	|  |      addq.l #4,sp
    740e:	|  |      move.l d0,d2
    7410:	|  |      move.l 12(sp),-(sp)
    7414:	|  |      jsr 134b0 <__floatsisf>
    741a:	|  |      addq.l #4,sp
    741c:	|  |      move.l d2,-(sp)
    741e:	|  |      move.l d0,-(sp)
    7420:	|  |      move.l 12(sp),-(sp)
    7424:	|  |      jsr 779a <moveAndScale>
    742a:	|  |      lea 12(sp),sp
    742e:	|  |  /-- bra.s 7436 <jumpPerson+0x8a>
    if (x == 0 && y == 0) return;
    7430:	\--|--|-> nop
    7432:	   |  +-- bra.s 7436 <jumpPerson+0x8a>
    if (!moveMe) return;
    7434:	   \--|-> nop
}
    7436:	      \-> move.l (sp)+,d2
    7438:	          addq.l #4,sp
    743a:	          rts

0000743c <killAllPeople>:


void killAllPeople () {
    743c:	          subq.l #8,sp
    743e:	          move.l a6,-(sp)
	struct onScreenPerson * killPeople;
	while (allPeople) {
    7440:	   /----- bra.s 74ac <killAllPeople+0x70>
		if (allPeople -> continueAfterWalking) abortFunction (allPeople -> continueAfterWalking);
    7442:	/--|----> movea.l 19cbe <allPeople>,a0
    7448:	|  |      move.l 56(a0),d0
    744c:	|  |  /-- beq.s 7462 <killAllPeople+0x26>
    744e:	|  |  |   movea.l 19cbe <allPeople>,a0
    7454:	|  |  |   move.l 56(a0),d0
    7458:	|  |  |   move.l d0,-(sp)
    745a:	|  |  |   jsr 2546 <abortFunction>
    7460:	|  |  |   addq.l #4,sp
		allPeople -> continueAfterWalking = NULL;
    7462:	|  |  \-> movea.l 19cbe <allPeople>,a0
    7468:	|  |      clr.l 56(a0)
		killPeople = allPeople;
    746c:	|  |      move.l 19cbe <allPeople>,8(sp)
		allPeople = allPeople -> next;
    7474:	|  |      movea.l 19cbe <allPeople>,a0
    747a:	|  |      move.l 24(a0),d0
    747e:	|  |      move.l d0,19cbe <allPeople>
		removeObjectType (killPeople -> thisType);
    7484:	|  |      movea.l 8(sp),a0
    7488:	|  |      move.l 102(a0),d0
    748c:	|  |      move.l d0,-(sp)
    748e:	|  |      jsr a0ba <removeObjectType>
    7494:	|  |      addq.l #4,sp
		FreeVec(killPeople);
    7496:	|  |      move.l 8(sp),4(sp)
    749c:	|  |      move.l 19c5e <SysBase>,d0
    74a2:	|  |      movea.l d0,a6
    74a4:	|  |      movea.l 4(sp),a1
    74a8:	|  |      jsr -690(a6)
	while (allPeople) {
    74ac:	|  \----> move.l 19cbe <allPeople>,d0
    74b2:	\-------- bne.s 7442 <killAllPeople+0x6>
	}
}
    74b4:	          nop
    74b6:	          nop
    74b8:	          movea.l (sp)+,a6
    74ba:	          addq.l #8,sp
    74bc:	          rts

000074be <killMostPeople>:

void killMostPeople() {
    74be:	          lea -12(sp),sp
    74c2:	          move.l a6,-(sp)
    struct onScreenPerson *killPeople;
    struct onScreenPerson **lookyHere = &allPeople;
    74c4:	          move.l #105662,12(sp)

    while (*lookyHere) {
    74cc:	   /----- bra.w 7552 <killMostPeople+0x94>
        if ((*lookyHere)->extra & EXTRA_NOREMOVE) {
    74d0:	/--|----> movea.l 12(sp),a0
    74d4:	|  |      movea.l (a0),a0
    74d6:	|  |      move.l 106(a0),d0
    74da:	|  |      moveq #32,d1
    74dc:	|  |      and.l d1,d0
    74de:	|  |  /-- beq.s 74f0 <killMostPeople+0x32>
            lookyHere = &(*lookyHere)->next;
    74e0:	|  |  |   movea.l 12(sp),a0
    74e4:	|  |  |   move.l (a0),d0
    74e6:	|  |  |   moveq #24,d1
    74e8:	|  |  |   add.l d0,d1
    74ea:	|  |  |   move.l d1,12(sp)
    74ee:	|  +--|-- bra.s 7552 <killMostPeople+0x94>
        } else {
            killPeople = (*lookyHere);
    74f0:	|  |  \-> movea.l 12(sp),a0
    74f4:	|  |      move.l (a0),8(sp)

            // Change last pointer to NEXT in the list instead
            (*lookyHere) = killPeople->next;
    74f8:	|  |      movea.l 8(sp),a0
    74fc:	|  |      move.l 24(a0),d0
    7500:	|  |      movea.l 12(sp),a0
    7504:	|  |      move.l d0,(a0)

            // Gone from the list... now free some memory
            if (killPeople->continueAfterWalking) abortFunction(killPeople->continueAfterWalking);
    7506:	|  |      movea.l 8(sp),a0
    750a:	|  |      move.l 56(a0),d0
    750e:	|  |  /-- beq.s 7522 <killMostPeople+0x64>
    7510:	|  |  |   movea.l 8(sp),a0
    7514:	|  |  |   move.l 56(a0),d0
    7518:	|  |  |   move.l d0,-(sp)
    751a:	|  |  |   jsr 2546 <abortFunction>
    7520:	|  |  |   addq.l #4,sp
            killPeople->continueAfterWalking = NULL;
    7522:	|  |  \-> movea.l 8(sp),a0
    7526:	|  |      clr.l 56(a0)
            removeObjectType(killPeople->thisType);
    752a:	|  |      movea.l 8(sp),a0
    752e:	|  |      move.l 102(a0),d0
    7532:	|  |      move.l d0,-(sp)
    7534:	|  |      jsr a0ba <removeObjectType>
    753a:	|  |      addq.l #4,sp
            FreeVec(killPeople);
    753c:	|  |      move.l 8(sp),4(sp)
    7542:	|  |      move.l 19c5e <SysBase>,d0
    7548:	|  |      movea.l d0,a6
    754a:	|  |      movea.l 4(sp),a1
    754e:	|  |      jsr -690(a6)
    while (*lookyHere) {
    7552:	|  \----> movea.l 12(sp),a0
    7556:	|         move.l (a0),d0
    7558:	\-------- bne.w 74d0 <killMostPeople+0x12>
        }
    }
}
    755c:	          nop
    755e:	          nop
    7560:	          movea.l (sp)+,a6
    7562:	          lea 12(sp),sp
    7566:	          rts

00007568 <makeSilent>:
//	db ("End of loadPeople");
	return TRUE;
}

void makeSilent (struct onScreenPerson me) {
	setFrames (&me, ANI_STAND);
    7568:	clr.l -(sp)
    756a:	move.l sp,d0
    756c:	addq.l #8,d0
    756e:	move.l d0,-(sp)
    7570:	jsr 5ca0 <setFrames>
    7576:	addq.l #8,sp
}
    7578:	nop
    757a:	rts

0000757c <makeWalkingPerson>:

BOOL makeWalkingPerson (int x, int y, int objNum, struct loadedFunction * func, int di) {
    757c:	          lea -12(sp),sp
    7580:	          move.l d2,-(sp)
	if (x == 0 && y == 0) return FALSE;
    7582:	          tst.l 20(sp)
    7586:	      /-- bne.s 7594 <makeWalkingPerson+0x18>
    7588:	      |   tst.l 24(sp)
    758c:	      +-- bne.s 7594 <makeWalkingPerson+0x18>
    758e:	      |   clr.w d0
    7590:	/-----|-- bra.w 772c <makeWalkingPerson+0x1b0>
	if (currentFloor -> numPolygons == 0) return FALSE;
    7594:	|     \-> movea.l 19d6a <currentFloor>,a0
    759a:	|         move.l 8(a0),d0
    759e:	|     /-- bne.s 75a6 <makeWalkingPerson+0x2a>
    75a0:	|     |   clr.w d0
    75a2:	+-----|-- bra.w 772c <makeWalkingPerson+0x1b0>
	struct onScreenPerson * moveMe = findPerson (objNum);
    75a6:	|     \-> move.l 28(sp),-(sp)
    75aa:	|         jsr 7052 <findPerson>
    75b0:	|         addq.l #4,sp
    75b2:	|         move.l d0,12(sp)
	if (! moveMe) return FALSE;
    75b6:	|     /-- bne.s 75be <makeWalkingPerson+0x42>
    75b8:	|     |   clr.w d0
    75ba:	+-----|-- bra.w 772c <makeWalkingPerson+0x1b0>

	if (moveMe -> continueAfterWalking) abortFunction (moveMe -> continueAfterWalking);
    75be:	|     \-> movea.l 12(sp),a0
    75c2:	|         move.l 56(a0),d0
    75c6:	|     /-- beq.s 75da <makeWalkingPerson+0x5e>
    75c8:	|     |   movea.l 12(sp),a0
    75cc:	|     |   move.l 56(a0),d0
    75d0:	|     |   move.l d0,-(sp)
    75d2:	|     |   jsr 2546 <abortFunction>
    75d8:	|     |   addq.l #4,sp
	moveMe -> continueAfterWalking = NULL;
    75da:	|     \-> movea.l 12(sp),a0
    75de:	|         clr.l 56(a0)
	moveMe -> walking = TRUE;
    75e2:	|         movea.l 12(sp),a0
    75e6:	|         move.w #1,52(a0)
	moveMe -> directionWhenDoneWalking = di;
    75ec:	|         movea.l 12(sp),a0
    75f0:	|         move.l 36(sp),98(a0)

	moveMe -> walkToX = x;
    75f6:	|         movea.l 12(sp),a0
    75fa:	|         move.l 20(sp),28(a0)
	moveMe -> walkToY = y;
    7600:	|         movea.l 12(sp),a0
    7604:	|         move.l 24(sp),32(a0)
	moveMe -> walkToPoly = inFloor (x, y);
    760a:	|         move.l 24(sp),-(sp)
    760e:	|         move.l 24(sp),-(sp)
    7612:	|         jsr 1226a <inFloor>
    7618:	|         addq.l #8,sp
    761a:	|         movea.l 12(sp),a0
    761e:	|         move.l d0,48(a0)
	if (moveMe -> walkToPoly == -1) {
    7622:	|         movea.l 12(sp),a0
    7626:	|         move.l 48(a0),d0
    762a:	|         moveq #-1,d1
    762c:	|         cmp.l d0,d1
    762e:	|     /-- bne.s 765e <makeWalkingPerson+0xe2>
		if (! handleClosestPoint (&moveMe -> walkToX, &moveMe -> walkToY, &moveMe -> walkToPoly)) return FALSE;
    7630:	|     |   movea.w #48,a0
    7634:	|     |   adda.l 12(sp),a0
    7638:	|     |   moveq #32,d1
    763a:	|     |   add.l 12(sp),d1
    763e:	|     |   moveq #28,d0
    7640:	|     |   add.l 12(sp),d0
    7644:	|     |   move.l a0,-(sp)
    7646:	|     |   move.l d1,-(sp)
    7648:	|     |   move.l d0,-(sp)
    764a:	|     |   jsr 714e <handleClosestPoint>
    7650:	|     |   lea 12(sp),sp
    7654:	|     |   tst.w d0
    7656:	|     +-- bne.s 765e <makeWalkingPerson+0xe2>
    7658:	|     |   clr.w d0
    765a:	+-----|-- bra.w 772c <makeWalkingPerson+0x1b0>
	}

	moveMe -> inPoly = inFloor (moveMe -> x, moveMe -> y);
    765e:	|     \-> movea.l 12(sp),a0
    7662:	|         move.l 4(a0),d0
    7666:	|         move.l d0,-(sp)
    7668:	|         jsr 13448 <__fixsfsi>
    766e:	|         addq.l #4,sp
    7670:	|         move.l d0,d2
    7672:	|         movea.l 12(sp),a0
    7676:	|         move.l (a0),d0
    7678:	|         move.l d0,-(sp)
    767a:	|         jsr 13448 <__fixsfsi>
    7680:	|         addq.l #4,sp
    7682:	|         move.l d2,-(sp)
    7684:	|         move.l d0,-(sp)
    7686:	|         jsr 1226a <inFloor>
    768c:	|         addq.l #8,sp
    768e:	|         movea.l 12(sp),a0
    7692:	|         move.l d0,44(a0)
	if (moveMe -> inPoly == -1) {
    7696:	|         movea.l 12(sp),a0
    769a:	|         move.l 44(a0),d0
    769e:	|         moveq #-1,d1
    76a0:	|         cmp.l d0,d1
    76a2:	|     /-- bne.s 76f4 <makeWalkingPerson+0x178>
		int xxx = moveMe -> x, yyy = moveMe -> y;
    76a4:	|     |   movea.l 12(sp),a0
    76a8:	|     |   move.l (a0),d0
    76aa:	|     |   move.l d0,-(sp)
    76ac:	|     |   jsr 13448 <__fixsfsi>
    76b2:	|     |   addq.l #4,sp
    76b4:	|     |   move.l d0,8(sp)
    76b8:	|     |   movea.l 12(sp),a0
    76bc:	|     |   move.l 4(a0),d0
    76c0:	|     |   move.l d0,-(sp)
    76c2:	|     |   jsr 13448 <__fixsfsi>
    76c8:	|     |   addq.l #4,sp
    76ca:	|     |   move.l d0,4(sp)
		if (! handleClosestPoint (&xxx, &yyy, &moveMe -> inPoly)) return FALSE;
    76ce:	|     |   moveq #44,d0
    76d0:	|     |   add.l 12(sp),d0
    76d4:	|     |   move.l d0,-(sp)
    76d6:	|     |   lea 8(sp),a0
    76da:	|     |   move.l a0,-(sp)
    76dc:	|     |   moveq #16,d0
    76de:	|     |   add.l sp,d0
    76e0:	|     |   move.l d0,-(sp)
    76e2:	|     |   jsr 714e <handleClosestPoint>
    76e8:	|     |   lea 12(sp),sp
    76ec:	|     |   tst.w d0
    76ee:	|     +-- bne.s 76f4 <makeWalkingPerson+0x178>
    76f0:	|     |   clr.w d0
    76f2:	+-----|-- bra.s 772c <makeWalkingPerson+0x1b0>
	}

	doBorderStuff (moveMe);
    76f4:	|     \-> move.l 12(sp),-(sp)
    76f8:	|         jsr 6998 <doBorderStuff>
    76fe:	|         addq.l #4,sp
	if (walkMe (moveMe, FALSE) || moveMe -> spinning) {
    7700:	|         clr.l -(sp)
    7702:	|         move.l 16(sp),-(sp)
    7706:	|         jsr 87e0 <walkMe>
    770c:	|         addq.l #8,sp
    770e:	|         tst.w d0
    7710:	|     /-- bne.s 771c <makeWalkingPerson+0x1a0>
    7712:	|     |   movea.l 12(sp),a0
    7716:	|     |   move.w 54(a0),d0
    771a:	|  /--|-- beq.s 772a <makeWalkingPerson+0x1ae>
		moveMe -> continueAfterWalking = func;
    771c:	|  |  \-> movea.l 12(sp),a0
    7720:	|  |      move.l 32(sp),56(a0)
		return TRUE;
    7726:	|  |      moveq #1,d0
    7728:	+--|----- bra.s 772c <makeWalkingPerson+0x1b0>
	} else {
		return FALSE;
    772a:	|  \----> clr.w d0
	}
}
    772c:	\-------> move.l (sp)+,d2
    772e:	          lea 12(sp),sp
    7732:	          rts

00007734 <makeNullAnim>:


struct personaAnimation * makeNullAnim () {
    7734:	       lea -16(sp),sp
    7738:	       move.l a6,-(sp)

	struct personaAnimation * newAnim	= AllocVec(sizeof(struct personaAnimation),MEMF_ANY);
    773a:	       moveq #12,d0
    773c:	       move.l d0,16(sp)
    7740:	       clr.l 12(sp)
    7744:	       move.l 19c5e <SysBase>,d0
    774a:	       movea.l d0,a6
    774c:	       move.l 16(sp),d0
    7750:	       move.l 12(sp),d1
    7754:	       jsr -684(a6)
    7758:	       move.l d0,8(sp)
    775c:	       move.l 8(sp),d0
    7760:	       move.l d0,4(sp)
    if(newAnim == 0) {
    7764:	   /-- bne.s 7778 <makeNullAnim+0x44>
     	KPrintF("makeNullAnim: Can't reserve Memory\n");
    7766:	   |   pea 162ce <incbin_player_end+0x20e>
    776c:	   |   jsr 12f14 <KPrintF>
    7772:	   |   addq.l #4,sp
        return NULL;    
    7774:	   |   moveq #0,d0
    7776:	/--|-- bra.s 7792 <makeNullAnim+0x5e>
    }  

	newAnim -> theSprites		= NULL;
    7778:	|  \-> movea.l 4(sp),a0
    777c:	|      clr.l (a0)
	newAnim -> numFrames		= 0;
    777e:	|      movea.l 4(sp),a0
    7782:	|      clr.l 8(a0)
	newAnim -> frames			= NULL;
    7786:	|      movea.l 4(sp),a0
    778a:	|      clr.l 4(a0)
	return newAnim;
    778e:	|      move.l 4(sp),d0
}
    7792:	\----> movea.l (sp)+,a6
    7794:	       lea 16(sp),sp
    7798:	       rts

0000779a <moveAndScale>:

void moveAndScale (struct onScreenPerson *me, FLOAT x, FLOAT y) {
    779a:	    move.l d2,-(sp)
	me->x = x;
    779c:	    movea.l 8(sp),a0
    77a0:	    move.l 12(sp),(a0)
	me->y = y;
    77a4:	    movea.l 8(sp),a0
    77a8:	    move.l 16(sp),4(a0)
	if (! (me->extra & EXTRA_NOSCALE) && scaleDivide) me->scale = (me->y - scaleHorizon) / scaleDivide;
    77ae:	    movea.l 8(sp),a0
    77b2:	    move.l 106(a0),d0
    77b6:	    moveq #2,d1
    77b8:	    and.l d1,d0
    77ba:	/-- bne.s 7812 <moveAndScale+0x78>
    77bc:	|   move.w 18140 <scaleDivide>,d0
    77c2:	+-- beq.s 7812 <moveAndScale+0x78>
    77c4:	|   movea.l 8(sp),a0
    77c8:	|   move.l 4(a0),d2
    77cc:	|   move.w 1813e <scaleHorizon>,d0
    77d2:	|   movea.w d0,a0
    77d4:	|   move.l a0,-(sp)
    77d6:	|   jsr 134b0 <__floatsisf>
    77dc:	|   addq.l #4,sp
    77de:	|   move.l d0,-(sp)
    77e0:	|   move.l d2,-(sp)
    77e2:	|   jsr 137a4 <__subsf3>
    77e8:	|   addq.l #8,sp
    77ea:	|   move.l d0,d2
    77ec:	|   move.w 18140 <scaleDivide>,d0
    77f2:	|   movea.w d0,a0
    77f4:	|   move.l a0,-(sp)
    77f6:	|   jsr 134b0 <__floatsisf>
    77fc:	|   addq.l #4,sp
    77fe:	|   move.l d0,-(sp)
    7800:	|   move.l d2,-(sp)
    7802:	|   jsr 1335c <__divsf3>
    7808:	|   addq.l #8,sp
    780a:	|   movea.l 8(sp),a0
    780e:	|   move.l d0,20(a0)
}
    7812:	\-> nop
    7814:	    move.l (sp)+,d2
    7816:	    rts

00007818 <removeOneCharacter>:

void removeOneCharacter (int i) {
    7818:	          lea -12(sp),sp
    781c:	          move.l a6,-(sp)
    struct onScreenPerson * p = findPerson(i);
    781e:	          move.l 20(sp),-(sp)
    7822:	          jsr 7052 <findPerson>
    7828:	          addq.l #4,sp
    782a:	          move.l d0,8(sp)

    if (p) {
    782e:	/-------- beq.w 78da <removeOneCharacter+0xc2>
        if (overRegion == &personRegion && overRegion->thisType == p->thisType) {
    7832:	|         move.l 19d66 <overRegion>,d0
    7838:	|         cmpi.l #105666,d0
    783e:	|     /-- bne.s 785c <removeOneCharacter+0x44>
    7840:	|     |   movea.l 19d66 <overRegion>,a0
    7846:	|     |   move.l 28(a0),d1
    784a:	|     |   movea.l 8(sp),a0
    784e:	|     |   move.l 102(a0),d0
    7852:	|     |   cmp.l d1,d0
    7854:	|     +-- bne.s 785c <removeOneCharacter+0x44>
            overRegion = NULL;
    7856:	|     |   clr.l 19d66 <overRegion>
        }

        if (p->continueAfterWalking) abortFunction(p->continueAfterWalking);
    785c:	|     \-> movea.l 8(sp),a0
    7860:	|         move.l 56(a0),d0
    7864:	|     /-- beq.s 7878 <removeOneCharacter+0x60>
    7866:	|     |   movea.l 8(sp),a0
    786a:	|     |   move.l 56(a0),d0
    786e:	|     |   move.l d0,-(sp)
    7870:	|     |   jsr 2546 <abortFunction>
    7876:	|     |   addq.l #4,sp
        p->continueAfterWalking = NULL;
    7878:	|     \-> movea.l 8(sp),a0
    787c:	|         clr.l 56(a0)
        struct onScreenPerson ** killPeople;

        for (killPeople = &allPeople;
    7880:	|         move.l #105662,12(sp)
    7888:	|     /-- bra.s 7898 <removeOneCharacter+0x80>
            *killPeople != p;
            killPeople = &((*killPeople)->next)) {;}
    788a:	|  /--|-> movea.l 12(sp),a0
    788e:	|  |  |   move.l (a0),d0
    7890:	|  |  |   moveq #24,d1
    7892:	|  |  |   add.l d0,d1
    7894:	|  |  |   move.l d1,12(sp)
            *killPeople != p;
    7898:	|  |  \-> movea.l 12(sp),a0
    789c:	|  |      move.l (a0),d0
    789e:	|  |      cmp.l 8(sp),d0
    78a2:	|  \----- bne.s 788a <removeOneCharacter+0x72>

        *killPeople = p->next;
    78a4:	|         movea.l 8(sp),a0
    78a8:	|         move.l 24(a0),d0
    78ac:	|         movea.l 12(sp),a0
    78b0:	|         move.l d0,(a0)
        removeObjectType(p->thisType);
    78b2:	|         movea.l 8(sp),a0
    78b6:	|         move.l 102(a0),d0
    78ba:	|         move.l d0,-(sp)
    78bc:	|         jsr a0ba <removeObjectType>
    78c2:	|         addq.l #4,sp
        FreeVec(p);
    78c4:	|         move.l 8(sp),4(sp)
    78ca:	|         move.l 19c5e <SysBase>,d0
    78d0:	|         movea.l d0,a6
    78d2:	|         movea.l 4(sp),a1
    78d6:	|         jsr -690(a6)
    }
}
    78da:	\-------> nop
    78dc:	          movea.l (sp)+,a6
    78de:	          lea 12(sp),sp
    78e2:	          rts

000078e4 <rethinkAngle>:

void rethinkAngle (struct onScreenPerson * thisPerson) {
    78e4:	       subq.l #8,sp
    78e6:	       move.l d2,-(sp)
	int d = thisPerson -> myPersona -> numDirections;
    78e8:	       movea.l 16(sp),a0
    78ec:	       movea.l 68(a0),a0
    78f0:	       move.l 4(a0),4(sp)
	int direc = thisPerson -> angle + (180 / d) + 180 + thisPerson -> angleOffset;
    78f6:	       movea.l 16(sp),a0
    78fa:	       move.l 80(a0),d2
    78fe:	       move.l 4(sp),-(sp)
    7902:	       pea b4 <_start+0xb4>
    7906:	       jsr 13a88 <__divsi3>
    790c:	       addq.l #8,sp
    790e:	       add.l d2,d0
    7910:	       move.l d0,d1
    7912:	       addi.l #180,d1
    7918:	       movea.l 16(sp),a0
    791c:	       move.l 88(a0),d0
    7920:	       move.l d1,d2
    7922:	       add.l d0,d2
    7924:	       move.l d2,8(sp)
	while (direc >= 360) direc -= 360;
    7928:	   /-- bra.s 7932 <rethinkAngle+0x4e>
    792a:	/--|-> addi.l #-360,8(sp)
    7932:	|  \-> cmpi.l #359,8(sp)
    793a:	\----- bgt.s 792a <rethinkAngle+0x46>
	thisPerson -> direction = (direc * d) / 360;
    793c:	       move.l 4(sp),-(sp)
    7940:	       move.l 12(sp),-(sp)
    7944:	       jsr 13a0a <__mulsi3>
    794a:	       addq.l #8,sp
    794c:	       pea 168 <decodeFilename+0x50>
    7950:	       move.l d0,-(sp)
    7952:	       jsr 13a88 <__divsi3>
    7958:	       addq.l #8,sp
    795a:	       movea.l 16(sp),a0
    795e:	       move.l d0,94(a0)
}
    7962:	       nop
    7964:	       move.l (sp)+,d2
    7966:	       addq.l #8,sp
    7968:	       rts

0000796a <saveAnim>:


BOOL saveAnim (struct personaAnimation * p, BPTR fp) {
    796a:	          subq.l #4,sp
	put2bytes (p -> numFrames, fp);
    796c:	          movea.l 8(sp),a0
    7970:	          move.l 8(a0),d0
    7974:	          move.l 12(sp),-(sp)
    7978:	          move.l d0,-(sp)
    797a:	          jsr 8d0 <put2bytes>
    7980:	          addq.l #8,sp
	if (p -> numFrames) {
    7982:	          movea.l 8(sp),a0
    7986:	          move.l 8(a0),d0
    798a:	/-------- beq.w 7a2e <saveAnim+0xc4>
		put4bytes (p -> theSprites -> ID, fp);
    798e:	|         movea.l 8(sp),a0
    7992:	|         movea.l (a0),a0
    7994:	|         move.l (a0),d0
    7996:	|         move.l 12(sp),-(sp)
    799a:	|         move.l d0,-(sp)
    799c:	|         jsr 958 <put4bytes>
    79a2:	|         addq.l #8,sp

		for (int a = 0; a < p -> numFrames; a ++) {
    79a4:	|         clr.l (sp)
    79a6:	|     /-- bra.s 7a20 <saveAnim+0xb6>
			put4bytes (p -> frames[a].frameNum, fp);
    79a8:	|  /--|-> movea.l 8(sp),a0
    79ac:	|  |  |   movea.l 4(a0),a0
    79b0:	|  |  |   move.l (sp),d1
    79b2:	|  |  |   move.l d1,d0
    79b4:	|  |  |   add.l d0,d0
    79b6:	|  |  |   add.l d1,d0
    79b8:	|  |  |   add.l d0,d0
    79ba:	|  |  |   add.l d0,d0
    79bc:	|  |  |   adda.l d0,a0
    79be:	|  |  |   move.l (a0),d0
    79c0:	|  |  |   move.l 12(sp),-(sp)
    79c4:	|  |  |   move.l d0,-(sp)
    79c6:	|  |  |   jsr 958 <put4bytes>
    79cc:	|  |  |   addq.l #8,sp
			put4bytes (p -> frames[a].howMany, fp);
    79ce:	|  |  |   movea.l 8(sp),a0
    79d2:	|  |  |   movea.l 4(a0),a0
    79d6:	|  |  |   move.l (sp),d1
    79d8:	|  |  |   move.l d1,d0
    79da:	|  |  |   add.l d0,d0
    79dc:	|  |  |   add.l d1,d0
    79de:	|  |  |   add.l d0,d0
    79e0:	|  |  |   add.l d0,d0
    79e2:	|  |  |   adda.l d0,a0
    79e4:	|  |  |   move.l 4(a0),d0
    79e8:	|  |  |   move.l 12(sp),-(sp)
    79ec:	|  |  |   move.l d0,-(sp)
    79ee:	|  |  |   jsr 958 <put4bytes>
    79f4:	|  |  |   addq.l #8,sp
			put4bytes (p -> frames[a].noise, fp);
    79f6:	|  |  |   movea.l 8(sp),a0
    79fa:	|  |  |   movea.l 4(a0),a0
    79fe:	|  |  |   move.l (sp),d1
    7a00:	|  |  |   move.l d1,d0
    7a02:	|  |  |   add.l d0,d0
    7a04:	|  |  |   add.l d1,d0
    7a06:	|  |  |   add.l d0,d0
    7a08:	|  |  |   add.l d0,d0
    7a0a:	|  |  |   adda.l d0,a0
    7a0c:	|  |  |   move.l 8(a0),d0
    7a10:	|  |  |   move.l 12(sp),-(sp)
    7a14:	|  |  |   move.l d0,-(sp)
    7a16:	|  |  |   jsr 958 <put4bytes>
    7a1c:	|  |  |   addq.l #8,sp
		for (int a = 0; a < p -> numFrames; a ++) {
    7a1e:	|  |  |   addq.l #1,(sp)
    7a20:	|  |  \-> movea.l 8(sp),a0
    7a24:	|  |      move.l 8(a0),d0
    7a28:	|  |      cmp.l (sp),d0
    7a2a:	|  \----- bgt.w 79a8 <saveAnim+0x3e>
		}
	}
	return TRUE;
    7a2e:	\-------> moveq #1,d0
}
    7a30:	          addq.l #4,sp
    7a32:	          rts

00007a34 <saveCostume>:

BOOL saveCostume (struct persona * cossy, BPTR fp) {
    7a34:	             subq.l #4,sp
	int a;
	put2bytes (cossy -> numDirections, fp);
    7a36:	             movea.l 8(sp),a0
    7a3a:	             move.l 4(a0),d0
    7a3e:	             move.l 12(sp),-(sp)
    7a42:	             move.l d0,-(sp)
    7a44:	             jsr 8d0 <put2bytes>
    7a4a:	             addq.l #8,sp
	for (a = 0; a < cossy -> numDirections * 3; a ++) {
    7a4c:	             clr.l (sp)
    7a4e:	   /-------- bra.s 7a7a <saveCostume+0x46>
		if (! saveAnim (cossy -> animation[a], fp)) return FALSE;
    7a50:	/--|-------> movea.l 8(sp),a0
    7a54:	|  |         move.l (a0),d1
    7a56:	|  |         move.l (sp),d0
    7a58:	|  |         add.l d0,d0
    7a5a:	|  |         add.l d0,d0
    7a5c:	|  |         movea.l d1,a0
    7a5e:	|  |         adda.l d0,a0
    7a60:	|  |         move.l (a0),d0
    7a62:	|  |         move.l 12(sp),-(sp)
    7a66:	|  |         move.l d0,-(sp)
    7a68:	|  |         jsr 796a <saveAnim>
    7a6e:	|  |         addq.l #8,sp
    7a70:	|  |         tst.w d0
    7a72:	|  |     /-- bne.s 7a78 <saveCostume+0x44>
    7a74:	|  |     |   clr.w d0
    7a76:	|  |  /--|-- bra.s 7a8e <saveCostume+0x5a>
	for (a = 0; a < cossy -> numDirections * 3; a ++) {
    7a78:	|  |  |  \-> addq.l #1,(sp)
    7a7a:	|  \--|----> movea.l 8(sp),a0
    7a7e:	|     |      move.l 4(a0),d1
    7a82:	|     |      move.l d1,d0
    7a84:	|     |      add.l d0,d0
    7a86:	|     |      add.l d1,d0
    7a88:	|     |      cmp.l (sp),d0
    7a8a:	\-----|----- bgt.s 7a50 <saveCostume+0x1c>
	}

	return TRUE;
    7a8c:	      |      moveq #1,d0
}
    7a8e:	      \----> addq.l #4,sp
    7a90:	             rts

00007a92 <savePeople>:

BOOL savePeople (BPTR fp) {
    7a92:	             lea -144(sp),sp
    7a96:	             move.l a6,-(sp)
    7a98:	             move.l d2,-(sp)
	struct onScreenPerson * me = allPeople;
    7a9a:	             move.l 19cbe <allPeople>,148(sp)
	int countPeople = 0, a;
    7aa2:	             clr.l 144(sp)

	putSigned (scaleHorizon, fp);
    7aa6:	             move.w 1813e <scaleHorizon>,d0
    7aac:	             movea.w d0,a0
    7aae:	             move.l 156(sp),-(sp)
    7ab2:	             move.l a0,-(sp)
    7ab4:	             jsr a9c <putSigned>
    7aba:	             addq.l #8,sp
	putSigned (scaleDivide, fp);
    7abc:	             move.w 18140 <scaleDivide>,d0
    7ac2:	             movea.w d0,a0
    7ac4:	             move.l 156(sp),-(sp)
    7ac8:	             move.l a0,-(sp)
    7aca:	             jsr a9c <putSigned>
    7ad0:	             addq.l #8,sp

	while (me) {
    7ad2:	         /-- bra.s 7ae2 <savePeople+0x50>
		countPeople ++;
    7ad4:	      /--|-> addq.l #1,144(sp)
		me = me -> next;
    7ad8:	      |  |   movea.l 148(sp),a0
    7adc:	      |  |   move.l 24(a0),148(sp)
	while (me) {
    7ae2:	      |  \-> tst.l 148(sp)
    7ae6:	      \----- bne.s 7ad4 <savePeople+0x42>
	}

	put2bytes (countPeople, fp);
    7ae8:	             move.l 156(sp),-(sp)
    7aec:	             move.l 148(sp),-(sp)
    7af0:	             jsr 8d0 <put2bytes>
    7af6:	             addq.l #8,sp

	me = allPeople;
    7af8:	             move.l 19cbe <allPeople>,148(sp)
	for (a = 0; a < countPeople; a ++) {
    7b00:	             clr.l 140(sp)
    7b04:	   /-------- bra.w 7f5c <savePeople+0x4ca>

		putFloat (me -> x, fp);
    7b08:	/--|-------> movea.l 148(sp),a0
    7b0c:	|  |         move.l (a0),d0
    7b0e:	|  |         move.l 156(sp),-(sp)
    7b12:	|  |         move.l d0,-(sp)
    7b14:	|  |         jsr a46 <putFloat>
    7b1a:	|  |         addq.l #8,sp
		putFloat (me -> y, fp);
    7b1c:	|  |         movea.l 148(sp),a0
    7b20:	|  |         move.l 4(a0),d0
    7b24:	|  |         move.l 156(sp),-(sp)
    7b28:	|  |         move.l d0,-(sp)
    7b2a:	|  |         jsr a46 <putFloat>
    7b30:	|  |         addq.l #8,sp

		saveCostume (me -> myPersona, fp);
    7b32:	|  |         movea.l 148(sp),a0
    7b36:	|  |         move.l 68(a0),d0
    7b3a:	|  |         move.l 156(sp),-(sp)
    7b3e:	|  |         move.l d0,-(sp)
    7b40:	|  |         jsr 7a34 <saveCostume>
    7b46:	|  |         addq.l #8,sp
		saveAnim (me -> myAnim, fp);
    7b48:	|  |         movea.l 148(sp),a0
    7b4c:	|  |         move.l 60(a0),d0
    7b50:	|  |         move.l 156(sp),-(sp)
    7b54:	|  |         move.l d0,-(sp)
    7b56:	|  |         jsr 796a <saveAnim>
    7b5c:	|  |         addq.l #8,sp
		FPutC( fp, me -> myAnim == me -> lastUsedAnim);
    7b5e:	|  |         move.l 156(sp),136(sp)
    7b64:	|  |         movea.l 148(sp),a0
    7b68:	|  |         move.l 60(a0),d1
    7b6c:	|  |         movea.l 148(sp),a0
    7b70:	|  |         move.l 64(a0),d0
    7b74:	|  |         cmp.l d1,d0
    7b76:	|  |         seq d0
    7b78:	|  |         neg.b d0
    7b7a:	|  |         move.b d0,d0
    7b7c:	|  |         andi.l #255,d0
    7b82:	|  |         move.l d0,132(sp)
    7b86:	|  |         move.l 19c66 <DOSBase>,d0
    7b8c:	|  |         movea.l d0,a6
    7b8e:	|  |         move.l 136(sp),d1
    7b92:	|  |         move.l 132(sp),d2
    7b96:	|  |         jsr -312(a6)
    7b9a:	|  |         move.l d0,128(sp)

		putFloat (me -> scale, fp);
    7b9e:	|  |         movea.l 148(sp),a0
    7ba2:	|  |         move.l 20(a0),d0
    7ba6:	|  |         move.l 156(sp),-(sp)
    7baa:	|  |         move.l d0,-(sp)
    7bac:	|  |         jsr a46 <putFloat>
    7bb2:	|  |         addq.l #8,sp

		put2bytes (me -> extra, fp);
    7bb4:	|  |         movea.l 148(sp),a0
    7bb8:	|  |         move.l 106(a0),d0
    7bbc:	|  |         move.l 156(sp),-(sp)
    7bc0:	|  |         move.l d0,-(sp)
    7bc2:	|  |         jsr 8d0 <put2bytes>
    7bc8:	|  |         addq.l #8,sp
		put2bytes (me -> height, fp);
    7bca:	|  |         movea.l 148(sp),a0
    7bce:	|  |         move.l 8(a0),d0
    7bd2:	|  |         move.l 156(sp),-(sp)
    7bd6:	|  |         move.l d0,-(sp)
    7bd8:	|  |         jsr 8d0 <put2bytes>
    7bde:	|  |         addq.l #8,sp
		put2bytes (me -> walkToX, fp);
    7be0:	|  |         movea.l 148(sp),a0
    7be4:	|  |         move.l 28(a0),d0
    7be8:	|  |         move.l 156(sp),-(sp)
    7bec:	|  |         move.l d0,-(sp)
    7bee:	|  |         jsr 8d0 <put2bytes>
    7bf4:	|  |         addq.l #8,sp
		put2bytes (me -> walkToY, fp);
    7bf6:	|  |         movea.l 148(sp),a0
    7bfa:	|  |         move.l 32(a0),d0
    7bfe:	|  |         move.l 156(sp),-(sp)
    7c02:	|  |         move.l d0,-(sp)
    7c04:	|  |         jsr 8d0 <put2bytes>
    7c0a:	|  |         addq.l #8,sp
		put2bytes (me -> thisStepX, fp);
    7c0c:	|  |         movea.l 148(sp),a0
    7c10:	|  |         move.l 36(a0),d0
    7c14:	|  |         move.l 156(sp),-(sp)
    7c18:	|  |         move.l d0,-(sp)
    7c1a:	|  |         jsr 8d0 <put2bytes>
    7c20:	|  |         addq.l #8,sp
		put2bytes (me -> thisStepY, fp);
    7c22:	|  |         movea.l 148(sp),a0
    7c26:	|  |         move.l 40(a0),d0
    7c2a:	|  |         move.l 156(sp),-(sp)
    7c2e:	|  |         move.l d0,-(sp)
    7c30:	|  |         jsr 8d0 <put2bytes>
    7c36:	|  |         addq.l #8,sp
		put2bytes (me -> frameNum, fp);
    7c38:	|  |         movea.l 148(sp),a0
    7c3c:	|  |         move.l 72(a0),d0
    7c40:	|  |         move.l 156(sp),-(sp)
    7c44:	|  |         move.l d0,-(sp)
    7c46:	|  |         jsr 8d0 <put2bytes>
    7c4c:	|  |         addq.l #8,sp
		put2bytes (me -> frameTick, fp);
    7c4e:	|  |         movea.l 148(sp),a0
    7c52:	|  |         move.l 76(a0),d0
    7c56:	|  |         move.l 156(sp),-(sp)
    7c5a:	|  |         move.l d0,-(sp)
    7c5c:	|  |         jsr 8d0 <put2bytes>
    7c62:	|  |         addq.l #8,sp
		put2bytes (me -> walkSpeed, fp);
    7c64:	|  |         movea.l 148(sp),a0
    7c68:	|  |         move.l 16(a0),d0
    7c6c:	|  |         move.l 156(sp),-(sp)
    7c70:	|  |         move.l d0,-(sp)
    7c72:	|  |         jsr 8d0 <put2bytes>
    7c78:	|  |         addq.l #8,sp
		put2bytes (me -> spinSpeed, fp);
    7c7a:	|  |         movea.l 148(sp),a0
    7c7e:	|  |         move.l 110(a0),d0
    7c82:	|  |         move.l 156(sp),-(sp)
    7c86:	|  |         move.l d0,-(sp)
    7c88:	|  |         jsr 8d0 <put2bytes>
    7c8e:	|  |         addq.l #8,sp
		putSigned (me -> floaty, fp);
    7c90:	|  |         movea.l 148(sp),a0
    7c94:	|  |         move.l 12(a0),d0
    7c98:	|  |         move.l d0,d0
    7c9a:	|  |         movea.w d0,a0
    7c9c:	|  |         move.l 156(sp),-(sp)
    7ca0:	|  |         move.l a0,-(sp)
    7ca2:	|  |         jsr a9c <putSigned>
    7ca8:	|  |         addq.l #8,sp
		FPutC (fp, me -> show);
    7caa:	|  |         move.l 156(sp),124(sp)
    7cb0:	|  |         movea.l 148(sp),a0
    7cb4:	|  |         move.w 92(a0),d0
    7cb8:	|  |         movea.w d0,a0
    7cba:	|  |         move.l a0,120(sp)
    7cbe:	|  |         move.l 19c66 <DOSBase>,d0
    7cc4:	|  |         movea.l d0,a6
    7cc6:	|  |         move.l 124(sp),d1
    7cca:	|  |         move.l 120(sp),d2
    7cce:	|  |         jsr -312(a6)
    7cd2:	|  |         move.l d0,116(sp)
		FPutC (fp, me -> walking);
    7cd6:	|  |         move.l 156(sp),112(sp)
    7cdc:	|  |         movea.l 148(sp),a0
    7ce0:	|  |         move.w 52(a0),d0
    7ce4:	|  |         movea.w d0,a0
    7ce6:	|  |         move.l a0,108(sp)
    7cea:	|  |         move.l 19c66 <DOSBase>,d0
    7cf0:	|  |         movea.l d0,a6
    7cf2:	|  |         move.l 112(sp),d1
    7cf6:	|  |         move.l 108(sp),d2
    7cfa:	|  |         jsr -312(a6)
    7cfe:	|  |         move.l d0,104(sp)
		FPutC (fp, me -> spinning);
    7d02:	|  |         move.l 156(sp),100(sp)
    7d08:	|  |         movea.l 148(sp),a0
    7d0c:	|  |         move.w 54(a0),d0
    7d10:	|  |         movea.w d0,a0
    7d12:	|  |         move.l a0,96(sp)
    7d16:	|  |         move.l 19c66 <DOSBase>,d0
    7d1c:	|  |         movea.l d0,a6
    7d1e:	|  |         move.l 100(sp),d1
    7d22:	|  |         move.l 96(sp),d2
    7d26:	|  |         jsr -312(a6)
    7d2a:	|  |         move.l d0,92(sp)
		if (me -> continueAfterWalking) {
    7d2e:	|  |         movea.l 148(sp),a0
    7d32:	|  |         move.l 56(a0),d0
    7d36:	|  |  /----- beq.s 7d74 <savePeople+0x2e2>
			FPutC (fp, 1);
    7d38:	|  |  |      move.l 156(sp),76(sp)
    7d3e:	|  |  |      moveq #1,d0
    7d40:	|  |  |      move.l d0,72(sp)
    7d44:	|  |  |      move.l 19c66 <DOSBase>,d0
    7d4a:	|  |  |      movea.l d0,a6
    7d4c:	|  |  |      move.l 76(sp),d1
    7d50:	|  |  |      move.l 72(sp),d2
    7d54:	|  |  |      jsr -312(a6)
    7d58:	|  |  |      move.l d0,68(sp)
			saveFunction (me -> continueAfterWalking, fp);
    7d5c:	|  |  |      movea.l 148(sp),a0
    7d60:	|  |  |      move.l 56(a0),d0
    7d64:	|  |  |      move.l 156(sp),-(sp)
    7d68:	|  |  |      move.l d0,-(sp)
    7d6a:	|  |  |      jsr 8f02 <saveFunction>
    7d70:	|  |  |      addq.l #8,sp
    7d72:	|  |  |  /-- bra.s 7d98 <savePeople+0x306>
		} else {
			FPutC (fp, 1);
    7d74:	|  |  \--|-> move.l 156(sp),88(sp)
    7d7a:	|  |     |   moveq #1,d0
    7d7c:	|  |     |   move.l d0,84(sp)
    7d80:	|  |     |   move.l 19c66 <DOSBase>,d0
    7d86:	|  |     |   movea.l d0,a6
    7d88:	|  |     |   move.l 88(sp),d1
    7d8c:	|  |     |   move.l 84(sp),d2
    7d90:	|  |     |   jsr -312(a6)
    7d94:	|  |     |   move.l d0,80(sp)
		}
		put2bytes (me -> direction, fp);
    7d98:	|  |     \-> movea.l 148(sp),a0
    7d9c:	|  |         move.l 94(a0),d0
    7da0:	|  |         move.l 156(sp),-(sp)
    7da4:	|  |         move.l d0,-(sp)
    7da6:	|  |         jsr 8d0 <put2bytes>
    7dac:	|  |         addq.l #8,sp
		put2bytes (me -> angle, fp);
    7dae:	|  |         movea.l 148(sp),a0
    7db2:	|  |         move.l 80(a0),d0
    7db6:	|  |         move.l 156(sp),-(sp)
    7dba:	|  |         move.l d0,-(sp)
    7dbc:	|  |         jsr 8d0 <put2bytes>
    7dc2:	|  |         addq.l #8,sp
		put2bytes (me -> angleOffset, fp);
    7dc4:	|  |         movea.l 148(sp),a0
    7dc8:	|  |         move.l 88(a0),d0
    7dcc:	|  |         move.l 156(sp),-(sp)
    7dd0:	|  |         move.l d0,-(sp)
    7dd2:	|  |         jsr 8d0 <put2bytes>
    7dd8:	|  |         addq.l #8,sp
		put2bytes (me -> wantAngle, fp);
    7dda:	|  |         movea.l 148(sp),a0
    7dde:	|  |         move.l 84(a0),d0
    7de2:	|  |         move.l 156(sp),-(sp)
    7de6:	|  |         move.l d0,-(sp)
    7de8:	|  |         jsr 8d0 <put2bytes>
    7dee:	|  |         addq.l #8,sp
		putSigned (me -> directionWhenDoneWalking, fp);
    7df0:	|  |         movea.l 148(sp),a0
    7df4:	|  |         move.l 98(a0),d0
    7df8:	|  |         move.l d0,d0
    7dfa:	|  |         movea.w d0,a0
    7dfc:	|  |         move.l 156(sp),-(sp)
    7e00:	|  |         move.l a0,-(sp)
    7e02:	|  |         jsr a9c <putSigned>
    7e08:	|  |         addq.l #8,sp
		putSigned (me -> inPoly, fp);
    7e0a:	|  |         movea.l 148(sp),a0
    7e0e:	|  |         move.l 44(a0),d0
    7e12:	|  |         move.l d0,d0
    7e14:	|  |         movea.w d0,a0
    7e16:	|  |         move.l 156(sp),-(sp)
    7e1a:	|  |         move.l a0,-(sp)
    7e1c:	|  |         jsr a9c <putSigned>
    7e22:	|  |         addq.l #8,sp
		putSigned (me -> walkToPoly, fp);
    7e24:	|  |         movea.l 148(sp),a0
    7e28:	|  |         move.l 48(a0),d0
    7e2c:	|  |         move.l d0,d0
    7e2e:	|  |         movea.w d0,a0
    7e30:	|  |         move.l 156(sp),-(sp)
    7e34:	|  |         move.l a0,-(sp)
    7e36:	|  |         jsr a9c <putSigned>
    7e3c:	|  |         addq.l #8,sp

		FPutC (fp, me -> r);
    7e3e:	|  |         move.l 156(sp),64(sp)
    7e44:	|  |         movea.l 148(sp),a0
    7e48:	|  |         move.b 114(a0),d0
    7e4c:	|  |         move.b d0,d0
    7e4e:	|  |         andi.l #255,d0
    7e54:	|  |         move.l d0,60(sp)
    7e58:	|  |         move.l 19c66 <DOSBase>,d0
    7e5e:	|  |         movea.l d0,a6
    7e60:	|  |         move.l 64(sp),d1
    7e64:	|  |         move.l 60(sp),d2
    7e68:	|  |         jsr -312(a6)
    7e6c:	|  |         move.l d0,56(sp)
		FPutC (fp, me -> g);
    7e70:	|  |         move.l 156(sp),52(sp)
    7e76:	|  |         movea.l 148(sp),a0
    7e7a:	|  |         move.b 115(a0),d0
    7e7e:	|  |         move.b d0,d0
    7e80:	|  |         andi.l #255,d0
    7e86:	|  |         move.l d0,48(sp)
    7e8a:	|  |         move.l 19c66 <DOSBase>,d0
    7e90:	|  |         movea.l d0,a6
    7e92:	|  |         move.l 52(sp),d1
    7e96:	|  |         move.l 48(sp),d2
    7e9a:	|  |         jsr -312(a6)
    7e9e:	|  |         move.l d0,44(sp)
		FPutC (fp, me -> b);
    7ea2:	|  |         move.l 156(sp),40(sp)
    7ea8:	|  |         movea.l 148(sp),a0
    7eac:	|  |         move.b 116(a0),d0
    7eb0:	|  |         move.b d0,d0
    7eb2:	|  |         andi.l #255,d0
    7eb8:	|  |         move.l d0,36(sp)
    7ebc:	|  |         move.l 19c66 <DOSBase>,d0
    7ec2:	|  |         movea.l d0,a6
    7ec4:	|  |         move.l 40(sp),d1
    7ec8:	|  |         move.l 36(sp),d2
    7ecc:	|  |         jsr -312(a6)
    7ed0:	|  |         move.l d0,32(sp)
		FPutC (fp, me -> colourmix);
    7ed4:	|  |         move.l 156(sp),28(sp)
    7eda:	|  |         movea.l 148(sp),a0
    7ede:	|  |         move.b 117(a0),d0
    7ee2:	|  |         move.b d0,d0
    7ee4:	|  |         andi.l #255,d0
    7eea:	|  |         move.l d0,24(sp)
    7eee:	|  |         move.l 19c66 <DOSBase>,d0
    7ef4:	|  |         movea.l d0,a6
    7ef6:	|  |         move.l 28(sp),d1
    7efa:	|  |         move.l 24(sp),d2
    7efe:	|  |         jsr -312(a6)
    7f02:	|  |         move.l d0,20(sp)
		FPutC (fp, me -> transparency);
    7f06:	|  |         move.l 156(sp),16(sp)
    7f0c:	|  |         movea.l 148(sp),a0
    7f10:	|  |         move.b 118(a0),d0
    7f14:	|  |         move.b d0,d0
    7f16:	|  |         andi.l #255,d0
    7f1c:	|  |         move.l d0,12(sp)
    7f20:	|  |         move.l 19c66 <DOSBase>,d0
    7f26:	|  |         movea.l d0,a6
    7f28:	|  |         move.l 16(sp),d1
    7f2c:	|  |         move.l 12(sp),d2
    7f30:	|  |         jsr -312(a6)
    7f34:	|  |         move.l d0,8(sp)
		
		saveObjectRef (me -> thisType, fp);
    7f38:	|  |         movea.l 148(sp),a0
    7f3c:	|  |         move.l 102(a0),d0
    7f40:	|  |         move.l 156(sp),-(sp)
    7f44:	|  |         move.l d0,-(sp)
    7f46:	|  |         jsr a15a <saveObjectRef>
    7f4c:	|  |         addq.l #8,sp

		me = me -> next;
    7f4e:	|  |         movea.l 148(sp),a0
    7f52:	|  |         move.l 24(a0),148(sp)
	for (a = 0; a < countPeople; a ++) {
    7f58:	|  |         addq.l #1,140(sp)
    7f5c:	|  \-------> movea.l 140(sp),a0
    7f60:	|            cmpa.l 144(sp),a0
    7f64:	\----------- blt.w 7b08 <savePeople+0x76>
	}
	return TRUE;
    7f68:	             moveq #1,d0
}
    7f6a:	             move.l (sp)+,d2
    7f6c:	             movea.l (sp)+,a6
    7f6e:	             lea 144(sp),sp
    7f72:	             rts

00007f74 <setBankFile>:

void setBankFile (struct personaAnimation * newP, struct loadedSpriteBank * sB) { 
	newP -> theSprites = sB; 
    7f74:	movea.l 4(sp),a0
    7f78:	move.l 8(sp),(a0)
}
    7f7c:	nop
    7f7e:	rts

00007f80 <setDrawMode>:


void setDrawMode (int h, int ob) {
    7f80:	       subq.l #4,sp
	struct onScreenPerson * moveMe = findPerson (ob);
    7f82:	       move.l 12(sp),-(sp)
    7f86:	       jsr 7052 <findPerson>
    7f8c:	       addq.l #4,sp
    7f8e:	       move.l d0,(sp)
	if (! moveMe) return;
    7f90:	/----- beq.s 7fa4 <setDrawMode+0x24>
		
	setMyDrawMode (moveMe, h);
    7f92:	|      move.l 8(sp),-(sp)
    7f96:	|      move.l 4(sp),-(sp)
    7f9a:	|      jsr 7faa <setMyDrawMode>
    7fa0:	|      addq.l #8,sp
    7fa2:	|  /-- bra.s 7fa6 <setDrawMode+0x26>
	if (! moveMe) return;
    7fa4:	\--|-> nop
}
    7fa6:	   \-> addq.l #4,sp
    7fa8:	       rts

00007faa <setMyDrawMode>:
	drawModeInvisible,
	numDrawModes
};

void setMyDrawMode (struct onScreenPerson *moveMe, int h) {
	switch (h) {
    7faa:	       moveq #19,d0
    7fac:	       cmp.l 8(sp),d0
    7fb0:	/----- bcs.w 8488 <setMyDrawMode+0x4de>
    7fb4:	|      move.l 8(sp),d0
    7fb8:	|      add.l d0,d0
    7fba:	|      movea.l d0,a0
    7fbc:	|      adda.l #32712,a0
    7fc2:	|      move.w (a0),d0
    7fc4:	|      jmp (7fc8 <setMyDrawMode+0x1e>,pc,d0.w)
    7fc8:	|      .short 0x04c0
    7fca:	|      ori.l #6684712,-(a4)
    7fd0:	|      btst d0,-(a0)
    7fd2:	|      bchg d0,(a6)+
    7fd4:	|      bclr d0,(a4)+
    7fd6:	|      bset d0,(a2)+
    7fd8:	|      andi.b #84,(a6)
    7fdc:	|      andi.l #55575312,(a2)
    7fe2:	|      .short 0x02d0
    7fe4:	|      bclr d1,(a0)
    7fe6:	|      .short 0x044a
    7fe8:	|      .short 0x040c
    7fea:	|      movep.l d1,1158(a6)
    7fee:	|      .short 0x00e2
		case drawModeTransparent3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    7ff0:	|      movea.l 4(sp),a0
    7ff4:	|      clr.b 116(a0)
    7ff8:	|      movea.l 4(sp),a0
    7ffc:	|      move.b 116(a0),d0
    8000:	|      movea.l 4(sp),a0
    8004:	|      move.b d0,115(a0)
    8008:	|      movea.l 4(sp),a0
    800c:	|      move.b 115(a0),d0
    8010:	|      movea.l 4(sp),a0
    8014:	|      move.b d0,114(a0)
			moveMe->colourmix = 0;
    8018:	|      movea.l 4(sp),a0
    801c:	|      clr.b 117(a0)
			moveMe->transparency = 64;
    8020:	|      movea.l 4(sp),a0
    8024:	|      move.b #64,118(a0)
			break;
    802a:	|  /-- bra.w 84c2 <setMyDrawMode+0x518>
		case drawModeTransparent2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    802e:	|  |   movea.l 4(sp),a0
    8032:	|  |   clr.b 116(a0)
    8036:	|  |   movea.l 4(sp),a0
    803a:	|  |   move.b 116(a0),d0
    803e:	|  |   movea.l 4(sp),a0
    8042:	|  |   move.b d0,115(a0)
    8046:	|  |   movea.l 4(sp),a0
    804a:	|  |   move.b 115(a0),d0
    804e:	|  |   movea.l 4(sp),a0
    8052:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 0;
    8056:	|  |   movea.l 4(sp),a0
    805a:	|  |   clr.b 117(a0)
			moveMe->transparency = 128;
    805e:	|  |   movea.l 4(sp),a0
    8062:	|  |   move.b #-128,118(a0)
			break;
    8068:	|  +-- bra.w 84c2 <setMyDrawMode+0x518>
		case drawModeTransparent1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    806c:	|  |   movea.l 4(sp),a0
    8070:	|  |   clr.b 116(a0)
    8074:	|  |   movea.l 4(sp),a0
    8078:	|  |   move.b 116(a0),d0
    807c:	|  |   movea.l 4(sp),a0
    8080:	|  |   move.b d0,115(a0)
    8084:	|  |   movea.l 4(sp),a0
    8088:	|  |   move.b 115(a0),d0
    808c:	|  |   movea.l 4(sp),a0
    8090:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 0;
    8094:	|  |   movea.l 4(sp),a0
    8098:	|  |   clr.b 117(a0)
			moveMe->transparency = 192;
    809c:	|  |   movea.l 4(sp),a0
    80a0:	|  |   move.b #-64,118(a0)
			break;
    80a6:	|  +-- bra.w 84c2 <setMyDrawMode+0x518>
		case drawModeInvisible:
			moveMe->r = moveMe->g = moveMe->b = 0;
    80aa:	|  |   movea.l 4(sp),a0
    80ae:	|  |   clr.b 116(a0)
    80b2:	|  |   movea.l 4(sp),a0
    80b6:	|  |   move.b 116(a0),d0
    80ba:	|  |   movea.l 4(sp),a0
    80be:	|  |   move.b d0,115(a0)
    80c2:	|  |   movea.l 4(sp),a0
    80c6:	|  |   move.b 115(a0),d0
    80ca:	|  |   movea.l 4(sp),a0
    80ce:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 0;
    80d2:	|  |   movea.l 4(sp),a0
    80d6:	|  |   clr.b 117(a0)
			moveMe->transparency = 254;
    80da:	|  |   movea.l 4(sp),a0
    80de:	|  |   move.b #-2,118(a0)
			break;
    80e4:	|  +-- bra.w 84c2 <setMyDrawMode+0x518>
		case drawModeDark1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    80e8:	|  |   movea.l 4(sp),a0
    80ec:	|  |   clr.b 116(a0)
    80f0:	|  |   movea.l 4(sp),a0
    80f4:	|  |   move.b 116(a0),d0
    80f8:	|  |   movea.l 4(sp),a0
    80fc:	|  |   move.b d0,115(a0)
    8100:	|  |   movea.l 4(sp),a0
    8104:	|  |   move.b 115(a0),d0
    8108:	|  |   movea.l 4(sp),a0
    810c:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 192;
    8110:	|  |   movea.l 4(sp),a0
    8114:	|  |   move.b #-64,117(a0)
			moveMe->transparency = 0;
    811a:	|  |   movea.l 4(sp),a0
    811e:	|  |   clr.b 118(a0)
			break;
    8122:	|  +-- bra.w 84c2 <setMyDrawMode+0x518>
		case drawModeDark2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    8126:	|  |   movea.l 4(sp),a0
    812a:	|  |   clr.b 116(a0)
    812e:	|  |   movea.l 4(sp),a0
    8132:	|  |   move.b 116(a0),d0
    8136:	|  |   movea.l 4(sp),a0
    813a:	|  |   move.b d0,115(a0)
    813e:	|  |   movea.l 4(sp),a0
    8142:	|  |   move.b 115(a0),d0
    8146:	|  |   movea.l 4(sp),a0
    814a:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 128;
    814e:	|  |   movea.l 4(sp),a0
    8152:	|  |   move.b #-128,117(a0)
			moveMe->transparency = 0;
    8158:	|  |   movea.l 4(sp),a0
    815c:	|  |   clr.b 118(a0)
			break;
    8160:	|  +-- bra.w 84c2 <setMyDrawMode+0x518>
		case drawModeDark3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    8164:	|  |   movea.l 4(sp),a0
    8168:	|  |   clr.b 116(a0)
    816c:	|  |   movea.l 4(sp),a0
    8170:	|  |   move.b 116(a0),d0
    8174:	|  |   movea.l 4(sp),a0
    8178:	|  |   move.b d0,115(a0)
    817c:	|  |   movea.l 4(sp),a0
    8180:	|  |   move.b 115(a0),d0
    8184:	|  |   movea.l 4(sp),a0
    8188:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 64;
    818c:	|  |   movea.l 4(sp),a0
    8190:	|  |   move.b #64,117(a0)
			moveMe->transparency = 0;
    8196:	|  |   movea.l 4(sp),a0
    819a:	|  |   clr.b 118(a0)
			break;
    819e:	|  +-- bra.w 84c2 <setMyDrawMode+0x518>
		case drawModeBlack:
			moveMe->r = moveMe->g = moveMe->b = 0;
    81a2:	|  |   movea.l 4(sp),a0
    81a6:	|  |   clr.b 116(a0)
    81aa:	|  |   movea.l 4(sp),a0
    81ae:	|  |   move.b 116(a0),d0
    81b2:	|  |   movea.l 4(sp),a0
    81b6:	|  |   move.b d0,115(a0)
    81ba:	|  |   movea.l 4(sp),a0
    81be:	|  |   move.b 115(a0),d0
    81c2:	|  |   movea.l 4(sp),a0
    81c6:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 255;
    81ca:	|  |   movea.l 4(sp),a0
    81ce:	|  |   st 117(a0)
			moveMe->transparency = 0;
    81d2:	|  |   movea.l 4(sp),a0
    81d6:	|  |   clr.b 118(a0)
			break;
    81da:	|  +-- bra.w 84c2 <setMyDrawMode+0x518>
		case drawModeShadow1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    81de:	|  |   movea.l 4(sp),a0
    81e2:	|  |   clr.b 116(a0)
    81e6:	|  |   movea.l 4(sp),a0
    81ea:	|  |   move.b 116(a0),d0
    81ee:	|  |   movea.l 4(sp),a0
    81f2:	|  |   move.b d0,115(a0)
    81f6:	|  |   movea.l 4(sp),a0
    81fa:	|  |   move.b 115(a0),d0
    81fe:	|  |   movea.l 4(sp),a0
    8202:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 255;
    8206:	|  |   movea.l 4(sp),a0
    820a:	|  |   st 117(a0)
			moveMe->transparency = 64;
    820e:	|  |   movea.l 4(sp),a0
    8212:	|  |   move.b #64,118(a0)
			break;
    8218:	|  +-- bra.w 84c2 <setMyDrawMode+0x518>
		case drawModeShadow2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    821c:	|  |   movea.l 4(sp),a0
    8220:	|  |   clr.b 116(a0)
    8224:	|  |   movea.l 4(sp),a0
    8228:	|  |   move.b 116(a0),d0
    822c:	|  |   movea.l 4(sp),a0
    8230:	|  |   move.b d0,115(a0)
    8234:	|  |   movea.l 4(sp),a0
    8238:	|  |   move.b 115(a0),d0
    823c:	|  |   movea.l 4(sp),a0
    8240:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 255;
    8244:	|  |   movea.l 4(sp),a0
    8248:	|  |   st 117(a0)
			moveMe->transparency = 128;
    824c:	|  |   movea.l 4(sp),a0
    8250:	|  |   move.b #-128,118(a0)
			break;
    8256:	|  +-- bra.w 84c2 <setMyDrawMode+0x518>
		case drawModeShadow3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    825a:	|  |   movea.l 4(sp),a0
    825e:	|  |   clr.b 116(a0)
    8262:	|  |   movea.l 4(sp),a0
    8266:	|  |   move.b 116(a0),d0
    826a:	|  |   movea.l 4(sp),a0
    826e:	|  |   move.b d0,115(a0)
    8272:	|  |   movea.l 4(sp),a0
    8276:	|  |   move.b 115(a0),d0
    827a:	|  |   movea.l 4(sp),a0
    827e:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 255;
    8282:	|  |   movea.l 4(sp),a0
    8286:	|  |   st 117(a0)
			moveMe->transparency = 192;
    828a:	|  |   movea.l 4(sp),a0
    828e:	|  |   move.b #-64,118(a0)
			break;
    8294:	|  +-- bra.w 84c2 <setMyDrawMode+0x518>
		case drawModeFoggy3:
			moveMe->r = moveMe->g = moveMe->b = 128;
    8298:	|  |   movea.l 4(sp),a0
    829c:	|  |   move.b #-128,116(a0)
    82a2:	|  |   movea.l 4(sp),a0
    82a6:	|  |   move.b 116(a0),d0
    82aa:	|  |   movea.l 4(sp),a0
    82ae:	|  |   move.b d0,115(a0)
    82b2:	|  |   movea.l 4(sp),a0
    82b6:	|  |   move.b 115(a0),d0
    82ba:	|  |   movea.l 4(sp),a0
    82be:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 192;
    82c2:	|  |   movea.l 4(sp),a0
    82c6:	|  |   move.b #-64,117(a0)
			moveMe->transparency = 0;
    82cc:	|  |   movea.l 4(sp),a0
    82d0:	|  |   clr.b 118(a0)
			break;
    82d4:	|  +-- bra.w 84c2 <setMyDrawMode+0x518>
		case drawModeFoggy2:
			moveMe->r = moveMe->g = moveMe->b = 128;
    82d8:	|  |   movea.l 4(sp),a0
    82dc:	|  |   move.b #-128,116(a0)
    82e2:	|  |   movea.l 4(sp),a0
    82e6:	|  |   move.b 116(a0),d0
    82ea:	|  |   movea.l 4(sp),a0
    82ee:	|  |   move.b d0,115(a0)
    82f2:	|  |   movea.l 4(sp),a0
    82f6:	|  |   move.b 115(a0),d0
    82fa:	|  |   movea.l 4(sp),a0
    82fe:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 128;
    8302:	|  |   movea.l 4(sp),a0
    8306:	|  |   move.b #-128,117(a0)
			moveMe->transparency = 0;
    830c:	|  |   movea.l 4(sp),a0
    8310:	|  |   clr.b 118(a0)
			break;
    8314:	|  +-- bra.w 84c2 <setMyDrawMode+0x518>
		case drawModeFoggy1:
			moveMe->r = moveMe->g = moveMe->b = 128;
    8318:	|  |   movea.l 4(sp),a0
    831c:	|  |   move.b #-128,116(a0)
    8322:	|  |   movea.l 4(sp),a0
    8326:	|  |   move.b 116(a0),d0
    832a:	|  |   movea.l 4(sp),a0
    832e:	|  |   move.b d0,115(a0)
    8332:	|  |   movea.l 4(sp),a0
    8336:	|  |   move.b 115(a0),d0
    833a:	|  |   movea.l 4(sp),a0
    833e:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 64;
    8342:	|  |   movea.l 4(sp),a0
    8346:	|  |   move.b #64,117(a0)
			moveMe->transparency = 0;
    834c:	|  |   movea.l 4(sp),a0
    8350:	|  |   clr.b 118(a0)
			break;
    8354:	|  +-- bra.w 84c2 <setMyDrawMode+0x518>
		case drawModeFoggy4:
			moveMe->r = moveMe->g = moveMe->b = 128;
    8358:	|  |   movea.l 4(sp),a0
    835c:	|  |   move.b #-128,116(a0)
    8362:	|  |   movea.l 4(sp),a0
    8366:	|  |   move.b 116(a0),d0
    836a:	|  |   movea.l 4(sp),a0
    836e:	|  |   move.b d0,115(a0)
    8372:	|  |   movea.l 4(sp),a0
    8376:	|  |   move.b 115(a0),d0
    837a:	|  |   movea.l 4(sp),a0
    837e:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 255;
    8382:	|  |   movea.l 4(sp),a0
    8386:	|  |   st 117(a0)
			moveMe->transparency = 0;
    838a:	|  |   movea.l 4(sp),a0
    838e:	|  |   clr.b 118(a0)
			break;
    8392:	|  +-- bra.w 84c2 <setMyDrawMode+0x518>
		case drawModeGlow3:
			moveMe->r = moveMe->g = moveMe->b = 255;
    8396:	|  |   movea.l 4(sp),a0
    839a:	|  |   st 116(a0)
    839e:	|  |   movea.l 4(sp),a0
    83a2:	|  |   move.b 116(a0),d0
    83a6:	|  |   movea.l 4(sp),a0
    83aa:	|  |   move.b d0,115(a0)
    83ae:	|  |   movea.l 4(sp),a0
    83b2:	|  |   move.b 115(a0),d0
    83b6:	|  |   movea.l 4(sp),a0
    83ba:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 192;
    83be:	|  |   movea.l 4(sp),a0
    83c2:	|  |   move.b #-64,117(a0)
			moveMe->transparency = 0;
    83c8:	|  |   movea.l 4(sp),a0
    83cc:	|  |   clr.b 118(a0)
			break;
    83d0:	|  +-- bra.w 84c2 <setMyDrawMode+0x518>
		case drawModeGlow2:
			moveMe->r = moveMe->g = moveMe->b = 255;
    83d4:	|  |   movea.l 4(sp),a0
    83d8:	|  |   st 116(a0)
    83dc:	|  |   movea.l 4(sp),a0
    83e0:	|  |   move.b 116(a0),d0
    83e4:	|  |   movea.l 4(sp),a0
    83e8:	|  |   move.b d0,115(a0)
    83ec:	|  |   movea.l 4(sp),a0
    83f0:	|  |   move.b 115(a0),d0
    83f4:	|  |   movea.l 4(sp),a0
    83f8:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 128;
    83fc:	|  |   movea.l 4(sp),a0
    8400:	|  |   move.b #-128,117(a0)
			moveMe->transparency = 0;
    8406:	|  |   movea.l 4(sp),a0
    840a:	|  |   clr.b 118(a0)
			break;
    840e:	|  +-- bra.w 84c2 <setMyDrawMode+0x518>
		case drawModeGlow1:
			moveMe->r = moveMe->g = moveMe->b = 255;
    8412:	|  |   movea.l 4(sp),a0
    8416:	|  |   st 116(a0)
    841a:	|  |   movea.l 4(sp),a0
    841e:	|  |   move.b 116(a0),d0
    8422:	|  |   movea.l 4(sp),a0
    8426:	|  |   move.b d0,115(a0)
    842a:	|  |   movea.l 4(sp),a0
    842e:	|  |   move.b 115(a0),d0
    8432:	|  |   movea.l 4(sp),a0
    8436:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 64;
    843a:	|  |   movea.l 4(sp),a0
    843e:	|  |   move.b #64,117(a0)
			moveMe->transparency = 0;
    8444:	|  |   movea.l 4(sp),a0
    8448:	|  |   clr.b 118(a0)
			break;
    844c:	|  +-- bra.s 84c2 <setMyDrawMode+0x518>
		case drawModeGlow4:
			moveMe->r = moveMe->g = moveMe->b = 255;
    844e:	|  |   movea.l 4(sp),a0
    8452:	|  |   st 116(a0)
    8456:	|  |   movea.l 4(sp),a0
    845a:	|  |   move.b 116(a0),d0
    845e:	|  |   movea.l 4(sp),a0
    8462:	|  |   move.b d0,115(a0)
    8466:	|  |   movea.l 4(sp),a0
    846a:	|  |   move.b 115(a0),d0
    846e:	|  |   movea.l 4(sp),a0
    8472:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 255;
    8476:	|  |   movea.l 4(sp),a0
    847a:	|  |   st 117(a0)
			moveMe->transparency = 0;
    847e:	|  |   movea.l 4(sp),a0
    8482:	|  |   clr.b 118(a0)
			break;
    8486:	|  +-- bra.s 84c2 <setMyDrawMode+0x518>
		default:
			moveMe->r = moveMe->g = moveMe->b = 0;
    8488:	\--|-> movea.l 4(sp),a0
    848c:	   |   clr.b 116(a0)
    8490:	   |   movea.l 4(sp),a0
    8494:	   |   move.b 116(a0),d0
    8498:	   |   movea.l 4(sp),a0
    849c:	   |   move.b d0,115(a0)
    84a0:	   |   movea.l 4(sp),a0
    84a4:	   |   move.b 115(a0),d0
    84a8:	   |   movea.l 4(sp),a0
    84ac:	   |   move.b d0,114(a0)
			moveMe->colourmix = 0;
    84b0:	   |   movea.l 4(sp),a0
    84b4:	   |   clr.b 117(a0)
			moveMe->transparency = 0;
    84b8:	   |   movea.l 4(sp),a0
    84bc:	   |   clr.b 118(a0)
			break;
    84c0:	   |   nop
	}
}
    84c2:	   \-> nop
    84c4:	       rts

000084c6 <setCharacterWalkSpeed>:



BOOL setCharacterWalkSpeed (int f, int objNum) {
    84c6:	       subq.l #4,sp
	if (f <= 0) return FALSE;
    84c8:	       tst.l 8(sp)
    84cc:	   /-- bgt.s 84d2 <setCharacterWalkSpeed+0xc>
    84ce:	   |   clr.w d0
    84d0:	/--|-- bra.s 84f0 <setCharacterWalkSpeed+0x2a>
	struct onScreenPerson * moveMe = findPerson (objNum);
    84d2:	|  \-> move.l 12(sp),-(sp)
    84d6:	|      jsr 7052 <findPerson>
    84dc:	|      addq.l #4,sp
    84de:	|      move.l d0,(sp)
	if (! moveMe) return FALSE;
    84e0:	|  /-- bne.s 84e6 <setCharacterWalkSpeed+0x20>
    84e2:	|  |   clr.w d0
    84e4:	+--|-- bra.s 84f0 <setCharacterWalkSpeed+0x2a>
	moveMe -> walkSpeed = f;
    84e6:	|  \-> movea.l (sp),a0
    84e8:	|      move.l 8(sp),16(a0)
	return TRUE;
    84ee:	|      moveq #1,d0
}
    84f0:	\----> addq.l #4,sp
    84f2:	       rts

000084f4 <setPersonExtra>:

BOOL setPersonExtra (int thisNum, int extra) {
    84f4:	       subq.l #4,sp
    struct onScreenPerson * thisPerson = findPerson(thisNum);
    84f6:	       move.l 8(sp),-(sp)
    84fa:	       jsr 7052 <findPerson>
    8500:	       addq.l #4,sp
    8502:	       move.l d0,(sp)
    if (thisPerson) {
    8504:	/----- beq.s 8524 <setPersonExtra+0x30>
        thisPerson -> extra = extra;
    8506:	|      movea.l (sp),a0
    8508:	|      move.l 12(sp),106(a0)
        if (extra & EXTRA_NOSCALE) thisPerson -> scale = 1;
    850e:	|      moveq #2,d0
    8510:	|      and.l 12(sp),d0
    8514:	|  /-- beq.s 8520 <setPersonExtra+0x2c>
    8516:	|  |   movea.l (sp),a0
    8518:	|  |   move.l #1065353216,20(a0)
        return TRUE;
    8520:	|  \-> moveq #1,d0
    8522:	|  /-- bra.s 8526 <setPersonExtra+0x32>
    }
    return FALSE;
    8524:	\--|-> clr.w d0
}
    8526:	   \-> addq.l #4,sp
    8528:	       rts

0000852a <setScale>:


void setScale (short int h, short int d) {
    852a:	subq.l #4,sp
    852c:	move.l 8(sp),d1
    8530:	move.l 12(sp),d0
    8534:	move.w d1,d1
    8536:	move.w d1,2(sp)
    853a:	move.w d0,d0
    853c:	move.w d0,(sp)
	scaleHorizon = h;
    853e:	move.w 2(sp),1813e <scaleHorizon>
	scaleDivide = d;
    8546:	move.w (sp),18140 <scaleDivide>
}
    854c:	nop
    854e:	addq.l #4,sp
    8550:	rts

00008552 <setShown>:

void setShown (BOOL h, int ob) {
    8552:	    subq.l #8,sp
    8554:	    move.l 12(sp),d0
    8558:	    move.w d0,d0
    855a:	    move.w d0,2(sp)
	struct onScreenPerson * moveMe = findPerson (ob);
    855e:	    move.l 16(sp),-(sp)
    8562:	    jsr 7052 <findPerson>
    8568:	    addq.l #4,sp
    856a:	    move.l d0,4(sp)
	if (moveMe) moveMe -> show = h;
    856e:	/-- beq.s 857a <setShown+0x28>
    8570:	|   movea.l 4(sp),a0
    8574:	|   move.w 2(sp),92(a0)
}
    857a:	\-> nop
    857c:	    addq.l #8,sp
    857e:	    rts

00008580 <spinStep>:

void spinStep (struct onScreenPerson * thisPerson) {
    8580:	       subq.l #8,sp
    8582:	       move.l d2,-(sp)
	int diff = (thisPerson->angle + 360) - thisPerson->wantAngle;
    8584:	       movea.l 16(sp),a0
    8588:	       move.l 80(a0),d0
    858c:	       move.l d0,d1
    858e:	       addi.l #360,d1
    8594:	       movea.l 16(sp),a0
    8598:	       move.l 84(a0),d0
    859c:	       move.l d1,d2
    859e:	       sub.l d0,d2
    85a0:	       move.l d2,8(sp)
	int eachSlice = thisPerson->spinSpeed ? thisPerson->spinSpeed : (360 / thisPerson->myPersona->numDirections);
    85a4:	       movea.l 16(sp),a0
    85a8:	       move.l 110(a0),d0
    85ac:	   /-- beq.s 85b8 <spinStep+0x38>
    85ae:	   |   movea.l 16(sp),a0
    85b2:	   |   move.l 110(a0),d0
    85b6:	/--|-- bra.s 85d2 <spinStep+0x52>
    85b8:	|  \-> movea.l 16(sp),a0
    85bc:	|      movea.l 68(a0),a0
    85c0:	|      move.l 4(a0),d0
    85c4:	|      move.l d0,-(sp)
    85c6:	|      pea 168 <decodeFilename+0x50>
    85ca:	|      jsr 13a88 <__divsi3>
    85d0:	|      addq.l #8,sp
    85d2:	\----> move.l d0,4(sp)
	while (diff > 180) {
    85d6:	   /-- bra.s 85e0 <spinStep+0x60>
		diff -= 360;
    85d8:	/--|-> addi.l #-360,8(sp)
	while (diff > 180) {
    85e0:	|  \-> cmpi.l #180,8(sp)
    85e8:	\----- bgt.s 85d8 <spinStep+0x58>
	}

	if (diff >= eachSlice) {
    85ea:	       move.l 8(sp),d0
    85ee:	       cmp.l 4(sp),d0
    85f2:	   /-- blt.s 8610 <spinStep+0x90>
		turnMeAngle(thisPerson, thisPerson->angle - eachSlice);
    85f4:	   |   movea.l 16(sp),a0
    85f8:	   |   move.l 80(a0),d0
    85fc:	   |   sub.l 4(sp),d0
    8600:	   |   move.l d0,-(sp)
    8602:	   |   move.l 20(sp),-(sp)
    8606:	   |   jsr 86f0 <turnMeAngle>
    860c:	   |   addq.l #8,sp
		turnMeAngle(thisPerson, thisPerson->angle + eachSlice);
	} else {
		turnMeAngle(thisPerson, thisPerson->wantAngle);
		thisPerson->spinning = FALSE;
	}
}
    860e:	/--|-- bra.s 8656 <spinStep+0xd6>
	} else if (diff <= -eachSlice) {
    8610:	|  \-> move.l 4(sp),d0
    8614:	|      neg.l d0
    8616:	|      cmp.l 8(sp),d0
    861a:	|  /-- blt.s 8638 <spinStep+0xb8>
		turnMeAngle(thisPerson, thisPerson->angle + eachSlice);
    861c:	|  |   movea.l 16(sp),a0
    8620:	|  |   move.l 80(a0),d0
    8624:	|  |   add.l 4(sp),d0
    8628:	|  |   move.l d0,-(sp)
    862a:	|  |   move.l 20(sp),-(sp)
    862e:	|  |   jsr 86f0 <turnMeAngle>
    8634:	|  |   addq.l #8,sp
}
    8636:	+--|-- bra.s 8656 <spinStep+0xd6>
		turnMeAngle(thisPerson, thisPerson->wantAngle);
    8638:	|  \-> movea.l 16(sp),a0
    863c:	|      move.l 84(a0),d0
    8640:	|      move.l d0,-(sp)
    8642:	|      move.l 20(sp),-(sp)
    8646:	|      jsr 86f0 <turnMeAngle>
    864c:	|      addq.l #8,sp
		thisPerson->spinning = FALSE;
    864e:	|      movea.l 16(sp),a0
    8652:	|      clr.w 54(a0)
}
    8656:	\----> nop
    8658:	       move.l (sp)+,d2
    865a:	       addq.l #8,sp
    865c:	       rts

0000865e <stopPerson>:


BOOL stopPerson (int o) {
    865e:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(o);
    8660:	       move.l 8(sp),-(sp)
    8664:	       jsr 7052 <findPerson>
    866a:	       addq.l #4,sp
    866c:	       move.l d0,(sp)
    if (moveMe)
    866e:	/----- beq.s 86ac <stopPerson+0x4e>
        if (moveMe -> continueAfterWalking) {
    8670:	|      movea.l (sp),a0
    8672:	|      move.l 56(a0),d0
    8676:	+----- beq.s 86ac <stopPerson+0x4e>
            abortFunction(moveMe -> continueAfterWalking);
    8678:	|      movea.l (sp),a0
    867a:	|      move.l 56(a0),d0
    867e:	|      move.l d0,-(sp)
    8680:	|      jsr 2546 <abortFunction>
    8686:	|      addq.l #4,sp
            moveMe -> continueAfterWalking = NULL;
    8688:	|      movea.l (sp),a0
    868a:	|      clr.l 56(a0)
            moveMe -> walking = FALSE;
    868e:	|      movea.l (sp),a0
    8690:	|      clr.w 52(a0)
            moveMe -> spinning = FALSE;
    8694:	|      movea.l (sp),a0
    8696:	|      clr.w 54(a0)
            setFrames(moveMe, ANI_STAND);
    869a:	|      clr.l -(sp)
    869c:	|      move.l 4(sp),-(sp)
    86a0:	|      jsr 5ca0 <setFrames>
    86a6:	|      addq.l #8,sp
            return TRUE;
    86a8:	|      moveq #1,d0
    86aa:	|  /-- bra.s 86ae <stopPerson+0x50>
        }
    return FALSE;
    86ac:	\--|-> clr.w d0
}
    86ae:	   \-> addq.l #4,sp
    86b0:	       rts

000086b2 <timeForAnim>:


int timeForAnim (struct personaAnimation * fram) {
    86b2:	       subq.l #8,sp
	int total = 0;
    86b4:	       clr.l 4(sp)
	for (int a = 0; a < fram -> numFrames; a ++) {
    86b8:	       clr.l (sp)
    86ba:	   /-- bra.s 86dc <timeForAnim+0x2a>
		total += fram -> frames[a].howMany;
    86bc:	/--|-> movea.l 12(sp),a0
    86c0:	|  |   movea.l 4(a0),a0
    86c4:	|  |   move.l (sp),d1
    86c6:	|  |   move.l d1,d0
    86c8:	|  |   add.l d0,d0
    86ca:	|  |   add.l d1,d0
    86cc:	|  |   add.l d0,d0
    86ce:	|  |   add.l d0,d0
    86d0:	|  |   adda.l d0,a0
    86d2:	|  |   move.l 4(a0),d0
    86d6:	|  |   add.l d0,4(sp)
	for (int a = 0; a < fram -> numFrames; a ++) {
    86da:	|  |   addq.l #1,(sp)
    86dc:	|  \-> movea.l 12(sp),a0
    86e0:	|      move.l 8(a0),d0
    86e4:	|      cmp.l (sp),d0
    86e6:	\----- bgt.s 86bc <timeForAnim+0xa>
	}
	return total;
    86e8:	       move.l 4(sp),d0
}
    86ec:	       addq.l #8,sp
    86ee:	       rts

000086f0 <turnMeAngle>:

void turnMeAngle (struct onScreenPerson * thisPerson, int direc) {
    86f0:	       subq.l #4,sp
	int d = thisPerson -> myPersona -> numDirections;
    86f2:	       movea.l 8(sp),a0
    86f6:	       movea.l 68(a0),a0
    86fa:	       move.l 4(a0),(sp)
	thisPerson -> angle = direc;
    86fe:	       movea.l 8(sp),a0
    8702:	       move.l 12(sp),80(a0)
	direc += (180 / d) + 180 + thisPerson -> angleOffset;
    8708:	       move.l (sp),-(sp)
    870a:	       pea b4 <_start+0xb4>
    870e:	       jsr 13a88 <__divsi3>
    8714:	       addq.l #8,sp
    8716:	       move.l d0,d1
    8718:	       addi.l #180,d1
    871e:	       movea.l 8(sp),a0
    8722:	       move.l 88(a0),d0
    8726:	       add.l d1,d0
    8728:	       add.l d0,12(sp)
	while (direc >= 360) direc -= 360;
    872c:	   /-- bra.s 8736 <turnMeAngle+0x46>
    872e:	/--|-> addi.l #-360,12(sp)
    8736:	|  \-> cmpi.l #359,12(sp)
    873e:	\----- bgt.s 872e <turnMeAngle+0x3e>
	thisPerson -> direction = (direc * d) / 360;
    8740:	       move.l (sp),-(sp)
    8742:	       move.l 16(sp),-(sp)
    8746:	       jsr 13a0a <__mulsi3>
    874c:	       addq.l #8,sp
    874e:	       pea 168 <decodeFilename+0x50>
    8752:	       move.l d0,-(sp)
    8754:	       jsr 13a88 <__divsi3>
    875a:	       addq.l #8,sp
    875c:	       movea.l 8(sp),a0
    8760:	       move.l d0,94(a0)
}
    8764:	       nop
    8766:	       addq.l #4,sp
    8768:	       rts

0000876a <turnPersonToFace>:

BOOL turnPersonToFace (int thisNum, int direc) {
    876a:	          subq.l #4,sp
    struct onScreenPerson * thisPerson = findPerson(thisNum);
    876c:	          move.l 8(sp),-(sp)
    8770:	          jsr 7052 <findPerson>
    8776:	          addq.l #4,sp
    8778:	          move.l d0,(sp)
    if (thisPerson) {
    877a:	/-------- beq.s 87da <turnPersonToFace+0x70>
        if (thisPerson -> continueAfterWalking) abortFunction(thisPerson -> continueAfterWalking);
    877c:	|         movea.l (sp),a0
    877e:	|         move.l 56(a0),d0
    8782:	|     /-- beq.s 8794 <turnPersonToFace+0x2a>
    8784:	|     |   movea.l (sp),a0
    8786:	|     |   move.l 56(a0),d0
    878a:	|     |   move.l d0,-(sp)
    878c:	|     |   jsr 2546 <abortFunction>
    8792:	|     |   addq.l #4,sp
        thisPerson -> continueAfterWalking = NULL;
    8794:	|     \-> movea.l (sp),a0
    8796:	|         clr.l 56(a0)
        thisPerson -> walking = FALSE;
    879a:	|         movea.l (sp),a0
    879c:	|         clr.w 52(a0)
        thisPerson -> spinning = FALSE;
    87a0:	|         movea.l (sp),a0
    87a2:	|         clr.w 54(a0)
        turnMeAngle(thisPerson, direc);
    87a6:	|         move.l 12(sp),-(sp)
    87aa:	|         move.l 4(sp),-(sp)
    87ae:	|         jsr 86f0 <turnMeAngle>
    87b4:	|         addq.l #8,sp
        setFrames(thisPerson, (thisPerson == speech->currentTalker) ? ANI_TALK : ANI_STAND);
    87b6:	|         movea.l 19cba <speech>,a0
    87bc:	|         move.l (a0),d0
    87be:	|         cmp.l (sp),d0
    87c0:	|  /----- bne.s 87c6 <turnPersonToFace+0x5c>
    87c2:	|  |      moveq #2,d0
    87c4:	|  |  /-- bra.s 87c8 <turnPersonToFace+0x5e>
    87c6:	|  \--|-> moveq #0,d0
    87c8:	|     \-> move.l d0,-(sp)
    87ca:	|         move.l 4(sp),-(sp)
    87ce:	|         jsr 5ca0 <setFrames>
    87d4:	|         addq.l #8,sp
        return TRUE;
    87d6:	|         moveq #1,d0
    87d8:	|     /-- bra.s 87dc <turnPersonToFace+0x72>
    }
    return FALSE;
    87da:	\-----|-> clr.w d0
}
    87dc:	      \-> addq.l #4,sp
    87de:	          rts

000087e0 <walkMe>:

BOOL walkMe (struct onScreenPerson * thisPerson, BOOL move) {
    87e0:	                lea -20(sp),sp
    87e4:	                move.l d3,-(sp)
    87e6:	                move.l d2,-(sp)
    87e8:	                move.l 36(sp),d0
    87ec:	                move.w d0,d0
    87ee:	                move.w d0,10(sp)
	float xDiff, yDiff, maxDiff, s;

	if (move == -1) move = TRUE;  // Initialize default value for move
    87f2:	                cmpi.w #-1,10(sp)
    87f8:	/-------------- bne.s 8800 <walkMe+0x20>
    87fa:	|               move.w #1,10(sp)

	for (;;) {
		xDiff = thisPerson->thisStepX - thisPerson->x;
    8800:	>-------------> movea.l 32(sp),a0
    8804:	|               move.l 36(a0),d0
    8808:	|               move.l d0,-(sp)
    880a:	|               jsr 134b0 <__floatsisf>
    8810:	|               addq.l #4,sp
    8812:	|               move.l d0,d1
    8814:	|               movea.l 32(sp),a0
    8818:	|               move.l (a0),d0
    881a:	|               move.l d0,-(sp)
    881c:	|               move.l d1,-(sp)
    881e:	|               jsr 137a4 <__subsf3>
    8824:	|               addq.l #8,sp
    8826:	|               move.l d0,20(sp)
		yDiff = (thisPerson->thisStepY - thisPerson->y) * 2;
    882a:	|               movea.l 32(sp),a0
    882e:	|               move.l 40(a0),d0
    8832:	|               move.l d0,-(sp)
    8834:	|               jsr 134b0 <__floatsisf>
    883a:	|               addq.l #4,sp
    883c:	|               move.l d0,d1
    883e:	|               movea.l 32(sp),a0
    8842:	|               move.l 4(a0),d0
    8846:	|               move.l d0,-(sp)
    8848:	|               move.l d1,-(sp)
    884a:	|               jsr 137a4 <__subsf3>
    8850:	|               addq.l #8,sp
    8852:	|               move.l d0,-(sp)
    8854:	|               move.l d0,-(sp)
    8856:	|               jsr 13262 <__addsf3>
    885c:	|               addq.l #8,sp
    885e:	|               move.l d0,16(sp)
		s = thisPerson->scale * thisPerson->walkSpeed;
    8862:	|               movea.l 32(sp),a0
    8866:	|               move.l 20(a0),d2
    886a:	|               movea.l 32(sp),a0
    886e:	|               move.l 16(a0),d0
    8872:	|               move.l d0,-(sp)
    8874:	|               jsr 134b0 <__floatsisf>
    887a:	|               addq.l #4,sp
    887c:	|               move.l d0,-(sp)
    887e:	|               move.l d2,-(sp)
    8880:	|               jsr 13562 <__mulsf3>
    8886:	|               addq.l #8,sp
    8888:	|               move.l d0,24(sp)
		if (s < 0.2) s = 0.2;
    888c:	|               move.l 24(sp),-(sp)
    8890:	|               jsr 133c8 <__extendsfdf2>
    8896:	|               addq.l #4,sp
    8898:	|               move.l #-1717986918,-(sp)
    889e:	|               move.l #1070176665,-(sp)
    88a4:	|               move.l d1,-(sp)
    88a6:	|               move.l d0,-(sp)
    88a8:	|               jsr 13688 <__ltdf2>
    88ae:	|               lea 16(sp),sp
    88b2:	|               tst.l d0
    88b4:	|           /-- bge.s 88be <walkMe+0xde>
    88b6:	|           |   move.l #1045220557,24(sp)

		maxDiff = (TF_abs(xDiff) >= TF_abs(yDiff)) ? TF_abs(xDiff) : TF_abs(yDiff);
    88be:	|           \-> move.l 20(sp),-(sp)
    88c2:	|               jsr 13448 <__fixsfsi>
    88c8:	|               addq.l #4,sp
    88ca:	|               move.l d0,-(sp)
    88cc:	|               jsr 626e <TF_abs>
    88d2:	|               addq.l #4,sp
    88d4:	|               move.l d0,d2
    88d6:	|               move.l 16(sp),-(sp)
    88da:	|               jsr 13448 <__fixsfsi>
    88e0:	|               addq.l #4,sp
    88e2:	|               move.l d0,-(sp)
    88e4:	|               jsr 626e <TF_abs>
    88ea:	|               addq.l #4,sp
    88ec:	|               cmp.l d2,d0
    88ee:	|        /----- bgt.s 8912 <walkMe+0x132>
    88f0:	|        |      move.l 20(sp),-(sp)
    88f4:	|        |      jsr 13448 <__fixsfsi>
    88fa:	|        |      addq.l #4,sp
    88fc:	|        |      move.l d0,-(sp)
    88fe:	|        |      jsr 626e <TF_abs>
    8904:	|        |      addq.l #4,sp
    8906:	|        |      move.l d0,-(sp)
    8908:	|        |      jsr 134b0 <__floatsisf>
    890e:	|        |      addq.l #4,sp
    8910:	|        |  /-- bra.s 8932 <walkMe+0x152>
    8912:	|        \--|-> move.l 16(sp),-(sp)
    8916:	|           |   jsr 13448 <__fixsfsi>
    891c:	|           |   addq.l #4,sp
    891e:	|           |   move.l d0,-(sp)
    8920:	|           |   jsr 626e <TF_abs>
    8926:	|           |   addq.l #4,sp
    8928:	|           |   move.l d0,-(sp)
    892a:	|           |   jsr 134b0 <__floatsisf>
    8930:	|           |   addq.l #4,sp
    8932:	|           \-> move.l d0,12(sp)

		if (TF_abs(maxDiff) > s) {
    8936:	|               move.l 12(sp),-(sp)
    893a:	|               jsr 13448 <__fixsfsi>
    8940:	|               addq.l #4,sp
    8942:	|               move.l d0,-(sp)
    8944:	|               jsr 626e <TF_abs>
    894a:	|               addq.l #4,sp
    894c:	|               move.l d0,-(sp)
    894e:	|               jsr 134b0 <__floatsisf>
    8954:	|               addq.l #4,sp
    8956:	|               move.l d0,-(sp)
    8958:	|               move.l 28(sp),-(sp)
    895c:	|               jsr 136d6 <__ltsf2>
    8962:	|               addq.l #8,sp
    8964:	|               tst.l d0
    8966:	|        /----- bge.w 8a18 <walkMe+0x238>
			if (thisPerson->spinning) {
    896a:	|        |      movea.l 32(sp),a0
    896e:	|        |      move.w 54(a0),d0
    8972:	|        |  /-- beq.s 8990 <walkMe+0x1b0>
				spinStep(thisPerson);
    8974:	|        |  |   move.l 32(sp),-(sp)
    8978:	|        |  |   jsr 8580 <spinStep>
    897e:	|        |  |   addq.l #4,sp
				setFrames(thisPerson, ANI_WALK);
    8980:	|        |  |   pea 1 <_start+0x1>
    8984:	|        |  |   move.l 36(sp),-(sp)
    8988:	|        |  |   jsr 5ca0 <setFrames>
    898e:	|        |  |   addq.l #8,sp
			}
			s = maxDiff / s;
    8990:	|        |  \-> move.l 24(sp),-(sp)
    8994:	|        |      move.l 16(sp),-(sp)
    8998:	|        |      jsr 1335c <__divsf3>
    899e:	|        |      addq.l #8,sp
    89a0:	|        |      move.l d0,24(sp)
			if (move)
    89a4:	|        |      tst.w 10(sp)
    89a8:	|        |  /-- beq.s 8a12 <walkMe+0x232>
				moveAndScale(thisPerson,
							 thisPerson->x + xDiff / s,
							 thisPerson->y + yDiff / (s * 2));
    89aa:	|        |  |   movea.l 32(sp),a0
    89ae:	|        |  |   move.l 4(a0),d2
    89b2:	|        |  |   move.l 24(sp),d0
    89b6:	|        |  |   move.l d0,-(sp)
    89b8:	|        |  |   move.l d0,-(sp)
    89ba:	|        |  |   jsr 13262 <__addsf3>
    89c0:	|        |  |   addq.l #8,sp
    89c2:	|        |  |   move.l d0,-(sp)
    89c4:	|        |  |   move.l 20(sp),-(sp)
    89c8:	|        |  |   jsr 1335c <__divsf3>
    89ce:	|        |  |   addq.l #8,sp
				moveAndScale(thisPerson,
    89d0:	|        |  |   move.l d0,-(sp)
    89d2:	|        |  |   move.l d2,-(sp)
    89d4:	|        |  |   jsr 13262 <__addsf3>
    89da:	|        |  |   addq.l #8,sp
    89dc:	|        |  |   move.l d0,d2
							 thisPerson->x + xDiff / s,
    89de:	|        |  |   movea.l 32(sp),a0
    89e2:	|        |  |   move.l (a0),d3
    89e4:	|        |  |   move.l 24(sp),-(sp)
    89e8:	|        |  |   move.l 24(sp),-(sp)
    89ec:	|        |  |   jsr 1335c <__divsf3>
    89f2:	|        |  |   addq.l #8,sp
				moveAndScale(thisPerson,
    89f4:	|        |  |   move.l d0,-(sp)
    89f6:	|        |  |   move.l d3,-(sp)
    89f8:	|        |  |   jsr 13262 <__addsf3>
    89fe:	|        |  |   addq.l #8,sp
    8a00:	|        |  |   move.l d2,-(sp)
    8a02:	|        |  |   move.l d0,-(sp)
    8a04:	|        |  |   move.l 40(sp),-(sp)
    8a08:	|        |  |   jsr 779a <moveAndScale>
    8a0e:	|        |  |   lea 12(sp),sp
			return TRUE;
    8a12:	|        |  \-> moveq #1,d0
    8a14:	|  /-----|----- bra.w 8ac6 <walkMe+0x2e6>
		}

		if (thisPerson->inPoly == -1) {
    8a18:	|  |     \----> movea.l 32(sp),a0
    8a1c:	|  |            move.l 44(a0),d0
    8a20:	|  |            moveq #-1,d1
    8a22:	|  |            cmp.l d0,d1
    8a24:	|  |        /-- bne.s 8a5c <walkMe+0x27c>
			if (thisPerson->directionWhenDoneWalking != -1) {
    8a26:	|  |        |   movea.l 32(sp),a0
    8a2a:	|  |        |   move.l 98(a0),d0
    8a2e:	|  |        |   moveq #-1,d1
    8a30:	|  |        |   cmp.l d0,d1
    8a32:	|  |  /-----|-- beq.s 8a70 <walkMe+0x290>
				thisPerson->wantAngle = thisPerson->directionWhenDoneWalking;
    8a34:	|  |  |     |   movea.l 32(sp),a0
    8a38:	|  |  |     |   move.l 98(a0),d0
    8a3c:	|  |  |     |   movea.l 32(sp),a0
    8a40:	|  |  |     |   move.l d0,84(a0)
				thisPerson->spinning = TRUE;
    8a44:	|  |  |     |   movea.l 32(sp),a0
    8a48:	|  |  |     |   move.w #1,54(a0)
				spinStep(thisPerson);
    8a4e:	|  |  |     |   move.l 32(sp),-(sp)
    8a52:	|  |  |     |   jsr 8580 <spinStep>
    8a58:	|  |  |     |   addq.l #4,sp
			}
			break;
    8a5a:	|  |  +-----|-- bra.s 8a70 <walkMe+0x290>
		}
		if (!doBorderStuff(thisPerson)) break;
    8a5c:	|  |  |     \-> move.l 32(sp),-(sp)
    8a60:	|  |  |         jsr 6998 <doBorderStuff>
    8a66:	|  |  |         addq.l #4,sp
    8a68:	|  |  |         tst.w d0
    8a6a:	|  |  |  /----- beq.s 8a74 <walkMe+0x294>
		xDiff = thisPerson->thisStepX - thisPerson->x;
    8a6c:	\--|--|--|----- bra.w 8800 <walkMe+0x20>
			break;
    8a70:	   |  \--|----> nop
    8a72:	   |     |  /-- bra.s 8a76 <walkMe+0x296>
		if (!doBorderStuff(thisPerson)) break;
    8a74:	   |     \--|-> nop
	}

	thisPerson->walking = FALSE;
    8a76:	   |        \-> movea.l 32(sp),a0
    8a7a:	   |            clr.w 52(a0)
	setFrames(thisPerson, ANI_STAND);
    8a7e:	   |            clr.l -(sp)
    8a80:	   |            move.l 36(sp),-(sp)
    8a84:	   |            jsr 5ca0 <setFrames>
    8a8a:	   |            addq.l #8,sp
	moveAndScale(thisPerson,
				 thisPerson->walkToX,
				 thisPerson->walkToY);
    8a8c:	   |            movea.l 32(sp),a0
    8a90:	   |            move.l 32(a0),d0
	moveAndScale(thisPerson,
    8a94:	   |            move.l d0,-(sp)
    8a96:	   |            jsr 134b0 <__floatsisf>
    8a9c:	   |            addq.l #4,sp
    8a9e:	   |            move.l d0,d2
				 thisPerson->walkToX,
    8aa0:	   |            movea.l 32(sp),a0
    8aa4:	   |            move.l 28(a0),d0
	moveAndScale(thisPerson,
    8aa8:	   |            move.l d0,-(sp)
    8aaa:	   |            jsr 134b0 <__floatsisf>
    8ab0:	   |            addq.l #4,sp
    8ab2:	   |            move.l d2,-(sp)
    8ab4:	   |            move.l d0,-(sp)
    8ab6:	   |            move.l 40(sp),-(sp)
    8aba:	   |            jsr 779a <moveAndScale>
    8ac0:	   |            lea 12(sp),sp
	return FALSE;
    8ac4:	   |            clr.w d0
}
    8ac6:	   \----------> move.l (sp)+,d2
    8ac8:	                move.l (sp)+,d3
    8aca:	                lea 20(sp),sp
    8ace:	                rts

00008ad0 <loadBankForAnim>:
#include "sprbanks.h"
#include "support/gcc8_c_support.h"

struct loadedSpriteBank * allLoadedBanks = NULL;

struct loadedSpriteBank * loadBankForAnim (int ID) {
    8ad0:	             lea -20(sp),sp
    8ad4:	             move.l a6,-(sp)
	// KPrintF("loadBankForAnim: Looking for sprite bank with ID %d\n", ID);
	struct loadedSpriteBank * returnMe = allLoadedBanks;
    8ad6:	             move.l 19ce6 <allLoadedBanks>,20(sp)
	while (returnMe) {
    8ade:	      /----- bra.s 8afe <loadBankForAnim+0x2e>
		if (returnMe->ID == ID) {
    8ae0:	   /--|----> movea.l 20(sp),a0
    8ae4:	   |  |      move.l (a0),d0
    8ae6:	   |  |      cmp.l 28(sp),d0
    8aea:	   |  |  /-- bne.s 8af4 <loadBankForAnim+0x24>
			// KPrintF("loadBankForAnim: Found existing sprite bank with ID %d\n", returnMe->ID);
			return returnMe;
    8aec:	   |  |  |   move.l 20(sp),d0
    8af0:	/--|--|--|-- bra.w 8bb0 <loadBankForAnim+0xe0>
		}
		returnMe = returnMe->next;
    8af4:	|  |  |  \-> movea.l 20(sp),a0
    8af8:	|  |  |      move.l 22(a0),20(sp)
	while (returnMe) {
    8afe:	|  |  \----> tst.l 20(sp)
    8b02:	|  \-------- bne.s 8ae0 <loadBankForAnim+0x10>
	}
	returnMe = AllocVec(sizeof(struct loadedSpriteBank), MEMF_ANY);
    8b04:	|            moveq #26,d0
    8b06:	|            move.l d0,16(sp)
    8b0a:	|            clr.l 12(sp)
    8b0e:	|            move.l 19c5e <SysBase>,d0
    8b14:	|            movea.l d0,a6
    8b16:	|            move.l 16(sp),d0
    8b1a:	|            move.l 12(sp),d1
    8b1e:	|            jsr -684(a6)
    8b22:	|            move.l d0,8(sp)
    8b26:	|            move.l 8(sp),d0
    8b2a:	|            move.l d0,20(sp)
	// KPrintF("loadBankForAnim: No existing sprite bank with ID %d\n", ID);
	if (returnMe) {
    8b2e:	|     /----- beq.s 8bae <loadBankForAnim+0xde>
		returnMe->ID = ID;
    8b30:	|     |      movea.l 20(sp),a0
    8b34:	|     |      move.l 28(sp),(a0)
		if (loadSpriteBank(ID, &returnMe->bank, FALSE)) {
    8b38:	|     |      move.l 20(sp),d0
    8b3c:	|     |      addq.l #8,d0
    8b3e:	|     |      clr.l -(sp)
    8b40:	|     |      move.l d0,-(sp)
    8b42:	|     |      move.l 36(sp),-(sp)
    8b46:	|     |      jsr 624e <loadSpriteBank>
    8b4c:	|     |      lea 12(sp),sp
    8b50:	|     |      tst.w d0
    8b52:	|     |  /-- beq.s 8b86 <loadBankForAnim+0xb6>
			returnMe->timesUsed = 0;
    8b54:	|     |  |   movea.l 20(sp),a0
    8b58:	|     |  |   clr.l 4(a0)
			returnMe->next = allLoadedBanks;
    8b5c:	|     |  |   move.l 19ce6 <allLoadedBanks>,d0
    8b62:	|     |  |   movea.l 20(sp),a0
    8b66:	|     |  |   move.l d0,22(a0)
			allLoadedBanks = returnMe;
    8b6a:	|     |  |   move.l 20(sp),19ce6 <allLoadedBanks>
			KPrintF("loadBankForAnim: New sprite bank created OK\n");
    8b72:	|     |  |   pea 162f2 <incbin_player_end+0x232>
    8b78:	|     |  |   jsr 12f14 <KPrintF>
    8b7e:	|     |  |   addq.l #4,sp
			return returnMe;
    8b80:	|     |  |   move.l 20(sp),d0
    8b84:	+-----|--|-- bra.s 8bb0 <loadBankForAnim+0xe0>
		} else {
			KPrintF("loadBankForAnim: I guess I couldn't load the sprites...\n");
    8b86:	|     |  \-> pea 1631f <incbin_player_end+0x25f>
    8b8c:	|     |      jsr 12f14 <KPrintF>
    8b92:	|     |      addq.l #4,sp
			FreeVec(returnMe);
    8b94:	|     |      move.l 20(sp),4(sp)
    8b9a:	|     |      move.l 19c5e <SysBase>,d0
    8ba0:	|     |      movea.l d0,a6
    8ba2:	|     |      movea.l 4(sp),a1
    8ba6:	|     |      jsr -690(a6)
			return NULL;
    8baa:	|     |      moveq #0,d0
    8bac:	+-----|----- bra.s 8bb0 <loadBankForAnim+0xe0>
		}
	} else return NULL;
    8bae:	|     \----> moveq #0,d0
}
    8bb0:	\----------> movea.l (sp)+,a6
    8bb2:	             lea 20(sp),sp
    8bb6:	             rts

00008bb8 <clearStackLib>:
};

int stackLibTotal = 0;
struct stackLibrary * stackLib = NULL;

void clearStackLib () {
    8bb8:	       subq.l #8,sp
    8bba:	       move.l a6,-(sp)
	struct stackLibrary * k;
	while (stackLib) {
    8bbc:	   /-- bra.s 8bec <clearStackLib+0x34>
		k = stackLib;
    8bbe:	/--|-> move.l 19cee <stackLib>,8(sp)
		stackLib = stackLib -> next;
    8bc6:	|  |   movea.l 19cee <stackLib>,a0
    8bcc:	|  |   move.l 4(a0),d0
    8bd0:	|  |   move.l d0,19cee <stackLib>
		FreeVec(k);
    8bd6:	|  |   move.l 8(sp),4(sp)
    8bdc:	|  |   move.l 19c5e <SysBase>,d0
    8be2:	|  |   movea.l d0,a6
    8be4:	|  |   movea.l 4(sp),a1
    8be8:	|  |   jsr -690(a6)
	while (stackLib) {
    8bec:	|  \-> move.l 19cee <stackLib>,d0
    8bf2:	\----- bne.s 8bbe <clearStackLib+0x6>
	}
	stackLibTotal = 0;
    8bf4:	       clr.l 19cea <stackLibTotal>
}
    8bfa:	       nop
    8bfc:	       movea.l (sp)+,a6
    8bfe:	       addq.l #8,sp
    8c00:	       rts

00008c02 <loadGame>:
	}

	return buildFunc;
}

BOOL loadGame (char * fname) {
    8c02:	          lea -128(sp),sp
    8c06:	          movem.l d2-d3/a6,-(sp)
	BPTR fp;
	FILETIME savedGameTime;
	int a;

	while (allRunningFunctions) finishFunction (allRunningFunctions);
    8c0a:	      /-- bra.s 8c1c <loadGame+0x1a>
    8c0c:	   /--|-> move.l 19bfa <allRunningFunctions>,d0
    8c12:	   |  |   move.l d0,-(sp)
    8c14:	   |  |   jsr 3560 <finishFunction>
    8c1a:	   |  |   addq.l #4,sp
    8c1c:	   |  \-> move.l 19bfa <allRunningFunctions>,d0
    8c22:	   \----- bne.s 8c0c <loadGame+0xa>

	fp = openAndVerify (fname, 'S', 'A', ERROR_GAME_LOAD_NO, &ssgVersion);
    8c24:	          pea 19cf2 <ssgVersion>
    8c2a:	          pea 1637d <incbin_player_end+0x2bd>
    8c30:	          pea 41 <_start+0x41>
    8c34:	          pea 53 <_start+0x53>
    8c38:	          move.l 160(sp),-(sp)
    8c3c:	          jsr 4088 <openAndVerify>
    8c42:	          lea 20(sp),sp
    8c46:	          move.l d0,112(sp)
	if (fp == NULL) return FALSE;
    8c4a:	      /-- bne.s 8c52 <loadGame+0x50>
    8c4c:	      |   clr.w d0
    8c4e:	/-----|-- bra.w 8ef8 <loadGame+0x2f6>

	unsigned int bytes_read = Read( fp, &savedGameTime, sizeof (FILETIME));
    8c52:	|     \-> move.l 112(sp),108(sp)
    8c58:	|         lea 140(sp),a0
    8c5c:	|         lea -126(a0),a0
    8c60:	|         move.l a0,120(sp)
    8c64:	|         moveq #8,d0
    8c66:	|         move.l d0,116(sp)
    8c6a:	|         move.l 19c66 <DOSBase>,d0
    8c70:	|         movea.l d0,a6
    8c72:	|         move.l 108(sp),d1
    8c76:	|         move.l 120(sp),d2
    8c7a:	|         move.l 116(sp),d3
    8c7e:	|         jsr -42(a6)
    8c82:	|         move.l d0,132(sp)
    8c86:	|         move.l 132(sp),d0
    8c8a:	|         move.l d0,128(sp)
	
	if (bytes_read != sizeof (FILETIME)) {
    8c8e:	|         moveq #8,d0
    8c90:	|         cmp.l 128(sp),d0
    8c94:	|     /-- beq.s 8ca4 <loadGame+0xa2>
		KPrintF("Reading error in loadGame.\n");
    8c96:	|     |   pea 1639e <incbin_player_end+0x2de>
    8c9c:	|     |   jsr 12f14 <KPrintF>
    8ca2:	|     |   addq.l #4,sp
	}

	if (savedGameTime.dwLowDateTime != fileTime.dwLowDateTime ||
    8ca4:	|     \-> move.l 14(sp),d1
    8ca8:	|         move.l 19c04 <fileTime>,d0
    8cae:	|         cmp.l d1,d0
    8cb0:	|     /-- bne.s 8cc0 <loadGame+0xbe>
		savedGameTime.dwHighDateTime != fileTime.dwHighDateTime) {
    8cb2:	|     |   move.l 18(sp),d1
    8cb6:	|     |   move.l 19c08 <fileTime+0x4>,d0
	if (savedGameTime.dwLowDateTime != fileTime.dwLowDateTime ||
    8cbc:	|     |   cmp.l d1,d0
    8cbe:	|  /--|-- beq.s 8ce0 <loadGame+0xde>
		KPrintF("loadgame:", ERROR_GAME_LOAD_WRONG, fname);
    8cc0:	|  |  \-> move.l 144(sp),-(sp)
    8cc4:	|  |      pea 163ba <incbin_player_end+0x2fa>
    8cca:	|  |      pea 16481 <incbin_player_end+0x3c1>
    8cd0:	|  |      jsr 12f14 <KPrintF>
    8cd6:	|  |      lea 12(sp),sp
		return FALSE; 
    8cda:	|  |      clr.w d0
    8cdc:	+--|----- bra.w 8ef8 <loadGame+0x2f6>
	}

	// DON'T ADD ANYTHING NEW BEFORE THIS POINT!

	allowAnyFilename = FGetC (fp);
    8ce0:	|  \----> move.l 112(sp),124(sp)
    8ce6:	|         move.l 19c66 <DOSBase>,d0
    8cec:	|         movea.l d0,a6
    8cee:	|         move.l 124(sp),d1
    8cf2:	|         jsr -306(a6)
    8cf6:	|         move.l d0,136(sp)
    8cfa:	|         move.l 136(sp),d0
    8cfe:	|         move.l d0,d0
    8d00:	|         move.w d0,18000 <allowAnyFilename>
	captureAllKeys = FGetC (fp);
    8d06:	|         move.l 112(sp),100(sp)
    8d0c:	|         move.l 19c66 <DOSBase>,d0
    8d12:	|         movea.l d0,a6
    8d14:	|         move.l 100(sp),d1
    8d18:	|         jsr -306(a6)
    8d1c:	|         move.l d0,96(sp)
    8d20:	|         move.l 96(sp),d0
    8d24:	|         move.l d0,d0
    8d26:	|         move.w d0,19c02 <captureAllKeys>
	FGetC (fp); // updateDisplay (part of movie playing)
    8d2c:	|         move.l 112(sp),92(sp)
    8d32:	|         move.l 19c66 <DOSBase>,d0
    8d38:	|         movea.l d0,a6
    8d3a:	|         move.l 92(sp),d1
    8d3e:	|         jsr -306(a6)
    8d42:	|         move.l d0,88(sp)

	BOOL fontLoaded = FGetC (fp);
    8d46:	|         move.l 112(sp),84(sp)
    8d4c:	|         move.l 19c66 <DOSBase>,d0
    8d52:	|         movea.l d0,a6
    8d54:	|         move.l 84(sp),d1
    8d58:	|         jsr -306(a6)
    8d5c:	|         move.l d0,80(sp)
    8d60:	|         move.l 80(sp),d0
    8d64:	|         move.w d0,78(sp)
	int fontNum;
	char * charOrder;
	if (fontLoaded) {
    8d68:	|     /-- beq.s 8d9c <loadGame+0x19a>
		fontNum = get2bytes (fp);
    8d6a:	|     |   move.l 112(sp),-(sp)
    8d6e:	|     |   jsr 6bc <get2bytes>
    8d74:	|     |   addq.l #4,sp
    8d76:	|     |   move.l d0,74(sp)
		fontHeight = get2bytes (fp);		
    8d7a:	|     |   move.l 112(sp),-(sp)
    8d7e:	|     |   jsr 6bc <get2bytes>
    8d84:	|     |   addq.l #4,sp
    8d86:	|     |   move.l d0,19d52 <fontHeight>
		charOrder = readString(fp);		
    8d8c:	|     |   move.l 112(sp),-(sp)
    8d90:	|     |   jsr b02 <readString>
    8d96:	|     |   addq.l #4,sp
    8d98:	|     |   move.l d0,104(sp)
	}
	//loadFont (fontNum, charOrder, fontHeight); Amiga Todo: Implement Graphics stuff
	FreeVec(charOrder);
    8d9c:	|     \-> move.l 104(sp),70(sp)
    8da2:	|         move.l 19c5e <SysBase>,d0
    8da8:	|         movea.l d0,a6
    8daa:	|         movea.l 70(sp),a1
    8dae:	|         jsr -690(a6)
	
	fontSpace = getSigned (fp);
    8db2:	|         move.l 112(sp),-(sp)
    8db6:	|         jsr 854 <getSigned>
    8dbc:	|         addq.l #4,sp
    8dbe:	|         move.w d0,186b0 <fontSpace>

	killAllPeople ();
    8dc4:	|         jsr 743c <killAllPeople>
	killAllRegions ();
    8dca:	|         jsr 119b8 <killAllRegions>

	int camerX = get2bytes (fp);
    8dd0:	|         move.l 112(sp),-(sp)
    8dd4:	|         jsr 6bc <get2bytes>
    8dda:	|         addq.l #4,sp
    8ddc:	|         move.l d0,66(sp)
	int camerY = get2bytes (fp);
    8de0:	|         move.l 112(sp),-(sp)
    8de4:	|         jsr 6bc <get2bytes>
    8dea:	|         addq.l #4,sp
    8dec:	|         move.l d0,62(sp)
	FLOAT camerZ;
	camerZ = getFloat(fp);
    8df0:	|         move.l 112(sp),-(sp)
    8df4:	|         jsr 7d8 <getFloat>
    8dfa:	|         addq.l #4,sp
    8dfc:	|         move.l d0,58(sp)

	brightnessLevel = FGetC (fp);
    8e00:	|         move.l 112(sp),54(sp)
    8e06:	|         move.l 19c66 <DOSBase>,d0
    8e0c:	|         movea.l d0,a6
    8e0e:	|         move.l 54(sp),d1
    8e12:	|         jsr -306(a6)
    8e16:	|         move.l d0,50(sp)
    8e1a:	|         move.l 50(sp),d0
    8e1e:	|         move.l d0,d0
    8e20:	|         move.b d0,1811a <brightnessLevel>

	loadHandlers (fp);
    8e26:	|         move.l 112(sp),-(sp)
    8e2a:	|         jsr 3fe8 <loadHandlers>
    8e30:	|         addq.l #4,sp
	loadRegions (fp);
    8e32:	|         move.l 112(sp),-(sp)
    8e36:	|         jsr 11a14 <loadRegions>
    8e3c:	|         addq.l #4,sp

	mouseCursorAnim = AllocVec( sizeof( struct personaAnimation), MEMF_ANY);
    8e3e:	|         moveq #12,d0
    8e40:	|         move.l d0,46(sp)
    8e44:	|         clr.l 42(sp)
    8e48:	|         move.l 19c5e <SysBase>,d0
    8e4e:	|         movea.l d0,a6
    8e50:	|         move.l 46(sp),d0
    8e54:	|         move.l 42(sp),d1
    8e58:	|         jsr -684(a6)
    8e5c:	|         move.l d0,38(sp)
    8e60:	|         move.l 38(sp),d0
    8e64:	|         move.l d0,19b2c <mouseCursorAnim>
	if (! mouseCursorAnim) {
    8e6a:	|         move.l 19b2c <mouseCursorAnim>,d0
    8e70:	|     /-- bne.s 8e84 <loadGame+0x282>
		KPrintF("loadGame: Cannot allocate memory");
    8e72:	|     |   pea 1648b <incbin_player_end+0x3cb>
    8e78:	|     |   jsr 12f14 <KPrintF>
    8e7e:	|     |   addq.l #4,sp
		return FALSE;
    8e80:	|     |   clr.w d0
    8e82:	+-----|-- bra.s 8ef8 <loadGame+0x2f6>
			languageNum = selectedLanguage;
			setFileIndices (NULL, gameSettings.numLanguages, languageNum);
		}
	}

	nosnapshot ();
    8e84:	|     \-> jsr 9b54 <nosnapshot>
	if (FGetC (fp)) {
    8e8a:	|         move.l 112(sp),34(sp)
    8e90:	|         move.l 19c66 <DOSBase>,d0
    8e96:	|         movea.l d0,a6
    8e98:	|         move.l 34(sp),d1
    8e9c:	|         jsr -306(a6)
    8ea0:	|         move.l d0,30(sp)
    8ea4:	|         move.l 30(sp),d0
    8ea8:	|     /-- beq.s 8ebe <loadGame+0x2bc>
		if (! restoreSnapshot (fp)) return FALSE;
    8eaa:	|     |   move.l 112(sp),-(sp)
    8eae:	|     |   jsr 9c2c <restoreSnapshot>
    8eb4:	|     |   addq.l #4,sp
    8eb6:	|     |   tst.w d0
    8eb8:	|     +-- bne.s 8ebe <loadGame+0x2bc>
    8eba:	|     |   clr.w d0
    8ebc:	+-----|-- bra.s 8ef8 <loadGame+0x2f6>
	}

	Close (fp);
    8ebe:	|     \-> move.l 112(sp),26(sp)
    8ec4:	|         move.l 19c66 <DOSBase>,d0
    8eca:	|         movea.l d0,a6
    8ecc:	|         move.l 26(sp),d1
    8ed0:	|         jsr -36(a6)
    8ed4:	|         move.l d0,22(sp)
	clearStackLib ();
    8ed8:	|         jsr 8bb8 <clearStackLib>

	cameraX = camerX;
    8ede:	|         move.l 66(sp),19d18 <cameraX>
	cameraY = camerY;
    8ee6:	|         move.l 62(sp),19d1c <cameraY>
	cameraZoom = camerZ;
    8eee:	|         move.l 58(sp),1814a <cameraZoom>

	return TRUE;
    8ef6:	|         moveq #1,d0
}
    8ef8:	\-------> movem.l (sp)+,d2-d3/a6
    8efc:	          lea 128(sp),sp
    8f00:	          rts

00008f02 <saveFunction>:

void saveFunction (struct loadedFunction * fun, BPTR fp) {
    8f02:	   /-> lea -64(sp),sp
    8f06:	   |   move.l a6,-(sp)
    8f08:	   |   move.l d2,-(sp)
	int a;
	put2bytes (fun -> originalNumber, fp);
    8f0a:	   |   movea.l 76(sp),a0
    8f0e:	   |   move.l (a0),d0
    8f10:	   |   move.l 80(sp),-(sp)
    8f14:	   |   move.l d0,-(sp)
    8f16:	   |   jsr 8d0 <put2bytes>
    8f1c:	   |   addq.l #8,sp
	if (fun -> calledBy) {
    8f1e:	   |   movea.l 76(sp),a0
    8f22:	   |   move.l 40(a0),d0
    8f26:	/--|-- beq.s 8f62 <saveFunction+0x60>
		FPutC (fp, 1);
    8f28:	|  |   move.l 80(sp),52(sp)
    8f2e:	|  |   moveq #1,d0
    8f30:	|  |   move.l d0,48(sp)
    8f34:	|  |   move.l 19c66 <DOSBase>,d0
    8f3a:	|  |   movea.l d0,a6
    8f3c:	|  |   move.l 52(sp),d1
    8f40:	|  |   move.l 48(sp),d2
    8f44:	|  |   jsr -312(a6)
    8f48:	|  |   move.l d0,44(sp)
		saveFunction (fun -> calledBy, fp);
    8f4c:	|  |   movea.l 76(sp),a0
    8f50:	|  |   move.l 40(a0),d0
    8f54:	|  |   move.l 80(sp),-(sp)
    8f58:	|  |   move.l d0,-(sp)
    8f5a:	|  \-- jsr 8f02 <saveFunction>(pc)
    8f5e:	|      addq.l #8,sp
    8f60:	|  /-- bra.s 8f84 <saveFunction+0x82>
	} else {
		FPutC (fp, 0);
    8f62:	\--|-> move.l 80(sp),64(sp)
    8f68:	   |   clr.l 60(sp)
    8f6c:	   |   move.l 19c66 <DOSBase>,d0
    8f72:	   |   movea.l d0,a6
    8f74:	   |   move.l 64(sp),d1
    8f78:	   |   move.l 60(sp),d2
    8f7c:	   |   jsr -312(a6)
    8f80:	   |   move.l d0,56(sp)
	}
	put4bytes (fun -> timeLeft, fp);
    8f84:	   \-> movea.l 76(sp),a0
    8f88:	       move.l 12(a0),d0
    8f8c:	       move.l 80(sp),-(sp)
    8f90:	       move.l d0,-(sp)
    8f92:	       jsr 958 <put4bytes>
    8f98:	       addq.l #8,sp
	put2bytes (fun -> runThisLine, fp);
    8f9a:	       movea.l 76(sp),a0
    8f9e:	       move.l 36(a0),d0
    8fa2:	       move.l 80(sp),-(sp)
    8fa6:	       move.l d0,-(sp)
    8fa8:	       jsr 8d0 <put2bytes>
    8fae:	       addq.l #8,sp
	FPutC (fp, fun -> cancelMe);
    8fb0:	       move.l 80(sp),40(sp)
    8fb6:	       movea.l 76(sp),a0
    8fba:	       move.w 54(a0),d0
    8fbe:	       movea.w d0,a0
    8fc0:	       move.l a0,36(sp)
    8fc4:	       move.l 19c66 <DOSBase>,d0
    8fca:	       movea.l d0,a6
    8fcc:	       move.l 40(sp),d1
    8fd0:	       move.l 36(sp),d2
    8fd4:	       jsr -312(a6)
    8fd8:	       move.l d0,32(sp)
	FPutC (fp, fun -> returnSomething);
    8fdc:	       move.l 80(sp),28(sp)
    8fe2:	       movea.l 76(sp),a0
    8fe6:	       move.w 48(a0),d0
    8fea:	       movea.w d0,a0
    8fec:	       move.l a0,24(sp)
    8ff0:	       move.l 19c66 <DOSBase>,d0
    8ff6:	       movea.l d0,a6
    8ff8:	       move.l 28(sp),d1
    8ffc:	       move.l 24(sp),d2
    9000:	       jsr -312(a6)
    9004:	       move.l d0,20(sp)
	FPutC (fp, fun -> isSpeech);
    9008:	       move.l 80(sp),16(sp)
    900e:	       movea.l 76(sp),a0
    9012:	       move.w 50(a0),d0
    9016:	       movea.w d0,a0
    9018:	       move.l a0,12(sp)
    901c:	       move.l 19c66 <DOSBase>,d0
    9022:	       movea.l d0,a6
    9024:	       move.l 16(sp),d1
    9028:	       move.l 12(sp),d2
    902c:	       jsr -312(a6)
    9030:	       move.l d0,8(sp)
	saveVariable (&fun -> reg, fp);
    9034:	       moveq #28,d0
    9036:	       add.l 76(sp),d0
    903a:	       move.l 80(sp),-(sp)
    903e:	       move.l d0,-(sp)
    9040:	       jsr 97be <saveVariable>
    9046:	       addq.l #8,sp

	if (fun -> freezerLevel) {
    9048:	       movea.l 76(sp),a0
    904c:	       move.b 56(a0),d0
    9050:	   /-- beq.s 9060 <saveFunction+0x15e>
		KPrintF(ERROR_GAME_SAVE_FROZEN);		
    9052:	   |   pea 164ac <incbin_player_end+0x3ec>
    9058:	   |   jsr 12f14 <KPrintF>
    905e:	   |   addq.l #4,sp
	}
	saveStack (fun -> stack, fp);
    9060:	   \-> movea.l 76(sp),a0
    9064:	       move.l 24(a0),d0
    9068:	       move.l 80(sp),-(sp)
    906c:	       move.l d0,-(sp)
    906e:	       jsr 9632 <saveStack>
    9074:	       addq.l #8,sp
	for (a = 0; a < fun -> numLocals; a ++) {
    9076:	       clr.l 68(sp)
    907a:	   /-- bra.s 909e <saveFunction+0x19c>
		saveVariable (& (fun -> localVars[a]), fp);
    907c:	/--|-> movea.l 76(sp),a0
    9080:	|  |   move.l 20(a0),d1
    9084:	|  |   move.l 68(sp),d0
    9088:	|  |   lsl.l #3,d0
    908a:	|  |   add.l d1,d0
    908c:	|  |   move.l 80(sp),-(sp)
    9090:	|  |   move.l d0,-(sp)
    9092:	|  |   jsr 97be <saveVariable>
    9098:	|  |   addq.l #8,sp
	for (a = 0; a < fun -> numLocals; a ++) {
    909a:	|  |   addq.l #1,68(sp)
    909e:	|  \-> movea.l 76(sp),a0
    90a2:	|      move.l 8(a0),d0
    90a6:	|      cmp.l 68(sp),d0
    90aa:	\----- bgt.s 907c <saveFunction+0x17a>
	}
}
    90ac:	       nop
    90ae:	       nop
    90b0:	       move.l (sp)+,d2
    90b2:	       movea.l (sp)+,a6
    90b4:	       lea 64(sp),sp
    90b8:	       rts

000090ba <saveGame>:

BOOL saveGame (char * fname) {
    90ba:	          lea -272(sp),sp
    90be:	          movem.l d2-d3/a6,-(sp)
	int a;

	BPTR fp = Open( fname, MODE_NEWFILE);
    90c2:	          move.l 288(sp),268(sp)
    90c8:	          move.l #1006,264(sp)
    90d0:	          move.l 19c66 <DOSBase>,d0
    90d6:	          movea.l d0,a6
    90d8:	          move.l 268(sp),d1
    90dc:	          move.l 264(sp),d2
    90e0:	          jsr -30(a6)
    90e4:	          move.l d0,260(sp)
    90e8:	          move.l 260(sp),d0
    90ec:	          move.l d0,256(sp)
	if (fp == NULL) {
    90f0:	      /-- bne.s 9106 <saveGame+0x4c>
		KPrintF("saveGame: Cannot create file");
    90f2:	      |   pea 164ce <incbin_player_end+0x40e>
    90f8:	      |   jsr 12f14 <KPrintF>
    90fe:	      |   addq.l #4,sp
		return FALSE;
    9100:	      |   clr.w d0
    9102:	/-----|-- bra.w 9628 <saveGame+0x56e>
	}

	Write( fp, &"SLUDSA", 6);
    9106:	|     \-> move.l 256(sp),252(sp)
    910c:	|         move.l #91371,248(sp)
    9114:	|         moveq #6,d0
    9116:	|         move.l d0,244(sp)
    911a:	|         move.l 19c66 <DOSBase>,d0
    9120:	|         movea.l d0,a6
    9122:	|         move.l 252(sp),d1
    9126:	|         move.l 248(sp),d2
    912a:	|         move.l 244(sp),d3
    912e:	|         jsr -48(a6)
    9132:	|         move.l d0,240(sp)
	FPutC (fp, 0);
    9136:	|         move.l 256(sp),236(sp)
    913c:	|         clr.l 232(sp)
    9140:	|         move.l 19c66 <DOSBase>,d0
    9146:	|         movea.l d0,a6
    9148:	|         move.l 236(sp),d1
    914c:	|         move.l 232(sp),d2
    9150:	|         jsr -312(a6)
    9154:	|         move.l d0,228(sp)
	FPutC (fp, 0);
    9158:	|         move.l 256(sp),224(sp)
    915e:	|         clr.l 220(sp)
    9162:	|         move.l 19c66 <DOSBase>,d0
    9168:	|         movea.l d0,a6
    916a:	|         move.l 224(sp),d1
    916e:	|         move.l 220(sp),d2
    9172:	|         jsr -312(a6)
    9176:	|         move.l d0,216(sp)
	FPutC (fp, MAJOR_VERSION);
    917a:	|         move.l 256(sp),212(sp)
    9180:	|         moveq #2,d0
    9182:	|         move.l d0,208(sp)
    9186:	|         move.l 19c66 <DOSBase>,d0
    918c:	|         movea.l d0,a6
    918e:	|         move.l 212(sp),d1
    9192:	|         move.l 208(sp),d2
    9196:	|         jsr -312(a6)
    919a:	|         move.l d0,204(sp)
	FPutC (fp, MINOR_VERSION);
    919e:	|         move.l 256(sp),200(sp)
    91a4:	|         moveq #2,d0
    91a6:	|         move.l d0,196(sp)
    91aa:	|         move.l 19c66 <DOSBase>,d0
    91b0:	|         movea.l d0,a6
    91b2:	|         move.l 200(sp),d1
    91b6:	|         move.l 196(sp),d2
    91ba:	|         jsr -312(a6)
    91be:	|         move.l d0,192(sp)

	Write ( fp, &fileTime, sizeof(FILETIME));
    91c2:	|         move.l 256(sp),188(sp)
    91c8:	|         move.l #105476,184(sp)
    91d0:	|         moveq #8,d0
    91d2:	|         move.l d0,180(sp)
    91d6:	|         move.l 19c66 <DOSBase>,d0
    91dc:	|         movea.l d0,a6
    91de:	|         move.l 188(sp),d1
    91e2:	|         move.l 184(sp),d2
    91e6:	|         move.l 180(sp),d3
    91ea:	|         jsr -48(a6)
    91ee:	|         move.l d0,176(sp)

	// DON'T ADD ANYTHING NEW BEFORE THIS POINT!

	FPutC (fp, allowAnyFilename);
    91f2:	|         move.l 256(sp),172(sp)
    91f8:	|         move.w 18000 <allowAnyFilename>,d0
    91fe:	|         movea.w d0,a0
    9200:	|         move.l a0,168(sp)
    9204:	|         move.l 19c66 <DOSBase>,d0
    920a:	|         movea.l d0,a6
    920c:	|         move.l 172(sp),d1
    9210:	|         move.l 168(sp),d2
    9214:	|         jsr -312(a6)
    9218:	|         move.l d0,164(sp)
	FPutC (fp, captureAllKeys);
    921c:	|         move.l 256(sp),160(sp)
    9222:	|         move.w 19c02 <captureAllKeys>,d0
    9228:	|         movea.w d0,a0
    922a:	|         move.l a0,156(sp)
    922e:	|         move.l 19c66 <DOSBase>,d0
    9234:	|         movea.l d0,a6
    9236:	|         move.l 160(sp),d1
    923a:	|         move.l 156(sp),d2
    923e:	|         jsr -312(a6)
    9242:	|         move.l d0,152(sp)
	FPutC (fp, TRUE); // updateDisplay
    9246:	|         move.l 256(sp),148(sp)
    924c:	|         moveq #1,d0
    924e:	|         move.l d0,144(sp)
    9252:	|         move.l 19c66 <DOSBase>,d0
    9258:	|         movea.l d0,a6
    925a:	|         move.l 148(sp),d1
    925e:	|         move.l 144(sp),d2
    9262:	|         jsr -312(a6)
    9266:	|         move.l d0,140(sp)
	FPutC (fp, fontTableSize>0);
    926a:	|         move.l 256(sp),136(sp)
    9270:	|         move.l 19d5e <fontTableSize>,d0
    9276:	|         sgt d0
    9278:	|         neg.b d0
    927a:	|         move.b d0,d0
    927c:	|         andi.l #255,d0
    9282:	|         move.l d0,132(sp)
    9286:	|         move.l 19c66 <DOSBase>,d0
    928c:	|         movea.l d0,a6
    928e:	|         move.l 136(sp),d1
    9292:	|         move.l 132(sp),d2
    9296:	|         jsr -312(a6)
    929a:	|         move.l d0,128(sp)

	if (fontTableSize>0) {
    929e:	|         move.l 19d5e <fontTableSize>,d0
    92a4:	|     /-- ble.s 92e2 <saveGame+0x228>
		put2bytes (loadedFontNum, fp);
    92a6:	|     |   move.l 19d56 <loadedFontNum>,d0
    92ac:	|     |   move.l 256(sp),-(sp)
    92b0:	|     |   move.l d0,-(sp)
    92b2:	|     |   jsr 8d0 <put2bytes>
    92b8:	|     |   addq.l #8,sp
		put2bytes (fontHeight, fp);
    92ba:	|     |   move.l 19d52 <fontHeight>,d0
    92c0:	|     |   move.l 256(sp),-(sp)
    92c4:	|     |   move.l d0,-(sp)
    92c6:	|     |   jsr 8d0 <put2bytes>
    92cc:	|     |   addq.l #8,sp
		writeString(fontOrderString, fp);
    92ce:	|     |   move.l 19d5a <fontOrderString>,d0
    92d4:	|     |   move.l 256(sp),-(sp)
    92d8:	|     |   move.l d0,-(sp)
    92da:	|     |   jsr bd8 <writeString>
    92e0:	|     |   addq.l #8,sp
	}
	putSigned (fontSpace, fp);
    92e2:	|     \-> move.w 186b0 <fontSpace>,d0
    92e8:	|         movea.w d0,a0
    92ea:	|         move.l 256(sp),-(sp)
    92ee:	|         move.l a0,-(sp)
    92f0:	|         jsr a9c <putSigned>
    92f6:	|         addq.l #8,sp

	// Save backdrop
	put2bytes (cameraX, fp);
    92f8:	|         move.l 19d18 <cameraX>,d0
    92fe:	|         move.l 256(sp),-(sp)
    9302:	|         move.l d0,-(sp)
    9304:	|         jsr 8d0 <put2bytes>
    930a:	|         addq.l #8,sp
	put2bytes (cameraY, fp);
    930c:	|         move.l 19d1c <cameraY>,d0
    9312:	|         move.l 256(sp),-(sp)
    9316:	|         move.l d0,-(sp)
    9318:	|         jsr 8d0 <put2bytes>
    931e:	|         addq.l #8,sp
	putFloat(cameraZoom, fp);
    9320:	|         move.l 1814a <cameraZoom>,d0
    9326:	|         move.l 256(sp),-(sp)
    932a:	|         move.l d0,-(sp)
    932c:	|         jsr a46 <putFloat>
    9332:	|         addq.l #8,sp

	FPutC (fp, brightnessLevel);
    9334:	|         move.l 256(sp),124(sp)
    933a:	|         move.b 1811a <brightnessLevel>,d0
    9340:	|         move.b d0,d0
    9342:	|         andi.l #255,d0
    9348:	|         move.l d0,120(sp)
    934c:	|         move.l 19c66 <DOSBase>,d0
    9352:	|         movea.l d0,a6
    9354:	|         move.l 124(sp),d1
    9358:	|         move.l 120(sp),d2
    935c:	|         jsr -312(a6)
    9360:	|         move.l d0,116(sp)

	// Save event handlers
	saveHandlers (fp);
    9364:	|         move.l 256(sp),-(sp)
    9368:	|         jsr 456c <saveHandlers>
    936e:	|         addq.l #4,sp

	// Save regions
	saveRegions (fp);
    9370:	|         move.l 256(sp),-(sp)
    9374:	|         jsr 11bce <saveRegions>
    937a:	|         addq.l #4,sp

	saveAnim (mouseCursorAnim, fp);
    937c:	|         move.l 19b2c <mouseCursorAnim>,d0
    9382:	|         move.l 256(sp),-(sp)
    9386:	|         move.l d0,-(sp)
    9388:	|         jsr 796a <saveAnim>
    938e:	|         addq.l #8,sp
	put2bytes (mouseCursorFrameNum, fp);
    9390:	|         move.l 19b30 <mouseCursorFrameNum>,d0
    9396:	|         move.l 256(sp),-(sp)
    939a:	|         move.l d0,-(sp)
    939c:	|         jsr 8d0 <put2bytes>
    93a2:	|         addq.l #8,sp

	// Save functions
	struct loadedFunction * thisFunction = allRunningFunctions;
    93a4:	|         move.l 19bfa <allRunningFunctions>,276(sp)
	int countFunctions = 0;
    93ac:	|         clr.l 272(sp)
	while (thisFunction) {
    93b0:	|     /-- bra.s 93c0 <saveGame+0x306>
		countFunctions ++;
    93b2:	|  /--|-> addq.l #1,272(sp)
		thisFunction = thisFunction -> next;
    93b6:	|  |  |   movea.l 276(sp),a0
    93ba:	|  |  |   move.l 44(a0),276(sp)
	while (thisFunction) {
    93c0:	|  |  \-> tst.l 276(sp)
    93c4:	|  \----- bne.s 93b2 <saveGame+0x2f8>
	}
	put2bytes (countFunctions, fp);
    93c6:	|         move.l 256(sp),-(sp)
    93ca:	|         move.l 276(sp),-(sp)
    93ce:	|         jsr 8d0 <put2bytes>
    93d4:	|         addq.l #8,sp

	thisFunction = allRunningFunctions;
    93d6:	|         move.l 19bfa <allRunningFunctions>,276(sp)
	while (thisFunction) {
    93de:	|     /-- bra.s 93fa <saveGame+0x340>
		saveFunction (thisFunction, fp);
    93e0:	|  /--|-> move.l 256(sp),-(sp)
    93e4:	|  |  |   move.l 280(sp),-(sp)
    93e8:	|  |  |   jsr 8f02 <saveFunction>
    93ee:	|  |  |   addq.l #8,sp
		thisFunction = thisFunction -> next;
    93f0:	|  |  |   movea.l 276(sp),a0
    93f4:	|  |  |   move.l 44(a0),276(sp)
	while (thisFunction) {
    93fa:	|  |  \-> tst.l 276(sp)
    93fe:	|  \----- bne.s 93e0 <saveGame+0x326>
	}

	for (a = 0; a < numGlobals; a ++) {
    9400:	|         clr.l 280(sp)
    9404:	|     /-- bra.s 9426 <saveGame+0x36c>
		saveVariable (& globalVars[a], fp);
    9406:	|  /--|-> move.l 19c10 <globalVars>,d1
    940c:	|  |  |   move.l 280(sp),d0
    9410:	|  |  |   lsl.l #3,d0
    9412:	|  |  |   add.l d1,d0
    9414:	|  |  |   move.l 256(sp),-(sp)
    9418:	|  |  |   move.l d0,-(sp)
    941a:	|  |  |   jsr 97be <saveVariable>
    9420:	|  |  |   addq.l #8,sp
	for (a = 0; a < numGlobals; a ++) {
    9422:	|  |  |   addq.l #1,280(sp)
    9426:	|  |  \-> move.l 19c36 <numGlobals>,d0
    942c:	|  |      cmp.l 280(sp),d0
    9430:	|  \----- bgt.s 9406 <saveGame+0x34c>
	}

	savePeople (fp);
    9432:	|         move.l 256(sp),-(sp)
    9436:	|         jsr 7a92 <savePeople>
    943c:	|         addq.l #4,sp

	if (currentFloor -> numPolygons) {
    943e:	|         movea.l 19d6a <currentFloor>,a0
    9444:	|         move.l 8(a0),d0
    9448:	|  /----- beq.s 9486 <saveGame+0x3cc>
		FPutC (fp, 1);
    944a:	|  |      move.l 256(sp),100(sp)
    9450:	|  |      moveq #1,d0
    9452:	|  |      move.l d0,96(sp)
    9456:	|  |      move.l 19c66 <DOSBase>,d0
    945c:	|  |      movea.l d0,a6
    945e:	|  |      move.l 100(sp),d1
    9462:	|  |      move.l 96(sp),d2
    9466:	|  |      jsr -312(a6)
    946a:	|  |      move.l d0,92(sp)
		put2bytes (currentFloor -> originalNum, fp);
    946e:	|  |      movea.l 19d6a <currentFloor>,a0
    9474:	|  |      move.l (a0),d0
    9476:	|  |      move.l 256(sp),-(sp)
    947a:	|  |      move.l d0,-(sp)
    947c:	|  |      jsr 8d0 <put2bytes>
    9482:	|  |      addq.l #8,sp
    9484:	|  |  /-- bra.s 94a8 <saveGame+0x3ee>
	} else FPutC (fp, 0);
    9486:	|  \--|-> move.l 256(sp),112(sp)
    948c:	|     |   clr.l 108(sp)
    9490:	|     |   move.l 19c66 <DOSBase>,d0
    9496:	|     |   movea.l d0,a6
    9498:	|     |   move.l 112(sp),d1
    949c:	|     |   move.l 108(sp),d2
    94a0:	|     |   jsr -312(a6)
    94a4:	|     |   move.l d0,104(sp)

	if (zBuffer.tex) {
    94a8:	|     \-> move.l 19bce <zBuffer+0x50>,d0
    94ae:	|  /----- beq.s 94ea <saveGame+0x430>
		FPutC (fp, 1);
    94b0:	|  |      move.l 256(sp),76(sp)
    94b6:	|  |      moveq #1,d0
    94b8:	|  |      move.l d0,72(sp)
    94bc:	|  |      move.l 19c66 <DOSBase>,d0
    94c2:	|  |      movea.l d0,a6
    94c4:	|  |      move.l 76(sp),d1
    94c8:	|  |      move.l 72(sp),d2
    94cc:	|  |      jsr -312(a6)
    94d0:	|  |      move.l d0,68(sp)
		put2bytes (zBuffer.originalNum, fp);
    94d4:	|  |      move.l 19bca <zBuffer+0x4c>,d0
    94da:	|  |      move.l 256(sp),-(sp)
    94de:	|  |      move.l d0,-(sp)
    94e0:	|  |      jsr 8d0 <put2bytes>
    94e6:	|  |      addq.l #8,sp
    94e8:	|  |  /-- bra.s 950c <saveGame+0x452>
	} else FPutC (fp,0);
    94ea:	|  \--|-> move.l 256(sp),88(sp)
    94f0:	|     |   clr.l 84(sp)
    94f4:	|     |   move.l 19c66 <DOSBase>,d0
    94fa:	|     |   movea.l d0,a6
    94fc:	|     |   move.l 88(sp),d1
    9500:	|     |   move.l 84(sp),d2
    9504:	|     |   jsr -312(a6)
    9508:	|     |   move.l d0,80(sp)

	FPutC (fp, speechMode);
    950c:	|     \-> move.l 256(sp),64(sp)
    9512:	|         move.l 19d2c <speechMode>,60(sp)
    951a:	|         move.l 19c66 <DOSBase>,d0
    9520:	|         movea.l d0,a6
    9522:	|         move.l 64(sp),d1
    9526:	|         move.l 60(sp),d2
    952a:	|         jsr -312(a6)
    952e:	|         move.l d0,56(sp)
	FPutC (fadeMode, fp);
    9532:	|         move.b 18686 <fadeMode>,d0
    9538:	|         move.b d0,d0
    953a:	|         andi.l #255,d0
    9540:	|         move.l d0,52(sp)
    9544:	|         move.l 256(sp),48(sp)
    954a:	|         move.l 19c66 <DOSBase>,d0
    9550:	|         movea.l d0,a6
    9552:	|         move.l 52(sp),d1
    9556:	|         move.l 48(sp),d2
    955a:	|         jsr -312(a6)
    955e:	|         move.l d0,44(sp)
	saveSpeech (speech, fp);
    9562:	|         move.l 19cba <speech>,d0
    9568:	|         move.l 256(sp),-(sp)
    956c:	|         move.l d0,-(sp)
    956e:	|         jsr 5b54 <saveSpeech>
    9574:	|         addq.l #8,sp
	saveStatusBars (fp);
    9576:	|         move.l 256(sp),-(sp)
    957a:	|         jsr 5550 <saveStatusBars>
    9580:	|         addq.l #4,sp
	saveSounds (fp);
    9582:	|         move.l 256(sp),-(sp)
    9586:	|         jsr 9902 <saveSounds>
    958c:	|         addq.l #4,sp

	put2bytes (saveEncoding, fp);
    958e:	|         move.w 19d16 <saveEncoding>,d0
    9594:	|         move.w d0,d0
    9596:	|         andi.l #65535,d0
    959c:	|         move.l 256(sp),-(sp)
    95a0:	|         move.l d0,-(sp)
    95a2:	|         jsr 8d0 <put2bytes>
    95a8:	|         addq.l #8,sp

	saveParallaxRecursive (parallaxStuff, fp);
    95aa:	|         move.l 19d08 <parallaxStuff>,d0
    95b0:	|         move.l 256(sp),-(sp)
    95b4:	|         move.l d0,-(sp)
    95b6:	|         jsr 9c52 <saveParallaxRecursive>
    95bc:	|         addq.l #8,sp
	FPutC (fp, 0);
    95be:	|         move.l 256(sp),40(sp)
    95c4:	|         clr.l 36(sp)
    95c8:	|         move.l 19c66 <DOSBase>,d0
    95ce:	|         movea.l d0,a6
    95d0:	|         move.l 40(sp),d1
    95d4:	|         move.l 36(sp),d2
    95d8:	|         jsr -312(a6)
    95dc:	|         move.l d0,32(sp)

	FPutC(fp, languageNum);	// Selected language
    95e0:	|         move.l 256(sp),28(sp)
    95e6:	|         move.l 18120 <languageNum>,24(sp)
    95ee:	|         move.l 19c66 <DOSBase>,d0
    95f4:	|         movea.l d0,a6
    95f6:	|         move.l 28(sp),d1
    95fa:	|         move.l 24(sp),d2
    95fe:	|         jsr -312(a6)
    9602:	|         move.l d0,20(sp)

	Close(fp);
    9606:	|         move.l 256(sp),16(sp)
    960c:	|         move.l 19c66 <DOSBase>,d0
    9612:	|         movea.l d0,a6
    9614:	|         move.l 16(sp),d1
    9618:	|         jsr -36(a6)
    961c:	|         move.l d0,12(sp)
	clearStackLib ();
    9620:	|         jsr 8bb8 <clearStackLib>
	return TRUE;
    9626:	|         moveq #1,d0
}
    9628:	\-------> movem.l (sp)+,d2-d3/a6
    962c:	          lea 272(sp),sp
    9630:	          rts

00009632 <saveStack>:

//----------------------------------------------------------------------
// For saving and loading stacks...
//----------------------------------------------------------------------

void saveStack (struct variableStack * vs, BPTR fp) {
    9632:	       lea -12(sp),sp
	int elements = 0;
    9636:	       clr.l 8(sp)
	int a;

	struct variableStack * search = vs;
    963a:	       move.l 16(sp),(sp)
	while (search) {
    963e:	   /-- bra.s 964a <saveStack+0x18>
		elements ++;
    9640:	/--|-> addq.l #1,8(sp)
		search = search -> next;
    9644:	|  |   movea.l (sp),a0
    9646:	|  |   move.l 8(a0),(sp)
	while (search) {
    964a:	|  \-> tst.l (sp)
    964c:	\----- bne.s 9640 <saveStack+0xe>
	}

	put2bytes (elements, fp);
    964e:	       move.l 20(sp),-(sp)
    9652:	       move.l 12(sp),-(sp)
    9656:	       jsr 8d0 <put2bytes>
    965c:	       addq.l #8,sp
	search = vs;
    965e:	       move.l 16(sp),(sp)
	for (a = 0; a < elements; a ++) {
    9662:	       clr.l 4(sp)
    9666:	   /-- bra.s 9682 <saveStack+0x50>
		saveVariable (& search -> thisVar, fp);
    9668:	/--|-> move.l (sp),d0
    966a:	|  |   move.l 20(sp),-(sp)
    966e:	|  |   move.l d0,-(sp)
    9670:	|  |   jsr 97be <saveVariable>
    9676:	|  |   addq.l #8,sp
		search = search -> next;
    9678:	|  |   movea.l (sp),a0
    967a:	|  |   move.l 8(a0),(sp)
	for (a = 0; a < elements; a ++) {
    967e:	|  |   addq.l #1,4(sp)
    9682:	|  \-> move.l 4(sp),d0
    9686:	|      cmp.l 8(sp),d0
    968a:	\----- blt.s 9668 <saveStack+0x36>
	}
}
    968c:	       nop
    968e:	       nop
    9690:	       lea 12(sp),sp
    9694:	       rts

00009696 <saveStackRef>:


BOOL saveStackRef (struct stackHandler * vs, BPTR fp) {
    9696:	             lea -44(sp),sp
    969a:	             move.l a6,-(sp)
    969c:	             move.l d2,-(sp)
	struct stackLibrary * s = stackLib;
    969e:	             move.l 19cee <stackLib>,48(sp)
	int a = 0;
    96a6:	             clr.l 44(sp)
	while (s) {
    96aa:	      /----- bra.s 9708 <saveStackRef+0x72>
		if (s -> stack == vs) {
    96ac:	   /--|----> movea.l 48(sp),a0
    96b0:	   |  |      move.l (a0),d0
    96b2:	   |  |      cmp.l 56(sp),d0
    96b6:	   |  |  /-- bne.s 96fa <saveStackRef+0x64>
			FPutC (fp, 1);
    96b8:	   |  |  |   move.l 60(sp),16(sp)
    96be:	   |  |  |   moveq #1,d0
    96c0:	   |  |  |   move.l d0,12(sp)
    96c4:	   |  |  |   move.l 19c66 <DOSBase>,d0
    96ca:	   |  |  |   movea.l d0,a6
    96cc:	   |  |  |   move.l 16(sp),d1
    96d0:	   |  |  |   move.l 12(sp),d2
    96d4:	   |  |  |   jsr -312(a6)
    96d8:	   |  |  |   move.l d0,8(sp)
			put2bytes (stackLibTotal - a, fp);
    96dc:	   |  |  |   move.l 19cea <stackLibTotal>,d0
    96e2:	   |  |  |   sub.l 44(sp),d0
    96e6:	   |  |  |   move.l 60(sp),-(sp)
    96ea:	   |  |  |   move.l d0,-(sp)
    96ec:	   |  |  |   jsr 8d0 <put2bytes>
    96f2:	   |  |  |   addq.l #8,sp
			return TRUE;
    96f4:	   |  |  |   moveq #1,d0
    96f6:	/--|--|--|-- bra.w 97b4 <saveStackRef+0x11e>
		}
		s = s -> next;
    96fa:	|  |  |  \-> movea.l 48(sp),a0
    96fe:	|  |  |      move.l 4(a0),48(sp)
		a ++;
    9704:	|  |  |      addq.l #1,44(sp)
	while (s) {
    9708:	|  |  \----> tst.l 48(sp)
    970c:	|  \-------- bne.s 96ac <saveStackRef+0x16>
	}
	FPutC (fp, 0);
    970e:	|            move.l 60(sp),40(sp)
    9714:	|            clr.l 36(sp)
    9718:	|            move.l 19c66 <DOSBase>,d0
    971e:	|            movea.l d0,a6
    9720:	|            move.l 40(sp),d1
    9724:	|            move.l 36(sp),d2
    9728:	|            jsr -312(a6)
    972c:	|            move.l d0,32(sp)
	saveStack (vs -> first, fp);
    9730:	|            movea.l 56(sp),a0
    9734:	|            move.l (a0),d0
    9736:	|            move.l 60(sp),-(sp)
    973a:	|            move.l d0,-(sp)
    973c:	|            jsr 9632 <saveStack>
    9742:	|            addq.l #8,sp
	s = AllocVec( sizeof(struct stackLibrary), MEMF_ANY);
    9744:	|            moveq #8,d0
    9746:	|            move.l d0,28(sp)
    974a:	|            clr.l 24(sp)
    974e:	|            move.l 19c5e <SysBase>,d0
    9754:	|            movea.l d0,a6
    9756:	|            move.l 28(sp),d0
    975a:	|            move.l 24(sp),d1
    975e:	|            jsr -684(a6)
    9762:	|            move.l d0,20(sp)
    9766:	|            move.l 20(sp),d0
    976a:	|            move.l d0,48(sp)
	stackLibTotal ++;
    976e:	|            move.l 19cea <stackLibTotal>,d0
    9774:	|            addq.l #1,d0
    9776:	|            move.l d0,19cea <stackLibTotal>
	if (! s) {
    977c:	|            tst.l 48(sp)
    9780:	|        /-- bne.s 9794 <saveStackRef+0xfe>
		KPrintF("saveStackRef: Cannot allocate memory");
    9782:	|        |   pea 1651a <incbin_player_end+0x45a>
    9788:	|        |   jsr 12f14 <KPrintF>
    978e:	|        |   addq.l #4,sp
		return FALSE;
    9790:	|        |   clr.w d0
    9792:	+--------|-- bra.s 97b4 <saveStackRef+0x11e>
	}
	s -> next = stackLib;
    9794:	|        \-> move.l 19cee <stackLib>,d0
    979a:	|            movea.l 48(sp),a0
    979e:	|            move.l d0,4(a0)
	s -> stack = vs;
    97a2:	|            movea.l 48(sp),a0
    97a6:	|            move.l 56(sp),(a0)
	stackLib = s;
    97aa:	|            move.l 48(sp),19cee <stackLib>
	return TRUE;
    97b2:	|            moveq #1,d0
}
    97b4:	\----------> move.l (sp)+,d2
    97b6:	             movea.l (sp)+,a6
    97b8:	             lea 44(sp),sp
    97bc:	             rts

000097be <saveVariable>:

BOOL saveVariable (struct variable * from, BPTR fp)
{
    97be:	          lea -12(sp),sp
    97c2:	          move.l a6,-(sp)
    97c4:	          move.l d2,-(sp)
	FPutC (fp,from -> varType);
    97c6:	          move.l 28(sp),16(sp)
    97cc:	          movea.l 24(sp),a0
    97d0:	          move.l (a0),d0
    97d2:	          move.l d0,12(sp)
    97d6:	          move.l 19c66 <DOSBase>,d0
    97dc:	          movea.l d0,a6
    97de:	          move.l 16(sp),d1
    97e2:	          move.l 12(sp),d2
    97e6:	          jsr -312(a6)
    97ea:	          move.l d0,8(sp)
	switch (from -> varType) {
    97ee:	          movea.l 24(sp),a0
    97f2:	          move.l (a0),d0
    97f4:	          moveq #9,d1
    97f6:	          cmp.l d0,d1
    97f8:	      /-- bcs.w 98a8 <saveVariable+0xea>
    97fc:	      |   add.l d0,d0
    97fe:	      |   movea.l d0,a0
    9800:	      |   adda.l #38924,a0
    9806:	      |   move.w (a0),d0
    9808:	      |   jmp (980c <saveVariable+0x4e>,pc,d0.w)
    980c:	      |   ori.l #1310740,(a0)+
    9812:	      |   ori.b #20,(20,a0,d0.w)
    9818:	      |   .short 0x004c
    981a:	      |   ori.b #126,(a4)
    981e:	      |   ori.w #8303,-(a4)
		case SVT_INT:
		case SVT_FUNC:
		case SVT_BUILT:
		case SVT_FILE:
		case SVT_OBJTYPE:
		put4bytes (from -> varData.intValue, fp);
    9822:	      |   ori.b #40,(a0)+
    9826:	      |   ori.b #47,d4
    982a:	      |   ori.b #0,(a4)+
    982e:	      |   jsr 958 <put4bytes>
    9834:	      |   addq.l #8,sp
		return TRUE;
    9836:	      |   moveq #1,d0
    9838:	/-----|-- bra.w 98e4 <saveVariable+0x126>

		case SVT_STRING:
		writeString (from -> varData.theString, fp);
    983c:	|     |   movea.l 24(sp),a0
    9840:	|     |   move.l 4(a0),d0
    9844:	|     |   move.l 28(sp),-(sp)
    9848:	|     |   move.l d0,-(sp)
    984a:	|     |   jsr bd8 <writeString>
    9850:	|     |   addq.l #8,sp
		return TRUE;
    9852:	|     |   moveq #1,d0
    9854:	+-----|-- bra.w 98e4 <saveVariable+0x126>

		case SVT_STACK:
		return saveStackRef (from -> varData.theStack, fp);
    9858:	|     |   movea.l 24(sp),a0
    985c:	|     |   move.l 4(a0),d0
    9860:	|     |   move.l 28(sp),-(sp)
    9864:	|     |   move.l d0,-(sp)
    9866:	|     |   jsr 9696 <saveStackRef>
    986c:	|     |   addq.l #8,sp
    986e:	+-----|-- bra.s 98e4 <saveVariable+0x126>

		case SVT_COSTUME:
		saveCostume (from -> varData.costumeHandler, fp);
    9870:	|     |   movea.l 24(sp),a0
    9874:	|     |   move.l 4(a0),d0
    9878:	|     |   move.l 28(sp),-(sp)
    987c:	|     |   move.l d0,-(sp)
    987e:	|     |   jsr 7a34 <saveCostume>
    9884:	|     |   addq.l #8,sp
		return FALSE;
    9886:	|     |   clr.w d0
    9888:	+-----|-- bra.s 98e4 <saveVariable+0x126>

		case SVT_ANIM:
		saveAnim (from -> varData.animHandler, fp);
    988a:	|     |   movea.l 24(sp),a0
    988e:	|     |   move.l 4(a0),d0
    9892:	|     |   move.l 28(sp),-(sp)
    9896:	|     |   move.l d0,-(sp)
    9898:	|     |   jsr 796a <saveAnim>
    989e:	|     |   addq.l #8,sp
		return FALSE;
    98a0:	|     |   clr.w d0
    98a2:	+-----|-- bra.s 98e4 <saveVariable+0x126>

		case SVT_NULL:
		return FALSE;
    98a4:	|     |   clr.w d0
    98a6:	+-----|-- bra.s 98e4 <saveVariable+0x126>

		default:
		KPrintF("Can't save variables of this type:",
					(from->varType < SVT_NUM_TYPES) ?
    98a8:	|     \-> movea.l 24(sp),a0
    98ac:	|         move.l (a0),d0
		KPrintF("Can't save variables of this type:",
    98ae:	|         moveq #10,d1
    98b0:	|         cmp.l d0,d1
    98b2:	|  /----- bcs.s 98cc <saveVariable+0x10e>
						typeName[from->varType] :
    98b4:	|  |      movea.l 24(sp),a0
    98b8:	|  |      move.l (a0),d0
		KPrintF("Can't save variables of this type:",
    98ba:	|  |      add.l d0,d0
    98bc:	|  |      movea.l d0,a1
    98be:	|  |      adda.l d0,a1
    98c0:	|  |      lea 18688 <typeName>,a0
    98c6:	|  |      move.l (0,a1,a0.l),d0
    98ca:	|  |  /-- bra.s 98d2 <saveVariable+0x114>
    98cc:	|  \--|-> move.l #91455,d0
    98d2:	|     \-> move.l d0,-(sp)
    98d4:	|         pea 16546 <incbin_player_end+0x486>
    98da:	|         jsr 12f14 <KPrintF>
    98e0:	|         addq.l #8,sp
						"bad ID");						
	}
	return TRUE;
    98e2:	|         moveq #1,d0
    98e4:	\-------> move.l (sp)+,d2
    98e6:	          movea.l (sp)+,a6
    98e8:	          lea 12(sp),sp
    98ec:	          rts

000098ee <cacheSound>:

struct soundThing soundCache[MAX_SAMPLES];

int cacheSound (int f) {
//#pragma unused (f)
	return 0;
    98ee:	moveq #0,d0
}
    98f0:	rts

000098f2 <huntKillFreeSound>:

void huntKillFreeSound (int filenum) {
//#pragma unused(filenum)
}
    98f2:	nop
    98f4:	rts

000098f6 <huntKillSound>:

void huntKillSound (int filenum) {
//#pragma unused(filenum)
}
    98f6:	nop
    98f8:	rts

000098fa <playMOD>:
	defVol = get2bytes (fp);
}

BOOL playMOD (int f, int a, int fromTrack) {
//#pragma unused (f,a,fromTrack)
    return TRUE;
    98fa:	moveq #1,d0
}
    98fc:	rts

000098fe <playSoundList>:

void playSoundList(struct soundList *s) {
}
    98fe:	nop
    9900:	rts

00009902 <saveSounds>:

void saveSounds (BPTR fp) {
    9902:	lea -12(sp),sp
    9906:	move.l a6,-(sp)
    9908:	move.l d2,-(sp)
	FPutC (fp,0);
    990a:	move.l 24(sp),16(sp)
    9910:	clr.l 12(sp)
    9914:	move.l 19c66 <DOSBase>,d0
    991a:	movea.l d0,a6
    991c:	move.l 16(sp),d1
    9920:	move.l 12(sp),d2
    9924:	jsr -312(a6)
    9928:	move.l d0,8(sp)
	put2bytes (defSoundVol, fp);
    992c:	move.l 18146 <defSoundVol>,d0
    9932:	move.l 24(sp),-(sp)
    9936:	move.l d0,-(sp)
    9938:	jsr 8d0 <put2bytes>
    993e:	addq.l #8,sp
	put2bytes (defVol, fp);
    9940:	move.l 18142 <defVol>,d0
    9946:	move.l 24(sp),-(sp)
    994a:	move.l d0,-(sp)
    994c:	jsr 8d0 <put2bytes>
    9952:	addq.l #8,sp
}
    9954:	nop
    9956:	move.l (sp)+,d2
    9958:	movea.l (sp)+,a6
    995a:	lea 12(sp),sp
    995e:	rts

00009960 <setDefaultMusicVolume>:

void setDefaultMusicVolume (int v) {
	defVol = v;
    9960:	move.l 4(sp),18142 <defVol>
}
    9968:	nop
    996a:	rts

0000996c <setDefaultSoundVolume>:

void setDefaultSoundVolume (int v) {
	defSoundVol = v;
    996c:	move.l 4(sp),18146 <defSoundVol>
}
    9974:	nop
    9976:	rts

00009978 <setSoundLoop>:

void setSoundLoop (int a, int s, int e) {
//#pragma unused (a,s,e)
}
    9978:	nop
    997a:	rts

0000997c <setMusicVolume>:

void setMusicVolume (int a, int v) {
//#pragma unused (a,v)
}
    997c:	nop
    997e:	rts

00009980 <setSoundVolume>:

void setSoundVolume (int a, int v) {
//#pragma unused (a,v)
}
    9980:	nop
    9982:	rts

00009984 <startSound>:

BOOL startSound (int f, BOOL loopy) {	
    9984:	subq.l #4,sp
    9986:	move.l 12(sp),d0
    998a:	move.w d0,d0
    998c:	move.w d0,2(sp)
//#pragma unused (f,loopy)
	return TRUE;
    9990:	moveq #1,d0
}
    9992:	addq.l #4,sp
    9994:	rts

00009996 <stopMOD>:

void stopMOD (int i) {
//#pragma unused(i)
    9996:	nop
    9998:	rts

0000999a <blankScreen>:
int viewportWidth = 320;
int viewportOffsetX = 0, viewportOffsetY = 0;
unsigned int snapshotTextureName = 0;

void blankScreen(int x1, int y1, int x2, int y2) {
	CstBlankScreen(x2, y2);
    999a:	move.l 16(sp),-(sp)
    999e:	move.l 16(sp),-(sp)
    99a2:	jsr df4 <CstBlankScreen>
    99a8:	addq.l #8,sp
}
    99aa:	nop
    99ac:	rts

000099ae <darkScreen>:

void darkScreen () {
	KPrintF("darkScreen: Amiga: Graphics Display not implemented yet."); //Todo: Amigize this
    99ae:	pea 16569 <incbin_player_end+0x4a9>
    99b4:	jsr 12f14 <KPrintF>
    99ba:	addq.l #4,sp
}
    99bc:	nop
    99be:	rts

000099c0 <drawHorizontalLine>:
	//Amiga todo: Maybe some parallaxstuff here?
	//}
}

void drawHorizontalLine (unsigned int x1, unsigned int y, unsigned int x2) {
	drawLine (x1, y, x2, y);
    99c0:	movea.l 8(sp),a1
    99c4:	movea.l 12(sp),a0
    99c8:	move.l 8(sp),d1
    99cc:	move.l 4(sp),d0
    99d0:	move.l a1,-(sp)
    99d2:	move.l a0,-(sp)
    99d4:	move.l d1,-(sp)
    99d6:	move.l d0,-(sp)
    99d8:	jsr 17fc <drawLine>
    99de:	lea 16(sp),sp
}
    99e2:	nop
    99e4:	rts

000099e6 <drawVerticalLine>:

void drawVerticalLine (unsigned int x, unsigned int y1, unsigned int y2) {
	drawLine (x, y1, x, y2);
    99e6:	movea.l 12(sp),a1
    99ea:	movea.l 4(sp),a0
    99ee:	move.l 8(sp),d1
    99f2:	move.l 4(sp),d0
    99f6:	move.l a1,-(sp)
    99f8:	move.l a0,-(sp)
    99fa:	move.l d1,-(sp)
    99fc:	move.l d0,-(sp)
    99fe:	jsr 17fc <drawLine>
    9a04:	lea 16(sp),sp
}
    9a08:	nop
    9a0a:	rts

00009a0c <hardScroll>:

void hardScroll (int distance) {
   	KPrintF("Amiga: Function not implemented."); //Todo: Amigize this
    9a0c:	pea 165a2 <incbin_player_end+0x4e2>
    9a12:	jsr 12f14 <KPrintF>
    9a18:	addq.l #4,sp
}
    9a1a:	nop
    9a1c:	rts

00009a1e <killBackDrop>:


void killBackDrop () {
	CstFreeBuffer();
    9a1e:	jsr 178c <CstFreeBuffer>
	deleteTextures (1, &backdropTextureName);
    9a24:	pea 19d02 <backdropTextureName>
    9a2a:	pea 1 <_start+0x1>
    9a2e:	jsr 197e <deleteTextures>
    9a34:	addq.l #8,sp
	backdropTextureName = 0;
    9a36:	clr.l 19d02 <backdropTextureName>
	backdropExists = FALSE;
    9a3c:	clr.w 19d06 <backdropExists>
}
    9a42:	nop
    9a44:	rts

00009a46 <killParallax>:

void killParallax () {
    9a46:	          lea -12(sp),sp
    9a4a:	          move.l a6,-(sp)
	while (parallaxStuff) {
    9a4c:	   /----- bra.s 9ab8 <killParallax+0x72>

		struct parallaxLayer * k = parallaxStuff;
    9a4e:	/--|----> move.l 19d08 <parallaxStuff>,12(sp)
		parallaxStuff = k->next;
    9a56:	|  |      movea.l 12(sp),a0
    9a5a:	|  |      move.l 42(a0),d0
    9a5e:	|  |      move.l d0,19d08 <parallaxStuff>

		// Now kill the image
		deleteTextures (1, &k->textureName);
    9a64:	|  |      move.l 12(sp),d0
    9a68:	|  |      addq.l #4,d0
    9a6a:	|  |      move.l d0,-(sp)
    9a6c:	|  |      pea 1 <_start+0x1>
    9a70:	|  |      jsr 197e <deleteTextures>
    9a76:	|  |      addq.l #8,sp
		if( k->texture) FreeVec(k->texture);
    9a78:	|  |      movea.l 12(sp),a0
    9a7c:	|  |      move.l (a0),d0
    9a7e:	|  |  /-- beq.s 9a98 <killParallax+0x52>
    9a80:	|  |  |   movea.l 12(sp),a0
    9a84:	|  |  |   move.l (a0),8(sp)
    9a88:	|  |  |   move.l 19c5e <SysBase>,d0
    9a8e:	|  |  |   movea.l d0,a6
    9a90:	|  |  |   movea.l 8(sp),a1
    9a94:	|  |  |   jsr -690(a6)
		if( k) FreeVec(k);
    9a98:	|  |  \-> tst.l 12(sp)
    9a9c:	|  |  /-- beq.s 9ab4 <killParallax+0x6e>
    9a9e:	|  |  |   move.l 12(sp),4(sp)
    9aa4:	|  |  |   move.l 19c5e <SysBase>,d0
    9aaa:	|  |  |   movea.l d0,a6
    9aac:	|  |  |   movea.l 4(sp),a1
    9ab0:	|  |  |   jsr -690(a6)
		k = NULL;
    9ab4:	|  |  \-> clr.l 12(sp)
	while (parallaxStuff) {
    9ab8:	|  \----> move.l 19d08 <parallaxStuff>,d0
    9abe:	\-------- bne.s 9a4e <killParallax+0x8>
	}
}
    9ac0:	          nop
    9ac2:	          nop
    9ac4:	          movea.l (sp)+,a6
    9ac6:	          lea 12(sp),sp
    9aca:	          rts

00009acc <loadBackDrop>:

void loadBackDrop (int fileNum, int x, int y) {
	if (! openFileFromNum (fileNum)) {
    9acc:	       move.l 4(sp),-(sp)
    9ad0:	       jsr 48da <openFileFromNum>
    9ad6:	       addq.l #4,sp
    9ad8:	       tst.l d0
    9ada:	   /-- bne.s 9aec <loadBackDrop+0x20>
		KPrintF("Can't load overlay image");
    9adc:	   |   pea 165c3 <incbin_player_end+0x503>
    9ae2:	   |   jsr 12f14 <KPrintF>
    9ae8:	   |   addq.l #4,sp
		return;
    9aea:	/--|-- bra.s 9b0c <loadBackDrop+0x40>
	}
	CstLoadBackdrop( bigDataFile, x, y);
    9aec:	|  \-> move.l 19c46 <bigDataFile>,d0
    9af2:	|      move.l 12(sp),-(sp)
    9af6:	|      move.l 12(sp),-(sp)
    9afa:	|      move.l d0,-(sp)
    9afc:	|      jsr 11b4 <CstLoadBackdrop>
    9b02:	|      lea 12(sp),sp
	finishAccess ();
    9b06:	|      jsr 47d2 <finishAccess>
	
}
    9b0c:	\----> rts

00009b0e <loadParallax>:
	
	backdropExists = TRUE;
	return TRUE;
}

BOOL loadParallax (unsigned short v, unsigned short fracX, unsigned short fracY) {
    9b0e:	subq.l #8,sp
    9b10:	movea.l 12(sp),a0
    9b14:	move.l 16(sp),d1
    9b18:	move.l 20(sp),d0
    9b1c:	movea.w a0,a0
    9b1e:	move.w a0,6(sp)
    9b22:	move.w d1,d1
    9b24:	move.w d1,4(sp)
    9b28:	move.w d0,d0
    9b2a:	move.w d0,2(sp)
	KPrintF("loadParallax: Not implemented yet."); //Amiga Todo: Amigize this	
    9b2e:	pea 16612 <line.c.05397aaf+0xc>
    9b34:	jsr 12f14 <KPrintF>
    9b3a:	addq.l #4,sp

}
    9b3c:	nop
    9b3e:	addq.l #8,sp
    9b40:	rts

00009b42 <mixBackDrop>:

void mixBackDrop (int fileNum, int x, int y) {
	KPrintF("mixBackdrop: Amiga Graphics Display not implemented yet."); //Todo: Amigize this	
    9b42:	pea 16635 <line.c.05397aaf+0x2f>
    9b48:	jsr 12f14 <KPrintF>
    9b4e:	addq.l #4,sp
}
    9b50:	nop
    9b52:	rts

00009b54 <nosnapshot>:

void nosnapshot () {
	deleteTextures (1, &snapshotTextureName);
    9b54:	pea 19d0c <snapshotTextureName>
    9b5a:	pea 1 <_start+0x1>
    9b5e:	jsr 197e <deleteTextures>
    9b64:	addq.l #8,sp
	snapshotTextureName = 0;
    9b66:	clr.l 19d0c <snapshotTextureName>
}
    9b6c:	nop
    9b6e:	rts

00009b70 <reserveBackdrop>:

BOOL reserveBackdrop () {
    9b70:	    lea -16(sp),sp
    9b74:	    move.l a6,-(sp)
	if(backdropTexture) FreeVec(backdropTexture);
    9b76:	    move.l 19cf6 <backdropTexture>,d0
    9b7c:	/-- beq.s 9b96 <reserveBackdrop+0x26>
    9b7e:	|   move.l 19cf6 <backdropTexture>,16(sp)
    9b86:	|   move.l 19c5e <SysBase>,d0
    9b8c:	|   movea.l d0,a6
    9b8e:	|   movea.l 16(sp),a1
    9b92:	|   jsr -690(a6)
	backdropTexture = AllocVec( sceneWidth*sceneHeight*4, MEMF_ANY );
    9b96:	\-> move.l 19cfa <sceneWidth>,d0
    9b9c:	    move.l 19cfe <sceneHeight>,d1
    9ba2:	    move.l d1,-(sp)
    9ba4:	    move.l d0,-(sp)
    9ba6:	    jsr 13a0a <__mulsi3>
    9bac:	    addq.l #8,sp
    9bae:	    add.l d0,d0
    9bb0:	    add.l d0,d0
    9bb2:	    move.l d0,12(sp)
    9bb6:	    clr.l 8(sp)
    9bba:	    move.l 19c5e <SysBase>,d0
    9bc0:	    movea.l d0,a6
    9bc2:	    move.l 12(sp),d0
    9bc6:	    move.l 8(sp),d1
    9bca:	    jsr -684(a6)
    9bce:	    move.l d0,4(sp)
    9bd2:	    move.l 4(sp),d0
    9bd6:	    move.l d0,19cf6 <backdropTexture>

	return CstReserveBackdrop(sceneWidth, sceneHeight);
    9bdc:	    move.l 19cfe <sceneHeight>,d0
    9be2:	    move.l d0,d1
    9be4:	    move.l 19cfa <sceneWidth>,d0
    9bea:	    move.l d1,-(sp)
    9bec:	    move.l d0,-(sp)
    9bee:	    jsr 1576 <CstReserveBackdrop>
    9bf4:	    addq.l #8,sp
}
    9bf6:	    movea.l (sp)+,a6
    9bf8:	    lea 16(sp),sp
    9bfc:	    rts

00009bfe <resizeBackdrop>:

BOOL resizeBackdrop (int x, int y) {
    killBackDrop ();
    9bfe:	jsr 9a1e <killBackDrop>
	killParallax ();
    9c04:	jsr 9a46 <killParallax>
	killZBuffer ();
    9c0a:	jsr 1fee <killZBuffer>
	sceneWidth = x;
    9c10:	move.l 4(sp),d0
    9c14:	move.l d0,19cfa <sceneWidth>
	sceneHeight = y;	
    9c1a:	move.l 8(sp),d0
    9c1e:	move.l d0,19cfe <sceneHeight>
	return reserveBackdrop();
    9c24:	jsr 9b70 <reserveBackdrop>
}
    9c2a:	rts

00009c2c <restoreSnapshot>:

BOOL restoreSnapshot (BPTR fp) {
    9c2c:	subq.l #8,sp
	unsigned int picWidth = get2bytes (fp);
    9c2e:	move.l 12(sp),-(sp)
    9c32:	jsr 6bc <get2bytes>
    9c38:	addq.l #4,sp
    9c3a:	move.l d0,4(sp)
	unsigned int picHeight = get2bytes (fp);
    9c3e:	move.l 12(sp),-(sp)
    9c42:	jsr 6bc <get2bytes>
    9c48:	addq.l #4,sp
    9c4a:	move.l d0,(sp)

	//Todo: Amigize this?

	return TRUE;
    9c4c:	moveq #1,d0
}
    9c4e:	addq.l #8,sp
    9c50:	rts

00009c52 <saveParallaxRecursive>:

void saveParallaxRecursive (struct parallaxLayer * me, BPTR fp) {
    9c52:	   /-> lea -12(sp),sp
    9c56:	   |   move.l a6,-(sp)
    9c58:	   |   move.l d2,-(sp)
	if (me) {
    9c5a:	   |   tst.l 24(sp)
    9c5e:	/--|-- beq.w 9cf4 <saveParallaxRecursive+0xa2>
		saveParallaxRecursive (me -> next, fp);
    9c62:	|  |   movea.l 24(sp),a0
    9c66:	|  |   move.l 42(a0),d0
    9c6a:	|  |   move.l 28(sp),-(sp)
    9c6e:	|  |   move.l d0,-(sp)
    9c70:	|  \-- jsr 9c52 <saveParallaxRecursive>(pc)
    9c74:	|      addq.l #8,sp
		FPutC (fp, 1);
    9c76:	|      move.l 28(sp),16(sp)
    9c7c:	|      moveq #1,d0
    9c7e:	|      move.l d0,12(sp)
    9c82:	|      move.l 19c66 <DOSBase>,d0
    9c88:	|      movea.l d0,a6
    9c8a:	|      move.l 16(sp),d1
    9c8e:	|      move.l 12(sp),d2
    9c92:	|      jsr -312(a6)
    9c96:	|      move.l d0,8(sp)
		put2bytes (me->fileNum, fp);
    9c9a:	|      movea.l 24(sp),a0
    9c9e:	|      move.w 28(a0),d0
    9ca2:	|      move.w d0,d0
    9ca4:	|      andi.l #65535,d0
    9caa:	|      move.l 28(sp),-(sp)
    9cae:	|      move.l d0,-(sp)
    9cb0:	|      jsr 8d0 <put2bytes>
    9cb6:	|      addq.l #8,sp
		put2bytes (me ->fractionX, fp);
    9cb8:	|      movea.l 24(sp),a0
    9cbc:	|      move.w 30(a0),d0
    9cc0:	|      move.w d0,d0
    9cc2:	|      andi.l #65535,d0
    9cc8:	|      move.l 28(sp),-(sp)
    9ccc:	|      move.l d0,-(sp)
    9cce:	|      jsr 8d0 <put2bytes>
    9cd4:	|      addq.l #8,sp
		put2bytes (me->fractionY, fp);
    9cd6:	|      movea.l 24(sp),a0
    9cda:	|      move.w 32(a0),d0
    9cde:	|      move.w d0,d0
    9ce0:	|      andi.l #65535,d0
    9ce6:	|      move.l 28(sp),-(sp)
    9cea:	|      move.l d0,-(sp)
    9cec:	|      jsr 8d0 <put2bytes>
    9cf2:	|      addq.l #8,sp
	}
}
    9cf4:	\----> nop
    9cf6:	       move.l (sp)+,d2
    9cf8:	       movea.l (sp)+,a6
    9cfa:	       lea 12(sp),sp
    9cfe:	       rts

00009d00 <snapshot>:

BOOL snapshot () {

	KPrintF("snapshot: Not yet implemented on Amiga"); //Todo
    9d00:	pea 1666e <line.c.05397aaf+0x68>
    9d06:	jsr 12f14 <KPrintF>
    9d0c:	addq.l #4,sp
	return TRUE;
    9d0e:	moveq #1,d0
    9d10:	rts

00009d12 <findObjectType>:
#include "moreio.h"
#include "support/gcc8_c_support.h"

struct objectType * allObjectTypes = NULL;

struct objectType * findObjectType (int i) {
    9d12:	             subq.l #4,sp
	struct objectType * huntType = allObjectTypes;
    9d14:	             move.l 19d10 <allObjectTypes>,(sp)

	while (huntType) {
    9d1a:	      /----- bra.s 9d32 <findObjectType+0x20>
		if (huntType -> objectNum == i) return huntType;
    9d1c:	   /--|----> movea.l (sp),a0
    9d1e:	   |  |      move.l 4(a0),d0
    9d22:	   |  |      cmp.l 8(sp),d0
    9d26:	   |  |  /-- bne.s 9d2c <findObjectType+0x1a>
    9d28:	   |  |  |   move.l (sp),d0
    9d2a:	/--|--|--|-- bra.s 9d42 <findObjectType+0x30>
		huntType = huntType -> next;
    9d2c:	|  |  |  \-> movea.l (sp),a0
    9d2e:	|  |  |      move.l 8(a0),(sp)
	while (huntType) {
    9d32:	|  |  \----> tst.l (sp)
    9d34:	|  \-------- bne.s 9d1c <findObjectType+0xa>
	}

	return loadObjectType (i);
    9d36:	|            move.l 8(sp),-(sp)
    9d3a:	|            jsr 9e02 <loadObjectType>
    9d40:	|            addq.l #4,sp
}
    9d42:	\----------> addq.l #4,sp
    9d44:	             rts

00009d46 <getCombinationFunction>:

int getCombinationFunction (int withThis, int thisObject) {
    9d46:	             lea -12(sp),sp
	int i, num = 0;
    9d4a:	             clr.l 4(sp)
	struct objectType * obj = findObjectType (thisObject);
    9d4e:	             move.l 20(sp),-(sp)
    9d52:	             jsr 9d12 <findObjectType>
    9d58:	             addq.l #4,sp
    9d5a:	             move.l d0,(sp)

	for (i = 0; i < obj -> numCom; i ++) {
    9d5c:	             clr.l 8(sp)
    9d60:	   /-------- bra.s 9d96 <getCombinationFunction+0x50>
		if (obj -> allCombis[i].withObj == withThis)
    9d62:	/--|-------> movea.l (sp),a0
    9d64:	|  |         move.l 38(a0),d1
    9d68:	|  |         move.l 8(sp),d0
    9d6c:	|  |         lsl.l #3,d0
    9d6e:	|  |         movea.l d1,a0
    9d70:	|  |         adda.l d0,a0
    9d72:	|  |         move.l (a0),d0
    9d74:	|  |         cmp.l 16(sp),d0
    9d78:	|  |  /----- bne.s 9d92 <getCombinationFunction+0x4c>
		{
			num = obj -> allCombis[i].funcNum;
    9d7a:	|  |  |      movea.l (sp),a0
    9d7c:	|  |  |      move.l 38(a0),d1
    9d80:	|  |  |      move.l 8(sp),d0
    9d84:	|  |  |      lsl.l #3,d0
    9d86:	|  |  |      movea.l d1,a0
    9d88:	|  |  |      adda.l d0,a0
    9d8a:	|  |  |      move.l 4(a0),4(sp)
			break;
    9d90:	|  |  |  /-- bra.s 9da2 <getCombinationFunction+0x5c>
	for (i = 0; i < obj -> numCom; i ++) {
    9d92:	|  |  \--|-> addq.l #1,8(sp)
    9d96:	|  \-----|-> movea.l (sp),a0
    9d98:	|        |   move.l 16(a0),d0
    9d9c:	|        |   cmp.l 8(sp),d0
    9da0:	\--------|-- bgt.s 9d62 <getCombinationFunction+0x1c>
		}
	}

	return num;
    9da2:	         \-> move.l 4(sp),d0
}
    9da6:	             lea 12(sp),sp
    9daa:	             rts

00009dac <initObjectTypes>:

BOOL initObjectTypes () {
	return TRUE;
    9dac:	moveq #1,d0
}
    9dae:	rts

00009db0 <loadObjectRef>:

struct objectType * loadObjectRef (BPTR fp) {
    9db0:	subq.l #8,sp
    9db2:	move.l a6,-(sp)
	struct objectType * r = loadObjectType (get2bytes (fp));
    9db4:	move.l 16(sp),-(sp)
    9db8:	jsr 6bc <get2bytes>
    9dbe:	addq.l #4,sp
    9dc0:	move.l d0,-(sp)
    9dc2:	jsr 9e02 <loadObjectType>
    9dc8:	addq.l #4,sp
    9dca:	move.l d0,8(sp)
	FreeVec(r -> screenName);
    9dce:	movea.l 8(sp),a0
    9dd2:	move.l (a0),4(sp)
    9dd6:	move.l 19c5e <SysBase>,d0
    9ddc:	movea.l d0,a6
    9dde:	movea.l 4(sp),a1
    9de2:	jsr -690(a6)
	r -> screenName = readString (fp);
    9de6:	move.l 16(sp),-(sp)
    9dea:	jsr b02 <readString>
    9df0:	addq.l #4,sp
    9df2:	movea.l 8(sp),a0
    9df6:	move.l d0,(a0)
	return r;
    9df8:	move.l 8(sp),d0
}
    9dfc:	movea.l (sp)+,a6
    9dfe:	addq.l #8,sp
    9e00:	rts

00009e02 <loadObjectType>:

struct objectType * loadObjectType (int i) {
    9e02:	          lea -84(sp),sp
    9e06:	          move.l a6,-(sp)
    9e08:	          move.l a2,-(sp)
    int a, nameNum;
    struct objectType * newType = AllocVec(sizeof(struct objectType), MEMF_ANY);
    9e0a:	          moveq #42,d0
    9e0c:	          move.l d0,84(sp)
    9e10:	          clr.l 80(sp)
    9e14:	          move.l 19c5e <SysBase>,d0
    9e1a:	          movea.l d0,a6
    9e1c:	          move.l 84(sp),d0
    9e20:	          move.l 80(sp),d1
    9e24:	          jsr -684(a6)
    9e28:	          move.l d0,76(sp)
    9e2c:	          move.l 76(sp),d0
    9e30:	          move.l d0,72(sp)

    if (newType) {
    9e34:	/-------- beq.w a0ae <loadObjectType+0x2ac>
        if (openObjectSlice(i)) {
    9e38:	|         move.l 96(sp),-(sp)
    9e3c:	|         jsr 49a2 <openObjectSlice>
    9e42:	|         addq.l #4,sp
    9e44:	|         tst.w d0
    9e46:	+-------- beq.w a0ae <loadObjectType+0x2ac>
            nameNum = get2bytes(bigDataFile);
    9e4a:	|         move.l 19c46 <bigDataFile>,d0
    9e50:	|         move.l d0,-(sp)
    9e52:	|         jsr 6bc <get2bytes>
    9e58:	|         addq.l #4,sp
    9e5a:	|         move.l d0,68(sp)
            newType->r = (BYTE) FGetC(bigDataFile);
    9e5e:	|         move.l 19c46 <bigDataFile>,64(sp)
    9e66:	|         move.l 19c66 <DOSBase>,d0
    9e6c:	|         movea.l d0,a6
    9e6e:	|         move.l 64(sp),d1
    9e72:	|         jsr -306(a6)
    9e76:	|         move.l d0,60(sp)
    9e7a:	|         move.l 60(sp),d0
    9e7e:	|         move.l d0,d0
    9e80:	|         movea.l 72(sp),a0
    9e84:	|         move.b d0,12(a0)
            newType->g = (BYTE) FGetC(bigDataFile);
    9e88:	|         move.l 19c46 <bigDataFile>,56(sp)
    9e90:	|         move.l 19c66 <DOSBase>,d0
    9e96:	|         movea.l d0,a6
    9e98:	|         move.l 56(sp),d1
    9e9c:	|         jsr -306(a6)
    9ea0:	|         move.l d0,52(sp)
    9ea4:	|         move.l 52(sp),d0
    9ea8:	|         move.l d0,d0
    9eaa:	|         movea.l 72(sp),a0
    9eae:	|         move.b d0,13(a0)
            newType->b = (BYTE) FGetC(bigDataFile);
    9eb2:	|         move.l 19c46 <bigDataFile>,48(sp)
    9eba:	|         move.l 19c66 <DOSBase>,d0
    9ec0:	|         movea.l d0,a6
    9ec2:	|         move.l 48(sp),d1
    9ec6:	|         jsr -306(a6)
    9eca:	|         move.l d0,44(sp)
    9ece:	|         move.l 44(sp),d0
    9ed2:	|         move.l d0,d0
    9ed4:	|         movea.l 72(sp),a0
    9ed8:	|         move.b d0,14(a0)
            newType->speechGap = FGetC(bigDataFile);
    9edc:	|         move.l 19c46 <bigDataFile>,40(sp)
    9ee4:	|         move.l 19c66 <DOSBase>,d0
    9eea:	|         movea.l d0,a6
    9eec:	|         move.l 40(sp),d1
    9ef0:	|         jsr -306(a6)
    9ef4:	|         move.l d0,36(sp)
    9ef8:	|         move.l 36(sp),d0
    9efc:	|         movea.l 72(sp),a0
    9f00:	|         move.l d0,20(a0)
            newType->walkSpeed = FGetC(bigDataFile);
    9f04:	|         move.l 19c46 <bigDataFile>,32(sp)
    9f0c:	|         move.l 19c66 <DOSBase>,d0
    9f12:	|         movea.l d0,a6
    9f14:	|         move.l 32(sp),d1
    9f18:	|         jsr -306(a6)
    9f1c:	|         move.l d0,28(sp)
    9f20:	|         move.l 28(sp),d0
    9f24:	|         movea.l 72(sp),a0
    9f28:	|         move.l d0,24(a0)
            newType->wrapSpeech = get4bytes(bigDataFile);
    9f2c:	|         move.l 19c46 <bigDataFile>,d0
    9f32:	|         move.l d0,-(sp)
    9f34:	|         jsr 718 <get4bytes>
    9f3a:	|         addq.l #4,sp
    9f3c:	|         movea.l 72(sp),a0
    9f40:	|         move.l d0,28(a0)
            newType->spinSpeed = get2bytes(bigDataFile);
    9f44:	|         move.l 19c46 <bigDataFile>,d0
    9f4a:	|         move.l d0,-(sp)
    9f4c:	|         jsr 6bc <get2bytes>
    9f52:	|         addq.l #4,sp
    9f54:	|         movea.l 72(sp),a0
    9f58:	|         move.l d0,32(a0)

            FGetC(bigDataFile);
    9f5c:	|         move.l 19c46 <bigDataFile>,24(sp)
    9f64:	|         move.l 19c66 <DOSBase>,d0
    9f6a:	|         movea.l d0,a6
    9f6c:	|         move.l 24(sp),d1
    9f70:	|         jsr -306(a6)
    9f74:	|         move.l d0,20(sp)
            getFloat(bigDataFile);
    9f78:	|         move.l 19c46 <bigDataFile>,d0
    9f7e:	|         move.l d0,-(sp)
    9f80:	|         jsr 7d8 <getFloat>
    9f86:	|         addq.l #4,sp
            getFloat(bigDataFile);
    9f88:	|         move.l 19c46 <bigDataFile>,d0
    9f8e:	|         move.l d0,-(sp)
    9f90:	|         jsr 7d8 <getFloat>
    9f96:	|         addq.l #4,sp

            newType->flags = get2bytes(bigDataFile);
    9f98:	|         move.l 19c46 <bigDataFile>,d0
    9f9e:	|         move.l d0,-(sp)
    9fa0:	|         jsr 6bc <get2bytes>
    9fa6:	|         addq.l #4,sp
    9fa8:	|         move.l d0,d0
    9faa:	|         movea.l 72(sp),a0
    9fae:	|         move.w d0,36(a0)

            newType->numCom = get2bytes(bigDataFile);
    9fb2:	|         move.l 19c46 <bigDataFile>,d0
    9fb8:	|         move.l d0,-(sp)
    9fba:	|         jsr 6bc <get2bytes>
    9fc0:	|         addq.l #4,sp
    9fc2:	|         movea.l 72(sp),a0
    9fc6:	|         move.l d0,16(a0)
            newType->allCombis = (newType->numCom) ? AllocVec(sizeof(struct combination) * newType->numCom, MEMF_ANY) : NULL;
    9fca:	|         movea.l 72(sp),a0
    9fce:	|         move.l 16(a0),d0
    9fd2:	|  /----- beq.s a004 <loadObjectType+0x202>
    9fd4:	|  |      movea.l 72(sp),a0
    9fd8:	|  |      move.l 16(a0),d0
    9fdc:	|  |      lsl.l #3,d0
    9fde:	|  |      move.l d0,16(sp)
    9fe2:	|  |      clr.l 12(sp)
    9fe6:	|  |      move.l 19c5e <SysBase>,d0
    9fec:	|  |      movea.l d0,a6
    9fee:	|  |      move.l 16(sp),d0
    9ff2:	|  |      move.l 12(sp),d1
    9ff6:	|  |      jsr -684(a6)
    9ffa:	|  |      move.l d0,8(sp)
    9ffe:	|  |      move.l 8(sp),d0
    a002:	|  |  /-- bra.s a006 <loadObjectType+0x204>
    a004:	|  \--|-> moveq #0,d0
    a006:	|     \-> movea.l 72(sp),a0
    a00a:	|         move.l d0,38(a0)

            for (a = 0; a < newType->numCom; a++) {
    a00e:	|         clr.l 88(sp)
    a012:	|     /-- bra.s a062 <loadObjectType+0x260>
                newType->allCombis[a].withObj = get2bytes(bigDataFile);
    a014:	|  /--|-> move.l 19c46 <bigDataFile>,d1
    a01a:	|  |  |   movea.l 72(sp),a0
    a01e:	|  |  |   movea.l 38(a0),a0
    a022:	|  |  |   move.l 88(sp),d0
    a026:	|  |  |   lsl.l #3,d0
    a028:	|  |  |   lea (0,a0,d0.l),a2
    a02c:	|  |  |   move.l d1,-(sp)
    a02e:	|  |  |   jsr 6bc <get2bytes>
    a034:	|  |  |   addq.l #4,sp
    a036:	|  |  |   move.l d0,(a2)
                newType->allCombis[a].funcNum = get2bytes(bigDataFile);
    a038:	|  |  |   move.l 19c46 <bigDataFile>,d1
    a03e:	|  |  |   movea.l 72(sp),a0
    a042:	|  |  |   movea.l 38(a0),a0
    a046:	|  |  |   move.l 88(sp),d0
    a04a:	|  |  |   lsl.l #3,d0
    a04c:	|  |  |   lea (0,a0,d0.l),a2
    a050:	|  |  |   move.l d1,-(sp)
    a052:	|  |  |   jsr 6bc <get2bytes>
    a058:	|  |  |   addq.l #4,sp
    a05a:	|  |  |   move.l d0,4(a2)
            for (a = 0; a < newType->numCom; a++) {
    a05e:	|  |  |   addq.l #1,88(sp)
    a062:	|  |  \-> movea.l 72(sp),a0
    a066:	|  |      move.l 16(a0),d0
    a06a:	|  |      cmp.l 88(sp),d0
    a06e:	|  \----- bgt.s a014 <loadObjectType+0x212>
            }
            finishAccess();
    a070:	|         jsr 47d2 <finishAccess>
            newType->screenName = getNumberedString(nameNum);
    a076:	|         move.l 68(sp),-(sp)
    a07a:	|         jsr 47dc <getNumberedString>
    a080:	|         addq.l #4,sp
    a082:	|         movea.l 72(sp),a0
    a086:	|         move.l d0,(a0)
            newType->objectNum = i;
    a088:	|         movea.l 72(sp),a0
    a08c:	|         move.l 96(sp),4(a0)
            newType->next = allObjectTypes;
    a092:	|         move.l 19d10 <allObjectTypes>,d0
    a098:	|         movea.l 72(sp),a0
    a09c:	|         move.l d0,8(a0)
            allObjectTypes = newType;
    a0a0:	|         move.l 72(sp),19d10 <allObjectTypes>
            return newType;
    a0a8:	|         move.l 72(sp),d0
    a0ac:	|     /-- bra.s a0b0 <loadObjectType+0x2ae>
        }
    }
    return NULL;
    a0ae:	\-----|-> moveq #0,d0
}
    a0b0:	      \-> movea.l (sp)+,a2
    a0b2:	          movea.l (sp)+,a6
    a0b4:	          lea 84(sp),sp
    a0b8:	          rts

0000a0ba <removeObjectType>:


void removeObjectType (struct objectType * oT) {
    a0ba:	             lea -16(sp),sp
    a0be:	             move.l a6,-(sp)
	struct objectType * * huntRegion = &allObjectTypes;
    a0c0:	             move.l #105744,16(sp)

	while (* huntRegion) {
    a0c8:	   /-------- bra.s a13c <removeObjectType+0x82>
		if ((* huntRegion) == oT) {
    a0ca:	/--|-------> movea.l 16(sp),a0
    a0ce:	|  |         move.l (a0),d0
    a0d0:	|  |         cmp.l 24(sp),d0
    a0d4:	|  |  /----- bne.s a12e <removeObjectType+0x74>
//			FILE * debuggy2 = fopen ("debug.txt", "at");
//			fprintf (debuggy2, "DELETING OBJECT TYPE: %p %s\n", oT, oT -> screenName);
//			fclose (debuggy2);

			* huntRegion = oT -> next;
    a0d6:	|  |  |      movea.l 24(sp),a0
    a0da:	|  |  |      move.l 8(a0),d0
    a0de:	|  |  |      movea.l 16(sp),a0
    a0e2:	|  |  |      move.l d0,(a0)
			FreeVec(oT -> allCombis);
    a0e4:	|  |  |      movea.l 24(sp),a0
    a0e8:	|  |  |      move.l 38(a0),12(sp)
    a0ee:	|  |  |      move.l 19c5e <SysBase>,d0
    a0f4:	|  |  |      movea.l d0,a6
    a0f6:	|  |  |      movea.l 12(sp),a1
    a0fa:	|  |  |      jsr -690(a6)
			FreeVec(oT -> screenName);
    a0fe:	|  |  |      movea.l 24(sp),a0
    a102:	|  |  |      move.l (a0),8(sp)
    a106:	|  |  |      move.l 19c5e <SysBase>,d0
    a10c:	|  |  |      movea.l d0,a6
    a10e:	|  |  |      movea.l 8(sp),a1
    a112:	|  |  |      jsr -690(a6)
			FreeVec(oT);
    a116:	|  |  |      move.l 24(sp),4(sp)
    a11c:	|  |  |      move.l 19c5e <SysBase>,d0
    a122:	|  |  |      movea.l d0,a6
    a124:	|  |  |      movea.l 4(sp),a1
    a128:	|  |  |      jsr -690(a6)
			return;
    a12c:	|  |  |  /-- bra.s a152 <removeObjectType+0x98>
		} else {
			huntRegion = & ((* huntRegion) -> next);
    a12e:	|  |  \--|-> movea.l 16(sp),a0
    a132:	|  |     |   move.l (a0),d0
    a134:	|  |     |   move.l d0,d1
    a136:	|  |     |   addq.l #8,d1
    a138:	|  |     |   move.l d1,16(sp)
	while (* huntRegion) {
    a13c:	|  \-----|-> movea.l 16(sp),a0
    a140:	|        |   move.l (a0),d0
    a142:	\--------|-- bne.s a0ca <removeObjectType+0x10>
		}
	}
	KPrintF("Can't delete object type: bad pointer");
    a144:	         |   pea 16695 <line.c.05397aaf+0x8f>
    a14a:	         |   jsr 12f14 <KPrintF>
    a150:	         |   addq.l #4,sp
}
    a152:	         \-> movea.l (sp)+,a6
    a154:	             lea 16(sp),sp
    a158:	             rts

0000a15a <saveObjectRef>:

void saveObjectRef (struct objectType * r, BPTR fp) {
	put2bytes (r -> objectNum, fp);
    a15a:	movea.l 4(sp),a0
    a15e:	move.l 4(a0),d0
    a162:	move.l 8(sp),-(sp)
    a166:	move.l d0,-(sp)
    a168:	jsr 8d0 <put2bytes>
    a16e:	addq.l #8,sp
	writeString (r -> screenName, fp);
    a170:	movea.l 4(sp),a0
    a174:	move.l (a0),d0
    a176:	move.l 8(sp),-(sp)
    a17a:	move.l d0,-(sp)
    a17c:	jsr bd8 <writeString>
    a182:	addq.l #8,sp
    a184:	nop
    a186:	rts

0000a188 <fileToStack>:

char encode1 = 0;
char encode2 = 0;
unsigned short saveEncoding = FALSE;

BOOL fileToStack(char *filename, struct stackHandler *sH) {
    a188:	                         lea -112(sp),sp
    a18c:	                         move.l a6,-(sp)
    a18e:	                         move.l d2,-(sp)
    struct variable stringVar;
    stringVar.varType = SVT_NULL;
    a190:	                         clr.l 10(sp)
    const char *checker = saveEncoding ? "[Custom data (encoded)]\r\n" : "[Custom data (ASCII)]\n";
    a194:	                         move.w 19d16 <saveEncoding>,d0
    a19a:	                  /----- beq.s a1a4 <fileToStack+0x1c>
    a19c:	                  |      move.l #91835,d0
    a1a2:	                  |  /-- bra.s a1aa <fileToStack+0x22>
    a1a4:	                  \--|-> move.l #91861,d0
    a1aa:	                     \-> move.l d0,116(sp)

    BPTR fp = Open(filename, MODE_OLDFILE);
    a1ae:	                         move.l 124(sp),112(sp)
    a1b4:	                         move.l #1005,108(sp)
    a1bc:	                         move.l 19c66 <DOSBase>,d0
    a1c2:	                         movea.l d0,a6
    a1c4:	                         move.l 112(sp),d1
    a1c8:	                         move.l 108(sp),d2
    a1cc:	                         jsr -30(a6)
    a1d0:	                         move.l d0,104(sp)
    a1d4:	                         move.l 104(sp),d0
    a1d8:	                         move.l d0,100(sp)
    if (!fp) {
    a1dc:	                     /-- bne.s a1f6 <fileToStack+0x6e>
        KPrintF("No such file", filename);
    a1de:	                     |   move.l 124(sp),-(sp)
    a1e2:	                     |   pea 166ec <line.c.05397aaf+0xe6>
    a1e8:	                     |   jsr 12f14 <KPrintF>
    a1ee:	                     |   addq.l #8,sp
        return FALSE;
    a1f0:	                     |   clr.w d0
    a1f2:	/--------------------|-- bra.w a4ec <fileToStack+0x364>
    }

    encode1 = (unsigned char)saveEncoding & 255;
    a1f6:	|                    \-> move.w 19d16 <saveEncoding>,d0
    a1fc:	|                        move.l d0,d0
    a1fe:	|                        move.b d0,19d14 <encode1>
    encode2 = (unsigned char)(saveEncoding >> 8);
    a204:	|                        move.w 19d16 <saveEncoding>,d0
    a20a:	|                        lsr.w #8,d0
    a20c:	|                        move.l d0,d0
    a20e:	|                        move.b d0,19d15 <encode2>

    while (*checker) {
    a214:	|                 /----- bra.s a278 <fileToStack+0xf0>
        if (FGetC(fp) != *checker) {
    a216:	|              /--|----> move.l 100(sp),30(sp)
    a21c:	|              |  |      move.l 19c66 <DOSBase>,d0
    a222:	|              |  |      movea.l d0,a6
    a224:	|              |  |      move.l 30(sp),d1
    a228:	|              |  |      jsr -306(a6)
    a22c:	|              |  |      move.l d0,26(sp)
    a230:	|              |  |      move.l 26(sp),d1
    a234:	|              |  |      movea.l 116(sp),a0
    a238:	|              |  |      move.b (a0),d0
    a23a:	|              |  |      ext.w d0
    a23c:	|              |  |      movea.w d0,a0
    a23e:	|              |  |      cmpa.l d1,a0
    a240:	|              |  |  /-- beq.s a274 <fileToStack+0xec>
            Close(fp);
    a242:	|              |  |  |   move.l 100(sp),22(sp)
    a248:	|              |  |  |   move.l 19c66 <DOSBase>,d0
    a24e:	|              |  |  |   movea.l d0,a6
    a250:	|              |  |  |   move.l 22(sp),d1
    a254:	|              |  |  |   jsr -36(a6)
    a258:	|              |  |  |   move.l d0,18(sp)
            KPrintF(LOAD_ERROR "This isn't a SLUDGE custom data file:", filename);
    a25c:	|              |  |  |   move.l 124(sp),-(sp)
    a260:	|              |  |  |   pea 166f9 <line.c.05397aaf+0xf3>
    a266:	|              |  |  |   jsr 12f14 <KPrintF>
    a26c:	|              |  |  |   addq.l #8,sp
            return FALSE;
    a26e:	|              |  |  |   clr.w d0
    a270:	+--------------|--|--|-- bra.w a4ec <fileToStack+0x364>
        }
        checker++;
    a274:	|              |  |  \-> addq.l #1,116(sp)
    while (*checker) {
    a278:	|              |  \----> movea.l 116(sp),a0
    a27c:	|              |         move.b (a0),d0
    a27e:	|              \-------- bne.s a216 <fileToStack+0x8e>
    }

    if (saveEncoding) {
    a280:	|                        move.w 19d16 <saveEncoding>,d0
    a286:	|  /-------------------- beq.s a2fa <fileToStack+0x172>
        char *checker = readStringEncoded(fp);
    a288:	|  |                     move.l 100(sp),-(sp)
    a28c:	|  |                     jsr a4f6 <readStringEncoded>
    a292:	|  |                     addq.l #4,sp
    a294:	|  |                     move.l d0,96(sp)
        if (strcmp(checker, "UN�LO�CKED")) {
    a298:	|  |                     pea 1673a <line.c.05397aaf+0x134>
    a29e:	|  |                     move.l 100(sp),-(sp)
    a2a2:	|  |                     jsr 1036c <strcmp>
    a2a8:	|  |                     addq.l #8,sp
    a2aa:	|  |                     tst.l d0
    a2ac:	|  |                 /-- beq.s a2e0 <fileToStack+0x158>
            Close(fp);
    a2ae:	|  |                 |   move.l 100(sp),88(sp)
    a2b4:	|  |                 |   move.l 19c66 <DOSBase>,d0
    a2ba:	|  |                 |   movea.l d0,a6
    a2bc:	|  |                 |   move.l 88(sp),d1
    a2c0:	|  |                 |   jsr -36(a6)
    a2c4:	|  |                 |   move.l d0,84(sp)
            KPrintF(LOAD_ERROR "The current file encoding setting does not match the encoding setting used when this file was created:", filename);
    a2c8:	|  |                 |   move.l 124(sp),-(sp)
    a2cc:	|  |                 |   pea 16749 <line.c.05397aaf+0x143>
    a2d2:	|  |                 |   jsr 12f14 <KPrintF>
    a2d8:	|  |                 |   addq.l #8,sp
            return FALSE;
    a2da:	|  |                 |   clr.w d0
    a2dc:	+--|-----------------|-- bra.w a4ec <fileToStack+0x364>
        }
        FreeVec(checker);
    a2e0:	|  |                 \-> move.l 96(sp),92(sp)
    a2e6:	|  |                     move.l 19c5e <SysBase>,d0
    a2ec:	|  |                     movea.l d0,a6
    a2ee:	|  |                     movea.l 92(sp),a1
    a2f2:	|  |                     jsr -690(a6)
        checker = NULL;
    a2f6:	|  |                     clr.l 96(sp)
    }

    for (;;) {
        if (saveEncoding) {
    a2fa:	|  >-------------------> move.w 19d16 <saveEncoding>,d0
    a300:	|  |     /-------------- beq.w a434 <fileToStack+0x2ac>
            LONG tmp = FGetC(fp) ^ encode1;
    a304:	|  |     |               move.l 100(sp),76(sp)
    a30a:	|  |     |               move.l 19c66 <DOSBase>,d0
    a310:	|  |     |               movea.l d0,a6
    a312:	|  |     |               move.l 76(sp),d1
    a316:	|  |     |               jsr -306(a6)
    a31a:	|  |     |               move.l d0,72(sp)
    a31e:	|  |     |               move.l 72(sp),d0
    a322:	|  |     |               move.b 19d14 <encode1>,d1
    a328:	|  |     |               ext.w d1
    a32a:	|  |     |               ext.l d1
    a32c:	|  |     |               move.l d0,d2
    a32e:	|  |     |               eor.l d1,d2
    a330:	|  |     |               move.l d2,68(sp)

            if (tmp == -1) break;
    a334:	|  |     |               moveq #-1,d0
    a336:	|  |     |               cmp.l 68(sp),d0
    a33a:	|  |  /--|-------------- beq.w a4ca <fileToStack+0x342>

            char i = (char) tmp;
    a33e:	|  |  |  |               move.b 71(sp),67(sp)

            switch (i) {
    a344:	|  |  |  |               move.b 67(sp),d0
    a348:	|  |  |  |               ext.w d0
    a34a:	|  |  |  |               movea.w d0,a0
    a34c:	|  |  |  |               moveq #2,d2
    a34e:	|  |  |  |               cmp.l a0,d2
    a350:	|  |  |  |     /-------- beq.s a3cc <fileToStack+0x244>
    a352:	|  |  |  |     |         moveq #2,d0
    a354:	|  |  |  |     |         cmp.l a0,d0
    a356:	|  |  |  |  /--|-------- blt.w a402 <fileToStack+0x27a>
    a35a:	|  |  |  |  |  |         cmpa.w #0,a0
    a35e:	|  |  |  |  |  |     /-- beq.s a36a <fileToStack+0x1e2>
    a360:	|  |  |  |  |  |     |   moveq #1,d2
    a362:	|  |  |  |  |  |     |   cmp.l a0,d2
    a364:	|  |  |  |  |  |  /--|-- beq.s a3a6 <fileToStack+0x21e>
    a366:	|  |  |  |  +--|--|--|-- bra.w a402 <fileToStack+0x27a>
                case 0: {
                    char *g = readStringEncoded(fp);
    a36a:	|  |  |  |  |  |  |  \-> move.l 100(sp),-(sp)
    a36e:	|  |  |  |  |  |  |      jsr a4f6 <readStringEncoded>
    a374:	|  |  |  |  |  |  |      addq.l #4,sp
    a376:	|  |  |  |  |  |  |      move.l d0,54(sp)
                    makeTextVar(&stringVar, g);
    a37a:	|  |  |  |  |  |  |      move.l 54(sp),-(sp)
    a37e:	|  |  |  |  |  |  |      lea 14(sp),a0
    a382:	|  |  |  |  |  |  |      move.l a0,-(sp)
    a384:	|  |  |  |  |  |  |      jsr 110e2 <makeTextVar>
    a38a:	|  |  |  |  |  |  |      addq.l #8,sp
                    FreeVec(g);
    a38c:	|  |  |  |  |  |  |      move.l 54(sp),50(sp)
    a392:	|  |  |  |  |  |  |      move.l 19c5e <SysBase>,d0
    a398:	|  |  |  |  |  |  |      movea.l d0,a6
    a39a:	|  |  |  |  |  |  |      movea.l 50(sp),a1
    a39e:	|  |  |  |  |  |  |      jsr -690(a6)
                }
                break;
    a3a2:	|  |  |  |  |  |  |  /-- bra.w a45a <fileToStack+0x2d2>

                case 1:
                    setVariable(&stringVar, SVT_INT, get4bytes(fp));
    a3a6:	|  |  |  |  |  |  \--|-> move.l 100(sp),-(sp)
    a3aa:	|  |  |  |  |  |     |   jsr 718 <get4bytes>
    a3b0:	|  |  |  |  |  |     |   addq.l #4,sp
    a3b2:	|  |  |  |  |  |     |   move.l d0,-(sp)
    a3b4:	|  |  |  |  |  |     |   pea 1 <_start+0x1>
    a3b8:	|  |  |  |  |  |     |   lea 18(sp),a0
    a3bc:	|  |  |  |  |  |     |   move.l a0,-(sp)
    a3be:	|  |  |  |  |  |     |   jsr 117b2 <setVariable>
    a3c4:	|  |  |  |  |  |     |   lea 12(sp),sp
                    break;
    a3c8:	|  |  |  |  |  |     +-- bra.w a45a <fileToStack+0x2d2>

                case 2:
                    setVariable(&stringVar, SVT_INT, FGetC(fp));
    a3cc:	|  |  |  |  |  \-----|-> move.l 100(sp),62(sp)
    a3d2:	|  |  |  |  |        |   move.l 19c66 <DOSBase>,d0
    a3d8:	|  |  |  |  |        |   movea.l d0,a6
    a3da:	|  |  |  |  |        |   move.l 62(sp),d1
    a3de:	|  |  |  |  |        |   jsr -306(a6)
    a3e2:	|  |  |  |  |        |   move.l d0,58(sp)
    a3e6:	|  |  |  |  |        |   move.l 58(sp),d0
    a3ea:	|  |  |  |  |        |   move.l d0,-(sp)
    a3ec:	|  |  |  |  |        |   pea 1 <_start+0x1>
    a3f0:	|  |  |  |  |        |   lea 18(sp),a0
    a3f4:	|  |  |  |  |        |   move.l a0,-(sp)
    a3f6:	|  |  |  |  |        |   jsr 117b2 <setVariable>
    a3fc:	|  |  |  |  |        |   lea 12(sp),sp
                    break;
    a400:	|  |  |  |  |        +-- bra.s a45a <fileToStack+0x2d2>

                default:
                    KPrintF(LOAD_ERROR "Corrupt custom data file:", filename);
    a402:	|  |  |  |  \--------|-> move.l 124(sp),-(sp)
    a406:	|  |  |  |           |   pea 167cb <line.c.05397aaf+0x1c5>
    a40c:	|  |  |  |           |   jsr 12f14 <KPrintF>
    a412:	|  |  |  |           |   addq.l #8,sp
                    Close(fp);
    a414:	|  |  |  |           |   move.l 100(sp),46(sp)
    a41a:	|  |  |  |           |   move.l 19c66 <DOSBase>,d0
    a420:	|  |  |  |           |   movea.l d0,a6
    a422:	|  |  |  |           |   move.l 46(sp),d1
    a426:	|  |  |  |           |   jsr -36(a6)
    a42a:	|  |  |  |           |   move.l d0,42(sp)
                    return FALSE;
    a42e:	|  |  |  |           |   clr.w d0
    a430:	+--|--|--|-----------|-- bra.w a4ec <fileToStack+0x364>
            }
        } else {
            char *line = readTextPlain(fp);
    a434:	|  |  |  \-----------|-> move.l 100(sp),-(sp)
    a438:	|  |  |              |   jsr a5bc <readTextPlain>
    a43e:	|  |  |              |   addq.l #4,sp
    a440:	|  |  |              |   move.l d0,80(sp)
            if (!line) break;
    a444:	|  |  |        /-----|-- beq.w a4ce <fileToStack+0x346>
            makeTextVar(&stringVar, line);
    a448:	|  |  |        |     |   move.l 80(sp),-(sp)
    a44c:	|  |  |        |     |   lea 14(sp),a0
    a450:	|  |  |        |     |   move.l a0,-(sp)
    a452:	|  |  |        |     |   jsr 110e2 <makeTextVar>
    a458:	|  |  |        |     |   addq.l #8,sp
        }

        if (sH->first == NULL) {
    a45a:	|  |  |        |     \-> movea.l 128(sp),a0
    a45e:	|  |  |        |         move.l (a0),d0
    a460:	|  |  |        |  /----- bne.s a490 <fileToStack+0x308>
            // Adds to the TOP of the array... oops!
            if (!addVarToStackQuick(&stringVar, &sH->first)) return FALSE;
    a462:	|  |  |        |  |      move.l 128(sp),d0
    a466:	|  |  |        |  |      move.l d0,-(sp)
    a468:	|  |  |        |  |      lea 14(sp),a0
    a46c:	|  |  |        |  |      move.l a0,-(sp)
    a46e:	|  |  |        |  |      jsr 10782 <addVarToStackQuick>
    a474:	|  |  |        |  |      addq.l #8,sp
    a476:	|  |  |        |  |      tst.w d0
    a478:	|  |  |        |  |  /-- bne.s a47e <fileToStack+0x2f6>
    a47a:	|  |  |        |  |  |   clr.w d0
    a47c:	+--|--|--------|--|--|-- bra.s a4ec <fileToStack+0x364>
            sH->last = sH->first;
    a47e:	|  |  |        |  |  \-> movea.l 128(sp),a0
    a482:	|  |  |        |  |      move.l (a0),d0
    a484:	|  |  |        |  |      movea.l 128(sp),a0
    a488:	|  |  |        |  |      move.l d0,4(a0)
    a48c:	|  +--|--------|--|----- bra.w a2fa <fileToStack+0x172>
        } else {
            // Adds to the END of the array... much better
            if (!addVarToStackQuick(&stringVar, &sH->last->next)) return FALSE;
    a490:	|  |  |        |  \----> movea.l 128(sp),a0
    a494:	|  |  |        |         move.l 4(a0),d0
    a498:	|  |  |        |         addq.l #8,d0
    a49a:	|  |  |        |         move.l d0,-(sp)
    a49c:	|  |  |        |         lea 14(sp),a0
    a4a0:	|  |  |        |         move.l a0,-(sp)
    a4a2:	|  |  |        |         jsr 10782 <addVarToStackQuick>
    a4a8:	|  |  |        |         addq.l #8,sp
    a4aa:	|  |  |        |         tst.w d0
    a4ac:	|  |  |        |     /-- bne.s a4b2 <fileToStack+0x32a>
    a4ae:	|  |  |        |     |   clr.w d0
    a4b0:	+--|--|--------|-----|-- bra.s a4ec <fileToStack+0x364>
            sH->last = sH->last->next;
    a4b2:	|  |  |        |     \-> movea.l 128(sp),a0
    a4b6:	|  |  |        |         movea.l 4(a0),a0
    a4ba:	|  |  |        |         move.l 8(a0),d0
    a4be:	|  |  |        |         movea.l 128(sp),a0
    a4c2:	|  |  |        |         move.l d0,4(a0)
        if (saveEncoding) {
    a4c6:	|  \--|--------|-------- bra.w a2fa <fileToStack+0x172>
            if (tmp == -1) break;
    a4ca:	|     \--------|-------> nop
    a4cc:	|              |     /-- bra.s a4d0 <fileToStack+0x348>
            if (!line) break;
    a4ce:	|              \-----|-> nop
        }
    }
    Close(fp);
    a4d0:	|                    \-> move.l 100(sp),38(sp)
    a4d6:	|                        move.l 19c66 <DOSBase>,d0
    a4dc:	|                        movea.l d0,a6
    a4de:	|                        move.l 38(sp),d1
    a4e2:	|                        jsr -36(a6)
    a4e6:	|                        move.l d0,34(sp)
    return TRUE;
    a4ea:	|                        moveq #1,d0
}
    a4ec:	\----------------------> move.l (sp)+,d2
    a4ee:	                         movea.l (sp)+,a6
    a4f0:	                         lea 112(sp),sp
    a4f4:	                         rts

0000a4f6 <readStringEncoded>:

char *readStringEncoded(BPTR fp) {
    a4f6:	          lea -32(sp),sp
    a4fa:	          move.l a6,-(sp)
    a4fc:	          move.l d2,-(sp)
    int a, len = get2bytes(fp);
    a4fe:	          move.l 44(sp),-(sp)
    a502:	          jsr 6bc <get2bytes>
    a508:	          addq.l #4,sp
    a50a:	          move.l d0,32(sp)
    char *s = AllocVec(len + 1, MEMF_ANY);
    a50e:	          move.l 32(sp),d0
    a512:	          addq.l #1,d0
    a514:	          move.l d0,28(sp)
    a518:	          clr.l 24(sp)
    a51c:	          move.l 19c5e <SysBase>,d0
    a522:	          movea.l d0,a6
    a524:	          move.l 28(sp),d0
    a528:	          move.l 24(sp),d1
    a52c:	          jsr -684(a6)
    a530:	          move.l d0,20(sp)
    a534:	          move.l 20(sp),d0
    a538:	          move.l d0,16(sp)
    if (!s) return NULL;
    a53c:	      /-- bne.s a542 <readStringEncoded+0x4c>
    a53e:	      |   moveq #0,d0
    a540:	/-----|-- bra.s a5b2 <readStringEncoded+0xbc>
    for (a = 0; a < len; a++) {
    a542:	|     \-> clr.l 36(sp)
    a546:	|     /-- bra.s a598 <readStringEncoded+0xa2>
        s[a] = (char)(FGetC(fp) ^ encode1);
    a548:	|  /--|-> move.l 44(sp),12(sp)
    a54e:	|  |  |   move.l 19c66 <DOSBase>,d0
    a554:	|  |  |   movea.l d0,a6
    a556:	|  |  |   move.l 12(sp),d1
    a55a:	|  |  |   jsr -306(a6)
    a55e:	|  |  |   move.l d0,8(sp)
    a562:	|  |  |   move.l 8(sp),d0
    a566:	|  |  |   move.l d0,d1
    a568:	|  |  |   move.b 19d14 <encode1>,d2
    a56e:	|  |  |   move.l 36(sp),d0
    a572:	|  |  |   movea.l 16(sp),a0
    a576:	|  |  |   adda.l d0,a0
    a578:	|  |  |   move.b d1,d0
    a57a:	|  |  |   eor.b d2,d0
    a57c:	|  |  |   move.b d0,(a0)
        encode1 += encode2;
    a57e:	|  |  |   move.b 19d14 <encode1>,d0
    a584:	|  |  |   move.b d0,d1
    a586:	|  |  |   move.b 19d15 <encode2>,d0
    a58c:	|  |  |   add.b d1,d0
    a58e:	|  |  |   move.b d0,19d14 <encode1>
    for (a = 0; a < len; a++) {
    a594:	|  |  |   addq.l #1,36(sp)
    a598:	|  |  \-> move.l 36(sp),d0
    a59c:	|  |      cmp.l 32(sp),d0
    a5a0:	|  \----- blt.s a548 <readStringEncoded+0x52>
    }
    s[len] = 0;
    a5a2:	|         move.l 32(sp),d0
    a5a6:	|         movea.l 16(sp),a0
    a5aa:	|         adda.l d0,a0
    a5ac:	|         clr.b (a0)
    return s;
    a5ae:	|         move.l 16(sp),d0
}
    a5b2:	\-------> move.l (sp)+,d2
    a5b4:	          movea.l (sp)+,a6
    a5b6:	          lea 32(sp),sp
    a5ba:	          rts

0000a5bc <readTextPlain>:

char *readTextPlain(BPTR fp) {
    a5bc:	             lea -104(sp),sp
    a5c0:	             movem.l d2-d4/a6,-(sp)
    ULONG startPos;
    int stringSize = 0;
    a5c4:	             clr.l 116(sp)
    BOOL keepGoing = TRUE;
    a5c8:	             move.w #1,114(sp)
    char gotChar;
    char *reply;

    startPos = Seek(fp, 0, OFFSET_CURRENT);
    a5ce:	             move.l 124(sp),106(sp)
    a5d4:	             clr.l 102(sp)
    a5d8:	             clr.l 98(sp)
    a5dc:	             move.l 19c66 <DOSBase>,d0
    a5e2:	             movea.l d0,a6
    a5e4:	             move.l 106(sp),d1
    a5e8:	             move.l 102(sp),d2
    a5ec:	             move.l 98(sp),d3
    a5f0:	             jsr -66(a6)
    a5f4:	             move.l d0,94(sp)
    a5f8:	             move.l 94(sp),d0
    a5fc:	             move.l d0,90(sp)

    LONG tmp;
    while (keepGoing) {
    a600:	   /-------- bra.s a644 <readTextPlain+0x88>
        tmp = FGetC(fp);
    a602:	/--|-------> move.l 124(sp),22(sp)
    a608:	|  |         move.l 19c66 <DOSBase>,d0
    a60e:	|  |         movea.l d0,a6
    a610:	|  |         move.l 22(sp),d1
    a614:	|  |         jsr -306(a6)
    a618:	|  |         move.l d0,18(sp)
    a61c:	|  |         move.l 18(sp),d0
    a620:	|  |         move.l d0,110(sp)
        char gotChar = (char) tmp;
    a624:	|  |         move.b 113(sp),17(sp)
        if (gotChar == '\n' || tmp == -1) {
    a62a:	|  |         cmpi.b #10,17(sp)
    a630:	|  |  /----- beq.s a63a <readTextPlain+0x7e>
    a632:	|  |  |      moveq #-1,d0
    a634:	|  |  |      cmp.l 110(sp),d0
    a638:	|  |  |  /-- bne.s a640 <readTextPlain+0x84>
            keepGoing = FALSE;
    a63a:	|  |  \--|-> clr.w 114(sp)
    a63e:	|  +-----|-- bra.s a644 <readTextPlain+0x88>
        } else {
            stringSize++;
    a640:	|  |     \-> addq.l #1,116(sp)
    while (keepGoing) {
    a644:	|  \-------> tst.w 114(sp)
    a648:	\----------- bne.s a602 <readTextPlain+0x46>
        }
    }

    if ((stringSize == 0) && tmp == -1) {
    a64a:	             tst.l 116(sp)
    a64e:	         /-- bne.s a65e <readTextPlain+0xa2>
    a650:	         |   moveq #-1,d0
    a652:	         |   cmp.l 110(sp),d0
    a656:	         +-- bne.s a65e <readTextPlain+0xa2>
        return NULL;
    a658:	         |   moveq #0,d0
    a65a:	      /--|-- bra.w a744 <readTextPlain+0x188>
    } else {
        Seek(fp, startPos, OFFSET_BEGINNING);
    a65e:	      |  \-> move.l 124(sp),86(sp)
    a664:	      |      move.l 90(sp),82(sp)
    a66a:	      |      moveq #-1,d0
    a66c:	      |      move.l d0,78(sp)
    a670:	      |      move.l 19c66 <DOSBase>,d0
    a676:	      |      movea.l d0,a6
    a678:	      |      move.l 86(sp),d1
    a67c:	      |      move.l 82(sp),d2
    a680:	      |      move.l 78(sp),d3
    a684:	      |      jsr -66(a6)
    a688:	      |      move.l d0,74(sp)
        reply = AllocVec(stringSize + 1, MEMF_ANY);
    a68c:	      |      move.l 116(sp),d0
    a690:	      |      addq.l #1,d0
    a692:	      |      move.l d0,70(sp)
    a696:	      |      clr.l 66(sp)
    a69a:	      |      move.l 19c5e <SysBase>,d0
    a6a0:	      |      movea.l d0,a6
    a6a2:	      |      move.l 70(sp),d0
    a6a6:	      |      move.l 66(sp),d1
    a6aa:	      |      jsr -684(a6)
    a6ae:	      |      move.l d0,62(sp)
    a6b2:	      |      move.l 62(sp),d0
    a6b6:	      |      move.l d0,58(sp)
        if (reply == NULL) return NULL;
    a6ba:	      |  /-- bne.s a6c2 <readTextPlain+0x106>
    a6bc:	      |  |   moveq #0,d0
    a6be:	      +--|-- bra.w a744 <readTextPlain+0x188>
        int bytesRead = FRead(fp, reply, 1, stringSize);
    a6c2:	      |  \-> move.l 124(sp),54(sp)
    a6c8:	      |      move.l 58(sp),50(sp)
    a6ce:	      |      moveq #1,d0
    a6d0:	      |      move.l d0,46(sp)
    a6d4:	      |      move.l 116(sp),42(sp)
    a6da:	      |      move.l 19c66 <DOSBase>,d0
    a6e0:	      |      movea.l d0,a6
    a6e2:	      |      move.l 54(sp),d1
    a6e6:	      |      move.l 50(sp),d2
    a6ea:	      |      move.l 46(sp),d3
    a6ee:	      |      move.l 42(sp),d4
    a6f2:	      |      jsr -324(a6)
    a6f6:	      |      move.l d0,38(sp)
    a6fa:	      |      move.l 38(sp),d0
    a6fe:	      |      move.l d0,34(sp)
        if (bytesRead != stringSize) {
    a702:	      |      move.l 34(sp),d0
    a706:	      |      cmp.l 116(sp),d0
    a70a:	      |  /-- beq.s a71a <readTextPlain+0x15e>
            KPrintF("Reading error in readTextPlain.\n");
    a70c:	      |  |   pea 16800 <line.c.05397aaf+0x1fa>
    a712:	      |  |   jsr 12f14 <KPrintF>
    a718:	      |  |   addq.l #4,sp
        }
        FGetC(fp); // Skip the newline character
    a71a:	      |  \-> move.l 124(sp),30(sp)
    a720:	      |      move.l 19c66 <DOSBase>,d0
    a726:	      |      movea.l d0,a6
    a728:	      |      move.l 30(sp),d1
    a72c:	      |      jsr -306(a6)
    a730:	      |      move.l d0,26(sp)
        reply[stringSize] = 0;
    a734:	      |      move.l 116(sp),d0
    a738:	      |      movea.l 58(sp),a0
    a73c:	      |      adda.l d0,a0
    a73e:	      |      clr.b (a0)
    }

    return reply;
    a740:	      |      move.l 58(sp),d0
}
    a744:	      \----> movem.l (sp)+,d2-d4/a6
    a748:	             lea 104(sp),sp
    a74c:	             rts

0000a74e <stackToFile>:


BOOL stackToFile (char * filename, const struct variable * from) {
    a74e:	                      lea -144(sp),sp
    a752:	                      movem.l d2-d3/a6,-(sp)
    BPTR fp = Open( filename, MODE_NEWFILE);
    a756:	                      move.l 160(sp),148(sp)
    a75c:	                      move.l #1006,144(sp)
    a764:	                      move.l 19c66 <DOSBase>,d0
    a76a:	                      movea.l d0,a6
    a76c:	                      move.l 148(sp),d1
    a770:	                      move.l 144(sp),d2
    a774:	                      jsr -30(a6)
    a778:	                      move.l d0,140(sp)
    a77c:	                      move.l 140(sp),d0
    a780:	                      move.l d0,136(sp)

    if (!fp) {
    a784:	                  /-- bne.s a79e <stackToFile+0x50>
        KPrintF("Can't create file", filename);
    a786:	                  |   move.l 160(sp),-(sp)
    a78a:	                  |   pea 16821 <line.c.05397aaf+0x21b>
    a790:	                  |   jsr 12f14 <KPrintF>
    a796:	                  |   addq.l #8,sp
        return FALSE;
    a798:	                  |   clr.w d0
    a79a:	/-----------------|-- bra.w aa5a <stackToFile+0x30c>
    }

    struct variableStack * hereWeAre = from->varData.theStack->first;
    a79e:	|                 \-> movea.l 164(sp),a0
    a7a2:	|                     movea.l 4(a0),a0
    a7a6:	|                     move.l (a0),152(sp)

    encode1 = (unsigned char) saveEncoding & 255;
    a7aa:	|                     move.w 19d16 <saveEncoding>,d0
    a7b0:	|                     move.l d0,d0
    a7b2:	|                     move.b d0,19d14 <encode1>
    encode2 = (unsigned char) (saveEncoding >> 8);
    a7b8:	|                     move.w 19d16 <saveEncoding>,d0
    a7be:	|                     lsr.w #8,d0
    a7c0:	|                     move.l d0,d0
    a7c2:	|                     move.b d0,19d15 <encode2>

    if (saveEncoding) {
    a7c8:	|                     move.w 19d16 <saveEncoding>,d0
    a7ce:	|                 /-- beq.s a820 <stackToFile+0xd2>
        FPrintf(fp, "[Custom data (encoded)]\r\n");
    a7d0:	|                 |   move.l 136(sp),116(sp)
    a7d6:	|                 |   move.l #91835,112(sp)
    a7de:	|                 |   moveq #99,d0
    a7e0:	|                 |   not.b d0
    a7e2:	|                 |   add.l sp,d0
    a7e4:	|                 |   addi.l #-144,d0
    a7ea:	|                 |   move.l d0,108(sp)
    a7ee:	|                 |   move.l 19c66 <DOSBase>,d0
    a7f4:	|                 |   movea.l d0,a6
    a7f6:	|                 |   move.l 116(sp),d1
    a7fa:	|                 |   move.l 112(sp),d2
    a7fe:	|                 |   move.l 108(sp),d3
    a802:	|                 |   jsr -354(a6)
    a806:	|                 |   move.l d0,104(sp)
        writeStringEncoded("UN�LO�CKED", fp);
    a80a:	|                 |   move.l 136(sp),-(sp)
    a80e:	|                 |   pea 1673a <line.c.05397aaf+0x134>
    a814:	|                 |   jsr aa64 <writeStringEncoded>
    a81a:	|                 |   addq.l #8,sp
    a81c:	|  /--------------|-- bra.w aa32 <stackToFile+0x2e4>
    } else {
        FPrintf(fp, "[Custom data (ASCII)]\n");
    a820:	|  |              \-> move.l 136(sp),132(sp)
    a826:	|  |                  move.l #91861,128(sp)
    a82e:	|  |                  moveq #99,d1
    a830:	|  |                  not.b d1
    a832:	|  |                  add.l sp,d1
    a834:	|  |                  addi.l #-144,d1
    a83a:	|  |                  move.l d1,124(sp)
    a83e:	|  |                  move.l 19c66 <DOSBase>,d0
    a844:	|  |                  movea.l d0,a6
    a846:	|  |                  move.l 132(sp),d1
    a84a:	|  |                  move.l 128(sp),d2
    a84e:	|  |                  move.l 124(sp),d3
    a852:	|  |                  jsr -354(a6)
    a856:	|  |                  move.l d0,120(sp)
    }

    while (hereWeAre) {
    a85a:	|  +----------------- bra.w aa32 <stackToFile+0x2e4>
        if (saveEncoding) {
    a85e:	|  |  /-------------> move.w 19d16 <saveEncoding>,d0
    a864:	|  |  |     /-------- beq.w a9b6 <stackToFile+0x268>
            switch (hereWeAre->thisVar.varType) {
    a868:	|  |  |     |         movea.l 152(sp),a0
    a86c:	|  |  |     |         move.l (a0),d0
    a86e:	|  |  |     |         moveq #1,d1
    a870:	|  |  |     |         cmp.l d0,d1
    a872:	|  |  |     |     /-- beq.s a8c2 <stackToFile+0x174>
    a874:	|  |  |     |     |   moveq #3,d1
    a876:	|  |  |     |     |   cmp.l d0,d1
    a878:	|  |  |     |  /--|-- bne.w a984 <stackToFile+0x236>
                case SVT_STRING:
                    FPutC(fp, encode1);
    a87c:	|  |  |     |  |  |   move.l 136(sp),76(sp)
    a882:	|  |  |     |  |  |   move.b 19d14 <encode1>,d0
    a888:	|  |  |     |  |  |   ext.w d0
    a88a:	|  |  |     |  |  |   movea.w d0,a0
    a88c:	|  |  |     |  |  |   move.l a0,72(sp)
    a890:	|  |  |     |  |  |   move.l 19c66 <DOSBase>,d0
    a896:	|  |  |     |  |  |   movea.l d0,a6
    a898:	|  |  |     |  |  |   move.l 76(sp),d1
    a89c:	|  |  |     |  |  |   move.l 72(sp),d2
    a8a0:	|  |  |     |  |  |   jsr -312(a6)
    a8a4:	|  |  |     |  |  |   move.l d0,68(sp)
                    writeStringEncoded(hereWeAre->thisVar.varData.theString, fp);
    a8a8:	|  |  |     |  |  |   movea.l 152(sp),a0
    a8ac:	|  |  |     |  |  |   move.l 4(a0),d0
    a8b0:	|  |  |     |  |  |   move.l 136(sp),-(sp)
    a8b4:	|  |  |     |  |  |   move.l d0,-(sp)
    a8b6:	|  |  |     |  |  |   jsr aa64 <writeStringEncoded>
    a8bc:	|  |  |     |  |  |   addq.l #8,sp
                    break;
    a8be:	|  |  |  /--|--|--|-- bra.w aa28 <stackToFile+0x2da>

                case SVT_INT:
                    // Small enough to be stored as a char
                    if (hereWeAre->thisVar.varData.intValue >= 0 && hereWeAre->thisVar.varData.intValue < 256) {
    a8c2:	|  |  |  |  |  |  \-> movea.l 152(sp),a0
    a8c6:	|  |  |  |  |  |      move.l 4(a0),d0
    a8ca:	|  |  |  |  |  |  /-- bmi.s a93a <stackToFile+0x1ec>
    a8cc:	|  |  |  |  |  |  |   movea.l 152(sp),a0
    a8d0:	|  |  |  |  |  |  |   move.l 4(a0),d0
    a8d4:	|  |  |  |  |  |  |   cmpi.l #255,d0
    a8da:	|  |  |  |  |  |  +-- bgt.s a93a <stackToFile+0x1ec>
                        FPutC(fp, 2 ^ encode1);
    a8dc:	|  |  |  |  |  |  |   move.l 136(sp),64(sp)
    a8e2:	|  |  |  |  |  |  |   move.b 19d14 <encode1>,d0
    a8e8:	|  |  |  |  |  |  |   eori.b #2,d0
    a8ec:	|  |  |  |  |  |  |   ext.w d0
    a8ee:	|  |  |  |  |  |  |   movea.w d0,a0
    a8f0:	|  |  |  |  |  |  |   move.l a0,60(sp)
    a8f4:	|  |  |  |  |  |  |   move.l 19c66 <DOSBase>,d0
    a8fa:	|  |  |  |  |  |  |   movea.l d0,a6
    a8fc:	|  |  |  |  |  |  |   move.l 64(sp),d1
    a900:	|  |  |  |  |  |  |   move.l 60(sp),d2
    a904:	|  |  |  |  |  |  |   jsr -312(a6)
    a908:	|  |  |  |  |  |  |   move.l d0,56(sp)
                        FPutC(fp, hereWeAre->thisVar.varData.intValue);
    a90c:	|  |  |  |  |  |  |   move.l 136(sp),52(sp)
    a912:	|  |  |  |  |  |  |   movea.l 152(sp),a0
    a916:	|  |  |  |  |  |  |   move.l 4(a0),48(sp)
    a91c:	|  |  |  |  |  |  |   move.l 19c66 <DOSBase>,d0
    a922:	|  |  |  |  |  |  |   movea.l d0,a6
    a924:	|  |  |  |  |  |  |   move.l 52(sp),d1
    a928:	|  |  |  |  |  |  |   move.l 48(sp),d2
    a92c:	|  |  |  |  |  |  |   jsr -312(a6)
    a930:	|  |  |  |  |  |  |   move.l d0,44(sp)
    a934:	|  |  |  |  |  |  |   nop
                    } else {
                        FPutC(fp, 1 ^ encode1);
                        put4bytes(hereWeAre->thisVar.varData.intValue, fp);
                    }
                    break;
    a936:	|  |  |  +--|--|--|-- bra.w aa28 <stackToFile+0x2da>
                        FPutC(fp, 1 ^ encode1);
    a93a:	|  |  |  |  |  |  \-> move.l 136(sp),40(sp)
    a940:	|  |  |  |  |  |      move.b 19d14 <encode1>,d0
    a946:	|  |  |  |  |  |      eori.b #1,d0
    a94a:	|  |  |  |  |  |      ext.w d0
    a94c:	|  |  |  |  |  |      movea.w d0,a0
    a94e:	|  |  |  |  |  |      move.l a0,36(sp)
    a952:	|  |  |  |  |  |      move.l 19c66 <DOSBase>,d0
    a958:	|  |  |  |  |  |      movea.l d0,a6
    a95a:	|  |  |  |  |  |      move.l 40(sp),d1
    a95e:	|  |  |  |  |  |      move.l 36(sp),d2
    a962:	|  |  |  |  |  |      jsr -312(a6)
    a966:	|  |  |  |  |  |      move.l d0,32(sp)
                        put4bytes(hereWeAre->thisVar.varData.intValue, fp);
    a96a:	|  |  |  |  |  |      movea.l 152(sp),a0
    a96e:	|  |  |  |  |  |      move.l 4(a0),d0
    a972:	|  |  |  |  |  |      move.l 136(sp),-(sp)
    a976:	|  |  |  |  |  |      move.l d0,-(sp)
    a978:	|  |  |  |  |  |      jsr 958 <put4bytes>
    a97e:	|  |  |  |  |  |      addq.l #8,sp
                    break;
    a980:	|  |  |  +--|--|----- bra.w aa28 <stackToFile+0x2da>

                default:
                    KPrintF("Can't create an encoded custom data file containing anything other than numbers and strings", filename);
    a984:	|  |  |  |  |  \----> move.l 160(sp),-(sp)
    a988:	|  |  |  |  |         pea 16833 <line.c.05397aaf+0x22d>
    a98e:	|  |  |  |  |         jsr 12f14 <KPrintF>
    a994:	|  |  |  |  |         addq.l #8,sp
                    Close(fp);
    a996:	|  |  |  |  |         move.l 136(sp),28(sp)
    a99c:	|  |  |  |  |         move.l 19c66 <DOSBase>,d0
    a9a2:	|  |  |  |  |         movea.l d0,a6
    a9a4:	|  |  |  |  |         move.l 28(sp),d1
    a9a8:	|  |  |  |  |         jsr -36(a6)
    a9ac:	|  |  |  |  |         move.l d0,24(sp)
                    return FALSE;
    a9b0:	|  |  |  |  |         clr.w d0
    a9b2:	+--|--|--|--|-------- bra.w aa5a <stackToFile+0x30c>
            }
        } else {
            char * makeSureItsText = getTextFromAnyVar(&hereWeAre->thisVar);
    a9b6:	|  |  |  |  \-------> move.l 152(sp),d0
    a9ba:	|  |  |  |            move.l d0,-(sp)
    a9bc:	|  |  |  |            jsr 11496 <getTextFromAnyVar>
    a9c2:	|  |  |  |            addq.l #4,sp
    a9c4:	|  |  |  |            move.l d0,100(sp)
            if (makeSureItsText == NULL) break;
    a9c8:	|  |  |  |     /----- beq.s aa3c <stackToFile+0x2ee>
            FPrintf(fp, "%s\n", *makeSureItsText);
    a9ca:	|  |  |  |     |      movea.l 100(sp),a0
    a9ce:	|  |  |  |     |      move.b (a0),d0
    a9d0:	|  |  |  |     |      ext.w d0
    a9d2:	|  |  |  |     |      movea.w d0,a0
    a9d4:	|  |  |  |     |      move.l a0,12(sp)
    a9d8:	|  |  |  |     |      move.l 136(sp),96(sp)
    a9de:	|  |  |  |     |      move.l #92303,92(sp)
    a9e6:	|  |  |  |     |      moveq #99,d0
    a9e8:	|  |  |  |     |      not.b d0
    a9ea:	|  |  |  |     |      add.l sp,d0
    a9ec:	|  |  |  |     |      addi.l #-144,d0
    a9f2:	|  |  |  |     |      move.l d0,88(sp)
    a9f6:	|  |  |  |     |      move.l 19c66 <DOSBase>,d0
    a9fc:	|  |  |  |     |      movea.l d0,a6
    a9fe:	|  |  |  |     |      move.l 96(sp),d1
    aa02:	|  |  |  |     |      move.l 92(sp),d2
    aa06:	|  |  |  |     |      move.l 88(sp),d3
    aa0a:	|  |  |  |     |      jsr -354(a6)
    aa0e:	|  |  |  |     |      move.l d0,84(sp)
            FreeVec(makeSureItsText);
    aa12:	|  |  |  |     |      move.l 100(sp),80(sp)
    aa18:	|  |  |  |     |      move.l 19c5e <SysBase>,d0
    aa1e:	|  |  |  |     |      movea.l d0,a6
    aa20:	|  |  |  |     |      movea.l 80(sp),a1
    aa24:	|  |  |  |     |      jsr -690(a6)
        }

        hereWeAre = hereWeAre->next;
    aa28:	|  |  |  \-----|----> movea.l 152(sp),a0
    aa2c:	|  |  |        |      move.l 8(a0),152(sp)
    while (hereWeAre) {
    aa32:	|  \--|--------|----> tst.l 152(sp)
    aa36:	|     \--------|----- bne.w a85e <stackToFile+0x110>
    aa3a:	|              |  /-- bra.s aa3e <stackToFile+0x2f0>
            if (makeSureItsText == NULL) break;
    aa3c:	|              \--|-> nop
    }
    Close(fp);
    aa3e:	|                 \-> move.l 136(sp),20(sp)
    aa44:	|                     move.l 19c66 <DOSBase>,d0
    aa4a:	|                     movea.l d0,a6
    aa4c:	|                     move.l 20(sp),d1
    aa50:	|                     jsr -36(a6)
    aa54:	|                     move.l d0,16(sp)
    return TRUE;
    aa58:	|                     moveq #1,d0
}
    aa5a:	\-------------------> movem.l (sp)+,d2-d3/a6
    aa5e:	                      lea 144(sp),sp
    aa62:	                      rts

0000aa64 <writeStringEncoded>:

void writeStringEncoded (const char * s, BPTR fp) {
    aa64:	       lea -20(sp),sp
    aa68:	       move.l a6,-(sp)
    aa6a:	       move.l d2,-(sp)
	int a, len = strlen (s);
    aa6c:	       move.l 32(sp),-(sp)
    aa70:	       jsr 103ac <strlen>
    aa76:	       addq.l #4,sp
    aa78:	       move.l d0,20(sp)

	put2bytes (len, fp);
    aa7c:	       move.l 36(sp),-(sp)
    aa80:	       move.l 24(sp),-(sp)
    aa84:	       jsr 8d0 <put2bytes>
    aa8a:	       addq.l #8,sp
	for (a = 0; a < len; a ++) {
    aa8c:	       clr.l 24(sp)
    aa90:	   /-- bra.s aae6 <writeStringEncoded+0x82>
		FPutC (fp, s[a] ^ encode1);
    aa92:	/--|-> move.l 36(sp),16(sp)
    aa98:	|  |   move.l 24(sp),d0
    aa9c:	|  |   movea.l 32(sp),a0
    aaa0:	|  |   adda.l d0,a0
    aaa2:	|  |   move.b (a0),d1
    aaa4:	|  |   move.b 19d14 <encode1>,d0
    aaaa:	|  |   eor.b d1,d0
    aaac:	|  |   ext.w d0
    aaae:	|  |   movea.w d0,a0
    aab0:	|  |   move.l a0,12(sp)
    aab4:	|  |   move.l 19c66 <DOSBase>,d0
    aaba:	|  |   movea.l d0,a6
    aabc:	|  |   move.l 16(sp),d1
    aac0:	|  |   move.l 12(sp),d2
    aac4:	|  |   jsr -312(a6)
    aac8:	|  |   move.l d0,8(sp)
		encode1 += encode2;
    aacc:	|  |   move.b 19d14 <encode1>,d0
    aad2:	|  |   move.b d0,d1
    aad4:	|  |   move.b 19d15 <encode2>,d0
    aada:	|  |   add.b d1,d0
    aadc:	|  |   move.b d0,19d14 <encode1>
	for (a = 0; a < len; a ++) {
    aae2:	|  |   addq.l #1,24(sp)
    aae6:	|  \-> move.l 24(sp),d0
    aaea:	|      cmp.l 20(sp),d0
    aaee:	\----- blt.s aa92 <writeStringEncoded+0x2e>
	}
}
    aaf0:	       nop
    aaf2:	       nop
    aaf4:	       move.l (sp)+,d2
    aaf6:	       movea.l (sp)+,a6
    aaf8:	       lea 20(sp),sp
    aafc:	       rts

0000aafe <failSecurityCheck>:

#define builtIn(a) 			static enum builtReturn builtIn_ ## a (int numParams, struct loadedFunction * fun)

#define UNUSEDALL		 	(void) (0 && sizeof(numParams) && sizeof (fun));

BOOL failSecurityCheck(char * fn) {
    aafe:	                   subq.l #4,sp
	if (fn == NULL) return TRUE;
    ab00:	                   tst.l 8(sp)
    ab04:	               /-- bne.s ab0a <failSecurityCheck+0xc>
    ab06:	               |   moveq #1,d0
    ab08:	/--------------|-- bra.s ab88 <failSecurityCheck+0x8a>

	int a = 0;
    ab0a:	|              \-> clr.l (sp)

	while (fn[a]) {
    ab0c:	|     /----------- bra.s ab7a <failSecurityCheck+0x7c>
		switch (fn[a]) {
    ab0e:	|  /--|----------> move.l (sp),d0
    ab10:	|  |  |            movea.l 8(sp),a0
    ab14:	|  |  |            adda.l d0,a0
    ab16:	|  |  |            move.b (a0),d0
    ab18:	|  |  |            ext.w d0
    ab1a:	|  |  |            movea.w d0,a0
    ab1c:	|  |  |            moveq #124,d0
    ab1e:	|  |  |            cmp.l a0,d0
    ab20:	|  |  |     /----- beq.s ab62 <failSecurityCheck+0x64>
    ab22:	|  |  |     |      moveq #124,d1
    ab24:	|  |  |     |      cmp.l a0,d1
    ab26:	|  |  |  /--|----- blt.s ab78 <failSecurityCheck+0x7a>
    ab28:	|  |  |  |  |      moveq #92,d0
    ab2a:	|  |  |  |  |      cmp.l a0,d0
    ab2c:	|  |  |  |  +----- beq.s ab62 <failSecurityCheck+0x64>
    ab2e:	|  |  |  |  |      moveq #92,d1
    ab30:	|  |  |  |  |      cmp.l a0,d1
    ab32:	|  |  |  +--|----- blt.s ab78 <failSecurityCheck+0x7a>
    ab34:	|  |  |  |  |      moveq #60,d0
    ab36:	|  |  |  |  |      cmp.l a0,d0
    ab38:	|  |  |  |  |  /-- blt.s ab58 <failSecurityCheck+0x5a>
    ab3a:	|  |  |  |  |  |   moveq #34,d1
    ab3c:	|  |  |  |  |  |   cmp.l a0,d1
    ab3e:	|  |  |  +--|--|-- bgt.s ab78 <failSecurityCheck+0x7a>
    ab40:	|  |  |  |  |  |   moveq #-34,d1
    ab42:	|  |  |  |  |  |   add.l a0,d1
    ab44:	|  |  |  |  |  |   move.l #83894529,d0
    ab4a:	|  |  |  |  |  |   lsr.l d1,d0
    ab4c:	|  |  |  |  |  |   moveq #1,d1
    ab4e:	|  |  |  |  |  |   and.l d1,d0
    ab50:	|  |  |  |  |  |   sne d0
    ab52:	|  |  |  |  |  |   neg.b d0
    ab54:	|  |  |  |  +--|-- bne.s ab62 <failSecurityCheck+0x64>
    ab56:	|  |  |  +--|--|-- bra.s ab78 <failSecurityCheck+0x7a>
    ab58:	|  |  |  |  |  \-> lea -62(a0),a0
    ab5c:	|  |  |  |  |      moveq #1,d0
    ab5e:	|  |  |  |  |      cmp.l a0,d0
    ab60:	|  |  |  +--|----- bcs.s ab78 <failSecurityCheck+0x7a>
			case '?':
			case '"':
			case '<':
			case '>':
			case '|':
				KPrintF("Filenames may not contain the following characters: \n\n\\  /  :  \"  <  >  |  ?  *\n\nConsequently, the following filename is not allowed:", fn);
    ab62:	|  |  |  |  \----> move.l 8(sp),-(sp)
    ab66:	|  |  |  |         pea 16893 <graphics.c.1c13408a+0x31>
    ab6c:	|  |  |  |         jsr 12f14 <KPrintF>
    ab72:	|  |  |  |         addq.l #8,sp
				return TRUE;
    ab74:	|  |  |  |         moveq #1,d0
    ab76:	+--|--|--|-------- bra.s ab88 <failSecurityCheck+0x8a>
		}
		a++;
    ab78:	|  |  |  \-------> addq.l #1,(sp)
	while (fn[a]) {
    ab7a:	|  |  \----------> move.l (sp),d0
    ab7c:	|  |               movea.l 8(sp),a0
    ab80:	|  |               adda.l d0,a0
    ab82:	|  |               move.b (a0),d0
    ab84:	|  \-------------- bne.s ab0e <failSecurityCheck+0x10>
	}
	return FALSE;
    ab86:	|                  clr.w d0
}
    ab88:	\----------------> addq.l #4,sp
    ab8a:	                   rts

0000ab8c <sayCore>:

static enum builtReturn sayCore (int numParams, struct loadedFunction * fun, BOOL sayIt)
{
    ab8c:	             lea -24(sp),sp
    ab90:	             move.l a6,-(sp)
    ab92:	             move.l 40(sp),d0
    ab96:	             move.w d0,d0
    ab98:	             move.w d0,6(sp)
	int fileNum = -1;
    ab9c:	             moveq #-1,d0
    ab9e:	             move.l d0,12(sp)
	char * newText;
	int objT, p;
	killSpeechTimers ();
    aba2:	             jsr 3db2 <killSpeechTimers>

	switch (numParams) {
    aba8:	             moveq #2,d0
    abaa:	             cmp.l 32(sp),d0
    abae:	      /----- beq.s abf2 <sayCore+0x66>
    abb0:	      |      moveq #3,d0
    abb2:	      |      cmp.l 32(sp),d0
    abb6:	/-----|----- bne.w acd4 <sayCore+0x148>
		case 3:
			if (! getValueType (&fileNum, SVT_FILE, &fun->stack->thisVar)) return BR_ERROR;
    abba:	|     |      movea.l 36(sp),a0
    abbe:	|     |      move.l 24(a0),d0
    abc2:	|     |      move.l d0,-(sp)
    abc4:	|     |      pea 5 <_start+0x5>
    abc8:	|     |      lea 20(sp),a0
    abcc:	|     |      move.l a0,-(sp)
    abce:	|     |      jsr 10ec0 <getValueType>
    abd4:	|     |      lea 12(sp),sp
    abd8:	|     |      tst.w d0
    abda:	|     |  /-- bne.s abe2 <sayCore+0x56>
    abdc:	|     |  |   moveq #1,d0
    abde:	|  /--|--|-- bra.w ace4 <sayCore+0x158>
			trimStack (&fun -> stack);
    abe2:	|  |  |  \-> moveq #24,d0
    abe4:	|  |  |      add.l 36(sp),d0
    abe8:	|  |  |      move.l d0,-(sp)
    abea:	|  |  |      jsr 11844 <trimStack>
    abf0:	|  |  |      addq.l #4,sp
			[[fallthrough]];

		case 2:
			newText = getTextFromAnyVar (&(fun -> stack->thisVar));
    abf2:	|  |  \----> movea.l 36(sp),a0
    abf6:	|  |         move.l 24(a0),d0
    abfa:	|  |         move.l d0,-(sp)
    abfc:	|  |         jsr 11496 <getTextFromAnyVar>
    ac02:	|  |         addq.l #4,sp
    ac04:	|  |         move.l d0,24(sp)
			if (! newText) return BR_ERROR;
    ac08:	|  |     /-- bne.s ac10 <sayCore+0x84>
    ac0a:	|  |     |   moveq #1,d0
    ac0c:	|  +-----|-- bra.w ace4 <sayCore+0x158>
			trimStack (&fun -> stack);
    ac10:	|  |     \-> moveq #24,d0
    ac12:	|  |         add.l 36(sp),d0
    ac16:	|  |         move.l d0,-(sp)
    ac18:	|  |         jsr 11844 <trimStack>
    ac1e:	|  |         addq.l #4,sp
			if (! getValueType(&objT, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    ac20:	|  |         movea.l 36(sp),a0
    ac24:	|  |         move.l 24(a0),d0
    ac28:	|  |         move.l d0,-(sp)
    ac2a:	|  |         pea 7 <_start+0x7>
    ac2e:	|  |         lea 16(sp),a0
    ac32:	|  |         move.l a0,-(sp)
    ac34:	|  |         jsr 10ec0 <getValueType>
    ac3a:	|  |         lea 12(sp),sp
    ac3e:	|  |         tst.w d0
    ac40:	|  |     /-- bne.s ac48 <sayCore+0xbc>
    ac42:	|  |     |   moveq #1,d0
    ac44:	|  +-----|-- bra.w ace4 <sayCore+0x158>
			if (! getValueType(&objT, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    ac48:	|  |     \-> movea.l 36(sp),a0
    ac4c:	|  |         move.l 24(a0),d0
    ac50:	|  |         move.l d0,-(sp)
    ac52:	|  |         pea 7 <_start+0x7>
    ac56:	|  |         lea 16(sp),a0
    ac5a:	|  |         move.l a0,-(sp)
    ac5c:	|  |         jsr 10ec0 <getValueType>
    ac62:	|  |         lea 12(sp),sp
    ac66:	|  |         tst.w d0
    ac68:	|  |     /-- bne.s ac6e <sayCore+0xe2>
    ac6a:	|  |     |   moveq #1,d0
    ac6c:	|  +-----|-- bra.s ace4 <sayCore+0x158>
			trimStack (&fun -> stack);
    ac6e:	|  |     \-> moveq #24,d0
    ac70:	|  |         add.l 36(sp),d0
    ac74:	|  |         move.l d0,-(sp)
    ac76:	|  |         jsr 11844 <trimStack>
    ac7c:	|  |         addq.l #4,sp
			p = wrapSpeech (newText, objT, fileNum, sayIt);
    ac7e:	|  |         movea.w 6(sp),a0
    ac82:	|  |         move.l 12(sp),d1
    ac86:	|  |         move.l 8(sp),d0
    ac8a:	|  |         move.l a0,-(sp)
    ac8c:	|  |         move.l d1,-(sp)
    ac8e:	|  |         move.l d0,-(sp)
    ac90:	|  |         move.l 36(sp),-(sp)
    ac94:	|  |         jsr 5cea <wrapSpeech>
    ac9a:	|  |         lea 16(sp),sp
    ac9e:	|  |         move.l d0,20(sp)
			fun -> timeLeft = p;
    aca2:	|  |         movea.l 36(sp),a0
    aca6:	|  |         move.l 20(sp),12(a0)
			//debugOut ("BUILTIN: sayCore: %s (%i)\n", newText, p);
			fun -> isSpeech = TRUE;
    acac:	|  |         movea.l 36(sp),a0
    acb0:	|  |         move.w #1,50(a0)
			FreeVec(newText);
    acb6:	|  |         move.l 24(sp),16(sp)
    acbc:	|  |         move.l 19c5e <SysBase>,d0
    acc2:	|  |         movea.l d0,a6
    acc4:	|  |         movea.l 16(sp),a1
    acc8:	|  |         jsr -690(a6)
			newText = NULL;
    accc:	|  |         clr.l 24(sp)
			return BR_KEEP_AND_PAUSE;
    acd0:	|  |         moveq #0,d0
    acd2:	|  +-------- bra.s ace4 <sayCore+0x158>
	}

	KPrintF("Function should have either 2 or 3 parameters");
    acd4:	\--|-------> pea 16919 <graphics.c.1c13408a+0xb7>
    acda:	   |         jsr 12f14 <KPrintF>
    ace0:	   |         addq.l #4,sp
	return BR_ERROR;
    ace2:	   |         moveq #1,d0
}
    ace4:	   \-------> movea.l (sp)+,a6
    ace6:	             lea 24(sp),sp
    acea:	             rts

0000acec <builtIn_say>:

builtIn(say)
{
	UNUSEDALL
	//KPrintF("say something");
	return sayCore (numParams, fun, TRUE);
    acec:	pea 1 <_start+0x1>
    acf0:	move.l 12(sp),-(sp)
    acf4:	move.l 12(sp),-(sp)
    acf8:	jsr ab8c <sayCore>
    acfe:	lea 12(sp),sp
}
    ad02:	rts

0000ad04 <builtIn_think>:

builtIn(think)
{
	UNUSEDALL
	return sayCore (numParams, fun, FALSE);
    ad04:	clr.l -(sp)
    ad06:	move.l 12(sp),-(sp)
    ad0a:	move.l 12(sp),-(sp)
    ad0e:	jsr ab8c <sayCore>
    ad14:	lea 12(sp),sp
}
    ad18:	rts

0000ad1a <builtIn_freeze>:
{
	UNUSEDALL
	/*freeze ();
	freezeSubs (); Amiga todo: implement */
	//fun -> freezerLevel = 0;
	return BR_CONTINUE;
    ad1a:	moveq #2,d0
}
    ad1c:	rts

0000ad1e <builtIn_unfreeze>:
builtIn(unfreeze)
{
	UNUSEDALL
	/*unfreeze ();
	unfreezeSubs (); Amiga todo: Implement*/
	return BR_CONTINUE;
    ad1e:	moveq #2,d0
}
    ad20:	rts

0000ad22 <builtIn_howFrozen>:
builtIn(howFrozen)
{
	UNUSEDALL
	/*setVariable (&fun -> reg, SVT_INT, howFrozen ());
	return BR_CONTINUE; Amiga todo implement*/
}
    ad22:	nop
    ad24:	rts

0000ad26 <builtIn_setCursor>:

builtIn(setCursor)
{
    ad26:	subq.l #4,sp
	UNUSEDALL
	struct personaAnimation * aa = getAnimationFromVar (&(fun -> stack -> thisVar));
    ad28:	movea.l 12(sp),a0
    ad2c:	move.l 24(a0),d0
    ad30:	move.l d0,-(sp)
    ad32:	jsr 11398 <getAnimationFromVar>
    ad38:	addq.l #4,sp
    ad3a:	move.l d0,(sp)
	pickAnimCursor (aa);
    ad3c:	move.l (sp),-(sp)
    ad3e:	jsr dba <pickAnimCursor>
    ad44:	addq.l #4,sp
	trimStack (&fun -> stack);
    ad46:	moveq #24,d0
    ad48:	add.l 12(sp),d0
    ad4c:	move.l d0,-(sp)
    ad4e:	jsr 11844 <trimStack>
    ad54:	addq.l #4,sp
	return BR_CONTINUE;
    ad56:	moveq #2,d0
}
    ad58:	addq.l #4,sp
    ad5a:	rts

0000ad5c <builtIn_getMouseX>:

builtIn(getMouseX)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseX + cameraX);
    ad5c:	move.l 19c1e <input+0xa>,d1
    ad62:	move.l 19d18 <cameraX>,d0
    ad68:	add.l d0,d1
    ad6a:	moveq #28,d0
    ad6c:	add.l 8(sp),d0
    ad70:	move.l d1,-(sp)
    ad72:	pea 1 <_start+0x1>
    ad76:	move.l d0,-(sp)
    ad78:	jsr 117b2 <setVariable>
    ad7e:	lea 12(sp),sp
	return BR_CONTINUE;
    ad82:	moveq #2,d0
}
    ad84:	rts

0000ad86 <builtIn_getMouseY>:

builtIn(getMouseY)
{

	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseY + cameraY);
    ad86:	move.l 19c22 <input+0xe>,d1
    ad8c:	move.l 19d1c <cameraY>,d0
    ad92:	add.l d0,d1
    ad94:	moveq #28,d0
    ad96:	add.l 8(sp),d0
    ad9a:	move.l d1,-(sp)
    ad9c:	pea 1 <_start+0x1>
    ada0:	move.l d0,-(sp)
    ada2:	jsr 117b2 <setVariable>
    ada8:	lea 12(sp),sp
	return BR_CONTINUE;
    adac:	moveq #2,d0
}
    adae:	rts

0000adb0 <builtIn_getMouseScreenX>:

builtIn(getMouseScreenX)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseX*cameraZoom);
    adb0:	move.l 19c1e <input+0xa>,d0
    adb6:	move.l d0,-(sp)
    adb8:	jsr 134b0 <__floatsisf>
    adbe:	addq.l #4,sp
    adc0:	move.l d0,d1
    adc2:	move.l 1814a <cameraZoom>,d0
    adc8:	move.l d0,-(sp)
    adca:	move.l d1,-(sp)
    adcc:	jsr 13562 <__mulsf3>
    add2:	addq.l #8,sp
    add4:	move.l d0,-(sp)
    add6:	jsr 13448 <__fixsfsi>
    addc:	addq.l #4,sp
    adde:	move.l d0,d1
    ade0:	moveq #28,d0
    ade2:	add.l 8(sp),d0
    ade6:	move.l d1,-(sp)
    ade8:	pea 1 <_start+0x1>
    adec:	move.l d0,-(sp)
    adee:	jsr 117b2 <setVariable>
    adf4:	lea 12(sp),sp
	return BR_CONTINUE;
    adf8:	moveq #2,d0
}
    adfa:	rts

0000adfc <builtIn_getMouseScreenY>:

builtIn(getMouseScreenY)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseY*cameraZoom);
    adfc:	move.l 19c22 <input+0xe>,d0
    ae02:	move.l d0,-(sp)
    ae04:	jsr 134b0 <__floatsisf>
    ae0a:	addq.l #4,sp
    ae0c:	move.l d0,d1
    ae0e:	move.l 1814a <cameraZoom>,d0
    ae14:	move.l d0,-(sp)
    ae16:	move.l d1,-(sp)
    ae18:	jsr 13562 <__mulsf3>
    ae1e:	addq.l #8,sp
    ae20:	move.l d0,-(sp)
    ae22:	jsr 13448 <__fixsfsi>
    ae28:	addq.l #4,sp
    ae2a:	move.l d0,d1
    ae2c:	moveq #28,d0
    ae2e:	add.l 8(sp),d0
    ae32:	move.l d1,-(sp)
    ae34:	pea 1 <_start+0x1>
    ae38:	move.l d0,-(sp)
    ae3a:	jsr 117b2 <setVariable>
    ae40:	lea 12(sp),sp
	return BR_CONTINUE;
    ae44:	moveq #2,d0
}
    ae46:	rts

0000ae48 <builtIn_getStatusText>:

builtIn(getStatusText)
{
	UNUSEDALL
	makeTextVar (&fun -> reg, statusBarText ());
    ae48:	jsr 579e <statusBarText>
    ae4e:	move.l d0,d1
    ae50:	moveq #28,d0
    ae52:	add.l 8(sp),d0
    ae56:	move.l d1,-(sp)
    ae58:	move.l d0,-(sp)
    ae5a:	jsr 110e2 <makeTextVar>
    ae60:	addq.l #8,sp
	return BR_CONTINUE;
    ae62:	moveq #2,d0
}
    ae64:	rts

0000ae66 <builtIn_getMatchingFiles>:

builtIn(getMatchingFiles)
{
    ae66:	       lea -20(sp),sp
    ae6a:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    ae6c:	       movea.l 32(sp),a0
    ae70:	       move.l 24(a0),d0
    ae74:	       move.l d0,-(sp)
    ae76:	       jsr 11496 <getTextFromAnyVar>
    ae7c:	       addq.l #4,sp
    ae7e:	       move.l d0,20(sp)
	if (! newText) return BR_ERROR;
    ae82:	   /-- bne.s ae8a <builtIn_getMatchingFiles+0x24>
    ae84:	   |   moveq #1,d0
    ae86:	/--|-- bra.w af4c <builtIn_getMatchingFiles+0xe6>
	trimStack (&fun -> stack);
    ae8a:	|  \-> moveq #24,d0
    ae8c:	|      add.l 32(sp),d0
    ae90:	|      move.l d0,-(sp)
    ae92:	|      jsr 11844 <trimStack>
    ae98:	|      addq.l #4,sp
	unlinkVar (&fun -> reg);
    ae9a:	|      moveq #28,d0
    ae9c:	|      add.l 32(sp),d0
    aea0:	|      move.l d0,-(sp)
    aea2:	|      jsr 1110e <unlinkVar>
    aea8:	|      addq.l #4,sp

	// Return value
	fun -> reg.varType = SVT_STACK;
    aeaa:	|      movea.l 32(sp),a0
    aeae:	|      moveq #6,d0
    aeb0:	|      move.l d0,28(a0)
	fun -> reg.varData.theStack = AllocVec(sizeof( struct stackHandler),MEMF_ANY);
    aeb4:	|      moveq #12,d0
    aeb6:	|      move.l d0,16(sp)
    aeba:	|      clr.l 12(sp)
    aebe:	|      move.l 19c5e <SysBase>,d0
    aec4:	|      movea.l d0,a6
    aec6:	|      move.l 16(sp),d0
    aeca:	|      move.l 12(sp),d1
    aece:	|      jsr -684(a6)
    aed2:	|      move.l d0,8(sp)
    aed6:	|      move.l 8(sp),d0
    aeda:	|      movea.l 32(sp),a0
    aede:	|      move.l d0,32(a0)
	if (!(&fun -> reg.varData.theStack)) return BR_ERROR;
    aee2:	|      moveq #32,d0
    aee4:	|      add.l 32(sp),d0
    aee8:	|  /-- bne.s aeee <builtIn_getMatchingFiles+0x88>
    aeea:	|  |   moveq #1,d0
    aeec:	+--|-- bra.s af4c <builtIn_getMatchingFiles+0xe6>
	fun -> reg.varData.theStack -> first = NULL;
    aeee:	|  \-> movea.l 32(sp),a0
    aef2:	|      movea.l 32(a0),a0
    aef6:	|      clr.l (a0)
	fun -> reg.varData.theStack -> last = NULL;
    aef8:	|      movea.l 32(sp),a0
    aefc:	|      movea.l 32(a0),a0
    af00:	|      clr.l 4(a0)
	fun -> reg.varData.theStack -> timesUsed = 1;
    af04:	|      movea.l 32(sp),a0
    af08:	|      movea.l 32(a0),a0
    af0c:	|      moveq #1,d0
    af0e:	|      move.l d0,8(a0)
	if (! getSavedGamesStack (fun -> reg.varData.theStack, newText)) return BR_ERROR;
    af12:	|      movea.l 32(sp),a0
    af16:	|      move.l 32(a0),d0
    af1a:	|      move.l 20(sp),-(sp)
    af1e:	|      move.l d0,-(sp)
    af20:	|      jsr 10c7c <getSavedGamesStack>
    af26:	|      addq.l #8,sp
    af28:	|      tst.w d0
    af2a:	|  /-- bne.s af30 <builtIn_getMatchingFiles+0xca>
    af2c:	|  |   moveq #1,d0
    af2e:	+--|-- bra.s af4c <builtIn_getMatchingFiles+0xe6>
	FreeVec(newText);
    af30:	|  \-> move.l 20(sp),4(sp)
    af36:	|      move.l 19c5e <SysBase>,d0
    af3c:	|      movea.l d0,a6
    af3e:	|      movea.l 4(sp),a1
    af42:	|      jsr -690(a6)
	newText = NULL;
    af46:	|      clr.l 20(sp)
	return BR_CONTINUE;
    af4a:	|      moveq #2,d0
}
    af4c:	\----> movea.l (sp)+,a6
    af4e:	       lea 20(sp),sp
    af52:	       rts

0000af54 <builtIn_saveGame>:

builtIn(saveGame)
{
    af54:	       lea -12(sp),sp
    af58:	       move.l a6,-(sp)

    /*if (frozenStuff) {
        fatal ("Can't save game state while the engine is frozen");
    }*/

    loadNow = getTextFromAnyVar(&(fun->stack->thisVar));
    af5a:	       movea.l 24(sp),a0
    af5e:	       move.l 24(a0),d0
    af62:	       move.l d0,-(sp)
    af64:	       jsr 11496 <getTextFromAnyVar>
    af6a:	       addq.l #4,sp
    af6c:	       move.l d0,19c2a <loadNow>
    trimStack(&fun->stack);
    af72:	       moveq #24,d0
    af74:	       add.l 24(sp),d0
    af78:	       move.l d0,-(sp)
    af7a:	       jsr 11844 <trimStack>
    af80:	       addq.l #4,sp

    char *aaaaa = encodeFilename(loadNow);
    af82:	       move.l 19c2a <loadNow>,d0
    af88:	       move.l d0,-(sp)
    af8a:	       jsr 2fe <encodeFilename>
    af90:	       addq.l #4,sp
    af92:	       move.l d0,12(sp)
    FreeVec(loadNow);
    af96:	       move.l 19c2a <loadNow>,8(sp)
    af9e:	       move.l 19c5e <SysBase>,d0
    afa4:	       movea.l d0,a6
    afa6:	       movea.l 8(sp),a1
    afaa:	       jsr -690(a6)
    if (failSecurityCheck(aaaaa)) return BR_ERROR; // Won't fail if encoded, how cool is that? OK, not very.
    afae:	       move.l 12(sp),-(sp)
    afb2:	       jsr aafe <failSecurityCheck>
    afb8:	       addq.l #4,sp
    afba:	       tst.w d0
    afbc:	   /-- beq.s afc2 <builtIn_saveGame+0x6e>
    afbe:	   |   moveq #1,d0
    afc0:	/--|-- bra.s b012 <builtIn_saveGame+0xbe>

    loadNow = joinStrings(":", aaaaa);
    afc2:	|  \-> move.l 12(sp),-(sp)
    afc6:	|      pea 16947 <graphics.c.1c13408a+0xe5>
    afcc:	|      jsr 103ec <joinStrings>
    afd2:	|      addq.l #8,sp
    afd4:	|      move.l d0,19c2a <loadNow>
    FreeVec(aaaaa);
    afda:	|      move.l 12(sp),4(sp)
    afe0:	|      move.l 19c5e <SysBase>,d0
    afe6:	|      movea.l d0,a6
    afe8:	|      movea.l 4(sp),a1
    afec:	|      jsr -690(a6)

    setVariable(&fun->reg, SVT_INT, 0);
    aff0:	|      moveq #28,d0
    aff2:	|      add.l 24(sp),d0
    aff6:	|      clr.l -(sp)
    aff8:	|      pea 1 <_start+0x1>
    affc:	|      move.l d0,-(sp)
    affe:	|      jsr 117b2 <setVariable>
    b004:	|      lea 12(sp),sp
    saverFunc = fun;
    b008:	|      move.l 24(sp),19d28 <saverFunc>
    return BR_KEEP_AND_PAUSE;
    b010:	|      moveq #0,d0
}
    b012:	\----> movea.l (sp)+,a6
    b014:	       lea 12(sp),sp
    b018:	       rts

0000b01a <builtIn_fileExists>:

builtIn(fileExists)
{
    b01a:	       lea -36(sp),sp
    b01e:	       move.l a6,-(sp)
    b020:	       move.l d2,-(sp)
    UNUSEDALL
    loadNow = getTextFromAnyVar(&(fun->stack->thisVar));
    b022:	       movea.l 52(sp),a0
    b026:	       move.l 24(a0),d0
    b02a:	       move.l d0,-(sp)
    b02c:	       jsr 11496 <getTextFromAnyVar>
    b032:	       addq.l #4,sp
    b034:	       move.l d0,19c2a <loadNow>
    trimStack(&fun->stack);
    b03a:	       moveq #24,d0
    b03c:	       add.l 52(sp),d0
    b040:	       move.l d0,-(sp)
    b042:	       jsr 11844 <trimStack>
    b048:	       addq.l #4,sp
    char *aaaaa = encodeFilename(loadNow);
    b04a:	       move.l 19c2a <loadNow>,d0
    b050:	       move.l d0,-(sp)
    b052:	       jsr 2fe <encodeFilename>
    b058:	       addq.l #4,sp
    b05a:	       move.l d0,40(sp)
    FreeVec(loadNow);
    b05e:	       move.l 19c2a <loadNow>,36(sp)
    b066:	       move.l 19c5e <SysBase>,d0
    b06c:	       movea.l d0,a6
    b06e:	       movea.l 36(sp),a1
    b072:	       jsr -690(a6)
    if (failSecurityCheck(aaaaa)) return BR_ERROR;
    b076:	       move.l 40(sp),-(sp)
    b07a:	       jsr aafe <failSecurityCheck>
    b080:	       addq.l #4,sp
    b082:	       tst.w d0
    b084:	   /-- beq.s b08c <builtIn_fileExists+0x72>
    b086:	   |   moveq #1,d0
    b088:	/--|-- bra.w b12c <builtIn_fileExists+0x112>
    BPTR fp = Open(aaaaa, MODE_OLDFILE);
    b08c:	|  \-> move.l 40(sp),32(sp)
    b092:	|      move.l #1005,28(sp)
    b09a:	|      move.l 19c66 <DOSBase>,d0
    b0a0:	|      movea.l d0,a6
    b0a2:	|      move.l 32(sp),d1
    b0a6:	|      move.l 28(sp),d2
    b0aa:	|      jsr -30(a6)
    b0ae:	|      move.l d0,24(sp)
    b0b2:	|      move.l 24(sp),d0
    b0b6:	|      move.l d0,20(sp)
    if (!fp) {        
    b0ba:	|  /-- bne.s b0ca <builtIn_fileExists+0xb0>
        KPrintF("Can't get current directory.\n");      
    b0bc:	|  |   pea 16949 <graphics.c.1c13408a+0xe7>
    b0c2:	|  |   jsr 12f14 <KPrintF>
    b0c8:	|  |   addq.l #4,sp
    }
    // Return value
    setVariable(&fun->reg, SVT_INT, (fp != NULL));
    b0ca:	|  \-> tst.l 20(sp)
    b0ce:	|      sne d0
    b0d0:	|      neg.b d0
    b0d2:	|      moveq #0,d1
    b0d4:	|      move.b d0,d1
    b0d6:	|      moveq #28,d0
    b0d8:	|      add.l 52(sp),d0
    b0dc:	|      move.l d1,-(sp)
    b0de:	|      pea 1 <_start+0x1>
    b0e2:	|      move.l d0,-(sp)
    b0e4:	|      jsr 117b2 <setVariable>
    b0ea:	|      lea 12(sp),sp
    if (fp) Close(fp);
    b0ee:	|      tst.l 20(sp)
    b0f2:	|  /-- beq.s b10e <builtIn_fileExists+0xf4>
    b0f4:	|  |   move.l 20(sp),16(sp)
    b0fa:	|  |   move.l 19c66 <DOSBase>,d0
    b100:	|  |   movea.l d0,a6
    b102:	|  |   move.l 16(sp),d1
    b106:	|  |   jsr -36(a6)
    b10a:	|  |   move.l d0,12(sp)
    FreeVec(aaaaa);
    b10e:	|  \-> move.l 40(sp),8(sp)
    b114:	|      move.l 19c5e <SysBase>,d0
    b11a:	|      movea.l d0,a6
    b11c:	|      movea.l 8(sp),a1
    b120:	|      jsr -690(a6)
    loadNow = NULL;
    b124:	|      clr.l 19c2a <loadNow>
    return BR_CONTINUE;
    b12a:	|      moveq #2,d0
}
    b12c:	\----> move.l (sp)+,d2
    b12e:	       movea.l (sp)+,a6
    b130:	       lea 36(sp),sp
    b134:	       rts

0000b136 <builtIn_loadGame>:

builtIn(loadGame)
{
    b136:	       lea -36(sp),sp
    b13a:	       move.l a6,-(sp)
    b13c:	       move.l d2,-(sp)
    UNUSEDALL
    char *aaaaa = getTextFromAnyVar(&(fun->stack->thisVar));
    b13e:	       movea.l 52(sp),a0
    b142:	       move.l 24(a0),d0
    b146:	       move.l d0,-(sp)
    b148:	       jsr 11496 <getTextFromAnyVar>
    b14e:	       addq.l #4,sp
    b150:	       move.l d0,40(sp)
    trimStack(&fun->stack);
    b154:	       moveq #24,d0
    b156:	       add.l 52(sp),d0
    b15a:	       move.l d0,-(sp)
    b15c:	       jsr 11844 <trimStack>
    b162:	       addq.l #4,sp
    loadNow = encodeFilename(aaaaa);
    b164:	       move.l 40(sp),-(sp)
    b168:	       jsr 2fe <encodeFilename>
    b16e:	       addq.l #4,sp
    b170:	       move.l d0,19c2a <loadNow>
    FreeVec(aaaaa);
    b176:	       move.l 40(sp),36(sp)
    b17c:	       move.l 19c5e <SysBase>,d0
    b182:	       movea.l d0,a6
    b184:	       movea.l 36(sp),a1
    b188:	       jsr -690(a6)

    /*if (frozenStuff) {
        fatal("Can't load a saved game while the engine is frozen");
    }*/

    if (failSecurityCheck(loadNow)) return BR_ERROR;
    b18c:	       move.l 19c2a <loadNow>,d0
    b192:	       move.l d0,-(sp)
    b194:	       jsr aafe <failSecurityCheck>
    b19a:	       addq.l #4,sp
    b19c:	       tst.w d0
    b19e:	   /-- beq.s b1a4 <builtIn_loadGame+0x6e>
    b1a0:	   |   moveq #1,d0
    b1a2:	/--|-- bra.s b214 <builtIn_loadGame+0xde>
    BPTR fp = Open(loadNow, MODE_OLDFILE);
    b1a4:	|  \-> move.l 19c2a <loadNow>,32(sp)
    b1ac:	|      move.l #1005,28(sp)
    b1b4:	|      move.l 19c66 <DOSBase>,d0
    b1ba:	|      movea.l d0,a6
    b1bc:	|      move.l 32(sp),d1
    b1c0:	|      move.l 28(sp),d2
    b1c4:	|      jsr -30(a6)
    b1c8:	|      move.l d0,24(sp)
    b1cc:	|      move.l 24(sp),d0
    b1d0:	|      move.l d0,20(sp)
    if (fp) {
    b1d4:	|  /-- beq.s b1f4 <builtIn_loadGame+0xbe>
        Close(fp);
    b1d6:	|  |   move.l 20(sp),12(sp)
    b1dc:	|  |   move.l 19c66 <DOSBase>,d0
    b1e2:	|  |   movea.l d0,a6
    b1e4:	|  |   move.l 12(sp),d1
    b1e8:	|  |   jsr -36(a6)
    b1ec:	|  |   move.l d0,8(sp)
        return BR_KEEP_AND_PAUSE;
    b1f0:	|  |   moveq #0,d0
    b1f2:	+--|-- bra.s b214 <builtIn_loadGame+0xde>
    }
    FreeVec(loadNow);
    b1f4:	|  \-> move.l 19c2a <loadNow>,16(sp)
    b1fc:	|      move.l 19c5e <SysBase>,d0
    b202:	|      movea.l d0,a6
    b204:	|      movea.l 16(sp),a1
    b208:	|      jsr -690(a6)
    loadNow = NULL;
    b20c:	|      clr.l 19c2a <loadNow>
    return BR_CONTINUE;
    b212:	|      moveq #2,d0
}
    b214:	\----> move.l (sp)+,d2
    b216:	       movea.l (sp)+,a6
    b218:	       lea 36(sp),sp
    b21c:	       rts

0000b21e <builtIn_blankScreen>:
#pragma mark Background image - Painting

builtIn(blankScreen)
{
	UNUSEDALL
	blankScreen (0, 0, sceneWidth, sceneHeight);
    b21e:	move.l 19cfe <sceneHeight>,d0
    b224:	move.l d0,d1
    b226:	move.l 19cfa <sceneWidth>,d0
    b22c:	move.l d1,-(sp)
    b22e:	move.l d0,-(sp)
    b230:	clr.l -(sp)
    b232:	clr.l -(sp)
    b234:	jsr 999a <blankScreen>
    b23a:	lea 16(sp),sp
	return BR_CONTINUE;
    b23e:	moveq #2,d0
}
    b240:	rts

0000b242 <builtIn_blankArea>:

builtIn(blankArea)
{
    b242:	       lea -16(sp),sp
	UNUSEDALL
	int x1, y1, x2, y2;
	if (! getValueType (&y2, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    b246:	       movea.l 24(sp),a0
    b24a:	       move.l 24(a0),d0
    b24e:	       move.l d0,-(sp)
    b250:	       pea 1 <_start+0x1>
    b254:	       lea 8(sp),a0
    b258:	       move.l a0,-(sp)
    b25a:	       jsr 10ec0 <getValueType>
    b260:	       lea 12(sp),sp
    b264:	       tst.w d0
    b266:	   /-- bne.s b26e <builtIn_blankArea+0x2c>
    b268:	   |   moveq #1,d0
    b26a:	/--|-- bra.w b344 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    b26e:	|  \-> moveq #24,d0
    b270:	|      add.l 24(sp),d0
    b274:	|      move.l d0,-(sp)
    b276:	|      jsr 11844 <trimStack>
    b27c:	|      addq.l #4,sp
	if (! getValueType (&x2, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    b27e:	|      movea.l 24(sp),a0
    b282:	|      move.l 24(a0),d0
    b286:	|      move.l d0,-(sp)
    b288:	|      pea 1 <_start+0x1>
    b28c:	|      lea 12(sp),a0
    b290:	|      move.l a0,-(sp)
    b292:	|      jsr 10ec0 <getValueType>
    b298:	|      lea 12(sp),sp
    b29c:	|      tst.w d0
    b29e:	|  /-- bne.s b2a6 <builtIn_blankArea+0x64>
    b2a0:	|  |   moveq #1,d0
    b2a2:	+--|-- bra.w b344 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    b2a6:	|  \-> moveq #24,d0
    b2a8:	|      add.l 24(sp),d0
    b2ac:	|      move.l d0,-(sp)
    b2ae:	|      jsr 11844 <trimStack>
    b2b4:	|      addq.l #4,sp
	if (! getValueType (&y1, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    b2b6:	|      movea.l 24(sp),a0
    b2ba:	|      move.l 24(a0),d0
    b2be:	|      move.l d0,-(sp)
    b2c0:	|      pea 1 <_start+0x1>
    b2c4:	|      moveq #16,d0
    b2c6:	|      add.l sp,d0
    b2c8:	|      move.l d0,-(sp)
    b2ca:	|      jsr 10ec0 <getValueType>
    b2d0:	|      lea 12(sp),sp
    b2d4:	|      tst.w d0
    b2d6:	|  /-- bne.s b2dc <builtIn_blankArea+0x9a>
    b2d8:	|  |   moveq #1,d0
    b2da:	+--|-- bra.s b344 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    b2dc:	|  \-> moveq #24,d0
    b2de:	|      add.l 24(sp),d0
    b2e2:	|      move.l d0,-(sp)
    b2e4:	|      jsr 11844 <trimStack>
    b2ea:	|      addq.l #4,sp
	if (! getValueType (&x1, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    b2ec:	|      movea.l 24(sp),a0
    b2f0:	|      move.l 24(a0),d0
    b2f4:	|      move.l d0,-(sp)
    b2f6:	|      pea 1 <_start+0x1>
    b2fa:	|      moveq #20,d0
    b2fc:	|      add.l sp,d0
    b2fe:	|      move.l d0,-(sp)
    b300:	|      jsr 10ec0 <getValueType>
    b306:	|      lea 12(sp),sp
    b30a:	|      tst.w d0
    b30c:	|  /-- bne.s b312 <builtIn_blankArea+0xd0>
    b30e:	|  |   moveq #1,d0
    b310:	+--|-- bra.s b344 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    b312:	|  \-> moveq #24,d0
    b314:	|      add.l 24(sp),d0
    b318:	|      move.l d0,-(sp)
    b31a:	|      jsr 11844 <trimStack>
    b320:	|      addq.l #4,sp
	blankScreen (x1, y1, x2, y2);
    b322:	|      movea.l (sp),a1
    b324:	|      movea.l 4(sp),a0
    b328:	|      move.l 8(sp),d1
    b32c:	|      move.l 12(sp),d0
    b330:	|      move.l a1,-(sp)
    b332:	|      move.l a0,-(sp)
    b334:	|      move.l d1,-(sp)
    b336:	|      move.l d0,-(sp)
    b338:	|      jsr 999a <blankScreen>
    b33e:	|      lea 16(sp),sp
	return BR_CONTINUE;
    b342:	|      moveq #2,d0
}
    b344:	\----> lea 16(sp),sp
    b348:	       rts

0000b34a <builtIn_darkBackground>:

builtIn(darkBackground)
{
	UNUSEDALL
	darkScreen ();
    b34a:	jsr 99ae <darkScreen>
	return BR_CONTINUE;
    b350:	moveq #2,d0
}
    b352:	rts

0000b354 <builtIn_addOverlay>:

builtIn(addOverlay)
{
    b354:	       lea -12(sp),sp
	UNUSEDALL
	int fileNumber, xPos, yPos;
	if (! getValueType(&yPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    b358:	       movea.l 20(sp),a0
    b35c:	       move.l 24(a0),d0
    b360:	       move.l d0,-(sp)
    b362:	       pea 1 <_start+0x1>
    b366:	       lea 8(sp),a0
    b36a:	       move.l a0,-(sp)
    b36c:	       jsr 10ec0 <getValueType>
    b372:	       lea 12(sp),sp
    b376:	       tst.w d0
    b378:	   /-- bne.s b380 <builtIn_addOverlay+0x2c>
    b37a:	   |   moveq #1,d0
    b37c:	/--|-- bra.w b418 <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    b380:	|  \-> moveq #24,d0
    b382:	|      add.l 20(sp),d0
    b386:	|      move.l d0,-(sp)
    b388:	|      jsr 11844 <trimStack>
    b38e:	|      addq.l #4,sp
	if (! getValueType(&xPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    b390:	|      movea.l 20(sp),a0
    b394:	|      move.l 24(a0),d0
    b398:	|      move.l d0,-(sp)
    b39a:	|      pea 1 <_start+0x1>
    b39e:	|      moveq #12,d0
    b3a0:	|      add.l sp,d0
    b3a2:	|      move.l d0,-(sp)
    b3a4:	|      jsr 10ec0 <getValueType>
    b3aa:	|      lea 12(sp),sp
    b3ae:	|      tst.w d0
    b3b0:	|  /-- bne.s b3b6 <builtIn_addOverlay+0x62>
    b3b2:	|  |   moveq #1,d0
    b3b4:	+--|-- bra.s b418 <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    b3b6:	|  \-> moveq #24,d0
    b3b8:	|      add.l 20(sp),d0
    b3bc:	|      move.l d0,-(sp)
    b3be:	|      jsr 11844 <trimStack>
    b3c4:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    b3c6:	|      movea.l 20(sp),a0
    b3ca:	|      move.l 24(a0),d0
    b3ce:	|      move.l d0,-(sp)
    b3d0:	|      pea 5 <_start+0x5>
    b3d4:	|      moveq #16,d0
    b3d6:	|      add.l sp,d0
    b3d8:	|      move.l d0,-(sp)
    b3da:	|      jsr 10ec0 <getValueType>
    b3e0:	|      lea 12(sp),sp
    b3e4:	|      tst.w d0
    b3e6:	|  /-- bne.s b3ec <builtIn_addOverlay+0x98>
    b3e8:	|  |   moveq #1,d0
    b3ea:	+--|-- bra.s b418 <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    b3ec:	|  \-> moveq #24,d0
    b3ee:	|      add.l 20(sp),d0
    b3f2:	|      move.l d0,-(sp)
    b3f4:	|      jsr 11844 <trimStack>
    b3fa:	|      addq.l #4,sp
	loadBackDrop (fileNumber, xPos, yPos);
    b3fc:	|      movea.l (sp),a0
    b3fe:	|      move.l 4(sp),d1
    b402:	|      move.l 8(sp),d0
    b406:	|      move.l a0,-(sp)
    b408:	|      move.l d1,-(sp)
    b40a:	|      move.l d0,-(sp)
    b40c:	|      jsr 9acc <loadBackDrop>
    b412:	|      lea 12(sp),sp
	return BR_CONTINUE;
    b416:	|      moveq #2,d0
}
    b418:	\----> lea 12(sp),sp
    b41c:	       rts

0000b41e <builtIn_mixOverlay>:

builtIn(mixOverlay)
{
    b41e:	       lea -12(sp),sp
	UNUSEDALL
	int fileNumber, xPos, yPos;
	if (! getValueType(&yPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    b422:	       movea.l 20(sp),a0
    b426:	       move.l 24(a0),d0
    b42a:	       move.l d0,-(sp)
    b42c:	       pea 1 <_start+0x1>
    b430:	       lea 8(sp),a0
    b434:	       move.l a0,-(sp)
    b436:	       jsr 10ec0 <getValueType>
    b43c:	       lea 12(sp),sp
    b440:	       tst.w d0
    b442:	   /-- bne.s b44a <builtIn_mixOverlay+0x2c>
    b444:	   |   moveq #1,d0
    b446:	/--|-- bra.w b4e2 <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    b44a:	|  \-> moveq #24,d0
    b44c:	|      add.l 20(sp),d0
    b450:	|      move.l d0,-(sp)
    b452:	|      jsr 11844 <trimStack>
    b458:	|      addq.l #4,sp
	if (! getValueType(&xPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    b45a:	|      movea.l 20(sp),a0
    b45e:	|      move.l 24(a0),d0
    b462:	|      move.l d0,-(sp)
    b464:	|      pea 1 <_start+0x1>
    b468:	|      moveq #12,d0
    b46a:	|      add.l sp,d0
    b46c:	|      move.l d0,-(sp)
    b46e:	|      jsr 10ec0 <getValueType>
    b474:	|      lea 12(sp),sp
    b478:	|      tst.w d0
    b47a:	|  /-- bne.s b480 <builtIn_mixOverlay+0x62>
    b47c:	|  |   moveq #1,d0
    b47e:	+--|-- bra.s b4e2 <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    b480:	|  \-> moveq #24,d0
    b482:	|      add.l 20(sp),d0
    b486:	|      move.l d0,-(sp)
    b488:	|      jsr 11844 <trimStack>
    b48e:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    b490:	|      movea.l 20(sp),a0
    b494:	|      move.l 24(a0),d0
    b498:	|      move.l d0,-(sp)
    b49a:	|      pea 5 <_start+0x5>
    b49e:	|      moveq #16,d0
    b4a0:	|      add.l sp,d0
    b4a2:	|      move.l d0,-(sp)
    b4a4:	|      jsr 10ec0 <getValueType>
    b4aa:	|      lea 12(sp),sp
    b4ae:	|      tst.w d0
    b4b0:	|  /-- bne.s b4b6 <builtIn_mixOverlay+0x98>
    b4b2:	|  |   moveq #1,d0
    b4b4:	+--|-- bra.s b4e2 <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    b4b6:	|  \-> moveq #24,d0
    b4b8:	|      add.l 20(sp),d0
    b4bc:	|      move.l d0,-(sp)
    b4be:	|      jsr 11844 <trimStack>
    b4c4:	|      addq.l #4,sp
	mixBackDrop (fileNumber, xPos, yPos);
    b4c6:	|      movea.l (sp),a0
    b4c8:	|      move.l 4(sp),d1
    b4cc:	|      move.l 8(sp),d0
    b4d0:	|      move.l a0,-(sp)
    b4d2:	|      move.l d1,-(sp)
    b4d4:	|      move.l d0,-(sp)
    b4d6:	|      jsr 9b42 <mixBackDrop>
    b4dc:	|      lea 12(sp),sp
	return BR_CONTINUE;
    b4e0:	|      moveq #2,d0
}
    b4e2:	\----> lea 12(sp),sp
    b4e6:	       rts

0000b4e8 <builtIn_pasteImage>:

builtIn(pasteImage)
{
    b4e8:	       lea -12(sp),sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    b4ec:	       movea.l 20(sp),a0
    b4f0:	       move.l 24(a0),d0
    b4f4:	       move.l d0,-(sp)
    b4f6:	       pea 1 <_start+0x1>
    b4fa:	       lea 8(sp),a0
    b4fe:	       move.l a0,-(sp)
    b500:	       jsr 10ec0 <getValueType>
    b506:	       lea 12(sp),sp
    b50a:	       tst.w d0
    b50c:	   /-- bne.s b514 <builtIn_pasteImage+0x2c>
    b50e:	   |   moveq #1,d0
    b510:	/--|-- bra.w b5a4 <builtIn_pasteImage+0xbc>
	trimStack (&fun -> stack);
    b514:	|  \-> moveq #24,d0
    b516:	|      add.l 20(sp),d0
    b51a:	|      move.l d0,-(sp)
    b51c:	|      jsr 11844 <trimStack>
    b522:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    b524:	|      movea.l 20(sp),a0
    b528:	|      move.l 24(a0),d0
    b52c:	|      move.l d0,-(sp)
    b52e:	|      pea 1 <_start+0x1>
    b532:	|      moveq #12,d0
    b534:	|      add.l sp,d0
    b536:	|      move.l d0,-(sp)
    b538:	|      jsr 10ec0 <getValueType>
    b53e:	|      lea 12(sp),sp
    b542:	|      tst.w d0
    b544:	|  /-- bne.s b54a <builtIn_pasteImage+0x62>
    b546:	|  |   moveq #1,d0
    b548:	+--|-- bra.s b5a4 <builtIn_pasteImage+0xbc>
	trimStack (&fun -> stack);
    b54a:	|  \-> moveq #24,d0
    b54c:	|      add.l 20(sp),d0
    b550:	|      move.l d0,-(sp)
    b552:	|      jsr 11844 <trimStack>
    b558:	|      addq.l #4,sp
	struct personaAnimation * pp = getAnimationFromVar (&(fun -> stack -> thisVar));
    b55a:	|      movea.l 20(sp),a0
    b55e:	|      move.l 24(a0),d0
    b562:	|      move.l d0,-(sp)
    b564:	|      jsr 11398 <getAnimationFromVar>
    b56a:	|      addq.l #4,sp
    b56c:	|      move.l d0,8(sp)
	trimStack (&fun -> stack);
    b570:	|      moveq #24,d0
    b572:	|      add.l 20(sp),d0
    b576:	|      move.l d0,-(sp)
    b578:	|      jsr 11844 <trimStack>
    b57e:	|      addq.l #4,sp
	if (pp == NULL) return BR_CONTINUE;
    b580:	|      tst.l 8(sp)
    b584:	|  /-- bne.s b58a <builtIn_pasteImage+0xa2>
    b586:	|  |   moveq #2,d0
    b588:	+--|-- bra.s b5a4 <builtIn_pasteImage+0xbc>

	pasteCursor (x, y, pp);
    b58a:	|  \-> move.l (sp),d1
    b58c:	|      move.l 4(sp),d0
    b590:	|      move.l 8(sp),-(sp)
    b594:	|      move.l d1,-(sp)
    b596:	|      move.l d0,-(sp)
    b598:	|      jsr de2 <pasteCursor>
    b59e:	|      lea 12(sp),sp
	return BR_CONTINUE;
    b5a2:	|      moveq #2,d0
}
    b5a4:	\----> lea 12(sp),sp
    b5a8:	       rts

0000b5aa <builtIn_setSceneDimensions>:

#pragma mark -
#pragma mark Background Image - Scrolling

builtIn(setSceneDimensions)
{
    b5aa:	       subq.l #8,sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    b5ac:	       movea.l 16(sp),a0
    b5b0:	       move.l 24(a0),d0
    b5b4:	       move.l d0,-(sp)
    b5b6:	       pea 1 <_start+0x1>
    b5ba:	       move.l sp,d0
    b5bc:	       addq.l #8,d0
    b5be:	       move.l d0,-(sp)
    b5c0:	       jsr 10ec0 <getValueType>
    b5c6:	       lea 12(sp),sp
    b5ca:	       tst.w d0
    b5cc:	   /-- bne.s b5d4 <builtIn_setSceneDimensions+0x2a>
    b5ce:	   |   moveq #1,d0
    b5d0:	/--|-- bra.w b65c <builtIn_setSceneDimensions+0xb2>
	trimStack (&fun -> stack);
    b5d4:	|  \-> moveq #24,d0
    b5d6:	|      add.l 16(sp),d0
    b5da:	|      move.l d0,-(sp)
    b5dc:	|      jsr 11844 <trimStack>
    b5e2:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    b5e4:	|      movea.l 16(sp),a0
    b5e8:	|      move.l 24(a0),d0
    b5ec:	|      move.l d0,-(sp)
    b5ee:	|      pea 1 <_start+0x1>
    b5f2:	|      moveq #12,d0
    b5f4:	|      add.l sp,d0
    b5f6:	|      move.l d0,-(sp)
    b5f8:	|      jsr 10ec0 <getValueType>
    b5fe:	|      lea 12(sp),sp
    b602:	|      tst.w d0
    b604:	|  /-- bne.s b60a <builtIn_setSceneDimensions+0x60>
    b606:	|  |   moveq #1,d0
    b608:	+--|-- bra.s b65c <builtIn_setSceneDimensions+0xb2>
	trimStack (&fun -> stack);
    b60a:	|  \-> moveq #24,d0
    b60c:	|      add.l 16(sp),d0
    b610:	|      move.l d0,-(sp)
    b612:	|      jsr 11844 <trimStack>
    b618:	|      addq.l #4,sp
	if (resizeBackdrop (x, y)) {
    b61a:	|      move.l (sp),d1
    b61c:	|      move.l 4(sp),d0
    b620:	|      move.l d1,-(sp)
    b622:	|      move.l d0,-(sp)
    b624:	|      jsr 9bfe <resizeBackdrop>
    b62a:	|      addq.l #8,sp
    b62c:	|      tst.w d0
    b62e:	|  /-- beq.s b64c <builtIn_setSceneDimensions+0xa2>
		blankScreen (0, 0, x, y);
    b630:	|  |   move.l (sp),d1
    b632:	|  |   move.l 4(sp),d0
    b636:	|  |   move.l d1,-(sp)
    b638:	|  |   move.l d0,-(sp)
    b63a:	|  |   clr.l -(sp)
    b63c:	|  |   clr.l -(sp)
    b63e:	|  |   jsr 999a <blankScreen>
    b644:	|  |   lea 16(sp),sp
		return BR_CONTINUE;
    b648:	|  |   moveq #2,d0
    b64a:	+--|-- bra.s b65c <builtIn_setSceneDimensions+0xb2>
	}
	KPrintF("Out of memory creating new backdrop.");
    b64c:	|  \-> pea 16967 <graphics.c.1c13408a+0x105>
    b652:	|      jsr 12f14 <KPrintF>
    b658:	|      addq.l #4,sp
	return BR_ERROR;
    b65a:	|      moveq #1,d0
}
    b65c:	\----> addq.l #8,sp
    b65e:	       rts

0000b660 <builtIn_aimCamera>:

builtIn(aimCamera)
{
    b660:	          move.l d3,-(sp)
    b662:	          move.l d2,-(sp)
	UNUSEDALL
	if (! getValueType(&cameraY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    b664:	          movea.l 16(sp),a0
    b668:	          move.l 24(a0),d0
    b66c:	          move.l d0,-(sp)
    b66e:	          pea 1 <_start+0x1>
    b672:	          pea 19d1c <cameraY>
    b678:	          jsr 10ec0 <getValueType>
    b67e:	          lea 12(sp),sp
    b682:	          tst.w d0
    b684:	      /-- bne.s b68c <builtIn_aimCamera+0x2c>
    b686:	      |   moveq #1,d0
    b688:	/-----|-- bra.w b90e <builtIn_aimCamera+0x2ae>
	trimStack (&fun -> stack);
    b68c:	|     \-> moveq #24,d0
    b68e:	|         add.l 16(sp),d0
    b692:	|         move.l d0,-(sp)
    b694:	|         jsr 11844 <trimStack>
    b69a:	|         addq.l #4,sp
	if (! getValueType(&cameraX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    b69c:	|         movea.l 16(sp),a0
    b6a0:	|         move.l 24(a0),d0
    b6a4:	|         move.l d0,-(sp)
    b6a6:	|         pea 1 <_start+0x1>
    b6aa:	|         pea 19d18 <cameraX>
    b6b0:	|         jsr 10ec0 <getValueType>
    b6b6:	|         lea 12(sp),sp
    b6ba:	|         tst.w d0
    b6bc:	|     /-- bne.s b6c4 <builtIn_aimCamera+0x64>
    b6be:	|     |   moveq #1,d0
    b6c0:	+-----|-- bra.w b90e <builtIn_aimCamera+0x2ae>
	trimStack (&fun -> stack);
    b6c4:	|     \-> moveq #24,d0
    b6c6:	|         add.l 16(sp),d0
    b6ca:	|         move.l d0,-(sp)
    b6cc:	|         jsr 11844 <trimStack>
    b6d2:	|         addq.l #4,sp

	cameraX -= (FLOAT)(winWidth >> 1)/ cameraZoom;
    b6d4:	|         move.l 19d18 <cameraX>,d0
    b6da:	|         move.l d0,-(sp)
    b6dc:	|         jsr 134b0 <__floatsisf>
    b6e2:	|         addq.l #4,sp
    b6e4:	|         move.l d0,d2
    b6e6:	|         move.l 19b5e <winWidth>,d0
    b6ec:	|         lsr.l #1,d0
    b6ee:	|         move.l d0,-(sp)
    b6f0:	|         jsr 134d8 <__floatunsisf>
    b6f6:	|         addq.l #4,sp
    b6f8:	|         move.l d0,d1
    b6fa:	|         move.l 1814a <cameraZoom>,d0
    b700:	|         move.l d0,-(sp)
    b702:	|         move.l d1,-(sp)
    b704:	|         jsr 1335c <__divsf3>
    b70a:	|         addq.l #8,sp
    b70c:	|         move.l d0,-(sp)
    b70e:	|         move.l d2,-(sp)
    b710:	|         jsr 137a4 <__subsf3>
    b716:	|         addq.l #8,sp
    b718:	|         move.l d0,-(sp)
    b71a:	|         jsr 13448 <__fixsfsi>
    b720:	|         addq.l #4,sp
    b722:	|         move.l d0,19d18 <cameraX>
	cameraY -= (FLOAT)(winHeight >> 1)/ cameraZoom;
    b728:	|         move.l 19d1c <cameraY>,d0
    b72e:	|         move.l d0,-(sp)
    b730:	|         jsr 134b0 <__floatsisf>
    b736:	|         addq.l #4,sp
    b738:	|         move.l d0,d2
    b73a:	|         move.l 19b62 <winHeight>,d0
    b740:	|         lsr.l #1,d0
    b742:	|         move.l d0,-(sp)
    b744:	|         jsr 134d8 <__floatunsisf>
    b74a:	|         addq.l #4,sp
    b74c:	|         move.l d0,d1
    b74e:	|         move.l 1814a <cameraZoom>,d0
    b754:	|         move.l d0,-(sp)
    b756:	|         move.l d1,-(sp)
    b758:	|         jsr 1335c <__divsf3>
    b75e:	|         addq.l #8,sp
    b760:	|         move.l d0,-(sp)
    b762:	|         move.l d2,-(sp)
    b764:	|         jsr 137a4 <__subsf3>
    b76a:	|         addq.l #8,sp
    b76c:	|         move.l d0,-(sp)
    b76e:	|         jsr 13448 <__fixsfsi>
    b774:	|         addq.l #4,sp
    b776:	|         move.l d0,19d1c <cameraY>

	if (cameraX < 0) cameraX = 0;
    b77c:	|         move.l 19d18 <cameraX>,d0
    b782:	|     /-- bpl.s b78e <builtIn_aimCamera+0x12e>
    b784:	|     |   clr.l 19d18 <cameraX>
    b78a:	|  /--|-- bra.w b844 <builtIn_aimCamera+0x1e4>
	else if (cameraX > sceneWidth - (FLOAT)winWidth/ cameraZoom) cameraX = sceneWidth - (FLOAT)winWidth/ cameraZoom;
    b78e:	|  |  \-> move.l 19d18 <cameraX>,d0
    b794:	|  |      move.l d0,-(sp)
    b796:	|  |      jsr 134b0 <__floatsisf>
    b79c:	|  |      addq.l #4,sp
    b79e:	|  |      move.l d0,d2
    b7a0:	|  |      move.l 19cfa <sceneWidth>,d0
    b7a6:	|  |      move.l d0,-(sp)
    b7a8:	|  |      jsr 134d8 <__floatunsisf>
    b7ae:	|  |      addq.l #4,sp
    b7b0:	|  |      move.l d0,d3
    b7b2:	|  |      move.l 19b5e <winWidth>,d0
    b7b8:	|  |      move.l d0,-(sp)
    b7ba:	|  |      jsr 134d8 <__floatunsisf>
    b7c0:	|  |      addq.l #4,sp
    b7c2:	|  |      move.l d0,d1
    b7c4:	|  |      move.l 1814a <cameraZoom>,d0
    b7ca:	|  |      move.l d0,-(sp)
    b7cc:	|  |      move.l d1,-(sp)
    b7ce:	|  |      jsr 1335c <__divsf3>
    b7d4:	|  |      addq.l #8,sp
    b7d6:	|  |      move.l d0,-(sp)
    b7d8:	|  |      move.l d3,-(sp)
    b7da:	|  |      jsr 137a4 <__subsf3>
    b7e0:	|  |      addq.l #8,sp
    b7e2:	|  |      move.l d0,-(sp)
    b7e4:	|  |      move.l d2,-(sp)
    b7e6:	|  |      jsr 1361c <__gtsf2>
    b7ec:	|  |      addq.l #8,sp
    b7ee:	|  |      tst.l d0
    b7f0:	|  +----- ble.s b844 <builtIn_aimCamera+0x1e4>
    b7f2:	|  |      move.l 19cfa <sceneWidth>,d0
    b7f8:	|  |      move.l d0,-(sp)
    b7fa:	|  |      jsr 134d8 <__floatunsisf>
    b800:	|  |      addq.l #4,sp
    b802:	|  |      move.l d0,d2
    b804:	|  |      move.l 19b5e <winWidth>,d0
    b80a:	|  |      move.l d0,-(sp)
    b80c:	|  |      jsr 134d8 <__floatunsisf>
    b812:	|  |      addq.l #4,sp
    b814:	|  |      move.l d0,d1
    b816:	|  |      move.l 1814a <cameraZoom>,d0
    b81c:	|  |      move.l d0,-(sp)
    b81e:	|  |      move.l d1,-(sp)
    b820:	|  |      jsr 1335c <__divsf3>
    b826:	|  |      addq.l #8,sp
    b828:	|  |      move.l d0,-(sp)
    b82a:	|  |      move.l d2,-(sp)
    b82c:	|  |      jsr 137a4 <__subsf3>
    b832:	|  |      addq.l #8,sp
    b834:	|  |      move.l d0,-(sp)
    b836:	|  |      jsr 13448 <__fixsfsi>
    b83c:	|  |      addq.l #4,sp
    b83e:	|  |      move.l d0,19d18 <cameraX>
	if (cameraY < 0) cameraY = 0;
    b844:	|  \----> move.l 19d1c <cameraY>,d0
    b84a:	|     /-- bpl.s b856 <builtIn_aimCamera+0x1f6>
    b84c:	|     |   clr.l 19d1c <cameraY>
    b852:	|  /--|-- bra.w b90c <builtIn_aimCamera+0x2ac>
	else if (cameraY > sceneHeight - (FLOAT)winHeight/ cameraZoom) cameraY = sceneHeight - (FLOAT)winHeight/ cameraZoom;
    b856:	|  |  \-> move.l 19d1c <cameraY>,d0
    b85c:	|  |      move.l d0,-(sp)
    b85e:	|  |      jsr 134b0 <__floatsisf>
    b864:	|  |      addq.l #4,sp
    b866:	|  |      move.l d0,d2
    b868:	|  |      move.l 19cfe <sceneHeight>,d0
    b86e:	|  |      move.l d0,-(sp)
    b870:	|  |      jsr 134d8 <__floatunsisf>
    b876:	|  |      addq.l #4,sp
    b878:	|  |      move.l d0,d3
    b87a:	|  |      move.l 19b62 <winHeight>,d0
    b880:	|  |      move.l d0,-(sp)
    b882:	|  |      jsr 134d8 <__floatunsisf>
    b888:	|  |      addq.l #4,sp
    b88a:	|  |      move.l d0,d1
    b88c:	|  |      move.l 1814a <cameraZoom>,d0
    b892:	|  |      move.l d0,-(sp)
    b894:	|  |      move.l d1,-(sp)
    b896:	|  |      jsr 1335c <__divsf3>
    b89c:	|  |      addq.l #8,sp
    b89e:	|  |      move.l d0,-(sp)
    b8a0:	|  |      move.l d3,-(sp)
    b8a2:	|  |      jsr 137a4 <__subsf3>
    b8a8:	|  |      addq.l #8,sp
    b8aa:	|  |      move.l d0,-(sp)
    b8ac:	|  |      move.l d2,-(sp)
    b8ae:	|  |      jsr 1361c <__gtsf2>
    b8b4:	|  |      addq.l #8,sp
    b8b6:	|  |      tst.l d0
    b8b8:	|  +----- ble.s b90c <builtIn_aimCamera+0x2ac>
    b8ba:	|  |      move.l 19cfe <sceneHeight>,d0
    b8c0:	|  |      move.l d0,-(sp)
    b8c2:	|  |      jsr 134d8 <__floatunsisf>
    b8c8:	|  |      addq.l #4,sp
    b8ca:	|  |      move.l d0,d2
    b8cc:	|  |      move.l 19b62 <winHeight>,d0
    b8d2:	|  |      move.l d0,-(sp)
    b8d4:	|  |      jsr 134d8 <__floatunsisf>
    b8da:	|  |      addq.l #4,sp
    b8dc:	|  |      move.l d0,d1
    b8de:	|  |      move.l 1814a <cameraZoom>,d0
    b8e4:	|  |      move.l d0,-(sp)
    b8e6:	|  |      move.l d1,-(sp)
    b8e8:	|  |      jsr 1335c <__divsf3>
    b8ee:	|  |      addq.l #8,sp
    b8f0:	|  |      move.l d0,-(sp)
    b8f2:	|  |      move.l d2,-(sp)
    b8f4:	|  |      jsr 137a4 <__subsf3>
    b8fa:	|  |      addq.l #8,sp
    b8fc:	|  |      move.l d0,-(sp)
    b8fe:	|  |      jsr 13448 <__fixsfsi>
    b904:	|  |      addq.l #4,sp
    b906:	|  |      move.l d0,19d1c <cameraY>
	return BR_CONTINUE;
    b90c:	|  \----> moveq #2,d0
}
    b90e:	\-------> move.l (sp)+,d2
    b910:	          move.l (sp)+,d3
    b912:	          rts

0000b914 <builtIn_zoomCamera>:


builtIn(zoomCamera)
{
    b914:	       subq.l #4,sp
    b916:	       move.l d2,-(sp)
	UNUSEDALL
	int z;
	if (! getValueType(&z, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    b918:	       movea.l 16(sp),a0
    b91c:	       move.l 24(a0),d0
    b920:	       move.l d0,-(sp)
    b922:	       pea 1 <_start+0x1>
    b926:	       moveq #12,d0
    b928:	       add.l sp,d0
    b92a:	       move.l d0,-(sp)
    b92c:	       jsr 10ec0 <getValueType>
    b932:	       lea 12(sp),sp
    b936:	       tst.w d0
    b938:	   /-- bne.s b940 <builtIn_zoomCamera+0x2c>
    b93a:	   |   moveq #1,d0
    b93c:	/--|-- bra.w bb3a <builtIn_zoomCamera+0x226>
	trimStack (&fun -> stack);
    b940:	|  \-> moveq #24,d0
    b942:	|      add.l 16(sp),d0
    b946:	|      move.l d0,-(sp)
    b948:	|      jsr 11844 <trimStack>
    b94e:	|      addq.l #4,sp

	input.mouseX = input.mouseX * cameraZoom;
    b950:	|      move.l 19c1e <input+0xa>,d0
    b956:	|      move.l d0,-(sp)
    b958:	|      jsr 134b0 <__floatsisf>
    b95e:	|      addq.l #4,sp
    b960:	|      move.l d0,d1
    b962:	|      move.l 1814a <cameraZoom>,d0
    b968:	|      move.l d0,-(sp)
    b96a:	|      move.l d1,-(sp)
    b96c:	|      jsr 13562 <__mulsf3>
    b972:	|      addq.l #8,sp
    b974:	|      move.l d0,-(sp)
    b976:	|      jsr 13448 <__fixsfsi>
    b97c:	|      addq.l #4,sp
    b97e:	|      move.l d0,19c1e <input+0xa>
	input.mouseY = input.mouseY * cameraZoom;
    b984:	|      move.l 19c22 <input+0xe>,d0
    b98a:	|      move.l d0,-(sp)
    b98c:	|      jsr 134b0 <__floatsisf>
    b992:	|      addq.l #4,sp
    b994:	|      move.l d0,d1
    b996:	|      move.l 1814a <cameraZoom>,d0
    b99c:	|      move.l d0,-(sp)
    b99e:	|      move.l d1,-(sp)
    b9a0:	|      jsr 13562 <__mulsf3>
    b9a6:	|      addq.l #8,sp
    b9a8:	|      move.l d0,-(sp)
    b9aa:	|      jsr 13448 <__fixsfsi>
    b9b0:	|      addq.l #4,sp
    b9b2:	|      move.l d0,19c22 <input+0xe>


	cameraZoom = (FLOAT) z * (FLOAT) 0.01;
    b9b8:	|      move.l 4(sp),d0
    b9bc:	|      move.l d0,-(sp)
    b9be:	|      jsr 134b0 <__floatsisf>
    b9c4:	|      addq.l #4,sp
    b9c6:	|      move.l #1008981770,-(sp)
    b9cc:	|      move.l d0,-(sp)
    b9ce:	|      jsr 13562 <__mulsf3>
    b9d4:	|      addq.l #8,sp
    b9d6:	|      move.l d0,1814a <cameraZoom>
	if ((FLOAT) winWidth / cameraZoom > sceneWidth) cameraZoom = (FLOAT)winWidth / sceneWidth;
    b9dc:	|      move.l 19b5e <winWidth>,d0
    b9e2:	|      move.l d0,-(sp)
    b9e4:	|      jsr 134d8 <__floatunsisf>
    b9ea:	|      addq.l #4,sp
    b9ec:	|      move.l d0,d1
    b9ee:	|      move.l 1814a <cameraZoom>,d0
    b9f4:	|      move.l d0,-(sp)
    b9f6:	|      move.l d1,-(sp)
    b9f8:	|      jsr 1335c <__divsf3>
    b9fe:	|      addq.l #8,sp
    ba00:	|      move.l d0,d2
    ba02:	|      move.l 19cfa <sceneWidth>,d0
    ba08:	|      move.l d0,-(sp)
    ba0a:	|      jsr 134d8 <__floatunsisf>
    ba10:	|      addq.l #4,sp
    ba12:	|      move.l d0,-(sp)
    ba14:	|      move.l d2,-(sp)
    ba16:	|      jsr 1361c <__gtsf2>
    ba1c:	|      addq.l #8,sp
    ba1e:	|      tst.l d0
    ba20:	|  /-- ble.s ba56 <builtIn_zoomCamera+0x142>
    ba22:	|  |   move.l 19b5e <winWidth>,d0
    ba28:	|  |   move.l d0,-(sp)
    ba2a:	|  |   jsr 134d8 <__floatunsisf>
    ba30:	|  |   addq.l #4,sp
    ba32:	|  |   move.l d0,d2
    ba34:	|  |   move.l 19cfa <sceneWidth>,d0
    ba3a:	|  |   move.l d0,-(sp)
    ba3c:	|  |   jsr 134d8 <__floatunsisf>
    ba42:	|  |   addq.l #4,sp
    ba44:	|  |   move.l d0,-(sp)
    ba46:	|  |   move.l d2,-(sp)
    ba48:	|  |   jsr 1335c <__divsf3>
    ba4e:	|  |   addq.l #8,sp
    ba50:	|  |   move.l d0,1814a <cameraZoom>
	if ((FLOAT) winHeight / cameraZoom > sceneHeight) cameraZoom = (FLOAT)winHeight / sceneHeight;
    ba56:	|  \-> move.l 19b62 <winHeight>,d0
    ba5c:	|      move.l d0,-(sp)
    ba5e:	|      jsr 134d8 <__floatunsisf>
    ba64:	|      addq.l #4,sp
    ba66:	|      move.l d0,d1
    ba68:	|      move.l 1814a <cameraZoom>,d0
    ba6e:	|      move.l d0,-(sp)
    ba70:	|      move.l d1,-(sp)
    ba72:	|      jsr 1335c <__divsf3>
    ba78:	|      addq.l #8,sp
    ba7a:	|      move.l d0,d2
    ba7c:	|      move.l 19cfe <sceneHeight>,d0
    ba82:	|      move.l d0,-(sp)
    ba84:	|      jsr 134d8 <__floatunsisf>
    ba8a:	|      addq.l #4,sp
    ba8c:	|      move.l d0,-(sp)
    ba8e:	|      move.l d2,-(sp)
    ba90:	|      jsr 1361c <__gtsf2>
    ba96:	|      addq.l #8,sp
    ba98:	|      tst.l d0
    ba9a:	|  /-- ble.s bad0 <builtIn_zoomCamera+0x1bc>
    ba9c:	|  |   move.l 19b62 <winHeight>,d0
    baa2:	|  |   move.l d0,-(sp)
    baa4:	|  |   jsr 134d8 <__floatunsisf>
    baaa:	|  |   addq.l #4,sp
    baac:	|  |   move.l d0,d2
    baae:	|  |   move.l 19cfe <sceneHeight>,d0
    bab4:	|  |   move.l d0,-(sp)
    bab6:	|  |   jsr 134d8 <__floatunsisf>
    babc:	|  |   addq.l #4,sp
    babe:	|  |   move.l d0,-(sp)
    bac0:	|  |   move.l d2,-(sp)
    bac2:	|  |   jsr 1335c <__divsf3>
    bac8:	|  |   addq.l #8,sp
    baca:	|  |   move.l d0,1814a <cameraZoom>
	//setPixelCoords (FALSE); Todo: Amigize this

	input.mouseX = input.mouseX / cameraZoom;
    bad0:	|  \-> move.l 19c1e <input+0xa>,d0
    bad6:	|      move.l d0,-(sp)
    bad8:	|      jsr 134b0 <__floatsisf>
    bade:	|      addq.l #4,sp
    bae0:	|      move.l d0,d1
    bae2:	|      move.l 1814a <cameraZoom>,d0
    bae8:	|      move.l d0,-(sp)
    baea:	|      move.l d1,-(sp)
    baec:	|      jsr 1335c <__divsf3>
    baf2:	|      addq.l #8,sp
    baf4:	|      move.l d0,-(sp)
    baf6:	|      jsr 13448 <__fixsfsi>
    bafc:	|      addq.l #4,sp
    bafe:	|      move.l d0,19c1e <input+0xa>
	input.mouseY = input.mouseY / cameraZoom;
    bb04:	|      move.l 19c22 <input+0xe>,d0
    bb0a:	|      move.l d0,-(sp)
    bb0c:	|      jsr 134b0 <__floatsisf>
    bb12:	|      addq.l #4,sp
    bb14:	|      move.l d0,d1
    bb16:	|      move.l 1814a <cameraZoom>,d0
    bb1c:	|      move.l d0,-(sp)
    bb1e:	|      move.l d1,-(sp)
    bb20:	|      jsr 1335c <__divsf3>
    bb26:	|      addq.l #8,sp
    bb28:	|      move.l d0,-(sp)
    bb2a:	|      jsr 13448 <__fixsfsi>
    bb30:	|      addq.l #4,sp
    bb32:	|      move.l d0,19c22 <input+0xe>

	return BR_CONTINUE;
    bb38:	|      moveq #2,d0
}
    bb3a:	\----> move.l (sp)+,d2
    bb3c:	       addq.l #4,sp
    bb3e:	       rts

0000bb40 <builtIn_pickOne>:
#pragma mark -
#pragma mark Variables


builtIn(pickOne)
{
    bb40:	             subq.l #4,sp
	UNUSEDALL
	if (! numParams) {
    bb42:	             tst.l 8(sp)
    bb46:	         /-- bne.s bb5a <builtIn_pickOne+0x1a>
		KPrintF ("Built-in function should have at least 1 parameter");
    bb48:	         |   pea 1698c <graphics.c.1c13408a+0x12a>
    bb4e:	         |   jsr 12f14 <KPrintF>
    bb54:	         |   addq.l #4,sp
		return BR_ERROR;
    bb56:	         |   moveq #1,d0
    bb58:	/--------|-- bra.s bbba <builtIn_pickOne+0x7a>
	}
	int i = rand() % numParams;
    bb5a:	|        \-> jsr c58 <rand>
    bb60:	|            move.l d0,d1
    bb62:	|            move.l 8(sp),d0
    bb66:	|            move.l d0,-(sp)
    bb68:	|            move.l d1,-(sp)
    bb6a:	|            jsr 13ae4 <__umodsi3>
    bb70:	|            addq.l #8,sp
    bb72:	|            move.l d0,(sp)

	// Return value
	while (numParams --) {
    bb74:	|     /----- bra.s bba8 <builtIn_pickOne+0x68>
		if (i == numParams) copyVariable (&(fun -> stack -> thisVar), &fun -> reg);
    bb76:	|  /--|----> move.l (sp),d0
    bb78:	|  |  |      cmp.l 8(sp),d0
    bb7c:	|  |  |  /-- bne.s bb98 <builtIn_pickOne+0x58>
    bb7e:	|  |  |  |   moveq #28,d0
    bb80:	|  |  |  |   add.l 12(sp),d0
    bb84:	|  |  |  |   movea.l 12(sp),a0
    bb88:	|  |  |  |   move.l 24(a0),d1
    bb8c:	|  |  |  |   move.l d0,-(sp)
    bb8e:	|  |  |  |   move.l d1,-(sp)
    bb90:	|  |  |  |   jsr 1137a <copyVariable>
    bb96:	|  |  |  |   addq.l #8,sp
		trimStack (&fun -> stack);
    bb98:	|  |  |  \-> moveq #24,d0
    bb9a:	|  |  |      add.l 12(sp),d0
    bb9e:	|  |  |      move.l d0,-(sp)
    bba0:	|  |  |      jsr 11844 <trimStack>
    bba6:	|  |  |      addq.l #4,sp
	while (numParams --) {
    bba8:	|  |  \----> move.l 8(sp),d0
    bbac:	|  |         move.l d0,d1
    bbae:	|  |         subq.l #1,d1
    bbb0:	|  |         move.l d1,8(sp)
    bbb4:	|  |         tst.l d0
    bbb6:	|  \-------- bne.s bb76 <builtIn_pickOne+0x36>
	}
	return BR_CONTINUE;
    bbb8:	|            moveq #2,d0
}
    bbba:	\----------> addq.l #4,sp
    bbbc:	             rts

0000bbbe <builtIn_substring>:

builtIn(substring)
{
    bbbe:	       lea -40(sp),sp
    bbc2:	       move.l a6,-(sp)
    bbc4:	       move.l d2,-(sp)
    char *newString;
    int start, length;

    //debugOut ("BUILTIN: substring\n");

    if (!getValueType(&length, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    bbc6:	       movea.l 56(sp),a0
    bbca:	       move.l 24(a0),d0
    bbce:	       move.l d0,-(sp)
    bbd0:	       pea 1 <_start+0x1>
    bbd4:	       lea 16(sp),a0
    bbd8:	       move.l a0,-(sp)
    bbda:	       jsr 10ec0 <getValueType>
    bbe0:	       lea 12(sp),sp
    bbe4:	       tst.w d0
    bbe6:	   /-- bne.s bbee <builtIn_substring+0x30>
    bbe8:	   |   moveq #1,d0
    bbea:	/--|-- bra.w bd66 <builtIn_substring+0x1a8>
    trimStack(&fun->stack);
    bbee:	|  \-> moveq #24,d0
    bbf0:	|      add.l 56(sp),d0
    bbf4:	|      move.l d0,-(sp)
    bbf6:	|      jsr 11844 <trimStack>
    bbfc:	|      addq.l #4,sp
    if (!getValueType(&start, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    bbfe:	|      movea.l 56(sp),a0
    bc02:	|      move.l 24(a0),d0
    bc06:	|      move.l d0,-(sp)
    bc08:	|      pea 1 <_start+0x1>
    bc0c:	|      lea 20(sp),a0
    bc10:	|      move.l a0,-(sp)
    bc12:	|      jsr 10ec0 <getValueType>
    bc18:	|      lea 12(sp),sp
    bc1c:	|      tst.w d0
    bc1e:	|  /-- bne.s bc26 <builtIn_substring+0x68>
    bc20:	|  |   moveq #1,d0
    bc22:	+--|-- bra.w bd66 <builtIn_substring+0x1a8>
    trimStack(&fun->stack);
    bc26:	|  \-> moveq #24,d0
    bc28:	|      add.l 56(sp),d0
    bc2c:	|      move.l d0,-(sp)
    bc2e:	|      jsr 11844 <trimStack>
    bc34:	|      addq.l #4,sp
    wholeString = getTextFromAnyVar(&(fun->stack->thisVar));
    bc36:	|      movea.l 56(sp),a0
    bc3a:	|      move.l 24(a0),d0
    bc3e:	|      move.l d0,-(sp)
    bc40:	|      jsr 11496 <getTextFromAnyVar>
    bc46:	|      addq.l #4,sp
    bc48:	|      move.l d0,44(sp)
    trimStack(&fun->stack);
    bc4c:	|      moveq #24,d0
    bc4e:	|      add.l 56(sp),d0
    bc52:	|      move.l d0,-(sp)
    bc54:	|      jsr 11844 <trimStack>
    bc5a:	|      addq.l #4,sp
    
    if (strlen(wholeString) < (ULONG) start + length) {
    bc5c:	|      move.l 44(sp),-(sp)
    bc60:	|      jsr 103ac <strlen>
    bc66:	|      addq.l #4,sp
    bc68:	|      move.l d0,d1
    bc6a:	|      move.l 12(sp),d0
    bc6e:	|      movea.l d0,a0
    bc70:	|      move.l 8(sp),d0
    bc74:	|      add.l a0,d0
    bc76:	|      cmp.l d1,d0
    bc78:	|  /-- bls.s bcae <builtIn_substring+0xf0>
        length = strlen(wholeString) - start;
    bc7a:	|  |   move.l 44(sp),-(sp)
    bc7e:	|  |   jsr 103ac <strlen>
    bc84:	|  |   addq.l #4,sp
    bc86:	|  |   move.l d0,d1
    bc88:	|  |   move.l 12(sp),d0
    bc8c:	|  |   sub.l d0,d1
    bc8e:	|  |   move.l d1,d0
    bc90:	|  |   move.l d0,8(sp)
        if (strlen(wholeString) < (ULONG) start) {
    bc94:	|  |   move.l 44(sp),-(sp)
    bc98:	|  |   jsr 103ac <strlen>
    bc9e:	|  |   addq.l #4,sp
    bca0:	|  |   move.l d0,d1
    bca2:	|  |   move.l 12(sp),d0
    bca6:	|  |   cmp.l d1,d0
    bca8:	|  +-- bls.s bcae <builtIn_substring+0xf0>
            start = 0;
    bcaa:	|  |   clr.l 12(sp)
        }
    }
    if (length < 0) {
    bcae:	|  \-> move.l 8(sp),d0
    bcb2:	|  /-- bpl.s bcb8 <builtIn_substring+0xfa>
        length = 0;
    bcb4:	|  |   clr.l 8(sp)
    }
    
    int startoffset = start;
    bcb8:	|  \-> move.l 12(sp),40(sp)
    int endoffset = start + length;
    bcbe:	|      move.l 12(sp),d1
    bcc2:	|      move.l 8(sp),d0
    bcc6:	|      move.l d1,d2
    bcc8:	|      add.l d0,d2
    bcca:	|      move.l d2,36(sp)

    newString = AllocVec(endoffset - startoffset + 1, MEMF_ANY);
    bcce:	|      move.l 36(sp),d0
    bcd2:	|      sub.l 40(sp),d0
    bcd6:	|      addq.l #1,d0
    bcd8:	|      move.l d0,32(sp)
    bcdc:	|      clr.l 28(sp)
    bce0:	|      move.l 19c5e <SysBase>,d0
    bce6:	|      movea.l d0,a6
    bce8:	|      move.l 32(sp),d0
    bcec:	|      move.l 28(sp),d1
    bcf0:	|      jsr -684(a6)
    bcf4:	|      move.l d0,24(sp)
    bcf8:	|      move.l 24(sp),d0
    bcfc:	|      move.l d0,20(sp)
    if (!newString) {
    bd00:	|  /-- bne.s bd06 <builtIn_substring+0x148>
        return BR_ERROR;
    bd02:	|  |   moveq #1,d0
    bd04:	+--|-- bra.s bd66 <builtIn_substring+0x1a8>
    }
    
    memcpy(newString, wholeString + startoffset, endoffset - startoffset);
    bd06:	|  \-> move.l 36(sp),d0
    bd0a:	|      sub.l 40(sp),d0
    bd0e:	|      move.l d0,d1
    bd10:	|      move.l 40(sp),d0
    bd14:	|      add.l 44(sp),d0
    bd18:	|      move.l d1,-(sp)
    bd1a:	|      move.l d0,-(sp)
    bd1c:	|      move.l 28(sp),-(sp)
    bd20:	|      jsr 12ec8 <memcpy>
    bd26:	|      lea 12(sp),sp
    newString[endoffset - startoffset] = 0;
    bd2a:	|      move.l 36(sp),d0
    bd2e:	|      sub.l 40(sp),d0
    bd32:	|      movea.l 20(sp),a0
    bd36:	|      adda.l d0,a0
    bd38:	|      clr.b (a0)
    
    makeTextVar(&fun->reg, newString);
    bd3a:	|      moveq #28,d0
    bd3c:	|      add.l 56(sp),d0
    bd40:	|      move.l 20(sp),-(sp)
    bd44:	|      move.l d0,-(sp)
    bd46:	|      jsr 110e2 <makeTextVar>
    bd4c:	|      addq.l #8,sp
    FreeVec(newString);
    bd4e:	|      move.l 20(sp),16(sp)
    bd54:	|      move.l 19c5e <SysBase>,d0
    bd5a:	|      movea.l d0,a6
    bd5c:	|      movea.l 16(sp),a1
    bd60:	|      jsr -690(a6)
    return BR_CONTINUE;
    bd64:	|      moveq #2,d0
}
    bd66:	\----> move.l (sp)+,d2
    bd68:	       movea.l (sp)+,a6
    bd6a:	       lea 40(sp),sp
    bd6e:	       rts

0000bd70 <builtIn_stringLength>:

builtIn(stringLength)
{
    bd70:	subq.l #8,sp
    bd72:	move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    bd74:	movea.l 20(sp),a0
    bd78:	move.l 24(a0),d0
    bd7c:	move.l d0,-(sp)
    bd7e:	jsr 11496 <getTextFromAnyVar>
    bd84:	addq.l #4,sp
    bd86:	move.l d0,8(sp)
	trimStack (&fun -> stack);
    bd8a:	moveq #24,d0
    bd8c:	add.l 20(sp),d0
    bd90:	move.l d0,-(sp)
    bd92:	jsr 11844 <trimStack>
    bd98:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, strlen(newText));
    bd9a:	move.l 8(sp),-(sp)
    bd9e:	jsr 103ac <strlen>
    bda4:	addq.l #4,sp
    bda6:	move.l d0,d1
    bda8:	moveq #28,d0
    bdaa:	add.l 20(sp),d0
    bdae:	move.l d1,-(sp)
    bdb0:	pea 1 <_start+0x1>
    bdb4:	move.l d0,-(sp)
    bdb6:	jsr 117b2 <setVariable>
    bdbc:	lea 12(sp),sp
	FreeVec(newText);
    bdc0:	move.l 8(sp),4(sp)
    bdc6:	move.l 19c5e <SysBase>,d0
    bdcc:	movea.l d0,a6
    bdce:	movea.l 4(sp),a1
    bdd2:	jsr -690(a6)
	return BR_CONTINUE;
    bdd6:	moveq #2,d0
}
    bdd8:	movea.l (sp)+,a6
    bdda:	addq.l #8,sp
    bddc:	rts

0000bdde <builtIn_newStack>:

builtIn(newStack)
{
    bdde:	             lea -12(sp),sp
    bde2:	             move.l a6,-(sp)
    UNUSEDALL
    unlinkVar(&fun->reg);
    bde4:	             moveq #28,d0
    bde6:	             add.l 24(sp),d0
    bdea:	             move.l d0,-(sp)
    bdec:	             jsr 1110e <unlinkVar>
    bdf2:	             addq.l #4,sp

    // Return value
    fun->reg.varType = SVT_STACK;
    bdf4:	             movea.l 24(sp),a0
    bdf8:	             moveq #6,d0
    bdfa:	             move.l d0,28(a0)
    fun->reg.varData.theStack = AllocVec(sizeof(struct stackHandler), MEMF_ANY);
    bdfe:	             moveq #12,d1
    be00:	             move.l d1,12(sp)
    be04:	             clr.l 8(sp)
    be08:	             move.l 19c5e <SysBase>,d0
    be0e:	             movea.l d0,a6
    be10:	             move.l 12(sp),d0
    be14:	             move.l 8(sp),d1
    be18:	             jsr -684(a6)
    be1c:	             move.l d0,4(sp)
    be20:	             move.l 4(sp),d0
    be24:	             movea.l 24(sp),a0
    be28:	             move.l d0,32(a0)
    if (!fun->reg.varData.theStack) return BR_ERROR;
    be2c:	             movea.l 24(sp),a0
    be30:	             move.l 32(a0),d0
    be34:	         /-- bne.s be3c <builtIn_newStack+0x5e>
    be36:	         |   moveq #1,d0
    be38:	/--------|-- bra.w bece <builtIn_newStack+0xf0>
    fun->reg.varData.theStack->first = NULL;
    be3c:	|        \-> movea.l 24(sp),a0
    be40:	|            movea.l 32(a0),a0
    be44:	|            clr.l (a0)
    fun->reg.varData.theStack->last = NULL;
    be46:	|            movea.l 24(sp),a0
    be4a:	|            movea.l 32(a0),a0
    be4e:	|            clr.l 4(a0)
    fun->reg.varData.theStack->timesUsed = 1;
    be52:	|            movea.l 24(sp),a0
    be56:	|            movea.l 32(a0),a0
    be5a:	|            moveq #1,d0
    be5c:	|            move.l d0,8(a0)
    
    while (numParams--) {
    be60:	|     /----- bra.s bebc <builtIn_newStack+0xde>
        if (!addVarToStack(&fun->stack->thisVar, &fun->reg.varData.theStack->first)) return BR_ERROR;
    be62:	|  /--|----> movea.l 24(sp),a0
    be66:	|  |  |      move.l 32(a0),d0
    be6a:	|  |  |      move.l d0,d1
    be6c:	|  |  |      movea.l 24(sp),a0
    be70:	|  |  |      move.l 24(a0),d0
    be74:	|  |  |      move.l d1,-(sp)
    be76:	|  |  |      move.l d0,-(sp)
    be78:	|  |  |      jsr 106fc <addVarToStack>
    be7e:	|  |  |      addq.l #8,sp
    be80:	|  |  |      tst.w d0
    be82:	|  |  |  /-- bne.s be88 <builtIn_newStack+0xaa>
    be84:	|  |  |  |   moveq #1,d0
    be86:	+--|--|--|-- bra.s bece <builtIn_newStack+0xf0>
        if (fun->reg.varData.theStack->last == NULL) {
    be88:	|  |  |  \-> movea.l 24(sp),a0
    be8c:	|  |  |      movea.l 32(a0),a0
    be90:	|  |  |      move.l 4(a0),d0
    be94:	|  |  |  /-- bne.s beac <builtIn_newStack+0xce>
            fun->reg.varData.theStack->last = fun->reg.varData.theStack->first;
    be96:	|  |  |  |   movea.l 24(sp),a0
    be9a:	|  |  |  |   movea.l 32(a0),a1
    be9e:	|  |  |  |   movea.l 24(sp),a0
    bea2:	|  |  |  |   movea.l 32(a0),a0
    bea6:	|  |  |  |   move.l (a1),d0
    bea8:	|  |  |  |   move.l d0,4(a0)
        }
        trimStack(&fun->stack);
    beac:	|  |  |  \-> moveq #24,d0
    beae:	|  |  |      add.l 24(sp),d0
    beb2:	|  |  |      move.l d0,-(sp)
    beb4:	|  |  |      jsr 11844 <trimStack>
    beba:	|  |  |      addq.l #4,sp
    while (numParams--) {
    bebc:	|  |  \----> move.l 20(sp),d0
    bec0:	|  |         move.l d0,d1
    bec2:	|  |         subq.l #1,d1
    bec4:	|  |         move.l d1,20(sp)
    bec8:	|  |         tst.l d0
    beca:	|  \-------- bne.s be62 <builtIn_newStack+0x84>
    }
    return BR_CONTINUE;
    becc:	|            moveq #2,d0
}
    bece:	\----------> movea.l (sp)+,a6
    bed0:	             lea 12(sp),sp
    bed4:	             rts

0000bed6 <builtIn_stackSize>:
#define builtIn_wait builtIn_newStack

builtIn(stackSize)
{
	UNUSEDALL
	switch (fun -> stack -> thisVar.varType) {
    bed6:	          movea.l 8(sp),a0
    beda:	          movea.l 24(a0),a0
    bede:	          move.l (a0),d0
    bee0:	          moveq #6,d1
    bee2:	          cmp.l d0,d1
    bee4:	      /-- beq.s bf00 <builtIn_stackSize+0x2a>
    bee6:	      |   moveq #10,d1
    bee8:	      |   cmp.l d0,d1
    beea:	   /--|-- beq.s bf44 <builtIn_stackSize+0x6e>
			setVariable (&fun -> reg, SVT_INT, fun -> stack -> thisVar.varData.fastArray -> size);
			trimStack (&fun -> stack);
			return BR_CONTINUE;

		default:
			break;
    beec:	   |  |   nop
	}
	KPrintF ("Parameter isn't a stack or a fast array.");
    beee:	   |  |   pea 169bf <graphics.c.1c13408a+0x15d>
    bef4:	   |  |   jsr 12f14 <KPrintF>
    befa:	   |  |   addq.l #4,sp
	return BR_ERROR;
    befc:	   |  |   moveq #1,d0
    befe:	/--|--|-- bra.s bf7e <builtIn_stackSize+0xa8>
			setVariable (&fun -> reg, SVT_INT, stackSize (fun -> stack -> thisVar.varData.theStack));
    bf00:	|  |  \-> movea.l 8(sp),a0
    bf04:	|  |      movea.l 24(a0),a0
    bf08:	|  |      move.l 4(a0),d0
    bf0c:	|  |      move.l d0,-(sp)
    bf0e:	|  |      jsr 11820 <stackSize>
    bf14:	|  |      addq.l #4,sp
    bf16:	|  |      move.l d0,d1
    bf18:	|  |      moveq #28,d0
    bf1a:	|  |      add.l 8(sp),d0
    bf1e:	|  |      move.l d1,-(sp)
    bf20:	|  |      pea 1 <_start+0x1>
    bf24:	|  |      move.l d0,-(sp)
    bf26:	|  |      jsr 117b2 <setVariable>
    bf2c:	|  |      lea 12(sp),sp
			trimStack (&fun -> stack);
    bf30:	|  |      moveq #24,d0
    bf32:	|  |      add.l 8(sp),d0
    bf36:	|  |      move.l d0,-(sp)
    bf38:	|  |      jsr 11844 <trimStack>
    bf3e:	|  |      addq.l #4,sp
			return BR_CONTINUE;
    bf40:	|  |      moveq #2,d0
    bf42:	+--|----- bra.s bf7e <builtIn_stackSize+0xa8>
			setVariable (&fun -> reg, SVT_INT, fun -> stack -> thisVar.varData.fastArray -> size);
    bf44:	|  \----> movea.l 8(sp),a0
    bf48:	|         movea.l 24(a0),a0
    bf4c:	|         movea.l 4(a0),a0
    bf50:	|         move.l 4(a0),d1
    bf54:	|         moveq #28,d0
    bf56:	|         add.l 8(sp),d0
    bf5a:	|         move.l d1,-(sp)
    bf5c:	|         pea 1 <_start+0x1>
    bf60:	|         move.l d0,-(sp)
    bf62:	|         jsr 117b2 <setVariable>
    bf68:	|         lea 12(sp),sp
			trimStack (&fun -> stack);
    bf6c:	|         moveq #24,d0
    bf6e:	|         add.l 8(sp),d0
    bf72:	|         move.l d0,-(sp)
    bf74:	|         jsr 11844 <trimStack>
    bf7a:	|         addq.l #4,sp
			return BR_CONTINUE;
    bf7c:	|         moveq #2,d0
}
    bf7e:	\-------> rts

0000bf80 <builtIn_copyStack>:

builtIn(copyStack)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    bf80:	       movea.l 8(sp),a0
    bf84:	       movea.l 24(a0),a0
    bf88:	       move.l (a0),d0
    bf8a:	       moveq #6,d1
    bf8c:	       cmp.l d0,d1
    bf8e:	   /-- beq.s bfa2 <builtIn_copyStack+0x22>
		KPrintF ("Parameter isn't a stack.");
    bf90:	   |   pea 169e8 <graphics.c.1c13408a+0x186>
    bf96:	   |   jsr 12f14 <KPrintF>
    bf9c:	   |   addq.l #4,sp
		return BR_ERROR;
    bf9e:	   |   moveq #1,d0
    bfa0:	/--|-- bra.s bfd6 <builtIn_copyStack+0x56>
	}
	// Return value
	if (! copyStack (&fun -> stack -> thisVar, &fun -> reg)) return BR_ERROR;
    bfa2:	|  \-> moveq #28,d0
    bfa4:	|      add.l 8(sp),d0
    bfa8:	|      movea.l 8(sp),a0
    bfac:	|      move.l 24(a0),d1
    bfb0:	|      move.l d0,-(sp)
    bfb2:	|      move.l d1,-(sp)
    bfb4:	|      jsr 109c6 <copyStack>
    bfba:	|      addq.l #8,sp
    bfbc:	|      tst.w d0
    bfbe:	|  /-- bne.s bfc4 <builtIn_copyStack+0x44>
    bfc0:	|  |   moveq #1,d0
    bfc2:	+--|-- bra.s bfd6 <builtIn_copyStack+0x56>
	trimStack (&fun -> stack);
    bfc4:	|  \-> moveq #24,d0
    bfc6:	|      add.l 8(sp),d0
    bfca:	|      move.l d0,-(sp)
    bfcc:	|      jsr 11844 <trimStack>
    bfd2:	|      addq.l #4,sp
	return BR_CONTINUE;
    bfd4:	|      moveq #2,d0
}
    bfd6:	\----> rts

0000bfd8 <builtIn_pushToStack>:

builtIn(pushToStack)
{
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    bfd8:	       movea.l 8(sp),a0
    bfdc:	       movea.l 24(a0),a0
    bfe0:	       movea.l 8(a0),a0
    bfe4:	       move.l (a0),d0
    bfe6:	       moveq #6,d1
    bfe8:	       cmp.l d0,d1
    bfea:	   /-- beq.s c000 <builtIn_pushToStack+0x28>
		KPrintF("Parameter isn't a stack");
    bfec:	   |   pea 16a01 <graphics.c.1c13408a+0x19f>
    bff2:	   |   jsr 12f14 <KPrintF>
    bff8:	   |   addq.l #4,sp
		return BR_ERROR;
    bffa:	   |   moveq #1,d0
    bffc:	/--|-- bra.w c08e <builtIn_pushToStack+0xb6>
	}

	if (! addVarToStack (&fun -> stack -> thisVar, &fun -> stack -> next -> thisVar.varData.theStack -> first))
    c000:	|  \-> movea.l 8(sp),a0
    c004:	|      movea.l 24(a0),a0
    c008:	|      movea.l 8(a0),a0
    c00c:	|      move.l 4(a0),d0
    c010:	|      move.l d0,d1
    c012:	|      movea.l 8(sp),a0
    c016:	|      move.l 24(a0),d0
    c01a:	|      move.l d1,-(sp)
    c01c:	|      move.l d0,-(sp)
    c01e:	|      jsr 106fc <addVarToStack>
    c024:	|      addq.l #8,sp
    c026:	|      tst.w d0
    c028:	|  /-- bne.s c02e <builtIn_pushToStack+0x56>
		return BR_ERROR;
    c02a:	|  |   moveq #1,d0
    c02c:	+--|-- bra.s c08e <builtIn_pushToStack+0xb6>

	if (fun -> stack -> next -> thisVar.varData.theStack -> first -> next == NULL)
    c02e:	|  \-> movea.l 8(sp),a0
    c032:	|      movea.l 24(a0),a0
    c036:	|      movea.l 8(a0),a0
    c03a:	|      movea.l 4(a0),a0
    c03e:	|      movea.l (a0),a0
    c040:	|      move.l 8(a0),d0
    c044:	|  /-- bne.s c06c <builtIn_pushToStack+0x94>
		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> first;
    c046:	|  |   movea.l 8(sp),a0
    c04a:	|  |   movea.l 24(a0),a0
    c04e:	|  |   movea.l 8(a0),a0
    c052:	|  |   movea.l 4(a0),a1
    c056:	|  |   movea.l 8(sp),a0
    c05a:	|  |   movea.l 24(a0),a0
    c05e:	|  |   movea.l 8(a0),a0
    c062:	|  |   movea.l 4(a0),a0
    c066:	|  |   move.l (a1),d0
    c068:	|  |   move.l d0,4(a0)

	trimStack (&fun -> stack);
    c06c:	|  \-> moveq #24,d0
    c06e:	|      add.l 8(sp),d0
    c072:	|      move.l d0,-(sp)
    c074:	|      jsr 11844 <trimStack>
    c07a:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    c07c:	|      moveq #24,d0
    c07e:	|      add.l 8(sp),d0
    c082:	|      move.l d0,-(sp)
    c084:	|      jsr 11844 <trimStack>
    c08a:	|      addq.l #4,sp
	return BR_CONTINUE;
    c08c:	|      moveq #2,d0
}
    c08e:	\----> rts

0000c090 <builtIn_enqueue>:

builtIn(enqueue)
{
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    c090:	             movea.l 8(sp),a0
    c094:	             movea.l 24(a0),a0
    c098:	             movea.l 8(a0),a0
    c09c:	             move.l (a0),d0
    c09e:	             moveq #6,d1
    c0a0:	             cmp.l d0,d1
    c0a2:	         /-- beq.s c0b8 <builtIn_enqueue+0x28>
		KPrintF ("Parameter isn't a stack");
    c0a4:	         |   pea 16a01 <graphics.c.1c13408a+0x19f>
    c0aa:	         |   jsr 12f14 <KPrintF>
    c0b0:	         |   addq.l #4,sp
		return BR_ERROR;
    c0b2:	         |   moveq #1,d0
    c0b4:	/--------|-- bra.w c1a6 <builtIn_enqueue+0x116>
	}

	if (fun -> stack -> next -> thisVar.varData.theStack -> first == NULL)
    c0b8:	|        \-> movea.l 8(sp),a0
    c0bc:	|            movea.l 24(a0),a0
    c0c0:	|            movea.l 8(a0),a0
    c0c4:	|            movea.l 4(a0),a0
    c0c8:	|            move.l (a0),d0
    c0ca:	|     /----- bne.s c124 <builtIn_enqueue+0x94>
	{
		if (! addVarToStack (&fun -> stack -> thisVar, &fun -> stack -> next -> thisVar.varData.theStack -> first))
    c0cc:	|     |      movea.l 8(sp),a0
    c0d0:	|     |      movea.l 24(a0),a0
    c0d4:	|     |      movea.l 8(a0),a0
    c0d8:	|     |      move.l 4(a0),d0
    c0dc:	|     |      move.l d0,d1
    c0de:	|     |      movea.l 8(sp),a0
    c0e2:	|     |      move.l 24(a0),d0
    c0e6:	|     |      move.l d1,-(sp)
    c0e8:	|     |      move.l d0,-(sp)
    c0ea:	|     |      jsr 106fc <addVarToStack>
    c0f0:	|     |      addq.l #8,sp
    c0f2:	|     |      tst.w d0
    c0f4:	|     |  /-- bne.s c0fc <builtIn_enqueue+0x6c>
			return BR_ERROR;
    c0f6:	|     |  |   moveq #1,d0
    c0f8:	+-----|--|-- bra.w c1a6 <builtIn_enqueue+0x116>

		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> first;
    c0fc:	|     |  \-> movea.l 8(sp),a0
    c100:	|     |      movea.l 24(a0),a0
    c104:	|     |      movea.l 8(a0),a0
    c108:	|     |      movea.l 4(a0),a1
    c10c:	|     |      movea.l 8(sp),a0
    c110:	|     |      movea.l 24(a0),a0
    c114:	|     |      movea.l 8(a0),a0
    c118:	|     |      movea.l 4(a0),a0
    c11c:	|     |      move.l (a1),d0
    c11e:	|     |      move.l d0,4(a0)
    c122:	|  /--|----- bra.s c184 <builtIn_enqueue+0xf4>
	}
	else
	{
		if (! addVarToStack (&fun -> stack -> thisVar,
							 &fun -> stack -> next -> thisVar.varData.theStack -> last -> next))
    c124:	|  |  \----> movea.l 8(sp),a0
    c128:	|  |         movea.l 24(a0),a0
    c12c:	|  |         movea.l 8(a0),a0
    c130:	|  |         movea.l 4(a0),a0
    c134:	|  |         move.l 4(a0),d0
		if (! addVarToStack (&fun -> stack -> thisVar,
    c138:	|  |         move.l d0,d1
    c13a:	|  |         addq.l #8,d1
    c13c:	|  |         movea.l 8(sp),a0
    c140:	|  |         move.l 24(a0),d0
    c144:	|  |         move.l d1,-(sp)
    c146:	|  |         move.l d0,-(sp)
    c148:	|  |         jsr 106fc <addVarToStack>
    c14e:	|  |         addq.l #8,sp
    c150:	|  |         tst.w d0
    c152:	|  |     /-- bne.s c158 <builtIn_enqueue+0xc8>
			return BR_ERROR;
    c154:	|  |     |   moveq #1,d0
    c156:	+--|-----|-- bra.s c1a6 <builtIn_enqueue+0x116>
		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> last -> next;
    c158:	|  |     \-> movea.l 8(sp),a0
    c15c:	|  |         movea.l 24(a0),a0
    c160:	|  |         movea.l 8(a0),a0
    c164:	|  |         movea.l 4(a0),a0
    c168:	|  |         movea.l 4(a0),a1
    c16c:	|  |         movea.l 8(sp),a0
    c170:	|  |         movea.l 24(a0),a0
    c174:	|  |         movea.l 8(a0),a0
    c178:	|  |         movea.l 4(a0),a0
    c17c:	|  |         move.l 8(a1),d0
    c180:	|  |         move.l d0,4(a0)
	}

	trimStack (&fun -> stack);
    c184:	|  \-------> moveq #24,d0
    c186:	|            add.l 8(sp),d0
    c18a:	|            move.l d0,-(sp)
    c18c:	|            jsr 11844 <trimStack>
    c192:	|            addq.l #4,sp
	trimStack (&fun -> stack);
    c194:	|            moveq #24,d0
    c196:	|            add.l 8(sp),d0
    c19a:	|            move.l d0,-(sp)
    c19c:	|            jsr 11844 <trimStack>
    c1a2:	|            addq.l #4,sp
	return BR_CONTINUE;
    c1a4:	|            moveq #2,d0
}
    c1a6:	\----------> rts

0000c1a8 <builtIn_deleteFromStack>:

builtIn(deleteFromStack)
{
    c1a8:	       move.l a2,-(sp)
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    c1aa:	       movea.l 12(sp),a0
    c1ae:	       movea.l 24(a0),a0
    c1b2:	       movea.l 8(a0),a0
    c1b6:	       move.l (a0),d0
    c1b8:	       moveq #6,d1
    c1ba:	       cmp.l d0,d1
    c1bc:	   /-- beq.s c1d2 <builtIn_deleteFromStack+0x2a>
		KPrintF ("Parameter isn't a stack.");
    c1be:	   |   pea 169e8 <graphics.c.1c13408a+0x186>
    c1c4:	   |   jsr 12f14 <KPrintF>
    c1ca:	   |   addq.l #4,sp
		return BR_ERROR;
    c1cc:	   |   moveq #1,d0
    c1ce:	/--|-- bra.w c268 <builtIn_deleteFromStack+0xc0>
	}

	// Return value
	setVariable (&fun -> reg, SVT_INT,
				 deleteVarFromStack (&fun -> stack -> thisVar,
									 &fun -> stack -> next -> thisVar.varData.theStack -> first, FALSE));
    c1d2:	|  \-> movea.l 12(sp),a0
    c1d6:	|      movea.l 24(a0),a0
    c1da:	|      movea.l 8(a0),a0
    c1de:	|      move.l 4(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    c1e2:	|      move.l d0,d1
				 deleteVarFromStack (&fun -> stack -> thisVar,
    c1e4:	|      movea.l 12(sp),a0
    c1e8:	|      move.l 24(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    c1ec:	|      clr.l -(sp)
    c1ee:	|      move.l d1,-(sp)
    c1f0:	|      move.l d0,-(sp)
    c1f2:	|      jsr 10a9c <deleteVarFromStack>
    c1f8:	|      lea 12(sp),sp
    c1fc:	|      move.l d0,d1
    c1fe:	|      moveq #28,d0
    c200:	|      add.l 12(sp),d0
    c204:	|      move.l d1,-(sp)
    c206:	|      pea 1 <_start+0x1>
    c20a:	|      move.l d0,-(sp)
    c20c:	|      jsr 117b2 <setVariable>
    c212:	|      lea 12(sp),sp

	// Horrible hacking because 'last' value might now be wrong!
	fun->stack->next->thisVar.varData.theStack->last = stackFindLast (fun->stack->next->thisVar.varData.theStack->first);
    c216:	|      movea.l 12(sp),a0
    c21a:	|      movea.l 24(a0),a0
    c21e:	|      movea.l 8(a0),a0
    c222:	|      movea.l 4(a0),a0
    c226:	|      move.l (a0),d0
    c228:	|      movea.l 12(sp),a0
    c22c:	|      movea.l 24(a0),a0
    c230:	|      movea.l 8(a0),a0
    c234:	|      movea.l 4(a0),a2
    c238:	|      move.l d0,-(sp)
    c23a:	|      jsr 117fc <stackFindLast>
    c240:	|      addq.l #4,sp
    c242:	|      move.l d0,4(a2)

	trimStack (&fun -> stack);
    c246:	|      moveq #24,d0
    c248:	|      add.l 12(sp),d0
    c24c:	|      move.l d0,-(sp)
    c24e:	|      jsr 11844 <trimStack>
    c254:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    c256:	|      moveq #24,d0
    c258:	|      add.l 12(sp),d0
    c25c:	|      move.l d0,-(sp)
    c25e:	|      jsr 11844 <trimStack>
    c264:	|      addq.l #4,sp
	return BR_CONTINUE;
    c266:	|      moveq #2,d0
}
    c268:	\----> movea.l (sp)+,a2
    c26a:	       rts

0000c26c <builtIn_deleteAllFromStack>:

builtIn(deleteAllFromStack)
{
    c26c:	       move.l a2,-(sp)
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    c26e:	       movea.l 12(sp),a0
    c272:	       movea.l 24(a0),a0
    c276:	       movea.l 8(a0),a0
    c27a:	       move.l (a0),d0
    c27c:	       moveq #6,d1
    c27e:	       cmp.l d0,d1
    c280:	   /-- beq.s c296 <builtIn_deleteAllFromStack+0x2a>
		KPrintF ("Parameter isn't a stack.");
    c282:	   |   pea 169e8 <graphics.c.1c13408a+0x186>
    c288:	   |   jsr 12f14 <KPrintF>
    c28e:	   |   addq.l #4,sp
		return BR_ERROR;
    c290:	   |   moveq #1,d0
    c292:	/--|-- bra.w c32e <builtIn_deleteAllFromStack+0xc2>
	}

	// Return value
	setVariable (&fun -> reg, SVT_INT,
				 deleteVarFromStack (&fun -> stack -> thisVar,
									 &fun -> stack -> next -> thisVar.varData.theStack -> first, TRUE));
    c296:	|  \-> movea.l 12(sp),a0
    c29a:	|      movea.l 24(a0),a0
    c29e:	|      movea.l 8(a0),a0
    c2a2:	|      move.l 4(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    c2a6:	|      move.l d0,d1
				 deleteVarFromStack (&fun -> stack -> thisVar,
    c2a8:	|      movea.l 12(sp),a0
    c2ac:	|      move.l 24(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    c2b0:	|      pea 1 <_start+0x1>
    c2b4:	|      move.l d1,-(sp)
    c2b6:	|      move.l d0,-(sp)
    c2b8:	|      jsr 10a9c <deleteVarFromStack>
    c2be:	|      lea 12(sp),sp
    c2c2:	|      move.l d0,d1
    c2c4:	|      moveq #28,d0
    c2c6:	|      add.l 12(sp),d0
    c2ca:	|      move.l d1,-(sp)
    c2cc:	|      pea 1 <_start+0x1>
    c2d0:	|      move.l d0,-(sp)
    c2d2:	|      jsr 117b2 <setVariable>
    c2d8:	|      lea 12(sp),sp

	// Horrible hacking because 'last' value might now be wrong!
	fun->stack->next->thisVar.varData.theStack->last = stackFindLast (fun->stack->next->thisVar.varData.theStack->first);
    c2dc:	|      movea.l 12(sp),a0
    c2e0:	|      movea.l 24(a0),a0
    c2e4:	|      movea.l 8(a0),a0
    c2e8:	|      movea.l 4(a0),a0
    c2ec:	|      move.l (a0),d0
    c2ee:	|      movea.l 12(sp),a0
    c2f2:	|      movea.l 24(a0),a0
    c2f6:	|      movea.l 8(a0),a0
    c2fa:	|      movea.l 4(a0),a2
    c2fe:	|      move.l d0,-(sp)
    c300:	|      jsr 117fc <stackFindLast>
    c306:	|      addq.l #4,sp
    c308:	|      move.l d0,4(a2)

	trimStack (&fun -> stack);
    c30c:	|      moveq #24,d0
    c30e:	|      add.l 12(sp),d0
    c312:	|      move.l d0,-(sp)
    c314:	|      jsr 11844 <trimStack>
    c31a:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    c31c:	|      moveq #24,d0
    c31e:	|      add.l 12(sp),d0
    c322:	|      move.l d0,-(sp)
    c324:	|      jsr 11844 <trimStack>
    c32a:	|      addq.l #4,sp
	return BR_CONTINUE;
    c32c:	|      moveq #2,d0
}
    c32e:	\----> movea.l (sp)+,a2
    c330:	       rts

0000c332 <builtIn_popFromStack>:

builtIn(popFromStack)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    c332:	       movea.l 8(sp),a0
    c336:	       movea.l 24(a0),a0
    c33a:	       move.l (a0),d0
    c33c:	       moveq #6,d1
    c33e:	       cmp.l d0,d1
    c340:	   /-- beq.s c354 <builtIn_popFromStack+0x22>
		KPrintF ("Parameter isn't a stack.");
    c342:	   |   pea 169e8 <graphics.c.1c13408a+0x186>
    c348:	   |   jsr 12f14 <KPrintF>
    c34e:	   |   addq.l #4,sp
		return BR_ERROR;
    c350:	   |   moveq #1,d0
    c352:	/--|-- bra.s c3be <builtIn_popFromStack+0x8c>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    c354:	|  \-> movea.l 8(sp),a0
    c358:	|      movea.l 24(a0),a0
    c35c:	|      movea.l 4(a0),a0
    c360:	|      move.l (a0),d0
    c362:	|  /-- bne.s c376 <builtIn_popFromStack+0x44>
		KPrintF ("The stack's empty.");
    c364:	|  |   pea 16a19 <graphics.c.1c13408a+0x1b7>
    c36a:	|  |   jsr 12f14 <KPrintF>
    c370:	|  |   addq.l #4,sp
		return BR_ERROR;
    c372:	|  |   moveq #1,d0
    c374:	+--|-- bra.s c3be <builtIn_popFromStack+0x8c>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> first -> thisVar), &fun -> reg);
    c376:	|  \-> moveq #28,d0
    c378:	|      add.l 8(sp),d0
    c37c:	|      movea.l 8(sp),a0
    c380:	|      movea.l 24(a0),a0
    c384:	|      movea.l 4(a0),a0
    c388:	|      move.l (a0),d1
    c38a:	|      move.l d0,-(sp)
    c38c:	|      move.l d1,-(sp)
    c38e:	|      jsr 1137a <copyVariable>
    c394:	|      addq.l #8,sp
	trimStack (&fun -> stack -> thisVar.varData.theStack -> first);
    c396:	|      movea.l 8(sp),a0
    c39a:	|      movea.l 24(a0),a0
    c39e:	|      move.l 4(a0),d0
    c3a2:	|      move.l d0,-(sp)
    c3a4:	|      jsr 11844 <trimStack>
    c3aa:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    c3ac:	|      moveq #24,d0
    c3ae:	|      add.l 8(sp),d0
    c3b2:	|      move.l d0,-(sp)
    c3b4:	|      jsr 11844 <trimStack>
    c3ba:	|      addq.l #4,sp
	return BR_CONTINUE;
    c3bc:	|      moveq #2,d0
}
    c3be:	\----> rts

0000c3c0 <builtIn_peekStart>:

builtIn(peekStart)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    c3c0:	       movea.l 8(sp),a0
    c3c4:	       movea.l 24(a0),a0
    c3c8:	       move.l (a0),d0
    c3ca:	       moveq #6,d1
    c3cc:	       cmp.l d0,d1
    c3ce:	   /-- beq.s c3e2 <builtIn_peekStart+0x22>
		KPrintF ("Parameter isn't a stack.");
    c3d0:	   |   pea 169e8 <graphics.c.1c13408a+0x186>
    c3d6:	   |   jsr 12f14 <KPrintF>
    c3dc:	   |   addq.l #4,sp
		return BR_ERROR;
    c3de:	   |   moveq #1,d0
    c3e0:	/--|-- bra.s c436 <builtIn_peekStart+0x76>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    c3e2:	|  \-> movea.l 8(sp),a0
    c3e6:	|      movea.l 24(a0),a0
    c3ea:	|      movea.l 4(a0),a0
    c3ee:	|      move.l (a0),d0
    c3f0:	|  /-- bne.s c404 <builtIn_peekStart+0x44>
		KPrintF ("The stack's empty.");
    c3f2:	|  |   pea 16a19 <graphics.c.1c13408a+0x1b7>
    c3f8:	|  |   jsr 12f14 <KPrintF>
    c3fe:	|  |   addq.l #4,sp
		return BR_ERROR;
    c400:	|  |   moveq #1,d0
    c402:	+--|-- bra.s c436 <builtIn_peekStart+0x76>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> first -> thisVar), &fun -> reg);
    c404:	|  \-> moveq #28,d0
    c406:	|      add.l 8(sp),d0
    c40a:	|      movea.l 8(sp),a0
    c40e:	|      movea.l 24(a0),a0
    c412:	|      movea.l 4(a0),a0
    c416:	|      move.l (a0),d1
    c418:	|      move.l d0,-(sp)
    c41a:	|      move.l d1,-(sp)
    c41c:	|      jsr 1137a <copyVariable>
    c422:	|      addq.l #8,sp
	trimStack (&fun -> stack);
    c424:	|      moveq #24,d0
    c426:	|      add.l 8(sp),d0
    c42a:	|      move.l d0,-(sp)
    c42c:	|      jsr 11844 <trimStack>
    c432:	|      addq.l #4,sp
	return BR_CONTINUE;
    c434:	|      moveq #2,d0
}
    c436:	\----> rts

0000c438 <builtIn_peekEnd>:

builtIn(peekEnd)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    c438:	       movea.l 8(sp),a0
    c43c:	       movea.l 24(a0),a0
    c440:	       move.l (a0),d0
    c442:	       moveq #6,d1
    c444:	       cmp.l d0,d1
    c446:	   /-- beq.s c45a <builtIn_peekEnd+0x22>
		KPrintF ("Parameter isn't a stack.");
    c448:	   |   pea 169e8 <graphics.c.1c13408a+0x186>
    c44e:	   |   jsr 12f14 <KPrintF>
    c454:	   |   addq.l #4,sp
		return BR_ERROR;
    c456:	   |   moveq #1,d0
    c458:	/--|-- bra.s c4b0 <builtIn_peekEnd+0x78>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    c45a:	|  \-> movea.l 8(sp),a0
    c45e:	|      movea.l 24(a0),a0
    c462:	|      movea.l 4(a0),a0
    c466:	|      move.l (a0),d0
    c468:	|  /-- bne.s c47c <builtIn_peekEnd+0x44>
		KPrintF ("The stack's empty.");
    c46a:	|  |   pea 16a19 <graphics.c.1c13408a+0x1b7>
    c470:	|  |   jsr 12f14 <KPrintF>
    c476:	|  |   addq.l #4,sp
		return BR_ERROR;
    c478:	|  |   moveq #1,d0
    c47a:	+--|-- bra.s c4b0 <builtIn_peekEnd+0x78>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> last -> thisVar), &fun -> reg);
    c47c:	|  \-> moveq #28,d0
    c47e:	|      add.l 8(sp),d0
    c482:	|      movea.l 8(sp),a0
    c486:	|      movea.l 24(a0),a0
    c48a:	|      movea.l 4(a0),a0
    c48e:	|      move.l 4(a0),d1
    c492:	|      move.l d0,-(sp)
    c494:	|      move.l d1,-(sp)
    c496:	|      jsr 1137a <copyVariable>
    c49c:	|      addq.l #8,sp
	trimStack (&fun -> stack);
    c49e:	|      moveq #24,d0
    c4a0:	|      add.l 8(sp),d0
    c4a4:	|      move.l d0,-(sp)
    c4a6:	|      jsr 11844 <trimStack>
    c4ac:	|      addq.l #4,sp
	return BR_CONTINUE;
    c4ae:	|      moveq #2,d0
}
    c4b0:	\----> rts

0000c4b2 <builtIn_random>:

builtIn(random)
{
    c4b2:	       subq.l #4,sp
	UNUSEDALL
	int num;

	if (! getValueType(&num, SVT_INT,&fun -> stack -> thisVar))
    c4b4:	       movea.l 12(sp),a0
    c4b8:	       move.l 24(a0),d0
    c4bc:	       move.l d0,-(sp)
    c4be:	       pea 1 <_start+0x1>
    c4c2:	       move.l sp,d0
    c4c4:	       addq.l #8,d0
    c4c6:	       move.l d0,-(sp)
    c4c8:	       jsr 10ec0 <getValueType>
    c4ce:	       lea 12(sp),sp
    c4d2:	       tst.w d0
    c4d4:	   /-- bne.s c4da <builtIn_random+0x28>
		return BR_ERROR;
    c4d6:	   |   moveq #1,d0
    c4d8:	/--|-- bra.s c524 <builtIn_random+0x72>

	trimStack (&fun -> stack);
    c4da:	|  \-> moveq #24,d0
    c4dc:	|      add.l 12(sp),d0
    c4e0:	|      move.l d0,-(sp)
    c4e2:	|      jsr 11844 <trimStack>
    c4e8:	|      addq.l #4,sp
	if (num <= 0) num = 1;
    c4ea:	|      move.l (sp),d0
    c4ec:	|  /-- bgt.s c4f2 <builtIn_random+0x40>
    c4ee:	|  |   moveq #1,d0
    c4f0:	|  |   move.l d0,(sp)
	setVariable (&fun -> reg, SVT_INT, rand() % num);
    c4f2:	|  \-> jsr c58 <rand>
    c4f8:	|      move.l d0,d1
    c4fa:	|      move.l (sp),d0
    c4fc:	|      move.l d0,-(sp)
    c4fe:	|      move.l d1,-(sp)
    c500:	|      jsr 13ae4 <__umodsi3>
    c506:	|      addq.l #8,sp
    c508:	|      move.l d0,d1
    c50a:	|      moveq #28,d0
    c50c:	|      add.l 12(sp),d0
    c510:	|      move.l d1,-(sp)
    c512:	|      pea 1 <_start+0x1>
    c516:	|      move.l d0,-(sp)
    c518:	|      jsr 117b2 <setVariable>
    c51e:	|      lea 12(sp),sp
	return BR_CONTINUE;
    c522:	|      moveq #2,d0
}
    c524:	\----> addq.l #4,sp
    c526:	       rts

0000c528 <builtIn_setStatusColour>:
	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	statusBarColour ((byte) red, (byte) green, (byte) blue);
	return BR_CONTINUE; ToDo amigize this?*/
}
    c528:	nop
    c52a:	rts

0000c52c <builtIn_setLitStatusColour>:

	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	statusBarLitColour ((byte) red, (byte) green, (byte) blue);Todo - Amigize this?*/
	return BR_CONTINUE;
    c52c:	moveq #2,d0
}
    c52e:	rts

0000c530 <builtIn_setPasteColour>:

	/*if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	setFontColour (pastePalette, (byte) red, (byte) green, (byte) blue);Todo Amigize This?*/
	return BR_CONTINUE;
    c530:	moveq #2,d0
}
    c532:	rts

0000c534 <builtIn_setBlankColour>:
	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	currentBlankColour = makeColour (red & 255, green & 255, blue & 255);
	setVariable (&fun -> reg, SVT_INT, 1);Todo Amigize this?*/
	return BR_CONTINUE;
    c534:	moveq #2,d0
}
    c536:	rts

0000c538 <builtIn_setBurnColour>:

	currentBurnR = red;
	currentBurnG = green;
	currentBurnB = blue;
	setVariable (&fun -> reg, SVT_INT, 1);Todo Amigize this?*/
	return BR_CONTINUE;
    c538:	moveq #2,d0
}
    c53a:	rts

0000c53c <builtIn_setFont>:


builtIn(setFont)
{
    c53c:	       lea -16(sp),sp
    c540:	       move.l a6,-(sp)
    UNUSEDALL
    int fileNumber, newHeight;
    if (!getValueType(&newHeight, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    c542:	       movea.l 28(sp),a0
    c546:	       move.l 24(a0),d0
    c54a:	       move.l d0,-(sp)
    c54c:	       pea 1 <_start+0x1>
    c550:	       lea 12(sp),a0
    c554:	       move.l a0,-(sp)
    c556:	       jsr 10ec0 <getValueType>
    c55c:	       lea 12(sp),sp
    c560:	       tst.w d0
    c562:	   /-- bne.s c56a <builtIn_setFont+0x2e>
    c564:	   |   moveq #1,d0
    c566:	/--|-- bra.w c618 <builtIn_setFont+0xdc>
    //              KPrintF("  Height: %d\n", newHeight);
    trimStack(&fun->stack);
    c56a:	|  \-> moveq #24,d0
    c56c:	|      add.l 28(sp),d0
    c570:	|      move.l d0,-(sp)
    c572:	|      jsr 11844 <trimStack>
    c578:	|      addq.l #4,sp
    char *newText = getTextFromAnyVar(&(fun->stack->thisVar));
    c57a:	|      movea.l 28(sp),a0
    c57e:	|      move.l 24(a0),d0
    c582:	|      move.l d0,-(sp)
    c584:	|      jsr 11496 <getTextFromAnyVar>
    c58a:	|      addq.l #4,sp
    c58c:	|      move.l d0,16(sp)
    if (!newText) return BR_ERROR;
    c590:	|  /-- bne.s c598 <builtIn_setFont+0x5c>
    c592:	|  |   moveq #1,d0
    c594:	+--|-- bra.w c618 <builtIn_setFont+0xdc>
    //              KPrintF("  Character supported: %s\n", newText);
    trimStack(&fun->stack);
    c598:	|  \-> moveq #24,d0
    c59a:	|      add.l 28(sp),d0
    c59e:	|      move.l d0,-(sp)
    c5a0:	|      jsr 11844 <trimStack>
    c5a6:	|      addq.l #4,sp
    if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) return BR_ERROR;
    c5a8:	|      movea.l 28(sp),a0
    c5ac:	|      move.l 24(a0),d0
    c5b0:	|      move.l d0,-(sp)
    c5b2:	|      pea 5 <_start+0x5>
    c5b6:	|      lea 16(sp),a0
    c5ba:	|      move.l a0,-(sp)
    c5bc:	|      jsr 10ec0 <getValueType>
    c5c2:	|      lea 12(sp),sp
    c5c6:	|      tst.w d0
    c5c8:	|  /-- bne.s c5ce <builtIn_setFont+0x92>
    c5ca:	|  |   moveq #1,d0
    c5cc:	+--|-- bra.s c618 <builtIn_setFont+0xdc>
    //              KPrintF("  File: %d\n", fileNumber);
    trimStack(&fun->stack);
    c5ce:	|  \-> moveq #24,d0
    c5d0:	|      add.l 28(sp),d0
    c5d4:	|      move.l d0,-(sp)
    c5d6:	|      jsr 11844 <trimStack>
    c5dc:	|      addq.l #4,sp
    if (!loadFont(fileNumber, newText, newHeight)) return BR_ERROR;
    c5de:	|      move.l 4(sp),d1
    c5e2:	|      move.l 8(sp),d0
    c5e6:	|      move.l d1,-(sp)
    c5e8:	|      move.l 20(sp),-(sp)
    c5ec:	|      move.l d0,-(sp)
    c5ee:	|      jsr 118b8 <loadFont>
    c5f4:	|      lea 12(sp),sp
    c5f8:	|      tst.w d0
    c5fa:	|  /-- bne.s c600 <builtIn_setFont+0xc4>
    c5fc:	|  |   moveq #1,d0
    c5fe:	+--|-- bra.s c618 <builtIn_setFont+0xdc>
    //              KPrintF("  Done!\n");
    FreeVec(newText);
    c600:	|  \-> move.l 16(sp),12(sp)
    c606:	|      move.l 19c5e <SysBase>,d0
    c60c:	|      movea.l d0,a6
    c60e:	|      movea.l 12(sp),a1
    c612:	|      jsr -690(a6)

    return BR_CONTINUE;
    c616:	|      moveq #2,d0
}
    c618:	\----> movea.l (sp)+,a6
    c61a:	       lea 16(sp),sp
    c61e:	       rts

0000c620 <builtIn_inFont>:

builtIn(inFont)
{
    c620:	       subq.l #4,sp
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    c622:	       movea.l 12(sp),a0
    c626:	       move.l 24(a0),d0
    c62a:	       move.l d0,-(sp)
    c62c:	       jsr 11496 <getTextFromAnyVar>
    c632:	       addq.l #4,sp
    c634:	       move.l d0,(sp)
	if (! newText) return BR_ERROR;
    c636:	   /-- bne.s c63c <builtIn_inFont+0x1c>
    c638:	   |   moveq #1,d0
    c63a:	/--|-- bra.s c672 <builtIn_inFont+0x52>
	trimStack (&fun -> stack);
    c63c:	|  \-> moveq #24,d0
    c63e:	|      add.l 12(sp),d0
    c642:	|      move.l d0,-(sp)
    c644:	|      jsr 11844 <trimStack>
    c64a:	|      addq.l #4,sp

	// Return value
	
	setVariable (&fun -> reg, SVT_INT, isInFont(newText));
    c64c:	|      move.l (sp),-(sp)
    c64e:	|      jsr 1188c <isInFont>
    c654:	|      addq.l #4,sp
    c656:	|      movea.w d0,a0
    c658:	|      moveq #28,d0
    c65a:	|      add.l 12(sp),d0
    c65e:	|      move.l a0,-(sp)
    c660:	|      pea 1 <_start+0x1>
    c664:	|      move.l d0,-(sp)
    c666:	|      jsr 117b2 <setVariable>
    c66c:	|      lea 12(sp),sp
	return BR_CONTINUE;
    c670:	|      moveq #2,d0
}
    c672:	\----> addq.l #4,sp
    c674:	       rts

0000c676 <builtIn_pasteString>:

builtIn(pasteString)
{
    c676:	       lea -16(sp),sp
    c67a:	       move.l a6,-(sp)
    c67c:	       move.l d2,-(sp)
    UNUSEDALL
    char *newText = getTextFromAnyVar(&(fun->stack->thisVar));
    c67e:	       movea.l 32(sp),a0
    c682:	       move.l 24(a0),d0
    c686:	       move.l d0,-(sp)
    c688:	       jsr 11496 <getTextFromAnyVar>
    c68e:	       addq.l #4,sp
    c690:	       move.l d0,20(sp)
    trimStack(&fun->stack);
    c694:	       moveq #24,d0
    c696:	       add.l 32(sp),d0
    c69a:	       move.l d0,-(sp)
    c69c:	       jsr 11844 <trimStack>
    c6a2:	       addq.l #4,sp
    int y, x;
    if (!getValueType(&y, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    c6a4:	       movea.l 32(sp),a0
    c6a8:	       move.l 24(a0),d0
    c6ac:	       move.l d0,-(sp)
    c6ae:	       pea 1 <_start+0x1>
    c6b2:	       lea 20(sp),a0
    c6b6:	       move.l a0,-(sp)
    c6b8:	       jsr 10ec0 <getValueType>
    c6be:	       lea 12(sp),sp
    c6c2:	       tst.w d0
    c6c4:	   /-- bne.s c6cc <builtIn_pasteString+0x56>
    c6c6:	   |   moveq #1,d0
    c6c8:	/--|-- bra.w c754 <builtIn_pasteString+0xde>
    trimStack(&fun->stack);
    c6cc:	|  \-> moveq #24,d0
    c6ce:	|      add.l 32(sp),d0
    c6d2:	|      move.l d0,-(sp)
    c6d4:	|      jsr 11844 <trimStack>
    c6da:	|      addq.l #4,sp
    if (!getValueType(&x, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    c6dc:	|      movea.l 32(sp),a0
    c6e0:	|      move.l 24(a0),d0
    c6e4:	|      move.l d0,-(sp)
    c6e6:	|      pea 1 <_start+0x1>
    c6ea:	|      lea 16(sp),a0
    c6ee:	|      move.l a0,-(sp)
    c6f0:	|      jsr 10ec0 <getValueType>
    c6f6:	|      lea 12(sp),sp
    c6fa:	|      tst.w d0
    c6fc:	|  /-- bne.s c702 <builtIn_pasteString+0x8c>
    c6fe:	|  |   moveq #1,d0
    c700:	+--|-- bra.s c754 <builtIn_pasteString+0xde>
    trimStack(&fun->stack);
    c702:	|  \-> moveq #24,d0
    c704:	|      add.l 32(sp),d0
    c708:	|      move.l d0,-(sp)
    c70a:	|      jsr 11844 <trimStack>
    c710:	|      addq.l #4,sp
    if (x == IN_THE_CENTRE) x = (winWidth - stringWidth(newText)) >> 1;
    c712:	|      move.l 8(sp),d0
    c716:	|      cmpi.l #65535,d0
    c71c:	|  /-- bne.s c73c <builtIn_pasteString+0xc6>
    c71e:	|  |   move.l 19b5e <winWidth>,d2
    c724:	|  |   move.l 20(sp),-(sp)
    c728:	|  |   jsr 1189e <stringWidth>
    c72e:	|  |   addq.l #4,sp
    c730:	|  |   move.l d2,d1
    c732:	|  |   sub.l d0,d1
    c734:	|  |   move.l d1,d0
    c736:	|  |   lsr.l #1,d0
    c738:	|  |   move.l d0,8(sp)
    //fixFont(pastePalette);
    //pasteStringToBackdrop(newText, x, y, pastePalette); //Todo: Amigize this
    FreeVec(newText); 
    c73c:	|  \-> move.l 20(sp),16(sp)
    c742:	|      move.l 19c5e <SysBase>,d0
    c748:	|      movea.l d0,a6
    c74a:	|      movea.l 16(sp),a1
    c74e:	|      jsr -690(a6)
    return BR_CONTINUE;
    c752:	|      moveq #2,d0
}
    c754:	\----> move.l (sp)+,d2
    c756:	       movea.l (sp)+,a6
    c758:	       lea 16(sp),sp
    c75c:	       rts

0000c75e <builtIn_anim>:

builtIn(anim)
{
    c75e:	       lea -12(sp),sp
	UNUSEDALL
	if (numParams < 2) {
    c762:	       moveq #1,d0
    c764:	       cmp.l 16(sp),d0
    c768:	   /-- blt.s c77e <builtIn_anim+0x20>
		KPrintF("Built-in function anim() must have at least 2 parameters.");
    c76a:	   |   pea 16a2c <graphics.c.1c13408a+0x1ca>
    c770:	   |   jsr 12f14 <KPrintF>
    c776:	   |   addq.l #4,sp
		return BR_ERROR;
    c778:	   |   moveq #1,d0
    c77a:	/--|-- bra.w c80c <builtIn_anim+0xae>
	}


	// First store the frame numbers and take 'em off the stack
	struct personaAnimation * ba = createPersonaAnim (numParams - 1, &fun -> stack);
    c77e:	|  \-> moveq #24,d1
    c780:	|      add.l 20(sp),d1
    c784:	|      move.l 16(sp),d0
    c788:	|      subq.l #1,d0
    c78a:	|      move.l d1,-(sp)
    c78c:	|      move.l d0,-(sp)
    c78e:	|      jsr 6726 <createPersonaAnim>
    c794:	|      addq.l #8,sp
    c796:	|      move.l d0,8(sp)

	// Only remaining paramter is the file number
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    c79a:	|      movea.l 20(sp),a0
    c79e:	|      move.l 24(a0),d0
    c7a2:	|      move.l d0,-(sp)
    c7a4:	|      pea 5 <_start+0x5>
    c7a8:	|      lea 8(sp),a0
    c7ac:	|      move.l a0,-(sp)
    c7ae:	|      jsr 10ec0 <getValueType>
    c7b4:	|      lea 12(sp),sp
    c7b8:	|      tst.w d0
    c7ba:	|  /-- bne.s c7c0 <builtIn_anim+0x62>
    c7bc:	|  |   moveq #1,d0
    c7be:	+--|-- bra.s c80c <builtIn_anim+0xae>
	trimStack (&fun -> stack);
    c7c0:	|  \-> moveq #24,d0
    c7c2:	|      add.l 20(sp),d0
    c7c6:	|      move.l d0,-(sp)
    c7c8:	|      jsr 11844 <trimStack>
    c7ce:	|      addq.l #4,sp

	// Load the required sprite bank
	struct loadedSpriteBank * sprBanky = loadBankForAnim (fileNumber);
    c7d0:	|      move.l (sp),d0
    c7d2:	|      move.l d0,-(sp)
    c7d4:	|      jsr 8ad0 <loadBankForAnim>
    c7da:	|      addq.l #4,sp
    c7dc:	|      move.l d0,4(sp)
	if (! sprBanky) return BR_ERROR;	// File not found, fatal done already
    c7e0:	|  /-- bne.s c7e6 <builtIn_anim+0x88>
    c7e2:	|  |   moveq #1,d0
    c7e4:	+--|-- bra.s c80c <builtIn_anim+0xae>
	setBankFile (ba, sprBanky);
    c7e6:	|  \-> move.l 4(sp),-(sp)
    c7ea:	|      move.l 12(sp),-(sp)
    c7ee:	|      jsr 7f74 <setBankFile>
    c7f4:	|      addq.l #8,sp

	// Return value
	newAnimationVariable (&fun -> reg, ba);
    c7f6:	|      moveq #28,d0
    c7f8:	|      add.l 20(sp),d0
    c7fc:	|      move.l 8(sp),-(sp)
    c800:	|      move.l d0,-(sp)
    c802:	|      jsr 1176e <newAnimationVariable>
    c808:	|      addq.l #8,sp
	return BR_CONTINUE;
    c80a:	|      moveq #2,d0
}
    c80c:	\----> lea 12(sp),sp
    c810:	       rts

0000c812 <builtIn_costume>:

builtIn(costume)
{
    c812:	          lea -32(sp),sp
    c816:	          move.l a6,-(sp)
    c818:	          move.l a2,-(sp)
    UNUSEDALL
    struct persona * newPersona = AllocVec(sizeof(struct persona), MEMF_ANY);
    c81a:	          moveq #8,d0
    c81c:	          move.l d0,32(sp)
    c820:	          clr.l 28(sp)
    c824:	          move.l 19c5e <SysBase>,d0
    c82a:	          movea.l d0,a6
    c82c:	          move.l 32(sp),d0
    c830:	          move.l 28(sp),d1
    c834:	          jsr -684(a6)
    c838:	          move.l d0,24(sp)
    c83c:	          move.l 24(sp),d0
    c840:	          move.l d0,20(sp)
    if (!newPersona) return BR_ERROR;
    c844:	      /-- bne.s c84c <builtIn_costume+0x3a>
    c846:	      |   moveq #1,d0
    c848:	/-----|-- bra.w c934 <builtIn_costume+0x122>
    newPersona->numDirections = numParams / 3;
    c84c:	|     \-> move.l 44(sp),d0
    c850:	|         pea 3 <_start+0x3>
    c854:	|         move.l d0,-(sp)
    c856:	|         jsr 13a88 <__divsi3>
    c85c:	|         addq.l #8,sp
    c85e:	|         movea.l 20(sp),a0
    c862:	|         move.l d0,4(a0)
    if (numParams == 0 || newPersona->numDirections * 3 != numParams) {
    c866:	|         tst.l 44(sp)
    c86a:	|     /-- beq.s c880 <builtIn_costume+0x6e>
    c86c:	|     |   movea.l 20(sp),a0
    c870:	|     |   move.l 4(a0),d1
    c874:	|     |   move.l d1,d0
    c876:	|     |   add.l d0,d0
    c878:	|     |   add.l d1,d0
    c87a:	|     |   cmp.l 44(sp),d0
    c87e:	|  /--|-- beq.s c894 <builtIn_costume+0x82>
        KPrintF("Illegal number of parameters (should be greater than 0 and divisible by 3)");
    c880:	|  |  \-> pea 16a66 <graphics.c.1c13408a+0x204>
    c886:	|  |      jsr 12f14 <KPrintF>
    c88c:	|  |      addq.l #4,sp
        return BR_ERROR;
    c88e:	|  |      moveq #1,d0
    c890:	+--|----- bra.w c934 <builtIn_costume+0x122>
    }
    int iii;
    newPersona->animation = AllocVec(sizeof(struct personaAnimation *) * numParams, MEMF_ANY);
    c894:	|  \----> move.l 44(sp),d0
    c898:	|         add.l d0,d0
    c89a:	|         add.l d0,d0
    c89c:	|         move.l d0,16(sp)
    c8a0:	|         clr.l 12(sp)
    c8a4:	|         move.l 19c5e <SysBase>,d0
    c8aa:	|         movea.l d0,a6
    c8ac:	|         move.l 16(sp),d0
    c8b0:	|         move.l 12(sp),d1
    c8b4:	|         jsr -684(a6)
    c8b8:	|         move.l d0,8(sp)
    c8bc:	|         move.l 8(sp),d0
    c8c0:	|         movea.l 20(sp),a0
    c8c4:	|         move.l d0,(a0)
    if (!newPersona->animation) return BR_ERROR;
    c8c6:	|         movea.l 20(sp),a0
    c8ca:	|         move.l (a0),d0
    c8cc:	|     /-- bne.s c8d2 <builtIn_costume+0xc0>
    c8ce:	|     |   moveq #1,d0
    c8d0:	+-----|-- bra.s c934 <builtIn_costume+0x122>
    for (iii = numParams - 1; iii >= 0; iii--) {
    c8d2:	|     \-> move.l 44(sp),d0
    c8d6:	|         subq.l #1,d0
    c8d8:	|         move.l d0,36(sp)
    c8dc:	|     /-- bra.s c918 <builtIn_costume+0x106>
        newPersona->animation[iii] = getAnimationFromVar(&(fun->stack->thisVar));
    c8de:	|  /--|-> movea.l 48(sp),a0
    c8e2:	|  |  |   move.l 24(a0),d0
    c8e6:	|  |  |   movea.l 20(sp),a0
    c8ea:	|  |  |   movea.l (a0),a0
    c8ec:	|  |  |   move.l 36(sp),d1
    c8f0:	|  |  |   add.l d1,d1
    c8f2:	|  |  |   add.l d1,d1
    c8f4:	|  |  |   lea (0,a0,d1.l),a2
    c8f8:	|  |  |   move.l d0,-(sp)
    c8fa:	|  |  |   jsr 11398 <getAnimationFromVar>
    c900:	|  |  |   addq.l #4,sp
    c902:	|  |  |   move.l d0,(a2)
        trimStack(&fun->stack);
    c904:	|  |  |   moveq #24,d0
    c906:	|  |  |   add.l 48(sp),d0
    c90a:	|  |  |   move.l d0,-(sp)
    c90c:	|  |  |   jsr 11844 <trimStack>
    c912:	|  |  |   addq.l #4,sp
    for (iii = numParams - 1; iii >= 0; iii--) {
    c914:	|  |  |   subq.l #1,36(sp)
    c918:	|  |  \-> tst.l 36(sp)
    c91c:	|  \----- bge.s c8de <builtIn_costume+0xcc>
    }

    // Return value
    newCostumeVariable(&fun->reg, newPersona);
    c91e:	|         moveq #28,d0
    c920:	|         add.l 48(sp),d0
    c924:	|         move.l 20(sp),-(sp)
    c928:	|         move.l d0,-(sp)
    c92a:	|         jsr 11790 <newCostumeVariable>
    c930:	|         addq.l #8,sp
    return BR_CONTINUE;
    c932:	|         moveq #2,d0
}
    c934:	\-------> movea.l (sp)+,a2
    c936:	          movea.l (sp)+,a6
    c938:	          lea 32(sp),sp
    c93c:	          rts

0000c93e <builtIn_launch>:

builtIn(launch)
{
    c93e:	          lea -20(sp),sp
    c942:	          move.l a6,-(sp)
    UNUSEDALL
    char * newTextA = getTextFromAnyVar(&(fun->stack->thisVar));
    c944:	          movea.l 32(sp),a0
    c948:	          move.l 24(a0),d0
    c94c:	          move.l d0,-(sp)
    c94e:	          jsr 11496 <getTextFromAnyVar>
    c954:	          addq.l #4,sp
    c956:	          move.l d0,20(sp)
    if (!newTextA) return BR_ERROR;
    c95a:	      /-- bne.s c962 <builtIn_launch+0x24>
    c95c:	      |   moveq #1,d0
    c95e:	/-----|-- bra.w ca90 <builtIn_launch+0x152>

    char * newText = encodeFilename(newTextA);
    c962:	|     \-> move.l 20(sp),-(sp)
    c966:	|         jsr 2fe <encodeFilename>
    c96c:	|         addq.l #4,sp
    c96e:	|         move.l d0,16(sp)

    trimStack(&fun->stack);
    c972:	|         moveq #24,d0
    c974:	|         add.l 32(sp),d0
    c978:	|         move.l d0,-(sp)
    c97a:	|         jsr 11844 <trimStack>
    c980:	|         addq.l #4,sp
    if (newTextA[0] == 'h' &&
    c982:	|         movea.l 20(sp),a0
    c986:	|         move.b (a0),d0
    c988:	|         cmpi.b #104,d0
    c98c:	|  /----- bne.s c9f6 <builtIn_launch+0xb8>
        newTextA[1] == 't' &&
    c98e:	|  |      movea.l 20(sp),a0
    c992:	|  |      addq.l #1,a0
    c994:	|  |      move.b (a0),d0
    if (newTextA[0] == 'h' &&
    c996:	|  |      cmpi.b #116,d0
    c99a:	|  +----- bne.s c9f6 <builtIn_launch+0xb8>
        newTextA[2] == 't' &&
    c99c:	|  |      movea.l 20(sp),a0
    c9a0:	|  |      addq.l #2,a0
    c9a2:	|  |      move.b (a0),d0
        newTextA[1] == 't' &&
    c9a4:	|  |      cmpi.b #116,d0
    c9a8:	|  +----- bne.s c9f6 <builtIn_launch+0xb8>
        newTextA[3] == 'p' &&
    c9aa:	|  |      movea.l 20(sp),a0
    c9ae:	|  |      addq.l #3,a0
    c9b0:	|  |      move.b (a0),d0
        newTextA[2] == 't' &&
    c9b2:	|  |      cmpi.b #112,d0
    c9b6:	|  +----- bne.s c9f6 <builtIn_launch+0xb8>
        (newTextA[4] == ':' || (newTextA[4] == 's' && newTextA[5] == ':'))) {
    c9b8:	|  |      movea.l 20(sp),a0
    c9bc:	|  |      addq.l #4,a0
    c9be:	|  |      move.b (a0),d0
        newTextA[3] == 'p' &&
    c9c0:	|  |      cmpi.b #58,d0
    c9c4:	|  |  /-- beq.s c9e2 <builtIn_launch+0xa4>
        (newTextA[4] == ':' || (newTextA[4] == 's' && newTextA[5] == ':'))) {
    c9c6:	|  |  |   movea.l 20(sp),a0
    c9ca:	|  |  |   addq.l #4,a0
    c9cc:	|  |  |   move.b (a0),d0
    c9ce:	|  |  |   cmpi.b #115,d0
    c9d2:	|  +--|-- bne.s c9f6 <builtIn_launch+0xb8>
    c9d4:	|  |  |   movea.l 20(sp),a0
    c9d8:	|  |  |   addq.l #5,a0
    c9da:	|  |  |   move.b (a0),d0
    c9dc:	|  |  |   cmpi.b #58,d0
    c9e0:	|  +--|-- bne.s c9f6 <builtIn_launch+0xb8>

        // IT'S A WEBSITE!
        launchMe = copyString(newTextA);
    c9e2:	|  |  \-> move.l 20(sp),-(sp)
    c9e6:	|  |      jsr b8 <copyString>
    c9ec:	|  |      addq.l #4,sp
    c9ee:	|  |      move.l d0,19d20 <launchMe>
    c9f4:	|  |  /-- bra.s ca48 <builtIn_launch+0x10a>
    } else {
        char *gameDir;
        gameDir = joinStrings(gamePath, "/");
    c9f6:	|  \--|-> move.l 19b72 <gamePath>,d0
    c9fc:	|     |   pea 16ab1 <graphics.c.1c13408a+0x24f>
    ca02:	|     |   move.l d0,-(sp)
    ca04:	|     |   jsr 103ec <joinStrings>
    ca0a:	|     |   addq.l #8,sp
    ca0c:	|     |   move.l d0,12(sp)

        launchMe = joinStrings(gameDir, newText);
    ca10:	|     |   move.l 16(sp),-(sp)
    ca14:	|     |   move.l 16(sp),-(sp)
    ca18:	|     |   jsr 103ec <joinStrings>
    ca1e:	|     |   addq.l #8,sp
    ca20:	|     |   move.l d0,19d20 <launchMe>
        FreeVec(newText);
    ca26:	|     |   move.l 16(sp),8(sp)
    ca2c:	|     |   move.l 19c5e <SysBase>,d0
    ca32:	|     |   movea.l d0,a6
    ca34:	|     |   movea.l 8(sp),a1
    ca38:	|     |   jsr -690(a6)
        if (!launchMe) return BR_ERROR;
    ca3c:	|     |   move.l 19d20 <launchMe>,d0
    ca42:	|     +-- bne.s ca48 <builtIn_launch+0x10a>
    ca44:	|     |   moveq #1,d0
    ca46:	+-----|-- bra.s ca90 <builtIn_launch+0x152>
    }
    FreeVec(newTextA);
    ca48:	|     \-> move.l 20(sp),4(sp)
    ca4e:	|         move.l 19c5e <SysBase>,d0
    ca54:	|         movea.l d0,a6
    ca56:	|         movea.l 4(sp),a1
    ca5a:	|         jsr -690(a6)
    setGraphicsWindow(FALSE);
    ca5e:	|         clr.l -(sp)
    ca60:	|         jsr 1a72 <setGraphicsWindow>
    ca66:	|         addq.l #4,sp
    setVariable(&fun->reg, SVT_INT, 1);
    ca68:	|         moveq #28,d0
    ca6a:	|         add.l 32(sp),d0
    ca6e:	|         pea 1 <_start+0x1>
    ca72:	|         pea 1 <_start+0x1>
    ca76:	|         move.l d0,-(sp)
    ca78:	|         jsr 117b2 <setVariable>
    ca7e:	|         lea 12(sp),sp
    launchResult = &fun->reg;
    ca82:	|         moveq #28,d0
    ca84:	|         add.l 32(sp),d0
    ca88:	|         move.l d0,19d24 <launchResult>

    return BR_KEEP_AND_PAUSE;
    ca8e:	|         moveq #0,d0
}
    ca90:	\-------> movea.l (sp)+,a6
    ca92:	          lea 20(sp),sp
    ca96:	          rts

0000ca98 <builtIn_pause>:

builtIn(pause)
{
    ca98:	       subq.l #4,sp
	UNUSEDALL
	int theTime;
	if (! getValueType(&theTime, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ca9a:	       movea.l 12(sp),a0
    ca9e:	       move.l 24(a0),d0
    caa2:	       move.l d0,-(sp)
    caa4:	       pea 1 <_start+0x1>
    caa8:	       move.l sp,d0
    caaa:	       addq.l #8,d0
    caac:	       move.l d0,-(sp)
    caae:	       jsr 10ec0 <getValueType>
    cab4:	       lea 12(sp),sp
    cab8:	       tst.w d0
    caba:	   /-- bne.s cac0 <builtIn_pause+0x28>
    cabc:	   |   moveq #1,d0
    cabe:	/--|-- bra.s caee <builtIn_pause+0x56>
	trimStack (&fun -> stack);
    cac0:	|  \-> moveq #24,d0
    cac2:	|      add.l 12(sp),d0
    cac6:	|      move.l d0,-(sp)
    cac8:	|      jsr 11844 <trimStack>
    cace:	|      addq.l #4,sp
	if (theTime > 0) {
    cad0:	|      move.l (sp),d0
    cad2:	|  /-- ble.s caec <builtIn_pause+0x54>
		fun -> timeLeft = theTime - 1;
    cad4:	|  |   move.l (sp),d0
    cad6:	|  |   subq.l #1,d0
    cad8:	|  |   movea.l 12(sp),a0
    cadc:	|  |   move.l d0,12(a0)
		fun -> isSpeech = FALSE;
    cae0:	|  |   movea.l 12(sp),a0
    cae4:	|  |   clr.w 50(a0)
		return BR_KEEP_AND_PAUSE;
    cae8:	|  |   moveq #0,d0
    caea:	+--|-- bra.s caee <builtIn_pause+0x56>
	}
	return BR_CONTINUE;
    caec:	|  \-> moveq #2,d0
}
    caee:	\----> addq.l #4,sp
    caf0:	       rts

0000caf2 <builtIn_completeTimers>:

builtIn(completeTimers)
{
	UNUSEDALL
	completeTimers();
    caf2:	jsr 2674 <completeTimers>
	return BR_CONTINUE;
    caf8:	moveq #2,d0
}
    cafa:	rts

0000cafc <builtIn_callEvent>:

builtIn(callEvent)
{
    cafc:	       lea -12(sp),sp
	UNUSEDALL
	int obj1, obj2;
	if (! getValueType(&obj2, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    cb00:	       movea.l 20(sp),a0
    cb04:	       move.l 24(a0),d0
    cb08:	       move.l d0,-(sp)
    cb0a:	       pea 7 <_start+0x7>
    cb0e:	       lea 8(sp),a0
    cb12:	       move.l a0,-(sp)
    cb14:	       jsr 10ec0 <getValueType>
    cb1a:	       lea 12(sp),sp
    cb1e:	       tst.w d0
    cb20:	   /-- bne.s cb28 <builtIn_callEvent+0x2c>
    cb22:	   |   moveq #1,d0
    cb24:	/--|-- bra.w cbbe <builtIn_callEvent+0xc2>
	trimStack (&fun -> stack);
    cb28:	|  \-> moveq #24,d0
    cb2a:	|      add.l 20(sp),d0
    cb2e:	|      move.l d0,-(sp)
    cb30:	|      jsr 11844 <trimStack>
    cb36:	|      addq.l #4,sp
	if (! getValueType(&obj1, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    cb38:	|      movea.l 20(sp),a0
    cb3c:	|      move.l 24(a0),d0
    cb40:	|      move.l d0,-(sp)
    cb42:	|      pea 7 <_start+0x7>
    cb46:	|      moveq #12,d0
    cb48:	|      add.l sp,d0
    cb4a:	|      move.l d0,-(sp)
    cb4c:	|      jsr 10ec0 <getValueType>
    cb52:	|      lea 12(sp),sp
    cb56:	|      tst.w d0
    cb58:	|  /-- bne.s cb5e <builtIn_callEvent+0x62>
    cb5a:	|  |   moveq #1,d0
    cb5c:	+--|-- bra.s cbbe <builtIn_callEvent+0xc2>
	trimStack (&fun -> stack);
    cb5e:	|  \-> moveq #24,d0
    cb60:	|      add.l 20(sp),d0
    cb64:	|      move.l d0,-(sp)
    cb66:	|      jsr 11844 <trimStack>
    cb6c:	|      addq.l #4,sp

	int fNum = getCombinationFunction (obj1, obj2);
    cb6e:	|      move.l (sp),d1
    cb70:	|      move.l 4(sp),d0
    cb74:	|      move.l d1,-(sp)
    cb76:	|      move.l d0,-(sp)
    cb78:	|      jsr 9d46 <getCombinationFunction>
    cb7e:	|      addq.l #8,sp
    cb80:	|      move.l d0,8(sp)

	// Return value
	if (fNum) {
    cb84:	|  /-- beq.s cba4 <builtIn_callEvent+0xa8>
		setVariable (&fun -> reg, SVT_FUNC, fNum);
    cb86:	|  |   moveq #28,d0
    cb88:	|  |   add.l 20(sp),d0
    cb8c:	|  |   move.l 8(sp),-(sp)
    cb90:	|  |   pea 2 <_start+0x2>
    cb94:	|  |   move.l d0,-(sp)
    cb96:	|  |   jsr 117b2 <setVariable>
    cb9c:	|  |   lea 12(sp),sp
		return BR_CALLAFUNC;
    cba0:	|  |   moveq #4,d0
    cba2:	+--|-- bra.s cbbe <builtIn_callEvent+0xc2>
	}
	setVariable (&fun -> reg, SVT_INT, 0);
    cba4:	|  \-> moveq #28,d0
    cba6:	|      add.l 20(sp),d0
    cbaa:	|      clr.l -(sp)
    cbac:	|      pea 1 <_start+0x1>
    cbb0:	|      move.l d0,-(sp)
    cbb2:	|      jsr 117b2 <setVariable>
    cbb8:	|      lea 12(sp),sp
	return BR_CONTINUE;
    cbbc:	|      moveq #2,d0
}
    cbbe:	\----> lea 12(sp),sp
    cbc2:	       rts

0000cbc4 <builtIn_quitGame>:
BOOL reallyWantToQuit = FALSE;

builtIn(quitGame)
{
	UNUSEDALL
	reallyWantToQuit = TRUE;
    cbc4:	move.w #1,19d30 <reallyWantToQuit>
	//quit_event.type=SDL_QUIT; Todo: Amigize
	//SDL_PushEvent(&quit_event);
	return BR_CONTINUE;
    cbcc:	moveq #2,d0
}
    cbce:	rts

0000cbd0 <builtIn__rem_movieStart>:

// The old movie functions are deprecated and does nothing.
builtIn(_rem_movieStart)
{
	UNUSEDALL
	trimStack (&fun -> stack);
    cbd0:	moveq #24,d0
    cbd2:	add.l 8(sp),d0
    cbd6:	move.l d0,-(sp)
    cbd8:	jsr 11844 <trimStack>
    cbde:	addq.l #4,sp
	KPrintF("Movie Stuff not supported on Amiga");
    cbe0:	pea 16ab3 <graphics.c.1c13408a+0x251>
    cbe6:	jsr 12f14 <KPrintF>
    cbec:	addq.l #4,sp
	return BR_CONTINUE;
    cbee:	moveq #2,d0
}
    cbf0:	rts

0000cbf2 <builtIn__rem_movieAbort>:

builtIn(_rem_movieAbort)
{
	UNUSEDALL
	//setVariable (&fun -> reg, SVT_INT, 0);
	KPrintF("Movie Stuff not supported on Amiga");
    cbf2:	pea 16ab3 <graphics.c.1c13408a+0x251>
    cbf8:	jsr 12f14 <KPrintF>
    cbfe:	addq.l #4,sp
	return BR_CONTINUE;
    cc00:	moveq #2,d0
}
    cc02:	rts

0000cc04 <builtIn__rem_moviePlaying>:

builtIn(_rem_moviePlaying)
{
	UNUSEDALL
	KPrintF("Movie Stuff not supported on Amiga");
    cc04:	pea 16ab3 <graphics.c.1c13408a+0x251>
    cc0a:	jsr 12f14 <KPrintF>
    cc10:	addq.l #4,sp
	//setVariable (&fun -> reg, SVT_INT, 0);
	return BR_CONTINUE;
    cc12:	moveq #2,d0
}
    cc14:	rts

0000cc16 <builtIn_playMovie>:
	
	if (r && (! fun->next)) {
		restartFunction (fun);
		return BR_ALREADY_GONE;
	}*/
	KPrintF("Movie Stuff not supported on Amiga");
    cc16:	pea 16ab3 <graphics.c.1c13408a+0x251>
    cc1c:	jsr 12f14 <KPrintF>
    cc22:	addq.l #4,sp
	return BR_CONTINUE;
    cc24:	moveq #2,d0
}
    cc26:	rts

0000cc28 <builtIn_stopMovie>:
	/*int r;
	
	r = stopMovie();
	
	setVariable (&fun -> reg, SVT_INT, 0);*/
	KPrintF("Movie Stuff not supported on Amiga");
    cc28:	pea 16ab3 <graphics.c.1c13408a+0x251>
    cc2e:	jsr 12f14 <KPrintF>
    cc34:	addq.l #4,sp
	return BR_CONTINUE;
    cc36:	moveq #2,d0
}
    cc38:	rts

0000cc3a <builtIn_pauseMovie>:
	/*int r;
	
	r = pauseMovie();
	
	setVariable (&fun -> reg, SVT_INT, 0);*/
	KPrintF("Movie Stuff not supported on Amiga");
    cc3a:	pea 16ab3 <graphics.c.1c13408a+0x251>
    cc40:	jsr 12f14 <KPrintF>
    cc46:	addq.l #4,sp
	return BR_CONTINUE;
    cc48:	moveq #2,d0
}
    cc4a:	rts

0000cc4c <builtIn_startMusic>:

#pragma mark -
#pragma mark Audio functions

builtIn(startMusic)
{
    cc4c:	       lea -12(sp),sp
	UNUSEDALL
	int fromTrack, musChan, fileNumber;
	if (! getValueType(&fromTrack, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    cc50:	       movea.l 20(sp),a0
    cc54:	       move.l 24(a0),d0
    cc58:	       move.l d0,-(sp)
    cc5a:	       pea 1 <_start+0x1>
    cc5e:	       moveq #16,d0
    cc60:	       add.l sp,d0
    cc62:	       move.l d0,-(sp)
    cc64:	       jsr 10ec0 <getValueType>
    cc6a:	       lea 12(sp),sp
    cc6e:	       tst.w d0
    cc70:	   /-- bne.s cc78 <builtIn_startMusic+0x2c>
    cc72:	   |   moveq #1,d0
    cc74:	/--|-- bra.w cd18 <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
    cc78:	|  \-> moveq #24,d0
    cc7a:	|      add.l 20(sp),d0
    cc7e:	|      move.l d0,-(sp)
    cc80:	|      jsr 11844 <trimStack>
    cc86:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    cc88:	|      movea.l 20(sp),a0
    cc8c:	|      move.l 24(a0),d0
    cc90:	|      move.l d0,-(sp)
    cc92:	|      pea 1 <_start+0x1>
    cc96:	|      moveq #12,d0
    cc98:	|      add.l sp,d0
    cc9a:	|      move.l d0,-(sp)
    cc9c:	|      jsr 10ec0 <getValueType>
    cca2:	|      lea 12(sp),sp
    cca6:	|      tst.w d0
    cca8:	|  /-- bne.s ccae <builtIn_startMusic+0x62>
    ccaa:	|  |   moveq #1,d0
    ccac:	+--|-- bra.s cd18 <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
    ccae:	|  \-> moveq #24,d0
    ccb0:	|      add.l 20(sp),d0
    ccb4:	|      move.l d0,-(sp)
    ccb6:	|      jsr 11844 <trimStack>
    ccbc:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    ccbe:	|      movea.l 20(sp),a0
    ccc2:	|      move.l 24(a0),d0
    ccc6:	|      move.l d0,-(sp)
    ccc8:	|      pea 5 <_start+0x5>
    cccc:	|      lea 8(sp),a0
    ccd0:	|      move.l a0,-(sp)
    ccd2:	|      jsr 10ec0 <getValueType>
    ccd8:	|      lea 12(sp),sp
    ccdc:	|      tst.w d0
    ccde:	|  /-- bne.s cce4 <builtIn_startMusic+0x98>
    cce0:	|  |   moveq #1,d0
    cce2:	+--|-- bra.s cd18 <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
    cce4:	|  \-> moveq #24,d0
    cce6:	|      add.l 20(sp),d0
    ccea:	|      move.l d0,-(sp)
    ccec:	|      jsr 11844 <trimStack>
    ccf2:	|      addq.l #4,sp
	if (! playMOD (fileNumber, musChan, fromTrack)) return BR_CONTINUE; //BR_ERROR;
    ccf4:	|      movea.l 8(sp),a0
    ccf8:	|      move.l 4(sp),d1
    ccfc:	|      move.l (sp),d0
    ccfe:	|      move.l a0,-(sp)
    cd00:	|      move.l d1,-(sp)
    cd02:	|      move.l d0,-(sp)
    cd04:	|      jsr 98fa <playMOD>
    cd0a:	|      lea 12(sp),sp
    cd0e:	|      tst.w d0
    cd10:	|  /-- bne.s cd16 <builtIn_startMusic+0xca>
    cd12:	|  |   moveq #2,d0
    cd14:	+--|-- bra.s cd18 <builtIn_startMusic+0xcc>
	return BR_CONTINUE;
    cd16:	|  \-> moveq #2,d0
}
    cd18:	\----> lea 12(sp),sp
    cd1c:	       rts

0000cd1e <builtIn_stopMusic>:

builtIn(stopMusic)
{
    cd1e:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    cd20:	       movea.l 12(sp),a0
    cd24:	       move.l 24(a0),d0
    cd28:	       move.l d0,-(sp)
    cd2a:	       pea 1 <_start+0x1>
    cd2e:	       move.l sp,d0
    cd30:	       addq.l #8,d0
    cd32:	       move.l d0,-(sp)
    cd34:	       jsr 10ec0 <getValueType>
    cd3a:	       lea 12(sp),sp
    cd3e:	       tst.w d0
    cd40:	   /-- bne.s cd46 <builtIn_stopMusic+0x28>
    cd42:	   |   moveq #1,d0
    cd44:	/--|-- bra.s cd64 <builtIn_stopMusic+0x46>
	trimStack (&fun -> stack);
    cd46:	|  \-> moveq #24,d0
    cd48:	|      add.l 12(sp),d0
    cd4c:	|      move.l d0,-(sp)
    cd4e:	|      jsr 11844 <trimStack>
    cd54:	|      addq.l #4,sp
	stopMOD (v);
    cd56:	|      move.l (sp),d0
    cd58:	|      move.l d0,-(sp)
    cd5a:	|      jsr 9996 <stopMOD>
    cd60:	|      addq.l #4,sp
	return BR_CONTINUE;
    cd62:	|      moveq #2,d0
}
    cd64:	\----> addq.l #4,sp
    cd66:	       rts

0000cd68 <builtIn_setMusicVolume>:

builtIn(setMusicVolume)
{
    cd68:	       subq.l #8,sp
	UNUSEDALL
	int musChan, v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    cd6a:	       movea.l 16(sp),a0
    cd6e:	       move.l 24(a0),d0
    cd72:	       move.l d0,-(sp)
    cd74:	       pea 1 <_start+0x1>
    cd78:	       move.l sp,d0
    cd7a:	       addq.l #8,d0
    cd7c:	       move.l d0,-(sp)
    cd7e:	       jsr 10ec0 <getValueType>
    cd84:	       lea 12(sp),sp
    cd88:	       tst.w d0
    cd8a:	   /-- bne.s cd90 <builtIn_setMusicVolume+0x28>
    cd8c:	   |   moveq #1,d0
    cd8e:	/--|-- bra.s cdea <builtIn_setMusicVolume+0x82>
	trimStack (&fun -> stack);
    cd90:	|  \-> moveq #24,d0
    cd92:	|      add.l 16(sp),d0
    cd96:	|      move.l d0,-(sp)
    cd98:	|      jsr 11844 <trimStack>
    cd9e:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    cda0:	|      movea.l 16(sp),a0
    cda4:	|      move.l 24(a0),d0
    cda8:	|      move.l d0,-(sp)
    cdaa:	|      pea 1 <_start+0x1>
    cdae:	|      moveq #12,d0
    cdb0:	|      add.l sp,d0
    cdb2:	|      move.l d0,-(sp)
    cdb4:	|      jsr 10ec0 <getValueType>
    cdba:	|      lea 12(sp),sp
    cdbe:	|      tst.w d0
    cdc0:	|  /-- bne.s cdc6 <builtIn_setMusicVolume+0x5e>
    cdc2:	|  |   moveq #1,d0
    cdc4:	+--|-- bra.s cdea <builtIn_setMusicVolume+0x82>
	trimStack (&fun -> stack);
    cdc6:	|  \-> moveq #24,d0
    cdc8:	|      add.l 16(sp),d0
    cdcc:	|      move.l d0,-(sp)
    cdce:	|      jsr 11844 <trimStack>
    cdd4:	|      addq.l #4,sp
	setMusicVolume (musChan, v);
    cdd6:	|      move.l (sp),d1
    cdd8:	|      move.l 4(sp),d0
    cddc:	|      move.l d1,-(sp)
    cdde:	|      move.l d0,-(sp)
    cde0:	|      jsr 997c <setMusicVolume>
    cde6:	|      addq.l #8,sp
	return BR_CONTINUE;
    cde8:	|      moveq #2,d0
}
    cdea:	\----> addq.l #8,sp
    cdec:	       rts

0000cdee <builtIn_setDefaultMusicVolume>:

builtIn(setDefaultMusicVolume)
{
    cdee:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    cdf0:	       movea.l 12(sp),a0
    cdf4:	       move.l 24(a0),d0
    cdf8:	       move.l d0,-(sp)
    cdfa:	       pea 1 <_start+0x1>
    cdfe:	       move.l sp,d0
    ce00:	       addq.l #8,d0
    ce02:	       move.l d0,-(sp)
    ce04:	       jsr 10ec0 <getValueType>
    ce0a:	       lea 12(sp),sp
    ce0e:	       tst.w d0
    ce10:	   /-- bne.s ce16 <builtIn_setDefaultMusicVolume+0x28>
    ce12:	   |   moveq #1,d0
    ce14:	/--|-- bra.s ce34 <builtIn_setDefaultMusicVolume+0x46>
	trimStack (&fun -> stack);
    ce16:	|  \-> moveq #24,d0
    ce18:	|      add.l 12(sp),d0
    ce1c:	|      move.l d0,-(sp)
    ce1e:	|      jsr 11844 <trimStack>
    ce24:	|      addq.l #4,sp
	setDefaultMusicVolume (v);
    ce26:	|      move.l (sp),d0
    ce28:	|      move.l d0,-(sp)
    ce2a:	|      jsr 9960 <setDefaultMusicVolume>
    ce30:	|      addq.l #4,sp
	return BR_CONTINUE;
    ce32:	|      moveq #2,d0
}
    ce34:	\----> addq.l #4,sp
    ce36:	       rts

0000ce38 <builtIn_playSound>:

builtIn(playSound)
{
    ce38:	       subq.l #4,sp


	UNUSEDALL
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    ce3a:	       movea.l 12(sp),a0
    ce3e:	       move.l 24(a0),d0
    ce42:	       move.l d0,-(sp)
    ce44:	       pea 5 <_start+0x5>
    ce48:	       move.l sp,d0
    ce4a:	       addq.l #8,d0
    ce4c:	       move.l d0,-(sp)
    ce4e:	       jsr 10ec0 <getValueType>
    ce54:	       lea 12(sp),sp
    ce58:	       tst.w d0
    ce5a:	   /-- bne.s ce60 <builtIn_playSound+0x28>
    ce5c:	   |   moveq #1,d0
    ce5e:	/--|-- bra.s ce88 <builtIn_playSound+0x50>
	trimStack (&fun -> stack);
    ce60:	|  \-> moveq #24,d0
    ce62:	|      add.l 12(sp),d0
    ce66:	|      move.l d0,-(sp)
    ce68:	|      jsr 11844 <trimStack>
    ce6e:	|      addq.l #4,sp
	if (! startSound (fileNumber, FALSE)) return BR_CONTINUE;	// Was BR_ERROR
    ce70:	|      move.l (sp),d0
    ce72:	|      clr.l -(sp)
    ce74:	|      move.l d0,-(sp)
    ce76:	|      jsr 9984 <startSound>
    ce7c:	|      addq.l #8,sp
    ce7e:	|      tst.w d0
    ce80:	|  /-- bne.s ce86 <builtIn_playSound+0x4e>
    ce82:	|  |   moveq #2,d0
    ce84:	+--|-- bra.s ce88 <builtIn_playSound+0x50>
	return BR_CONTINUE;
    ce86:	|  \-> moveq #2,d0
}
    ce88:	\----> addq.l #4,sp
    ce8a:	       rts

0000ce8c <builtIn_loopSound>:

builtIn(loopSound)
{
    ce8c:	             lea -28(sp),sp
    ce90:	             move.l a6,-(sp)
	UNUSEDALL
	int fileNumber;

	if (numParams < 1) {
    ce92:	             tst.l 36(sp)
    ce96:	         /-- bgt.s ceac <builtIn_loopSound+0x20>
		KPrintF("Built-in function loopSound() must have at least 1 parameter.");
    ce98:	         |   pea 16ad6 <graphics.c.1c13408a+0x274>
    ce9e:	         |   jsr 12f14 <KPrintF>
    cea4:	         |   addq.l #4,sp
		return BR_ERROR;
    cea6:	         |   moveq #1,d0
    cea8:	/--------|-- bra.w d068 <builtIn_loopSound+0x1dc>
	} else if (numParams < 2) {
    ceac:	|        \-> moveq #1,d0
    ceae:	|            cmp.l 36(sp),d0
    ceb2:	|     /----- blt.s cf0e <builtIn_loopSound+0x82>

		if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) return BR_ERROR;
    ceb4:	|     |      movea.l 40(sp),a0
    ceb8:	|     |      move.l 24(a0),d0
    cebc:	|     |      move.l d0,-(sp)
    cebe:	|     |      pea 5 <_start+0x5>
    cec2:	|     |      lea 16(sp),a0
    cec6:	|     |      move.l a0,-(sp)
    cec8:	|     |      jsr 10ec0 <getValueType>
    cece:	|     |      lea 12(sp),sp
    ced2:	|     |      tst.w d0
    ced4:	|     |  /-- bne.s cedc <builtIn_loopSound+0x50>
    ced6:	|     |  |   moveq #1,d0
    ced8:	+-----|--|-- bra.w d068 <builtIn_loopSound+0x1dc>
		trimStack(&fun->stack);
    cedc:	|     |  \-> moveq #24,d0
    cede:	|     |      add.l 40(sp),d0
    cee2:	|     |      move.l d0,-(sp)
    cee4:	|     |      jsr 11844 <trimStack>
    ceea:	|     |      addq.l #4,sp
		if (!startSound(fileNumber, TRUE)) return BR_CONTINUE;	// Was BR_ERROR
    ceec:	|     |      move.l 8(sp),d0
    cef0:	|     |      pea 1 <_start+0x1>
    cef4:	|     |      move.l d0,-(sp)
    cef6:	|     |      jsr 9984 <startSound>
    cefc:	|     |      addq.l #8,sp
    cefe:	|     |      tst.w d0
    cf00:	|     |  /-- bne.s cf08 <builtIn_loopSound+0x7c>
    cf02:	|     |  |   moveq #2,d0
    cf04:	+-----|--|-- bra.w d068 <builtIn_loopSound+0x1dc>
		return BR_CONTINUE;
    cf08:	|     |  \-> moveq #2,d0
    cf0a:	+-----|----- bra.w d068 <builtIn_loopSound+0x1dc>
	} else {
		// We have more than one sound to play!

		int doLoop = 2;
    cf0e:	|     \----> moveq #2,d1
    cf10:	|            move.l d1,4(sp)
		struct soundList *s = NULL;
    cf14:	|            clr.l 28(sp)
		struct soundList *old = NULL;
    cf18:	|            clr.l 24(sp)

		// Should we loop?
		if (fun->stack->thisVar.varType != SVT_FILE) {
    cf1c:	|            movea.l 40(sp),a0
    cf20:	|            movea.l 24(a0),a0
    cf24:	|            move.l (a0),d0
    cf26:	|            moveq #5,d1
    cf28:	|            cmp.l d0,d1
    cf2a:	|  /-------- beq.w d002 <builtIn_loopSound+0x176>
			getValueType(&doLoop, SVT_INT,&fun->stack->thisVar);
    cf2e:	|  |         movea.l 40(sp),a0
    cf32:	|  |         move.l 24(a0),d0
    cf36:	|  |         move.l d0,-(sp)
    cf38:	|  |         pea 1 <_start+0x1>
    cf3c:	|  |         lea 12(sp),a0
    cf40:	|  |         move.l a0,-(sp)
    cf42:	|  |         jsr 10ec0 <getValueType>
    cf48:	|  |         lea 12(sp),sp
			trimStack(&fun->stack);
    cf4c:	|  |         moveq #24,d0
    cf4e:	|  |         add.l 40(sp),d0
    cf52:	|  |         move.l d0,-(sp)
    cf54:	|  |         jsr 11844 <trimStack>
    cf5a:	|  |         addq.l #4,sp
			numParams--;
    cf5c:	|  |         subq.l #1,36(sp)
		}
		while (numParams) {
    cf60:	|  +-------- bra.w d002 <builtIn_loopSound+0x176>
			if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) {
    cf64:	|  |  /----> movea.l 40(sp),a0
    cf68:	|  |  |      move.l 24(a0),d0
    cf6c:	|  |  |      move.l d0,-(sp)
    cf6e:	|  |  |      pea 5 <_start+0x5>
    cf72:	|  |  |      lea 16(sp),a0
    cf76:	|  |  |      move.l a0,-(sp)
    cf78:	|  |  |      jsr 10ec0 <getValueType>
    cf7e:	|  |  |      lea 12(sp),sp
    cf82:	|  |  |      tst.w d0
    cf84:	|  |  |  /-- bne.s cf9a <builtIn_loopSound+0x10e>
				KPrintF("Illegal parameter given built-in function loopSound().");
    cf86:	|  |  |  |   pea 16b14 <graphics.c.1c13408a+0x2b2>
    cf8c:	|  |  |  |   jsr 12f14 <KPrintF>
    cf92:	|  |  |  |   addq.l #4,sp
				return BR_ERROR;
    cf94:	|  |  |  |   moveq #1,d0
    cf96:	+--|--|--|-- bra.w d068 <builtIn_loopSound+0x1dc>
			}
			s = AllocVec(sizeof(struct soundList), MEMF_ANY);
    cf9a:	|  |  |  \-> moveq #20,d0
    cf9c:	|  |  |      move.l d0,20(sp)
    cfa0:	|  |  |      clr.l 16(sp)
    cfa4:	|  |  |      move.l 19c5e <SysBase>,d0
    cfaa:	|  |  |      movea.l d0,a6
    cfac:	|  |  |      move.l 20(sp),d0
    cfb0:	|  |  |      move.l 16(sp),d1
    cfb4:	|  |  |      jsr -684(a6)
    cfb8:	|  |  |      move.l d0,12(sp)
    cfbc:	|  |  |      move.l 12(sp),d0
    cfc0:	|  |  |      move.l d0,28(sp)
			if (!s) return BR_ERROR;
    cfc4:	|  |  |  /-- bne.s cfcc <builtIn_loopSound+0x140>
    cfc6:	|  |  |  |   moveq #1,d0
    cfc8:	+--|--|--|-- bra.w d068 <builtIn_loopSound+0x1dc>

			s->next = old;
    cfcc:	|  |  |  \-> movea.l 28(sp),a0
    cfd0:	|  |  |      move.l 24(sp),4(a0)
			s->prev = NULL;
    cfd6:	|  |  |      movea.l 28(sp),a0
    cfda:	|  |  |      clr.l 8(a0)
			s->sound = fileNumber;
    cfde:	|  |  |      move.l 8(sp),d0
    cfe2:	|  |  |      movea.l 28(sp),a0
    cfe6:	|  |  |      move.l d0,(a0)
			old = s;
    cfe8:	|  |  |      move.l 28(sp),24(sp)

			trimStack(&fun->stack);
    cfee:	|  |  |      moveq #24,d0
    cff0:	|  |  |      add.l 40(sp),d0
    cff4:	|  |  |      move.l d0,-(sp)
    cff6:	|  |  |      jsr 11844 <trimStack>
    cffc:	|  |  |      addq.l #4,sp
			numParams--;
    cffe:	|  |  |      subq.l #1,36(sp)
		while (numParams) {
    d002:	|  \--|----> tst.l 36(sp)
    d006:	|     \----- bne.w cf64 <builtIn_loopSound+0xd8>
		}
		while (s->next) s = s->next;
    d00a:	|        /-- bra.s d016 <builtIn_loopSound+0x18a>
    d00c:	|     /--|-> movea.l 28(sp),a0
    d010:	|     |  |   move.l 4(a0),28(sp)
    d016:	|     |  \-> movea.l 28(sp),a0
    d01a:	|     |      move.l 4(a0),d0
    d01e:	|     \----- bne.s d00c <builtIn_loopSound+0x180>
		if (doLoop > 1) {
    d020:	|            move.l 4(sp),d0
    d024:	|            moveq #1,d1
    d026:	|            cmp.l d0,d1
    d028:	|     /----- bge.s d040 <builtIn_loopSound+0x1b4>
			s->next = old;
    d02a:	|     |      movea.l 28(sp),a0
    d02e:	|     |      move.l 24(sp),4(a0)
			old->prev = s;
    d034:	|     |      movea.l 24(sp),a0
    d038:	|     |      move.l 28(sp),8(a0)
    d03e:	|     |  /-- bra.s d050 <builtIn_loopSound+0x1c4>
		} else if (doLoop) {
    d040:	|     \--|-> move.l 4(sp),d0
    d044:	|        +-- beq.s d050 <builtIn_loopSound+0x1c4>
			s->next = s;
    d046:	|        |   movea.l 28(sp),a0
    d04a:	|        |   move.l 28(sp),4(a0)
		}
		old->vol = -1;
    d050:	|        \-> movea.l 24(sp),a0
    d054:	|            moveq #-1,d0
    d056:	|            move.l d0,16(a0)
		playSoundList(old);
    d05a:	|            move.l 24(sp),-(sp)
    d05e:	|            jsr 98fe <playSoundList>
    d064:	|            addq.l #4,sp
		return BR_CONTINUE;
    d066:	|            moveq #2,d0
	}
}
    d068:	\----------> movea.l (sp)+,a6
    d06a:	             lea 28(sp),sp
    d06e:	             rts

0000d070 <builtIn_stopSound>:

builtIn(stopSound)
{
    d070:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    d072:	       movea.l 12(sp),a0
    d076:	       move.l 24(a0),d0
    d07a:	       move.l d0,-(sp)
    d07c:	       pea 5 <_start+0x5>
    d080:	       move.l sp,d0
    d082:	       addq.l #8,d0
    d084:	       move.l d0,-(sp)
    d086:	       jsr 10ec0 <getValueType>
    d08c:	       lea 12(sp),sp
    d090:	       tst.w d0
    d092:	   /-- bne.s d098 <builtIn_stopSound+0x28>
    d094:	   |   moveq #1,d0
    d096:	/--|-- bra.s d0b6 <builtIn_stopSound+0x46>
	trimStack (&fun -> stack);
    d098:	|  \-> moveq #24,d0
    d09a:	|      add.l 12(sp),d0
    d09e:	|      move.l d0,-(sp)
    d0a0:	|      jsr 11844 <trimStack>
    d0a6:	|      addq.l #4,sp
	huntKillSound (v);
    d0a8:	|      move.l (sp),d0
    d0aa:	|      move.l d0,-(sp)
    d0ac:	|      jsr 98f6 <huntKillSound>
    d0b2:	|      addq.l #4,sp
	return BR_CONTINUE;
    d0b4:	|      moveq #2,d0
}
    d0b6:	\----> addq.l #4,sp
    d0b8:	       rts

0000d0ba <builtIn_setDefaultSoundVolume>:

builtIn(setDefaultSoundVolume)
{
    d0ba:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d0bc:	       movea.l 12(sp),a0
    d0c0:	       move.l 24(a0),d0
    d0c4:	       move.l d0,-(sp)
    d0c6:	       pea 1 <_start+0x1>
    d0ca:	       move.l sp,d0
    d0cc:	       addq.l #8,d0
    d0ce:	       move.l d0,-(sp)
    d0d0:	       jsr 10ec0 <getValueType>
    d0d6:	       lea 12(sp),sp
    d0da:	       tst.w d0
    d0dc:	   /-- bne.s d0e2 <builtIn_setDefaultSoundVolume+0x28>
    d0de:	   |   moveq #1,d0
    d0e0:	/--|-- bra.s d100 <builtIn_setDefaultSoundVolume+0x46>
	trimStack (&fun -> stack);
    d0e2:	|  \-> moveq #24,d0
    d0e4:	|      add.l 12(sp),d0
    d0e8:	|      move.l d0,-(sp)
    d0ea:	|      jsr 11844 <trimStack>
    d0f0:	|      addq.l #4,sp
	setDefaultSoundVolume (v);
    d0f2:	|      move.l (sp),d0
    d0f4:	|      move.l d0,-(sp)
    d0f6:	|      jsr 996c <setDefaultSoundVolume>
    d0fc:	|      addq.l #4,sp
	return BR_CONTINUE;
    d0fe:	|      moveq #2,d0
}
    d100:	\----> addq.l #4,sp
    d102:	       rts

0000d104 <builtIn_setSoundVolume>:

builtIn(setSoundVolume)
{
    d104:	       subq.l #8,sp
	UNUSEDALL
	int musChan, v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d106:	       movea.l 16(sp),a0
    d10a:	       move.l 24(a0),d0
    d10e:	       move.l d0,-(sp)
    d110:	       pea 1 <_start+0x1>
    d114:	       move.l sp,d0
    d116:	       addq.l #8,d0
    d118:	       move.l d0,-(sp)
    d11a:	       jsr 10ec0 <getValueType>
    d120:	       lea 12(sp),sp
    d124:	       tst.w d0
    d126:	   /-- bne.s d12c <builtIn_setSoundVolume+0x28>
    d128:	   |   moveq #1,d0
    d12a:	/--|-- bra.s d186 <builtIn_setSoundVolume+0x82>
	trimStack (&fun -> stack);
    d12c:	|  \-> moveq #24,d0
    d12e:	|      add.l 16(sp),d0
    d132:	|      move.l d0,-(sp)
    d134:	|      jsr 11844 <trimStack>
    d13a:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    d13c:	|      movea.l 16(sp),a0
    d140:	|      move.l 24(a0),d0
    d144:	|      move.l d0,-(sp)
    d146:	|      pea 5 <_start+0x5>
    d14a:	|      moveq #12,d0
    d14c:	|      add.l sp,d0
    d14e:	|      move.l d0,-(sp)
    d150:	|      jsr 10ec0 <getValueType>
    d156:	|      lea 12(sp),sp
    d15a:	|      tst.w d0
    d15c:	|  /-- bne.s d162 <builtIn_setSoundVolume+0x5e>
    d15e:	|  |   moveq #1,d0
    d160:	+--|-- bra.s d186 <builtIn_setSoundVolume+0x82>
	trimStack (&fun -> stack);
    d162:	|  \-> moveq #24,d0
    d164:	|      add.l 16(sp),d0
    d168:	|      move.l d0,-(sp)
    d16a:	|      jsr 11844 <trimStack>
    d170:	|      addq.l #4,sp
	setSoundVolume (musChan, v);
    d172:	|      move.l (sp),d1
    d174:	|      move.l 4(sp),d0
    d178:	|      move.l d1,-(sp)
    d17a:	|      move.l d0,-(sp)
    d17c:	|      jsr 9980 <setSoundVolume>
    d182:	|      addq.l #8,sp
	return BR_CONTINUE;
    d184:	|      moveq #2,d0
}
    d186:	\----> addq.l #8,sp
    d188:	       rts

0000d18a <builtIn_setSoundLoopPoints>:


builtIn(setSoundLoopPoints)
{
    d18a:	       lea -12(sp),sp
	UNUSEDALL
	int musChan, theEnd, theStart;
	if (! getValueType(&theEnd, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d18e:	       movea.l 20(sp),a0
    d192:	       move.l 24(a0),d0
    d196:	       move.l d0,-(sp)
    d198:	       pea 1 <_start+0x1>
    d19c:	       moveq #12,d0
    d19e:	       add.l sp,d0
    d1a0:	       move.l d0,-(sp)
    d1a2:	       jsr 10ec0 <getValueType>
    d1a8:	       lea 12(sp),sp
    d1ac:	       tst.w d0
    d1ae:	   /-- bne.s d1b6 <builtIn_setSoundLoopPoints+0x2c>
    d1b0:	   |   moveq #1,d0
    d1b2:	/--|-- bra.w d24e <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
    d1b6:	|  \-> moveq #24,d0
    d1b8:	|      add.l 20(sp),d0
    d1bc:	|      move.l d0,-(sp)
    d1be:	|      jsr 11844 <trimStack>
    d1c4:	|      addq.l #4,sp
	if (! getValueType(&theStart, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d1c6:	|      movea.l 20(sp),a0
    d1ca:	|      move.l 24(a0),d0
    d1ce:	|      move.l d0,-(sp)
    d1d0:	|      pea 1 <_start+0x1>
    d1d4:	|      lea 8(sp),a0
    d1d8:	|      move.l a0,-(sp)
    d1da:	|      jsr 10ec0 <getValueType>
    d1e0:	|      lea 12(sp),sp
    d1e4:	|      tst.w d0
    d1e6:	|  /-- bne.s d1ec <builtIn_setSoundLoopPoints+0x62>
    d1e8:	|  |   moveq #1,d0
    d1ea:	+--|-- bra.s d24e <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
    d1ec:	|  \-> moveq #24,d0
    d1ee:	|      add.l 20(sp),d0
    d1f2:	|      move.l d0,-(sp)
    d1f4:	|      jsr 11844 <trimStack>
    d1fa:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    d1fc:	|      movea.l 20(sp),a0
    d200:	|      move.l 24(a0),d0
    d204:	|      move.l d0,-(sp)
    d206:	|      pea 5 <_start+0x5>
    d20a:	|      moveq #16,d0
    d20c:	|      add.l sp,d0
    d20e:	|      move.l d0,-(sp)
    d210:	|      jsr 10ec0 <getValueType>
    d216:	|      lea 12(sp),sp
    d21a:	|      tst.w d0
    d21c:	|  /-- bne.s d222 <builtIn_setSoundLoopPoints+0x98>
    d21e:	|  |   moveq #1,d0
    d220:	+--|-- bra.s d24e <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
    d222:	|  \-> moveq #24,d0
    d224:	|      add.l 20(sp),d0
    d228:	|      move.l d0,-(sp)
    d22a:	|      jsr 11844 <trimStack>
    d230:	|      addq.l #4,sp
	setSoundLoop (musChan, theStart, theEnd);
    d232:	|      movea.l 4(sp),a0
    d236:	|      move.l (sp),d1
    d238:	|      move.l 8(sp),d0
    d23c:	|      move.l a0,-(sp)
    d23e:	|      move.l d1,-(sp)
    d240:	|      move.l d0,-(sp)
    d242:	|      jsr 9978 <setSoundLoop>
    d248:	|      lea 12(sp),sp
	return BR_CONTINUE;
    d24c:	|      moveq #2,d0
}
    d24e:	\----> lea 12(sp),sp
    d252:	       rts

0000d254 <builtIn_setFloor>:

#pragma mark -
#pragma mark Extra room bits

builtIn(setFloor)
{
    d254:	          subq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType == SVT_FILE) {
    d256:	          movea.l 12(sp),a0
    d25a:	          movea.l 24(a0),a0
    d25e:	          move.l (a0),d0
    d260:	          moveq #5,d1
    d262:	          cmp.l d0,d1
    d264:	/-------- bne.s d2a8 <builtIn_setFloor+0x54>
		int v;
		getValueType(&v, SVT_FILE,&fun -> stack -> thisVar);
    d266:	|         movea.l 12(sp),a0
    d26a:	|         move.l 24(a0),d0
    d26e:	|         move.l d0,-(sp)
    d270:	|         pea 5 <_start+0x5>
    d274:	|         move.l sp,d0
    d276:	|         addq.l #8,d0
    d278:	|         move.l d0,-(sp)
    d27a:	|         jsr 10ec0 <getValueType>
    d280:	|         lea 12(sp),sp
		trimStack (&fun -> stack);
    d284:	|         moveq #24,d0
    d286:	|         add.l 12(sp),d0
    d28a:	|         move.l d0,-(sp)
    d28c:	|         jsr 11844 <trimStack>
    d292:	|         addq.l #4,sp
		if (! setFloor (v)) return BR_ERROR;
    d294:	|         move.l (sp),d0
    d296:	|         move.l d0,-(sp)
    d298:	|         jsr 126b2 <setFloor>
    d29e:	|         addq.l #4,sp
    d2a0:	|         tst.w d0
    d2a2:	|  /----- bne.s d2be <builtIn_setFloor+0x6a>
    d2a4:	|  |      moveq #1,d0
    d2a6:	|  |  /-- bra.s d2c0 <builtIn_setFloor+0x6c>
	} else {
		trimStack (&fun -> stack);
    d2a8:	\--|--|-> moveq #24,d0
    d2aa:	   |  |   add.l 12(sp),d0
    d2ae:	   |  |   move.l d0,-(sp)
    d2b0:	   |  |   jsr 11844 <trimStack>
    d2b6:	   |  |   addq.l #4,sp
		setFloorNull ();
    d2b8:	   |  |   jsr 12e2c <setFloorNull>
	}
	return BR_CONTINUE;
    d2be:	   \--|-> moveq #2,d0
}
    d2c0:	      \-> addq.l #4,sp
    d2c2:	          rts

0000d2c4 <builtIn_showFloor>:

builtIn(showFloor)
{
	UNUSEDALL
	drawFloor ();
    d2c4:	jsr 11f4a <drawFloor>
	return BR_CONTINUE;
    d2ca:	moveq #2,d0
}
    d2cc:	rts

0000d2ce <builtIn_setZBuffer>:

builtIn(setZBuffer)
{
    d2ce:	          subq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType == SVT_FILE) {
    d2d0:	          movea.l 12(sp),a0
    d2d4:	          movea.l 24(a0),a0
    d2d8:	          move.l (a0),d0
    d2da:	          moveq #5,d1
    d2dc:	          cmp.l d0,d1
    d2de:	/-------- bne.s d322 <builtIn_setZBuffer+0x54>
		int v;
		getValueType(&v, SVT_FILE,&fun -> stack -> thisVar);
    d2e0:	|         movea.l 12(sp),a0
    d2e4:	|         move.l 24(a0),d0
    d2e8:	|         move.l d0,-(sp)
    d2ea:	|         pea 5 <_start+0x5>
    d2ee:	|         move.l sp,d0
    d2f0:	|         addq.l #8,d0
    d2f2:	|         move.l d0,-(sp)
    d2f4:	|         jsr 10ec0 <getValueType>
    d2fa:	|         lea 12(sp),sp
		trimStack (&fun -> stack);
    d2fe:	|         moveq #24,d0
    d300:	|         add.l 12(sp),d0
    d304:	|         move.l d0,-(sp)
    d306:	|         jsr 11844 <trimStack>
    d30c:	|         addq.l #4,sp
		if (! setZBuffer (v)) return BR_ERROR;
    d30e:	|         move.l (sp),d0
    d310:	|         move.l d0,-(sp)
    d312:	|         jsr 2044 <setZBuffer>
    d318:	|         addq.l #4,sp
    d31a:	|         tst.w d0
    d31c:	|  /----- bne.s d338 <builtIn_setZBuffer+0x6a>
    d31e:	|  |      moveq #1,d0
    d320:	|  |  /-- bra.s d33a <builtIn_setZBuffer+0x6c>
	} else {
		trimStack (&fun -> stack);
    d322:	\--|--|-> moveq #24,d0
    d324:	   |  |   add.l 12(sp),d0
    d328:	   |  |   move.l d0,-(sp)
    d32a:	   |  |   jsr 11844 <trimStack>
    d330:	   |  |   addq.l #4,sp
		killZBuffer ();
    d332:	   |  |   jsr 1fee <killZBuffer>
	}
	return BR_CONTINUE;
    d338:	   \--|-> moveq #2,d0
}
    d33a:	      \-> addq.l #4,sp
    d33c:	          rts

0000d33e <builtIn_setLightMap>:

		default:
			fatal ("Function should have either 2 or 3 parameters");
			return BR_ERROR;
	}*/
	KPrintF("Not implemented on Amiga");
    d33e:	pea 16b4b <graphics.c.1c13408a+0x2e9>
    d344:	jsr 12f14 <KPrintF>
    d34a:	addq.l #4,sp
	return BR_CONTINUE;
    d34c:	moveq #2,d0
}
    d34e:	rts

0000d350 <builtIn_setSpeechMode>:
#pragma mark Objects

builtIn(setSpeechMode)
{
	UNUSEDALL
	if (! getValueType(&speechMode, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d350:	          movea.l 8(sp),a0
    d354:	          move.l 24(a0),d0
    d358:	          move.l d0,-(sp)
    d35a:	          pea 1 <_start+0x1>
    d35e:	          pea 19d2c <speechMode>
    d364:	          jsr 10ec0 <getValueType>
    d36a:	          lea 12(sp),sp
    d36e:	          tst.w d0
    d370:	      /-- bne.s d376 <builtIn_setSpeechMode+0x26>
    d372:	      |   moveq #1,d0
    d374:	/-----|-- bra.s d3ae <builtIn_setSpeechMode+0x5e>
	trimStack (&fun -> stack);
    d376:	|     \-> moveq #24,d0
    d378:	|         add.l 8(sp),d0
    d37c:	|         move.l d0,-(sp)
    d37e:	|         jsr 11844 <trimStack>
    d384:	|         addq.l #4,sp
	if (speechMode < 0 || speechMode > 2) {
    d386:	|         move.l 19d2c <speechMode>,d0
    d38c:	|     /-- bmi.s d39a <builtIn_setSpeechMode+0x4a>
    d38e:	|     |   move.l 19d2c <speechMode>,d0
    d394:	|     |   moveq #2,d1
    d396:	|     |   cmp.l d0,d1
    d398:	|  /--|-- bge.s d3ac <builtIn_setSpeechMode+0x5c>
		KPrintF ("Valid parameters are be SPEECHANDTEXT, SPEECHONLY or TEXTONLY");
    d39a:	|  |  \-> pea 16b64 <graphics.c.1c13408a+0x302>
    d3a0:	|  |      jsr 12f14 <KPrintF>
    d3a6:	|  |      addq.l #4,sp
		return BR_ERROR;
    d3a8:	|  |      moveq #1,d0
    d3aa:	+--|----- bra.s d3ae <builtIn_setSpeechMode+0x5e>
	}
	return BR_CONTINUE;
    d3ac:	|  \----> moveq #2,d0
}
    d3ae:	\-------> rts

0000d3b0 <builtIn_somethingSpeaking>:

builtIn(somethingSpeaking)
{
    d3b0:	       subq.l #4,sp
	UNUSEDALL
	int i = isThereAnySpeechGoingOn ();
    d3b2:	       jsr 5a56 <isThereAnySpeechGoingOn>
    d3b8:	       move.l d0,(sp)
	if (i == -1) {
    d3ba:	       moveq #-1,d0
    d3bc:	       cmp.l (sp),d0
    d3be:	/----- bne.s d3da <builtIn_somethingSpeaking+0x2a>
		setVariable (&fun -> reg, SVT_INT, 0);
    d3c0:	|      moveq #28,d0
    d3c2:	|      add.l 12(sp),d0
    d3c6:	|      clr.l -(sp)
    d3c8:	|      pea 1 <_start+0x1>
    d3cc:	|      move.l d0,-(sp)
    d3ce:	|      jsr 117b2 <setVariable>
    d3d4:	|      lea 12(sp),sp
    d3d8:	|  /-- bra.s d3f2 <builtIn_somethingSpeaking+0x42>
	} else {
		setVariable (&fun -> reg, SVT_OBJTYPE, i);
    d3da:	\--|-> moveq #28,d0
    d3dc:	   |   add.l 12(sp),d0
    d3e0:	   |   move.l (sp),-(sp)
    d3e2:	   |   pea 7 <_start+0x7>
    d3e6:	   |   move.l d0,-(sp)
    d3e8:	   |   jsr 117b2 <setVariable>
    d3ee:	   |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    d3f2:	   \-> moveq #2,d0
}
    d3f4:	       addq.l #4,sp
    d3f6:	       rts

0000d3f8 <builtIn_skipSpeech>:

builtIn(skipSpeech)
{
	UNUSEDALL
	killSpeechTimers ();
    d3f8:	jsr 3db2 <killSpeechTimers>
	return BR_CONTINUE;
    d3fe:	moveq #2,d0
}
    d400:	rts

0000d402 <builtIn_getOverObject>:

builtIn(getOverObject)
{
	UNUSEDALL
	if (overRegion)
    d402:	       move.l 19d66 <overRegion>,d0
    d408:	/----- beq.s d432 <builtIn_getOverObject+0x30>
		// Return value
		setVariable (&fun -> reg, SVT_OBJTYPE, overRegion -> thisType -> objectNum);
    d40a:	|      movea.l 19d66 <overRegion>,a0
    d410:	|      movea.l 28(a0),a0
    d414:	|      move.l 4(a0),d1
    d418:	|      moveq #28,d0
    d41a:	|      add.l 8(sp),d0
    d41e:	|      move.l d1,-(sp)
    d420:	|      pea 7 <_start+0x7>
    d424:	|      move.l d0,-(sp)
    d426:	|      jsr 117b2 <setVariable>
    d42c:	|      lea 12(sp),sp
    d430:	|  /-- bra.s d44a <builtIn_getOverObject+0x48>
	else
		// Return value
		setVariable (&fun -> reg, SVT_INT, 0);
    d432:	\--|-> moveq #28,d0
    d434:	   |   add.l 8(sp),d0
    d438:	   |   clr.l -(sp)
    d43a:	   |   pea 1 <_start+0x1>
    d43e:	   |   move.l d0,-(sp)
    d440:	   |   jsr 117b2 <setVariable>
    d446:	   |   lea 12(sp),sp
	return BR_CONTINUE;
    d44a:	   \-> moveq #2,d0
}
    d44c:	       rts

0000d44e <builtIn_rename>:

builtIn(rename)
{
    d44e:	       lea -16(sp),sp
    d452:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar(&(fun->stack->thisVar));
    d454:	       movea.l 28(sp),a0
    d458:	       move.l 24(a0),d0
    d45c:	       move.l d0,-(sp)
    d45e:	       jsr 11496 <getTextFromAnyVar>
    d464:	       addq.l #4,sp
    d466:	       move.l d0,16(sp)
	int objT;
	if (!newText) return BR_ERROR;
    d46a:	   /-- bne.s d470 <builtIn_rename+0x22>
    d46c:	   |   moveq #1,d0
    d46e:	/--|-- bra.s d4ea <builtIn_rename+0x9c>
	trimStack(&fun->stack);
    d470:	|  \-> moveq #24,d0
    d472:	|      add.l 28(sp),d0
    d476:	|      move.l d0,-(sp)
    d478:	|      jsr 11844 <trimStack>
    d47e:	|      addq.l #4,sp
	if (!getValueType(&objT, SVT_OBJTYPE, &fun->stack->thisVar)) return BR_ERROR;
    d480:	|      movea.l 28(sp),a0
    d484:	|      move.l 24(a0),d0
    d488:	|      move.l d0,-(sp)
    d48a:	|      pea 7 <_start+0x7>
    d48e:	|      lea 12(sp),a0
    d492:	|      move.l a0,-(sp)
    d494:	|      jsr 10ec0 <getValueType>
    d49a:	|      lea 12(sp),sp
    d49e:	|      tst.w d0
    d4a0:	|  /-- bne.s d4a6 <builtIn_rename+0x58>
    d4a2:	|  |   moveq #1,d0
    d4a4:	+--|-- bra.s d4ea <builtIn_rename+0x9c>
	trimStack(&fun->stack);
    d4a6:	|  \-> moveq #24,d0
    d4a8:	|      add.l 28(sp),d0
    d4ac:	|      move.l d0,-(sp)
    d4ae:	|      jsr 11844 <trimStack>
    d4b4:	|      addq.l #4,sp
	struct objectType * o = findObjectType(objT);
    d4b6:	|      move.l 4(sp),d0
    d4ba:	|      move.l d0,-(sp)
    d4bc:	|      jsr 9d12 <findObjectType>
    d4c2:	|      addq.l #4,sp
    d4c4:	|      move.l d0,12(sp)
	FreeVec(o->screenName);
    d4c8:	|      movea.l 12(sp),a0
    d4cc:	|      move.l (a0),8(sp)
    d4d0:	|      move.l 19c5e <SysBase>,d0
    d4d6:	|      movea.l d0,a6
    d4d8:	|      movea.l 8(sp),a1
    d4dc:	|      jsr -690(a6)
	o->screenName = newText;
    d4e0:	|      movea.l 12(sp),a0
    d4e4:	|      move.l 16(sp),(a0)
	return BR_CONTINUE;
    d4e8:	|      moveq #2,d0
}
    d4ea:	\----> movea.l (sp)+,a6
    d4ec:	       lea 16(sp),sp
    d4f0:	       rts

0000d4f2 <builtIn_getObjectX>:

builtIn (getObjectX)
{
    d4f2:	          lea -12(sp),sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    d4f6:	          movea.l 20(sp),a0
    d4fa:	          move.l 24(a0),d0
    d4fe:	          move.l d0,-(sp)
    d500:	          pea 7 <_start+0x7>
    d504:	          lea 8(sp),a0
    d508:	          move.l a0,-(sp)
    d50a:	          jsr 10ec0 <getValueType>
    d510:	          lea 12(sp),sp
    d514:	          tst.w d0
    d516:	      /-- bne.s d51e <builtIn_getObjectX+0x2c>
    d518:	      |   moveq #1,d0
    d51a:	/-----|-- bra.w d5ba <builtIn_getObjectX+0xc8>
	trimStack (&fun -> stack);
    d51e:	|     \-> moveq #24,d0
    d520:	|         add.l 20(sp),d0
    d524:	|         move.l d0,-(sp)
    d526:	|         jsr 11844 <trimStack>
    d52c:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
    d52e:	|         move.l (sp),d0
    d530:	|         move.l d0,-(sp)
    d532:	|         jsr 7052 <findPerson>
    d538:	|         addq.l #4,sp
    d53a:	|         move.l d0,8(sp)
	if (pers) {
    d53e:	|     /-- beq.s d56c <builtIn_getObjectX+0x7a>
		setVariable (&fun -> reg, SVT_INT, pers -> x);
    d540:	|     |   movea.l 8(sp),a0
    d544:	|     |   move.l (a0),d0
    d546:	|     |   move.l d0,-(sp)
    d548:	|     |   jsr 13448 <__fixsfsi>
    d54e:	|     |   addq.l #4,sp
    d550:	|     |   move.l d0,d1
    d552:	|     |   moveq #28,d0
    d554:	|     |   add.l 20(sp),d0
    d558:	|     |   move.l d1,-(sp)
    d55a:	|     |   pea 1 <_start+0x1>
    d55e:	|     |   move.l d0,-(sp)
    d560:	|     |   jsr 117b2 <setVariable>
    d566:	|     |   lea 12(sp),sp
    d56a:	|  /--|-- bra.s d5b8 <builtIn_getObjectX+0xc6>
	} else {
		struct screenRegion * la = getRegionForObject (objectNumber);
    d56c:	|  |  \-> move.l (sp),d0
    d56e:	|  |      move.l d0,-(sp)
    d570:	|  |      jsr 1198a <getRegionForObject>
    d576:	|  |      addq.l #4,sp
    d578:	|  |      move.l d0,4(sp)
		if (la) {
    d57c:	|  |  /-- beq.s d5a0 <builtIn_getObjectX+0xae>
			setVariable (&fun -> reg, SVT_INT, la -> sX);
    d57e:	|  |  |   movea.l 4(sp),a0
    d582:	|  |  |   move.l 16(a0),d1
    d586:	|  |  |   moveq #28,d0
    d588:	|  |  |   add.l 20(sp),d0
    d58c:	|  |  |   move.l d1,-(sp)
    d58e:	|  |  |   pea 1 <_start+0x1>
    d592:	|  |  |   move.l d0,-(sp)
    d594:	|  |  |   jsr 117b2 <setVariable>
    d59a:	|  |  |   lea 12(sp),sp
    d59e:	|  +--|-- bra.s d5b8 <builtIn_getObjectX+0xc6>
		} else {
			setVariable (&fun -> reg, SVT_INT, 0);
    d5a0:	|  |  \-> moveq #28,d0
    d5a2:	|  |      add.l 20(sp),d0
    d5a6:	|  |      clr.l -(sp)
    d5a8:	|  |      pea 1 <_start+0x1>
    d5ac:	|  |      move.l d0,-(sp)
    d5ae:	|  |      jsr 117b2 <setVariable>
    d5b4:	|  |      lea 12(sp),sp
		}
	}
	return BR_CONTINUE;
    d5b8:	|  \----> moveq #2,d0
}
    d5ba:	\-------> lea 12(sp),sp
    d5be:	          rts

0000d5c0 <builtIn_getObjectY>:

builtIn (getObjectY)
{
    d5c0:	          lea -12(sp),sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    d5c4:	          movea.l 20(sp),a0
    d5c8:	          move.l 24(a0),d0
    d5cc:	          move.l d0,-(sp)
    d5ce:	          pea 7 <_start+0x7>
    d5d2:	          lea 8(sp),a0
    d5d6:	          move.l a0,-(sp)
    d5d8:	          jsr 10ec0 <getValueType>
    d5de:	          lea 12(sp),sp
    d5e2:	          tst.w d0
    d5e4:	      /-- bne.s d5ec <builtIn_getObjectY+0x2c>
    d5e6:	      |   moveq #1,d0
    d5e8:	/-----|-- bra.w d68a <builtIn_getObjectY+0xca>
	trimStack (&fun -> stack);
    d5ec:	|     \-> moveq #24,d0
    d5ee:	|         add.l 20(sp),d0
    d5f2:	|         move.l d0,-(sp)
    d5f4:	|         jsr 11844 <trimStack>
    d5fa:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
    d5fc:	|         move.l (sp),d0
    d5fe:	|         move.l d0,-(sp)
    d600:	|         jsr 7052 <findPerson>
    d606:	|         addq.l #4,sp
    d608:	|         move.l d0,8(sp)
	if (pers) {
    d60c:	|     /-- beq.s d63c <builtIn_getObjectY+0x7c>
		setVariable (&fun -> reg, SVT_INT, pers -> y);
    d60e:	|     |   movea.l 8(sp),a0
    d612:	|     |   move.l 4(a0),d0
    d616:	|     |   move.l d0,-(sp)
    d618:	|     |   jsr 13448 <__fixsfsi>
    d61e:	|     |   addq.l #4,sp
    d620:	|     |   move.l d0,d1
    d622:	|     |   moveq #28,d0
    d624:	|     |   add.l 20(sp),d0
    d628:	|     |   move.l d1,-(sp)
    d62a:	|     |   pea 1 <_start+0x1>
    d62e:	|     |   move.l d0,-(sp)
    d630:	|     |   jsr 117b2 <setVariable>
    d636:	|     |   lea 12(sp),sp
    d63a:	|  /--|-- bra.s d688 <builtIn_getObjectY+0xc8>
	} else {
		struct screenRegion * la = getRegionForObject (objectNumber);
    d63c:	|  |  \-> move.l (sp),d0
    d63e:	|  |      move.l d0,-(sp)
    d640:	|  |      jsr 1198a <getRegionForObject>
    d646:	|  |      addq.l #4,sp
    d648:	|  |      move.l d0,4(sp)
		if (la) {
    d64c:	|  |  /-- beq.s d670 <builtIn_getObjectY+0xb0>
			setVariable (&fun -> reg, SVT_INT, la -> sY);
    d64e:	|  |  |   movea.l 4(sp),a0
    d652:	|  |  |   move.l 20(a0),d1
    d656:	|  |  |   moveq #28,d0
    d658:	|  |  |   add.l 20(sp),d0
    d65c:	|  |  |   move.l d1,-(sp)
    d65e:	|  |  |   pea 1 <_start+0x1>
    d662:	|  |  |   move.l d0,-(sp)
    d664:	|  |  |   jsr 117b2 <setVariable>
    d66a:	|  |  |   lea 12(sp),sp
    d66e:	|  +--|-- bra.s d688 <builtIn_getObjectY+0xc8>
		} else {
			setVariable (&fun -> reg, SVT_INT, 0);
    d670:	|  |  \-> moveq #28,d0
    d672:	|  |      add.l 20(sp),d0
    d676:	|  |      clr.l -(sp)
    d678:	|  |      pea 1 <_start+0x1>
    d67c:	|  |      move.l d0,-(sp)
    d67e:	|  |      jsr 117b2 <setVariable>
    d684:	|  |      lea 12(sp),sp
		}
	}
	return BR_CONTINUE;
    d688:	|  \----> moveq #2,d0
}
    d68a:	\-------> lea 12(sp),sp
    d68e:	          rts

0000d690 <builtIn_addScreenRegion>:


builtIn(addScreenRegion)
{
    d690:	       lea -32(sp),sp
    d694:	       movem.l d2-d5,-(sp)
	UNUSEDALL
	int sX, sY, x1, y1, x2, y2, di, objectNumber;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d698:	       movea.l 56(sp),a0
    d69c:	       move.l 24(a0),d0
    d6a0:	       move.l d0,-(sp)
    d6a2:	       pea 1 <_start+0x1>
    d6a6:	       lea 28(sp),a0
    d6aa:	       move.l a0,-(sp)
    d6ac:	       jsr 10ec0 <getValueType>
    d6b2:	       lea 12(sp),sp
    d6b6:	       tst.w d0
    d6b8:	   /-- bne.s d6c0 <builtIn_addScreenRegion+0x30>
    d6ba:	   |   moveq #1,d0
    d6bc:	/--|-- bra.w d89a <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    d6c0:	|  \-> moveq #24,d0
    d6c2:	|      add.l 56(sp),d0
    d6c6:	|      move.l d0,-(sp)
    d6c8:	|      jsr 11844 <trimStack>
    d6ce:	|      addq.l #4,sp
	if (! getValueType(&sY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d6d0:	|      movea.l 56(sp),a0
    d6d4:	|      move.l 24(a0),d0
    d6d8:	|      move.l d0,-(sp)
    d6da:	|      pea 1 <_start+0x1>
    d6de:	|      moveq #48,d0
    d6e0:	|      add.l sp,d0
    d6e2:	|      move.l d0,-(sp)
    d6e4:	|      jsr 10ec0 <getValueType>
    d6ea:	|      lea 12(sp),sp
    d6ee:	|      tst.w d0
    d6f0:	|  /-- bne.s d6f8 <builtIn_addScreenRegion+0x68>
    d6f2:	|  |   moveq #1,d0
    d6f4:	+--|-- bra.w d89a <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    d6f8:	|  \-> moveq #24,d0
    d6fa:	|      add.l 56(sp),d0
    d6fe:	|      move.l d0,-(sp)
    d700:	|      jsr 11844 <trimStack>
    d706:	|      addq.l #4,sp
	if (! getValueType(&sX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d708:	|      movea.l 56(sp),a0
    d70c:	|      move.l 24(a0),d0
    d710:	|      move.l d0,-(sp)
    d712:	|      pea 1 <_start+0x1>
    d716:	|      moveq #52,d0
    d718:	|      add.l sp,d0
    d71a:	|      move.l d0,-(sp)
    d71c:	|      jsr 10ec0 <getValueType>
    d722:	|      lea 12(sp),sp
    d726:	|      tst.w d0
    d728:	|  /-- bne.s d730 <builtIn_addScreenRegion+0xa0>
    d72a:	|  |   moveq #1,d0
    d72c:	+--|-- bra.w d89a <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    d730:	|  \-> moveq #24,d0
    d732:	|      add.l 56(sp),d0
    d736:	|      move.l d0,-(sp)
    d738:	|      jsr 11844 <trimStack>
    d73e:	|      addq.l #4,sp
	if (! getValueType(&y2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d740:	|      movea.l 56(sp),a0
    d744:	|      move.l 24(a0),d0
    d748:	|      move.l d0,-(sp)
    d74a:	|      pea 1 <_start+0x1>
    d74e:	|      lea 32(sp),a0
    d752:	|      move.l a0,-(sp)
    d754:	|      jsr 10ec0 <getValueType>
    d75a:	|      lea 12(sp),sp
    d75e:	|      tst.w d0
    d760:	|  /-- bne.s d768 <builtIn_addScreenRegion+0xd8>
    d762:	|  |   moveq #1,d0
    d764:	+--|-- bra.w d89a <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    d768:	|  \-> moveq #24,d0
    d76a:	|      add.l 56(sp),d0
    d76e:	|      move.l d0,-(sp)
    d770:	|      jsr 11844 <trimStack>
    d776:	|      addq.l #4,sp
	if (! getValueType(&x2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d778:	|      movea.l 56(sp),a0
    d77c:	|      move.l 24(a0),d0
    d780:	|      move.l d0,-(sp)
    d782:	|      pea 1 <_start+0x1>
    d786:	|      lea 36(sp),a0
    d78a:	|      move.l a0,-(sp)
    d78c:	|      jsr 10ec0 <getValueType>
    d792:	|      lea 12(sp),sp
    d796:	|      tst.w d0
    d798:	|  /-- bne.s d7a0 <builtIn_addScreenRegion+0x110>
    d79a:	|  |   moveq #1,d0
    d79c:	+--|-- bra.w d89a <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    d7a0:	|  \-> moveq #24,d0
    d7a2:	|      add.l 56(sp),d0
    d7a6:	|      move.l d0,-(sp)
    d7a8:	|      jsr 11844 <trimStack>
    d7ae:	|      addq.l #4,sp
	if (! getValueType(&y1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d7b0:	|      movea.l 56(sp),a0
    d7b4:	|      move.l 24(a0),d0
    d7b8:	|      move.l d0,-(sp)
    d7ba:	|      pea 1 <_start+0x1>
    d7be:	|      lea 40(sp),a0
    d7c2:	|      move.l a0,-(sp)
    d7c4:	|      jsr 10ec0 <getValueType>
    d7ca:	|      lea 12(sp),sp
    d7ce:	|      tst.w d0
    d7d0:	|  /-- bne.s d7d8 <builtIn_addScreenRegion+0x148>
    d7d2:	|  |   moveq #1,d0
    d7d4:	+--|-- bra.w d89a <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    d7d8:	|  \-> moveq #24,d0
    d7da:	|      add.l 56(sp),d0
    d7de:	|      move.l d0,-(sp)
    d7e0:	|      jsr 11844 <trimStack>
    d7e6:	|      addq.l #4,sp
	if (! getValueType(&x1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d7e8:	|      movea.l 56(sp),a0
    d7ec:	|      move.l 24(a0),d0
    d7f0:	|      move.l d0,-(sp)
    d7f2:	|      pea 1 <_start+0x1>
    d7f6:	|      lea 44(sp),a0
    d7fa:	|      move.l a0,-(sp)
    d7fc:	|      jsr 10ec0 <getValueType>
    d802:	|      lea 12(sp),sp
    d806:	|      tst.w d0
    d808:	|  /-- bne.s d810 <builtIn_addScreenRegion+0x180>
    d80a:	|  |   moveq #1,d0
    d80c:	+--|-- bra.w d89a <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    d810:	|  \-> moveq #24,d0
    d812:	|      add.l 56(sp),d0
    d816:	|      move.l d0,-(sp)
    d818:	|      jsr 11844 <trimStack>
    d81e:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    d820:	|      movea.l 56(sp),a0
    d824:	|      move.l 24(a0),d0
    d828:	|      move.l d0,-(sp)
    d82a:	|      pea 7 <_start+0x7>
    d82e:	|      lea 24(sp),a0
    d832:	|      move.l a0,-(sp)
    d834:	|      jsr 10ec0 <getValueType>
    d83a:	|      lea 12(sp),sp
    d83e:	|      tst.w d0
    d840:	|  /-- bne.s d846 <builtIn_addScreenRegion+0x1b6>
    d842:	|  |   moveq #1,d0
    d844:	+--|-- bra.s d89a <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    d846:	|  \-> moveq #24,d0
    d848:	|      add.l 56(sp),d0
    d84c:	|      move.l d0,-(sp)
    d84e:	|      jsr 11844 <trimStack>
    d854:	|      addq.l #4,sp
	if (addScreenRegion (x1, y1, x2, y2, sX, sY, di, objectNumber)) return BR_CONTINUE;
    d856:	|      move.l 16(sp),d5
    d85a:	|      move.l 20(sp),d4
    d85e:	|      move.l 40(sp),d3
    d862:	|      move.l 44(sp),d2
    d866:	|      movea.l 24(sp),a1
    d86a:	|      movea.l 28(sp),a0
    d86e:	|      move.l 32(sp),d1
    d872:	|      move.l 36(sp),d0
    d876:	|      move.l d5,-(sp)
    d878:	|      move.l d4,-(sp)
    d87a:	|      move.l d3,-(sp)
    d87c:	|      move.l d2,-(sp)
    d87e:	|      move.l a1,-(sp)
    d880:	|      move.l a0,-(sp)
    d882:	|      move.l d1,-(sp)
    d884:	|      move.l d0,-(sp)
    d886:	|      jsr 118ca <addScreenRegion>
    d88c:	|      lea 32(sp),sp
    d890:	|      tst.w d0
    d892:	|  /-- beq.s d898 <builtIn_addScreenRegion+0x208>
    d894:	|  |   moveq #2,d0
    d896:	+--|-- bra.s d89a <builtIn_addScreenRegion+0x20a>
	return BR_ERROR;
    d898:	|  \-> moveq #1,d0

}
    d89a:	\----> movem.l (sp)+,d2-d5
    d89e:	       lea 32(sp),sp
    d8a2:	       rts

0000d8a4 <builtIn_removeScreenRegion>:

builtIn(removeScreenRegion)
{
    d8a4:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    d8a6:	       movea.l 12(sp),a0
    d8aa:	       move.l 24(a0),d0
    d8ae:	       move.l d0,-(sp)
    d8b0:	       pea 7 <_start+0x7>
    d8b4:	       move.l sp,d0
    d8b6:	       addq.l #8,d0
    d8b8:	       move.l d0,-(sp)
    d8ba:	       jsr 10ec0 <getValueType>
    d8c0:	       lea 12(sp),sp
    d8c4:	       tst.w d0
    d8c6:	   /-- bne.s d8cc <builtIn_removeScreenRegion+0x28>
    d8c8:	   |   moveq #1,d0
    d8ca:	/--|-- bra.s d8ea <builtIn_removeScreenRegion+0x46>
	trimStack (&fun -> stack);
    d8cc:	|  \-> moveq #24,d0
    d8ce:	|      add.l 12(sp),d0
    d8d2:	|      move.l d0,-(sp)
    d8d4:	|      jsr 11844 <trimStack>
    d8da:	|      addq.l #4,sp
	removeScreenRegion (objectNumber);
    d8dc:	|      move.l (sp),d0
    d8de:	|      move.l d0,-(sp)
    d8e0:	|      jsr 11b32 <removeScreenRegion>
    d8e6:	|      addq.l #4,sp
	return BR_CONTINUE;
    d8e8:	|      moveq #2,d0
}
    d8ea:	\----> addq.l #4,sp
    d8ec:	       rts

0000d8ee <builtIn_showBoxes>:

builtIn(showBoxes)
{
	UNUSEDALL
	showBoxes ();
    d8ee:	jsr 11cb6 <showBoxes>
	return BR_CONTINUE;
    d8f4:	moveq #2,d0
}
    d8f6:	rts

0000d8f8 <builtIn_removeAllScreenRegions>:

builtIn(removeAllScreenRegions)
{
	UNUSEDALL
	killAllRegions ();
    d8f8:	jsr 119b8 <killAllRegions>
	return BR_CONTINUE;
    d8fe:	moveq #2,d0
}
    d900:	rts

0000d902 <builtIn_addCharacter>:

builtIn(addCharacter)
{
    d902:	       lea -16(sp),sp
	UNUSEDALL
	struct persona * p;
	int x, y, objectNumber;

	p = getCostumeFromVar (&(fun -> stack -> thisVar));
    d906:	       movea.l 24(sp),a0
    d90a:	       move.l 24(a0),d0
    d90e:	       move.l d0,-(sp)
    d910:	       jsr 10b6c <getCostumeFromVar>
    d916:	       addq.l #4,sp
    d918:	       move.l d0,12(sp)
	if (p == NULL) return BR_ERROR;
    d91c:	   /-- bne.s d924 <builtIn_addCharacter+0x22>
    d91e:	   |   moveq #1,d0
    d920:	/--|-- bra.w da00 <builtIn_addCharacter+0xfe>

	trimStack (&fun -> stack);
    d924:	|  \-> moveq #24,d0
    d926:	|      add.l 24(sp),d0
    d92a:	|      move.l d0,-(sp)
    d92c:	|      jsr 11844 <trimStack>
    d932:	|      addq.l #4,sp
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d934:	|      movea.l 24(sp),a0
    d938:	|      move.l 24(a0),d0
    d93c:	|      move.l d0,-(sp)
    d93e:	|      pea 1 <_start+0x1>
    d942:	|      lea 12(sp),a0
    d946:	|      move.l a0,-(sp)
    d948:	|      jsr 10ec0 <getValueType>
    d94e:	|      lea 12(sp),sp
    d952:	|      tst.w d0
    d954:	|  /-- bne.s d95c <builtIn_addCharacter+0x5a>
    d956:	|  |   moveq #1,d0
    d958:	+--|-- bra.w da00 <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
    d95c:	|  \-> moveq #24,d0
    d95e:	|      add.l 24(sp),d0
    d962:	|      move.l d0,-(sp)
    d964:	|      jsr 11844 <trimStack>
    d96a:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d96c:	|      movea.l 24(sp),a0
    d970:	|      move.l 24(a0),d0
    d974:	|      move.l d0,-(sp)
    d976:	|      pea 1 <_start+0x1>
    d97a:	|      moveq #16,d0
    d97c:	|      add.l sp,d0
    d97e:	|      move.l d0,-(sp)
    d980:	|      jsr 10ec0 <getValueType>
    d986:	|      lea 12(sp),sp
    d98a:	|      tst.w d0
    d98c:	|  /-- bne.s d992 <builtIn_addCharacter+0x90>
    d98e:	|  |   moveq #1,d0
    d990:	+--|-- bra.s da00 <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
    d992:	|  \-> moveq #24,d0
    d994:	|      add.l 24(sp),d0
    d998:	|      move.l d0,-(sp)
    d99a:	|      jsr 11844 <trimStack>
    d9a0:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    d9a2:	|      movea.l 24(sp),a0
    d9a6:	|      move.l 24(a0),d0
    d9aa:	|      move.l d0,-(sp)
    d9ac:	|      pea 7 <_start+0x7>
    d9b0:	|      lea 8(sp),a0
    d9b4:	|      move.l a0,-(sp)
    d9b6:	|      jsr 10ec0 <getValueType>
    d9bc:	|      lea 12(sp),sp
    d9c0:	|      tst.w d0
    d9c2:	|  /-- bne.s d9c8 <builtIn_addCharacter+0xc6>
    d9c4:	|  |   moveq #1,d0
    d9c6:	+--|-- bra.s da00 <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
    d9c8:	|  \-> moveq #24,d0
    d9ca:	|      add.l 24(sp),d0
    d9ce:	|      move.l d0,-(sp)
    d9d0:	|      jsr 11844 <trimStack>
    d9d6:	|      addq.l #4,sp
	if (addPerson (x, y, objectNumber, p)) return BR_CONTINUE;
    d9d8:	|      movea.l (sp),a0
    d9da:	|      move.l 4(sp),d1
    d9de:	|      move.l 8(sp),d0
    d9e2:	|      move.l 12(sp),-(sp)
    d9e6:	|      move.l a0,-(sp)
    d9e8:	|      move.l d1,-(sp)
    d9ea:	|      move.l d0,-(sp)
    d9ec:	|      jsr 6278 <addPerson>
    d9f2:	|      lea 16(sp),sp
    d9f6:	|      tst.w d0
    d9f8:	|  /-- beq.s d9fe <builtIn_addCharacter+0xfc>
    d9fa:	|  |   moveq #2,d0
    d9fc:	+--|-- bra.s da00 <builtIn_addCharacter+0xfe>
	return BR_ERROR;
    d9fe:	|  \-> moveq #1,d0
}
    da00:	\----> lea 16(sp),sp
    da04:	       rts

0000da06 <builtIn_hideCharacter>:

builtIn(hideCharacter)
{
    da06:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    da08:	       movea.l 12(sp),a0
    da0c:	       move.l 24(a0),d0
    da10:	       move.l d0,-(sp)
    da12:	       pea 7 <_start+0x7>
    da16:	       move.l sp,d0
    da18:	       addq.l #8,d0
    da1a:	       move.l d0,-(sp)
    da1c:	       jsr 10ec0 <getValueType>
    da22:	       lea 12(sp),sp
    da26:	       tst.w d0
    da28:	   /-- bne.s da2e <builtIn_hideCharacter+0x28>
    da2a:	   |   moveq #1,d0
    da2c:	/--|-- bra.s da4e <builtIn_hideCharacter+0x48>
	trimStack (&fun -> stack);
    da2e:	|  \-> moveq #24,d0
    da30:	|      add.l 12(sp),d0
    da34:	|      move.l d0,-(sp)
    da36:	|      jsr 11844 <trimStack>
    da3c:	|      addq.l #4,sp
	setShown (FALSE, objectNumber);
    da3e:	|      move.l (sp),d0
    da40:	|      move.l d0,-(sp)
    da42:	|      clr.l -(sp)
    da44:	|      jsr 8552 <setShown>
    da4a:	|      addq.l #8,sp
	return BR_CONTINUE;
    da4c:	|      moveq #2,d0
}
    da4e:	\----> addq.l #4,sp
    da50:	       rts

0000da52 <builtIn_showCharacter>:

builtIn(showCharacter)
{
    da52:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    da54:	       movea.l 12(sp),a0
    da58:	       move.l 24(a0),d0
    da5c:	       move.l d0,-(sp)
    da5e:	       pea 7 <_start+0x7>
    da62:	       move.l sp,d0
    da64:	       addq.l #8,d0
    da66:	       move.l d0,-(sp)
    da68:	       jsr 10ec0 <getValueType>
    da6e:	       lea 12(sp),sp
    da72:	       tst.w d0
    da74:	   /-- bne.s da7a <builtIn_showCharacter+0x28>
    da76:	   |   moveq #1,d0
    da78:	/--|-- bra.s da9c <builtIn_showCharacter+0x4a>
	trimStack (&fun -> stack);
    da7a:	|  \-> moveq #24,d0
    da7c:	|      add.l 12(sp),d0
    da80:	|      move.l d0,-(sp)
    da82:	|      jsr 11844 <trimStack>
    da88:	|      addq.l #4,sp
	setShown (TRUE, objectNumber);
    da8a:	|      move.l (sp),d0
    da8c:	|      move.l d0,-(sp)
    da8e:	|      pea 1 <_start+0x1>
    da92:	|      jsr 8552 <setShown>
    da98:	|      addq.l #8,sp
	return BR_CONTINUE;
    da9a:	|      moveq #2,d0
}
    da9c:	\----> addq.l #4,sp
    da9e:	       rts

0000daa0 <builtIn_removeAllCharacters>:

builtIn(removeAllCharacters)
{
	UNUSEDALL
	killSpeechTimers ();
    daa0:	jsr 3db2 <killSpeechTimers>
	killMostPeople ();
    daa6:	jsr 74be <killMostPeople>
	return BR_CONTINUE;
    daac:	moveq #2,d0
}
    daae:	rts

0000dab0 <builtIn_setCharacterDrawMode>:

builtIn(setCharacterDrawMode)
{
    dab0:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    dab2:	       movea.l 16(sp),a0
    dab6:	       move.l 24(a0),d0
    daba:	       move.l d0,-(sp)
    dabc:	       pea 1 <_start+0x1>
    dac0:	       move.l sp,d0
    dac2:	       addq.l #8,d0
    dac4:	       move.l d0,-(sp)
    dac6:	       jsr 10ec0 <getValueType>
    dacc:	       lea 12(sp),sp
    dad0:	       tst.w d0
    dad2:	   /-- bne.s dad8 <builtIn_setCharacterDrawMode+0x28>
    dad4:	   |   moveq #1,d0
    dad6:	/--|-- bra.s db32 <builtIn_setCharacterDrawMode+0x82>
	trimStack (&fun -> stack);
    dad8:	|  \-> moveq #24,d0
    dada:	|      add.l 16(sp),d0
    dade:	|      move.l d0,-(sp)
    dae0:	|      jsr 11844 <trimStack>
    dae6:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    dae8:	|      movea.l 16(sp),a0
    daec:	|      move.l 24(a0),d0
    daf0:	|      move.l d0,-(sp)
    daf2:	|      pea 7 <_start+0x7>
    daf6:	|      moveq #12,d0
    daf8:	|      add.l sp,d0
    dafa:	|      move.l d0,-(sp)
    dafc:	|      jsr 10ec0 <getValueType>
    db02:	|      lea 12(sp),sp
    db06:	|      tst.w d0
    db08:	|  /-- bne.s db0e <builtIn_setCharacterDrawMode+0x5e>
    db0a:	|  |   moveq #1,d0
    db0c:	+--|-- bra.s db32 <builtIn_setCharacterDrawMode+0x82>
	trimStack (&fun -> stack);
    db0e:	|  \-> moveq #24,d0
    db10:	|      add.l 16(sp),d0
    db14:	|      move.l d0,-(sp)
    db16:	|      jsr 11844 <trimStack>
    db1c:	|      addq.l #4,sp
	setDrawMode (di, obj);
    db1e:	|      move.l 4(sp),d1
    db22:	|      move.l (sp),d0
    db24:	|      move.l d1,-(sp)
    db26:	|      move.l d0,-(sp)
    db28:	|      jsr 7f80 <setDrawMode>
    db2e:	|      addq.l #8,sp
	return BR_CONTINUE;
    db30:	|      moveq #2,d0
}
    db32:	\----> addq.l #8,sp
    db34:	       rts

0000db36 <builtIn_setCharacterTransparency>:

builtIn(setCharacterTransparency)
{
	UNUSEDALL
	KPrintF("setCharacterTransparency: Not implemented on Amiga");
    db36:	pea 16ba2 <graphics.c.1c13408a+0x340>
    db3c:	jsr 12f14 <KPrintF>
    db42:	addq.l #4,sp
	return BR_CONTINUE;
    db44:	moveq #2,d0
}
    db46:	rts

0000db48 <builtIn_setCharacterColourise>:

builtIn(setCharacterColourise)
{
	UNUSEDALL
	KPrintF("setCharacterColourise: Currently not implemented on Amiga");
    db48:	pea 16bd5 <graphics.c.1c13408a+0x373>
    db4e:	jsr 12f14 <KPrintF>
    db54:	addq.l #4,sp
	if (! getValueType(&r, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
	trimStack (&fun -> stack);
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
	trimStack (&fun -> stack);
	setPersonColourise (obj, r, g, b, mix);*/
	return BR_CONTINUE;
    db56:	moveq #2,d0
}
    db58:	rts

0000db5a <builtIn_setScale>:

builtIn(setScale)
{
    db5a:	       subq.l #8,sp
	UNUSEDALL
	int val1, val2;
	if (! getValueType(&val2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    db5c:	       movea.l 16(sp),a0
    db60:	       move.l 24(a0),d0
    db64:	       move.l d0,-(sp)
    db66:	       pea 1 <_start+0x1>
    db6a:	       move.l sp,d0
    db6c:	       addq.l #8,d0
    db6e:	       move.l d0,-(sp)
    db70:	       jsr 10ec0 <getValueType>
    db76:	       lea 12(sp),sp
    db7a:	       tst.w d0
    db7c:	   /-- bne.s db82 <builtIn_setScale+0x28>
    db7e:	   |   moveq #1,d0
    db80:	/--|-- bra.s dbe4 <builtIn_setScale+0x8a>
	trimStack (&fun -> stack);
    db82:	|  \-> moveq #24,d0
    db84:	|      add.l 16(sp),d0
    db88:	|      move.l d0,-(sp)
    db8a:	|      jsr 11844 <trimStack>
    db90:	|      addq.l #4,sp
	if (! getValueType(&val1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    db92:	|      movea.l 16(sp),a0
    db96:	|      move.l 24(a0),d0
    db9a:	|      move.l d0,-(sp)
    db9c:	|      pea 1 <_start+0x1>
    dba0:	|      moveq #12,d0
    dba2:	|      add.l sp,d0
    dba4:	|      move.l d0,-(sp)
    dba6:	|      jsr 10ec0 <getValueType>
    dbac:	|      lea 12(sp),sp
    dbb0:	|      tst.w d0
    dbb2:	|  /-- bne.s dbb8 <builtIn_setScale+0x5e>
    dbb4:	|  |   moveq #1,d0
    dbb6:	+--|-- bra.s dbe4 <builtIn_setScale+0x8a>
	trimStack (&fun -> stack);
    dbb8:	|  \-> moveq #24,d0
    dbba:	|      add.l 16(sp),d0
    dbbe:	|      move.l d0,-(sp)
    dbc0:	|      jsr 11844 <trimStack>
    dbc6:	|      addq.l #4,sp
	setScale ((short int) val1, (short int) val2);
    dbc8:	|      move.l (sp),d0
    dbca:	|      move.l d0,d0
    dbcc:	|      movea.w d0,a1
    dbce:	|      move.l 4(sp),d0
    dbd2:	|      move.l d0,d0
    dbd4:	|      movea.w d0,a0
    dbd6:	|      move.l a1,-(sp)
    dbd8:	|      move.l a0,-(sp)
    dbda:	|      jsr 852a <setScale>
    dbe0:	|      addq.l #8,sp
	return BR_CONTINUE;
    dbe2:	|      moveq #2,d0
}
    dbe4:	\----> addq.l #8,sp
    dbe6:	       rts

0000dbe8 <builtIn_stopCharacter>:

builtIn(stopCharacter)
{
    dbe8:	       subq.l #4,sp
	UNUSEDALL
	int obj;
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    dbea:	       movea.l 12(sp),a0
    dbee:	       move.l 24(a0),d0
    dbf2:	       move.l d0,-(sp)
    dbf4:	       pea 7 <_start+0x7>
    dbf8:	       move.l sp,d0
    dbfa:	       addq.l #8,d0
    dbfc:	       move.l d0,-(sp)
    dbfe:	       jsr 10ec0 <getValueType>
    dc04:	       lea 12(sp),sp
    dc08:	       tst.w d0
    dc0a:	   /-- bne.s dc10 <builtIn_stopCharacter+0x28>
    dc0c:	   |   moveq #1,d0
    dc0e:	/--|-- bra.s dc48 <builtIn_stopCharacter+0x60>
	trimStack (&fun -> stack);
    dc10:	|  \-> moveq #24,d0
    dc12:	|      add.l 12(sp),d0
    dc16:	|      move.l d0,-(sp)
    dc18:	|      jsr 11844 <trimStack>
    dc1e:	|      addq.l #4,sp

	// Return value
	setVariable (&fun -> reg, SVT_INT, stopPerson (obj));
    dc20:	|      move.l (sp),d0
    dc22:	|      move.l d0,-(sp)
    dc24:	|      jsr 865e <stopPerson>
    dc2a:	|      addq.l #4,sp
    dc2c:	|      movea.w d0,a0
    dc2e:	|      moveq #28,d0
    dc30:	|      add.l 12(sp),d0
    dc34:	|      move.l a0,-(sp)
    dc36:	|      pea 1 <_start+0x1>
    dc3a:	|      move.l d0,-(sp)
    dc3c:	|      jsr 117b2 <setVariable>
    dc42:	|      lea 12(sp),sp
	return BR_CONTINUE;
    dc46:	|      moveq #2,d0
}
    dc48:	\----> addq.l #4,sp
    dc4a:	       rts

0000dc4c <builtIn_pasteCharacter>:
		fixScaleSprite (thisPerson -> x, thisPerson -> y, myAnim -> theSprites -> bank.sprites[abs (fNum)], myAnim -> theSprites -> bank.myPalette, thisPerson, 0, 0, fNum < 0);
		setVariable (&fun -> reg, SVT_INT, 1);
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
	} Todo: Amigize this*/
	KPrintF("Not implemented yet for Amiga");
    dc4c:	pea 16c0f <graphics.c.1c13408a+0x3ad>
    dc52:	jsr 12f14 <KPrintF>
    dc58:	addq.l #4,sp
	return BR_CONTINUE;
    dc5a:	moveq #2,d0
}
    dc5c:	rts

0000dc5e <builtIn_animate>:

builtIn(animate)
{
    dc5e:	       subq.l #8,sp
	UNUSEDALL
	int obj;
	struct personaAnimation * pp = getAnimationFromVar (&(fun -> stack -> thisVar));
    dc60:	       movea.l 16(sp),a0
    dc64:	       move.l 24(a0),d0
    dc68:	       move.l d0,-(sp)
    dc6a:	       jsr 11398 <getAnimationFromVar>
    dc70:	       addq.l #4,sp
    dc72:	       move.l d0,4(sp)
	if (pp == NULL) return BR_ERROR;
    dc76:	   /-- bne.s dc7c <builtIn_animate+0x1e>
    dc78:	   |   moveq #1,d0
    dc7a:	/--|-- bra.s dcfa <builtIn_animate+0x9c>
	trimStack (&fun -> stack);
    dc7c:	|  \-> moveq #24,d0
    dc7e:	|      add.l 16(sp),d0
    dc82:	|      move.l d0,-(sp)
    dc84:	|      jsr 11844 <trimStack>
    dc8a:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    dc8c:	|      movea.l 16(sp),a0
    dc90:	|      move.l 24(a0),d0
    dc94:	|      move.l d0,-(sp)
    dc96:	|      pea 7 <_start+0x7>
    dc9a:	|      move.l sp,d0
    dc9c:	|      addq.l #8,d0
    dc9e:	|      move.l d0,-(sp)
    dca0:	|      jsr 10ec0 <getValueType>
    dca6:	|      lea 12(sp),sp
    dcaa:	|      tst.w d0
    dcac:	|  /-- bne.s dcb2 <builtIn_animate+0x54>
    dcae:	|  |   moveq #1,d0
    dcb0:	+--|-- bra.s dcfa <builtIn_animate+0x9c>
	trimStack (&fun -> stack);
    dcb2:	|  \-> moveq #24,d0
    dcb4:	|      add.l 16(sp),d0
    dcb8:	|      move.l d0,-(sp)
    dcba:	|      jsr 11844 <trimStack>
    dcc0:	|      addq.l #4,sp
	animatePerson (obj, pp);
    dcc2:	|      move.l (sp),d0
    dcc4:	|      move.l 4(sp),-(sp)
    dcc8:	|      move.l d0,-(sp)
    dcca:	|      jsr 64ea <animatePerson>
    dcd0:	|      addq.l #8,sp
	setVariable (&fun -> reg, SVT_INT, timeForAnim (pp));
    dcd2:	|      move.l 4(sp),-(sp)
    dcd6:	|      jsr 86b2 <timeForAnim>
    dcdc:	|      addq.l #4,sp
    dcde:	|      move.l d0,d1
    dce0:	|      moveq #28,d0
    dce2:	|      add.l 16(sp),d0
    dce6:	|      move.l d1,-(sp)
    dce8:	|      pea 1 <_start+0x1>
    dcec:	|      move.l d0,-(sp)
    dcee:	|      jsr 117b2 <setVariable>
    dcf4:	|      lea 12(sp),sp
	return BR_CONTINUE;
    dcf8:	|      moveq #2,d0
}
    dcfa:	\----> addq.l #8,sp
    dcfc:	       rts

0000dcfe <builtIn_setCostume>:

builtIn(setCostume)
{
    dcfe:	       subq.l #8,sp
	UNUSEDALL
	int obj;
	struct persona * pp = getCostumeFromVar(&(fun -> stack -> thisVar));
    dd00:	       movea.l 16(sp),a0
    dd04:	       move.l 24(a0),d0
    dd08:	       move.l d0,-(sp)
    dd0a:	       jsr 10b6c <getCostumeFromVar>
    dd10:	       addq.l #4,sp
    dd12:	       move.l d0,4(sp)
	if (pp == NULL) return BR_ERROR;
    dd16:	   /-- bne.s dd1c <builtIn_setCostume+0x1e>
    dd18:	   |   moveq #1,d0
    dd1a:	/--|-- bra.s dd74 <builtIn_setCostume+0x76>
	trimStack (&fun -> stack);
    dd1c:	|  \-> moveq #24,d0
    dd1e:	|      add.l 16(sp),d0
    dd22:	|      move.l d0,-(sp)
    dd24:	|      jsr 11844 <trimStack>
    dd2a:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    dd2c:	|      movea.l 16(sp),a0
    dd30:	|      move.l 24(a0),d0
    dd34:	|      move.l d0,-(sp)
    dd36:	|      pea 7 <_start+0x7>
    dd3a:	|      move.l sp,d0
    dd3c:	|      addq.l #8,d0
    dd3e:	|      move.l d0,-(sp)
    dd40:	|      jsr 10ec0 <getValueType>
    dd46:	|      lea 12(sp),sp
    dd4a:	|      tst.w d0
    dd4c:	|  /-- bne.s dd52 <builtIn_setCostume+0x54>
    dd4e:	|  |   moveq #1,d0
    dd50:	+--|-- bra.s dd74 <builtIn_setCostume+0x76>
	trimStack (&fun -> stack);
    dd52:	|  \-> moveq #24,d0
    dd54:	|      add.l 16(sp),d0
    dd58:	|      move.l d0,-(sp)
    dd5a:	|      jsr 11844 <trimStack>
    dd60:	|      addq.l #4,sp
	animatePersonUsingPersona(obj, pp);
    dd62:	|      move.l (sp),d0
    dd64:	|      move.l 4(sp),-(sp)
    dd68:	|      move.l d0,-(sp)
    dd6a:	|      jsr 6534 <animatePersonUsingPersona>
    dd70:	|      addq.l #8,sp
	return BR_CONTINUE;
    dd72:	|      moveq #2,d0
}
    dd74:	\----> addq.l #8,sp
    dd76:	       rts

0000dd78 <builtIn_floatCharacter>:

builtIn(floatCharacter)
{
    dd78:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    dd7a:	       movea.l 16(sp),a0
    dd7e:	       move.l 24(a0),d0
    dd82:	       move.l d0,-(sp)
    dd84:	       pea 1 <_start+0x1>
    dd88:	       move.l sp,d0
    dd8a:	       addq.l #8,d0
    dd8c:	       move.l d0,-(sp)
    dd8e:	       jsr 10ec0 <getValueType>
    dd94:	       lea 12(sp),sp
    dd98:	       tst.w d0
    dd9a:	   /-- bne.s dda0 <builtIn_floatCharacter+0x28>
    dd9c:	   |   moveq #1,d0
    dd9e:	/--|-- bra.s de14 <builtIn_floatCharacter+0x9c>
	trimStack (&fun -> stack);
    dda0:	|  \-> moveq #24,d0
    dda2:	|      add.l 16(sp),d0
    dda6:	|      move.l d0,-(sp)
    dda8:	|      jsr 11844 <trimStack>
    ddae:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    ddb0:	|      movea.l 16(sp),a0
    ddb4:	|      move.l 24(a0),d0
    ddb8:	|      move.l d0,-(sp)
    ddba:	|      pea 7 <_start+0x7>
    ddbe:	|      moveq #12,d0
    ddc0:	|      add.l sp,d0
    ddc2:	|      move.l d0,-(sp)
    ddc4:	|      jsr 10ec0 <getValueType>
    ddca:	|      lea 12(sp),sp
    ddce:	|      tst.w d0
    ddd0:	|  /-- bne.s ddd6 <builtIn_floatCharacter+0x5e>
    ddd2:	|  |   moveq #1,d0
    ddd4:	+--|-- bra.s de14 <builtIn_floatCharacter+0x9c>
	trimStack (&fun -> stack);
    ddd6:	|  \-> moveq #24,d0
    ddd8:	|      add.l 16(sp),d0
    dddc:	|      move.l d0,-(sp)
    ddde:	|      jsr 11844 <trimStack>
    dde4:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, floatCharacter (di, obj));
    dde6:	|      move.l 4(sp),d1
    ddea:	|      move.l (sp),d0
    ddec:	|      move.l d1,-(sp)
    ddee:	|      move.l d0,-(sp)
    ddf0:	|      jsr 7080 <floatCharacter>
    ddf6:	|      addq.l #8,sp
    ddf8:	|      movea.w d0,a0
    ddfa:	|      moveq #28,d0
    ddfc:	|      add.l 16(sp),d0
    de00:	|      move.l a0,-(sp)
    de02:	|      pea 1 <_start+0x1>
    de06:	|      move.l d0,-(sp)
    de08:	|      jsr 117b2 <setVariable>
    de0e:	|      lea 12(sp),sp
	return BR_CONTINUE;
    de12:	|      moveq #2,d0
}
    de14:	\----> addq.l #8,sp
    de16:	       rts

0000de18 <builtIn_setCharacterWalkSpeed>:

builtIn(setCharacterWalkSpeed)
{
    de18:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    de1a:	       movea.l 16(sp),a0
    de1e:	       move.l 24(a0),d0
    de22:	       move.l d0,-(sp)
    de24:	       pea 1 <_start+0x1>
    de28:	       move.l sp,d0
    de2a:	       addq.l #8,d0
    de2c:	       move.l d0,-(sp)
    de2e:	       jsr 10ec0 <getValueType>
    de34:	       lea 12(sp),sp
    de38:	       tst.w d0
    de3a:	   /-- bne.s de40 <builtIn_setCharacterWalkSpeed+0x28>
    de3c:	   |   moveq #1,d0
    de3e:	/--|-- bra.s deb4 <builtIn_setCharacterWalkSpeed+0x9c>
	trimStack (&fun -> stack);
    de40:	|  \-> moveq #24,d0
    de42:	|      add.l 16(sp),d0
    de46:	|      move.l d0,-(sp)
    de48:	|      jsr 11844 <trimStack>
    de4e:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    de50:	|      movea.l 16(sp),a0
    de54:	|      move.l 24(a0),d0
    de58:	|      move.l d0,-(sp)
    de5a:	|      pea 7 <_start+0x7>
    de5e:	|      moveq #12,d0
    de60:	|      add.l sp,d0
    de62:	|      move.l d0,-(sp)
    de64:	|      jsr 10ec0 <getValueType>
    de6a:	|      lea 12(sp),sp
    de6e:	|      tst.w d0
    de70:	|  /-- bne.s de76 <builtIn_setCharacterWalkSpeed+0x5e>
    de72:	|  |   moveq #1,d0
    de74:	+--|-- bra.s deb4 <builtIn_setCharacterWalkSpeed+0x9c>
	trimStack (&fun -> stack);
    de76:	|  \-> moveq #24,d0
    de78:	|      add.l 16(sp),d0
    de7c:	|      move.l d0,-(sp)
    de7e:	|      jsr 11844 <trimStack>
    de84:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, setCharacterWalkSpeed (di, obj));
    de86:	|      move.l 4(sp),d1
    de8a:	|      move.l (sp),d0
    de8c:	|      move.l d1,-(sp)
    de8e:	|      move.l d0,-(sp)
    de90:	|      jsr 84c6 <setCharacterWalkSpeed>
    de96:	|      addq.l #8,sp
    de98:	|      movea.w d0,a0
    de9a:	|      moveq #28,d0
    de9c:	|      add.l 16(sp),d0
    dea0:	|      move.l a0,-(sp)
    dea2:	|      pea 1 <_start+0x1>
    dea6:	|      move.l d0,-(sp)
    dea8:	|      jsr 117b2 <setVariable>
    deae:	|      lea 12(sp),sp
	return BR_CONTINUE;
    deb2:	|      moveq #2,d0
}
    deb4:	\----> addq.l #8,sp
    deb6:	       rts

0000deb8 <builtIn_turnCharacter>:

builtIn(turnCharacter)
{
    deb8:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    deba:	       movea.l 16(sp),a0
    debe:	       move.l 24(a0),d0
    dec2:	       move.l d0,-(sp)
    dec4:	       pea 1 <_start+0x1>
    dec8:	       move.l sp,d0
    deca:	       addq.l #8,d0
    decc:	       move.l d0,-(sp)
    dece:	       jsr 10ec0 <getValueType>
    ded4:	       lea 12(sp),sp
    ded8:	       tst.w d0
    deda:	   /-- bne.s dee0 <builtIn_turnCharacter+0x28>
    dedc:	   |   moveq #1,d0
    dede:	/--|-- bra.s df54 <builtIn_turnCharacter+0x9c>
	trimStack (&fun -> stack);
    dee0:	|  \-> moveq #24,d0
    dee2:	|      add.l 16(sp),d0
    dee6:	|      move.l d0,-(sp)
    dee8:	|      jsr 11844 <trimStack>
    deee:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    def0:	|      movea.l 16(sp),a0
    def4:	|      move.l 24(a0),d0
    def8:	|      move.l d0,-(sp)
    defa:	|      pea 7 <_start+0x7>
    defe:	|      moveq #12,d0
    df00:	|      add.l sp,d0
    df02:	|      move.l d0,-(sp)
    df04:	|      jsr 10ec0 <getValueType>
    df0a:	|      lea 12(sp),sp
    df0e:	|      tst.w d0
    df10:	|  /-- bne.s df16 <builtIn_turnCharacter+0x5e>
    df12:	|  |   moveq #1,d0
    df14:	+--|-- bra.s df54 <builtIn_turnCharacter+0x9c>
	trimStack (&fun -> stack);
    df16:	|  \-> moveq #24,d0
    df18:	|      add.l 16(sp),d0
    df1c:	|      move.l d0,-(sp)
    df1e:	|      jsr 11844 <trimStack>
    df24:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, turnPersonToFace (obj, di));
    df26:	|      move.l (sp),d1
    df28:	|      move.l 4(sp),d0
    df2c:	|      move.l d1,-(sp)
    df2e:	|      move.l d0,-(sp)
    df30:	|      jsr 876a <turnPersonToFace>
    df36:	|      addq.l #8,sp
    df38:	|      movea.w d0,a0
    df3a:	|      moveq #28,d0
    df3c:	|      add.l 16(sp),d0
    df40:	|      move.l a0,-(sp)
    df42:	|      pea 1 <_start+0x1>
    df46:	|      move.l d0,-(sp)
    df48:	|      jsr 117b2 <setVariable>
    df4e:	|      lea 12(sp),sp
	return BR_CONTINUE;
    df52:	|      moveq #2,d0
}
    df54:	\----> addq.l #8,sp
    df56:	       rts

0000df58 <builtIn_setCharacterExtra>:

builtIn(setCharacterExtra)
{
    df58:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    df5a:	       movea.l 16(sp),a0
    df5e:	       move.l 24(a0),d0
    df62:	       move.l d0,-(sp)
    df64:	       pea 1 <_start+0x1>
    df68:	       move.l sp,d0
    df6a:	       addq.l #8,d0
    df6c:	       move.l d0,-(sp)
    df6e:	       jsr 10ec0 <getValueType>
    df74:	       lea 12(sp),sp
    df78:	       tst.w d0
    df7a:	   /-- bne.s df80 <builtIn_setCharacterExtra+0x28>
    df7c:	   |   moveq #1,d0
    df7e:	/--|-- bra.s dff4 <builtIn_setCharacterExtra+0x9c>
	trimStack (&fun -> stack);
    df80:	|  \-> moveq #24,d0
    df82:	|      add.l 16(sp),d0
    df86:	|      move.l d0,-(sp)
    df88:	|      jsr 11844 <trimStack>
    df8e:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    df90:	|      movea.l 16(sp),a0
    df94:	|      move.l 24(a0),d0
    df98:	|      move.l d0,-(sp)
    df9a:	|      pea 7 <_start+0x7>
    df9e:	|      moveq #12,d0
    dfa0:	|      add.l sp,d0
    dfa2:	|      move.l d0,-(sp)
    dfa4:	|      jsr 10ec0 <getValueType>
    dfaa:	|      lea 12(sp),sp
    dfae:	|      tst.w d0
    dfb0:	|  /-- bne.s dfb6 <builtIn_setCharacterExtra+0x5e>
    dfb2:	|  |   moveq #1,d0
    dfb4:	+--|-- bra.s dff4 <builtIn_setCharacterExtra+0x9c>
	trimStack (&fun -> stack);
    dfb6:	|  \-> moveq #24,d0
    dfb8:	|      add.l 16(sp),d0
    dfbc:	|      move.l d0,-(sp)
    dfbe:	|      jsr 11844 <trimStack>
    dfc4:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, setPersonExtra (obj, di));
    dfc6:	|      move.l (sp),d1
    dfc8:	|      move.l 4(sp),d0
    dfcc:	|      move.l d1,-(sp)
    dfce:	|      move.l d0,-(sp)
    dfd0:	|      jsr 84f4 <setPersonExtra>
    dfd6:	|      addq.l #8,sp
    dfd8:	|      movea.w d0,a0
    dfda:	|      moveq #28,d0
    dfdc:	|      add.l 16(sp),d0
    dfe0:	|      move.l a0,-(sp)
    dfe2:	|      pea 1 <_start+0x1>
    dfe6:	|      move.l d0,-(sp)
    dfe8:	|      jsr 117b2 <setVariable>
    dfee:	|      lea 12(sp),sp
	return BR_CONTINUE;
    dff2:	|      moveq #2,d0
}
    dff4:	\----> addq.l #8,sp
    dff6:	       rts

0000dff8 <builtIn_removeCharacter>:

builtIn(removeCharacter)
{
    dff8:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    dffa:	       movea.l 12(sp),a0
    dffe:	       move.l 24(a0),d0
    e002:	       move.l d0,-(sp)
    e004:	       pea 7 <_start+0x7>
    e008:	       move.l sp,d0
    e00a:	       addq.l #8,d0
    e00c:	       move.l d0,-(sp)
    e00e:	       jsr 10ec0 <getValueType>
    e014:	       lea 12(sp),sp
    e018:	       tst.w d0
    e01a:	   /-- bne.s e020 <builtIn_removeCharacter+0x28>
    e01c:	   |   moveq #1,d0
    e01e:	/--|-- bra.s e03e <builtIn_removeCharacter+0x46>
	trimStack (&fun -> stack);
    e020:	|  \-> moveq #24,d0
    e022:	|      add.l 12(sp),d0
    e026:	|      move.l d0,-(sp)
    e028:	|      jsr 11844 <trimStack>
    e02e:	|      addq.l #4,sp
	removeOneCharacter (objectNumber);
    e030:	|      move.l (sp),d0
    e032:	|      move.l d0,-(sp)
    e034:	|      jsr 7818 <removeOneCharacter>
    e03a:	|      addq.l #4,sp
	return BR_CONTINUE;
    e03c:	|      moveq #2,d0
}
    e03e:	\----> addq.l #4,sp
    e040:	       rts

0000e042 <moveChr>:

static enum builtReturn moveChr(int numParams, struct loadedFunction * fun, BOOL force, BOOL immediate)
{
    e042:	                lea -28(sp),sp
    e046:	                move.l d2,-(sp)
    e048:	                move.l 44(sp),d1
    e04c:	                move.l 48(sp),d0
    e050:	                move.w d1,d1
    e052:	                move.w d1,6(sp)
    e056:	                move.w d0,d0
    e058:	                move.w d0,4(sp)
	switch (numParams) {
    e05c:	                moveq #2,d0
    e05e:	                cmp.l 36(sp),d0
    e062:	      /-------- beq.w e1a4 <moveChr+0x162>
    e066:	      |         moveq #3,d0
    e068:	      |         cmp.l 36(sp),d0
    e06c:	/-----|-------- bne.w e2d8 <moveChr+0x296>
		case 3:
		{
			int x, y, objectNumber;

			if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e070:	|     |         movea.l 40(sp),a0
    e074:	|     |         move.l 24(a0),d0
    e078:	|     |         move.l d0,-(sp)
    e07a:	|     |         pea 1 <_start+0x1>
    e07e:	|     |         lea 20(sp),a0
    e082:	|     |         move.l a0,-(sp)
    e084:	|     |         jsr 10ec0 <getValueType>
    e08a:	|     |         lea 12(sp),sp
    e08e:	|     |         tst.w d0
    e090:	|     |     /-- bne.s e098 <moveChr+0x56>
    e092:	|     |     |   moveq #1,d0
    e094:	|  /--|-----|-- bra.w e2e8 <moveChr+0x2a6>
			trimStack (&fun -> stack);
    e098:	|  |  |     \-> moveq #24,d0
    e09a:	|  |  |         add.l 40(sp),d0
    e09e:	|  |  |         move.l d0,-(sp)
    e0a0:	|  |  |         jsr 11844 <trimStack>
    e0a6:	|  |  |         addq.l #4,sp
			if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e0a8:	|  |  |         movea.l 40(sp),a0
    e0ac:	|  |  |         move.l 24(a0),d0
    e0b0:	|  |  |         move.l d0,-(sp)
    e0b2:	|  |  |         pea 1 <_start+0x1>
    e0b6:	|  |  |         lea 24(sp),a0
    e0ba:	|  |  |         move.l a0,-(sp)
    e0bc:	|  |  |         jsr 10ec0 <getValueType>
    e0c2:	|  |  |         lea 12(sp),sp
    e0c6:	|  |  |         tst.w d0
    e0c8:	|  |  |     /-- bne.s e0d0 <moveChr+0x8e>
    e0ca:	|  |  |     |   moveq #1,d0
    e0cc:	|  +--|-----|-- bra.w e2e8 <moveChr+0x2a6>
			trimStack (&fun -> stack);
    e0d0:	|  |  |     \-> moveq #24,d0
    e0d2:	|  |  |         add.l 40(sp),d0
    e0d6:	|  |  |         move.l d0,-(sp)
    e0d8:	|  |  |         jsr 11844 <trimStack>
    e0de:	|  |  |         addq.l #4,sp
			if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e0e0:	|  |  |         movea.l 40(sp),a0
    e0e4:	|  |  |         move.l 24(a0),d0
    e0e8:	|  |  |         move.l d0,-(sp)
    e0ea:	|  |  |         pea 7 <_start+0x7>
    e0ee:	|  |  |         lea 16(sp),a0
    e0f2:	|  |  |         move.l a0,-(sp)
    e0f4:	|  |  |         jsr 10ec0 <getValueType>
    e0fa:	|  |  |         lea 12(sp),sp
    e0fe:	|  |  |         tst.w d0
    e100:	|  |  |     /-- bne.s e108 <moveChr+0xc6>
    e102:	|  |  |     |   moveq #1,d0
    e104:	|  +--|-----|-- bra.w e2e8 <moveChr+0x2a6>
			trimStack (&fun -> stack);
    e108:	|  |  |     \-> moveq #24,d0
    e10a:	|  |  |         add.l 40(sp),d0
    e10e:	|  |  |         move.l d0,-(sp)
    e110:	|  |  |         jsr 11844 <trimStack>
    e116:	|  |  |         addq.l #4,sp

			if (force) {
    e118:	|  |  |         tst.w 6(sp)
    e11c:	|  |  |     /-- beq.s e14c <moveChr+0x10a>
				if (forceWalkingPerson (x, y, objectNumber, fun, -1)) return BR_PAUSE;
    e11e:	|  |  |     |   movea.l 8(sp),a0
    e122:	|  |  |     |   move.l 12(sp),d1
    e126:	|  |  |     |   move.l 16(sp),d0
    e12a:	|  |  |     |   pea ffffffff <gcc8_c_support.c.8bf68f31+0xfffbea86>
    e12e:	|  |  |     |   move.l 44(sp),-(sp)
    e132:	|  |  |     |   move.l a0,-(sp)
    e134:	|  |  |     |   move.l d1,-(sp)
    e136:	|  |  |     |   move.l d0,-(sp)
    e138:	|  |  |     |   jsr 70a4 <forceWalkingPerson>
    e13e:	|  |  |     |   lea 20(sp),sp
    e142:	|  |  |     |   tst.w d0
    e144:	|  |  |  /--|-- beq.s e19e <moveChr+0x15c>
    e146:	|  |  |  |  |   moveq #3,d0
    e148:	|  +--|--|--|-- bra.w e2e8 <moveChr+0x2a6>
			} else if (immediate) {
    e14c:	|  |  |  |  \-> tst.w 4(sp)
    e150:	|  |  |  |  /-- beq.s e170 <moveChr+0x12e>
				jumpPerson (x, y, objectNumber);
    e152:	|  |  |  |  |   movea.l 8(sp),a0
    e156:	|  |  |  |  |   move.l 12(sp),d1
    e15a:	|  |  |  |  |   move.l 16(sp),d0
    e15e:	|  |  |  |  |   move.l a0,-(sp)
    e160:	|  |  |  |  |   move.l d1,-(sp)
    e162:	|  |  |  |  |   move.l d0,-(sp)
    e164:	|  |  |  |  |   jsr 73ac <jumpPerson>
    e16a:	|  |  |  |  |   lea 12(sp),sp
    e16e:	|  |  |  +--|-- bra.s e19e <moveChr+0x15c>
			} else {
				if (makeWalkingPerson (x, y, objectNumber, fun, -1)) return BR_PAUSE;
    e170:	|  |  |  |  \-> movea.l 8(sp),a0
    e174:	|  |  |  |      move.l 12(sp),d1
    e178:	|  |  |  |      move.l 16(sp),d0
    e17c:	|  |  |  |      pea ffffffff <gcc8_c_support.c.8bf68f31+0xfffbea86>
    e180:	|  |  |  |      move.l 44(sp),-(sp)
    e184:	|  |  |  |      move.l a0,-(sp)
    e186:	|  |  |  |      move.l d1,-(sp)
    e188:	|  |  |  |      move.l d0,-(sp)
    e18a:	|  |  |  |      jsr 757c <makeWalkingPerson>
    e190:	|  |  |  |      lea 20(sp),sp
    e194:	|  |  |  |      tst.w d0
    e196:	|  |  |  +----- beq.s e19e <moveChr+0x15c>
    e198:	|  |  |  |      moveq #3,d0
    e19a:	|  +--|--|----- bra.w e2e8 <moveChr+0x2a6>
			}
			return BR_CONTINUE;
    e19e:	|  |  |  \----> moveq #2,d0
    e1a0:	|  +--|-------- bra.w e2e8 <moveChr+0x2a6>
		case 2:
		{
			int toObj, objectNumber;
			struct screenRegion * reggie;

			if (! getValueType(&toObj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e1a4:	|  |  \-------> movea.l 40(sp),a0
    e1a8:	|  |            move.l 24(a0),d0
    e1ac:	|  |            move.l d0,-(sp)
    e1ae:	|  |            pea 7 <_start+0x7>
    e1b2:	|  |            moveq #32,d0
    e1b4:	|  |            add.l sp,d0
    e1b6:	|  |            move.l d0,-(sp)
    e1b8:	|  |            jsr 10ec0 <getValueType>
    e1be:	|  |            lea 12(sp),sp
    e1c2:	|  |            tst.w d0
    e1c4:	|  |        /-- bne.s e1cc <moveChr+0x18a>
    e1c6:	|  |        |   moveq #1,d0
    e1c8:	|  +--------|-- bra.w e2e8 <moveChr+0x2a6>
			trimStack (&fun -> stack);
    e1cc:	|  |        \-> moveq #24,d0
    e1ce:	|  |            add.l 40(sp),d0
    e1d2:	|  |            move.l d0,-(sp)
    e1d4:	|  |            jsr 11844 <trimStack>
    e1da:	|  |            addq.l #4,sp
			if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e1dc:	|  |            movea.l 40(sp),a0
    e1e0:	|  |            move.l 24(a0),d0
    e1e4:	|  |            move.l d0,-(sp)
    e1e6:	|  |            pea 7 <_start+0x7>
    e1ea:	|  |            lea 28(sp),a0
    e1ee:	|  |            move.l a0,-(sp)
    e1f0:	|  |            jsr 10ec0 <getValueType>
    e1f6:	|  |            lea 12(sp),sp
    e1fa:	|  |            tst.w d0
    e1fc:	|  |        /-- bne.s e204 <moveChr+0x1c2>
    e1fe:	|  |        |   moveq #1,d0
    e200:	|  +--------|-- bra.w e2e8 <moveChr+0x2a6>
			trimStack (&fun -> stack);
    e204:	|  |        \-> moveq #24,d0
    e206:	|  |            add.l 40(sp),d0
    e20a:	|  |            move.l d0,-(sp)
    e20c:	|  |            jsr 11844 <trimStack>
    e212:	|  |            addq.l #4,sp
			reggie = getRegionForObject (toObj);
    e214:	|  |            move.l 24(sp),d0
    e218:	|  |            move.l d0,-(sp)
    e21a:	|  |            jsr 1198a <getRegionForObject>
    e220:	|  |            addq.l #4,sp
    e222:	|  |            move.l d0,28(sp)
			if (reggie == NULL) return BR_CONTINUE;
    e226:	|  |        /-- bne.s e22e <moveChr+0x1ec>
    e228:	|  |        |   moveq #2,d0
    e22a:	|  +--------|-- bra.w e2e8 <moveChr+0x2a6>

			if (force)
    e22e:	|  |        \-> tst.w 6(sp)
    e232:	|  |        /-- beq.s e26e <moveChr+0x22c>
			{
				if (forceWalkingPerson (reggie -> sX, reggie -> sY,	objectNumber, fun, reggie -> di)) return BR_PAUSE;
    e234:	|  |        |   movea.l 28(sp),a0
    e238:	|  |        |   move.l 24(a0),d2
    e23c:	|  |        |   movea.l 20(sp),a1
    e240:	|  |        |   movea.l 28(sp),a0
    e244:	|  |        |   move.l 20(a0),d1
    e248:	|  |        |   movea.l 28(sp),a0
    e24c:	|  |        |   move.l 16(a0),d0
    e250:	|  |        |   move.l d2,-(sp)
    e252:	|  |        |   move.l 44(sp),-(sp)
    e256:	|  |        |   move.l a1,-(sp)
    e258:	|  |        |   move.l d1,-(sp)
    e25a:	|  |        |   move.l d0,-(sp)
    e25c:	|  |        |   jsr 70a4 <forceWalkingPerson>
    e262:	|  |        |   lea 20(sp),sp
    e266:	|  |        |   tst.w d0
    e268:	|  |     /--|-- beq.s e2d4 <moveChr+0x292>
    e26a:	|  |     |  |   moveq #3,d0
    e26c:	|  +-----|--|-- bra.s e2e8 <moveChr+0x2a6>
			}
			else if (immediate)
    e26e:	|  |     |  \-> tst.w 4(sp)
    e272:	|  |     |  /-- beq.s e29a <moveChr+0x258>
			{
				jumpPerson (reggie -> sX, reggie -> sY,	objectNumber);
    e274:	|  |     |  |   movea.l 20(sp),a1
    e278:	|  |     |  |   movea.l 28(sp),a0
    e27c:	|  |     |  |   move.l 20(a0),d1
    e280:	|  |     |  |   movea.l 28(sp),a0
    e284:	|  |     |  |   move.l 16(a0),d0
    e288:	|  |     |  |   move.l a1,-(sp)
    e28a:	|  |     |  |   move.l d1,-(sp)
    e28c:	|  |     |  |   move.l d0,-(sp)
    e28e:	|  |     |  |   jsr 73ac <jumpPerson>
    e294:	|  |     |  |   lea 12(sp),sp
    e298:	|  |     +--|-- bra.s e2d4 <moveChr+0x292>
			}
			else
			{
				if (makeWalkingPerson (reggie -> sX, reggie -> sY, objectNumber, fun, reggie -> di)) return BR_PAUSE;
    e29a:	|  |     |  \-> movea.l 28(sp),a0
    e29e:	|  |     |      move.l 24(a0),d2
    e2a2:	|  |     |      movea.l 20(sp),a1
    e2a6:	|  |     |      movea.l 28(sp),a0
    e2aa:	|  |     |      move.l 20(a0),d1
    e2ae:	|  |     |      movea.l 28(sp),a0
    e2b2:	|  |     |      move.l 16(a0),d0
    e2b6:	|  |     |      move.l d2,-(sp)
    e2b8:	|  |     |      move.l 44(sp),-(sp)
    e2bc:	|  |     |      move.l a1,-(sp)
    e2be:	|  |     |      move.l d1,-(sp)
    e2c0:	|  |     |      move.l d0,-(sp)
    e2c2:	|  |     |      jsr 757c <makeWalkingPerson>
    e2c8:	|  |     |      lea 20(sp),sp
    e2cc:	|  |     |      tst.w d0
    e2ce:	|  |     +----- beq.s e2d4 <moveChr+0x292>
    e2d0:	|  |     |      moveq #3,d0
    e2d2:	|  +-----|----- bra.s e2e8 <moveChr+0x2a6>
			}
			return BR_CONTINUE;
    e2d4:	|  |     \----> moveq #2,d0
    e2d6:	|  +----------- bra.s e2e8 <moveChr+0x2a6>
		}

		default:
			KPrintF ("Built-in function must have either 2 or 3 parameters.");
    e2d8:	\--|----------> pea 16c2d <graphics.c.1c13408a+0x3cb>
    e2de:	   |            jsr 12f14 <KPrintF>
    e2e4:	   |            addq.l #4,sp
			return BR_ERROR;
    e2e6:	   |            moveq #1,d0
	}
}
    e2e8:	   \----------> move.l (sp)+,d2
    e2ea:	                lea 28(sp),sp
    e2ee:	                rts

0000e2f0 <builtIn_moveCharacter>:

builtIn(moveCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, FALSE, FALSE);
    e2f0:	clr.l -(sp)
    e2f2:	clr.l -(sp)
    e2f4:	move.l 16(sp),-(sp)
    e2f8:	move.l 16(sp),-(sp)
    e2fc:	jsr e042 <moveChr>
    e302:	lea 16(sp),sp
}
    e306:	rts

0000e308 <builtIn_forceCharacter>:

builtIn(forceCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, TRUE, FALSE);
    e308:	clr.l -(sp)
    e30a:	pea 1 <_start+0x1>
    e30e:	move.l 16(sp),-(sp)
    e312:	move.l 16(sp),-(sp)
    e316:	jsr e042 <moveChr>
    e31c:	lea 16(sp),sp
}
    e320:	rts

0000e322 <builtIn_jumpCharacter>:

builtIn(jumpCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, FALSE, TRUE);
    e322:	pea 1 <_start+0x1>
    e326:	clr.l -(sp)
    e328:	move.l 16(sp),-(sp)
    e32c:	move.l 16(sp),-(sp)
    e330:	jsr e042 <moveChr>
    e336:	lea 16(sp),sp
}
    e33a:	rts

0000e33c <builtIn_clearStatus>:

builtIn(clearStatus)
{
	UNUSEDALL
	clearStatusBar ();
    e33c:	jsr 542a <clearStatusBar>
	return BR_CONTINUE;
    e342:	moveq #2,d0
}
    e344:	rts

0000e346 <builtIn_removeLastStatus>:

builtIn(removeLastStatus)
{
	UNUSEDALL
	killLastStatus ();
    e346:	jsr 54d2 <killLastStatus>
	return BR_CONTINUE;
    e34c:	moveq #2,d0
}
    e34e:	rts

0000e350 <builtIn_addStatus>:

builtIn(addStatus)
{
	UNUSEDALL
	addStatusBar ();
    e350:	jsr 53c0 <addStatusBar>
	return BR_CONTINUE;
    e356:	moveq #2,d0
}
    e358:	rts

0000e35a <builtIn_statusText>:

builtIn(statusText)
{
    e35a:	       subq.l #8,sp
    e35c:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar(&(fun->stack->thisVar));
    e35e:	       movea.l 20(sp),a0
    e362:	       move.l 24(a0),d0
    e366:	       move.l d0,-(sp)
    e368:	       jsr 11496 <getTextFromAnyVar>
    e36e:	       addq.l #4,sp
    e370:	       move.l d0,8(sp)
	if (!newText) return BR_ERROR;
    e374:	   /-- bne.s e37a <builtIn_statusText+0x20>
    e376:	   |   moveq #1,d0
    e378:	/--|-- bra.s e3ae <builtIn_statusText+0x54>
	trimStack(&fun->stack);
    e37a:	|  \-> moveq #24,d0
    e37c:	|      add.l 20(sp),d0
    e380:	|      move.l d0,-(sp)
    e382:	|      jsr 11844 <trimStack>
    e388:	|      addq.l #4,sp
	setStatusBar(newText);
    e38a:	|      move.l 8(sp),-(sp)
    e38e:	|      jsr 5752 <setStatusBar>
    e394:	|      addq.l #4,sp
	FreeVec(newText);
    e396:	|      move.l 8(sp),4(sp)
    e39c:	|      move.l 19c5e <SysBase>,d0
    e3a2:	|      movea.l d0,a6
    e3a4:	|      movea.l 4(sp),a1
    e3a8:	|      jsr -690(a6)
	return BR_CONTINUE;
    e3ac:	|      moveq #2,d0
}
    e3ae:	\----> movea.l (sp)+,a6
    e3b0:	       addq.l #8,sp
    e3b2:	       rts

0000e3b4 <builtIn_lightStatus>:

builtIn(lightStatus)
{
    e3b4:	       subq.l #4,sp
	UNUSEDALL
	int val;
	if (! getValueType(&val, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e3b6:	       movea.l 12(sp),a0
    e3ba:	       move.l 24(a0),d0
    e3be:	       move.l d0,-(sp)
    e3c0:	       pea 1 <_start+0x1>
    e3c4:	       move.l sp,d0
    e3c6:	       addq.l #8,d0
    e3c8:	       move.l d0,-(sp)
    e3ca:	       jsr 10ec0 <getValueType>
    e3d0:	       lea 12(sp),sp
    e3d4:	       tst.w d0
    e3d6:	   /-- bne.s e3dc <builtIn_lightStatus+0x28>
    e3d8:	   |   moveq #1,d0
    e3da:	/--|-- bra.s e3fa <builtIn_lightStatus+0x46>
	trimStack (&fun -> stack);
    e3dc:	|  \-> moveq #24,d0
    e3de:	|      add.l 12(sp),d0
    e3e2:	|      move.l d0,-(sp)
    e3e4:	|      jsr 11844 <trimStack>
    e3ea:	|      addq.l #4,sp
	setLitStatus (val);
    e3ec:	|      move.l (sp),d0
    e3ee:	|      move.l d0,-(sp)
    e3f0:	|      jsr 5742 <setLitStatus>
    e3f6:	|      addq.l #4,sp
	return BR_CONTINUE;
    e3f8:	|      moveq #2,d0
}
    e3fa:	\----> addq.l #4,sp
    e3fc:	       rts

0000e3fe <builtIn_positionStatus>:

builtIn(positionStatus)
{
    e3fe:	       subq.l #8,sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e400:	       movea.l 16(sp),a0
    e404:	       move.l 24(a0),d0
    e408:	       move.l d0,-(sp)
    e40a:	       pea 1 <_start+0x1>
    e40e:	       move.l sp,d0
    e410:	       addq.l #8,d0
    e412:	       move.l d0,-(sp)
    e414:	       jsr 10ec0 <getValueType>
    e41a:	       lea 12(sp),sp
    e41e:	       tst.w d0
    e420:	   /-- bne.s e426 <builtIn_positionStatus+0x28>
    e422:	   |   moveq #1,d0
    e424:	/--|-- bra.s e480 <builtIn_positionStatus+0x82>
	trimStack (&fun -> stack);
    e426:	|  \-> moveq #24,d0
    e428:	|      add.l 16(sp),d0
    e42c:	|      move.l d0,-(sp)
    e42e:	|      jsr 11844 <trimStack>
    e434:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e436:	|      movea.l 16(sp),a0
    e43a:	|      move.l 24(a0),d0
    e43e:	|      move.l d0,-(sp)
    e440:	|      pea 1 <_start+0x1>
    e444:	|      moveq #12,d0
    e446:	|      add.l sp,d0
    e448:	|      move.l d0,-(sp)
    e44a:	|      jsr 10ec0 <getValueType>
    e450:	|      lea 12(sp),sp
    e454:	|      tst.w d0
    e456:	|  /-- bne.s e45c <builtIn_positionStatus+0x5e>
    e458:	|  |   moveq #1,d0
    e45a:	+--|-- bra.s e480 <builtIn_positionStatus+0x82>
	trimStack (&fun -> stack);
    e45c:	|  \-> moveq #24,d0
    e45e:	|      add.l 16(sp),d0
    e462:	|      move.l d0,-(sp)
    e464:	|      jsr 11844 <trimStack>
    e46a:	|      addq.l #4,sp
	positionStatus (x, y);
    e46c:	|      move.l (sp),d1
    e46e:	|      move.l 4(sp),d0
    e472:	|      move.l d1,-(sp)
    e474:	|      move.l d0,-(sp)
    e476:	|      jsr 5534 <positionStatus>
    e47c:	|      addq.l #8,sp
	return BR_CONTINUE;
    e47e:	|      moveq #2,d0
}
    e480:	\----> addq.l #8,sp
    e482:	       rts

0000e484 <builtIn_alignStatus>:

builtIn(alignStatus)
{
    e484:	       subq.l #4,sp
	UNUSEDALL
	int val;
	if (! getValueType(&val, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e486:	       movea.l 12(sp),a0
    e48a:	       move.l 24(a0),d0
    e48e:	       move.l d0,-(sp)
    e490:	       pea 1 <_start+0x1>
    e494:	       move.l sp,d0
    e496:	       addq.l #8,d0
    e498:	       move.l d0,-(sp)
    e49a:	       jsr 10ec0 <getValueType>
    e4a0:	       lea 12(sp),sp
    e4a4:	       tst.w d0
    e4a6:	   /-- bne.s e4ac <builtIn_alignStatus+0x28>
    e4a8:	   |   moveq #1,d0
    e4aa:	/--|-- bra.s e4cc <builtIn_alignStatus+0x48>
	trimStack (&fun -> stack);
    e4ac:	|  \-> moveq #24,d0
    e4ae:	|      add.l 12(sp),d0
    e4b2:	|      move.l d0,-(sp)
    e4b4:	|      jsr 11844 <trimStack>
    e4ba:	|      addq.l #4,sp
	nowStatus -> alignStatus = (short) val;
    e4bc:	|      move.l (sp),d0
    e4be:	|      movea.l 18132 <nowStatus>,a0
    e4c4:	|      move.l d0,d0
    e4c6:	|      move.w d0,4(a0)
	return BR_CONTINUE;
    e4ca:	|      moveq #2,d0
}
    e4cc:	\----> addq.l #4,sp
    e4ce:	       rts

0000e4d0 <getFuncNumForCallback>:

static BOOL getFuncNumForCallback(int numParams, struct loadedFunction * fun, int *functionNum)
{
	switch (numParams) {
    e4d0:	             tst.l 4(sp)
    e4d4:	      /----- beq.s e4e0 <getFuncNumForCallback+0x10>
    e4d6:	      |      moveq #1,d0
    e4d8:	      |      cmp.l 4(sp),d0
    e4dc:	      |  /-- beq.s e4e6 <getFuncNumForCallback+0x16>
    e4de:	   /--|--|-- bra.s e51c <getFuncNumForCallback+0x4c>
		case 0:
			functionNum = 0;
    e4e0:	   |  \--|-> clr.l 12(sp)
			break;
    e4e4:	/--|-----|-- bra.s e52e <getFuncNumForCallback+0x5e>

		case 1:
			if (! getValueType(functionNum, SVT_FUNC,&fun -> stack -> thisVar)) return FALSE;
    e4e6:	|  |     \-> movea.l 8(sp),a0
    e4ea:	|  |         move.l 24(a0),d0
    e4ee:	|  |         move.l d0,-(sp)
    e4f0:	|  |         pea 2 <_start+0x2>
    e4f4:	|  |         move.l 20(sp),-(sp)
    e4f8:	|  |         jsr 10ec0 <getValueType>
    e4fe:	|  |         lea 12(sp),sp
    e502:	|  |         tst.w d0
    e504:	|  |     /-- bne.s e50a <getFuncNumForCallback+0x3a>
    e506:	|  |     |   clr.w d0
    e508:	|  |  /--|-- bra.s e530 <getFuncNumForCallback+0x60>
			trimStack (&fun -> stack);
    e50a:	|  |  |  \-> moveq #24,d0
    e50c:	|  |  |      add.l 8(sp),d0
    e510:	|  |  |      move.l d0,-(sp)
    e512:	|  |  |      jsr 11844 <trimStack>
    e518:	|  |  |      addq.l #4,sp
			break;
    e51a:	+--|--|----- bra.s e52e <getFuncNumForCallback+0x5e>

		default:
			KPrintF ("Too many parameters.");
    e51c:	|  \--|----> pea 16c63 <newfatal.c.307beca7+0x1>
    e522:	|     |      jsr 12f14 <KPrintF>
    e528:	|     |      addq.l #4,sp
			return FALSE;
    e52a:	|     |      clr.w d0
    e52c:	|     +----- bra.s e530 <getFuncNumForCallback+0x60>
	}
	return TRUE;
    e52e:	\-----|----> moveq #1,d0
}
    e530:	      \----> rts

0000e532 <builtIn_onLeftMouse>:

builtIn (onLeftMouse)
{
    e532:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    e534:	       move.l sp,d0
    e536:	       move.l d0,-(sp)
    e538:	       move.l 16(sp),-(sp)
    e53c:	       move.l 16(sp),-(sp)
    e540:	       jsr e4d0 <getFuncNumForCallback>
    e546:	       lea 12(sp),sp
    e54a:	       tst.w d0
    e54c:	/----- beq.s e55c <builtIn_onLeftMouse+0x2a>
	{
		currentEvents -> leftMouseFunction = functionNum;
    e54e:	|      movea.l 1811c <currentEvents>,a0
    e554:	|      move.l (sp),d0
    e556:	|      move.l d0,(a0)
		return BR_CONTINUE;
    e558:	|      moveq #2,d0
    e55a:	|  /-- bra.s e55e <builtIn_onLeftMouse+0x2c>
	}
	return BR_ERROR;
    e55c:	\--|-> moveq #1,d0
}
    e55e:	   \-> addq.l #4,sp
    e560:	       rts

0000e562 <builtIn_onLeftMouseUp>:

builtIn (onLeftMouseUp)
{
    e562:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    e564:	       move.l sp,d0
    e566:	       move.l d0,-(sp)
    e568:	       move.l 16(sp),-(sp)
    e56c:	       move.l 16(sp),-(sp)
    e570:	       jsr e4d0 <getFuncNumForCallback>
    e576:	       lea 12(sp),sp
    e57a:	       tst.w d0
    e57c:	/----- beq.s e58e <builtIn_onLeftMouseUp+0x2c>
	{
		currentEvents -> leftMouseUpFunction = functionNum;
    e57e:	|      movea.l 1811c <currentEvents>,a0
    e584:	|      move.l (sp),d0
    e586:	|      move.l d0,4(a0)
		return BR_CONTINUE;
    e58a:	|      moveq #2,d0
    e58c:	|  /-- bra.s e590 <builtIn_onLeftMouseUp+0x2e>
	}
	return BR_ERROR;
    e58e:	\--|-> moveq #1,d0
}
    e590:	   \-> addq.l #4,sp
    e592:	       rts

0000e594 <builtIn_onRightMouse>:

builtIn (onRightMouse)
{
    e594:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    e596:	       move.l sp,d0
    e598:	       move.l d0,-(sp)
    e59a:	       move.l 16(sp),-(sp)
    e59e:	       move.l 16(sp),-(sp)
    e5a2:	       jsr e4d0 <getFuncNumForCallback>
    e5a8:	       lea 12(sp),sp
    e5ac:	       tst.w d0
    e5ae:	/----- beq.s e5c0 <builtIn_onRightMouse+0x2c>
	{
		currentEvents -> rightMouseFunction = functionNum;
    e5b0:	|      movea.l 1811c <currentEvents>,a0
    e5b6:	|      move.l (sp),d0
    e5b8:	|      move.l d0,8(a0)
		return BR_CONTINUE;
    e5bc:	|      moveq #2,d0
    e5be:	|  /-- bra.s e5c2 <builtIn_onRightMouse+0x2e>
	}
	return BR_ERROR;
    e5c0:	\--|-> moveq #1,d0
}
    e5c2:	   \-> addq.l #4,sp
    e5c4:	       rts

0000e5c6 <builtIn_onRightMouseUp>:

builtIn (onRightMouseUp)
{
    e5c6:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    e5c8:	       move.l sp,d0
    e5ca:	       move.l d0,-(sp)
    e5cc:	       move.l 16(sp),-(sp)
    e5d0:	       move.l 16(sp),-(sp)
    e5d4:	       jsr e4d0 <getFuncNumForCallback>
    e5da:	       lea 12(sp),sp
    e5de:	       tst.w d0
    e5e0:	/----- beq.s e5f2 <builtIn_onRightMouseUp+0x2c>
	{
		currentEvents -> rightMouseUpFunction = functionNum;
    e5e2:	|      movea.l 1811c <currentEvents>,a0
    e5e8:	|      move.l (sp),d0
    e5ea:	|      move.l d0,12(a0)
		return BR_CONTINUE;
    e5ee:	|      moveq #2,d0
    e5f0:	|  /-- bra.s e5f4 <builtIn_onRightMouseUp+0x2e>
	}
	return BR_ERROR;
    e5f2:	\--|-> moveq #1,d0
}
    e5f4:	   \-> addq.l #4,sp
    e5f6:	       rts

0000e5f8 <builtIn_onFocusChange>:

builtIn (onFocusChange)
{
    e5f8:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    e5fa:	       move.l sp,d0
    e5fc:	       move.l d0,-(sp)
    e5fe:	       move.l 16(sp),-(sp)
    e602:	       move.l 16(sp),-(sp)
    e606:	       jsr e4d0 <getFuncNumForCallback>
    e60c:	       lea 12(sp),sp
    e610:	       tst.w d0
    e612:	/----- beq.s e624 <builtIn_onFocusChange+0x2c>
	{
		currentEvents -> focusFunction = functionNum;
    e614:	|      movea.l 1811c <currentEvents>,a0
    e61a:	|      move.l (sp),d0
    e61c:	|      move.l d0,20(a0)
		return BR_CONTINUE;
    e620:	|      moveq #2,d0
    e622:	|  /-- bra.s e626 <builtIn_onFocusChange+0x2e>
	}
	return BR_ERROR;
    e624:	\--|-> moveq #1,d0
}
    e626:	   \-> addq.l #4,sp
    e628:	       rts

0000e62a <builtIn_onMoveMouse>:

builtIn (onMoveMouse)
{
    e62a:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    e62c:	       move.l sp,d0
    e62e:	       move.l d0,-(sp)
    e630:	       move.l 16(sp),-(sp)
    e634:	       move.l 16(sp),-(sp)
    e638:	       jsr e4d0 <getFuncNumForCallback>
    e63e:	       lea 12(sp),sp
    e642:	       tst.w d0
    e644:	/----- beq.s e656 <builtIn_onMoveMouse+0x2c>
	{
		currentEvents -> moveMouseFunction = functionNum;
    e646:	|      movea.l 1811c <currentEvents>,a0
    e64c:	|      move.l (sp),d0
    e64e:	|      move.l d0,16(a0)
		return BR_CONTINUE;
    e652:	|      moveq #2,d0
    e654:	|  /-- bra.s e658 <builtIn_onMoveMouse+0x2e>
	}
	return BR_ERROR;
    e656:	\--|-> moveq #1,d0
}
    e658:	   \-> addq.l #4,sp
    e65a:	       rts

0000e65c <builtIn_onKeyboard>:

builtIn (onKeyboard)
{
    e65c:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    e65e:	       move.l sp,d0
    e660:	       move.l d0,-(sp)
    e662:	       move.l 16(sp),-(sp)
    e666:	       move.l 16(sp),-(sp)
    e66a:	       jsr e4d0 <getFuncNumForCallback>
    e670:	       lea 12(sp),sp
    e674:	       tst.w d0
    e676:	/----- beq.s e688 <builtIn_onKeyboard+0x2c>
	{
		currentEvents -> spaceFunction = functionNum;
    e678:	|      movea.l 1811c <currentEvents>,a0
    e67e:	|      move.l (sp),d0
    e680:	|      move.l d0,24(a0)
		return BR_CONTINUE;
    e684:	|      moveq #2,d0
    e686:	|  /-- bra.s e68a <builtIn_onKeyboard+0x2e>
	}
	return BR_ERROR;
    e688:	\--|-> moveq #1,d0
}
    e68a:	   \-> addq.l #4,sp
    e68c:	       rts

0000e68e <builtIn_spawnSub>:

builtIn (spawnSub)
{
    e68e:	          subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    e690:	          move.l sp,d0
    e692:	          move.l d0,-(sp)
    e694:	          move.l 16(sp),-(sp)
    e698:	          move.l 16(sp),-(sp)
    e69c:	          jsr e4d0 <getFuncNumForCallback>
    e6a2:	          lea 12(sp),sp
    e6a6:	          tst.w d0
    e6a8:	/-------- beq.s e6d4 <builtIn_spawnSub+0x46>
	{
		if (! startNewFunctionNum (functionNum, 0, NULL, noStack, TRUE)) return BR_ERROR;
    e6aa:	|         move.l 19c2e <noStack>,d1
    e6b0:	|         move.l (sp),d0
    e6b2:	|         pea 1 <_start+0x1>
    e6b6:	|         move.l d1,-(sp)
    e6b8:	|         clr.l -(sp)
    e6ba:	|         clr.l -(sp)
    e6bc:	|         move.l d0,-(sp)
    e6be:	|         jsr 4664 <startNewFunctionNum>
    e6c4:	|         lea 20(sp),sp
    e6c8:	|         tst.l d0
    e6ca:	|     /-- bne.s e6d0 <builtIn_spawnSub+0x42>
    e6cc:	|     |   moveq #1,d0
    e6ce:	|  /--|-- bra.s e6d6 <builtIn_spawnSub+0x48>
		return BR_CONTINUE;
    e6d0:	|  |  \-> moveq #2,d0
    e6d2:	|  +----- bra.s e6d6 <builtIn_spawnSub+0x48>
	}
	return BR_ERROR;
    e6d4:	\--|----> moveq #1,d0
}
    e6d6:	   \----> addq.l #4,sp
    e6d8:	          rts

0000e6da <builtIn_cancelSub>:

builtIn (cancelSub)
{
    e6da:	          subq.l #8,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    e6dc:	          move.l sp,d0
    e6de:	          addq.l #4,d0
    e6e0:	          move.l d0,-(sp)
    e6e2:	          move.l 20(sp),-(sp)
    e6e6:	          move.l 20(sp),-(sp)
    e6ea:	          jsr e4d0 <getFuncNumForCallback>
    e6f0:	          lea 12(sp),sp
    e6f4:	          tst.w d0
    e6f6:	/-------- beq.s e72c <builtIn_cancelSub+0x52>
	{
		BOOL killedMyself;
		cancelAFunction (functionNum, fun, &killedMyself);
    e6f8:	|         move.l 4(sp),d1
    e6fc:	|         move.l sp,d0
    e6fe:	|         addq.l #2,d0
    e700:	|         move.l d0,-(sp)
    e702:	|         move.l 20(sp),-(sp)
    e706:	|         move.l d1,-(sp)
    e708:	|         jsr 2628 <cancelAFunction>
    e70e:	|         lea 12(sp),sp
		if (killedMyself) {
    e712:	|         move.w 2(sp),d0
    e716:	|  /----- beq.s e728 <builtIn_cancelSub+0x4e>
			abortFunction (fun);
    e718:	|  |      move.l 16(sp),-(sp)
    e71c:	|  |      jsr 2546 <abortFunction>
    e722:	|  |      addq.l #4,sp
			return BR_ALREADY_GONE;
    e724:	|  |      moveq #5,d0
    e726:	|  |  /-- bra.s e72e <builtIn_cancelSub+0x54>
		}
		return BR_CONTINUE;
    e728:	|  \--|-> moveq #2,d0
    e72a:	|     +-- bra.s e72e <builtIn_cancelSub+0x54>
	}
	return BR_ERROR;
    e72c:	\-----|-> moveq #1,d0
}
    e72e:	      \-> addq.l #8,sp
    e730:	          rts

0000e732 <builtIn_stringWidth>:

builtIn(stringWidth)
{
    e732:	       subq.l #8,sp
    e734:	       move.l a6,-(sp)
	UNUSEDALL
	char * theText = getTextFromAnyVar(&(fun->stack->thisVar));
    e736:	       movea.l 20(sp),a0
    e73a:	       move.l 24(a0),d0
    e73e:	       move.l d0,-(sp)
    e740:	       jsr 11496 <getTextFromAnyVar>
    e746:	       addq.l #4,sp
    e748:	       move.l d0,8(sp)
	if (!theText) return BR_ERROR;
    e74c:	   /-- bne.s e752 <builtIn_stringWidth+0x20>
    e74e:	   |   moveq #1,d0
    e750:	/--|-- bra.s e7a0 <builtIn_stringWidth+0x6e>
	trimStack(&fun->stack);
    e752:	|  \-> moveq #24,d0
    e754:	|      add.l 20(sp),d0
    e758:	|      move.l d0,-(sp)
    e75a:	|      jsr 11844 <trimStack>
    e760:	|      addq.l #4,sp

	// Return value
	setVariable(&fun->reg, SVT_INT, stringWidth(theText));
    e762:	|      move.l 8(sp),-(sp)
    e766:	|      jsr 1189e <stringWidth>
    e76c:	|      addq.l #4,sp
    e76e:	|      move.l d0,d1
    e770:	|      moveq #28,d0
    e772:	|      add.l 20(sp),d0
    e776:	|      move.l d1,-(sp)
    e778:	|      pea 1 <_start+0x1>
    e77c:	|      move.l d0,-(sp)
    e77e:	|      jsr 117b2 <setVariable>
    e784:	|      lea 12(sp),sp
	FreeVec(theText);
    e788:	|      move.l 8(sp),4(sp)
    e78e:	|      move.l 19c5e <SysBase>,d0
    e794:	|      movea.l d0,a6
    e796:	|      movea.l 4(sp),a1
    e79a:	|      jsr -690(a6)
	return BR_CONTINUE;
    e79e:	|      moveq #2,d0
}
    e7a0:	\----> movea.l (sp)+,a6
    e7a2:	       addq.l #8,sp
    e7a4:	       rts

0000e7a6 <builtIn_hardScroll>:

builtIn(hardScroll)
{
    e7a6:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e7a8:	       movea.l 12(sp),a0
    e7ac:	       move.l 24(a0),d0
    e7b0:	       move.l d0,-(sp)
    e7b2:	       pea 1 <_start+0x1>
    e7b6:	       move.l sp,d0
    e7b8:	       addq.l #8,d0
    e7ba:	       move.l d0,-(sp)
    e7bc:	       jsr 10ec0 <getValueType>
    e7c2:	       lea 12(sp),sp
    e7c6:	       tst.w d0
    e7c8:	   /-- bne.s e7ce <builtIn_hardScroll+0x28>
    e7ca:	   |   moveq #1,d0
    e7cc:	/--|-- bra.s e7ec <builtIn_hardScroll+0x46>
	trimStack (&fun -> stack);
    e7ce:	|  \-> moveq #24,d0
    e7d0:	|      add.l 12(sp),d0
    e7d4:	|      move.l d0,-(sp)
    e7d6:	|      jsr 11844 <trimStack>
    e7dc:	|      addq.l #4,sp
	hardScroll (v);
    e7de:	|      move.l (sp),d0
    e7e0:	|      move.l d0,-(sp)
    e7e2:	|      jsr 9a0c <hardScroll>
    e7e8:	|      addq.l #4,sp
	return BR_CONTINUE;
    e7ea:	|      moveq #2,d0
}
    e7ec:	\----> addq.l #4,sp
    e7ee:	       rts

0000e7f0 <builtIn_isScreenRegion>:


builtIn(isScreenRegion)
{
    e7f0:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e7f2:	       movea.l 12(sp),a0
    e7f6:	       move.l 24(a0),d0
    e7fa:	       move.l d0,-(sp)
    e7fc:	       pea 7 <_start+0x7>
    e800:	       move.l sp,d0
    e802:	       addq.l #8,d0
    e804:	       move.l d0,-(sp)
    e806:	       jsr 10ec0 <getValueType>
    e80c:	       lea 12(sp),sp
    e810:	       tst.w d0
    e812:	   /-- bne.s e818 <builtIn_isScreenRegion+0x28>
    e814:	   |   moveq #1,d0
    e816:	/--|-- bra.s e858 <builtIn_isScreenRegion+0x68>
	trimStack (&fun -> stack);
    e818:	|  \-> moveq #24,d0
    e81a:	|      add.l 12(sp),d0
    e81e:	|      move.l d0,-(sp)
    e820:	|      jsr 11844 <trimStack>
    e826:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, getRegionForObject (objectNumber) != NULL);
    e828:	|      move.l (sp),d0
    e82a:	|      move.l d0,-(sp)
    e82c:	|      jsr 1198a <getRegionForObject>
    e832:	|      addq.l #4,sp
    e834:	|      tst.l d0
    e836:	|      sne d0
    e838:	|      neg.b d0
    e83a:	|      moveq #0,d1
    e83c:	|      move.b d0,d1
    e83e:	|      moveq #28,d0
    e840:	|      add.l 12(sp),d0
    e844:	|      move.l d1,-(sp)
    e846:	|      pea 1 <_start+0x1>
    e84a:	|      move.l d0,-(sp)
    e84c:	|      jsr 117b2 <setVariable>
    e852:	|      lea 12(sp),sp
	return BR_CONTINUE;
    e856:	|      moveq #2,d0
}
    e858:	\----> addq.l #4,sp
    e85a:	       rts

0000e85c <builtIn_setSpeechSpeed>:

builtIn(setSpeechSpeed)
{
    e85c:	       subq.l #4,sp
	UNUSEDALL
	int number;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e85e:	       movea.l 12(sp),a0
    e862:	       move.l 24(a0),d0
    e866:	       move.l d0,-(sp)
    e868:	       pea 1 <_start+0x1>
    e86c:	       move.l sp,d0
    e86e:	       addq.l #8,d0
    e870:	       move.l d0,-(sp)
    e872:	       jsr 10ec0 <getValueType>
    e878:	       lea 12(sp),sp
    e87c:	       tst.w d0
    e87e:	   /-- bne.s e884 <builtIn_setSpeechSpeed+0x28>
    e880:	   |   moveq #1,d0
    e882:	/--|-- bra.s e8d2 <builtIn_setSpeechSpeed+0x76>
	trimStack (&fun -> stack);
    e884:	|  \-> moveq #24,d0
    e886:	|      add.l 12(sp),d0
    e88a:	|      move.l d0,-(sp)
    e88c:	|      jsr 11844 <trimStack>
    e892:	|      addq.l #4,sp
	speechSpeed = number * (FLOAT) 0.01;
    e894:	|      move.l (sp),d0
    e896:	|      move.l d0,-(sp)
    e898:	|      jsr 134b0 <__floatsisf>
    e89e:	|      addq.l #4,sp
    e8a0:	|      move.l #1008981770,-(sp)
    e8a6:	|      move.l d0,-(sp)
    e8a8:	|      jsr 13562 <__mulsf3>
    e8ae:	|      addq.l #8,sp
    e8b0:	|      move.l d0,18136 <speechSpeed>
	setVariable (&fun -> reg, SVT_INT, 1);
    e8b6:	|      moveq #28,d0
    e8b8:	|      add.l 12(sp),d0
    e8bc:	|      pea 1 <_start+0x1>
    e8c0:	|      pea 1 <_start+0x1>
    e8c4:	|      move.l d0,-(sp)
    e8c6:	|      jsr 117b2 <setVariable>
    e8cc:	|      lea 12(sp),sp
	return BR_CONTINUE;
    e8d0:	|      moveq #2,d0
}
    e8d2:	\----> addq.l #4,sp
    e8d4:	       rts

0000e8d6 <builtIn_setFontSpacing>:

builtIn(setFontSpacing)
{
    e8d6:	       subq.l #4,sp
	UNUSEDALL
	int fontSpaceI;
	if (! getValueType(&fontSpaceI, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e8d8:	       movea.l 12(sp),a0
    e8dc:	       move.l 24(a0),d0
    e8e0:	       move.l d0,-(sp)
    e8e2:	       pea 1 <_start+0x1>
    e8e6:	       move.l sp,d0
    e8e8:	       addq.l #8,d0
    e8ea:	       move.l d0,-(sp)
    e8ec:	       jsr 10ec0 <getValueType>
    e8f2:	       lea 12(sp),sp
    e8f6:	       tst.w d0
    e8f8:	   /-- bne.s e8fe <builtIn_setFontSpacing+0x28>
    e8fa:	   |   moveq #1,d0
    e8fc:	/--|-- bra.s e934 <builtIn_setFontSpacing+0x5e>
	fontSpace = fontSpaceI;
    e8fe:	|  \-> move.l (sp),d0
    e900:	|      move.l d0,d0
    e902:	|      move.w d0,186b0 <fontSpace>
	trimStack (&fun -> stack);
    e908:	|      moveq #24,d0
    e90a:	|      add.l 12(sp),d0
    e90e:	|      move.l d0,-(sp)
    e910:	|      jsr 11844 <trimStack>
    e916:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
    e918:	|      moveq #28,d0
    e91a:	|      add.l 12(sp),d0
    e91e:	|      pea 1 <_start+0x1>
    e922:	|      pea 1 <_start+0x1>
    e926:	|      move.l d0,-(sp)
    e928:	|      jsr 117b2 <setVariable>
    e92e:	|      lea 12(sp),sp
	return BR_CONTINUE;
    e932:	|      moveq #2,d0
}
    e934:	\----> addq.l #4,sp
    e936:	       rts

0000e938 <builtIn_transitionLevel>:

builtIn(transitionLevel)
{
    e938:	          subq.l #4,sp
	UNUSEDALL
	int number;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e93a:	          movea.l 12(sp),a0
    e93e:	          move.l 24(a0),d0
    e942:	          move.l d0,-(sp)
    e944:	          pea 1 <_start+0x1>
    e948:	          move.l sp,d0
    e94a:	          addq.l #8,d0
    e94c:	          move.l d0,-(sp)
    e94e:	          jsr 10ec0 <getValueType>
    e954:	          lea 12(sp),sp
    e958:	          tst.w d0
    e95a:	      /-- bne.s e960 <builtIn_transitionLevel+0x28>
    e95c:	      |   moveq #1,d0
    e95e:	/-----|-- bra.s e9b4 <builtIn_transitionLevel+0x7c>
	trimStack (&fun -> stack);
    e960:	|     \-> moveq #24,d0
    e962:	|         add.l 12(sp),d0
    e966:	|         move.l d0,-(sp)
    e968:	|         jsr 11844 <trimStack>
    e96e:	|         addq.l #4,sp

	if (number < 0)
    e970:	|         move.l (sp),d0
    e972:	|     /-- bpl.s e97c <builtIn_transitionLevel+0x44>
		brightnessLevel = 0;
    e974:	|     |   clr.b 1811a <brightnessLevel>
    e97a:	|  /--|-- bra.s e998 <builtIn_transitionLevel+0x60>
	else if (number > 255)
    e97c:	|  |  \-> move.l (sp),d0
    e97e:	|  |      cmpi.l #255,d0
    e984:	|  |  /-- ble.s e98e <builtIn_transitionLevel+0x56>
		brightnessLevel = 255;
    e986:	|  |  |   st 1811a <brightnessLevel>
    e98c:	|  +--|-- bra.s e998 <builtIn_transitionLevel+0x60>
	else
		brightnessLevel = number;
    e98e:	|  |  \-> move.l (sp),d0
    e990:	|  |      move.l d0,d0
    e992:	|  |      move.b d0,1811a <brightnessLevel>

	setVariable (&fun -> reg, SVT_INT, 1);
    e998:	|  \----> moveq #28,d0
    e99a:	|         add.l 12(sp),d0
    e99e:	|         pea 1 <_start+0x1>
    e9a2:	|         pea 1 <_start+0x1>
    e9a6:	|         move.l d0,-(sp)
    e9a8:	|         jsr 117b2 <setVariable>
    e9ae:	|         lea 12(sp),sp
	return BR_CONTINUE;
    e9b2:	|         moveq #2,d0
}
    e9b4:	\-------> addq.l #4,sp
    e9b6:	          rts

0000e9b8 <builtIn_captureAllKeys>:

builtIn(captureAllKeys)
{
	UNUSEDALL
	captureAllKeys = getBoolean(&(fun -> stack -> thisVar));
    e9b8:	movea.l 8(sp),a0
    e9bc:	move.l 24(a0),d0
    e9c0:	move.l d0,-(sp)
    e9c2:	jsr 11400 <getBoolean>
    e9c8:	addq.l #4,sp
    e9ca:	move.w d0,19c02 <captureAllKeys>
	trimStack (&fun -> stack);
    e9d0:	moveq #24,d0
    e9d2:	add.l 8(sp),d0
    e9d6:	move.l d0,-(sp)
    e9d8:	jsr 11844 <trimStack>
    e9de:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, captureAllKeys);
    e9e0:	move.w 19c02 <captureAllKeys>,d0
    e9e6:	movea.w d0,a0
    e9e8:	moveq #28,d0
    e9ea:	add.l 8(sp),d0
    e9ee:	move.l a0,-(sp)
    e9f0:	pea 1 <_start+0x1>
    e9f4:	move.l d0,-(sp)
    e9f6:	jsr 117b2 <setVariable>
    e9fc:	lea 12(sp),sp
	return BR_CONTINUE;
    ea00:	moveq #2,d0
}
    ea02:	rts

0000ea04 <builtIn_spinCharacter>:


builtIn(spinCharacter)
{
    ea04:	       lea -12(sp),sp
	UNUSEDALL
	int number, objectNumber;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ea08:	       movea.l 20(sp),a0
    ea0c:	       move.l 24(a0),d0
    ea10:	       move.l d0,-(sp)
    ea12:	       pea 1 <_start+0x1>
    ea16:	       moveq #12,d0
    ea18:	       add.l sp,d0
    ea1a:	       move.l d0,-(sp)
    ea1c:	       jsr 10ec0 <getValueType>
    ea22:	       lea 12(sp),sp
    ea26:	       tst.w d0
    ea28:	   /-- bne.s ea30 <builtIn_spinCharacter+0x2c>
    ea2a:	   |   moveq #1,d0
    ea2c:	/--|-- bra.w eae0 <builtIn_spinCharacter+0xdc>
	trimStack (&fun -> stack);
    ea30:	|  \-> moveq #24,d0
    ea32:	|      add.l 20(sp),d0
    ea36:	|      move.l d0,-(sp)
    ea38:	|      jsr 11844 <trimStack>
    ea3e:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    ea40:	|      movea.l 20(sp),a0
    ea44:	|      move.l 24(a0),d0
    ea48:	|      move.l d0,-(sp)
    ea4a:	|      pea 7 <_start+0x7>
    ea4e:	|      lea 8(sp),a0
    ea52:	|      move.l a0,-(sp)
    ea54:	|      jsr 10ec0 <getValueType>
    ea5a:	|      lea 12(sp),sp
    ea5e:	|      tst.w d0
    ea60:	|  /-- bne.s ea66 <builtIn_spinCharacter+0x62>
    ea62:	|  |   moveq #1,d0
    ea64:	+--|-- bra.s eae0 <builtIn_spinCharacter+0xdc>
	trimStack (&fun -> stack);
    ea66:	|  \-> moveq #24,d0
    ea68:	|      add.l 20(sp),d0
    ea6c:	|      move.l d0,-(sp)
    ea6e:	|      jsr 11844 <trimStack>
    ea74:	|      addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (objectNumber);
    ea76:	|      move.l (sp),d0
    ea78:	|      move.l d0,-(sp)
    ea7a:	|      jsr 7052 <findPerson>
    ea80:	|      addq.l #4,sp
    ea82:	|      move.l d0,8(sp)
	if (thisPerson) {
    ea86:	|  /-- beq.s eac6 <builtIn_spinCharacter+0xc2>
		thisPerson -> wantAngle = number;
    ea88:	|  |   move.l 4(sp),d0
    ea8c:	|  |   movea.l 8(sp),a0
    ea90:	|  |   move.l d0,84(a0)
		thisPerson -> spinning = TRUE;
    ea94:	|  |   movea.l 8(sp),a0
    ea98:	|  |   move.w #1,54(a0)
		thisPerson -> continueAfterWalking = fun;
    ea9e:	|  |   movea.l 8(sp),a0
    eaa2:	|  |   move.l 20(sp),56(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
    eaa8:	|  |   moveq #28,d0
    eaaa:	|  |   add.l 20(sp),d0
    eaae:	|  |   pea 1 <_start+0x1>
    eab2:	|  |   pea 1 <_start+0x1>
    eab6:	|  |   move.l d0,-(sp)
    eab8:	|  |   jsr 117b2 <setVariable>
    eabe:	|  |   lea 12(sp),sp
		return BR_PAUSE;
    eac2:	|  |   moveq #3,d0
    eac4:	+--|-- bra.s eae0 <builtIn_spinCharacter+0xdc>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
    eac6:	|  \-> moveq #28,d0
    eac8:	|      add.l 20(sp),d0
    eacc:	|      clr.l -(sp)
    eace:	|      pea 1 <_start+0x1>
    ead2:	|      move.l d0,-(sp)
    ead4:	|      jsr 117b2 <setVariable>
    eada:	|      lea 12(sp),sp
		return BR_CONTINUE;
    eade:	|      moveq #2,d0
	}
}
    eae0:	\----> lea 12(sp),sp
    eae4:	       rts

0000eae6 <builtIn_getCharacterDirection>:

builtIn(getCharacterDirection)
{
    eae6:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    eae8:	          movea.l 16(sp),a0
    eaec:	          move.l 24(a0),d0
    eaf0:	          move.l d0,-(sp)
    eaf2:	          pea 7 <_start+0x7>
    eaf6:	          move.l sp,d0
    eaf8:	          addq.l #8,d0
    eafa:	          move.l d0,-(sp)
    eafc:	          jsr 10ec0 <getValueType>
    eb02:	          lea 12(sp),sp
    eb06:	          tst.w d0
    eb08:	      /-- bne.s eb0e <builtIn_getCharacterDirection+0x28>
    eb0a:	      |   moveq #1,d0
    eb0c:	/-----|-- bra.s eb6c <builtIn_getCharacterDirection+0x86>
	trimStack (&fun -> stack);
    eb0e:	|     \-> moveq #24,d0
    eb10:	|         add.l 16(sp),d0
    eb14:	|         move.l d0,-(sp)
    eb16:	|         jsr 11844 <trimStack>
    eb1c:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
    eb1e:	|         move.l (sp),d0
    eb20:	|         move.l d0,-(sp)
    eb22:	|         jsr 7052 <findPerson>
    eb28:	|         addq.l #4,sp
    eb2a:	|         move.l d0,4(sp)
	if (thisPerson) {
    eb2e:	|  /----- beq.s eb52 <builtIn_getCharacterDirection+0x6c>
		setVariable (&fun -> reg, SVT_INT, thisPerson -> direction);
    eb30:	|  |      movea.l 4(sp),a0
    eb34:	|  |      move.l 94(a0),d1
    eb38:	|  |      moveq #28,d0
    eb3a:	|  |      add.l 16(sp),d0
    eb3e:	|  |      move.l d1,-(sp)
    eb40:	|  |      pea 1 <_start+0x1>
    eb44:	|  |      move.l d0,-(sp)
    eb46:	|  |      jsr 117b2 <setVariable>
    eb4c:	|  |      lea 12(sp),sp
    eb50:	|  |  /-- bra.s eb6a <builtIn_getCharacterDirection+0x84>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
    eb52:	|  \--|-> moveq #28,d0
    eb54:	|     |   add.l 16(sp),d0
    eb58:	|     |   clr.l -(sp)
    eb5a:	|     |   pea 1 <_start+0x1>
    eb5e:	|     |   move.l d0,-(sp)
    eb60:	|     |   jsr 117b2 <setVariable>
    eb66:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    eb6a:	|     \-> moveq #2,d0
}
    eb6c:	\-------> addq.l #8,sp
    eb6e:	          rts

0000eb70 <builtIn_isCharacter>:

builtIn(isCharacter)
{
    eb70:	       subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    eb72:	       movea.l 16(sp),a0
    eb76:	       move.l 24(a0),d0
    eb7a:	       move.l d0,-(sp)
    eb7c:	       pea 7 <_start+0x7>
    eb80:	       move.l sp,d0
    eb82:	       addq.l #8,d0
    eb84:	       move.l d0,-(sp)
    eb86:	       jsr 10ec0 <getValueType>
    eb8c:	       lea 12(sp),sp
    eb90:	       tst.w d0
    eb92:	   /-- bne.s eb98 <builtIn_isCharacter+0x28>
    eb94:	   |   moveq #1,d0
    eb96:	/--|-- bra.s ebda <builtIn_isCharacter+0x6a>
	trimStack (&fun -> stack);
    eb98:	|  \-> moveq #24,d0
    eb9a:	|      add.l 16(sp),d0
    eb9e:	|      move.l d0,-(sp)
    eba0:	|      jsr 11844 <trimStack>
    eba6:	|      addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
    eba8:	|      move.l (sp),d0
    ebaa:	|      move.l d0,-(sp)
    ebac:	|      jsr 7052 <findPerson>
    ebb2:	|      addq.l #4,sp
    ebb4:	|      move.l d0,4(sp)
	setVariable (&fun -> reg, SVT_INT, thisPerson != NULL);
    ebb8:	|      sne d0
    ebba:	|      neg.b d0
    ebbc:	|      moveq #0,d1
    ebbe:	|      move.b d0,d1
    ebc0:	|      moveq #28,d0
    ebc2:	|      add.l 16(sp),d0
    ebc6:	|      move.l d1,-(sp)
    ebc8:	|      pea 1 <_start+0x1>
    ebcc:	|      move.l d0,-(sp)
    ebce:	|      jsr 117b2 <setVariable>
    ebd4:	|      lea 12(sp),sp
	return BR_CONTINUE;
    ebd8:	|      moveq #2,d0
}
    ebda:	\----> addq.l #8,sp
    ebdc:	       rts

0000ebde <builtIn_normalCharacter>:

builtIn(normalCharacter)
{
    ebde:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    ebe0:	          movea.l 16(sp),a0
    ebe4:	          move.l 24(a0),d0
    ebe8:	          move.l d0,-(sp)
    ebea:	          pea 7 <_start+0x7>
    ebee:	          move.l sp,d0
    ebf0:	          addq.l #8,d0
    ebf2:	          move.l d0,-(sp)
    ebf4:	          jsr 10ec0 <getValueType>
    ebfa:	          lea 12(sp),sp
    ebfe:	          tst.w d0
    ec00:	      /-- bne.s ec06 <builtIn_normalCharacter+0x28>
    ec02:	      |   moveq #1,d0
    ec04:	/-----|-- bra.s ec82 <builtIn_normalCharacter+0xa4>
	trimStack (&fun -> stack);
    ec06:	|     \-> moveq #24,d0
    ec08:	|         add.l 16(sp),d0
    ec0c:	|         move.l d0,-(sp)
    ec0e:	|         jsr 11844 <trimStack>
    ec14:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
    ec16:	|         move.l (sp),d0
    ec18:	|         move.l d0,-(sp)
    ec1a:	|         jsr 7052 <findPerson>
    ec20:	|         addq.l #4,sp
    ec22:	|         move.l d0,4(sp)
	if (thisPerson)
    ec26:	|  /----- beq.s ec68 <builtIn_normalCharacter+0x8a>
	{
		thisPerson -> myAnim = thisPerson -> myPersona -> animation[thisPerson -> direction];
    ec28:	|  |      movea.l 4(sp),a0
    ec2c:	|  |      movea.l 68(a0),a0
    ec30:	|  |      move.l (a0),d1
    ec32:	|  |      movea.l 4(sp),a0
    ec36:	|  |      move.l 94(a0),d0
    ec3a:	|  |      add.l d0,d0
    ec3c:	|  |      add.l d0,d0
    ec3e:	|  |      movea.l d1,a0
    ec40:	|  |      adda.l d0,a0
    ec42:	|  |      move.l (a0),d0
    ec44:	|  |      movea.l 4(sp),a0
    ec48:	|  |      move.l d0,60(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
    ec4c:	|  |      moveq #28,d0
    ec4e:	|  |      add.l 16(sp),d0
    ec52:	|  |      pea 1 <_start+0x1>
    ec56:	|  |      pea 1 <_start+0x1>
    ec5a:	|  |      move.l d0,-(sp)
    ec5c:	|  |      jsr 117b2 <setVariable>
    ec62:	|  |      lea 12(sp),sp
    ec66:	|  |  /-- bra.s ec80 <builtIn_normalCharacter+0xa2>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
    ec68:	|  \--|-> moveq #28,d0
    ec6a:	|     |   add.l 16(sp),d0
    ec6e:	|     |   clr.l -(sp)
    ec70:	|     |   pea 1 <_start+0x1>
    ec74:	|     |   move.l d0,-(sp)
    ec76:	|     |   jsr 117b2 <setVariable>
    ec7c:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    ec80:	|     \-> moveq #2,d0
}
    ec82:	\-------> addq.l #8,sp
    ec84:	          rts

0000ec86 <builtIn_isMoving>:

builtIn(isMoving)
{
    ec86:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    ec88:	          movea.l 16(sp),a0
    ec8c:	          move.l 24(a0),d0
    ec90:	          move.l d0,-(sp)
    ec92:	          pea 7 <_start+0x7>
    ec96:	          move.l sp,d0
    ec98:	          addq.l #8,d0
    ec9a:	          move.l d0,-(sp)
    ec9c:	          jsr 10ec0 <getValueType>
    eca2:	          lea 12(sp),sp
    eca6:	          tst.w d0
    eca8:	      /-- bne.s ecae <builtIn_isMoving+0x28>
    ecaa:	      |   moveq #1,d0
    ecac:	/-----|-- bra.s ed0e <builtIn_isMoving+0x88>
	trimStack (&fun -> stack);
    ecae:	|     \-> moveq #24,d0
    ecb0:	|         add.l 16(sp),d0
    ecb4:	|         move.l d0,-(sp)
    ecb6:	|         jsr 11844 <trimStack>
    ecbc:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
    ecbe:	|         move.l (sp),d0
    ecc0:	|         move.l d0,-(sp)
    ecc2:	|         jsr 7052 <findPerson>
    ecc8:	|         addq.l #4,sp
    ecca:	|         move.l d0,4(sp)
	if (thisPerson)
    ecce:	|  /----- beq.s ecf4 <builtIn_isMoving+0x6e>
	{
		setVariable (&fun -> reg, SVT_INT, thisPerson -> walking);
    ecd0:	|  |      movea.l 4(sp),a0
    ecd4:	|  |      move.w 52(a0),d0
    ecd8:	|  |      movea.w d0,a0
    ecda:	|  |      moveq #28,d0
    ecdc:	|  |      add.l 16(sp),d0
    ece0:	|  |      move.l a0,-(sp)
    ece2:	|  |      pea 1 <_start+0x1>
    ece6:	|  |      move.l d0,-(sp)
    ece8:	|  |      jsr 117b2 <setVariable>
    ecee:	|  |      lea 12(sp),sp
    ecf2:	|  |  /-- bra.s ed0c <builtIn_isMoving+0x86>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
    ecf4:	|  \--|-> moveq #28,d0
    ecf6:	|     |   add.l 16(sp),d0
    ecfa:	|     |   clr.l -(sp)
    ecfc:	|     |   pea 1 <_start+0x1>
    ed00:	|     |   move.l d0,-(sp)
    ed02:	|     |   jsr 117b2 <setVariable>
    ed08:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    ed0c:	|     \-> moveq #2,d0
}
    ed0e:	\-------> addq.l #8,sp
    ed10:	          rts

0000ed12 <builtIn_fetchEvent>:

builtIn(fetchEvent)
{
    ed12:	          lea -12(sp),sp
	UNUSEDALL
	int obj1, obj2;
	if (! getValueType(&obj2, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    ed16:	          movea.l 20(sp),a0
    ed1a:	          move.l 24(a0),d0
    ed1e:	          move.l d0,-(sp)
    ed20:	          pea 7 <_start+0x7>
    ed24:	          lea 8(sp),a0
    ed28:	          move.l a0,-(sp)
    ed2a:	          jsr 10ec0 <getValueType>
    ed30:	          lea 12(sp),sp
    ed34:	          tst.w d0
    ed36:	      /-- bne.s ed3e <builtIn_fetchEvent+0x2c>
    ed38:	      |   moveq #1,d0
    ed3a:	/-----|-- bra.w edd2 <builtIn_fetchEvent+0xc0>
	trimStack (&fun -> stack);
    ed3e:	|     \-> moveq #24,d0
    ed40:	|         add.l 20(sp),d0
    ed44:	|         move.l d0,-(sp)
    ed46:	|         jsr 11844 <trimStack>
    ed4c:	|         addq.l #4,sp
	if (! getValueType(&obj1, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    ed4e:	|         movea.l 20(sp),a0
    ed52:	|         move.l 24(a0),d0
    ed56:	|         move.l d0,-(sp)
    ed58:	|         pea 7 <_start+0x7>
    ed5c:	|         moveq #12,d0
    ed5e:	|         add.l sp,d0
    ed60:	|         move.l d0,-(sp)
    ed62:	|         jsr 10ec0 <getValueType>
    ed68:	|         lea 12(sp),sp
    ed6c:	|         tst.w d0
    ed6e:	|     /-- bne.s ed74 <builtIn_fetchEvent+0x62>
    ed70:	|     |   moveq #1,d0
    ed72:	+-----|-- bra.s edd2 <builtIn_fetchEvent+0xc0>
	trimStack (&fun -> stack);
    ed74:	|     \-> moveq #24,d0
    ed76:	|         add.l 20(sp),d0
    ed7a:	|         move.l d0,-(sp)
    ed7c:	|         jsr 11844 <trimStack>
    ed82:	|         addq.l #4,sp

	int fNum = getCombinationFunction (obj1, obj2);
    ed84:	|         move.l (sp),d1
    ed86:	|         move.l 4(sp),d0
    ed8a:	|         move.l d1,-(sp)
    ed8c:	|         move.l d0,-(sp)
    ed8e:	|         jsr 9d46 <getCombinationFunction>
    ed94:	|         addq.l #8,sp
    ed96:	|         move.l d0,8(sp)

	// Return value
	if (fNum) {
    ed9a:	|  /----- beq.s edb8 <builtIn_fetchEvent+0xa6>
		setVariable (&fun -> reg, SVT_FUNC, fNum);
    ed9c:	|  |      moveq #28,d0
    ed9e:	|  |      add.l 20(sp),d0
    eda2:	|  |      move.l 8(sp),-(sp)
    eda6:	|  |      pea 2 <_start+0x2>
    edaa:	|  |      move.l d0,-(sp)
    edac:	|  |      jsr 117b2 <setVariable>
    edb2:	|  |      lea 12(sp),sp
    edb6:	|  |  /-- bra.s edd0 <builtIn_fetchEvent+0xbe>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
    edb8:	|  \--|-> moveq #28,d0
    edba:	|     |   add.l 20(sp),d0
    edbe:	|     |   clr.l -(sp)
    edc0:	|     |   pea 1 <_start+0x1>
    edc4:	|     |   move.l d0,-(sp)
    edc6:	|     |   jsr 117b2 <setVariable>
    edcc:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    edd0:	|     \-> moveq #2,d0
}
    edd2:	\-------> lea 12(sp),sp
    edd6:	          rts

0000edd8 <builtIn_deleteFile>:

builtIn(deleteFile)
{
    edd8:	       lea -24(sp),sp
    eddc:	       move.l a6,-(sp)
    UNUSEDALL

    char *namNormal = getTextFromAnyVar(&(fun->stack->thisVar));
    edde:	       movea.l 36(sp),a0
    ede2:	       move.l 24(a0),d0
    ede6:	       move.l d0,-(sp)
    ede8:	       jsr 11496 <getTextFromAnyVar>
    edee:	       addq.l #4,sp
    edf0:	       move.l d0,24(sp)
    trimStack(&fun->stack);
    edf4:	       moveq #24,d0
    edf6:	       add.l 36(sp),d0
    edfa:	       move.l d0,-(sp)
    edfc:	       jsr 11844 <trimStack>
    ee02:	       addq.l #4,sp
    char *nam = encodeFilename(namNormal);
    ee04:	       move.l 24(sp),-(sp)
    ee08:	       jsr 2fe <encodeFilename>
    ee0e:	       addq.l #4,sp
    ee10:	       move.l d0,20(sp)
    FreeVec(namNormal);
    ee14:	       move.l 24(sp),16(sp)
    ee1a:	       move.l 19c5e <SysBase>,d0
    ee20:	       movea.l d0,a6
    ee22:	       movea.l 16(sp),a1
    ee26:	       jsr -690(a6)
    if (failSecurityCheck(nam)) return BR_ERROR;
    ee2a:	       move.l 20(sp),-(sp)
    ee2e:	       jsr aafe <failSecurityCheck>
    ee34:	       addq.l #4,sp
    ee36:	       tst.w d0
    ee38:	   /-- beq.s ee3e <builtIn_deleteFile+0x66>
    ee3a:	   |   moveq #1,d0
    ee3c:	/--|-- bra.s ee8c <builtIn_deleteFile+0xb4>
    setVariable(&fun->reg, SVT_INT, DeleteFile(nam));
    ee3e:	|  \-> move.l 20(sp),12(sp)
    ee44:	|      move.l 19c66 <DOSBase>,d0
    ee4a:	|      movea.l d0,a6
    ee4c:	|      move.l 12(sp),d1
    ee50:	|      jsr -72(a6)
    ee54:	|      move.l d0,8(sp)
    ee58:	|      move.l 8(sp),d1
    ee5c:	|      moveq #28,d0
    ee5e:	|      add.l 36(sp),d0
    ee62:	|      move.l d1,-(sp)
    ee64:	|      pea 1 <_start+0x1>
    ee68:	|      move.l d0,-(sp)
    ee6a:	|      jsr 117b2 <setVariable>
    ee70:	|      lea 12(sp),sp
    FreeVec(nam);
    ee74:	|      move.l 20(sp),4(sp)
    ee7a:	|      move.l 19c5e <SysBase>,d0
    ee80:	|      movea.l d0,a6
    ee82:	|      movea.l 4(sp),a1
    ee86:	|      jsr -690(a6)

    return BR_CONTINUE;
    ee8a:	|      moveq #2,d0
}
    ee8c:	\----> movea.l (sp)+,a6
    ee8e:	       lea 24(sp),sp
    ee92:	       rts

0000ee94 <builtIn_renameFile>:

builtIn(renameFile)
{
    ee94:	       lea -40(sp),sp
    ee98:	       move.l a6,-(sp)
    ee9a:	       move.l d2,-(sp)
	UNUSEDALL
	char * temp;

	temp = getTextFromAnyVar(&(fun->stack->thisVar));
    ee9c:	       movea.l 56(sp),a0
    eea0:	       move.l 24(a0),d0
    eea4:	       move.l d0,-(sp)
    eea6:	       jsr 11496 <getTextFromAnyVar>
    eeac:	       addq.l #4,sp
    eeae:	       move.l d0,44(sp)
	char * newnam = encodeFilename(temp);
    eeb2:	       move.l 44(sp),-(sp)
    eeb6:	       jsr 2fe <encodeFilename>
    eebc:	       addq.l #4,sp
    eebe:	       move.l d0,40(sp)
	trimStack(&fun->stack);
    eec2:	       moveq #24,d0
    eec4:	       add.l 56(sp),d0
    eec8:	       move.l d0,-(sp)
    eeca:	       jsr 11844 <trimStack>
    eed0:	       addq.l #4,sp
	if (failSecurityCheck(newnam)) return BR_ERROR;
    eed2:	       move.l 40(sp),-(sp)
    eed6:	       jsr aafe <failSecurityCheck>
    eedc:	       addq.l #4,sp
    eede:	       tst.w d0
    eee0:	   /-- beq.s eee8 <builtIn_renameFile+0x54>
    eee2:	   |   moveq #1,d0
    eee4:	/--|-- bra.w efce <builtIn_renameFile+0x13a>
	FreeVec(temp);
    eee8:	|  \-> move.l 44(sp),36(sp)
    eeee:	|      move.l 19c5e <SysBase>,d0
    eef4:	|      movea.l d0,a6
    eef6:	|      movea.l 36(sp),a1
    eefa:	|      jsr -690(a6)

	temp = getTextFromAnyVar(&(fun->stack->thisVar));
    eefe:	|      movea.l 56(sp),a0
    ef02:	|      move.l 24(a0),d0
    ef06:	|      move.l d0,-(sp)
    ef08:	|      jsr 11496 <getTextFromAnyVar>
    ef0e:	|      addq.l #4,sp
    ef10:	|      move.l d0,44(sp)
	char * nam = encodeFilename(temp);
    ef14:	|      move.l 44(sp),-(sp)
    ef18:	|      jsr 2fe <encodeFilename>
    ef1e:	|      addq.l #4,sp
    ef20:	|      move.l d0,32(sp)
	trimStack(&fun->stack);
    ef24:	|      moveq #24,d0
    ef26:	|      add.l 56(sp),d0
    ef2a:	|      move.l d0,-(sp)
    ef2c:	|      jsr 11844 <trimStack>
    ef32:	|      addq.l #4,sp
	if (failSecurityCheck(nam)) return BR_ERROR;
    ef34:	|      move.l 32(sp),-(sp)
    ef38:	|      jsr aafe <failSecurityCheck>
    ef3e:	|      addq.l #4,sp
    ef40:	|      tst.w d0
    ef42:	|  /-- beq.s ef4a <builtIn_renameFile+0xb6>
    ef44:	|  |   moveq #1,d0
    ef46:	+--|-- bra.w efce <builtIn_renameFile+0x13a>
	FreeVec(temp);
    ef4a:	|  \-> move.l 44(sp),28(sp)
    ef50:	|      move.l 19c5e <SysBase>,d0
    ef56:	|      movea.l d0,a6
    ef58:	|      movea.l 28(sp),a1
    ef5c:	|      jsr -690(a6)

	setVariable(&fun->reg, SVT_INT, Rename(nam, newnam));
    ef60:	|      move.l 32(sp),24(sp)
    ef66:	|      move.l 40(sp),20(sp)
    ef6c:	|      move.l 19c66 <DOSBase>,d0
    ef72:	|      movea.l d0,a6
    ef74:	|      move.l 24(sp),d1
    ef78:	|      move.l 20(sp),d2
    ef7c:	|      jsr -78(a6)
    ef80:	|      move.l d0,16(sp)
    ef84:	|      move.l 16(sp),d1
    ef88:	|      moveq #28,d0
    ef8a:	|      add.l 56(sp),d0
    ef8e:	|      move.l d1,-(sp)
    ef90:	|      pea 1 <_start+0x1>
    ef94:	|      move.l d0,-(sp)
    ef96:	|      jsr 117b2 <setVariable>
    ef9c:	|      lea 12(sp),sp
	FreeVec(nam);
    efa0:	|      move.l 32(sp),12(sp)
    efa6:	|      move.l 19c5e <SysBase>,d0
    efac:	|      movea.l d0,a6
    efae:	|      movea.l 12(sp),a1
    efb2:	|      jsr -690(a6)
	FreeVec(newnam);
    efb6:	|      move.l 40(sp),8(sp)
    efbc:	|      move.l 19c5e <SysBase>,d0
    efc2:	|      movea.l d0,a6
    efc4:	|      movea.l 8(sp),a1
    efc8:	|      jsr -690(a6)

	return BR_CONTINUE;
    efcc:	|      moveq #2,d0
}
    efce:	\----> move.l (sp)+,d2
    efd0:	       movea.l (sp)+,a6
    efd2:	       lea 40(sp),sp
    efd6:	       rts

0000efd8 <builtIn_cacheSound>:

builtIn(cacheSound)
{
    efd8:	       subq.l #4,sp
	UNUSEDALL
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    efda:	       movea.l 12(sp),a0
    efde:	       move.l 24(a0),d0
    efe2:	       move.l d0,-(sp)
    efe4:	       pea 5 <_start+0x5>
    efe8:	       move.l sp,d0
    efea:	       addq.l #8,d0
    efec:	       move.l d0,-(sp)
    efee:	       jsr 10ec0 <getValueType>
    eff4:	       lea 12(sp),sp
    eff8:	       tst.w d0
    effa:	   /-- bne.s f000 <builtIn_cacheSound+0x28>
    effc:	   |   moveq #1,d0
    effe:	/--|-- bra.s f028 <builtIn_cacheSound+0x50>
	trimStack (&fun -> stack);
    f000:	|  \-> moveq #24,d0
    f002:	|      add.l 12(sp),d0
    f006:	|      move.l d0,-(sp)
    f008:	|      jsr 11844 <trimStack>
    f00e:	|      addq.l #4,sp
	if (cacheSound (fileNumber) == -1) return BR_ERROR;
    f010:	|      move.l (sp),d0
    f012:	|      move.l d0,-(sp)
    f014:	|      jsr 98ee <cacheSound>
    f01a:	|      addq.l #4,sp
    f01c:	|      moveq #-1,d1
    f01e:	|      cmp.l d0,d1
    f020:	|  /-- bne.s f026 <builtIn_cacheSound+0x4e>
    f022:	|  |   moveq #1,d0
    f024:	+--|-- bra.s f028 <builtIn_cacheSound+0x50>
	return BR_CONTINUE;
    f026:	|  \-> moveq #2,d0
}
    f028:	\----> addq.l #4,sp
    f02a:	       rts

0000f02c <builtIn_burnString>:
	trimStack (&fun -> stack);
	if (x == IN_THE_CENTRE) x = (winWidth - stringWidth (newText)) >> 1;
	fixFont (pastePalette);
	burnStringToBackdrop (newText, x, y, pastePalette);
	delete[] newText; Todo: Amigize this*/
	KPrintF("burnString: Not implemented for Amiga yet");
    f02c:	pea 16c78 <newfatal.c.307beca7+0x16>
    f032:	jsr 12f14 <KPrintF>
    f038:	addq.l #4,sp
	return BR_CONTINUE;
    f03a:	moveq #2,d0
}
    f03c:	rts

0000f03e <builtIn_setCharacterSpinSpeed>:

builtIn(setCharacterSpinSpeed)
{
    f03e:	          lea -12(sp),sp
	UNUSEDALL
	int speed, who;
	if (! getValueType(&speed, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f042:	          movea.l 20(sp),a0
    f046:	          move.l 24(a0),d0
    f04a:	          move.l d0,-(sp)
    f04c:	          pea 1 <_start+0x1>
    f050:	          moveq #12,d0
    f052:	          add.l sp,d0
    f054:	          move.l d0,-(sp)
    f056:	          jsr 10ec0 <getValueType>
    f05c:	          lea 12(sp),sp
    f060:	          tst.w d0
    f062:	      /-- bne.s f06a <builtIn_setCharacterSpinSpeed+0x2c>
    f064:	      |   moveq #1,d0
    f066:	/-----|-- bra.w f104 <builtIn_setCharacterSpinSpeed+0xc6>
	trimStack (&fun -> stack);
    f06a:	|     \-> moveq #24,d0
    f06c:	|         add.l 20(sp),d0
    f070:	|         move.l d0,-(sp)
    f072:	|         jsr 11844 <trimStack>
    f078:	|         addq.l #4,sp
	if (! getValueType(&who, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    f07a:	|         movea.l 20(sp),a0
    f07e:	|         move.l 24(a0),d0
    f082:	|         move.l d0,-(sp)
    f084:	|         pea 7 <_start+0x7>
    f088:	|         lea 8(sp),a0
    f08c:	|         move.l a0,-(sp)
    f08e:	|         jsr 10ec0 <getValueType>
    f094:	|         lea 12(sp),sp
    f098:	|         tst.w d0
    f09a:	|     /-- bne.s f0a0 <builtIn_setCharacterSpinSpeed+0x62>
    f09c:	|     |   moveq #1,d0
    f09e:	+-----|-- bra.s f104 <builtIn_setCharacterSpinSpeed+0xc6>
	trimStack (&fun -> stack);
    f0a0:	|     \-> moveq #24,d0
    f0a2:	|         add.l 20(sp),d0
    f0a6:	|         move.l d0,-(sp)
    f0a8:	|         jsr 11844 <trimStack>
    f0ae:	|         addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (who);
    f0b0:	|         move.l (sp),d0
    f0b2:	|         move.l d0,-(sp)
    f0b4:	|         jsr 7052 <findPerson>
    f0ba:	|         addq.l #4,sp
    f0bc:	|         move.l d0,8(sp)

	if (thisPerson) {
    f0c0:	|  /----- beq.s f0ea <builtIn_setCharacterSpinSpeed+0xac>
		thisPerson -> spinSpeed = speed;
    f0c2:	|  |      move.l 4(sp),d0
    f0c6:	|  |      movea.l 8(sp),a0
    f0ca:	|  |      move.l d0,110(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
    f0ce:	|  |      moveq #28,d0
    f0d0:	|  |      add.l 20(sp),d0
    f0d4:	|  |      pea 1 <_start+0x1>
    f0d8:	|  |      pea 1 <_start+0x1>
    f0dc:	|  |      move.l d0,-(sp)
    f0de:	|  |      jsr 117b2 <setVariable>
    f0e4:	|  |      lea 12(sp),sp
    f0e8:	|  |  /-- bra.s f102 <builtIn_setCharacterSpinSpeed+0xc4>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
    f0ea:	|  \--|-> moveq #28,d0
    f0ec:	|     |   add.l 20(sp),d0
    f0f0:	|     |   clr.l -(sp)
    f0f2:	|     |   pea 1 <_start+0x1>
    f0f6:	|     |   move.l d0,-(sp)
    f0f8:	|     |   jsr 117b2 <setVariable>
    f0fe:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    f102:	|     \-> moveq #2,d0
}
    f104:	\-------> lea 12(sp),sp
    f108:	          rts

0000f10a <builtIn_setCharacterAngleOffset>:

builtIn(setCharacterAngleOffset)
{
    f10a:	          lea -12(sp),sp
	UNUSEDALL
	int angle, who;
	if (! getValueType(&angle, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f10e:	          movea.l 20(sp),a0
    f112:	          move.l 24(a0),d0
    f116:	          move.l d0,-(sp)
    f118:	          pea 1 <_start+0x1>
    f11c:	          moveq #12,d0
    f11e:	          add.l sp,d0
    f120:	          move.l d0,-(sp)
    f122:	          jsr 10ec0 <getValueType>
    f128:	          lea 12(sp),sp
    f12c:	          tst.w d0
    f12e:	      /-- bne.s f136 <builtIn_setCharacterAngleOffset+0x2c>
    f130:	      |   moveq #1,d0
    f132:	/-----|-- bra.w f1d0 <builtIn_setCharacterAngleOffset+0xc6>
	trimStack (&fun -> stack);
    f136:	|     \-> moveq #24,d0
    f138:	|         add.l 20(sp),d0
    f13c:	|         move.l d0,-(sp)
    f13e:	|         jsr 11844 <trimStack>
    f144:	|         addq.l #4,sp
	if (! getValueType(&who, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    f146:	|         movea.l 20(sp),a0
    f14a:	|         move.l 24(a0),d0
    f14e:	|         move.l d0,-(sp)
    f150:	|         pea 7 <_start+0x7>
    f154:	|         lea 8(sp),a0
    f158:	|         move.l a0,-(sp)
    f15a:	|         jsr 10ec0 <getValueType>
    f160:	|         lea 12(sp),sp
    f164:	|         tst.w d0
    f166:	|     /-- bne.s f16c <builtIn_setCharacterAngleOffset+0x62>
    f168:	|     |   moveq #1,d0
    f16a:	+-----|-- bra.s f1d0 <builtIn_setCharacterAngleOffset+0xc6>
	trimStack (&fun -> stack);
    f16c:	|     \-> moveq #24,d0
    f16e:	|         add.l 20(sp),d0
    f172:	|         move.l d0,-(sp)
    f174:	|         jsr 11844 <trimStack>
    f17a:	|         addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (who);
    f17c:	|         move.l (sp),d0
    f17e:	|         move.l d0,-(sp)
    f180:	|         jsr 7052 <findPerson>
    f186:	|         addq.l #4,sp
    f188:	|         move.l d0,8(sp)

	if (thisPerson) {
    f18c:	|  /----- beq.s f1b6 <builtIn_setCharacterAngleOffset+0xac>
		thisPerson -> angleOffset = angle;
    f18e:	|  |      move.l 4(sp),d0
    f192:	|  |      movea.l 8(sp),a0
    f196:	|  |      move.l d0,88(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
    f19a:	|  |      moveq #28,d0
    f19c:	|  |      add.l 20(sp),d0
    f1a0:	|  |      pea 1 <_start+0x1>
    f1a4:	|  |      pea 1 <_start+0x1>
    f1a8:	|  |      move.l d0,-(sp)
    f1aa:	|  |      jsr 117b2 <setVariable>
    f1b0:	|  |      lea 12(sp),sp
    f1b4:	|  |  /-- bra.s f1ce <builtIn_setCharacterAngleOffset+0xc4>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
    f1b6:	|  \--|-> moveq #28,d0
    f1b8:	|     |   add.l 20(sp),d0
    f1bc:	|     |   clr.l -(sp)
    f1be:	|     |   pea 1 <_start+0x1>
    f1c2:	|     |   move.l d0,-(sp)
    f1c4:	|     |   jsr 117b2 <setVariable>
    f1ca:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    f1ce:	|     \-> moveq #2,d0
}
    f1d0:	\-------> lea 12(sp),sp
    f1d4:	          rts

0000f1d6 <builtIn_transitionMode>:


builtIn(transitionMode)
{
    f1d6:	       subq.l #4,sp
	UNUSEDALL
	int n;
	if (! getValueType(&n, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f1d8:	       movea.l 12(sp),a0
    f1dc:	       move.l 24(a0),d0
    f1e0:	       move.l d0,-(sp)
    f1e2:	       pea 1 <_start+0x1>
    f1e6:	       move.l sp,d0
    f1e8:	       addq.l #8,d0
    f1ea:	       move.l d0,-(sp)
    f1ec:	       jsr 10ec0 <getValueType>
    f1f2:	       lea 12(sp),sp
    f1f6:	       tst.w d0
    f1f8:	   /-- bne.s f1fe <builtIn_transitionMode+0x28>
    f1fa:	   |   moveq #1,d0
    f1fc:	/--|-- bra.s f234 <builtIn_transitionMode+0x5e>
	fadeMode = n;
    f1fe:	|  \-> move.l (sp),d0
    f200:	|      move.l d0,d0
    f202:	|      move.b d0,18686 <fadeMode>
	trimStack (&fun -> stack);
    f208:	|      moveq #24,d0
    f20a:	|      add.l 12(sp),d0
    f20e:	|      move.l d0,-(sp)
    f210:	|      jsr 11844 <trimStack>
    f216:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
    f218:	|      moveq #28,d0
    f21a:	|      add.l 12(sp),d0
    f21e:	|      pea 1 <_start+0x1>
    f222:	|      pea 1 <_start+0x1>
    f226:	|      move.l d0,-(sp)
    f228:	|      jsr 117b2 <setVariable>
    f22e:	|      lea 12(sp),sp
	return BR_CONTINUE;
    f232:	|      moveq #2,d0
}
    f234:	\----> addq.l #4,sp
    f236:	       rts

0000f238 <builtIn__rem_updateDisplay>:

// Removed function - does nothing
builtIn(_rem_updateDisplay)
{
	UNUSEDALL
	trimStack (&fun -> stack);
    f238:	moveq #24,d0
    f23a:	add.l 8(sp),d0
    f23e:	move.l d0,-(sp)
    f240:	jsr 11844 <trimStack>
    f246:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, TRUE);
    f248:	moveq #28,d0
    f24a:	add.l 8(sp),d0
    f24e:	pea 1 <_start+0x1>
    f252:	pea 1 <_start+0x1>
    f256:	move.l d0,-(sp)
    f258:	jsr 117b2 <setVariable>
    f25e:	lea 12(sp),sp
	return BR_CONTINUE;
    f262:	moveq #2,d0
}
    f264:	rts

0000f266 <builtIn_getSoundCache>:
	if (! checkNew (&fun -> reg.varData.theStack)) return BR_ERROR;
	fun -> reg.varData.theStack -> first = NULL;
	fun -> reg.varData.theStack -> last = NULL;
	fun -> reg.varData.theStack -> timesUsed = 1;
	if (! getSoundCacheStack (&fun -> reg.varData.theStack)) return BR_ERROR; Todo: Amigize this?*/
	KPrintF("getSoundCache: Not implemented yet for Amiga");
    f266:	pea 16ca2 <newfatal.c.307beca7+0x40>
    f26c:	jsr 12f14 <KPrintF>
    f272:	addq.l #4,sp
	return BR_CONTINUE;
    f274:	moveq #2,d0
}
    f276:	rts

0000f278 <builtIn_saveCustomData>:

builtIn(saveCustomData)
{
    f278:	       lea -16(sp),sp
    f27c:	       move.l a6,-(sp)
	UNUSEDALL
	// saveCustomData (thisStack, fileName);
	char * fileNameB = getTextFromAnyVar(&(fun->stack->thisVar));
    f27e:	       movea.l 28(sp),a0
    f282:	       move.l 24(a0),d0
    f286:	       move.l d0,-(sp)
    f288:	       jsr 11496 <getTextFromAnyVar>
    f28e:	       addq.l #4,sp
    f290:	       move.l d0,16(sp)
	if (!fileNameB) return BR_ERROR;
    f294:	   /-- bne.s f29c <builtIn_saveCustomData+0x24>
    f296:	   |   moveq #1,d0
    f298:	/--|-- bra.w f34e <builtIn_saveCustomData+0xd6>

	char * fileName = encodeFilename(fileNameB);
    f29c:	|  \-> move.l 16(sp),-(sp)
    f2a0:	|      jsr 2fe <encodeFilename>
    f2a6:	|      addq.l #4,sp
    f2a8:	|      move.l d0,12(sp)
	FreeVec(fileNameB);
    f2ac:	|      move.l 16(sp),8(sp)
    f2b2:	|      move.l 19c5e <SysBase>,d0
    f2b8:	|      movea.l d0,a6
    f2ba:	|      movea.l 8(sp),a1
    f2be:	|      jsr -690(a6)

	if (failSecurityCheck(fileName)) return BR_ERROR;
    f2c2:	|      move.l 12(sp),-(sp)
    f2c6:	|      jsr aafe <failSecurityCheck>
    f2cc:	|      addq.l #4,sp
    f2ce:	|      tst.w d0
    f2d0:	|  /-- beq.s f2d6 <builtIn_saveCustomData+0x5e>
    f2d2:	|  |   moveq #1,d0
    f2d4:	+--|-- bra.s f34e <builtIn_saveCustomData+0xd6>
	trimStack(&fun->stack);
    f2d6:	|  \-> moveq #24,d0
    f2d8:	|      add.l 28(sp),d0
    f2dc:	|      move.l d0,-(sp)
    f2de:	|      jsr 11844 <trimStack>
    f2e4:	|      addq.l #4,sp

	if (fun->stack->thisVar.varType != SVT_STACK) {
    f2e6:	|      movea.l 28(sp),a0
    f2ea:	|      movea.l 24(a0),a0
    f2ee:	|      move.l (a0),d0
    f2f0:	|      moveq #6,d1
    f2f2:	|      cmp.l d0,d1
    f2f4:	|  /-- beq.s f308 <builtIn_saveCustomData+0x90>
		KPrintF("First parameter isn't a stack");
    f2f6:	|  |   pea 16ccf <newfatal.c.307beca7+0x6d>
    f2fc:	|  |   jsr 12f14 <KPrintF>
    f302:	|  |   addq.l #4,sp
		return BR_ERROR;
    f304:	|  |   moveq #1,d0
    f306:	+--|-- bra.s f34e <builtIn_saveCustomData+0xd6>
	}
	if (!stackToFile(fileName, &fun->stack->thisVar)) return BR_ERROR;
    f308:	|  \-> movea.l 28(sp),a0
    f30c:	|      move.l 24(a0),d0
    f310:	|      move.l d0,-(sp)
    f312:	|      move.l 16(sp),-(sp)
    f316:	|      jsr a74e <stackToFile>
    f31c:	|      addq.l #8,sp
    f31e:	|      tst.w d0
    f320:	|  /-- bne.s f326 <builtIn_saveCustomData+0xae>
    f322:	|  |   moveq #1,d0
    f324:	+--|-- bra.s f34e <builtIn_saveCustomData+0xd6>
	trimStack(&fun->stack);
    f326:	|  \-> moveq #24,d0
    f328:	|      add.l 28(sp),d0
    f32c:	|      move.l d0,-(sp)
    f32e:	|      jsr 11844 <trimStack>
    f334:	|      addq.l #4,sp
	FreeVec(fileName);
    f336:	|      move.l 12(sp),4(sp)
    f33c:	|      move.l 19c5e <SysBase>,d0
    f342:	|      movea.l d0,a6
    f344:	|      movea.l 4(sp),a1
    f348:	|      jsr -690(a6)
	return BR_CONTINUE;
    f34c:	|      moveq #2,d0
}
    f34e:	\----> movea.l (sp)+,a6
    f350:	       lea 16(sp),sp
    f354:	       rts

0000f356 <builtIn_loadCustomData>:

builtIn(loadCustomData)
{
    f356:	       lea -28(sp),sp
    f35a:	       move.l a6,-(sp)
	UNUSEDALL

	char * newTextA = getTextFromAnyVar(&(fun->stack->thisVar));
    f35c:	       movea.l 40(sp),a0
    f360:	       move.l 24(a0),d0
    f364:	       move.l d0,-(sp)
    f366:	       jsr 11496 <getTextFromAnyVar>
    f36c:	       addq.l #4,sp
    f36e:	       move.l d0,28(sp)
	if (!newTextA) return BR_ERROR;
    f372:	   /-- bne.s f37a <builtIn_loadCustomData+0x24>
    f374:	   |   moveq #1,d0
    f376:	/--|-- bra.w f476 <builtIn_loadCustomData+0x120>

	char * newText = encodeFilename(newTextA);
    f37a:	|  \-> move.l 28(sp),-(sp)
    f37e:	|      jsr 2fe <encodeFilename>
    f384:	|      addq.l #4,sp
    f386:	|      move.l d0,24(sp)
	FreeVec(newTextA);
    f38a:	|      move.l 28(sp),20(sp)
    f390:	|      move.l 19c5e <SysBase>,d0
    f396:	|      movea.l d0,a6
    f398:	|      movea.l 20(sp),a1
    f39c:	|      jsr -690(a6)

	if (failSecurityCheck(newText)) return BR_ERROR;
    f3a0:	|      move.l 24(sp),-(sp)
    f3a4:	|      jsr aafe <failSecurityCheck>
    f3aa:	|      addq.l #4,sp
    f3ac:	|      tst.w d0
    f3ae:	|  /-- beq.s f3b6 <builtIn_loadCustomData+0x60>
    f3b0:	|  |   moveq #1,d0
    f3b2:	+--|-- bra.w f476 <builtIn_loadCustomData+0x120>
	trimStack(&fun->stack);
    f3b6:	|  \-> moveq #24,d0
    f3b8:	|      add.l 40(sp),d0
    f3bc:	|      move.l d0,-(sp)
    f3be:	|      jsr 11844 <trimStack>
    f3c4:	|      addq.l #4,sp

	unlinkVar(&fun->reg);
    f3c6:	|      moveq #28,d0
    f3c8:	|      add.l 40(sp),d0
    f3cc:	|      move.l d0,-(sp)
    f3ce:	|      jsr 1110e <unlinkVar>
    f3d4:	|      addq.l #4,sp
	fun->reg.varType = SVT_STACK;
    f3d6:	|      movea.l 40(sp),a0
    f3da:	|      moveq #6,d0
    f3dc:	|      move.l d0,28(a0)
	fun->reg.varData.theStack = AllocVec(sizeof(struct stackHandler), MEMF_ANY);
    f3e0:	|      moveq #12,d0
    f3e2:	|      move.l d0,16(sp)
    f3e6:	|      clr.l 12(sp)
    f3ea:	|      move.l 19c5e <SysBase>,d0
    f3f0:	|      movea.l d0,a6
    f3f2:	|      move.l 16(sp),d0
    f3f6:	|      move.l 12(sp),d1
    f3fa:	|      jsr -684(a6)
    f3fe:	|      move.l d0,8(sp)
    f402:	|      move.l 8(sp),d0
    f406:	|      movea.l 40(sp),a0
    f40a:	|      move.l d0,32(a0)
	if (!fun->reg.varData.theStack) return BR_ERROR;
    f40e:	|      movea.l 40(sp),a0
    f412:	|      move.l 32(a0),d0
    f416:	|  /-- bne.s f41c <builtIn_loadCustomData+0xc6>
    f418:	|  |   moveq #1,d0
    f41a:	+--|-- bra.s f476 <builtIn_loadCustomData+0x120>
	fun->reg.varData.theStack->first = NULL;
    f41c:	|  \-> movea.l 40(sp),a0
    f420:	|      movea.l 32(a0),a0
    f424:	|      clr.l (a0)
	fun->reg.varData.theStack->last = NULL;
    f426:	|      movea.l 40(sp),a0
    f42a:	|      movea.l 32(a0),a0
    f42e:	|      clr.l 4(a0)
	fun->reg.varData.theStack->timesUsed = 1;
    f432:	|      movea.l 40(sp),a0
    f436:	|      movea.l 32(a0),a0
    f43a:	|      moveq #1,d0
    f43c:	|      move.l d0,8(a0)
	if (!fileToStack(newText, fun->reg.varData.theStack)) return BR_ERROR;
    f440:	|      movea.l 40(sp),a0
    f444:	|      move.l 32(a0),d0
    f448:	|      move.l d0,-(sp)
    f44a:	|      move.l 28(sp),-(sp)
    f44e:	|      jsr a188 <fileToStack>
    f454:	|      addq.l #8,sp
    f456:	|      tst.w d0
    f458:	|  /-- bne.s f45e <builtIn_loadCustomData+0x108>
    f45a:	|  |   moveq #1,d0
    f45c:	+--|-- bra.s f476 <builtIn_loadCustomData+0x120>
	FreeVec(newText);
    f45e:	|  \-> move.l 24(sp),4(sp)
    f464:	|      move.l 19c5e <SysBase>,d0
    f46a:	|      movea.l d0,a6
    f46c:	|      movea.l 4(sp),a1
    f470:	|      jsr -690(a6)
	return BR_CONTINUE;
    f474:	|      moveq #2,d0
}
    f476:	\----> movea.l (sp)+,a6
    f478:	       lea 28(sp),sp
    f47c:	       rts

0000f47e <builtIn_setCustomEncoding>:

builtIn(setCustomEncoding)
{
    f47e:	       subq.l #4,sp
	UNUSEDALL
	int n;
	if (! getValueType(&n, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f480:	       movea.l 12(sp),a0
    f484:	       move.l 24(a0),d0
    f488:	       move.l d0,-(sp)
    f48a:	       pea 1 <_start+0x1>
    f48e:	       move.l sp,d0
    f490:	       addq.l #8,d0
    f492:	       move.l d0,-(sp)
    f494:	       jsr 10ec0 <getValueType>
    f49a:	       lea 12(sp),sp
    f49e:	       tst.w d0
    f4a0:	   /-- bne.s f4a6 <builtIn_setCustomEncoding+0x28>
    f4a2:	   |   moveq #1,d0
    f4a4:	/--|-- bra.s f4dc <builtIn_setCustomEncoding+0x5e>
	saveEncoding = n;
    f4a6:	|  \-> move.l (sp),d0
    f4a8:	|      move.l d0,d0
    f4aa:	|      move.w d0,19d16 <saveEncoding>
	trimStack (&fun -> stack);
    f4b0:	|      moveq #24,d0
    f4b2:	|      add.l 12(sp),d0
    f4b6:	|      move.l d0,-(sp)
    f4b8:	|      jsr 11844 <trimStack>
    f4be:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
    f4c0:	|      moveq #28,d0
    f4c2:	|      add.l 12(sp),d0
    f4c6:	|      pea 1 <_start+0x1>
    f4ca:	|      pea 1 <_start+0x1>
    f4ce:	|      move.l d0,-(sp)
    f4d0:	|      jsr 117b2 <setVariable>
    f4d6:	|      lea 12(sp),sp
	return BR_CONTINUE;
    f4da:	|      moveq #2,d0
}
    f4dc:	\----> addq.l #4,sp
    f4de:	       rts

0000f4e0 <builtIn_freeSound>:

builtIn(freeSound)
{
    f4e0:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    f4e2:	       movea.l 12(sp),a0
    f4e6:	       move.l 24(a0),d0
    f4ea:	       move.l d0,-(sp)
    f4ec:	       pea 5 <_start+0x5>
    f4f0:	       move.l sp,d0
    f4f2:	       addq.l #8,d0
    f4f4:	       move.l d0,-(sp)
    f4f6:	       jsr 10ec0 <getValueType>
    f4fc:	       lea 12(sp),sp
    f500:	       tst.w d0
    f502:	   /-- bne.s f508 <builtIn_freeSound+0x28>
    f504:	   |   moveq #1,d0
    f506:	/--|-- bra.s f526 <builtIn_freeSound+0x46>
	trimStack (&fun -> stack);
    f508:	|  \-> moveq #24,d0
    f50a:	|      add.l 12(sp),d0
    f50e:	|      move.l d0,-(sp)
    f510:	|      jsr 11844 <trimStack>
    f516:	|      addq.l #4,sp
	huntKillFreeSound (v);
    f518:	|      move.l (sp),d0
    f51a:	|      move.l d0,-(sp)
    f51c:	|      jsr 98f2 <huntKillFreeSound>
    f522:	|      addq.l #4,sp
	return BR_CONTINUE;
    f524:	|      moveq #2,d0
}
    f526:	\----> addq.l #4,sp
    f528:	       rts

0000f52a <builtIn_parallaxAdd>:

builtIn(parallaxAdd)
{
    f52a:	       lea -12(sp),sp
    f52e:	       move.l d2,-(sp)
	/*if (frozenStuff) {
		fatal ("Can't set background parallax image while frozen");
		return BR_ERROR;
	} else { Todo: Amigize this*/
		int wrapX, wrapY, v;
		if (! getValueType(&wrapY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f530:	       movea.l 24(sp),a0
    f534:	       move.l 24(a0),d0
    f538:	       move.l d0,-(sp)
    f53a:	       pea 1 <_start+0x1>
    f53e:	       moveq #16,d0
    f540:	       add.l sp,d0
    f542:	       move.l d0,-(sp)
    f544:	       jsr 10ec0 <getValueType>
    f54a:	       lea 12(sp),sp
    f54e:	       tst.w d0
    f550:	   /-- bne.s f558 <builtIn_parallaxAdd+0x2e>
    f552:	   |   moveq #1,d0
    f554:	/--|-- bra.w f62c <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
    f558:	|  \-> moveq #24,d0
    f55a:	|      add.l 24(sp),d0
    f55e:	|      move.l d0,-(sp)
    f560:	|      jsr 11844 <trimStack>
    f566:	|      addq.l #4,sp
		if (! getValueType(&wrapX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f568:	|      movea.l 24(sp),a0
    f56c:	|      move.l 24(a0),d0
    f570:	|      move.l d0,-(sp)
    f572:	|      pea 1 <_start+0x1>
    f576:	|      moveq #20,d0
    f578:	|      add.l sp,d0
    f57a:	|      move.l d0,-(sp)
    f57c:	|      jsr 10ec0 <getValueType>
    f582:	|      lea 12(sp),sp
    f586:	|      tst.w d0
    f588:	|  /-- bne.s f590 <builtIn_parallaxAdd+0x66>
    f58a:	|  |   moveq #1,d0
    f58c:	+--|-- bra.w f62c <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
    f590:	|  \-> moveq #24,d0
    f592:	|      add.l 24(sp),d0
    f596:	|      move.l d0,-(sp)
    f598:	|      jsr 11844 <trimStack>
    f59e:	|      addq.l #4,sp
		if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    f5a0:	|      movea.l 24(sp),a0
    f5a4:	|      move.l 24(a0),d0
    f5a8:	|      move.l d0,-(sp)
    f5aa:	|      pea 5 <_start+0x5>
    f5ae:	|      lea 12(sp),a0
    f5b2:	|      move.l a0,-(sp)
    f5b4:	|      jsr 10ec0 <getValueType>
    f5ba:	|      lea 12(sp),sp
    f5be:	|      tst.w d0
    f5c0:	|  /-- bne.s f5c6 <builtIn_parallaxAdd+0x9c>
    f5c2:	|  |   moveq #1,d0
    f5c4:	+--|-- bra.s f62c <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
    f5c6:	|  \-> moveq #24,d0
    f5c8:	|      add.l 24(sp),d0
    f5cc:	|      move.l d0,-(sp)
    f5ce:	|      jsr 11844 <trimStack>
    f5d4:	|      addq.l #4,sp

		if (! loadParallax (v, wrapX, wrapY)) return BR_ERROR;
    f5d6:	|      move.l 8(sp),d0
    f5da:	|      move.l d0,d0
    f5dc:	|      moveq #0,d2
    f5de:	|      move.w d0,d2
    f5e0:	|      move.l 12(sp),d0
    f5e4:	|      move.l d0,d0
    f5e6:	|      moveq #0,d1
    f5e8:	|      move.w d0,d1
    f5ea:	|      move.l 4(sp),d0
    f5ee:	|      move.l d0,d0
    f5f0:	|      move.w d0,d0
    f5f2:	|      andi.l #65535,d0
    f5f8:	|      move.l d2,-(sp)
    f5fa:	|      move.l d1,-(sp)
    f5fc:	|      move.l d0,-(sp)
    f5fe:	|      jsr 9b0e <loadParallax>
    f604:	|      lea 12(sp),sp
    f608:	|      tst.w d0
    f60a:	|  /-- bne.s f610 <builtIn_parallaxAdd+0xe6>
    f60c:	|  |   moveq #1,d0
    f60e:	+--|-- bra.s f62c <builtIn_parallaxAdd+0x102>
		setVariable (&fun -> reg, SVT_INT, 1);
    f610:	|  \-> moveq #28,d0
    f612:	|      add.l 24(sp),d0
    f616:	|      pea 1 <_start+0x1>
    f61a:	|      pea 1 <_start+0x1>
    f61e:	|      move.l d0,-(sp)
    f620:	|      jsr 117b2 <setVariable>
    f626:	|      lea 12(sp),sp
	//}
	return BR_CONTINUE;
    f62a:	|      moveq #2,d0
}
    f62c:	\----> move.l (sp)+,d2
    f62e:	       lea 12(sp),sp
    f632:	       rts

0000f634 <builtIn_parallaxClear>:

builtIn(parallaxClear)
{
	UNUSEDALL
	killParallax ();
    f634:	jsr 9a46 <killParallax>
	setVariable (&fun -> reg, SVT_INT, 1);
    f63a:	moveq #28,d0
    f63c:	add.l 8(sp),d0
    f640:	pea 1 <_start+0x1>
    f644:	pea 1 <_start+0x1>
    f648:	move.l d0,-(sp)
    f64a:	jsr 117b2 <setVariable>
    f650:	lea 12(sp),sp
	return BR_CONTINUE;
    f654:	moveq #2,d0
}
    f656:	rts

0000f658 <builtIn_getPixelColour>:
	if (! checkNew (&fun -> reg.varData.theStack)) return BR_ERROR;
	fun -> reg.varData.theStack -> first = NULL;
	fun -> reg.varData.theStack -> last = NULL;
	fun -> reg.varData.theStack -> timesUsed = 1;
	if (! getRGBIntoStack (x, y, &fun -> reg.varData.theStack)) return BR_ERROR; Todo: Amigize this*/
	KPrintF("getPixelColor: Not implemented for Amiga");
    f658:	pea 16ced <newfatal.c.307beca7+0x8b>
    f65e:	jsr 12f14 <KPrintF>
    f664:	addq.l #4,sp

	return BR_CONTINUE;
    f666:	moveq #2,d0
}
    f668:	rts

0000f66a <builtIn_makeFastArray>:

builtIn(makeFastArray)
{
    f66a:	             subq.l #8,sp
	UNUSEDALL
	switch (fun -> stack -> thisVar.varType) {
    f66c:	             movea.l 16(sp),a0
    f670:	             movea.l 24(a0),a0
    f674:	             move.l (a0),d0
    f676:	             moveq #1,d1
    f678:	             cmp.l d0,d1
    f67a:	      /----- beq.s f6c2 <builtIn_makeFastArray+0x58>
    f67c:	      |      moveq #6,d1
    f67e:	      |      cmp.l d0,d1
    f680:	/-----|----- bne.s f700 <builtIn_makeFastArray+0x96>
		case SVT_STACK:
		{
			BOOL success = makeFastArrayFromStack (&fun -> reg, fun -> stack -> thisVar.varData.theStack);
    f682:	|     |      movea.l 16(sp),a0
    f686:	|     |      movea.l 24(a0),a0
    f68a:	|     |      move.l 4(a0),d1
    f68e:	|     |      moveq #28,d0
    f690:	|     |      add.l 16(sp),d0
    f694:	|     |      move.l d1,-(sp)
    f696:	|     |      move.l d0,-(sp)
    f698:	|     |      jsr 10f72 <makeFastArrayFromStack>
    f69e:	|     |      addq.l #8,sp
    f6a0:	|     |      move.w d0,6(sp)
			trimStack (&fun -> stack);
    f6a4:	|     |      moveq #24,d0
    f6a6:	|     |      add.l 16(sp),d0
    f6aa:	|     |      move.l d0,-(sp)
    f6ac:	|     |      jsr 11844 <trimStack>
    f6b2:	|     |      addq.l #4,sp
			return success ? BR_CONTINUE : BR_ERROR;
    f6b4:	|     |      tst.w 6(sp)
    f6b8:	|     |  /-- beq.s f6be <builtIn_makeFastArray+0x54>
    f6ba:	|     |  |   moveq #2,d0
    f6bc:	|  /--|--|-- bra.s f712 <builtIn_makeFastArray+0xa8>
    f6be:	|  |  |  \-> moveq #1,d0
    f6c0:	|  +--|----- bra.s f712 <builtIn_makeFastArray+0xa8>
		}
			break;

		case SVT_INT:
		{
			int i = fun -> stack -> thisVar.varData.intValue;
    f6c2:	|  |  \----> movea.l 16(sp),a0
    f6c6:	|  |         movea.l 24(a0),a0
    f6ca:	|  |         move.l 4(a0),2(sp)
			trimStack (&fun -> stack);
    f6d0:	|  |         moveq #24,d0
    f6d2:	|  |         add.l 16(sp),d0
    f6d6:	|  |         move.l d0,-(sp)
    f6d8:	|  |         jsr 11844 <trimStack>
    f6de:	|  |         addq.l #4,sp
			return makeFastArraySize (&fun -> reg, i) ? BR_CONTINUE : BR_ERROR;
    f6e0:	|  |         moveq #28,d0
    f6e2:	|  |         add.l 16(sp),d0
    f6e6:	|  |         move.l 2(sp),-(sp)
    f6ea:	|  |         move.l d0,-(sp)
    f6ec:	|  |         jsr 10fdc <makeFastArraySize>
    f6f2:	|  |         addq.l #8,sp
    f6f4:	|  |         tst.w d0
    f6f6:	|  |     /-- beq.s f6fc <builtIn_makeFastArray+0x92>
    f6f8:	|  |     |   moveq #2,d0
    f6fa:	|  +-----|-- bra.s f712 <builtIn_makeFastArray+0xa8>
    f6fc:	|  |     \-> moveq #1,d0
    f6fe:	|  +-------- bra.s f712 <builtIn_makeFastArray+0xa8>
		}
			break;

		default:
			break;
    f700:	\--|-------> nop
	}
	KPrintF ("Parameter must be a number or a stack.");
    f702:	   |         pea 16d16 <newfatal.c.307beca7+0xb4>
    f708:	   |         jsr 12f14 <KPrintF>
    f70e:	   |         addq.l #4,sp
	return BR_ERROR;
    f710:	   |         moveq #1,d0
}
    f712:	   \-------> addq.l #8,sp
    f714:	             rts

0000f716 <builtIn_getCharacterScale>:

builtIn(getCharacterScale)
{
    f716:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    f718:	          movea.l 16(sp),a0
    f71c:	          move.l 24(a0),d0
    f720:	          move.l d0,-(sp)
    f722:	          pea 7 <_start+0x7>
    f726:	          move.l sp,d0
    f728:	          addq.l #8,d0
    f72a:	          move.l d0,-(sp)
    f72c:	          jsr 10ec0 <getValueType>
    f732:	          lea 12(sp),sp
    f736:	          tst.w d0
    f738:	      /-- bne.s f73e <builtIn_getCharacterScale+0x28>
    f73a:	      |   moveq #1,d0
    f73c:	/-----|-- bra.s f7b8 <builtIn_getCharacterScale+0xa2>
	trimStack (&fun -> stack);
    f73e:	|     \-> moveq #24,d0
    f740:	|         add.l 16(sp),d0
    f744:	|         move.l d0,-(sp)
    f746:	|         jsr 11844 <trimStack>
    f74c:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
    f74e:	|         move.l (sp),d0
    f750:	|         move.l d0,-(sp)
    f752:	|         jsr 7052 <findPerson>
    f758:	|         addq.l #4,sp
    f75a:	|         move.l d0,4(sp)
	if (pers) {
    f75e:	|  /----- beq.s f79e <builtIn_getCharacterScale+0x88>
		setVariable (&fun -> reg, SVT_INT, pers -> scale * (FLOAT) 100); 
    f760:	|  |      movea.l 4(sp),a0
    f764:	|  |      move.l 20(a0),d0
    f768:	|  |      move.l #1120403456,-(sp)
    f76e:	|  |      move.l d0,-(sp)
    f770:	|  |      jsr 13562 <__mulsf3>
    f776:	|  |      addq.l #8,sp
    f778:	|  |      move.l d0,-(sp)
    f77a:	|  |      jsr 13448 <__fixsfsi>
    f780:	|  |      addq.l #4,sp
    f782:	|  |      move.l d0,d1
    f784:	|  |      moveq #28,d0
    f786:	|  |      add.l 16(sp),d0
    f78a:	|  |      move.l d1,-(sp)
    f78c:	|  |      pea 1 <_start+0x1>
    f790:	|  |      move.l d0,-(sp)
    f792:	|  |      jsr 117b2 <setVariable>
    f798:	|  |      lea 12(sp),sp
    f79c:	|  |  /-- bra.s f7b6 <builtIn_getCharacterScale+0xa0>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
    f79e:	|  \--|-> moveq #28,d0
    f7a0:	|     |   add.l 16(sp),d0
    f7a4:	|     |   clr.l -(sp)
    f7a6:	|     |   pea 1 <_start+0x1>
    f7aa:	|     |   move.l d0,-(sp)
    f7ac:	|     |   jsr 117b2 <setVariable>
    f7b2:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    f7b6:	|     \-> moveq #2,d0
}
    f7b8:	\-------> addq.l #8,sp
    f7ba:	          rts

0000f7bc <builtIn_getLanguageID>:

builtIn(getLanguageID)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, gameSettings.languageID);
    f7bc:	move.l 19d3a <gameSettings>,d0
    f7c2:	move.l d0,d1
    f7c4:	moveq #28,d0
    f7c6:	add.l 8(sp),d0
    f7ca:	move.l d1,-(sp)
    f7cc:	pea 1 <_start+0x1>
    f7d0:	move.l d0,-(sp)
    f7d2:	jsr 117b2 <setVariable>
    f7d8:	lea 12(sp),sp
	return BR_CONTINUE;
    f7dc:	moveq #2,d0
}
    f7de:	rts

0000f7e0 <builtIn__rem_launchWith>:
// Removed function
builtIn(_rem_launchWith)
{
	UNUSEDALL

	trimStack (&fun -> stack);
    f7e0:	moveq #24,d0
    f7e2:	add.l 8(sp),d0
    f7e6:	move.l d0,-(sp)
    f7e8:	jsr 11844 <trimStack>
    f7ee:	addq.l #4,sp
	trimStack (&fun -> stack);
    f7f0:	moveq #24,d0
    f7f2:	add.l 8(sp),d0
    f7f6:	move.l d0,-(sp)
    f7f8:	jsr 11844 <trimStack>
    f7fe:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, FALSE);
    f800:	moveq #28,d0
    f802:	add.l 8(sp),d0
    f806:	clr.l -(sp)
    f808:	pea 1 <_start+0x1>
    f80c:	move.l d0,-(sp)
    f80e:	jsr 117b2 <setVariable>
    f814:	lea 12(sp),sp

	return BR_CONTINUE;
    f818:	moveq #2,d0

}
    f81a:	rts

0000f81c <builtIn_getFramesPerSecond>:

builtIn(getFramesPerSecond)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, lastFramesPerSecond);
    f81c:	move.l 18124 <lastFramesPerSecond>,d1
    f822:	moveq #28,d0
    f824:	add.l 8(sp),d0
    f828:	move.l d1,-(sp)
    f82a:	pea 1 <_start+0x1>
    f82e:	move.l d0,-(sp)
    f830:	jsr 117b2 <setVariable>
    f836:	lea 12(sp),sp
	return BR_CONTINUE;
    f83a:	moveq #2,d0
}
    f83c:	rts

0000f83e <builtIn_showThumbnail>:
	//				deb ("aaaaa is still ", aaaaa);
	delete[] aaaaa;
	//				deb ("Deleted", "aaaaa");
	showThumbnail (file, x, y);
	delete[] file; Todo Amigize this?*/
	return BR_CONTINUE;
    f83e:	moveq #2,d0
}
    f840:	rts

0000f842 <builtIn_setThumbnailSize>:

builtIn(setThumbnailSize)
{
    f842:	          lea -52(sp),sp
	UNUSEDALL
	if (! getValueType(&thumbHeight, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f846:	          movea.l 60(sp),a0
    f84a:	          move.l 24(a0),d0
    f84e:	          move.l d0,-(sp)
    f850:	          pea 1 <_start+0x1>
    f854:	          pea 19b3c <thumbHeight>
    f85a:	          jsr 10ec0 <getValueType>
    f860:	          lea 12(sp),sp
    f864:	          tst.w d0
    f866:	      /-- bne.s f86e <builtIn_setThumbnailSize+0x2c>
    f868:	      |   moveq #1,d0
    f86a:	/-----|-- bra.w f92a <builtIn_setThumbnailSize+0xe8>
	trimStack (&fun -> stack);
    f86e:	|     \-> moveq #24,d0
    f870:	|         add.l 60(sp),d0
    f874:	|         move.l d0,-(sp)
    f876:	|         jsr 11844 <trimStack>
    f87c:	|         addq.l #4,sp
	if (! getValueType(&thumbWidth, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f87e:	|         movea.l 60(sp),a0
    f882:	|         move.l 24(a0),d0
    f886:	|         move.l d0,-(sp)
    f888:	|         pea 1 <_start+0x1>
    f88c:	|         pea 19b38 <thumbWidth>
    f892:	|         jsr 10ec0 <getValueType>
    f898:	|         lea 12(sp),sp
    f89c:	|         tst.w d0
    f89e:	|     /-- bne.s f8a6 <builtIn_setThumbnailSize+0x64>
    f8a0:	|     |   moveq #1,d0
    f8a2:	+-----|-- bra.w f92a <builtIn_setThumbnailSize+0xe8>
	trimStack (&fun -> stack);
    f8a6:	|     \-> moveq #24,d0
    f8a8:	|         add.l 60(sp),d0
    f8ac:	|         move.l d0,-(sp)
    f8ae:	|         jsr 11844 <trimStack>
    f8b4:	|         addq.l #4,sp
	if (thumbWidth < 0 || thumbHeight < 0 || (unsigned int) thumbWidth > winWidth || (unsigned int) thumbHeight > winHeight) {
    f8b6:	|         move.l 19b38 <thumbWidth>,d0
    f8bc:	|     /-- bmi.s f8ea <builtIn_setThumbnailSize+0xa8>
    f8be:	|     |   move.l 19b3c <thumbHeight>,d0
    f8c4:	|     +-- bmi.s f8ea <builtIn_setThumbnailSize+0xa8>
    f8c6:	|     |   move.l 19b38 <thumbWidth>,d0
    f8cc:	|     |   move.l d0,d1
    f8ce:	|     |   move.l 19b5e <winWidth>,d0
    f8d4:	|     |   cmp.l d1,d0
    f8d6:	|     +-- bcs.s f8ea <builtIn_setThumbnailSize+0xa8>
    f8d8:	|     |   move.l 19b3c <thumbHeight>,d0
    f8de:	|     |   move.l d0,d1
    f8e0:	|     |   move.l 19b62 <winHeight>,d0
    f8e6:	|     |   cmp.l d1,d0
    f8e8:	|  /--|-- bcc.s f928 <builtIn_setThumbnailSize+0xe6>
		char buff[50];
		sprintf (buff, "%d x %d", thumbWidth, thumbHeight);
    f8ea:	|  |  \-> move.l 19b3c <thumbHeight>,d1
    f8f0:	|  |      move.l 19b38 <thumbWidth>,d0
    f8f6:	|  |      move.l d1,-(sp)
    f8f8:	|  |      move.l d0,-(sp)
    f8fa:	|  |      pea 16d3d <newfatal.c.307beca7+0xdb>
    f900:	|  |      lea 14(sp),a0
    f904:	|  |      move.l a0,-(sp)
    f906:	|  |      jsr 106ca <sprintf>
    f90c:	|  |      lea 16(sp),sp
		KPrintF ("Invalid thumbnail size", buff);
    f910:	|  |      lea 2(sp),a0
    f914:	|  |      move.l a0,-(sp)
    f916:	|  |      pea 16d45 <newfatal.c.307beca7+0xe3>
    f91c:	|  |      jsr 12f14 <KPrintF>
    f922:	|  |      addq.l #8,sp
		return BR_ERROR;
    f924:	|  |      moveq #1,d0
    f926:	+--|----- bra.s f92a <builtIn_setThumbnailSize+0xe8>
	}
	return BR_CONTINUE;
    f928:	|  \----> moveq #2,d0
}
    f92a:	\-------> lea 52(sp),sp
    f92e:	          rts

0000f930 <builtIn_hasFlag>:

builtIn(hasFlag)
{
    f930:	       lea -12(sp),sp
    f934:	       move.l d2,-(sp)
	UNUSEDALL
	int objNum, flagIndex;
	if (! getValueType(&flagIndex, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f936:	       movea.l 24(sp),a0
    f93a:	       move.l 24(a0),d0
    f93e:	       move.l d0,-(sp)
    f940:	       pea 1 <_start+0x1>
    f944:	       lea 12(sp),a0
    f948:	       move.l a0,-(sp)
    f94a:	       jsr 10ec0 <getValueType>
    f950:	       lea 12(sp),sp
    f954:	       tst.w d0
    f956:	   /-- bne.s f95e <builtIn_hasFlag+0x2e>
    f958:	   |   moveq #1,d0
    f95a:	/--|-- bra.w f9ee <builtIn_hasFlag+0xbe>
	trimStack (&fun -> stack);
    f95e:	|  \-> moveq #24,d0
    f960:	|      add.l 24(sp),d0
    f964:	|      move.l d0,-(sp)
    f966:	|      jsr 11844 <trimStack>
    f96c:	|      addq.l #4,sp
	if (! getValueType(&objNum, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    f96e:	|      movea.l 24(sp),a0
    f972:	|      move.l 24(a0),d0
    f976:	|      move.l d0,-(sp)
    f978:	|      pea 7 <_start+0x7>
    f97c:	|      moveq #16,d0
    f97e:	|      add.l sp,d0
    f980:	|      move.l d0,-(sp)
    f982:	|      jsr 10ec0 <getValueType>
    f988:	|      lea 12(sp),sp
    f98c:	|      tst.w d0
    f98e:	|  /-- bne.s f994 <builtIn_hasFlag+0x64>
    f990:	|  |   moveq #1,d0
    f992:	+--|-- bra.s f9ee <builtIn_hasFlag+0xbe>
	trimStack (&fun -> stack);
    f994:	|  \-> moveq #24,d0
    f996:	|      add.l 24(sp),d0
    f99a:	|      move.l d0,-(sp)
    f99c:	|      jsr 11844 <trimStack>
    f9a2:	|      addq.l #4,sp
	struct objectType * objT = findObjectType (objNum);
    f9a4:	|      move.l 8(sp),d0
    f9a8:	|      move.l d0,-(sp)
    f9aa:	|      jsr 9d12 <findObjectType>
    f9b0:	|      addq.l #4,sp
    f9b2:	|      move.l d0,12(sp)
	if (! objT) return BR_ERROR;
    f9b6:	|  /-- bne.s f9bc <builtIn_hasFlag+0x8c>
    f9b8:	|  |   moveq #1,d0
    f9ba:	+--|-- bra.s f9ee <builtIn_hasFlag+0xbe>
	setVariable (&fun -> reg, SVT_INT, objT->flags & (1 << flagIndex));
    f9bc:	|  \-> movea.l 12(sp),a0
    f9c0:	|      move.w 36(a0),d0
    f9c4:	|      moveq #0,d2
    f9c6:	|      move.w d0,d2
    f9c8:	|      move.l 4(sp),d1
    f9cc:	|      moveq #1,d0
    f9ce:	|      lsl.l d1,d0
    f9d0:	|      move.l d2,d1
    f9d2:	|      and.l d0,d1
    f9d4:	|      moveq #28,d0
    f9d6:	|      add.l 24(sp),d0
    f9da:	|      move.l d1,-(sp)
    f9dc:	|      pea 1 <_start+0x1>
    f9e0:	|      move.l d0,-(sp)
    f9e2:	|      jsr 117b2 <setVariable>
    f9e8:	|      lea 12(sp),sp
	return BR_CONTINUE;
    f9ec:	|      moveq #2,d0
}
    f9ee:	\----> move.l (sp)+,d2
    f9f0:	       lea 12(sp),sp
    f9f4:	       rts

0000f9f6 <builtIn_snapshotGrab>:

builtIn(snapshotGrab)
{
	UNUSEDALL
	return snapshot () ? BR_CONTINUE : BR_ERROR;
    f9f6:	       jsr 9d00 <snapshot>
    f9fc:	       tst.w d0
    f9fe:	/----- beq.s fa04 <builtIn_snapshotGrab+0xe>
    fa00:	|      moveq #2,d0
    fa02:	|  /-- bra.s fa06 <builtIn_snapshotGrab+0x10>
    fa04:	\--|-> moveq #1,d0
}
    fa06:	   \-> rts

0000fa08 <builtIn_snapshotClear>:

builtIn(snapshotClear)
{
	UNUSEDALL
	nosnapshot ();
    fa08:	jsr 9b54 <nosnapshot>
	return BR_CONTINUE;
    fa0e:	moveq #2,d0
}
    fa10:	rts

0000fa12 <builtIn_bodgeFilenames>:

builtIn(bodgeFilenames)
{
    fa12:	subq.l #4,sp
	UNUSEDALL
	BOOL lastValue = allowAnyFilename;
    fa14:	move.w 18000 <allowAnyFilename>,2(sp)
	allowAnyFilename = getBoolean(&(fun -> stack -> thisVar));
    fa1c:	movea.l 12(sp),a0
    fa20:	move.l 24(a0),d0
    fa24:	move.l d0,-(sp)
    fa26:	jsr 11400 <getBoolean>
    fa2c:	addq.l #4,sp
    fa2e:	move.w d0,18000 <allowAnyFilename>
	trimStack (&fun -> stack);
    fa34:	moveq #24,d0
    fa36:	add.l 12(sp),d0
    fa3a:	move.l d0,-(sp)
    fa3c:	jsr 11844 <trimStack>
    fa42:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, lastValue);
    fa44:	movea.w 2(sp),a0
    fa48:	moveq #28,d0
    fa4a:	add.l 12(sp),d0
    fa4e:	move.l a0,-(sp)
    fa50:	pea 1 <_start+0x1>
    fa54:	move.l d0,-(sp)
    fa56:	jsr 117b2 <setVariable>
    fa5c:	lea 12(sp),sp
	return BR_CONTINUE;
    fa60:	moveq #2,d0
}
    fa62:	addq.l #4,sp
    fa64:	rts

0000fa66 <builtIn__rem_registryGetString>:

// Deprecated - does nothing.
builtIn(_rem_registryGetString)
{
	UNUSEDALL
	trimStack (&fun -> stack);
    fa66:	moveq #24,d0
    fa68:	add.l 8(sp),d0
    fa6c:	move.l d0,-(sp)
    fa6e:	jsr 11844 <trimStack>
    fa74:	addq.l #4,sp
	trimStack (&fun -> stack);
    fa76:	moveq #24,d0
    fa78:	add.l 8(sp),d0
    fa7c:	move.l d0,-(sp)
    fa7e:	jsr 11844 <trimStack>
    fa84:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 0);
    fa86:	moveq #28,d0
    fa88:	add.l 8(sp),d0
    fa8c:	clr.l -(sp)
    fa8e:	pea 1 <_start+0x1>
    fa92:	move.l d0,-(sp)
    fa94:	jsr 117b2 <setVariable>
    fa9a:	lea 12(sp),sp

	return BR_CONTINUE;
    fa9e:	moveq #2,d0
}
    faa0:	rts

0000faa2 <builtIn_quitWithFatalError>:

builtIn(quitWithFatalError)
{
    faa2:	subq.l #4,sp
	UNUSEDALL
	char * mess = getTextFromAnyVar(&(fun -> stack -> thisVar));
    faa4:	movea.l 12(sp),a0
    faa8:	move.l 24(a0),d0
    faac:	move.l d0,-(sp)
    faae:	jsr 11496 <getTextFromAnyVar>
    fab4:	addq.l #4,sp
    fab6:	move.l d0,(sp)
	trimStack (&fun -> stack);
    fab8:	moveq #24,d0
    faba:	add.l 12(sp),d0
    fabe:	move.l d0,-(sp)
    fac0:	jsr 11844 <trimStack>
    fac6:	addq.l #4,sp
	KPrintF (mess);
    fac8:	move.l (sp),-(sp)
    faca:	jsr 12f14 <KPrintF>
    fad0:	addq.l #4,sp
	return BR_ERROR;
    fad2:	moveq #1,d0
}
    fad4:	addq.l #4,sp
    fad6:	rts

0000fad8 <builtIn__rem_setCharacterAA>:

builtIn(_rem_setCharacterAA)
{
	UNUSEDALL

	trimStack (&fun -> stack);
    fad8:	moveq #24,d0
    fada:	add.l 8(sp),d0
    fade:	move.l d0,-(sp)
    fae0:	jsr 11844 <trimStack>
    fae6:	addq.l #4,sp
	trimStack (&fun -> stack);
    fae8:	moveq #24,d0
    faea:	add.l 8(sp),d0
    faee:	move.l d0,-(sp)
    faf0:	jsr 11844 <trimStack>
    faf6:	addq.l #4,sp
	trimStack (&fun -> stack);
    faf8:	moveq #24,d0
    fafa:	add.l 8(sp),d0
    fafe:	move.l d0,-(sp)
    fb00:	jsr 11844 <trimStack>
    fb06:	addq.l #4,sp
	trimStack (&fun -> stack);
    fb08:	moveq #24,d0
    fb0a:	add.l 8(sp),d0
    fb0e:	move.l d0,-(sp)
    fb10:	jsr 11844 <trimStack>
    fb16:	addq.l #4,sp

	return BR_CONTINUE;
    fb18:	moveq #2,d0
}
    fb1a:	rts

0000fb1c <builtIn__rem_setMaximumAA>:

builtIn(_rem_setMaximumAA)
{
	UNUSEDALL

	trimStack (&fun -> stack);
    fb1c:	moveq #24,d0
    fb1e:	add.l 8(sp),d0
    fb22:	move.l d0,-(sp)
    fb24:	jsr 11844 <trimStack>
    fb2a:	addq.l #4,sp
	trimStack (&fun -> stack);
    fb2c:	moveq #24,d0
    fb2e:	add.l 8(sp),d0
    fb32:	move.l d0,-(sp)
    fb34:	jsr 11844 <trimStack>
    fb3a:	addq.l #4,sp
	trimStack (&fun -> stack);
    fb3c:	moveq #24,d0
    fb3e:	add.l 8(sp),d0
    fb42:	move.l d0,-(sp)
    fb44:	jsr 11844 <trimStack>
    fb4a:	addq.l #4,sp

	return BR_CONTINUE;
    fb4c:	moveq #2,d0

}
    fb4e:	rts

0000fb50 <builtIn_setBackgroundEffect>:

builtIn(setBackgroundEffect)
{
    fb50:	subq.l #4,sp
	UNUSEDALL
	BOOL done = TRUE;
    fb52:	move.w #1,2(sp)
	//BOOL done = blur_createSettings(numParams, fun->stack); Amiga Todo: Amigize?
	setVariable (&fun -> reg, SVT_INT, done ? 1 : 0);
    fb58:	sne d0
    fb5a:	neg.b d0
    fb5c:	moveq #0,d1
    fb5e:	move.b d0,d1
    fb60:	moveq #28,d0
    fb62:	add.l 12(sp),d0
    fb66:	move.l d1,-(sp)
    fb68:	pea 1 <_start+0x1>
    fb6c:	move.l d0,-(sp)
    fb6e:	jsr 117b2 <setVariable>
    fb74:	lea 12(sp),sp
	return BR_CONTINUE;
    fb78:	moveq #2,d0
}
    fb7a:	addq.l #4,sp
    fb7c:	rts

0000fb7e <builtIn_doBackgroundEffect>:

builtIn(doBackgroundEffect)
{
    fb7e:	subq.l #4,sp
	UNUSEDALL
	//BOOL done = blurScreen ();
	BOOL done = TRUE;
    fb80:	move.w #1,2(sp)
	KPrintF("doBackgroundEffect: Function not implemented on Amiga");
    fb86:	pea 16d5c <newfatal.c.307beca7+0xfa>
    fb8c:	jsr 12f14 <KPrintF>
    fb92:	addq.l #4,sp
	//Amiga Todo: Amigize this
	setVariable (&fun -> reg, SVT_INT, done ? 1 : 0);
    fb94:	tst.w 2(sp)
    fb98:	sne d0
    fb9a:	neg.b d0
    fb9c:	moveq #0,d1
    fb9e:	move.b d0,d1
    fba0:	moveq #28,d0
    fba2:	add.l 12(sp),d0
    fba6:	move.l d1,-(sp)
    fba8:	pea 1 <_start+0x1>
    fbac:	move.l d0,-(sp)
    fbae:	jsr 117b2 <setVariable>
    fbb4:	lea 12(sp),sp
	return BR_CONTINUE;
    fbb8:	moveq #2,d0
}
    fbba:	addq.l #4,sp
    fbbc:	rts

0000fbbe <callBuiltIn>:
#undef FUNC

#define NUM_FUNCS			(sizeof (builtInFunctionArray) / sizeof (builtInFunctionArray[0]))


enum builtReturn callBuiltIn (int whichFunc, int numParams, struct loadedFunction * fun) {
    fbbe:	             lea -100(sp),sp
   // fprintf (stderr, "Calling function %d: %s\n", whichFunc, builtInFunctionNames[whichFunc]);    fflush (stderr);

	if ((unsigned int)whichFunc < NUM_FUNCS) {
    fbc2:	             move.l 104(sp),d0
    fbc6:	             cmpi.l #166,d0
    fbcc:	/----------- bhi.w fcae <callBuiltIn+0xf0>
		if (paramNum[whichFunc] != -1) {
    fbd0:	|            move.l 104(sp),d0
    fbd4:	|            add.l d0,d0
    fbd6:	|            movea.l d0,a1
    fbd8:	|            adda.l d0,a1
    fbda:	|            lea 1814e <paramNum>,a0
    fbe0:	|            move.l (0,a1,a0.l),d0
    fbe4:	|            moveq #-1,d1
    fbe6:	|            cmp.l d0,d1
    fbe8:	|  /-------- beq.w fc76 <callBuiltIn+0xb8>
			if (paramNum[whichFunc] != numParams) {
    fbec:	|  |         move.l 104(sp),d0
    fbf0:	|  |         add.l d0,d0
    fbf2:	|  |         movea.l d0,a1
    fbf4:	|  |         adda.l d0,a1
    fbf6:	|  |         lea 1814e <paramNum>,a0
    fbfc:	|  |         move.l (0,a1,a0.l),d0
    fc00:	|  |         cmp.l 108(sp),d0
    fc04:	|  +-------- beq.s fc76 <callBuiltIn+0xb8>
				char buff[100];
				sprintf (buff, "Built in function must have %i parameter%s",
						 paramNum[whichFunc],
						 (paramNum[whichFunc] == 1) ? "" : "s");
    fc06:	|  |         move.l 104(sp),d0
    fc0a:	|  |         add.l d0,d0
    fc0c:	|  |         movea.l d0,a1
    fc0e:	|  |         adda.l d0,a1
    fc10:	|  |         lea 1814e <paramNum>,a0
    fc16:	|  |         move.l (0,a1,a0.l),d0
				sprintf (buff, "Built in function must have %i parameter%s",
    fc1a:	|  |         moveq #1,d1
    fc1c:	|  |         cmp.l d0,d1
    fc1e:	|  |  /----- bne.s fc28 <callBuiltIn+0x6a>
    fc20:	|  |  |      move.l #82813,d0
    fc26:	|  |  |  /-- bra.s fc2e <callBuiltIn+0x70>
    fc28:	|  |  \--|-> move.l #93586,d0
    fc2e:	|  |     \-> move.l 104(sp),d1
    fc32:	|  |         add.l d1,d1
    fc34:	|  |         movea.l d1,a1
    fc36:	|  |         adda.l d1,a1
    fc38:	|  |         lea 1814e <paramNum>,a0
    fc3e:	|  |         move.l (0,a1,a0.l),d1
    fc42:	|  |         move.l d0,-(sp)
    fc44:	|  |         move.l d1,-(sp)
    fc46:	|  |         pea 16d94 <newfatal.c.307beca7+0x132>
    fc4c:	|  |         lea 12(sp),a0
    fc50:	|  |         move.l a0,-(sp)
    fc52:	|  |         jsr 106ca <sprintf>
    fc58:	|  |         lea 16(sp),sp

				KPrintF(copyString (buff));
    fc5c:	|  |         movea.l sp,a0
    fc5e:	|  |         move.l a0,-(sp)
    fc60:	|  |         jsr b8 <copyString>
    fc66:	|  |         addq.l #4,sp
    fc68:	|  |         move.l d0,-(sp)
    fc6a:	|  |         jsr 12f14 <KPrintF>
    fc70:	|  |         addq.l #4,sp
				return BR_ERROR;
    fc72:	|  |         moveq #1,d0
    fc74:	|  |     /-- bra.s fcbe <callBuiltIn+0x100>
			}
		}

		if (builtInFunctionArray[whichFunc].func)
    fc76:	|  \-----|-> move.l 104(sp),d0
    fc7a:	|        |   add.l d0,d0
    fc7c:	|        |   movea.l d0,a1
    fc7e:	|        |   adda.l d0,a1
    fc80:	|        |   lea 183ea <builtInFunctionArray>,a0
    fc86:	|        |   move.l (0,a1,a0.l),d0
    fc8a:	+--------|-- beq.s fcae <callBuiltIn+0xf0>
		{
			//fprintf (stderr, "Calling %i: %s\n", whichFunc, builtInFunctionNames[whichFunc]);
			return builtInFunctionArray[whichFunc].func (numParams, fun);
    fc8c:	|        |   move.l 104(sp),d0
    fc90:	|        |   add.l d0,d0
    fc92:	|        |   movea.l d0,a1
    fc94:	|        |   adda.l d0,a1
    fc96:	|        |   lea 183ea <builtInFunctionArray>,a0
    fc9c:	|        |   movea.l (0,a1,a0.l),a0
    fca0:	|        |   move.l 112(sp),-(sp)
    fca4:	|        |   move.l 112(sp),-(sp)
    fca8:	|        |   jsr (a0)
    fcaa:	|        |   addq.l #8,sp
    fcac:	|        +-- bra.s fcbe <callBuiltIn+0x100>
		}
	}

	KPrintF("Unknown / unimplemented built-in function.");
    fcae:	\--------|-> pea 16dbf <newfatal.c.307beca7+0x15d>
    fcb4:	         |   jsr 12f14 <KPrintF>
    fcba:	         |   addq.l #4,sp
	return BR_ERROR;
    fcbc:	         |   moveq #1,d0
}
    fcbe:	         \-> lea 100(sp),sp
    fcc2:	             rts

0000fcc4 <getLanguageForFileB>:
int *languageTable;
char **languageName;
struct settingsStruct gameSettings;

int getLanguageForFileB ()
{
    fcc4:	          subq.l #8,sp
	int indexNum = -1;
    fcc6:	          moveq #-1,d0
    fcc8:	          move.l d0,4(sp)

	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
    fccc:	          clr.l (sp)
    fcce:	   /----- bra.s fcf4 <getLanguageForFileB+0x30>
		if ((unsigned int) languageTable[i] == gameSettings.languageID) indexNum = i;
    fcd0:	/--|----> move.l 19d32 <languageTable>,d1
    fcd6:	|  |      move.l (sp),d0
    fcd8:	|  |      add.l d0,d0
    fcda:	|  |      add.l d0,d0
    fcdc:	|  |      movea.l d1,a0
    fcde:	|  |      adda.l d0,a0
    fce0:	|  |      move.l (a0),d0
    fce2:	|  |      move.l d0,d1
    fce4:	|  |      move.l 19d3a <gameSettings>,d0
    fcea:	|  |      cmp.l d1,d0
    fcec:	|  |  /-- bne.s fcf2 <getLanguageForFileB+0x2e>
    fcee:	|  |  |   move.l (sp),4(sp)
	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
    fcf2:	|  |  \-> addq.l #1,(sp)
    fcf4:	|  \----> move.l 19d3e <gameSettings+0x4>,d0
    fcfa:	|         cmp.l (sp),d0
    fcfc:	\-------- bcc.s fcd0 <getLanguageForFileB+0xc>
	}

	return indexNum;
    fcfe:	          move.l 4(sp),d0
}
    fd02:	          addq.l #8,sp
    fd04:	          rts

0000fd06 <getPrefsFilename>:

char * getPrefsFilename (char * filename) {
    fd06:	          lea -20(sp),sp
    fd0a:	          move.l a6,-(sp)
	// Yes, this trashes the original string, but
	// we also free it at the end (warning!)...

	int n, i;

	n = strlen (filename);
    fd0c:	          move.l 28(sp),-(sp)
    fd10:	          jsr 103ac <strlen>
    fd16:	          addq.l #4,sp
    fd18:	          move.l d0,12(sp)


	if (n > 4 && filename[n-4] == '.') {
    fd1c:	          moveq #4,d0
    fd1e:	          cmp.l 12(sp),d0
    fd22:	      /-- bge.s fd46 <getPrefsFilename+0x40>
    fd24:	      |   move.l 12(sp),d0
    fd28:	      |   subq.l #4,d0
    fd2a:	      |   movea.l 28(sp),a0
    fd2e:	      |   adda.l d0,a0
    fd30:	      |   move.b (a0),d0
    fd32:	      |   cmpi.b #46,d0
    fd36:	      +-- bne.s fd46 <getPrefsFilename+0x40>
		filename[n-4] = 0;
    fd38:	      |   move.l 12(sp),d0
    fd3c:	      |   subq.l #4,d0
    fd3e:	      |   movea.l 28(sp),a0
    fd42:	      |   adda.l d0,a0
    fd44:	      |   clr.b (a0)
	}

	char * f = filename;
    fd46:	      \-> move.l 28(sp),16(sp)
	for (i = 0; i<n; i++) {
    fd4c:	          clr.l 20(sp)
    fd50:	   /----- bra.s fd78 <getPrefsFilename+0x72>
		if (filename[i] == '/') f = filename + i + 1;
    fd52:	/--|----> move.l 20(sp),d0
    fd56:	|  |      movea.l 28(sp),a0
    fd5a:	|  |      adda.l d0,a0
    fd5c:	|  |      move.b (a0),d0
    fd5e:	|  |      cmpi.b #47,d0
    fd62:	|  |  /-- bne.s fd74 <getPrefsFilename+0x6e>
    fd64:	|  |  |   move.l 20(sp),d0
    fd68:	|  |  |   addq.l #1,d0
    fd6a:	|  |  |   move.l 28(sp),d1
    fd6e:	|  |  |   add.l d0,d1
    fd70:	|  |  |   move.l d1,16(sp)
	for (i = 0; i<n; i++) {
    fd74:	|  |  \-> addq.l #1,20(sp)
    fd78:	|  \----> move.l 20(sp),d0
    fd7c:	|         cmp.l 12(sp),d0
    fd80:	\-------- blt.s fd52 <getPrefsFilename+0x4c>
	}

	char * joined = joinStrings (f, ".ini");
    fd82:	          pea 16dea <newfatal.c.307beca7+0x188>
    fd88:	          move.l 20(sp),-(sp)
    fd8c:	          jsr 103ec <joinStrings>
    fd92:	          addq.l #8,sp
    fd94:	          move.l d0,8(sp)

	FreeVec(filename);
    fd98:	          move.l 28(sp),4(sp)
    fd9e:	          move.l 19c5e <SysBase>,d0
    fda4:	          movea.l d0,a6
    fda6:	          movea.l 4(sp),a1
    fdaa:	          jsr -690(a6)
	filename = NULL;
    fdae:	          clr.l 28(sp)
	return joined;
    fdb2:	          move.l 8(sp),d0
}
    fdb6:	          movea.l (sp)+,a6
    fdb8:	          lea 20(sp),sp
    fdbc:	          rts

0000fdbe <makeLanguageTable>:

void makeLanguageTable (BPTR table)
{
    fdbe:	             lea -28(sp),sp
    fdc2:	             move.l a6,-(sp)
    fdc4:	             move.l a2,-(sp)
	languageTable = AllocVec(gameSettings.numLanguages + 1,MEMF_ANY);
    fdc6:	             move.l 19d3e <gameSettings+0x4>,d0
    fdcc:	             move.l d0,d1
    fdce:	             addq.l #1,d1
    fdd0:	             move.l d1,28(sp)
    fdd4:	             clr.l 24(sp)
    fdd8:	             move.l 19c5e <SysBase>,d0
    fdde:	             movea.l d0,a6
    fde0:	             move.l 28(sp),d0
    fde4:	             move.l 24(sp),d1
    fde8:	             jsr -684(a6)
    fdec:	             move.l d0,20(sp)
    fdf0:	             move.l 20(sp),d0
    fdf4:	             move.l d0,19d32 <languageTable>
    if( languageTable == 0) {
    fdfa:	             move.l 19d32 <languageTable>,d0
    fe00:	         /-- bne.s fe10 <makeLanguageTable+0x52>
        KPrintF("makeLanguageTable: Cannot Alloc Mem for languageTable");
    fe02:	         |   pea 16def <newfatal.c.307beca7+0x18d>
    fe08:	         |   jsr 12f14 <KPrintF>
    fe0e:	         |   addq.l #4,sp
    }

	languageName = AllocVec(gameSettings.numLanguages + 1,MEMF_ANY);
    fe10:	         \-> move.l 19d3e <gameSettings+0x4>,d0
    fe16:	             move.l d0,d1
    fe18:	             addq.l #1,d1
    fe1a:	             move.l d1,16(sp)
    fe1e:	             clr.l 12(sp)
    fe22:	             move.l 19c5e <SysBase>,d0
    fe28:	             movea.l d0,a6
    fe2a:	             move.l 16(sp),d0
    fe2e:	             move.l 12(sp),d1
    fe32:	             jsr -684(a6)
    fe36:	             move.l d0,8(sp)
    fe3a:	             move.l 8(sp),d0
    fe3e:	             move.l d0,19d36 <languageName>
	if( languageName == 0) {
    fe44:	             move.l 19d36 <languageName>,d0
    fe4a:	         /-- bne.s fe5a <makeLanguageTable+0x9c>
        KPrintF("makeLanguageName: Cannot Alloc Mem for languageName");
    fe4c:	         |   pea 16e25 <newfatal.c.307beca7+0x1c3>
    fe52:	         |   jsr 12f14 <KPrintF>
    fe58:	         |   addq.l #4,sp
    }

	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
    fe5a:	         \-> clr.l 32(sp)
    fe5e:	   /-------- bra.s fed6 <makeLanguageTable+0x118>
		languageTable[i] = i ? get2bytes (table) : 0;
    fe60:	/--|-------> tst.l 32(sp)
    fe64:	|  |  /----- beq.s fe74 <makeLanguageTable+0xb6>
    fe66:	|  |  |      move.l 40(sp),-(sp)
    fe6a:	|  |  |      jsr 6bc <get2bytes>
    fe70:	|  |  |      addq.l #4,sp
    fe72:	|  |  |  /-- bra.s fe76 <makeLanguageTable+0xb8>
    fe74:	|  |  \--|-> moveq #0,d0
    fe76:	|  |     \-> movea.l 19d32 <languageTable>,a0
    fe7c:	|  |         move.l 32(sp),d1
    fe80:	|  |         add.l d1,d1
    fe82:	|  |         add.l d1,d1
    fe84:	|  |         adda.l d1,a0
    fe86:	|  |         move.l d0,(a0)
		languageName[i] = 0;
    fe88:	|  |         move.l 19d36 <languageName>,d1
    fe8e:	|  |         move.l 32(sp),d0
    fe92:	|  |         add.l d0,d0
    fe94:	|  |         add.l d0,d0
    fe96:	|  |         movea.l d1,a0
    fe98:	|  |         adda.l d0,a0
    fe9a:	|  |         clr.l (a0)
		if (gameVersion >= VERSION(2,0)) {
    fe9c:	|  |         move.l 19c0c <gameVersion>,d0
    fea2:	|  |         cmpi.l #511,d0
    fea8:	|  |     /-- ble.s fed2 <makeLanguageTable+0x114>
			if (gameSettings.numLanguages)
    feaa:	|  |     |   move.l 19d3e <gameSettings+0x4>,d0
    feb0:	|  |     +-- beq.s fed2 <makeLanguageTable+0x114>
				languageName[i] = readString (table);
    feb2:	|  |     |   move.l 19d36 <languageName>,d1
    feb8:	|  |     |   move.l 32(sp),d0
    febc:	|  |     |   add.l d0,d0
    febe:	|  |     |   add.l d0,d0
    fec0:	|  |     |   movea.l d1,a2
    fec2:	|  |     |   adda.l d0,a2
    fec4:	|  |     |   move.l 40(sp),-(sp)
    fec8:	|  |     |   jsr b02 <readString>
    fece:	|  |     |   addq.l #4,sp
    fed0:	|  |     |   move.l d0,(a2)
	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
    fed2:	|  |     \-> addq.l #1,32(sp)
    fed6:	|  \-------> move.l 19d3e <gameSettings+0x4>,d0
    fedc:	|            cmp.l 32(sp),d0
    fee0:	\----------- bcc.w fe60 <makeLanguageTable+0xa2>
		}
	}
}
    fee4:	             nop
    fee6:	             nop
    fee8:	             movea.l (sp)+,a2
    feea:	             movea.l (sp)+,a6
    feec:	             lea 28(sp),sp
    fef0:	             rts

0000fef2 <readIniFile>:

void readIniFile (char * filename) {
    fef2:	                      lea -564(sp),sp
    fef6:	                      move.l a6,-(sp)
    fef8:	                      move.l d2,-(sp)
	char * langName = getPrefsFilename (copyString (filename));
    fefa:	                      move.l 576(sp),-(sp)
    fefe:	                      jsr b8 <copyString>
    ff04:	                      addq.l #4,sp
    ff06:	                      move.l d0,-(sp)
    ff08:	                      jsr fd06 <getPrefsFilename>
    ff0e:	                      addq.l #4,sp
    ff10:	                      move.l d0,562(sp)

	BPTR fp = Open(langName,MODE_OLDFILE);	
    ff14:	                      move.l 562(sp),558(sp)
    ff1a:	                      move.l #1005,554(sp)
    ff22:	                      move.l 19c66 <DOSBase>,d0
    ff28:	                      movea.l d0,a6
    ff2a:	                      move.l 558(sp),d1
    ff2e:	                      move.l 554(sp),d2
    ff32:	                      jsr -30(a6)
    ff36:	                      move.l d0,550(sp)
    ff3a:	                      move.l 550(sp),d0
    ff3e:	                      move.l d0,546(sp)

	gameSettings.languageID = 0;
    ff42:	                      clr.l 19d3a <gameSettings>
	gameSettings.userFullScreen = TRUE; //Always fullscreen on AMIGA
    ff48:	                      move.w #1,19d42 <gameSettings+0x8>
	gameSettings.refreshRate = 0;
    ff50:	                      clr.l 19d44 <gameSettings+0xa>
	gameSettings.antiAlias = 1;
    ff56:	                      moveq #1,d0
    ff58:	                      move.l d0,19d48 <gameSettings+0xe>
	gameSettings.fixedPixels = FALSE;
    ff5e:	                      clr.w 19d4c <gameSettings+0x12>
	gameSettings.noStartWindow = FALSE;
    ff64:	                      clr.w 19d4e <gameSettings+0x14>
	gameSettings.debugMode = FALSE;
    ff6a:	                      clr.w 19d50 <gameSettings+0x16>

	FreeVec(langName);
    ff70:	                      move.l 562(sp),542(sp)
    ff76:	                      move.l 19c5e <SysBase>,d0
    ff7c:	                      movea.l d0,a6
    ff7e:	                      movea.l 542(sp),a1
    ff82:	                      jsr -690(a6)
	langName = NULL;
    ff86:	                      clr.l 562(sp)

	if (fp) {
    ff8a:	                      tst.l 546(sp)
    ff8e:	/-------------------- beq.w 1026c <readIniFile+0x37a>
		char lineSoFar[257] = "";
    ff92:	|                     move.l sp,d0
    ff94:	|                     addi.l #265,d0
    ff9a:	|                     move.l #257,d1
    ffa0:	|                     move.l d1,-(sp)
    ffa2:	|                     clr.l -(sp)
    ffa4:	|                     move.l d0,-(sp)
    ffa6:	|                     jsr 12e98 <memset>
    ffac:	|                     lea 12(sp),sp
		char secondSoFar[257] = "";
    ffb0:	|                     move.l sp,d0
    ffb2:	|                     addq.l #8,d0
    ffb4:	|                     move.l #257,d1
    ffba:	|                     move.l d1,-(sp)
    ffbc:	|                     clr.l -(sp)
    ffbe:	|                     move.l d0,-(sp)
    ffc0:	|                     jsr 12e98 <memset>
    ffc6:	|                     lea 12(sp),sp
		unsigned char here = 0;
    ffca:	|                     clr.b 571(sp)
		char readChar = ' ';
    ffce:	|                     move.b #32,570(sp)
		BOOL keepGoing = TRUE;
    ffd4:	|                     move.w #1,568(sp)
		BOOL doingSecond = FALSE;
    ffda:	|                     clr.w 566(sp)
		LONG tmp = 0;
    ffde:	|                     clr.l 538(sp)

		do {

			tmp = FGetC (fp);
    ffe2:	|  /----------------> move.l 546(sp),534(sp)
    ffe8:	|  |                  move.l 19c66 <DOSBase>,d0
    ffee:	|  |                  movea.l d0,a6
    fff0:	|  |                  move.l 534(sp),d1
    fff4:	|  |                  jsr -306(a6)
    fff8:	|  |                  move.l d0,530(sp)
    fffc:	|  |                  move.l 530(sp),d0
   10000:	|  |                  move.l d0,538(sp)
			if (tmp == - 1) {
   10004:	|  |                  moveq #-1,d1
   10006:	|  |                  cmp.l 538(sp),d1
   1000a:	|  |           /----- bne.s 10018 <readIniFile+0x126>
				readChar = '\n';
   1000c:	|  |           |      move.b #10,570(sp)
				keepGoing = FALSE;
   10012:	|  |           |      clr.w 568(sp)
   10016:	|  |           |  /-- bra.s 1001e <readIniFile+0x12c>
			} else {
				readChar = (char) tmp;
   10018:	|  |           \--|-> move.b 541(sp),570(sp)
			}

			switch (readChar) {
   1001e:	|  |              \-> move.b 570(sp),d0
   10022:	|  |                  ext.w d0
   10024:	|  |                  movea.w d0,a0
   10026:	|  |                  moveq #61,d0
   10028:	|  |                  cmp.l a0,d0
   1002a:	|  |     /----------- beq.w 101d4 <readIniFile+0x2e2>
   1002e:	|  |     |            moveq #61,d1
   10030:	|  |     |            cmp.l a0,d1
   10032:	|  |  /--|----------- blt.w 101e0 <readIniFile+0x2ee>
   10036:	|  |  |  |            moveq #10,d0
   10038:	|  |  |  |            cmp.l a0,d0
   1003a:	|  |  |  |        /-- beq.s 10044 <readIniFile+0x152>
   1003c:	|  |  |  |        |   moveq #13,d1
   1003e:	|  |  |  |        |   cmp.l a0,d1
   10040:	|  |  +--|--------|-- bne.w 101e0 <readIniFile+0x2ee>
				case '\n':
				case '\r':
				if (doingSecond) {
   10044:	|  |  |  |        \-> tst.w 566(sp)
   10048:	|  |  |  |     /----- beq.w 101c2 <readIniFile+0x2d0>
					if (strcmp (lineSoFar, "LANGUAGE") == 0)
   1004c:	|  |  |  |     |      pea 16e59 <newfatal.c.307beca7+0x1f7>
   10052:	|  |  |  |     |      move.l sp,d0
   10054:	|  |  |  |     |      addi.l #269,d0
   1005a:	|  |  |  |     |      move.l d0,-(sp)
   1005c:	|  |  |  |     |      jsr 1036c <strcmp>
   10062:	|  |  |  |     |      addq.l #8,sp
   10064:	|  |  |  |     |      tst.l d0
   10066:	|  |  |  |     |  /-- bne.s 10080 <readIniFile+0x18e>
					{
						gameSettings.languageID = stringToInt (secondSoFar);
   10068:	|  |  |  |     |  |   move.l sp,d0
   1006a:	|  |  |  |     |  |   addq.l #8,d0
   1006c:	|  |  |  |     |  |   move.l d0,-(sp)
   1006e:	|  |  |  |     |  |   jsr 10278 <stringToInt>
   10074:	|  |  |  |     |  |   addq.l #4,sp
   10076:	|  |  |  |     |  |   move.l d0,19d3a <gameSettings>
   1007c:	|  |  |  |     +--|-- bra.w 101c2 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "WINDOW") == 0)
   10080:	|  |  |  |     |  \-> pea 16e62 <main_sludge.c.5731ae9f+0x2>
   10086:	|  |  |  |     |      move.l sp,d0
   10088:	|  |  |  |     |      addi.l #269,d0
   1008e:	|  |  |  |     |      move.l d0,-(sp)
   10090:	|  |  |  |     |      jsr 1036c <strcmp>
   10096:	|  |  |  |     |      addq.l #8,sp
   10098:	|  |  |  |     |      tst.l d0
   1009a:	|  |  |  |     |  /-- bne.s 100c0 <readIniFile+0x1ce>
					{
						gameSettings.userFullScreen = ! stringToInt (secondSoFar);
   1009c:	|  |  |  |     |  |   move.l sp,d0
   1009e:	|  |  |  |     |  |   addq.l #8,d0
   100a0:	|  |  |  |     |  |   move.l d0,-(sp)
   100a2:	|  |  |  |     |  |   jsr 10278 <stringToInt>
   100a8:	|  |  |  |     |  |   addq.l #4,sp
   100aa:	|  |  |  |     |  |   tst.l d0
   100ac:	|  |  |  |     |  |   seq d0
   100ae:	|  |  |  |     |  |   neg.b d0
   100b0:	|  |  |  |     |  |   move.b d0,d0
   100b2:	|  |  |  |     |  |   andi.w #255,d0
   100b6:	|  |  |  |     |  |   move.w d0,19d42 <gameSettings+0x8>
   100bc:	|  |  |  |     +--|-- bra.w 101c2 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "REFRESH") == 0)
   100c0:	|  |  |  |     |  \-> pea 16e69 <main_sludge.c.5731ae9f+0x9>
   100c6:	|  |  |  |     |      move.l sp,d0
   100c8:	|  |  |  |     |      addi.l #269,d0
   100ce:	|  |  |  |     |      move.l d0,-(sp)
   100d0:	|  |  |  |     |      jsr 1036c <strcmp>
   100d6:	|  |  |  |     |      addq.l #8,sp
   100d8:	|  |  |  |     |      tst.l d0
   100da:	|  |  |  |     |  /-- bne.s 100f4 <readIniFile+0x202>
					{
						gameSettings.refreshRate = stringToInt (secondSoFar);
   100dc:	|  |  |  |     |  |   move.l sp,d0
   100de:	|  |  |  |     |  |   addq.l #8,d0
   100e0:	|  |  |  |     |  |   move.l d0,-(sp)
   100e2:	|  |  |  |     |  |   jsr 10278 <stringToInt>
   100e8:	|  |  |  |     |  |   addq.l #4,sp
   100ea:	|  |  |  |     |  |   move.l d0,19d44 <gameSettings+0xa>
   100f0:	|  |  |  |     +--|-- bra.w 101c2 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "ANTIALIAS") == 0)
   100f4:	|  |  |  |     |  \-> pea 16e71 <main_sludge.c.5731ae9f+0x11>
   100fa:	|  |  |  |     |      move.l sp,d0
   100fc:	|  |  |  |     |      addi.l #269,d0
   10102:	|  |  |  |     |      move.l d0,-(sp)
   10104:	|  |  |  |     |      jsr 1036c <strcmp>
   1010a:	|  |  |  |     |      addq.l #8,sp
   1010c:	|  |  |  |     |      tst.l d0
   1010e:	|  |  |  |     |  /-- bne.s 10128 <readIniFile+0x236>
					{
						gameSettings.antiAlias = stringToInt (secondSoFar);
   10110:	|  |  |  |     |  |   move.l sp,d0
   10112:	|  |  |  |     |  |   addq.l #8,d0
   10114:	|  |  |  |     |  |   move.l d0,-(sp)
   10116:	|  |  |  |     |  |   jsr 10278 <stringToInt>
   1011c:	|  |  |  |     |  |   addq.l #4,sp
   1011e:	|  |  |  |     |  |   move.l d0,19d48 <gameSettings+0xe>
   10124:	|  |  |  |     +--|-- bra.w 101c2 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "FIXEDPIXELS") == 0)
   10128:	|  |  |  |     |  \-> pea 16e7b <main_sludge.c.5731ae9f+0x1b>
   1012e:	|  |  |  |     |      move.l sp,d0
   10130:	|  |  |  |     |      addi.l #269,d0
   10136:	|  |  |  |     |      move.l d0,-(sp)
   10138:	|  |  |  |     |      jsr 1036c <strcmp>
   1013e:	|  |  |  |     |      addq.l #8,sp
   10140:	|  |  |  |     |      tst.l d0
   10142:	|  |  |  |     |  /-- bne.s 1015c <readIniFile+0x26a>
					{
						gameSettings.fixedPixels = stringToInt (secondSoFar);
   10144:	|  |  |  |     |  |   move.l sp,d0
   10146:	|  |  |  |     |  |   addq.l #8,d0
   10148:	|  |  |  |     |  |   move.l d0,-(sp)
   1014a:	|  |  |  |     |  |   jsr 10278 <stringToInt>
   10150:	|  |  |  |     |  |   addq.l #4,sp
   10152:	|  |  |  |     |  |   move.l d0,d0
   10154:	|  |  |  |     |  |   move.w d0,19d4c <gameSettings+0x12>
   1015a:	|  |  |  |     +--|-- bra.s 101c2 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "NOSTARTWINDOW") == 0)
   1015c:	|  |  |  |     |  \-> pea 16e87 <main_sludge.c.5731ae9f+0x27>
   10162:	|  |  |  |     |      move.l sp,d0
   10164:	|  |  |  |     |      addi.l #269,d0
   1016a:	|  |  |  |     |      move.l d0,-(sp)
   1016c:	|  |  |  |     |      jsr 1036c <strcmp>
   10172:	|  |  |  |     |      addq.l #8,sp
   10174:	|  |  |  |     |      tst.l d0
   10176:	|  |  |  |     |  /-- bne.s 10190 <readIniFile+0x29e>
					{
						gameSettings.noStartWindow = stringToInt (secondSoFar);
   10178:	|  |  |  |     |  |   move.l sp,d0
   1017a:	|  |  |  |     |  |   addq.l #8,d0
   1017c:	|  |  |  |     |  |   move.l d0,-(sp)
   1017e:	|  |  |  |     |  |   jsr 10278 <stringToInt>
   10184:	|  |  |  |     |  |   addq.l #4,sp
   10186:	|  |  |  |     |  |   move.l d0,d0
   10188:	|  |  |  |     |  |   move.w d0,19d4e <gameSettings+0x14>
   1018e:	|  |  |  |     +--|-- bra.s 101c2 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "DEBUGMODE") == 0)
   10190:	|  |  |  |     |  \-> pea 16e95 <main_sludge.c.5731ae9f+0x35>
   10196:	|  |  |  |     |      move.l sp,d0
   10198:	|  |  |  |     |      addi.l #269,d0
   1019e:	|  |  |  |     |      move.l d0,-(sp)
   101a0:	|  |  |  |     |      jsr 1036c <strcmp>
   101a6:	|  |  |  |     |      addq.l #8,sp
   101a8:	|  |  |  |     |      tst.l d0
   101aa:	|  |  |  |     +----- bne.s 101c2 <readIniFile+0x2d0>
					{
						gameSettings.debugMode = stringToInt (secondSoFar);
   101ac:	|  |  |  |     |      move.l sp,d0
   101ae:	|  |  |  |     |      addq.l #8,d0
   101b0:	|  |  |  |     |      move.l d0,-(sp)
   101b2:	|  |  |  |     |      jsr 10278 <stringToInt>
   101b8:	|  |  |  |     |      addq.l #4,sp
   101ba:	|  |  |  |     |      move.l d0,d0
   101bc:	|  |  |  |     |      move.w d0,19d50 <gameSettings+0x16>
					}
				}
				here = 0;
   101c2:	|  |  |  |     \----> clr.b 571(sp)
				doingSecond = FALSE;
   101c6:	|  |  |  |            clr.w 566(sp)
				lineSoFar[0] = 0;
   101ca:	|  |  |  |            clr.b 265(sp)
				secondSoFar[0] = 0;
   101ce:	|  |  |  |            clr.b 8(sp)
				break;
   101d2:	|  |  |  |  /-------- bra.s 1024a <readIniFile+0x358>

				case '=':
				doingSecond = TRUE;
   101d4:	|  |  |  \--|-------> move.w #1,566(sp)
				here = 0;
   101da:	|  |  |     |         clr.b 571(sp)
				break;
   101de:	|  |  |     +-------- bra.s 1024a <readIniFile+0x358>

				default:
				if (doingSecond) {
   101e0:	|  |  \-----|-------> tst.w 566(sp)
   101e4:	|  |        |  /----- beq.s 10218 <readIniFile+0x326>
					secondSoFar[here ++] = readChar;
   101e6:	|  |        |  |      move.b 571(sp),d0
   101ea:	|  |        |  |      move.b d0,d1
   101ec:	|  |        |  |      addq.b #1,d1
   101ee:	|  |        |  |      move.b d1,571(sp)
   101f2:	|  |        |  |      move.b d0,d0
   101f4:	|  |        |  |      andi.l #255,d0
   101fa:	|  |        |  |      lea 572(sp),a0
   101fe:	|  |        |  |      adda.l d0,a0
   10200:	|  |        |  |      move.b 570(sp),-564(a0)
					secondSoFar[here] = 0;
   10206:	|  |        |  |      moveq #0,d0
   10208:	|  |        |  |      move.b 571(sp),d0
   1020c:	|  |        |  |      lea 572(sp),a0
   10210:	|  |        |  |      adda.l d0,a0
   10212:	|  |        |  |      clr.b -564(a0)
				} else {
					lineSoFar[here ++] = readChar;
					lineSoFar[here] = 0;
				}
				break;
   10216:	|  |        |  |  /-- bra.s 10248 <readIniFile+0x356>
					lineSoFar[here ++] = readChar;
   10218:	|  |        |  \--|-> move.b 571(sp),d0
   1021c:	|  |        |     |   move.b d0,d1
   1021e:	|  |        |     |   addq.b #1,d1
   10220:	|  |        |     |   move.b d1,571(sp)
   10224:	|  |        |     |   move.b d0,d0
   10226:	|  |        |     |   andi.l #255,d0
   1022c:	|  |        |     |   lea 572(sp),a0
   10230:	|  |        |     |   adda.l d0,a0
   10232:	|  |        |     |   move.b 570(sp),-307(a0)
					lineSoFar[here] = 0;
   10238:	|  |        |     |   moveq #0,d0
   1023a:	|  |        |     |   move.b 571(sp),d0
   1023e:	|  |        |     |   lea 572(sp),a0
   10242:	|  |        |     |   adda.l d0,a0
   10244:	|  |        |     |   clr.b -307(a0)
				break;
   10248:	|  |        |     \-> nop
			}
		} while (keepGoing);
   1024a:	|  |        \-------> tst.w 568(sp)
   1024e:	|  \----------------- bne.w ffe2 <readIniFile+0xf0>

		Close(fp);
   10252:	|                     move.l 546(sp),526(sp)
   10258:	|                     move.l 19c66 <DOSBase>,d0
   1025e:	|                     movea.l d0,a6
   10260:	|                     move.l 526(sp),d1
   10264:	|                     jsr -36(a6)
   10268:	|                     move.l d0,522(sp)
	}
}
   1026c:	\-------------------> nop
   1026e:	                      move.l (sp)+,d2
   10270:	                      movea.l (sp)+,a6
   10272:	                      lea 564(sp),sp
   10276:	                      rts

00010278 <stringToInt>:

unsigned int stringToInt (char * s) {
   10278:	             subq.l #8,sp
	int i = 0;
   1027a:	             clr.l 4(sp)
	BOOL negative = FALSE;
   1027e:	             clr.w 2(sp)
	for (;;) {
		if (*s >= '0' && *s <= '9') {
   10282:	/----------> movea.l 12(sp),a0
   10286:	|            move.b (a0),d0
   10288:	|            cmpi.b #47,d0
   1028c:	|        /-- ble.s 102c4 <stringToInt+0x4c>
   1028e:	|        |   movea.l 12(sp),a0
   10292:	|        |   move.b (a0),d0
   10294:	|        |   cmpi.b #57,d0
   10298:	|        +-- bgt.s 102c4 <stringToInt+0x4c>
			i *= 10;
   1029a:	|        |   move.l 4(sp),d1
   1029e:	|        |   move.l d1,d0
   102a0:	|        |   add.l d0,d0
   102a2:	|        |   add.l d0,d0
   102a4:	|        |   add.l d1,d0
   102a6:	|        |   add.l d0,d0
   102a8:	|        |   move.l d0,4(sp)
			i += *s - '0';
   102ac:	|        |   movea.l 12(sp),a0
   102b0:	|        |   move.b (a0),d0
   102b2:	|        |   ext.w d0
   102b4:	|        |   movea.w d0,a0
   102b6:	|        |   moveq #-48,d0
   102b8:	|        |   add.l a0,d0
   102ba:	|        |   add.l d0,4(sp)
			s ++;
   102be:	|        |   addq.l #1,12(sp)
   102c2:	|  /-----|-- bra.s 102fc <stringToInt+0x84>
		} else if (*s == '-') {
   102c4:	|  |     \-> movea.l 12(sp),a0
   102c8:	|  |         move.b (a0),d0
   102ca:	|  |         cmpi.b #45,d0
   102ce:	|  |     /-- bne.s 102e8 <stringToInt+0x70>
			negative = ! negative;
   102d0:	|  |     |   tst.w 2(sp)
   102d4:	|  |     |   seq d0
   102d6:	|  |     |   neg.b d0
   102d8:	|  |     |   move.b d0,d0
   102da:	|  |     |   andi.w #255,d0
   102de:	|  |     |   move.w d0,2(sp)
			s++;
   102e2:	|  |     |   addq.l #1,12(sp)
   102e6:	+--|-----|-- bra.s 10282 <stringToInt+0xa>
		} else {
			if (negative)
   102e8:	|  |     \-> tst.w 2(sp)
   102ec:	|  |     /-- beq.s 102f6 <stringToInt+0x7e>
				return -i;
   102ee:	|  |     |   move.l 4(sp),d0
   102f2:	|  |     |   neg.l d0
   102f4:	|  |  /--|-- bra.s 102fe <stringToInt+0x86>
			return i;
   102f6:	|  |  |  \-> move.l 4(sp),d0
   102fa:	|  |  +----- bra.s 102fe <stringToInt+0x86>
		if (*s >= '0' && *s <= '9') {
   102fc:	\--\--|----X bra.s 10282 <stringToInt+0xa>
		}
	}
   102fe:	      \----> addq.l #8,sp
   10300:	             rts

00010302 <fileExists>:
 *  Helper functions that don't depend on other source files.
 */
#include <proto/dos.h>
#include "helpers.h"

BYTE fileExists(const char * file) {
   10302:	    lea -28(sp),sp
   10306:	    move.l a6,-(sp)
   10308:	    move.l d2,-(sp)
	BPTR tester;
	BYTE retval = 0;
   1030a:	    clr.b 35(sp)
	tester = Open(file, MODE_OLDFILE);
   1030e:	    move.l 40(sp),30(sp)
   10314:	    move.l #1005,26(sp)
   1031c:	    move.l 19c66 <DOSBase>,d0
   10322:	    movea.l d0,a6
   10324:	    move.l 30(sp),d1
   10328:	    move.l 26(sp),d2
   1032c:	    jsr -30(a6)
   10330:	    move.l d0,22(sp)
   10334:	    move.l 22(sp),d0
   10338:	    move.l d0,18(sp)
	if (tester) {
   1033c:	/-- beq.s 1035e <fileExists+0x5c>
		retval = 1;
   1033e:	|   move.b #1,35(sp)
		Close(tester);
   10344:	|   move.l 18(sp),14(sp)
   1034a:	|   move.l 19c66 <DOSBase>,d0
   10350:	|   movea.l d0,a6
   10352:	|   move.l 14(sp),d1
   10356:	|   jsr -36(a6)
   1035a:	|   move.l d0,10(sp)
	}
	return retval;
   1035e:	\-> move.b 35(sp),d0
   10362:	    move.l (sp)+,d2
   10364:	    movea.l (sp)+,a6
   10366:	    lea 28(sp),sp
   1036a:	    rts

0001036c <strcmp>:
#endif


int strcmp(const char* s1, const char* s2)
{
    while(*s1 && (*s1 == *s2))
   1036c:	   /-- bra.s 10376 <strcmp+0xa>
    {
        s1++;
   1036e:	/--|-> addq.l #1,4(sp)
        s2++;
   10372:	|  |   addq.l #1,8(sp)
    while(*s1 && (*s1 == *s2))
   10376:	|  \-> movea.l 4(sp),a0
   1037a:	|      move.b (a0),d0
   1037c:	|  /-- beq.s 1038e <strcmp+0x22>
   1037e:	|  |   movea.l 4(sp),a0
   10382:	|  |   move.b (a0),d1
   10384:	|  |   movea.l 8(sp),a0
   10388:	|  |   move.b (a0),d0
   1038a:	|  |   cmp.b d1,d0
   1038c:	\--|-- beq.s 1036e <strcmp+0x2>
    }
    return *(const unsigned char*)s1 - *(const unsigned char*)s2;
   1038e:	   \-> movea.l 4(sp),a0
   10392:	       move.b (a0),d0
   10394:	       moveq #0,d1
   10396:	       move.b d0,d1
   10398:	       movea.l 8(sp),a0
   1039c:	       move.b (a0),d0
   1039e:	       move.b d0,d0
   103a0:	       andi.l #255,d0
   103a6:	       sub.l d0,d1
   103a8:	       move.l d1,d0
}
   103aa:	       rts

000103ac <strlen>:

long unsigned int strlen (const char *s) 
{  
   103ac:	       subq.l #4,sp
	long unsigned int i = 0;
   103ae:	       clr.l (sp)
	while(s[i]) i++; 
   103b0:	   /-- bra.s 103b4 <strlen+0x8>
   103b2:	/--|-> addq.l #1,(sp)
   103b4:	|  \-> movea.l 8(sp),a0
   103b8:	|      adda.l (sp),a0
   103ba:	|      move.b (a0),d0
   103bc:	\----- bne.s 103b2 <strlen+0x6>
	return(i);
   103be:	       move.l (sp),d0
}
   103c0:	       addq.l #4,sp
   103c2:	       rts

000103c4 <strcpy>:

char *strcpy(char *t, const char *s) 
{
	while(*t++ = *s++);
   103c4:	    nop
   103c6:	/-> move.l 8(sp),d0
   103ca:	|   move.l d0,d1
   103cc:	|   addq.l #1,d1
   103ce:	|   move.l d1,8(sp)
   103d2:	|   movea.l 4(sp),a0
   103d6:	|   lea 1(a0),a1
   103da:	|   move.l a1,4(sp)
   103de:	|   movea.l d0,a1
   103e0:	|   move.b (a1),d0
   103e2:	|   move.b d0,(a0)
   103e4:	|   move.b (a0),d0
   103e6:	\-- bne.s 103c6 <strcpy+0x2>
}
   103e8:	    nop
   103ea:	    rts

000103ec <joinStrings>:

char * joinStrings (const char * s1, const char * s2) {
   103ec:	    lea -20(sp),sp
   103f0:	    move.l a6,-(sp)
   103f2:	    move.l d2,-(sp)
	char * newString = AllocVec(strlen (s1) + strlen (s2) + 1, MEMF_ANY); 
   103f4:	    move.l 32(sp),-(sp)
   103f8:	    jsr 103ac <strlen>
   103fe:	    addq.l #4,sp
   10400:	    move.l d0,d2
   10402:	    move.l 36(sp),-(sp)
   10406:	    jsr 103ac <strlen>
   1040c:	    addq.l #4,sp
   1040e:	    add.l d2,d0
   10410:	    move.l d0,d1
   10412:	    addq.l #1,d1
   10414:	    move.l d1,20(sp)
   10418:	    clr.l 16(sp)
   1041c:	    move.l 19c5e <SysBase>,d0
   10422:	    movea.l d0,a6
   10424:	    move.l 20(sp),d0
   10428:	    move.l 16(sp),d1
   1042c:	    jsr -684(a6)
   10430:	    move.l d0,12(sp)
   10434:	    move.l 12(sp),d0
   10438:	    move.l d0,8(sp)
	char * t = newString;
   1043c:	    move.l 8(sp),24(sp)

	while(*t++ = *s1++);
   10442:	    nop
   10444:	/-> move.l 32(sp),d0
   10448:	|   move.l d0,d1
   1044a:	|   addq.l #1,d1
   1044c:	|   move.l d1,32(sp)
   10450:	|   movea.l 24(sp),a0
   10454:	|   lea 1(a0),a1
   10458:	|   move.l a1,24(sp)
   1045c:	|   movea.l d0,a1
   1045e:	|   move.b (a1),d0
   10460:	|   move.b d0,(a0)
   10462:	|   move.b (a0),d0
   10464:	\-- bne.s 10444 <joinStrings+0x58>
	t--;
   10466:	    subq.l #1,24(sp)
	while(*t++ = *s2++);
   1046a:	    nop
   1046c:	/-> move.l 36(sp),d0
   10470:	|   move.l d0,d1
   10472:	|   addq.l #1,d1
   10474:	|   move.l d1,36(sp)
   10478:	|   movea.l 24(sp),a0
   1047c:	|   lea 1(a0),a1
   10480:	|   move.l a1,24(sp)
   10484:	|   movea.l d0,a1
   10486:	|   move.b (a1),d0
   10488:	|   move.b d0,(a0)
   1048a:	|   move.b (a0),d0
   1048c:	\-- bne.s 1046c <joinStrings+0x80>

	return newString;
   1048e:	    move.l 8(sp),d0
}
   10492:	    move.l (sp)+,d2
   10494:	    movea.l (sp)+,a6
   10496:	    lea 20(sp),sp
   1049a:	    rts

0001049c <itoa>:

#define va_start(ap, last) (ap = (va_list)&last + sizeof(last))
#define va_arg(ap, type) (*(type*)(ap += sizeof(type)) - 1)
#define va_end(ap) (ap = (va_list)0)

char* itoa(int value, char* str, int base) {
   1049c:	       lea -16(sp),sp
    char* rc;
    char* ptr;
    char* low;
    // Set '-' for negative decimals.
    if (base == 10 && value < 0) {
   104a0:	       moveq #10,d0
   104a2:	       cmp.l 28(sp),d0
   104a6:	   /-- bne.s 104c4 <itoa+0x28>
   104a8:	   |   tst.l 20(sp)
   104ac:	   +-- bge.s 104c4 <itoa+0x28>
        *str++ = '-';
   104ae:	   |   move.l 24(sp),d0
   104b2:	   |   move.l d0,d1
   104b4:	   |   addq.l #1,d1
   104b6:	   |   move.l d1,24(sp)
   104ba:	   |   movea.l d0,a0
   104bc:	   |   move.b #45,(a0)
        value *= -1;
   104c0:	   |   neg.l 20(sp)
    }
    rc = ptr = str;
   104c4:	   \-> move.l 24(sp),12(sp)
   104ca:	       move.l 12(sp),4(sp)
    // Set pointer to last digit's place.
    do {
        *ptr++ = "0123456789abcdef"[value % base];
   104d0:	   /-> move.l 20(sp),d0
   104d4:	   |   move.l 28(sp),-(sp)
   104d8:	   |   move.l d0,-(sp)
   104da:	   |   jsr 13ab6 <__modsi3>
   104e0:	   |   addq.l #8,sp
   104e2:	   |   movea.l d0,a1
   104e4:	   |   move.l 12(sp),d0
   104e8:	   |   move.l d0,d1
   104ea:	   |   addq.l #1,d1
   104ec:	   |   move.l d1,12(sp)
   104f0:	   |   lea 16e9f <main_sludge.c.5731ae9f+0x3f>,a0
   104f6:	   |   move.b (0,a1,a0.l),d1
   104fa:	   |   movea.l d0,a0
   104fc:	   |   move.b d1,(a0)
        value /= base;
   104fe:	   |   move.l 28(sp),-(sp)
   10502:	   |   move.l 24(sp),-(sp)
   10506:	   |   jsr 13a88 <__divsi3>
   1050c:	   |   addq.l #8,sp
   1050e:	   |   move.l d0,20(sp)
    } while (value);
   10512:	   \-- bne.s 104d0 <itoa+0x34>
    // Null-terminate string.
    *ptr-- = '\0';
   10514:	       move.l 12(sp),d0
   10518:	       move.l d0,d1
   1051a:	       subq.l #1,d1
   1051c:	       move.l d1,12(sp)
   10520:	       movea.l d0,a0
   10522:	       clr.b (a0)
    // Reverse string.
    for (low = rc; low < ptr; low++, ptr--) {
   10524:	       move.l 4(sp),8(sp)
   1052a:	   /-- bra.s 10550 <itoa+0xb4>
        char temp = *low;
   1052c:	/--|-> movea.l 8(sp),a0
   10530:	|  |   move.b (a0),3(sp)
        *low = *ptr;
   10534:	|  |   movea.l 12(sp),a0
   10538:	|  |   move.b (a0),d0
   1053a:	|  |   movea.l 8(sp),a0
   1053e:	|  |   move.b d0,(a0)
        *ptr = temp;
   10540:	|  |   movea.l 12(sp),a0
   10544:	|  |   move.b 3(sp),(a0)
    for (low = rc; low < ptr; low++, ptr--) {
   10548:	|  |   addq.l #1,8(sp)
   1054c:	|  |   subq.l #1,12(sp)
   10550:	|  \-> move.l 8(sp),d0
   10554:	|      cmp.l 12(sp),d0
   10558:	\----- bcs.s 1052c <itoa+0x90>
    }
    return rc;
   1055a:	       move.l 4(sp),d0
}
   1055e:	       lea 16(sp),sp
   10562:	       rts

00010564 <vsprintf2>:

int vsprintf2(char* str, const char* format, va_list args) {
   10564:	                            lea -40(sp),sp
   10568:	                            move.l d2,-(sp)
    char* s = str;
   1056a:	                            move.l 48(sp),40(sp)
    const char* p = format;
   10570:	                            move.l 52(sp),36(sp)
    int i;
    char* sval;
    char buffer[20];

    while (*p) {
   10576:	   /----------------------- bra.w 106aa <vsprintf2+0x146>
        if (*p == '%') {
   1057a:	/--|----------------------> movea.l 36(sp),a0
   1057e:	|  |                        move.b (a0),d0
   10580:	|  |                        cmpi.b #37,d0
   10584:	|  |  /-------------------- bne.w 10690 <vsprintf2+0x12c>
            switch (*++p) {
   10588:	|  |  |                     addq.l #1,36(sp)
   1058c:	|  |  |                     movea.l 36(sp),a0
   10590:	|  |  |                     move.b (a0),d0
   10592:	|  |  |                     ext.w d0
   10594:	|  |  |                     movea.w d0,a0
   10596:	|  |  |                     moveq #115,d0
   10598:	|  |  |                     cmp.l a0,d0
   1059a:	|  |  |           /-------- beq.s 10612 <vsprintf2+0xae>
   1059c:	|  |  |           |         moveq #115,d1
   1059e:	|  |  |           |         cmp.l a0,d1
   105a0:	|  |  |  /--------|-------- blt.w 10678 <vsprintf2+0x114>
   105a4:	|  |  |  |        |         moveq #99,d2
   105a6:	|  |  |  |        |         cmp.l a0,d2
   105a8:	|  |  |  |  /-----|-------- beq.w 10650 <vsprintf2+0xec>
   105ac:	|  |  |  |  |     |         moveq #100,d0
   105ae:	|  |  |  |  |     |         cmp.l a0,d0
   105b0:	|  |  |  +--|-----|-------- bne.w 10678 <vsprintf2+0x114>
                case 'd':
                    i = va_arg(args, int);
   105b4:	|  |  |  |  |     |         addq.l #4,56(sp)
   105b8:	|  |  |  |  |     |         movea.l 56(sp),a0
   105bc:	|  |  |  |  |     |         move.l (a0),d0
   105be:	|  |  |  |  |     |         move.l d0,d1
   105c0:	|  |  |  |  |     |         subq.l #1,d1
   105c2:	|  |  |  |  |     |         move.l d1,24(sp)
                    itoa(i, buffer, 10);
   105c6:	|  |  |  |  |     |         pea a <_start+0xa>
   105ca:	|  |  |  |  |     |         lea 8(sp),a0
   105ce:	|  |  |  |  |     |         move.l a0,-(sp)
   105d0:	|  |  |  |  |     |         move.l 32(sp),-(sp)
   105d4:	|  |  |  |  |     |         jsr 1049c <itoa>
   105da:	|  |  |  |  |     |         lea 12(sp),sp
					for (char* b = buffer; *b; b++) {
   105de:	|  |  |  |  |     |         lea 44(sp),a0
   105e2:	|  |  |  |  |     |         lea -40(a0),a0
   105e6:	|  |  |  |  |     |         move.l a0,28(sp)
   105ea:	|  |  |  |  |     |     /-- bra.s 10606 <vsprintf2+0xa2>
                        *s++ = *b;
   105ec:	|  |  |  |  |     |  /--|-> move.l 40(sp),d0
   105f0:	|  |  |  |  |     |  |  |   move.l d0,d1
   105f2:	|  |  |  |  |     |  |  |   addq.l #1,d1
   105f4:	|  |  |  |  |     |  |  |   move.l d1,40(sp)
   105f8:	|  |  |  |  |     |  |  |   movea.l 28(sp),a0
   105fc:	|  |  |  |  |     |  |  |   move.b (a0),d1
   105fe:	|  |  |  |  |     |  |  |   movea.l d0,a0
   10600:	|  |  |  |  |     |  |  |   move.b d1,(a0)
					for (char* b = buffer; *b; b++) {
   10602:	|  |  |  |  |     |  |  |   addq.l #1,28(sp)
   10606:	|  |  |  |  |     |  |  \-> movea.l 28(sp),a0
   1060a:	|  |  |  |  |     |  |      move.b (a0),d0
   1060c:	|  |  |  |  |     |  \----- bne.s 105ec <vsprintf2+0x88>
                    }
                    break;
   1060e:	|  |  |  |  |  /--|-------- bra.w 106a6 <vsprintf2+0x142>
                case 's':
                    sval = va_arg(args, char*);
   10612:	|  |  |  |  |  |  \-------> addq.l #4,56(sp)
   10616:	|  |  |  |  |  |            movea.l 56(sp),a0
   1061a:	|  |  |  |  |  |            move.l (a0),d0
   1061c:	|  |  |  |  |  |            move.l d0,d1
   1061e:	|  |  |  |  |  |            subq.l #1,d1
   10620:	|  |  |  |  |  |            move.l d1,32(sp)
                    while (*sval) {
   10624:	|  |  |  |  |  |        /-- bra.s 10646 <vsprintf2+0xe2>
                        *s++ = *sval++;
   10626:	|  |  |  |  |  |     /--|-> move.l 32(sp),d1
   1062a:	|  |  |  |  |  |     |  |   move.l d1,d2
   1062c:	|  |  |  |  |  |     |  |   addq.l #1,d2
   1062e:	|  |  |  |  |  |     |  |   move.l d2,32(sp)
   10632:	|  |  |  |  |  |     |  |   move.l 40(sp),d0
   10636:	|  |  |  |  |  |     |  |   move.l d0,d2
   10638:	|  |  |  |  |  |     |  |   addq.l #1,d2
   1063a:	|  |  |  |  |  |     |  |   move.l d2,40(sp)
   1063e:	|  |  |  |  |  |     |  |   movea.l d1,a0
   10640:	|  |  |  |  |  |     |  |   move.b (a0),d1
   10642:	|  |  |  |  |  |     |  |   movea.l d0,a0
   10644:	|  |  |  |  |  |     |  |   move.b d1,(a0)
                    while (*sval) {
   10646:	|  |  |  |  |  |     |  \-> movea.l 32(sp),a0
   1064a:	|  |  |  |  |  |     |      move.b (a0),d0
   1064c:	|  |  |  |  |  |     \----- bne.s 10626 <vsprintf2+0xc2>
                    }
                    break;
   1064e:	|  |  |  |  |  +----------- bra.s 106a6 <vsprintf2+0x142>
                case 'c':
                    i = va_arg(args, int);
   10650:	|  |  |  |  \--|----------> addq.l #4,56(sp)
   10654:	|  |  |  |     |            movea.l 56(sp),a0
   10658:	|  |  |  |     |            move.l (a0),d0
   1065a:	|  |  |  |     |            move.l d0,d1
   1065c:	|  |  |  |     |            subq.l #1,d1
   1065e:	|  |  |  |     |            move.l d1,24(sp)
                    *s++ = (char)i;
   10662:	|  |  |  |     |            move.l 40(sp),d0
   10666:	|  |  |  |     |            move.l d0,d2
   10668:	|  |  |  |     |            addq.l #1,d2
   1066a:	|  |  |  |     |            move.l d2,40(sp)
   1066e:	|  |  |  |     |            move.l 24(sp),d1
   10672:	|  |  |  |     |            movea.l d0,a0
   10674:	|  |  |  |     |            move.b d1,(a0)
                    break;
   10676:	|  |  |  |     +----------- bra.s 106a6 <vsprintf2+0x142>
                default:
                    *s++ = *p;
   10678:	|  |  |  \-----|----------> move.l 40(sp),d0
   1067c:	|  |  |        |            move.l d0,d1
   1067e:	|  |  |        |            addq.l #1,d1
   10680:	|  |  |        |            move.l d1,40(sp)
   10684:	|  |  |        |            movea.l 36(sp),a0
   10688:	|  |  |        |            move.b (a0),d1
   1068a:	|  |  |        |            movea.l d0,a0
   1068c:	|  |  |        |            move.b d1,(a0)
                    break;
   1068e:	|  |  |        +----------- bra.s 106a6 <vsprintf2+0x142>
            }
        } else {
            *s++ = *p;
   10690:	|  |  \--------|----------> move.l 40(sp),d0
   10694:	|  |           |            move.l d0,d1
   10696:	|  |           |            addq.l #1,d1
   10698:	|  |           |            move.l d1,40(sp)
   1069c:	|  |           |            movea.l 36(sp),a0
   106a0:	|  |           |            move.b (a0),d1
   106a2:	|  |           |            movea.l d0,a0
   106a4:	|  |           |            move.b d1,(a0)
        }
        p++;
   106a6:	|  |           \----------> addq.l #1,36(sp)
    while (*p) {
   106aa:	|  \----------------------> movea.l 36(sp),a0
   106ae:	|                           move.b (a0),d0
   106b0:	\-------------------------- bne.w 1057a <vsprintf2+0x16>
    }
    *s = '\0';
   106b4:	                            movea.l 40(sp),a0
   106b8:	                            clr.b (a0)
    return s - str;
   106ba:	                            move.l 40(sp),d0
   106be:	                            sub.l 48(sp),d0
}
   106c2:	                            move.l (sp)+,d2
   106c4:	                            lea 40(sp),sp
   106c8:	                            rts

000106ca <sprintf>:

int sprintf(char* str, const char* format, ...) {
   106ca:	subq.l #8,sp
    va_list args;
    int done;

    va_start(args, format);
   106cc:	moveq #16,d0
   106ce:	add.l sp,d0
   106d0:	move.l d0,d1
   106d2:	addq.l #4,d1
   106d4:	move.l d1,4(sp)
    done = vsprintf2(str, format, args);
   106d8:	move.l 16(sp),d0
   106dc:	move.l 4(sp),-(sp)
   106e0:	move.l d0,-(sp)
   106e2:	move.l 20(sp),-(sp)
   106e6:	jsr 10564 <vsprintf2>
   106ec:	lea 12(sp),sp
   106f0:	move.l d0,(sp)
    va_end(args);
   106f2:	clr.l 4(sp)

    return done;
   106f6:	move.l (sp),d0
}
   106f8:	addq.l #8,sp
   106fa:	rts

000106fc <addVarToStack>:
const char * typeName[] = {"undefined", "number", "user function", "string",
							"built-in function", "file", "stack",
							"object type", "animation", "costume"};


BOOL addVarToStack(const struct variable * va, struct variableStack ** thisStack) {
   106fc:	       lea -20(sp),sp
   10700:	       move.l a6,-(sp)
    struct variableStack * newStack = (struct variableStack *)AllocVec(sizeof(struct variableStack), MEMF_ANY);
   10702:	       moveq #12,d0
   10704:	       move.l d0,20(sp)
   10708:	       clr.l 16(sp)
   1070c:	       move.l 19c5e <SysBase>,d0
   10712:	       movea.l d0,a6
   10714:	       move.l 20(sp),d0
   10718:	       move.l 16(sp),d1
   1071c:	       jsr -684(a6)
   10720:	       move.l d0,12(sp)
   10724:	       move.l 12(sp),d0
   10728:	       move.l d0,8(sp)
    if (!newStack) return FALSE;
   1072c:	   /-- bne.s 10732 <addVarToStack+0x36>
   1072e:	   |   clr.w d0
   10730:	/--|-- bra.s 1077a <addVarToStack+0x7e>

    if (!copyMain(va, &newStack->thisVar)) {
   10732:	|  \-> move.l 8(sp),d0
   10736:	|      move.l d0,-(sp)
   10738:	|      move.l 32(sp),-(sp)
   1073c:	|      jsr 1125e <copyMain>
   10742:	|      addq.l #8,sp
   10744:	|      tst.w d0
   10746:	|  /-- bne.s 10762 <addVarToStack+0x66>
        FreeVec(newStack);
   10748:	|  |   move.l 8(sp),4(sp)
   1074e:	|  |   move.l 19c5e <SysBase>,d0
   10754:	|  |   movea.l d0,a6
   10756:	|  |   movea.l 4(sp),a1
   1075a:	|  |   jsr -690(a6)
        return FALSE;
   1075e:	|  |   clr.w d0
   10760:	+--|-- bra.s 1077a <addVarToStack+0x7e>
    }

    newStack->next = *thisStack;
   10762:	|  \-> movea.l 32(sp),a0
   10766:	|      move.l (a0),d0
   10768:	|      movea.l 8(sp),a0
   1076c:	|      move.l d0,8(a0)
    *thisStack = newStack;
   10770:	|      movea.l 32(sp),a0
   10774:	|      move.l 8(sp),(a0)
    return TRUE;
   10778:	|      moveq #1,d0
}
   1077a:	\----> movea.l (sp)+,a6
   1077c:	       lea 20(sp),sp
   10780:	       rts

00010782 <addVarToStackQuick>:

BOOL addVarToStackQuick(struct variable *va, struct variableStack **thisStack) {
   10782:	       lea -16(sp),sp
   10786:	       move.l a6,-(sp)
    struct variableStack *newStack = AllocVec(sizeof(struct variableStack), MEMF_ANY);
   10788:	       moveq #12,d0
   1078a:	       move.l d0,16(sp)
   1078e:	       clr.l 12(sp)
   10792:	       move.l 19c5e <SysBase>,d0
   10798:	       movea.l d0,a6
   1079a:	       move.l 16(sp),d0
   1079e:	       move.l 12(sp),d1
   107a2:	       jsr -684(a6)
   107a6:	       move.l d0,8(sp)
   107aa:	       move.l 8(sp),d0
   107ae:	       move.l d0,4(sp)
    if (!newStack) return FALSE;
   107b2:	   /-- bne.s 107b8 <addVarToStackQuick+0x36>
   107b4:	   |   clr.w d0
   107b6:	/--|-- bra.s 107ee <addVarToStackQuick+0x6c>

//    if (!copyMain(va, &newStack->thisVar)) return FALSE;

    memcpy(&(newStack->thisVar), va, sizeof(struct variable));
   107b8:	|  \-> move.l 4(sp),d0
   107bc:	|      pea 8 <_start+0x8>
   107c0:	|      move.l 28(sp),-(sp)
   107c4:	|      move.l d0,-(sp)
   107c6:	|      jsr 12ec8 <memcpy>
   107cc:	|      lea 12(sp),sp
    va->varType = SVT_NULL;
   107d0:	|      movea.l 24(sp),a0
   107d4:	|      clr.l (a0)

    newStack->next = *thisStack;
   107d6:	|      movea.l 28(sp),a0
   107da:	|      move.l (a0),d0
   107dc:	|      movea.l 4(sp),a0
   107e0:	|      move.l d0,8(a0)
    *thisStack = newStack;
   107e4:	|      movea.l 28(sp),a0
   107e8:	|      move.l 4(sp),(a0)
    return TRUE;
   107ec:	|      moveq #1,d0
}
   107ee:	\----> movea.l (sp)+,a6
   107f0:	       lea 16(sp),sp
   107f4:	       rts

000107f6 <addVariablesInSecond>:

void addVariablesInSecond(struct variable * var1, struct variable * var2) {
   107f6:	       lea -16(sp),sp
   107fa:	       move.l a6,-(sp)
	if (var1->varType == SVT_INT && var2->varType == SVT_INT) {
   107fc:	       movea.l 24(sp),a0
   10800:	       move.l (a0),d0
   10802:	       moveq #1,d1
   10804:	       cmp.l d0,d1
   10806:	   /-- bne.s 10830 <addVariablesInSecond+0x3a>
   10808:	   |   movea.l 28(sp),a0
   1080c:	   |   move.l (a0),d0
   1080e:	   |   moveq #1,d1
   10810:	   |   cmp.l d0,d1
   10812:	   +-- bne.s 10830 <addVariablesInSecond+0x3a>
		var2->varData.intValue += var1->varData.intValue;
   10814:	   |   movea.l 28(sp),a0
   10818:	   |   move.l 4(a0),d1
   1081c:	   |   movea.l 24(sp),a0
   10820:	   |   move.l 4(a0),d0
   10824:	   |   add.l d1,d0
   10826:	   |   movea.l 28(sp),a0
   1082a:	   |   move.l d0,4(a0)
   1082e:	/--|-- bra.s 108aa <addVariablesInSecond+0xb4>
	} else {
		char * string1 = getTextFromAnyVar(var1);
   10830:	|  \-> move.l 24(sp),-(sp)
   10834:	|      jsr 11496 <getTextFromAnyVar>
   1083a:	|      addq.l #4,sp
   1083c:	|      move.l d0,16(sp)
		char * string2 = getTextFromAnyVar(var2);
   10840:	|      move.l 28(sp),-(sp)
   10844:	|      jsr 11496 <getTextFromAnyVar>
   1084a:	|      addq.l #4,sp
   1084c:	|      move.l d0,12(sp)

		unlinkVar(var2);
   10850:	|      move.l 28(sp),-(sp)
   10854:	|      jsr 1110e <unlinkVar>
   1085a:	|      addq.l #4,sp
		var2->varData.theString = joinStrings(string1, string2);
   1085c:	|      move.l 12(sp),-(sp)
   10860:	|      move.l 20(sp),-(sp)
   10864:	|      jsr 103ec <joinStrings>
   1086a:	|      addq.l #8,sp
   1086c:	|      movea.l 28(sp),a0
   10870:	|      move.l d0,4(a0)
		var2->varType = SVT_STRING;
   10874:	|      movea.l 28(sp),a0
   10878:	|      moveq #3,d0
   1087a:	|      move.l d0,(a0)
		FreeVec(string1);
   1087c:	|      move.l 16(sp),8(sp)
   10882:	|      move.l 19c5e <SysBase>,d0
   10888:	|      movea.l d0,a6
   1088a:	|      movea.l 8(sp),a1
   1088e:	|      jsr -690(a6)
		FreeVec(string2);
   10892:	|      move.l 12(sp),4(sp)
   10898:	|      move.l 19c5e <SysBase>,d0
   1089e:	|      movea.l d0,a6
   108a0:	|      movea.l 4(sp),a1
   108a4:	|      jsr -690(a6)
	}
}
   108a8:	|      nop
   108aa:	\----> nop
   108ac:	       movea.l (sp)+,a6
   108ae:	       lea 16(sp),sp
   108b2:	       rts

000108b4 <compareVariablesInSecond>:

void compareVariablesInSecond (const struct variable *var1, struct variable *var2) {	
	setVariable (var2, SVT_INT, compareVars (*var1, *var2));
   108b4:	movea.l 8(sp),a0
   108b8:	move.l 4(a0),-(sp)
   108bc:	move.l (a0),-(sp)
   108be:	movea.l 12(sp),a0
   108c2:	move.l 4(a0),-(sp)
   108c6:	move.l (a0),-(sp)
   108c8:	jsr 108ea <compareVars>
   108ce:	lea 16(sp),sp
   108d2:	move.l d0,-(sp)
   108d4:	pea 1 <_start+0x1>
   108d8:	move.l 16(sp),-(sp)
   108dc:	jsr 117b2 <setVariable>
   108e2:	lea 12(sp),sp
}
   108e6:	nop
   108e8:	rts

000108ea <compareVars>:


int compareVars (const struct variable var1, const struct variable var2) {
   108ea:	       subq.l #4,sp
	int re = 0;
   108ec:	       clr.l (sp)
	if (var1.varType == var2.varType) {
   108ee:	       move.l 8(sp),d1
   108f2:	       move.l 16(sp),d0
   108f6:	       cmp.l d1,d0
   108f8:	/----- bne.w 109c0 <compareVars+0xd6>
		switch (var1.varType) {
   108fc:	|      move.l 8(sp),d0
   10900:	|      moveq #9,d1
   10902:	|      cmp.l d0,d1
   10904:	|  /-- bcs.w 109a8 <compareVars+0xbe>
   10908:	|  |   add.l d0,d0
   1090a:	|  |   movea.l d0,a0
   1090c:	|  |   adda.l #67864,a0
   10912:	|  |   move.w (a0),d0
   10914:	|  |   jmp (10918 <compareVars+0x2e>,pc,d0.w)
   10918:	|  |   ori.b #-112,(a4)
   1091c:	|  |   ori.l #5243024,(a0)
   10922:	|  |   ori.l #7733392,(a0)
   10928:	|  |   ori.b #28,(1,a6,d7.w)
			case SVT_NULL:
			re = 1;
   1092e:	|  |   move.l d0,(sp)
			break;
   10930:	+--|-- bra.w 109c0 <compareVars+0xd6>

			case SVT_COSTUME:
			re = (var1.varData.costumeHandler == var2.varData.costumeHandler);
   10934:	|  |   move.l 12(sp),d1
   10938:	|  |   move.l 20(sp),d0
   1093c:	|  |   cmp.l d1,d0
   1093e:	|  |   seq d0
   10940:	|  |   neg.b d0
   10942:	|  |   move.b d0,d0
   10944:	|  |   andi.l #255,d0
   1094a:	|  |   move.l d0,(sp)
			break;
   1094c:	+--|-- bra.s 109c0 <compareVars+0xd6>

			case SVT_ANIM:
			re = (var1.varData.animHandler == var2.varData.animHandler);
   1094e:	|  |   move.l 12(sp),d1
   10952:	|  |   move.l 20(sp),d0
   10956:	|  |   cmp.l d1,d0
   10958:	|  |   seq d0
   1095a:	|  |   neg.b d0
   1095c:	|  |   move.b d0,d0
   1095e:	|  |   andi.l #255,d0
   10964:	|  |   move.l d0,(sp)
			break;
   10966:	+--|-- bra.s 109c0 <compareVars+0xd6>

			case SVT_STRING:

			re = (strcmp (var1.varData.theString, var2.varData.theString) == 0);
   10968:	|  |   move.l 20(sp),d1
   1096c:	|  |   move.l 12(sp),d0
   10970:	|  |   move.l d1,-(sp)
   10972:	|  |   move.l d0,-(sp)
   10974:	|  |   jsr 1036c <strcmp>
   1097a:	|  |   addq.l #8,sp
   1097c:	|  |   tst.l d0
   1097e:	|  |   seq d0
   10980:	|  |   neg.b d0
   10982:	|  |   move.b d0,d0
   10984:	|  |   andi.l #255,d0
   1098a:	|  |   move.l d0,(sp)
			break;
   1098c:	+--|-- bra.s 109c0 <compareVars+0xd6>

			case SVT_STACK:
			re = (var1.varData.theStack == var2.varData.theStack);
   1098e:	|  |   move.l 12(sp),d1
   10992:	|  |   move.l 20(sp),d0
   10996:	|  |   cmp.l d1,d0
   10998:	|  |   seq d0
   1099a:	|  |   neg.b d0
   1099c:	|  |   move.b d0,d0
   1099e:	|  |   andi.l #255,d0
   109a4:	|  |   move.l d0,(sp)
			break;
   109a6:	+--|-- bra.s 109c0 <compareVars+0xd6>

			default:
			re = (var1.varData.intValue == var2.varData.intValue);
   109a8:	|  \-> move.l 12(sp),d1
   109ac:	|      move.l 20(sp),d0
   109b0:	|      cmp.l d1,d0
   109b2:	|      seq d0
   109b4:	|      neg.b d0
   109b6:	|      move.b d0,d0
   109b8:	|      andi.l #255,d0
   109be:	|      move.l d0,(sp)
		}
	}
	return re;
   109c0:	\----> move.l (sp),d0
}
   109c2:	       addq.l #4,sp
   109c4:	       rts

000109c6 <copyStack>:

BOOL copyStack (const struct variable * from, struct variable * to) {
   109c6:	             lea -16(sp),sp
   109ca:	             move.l a6,-(sp)
	to->varType = SVT_STACK;
   109cc:	             movea.l 28(sp),a0
   109d0:	             moveq #6,d0
   109d2:	             move.l d0,(a0)
	to->varData.theStack = (struct stackHandler *)AllocVec(sizeof(struct stackHandler), MEMF_ANY);
   109d4:	             moveq #12,d0
   109d6:	             move.l d0,12(sp)
   109da:	             clr.l 8(sp)
   109de:	             move.l 19c5e <SysBase>,d0
   109e4:	             movea.l d0,a6
   109e6:	             move.l 12(sp),d0
   109ea:	             move.l 8(sp),d1
   109ee:	             jsr -684(a6)
   109f2:	             move.l d0,4(sp)
   109f6:	             move.l 4(sp),d0
   109fa:	             movea.l 28(sp),a0
   109fe:	             move.l d0,4(a0)
	if (!to->varData.theStack) return FALSE;
   10a02:	             movea.l 28(sp),a0
   10a06:	             move.l 4(a0),d0
   10a0a:	         /-- bne.s 10a12 <copyStack+0x4c>
   10a0c:	         |   clr.w d0
   10a0e:	/--------|-- bra.w 10a94 <copyStack+0xce>
	to->varData.theStack->first = NULL;
   10a12:	|        \-> movea.l 28(sp),a0
   10a16:	|            movea.l 4(a0),a0
   10a1a:	|            clr.l (a0)
	to->varData.theStack->last = NULL;
   10a1c:	|            movea.l 28(sp),a0
   10a20:	|            movea.l 4(a0),a0
   10a24:	|            clr.l 4(a0)
	to->varData.theStack->timesUsed = 1;
   10a28:	|            movea.l 28(sp),a0
   10a2c:	|            movea.l 4(a0),a0
   10a30:	|            moveq #1,d0
   10a32:	|            move.l d0,8(a0)
	struct variableStack * a = from->varData.theStack->first;
   10a36:	|            movea.l 24(sp),a0
   10a3a:	|            movea.l 4(a0),a0
   10a3e:	|            move.l (a0),16(sp)

	while (a) {
   10a42:	|     /----- bra.s 10a8c <copyStack+0xc6>
		addVarToStack(&a->thisVar, &(to->varData.theStack->first));
   10a44:	|  /--|----> movea.l 28(sp),a0
   10a48:	|  |  |      move.l 4(a0),d0
   10a4c:	|  |  |      move.l d0,d1
   10a4e:	|  |  |      move.l 16(sp),d0
   10a52:	|  |  |      move.l d1,-(sp)
   10a54:	|  |  |      move.l d0,-(sp)
   10a56:	|  |  |      jsr 106fc <addVarToStack>
   10a5c:	|  |  |      addq.l #8,sp
		if (to->varData.theStack->last == NULL) {
   10a5e:	|  |  |      movea.l 28(sp),a0
   10a62:	|  |  |      movea.l 4(a0),a0
   10a66:	|  |  |      move.l 4(a0),d0
   10a6a:	|  |  |  /-- bne.s 10a82 <copyStack+0xbc>
			to->varData.theStack->last = to->varData.theStack->first;
   10a6c:	|  |  |  |   movea.l 28(sp),a0
   10a70:	|  |  |  |   movea.l 4(a0),a1
   10a74:	|  |  |  |   movea.l 28(sp),a0
   10a78:	|  |  |  |   movea.l 4(a0),a0
   10a7c:	|  |  |  |   move.l (a1),d0
   10a7e:	|  |  |  |   move.l d0,4(a0)
		}
		a = a->next;
   10a82:	|  |  |  \-> movea.l 16(sp),a0
   10a86:	|  |  |      move.l 8(a0),16(sp)
	while (a) {
   10a8c:	|  |  \----> tst.l 16(sp)
   10a90:	|  \-------- bne.s 10a44 <copyStack+0x7e>
	}

	return TRUE;
   10a92:	|            moveq #1,d0
}
   10a94:	\----------> movea.l (sp)+,a6
   10a96:	             lea 16(sp),sp
   10a9a:	             rts

00010a9c <deleteVarFromStack>:

int deleteVarFromStack (const struct variable * va, struct variableStack ** thisStack, BOOL allOfEm) {
   10a9c:	                lea -20(sp),sp
   10aa0:	                move.l a6,-(sp)
   10aa2:	                move.l 36(sp),d0
   10aa6:	                move.w d0,d0
   10aa8:	                move.w d0,6(sp)
    struct variableStack ** huntVar = thisStack;
   10aac:	                move.l 32(sp),20(sp)
    struct variableStack * killMe;
    int reply = 0;
   10ab2:	                clr.l 16(sp)

    while (*huntVar) {
   10ab6:	   /----------- bra.s 10b34 <deleteVarFromStack+0x98>
        if (compareVars((*huntVar)->thisVar, *va)) {
   10ab8:	/--|----------> movea.l 20(sp),a0
   10abc:	|  |            movea.l (a0),a0
   10abe:	|  |            movea.l 28(sp),a1
   10ac2:	|  |            move.l 4(a1),-(sp)
   10ac6:	|  |            move.l (a1),-(sp)
   10ac8:	|  |            move.l 4(a0),-(sp)
   10acc:	|  |            move.l (a0),-(sp)
   10ace:	|  |            jsr 108ea <compareVars>
   10ad4:	|  |            lea 16(sp),sp
   10ad8:	|  |            tst.l d0
   10ada:	|  |  /-------- beq.s 10b26 <deleteVarFromStack+0x8a>
            killMe = *huntVar;
   10adc:	|  |  |         movea.l 20(sp),a0
   10ae0:	|  |  |         move.l (a0),12(sp)
            *huntVar = killMe->next;
   10ae4:	|  |  |         movea.l 12(sp),a0
   10ae8:	|  |  |         move.l 8(a0),d0
   10aec:	|  |  |         movea.l 20(sp),a0
   10af0:	|  |  |         move.l d0,(a0)
            unlinkVar(&killMe->thisVar);
   10af2:	|  |  |         move.l 12(sp),d0
   10af6:	|  |  |         move.l d0,-(sp)
   10af8:	|  |  |         jsr 1110e <unlinkVar>
   10afe:	|  |  |         addq.l #4,sp
            FreeVec(killMe);
   10b00:	|  |  |         move.l 12(sp),8(sp)
   10b06:	|  |  |         move.l 19c5e <SysBase>,d0
   10b0c:	|  |  |         movea.l d0,a6
   10b0e:	|  |  |         movea.l 8(sp),a1
   10b12:	|  |  |         jsr -690(a6)
            if (!allOfEm) return 1;
   10b16:	|  |  |         tst.w 6(sp)
   10b1a:	|  |  |     /-- bne.s 10b20 <deleteVarFromStack+0x84>
   10b1c:	|  |  |     |   moveq #1,d0
   10b1e:	|  |  |  /--|-- bra.s 10b42 <deleteVarFromStack+0xa6>
            reply++;
   10b20:	|  |  |  |  \-> addq.l #1,16(sp)
   10b24:	|  +--|--|----- bra.s 10b34 <deleteVarFromStack+0x98>
        } else {
            huntVar = &((*huntVar)->next);
   10b26:	|  |  \--|----> movea.l 20(sp),a0
   10b2a:	|  |     |      move.l (a0),d0
   10b2c:	|  |     |      move.l d0,d1
   10b2e:	|  |     |      addq.l #8,d1
   10b30:	|  |     |      move.l d1,20(sp)
    while (*huntVar) {
   10b34:	|  \-----|----> movea.l 20(sp),a0
   10b38:	|        |      move.l (a0),d0
   10b3a:	\--------|----- bne.w 10ab8 <deleteVarFromStack+0x1c>
        }
    }

    return reply;
   10b3e:	         |      move.l 16(sp),d0
}
   10b42:	         \----> movea.l (sp)+,a6
   10b44:	                lea 20(sp),sp
   10b48:	                rts

00010b4a <fastArrayGetByIndex>:


struct variable * fastArrayGetByIndex (struct fastArrayHandler * vS, unsigned int theIndex) {
	if (theIndex >= (unsigned int) vS -> size) return NULL;
   10b4a:	       movea.l 4(sp),a0
   10b4e:	       move.l 4(a0),d0
   10b52:	       cmp.l 8(sp),d0
   10b56:	   /-- bhi.s 10b5c <fastArrayGetByIndex+0x12>
   10b58:	   |   moveq #0,d0
   10b5a:	/--|-- bra.s 10b6a <fastArrayGetByIndex+0x20>
	return & vS -> fastVariables[theIndex];
   10b5c:	|  \-> movea.l 4(sp),a0
   10b60:	|      move.l (a0),d1
   10b62:	|      move.l 8(sp),d0
   10b66:	|      lsl.l #3,d0
   10b68:	|      add.l d1,d0
}
   10b6a:	\----> rts

00010b6c <getCostumeFromVar>:

struct persona * getCostumeFromVar(struct variable *thisVar) {
   10b6c:	                lea -32(sp),sp
   10b70:	                move.l a6,-(sp)
   10b72:	                move.l a2,-(sp)
    struct persona *p = NULL;
   10b74:	                clr.l 36(sp)

    switch (thisVar->varType) {
   10b78:	                movea.l 44(sp),a0
   10b7c:	                move.l (a0),d0
   10b7e:	                moveq #8,d1
   10b80:	                cmp.l d0,d1
   10b82:	            /-- beq.s 10b90 <getCostumeFromVar+0x24>
   10b84:	            |   moveq #9,d1
   10b86:	            |   cmp.l d0,d1
   10b88:	   /--------|-- beq.w 10c3e <getCostumeFromVar+0xd2>
   10b8c:	/--|--------|-- bra.w 10c48 <getCostumeFromVar+0xdc>
        case SVT_ANIM:
            p = AllocVec(sizeof(struct persona), MEMF_ANY);
   10b90:	|  |        \-> moveq #8,d0
   10b92:	|  |            move.l d0,28(sp)
   10b96:	|  |            clr.l 24(sp)
   10b9a:	|  |            move.l 19c5e <SysBase>,d0
   10ba0:	|  |            movea.l d0,a6
   10ba2:	|  |            move.l 28(sp),d0
   10ba6:	|  |            move.l 24(sp),d1
   10baa:	|  |            jsr -684(a6)
   10bae:	|  |            move.l d0,20(sp)
   10bb2:	|  |            move.l 20(sp),d0
   10bb6:	|  |            move.l d0,36(sp)
            if (!p) return NULL;
   10bba:	|  |        /-- bne.s 10bc2 <getCostumeFromVar+0x56>
   10bbc:	|  |        |   moveq #0,d0
   10bbe:	|  |  /-----|-- bra.w 10c72 <getCostumeFromVar+0x106>
            p->numDirections = 1;
   10bc2:	|  |  |     \-> movea.l 36(sp),a0
   10bc6:	|  |  |         moveq #1,d1
   10bc8:	|  |  |         move.l d1,4(a0)
            p->animation = AllocVec(3 * sizeof(struct personaAnimation *), MEMF_ANY);
   10bcc:	|  |  |         moveq #12,d0
   10bce:	|  |  |         move.l d0,16(sp)
   10bd2:	|  |  |         clr.l 12(sp)
   10bd6:	|  |  |         move.l 19c5e <SysBase>,d0
   10bdc:	|  |  |         movea.l d0,a6
   10bde:	|  |  |         move.l 16(sp),d0
   10be2:	|  |  |         move.l 12(sp),d1
   10be6:	|  |  |         jsr -684(a6)
   10bea:	|  |  |         move.l d0,8(sp)
   10bee:	|  |  |         move.l 8(sp),d0
   10bf2:	|  |  |         movea.l 36(sp),a0
   10bf6:	|  |  |         move.l d0,(a0)
            if (!p->animation) return NULL;
   10bf8:	|  |  |         movea.l 36(sp),a0
   10bfc:	|  |  |         move.l (a0),d0
   10bfe:	|  |  |     /-- bne.s 10c04 <getCostumeFromVar+0x98>
   10c00:	|  |  |     |   moveq #0,d0
   10c02:	|  |  +-----|-- bra.s 10c72 <getCostumeFromVar+0x106>

            for (int iii = 0; iii < 3; iii++) {
   10c04:	|  |  |     \-> clr.l 32(sp)
   10c08:	|  |  |     /-- bra.s 10c34 <getCostumeFromVar+0xc8>
                p->animation[iii] = copyAnim(thisVar->varData.animHandler);
   10c0a:	|  |  |  /--|-> movea.l 44(sp),a0
   10c0e:	|  |  |  |  |   move.l 4(a0),d0
   10c12:	|  |  |  |  |   movea.l 36(sp),a0
   10c16:	|  |  |  |  |   movea.l (a0),a0
   10c18:	|  |  |  |  |   move.l 32(sp),d1
   10c1c:	|  |  |  |  |   add.l d1,d1
   10c1e:	|  |  |  |  |   add.l d1,d1
   10c20:	|  |  |  |  |   lea (0,a0,d1.l),a2
   10c24:	|  |  |  |  |   move.l d0,-(sp)
   10c26:	|  |  |  |  |   jsr 658c <copyAnim>
   10c2c:	|  |  |  |  |   addq.l #4,sp
   10c2e:	|  |  |  |  |   move.l d0,(a2)
            for (int iii = 0; iii < 3; iii++) {
   10c30:	|  |  |  |  |   addq.l #1,32(sp)
   10c34:	|  |  |  |  \-> moveq #2,d1
   10c36:	|  |  |  |      cmp.l 32(sp),d1
   10c3a:	|  |  |  \----- bge.s 10c0a <getCostumeFromVar+0x9e>
            }
            break;
   10c3c:	|  |  |     /-- bra.s 10c6e <getCostumeFromVar+0x102>

        case SVT_COSTUME:
            return thisVar->varData.costumeHandler;
   10c3e:	|  \--|-----|-> movea.l 44(sp),a0
   10c42:	|     |     |   move.l 4(a0),d0
   10c46:	|     +-----|-- bra.s 10c72 <getCostumeFromVar+0x106>
            break;

        default:
            KPrintF("Expecting an animation variable; found variable of type", typeName[thisVar->varType]);
   10c48:	\-----|-----|-> movea.l 44(sp),a0
   10c4c:	      |     |   move.l (a0),d0
   10c4e:	      |     |   add.l d0,d0
   10c50:	      |     |   movea.l d0,a1
   10c52:	      |     |   adda.l d0,a1
   10c54:	      |     |   lea 18688 <typeName>,a0
   10c5a:	      |     |   move.l (0,a1,a0.l),d0
   10c5e:	      |     |   move.l d0,-(sp)
   10c60:	      |     |   pea 16f11 <main_sludge.c.5731ae9f+0xb1>
   10c66:	      |     |   jsr 12f14 <KPrintF>
   10c6c:	      |     |   addq.l #8,sp
    }

    return p;
   10c6e:	      |     \-> move.l 36(sp),d0
}
   10c72:	      \-------> movea.l (sp)+,a2
   10c74:	                movea.l (sp)+,a6
   10c76:	                lea 32(sp),sp
   10c7a:	                rts

00010c7c <getSavedGamesStack>:

BOOL getSavedGamesStack(struct stackHandler * sH, char * ext) {
   10c7c:	                lea -96(sp),sp
   10c80:	                movem.l d2-d3/a6,-(sp)
	char * pattern = joinStrings("*", ext);
   10c84:	                move.l 116(sp),-(sp)
   10c88:	                pea 16f49 <main_sludge.c.5731ae9f+0xe9>
   10c8e:	                jsr 103ec <joinStrings>
   10c94:	                addq.l #8,sp
   10c96:	                move.l d0,102(sp)
	if (!pattern) return FALSE;
   10c9a:	            /-- bne.s 10ca2 <getSavedGamesStack+0x26>
   10c9c:	            |   clr.w d0
   10c9e:	/-----------|-- bra.w 10eb6 <getSavedGamesStack+0x23a>

	struct variable newName;
	newName.varType = SVT_NULL;
   10ca2:	|           \-> clr.l 14(sp)

	BPTR dirLock = Lock(".", ACCESS_READ);
   10ca6:	|               move.l #94027,98(sp)
   10cae:	|               moveq #-2,d0
   10cb0:	|               move.l d0,94(sp)
   10cb4:	|               move.l 19c66 <DOSBase>,d0
   10cba:	|               movea.l d0,a6
   10cbc:	|               move.l 98(sp),d1
   10cc0:	|               move.l 94(sp),d2
   10cc4:	|               jsr -84(a6)
   10cc8:	|               move.l d0,90(sp)
   10ccc:	|               move.l 90(sp),d0
   10cd0:	|               move.l d0,86(sp)
	if (!dirLock) return FALSE;
   10cd4:	|           /-- bne.s 10cdc <getSavedGamesStack+0x60>
   10cd6:	|           |   clr.w d0
   10cd8:	+-----------|-- bra.w 10eb6 <getSavedGamesStack+0x23a>

	struct FileInfoBlock *fib = (struct FileInfoBlock *)AllocVec(sizeof(struct FileInfoBlock), MEMF_CLEAR);
   10cdc:	|           \-> move.l #260,82(sp)
   10ce4:	|               move.l #65536,78(sp)
   10cec:	|               move.l 19c5e <SysBase>,d0
   10cf2:	|               movea.l d0,a6
   10cf4:	|               move.l 82(sp),d0
   10cf8:	|               move.l 78(sp),d1
   10cfc:	|               jsr -684(a6)
   10d00:	|               move.l d0,74(sp)
   10d04:	|               move.l 74(sp),d0
   10d08:	|               move.l d0,70(sp)
	if (!fib) {
   10d0c:	|           /-- bne.s 10d2a <getSavedGamesStack+0xae>
		UnLock(dirLock);
   10d0e:	|           |   move.l 86(sp),22(sp)
   10d14:	|           |   move.l 19c66 <DOSBase>,d0
   10d1a:	|           |   movea.l d0,a6
   10d1c:	|           |   move.l 22(sp),d1
   10d20:	|           |   jsr -90(a6)
		return FALSE;
   10d24:	|           |   clr.w d0
   10d26:	+-----------|-- bra.w 10eb6 <getSavedGamesStack+0x23a>
	}

	BOOL result = FALSE;
   10d2a:	|           \-> clr.w 106(sp)
	if (Examine(dirLock, fib)) {
   10d2e:	|               move.l 86(sp),66(sp)
   10d34:	|               move.l 70(sp),62(sp)
   10d3a:	|               move.l 19c66 <DOSBase>,d0
   10d40:	|               movea.l d0,a6
   10d42:	|               move.l 66(sp),d1
   10d46:	|               move.l 62(sp),d2
   10d4a:	|               jsr -102(a6)
   10d4e:	|               move.l d0,58(sp)
   10d52:	|               move.l 58(sp),d0
   10d56:	|  /----------- beq.w 10e6a <getSavedGamesStack+0x1ee>
		while (ExNext(dirLock, fib)) {
   10d5a:	|  |        /-- bra.w 10e36 <getSavedGamesStack+0x1ba>
			if (!strcmp(fib->fib_FileName + strlen(fib->fib_FileName) - strlen(ext), ext)) {
   10d5e:	|  |  /-----|-> move.l 70(sp),d2
   10d62:	|  |  |     |   addq.l #8,d2
   10d64:	|  |  |     |   move.l 70(sp),d0
   10d68:	|  |  |     |   addq.l #8,d0
   10d6a:	|  |  |     |   move.l d0,-(sp)
   10d6c:	|  |  |     |   jsr 103ac <strlen>
   10d72:	|  |  |     |   addq.l #4,sp
   10d74:	|  |  |     |   move.l d0,d3
   10d76:	|  |  |     |   move.l 116(sp),-(sp)
   10d7a:	|  |  |     |   jsr 103ac <strlen>
   10d80:	|  |  |     |   addq.l #4,sp
   10d82:	|  |  |     |   move.l d3,d1
   10d84:	|  |  |     |   sub.l d0,d1
   10d86:	|  |  |     |   move.l d2,d0
   10d88:	|  |  |     |   add.l d1,d0
   10d8a:	|  |  |     |   move.l 116(sp),-(sp)
   10d8e:	|  |  |     |   move.l d0,-(sp)
   10d90:	|  |  |     |   jsr 1036c <strcmp>
   10d96:	|  |  |     |   addq.l #8,sp
   10d98:	|  |  |     |   tst.l d0
   10d9a:	|  |  |     +-- bne.w 10e36 <getSavedGamesStack+0x1ba>
				fib->fib_FileName[strlen(fib->fib_FileName) - strlen(ext)] = 0;
   10d9e:	|  |  |     |   move.l 70(sp),d0
   10da2:	|  |  |     |   addq.l #8,d0
   10da4:	|  |  |     |   move.l d0,-(sp)
   10da6:	|  |  |     |   jsr 103ac <strlen>
   10dac:	|  |  |     |   addq.l #4,sp
   10dae:	|  |  |     |   move.l d0,d2
   10db0:	|  |  |     |   move.l 116(sp),-(sp)
   10db4:	|  |  |     |   jsr 103ac <strlen>
   10dba:	|  |  |     |   addq.l #4,sp
   10dbc:	|  |  |     |   move.l d0,d1
   10dbe:	|  |  |     |   move.l d2,d0
   10dc0:	|  |  |     |   sub.l d1,d0
   10dc2:	|  |  |     |   movea.l 70(sp),a0
   10dc6:	|  |  |     |   clr.b (8,a0,d0.l)
				char * decoded = decodeFilename(fib->fib_FileName);
   10dca:	|  |  |     |   move.l 70(sp),d0
   10dce:	|  |  |     |   addq.l #8,d0
   10dd0:	|  |  |     |   move.l d0,-(sp)
   10dd2:	|  |  |     |   jsr 118 <decodeFilename>
   10dd8:	|  |  |     |   addq.l #4,sp
   10dda:	|  |  |     |   move.l d0,42(sp)
				makeTextVar(&newName, decoded);
   10dde:	|  |  |     |   move.l 42(sp),-(sp)
   10de2:	|  |  |     |   lea 18(sp),a0
   10de6:	|  |  |     |   move.l a0,-(sp)
   10de8:	|  |  |     |   jsr 110e2 <makeTextVar>
   10dee:	|  |  |     |   addq.l #8,sp
				FreeVec(decoded);
   10df0:	|  |  |     |   move.l 42(sp),38(sp)
   10df6:	|  |  |     |   move.l 19c5e <SysBase>,d0
   10dfc:	|  |  |     |   movea.l d0,a6
   10dfe:	|  |  |     |   movea.l 38(sp),a1
   10e02:	|  |  |     |   jsr -690(a6)
				if (!addVarToStack(&newName, &sH->first)) goto cleanup;
   10e06:	|  |  |     |   move.l 112(sp),d0
   10e0a:	|  |  |     |   move.l d0,-(sp)
   10e0c:	|  |  |     |   lea 18(sp),a0
   10e10:	|  |  |     |   move.l a0,-(sp)
   10e12:	|  |  |     |   jsr 106fc <addVarToStack>
   10e18:	|  |  |     |   addq.l #8,sp
   10e1a:	|  |  |     |   tst.w d0
   10e1c:	|  |  |  /--|-- beq.s 10e6e <getSavedGamesStack+0x1f2>
				if (sH->last == NULL) sH->last = sH->first;
   10e1e:	|  |  |  |  |   movea.l 112(sp),a0
   10e22:	|  |  |  |  |   move.l 4(a0),d0
   10e26:	|  |  |  |  +-- bne.s 10e36 <getSavedGamesStack+0x1ba>
   10e28:	|  |  |  |  |   movea.l 112(sp),a0
   10e2c:	|  |  |  |  |   move.l (a0),d0
   10e2e:	|  |  |  |  |   movea.l 112(sp),a0
   10e32:	|  |  |  |  |   move.l d0,4(a0)
		while (ExNext(dirLock, fib)) {
   10e36:	|  |  |  |  \-> move.l 86(sp),54(sp)
   10e3c:	|  |  |  |      move.l 70(sp),50(sp)
   10e42:	|  |  |  |      move.l 19c66 <DOSBase>,d0
   10e48:	|  |  |  |      movea.l d0,a6
   10e4a:	|  |  |  |      move.l 54(sp),d1
   10e4e:	|  |  |  |      move.l 50(sp),d2
   10e52:	|  |  |  |      jsr -108(a6)
   10e56:	|  |  |  |      move.l d0,46(sp)
   10e5a:	|  |  |  |      move.l 46(sp),d0
   10e5e:	|  |  \--|----- bne.w 10d5e <getSavedGamesStack+0xe2>
			}
		}
		result = TRUE;
   10e62:	|  |     |      move.w #1,106(sp)
   10e68:	|  |     |  /-- bra.s 10e70 <getSavedGamesStack+0x1f4>
	}

cleanup:
   10e6a:	|  \-----|--|-> nop
   10e6c:	|        |  +-- bra.s 10e70 <getSavedGamesStack+0x1f4>
				if (!addVarToStack(&newName, &sH->first)) goto cleanup;
   10e6e:	|        \--|-> nop
	FreeVec(fib);
   10e70:	|           \-> move.l 70(sp),34(sp)
   10e76:	|               move.l 19c5e <SysBase>,d0
   10e7c:	|               movea.l d0,a6
   10e7e:	|               movea.l 34(sp),a1
   10e82:	|               jsr -690(a6)
	UnLock(dirLock);
   10e86:	|               move.l 86(sp),30(sp)
   10e8c:	|               move.l 19c66 <DOSBase>,d0
   10e92:	|               movea.l d0,a6
   10e94:	|               move.l 30(sp),d1
   10e98:	|               jsr -90(a6)
	FreeVec(pattern);
   10e9c:	|               move.l 102(sp),26(sp)
   10ea2:	|               move.l 19c5e <SysBase>,d0
   10ea8:	|               movea.l d0,a6
   10eaa:	|               movea.l 26(sp),a1
   10eae:	|               jsr -690(a6)
	return result;
   10eb2:	|               move.w 106(sp),d0
}
   10eb6:	\-------------> movem.l (sp)+,d2-d3/a6
   10eba:	                lea 96(sp),sp
   10ebe:	                rts

00010ec0 <getValueType>:


BOOL getValueType (int *toHere, enum variableType vT, const struct variable *v) {
   10ec0:	       subq.l #8,sp
	//if (! v) return false;
	if (v->varType != vT) {
   10ec2:	       movea.l 20(sp),a0
   10ec6:	       move.l (a0),d0
   10ec8:	       cmp.l 16(sp),d0
   10ecc:	/----- beq.s 10f30 <getValueType+0x70>
		char * e1 = joinStrings ("Can only perform specified operation on a value which is of type ", typeName[vT]);
   10ece:	|      move.l 16(sp),d0
   10ed2:	|      add.l d0,d0
   10ed4:	|      movea.l d0,a1
   10ed6:	|      adda.l d0,a1
   10ed8:	|      lea 18688 <typeName>,a0
   10ede:	|      move.l (0,a1,a0.l),d0
   10ee2:	|      move.l d0,-(sp)
   10ee4:	|      pea 16f4d <main_sludge.c.5731ae9f+0xed>
   10eea:	|      jsr 103ec <joinStrings>
   10ef0:	|      addq.l #8,sp
   10ef2:	|      move.l d0,4(sp)
		char * e2 = joinStrings ("... value supplied was of type ", typeName[v->varType]);
   10ef6:	|      movea.l 20(sp),a0
   10efa:	|      move.l (a0),d0
   10efc:	|      add.l d0,d0
   10efe:	|      movea.l d0,a1
   10f00:	|      adda.l d0,a1
   10f02:	|      lea 18688 <typeName>,a0
   10f08:	|      move.l (0,a1,a0.l),d0
   10f0c:	|      move.l d0,-(sp)
   10f0e:	|      pea 16f8f <main_sludge.c.5731ae9f+0x12f>
   10f14:	|      jsr 103ec <joinStrings>
   10f1a:	|      addq.l #8,sp
   10f1c:	|      move.l d0,(sp)
		KPrintF(e1, e2);
   10f1e:	|      move.l (sp),-(sp)
   10f20:	|      move.l 8(sp),-(sp)
   10f24:	|      jsr 12f14 <KPrintF>
   10f2a:	|      addq.l #8,sp

		return FALSE;
   10f2c:	|      clr.w d0
   10f2e:	|  /-- bra.s 10f40 <getValueType+0x80>
	}
	*toHere = v->varData.intValue;
   10f30:	\--|-> movea.l 20(sp),a0
   10f34:	   |   move.l 4(a0),d0
   10f38:	   |   movea.l 12(sp),a0
   10f3c:	   |   move.l d0,(a0)
	return TRUE;
   10f3e:	   |   moveq #1,d0
}
   10f40:	   \-> addq.l #8,sp
   10f42:	       rts

00010f44 <loadStringToVar>:

BOOL loadStringToVar (struct variable *thisVar, int value) {
	makeTextVar (thisVar, getNumberedString (value));
   10f44:	move.l 8(sp),-(sp)
   10f48:	jsr 47dc <getNumberedString>
   10f4e:	addq.l #4,sp
   10f50:	move.l d0,-(sp)
   10f52:	move.l 8(sp),-(sp)
   10f56:	jsr 110e2 <makeTextVar>
   10f5c:	addq.l #8,sp
	return (BOOL) (thisVar->varData.theString != NULL);
   10f5e:	movea.l 4(sp),a0
   10f62:	move.l 4(a0),d0
   10f66:	sne d0
   10f68:	neg.b d0
   10f6a:	move.b d0,d0
   10f6c:	andi.w #255,d0
}
   10f70:	rts

00010f72 <makeFastArrayFromStack>:
		break;
	}
	return TRUE;
}

BOOL makeFastArrayFromStack (struct variable *to, const struct stackHandler *stacky) {
   10f72:	          subq.l #8,sp
    int size = stackSize(stacky);
   10f74:	          move.l 16(sp),-(sp)
   10f78:	          jsr 11820 <stackSize>
   10f7e:	          addq.l #4,sp
   10f80:	          move.l d0,4(sp)
    if (!makeFastArraySize(to, size)) return FALSE;
   10f84:	          move.l 4(sp),-(sp)
   10f88:	          move.l 16(sp),-(sp)
   10f8c:	          jsr 10fdc <makeFastArraySize>
   10f92:	          addq.l #8,sp
   10f94:	          tst.w d0
   10f96:	      /-- bne.s 10f9c <makeFastArrayFromStack+0x2a>
   10f98:	      |   clr.w d0
   10f9a:	/-----|-- bra.s 10fd8 <makeFastArrayFromStack+0x66>

    // Now let's fill up the new array

    struct variableStack *allV = stacky->first;
   10f9c:	|     \-> movea.l 16(sp),a0
   10fa0:	|         move.l (a0),(sp)
    size = 0;
   10fa2:	|         clr.l 4(sp)
    while (allV) {
   10fa6:	|     /-- bra.s 10fd2 <makeFastArrayFromStack+0x60>
        copyMain(&allV->thisVar, &to->varData.fastArray->fastVariables[size]);
   10fa8:	|  /--|-> movea.l 12(sp),a0
   10fac:	|  |  |   movea.l 4(a0),a0
   10fb0:	|  |  |   move.l (a0),d1
   10fb2:	|  |  |   move.l 4(sp),d0
   10fb6:	|  |  |   lsl.l #3,d0
   10fb8:	|  |  |   add.l d0,d1
   10fba:	|  |  |   move.l (sp),d0
   10fbc:	|  |  |   move.l d1,-(sp)
   10fbe:	|  |  |   move.l d0,-(sp)
   10fc0:	|  |  |   jsr 1125e <copyMain>
   10fc6:	|  |  |   addq.l #8,sp
        size++;
   10fc8:	|  |  |   addq.l #1,4(sp)
        allV = allV->next;
   10fcc:	|  |  |   movea.l (sp),a0
   10fce:	|  |  |   move.l 8(a0),(sp)
    while (allV) {
   10fd2:	|  |  \-> tst.l (sp)
   10fd4:	|  \----- bne.s 10fa8 <makeFastArrayFromStack+0x36>
    }
    return TRUE;
   10fd6:	|         moveq #1,d0
}
   10fd8:	\-------> addq.l #8,sp
   10fda:	          rts

00010fdc <makeFastArraySize>:


BOOL makeFastArraySize (struct variable *to, int size) {
   10fdc:	          lea -28(sp),sp
   10fe0:	          move.l a6,-(sp)
    if (size < 0) {
   10fe2:	          tst.l 40(sp)
   10fe6:	      /-- bge.s 10ffc <makeFastArraySize+0x20>
		KPrintF("makeFastArraySize: Can't create a fast array with a negative number of elements!");
   10fe8:	      |   pea 16fd4 <main_sludge.c.5731ae9f+0x174>
   10fee:	      |   jsr 12f14 <KPrintF>
   10ff4:	      |   addq.l #4,sp
		return FALSE;
   10ff6:	      |   clr.w d0
   10ff8:	/-----|-- bra.w 110da <makeFastArraySize+0xfe>
	}		
    unlinkVar(to);
   10ffc:	|     \-> move.l 36(sp),-(sp)
   11000:	|         jsr 1110e <unlinkVar>
   11006:	|         addq.l #4,sp
    to->varType = SVT_FASTARRAY;
   11008:	|         movea.l 36(sp),a0
   1100c:	|         moveq #10,d0
   1100e:	|         move.l d0,(a0)
    to->varData.fastArray = AllocVec(sizeof(struct fastArrayHandler), MEMF_ANY);
   11010:	|         moveq #12,d0
   11012:	|         move.l d0,24(sp)
   11016:	|         clr.l 20(sp)
   1101a:	|         move.l 19c5e <SysBase>,d0
   11020:	|         movea.l d0,a6
   11022:	|         move.l 24(sp),d0
   11026:	|         move.l 20(sp),d1
   1102a:	|         jsr -684(a6)
   1102e:	|         move.l d0,16(sp)
   11032:	|         move.l 16(sp),d0
   11036:	|         movea.l 36(sp),a0
   1103a:	|         move.l d0,4(a0)
    if (!to->varData.fastArray) return FALSE;
   1103e:	|         movea.l 36(sp),a0
   11042:	|         move.l 4(a0),d0
   11046:	|     /-- bne.s 1104e <makeFastArraySize+0x72>
   11048:	|     |   clr.w d0
   1104a:	+-----|-- bra.w 110da <makeFastArraySize+0xfe>
    to->varData.fastArray->fastVariables = AllocVec(size * sizeof(struct variable), MEMF_ANY);
   1104e:	|     \-> move.l 40(sp),d0
   11052:	|         lsl.l #3,d0
   11054:	|         move.l d0,12(sp)
   11058:	|         clr.l 8(sp)
   1105c:	|         move.l 19c5e <SysBase>,d0
   11062:	|         movea.l d0,a6
   11064:	|         move.l 12(sp),d0
   11068:	|         move.l 8(sp),d1
   1106c:	|         jsr -684(a6)
   11070:	|         move.l d0,4(sp)
   11074:	|         move.l 4(sp),d0
   11078:	|         movea.l 36(sp),a0
   1107c:	|         movea.l 4(a0),a0
   11080:	|         move.l d0,(a0)
    if (!to->varData.fastArray->fastVariables) return FALSE;
   11082:	|         movea.l 36(sp),a0
   11086:	|         movea.l 4(a0),a0
   1108a:	|         move.l (a0),d0
   1108c:	|     /-- bne.s 11092 <makeFastArraySize+0xb6>
   1108e:	|     |   clr.w d0
   11090:	+-----|-- bra.s 110da <makeFastArraySize+0xfe>
    for (int i = 0; i < size; i++) {
   11092:	|     \-> clr.l 28(sp)
   11096:	|     /-- bra.s 110b2 <makeFastArraySize+0xd6>
        to->varData.fastArray->fastVariables[i].varType = SVT_NULL;
   11098:	|  /--|-> movea.l 36(sp),a0
   1109c:	|  |  |   movea.l 4(a0),a0
   110a0:	|  |  |   move.l (a0),d1
   110a2:	|  |  |   move.l 28(sp),d0
   110a6:	|  |  |   lsl.l #3,d0
   110a8:	|  |  |   movea.l d1,a0
   110aa:	|  |  |   adda.l d0,a0
   110ac:	|  |  |   clr.l (a0)
    for (int i = 0; i < size; i++) {
   110ae:	|  |  |   addq.l #1,28(sp)
   110b2:	|  |  \-> move.l 28(sp),d0
   110b6:	|  |      cmp.l 40(sp),d0
   110ba:	|  \----- blt.s 11098 <makeFastArraySize+0xbc>
    }
    to->varData.fastArray->size = size;
   110bc:	|         movea.l 36(sp),a0
   110c0:	|         movea.l 4(a0),a0
   110c4:	|         move.l 40(sp),4(a0)
    to->varData.fastArray->timesUsed = 1;
   110ca:	|         movea.l 36(sp),a0
   110ce:	|         movea.l 4(a0),a0
   110d2:	|         moveq #1,d0
   110d4:	|         move.l d0,8(a0)
    return TRUE;
   110d8:	|         moveq #1,d0
}
   110da:	\-------> movea.l (sp)+,a6
   110dc:	          lea 28(sp),sp
   110e0:	          rts

000110e2 <makeTextVar>:

void makeTextVar (struct variable *thisVar, const char * txt) {
	unlinkVar (thisVar);
   110e2:	move.l 4(sp),-(sp)
   110e6:	jsr 1110e <unlinkVar>
   110ec:	addq.l #4,sp
	thisVar->varType = SVT_STRING;
   110ee:	movea.l 4(sp),a0
   110f2:	moveq #3,d0
   110f4:	move.l d0,(a0)
	thisVar->varData.theString = copyString (txt);
   110f6:	move.l 8(sp),-(sp)
   110fa:	jsr b8 <copyString>
   11100:	addq.l #4,sp
   11102:	movea.l 4(sp),a0
   11106:	move.l d0,4(a0)
}
   1110a:	nop
   1110c:	rts

0001110e <unlinkVar>:

void unlinkVar (struct variable *thisVar) {
   1110e:	                      lea -16(sp),sp
   11112:	                      move.l a6,-(sp)

	switch (thisVar->varType) {
   11114:	                      movea.l 24(sp),a0
   11118:	                      move.l (a0),d0
   1111a:	                      moveq #10,d1
   1111c:	                      cmp.l d0,d1
   1111e:	            /-------- beq.w 111d6 <unlinkVar+0xc8>
   11122:	            |         moveq #10,d1
   11124:	            |         cmp.l d0,d1
   11126:	/-----------|-------- bcs.w 1124a <unlinkVar+0x13c>
   1112a:	|           |         moveq #8,d1
   1112c:	|           |         cmp.l d0,d1
   1112e:	|  /--------|-------- beq.w 11236 <unlinkVar+0x128>
   11132:	|  |        |         moveq #8,d1
   11134:	|  |        |         cmp.l d0,d1
   11136:	+--|--------|-------- bcs.w 1124a <unlinkVar+0x13c>
   1113a:	|  |        |         moveq #3,d1
   1113c:	|  |        |         cmp.l d0,d1
   1113e:	|  |        |     /-- beq.s 1114a <unlinkVar+0x3c>
   11140:	|  |        |     |   moveq #6,d1
   11142:	|  |        |     |   cmp.l d0,d1
   11144:	|  |        |  /--|-- beq.s 11170 <unlinkVar+0x62>
		case SVT_ANIM:
		deleteAnim (thisVar->varData.animHandler);
		break;

		default:
		break;
   11146:	+--|--------|--|--|-- bra.w 1124a <unlinkVar+0x13c>
        FreeVec(thisVar->varData.theString);
   1114a:	|  |        |  |  \-> movea.l 24(sp),a0
   1114e:	|  |        |  |      move.l 4(a0),4(sp)
   11154:	|  |        |  |      move.l 19c5e <SysBase>,d0
   1115a:	|  |        |  |      movea.l d0,a6
   1115c:	|  |        |  |      movea.l 4(sp),a1
   11160:	|  |        |  |      jsr -690(a6)
		thisVar->varData.theString = NULL;
   11164:	|  |        |  |      movea.l 24(sp),a0
   11168:	|  |        |  |      clr.l 4(a0)
		break;
   1116c:	|  |  /-----|--|----- bra.w 11254 <unlinkVar+0x146>
		thisVar->varData.theStack -> timesUsed --;
   11170:	|  |  |     |  \----> movea.l 24(sp),a0
   11174:	|  |  |     |         movea.l 4(a0),a0
   11178:	|  |  |     |         move.l 8(a0),d0
   1117c:	|  |  |     |         subq.l #1,d0
   1117e:	|  |  |     |         move.l d0,8(a0)
		if (thisVar->varData.theStack -> timesUsed <= 0) {
   11182:	|  |  |     |         movea.l 24(sp),a0
   11186:	|  |  |     |         movea.l 4(a0),a0
   1118a:	|  |  |     |         move.l 8(a0),d0
   1118e:	|  |  |  /--|-------- bgt.w 1124e <unlinkVar+0x140>
			while (thisVar->varData.theStack -> first) trimStack (&thisVar->varData.theStack -> first);
   11192:	|  |  |  |  |     /-- bra.s 111a6 <unlinkVar+0x98>
   11194:	|  |  |  |  |  /--|-> movea.l 24(sp),a0
   11198:	|  |  |  |  |  |  |   move.l 4(a0),d0
   1119c:	|  |  |  |  |  |  |   move.l d0,-(sp)
   1119e:	|  |  |  |  |  |  |   jsr 11844 <trimStack>
   111a4:	|  |  |  |  |  |  |   addq.l #4,sp
   111a6:	|  |  |  |  |  |  \-> movea.l 24(sp),a0
   111aa:	|  |  |  |  |  |      movea.l 4(a0),a0
   111ae:	|  |  |  |  |  |      move.l (a0),d0
   111b0:	|  |  |  |  |  \----- bne.s 11194 <unlinkVar+0x86>
			FreeVec(thisVar->varData.theStack);
   111b2:	|  |  |  |  |         movea.l 24(sp),a0
   111b6:	|  |  |  |  |         move.l 4(a0),8(sp)
   111bc:	|  |  |  |  |         move.l 19c5e <SysBase>,d0
   111c2:	|  |  |  |  |         movea.l d0,a6
   111c4:	|  |  |  |  |         movea.l 8(sp),a1
   111c8:	|  |  |  |  |         jsr -690(a6)
			thisVar->varData.theStack = NULL;
   111cc:	|  |  |  |  |         movea.l 24(sp),a0
   111d0:	|  |  |  |  |         clr.l 4(a0)
		break;
   111d4:	|  |  |  +--|-------- bra.s 1124e <unlinkVar+0x140>
		thisVar->varData.fastArray -> timesUsed --;
   111d6:	|  |  |  |  \-------> movea.l 24(sp),a0
   111da:	|  |  |  |            movea.l 4(a0),a0
   111de:	|  |  |  |            move.l 8(a0),d0
   111e2:	|  |  |  |            subq.l #1,d0
   111e4:	|  |  |  |            move.l d0,8(a0)
		if (thisVar->varData.theStack -> timesUsed <= 0) {
   111e8:	|  |  |  |            movea.l 24(sp),a0
   111ec:	|  |  |  |            movea.l 4(a0),a0
   111f0:	|  |  |  |            move.l 8(a0),d0
   111f4:	|  |  |  |        /-- bgt.s 11252 <unlinkVar+0x144>
            FreeVec( thisVar->varData.fastArray -> fastVariables);
   111f6:	|  |  |  |        |   movea.l 24(sp),a0
   111fa:	|  |  |  |        |   movea.l 4(a0),a0
   111fe:	|  |  |  |        |   move.l (a0),16(sp)
   11202:	|  |  |  |        |   move.l 19c5e <SysBase>,d0
   11208:	|  |  |  |        |   movea.l d0,a6
   1120a:	|  |  |  |        |   movea.l 16(sp),a1
   1120e:	|  |  |  |        |   jsr -690(a6)
			FreeVec(thisVar->varData.fastArray);
   11212:	|  |  |  |        |   movea.l 24(sp),a0
   11216:	|  |  |  |        |   move.l 4(a0),12(sp)
   1121c:	|  |  |  |        |   move.l 19c5e <SysBase>,d0
   11222:	|  |  |  |        |   movea.l d0,a6
   11224:	|  |  |  |        |   movea.l 12(sp),a1
   11228:	|  |  |  |        |   jsr -690(a6)
			thisVar->varData.fastArray = NULL;
   1122c:	|  |  |  |        |   movea.l 24(sp),a0
   11230:	|  |  |  |        |   clr.l 4(a0)
		break;
   11234:	|  |  |  |        +-- bra.s 11252 <unlinkVar+0x144>
		deleteAnim (thisVar->varData.animHandler);
   11236:	|  \--|--|--------|-> movea.l 24(sp),a0
   1123a:	|     |  |        |   move.l 4(a0),d0
   1123e:	|     |  |        |   move.l d0,-(sp)
   11240:	|     |  |        |   jsr 6948 <deleteAnim>
   11246:	|     |  |        |   addq.l #4,sp
		break;
   11248:	|     +--|--------|-- bra.s 11254 <unlinkVar+0x146>
		break;
   1124a:	\-----|--|--------|-> nop
   1124c:	      +--|--------|-- bra.s 11254 <unlinkVar+0x146>
		break;
   1124e:	      |  \--------|-> nop
   11250:	      +-----------|-- bra.s 11254 <unlinkVar+0x146>
		break;
   11252:	      |           \-> nop
	}
}
   11254:	      \-------------> nop
   11256:	                      movea.l (sp)+,a6
   11258:	                      lea 16(sp),sp
   1125c:	                      rts

0001125e <copyMain>:

BOOL copyMain (const struct variable *from, struct variable *to) {
	to->varType = from->varType;
   1125e:	       movea.l 4(sp),a0
   11262:	       move.l (a0),d0
   11264:	       movea.l 8(sp),a0
   11268:	       move.l d0,(a0)
	switch (to->varType) {
   1126a:	       movea.l 8(sp),a0
   1126e:	       move.l (a0),d0
   11270:	       moveq #10,d1
   11272:	       cmp.l d0,d1
   11274:	/----- bcs.w 11366 <copyMain+0x108>
   11278:	|      add.l d0,d0
   1127a:	|      movea.l d0,a0
   1127c:	|      adda.l #70280,a0
   11282:	|      move.w (a0),d0
   11284:	|      jmp (11288 <copyMain+0x2a>,pc,d0.w)
   11288:	|      .short 0x00da
   1128a:	|      ori.b #22,(a6)
   1128e:	|      ori.w #22,(a4)
   11292:	|      ori.b #-126,(a6)
   11296:	|      ori.b #-68,(a6)
   1129a:	|      ori.l #2891887,4(a0)
		case SVT_INT:
		case SVT_FUNC:
		case SVT_BUILT:
		case SVT_FILE:
		case SVT_OBJTYPE:
		to->varData.intValue = from->varData.intValue;
   112a2:	|      move.l 4(a0),d0
   112a6:	|      movea.l 8(sp),a0
   112aa:	|      move.l d0,4(a0)
		return TRUE;
   112ae:	|      moveq #1,d0
   112b0:	|  /-- bra.w 11378 <copyMain+0x11a>

		case SVT_FASTARRAY:
		to->varData.fastArray = from->varData.fastArray;
   112b4:	|  |   movea.l 4(sp),a0
   112b8:	|  |   move.l 4(a0),d0
   112bc:	|  |   movea.l 8(sp),a0
   112c0:	|  |   move.l d0,4(a0)
		to->varData.fastArray -> timesUsed ++;
   112c4:	|  |   movea.l 8(sp),a0
   112c8:	|  |   movea.l 4(a0),a0
   112cc:	|  |   move.l 8(a0),d0
   112d0:	|  |   addq.l #1,d0
   112d2:	|  |   move.l d0,8(a0)
		return TRUE;
   112d6:	|  |   moveq #1,d0
   112d8:	|  +-- bra.w 11378 <copyMain+0x11a>

		case SVT_STRING:
		to->varData.theString = copyString (from->varData.theString);
   112dc:	|  |   movea.l 4(sp),a0
   112e0:	|  |   move.l 4(a0),d0
   112e4:	|  |   move.l d0,-(sp)
   112e6:	|  |   jsr b8 <copyString>
   112ec:	|  |   addq.l #4,sp
   112ee:	|  |   movea.l 8(sp),a0
   112f2:	|  |   move.l d0,4(a0)
		return to->varData.theString ? TRUE : FALSE;
   112f6:	|  |   movea.l 8(sp),a0
   112fa:	|  |   move.l 4(a0),d0
   112fe:	|  |   sne d0
   11300:	|  |   neg.b d0
   11302:	|  |   move.b d0,d0
   11304:	|  |   andi.w #255,d0
   11308:	|  +-- bra.s 11378 <copyMain+0x11a>

		case SVT_STACK:
		to->varData.theStack = from->varData.theStack;
   1130a:	|  |   movea.l 4(sp),a0
   1130e:	|  |   move.l 4(a0),d0
   11312:	|  |   movea.l 8(sp),a0
   11316:	|  |   move.l d0,4(a0)
		to->varData.theStack -> timesUsed ++;
   1131a:	|  |   movea.l 8(sp),a0
   1131e:	|  |   movea.l 4(a0),a0
   11322:	|  |   move.l 8(a0),d0
   11326:	|  |   addq.l #1,d0
   11328:	|  |   move.l d0,8(a0)
		return TRUE;
   1132c:	|  |   moveq #1,d0
   1132e:	|  +-- bra.s 11378 <copyMain+0x11a>

		case SVT_COSTUME:
		to->varData.costumeHandler = from->varData.costumeHandler;
   11330:	|  |   movea.l 4(sp),a0
   11334:	|  |   move.l 4(a0),d0
   11338:	|  |   movea.l 8(sp),a0
   1133c:	|  |   move.l d0,4(a0)
		return TRUE;
   11340:	|  |   moveq #1,d0
   11342:	|  +-- bra.s 11378 <copyMain+0x11a>

		case SVT_ANIM:
		to->varData.animHandler = copyAnim (from->varData.animHandler);
   11344:	|  |   movea.l 4(sp),a0
   11348:	|  |   move.l 4(a0),d0
   1134c:	|  |   move.l d0,-(sp)
   1134e:	|  |   jsr 658c <copyAnim>
   11354:	|  |   addq.l #4,sp
   11356:	|  |   movea.l 8(sp),a0
   1135a:	|  |   move.l d0,4(a0)
		return TRUE;
   1135e:	|  |   moveq #1,d0
   11360:	|  +-- bra.s 11378 <copyMain+0x11a>

		case SVT_NULL:
		return TRUE;
   11362:	|  |   moveq #1,d0
   11364:	|  +-- bra.s 11378 <copyMain+0x11a>

		default:
		break;
   11366:	\--|-> nop
	}
	KPrintF("Unknown value type");
   11368:	   |   pea 17025 <main_sludge.c.5731ae9f+0x1c5>
   1136e:	   |   jsr 12f14 <KPrintF>
   11374:	   |   addq.l #4,sp
	return FALSE;
   11376:	   |   clr.w d0
}
   11378:	   \-> rts

0001137a <copyVariable>:

BOOL copyVariable (const struct variable *from, struct variable *to) {
	unlinkVar (to);
   1137a:	move.l 8(sp),-(sp)
   1137e:	jsr 1110e <unlinkVar>
   11384:	addq.l #4,sp
	return copyMain(from, to);
   11386:	move.l 8(sp),-(sp)
   1138a:	move.l 8(sp),-(sp)
   1138e:	jsr 1125e <copyMain>
   11394:	addq.l #8,sp
}
   11396:	rts

00011398 <getAnimationFromVar>:

struct personaAnimation * getAnimationFromVar (struct variable *thisVar) {
	if (thisVar->varType == SVT_ANIM)
   11398:	       movea.l 4(sp),a0
   1139c:	       move.l (a0),d0
   1139e:	       moveq #8,d1
   113a0:	       cmp.l d0,d1
   113a2:	   /-- bne.s 113b8 <getAnimationFromVar+0x20>
		return copyAnim (thisVar->varData.animHandler);
   113a4:	   |   movea.l 4(sp),a0
   113a8:	   |   move.l 4(a0),d0
   113ac:	   |   move.l d0,-(sp)
   113ae:	   |   jsr 658c <copyAnim>
   113b4:	   |   addq.l #4,sp
   113b6:	/--|-- bra.s 113fe <getAnimationFromVar+0x66>

	if (thisVar->varType == SVT_INT && thisVar->varData.intValue == 0)
   113b8:	|  \-> movea.l 4(sp),a0
   113bc:	|      move.l (a0),d0
   113be:	|      moveq #1,d1
   113c0:	|      cmp.l d0,d1
   113c2:	|  /-- bne.s 113d6 <getAnimationFromVar+0x3e>
   113c4:	|  |   movea.l 4(sp),a0
   113c8:	|  |   move.l 4(a0),d0
   113cc:	|  +-- bne.s 113d6 <getAnimationFromVar+0x3e>
		return makeNullAnim();
   113ce:	|  |   jsr 7734 <makeNullAnim>
   113d4:	+--|-- bra.s 113fe <getAnimationFromVar+0x66>

	KPrintF("Expecting an animation variable; found variable of type", typeName[thisVar->varType]);
   113d6:	|  \-> movea.l 4(sp),a0
   113da:	|      move.l (a0),d0
   113dc:	|      add.l d0,d0
   113de:	|      movea.l d0,a1
   113e0:	|      adda.l d0,a1
   113e2:	|      lea 18688 <typeName>,a0
   113e8:	|      move.l (0,a1,a0.l),d0
   113ec:	|      move.l d0,-(sp)
   113ee:	|      pea 16f11 <main_sludge.c.5731ae9f+0xb1>
   113f4:	|      jsr 12f14 <KPrintF>
   113fa:	|      addq.l #8,sp
	return NULL;
   113fc:	|      moveq #0,d0
}
   113fe:	\----> rts

00011400 <getBoolean>:

BOOL getBoolean (const struct variable *from) {
	switch (from->varType) {
   11400:	       movea.l 4(sp),a0
   11404:	       move.l (a0),d0
   11406:	       moveq #10,d1
   11408:	       cmp.l d0,d1
   1140a:	/----- bcs.w 11490 <getBoolean+0x90>
   1140e:	|      add.l d0,d0
   11410:	|      movea.l d0,a0
   11412:	|      adda.l #70686,a0
   11418:	|      move.w (a0),d0
   1141a:	|      jmp (1141e <getBoolean+0x1e>,pc,d0.w)
   1141e:	|      ori.b #26,(a6)
   11422:	|      ori.w #68,(114,a2,d0.w)
   11428:	|      ori.w #46,(114,a2,d0.w)
   1142e:	|      ori.w #114,(90,a2,d0.w)
		case SVT_NULL:
		return FALSE;
   11434:	|      clr.w d0
   11436:	|  /-- bra.s 11494 <getBoolean+0x94>

		case SVT_INT:
		return (BOOL) (from->varData.intValue != 0);
   11438:	|  |   movea.l 4(sp),a0
   1143c:	|  |   move.l 4(a0),d0
   11440:	|  |   sne d0
   11442:	|  |   neg.b d0
   11444:	|  |   move.b d0,d0
   11446:	|  |   andi.w #255,d0
   1144a:	|  +-- bra.s 11494 <getBoolean+0x94>

		case SVT_STACK:
		return (BOOL) (from->varData.theStack -> first != NULL);
   1144c:	|  |   movea.l 4(sp),a0
   11450:	|  |   movea.l 4(a0),a0
   11454:	|  |   move.l (a0),d0
   11456:	|  |   sne d0
   11458:	|  |   neg.b d0
   1145a:	|  |   move.b d0,d0
   1145c:	|  |   andi.w #255,d0
   11460:	|  +-- bra.s 11494 <getBoolean+0x94>

		case SVT_STRING:
		return (BOOL) (from->varData.theString[0] != 0);
   11462:	|  |   movea.l 4(sp),a0
   11466:	|  |   movea.l 4(a0),a0
   1146a:	|  |   move.b (a0),d0
   1146c:	|  |   sne d0
   1146e:	|  |   neg.b d0
   11470:	|  |   move.b d0,d0
   11472:	|  |   andi.w #255,d0
   11476:	|  +-- bra.s 11494 <getBoolean+0x94>

		case SVT_FASTARRAY:
		return (BOOL) (from->varData.fastArray -> size != 0);
   11478:	|  |   movea.l 4(sp),a0
   1147c:	|  |   movea.l 4(a0),a0
   11480:	|  |   move.l 4(a0),d0
   11484:	|  |   sne d0
   11486:	|  |   neg.b d0
   11488:	|  |   move.b d0,d0
   1148a:	|  |   andi.w #255,d0
   1148e:	|  +-- bra.s 11494 <getBoolean+0x94>

		default:
		break;
   11490:	\--|-> nop
	}
	return TRUE;
   11492:	   |   moveq #1,d0
}
   11494:	   \-> rts

00011496 <getTextFromAnyVar>:

char * getTextFromAnyVar (const struct variable *from) {
   11496:	      /----------> lea -76(sp),sp
   1149a:	      |            move.l a6,-(sp)
	switch (from->varType) {
   1149c:	      |            movea.l 84(sp),a0
   114a0:	      |            move.l (a0),d0
   114a2:	      |            moveq #10,d1
   114a4:	      |            cmp.l d0,d1
   114a6:	/-----|----------- bcs.w 11744 <getTextFromAnyVar+0x2ae>
   114aa:	|     |            add.l d0,d0
   114ac:	|     |            movea.l d0,a0
   114ae:	|     |            adda.l #70842,a0
   114b4:	|     |            move.w (a0),d0
   114b6:	|     |            jmp (114ba <getTextFromAnyVar+0x24>,pc,d0.w)
   114ba:	|     |            .short 0x028a
   114bc:	|     |            bset d0,(a0)+
   114be:	|     |            .short 0x028a
   114c0:	|     |            ori.b #-118,(a6)
   114c4:	|     |            andi.b #8,ccr
   114c8:	|     |            andi.w #650,-(a0)
   114cc:	|     |            .short 0x028a
   114ce:	|     |            ori.b #111,84(a4)
		case SVT_STRING:
		return copyString (from->varData.theString);
   114d4:	|     |            move.l 4(a0),d0
   114d8:	|     |            move.l d0,-(sp)
   114da:	|     |            jsr b8 <copyString>
   114e0:	|     |            addq.l #4,sp
   114e2:	|  /--|----------- bra.w 11766 <getTextFromAnyVar+0x2d0>

		case SVT_FASTARRAY:
		{
			char * builder = copyString ("FAST:");
   114e6:	|  |  |            pea 17038 <main_sludge.c.5731ae9f+0x1d8>
   114ec:	|  |  |            jsr b8 <copyString>
   114f2:	|  |  |            addq.l #4,sp
   114f4:	|  |  |            move.l d0,76(sp)
			char * builder2;
			char * grabText;

			for (int i = 0; i < from->varData.fastArray -> size; i ++) {
   114f8:	|  |  |            clr.l 72(sp)
   114fc:	|  |  |     /----- bra.w 115a6 <getTextFromAnyVar+0x110>
				builder2 = joinStrings (builder, " ");
   11500:	|  |  |  /--|----> pea 1703e <main_sludge.c.5731ae9f+0x1de>
   11506:	|  |  |  |  |      move.l 80(sp),-(sp)
   1150a:	|  |  |  |  |      jsr 103ec <joinStrings>
   11510:	|  |  |  |  |      addq.l #8,sp
   11512:	|  |  |  |  |      move.l d0,60(sp)
				if (! builder2) return NULL;
   11516:	|  |  |  |  |  /-- bne.s 1151e <getTextFromAnyVar+0x88>
   11518:	|  |  |  |  |  |   moveq #0,d0
   1151a:	|  +--|--|--|--|-- bra.w 11766 <getTextFromAnyVar+0x2d0>
				FreeVec(builder);
   1151e:	|  |  |  |  |  \-> move.l 76(sp),56(sp)
   11524:	|  |  |  |  |      move.l 19c5e <SysBase>,d0
   1152a:	|  |  |  |  |      movea.l d0,a6
   1152c:	|  |  |  |  |      movea.l 56(sp),a1
   11530:	|  |  |  |  |      jsr -690(a6)
				grabText = getTextFromAnyVar (&from->varData.fastArray -> fastVariables[i]);
   11534:	|  |  |  |  |      movea.l 84(sp),a0
   11538:	|  |  |  |  |      movea.l 4(a0),a0
   1153c:	|  |  |  |  |      move.l (a0),d1
   1153e:	|  |  |  |  |      move.l 72(sp),d0
   11542:	|  |  |  |  |      lsl.l #3,d0
   11544:	|  |  |  |  |      add.l d1,d0
   11546:	|  |  |  |  |      move.l d0,-(sp)
   11548:	|  |  +--|--|----- jsr 11496 <getTextFromAnyVar>(pc)
   1154c:	|  |  |  |  |      addq.l #4,sp
   1154e:	|  |  |  |  |      move.l d0,52(sp)
				builder = joinStrings (builder2, grabText);
   11552:	|  |  |  |  |      move.l 52(sp),-(sp)
   11556:	|  |  |  |  |      move.l 64(sp),-(sp)
   1155a:	|  |  |  |  |      jsr 103ec <joinStrings>
   11560:	|  |  |  |  |      addq.l #8,sp
   11562:	|  |  |  |  |      move.l d0,76(sp)
				if (! builder) return NULL;
   11566:	|  |  |  |  |  /-- bne.s 1156e <getTextFromAnyVar+0xd8>
   11568:	|  |  |  |  |  |   moveq #0,d0
   1156a:	|  +--|--|--|--|-- bra.w 11766 <getTextFromAnyVar+0x2d0>
				FreeVec(grabText);
   1156e:	|  |  |  |  |  \-> move.l 52(sp),48(sp)
   11574:	|  |  |  |  |      move.l 19c5e <SysBase>,d0
   1157a:	|  |  |  |  |      movea.l d0,a6
   1157c:	|  |  |  |  |      movea.l 48(sp),a1
   11580:	|  |  |  |  |      jsr -690(a6)
				grabText = NULL;
   11584:	|  |  |  |  |      clr.l 52(sp)
				FreeVec(builder2);
   11588:	|  |  |  |  |      move.l 60(sp),44(sp)
   1158e:	|  |  |  |  |      move.l 19c5e <SysBase>,d0
   11594:	|  |  |  |  |      movea.l d0,a6
   11596:	|  |  |  |  |      movea.l 44(sp),a1
   1159a:	|  |  |  |  |      jsr -690(a6)
				builder2 = NULL;
   1159e:	|  |  |  |  |      clr.l 60(sp)
			for (int i = 0; i < from->varData.fastArray -> size; i ++) {
   115a2:	|  |  |  |  |      addq.l #1,72(sp)
   115a6:	|  |  |  |  \----> movea.l 84(sp),a0
   115aa:	|  |  |  |         movea.l 4(a0),a0
   115ae:	|  |  |  |         move.l 4(a0),d0
   115b2:	|  |  |  |         cmp.l 72(sp),d0
   115b6:	|  |  |  \-------- bgt.w 11500 <getTextFromAnyVar+0x6a>
			}
			return builder;
   115ba:	|  |  |            move.l 76(sp),d0
   115be:	|  +--|----------- bra.w 11766 <getTextFromAnyVar+0x2d0>
		}

		case SVT_STACK:
		{
			char * builder = copyString ("ARRAY:");
   115c2:	|  |  |            pea 17040 <main_sludge.c.5731ae9f+0x1e0>
   115c8:	|  |  |            jsr b8 <copyString>
   115ce:	|  |  |            addq.l #4,sp
   115d0:	|  |  |            move.l d0,68(sp)
			char * builder2;
			char * grabText;

			struct variableStack * stacky = from->varData.theStack -> first;
   115d4:	|  |  |            movea.l 84(sp),a0
   115d8:	|  |  |            movea.l 4(a0),a0
   115dc:	|  |  |            move.l (a0),64(sp)

			while (stacky) {
   115e0:	|  |  |     /----- bra.w 11682 <getTextFromAnyVar+0x1ec>
				builder2 = joinStrings (builder, " ");
   115e4:	|  |  |  /--|----> pea 1703e <main_sludge.c.5731ae9f+0x1de>
   115ea:	|  |  |  |  |      move.l 72(sp),-(sp)
   115ee:	|  |  |  |  |      jsr 103ec <joinStrings>
   115f4:	|  |  |  |  |      addq.l #8,sp
   115f6:	|  |  |  |  |      move.l d0,36(sp)
				if (! builder2) return NULL;
   115fa:	|  |  |  |  |  /-- bne.s 11602 <getTextFromAnyVar+0x16c>
   115fc:	|  |  |  |  |  |   moveq #0,d0
   115fe:	|  +--|--|--|--|-- bra.w 11766 <getTextFromAnyVar+0x2d0>
				FreeVec(builder);
   11602:	|  |  |  |  |  \-> move.l 68(sp),32(sp)
   11608:	|  |  |  |  |      move.l 19c5e <SysBase>,d0
   1160e:	|  |  |  |  |      movea.l d0,a6
   11610:	|  |  |  |  |      movea.l 32(sp),a1
   11614:	|  |  |  |  |      jsr -690(a6)
				grabText = getTextFromAnyVar (&stacky -> thisVar);
   11618:	|  |  |  |  |      move.l 64(sp),d0
   1161c:	|  |  |  |  |      move.l d0,-(sp)
   1161e:	|  |  \--|--|----- jsr 11496 <getTextFromAnyVar>(pc)
   11622:	|  |     |  |      addq.l #4,sp
   11624:	|  |     |  |      move.l d0,28(sp)
				builder = joinStrings (builder2, grabText);
   11628:	|  |     |  |      move.l 28(sp),-(sp)
   1162c:	|  |     |  |      move.l 40(sp),-(sp)
   11630:	|  |     |  |      jsr 103ec <joinStrings>
   11636:	|  |     |  |      addq.l #8,sp
   11638:	|  |     |  |      move.l d0,68(sp)
				if (! builder) return NULL;
   1163c:	|  |     |  |  /-- bne.s 11644 <getTextFromAnyVar+0x1ae>
   1163e:	|  |     |  |  |   moveq #0,d0
   11640:	|  +-----|--|--|-- bra.w 11766 <getTextFromAnyVar+0x2d0>
				FreeVec(grabText);
   11644:	|  |     |  |  \-> move.l 28(sp),24(sp)
   1164a:	|  |     |  |      move.l 19c5e <SysBase>,d0
   11650:	|  |     |  |      movea.l d0,a6
   11652:	|  |     |  |      movea.l 24(sp),a1
   11656:	|  |     |  |      jsr -690(a6)
				grabText = NULL;
   1165a:	|  |     |  |      clr.l 28(sp)
				FreeVec(builder2);
   1165e:	|  |     |  |      move.l 36(sp),20(sp)
   11664:	|  |     |  |      move.l 19c5e <SysBase>,d0
   1166a:	|  |     |  |      movea.l d0,a6
   1166c:	|  |     |  |      movea.l 20(sp),a1
   11670:	|  |     |  |      jsr -690(a6)
				builder2 = NULL;
   11674:	|  |     |  |      clr.l 36(sp)
				stacky = stacky -> next;
   11678:	|  |     |  |      movea.l 64(sp),a0
   1167c:	|  |     |  |      move.l 8(a0),64(sp)
			while (stacky) {
   11682:	|  |     |  \----> tst.l 64(sp)
   11686:	|  |     \-------- bne.w 115e4 <getTextFromAnyVar+0x14e>
			}
			return builder;
   1168a:	|  |               move.l 68(sp),d0
   1168e:	|  +-------------- bra.w 11766 <getTextFromAnyVar+0x2d0>
		}

		case SVT_INT:
		{
			char * buff = AllocVec(10, MEMF_ANY);
   11692:	|  |               moveq #10,d0
   11694:	|  |               move.l d0,16(sp)
   11698:	|  |               clr.l 12(sp)
   1169c:	|  |               move.l 19c5e <SysBase>,d0
   116a2:	|  |               movea.l d0,a6
   116a4:	|  |               move.l 16(sp),d0
   116a8:	|  |               move.l 12(sp),d1
   116ac:	|  |               jsr -684(a6)
   116b0:	|  |               move.l d0,8(sp)
   116b4:	|  |               move.l 8(sp),d0
   116b8:	|  |               move.l d0,4(sp)
			if (! buff) {
   116bc:	|  |           /-- bne.s 116d2 <getTextFromAnyVar+0x23c>
				KPrintF("getTextFromAnyVar: Cannot allocate Memory");
   116be:	|  |           |   pea 17047 <main_sludge.c.5731ae9f+0x1e7>
   116c4:	|  |           |   jsr 12f14 <KPrintF>
   116ca:	|  |           |   addq.l #4,sp
				return NULL;
   116cc:	|  |           |   moveq #0,d0
   116ce:	|  +-----------|-- bra.w 11766 <getTextFromAnyVar+0x2d0>
			}
			sprintf (buff, "%i", from->varData.intValue);
   116d2:	|  |           \-> movea.l 84(sp),a0
   116d6:	|  |               move.l 4(a0),d0
   116da:	|  |               move.l d0,-(sp)
   116dc:	|  |               pea 17071 <main_sludge.c.5731ae9f+0x211>
   116e2:	|  |               move.l 12(sp),-(sp)
   116e6:	|  |               jsr 106ca <sprintf>
   116ec:	|  |               lea 12(sp),sp
			return buff;
   116f0:	|  |               move.l 4(sp),d0
   116f4:	|  +-------------- bra.s 11766 <getTextFromAnyVar+0x2d0>
		}

		case SVT_FILE:
		{

			return joinStrings ("", resourceNameFromNum (from->varData.intValue));
   116f6:	|  |               movea.l 84(sp),a0
   116fa:	|  |               move.l 4(a0),d0
   116fe:	|  |               move.l d0,-(sp)
   11700:	|  |               jsr 1a92 <resourceNameFromNum>
   11706:	|  |               addq.l #4,sp
   11708:	|  |               move.l d0,-(sp)
   1170a:	|  |               pea 1437d <cursors.c.412ac4f3+0x5d>
   11710:	|  |               jsr 103ec <joinStrings>
   11716:	|  |               addq.l #8,sp
   11718:	|  +-------------- bra.s 11766 <getTextFromAnyVar+0x2d0>
		}

		case SVT_OBJTYPE:
		{
			struct objectType * thisType = findObjectType (from->varData.intValue);
   1171a:	|  |               movea.l 84(sp),a0
   1171e:	|  |               move.l 4(a0),d0
   11722:	|  |               move.l d0,-(sp)
   11724:	|  |               jsr 9d12 <findObjectType>
   1172a:	|  |               addq.l #4,sp
   1172c:	|  |               move.l d0,40(sp)
			if (thisType) return copyString (thisType -> screenName);
   11730:	+--|-------------- beq.s 11744 <getTextFromAnyVar+0x2ae>
   11732:	|  |               movea.l 40(sp),a0
   11736:	|  |               move.l (a0),d0
   11738:	|  |               move.l d0,-(sp)
   1173a:	|  |               jsr b8 <copyString>
   11740:	|  |               addq.l #4,sp
   11742:	|  +-------------- bra.s 11766 <getTextFromAnyVar+0x2d0>
		}

		default:
		break;
   11744:	\--|-------------> nop
	}

	return copyString (typeName[from->varType]);
   11746:	   |               movea.l 84(sp),a0
   1174a:	   |               move.l (a0),d0
   1174c:	   |               add.l d0,d0
   1174e:	   |               movea.l d0,a1
   11750:	   |               adda.l d0,a1
   11752:	   |               lea 18688 <typeName>,a0
   11758:	   |               move.l (0,a1,a0.l),d0
   1175c:	   |               move.l d0,-(sp)
   1175e:	   |               jsr b8 <copyString>
   11764:	   |               addq.l #4,sp
}
   11766:	   \-------------> movea.l (sp)+,a6
   11768:	                   lea 76(sp),sp
   1176c:	                   rts

0001176e <newAnimationVariable>:


void newAnimationVariable (struct variable *thisVar, struct personaAnimation * i) {
	unlinkVar (thisVar);
   1176e:	move.l 4(sp),-(sp)
   11772:	jsr 1110e <unlinkVar>
   11778:	addq.l #4,sp
	thisVar->varType = SVT_ANIM;
   1177a:	movea.l 4(sp),a0
   1177e:	moveq #8,d0
   11780:	move.l d0,(a0)
	thisVar->varData.animHandler = i;
   11782:	movea.l 4(sp),a0
   11786:	move.l 8(sp),4(a0)
}
   1178c:	nop
   1178e:	rts

00011790 <newCostumeVariable>:

void newCostumeVariable (struct variable * thisVar, struct persona * i) {
	unlinkVar(thisVar);
   11790:	move.l 4(sp),-(sp)
   11794:	jsr 1110e <unlinkVar>
   1179a:	addq.l #4,sp
	thisVar->varType = SVT_COSTUME;
   1179c:	movea.l 4(sp),a0
   117a0:	moveq #9,d0
   117a2:	move.l d0,(a0)
	thisVar->varData.costumeHandler = i;
   117a4:	movea.l 4(sp),a0
   117a8:	move.l 8(sp),4(a0)
}
   117ae:	nop
   117b0:	rts

000117b2 <setVariable>:

void setVariable (struct variable *thisVar, enum variableType vT, int value) {
	unlinkVar (thisVar);
   117b2:	move.l 4(sp),-(sp)
   117b6:	jsr 1110e <unlinkVar>
   117bc:	addq.l #4,sp
	thisVar->varType = vT;
   117be:	movea.l 4(sp),a0
   117c2:	move.l 8(sp),(a0)
	thisVar->varData.intValue = value;
   117c6:	movea.l 4(sp),a0
   117ca:	move.l 12(sp),4(a0)
}
   117d0:	nop
   117d2:	rts

000117d4 <stackGetByIndex>:

struct variable * stackGetByIndex (struct variableStack * vS, unsigned int theIndex) {
    while (theIndex--) {
   117d4:	      /-- bra.s 117e6 <stackGetByIndex+0x12>
        vS = vS->next;
   117d6:	/-----|-> movea.l 4(sp),a0
   117da:	|     |   move.l 8(a0),4(sp)
        if (!vS) {
   117e0:	|     +-- bne.s 117e6 <stackGetByIndex+0x12>
            return NULL;
   117e2:	|     |   moveq #0,d0
   117e4:	|  /--|-- bra.s 117fa <stackGetByIndex+0x26>
    while (theIndex--) {
   117e6:	|  |  \-> move.l 8(sp),d0
   117ea:	|  |      move.l d0,d1
   117ec:	|  |      subq.l #1,d1
   117ee:	|  |      move.l d1,8(sp)
   117f2:	|  |      tst.l d0
   117f4:	\--|----- bne.s 117d6 <stackGetByIndex+0x2>
        }
    }
    return &(vS->thisVar);
   117f6:	   |      move.l 4(sp),d0
}
   117fa:	   \----> rts

000117fc <stackFindLast>:

// Would be a LOT better just to keep this up to date in deletevarfromstack function... ah well
struct variableStack * stackFindLast (struct variableStack * hunt) {
	if (hunt == NULL)
   117fc:	          tst.l 4(sp)
   11800:	      /-- bne.s 11810 <stackFindLast+0x14>
		return NULL;
   11802:	      |   moveq #0,d0
   11804:	/-----|-- bra.s 1181e <stackFindLast+0x22>

	while (hunt->next)
		hunt = hunt->next;
   11806:	|  /--|-> movea.l 4(sp),a0
   1180a:	|  |  |   move.l 8(a0),4(sp)
	while (hunt->next)
   11810:	|  |  \-> movea.l 4(sp),a0
   11814:	|  |      move.l 8(a0),d0
   11818:	|  \----- bne.s 11806 <stackFindLast+0xa>

	return hunt;
   1181a:	|         move.l 4(sp),d0
}
   1181e:	\-------> rts

00011820 <stackSize>:

int stackSize (const struct stackHandler * me) {
   11820:	       subq.l #8,sp
	int r = 0;
   11822:	       clr.l 4(sp)
	struct variableStack * a = me -> first;
   11826:	       movea.l 12(sp),a0
   1182a:	       move.l (a0),(sp)
	while (a) {
   1182c:	   /-- bra.s 11838 <stackSize+0x18>
		r ++;
   1182e:	/--|-> addq.l #1,4(sp)
		a = a -> next;
   11832:	|  |   movea.l (sp),a0
   11834:	|  |   move.l 8(a0),(sp)
	while (a) {
   11838:	|  \-> tst.l (sp)
   1183a:	\----- bne.s 1182e <stackSize+0xe>
	}
	return r;
   1183c:	       move.l 4(sp),d0
}
   11840:	       addq.l #8,sp
   11842:	       rts

00011844 <trimStack>:

void trimStack (struct variableStack ** stack) {
   11844:	subq.l #8,sp
   11846:	move.l a6,-(sp)

	struct variableStack* killMe = *stack;
   11848:	movea.l 16(sp),a0
   1184c:	move.l (a0),8(sp)

	*stack = (*stack)->next;
   11850:	movea.l 16(sp),a0
   11854:	movea.l (a0),a0
   11856:	move.l 8(a0),d0
   1185a:	movea.l 16(sp),a0
   1185e:	move.l d0,(a0)

	// When calling this, we've ALWAYS checked that stack != NULL
	unlinkVar (&(killMe -> thisVar));
   11860:	move.l 8(sp),d0
   11864:	move.l d0,-(sp)
   11866:	jsr 1110e <unlinkVar>
   1186c:	addq.l #4,sp
	FreeVec(killMe);
   1186e:	move.l 8(sp),4(sp)
   11874:	move.l 19c5e <SysBase>,d0
   1187a:	movea.l d0,a6
   1187c:	movea.l 4(sp),a1
   11880:	jsr -690(a6)
   11884:	nop
   11886:	movea.l (sp)+,a6
   11888:	addq.l #8,sp
   1188a:	rts

0001188c <isInFont>:

ULONG * fontTable = NULL;
unsigned int fontTableSize = 0;

BOOL isInFont (char * theText) {
	KPrintF("isInFont: Not implemented yet on Amiga"); //Todo: Implement on Amiga
   1188c:	pea 17074 <main_sludge.c.5731ae9f+0x214>
   11892:	jsr 12f14 <KPrintF>
   11898:	addq.l #4,sp
	return FALSE;
   1189a:	clr.w d0
}
   1189c:	rts

0001189e <stringWidth>:

int stringWidth (char * theText) {
   1189e:	       subq.l #8,sp
	int a = 0;
   118a0:	       clr.l 4(sp)
    ULONG c;
	int xOff = 0;
   118a4:	       clr.l (sp)

	if (! fontTableSize) return 0;
   118a6:	       move.l 19d5e <fontTableSize>,d0
   118ac:	/----- bne.s 118b2 <stringWidth+0x14>
   118ae:	|      moveq #0,d0
   118b0:	|  /-- bra.s 118b4 <stringWidth+0x16>
	/*while (theText[a]) {
        c = u8_nextchar(theText, &a);
		xOff += theFont.sprites[fontInTable(c)].width + fontSpace;
	}Todo: Amigize this*/
	
	return xOff;
   118b2:	\--|-> move.l (sp),d0
}
   118b4:	   \-> addq.l #8,sp
   118b6:	       rts

000118b8 <loadFont>:

	FreeVec(fontOrderString);
	fontOrderString = copyString(charOrder);*/

	//forgetSpriteBank(theFont);
	KPrintF("loadFont: Not implemented on Amiga");	
   118b8:	pea 1709b <main_sludge.c.5731ae9f+0x23b>
   118be:	jsr 12f14 <KPrintF>
   118c4:	addq.l #4,sp
		return FALSE;
	}*/

	//numFontColours = theFont.myPalette.total;*/
	//fontHeight = h;
	return TRUE;
   118c6:	moveq #1,d0
}
   118c8:	rts

000118ca <addScreenRegion>:
#include "region.h"

struct screenRegion * allScreenRegions = NULL;
struct screenRegion * overRegion = NULL;

BOOL addScreenRegion(int x1, int y1, int x2, int y2, int sX, int sY, int di, int objectNum) {
   118ca:	       lea -16(sp),sp
   118ce:	       move.l a6,-(sp)
    struct screenRegion *newRegion = AllocVec(sizeof(struct screenRegion), MEMF_ANY);
   118d0:	       moveq #36,d0
   118d2:	       move.l d0,16(sp)
   118d6:	       clr.l 12(sp)
   118da:	       move.l 19c5e <SysBase>,d0
   118e0:	       movea.l d0,a6
   118e2:	       move.l 16(sp),d0
   118e6:	       move.l 12(sp),d1
   118ea:	       jsr -684(a6)
   118ee:	       move.l d0,8(sp)
   118f2:	       move.l 8(sp),d0
   118f6:	       move.l d0,4(sp)
    if (!newRegion) return FALSE;
   118fa:	   /-- bne.s 11902 <addScreenRegion+0x38>
   118fc:	   |   clr.w d0
   118fe:	/--|-- bra.w 11982 <addScreenRegion+0xb8>
    newRegion->di = di;
   11902:	|  \-> movea.l 4(sp),a0
   11906:	|      move.l 48(sp),24(a0)
    newRegion->x1 = x1;
   1190c:	|      movea.l 4(sp),a0
   11910:	|      move.l 24(sp),(a0)
    newRegion->y1 = y1;
   11914:	|      movea.l 4(sp),a0
   11918:	|      move.l 28(sp),4(a0)
    newRegion->x2 = x2;
   1191e:	|      movea.l 4(sp),a0
   11922:	|      move.l 32(sp),8(a0)
    newRegion->y2 = y2;
   11928:	|      movea.l 4(sp),a0
   1192c:	|      move.l 36(sp),12(a0)
    newRegion->sX = sX;
   11932:	|      movea.l 4(sp),a0
   11936:	|      move.l 40(sp),16(a0)
    newRegion->sY = sY;
   1193c:	|      movea.l 4(sp),a0
   11940:	|      move.l 44(sp),20(a0)
    newRegion->thisType = loadObjectType(objectNum);
   11946:	|      move.l 52(sp),-(sp)
   1194a:	|      jsr 9e02 <loadObjectType>
   11950:	|      addq.l #4,sp
   11952:	|      movea.l 4(sp),a0
   11956:	|      move.l d0,28(a0)
    newRegion->next = allScreenRegions;
   1195a:	|      move.l 19d62 <allScreenRegions>,d0
   11960:	|      movea.l 4(sp),a0
   11964:	|      move.l d0,32(a0)
    allScreenRegions = newRegion;
   11968:	|      move.l 4(sp),19d62 <allScreenRegions>
    return (BOOL) (newRegion->thisType != NULL);
   11970:	|      movea.l 4(sp),a0
   11974:	|      move.l 28(a0),d0
   11978:	|      sne d0
   1197a:	|      neg.b d0
   1197c:	|      move.b d0,d0
   1197e:	|      andi.w #255,d0
}
   11982:	\----> movea.l (sp)+,a6
   11984:	       lea 16(sp),sp
   11988:	       rts

0001198a <getRegionForObject>:


struct screenRegion * getRegionForObject (int obj) {
   1198a:	             subq.l #4,sp
	struct screenRegion * thisRegion = allScreenRegions;
   1198c:	             move.l 19d62 <allScreenRegions>,(sp)

	while (thisRegion) {
   11992:	   /-------- bra.s 119ae <getRegionForObject+0x24>
		if (obj == thisRegion -> thisType -> objectNum) {
   11994:	/--|-------> movea.l (sp),a0
   11996:	|  |         movea.l 28(a0),a0
   1199a:	|  |         move.l 4(a0),d0
   1199e:	|  |         cmp.l 8(sp),d0
   119a2:	|  |     /-- bne.s 119a8 <getRegionForObject+0x1e>
			return thisRegion;
   119a4:	|  |     |   move.l (sp),d0
   119a6:	|  |  /--|-- bra.s 119b4 <getRegionForObject+0x2a>
		}
		thisRegion = thisRegion -> next;
   119a8:	|  |  |  \-> movea.l (sp),a0
   119aa:	|  |  |      move.l 32(a0),(sp)
	while (thisRegion) {
   119ae:	|  \--|----> tst.l (sp)
   119b0:	\-----|----- bne.s 11994 <getRegionForObject+0xa>
	}

	return NULL;
   119b2:	      |      moveq #0,d0
}
   119b4:	      \----> addq.l #4,sp
   119b6:	             rts

000119b8 <killAllRegions>:

void killAllRegions () {
   119b8:	       subq.l #8,sp
   119ba:	       move.l a6,-(sp)
	struct screenRegion * killRegion;
	while (allScreenRegions) {
   119bc:	   /-- bra.s 119fe <killAllRegions+0x46>
		killRegion = allScreenRegions;
   119be:	/--|-> move.l 19d62 <allScreenRegions>,8(sp)
		allScreenRegions = allScreenRegions -> next;
   119c6:	|  |   movea.l 19d62 <allScreenRegions>,a0
   119cc:	|  |   move.l 32(a0),d0
   119d0:	|  |   move.l d0,19d62 <allScreenRegions>
		removeObjectType (killRegion -> thisType);
   119d6:	|  |   movea.l 8(sp),a0
   119da:	|  |   move.l 28(a0),d0
   119de:	|  |   move.l d0,-(sp)
   119e0:	|  |   jsr a0ba <removeObjectType>
   119e6:	|  |   addq.l #4,sp
		FreeVec(killRegion);
   119e8:	|  |   move.l 8(sp),4(sp)
   119ee:	|  |   move.l 19c5e <SysBase>,d0
   119f4:	|  |   movea.l d0,a6
   119f6:	|  |   movea.l 4(sp),a1
   119fa:	|  |   jsr -690(a6)
	while (allScreenRegions) {
   119fe:	|  \-> move.l 19d62 <allScreenRegions>,d0
   11a04:	\----- bne.s 119be <killAllRegions+0x6>
	}
	overRegion = NULL;
   11a06:	       clr.l 19d66 <overRegion>
}
   11a0c:	       nop
   11a0e:	       movea.l (sp)+,a6
   11a10:	       addq.l #8,sp
   11a12:	       rts

00011a14 <loadRegions>:

void loadRegions (BPTR fp) {
   11a14:	       lea -24(sp),sp
   11a18:	       move.l a6,-(sp)
	int numRegions = get2bytes (fp);
   11a1a:	       move.l 32(sp),-(sp)
   11a1e:	       jsr 6bc <get2bytes>
   11a24:	       addq.l #4,sp
   11a26:	       move.l d0,24(sp)

	struct screenRegion * newRegion;
	struct screenRegion * * pointy = & allScreenRegions;
   11a2a:	       move.l #105826,20(sp)

	while (numRegions --) {
   11a32:	   /-- bra.w 11b10 <loadRegions+0xfc>
		newRegion = AllocVec( sizeof(struct screenRegion),MEMF_ANY);
   11a36:	/--|-> moveq #36,d0
   11a38:	|  |   move.l d0,16(sp)
   11a3c:	|  |   clr.l 12(sp)
   11a40:	|  |   move.l 19c5e <SysBase>,d0
   11a46:	|  |   movea.l d0,a6
   11a48:	|  |   move.l 16(sp),d0
   11a4c:	|  |   move.l 12(sp),d1
   11a50:	|  |   jsr -684(a6)
   11a54:	|  |   move.l d0,8(sp)
   11a58:	|  |   move.l 8(sp),d0
   11a5c:	|  |   move.l d0,4(sp)
		* pointy = newRegion;
   11a60:	|  |   movea.l 20(sp),a0
   11a64:	|  |   move.l 4(sp),(a0)
		pointy = & (newRegion -> next);
   11a68:	|  |   moveq #32,d1
   11a6a:	|  |   add.l 4(sp),d1
   11a6e:	|  |   move.l d1,20(sp)

		newRegion -> x1 = get2bytes (fp);
   11a72:	|  |   move.l 32(sp),-(sp)
   11a76:	|  |   jsr 6bc <get2bytes>
   11a7c:	|  |   addq.l #4,sp
   11a7e:	|  |   movea.l 4(sp),a0
   11a82:	|  |   move.l d0,(a0)
		newRegion -> y1 = get2bytes (fp);
   11a84:	|  |   move.l 32(sp),-(sp)
   11a88:	|  |   jsr 6bc <get2bytes>
   11a8e:	|  |   addq.l #4,sp
   11a90:	|  |   movea.l 4(sp),a0
   11a94:	|  |   move.l d0,4(a0)
		newRegion -> x2 = get2bytes (fp);
   11a98:	|  |   move.l 32(sp),-(sp)
   11a9c:	|  |   jsr 6bc <get2bytes>
   11aa2:	|  |   addq.l #4,sp
   11aa4:	|  |   movea.l 4(sp),a0
   11aa8:	|  |   move.l d0,8(a0)
		newRegion -> y2 = get2bytes (fp);
   11aac:	|  |   move.l 32(sp),-(sp)
   11ab0:	|  |   jsr 6bc <get2bytes>
   11ab6:	|  |   addq.l #4,sp
   11ab8:	|  |   movea.l 4(sp),a0
   11abc:	|  |   move.l d0,12(a0)
		newRegion -> sX = get2bytes (fp);
   11ac0:	|  |   move.l 32(sp),-(sp)
   11ac4:	|  |   jsr 6bc <get2bytes>
   11aca:	|  |   addq.l #4,sp
   11acc:	|  |   movea.l 4(sp),a0
   11ad0:	|  |   move.l d0,16(a0)
		newRegion -> sY = get2bytes (fp);
   11ad4:	|  |   move.l 32(sp),-(sp)
   11ad8:	|  |   jsr 6bc <get2bytes>
   11ade:	|  |   addq.l #4,sp
   11ae0:	|  |   movea.l 4(sp),a0
   11ae4:	|  |   move.l d0,20(a0)
		newRegion -> di = get2bytes (fp);
   11ae8:	|  |   move.l 32(sp),-(sp)
   11aec:	|  |   jsr 6bc <get2bytes>
   11af2:	|  |   addq.l #4,sp
   11af4:	|  |   movea.l 4(sp),a0
   11af8:	|  |   move.l d0,24(a0)
		newRegion -> thisType = loadObjectRef (fp);
   11afc:	|  |   move.l 32(sp),-(sp)
   11b00:	|  |   jsr 9db0 <loadObjectRef>
   11b06:	|  |   addq.l #4,sp
   11b08:	|  |   movea.l 4(sp),a0
   11b0c:	|  |   move.l d0,28(a0)
	while (numRegions --) {
   11b10:	|  \-> move.l 24(sp),d0
   11b14:	|      move.l d0,d1
   11b16:	|      subq.l #1,d1
   11b18:	|      move.l d1,24(sp)
   11b1c:	|      tst.l d0
   11b1e:	\----- bne.w 11a36 <loadRegions+0x22>
	}
	* pointy = NULL;
   11b22:	       movea.l 20(sp),a0
   11b26:	       clr.l (a0)
}
   11b28:	       nop
   11b2a:	       movea.l (sp)+,a6
   11b2c:	       lea 24(sp),sp
   11b30:	       rts

00011b32 <removeScreenRegion>:

void removeScreenRegion (int objectNum) {
   11b32:	             lea -12(sp),sp
   11b36:	             move.l a6,-(sp)
    struct screenRegion ** huntRegion = &allScreenRegions;
   11b38:	             move.l #105826,12(sp)
    struct screenRegion * killMe;

    while (*huntRegion) {
   11b40:	   /-------- bra.s 11bba <removeScreenRegion+0x88>
        if ((*huntRegion)->thisType->objectNum == objectNum) {
   11b42:	/--|-------> movea.l 12(sp),a0
   11b46:	|  |         movea.l (a0),a0
   11b48:	|  |         movea.l 28(a0),a0
   11b4c:	|  |         move.l 4(a0),d0
   11b50:	|  |         cmp.l 20(sp),d0
   11b54:	|  |  /----- bne.s 11bac <removeScreenRegion+0x7a>
            killMe = *huntRegion;
   11b56:	|  |  |      movea.l 12(sp),a0
   11b5a:	|  |  |      move.l (a0),8(sp)
            *huntRegion = killMe->next;
   11b5e:	|  |  |      movea.l 8(sp),a0
   11b62:	|  |  |      move.l 32(a0),d0
   11b66:	|  |  |      movea.l 12(sp),a0
   11b6a:	|  |  |      move.l d0,(a0)
            removeObjectType(killMe->thisType);
   11b6c:	|  |  |      movea.l 8(sp),a0
   11b70:	|  |  |      move.l 28(a0),d0
   11b74:	|  |  |      move.l d0,-(sp)
   11b76:	|  |  |      jsr a0ba <removeObjectType>
   11b7c:	|  |  |      addq.l #4,sp
            if (killMe == overRegion) overRegion = NULL;
   11b7e:	|  |  |      move.l 19d66 <overRegion>,d0
   11b84:	|  |  |      cmp.l 8(sp),d0
   11b88:	|  |  |  /-- bne.s 11b90 <removeScreenRegion+0x5e>
   11b8a:	|  |  |  |   clr.l 19d66 <overRegion>
            FreeVec(killMe);
   11b90:	|  |  |  \-> move.l 8(sp),4(sp)
   11b96:	|  |  |      move.l 19c5e <SysBase>,d0
   11b9c:	|  |  |      movea.l d0,a6
   11b9e:	|  |  |      movea.l 4(sp),a1
   11ba2:	|  |  |      jsr -690(a6)
            killMe = NULL;
   11ba6:	|  |  |      clr.l 8(sp)
   11baa:	|  +--|----- bra.s 11bba <removeScreenRegion+0x88>
        } else {
            huntRegion = &((*huntRegion)->next);
   11bac:	|  |  \----> movea.l 12(sp),a0
   11bb0:	|  |         move.l (a0),d0
   11bb2:	|  |         moveq #32,d1
   11bb4:	|  |         add.l d0,d1
   11bb6:	|  |         move.l d1,12(sp)
    while (*huntRegion) {
   11bba:	|  \-------> movea.l 12(sp),a0
   11bbe:	|            move.l (a0),d0
   11bc0:	\----------- bne.s 11b42 <removeScreenRegion+0x10>
        }
    }
}
   11bc2:	             nop
   11bc4:	             nop
   11bc6:	             movea.l (sp)+,a6
   11bc8:	             lea 12(sp),sp
   11bcc:	             rts

00011bce <saveRegions>:

void saveRegions (BPTR fp) {
   11bce:	       subq.l #8,sp
	int numRegions = 0;
   11bd0:	       clr.l 4(sp)
	struct screenRegion * thisRegion = allScreenRegions;
   11bd4:	       move.l 19d62 <allScreenRegions>,(sp)
	while (thisRegion) {
   11bda:	   /-- bra.s 11be6 <saveRegions+0x18>
		thisRegion = thisRegion -> next;
   11bdc:	/--|-> movea.l (sp),a0
   11bde:	|  |   move.l 32(a0),(sp)
		numRegions ++;
   11be2:	|  |   addq.l #1,4(sp)
	while (thisRegion) {
   11be6:	|  \-> tst.l (sp)
   11be8:	\----- bne.s 11bdc <saveRegions+0xe>
	}
	put2bytes (numRegions, fp);
   11bea:	       move.l 12(sp),-(sp)
   11bee:	       move.l 8(sp),-(sp)
   11bf2:	       jsr 8d0 <put2bytes>
   11bf8:	       addq.l #8,sp
	thisRegion = allScreenRegions;
   11bfa:	       move.l 19d62 <allScreenRegions>,(sp)
	while (thisRegion) {
   11c00:	/----- bra.w 11ca8 <saveRegions+0xda>
		put2bytes (thisRegion -> x1, fp);
   11c04:	|  /-> movea.l (sp),a0
   11c06:	|  |   move.l (a0),d0
   11c08:	|  |   move.l 12(sp),-(sp)
   11c0c:	|  |   move.l d0,-(sp)
   11c0e:	|  |   jsr 8d0 <put2bytes>
   11c14:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> y1, fp);
   11c16:	|  |   movea.l (sp),a0
   11c18:	|  |   move.l 4(a0),d0
   11c1c:	|  |   move.l 12(sp),-(sp)
   11c20:	|  |   move.l d0,-(sp)
   11c22:	|  |   jsr 8d0 <put2bytes>
   11c28:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> x2, fp);
   11c2a:	|  |   movea.l (sp),a0
   11c2c:	|  |   move.l 8(a0),d0
   11c30:	|  |   move.l 12(sp),-(sp)
   11c34:	|  |   move.l d0,-(sp)
   11c36:	|  |   jsr 8d0 <put2bytes>
   11c3c:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> y2, fp);
   11c3e:	|  |   movea.l (sp),a0
   11c40:	|  |   move.l 12(a0),d0
   11c44:	|  |   move.l 12(sp),-(sp)
   11c48:	|  |   move.l d0,-(sp)
   11c4a:	|  |   jsr 8d0 <put2bytes>
   11c50:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> sX, fp);
   11c52:	|  |   movea.l (sp),a0
   11c54:	|  |   move.l 16(a0),d0
   11c58:	|  |   move.l 12(sp),-(sp)
   11c5c:	|  |   move.l d0,-(sp)
   11c5e:	|  |   jsr 8d0 <put2bytes>
   11c64:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> sY, fp);
   11c66:	|  |   movea.l (sp),a0
   11c68:	|  |   move.l 20(a0),d0
   11c6c:	|  |   move.l 12(sp),-(sp)
   11c70:	|  |   move.l d0,-(sp)
   11c72:	|  |   jsr 8d0 <put2bytes>
   11c78:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> di, fp);
   11c7a:	|  |   movea.l (sp),a0
   11c7c:	|  |   move.l 24(a0),d0
   11c80:	|  |   move.l 12(sp),-(sp)
   11c84:	|  |   move.l d0,-(sp)
   11c86:	|  |   jsr 8d0 <put2bytes>
   11c8c:	|  |   addq.l #8,sp
		saveObjectRef (thisRegion -> thisType, fp);
   11c8e:	|  |   movea.l (sp),a0
   11c90:	|  |   move.l 28(a0),d0
   11c94:	|  |   move.l 12(sp),-(sp)
   11c98:	|  |   move.l d0,-(sp)
   11c9a:	|  |   jsr a15a <saveObjectRef>
   11ca0:	|  |   addq.l #8,sp

		thisRegion = thisRegion -> next;
   11ca2:	|  |   movea.l (sp),a0
   11ca4:	|  |   move.l 32(a0),(sp)
	while (thisRegion) {
   11ca8:	\--|-> tst.l (sp)
   11caa:	   \-- bne.w 11c04 <saveRegions+0x36>
	}
}
   11cae:	       nop
   11cb0:	       nop
   11cb2:	       addq.l #8,sp
   11cb4:	       rts

00011cb6 <showBoxes>:

void showBoxes () {
   11cb6:	       subq.l #4,sp
	struct screenRegion * huntRegion = allScreenRegions;
   11cb8:	       move.l 19d62 <allScreenRegions>,(sp)

	while (huntRegion) {
   11cbe:	/----- bra.w 11d5a <showBoxes+0xa4>
		drawVerticalLine (huntRegion -> x1, huntRegion -> y1, huntRegion -> y2);
   11cc2:	|  /-> movea.l (sp),a0
   11cc4:	|  |   move.l 12(a0),d0
   11cc8:	|  |   movea.l d0,a1
   11cca:	|  |   movea.l (sp),a0
   11ccc:	|  |   move.l 4(a0),d0
   11cd0:	|  |   move.l d0,d1
   11cd2:	|  |   movea.l (sp),a0
   11cd4:	|  |   move.l (a0),d0
   11cd6:	|  |   move.l a1,-(sp)
   11cd8:	|  |   move.l d1,-(sp)
   11cda:	|  |   move.l d0,-(sp)
   11cdc:	|  |   jsr 99e6 <drawVerticalLine>
   11ce2:	|  |   lea 12(sp),sp
		drawVerticalLine (huntRegion -> x2, huntRegion -> y1, huntRegion -> y2);
   11ce6:	|  |   movea.l (sp),a0
   11ce8:	|  |   move.l 12(a0),d0
   11cec:	|  |   movea.l d0,a1
   11cee:	|  |   movea.l (sp),a0
   11cf0:	|  |   move.l 4(a0),d0
   11cf4:	|  |   move.l d0,d1
   11cf6:	|  |   movea.l (sp),a0
   11cf8:	|  |   move.l 8(a0),d0
   11cfc:	|  |   move.l a1,-(sp)
   11cfe:	|  |   move.l d1,-(sp)
   11d00:	|  |   move.l d0,-(sp)
   11d02:	|  |   jsr 99e6 <drawVerticalLine>
   11d08:	|  |   lea 12(sp),sp
		drawHorizontalLine (huntRegion -> x1, huntRegion -> y1, huntRegion -> x2);
   11d0c:	|  |   movea.l (sp),a0
   11d0e:	|  |   move.l 8(a0),d0
   11d12:	|  |   movea.l d0,a1
   11d14:	|  |   movea.l (sp),a0
   11d16:	|  |   move.l 4(a0),d0
   11d1a:	|  |   move.l d0,d1
   11d1c:	|  |   movea.l (sp),a0
   11d1e:	|  |   move.l (a0),d0
   11d20:	|  |   move.l a1,-(sp)
   11d22:	|  |   move.l d1,-(sp)
   11d24:	|  |   move.l d0,-(sp)
   11d26:	|  |   jsr 99c0 <drawHorizontalLine>
   11d2c:	|  |   lea 12(sp),sp
		drawHorizontalLine (huntRegion -> x1, huntRegion -> y2, huntRegion -> x2);
   11d30:	|  |   movea.l (sp),a0
   11d32:	|  |   move.l 8(a0),d0
   11d36:	|  |   movea.l d0,a1
   11d38:	|  |   movea.l (sp),a0
   11d3a:	|  |   move.l 12(a0),d0
   11d3e:	|  |   move.l d0,d1
   11d40:	|  |   movea.l (sp),a0
   11d42:	|  |   move.l (a0),d0
   11d44:	|  |   move.l a1,-(sp)
   11d46:	|  |   move.l d1,-(sp)
   11d48:	|  |   move.l d0,-(sp)
   11d4a:	|  |   jsr 99c0 <drawHorizontalLine>
   11d50:	|  |   lea 12(sp),sp
		huntRegion = huntRegion -> next;
   11d54:	|  |   movea.l (sp),a0
   11d56:	|  |   move.l 32(a0),(sp)
	while (huntRegion) {
   11d5a:	\--|-> tst.l (sp)
   11d5c:	   \-- bne.w 11cc2 <showBoxes+0xc>
	}
   11d60:	       nop
   11d62:	       nop
   11d64:	       addq.l #4,sp
   11d66:	       rts

00011d68 <closestPointOnLine>:
#include "support/gcc8_c_support.h"
#include "line.h"

struct flor * currentFloor = NULL;

BOOL closestPointOnLine (int * closestX, int * closestY, int x1, int y1, int x2, int y2, int xP, int yP) {
   11d68:	       lea -32(sp),sp
   11d6c:	       move.l d3,-(sp)
   11d6e:	       move.l d2,-(sp)
	int xDiff = x2 - x1;
   11d70:	       move.l 60(sp),d0
   11d74:	       sub.l 52(sp),d0
   11d78:	       move.l d0,36(sp)
	int yDiff = y2 - y1;
   11d7c:	       move.l 64(sp),d0
   11d80:	       sub.l 56(sp),d0
   11d84:	       move.l d0,32(sp)

	double m = xDiff * (xP - x1) + yDiff * (yP - y1);
   11d88:	       move.l 68(sp),d0
   11d8c:	       sub.l 52(sp),d0
   11d90:	       move.l 36(sp),-(sp)
   11d94:	       move.l d0,-(sp)
   11d96:	       jsr 13a0a <__mulsi3>
   11d9c:	       addq.l #8,sp
   11d9e:	       move.l d0,d2
   11da0:	       move.l 72(sp),d0
   11da4:	       sub.l 56(sp),d0
   11da8:	       move.l 32(sp),-(sp)
   11dac:	       move.l d0,-(sp)
   11dae:	       jsr 13a0a <__mulsi3>
   11db4:	       addq.l #8,sp
   11db6:	       add.l d2,d0
   11db8:	       move.l d0,-(sp)
   11dba:	       jsr 13470 <__floatsidf>
   11dc0:	       addq.l #4,sp
   11dc2:	       move.l d0,16(sp)
   11dc6:	       move.l d1,20(sp)
   11dca:	       move.l 16(sp),24(sp)
   11dd0:	       move.l 20(sp),28(sp)
	m /= (xDiff * xDiff) + (yDiff * yDiff);
   11dd6:	       move.l 36(sp),-(sp)
   11dda:	       move.l 40(sp),-(sp)
   11dde:	       jsr 13a0a <__mulsi3>
   11de4:	       addq.l #8,sp
   11de6:	       move.l d0,d2
   11de8:	       move.l 32(sp),-(sp)
   11dec:	       move.l 36(sp),-(sp)
   11df0:	       jsr 13a0a <__mulsi3>
   11df6:	       addq.l #8,sp
   11df8:	       add.l d2,d0
   11dfa:	       move.l d0,-(sp)
   11dfc:	       jsr 13470 <__floatsidf>
   11e02:	       addq.l #4,sp
   11e04:	       move.l d1,-(sp)
   11e06:	       move.l d0,-(sp)
   11e08:	       move.l 36(sp),-(sp)
   11e0c:	       move.l 36(sp),-(sp)
   11e10:	       jsr 132fa <__divdf3>
   11e16:	       lea 16(sp),sp
   11e1a:	       move.l d0,8(sp)
   11e1e:	       move.l d1,12(sp)
   11e22:	       move.l 8(sp),24(sp)
   11e28:	       move.l 12(sp),28(sp)

	if (m < 0) {
   11e2e:	       clr.l -(sp)
   11e30:	       clr.l -(sp)
   11e32:	       move.l 36(sp),-(sp)
   11e36:	       move.l 36(sp),-(sp)
   11e3a:	       jsr 13688 <__ltdf2>
   11e40:	       lea 16(sp),sp
   11e44:	       tst.l d0
   11e46:	   /-- bge.s 11e5c <closestPointOnLine+0xf4>
		*closestX = x1;
   11e48:	   |   movea.l 44(sp),a0
   11e4c:	   |   move.l 52(sp),(a0)
		*closestY = y1;
   11e50:	   |   movea.l 48(sp),a0
   11e54:	   |   move.l 56(sp),(a0)
   11e58:	/--|-- bra.w 11f3e <closestPointOnLine+0x1d6>
	} else if (m > 1) {
   11e5c:	|  \-> clr.l -(sp)
   11e5e:	|      move.l #1072693248,-(sp)
   11e64:	|      move.l 36(sp),-(sp)
   11e68:	|      move.l 36(sp),-(sp)
   11e6c:	|      jsr 135ce <__gtdf2>
   11e72:	|      lea 16(sp),sp
   11e76:	|      tst.l d0
   11e78:	|  /-- ble.s 11e8e <closestPointOnLine+0x126>
		*closestX = x2;
   11e7a:	|  |   movea.l 44(sp),a0
   11e7e:	|  |   move.l 60(sp),(a0)
		*closestY = y2;
   11e82:	|  |   movea.l 48(sp),a0
   11e86:	|  |   move.l 64(sp),(a0)
   11e8a:	+--|-- bra.w 11f3e <closestPointOnLine+0x1d6>
	} else {
		*closestX = x1 + m * xDiff;
   11e8e:	|  \-> move.l 52(sp),-(sp)
   11e92:	|      jsr 13470 <__floatsidf>
   11e98:	|      addq.l #4,sp
   11e9a:	|      move.l d0,d2
   11e9c:	|      move.l d1,d3
   11e9e:	|      move.l 36(sp),-(sp)
   11ea2:	|      jsr 13470 <__floatsidf>
   11ea8:	|      addq.l #4,sp
   11eaa:	|      move.l 28(sp),-(sp)
   11eae:	|      move.l 28(sp),-(sp)
   11eb2:	|      move.l d1,-(sp)
   11eb4:	|      move.l d0,-(sp)
   11eb6:	|      jsr 13500 <__muldf3>
   11ebc:	|      lea 16(sp),sp
   11ec0:	|      move.l d1,-(sp)
   11ec2:	|      move.l d0,-(sp)
   11ec4:	|      move.l d3,-(sp)
   11ec6:	|      move.l d2,-(sp)
   11ec8:	|      jsr 13298 <__adddf3>
   11ece:	|      lea 16(sp),sp
   11ed2:	|      move.l d1,-(sp)
   11ed4:	|      move.l d0,-(sp)
   11ed6:	|      jsr 13408 <__fixdfsi>
   11edc:	|      addq.l #8,sp
   11ede:	|      movea.l 44(sp),a0
   11ee2:	|      move.l d0,(a0)
		*closestY = y1 + m * yDiff;
   11ee4:	|      move.l 56(sp),-(sp)
   11ee8:	|      jsr 13470 <__floatsidf>
   11eee:	|      addq.l #4,sp
   11ef0:	|      move.l d0,d2
   11ef2:	|      move.l d1,d3
   11ef4:	|      move.l 32(sp),-(sp)
   11ef8:	|      jsr 13470 <__floatsidf>
   11efe:	|      addq.l #4,sp
   11f00:	|      move.l 28(sp),-(sp)
   11f04:	|      move.l 28(sp),-(sp)
   11f08:	|      move.l d1,-(sp)
   11f0a:	|      move.l d0,-(sp)
   11f0c:	|      jsr 13500 <__muldf3>
   11f12:	|      lea 16(sp),sp
   11f16:	|      move.l d1,-(sp)
   11f18:	|      move.l d0,-(sp)
   11f1a:	|      move.l d3,-(sp)
   11f1c:	|      move.l d2,-(sp)
   11f1e:	|      jsr 13298 <__adddf3>
   11f24:	|      lea 16(sp),sp
   11f28:	|      move.l d1,-(sp)
   11f2a:	|      move.l d0,-(sp)
   11f2c:	|      jsr 13408 <__fixdfsi>
   11f32:	|      addq.l #8,sp
   11f34:	|      movea.l 48(sp),a0
   11f38:	|      move.l d0,(a0)
		return TRUE;
   11f3a:	|      moveq #1,d0
   11f3c:	|  /-- bra.s 11f40 <closestPointOnLine+0x1d8>
	}
	return FALSE;
   11f3e:	\--|-> clr.w d0
}
   11f40:	   \-> move.l (sp)+,d2
   11f42:	       move.l (sp)+,d3
   11f44:	       lea 32(sp),sp
   11f48:	       rts

00011f4a <drawFloor>:

void drawFloor() {
   11f4a:	                lea -12(sp),sp
   11f4e:	                move.l d3,-(sp)
   11f50:	                move.l d2,-(sp)
    int i, j, nV;
    for (i = 0; i < currentFloor->numPolygons; i++) {
   11f52:	                clr.l 16(sp)
   11f56:	   /----------- bra.w 1216a <drawFloor+0x220>
        nV = currentFloor->polygon[i].numVertices;
   11f5a:	/--|----------> movea.l 19d6a <currentFloor>,a0
   11f60:	|  |            move.l 12(a0),d1
   11f64:	|  |            move.l 16(sp),d0
   11f68:	|  |            lsl.l #3,d0
   11f6a:	|  |            movea.l d1,a0
   11f6c:	|  |            adda.l d0,a0
   11f6e:	|  |            move.l (a0),8(sp)
        if (nV > 1) {
   11f72:	|  |            moveq #1,d0
   11f74:	|  |            cmp.l 8(sp),d0
   11f78:	|  |  /-------- bge.w 12166 <drawFloor+0x21c>
            for (j = 1; j < nV; j++) {
   11f7c:	|  |  |         moveq #1,d0
   11f7e:	|  |  |         move.l d0,12(sp)
   11f82:	|  |  |     /-- bra.w 1207c <drawFloor+0x132>
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].y,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].x,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].y);
   11f86:	|  |  |  /--|-> movea.l 19d6a <currentFloor>,a0
   11f8c:	|  |  |  |  |   move.l 4(a0),d1
   11f90:	|  |  |  |  |   movea.l 19d6a <currentFloor>,a0
   11f96:	|  |  |  |  |   movea.l 12(a0),a0
   11f9a:	|  |  |  |  |   move.l 16(sp),d0
   11f9e:	|  |  |  |  |   lsl.l #3,d0
   11fa0:	|  |  |  |  |   adda.l d0,a0
   11fa2:	|  |  |  |  |   movea.l 4(a0),a0
   11fa6:	|  |  |  |  |   move.l 12(sp),d0
   11faa:	|  |  |  |  |   add.l d0,d0
   11fac:	|  |  |  |  |   add.l d0,d0
   11fae:	|  |  |  |  |   adda.l d0,a0
   11fb0:	|  |  |  |  |   move.l (a0),d0
   11fb2:	|  |  |  |  |   lsl.l #3,d0
   11fb4:	|  |  |  |  |   movea.l d1,a0
   11fb6:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   11fb8:	|  |  |  |  |   move.l 4(a0),d2
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].x,
   11fbc:	|  |  |  |  |   movea.l 19d6a <currentFloor>,a0
   11fc2:	|  |  |  |  |   move.l 4(a0),d1
   11fc6:	|  |  |  |  |   movea.l 19d6a <currentFloor>,a0
   11fcc:	|  |  |  |  |   movea.l 12(a0),a0
   11fd0:	|  |  |  |  |   move.l 16(sp),d0
   11fd4:	|  |  |  |  |   lsl.l #3,d0
   11fd6:	|  |  |  |  |   adda.l d0,a0
   11fd8:	|  |  |  |  |   movea.l 4(a0),a0
   11fdc:	|  |  |  |  |   move.l 12(sp),d0
   11fe0:	|  |  |  |  |   add.l d0,d0
   11fe2:	|  |  |  |  |   add.l d0,d0
   11fe4:	|  |  |  |  |   adda.l d0,a0
   11fe6:	|  |  |  |  |   move.l (a0),d0
   11fe8:	|  |  |  |  |   lsl.l #3,d0
   11fea:	|  |  |  |  |   movea.l d1,a0
   11fec:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   11fee:	|  |  |  |  |   movea.l (a0),a1
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].y,
   11ff0:	|  |  |  |  |   movea.l 19d6a <currentFloor>,a0
   11ff6:	|  |  |  |  |   move.l 4(a0),d1
   11ffa:	|  |  |  |  |   movea.l 19d6a <currentFloor>,a0
   12000:	|  |  |  |  |   movea.l 12(a0),a0
   12004:	|  |  |  |  |   move.l 16(sp),d0
   12008:	|  |  |  |  |   lsl.l #3,d0
   1200a:	|  |  |  |  |   adda.l d0,a0
   1200c:	|  |  |  |  |   movea.l 4(a0),a0
   12010:	|  |  |  |  |   move.l 12(sp),d0
   12014:	|  |  |  |  |   addi.l #1073741823,d0
   1201a:	|  |  |  |  |   add.l d0,d0
   1201c:	|  |  |  |  |   add.l d0,d0
   1201e:	|  |  |  |  |   adda.l d0,a0
   12020:	|  |  |  |  |   move.l (a0),d0
   12022:	|  |  |  |  |   lsl.l #3,d0
   12024:	|  |  |  |  |   movea.l d1,a0
   12026:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   12028:	|  |  |  |  |   move.l 4(a0),d1
   1202c:	|  |  |  |  |   movea.l 19d6a <currentFloor>,a0
   12032:	|  |  |  |  |   move.l 4(a0),d3
   12036:	|  |  |  |  |   movea.l 19d6a <currentFloor>,a0
   1203c:	|  |  |  |  |   movea.l 12(a0),a0
   12040:	|  |  |  |  |   move.l 16(sp),d0
   12044:	|  |  |  |  |   lsl.l #3,d0
   12046:	|  |  |  |  |   adda.l d0,a0
   12048:	|  |  |  |  |   movea.l 4(a0),a0
   1204c:	|  |  |  |  |   move.l 12(sp),d0
   12050:	|  |  |  |  |   addi.l #1073741823,d0
   12056:	|  |  |  |  |   add.l d0,d0
   12058:	|  |  |  |  |   add.l d0,d0
   1205a:	|  |  |  |  |   adda.l d0,a0
   1205c:	|  |  |  |  |   move.l (a0),d0
   1205e:	|  |  |  |  |   lsl.l #3,d0
   12060:	|  |  |  |  |   movea.l d3,a0
   12062:	|  |  |  |  |   adda.l d0,a0
   12064:	|  |  |  |  |   move.l (a0),d0
   12066:	|  |  |  |  |   move.l d2,-(sp)
   12068:	|  |  |  |  |   move.l a1,-(sp)
   1206a:	|  |  |  |  |   move.l d1,-(sp)
   1206c:	|  |  |  |  |   move.l d0,-(sp)
   1206e:	|  |  |  |  |   jsr 17fc <drawLine>
   12074:	|  |  |  |  |   lea 16(sp),sp
            for (j = 1; j < nV; j++) {
   12078:	|  |  |  |  |   addq.l #1,12(sp)
   1207c:	|  |  |  |  \-> move.l 12(sp),d0
   12080:	|  |  |  |      cmp.l 8(sp),d0
   12084:	|  |  |  \----- blt.w 11f86 <drawFloor+0x3c>
            }
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].y,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].x,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].y);
   12088:	|  |  |         movea.l 19d6a <currentFloor>,a0
   1208e:	|  |  |         move.l 4(a0),d1
   12092:	|  |  |         movea.l 19d6a <currentFloor>,a0
   12098:	|  |  |         movea.l 12(a0),a0
   1209c:	|  |  |         move.l 16(sp),d0
   120a0:	|  |  |         lsl.l #3,d0
   120a2:	|  |  |         adda.l d0,a0
   120a4:	|  |  |         movea.l 4(a0),a0
   120a8:	|  |  |         move.l 8(sp),d0
   120ac:	|  |  |         addi.l #1073741823,d0
   120b2:	|  |  |         add.l d0,d0
   120b4:	|  |  |         add.l d0,d0
   120b6:	|  |  |         adda.l d0,a0
   120b8:	|  |  |         move.l (a0),d0
   120ba:	|  |  |         lsl.l #3,d0
   120bc:	|  |  |         movea.l d1,a0
   120be:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   120c0:	|  |  |         move.l 4(a0),d2
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].x,
   120c4:	|  |  |         movea.l 19d6a <currentFloor>,a0
   120ca:	|  |  |         move.l 4(a0),d1
   120ce:	|  |  |         movea.l 19d6a <currentFloor>,a0
   120d4:	|  |  |         movea.l 12(a0),a0
   120d8:	|  |  |         move.l 16(sp),d0
   120dc:	|  |  |         lsl.l #3,d0
   120de:	|  |  |         adda.l d0,a0
   120e0:	|  |  |         movea.l 4(a0),a0
   120e4:	|  |  |         move.l 8(sp),d0
   120e8:	|  |  |         addi.l #1073741823,d0
   120ee:	|  |  |         add.l d0,d0
   120f0:	|  |  |         add.l d0,d0
   120f2:	|  |  |         adda.l d0,a0
   120f4:	|  |  |         move.l (a0),d0
   120f6:	|  |  |         lsl.l #3,d0
   120f8:	|  |  |         movea.l d1,a0
   120fa:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   120fc:	|  |  |         movea.l (a0),a1
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].y,
   120fe:	|  |  |         movea.l 19d6a <currentFloor>,a0
   12104:	|  |  |         move.l 4(a0),d1
   12108:	|  |  |         movea.l 19d6a <currentFloor>,a0
   1210e:	|  |  |         movea.l 12(a0),a0
   12112:	|  |  |         move.l 16(sp),d0
   12116:	|  |  |         lsl.l #3,d0
   12118:	|  |  |         adda.l d0,a0
   1211a:	|  |  |         movea.l 4(a0),a0
   1211e:	|  |  |         move.l (a0),d0
   12120:	|  |  |         lsl.l #3,d0
   12122:	|  |  |         movea.l d1,a0
   12124:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   12126:	|  |  |         move.l 4(a0),d1
   1212a:	|  |  |         movea.l 19d6a <currentFloor>,a0
   12130:	|  |  |         move.l 4(a0),d3
   12134:	|  |  |         movea.l 19d6a <currentFloor>,a0
   1213a:	|  |  |         movea.l 12(a0),a0
   1213e:	|  |  |         move.l 16(sp),d0
   12142:	|  |  |         lsl.l #3,d0
   12144:	|  |  |         adda.l d0,a0
   12146:	|  |  |         movea.l 4(a0),a0
   1214a:	|  |  |         move.l (a0),d0
   1214c:	|  |  |         lsl.l #3,d0
   1214e:	|  |  |         movea.l d3,a0
   12150:	|  |  |         adda.l d0,a0
   12152:	|  |  |         move.l (a0),d0
   12154:	|  |  |         move.l d2,-(sp)
   12156:	|  |  |         move.l a1,-(sp)
   12158:	|  |  |         move.l d1,-(sp)
   1215a:	|  |  |         move.l d0,-(sp)
   1215c:	|  |  |         jsr 17fc <drawLine>
   12162:	|  |  |         lea 16(sp),sp
    for (i = 0; i < currentFloor->numPolygons; i++) {
   12166:	|  |  \-------> addq.l #1,16(sp)
   1216a:	|  \----------> movea.l 19d6a <currentFloor>,a0
   12170:	|               move.l 8(a0),d0
   12174:	|               cmp.l 16(sp),d0
   12178:	\-------------- bgt.w 11f5a <drawFloor+0x10>
        }
    }
}
   1217c:	                nop
   1217e:	                nop
   12180:	                move.l (sp)+,d2
   12182:	                move.l (sp)+,d3
   12184:	                lea 12(sp),sp
   12188:	                rts

0001218a <getMatchingCorners>:

BOOL getMatchingCorners(struct floorPolygon *a, struct floorPolygon *b, int *cornerA, int *cornerB) {
   1218a:	                      lea -12(sp),sp
    int sharedVertices = 0;
   1218e:	                      clr.l 8(sp)
    int i, j;

    for (i = 0; i < a->numVertices; i++) {
   12192:	                      clr.l 4(sp)
   12196:	   /----------------- bra.w 12228 <getMatchingCorners+0x9e>
        for (j = 0; j < b->numVertices; j++) {
   1219a:	/--|----------------> clr.l (sp)
   1219c:	|  |     /----------- bra.s 12218 <getMatchingCorners+0x8e>
            if (a->vertexID[i] == b->vertexID[j]) {
   1219e:	|  |  /--|----------> movea.l 16(sp),a0
   121a2:	|  |  |  |            move.l 4(a0),d1
   121a6:	|  |  |  |            move.l 4(sp),d0
   121aa:	|  |  |  |            add.l d0,d0
   121ac:	|  |  |  |            add.l d0,d0
   121ae:	|  |  |  |            movea.l d1,a0
   121b0:	|  |  |  |            adda.l d0,a0
   121b2:	|  |  |  |            move.l (a0),d1
   121b4:	|  |  |  |            movea.l 20(sp),a0
   121b8:	|  |  |  |            movea.l 4(a0),a0
   121bc:	|  |  |  |            move.l (sp),d0
   121be:	|  |  |  |            add.l d0,d0
   121c0:	|  |  |  |            add.l d0,d0
   121c2:	|  |  |  |            adda.l d0,a0
   121c4:	|  |  |  |            move.l (a0),d0
   121c6:	|  |  |  |            cmp.l d1,d0
   121c8:	|  |  |  |  /-------- bne.s 12216 <getMatchingCorners+0x8c>
                if (sharedVertices++) {
   121ca:	|  |  |  |  |         move.l 8(sp),d0
   121ce:	|  |  |  |  |         move.l d0,d1
   121d0:	|  |  |  |  |         addq.l #1,d1
   121d2:	|  |  |  |  |         move.l d1,8(sp)
   121d6:	|  |  |  |  |         tst.l d0
   121d8:	|  |  |  |  |     /-- beq.s 121fa <getMatchingCorners+0x70>
                    *cornerB = a->vertexID[i];
   121da:	|  |  |  |  |     |   movea.l 16(sp),a0
   121de:	|  |  |  |  |     |   move.l 4(a0),d1
   121e2:	|  |  |  |  |     |   move.l 4(sp),d0
   121e6:	|  |  |  |  |     |   add.l d0,d0
   121e8:	|  |  |  |  |     |   add.l d0,d0
   121ea:	|  |  |  |  |     |   movea.l d1,a0
   121ec:	|  |  |  |  |     |   adda.l d0,a0
   121ee:	|  |  |  |  |     |   move.l (a0),d0
   121f0:	|  |  |  |  |     |   movea.l 28(sp),a0
   121f4:	|  |  |  |  |     |   move.l d0,(a0)
                    return TRUE;
   121f6:	|  |  |  |  |     |   moveq #1,d0
   121f8:	|  |  |  |  |  /--|-- bra.s 12238 <getMatchingCorners+0xae>
                } else {
                    *cornerA = a->vertexID[i];
   121fa:	|  |  |  |  |  |  \-> movea.l 16(sp),a0
   121fe:	|  |  |  |  |  |      move.l 4(a0),d1
   12202:	|  |  |  |  |  |      move.l 4(sp),d0
   12206:	|  |  |  |  |  |      add.l d0,d0
   12208:	|  |  |  |  |  |      add.l d0,d0
   1220a:	|  |  |  |  |  |      movea.l d1,a0
   1220c:	|  |  |  |  |  |      adda.l d0,a0
   1220e:	|  |  |  |  |  |      move.l (a0),d0
   12210:	|  |  |  |  |  |      movea.l 24(sp),a0
   12214:	|  |  |  |  |  |      move.l d0,(a0)
        for (j = 0; j < b->numVertices; j++) {
   12216:	|  |  |  |  \--|----> addq.l #1,(sp)
   12218:	|  |  |  \-----|----> movea.l 20(sp),a0
   1221c:	|  |  |        |      move.l (a0),d0
   1221e:	|  |  |        |      cmp.l (sp),d0
   12220:	|  |  \--------|----- bgt.w 1219e <getMatchingCorners+0x14>
    for (i = 0; i < a->numVertices; i++) {
   12224:	|  |           |      addq.l #1,4(sp)
   12228:	|  \-----------|----> movea.l 16(sp),a0
   1222c:	|              |      move.l (a0),d0
   1222e:	|              |      cmp.l 4(sp),d0
   12232:	\--------------|----- bgt.w 1219a <getMatchingCorners+0x10>
                }
            }
        }
    }

    return FALSE;
   12236:	               |      clr.w d0
}
   12238:	               \----> lea 12(sp),sp
   1223c:	                      rts

0001223e <noFloor>:



void noFloor () {
	currentFloor -> numPolygons = 0;
   1223e:	movea.l 19d6a <currentFloor>,a0
   12244:	clr.l 8(a0)
	currentFloor -> polygon = NULL;
   12248:	movea.l 19d6a <currentFloor>,a0
   1224e:	clr.l 12(a0)
	currentFloor -> vertex = NULL;
   12252:	movea.l 19d6a <currentFloor>,a0
   12258:	clr.l 4(a0)
	currentFloor -> matrix = NULL;
   1225c:	movea.l 19d6a <currentFloor>,a0
   12262:	clr.l 16(a0)
}
   12266:	nop
   12268:	rts

0001226a <inFloor>:

int inFloor (int x, int y) {
   1226a:	          subq.l #8,sp
	int i, r = -1;
   1226c:	          moveq #-1,d0
   1226e:	          move.l d0,(sp)

	for (i = 0; i < currentFloor -> numPolygons; i ++)
   12270:	          clr.l 4(sp)
   12274:	   /----- bra.s 122a8 <inFloor+0x3e>
		if (pointInFloorPolygon (&currentFloor -> polygon[i], x, y))
   12276:	/--|----> movea.l 19d6a <currentFloor>,a0
   1227c:	|  |      move.l 12(a0),d1
   12280:	|  |      move.l 4(sp),d0
   12284:	|  |      lsl.l #3,d0
   12286:	|  |      add.l d1,d0
   12288:	|  |      move.l 16(sp),-(sp)
   1228c:	|  |      move.l 16(sp),-(sp)
   12290:	|  |      move.l d0,-(sp)
   12292:	|  |      jsr 12474 <pointInFloorPolygon>
   12298:	|  |      lea 12(sp),sp
   1229c:	|  |      tst.w d0
   1229e:	|  |  /-- beq.s 122a4 <inFloor+0x3a>
			r = i;
   122a0:	|  |  |   move.l 4(sp),(sp)
	for (i = 0; i < currentFloor -> numPolygons; i ++)
   122a4:	|  |  \-> addq.l #1,4(sp)
   122a8:	|  \----> movea.l 19d6a <currentFloor>,a0
   122ae:	|         move.l 8(a0),d0
   122b2:	|         cmp.l 4(sp),d0
   122b6:	\-------- bgt.s 12276 <inFloor+0xc>

	return r;
   122b8:	          move.l (sp),d0
}
   122ba:	          addq.l #8,sp
   122bc:	          rts

000122be <initFloor>:

BOOL initFloor () {
   122be:	       lea -12(sp),sp
   122c2:	       move.l a6,-(sp)
	currentFloor = AllocVec(sizeof(struct flor), MEMF_ANY);
   122c4:	       moveq #20,d0
   122c6:	       move.l d0,12(sp)
   122ca:	       clr.l 8(sp)
   122ce:	       move.l 19c5e <SysBase>,d0
   122d4:	       movea.l d0,a6
   122d6:	       move.l 12(sp),d0
   122da:	       move.l 8(sp),d1
   122de:	       jsr -684(a6)
   122e2:	       move.l d0,4(sp)
   122e6:	       move.l 4(sp),d0
   122ea:	       move.l d0,19d6a <currentFloor>

    if(currentFloor == 0) {
   122f0:	       move.l 19d6a <currentFloor>,d0
   122f6:	/----- bne.s 1230a <initFloor+0x4c>
        KPrintF("initFloor: Could not initialize Mem");
   122f8:	|      pea 170be <main_sludge.c.5731ae9f+0x25e>
   122fe:	|      jsr 12f14 <KPrintF>
   12304:	|      addq.l #4,sp
        return FALSE;
   12306:	|      clr.w d0
   12308:	|  /-- bra.s 12312 <initFloor+0x54>
    }

	noFloor ();
   1230a:	\--|-> jsr 1223e <noFloor>
	return TRUE;
   12310:	   |   moveq #1,d0
}
   12312:	   \-> movea.l (sp)+,a6
   12314:	       lea 12(sp),sp
   12318:	       rts

0001231a <killFloor>:

void killFloor () {
   1231a:	       lea -24(sp),sp
   1231e:	       move.l a6,-(sp)
	for (int i = 0; i < currentFloor -> numPolygons; i ++) {
   12320:	       clr.l 24(sp)
   12324:	   /-- bra.s 1237e <killFloor+0x64>
		FreeVec(currentFloor -> polygon[i].vertexID);
   12326:	/--|-> movea.l 19d6a <currentFloor>,a0
   1232c:	|  |   move.l 12(a0),d1
   12330:	|  |   move.l 24(sp),d0
   12334:	|  |   lsl.l #3,d0
   12336:	|  |   movea.l d1,a0
   12338:	|  |   adda.l d0,a0
   1233a:	|  |   move.l 4(a0),8(sp)
   12340:	|  |   move.l 19c5e <SysBase>,d0
   12346:	|  |   movea.l d0,a6
   12348:	|  |   movea.l 8(sp),a1
   1234c:	|  |   jsr -690(a6)
		FreeVec(currentFloor -> matrix[i]);
   12350:	|  |   movea.l 19d6a <currentFloor>,a0
   12356:	|  |   move.l 16(a0),d1
   1235a:	|  |   move.l 24(sp),d0
   1235e:	|  |   add.l d0,d0
   12360:	|  |   add.l d0,d0
   12362:	|  |   movea.l d1,a0
   12364:	|  |   adda.l d0,a0
   12366:	|  |   move.l (a0),4(sp)
   1236a:	|  |   move.l 19c5e <SysBase>,d0
   12370:	|  |   movea.l d0,a6
   12372:	|  |   movea.l 4(sp),a1
   12376:	|  |   jsr -690(a6)
	for (int i = 0; i < currentFloor -> numPolygons; i ++) {
   1237a:	|  |   addq.l #1,24(sp)
   1237e:	|  \-> movea.l 19d6a <currentFloor>,a0
   12384:	|      move.l 8(a0),d0
   12388:	|      cmp.l 24(sp),d0
   1238c:	\----- bgt.s 12326 <killFloor+0xc>
	}
	FreeVec(currentFloor -> polygon);
   1238e:	       movea.l 19d6a <currentFloor>,a0
   12394:	       move.l 12(a0),20(sp)
   1239a:	       move.l 19c5e <SysBase>,d0
   123a0:	       movea.l d0,a6
   123a2:	       movea.l 20(sp),a1
   123a6:	       jsr -690(a6)
	currentFloor -> polygon = NULL;
   123aa:	       movea.l 19d6a <currentFloor>,a0
   123b0:	       clr.l 12(a0)
	FreeVec(currentFloor -> vertex);
   123b4:	       movea.l 19d6a <currentFloor>,a0
   123ba:	       move.l 4(a0),16(sp)
   123c0:	       move.l 19c5e <SysBase>,d0
   123c6:	       movea.l d0,a6
   123c8:	       movea.l 16(sp),a1
   123cc:	       jsr -690(a6)
	currentFloor -> vertex = NULL;
   123d0:	       movea.l 19d6a <currentFloor>,a0
   123d6:	       clr.l 4(a0)
	FreeVec(currentFloor -> matrix);
   123da:	       movea.l 19d6a <currentFloor>,a0
   123e0:	       move.l 16(a0),12(sp)
   123e6:	       move.l 19c5e <SysBase>,d0
   123ec:	       movea.l d0,a6
   123ee:	       movea.l 12(sp),a1
   123f2:	       jsr -690(a6)
	currentFloor -> matrix = NULL;
   123f6:	       movea.l 19d6a <currentFloor>,a0
   123fc:	       clr.l 16(a0)
}
   12400:	       nop
   12402:	       movea.l (sp)+,a6
   12404:	       lea 24(sp),sp
   12408:	       rts

0001240a <polysShareSide>:

BOOL polysShareSide (struct floorPolygon a, struct floorPolygon b) {
   1240a:	                   lea -12(sp),sp
	int sharedVertices = 0;
   1240e:	                   clr.l 8(sp)
	int i, j;

	for (i = 0; i < a.numVertices; i ++) {
   12412:	                   clr.l 4(sp)
   12416:	   /-------------- bra.s 12462 <polysShareSide+0x58>
		for (j = 0; j < b.numVertices; j ++) {
   12418:	/--|-------------> clr.l (sp)
   1241a:	|  |     /-------- bra.s 12456 <polysShareSide+0x4c>
			if (a.vertexID[i] == b.vertexID[j]) {
   1241c:	|  |  /--|-------> move.l 20(sp),d1
   12420:	|  |  |  |         move.l 4(sp),d0
   12424:	|  |  |  |         add.l d0,d0
   12426:	|  |  |  |         add.l d0,d0
   12428:	|  |  |  |         movea.l d1,a0
   1242a:	|  |  |  |         adda.l d0,a0
   1242c:	|  |  |  |         move.l (a0),d1
   1242e:	|  |  |  |         movea.l 28(sp),a0
   12432:	|  |  |  |         move.l (sp),d0
   12434:	|  |  |  |         add.l d0,d0
   12436:	|  |  |  |         add.l d0,d0
   12438:	|  |  |  |         adda.l d0,a0
   1243a:	|  |  |  |         move.l (a0),d0
   1243c:	|  |  |  |         cmp.l d1,d0
   1243e:	|  |  |  |     /-- bne.s 12454 <polysShareSide+0x4a>
				if (sharedVertices ++) return TRUE;
   12440:	|  |  |  |     |   move.l 8(sp),d0
   12444:	|  |  |  |     |   move.l d0,d1
   12446:	|  |  |  |     |   addq.l #1,d1
   12448:	|  |  |  |     |   move.l d1,8(sp)
   1244c:	|  |  |  |     |   tst.l d0
   1244e:	|  |  |  |     +-- beq.s 12454 <polysShareSide+0x4a>
   12450:	|  |  |  |     |   moveq #1,d0
   12452:	|  |  |  |  /--|-- bra.s 1246e <polysShareSide+0x64>
		for (j = 0; j < b.numVertices; j ++) {
   12454:	|  |  |  |  |  \-> addq.l #1,(sp)
   12456:	|  |  |  \--|----> move.l 24(sp),d0
   1245a:	|  |  |     |      cmp.l (sp),d0
   1245c:	|  |  \-----|----- bgt.s 1241c <polysShareSide+0x12>
	for (i = 0; i < a.numVertices; i ++) {
   1245e:	|  |        |      addq.l #1,4(sp)
   12462:	|  \--------|----> move.l 16(sp),d0
   12466:	|           |      cmp.l 4(sp),d0
   1246a:	\-----------|----- bgt.s 12418 <polysShareSide+0xe>
			}
		}
	}

	return FALSE;
   1246c:	            |      clr.w d0
}
   1246e:	            \----> lea 12(sp),sp
   12472:	                   rts

00012474 <pointInFloorPolygon>:

BOOL pointInFloorPolygon (struct floorPolygon * floorPoly, int x, int y) {
   12474:	             lea -28(sp),sp
   12478:	             move.l d3,-(sp)
   1247a:	             move.l d2,-(sp)
	int i = 0, j, c = 0;
   1247c:	             clr.l 32(sp)
   12480:	             clr.l 24(sp)
	float xp_i, yp_i;
	float xp_j, yp_j;

	for (j = floorPoly->numVertices - 1; i < floorPoly->numVertices; j = i++) {
   12484:	             movea.l 40(sp),a0
   12488:	             move.l (a0),d0
   1248a:	             move.l d0,d1
   1248c:	             subq.l #1,d1
   1248e:	             move.l d1,28(sp)
   12492:	   /-------- bra.w 1268c <pointInFloorPolygon+0x218>

		xp_i = currentFloor->vertex[floorPoly->vertexID[i]].x;
   12496:	/--|-------> movea.l 19d6a <currentFloor>,a0
   1249c:	|  |         move.l 4(a0),d1
   124a0:	|  |         movea.l 40(sp),a0
   124a4:	|  |         movea.l 4(a0),a0
   124a8:	|  |         move.l 32(sp),d0
   124ac:	|  |         add.l d0,d0
   124ae:	|  |         add.l d0,d0
   124b0:	|  |         adda.l d0,a0
   124b2:	|  |         move.l (a0),d0
   124b4:	|  |         lsl.l #3,d0
   124b6:	|  |         movea.l d1,a0
   124b8:	|  |         adda.l d0,a0
   124ba:	|  |         move.l (a0),d0
   124bc:	|  |         move.l d0,-(sp)
   124be:	|  |         jsr 134b0 <__floatsisf>
   124c4:	|  |         addq.l #4,sp
   124c6:	|  |         move.l d0,20(sp)
		yp_i = currentFloor->vertex[floorPoly->vertexID[i]].y;
   124ca:	|  |         movea.l 19d6a <currentFloor>,a0
   124d0:	|  |         move.l 4(a0),d1
   124d4:	|  |         movea.l 40(sp),a0
   124d8:	|  |         movea.l 4(a0),a0
   124dc:	|  |         move.l 32(sp),d0
   124e0:	|  |         add.l d0,d0
   124e2:	|  |         add.l d0,d0
   124e4:	|  |         adda.l d0,a0
   124e6:	|  |         move.l (a0),d0
   124e8:	|  |         lsl.l #3,d0
   124ea:	|  |         movea.l d1,a0
   124ec:	|  |         adda.l d0,a0
   124ee:	|  |         move.l 4(a0),d0
   124f2:	|  |         move.l d0,-(sp)
   124f4:	|  |         jsr 134b0 <__floatsisf>
   124fa:	|  |         addq.l #4,sp
   124fc:	|  |         move.l d0,16(sp)
		xp_j = currentFloor->vertex[floorPoly->vertexID[j]].x;
   12500:	|  |         movea.l 19d6a <currentFloor>,a0
   12506:	|  |         move.l 4(a0),d1
   1250a:	|  |         movea.l 40(sp),a0
   1250e:	|  |         movea.l 4(a0),a0
   12512:	|  |         move.l 28(sp),d0
   12516:	|  |         add.l d0,d0
   12518:	|  |         add.l d0,d0
   1251a:	|  |         adda.l d0,a0
   1251c:	|  |         move.l (a0),d0
   1251e:	|  |         lsl.l #3,d0
   12520:	|  |         movea.l d1,a0
   12522:	|  |         adda.l d0,a0
   12524:	|  |         move.l (a0),d0
   12526:	|  |         move.l d0,-(sp)
   12528:	|  |         jsr 134b0 <__floatsisf>
   1252e:	|  |         addq.l #4,sp
   12530:	|  |         move.l d0,12(sp)
		yp_j = currentFloor->vertex[floorPoly->vertexID[j]].y;
   12534:	|  |         movea.l 19d6a <currentFloor>,a0
   1253a:	|  |         move.l 4(a0),d1
   1253e:	|  |         movea.l 40(sp),a0
   12542:	|  |         movea.l 4(a0),a0
   12546:	|  |         move.l 28(sp),d0
   1254a:	|  |         add.l d0,d0
   1254c:	|  |         add.l d0,d0
   1254e:	|  |         adda.l d0,a0
   12550:	|  |         move.l (a0),d0
   12552:	|  |         lsl.l #3,d0
   12554:	|  |         movea.l d1,a0
   12556:	|  |         adda.l d0,a0
   12558:	|  |         move.l 4(a0),d0
   1255c:	|  |         move.l d0,-(sp)
   1255e:	|  |         jsr 134b0 <__floatsisf>
   12564:	|  |         addq.l #4,sp
   12566:	|  |         move.l d0,8(sp)

		if ((((yp_i <= y) && (y < yp_j)) || ((yp_j <= y) && (y < yp_i))) &&
   1256a:	|  |         move.l 48(sp),-(sp)
   1256e:	|  |         jsr 134b0 <__floatsisf>
   12574:	|  |         addq.l #4,sp
   12576:	|  |         move.l d0,-(sp)
   12578:	|  |         move.l 20(sp),-(sp)
   1257c:	|  |         jsr 13652 <__lesf2>
   12582:	|  |         addq.l #8,sp
   12584:	|  |         tst.l d0
   12586:	|  |     /-- bgt.s 125a6 <pointInFloorPolygon+0x132>
   12588:	|  |     |   move.l 48(sp),-(sp)
   1258c:	|  |     |   jsr 134b0 <__floatsisf>
   12592:	|  |     |   addq.l #4,sp
   12594:	|  |     |   move.l d0,-(sp)
   12596:	|  |     |   move.l 12(sp),-(sp)
   1259a:	|  |     |   jsr 1361c <__gtsf2>
   125a0:	|  |     |   addq.l #8,sp
   125a2:	|  |     |   tst.l d0
   125a4:	|  |  /--|-- bgt.s 125e6 <pointInFloorPolygon+0x172>
   125a6:	|  |  |  \-> move.l 48(sp),-(sp)
   125aa:	|  |  |      jsr 134b0 <__floatsisf>
   125b0:	|  |  |      addq.l #4,sp
   125b2:	|  |  |      move.l d0,-(sp)
   125b4:	|  |  |      move.l 12(sp),-(sp)
   125b8:	|  |  |      jsr 13652 <__lesf2>
   125be:	|  |  |      addq.l #8,sp
   125c0:	|  |  |      tst.l d0
   125c2:	|  |  |  /-- bgt.w 1267c <pointInFloorPolygon+0x208>
   125c6:	|  |  |  |   move.l 48(sp),-(sp)
   125ca:	|  |  |  |   jsr 134b0 <__floatsisf>
   125d0:	|  |  |  |   addq.l #4,sp
   125d2:	|  |  |  |   move.l d0,-(sp)
   125d4:	|  |  |  |   move.l 20(sp),-(sp)
   125d8:	|  |  |  |   jsr 1361c <__gtsf2>
   125de:	|  |  |  |   addq.l #8,sp
   125e0:	|  |  |  |   tst.l d0
   125e2:	|  |  |  +-- ble.w 1267c <pointInFloorPolygon+0x208>
			(x < (xp_j - xp_i) * (y - yp_i) / (yp_j - yp_i) + xp_i)) {
   125e6:	|  |  \--|-> move.l 44(sp),-(sp)
   125ea:	|  |     |   jsr 134b0 <__floatsisf>
   125f0:	|  |     |   addq.l #4,sp
   125f2:	|  |     |   move.l d0,d3
   125f4:	|  |     |   move.l 20(sp),-(sp)
   125f8:	|  |     |   move.l 16(sp),-(sp)
   125fc:	|  |     |   jsr 137a4 <__subsf3>
   12602:	|  |     |   addq.l #8,sp
   12604:	|  |     |   move.l d0,d2
   12606:	|  |     |   move.l 48(sp),-(sp)
   1260a:	|  |     |   jsr 134b0 <__floatsisf>
   12610:	|  |     |   addq.l #4,sp
   12612:	|  |     |   move.l 16(sp),-(sp)
   12616:	|  |     |   move.l d0,-(sp)
   12618:	|  |     |   jsr 137a4 <__subsf3>
   1261e:	|  |     |   addq.l #8,sp
   12620:	|  |     |   move.l d0,-(sp)
   12622:	|  |     |   move.l d2,-(sp)
   12624:	|  |     |   jsr 13562 <__mulsf3>
   1262a:	|  |     |   addq.l #8,sp
   1262c:	|  |     |   move.l d0,d2
   1262e:	|  |     |   move.l 16(sp),-(sp)
   12632:	|  |     |   move.l 12(sp),-(sp)
   12636:	|  |     |   jsr 137a4 <__subsf3>
   1263c:	|  |     |   addq.l #8,sp
   1263e:	|  |     |   move.l d0,-(sp)
   12640:	|  |     |   move.l d2,-(sp)
   12642:	|  |     |   jsr 1335c <__divsf3>
   12648:	|  |     |   addq.l #8,sp
   1264a:	|  |     |   move.l 20(sp),-(sp)
   1264e:	|  |     |   move.l d0,-(sp)
   12650:	|  |     |   jsr 13262 <__addsf3>
   12656:	|  |     |   addq.l #8,sp
		if ((((yp_i <= y) && (y < yp_j)) || ((yp_j <= y) && (y < yp_i))) &&
   12658:	|  |     |   move.l d0,-(sp)
   1265a:	|  |     |   move.l d3,-(sp)
   1265c:	|  |     |   jsr 136d6 <__ltsf2>
   12662:	|  |     |   addq.l #8,sp
   12664:	|  |     |   tst.l d0
   12666:	|  |     +-- bge.s 1267c <pointInFloorPolygon+0x208>

			c = !c;
   12668:	|  |     |   tst.l 24(sp)
   1266c:	|  |     |   seq d0
   1266e:	|  |     |   neg.b d0
   12670:	|  |     |   move.b d0,d0
   12672:	|  |     |   andi.l #255,d0
   12678:	|  |     |   move.l d0,24(sp)
	for (j = floorPoly->numVertices - 1; i < floorPoly->numVertices; j = i++) {
   1267c:	|  |     \-> move.l 32(sp),d0
   12680:	|  |         move.l d0,d1
   12682:	|  |         addq.l #1,d1
   12684:	|  |         move.l d1,32(sp)
   12688:	|  |         move.l d0,28(sp)
   1268c:	|  \-------> movea.l 40(sp),a0
   12690:	|            move.l (a0),d0
   12692:	|            cmp.l 32(sp),d0
   12696:	\----------- bgt.w 12496 <pointInFloorPolygon+0x22>
		}
	}
	return c ? TRUE : FALSE;
   1269a:	             tst.l 24(sp)
   1269e:	             sne d0
   126a0:	             neg.b d0
   126a2:	             move.b d0,d0
   126a4:	             andi.w #255,d0
}
   126a8:	             move.l (sp)+,d2
   126aa:	             move.l (sp)+,d3
   126ac:	             lea 28(sp),sp
   126b0:	             rts

000126b2 <setFloor>:

BOOL setFloor (int fileNum) {
   126b2:	                               lea -132(sp),sp
   126b6:	                               move.l a6,-(sp)
   126b8:	                               move.l a2,-(sp)
	int i, j;

	killFloor ();
   126ba:	                               jsr 1231a <killFloor>

	if (! openFileFromNum (fileNum)) return FALSE;
   126c0:	                               move.l 144(sp),-(sp)
   126c4:	                               jsr 48da <openFileFromNum>
   126ca:	                               addq.l #4,sp
   126cc:	                               tst.l d0
   126ce:	                           /-- bne.s 126d6 <setFloor+0x24>
   126d0:	                           |   clr.w d0
   126d2:	/--------------------------|-- bra.w 12e22 <setFloor+0x770>

	// Find out how many polygons there are and reserve memory

	currentFloor -> originalNum = fileNum;
   126d6:	|                          \-> movea.l 19d6a <currentFloor>,a0
   126dc:	|                              move.l 144(sp),(a0)
	currentFloor -> numPolygons = FGetC (bigDataFile);
   126e0:	|                              move.l 19c46 <bigDataFile>,118(sp)
   126e8:	|                              move.l 19c66 <DOSBase>,d0
   126ee:	|                              movea.l d0,a6
   126f0:	|                              move.l 118(sp),d1
   126f4:	|                              jsr -306(a6)
   126f8:	|                              move.l d0,114(sp)
   126fc:	|                              move.l 114(sp),d0
   12700:	|                              movea.l 19d6a <currentFloor>,a0
   12706:	|                              move.l d0,8(a0)
	currentFloor -> polygon = AllocVec(  sizeof( struct floorPolygon) * currentFloor -> numPolygons, MEMF_ANY);
   1270a:	|                              movea.l 19d6a <currentFloor>,a0
   12710:	|                              move.l 8(a0),d0
   12714:	|                              lsl.l #3,d0
   12716:	|                              move.l d0,110(sp)
   1271a:	|                              clr.l 106(sp)
   1271e:	|                              move.l 19c5e <SysBase>,d0
   12724:	|                              movea.l d0,a6
   12726:	|                              move.l 110(sp),d0
   1272a:	|                              move.l 106(sp),d1
   1272e:	|                              jsr -684(a6)
   12732:	|                              move.l d0,102(sp)
   12736:	|                              move.l 102(sp),d0
   1273a:	|                              movea.l 19d6a <currentFloor>,a0
   12740:	|                              move.l d0,12(a0)
	if (!(currentFloor -> polygon)) {
   12744:	|                              movea.l 19d6a <currentFloor>,a0
   1274a:	|                              move.l 12(a0),d0
   1274e:	|                          /-- bne.s 12764 <setFloor+0xb2>
		KPrintF("setFloor: Cannot allocate memory");
   12750:	|                          |   pea 170e2 <main_sludge.c.5731ae9f+0x282>
   12756:	|                          |   jsr 12f14 <KPrintF>
   1275c:	|                          |   addq.l #4,sp
		return FALSE;
   1275e:	|                          |   clr.w d0
   12760:	+--------------------------|-- bra.w 12e22 <setFloor+0x770>
	}

	// Read in each polygon

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   12764:	|                          \-> clr.l 136(sp)
   12768:	|                    /-------- bra.w 12880 <setFloor+0x1ce>

		// Find out how many vertex IDs there are and reserve memory

		currentFloor -> polygon[i].numVertices = FGetC (bigDataFile);
   1276c:	|                 /--|-------> move.l 19c46 <bigDataFile>,26(sp)
   12774:	|                 |  |         move.l 19c66 <DOSBase>,d0
   1277a:	|                 |  |         movea.l d0,a6
   1277c:	|                 |  |         move.l 26(sp),d1
   12780:	|                 |  |         jsr -306(a6)
   12784:	|                 |  |         move.l d0,22(sp)
   12788:	|                 |  |         move.l 22(sp),d1
   1278c:	|                 |  |         movea.l 19d6a <currentFloor>,a0
   12792:	|                 |  |         movea.l 12(a0),a0
   12796:	|                 |  |         move.l 136(sp),d0
   1279a:	|                 |  |         lsl.l #3,d0
   1279c:	|                 |  |         adda.l d0,a0
   1279e:	|                 |  |         move.l d1,(a0)
		currentFloor -> polygon[i].vertexID = AllocVec(sizeof (int) * currentFloor -> polygon[i].numVertices, MEMF_ANY);
   127a0:	|                 |  |         movea.l 19d6a <currentFloor>,a0
   127a6:	|                 |  |         move.l 12(a0),d1
   127aa:	|                 |  |         move.l 136(sp),d0
   127ae:	|                 |  |         lsl.l #3,d0
   127b0:	|                 |  |         movea.l d1,a0
   127b2:	|                 |  |         adda.l d0,a0
   127b4:	|                 |  |         move.l (a0),d0
   127b6:	|                 |  |         add.l d0,d0
   127b8:	|                 |  |         add.l d0,d0
   127ba:	|                 |  |         move.l d0,18(sp)
   127be:	|                 |  |         clr.l 14(sp)
   127c2:	|                 |  |         move.l 19c5e <SysBase>,d0
   127c8:	|                 |  |         movea.l d0,a6
   127ca:	|                 |  |         move.l 18(sp),d0
   127ce:	|                 |  |         move.l 14(sp),d1
   127d2:	|                 |  |         jsr -684(a6)
   127d6:	|                 |  |         move.l d0,10(sp)
   127da:	|                 |  |         move.l 10(sp),d1
   127de:	|                 |  |         movea.l 19d6a <currentFloor>,a0
   127e4:	|                 |  |         movea.l 12(a0),a0
   127e8:	|                 |  |         move.l 136(sp),d0
   127ec:	|                 |  |         lsl.l #3,d0
   127ee:	|                 |  |         adda.l d0,a0
   127f0:	|                 |  |         move.l d1,4(a0)
		if (!(currentFloor -> polygon[i].vertexID)) {
   127f4:	|                 |  |         movea.l 19d6a <currentFloor>,a0
   127fa:	|                 |  |         move.l 12(a0),d1
   127fe:	|                 |  |         move.l 136(sp),d0
   12802:	|                 |  |         lsl.l #3,d0
   12804:	|                 |  |         movea.l d1,a0
   12806:	|                 |  |         adda.l d0,a0
   12808:	|                 |  |         move.l 4(a0),d0
   1280c:	|                 |  |     /-- bne.s 12822 <setFloor+0x170>
			KPrintF("setFloor: Cannot allocate memory");
   1280e:	|                 |  |     |   pea 170e2 <main_sludge.c.5731ae9f+0x282>
   12814:	|                 |  |     |   jsr 12f14 <KPrintF>
   1281a:	|                 |  |     |   addq.l #4,sp
			return FALSE;
   1281c:	|                 |  |     |   clr.w d0
   1281e:	+-----------------|--|-----|-- bra.w 12e22 <setFloor+0x770>
		}

		// Read in each vertex ID

		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
   12822:	|                 |  |     \-> clr.l 132(sp)
   12826:	|                 |  |     /-- bra.s 12860 <setFloor+0x1ae>
			currentFloor -> polygon[i].vertexID[j] = get2bytes (bigDataFile);
   12828:	|                 |  |  /--|-> move.l 19c46 <bigDataFile>,d1
   1282e:	|                 |  |  |  |   movea.l 19d6a <currentFloor>,a0
   12834:	|                 |  |  |  |   movea.l 12(a0),a0
   12838:	|                 |  |  |  |   move.l 136(sp),d0
   1283c:	|                 |  |  |  |   lsl.l #3,d0
   1283e:	|                 |  |  |  |   adda.l d0,a0
   12840:	|                 |  |  |  |   movea.l 4(a0),a0
   12844:	|                 |  |  |  |   move.l 132(sp),d0
   12848:	|                 |  |  |  |   add.l d0,d0
   1284a:	|                 |  |  |  |   add.l d0,d0
   1284c:	|                 |  |  |  |   lea (0,a0,d0.l),a2
   12850:	|                 |  |  |  |   move.l d1,-(sp)
   12852:	|                 |  |  |  |   jsr 6bc <get2bytes>
   12858:	|                 |  |  |  |   addq.l #4,sp
   1285a:	|                 |  |  |  |   move.l d0,(a2)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
   1285c:	|                 |  |  |  |   addq.l #1,132(sp)
   12860:	|                 |  |  |  \-> movea.l 19d6a <currentFloor>,a0
   12866:	|                 |  |  |      move.l 12(a0),d1
   1286a:	|                 |  |  |      move.l 136(sp),d0
   1286e:	|                 |  |  |      lsl.l #3,d0
   12870:	|                 |  |  |      movea.l d1,a0
   12872:	|                 |  |  |      adda.l d0,a0
   12874:	|                 |  |  |      move.l (a0),d0
   12876:	|                 |  |  |      cmp.l 132(sp),d0
   1287a:	|                 |  |  \----- bgt.s 12828 <setFloor+0x176>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   1287c:	|                 |  |         addq.l #1,136(sp)
   12880:	|                 |  \-------> movea.l 19d6a <currentFloor>,a0
   12886:	|                 |            move.l 8(a0),d0
   1288a:	|                 |            cmp.l 136(sp),d0
   1288e:	|                 \----------- bgt.w 1276c <setFloor+0xba>
		}
	}

	// Find out how many vertices there are and reserve memory

	i = get2bytes (bigDataFile);
   12892:	|                              move.l 19c46 <bigDataFile>,d0
   12898:	|                              move.l d0,-(sp)
   1289a:	|                              jsr 6bc <get2bytes>
   128a0:	|                              addq.l #4,sp
   128a2:	|                              move.l d0,136(sp)
	currentFloor -> vertex = AllocVec( sizeof(struct POINT)*i,MEMF_ANY);
   128a6:	|                              move.l 136(sp),d0
   128aa:	|                              lsl.l #3,d0
   128ac:	|                              move.l d0,98(sp)
   128b0:	|                              clr.l 94(sp)
   128b4:	|                              move.l 19c5e <SysBase>,d0
   128ba:	|                              movea.l d0,a6
   128bc:	|                              move.l 98(sp),d0
   128c0:	|                              move.l 94(sp),d1
   128c4:	|                              jsr -684(a6)
   128c8:	|                              move.l d0,90(sp)
   128cc:	|                              move.l 90(sp),d0
   128d0:	|                              movea.l 19d6a <currentFloor>,a0
   128d6:	|                              move.l d0,4(a0)

	if (!(currentFloor -> vertex)) {
   128da:	|                              movea.l 19d6a <currentFloor>,a0
   128e0:	|                              move.l 4(a0),d0
   128e4:	|                          /-- bne.s 128fa <setFloor+0x248>
		KPrintF("setFloor: Cannot allocate memory");
   128e6:	|                          |   pea 170e2 <main_sludge.c.5731ae9f+0x282>
   128ec:	|                          |   jsr 12f14 <KPrintF>
   128f2:	|                          |   addq.l #4,sp
		return FALSE;
   128f4:	|                          |   clr.w d0
   128f6:	+--------------------------|-- bra.w 12e22 <setFloor+0x770>
	}

	for (j = 0; j < i; j ++) {
   128fa:	|                          \-> clr.l 132(sp)
   128fe:	|                          /-- bra.s 12952 <setFloor+0x2a0>
		currentFloor -> vertex[j].x = get2bytes (bigDataFile);
   12900:	|                       /--|-> move.l 19c46 <bigDataFile>,d1
   12906:	|                       |  |   movea.l 19d6a <currentFloor>,a0
   1290c:	|                       |  |   movea.l 4(a0),a0
   12910:	|                       |  |   move.l 132(sp),d0
   12914:	|                       |  |   lsl.l #3,d0
   12916:	|                       |  |   lea (0,a0,d0.l),a2
   1291a:	|                       |  |   move.l d1,-(sp)
   1291c:	|                       |  |   jsr 6bc <get2bytes>
   12922:	|                       |  |   addq.l #4,sp
   12924:	|                       |  |   move.l d0,(a2)
		currentFloor -> vertex[j].y = get2bytes (bigDataFile);
   12926:	|                       |  |   move.l 19c46 <bigDataFile>,d1
   1292c:	|                       |  |   movea.l 19d6a <currentFloor>,a0
   12932:	|                       |  |   movea.l 4(a0),a0
   12936:	|                       |  |   move.l 132(sp),d0
   1293a:	|                       |  |   lsl.l #3,d0
   1293c:	|                       |  |   lea (0,a0,d0.l),a2
   12940:	|                       |  |   move.l d1,-(sp)
   12942:	|                       |  |   jsr 6bc <get2bytes>
   12948:	|                       |  |   addq.l #4,sp
   1294a:	|                       |  |   move.l d0,4(a2)
	for (j = 0; j < i; j ++) {
   1294e:	|                       |  |   addq.l #1,132(sp)
   12952:	|                       |  \-> move.l 132(sp),d0
   12956:	|                       |      cmp.l 136(sp),d0
   1295a:	|                       \----- blt.s 12900 <setFloor+0x24e>
	}

	finishAccess ();
   1295c:	|                              jsr 47d2 <finishAccess>

	// Now build the movement martix

	currentFloor -> matrix = AllocVec( sizeof(int) * currentFloor -> numPolygons, MEMF_ANY);
   12962:	|                              movea.l 19d6a <currentFloor>,a0
   12968:	|                              move.l 8(a0),d0
   1296c:	|                              add.l d0,d0
   1296e:	|                              add.l d0,d0
   12970:	|                              move.l d0,86(sp)
   12974:	|                              clr.l 82(sp)
   12978:	|                              move.l 19c5e <SysBase>,d0
   1297e:	|                              movea.l d0,a6
   12980:	|                              move.l 86(sp),d0
   12984:	|                              move.l 82(sp),d1
   12988:	|                              jsr -684(a6)
   1298c:	|                              move.l d0,78(sp)
   12990:	|                              move.l 78(sp),d0
   12994:	|                              movea.l 19d6a <currentFloor>,a0
   1299a:	|                              move.l d0,16(a0)
	int * * distanceMatrix = AllocVec( sizeof(int) * currentFloor -> numPolygons, MEMF_ANY);
   1299e:	|                              movea.l 19d6a <currentFloor>,a0
   129a4:	|                              move.l 8(a0),d0
   129a8:	|                              add.l d0,d0
   129aa:	|                              add.l d0,d0
   129ac:	|                              move.l d0,74(sp)
   129b0:	|                              clr.l 70(sp)
   129b4:	|                              move.l 19c5e <SysBase>,d0
   129ba:	|                              movea.l d0,a6
   129bc:	|                              move.l 74(sp),d0
   129c0:	|                              move.l 70(sp),d1
   129c4:	|                              jsr -684(a6)
   129c8:	|                              move.l d0,66(sp)
   129cc:	|                              move.l 66(sp),d0
   129d0:	|                              move.l d0,62(sp)


	if (!(currentFloor -> matrix)) {
   129d4:	|                              movea.l 19d6a <currentFloor>,a0
   129da:	|                              move.l 16(a0),d0
   129de:	|                          /-- bne.s 129f4 <setFloor+0x342>
		KPrintF("setFloor: Cannot allocate memory");
   129e0:	|                          |   pea 170e2 <main_sludge.c.5731ae9f+0x282>
   129e6:	|                          |   jsr 12f14 <KPrintF>
   129ec:	|                          |   addq.l #4,sp
		return FALSE;
   129ee:	|                          |   clr.w d0
   129f0:	+--------------------------|-- bra.w 12e22 <setFloor+0x770>
	}

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   129f4:	|                          \-> clr.l 136(sp)
   129f8:	|                    /-------- bra.w 12b1c <setFloor+0x46a>
		currentFloor -> matrix[i] = AllocVec( sizeof(int) * currentFloor -> numPolygons,MEMF_ANY);
   129fc:	|                 /--|-------> movea.l 19d6a <currentFloor>,a0
   12a02:	|                 |  |         move.l 8(a0),d0
   12a06:	|                 |  |         add.l d0,d0
   12a08:	|                 |  |         add.l d0,d0
   12a0a:	|                 |  |         move.l d0,50(sp)
   12a0e:	|                 |  |         clr.l 46(sp)
   12a12:	|                 |  |         move.l 19c5e <SysBase>,d0
   12a18:	|                 |  |         movea.l d0,a6
   12a1a:	|                 |  |         move.l 50(sp),d0
   12a1e:	|                 |  |         move.l 46(sp),d1
   12a22:	|                 |  |         jsr -684(a6)
   12a26:	|                 |  |         move.l d0,42(sp)
   12a2a:	|                 |  |         move.l 42(sp),d0
   12a2e:	|                 |  |         movea.l 19d6a <currentFloor>,a0
   12a34:	|                 |  |         movea.l 16(a0),a0
   12a38:	|                 |  |         move.l 136(sp),d1
   12a3c:	|                 |  |         add.l d1,d1
   12a3e:	|                 |  |         add.l d1,d1
   12a40:	|                 |  |         adda.l d1,a0
   12a42:	|                 |  |         move.l d0,(a0)
		distanceMatrix        [i] = AllocVec( sizeof(int) * currentFloor -> numPolygons,MEMF_ANY);
   12a44:	|                 |  |         movea.l 19d6a <currentFloor>,a0
   12a4a:	|                 |  |         move.l 8(a0),d0
   12a4e:	|                 |  |         add.l d0,d0
   12a50:	|                 |  |         add.l d0,d0
   12a52:	|                 |  |         move.l d0,38(sp)
   12a56:	|                 |  |         clr.l 34(sp)
   12a5a:	|                 |  |         move.l 19c5e <SysBase>,d0
   12a60:	|                 |  |         movea.l d0,a6
   12a62:	|                 |  |         move.l 38(sp),d0
   12a66:	|                 |  |         move.l 34(sp),d1
   12a6a:	|                 |  |         jsr -684(a6)
   12a6e:	|                 |  |         move.l d0,30(sp)
   12a72:	|                 |  |         move.l 30(sp),d1
   12a76:	|                 |  |         move.l 136(sp),d0
   12a7a:	|                 |  |         add.l d0,d0
   12a7c:	|                 |  |         add.l d0,d0
   12a7e:	|                 |  |         movea.l 62(sp),a0
   12a82:	|                 |  |         adda.l d0,a0
   12a84:	|                 |  |         move.l d1,(a0)
		if (!(currentFloor -> matrix[i])) { 
   12a86:	|                 |  |         movea.l 19d6a <currentFloor>,a0
   12a8c:	|                 |  |         move.l 16(a0),d1
   12a90:	|                 |  |         move.l 136(sp),d0
   12a94:	|                 |  |         add.l d0,d0
   12a96:	|                 |  |         add.l d0,d0
   12a98:	|                 |  |         movea.l d1,a0
   12a9a:	|                 |  |         adda.l d0,a0
   12a9c:	|                 |  |         move.l (a0),d0
   12a9e:	|                 |  |     /-- bne.s 12ab4 <setFloor+0x402>
			KPrintF("setFloor: Cannot allocate memory");
   12aa0:	|                 |  |     |   pea 170e2 <main_sludge.c.5731ae9f+0x282>
   12aa6:	|                 |  |     |   jsr 12f14 <KPrintF>
   12aac:	|                 |  |     |   addq.l #4,sp
			return FALSE;
   12aae:	|                 |  |     |   clr.w d0
   12ab0:	+-----------------|--|-----|-- bra.w 12e22 <setFloor+0x770>
		}
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   12ab4:	|                 |  |     \-> clr.l 132(sp)
   12ab8:	|                 |  |     /-- bra.s 12b08 <setFloor+0x456>
			currentFloor -> matrix[i][j] = -1;
   12aba:	|                 |  |  /--|-> movea.l 19d6a <currentFloor>,a0
   12ac0:	|                 |  |  |  |   move.l 16(a0),d1
   12ac4:	|                 |  |  |  |   move.l 136(sp),d0
   12ac8:	|                 |  |  |  |   add.l d0,d0
   12aca:	|                 |  |  |  |   add.l d0,d0
   12acc:	|                 |  |  |  |   movea.l d1,a0
   12ace:	|                 |  |  |  |   adda.l d0,a0
   12ad0:	|                 |  |  |  |   move.l (a0),d1
   12ad2:	|                 |  |  |  |   move.l 132(sp),d0
   12ad6:	|                 |  |  |  |   add.l d0,d0
   12ad8:	|                 |  |  |  |   add.l d0,d0
   12ada:	|                 |  |  |  |   movea.l d1,a0
   12adc:	|                 |  |  |  |   adda.l d0,a0
   12ade:	|                 |  |  |  |   moveq #-1,d1
   12ae0:	|                 |  |  |  |   move.l d1,(a0)
			distanceMatrix        [i][j] = 10000;
   12ae2:	|                 |  |  |  |   move.l 136(sp),d0
   12ae6:	|                 |  |  |  |   add.l d0,d0
   12ae8:	|                 |  |  |  |   add.l d0,d0
   12aea:	|                 |  |  |  |   movea.l 62(sp),a0
   12aee:	|                 |  |  |  |   adda.l d0,a0
   12af0:	|                 |  |  |  |   move.l (a0),d1
   12af2:	|                 |  |  |  |   move.l 132(sp),d0
   12af6:	|                 |  |  |  |   add.l d0,d0
   12af8:	|                 |  |  |  |   add.l d0,d0
   12afa:	|                 |  |  |  |   movea.l d1,a0
   12afc:	|                 |  |  |  |   adda.l d0,a0
   12afe:	|                 |  |  |  |   move.l #10000,(a0)
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   12b04:	|                 |  |  |  |   addq.l #1,132(sp)
   12b08:	|                 |  |  |  \-> movea.l 19d6a <currentFloor>,a0
   12b0e:	|                 |  |  |      move.l 8(a0),d0
   12b12:	|                 |  |  |      cmp.l 132(sp),d0
   12b16:	|                 |  |  \----- bgt.s 12aba <setFloor+0x408>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   12b18:	|                 |  |         addq.l #1,136(sp)
   12b1c:	|                 |  \-------> movea.l 19d6a <currentFloor>,a0
   12b22:	|                 |            move.l 8(a0),d0
   12b26:	|                 |            cmp.l 136(sp),d0
   12b2a:	|                 \----------- bgt.w 129fc <setFloor+0x34a>
		}
	}

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   12b2e:	|                              clr.l 136(sp)
   12b32:	|              /-------------- bra.w 12c38 <setFloor+0x586>
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   12b36:	|           /--|-------------> clr.l 132(sp)
   12b3a:	|           |  |     /-------- bra.w 12c22 <setFloor+0x570>
			if (i != j) {
   12b3e:	|           |  |  /--|-------> move.l 136(sp),d0
   12b42:	|           |  |  |  |         cmp.l 132(sp),d0
   12b46:	|           |  |  |  |     /-- beq.w 12bd8 <setFloor+0x526>
				if (polysShareSide (currentFloor -> polygon[i], currentFloor -> polygon[j])) {
   12b4a:	|           |  |  |  |     |   movea.l 19d6a <currentFloor>,a0
   12b50:	|           |  |  |  |     |   move.l 12(a0),d1
   12b54:	|           |  |  |  |     |   move.l 132(sp),d0
   12b58:	|           |  |  |  |     |   lsl.l #3,d0
   12b5a:	|           |  |  |  |     |   movea.l d1,a1
   12b5c:	|           |  |  |  |     |   adda.l d0,a1
   12b5e:	|           |  |  |  |     |   movea.l 19d6a <currentFloor>,a0
   12b64:	|           |  |  |  |     |   move.l 12(a0),d1
   12b68:	|           |  |  |  |     |   move.l 136(sp),d0
   12b6c:	|           |  |  |  |     |   lsl.l #3,d0
   12b6e:	|           |  |  |  |     |   movea.l d1,a0
   12b70:	|           |  |  |  |     |   adda.l d0,a0
   12b72:	|           |  |  |  |     |   move.l 4(a1),-(sp)
   12b76:	|           |  |  |  |     |   move.l (a1),-(sp)
   12b78:	|           |  |  |  |     |   move.l 4(a0),-(sp)
   12b7c:	|           |  |  |  |     |   move.l (a0),-(sp)
   12b7e:	|           |  |  |  |     |   jsr 1240a <polysShareSide>
   12b84:	|           |  |  |  |     |   lea 16(sp),sp
   12b88:	|           |  |  |  |     |   tst.w d0
   12b8a:	|           |  |  |  |  /--|-- beq.w 12c1e <setFloor+0x56c>
					currentFloor -> matrix[i][j] = j;
   12b8e:	|           |  |  |  |  |  |   movea.l 19d6a <currentFloor>,a0
   12b94:	|           |  |  |  |  |  |   move.l 16(a0),d1
   12b98:	|           |  |  |  |  |  |   move.l 136(sp),d0
   12b9c:	|           |  |  |  |  |  |   add.l d0,d0
   12b9e:	|           |  |  |  |  |  |   add.l d0,d0
   12ba0:	|           |  |  |  |  |  |   movea.l d1,a0
   12ba2:	|           |  |  |  |  |  |   adda.l d0,a0
   12ba4:	|           |  |  |  |  |  |   move.l (a0),d1
   12ba6:	|           |  |  |  |  |  |   move.l 132(sp),d0
   12baa:	|           |  |  |  |  |  |   add.l d0,d0
   12bac:	|           |  |  |  |  |  |   add.l d0,d0
   12bae:	|           |  |  |  |  |  |   movea.l d1,a0
   12bb0:	|           |  |  |  |  |  |   adda.l d0,a0
   12bb2:	|           |  |  |  |  |  |   move.l 132(sp),(a0)
					distanceMatrix        [i][j] = 1;
   12bb6:	|           |  |  |  |  |  |   move.l 136(sp),d0
   12bba:	|           |  |  |  |  |  |   add.l d0,d0
   12bbc:	|           |  |  |  |  |  |   add.l d0,d0
   12bbe:	|           |  |  |  |  |  |   movea.l 62(sp),a0
   12bc2:	|           |  |  |  |  |  |   adda.l d0,a0
   12bc4:	|           |  |  |  |  |  |   move.l (a0),d1
   12bc6:	|           |  |  |  |  |  |   move.l 132(sp),d0
   12bca:	|           |  |  |  |  |  |   add.l d0,d0
   12bcc:	|           |  |  |  |  |  |   add.l d0,d0
   12bce:	|           |  |  |  |  |  |   movea.l d1,a0
   12bd0:	|           |  |  |  |  |  |   adda.l d0,a0
   12bd2:	|           |  |  |  |  |  |   moveq #1,d1
   12bd4:	|           |  |  |  |  |  |   move.l d1,(a0)
   12bd6:	|           |  |  |  |  +--|-- bra.s 12c1e <setFloor+0x56c>
				}
			} else {
				currentFloor -> matrix[i][j] = -2;
   12bd8:	|           |  |  |  |  |  \-> movea.l 19d6a <currentFloor>,a0
   12bde:	|           |  |  |  |  |      move.l 16(a0),d1
   12be2:	|           |  |  |  |  |      move.l 136(sp),d0
   12be6:	|           |  |  |  |  |      add.l d0,d0
   12be8:	|           |  |  |  |  |      add.l d0,d0
   12bea:	|           |  |  |  |  |      movea.l d1,a0
   12bec:	|           |  |  |  |  |      adda.l d0,a0
   12bee:	|           |  |  |  |  |      move.l (a0),d1
   12bf0:	|           |  |  |  |  |      move.l 132(sp),d0
   12bf4:	|           |  |  |  |  |      add.l d0,d0
   12bf6:	|           |  |  |  |  |      add.l d0,d0
   12bf8:	|           |  |  |  |  |      movea.l d1,a0
   12bfa:	|           |  |  |  |  |      adda.l d0,a0
   12bfc:	|           |  |  |  |  |      moveq #-2,d0
   12bfe:	|           |  |  |  |  |      move.l d0,(a0)
				distanceMatrix        [i][j] = 0;
   12c00:	|           |  |  |  |  |      move.l 136(sp),d0
   12c04:	|           |  |  |  |  |      add.l d0,d0
   12c06:	|           |  |  |  |  |      add.l d0,d0
   12c08:	|           |  |  |  |  |      movea.l 62(sp),a0
   12c0c:	|           |  |  |  |  |      adda.l d0,a0
   12c0e:	|           |  |  |  |  |      move.l (a0),d1
   12c10:	|           |  |  |  |  |      move.l 132(sp),d0
   12c14:	|           |  |  |  |  |      add.l d0,d0
   12c16:	|           |  |  |  |  |      add.l d0,d0
   12c18:	|           |  |  |  |  |      movea.l d1,a0
   12c1a:	|           |  |  |  |  |      adda.l d0,a0
   12c1c:	|           |  |  |  |  |      clr.l (a0)
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   12c1e:	|           |  |  |  |  \----> addq.l #1,132(sp)
   12c22:	|           |  |  |  \-------> movea.l 19d6a <currentFloor>,a0
   12c28:	|           |  |  |            move.l 8(a0),d0
   12c2c:	|           |  |  |            cmp.l 132(sp),d0
   12c30:	|           |  |  \----------- bgt.w 12b3e <setFloor+0x48c>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   12c34:	|           |  |               addq.l #1,136(sp)
   12c38:	|           |  \-------------> movea.l 19d6a <currentFloor>,a0
   12c3e:	|           |                  move.l 8(a0),d0
   12c42:	|           |                  cmp.l 136(sp),d0
   12c46:	|           \----------------- bgt.w 12b36 <setFloor+0x484>
			}
		}
	}

	BOOL madeChange;
	int lookForDistance = 0;
   12c4a:	|                              clr.l 126(sp)

	do {
		lookForDistance ++;
   12c4e:	|  /-------------------------> addq.l #1,126(sp)
//		debugMatrix ();
		madeChange = FALSE;
   12c52:	|  |                           clr.w 130(sp)
		for (i = 0; i < currentFloor -> numPolygons; i ++) {
   12c56:	|  |                           clr.l 136(sp)
   12c5a:	|  |     /-------------------- bra.w 12db0 <setFloor+0x6fe>
			for (j = 0; j < currentFloor -> numPolygons; j ++) {
   12c5e:	|  |  /--|-------------------> clr.l 132(sp)
   12c62:	|  |  |  |     /-------------- bra.w 12d9a <setFloor+0x6e8>
				if (currentFloor -> matrix[i][j] == -1) {
   12c66:	|  |  |  |  /--|-------------> movea.l 19d6a <currentFloor>,a0
   12c6c:	|  |  |  |  |  |               move.l 16(a0),d1
   12c70:	|  |  |  |  |  |               move.l 136(sp),d0
   12c74:	|  |  |  |  |  |               add.l d0,d0
   12c76:	|  |  |  |  |  |               add.l d0,d0
   12c78:	|  |  |  |  |  |               movea.l d1,a0
   12c7a:	|  |  |  |  |  |               adda.l d0,a0
   12c7c:	|  |  |  |  |  |               move.l (a0),d1
   12c7e:	|  |  |  |  |  |               move.l 132(sp),d0
   12c82:	|  |  |  |  |  |               add.l d0,d0
   12c84:	|  |  |  |  |  |               add.l d0,d0
   12c86:	|  |  |  |  |  |               movea.l d1,a0
   12c88:	|  |  |  |  |  |               adda.l d0,a0
   12c8a:	|  |  |  |  |  |               move.l (a0),d0
   12c8c:	|  |  |  |  |  |               moveq #-1,d1
   12c8e:	|  |  |  |  |  |               cmp.l d0,d1
   12c90:	|  |  |  |  |  |  /----------- bne.w 12d96 <setFloor+0x6e4>

					// OK, so we don't know how to get from i to j...
					for (int d = 0; d < currentFloor -> numPolygons; d ++) {
   12c94:	|  |  |  |  |  |  |            clr.l 122(sp)
   12c98:	|  |  |  |  |  |  |     /----- bra.w 12d84 <setFloor+0x6d2>
						if (d != i && d != j) {
   12c9c:	|  |  |  |  |  |  |  /--|----> move.l 122(sp),d0
   12ca0:	|  |  |  |  |  |  |  |  |      cmp.l 136(sp),d0
   12ca4:	|  |  |  |  |  |  |  |  |  /-- beq.w 12d80 <setFloor+0x6ce>
   12ca8:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d1
   12cac:	|  |  |  |  |  |  |  |  |  |   cmp.l 132(sp),d1
   12cb0:	|  |  |  |  |  |  |  |  |  +-- beq.w 12d80 <setFloor+0x6ce>
							if (currentFloor -> matrix[i][d] == d &&
   12cb4:	|  |  |  |  |  |  |  |  |  |   movea.l 19d6a <currentFloor>,a0
   12cba:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   12cbe:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   12cc2:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   12cc4:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   12cc6:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   12cc8:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   12cca:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   12ccc:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   12cd0:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   12cd2:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   12cd4:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   12cd6:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   12cd8:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
   12cda:	|  |  |  |  |  |  |  |  |  |   cmp.l 122(sp),d0
   12cde:	|  |  |  |  |  |  |  |  |  +-- bne.w 12d80 <setFloor+0x6ce>
								currentFloor -> matrix[d][j] >= 0 &&
   12ce2:	|  |  |  |  |  |  |  |  |  |   movea.l 19d6a <currentFloor>,a0
   12ce8:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   12cec:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   12cf0:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   12cf2:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   12cf4:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   12cf6:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   12cf8:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   12cfa:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   12cfe:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   12d00:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   12d02:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   12d04:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   12d06:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
							if (currentFloor -> matrix[i][d] == d &&
   12d08:	|  |  |  |  |  |  |  |  |  +-- bmi.s 12d80 <setFloor+0x6ce>
								distanceMatrix        [d][j] <= lookForDistance) {
   12d0a:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   12d0e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   12d10:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   12d12:	|  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a0
   12d16:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   12d18:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   12d1a:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   12d1e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   12d20:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   12d22:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   12d24:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   12d26:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
								currentFloor -> matrix[d][j] >= 0 &&
   12d28:	|  |  |  |  |  |  |  |  |  |   cmp.l 126(sp),d0
   12d2c:	|  |  |  |  |  |  |  |  |  +-- bgt.s 12d80 <setFloor+0x6ce>

								 currentFloor -> matrix[i][j] = d;
   12d2e:	|  |  |  |  |  |  |  |  |  |   movea.l 19d6a <currentFloor>,a0
   12d34:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   12d38:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   12d3c:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   12d3e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   12d40:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   12d42:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   12d44:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   12d46:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   12d4a:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   12d4c:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   12d4e:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   12d50:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   12d52:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),(a0)
								 distanceMatrix		  [i][j] = lookForDistance + 1;
   12d56:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   12d5a:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   12d5c:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   12d5e:	|  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a0
   12d62:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   12d64:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   12d66:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   12d6a:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   12d6c:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   12d6e:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   12d70:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   12d72:	|  |  |  |  |  |  |  |  |  |   move.l 126(sp),d0
   12d76:	|  |  |  |  |  |  |  |  |  |   addq.l #1,d0
   12d78:	|  |  |  |  |  |  |  |  |  |   move.l d0,(a0)
								 madeChange = TRUE;
   12d7a:	|  |  |  |  |  |  |  |  |  |   move.w #1,130(sp)
					for (int d = 0; d < currentFloor -> numPolygons; d ++) {
   12d80:	|  |  |  |  |  |  |  |  |  \-> addq.l #1,122(sp)
   12d84:	|  |  |  |  |  |  |  |  \----> movea.l 19d6a <currentFloor>,a0
   12d8a:	|  |  |  |  |  |  |  |         move.l 8(a0),d0
   12d8e:	|  |  |  |  |  |  |  |         cmp.l 122(sp),d0
   12d92:	|  |  |  |  |  |  |  \-------- bgt.w 12c9c <setFloor+0x5ea>
			for (j = 0; j < currentFloor -> numPolygons; j ++) {
   12d96:	|  |  |  |  |  |  \----------> addq.l #1,132(sp)
   12d9a:	|  |  |  |  |  \-------------> movea.l 19d6a <currentFloor>,a0
   12da0:	|  |  |  |  |                  move.l 8(a0),d0
   12da4:	|  |  |  |  |                  cmp.l 132(sp),d0
   12da8:	|  |  |  |  \----------------- bgt.w 12c66 <setFloor+0x5b4>
		for (i = 0; i < currentFloor -> numPolygons; i ++) {
   12dac:	|  |  |  |                     addq.l #1,136(sp)
   12db0:	|  |  |  \-------------------> movea.l 19d6a <currentFloor>,a0
   12db6:	|  |  |                        move.l 8(a0),d0
   12dba:	|  |  |                        cmp.l 136(sp),d0
   12dbe:	|  |  \----------------------- bgt.w 12c5e <setFloor+0x5ac>
						}
					}
				}
			}
		}
	} while (madeChange);
   12dc2:	|  |                           tst.w 130(sp)
   12dc6:	|  \-------------------------- bne.w 12c4e <setFloor+0x59c>

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   12dca:	|                              clr.l 136(sp)
   12dce:	|                          /-- bra.s 12df6 <setFloor+0x744>
		FreeVec(distanceMatrix [i]);
   12dd0:	|                       /--|-> move.l 136(sp),d0
   12dd4:	|                       |  |   add.l d0,d0
   12dd6:	|                       |  |   add.l d0,d0
   12dd8:	|                       |  |   movea.l 62(sp),a0
   12ddc:	|                       |  |   adda.l d0,a0
   12dde:	|                       |  |   move.l (a0),54(sp)
   12de2:	|                       |  |   move.l 19c5e <SysBase>,d0
   12de8:	|                       |  |   movea.l d0,a6
   12dea:	|                       |  |   movea.l 54(sp),a1
   12dee:	|                       |  |   jsr -690(a6)
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   12df2:	|                       |  |   addq.l #1,136(sp)
   12df6:	|                       |  \-> movea.l 19d6a <currentFloor>,a0
   12dfc:	|                       |      move.l 8(a0),d0
   12e00:	|                       |      cmp.l 136(sp),d0
   12e04:	|                       \----- bgt.s 12dd0 <setFloor+0x71e>
	}

	FreeVec(distanceMatrix);
   12e06:	|                              move.l 62(sp),58(sp)
   12e0c:	|                              move.l 19c5e <SysBase>,d0
   12e12:	|                              movea.l d0,a6
   12e14:	|                              movea.l 58(sp),a1
   12e18:	|                              jsr -690(a6)
	distanceMatrix = NULL;	
   12e1c:	|                              clr.l 62(sp)

	return TRUE;
   12e20:	|                              moveq #1,d0
}
   12e22:	\----------------------------> movea.l (sp)+,a2
   12e24:	                               movea.l (sp)+,a6
   12e26:	                               lea 132(sp),sp
   12e2a:	                               rts

00012e2c <setFloorNull>:

void setFloorNull () {
	killFloor ();
   12e2c:	jsr 1231a <killFloor>
	noFloor ();
   12e32:	jsr 1223e <noFloor>
   12e38:	nop
   12e3a:	rts

00012e3c <WaitVbl>:
void WaitVbl() {
   12e3c:	       subq.l #8,sp
	debug_start_idle();
   12e3e:	       jsr 130ec <debug_start_idle>
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
   12e44:	   /-> movea.l #14675972,a0
   12e4a:	   |   move.l (a0),d0
   12e4c:	   |   move.l d0,(sp)
		vpos&=0x1ff00;
   12e4e:	   |   move.l (sp),d0
   12e50:	   |   andi.l #130816,d0
   12e56:	   |   move.l d0,(sp)
		if (vpos!=(300<<8))
   12e58:	   |   move.l (sp),d0
   12e5a:	   |   cmpi.l #76800,d0
   12e60:	   \-- beq.s 12e44 <WaitVbl+0x8>
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
   12e62:	/----> movea.l #14675972,a0
   12e68:	|      move.l (a0),d0
   12e6a:	|      move.l d0,4(sp)
		vpos&=0x1ff00;
   12e6e:	|      move.l 4(sp),d0
   12e72:	|      andi.l #130816,d0
   12e78:	|      move.l d0,4(sp)
		if (vpos==(300<<8))
   12e7c:	|      move.l 4(sp),d0
   12e80:	|      cmpi.l #76800,d0
   12e86:	|  /-- beq.s 12e8a <WaitVbl+0x4e>
	while (1) {
   12e88:	\--|-- bra.s 12e62 <WaitVbl+0x26>
			break;
   12e8a:	   \-> nop
	debug_stop_idle();
   12e8c:	       jsr 13106 <debug_stop_idle>
}
   12e92:	       nop
   12e94:	       addq.l #8,sp
   12e96:	       rts

00012e98 <memset>:
void* memset(void *dest, int val, unsigned long len) {
   12e98:	       subq.l #4,sp
	unsigned char *ptr = (unsigned char *)dest;
   12e9a:	       move.l 8(sp),(sp)
	while(len-- > 0)
   12e9e:	   /-- bra.s 12eb0 <memset+0x18>
		*ptr++ = val;
   12ea0:	/--|-> move.l (sp),d0
   12ea2:	|  |   move.l d0,d1
   12ea4:	|  |   addq.l #1,d1
   12ea6:	|  |   move.l d1,(sp)
   12ea8:	|  |   move.l 12(sp),d1
   12eac:	|  |   movea.l d0,a0
   12eae:	|  |   move.b d1,(a0)
	while(len-- > 0)
   12eb0:	|  \-> move.l 16(sp),d0
   12eb4:	|      move.l d0,d1
   12eb6:	|      subq.l #1,d1
   12eb8:	|      move.l d1,16(sp)
   12ebc:	|      tst.l d0
   12ebe:	\----- bne.s 12ea0 <memset+0x8>
	return dest;
   12ec0:	       move.l 8(sp),d0
}
   12ec4:	       addq.l #4,sp
   12ec6:	       rts

00012ec8 <memcpy>:
void* memcpy(void *dest, const void *src, unsigned long len) {
   12ec8:	       subq.l #8,sp
   12eca:	       move.l d2,-(sp)
	char *d = (char *)dest;
   12ecc:	       move.l 16(sp),8(sp)
	const char *s = (const char *)src;
   12ed2:	       move.l 20(sp),4(sp)
	while(len--)
   12ed8:	   /-- bra.s 12efa <memcpy+0x32>
		*d++ = *s++;
   12eda:	/--|-> move.l 4(sp),d1
   12ede:	|  |   move.l d1,d0
   12ee0:	|  |   addq.l #1,d0
   12ee2:	|  |   move.l d0,4(sp)
   12ee6:	|  |   move.l 8(sp),d0
   12eea:	|  |   move.l d0,d2
   12eec:	|  |   addq.l #1,d2
   12eee:	|  |   move.l d2,8(sp)
   12ef2:	|  |   movea.l d1,a0
   12ef4:	|  |   move.b (a0),d1
   12ef6:	|  |   movea.l d0,a0
   12ef8:	|  |   move.b d1,(a0)
	while(len--)
   12efa:	|  \-> move.l 24(sp),d0
   12efe:	|      move.l d0,d1
   12f00:	|      subq.l #1,d1
   12f02:	|      move.l d1,24(sp)
   12f06:	|      tst.l d0
   12f08:	\----- bne.s 12eda <memcpy+0x12>
	return dest;
   12f0a:	       move.l 16(sp),d0
}
   12f0e:	       move.l (sp)+,d2
   12f10:	       addq.l #8,sp
   12f12:	       rts

00012f14 <KPrintF>:
void KPrintF(const char* fmt, ...) {
   12f14:	       lea -128(sp),sp
   12f18:	       movem.l a2-a3/a6,-(sp)
	if(*((UWORD *)UaeDbgLog) == 0x4eb9 || *((UWORD *)UaeDbgLog) == 0xa00e) {
   12f1c:	       move.w f0ff60 <gcc8_c_support.c.8bf68f31+0xece9e7>,d0
   12f22:	       cmpi.w #20153,d0
   12f26:	   /-- beq.s 12f4a <KPrintF+0x36>
   12f28:	   |   cmpi.w #-24562,d0
   12f2c:	   +-- beq.s 12f4a <KPrintF+0x36>
		RawDoFmt((CONST_STRPTR)fmt, vl, KPutCharX, 0);
   12f2e:	   |   movea.l 19c5e <SysBase>,a6
   12f34:	   |   movea.l 144(sp),a0
   12f38:	   |   lea 148(sp),a1
   12f3c:	   |   lea 13b12 <KPutCharX>,a2
   12f42:	   |   suba.l a3,a3
   12f44:	   |   jsr -522(a6)
}
   12f48:	/--|-- bra.s 12f74 <KPrintF+0x60>
		RawDoFmt((CONST_STRPTR)fmt, vl, PutChar, temp);
   12f4a:	|  \-> movea.l 19c5e <SysBase>,a6
   12f50:	|      movea.l 144(sp),a0
   12f54:	|      lea 148(sp),a1
   12f58:	|      lea 13b20 <PutChar>,a2
   12f5e:	|      lea 12(sp),a3
   12f62:	|      jsr -522(a6)
		UaeDbgLog(86, temp);
   12f66:	|      move.l a3,-(sp)
   12f68:	|      pea 56 <_start+0x56>
   12f6c:	|      jsr f0ff60 <gcc8_c_support.c.8bf68f31+0xece9e7>
	if(*((UWORD *)UaeDbgLog) == 0x4eb9 || *((UWORD *)UaeDbgLog) == 0xa00e) {
   12f72:	|      addq.l #8,sp
}
   12f74:	\----> movem.l (sp)+,a2-a3/a6
   12f78:	       lea 128(sp),sp
   12f7c:	       rts

00012f7e <warpmode>:

void warpmode(int on) { // bool
   12f7e:	          subq.l #8,sp
	long(*UaeConf)(long mode, int index, const char* param, int param_len, char* outbuf, int outbuf_len);
	UaeConf = (long(*)(long, int, const char*, int, char*, int))0xf0ff60;
   12f80:	          move.l #15794016,4(sp)
	if(*((UWORD *)UaeConf) == 0x4eb9 || *((UWORD *)UaeConf) == 0xa00e) {
   12f88:	          movea.l 4(sp),a0
   12f8c:	          move.w (a0),d0
   12f8e:	          cmpi.w #20153,d0
   12f92:	      /-- beq.s 12fa2 <warpmode+0x24>
   12f94:	      |   movea.l 4(sp),a0
   12f98:	      |   move.w (a0),d0
   12f9a:	      |   cmpi.w #-24562,d0
   12f9e:	/-----|-- bne.w 130a6 <warpmode+0x128>
		char outbuf;
		UaeConf(82, -1, on ? "cpu_speed max" : "cpu_speed real", 0, &outbuf, 1);
   12fa2:	|     \-> tst.l 12(sp)
   12fa6:	|  /----- beq.s 12fb0 <warpmode+0x32>
   12fa8:	|  |      move.l #94467,d0
   12fae:	|  |  /-- bra.s 12fb6 <warpmode+0x38>
   12fb0:	|  \--|-> move.l #94481,d0
   12fb6:	|     \-> pea 1 <_start+0x1>
   12fba:	|         move.l sp,d1
   12fbc:	|         addq.l #7,d1
   12fbe:	|         move.l d1,-(sp)
   12fc0:	|         clr.l -(sp)
   12fc2:	|         move.l d0,-(sp)
   12fc4:	|         pea ffffffff <gcc8_c_support.c.8bf68f31+0xfffbea86>
   12fc8:	|         pea 52 <_start+0x52>
   12fcc:	|         movea.l 28(sp),a0
   12fd0:	|         jsr (a0)
   12fd2:	|         lea 24(sp),sp
		UaeConf(82, -1, on ? "cpu_cycle_exact false" : "cpu_cycle_exact true", 0, &outbuf, 1);
   12fd6:	|         tst.l 12(sp)
   12fda:	|  /----- beq.s 12fe4 <warpmode+0x66>
   12fdc:	|  |      move.l #94496,d0
   12fe2:	|  |  /-- bra.s 12fea <warpmode+0x6c>
   12fe4:	|  \--|-> move.l #94518,d0
   12fea:	|     \-> pea 1 <_start+0x1>
   12fee:	|         move.l sp,d1
   12ff0:	|         addq.l #7,d1
   12ff2:	|         move.l d1,-(sp)
   12ff4:	|         clr.l -(sp)
   12ff6:	|         move.l d0,-(sp)
   12ff8:	|         pea ffffffff <gcc8_c_support.c.8bf68f31+0xfffbea86>
   12ffc:	|         pea 52 <_start+0x52>
   13000:	|         movea.l 28(sp),a0
   13004:	|         jsr (a0)
   13006:	|         lea 24(sp),sp
		UaeConf(82, -1, on ? "cpu_memory_cycle_exact false" : "cpu_memory_cycle_exact true", 0, &outbuf, 1);
   1300a:	|         tst.l 12(sp)
   1300e:	|  /----- beq.s 13018 <warpmode+0x9a>
   13010:	|  |      move.l #94539,d0
   13016:	|  |  /-- bra.s 1301e <warpmode+0xa0>
   13018:	|  \--|-> move.l #94568,d0
   1301e:	|     \-> pea 1 <_start+0x1>
   13022:	|         move.l sp,d1
   13024:	|         addq.l #7,d1
   13026:	|         move.l d1,-(sp)
   13028:	|         clr.l -(sp)
   1302a:	|         move.l d0,-(sp)
   1302c:	|         pea ffffffff <gcc8_c_support.c.8bf68f31+0xfffbea86>
   13030:	|         pea 52 <_start+0x52>
   13034:	|         movea.l 28(sp),a0
   13038:	|         jsr (a0)
   1303a:	|         lea 24(sp),sp
		UaeConf(82, -1, on ? "blitter_cycle_exact false" : "blitter_cycle_exact true", 0, &outbuf, 1);
   1303e:	|         tst.l 12(sp)
   13042:	|  /----- beq.s 1304c <warpmode+0xce>
   13044:	|  |      move.l #94596,d0
   1304a:	|  |  /-- bra.s 13052 <warpmode+0xd4>
   1304c:	|  \--|-> move.l #94622,d0
   13052:	|     \-> pea 1 <_start+0x1>
   13056:	|         move.l sp,d1
   13058:	|         addq.l #7,d1
   1305a:	|         move.l d1,-(sp)
   1305c:	|         clr.l -(sp)
   1305e:	|         move.l d0,-(sp)
   13060:	|         pea ffffffff <gcc8_c_support.c.8bf68f31+0xfffbea86>
   13064:	|         pea 52 <_start+0x52>
   13068:	|         movea.l 28(sp),a0
   1306c:	|         jsr (a0)
   1306e:	|         lea 24(sp),sp
		UaeConf(82, -1, on ? "warp true" : "warp false", 0, &outbuf, 1);
   13072:	|         tst.l 12(sp)
   13076:	|  /----- beq.s 13080 <warpmode+0x102>
   13078:	|  |      move.l #94647,d0
   1307e:	|  |  /-- bra.s 13086 <warpmode+0x108>
   13080:	|  \--|-> move.l #94657,d0
   13086:	|     \-> pea 1 <_start+0x1>
   1308a:	|         move.l sp,d1
   1308c:	|         addq.l #7,d1
   1308e:	|         move.l d1,-(sp)
   13090:	|         clr.l -(sp)
   13092:	|         move.l d0,-(sp)
   13094:	|         pea ffffffff <gcc8_c_support.c.8bf68f31+0xfffbea86>
   13098:	|         pea 52 <_start+0x52>
   1309c:	|         movea.l 28(sp),a0
   130a0:	|         jsr (a0)
   130a2:	|         lea 24(sp),sp
	}
}
   130a6:	\-------> nop
   130a8:	          addq.l #8,sp
   130aa:	          rts

000130ac <debug_cmd>:

static void debug_cmd(unsigned int arg1, unsigned int arg2, unsigned int arg3, unsigned int arg4) {
   130ac:	       subq.l #4,sp
	long(*UaeLib)(unsigned int arg0, unsigned int arg1, unsigned int arg2, unsigned int arg3, unsigned int arg4);
	UaeLib = (long(*)(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int))0xf0ff60;
   130ae:	       move.l #15794016,(sp)
	if(*((UWORD *)UaeLib) == 0x4eb9 || *((UWORD *)UaeLib) == 0xa00e) {
   130b4:	       movea.l (sp),a0
   130b6:	       move.w (a0),d0
   130b8:	       cmpi.w #20153,d0
   130bc:	   /-- beq.s 130c8 <debug_cmd+0x1c>
   130be:	   |   movea.l (sp),a0
   130c0:	   |   move.w (a0),d0
   130c2:	   |   cmpi.w #-24562,d0
   130c6:	/--|-- bne.s 130e6 <debug_cmd+0x3a>
		UaeLib(88, arg1, arg2, arg3, arg4);
   130c8:	|  \-> move.l 20(sp),-(sp)
   130cc:	|      move.l 20(sp),-(sp)
   130d0:	|      move.l 20(sp),-(sp)
   130d4:	|      move.l 20(sp),-(sp)
   130d8:	|      pea 58 <_start+0x58>
   130dc:	|      movea.l 20(sp),a0
   130e0:	|      jsr (a0)
   130e2:	|      lea 20(sp),sp
	}
}
   130e6:	\----> nop
   130e8:	       addq.l #4,sp
   130ea:	       rts

000130ec <debug_start_idle>:
	debug_cmd(barto_cmd_text, (((unsigned int)left) << 16) | ((unsigned int)top), (unsigned int)text, color);
}

// profiler
void debug_start_idle() {
	debug_cmd(barto_cmd_set_idle, 1, 0, 0);
   130ec:	clr.l -(sp)
   130ee:	clr.l -(sp)
   130f0:	pea 1 <_start+0x1>
   130f4:	pea 5 <_start+0x5>
   130f8:	jsr 130ac <debug_cmd>
   130fe:	lea 16(sp),sp
}
   13102:	nop
   13104:	rts

00013106 <debug_stop_idle>:

void debug_stop_idle() {
	debug_cmd(barto_cmd_set_idle, 0, 0, 0);
   13106:	clr.l -(sp)
   13108:	clr.l -(sp)
   1310a:	clr.l -(sp)
   1310c:	pea 5 <_start+0x5>
   13110:	jsr 130ac <debug_cmd>
   13116:	lea 16(sp),sp
}
   1311a:	nop
   1311c:	rts

0001311e <my_strncpy>:

// gfx debugger
static void my_strncpy(char* destination, const char* source, unsigned long num) {
   1311e:	       move.l d2,-(sp)
	while(*source && --num > 0)
   13120:	   /-- bra.s 13142 <my_strncpy+0x24>
		*destination++ = *source++;
   13122:	/--|-> move.l 12(sp),d1
   13126:	|  |   move.l d1,d0
   13128:	|  |   addq.l #1,d0
   1312a:	|  |   move.l d0,12(sp)
   1312e:	|  |   move.l 8(sp),d0
   13132:	|  |   move.l d0,d2
   13134:	|  |   addq.l #1,d2
   13136:	|  |   move.l d2,8(sp)
   1313a:	|  |   movea.l d1,a0
   1313c:	|  |   move.b (a0),d1
   1313e:	|  |   movea.l d0,a0
   13140:	|  |   move.b d1,(a0)
	while(*source && --num > 0)
   13142:	|  \-> movea.l 12(sp),a0
   13146:	|      move.b (a0),d0
   13148:	|  /-- beq.s 13150 <my_strncpy+0x32>
   1314a:	|  |   subq.l #1,16(sp)
   1314e:	\--|-- bne.s 13122 <my_strncpy+0x4>
	*destination = '\0';
   13150:	   \-> movea.l 8(sp),a0
   13154:	       clr.b (a0)
}
   13156:	       nop
   13158:	       move.l (sp)+,d2
   1315a:	       rts

0001315c <debug_register_bitmap>:

void debug_register_bitmap(const void* addr, const char* name, short width, short height, short numPlanes, unsigned short flags) {
   1315c:	    lea -60(sp),sp
   13160:	    movea.l 72(sp),a1
   13164:	    movea.l 76(sp),a0
   13168:	    move.l 80(sp),d1
   1316c:	    move.l 84(sp),d0
   13170:	    movea.w a1,a1
   13172:	    move.w a1,8(sp)
   13176:	    movea.w a0,a0
   13178:	    move.w a0,6(sp)
   1317c:	    move.w d1,d1
   1317e:	    move.w d1,4(sp)
   13182:	    move.w d0,d0
   13184:	    move.w d0,2(sp)
	struct debug_resource resource = {
   13188:	    lea 10(sp),a0
   1318c:	    clr.l (a0)
   1318e:	    addq.l #4,a0
   13190:	    clr.l (a0)
   13192:	    addq.l #4,a0
   13194:	    clr.l (a0)
   13196:	    addq.l #4,a0
   13198:	    clr.l (a0)
   1319a:	    addq.l #4,a0
   1319c:	    clr.l (a0)
   1319e:	    addq.l #4,a0
   131a0:	    clr.l (a0)
   131a2:	    addq.l #4,a0
   131a4:	    clr.l (a0)
   131a6:	    addq.l #4,a0
   131a8:	    clr.l (a0)
   131aa:	    addq.l #4,a0
   131ac:	    clr.l (a0)
   131ae:	    addq.l #4,a0
   131b0:	    clr.l (a0)
   131b2:	    addq.l #4,a0
   131b4:	    clr.l (a0)
   131b6:	    addq.l #4,a0
   131b8:	    clr.l (a0)
   131ba:	    addq.l #4,a0
   131bc:	    clr.w (a0)
   131be:	    addq.l #2,a0
		.address = (unsigned int)addr,
   131c0:	    move.l 64(sp),d0
	struct debug_resource resource = {
   131c4:	    move.l d0,10(sp)
		.size = width / 8 * height * numPlanes,
   131c8:	    move.w 8(sp),d0
   131cc:	/-- bpl.s 131d0 <debug_register_bitmap+0x74>
   131ce:	|   addq.w #7,d0
   131d0:	\-> asr.w #3,d0
   131d2:	    movea.w d0,a0
   131d4:	    movea.w 6(sp),a1
   131d8:	    move.l a1,-(sp)
   131da:	    move.l a0,-(sp)
   131dc:	    jsr 13a0a <__mulsi3>
   131e2:	    addq.l #8,sp
   131e4:	    movea.w 4(sp),a0
   131e8:	    move.l a0,-(sp)
   131ea:	    move.l d0,-(sp)
   131ec:	    jsr 13a0a <__mulsi3>
   131f2:	    addq.l #8,sp
	struct debug_resource resource = {
   131f4:	    move.l d0,14(sp)
   131f8:	    move.w 2(sp),52(sp)
   131fe:	    move.w 8(sp),54(sp)
   13204:	    move.w 6(sp),56(sp)
   1320a:	    move.w 4(sp),58(sp)
		.type = debug_resource_type_bitmap,
		.flags = flags,
		.bitmap = { width, height, numPlanes }
	};

	if (flags & debug_resource_bitmap_masked)
   13210:	    moveq #0,d0
   13212:	    move.w 2(sp),d0
   13216:	    moveq #2,d1
   13218:	    and.l d1,d0
   1321a:	/-- beq.s 13226 <debug_register_bitmap+0xca>
		resource.size *= 2;
   1321c:	|   move.l 14(sp),d0
   13220:	|   add.l d0,d0
   13222:	|   move.l d0,14(sp)

	my_strncpy(resource.name, name, sizeof(resource.name));
   13226:	\-> pea 20 <_start+0x20>
   1322a:	    move.l 72(sp),-(sp)
   1322e:	    lea 18(sp),a0
   13232:	    move.l a0,d0
   13234:	    addq.l #8,d0
   13236:	    move.l d0,-(sp)
   13238:	    jsr 1311e <my_strncpy>
   1323e:	    lea 12(sp),sp
	debug_cmd(barto_cmd_register_resource, (unsigned int)&resource, 0, 0);
   13242:	    lea 10(sp),a0
   13246:	    clr.l -(sp)
   13248:	    clr.l -(sp)
   1324a:	    move.l a0,-(sp)
   1324c:	    pea 4 <_start+0x4>
   13250:	    jsr 130ac <debug_cmd>
   13256:	    lea 16(sp),sp
}
   1325a:	    nop
   1325c:	    lea 60(sp),sp
   13260:	    rts

00013262 <__addsf3>:
	};
	my_strncpy(resource.name, name, sizeof(resource.name));
	debug_cmd(barto_cmd_save, (unsigned int)&resource, 0, 0);
}

FLOAT __addsf3( FLOAT a, FLOAT b) {
   13262:	lea -12(sp),sp
   13266:	move.l a6,-(sp)
	return IEEESPAdd( a, b);
   13268:	move.l 20(sp),12(sp)
   1326e:	move.l 24(sp),8(sp)
   13274:	move.l 19c6e <MathIeeeSingBasBase>,d0
   1327a:	movea.l d0,a6
   1327c:	move.l 12(sp),d0
   13280:	move.l 8(sp),d1
   13284:	jsr -66(a6)
   13288:	move.l d0,4(sp)
   1328c:	move.l 4(sp),d0
}
   13290:	movea.l (sp)+,a6
   13292:	lea 12(sp),sp
   13296:	rts

00013298 <__adddf3>:

DOUBLE __adddf3( DOUBLE a, DOUBLE b) {
   13298:	lea -32(sp),sp
   1329c:	movem.l d2-d3/a6,-(sp)
	return IEEEDPAdd( a, b);
   132a0:	move.l 48(sp),36(sp)
   132a6:	move.l 52(sp),40(sp)
   132ac:	move.l 56(sp),28(sp)
   132b2:	move.l 60(sp),32(sp)
   132b8:	move.l 19c76 <MathIeeeDoubBasBase>,d0
   132be:	movea.l d0,a6
   132c0:	move.l 36(sp),d0
   132c4:	move.l 40(sp),d1
   132c8:	move.l 28(sp),d2
   132cc:	move.l 32(sp),d3
   132d0:	jsr -66(a6)
   132d4:	move.l d0,12(sp)
   132d8:	move.l d1,16(sp)
   132dc:	move.l 12(sp),20(sp)
   132e2:	move.l 16(sp),24(sp)
   132e8:	move.l 20(sp),d0
   132ec:	move.l 24(sp),d1
}
   132f0:	movem.l (sp)+,d2-d3/a6
   132f4:	lea 32(sp),sp
   132f8:	rts

000132fa <__divdf3>:

DOUBLE __divdf3( DOUBLE a, DOUBLE b) {
   132fa:	lea -32(sp),sp
   132fe:	movem.l d2-d3/a6,-(sp)
	return IEEEDPDiv( a, b);
   13302:	move.l 48(sp),36(sp)
   13308:	move.l 52(sp),40(sp)
   1330e:	move.l 56(sp),28(sp)
   13314:	move.l 60(sp),32(sp)
   1331a:	move.l 19c76 <MathIeeeDoubBasBase>,d0
   13320:	movea.l d0,a6
   13322:	move.l 36(sp),d0
   13326:	move.l 40(sp),d1
   1332a:	move.l 28(sp),d2
   1332e:	move.l 32(sp),d3
   13332:	jsr -84(a6)
   13336:	move.l d0,12(sp)
   1333a:	move.l d1,16(sp)
   1333e:	move.l 12(sp),20(sp)
   13344:	move.l 16(sp),24(sp)
   1334a:	move.l 20(sp),d0
   1334e:	move.l 24(sp),d1
}
   13352:	movem.l (sp)+,d2-d3/a6
   13356:	lea 32(sp),sp
   1335a:	rts

0001335c <__divsf3>:

FLOAT __divsf3( FLOAT a, FLOAT b) {
   1335c:	lea -12(sp),sp
   13360:	move.l a6,-(sp)
	return IEEESPDiv( a, b);
   13362:	move.l 20(sp),12(sp)
   13368:	move.l 24(sp),8(sp)
   1336e:	move.l 19c6e <MathIeeeSingBasBase>,d0
   13374:	movea.l d0,a6
   13376:	move.l 12(sp),d0
   1337a:	move.l 8(sp),d1
   1337e:	jsr -84(a6)
   13382:	move.l d0,4(sp)
   13386:	move.l 4(sp),d0
}
   1338a:	movea.l (sp)+,a6
   1338c:	lea 12(sp),sp
   13390:	rts

00013392 <__eqsf2>:

int __eqsf2( FLOAT a, FLOAT b) {
   13392:	lea -12(sp),sp
   13396:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   13398:	move.l 20(sp),12(sp)
   1339e:	move.l 24(sp),8(sp)
   133a4:	move.l 19c6e <MathIeeeSingBasBase>,d0
   133aa:	movea.l d0,a6
   133ac:	move.l 12(sp),d0
   133b0:	move.l 8(sp),d1
   133b4:	jsr -42(a6)
   133b8:	move.l d0,4(sp)
   133bc:	move.l 4(sp),d0
}
   133c0:	movea.l (sp)+,a6
   133c2:	lea 12(sp),sp
   133c6:	rts

000133c8 <__extendsfdf2>:

DOUBLE __extendsfdf2 (FLOAT a) {
   133c8:	lea -20(sp),sp
   133cc:	move.l a6,-(sp)
	return IEEEDPFieee( a );
   133ce:	move.l 28(sp),20(sp)
   133d4:	move.l 19c7a <MathIeeeDoubTransBase>,d0
   133da:	movea.l d0,a6
   133dc:	move.l 20(sp),d0
   133e0:	jsr -108(a6)
   133e4:	move.l d0,4(sp)
   133e8:	move.l d1,8(sp)
   133ec:	move.l 4(sp),12(sp)
   133f2:	move.l 8(sp),16(sp)
   133f8:	move.l 12(sp),d0
   133fc:	move.l 16(sp),d1
}
   13400:	movea.l (sp)+,a6
   13402:	lea 20(sp),sp
   13406:	rts

00013408 <__fixdfsi>:

DOUBLE __fixdfsi(DOUBLE value) {
   13408:	lea -12(sp),sp
   1340c:	move.l a6,-(sp)
	return IEEEDPFix(value);
   1340e:	move.l 20(sp),8(sp)
   13414:	move.l 24(sp),12(sp)
   1341a:	move.l 19c76 <MathIeeeDoubBasBase>,d0
   13420:	movea.l d0,a6
   13422:	move.l 8(sp),d0
   13426:	move.l 12(sp),d1
   1342a:	jsr -30(a6)
   1342e:	move.l d0,4(sp)
   13432:	move.l 4(sp),d0
   13436:	move.l d0,-(sp)
   13438:	jsr 13470 <__floatsidf>
   1343e:	addq.l #4,sp
}
   13440:	movea.l (sp)+,a6
   13442:	lea 12(sp),sp
   13446:	rts

00013448 <__fixsfsi>:

LONG __fixsfsi(FLOAT value) {
   13448:	subq.l #8,sp
   1344a:	move.l a6,-(sp)
	return IEEESPFix(value);
   1344c:	move.l 16(sp),8(sp)
   13452:	move.l 19c6e <MathIeeeSingBasBase>,d0
   13458:	movea.l d0,a6
   1345a:	move.l 8(sp),d0
   1345e:	jsr -30(a6)
   13462:	move.l d0,4(sp)
   13466:	move.l 4(sp),d0
}
   1346a:	movea.l (sp)+,a6
   1346c:	addq.l #8,sp
   1346e:	rts

00013470 <__floatsidf>:


DOUBLE __floatsidf (int i) {
   13470:	lea -20(sp),sp
   13474:	move.l a6,-(sp)
	return IEEEDPFlt((LONG) i);  
   13476:	move.l 28(sp),20(sp)
   1347c:	move.l 19c76 <MathIeeeDoubBasBase>,d0
   13482:	movea.l d0,a6
   13484:	move.l 20(sp),d0
   13488:	jsr -36(a6)
   1348c:	move.l d0,4(sp)
   13490:	move.l d1,8(sp)
   13494:	move.l 4(sp),12(sp)
   1349a:	move.l 8(sp),16(sp)
   134a0:	move.l 12(sp),d0
   134a4:	move.l 16(sp),d1
}
   134a8:	movea.l (sp)+,a6
   134aa:	lea 20(sp),sp
   134ae:	rts

000134b0 <__floatsisf>:

FLOAT __floatsisf(int i) {
   134b0:	subq.l #8,sp
   134b2:	move.l a6,-(sp)
	return IEEESPFlt((LONG) i); 
   134b4:	move.l 16(sp),8(sp)
   134ba:	move.l 19c6e <MathIeeeSingBasBase>,d0
   134c0:	movea.l d0,a6
   134c2:	move.l 8(sp),d0
   134c6:	jsr -36(a6)
   134ca:	move.l d0,4(sp)
   134ce:	move.l 4(sp),d0
}
   134d2:	movea.l (sp)+,a6
   134d4:	addq.l #8,sp
   134d6:	rts

000134d8 <__floatunsisf>:

FLOAT __floatunsisf(unsigned int i) {	
   134d8:	subq.l #8,sp
   134da:	move.l a6,-(sp)
	return IEEESPFlt((LONG) i); 
   134dc:	move.l 16(sp),8(sp)
   134e2:	move.l 19c6e <MathIeeeSingBasBase>,d0
   134e8:	movea.l d0,a6
   134ea:	move.l 8(sp),d0
   134ee:	jsr -36(a6)
   134f2:	move.l d0,4(sp)
   134f6:	move.l 4(sp),d0
}
   134fa:	movea.l (sp)+,a6
   134fc:	addq.l #8,sp
   134fe:	rts

00013500 <__muldf3>:

DOUBLE __muldf3( DOUBLE leftParm, DOUBLE rightParm ) {
   13500:	lea -32(sp),sp
   13504:	movem.l d2-d3/a6,-(sp)
	return IEEEDPMul( leftParm, rightParm);
   13508:	move.l 48(sp),36(sp)
   1350e:	move.l 52(sp),40(sp)
   13514:	move.l 56(sp),28(sp)
   1351a:	move.l 60(sp),32(sp)
   13520:	move.l 19c76 <MathIeeeDoubBasBase>,d0
   13526:	movea.l d0,a6
   13528:	move.l 36(sp),d0
   1352c:	move.l 40(sp),d1
   13530:	move.l 28(sp),d2
   13534:	move.l 32(sp),d3
   13538:	jsr -78(a6)
   1353c:	move.l d0,12(sp)
   13540:	move.l d1,16(sp)
   13544:	move.l 12(sp),20(sp)
   1354a:	move.l 16(sp),24(sp)
   13550:	move.l 20(sp),d0
   13554:	move.l 24(sp),d1
}
   13558:	movem.l (sp)+,d2-d3/a6
   1355c:	lea 32(sp),sp
   13560:	rts

00013562 <__mulsf3>:

 //FLOAT IEEESPMul( FLOAT leftParm, FLOAT rightParm );
FLOAT __mulsf3( FLOAT leftParm, FLOAT rightParm ) {
   13562:	lea -12(sp),sp
   13566:	move.l a6,-(sp)
	return IEEESPMul( leftParm, rightParm);
   13568:	move.l 20(sp),12(sp)
   1356e:	move.l 24(sp),8(sp)
   13574:	move.l 19c6e <MathIeeeSingBasBase>,d0
   1357a:	movea.l d0,a6
   1357c:	move.l 12(sp),d0
   13580:	move.l 8(sp),d1
   13584:	jsr -78(a6)
   13588:	move.l d0,4(sp)
   1358c:	move.l 4(sp),d0
}
   13590:	movea.l (sp)+,a6
   13592:	lea 12(sp),sp
   13596:	rts

00013598 <__gesf2>:


int __gesf2( FLOAT a, FLOAT b) {
   13598:	lea -12(sp),sp
   1359c:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   1359e:	move.l 20(sp),12(sp)
   135a4:	move.l 24(sp),8(sp)
   135aa:	move.l 19c6e <MathIeeeSingBasBase>,d0
   135b0:	movea.l d0,a6
   135b2:	move.l 12(sp),d0
   135b6:	move.l 8(sp),d1
   135ba:	jsr -42(a6)
   135be:	move.l d0,4(sp)
   135c2:	move.l 4(sp),d0
}
   135c6:	movea.l (sp)+,a6
   135c8:	lea 12(sp),sp
   135cc:	rts

000135ce <__gtdf2>:

int __gtdf2( DOUBLE a, DOUBLE b) {
   135ce:	lea -20(sp),sp
   135d2:	movem.l d2-d3/a6,-(sp)
	return IEEEDPCmp( a, b);
   135d6:	move.l 36(sp),24(sp)
   135dc:	move.l 40(sp),28(sp)
   135e2:	move.l 44(sp),16(sp)
   135e8:	move.l 48(sp),20(sp)
   135ee:	move.l 19c76 <MathIeeeDoubBasBase>,d0
   135f4:	movea.l d0,a6
   135f6:	move.l 24(sp),d0
   135fa:	move.l 28(sp),d1
   135fe:	move.l 16(sp),d2
   13602:	move.l 20(sp),d3
   13606:	jsr -42(a6)
   1360a:	move.l d0,12(sp)
   1360e:	move.l 12(sp),d0
}
   13612:	movem.l (sp)+,d2-d3/a6
   13616:	lea 20(sp),sp
   1361a:	rts

0001361c <__gtsf2>:

int __gtsf2( FLOAT a, FLOAT b) {
   1361c:	lea -12(sp),sp
   13620:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   13622:	move.l 20(sp),12(sp)
   13628:	move.l 24(sp),8(sp)
   1362e:	move.l 19c6e <MathIeeeSingBasBase>,d0
   13634:	movea.l d0,a6
   13636:	move.l 12(sp),d0
   1363a:	move.l 8(sp),d1
   1363e:	jsr -42(a6)
   13642:	move.l d0,4(sp)
   13646:	move.l 4(sp),d0
}
   1364a:	movea.l (sp)+,a6
   1364c:	lea 12(sp),sp
   13650:	rts

00013652 <__lesf2>:

int __lesf2( FLOAT a, FLOAT b) {
   13652:	lea -12(sp),sp
   13656:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   13658:	move.l 20(sp),12(sp)
   1365e:	move.l 24(sp),8(sp)
   13664:	move.l 19c6e <MathIeeeSingBasBase>,d0
   1366a:	movea.l d0,a6
   1366c:	move.l 12(sp),d0
   13670:	move.l 8(sp),d1
   13674:	jsr -42(a6)
   13678:	move.l d0,4(sp)
   1367c:	move.l 4(sp),d0
}
   13680:	movea.l (sp)+,a6
   13682:	lea 12(sp),sp
   13686:	rts

00013688 <__ltdf2>:

int __ltdf2( DOUBLE a, DOUBLE b) {
   13688:	lea -20(sp),sp
   1368c:	movem.l d2-d3/a6,-(sp)
	return IEEEDPCmp( a, b);
   13690:	move.l 36(sp),24(sp)
   13696:	move.l 40(sp),28(sp)
   1369c:	move.l 44(sp),16(sp)
   136a2:	move.l 48(sp),20(sp)
   136a8:	move.l 19c76 <MathIeeeDoubBasBase>,d0
   136ae:	movea.l d0,a6
   136b0:	move.l 24(sp),d0
   136b4:	move.l 28(sp),d1
   136b8:	move.l 16(sp),d2
   136bc:	move.l 20(sp),d3
   136c0:	jsr -42(a6)
   136c4:	move.l d0,12(sp)
   136c8:	move.l 12(sp),d0
}
   136cc:	movem.l (sp)+,d2-d3/a6
   136d0:	lea 20(sp),sp
   136d4:	rts

000136d6 <__ltsf2>:

int __ltsf2( FLOAT a, FLOAT b) {
   136d6:	lea -12(sp),sp
   136da:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   136dc:	move.l 20(sp),12(sp)
   136e2:	move.l 24(sp),8(sp)
   136e8:	move.l 19c6e <MathIeeeSingBasBase>,d0
   136ee:	movea.l d0,a6
   136f0:	move.l 12(sp),d0
   136f4:	move.l 8(sp),d1
   136f8:	jsr -42(a6)
   136fc:	move.l d0,4(sp)
   13700:	move.l 4(sp),d0
}
   13704:	movea.l (sp)+,a6
   13706:	lea 12(sp),sp
   1370a:	rts

0001370c <__nesf2>:

int __nesf2( FLOAT a, FLOAT b) {
   1370c:	lea -12(sp),sp
   13710:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   13712:	move.l 20(sp),12(sp)
   13718:	move.l 24(sp),8(sp)
   1371e:	move.l 19c6e <MathIeeeSingBasBase>,d0
   13724:	movea.l d0,a6
   13726:	move.l 12(sp),d0
   1372a:	move.l 8(sp),d1
   1372e:	jsr -42(a6)
   13732:	move.l d0,4(sp)
   13736:	move.l 4(sp),d0
}
   1373a:	movea.l (sp)+,a6
   1373c:	lea 12(sp),sp
   13740:	rts

00013742 <__subdf3>:

DOUBLE __subdf3 (DOUBLE a, DOUBLE b) {
   13742:	lea -32(sp),sp
   13746:	movem.l d2-d3/a6,-(sp)
	return IEEEDPSub( a, b);
   1374a:	move.l 48(sp),36(sp)
   13750:	move.l 52(sp),40(sp)
   13756:	move.l 56(sp),28(sp)
   1375c:	move.l 60(sp),32(sp)
   13762:	move.l 19c76 <MathIeeeDoubBasBase>,d0
   13768:	movea.l d0,a6
   1376a:	move.l 36(sp),d0
   1376e:	move.l 40(sp),d1
   13772:	move.l 28(sp),d2
   13776:	move.l 32(sp),d3
   1377a:	jsr -72(a6)
   1377e:	move.l d0,12(sp)
   13782:	move.l d1,16(sp)
   13786:	move.l 12(sp),20(sp)
   1378c:	move.l 16(sp),24(sp)
   13792:	move.l 20(sp),d0
   13796:	move.l 24(sp),d1
}
   1379a:	movem.l (sp)+,d2-d3/a6
   1379e:	lea 32(sp),sp
   137a2:	rts

000137a4 <__subsf3>:

FLOAT __subsf3 (float a, float b) {
   137a4:	lea -12(sp),sp
   137a8:	move.l a6,-(sp)
	return IEEESPSub( a, b);
   137aa:	move.l 20(sp),12(sp)
   137b0:	move.l 24(sp),8(sp)
   137b6:	move.l 19c6e <MathIeeeSingBasBase>,d0
   137bc:	movea.l d0,a6
   137be:	move.l 12(sp),d0
   137c2:	move.l 8(sp),d1
   137c6:	jsr -72(a6)
   137ca:	move.l d0,4(sp)
   137ce:	move.l 4(sp),d0
}
   137d2:	movea.l (sp)+,a6
   137d4:	lea 12(sp),sp
   137d8:	rts

000137da <__truncdfsf2>:

FLOAT __truncdfsf2(DOUBLE a) {
   137da:	lea -12(sp),sp
   137de:	move.l a6,-(sp)
	return IEEEDPTieee( a);
   137e0:	move.l 20(sp),8(sp)
   137e6:	move.l 24(sp),12(sp)
   137ec:	move.l 19c7a <MathIeeeDoubTransBase>,d0
   137f2:	movea.l d0,a6
   137f4:	move.l 8(sp),d0
   137f8:	move.l 12(sp),d1
   137fc:	jsr -102(a6)
   13800:	move.l d0,4(sp)
   13804:	move.l 4(sp),d0
}
   13808:	movea.l (sp)+,a6
   1380a:	lea 12(sp),sp
   1380e:	rts

00013810 <atan2f>:

FLOAT atan2f(FLOAT y, FLOAT x) {
   13810:	       lea -24(sp),sp
   13814:	       move.l a6,-(sp)
    if (x > 0) {
   13816:	       clr.l -(sp)
   13818:	       move.l 40(sp),-(sp)
   1381c:	       jsr 1361c <__gtsf2>
   13822:	       addq.l #8,sp
   13824:	       tst.l d0
   13826:	   /-- ble.s 13858 <atan2f+0x48>
        return IEEESPAtan(y / x);
   13828:	   |   move.l 36(sp),-(sp)
   1382c:	   |   move.l 36(sp),-(sp)
   13830:	   |   jsr 1335c <__divsf3>
   13836:	   |   addq.l #8,sp
   13838:	   |   move.l d0,8(sp)
   1383c:	   |   move.l 19c72 <MathIeeeSingTransBase>,d0
   13842:	   |   movea.l d0,a6
   13844:	   |   move.l 8(sp),d0
   13848:	   |   jsr -30(a6)
   1384c:	   |   move.l d0,4(sp)
   13850:	   |   move.l 4(sp),d0
   13854:	/--|-- bra.w 139b8 <atan2f+0x1a8>
    } else if (x < 0 && y >= 0) {
   13858:	|  \-> clr.l -(sp)
   1385a:	|      move.l 40(sp),-(sp)
   1385e:	|      jsr 136d6 <__ltsf2>
   13864:	|      addq.l #8,sp
   13866:	|      tst.l d0
   13868:	|  /-- bge.s 138dc <atan2f+0xcc>
   1386a:	|  |   clr.l -(sp)
   1386c:	|  |   move.l 36(sp),-(sp)
   13870:	|  |   jsr 13598 <__gesf2>
   13876:	|  |   addq.l #8,sp
   13878:	|  |   tst.l d0
   1387a:	|  +-- blt.s 138dc <atan2f+0xcc>
        return IEEESPAtan(y / x) + PI;
   1387c:	|  |   move.l 36(sp),-(sp)
   13880:	|  |   move.l 36(sp),-(sp)
   13884:	|  |   jsr 1335c <__divsf3>
   1388a:	|  |   addq.l #8,sp
   1388c:	|  |   move.l d0,24(sp)
   13890:	|  |   move.l 19c72 <MathIeeeSingTransBase>,d0
   13896:	|  |   movea.l d0,a6
   13898:	|  |   move.l 24(sp),d0
   1389c:	|  |   jsr -30(a6)
   138a0:	|  |   move.l d0,20(sp)
   138a4:	|  |   move.l 20(sp),d0
   138a8:	|  |   move.l d0,-(sp)
   138aa:	|  |   jsr 133c8 <__extendsfdf2>
   138b0:	|  |   addq.l #4,sp
   138b2:	|  |   move.l #1413754136,-(sp)
   138b8:	|  |   move.l #1074340347,-(sp)
   138be:	|  |   move.l d1,-(sp)
   138c0:	|  |   move.l d0,-(sp)
   138c2:	|  |   jsr 13298 <__adddf3>
   138c8:	|  |   lea 16(sp),sp
   138cc:	|  |   move.l d1,-(sp)
   138ce:	|  |   move.l d0,-(sp)
   138d0:	|  |   jsr 137da <__truncdfsf2>
   138d6:	|  |   addq.l #8,sp
   138d8:	+--|-- bra.w 139b8 <atan2f+0x1a8>
    } else if (x < 0 && y < 0) {
   138dc:	|  \-> clr.l -(sp)
   138de:	|      move.l 40(sp),-(sp)
   138e2:	|      jsr 136d6 <__ltsf2>
   138e8:	|      addq.l #8,sp
   138ea:	|      tst.l d0
   138ec:	|  /-- bge.s 1395e <atan2f+0x14e>
   138ee:	|  |   clr.l -(sp)
   138f0:	|  |   move.l 36(sp),-(sp)
   138f4:	|  |   jsr 136d6 <__ltsf2>
   138fa:	|  |   addq.l #8,sp
   138fc:	|  |   tst.l d0
   138fe:	|  +-- bge.s 1395e <atan2f+0x14e>
        return IEEESPAtan(y / x) - PI;
   13900:	|  |   move.l 36(sp),-(sp)
   13904:	|  |   move.l 36(sp),-(sp)
   13908:	|  |   jsr 1335c <__divsf3>
   1390e:	|  |   addq.l #8,sp
   13910:	|  |   move.l d0,16(sp)
   13914:	|  |   move.l 19c72 <MathIeeeSingTransBase>,d0
   1391a:	|  |   movea.l d0,a6
   1391c:	|  |   move.l 16(sp),d0
   13920:	|  |   jsr -30(a6)
   13924:	|  |   move.l d0,12(sp)
   13928:	|  |   move.l 12(sp),d0
   1392c:	|  |   move.l d0,-(sp)
   1392e:	|  |   jsr 133c8 <__extendsfdf2>
   13934:	|  |   addq.l #4,sp
   13936:	|  |   move.l #1413754136,-(sp)
   1393c:	|  |   move.l #1074340347,-(sp)
   13942:	|  |   move.l d1,-(sp)
   13944:	|  |   move.l d0,-(sp)
   13946:	|  |   jsr 13742 <__subdf3>
   1394c:	|  |   lea 16(sp),sp
   13950:	|  |   move.l d1,-(sp)
   13952:	|  |   move.l d0,-(sp)
   13954:	|  |   jsr 137da <__truncdfsf2>
   1395a:	|  |   addq.l #8,sp
   1395c:	+--|-- bra.s 139b8 <atan2f+0x1a8>
    } else if (x == 0 && y > 0) {
   1395e:	|  \-> clr.l -(sp)
   13960:	|      move.l 40(sp),-(sp)
   13964:	|      jsr 13392 <__eqsf2>
   1396a:	|      addq.l #8,sp
   1396c:	|      tst.l d0
   1396e:	|  /-- bne.s 1398a <atan2f+0x17a>
   13970:	|  |   clr.l -(sp)
   13972:	|  |   move.l 36(sp),-(sp)
   13976:	|  |   jsr 1361c <__gtsf2>
   1397c:	|  |   addq.l #8,sp
   1397e:	|  |   tst.l d0
   13980:	|  +-- ble.s 1398a <atan2f+0x17a>
        return PI / 2;
   13982:	|  |   move.l #1070141403,d0
   13988:	+--|-- bra.s 139b8 <atan2f+0x1a8>
    } else if (x == 0 && y < 0) {
   1398a:	|  \-> clr.l -(sp)
   1398c:	|      move.l 40(sp),-(sp)
   13990:	|      jsr 13392 <__eqsf2>
   13996:	|      addq.l #8,sp
   13998:	|      tst.l d0
   1399a:	|  /-- bne.s 139b6 <atan2f+0x1a6>
   1399c:	|  |   clr.l -(sp)
   1399e:	|  |   move.l 36(sp),-(sp)
   139a2:	|  |   jsr 136d6 <__ltsf2>
   139a8:	|  |   addq.l #8,sp
   139aa:	|  |   tst.l d0
   139ac:	|  +-- bge.s 139b6 <atan2f+0x1a6>
        return -PI / 2;
   139ae:	|  |   move.l #-1077342245,d0
   139b4:	+--|-- bra.s 139b8 <atan2f+0x1a8>
    } else {
        // This case is x == 0 and y == 0, atan2(0, 0) is undefined, but often treated as 0.
        return 0;
   139b6:	|  \-> moveq #0,d0
    }
}
   139b8:	\----> movea.l (sp)+,a6
   139ba:	       lea 24(sp),sp
   139be:	       rts

000139c0 <sqrt>:

DOUBLE sqrt( DOUBLE input) {
   139c0:	lea -24(sp),sp
   139c4:	move.l a6,-(sp)
	return IEEEDPSqrt(input);
   139c6:	move.l 32(sp),20(sp)
   139cc:	move.l 36(sp),24(sp)
   139d2:	move.l 19c7a <MathIeeeDoubTransBase>,d0
   139d8:	movea.l d0,a6
   139da:	move.l 20(sp),d0
   139de:	move.l 24(sp),d1
   139e2:	jsr -96(a6)
   139e6:	move.l d0,4(sp)
   139ea:	move.l d1,8(sp)
   139ee:	move.l 4(sp),12(sp)
   139f4:	move.l 8(sp),16(sp)
   139fa:	move.l 12(sp),d0
   139fe:	move.l 16(sp),d1
}
   13a02:	movea.l (sp)+,a6
   13a04:	lea 24(sp),sp
   13a08:	rts

00013a0a <__mulsi3>:
	.section .text.__mulsi3,"ax",@progbits
	.type __mulsi3, function
	.globl	__mulsi3
__mulsi3:
	.cfi_startproc
	movew	sp@(4), d0	/* x0 -> d0 */
   13a0a:	move.w 4(sp),d0
	muluw	sp@(10), d0	/* x0*y1 */
   13a0e:	mulu.w 10(sp),d0
	movew	sp@(6), d1	/* x1 -> d1 */
   13a12:	move.w 6(sp),d1
	muluw	sp@(8), d1	/* x1*y0 */
   13a16:	mulu.w 8(sp),d1
	addw	d1, d0
   13a1a:	add.w d1,d0
	swap	d0
   13a1c:	swap d0
	clrw	d0
   13a1e:	clr.w d0
	movew	sp@(6), d1	/* x1 -> d1 */
   13a20:	move.w 6(sp),d1
	muluw	sp@(10), d1	/* x1*y1 */
   13a24:	mulu.w 10(sp),d1
	addl	d1, d0
   13a28:	add.l d1,d0
	rts
   13a2a:	rts

00013a2c <__udivsi3>:
	.section .text.__udivsi3,"ax",@progbits
	.type __udivsi3, function
	.globl	__udivsi3
__udivsi3:
	.cfi_startproc
	movel	d2, sp@-
   13a2c:	       move.l d2,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	sp@(12), d1	/* d1 = divisor */
   13a2e:	       move.l 12(sp),d1
	movel	sp@(8), d0	/* d0 = dividend */
   13a32:	       move.l 8(sp),d0

	cmpl	#0x10000, d1 /* divisor >= 2 ^ 16 ?   */
   13a36:	       cmpi.l #65536,d1
	jcc	3f		/* then try next algorithm */
   13a3c:	   /-- bcc.s 13a54 <__udivsi3+0x28>
	movel	d0, d2
   13a3e:	   |   move.l d0,d2
	clrw	d2
   13a40:	   |   clr.w d2
	swap	d2
   13a42:	   |   swap d2
	divu	d1, d2          /* high quotient in lower word */
   13a44:	   |   divu.w d1,d2
	movew	d2, d0		/* save high quotient */
   13a46:	   |   move.w d2,d0
	swap	d0
   13a48:	   |   swap d0
	movew	sp@(10), d2	/* get low dividend + high rest */
   13a4a:	   |   move.w 10(sp),d2
	divu	d1, d2		/* low quotient */
   13a4e:	   |   divu.w d1,d2
	movew	d2, d0
   13a50:	   |   move.w d2,d0
	jra	6f
   13a52:	/--|-- bra.s 13a84 <__udivsi3+0x58>

3:	movel	d1, d2		/* use d2 as divisor backup */
   13a54:	|  \-> move.l d1,d2
4:	lsrl	#1, d1	/* shift divisor */
   13a56:	|  /-> lsr.l #1,d1
	lsrl	#1, d0	/* shift dividend */
   13a58:	|  |   lsr.l #1,d0
	cmpl	#0x10000, d1 /* still divisor >= 2 ^ 16 ?  */
   13a5a:	|  |   cmpi.l #65536,d1
	jcc	4b
   13a60:	|  \-- bcc.s 13a56 <__udivsi3+0x2a>
	divu	d1, d0		/* now we have 16-bit divisor */
   13a62:	|      divu.w d1,d0
	andl	#0xffff, d0 /* mask out divisor, ignore remainder */
   13a64:	|      andi.l #65535,d0

/* Multiply the 16-bit tentative quotient with the 32-bit divisor.  Because of
   the operand ranges, this might give a 33-bit product.  If this product is
   greater than the dividend, the tentative quotient was too large. */
	movel	d2, d1
   13a6a:	|      move.l d2,d1
	mulu	d0, d1		/* low part, 32 bits */
   13a6c:	|      mulu.w d0,d1
	swap	d2
   13a6e:	|      swap d2
	mulu	d0, d2		/* high part, at most 17 bits */
   13a70:	|      mulu.w d0,d2
	swap	d2		/* align high part with low part */
   13a72:	|      swap d2
	tstw	d2		/* high part 17 bits? */
   13a74:	|      tst.w d2
	jne	5f		/* if 17 bits, quotient was too large */
   13a76:	|  /-- bne.s 13a82 <__udivsi3+0x56>
	addl	d2, d1		/* add parts */
   13a78:	|  |   add.l d2,d1
	jcs	5f		/* if sum is 33 bits, quotient was too large */
   13a7a:	|  +-- bcs.s 13a82 <__udivsi3+0x56>
	cmpl	sp@(8), d1	/* compare the sum with the dividend */
   13a7c:	|  |   cmp.l 8(sp),d1
	jls	6f		/* if sum > dividend, quotient was too large */
   13a80:	+--|-- bls.s 13a84 <__udivsi3+0x58>
5:	subql	#1, d0	/* adjust quotient */
   13a82:	|  \-> subq.l #1,d0

6:	movel	sp@+, d2
   13a84:	\----> move.l (sp)+,d2
	.cfi_adjust_cfa_offset -4
	rts
   13a86:	       rts

00013a88 <__divsi3>:
	.section .text.__divsi3,"ax",@progbits
	.type __divsi3, function
	.globl	__divsi3
 __divsi3:
 	.cfi_startproc
	movel	d2, sp@-
   13a88:	    move.l d2,-(sp)
	.cfi_adjust_cfa_offset 4

	moveq	#1, d2	/* sign of result stored in d2 (=1 or =-1) */
   13a8a:	    moveq #1,d2
	movel	sp@(12), d1	/* d1 = divisor */
   13a8c:	    move.l 12(sp),d1
	jpl	1f
   13a90:	/-- bpl.s 13a96 <__divsi3+0xe>
	negl	d1
   13a92:	|   neg.l d1
	negb	d2		/* change sign because divisor <0  */
   13a94:	|   neg.b d2
1:	movel	sp@(8), d0	/* d0 = dividend */
   13a96:	\-> move.l 8(sp),d0
	jpl	2f
   13a9a:	/-- bpl.s 13aa0 <__divsi3+0x18>
	negl	d0
   13a9c:	|   neg.l d0
	negb	d2
   13a9e:	|   neg.b d2

2:	movel	d1, sp@-
   13aa0:	\-> move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   13aa2:	    move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__udivsi3	/* divide abs(dividend) by abs(divisor) */
   13aa4:	    jsr 13a2c <__udivsi3>
	addql	#8, sp
   13aaa:	    addq.l #8,sp
	.cfi_adjust_cfa_offset -8

	tstb	d2
   13aac:	    tst.b d2
	jpl	3f
   13aae:	/-- bpl.s 13ab2 <__divsi3+0x2a>
	negl	d0
   13ab0:	|   neg.l d0

3:	movel	sp@+, d2
   13ab2:	\-> move.l (sp)+,d2
	.cfi_adjust_cfa_offset -4
	rts
   13ab4:	    rts

00013ab6 <__modsi3>:
	.section .text.__modsi3,"ax",@progbits
	.type __modsi3, function
	.globl	__modsi3
__modsi3:
	.cfi_startproc
	movel	sp@(8), d1	/* d1 = divisor */
   13ab6:	move.l 8(sp),d1
	movel	sp@(4), d0	/* d0 = dividend */
   13aba:	move.l 4(sp),d0
	movel	d1, sp@-
   13abe:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   13ac0:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__divsi3
   13ac2:	jsr 13a88 <__divsi3>
	addql	#8, sp
   13ac8:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(8), d1	/* d1 = divisor */
   13aca:	move.l 8(sp),d1
	movel	d1, sp@-
   13ace:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   13ad0:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__mulsi3	/* d0 = (a/b)*b */
   13ad2:	jsr 13a0a <__mulsi3>
	addql	#8, sp
   13ad8:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(4), d1	/* d1 = dividend */
   13ada:	move.l 4(sp),d1
	subl	d0, d1		/* d1 = a - (a/b)*b */
   13ade:	sub.l d0,d1
	movel	d1, d0
   13ae0:	move.l d1,d0
	rts
   13ae2:	rts

00013ae4 <__umodsi3>:
	.section .text.__umodsi3,"ax",@progbits
	.type __umodsi3, function
	.globl	__umodsi3
__umodsi3:
	.cfi_startproc
	movel	sp@(8), d1	/* d1 = divisor */
   13ae4:	move.l 8(sp),d1
	movel	sp@(4), d0	/* d0 = dividend */
   13ae8:	move.l 4(sp),d0
	movel	d1, sp@-
   13aec:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   13aee:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__udivsi3
   13af0:	jsr 13a2c <__udivsi3>
	addql	#8, sp
   13af6:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(8), d1	/* d1 = divisor */
   13af8:	move.l 8(sp),d1
	movel	d1, sp@-
   13afc:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   13afe:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__mulsi3	/* d0 = (a/b)*b */
   13b00:	jsr 13a0a <__mulsi3>
	addql	#8, sp
   13b06:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(4), d1	/* d1 = dividend */
   13b08:	move.l 4(sp),d1
	subl	d0, d1		/* d1 = a - (a/b)*b */
   13b0c:	sub.l d0,d1
	movel	d1, d0
   13b0e:	move.l d1,d0
	rts
   13b10:	rts

00013b12 <KPutCharX>:
	.type KPutCharX, function
	.globl	KPutCharX

KPutCharX:
	.cfi_startproc
    move.l  a6, -(sp)
   13b12:	move.l a6,-(sp)
	.cfi_adjust_cfa_offset 4
    move.l  4.w, a6
   13b14:	movea.l 4 <_start+0x4>,a6
    jsr     -0x204(a6)
   13b18:	jsr -516(a6)
    move.l (sp)+, a6
   13b1c:	movea.l (sp)+,a6
	.cfi_adjust_cfa_offset -4
    rts
   13b1e:	rts

00013b20 <PutChar>:
	.type PutChar, function
	.globl	PutChar

PutChar:
	.cfi_startproc
	move.b d0, (a3)+
   13b20:	move.b d0,(a3)+
	rts
   13b22:	rts
