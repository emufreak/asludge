
out/a.elf:     file format elf32-m68k


Disassembly of section .text:

00000000 <_start>:
extern void (*__init_array_start[])() __attribute__((weak));
extern void (*__init_array_end[])() __attribute__((weak));
extern void (*__fini_array_start[])() __attribute__((weak));
extern void (*__fini_array_end[])() __attribute__((weak));

__attribute__((used)) __attribute__((section(".text.unlikely"))) void _start() {
       0:	       subq.l #8,sp
	// initialize globals, ctors etc.
	unsigned long count;
	unsigned long i;

	count = __preinit_array_end - __preinit_array_start;
       2:	       move.l #115422,d0
       8:	       subi.l #115422,d0
       e:	       asr.l #2,d0
      10:	       move.l d0,(sp)
	for (i = 0; i < count; i++)
      12:	       clr.l 4(sp)
      16:	   /-- bra.s 32 <_start+0x32>
		__preinit_array_start[i]();
      18:	/--|-> move.l 4(sp),d0
      1c:	|  |   add.l d0,d0
      1e:	|  |   movea.l d0,a1
      20:	|  |   adda.l d0,a1
      22:	|  |   lea 1c2de <allowAnyFilename>,a0
      28:	|  |   movea.l (0,a1,a0.l),a0
      2c:	|  |   jsr (a0)
	for (i = 0; i < count; i++)
      2e:	|  |   addq.l #1,4(sp)
      32:	|  \-> move.l 4(sp),d0
      36:	|      cmp.l (sp),d0
      38:	\----- bcs.s 18 <_start+0x18>

	count = __init_array_end - __init_array_start;
      3a:	       move.l #115422,d0
      40:	       subi.l #115422,d0
      46:	       asr.l #2,d0
      48:	       move.l d0,(sp)
	for (i = 0; i < count; i++)
      4a:	       clr.l 4(sp)
      4e:	   /-- bra.s 6a <_start+0x6a>
		__init_array_start[i]();
      50:	/--|-> move.l 4(sp),d0
      54:	|  |   add.l d0,d0
      56:	|  |   movea.l d0,a1
      58:	|  |   adda.l d0,a1
      5a:	|  |   lea 1c2de <allowAnyFilename>,a0
      60:	|  |   movea.l (0,a1,a0.l),a0
      64:	|  |   jsr (a0)
	for (i = 0; i < count; i++)
      66:	|  |   addq.l #1,4(sp)
      6a:	|  \-> move.l 4(sp),d0
      6e:	|      cmp.l (sp),d0
      70:	\----- bcs.s 50 <_start+0x50>

	main();
      72:	       jsr 76e2 <main>

	// call dtors
	count = __fini_array_end - __fini_array_start;
      78:	       move.l #115422,d0
      7e:	       subi.l #115422,d0
      84:	       asr.l #2,d0
      86:	       move.l d0,(sp)
	for (i = count; i > 0; i--)
      88:	       move.l (sp),4(sp)
      8c:	   /-- bra.s aa <_start+0xaa>
		__fini_array_start[i - 1]();
      8e:	/--|-> move.l 4(sp),d0
      92:	|  |   subq.l #1,d0
      94:	|  |   add.l d0,d0
      96:	|  |   movea.l d0,a1
      98:	|  |   adda.l d0,a1
      9a:	|  |   lea 1c2de <allowAnyFilename>,a0
      a0:	|  |   movea.l (0,a1,a0.l),a0
      a4:	|  |   jsr (a0)
	for (i = count; i > 0; i--)
      a6:	|  |   subq.l #1,4(sp)
      aa:	|  \-> tst.l 4(sp)
      ae:	\----- bne.s 8e <_start+0x8e>
}
      b0:	       nop
      b2:	       nop
      b4:	       addq.l #8,sp
      b6:	       rts

000000b8 <copyString>:
#include "support/gcc8_c_support.h"
#include "moreio.h"

BOOL allowAnyFilename = TRUE;

char * copyString(const char * c) {
      b8:	       lea -16(sp),sp
      bc:	       move.l a6,-(sp)
    char * r = (char *)AllocVec(strlen(c) + 1, MEMF_ANY);
      be:	       move.l 24(sp),-(sp)
      c2:	       jsr 13df2 <strlen>
      c8:	       addq.l #4,sp
      ca:	       move.l d0,d1
      cc:	       addq.l #1,d1
      ce:	       move.l d1,16(sp)
      d2:	       clr.l 12(sp)
      d6:	       move.l 1ca82 <SysBase>,d0
      dc:	       movea.l d0,a6
      de:	       move.l 16(sp),d0
      e2:	       move.l 12(sp),d1
      e6:	       jsr -684(a6)
      ea:	       move.l d0,8(sp)
      ee:	       move.l 8(sp),d0
      f2:	       move.l d0,4(sp)
    if (!r) return NULL;
      f6:	   /-- bne.s fc <copyString+0x44>
      f8:	   |   moveq #0,d0
      fa:	/--|-- bra.s 110 <copyString+0x58>
    strcpy(r, c);
      fc:	|  \-> move.l 24(sp),-(sp)
     100:	|      move.l 8(sp),-(sp)
     104:	|      jsr 13e0a <strcpy>
     10a:	|      addq.l #8,sp
    return r;
     10c:	|      move.l 4(sp),d0
}
     110:	\----> movea.l (sp)+,a6
     112:	       lea 16(sp),sp
     116:	       rts

00000118 <decodeFilename>:

char * decodeFilename(char * nameIn) {
     118:	                      lea -20(sp),sp
     11c:	                      move.l a6,-(sp)
	if (allowAnyFilename) {
     11e:	                      move.w 1c2de <allowAnyFilename>,d0
     124:	/-------------------- beq.w 2ea <decodeFilename+0x1d2>
		char * newName = (char *)AllocVec(strlen(nameIn) + 1, MEMF_ANY);
     128:	|                     move.l 28(sp),-(sp)
     12c:	|                     jsr 13df2 <strlen>
     132:	|                     addq.l #4,sp
     134:	|                     move.l d0,d1
     136:	|                     addq.l #1,d1
     138:	|                     move.l d1,16(sp)
     13c:	|                     clr.l 12(sp)
     140:	|                     move.l 1ca82 <SysBase>,d0
     146:	|                     movea.l d0,a6
     148:	|                     move.l 16(sp),d0
     14c:	|                     move.l 12(sp),d1
     150:	|                     jsr -684(a6)
     154:	|                     move.l d0,8(sp)
     158:	|                     move.l 8(sp),d0
     15c:	|                     move.l d0,4(sp)
		if (!newName) return NULL;
     160:	|                 /-- bne.s 168 <decodeFilename+0x50>
     162:	|                 |   moveq #0,d0
     164:	|  /--------------|-- bra.w 2f6 <decodeFilename+0x1de>

		int i = 0;
     168:	|  |              \-> clr.l 20(sp)
		while (*nameIn) {
     16c:	|  |     /----------- bra.w 2ce <decodeFilename+0x1b6>
			if (*nameIn == '_') {
     170:	|  |  /--|----------> movea.l 28(sp),a0
     174:	|  |  |  |            move.b (a0),d0
     176:	|  |  |  |            cmpi.b #95,d0
     17a:	|  |  |  |  /-------- bne.w 2b4 <decodeFilename+0x19c>
				nameIn++;
     17e:	|  |  |  |  |         addq.l #1,28(sp)
				switch (*nameIn) {
     182:	|  |  |  |  |         movea.l 28(sp),a0
     186:	|  |  |  |  |         move.b (a0),d0
     188:	|  |  |  |  |         ext.w d0
     18a:	|  |  |  |  |         movea.w d0,a0
     18c:	|  |  |  |  |         moveq #-65,d0
     18e:	|  |  |  |  |         add.l a0,d0
     190:	|  |  |  |  |         moveq #20,d1
     192:	|  |  |  |  |         cmp.l d0,d1
     194:	|  |  |  |  |  /----- bcs.w 2a4 <decodeFilename+0x18c>
     198:	|  |  |  |  |  |      add.l d0,d0
     19a:	|  |  |  |  |  |      movea.l d0,a0
     19c:	|  |  |  |  |  |      adda.l #424,a0
     1a2:	|  |  |  |  |  |      move.w (a0),d0
     1a4:	|  |  |  |  |  |      jmp (1a8 <decodeFilename+0x90>,pc,d0.w)
     1a8:	|  |  |  |  |  |      .short 0x00d4
     1aa:	|  |  |  |  |  |      ori.l #12583164,(a0)+
     1b0:	|  |  |  |  |  |      .short 0x00fc
     1b2:	|  |  |  |  |  |      ori.l #4194556,252(a4)
     1ba:	|  |  |  |  |  |      .short 0x00fc
     1bc:	|  |  |  |  |  |      .short 0x00fc
     1be:	|  |  |  |  |  |      ori.b #-4,252(a2)
     1c4:	|  |  |  |  |  |      .short 0x00fc
     1c6:	|  |  |  |  |  |      ori.w #232,(a6)
     1ca:	|  |  |  |  |  |      .short 0x00fc
     1cc:	|  |  |  |  |  |      ori.l #16515180,d2
					case 'L':	newName[i] = '<';	nameIn++;	break;
     1d2:	|  |  |  |  |  |      move.l 20(sp),d0
     1d6:	|  |  |  |  |  |      movea.l 4(sp),a0
     1da:	|  |  |  |  |  |      adda.l d0,a0
     1dc:	|  |  |  |  |  |      move.b #60,(a0)
     1e0:	|  |  |  |  |  |      addq.l #1,28(sp)
     1e4:	|  |  |  |  |  |  /-- bra.w 2ca <decodeFilename+0x1b2>
					case 'G':	newName[i] = '>';	nameIn++;	break;
     1e8:	|  |  |  |  |  |  |   move.l 20(sp),d0
     1ec:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     1f0:	|  |  |  |  |  |  |   adda.l d0,a0
     1f2:	|  |  |  |  |  |  |   move.b #62,(a0)
     1f6:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     1fa:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'P':	newName[i] = '|';	nameIn++;	break;
     1fe:	|  |  |  |  |  |  |   move.l 20(sp),d0
     202:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     206:	|  |  |  |  |  |  |   adda.l d0,a0
     208:	|  |  |  |  |  |  |   move.b #124,(a0)
     20c:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     210:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'U':	newName[i] = '_';	nameIn++;	break;
     214:	|  |  |  |  |  |  |   move.l 20(sp),d0
     218:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     21c:	|  |  |  |  |  |  |   adda.l d0,a0
     21e:	|  |  |  |  |  |  |   move.b #95,(a0)
     222:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     226:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'S':	newName[i] = '\"';	nameIn++;	break;
     22a:	|  |  |  |  |  |  |   move.l 20(sp),d0
     22e:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     232:	|  |  |  |  |  |  |   adda.l d0,a0
     234:	|  |  |  |  |  |  |   move.b #34,(a0)
     238:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     23c:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'B':	newName[i] = '\\';	nameIn++;	break;
     240:	|  |  |  |  |  |  |   move.l 20(sp),d0
     244:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     248:	|  |  |  |  |  |  |   adda.l d0,a0
     24a:	|  |  |  |  |  |  |   move.b #92,(a0)
     24e:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     252:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'F':	newName[i] = '/';	nameIn++;	break;
     254:	|  |  |  |  |  |  |   move.l 20(sp),d0
     258:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     25c:	|  |  |  |  |  |  |   adda.l d0,a0
     25e:	|  |  |  |  |  |  |   move.b #47,(a0)
     262:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     266:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'C':	newName[i] = ':';	nameIn++;	break;
     268:	|  |  |  |  |  |  |   move.l 20(sp),d0
     26c:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     270:	|  |  |  |  |  |  |   adda.l d0,a0
     272:	|  |  |  |  |  |  |   move.b #58,(a0)
     276:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     27a:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'A':	newName[i] = '*';	nameIn++;	break;
     27c:	|  |  |  |  |  |  |   move.l 20(sp),d0
     280:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     284:	|  |  |  |  |  |  |   adda.l d0,a0
     286:	|  |  |  |  |  |  |   move.b #42,(a0)
     28a:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     28e:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'Q':	newName[i] = '?';	nameIn++;	break;
     290:	|  |  |  |  |  |  |   move.l 20(sp),d0
     294:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     298:	|  |  |  |  |  |  |   adda.l d0,a0
     29a:	|  |  |  |  |  |  |   move.b #63,(a0)
     29e:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     2a2:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					default:	newName[i] = '_';
     2a4:	|  |  |  |  |  \--|-> move.l 20(sp),d0
     2a8:	|  |  |  |  |     |   movea.l 4(sp),a0
     2ac:	|  |  |  |  |     |   adda.l d0,a0
     2ae:	|  |  |  |  |     |   move.b #95,(a0)
     2b2:	|  |  |  |  |     +-- bra.s 2ca <decodeFilename+0x1b2>
				}
			} else {
				newName[i] = *nameIn;
     2b4:	|  |  |  |  \-----|-> move.l 20(sp),d0
     2b8:	|  |  |  |        |   movea.l 4(sp),a0
     2bc:	|  |  |  |        |   adda.l d0,a0
     2be:	|  |  |  |        |   movea.l 28(sp),a1
     2c2:	|  |  |  |        |   move.b (a1),d0
     2c4:	|  |  |  |        |   move.b d0,(a0)
				nameIn++;
     2c6:	|  |  |  |        |   addq.l #1,28(sp)
			}
			i++;
     2ca:	|  |  |  |        \-> addq.l #1,20(sp)
		while (*nameIn) {
     2ce:	|  |  |  \----------> movea.l 28(sp),a0
     2d2:	|  |  |               move.b (a0),d0
     2d4:	|  |  \-------------- bne.w 170 <decodeFilename+0x58>
		}
		newName[i] = 0;
     2d8:	|  |                  move.l 20(sp),d0
     2dc:	|  |                  movea.l 4(sp),a0
     2e0:	|  |                  adda.l d0,a0
     2e2:	|  |                  clr.b (a0)
		return newName;
     2e4:	|  |                  move.l 4(sp),d0
     2e8:	|  +----------------- bra.s 2f6 <decodeFilename+0x1de>
	} else {
		return copyString(nameIn);
     2ea:	\--|----------------> move.l 28(sp),-(sp)
     2ee:	   |                  jsr b8 <copyString>
     2f4:	   |                  addq.l #4,sp
	}
}
     2f6:	   \----------------> movea.l (sp)+,a6
     2f8:	                      lea 20(sp),sp
     2fc:	                      rts

000002fe <encodeFilename>:

char * encodeFilename (char * nameIn) {
     2fe:	                      lea -24(sp),sp
     302:	                      move.l a6,-(sp)
	if (! nameIn) return NULL;
     304:	                      tst.l 32(sp)
     308:	                  /-- bne.s 310 <encodeFilename+0x12>
     30a:	                  |   moveq #0,d0
     30c:	/-----------------|-- bra.w 688 <encodeFilename+0x38a>
	if (allowAnyFilename) {
     310:	|                 \-> move.w 1c2de <allowAnyFilename>,d0
     316:	|  /----------------- beq.w 644 <encodeFilename+0x346>
		char * newName = AllocVec( strlen(nameIn)*2+1,MEMF_ANY);
     31a:	|  |                  move.l 32(sp),-(sp)
     31e:	|  |                  jsr 13df2 <strlen>
     324:	|  |                  addq.l #4,sp
     326:	|  |                  add.l d0,d0
     328:	|  |                  move.l d0,d1
     32a:	|  |                  addq.l #1,d1
     32c:	|  |                  move.l d1,16(sp)
     330:	|  |                  clr.l 12(sp)
     334:	|  |                  move.l 1ca82 <SysBase>,d0
     33a:	|  |                  movea.l d0,a6
     33c:	|  |                  move.l 16(sp),d0
     340:	|  |                  move.l 12(sp),d1
     344:	|  |                  jsr -684(a6)
     348:	|  |                  move.l d0,8(sp)
     34c:	|  |                  move.l 8(sp),d0
     350:	|  |                  move.l d0,4(sp)
		if(newName == 0) {
     354:	|  |              /-- bne.s 36a <encodeFilename+0x6c>
			KPrintF( "encodefilename: Could not allocate Memory");
     356:	|  |              |   pea 17e34 <PutChar+0x4>
     35c:	|  |              |   jsr 17366 <KPrintF>
     362:	|  |              |   addq.l #4,sp
			return NULL;
     364:	|  |              |   moveq #0,d0
     366:	+--|--------------|-- bra.w 688 <encodeFilename+0x38a>
		}

		int i = 0;
     36a:	|  |              \-> clr.l 24(sp)
		while (*nameIn) {
     36e:	|  |     /----------- bra.w 634 <encodeFilename+0x336>
			switch (*nameIn) {
     372:	|  |  /--|----------> movea.l 32(sp),a0
     376:	|  |  |  |            move.b (a0),d0
     378:	|  |  |  |            ext.w d0
     37a:	|  |  |  |            movea.w d0,a0
     37c:	|  |  |  |            moveq #95,d0
     37e:	|  |  |  |            cmp.l a0,d0
     380:	|  |  |  |        /-- blt.w 424 <encodeFilename+0x126>
     384:	|  |  |  |        |   moveq #34,d1
     386:	|  |  |  |        |   cmp.l a0,d1
     388:	|  |  |  |  /-----|-- bgt.w 608 <encodeFilename+0x30a>
     38c:	|  |  |  |  |     |   moveq #-34,d0
     38e:	|  |  |  |  |     |   add.l a0,d0
     390:	|  |  |  |  |     |   moveq #61,d1
     392:	|  |  |  |  |     |   cmp.l d0,d1
     394:	|  |  |  |  +-----|-- bcs.w 608 <encodeFilename+0x30a>
     398:	|  |  |  |  |     |   add.l d0,d0
     39a:	|  |  |  |  |     |   movea.l d0,a0
     39c:	|  |  |  |  |     |   adda.l #936,a0
     3a2:	|  |  |  |  |     |   move.w (a0),d0
     3a4:	|  |  |  |  |     |   jmp (3a8 <encodeFilename+0xaa>,pc,d0.w)
     3a8:	|  |  |  |  |     |   bchg d0,d6
     3aa:	|  |  |  |  |     |   andi.w #608,-(a0)
     3ae:	|  |  |  |  |     |   andi.w #608,-(a0)
     3b2:	|  |  |  |  |     |   andi.w #608,-(a0)
     3b6:	|  |  |  |  |     |   andi.w #516,-(a0)
     3ba:	|  |  |  |  |     |   andi.w #608,-(a0)
     3be:	|  |  |  |  |     |   andi.w #608,-(a0)
     3c2:	|  |  |  |  |     |   bclr d0,-(a6)
     3c4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3c8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3cc:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d0:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d8:	|  |  |  |  |     |   bset d0,(a6)
     3da:	|  |  |  |  |     |   andi.w #134,-(a0)
     3de:	|  |  |  |  |     |   andi.w #182,-(a0)
     3e2:	|  |  |  |  |     |   andi.b #96,(96,a2,d0.w:2)
     3e8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3ec:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f0:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3fc:	|  |  |  |  |     |   andi.w #608,-(a0)
     400:	|  |  |  |  |     |   andi.w #608,-(a0)
     404:	|  |  |  |  |     |   andi.w #608,-(a0)
     408:	|  |  |  |  |     |   andi.w #608,-(a0)
     40c:	|  |  |  |  |     |   andi.w #608,-(a0)
     410:	|  |  |  |  |     |   andi.w #608,-(a0)
     414:	|  |  |  |  |     |   andi.w #608,-(a0)
     418:	|  |  |  |  |     |   andi.w #608,-(a0)
     41c:	|  |  |  |  |     |   bchg d0,(96,a6,d0.w:2)
     420:	|  |  |  |  |     |   andi.w #278,-(a0)
     424:	|  |  |  |  |     \-> moveq #124,d0
     426:	|  |  |  |  |         cmp.l a0,d0
     428:	|  |  |  |  |     /-- beq.s 48e <encodeFilename+0x190>
     42a:	|  |  |  |  +-----|-- bra.w 608 <encodeFilename+0x30a>
				case '<':	newName[i++] = '_';		newName[i++] = 'L';		break;
     42e:	|  |  |  |  |     |   move.l 24(sp),d0
     432:	|  |  |  |  |     |   move.l d0,d1
     434:	|  |  |  |  |     |   addq.l #1,d1
     436:	|  |  |  |  |     |   move.l d1,24(sp)
     43a:	|  |  |  |  |     |   movea.l 4(sp),a0
     43e:	|  |  |  |  |     |   adda.l d0,a0
     440:	|  |  |  |  |     |   move.b #95,(a0)
     444:	|  |  |  |  |     |   move.l 24(sp),d0
     448:	|  |  |  |  |     |   move.l d0,d1
     44a:	|  |  |  |  |     |   addq.l #1,d1
     44c:	|  |  |  |  |     |   move.l d1,24(sp)
     450:	|  |  |  |  |     |   movea.l 4(sp),a0
     454:	|  |  |  |  |     |   adda.l d0,a0
     456:	|  |  |  |  |     |   move.b #76,(a0)
     45a:	|  |  |  |  |  /--|-- bra.w 624 <encodeFilename+0x326>
				case '>':	newName[i++] = '_';		newName[i++] = 'G';		break;
     45e:	|  |  |  |  |  |  |   move.l 24(sp),d0
     462:	|  |  |  |  |  |  |   move.l d0,d1
     464:	|  |  |  |  |  |  |   addq.l #1,d1
     466:	|  |  |  |  |  |  |   move.l d1,24(sp)
     46a:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     46e:	|  |  |  |  |  |  |   adda.l d0,a0
     470:	|  |  |  |  |  |  |   move.b #95,(a0)
     474:	|  |  |  |  |  |  |   move.l 24(sp),d0
     478:	|  |  |  |  |  |  |   move.l d0,d1
     47a:	|  |  |  |  |  |  |   addq.l #1,d1
     47c:	|  |  |  |  |  |  |   move.l d1,24(sp)
     480:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     484:	|  |  |  |  |  |  |   adda.l d0,a0
     486:	|  |  |  |  |  |  |   move.b #71,(a0)
     48a:	|  |  |  |  |  +--|-- bra.w 624 <encodeFilename+0x326>
				case '|':	newName[i++] = '_';		newName[i++] = 'P';		break;
     48e:	|  |  |  |  |  |  \-> move.l 24(sp),d0
     492:	|  |  |  |  |  |      move.l d0,d1
     494:	|  |  |  |  |  |      addq.l #1,d1
     496:	|  |  |  |  |  |      move.l d1,24(sp)
     49a:	|  |  |  |  |  |      movea.l 4(sp),a0
     49e:	|  |  |  |  |  |      adda.l d0,a0
     4a0:	|  |  |  |  |  |      move.b #95,(a0)
     4a4:	|  |  |  |  |  |      move.l 24(sp),d0
     4a8:	|  |  |  |  |  |      move.l d0,d1
     4aa:	|  |  |  |  |  |      addq.l #1,d1
     4ac:	|  |  |  |  |  |      move.l d1,24(sp)
     4b0:	|  |  |  |  |  |      movea.l 4(sp),a0
     4b4:	|  |  |  |  |  |      adda.l d0,a0
     4b6:	|  |  |  |  |  |      move.b #80,(a0)
     4ba:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '_':	newName[i++] = '_';		newName[i++] = 'U';		break;
     4be:	|  |  |  |  |  |      move.l 24(sp),d0
     4c2:	|  |  |  |  |  |      move.l d0,d1
     4c4:	|  |  |  |  |  |      addq.l #1,d1
     4c6:	|  |  |  |  |  |      move.l d1,24(sp)
     4ca:	|  |  |  |  |  |      movea.l 4(sp),a0
     4ce:	|  |  |  |  |  |      adda.l d0,a0
     4d0:	|  |  |  |  |  |      move.b #95,(a0)
     4d4:	|  |  |  |  |  |      move.l 24(sp),d0
     4d8:	|  |  |  |  |  |      move.l d0,d1
     4da:	|  |  |  |  |  |      addq.l #1,d1
     4dc:	|  |  |  |  |  |      move.l d1,24(sp)
     4e0:	|  |  |  |  |  |      movea.l 4(sp),a0
     4e4:	|  |  |  |  |  |      adda.l d0,a0
     4e6:	|  |  |  |  |  |      move.b #85,(a0)
     4ea:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '\"':	newName[i++] = '_';		newName[i++] = 'S';		break;
     4ee:	|  |  |  |  |  |      move.l 24(sp),d0
     4f2:	|  |  |  |  |  |      move.l d0,d1
     4f4:	|  |  |  |  |  |      addq.l #1,d1
     4f6:	|  |  |  |  |  |      move.l d1,24(sp)
     4fa:	|  |  |  |  |  |      movea.l 4(sp),a0
     4fe:	|  |  |  |  |  |      adda.l d0,a0
     500:	|  |  |  |  |  |      move.b #95,(a0)
     504:	|  |  |  |  |  |      move.l 24(sp),d0
     508:	|  |  |  |  |  |      move.l d0,d1
     50a:	|  |  |  |  |  |      addq.l #1,d1
     50c:	|  |  |  |  |  |      move.l d1,24(sp)
     510:	|  |  |  |  |  |      movea.l 4(sp),a0
     514:	|  |  |  |  |  |      adda.l d0,a0
     516:	|  |  |  |  |  |      move.b #83,(a0)
     51a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '\\':	newName[i++] = '_';		newName[i++] = 'B';		break;
     51e:	|  |  |  |  |  |      move.l 24(sp),d0
     522:	|  |  |  |  |  |      move.l d0,d1
     524:	|  |  |  |  |  |      addq.l #1,d1
     526:	|  |  |  |  |  |      move.l d1,24(sp)
     52a:	|  |  |  |  |  |      movea.l 4(sp),a0
     52e:	|  |  |  |  |  |      adda.l d0,a0
     530:	|  |  |  |  |  |      move.b #95,(a0)
     534:	|  |  |  |  |  |      move.l 24(sp),d0
     538:	|  |  |  |  |  |      move.l d0,d1
     53a:	|  |  |  |  |  |      addq.l #1,d1
     53c:	|  |  |  |  |  |      move.l d1,24(sp)
     540:	|  |  |  |  |  |      movea.l 4(sp),a0
     544:	|  |  |  |  |  |      adda.l d0,a0
     546:	|  |  |  |  |  |      move.b #66,(a0)
     54a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '/':	newName[i++] = '_';		newName[i++] = 'F';		break;
     54e:	|  |  |  |  |  |      move.l 24(sp),d0
     552:	|  |  |  |  |  |      move.l d0,d1
     554:	|  |  |  |  |  |      addq.l #1,d1
     556:	|  |  |  |  |  |      move.l d1,24(sp)
     55a:	|  |  |  |  |  |      movea.l 4(sp),a0
     55e:	|  |  |  |  |  |      adda.l d0,a0
     560:	|  |  |  |  |  |      move.b #95,(a0)
     564:	|  |  |  |  |  |      move.l 24(sp),d0
     568:	|  |  |  |  |  |      move.l d0,d1
     56a:	|  |  |  |  |  |      addq.l #1,d1
     56c:	|  |  |  |  |  |      move.l d1,24(sp)
     570:	|  |  |  |  |  |      movea.l 4(sp),a0
     574:	|  |  |  |  |  |      adda.l d0,a0
     576:	|  |  |  |  |  |      move.b #70,(a0)
     57a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case ':':	newName[i++] = '_';		newName[i++] = 'C';		break;
     57e:	|  |  |  |  |  |      move.l 24(sp),d0
     582:	|  |  |  |  |  |      move.l d0,d1
     584:	|  |  |  |  |  |      addq.l #1,d1
     586:	|  |  |  |  |  |      move.l d1,24(sp)
     58a:	|  |  |  |  |  |      movea.l 4(sp),a0
     58e:	|  |  |  |  |  |      adda.l d0,a0
     590:	|  |  |  |  |  |      move.b #95,(a0)
     594:	|  |  |  |  |  |      move.l 24(sp),d0
     598:	|  |  |  |  |  |      move.l d0,d1
     59a:	|  |  |  |  |  |      addq.l #1,d1
     59c:	|  |  |  |  |  |      move.l d1,24(sp)
     5a0:	|  |  |  |  |  |      movea.l 4(sp),a0
     5a4:	|  |  |  |  |  |      adda.l d0,a0
     5a6:	|  |  |  |  |  |      move.b #67,(a0)
     5aa:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>
				case '*':	newName[i++] = '_';		newName[i++] = 'A';		break;
     5ac:	|  |  |  |  |  |      move.l 24(sp),d0
     5b0:	|  |  |  |  |  |      move.l d0,d1
     5b2:	|  |  |  |  |  |      addq.l #1,d1
     5b4:	|  |  |  |  |  |      move.l d1,24(sp)
     5b8:	|  |  |  |  |  |      movea.l 4(sp),a0
     5bc:	|  |  |  |  |  |      adda.l d0,a0
     5be:	|  |  |  |  |  |      move.b #95,(a0)
     5c2:	|  |  |  |  |  |      move.l 24(sp),d0
     5c6:	|  |  |  |  |  |      move.l d0,d1
     5c8:	|  |  |  |  |  |      addq.l #1,d1
     5ca:	|  |  |  |  |  |      move.l d1,24(sp)
     5ce:	|  |  |  |  |  |      movea.l 4(sp),a0
     5d2:	|  |  |  |  |  |      adda.l d0,a0
     5d4:	|  |  |  |  |  |      move.b #65,(a0)
     5d8:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>
				case '?':	newName[i++] = '_';		newName[i++] = 'Q';		break;
     5da:	|  |  |  |  |  |      move.l 24(sp),d0
     5de:	|  |  |  |  |  |      move.l d0,d1
     5e0:	|  |  |  |  |  |      addq.l #1,d1
     5e2:	|  |  |  |  |  |      move.l d1,24(sp)
     5e6:	|  |  |  |  |  |      movea.l 4(sp),a0
     5ea:	|  |  |  |  |  |      adda.l d0,a0
     5ec:	|  |  |  |  |  |      move.b #95,(a0)
     5f0:	|  |  |  |  |  |      move.l 24(sp),d0
     5f4:	|  |  |  |  |  |      move.l d0,d1
     5f6:	|  |  |  |  |  |      addq.l #1,d1
     5f8:	|  |  |  |  |  |      move.l d1,24(sp)
     5fc:	|  |  |  |  |  |      movea.l 4(sp),a0
     600:	|  |  |  |  |  |      adda.l d0,a0
     602:	|  |  |  |  |  |      move.b #81,(a0)
     606:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>

				default:	newName[i++] = *nameIn;							break;
     608:	|  |  |  |  \--|----> move.l 24(sp),d0
     60c:	|  |  |  |     |      move.l d0,d1
     60e:	|  |  |  |     |      addq.l #1,d1
     610:	|  |  |  |     |      move.l d1,24(sp)
     614:	|  |  |  |     |      movea.l 4(sp),a0
     618:	|  |  |  |     |      adda.l d0,a0
     61a:	|  |  |  |     |      movea.l 32(sp),a1
     61e:	|  |  |  |     |      move.b (a1),d0
     620:	|  |  |  |     |      move.b d0,(a0)
     622:	|  |  |  |     |      nop
			}
			newName[i] = 0;
     624:	|  |  |  |     \----> move.l 24(sp),d0
     628:	|  |  |  |            movea.l 4(sp),a0
     62c:	|  |  |  |            adda.l d0,a0
     62e:	|  |  |  |            clr.b (a0)
			nameIn ++;
     630:	|  |  |  |            addq.l #1,32(sp)
		while (*nameIn) {
     634:	|  |  |  \----------> movea.l 32(sp),a0
     638:	|  |  |               move.b (a0),d0
     63a:	|  |  \-------------- bne.w 372 <encodeFilename+0x74>
		}
		return newName;
     63e:	|  |                  move.l 4(sp),d0
     642:	+--|----------------- bra.s 688 <encodeFilename+0x38a>
	} else {
		int a;
		for (a = 0; nameIn[a]; a ++) {
     644:	|  \----------------> clr.l 20(sp)
     648:	|              /----- bra.s 66e <encodeFilename+0x370>
			if (nameIn[a] == '\\') nameIn[a] ='/';
     64a:	|           /--|----> move.l 20(sp),d0
     64e:	|           |  |      movea.l 32(sp),a0
     652:	|           |  |      adda.l d0,a0
     654:	|           |  |      move.b (a0),d0
     656:	|           |  |      cmpi.b #92,d0
     65a:	|           |  |  /-- bne.s 66a <encodeFilename+0x36c>
     65c:	|           |  |  |   move.l 20(sp),d0
     660:	|           |  |  |   movea.l 32(sp),a0
     664:	|           |  |  |   adda.l d0,a0
     666:	|           |  |  |   move.b #47,(a0)
		for (a = 0; nameIn[a]; a ++) {
     66a:	|           |  |  \-> addq.l #1,20(sp)
     66e:	|           |  \----> move.l 20(sp),d0
     672:	|           |         movea.l 32(sp),a0
     676:	|           |         adda.l d0,a0
     678:	|           |         move.b (a0),d0
     67a:	|           \-------- bne.s 64a <encodeFilename+0x34c>
		}

		return copyString (nameIn);
     67c:	|                     move.l 32(sp),-(sp)
     680:	|                     jsr b8 <copyString>
     686:	|                     addq.l #4,sp
	}
}
     688:	\-------------------> movea.l (sp)+,a6
     68a:	                      lea 24(sp),sp
     68e:	                      rts

00000690 <FLOATSwap>:

FLOAT FLOATSwap( FLOAT f )
{
     690:	subq.l #8,sp
	{
		FLOAT f;
		unsigned char b[4];
	} dat1, dat2;

	dat1.f = f;
     692:	move.l 12(sp),4(sp)
	dat2.b[0] = dat1.b[3];
     698:	move.b 7(sp),d0
     69c:	move.b d0,(sp)
	dat2.b[1] = dat1.b[2];
     69e:	move.b 6(sp),d0
     6a2:	move.b d0,1(sp)
	dat2.b[2] = dat1.b[1];
     6a6:	move.b 5(sp),d0
     6aa:	move.b d0,2(sp)
	dat2.b[3] = dat1.b[0];
     6ae:	move.b 4(sp),d0
     6b2:	move.b d0,3(sp)
	return dat2.f;
     6b6:	move.l (sp),d0
}
     6b8:	addq.l #8,sp
     6ba:	rts

000006bc <get2bytes>:

int get2bytes (BPTR fp) {
     6bc:	lea -24(sp),sp
     6c0:	move.l a6,-(sp)
	int f1, f2;

	f1 = FGetC (fp);
     6c2:	move.l 32(sp),24(sp)
     6c8:	move.l 1ca8a <DOSBase>,d0
     6ce:	movea.l d0,a6
     6d0:	move.l 24(sp),d1
     6d4:	jsr -306(a6)
     6d8:	move.l d0,20(sp)
     6dc:	move.l 20(sp),d0
     6e0:	move.l d0,16(sp)
	f2 = FGetC (fp);
     6e4:	move.l 32(sp),12(sp)
     6ea:	move.l 1ca8a <DOSBase>,d0
     6f0:	movea.l d0,a6
     6f2:	move.l 12(sp),d1
     6f6:	jsr -306(a6)
     6fa:	move.l d0,8(sp)
     6fe:	move.l 8(sp),d0
     702:	move.l d0,4(sp)

	return (f1 * 256 + f2);
     706:	move.l 16(sp),d0
     70a:	lsl.l #8,d0
     70c:	add.l 4(sp),d0
}
     710:	movea.l (sp)+,a6
     712:	lea 24(sp),sp
     716:	rts

00000718 <get4bytes>:

ULONG get4bytes (BPTR fp) {
     718:	lea -52(sp),sp
     71c:	move.l a6,-(sp)
	int f1, f2, f3, f4;

	f1 = FGetC (fp);
     71e:	move.l 60(sp),52(sp)
     724:	move.l 1ca8a <DOSBase>,d0
     72a:	movea.l d0,a6
     72c:	move.l 52(sp),d1
     730:	jsr -306(a6)
     734:	move.l d0,48(sp)
     738:	move.l 48(sp),d0
     73c:	move.l d0,44(sp)
	f2 = FGetC (fp);
     740:	move.l 60(sp),40(sp)
     746:	move.l 1ca8a <DOSBase>,d0
     74c:	movea.l d0,a6
     74e:	move.l 40(sp),d1
     752:	jsr -306(a6)
     756:	move.l d0,36(sp)
     75a:	move.l 36(sp),d0
     75e:	move.l d0,32(sp)
	f3 = FGetC (fp);
     762:	move.l 60(sp),28(sp)
     768:	move.l 1ca8a <DOSBase>,d0
     76e:	movea.l d0,a6
     770:	move.l 28(sp),d1
     774:	jsr -306(a6)
     778:	move.l d0,24(sp)
     77c:	move.l 24(sp),d0
     780:	move.l d0,20(sp)
	f4 = FGetC (fp);
     784:	move.l 60(sp),16(sp)
     78a:	move.l 1ca8a <DOSBase>,d0
     790:	movea.l d0,a6
     792:	move.l 16(sp),d1
     796:	jsr -306(a6)
     79a:	move.l d0,12(sp)
     79e:	move.l 12(sp),d0
     7a2:	move.l d0,8(sp)

	ULONG x = f1 + f2*256 + f3*256*256 + f4*256*256*256;
     7a6:	move.l 32(sp),d0
     7aa:	lsl.l #8,d0
     7ac:	move.l d0,d1
     7ae:	add.l 44(sp),d1
     7b2:	move.l 20(sp),d0
     7b6:	swap d0
     7b8:	clr.w d0
     7ba:	add.l d0,d1
     7bc:	move.l 8(sp),d0
     7c0:	lsl.w #8,d0
     7c2:	swap d0
     7c4:	clr.w d0
     7c6:	add.l d1,d0
     7c8:	move.l d0,4(sp)

	return x;
     7cc:	move.l 4(sp),d0
}
     7d0:	movea.l (sp)+,a6
     7d2:	lea 52(sp),sp
     7d6:	rts

000007d8 <getFloat>:

FLOAT getFloat (BPTR fp) {
     7d8:	    lea -28(sp),sp
     7dc:	    movem.l d2-d4/a6,-(sp)
	FLOAT f;
	LONG blocks_read = FRead( fp, &f, sizeof (FLOAT), 1 ); 
     7e0:	    move.l 48(sp),40(sp)
     7e6:	    lea 44(sp),a0
     7ea:	    lea -28(a0),a0
     7ee:	    move.l a0,36(sp)
     7f2:	    moveq #4,d0
     7f4:	    move.l d0,32(sp)
     7f8:	    moveq #1,d0
     7fa:	    move.l d0,28(sp)
     7fe:	    move.l 1ca8a <DOSBase>,d0
     804:	    movea.l d0,a6
     806:	    move.l 40(sp),d1
     80a:	    move.l 36(sp),d2
     80e:	    move.l 32(sp),d3
     812:	    move.l 28(sp),d4
     816:	    jsr -324(a6)
     81a:	    move.l d0,24(sp)
     81e:	    move.l 24(sp),d0
     822:	    move.l d0,20(sp)
	if (blocks_read != 1) {
     826:	    moveq #1,d0
     828:	    cmp.l 20(sp),d0
     82c:	/-- beq.s 83c <getFloat+0x64>
		KPrintF("Reading error in getFloat.\n");
     82e:	|   pea 17e5e <PutChar+0x2e>
     834:	|   jsr 17366 <KPrintF>
     83a:	|   addq.l #4,sp
	}
	return FLOATSwap(f);
     83c:	\-> move.l 16(sp),d0
     840:	    move.l d0,-(sp)
     842:	    jsr 690 <FLOATSwap>
     848:	    addq.l #4,sp
	return f;
}
     84a:	    movem.l (sp)+,d2-d4/a6
     84e:	    lea 28(sp),sp
     852:	    rts

00000854 <getSigned>:

short getSigned (BPTR fp) {
     854:	    lea -24(sp),sp
     858:	    movem.l d2-d3/a6,-(sp)
	short f;
	LONG bytes_read = Read(fp, &f, sizeof(short));
     85c:	    move.l 40(sp),32(sp)
     862:	    lea 36(sp),a0
     866:	    lea -22(a0),a0
     86a:	    move.l a0,28(sp)
     86e:	    moveq #2,d0
     870:	    move.l d0,24(sp)
     874:	    move.l 1ca8a <DOSBase>,d0
     87a:	    movea.l d0,a6
     87c:	    move.l 32(sp),d1
     880:	    move.l 28(sp),d2
     884:	    move.l 24(sp),d3
     888:	    jsr -42(a6)
     88c:	    move.l d0,20(sp)
     890:	    move.l 20(sp),d0
     894:	    move.l d0,16(sp)
	if (bytes_read != sizeof (short)) {
     898:	    moveq #2,d0
     89a:	    cmp.l 16(sp),d0
     89e:	/-- beq.s 8ae <getSigned+0x5a>
		KPrintF("getSigned: Reading error in getSigned.\n");
     8a0:	|   pea 17e7a <PutChar+0x4a>
     8a6:	|   jsr 17366 <KPrintF>
     8ac:	|   addq.l #4,sp
	}
	f = shortSwap(f);
     8ae:	\-> move.w 14(sp),d0
     8b2:	    movea.w d0,a0
     8b4:	    move.l a0,-(sp)
     8b6:	    jsr baa <shortSwap>
     8bc:	    addq.l #4,sp
     8be:	    move.w d0,14(sp)
	return f;
     8c2:	    move.w 14(sp),d0
}
     8c6:	    movem.l (sp)+,d2-d3/a6
     8ca:	    lea 24(sp),sp
     8ce:	    rts

000008d0 <put2bytes>:

void put2bytes (int numtoput, BPTR fp) {
     8d0:	    lea -24(sp),sp
     8d4:	    move.l a6,-(sp)
     8d6:	    move.l d2,-(sp)
	FPutC( fp, (char) (numtoput / 256));
     8d8:	    move.l 40(sp),28(sp)
     8de:	    move.l 36(sp),d0
     8e2:	/-- bpl.s 8ea <put2bytes+0x1a>
     8e4:	|   addi.l #255,d0
     8ea:	\-> asr.l #8,d0
     8ec:	    move.l d0,d0
     8ee:	    ext.w d0
     8f0:	    movea.w d0,a0
     8f2:	    move.l a0,24(sp)
     8f6:	    move.l 1ca8a <DOSBase>,d0
     8fc:	    movea.l d0,a6
     8fe:	    move.l 28(sp),d1
     902:	    move.l 24(sp),d2
     906:	    jsr -312(a6)
     90a:	    move.l d0,20(sp)
	FPutC( fp, (char) (numtoput % 256));
     90e:	    move.l 40(sp),16(sp)
     914:	    move.l 36(sp),d0
     918:	    andi.l #-2147483393,d0
     91e:	/-- bpl.s 92a <put2bytes+0x5a>
     920:	|   subq.l #1,d0
     922:	|   moveq #-1,d1
     924:	|   not.b d1
     926:	|   or.l d1,d0
     928:	|   addq.l #1,d0
     92a:	\-> move.l d0,d0
     92c:	    ext.w d0
     92e:	    movea.w d0,a0
     930:	    move.l a0,12(sp)
     934:	    move.l 1ca8a <DOSBase>,d0
     93a:	    movea.l d0,a6
     93c:	    move.l 16(sp),d1
     940:	    move.l 12(sp),d2
     944:	    jsr -312(a6)
     948:	    move.l d0,8(sp)
}
     94c:	    nop
     94e:	    move.l (sp)+,d2
     950:	    movea.l (sp)+,a6
     952:	    lea 24(sp),sp
     956:	    rts

00000958 <put4bytes>:

void put4bytes (ULONG i, BPTR fp) {
     958:	lea -52(sp),sp
     95c:	move.l a6,-(sp)
     95e:	move.l d2,-(sp)
	//	fwrite (&i, sizeof (long int), 1, fp);
	unsigned char f1, f2, f3, f4;

	f4 = i / (256*256*256);
     960:	move.l 64(sp),d0
     964:	clr.w d0
     966:	swap d0
     968:	lsr.w #8,d0
     96a:	move.b d0,59(sp)
	i = i % (256*256*256);
     96e:	andi.l #16777215,64(sp)
	f3 = i / (256*256);
     976:	move.l 64(sp),d0
     97a:	clr.w d0
     97c:	swap d0
     97e:	move.b d0,58(sp)
	i = i % (256*256);
     982:	andi.l #65535,64(sp)
	f2 = i / 256;
     98a:	move.l 64(sp),d0
     98e:	lsr.l #8,d0
     990:	move.b d0,57(sp)
	f1 = i % 256;
     994:	move.b 67(sp),56(sp)

	FPutC (fp,f1);
     99a:	move.l 68(sp),52(sp)
     9a0:	moveq #0,d0
     9a2:	move.b 56(sp),d0
     9a6:	move.l d0,48(sp)
     9aa:	move.l 1ca8a <DOSBase>,d0
     9b0:	movea.l d0,a6
     9b2:	move.l 52(sp),d1
     9b6:	move.l 48(sp),d2
     9ba:	jsr -312(a6)
     9be:	move.l d0,44(sp)
	FPutC (fp,f2);
     9c2:	move.l 68(sp),40(sp)
     9c8:	moveq #0,d0
     9ca:	move.b 57(sp),d0
     9ce:	move.l d0,36(sp)
     9d2:	move.l 1ca8a <DOSBase>,d0
     9d8:	movea.l d0,a6
     9da:	move.l 40(sp),d1
     9de:	move.l 36(sp),d2
     9e2:	jsr -312(a6)
     9e6:	move.l d0,32(sp)
	FPutC (fp,f3);
     9ea:	move.l 68(sp),28(sp)
     9f0:	moveq #0,d0
     9f2:	move.b 58(sp),d0
     9f6:	move.l d0,24(sp)
     9fa:	move.l 1ca8a <DOSBase>,d0
     a00:	movea.l d0,a6
     a02:	move.l 28(sp),d1
     a06:	move.l 24(sp),d2
     a0a:	jsr -312(a6)
     a0e:	move.l d0,20(sp)
	FPutC (fp,f4);
     a12:	move.l 68(sp),16(sp)
     a18:	moveq #0,d0
     a1a:	move.b 59(sp),d0
     a1e:	move.l d0,12(sp)
     a22:	move.l 1ca8a <DOSBase>,d0
     a28:	movea.l d0,a6
     a2a:	move.l 16(sp),d1
     a2e:	move.l 12(sp),d2
     a32:	jsr -312(a6)
     a36:	move.l d0,8(sp)
}
     a3a:	nop
     a3c:	move.l (sp)+,d2
     a3e:	movea.l (sp)+,a6
     a40:	lea 52(sp),sp
     a44:	rts

00000a46 <putFloat>:

void putFloat (FLOAT f, BPTR fp) {
     a46:	lea -16(sp),sp
     a4a:	movem.l d2-d3/a6,-(sp)
	f = FLOATSwap(f);
     a4e:	move.l 32(sp),d0
     a52:	move.l d0,-(sp)
     a54:	jsr 690 <FLOATSwap>
     a5a:	addq.l #4,sp
     a5c:	move.l d0,32(sp)
	Write( fp, &f, sizeof (FLOAT));
     a60:	move.l 36(sp),24(sp)
     a66:	moveq #32,d0
     a68:	add.l sp,d0
     a6a:	move.l d0,20(sp)
     a6e:	moveq #4,d0
     a70:	move.l d0,16(sp)
     a74:	move.l 1ca8a <DOSBase>,d0
     a7a:	movea.l d0,a6
     a7c:	move.l 24(sp),d1
     a80:	move.l 20(sp),d2
     a84:	move.l 16(sp),d3
     a88:	jsr -48(a6)
     a8c:	move.l d0,12(sp)
}
     a90:	nop
     a92:	movem.l (sp)+,d2-d3/a6
     a96:	lea 16(sp),sp
     a9a:	rts

00000a9c <putSigned>:

void putSigned (short f, BPTR fp) {
     a9c:	lea -20(sp),sp
     aa0:	movem.l d2-d3/a6,-(sp)
     aa4:	move.l 36(sp),d0
     aa8:	move.w d0,d0
     aaa:	move.w d0,14(sp)
	f = shortSwap(f);
     aae:	move.w 14(sp),d0
     ab2:	movea.w d0,a0
     ab4:	move.l a0,-(sp)
     ab6:	jsr baa <shortSwap>
     abc:	addq.l #4,sp
     abe:	move.w d0,14(sp)
	Write(fp, &f, sizeof(short));
     ac2:	move.l 40(sp),28(sp)
     ac8:	lea 32(sp),a0
     acc:	lea -18(a0),a0
     ad0:	move.l a0,24(sp)
     ad4:	moveq #2,d0
     ad6:	move.l d0,20(sp)
     ada:	move.l 1ca8a <DOSBase>,d0
     ae0:	movea.l d0,a6
     ae2:	move.l 28(sp),d1
     ae6:	move.l 24(sp),d2
     aea:	move.l 20(sp),d3
     aee:	jsr -48(a6)
     af2:	move.l d0,16(sp)
}
     af6:	nop
     af8:	movem.l (sp)+,d2-d3/a6
     afc:	lea 20(sp),sp
     b00:	rts

00000b02 <readString>:

char * readString (BPTR fp) {
     b02:	          lea -32(sp),sp
     b06:	          move.l a6,-(sp)

	int a, len = get2bytes (fp);
     b08:	          move.l 40(sp),-(sp)
     b0c:	          jsr 6bc <get2bytes>
     b12:	          addq.l #4,sp
     b14:	          move.l d0,28(sp)
	//debugOut ("MOREIO: readString - len %i\n", len);
	char * s = AllocVec(len+1,MEMF_ANY);
     b18:	          move.l 28(sp),d0
     b1c:	          addq.l #1,d0
     b1e:	          move.l d0,24(sp)
     b22:	          clr.l 20(sp)
     b26:	          move.l 1ca82 <SysBase>,d0
     b2c:	          movea.l d0,a6
     b2e:	          move.l 24(sp),d0
     b32:	          move.l 20(sp),d1
     b36:	          jsr -684(a6)
     b3a:	          move.l d0,16(sp)
     b3e:	          move.l 16(sp),d0
     b42:	          move.l d0,12(sp)
	if(s == 0) return NULL;
     b46:	      /-- bne.s b4c <readString+0x4a>
     b48:	      |   moveq #0,d0
     b4a:	/-----|-- bra.s ba2 <readString+0xa0>
	for (a = 0; a < len; a ++) {
     b4c:	|     \-> clr.l 32(sp)
     b50:	|     /-- bra.s b88 <readString+0x86>
		s[a] = (char) (FGetC (fp) - 1);
     b52:	|  /--|-> move.l 40(sp),8(sp)
     b58:	|  |  |   move.l 1ca8a <DOSBase>,d0
     b5e:	|  |  |   movea.l d0,a6
     b60:	|  |  |   move.l 8(sp),d1
     b64:	|  |  |   jsr -306(a6)
     b68:	|  |  |   move.l d0,4(sp)
     b6c:	|  |  |   move.l 4(sp),d0
     b70:	|  |  |   move.l d0,d0
     b72:	|  |  |   move.b d0,d1
     b74:	|  |  |   subq.b #1,d1
     b76:	|  |  |   move.l 32(sp),d0
     b7a:	|  |  |   movea.l 12(sp),a0
     b7e:	|  |  |   adda.l d0,a0
     b80:	|  |  |   move.b d1,d0
     b82:	|  |  |   move.b d0,(a0)
	for (a = 0; a < len; a ++) {
     b84:	|  |  |   addq.l #1,32(sp)
     b88:	|  |  \-> move.l 32(sp),d0
     b8c:	|  |      cmp.l 28(sp),d0
     b90:	|  \----- blt.s b52 <readString+0x50>
	}
	s[len] = 0;
     b92:	|         move.l 28(sp),d0
     b96:	|         movea.l 12(sp),a0
     b9a:	|         adda.l d0,a0
     b9c:	|         clr.b (a0)
	//debugOut ("MOREIO: readString: %s\n", s);
	return s;
     b9e:	|         move.l 12(sp),d0
}
     ba2:	\-------> movea.l (sp)+,a6
     ba4:	          lea 32(sp),sp
     ba8:	          rts

00000baa <shortSwap>:

short shortSwap( short s )
{
     baa:	subq.l #4,sp
     bac:	move.l 8(sp),d0
     bb0:	move.w d0,d0
     bb2:	move.w d0,(sp)
	unsigned char b1, b2;
	
	b1 = s & 255;
     bb4:	move.b 1(sp),3(sp)
	b2 = (s >> 8) & 255;
     bba:	move.w (sp),d0
     bbc:	asr.w #8,d0
     bbe:	move.b d0,2(sp)
	
	return (b1 << 8) + b2;
     bc2:	clr.w d0
     bc4:	move.b 3(sp),d0
     bc8:	move.w d0,d1
     bca:	lsl.w #8,d1
     bcc:	clr.w d0
     bce:	move.b 2(sp),d0
     bd2:	add.w d1,d0
}
     bd4:	addq.l #4,sp
     bd6:	rts

00000bd8 <writeString>:

void writeString (char * s, BPTR fp) {
     bd8:	       lea -20(sp),sp
     bdc:	       move.l a6,-(sp)
     bde:	       move.l d2,-(sp)
	int a, len = strlen (s);
     be0:	       move.l 32(sp),-(sp)
     be4:	       jsr 13df2 <strlen>
     bea:	       addq.l #4,sp
     bec:	       move.l d0,20(sp)
	put2bytes (len, fp);
     bf0:	       move.l 36(sp),-(sp)
     bf4:	       move.l 24(sp),-(sp)
     bf8:	       jsr 8d0 <put2bytes>
     bfe:	       addq.l #8,sp
	for (a = 0; a < len; a ++) {
     c00:	       clr.l 24(sp)
     c04:	   /-- bra.s c40 <writeString+0x68>
		FPutC (fp,s[a] + 1);
     c06:	/--|-> move.l 36(sp),16(sp)
     c0c:	|  |   move.l 24(sp),d0
     c10:	|  |   movea.l 32(sp),a0
     c14:	|  |   adda.l d0,a0
     c16:	|  |   move.b (a0),d0
     c18:	|  |   ext.w d0
     c1a:	|  |   ext.l d0
     c1c:	|  |   move.l d0,d1
     c1e:	|  |   addq.l #1,d1
     c20:	|  |   move.l d1,12(sp)
     c24:	|  |   move.l 1ca8a <DOSBase>,d0
     c2a:	|  |   movea.l d0,a6
     c2c:	|  |   move.l 16(sp),d1
     c30:	|  |   move.l 12(sp),d2
     c34:	|  |   jsr -312(a6)
     c38:	|  |   move.l d0,8(sp)
	for (a = 0; a < len; a ++) {
     c3c:	|  |   addq.l #1,24(sp)
     c40:	|  \-> move.l 24(sp),d0
     c44:	|      cmp.l 20(sp),d0
     c48:	\----- blt.s c06 <writeString+0x2e>
	}
     c4a:	       nop
     c4c:	       nop
     c4e:	       move.l (sp)+,d2
     c50:	       movea.l (sp)+,a6
     c52:	       lea 20(sp),sp
     c56:	       rts

00000c58 <displayCursor>:
int mouseCursorFrameNum = 0;
int mouseCursorCountUp = 0;

extern struct inputType input;

void displayCursor () {
     c58:	    movem.l d2-d5,-(sp)

	
	if( mouseCursorAnim->theSprites)
     c5c:	    movea.l 1c988 <mouseCursorAnim>,a0
     c62:	    move.l (a0),d0
     c64:	/-- beq.w d64 <displayCursor+0x10c>
	{		
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
			input.mouseY + 44 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].yhot,
			mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].height,
			(UBYTE *) mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].data);
     c68:	|   movea.l 1c988 <mouseCursorAnim>,a0
     c6e:	|   movea.l (a0),a0
     c70:	|   movea.l 16(a0),a1
     c74:	|   movea.l 1c988 <mouseCursorAnim>,a0
     c7a:	|   movea.l 4(a0),a0
     c7e:	|   move.l (a0),d0
     c80:	|   move.l d0,d1
     c82:	|   move.l d1,d0
     c84:	|   lsl.l #3,d0
     c86:	|   sub.l d1,d0
     c88:	|   add.l d0,d0
     c8a:	|   add.l d0,d0
     c8c:	|   lea (0,a1,d0.l),a0
     c90:	|   movea.l 24(a0),a1
			mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].height,
     c94:	|   movea.l 1c988 <mouseCursorAnim>,a0
     c9a:	|   movea.l (a0),a0
     c9c:	|   move.l 16(a0),d2
     ca0:	|   movea.l 1c988 <mouseCursorAnim>,a0
     ca6:	|   movea.l 4(a0),a0
     caa:	|   move.l (a0),d0
     cac:	|   move.l d0,d1
     cae:	|   move.l d1,d0
     cb0:	|   lsl.l #3,d0
     cb2:	|   sub.l d1,d0
     cb4:	|   add.l d0,d0
     cb6:	|   add.l d0,d0
     cb8:	|   movea.l d2,a0
     cba:	|   adda.l d0,a0
     cbc:	|   move.l 4(a0),d0
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
     cc0:	|   move.l d0,d0
     cc2:	|   moveq #0,d3
     cc4:	|   move.w d0,d3
			input.mouseY + 44 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].yhot,
     cc6:	|   move.l 1ca42 <input+0xe>,d0
     ccc:	|   move.l d0,d2
     cce:	|   movea.l 1c988 <mouseCursorAnim>,a0
     cd4:	|   movea.l (a0),a0
     cd6:	|   move.l 16(a0),d4
     cda:	|   movea.l 1c988 <mouseCursorAnim>,a0
     ce0:	|   movea.l 4(a0),a0
     ce4:	|   move.l (a0),d0
     ce6:	|   move.l d0,d1
     ce8:	|   move.l d1,d0
     cea:	|   lsl.l #3,d0
     cec:	|   sub.l d1,d0
     cee:	|   add.l d0,d0
     cf0:	|   add.l d0,d0
     cf2:	|   movea.l d4,a0
     cf4:	|   adda.l d0,a0
     cf6:	|   move.l 12(a0),d0
     cfa:	|   move.l d0,d0
     cfc:	|   move.w d2,d1
     cfe:	|   sub.w d0,d1
     d00:	|   move.w d1,d0
     d02:	|   addi.w #44,d0
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
     d06:	|   moveq #0,d2
     d08:	|   move.w d0,d2
     d0a:	|   move.l 1ca3e <input+0xa>,d0
     d10:	|   move.l d0,d4
     d12:	|   movea.l 1c988 <mouseCursorAnim>,a0
     d18:	|   movea.l (a0),a0
     d1a:	|   move.l 16(a0),d5
     d1e:	|   movea.l 1c988 <mouseCursorAnim>,a0
     d24:	|   movea.l 4(a0),a0
     d28:	|   move.l (a0),d0
     d2a:	|   move.l d0,d1
     d2c:	|   move.l d1,d0
     d2e:	|   lsl.l #3,d0
     d30:	|   sub.l d1,d0
     d32:	|   add.l d0,d0
     d34:	|   add.l d0,d0
     d36:	|   movea.l d5,a0
     d38:	|   adda.l d0,a0
     d3a:	|   move.l 8(a0),d0
     d3e:	|   move.l d0,d0
     d40:	|   move.w d4,d1
     d42:	|   sub.w d0,d1
     d44:	|   move.w d1,d0
     d46:	|   addi.w #128,d0
     d4a:	|   move.w d0,d0
     d4c:	|   andi.l #65535,d0
     d52:	|   move.l a1,-(sp)
     d54:	|   move.l d3,-(sp)
     d56:	|   move.l d2,-(sp)
     d58:	|   move.l d0,-(sp)
     d5a:	|   jsr 13ee <CstDisplayCursor>
     d60:	|   lea 16(sp),sp
	}
}
     d64:	\-> nop
     d66:	    movem.l (sp)+,d2-d5
     d6a:	    rts

00000d6c <pickAnimCursor>:

void pickAnimCursor (struct personaAnimation * pp) {
	deleteAnim (mouseCursorAnim);
     d6c:	move.l 1c988 <mouseCursorAnim>,d0
     d72:	move.l d0,-(sp)
     d74:	jsr 9a38 <deleteAnim>
     d7a:	addq.l #4,sp
	mouseCursorAnim = pp;
     d7c:	move.l 4(sp),1c988 <mouseCursorAnim>
	mouseCursorFrameNum = 0;
     d84:	clr.l 1c98c <mouseCursorFrameNum>
	mouseCursorCountUp = 0;
     d8a:	clr.l 1c990 <mouseCursorCountUp>
}
     d90:	nop
     d92:	rts

00000d94 <pasteCursor>:

void pasteCursor (int x, int y, struct personaAnimation * c) {
     d94:	subq.l #8,sp

				//int fNumSign = myAnim -> frames[thisPerson -> frameNum].frameNum;
	
	struct sprite *spritetouse = &c->theSprites->bank.sprites[c->frames[0].frameNum];
     d96:	movea.l 20(sp),a0
     d9a:	movea.l (a0),a0
     d9c:	movea.l 16(a0),a0
     da0:	movea.l 20(sp),a1
     da4:	movea.l 4(a1),a1
     da8:	move.l (a1),d0
     daa:	move.l d0,d1
     dac:	move.l d1,d0
     dae:	lsl.l #3,d0
     db0:	sub.l d1,d0
     db2:	add.l d0,d0
     db4:	add.l d0,d0
     db6:	adda.l d0,a0
     db8:	move.l a0,4(sp)

	UWORD absx =  x - spritetouse->xhot;
     dbc:	move.l 12(sp),d0
     dc0:	movea.l 4(sp),a0
     dc4:	move.l 8(a0),d1
     dc8:	move.l d1,d1
     dca:	movea.w d0,a0
     dcc:	suba.w d1,a0
     dce:	move.w a0,2(sp)
	UWORD absy =  y - spritetouse->yhot;
     dd2:	move.l 16(sp),d0
     dd6:	movea.l 4(sp),a0
     dda:	move.l 12(a0),d1
     dde:	move.l d1,d1
     de0:	movea.w d0,a0
     de2:	suba.w d1,a0
     de4:	move.w a0,(sp)

	CstScaleSprite( spritetouse, (struct onScreenPerson *) NULL, absx, absy, BACKDROP);
     de6:	move.w (sp),d0
     de8:	movea.w d0,a1
     dea:	move.w 2(sp),d0
     dee:	movea.w d0,a0
     df0:	pea 2 <_start+0x2>
     df4:	move.l a1,-(sp)
     df6:	move.l a0,-(sp)
     df8:	clr.l -(sp)
     dfa:	move.l 20(sp),-(sp)
     dfe:	jsr 2e62 <CstScaleSprite>
     e04:	lea 20(sp),sp
     e08:	nop
     e0a:	addq.l #8,sp
     e0c:	rts

00000e0e <CstBlankScreen>:
    0x1900000, 0x1920000, 0x1940000, 0x1960000, 0x1980000, 0x19a0000, 0x19c0000, 0x19e0000,
    0x1a00000, 0x1a20000, 0x1a40000, 0x1a60000, 0x1a80000, 0x1aa0000, 0x1ac0000, 0x1ae0000,
    0x1b00000, 0x1b20000, 0x1b40000, 0x1b60000, 0x1b80000, 0x1ba0000, 0x1bc0000, 0x1be0000 
};

void CstBlankScreen( int width, int height) {
     e0e:	          lea -16(sp),sp
     e12:	          move.l a6,-(sp)

  KPrintF("CstBlankScreen: started\n");
     e14:	          pea 17ea2 <PutChar+0x72>
     e1a:	          jsr 17366 <KPrintF>
     e20:	          addq.l #4,sp

  if( !CstBackDrop) {
     e22:	          move.l 1c9a4 <CstBackDrop>,d0
     e28:	      /-- bne.s e3c <CstBlankScreen+0x2e>
    KPrintF("CstBlankScreen: Backdrop empty nothing to do\n");
     e2a:	      |   pea 17ebb <PutChar+0x8b>
     e30:	      |   jsr 17366 <KPrintF>
     e36:	      |   addq.l #4,sp
    return;
     e38:	/-----|-- bra.w fc6 <CstBlankScreen+0x1b8>
  }

  CstPaletteLoaded = 0;
     e3c:	|     \-> clr.w 1c99e <CstPaletteLoaded>

  volatile struct Custom *custom = (struct Custom*)0xdff000;
     e42:	|         move.l #14675968,8(sp)

  width /= 16;
     e4a:	|         move.l 24(sp),d0
     e4e:	|         movea.l d0,a0
     e50:	|         cmpa.w #0,a0
     e54:	|     /-- bge.s e5a <CstBlankScreen+0x4c>
     e56:	|     |   lea 15(a0),a0
     e5a:	|     \-> move.l a0,d0
     e5c:	|         asr.l #4,d0
     e5e:	|         move.l d0,24(sp)

  WaitBlit();
     e62:	|         move.l 1ca8e <GfxBase>,d0
     e68:	|         movea.l d0,a6
     e6a:	|         jsr -228(a6)

  //Both Buffers need to be done
  custom->bltafwm = 0xffff;
     e6e:	|         movea.l 8(sp),a0
     e72:	|         move.w #-1,68(a0)
  custom->bltalwm = 0xffff;
     e78:	|         movea.l 8(sp),a0
     e7c:	|         move.w #-1,70(a0)
  custom->bltamod = 0;
     e82:	|         movea.l 8(sp),a0
     e86:	|         move.w #0,100(a0)
  custom->bltbmod = 0;
     e8c:	|         movea.l 8(sp),a0
     e90:	|         move.w #0,98(a0)
  custom->bltcmod = 0;
     e96:	|         movea.l 8(sp),a0
     e9a:	|         move.w #0,96(a0)
  custom->bltdmod = 0;
     ea0:	|         movea.l 8(sp),a0
     ea4:	|         move.w #0,102(a0)
  custom->bltcon1 = 0;
     eaa:	|         movea.l 8(sp),a0
     eae:	|         move.w #0,66(a0)
  custom->bltcon0 = 0x0100;
     eb4:	|         movea.l 8(sp),a0
     eb8:	|         move.w #256,64(a0)
  ULONG bltdpt = (ULONG) CstBackDrop;
     ebe:	|         move.l 1c9a4 <CstBackDrop>,d0
     ec4:	|         move.l d0,16(sp)
  UWORD bltsize = height*64+width;    
     ec8:	|         move.l 28(sp),d0
     ecc:	|         lsl.w #6,d0
     ece:	|         move.l 24(sp),d1
     ed2:	|         movea.w d0,a0
     ed4:	|         adda.w d1,a0
     ed6:	|         move.w a0,6(sp)
  UWORD blitsize = width*height*2;
     eda:	|         move.l 24(sp),d1
     ede:	|         move.l 28(sp),d0
     ee2:	|         muls.w d1,d0
     ee4:	|         add.w d0,d0
     ee6:	|         move.w d0,4(sp)

  KPrintF("CstBlankScreen: Starting Blits\n");
     eea:	|         pea 17ee9 <PutChar+0xb9>
     ef0:	|         jsr 17366 <KPrintF>
     ef6:	|         addq.l #4,sp

  for(int i2=0;i2<5;i2++)
     ef8:	|         clr.l 12(sp)
     efc:	|     /-- bra.s f2e <CstBlankScreen+0x120>
  {            
    custom->bltdpt = (APTR) bltdpt;
     efe:	|  /--|-> move.l 16(sp),d0
     f02:	|  |  |   movea.l 8(sp),a0
     f06:	|  |  |   move.l d0,84(a0)
    custom->bltsize = bltsize;            
     f0a:	|  |  |   movea.l 8(sp),a0
     f0e:	|  |  |   move.w 6(sp),88(a0)
    WaitBlit();
     f14:	|  |  |   move.l 1ca8e <GfxBase>,d0
     f1a:	|  |  |   movea.l d0,a6
     f1c:	|  |  |   jsr -228(a6)
    bltdpt += blitsize;
     f20:	|  |  |   moveq #0,d0
     f22:	|  |  |   move.w 4(sp),d0
     f26:	|  |  |   add.l d0,16(sp)
  for(int i2=0;i2<5;i2++)
     f2a:	|  |  |   addq.l #1,12(sp)
     f2e:	|  |  \-> moveq #4,d0
     f30:	|  |      cmp.l 12(sp),d0
     f34:	|  \----- bge.s efe <CstBlankScreen+0xf0>
  }

  KPrintF("CstBlankScreen: Finished Blits\n");
     f36:	|         pea 17f09 <PutChar+0xd9>
     f3c:	|         jsr 17366 <KPrintF>
     f42:	|         addq.l #4,sp

  CstApplyBackDropCounter = 2;
     f44:	|         move.w #2,1c9b0 <CstApplyBackDropCounter>

  *CstBackDropBufferApplyCursor++ = winWidth/16;
     f4c:	|         move.l 1c9d6 <winWidth>,d0
     f52:	|         lsr.l #4,d0
     f54:	|         movea.l 1c9c6 <CstBackDropBufferApplyCursor>,a0
     f5a:	|         move.l a0,d1
     f5c:	|         addq.l #2,d1
     f5e:	|         move.l d1,1c9c6 <CstBackDropBufferApplyCursor>
     f64:	|         move.l d0,d0
     f66:	|         move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = winHeight;
     f68:	|         move.l 1c9da <winHeight>,d0
     f6e:	|         movea.l 1c9c6 <CstBackDropBufferApplyCursor>,a0
     f74:	|         move.l a0,d1
     f76:	|         addq.l #2,d1
     f78:	|         move.l d1,1c9c6 <CstBackDropBufferApplyCursor>
     f7e:	|         move.l d0,d0
     f80:	|         move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = 0;
     f82:	|         movea.l 1c9c6 <CstBackDropBufferApplyCursor>,a0
     f88:	|         move.l a0,d0
     f8a:	|         addq.l #2,d0
     f8c:	|         move.l d0,1c9c6 <CstBackDropBufferApplyCursor>
     f92:	|         clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
     f94:	|         movea.l 1c9c6 <CstBackDropBufferApplyCursor>,a0
     f9a:	|         move.l a0,d0
     f9c:	|         addq.l #2,d0
     f9e:	|         move.l d0,1c9c6 <CstBackDropBufferApplyCursor>
     fa4:	|         clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
     fa6:	|         movea.l 1c9c6 <CstBackDropBufferApplyCursor>,a0
     fac:	|         move.l a0,d0
     fae:	|         addq.l #2,d0
     fb0:	|         move.l d0,1c9c6 <CstBackDropBufferApplyCursor>
     fb6:	|         clr.w (a0)

  KPrintF("CstBlankScreen: end\n");
     fb8:	|         pea 17f29 <PutChar+0xf9>
     fbe:	|         jsr 17366 <KPrintF>
     fc4:	|         addq.l #4,sp


}
     fc6:	\-------> movea.l (sp)+,a6
     fc8:	          lea 16(sp),sp
     fcc:	          rts

00000fce <CstCreateCopperlist>:

UWORD * CstCreateCopperlist( int width) {
     fce:	       lea -52(sp),sp
     fd2:	       move.l a6,-(sp)
     fd4:	       move.l d2,-(sp)
  
  ULONG *retval = AllocMem(  CSTCOPSIZE, MEMF_CHIP);
     fd6:	       move.l #400,32(sp)
     fde:	       moveq #2,d0
     fe0:	       move.l d0,28(sp)
     fe4:	       move.l 1ca82 <SysBase>,d0
     fea:	       movea.l d0,a6
     fec:	       move.l 32(sp),d0
     ff0:	       move.l 28(sp),d1
     ff4:	       jsr -198(a6)
     ff8:	       move.l d0,24(sp)
     ffc:	       move.l 24(sp),d0
    1000:	       move.l d0,20(sp)
  
  if( retval == 0) {
    1004:	   /-- bne.s 102e <CstCreateCopperlist+0x60>
    KPrintF("CstCreateCopperlist: Allocation of Ram for Copper failed.\n", 40);
    1006:	   |   pea 28 <_start+0x28>
    100a:	   |   pea 17f3e <PutChar+0x10e>
    1010:	   |   jsr 17366 <KPrintF>
    1016:	   |   addq.l #8,sp
    Exit(1);
    1018:	   |   moveq #1,d1
    101a:	   |   move.l d1,16(sp)
    101e:	   |   move.l 1ca8a <DOSBase>,d0
    1024:	   |   movea.l d0,a6
    1026:	   |   move.l 16(sp),d1
    102a:	   |   jsr -144(a6)
  }
  ULONG *cl = retval;
    102e:	   \-> move.l 20(sp),56(sp)
  CstClCursor = (UWORD *)cl;
    1034:	       move.l 56(sp),1c9d2 <CstClCursor>

  ULONG *clpartinstruction;
  clpartinstruction = CstClSprites;
    103c:	       move.l #115424,52(sp)
  for(int i=0; i<16;i++)
    1044:	       clr.l 48(sp)
    1048:	   /-- bra.s 106e <CstCreateCopperlist+0xa0>
    *cl++ = *clpartinstruction++;
    104a:	/--|-> move.l 52(sp),d1
    104e:	|  |   move.l d1,d2
    1050:	|  |   addq.l #4,d2
    1052:	|  |   move.l d2,52(sp)
    1056:	|  |   move.l 56(sp),d0
    105a:	|  |   move.l d0,d2
    105c:	|  |   addq.l #4,d2
    105e:	|  |   move.l d2,56(sp)
    1062:	|  |   movea.l d1,a0
    1064:	|  |   move.l (a0),d1
    1066:	|  |   movea.l d0,a0
    1068:	|  |   move.l d1,(a0)
  for(int i=0; i<16;i++)
    106a:	|  |   addq.l #1,48(sp)
    106e:	|  \-> moveq #15,d0
    1070:	|      cmp.l 48(sp),d0
    1074:	\----- bge.s 104a <CstCreateCopperlist+0x7c>

  clpartinstruction = CstClScreen;
    1076:	       move.l #115488,52(sp)

  for(int i=0; i<12;i++)
    107e:	       clr.l 44(sp)
    1082:	   /-- bra.s 10a8 <CstCreateCopperlist+0xda>
    *cl++ = *clpartinstruction++;
    1084:	/--|-> move.l 52(sp),d1
    1088:	|  |   move.l d1,d2
    108a:	|  |   addq.l #4,d2
    108c:	|  |   move.l d2,52(sp)
    1090:	|  |   move.l 56(sp),d0
    1094:	|  |   move.l d0,d2
    1096:	|  |   addq.l #4,d2
    1098:	|  |   move.l d2,56(sp)
    109c:	|  |   movea.l d1,a0
    109e:	|  |   move.l (a0),d1
    10a0:	|  |   movea.l d0,a0
    10a2:	|  |   move.l d1,(a0)
  for(int i=0; i<12;i++)
    10a4:	|  |   addq.l #1,44(sp)
    10a8:	|  \-> moveq #11,d0
    10aa:	|      cmp.l 44(sp),d0
    10ae:	\----- bge.s 1084 <CstCreateCopperlist+0xb6>

  clpartinstruction = CstClBitplanes;
    10b0:	       move.l #115536,52(sp)
  for(int i=0; i<10;i++)
    10b8:	       clr.l 40(sp)
    10bc:	   /-- bra.s 10e2 <CstCreateCopperlist+0x114>
    *cl++ = *clpartinstruction++;        
    10be:	/--|-> move.l 52(sp),d1
    10c2:	|  |   move.l d1,d2
    10c4:	|  |   addq.l #4,d2
    10c6:	|  |   move.l d2,52(sp)
    10ca:	|  |   move.l 56(sp),d0
    10ce:	|  |   move.l d0,d2
    10d0:	|  |   addq.l #4,d2
    10d2:	|  |   move.l d2,56(sp)
    10d6:	|  |   movea.l d1,a0
    10d8:	|  |   move.l (a0),d1
    10da:	|  |   movea.l d0,a0
    10dc:	|  |   move.l d1,(a0)
  for(int i=0; i<10;i++)
    10de:	|  |   addq.l #1,40(sp)
    10e2:	|  \-> moveq #9,d0
    10e4:	|      cmp.l 40(sp),d0
    10e8:	\----- bge.s 10be <CstCreateCopperlist+0xf0>

  
  clpartinstruction = CstClColorTemplate;
    10ea:	       move.l #115576,52(sp)
  CstClColor = (UWORD *) cl;
    10f2:	       move.l 56(sp),1c9ca <CstClColor>
  for(int i=0; i<32;i++)
    10fa:	       clr.l 36(sp)
    10fe:	   /-- bra.s 1124 <CstCreateCopperlist+0x156>
    *cl++ = *clpartinstruction++;        
    1100:	/--|-> move.l 52(sp),d1
    1104:	|  |   move.l d1,d2
    1106:	|  |   addq.l #4,d2
    1108:	|  |   move.l d2,52(sp)
    110c:	|  |   move.l 56(sp),d0
    1110:	|  |   move.l d0,d2
    1112:	|  |   addq.l #4,d2
    1114:	|  |   move.l d2,56(sp)
    1118:	|  |   movea.l d1,a0
    111a:	|  |   move.l (a0),d1
    111c:	|  |   movea.l d0,a0
    111e:	|  |   move.l d1,(a0)
  for(int i=0; i<32;i++)
    1120:	|  |   addq.l #1,36(sp)
    1124:	|  \-> moveq #31,d0
    1126:	|      cmp.l 36(sp),d0
    112a:	\----- bge.s 1100 <CstCreateCopperlist+0x132>
 
  /* Screen is bigger than real screen? Setup BPLxMod accordingly*/
  if(width > 40) {
    112c:	       moveq #40,d1
    112e:	       cmp.l 64(sp),d1
    1132:	   /-- bge.s 1190 <CstCreateCopperlist+0x1c2>
    int tmp = width - 40;
    1134:	   |   moveq #-40,d2
    1136:	   |   add.l 64(sp),d2
    113a:	   |   move.l d2,12(sp)
    UWORD *cw = (UWORD *) cl; 
    113e:	   |   move.l 56(sp),8(sp)
    *cw++ = 0x108;
    1144:	   |   move.l 8(sp),d0
    1148:	   |   move.l d0,d1
    114a:	   |   addq.l #2,d1
    114c:	   |   move.l d1,8(sp)
    1150:	   |   movea.l d0,a0
    1152:	   |   move.w #264,(a0)
    *cw++ = tmp;
    1156:	   |   move.l 8(sp),d0
    115a:	   |   move.l d0,d1
    115c:	   |   addq.l #2,d1
    115e:	   |   move.l d1,8(sp)
    1162:	   |   move.l 12(sp),d1
    1166:	   |   movea.l d0,a0
    1168:	   |   move.w d1,(a0)
    *cw++ = 0x10a;
    116a:	   |   move.l 8(sp),d0
    116e:	   |   move.l d0,d1
    1170:	   |   addq.l #2,d1
    1172:	   |   move.l d1,8(sp)
    1176:	   |   movea.l d0,a0
    1178:	   |   move.w #266,(a0)
    *cw++ = tmp;     
    117c:	   |   move.l 8(sp),d0
    1180:	   |   move.l d0,d1
    1182:	   |   addq.l #2,d1
    1184:	   |   move.l d1,8(sp)
    1188:	   |   move.l 12(sp),d1
    118c:	   |   movea.l d0,a0
    118e:	   |   move.w d1,(a0)
  }

  *cl++ = 0xfffffffe;
    1190:	   \-> move.l 56(sp),d0
    1194:	       move.l d0,d1
    1196:	       addq.l #4,d1
    1198:	       move.l d1,56(sp)
    119c:	       moveq #-2,d2
    119e:	       movea.l d0,a0
    11a0:	       move.l d2,(a0)
  return (UWORD *) retval;  
    11a2:	       move.l 20(sp),d0
}
    11a6:	       move.l (sp)+,d2
    11a8:	       movea.l (sp)+,a6
    11aa:	       lea 52(sp),sp
    11ae:	       rts

000011b0 <CstDisplayBackDrop>:

void CstDisplayBackDrop() 
{
    11b0:	                lea -40(sp),sp
    11b4:	                move.l a6,-(sp)
    11b6:	                move.l d2,-(sp)
 volatile struct Custom *custom = (struct Custom*)0xdff000;  
    11b8:	                move.l #14675968,16(sp)

  KPrintF("CstDisplayBackDrop: Started");
    11c0:	                pea 17f79 <PutChar+0x149>
    11c6:	                jsr 17366 <KPrintF>
    11cc:	                addq.l #4,sp

  CstBackDropBufferApplyCursor = CstBackDropBufferApplyStart;
    11ce:	                move.l 1c9c2 <CstBackDropBufferApplyStart>,d0
    11d4:	                move.l d0,1c9c6 <CstBackDropBufferApplyCursor>
  UWORD *cursor = CstBackDropBufferApplyStart;
    11da:	                move.l 1c9c2 <CstBackDropBufferApplyStart>,44(sp)
  if(!*cursor || !CstDrawBuffer) {
    11e2:	                movea.l 44(sp),a0
    11e6:	                move.w (a0),d0
    11e8:	/-------------- beq.w 13e2 <CstDisplayBackDrop+0x232>
    11ec:	|               move.l 1c9b6 <CstDrawBuffer>,d0
    11f2:	+-------------- beq.w 13e2 <CstDisplayBackDrop+0x232>
    return;
  } 

  WaitBlit();
    11f6:	|               move.l 1ca8e <GfxBase>,d0
    11fc:	|               movea.l d0,a6
    11fe:	|               jsr -228(a6)
  
  custom->bltafwm = 0xffff;
    1202:	|               movea.l 16(sp),a0
    1206:	|               move.w #-1,68(a0)
  custom->bltalwm = 0xffff;  
    120c:	|               movea.l 16(sp),a0
    1210:	|               move.w #-1,70(a0)
  custom->bltcon0 = 0x9f0;
    1216:	|               movea.l 16(sp),a0
    121a:	|               move.w #2544,64(a0)
  
  while(*cursor)
    1220:	|     /-------- bra.w 1388 <CstDisplayBackDrop+0x1d8>
  {    
    UWORD width = *cursor++;
    1224:	|  /--|-------> move.l 44(sp),d0
    1228:	|  |  |         move.l d0,d1
    122a:	|  |  |         addq.l #2,d1
    122c:	|  |  |         move.l d1,44(sp)
    1230:	|  |  |         movea.l d0,a0
    1232:	|  |  |         move.w (a0),14(sp)
    UWORD height = *cursor++;
    1236:	|  |  |         move.l 44(sp),d0
    123a:	|  |  |         move.l d0,d1
    123c:	|  |  |         addq.l #2,d1
    123e:	|  |  |         move.l d1,44(sp)
    1242:	|  |  |         movea.l d0,a0
    1244:	|  |  |         move.w (a0),12(sp)
    UWORD xpos = *cursor++;
    1248:	|  |  |         move.l 44(sp),d0
    124c:	|  |  |         move.l d0,d1
    124e:	|  |  |         addq.l #2,d1
    1250:	|  |  |         move.l d1,44(sp)
    1254:	|  |  |         movea.l d0,a0
    1256:	|  |  |         move.w (a0),10(sp)
    UWORD ypos = *cursor++;
    125a:	|  |  |         move.l 44(sp),d0
    125e:	|  |  |         move.l d0,d1
    1260:	|  |  |         addq.l #2,d1
    1262:	|  |  |         move.l d1,44(sp)
    1266:	|  |  |         movea.l d0,a0
    1268:	|  |  |         move.w (a0),8(sp)

    custom->bltamod = winWidth/8-width*2;
    126c:	|  |  |         move.l 1c9d6 <winWidth>,d0
    1272:	|  |  |         lsr.l #3,d0
    1274:	|  |  |         move.l d0,d1
    1276:	|  |  |         move.w 14(sp),d0
    127a:	|  |  |         add.w d0,d0
    127c:	|  |  |         sub.w d0,d1
    127e:	|  |  |         movea.l 16(sp),a0
    1282:	|  |  |         move.w d1,100(a0)
    custom->bltdmod = winWidth/8-width*2;
    1286:	|  |  |         move.l 1c9d6 <winWidth>,d0
    128c:	|  |  |         lsr.l #3,d0
    128e:	|  |  |         move.l d0,d1
    1290:	|  |  |         move.w 14(sp),d0
    1294:	|  |  |         add.w d0,d0
    1296:	|  |  |         sub.w d0,d1
    1298:	|  |  |         movea.l 16(sp),a0
    129c:	|  |  |         move.w d1,102(a0)
    ULONG bltapt = ((ULONG) CstBackDrop) + ypos*winWidth/8 + xpos;
    12a0:	|  |  |         moveq #0,d0
    12a2:	|  |  |         move.w 8(sp),d0
    12a6:	|  |  |         move.l 1c9d6 <winWidth>,d1
    12ac:	|  |  |         move.l d1,-(sp)
    12ae:	|  |  |         move.l d0,-(sp)
    12b0:	|  |  |         jsr 17d1a <__mulsi3>
    12b6:	|  |  |         addq.l #8,sp
    12b8:	|  |  |         move.l d0,d1
    12ba:	|  |  |         lsr.l #3,d1
    12bc:	|  |  |         move.l 1c9a4 <CstBackDrop>,d0
    12c2:	|  |  |         add.l d0,d1
    12c4:	|  |  |         moveq #0,d0
    12c6:	|  |  |         move.w 10(sp),d0
    12ca:	|  |  |         move.l d1,d2
    12cc:	|  |  |         add.l d0,d2
    12ce:	|  |  |         move.l d2,40(sp)
    ULONG bltdpt = ((ULONG) CstDrawBuffer) + ypos*winWidth/8 + xpos;
    12d2:	|  |  |         moveq #0,d0
    12d4:	|  |  |         move.w 8(sp),d0
    12d8:	|  |  |         move.l 1c9d6 <winWidth>,d1
    12de:	|  |  |         move.l d1,-(sp)
    12e0:	|  |  |         move.l d0,-(sp)
    12e2:	|  |  |         jsr 17d1a <__mulsi3>
    12e8:	|  |  |         addq.l #8,sp
    12ea:	|  |  |         move.l d0,d1
    12ec:	|  |  |         lsr.l #3,d1
    12ee:	|  |  |         move.l 1c9b6 <CstDrawBuffer>,d0
    12f4:	|  |  |         add.l d0,d1
    12f6:	|  |  |         moveq #0,d0
    12f8:	|  |  |         move.w 10(sp),d0
    12fc:	|  |  |         move.l d1,d2
    12fe:	|  |  |         add.l d0,d2
    1300:	|  |  |         move.l d2,36(sp)
    for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    1304:	|  |  |         clr.l 32(sp)
    1308:	|  |  |     /-- bra.s 1380 <CstDisplayBackDrop+0x1d0>
    {
      custom->bltapt = (APTR) bltapt;
    130a:	|  |  |  /--|-> move.l 40(sp),d0
    130e:	|  |  |  |  |   movea.l 16(sp),a0
    1312:	|  |  |  |  |   move.l d0,80(a0)
      custom->bltdpt = (APTR) bltdpt;
    1316:	|  |  |  |  |   move.l 36(sp),d0
    131a:	|  |  |  |  |   movea.l 16(sp),a0
    131e:	|  |  |  |  |   move.l d0,84(a0)
      custom->bltsize = (height << 6) + width;
    1322:	|  |  |  |  |   move.w 12(sp),d0
    1326:	|  |  |  |  |   lsl.w #6,d0
    1328:	|  |  |  |  |   add.w 14(sp),d0
    132c:	|  |  |  |  |   movea.l 16(sp),a0
    1330:	|  |  |  |  |   move.w d0,88(a0)
      bltapt += winWidth/8*winHeight;
    1334:	|  |  |  |  |   move.l 1c9d6 <winWidth>,d0
    133a:	|  |  |  |  |   lsr.l #3,d0
    133c:	|  |  |  |  |   move.l 1c9da <winHeight>,d1
    1342:	|  |  |  |  |   move.l d1,-(sp)
    1344:	|  |  |  |  |   move.l d0,-(sp)
    1346:	|  |  |  |  |   jsr 17d1a <__mulsi3>
    134c:	|  |  |  |  |   addq.l #8,sp
    134e:	|  |  |  |  |   add.l d0,40(sp)
      bltdpt += winWidth/8*winHeight;
    1352:	|  |  |  |  |   move.l 1c9d6 <winWidth>,d0
    1358:	|  |  |  |  |   lsr.l #3,d0
    135a:	|  |  |  |  |   move.l 1c9da <winHeight>,d1
    1360:	|  |  |  |  |   move.l d1,-(sp)
    1362:	|  |  |  |  |   move.l d0,-(sp)
    1364:	|  |  |  |  |   jsr 17d1a <__mulsi3>
    136a:	|  |  |  |  |   addq.l #8,sp
    136c:	|  |  |  |  |   add.l d0,36(sp)
      WaitBlit();
    1370:	|  |  |  |  |   move.l 1ca8e <GfxBase>,d0
    1376:	|  |  |  |  |   movea.l d0,a6
    1378:	|  |  |  |  |   jsr -228(a6)
    for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    137c:	|  |  |  |  |   addq.l #1,32(sp)
    1380:	|  |  |  |  \-> moveq #4,d0
    1382:	|  |  |  |      cmp.l 32(sp),d0
    1386:	|  |  |  \----- bge.s 130a <CstDisplayBackDrop+0x15a>
  while(*cursor)
    1388:	|  |  \-------> movea.l 44(sp),a0
    138c:	|  |            move.w (a0),d0
    138e:	|  \----------- bne.w 1224 <CstDisplayBackDrop+0x74>
    }  
  }
  UWORD *colorpos = CstPalette;
    1392:	|               move.l 1c9ce <CstPalette>,28(sp)
  
  UWORD *tmp = CstClColor;
    139a:	|               move.l 1c9ca <CstClColor>,24(sp)
  for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes
    13a2:	|               clr.l 20(sp)
    13a6:	|           /-- bra.s 13d8 <CstDisplayBackDrop+0x228>
    *tmp++;
    13a8:	|        /--|-> move.l 24(sp),d0
    13ac:	|        |  |   move.l d0,d1
    13ae:	|        |  |   addq.l #2,d1
    13b0:	|        |  |   move.l d1,24(sp)
    *tmp++ = *colorpos++;
    13b4:	|        |  |   move.l 28(sp),d1
    13b8:	|        |  |   move.l d1,d2
    13ba:	|        |  |   addq.l #2,d2
    13bc:	|        |  |   move.l d2,28(sp)
    13c0:	|        |  |   move.l 24(sp),d0
    13c4:	|        |  |   move.l d0,d2
    13c6:	|        |  |   addq.l #2,d2
    13c8:	|        |  |   move.l d2,24(sp)
    13cc:	|        |  |   movea.l d1,a0
    13ce:	|        |  |   move.w (a0),d1
    13d0:	|        |  |   movea.l d0,a0
    13d2:	|        |  |   move.w d1,(a0)
  for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes
    13d4:	|        |  |   addq.l #1,20(sp)
    13d8:	|        |  \-> moveq #31,d0
    13da:	|        |      cmp.l 20(sp),d0
    13de:	|        \----- bge.s 13a8 <CstDisplayBackDrop+0x1f8>
    13e0:	|           /-- bra.s 13e4 <CstDisplayBackDrop+0x234>
    return;
    13e2:	\-----------|-> nop
  }
}
    13e4:	            \-> move.l (sp)+,d2
    13e6:	                movea.l (sp)+,a6
    13e8:	                lea 40(sp),sp
    13ec:	                rts

000013ee <CstDisplayCursor>:

void CstDisplayCursor(UWORD x, UWORD y, UWORD height, UBYTE *spritedata)
{
    13ee:	lea -20(sp),sp
    13f2:	movea.l 24(sp),a0
    13f6:	move.l 28(sp),d1
    13fa:	move.l 32(sp),d0
    13fe:	movea.w a0,a0
    1400:	move.w a0,4(sp)
    1404:	move.w d1,d1
    1406:	move.w d1,2(sp)
    140a:	move.w d0,d0
    140c:	move.w d0,(sp)
  spritedata[0] = (UBYTE) (y & 0xff); //Low 8 Bits of y
    140e:	move.w 2(sp),d0
    1412:	movea.l 36(sp),a0
    1416:	move.b d0,(a0)
  spritedata[1] = (UBYTE) (x >> 1); //High 8 Bits of x
    1418:	move.w 4(sp),d0
    141c:	lsr.w #1,d0
    141e:	movea.l 36(sp),a0
    1422:	addq.l #1,a0
    1424:	move.l d0,d0
    1426:	move.b d0,(a0)
  spritedata[2] = (UBYTE) (y+height & 0xff); //Sprite Stop Low 8 Bits
    1428:	move.w 2(sp),d1
    142c:	move.w (sp),d0
    142e:	movea.l 36(sp),a0
    1432:	addq.l #2,a0
    1434:	add.b d1,d0
    1436:	move.b d0,(a0)

  UWORD lowbitx = x & 0x1;
    1438:	move.w 4(sp),d0
    143c:	andi.w #1,d0
    1440:	move.w d0,18(sp)
  UWORD vstophighbit = ((y+height) & 0x100) >> 7;
    1444:	move.w 2(sp),d0
    1448:	add.w (sp),d0
    144a:	move.w d0,d0
    144c:	andi.l #65535,d0
    1452:	asr.l #7,d0
    1454:	move.l d0,d0
    1456:	move.w d0,d1
    1458:	andi.w #2,d1
    145c:	move.w d1,16(sp)
  UWORD vstarthighbit = (y & 0x100) >> 6;
    1460:	moveq #0,d0
    1462:	move.w 2(sp),d0
    1466:	asr.l #6,d0
    1468:	move.l d0,d0
    146a:	move.w d0,d1
    146c:	andi.w #4,d1
    1470:	move.w d1,14(sp)

  spritedata[3] = lowbitx + vstophighbit + vstarthighbit; //Low Bit X, Sprite Stop High Bit
    1474:	move.w 18(sp),d1
    1478:	move.w 16(sp),d0
    147c:	add.b d0,d1
    147e:	move.w 14(sp),d0
    1482:	movea.l 36(sp),a0
    1486:	addq.l #3,a0
    1488:	add.b d1,d0
    148a:	move.b d0,(a0)

  ULONG ptr = (ULONG) spritedata; 
    148c:	move.l 36(sp),10(sp)
  UWORD loptr = (UWORD) ptr & 0xffff;
    1492:	move.w 12(sp),8(sp)
  UWORD hiptr = ptr >> 16;
    1498:	move.l 10(sp),d0
    149c:	clr.w d0
    149e:	swap d0
    14a0:	move.w d0,6(sp)

  CstClCursor[1] = hiptr;
    14a4:	move.l 1c9d2 <CstClCursor>,d0
    14aa:	movea.l d0,a0
    14ac:	addq.l #2,a0
    14ae:	move.w 6(sp),(a0)
  CstClCursor[3] = loptr;
    14b2:	move.l 1c9d2 <CstClCursor>,d0
    14b8:	movea.l d0,a0
    14ba:	addq.l #6,a0
    14bc:	move.w 8(sp),(a0)

}
    14c0:	nop
    14c2:	lea 20(sp),sp
    14c6:	rts

000014c8 <CstDrawBackdrop>:

void CstDrawBackdrop() {  
  if(CstApplyBackDropCounter > 0) 
    14c8:	    move.w 1c9b0 <CstApplyBackDropCounter>,d0
    14ce:	/-- beq.s 14e4 <CstDrawBackdrop+0x1c>
  {
    CstDisplayBackDrop();
    14d0:	|   jsr 11b0 <CstDisplayBackDrop>
    CstApplyBackDropCounter--;
    14d6:	|   move.w 1c9b0 <CstApplyBackDropCounter>,d0
    14dc:	|   subq.w #1,d0
    14de:	|   move.w d0,1c9b0 <CstApplyBackDropCounter>
  }    
}
    14e4:	\-> nop
    14e6:	    rts

000014e8 <CstDrawZBuffer>:

 UBYTE *CstDrawZBuffer( struct sprite *sprite, struct zBufferData *zbuffer, UWORD x, UWORD y) {
    14e8:	                      lea -72(sp),sp
    14ec:	                      move.l a6,-(sp)
    14ee:	                      move.l d2,-(sp)
    14f0:	                      move.l 92(sp),d1
    14f4:	                      move.l 96(sp),d0
    14f8:	                      move.w d1,d1
    14fa:	                      move.w d1,12(sp)
    14fe:	                      move.w d0,d0
    1500:	                      move.w d0,10(sp)

  volatile struct Custom *custom = (struct Custom*)0xdff000;
    1504:	                      move.l #14675968,56(sp)
  //In Case nothing needs to be done return sprite mask without changes
  UBYTE *returnvalue = AllocVec( sprite->width/8*sprite->height, MEMF_CHIP);
    150c:	                      movea.l 84(sp),a0
    1510:	                      move.l (a0),d0
    1512:	                  /-- bpl.s 1516 <CstDrawZBuffer+0x2e>
    1514:	                  |   addq.l #7,d0
    1516:	                  \-> asr.l #3,d0
    1518:	                      movea.l 84(sp),a0
    151c:	                      move.l 4(a0),d1
    1520:	                      move.l d1,-(sp)
    1522:	                      move.l d0,-(sp)
    1524:	                      jsr 17d1a <__mulsi3>
    152a:	                      addq.l #8,sp
    152c:	                      move.l d0,52(sp)
    1530:	                      moveq #2,d0
    1532:	                      move.l d0,48(sp)
    1536:	                      move.l 1ca82 <SysBase>,d0
    153c:	                      movea.l d0,a6
    153e:	                      move.l 52(sp),d0
    1542:	                      move.l 48(sp),d1
    1546:	                      jsr -684(a6)
    154a:	                      move.l d0,44(sp)
    154e:	                      move.l 44(sp),d0
    1552:	                      move.l d0,40(sp)

  #ifdef EMULATOR
    if(sprite->height == 60)
    1556:	                      movea.l 84(sp),a0
    155a:	                      move.l 4(a0),d0
    155e:	                      moveq #60,d1
    1560:	                      cmp.l d0,d1
    1562:	                  /-- bne.s 1598 <CstDrawZBuffer+0xb0>
      debug_register_bitmap(returnvalue, "SpriteMask", sprite->width, sprite->height, 1, 0);
    1564:	                  |   movea.l 84(sp),a0
    1568:	                  |   move.l 4(a0),d0
    156c:	                  |   move.l d0,d0
    156e:	                  |   movea.w d0,a1
    1570:	                  |   movea.l 84(sp),a0
    1574:	                  |   move.l (a0),d0
    1576:	                  |   move.l d0,d0
    1578:	                  |   movea.w d0,a0
    157a:	                  |   clr.l -(sp)
    157c:	                  |   pea 1 <_start+0x1>
    1580:	                  |   move.l a1,-(sp)
    1582:	                  |   move.l a0,-(sp)
    1584:	                  |   pea 17f95 <PutChar+0x165>
    158a:	                  |   move.l 60(sp),-(sp)
    158e:	                  |   jsr 1744e <debug_register_bitmap>
    1594:	                  |   lea 24(sp),sp
  #endif  

  WaitBlit();
    1598:	                  \-> move.l 1ca8e <GfxBase>,d0
    159e:	                      movea.l d0,a6
    15a0:	                      jsr -228(a6)

  custom->bltafwm = 0xffff;
    15a4:	                      movea.l 56(sp),a0
    15a8:	                      move.w #-1,68(a0)
  custom->bltalwm = 0xffff;
    15ae:	                      movea.l 56(sp),a0
    15b2:	                      move.w #-1,70(a0)
  custom->bltamod = 0;
    15b8:	                      movea.l 56(sp),a0
    15bc:	                      move.w #0,100(a0)
  custom->bltbmod = 0;
    15c2:	                      movea.l 56(sp),a0
    15c6:	                      move.w #0,98(a0)
  custom->bltcmod = 0;
    15cc:	                      movea.l 56(sp),a0
    15d0:	                      move.w #0,96(a0)
  custom->bltdmod = 0;
    15d6:	                      movea.l 56(sp),a0
    15da:	                      move.w #0,102(a0)
  custom->bltcon0 = 0x9f0; //Copy A to D
    15e0:	                      movea.l 56(sp),a0
    15e4:	                      move.w #2544,64(a0)
  custom->bltcon1 = 0;        
    15ea:	                      movea.l 56(sp),a0
    15ee:	                      move.w #0,66(a0)

  custom->bltapt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    15f4:	                      movea.l 84(sp),a0
    15f8:	                      move.l 24(a0),d2
    15fc:	                      movea.l 84(sp),a0
    1600:	                      move.l (a0),d0
    1602:	                  /-- bpl.s 1606 <CstDrawZBuffer+0x11e>
    1604:	                  |   addq.l #7,d0
    1606:	                  \-> asr.l #3,d0
    1608:	                      movea.l 84(sp),a0
    160c:	                      move.l 4(a0),d1
    1610:	                      move.l d1,-(sp)
    1612:	                      move.l d0,-(sp)
    1614:	                      jsr 17d1a <__mulsi3>
    161a:	                      addq.l #8,sp
    161c:	                      move.l d0,d1
    161e:	                      move.l d1,d0
    1620:	                      add.l d0,d0
    1622:	                      add.l d0,d0
    1624:	                      add.l d1,d0
    1626:	                      add.l d2,d0
    1628:	                      movea.l 56(sp),a0
    162c:	                      move.l d0,80(a0)
  custom->bltdpt = (APTR) returnvalue;
    1630:	                      movea.l 56(sp),a0
    1634:	                      move.l 40(sp),84(a0)
  custom->bltsize = (sprite->height<<6)+sprite->width/16;      
    163a:	                      movea.l 84(sp),a0
    163e:	                      move.l 4(a0),d0
    1642:	                      move.l d0,d0
    1644:	                      move.w d0,d1
    1646:	                      lsl.w #6,d1
    1648:	                      movea.l 84(sp),a0
    164c:	                      move.l (a0),d0
    164e:	                      movea.l d0,a0
    1650:	                      cmpa.w #0,a0
    1654:	                  /-- bge.s 165a <CstDrawZBuffer+0x172>
    1656:	                  |   lea 15(a0),a0
    165a:	                  \-> move.l a0,d0
    165c:	                      asr.l #4,d0
    165e:	                      move.l d0,d0
    1660:	                      add.w d1,d0
    1662:	                      movea.l 56(sp),a0
    1666:	                      move.w d0,88(a0)

  while(zbuffer) 
    166a:	   /----------------- bra.w 1d70 <CstDrawZBuffer+0x888>
  {

    UWORD spritex1oncanvas = x;
    166e:	/--|----------------> move.w 12(sp),38(sp)
    UWORD spritex2oncanvas = spritex1oncanvas+sprite->width;
    1674:	|  |                  movea.l 84(sp),a0
    1678:	|  |                  move.l (a0),d0
    167a:	|  |                  move.l d0,d0
    167c:	|  |                  move.w 38(sp),d1
    1680:	|  |                  add.w d0,d1
    1682:	|  |                  move.w d1,36(sp)
    UWORD spritey1oncanvas = y;
    1686:	|  |                  move.w 10(sp),34(sp)
    UWORD spritey2oncanvas = spritey1oncanvas + sprite->height;
    168c:	|  |                  movea.l 84(sp),a0
    1690:	|  |                  move.l 4(a0),d0
    1694:	|  |                  move.l d0,d0
    1696:	|  |                  move.w 34(sp),d1
    169a:	|  |                  add.w d0,d1
    169c:	|  |                  move.w d1,32(sp)

    UWORD zbufferx1oncanvas = zbuffer->topx;
    16a0:	|  |                  movea.l 88(sp),a0
    16a4:	|  |                  move.l 8(a0),d0
    16a8:	|  |                  move.w d0,30(sp)
    UWORD zbufferx2oncanvas = zbufferx1oncanvas + zbuffer->width;
    16ac:	|  |                  movea.l 88(sp),a0
    16b0:	|  |                  move.l (a0),d0
    16b2:	|  |                  move.l d0,d0
    16b4:	|  |                  move.w 30(sp),d1
    16b8:	|  |                  add.w d0,d1
    16ba:	|  |                  move.w d1,28(sp)

    UWORD zbuffery1oncanvas = zbuffer->topy;
    16be:	|  |                  movea.l 88(sp),a0
    16c2:	|  |                  move.l 12(a0),d0
    16c6:	|  |                  move.w d0,26(sp)
    UWORD zbuffery2oncanvas = zbuffery1oncanvas + zbuffer->height;
    16ca:	|  |                  movea.l 88(sp),a0
    16ce:	|  |                  move.l 4(a0),d0
    16d2:	|  |                  move.l d0,d0
    16d4:	|  |                  move.w 26(sp),d1
    16d8:	|  |                  add.w d0,d1
    16da:	|  |                  move.w d1,24(sp)
  
    BOOL zbufferfromright = FALSE;
    16de:	|  |                  clr.w 78(sp)
    BOOL zbufferfromleft = FALSE;
    16e2:	|  |                  clr.w 76(sp)
    BOOL zbufferfrombottom = FALSE;
    16e6:	|  |                  clr.w 74(sp)
    BOOL zbufferfromtop = FALSE;
    16ea:	|  |                  clr.w 72(sp)

    //Sprite will be drawn behind the zBuffer. We need to do something
    if(spritey2oncanvas < zbuffer->yz) {
    16ee:	|  |                  moveq #0,d0
    16f0:	|  |                  move.w 32(sp),d0
    16f4:	|  |                  movea.l 88(sp),a0
    16f8:	|  |                  move.l 16(a0),d1
    16fc:	|  |                  cmp.l d0,d1
    16fe:	|  +----------------- ble.w 1d70 <CstDrawZBuffer+0x888>
      //sprite ------------x1+++++++++++++++++++x2-----------------*/
      /*zbuffer-------------------x1++++++++++?????????------------*/      
      if(spritex1oncanvas <= zbufferx1oncanvas && spritex2oncanvas > zbufferx1oncanvas)
    1702:	|  |                  move.w 30(sp),d0
    1706:	|  |                  cmp.w 38(sp),d0
    170a:	|  |              /-- bcs.s 171e <CstDrawZBuffer+0x236>
    170c:	|  |              |   move.w 30(sp),d1
    1710:	|  |              |   cmp.w 36(sp),d1
    1714:	|  |              +-- bcc.s 171e <CstDrawZBuffer+0x236>
        zbufferfromright = TRUE;
    1716:	|  |              |   move.w #1,78(sp)
    171c:	|  |           /--|-- bra.s 1738 <CstDrawZBuffer+0x250>
      //sprite -------------------------x1++++??????-------*/
      /*zbuffer-------------------x1+++++++++++x2----------*/  
      else if(spritex1oncanvas > zbufferx1oncanvas && spritex1oncanvas < zbufferx2oncanvas)
    171e:	|  |           |  \-> move.w 30(sp),d0
    1722:	|  |           |      cmp.w 38(sp),d0
    1726:	|  |           +----- bcc.s 1738 <CstDrawZBuffer+0x250>
    1728:	|  |           |      move.w 28(sp),d1
    172c:	|  |           |      cmp.w 38(sp),d1
    1730:	|  |           +----- bls.s 1738 <CstDrawZBuffer+0x250>
        zbufferfromleft = TRUE;       
    1732:	|  |           |      move.w #1,76(sp)

      //Overlap on X-Axis. Now Check y-axis
      if( zbufferfromleft || zbufferfromright)         
    1738:	|  |           \----> tst.w 76(sp)
    173c:	|  |              /-- bne.s 1744 <CstDrawZBuffer+0x25c>
    173e:	|  |              |   tst.w 78(sp)
    1742:	|  |           /--|-- beq.s 177a <CstDrawZBuffer+0x292>
      {
        if(spritey1oncanvas <= zbuffery1oncanvas && spritey2oncanvas > zbuffery1oncanvas)
    1744:	|  |           |  \-> move.w 26(sp),d0
    1748:	|  |           |      cmp.w 34(sp),d0
    174c:	|  |           |  /-- bcs.s 1760 <CstDrawZBuffer+0x278>
    174e:	|  |           |  |   move.w 26(sp),d1
    1752:	|  |           |  |   cmp.w 32(sp),d1
    1756:	|  |           |  +-- bcc.s 1760 <CstDrawZBuffer+0x278>
          zbufferfrombottom = TRUE;
    1758:	|  |           |  |   move.w #1,74(sp)
    175e:	|  |           +--|-- bra.s 177a <CstDrawZBuffer+0x292>

        else if(spritey1oncanvas > zbuffery1oncanvas && spritey1oncanvas < zbuffery2oncanvas)
    1760:	|  |           |  \-> move.w 26(sp),d0
    1764:	|  |           |      cmp.w 34(sp),d0
    1768:	|  |           +----- bcc.s 177a <CstDrawZBuffer+0x292>
    176a:	|  |           |      move.w 24(sp),d1
    176e:	|  |           |      cmp.w 34(sp),d1
    1772:	|  |           +----- bls.s 177a <CstDrawZBuffer+0x292>
          zbufferfromtop = TRUE;       
    1774:	|  |           |      move.w #1,72(sp)
      }

      //Overlap on both Axis
      if( (zbufferfromright || zbufferfromleft) && (zbufferfrombottom || zbufferfromtop))
    177a:	|  |           \----> tst.w 78(sp)
    177e:	|  |              /-- bne.s 1788 <CstDrawZBuffer+0x2a0>
    1780:	|  |              |   tst.w 76(sp)
    1784:	|  |  /-----------|-- beq.w 1d66 <CstDrawZBuffer+0x87e>
    1788:	|  |  |           \-> tst.w 74(sp)
    178c:	|  |  |           /-- bne.s 1796 <CstDrawZBuffer+0x2ae>
    178e:	|  |  |           |   tst.w 72(sp)
    1792:	|  |  +-----------|-- beq.w 1d66 <CstDrawZBuffer+0x87e>

        UWORD xdiff;
        UWORD xdiffbyte;          
        UWORD xdiffrest;
        UWORD bytewidth, width, rest;
        if(zbufferfromright)
    1796:	|  |  |           \-> tst.w 78(sp)
    179a:	|  |  |     /-------- beq.w 198e <CstDrawZBuffer+0x4a6>
        {        
          //Get Distance R
          /*sprite  ------------x1++++++++++?????????-------------------------*/    
          //zbuffer ------------------x1+++++++++++++++++++x2-----------------*/             
          
          xdiff = spritex1oncanvas - zbufferx1oncanvas;
    179e:	|  |  |     |         move.w 38(sp),d0
    17a2:	|  |  |     |         sub.w 30(sp),d0
    17a6:	|  |  |     |         move.w d0,22(sp)
          xdiffbyte = (xdiff / 16) * 2;          
    17aa:	|  |  |     |         move.w 22(sp),d0
    17ae:	|  |  |     |         lsr.w #4,d0
    17b0:	|  |  |     |         add.w d0,d0
    17b2:	|  |  |     |         move.w d0,66(sp)
          xdiffrest = xdiff - xdiffbyte * 8;
    17b6:	|  |  |     |         move.w 66(sp),d0
    17ba:	|  |  |     |         lsl.w #3,d0
    17bc:	|  |  |     |         move.w 22(sp),d1
    17c0:	|  |  |     |         sub.w d0,d1
    17c2:	|  |  |     |         move.w d1,20(sp)
          bytewidth, width, rest;


          if( zbufferx2oncanvas > spritex2oncanvas)    
    17c6:	|  |  |     |         move.w 36(sp),d0
    17ca:	|  |  |     |         cmp.w 28(sp),d0
    17ce:	|  |  |     |  /----- bcc.w 18b6 <CstDrawZBuffer+0x3ce>
            //Width       ----------------++++++++++++++++++++++++++++----
            //BWidth      ----------------++++++++++++++++++++++++++++++++
            //ShiftB      ------------------------------------------------

         
            width = spritex2oncanvas - zbufferx1oncanvas;
    17d2:	|  |  |     |  |      move.w 36(sp),d1
    17d6:	|  |  |     |  |      sub.w 30(sp),d1
    17da:	|  |  |     |  |      move.w d1,18(sp)
            bytewidth = (width/16)*2;
    17de:	|  |  |     |  |      move.w 18(sp),d0
    17e2:	|  |  |     |  |      lsr.w #4,d0
    17e4:	|  |  |     |  |      add.w d0,d0
    17e6:	|  |  |     |  |      move.w d0,64(sp)

            WaitBlit();
    17ea:	|  |  |     |  |      move.l 1ca8e <GfxBase>,d0
    17f0:	|  |  |     |  |      movea.l d0,a6
    17f2:	|  |  |     |  |      jsr -228(a6)

            bltapt = zbuffer->bitplane;
    17f6:	|  |  |     |  |      movea.l 88(sp),a0
    17fa:	|  |  |     |  |      move.l 20(a0),d0
    17fe:	|  |  |     |  |      move.l d0,68(sp)
            if( xdiffrest) {
    1802:	|  |  |     |  |      tst.w 20(sp)
    1806:	|  |  |     |  |  /-- beq.s 180c <CstDrawZBuffer+0x324>
              bytewidth += 2;            
    1808:	|  |  |     |  |  |   addq.w #2,64(sp)
            } 

            custom->bltalwm = 0xffff << xdiffrest;
    180c:	|  |  |     |  |  \-> moveq #0,d0
    180e:	|  |  |     |  |      move.w 20(sp),d0
    1812:	|  |  |     |  |      moveq #0,d1
    1814:	|  |  |     |  |      not.w d1
    1816:	|  |  |     |  |      lsl.l d0,d1
    1818:	|  |  |     |  |      move.l d1,d0
    181a:	|  |  |     |  |      movea.l 56(sp),a0
    181e:	|  |  |     |  |      move.w d0,70(a0)
            custom->bltcon0 = xdiffrest * 4096 + 0xd0c;              
    1822:	|  |  |     |  |      move.w 20(sp),d0
    1826:	|  |  |     |  |      moveq #12,d1
    1828:	|  |  |     |  |      lsl.w d1,d0
    182a:	|  |  |     |  |      addi.w #3340,d0
    182e:	|  |  |     |  |      movea.l 56(sp),a0
    1832:	|  |  |     |  |      move.w d0,64(a0)
            custom->bltbpt = returnvalue + xdiffbyte;
    1836:	|  |  |     |  |      moveq #0,d0
    1838:	|  |  |     |  |      move.w 66(sp),d0
    183c:	|  |  |     |  |      add.l 40(sp),d0
    1840:	|  |  |     |  |      movea.l 56(sp),a0
    1844:	|  |  |     |  |      move.l d0,76(a0)
            custom->bltdpt = returnvalue + xdiffbyte;
    1848:	|  |  |     |  |      moveq #0,d0
    184a:	|  |  |     |  |      move.w 66(sp),d0
    184e:	|  |  |     |  |      add.l 40(sp),d0
    1852:	|  |  |     |  |      movea.l 56(sp),a0
    1856:	|  |  |     |  |      move.l d0,84(a0)
            custom->bltafwm = 0xffff;
    185a:	|  |  |     |  |      movea.l 56(sp),a0
    185e:	|  |  |     |  |      move.w #-1,68(a0)
            custom->bltbmod = sprite->width/8 - bytewidth;
    1864:	|  |  |     |  |      movea.l 84(sp),a0
    1868:	|  |  |     |  |      move.l (a0),d0
    186a:	|  |  |     |  |  /-- bpl.s 186e <CstDrawZBuffer+0x386>
    186c:	|  |  |     |  |  |   addq.l #7,d0
    186e:	|  |  |     |  |  \-> asr.l #3,d0
    1870:	|  |  |     |  |      move.l d0,d0
    1872:	|  |  |     |  |      sub.w 64(sp),d0
    1876:	|  |  |     |  |      movea.l 56(sp),a0
    187a:	|  |  |     |  |      move.w d0,98(a0)
            custom->bltamod = zbuffer->width/8 - bytewidth;
    187e:	|  |  |     |  |      movea.l 88(sp),a0
    1882:	|  |  |     |  |      move.l (a0),d0
    1884:	|  |  |     |  |  /-- bpl.s 1888 <CstDrawZBuffer+0x3a0>
    1886:	|  |  |     |  |  |   addq.l #7,d0
    1888:	|  |  |     |  |  \-> asr.l #3,d0
    188a:	|  |  |     |  |      move.l d0,d0
    188c:	|  |  |     |  |      sub.w 64(sp),d0
    1890:	|  |  |     |  |      movea.l 56(sp),a0
    1894:	|  |  |     |  |      move.w d0,100(a0)
            custom->bltdmod = sprite->width/8 - bytewidth;                      
    1898:	|  |  |     |  |      movea.l 84(sp),a0
    189c:	|  |  |     |  |      move.l (a0),d0
    189e:	|  |  |     |  |  /-- bpl.s 18a2 <CstDrawZBuffer+0x3ba>
    18a0:	|  |  |     |  |  |   addq.l #7,d0
    18a2:	|  |  |     |  |  \-> asr.l #3,d0
    18a4:	|  |  |     |  |      move.l d0,d0
    18a6:	|  |  |     |  |      sub.w 64(sp),d0
    18aa:	|  |  |     |  |      movea.l 56(sp),a0
    18ae:	|  |  |     |  |      move.w d0,102(a0)
    18b2:	|  |  |  /--|--|----- bra.w 1c26 <CstDrawZBuffer+0x73e>
            //Bltbpt      ----------------+-------------------------------------------------------------------------------
            //Blbmod      ++++++++++++++++----------------------------------------------------------------++++++++++++++++
            //Width       --------------------++++++++++++++++++++++++++++++++++++++++++++++++++++++++--------------------
            //BWidth      ----------------++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++----------------
         
            width = spritex2oncanvas - zbufferx1oncanvas;
    18b6:	|  |  |  |  |  \----> move.w 36(sp),d0
    18ba:	|  |  |  |  |         sub.w 30(sp),d0
    18be:	|  |  |  |  |         move.w d0,18(sp)
            bytewidth = (width/16)*2;
    18c2:	|  |  |  |  |         move.w 18(sp),d0
    18c6:	|  |  |  |  |         lsr.w #4,d0
    18c8:	|  |  |  |  |         add.w d0,d0
    18ca:	|  |  |  |  |         move.w d0,64(sp)

            WaitBlit();
    18ce:	|  |  |  |  |         move.l 1ca8e <GfxBase>,d0
    18d4:	|  |  |  |  |         movea.l d0,a6
    18d6:	|  |  |  |  |         jsr -228(a6)

            bltapt = zbuffer->bitplane;
    18da:	|  |  |  |  |         movea.l 88(sp),a0
    18de:	|  |  |  |  |         move.l 20(a0),d0
    18e2:	|  |  |  |  |         move.l d0,68(sp)
            if( xdiffrest) {
    18e6:	|  |  |  |  |         tst.w 20(sp)
    18ea:	|  |  |  |  |     /-- beq.s 18f0 <CstDrawZBuffer+0x408>
              bytewidth += 2;            
    18ec:	|  |  |  |  |     |   addq.w #2,64(sp)
            } 

            custom->bltalwm = 0x0;
    18f0:	|  |  |  |  |     \-> movea.l 56(sp),a0
    18f4:	|  |  |  |  |         move.w #0,70(a0)
            custom->bltcon0 = xdiffrest * 4096 + 0xd0c;              
    18fa:	|  |  |  |  |         move.w 20(sp),d0
    18fe:	|  |  |  |  |         moveq #12,d1
    1900:	|  |  |  |  |         lsl.w d1,d0
    1902:	|  |  |  |  |         addi.w #3340,d0
    1906:	|  |  |  |  |         movea.l 56(sp),a0
    190a:	|  |  |  |  |         move.w d0,64(a0)
            custom->bltbpt = returnvalue + xdiffbyte;
    190e:	|  |  |  |  |         moveq #0,d0
    1910:	|  |  |  |  |         move.w 66(sp),d0
    1914:	|  |  |  |  |         add.l 40(sp),d0
    1918:	|  |  |  |  |         movea.l 56(sp),a0
    191c:	|  |  |  |  |         move.l d0,76(a0)
            custom->bltdpt = returnvalue + xdiffbyte;
    1920:	|  |  |  |  |         moveq #0,d0
    1922:	|  |  |  |  |         move.w 66(sp),d0
    1926:	|  |  |  |  |         add.l 40(sp),d0
    192a:	|  |  |  |  |         movea.l 56(sp),a0
    192e:	|  |  |  |  |         move.l d0,84(a0)
            custom->bltafwm = 0xffff;
    1932:	|  |  |  |  |         movea.l 56(sp),a0
    1936:	|  |  |  |  |         move.w #-1,68(a0)
            custom->bltbmod = sprite->width/8 - bytewidth;
    193c:	|  |  |  |  |         movea.l 84(sp),a0
    1940:	|  |  |  |  |         move.l (a0),d0
    1942:	|  |  |  |  |     /-- bpl.s 1946 <CstDrawZBuffer+0x45e>
    1944:	|  |  |  |  |     |   addq.l #7,d0
    1946:	|  |  |  |  |     \-> asr.l #3,d0
    1948:	|  |  |  |  |         move.l d0,d0
    194a:	|  |  |  |  |         sub.w 64(sp),d0
    194e:	|  |  |  |  |         movea.l 56(sp),a0
    1952:	|  |  |  |  |         move.w d0,98(a0)
            custom->bltamod = zbuffer->width/8 - bytewidth;
    1956:	|  |  |  |  |         movea.l 88(sp),a0
    195a:	|  |  |  |  |         move.l (a0),d0
    195c:	|  |  |  |  |     /-- bpl.s 1960 <CstDrawZBuffer+0x478>
    195e:	|  |  |  |  |     |   addq.l #7,d0
    1960:	|  |  |  |  |     \-> asr.l #3,d0
    1962:	|  |  |  |  |         move.l d0,d0
    1964:	|  |  |  |  |         sub.w 64(sp),d0
    1968:	|  |  |  |  |         movea.l 56(sp),a0
    196c:	|  |  |  |  |         move.w d0,100(a0)
            custom->bltdmod = sprite->width/8 - bytewidth;          
    1970:	|  |  |  |  |         movea.l 84(sp),a0
    1974:	|  |  |  |  |         move.l (a0),d0
    1976:	|  |  |  |  |     /-- bpl.s 197a <CstDrawZBuffer+0x492>
    1978:	|  |  |  |  |     |   addq.l #7,d0
    197a:	|  |  |  |  |     \-> asr.l #3,d0
    197c:	|  |  |  |  |         move.l d0,d0
    197e:	|  |  |  |  |         sub.w 64(sp),d0
    1982:	|  |  |  |  |         movea.l 56(sp),a0
    1986:	|  |  |  |  |         move.w d0,102(a0)
    198a:	|  |  |  +--|-------- bra.w 1c26 <CstDrawZBuffer+0x73e>
        {
          //Get Distance R
          /*sprite  ------------RRRRRRRRx1++++++++++?????????------------*/    
          //zbuffer ------------x1+++++++++++++++++++x2-----------------*/                    
          
          xdiff = spritex1oncanvas - zbufferx1oncanvas;
    198e:	|  |  |  |  \-------> move.w 38(sp),d0
    1992:	|  |  |  |            sub.w 30(sp),d0
    1996:	|  |  |  |            move.w d0,22(sp)
          xdiffbyte = (xdiff / 16) * 2;          
    199a:	|  |  |  |            move.w 22(sp),d0
    199e:	|  |  |  |            lsr.w #4,d0
    19a0:	|  |  |  |            add.w d0,d0
    19a2:	|  |  |  |            move.w d0,66(sp)
          xdiffrest = xdiff - xdiffbyte * 8;
    19a6:	|  |  |  |            move.w 66(sp),d0
    19aa:	|  |  |  |            lsl.w #3,d0
    19ac:	|  |  |  |            move.w 22(sp),d1
    19b0:	|  |  |  |            sub.w d0,d1
    19b2:	|  |  |  |            move.w d1,20(sp)
          bytewidth, width, rest;


          if( zbufferx2oncanvas > spritex2oncanvas)    
    19b6:	|  |  |  |            move.w 36(sp),d0
    19ba:	|  |  |  |            cmp.w 28(sp),d0
    19be:	|  |  |  |  /-------- bcc.w 1af6 <CstDrawZBuffer+0x60e>
                            //Data        KKKKKKKKKKKKKKKKCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
                            //BltBpt      +---------------------------------------------------------------
                            //BlBmod      NNNNNNNNNNNNNNNN------------------------------------------------
                            //ShiftB      ----------------------------------------------------------------
         
            width = spritex2oncanvas - spritex1oncanvas; 
    19c2:	|  |  |  |  |         move.w 36(sp),d1
    19c6:	|  |  |  |  |         sub.w 38(sp),d1
    19ca:	|  |  |  |  |         move.w d1,18(sp)
            bytewidth = (width/16)*2;
    19ce:	|  |  |  |  |         move.w 18(sp),d0
    19d2:	|  |  |  |  |         lsr.w #4,d0
    19d4:	|  |  |  |  |         add.w d0,d0
    19d6:	|  |  |  |  |         move.w d0,64(sp)

            WaitBlit();
    19da:	|  |  |  |  |         move.l 1ca8e <GfxBase>,d0
    19e0:	|  |  |  |  |         movea.l d0,a6
    19e2:	|  |  |  |  |         jsr -228(a6)

            bltapt = zbuffer->bitplane + xdiffbyte;
    19e6:	|  |  |  |  |         movea.l 88(sp),a0
    19ea:	|  |  |  |  |         move.l 20(a0),d1
    19ee:	|  |  |  |  |         moveq #0,d0
    19f0:	|  |  |  |  |         move.w 66(sp),d0
    19f4:	|  |  |  |  |         add.l d1,d0
    19f6:	|  |  |  |  |         move.l d0,68(sp)
            if( xdiffrest) {
    19fa:	|  |  |  |  |         tst.w 20(sp)
    19fe:	|  |  |  |  |  /----- beq.s 1a6e <CstDrawZBuffer+0x586>
              bytewidth += 2;
    1a00:	|  |  |  |  |  |      addq.w #2,64(sp)
              //bltapt += -2;
              custom->bltcon0 = (16 - xdiffrest) * 4096 + 0xdcc;
    1a04:	|  |  |  |  |  |      moveq #0,d0
    1a06:	|  |  |  |  |  |      move.w 20(sp),d0
    1a0a:	|  |  |  |  |  |      moveq #16,d1
    1a0c:	|  |  |  |  |  |      sub.l d0,d1
    1a0e:	|  |  |  |  |  |      move.l d1,d0
    1a10:	|  |  |  |  |  |      moveq #12,d1
    1a12:	|  |  |  |  |  |      lsl.w d1,d0
    1a14:	|  |  |  |  |  |      addi.w #3532,d0
    1a18:	|  |  |  |  |  |      movea.l 56(sp),a0
    1a1c:	|  |  |  |  |  |      move.w d0,64(a0)
              custom->bltafwm = 0xffff >> xdiffrest;
    1a20:	|  |  |  |  |  |      moveq #0,d0
    1a22:	|  |  |  |  |  |      move.w 20(sp),d0
    1a26:	|  |  |  |  |  |      moveq #0,d1
    1a28:	|  |  |  |  |  |      not.w d1
    1a2a:	|  |  |  |  |  |      asr.l d0,d1
    1a2c:	|  |  |  |  |  |      move.l d1,d0
    1a2e:	|  |  |  |  |  |      movea.l 56(sp),a0
    1a32:	|  |  |  |  |  |      move.w d0,68(a0)
              custom->bltalwm = 0xffff << (16 - xdiffrest);
    1a36:	|  |  |  |  |  |      moveq #0,d0
    1a38:	|  |  |  |  |  |      move.w 20(sp),d0
    1a3c:	|  |  |  |  |  |      moveq #16,d1
    1a3e:	|  |  |  |  |  |      sub.l d0,d1
    1a40:	|  |  |  |  |  |      moveq #0,d0
    1a42:	|  |  |  |  |  |      not.w d0
    1a44:	|  |  |  |  |  |      lsl.l d1,d0
    1a46:	|  |  |  |  |  |      move.l d0,d0
    1a48:	|  |  |  |  |  |      movea.l 56(sp),a0
    1a4c:	|  |  |  |  |  |      move.w d0,70(a0)
              custom->bltbpt = returnvalue - 2;
    1a50:	|  |  |  |  |  |      move.l 40(sp),d0
    1a54:	|  |  |  |  |  |      subq.l #2,d0
    1a56:	|  |  |  |  |  |      movea.l 56(sp),a0
    1a5a:	|  |  |  |  |  |      move.l d0,76(a0)
              custom->bltdpt = returnvalue - 2;
    1a5e:	|  |  |  |  |  |      move.l 40(sp),d0
    1a62:	|  |  |  |  |  |      subq.l #2,d0
    1a64:	|  |  |  |  |  |      movea.l 56(sp),a0
    1a68:	|  |  |  |  |  |      move.l d0,84(a0)
    1a6c:	|  |  |  |  |  |  /-- bra.s 1aa4 <CstDrawZBuffer+0x5bc>
            } else {
              bytewidth += 2;
    1a6e:	|  |  |  |  |  \--|-> addq.w #2,64(sp)
              custom->bltcon0 = 0xd0c;
    1a72:	|  |  |  |  |     |   movea.l 56(sp),a0
    1a76:	|  |  |  |  |     |   move.w #3340,64(a0)
              custom->bltafwm = 0xffff;
    1a7c:	|  |  |  |  |     |   movea.l 56(sp),a0
    1a80:	|  |  |  |  |     |   move.w #-1,68(a0)
              custom->bltalwm = 0xffff;
    1a86:	|  |  |  |  |     |   movea.l 56(sp),a0
    1a8a:	|  |  |  |  |     |   move.w #-1,70(a0)
              custom->bltbpt = returnvalue;
    1a90:	|  |  |  |  |     |   movea.l 56(sp),a0
    1a94:	|  |  |  |  |     |   move.l 40(sp),76(a0)
              custom->bltdpt = returnvalue;
    1a9a:	|  |  |  |  |     |   movea.l 56(sp),a0
    1a9e:	|  |  |  |  |     |   move.l 40(sp),84(a0)
            }

            custom->bltbmod = sprite->width/8 - bytewidth;
    1aa4:	|  |  |  |  |     \-> movea.l 84(sp),a0
    1aa8:	|  |  |  |  |         move.l (a0),d0
    1aaa:	|  |  |  |  |     /-- bpl.s 1aae <CstDrawZBuffer+0x5c6>
    1aac:	|  |  |  |  |     |   addq.l #7,d0
    1aae:	|  |  |  |  |     \-> asr.l #3,d0
    1ab0:	|  |  |  |  |         move.l d0,d0
    1ab2:	|  |  |  |  |         sub.w 64(sp),d0
    1ab6:	|  |  |  |  |         movea.l 56(sp),a0
    1aba:	|  |  |  |  |         move.w d0,98(a0)
            custom->bltamod = zbuffer->width/8 - bytewidth;
    1abe:	|  |  |  |  |         movea.l 88(sp),a0
    1ac2:	|  |  |  |  |         move.l (a0),d0
    1ac4:	|  |  |  |  |     /-- bpl.s 1ac8 <CstDrawZBuffer+0x5e0>
    1ac6:	|  |  |  |  |     |   addq.l #7,d0
    1ac8:	|  |  |  |  |     \-> asr.l #3,d0
    1aca:	|  |  |  |  |         move.l d0,d0
    1acc:	|  |  |  |  |         sub.w 64(sp),d0
    1ad0:	|  |  |  |  |         movea.l 56(sp),a0
    1ad4:	|  |  |  |  |         move.w d0,100(a0)
            custom->bltdmod = sprite->width/8 - bytewidth;                      
    1ad8:	|  |  |  |  |         movea.l 84(sp),a0
    1adc:	|  |  |  |  |         move.l (a0),d0
    1ade:	|  |  |  |  |     /-- bpl.s 1ae2 <CstDrawZBuffer+0x5fa>
    1ae0:	|  |  |  |  |     |   addq.l #7,d0
    1ae2:	|  |  |  |  |     \-> asr.l #3,d0
    1ae4:	|  |  |  |  |         move.l d0,d0
    1ae6:	|  |  |  |  |         sub.w 64(sp),d0
    1aea:	|  |  |  |  |         movea.l 56(sp),a0
    1aee:	|  |  |  |  |         move.w d0,102(a0)
    1af2:	|  |  |  +--|-------- bra.w 1c26 <CstDrawZBuffer+0x73e>
                            //Data        KKKKKKKKKKKKKKKKCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
                            //BltBpt      +---------------------------------------------------------------
                            //BlBmod      NNNNNNNNNNNNNNNN------------------------------------------------
                            //ShiftB      ----------------------------------------------------------------
         
            width = zbufferx2oncanvas - spritex1oncanvas; 
    1af6:	|  |  |  |  \-------> move.w 28(sp),d0
    1afa:	|  |  |  |            sub.w 38(sp),d0
    1afe:	|  |  |  |            move.w d0,18(sp)
            bytewidth = (width/16)*2;
    1b02:	|  |  |  |            move.w 18(sp),d0
    1b06:	|  |  |  |            lsr.w #4,d0
    1b08:	|  |  |  |            add.w d0,d0
    1b0a:	|  |  |  |            move.w d0,64(sp)

            WaitBlit();
    1b0e:	|  |  |  |            move.l 1ca8e <GfxBase>,d0
    1b14:	|  |  |  |            movea.l d0,a6
    1b16:	|  |  |  |            jsr -228(a6)

            bltapt = zbuffer->bitplane + xdiffbyte;
    1b1a:	|  |  |  |            movea.l 88(sp),a0
    1b1e:	|  |  |  |            move.l 20(a0),d1
    1b22:	|  |  |  |            moveq #0,d0
    1b24:	|  |  |  |            move.w 66(sp),d0
    1b28:	|  |  |  |            add.l d1,d0
    1b2a:	|  |  |  |            move.l d0,68(sp)
            if( xdiffrest) {
    1b2e:	|  |  |  |            tst.w 20(sp)
    1b32:	|  |  |  |     /----- beq.s 1ba2 <CstDrawZBuffer+0x6ba>
              bytewidth += 2;
    1b34:	|  |  |  |     |      addq.w #2,64(sp)
              //bltapt += -2;
              custom->bltcon0 = (16 - xdiffrest) * 4096 + 0xdcc;
    1b38:	|  |  |  |     |      moveq #0,d0
    1b3a:	|  |  |  |     |      move.w 20(sp),d0
    1b3e:	|  |  |  |     |      moveq #16,d1
    1b40:	|  |  |  |     |      sub.l d0,d1
    1b42:	|  |  |  |     |      move.l d1,d0
    1b44:	|  |  |  |     |      moveq #12,d1
    1b46:	|  |  |  |     |      lsl.w d1,d0
    1b48:	|  |  |  |     |      addi.w #3532,d0
    1b4c:	|  |  |  |     |      movea.l 56(sp),a0
    1b50:	|  |  |  |     |      move.w d0,64(a0)
              custom->bltafwm = 0xffff >> xdiffrest;
    1b54:	|  |  |  |     |      moveq #0,d0
    1b56:	|  |  |  |     |      move.w 20(sp),d0
    1b5a:	|  |  |  |     |      moveq #0,d1
    1b5c:	|  |  |  |     |      not.w d1
    1b5e:	|  |  |  |     |      asr.l d0,d1
    1b60:	|  |  |  |     |      move.l d1,d0
    1b62:	|  |  |  |     |      movea.l 56(sp),a0
    1b66:	|  |  |  |     |      move.w d0,68(a0)
              custom->bltalwm = 0xffff << (16 - xdiffrest);
    1b6a:	|  |  |  |     |      moveq #0,d0
    1b6c:	|  |  |  |     |      move.w 20(sp),d0
    1b70:	|  |  |  |     |      moveq #16,d1
    1b72:	|  |  |  |     |      sub.l d0,d1
    1b74:	|  |  |  |     |      moveq #0,d0
    1b76:	|  |  |  |     |      not.w d0
    1b78:	|  |  |  |     |      lsl.l d1,d0
    1b7a:	|  |  |  |     |      move.l d0,d0
    1b7c:	|  |  |  |     |      movea.l 56(sp),a0
    1b80:	|  |  |  |     |      move.w d0,70(a0)
              custom->bltbpt = returnvalue - 2;
    1b84:	|  |  |  |     |      move.l 40(sp),d0
    1b88:	|  |  |  |     |      subq.l #2,d0
    1b8a:	|  |  |  |     |      movea.l 56(sp),a0
    1b8e:	|  |  |  |     |      move.l d0,76(a0)
              custom->bltdpt = returnvalue - 2;
    1b92:	|  |  |  |     |      move.l 40(sp),d0
    1b96:	|  |  |  |     |      subq.l #2,d0
    1b98:	|  |  |  |     |      movea.l 56(sp),a0
    1b9c:	|  |  |  |     |      move.l d0,84(a0)
    1ba0:	|  |  |  |     |  /-- bra.s 1bd8 <CstDrawZBuffer+0x6f0>
            } else {
              bytewidth += 2;
    1ba2:	|  |  |  |     \--|-> addq.w #2,64(sp)
              custom->bltcon0 = 0xd0c;
    1ba6:	|  |  |  |        |   movea.l 56(sp),a0
    1baa:	|  |  |  |        |   move.w #3340,64(a0)
              custom->bltafwm = 0xffff;
    1bb0:	|  |  |  |        |   movea.l 56(sp),a0
    1bb4:	|  |  |  |        |   move.w #-1,68(a0)
              custom->bltalwm = 0xffff;
    1bba:	|  |  |  |        |   movea.l 56(sp),a0
    1bbe:	|  |  |  |        |   move.w #-1,70(a0)
              custom->bltbpt = returnvalue;
    1bc4:	|  |  |  |        |   movea.l 56(sp),a0
    1bc8:	|  |  |  |        |   move.l 40(sp),76(a0)
              custom->bltdpt = returnvalue;
    1bce:	|  |  |  |        |   movea.l 56(sp),a0
    1bd2:	|  |  |  |        |   move.l 40(sp),84(a0)
            }

            custom->bltbmod = sprite->width/8 - bytewidth;
    1bd8:	|  |  |  |        \-> movea.l 84(sp),a0
    1bdc:	|  |  |  |            move.l (a0),d0
    1bde:	|  |  |  |        /-- bpl.s 1be2 <CstDrawZBuffer+0x6fa>
    1be0:	|  |  |  |        |   addq.l #7,d0
    1be2:	|  |  |  |        \-> asr.l #3,d0
    1be4:	|  |  |  |            move.l d0,d0
    1be6:	|  |  |  |            sub.w 64(sp),d0
    1bea:	|  |  |  |            movea.l 56(sp),a0
    1bee:	|  |  |  |            move.w d0,98(a0)
            custom->bltamod = zbuffer->width/8 - bytewidth;
    1bf2:	|  |  |  |            movea.l 88(sp),a0
    1bf6:	|  |  |  |            move.l (a0),d0
    1bf8:	|  |  |  |        /-- bpl.s 1bfc <CstDrawZBuffer+0x714>
    1bfa:	|  |  |  |        |   addq.l #7,d0
    1bfc:	|  |  |  |        \-> asr.l #3,d0
    1bfe:	|  |  |  |            move.l d0,d0
    1c00:	|  |  |  |            sub.w 64(sp),d0
    1c04:	|  |  |  |            movea.l 56(sp),a0
    1c08:	|  |  |  |            move.w d0,100(a0)
            custom->bltdmod = sprite->width/8 - bytewidth;                                
    1c0c:	|  |  |  |            movea.l 84(sp),a0
    1c10:	|  |  |  |            move.l (a0),d0
    1c12:	|  |  |  |        /-- bpl.s 1c16 <CstDrawZBuffer+0x72e>
    1c14:	|  |  |  |        |   addq.l #7,d0
    1c16:	|  |  |  |        \-> asr.l #3,d0
    1c18:	|  |  |  |            move.l d0,d0
    1c1a:	|  |  |  |            sub.w 64(sp),d0
    1c1e:	|  |  |  |            movea.l 56(sp),a0
    1c22:	|  |  |  |            move.w d0,102(a0)
          }                    
        } 
        
        if(zbufferfromtop)
    1c26:	|  |  |  \----------> tst.w 72(sp)
    1c2a:	|  |  |     /-------- beq.w 1cb2 <CstDrawZBuffer+0x7ca>
          {
            //Get Distance R
            //zbuffer ------------x1+++++++++++++++++++x2-----------------*/
            /*sprite--------------RRRRRRRRx1++++++++++?????????------------*/    
            UWORD ydiff = spritey1oncanvas - zbuffery1oncanvas;
    1c2e:	|  |  |     |         move.w 34(sp),d0
    1c32:	|  |  |     |         sub.w 26(sp),d0
    1c36:	|  |  |     |         move.w d0,14(sp)

            UWORD height;
            if( zbuffery2oncanvas > spritey2oncanvas) 
    1c3a:	|  |  |     |         move.w 32(sp),d1
    1c3e:	|  |  |     |         cmp.w 24(sp),d1
    1c42:	|  |  |     |  /----- bcc.s 1c52 <CstDrawZBuffer+0x76a>
              height = sprite->height;
    1c44:	|  |  |     |  |      movea.l 84(sp),a0
    1c48:	|  |  |     |  |      move.l 4(a0),d0
    1c4c:	|  |  |     |  |      move.w d0,62(sp)
    1c50:	|  |  |     |  |  /-- bra.s 1c5e <CstDrawZBuffer+0x776>
            else
              height = zbuffery2oncanvas - spritey1oncanvas;
    1c52:	|  |  |     |  \--|-> move.w 24(sp),d0
    1c56:	|  |  |     |     |   sub.w 34(sp),d0
    1c5a:	|  |  |     |     |   move.w d0,62(sp)

            WaitBlit();
    1c5e:	|  |  |     |     \-> move.l 1ca8e <GfxBase>,d0
    1c64:	|  |  |     |         movea.l d0,a6
    1c66:	|  |  |     |         jsr -228(a6)

            custom->bltapt = bltapt + ydiff*zbuffer->width/8;            
    1c6a:	|  |  |     |         moveq #0,d0
    1c6c:	|  |  |     |         move.w 14(sp),d0
    1c70:	|  |  |     |         movea.l 88(sp),a0
    1c74:	|  |  |     |         move.l (a0),d1
    1c76:	|  |  |     |         move.l d1,-(sp)
    1c78:	|  |  |     |         move.l d0,-(sp)
    1c7a:	|  |  |     |         jsr 17d1a <__mulsi3>
    1c80:	|  |  |     |         addq.l #8,sp
    1c82:	|  |  |     |         tst.l d0
    1c84:	|  |  |     |     /-- bge.s 1c88 <CstDrawZBuffer+0x7a0>
    1c86:	|  |  |     |     |   addq.l #7,d0
    1c88:	|  |  |     |     \-> asr.l #3,d0
    1c8a:	|  |  |     |         add.l 68(sp),d0
    1c8e:	|  |  |     |         movea.l 56(sp),a0
    1c92:	|  |  |     |         move.l d0,80(a0)
            custom->bltsize = height*64+bytewidth/2;
    1c96:	|  |  |     |         move.w 62(sp),d0
    1c9a:	|  |  |     |         move.w d0,d1
    1c9c:	|  |  |     |         lsl.w #6,d1
    1c9e:	|  |  |     |         move.w 64(sp),d0
    1ca2:	|  |  |     |         lsr.w #1,d0
    1ca4:	|  |  |     |         add.w d1,d0
    1ca6:	|  |  |     |         movea.l 56(sp),a0
    1caa:	|  |  |     |         move.w d0,88(a0)
    1cae:	|  |  +-----|-------- bra.w 1d66 <CstDrawZBuffer+0x87e>
          //Zbufferfrombottom
          {
           //Get Distance R
            //sprite ------------x1+++++++++++++++++++x2-----------------*/
            /*zbuffer------------RRRRRRRRx1++++++++++?????????------------*/    
            UWORD ydiff = zbuffery1oncanvas - spritey1oncanvas; 
    1cb2:	|  |  |     \-------> move.w 26(sp),d1
    1cb6:	|  |  |               sub.w 34(sp),d1
    1cba:	|  |  |               move.w d1,16(sp)

            UWORD height;
            if( zbuffery2oncanvas > spritey2oncanvas) 
    1cbe:	|  |  |               move.w 32(sp),d0
    1cc2:	|  |  |               cmp.w 24(sp),d0
    1cc6:	|  |  |        /----- bcc.s 1cd6 <CstDrawZBuffer+0x7ee>
              height = spritey2oncanvas - zbuffery1oncanvas; 
    1cc8:	|  |  |        |      move.w 32(sp),d1
    1ccc:	|  |  |        |      sub.w 26(sp),d1
    1cd0:	|  |  |        |      move.w d1,60(sp)
    1cd4:	|  |  |        |  /-- bra.s 1ce2 <CstDrawZBuffer+0x7fa>
            else
              height = zbuffer->height;
    1cd6:	|  |  |        \--|-> movea.l 88(sp),a0
    1cda:	|  |  |           |   move.l 4(a0),d0
    1cde:	|  |  |           |   move.w d0,60(sp)

            WaitBlit();
    1ce2:	|  |  |           \-> move.l 1ca8e <GfxBase>,d0
    1ce8:	|  |  |               movea.l d0,a6
    1cea:	|  |  |               jsr -228(a6)

            custom->bltbpt = returnvalue+xdiffbyte+ydiff*sprite->width/8;            
    1cee:	|  |  |               moveq #0,d2
    1cf0:	|  |  |               move.w 66(sp),d2
    1cf4:	|  |  |               moveq #0,d0
    1cf6:	|  |  |               move.w 16(sp),d0
    1cfa:	|  |  |               movea.l 84(sp),a0
    1cfe:	|  |  |               move.l (a0),d1
    1d00:	|  |  |               move.l d1,-(sp)
    1d02:	|  |  |               move.l d0,-(sp)
    1d04:	|  |  |               jsr 17d1a <__mulsi3>
    1d0a:	|  |  |               addq.l #8,sp
    1d0c:	|  |  |               tst.l d0
    1d0e:	|  |  |           /-- bge.s 1d12 <CstDrawZBuffer+0x82a>
    1d10:	|  |  |           |   addq.l #7,d0
    1d12:	|  |  |           \-> asr.l #3,d0
    1d14:	|  |  |               add.l d2,d0
    1d16:	|  |  |               add.l 40(sp),d0
    1d1a:	|  |  |               movea.l 56(sp),a0
    1d1e:	|  |  |               move.l d0,76(a0)
            custom->bltdpt = returnvalue+xdiffbyte+ydiff*sprite->width;          
    1d22:	|  |  |               moveq #0,d2
    1d24:	|  |  |               move.w 66(sp),d2
    1d28:	|  |  |               moveq #0,d0
    1d2a:	|  |  |               move.w 16(sp),d0
    1d2e:	|  |  |               movea.l 84(sp),a0
    1d32:	|  |  |               move.l (a0),d1
    1d34:	|  |  |               move.l d1,-(sp)
    1d36:	|  |  |               move.l d0,-(sp)
    1d38:	|  |  |               jsr 17d1a <__mulsi3>
    1d3e:	|  |  |               addq.l #8,sp
    1d40:	|  |  |               add.l d2,d0
    1d42:	|  |  |               add.l 40(sp),d0
    1d46:	|  |  |               movea.l 56(sp),a0
    1d4a:	|  |  |               move.l d0,84(a0)
            custom->bltsize = height*64+bytewidth/2;
    1d4e:	|  |  |               move.w 60(sp),d0
    1d52:	|  |  |               move.w d0,d1
    1d54:	|  |  |               lsl.w #6,d1
    1d56:	|  |  |               move.w 64(sp),d0
    1d5a:	|  |  |               lsr.w #1,d0
    1d5c:	|  |  |               add.w d1,d0
    1d5e:	|  |  |               movea.l 56(sp),a0
    1d62:	|  |  |               move.w d0,88(a0)
          }   
      }
      zbuffer = zbuffer->nextPanel;
    1d66:	|  |  \-------------> movea.l 88(sp),a0
    1d6a:	|  |                  move.l 24(a0),88(sp)
  while(zbuffer) 
    1d70:	|  \----------------> tst.l 88(sp)
    1d74:	\-------------------- bne.w 166e <CstDrawZBuffer+0x186>
    }
  }

  return returnvalue;
    1d78:	                      move.l 40(sp),d0

}
    1d7c:	                      move.l (sp)+,d2
    1d7e:	                      movea.l (sp)+,a6
    1d80:	                      lea 72(sp),sp
    1d84:	                      rts

00001d86 <CstFreeBuffer>:

void CstFreeBuffer( ) {
    1d86:	    lea -20(sp),sp
    1d8a:	    move.l a6,-(sp)
  if( CstDrawBuffer) FreeVec(CstDrawBuffer);
    1d8c:	    move.l 1c9b6 <CstDrawBuffer>,d0
    1d92:	/-- beq.s 1dac <CstFreeBuffer+0x26>
    1d94:	|   move.l 1c9b6 <CstDrawBuffer>,20(sp)
    1d9c:	|   move.l 1ca82 <SysBase>,d0
    1da2:	|   movea.l d0,a6
    1da4:	|   movea.l 20(sp),a1
    1da8:	|   jsr -690(a6)
  if( CstViewBuffer) FreeVec(CstViewBuffer);
    1dac:	\-> move.l 1c9b2 <CstViewBuffer>,d0
    1db2:	/-- beq.s 1dcc <CstFreeBuffer+0x46>
    1db4:	|   move.l 1c9b2 <CstViewBuffer>,16(sp)
    1dbc:	|   move.l 1ca82 <SysBase>,d0
    1dc2:	|   movea.l d0,a6
    1dc4:	|   movea.l 16(sp),a1
    1dc8:	|   jsr -690(a6)
  if( CstCopperList) FreeVec(CstCopperList);  
    1dcc:	\-> move.l 1c9ac <CstCopperList>,d0
    1dd2:	/-- beq.s 1dec <CstFreeBuffer+0x66>
    1dd4:	|   move.l 1c9ac <CstCopperList>,12(sp)
    1ddc:	|   move.l 1ca82 <SysBase>,d0
    1de2:	|   movea.l d0,a6
    1de4:	|   movea.l 12(sp),a1
    1de8:	|   jsr -690(a6)
  if( CstBackDrop) FreeVec(CstBackDrop);  
    1dec:	\-> move.l 1c9a4 <CstBackDrop>,d0
    1df2:	/-- beq.s 1e0c <CstFreeBuffer+0x86>
    1df4:	|   move.l 1c9a4 <CstBackDrop>,8(sp)
    1dfc:	|   move.l 1ca82 <SysBase>,d0
    1e02:	|   movea.l d0,a6
    1e04:	|   movea.l 8(sp),a1
    1e08:	|   jsr -690(a6)
  if( CstBackDropBackup) FreeVec(CstBackDropBackup);
    1e0c:	\-> move.l 1c9a8 <CstBackDropBackup>,d0
    1e12:	/-- beq.s 1e2c <CstFreeBuffer+0xa6>
    1e14:	|   move.l 1c9a8 <CstBackDropBackup>,4(sp)
    1e1c:	|   move.l 1ca82 <SysBase>,d0
    1e22:	|   movea.l d0,a6
    1e24:	|   movea.l 4(sp),a1
    1e28:	|   jsr -690(a6)
  CstDrawBuffer = NULL;
    1e2c:	\-> clr.l 1c9b6 <CstDrawBuffer>
  CstViewBuffer = NULL;
    1e32:	    clr.l 1c9b2 <CstViewBuffer>
  CstCopperList = NULL;
    1e38:	    clr.l 1c9ac <CstCopperList>
  CstBackDrop = NULL;
    1e3e:	    clr.l 1c9a4 <CstBackDrop>

}
    1e44:	    nop
    1e46:	    movea.l (sp)+,a6
    1e48:	    lea 20(sp),sp
    1e4c:	    rts

00001e4e <CstFreeze>:



void CstFreeze( ) {
    1e4e:	       lea -36(sp),sp
    1e52:	       move.l a6,-(sp)
    1e54:	       move.l d2,-(sp)

	KPrintF("CstFreeze: Freezing Background Started");  
    1e56:	       pea 17fa0 <PutChar+0x170>
    1e5c:	       jsr 17366 <KPrintF>
    1e62:	       addq.l #4,sp

  UWORD size = winWidth/8*winHeight*5;
    1e64:	       move.l 1c9d6 <winWidth>,d0
    1e6a:	       lsr.l #3,d0
    1e6c:	       move.l d0,d1
    1e6e:	       move.l 1c9da <winHeight>,d0
    1e74:	       move.l d0,d0
    1e76:	       muls.w d0,d1
    1e78:	       move.w d1,d0
    1e7a:	       add.w d0,d0
    1e7c:	       add.w d0,d0
    1e7e:	       move.w d0,d2
    1e80:	       add.w d1,d2
    1e82:	       move.w d2,26(sp)

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    1e86:	       move.l #14675968,22(sp)

  //Backup Existing Backdrop to save location
  CstBackDropBackup = AllocVec(size, MEMF_ANY);
    1e8e:	       moveq #0,d0
    1e90:	       move.w 26(sp),d0
    1e94:	       move.l d0,18(sp)
    1e98:	       clr.l 14(sp)
    1e9c:	       move.l 1ca82 <SysBase>,d0
    1ea2:	       movea.l d0,a6
    1ea4:	       move.l 18(sp),d0
    1ea8:	       move.l 14(sp),d1
    1eac:	       jsr -684(a6)
    1eb0:	       move.l d0,10(sp)
    1eb4:	       move.l 10(sp),d0
    1eb8:	       move.l d0,1c9a8 <CstBackDropBackup>
  if( !CstBackDropBackup)
    1ebe:	       move.l 1c9a8 <CstBackDropBackup>,d0
    1ec4:	   /-- bne.s 1ed4 <CstFreeze+0x86>
  {
    KPrintF("CstFreeze: Cannot allocate Memory for CstBackDropBackup");
    1ec6:	   |   pea 17fc7 <PutChar+0x197>
    1ecc:	   |   jsr 17366 <KPrintF>
    1ed2:	   |   addq.l #4,sp
  }

#ifdef EMULATOR
  debug_register_bitmap(CstBackDropBackup, "BackDropBackup", winWidth, winHeight, 5, 0);
    1ed4:	   \-> move.l 1c9da <winHeight>,d0
    1eda:	       move.l d0,d0
    1edc:	       movea.w d0,a1
    1ede:	       move.l 1c9d6 <winWidth>,d0
    1ee4:	       move.l d0,d0
    1ee6:	       movea.w d0,a0
    1ee8:	       move.l 1c9a8 <CstBackDropBackup>,d0
    1eee:	       clr.l -(sp)
    1ef0:	       pea 5 <_start+0x5>
    1ef4:	       move.l a1,-(sp)
    1ef6:	       move.l a0,-(sp)
    1ef8:	       pea 17fff <PutChar+0x1cf>
    1efe:	       move.l d0,-(sp)
    1f00:	       jsr 1744e <debug_register_bitmap>
    1f06:	       lea 24(sp),sp
#endif  

  ULONG *src = (ULONG *) CstBackDrop;
    1f0a:	       move.l 1c9a4 <CstBackDrop>,40(sp)
  ULONG *dst = (ULONG *) CstBackDropBackup;
    1f12:	       move.l 1c9a8 <CstBackDropBackup>,36(sp)
  for(int i=0;i<size/4;i++) 
    1f1a:	       clr.l 32(sp)
    1f1e:	   /-- bra.s 1f44 <CstFreeze+0xf6>
  {
    *dst++ = *src++;
    1f20:	/--|-> move.l 40(sp),d1
    1f24:	|  |   move.l d1,d0
    1f26:	|  |   addq.l #4,d0
    1f28:	|  |   move.l d0,40(sp)
    1f2c:	|  |   move.l 36(sp),d0
    1f30:	|  |   move.l d0,d2
    1f32:	|  |   addq.l #4,d2
    1f34:	|  |   move.l d2,36(sp)
    1f38:	|  |   movea.l d1,a0
    1f3a:	|  |   move.l (a0),d1
    1f3c:	|  |   movea.l d0,a0
    1f3e:	|  |   move.l d1,(a0)
  for(int i=0;i<size/4;i++) 
    1f40:	|  |   addq.l #1,32(sp)
    1f44:	|  \-> move.w 26(sp),d0
    1f48:	|      lsr.w #2,d0
    1f4a:	|      move.w d0,d0
    1f4c:	|      andi.l #65535,d0
    1f52:	|      cmp.l 32(sp),d0
    1f56:	\----- bgt.s 1f20 <CstFreeze+0xd2>
  }

  //Replace existing Backdrop with ViewBuffer
  src = (ULONG *) CstViewBuffer;
    1f58:	       move.l 1c9b2 <CstViewBuffer>,40(sp)
  dst = (ULONG *) CstBackDrop;
    1f60:	       move.l 1c9a4 <CstBackDrop>,36(sp)

  for(int i=0;i<size/4;i++) 
    1f68:	       clr.l 28(sp)
    1f6c:	   /-- bra.s 1f92 <CstFreeze+0x144>
  {
    *dst++ = *src++;
    1f6e:	/--|-> move.l 40(sp),d1
    1f72:	|  |   move.l d1,d0
    1f74:	|  |   addq.l #4,d0
    1f76:	|  |   move.l d0,40(sp)
    1f7a:	|  |   move.l 36(sp),d0
    1f7e:	|  |   move.l d0,d2
    1f80:	|  |   addq.l #4,d2
    1f82:	|  |   move.l d2,36(sp)
    1f86:	|  |   movea.l d1,a0
    1f88:	|  |   move.l (a0),d1
    1f8a:	|  |   movea.l d0,a0
    1f8c:	|  |   move.l d1,(a0)
  for(int i=0;i<size/4;i++) 
    1f8e:	|  |   addq.l #1,28(sp)
    1f92:	|  \-> move.w 26(sp),d0
    1f96:	|      lsr.w #2,d0
    1f98:	|      move.w d0,d0
    1f9a:	|      andi.l #65535,d0
    1fa0:	|      cmp.l 28(sp),d0
    1fa4:	\----- bgt.s 1f6e <CstFreeze+0x120>
  }

  CstApplyBackDropCounter = 2;
    1fa6:	       move.w #2,1c9b0 <CstApplyBackDropCounter>

  *CstBackDropBufferApplyCursor++ = winWidth/16;
    1fae:	       move.l 1c9d6 <winWidth>,d0
    1fb4:	       lsr.l #4,d0
    1fb6:	       movea.l 1c9c6 <CstBackDropBufferApplyCursor>,a0
    1fbc:	       move.l a0,d1
    1fbe:	       addq.l #2,d1
    1fc0:	       move.l d1,1c9c6 <CstBackDropBufferApplyCursor>
    1fc6:	       move.l d0,d0
    1fc8:	       move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = winHeight;
    1fca:	       move.l 1c9da <winHeight>,d0
    1fd0:	       movea.l 1c9c6 <CstBackDropBufferApplyCursor>,a0
    1fd6:	       move.l a0,d1
    1fd8:	       addq.l #2,d1
    1fda:	       move.l d1,1c9c6 <CstBackDropBufferApplyCursor>
    1fe0:	       move.l d0,d0
    1fe2:	       move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = 0;
    1fe4:	       movea.l 1c9c6 <CstBackDropBufferApplyCursor>,a0
    1fea:	       move.l a0,d0
    1fec:	       addq.l #2,d0
    1fee:	       move.l d0,1c9c6 <CstBackDropBufferApplyCursor>
    1ff4:	       clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    1ff6:	       movea.l 1c9c6 <CstBackDropBufferApplyCursor>,a0
    1ffc:	       move.l a0,d0
    1ffe:	       addq.l #2,d0
    2000:	       move.l d0,1c9c6 <CstBackDropBufferApplyCursor>
    2006:	       clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    2008:	       movea.l 1c9c6 <CstBackDropBufferApplyCursor>,a0
    200e:	       move.l a0,d0
    2010:	       addq.l #2,d0
    2012:	       move.l d0,1c9c6 <CstBackDropBufferApplyCursor>
    2018:	       clr.w (a0)

  KPrintF("CstFreeze: Finished");
    201a:	       pea 1800e <PutChar+0x1de>
    2020:	       jsr 17366 <KPrintF>
    2026:	       addq.l #4,sp

}  
    2028:	       nop
    202a:	       move.l (sp)+,d2
    202c:	       movea.l (sp)+,a6
    202e:	       lea 36(sp),sp
    2032:	       rts

00002034 <CstLoadBackdrop>:

void CstLoadBackdrop( BPTR fp, int x, int y) {
    2034:	             lea -144(sp),sp
    2038:	             movem.l d2-d4/a6,-(sp)

	KPrintF("CstLoadBackDrop: Loading of Background started");
    203c:	             pea 18022 <PutChar+0x1f2>
    2042:	             jsr 17366 <KPrintF>
    2048:	             addq.l #4,sp

  UWORD width = get2bytes(fp);
    204a:	             move.l 164(sp),-(sp)
    204e:	             jsr 6bc <get2bytes>
    2054:	             addq.l #4,sp
    2056:	             move.w d0,134(sp)
  UWORD height = get2bytes(fp);  
    205a:	             move.l 164(sp),-(sp)
    205e:	             jsr 6bc <get2bytes>
    2064:	             addq.l #4,sp
    2066:	             move.w d0,132(sp)

  UWORD widthbyteslayer = width/8;
    206a:	             move.w 134(sp),d0
    206e:	             lsr.w #3,d0
    2070:	             move.w d0,130(sp)
  UWORD widthwordslayer = widthbyteslayer/2;  
    2074:	             move.w 130(sp),d0
    2078:	             lsr.w #1,d0
    207a:	             move.w d0,128(sp)
  UWORD widthbytesbackdrop = winWidth / 8;
    207e:	             move.l 1c9d6 <winWidth>,d0
    2084:	             lsr.l #3,d0
    2086:	             move.w d0,126(sp)
  UWORD sizeplane =  widthbyteslayer*height;
    208a:	             move.w 130(sp),d0
    208e:	             muls.w 132(sp),d0
    2092:	             move.w d0,124(sp)
  UWORD size = sizeplane * 5; //Todo other number of bitplanes
    2096:	             move.w 124(sp),d1
    209a:	             move.w d1,d0
    209c:	             add.w d0,d0
    209e:	             add.w d0,d0
    20a0:	             move.w d0,d2
    20a2:	             add.w d1,d2
    20a4:	             move.w d2,122(sp)

  //Load Palette to Copper
  if( CstPaletteLoaded == 0)
    20a8:	             move.w 1c99e <CstPaletteLoaded>,d0
    20ae:	/----------- bne.w 2148 <CstLoadBackdrop+0x114>
  {    
    UWORD reg = 0x180;
    20b2:	|            move.w #384,120(sp)

    if(CstPalette) {
    20b8:	|            move.l 1c9ce <CstPalette>,d0
    20be:	|        /-- beq.s 20d8 <CstLoadBackdrop+0xa4>
      FreeVec(CstPalette);
    20c0:	|        |   move.l 1c9ce <CstPalette>,116(sp)
    20c8:	|        |   move.l 1ca82 <SysBase>,d0
    20ce:	|        |   movea.l d0,a6
    20d0:	|        |   movea.l 116(sp),a1
    20d4:	|        |   jsr -690(a6)
    }

    CstPalette = AllocVec(32*2,MEMF_ANY); //ToDo other number of bitplanes
    20d8:	|        \-> moveq #64,d0
    20da:	|            move.l d0,112(sp)
    20de:	|            clr.l 108(sp)
    20e2:	|            move.l 1ca82 <SysBase>,d0
    20e8:	|            movea.l d0,a6
    20ea:	|            move.l 112(sp),d0
    20ee:	|            move.l 108(sp),d1
    20f2:	|            jsr -684(a6)
    20f6:	|            move.l d0,104(sp)
    20fa:	|            move.l 104(sp),d0
    20fe:	|            move.l d0,1c9ce <CstPalette>
    CstPaletteLoaded = 1;
    2104:	|            move.w #1,1c99e <CstPaletteLoaded>
    UWORD *tmp = CstPalette;
    210c:	|            move.l 1c9ce <CstPalette>,156(sp)
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    2114:	|            clr.l 152(sp)
    2118:	|        /-- bra.s 213e <CstLoadBackdrop+0x10a>
      *tmp++ = get2bytes(fp);
    211a:	|     /--|-> move.l 164(sp),-(sp)
    211e:	|     |  |   jsr 6bc <get2bytes>
    2124:	|     |  |   addq.l #4,sp
    2126:	|     |  |   move.l d0,d1
    2128:	|     |  |   move.l 156(sp),d0
    212c:	|     |  |   move.l d0,d2
    212e:	|     |  |   addq.l #2,d2
    2130:	|     |  |   move.l d2,156(sp)
    2134:	|     |  |   move.l d1,d1
    2136:	|     |  |   movea.l d0,a0
    2138:	|     |  |   move.w d1,(a0)
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    213a:	|     |  |   addq.l #1,152(sp)
    213e:	|     |  \-> moveq #31,d0
    2140:	|     |      cmp.l 152(sp),d0
    2144:	|     \----- bge.s 211a <CstLoadBackdrop+0xe6>
    2146:	|  /-------- bra.s 2166 <CstLoadBackdrop+0x132>
    }
  }
  else
  //There's already a palette loaded for this background. Do not load palette
  {
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    2148:	\--|-------> clr.l 148(sp)
    214c:	   |     /-- bra.s 215e <CstLoadBackdrop+0x12a>
      get2bytes(fp);
    214e:	   |  /--|-> move.l 164(sp),-(sp)
    2152:	   |  |  |   jsr 6bc <get2bytes>
    2158:	   |  |  |   addq.l #4,sp
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    215a:	   |  |  |   addq.l #1,148(sp)
    215e:	   |  |  \-> moveq #31,d2
    2160:	   |  |      cmp.l 148(sp),d2
    2164:	   |  \----- bge.s 214e <CstLoadBackdrop+0x11a>
    }
  }

  //Load Picture From Disk
  UWORD *tmpbuffer = AllocVec(size, MEMF_CHIP); //Todo other number of bitplanes
    2166:	   \-------> moveq #0,d0
    2168:	             move.w 122(sp),d0
    216c:	             move.l d0,100(sp)
    2170:	             moveq #2,d0
    2172:	             move.l d0,96(sp)
    2176:	             move.l 1ca82 <SysBase>,d0
    217c:	             movea.l d0,a6
    217e:	             move.l 100(sp),d0
    2182:	             move.l 96(sp),d1
    2186:	             jsr -684(a6)
    218a:	             move.l d0,92(sp)
    218e:	             move.l 92(sp),d0
    2192:	             move.l d0,88(sp)
  if( !tmpbuffer)
    2196:	         /-- bne.s 21a6 <CstLoadBackdrop+0x172>
  {
    KPrintF("CstLoadBackDrop: Cannot allocate Memory for tmpbuffer");
    2198:	         |   pea 18051 <PutChar+0x221>
    219e:	         |   jsr 17366 <KPrintF>
    21a4:	         |   addq.l #4,sp
  }
  UWORD *tmpmask = AllocVec(sizeplane, MEMF_CHIP);
    21a6:	         \-> moveq #0,d0
    21a8:	             move.w 124(sp),d0
    21ac:	             move.l d0,84(sp)
    21b0:	             moveq #2,d2
    21b2:	             move.l d2,80(sp)
    21b6:	             move.l 1ca82 <SysBase>,d0
    21bc:	             movea.l d0,a6
    21be:	             move.l 84(sp),d0
    21c2:	             move.l 80(sp),d1
    21c6:	             jsr -684(a6)
    21ca:	             move.l d0,76(sp)
    21ce:	             move.l 76(sp),d0
    21d2:	             move.l d0,72(sp)
  if( !tmpmask)
    21d6:	         /-- bne.s 21e6 <CstLoadBackdrop+0x1b2>
  {
    KPrintF("CstLoadBackDrop: Cannot allocate Memory for tmpmask");
    21d8:	         |   pea 18087 <PutChar+0x257>
    21de:	         |   jsr 17366 <KPrintF>
    21e4:	         |   addq.l #4,sp
  }

#ifdef EMULATOR
  debug_register_bitmap(tmpbuffer, "tmpbuffer.bpl", width, height, 5, 0);
    21e6:	         \-> move.w 132(sp),d0
    21ea:	             movea.w d0,a1
    21ec:	             move.w 134(sp),d0
    21f0:	             movea.w d0,a0
    21f2:	             clr.l -(sp)
    21f4:	             pea 5 <_start+0x5>
    21f8:	             move.l a1,-(sp)
    21fa:	             move.l a0,-(sp)
    21fc:	             pea 180bb <PutChar+0x28b>
    2202:	             move.l 108(sp),-(sp)
    2206:	             jsr 1744e <debug_register_bitmap>
    220c:	             lea 24(sp),sp
  debug_register_bitmap(tmpbuffer, "tmpmask.bpl", width, height, 1, 0);
    2210:	             move.w 132(sp),d0
    2214:	             movea.w d0,a1
    2216:	             move.w 134(sp),d0
    221a:	             movea.w d0,a0
    221c:	             clr.l -(sp)
    221e:	             pea 1 <_start+0x1>
    2222:	             move.l a1,-(sp)
    2224:	             move.l a0,-(sp)
    2226:	             pea 180c9 <PutChar+0x299>
    222c:	             move.l 108(sp),-(sp)
    2230:	             jsr 1744e <debug_register_bitmap>
    2236:	             lea 24(sp),sp
#endif  

  UWORD count = FRead( fp, tmpbuffer, 2, size/2);
    223a:	             move.l 164(sp),68(sp)
    2240:	             move.l 88(sp),64(sp)
    2246:	             moveq #2,d0
    2248:	             move.l d0,60(sp)
    224c:	             move.w 122(sp),d0
    2250:	             lsr.w #1,d0
    2252:	             move.w d0,d0
    2254:	             andi.l #65535,d0
    225a:	             move.l d0,56(sp)
    225e:	             move.l 1ca8a <DOSBase>,d0
    2264:	             movea.l d0,a6
    2266:	             move.l 68(sp),d1
    226a:	             move.l 64(sp),d2
    226e:	             move.l 60(sp),d3
    2272:	             move.l 56(sp),d4
    2276:	             jsr -324(a6)
    227a:	             move.l d0,52(sp)
    227e:	             move.l 52(sp),d0
    2282:	             move.w d0,50(sp)
  if(!count) {
    2286:	         /-- bne.s 229a <CstLoadBackdrop+0x266>
    KPrintF("Error while reading stream");
    2288:	         |   pea 180d5 <PutChar+0x2a5>
    228e:	         |   jsr 17366 <KPrintF>
    2294:	         |   addq.l #4,sp
    return;
    2296:	   /-----|-- bra.w 24e6 <CstLoadBackdrop+0x4b2>
  }  
  count = FRead( fp, tmpmask, 2, sizeplane/2);
    229a:	   |     \-> move.l 164(sp),46(sp)
    22a0:	   |         move.l 72(sp),42(sp)
    22a6:	   |         moveq #2,d2
    22a8:	   |         move.l d2,38(sp)
    22ac:	   |         move.w 124(sp),d0
    22b0:	   |         lsr.w #1,d0
    22b2:	   |         move.w d0,d0
    22b4:	   |         andi.l #65535,d0
    22ba:	   |         move.l d0,34(sp)
    22be:	   |         move.l 1ca8a <DOSBase>,d0
    22c4:	   |         movea.l d0,a6
    22c6:	   |         move.l 46(sp),d1
    22ca:	   |         move.l 42(sp),d2
    22ce:	   |         move.l 38(sp),d3
    22d2:	   |         move.l 34(sp),d4
    22d6:	   |         jsr -324(a6)
    22da:	   |         move.l d0,30(sp)
    22de:	   |         move.l 30(sp),d0
    22e2:	   |         move.w d0,50(sp)
   

  if(!count) {
    22e6:	   |     /-- bne.s 22fa <CstLoadBackdrop+0x2c6>
    KPrintF("Error while reading stream");
    22e8:	   |     |   pea 180d5 <PutChar+0x2a5>
    22ee:	   |     |   jsr 17366 <KPrintF>
    22f4:	   |     |   addq.l #4,sp
    return;
    22f6:	   +-----|-- bra.w 24e6 <CstLoadBackdrop+0x4b2>
  }

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    22fa:	   |     \-> move.l #14675968,26(sp)

  ULONG backdropcursor = (ULONG) CstBackDrop; 
    2302:	   |         move.l 1c9a4 <CstBackDrop>,d0
    2308:	   |         move.l d0,144(sp)
  UWORD offset = widthbytesbackdrop*y + x / 8;
    230c:	   |         move.l 172(sp),d0
    2310:	   |         move.w d0,d1
    2312:	   |         muls.w 126(sp),d1
    2316:	   |         move.l 168(sp),d0
    231a:	   |     /-- bpl.s 231e <CstLoadBackdrop+0x2ea>
    231c:	   |     |   addq.l #7,d0
    231e:	   |     \-> asr.l #3,d0
    2320:	   |         move.l d0,d0
    2322:	   |         movea.w d1,a0
    2324:	   |         adda.w d0,a0
    2326:	   |         move.w a0,24(sp)
  backdropcursor += offset; 
    232a:	   |         moveq #0,d0
    232c:	   |         move.w 24(sp),d0
    2330:	   |         add.l d0,144(sp)

 	KPrintF("CstLoadBackDrop: Starting Blit");
    2334:	   |         pea 180f0 <PutChar+0x2c0>
    233a:	   |         jsr 17366 <KPrintF>
    2340:	   |         addq.l #4,sp


  WaitBlit();
    2342:	   |         move.l 1ca8e <GfxBase>,d0
    2348:	   |         movea.l d0,a6
    234a:	   |         jsr -228(a6)

  custom->bltafwm = 0xffff;
    234e:	   |         movea.l 26(sp),a0
    2352:	   |         move.w #-1,68(a0)
  custom->bltalwm = 0xffff;
    2358:	   |         movea.l 26(sp),a0
    235c:	   |         move.w #-1,70(a0)
  custom->bltamod = 0;
    2362:	   |         movea.l 26(sp),a0
    2366:	   |         move.w #0,100(a0)
  custom->bltbmod = 0;
    236c:	   |         movea.l 26(sp),a0
    2370:	   |         move.w #0,98(a0)
  custom->bltcmod = widthbytesbackdrop - widthbyteslayer;
    2376:	   |         move.w 126(sp),d0
    237a:	   |         sub.w 130(sp),d0
    237e:	   |         movea.l 26(sp),a0
    2382:	   |         move.w d0,96(a0)
  custom->bltdmod = widthbytesbackdrop - widthbyteslayer;
    2386:	   |         move.w 126(sp),d0
    238a:	   |         sub.w 130(sp),d0
    238e:	   |         movea.l 26(sp),a0
    2392:	   |         move.w d0,102(a0)
  custom->bltcon0 = 0xfca;
    2396:	   |         movea.l 26(sp),a0
    239a:	   |         move.w #4042,64(a0)
  custom->bltcon1 = 0;
    23a0:	   |         movea.l 26(sp),a0
    23a4:	   |         move.w #0,66(a0)
  
  ULONG tmpbuffercursor = (ULONG) tmpbuffer;
    23aa:	   |         move.l 88(sp),140(sp)
  for(int i=0;i<5;i++) //Todo other number of bitplanes
    23b0:	   |         clr.l 136(sp)
    23b4:	   |     /-- bra.s 2416 <CstLoadBackdrop+0x3e2>
  {    
    custom->bltapt = (APTR) tmpmask;
    23b6:	   |  /--|-> movea.l 26(sp),a0
    23ba:	   |  |  |   move.l 72(sp),80(a0)
    custom->bltbpt = (APTR) tmpbuffercursor;
    23c0:	   |  |  |   move.l 140(sp),d0
    23c4:	   |  |  |   movea.l 26(sp),a0
    23c8:	   |  |  |   move.l d0,76(a0)
    custom->bltcpt = (APTR)backdropcursor;
    23cc:	   |  |  |   move.l 144(sp),d0
    23d0:	   |  |  |   movea.l 26(sp),a0
    23d4:	   |  |  |   move.l d0,72(a0)
    custom->bltdpt = (APTR) backdropcursor;
    23d8:	   |  |  |   move.l 144(sp),d0
    23dc:	   |  |  |   movea.l 26(sp),a0
    23e0:	   |  |  |   move.l d0,84(a0)
    custom->bltsize = (height<<6)+widthwordslayer;
    23e4:	   |  |  |   move.w 132(sp),d0
    23e8:	   |  |  |   lsl.w #6,d0
    23ea:	   |  |  |   add.w 128(sp),d0
    23ee:	   |  |  |   movea.l 26(sp),a0
    23f2:	   |  |  |   move.w d0,88(a0)
    tmpbuffercursor += sizeplane;
    23f6:	   |  |  |   moveq #0,d0
    23f8:	   |  |  |   move.w 124(sp),d0
    23fc:	   |  |  |   add.l d0,140(sp)
    backdropcursor += CstBackdropSizePlane;
    2400:	   |  |  |   move.w 1c9a2 <CstBackdropSizePlane>,d0
    2406:	   |  |  |   move.w d0,d0
    2408:	   |  |  |   andi.l #65535,d0
    240e:	   |  |  |   add.l d0,144(sp)
  for(int i=0;i<5;i++) //Todo other number of bitplanes
    2412:	   |  |  |   addq.l #1,136(sp)
    2416:	   |  |  \-> moveq #4,d0
    2418:	   |  |      cmp.l 136(sp),d0
    241c:	   |  \----- bge.s 23b6 <CstLoadBackdrop+0x382>
  }    

  WaitBlit();
    241e:	   |         move.l 1ca8e <GfxBase>,d0
    2424:	   |         movea.l d0,a6
    2426:	   |         jsr -228(a6)

 	KPrintF("CstLoadBackDrop: Freeing Memory");
    242a:	   |         pea 1810f <PutChar+0x2df>
    2430:	   |         jsr 17366 <KPrintF>
    2436:	   |         addq.l #4,sp


  FreeVec(tmpbuffer);
    2438:	   |         move.l 88(sp),20(sp)
    243e:	   |         move.l 1ca82 <SysBase>,d0
    2444:	   |         movea.l d0,a6
    2446:	   |         movea.l 20(sp),a1
    244a:	   |         jsr -690(a6)
  FreeVec(tmpmask);
    244e:	   |         move.l 72(sp),16(sp)
    2454:	   |         move.l 1ca82 <SysBase>,d0
    245a:	   |         movea.l d0,a6
    245c:	   |         movea.l 16(sp),a1
    2460:	   |         jsr -690(a6)

  CstApplyBackDropCounter = 2;
    2464:	   |         move.w #2,1c9b0 <CstApplyBackDropCounter>

  *CstBackDropBufferApplyCursor++ = winWidth/16;
    246c:	   |         move.l 1c9d6 <winWidth>,d0
    2472:	   |         lsr.l #4,d0
    2474:	   |         movea.l 1c9c6 <CstBackDropBufferApplyCursor>,a0
    247a:	   |         move.l a0,d1
    247c:	   |         addq.l #2,d1
    247e:	   |         move.l d1,1c9c6 <CstBackDropBufferApplyCursor>
    2484:	   |         move.l d0,d0
    2486:	   |         move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = winHeight;
    2488:	   |         move.l 1c9da <winHeight>,d0
    248e:	   |         movea.l 1c9c6 <CstBackDropBufferApplyCursor>,a0
    2494:	   |         move.l a0,d1
    2496:	   |         addq.l #2,d1
    2498:	   |         move.l d1,1c9c6 <CstBackDropBufferApplyCursor>
    249e:	   |         move.l d0,d0
    24a0:	   |         move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = 0;
    24a2:	   |         movea.l 1c9c6 <CstBackDropBufferApplyCursor>,a0
    24a8:	   |         move.l a0,d0
    24aa:	   |         addq.l #2,d0
    24ac:	   |         move.l d0,1c9c6 <CstBackDropBufferApplyCursor>
    24b2:	   |         clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    24b4:	   |         movea.l 1c9c6 <CstBackDropBufferApplyCursor>,a0
    24ba:	   |         move.l a0,d0
    24bc:	   |         addq.l #2,d0
    24be:	   |         move.l d0,1c9c6 <CstBackDropBufferApplyCursor>
    24c4:	   |         clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    24c6:	   |         movea.l 1c9c6 <CstBackDropBufferApplyCursor>,a0
    24cc:	   |         move.l a0,d0
    24ce:	   |         addq.l #2,d0
    24d0:	   |         move.l d0,1c9c6 <CstBackDropBufferApplyCursor>
    24d6:	   |         clr.w (a0)

  KPrintF("CstLoadBackDrop: Finished");
    24d8:	   |         pea 1812f <PutChar+0x2ff>
    24de:	   |         jsr 17366 <KPrintF>
    24e4:	   |         addq.l #4,sp

}
    24e6:	   \-------> movem.l (sp)+,d2-d4/a6
    24ea:	             lea 144(sp),sp
    24ee:	             rts

000024f0 <CstPasteChar>:

ULONG test = 0;

void CstPasteChar( struct sprite *single, WORD x, WORD y)
{  
    24f0:	                lea -72(sp),sp
    24f4:	                move.l a6,-(sp)
    24f6:	                move.l d2,-(sp)
    24f8:	                move.l 88(sp),d1
    24fc:	                move.l 92(sp),d0
    2500:	                move.w d1,d1
    2502:	                move.w d1,10(sp)
    2506:	                move.w d0,d0
    2508:	                move.w d0,8(sp)
  UWORD *destination = 0;
    250c:	                clr.l 28(sp)
  CstApplyBackDropCounter = 2;
    2510:	                move.w #2,1c9b0 <CstApplyBackDropCounter>
  destination = (UWORD *) CstBackDrop;      
    2518:	                move.l 1c9a4 <CstBackDrop>,28(sp)
  ULONG ystartdst;
  ULONG ystartsrc; 
  ULONG blitheight;
  ULONG blitwidth;

  bltcon0 = 0;
    2520:	                clr.l 56(sp)

  blitwidth = single->width/16;
    2524:	                movea.l 84(sp),a0
    2528:	                move.l (a0),d0
    252a:	                movea.l d0,a0
    252c:	                cmpa.w #0,a0
    2530:	            /-- bge.s 2536 <CstPasteChar+0x46>
    2532:	            |   lea 15(a0),a0
    2536:	            \-> move.l a0,d0
    2538:	                asr.l #4,d0
    253a:	                move.l d0,40(sp)
  if(blitwidth == 0) blitwidth = 1;
    253e:	            /-- bne.s 2546 <CstPasteChar+0x56>
    2540:	            |   moveq #1,d0
    2542:	            |   move.l d0,40(sp)

  if( y < 0) {
    2546:	            \-> tst.w 8(sp)
    254a:	         /----- bge.s 2592 <CstPasteChar+0xa2>
    if(y + single->height < 0) {
    254c:	         |      movea.w 8(sp),a1
    2550:	         |      movea.l 84(sp),a0
    2554:	         |      move.l 4(a0),d0
    2558:	         |      add.l a1,d0
    255a:	         |  /-- bpl.s 256e <CstPasteChar+0x7e>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    255c:	         |  |   pea 18149 <PutChar+0x319>
    2562:	         |  |   jsr 17366 <KPrintF>
    2568:	         |  |   addq.l #4,sp
      return;
    256a:	/--------|--|-- bra.w 2c2e <CstPasteChar+0x73e>
    }
    ystartdst = 0;
    256e:	|        |  \-> clr.l 52(sp)
    ystartsrc = y*-1;
    2572:	|        |      move.w 8(sp),d0
    2576:	|        |      ext.l d0
    2578:	|        |      neg.l d0
    257a:	|        |      move.l d0,48(sp)
    blitheight = single->height+y;
    257e:	|        |      movea.l 84(sp),a0
    2582:	|        |      move.l 4(a0),d0
    2586:	|        |      movea.w 8(sp),a0
    258a:	|        |      add.l a0,d0
    258c:	|        |      move.l d0,44(sp)
    2590:	|     /--|----- bra.s 2604 <CstPasteChar+0x114>
  } else if(y+single->height > (int) winHeight) {
    2592:	|     |  \----> movea.w 8(sp),a1
    2596:	|     |         movea.l 84(sp),a0
    259a:	|     |         move.l 4(a0),d0
    259e:	|     |         move.l a1,d1
    25a0:	|     |         add.l d0,d1
    25a2:	|     |         move.l 1c9da <winHeight>,d0
    25a8:	|     |         cmp.l d1,d0
    25aa:	|     |  /----- bge.s 25ec <CstPasteChar+0xfc>
    if(y  > (int) winHeight) {
    25ac:	|     |  |      movea.w 8(sp),a0
    25b0:	|     |  |      move.l 1c9da <winHeight>,d0
    25b6:	|     |  |      cmp.l a0,d0
    25b8:	|     |  |  /-- bge.s 25cc <CstPasteChar+0xdc>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    25ba:	|     |  |  |   pea 18149 <PutChar+0x319>
    25c0:	|     |  |  |   jsr 17366 <KPrintF>
    25c6:	|     |  |  |   addq.l #4,sp
      return;
    25c8:	+-----|--|--|-- bra.w 2c2e <CstPasteChar+0x73e>
    }
    ystartdst = y;
    25cc:	|     |  |  \-> movea.w 8(sp),a0
    25d0:	|     |  |      move.l a0,52(sp)
    ystartsrc = 0;
    25d4:	|     |  |      clr.l 48(sp)
    blitheight = winHeight-y;
    25d8:	|     |  |      move.l 1c9da <winHeight>,d0
    25de:	|     |  |      movea.w 8(sp),a0
    25e2:	|     |  |      move.l d0,d1
    25e4:	|     |  |      sub.l a0,d1
    25e6:	|     |  |      move.l d1,44(sp)
    25ea:	|     +--|----- bra.s 2604 <CstPasteChar+0x114>
  } else {
    ystartdst = y;
    25ec:	|     |  \----> movea.w 8(sp),a0
    25f0:	|     |         move.l a0,52(sp)
    ystartsrc = 0;
    25f4:	|     |         clr.l 48(sp)
    blitheight = single->height;
    25f8:	|     |         movea.l 84(sp),a0
    25fc:	|     |         move.l 4(a0),d0
    2600:	|     |         move.l d0,44(sp)
  }


  if( x < 0) { //Leftmost part outside screen
    2604:	|     \-------> tst.w 10(sp)
    2608:	|        /----- bge.w 277a <CstPasteChar+0x28a>
    if(x + single->width < 0) {
    260c:	|        |      movea.w 10(sp),a1
    2610:	|        |      movea.l 84(sp),a0
    2614:	|        |      move.l (a0),d0
    2616:	|        |      add.l a1,d0
    2618:	|        |  /-- bpl.s 262c <CstPasteChar+0x13c>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    261a:	|        |  |   pea 18149 <PutChar+0x319>
    2620:	|        |  |   jsr 17366 <KPrintF>
    2626:	|        |  |   addq.l #4,sp
      return;
    2628:	+--------|--|-- bra.w 2c2e <CstPasteChar+0x73e>

    }
    
    extrawords = 1;
    262c:	|        |  \-> move.w #1,78(sp)

    cutwordssource = (x*-1)/16; 
    2632:	|        |      move.w 10(sp),d0
    2636:	|        |  /-- bpl.s 263c <CstPasteChar+0x14c>
    2638:	|        |  |   addi.w #15,d0
    263c:	|        |  \-> asr.w #4,d0
    263e:	|        |      neg.w d0
    2640:	|        |      move.w d0,76(sp)
    cutmaskpixel = (x*-1)%16;     
    2644:	|        |      move.w 10(sp),d0
    2648:	|        |      ext.l d0
    264a:	|        |      neg.l d0
    264c:	|        |      andi.l #-2147483633,d0
    2652:	|        |  /-- bpl.s 265c <CstPasteChar+0x16c>
    2654:	|        |  |   subq.l #1,d0
    2656:	|        |  |   moveq #-16,d1
    2658:	|        |  |   or.l d1,d0
    265a:	|        |  |   addq.l #1,d0
    265c:	|        |  \-> move.w d0,74(sp)
    bltalwm = 0; //Last Word of this channel almost masked out
    2660:	|        |      clr.w 72(sp)
    bltapt = ((ULONG) single->data)+cutwordssource*2+ystartsrc*single->width/8;
    2664:	|        |      movea.l 84(sp),a0
    2668:	|        |      move.l 24(a0),d0
    266c:	|        |      move.l d0,d1
    266e:	|        |      moveq #0,d0
    2670:	|        |      move.w 76(sp),d0
    2674:	|        |      add.l d0,d0
    2676:	|        |      move.l d1,d2
    2678:	|        |      add.l d0,d2
    267a:	|        |      movea.l 84(sp),a0
    267e:	|        |      move.l (a0),d0
    2680:	|        |      move.l 48(sp),-(sp)
    2684:	|        |      move.l d0,-(sp)
    2686:	|        |      jsr 17d1a <__mulsi3>
    268c:	|        |      addq.l #8,sp
    268e:	|        |      lsr.l #3,d0
    2690:	|        |      move.l d2,d1
    2692:	|        |      add.l d0,d1
    2694:	|        |      move.l d1,68(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    2698:	|        |      move.l 1c9d6 <winWidth>,d0
    269e:	|        |      move.l 52(sp),-(sp)
    26a2:	|        |      move.l d0,-(sp)
    26a4:	|        |      jsr 17d1a <__mulsi3>
    26aa:	|        |      addq.l #8,sp
    26ac:	|        |      lsr.l #3,d0
    26ae:	|        |      move.l 28(sp),d1
    26b2:	|        |      add.l d1,d0
    26b4:	|        |      move.l d0,d2
    26b6:	|        |      subq.l #2,d2
    26b8:	|        |      move.l d2,64(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    26bc:	|        |      move.l 1c9d6 <winWidth>,d0
    26c2:	|        |      move.l 52(sp),-(sp)
    26c6:	|        |      move.l d0,-(sp)
    26c8:	|        |      jsr 17d1a <__mulsi3>
    26ce:	|        |      addq.l #8,sp
    26d0:	|        |      lsr.l #3,d0
    26d2:	|        |      move.l 28(sp),d1
    26d6:	|        |      add.l d1,d0
    26d8:	|        |      move.l d0,d1
    26da:	|        |      subq.l #2,d1
    26dc:	|        |      move.l d1,60(sp)
    bltcon0 = ((16-cutmaskpixel) << 12);
    26e0:	|        |      moveq #0,d0
    26e2:	|        |      move.w 74(sp),d0
    26e6:	|        |      moveq #16,d1
    26e8:	|        |      sub.l d0,d1
    26ea:	|        |      move.l d1,d0
    26ec:	|        |      moveq #12,d2
    26ee:	|        |      lsl.l d2,d0
    26f0:	|        |      move.l d0,56(sp)

    *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    26f4:	|        |      movea.l 84(sp),a0
    26f8:	|        |      move.l (a0),d0
    26fa:	|        |      movea.l d0,a0
    26fc:	|        |      cmpa.w #0,a0
    2700:	|        |  /-- bge.s 2706 <CstPasteChar+0x216>
    2702:	|        |  |   lea 15(a0),a0
    2706:	|        |  \-> move.l a0,d0
    2708:	|        |      asr.l #4,d0
    270a:	|        |      move.l d0,d0
    270c:	|        |      add.w 76(sp),d0
    2710:	|        |      movea.l 1c9c6 <CstBackDropBufferApplyCursor>,a0
    2716:	|        |      move.l a0,d1
    2718:	|        |      addq.l #2,d1
    271a:	|        |      move.l d1,1c9c6 <CstBackDropBufferApplyCursor>
    2720:	|        |      add.w 78(sp),d0
    2724:	|        |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = blitheight;
    2726:	|        |      movea.l 1c9c6 <CstBackDropBufferApplyCursor>,a0
    272c:	|        |      move.l a0,d0
    272e:	|        |      addq.l #2,d0
    2730:	|        |      move.l d0,1c9c6 <CstBackDropBufferApplyCursor>
    2736:	|        |      move.l 44(sp),d0
    273a:	|        |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = 0;
    273c:	|        |      movea.l 1c9c6 <CstBackDropBufferApplyCursor>,a0
    2742:	|        |      move.l a0,d0
    2744:	|        |      addq.l #2,d0
    2746:	|        |      move.l d0,1c9c6 <CstBackDropBufferApplyCursor>
    274c:	|        |      clr.w (a0)
    *CstBackDropBufferApplyCursor++ = ystartdst;
    274e:	|        |      movea.l 1c9c6 <CstBackDropBufferApplyCursor>,a0
    2754:	|        |      move.l a0,d0
    2756:	|        |      addq.l #2,d0
    2758:	|        |      move.l d0,1c9c6 <CstBackDropBufferApplyCursor>
    275e:	|        |      move.l 52(sp),d0
    2762:	|        |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = 0;
    2764:	|        |      movea.l 1c9c6 <CstBackDropBufferApplyCursor>,a0
    276a:	|        |      move.l a0,d0
    276c:	|        |      addq.l #2,d0
    276e:	|        |      move.l d0,1c9c6 <CstBackDropBufferApplyCursor>
    2774:	|        |      clr.w (a0)
    2776:	|     /--|----- bra.w 2a8e <CstPasteChar+0x59e>

  } else if(x + single->width > (int) winWidth) { //Rightmost part outside screen   
    277a:	|     |  \----> movea.w 10(sp),a1
    277e:	|     |         movea.l 84(sp),a0
    2782:	|     |         move.l (a0),d0
    2784:	|     |         move.l a1,d1
    2786:	|     |         add.l d0,d1
    2788:	|     |         move.l 1c9d6 <winWidth>,d0
    278e:	|     |         cmp.l d1,d0
    2790:	|     |  /----- bge.w 292c <CstPasteChar+0x43c>

    if(x - single->width > (int) winWidth)
    2794:	|     |  |      movea.w 10(sp),a1
    2798:	|     |  |      movea.l 84(sp),a0
    279c:	|     |  |      move.l (a0),d0
    279e:	|     |  |      move.l a1,d1
    27a0:	|     |  |      sub.l d0,d1
    27a2:	|     |  |      move.l 1c9d6 <winWidth>,d0
    27a8:	|     |  |      cmp.l d1,d0
    27aa:	|     |  |  /-- bge.s 27be <CstPasteChar+0x2ce>
    {    
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    27ac:	|     |  |  |   pea 18149 <PutChar+0x319>
    27b2:	|     |  |  |   jsr 17366 <KPrintF>
    27b8:	|     |  |  |   addq.l #4,sp
      return;
    27ba:	+-----|--|--|-- bra.w 2c2e <CstPasteChar+0x73e>
    }
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    27be:	|     |  |  \-> clr.w 78(sp)
    cutwordssource = (x+single->width - winWidth)/16;
    27c2:	|     |  |      movea.w 10(sp),a1
    27c6:	|     |  |      movea.l 84(sp),a0
    27ca:	|     |  |      move.l (a0),d0
    27cc:	|     |  |      add.l a1,d0
    27ce:	|     |  |      move.l d0,d1
    27d0:	|     |  |      move.l 1c9d6 <winWidth>,d0
    27d6:	|     |  |      sub.l d0,d1
    27d8:	|     |  |      move.l d1,d0
    27da:	|     |  |      lsr.l #4,d0
    27dc:	|     |  |      move.w d0,76(sp)
    cutmaskpixel = 0;
    27e0:	|     |  |      clr.w 74(sp)
    bltalwm = 0xffff; //Last word contains source data to be blit
    27e4:	|     |  |      move.w #-1,72(sp)
    bltapt = (ULONG) single->data+ystartsrc*single->width/8;
    27ea:	|     |  |      movea.l 84(sp),a0
    27ee:	|     |  |      move.l 24(a0),d0
    27f2:	|     |  |      move.l d0,d2
    27f4:	|     |  |      movea.l 84(sp),a0
    27f8:	|     |  |      move.l (a0),d0
    27fa:	|     |  |      move.l 48(sp),-(sp)
    27fe:	|     |  |      move.l d0,-(sp)
    2800:	|     |  |      jsr 17d1a <__mulsi3>
    2806:	|     |  |      addq.l #8,sp
    2808:	|     |  |      lsr.l #3,d0
    280a:	|     |  |      move.l d2,d1
    280c:	|     |  |      add.l d0,d1
    280e:	|     |  |      move.l d1,68(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    2812:	|     |  |      move.l 1c9d6 <winWidth>,d0
    2818:	|     |  |      move.l 52(sp),-(sp)
    281c:	|     |  |      move.l d0,-(sp)
    281e:	|     |  |      jsr 17d1a <__mulsi3>
    2824:	|     |  |      addq.l #8,sp
    2826:	|     |  |      lsr.l #3,d0
    2828:	|     |  |      move.l 28(sp),d1
    282c:	|     |  |      add.l d0,d1
    282e:	|     |  |      move.w 10(sp),d0
    2832:	|     |  |  /-- bpl.s 2838 <CstPasteChar+0x348>
    2834:	|     |  |  |   addi.w #15,d0
    2838:	|     |  |  \-> asr.w #4,d0
    283a:	|     |  |      movea.w d0,a0
    283c:	|     |  |      move.l a0,d0
    283e:	|     |  |      add.l a0,d0
    2840:	|     |  |      move.l d1,d2
    2842:	|     |  |      add.l d0,d2
    2844:	|     |  |      move.l d2,64(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    2848:	|     |  |      move.l 1c9d6 <winWidth>,d0
    284e:	|     |  |      move.l 52(sp),-(sp)
    2852:	|     |  |      move.l d0,-(sp)
    2854:	|     |  |      jsr 17d1a <__mulsi3>
    285a:	|     |  |      addq.l #8,sp
    285c:	|     |  |      lsr.l #3,d0
    285e:	|     |  |      move.l 28(sp),d1
    2862:	|     |  |      add.l d0,d1
    2864:	|     |  |      move.w 10(sp),d0
    2868:	|     |  |  /-- bpl.s 286e <CstPasteChar+0x37e>
    286a:	|     |  |  |   addi.w #15,d0
    286e:	|     |  |  \-> asr.w #4,d0
    2870:	|     |  |      movea.w d0,a0
    2872:	|     |  |      move.l a0,d0
    2874:	|     |  |      add.l a0,d0
    2876:	|     |  |      move.l d1,d2
    2878:	|     |  |      add.l d0,d2
    287a:	|     |  |      move.l d2,60(sp)
    bltcon0 = ((single->width%16) << 12);    
    287e:	|     |  |      movea.l 84(sp),a0
    2882:	|     |  |      move.l (a0),d0
    2884:	|     |  |      andi.l #-2147483633,d0
    288a:	|     |  |  /-- bpl.s 2894 <CstPasteChar+0x3a4>
    288c:	|     |  |  |   subq.l #1,d0
    288e:	|     |  |  |   moveq #-16,d1
    2890:	|     |  |  |   or.l d1,d0
    2892:	|     |  |  |   addq.l #1,d0
    2894:	|     |  |  \-> moveq #12,d2
    2896:	|     |  |      lsl.l d2,d0
    2898:	|     |  |      move.l d0,56(sp)
    
    *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource;
    289c:	|     |  |      movea.l 84(sp),a0
    28a0:	|     |  |      move.l (a0),d0
    28a2:	|     |  |      movea.l d0,a0
    28a4:	|     |  |      cmpa.w #0,a0
    28a8:	|     |  |  /-- bge.s 28ae <CstPasteChar+0x3be>
    28aa:	|     |  |  |   lea 15(a0),a0
    28ae:	|     |  |  \-> move.l a0,d0
    28b0:	|     |  |      asr.l #4,d0
    28b2:	|     |  |      move.l d0,d0
    28b4:	|     |  |      movea.l 1c9c6 <CstBackDropBufferApplyCursor>,a0
    28ba:	|     |  |      move.l a0,d1
    28bc:	|     |  |      addq.l #2,d1
    28be:	|     |  |      move.l d1,1c9c6 <CstBackDropBufferApplyCursor>
    28c4:	|     |  |      add.w 76(sp),d0
    28c8:	|     |  |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = blitheight;
    28ca:	|     |  |      movea.l 1c9c6 <CstBackDropBufferApplyCursor>,a0
    28d0:	|     |  |      move.l a0,d0
    28d2:	|     |  |      addq.l #2,d0
    28d4:	|     |  |      move.l d0,1c9c6 <CstBackDropBufferApplyCursor>
    28da:	|     |  |      move.l 44(sp),d0
    28de:	|     |  |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = (x/16)*2;
    28e0:	|     |  |      move.w 10(sp),d0
    28e4:	|     |  |  /-- bpl.s 28ea <CstPasteChar+0x3fa>
    28e6:	|     |  |  |   addi.w #15,d0
    28ea:	|     |  |  \-> asr.w #4,d0
    28ec:	|     |  |      movea.l 1c9c6 <CstBackDropBufferApplyCursor>,a0
    28f2:	|     |  |      move.l a0,d1
    28f4:	|     |  |      addq.l #2,d1
    28f6:	|     |  |      move.l d1,1c9c6 <CstBackDropBufferApplyCursor>
    28fc:	|     |  |      add.w d0,d0
    28fe:	|     |  |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = ystartdst;
    2900:	|     |  |      movea.l 1c9c6 <CstBackDropBufferApplyCursor>,a0
    2906:	|     |  |      move.l a0,d0
    2908:	|     |  |      addq.l #2,d0
    290a:	|     |  |      move.l d0,1c9c6 <CstBackDropBufferApplyCursor>
    2910:	|     |  |      move.l 52(sp),d0
    2914:	|     |  |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = 0;
    2916:	|     |  |      movea.l 1c9c6 <CstBackDropBufferApplyCursor>,a0
    291c:	|     |  |      move.l a0,d0
    291e:	|     |  |      addq.l #2,d0
    2920:	|     |  |      move.l d0,1c9c6 <CstBackDropBufferApplyCursor>
    2926:	|     |  |      clr.w (a0)
    2928:	|     +--|----- bra.w 2a8e <CstPasteChar+0x59e>
    
  } else { //Whole Sprite on Screen

    extrawords = 1;
    292c:	|     |  \----> move.w #1,78(sp)
    cutwordssource = 0;
    2932:	|     |         clr.w 76(sp)
    cutmaskpixel = 0;
    2936:	|     |         clr.w 74(sp)
    bltalwm = 0; //Last Word of this channel almost masked out
    293a:	|     |         clr.w 72(sp)
    bltapt = (ULONG) single->data+ystartsrc*(single->width/16)*2;
    293e:	|     |         movea.l 84(sp),a0
    2942:	|     |         move.l 24(a0),d0
    2946:	|     |         move.l d0,d2
    2948:	|     |         movea.l 84(sp),a0
    294c:	|     |         move.l (a0),d0
    294e:	|     |         movea.l d0,a0
    2950:	|     |         cmpa.w #0,a0
    2954:	|     |     /-- bge.s 295a <CstPasteChar+0x46a>
    2956:	|     |     |   lea 15(a0),a0
    295a:	|     |     \-> move.l a0,d0
    295c:	|     |         asr.l #4,d0
    295e:	|     |         move.l 48(sp),-(sp)
    2962:	|     |         move.l d0,-(sp)
    2964:	|     |         jsr 17d1a <__mulsi3>
    296a:	|     |         addq.l #8,sp
    296c:	|     |         add.l d0,d0
    296e:	|     |         move.l d2,d1
    2970:	|     |         add.l d0,d1
    2972:	|     |         move.l d1,68(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    2976:	|     |         move.l 1c9d6 <winWidth>,d0
    297c:	|     |         move.l 52(sp),-(sp)
    2980:	|     |         move.l d0,-(sp)
    2982:	|     |         jsr 17d1a <__mulsi3>
    2988:	|     |         addq.l #8,sp
    298a:	|     |         lsr.l #3,d0
    298c:	|     |         move.l 28(sp),d1
    2990:	|     |         add.l d0,d1
    2992:	|     |         move.w 10(sp),d0
    2996:	|     |     /-- bpl.s 299c <CstPasteChar+0x4ac>
    2998:	|     |     |   addi.w #15,d0
    299c:	|     |     \-> asr.w #4,d0
    299e:	|     |         movea.w d0,a0
    29a0:	|     |         move.l a0,d0
    29a2:	|     |         add.l a0,d0
    29a4:	|     |         move.l d1,d2
    29a6:	|     |         add.l d0,d2
    29a8:	|     |         move.l d2,64(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    29ac:	|     |         move.l 1c9d6 <winWidth>,d0
    29b2:	|     |         move.l 52(sp),-(sp)
    29b6:	|     |         move.l d0,-(sp)
    29b8:	|     |         jsr 17d1a <__mulsi3>
    29be:	|     |         addq.l #8,sp
    29c0:	|     |         lsr.l #3,d0
    29c2:	|     |         move.l 28(sp),d1
    29c6:	|     |         add.l d0,d1
    29c8:	|     |         move.w 10(sp),d0
    29cc:	|     |     /-- bpl.s 29d2 <CstPasteChar+0x4e2>
    29ce:	|     |     |   addi.w #15,d0
    29d2:	|     |     \-> asr.w #4,d0
    29d4:	|     |         movea.w d0,a0
    29d6:	|     |         move.l a0,d0
    29d8:	|     |         add.l a0,d0
    29da:	|     |         move.l d1,d2
    29dc:	|     |         add.l d0,d2
    29de:	|     |         move.l d2,60(sp)
    bltcon0 = ((x%16) << 12);
    29e2:	|     |         move.w 10(sp),d0
    29e6:	|     |         andi.w #-32753,d0
    29ea:	|     |     /-- bpl.s 29f4 <CstPasteChar+0x504>
    29ec:	|     |     |   subq.w #1,d0
    29ee:	|     |     |   ori.w #-16,d0
    29f2:	|     |     |   addq.w #1,d0
    29f4:	|     |     \-> ext.l d0
    29f6:	|     |         moveq #12,d1
    29f8:	|     |         lsl.l d1,d0
    29fa:	|     |         move.l d0,56(sp)

    *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    29fe:	|     |         movea.l 84(sp),a0
    2a02:	|     |         move.l (a0),d0
    2a04:	|     |         movea.l d0,a0
    2a06:	|     |         cmpa.w #0,a0
    2a0a:	|     |     /-- bge.s 2a10 <CstPasteChar+0x520>
    2a0c:	|     |     |   lea 15(a0),a0
    2a10:	|     |     \-> move.l a0,d0
    2a12:	|     |         asr.l #4,d0
    2a14:	|     |         move.l d0,d0
    2a16:	|     |         add.w 76(sp),d0
    2a1a:	|     |         movea.l 1c9c6 <CstBackDropBufferApplyCursor>,a0
    2a20:	|     |         move.l a0,d1
    2a22:	|     |         addq.l #2,d1
    2a24:	|     |         move.l d1,1c9c6 <CstBackDropBufferApplyCursor>
    2a2a:	|     |         add.w 78(sp),d0
    2a2e:	|     |         move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = blitheight;
    2a30:	|     |         movea.l 1c9c6 <CstBackDropBufferApplyCursor>,a0
    2a36:	|     |         move.l a0,d0
    2a38:	|     |         addq.l #2,d0
    2a3a:	|     |         move.l d0,1c9c6 <CstBackDropBufferApplyCursor>
    2a40:	|     |         move.l 44(sp),d0
    2a44:	|     |         move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = (x/16)*2;
    2a46:	|     |         move.w 10(sp),d0
    2a4a:	|     |     /-- bpl.s 2a50 <CstPasteChar+0x560>
    2a4c:	|     |     |   addi.w #15,d0
    2a50:	|     |     \-> asr.w #4,d0
    2a52:	|     |         movea.l 1c9c6 <CstBackDropBufferApplyCursor>,a0
    2a58:	|     |         move.l a0,d1
    2a5a:	|     |         addq.l #2,d1
    2a5c:	|     |         move.l d1,1c9c6 <CstBackDropBufferApplyCursor>
    2a62:	|     |         add.w d0,d0
    2a64:	|     |         move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = ystartdst;
    2a66:	|     |         movea.l 1c9c6 <CstBackDropBufferApplyCursor>,a0
    2a6c:	|     |         move.l a0,d0
    2a6e:	|     |         addq.l #2,d0
    2a70:	|     |         move.l d0,1c9c6 <CstBackDropBufferApplyCursor>
    2a76:	|     |         move.l 52(sp),d0
    2a7a:	|     |         move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = 0;
    2a7c:	|     |         movea.l 1c9c6 <CstBackDropBufferApplyCursor>,a0
    2a82:	|     |         move.l a0,d0
    2a84:	|     |         addq.l #2,d0
    2a86:	|     |         move.l d0,1c9c6 <CstBackDropBufferApplyCursor>
    2a8c:	|     |         clr.w (a0)
    
  }

  UWORD bltafwm = 0xffff >> cutmaskpixel;
    2a8e:	|     \-------> moveq #0,d0
    2a90:	|               move.w 74(sp),d0
    2a94:	|               moveq #0,d1
    2a96:	|               not.w d1
    2a98:	|               asr.l d0,d1
    2a9a:	|               move.w d1,26(sp)
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    2a9e:	|               moveq #0,d1
    2aa0:	|               move.w 76(sp),d1
    2aa4:	|               moveq #0,d0
    2aa6:	|               move.w 78(sp),d0
    2aaa:	|               sub.l d0,d1
    2aac:	|               move.l d1,d0
    2aae:	|               add.w d0,d0
    2ab0:	|               move.w d0,24(sp)
  WORD bltcmod = winWidth/8-blitwidth*2-extrawords*2+cutwordssource*2;
    2ab4:	|               move.l 1c9d6 <winWidth>,d0
    2aba:	|               lsr.l #3,d0
    2abc:	|               move.l d0,d2
    2abe:	|               move.w 76(sp),d1
    2ac2:	|               sub.w 78(sp),d1
    2ac6:	|               move.l 40(sp),d0
    2aca:	|               sub.w d0,d1
    2acc:	|               move.w d1,d0
    2ace:	|               add.w d1,d0
    2ad0:	|               add.w d2,d0
    2ad2:	|               move.w d0,22(sp)
  WORD bltdmod = winWidth/8-blitwidth*2-extrawords*2+cutwordssource*2;
    2ad6:	|               move.l 1c9d6 <winWidth>,d0
    2adc:	|               lsr.l #3,d0
    2ade:	|               move.l d0,d2
    2ae0:	|               move.w 76(sp),d1
    2ae4:	|               sub.w 78(sp),d1
    2ae8:	|               move.l 40(sp),d0
    2aec:	|               sub.w d0,d1
    2aee:	|               move.w d1,d0
    2af0:	|               add.w d1,d0
    2af2:	|               add.w d2,d0
    2af4:	|               move.w d0,20(sp)

  volatile struct Custom *custom = (struct Custom*)0xdff000;
    2af8:	|               move.l #14675968,16(sp)
  WaitBlit();
    2b00:	|               move.l 1ca8e <GfxBase>,d0
    2b06:	|               movea.l d0,a6
    2b08:	|               jsr -228(a6)

  custom->bltafwm = bltafwm;
    2b0c:	|               movea.l 16(sp),a0
    2b10:	|               move.w 26(sp),68(a0)
  custom->bltalwm = bltalwm;
    2b16:	|               movea.l 16(sp),a0
    2b1a:	|               move.w 72(sp),70(a0)
  custom->bltamod = bltamod;
    2b20:	|               move.w 24(sp),d0
    2b24:	|               movea.l 16(sp),a0
    2b28:	|               move.w d0,100(a0)
  custom->bltcmod = bltcmod;
    2b2c:	|               move.w 22(sp),d0
    2b30:	|               movea.l 16(sp),a0
    2b34:	|               move.w d0,96(a0)
  custom->bltdmod = bltdmod;
    2b38:	|               move.w 20(sp),d0
    2b3c:	|               movea.l 16(sp),a0
    2b40:	|               move.w d0,102(a0)

  UWORD bltcptplus = winWidth/8*winHeight;
    2b44:	|               move.l 1c9d6 <winWidth>,d0
    2b4a:	|               lsr.l #3,d0
    2b4c:	|               move.l d0,d1
    2b4e:	|               move.l 1c9da <winHeight>,d0
    2b54:	|               move.l d0,d0
    2b56:	|               move.w d1,d2
    2b58:	|               muls.w d0,d2
    2b5a:	|               move.w d2,14(sp)
  UWORD tmp = textPaletteIndex;
    2b5e:	|               move.w 1c99c <textPaletteIndex>,38(sp)

  UWORD minterm;
  //Apply palette color to planeblit
  //Ugly double code in the name of performance
  UWORD tmp2 = tmp & 0x01;
    2b66:	|               move.w 38(sp),d0
    2b6a:	|               andi.w #1,d0
    2b6e:	|               move.w d0,12(sp)
  if(tmp2) {
    2b72:	|        /----- beq.s 2b7c <CstPasteChar+0x68c>
    minterm = 0xbfa;
    2b74:	|        |      move.w #3066,36(sp)
    2b7a:	|        |  /-- bra.s 2b82 <CstPasteChar+0x692>
  } else {
    minterm = 0xb0a;
    2b7c:	|        \--|-> move.w #2826,36(sp)
  }

  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2b82:	|           \-> clr.l 32(sp)
    2b86:	|     /-------- bra.w 2c24 <CstPasteChar+0x734>
  {

    custom->bltcon0 = bltcon0 + minterm;
    2b8a:	|  /--|-------> move.l 56(sp),d0
    2b8e:	|  |  |         add.w 36(sp),d0
    2b92:	|  |  |         movea.l 16(sp),a0
    2b96:	|  |  |         move.w d0,64(a0)
    custom->bltapt = (APTR) bltapt;
    2b9a:	|  |  |         move.l 68(sp),d0
    2b9e:	|  |  |         movea.l 16(sp),a0
    2ba2:	|  |  |         move.l d0,80(a0)
    custom->bltcpt = (APTR) bltcpt;
    2ba6:	|  |  |         move.l 64(sp),d0
    2baa:	|  |  |         movea.l 16(sp),a0
    2bae:	|  |  |         move.l d0,72(a0)
    custom->bltdpt = (APTR) bltdpt;
    2bb2:	|  |  |         move.l 60(sp),d0
    2bb6:	|  |  |         movea.l 16(sp),a0
    2bba:	|  |  |         move.l d0,84(a0)
    custom->bltsize = (blitheight << 6) + blitwidth-cutwordssource+extrawords;
    2bbe:	|  |  |         move.l 44(sp),d0
    2bc2:	|  |  |         lsl.w #6,d0
    2bc4:	|  |  |         move.l 40(sp),d1
    2bc8:	|  |  |         add.w d1,d0
    2bca:	|  |  |         sub.w 76(sp),d0
    2bce:	|  |  |         add.w 78(sp),d0
    2bd2:	|  |  |         movea.l 16(sp),a0
    2bd6:	|  |  |         move.w d0,88(a0)
    bltcpt += bltcptplus;
    2bda:	|  |  |         moveq #0,d0
    2bdc:	|  |  |         move.w 14(sp),d0
    2be0:	|  |  |         add.l d0,64(sp)
    bltdpt += bltcptplus;
    2be4:	|  |  |         moveq #0,d0
    2be6:	|  |  |         move.w 14(sp),d0
    2bea:	|  |  |         add.l d0,60(sp)

    //Apply palette color to planeblit
    //Ugly double code in the name of performance
    tmp = tmp >> 1;
    2bee:	|  |  |         move.w 38(sp),d0
    2bf2:	|  |  |         lsr.w #1,d0
    2bf4:	|  |  |         move.w d0,38(sp)
    tmp2 = tmp & 0x01;
    2bf8:	|  |  |         move.w 38(sp),d1
    2bfc:	|  |  |         andi.w #1,d1
    2c00:	|  |  |         move.w d1,12(sp)
    if(tmp2) {
    2c04:	|  |  |  /----- beq.s 2c0e <CstPasteChar+0x71e>
      minterm = 0xbfa;
    2c06:	|  |  |  |      move.w #3066,36(sp)
    2c0c:	|  |  |  |  /-- bra.s 2c14 <CstPasteChar+0x724>
    } else {
      minterm = 0xb0a;
    2c0e:	|  |  |  \--|-> move.w #2826,36(sp)
    }   

    WaitBlit();    
    2c14:	|  |  |     \-> move.l 1ca8e <GfxBase>,d0
    2c1a:	|  |  |         movea.l d0,a6
    2c1c:	|  |  |         jsr -228(a6)
  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2c20:	|  |  |         addq.l #1,32(sp)
    2c24:	|  |  \-------> moveq #4,d2
    2c26:	|  |            cmp.l 32(sp),d2
    2c2a:	|  \----------- bge.w 2b8a <CstPasteChar+0x69a>
 
  }   
}
    2c2e:	\-------------> move.l (sp)+,d2
    2c30:	                movea.l (sp)+,a6
    2c32:	                lea 72(sp),sp
    2c36:	                rts

00002c38 <CstRestoreScreen>:


void CstRestoreScreen()
{
    2c38:	                   lea -24(sp),sp
    2c3c:	                   move.l a6,-(sp)
    2c3e:	                   move.l d2,-(sp)
  volatile struct Custom *custom = (struct Custom*)0xdff000;  
    2c40:	                   move.l #14675968,16(sp)

  //struct CleanupQueue *cursor  = CstCleanupQueueDrawBuffer;
  if(!CstCleanupQueueDrawBuffer || !CstDrawBuffer) {
    2c48:	                   move.l 1c9be <CstCleanupQueueDrawBuffer>,d0
    2c4e:	/----------------- beq.w 2e56 <CstRestoreScreen+0x21e>
    2c52:	|                  move.l 1c9b6 <CstDrawBuffer>,d0
    2c58:	+----------------- beq.w 2e56 <CstRestoreScreen+0x21e>
    return;
  } 

  WaitBlit();
    2c5c:	|                  move.l 1ca8e <GfxBase>,d0
    2c62:	|                  movea.l d0,a6
    2c64:	|                  jsr -228(a6)
  
  custom->bltafwm = 0xffff;
    2c68:	|                  movea.l 16(sp),a0
    2c6c:	|                  move.w #-1,68(a0)
  custom->bltalwm = 0xffff;  
    2c72:	|                  movea.l 16(sp),a0
    2c76:	|                  move.w #-1,70(a0)
  custom->bltcon0 = 0x9f0;
    2c7c:	|                  movea.l 16(sp),a0
    2c80:	|                  move.w #2544,64(a0)
  
  while(CstCleanupQueueDrawBuffer)
    2c86:	|     /----------- bra.w 2e4a <CstRestoreScreen+0x212>
  {    

    if( CstCleanupQueueDrawBuffer->person && CstCleanupQueueDrawBuffer->person->samePosCount < 3)
    2c8a:	|  /--|----------> movea.l 1c9be <CstCleanupQueueDrawBuffer>,a0
    2c90:	|  |  |            move.l 4(a0),d0
    2c94:	|  |  |  /-------- beq.w 2e18 <CstRestoreScreen+0x1e0>
    2c98:	|  |  |  |         movea.l 1c9be <CstCleanupQueueDrawBuffer>,a0
    2c9e:	|  |  |  |         movea.l 4(a0),a0
    2ca2:	|  |  |  |         move.l 16(a0),d0
    2ca6:	|  |  |  |         moveq #2,d1
    2ca8:	|  |  |  |         cmp.l d0,d1
    2caa:	|  |  |  +-------- blt.w 2e18 <CstRestoreScreen+0x1e0>
    {
      custom->bltamod = winWidth/8-CstCleanupQueueDrawBuffer->widthinwords*2;
    2cae:	|  |  |  |         move.l 1c9d6 <winWidth>,d0
    2cb4:	|  |  |  |         lsr.l #3,d0
    2cb6:	|  |  |  |         move.l d0,d1
    2cb8:	|  |  |  |         movea.l 1c9be <CstCleanupQueueDrawBuffer>,a0
    2cbe:	|  |  |  |         move.w 8(a0),d0
    2cc2:	|  |  |  |         add.w d0,d0
    2cc4:	|  |  |  |         sub.w d0,d1
    2cc6:	|  |  |  |         movea.l 16(sp),a0
    2cca:	|  |  |  |         move.w d1,100(a0)
      custom->bltdmod = winWidth/8-CstCleanupQueueDrawBuffer->widthinwords*2;
    2cce:	|  |  |  |         move.l 1c9d6 <winWidth>,d0
    2cd4:	|  |  |  |         lsr.l #3,d0
    2cd6:	|  |  |  |         move.l d0,d1
    2cd8:	|  |  |  |         movea.l 1c9be <CstCleanupQueueDrawBuffer>,a0
    2cde:	|  |  |  |         move.w 8(a0),d0
    2ce2:	|  |  |  |         add.w d0,d0
    2ce4:	|  |  |  |         sub.w d0,d1
    2ce6:	|  |  |  |         movea.l 16(sp),a0
    2cea:	|  |  |  |         move.w d1,102(a0)
      ULONG bltapt = ((ULONG) CstBackDrop) + CstCleanupQueueDrawBuffer->starty*winWidth/8 + CstCleanupQueueDrawBuffer->startxinbytes;
    2cee:	|  |  |  |         movea.l 1c9be <CstCleanupQueueDrawBuffer>,a0
    2cf4:	|  |  |  |         move.w 14(a0),d0
    2cf8:	|  |  |  |         move.w d0,d0
    2cfa:	|  |  |  |         andi.l #65535,d0
    2d00:	|  |  |  |         move.l 1c9d6 <winWidth>,d1
    2d06:	|  |  |  |         move.l d1,-(sp)
    2d08:	|  |  |  |         move.l d0,-(sp)
    2d0a:	|  |  |  |         jsr 17d1a <__mulsi3>
    2d10:	|  |  |  |         addq.l #8,sp
    2d12:	|  |  |  |         move.l d0,d1
    2d14:	|  |  |  |         lsr.l #3,d1
    2d16:	|  |  |  |         move.l 1c9a4 <CstBackDrop>,d0
    2d1c:	|  |  |  |         add.l d0,d1
    2d1e:	|  |  |  |         movea.l 1c9be <CstCleanupQueueDrawBuffer>,a0
    2d24:	|  |  |  |         move.w 12(a0),d0
    2d28:	|  |  |  |         move.w d0,d0
    2d2a:	|  |  |  |         andi.l #65535,d0
    2d30:	|  |  |  |         move.l d1,d2
    2d32:	|  |  |  |         add.l d0,d2
    2d34:	|  |  |  |         move.l d2,28(sp)
      ULONG bltdpt = ((ULONG) CstDrawBuffer) + CstCleanupQueueDrawBuffer->starty*winWidth/8 + CstCleanupQueueDrawBuffer->startxinbytes;
    2d38:	|  |  |  |         movea.l 1c9be <CstCleanupQueueDrawBuffer>,a0
    2d3e:	|  |  |  |         move.w 14(a0),d0
    2d42:	|  |  |  |         move.w d0,d0
    2d44:	|  |  |  |         andi.l #65535,d0
    2d4a:	|  |  |  |         move.l 1c9d6 <winWidth>,d1
    2d50:	|  |  |  |         move.l d1,-(sp)
    2d52:	|  |  |  |         move.l d0,-(sp)
    2d54:	|  |  |  |         jsr 17d1a <__mulsi3>
    2d5a:	|  |  |  |         addq.l #8,sp
    2d5c:	|  |  |  |         move.l d0,d1
    2d5e:	|  |  |  |         lsr.l #3,d1
    2d60:	|  |  |  |         move.l 1c9b6 <CstDrawBuffer>,d0
    2d66:	|  |  |  |         add.l d0,d1
    2d68:	|  |  |  |         movea.l 1c9be <CstCleanupQueueDrawBuffer>,a0
    2d6e:	|  |  |  |         move.w 12(a0),d0
    2d72:	|  |  |  |         move.w d0,d0
    2d74:	|  |  |  |         andi.l #65535,d0
    2d7a:	|  |  |  |         move.l d1,d2
    2d7c:	|  |  |  |         add.l d0,d2
    2d7e:	|  |  |  |         move.l d2,24(sp)
      for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2d82:	|  |  |  |         clr.l 20(sp)
    2d86:	|  |  |  |     /-- bra.w 2e0e <CstRestoreScreen+0x1d6>
      {
        custom->bltapt = (APTR) bltapt;
    2d8a:	|  |  |  |  /--|-> move.l 28(sp),d0
    2d8e:	|  |  |  |  |  |   movea.l 16(sp),a0
    2d92:	|  |  |  |  |  |   move.l d0,80(a0)
        custom->bltdpt = (APTR) bltdpt;
    2d96:	|  |  |  |  |  |   move.l 24(sp),d0
    2d9a:	|  |  |  |  |  |   movea.l 16(sp),a0
    2d9e:	|  |  |  |  |  |   move.l d0,84(a0)
        custom->bltsize = (CstCleanupQueueDrawBuffer->height << 6) + CstCleanupQueueDrawBuffer->widthinwords;
    2da2:	|  |  |  |  |  |   movea.l 1c9be <CstCleanupQueueDrawBuffer>,a0
    2da8:	|  |  |  |  |  |   move.w 10(a0),d0
    2dac:	|  |  |  |  |  |   lsl.w #6,d0
    2dae:	|  |  |  |  |  |   movea.l 1c9be <CstCleanupQueueDrawBuffer>,a0
    2db4:	|  |  |  |  |  |   move.w 8(a0),d1
    2db8:	|  |  |  |  |  |   add.w d1,d0
    2dba:	|  |  |  |  |  |   movea.l 16(sp),a0
    2dbe:	|  |  |  |  |  |   move.w d0,88(a0)
        bltapt += winWidth/8*winHeight;
    2dc2:	|  |  |  |  |  |   move.l 1c9d6 <winWidth>,d0
    2dc8:	|  |  |  |  |  |   lsr.l #3,d0
    2dca:	|  |  |  |  |  |   move.l 1c9da <winHeight>,d1
    2dd0:	|  |  |  |  |  |   move.l d1,-(sp)
    2dd2:	|  |  |  |  |  |   move.l d0,-(sp)
    2dd4:	|  |  |  |  |  |   jsr 17d1a <__mulsi3>
    2dda:	|  |  |  |  |  |   addq.l #8,sp
    2ddc:	|  |  |  |  |  |   add.l d0,28(sp)
        bltdpt += winWidth/8*winHeight;
    2de0:	|  |  |  |  |  |   move.l 1c9d6 <winWidth>,d0
    2de6:	|  |  |  |  |  |   lsr.l #3,d0
    2de8:	|  |  |  |  |  |   move.l 1c9da <winHeight>,d1
    2dee:	|  |  |  |  |  |   move.l d1,-(sp)
    2df0:	|  |  |  |  |  |   move.l d0,-(sp)
    2df2:	|  |  |  |  |  |   jsr 17d1a <__mulsi3>
    2df8:	|  |  |  |  |  |   addq.l #8,sp
    2dfa:	|  |  |  |  |  |   add.l d0,24(sp)
        WaitBlit();
    2dfe:	|  |  |  |  |  |   move.l 1ca8e <GfxBase>,d0
    2e04:	|  |  |  |  |  |   movea.l d0,a6
    2e06:	|  |  |  |  |  |   jsr -228(a6)
      for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2e0a:	|  |  |  |  |  |   addq.l #1,20(sp)
    2e0e:	|  |  |  |  |  \-> moveq #4,d0
    2e10:	|  |  |  |  |      cmp.l 20(sp),d0
    2e14:	|  |  |  |  \----- bge.w 2d8a <CstRestoreScreen+0x152>
      }
    }
    struct CleanupQueue *todelete = CstCleanupQueueDrawBuffer;
    2e18:	|  |  |  \-------> move.l 1c9be <CstCleanupQueueDrawBuffer>,12(sp)
    CstCleanupQueueDrawBuffer = CstCleanupQueueDrawBuffer->next;  
    2e20:	|  |  |            movea.l 1c9be <CstCleanupQueueDrawBuffer>,a0
    2e26:	|  |  |            move.l 16(a0),d0
    2e2a:	|  |  |            move.l d0,1c9be <CstCleanupQueueDrawBuffer>
    FreeVec(todelete);    
    2e30:	|  |  |            move.l 12(sp),8(sp)
    2e36:	|  |  |            move.l 1ca82 <SysBase>,d0
    2e3c:	|  |  |            movea.l d0,a6
    2e3e:	|  |  |            movea.l 8(sp),a1
    2e42:	|  |  |            jsr -690(a6)
    todelete = NULL;
    2e46:	|  |  |            clr.l 12(sp)
  while(CstCleanupQueueDrawBuffer)
    2e4a:	|  |  \----------> move.l 1c9be <CstCleanupQueueDrawBuffer>,d0
    2e50:	|  \-------------- bne.w 2c8a <CstRestoreScreen+0x52>
    2e54:	|              /-- bra.s 2e58 <CstRestoreScreen+0x220>
    return;
    2e56:	\--------------|-> nop
  }
  
}
    2e58:	               \-> move.l (sp)+,d2
    2e5a:	                   movea.l (sp)+,a6
    2e5c:	                   lea 24(sp),sp
    2e60:	                   rts

00002e62 <CstScaleSprite>:

void CstScaleSprite( struct sprite *single, struct onScreenPerson *person, WORD x, WORD y, UWORD destinationtype)
{  
    2e62:	                lea -132(sp),sp
    2e66:	                move.l a6,-(sp)
    2e68:	                move.l d2,-(sp)
    2e6a:	                movea.l 152(sp),a0
    2e6e:	                move.l 156(sp),d1
    2e72:	                move.l 160(sp),d0
    2e76:	                movea.w a0,a0
    2e78:	                move.w a0,12(sp)
    2e7c:	                move.w d1,d1
    2e7e:	                move.w d1,10(sp)
    2e82:	                move.w d0,d0
    2e84:	                move.w d0,8(sp)

  UBYTE *mask = CstDrawZBuffer( single, zBuffer, x, y);
    2e88:	                move.w 10(sp),d0
    2e8c:	                moveq #0,d1
    2e8e:	                move.w d0,d1
    2e90:	                move.w 12(sp),d0
    2e94:	                move.w d0,d0
    2e96:	                andi.l #65535,d0
    2e9c:	                movea.l 1cae2 <zBuffer>,a0
    2ea2:	                move.l d1,-(sp)
    2ea4:	                move.l d0,-(sp)
    2ea6:	                move.l a0,-(sp)
    2ea8:	                move.l 156(sp),-(sp)
    2eac:	                jsr 14e8 <CstDrawZBuffer>
    2eb2:	                lea 16(sp),sp
    2eb6:	                move.l d0,84(sp)

  UWORD *destination = 0;
    2eba:	                clr.l 136(sp)
  switch(destinationtype)
    2ebe:	                moveq #0,d0
    2ec0:	                move.w 8(sp),d0
    2ec4:	                moveq #1,d1
    2ec6:	                cmp.l d0,d1
    2ec8:	            /-- beq.s 2ed2 <CstScaleSprite+0x70>
    2eca:	            |   moveq #2,d2
    2ecc:	            |   cmp.l d0,d2
    2ece:	         /--|-- beq.s 2edc <CstScaleSprite+0x7a>
    2ed0:	      /--|--|-- bra.s 2eee <CstScaleSprite+0x8c>
  {
    case SCREEN:
      destination = (UWORD *) CstDrawBuffer;      
    2ed2:	      |  |  \-> move.l 1c9b6 <CstDrawBuffer>,136(sp)
      break;
    2eda:	      +--|----- bra.s 2eee <CstScaleSprite+0x8c>
    case BACKDROP:      
      CstApplyBackDropCounter = 2;
    2edc:	      |  \----> move.w #2,1c9b0 <CstApplyBackDropCounter>
      destination = (UWORD *) CstBackDrop;      
    2ee4:	      |         move.l 1c9a4 <CstBackDrop>,136(sp)
      break;
    2eec:	      |         nop
  ULONG bltcon1; //Shift Source
  ULONG ystartdst;
  ULONG ystartsrc; 
  ULONG blitheight;

  if( y < 0) {
    2eee:	      \-------> tst.w 10(sp)
    2ef2:	         /----- bge.s 2f3a <CstScaleSprite+0xd8>
    if(y + single->height < 0) {
    2ef4:	         |      movea.w 10(sp),a1
    2ef8:	         |      movea.l 144(sp),a0
    2efc:	         |      move.l 4(a0),d0
    2f00:	         |      add.l a1,d0
    2f02:	         |  /-- bpl.s 2f16 <CstScaleSprite+0xb4>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    2f04:	         |  |   pea 18149 <PutChar+0x319>
    2f0a:	         |  |   jsr 17366 <KPrintF>
    2f10:	         |  |   addq.l #4,sp
      return;
    2f12:	/--------|--|-- bra.w 394c <CstScaleSprite+0xaea>
    }
    ystartdst = 0;
    2f16:	|        |  \-> clr.l 100(sp)
    ystartsrc = y*-1;
    2f1a:	|        |      move.w 10(sp),d0
    2f1e:	|        |      ext.l d0
    2f20:	|        |      neg.l d0
    2f22:	|        |      move.l d0,96(sp)
    blitheight = single->height+y;
    2f26:	|        |      movea.l 144(sp),a0
    2f2a:	|        |      move.l 4(a0),d0
    2f2e:	|        |      movea.w 10(sp),a0
    2f32:	|        |      add.l a0,d0
    2f34:	|        |      move.l d0,92(sp)
    2f38:	|     /--|----- bra.s 2fac <CstScaleSprite+0x14a>
  } else if(y+single->height > (int) winHeight) {
    2f3a:	|     |  \----> movea.w 10(sp),a1
    2f3e:	|     |         movea.l 144(sp),a0
    2f42:	|     |         move.l 4(a0),d0
    2f46:	|     |         move.l a1,d1
    2f48:	|     |         add.l d0,d1
    2f4a:	|     |         move.l 1c9da <winHeight>,d0
    2f50:	|     |         cmp.l d1,d0
    2f52:	|     |  /----- bge.s 2f94 <CstScaleSprite+0x132>
    if(y  > (int) winHeight) {
    2f54:	|     |  |      movea.w 10(sp),a0
    2f58:	|     |  |      move.l 1c9da <winHeight>,d0
    2f5e:	|     |  |      cmp.l a0,d0
    2f60:	|     |  |  /-- bge.s 2f74 <CstScaleSprite+0x112>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    2f62:	|     |  |  |   pea 18149 <PutChar+0x319>
    2f68:	|     |  |  |   jsr 17366 <KPrintF>
    2f6e:	|     |  |  |   addq.l #4,sp
      return;
    2f70:	+-----|--|--|-- bra.w 394c <CstScaleSprite+0xaea>
    }
    ystartdst = y;
    2f74:	|     |  |  \-> movea.w 10(sp),a0
    2f78:	|     |  |      move.l a0,100(sp)
    ystartsrc = 0;
    2f7c:	|     |  |      clr.l 96(sp)
    blitheight = winHeight-y;
    2f80:	|     |  |      move.l 1c9da <winHeight>,d0
    2f86:	|     |  |      movea.w 10(sp),a0
    2f8a:	|     |  |      move.l d0,d1
    2f8c:	|     |  |      sub.l a0,d1
    2f8e:	|     |  |      move.l d1,92(sp)
    2f92:	|     +--|----- bra.s 2fac <CstScaleSprite+0x14a>
  } else {
    ystartdst = y;
    2f94:	|     |  \----> movea.w 10(sp),a0
    2f98:	|     |         move.l a0,100(sp)
    ystartsrc = 0;
    2f9c:	|     |         clr.l 96(sp)
    blitheight = single->height;
    2fa0:	|     |         movea.l 144(sp),a0
    2fa4:	|     |         move.l 4(a0),d0
    2fa8:	|     |         move.l d0,92(sp)
  }


  if( x < 0) { //Leftmost part outside screen
    2fac:	|     \-------> tst.w 12(sp)
    2fb0:	|     /-------- bge.w 3230 <CstScaleSprite+0x3ce>
    if(x + single->width < 0) {
    2fb4:	|     |         movea.w 12(sp),a1
    2fb8:	|     |         movea.l 144(sp),a0
    2fbc:	|     |         move.l (a0),d0
    2fbe:	|     |         add.l a1,d0
    2fc0:	|     |     /-- bpl.s 2fd4 <CstScaleSprite+0x172>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    2fc2:	|     |     |   pea 18149 <PutChar+0x319>
    2fc8:	|     |     |   jsr 17366 <KPrintF>
    2fce:	|     |     |   addq.l #4,sp
      return;
    2fd0:	+-----|-----|-- bra.w 394c <CstScaleSprite+0xaea>

    }
    
    extrawords = 1;
    2fd4:	|     |     \-> move.w #1,134(sp)
    cutwordssource = (x*-1)/16; 
    2fda:	|     |         move.w 12(sp),d0
    2fde:	|     |     /-- bpl.s 2fe4 <CstScaleSprite+0x182>
    2fe0:	|     |     |   addi.w #15,d0
    2fe4:	|     |     \-> asr.w #4,d0
    2fe6:	|     |         neg.w d0
    2fe8:	|     |         move.w d0,132(sp)
    cutmaskpixel = (x*-1)%16;     
    2fec:	|     |         move.w 12(sp),d0
    2ff0:	|     |         ext.l d0
    2ff2:	|     |         neg.l d0
    2ff4:	|     |         andi.l #-2147483633,d0
    2ffa:	|     |     /-- bpl.s 3004 <CstScaleSprite+0x1a2>
    2ffc:	|     |     |   subq.l #1,d0
    2ffe:	|     |     |   moveq #-16,d1
    3000:	|     |     |   or.l d1,d0
    3002:	|     |     |   addq.l #1,d0
    3004:	|     |     \-> move.w d0,130(sp)
    bltalwm = 0; //Last Word of this channel almost masked out
    3008:	|     |         clr.w 128(sp)
    bltapt = ((ULONG) mask)+cutwordssource*2+ystartsrc*single->width/8;
    300c:	|     |         moveq #0,d0
    300e:	|     |         move.w 132(sp),d0
    3012:	|     |         add.l d0,d0
    3014:	|     |         move.l d0,d1
    3016:	|     |         move.l 84(sp),d0
    301a:	|     |         move.l d1,d2
    301c:	|     |         add.l d0,d2
    301e:	|     |         movea.l 144(sp),a0
    3022:	|     |         move.l (a0),d0
    3024:	|     |         move.l 96(sp),-(sp)
    3028:	|     |         move.l d0,-(sp)
    302a:	|     |         jsr 17d1a <__mulsi3>
    3030:	|     |         addq.l #8,sp
    3032:	|     |         lsr.l #3,d0
    3034:	|     |         move.l d2,d1
    3036:	|     |         add.l d0,d1
    3038:	|     |         move.l d1,124(sp)
    bltbpt = ((ULONG) single->data)+cutwordssource*2+ystartsrc*single->width/8;
    303c:	|     |         movea.l 144(sp),a0
    3040:	|     |         move.l 24(a0),d0
    3044:	|     |         move.l d0,d1
    3046:	|     |         moveq #0,d0
    3048:	|     |         move.w 132(sp),d0
    304c:	|     |         add.l d0,d0
    304e:	|     |         move.l d1,d2
    3050:	|     |         add.l d0,d2
    3052:	|     |         movea.l 144(sp),a0
    3056:	|     |         move.l (a0),d0
    3058:	|     |         move.l 96(sp),-(sp)
    305c:	|     |         move.l d0,-(sp)
    305e:	|     |         jsr 17d1a <__mulsi3>
    3064:	|     |         addq.l #8,sp
    3066:	|     |         lsr.l #3,d0
    3068:	|     |         move.l d2,d1
    306a:	|     |         add.l d0,d1
    306c:	|     |         move.l d1,120(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    3070:	|     |         move.l 1c9d6 <winWidth>,d0
    3076:	|     |         move.l 100(sp),-(sp)
    307a:	|     |         move.l d0,-(sp)
    307c:	|     |         jsr 17d1a <__mulsi3>
    3082:	|     |         addq.l #8,sp
    3084:	|     |         lsr.l #3,d0
    3086:	|     |         move.l 136(sp),d1
    308a:	|     |         add.l d1,d0
    308c:	|     |         move.l d0,d2
    308e:	|     |         subq.l #2,d2
    3090:	|     |         move.l d2,116(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    3094:	|     |         move.l 1c9d6 <winWidth>,d0
    309a:	|     |         move.l 100(sp),-(sp)
    309e:	|     |         move.l d0,-(sp)
    30a0:	|     |         jsr 17d1a <__mulsi3>
    30a6:	|     |         addq.l #8,sp
    30a8:	|     |         lsr.l #3,d0
    30aa:	|     |         move.l 136(sp),d1
    30ae:	|     |         add.l d1,d0
    30b0:	|     |         move.l d0,d1
    30b2:	|     |         subq.l #2,d1
    30b4:	|     |         move.l d1,112(sp)
    bltcon0 = 0xfca + ((16-cutmaskpixel) << 12);
    30b8:	|     |         moveq #0,d0
    30ba:	|     |         move.w 130(sp),d0
    30be:	|     |         moveq #16,d1
    30c0:	|     |         sub.l d0,d1
    30c2:	|     |         move.l d1,d0
    30c4:	|     |         moveq #12,d2
    30c6:	|     |         lsl.l d2,d0
    30c8:	|     |         addi.l #4042,d0
    30ce:	|     |         move.l d0,108(sp)
    bltcon1 = ((16-cutmaskpixel) << 12);
    30d2:	|     |         moveq #0,d0
    30d4:	|     |         move.w 130(sp),d0
    30d8:	|     |         moveq #16,d1
    30da:	|     |         sub.l d0,d1
    30dc:	|     |         move.l d1,d0
    30de:	|     |         moveq #12,d1
    30e0:	|     |         lsl.l d1,d0
    30e2:	|     |         move.l d0,104(sp)
    if( destinationtype == SCREEN)
    30e6:	|     |         cmpi.w #1,8(sp)
    30ec:	|     |  /----- bne.w 31aa <CstScaleSprite+0x348>
    {      
      struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    30f0:	|     |  |      move.l 1c9be <CstCleanupQueueDrawBuffer>,48(sp)
      CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    30f8:	|     |  |      moveq #20,d2
    30fa:	|     |  |      move.l d2,44(sp)
    30fe:	|     |  |      clr.l 40(sp)
    3102:	|     |  |      move.l 1ca82 <SysBase>,d0
    3108:	|     |  |      movea.l d0,a6
    310a:	|     |  |      move.l 44(sp),d0
    310e:	|     |  |      move.l 40(sp),d1
    3112:	|     |  |      jsr -684(a6)
    3116:	|     |  |      move.l d0,36(sp)
    311a:	|     |  |      move.l 36(sp),d0
    311e:	|     |  |      move.l d0,1c9be <CstCleanupQueueDrawBuffer>
      CstCleanupQueueDrawBuffer->next = next;   
    3124:	|     |  |      movea.l 1c9be <CstCleanupQueueDrawBuffer>,a0
    312a:	|     |  |      move.l 48(sp),16(a0)

      CstCleanupQueueDrawBuffer->x = x;
    3130:	|     |  |      movea.l 1c9be <CstCleanupQueueDrawBuffer>,a0
    3136:	|     |  |      move.w 12(sp),d0
    313a:	|     |  |      move.w d0,(a0)
      CstCleanupQueueDrawBuffer->y = y;
    313c:	|     |  |      movea.l 1c9be <CstCleanupQueueDrawBuffer>,a0
    3142:	|     |  |      move.w 10(sp),d0
    3146:	|     |  |      move.w d0,2(a0)
      CstCleanupQueueDrawBuffer->person = person;      
    314a:	|     |  |      movea.l 1c9be <CstCleanupQueueDrawBuffer>,a0
    3150:	|     |  |      move.l 148(sp),4(a0)

      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; //Width in X Bytes
    3156:	|     |  |      movea.l 144(sp),a0
    315a:	|     |  |      move.l (a0),d0
    315c:	|     |  |      movea.l d0,a0
    315e:	|     |  |      cmpa.w #0,a0
    3162:	|     |  |  /-- bge.s 3168 <CstScaleSprite+0x306>
    3164:	|     |  |  |   lea 15(a0),a0
    3168:	|     |  |  \-> move.l a0,d0
    316a:	|     |  |      asr.l #4,d0
    316c:	|     |  |      move.l d0,d0
    316e:	|     |  |      add.w 132(sp),d0
    3172:	|     |  |      movea.l 1c9be <CstCleanupQueueDrawBuffer>,a0
    3178:	|     |  |      add.w 134(sp),d0
    317c:	|     |  |      move.w d0,8(a0)
      CstCleanupQueueDrawBuffer->height = blitheight;
    3180:	|     |  |      movea.l 1c9be <CstCleanupQueueDrawBuffer>,a0
    3186:	|     |  |      move.l 92(sp),d0
    318a:	|     |  |      move.w d0,10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes = 0;
    318e:	|     |  |      movea.l 1c9be <CstCleanupQueueDrawBuffer>,a0
    3194:	|     |  |      clr.w 12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    3198:	|     |  |      movea.l 1c9be <CstCleanupQueueDrawBuffer>,a0
    319e:	|     |  |      move.l 100(sp),d0
    31a2:	|     |  |      move.w d0,14(a0)
    31a6:	|  /--|--|----- bra.w 375e <CstScaleSprite+0x8fc>
    } else {
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    31aa:	|  |  |  \----> movea.l 144(sp),a0
    31ae:	|  |  |         move.l (a0),d0
    31b0:	|  |  |         movea.l d0,a0
    31b2:	|  |  |         cmpa.w #0,a0
    31b6:	|  |  |     /-- bge.s 31bc <CstScaleSprite+0x35a>
    31b8:	|  |  |     |   lea 15(a0),a0
    31bc:	|  |  |     \-> move.l a0,d0
    31be:	|  |  |         asr.l #4,d0
    31c0:	|  |  |         move.l d0,d0
    31c2:	|  |  |         add.w 132(sp),d0
    31c6:	|  |  |         movea.l 1c9c6 <CstBackDropBufferApplyCursor>,a0
    31cc:	|  |  |         move.l a0,d1
    31ce:	|  |  |         addq.l #2,d1
    31d0:	|  |  |         move.l d1,1c9c6 <CstBackDropBufferApplyCursor>
    31d6:	|  |  |         add.w 134(sp),d0
    31da:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    31dc:	|  |  |         movea.l 1c9c6 <CstBackDropBufferApplyCursor>,a0
    31e2:	|  |  |         move.l a0,d0
    31e4:	|  |  |         addq.l #2,d0
    31e6:	|  |  |         move.l d0,1c9c6 <CstBackDropBufferApplyCursor>
    31ec:	|  |  |         move.l 92(sp),d0
    31f0:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    31f2:	|  |  |         movea.l 1c9c6 <CstBackDropBufferApplyCursor>,a0
    31f8:	|  |  |         move.l a0,d0
    31fa:	|  |  |         addq.l #2,d0
    31fc:	|  |  |         move.l d0,1c9c6 <CstBackDropBufferApplyCursor>
    3202:	|  |  |         clr.w (a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    3204:	|  |  |         movea.l 1c9c6 <CstBackDropBufferApplyCursor>,a0
    320a:	|  |  |         move.l a0,d0
    320c:	|  |  |         addq.l #2,d0
    320e:	|  |  |         move.l d0,1c9c6 <CstBackDropBufferApplyCursor>
    3214:	|  |  |         move.l 100(sp),d0
    3218:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    321a:	|  |  |         movea.l 1c9c6 <CstBackDropBufferApplyCursor>,a0
    3220:	|  |  |         move.l a0,d0
    3222:	|  |  |         addq.l #2,d0
    3224:	|  |  |         move.l d0,1c9c6 <CstBackDropBufferApplyCursor>
    322a:	|  |  |         clr.w (a0)
    322c:	|  +--|-------- bra.w 375e <CstScaleSprite+0x8fc>
    }
  } else if(x + single->width > (int) winWidth) { //Rightmost part outside screen   
    3230:	|  |  \-------> movea.w 12(sp),a1
    3234:	|  |            movea.l 144(sp),a0
    3238:	|  |            move.l (a0),d0
    323a:	|  |            move.l a1,d1
    323c:	|  |            add.l d0,d1
    323e:	|  |            move.l 1c9d6 <winWidth>,d0
    3244:	|  |            cmp.l d1,d0
    3246:	|  |  /-------- bge.w 34f6 <CstScaleSprite+0x694>

    if(x - single->width > (int) winWidth)
    324a:	|  |  |         movea.w 12(sp),a1
    324e:	|  |  |         movea.l 144(sp),a0
    3252:	|  |  |         move.l (a0),d0
    3254:	|  |  |         move.l a1,d1
    3256:	|  |  |         sub.l d0,d1
    3258:	|  |  |         move.l 1c9d6 <winWidth>,d0
    325e:	|  |  |         cmp.l d1,d0
    3260:	|  |  |     /-- bge.s 3274 <CstScaleSprite+0x412>
    {    
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    3262:	|  |  |     |   pea 18149 <PutChar+0x319>
    3268:	|  |  |     |   jsr 17366 <KPrintF>
    326e:	|  |  |     |   addq.l #4,sp
      return;
    3270:	+--|--|-----|-- bra.w 394c <CstScaleSprite+0xaea>
    }
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    3274:	|  |  |     \-> clr.w 134(sp)
    cutwordssource = (x+single->width - winWidth)/16;
    3278:	|  |  |         movea.w 12(sp),a1
    327c:	|  |  |         movea.l 144(sp),a0
    3280:	|  |  |         move.l (a0),d0
    3282:	|  |  |         add.l a1,d0
    3284:	|  |  |         move.l d0,d1
    3286:	|  |  |         move.l 1c9d6 <winWidth>,d0
    328c:	|  |  |         sub.l d0,d1
    328e:	|  |  |         move.l d1,d0
    3290:	|  |  |         lsr.l #4,d0
    3292:	|  |  |         move.w d0,132(sp)
    cutmaskpixel = 0;
    3296:	|  |  |         clr.w 130(sp)
    bltalwm = 0xffff; //Last word contains source data to be blit
    329a:	|  |  |         move.w #-1,128(sp)
    bltapt = ((ULONG) mask)+ystartsrc*single->width/8;
    32a0:	|  |  |         movea.l 144(sp),a0
    32a4:	|  |  |         move.l (a0),d0
    32a6:	|  |  |         move.l 96(sp),-(sp)
    32aa:	|  |  |         move.l d0,-(sp)
    32ac:	|  |  |         jsr 17d1a <__mulsi3>
    32b2:	|  |  |         addq.l #8,sp
    32b4:	|  |  |         lsr.l #3,d0
    32b6:	|  |  |         move.l 84(sp),d1
    32ba:	|  |  |         move.l d0,d2
    32bc:	|  |  |         add.l d1,d2
    32be:	|  |  |         move.l d2,124(sp)
    bltbpt = (ULONG) single->data+ystartsrc*single->width/8;
    32c2:	|  |  |         movea.l 144(sp),a0
    32c6:	|  |  |         move.l 24(a0),d0
    32ca:	|  |  |         move.l d0,d2
    32cc:	|  |  |         movea.l 144(sp),a0
    32d0:	|  |  |         move.l (a0),d0
    32d2:	|  |  |         move.l 96(sp),-(sp)
    32d6:	|  |  |         move.l d0,-(sp)
    32d8:	|  |  |         jsr 17d1a <__mulsi3>
    32de:	|  |  |         addq.l #8,sp
    32e0:	|  |  |         lsr.l #3,d0
    32e2:	|  |  |         move.l d2,d1
    32e4:	|  |  |         add.l d0,d1
    32e6:	|  |  |         move.l d1,120(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    32ea:	|  |  |         move.l 1c9d6 <winWidth>,d0
    32f0:	|  |  |         move.l 100(sp),-(sp)
    32f4:	|  |  |         move.l d0,-(sp)
    32f6:	|  |  |         jsr 17d1a <__mulsi3>
    32fc:	|  |  |         addq.l #8,sp
    32fe:	|  |  |         lsr.l #3,d0
    3300:	|  |  |         move.l 136(sp),d1
    3304:	|  |  |         add.l d0,d1
    3306:	|  |  |         move.w 12(sp),d0
    330a:	|  |  |     /-- bpl.s 3310 <CstScaleSprite+0x4ae>
    330c:	|  |  |     |   addi.w #15,d0
    3310:	|  |  |     \-> asr.w #4,d0
    3312:	|  |  |         movea.w d0,a0
    3314:	|  |  |         move.l a0,d0
    3316:	|  |  |         add.l a0,d0
    3318:	|  |  |         move.l d1,d2
    331a:	|  |  |         add.l d0,d2
    331c:	|  |  |         move.l d2,116(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    3320:	|  |  |         move.l 1c9d6 <winWidth>,d0
    3326:	|  |  |         move.l 100(sp),-(sp)
    332a:	|  |  |         move.l d0,-(sp)
    332c:	|  |  |         jsr 17d1a <__mulsi3>
    3332:	|  |  |         addq.l #8,sp
    3334:	|  |  |         lsr.l #3,d0
    3336:	|  |  |         move.l 136(sp),d1
    333a:	|  |  |         add.l d0,d1
    333c:	|  |  |         move.w 12(sp),d0
    3340:	|  |  |     /-- bpl.s 3346 <CstScaleSprite+0x4e4>
    3342:	|  |  |     |   addi.w #15,d0
    3346:	|  |  |     \-> asr.w #4,d0
    3348:	|  |  |         movea.w d0,a0
    334a:	|  |  |         move.l a0,d0
    334c:	|  |  |         add.l a0,d0
    334e:	|  |  |         move.l d1,d2
    3350:	|  |  |         add.l d0,d2
    3352:	|  |  |         move.l d2,112(sp)
    bltcon0 = 0xfca + ((single->width%16) << 12);
    3356:	|  |  |         movea.l 144(sp),a0
    335a:	|  |  |         move.l (a0),d0
    335c:	|  |  |         andi.l #-2147483633,d0
    3362:	|  |  |     /-- bpl.s 336c <CstScaleSprite+0x50a>
    3364:	|  |  |     |   subq.l #1,d0
    3366:	|  |  |     |   moveq #-16,d1
    3368:	|  |  |     |   or.l d1,d0
    336a:	|  |  |     |   addq.l #1,d0
    336c:	|  |  |     \-> moveq #12,d2
    336e:	|  |  |         lsl.l d2,d0
    3370:	|  |  |         addi.l #4042,d0
    3376:	|  |  |         move.l d0,108(sp)
    bltcon1 = ((single->width%16) << 12);
    337a:	|  |  |         movea.l 144(sp),a0
    337e:	|  |  |         move.l (a0),d0
    3380:	|  |  |         andi.l #-2147483633,d0
    3386:	|  |  |     /-- bpl.s 3390 <CstScaleSprite+0x52e>
    3388:	|  |  |     |   subq.l #1,d0
    338a:	|  |  |     |   moveq #-16,d1
    338c:	|  |  |     |   or.l d1,d0
    338e:	|  |  |     |   addq.l #1,d0
    3390:	|  |  |     \-> moveq #12,d2
    3392:	|  |  |         lsl.l d2,d0
    3394:	|  |  |         move.l d0,104(sp)
    if( destinationtype == SCREEN)
    3398:	|  |  |         cmpi.w #1,8(sp)
    339e:	|  |  |  /----- bne.w 3466 <CstScaleSprite+0x604>
    {
      struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    33a2:	|  |  |  |      move.l 1c9be <CstCleanupQueueDrawBuffer>,64(sp)
      CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    33aa:	|  |  |  |      moveq #20,d0
    33ac:	|  |  |  |      move.l d0,60(sp)
    33b0:	|  |  |  |      clr.l 56(sp)
    33b4:	|  |  |  |      move.l 1ca82 <SysBase>,d0
    33ba:	|  |  |  |      movea.l d0,a6
    33bc:	|  |  |  |      move.l 60(sp),d0
    33c0:	|  |  |  |      move.l 56(sp),d1
    33c4:	|  |  |  |      jsr -684(a6)
    33c8:	|  |  |  |      move.l d0,52(sp)
    33cc:	|  |  |  |      move.l 52(sp),d0
    33d0:	|  |  |  |      move.l d0,1c9be <CstCleanupQueueDrawBuffer>
      CstCleanupQueueDrawBuffer->next = next;   
    33d6:	|  |  |  |      movea.l 1c9be <CstCleanupQueueDrawBuffer>,a0
    33dc:	|  |  |  |      move.l 64(sp),16(a0)

      CstCleanupQueueDrawBuffer->x = x;
    33e2:	|  |  |  |      movea.l 1c9be <CstCleanupQueueDrawBuffer>,a0
    33e8:	|  |  |  |      move.w 12(sp),d0
    33ec:	|  |  |  |      move.w d0,(a0)
      CstCleanupQueueDrawBuffer->y = y;
    33ee:	|  |  |  |      movea.l 1c9be <CstCleanupQueueDrawBuffer>,a0
    33f4:	|  |  |  |      move.w 10(sp),d0
    33f8:	|  |  |  |      move.w d0,2(a0)
      CstCleanupQueueDrawBuffer->person = person; 
    33fc:	|  |  |  |      movea.l 1c9be <CstCleanupQueueDrawBuffer>,a0
    3402:	|  |  |  |      move.l 148(sp),4(a0)
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource; //Width in X Bytes
    3408:	|  |  |  |      movea.l 144(sp),a0
    340c:	|  |  |  |      move.l (a0),d0
    340e:	|  |  |  |      movea.l d0,a0
    3410:	|  |  |  |      cmpa.w #0,a0
    3414:	|  |  |  |  /-- bge.s 341a <CstScaleSprite+0x5b8>
    3416:	|  |  |  |  |   lea 15(a0),a0
    341a:	|  |  |  |  \-> move.l a0,d0
    341c:	|  |  |  |      asr.l #4,d0
    341e:	|  |  |  |      move.l d0,d0
    3420:	|  |  |  |      movea.l 1c9be <CstCleanupQueueDrawBuffer>,a0
    3426:	|  |  |  |      add.w 132(sp),d0
    342a:	|  |  |  |      move.w d0,8(a0)
      CstCleanupQueueDrawBuffer->height =  blitheight; //Height
    342e:	|  |  |  |      movea.l 1c9be <CstCleanupQueueDrawBuffer>,a0
    3434:	|  |  |  |      move.l 92(sp),d0
    3438:	|  |  |  |      move.w d0,10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; //X Start in Bytes;
    343c:	|  |  |  |      move.w 12(sp),d0
    3440:	|  |  |  |  /-- bpl.s 3446 <CstScaleSprite+0x5e4>
    3442:	|  |  |  |  |   addi.w #15,d0
    3446:	|  |  |  |  \-> asr.w #4,d0
    3448:	|  |  |  |      movea.l 1c9be <CstCleanupQueueDrawBuffer>,a0
    344e:	|  |  |  |      add.w d0,d0
    3450:	|  |  |  |      move.w d0,12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    3454:	|  |  |  |      movea.l 1c9be <CstCleanupQueueDrawBuffer>,a0
    345a:	|  |  |  |      move.l 100(sp),d0
    345e:	|  |  |  |      move.w d0,14(a0)
    3462:	|  +--|--|----- bra.w 375e <CstScaleSprite+0x8fc>
    } else {
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource;
    3466:	|  |  |  \----> movea.l 144(sp),a0
    346a:	|  |  |         move.l (a0),d0
    346c:	|  |  |         movea.l d0,a0
    346e:	|  |  |         cmpa.w #0,a0
    3472:	|  |  |     /-- bge.s 3478 <CstScaleSprite+0x616>
    3474:	|  |  |     |   lea 15(a0),a0
    3478:	|  |  |     \-> move.l a0,d0
    347a:	|  |  |         asr.l #4,d0
    347c:	|  |  |         move.l d0,d0
    347e:	|  |  |         movea.l 1c9c6 <CstBackDropBufferApplyCursor>,a0
    3484:	|  |  |         move.l a0,d1
    3486:	|  |  |         addq.l #2,d1
    3488:	|  |  |         move.l d1,1c9c6 <CstBackDropBufferApplyCursor>
    348e:	|  |  |         add.w 132(sp),d0
    3492:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    3494:	|  |  |         movea.l 1c9c6 <CstBackDropBufferApplyCursor>,a0
    349a:	|  |  |         move.l a0,d0
    349c:	|  |  |         addq.l #2,d0
    349e:	|  |  |         move.l d0,1c9c6 <CstBackDropBufferApplyCursor>
    34a4:	|  |  |         move.l 92(sp),d0
    34a8:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = (x/16)*2;
    34aa:	|  |  |         move.w 12(sp),d0
    34ae:	|  |  |     /-- bpl.s 34b4 <CstScaleSprite+0x652>
    34b0:	|  |  |     |   addi.w #15,d0
    34b4:	|  |  |     \-> asr.w #4,d0
    34b6:	|  |  |         movea.l 1c9c6 <CstBackDropBufferApplyCursor>,a0
    34bc:	|  |  |         move.l a0,d1
    34be:	|  |  |         addq.l #2,d1
    34c0:	|  |  |         move.l d1,1c9c6 <CstBackDropBufferApplyCursor>
    34c6:	|  |  |         add.w d0,d0
    34c8:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    34ca:	|  |  |         movea.l 1c9c6 <CstBackDropBufferApplyCursor>,a0
    34d0:	|  |  |         move.l a0,d0
    34d2:	|  |  |         addq.l #2,d0
    34d4:	|  |  |         move.l d0,1c9c6 <CstBackDropBufferApplyCursor>
    34da:	|  |  |         move.l 100(sp),d0
    34de:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    34e0:	|  |  |         movea.l 1c9c6 <CstBackDropBufferApplyCursor>,a0
    34e6:	|  |  |         move.l a0,d0
    34e8:	|  |  |         addq.l #2,d0
    34ea:	|  |  |         move.l d0,1c9c6 <CstBackDropBufferApplyCursor>
    34f0:	|  |  |         clr.w (a0)
    34f2:	|  +--|-------- bra.w 375e <CstScaleSprite+0x8fc>
    }
  } else { //Whole Sprite on Screen

    extrawords = 1;
    34f6:	|  |  \-------> move.w #1,134(sp)
    cutwordssource = 0;
    34fc:	|  |            clr.w 132(sp)
    cutmaskpixel = 0;
    3500:	|  |            clr.w 130(sp)
    bltalwm = 0; //Last Word of this channel almost masked out
    3504:	|  |            clr.w 128(sp)
    bltapt = ((ULONG) mask) +ystartsrc*single->width/8;
    3508:	|  |            movea.l 144(sp),a0
    350c:	|  |            move.l (a0),d0
    350e:	|  |            move.l 96(sp),-(sp)
    3512:	|  |            move.l d0,-(sp)
    3514:	|  |            jsr 17d1a <__mulsi3>
    351a:	|  |            addq.l #8,sp
    351c:	|  |            lsr.l #3,d0
    351e:	|  |            move.l 84(sp),d1
    3522:	|  |            move.l d0,d2
    3524:	|  |            add.l d1,d2
    3526:	|  |            move.l d2,124(sp)
    bltbpt = (ULONG) single->data+ystartsrc*single->width/8;
    352a:	|  |            movea.l 144(sp),a0
    352e:	|  |            move.l 24(a0),d0
    3532:	|  |            move.l d0,d2
    3534:	|  |            movea.l 144(sp),a0
    3538:	|  |            move.l (a0),d0
    353a:	|  |            move.l 96(sp),-(sp)
    353e:	|  |            move.l d0,-(sp)
    3540:	|  |            jsr 17d1a <__mulsi3>
    3546:	|  |            addq.l #8,sp
    3548:	|  |            lsr.l #3,d0
    354a:	|  |            move.l d2,d1
    354c:	|  |            add.l d0,d1
    354e:	|  |            move.l d1,120(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    3552:	|  |            move.l 1c9d6 <winWidth>,d0
    3558:	|  |            move.l 100(sp),-(sp)
    355c:	|  |            move.l d0,-(sp)
    355e:	|  |            jsr 17d1a <__mulsi3>
    3564:	|  |            addq.l #8,sp
    3566:	|  |            lsr.l #3,d0
    3568:	|  |            move.l 136(sp),d1
    356c:	|  |            add.l d0,d1
    356e:	|  |            move.w 12(sp),d0
    3572:	|  |        /-- bpl.s 3578 <CstScaleSprite+0x716>
    3574:	|  |        |   addi.w #15,d0
    3578:	|  |        \-> asr.w #4,d0
    357a:	|  |            movea.w d0,a0
    357c:	|  |            move.l a0,d0
    357e:	|  |            add.l a0,d0
    3580:	|  |            move.l d1,d2
    3582:	|  |            add.l d0,d2
    3584:	|  |            move.l d2,116(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    3588:	|  |            move.l 1c9d6 <winWidth>,d0
    358e:	|  |            move.l 100(sp),-(sp)
    3592:	|  |            move.l d0,-(sp)
    3594:	|  |            jsr 17d1a <__mulsi3>
    359a:	|  |            addq.l #8,sp
    359c:	|  |            lsr.l #3,d0
    359e:	|  |            move.l 136(sp),d1
    35a2:	|  |            add.l d0,d1
    35a4:	|  |            move.w 12(sp),d0
    35a8:	|  |        /-- bpl.s 35ae <CstScaleSprite+0x74c>
    35aa:	|  |        |   addi.w #15,d0
    35ae:	|  |        \-> asr.w #4,d0
    35b0:	|  |            movea.w d0,a0
    35b2:	|  |            move.l a0,d0
    35b4:	|  |            add.l a0,d0
    35b6:	|  |            move.l d1,d2
    35b8:	|  |            add.l d0,d2
    35ba:	|  |            move.l d2,112(sp)
    bltcon0 = 0xfca + ((x%16) << 12);
    35be:	|  |            move.w 12(sp),d0
    35c2:	|  |            andi.w #-32753,d0
    35c6:	|  |        /-- bpl.s 35d0 <CstScaleSprite+0x76e>
    35c8:	|  |        |   subq.w #1,d0
    35ca:	|  |        |   ori.w #-16,d0
    35ce:	|  |        |   addq.w #1,d0
    35d0:	|  |        \-> ext.l d0
    35d2:	|  |            moveq #12,d1
    35d4:	|  |            lsl.l d1,d0
    35d6:	|  |            addi.l #4042,d0
    35dc:	|  |            move.l d0,108(sp)
    bltcon1 = ((x%16) << 12);
    35e0:	|  |            move.w 12(sp),d0
    35e4:	|  |            andi.w #-32753,d0
    35e8:	|  |        /-- bpl.s 35f2 <CstScaleSprite+0x790>
    35ea:	|  |        |   subq.w #1,d0
    35ec:	|  |        |   ori.w #-16,d0
    35f0:	|  |        |   addq.w #1,d0
    35f2:	|  |        \-> ext.l d0
    35f4:	|  |            moveq #12,d2
    35f6:	|  |            lsl.l d2,d0
    35f8:	|  |            move.l d0,104(sp)
    if( destinationtype == SCREEN)
    35fc:	|  |            cmpi.w #1,8(sp)
    3602:	|  |     /----- bne.w 36ce <CstScaleSprite+0x86c>
    {
      struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    3606:	|  |     |      move.l 1c9be <CstCleanupQueueDrawBuffer>,80(sp)
      CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    360e:	|  |     |      moveq #20,d0
    3610:	|  |     |      move.l d0,76(sp)
    3614:	|  |     |      clr.l 72(sp)
    3618:	|  |     |      move.l 1ca82 <SysBase>,d0
    361e:	|  |     |      movea.l d0,a6
    3620:	|  |     |      move.l 76(sp),d0
    3624:	|  |     |      move.l 72(sp),d1
    3628:	|  |     |      jsr -684(a6)
    362c:	|  |     |      move.l d0,68(sp)
    3630:	|  |     |      move.l 68(sp),d0
    3634:	|  |     |      move.l d0,1c9be <CstCleanupQueueDrawBuffer>
      CstCleanupQueueDrawBuffer->next = next;   
    363a:	|  |     |      movea.l 1c9be <CstCleanupQueueDrawBuffer>,a0
    3640:	|  |     |      move.l 80(sp),16(a0)

      CstCleanupQueueDrawBuffer->x = x;
    3646:	|  |     |      movea.l 1c9be <CstCleanupQueueDrawBuffer>,a0
    364c:	|  |     |      move.w 12(sp),d0
    3650:	|  |     |      move.w d0,(a0)
      CstCleanupQueueDrawBuffer->y = y;
    3652:	|  |     |      movea.l 1c9be <CstCleanupQueueDrawBuffer>,a0
    3658:	|  |     |      move.w 10(sp),d0
    365c:	|  |     |      move.w d0,2(a0)
      CstCleanupQueueDrawBuffer->person = person; 
    3660:	|  |     |      movea.l 1c9be <CstCleanupQueueDrawBuffer>,a0
    3666:	|  |     |      move.l 148(sp),4(a0)
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; 
    366c:	|  |     |      movea.l 144(sp),a0
    3670:	|  |     |      move.l (a0),d0
    3672:	|  |     |      movea.l d0,a0
    3674:	|  |     |      cmpa.w #0,a0
    3678:	|  |     |  /-- bge.s 367e <CstScaleSprite+0x81c>
    367a:	|  |     |  |   lea 15(a0),a0
    367e:	|  |     |  \-> move.l a0,d0
    3680:	|  |     |      asr.l #4,d0
    3682:	|  |     |      move.l d0,d0
    3684:	|  |     |      add.w 132(sp),d0
    3688:	|  |     |      movea.l 1c9be <CstCleanupQueueDrawBuffer>,a0
    368e:	|  |     |      add.w 134(sp),d0
    3692:	|  |     |      move.w d0,8(a0)
      CstCleanupQueueDrawBuffer->height =  blitheight; 
    3696:	|  |     |      movea.l 1c9be <CstCleanupQueueDrawBuffer>,a0
    369c:	|  |     |      move.l 92(sp),d0
    36a0:	|  |     |      move.w d0,10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; 
    36a4:	|  |     |      move.w 12(sp),d0
    36a8:	|  |     |  /-- bpl.s 36ae <CstScaleSprite+0x84c>
    36aa:	|  |     |  |   addi.w #15,d0
    36ae:	|  |     |  \-> asr.w #4,d0
    36b0:	|  |     |      movea.l 1c9be <CstCleanupQueueDrawBuffer>,a0
    36b6:	|  |     |      add.w d0,d0
    36b8:	|  |     |      move.w d0,12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    36bc:	|  |     |      movea.l 1c9be <CstCleanupQueueDrawBuffer>,a0
    36c2:	|  |     |      move.l 100(sp),d0
    36c6:	|  |     |      move.w d0,14(a0)
    36ca:	|  +-----|----- bra.w 375e <CstScaleSprite+0x8fc>
    } else
    {
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    36ce:	|  |     \----> movea.l 144(sp),a0
    36d2:	|  |            move.l (a0),d0
    36d4:	|  |            movea.l d0,a0
    36d6:	|  |            cmpa.w #0,a0
    36da:	|  |        /-- bge.s 36e0 <CstScaleSprite+0x87e>
    36dc:	|  |        |   lea 15(a0),a0
    36e0:	|  |        \-> move.l a0,d0
    36e2:	|  |            asr.l #4,d0
    36e4:	|  |            move.l d0,d0
    36e6:	|  |            add.w 132(sp),d0
    36ea:	|  |            movea.l 1c9c6 <CstBackDropBufferApplyCursor>,a0
    36f0:	|  |            move.l a0,d1
    36f2:	|  |            addq.l #2,d1
    36f4:	|  |            move.l d1,1c9c6 <CstBackDropBufferApplyCursor>
    36fa:	|  |            add.w 134(sp),d0
    36fe:	|  |            move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    3700:	|  |            movea.l 1c9c6 <CstBackDropBufferApplyCursor>,a0
    3706:	|  |            move.l a0,d0
    3708:	|  |            addq.l #2,d0
    370a:	|  |            move.l d0,1c9c6 <CstBackDropBufferApplyCursor>
    3710:	|  |            move.l 92(sp),d0
    3714:	|  |            move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = (x/16)*2;
    3716:	|  |            move.w 12(sp),d0
    371a:	|  |        /-- bpl.s 3720 <CstScaleSprite+0x8be>
    371c:	|  |        |   addi.w #15,d0
    3720:	|  |        \-> asr.w #4,d0
    3722:	|  |            movea.l 1c9c6 <CstBackDropBufferApplyCursor>,a0
    3728:	|  |            move.l a0,d1
    372a:	|  |            addq.l #2,d1
    372c:	|  |            move.l d1,1c9c6 <CstBackDropBufferApplyCursor>
    3732:	|  |            add.w d0,d0
    3734:	|  |            move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    3736:	|  |            movea.l 1c9c6 <CstBackDropBufferApplyCursor>,a0
    373c:	|  |            move.l a0,d0
    373e:	|  |            addq.l #2,d0
    3740:	|  |            move.l d0,1c9c6 <CstBackDropBufferApplyCursor>
    3746:	|  |            move.l 100(sp),d0
    374a:	|  |            move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    374c:	|  |            movea.l 1c9c6 <CstBackDropBufferApplyCursor>,a0
    3752:	|  |            move.l a0,d0
    3754:	|  |            addq.l #2,d0
    3756:	|  |            move.l d0,1c9c6 <CstBackDropBufferApplyCursor>
    375c:	|  |            clr.w (a0)

 /*if(person && person->samePosCount > 3) {
    return;
  }*/

  UWORD bltafwm = 0xffff >> cutmaskpixel;
    375e:	|  \----------> moveq #0,d0
    3760:	|               move.w 130(sp),d0
    3764:	|               moveq #0,d1
    3766:	|               not.w d1
    3768:	|               asr.l d0,d1
    376a:	|               move.w d1,34(sp)
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    376e:	|               moveq #0,d1
    3770:	|               move.w 132(sp),d1
    3774:	|               moveq #0,d0
    3776:	|               move.w 134(sp),d0
    377a:	|               sub.l d0,d1
    377c:	|               move.l d1,d0
    377e:	|               add.w d0,d0
    3780:	|               move.w d0,32(sp)
  WORD bltbmod = cutwordssource*2-(extrawords*2); //Jump to next line
    3784:	|               moveq #0,d1
    3786:	|               move.w 132(sp),d1
    378a:	|               moveq #0,d0
    378c:	|               move.w 134(sp),d0
    3790:	|               sub.l d0,d1
    3792:	|               move.l d1,d0
    3794:	|               add.w d0,d0
    3796:	|               move.w d0,30(sp)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    379a:	|               move.l 1c9d6 <winWidth>,d0
    37a0:	|               lsr.l #3,d0
    37a2:	|               move.l d0,d1
    37a4:	|               movea.l 144(sp),a0
    37a8:	|               move.l (a0),d0
    37aa:	|           /-- bpl.s 37ae <CstScaleSprite+0x94c>
    37ac:	|           |   addq.l #7,d0
    37ae:	|           \-> asr.l #3,d0
    37b0:	|               move.l d0,d0
    37b2:	|               sub.w d0,d1
    37b4:	|               move.w 132(sp),d0
    37b8:	|               sub.w 134(sp),d0
    37bc:	|               add.w d0,d0
    37be:	|               add.w d1,d0
    37c0:	|               move.w d0,28(sp)
  WORD bltdmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    37c4:	|               move.l 1c9d6 <winWidth>,d0
    37ca:	|               lsr.l #3,d0
    37cc:	|               move.l d0,d1
    37ce:	|               movea.l 144(sp),a0
    37d2:	|               move.l (a0),d0
    37d4:	|           /-- bpl.s 37d8 <CstScaleSprite+0x976>
    37d6:	|           |   addq.l #7,d0
    37d8:	|           \-> asr.l #3,d0
    37da:	|               move.l d0,d0
    37dc:	|               sub.w d0,d1
    37de:	|               move.w 132(sp),d0
    37e2:	|               sub.w 134(sp),d0
    37e6:	|               add.w d0,d0
    37e8:	|               add.w d1,d0
    37ea:	|               move.w d0,26(sp)

  volatile struct Custom *custom = (struct Custom*)0xdff000;
    37ee:	|               move.l #14675968,22(sp)
  WaitBlit();
    37f6:	|               move.l 1ca8e <GfxBase>,d0
    37fc:	|               movea.l d0,a6
    37fe:	|               jsr -228(a6)

  custom->bltafwm = bltafwm;
    3802:	|               movea.l 22(sp),a0
    3806:	|               move.w 34(sp),68(a0)
  custom->bltalwm = bltalwm;
    380c:	|               movea.l 22(sp),a0
    3810:	|               move.w 128(sp),70(a0)
  custom->bltamod = bltamod;
    3816:	|               move.w 32(sp),d0
    381a:	|               movea.l 22(sp),a0
    381e:	|               move.w d0,100(a0)
  custom->bltbmod = bltbmod;
    3822:	|               move.w 30(sp),d0
    3826:	|               movea.l 22(sp),a0
    382a:	|               move.w d0,98(a0)
  custom->bltcmod = bltcmod;
    382e:	|               move.w 28(sp),d0
    3832:	|               movea.l 22(sp),a0
    3836:	|               move.w d0,96(a0)
  custom->bltdmod = bltdmod;
    383a:	|               move.w 26(sp),d0
    383e:	|               movea.l 22(sp),a0
    3842:	|               move.w d0,102(a0)
  custom->bltcon0 = bltcon0;
    3846:	|               move.l 108(sp),d0
    384a:	|               movea.l 22(sp),a0
    384e:	|               move.w d0,64(a0)
  custom->bltcon1 = bltcon1;  
    3852:	|               move.l 104(sp),d0
    3856:	|               movea.l 22(sp),a0
    385a:	|               move.w d0,66(a0)

  UWORD bltbptplus = (single->width >> 3)*single->height;
    385e:	|               movea.l 144(sp),a0
    3862:	|               move.l (a0),d0
    3864:	|               asr.l #3,d0
    3866:	|               move.l d0,d1
    3868:	|               movea.l 144(sp),a0
    386c:	|               move.l 4(a0),d0
    3870:	|               move.l d0,d0
    3872:	|               move.w d1,d2
    3874:	|               muls.w d0,d2
    3876:	|               move.w d2,20(sp)
  UWORD bltcptplus = winWidth/8*winHeight;
    387a:	|               move.l 1c9d6 <winWidth>,d0
    3880:	|               lsr.l #3,d0
    3882:	|               move.l d0,d1
    3884:	|               move.l 1c9da <winHeight>,d0
    388a:	|               move.l d0,d0
    388c:	|               move.w d1,d2
    388e:	|               muls.w d0,d2
    3890:	|               move.w d2,18(sp)
  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    3894:	|               clr.l 88(sp)
    3898:	|        /----- bra.w 392c <CstScaleSprite+0xaca>
  {
    custom->bltapt = (APTR) bltapt;
    389c:	|     /--|----> move.l 124(sp),d0
    38a0:	|     |  |      movea.l 22(sp),a0
    38a4:	|     |  |      move.l d0,80(a0)
    custom->bltbpt = (APTR) bltbpt;
    38a8:	|     |  |      move.l 120(sp),d0
    38ac:	|     |  |      movea.l 22(sp),a0
    38b0:	|     |  |      move.l d0,76(a0)
    custom->bltcpt = (APTR) bltcpt;
    38b4:	|     |  |      move.l 116(sp),d0
    38b8:	|     |  |      movea.l 22(sp),a0
    38bc:	|     |  |      move.l d0,72(a0)
    custom->bltdpt = (APTR) bltdpt;
    38c0:	|     |  |      move.l 112(sp),d0
    38c4:	|     |  |      movea.l 22(sp),a0
    38c8:	|     |  |      move.l d0,84(a0)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    38cc:	|     |  |      move.l 92(sp),d0
    38d0:	|     |  |      move.w d0,d1
    38d2:	|     |  |      lsl.w #6,d1
    38d4:	|     |  |      movea.l 144(sp),a0
    38d8:	|     |  |      move.l (a0),d0
    38da:	|     |  |      movea.l d0,a0
    38dc:	|     |  |      cmpa.w #0,a0
    38e0:	|     |  |  /-- bge.s 38e6 <CstScaleSprite+0xa84>
    38e2:	|     |  |  |   lea 15(a0),a0
    38e6:	|     |  |  \-> move.l a0,d0
    38e8:	|     |  |      asr.l #4,d0
    38ea:	|     |  |      move.l d0,d0
    38ec:	|     |  |      add.w d1,d0
    38ee:	|     |  |      sub.w 132(sp),d0
    38f2:	|     |  |      add.w 134(sp),d0
    38f6:	|     |  |      movea.l 22(sp),a0
    38fa:	|     |  |      move.w d0,88(a0)
    bltbpt += bltbptplus;
    38fe:	|     |  |      moveq #0,d0
    3900:	|     |  |      move.w 20(sp),d0
    3904:	|     |  |      add.l d0,120(sp)
    bltcpt += bltcptplus;
    3908:	|     |  |      moveq #0,d0
    390a:	|     |  |      move.w 18(sp),d0
    390e:	|     |  |      add.l d0,116(sp)
    bltdpt += bltcptplus;
    3912:	|     |  |      moveq #0,d0
    3914:	|     |  |      move.w 18(sp),d0
    3918:	|     |  |      add.l d0,112(sp)
    WaitBlit();
    391c:	|     |  |      move.l 1ca8e <GfxBase>,d0
    3922:	|     |  |      movea.l d0,a6
    3924:	|     |  |      jsr -228(a6)
  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    3928:	|     |  |      addq.l #1,88(sp)
    392c:	|     |  \----> moveq #4,d0
    392e:	|     |         cmp.l 88(sp),d0
    3932:	|     \-------- bge.w 389c <CstScaleSprite+0xa3a>
  }   

  FreeVec(mask);
    3936:	|               move.l 84(sp),14(sp)
    393c:	|               move.l 1ca82 <SysBase>,d0
    3942:	|               movea.l d0,a6
    3944:	|               movea.l 14(sp),a1
    3948:	|               jsr -690(a6)
}
    394c:	\-------------> move.l (sp)+,d2
    394e:	                movea.l (sp)+,a6
    3950:	                lea 132(sp),sp
    3954:	                rts

00003956 <CstSetCl>:

void CstSetCl(UWORD *copperlist)
{
    3956:	subq.l #4,sp
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    3958:	move.l #14675968,(sp)
  custom->cop1lc = (ULONG) copperlist;
    395e:	move.l 8(sp),d0
    3962:	movea.l (sp),a0
    3964:	move.l d0,128(a0)
}
    3968:	nop
    396a:	addq.l #4,sp
    396c:	rts

0000396e <CstSwapBuffer>:

void CstSwapBuffer( ) {
    396e:	lea -20(sp),sp
  ULONG *tmp;
  tmp = CstViewBuffer;
    3972:	move.l 1c9b2 <CstViewBuffer>,16(sp)
  CstViewBuffer = CstDrawBuffer;
    397a:	move.l 1c9b6 <CstDrawBuffer>,d0
    3980:	move.l d0,1c9b2 <CstViewBuffer>
  CstDrawBuffer = tmp;
    3986:	move.l 16(sp),1c9b6 <CstDrawBuffer>

  struct CleanupQueue *tmp2 = CstCleanupQueueViewBuffer;
    398e:	move.l 1c9ba <CstCleanupQueueViewBuffer>,12(sp)
  CstCleanupQueueViewBuffer = CstCleanupQueueDrawBuffer;
    3996:	move.l 1c9be <CstCleanupQueueDrawBuffer>,d0
    399c:	move.l d0,1c9ba <CstCleanupQueueViewBuffer>
  CstCleanupQueueDrawBuffer = tmp2;
    39a2:	move.l 12(sp),1c9be <CstCleanupQueueDrawBuffer>


  UWORD *copword = CstCopperList;
    39aa:	move.l 1c9ac <CstCopperList>,8(sp)
  ULONG ptr = (ULONG) CstViewBuffer;
    39b2:	move.l 1c9b2 <CstViewBuffer>,d0
    39b8:	move.l d0,4(sp)
  UWORD highword = ptr >> 16;
    39bc:	move.l 4(sp),d0
    39c0:	clr.w d0
    39c2:	swap d0
    39c4:	move.w d0,2(sp)
  UWORD lowword = ptr & 0xffff;  
    39c8:	move.w 6(sp),(sp)

  copword[CSTBPL1LOW] = lowword;
    39cc:	movea.w #118,a0
    39d0:	adda.l 8(sp),a0
    39d4:	move.w (sp),(a0)
  copword[CSTBPL1HIGH] = highword;
    39d6:	movea.w #114,a0
    39da:	adda.l 8(sp),a0
    39de:	move.w 2(sp),(a0)

  ptr +=  40*256;
    39e2:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    39ea:	move.l 4(sp),d0
    39ee:	clr.w d0
    39f0:	swap d0
    39f2:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    39f6:	move.w 6(sp),(sp)

  copword[CSTBPL2LOW] = lowword;
    39fa:	movea.w #126,a0
    39fe:	adda.l 8(sp),a0
    3a02:	move.w (sp),(a0)
  copword[CSTBPL2HIGH] = highword;
    3a04:	movea.w #122,a0
    3a08:	adda.l 8(sp),a0
    3a0c:	move.w 2(sp),(a0)
  
  ptr +=  40*256;
    3a10:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    3a18:	move.l 4(sp),d0
    3a1c:	clr.w d0
    3a1e:	swap d0
    3a20:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    3a24:	move.w 6(sp),(sp)
  
  copword[CSTBPL3LOW] = lowword;
    3a28:	movea.l 8(sp),a0
    3a2c:	lea 134(a0),a0
    3a30:	move.w (sp),(a0)
  copword[CSTBPL3HIGH] = highword;
    3a32:	movea.l 8(sp),a0
    3a36:	lea 130(a0),a0
    3a3a:	move.w 2(sp),(a0)

  ptr +=  40*256;
    3a3e:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    3a46:	move.l 4(sp),d0
    3a4a:	clr.w d0
    3a4c:	swap d0
    3a4e:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    3a52:	move.w 6(sp),(sp)

  copword[CSTBPL4LOW] = lowword;
    3a56:	movea.l 8(sp),a0
    3a5a:	lea 142(a0),a0
    3a5e:	move.w (sp),(a0)
  copword[CSTBPL4HIGH] = highword;
    3a60:	movea.l 8(sp),a0
    3a64:	lea 138(a0),a0
    3a68:	move.w 2(sp),(a0)

  ptr +=  40*256;
    3a6c:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    3a74:	move.l 4(sp),d0
    3a78:	clr.w d0
    3a7a:	swap d0
    3a7c:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    3a80:	move.w 6(sp),(sp)

  copword[CSTBPL5LOW] = lowword;
    3a84:	movea.l 8(sp),a0
    3a88:	lea 150(a0),a0
    3a8c:	move.w (sp),(a0)
  copword[CSTBPL5HIGH] = highword;
    3a8e:	movea.l 8(sp),a0
    3a92:	lea 146(a0),a0
    3a96:	move.w 2(sp),(a0)

}
    3a9a:	nop
    3a9c:	lea 20(sp),sp
    3aa0:	rts

00003aa2 <CstReserveBackdrop>:

BOOL CstReserveBackdrop(int width, int height) {
    3aa2:	          lea -56(sp),sp
    3aa6:	          move.l a6,-(sp)

 	KPrintF("CstReserveBackdrop: Begin");
    3aa8:	          pea 1817c <PutChar+0x34c>
    3aae:	          jsr 17366 <KPrintF>
    3ab4:	          addq.l #4,sp

  width = width / 8;
    3ab6:	          move.l 64(sp),d0
    3aba:	      /-- bpl.s 3abe <CstReserveBackdrop+0x1c>
    3abc:	      |   addq.l #7,d0
    3abe:	      \-> asr.l #3,d0
    3ac0:	          move.l d0,64(sp)

  if( width < 40) 
    3ac4:	          moveq #39,d0
    3ac6:	          cmp.l 64(sp),d0
    3aca:	      /-- blt.s 3ae0 <CstReserveBackdrop+0x3e>
  {
    KPrintF("CstReserveBackdrop: Screens smaller than 320px not supported.");
    3acc:	      |   pea 18196 <PutChar+0x366>
    3ad2:	      |   jsr 17366 <KPrintF>
    3ad8:	      |   addq.l #4,sp
    return FALSE;
    3ada:	      |   clr.w d0
    3adc:	/-----|-- bra.w 3e22 <CstReserveBackdrop+0x380>
  }  
  KPrintF("CstReserveBackdrop: Screen Okay");
    3ae0:	|     \-> pea 181d4 <PutChar+0x3a4>
    3ae6:	|         jsr 17366 <KPrintF>
    3aec:	|         addq.l #4,sp

  CstCopperList = CstCreateCopperlist( width);
    3aee:	|         move.l 64(sp),-(sp)
    3af2:	|         jsr fce <CstCreateCopperlist>
    3af8:	|         addq.l #4,sp
    3afa:	|         move.l d0,1c9ac <CstCopperList>
  KPrintF("CstReserveBackdrop: Copperlist created");
    3b00:	|         pea 181f4 <PutChar+0x3c4>
    3b06:	|         jsr 17366 <KPrintF>
    3b0c:	|         addq.l #4,sp
  CstBackdropSizePlane = width*height;
    3b0e:	|         move.l 64(sp),d1
    3b12:	|         move.l 68(sp),d0
    3b16:	|         muls.w d1,d0
    3b18:	|         move.w d0,1c9a2 <CstBackdropSizePlane>
  CstBackdropSize = CstBackdropSizePlane * 5; //Todo: Support other Bitplane Modes;  
    3b1e:	|         move.w 1c9a2 <CstBackdropSizePlane>,d1
    3b24:	|         move.w d1,d0
    3b26:	|         add.w d0,d0
    3b28:	|         add.w d0,d0
    3b2a:	|         add.w d1,d0
    3b2c:	|         move.w d0,1c9a0 <CstBackdropSize>
  

  CstBackDrop = AllocVec(CstBackdropSize,MEMF_CHIP);
    3b32:	|         move.w 1c9a0 <CstBackdropSize>,d0
    3b38:	|         move.w d0,d0
    3b3a:	|         andi.l #65535,d0
    3b40:	|         move.l d0,48(sp)
    3b44:	|         moveq #2,d1
    3b46:	|         move.l d1,44(sp)
    3b4a:	|         move.l 1ca82 <SysBase>,d0
    3b50:	|         movea.l d0,a6
    3b52:	|         move.l 48(sp),d0
    3b56:	|         move.l 44(sp),d1
    3b5a:	|         jsr -684(a6)
    3b5e:	|         move.l d0,40(sp)
    3b62:	|         move.l 40(sp),d0
    3b66:	|         move.l d0,1c9a4 <CstBackDrop>
  if( !CstBackDrop)
    3b6c:	|         move.l 1c9a4 <CstBackDrop>,d0
    3b72:	|     /-- bne.s 3b88 <CstReserveBackdrop+0xe6>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for Backdrop");
    3b74:	|     |   pea 1821b <PutChar+0x3eb>
    3b7a:	|     |   jsr 17366 <KPrintF>
    3b80:	|     |   addq.l #4,sp
    return FALSE;  
    3b82:	|     |   clr.w d0
    3b84:	+-----|-- bra.w 3e22 <CstReserveBackdrop+0x380>
  }
  KPrintF("CstReserveBackdrop: Backdrop reserved");
    3b88:	|     \-> pea 18253 <PutChar+0x423>
    3b8e:	|         jsr 17366 <KPrintF>
    3b94:	|         addq.l #4,sp

  //Initialize Buffer
  ULONG *cursor = (ULONG *)CstBackDrop;
    3b96:	|         move.l 1c9a4 <CstBackDrop>,56(sp)
  for(int i=0;i<CstBackdropSize/4;i++)
    3b9e:	|         clr.l 52(sp)
    3ba2:	|     /-- bra.s 3bb8 <CstReserveBackdrop+0x116>
  {
    *cursor++ = 0;
    3ba4:	|  /--|-> move.l 56(sp),d0
    3ba8:	|  |  |   move.l d0,d1
    3baa:	|  |  |   addq.l #4,d1
    3bac:	|  |  |   move.l d1,56(sp)
    3bb0:	|  |  |   movea.l d0,a0
    3bb2:	|  |  |   clr.l (a0)
  for(int i=0;i<CstBackdropSize/4;i++)
    3bb4:	|  |  |   addq.l #1,52(sp)
    3bb8:	|  |  \-> move.w 1c9a0 <CstBackdropSize>,d0
    3bbe:	|  |      lsr.w #2,d0
    3bc0:	|  |      move.w d0,d0
    3bc2:	|  |      andi.l #65535,d0
    3bc8:	|  |      cmp.l 52(sp),d0
    3bcc:	|  \----- bgt.s 3ba4 <CstReserveBackdrop+0x102>
  }  
  
  CstDrawBuffer = AllocVec(CstBackdropSize+width*2,MEMF_CHIP); //Some extra size for bob routine border area
    3bce:	|         move.w 1c9a0 <CstBackdropSize>,d0
    3bd4:	|         move.w d0,d0
    3bd6:	|         andi.l #65535,d0
    3bdc:	|         move.l 64(sp),d1
    3be0:	|         add.l d1,d1
    3be2:	|         add.l d1,d0
    3be4:	|         move.l d0,36(sp)
    3be8:	|         moveq #2,d0
    3bea:	|         move.l d0,32(sp)
    3bee:	|         move.l 1ca82 <SysBase>,d0
    3bf4:	|         movea.l d0,a6
    3bf6:	|         move.l 36(sp),d0
    3bfa:	|         move.l 32(sp),d1
    3bfe:	|         jsr -684(a6)
    3c02:	|         move.l d0,28(sp)
    3c06:	|         move.l 28(sp),d0
    3c0a:	|         move.l d0,1c9b6 <CstDrawBuffer>
  if( !CstDrawBuffer)
    3c10:	|         move.l 1c9b6 <CstDrawBuffer>,d0
    3c16:	|     /-- bne.s 3c2c <CstReserveBackdrop+0x18a>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for DrawBuffer");
    3c18:	|     |   pea 18279 <PutChar+0x449>
    3c1e:	|     |   jsr 17366 <KPrintF>
    3c24:	|     |   addq.l #4,sp
    return FALSE;  
    3c26:	|     |   clr.w d0
    3c28:	+-----|-- bra.w 3e22 <CstReserveBackdrop+0x380>
  }
  KPrintF("CstReserveBackdrop: DrawBuffer reserved");
    3c2c:	|     \-> pea 182b3 <PutChar+0x483>
    3c32:	|         jsr 17366 <KPrintF>
    3c38:	|         addq.l #4,sp
    
  CstBackDropBufferApplyStart = AllocVec( 1000*5*2,MEMF_ANY);
    3c3a:	|         move.l #10000,24(sp)
    3c42:	|         clr.l 20(sp)
    3c46:	|         move.l 1ca82 <SysBase>,d0
    3c4c:	|         movea.l d0,a6
    3c4e:	|         move.l 24(sp),d0
    3c52:	|         move.l 20(sp),d1
    3c56:	|         jsr -684(a6)
    3c5a:	|         move.l d0,16(sp)
    3c5e:	|         move.l 16(sp),d0
    3c62:	|         move.l d0,1c9c2 <CstBackDropBufferApplyStart>
  if( !CstBackDropBufferApplyStart)
    3c68:	|         move.l 1c9c2 <CstBackDropBufferApplyStart>,d0
    3c6e:	|     /-- bne.s 3c84 <CstReserveBackdrop+0x1e2>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for CstBackDropBufferApplyStart");
    3c70:	|     |   pea 182db <PutChar+0x4ab>
    3c76:	|     |   jsr 17366 <KPrintF>
    3c7c:	|     |   addq.l #4,sp
    return FALSE;  
    3c7e:	|     |   clr.w d0
    3c80:	+-----|-- bra.w 3e22 <CstReserveBackdrop+0x380>
  }
  CstBackDropBufferApplyCursor = CstBackDropBufferApplyStart;
    3c84:	|     \-> move.l 1c9c2 <CstBackDropBufferApplyStart>,d0
    3c8a:	|         move.l d0,1c9c6 <CstBackDropBufferApplyCursor>
  *CstBackDropBufferApplyStart = 0;
    3c90:	|         movea.l 1c9c2 <CstBackDropBufferApplyStart>,a0
    3c96:	|         clr.w (a0)

  *CstBackDropBufferApplyStart = 0;
    3c98:	|         movea.l 1c9c2 <CstBackDropBufferApplyStart>,a0
    3c9e:	|         clr.w (a0)
  CstViewBuffer = AllocVec(CstBackdropSize+width*2,MEMF_CHIP); //Some extra size for bob routine border area
    3ca0:	|         move.w 1c9a0 <CstBackdropSize>,d0
    3ca6:	|         move.w d0,d0
    3ca8:	|         andi.l #65535,d0
    3cae:	|         move.l 64(sp),d1
    3cb2:	|         add.l d1,d1
    3cb4:	|         add.l d1,d0
    3cb6:	|         move.l d0,12(sp)
    3cba:	|         moveq #2,d1
    3cbc:	|         move.l d1,8(sp)
    3cc0:	|         move.l 1ca82 <SysBase>,d0
    3cc6:	|         movea.l d0,a6
    3cc8:	|         move.l 12(sp),d0
    3ccc:	|         move.l 8(sp),d1
    3cd0:	|         jsr -684(a6)
    3cd4:	|         move.l d0,4(sp)
    3cd8:	|         move.l 4(sp),d0
    3cdc:	|         move.l d0,1c9b2 <CstViewBuffer>
  if( !CstViewBuffer)
    3ce2:	|         move.l 1c9b2 <CstViewBuffer>,d0
    3ce8:	|     /-- bne.s 3cfe <CstReserveBackdrop+0x25c>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for ViewBuffer");
    3cea:	|     |   pea 18326 <PutChar+0x4f6>
    3cf0:	|     |   jsr 17366 <KPrintF>
    3cf6:	|     |   addq.l #4,sp
    return FALSE;  
    3cf8:	|     |   clr.w d0
    3cfa:	+-----|-- bra.w 3e22 <CstReserveBackdrop+0x380>
  }
  KPrintF("CstReserveBackdrop: ViewBuffer reserved");
    3cfe:	|     \-> pea 18360 <PutChar+0x530>
    3d04:	|         jsr 17366 <KPrintF>
    3d0a:	|         addq.l #4,sp
  
  CstDrawBuffer += width/4; //divide with 4 because pointer is ulong 
    3d0c:	|         move.l 1c9b6 <CstDrawBuffer>,d1
    3d12:	|         move.l 64(sp),d0
    3d16:	|     /-- bpl.s 3d1a <CstReserveBackdrop+0x278>
    3d18:	|     |   addq.l #3,d0
    3d1a:	|     \-> asr.l #2,d0
    3d1c:	|         add.l d0,d0
    3d1e:	|         add.l d0,d0
    3d20:	|         add.l d1,d0
    3d22:	|         move.l d0,1c9b6 <CstDrawBuffer>
  CstViewBuffer += width/4; //divide with 4 because pointer is ulong
    3d28:	|         move.l 1c9b2 <CstViewBuffer>,d1
    3d2e:	|         move.l 64(sp),d0
    3d32:	|     /-- bpl.s 3d36 <CstReserveBackdrop+0x294>
    3d34:	|     |   addq.l #3,d0
    3d36:	|     \-> asr.l #2,d0
    3d38:	|         add.l d0,d0
    3d3a:	|         add.l d0,d0
    3d3c:	|         add.l d1,d0
    3d3e:	|         move.l d0,1c9b2 <CstViewBuffer>
  

#ifdef EMULATOR
 	debug_register_bitmap(CstBackDrop, "CstBackDrop.bpl", 320, 256, 5, 0);
    3d44:	|         move.l 1c9a4 <CstBackDrop>,d0
    3d4a:	|         clr.l -(sp)
    3d4c:	|         pea 5 <_start+0x5>
    3d50:	|         pea 100 <copyString+0x48>
    3d54:	|         pea 140 <decodeFilename+0x28>
    3d58:	|         pea 18388 <PutChar+0x558>
    3d5e:	|         move.l d0,-(sp)
    3d60:	|         jsr 1744e <debug_register_bitmap>
    3d66:	|         lea 24(sp),sp
  debug_register_bitmap(CstDrawBuffer, "drawbuffer.bpl", width*8, height, 5, 0);
    3d6a:	|         move.l 68(sp),d0
    3d6e:	|         movea.w d0,a1
    3d70:	|         move.l 64(sp),d0
    3d74:	|         lsl.w #3,d0
    3d76:	|         movea.w d0,a0
    3d78:	|         move.l 1c9b6 <CstDrawBuffer>,d0
    3d7e:	|         clr.l -(sp)
    3d80:	|         pea 5 <_start+0x5>
    3d84:	|         move.l a1,-(sp)
    3d86:	|         move.l a0,-(sp)
    3d88:	|         pea 18398 <PutChar+0x568>
    3d8e:	|         move.l d0,-(sp)
    3d90:	|         jsr 1744e <debug_register_bitmap>
    3d96:	|         lea 24(sp),sp
  debug_register_bitmap(CstViewBuffer, "viewbuffer.bpl", width*8, height, 5, 0);
    3d9a:	|         move.l 68(sp),d0
    3d9e:	|         movea.w d0,a1
    3da0:	|         move.l 64(sp),d0
    3da4:	|         lsl.w #3,d0
    3da6:	|         movea.w d0,a0
    3da8:	|         move.l 1c9b2 <CstViewBuffer>,d0
    3dae:	|         clr.l -(sp)
    3db0:	|         pea 5 <_start+0x5>
    3db4:	|         move.l a1,-(sp)
    3db6:	|         move.l a0,-(sp)
    3db8:	|         pea 183a7 <PutChar+0x577>
    3dbe:	|         move.l d0,-(sp)
    3dc0:	|         jsr 1744e <debug_register_bitmap>
    3dc6:	|         lea 24(sp),sp
#endif

  

  if( !CstCopperList || ! CstDrawBuffer || !CstViewBuffer)
    3dca:	|         move.l 1c9ac <CstCopperList>,d0
    3dd0:	|     /-- beq.s 3de2 <CstReserveBackdrop+0x340>
    3dd2:	|     |   move.l 1c9b6 <CstDrawBuffer>,d0
    3dd8:	|     +-- beq.s 3de2 <CstReserveBackdrop+0x340>
    3dda:	|     |   move.l 1c9b2 <CstViewBuffer>,d0
    3de0:	|  /--|-- bne.s 3df4 <CstReserveBackdrop+0x352>
  {
    KPrintF("CstReserveBackdrop: Memory allocation failed");
    3de2:	|  |  \-> pea 183b6 <PutChar+0x586>
    3de8:	|  |      jsr 17366 <KPrintF>
    3dee:	|  |      addq.l #4,sp
    return FALSE;
    3df0:	|  |      clr.w d0
    3df2:	+--|----- bra.s 3e22 <CstReserveBackdrop+0x380>
  }

  KPrintF("CstReserveBackdrop: Setting Copperlist");
    3df4:	|  \----> pea 183e3 <PutChar+0x5b3>
    3dfa:	|         jsr 17366 <KPrintF>
    3e00:	|         addq.l #4,sp
  CstSetCl( CstCopperList);
    3e02:	|         move.l 1c9ac <CstCopperList>,d0
    3e08:	|         move.l d0,-(sp)
    3e0a:	|         jsr 3956 <CstSetCl>
    3e10:	|         addq.l #4,sp
  KPrintF("CstReserveBackdrop: Copperlist Set");
    3e12:	|         pea 1840a <PutChar+0x5da>
    3e18:	|         jsr 17366 <KPrintF>
    3e1e:	|         addq.l #4,sp
  return TRUE;
    3e20:	|         moveq #1,d0

}
    3e22:	\-------> movea.l (sp)+,a6
    3e24:	          lea 56(sp),sp
    3e28:	          rts

00003e2a <CstUnfreeze>:

void CstUnfreeze() {
    3e2a:	       lea -24(sp),sp
    3e2e:	       move.l a6,-(sp)
    3e30:	       move.l d2,-(sp)
	KPrintF("CstUnfreeze: Unfreezing Background Started");  
    3e32:	       pea 1842d <PutChar+0x5fd>
    3e38:	       jsr 17366 <KPrintF>
    3e3e:	       addq.l #4,sp

  UWORD size = winWidth/8*winHeight*5;
    3e40:	       move.l 1c9d6 <winWidth>,d0
    3e46:	       lsr.l #3,d0
    3e48:	       move.l d0,d1
    3e4a:	       move.l 1c9da <winHeight>,d0
    3e50:	       move.l d0,d0
    3e52:	       muls.w d0,d1
    3e54:	       move.w d1,d0
    3e56:	       add.w d0,d0
    3e58:	       add.w d0,d0
    3e5a:	       move.w d0,d2
    3e5c:	       add.w d1,d2
    3e5e:	       move.w d2,18(sp)

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    3e62:	       move.l #14675968,14(sp)

#ifdef EMULATOR
  debug_register_bitmap(CstBackDropBackup, "BackDropBackup", winWidth, winHeight, 5, 0);
    3e6a:	       move.l 1c9da <winHeight>,d0
    3e70:	       move.l d0,d0
    3e72:	       movea.w d0,a1
    3e74:	       move.l 1c9d6 <winWidth>,d0
    3e7a:	       move.l d0,d0
    3e7c:	       movea.w d0,a0
    3e7e:	       move.l 1c9a8 <CstBackDropBackup>,d0
    3e84:	       clr.l -(sp)
    3e86:	       pea 5 <_start+0x5>
    3e8a:	       move.l a1,-(sp)
    3e8c:	       move.l a0,-(sp)
    3e8e:	       pea 17fff <PutChar+0x1cf>
    3e94:	       move.l d0,-(sp)
    3e96:	       jsr 1744e <debug_register_bitmap>
    3e9c:	       lea 24(sp),sp
#endif  

  ULONG *src = (ULONG *) CstBackDropBackup;
    3ea0:	       move.l 1c9a8 <CstBackDropBackup>,28(sp)
  ULONG *dst = (ULONG *) CstBackDrop;
    3ea8:	       move.l 1c9a4 <CstBackDrop>,24(sp)
  for(int i=0;i<size/4;i++) 
    3eb0:	       clr.l 20(sp)
    3eb4:	   /-- bra.s 3eda <CstUnfreeze+0xb0>
  {
    *dst++ = *src++;
    3eb6:	/--|-> move.l 28(sp),d1
    3eba:	|  |   move.l d1,d0
    3ebc:	|  |   addq.l #4,d0
    3ebe:	|  |   move.l d0,28(sp)
    3ec2:	|  |   move.l 24(sp),d0
    3ec6:	|  |   move.l d0,d2
    3ec8:	|  |   addq.l #4,d2
    3eca:	|  |   move.l d2,24(sp)
    3ece:	|  |   movea.l d1,a0
    3ed0:	|  |   move.l (a0),d1
    3ed2:	|  |   movea.l d0,a0
    3ed4:	|  |   move.l d1,(a0)
  for(int i=0;i<size/4;i++) 
    3ed6:	|  |   addq.l #1,20(sp)
    3eda:	|  \-> move.w 18(sp),d0
    3ede:	|      lsr.w #2,d0
    3ee0:	|      move.w d0,d0
    3ee2:	|      andi.l #65535,d0
    3ee8:	|      cmp.l 20(sp),d0
    3eec:	\----- bgt.s 3eb6 <CstUnfreeze+0x8c>
  }

  CstApplyBackDropCounter = 2;
    3eee:	       move.w #2,1c9b0 <CstApplyBackDropCounter>

  *CstBackDropBufferApplyCursor++ = winWidth/16;
    3ef6:	       move.l 1c9d6 <winWidth>,d0
    3efc:	       lsr.l #4,d0
    3efe:	       movea.l 1c9c6 <CstBackDropBufferApplyCursor>,a0
    3f04:	       move.l a0,d1
    3f06:	       addq.l #2,d1
    3f08:	       move.l d1,1c9c6 <CstBackDropBufferApplyCursor>
    3f0e:	       move.l d0,d0
    3f10:	       move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = winHeight;
    3f12:	       move.l 1c9da <winHeight>,d0
    3f18:	       movea.l 1c9c6 <CstBackDropBufferApplyCursor>,a0
    3f1e:	       move.l a0,d1
    3f20:	       addq.l #2,d1
    3f22:	       move.l d1,1c9c6 <CstBackDropBufferApplyCursor>
    3f28:	       move.l d0,d0
    3f2a:	       move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = 0;
    3f2c:	       movea.l 1c9c6 <CstBackDropBufferApplyCursor>,a0
    3f32:	       move.l a0,d0
    3f34:	       addq.l #2,d0
    3f36:	       move.l d0,1c9c6 <CstBackDropBufferApplyCursor>
    3f3c:	       clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    3f3e:	       movea.l 1c9c6 <CstBackDropBufferApplyCursor>,a0
    3f44:	       move.l a0,d0
    3f46:	       addq.l #2,d0
    3f48:	       move.l d0,1c9c6 <CstBackDropBufferApplyCursor>
    3f4e:	       clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    3f50:	       movea.l 1c9c6 <CstBackDropBufferApplyCursor>,a0
    3f56:	       move.l a0,d0
    3f58:	       addq.l #2,d0
    3f5a:	       move.l d0,1c9c6 <CstBackDropBufferApplyCursor>
    3f60:	       clr.w (a0)
  
  if( !CstBackDropBackup) {
    3f62:	       move.l 1c9a8 <CstBackDropBackup>,d0
    3f68:	   /-- bne.s 3f82 <CstUnfreeze+0x158>
    FreeVec( CstBackDropBackup);
    3f6a:	   |   move.l 1c9a8 <CstBackDropBackup>,10(sp)
    3f72:	   |   move.l 1ca82 <SysBase>,d0
    3f78:	   |   movea.l d0,a6
    3f7a:	   |   movea.l 10(sp),a1
    3f7e:	   |   jsr -690(a6)
  }

  KPrintF("CstFreeze: Finished");
    3f82:	   \-> pea 1800e <PutChar+0x1de>
    3f88:	       jsr 17366 <KPrintF>
    3f8e:	       addq.l #4,sp

}
    3f90:	       nop
    3f92:	       move.l (sp)+,d2
    3f94:	       movea.l (sp)+,a6
    3f96:	       lea 24(sp),sp
    3f9a:	       rts

00003f9c <drawLine>:
#include "support/gcc8_c_support.h"
#include "line.h"

extern int sceneWidth, sceneHeight;

void drawLine(int x1, int y1, int x2, int y2) {
    3f9c:	       lea -20(sp),sp
	int x, y;
	BOOL backwards = FALSE;
    3fa0:	       clr.w 10(sp)
	
	if (x1 < 0)  x1 = 0;
    3fa4:	       tst.l 24(sp)
    3fa8:	   /-- bge.s 3fae <drawLine+0x12>
    3faa:	   |   clr.l 24(sp)
	if (y1 < 0)  y1 = 0;
    3fae:	   \-> tst.l 28(sp)
    3fb2:	   /-- bge.s 3fb8 <drawLine+0x1c>
    3fb4:	   |   clr.l 28(sp)
	if (x2 < 0)  x2 = 0;
    3fb8:	   \-> tst.l 32(sp)
    3fbc:	   /-- bge.s 3fc2 <drawLine+0x26>
    3fbe:	   |   clr.l 32(sp)
	if (y2 < 0)  y2 = 0;
    3fc2:	   \-> tst.l 36(sp)
    3fc6:	   /-- bge.s 3fcc <drawLine+0x30>
    3fc8:	   |   clr.l 36(sp)
	if (x1 > sceneWidth) x1 = sceneWidth - 1;
    3fcc:	   \-> move.l 1cb1e <sceneWidth>,d0
    3fd2:	       cmp.l 24(sp),d0
    3fd6:	   /-- bge.s 3fe6 <drawLine+0x4a>
    3fd8:	   |   move.l 1cb1e <sceneWidth>,d0
    3fde:	   |   move.l d0,d1
    3fe0:	   |   subq.l #1,d1
    3fe2:	   |   move.l d1,24(sp)
	if (x2 > sceneWidth) x2 = sceneWidth - 1;
    3fe6:	   \-> move.l 1cb1e <sceneWidth>,d0
    3fec:	       cmp.l 32(sp),d0
    3ff0:	   /-- bge.s 4000 <drawLine+0x64>
    3ff2:	   |   move.l 1cb1e <sceneWidth>,d0
    3ff8:	   |   move.l d0,d1
    3ffa:	   |   subq.l #1,d1
    3ffc:	   |   move.l d1,32(sp)
	if (y1 > sceneHeight) y1 = sceneHeight - 1;
    4000:	   \-> move.l 1cb22 <sceneHeight>,d0
    4006:	       cmp.l 28(sp),d0
    400a:	   /-- bge.s 401a <drawLine+0x7e>
    400c:	   |   move.l 1cb22 <sceneHeight>,d0
    4012:	   |   move.l d0,d1
    4014:	   |   subq.l #1,d1
    4016:	   |   move.l d1,28(sp)
	if (y2 > sceneHeight) y2 = sceneHeight - 1;
    401a:	   \-> move.l 1cb22 <sceneHeight>,d0
    4020:	       cmp.l 36(sp),d0
    4024:	   /-- bge.s 4034 <drawLine+0x98>
    4026:	   |   move.l 1cb22 <sceneHeight>,d0
    402c:	   |   move.l d0,d1
    402e:	   |   subq.l #1,d1
    4030:	   |   move.l d1,36(sp)

	if (x1 > x2) {
    4034:	   \-> move.l 24(sp),d0
    4038:	       cmp.l 32(sp),d0
    403c:	/----- ble.s 4058 <drawLine+0xbc>
		x = x2; 
    403e:	|      move.l 32(sp),16(sp)
		backwards = !backwards;
    4044:	|      tst.w 10(sp)
    4048:	|      seq d0
    404a:	|      neg.b d0
    404c:	|      move.b d0,d0
    404e:	|      andi.w #255,d0
    4052:	|      move.w d0,10(sp)
    4056:	|  /-- bra.s 405e <drawLine+0xc2>
	} else x = x1;
    4058:	\--|-> move.l 24(sp),16(sp)
		
	if (y1 > y2) {
    405e:	   \-> move.l 28(sp),d1
    4062:	       cmp.l 36(sp),d1
    4066:	/----- ble.s 4082 <drawLine+0xe6>
		y = y2; 
    4068:	|      move.l 36(sp),12(sp)
		backwards = !backwards;
    406e:	|      tst.w 10(sp)
    4072:	|      seq d0
    4074:	|      neg.b d0
    4076:	|      move.b d0,d0
    4078:	|      andi.w #255,d0
    407c:	|      move.w d0,10(sp)
    4080:	|  /-- bra.s 4088 <drawLine+0xec>
	} else y = y1;	
    4082:	\--|-> move.l 28(sp),12(sp)
	
	int diffX = x2-x1;
    4088:	   \-> move.l 32(sp),d0
    408c:	       sub.l 24(sp),d0
    4090:	       move.l d0,6(sp)
    diffX = diffX < 0 ? diffX * -1 : diffX;
    4094:	       move.l 6(sp),d0
    4098:	   /-- bpl.s 409c <drawLine+0x100>
    409a:	   |   neg.l d0
    409c:	   \-> move.l d0,6(sp)
	int diffY = y2-y1;	
    40a0:	       move.l 36(sp),d1
    40a4:	       sub.l 28(sp),d1
    40a8:	       move.l d1,2(sp)
    diffY = diffY < 0 ? diffY * -1 : diffY;
    40ac:	       move.l 2(sp),d0
    40b0:	   /-- bpl.s 40b4 <drawLine+0x118>
    40b2:	   |   neg.l d0
    40b4:	   \-> move.l d0,2(sp)
	
	if (! diffX) {
    40b8:	       tst.l 6(sp)
    40bc:	   /-- bne.s 40e0 <drawLine+0x144>
		diffX = 1;
    40be:	   |   moveq #1,d0
    40c0:	   |   move.l d0,6(sp)
		if (x == sceneWidth - 1) x = sceneWidth -2;
    40c4:	   |   move.l 1cb1e <sceneWidth>,d0
    40ca:	   |   subq.l #1,d0
    40cc:	   |   cmp.l 16(sp),d0
    40d0:	   +-- bne.s 40e0 <drawLine+0x144>
    40d2:	   |   move.l 1cb1e <sceneWidth>,d0
    40d8:	   |   move.l d0,d1
    40da:	   |   subq.l #2,d1
    40dc:	   |   move.l d1,16(sp)
	}
	if (! diffY) {
    40e0:	   \-> tst.l 2(sp)
    40e4:	   /-- bne.s 4108 <drawLine+0x16c>
		diffY = 1;
    40e6:	   |   moveq #1,d0
    40e8:	   |   move.l d0,2(sp)
		if (y == sceneHeight - 1) y = sceneHeight -2;
    40ec:	   |   move.l 1cb22 <sceneHeight>,d0
    40f2:	   |   subq.l #1,d0
    40f4:	   |   cmp.l 12(sp),d0
    40f8:	   +-- bne.s 4108 <drawLine+0x16c>
    40fa:	   |   move.l 1cb22 <sceneHeight>,d0
    4100:	   |   move.l d0,d1
    4102:	   |   subq.l #2,d1
    4104:	   |   move.l d1,12(sp)
	}

    KPrintF("drawLine: Not implemented on Amiga"); //Amiga Todo: Implement 	
    4108:	   \-> pea 18458 <PutChar+0x628>
    410e:	       jsr 17366 <KPrintF>
    4114:	       addq.l #4,sp
	
}
    4116:	       nop
    4118:	       lea 20(sp),sp
    411c:	       rts

0000411e <deleteTextures>:
extern int specialSettings;
struct textureList *firstTexture = NULL;
BOOL NPOT_textures = TRUE;

void deleteTextures(unsigned int n,  unsigned int * textures)
{
    411e:	                      lea -24(sp),sp
    4122:	                      move.l a6,-(sp)
	if (firstTexture == NULL) {
    4124:	                      move.l 1c9de <firstTexture>,d0
    412a:	/-------------------- beq.w 4208 <deleteTextures+0xea>
		//debugOut("Deleting texture while list is already empty.\n");
	} else {
		for (unsigned int i = 0; i < n; i++) {
    412e:	|                     clr.l 24(sp)
    4132:	|     /-------------- bra.w 41fc <deleteTextures+0xde>
			BOOL found = FALSE;
    4136:	|  /--|-------------> clr.w 18(sp)
			struct textureList *list = firstTexture;
    413a:	|  |  |               move.l 1c9de <firstTexture>,20(sp)
			if (list->name == textures[i]) {
    4142:	|  |  |               movea.l 20(sp),a0
    4146:	|  |  |               move.l (a0),d1
    4148:	|  |  |               move.l 24(sp),d0
    414c:	|  |  |               add.l d0,d0
    414e:	|  |  |               add.l d0,d0
    4150:	|  |  |               movea.l 36(sp),a0
    4154:	|  |  |               adda.l d0,a0
    4156:	|  |  |               move.l (a0),d0
    4158:	|  |  |               cmp.l d1,d0
    415a:	|  |  |  /----------- bne.w 41ee <deleteTextures+0xd0>
				found = TRUE;
    415e:	|  |  |  |            move.w #1,18(sp)
				firstTexture = list->next;
    4164:	|  |  |  |            movea.l 20(sp),a0
    4168:	|  |  |  |            move.l 12(a0),d0
    416c:	|  |  |  |            move.l d0,1c9de <firstTexture>
				FreeVec(list);
    4172:	|  |  |  |            move.l 20(sp),6(sp)
    4178:	|  |  |  |            move.l 1ca82 <SysBase>,d0
    417e:	|  |  |  |            movea.l d0,a6
    4180:	|  |  |  |            movea.l 6(sp),a1
    4184:	|  |  |  |            jsr -690(a6)
				continue;
    4188:	|  |  |  |  /-------- bra.s 41f8 <deleteTextures+0xda>
			}

			while (list->next) {
				if (list->next->name == textures[i]) {
    418a:	|  |  |  |  |  /----> movea.l 20(sp),a0
    418e:	|  |  |  |  |  |      movea.l 12(a0),a0
    4192:	|  |  |  |  |  |      move.l (a0),d1
    4194:	|  |  |  |  |  |      move.l 24(sp),d0
    4198:	|  |  |  |  |  |      add.l d0,d0
    419a:	|  |  |  |  |  |      add.l d0,d0
    419c:	|  |  |  |  |  |      movea.l 36(sp),a0
    41a0:	|  |  |  |  |  |      adda.l d0,a0
    41a2:	|  |  |  |  |  |      move.l (a0),d0
    41a4:	|  |  |  |  |  |      cmp.l d1,d0
    41a6:	|  |  |  |  |  |  /-- bne.s 41e4 <deleteTextures+0xc6>
					found = TRUE;
    41a8:	|  |  |  |  |  |  |   move.w #1,18(sp)
					struct textureList *deleteMe = list->next;
    41ae:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    41b2:	|  |  |  |  |  |  |   move.l 12(a0),14(sp)
					list->next = list->next->next;
    41b8:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    41bc:	|  |  |  |  |  |  |   movea.l 12(a0),a0
    41c0:	|  |  |  |  |  |  |   move.l 12(a0),d0
    41c4:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    41c8:	|  |  |  |  |  |  |   move.l d0,12(a0)
					FreeVec(deleteMe);
    41cc:	|  |  |  |  |  |  |   move.l 14(sp),10(sp)
    41d2:	|  |  |  |  |  |  |   move.l 1ca82 <SysBase>,d0
    41d8:	|  |  |  |  |  |  |   movea.l d0,a6
    41da:	|  |  |  |  |  |  |   movea.l 10(sp),a1
    41de:	|  |  |  |  |  |  |   jsr -690(a6)
					break;
    41e2:	|  |  |  |  +--|--|-- bra.s 41f8 <deleteTextures+0xda>
				}
				list = list->next;
    41e4:	|  |  |  |  |  |  \-> movea.l 20(sp),a0
    41e8:	|  |  |  |  |  |      move.l 12(a0),20(sp)
			while (list->next) {
    41ee:	|  |  |  \--|--|----> movea.l 20(sp),a0
    41f2:	|  |  |     |  |      move.l 12(a0),d0
    41f6:	|  |  |     |  \----- bne.s 418a <deleteTextures+0x6c>
		for (unsigned int i = 0; i < n; i++) {
    41f8:	|  |  |     \-------> addq.l #1,24(sp)
    41fc:	|  |  \-------------> move.l 24(sp),d0
    4200:	|  |                  cmp.l 32(sp),d0
    4204:	|  \----------------- bcs.w 4136 <deleteTextures+0x18>
			}
		}
	}
}
    4208:	\-------------------> nop
    420a:	                      movea.l (sp)+,a6
    420c:	                      lea 24(sp),sp
    4210:	                      rts

00004212 <setGraphicsWindow>:

void setGraphicsWindow(BOOL fullscreen) {
    4212:	subq.l #4,sp
    4214:	move.l 8(sp),d0
    4218:	move.w d0,d0
    421a:	move.w d0,2(sp)
	KPrintF("setGraphicsWindow: Not implemented on Amiga yet"); //TODO
    421e:	pea 1847b <PutChar+0x64b>
    4224:	jsr 17366 <KPrintF>
    422a:	addq.l #4,sp
}
    422c:	nop
    422e:	addq.l #4,sp
    4230:	rts

00004232 <resourceNameFromNum>:

extern int numResourceNames /* = 0*/;
extern char * * allResourceNames /*= NULL*/;

const char * resourceNameFromNum (int i) {
	if (i == -1) return NULL;
    4232:	       moveq #-1,d0
    4234:	       cmp.l 4(sp),d0
    4238:	   /-- bne.s 423e <resourceNameFromNum+0xc>
    423a:	   |   moveq #0,d0
    423c:	/--|-- bra.s 4276 <resourceNameFromNum+0x44>
	if (numResourceNames == 0) return "RESOURCE";
    423e:	|  \-> move.l 1ca5e <numResourceNames>,d0
    4244:	|  /-- bne.s 424e <resourceNameFromNum+0x1c>
    4246:	|  |   move.l #99499,d0
    424c:	+--|-- bra.s 4276 <resourceNameFromNum+0x44>
	if (i < numResourceNames) return allResourceNames[i];
    424e:	|  \-> move.l 1ca5e <numResourceNames>,d0
    4254:	|      cmp.l 4(sp),d0
    4258:	|  /-- ble.s 4270 <resourceNameFromNum+0x3e>
    425a:	|  |   move.l 1ca16 <allResourceNames>,d1
    4260:	|  |   move.l 4(sp),d0
    4264:	|  |   add.l d0,d0
    4266:	|  |   add.l d0,d0
    4268:	|  |   movea.l d1,a0
    426a:	|  |   adda.l d0,a0
    426c:	|  |   move.l (a0),d0
    426e:	+--|-- bra.s 4276 <resourceNameFromNum+0x44>
	return "Unknown resource";
    4270:	|  \-> move.l #99508,d0
    4276:	\----> rts

00004278 <main_sludge>:
char * gamePath = NULL;
char *bundleFolder;
int weAreDoneSoQuit;

int main_sludge(int argc, char *argv[])
{
    4278:	          lea -44(sp),sp
    427c:	          movem.l d2-d3/a6,-(sp)
	/* Dimensions of our window. */
	//AMIGA TODO: Maybe remove as there will be no windowed mode
    winWidth = 320;
    4280:	          move.l #320,1c9d6 <winWidth>
    winHeight = 256;
    428a:	          move.l #256,1c9da <winHeight>

	char * sludgeFile;

	if(argc == 0) {
    4294:	          tst.l 60(sp)
    4298:	      /-- bne.s 42b0 <main_sludge+0x38>
		bundleFolder = copyString("game/");
    429a:	      |   pea 184c5 <PutChar+0x695>
    42a0:	      |   jsr b8 <copyString>
    42a6:	      |   addq.l #4,sp
    42a8:	      |   move.l d0,1c9ee <bundleFolder>
    42ae:	   /--|-- bra.s 42c6 <main_sludge+0x4e>
	} else {
		bundleFolder = copyString(argv[0]);
    42b0:	   |  \-> movea.l 64(sp),a0
    42b4:	   |      move.l (a0),d0
    42b6:	   |      move.l d0,-(sp)
    42b8:	   |      jsr b8 <copyString>
    42be:	   |      addq.l #4,sp
    42c0:	   |      move.l d0,1c9ee <bundleFolder>
	}
    
	int lastSlash = -1;
    42c6:	   \----> moveq #-1,d0
    42c8:	          move.l d0,48(sp)
	for (int i = 0; bundleFolder[i]; i ++) {
    42cc:	          clr.l 44(sp)
    42d0:	   /----- bra.s 42f2 <main_sludge+0x7a>
		if (bundleFolder[i] == PATHSLASH) lastSlash = i;
    42d2:	/--|----> move.l 1c9ee <bundleFolder>,d1
    42d8:	|  |      move.l 44(sp),d0
    42dc:	|  |      movea.l d1,a0
    42de:	|  |      adda.l d0,a0
    42e0:	|  |      move.b (a0),d0
    42e2:	|  |      cmpi.b #47,d0
    42e6:	|  |  /-- bne.s 42ee <main_sludge+0x76>
    42e8:	|  |  |   move.l 44(sp),48(sp)
	for (int i = 0; bundleFolder[i]; i ++) {
    42ee:	|  |  \-> addq.l #1,44(sp)
    42f2:	|  \----> move.l 1c9ee <bundleFolder>,d1
    42f8:	|         move.l 44(sp),d0
    42fc:	|         movea.l d1,a0
    42fe:	|         adda.l d0,a0
    4300:	|         move.b (a0),d0
    4302:	\-------- bne.s 42d2 <main_sludge+0x5a>
	}
	bundleFolder[lastSlash+1] = NULL;
    4304:	          move.l 1c9ee <bundleFolder>,d0
    430a:	          move.l 48(sp),d1
    430e:	          addq.l #1,d1
    4310:	          movea.l d0,a0
    4312:	          adda.l d1,a0
    4314:	          clr.b (a0)

	if (argc > 1) {
    4316:	          moveq #1,d0
    4318:	          cmp.l 60(sp),d0
    431c:	      /-- bge.s 4338 <main_sludge+0xc0>
		sludgeFile = argv[argc - 1];
    431e:	      |   move.l 60(sp),d0
    4322:	      |   addi.l #1073741823,d0
    4328:	      |   add.l d0,d0
    432a:	      |   add.l d0,d0
    432c:	      |   movea.l 64(sp),a0
    4330:	      |   adda.l d0,a0
    4332:	      |   move.l (a0),52(sp)
    4336:	   /--|-- bra.s 4392 <main_sludge+0x11a>
	} else {
		sludgeFile = joinStrings (bundleFolder, "gamedata.slg");
    4338:	   |  \-> move.l 1c9ee <bundleFolder>,d0
    433e:	   |      pea 184cb <PutChar+0x69b>
    4344:	   |      move.l d0,-(sp)
    4346:	   |      jsr 13e32 <joinStrings>
    434c:	   |      addq.l #8,sp
    434e:	   |      move.l d0,52(sp)
		if (! ( fileExists (sludgeFile) ) ) {
    4352:	   |      move.l 52(sp),-(sp)
    4356:	   |      jsr 13d2c <fileExists>
    435c:	   |      addq.l #4,sp
    435e:	   |      tst.b d0
    4360:	   +----- bne.s 4392 <main_sludge+0x11a>
			FreeVec(sludgeFile);
    4362:	   |      move.l 52(sp),40(sp)
    4368:	   |      move.l 1ca82 <SysBase>,d0
    436e:	   |      movea.l d0,a6
    4370:	   |      movea.l 40(sp),a1
    4374:	   |      jsr -690(a6)
			sludgeFile = joinStrings (bundleFolder, "gamedata");			
    4378:	   |      move.l 1c9ee <bundleFolder>,d0
    437e:	   |      pea 184d8 <PutChar+0x6a8>
    4384:	   |      move.l d0,-(sp)
    4386:	   |      jsr 13e32 <joinStrings>
    438c:	   |      addq.l #8,sp
    438e:	   |      move.l d0,52(sp)
	//AMIGA TODO: Show arguments
	/*if (! parseCmdlineParameters(argc, argv) && !(sludgeFile) ) {
		printCmdlineUsage();
		return 0;
	}*/
	KPrintF("Game file not found.\n");
    4392:	   \----> pea 184e1 <PutChar+0x6b1>
    4398:	          jsr 17366 <KPrintF>
    439e:	          addq.l #4,sp
	if (! fileExists(sludgeFile) ) {	
    43a0:	          move.l 52(sp),-(sp)
    43a4:	          jsr 13d2c <fileExists>
    43aa:	          addq.l #4,sp
    43ac:	          tst.b d0
    43ae:	      /-- bne.s 4406 <main_sludge+0x18e>
		Write(Output(), (APTR)"Game file not found.\n", 21);
    43b0:	      |   move.l 1ca8a <DOSBase>,d0
    43b6:	      |   movea.l d0,a6
    43b8:	      |   jsr -60(a6)
    43bc:	      |   move.l d0,28(sp)
    43c0:	      |   move.l 28(sp),d0
    43c4:	      |   move.l d0,24(sp)
    43c8:	      |   move.l #99553,20(sp)
    43d0:	      |   moveq #21,d0
    43d2:	      |   move.l d0,16(sp)
    43d6:	      |   move.l 1ca8a <DOSBase>,d0
    43dc:	      |   movea.l d0,a6
    43de:	      |   move.l 24(sp),d1
    43e2:	      |   move.l 20(sp),d2
    43e6:	      |   move.l 16(sp),d3
    43ea:	      |   jsr -48(a6)
    43ee:	      |   move.l d0,12(sp)
		KPrintF("Game file not found.\n");
    43f2:	      |   pea 184e1 <PutChar+0x6b1>
    43f8:	      |   jsr 17366 <KPrintF>
    43fe:	      |   addq.l #4,sp
		//AMIGA TODO: Show arguments
		//printCmdlineUsage();
		return 0;
    4400:	      |   moveq #0,d0
    4402:	/-----|-- bra.w 4604 <main_sludge+0x38c>
	}

	KPrintF("Setgamefilepath\n");
    4406:	|     \-> pea 184f7 <PutChar+0x6c7>
    440c:	|         jsr 17366 <KPrintF>
    4412:	|         addq.l #4,sp
	setGameFilePath (sludgeFile);	
    4414:	|         move.l 52(sp),-(sp)
    4418:	|         jsr 460e <setGameFilePath>
    441e:	|         addq.l #4,sp
	if (! initSludge (sludgeFile)) return 0;
    4420:	|         move.l 52(sp),-(sp)
    4424:	|         jsr 5bbc <initSludge>
    442a:	|         addq.l #4,sp
    442c:	|         tst.w d0
    442e:	|     /-- bne.s 4436 <main_sludge+0x1be>
    4430:	|     |   moveq #0,d0
    4432:	+-----|-- bra.w 4604 <main_sludge+0x38c>
	
	if( winWidth != 320 || winHeight != 256) {
    4436:	|     \-> move.l 1c9d6 <winWidth>,d0
    443c:	|         cmpi.l #320,d0
    4442:	|     /-- bne.s 4452 <main_sludge+0x1da>
    4444:	|     |   move.l 1c9da <winHeight>,d0
    444a:	|     |   cmpi.l #256,d0
    4450:	|  /--|-- beq.s 4474 <main_sludge+0x1fc>
		KPrintF("This Screen Format is currently unsupported on Amiga. Only PAL Lowres supported atm. winWidth and winHeight will be reseted.");	
    4452:	|  |  \-> pea 18508 <PutChar+0x6d8>
    4458:	|  |      jsr 17366 <KPrintF>
    445e:	|  |      addq.l #4,sp
		winWidth = 320;
    4460:	|  |      move.l #320,1c9d6 <winWidth>
		winHeight = 256;
    446a:	|  |      move.l #256,1c9da <winHeight>
	}

	KPrintF("Resizing Backdrop\n");
    4474:	|  \----> pea 18585 <PutChar+0x755>
    447a:	|         jsr 17366 <KPrintF>
    4480:	|         addq.l #4,sp
	if (! resizeBackdrop (winWidth, winHeight)) {
    4482:	|         move.l 1c9da <winHeight>,d0
    4488:	|         move.l d0,d1
    448a:	|         move.l 1c9d6 <winWidth>,d0
    4490:	|         move.l d1,-(sp)
    4492:	|         move.l d0,-(sp)
    4494:	|         jsr d52e <resizeBackdrop>
    449a:	|         addq.l #8,sp
    449c:	|         tst.w d0
    449e:	|     /-- bne.s 44b4 <main_sludge+0x23c>
		KPrintF("Couldn't allocate memory for backdrop");
    44a0:	|     |   pea 18598 <PutChar+0x768>
    44a6:	|     |   jsr 17366 <KPrintF>
    44ac:	|     |   addq.l #4,sp
		return FALSE;
    44ae:	|     |   moveq #0,d0
    44b0:	+-----|-- bra.w 4604 <main_sludge+0x38c>
	}

	KPrintF("Init People\n");
    44b4:	|     \-> pea 185be <PutChar+0x78e>
    44ba:	|         jsr 17366 <KPrintF>
    44c0:	|         addq.l #4,sp
	if (! initPeople ())
    44c2:	|         jsr aa96 <initPeople>
    44c8:	|         tst.w d0
    44ca:	|     /-- bne.s 44e0 <main_sludge+0x268>
	{
		KPrintF("Couldn't initialise people stuff");
    44cc:	|     |   pea 185cb <PutChar+0x79b>
    44d2:	|     |   jsr 17366 <KPrintF>
    44d8:	|     |   addq.l #4,sp
		return FALSE;
    44da:	|     |   moveq #0,d0
    44dc:	+-----|-- bra.w 4604 <main_sludge+0x38c>
	}

	KPrintF("Init Floor\n");
    44e0:	|     \-> pea 185ec <PutChar+0x7bc>
    44e6:	|         jsr 17366 <KPrintF>
    44ec:	|         addq.l #4,sp
	if (! initFloor ())
    44ee:	|         jsr 1671c <initFloor>
    44f4:	|         tst.w d0
    44f6:	|     /-- bne.s 450c <main_sludge+0x294>
	{
		KPrintF("Couldn't initialise floor stuff");
    44f8:	|     |   pea 185f8 <PutChar+0x7c8>
    44fe:	|     |   jsr 17366 <KPrintF>
    4504:	|     |   addq.l #4,sp
		
		return FALSE;
    4506:	|     |   moveq #0,d0
    4508:	+-----|-- bra.w 4604 <main_sludge+0x38c>
	}

	KPrintF("Init Objecttype\n");
    450c:	|     \-> pea 18618 <PutChar+0x7e8>
    4512:	|         jsr 17366 <KPrintF>
    4518:	|         addq.l #4,sp
	if (! initObjectTypes ())
    451a:	|         jsr d6ea <initObjectTypes>
    4520:	|         tst.w d0
    4522:	|     /-- bne.s 4538 <main_sludge+0x2c0>
	{
		KPrintF("Couldn't initialise object type stuff");
    4524:	|     |   pea 18629 <PutChar+0x7f9>
    452a:	|     |   jsr 17366 <KPrintF>
    4530:	|     |   addq.l #4,sp
		return FALSE;
    4532:	|     |   moveq #0,d0
    4534:	+-----|-- bra.w 4604 <main_sludge+0x38c>
	}

	KPrintF("Init speech\n");
    4538:	|     \-> pea 1864f <PutChar+0x81f>
    453e:	|         jsr 17366 <KPrintF>
    4544:	|         addq.l #4,sp
	initSpeech ();
    4546:	|         jsr 7fde <initSpeech>
	KPrintF("Init status bar\n");
    454c:	|         pea 1865c <PutChar+0x82c>
    4552:	|         jsr 17366 <KPrintF>
    4558:	|         addq.l #4,sp
	initStatusBar ();
    455a:	|         jsr 7aa2 <initStatusBar>

	KPrintF("Get numbered string\n");
    4560:	|         pea 1866d <PutChar+0x83d>
    4566:	|         jsr 17366 <KPrintF>
    456c:	|         addq.l #4,sp
	gameName = getNumberedString(1);
    456e:	|         pea 1 <_start+0x1>
    4572:	|         jsr 6db2 <getNumberedString>
    4578:	|         addq.l #4,sp
    457a:	|         move.l d0,1c9e6 <gameName>
	//initSoundStuff (hMainWindow); Todo Amiga: Maybe move soundstuff here
	KPrintF("Start new function num\n");
    4580:	|         pea 18682 <PutChar+0x852>
    4586:	|         jsr 17366 <KPrintF>
    458c:	|         addq.l #4,sp
	startNewFunctionNum (0, 0, NULL, noStack, TRUE);
    458e:	|         move.l 1ca52 <noStack>,d0
    4594:	|         pea 1 <_start+0x1>
    4598:	|         move.l d0,-(sp)
    459a:	|         clr.l -(sp)
    459c:	|         clr.l -(sp)
    459e:	|         clr.l -(sp)
    45a0:	|         jsr 6c08 <startNewFunctionNum>
    45a6:	|         lea 20(sp),sp

	KPrintF("Starting main loop");
    45aa:	|         pea 1869a <PutChar+0x86a>
    45b0:	|         jsr 17366 <KPrintF>
    45b6:	|         addq.l #4,sp

	volatile struct Custom *custom = (struct Custom*)0xdff000;
    45b8:	|         move.l #14675968,36(sp)
	weAreDoneSoQuit = 0;
    45c0:	|         clr.l 1c9f2 <weAreDoneSoQuit>
	while ( !weAreDoneSoQuit ) {	
    45c6:	|     /-- bra.s 45e6 <main_sludge+0x36e>
		//custom->color[0] = 0xf00;			
		sludgeDisplay ();
    45c8:	|  /--|-> jsr 6b98 <sludgeDisplay>
		CsiCheckInput();
    45ce:	|  |  |   jsr d062 <CsiCheckInput>
		walkAllPeople();
    45d4:	|  |  |   jsr c01c <walkAllPeople>
		handleInput();
    45da:	|  |  |   jsr 5956 <handleInput>
		//custom->color[0] = 0x000;			
		WaitVbl();
    45e0:	|  |  |   jsr 1729a <WaitVbl>
	while ( !weAreDoneSoQuit ) {	
    45e6:	|  |  \-> move.l 1c9f2 <weAreDoneSoQuit>,d0
    45ec:	|  \----- beq.s 45c8 <main_sludge+0x350>
	}	
	//Amiga Cleanup
	FreeVec(sludgeFile);
    45ee:	|         move.l 52(sp),32(sp)
    45f4:	|         move.l 1ca82 <SysBase>,d0
    45fa:	|         movea.l d0,a6
    45fc:	|         movea.l 32(sp),a1
    4600:	|         jsr -690(a6)
}
    4604:	\-------> movem.l (sp)+,d2-d3/a6
    4608:	          lea 44(sp),sp
    460c:	          rts

0000460e <setGameFilePath>:

void setGameFilePath (char * f) {
    460e:	          lea -1104(sp),sp
    4612:	          move.l a6,-(sp)
    4614:	          move.l d2,-(sp)
	char currentDir[1000];

	if (!GetCurrentDirName( currentDir, 998)) {
    4616:	          move.l #1112,d0
    461c:	          add.l sp,d0
    461e:	          addi.l #-1102,d0
    4624:	          move.l d0,1100(sp)
    4628:	          move.l #998,1096(sp)
    4630:	          move.l 1ca8a <DOSBase>,d0
    4636:	          movea.l d0,a6
    4638:	          move.l 1100(sp),d1
    463c:	          move.l 1096(sp),d2
    4640:	          jsr -564(a6)
    4644:	          move.w d0,1094(sp)
    4648:	          move.w 1094(sp),d0
    464c:	      /-- bne.s 465c <setGameFilePath+0x4e>
		KPrintF("setGameFilePath:  current directory.\n");
    464e:	      |   pea 186ad <PutChar+0x87d>
    4654:	      |   jsr 17366 <KPrintF>
    465a:	      |   addq.l #4,sp
	}	

	int got = -1, a;	
    465c:	      \-> moveq #-1,d0
    465e:	          move.l d0,1108(sp)

	for (a = 0; f[a]; a ++) {
    4662:	          clr.l 1104(sp)
    4666:	   /----- bra.s 4684 <setGameFilePath+0x76>
		if (f[a] == PATHSLASH) got = a;
    4668:	/--|----> move.l 1104(sp),d0
    466c:	|  |      movea.l 1116(sp),a0
    4670:	|  |      adda.l d0,a0
    4672:	|  |      move.b (a0),d0
    4674:	|  |      cmpi.b #47,d0
    4678:	|  |  /-- bne.s 4680 <setGameFilePath+0x72>
    467a:	|  |  |   move.l 1104(sp),1108(sp)
	for (a = 0; f[a]; a ++) {
    4680:	|  |  \-> addq.l #1,1104(sp)
    4684:	|  \----> move.l 1104(sp),d0
    4688:	|         movea.l 1116(sp),a0
    468c:	|         adda.l d0,a0
    468e:	|         move.b (a0),d0
    4690:	\-------- bne.s 4668 <setGameFilePath+0x5a>
	}

	if (got != -1) {
    4692:	          moveq #-1,d0
    4694:	          cmp.l 1108(sp),d0
    4698:	   /----- beq.s 4712 <setGameFilePath+0x104>
		f[got] = 0;	
    469a:	   |      move.l 1108(sp),d0
    469e:	   |      movea.l 1116(sp),a0
    46a2:	   |      adda.l d0,a0
    46a4:	   |      clr.b (a0)
		BPTR lock = Lock(f, ACCESS_READ);	
    46a6:	   |      move.l 1116(sp),1090(sp)
    46ac:	   |      moveq #-2,d0
    46ae:	   |      move.l d0,1086(sp)
    46b2:	   |      move.l 1ca8a <DOSBase>,d0
    46b8:	   |      movea.l d0,a6
    46ba:	   |      move.l 1090(sp),d1
    46be:	   |      move.l 1086(sp),d2
    46c2:	   |      jsr -84(a6)
    46c6:	   |      move.l d0,1082(sp)
    46ca:	   |      move.l 1082(sp),d0
    46ce:	   |      move.l d0,1078(sp)
		if (!CurrentDir(lock)) {
    46d2:	   |      move.l 1078(sp),1074(sp)
    46d8:	   |      move.l 1ca8a <DOSBase>,d0
    46de:	   |      movea.l d0,a6
    46e0:	   |      move.l 1074(sp),d1
    46e4:	   |      jsr -126(a6)
    46e8:	   |      move.l d0,1070(sp)
    46ec:	   |      move.l 1070(sp),d0
    46f0:	   |  /-- bne.s 4704 <setGameFilePath+0xf6>
			KPrintF("setGameFilePath:: Failed changing to directory %s\n", f);
    46f2:	   |  |   move.l 1116(sp),-(sp)
    46f6:	   |  |   pea 186d3 <PutChar+0x8a3>
    46fc:	   |  |   jsr 17366 <KPrintF>
    4702:	   |  |   addq.l #8,sp
		}
		f[got] = PATHSLASH;
    4704:	   |  \-> move.l 1108(sp),d0
    4708:	   |      movea.l 1116(sp),a0
    470c:	   |      adda.l d0,a0
    470e:	   |      move.b #47,(a0)
	}

	gamePath = AllocVec(400, MEMF_ANY);
    4712:	   \----> move.l #400,1066(sp)
    471a:	          clr.l 1062(sp)
    471e:	          move.l 1ca82 <SysBase>,d0
    4724:	          movea.l d0,a6
    4726:	          move.l 1066(sp),d0
    472a:	          move.l 1062(sp),d1
    472e:	          jsr -684(a6)
    4732:	          move.l d0,1058(sp)
    4736:	          move.l 1058(sp),d0
    473a:	          move.l d0,1c9ea <gamePath>
	if (gamePath==0) {
    4740:	          move.l 1c9ea <gamePath>,d0
    4746:	      /-- bne.s 475a <setGameFilePath+0x14c>
		KPrintF("setGameFilePath: Can't reserve memory for game directory.\n");
    4748:	      |   pea 18706 <PutChar+0x8d6>
    474e:	      |   jsr 17366 <KPrintF>
    4754:	      |   addq.l #4,sp
    4756:	   /--|-- bra.w 4842 <setGameFilePath+0x234>
		return;
	}

	BPTR lock = Lock(gamePath, ACCESS_READ);	
    475a:	   |  \-> move.l 1c9ea <gamePath>,1054(sp)
    4762:	   |      moveq #-2,d0
    4764:	   |      move.l d0,1050(sp)
    4768:	   |      move.l 1ca8a <DOSBase>,d0
    476e:	   |      movea.l d0,a6
    4770:	   |      move.l 1054(sp),d1
    4774:	   |      move.l 1050(sp),d2
    4778:	   |      jsr -84(a6)
    477c:	   |      move.l d0,1046(sp)
    4780:	   |      move.l 1046(sp),d0
    4784:	   |      move.l d0,1042(sp)
	if (! CurrentDir(lock)) {
    4788:	   |      move.l 1042(sp),1038(sp)
    478e:	   |      move.l 1ca8a <DOSBase>,d0
    4794:	   |      movea.l d0,a6
    4796:	   |      move.l 1038(sp),d1
    479a:	   |      jsr -126(a6)
    479e:	   |      move.l d0,1034(sp)
    47a2:	   |      move.l 1034(sp),d0
    47a6:	   |  /-- bne.s 47b6 <setGameFilePath+0x1a8>
		KPrintF("setGameFilePath: Can't get game directory.\n");
    47a8:	   |  |   pea 18741 <PutChar+0x911>
    47ae:	   |  |   jsr 17366 <KPrintF>
    47b4:	   |  |   addq.l #4,sp
	}
	
	lock = Lock(currentDir, ACCESS_READ);	
    47b6:	   |  \-> move.l #1112,d0
    47bc:	   |      add.l sp,d0
    47be:	   |      addi.l #-1102,d0
    47c4:	   |      move.l d0,1030(sp)
    47c8:	   |      moveq #-2,d0
    47ca:	   |      move.l d0,1026(sp)
    47ce:	   |      move.l 1ca8a <DOSBase>,d0
    47d4:	   |      movea.l d0,a6
    47d6:	   |      move.l 1030(sp),d1
    47da:	   |      move.l 1026(sp),d2
    47de:	   |      jsr -84(a6)
    47e2:	   |      move.l d0,1022(sp)
    47e6:	   |      move.l 1022(sp),d0
    47ea:	   |      move.l d0,1042(sp)
	if (!CurrentDir(lock)) {	
    47ee:	   |      move.l 1042(sp),1018(sp)
    47f4:	   |      move.l 1ca8a <DOSBase>,d0
    47fa:	   |      movea.l d0,a6
    47fc:	   |      move.l 1018(sp),d1
    4800:	   |      jsr -126(a6)
    4804:	   |      move.l d0,1014(sp)
    4808:	   |      move.l 1014(sp),d0
    480c:	   |  /-- bne.s 4822 <setGameFilePath+0x214>
		KPrintF("setGameFilePath: Failed changing to directory %s\n", currentDir);
    480e:	   |  |   moveq #10,d0
    4810:	   |  |   add.l sp,d0
    4812:	   |  |   move.l d0,-(sp)
    4814:	   |  |   pea 1876d <PutChar+0x93d>
    481a:	   |  |   jsr 17366 <KPrintF>
    4820:	   |  |   addq.l #8,sp
	}

	//Free Mem
	if (gamePath != 0) FreeVec(gamePath);
    4822:	   |  \-> move.l 1c9ea <gamePath>,d0
    4828:	   +----- beq.s 4842 <setGameFilePath+0x234>
    482a:	   |      move.l 1c9ea <gamePath>,1010(sp)
    4832:	   |      move.l 1ca82 <SysBase>,d0
    4838:	   |      movea.l d0,a6
    483a:	   |      movea.l 1010(sp),a1
    483e:	   |      jsr -690(a6)
}
    4842:	   \----> move.l (sp)+,d2
    4844:	          movea.l (sp)+,a6
    4846:	          lea 1104(sp),sp
    484a:	          rts

0000484c <abortFunction>:
int numResourceNames = 0;
int numUserFunc = 0;
int specialSettings;


void abortFunction (struct loadedFunction * fun) {
    484c:	/-------> lea -16(sp),sp
    4850:	|         move.l a6,-(sp)
	int a;

	pauseFunction (fun);
    4852:	|         move.l 24(sp),-(sp)
    4856:	|         jsr 697a <pauseFunction>
    485c:	|         addq.l #4,sp
	while (fun -> stack) trimStack (&fun -> stack);
    485e:	|     /-- bra.s 4870 <abortFunction+0x24>
    4860:	|  /--|-> moveq #24,d0
    4862:	|  |  |   add.l 24(sp),d0
    4866:	|  |  |   move.l d0,-(sp)
    4868:	|  |  |   jsr 1528a <trimStack>
    486e:	|  |  |   addq.l #4,sp
    4870:	|  |  \-> movea.l 24(sp),a0
    4874:	|  |      move.l 24(a0),d0
    4878:	|  \----- bne.s 4860 <abortFunction+0x14>
	FreeVec( fun -> compiledLines);
    487a:	|         movea.l 24(sp),a0
    487e:	|         move.l 4(a0),12(sp)
    4884:	|         move.l 1ca82 <SysBase>,d0
    488a:	|         movea.l d0,a6
    488c:	|         movea.l 12(sp),a1
    4890:	|         jsr -690(a6)
	for (a = 0; a < fun -> numLocals; a ++) unlinkVar (&(fun -> localVars[a]));
    4894:	|         clr.l 16(sp)
    4898:	|     /-- bra.s 48b8 <abortFunction+0x6c>
    489a:	|  /--|-> movea.l 24(sp),a0
    489e:	|  |  |   move.l 20(a0),d1
    48a2:	|  |  |   move.l 16(sp),d0
    48a6:	|  |  |   lsl.l #3,d0
    48a8:	|  |  |   add.l d1,d0
    48aa:	|  |  |   move.l d0,-(sp)
    48ac:	|  |  |   jsr 14b54 <unlinkVar>
    48b2:	|  |  |   addq.l #4,sp
    48b4:	|  |  |   addq.l #1,16(sp)
    48b8:	|  |  \-> movea.l 24(sp),a0
    48bc:	|  |      move.l 8(a0),d0
    48c0:	|  |      cmp.l 16(sp),d0
    48c4:	|  \----- bgt.s 489a <abortFunction+0x4e>
	FreeVec(fun -> localVars);
    48c6:	|         movea.l 24(sp),a0
    48ca:	|         move.l 20(a0),8(sp)
    48d0:	|         move.l 1ca82 <SysBase>,d0
    48d6:	|         movea.l d0,a6
    48d8:	|         movea.l 8(sp),a1
    48dc:	|         jsr -690(a6)
	unlinkVar (&fun -> reg);
    48e0:	|         moveq #28,d0
    48e2:	|         add.l 24(sp),d0
    48e6:	|         move.l d0,-(sp)
    48e8:	|         jsr 14b54 <unlinkVar>
    48ee:	|         addq.l #4,sp
	if (fun -> calledBy) abortFunction (fun -> calledBy);
    48f0:	|         movea.l 24(sp),a0
    48f4:	|         move.l 40(a0),d0
    48f8:	|     /-- beq.s 490a <abortFunction+0xbe>
    48fa:	|     |   movea.l 24(sp),a0
    48fe:	|     |   move.l 40(a0),d0
    4902:	|     |   move.l d0,-(sp)
    4904:	\-----|-- jsr 484c <abortFunction>(pc)
    4908:	      |   addq.l #4,sp
	FreeVec(fun);
    490a:	      \-> move.l 24(sp),4(sp)
    4910:	          move.l 1ca82 <SysBase>,d0
    4916:	          movea.l d0,a6
    4918:	          movea.l 4(sp),a1
    491c:	          jsr -690(a6)
	fun = NULL;
    4920:	          clr.l 24(sp)
}
    4924:	          nop
    4926:	          movea.l (sp)+,a6
    4928:	          lea 16(sp),sp
    492c:	          rts

0000492e <cancelAFunction>:

int cancelAFunction (int funcNum, struct loadedFunction * myself, BOOL * killedMyself) {
    492e:	          subq.l #8,sp
	int n = 0;
    4930:	          clr.l 4(sp)
	*killedMyself = FALSE;
    4934:	          movea.l 20(sp),a0
    4938:	          clr.w (a0)

	struct loadedFunction * fun = allRunningFunctions;
    493a:	          move.l 1ca1a <allRunningFunctions>,(sp)
	while (fun) {
    4940:	   /----- bra.s 496e <cancelAFunction+0x40>
		if (fun -> originalNumber == funcNum) {
    4942:	/--|----> movea.l (sp),a0
    4944:	|  |      move.l (a0),d0
    4946:	|  |      cmp.l 12(sp),d0
    494a:	|  |  /-- bne.s 4968 <cancelAFunction+0x3a>
			fun -> cancelMe = TRUE;
    494c:	|  |  |   movea.l (sp),a0
    494e:	|  |  |   move.w #1,54(a0)
			n++;
    4954:	|  |  |   addq.l #1,4(sp)
			if (fun == myself) *killedMyself = TRUE;
    4958:	|  |  |   move.l (sp),d0
    495a:	|  |  |   cmp.l 16(sp),d0
    495e:	|  |  +-- bne.s 4968 <cancelAFunction+0x3a>
    4960:	|  |  |   movea.l 20(sp),a0
    4964:	|  |  |   move.w #1,(a0)
		}
		fun = fun -> next;
    4968:	|  |  \-> movea.l (sp),a0
    496a:	|  |      move.l 44(a0),(sp)
	while (fun) {
    496e:	|  \----> tst.l (sp)
    4970:	\-------- bne.s 4942 <cancelAFunction+0x14>
	}
	return n;
    4972:	          move.l 4(sp),d0
}
    4976:	          addq.l #8,sp
    4978:	          rts

0000497a <completeTimers>:


void completeTimers () {
    497a:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    497c:	          move.l 1ca1a <allRunningFunctions>,(sp)

	while (thisFunction) {
    4982:	   /----- bra.s 4998 <completeTimers+0x1e>
		if (thisFunction->freezerLevel == 0) thisFunction->timeLeft = 0;
    4984:	/--|----> movea.l (sp),a0
    4986:	|  |      move.b 56(a0),d0
    498a:	|  |  /-- bne.s 4992 <completeTimers+0x18>
    498c:	|  |  |   movea.l (sp),a0
    498e:	|  |  |   clr.l 12(a0)
		thisFunction = thisFunction->next;
    4992:	|  |  \-> movea.l (sp),a0
    4994:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    4998:	|  \----> tst.l (sp)
    499a:	\-------- bne.s 4984 <completeTimers+0xa>
	}
}
    499c:	          nop
    499e:	          nop
    49a0:	          addq.l #4,sp
    49a2:	          rts

000049a4 <continueFunction>:

BOOL continueFunction (struct loadedFunction * fun) {
    49a4:	                                                             lea -76(sp),sp
	BOOL keepLooping = TRUE;
    49a8:	                                                             move.w #1,74(sp)
	BOOL advanceNow;
	unsigned int param;
	enum sludgeCommand com;

	if (fun -> cancelMe) {
    49ae:	                                                             movea.l 80(sp),a0
    49b2:	                                                             move.w 54(a0),d0
    49b6:	/----------------------------------------------------------- beq.w 5844 <continueFunction+0xea0>
		abortFunction (fun);
    49ba:	|                                                            move.l 80(sp),-(sp)
    49be:	|                                                            jsr 484c <abortFunction>
    49c4:	|                                                            addq.l #4,sp
		return TRUE;
    49c6:	|                                                            moveq #1,d0
    49c8:	|  /-------------------------------------------------------- bra.w 584e <continueFunction+0xeaa>
	}

	while (keepLooping) {
		advanceNow = TRUE;
    49cc:	|  |  /----------------------------------------------------> move.w #1,72(sp)
		param = fun -> compiledLines[fun -> runThisLine].param;
    49d2:	|  |  |                                                      movea.l 80(sp),a0
    49d6:	|  |  |                                                      move.l 4(a0),d1
    49da:	|  |  |                                                      movea.l 80(sp),a0
    49de:	|  |  |                                                      move.l 36(a0),d0
    49e2:	|  |  |                                                      lsl.l #3,d0
    49e4:	|  |  |                                                      movea.l d1,a0
    49e6:	|  |  |                                                      adda.l d0,a0
    49e8:	|  |  |                                                      move.l 4(a0),68(sp)
		com = fun -> compiledLines[fun -> runThisLine].theCommand;
    49ee:	|  |  |                                                      movea.l 80(sp),a0
    49f2:	|  |  |                                                      move.l 4(a0),d1
    49f6:	|  |  |                                                      movea.l 80(sp),a0
    49fa:	|  |  |                                                      move.l 36(a0),d0
    49fe:	|  |  |                                                      lsl.l #3,d0
    4a00:	|  |  |                                                      movea.l d1,a0
    4a02:	|  |  |                                                      adda.l d0,a0
    4a04:	|  |  |                                                      move.l (a0),64(sp)

//		fprintf (stderr, "com: %d param: %d (%s)\n", com, param,
//				(com < numSludgeCommands) ? sludgeText[com] : ERROR_UNKNOWN_MCODE); fflush(stderr);


		switch (com) {
    4a08:	|  |  |                                                      moveq #41,d0
    4a0a:	|  |  |                                                      cmp.l 64(sp),d0
    4a0e:	|  |  |  /-------------------------------------------------- bcs.w 57f8 <continueFunction+0xe54>
    4a12:	|  |  |  |                                                   move.l 64(sp),d0
    4a16:	|  |  |  |                                                   add.l d0,d0
    4a18:	|  |  |  |                                                   movea.l d0,a0
    4a1a:	|  |  |  |                                                   adda.l #18982,a0
    4a20:	|  |  |  |                                                   move.w (a0),d0
    4a22:	|  |  |  |                                                   jmp (4a26 <continueFunction+0x82>,pc,d0.w)
    4a26:	|  |  |  |                                                   bset d6,(a2)
    4a28:	|  |  |  |                                                   ori.w #2670,(a4)
    4a2c:	|  |  |  |                                                   eori.w #2416,d6
    4a30:	|  |  |  |                                                   bchg d4,d2
    4a32:	|  |  |  |                                                   bclr d4,(a4)+
    4a34:	|  |  |  |                                                   andi.l #181013194,d4
    4a3a:	|  |  |  |                                                   .short 0x0aca
    4a3c:	|  |  |  |                                                   .short 0x0aca
    4a3e:	|  |  |  |                                                   andi.l #51251914,(-54,a2,d0.l:2)
    4a46:	|  |  |  |                                                   .short 0x0aca
    4a48:	|  |  |  |                                                   andi.w #906,-(a4)
    4a4c:	|  |  |  |                                                   bchg d1,196(a2)
    4a50:	|  |  |  |                                                   bset d1,580(a4)
    4a54:	|  |  |  |                                                   bclr d1,2576(a2)
    4a58:	|  |  |  |                                                   andi.b #-56,2762(a2)
    4a5e:	|  |  |  |                                                   .short 0x0aca
    4a60:	|  |  |  |                                                   eori.l #63572682,d0
    4a66:	|  |  |  |                                                   .short 0x0aca
    4a68:	|  |  |  |                                                   bchg d3,-(a2)
    4a6a:	|  |  |  |                                                   bchg #-36,(a2)
    4a6e:	|  |  |  |                                                   .short 0x08cc
    4a70:	|  |  |  |                                                   addi.b #14,1038(a0)
    4a76:	|  |  |  |                                                   .short 0x040e
    4a78:	|  |  |  |                                                   bset d4,8303(a4)
			case SLU_RETURN:
			if (fun -> calledBy) {
    4a7c:	|  |  |  |                                                   ori.w #8232,(a0)
    4a80:	|  |  |  |                                                   ori.b #78,8303(a0)
				struct loadedFunction * returnTo = fun -> calledBy;
    4a86:	|  |  |  |                                                   ori.w #12136,(a0)
    4a8a:	|  |  |  |                                                   ori.b #44,8303(a0)
				if (fun -> returnSomething) copyVariable (&fun -> reg, &returnTo -> reg);
    4a90:	|  |  |  |                                                   ori.w #12328,(a0)
    4a94:	|  |  |  |                                                   ori.b #24,(28,a0,d7.w:2)
    4a9a:	|  |  |  |                                                   add.l 44(sp),d1
    4a9e:	|  |  |  |                                                   moveq #28,d0
    4aa0:	|  |  |  |                                                   add.l 80(sp),d0
    4aa4:	|  |  |  |                                                   move.l d1,-(sp)
    4aa6:	|  |  |  |                                                   move.l d0,-(sp)
    4aa8:	|  |  |  |                                                   jsr 14dc0 <copyVariable>
    4aae:	|  |  |  |                                                   addq.l #8,sp
				finishFunction (fun);
    4ab0:	|  |  |  |                                                   move.l 80(sp),-(sp)
    4ab4:	|  |  |  |                                                   jsr 5854 <finishFunction>
    4aba:	|  |  |  |                                                   addq.l #4,sp
				fun = returnTo;
    4abc:	|  |  |  |                                                   move.l 44(sp),80(sp)
				restartFunction (fun);
    4ac2:	|  |  |  |                                                   move.l 80(sp),-(sp)
    4ac6:	|  |  |  |                                                   jsr 69bc <restartFunction>
    4acc:	|  |  |  |                                                   addq.l #4,sp
			} else {
				finishFunction (fun);
				advanceNow = FALSE;		// So we don't do anything else with "fun"
				keepLooping = FALSE;	// So we drop out of the loop
			}
			break;
    4ace:	|  |  |  |  /----------------------------------------------- bra.w 582c <continueFunction+0xe88>
				finishFunction (fun);
    4ad2:	|  |  |  |  |                                                move.l 80(sp),-(sp)
    4ad6:	|  |  |  |  |                                                jsr 5854 <finishFunction>
    4adc:	|  |  |  |  |                                                addq.l #4,sp
				advanceNow = FALSE;		// So we don't do anything else with "fun"
    4ade:	|  |  |  |  |                                                clr.w 72(sp)
				keepLooping = FALSE;	// So we drop out of the loop
    4ae2:	|  |  |  |  |                                                clr.w 74(sp)
			break;
    4ae6:	|  |  |  |  +----------------------------------------------- bra.w 582c <continueFunction+0xe88>

			case SLU_CALLIT:
			switch (fun -> reg.varType) {
    4aea:	|  |  |  |  |                                                movea.l 80(sp),a0
    4aee:	|  |  |  |  |                                                move.l 28(a0),d0
    4af2:	|  |  |  |  |                                                moveq #2,d1
    4af4:	|  |  |  |  |                                                cmp.l d0,d1
    4af6:	|  |  |  |  |                                            /-- beq.s 4b02 <continueFunction+0x15e>
    4af8:	|  |  |  |  |                                            |   moveq #4,d1
    4afa:	|  |  |  |  |                                            |   cmp.l d0,d1
    4afc:	|  |  |  |  |                                         /--|-- beq.s 4b50 <continueFunction+0x1ac>
    4afe:	|  |  |  |  |                                /--------|--|-- bra.w 4c38 <continueFunction+0x294>
				case SVT_FUNC:
				pauseFunction (fun);		
    4b02:	|  |  |  |  |                                |        |  \-> move.l 80(sp),-(sp)
    4b06:	|  |  |  |  |                                |        |      jsr 697a <pauseFunction>
    4b0c:	|  |  |  |  |                                |        |      addq.l #4,sp
				if (! startNewFunctionNum (fun -> reg.varData.intValue, param, fun, &fun -> stack,TRUE)) return FALSE;
    4b0e:	|  |  |  |  |                                |        |      moveq #24,d0
    4b10:	|  |  |  |  |                                |        |      add.l 80(sp),d0
    4b14:	|  |  |  |  |                                |        |      movea.l 80(sp),a0
    4b18:	|  |  |  |  |                                |        |      move.l 32(a0),d1
    4b1c:	|  |  |  |  |                                |        |      pea 1 <_start+0x1>
    4b20:	|  |  |  |  |                                |        |      move.l d0,-(sp)
    4b22:	|  |  |  |  |                                |        |      move.l 88(sp),-(sp)
    4b26:	|  |  |  |  |                                |        |      move.l 80(sp),-(sp)
    4b2a:	|  |  |  |  |                                |        |      move.l d1,-(sp)
    4b2c:	|  |  |  |  |                                |        |      jsr 6c08 <startNewFunctionNum>
    4b32:	|  |  |  |  |                                |        |      lea 20(sp),sp
    4b36:	|  |  |  |  |                                |        |      tst.l d0
    4b38:	|  |  |  |  |                                |        |  /-- bne.s 4b40 <continueFunction+0x19c>
    4b3a:	|  |  |  |  |                                |        |  |   clr.w d0
    4b3c:	|  +--|--|--|--------------------------------|--------|--|-- bra.w 584e <continueFunction+0xeaa>
				fun = allRunningFunctions;
    4b40:	|  |  |  |  |                                |        |  \-> move.l 1ca1a <allRunningFunctions>,80(sp)
				advanceNow = FALSE;		// So we don't do anything else with "fun"
    4b48:	|  |  |  |  |                                |        |      clr.w 72(sp)
				break;
    4b4c:	|  |  |  |  |                                |  /-----|----- bra.w 4c4c <continueFunction+0x2a8>

				case SVT_BUILT:
					{
					//KPrintF("Loading function %ld",fun -> reg.varData.intValue);
					enum builtReturn br = callBuiltIn (fun -> reg.varData.intValue, param, fun);
    4b50:	|  |  |  |  |                                |  |     \----> move.l 68(sp),d1
    4b54:	|  |  |  |  |                                |  |            movea.l 80(sp),a0
    4b58:	|  |  |  |  |                                |  |            move.l 32(a0),d0
    4b5c:	|  |  |  |  |                                |  |            move.l 80(sp),-(sp)
    4b60:	|  |  |  |  |                                |  |            move.l d1,-(sp)
    4b62:	|  |  |  |  |                                |  |            move.l d0,-(sp)
    4b64:	|  |  |  |  |                                |  |            jsr 135e8 <callBuiltIn>
    4b6a:	|  |  |  |  |                                |  |            lea 12(sp),sp
    4b6e:	|  |  |  |  |                                |  |            move.l d0,52(sp)
    4b72:	|  |  |  |  |                                |  |            moveq #5,d0
    4b74:	|  |  |  |  |                                |  |            cmp.l 52(sp),d0
    4b78:	|  |  |  |  |                                |  |  /-------- bcs.w 4c34 <continueFunction+0x290>
    4b7c:	|  |  |  |  |                                |  |  |         move.l 52(sp),d0
    4b80:	|  |  |  |  |                                |  |  |         add.l d0,d0
    4b82:	|  |  |  |  |                                |  |  |         movea.l d0,a0
    4b84:	|  |  |  |  |                                |  |  |         adda.l #19344,a0
    4b8a:	|  |  |  |  |                                |  |  |         move.w (a0),d0
    4b8c:	|  |  |  |  |                                |  |  |         jmp (4b90 <continueFunction+0x1ec>,pc,d0.w)
    4b90:	|  |  |  |  |                                |  |  |         ori.b #12,164(a4)
    4b96:	|  |  |  |  |                                |  |  |         ori.b #60,-(a0)
    4b9a:	|  |  |  |  |                                |  |  |         ori.b #121,(1,a2,d0.w)

					switch (br) {
						case BR_ERROR:
							KPrintF("Unknown error. This shouldn't happen. Please notify the SLUDGE developers.");
    4ba0:	|  |  |  |  |                                |  |  |         or.w (-71,a5,d4.l:8),d4
    4ba4:	|  |  |  |  |                                |  |  |         ori.b #102,d1
    4ba8:	|  |  |  |  |                                |  |  |         addq.l #4,sp
							return FALSE;
    4baa:	|  |  |  |  |                                |  |  |         clr.w d0
    4bac:	|  +--|--|--|--------------------------------|--|--|-------- bra.w 584e <continueFunction+0xeaa>

						case BR_PAUSE:
						pauseFunction (fun);
    4bb0:	|  |  |  |  |                                |  |  |         move.l 80(sp),-(sp)
    4bb4:	|  |  |  |  |                                |  |  |         jsr 697a <pauseFunction>
    4bba:	|  |  |  |  |                                |  |  |         addq.l #4,sp
						[[fallthrough]];
						// No break!

						case BR_KEEP_AND_PAUSE:
						keepLooping = FALSE;
    4bbc:	|  |  |  |  |                                |  |  |         clr.w 74(sp)
						break;
    4bc0:	|  |  |  |  |                                |  |  |  /----- bra.s 4c36 <continueFunction+0x292>

						case BR_ALREADY_GONE:
						keepLooping = FALSE;
    4bc2:	|  |  |  |  |                                |  |  |  |      clr.w 74(sp)
						advanceNow = FALSE;
    4bc6:	|  |  |  |  |                                |  |  |  |      clr.w 72(sp)
						break;
    4bca:	|  |  |  |  |                                |  |  |  +----- bra.s 4c36 <continueFunction+0x292>

						case BR_CALLAFUNC:
						{
							int i = fun -> reg.varData.intValue;
    4bcc:	|  |  |  |  |                                |  |  |  |      movea.l 80(sp),a0
    4bd0:	|  |  |  |  |                                |  |  |  |      move.l 32(a0),48(sp)
							setVariable (&fun -> reg, SVT_INT, 1);
    4bd6:	|  |  |  |  |                                |  |  |  |      moveq #28,d0
    4bd8:	|  |  |  |  |                                |  |  |  |      add.l 80(sp),d0
    4bdc:	|  |  |  |  |                                |  |  |  |      pea 1 <_start+0x1>
    4be0:	|  |  |  |  |                                |  |  |  |      pea 1 <_start+0x1>
    4be4:	|  |  |  |  |                                |  |  |  |      move.l d0,-(sp)
    4be6:	|  |  |  |  |                                |  |  |  |      jsr 151f8 <setVariable>
    4bec:	|  |  |  |  |                                |  |  |  |      lea 12(sp),sp
							pauseFunction (fun);							
    4bf0:	|  |  |  |  |                                |  |  |  |      move.l 80(sp),-(sp)
    4bf4:	|  |  |  |  |                                |  |  |  |      jsr 697a <pauseFunction>
    4bfa:	|  |  |  |  |                                |  |  |  |      addq.l #4,sp
							if (! startNewFunctionNum (i, 0, fun, noStack, FALSE)) return FALSE;
    4bfc:	|  |  |  |  |                                |  |  |  |      move.l 1ca52 <noStack>,d1
    4c02:	|  |  |  |  |                                |  |  |  |      move.l 48(sp),d0
    4c06:	|  |  |  |  |                                |  |  |  |      clr.l -(sp)
    4c08:	|  |  |  |  |                                |  |  |  |      move.l d1,-(sp)
    4c0a:	|  |  |  |  |                                |  |  |  |      move.l 88(sp),-(sp)
    4c0e:	|  |  |  |  |                                |  |  |  |      clr.l -(sp)
    4c10:	|  |  |  |  |                                |  |  |  |      move.l d0,-(sp)
    4c12:	|  |  |  |  |                                |  |  |  |      jsr 6c08 <startNewFunctionNum>
    4c18:	|  |  |  |  |                                |  |  |  |      lea 20(sp),sp
    4c1c:	|  |  |  |  |                                |  |  |  |      tst.l d0
    4c1e:	|  |  |  |  |                                |  |  |  |  /-- bne.s 4c26 <continueFunction+0x282>
    4c20:	|  |  |  |  |                                |  |  |  |  |   clr.w d0
    4c22:	|  +--|--|--|--------------------------------|--|--|--|--|-- bra.w 584e <continueFunction+0xeaa>
							fun = allRunningFunctions;
    4c26:	|  |  |  |  |                                |  |  |  |  \-> move.l 1ca1a <allRunningFunctions>,80(sp)
							advanceNow = FALSE;		// So we don't do anything else with "fun"
    4c2e:	|  |  |  |  |                                |  |  |  |      clr.w 72(sp)
						}
						break;
    4c32:	|  |  |  |  |                                |  |  |  +----- bra.s 4c36 <continueFunction+0x292>

						default:
						break;
    4c34:	|  |  |  |  |                                |  |  \--|----> nop
					}
				}
				break;
    4c36:	|  |  |  |  |                                |  +-----\----X bra.s 4c4c <continueFunction+0x2a8>

				default:
				KPrintF(ERROR_CALL_NONFUNCTION);
    4c38:	|  |  |  |  |                                \--|----------> pea 188c0 <PutChar+0xa90>
    4c3e:	|  |  |  |  |                                   |            jsr 17366 <KPrintF>
    4c44:	|  |  |  |  |                                   |            addq.l #4,sp
				return FALSE;
    4c46:	|  |  |  |  |                                   |            clr.w d0
    4c48:	|  +--|--|--|-----------------------------------|----------- bra.w 584e <continueFunction+0xeaa>
			}
			break;
    4c4c:	|  |  |  |  +-----------------------------------\----------X bra.w 582c <continueFunction+0xe88>

			// These all grab things and shove 'em into the register

			case SLU_LOAD_NULL:
			setVariable (&fun -> reg, SVT_NULL, 0);
    4c50:	|  |  |  |  |                                                moveq #28,d0
    4c52:	|  |  |  |  |                                                add.l 80(sp),d0
    4c56:	|  |  |  |  |                                                clr.l -(sp)
    4c58:	|  |  |  |  |                                                clr.l -(sp)
    4c5a:	|  |  |  |  |                                                move.l d0,-(sp)
    4c5c:	|  |  |  |  |                                                jsr 151f8 <setVariable>
    4c62:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    4c66:	|  |  |  |  +----------------------------------------------- bra.w 582c <continueFunction+0xe88>

			case SLU_LOAD_FILE:
			setVariable (&fun -> reg, SVT_FILE, param);
    4c6a:	|  |  |  |  |                                                move.l 68(sp),d1
    4c6e:	|  |  |  |  |                                                moveq #28,d0
    4c70:	|  |  |  |  |                                                add.l 80(sp),d0
    4c74:	|  |  |  |  |                                                move.l d1,-(sp)
    4c76:	|  |  |  |  |                                                pea 5 <_start+0x5>
    4c7a:	|  |  |  |  |                                                move.l d0,-(sp)
    4c7c:	|  |  |  |  |                                                jsr 151f8 <setVariable>
    4c82:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    4c86:	|  |  |  |  +----------------------------------------------- bra.w 582c <continueFunction+0xe88>

			case SLU_LOAD_VALUE:
			setVariable (&fun -> reg, SVT_INT, param);
    4c8a:	|  |  |  |  |                                                move.l 68(sp),d1
    4c8e:	|  |  |  |  |                                                moveq #28,d0
    4c90:	|  |  |  |  |                                                add.l 80(sp),d0
    4c94:	|  |  |  |  |                                                move.l d1,-(sp)
    4c96:	|  |  |  |  |                                                pea 1 <_start+0x1>
    4c9a:	|  |  |  |  |                                                move.l d0,-(sp)
    4c9c:	|  |  |  |  |                                                jsr 151f8 <setVariable>
    4ca2:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    4ca6:	|  |  |  |  +----------------------------------------------- bra.w 582c <continueFunction+0xe88>

			case SLU_LOAD_LOCAL:
			if (! copyVariable (&(fun -> localVars[param]), &fun -> reg)) return FALSE;
    4caa:	|  |  |  |  |                                                moveq #28,d0
    4cac:	|  |  |  |  |                                                add.l 80(sp),d0
    4cb0:	|  |  |  |  |                                                movea.l 80(sp),a0
    4cb4:	|  |  |  |  |                                                movea.l 20(a0),a0
    4cb8:	|  |  |  |  |                                                move.l 68(sp),d1
    4cbc:	|  |  |  |  |                                                lsl.l #3,d1
    4cbe:	|  |  |  |  |                                                add.l a0,d1
    4cc0:	|  |  |  |  |                                                move.l d0,-(sp)
    4cc2:	|  |  |  |  |                                                move.l d1,-(sp)
    4cc4:	|  |  |  |  |                                                jsr 14dc0 <copyVariable>
    4cca:	|  |  |  |  |                                                addq.l #8,sp
    4ccc:	|  |  |  |  |                                                tst.w d0
    4cce:	|  |  |  |  |  /-------------------------------------------- bne.w 580a <continueFunction+0xe66>
    4cd2:	|  |  |  |  |  |                                             clr.w d0
    4cd4:	|  +--|--|--|--|-------------------------------------------- bra.w 584e <continueFunction+0xeaa>
			break;

			case SLU_AND:
			setVariable (&fun -> reg, SVT_INT, getBoolean (&fun -> reg) && getBoolean(&(fun -> stack -> thisVar)));
    4cd8:	|  |  |  |  |  |                                             moveq #28,d0
    4cda:	|  |  |  |  |  |                                             add.l 80(sp),d0
    4cde:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4ce0:	|  |  |  |  |  |                                             jsr 14e46 <getBoolean>
    4ce6:	|  |  |  |  |  |                                             addq.l #4,sp
    4ce8:	|  |  |  |  |  |                                             tst.w d0
    4cea:	|  |  |  |  |  |                                      /----- beq.s 4d06 <continueFunction+0x362>
    4cec:	|  |  |  |  |  |                                      |      movea.l 80(sp),a0
    4cf0:	|  |  |  |  |  |                                      |      move.l 24(a0),d0
    4cf4:	|  |  |  |  |  |                                      |      move.l d0,-(sp)
    4cf6:	|  |  |  |  |  |                                      |      jsr 14e46 <getBoolean>
    4cfc:	|  |  |  |  |  |                                      |      addq.l #4,sp
    4cfe:	|  |  |  |  |  |                                      |      tst.w d0
    4d00:	|  |  |  |  |  |                                      +----- beq.s 4d06 <continueFunction+0x362>
    4d02:	|  |  |  |  |  |                                      |      moveq #1,d0
    4d04:	|  |  |  |  |  |                                      |  /-- bra.s 4d08 <continueFunction+0x364>
    4d06:	|  |  |  |  |  |                                      \--|-> moveq #0,d0
    4d08:	|  |  |  |  |  |                                         \-> moveq #28,d1
    4d0a:	|  |  |  |  |  |                                             add.l 80(sp),d1
    4d0e:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4d10:	|  |  |  |  |  |                                             pea 1 <_start+0x1>
    4d14:	|  |  |  |  |  |                                             move.l d1,-(sp)
    4d16:	|  |  |  |  |  |                                             jsr 151f8 <setVariable>
    4d1c:	|  |  |  |  |  |                                             lea 12(sp),sp
			trimStack (&fun -> stack);
    4d20:	|  |  |  |  |  |                                             moveq #24,d0
    4d22:	|  |  |  |  |  |                                             add.l 80(sp),d0
    4d26:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4d28:	|  |  |  |  |  |                                             jsr 1528a <trimStack>
    4d2e:	|  |  |  |  |  |                                             addq.l #4,sp
			break;
    4d30:	|  |  |  |  +--|-------------------------------------------- bra.w 582c <continueFunction+0xe88>

			case SLU_OR:
			setVariable (&fun -> reg, SVT_INT, getBoolean (&fun -> reg) || getBoolean (&(fun -> stack -> thisVar)));
    4d34:	|  |  |  |  |  |                                             moveq #28,d0
    4d36:	|  |  |  |  |  |                                             add.l 80(sp),d0
    4d3a:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4d3c:	|  |  |  |  |  |                                             jsr 14e46 <getBoolean>
    4d42:	|  |  |  |  |  |                                             addq.l #4,sp
    4d44:	|  |  |  |  |  |                                             tst.w d0
    4d46:	|  |  |  |  |  |                                         /-- bne.s 4d5e <continueFunction+0x3ba>
    4d48:	|  |  |  |  |  |                                         |   movea.l 80(sp),a0
    4d4c:	|  |  |  |  |  |                                         |   move.l 24(a0),d0
    4d50:	|  |  |  |  |  |                                         |   move.l d0,-(sp)
    4d52:	|  |  |  |  |  |                                         |   jsr 14e46 <getBoolean>
    4d58:	|  |  |  |  |  |                                         |   addq.l #4,sp
    4d5a:	|  |  |  |  |  |                                         |   tst.w d0
    4d5c:	|  |  |  |  |  |                                      /--|-- beq.s 4d62 <continueFunction+0x3be>
    4d5e:	|  |  |  |  |  |                                      |  \-> moveq #1,d0
    4d60:	|  |  |  |  |  |                                      |  /-- bra.s 4d64 <continueFunction+0x3c0>
    4d62:	|  |  |  |  |  |                                      \--|-> moveq #0,d0
    4d64:	|  |  |  |  |  |                                         \-> moveq #28,d1
    4d66:	|  |  |  |  |  |                                             add.l 80(sp),d1
    4d6a:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4d6c:	|  |  |  |  |  |                                             pea 1 <_start+0x1>
    4d70:	|  |  |  |  |  |                                             move.l d1,-(sp)
    4d72:	|  |  |  |  |  |                                             jsr 151f8 <setVariable>
    4d78:	|  |  |  |  |  |                                             lea 12(sp),sp
			trimStack (&fun -> stack);
    4d7c:	|  |  |  |  |  |                                             moveq #24,d0
    4d7e:	|  |  |  |  |  |                                             add.l 80(sp),d0
    4d82:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4d84:	|  |  |  |  |  |                                             jsr 1528a <trimStack>
    4d8a:	|  |  |  |  |  |                                             addq.l #4,sp
			break;
    4d8c:	|  |  |  |  +--|-------------------------------------------- bra.w 582c <continueFunction+0xe88>

			case SLU_LOAD_FUNC:
    		setVariable (&fun -> reg, SVT_FUNC, param);
    4d90:	|  |  |  |  |  |                                             move.l 68(sp),d1
    4d94:	|  |  |  |  |  |                                             moveq #28,d0
    4d96:	|  |  |  |  |  |                                             add.l 80(sp),d0
    4d9a:	|  |  |  |  |  |                                             move.l d1,-(sp)
    4d9c:	|  |  |  |  |  |                                             pea 2 <_start+0x2>
    4da0:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4da2:	|  |  |  |  |  |                                             jsr 151f8 <setVariable>
    4da8:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    4dac:	|  |  |  |  +--|-------------------------------------------- bra.w 582c <continueFunction+0xe88>

			case SLU_LOAD_BUILT:
			setVariable (&fun -> reg, SVT_BUILT, param);
    4db0:	|  |  |  |  |  |                                             move.l 68(sp),d1
    4db4:	|  |  |  |  |  |                                             moveq #28,d0
    4db6:	|  |  |  |  |  |                                             add.l 80(sp),d0
    4dba:	|  |  |  |  |  |                                             move.l d1,-(sp)
    4dbc:	|  |  |  |  |  |                                             pea 4 <_start+0x4>
    4dc0:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4dc2:	|  |  |  |  |  |                                             jsr 151f8 <setVariable>
    4dc8:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    4dcc:	|  |  |  |  +--|-------------------------------------------- bra.w 582c <continueFunction+0xe88>

			case SLU_LOAD_OBJTYPE:
			setVariable (&fun -> reg, SVT_OBJTYPE, param);
    4dd0:	|  |  |  |  |  |                                             move.l 68(sp),d1
    4dd4:	|  |  |  |  |  |                                             moveq #28,d0
    4dd6:	|  |  |  |  |  |                                             add.l 80(sp),d0
    4dda:	|  |  |  |  |  |                                             move.l d1,-(sp)
    4ddc:	|  |  |  |  |  |                                             pea 7 <_start+0x7>
    4de0:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4de2:	|  |  |  |  |  |                                             jsr 151f8 <setVariable>
    4de8:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    4dec:	|  |  |  |  +--|-------------------------------------------- bra.w 582c <continueFunction+0xe88>

			case SLU_UNREG:
			if (dialogValue != 1) {
    4df0:	|  |  |  |  |  |                                             move.l 1c9e2 <dialogValue>,d0
    4df6:	|  |  |  |  |  |                                             moveq #1,d1
    4df8:	|  |  |  |  |  |                                             cmp.l d0,d1
    4dfa:	|  |  |  |  |  |  /----------------------------------------- beq.w 580e <continueFunction+0xe6a>
				KPrintF(ERROR_HACKER);
    4dfe:	|  |  |  |  |  |  |                                          pea 188d5 <PutChar+0xaa5>
    4e04:	|  |  |  |  |  |  |                                          jsr 17366 <KPrintF>
    4e0a:	|  |  |  |  |  |  |                                          addq.l #4,sp
				return FALSE;
    4e0c:	|  |  |  |  |  |  |                                          clr.w d0
    4e0e:	|  +--|--|--|--|--|----------------------------------------- bra.w 584e <continueFunction+0xeaa>
			}
			break;

			case SLU_LOAD_STRING:
				if (! loadStringToVar (&fun -> reg, param)) {
    4e12:	|  |  |  |  |  |  |                                          move.l 68(sp),d1
    4e16:	|  |  |  |  |  |  |                                          moveq #28,d0
    4e18:	|  |  |  |  |  |  |                                          add.l 80(sp),d0
    4e1c:	|  |  |  |  |  |  |                                          move.l d1,-(sp)
    4e1e:	|  |  |  |  |  |  |                                          move.l d0,-(sp)
    4e20:	|  |  |  |  |  |  |                                          jsr 1498a <loadStringToVar>
    4e26:	|  |  |  |  |  |  |                                          addq.l #8,sp
    4e28:	|  |  |  |  |  |  |                                          tst.w d0
    4e2a:	|  |  |  |  |  |  |  /-------------------------------------- bne.w 5812 <continueFunction+0xe6e>
					return FALSE;
    4e2e:	|  |  |  |  |  |  |  |                                       clr.w d0
    4e30:	|  +--|--|--|--|--|--|-------------------------------------- bra.w 584e <continueFunction+0xeaa>
			break;

			case SLU_INDEXGET:
			case SLU_INCREMENT_INDEX:
			case SLU_DECREMENT_INDEX:
			switch (fun -> stack -> thisVar.varType) {
    4e34:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    4e38:	|  |  |  |  |  |  |  |                                       movea.l 24(a0),a0
    4e3c:	|  |  |  |  |  |  |  |                                       move.l (a0),d0
    4e3e:	|  |  |  |  |  |  |  |                                       moveq #10,d1
    4e40:	|  |  |  |  |  |  |  |                                       cmp.l d0,d1
    4e42:	|  |  |  |  |  |  |  |                                /----- beq.s 4ea0 <continueFunction+0x4fc>
    4e44:	|  |  |  |  |  |  |  |                                |      moveq #10,d1
    4e46:	|  |  |  |  |  |  |  |                                |      cmp.l d0,d1
    4e48:	|  |  |  |  |  |  |  |              /-----------------|----- bcs.w 5034 <continueFunction+0x690>
    4e4c:	|  |  |  |  |  |  |  |              |                 |      tst.l d0
    4e4e:	|  |  |  |  |  |  |  |              |                 |  /-- beq.s 4e5a <continueFunction+0x4b6>
    4e50:	|  |  |  |  |  |  |  |              |                 |  |   moveq #6,d1
    4e52:	|  |  |  |  |  |  |  |              |                 |  |   cmp.l d0,d1
    4e54:	|  |  |  |  |  |  |  |              |                 +--|-- beq.s 4ea0 <continueFunction+0x4fc>
    4e56:	|  |  |  |  |  |  |  |              +-----------------|--|-- bra.w 5034 <continueFunction+0x690>
				case SVT_NULL:
				if (com == SLU_INDEXGET) {
    4e5a:	|  |  |  |  |  |  |  |              |                 |  \-> moveq #38,d0
    4e5c:	|  |  |  |  |  |  |  |              |                 |      cmp.l 64(sp),d0
    4e60:	|  |  |  |  |  |  |  |              |                 |  /-- bne.s 4e8c <continueFunction+0x4e8>
					setVariable (&fun -> reg, SVT_NULL, 0);
    4e62:	|  |  |  |  |  |  |  |              |                 |  |   moveq #28,d0
    4e64:	|  |  |  |  |  |  |  |              |                 |  |   add.l 80(sp),d0
    4e68:	|  |  |  |  |  |  |  |              |                 |  |   clr.l -(sp)
    4e6a:	|  |  |  |  |  |  |  |              |                 |  |   clr.l -(sp)
    4e6c:	|  |  |  |  |  |  |  |              |                 |  |   move.l d0,-(sp)
    4e6e:	|  |  |  |  |  |  |  |              |                 |  |   jsr 151f8 <setVariable>
    4e74:	|  |  |  |  |  |  |  |              |                 |  |   lea 12(sp),sp
					trimStack (&fun -> stack);
    4e78:	|  |  |  |  |  |  |  |              |                 |  |   moveq #24,d0
    4e7a:	|  |  |  |  |  |  |  |              |                 |  |   add.l 80(sp),d0
    4e7e:	|  |  |  |  |  |  |  |              |                 |  |   move.l d0,-(sp)
    4e80:	|  |  |  |  |  |  |  |              |                 |  |   jsr 1528a <trimStack>
    4e86:	|  |  |  |  |  |  |  |              |                 |  |   addq.l #4,sp
				} else {
					KPrintF((ERROR_INCDEC_UNKNOWN));
					return FALSE;
				}
				break;
    4e88:	|  |  |  |  |  |  |  |              |  /--------------|--|-- bra.w 504a <continueFunction+0x6a6>
					KPrintF((ERROR_INCDEC_UNKNOWN));
    4e8c:	|  |  |  |  |  |  |  |              |  |              |  \-> pea 18916 <PutChar+0xae6>
    4e92:	|  |  |  |  |  |  |  |              |  |              |      jsr 17366 <KPrintF>
    4e98:	|  |  |  |  |  |  |  |              |  |              |      addq.l #4,sp
					return FALSE;
    4e9a:	|  |  |  |  |  |  |  |              |  |              |      clr.w d0
    4e9c:	|  +--|--|--|--|--|--|--------------|--|--------------|----- bra.w 584e <continueFunction+0xeaa>

				case SVT_FASTARRAY:
				case SVT_STACK:
				if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    4ea0:	|  |  |  |  |  |  |  |              |  |              \----> movea.l 80(sp),a0
    4ea4:	|  |  |  |  |  |  |  |              |  |                     movea.l 24(a0),a0
    4ea8:	|  |  |  |  |  |  |  |              |  |                     movea.l 4(a0),a0
    4eac:	|  |  |  |  |  |  |  |              |  |                     move.l (a0),d0
    4eae:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 4ec4 <continueFunction+0x520>
					KPrintF((ERROR_INDEX_EMPTY));
    4eb0:	|  |  |  |  |  |  |  |              |  |                 |   pea 18952 <PutChar+0xb22>
    4eb6:	|  |  |  |  |  |  |  |              |  |                 |   jsr 17366 <KPrintF>
    4ebc:	|  |  |  |  |  |  |  |              |  |                 |   addq.l #4,sp
					return FALSE;
    4ebe:	|  |  |  |  |  |  |  |              |  |                 |   clr.w d0
    4ec0:	|  +--|--|--|--|--|--|--------------|--|-----------------|-- bra.w 584e <continueFunction+0xeaa>
				} else {
					int ii;
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    4ec4:	|  |  |  |  |  |  |  |              |  |                 \-> moveq #28,d0
    4ec6:	|  |  |  |  |  |  |  |              |  |                     add.l 80(sp),d0
    4eca:	|  |  |  |  |  |  |  |              |  |                     move.l d0,-(sp)
    4ecc:	|  |  |  |  |  |  |  |              |  |                     pea 1 <_start+0x1>
    4ed0:	|  |  |  |  |  |  |  |              |  |                     lea 12(sp),a0
    4ed4:	|  |  |  |  |  |  |  |              |  |                     move.l a0,-(sp)
    4ed6:	|  |  |  |  |  |  |  |              |  |                     jsr 14906 <getValueType>
    4edc:	|  |  |  |  |  |  |  |              |  |                     lea 12(sp),sp
    4ee0:	|  |  |  |  |  |  |  |              |  |                     tst.w d0
    4ee2:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 4eea <continueFunction+0x546>
    4ee4:	|  |  |  |  |  |  |  |              |  |                 |   clr.w d0
    4ee6:	|  +--|--|--|--|--|--|--------------|--|-----------------|-- bra.w 584e <continueFunction+0xeaa>
					struct variable * grab = (fun -> stack -> thisVar.varType == SVT_FASTARRAY) ?
    4eea:	|  |  |  |  |  |  |  |              |  |                 \-> movea.l 80(sp),a0
    4eee:	|  |  |  |  |  |  |  |              |  |                     movea.l 24(a0),a0
    4ef2:	|  |  |  |  |  |  |  |              |  |                     move.l (a0),d0
						fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii)
							:
    4ef4:	|  |  |  |  |  |  |  |              |  |                     moveq #10,d1
    4ef6:	|  |  |  |  |  |  |  |              |  |                     cmp.l d0,d1
    4ef8:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 4f1a <continueFunction+0x576>
						fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii)
    4efa:	|  |  |  |  |  |  |  |              |  |                 |   move.l 4(sp),d0
    4efe:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,d1
    4f00:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 80(sp),a0
    4f04:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 24(a0),a0
    4f08:	|  |  |  |  |  |  |  |              |  |                 |   move.l 4(a0),d0
    4f0c:	|  |  |  |  |  |  |  |              |  |                 |   move.l d1,-(sp)
    4f0e:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,-(sp)
    4f10:	|  |  |  |  |  |  |  |              |  |                 |   jsr 14590 <fastArrayGetByIndex>
    4f16:	|  |  |  |  |  |  |  |              |  |                 |   addq.l #8,sp
    4f18:	|  |  |  |  |  |  |  |              |  |              /--|-- bra.s 4f3a <continueFunction+0x596>
						stackGetByIndex (fun -> stack -> thisVar.varData.theStack -> first, ii);
    4f1a:	|  |  |  |  |  |  |  |              |  |              |  \-> move.l 4(sp),d0
    4f1e:	|  |  |  |  |  |  |  |              |  |              |      move.l d0,d1
    4f20:	|  |  |  |  |  |  |  |              |  |              |      movea.l 80(sp),a0
    4f24:	|  |  |  |  |  |  |  |              |  |              |      movea.l 24(a0),a0
    4f28:	|  |  |  |  |  |  |  |              |  |              |      movea.l 4(a0),a0
    4f2c:	|  |  |  |  |  |  |  |              |  |              |      move.l (a0),d0
    4f2e:	|  |  |  |  |  |  |  |              |  |              |      move.l d1,-(sp)
    4f30:	|  |  |  |  |  |  |  |              |  |              |      move.l d0,-(sp)
    4f32:	|  |  |  |  |  |  |  |              |  |              |      jsr 1521a <stackGetByIndex>
    4f38:	|  |  |  |  |  |  |  |              |  |              |      addq.l #8,sp
					struct variable * grab = (fun -> stack -> thisVar.varType == SVT_FASTARRAY) ?
    4f3a:	|  |  |  |  |  |  |  |              |  |              \----> move.l d0,60(sp)

					trimStack (&fun -> stack);
    4f3e:	|  |  |  |  |  |  |  |              |  |                     moveq #24,d0
    4f40:	|  |  |  |  |  |  |  |              |  |                     add.l 80(sp),d0
    4f44:	|  |  |  |  |  |  |  |              |  |                     move.l d0,-(sp)
    4f46:	|  |  |  |  |  |  |  |              |  |                     jsr 1528a <trimStack>
    4f4c:	|  |  |  |  |  |  |  |              |  |                     addq.l #4,sp

					if (! grab) {
    4f4e:	|  |  |  |  |  |  |  |              |  |                     tst.l 60(sp)
    4f52:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 4f6e <continueFunction+0x5ca>
						setVariable (&fun -> reg, SVT_NULL, 0);
    4f54:	|  |  |  |  |  |  |  |              |  |                 |   moveq #28,d0
    4f56:	|  |  |  |  |  |  |  |              |  |                 |   add.l 80(sp),d0
    4f5a:	|  |  |  |  |  |  |  |              |  |                 |   clr.l -(sp)
    4f5c:	|  |  |  |  |  |  |  |              |  |                 |   clr.l -(sp)
    4f5e:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,-(sp)
    4f60:	|  |  |  |  |  |  |  |              |  |                 |   jsr 151f8 <setVariable>
    4f66:	|  |  |  |  |  |  |  |              |  |                 |   lea 12(sp),sp
							default:
							if (! copyVariable (grab, &fun -> reg)) return FALSE;
						}
					}
				}
				break;
    4f6a:	|  |  |  |  |  |  |  |              |  |  /--------------|-- bra.w 5048 <continueFunction+0x6a4>
    4f6e:	|  |  |  |  |  |  |  |              |  |  |              \-> moveq #39,d0
    4f70:	|  |  |  |  |  |  |  |              |  |  |                  cmp.l 64(sp),d0
    4f74:	|  |  |  |  |  |  |  |              |  |  |              /-- beq.s 4f82 <continueFunction+0x5de>
    4f76:	|  |  |  |  |  |  |  |              |  |  |              |   moveq #40,d1
    4f78:	|  |  |  |  |  |  |  |              |  |  |              |   cmp.l 64(sp),d1
    4f7c:	|  |  |  |  |  |  |  |              |  |  |           /--|-- beq.s 4fcc <continueFunction+0x628>
    4f7e:	|  |  |  |  |  |  |  |              |  |  |  /--------|--|-- bra.w 5014 <continueFunction+0x670>
							if (! getValueType (&ii, SVT_INT, grab)) return FALSE;
    4f82:	|  |  |  |  |  |  |  |              |  |  |  |        |  \-> move.l 60(sp),-(sp)
    4f86:	|  |  |  |  |  |  |  |              |  |  |  |        |      pea 1 <_start+0x1>
    4f8a:	|  |  |  |  |  |  |  |              |  |  |  |        |      lea 8(sp),a0
    4f8e:	|  |  |  |  |  |  |  |              |  |  |  |        |      move.l a0,-(sp)
    4f90:	|  |  |  |  |  |  |  |              |  |  |  |        |      jsr 14906 <getValueType>
    4f96:	|  |  |  |  |  |  |  |              |  |  |  |        |      lea 12(sp),sp
    4f9a:	|  |  |  |  |  |  |  |              |  |  |  |        |      tst.w d0
    4f9c:	|  |  |  |  |  |  |  |              |  |  |  |        |  /-- bne.s 4fa4 <continueFunction+0x600>
    4f9e:	|  |  |  |  |  |  |  |              |  |  |  |        |  |   clr.w d0
    4fa0:	|  |  |  |  |  |  |  |              |  |  |  |  /-----|--|-- bra.w 502e <continueFunction+0x68a>
							setVariable (&fun -> reg, SVT_INT, ii);
    4fa4:	|  |  |  |  |  |  |  |              |  |  |  |  |     |  \-> move.l (sp),d1
    4fa6:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      moveq #28,d0
    4fa8:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      add.l 80(sp),d0
    4fac:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d1,-(sp)
    4fae:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      pea 1 <_start+0x1>
    4fb2:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d0,-(sp)
    4fb4:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      jsr 151f8 <setVariable>
    4fba:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      lea 12(sp),sp
							grab -> varData.intValue = ii + 1;
    4fbe:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l (sp),d0
    4fc0:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      addq.l #1,d0
    4fc2:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      movea.l 60(sp),a0
    4fc6:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d0,4(a0)
							break;
    4fca:	|  |  |  |  |  |  |  |              |  |  |  |  |  /--|----- bra.s 5032 <continueFunction+0x68e>
							if (! getValueType (&ii, SVT_INT, grab)) return FALSE;
    4fcc:	|  |  |  |  |  |  |  |              |  |  |  |  |  |  \----> move.l 60(sp),-(sp)
    4fd0:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         pea 1 <_start+0x1>
    4fd4:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 8(sp),a0
    4fd8:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l a0,-(sp)
    4fda:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         jsr 14906 <getValueType>
    4fe0:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 12(sp),sp
    4fe4:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         tst.w d0
    4fe6:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     /-- bne.s 4fec <continueFunction+0x648>
    4fe8:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     |   clr.w d0
    4fea:	|  |  |  |  |  |  |  |              |  |  |  |  +--|-----|-- bra.s 502e <continueFunction+0x68a>
							setVariable (&fun -> reg, SVT_INT, ii);
    4fec:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     \-> move.l (sp),d1
    4fee:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         moveq #28,d0
    4ff0:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         add.l 80(sp),d0
    4ff4:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d1,-(sp)
    4ff6:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         pea 1 <_start+0x1>
    4ffa:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d0,-(sp)
    4ffc:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         jsr 151f8 <setVariable>
    5002:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 12(sp),sp
							grab -> varData.intValue = ii - 1;
    5006:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l (sp),d0
    5008:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         subq.l #1,d0
    500a:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         movea.l 60(sp),a0
    500e:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d0,4(a0)
							break;
    5012:	|  |  |  |  |  |  |  |              |  |  |  |  |  +-------- bra.s 5032 <continueFunction+0x68e>
							if (! copyVariable (grab, &fun -> reg)) return FALSE;
    5014:	|  |  |  |  |  |  |  |              |  |  |  \--|--|-------> moveq #28,d0
    5016:	|  |  |  |  |  |  |  |              |  |  |     |  |         add.l 80(sp),d0
    501a:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l d0,-(sp)
    501c:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l 64(sp),-(sp)
    5020:	|  |  |  |  |  |  |  |              |  |  |     |  |         jsr 14dc0 <copyVariable>
    5026:	|  |  |  |  |  |  |  |              |  |  |     |  |         addq.l #8,sp
    5028:	|  |  |  |  |  |  |  |              |  |  |     |  |         tst.w d0
    502a:	|  |  |  |  |  |  |  |              |  |  +-----|--|-------- bne.s 5048 <continueFunction+0x6a4>
    502c:	|  |  |  |  |  |  |  |              |  |  |     |  |         clr.w d0
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    502e:	|  +--|--|--|--|--|--|--------------|--|--|-----\--|-------X bra.w 584e <continueFunction+0xeaa>
				break;
    5032:	|  |  |  |  |  |  |  |              |  |  +--------\-------X bra.s 5048 <continueFunction+0x6a4>

				default:
				KPrintF((ERROR_INDEX_NONSTACK));
    5034:	|  |  |  |  |  |  |  |              \--|--|----------------> pea 18970 <PutChar+0xb40>
    503a:	|  |  |  |  |  |  |  |                 |  |                  jsr 17366 <KPrintF>
    5040:	|  |  |  |  |  |  |  |                 |  |                  addq.l #4,sp
				return FALSE;
    5042:	|  |  |  |  |  |  |  |                 |  |                  clr.w d0
    5044:	|  +--|--|--|--|--|--|-----------------|--|----------------- bra.w 584e <continueFunction+0xeaa>
				break;
    5048:	|  |  |  |  |  |  |  |                 |  \----------------> nop
			}
			break;
    504a:	|  |  |  |  +--|--|--|-----------------\-------------------X bra.w 582c <continueFunction+0xe88>

			case SLU_INDEXSET:
			switch (fun -> stack -> thisVar.varType) {
    504e:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    5052:	|  |  |  |  |  |  |  |                                       movea.l 24(a0),a0
    5056:	|  |  |  |  |  |  |  |                                       move.l (a0),d0
    5058:	|  |  |  |  |  |  |  |                                       moveq #6,d1
    505a:	|  |  |  |  |  |  |  |                                       cmp.l d0,d1
    505c:	|  |  |  |  |  |  |  |                                   /-- beq.s 506a <continueFunction+0x6c6>
    505e:	|  |  |  |  |  |  |  |                                   |   moveq #10,d1
    5060:	|  |  |  |  |  |  |  |                                   |   cmp.l d0,d1
    5062:	|  |  |  |  |  |  |  |                                /--|-- beq.w 5116 <continueFunction+0x772>
    5066:	|  |  |  |  |  |  |  |                             /--|--|-- bra.w 5174 <continueFunction+0x7d0>
				case SVT_STACK:
				if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    506a:	|  |  |  |  |  |  |  |                             |  |  \-> movea.l 80(sp),a0
    506e:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    5072:	|  |  |  |  |  |  |  |                             |  |      movea.l 4(a0),a0
    5076:	|  |  |  |  |  |  |  |                             |  |      move.l (a0),d0
    5078:	|  |  |  |  |  |  |  |                             |  |  /-- bne.s 508e <continueFunction+0x6ea>
					KPrintF((ERROR_INDEX_EMPTY));
    507a:	|  |  |  |  |  |  |  |                             |  |  |   pea 18952 <PutChar+0xb22>
    5080:	|  |  |  |  |  |  |  |                             |  |  |   jsr 17366 <KPrintF>
    5086:	|  |  |  |  |  |  |  |                             |  |  |   addq.l #4,sp
					return FALSE;
    5088:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    508a:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 584e <continueFunction+0xeaa>
				} else {
					int ii;
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    508e:	|  |  |  |  |  |  |  |                             |  |  \-> moveq #28,d0
    5090:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    5094:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    5096:	|  |  |  |  |  |  |  |                             |  |      pea 1 <_start+0x1>
    509a:	|  |  |  |  |  |  |  |                             |  |      lea 16(sp),a0
    509e:	|  |  |  |  |  |  |  |                             |  |      move.l a0,-(sp)
    50a0:	|  |  |  |  |  |  |  |                             |  |      jsr 14906 <getValueType>
    50a6:	|  |  |  |  |  |  |  |                             |  |      lea 12(sp),sp
    50aa:	|  |  |  |  |  |  |  |                             |  |      tst.w d0
    50ac:	|  |  |  |  |  |  |  |                             |  |  /-- bne.s 50b4 <continueFunction+0x710>
    50ae:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    50b0:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 584e <continueFunction+0xeaa>
					if (! stackSetByIndex (fun -> stack -> thisVar.varData.theStack -> first, ii, &fun -> stack -> next -> thisVar)) {
    50b4:	|  |  |  |  |  |  |  |                             |  |  \-> movea.l 80(sp),a0
    50b8:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    50bc:	|  |  |  |  |  |  |  |                             |  |      move.l 8(a0),d0
    50c0:	|  |  |  |  |  |  |  |                             |  |      movea.l d0,a1
    50c2:	|  |  |  |  |  |  |  |                             |  |      move.l 8(sp),d0
    50c6:	|  |  |  |  |  |  |  |                             |  |      move.l d0,d1
    50c8:	|  |  |  |  |  |  |  |                             |  |      movea.l 80(sp),a0
    50cc:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    50d0:	|  |  |  |  |  |  |  |                             |  |      movea.l 4(a0),a0
    50d4:	|  |  |  |  |  |  |  |                             |  |      move.l (a0),d0
    50d6:	|  |  |  |  |  |  |  |                             |  |      move.l a1,-(sp)
    50d8:	|  |  |  |  |  |  |  |                             |  |      move.l d1,-(sp)
    50da:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    50dc:	|  |  |  |  |  |  |  |                             |  |      jsr 6bc4 <stackSetByIndex>
    50e2:	|  |  |  |  |  |  |  |                             |  |      lea 12(sp),sp
    50e6:	|  |  |  |  |  |  |  |                             |  |      tst.w d0
    50e8:	|  |  |  |  |  |  |  |                             |  |  /-- bne.s 50f0 <continueFunction+0x74c>
						return FALSE;
    50ea:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    50ec:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 584e <continueFunction+0xeaa>
					}
					trimStack (&fun -> stack);
    50f0:	|  |  |  |  |  |  |  |                             |  |  \-> moveq #24,d0
    50f2:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    50f6:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    50f8:	|  |  |  |  |  |  |  |                             |  |      jsr 1528a <trimStack>
    50fe:	|  |  |  |  |  |  |  |                             |  |      addq.l #4,sp
					trimStack (&fun -> stack);
    5100:	|  |  |  |  |  |  |  |                             |  |      moveq #24,d0
    5102:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    5106:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    5108:	|  |  |  |  |  |  |  |                             |  |      jsr 1528a <trimStack>
    510e:	|  |  |  |  |  |  |  |                             |  |      addq.l #4,sp
				}
				break;
    5110:	|  |  |  |  |  |  |  |                             |  |      nop

				default:
				KPrintF((ERROR_INDEX_NONSTACK));
				return FALSE;
			}
			break;
    5112:	|  |  |  |  +--|--|--|-----------------------------|--|----- bra.w 582c <continueFunction+0xe88>
					if (! getValueType (&ii, SVT_INT, &fun->reg)) return FALSE;
    5116:	|  |  |  |  |  |  |  |                             |  \----> moveq #28,d0
    5118:	|  |  |  |  |  |  |  |                             |         add.l 80(sp),d0
    511c:	|  |  |  |  |  |  |  |                             |         move.l d0,-(sp)
    511e:	|  |  |  |  |  |  |  |                             |         pea 1 <_start+0x1>
    5122:	|  |  |  |  |  |  |  |                             |         lea 20(sp),a0
    5126:	|  |  |  |  |  |  |  |                             |         move.l a0,-(sp)
    5128:	|  |  |  |  |  |  |  |                             |         jsr 14906 <getValueType>
    512e:	|  |  |  |  |  |  |  |                             |         lea 12(sp),sp
    5132:	|  |  |  |  |  |  |  |                             |         tst.w d0
    5134:	|  |  |  |  |  |  |  |                             |     /-- bne.s 513c <continueFunction+0x798>
    5136:	|  |  |  |  |  |  |  |                             |     |   clr.w d0
    5138:	|  +--|--|--|--|--|--|-----------------------------|-----|-- bra.w 584e <continueFunction+0xeaa>
					struct variable * v = fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii);
    513c:	|  |  |  |  |  |  |  |                             |     \-> move.l 12(sp),d0
    5140:	|  |  |  |  |  |  |  |                             |         move.l d0,d1
    5142:	|  |  |  |  |  |  |  |                             |         movea.l 80(sp),a0
    5146:	|  |  |  |  |  |  |  |                             |         movea.l 24(a0),a0
    514a:	|  |  |  |  |  |  |  |                             |         move.l 4(a0),d0
    514e:	|  |  |  |  |  |  |  |                             |         move.l d1,-(sp)
    5150:	|  |  |  |  |  |  |  |                             |         move.l d0,-(sp)
    5152:	|  |  |  |  |  |  |  |                             |         jsr 14590 <fastArrayGetByIndex>
    5158:	|  |  |  |  |  |  |  |                             |         addq.l #8,sp
    515a:	|  |  |  |  |  |  |  |                             |         move.l d0,56(sp)
					if (v == NULL) KPrintF(("Not within bounds of fast array."));
    515e:	|  |  |  |  |  |  |  |                             |     /-- bne.s 516e <continueFunction+0x7ca>
    5160:	|  |  |  |  |  |  |  |                             |     |   pea 18994 <PutChar+0xb64>
    5166:	|  |  |  |  |  |  |  |                             |     |   jsr 17366 <KPrintF>
    516c:	|  |  |  |  |  |  |  |                             |     |   addq.l #4,sp
					return FALSE;
    516e:	|  |  |  |  |  |  |  |                             |     \-> clr.w d0
    5170:	|  +--|--|--|--|--|--|-----------------------------|-------- bra.w 584e <continueFunction+0xeaa>
				KPrintF((ERROR_INDEX_NONSTACK));
    5174:	|  |  |  |  |  |  |  |                             \-------> pea 18970 <PutChar+0xb40>
    517a:	|  |  |  |  |  |  |  |                                       jsr 17366 <KPrintF>
    5180:	|  |  |  |  |  |  |  |                                       addq.l #4,sp
				return FALSE;
    5182:	|  |  |  |  |  |  |  |                                       clr.w d0
    5184:	|  +--|--|--|--|--|--|-------------------------------------- bra.w 584e <continueFunction+0xeaa>
			// variable, a global or onto the stack...

			case SLU_INCREMENT_LOCAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&fun -> localVars[param])) return FALSE;
    5188:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    518c:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    5190:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5194:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5196:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    5198:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    519a:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    519e:	|  |  |  |  |  |  |  |                                       lea 24(sp),a0
    51a2:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    51a4:	|  |  |  |  |  |  |  |                                       jsr 14906 <getValueType>
    51aa:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    51ae:	|  |  |  |  |  |  |  |                                       tst.w d0
    51b0:	|  |  |  |  |  |  |  |                                   /-- bne.s 51b8 <continueFunction+0x814>
    51b2:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    51b4:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 584e <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    51b8:	|  |  |  |  |  |  |  |                                   \-> move.l 16(sp),d1
    51bc:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    51be:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    51c2:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    51c4:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    51c8:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    51ca:	|  |  |  |  |  |  |  |                                       jsr 151f8 <setVariable>
    51d0:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&(fun -> localVars[param]), SVT_INT, ii + 1);
    51d4:	|  |  |  |  |  |  |  |                                       move.l 16(sp),d0
    51d8:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    51da:	|  |  |  |  |  |  |  |                                       addq.l #1,d1
    51dc:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    51e0:	|  |  |  |  |  |  |  |                                       movea.l 20(a0),a0
    51e4:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    51e8:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    51ea:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    51ec:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    51ee:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    51f2:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    51f4:	|  |  |  |  |  |  |  |                                       jsr 151f8 <setVariable>
    51fa:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    51fe:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 582c <continueFunction+0xe88>

			case SLU_INCREMENT_GLOBAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&globalVars[param])) return FALSE;
    5202:	|  |  |  |  |  |  |  |                                       move.l 1ca30 <globalVars>,d1
    5208:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    520c:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    520e:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    5210:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5212:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5216:	|  |  |  |  |  |  |  |                                       lea 28(sp),a0
    521a:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    521c:	|  |  |  |  |  |  |  |                                       jsr 14906 <getValueType>
    5222:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    5226:	|  |  |  |  |  |  |  |                                       tst.w d0
    5228:	|  |  |  |  |  |  |  |                                   /-- bne.s 5230 <continueFunction+0x88c>
    522a:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    522c:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 584e <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    5230:	|  |  |  |  |  |  |  |                                   \-> move.l 20(sp),d1
    5234:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    5236:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    523a:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    523c:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5240:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5242:	|  |  |  |  |  |  |  |                                       jsr 151f8 <setVariable>
    5248:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&globalVars[param], SVT_INT, ii + 1);
    524c:	|  |  |  |  |  |  |  |                                       move.l 20(sp),d0
    5250:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    5252:	|  |  |  |  |  |  |  |                                       addq.l #1,d1
    5254:	|  |  |  |  |  |  |  |                                       movea.l 1ca30 <globalVars>,a0
    525a:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    525e:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5260:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    5262:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5264:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5268:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    526a:	|  |  |  |  |  |  |  |                                       jsr 151f8 <setVariable>
    5270:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    5274:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 582c <continueFunction+0xe88>

			case SLU_DECREMENT_LOCAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&fun -> localVars[param])) return FALSE;
    5278:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    527c:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    5280:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5284:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5286:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    5288:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    528a:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    528e:	|  |  |  |  |  |  |  |                                       lea 32(sp),a0
    5292:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    5294:	|  |  |  |  |  |  |  |                                       jsr 14906 <getValueType>
    529a:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    529e:	|  |  |  |  |  |  |  |                                       tst.w d0
    52a0:	|  |  |  |  |  |  |  |                                   /-- bne.s 52a8 <continueFunction+0x904>
    52a2:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    52a4:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 584e <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    52a8:	|  |  |  |  |  |  |  |                                   \-> move.l 24(sp),d1
    52ac:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    52ae:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    52b2:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    52b4:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    52b8:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    52ba:	|  |  |  |  |  |  |  |                                       jsr 151f8 <setVariable>
    52c0:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&(fun -> localVars[param]), SVT_INT, ii - 1);
    52c4:	|  |  |  |  |  |  |  |                                       move.l 24(sp),d0
    52c8:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    52ca:	|  |  |  |  |  |  |  |                                       subq.l #1,d1
    52cc:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    52d0:	|  |  |  |  |  |  |  |                                       movea.l 20(a0),a0
    52d4:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    52d8:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    52da:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    52dc:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    52de:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    52e2:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    52e4:	|  |  |  |  |  |  |  |                                       jsr 151f8 <setVariable>
    52ea:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    52ee:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 582c <continueFunction+0xe88>

			case SLU_DECREMENT_GLOBAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&globalVars[param])) return FALSE;
    52f2:	|  |  |  |  |  |  |  |                                       move.l 1ca30 <globalVars>,d1
    52f8:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    52fc:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    52fe:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    5300:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5302:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5306:	|  |  |  |  |  |  |  |                                       lea 36(sp),a0
    530a:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    530c:	|  |  |  |  |  |  |  |                                       jsr 14906 <getValueType>
    5312:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    5316:	|  |  |  |  |  |  |  |                                       tst.w d0
    5318:	|  |  |  |  |  |  |  |                                   /-- bne.s 5320 <continueFunction+0x97c>
    531a:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    531c:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 584e <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    5320:	|  |  |  |  |  |  |  |                                   \-> move.l 28(sp),d1
    5324:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    5326:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    532a:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    532c:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5330:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5332:	|  |  |  |  |  |  |  |                                       jsr 151f8 <setVariable>
    5338:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&globalVars[param], SVT_INT, ii - 1);
    533c:	|  |  |  |  |  |  |  |                                       move.l 28(sp),d0
    5340:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    5342:	|  |  |  |  |  |  |  |                                       subq.l #1,d1
    5344:	|  |  |  |  |  |  |  |                                       movea.l 1ca30 <globalVars>,a0
    534a:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    534e:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5350:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    5352:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5354:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5358:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    535a:	|  |  |  |  |  |  |  |                                       jsr 151f8 <setVariable>
    5360:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    5364:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 582c <continueFunction+0xe88>

			case SLU_SET_LOCAL:
			if (! copyVariable (&fun -> reg, &(fun -> localVars[param]))) return FALSE;
    5368:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    536c:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    5370:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5374:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5376:	|  |  |  |  |  |  |  |                                       add.l d0,d1
    5378:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    537a:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    537e:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5380:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5382:	|  |  |  |  |  |  |  |                                       jsr 14dc0 <copyVariable>
    5388:	|  |  |  |  |  |  |  |                                       addq.l #8,sp
    538a:	|  |  |  |  |  |  |  |                                       tst.w d0
    538c:	|  |  |  |  |  |  |  |  /----------------------------------- bne.w 5816 <continueFunction+0xe72>
    5390:	|  |  |  |  |  |  |  |  |                                    clr.w d0
    5392:	|  +--|--|--|--|--|--|--|----------------------------------- bra.w 584e <continueFunction+0xeaa>
			break;

			case SLU_SET_GLOBAL:
//			newDebug ("  Copying TO global variable", param);
//			newDebug ("  Global type at the moment", globalVars[param].varType);
			if (! copyVariable (&fun -> reg, &globalVars[param])) return FALSE;
    5396:	|  |  |  |  |  |  |  |  |                                    move.l 1ca30 <globalVars>,d1
    539c:	|  |  |  |  |  |  |  |  |                                    move.l 68(sp),d0
    53a0:	|  |  |  |  |  |  |  |  |                                    lsl.l #3,d0
    53a2:	|  |  |  |  |  |  |  |  |                                    add.l d0,d1
    53a4:	|  |  |  |  |  |  |  |  |                                    moveq #28,d0
    53a6:	|  |  |  |  |  |  |  |  |                                    add.l 80(sp),d0
    53aa:	|  |  |  |  |  |  |  |  |                                    move.l d1,-(sp)
    53ac:	|  |  |  |  |  |  |  |  |                                    move.l d0,-(sp)
    53ae:	|  |  |  |  |  |  |  |  |                                    jsr 14dc0 <copyVariable>
    53b4:	|  |  |  |  |  |  |  |  |                                    addq.l #8,sp
    53b6:	|  |  |  |  |  |  |  |  |                                    tst.w d0
    53b8:	|  |  |  |  |  |  |  |  |  /-------------------------------- bne.w 581a <continueFunction+0xe76>
    53bc:	|  |  |  |  |  |  |  |  |  |                                 clr.w d0
    53be:	|  +--|--|--|--|--|--|--|--|-------------------------------- bra.w 584e <continueFunction+0xeaa>
			break;

			case SLU_LOAD_GLOBAL:
//			newDebug ("  Copying FROM global variable", param);
//			newDebug ("  Global type at the moment", globalVars[param].varType);
			if (! copyVariable (&globalVars[param], &fun -> reg)) return FALSE;
    53c2:	|  |  |  |  |  |  |  |  |  |                                 moveq #28,d0
    53c4:	|  |  |  |  |  |  |  |  |  |                                 add.l 80(sp),d0
    53c8:	|  |  |  |  |  |  |  |  |  |                                 movea.l 1ca30 <globalVars>,a0
    53ce:	|  |  |  |  |  |  |  |  |  |                                 move.l 68(sp),d1
    53d2:	|  |  |  |  |  |  |  |  |  |                                 lsl.l #3,d1
    53d4:	|  |  |  |  |  |  |  |  |  |                                 add.l a0,d1
    53d6:	|  |  |  |  |  |  |  |  |  |                                 move.l d0,-(sp)
    53d8:	|  |  |  |  |  |  |  |  |  |                                 move.l d1,-(sp)
    53da:	|  |  |  |  |  |  |  |  |  |                                 jsr 14dc0 <copyVariable>
    53e0:	|  |  |  |  |  |  |  |  |  |                                 addq.l #8,sp
    53e2:	|  |  |  |  |  |  |  |  |  |                                 tst.w d0
    53e4:	|  |  |  |  |  |  |  |  |  |  /----------------------------- bne.w 581e <continueFunction+0xe7a>
    53e8:	|  |  |  |  |  |  |  |  |  |  |                              clr.w d0
    53ea:	|  +--|--|--|--|--|--|--|--|--|----------------------------- bra.w 584e <continueFunction+0xeaa>
			break;

			case SLU_STACK_PUSH:
			if (! addVarToStack (&fun -> reg, &fun -> stack)) return FALSE;
    53ee:	|  |  |  |  |  |  |  |  |  |  |                              moveq #24,d1
    53f0:	|  |  |  |  |  |  |  |  |  |  |                              add.l 80(sp),d1
    53f4:	|  |  |  |  |  |  |  |  |  |  |                              moveq #28,d0
    53f6:	|  |  |  |  |  |  |  |  |  |  |                              add.l 80(sp),d0
    53fa:	|  |  |  |  |  |  |  |  |  |  |                              move.l d1,-(sp)
    53fc:	|  |  |  |  |  |  |  |  |  |  |                              move.l d0,-(sp)
    53fe:	|  |  |  |  |  |  |  |  |  |  |                              jsr 14142 <addVarToStack>
    5404:	|  |  |  |  |  |  |  |  |  |  |                              addq.l #8,sp
    5406:	|  |  |  |  |  |  |  |  |  |  |                              tst.w d0
    5408:	|  |  |  |  |  |  |  |  |  |  |  /-------------------------- bne.w 5822 <continueFunction+0xe7e>
    540c:	|  |  |  |  |  |  |  |  |  |  |  |                           clr.w d0
    540e:	|  +--|--|--|--|--|--|--|--|--|--|-------------------------- bra.w 584e <continueFunction+0xeaa>
			break;

			case SLU_QUICK_PUSH:
			if (! addVarToStackQuick (&fun -> reg, &fun -> stack)) return FALSE;
    5412:	|  |  |  |  |  |  |  |  |  |  |  |                           moveq #24,d1
    5414:	|  |  |  |  |  |  |  |  |  |  |  |                           add.l 80(sp),d1
    5418:	|  |  |  |  |  |  |  |  |  |  |  |                           moveq #28,d0
    541a:	|  |  |  |  |  |  |  |  |  |  |  |                           add.l 80(sp),d0
    541e:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l d1,-(sp)
    5420:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l d0,-(sp)
    5422:	|  |  |  |  |  |  |  |  |  |  |  |                           jsr 141c8 <addVarToStackQuick>
    5428:	|  |  |  |  |  |  |  |  |  |  |  |                           addq.l #8,sp
    542a:	|  |  |  |  |  |  |  |  |  |  |  |                           tst.w d0
    542c:	|  |  |  |  |  |  |  |  |  |  |  |  /----------------------- bne.w 5826 <continueFunction+0xe82>
    5430:	|  |  |  |  |  |  |  |  |  |  |  |  |                        clr.w d0
    5432:	|  +--|--|--|--|--|--|--|--|--|--|--|----------------------- bra.w 584e <continueFunction+0xeaa>
			break;

			case SLU_NOT:
			setVariable (&fun -> reg, SVT_INT, ! getBoolean (&fun -> reg));
    5436:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    5438:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    543c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    543e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 14e46 <getBoolean>
    5444:	|  |  |  |  |  |  |  |  |  |  |  |  |                        addq.l #4,sp
    5446:	|  |  |  |  |  |  |  |  |  |  |  |  |                        tst.w d0
    5448:	|  |  |  |  |  |  |  |  |  |  |  |  |                        seq d0
    544a:	|  |  |  |  |  |  |  |  |  |  |  |  |                        neg.b d0
    544c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #0,d1
    544e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.b d0,d1
    5450:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    5452:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    5456:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d1,-(sp)
    5458:	|  |  |  |  |  |  |  |  |  |  |  |  |                        pea 1 <_start+0x1>
    545c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    545e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 151f8 <setVariable>
    5464:	|  |  |  |  |  |  |  |  |  |  |  |  |                        lea 12(sp),sp
			break;
    5468:	|  |  |  |  +--|--|--|--|--|--|--|--|----------------------- bra.w 582c <continueFunction+0xe88>

			case SLU_BR_ZERO:
			if (! getBoolean (&fun -> reg)) {
    546c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    546e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    5472:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    5474:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 14e46 <getBoolean>
    547a:	|  |  |  |  |  |  |  |  |  |  |  |  |                        addq.l #4,sp
    547c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        tst.w d0
    547e:	|  |  |  |  |  |  |  |  |  |  |  |  |  /-------------------- bne.w 582a <continueFunction+0xe86>
				advanceNow = FALSE;
    5482:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     clr.w 72(sp)
				fun -> runThisLine = param;
    5486:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    548a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 68(sp),36(a0)
			}
			break;
    5490:	|  |  |  |  |  |  |  |  |  |  |  |  |  +-------------------- bra.w 582a <continueFunction+0xe86>

			case SLU_BRANCH:
			advanceNow = FALSE;
    5494:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     clr.w 72(sp)
			fun -> runThisLine = param;
    5498:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    549c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 68(sp),36(a0)
			break;
    54a2:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-------------------- bra.w 582c <continueFunction+0xe88>

			case SLU_NEGATIVE:
			{
				int i;
				if (! getValueType(&i, SVT_INT,&fun -> reg)) return FALSE;
    54a6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     moveq #28,d0
    54a8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     add.l 80(sp),d0
    54ac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,-(sp)
    54ae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     pea 1 <_start+0x1>
    54b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 40(sp),a0
    54b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l a0,-(sp)
    54b8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     jsr 14906 <getValueType>
    54be:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 12(sp),sp
    54c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     tst.w d0
    54c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 /-- bne.s 54cc <continueFunction+0xb28>
    54c6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 |   clr.w d0
    54c8:	|  +--|--|--|--|--|--|--|--|--|--|--|--|-----------------|-- bra.w 584e <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, -i);
    54cc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 \-> move.l 32(sp),d0
    54d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,d1
    54d2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     neg.l d1
    54d4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     moveq #28,d0
    54d6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     add.l 80(sp),d0
    54da:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d1,-(sp)
    54dc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     pea 1 <_start+0x1>
    54e0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,-(sp)
    54e2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     jsr 151f8 <setVariable>
    54e8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 12(sp),sp
			}
			break;
    54ec:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-------------------- bra.w 582c <continueFunction+0xe88>
			case SLU_NOT_EQ:
			case SLU_LESSTHAN:
			case SLU_MORETHAN:
			case SLU_LESS_EQUAL:
			case SLU_MORE_EQUAL:
			if (fun -> stack) {
    54f0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    54f4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 24(a0),d0
    54f8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  /----------------- beq.w 57e2 <continueFunction+0xe3e>
    54fc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  moveq #15,d0
    54fe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  cmp.l 64(sp),d0
    5502:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        /-------- beq.s 557e <continueFunction+0xbda>
    5504:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #15,d1
    5506:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         cmp.l 64(sp),d1
    550a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     /--|-------- bcs.w 55c8 <continueFunction+0xc24>
    550e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |         moveq #8,d0
    5510:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |         cmp.l 64(sp),d0
    5514:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     /-- beq.s 5522 <continueFunction+0xb7e>
    5516:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |   moveq #14,d1
    5518:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |   cmp.l 64(sp),d1
    551c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  /--|-- beq.s 5550 <continueFunction+0xbac>
    551e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     +--|--|--|-- bra.w 55c8 <continueFunction+0xc24>
				int firstValue, secondValue;

				switch (com) {
					case SLU_PLUS:
					addVariablesInSecond (&fun -> stack -> thisVar, &fun -> reg);
    5522:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  \-> moveq #28,d0
    5524:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      add.l 80(sp),d0
    5528:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      movea.l 80(sp),a0
    552c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l 24(a0),d1
    5530:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d0,-(sp)
    5532:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d1,-(sp)
    5534:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      jsr 1423c <addVariablesInSecond>
    553a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      addq.l #8,sp
					trimStack (&fun -> stack);
    553c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      moveq #24,d0
    553e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      add.l 80(sp),d0
    5542:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d0,-(sp)
    5544:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      jsr 1528a <trimStack>
    554a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      addq.l #4,sp
					break;
    554c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  /--|--|--|----- bra.w 57f6 <continueFunction+0xe52>

					case SLU_EQUALS:
					compareVariablesInSecond (&(fun -> stack -> thisVar), &fun -> reg);
    5550:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \----> moveq #28,d0
    5552:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         add.l 80(sp),d0
    5556:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         movea.l 80(sp),a0
    555a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l 24(a0),d1
    555e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d0,-(sp)
    5560:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d1,-(sp)
    5562:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         jsr 142fa <compareVariablesInSecond>
    5568:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         addq.l #8,sp
					trimStack (&fun -> stack);
    556a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         moveq #24,d0
    556c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         add.l 80(sp),d0
    5570:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d0,-(sp)
    5572:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         jsr 1528a <trimStack>
    5578:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         addq.l #4,sp
					break;
    557a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|--|-------- bra.w 57f6 <continueFunction+0xe52>

					case SLU_NOT_EQ:
					compareVariablesInSecond (&(fun -> stack -> thisVar), &fun -> reg);
    557e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \-------> moveq #28,d0
    5580:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            add.l 80(sp),d0
    5584:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    5588:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 24(a0),d1
    558c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,-(sp)
    558e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d1,-(sp)
    5590:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            jsr 142fa <compareVariablesInSecond>
    5596:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            addq.l #8,sp
					trimStack (&fun -> stack);
    5598:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            moveq #24,d0
    559a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            add.l 80(sp),d0
    559e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,-(sp)
    55a0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            jsr 1528a <trimStack>
    55a6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            addq.l #4,sp
	               	fun -> reg.varData.intValue = ! fun -> reg.varData.intValue;
    55a8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    55ac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 32(a0),d0
    55b0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            seq d0
    55b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            neg.b d0
    55b4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.b d0,d0
    55b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            andi.l #255,d0
    55bc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    55c0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,32(a0)
					break;
    55c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|----------- bra.w 57f6 <continueFunction+0xe52>

					default:
					if (! getValueType (&firstValue, SVT_INT, &fun->stack->thisVar)) return FALSE;
    55c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \----------> movea.l 80(sp),a0
    55cc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l 24(a0),d0
    55d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    55d2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               pea 1 <_start+0x1>
    55d6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 48(sp),a0
    55da:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l a0,-(sp)
    55dc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 14906 <getValueType>
    55e2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 12(sp),sp
    55e6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               tst.w d0
    55e8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           /-- bne.s 55f0 <continueFunction+0xc4c>
    55ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   clr.w d0
    55ec:	|  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|-----------|-- bra.w 584e <continueFunction+0xeaa>
					if (! getValueType(&secondValue, SVT_INT,&fun -> reg)) return FALSE;
    55f0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           \-> moveq #28,d0
    55f2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 80(sp),d0
    55f6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    55f8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               pea 1 <_start+0x1>
    55fc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 44(sp),a0
    5600:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l a0,-(sp)
    5602:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 14906 <getValueType>
    5608:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 12(sp),sp
    560c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               tst.w d0
    560e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           /-- bne.s 5616 <continueFunction+0xc72>
    5610:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   clr.w d0
    5612:	|  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|-----------|-- bra.w 584e <continueFunction+0xeaa>
					trimStack (&fun -> stack);
    5616:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           \-> moveq #24,d0
    5618:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 80(sp),d0
    561c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    561e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 1528a <trimStack>
    5624:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               addq.l #4,sp
    5626:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               moveq #-9,d0
    5628:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 64(sp),d0
    562c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               moveq #23,d1
    562e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               cmp.l d0,d1
    5630:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           /-- bcs.w 57f4 <continueFunction+0xe50>
    5634:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l d0,d0
    5636:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   movea.l d0,a0
    5638:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   adda.l #22084,a0
    563e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.w (a0),d0
    5640:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jmp (5644 <continueFunction+0xca0>,pc,d0.w)
    5644:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   ori.w #48,-(a2)
    5648:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x00ba
    564a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    5652:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x0088
    5654:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    565c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    5664:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(15466778,d0.w)
    566c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(21365106,d0.w)

					switch (com) {
						case SLU_MULT:
						setVariable (&fun -> reg, SVT_INT, firstValue * secondValue);
    5674:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    5678:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    567c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    567e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5680:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 17d1a <__mulsi3>
    5686:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    5688:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    568a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    568c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    5690:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5692:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    5696:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5698:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 151f8 <setVariable>
    569e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    56a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 57f6 <continueFunction+0xe52>

						case SLU_MINUS:
						setVariable (&fun -> reg, SVT_INT, firstValue - secondValue);
    56a6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    56aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    56ae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sub.l d0,d1
    56b0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    56b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    56b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    56b8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    56bc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    56be:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 151f8 <setVariable>
    56c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    56c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 57f6 <continueFunction+0xe52>

						case SLU_MODULUS:
						setVariable (&fun -> reg, SVT_INT, firstValue % secondValue);
    56cc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    56d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    56d4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    56d6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    56d8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 17dc6 <__modsi3>
    56de:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    56e0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    56e2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    56e4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    56e8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    56ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    56ee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    56f0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 151f8 <setVariable>
    56f6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    56fa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 57f6 <continueFunction+0xe52>

						case SLU_DIVIDE:
						setVariable (&fun -> reg, SVT_INT, firstValue / secondValue);
    56fe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    5702:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    5706:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5708:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    570a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 17d98 <__divsi3>
    5710:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    5712:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    5714:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    5716:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    571a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    571c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    5720:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5722:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 151f8 <setVariable>
    5728:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    572c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 57f6 <continueFunction+0xe52>

						case SLU_LESSTHAN:
						setVariable (&fun -> reg, SVT_INT, firstValue < secondValue);
    5730:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    5734:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    5738:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    573a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sgt d0
    573c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    573e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    5740:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    5742:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    5744:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    5748:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    574a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    574e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5750:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 151f8 <setVariable>
    5756:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    575a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 57f6 <continueFunction+0xe52>

						case SLU_MORETHAN:
						setVariable (&fun -> reg, SVT_INT, firstValue > secondValue);
    575e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    5762:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    5766:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    5768:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   slt d0
    576a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    576c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    576e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    5770:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    5772:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    5776:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5778:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    577c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    577e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 151f8 <setVariable>
    5784:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    5788:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 57f6 <continueFunction+0xe52>

						case SLU_LESS_EQUAL:
						setVariable (&fun -> reg, SVT_INT, firstValue <= secondValue);
    578a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    578e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    5792:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    5794:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sge d0
    5796:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    5798:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    579a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    579c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    579e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    57a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    57a4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    57a8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    57aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 151f8 <setVariable>
    57b0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    57b4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 57f6 <continueFunction+0xe52>

						case SLU_MORE_EQUAL:
						setVariable (&fun -> reg, SVT_INT, firstValue >= secondValue);
    57b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    57ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    57be:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    57c0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sle d0
    57c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    57c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    57c6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    57c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    57ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    57ce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    57d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    57d4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    57d6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 151f8 <setVariable>
    57dc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    57e0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 57f6 <continueFunction+0xe52>
						default:
						break;
					}
				}
			} else {
				KPrintF((ERROR_NOSTACK));
    57e2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  \--|-----------|-> pea 189b5 <PutChar+0xb85>
    57e8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   jsr 17366 <KPrintF>
    57ee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   addq.l #4,sp
				return FALSE;
    57f0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   clr.w d0
    57f2:	|  +--|--|--|--|--|--|--|--|--|--|--|--|-----|-----------|-- bra.s 584e <continueFunction+0xeaa>
						break;
    57f4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           \-> nop
			}
			break;
    57f6:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-----\-------------X bra.s 582c <continueFunction+0xe88>

			default:
			KPrintF((ERROR_UNKNOWN_CODE));
    57f8:	|  |  |  \--|--|--|--|--|--|--|--|--|--|-------------------> pea 189cd <PutChar+0xb9d>
    57fe:	|  |  |     |  |  |  |  |  |  |  |  |  |                     jsr 17366 <KPrintF>
    5804:	|  |  |     |  |  |  |  |  |  |  |  |  |                     addq.l #4,sp
			return FALSE;
    5806:	|  |  |     |  |  |  |  |  |  |  |  |  |                     clr.w d0
    5808:	|  +--|-----|--|--|--|--|--|--|--|--|--|-------------------- bra.s 584e <continueFunction+0xeaa>
			break;
    580a:	|  |  |     |  \--|--|--|--|--|--|--|--|-------------------> nop
    580c:	|  |  |     +-----|--|--|--|--|--|--|--|-------------------- bra.s 582c <continueFunction+0xe88>
			break;
    580e:	|  |  |     |     \--|--|--|--|--|--|--|-------------------> nop
    5810:	|  |  |     +--------|--|--|--|--|--|--|-------------------- bra.s 582c <continueFunction+0xe88>
			break;
    5812:	|  |  |     |        \--|--|--|--|--|--|-------------------> nop
    5814:	|  |  |     +-----------|--|--|--|--|--|-------------------- bra.s 582c <continueFunction+0xe88>
			break;
    5816:	|  |  |     |           \--|--|--|--|--|-------------------> nop
    5818:	|  |  |     +--------------|--|--|--|--|-------------------- bra.s 582c <continueFunction+0xe88>
			break;
    581a:	|  |  |     |              \--|--|--|--|-------------------> nop
    581c:	|  |  |     +-----------------|--|--|--|-------------------- bra.s 582c <continueFunction+0xe88>
			break;
    581e:	|  |  |     |                 \--|--|--|-------------------> nop
    5820:	|  |  |     +--------------------|--|--|-------------------- bra.s 582c <continueFunction+0xe88>
			break;
    5822:	|  |  |     |                    \--|--|-------------------> nop
    5824:	|  |  |     +-----------------------|--|-------------------- bra.s 582c <continueFunction+0xe88>
			break;
    5826:	|  |  |     |                       \--|-------------------> nop
    5828:	|  |  |     +--------------------------|-------------------- bra.s 582c <continueFunction+0xe88>
			break;
    582a:	|  |  |     |                          \-------------------> nop
		}

		if (advanceNow) fun -> runThisLine ++;
    582c:	|  |  |     \----------------------------------------------> tst.w 72(sp)
    5830:	+--|--|----------------------------------------------------- beq.s 5844 <continueFunction+0xea0>
    5832:	|  |  |                                                      movea.l 80(sp),a0
    5836:	|  |  |                                                      move.l 36(a0),d0
    583a:	|  |  |                                                      addq.l #1,d0
    583c:	|  |  |                                                      movea.l 80(sp),a0
    5840:	|  |  |                                                      move.l d0,36(a0)
	while (keepLooping) {
    5844:	\--|--|----------------------------------------------------> tst.w 74(sp)
    5848:	   |  \----------------------------------------------------- bne.w 49cc <continueFunction+0x28>

	}
	return TRUE;
    584c:	   |                                                         moveq #1,d0
}
    584e:	   \-------------------------------------------------------> lea 76(sp),sp
    5852:	                                                             rts

00005854 <finishFunction>:

void finishFunction (struct loadedFunction * fun) {
    5854:	          lea -16(sp),sp
    5858:	          move.l a6,-(sp)
	int a;

	pauseFunction (fun);
    585a:	          move.l 24(sp),-(sp)
    585e:	          jsr 697a <pauseFunction>
    5864:	          addq.l #4,sp
	if (fun -> stack) 
    5866:	          movea.l 24(sp),a0
    586a:	          move.l 24(a0),d0
    586e:	      /-- beq.s 5882 <finishFunction+0x2e>
	{
		KPrintF("finishfunction: error non empty stack");
    5870:	      |   pea 189f9 <PutChar+0xbc9>
    5876:	      |   jsr 17366 <KPrintF>
    587c:	      |   addq.l #4,sp
		return;
    587e:	/-----|-- bra.w 591c <finishFunction+0xc8>
	}
	FreeVec( fun -> compiledLines);
    5882:	|     \-> movea.l 24(sp),a0
    5886:	|         move.l 4(a0),12(sp)
    588c:	|         move.l 1ca82 <SysBase>,d0
    5892:	|         movea.l d0,a6
    5894:	|         movea.l 12(sp),a1
    5898:	|         jsr -690(a6)
	for (a = 0; a < fun -> numLocals; a ++) unlinkVar (&(fun -> localVars[a]));
    589c:	|         clr.l 16(sp)
    58a0:	|     /-- bra.s 58c0 <finishFunction+0x6c>
    58a2:	|  /--|-> movea.l 24(sp),a0
    58a6:	|  |  |   move.l 20(a0),d1
    58aa:	|  |  |   move.l 16(sp),d0
    58ae:	|  |  |   lsl.l #3,d0
    58b0:	|  |  |   add.l d1,d0
    58b2:	|  |  |   move.l d0,-(sp)
    58b4:	|  |  |   jsr 14b54 <unlinkVar>
    58ba:	|  |  |   addq.l #4,sp
    58bc:	|  |  |   addq.l #1,16(sp)
    58c0:	|  |  \-> movea.l 24(sp),a0
    58c4:	|  |      move.l 8(a0),d0
    58c8:	|  |      cmp.l 16(sp),d0
    58cc:	|  \----- bgt.s 58a2 <finishFunction+0x4e>
	if( fun->numLocals > 0) {
    58ce:	|         movea.l 24(sp),a0
    58d2:	|         move.l 8(a0),d0
    58d6:	|     /-- ble.s 58f2 <finishFunction+0x9e>
		FreeVec(fun -> localVars);
    58d8:	|     |   movea.l 24(sp),a0
    58dc:	|     |   move.l 20(a0),8(sp)
    58e2:	|     |   move.l 1ca82 <SysBase>,d0
    58e8:	|     |   movea.l d0,a6
    58ea:	|     |   movea.l 8(sp),a1
    58ee:	|     |   jsr -690(a6)
	}
	unlinkVar (&fun -> reg);
    58f2:	|     \-> moveq #28,d0
    58f4:	|         add.l 24(sp),d0
    58f8:	|         move.l d0,-(sp)
    58fa:	|         jsr 14b54 <unlinkVar>
    5900:	|         addq.l #4,sp
	FreeVec(fun);
    5902:	|         move.l 24(sp),4(sp)
    5908:	|         move.l 1ca82 <SysBase>,d0
    590e:	|         movea.l d0,a6
    5910:	|         movea.l 4(sp),a1
    5914:	|         jsr -690(a6)
	fun = NULL;
    5918:	|         clr.l 24(sp)
}
    591c:	\-------> movea.l (sp)+,a6
    591e:	          lea 16(sp),sp
    5922:	          rts

00005924 <freezeSubs>:

void freezeSubs () {
    5924:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    5926:	          move.l 1ca1a <allRunningFunctions>,(sp)

	while (thisFunction) {
    592c:	   /----- bra.s 594a <freezeSubs+0x26>
		if (thisFunction -> unfreezable) {
    592e:	/--|----> movea.l (sp),a0
    5930:	|  |      move.w 52(a0),d0
    5934:	|  |  /-- bne.s 5944 <freezeSubs+0x20>
			//msgBox ("SLUDGE debugging bollocks!", "Trying to freeze an unfreezable function!");
		} else {
			thisFunction -> freezerLevel ++;
    5936:	|  |  |   movea.l (sp),a0
    5938:	|  |  |   move.b 56(a0),d0
    593c:	|  |  |   addq.b #1,d0
    593e:	|  |  |   movea.l (sp),a0
    5940:	|  |  |   move.b d0,56(a0)
		}
		thisFunction = thisFunction -> next;
    5944:	|  |  \-> movea.l (sp),a0
    5946:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    594a:	|  \----> tst.l (sp)
    594c:	\-------- bne.s 592e <freezeSubs+0xa>
	}
}
    594e:	          nop
    5950:	          nop
    5952:	          addq.l #4,sp
    5954:	          rts

00005956 <handleInput>:

BOOL handleInput () {
    5956:	             lea -16(sp),sp
    595a:	             move.l a6,-(sp)
	//Amiga Todo: import more from orig code and adjust 

	if (! overRegion) getOverRegion ();
    595c:	             move.l 1cb96 <overRegion>,d0
    5962:	         /-- bne.s 596a <handleInput+0x14>
    5964:	         |   jsr 15ac2 <getOverRegion>

	if (input.justMoved) {
    596a:	         \-> move.w 1ca38 <input+0x4>,d0
    5970:	         /-- beq.s 59ae <handleInput+0x58>
		if (currentEvents -> moveMouseFunction) {
    5972:	         |   movea.l 1c3fa <currentEvents>,a0
    5978:	         |   move.l 16(a0),d0
    597c:	         +-- beq.s 59ae <handleInput+0x58>
			if (! startNewFunctionNum (currentEvents -> moveMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    597e:	         |   move.l 1ca52 <noStack>,d1
    5984:	         |   movea.l 1c3fa <currentEvents>,a0
    598a:	         |   move.l 16(a0),d0
    598e:	         |   pea 1 <_start+0x1>
    5992:	         |   move.l d1,-(sp)
    5994:	         |   clr.l -(sp)
    5996:	         |   clr.l -(sp)
    5998:	         |   move.l d0,-(sp)
    599a:	         |   jsr 6c08 <startNewFunctionNum>
    59a0:	         |   lea 20(sp),sp
    59a4:	         |   tst.l d0
    59a6:	         +-- bne.s 59ae <handleInput+0x58>
    59a8:	         |   clr.w d0
    59aa:	/--------|-- bra.w 5bb4 <handleInput+0x25e>
		}
	}
	input.justMoved = FALSE;
    59ae:	|        \-> clr.w 1ca38 <input+0x4>

	if (lastRegion != overRegion && currentEvents -> focusFunction) {
    59b4:	|            move.l 1ca4a <lastRegion>,d1
    59ba:	|            move.l 1cb96 <overRegion>,d0
    59c0:	|            cmp.l d1,d0
    59c2:	|  /-------- beq.w 5a9a <handleInput+0x144>
    59c6:	|  |         movea.l 1c3fa <currentEvents>,a0
    59cc:	|  |         move.l 20(a0),d0
    59d0:	|  +-------- beq.w 5a9a <handleInput+0x144>
		struct variableStack * tempStack = AllocVec( sizeof(struct variableStack), MEMF_ANY);
    59d4:	|  |         moveq #12,d0
    59d6:	|  |         move.l d0,16(sp)
    59da:	|  |         clr.l 12(sp)
    59de:	|  |         move.l 1ca82 <SysBase>,d0
    59e4:	|  |         movea.l d0,a6
    59e6:	|  |         move.l 16(sp),d0
    59ea:	|  |         move.l 12(sp),d1
    59ee:	|  |         jsr -684(a6)
    59f2:	|  |         move.l d0,8(sp)
    59f6:	|  |         move.l 8(sp),d0
    59fa:	|  |         move.l d0,4(sp)
		if(!tempStack) {
    59fe:	|  |         move.l 4(sp),d0
    5a02:	|  |     /-- bne.s 5a18 <handleInput+0xc2>
			KPrintF("handleInput: Cannot allocate memory for variablestack");
    5a04:	|  |     |   pea 18a1f <PutChar+0xbef>
    5a0a:	|  |     |   jsr 17366 <KPrintF>
    5a10:	|  |     |   addq.l #4,sp
			return FALSE;
    5a12:	|  |     |   clr.w d0
    5a14:	+--|-----|-- bra.w 5bb4 <handleInput+0x25e>
		}
		
		initVarNew (tempStack -> thisVar);
    5a18:	|  |     \-> movea.l 4(sp),a0
    5a1c:	|  |         clr.l (a0)
		if (overRegion) {
    5a1e:	|  |         move.l 1cb96 <overRegion>,d0
    5a24:	|  |  /----- beq.s 5a4c <handleInput+0xf6>
			setVariable (&tempStack -> thisVar, SVT_OBJTYPE, overRegion -> thisType -> objectNum);
    5a26:	|  |  |      movea.l 1cb96 <overRegion>,a0
    5a2c:	|  |  |      movea.l 28(a0),a0
    5a30:	|  |  |      move.l 4(a0),d1
    5a34:	|  |  |      move.l 4(sp),d0
    5a38:	|  |  |      move.l d1,-(sp)
    5a3a:	|  |  |      pea 7 <_start+0x7>
    5a3e:	|  |  |      move.l d0,-(sp)
    5a40:	|  |  |      jsr 151f8 <setVariable>
    5a46:	|  |  |      lea 12(sp),sp
    5a4a:	|  |  |  /-- bra.s 5a62 <handleInput+0x10c>
		} else {
			setVariable (&tempStack -> thisVar, SVT_INT, 0);
    5a4c:	|  |  \--|-> move.l 4(sp),d0
    5a50:	|  |     |   clr.l -(sp)
    5a52:	|  |     |   pea 1 <_start+0x1>
    5a56:	|  |     |   move.l d0,-(sp)
    5a58:	|  |     |   jsr 151f8 <setVariable>
    5a5e:	|  |     |   lea 12(sp),sp
		}
		tempStack -> next = NULL;
    5a62:	|  |     \-> movea.l 4(sp),a0
    5a66:	|  |         clr.l 8(a0)
		if (! startNewFunctionNum (currentEvents -> focusFunction, 1, NULL, &tempStack, TRUE)) return FALSE;
    5a6a:	|  |         movea.l 1c3fa <currentEvents>,a0
    5a70:	|  |         move.l 20(a0),d0
    5a74:	|  |         pea 1 <_start+0x1>
    5a78:	|  |         lea 8(sp),a0
    5a7c:	|  |         move.l a0,-(sp)
    5a7e:	|  |         clr.l -(sp)
    5a80:	|  |         pea 1 <_start+0x1>
    5a84:	|  |         move.l d0,-(sp)
    5a86:	|  |         jsr 6c08 <startNewFunctionNum>
    5a8c:	|  |         lea 20(sp),sp
    5a90:	|  |         tst.l d0
    5a92:	|  +-------- bne.s 5a9a <handleInput+0x144>
    5a94:	|  |         clr.w d0
    5a96:	+--|-------- bra.w 5bb4 <handleInput+0x25e>
	}
	if (input.leftRelease && currentEvents -> leftMouseUpFunction)  {
    5a9a:	|  \-------> move.w 1ca3a <input+0x6>,d0
    5aa0:	|        /-- beq.s 5ade <handleInput+0x188>
    5aa2:	|        |   movea.l 1c3fa <currentEvents>,a0
    5aa8:	|        |   move.l 4(a0),d0
    5aac:	|        +-- beq.s 5ade <handleInput+0x188>
		if (! startNewFunctionNum (currentEvents -> leftMouseUpFunction, 0, NULL, noStack, TRUE)) return FALSE;
    5aae:	|        |   move.l 1ca52 <noStack>,d1
    5ab4:	|        |   movea.l 1c3fa <currentEvents>,a0
    5aba:	|        |   move.l 4(a0),d0
    5abe:	|        |   pea 1 <_start+0x1>
    5ac2:	|        |   move.l d1,-(sp)
    5ac4:	|        |   clr.l -(sp)
    5ac6:	|        |   clr.l -(sp)
    5ac8:	|        |   move.l d0,-(sp)
    5aca:	|        |   jsr 6c08 <startNewFunctionNum>
    5ad0:	|        |   lea 20(sp),sp
    5ad4:	|        |   tst.l d0
    5ad6:	|        +-- bne.s 5ade <handleInput+0x188>
    5ad8:	|        |   clr.w d0
    5ada:	+--------|-- bra.w 5bb4 <handleInput+0x25e>
	}
	if (input.rightRelease && currentEvents -> rightMouseUpFunction) {
    5ade:	|        \-> move.w 1ca3c <input+0x8>,d0
    5ae4:	|        /-- beq.s 5b22 <handleInput+0x1cc>
    5ae6:	|        |   movea.l 1c3fa <currentEvents>,a0
    5aec:	|        |   move.l 12(a0),d0
    5af0:	|        +-- beq.s 5b22 <handleInput+0x1cc>
		if (! startNewFunctionNum (currentEvents -> rightMouseUpFunction, 0, NULL, noStack, TRUE)) return FALSE;
    5af2:	|        |   move.l 1ca52 <noStack>,d1
    5af8:	|        |   movea.l 1c3fa <currentEvents>,a0
    5afe:	|        |   move.l 12(a0),d0
    5b02:	|        |   pea 1 <_start+0x1>
    5b06:	|        |   move.l d1,-(sp)
    5b08:	|        |   clr.l -(sp)
    5b0a:	|        |   clr.l -(sp)
    5b0c:	|        |   move.l d0,-(sp)
    5b0e:	|        |   jsr 6c08 <startNewFunctionNum>
    5b14:	|        |   lea 20(sp),sp
    5b18:	|        |   tst.l d0
    5b1a:	|        +-- bne.s 5b22 <handleInput+0x1cc>
    5b1c:	|        |   clr.w d0
    5b1e:	+--------|-- bra.w 5bb4 <handleInput+0x25e>
	}
	if (input.leftClick && currentEvents -> leftMouseFunction)
    5b22:	|        \-> move.w 1ca34 <input>,d0
    5b28:	|        /-- beq.s 5b60 <handleInput+0x20a>
    5b2a:	|        |   movea.l 1c3fa <currentEvents>,a0
    5b30:	|        |   move.l (a0),d0
    5b32:	|        +-- beq.s 5b60 <handleInput+0x20a>
		if (! startNewFunctionNum (currentEvents -> leftMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    5b34:	|        |   move.l 1ca52 <noStack>,d1
    5b3a:	|        |   movea.l 1c3fa <currentEvents>,a0
    5b40:	|        |   move.l (a0),d0
    5b42:	|        |   pea 1 <_start+0x1>
    5b46:	|        |   move.l d1,-(sp)
    5b48:	|        |   clr.l -(sp)
    5b4a:	|        |   clr.l -(sp)
    5b4c:	|        |   move.l d0,-(sp)
    5b4e:	|        |   jsr 6c08 <startNewFunctionNum>
    5b54:	|        |   lea 20(sp),sp
    5b58:	|        |   tst.l d0
    5b5a:	|        +-- bne.s 5b60 <handleInput+0x20a>
    5b5c:	|        |   clr.w d0
    5b5e:	+--------|-- bra.s 5bb4 <handleInput+0x25e>
	if (input.rightClick && currentEvents -> rightMouseFunction) {
    5b60:	|        \-> move.w 1ca36 <input+0x2>,d0
    5b66:	|        /-- beq.s 5ba2 <handleInput+0x24c>
    5b68:	|        |   movea.l 1c3fa <currentEvents>,a0
    5b6e:	|        |   move.l 8(a0),d0
    5b72:	|        +-- beq.s 5ba2 <handleInput+0x24c>
		if (! startNewFunctionNum (currentEvents -> rightMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    5b74:	|        |   move.l 1ca52 <noStack>,d1
    5b7a:	|        |   movea.l 1c3fa <currentEvents>,a0
    5b80:	|        |   move.l 8(a0),d0
    5b84:	|        |   pea 1 <_start+0x1>
    5b88:	|        |   move.l d1,-(sp)
    5b8a:	|        |   clr.l -(sp)
    5b8c:	|        |   clr.l -(sp)
    5b8e:	|        |   move.l d0,-(sp)
    5b90:	|        |   jsr 6c08 <startNewFunctionNum>
    5b96:	|        |   lea 20(sp),sp
    5b9a:	|        |   tst.l d0
    5b9c:	|        +-- bne.s 5ba2 <handleInput+0x24c>
    5b9e:	|        |   clr.w d0
    5ba0:	+--------|-- bra.s 5bb4 <handleInput+0x25e>
	}

	lastRegion = overRegion;
    5ba2:	|        \-> move.l 1cb96 <overRegion>,d0
    5ba8:	|            move.l d0,1ca4a <lastRegion>
	return runSludge ();
    5bae:	|            jsr 69d6 <runSludge>
}
    5bb4:	\----------> movea.l (sp)+,a6
    5bb6:	             lea 16(sp),sp
    5bba:	             rts

00005bbc <initSludge>:

BOOL initSludge (char * filename) {
    5bbc:	             lea -292(sp),sp
    5bc0:	             movem.l d2-d4/a2/a6,-(sp)
	int a = 0;
    5bc4:	             clr.l 308(sp)
	mouseCursorAnim = makeNullAnim ();
    5bc8:	             jsr ae3c <makeNullAnim>
    5bce:	             move.l d0,1c988 <mouseCursorAnim>

	//Amiga: Attention. This was changed to a Nonpointer Type
	BPTR fp = openAndVerify (filename, 'G', 'E', ERROR_BAD_HEADER, &gameVersion);
    5bd4:	             pea 1ca2c <gameVersion>
    5bda:	             pea 18a55 <PutChar+0xc25>
    5be0:	             pea 45 <_start+0x45>
    5be4:	             pea 47 <_start+0x47>
    5be8:	             move.l 332(sp),-(sp)
    5bec:	             jsr 660a <openAndVerify>
    5bf2:	             lea 20(sp),sp
    5bf6:	             move.l d0,288(sp)
	if (! fp) return FALSE;
    5bfa:	         /-- bne.s 5c02 <initSludge+0x46>
    5bfc:	         |   clr.w d0
    5bfe:	/--------|-- bra.w 632a <initSludge+0x76e>
	if (FGetC (fp)) {
    5c02:	|        \-> move.l 288(sp),284(sp)
    5c08:	|            move.l 1ca8a <DOSBase>,d0
    5c0e:	|            movea.l d0,a6
    5c10:	|            move.l 284(sp),d1
    5c14:	|            jsr -306(a6)
    5c18:	|            move.l d0,280(sp)
    5c1c:	|            move.l 280(sp),d0
    5c20:	|  /-------- beq.w 5dca <initSludge+0x20e>
		numBIFNames = get2bytes (fp);
    5c24:	|  |         move.l 288(sp),-(sp)
    5c28:	|  |         jsr 6bc <get2bytes>
    5c2e:	|  |         addq.l #4,sp
    5c30:	|  |         move.l d0,1ca56 <numBIFNames>
		allBIFNames = AllocVec(numBIFNames,MEMF_ANY);
    5c36:	|  |         move.l 1ca56 <numBIFNames>,d0
    5c3c:	|  |         move.l d0,276(sp)
    5c40:	|  |         clr.l 272(sp)
    5c44:	|  |         move.l 1ca82 <SysBase>,d0
    5c4a:	|  |         movea.l d0,a6
    5c4c:	|  |         move.l 276(sp),d0
    5c50:	|  |         move.l 272(sp),d1
    5c54:	|  |         jsr -684(a6)
    5c58:	|  |         move.l d0,268(sp)
    5c5c:	|  |         move.l 268(sp),d0
    5c60:	|  |         move.l d0,1ca12 <allBIFNames>
		if(allBIFNames == 0) return FALSE;
    5c66:	|  |         move.l 1ca12 <allBIFNames>,d0
    5c6c:	|  |     /-- bne.s 5c74 <initSludge+0xb8>
    5c6e:	|  |     |   clr.w d0
    5c70:	+--|-----|-- bra.w 632a <initSludge+0x76e>
		for (int fn = 0; fn < numBIFNames; fn ++) {
    5c74:	|  |     \-> clr.l 304(sp)
    5c78:	|  |     /-- bra.s 5c9e <initSludge+0xe2>
			allBIFNames[fn] = (char *) readString (fp);
    5c7a:	|  |  /--|-> move.l 1ca12 <allBIFNames>,d1
    5c80:	|  |  |  |   move.l 304(sp),d0
    5c84:	|  |  |  |   add.l d0,d0
    5c86:	|  |  |  |   add.l d0,d0
    5c88:	|  |  |  |   movea.l d1,a2
    5c8a:	|  |  |  |   adda.l d0,a2
    5c8c:	|  |  |  |   move.l 288(sp),-(sp)
    5c90:	|  |  |  |   jsr b02 <readString>
    5c96:	|  |  |  |   addq.l #4,sp
    5c98:	|  |  |  |   move.l d0,(a2)
		for (int fn = 0; fn < numBIFNames; fn ++) {
    5c9a:	|  |  |  |   addq.l #1,304(sp)
    5c9e:	|  |  |  \-> move.l 1ca56 <numBIFNames>,d0
    5ca4:	|  |  |      cmp.l 304(sp),d0
    5ca8:	|  |  \----- bgt.s 5c7a <initSludge+0xbe>
		}
		numUserFunc = get2bytes (fp);
    5caa:	|  |         move.l 288(sp),-(sp)
    5cae:	|  |         jsr 6bc <get2bytes>
    5cb4:	|  |         addq.l #4,sp
    5cb6:	|  |         move.l d0,1ca62 <numUserFunc>
		allUserFunc = AllocVec(numUserFunc,MEMF_ANY);
    5cbc:	|  |         move.l 1ca62 <numUserFunc>,d0
    5cc2:	|  |         move.l d0,264(sp)
    5cc6:	|  |         clr.l 260(sp)
    5cca:	|  |         move.l 1ca82 <SysBase>,d0
    5cd0:	|  |         movea.l d0,a6
    5cd2:	|  |         move.l 264(sp),d0
    5cd6:	|  |         move.l 260(sp),d1
    5cda:	|  |         jsr -684(a6)
    5cde:	|  |         move.l d0,256(sp)
    5ce2:	|  |         move.l 256(sp),d0
    5ce6:	|  |         move.l d0,1ca1e <allUserFunc>
		if( allUserFunc == 0) return FALSE;
    5cec:	|  |         move.l 1ca1e <allUserFunc>,d0
    5cf2:	|  |     /-- bne.s 5cfa <initSludge+0x13e>
    5cf4:	|  |     |   clr.w d0
    5cf6:	+--|-----|-- bra.w 632a <initSludge+0x76e>

		for (int fn = 0; fn < numUserFunc; fn ++) {
    5cfa:	|  |     \-> clr.l 300(sp)
    5cfe:	|  |     /-- bra.s 5d24 <initSludge+0x168>
			allUserFunc[fn] =   (char *) readString (fp);
    5d00:	|  |  /--|-> move.l 1ca1e <allUserFunc>,d1
    5d06:	|  |  |  |   move.l 300(sp),d0
    5d0a:	|  |  |  |   add.l d0,d0
    5d0c:	|  |  |  |   add.l d0,d0
    5d0e:	|  |  |  |   movea.l d1,a2
    5d10:	|  |  |  |   adda.l d0,a2
    5d12:	|  |  |  |   move.l 288(sp),-(sp)
    5d16:	|  |  |  |   jsr b02 <readString>
    5d1c:	|  |  |  |   addq.l #4,sp
    5d1e:	|  |  |  |   move.l d0,(a2)
		for (int fn = 0; fn < numUserFunc; fn ++) {
    5d20:	|  |  |  |   addq.l #1,300(sp)
    5d24:	|  |  |  \-> move.l 1ca62 <numUserFunc>,d0
    5d2a:	|  |  |      cmp.l 300(sp),d0
    5d2e:	|  |  \----- bgt.s 5d00 <initSludge+0x144>
		}
		if (gameVersion >= VERSION(1,3)) {
    5d30:	|  |         move.l 1ca2c <gameVersion>,d0
    5d36:	|  |         cmpi.l #258,d0
    5d3c:	|  +-------- ble.w 5dca <initSludge+0x20e>
			numResourceNames = get2bytes (fp);
    5d40:	|  |         move.l 288(sp),-(sp)
    5d44:	|  |         jsr 6bc <get2bytes>
    5d4a:	|  |         addq.l #4,sp
    5d4c:	|  |         move.l d0,1ca5e <numResourceNames>
			allResourceNames = AllocVec(sizeof(char *) * numResourceNames,MEMF_ANY);
    5d52:	|  |         move.l 1ca5e <numResourceNames>,d0
    5d58:	|  |         add.l d0,d0
    5d5a:	|  |         add.l d0,d0
    5d5c:	|  |         move.l d0,252(sp)
    5d60:	|  |         clr.l 248(sp)
    5d64:	|  |         move.l 1ca82 <SysBase>,d0
    5d6a:	|  |         movea.l d0,a6
    5d6c:	|  |         move.l 252(sp),d0
    5d70:	|  |         move.l 248(sp),d1
    5d74:	|  |         jsr -684(a6)
    5d78:	|  |         move.l d0,244(sp)
    5d7c:	|  |         move.l 244(sp),d0
    5d80:	|  |         move.l d0,1ca16 <allResourceNames>
			if(allResourceNames == 0) return FALSE;
    5d86:	|  |         move.l 1ca16 <allResourceNames>,d0
    5d8c:	|  |     /-- bne.s 5d94 <initSludge+0x1d8>
    5d8e:	|  |     |   clr.w d0
    5d90:	+--|-----|-- bra.w 632a <initSludge+0x76e>

			for (int fn = 0; fn < numResourceNames; fn ++) {
    5d94:	|  |     \-> clr.l 296(sp)
    5d98:	|  |     /-- bra.s 5dbe <initSludge+0x202>
				allResourceNames[fn] =  (char *) readString (fp);
    5d9a:	|  |  /--|-> move.l 1ca16 <allResourceNames>,d1
    5da0:	|  |  |  |   move.l 296(sp),d0
    5da4:	|  |  |  |   add.l d0,d0
    5da6:	|  |  |  |   add.l d0,d0
    5da8:	|  |  |  |   movea.l d1,a2
    5daa:	|  |  |  |   adda.l d0,a2
    5dac:	|  |  |  |   move.l 288(sp),-(sp)
    5db0:	|  |  |  |   jsr b02 <readString>
    5db6:	|  |  |  |   addq.l #4,sp
    5db8:	|  |  |  |   move.l d0,(a2)
			for (int fn = 0; fn < numResourceNames; fn ++) {
    5dba:	|  |  |  |   addq.l #1,296(sp)
    5dbe:	|  |  |  \-> move.l 1ca5e <numResourceNames>,d0
    5dc4:	|  |  |      cmp.l 296(sp),d0
    5dc8:	|  |  \----- bgt.s 5d9a <initSludge+0x1de>
			}
		}
	}

	input.mouseX = 129;
    5dca:	|  \-------> move.l #129,1ca3e <input+0xa>
	input.mouseY = 100;
    5dd4:	|            moveq #100,d0
    5dd6:	|            move.l d0,1ca42 <input+0xe>
	winWidth = get2bytes (fp);
    5ddc:	|            move.l 288(sp),-(sp)
    5de0:	|            jsr 6bc <get2bytes>
    5de6:	|            addq.l #4,sp
    5de8:	|            move.l d0,1c9d6 <winWidth>
	winHeight = get2bytes (fp);
    5dee:	|            move.l 288(sp),-(sp)
    5df2:	|            jsr 6bc <get2bytes>
    5df8:	|            addq.l #4,sp
    5dfa:	|            move.l d0,1c9da <winHeight>
	specialSettings = FGetC (fp);
    5e00:	|            move.l 288(sp),240(sp)
    5e06:	|            move.l 1ca8a <DOSBase>,d0
    5e0c:	|            movea.l d0,a6
    5e0e:	|            move.l 240(sp),d1
    5e12:	|            jsr -306(a6)
    5e16:	|            move.l d0,236(sp)
    5e1a:	|            move.l 236(sp),d0
    5e1e:	|            move.l d0,1ca66 <specialSettings>

	desiredfps = 1000/FGetC (fp);
    5e24:	|            move.l 288(sp),232(sp)
    5e2a:	|            move.l 1ca8a <DOSBase>,d0
    5e30:	|            movea.l d0,a6
    5e32:	|            move.l 232(sp),d1
    5e36:	|            jsr -306(a6)
    5e3a:	|            move.l d0,228(sp)
    5e3e:	|            move.l 228(sp),d0
    5e42:	|            move.l d0,-(sp)
    5e44:	|            pea 3e8 <encodeFilename+0xea>
    5e48:	|            jsr 17d98 <__divsi3>
    5e4e:	|            addq.l #8,sp
    5e50:	|            move.l d0,1c410 <desiredfps>

	readString(fp); //Need to keep reading to stay on track. But the comented line below looks wrong.
    5e56:	|            move.l 288(sp),-(sp)
    5e5a:	|            jsr b02 <readString>
    5e60:	|            addq.l #4,sp
	//FreeVec(readString (fp));

	ULONG blocks_read = FRead( fp, &fileTime, sizeof (FILETIME), 1 ); 
    5e62:	|            move.l 288(sp),224(sp)
    5e68:	|            move.l #117284,220(sp)
    5e70:	|            moveq #8,d1
    5e72:	|            move.l d1,216(sp)
    5e76:	|            moveq #1,d0
    5e78:	|            move.l d0,212(sp)
    5e7c:	|            move.l 1ca8a <DOSBase>,d0
    5e82:	|            movea.l d0,a6
    5e84:	|            move.l 224(sp),d1
    5e88:	|            move.l 220(sp),d2
    5e8c:	|            move.l 216(sp),d3
    5e90:	|            move.l 212(sp),d4
    5e94:	|            jsr -324(a6)
    5e98:	|            move.l d0,208(sp)
    5e9c:	|            move.l 208(sp),d0
    5ea0:	|            move.l d0,204(sp)
	if (blocks_read != 1) {
    5ea4:	|            moveq #1,d1
    5ea6:	|            cmp.l 204(sp),d1
    5eaa:	|        /-- beq.s 5eba <initSludge+0x2fe>
		KPrintF("Reading error in initSludge.\n");
    5eac:	|        |   pea 18a8e <PutChar+0xc5e>
    5eb2:	|        |   jsr 17366 <KPrintF>
    5eb8:	|        |   addq.l #4,sp
	}

	char * dataFol = (gameVersion >= VERSION(1,3)) ? readString(fp) : joinStrings ("", "");
    5eba:	|        \-> move.l 1ca2c <gameVersion>,d0
    5ec0:	|            cmpi.l #258,d0
    5ec6:	|        /-- ble.s 5ed6 <initSludge+0x31a>
    5ec8:	|        |   move.l 288(sp),-(sp)
    5ecc:	|        |   jsr b02 <readString>
    5ed2:	|        |   addq.l #4,sp
    5ed4:	|     /--|-- bra.s 5eea <initSludge+0x32e>
    5ed6:	|     |  \-> pea 18aac <PutChar+0xc7c>
    5edc:	|     |      pea 18aac <PutChar+0xc7c>
    5ee2:	|     |      jsr 13e32 <joinStrings>
    5ee8:	|     |      addq.l #8,sp
    5eea:	|     \----> move.l d0,200(sp)

	gameSettings.numLanguages = (gameVersion >= VERSION(1,3)) ? (FGetC (fp)) : 0;
    5eee:	|            move.l 1ca2c <gameVersion>,d0
    5ef4:	|            cmpi.l #258,d0
    5efa:	|     /----- ble.s 5f1c <initSludge+0x360>
    5efc:	|     |      move.l 288(sp),196(sp)
    5f02:	|     |      move.l 1ca8a <DOSBase>,d0
    5f08:	|     |      movea.l d0,a6
    5f0a:	|     |      move.l 196(sp),d1
    5f0e:	|     |      jsr -306(a6)
    5f12:	|     |      move.l d0,192(sp)
    5f16:	|     |      move.l 192(sp),d0
    5f1a:	|     |  /-- bra.s 5f1e <initSludge+0x362>
    5f1c:	|     \--|-> moveq #0,d0
    5f1e:	|        \-> move.l d0,1cb62 <gameSettings+0x4>
	makeLanguageTable (fp);
    5f24:	|            move.l 288(sp),-(sp)
    5f28:	|            jsr 137e8 <makeLanguageTable>
    5f2e:	|            addq.l #4,sp

	if (gameVersion >= VERSION(1,6))
    5f30:	|            move.l 1ca2c <gameVersion>,d0
    5f36:	|            cmpi.l #261,d0
    5f3c:	|        /-- ble.s 5f8a <initSludge+0x3ce>
	{
		FGetC(fp);
    5f3e:	|        |   move.l 288(sp),188(sp)
    5f44:	|        |   move.l 1ca8a <DOSBase>,d0
    5f4a:	|        |   movea.l d0,a6
    5f4c:	|        |   move.l 188(sp),d1
    5f50:	|        |   jsr -306(a6)
    5f54:	|        |   move.l d0,184(sp)
		// aaLoad
		FGetC (fp);
    5f58:	|        |   move.l 288(sp),180(sp)
    5f5e:	|        |   move.l 1ca8a <DOSBase>,d0
    5f64:	|        |   movea.l d0,a6
    5f66:	|        |   move.l 180(sp),d1
    5f6a:	|        |   jsr -306(a6)
    5f6e:	|        |   move.l d0,176(sp)
		getFloat (fp);
    5f72:	|        |   move.l 288(sp),-(sp)
    5f76:	|        |   jsr 7d8 <getFloat>
    5f7c:	|        |   addq.l #4,sp
		getFloat (fp);
    5f7e:	|        |   move.l 288(sp),-(sp)
    5f82:	|        |   jsr 7d8 <getFloat>
    5f88:	|        |   addq.l #4,sp
	}

	char * checker = readString (fp);
    5f8a:	|        \-> move.l 288(sp),-(sp)
    5f8e:	|            jsr b02 <readString>
    5f94:	|            addq.l #4,sp
    5f96:	|            move.l d0,172(sp)

	if (strcmp (checker, "okSoFar")) {
    5f9a:	|            pea 18aad <PutChar+0xc7d>
    5fa0:	|            move.l 176(sp),-(sp)
    5fa4:	|            jsr 13db2 <strcmp>
    5faa:	|            addq.l #8,sp
    5fac:	|            tst.l d0
    5fae:	|        /-- beq.s 5fb6 <initSludge+0x3fa>
		return FALSE;
    5fb0:	|        |   clr.w d0
    5fb2:	+--------|-- bra.w 632a <initSludge+0x76e>
	}
	FreeVec( checker);
    5fb6:	|        \-> move.l 172(sp),168(sp)
    5fbc:	|            move.l 1ca82 <SysBase>,d0
    5fc2:	|            movea.l d0,a6
    5fc4:	|            movea.l 168(sp),a1
    5fc8:	|            jsr -690(a6)
	checker = NULL;
    5fcc:	|            clr.l 172(sp)

    unsigned char customIconLogo = FGetC (fp);
    5fd0:	|            move.l 288(sp),164(sp)
    5fd6:	|            move.l 1ca8a <DOSBase>,d0
    5fdc:	|            movea.l d0,a6
    5fde:	|            move.l 164(sp),d1
    5fe2:	|            jsr -306(a6)
    5fe6:	|            move.l d0,160(sp)
    5fea:	|            move.l 160(sp),d0
    5fee:	|            move.b d0,159(sp)

	if (customIconLogo & 1) {
    5ff2:	|            moveq #0,d0
    5ff4:	|            move.b 159(sp),d0
    5ff8:	|            moveq #1,d1
    5ffa:	|            and.l d1,d0
    5ffc:	|        /-- beq.s 6054 <initSludge+0x498>
		// There is an icon - read it!
		Write(Output(), (APTR)"initsludge:Game Icon not supported on this plattform.\n", 54);
    5ffe:	|        |   move.l 1ca8a <DOSBase>,d0
    6004:	|        |   movea.l d0,a6
    6006:	|        |   jsr -60(a6)
    600a:	|        |   move.l d0,38(sp)
    600e:	|        |   move.l 38(sp),d0
    6012:	|        |   move.l d0,34(sp)
    6016:	|        |   move.l #101045,30(sp)
    601e:	|        |   moveq #54,d0
    6020:	|        |   move.l d0,26(sp)
    6024:	|        |   move.l 1ca8a <DOSBase>,d0
    602a:	|        |   movea.l d0,a6
    602c:	|        |   move.l 34(sp),d1
    6030:	|        |   move.l 30(sp),d2
    6034:	|        |   move.l 26(sp),d3
    6038:	|        |   jsr -48(a6)
    603c:	|        |   move.l d0,22(sp)
		KPrintF("initsludge: Game Icon not supported on this plattform.\n");
    6040:	|        |   pea 18aec <PutChar+0xcbc>
    6046:	|        |   jsr 17366 <KPrintF>
    604c:	|        |   addq.l #4,sp
		return FALSE;
    604e:	|        |   clr.w d0
    6050:	+--------|-- bra.w 632a <initSludge+0x76e>
	}

	numGlobals = get2bytes (fp);
    6054:	|        \-> move.l 288(sp),-(sp)
    6058:	|            jsr 6bc <get2bytes>
    605e:	|            addq.l #4,sp
    6060:	|            move.l d0,1ca5a <numGlobals>

	globalVars = AllocVec( sizeof(struct variable) * numGlobals,MEMF_ANY);
    6066:	|            move.l 1ca5a <numGlobals>,d0
    606c:	|            lsl.l #3,d0
    606e:	|            move.l d0,154(sp)
    6072:	|            clr.l 150(sp)
    6076:	|            move.l 1ca82 <SysBase>,d0
    607c:	|            movea.l d0,a6
    607e:	|            move.l 154(sp),d0
    6082:	|            move.l 150(sp),d1
    6086:	|            jsr -684(a6)
    608a:	|            move.l d0,146(sp)
    608e:	|            move.l 146(sp),d0
    6092:	|            move.l d0,1ca30 <globalVars>
	if(globalVars == 0 && numGlobals > 0) {
    6098:	|            move.l 1ca30 <globalVars>,d0
    609e:	|        /-- bne.s 60bc <initSludge+0x500>
    60a0:	|        |   move.l 1ca5a <numGlobals>,d0
    60a6:	|        +-- ble.s 60bc <initSludge+0x500>
		KPrintF("initsludge: Cannot allocate memory for globalvars\n");
    60a8:	|        |   pea 18b24 <PutChar+0xcf4>
    60ae:	|        |   jsr 17366 <KPrintF>
    60b4:	|        |   addq.l #4,sp
		return FALSE;
    60b6:	|        |   clr.w d0
    60b8:	+--------|-- bra.w 632a <initSludge+0x76e>
	}		 
	for (a = 0; a < numGlobals; a ++) initVarNew (globalVars[a]);
    60bc:	|        \-> clr.l 308(sp)
    60c0:	|        /-- bra.s 60d8 <initSludge+0x51c>
    60c2:	|     /--|-> move.l 1ca30 <globalVars>,d1
    60c8:	|     |  |   move.l 308(sp),d0
    60cc:	|     |  |   lsl.l #3,d0
    60ce:	|     |  |   movea.l d1,a0
    60d0:	|     |  |   adda.l d0,a0
    60d2:	|     |  |   clr.l (a0)
    60d4:	|     |  |   addq.l #1,308(sp)
    60d8:	|     |  \-> move.l 1ca5a <numGlobals>,d0
    60de:	|     |      cmp.l 308(sp),d0
    60e2:	|     \----- bgt.s 60c2 <initSludge+0x506>

	setFileIndices (fp, gameSettings.numLanguages, 0);
    60e4:	|            move.l 1cb62 <gameSettings+0x4>,d0
    60ea:	|            clr.l -(sp)
    60ec:	|            move.l d0,-(sp)
    60ee:	|            move.l 296(sp),-(sp)
    60f2:	|            jsr 70f8 <setFileIndices>
    60f8:	|            lea 12(sp),sp

	char * gameNameOrig = getNumberedString(1);	
    60fc:	|            pea 1 <_start+0x1>
    6100:	|            jsr 6db2 <getNumberedString>
    6106:	|            addq.l #4,sp
    6108:	|            move.l d0,142(sp)
	char * gameName = encodeFilename (gameNameOrig);
    610c:	|            move.l 142(sp),-(sp)
    6110:	|            jsr 2fe <encodeFilename>
    6116:	|            addq.l #4,sp
    6118:	|            move.l d0,138(sp)

	FreeVec(gameNameOrig);
    611c:	|            move.l 142(sp),134(sp)
    6122:	|            move.l 1ca82 <SysBase>,d0
    6128:	|            movea.l d0,a6
    612a:	|            movea.l 134(sp),a1
    612e:	|            jsr -690(a6)

	BPTR lock = CreateDir( gameName );
    6132:	|            move.l 138(sp),130(sp)
    6138:	|            move.l 1ca8a <DOSBase>,d0
    613e:	|            movea.l d0,a6
    6140:	|            move.l 130(sp),d1
    6144:	|            jsr -120(a6)
    6148:	|            move.l d0,126(sp)
    614c:	|            move.l 126(sp),d0
    6150:	|            move.l d0,292(sp)
	if(lock == 0) {
    6154:	|        /-- bne.s 6182 <initSludge+0x5c6>
		//Directory does already exist
		lock = Lock(gameName, ACCESS_READ);
    6156:	|        |   move.l 138(sp),122(sp)
    615c:	|        |   moveq #-2,d1
    615e:	|        |   move.l d1,118(sp)
    6162:	|        |   move.l 1ca8a <DOSBase>,d0
    6168:	|        |   movea.l d0,a6
    616a:	|        |   move.l 122(sp),d1
    616e:	|        |   move.l 118(sp),d2
    6172:	|        |   jsr -84(a6)
    6176:	|        |   move.l d0,114(sp)
    617a:	|        |   move.l 114(sp),d0
    617e:	|        |   move.l d0,292(sp)
	}

	if (!CurrentDir(lock)) {
    6182:	|        \-> move.l 292(sp),110(sp)
    6188:	|            move.l 1ca8a <DOSBase>,d0
    618e:	|            movea.l d0,a6
    6190:	|            move.l 110(sp),d1
    6194:	|            jsr -126(a6)
    6198:	|            move.l d0,106(sp)
    619c:	|            move.l 106(sp),d0
    61a0:	|        /-- bne.s 61fc <initSludge+0x640>
		KPrintF("initsludge: Failed changing to directory %s\n", gameName);
    61a2:	|        |   move.l 138(sp),-(sp)
    61a6:	|        |   pea 18b57 <PutChar+0xd27>
    61ac:	|        |   jsr 17366 <KPrintF>
    61b2:	|        |   addq.l #8,sp
		Write(Output(), (APTR)"initsludge:Failed changing to directory\n", 40);
    61b4:	|        |   move.l 1ca8a <DOSBase>,d0
    61ba:	|        |   movea.l d0,a6
    61bc:	|        |   jsr -60(a6)
    61c0:	|        |   move.l d0,58(sp)
    61c4:	|        |   move.l 58(sp),d0
    61c8:	|        |   move.l d0,54(sp)
    61cc:	|        |   move.l #101252,50(sp)
    61d4:	|        |   moveq #40,d0
    61d6:	|        |   move.l d0,46(sp)
    61da:	|        |   move.l 1ca8a <DOSBase>,d0
    61e0:	|        |   movea.l d0,a6
    61e2:	|        |   move.l 54(sp),d1
    61e6:	|        |   move.l 50(sp),d2
    61ea:	|        |   move.l 46(sp),d3
    61ee:	|        |   jsr -48(a6)
    61f2:	|        |   move.l d0,42(sp)
		return FALSE;
    61f6:	|        |   clr.w d0
    61f8:	+--------|-- bra.w 632a <initSludge+0x76e>
	}

	FreeVec(gameName);
    61fc:	|        \-> move.l 138(sp),102(sp)
    6202:	|            move.l 1ca82 <SysBase>,d0
    6208:	|            movea.l d0,a6
    620a:	|            movea.l 102(sp),a1
    620e:	|            jsr -690(a6)

	readIniFile (filename);
    6212:	|            move.l 316(sp),-(sp)
    6216:	|            jsr 1391c <readIniFile>
    621c:	|            addq.l #4,sp

	// Now set file indices properly to the chosen language.
	languageNum = getLanguageForFileB ();
    621e:	|            jsr 136ee <getLanguageForFileB>
    6224:	|            move.l d0,1c3fe <languageNum>
	if (languageNum < 0) KPrintF("Can't find the translation data specified!");
    622a:	|            move.l 1c3fe <languageNum>,d0
    6230:	|        /-- bpl.s 6240 <initSludge+0x684>
    6232:	|        |   pea 18bad <PutChar+0xd7d>
    6238:	|        |   jsr 17366 <KPrintF>
    623e:	|        |   addq.l #4,sp
	setFileIndices (NULL, gameSettings.numLanguages, languageNum);
    6240:	|        \-> move.l 1c3fe <languageNum>,d0
    6246:	|            move.l d0,d1
    6248:	|            move.l 1cb62 <gameSettings+0x4>,d0
    624e:	|            move.l d1,-(sp)
    6250:	|            move.l d0,-(sp)
    6252:	|            clr.l -(sp)
    6254:	|            jsr 70f8 <setFileIndices>
    625a:	|            lea 12(sp),sp

	if (dataFol[0]) {
    625e:	|            movea.l 200(sp),a0
    6262:	|            move.b (a0),d0
    6264:	|     /----- beq.w 630e <initSludge+0x752>
		char *dataFolder = encodeFilename(dataFol);
    6268:	|     |      move.l 200(sp),-(sp)
    626c:	|     |      jsr 2fe <encodeFilename>
    6272:	|     |      addq.l #4,sp
    6274:	|     |      move.l d0,98(sp)
		lock = CreateDir( dataFolder );
    6278:	|     |      move.l 98(sp),94(sp)
    627e:	|     |      move.l 1ca8a <DOSBase>,d0
    6284:	|     |      movea.l d0,a6
    6286:	|     |      move.l 94(sp),d1
    628a:	|     |      jsr -120(a6)
    628e:	|     |      move.l d0,90(sp)
    6292:	|     |      move.l 90(sp),d0
    6296:	|     |      move.l d0,292(sp)
		if(lock == 0) {
    629a:	|     |  /-- bne.s 62c8 <initSludge+0x70c>
			//Directory does already exist
			lock = Lock(dataFolder, ACCESS_READ);		
    629c:	|     |  |   move.l 98(sp),86(sp)
    62a2:	|     |  |   moveq #-2,d1
    62a4:	|     |  |   move.l d1,82(sp)
    62a8:	|     |  |   move.l 1ca8a <DOSBase>,d0
    62ae:	|     |  |   movea.l d0,a6
    62b0:	|     |  |   move.l 86(sp),d1
    62b4:	|     |  |   move.l 82(sp),d2
    62b8:	|     |  |   jsr -84(a6)
    62bc:	|     |  |   move.l d0,78(sp)
    62c0:	|     |  |   move.l 78(sp),d0
    62c4:	|     |  |   move.l d0,292(sp)
		}


		if (!CurrentDir(lock)) {
    62c8:	|     |  \-> move.l 292(sp),74(sp)
    62ce:	|     |      move.l 1ca8a <DOSBase>,d0
    62d4:	|     |      movea.l d0,a6
    62d6:	|     |      move.l 74(sp),d1
    62da:	|     |      jsr -126(a6)
    62de:	|     |      move.l d0,70(sp)
    62e2:	|     |      move.l 70(sp),d0
    62e6:	|     |  /-- bne.s 62f8 <initSludge+0x73c>
			(Output(), (APTR)"initsludge:This game's data folder is inaccessible!\n", 52);
    62e8:	|     |  |   move.l 1ca8a <DOSBase>,d0
    62ee:	|     |  |   movea.l d0,a6
    62f0:	|     |  |   jsr -60(a6)
    62f4:	|     |  |   move.l d0,66(sp)
		}
		FreeVec(dataFolder);
    62f8:	|     |  \-> move.l 98(sp),62(sp)
    62fe:	|     |      move.l 1ca82 <SysBase>,d0
    6304:	|     |      movea.l d0,a6
    6306:	|     |      movea.l 62(sp),a1
    630a:	|     |      jsr -690(a6)
	}

 	positionStatus (10, winHeight - 15);
    630e:	|     \----> movea.l 1c9da <winHeight>,a0
    6314:	|            lea -15(a0),a0
    6318:	|            move.l a0,d0
    631a:	|            move.l d0,-(sp)
    631c:	|            pea a <_start+0xa>
    6320:	|            jsr 7b38 <positionStatus>
    6326:	|            addq.l #8,sp

	return TRUE;
    6328:	|            moveq #1,d0
}
    632a:	\----------> movem.l (sp)+,d2-d4/a2/a6
    632e:	             lea 292(sp),sp
    6332:	             rts

00006334 <killSpeechTimers>:

void killSpeechTimers () {
    6334:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    6336:	          move.l 1ca1a <allRunningFunctions>,(sp)

	while (thisFunction) {
    633c:	   /----- bra.s 6368 <killSpeechTimers+0x34>
		if (thisFunction -> freezerLevel == 0 && thisFunction -> isSpeech && thisFunction -> timeLeft) {
    633e:	/--|----> movea.l (sp),a0
    6340:	|  |      move.b 56(a0),d0
    6344:	|  |  /-- bne.s 6362 <killSpeechTimers+0x2e>
    6346:	|  |  |   movea.l (sp),a0
    6348:	|  |  |   move.w 50(a0),d0
    634c:	|  |  +-- beq.s 6362 <killSpeechTimers+0x2e>
    634e:	|  |  |   movea.l (sp),a0
    6350:	|  |  |   move.l 12(a0),d0
    6354:	|  |  +-- beq.s 6362 <killSpeechTimers+0x2e>
			thisFunction -> timeLeft = 0;
    6356:	|  |  |   movea.l (sp),a0
    6358:	|  |  |   clr.l 12(a0)
			thisFunction -> isSpeech = FALSE;
    635c:	|  |  |   movea.l (sp),a0
    635e:	|  |  |   clr.w 50(a0)
		}
		thisFunction = thisFunction -> next;
    6362:	|  |  \-> movea.l (sp),a0
    6364:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    6368:	|  \----> tst.l (sp)
    636a:	\-------- bne.s 633e <killSpeechTimers+0xa>
	}

	killAllSpeech ();
    636c:	          jsr 8076 <killAllSpeech>
}
    6372:	          nop
    6374:	          addq.l #4,sp
    6376:	          rts

00006378 <loadFunctionCode>:

BOOL loadFunctionCode (struct loadedFunction * newFunc) {
    6378:	             lea -52(sp),sp
    637c:	             move.l a6,-(sp)
	unsigned int numLines, numLinesRead;
	int a;

	if (! openSubSlice (newFunc -> originalNumber)) return FALSE;
    637e:	             movea.l 60(sp),a0
    6382:	             move.l (a0),d0
    6384:	             move.l d0,-(sp)
    6386:	             jsr 7038 <openSubSlice>
    638c:	             addq.l #4,sp
    638e:	             tst.w d0
    6390:	         /-- bne.s 6398 <loadFunctionCode+0x20>
    6392:	         |   clr.w d0
    6394:	/--------|-- bra.w 6562 <loadFunctionCode+0x1ea>
	

	newFunc-> unfreezable	= FGetC (bigDataFile);
    6398:	|        \-> move.l 1ca6a <bigDataFile>,44(sp)
    63a0:	|            move.l 1ca8a <DOSBase>,d0
    63a6:	|            movea.l d0,a6
    63a8:	|            move.l 44(sp),d1
    63ac:	|            jsr -306(a6)
    63b0:	|            move.l d0,40(sp)
    63b4:	|            move.l 40(sp),d0
    63b8:	|            move.l d0,d0
    63ba:	|            movea.l 60(sp),a0
    63be:	|            move.w d0,52(a0)
	numLines				= get2bytes (bigDataFile);
    63c2:	|            move.l 1ca6a <bigDataFile>,d0
    63c8:	|            move.l d0,-(sp)
    63ca:	|            jsr 6bc <get2bytes>
    63d0:	|            addq.l #4,sp
    63d2:	|            move.l d0,36(sp)
	newFunc -> numArgs		= get2bytes (bigDataFile);
    63d6:	|            move.l 1ca6a <bigDataFile>,d0
    63dc:	|            move.l d0,-(sp)
    63de:	|            jsr 6bc <get2bytes>
    63e4:	|            addq.l #4,sp
    63e6:	|            movea.l 60(sp),a0
    63ea:	|            move.l d0,16(a0)
	newFunc -> numLocals	= get2bytes (bigDataFile);
    63ee:	|            move.l 1ca6a <bigDataFile>,d0
    63f4:	|            move.l d0,-(sp)
    63f6:	|            jsr 6bc <get2bytes>
    63fc:	|            addq.l #4,sp
    63fe:	|            movea.l 60(sp),a0
    6402:	|            move.l d0,8(a0)
	newFunc -> compiledLines = AllocVec( sizeof(struct lineOfCode) * numLines,MEMF_ANY);
    6406:	|            move.l 36(sp),d0
    640a:	|            lsl.l #3,d0
    640c:	|            move.l d0,32(sp)
    6410:	|            clr.l 28(sp)
    6414:	|            move.l 1ca82 <SysBase>,d0
    641a:	|            movea.l d0,a6
    641c:	|            move.l 32(sp),d0
    6420:	|            move.l 28(sp),d1
    6424:	|            jsr -684(a6)
    6428:	|            move.l d0,24(sp)
    642c:	|            move.l 24(sp),d0
    6430:	|            movea.l 60(sp),a0
    6434:	|            move.l d0,4(a0)
	if (! newFunc -> compiledLines) {
    6438:	|            movea.l 60(sp),a0
    643c:	|            move.l 4(a0),d0
    6440:	|        /-- bne.s 6456 <loadFunctionCode+0xde>
		KPrintF("loadFunctionCode: cannot allocate memory");
    6442:	|        |   pea 18bd8 <PutChar+0xda8>
    6448:	|        |   jsr 17366 <KPrintF>
    644e:	|        |   addq.l #4,sp
		return FALSE;
    6450:	|        |   clr.w d0
    6452:	+--------|-- bra.w 6562 <loadFunctionCode+0x1ea>
	}

	for (numLinesRead = 0; numLinesRead < numLines; numLinesRead ++) {
    6456:	|        \-> clr.l 52(sp)
    645a:	|        /-- bra.s 64bc <loadFunctionCode+0x144>
		newFunc -> compiledLines[numLinesRead].theCommand = (enum sludgeCommand) FGetC(bigDataFile);
    645c:	|     /--|-> move.l 1ca6a <bigDataFile>,8(sp)
    6464:	|     |  |   move.l 1ca8a <DOSBase>,d0
    646a:	|     |  |   movea.l d0,a6
    646c:	|     |  |   move.l 8(sp),d1
    6470:	|     |  |   jsr -306(a6)
    6474:	|     |  |   move.l d0,4(sp)
    6478:	|     |  |   move.l 4(sp),d1
    647c:	|     |  |   movea.l 60(sp),a0
    6480:	|     |  |   movea.l 4(a0),a0
    6484:	|     |  |   move.l 52(sp),d0
    6488:	|     |  |   lsl.l #3,d0
    648a:	|     |  |   adda.l d0,a0
    648c:	|     |  |   move.l d1,d0
    648e:	|     |  |   move.l d0,(a0)
		newFunc -> compiledLines[numLinesRead].param = get2bytes (bigDataFile);
    6490:	|     |  |   move.l 1ca6a <bigDataFile>,d0
    6496:	|     |  |   move.l d0,-(sp)
    6498:	|     |  |   jsr 6bc <get2bytes>
    649e:	|     |  |   addq.l #4,sp
    64a0:	|     |  |   move.l d0,d1
    64a2:	|     |  |   movea.l 60(sp),a0
    64a6:	|     |  |   movea.l 4(a0),a0
    64aa:	|     |  |   move.l 52(sp),d0
    64ae:	|     |  |   lsl.l #3,d0
    64b0:	|     |  |   adda.l d0,a0
    64b2:	|     |  |   move.l d1,d0
    64b4:	|     |  |   move.l d0,4(a0)
	for (numLinesRead = 0; numLinesRead < numLines; numLinesRead ++) {
    64b8:	|     |  |   addq.l #1,52(sp)
    64bc:	|     |  \-> move.l 52(sp),d0
    64c0:	|     |      cmp.l 36(sp),d0
    64c4:	|     \----- bcs.s 645c <loadFunctionCode+0xe4>
	}

	finishAccess ();
    64c6:	|            jsr 6da8 <finishAccess>

	// Now we need to reserve memory for the local variables
	if(newFunc->numLocals > 0) {
    64cc:	|            movea.l 60(sp),a0
    64d0:	|            move.l 8(a0),d0
    64d4:	|  /-------- ble.w 6558 <loadFunctionCode+0x1e0>
		newFunc -> localVars = AllocVec( sizeof(struct variable) * newFunc->numLocals,MEMF_ANY);
    64d8:	|  |         movea.l 60(sp),a0
    64dc:	|  |         move.l 8(a0),d0
    64e0:	|  |         lsl.l #3,d0
    64e2:	|  |         move.l d0,20(sp)
    64e6:	|  |         clr.l 16(sp)
    64ea:	|  |         move.l 1ca82 <SysBase>,d0
    64f0:	|  |         movea.l d0,a6
    64f2:	|  |         move.l 20(sp),d0
    64f6:	|  |         move.l 16(sp),d1
    64fa:	|  |         jsr -684(a6)
    64fe:	|  |         move.l d0,12(sp)
    6502:	|  |         move.l 12(sp),d0
    6506:	|  |         movea.l 60(sp),a0
    650a:	|  |         move.l d0,20(a0)
		if (!newFunc -> localVars) {
    650e:	|  |         movea.l 60(sp),a0
    6512:	|  |         move.l 20(a0),d0
    6516:	|  |     /-- bne.s 652a <loadFunctionCode+0x1b2>
			KPrintF("loadFunctionCode: cannot allocate memory");
    6518:	|  |     |   pea 18bd8 <PutChar+0xda8>
    651e:	|  |     |   jsr 17366 <KPrintF>
    6524:	|  |     |   addq.l #4,sp
			return FALSE;
    6526:	|  |     |   clr.w d0
    6528:	+--|-----|-- bra.s 6562 <loadFunctionCode+0x1ea>
		}

		for (a = 0; a < newFunc -> numLocals; a ++) {
    652a:	|  |     \-> clr.l 48(sp)
    652e:	|  |     /-- bra.s 6548 <loadFunctionCode+0x1d0>
			initVarNew (newFunc -> localVars[a]);
    6530:	|  |  /--|-> movea.l 60(sp),a0
    6534:	|  |  |  |   move.l 20(a0),d1
    6538:	|  |  |  |   move.l 48(sp),d0
    653c:	|  |  |  |   lsl.l #3,d0
    653e:	|  |  |  |   movea.l d1,a0
    6540:	|  |  |  |   adda.l d0,a0
    6542:	|  |  |  |   clr.l (a0)
		for (a = 0; a < newFunc -> numLocals; a ++) {
    6544:	|  |  |  |   addq.l #1,48(sp)
    6548:	|  |  |  \-> movea.l 60(sp),a0
    654c:	|  |  |      move.l 8(a0),d0
    6550:	|  |  |      cmp.l 48(sp),d0
    6554:	|  |  \----- bgt.s 6530 <loadFunctionCode+0x1b8>
    6556:	|  |     /-- bra.s 6560 <loadFunctionCode+0x1e8>
		}
	} else
	{
		newFunc->numLocals = NULL;
    6558:	|  \-----|-> movea.l 60(sp),a0
    655c:	|        |   clr.l 8(a0)
	}
	return TRUE;
    6560:	|        \-> moveq #1,d0
}
    6562:	\----------> movea.l (sp)+,a6
    6564:	             lea 52(sp),sp
    6568:	             rts

0000656a <loadHandlers>:

void loadHandlers (BPTR fp) {
    656a:	move.l a2,-(sp)
	currentEvents -> leftMouseFunction		= get2bytes (fp);
    656c:	movea.l 1c3fa <currentEvents>,a2
    6572:	move.l 8(sp),-(sp)
    6576:	jsr 6bc <get2bytes>
    657c:	addq.l #4,sp
    657e:	move.l d0,(a2)
	currentEvents -> leftMouseUpFunction	= get2bytes (fp);
    6580:	movea.l 1c3fa <currentEvents>,a2
    6586:	move.l 8(sp),-(sp)
    658a:	jsr 6bc <get2bytes>
    6590:	addq.l #4,sp
    6592:	move.l d0,4(a2)
	currentEvents -> rightMouseFunction		= get2bytes (fp);
    6596:	movea.l 1c3fa <currentEvents>,a2
    659c:	move.l 8(sp),-(sp)
    65a0:	jsr 6bc <get2bytes>
    65a6:	addq.l #4,sp
    65a8:	move.l d0,8(a2)
	currentEvents -> rightMouseUpFunction	= get2bytes (fp);
    65ac:	movea.l 1c3fa <currentEvents>,a2
    65b2:	move.l 8(sp),-(sp)
    65b6:	jsr 6bc <get2bytes>
    65bc:	addq.l #4,sp
    65be:	move.l d0,12(a2)
	currentEvents -> moveMouseFunction		= get2bytes (fp);
    65c2:	movea.l 1c3fa <currentEvents>,a2
    65c8:	move.l 8(sp),-(sp)
    65cc:	jsr 6bc <get2bytes>
    65d2:	addq.l #4,sp
    65d4:	move.l d0,16(a2)
	currentEvents -> focusFunction			= get2bytes (fp);
    65d8:	movea.l 1c3fa <currentEvents>,a2
    65de:	move.l 8(sp),-(sp)
    65e2:	jsr 6bc <get2bytes>
    65e8:	addq.l #4,sp
    65ea:	move.l d0,20(a2)
	currentEvents -> spaceFunction			= get2bytes (fp);
    65ee:	movea.l 1c3fa <currentEvents>,a2
    65f4:	move.l 8(sp),-(sp)
    65f8:	jsr 6bc <get2bytes>
    65fe:	addq.l #4,sp
    6600:	move.l d0,24(a2)
}
    6604:	nop
    6606:	movea.l (sp)+,a2
    6608:	rts

0000660a <openAndVerify>:

BPTR openAndVerify (char * filename, char extra1, char extra2, const char * er, int *fileVersion) {
    660a:	       lea -312(sp),sp
    660e:	       movem.l d2-d3/a6,-(sp)
    6612:	       move.l 332(sp),d1
    6616:	       move.l 336(sp),d0
    661a:	       move.b d1,d1
    661c:	       move.b d1,16(sp)
    6620:	       move.b d0,d0
    6622:	       move.b d0,14(sp)
	BPTR fp = Open(filename,MODE_OLDFILE);
    6626:	       move.l 328(sp),318(sp)
    662c:	       move.l #1005,314(sp)
    6634:	       move.l 1ca8a <DOSBase>,d0
    663a:	       movea.l d0,a6
    663c:	       move.l 318(sp),d1
    6640:	       move.l 314(sp),d2
    6644:	       jsr -30(a6)
    6648:	       move.l d0,310(sp)
    664c:	       move.l 310(sp),d0
    6650:	       move.l d0,306(sp)

	if (! fp) {
    6654:	   /-- bne.s 66b0 <openAndVerify+0xa6>
		Write(Output(), (APTR)"openAndVerify: Can't open file\n", 31);
    6656:	   |   move.l 1ca8a <DOSBase>,d0
    665c:	   |   movea.l d0,a6
    665e:	   |   jsr -60(a6)
    6662:	   |   move.l d0,154(sp)
    6666:	   |   move.l 154(sp),d0
    666a:	   |   move.l d0,150(sp)
    666e:	   |   move.l #101377,146(sp)
    6676:	   |   moveq #31,d0
    6678:	   |   move.l d0,142(sp)
    667c:	   |   move.l 1ca8a <DOSBase>,d0
    6682:	   |   movea.l d0,a6
    6684:	   |   move.l 150(sp),d1
    6688:	   |   move.l 146(sp),d2
    668c:	   |   move.l 142(sp),d3
    6690:	   |   jsr -48(a6)
    6694:	   |   move.l d0,138(sp)
		KPrintF("openAndVerify: Can't open file", filename);
    6698:	   |   move.l 328(sp),-(sp)
    669c:	   |   pea 18c21 <PutChar+0xdf1>
    66a2:	   |   jsr 17366 <KPrintF>
    66a8:	   |   addq.l #8,sp
		return NULL;
    66aa:	   |   moveq #0,d0
    66ac:	/--|-- bra.w 6970 <openAndVerify+0x366>
	}
	BOOL headerBad = FALSE;
    66b0:	|  \-> clr.w 322(sp)
	if (FGetC (fp) != 'S') headerBad = TRUE;
    66b4:	|      move.l 306(sp),302(sp)
    66ba:	|      move.l 1ca8a <DOSBase>,d0
    66c0:	|      movea.l d0,a6
    66c2:	|      move.l 302(sp),d1
    66c6:	|      jsr -306(a6)
    66ca:	|      move.l d0,298(sp)
    66ce:	|      move.l 298(sp),d0
    66d2:	|      moveq #83,d1
    66d4:	|      cmp.l d0,d1
    66d6:	|  /-- beq.s 66de <openAndVerify+0xd4>
    66d8:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'L') headerBad = TRUE;
    66de:	|  \-> move.l 306(sp),294(sp)
    66e4:	|      move.l 1ca8a <DOSBase>,d0
    66ea:	|      movea.l d0,a6
    66ec:	|      move.l 294(sp),d1
    66f0:	|      jsr -306(a6)
    66f4:	|      move.l d0,290(sp)
    66f8:	|      move.l 290(sp),d0
    66fc:	|      moveq #76,d1
    66fe:	|      cmp.l d0,d1
    6700:	|  /-- beq.s 6708 <openAndVerify+0xfe>
    6702:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'U') headerBad = TRUE;
    6708:	|  \-> move.l 306(sp),286(sp)
    670e:	|      move.l 1ca8a <DOSBase>,d0
    6714:	|      movea.l d0,a6
    6716:	|      move.l 286(sp),d1
    671a:	|      jsr -306(a6)
    671e:	|      move.l d0,282(sp)
    6722:	|      move.l 282(sp),d0
    6726:	|      moveq #85,d1
    6728:	|      cmp.l d0,d1
    672a:	|  /-- beq.s 6732 <openAndVerify+0x128>
    672c:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'D') headerBad = TRUE;
    6732:	|  \-> move.l 306(sp),278(sp)
    6738:	|      move.l 1ca8a <DOSBase>,d0
    673e:	|      movea.l d0,a6
    6740:	|      move.l 278(sp),d1
    6744:	|      jsr -306(a6)
    6748:	|      move.l d0,274(sp)
    674c:	|      move.l 274(sp),d0
    6750:	|      moveq #68,d1
    6752:	|      cmp.l d0,d1
    6754:	|  /-- beq.s 675c <openAndVerify+0x152>
    6756:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != extra1) headerBad = TRUE;
    675c:	|  \-> move.l 306(sp),270(sp)
    6762:	|      move.l 1ca8a <DOSBase>,d0
    6768:	|      movea.l d0,a6
    676a:	|      move.l 270(sp),d1
    676e:	|      jsr -306(a6)
    6772:	|      move.l d0,266(sp)
    6776:	|      move.l 266(sp),d1
    677a:	|      move.b 16(sp),d0
    677e:	|      ext.w d0
    6780:	|      movea.w d0,a0
    6782:	|      cmpa.l d1,a0
    6784:	|  /-- beq.s 678c <openAndVerify+0x182>
    6786:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != extra2) headerBad = TRUE;
    678c:	|  \-> move.l 306(sp),262(sp)
    6792:	|      move.l 1ca8a <DOSBase>,d0
    6798:	|      movea.l d0,a6
    679a:	|      move.l 262(sp),d1
    679e:	|      jsr -306(a6)
    67a2:	|      move.l d0,258(sp)
    67a6:	|      move.l 258(sp),d1
    67aa:	|      move.b 14(sp),d0
    67ae:	|      ext.w d0
    67b0:	|      movea.w d0,a0
    67b2:	|      cmpa.l d1,a0
    67b4:	|  /-- beq.s 67bc <openAndVerify+0x1b2>
    67b6:	|  |   move.w #1,322(sp)
	if (headerBad) {
    67bc:	|  \-> tst.w 322(sp)
    67c0:	|  /-- beq.s 6818 <openAndVerify+0x20e>
		Write(Output(), (APTR)"openAndVerify: Bad Header\n", 31);
    67c2:	|  |   move.l 1ca8a <DOSBase>,d0
    67c8:	|  |   movea.l d0,a6
    67ca:	|  |   jsr -60(a6)
    67ce:	|  |   move.l d0,174(sp)
    67d2:	|  |   move.l 174(sp),d0
    67d6:	|  |   move.l d0,170(sp)
    67da:	|  |   move.l #101440,166(sp)
    67e2:	|  |   moveq #31,d0
    67e4:	|  |   move.l d0,162(sp)
    67e8:	|  |   move.l 1ca8a <DOSBase>,d0
    67ee:	|  |   movea.l d0,a6
    67f0:	|  |   move.l 170(sp),d1
    67f4:	|  |   move.l 166(sp),d2
    67f8:	|  |   move.l 162(sp),d3
    67fc:	|  |   jsr -48(a6)
    6800:	|  |   move.l d0,158(sp)
		KPrintF("openAndVerify: Bad Header\n");
    6804:	|  |   pea 18c40 <PutChar+0xe10>
    680a:	|  |   jsr 17366 <KPrintF>
    6810:	|  |   addq.l #4,sp
		return NULL;
    6812:	|  |   moveq #0,d0
    6814:	+--|-- bra.w 6970 <openAndVerify+0x366>
	}
	FGetC (fp);
    6818:	|  \-> move.l 306(sp),254(sp)
    681e:	|      move.l 1ca8a <DOSBase>,d0
    6824:	|      movea.l d0,a6
    6826:	|      move.l 254(sp),d1
    682a:	|      jsr -306(a6)
    682e:	|      move.l d0,250(sp)
	while (FGetC(fp)) {;}
    6832:	|      nop
    6834:	|  /-> move.l 306(sp),246(sp)
    683a:	|  |   move.l 1ca8a <DOSBase>,d0
    6840:	|  |   movea.l d0,a6
    6842:	|  |   move.l 246(sp),d1
    6846:	|  |   jsr -306(a6)
    684a:	|  |   move.l d0,242(sp)
    684e:	|  |   move.l 242(sp),d0
    6852:	|  \-- bne.s 6834 <openAndVerify+0x22a>

	int majVersion = FGetC (fp);
    6854:	|      move.l 306(sp),238(sp)
    685a:	|      move.l 1ca8a <DOSBase>,d0
    6860:	|      movea.l d0,a6
    6862:	|      move.l 238(sp),d1
    6866:	|      jsr -306(a6)
    686a:	|      move.l d0,234(sp)
    686e:	|      move.l 234(sp),d0
    6872:	|      move.l d0,230(sp)
	int minVersion = FGetC (fp);
    6876:	|      move.l 306(sp),226(sp)
    687c:	|      move.l 1ca8a <DOSBase>,d0
    6882:	|      movea.l d0,a6
    6884:	|      move.l 226(sp),d1
    6888:	|      jsr -306(a6)
    688c:	|      move.l d0,222(sp)
    6890:	|      move.l 222(sp),d0
    6894:	|      move.l d0,218(sp)
	*fileVersion = majVersion * 256 + minVersion;
    6898:	|      move.l 230(sp),d0
    689c:	|      lsl.l #8,d0
    689e:	|      add.l 218(sp),d0
    68a2:	|      movea.l 344(sp),a0
    68a6:	|      move.l d0,(a0)

	char txtVer[120];

	if (*fileVersion > WHOLE_VERSION) {
    68a8:	|      movea.l 344(sp),a0
    68ac:	|      move.l (a0),d0
    68ae:	|      cmpi.l #514,d0
    68b4:	|  /-- ble.s 690a <openAndVerify+0x300>
		//sprintf (txtVer, ERROR_VERSION_TOO_LOW_2, majVersion, minVersion);
		Write(Output(), (APTR)ERROR_VERSION_TOO_LOW_1, 100);
    68b6:	|  |   move.l 1ca8a <DOSBase>,d0
    68bc:	|  |   movea.l d0,a6
    68be:	|  |   jsr -60(a6)
    68c2:	|  |   move.l d0,194(sp)
    68c6:	|  |   move.l 194(sp),d0
    68ca:	|  |   move.l d0,190(sp)
    68ce:	|  |   move.l #101467,186(sp)
    68d6:	|  |   moveq #100,d1
    68d8:	|  |   move.l d1,182(sp)
    68dc:	|  |   move.l 1ca8a <DOSBase>,d0
    68e2:	|  |   movea.l d0,a6
    68e4:	|  |   move.l 190(sp),d1
    68e8:	|  |   move.l 186(sp),d2
    68ec:	|  |   move.l 182(sp),d3
    68f0:	|  |   jsr -48(a6)
    68f4:	|  |   move.l d0,178(sp)
		KPrintF(ERROR_VERSION_TOO_LOW_1);
    68f8:	|  |   pea 18c5b <PutChar+0xe2b>
    68fe:	|  |   jsr 17366 <KPrintF>
    6904:	|  |   addq.l #4,sp
		return NULL;
    6906:	|  |   moveq #0,d0
    6908:	+--|-- bra.s 6970 <openAndVerify+0x366>
	} else if (*fileVersion < MINIM_VERSION) {
    690a:	|  \-> movea.l 344(sp),a0
    690e:	|      move.l (a0),d0
    6910:	|      cmpi.l #257,d0
    6916:	|  /-- bgt.s 696c <openAndVerify+0x362>
		Write(Output(), (APTR)ERROR_VERSION_TOO_HIGH_1, 100);
    6918:	|  |   move.l 1ca8a <DOSBase>,d0
    691e:	|  |   movea.l d0,a6
    6920:	|  |   jsr -60(a6)
    6924:	|  |   move.l d0,214(sp)
    6928:	|  |   move.l 214(sp),d0
    692c:	|  |   move.l d0,210(sp)
    6930:	|  |   move.l #101536,206(sp)
    6938:	|  |   moveq #100,d0
    693a:	|  |   move.l d0,202(sp)
    693e:	|  |   move.l 1ca8a <DOSBase>,d0
    6944:	|  |   movea.l d0,a6
    6946:	|  |   move.l 210(sp),d1
    694a:	|  |   move.l 206(sp),d2
    694e:	|  |   move.l 202(sp),d3
    6952:	|  |   jsr -48(a6)
    6956:	|  |   move.l d0,198(sp)
		KPrintF(ERROR_VERSION_TOO_HIGH_1);
    695a:	|  |   pea 18ca0 <PutChar+0xe70>
    6960:	|  |   jsr 17366 <KPrintF>
    6966:	|  |   addq.l #4,sp
		return NULL;
    6968:	|  |   moveq #0,d0
    696a:	+--|-- bra.s 6970 <openAndVerify+0x366>
	}
	return fp;
    696c:	|  \-> move.l 306(sp),d0
}
    6970:	\----> movem.l (sp)+,d2-d3/a6
    6974:	       lea 312(sp),sp
    6978:	       rts

0000697a <pauseFunction>:

void pauseFunction (struct loadedFunction * fun) {
    697a:	          subq.l #4,sp
	struct loadedFunction * * huntAndDestroy = & allRunningFunctions;
    697c:	          move.l #117274,(sp)
	while (* huntAndDestroy) {
    6982:	   /----- bra.s 69ae <pauseFunction+0x34>
		if (fun == * huntAndDestroy) {
    6984:	/--|----> movea.l (sp),a0
    6986:	|  |      move.l (a0),d0
    6988:	|  |      cmp.l 8(sp),d0
    698c:	|  |  /-- bne.s 69a4 <pauseFunction+0x2a>
			(* huntAndDestroy) = (* huntAndDestroy) -> next;
    698e:	|  |  |   movea.l (sp),a0
    6990:	|  |  |   movea.l (a0),a0
    6992:	|  |  |   move.l 44(a0),d0
    6996:	|  |  |   movea.l (sp),a0
    6998:	|  |  |   move.l d0,(a0)
			fun->next = NULL;
    699a:	|  |  |   movea.l 8(sp),a0
    699e:	|  |  |   clr.l 44(a0)
    69a2:	|  +--|-- bra.s 69ae <pauseFunction+0x34>
		} else {
			huntAndDestroy = & (* huntAndDestroy) -> next;
    69a4:	|  |  \-> movea.l (sp),a0
    69a6:	|  |      move.l (a0),d0
    69a8:	|  |      moveq #44,d1
    69aa:	|  |      add.l d0,d1
    69ac:	|  |      move.l d1,(sp)
	while (* huntAndDestroy) {
    69ae:	|  \----> movea.l (sp),a0
    69b0:	|         move.l (a0),d0
    69b2:	\-------- bne.s 6984 <pauseFunction+0xa>
		}
	}
}
    69b4:	          nop
    69b6:	          nop
    69b8:	          addq.l #4,sp
    69ba:	          rts

000069bc <restartFunction>:

void restartFunction (struct loadedFunction * fun) {
	fun -> next = allRunningFunctions;
    69bc:	move.l 1ca1a <allRunningFunctions>,d0
    69c2:	movea.l 4(sp),a0
    69c6:	move.l d0,44(a0)
	allRunningFunctions = fun;
    69ca:	move.l 4(sp),1ca1a <allRunningFunctions>
}
    69d2:	nop
    69d4:	rts

000069d6 <runSludge>:

BOOL runSludge () {
    69d6:	                   lea -12(sp),sp
    69da:	                   move.l a6,-(sp)
	
	struct loadedFunction * thisFunction = allRunningFunctions;
    69dc:	                   move.l 1ca1a <allRunningFunctions>,12(sp)
	struct loadedFunction * nextFunction;

	while (thisFunction) {
    69e4:	      /----------- bra.s 6a60 <runSludge+0x8a>
		nextFunction = thisFunction -> next;
    69e6:	   /--|----------> movea.l 12(sp),a0
    69ea:	   |  |            move.l 44(a0),4(sp)

		if (! thisFunction -> freezerLevel) {
    69f0:	   |  |            movea.l 12(sp),a0
    69f4:	   |  |            move.b 56(a0),d0
    69f8:	   |  |  /-------- bne.s 6a5a <runSludge+0x84>
			if (thisFunction -> timeLeft) {
    69fa:	   |  |  |         movea.l 12(sp),a0
    69fe:	   |  |  |         move.l 12(a0),d0
    6a02:	   |  |  |  /----- beq.s 6a2c <runSludge+0x56>
				if (thisFunction -> timeLeft < 0) {				
    6a04:	   |  |  |  |      movea.l 12(sp),a0
    6a08:	   |  |  |  |      move.l 12(a0),d0
    6a0c:	   |  |  |  |  /-- bpl.s 6a18 <runSludge+0x42>
					thisFunction -> timeLeft = 0;
    6a0e:	   |  |  |  |  |   movea.l 12(sp),a0
    6a12:	   |  |  |  |  |   clr.l 12(a0)
    6a16:	   |  |  +--|--|-- bra.s 6a5a <runSludge+0x84>
				} else if (! -- (thisFunction -> timeLeft)) {
    6a18:	   |  |  |  |  \-> movea.l 12(sp),a0
    6a1c:	   |  |  |  |      move.l 12(a0),d0
    6a20:	   |  |  |  |      subq.l #1,d0
    6a22:	   |  |  |  |      movea.l 12(sp),a0
    6a26:	   |  |  |  |      move.l d0,12(a0)
    6a2a:	   |  |  +--|----- bra.s 6a5a <runSludge+0x84>
				}
			} else {
				if (thisFunction -> isSpeech) {
    6a2c:	   |  |  |  \----> movea.l 12(sp),a0
    6a30:	   |  |  |         move.w 50(a0),d0
    6a34:	   |  |  |     /-- beq.s 6a44 <runSludge+0x6e>
					thisFunction -> isSpeech = FALSE;
    6a36:	   |  |  |     |   movea.l 12(sp),a0
    6a3a:	   |  |  |     |   clr.w 50(a0)
					killAllSpeech ();
    6a3e:	   |  |  |     |   jsr 8076 <killAllSpeech>
				}
				if (! continueFunction (thisFunction))
    6a44:	   |  |  |     \-> move.l 12(sp),-(sp)
    6a48:	   |  |  |         jsr 49a4 <continueFunction>
    6a4e:	   |  |  |         addq.l #4,sp
    6a50:	   |  |  |         tst.w d0
    6a52:	   |  |  +-------- bne.s 6a5a <runSludge+0x84>
					return FALSE;
    6a54:	   |  |  |         clr.w d0
    6a56:	/--|--|--|-------- bra.w 6ae6 <runSludge+0x110>
			}
		}

		thisFunction = nextFunction;
    6a5a:	|  |  |  \-------> move.l 4(sp),12(sp)
	while (thisFunction) {
    6a60:	|  |  \----------> tst.l 12(sp)
    6a64:	|  \-------------- bne.s 69e6 <runSludge+0x10>
	}

	if (loadNow) {
    6a66:	|                  move.l 1ca4e <loadNow>,d0
    6a6c:	|        /-------- beq.s 6ae4 <runSludge+0x10e>
		if (loadNow[0] == ':') {
    6a6e:	|        |         movea.l 1ca4e <loadNow>,a0
    6a74:	|        |         move.b (a0),d0
    6a76:	|        |         cmpi.b #58,d0
    6a7a:	|        |  /----- bne.s 6aae <runSludge+0xd8>
			saveGame (loadNow + 1);
    6a7c:	|        |  |      move.l 1ca4e <loadNow>,d0
    6a82:	|        |  |      addq.l #1,d0
    6a84:	|        |  |      move.l d0,-(sp)
    6a86:	|        |  |      jsr c892 <saveGame>
    6a8c:	|        |  |      addq.l #4,sp
			setVariable (&saverFunc->reg, SVT_INT, 1);
    6a8e:	|        |  |      movea.l 1cb4c <saverFunc>,a0
    6a94:	|        |  |      lea 28(a0),a0
    6a98:	|        |  |      pea 1 <_start+0x1>
    6a9c:	|        |  |      pea 1 <_start+0x1>
    6aa0:	|        |  |      move.l a0,-(sp)
    6aa2:	|        |  |      jsr 151f8 <setVariable>
    6aa8:	|        |  |      lea 12(sp),sp
    6aac:	|        |  |  /-- bra.s 6ac6 <runSludge+0xf0>
		} else {
			if (! loadGame (loadNow)) return FALSE;
    6aae:	|        |  \--|-> move.l 1ca4e <loadNow>,d0
    6ab4:	|        |     |   move.l d0,-(sp)
    6ab6:	|        |     |   jsr c3da <loadGame>
    6abc:	|        |     |   addq.l #4,sp
    6abe:	|        |     |   tst.w d0
    6ac0:	|        |     +-- bne.s 6ac6 <runSludge+0xf0>
    6ac2:	|        |     |   clr.w d0
    6ac4:	+--------|-----|-- bra.s 6ae6 <runSludge+0x110>
		}
		FreeVec(loadNow);
    6ac6:	|        |     \-> move.l 1ca4e <loadNow>,8(sp)
    6ace:	|        |         move.l 1ca82 <SysBase>,d0
    6ad4:	|        |         movea.l d0,a6
    6ad6:	|        |         movea.l 8(sp),a1
    6ada:	|        |         jsr -690(a6)
		loadNow = NULL;
    6ade:	|        |         clr.l 1ca4e <loadNow>
	}

	return TRUE;
    6ae4:	|        \-------> moveq #1,d0
}
    6ae6:	\----------------> movea.l (sp)+,a6
    6ae8:	                   lea 12(sp),sp
    6aec:	                   rts

00006aee <saveHandlers>:

void saveHandlers (BPTR fp) {
	put2bytes (currentEvents -> leftMouseFunction,		fp);
    6aee:	movea.l 1c3fa <currentEvents>,a0
    6af4:	move.l (a0),d0
    6af6:	move.l 4(sp),-(sp)
    6afa:	move.l d0,-(sp)
    6afc:	jsr 8d0 <put2bytes>
    6b02:	addq.l #8,sp
	put2bytes (currentEvents -> leftMouseUpFunction,	fp);
    6b04:	movea.l 1c3fa <currentEvents>,a0
    6b0a:	move.l 4(a0),d0
    6b0e:	move.l 4(sp),-(sp)
    6b12:	move.l d0,-(sp)
    6b14:	jsr 8d0 <put2bytes>
    6b1a:	addq.l #8,sp
	put2bytes (currentEvents -> rightMouseFunction,		fp);
    6b1c:	movea.l 1c3fa <currentEvents>,a0
    6b22:	move.l 8(a0),d0
    6b26:	move.l 4(sp),-(sp)
    6b2a:	move.l d0,-(sp)
    6b2c:	jsr 8d0 <put2bytes>
    6b32:	addq.l #8,sp
	put2bytes (currentEvents -> rightMouseUpFunction,	fp);
    6b34:	movea.l 1c3fa <currentEvents>,a0
    6b3a:	move.l 12(a0),d0
    6b3e:	move.l 4(sp),-(sp)
    6b42:	move.l d0,-(sp)
    6b44:	jsr 8d0 <put2bytes>
    6b4a:	addq.l #8,sp
	put2bytes (currentEvents -> moveMouseFunction,		fp);
    6b4c:	movea.l 1c3fa <currentEvents>,a0
    6b52:	move.l 16(a0),d0
    6b56:	move.l 4(sp),-(sp)
    6b5a:	move.l d0,-(sp)
    6b5c:	jsr 8d0 <put2bytes>
    6b62:	addq.l #8,sp
	put2bytes (currentEvents -> focusFunction,			fp);
    6b64:	movea.l 1c3fa <currentEvents>,a0
    6b6a:	move.l 20(a0),d0
    6b6e:	move.l 4(sp),-(sp)
    6b72:	move.l d0,-(sp)
    6b74:	jsr 8d0 <put2bytes>
    6b7a:	addq.l #8,sp
	put2bytes (currentEvents -> spaceFunction,			fp);
    6b7c:	movea.l 1c3fa <currentEvents>,a0
    6b82:	move.l 24(a0),d0
    6b86:	move.l 4(sp),-(sp)
    6b8a:	move.l d0,-(sp)
    6b8c:	jsr 8d0 <put2bytes>
    6b92:	addq.l #8,sp
}
    6b94:	nop
    6b96:	rts

00006b98 <sludgeDisplay>:

void sludgeDisplay () {					
    6b98:	subq.l #4,sp
  	volatile struct Custom *custom = (struct Custom*)0xdff000;
    6b9a:	move.l #14675968,(sp)
	displayCursor();
    6ba0:	jsr c58 <displayCursor>
	CstDrawBackdrop();
    6ba6:	jsr 14c8 <CstDrawBackdrop>
	CstRestoreScreen();
    6bac:	jsr 2c38 <CstRestoreScreen>
	drawPeople();
    6bb2:	jsr a176 <drawPeople>
	CstSwapBuffer();
    6bb8:	jsr 396e <CstSwapBuffer>
}
    6bbe:	nop
    6bc0:	addq.l #4,sp
    6bc2:	rts

00006bc4 <stackSetByIndex>:

BOOL stackSetByIndex (struct variableStack * vS, unsigned int theIndex, const struct variable * va) {
	while (theIndex--) {
    6bc4:	      /-- bra.s 6be4 <stackSetByIndex+0x20>
		vS = vS->next;
    6bc6:	/-----|-> movea.l 4(sp),a0
    6bca:	|     |   move.l 8(a0),4(sp)
		if (!vS) {
    6bd0:	|     +-- bne.s 6be4 <stackSetByIndex+0x20>
			KPrintF("Index past end of stack.");
    6bd2:	|     |   pea 18ce7 <PutChar+0xeb7>
    6bd8:	|     |   jsr 17366 <KPrintF>
    6bde:	|     |   addq.l #4,sp
			return FALSE;
    6be0:	|     |   clr.w d0
    6be2:	|  /--|-- bra.s 6c06 <stackSetByIndex+0x42>
	while (theIndex--) {
    6be4:	|  |  \-> move.l 8(sp),d0
    6be8:	|  |      move.l d0,d1
    6bea:	|  |      subq.l #1,d1
    6bec:	|  |      move.l d1,8(sp)
    6bf0:	|  |      tst.l d0
    6bf2:	\--|----- bne.s 6bc6 <stackSetByIndex+0x2>
		}
	}
	return copyVariable(va, &(vS->thisVar));
    6bf4:	   |      move.l 4(sp),d0
    6bf8:	   |      move.l d0,-(sp)
    6bfa:	   |      move.l 16(sp),-(sp)
    6bfe:	   |      jsr 14dc0 <copyVariable>
    6c04:	   |      addq.l #8,sp
}
    6c06:	   \----> rts

00006c08 <startNewFunctionNum>:

int startNewFunctionNum (unsigned int funcNum, unsigned int numParamsExpected, struct loadedFunction * calledBy, struct variableStack ** vStack, BOOL returnSommet) {
    6c08:	             lea -24(sp),sp
    6c0c:	             move.l a6,-(sp)
    6c0e:	             move.l 48(sp),d0
    6c12:	             move.w d0,d0
    6c14:	             move.w d0,6(sp)
		
	struct loadedFunction * newFunc = AllocVec(sizeof(struct loadedFunction),MEMF_ANY);
    6c18:	             moveq #58,d0
    6c1a:	             move.l d0,24(sp)
    6c1e:	             clr.l 20(sp)
    6c22:	             move.l 1ca82 <SysBase>,d0
    6c28:	             movea.l d0,a6
    6c2a:	             move.l 24(sp),d0
    6c2e:	             move.l 20(sp),d1
    6c32:	             jsr -684(a6)
    6c36:	             move.l d0,16(sp)
    6c3a:	             move.l 16(sp),d0
    6c3e:	             move.l d0,12(sp)
	if(!newFunc) {
    6c42:	         /-- bne.s 6c58 <startNewFunctionNum+0x50>
		KPrintF("startNewFunction: Cannot allocate memory");
    6c44:	         |   pea 18d00 <PutChar+0xed0>
    6c4a:	         |   jsr 17366 <KPrintF>
    6c50:	         |   addq.l #4,sp
		return 0;
    6c52:	         |   moveq #0,d0
    6c54:	/--------|-- bra.w 6d6e <startNewFunctionNum+0x166>
	}
	newFunc -> originalNumber = funcNum;
    6c58:	|        \-> move.l 32(sp),d0
    6c5c:	|            movea.l 12(sp),a0
    6c60:	|            move.l d0,(a0)

	loadFunctionCode (newFunc);
    6c62:	|            move.l 12(sp),-(sp)
    6c66:	|            jsr 6378 <loadFunctionCode>
    6c6c:	|            addq.l #4,sp

	if (newFunc -> numArgs != (int)numParamsExpected) {
    6c6e:	|            movea.l 12(sp),a0
    6c72:	|            move.l 16(a0),d1
    6c76:	|            move.l 36(sp),d0
    6c7a:	|            cmp.l d1,d0
    6c7c:	|        /-- beq.s 6c92 <startNewFunctionNum+0x8a>
		KPrintF("Wrong number of parameters!");
    6c7e:	|        |   pea 18d29 <PutChar+0xef9>
    6c84:	|        |   jsr 17366 <KPrintF>
    6c8a:	|        |   addq.l #4,sp
		return NULL; 
    6c8c:	|        |   moveq #0,d0
    6c8e:	+--------|-- bra.w 6d6e <startNewFunctionNum+0x166>
	}
	if (newFunc -> numArgs > newFunc -> numLocals)  {
    6c92:	|        \-> movea.l 12(sp),a0
    6c96:	|            move.l 16(a0),d1
    6c9a:	|            movea.l 12(sp),a0
    6c9e:	|            move.l 8(a0),d0
    6ca2:	|            cmp.l d1,d0
    6ca4:	|  /-------- bge.s 6d0e <startNewFunctionNum+0x106>
		KPrintF ("More arguments than local variable space!");
    6ca6:	|  |         pea 18d45 <PutChar+0xf15>
    6cac:	|  |         jsr 17366 <KPrintF>
    6cb2:	|  |         addq.l #4,sp
		return NULL; 
    6cb4:	|  |         moveq #0,d0
    6cb6:	+--|-------- bra.w 6d6e <startNewFunctionNum+0x166>
	}
	
	// Now, lets copy the parameters from the calling function's stack...

	while (numParamsExpected) {
		struct variableStack *vStacksimpleptr = *vStack;
    6cba:	|  |  /----> movea.l 44(sp),a0
    6cbe:	|  |  |      move.l (a0),8(sp)
		numParamsExpected --;
    6cc2:	|  |  |      subq.l #1,36(sp)
		if (*vStack == NULL) {
    6cc6:	|  |  |      movea.l 44(sp),a0
    6cca:	|  |  |      move.l (a0),d0
    6ccc:	|  |  |  /-- bne.s 6ce2 <startNewFunctionNum+0xda>
			KPrintF("Corrupted file! The stack's empty and there were still parameters expected");
    6cce:	|  |  |  |   pea 18d6f <PutChar+0xf3f>
    6cd4:	|  |  |  |   jsr 17366 <KPrintF>
    6cda:	|  |  |  |   addq.l #4,sp
			return NULL;
    6cdc:	|  |  |  |   moveq #0,d0
    6cde:	+--|--|--|-- bra.w 6d6e <startNewFunctionNum+0x166>
		}
		copyVariable (&vStacksimpleptr -> thisVar, &newFunc->localVars[numParamsExpected]);
    6ce2:	|  |  |  \-> movea.l 12(sp),a0
    6ce6:	|  |  |      move.l 20(a0),d1
    6cea:	|  |  |      move.l 36(sp),d0
    6cee:	|  |  |      lsl.l #3,d0
    6cf0:	|  |  |      add.l d0,d1
    6cf2:	|  |  |      move.l 8(sp),d0
    6cf6:	|  |  |      move.l d1,-(sp)
    6cf8:	|  |  |      move.l d0,-(sp)
    6cfa:	|  |  |      jsr 14dc0 <copyVariable>
    6d00:	|  |  |      addq.l #8,sp
		trimStack ( vStack);
    6d02:	|  |  |      move.l 44(sp),-(sp)
    6d06:	|  |  |      jsr 1528a <trimStack>
    6d0c:	|  |  |      addq.l #4,sp
	while (numParamsExpected) {
    6d0e:	|  \--|----> tst.l 36(sp)
    6d12:	|     \----- bne.s 6cba <startNewFunctionNum+0xb2>
	}

	newFunc -> cancelMe = FALSE;
    6d14:	|            movea.l 12(sp),a0
    6d18:	|            clr.w 54(a0)
	newFunc -> timeLeft = 0;
    6d1c:	|            movea.l 12(sp),a0
    6d20:	|            clr.l 12(a0)
	newFunc -> returnSomething = returnSommet;
    6d24:	|            movea.l 12(sp),a0
    6d28:	|            move.w 6(sp),48(a0)
	newFunc -> calledBy = calledBy;
    6d2e:	|            movea.l 12(sp),a0
    6d32:	|            move.l 40(sp),40(a0)
	newFunc -> stack = NULL;
    6d38:	|            movea.l 12(sp),a0
    6d3c:	|            clr.l 24(a0)
	newFunc -> freezerLevel = 0;
    6d40:	|            movea.l 12(sp),a0
    6d44:	|            clr.b 56(a0)
	newFunc -> runThisLine = 0;
    6d48:	|            movea.l 12(sp),a0
    6d4c:	|            clr.l 36(a0)
	newFunc -> isSpeech = 0;
    6d50:	|            movea.l 12(sp),a0
    6d54:	|            clr.w 50(a0)
	newFunc -> reg.varType = SVT_NULL;
    6d58:	|            movea.l 12(sp),a0
    6d5c:	|            clr.l 28(a0)

	restartFunction (newFunc);
    6d60:	|            move.l 12(sp),-(sp)
    6d64:	|            jsr 69bc <restartFunction>
    6d6a:	|            addq.l #4,sp
	return 1;
    6d6c:	|            moveq #1,d0
}
    6d6e:	\----------> movea.l (sp)+,a6
    6d70:	             lea 24(sp),sp
    6d74:	             rts

00006d76 <unfreezeSubs>:

void unfreezeSubs () {
    6d76:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    6d78:	          move.l 1ca1a <allRunningFunctions>,(sp)

	while (thisFunction) {
    6d7e:	   /----- bra.s 6d9c <unfreezeSubs+0x26>
		if (thisFunction -> freezerLevel) thisFunction -> freezerLevel--;
    6d80:	/--|----> movea.l (sp),a0
    6d82:	|  |      move.b 56(a0),d0
    6d86:	|  |  /-- beq.s 6d96 <unfreezeSubs+0x20>
    6d88:	|  |  |   movea.l (sp),a0
    6d8a:	|  |  |   move.b 56(a0),d0
    6d8e:	|  |  |   subq.b #1,d0
    6d90:	|  |  |   movea.l (sp),a0
    6d92:	|  |  |   move.b d0,56(a0)
		thisFunction = thisFunction -> next;
    6d96:	|  |  \-> movea.l (sp),a0
    6d98:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    6d9c:	|  \----> tst.l (sp)
    6d9e:	\-------- bne.s 6d80 <unfreezeSubs+0xa>
	}
}
    6da0:	          nop
    6da2:	          nop
    6da4:	          addq.l #4,sp
    6da6:	          rts

00006da8 <finishAccess>:
char * convertString(char * s) {
	return NULL;
}

void finishAccess () {
	sliceBusy = FALSE;
    6da8:	clr.w 1c406 <sliceBusy>
}
    6dae:	nop
    6db0:	rts

00006db2 <getNumberedString>:

char * getNumberedString (int value) {
    6db2:	       lea -56(sp),sp
    6db6:	       movem.l d2-d3/a6,-(sp)

	if (sliceBusy) {
    6dba:	       move.w 1c406 <sliceBusy>,d0
    6dc0:	   /-- beq.s 6e0a <getNumberedString+0x58>
		Write(Output(), (APTR)"getNumberedString: Can't read from data file. I'm already reading something\n", 76);        
    6dc2:	   |   move.l 1ca8a <DOSBase>,d0
    6dc8:	   |   movea.l d0,a6
    6dca:	   |   jsr -60(a6)
    6dce:	   |   move.l d0,28(sp)
    6dd2:	   |   move.l 28(sp),d0
    6dd6:	   |   move.l d0,24(sp)
    6dda:	   |   move.l #101818,20(sp)
    6de2:	   |   moveq #76,d0
    6de4:	   |   move.l d0,16(sp)
    6de8:	   |   move.l 1ca8a <DOSBase>,d0
    6dee:	   |   movea.l d0,a6
    6df0:	   |   move.l 24(sp),d1
    6df4:	   |   move.l 20(sp),d2
    6df8:	   |   move.l 16(sp),d3
    6dfc:	   |   jsr -48(a6)
    6e00:	   |   move.l d0,12(sp)
		return NULL;
    6e04:	   |   moveq #0,d0
    6e06:	/--|-- bra.w 6ea6 <getNumberedString+0xf4>
	}

	Seek(bigDataFile, (value << 2) + startOfTextIndex, OFFSET_BEGINNING);
    6e0a:	|  \-> move.l 1ca6a <bigDataFile>,64(sp)
    6e12:	|      move.l 72(sp),d0
    6e16:	|      add.l d0,d0
    6e18:	|      add.l d0,d0
    6e1a:	|      move.l d0,d1
    6e1c:	|      move.l 1ca76 <startOfTextIndex>,d0
    6e22:	|      add.l d1,d0
    6e24:	|      move.l d0,60(sp)
    6e28:	|      moveq #-1,d0
    6e2a:	|      move.l d0,56(sp)
    6e2e:	|      move.l 1ca8a <DOSBase>,d0
    6e34:	|      movea.l d0,a6
    6e36:	|      move.l 64(sp),d1
    6e3a:	|      move.l 60(sp),d2
    6e3e:	|      move.l 56(sp),d3
    6e42:	|      jsr -66(a6)
    6e46:	|      move.l d0,52(sp)
	value = get4bytes (bigDataFile);
    6e4a:	|      move.l 1ca6a <bigDataFile>,d0
    6e50:	|      move.l d0,-(sp)
    6e52:	|      jsr 718 <get4bytes>
    6e58:	|      addq.l #4,sp
    6e5a:	|      move.l d0,72(sp)
	Seek (bigDataFile, value, OFFSET_BEGINING);
    6e5e:	|      move.l 1ca6a <bigDataFile>,48(sp)
    6e66:	|      move.l 72(sp),44(sp)
    6e6c:	|      moveq #-1,d0
    6e6e:	|      move.l d0,40(sp)
    6e72:	|      move.l 1ca8a <DOSBase>,d0
    6e78:	|      movea.l d0,a6
    6e7a:	|      move.l 48(sp),d1
    6e7e:	|      move.l 44(sp),d2
    6e82:	|      move.l 40(sp),d3
    6e86:	|      jsr -66(a6)
    6e8a:	|      move.l d0,36(sp)

	char * s = readString (bigDataFile);    
    6e8e:	|      move.l 1ca6a <bigDataFile>,d0
    6e94:	|      move.l d0,-(sp)
    6e96:	|      jsr b02 <readString>
    6e9c:	|      addq.l #4,sp
    6e9e:	|      move.l d0,32(sp)
	
	return s;
    6ea2:	|      move.l 32(sp),d0
}
    6ea6:	\----> movem.l (sp)+,d2-d3/a6
    6eaa:	       lea 56(sp),sp
    6eae:	       rts

00006eb0 <openFileFromNum>:

unsigned int openFileFromNum (int num) {
    6eb0:	       lea -32(sp),sp
    6eb4:	       movem.l d2-d3/a6,-(sp)
//	FILE * dbug = fopen ("debuggy.txt", "at");

	if (sliceBusy) {
    6eb8:	       move.w 1c406 <sliceBusy>,d0
    6ebe:	   /-- beq.s 6eda <openFileFromNum+0x2a>
		KPrintF("Can't read from data file", "I'm already reading something");
    6ec0:	   |   pea 18e07 <PutChar+0xfd7>
    6ec6:	   |   pea 18e25 <PutChar+0xff5>
    6ecc:	   |   jsr 17366 <KPrintF>
    6ed2:	   |   addq.l #8,sp
		return 0;
    6ed4:	   |   moveq #0,d0
    6ed6:	/--|-- bra.w 6f6e <openFileFromNum+0xbe>
	}

	Seek( bigDataFile,  startOfDataIndex + (num << 2), OFFSET_BEGINING);	
    6eda:	|  \-> move.l 1ca6a <bigDataFile>,40(sp)
    6ee2:	|      move.l 48(sp),d0
    6ee6:	|      add.l d0,d0
    6ee8:	|      add.l d0,d0
    6eea:	|      move.l d0,d1
    6eec:	|      move.l 1ca72 <startOfDataIndex>,d0
    6ef2:	|      add.l d1,d0
    6ef4:	|      move.l d0,36(sp)
    6ef8:	|      moveq #-1,d0
    6efa:	|      move.l d0,32(sp)
    6efe:	|      move.l 1ca8a <DOSBase>,d0
    6f04:	|      movea.l d0,a6
    6f06:	|      move.l 40(sp),d1
    6f0a:	|      move.l 36(sp),d2
    6f0e:	|      move.l 32(sp),d3
    6f12:	|      jsr -66(a6)
    6f16:	|      move.l d0,28(sp)
	Seek( bigDataFile, get4bytes (bigDataFile), OFFSET_CURRENT);
    6f1a:	|      move.l 1ca6a <bigDataFile>,24(sp)
    6f22:	|      move.l 1ca6a <bigDataFile>,d0
    6f28:	|      move.l d0,-(sp)
    6f2a:	|      jsr 718 <get4bytes>
    6f30:	|      addq.l #4,sp
    6f32:	|      move.l d0,20(sp)
    6f36:	|      clr.l 16(sp)
    6f3a:	|      move.l 1ca8a <DOSBase>,d0
    6f40:	|      movea.l d0,a6
    6f42:	|      move.l 24(sp),d1
    6f46:	|      move.l 20(sp),d2
    6f4a:	|      move.l 16(sp),d3
    6f4e:	|      jsr -66(a6)
    6f52:	|      move.l d0,12(sp)
//	fprintf (dbug, "Jumping to %li (for data) \n", ftell (bigDataFile));
	sliceBusy = TRUE;
    6f56:	|      move.w #1,1c406 <sliceBusy>
//	fclose (dbug);

	return get4bytes (bigDataFile);
    6f5e:	|      move.l 1ca6a <bigDataFile>,d0
    6f64:	|      move.l d0,-(sp)
    6f66:	|      jsr 718 <get4bytes>
    6f6c:	|      addq.l #4,sp
}
    6f6e:	\----> movem.l (sp)+,d2-d3/a6
    6f72:	       lea 32(sp),sp
    6f76:	       rts

00006f78 <openObjectSlice>:

BOOL openObjectSlice (int num) {
    6f78:	       lea -32(sp),sp
    6f7c:	       movem.l d2-d3/a6,-(sp)
    // BPTR dbug = FOpen("debuggy.txt", MODE_NEWFILE);

    // FPrintf(dbug, "\nTrying to open object %i\n", num);

    if (sliceBusy) {
    6f80:	       move.w 1c406 <sliceBusy>,d0
    6f86:	   /-- beq.s 6fa2 <openObjectSlice+0x2a>
        KPrintF("Can't read from data file", "I'm already reading something");
    6f88:	   |   pea 18e07 <PutChar+0xfd7>
    6f8e:	   |   pea 18e25 <PutChar+0xff5>
    6f94:	   |   jsr 17366 <KPrintF>
    6f9a:	   |   addq.l #8,sp
        return FALSE;
    6f9c:	   |   clr.w d0
    6f9e:	/--|-- bra.w 702e <openObjectSlice+0xb6>
    }

    // FPrintf(dbug, "Going to position %ld\n", startOfObjectIndex + (num << 2));
    Seek(bigDataFile, startOfObjectIndex + (num << 2), OFFSET_BEGINNING);
    6fa2:	|  \-> move.l 1ca6a <bigDataFile>,40(sp)
    6faa:	|      move.l 48(sp),d0
    6fae:	|      add.l d0,d0
    6fb0:	|      add.l d0,d0
    6fb2:	|      move.l d0,d1
    6fb4:	|      move.l 1ca7e <startOfObjectIndex>,d0
    6fba:	|      add.l d1,d0
    6fbc:	|      move.l d0,36(sp)
    6fc0:	|      moveq #-1,d0
    6fc2:	|      move.l d0,32(sp)
    6fc6:	|      move.l 1ca8a <DOSBase>,d0
    6fcc:	|      movea.l d0,a6
    6fce:	|      move.l 40(sp),d1
    6fd2:	|      move.l 36(sp),d2
    6fd6:	|      move.l 32(sp),d3
    6fda:	|      jsr -66(a6)
    6fde:	|      move.l d0,28(sp)
    Seek(bigDataFile, get4bytes(bigDataFile), OFFSET_BEGINNING);
    6fe2:	|      move.l 1ca6a <bigDataFile>,24(sp)
    6fea:	|      move.l 1ca6a <bigDataFile>,d0
    6ff0:	|      move.l d0,-(sp)
    6ff2:	|      jsr 718 <get4bytes>
    6ff8:	|      addq.l #4,sp
    6ffa:	|      move.l d0,20(sp)
    6ffe:	|      moveq #-1,d0
    7000:	|      move.l d0,16(sp)
    7004:	|      move.l 1ca8a <DOSBase>,d0
    700a:	|      movea.l d0,a6
    700c:	|      move.l 24(sp),d1
    7010:	|      move.l 20(sp),d2
    7014:	|      move.l 16(sp),d3
    7018:	|      jsr -66(a6)
    701c:	|      move.l d0,12(sp)
    // FPrintf(dbug, "Told to skip forward to %ld\n", FTell(bigDataFile));
    // FClose(dbug);
    return sliceBusy = TRUE;
    7020:	|      move.w #1,1c406 <sliceBusy>
    7028:	|      move.w 1c406 <sliceBusy>,d0
}
    702e:	\----> movem.l (sp)+,d2-d3/a6
    7032:	       lea 32(sp),sp
    7036:	       rts

00007038 <openSubSlice>:

BOOL openSubSlice (int num) {
    7038:	       lea -32(sp),sp
    703c:	       movem.l d2-d3/a6,-(sp)
//	FILE * dbug = fopen ("debuggy.txt", "at");

//	fprintf (dbug, "\nTrying to open sub %i\n", num);

	if (sliceBusy) {
    7040:	       move.w 1c406 <sliceBusy>,d0
    7046:	   /-- beq.s 7062 <openSubSlice+0x2a>
		KPrintF("Can't read from data file", "I'm already reading something");
    7048:	   |   pea 18e07 <PutChar+0xfd7>
    704e:	   |   pea 18e25 <PutChar+0xff5>
    7054:	   |   jsr 17366 <KPrintF>
    705a:	   |   addq.l #8,sp
		return FALSE;
    705c:	   |   clr.w d0
    705e:	/--|-- bra.w 70ee <openSubSlice+0xb6>
	}

//	fprintf (dbug, "Going to position %li\n", startOfSubIndex + (num << 2));
	Seek(bigDataFile, startOfSubIndex + (num << 2), OFFSET_BEGINNING);
    7062:	|  \-> move.l 1ca6a <bigDataFile>,40(sp)
    706a:	|      move.l 48(sp),d0
    706e:	|      add.l d0,d0
    7070:	|      add.l d0,d0
    7072:	|      move.l d0,d1
    7074:	|      move.l 1ca7a <startOfSubIndex>,d0
    707a:	|      add.l d1,d0
    707c:	|      move.l d0,36(sp)
    7080:	|      moveq #-1,d0
    7082:	|      move.l d0,32(sp)
    7086:	|      move.l 1ca8a <DOSBase>,d0
    708c:	|      movea.l d0,a6
    708e:	|      move.l 40(sp),d1
    7092:	|      move.l 36(sp),d2
    7096:	|      move.l 32(sp),d3
    709a:	|      jsr -66(a6)
    709e:	|      move.l d0,28(sp)
	Seek(bigDataFile, get4bytes (bigDataFile), OFFSET_BEGINNING);
    70a2:	|      move.l 1ca6a <bigDataFile>,24(sp)
    70aa:	|      move.l 1ca6a <bigDataFile>,d0
    70b0:	|      move.l d0,-(sp)
    70b2:	|      jsr 718 <get4bytes>
    70b8:	|      addq.l #4,sp
    70ba:	|      move.l d0,20(sp)
    70be:	|      moveq #-1,d0
    70c0:	|      move.l d0,16(sp)
    70c4:	|      move.l 1ca8a <DOSBase>,d0
    70ca:	|      movea.l d0,a6
    70cc:	|      move.l 24(sp),d1
    70d0:	|      move.l 20(sp),d2
    70d4:	|      move.l 16(sp),d3
    70d8:	|      jsr -66(a6)
    70dc:	|      move.l d0,12(sp)
//	fprintf (dbug, "Told to skip forward to %li\n", ftell (bigDataFile));
//	fclose (dbug);
	return sliceBusy = TRUE;
    70e0:	|      move.w #1,1c406 <sliceBusy>
    70e8:	|      move.w 1c406 <sliceBusy>,d0
}
    70ee:	\----> movem.l (sp)+,d2-d3/a6
    70f2:	       lea 32(sp),sp
    70f6:	       rts

000070f8 <setFileIndices>:

void setFileIndices (BPTR fp, unsigned int numLanguages, unsigned int skipBefore) {
    70f8:	       lea -180(sp),sp
    70fc:	       movem.l d2-d3/a6,-(sp)
	if (fp) {
    7100:	       tst.l 196(sp)
    7104:	/----- beq.s 7144 <setFileIndices+0x4c>
		// Keep hold of the file handle, and let things get at it
		bigDataFile = fp;
    7106:	|      move.l 196(sp),1ca6a <bigDataFile>
		startIndex = Seek( fp, 0, OFFSET_CURRENT);
    710e:	|      move.l 196(sp),168(sp)
    7114:	|      clr.l 164(sp)
    7118:	|      clr.l 160(sp)
    711c:	|      move.l 1ca8a <DOSBase>,d0
    7122:	|      movea.l d0,a6
    7124:	|      move.l 168(sp),d1
    7128:	|      move.l 164(sp),d2
    712c:	|      move.l 160(sp),d3
    7130:	|      jsr -66(a6)
    7134:	|      move.l d0,156(sp)
    7138:	|      move.l 156(sp),d0
    713c:	|      move.l d0,1ca6e <startIndex>
    7142:	|  /-- bra.s 717e <setFileIndices+0x86>
	} else {
		// No file pointer - this means that we reuse the bigDataFile
		fp = bigDataFile;
    7144:	\--|-> move.l 1ca6a <bigDataFile>,196(sp)
        Seek(fp, startIndex, OFFSET_BEGINNING);
    714c:	   |   move.l 196(sp),184(sp)
    7152:	   |   move.l 1ca6e <startIndex>,d0
    7158:	   |   move.l d0,180(sp)
    715c:	   |   moveq #-1,d0
    715e:	   |   move.l d0,176(sp)
    7162:	   |   move.l 1ca8a <DOSBase>,d0
    7168:	   |   movea.l d0,a6
    716a:	   |   move.l 184(sp),d1
    716e:	   |   move.l 180(sp),d2
    7172:	   |   move.l 176(sp),d3
    7176:	   |   jsr -66(a6)
    717a:	   |   move.l d0,172(sp)
	}
	sliceBusy = FALSE;
    717e:	   \-> clr.w 1c406 <sliceBusy>

	if (skipBefore > numLanguages) {
    7184:	       move.l 204(sp),d0
    7188:	       cmp.l 200(sp),d0
    718c:	   /-- bls.s 71a0 <setFileIndices+0xa8>
		KPrintF("setFileIndices: Warning: Not a valid language ID! Using default instead.");
    718e:	   |   pea 18e3f <PutChar+0x100f>
    7194:	   |   jsr 17366 <KPrintF>
    719a:	   |   addq.l #4,sp
		skipBefore = 0;
    719c:	   |   clr.l 204(sp)
	}

	// STRINGS
	int skipAfter = numLanguages - skipBefore;
    71a0:	   \-> move.l 200(sp),d0
    71a4:	       sub.l 204(sp),d0
    71a8:	       move.l d0,188(sp)
	while (skipBefore) {
    71ac:	   /-- bra.s 71ea <setFileIndices+0xf2>
        Seek(fp, get4bytes(fp),OFFSET_BEGINING);		
    71ae:	/--|-> move.l 196(sp),24(sp)
    71b4:	|  |   move.l 196(sp),-(sp)
    71b8:	|  |   jsr 718 <get4bytes>
    71be:	|  |   addq.l #4,sp
    71c0:	|  |   move.l d0,20(sp)
    71c4:	|  |   moveq #-1,d0
    71c6:	|  |   move.l d0,16(sp)
    71ca:	|  |   move.l 1ca8a <DOSBase>,d0
    71d0:	|  |   movea.l d0,a6
    71d2:	|  |   move.l 24(sp),d1
    71d6:	|  |   move.l 20(sp),d2
    71da:	|  |   move.l 16(sp),d3
    71de:	|  |   jsr -66(a6)
    71e2:	|  |   move.l d0,12(sp)
		skipBefore --;
    71e6:	|  |   subq.l #1,204(sp)
	while (skipBefore) {
    71ea:	|  \-> tst.l 204(sp)
    71ee:	\----- bne.s 71ae <setFileIndices+0xb6>
	}
	startOfTextIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    71f0:	       move.l 196(sp),152(sp)
    71f6:	       clr.l 148(sp)
    71fa:	       clr.l 144(sp)
    71fe:	       move.l 1ca8a <DOSBase>,d0
    7204:	       movea.l d0,a6
    7206:	       move.l 152(sp),d1
    720a:	       move.l 148(sp),d2
    720e:	       move.l 144(sp),d3
    7212:	       jsr -66(a6)
    7216:	       move.l d0,140(sp)
    721a:	       move.l 140(sp),d0
    721e:	       addq.l #4,d0
    7220:	       move.l d0,1ca76 <startOfTextIndex>

	Seek(fp, get4bytes (fp), OFFSET_BEGINNING);
    7226:	       move.l 196(sp),136(sp)
    722c:	       move.l 196(sp),-(sp)
    7230:	       jsr 718 <get4bytes>
    7236:	       addq.l #4,sp
    7238:	       move.l d0,132(sp)
    723c:	       moveq #-1,d0
    723e:	       move.l d0,128(sp)
    7242:	       move.l 1ca8a <DOSBase>,d0
    7248:	       movea.l d0,a6
    724a:	       move.l 136(sp),d1
    724e:	       move.l 132(sp),d2
    7252:	       move.l 128(sp),d3
    7256:	       jsr -66(a6)
    725a:	       move.l d0,124(sp)

	while (skipAfter) {
    725e:	   /-- bra.s 729c <setFileIndices+0x1a4>
        Seek( fp, get4bytes (fp), OFFSET_BEGINING);
    7260:	/--|-> move.l 196(sp),40(sp)
    7266:	|  |   move.l 196(sp),-(sp)
    726a:	|  |   jsr 718 <get4bytes>
    7270:	|  |   addq.l #4,sp
    7272:	|  |   move.l d0,36(sp)
    7276:	|  |   moveq #-1,d0
    7278:	|  |   move.l d0,32(sp)
    727c:	|  |   move.l 1ca8a <DOSBase>,d0
    7282:	|  |   movea.l d0,a6
    7284:	|  |   move.l 40(sp),d1
    7288:	|  |   move.l 36(sp),d2
    728c:	|  |   move.l 32(sp),d3
    7290:	|  |   jsr -66(a6)
    7294:	|  |   move.l d0,28(sp)
		skipAfter --;
    7298:	|  |   subq.l #1,188(sp)
	while (skipAfter) {
    729c:	|  \-> tst.l 188(sp)
    72a0:	\----- bne.s 7260 <setFileIndices+0x168>
	}

	startOfSubIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    72a2:	       move.l 196(sp),120(sp)
    72a8:	       clr.l 116(sp)
    72ac:	       clr.l 112(sp)
    72b0:	       move.l 1ca8a <DOSBase>,d0
    72b6:	       movea.l d0,a6
    72b8:	       move.l 120(sp),d1
    72bc:	       move.l 116(sp),d2
    72c0:	       move.l 112(sp),d3
    72c4:	       jsr -66(a6)
    72c8:	       move.l d0,108(sp)
    72cc:	       move.l 108(sp),d0
    72d0:	       addq.l #4,d0
    72d2:	       move.l d0,1ca7a <startOfSubIndex>
    Seek( fp, get4bytes (fp), OFFSET_CURRENT);
    72d8:	       move.l 196(sp),104(sp)
    72de:	       move.l 196(sp),-(sp)
    72e2:	       jsr 718 <get4bytes>
    72e8:	       addq.l #4,sp
    72ea:	       move.l d0,100(sp)
    72ee:	       clr.l 96(sp)
    72f2:	       move.l 1ca8a <DOSBase>,d0
    72f8:	       movea.l d0,a6
    72fa:	       move.l 104(sp),d1
    72fe:	       move.l 100(sp),d2
    7302:	       move.l 96(sp),d3
    7306:	       jsr -66(a6)
    730a:	       move.l d0,92(sp)

	startOfObjectIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    730e:	       move.l 196(sp),88(sp)
    7314:	       clr.l 84(sp)
    7318:	       clr.l 80(sp)
    731c:	       move.l 1ca8a <DOSBase>,d0
    7322:	       movea.l d0,a6
    7324:	       move.l 88(sp),d1
    7328:	       move.l 84(sp),d2
    732c:	       move.l 80(sp),d3
    7330:	       jsr -66(a6)
    7334:	       move.l d0,76(sp)
    7338:	       move.l 76(sp),d0
    733c:	       addq.l #4,d0
    733e:	       move.l d0,1ca7e <startOfObjectIndex>
	Seek (fp, get4bytes (fp), OFFSET_CURRENT);
    7344:	       move.l 196(sp),72(sp)
    734a:	       move.l 196(sp),-(sp)
    734e:	       jsr 718 <get4bytes>
    7354:	       addq.l #4,sp
    7356:	       move.l d0,68(sp)
    735a:	       clr.l 64(sp)
    735e:	       move.l 1ca8a <DOSBase>,d0
    7364:	       movea.l d0,a6
    7366:	       move.l 72(sp),d1
    736a:	       move.l 68(sp),d2
    736e:	       move.l 64(sp),d3
    7372:	       jsr -66(a6)
    7376:	       move.l d0,60(sp)

	// Remember that the data section starts here
	startOfDataIndex =  Seek( fp, 0, OFFSET_CURRENT);
    737a:	       move.l 196(sp),56(sp)
    7380:	       clr.l 52(sp)
    7384:	       clr.l 48(sp)
    7388:	       move.l 1ca8a <DOSBase>,d0
    738e:	       movea.l d0,a6
    7390:	       move.l 56(sp),d1
    7394:	       move.l 52(sp),d2
    7398:	       move.l 48(sp),d3
    739c:	       jsr -66(a6)
    73a0:	       move.l d0,44(sp)
    73a4:	       move.l 44(sp),d0
    73a8:	       move.l d0,1ca72 <startOfDataIndex>
    73ae:	       nop
    73b0:	       movem.l (sp)+,d2-d3/a6
    73b4:	       lea 180(sp),sp
    73b8:	       rts

000073ba <GetVBR>:
static volatile APTR VBR=0;
static APTR SystemIrq;
 
struct View *ActiView;

static APTR GetVBR(void) {
    73ba:	    lea -20(sp),sp
    73be:	    move.l a6,-(sp)
    73c0:	    move.l d7,-(sp)
	APTR vbr = 0;
    73c2:	    clr.l 24(sp)
	UWORD getvbr[] = { 0x4e7a, 0x0801, 0x4e73 }; // MOVEC.L VBR,D0 RTE
    73c6:	    move.w #20090,10(sp)
    73cc:	    move.w #2049,12(sp)
    73d2:	    move.w #20083,14(sp)

	if (SysBase->AttnFlags & AFF_68010) 
    73d8:	    movea.l 1ca82 <SysBase>,a0
    73de:	    move.w 296(a0),d0
    73e2:	    move.w d0,d0
    73e4:	    andi.l #65535,d0
    73ea:	    moveq #1,d1
    73ec:	    and.l d1,d0
    73ee:	/-- beq.s 741c <GetVBR+0x62>
		vbr = (APTR)Supervisor((ULONG (*)())getvbr);
    73f0:	|   lea 28(sp),a0
    73f4:	|   lea -18(a0),a0
    73f8:	|   move.l a0,20(sp)
    73fc:	|   move.l 1ca82 <SysBase>,d0
    7402:	|   movea.l d0,a6
    7404:	|   move.l 20(sp),d7
    7408:	|   exg d7,a5
    740a:	|   jsr -30(a6)
    740e:	|   exg d7,a5
    7410:	|   move.l d0,16(sp)
    7414:	|   move.l 16(sp),d0
    7418:	|   move.l d0,24(sp)

	return vbr;
    741c:	\-> move.l 24(sp),d0
}
    7420:	    move.l (sp)+,d7
    7422:	    movea.l (sp)+,a6
    7424:	    lea 20(sp),sp
    7428:	    rts

0000742a <SetInterruptHandler>:

void SetInterruptHandler(APTR interrupt) {
	*(volatile APTR*)(((UBYTE*)VBR)+0x6c) = interrupt;
    742a:	movea.l 1caa8 <VBR>,a0
    7430:	lea 108(a0),a0
    7434:	move.l 4(sp),(a0)
}
    7438:	nop
    743a:	rts

0000743c <GetInterruptHandler>:

APTR GetInterruptHandler() {
	return *(volatile APTR*)(((UBYTE*)VBR)+0x6c);
    743c:	movea.l 1caa8 <VBR>,a0
    7442:	move.l 108(a0),d0
}
    7446:	rts

00007448 <TakeSystem>:
	UWORD tst=*(volatile UWORD*)&custom->dmaconr; //for compatiblity a1000
	(void)tst;
	while (*(volatile UWORD*)&custom->dmaconr&(1<<14)) {} //blitter busy wait
}

void TakeSystem() {
    7448:	       subq.l #8,sp
    744a:	       move.l a6,-(sp)
	KPrintF("TakeSystem: Run Forbid\n");
    744c:	       pea 18e88 <PutChar+0x1058>
    7452:	       jsr 17366 <KPrintF>
    7458:	       addq.l #4,sp
	Forbid();
    745a:	       move.l 1ca82 <SysBase>,d0
    7460:	       movea.l d0,a6
    7462:	       jsr -132(a6)
	//Save current interrupts and DMA settings so we can restore them upon exit. 
	KPrintF("TakeSystem: Saving Registers\n");
    7466:	       pea 18ea0 <PutChar+0x1070>
    746c:	       jsr 17366 <KPrintF>
    7472:	       addq.l #4,sp
	SystemADKCON=custom->adkconr;
    7474:	       movea.l 1ca86 <custom>,a0
    747a:	       move.w 16(a0),d0
    747e:	       move.w d0,1caa6 <SystemADKCON>
	SystemInts=custom->intenar;
    7484:	       movea.l 1ca86 <custom>,a0
    748a:	       move.w 28(a0),d0
    748e:	       move.w d0,1caa2 <SystemInts>
	SystemDMA=custom->dmaconr;
    7494:	       movea.l 1ca86 <custom>,a0
    749a:	       move.w 2(a0),d0
    749e:	       move.w d0,1caa4 <SystemDMA>
	ActiView=GfxBase->ActiView; //store current view
    74a4:	       movea.l 1ca8e <GfxBase>,a0
    74aa:	       move.l 34(a0),d0
    74ae:	       move.l d0,1cab0 <ActiView>

	KPrintF("TakeSystem: LoadView\n");
    74b4:	       pea 18ebe <PutChar+0x108e>
    74ba:	       jsr 17366 <KPrintF>
    74c0:	       addq.l #4,sp
	LoadView(0);
    74c2:	       clr.l 4(sp)
    74c6:	       move.l 1ca8e <GfxBase>,d0
    74cc:	       movea.l d0,a6
    74ce:	       movea.l 4(sp),a1
    74d2:	       jsr -222(a6)
	KPrintF("TakeSystem: WaitTof\n");
    74d6:	       pea 18ed4 <PutChar+0x10a4>
    74dc:	       jsr 17366 <KPrintF>
    74e2:	       addq.l #4,sp
	WaitTOF();
    74e4:	       move.l 1ca8e <GfxBase>,d0
    74ea:	       movea.l d0,a6
    74ec:	       jsr -270(a6)
	WaitTOF();
    74f0:	       move.l 1ca8e <GfxBase>,d0
    74f6:	       movea.l d0,a6
    74f8:	       jsr -270(a6)

	KPrintF("TakeSystem: WaitVBL\n");
    74fc:	       pea 18ee9 <PutChar+0x10b9>
    7502:	       jsr 17366 <KPrintF>
    7508:	       addq.l #4,sp
	WaitVbl();
    750a:	       jsr 1729a <WaitVbl>
	WaitVbl();
    7510:	       jsr 1729a <WaitVbl>

	KPrintF("TakeSystem: Doing Blitter Stuff\n");
    7516:	       pea 18efe <PutChar+0x10ce>
    751c:	       jsr 17366 <KPrintF>
    7522:	       addq.l #4,sp
	OwnBlitter();
    7524:	       move.l 1ca8e <GfxBase>,d0
    752a:	       movea.l d0,a6
    752c:	       jsr -456(a6)
	WaitBlit();	
    7530:	       move.l 1ca8e <GfxBase>,d0
    7536:	       movea.l d0,a6
    7538:	       jsr -228(a6)
	Disable();
    753c:	       move.l 1ca82 <SysBase>,d0
    7542:	       movea.l d0,a6
    7544:	       jsr -120(a6)
	
	//custom->intena=0x7fff;//disable all interrupts
	//custom->intreq=0x7fff;//Clear any interrupts that were pending
	
	KPrintF("TakeSystem: Clear DMA\n");
    7548:	       pea 18f1f <PutChar+0x10ef>
    754e:	       jsr 17366 <KPrintF>
    7554:	       addq.l #4,sp
	custom->dmacon=0x7fff;//Clear all DMA channels
    7556:	       movea.l 1ca86 <custom>,a0
    755c:	       move.w #32767,150(a0)

	KPrintF("TakeSystem: Set all colors to black\n");
    7562:	       pea 18f36 <PutChar+0x1106>
    7568:	       jsr 17366 <KPrintF>
    756e:	       addq.l #4,sp
	//set all colors black
	for(int a=0;a<32;a++)
    7570:	       clr.l 8(sp)
    7574:	   /-- bra.s 7592 <TakeSystem+0x14a>
		custom->color[a]=0;
    7576:	/--|-> movea.l 1ca86 <custom>,a0
    757c:	|  |   move.l 8(sp),d0
    7580:	|  |   addi.l #192,d0
    7586:	|  |   add.l d0,d0
    7588:	|  |   move.w #0,(0,a0,d0.l)
	for(int a=0;a<32;a++)
    758e:	|  |   addq.l #1,8(sp)
    7592:	|  \-> moveq #31,d0
    7594:	|      cmp.l 8(sp),d0
    7598:	\----- bge.s 7576 <TakeSystem+0x12e>

	WaitVbl();
    759a:	       jsr 1729a <WaitVbl>
	WaitVbl();
    75a0:	       jsr 1729a <WaitVbl>

	KPrintF("TakeSystem: Save System interrupts\n");
    75a6:	       pea 18f5b <PutChar+0x112b>
    75ac:	       jsr 17366 <KPrintF>
    75b2:	       addq.l #4,sp
	VBR=GetVBR();
    75b4:	       jsr 73ba <GetVBR>
    75ba:	       move.l d0,1caa8 <VBR>
	SystemIrq=GetInterruptHandler(); //store interrupt register*/
    75c0:	       jsr 743c <GetInterruptHandler>
    75c6:	       move.l d0,1caac <SystemIrq>
}
    75cc:	       nop
    75ce:	       movea.l (sp)+,a6
    75d0:	       addq.l #8,sp
    75d2:	       rts

000075d4 <FreeSystem>:

void FreeSystem() { 
    75d4:	subq.l #4,sp
    75d6:	move.l a6,-(sp)
	WaitVbl();
    75d8:	jsr 1729a <WaitVbl>
	WaitBlit();
    75de:	move.l 1ca8e <GfxBase>,d0
    75e4:	movea.l d0,a6
    75e6:	jsr -228(a6)
	custom->intena=0x7fff;//disable all interrupts
    75ea:	movea.l 1ca86 <custom>,a0
    75f0:	move.w #32767,154(a0)
	custom->intreq=0x7fff;//Clear any interrupts that were pending
    75f6:	movea.l 1ca86 <custom>,a0
    75fc:	move.w #32767,156(a0)
	custom->dmacon=0x7fff;//Clear all DMA channels
    7602:	movea.l 1ca86 <custom>,a0
    7608:	move.w #32767,150(a0)

	//restore interrupts
	SetInterruptHandler(SystemIrq);
    760e:	move.l 1caac <SystemIrq>,d0
    7614:	move.l d0,-(sp)
    7616:	jsr 742a <SetInterruptHandler>
    761c:	addq.l #4,sp

	/*Restore system copper list(s). */
	custom->cop1lc=(ULONG)GfxBase->copinit;
    761e:	movea.l 1ca8e <GfxBase>,a0
    7624:	move.l 38(a0),d0
    7628:	movea.l 1ca86 <custom>,a0
    762e:	move.l d0,128(a0)
	custom->cop2lc=(ULONG)GfxBase->LOFlist;
    7632:	movea.l 1ca8e <GfxBase>,a0
    7638:	move.l 50(a0),d0
    763c:	movea.l 1ca86 <custom>,a0
    7642:	move.l d0,132(a0)
	custom->copjmp1=0x7fff; //start coppper
    7646:	movea.l 1ca86 <custom>,a0
    764c:	move.w #32767,136(a0)

	/*Restore all interrupts and DMA settings. */
	//custom->intena=SystemInts|0x8000;
	custom->dmacon=SystemDMA|0x8000;
    7652:	move.w 1caa4 <SystemDMA>,d0
    7658:	movea.l 1ca86 <custom>,a0
    765e:	ori.w #-32768,d0
    7662:	move.w d0,150(a0)
	custom->adkcon=SystemADKCON|0x8000;
    7666:	move.w 1caa6 <SystemADKCON>,d0
    766c:	movea.l 1ca86 <custom>,a0
    7672:	ori.w #-32768,d0
    7676:	move.w d0,158(a0)

	WaitBlit();	
    767a:	move.l 1ca8e <GfxBase>,d0
    7680:	movea.l d0,a6
    7682:	jsr -228(a6)
	DisownBlitter();
    7686:	move.l 1ca8e <GfxBase>,d0
    768c:	movea.l d0,a6
    768e:	jsr -462(a6)
	Enable();
    7692:	move.l 1ca82 <SysBase>,d0
    7698:	movea.l d0,a6
    769a:	jsr -126(a6)

	LoadView(ActiView);
    769e:	move.l 1cab0 <ActiView>,4(sp)
    76a6:	move.l 1ca8e <GfxBase>,d0
    76ac:	movea.l d0,a6
    76ae:	movea.l 4(sp),a1
    76b2:	jsr -222(a6)
	WaitTOF();
    76b6:	move.l 1ca8e <GfxBase>,d0
    76bc:	movea.l d0,a6
    76be:	jsr -270(a6)
	WaitTOF();
    76c2:	move.l 1ca8e <GfxBase>,d0
    76c8:	movea.l d0,a6
    76ca:	jsr -270(a6)

	Permit();
    76ce:	move.l 1ca82 <SysBase>,d0
    76d4:	movea.l d0,a6
    76d6:	jsr -138(a6)
}
    76da:	nop
    76dc:	movea.l (sp)+,a6
    76de:	addq.l #4,sp
    76e0:	rts

000076e2 <main>:
static void Wait10() { WaitLine(0x10); }
static void Wait11() { WaitLine(0x11); }
static void Wait12() { WaitLine(0x12); }
static void Wait13() { WaitLine(0x13); }

int main(int argc, char *argv[]) {
    76e2:	    lea -132(sp),sp
    76e6:	    movem.l d2-d3/a6,-(sp)

	int *bp = 0x200;
    76ea:	    move.l #512,140(sp)
  	*bp = 0;
    76f2:	    movea.l 140(sp),a0
    76f6:	    clr.l (a0)

	SysBase = *((struct ExecBase**)4UL);
    76f8:	    movea.w #4,a0
    76fc:	    move.l (a0),d0
    76fe:	    move.l d0,1ca82 <SysBase>
	custom = (struct Custom*)0xdff000;	
    7704:	    move.l #14675968,1ca86 <custom>


	// We will use the graphics library only to locate and restore the system copper list once we are through.
	GfxBase = (struct GfxBase *)OpenLibrary((CONST_STRPTR)"graphics.library",0);
    770e:	    move.l #102271,136(sp)
    7716:	    clr.l 132(sp)
    771a:	    move.l 1ca82 <SysBase>,d0
    7720:	    movea.l d0,a6
    7722:	    movea.l 136(sp),a1
    7726:	    move.l 132(sp),d0
    772a:	    jsr -552(a6)
    772e:	    move.l d0,128(sp)
    7732:	    move.l 128(sp),d0
    7736:	    move.l d0,1ca8e <GfxBase>
	if (!GfxBase)
    773c:	    move.l 1ca8e <GfxBase>,d0
    7742:	/-- bne.s 7758 <main+0x76>
		Exit(0);
    7744:	|   clr.l 124(sp)
    7748:	|   move.l 1ca8a <DOSBase>,d0
    774e:	|   movea.l d0,a6
    7750:	|   move.l 124(sp),d1
    7754:	|   jsr -144(a6)

	// used for printing
	DOSBase = (struct DosLibrary*)OpenLibrary((CONST_STRPTR)"dos.library", 0);
    7758:	\-> move.l #102288,120(sp)
    7760:	    clr.l 116(sp)
    7764:	    move.l 1ca82 <SysBase>,d0
    776a:	    movea.l d0,a6
    776c:	    movea.l 120(sp),a1
    7770:	    move.l 116(sp),d0
    7774:	    jsr -552(a6)
    7778:	    move.l d0,112(sp)
    777c:	    move.l 112(sp),d0
    7780:	    move.l d0,1ca8a <DOSBase>
	if (!DOSBase)
    7786:	    move.l 1ca8a <DOSBase>,d0
    778c:	/-- bne.s 77a2 <main+0xc0>
		Exit(0);
    778e:	|   clr.l 108(sp)
    7792:	|   move.l 1ca8a <DOSBase>,d0
    7798:	|   movea.l d0,a6
    779a:	|   move.l 108(sp),d1
    779e:	|   jsr -144(a6)

	MathIeeeSingBasBase = (struct MathIEEEBase *) OpenLibrary("mathieeesingbas.library", 0);	
    77a2:	\-> move.l #102300,104(sp)
    77aa:	    clr.l 100(sp)
    77ae:	    move.l 1ca82 <SysBase>,d0
    77b4:	    movea.l d0,a6
    77b6:	    movea.l 104(sp),a1
    77ba:	    move.l 100(sp),d0
    77be:	    jsr -552(a6)
    77c2:	    move.l d0,96(sp)
    77c6:	    move.l 96(sp),d0
    77ca:	    move.l d0,1ca92 <MathIeeeSingBasBase>
	if (!MathIeeeSingBasBase)
    77d0:	    move.l 1ca92 <MathIeeeSingBasBase>,d0
    77d6:	/-- bne.s 77ec <main+0x10a>
		Exit(0);	
    77d8:	|   clr.l 92(sp)
    77dc:	|   move.l 1ca8a <DOSBase>,d0
    77e2:	|   movea.l d0,a6
    77e4:	|   move.l 92(sp),d1
    77e8:	|   jsr -144(a6)

	MathIeeeSingTransBase = (struct MathIEEEBase *) OpenLibrary("mathieeesingtrans.library",0);													
    77ec:	\-> move.l #102324,88(sp)
    77f4:	    clr.l 84(sp)
    77f8:	    move.l 1ca82 <SysBase>,d0
    77fe:	    movea.l d0,a6
    7800:	    movea.l 88(sp),a1
    7804:	    move.l 84(sp),d0
    7808:	    jsr -552(a6)
    780c:	    move.l d0,80(sp)
    7810:	    move.l 80(sp),d0
    7814:	    move.l d0,1ca96 <MathIeeeSingTransBase>
	if (!MathIeeeSingTransBase)
    781a:	    move.l 1ca96 <MathIeeeSingTransBase>,d0
    7820:	/-- bne.s 7836 <main+0x154>
		Exit(0);
    7822:	|   clr.l 76(sp)
    7826:	|   move.l 1ca8a <DOSBase>,d0
    782c:	|   movea.l d0,a6
    782e:	|   move.l 76(sp),d1
    7832:	|   jsr -144(a6)

	MathIeeeDoubTransBase =  (struct MathIEEEBase *) OpenLibrary("mathieeedoubtrans.library",0);
    7836:	\-> move.l #102350,72(sp)
    783e:	    clr.l 68(sp)
    7842:	    move.l 1ca82 <SysBase>,d0
    7848:	    movea.l d0,a6
    784a:	    movea.l 72(sp),a1
    784e:	    move.l 68(sp),d0
    7852:	    jsr -552(a6)
    7856:	    move.l d0,64(sp)
    785a:	    move.l 64(sp),d0
    785e:	    move.l d0,1ca9e <MathIeeeDoubTransBase>
	if (!MathIeeeDoubTransBase)		
    7864:	    move.l 1ca9e <MathIeeeDoubTransBase>,d0
    786a:	/-- bne.s 7880 <main+0x19e>
		Exit(0);
    786c:	|   clr.l 60(sp)
    7870:	|   move.l 1ca8a <DOSBase>,d0
    7876:	|   movea.l d0,a6
    7878:	|   move.l 60(sp),d1
    787c:	|   jsr -144(a6)

	MathIeeeDoubBasBase = (struct MathIEEEBase *) OpenLibrary("mathieeedoubbas.library",0);
    7880:	\-> move.l #102376,56(sp)
    7888:	    clr.l 52(sp)
    788c:	    move.l 1ca82 <SysBase>,d0
    7892:	    movea.l d0,a6
    7894:	    movea.l 56(sp),a1
    7898:	    move.l 52(sp),d0
    789c:	    jsr -552(a6)
    78a0:	    move.l d0,48(sp)
    78a4:	    move.l 48(sp),d0
    78a8:	    move.l d0,1ca9a <MathIeeeDoubBasBase>
	if( !MathIeeeDoubBasBase) 
    78ae:	    move.l 1ca9a <MathIeeeDoubBasBase>,d0
    78b4:	/-- bne.s 78ca <main+0x1e8>
		Exit(0);
    78b6:	|   clr.l 44(sp)
    78ba:	|   move.l 1ca8a <DOSBase>,d0
    78c0:	|   movea.l d0,a6
    78c2:	|   move.l 44(sp),d1
    78c6:	|   jsr -144(a6)
	

	KPrintF(" debugger from Amiga Test 030!\n");
    78ca:	\-> pea 19000 <PutChar+0x11d0>
    78d0:	    jsr 17366 <KPrintF>
    78d6:	    addq.l #4,sp

	Write(Output(), (APTR)"Hello console Test 030!\n", 25);
    78d8:	    move.l 1ca8a <DOSBase>,d0
    78de:	    movea.l d0,a6
    78e0:	    jsr -60(a6)
    78e4:	    move.l d0,40(sp)
    78e8:	    move.l 40(sp),d0
    78ec:	    move.l d0,36(sp)
    78f0:	    move.l #102432,32(sp)
    78f8:	    moveq #25,d0
    78fa:	    move.l d0,28(sp)
    78fe:	    move.l 1ca8a <DOSBase>,d0
    7904:	    movea.l d0,a6
    7906:	    move.l 36(sp),d1
    790a:	    move.l 32(sp),d2
    790e:	    move.l 28(sp),d3
    7912:	    jsr -48(a6)
    7916:	    move.l d0,24(sp)
	Delay(50);
    791a:	    moveq #50,d0
    791c:	    move.l d0,20(sp)
    7920:	    move.l 1ca8a <DOSBase>,d0
    7926:	    movea.l d0,a6
    7928:	    move.l 20(sp),d1
    792c:	    jsr -198(a6)
	if(p61Init(module) != 0)
		KPrintF("p61Init failed!\n");
#endif
	warpmode(0);*/

	KPrintF("Taking System\n");
    7930:	    pea 19039 <PutChar+0x1209>
    7936:	    jsr 17366 <KPrintF>
    793c:	    addq.l #4,sp
	TakeSystem();
    793e:	    jsr 7448 <TakeSystem>
	KPrintF("System Taken\n");
    7944:	    pea 19048 <PutChar+0x1218>
    794a:	    jsr 17366 <KPrintF>
    7950:	    addq.l #4,sp

	custom->dmacon = 0x87ff;
    7952:	    movea.l 1ca86 <custom>,a0
    7958:	    move.w #-30721,150(a0)
	WaitVbl();
    795e:	    jsr 1729a <WaitVbl>

	KPrintF("Starting main_sludge\n");
    7964:	    pea 19056 <PutChar+0x1226>
    796a:	    jsr 17366 <KPrintF>
    7970:	    addq.l #4,sp
	main_sludge(argc, argv);	
    7972:	    move.l 152(sp),-(sp)
    7976:	    move.l 152(sp),-(sp)
    797a:	    jsr 4278 <main_sludge>
    7980:	    addq.l #8,sp
#ifdef MUSIC
	p61End();
#endif

	// END
	FreeSystem();
    7982:	    jsr 75d4 <FreeSystem>

	CloseLibrary((struct Library*)DOSBase);
    7988:	    move.l 1ca8a <DOSBase>,16(sp)
    7990:	    move.l 1ca82 <SysBase>,d0
    7996:	    movea.l d0,a6
    7998:	    movea.l 16(sp),a1
    799c:	    jsr -414(a6)
	CloseLibrary((struct Library*)GfxBase);
    79a0:	    move.l 1ca8e <GfxBase>,12(sp)
    79a8:	    move.l 1ca82 <SysBase>,d0
    79ae:	    movea.l d0,a6
    79b0:	    movea.l 12(sp),a1
    79b4:	    jsr -414(a6)
    79b8:	    moveq #0,d0
}
    79ba:	    movem.l (sp)+,d2-d3/a6
    79be:	    lea 132(sp),sp
    79c2:	    rts

000079c4 <addStatusBar>:
#include "support/gcc8_c_support.h"

struct statusStuff mainStatus;
struct statusStuff * nowStatus = & mainStatus;

void addStatusBar () {
    79c4:	    lea -16(sp),sp
    79c8:	    move.l a6,-(sp)
	struct statusBar * newStat = AllocVec(sizeof(struct statusBar), MEMF_ANY);
    79ca:	    moveq #8,d0
    79cc:	    move.l d0,16(sp)
    79d0:	    clr.l 12(sp)
    79d4:	    move.l 1ca82 <SysBase>,d0
    79da:	    movea.l d0,a6
    79dc:	    move.l 16(sp),d0
    79e0:	    move.l 12(sp),d1
    79e4:	    jsr -684(a6)
    79e8:	    move.l d0,8(sp)
    79ec:	    move.l 8(sp),d0
    79f0:	    move.l d0,4(sp)
	if (!newStat) {
    79f4:	/-- bne.s 7a24 <addStatusBar+0x60>
		newStat -> next = nowStatus -> firstStatusBar;
    79f6:	|   movea.l 1c408 <nowStatus>,a0
    79fc:	|   move.l (a0),d0
    79fe:	|   movea.l 4(sp),a0
    7a02:	|   move.l d0,4(a0)
		newStat -> text = copyString ("");
    7a06:	|   pea 18aac <PutChar+0xc7c>
    7a0c:	|   jsr b8 <copyString>
    7a12:	|   addq.l #4,sp
    7a14:	|   movea.l 4(sp),a0
    7a18:	|   move.l d0,(a0)
		nowStatus -> firstStatusBar = newStat;
    7a1a:	|   movea.l 1c408 <nowStatus>,a0
    7a20:	|   move.l 4(sp),(a0)
	}
}
    7a24:	\-> nop
    7a26:	    movea.l (sp)+,a6
    7a28:	    lea 16(sp),sp
    7a2c:	    rts

00007a2e <clearStatusBar>:

void clearStatusBar () {
    7a2e:	       lea -16(sp),sp
    7a32:	       move.l a6,-(sp)
	struct statusBar * stat = nowStatus -> firstStatusBar;
    7a34:	       movea.l 1c408 <nowStatus>,a0
    7a3a:	       move.l (a0),16(sp)
	struct statusBar * kill;
	nowStatus -> litStatus = -1;
    7a3e:	       movea.l 1c408 <nowStatus>,a0
    7a44:	       moveq #-1,d0
    7a46:	       move.l d0,6(a0)
	while (stat) {
    7a4a:	   /-- bra.s 7a8a <clearStatusBar+0x5c>
		kill = stat;
    7a4c:	/--|-> move.l 16(sp),12(sp)
		stat = stat -> next;
    7a52:	|  |   movea.l 16(sp),a0
    7a56:	|  |   move.l 4(a0),16(sp)
		FreeVec(kill -> text);
    7a5c:	|  |   movea.l 12(sp),a0
    7a60:	|  |   move.l (a0),8(sp)
    7a64:	|  |   move.l 1ca82 <SysBase>,d0
    7a6a:	|  |   movea.l d0,a6
    7a6c:	|  |   movea.l 8(sp),a1
    7a70:	|  |   jsr -690(a6)
		FreeVec(kill);
    7a74:	|  |   move.l 12(sp),4(sp)
    7a7a:	|  |   move.l 1ca82 <SysBase>,d0
    7a80:	|  |   movea.l d0,a6
    7a82:	|  |   movea.l 4(sp),a1
    7a86:	|  |   jsr -690(a6)
	while (stat) {
    7a8a:	|  \-> tst.l 16(sp)
    7a8e:	\----- bne.s 7a4c <clearStatusBar+0x1e>
	}
	nowStatus -> firstStatusBar = NULL;
    7a90:	       movea.l 1c408 <nowStatus>,a0
    7a96:	       clr.l (a0)
}
    7a98:	       nop
    7a9a:	       movea.l (sp)+,a6
    7a9c:	       lea 16(sp),sp
    7aa0:	       rts

00007aa2 <initStatusBar>:

void initStatusBar () {
	mainStatus.firstStatusBar = NULL;
    7aa2:	clr.l 1cab4 <mainStatus>
	mainStatus.alignStatus = IN_THE_CENTRE;
    7aa8:	move.w #-1,1cab8 <mainStatus+0x4>
	mainStatus.litStatus = -1;
    7ab0:	moveq #-1,d0
    7ab2:	move.l d0,1caba <mainStatus+0x6>
	mainStatus.statusX = 10;
    7ab8:	moveq #10,d0
    7aba:	move.l d0,1cabe <mainStatus+0xa>
	mainStatus.statusY = winHeight - 15;
    7ac0:	movea.l 1c9da <winHeight>,a0
    7ac6:	lea -15(a0),a0
    7aca:	move.l a0,d0
    7acc:	move.l d0,1cac2 <mainStatus+0xe>
	//statusBarColour (255, 255, 255); Amiga Todo: Amigize this
	//statusBarLitColour (255, 255, 128); Amiga Todo: Amigize this
}
    7ad2:	nop
    7ad4:	rts

00007ad6 <killLastStatus>:

void killLastStatus () {
    7ad6:	    lea -12(sp),sp
    7ada:	    move.l a6,-(sp)
	if (nowStatus -> firstStatusBar) {
    7adc:	    movea.l 1c408 <nowStatus>,a0
    7ae2:	    move.l (a0),d0
    7ae4:	/-- beq.s 7b2e <killLastStatus+0x58>
		struct statusBar * kill = nowStatus -> firstStatusBar;
    7ae6:	|   movea.l 1c408 <nowStatus>,a0
    7aec:	|   move.l (a0),12(sp)
		nowStatus -> firstStatusBar = kill -> next;
    7af0:	|   movea.l 1c408 <nowStatus>,a0
    7af6:	|   movea.l 12(sp),a1
    7afa:	|   move.l 4(a1),d0
    7afe:	|   move.l d0,(a0)
		FreeVec(kill -> text);
    7b00:	|   movea.l 12(sp),a0
    7b04:	|   move.l (a0),8(sp)
    7b08:	|   move.l 1ca82 <SysBase>,d0
    7b0e:	|   movea.l d0,a6
    7b10:	|   movea.l 8(sp),a1
    7b14:	|   jsr -690(a6)
		FreeVec(kill);
    7b18:	|   move.l 12(sp),4(sp)
    7b1e:	|   move.l 1ca82 <SysBase>,d0
    7b24:	|   movea.l d0,a6
    7b26:	|   movea.l 4(sp),a1
    7b2a:	|   jsr -690(a6)
	}
}
    7b2e:	\-> nop
    7b30:	    movea.l (sp)+,a6
    7b32:	    lea 12(sp),sp
    7b36:	    rts

00007b38 <positionStatus>:
	}
	return TRUE;
}

void positionStatus (int x, int y) {
	nowStatus -> statusX = x;
    7b38:	movea.l 1c408 <nowStatus>,a0
    7b3e:	move.l 4(sp),10(a0)
	nowStatus -> statusY = y;
    7b44:	movea.l 1c408 <nowStatus>,a0
    7b4a:	move.l 8(sp),14(a0)
}
    7b50:	nop
    7b52:	rts

00007b54 <saveStatusBars>:


void saveStatusBars (BPTR fp) {
    7b54:	       lea -100(sp),sp
    7b58:	       move.l a6,-(sp)
    7b5a:	       move.l d2,-(sp)
	struct statusBar * viewLine = nowStatus -> firstStatusBar;
    7b5c:	       movea.l 1c408 <nowStatus>,a0
    7b62:	       move.l (a0),104(sp)

	put2bytes (nowStatus -> alignStatus, fp);
    7b66:	       movea.l 1c408 <nowStatus>,a0
    7b6c:	       move.w 4(a0),d0
    7b70:	       move.w d0,d0
    7b72:	       andi.l #65535,d0
    7b78:	       move.l 112(sp),-(sp)
    7b7c:	       move.l d0,-(sp)
    7b7e:	       jsr 8d0 <put2bytes>
    7b84:	       addq.l #8,sp
	putSigned (nowStatus -> litStatus, fp);
    7b86:	       movea.l 1c408 <nowStatus>,a0
    7b8c:	       move.l 6(a0),d0
    7b90:	       move.l d0,d0
    7b92:	       movea.w d0,a0
    7b94:	       move.l 112(sp),-(sp)
    7b98:	       move.l a0,-(sp)
    7b9a:	       jsr a9c <putSigned>
    7ba0:	       addq.l #8,sp
	put2bytes (nowStatus -> statusX, fp);
    7ba2:	       movea.l 1c408 <nowStatus>,a0
    7ba8:	       move.l 10(a0),d0
    7bac:	       move.l 112(sp),-(sp)
    7bb0:	       move.l d0,-(sp)
    7bb2:	       jsr 8d0 <put2bytes>
    7bb8:	       addq.l #8,sp
	put2bytes (nowStatus -> statusY, fp);
    7bba:	       movea.l 1c408 <nowStatus>,a0
    7bc0:	       move.l 14(a0),d0
    7bc4:	       move.l 112(sp),-(sp)
    7bc8:	       move.l d0,-(sp)
    7bca:	       jsr 8d0 <put2bytes>
    7bd0:	       addq.l #8,sp

	FPutC (fp, nowStatus -> statusR);
    7bd2:	       move.l 112(sp),100(sp)
    7bd8:	       movea.l 1c408 <nowStatus>,a0
    7bde:	       move.l 18(a0),96(sp)
    7be4:	       move.l 1ca8a <DOSBase>,d0
    7bea:	       movea.l d0,a6
    7bec:	       move.l 100(sp),d1
    7bf0:	       move.l 96(sp),d2
    7bf4:	       jsr -312(a6)
    7bf8:	       move.l d0,92(sp)
	FPutC (fp, nowStatus -> statusG);
    7bfc:	       move.l 112(sp),88(sp)
    7c02:	       movea.l 1c408 <nowStatus>,a0
    7c08:	       move.l 22(a0),84(sp)
    7c0e:	       move.l 1ca8a <DOSBase>,d0
    7c14:	       movea.l d0,a6
    7c16:	       move.l 88(sp),d1
    7c1a:	       move.l 84(sp),d2
    7c1e:	       jsr -312(a6)
    7c22:	       move.l d0,80(sp)
	FPutC (fp, nowStatus -> statusB);
    7c26:	       move.l 112(sp),76(sp)
    7c2c:	       movea.l 1c408 <nowStatus>,a0
    7c32:	       move.l 26(a0),72(sp)
    7c38:	       move.l 1ca8a <DOSBase>,d0
    7c3e:	       movea.l d0,a6
    7c40:	       move.l 76(sp),d1
    7c44:	       move.l 72(sp),d2
    7c48:	       jsr -312(a6)
    7c4c:	       move.l d0,68(sp)
	FPutC (fp, nowStatus -> statusLR);
    7c50:	       move.l 112(sp),64(sp)
    7c56:	       movea.l 1c408 <nowStatus>,a0
    7c5c:	       move.l 30(a0),60(sp)
    7c62:	       move.l 1ca8a <DOSBase>,d0
    7c68:	       movea.l d0,a6
    7c6a:	       move.l 64(sp),d1
    7c6e:	       move.l 60(sp),d2
    7c72:	       jsr -312(a6)
    7c76:	       move.l d0,56(sp)
	FPutC (fp, nowStatus -> statusLG);
    7c7a:	       move.l 112(sp),52(sp)
    7c80:	       movea.l 1c408 <nowStatus>,a0
    7c86:	       move.l 34(a0),48(sp)
    7c8c:	       move.l 1ca8a <DOSBase>,d0
    7c92:	       movea.l d0,a6
    7c94:	       move.l 52(sp),d1
    7c98:	       move.l 48(sp),d2
    7c9c:	       jsr -312(a6)
    7ca0:	       move.l d0,44(sp)
	FPutC (fp, nowStatus -> statusLB);
    7ca4:	       move.l 112(sp),40(sp)
    7caa:	       movea.l 1c408 <nowStatus>,a0
    7cb0:	       move.l 38(a0),36(sp)
    7cb6:	       move.l 1ca8a <DOSBase>,d0
    7cbc:	       movea.l d0,a6
    7cbe:	       move.l 40(sp),d1
    7cc2:	       move.l 36(sp),d2
    7cc6:	       jsr -312(a6)
    7cca:	       move.l d0,32(sp)

	// Write what's being said
	while (viewLine) {
    7cce:	   /-- bra.s 7d12 <saveStatusBars+0x1be>
		FPutC (fp,1);
    7cd0:	/--|-> move.l 112(sp),16(sp)
    7cd6:	|  |   moveq #1,d0
    7cd8:	|  |   move.l d0,12(sp)
    7cdc:	|  |   move.l 1ca8a <DOSBase>,d0
    7ce2:	|  |   movea.l d0,a6
    7ce4:	|  |   move.l 16(sp),d1
    7ce8:	|  |   move.l 12(sp),d2
    7cec:	|  |   jsr -312(a6)
    7cf0:	|  |   move.l d0,8(sp)
		writeString (viewLine -> text, fp);
    7cf4:	|  |   movea.l 104(sp),a0
    7cf8:	|  |   move.l (a0),d0
    7cfa:	|  |   move.l 112(sp),-(sp)
    7cfe:	|  |   move.l d0,-(sp)
    7d00:	|  |   jsr bd8 <writeString>
    7d06:	|  |   addq.l #8,sp
		viewLine = viewLine -> next;
    7d08:	|  |   movea.l 104(sp),a0
    7d0c:	|  |   move.l 4(a0),104(sp)
	while (viewLine) {
    7d12:	|  \-> tst.l 104(sp)
    7d16:	\----- bne.s 7cd0 <saveStatusBars+0x17c>
	}
	FPutC (fp,0);
    7d18:	       move.l 112(sp),28(sp)
    7d1e:	       clr.l 24(sp)
    7d22:	       move.l 1ca8a <DOSBase>,d0
    7d28:	       movea.l d0,a6
    7d2a:	       move.l 28(sp),d1
    7d2e:	       move.l 24(sp),d2
    7d32:	       jsr -312(a6)
    7d36:	       move.l d0,20(sp)
}
    7d3a:	       nop
    7d3c:	       move.l (sp)+,d2
    7d3e:	       movea.l (sp)+,a6
    7d40:	       lea 100(sp),sp
    7d44:	       rts

00007d46 <setLitStatus>:

void setLitStatus (int i) {
	nowStatus -> litStatus = i;
    7d46:	movea.l 1c408 <nowStatus>,a0
    7d4c:	move.l 4(sp),6(a0)
}
    7d52:	nop
    7d54:	rts

00007d56 <setStatusBar>:

void setStatusBar (char * txt) {
    7d56:	    subq.l #4,sp
    7d58:	    move.l a6,-(sp)
    7d5a:	    move.l a2,-(sp)
	if (nowStatus -> firstStatusBar) {
    7d5c:	    movea.l 1c408 <nowStatus>,a0
    7d62:	    move.l (a0),d0
    7d64:	/-- beq.s 7d98 <setStatusBar+0x42>
		FreeVec(nowStatus -> firstStatusBar -> text);
    7d66:	|   movea.l 1c408 <nowStatus>,a0
    7d6c:	|   movea.l (a0),a0
    7d6e:	|   move.l (a0),8(sp)
    7d72:	|   move.l 1ca82 <SysBase>,d0
    7d78:	|   movea.l d0,a6
    7d7a:	|   movea.l 8(sp),a1
    7d7e:	|   jsr -690(a6)
		nowStatus -> firstStatusBar -> text = copyString (txt);
    7d82:	|   movea.l 1c408 <nowStatus>,a0
    7d88:	|   movea.l (a0),a2
    7d8a:	|   move.l 16(sp),-(sp)
    7d8e:	|   jsr b8 <copyString>
    7d94:	|   addq.l #4,sp
    7d96:	|   move.l d0,(a2)
	}
}
    7d98:	\-> nop
    7d9a:	    movea.l (sp)+,a2
    7d9c:	    movea.l (sp)+,a6
    7d9e:	    addq.l #4,sp
    7da0:	    rts

00007da2 <statusBarText>:

const char * statusBarText () {
	if (nowStatus -> firstStatusBar) {
    7da2:	       movea.l 1c408 <nowStatus>,a0
    7da8:	       move.l (a0),d0
    7daa:	/----- beq.s 7db8 <statusBarText+0x16>
		return nowStatus -> firstStatusBar -> text;
    7dac:	|      movea.l 1c408 <nowStatus>,a0
    7db2:	|      movea.l (a0),a0
    7db4:	|      move.l (a0),d0
    7db6:	|  /-- bra.s 7dbe <statusBarText+0x1c>
	} else {
		return "";
    7db8:	\--|-> move.l #101036,d0
	}
    7dbe:	   \-> rts

00007dc0 <addSpeechLine>:

struct speechStruct * speech;
FLOAT speechSpeed = 1;


void addSpeechLine (char * theLine, int x, int *offset) {
    7dc0:	       lea -28(sp),sp
    7dc4:	       movem.l d2-d5/a6,-(sp)
	int halfWidth = (stringWidth (theLine) >> 1)/cameraZoom;
    7dc8:	       move.l 52(sp),-(sp)
    7dcc:	       jsr 159e8 <stringWidth>
    7dd2:	       addq.l #4,sp
    7dd4:	       asr.l #1,d0
    7dd6:	       move.l d0,-(sp)
    7dd8:	       jsr 17798 <__floatsisf>
    7dde:	       addq.l #4,sp
    7de0:	       move.l d0,d1
    7de2:	       move.l 1c420 <cameraZoom>,d0
    7de8:	       move.l d0,-(sp)
    7dea:	       move.l d1,-(sp)
    7dec:	       jsr 1764e <__divsf3>
    7df2:	       addq.l #8,sp
    7df4:	       move.l d0,-(sp)
    7df6:	       jsr 17730 <__fixsfsi>
    7dfc:	       addq.l #4,sp
    7dfe:	       move.l d0,44(sp)
	int xx1 = x - (halfWidth);
    7e02:	       move.l 56(sp),d0
    7e06:	       sub.l 44(sp),d0
    7e0a:	       move.l d0,40(sp)
	int xx2 = x + (halfWidth);
    7e0e:	       move.l 56(sp),d0
    7e12:	       add.l 44(sp),d0
    7e16:	       move.l d0,36(sp)
	struct speechLine * newLine = AllocVec(sizeof(struct speechLine),MEMF_ANY);
    7e1a:	       moveq #12,d0
    7e1c:	       move.l d0,32(sp)
    7e20:	       clr.l 28(sp)
    7e24:	       move.l 1ca82 <SysBase>,d0
    7e2a:	       movea.l d0,a6
    7e2c:	       move.l 32(sp),d0
    7e30:	       move.l 28(sp),d1
    7e34:	       jsr -684(a6)
    7e38:	       move.l d0,24(sp)
    7e3c:	       move.l 24(sp),d0
    7e40:	       move.l d0,20(sp)

	newLine -> next = speech -> allSpeech;
    7e44:	       movea.l 1cade <speech>,a0
    7e4a:	       move.l 4(a0),d0
    7e4e:	       movea.l 20(sp),a0
    7e52:	       move.l d0,4(a0)
	newLine -> textLine = copyString (theLine);
    7e56:	       move.l 52(sp),-(sp)
    7e5a:	       jsr b8 <copyString>
    7e60:	       addq.l #4,sp
    7e62:	       movea.l 20(sp),a0
    7e66:	       move.l d0,(a0)
	newLine -> x = xx1;
    7e68:	       movea.l 20(sp),a0
    7e6c:	       move.l 40(sp),8(a0)
	speech -> allSpeech = newLine;
    7e72:	       movea.l 1cade <speech>,a0
    7e78:	       move.l 20(sp),4(a0)
	if ((xx1 < 5) && (*offset < (5 - xx1))) {
    7e7e:	       moveq #4,d0
    7e80:	       cmp.l 40(sp),d0
    7e84:	   /-- blt.s 7ea6 <addSpeechLine+0xe6>
    7e86:	   |   movea.l 60(sp),a0
    7e8a:	   |   move.l (a0),d1
    7e8c:	   |   moveq #5,d0
    7e8e:	   |   sub.l 40(sp),d0
    7e92:	   |   cmp.l d1,d0
    7e94:	   +-- ble.s 7ea6 <addSpeechLine+0xe6>
		*offset = 5 - xx1;
    7e96:	   |   moveq #5,d0
    7e98:	   |   sub.l 40(sp),d0
    7e9c:	   |   movea.l 60(sp),a0
    7ea0:	   |   move.l d0,(a0)
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
		*offset = (int) ((FLOAT)winWidth/cameraZoom) - 5 - xx2;
	}
}
    7ea2:	/--|-- bra.w 7fd2 <addSpeechLine+0x212>
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
    7ea6:	|  \-> move.l 36(sp),-(sp)
    7eaa:	|      jsr 17798 <__floatsisf>
    7eb0:	|      addq.l #4,sp
    7eb2:	|      move.l d0,d2
    7eb4:	|      move.l 1c9d6 <winWidth>,d0
    7eba:	|      move.l d0,-(sp)
    7ebc:	|      jsr 177c0 <__floatunsisf>
    7ec2:	|      addq.l #4,sp
    7ec4:	|      move.l d0,d1
    7ec6:	|      move.l 1c420 <cameraZoom>,d0
    7ecc:	|      move.l d0,-(sp)
    7ece:	|      move.l d1,-(sp)
    7ed0:	|      jsr 1764e <__divsf3>
    7ed6:	|      addq.l #8,sp
    7ed8:	|      move.l #1084227584,-(sp)
    7ede:	|      move.l d0,-(sp)
    7ee0:	|      jsr 17a8c <__subsf3>
    7ee6:	|      addq.l #8,sp
    7ee8:	|      move.l d0,-(sp)
    7eea:	|      move.l d2,-(sp)
    7eec:	|      jsr 17880 <__gesf2>
    7ef2:	|      addq.l #8,sp
    7ef4:	|      tst.l d0
    7ef6:	|  /-- bge.s 7efc <addSpeechLine+0x13c>
}
    7ef8:	+--|-- bra.w 7fd2 <addSpeechLine+0x212>
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
    7efc:	|  \-> movea.l 60(sp),a0
    7f00:	|      move.l (a0),d0
    7f02:	|      move.l d0,-(sp)
    7f04:	|      jsr 17798 <__floatsisf>
    7f0a:	|      addq.l #4,sp
    7f0c:	|      move.l d0,-(sp)
    7f0e:	|      jsr 176ba <__extendsfdf2>
    7f14:	|      addq.l #4,sp
    7f16:	|      move.l d0,d4
    7f18:	|      move.l d1,d5
    7f1a:	|      move.l 1c9d6 <winWidth>,d0
    7f20:	|      move.l d0,-(sp)
    7f22:	|      jsr 177c0 <__floatunsisf>
    7f28:	|      addq.l #4,sp
    7f2a:	|      move.l d0,d1
    7f2c:	|      move.l 1c420 <cameraZoom>,d0
    7f32:	|      move.l d0,-(sp)
    7f34:	|      move.l d1,-(sp)
    7f36:	|      jsr 1764e <__divsf3>
    7f3c:	|      addq.l #8,sp
    7f3e:	|      move.l d0,-(sp)
    7f40:	|      jsr 176ba <__extendsfdf2>
    7f46:	|      addq.l #4,sp
    7f48:	|      clr.l -(sp)
    7f4a:	|      move.l #1075052544,-(sp)
    7f50:	|      move.l d1,-(sp)
    7f52:	|      move.l d0,-(sp)
    7f54:	|      jsr 17a2a <__subdf3>
    7f5a:	|      lea 16(sp),sp
    7f5e:	|      move.l d0,d2
    7f60:	|      move.l d1,d3
    7f62:	|      move.l 36(sp),-(sp)
    7f66:	|      jsr 17758 <__floatsidf>
    7f6c:	|      addq.l #4,sp
    7f6e:	|      move.l d1,-(sp)
    7f70:	|      move.l d0,-(sp)
    7f72:	|      move.l d3,-(sp)
    7f74:	|      move.l d2,-(sp)
    7f76:	|      jsr 17a2a <__subdf3>
    7f7c:	|      lea 16(sp),sp
    7f80:	|      move.l d1,-(sp)
    7f82:	|      move.l d0,-(sp)
    7f84:	|      move.l d5,-(sp)
    7f86:	|      move.l d4,-(sp)
    7f88:	|      jsr 178b6 <__gtdf2>
    7f8e:	|      lea 16(sp),sp
    7f92:	|      tst.l d0
    7f94:	|  /-- bgt.s 7f98 <addSpeechLine+0x1d8>
}
    7f96:	+--|-- bra.s 7fd2 <addSpeechLine+0x212>
		*offset = (int) ((FLOAT)winWidth/cameraZoom) - 5 - xx2;
    7f98:	|  \-> move.l 1c9d6 <winWidth>,d0
    7f9e:	|      move.l d0,-(sp)
    7fa0:	|      jsr 177c0 <__floatunsisf>
    7fa6:	|      addq.l #4,sp
    7fa8:	|      move.l d0,d1
    7faa:	|      move.l 1c420 <cameraZoom>,d0
    7fb0:	|      move.l d0,-(sp)
    7fb2:	|      move.l d1,-(sp)
    7fb4:	|      jsr 1764e <__divsf3>
    7fba:	|      addq.l #8,sp
    7fbc:	|      move.l d0,-(sp)
    7fbe:	|      jsr 17730 <__fixsfsi>
    7fc4:	|      addq.l #4,sp
    7fc6:	|      subq.l #5,d0
    7fc8:	|      sub.l 36(sp),d0
    7fcc:	|      movea.l 60(sp),a0
    7fd0:	|      move.l d0,(a0)
}
    7fd2:	\----> nop
    7fd4:	       movem.l (sp)+,d2-d5/a6
    7fd8:	       lea 28(sp),sp
    7fdc:	       rts

00007fde <initSpeech>:


void initSpeech () {
    7fde:	       lea -12(sp),sp
    7fe2:	       move.l a6,-(sp)
	speech = AllocVec(sizeof(struct speechStruct), MEMF_ANY);
    7fe4:	       moveq #20,d0
    7fe6:	       move.l d0,12(sp)
    7fea:	       clr.l 8(sp)
    7fee:	       move.l 1ca82 <SysBase>,d0
    7ff4:	       movea.l d0,a6
    7ff6:	       move.l 12(sp),d0
    7ffa:	       move.l 8(sp),d1
    7ffe:	       jsr -684(a6)
    8002:	       move.l d0,4(sp)
    8006:	       move.l 4(sp),d0
    800a:	       move.l d0,1cade <speech>
	if (speech) {
    8010:	       move.l 1cade <speech>,d0
    8016:	/----- beq.s 8042 <initSpeech+0x64>
		speech -> currentTalker = NULL;
    8018:	|      movea.l 1cade <speech>,a0
    801e:	|      clr.l (a0)
		speech -> allSpeech = NULL;
    8020:	|      movea.l 1cade <speech>,a0
    8026:	|      clr.l 4(a0)
		speech -> speechY = 0;
    802a:	|      movea.l 1cade <speech>,a0
    8030:	|      clr.l 8(a0)
		speech -> lastFile = -1;
    8034:	|      movea.l 1cade <speech>,a0
    803a:	|      moveq #-1,d0
    803c:	|      move.l d0,12(a0)
	} else
    {
        KPrintF("Could not allocate memory");
    }
}
    8040:	|  /-- bra.s 8050 <initSpeech+0x72>
        KPrintF("Could not allocate memory");
    8042:	\--|-> pea 19093 <PutChar+0x1263>
    8048:	   |   jsr 17366 <KPrintF>
    804e:	   |   addq.l #4,sp
}
    8050:	   \-> nop
    8052:	       movea.l (sp)+,a6
    8054:	       lea 12(sp),sp
    8058:	       rts

0000805a <isThereAnySpeechGoingOn>:

int isThereAnySpeechGoingOn () {
	return speech -> allSpeech ? speech -> lookWhosTalking : -1;
    805a:	       movea.l 1cade <speech>,a0
    8060:	       move.l 4(a0),d0
    8064:	/----- beq.s 8072 <isThereAnySpeechGoingOn+0x18>
    8066:	|      movea.l 1cade <speech>,a0
    806c:	|      move.l 16(a0),d0
    8070:	|  /-- bra.s 8074 <isThereAnySpeechGoingOn+0x1a>
    8072:	\--|-> moveq #-1,d0
}
    8074:	   \-> rts

00008076 <killAllSpeech>:

void killAllSpeech () {
    8076:	       lea -12(sp),sp
    807a:	       move.l a6,-(sp)
	if (speech -> lastFile != -1) {
    807c:	       movea.l 1cade <speech>,a0
    8082:	       move.l 12(a0),d0
    8086:	       moveq #-1,d1
    8088:	       cmp.l d0,d1
    808a:	   /-- beq.s 8098 <killAllSpeech+0x22>
		//huntKillSound (speech -> lastFile); Amiga Todo: Replace?
		speech -> lastFile = -1;
    808c:	   |   movea.l 1cade <speech>,a0
    8092:	   |   moveq #-1,d0
    8094:	   |   move.l d0,12(a0)
	}

	if (speech -> currentTalker) {
    8098:	   \-> movea.l 1cade <speech>,a0
    809e:	       move.l (a0),d0
    80a0:	/----- beq.w 812c <killAllSpeech+0xb6>
		makeSilent (* (speech -> currentTalker));
    80a4:	|      movea.l 1cade <speech>,a0
    80aa:	|      move.l (a0),d1
    80ac:	|      lea -132(sp),sp
    80b0:	|      move.l sp,d0
    80b2:	|      movea.w #132,a0
    80b6:	|      move.l a0,-(sp)
    80b8:	|      move.l d1,-(sp)
    80ba:	|      move.l d0,-(sp)
    80bc:	|      jsr 1731a <memcpy>
    80c2:	|      lea 12(sp),sp
    80c6:	|      jsr ac70 <makeSilent>
    80cc:	|      lea 132(sp),sp
		speech -> currentTalker = NULL;
    80d0:	|      movea.l 1cade <speech>,a0
    80d6:	|      clr.l (a0)
	}
	
	struct speechLine * killMe;
	
	while (speech -> allSpeech) {
    80d8:	+----- bra.s 812c <killAllSpeech+0xb6>
		killMe = speech -> allSpeech;
    80da:	|  /-> movea.l 1cade <speech>,a0
    80e0:	|  |   move.l 4(a0),12(sp)
		speech -> allSpeech = speech -> allSpeech -> next;
    80e6:	|  |   movea.l 1cade <speech>,a0
    80ec:	|  |   movea.l 4(a0),a1
    80f0:	|  |   movea.l 1cade <speech>,a0
    80f6:	|  |   move.l 4(a1),d0
    80fa:	|  |   move.l d0,4(a0)
		FreeVec(killMe -> textLine);
    80fe:	|  |   movea.l 12(sp),a0
    8102:	|  |   move.l (a0),8(sp)
    8106:	|  |   move.l 1ca82 <SysBase>,d0
    810c:	|  |   movea.l d0,a6
    810e:	|  |   movea.l 8(sp),a1
    8112:	|  |   jsr -690(a6)
		FreeVec(killMe);
    8116:	|  |   move.l 12(sp),4(sp)
    811c:	|  |   move.l 1ca82 <SysBase>,d0
    8122:	|  |   movea.l d0,a6
    8124:	|  |   movea.l 4(sp),a1
    8128:	|  |   jsr -690(a6)
	while (speech -> allSpeech) {
    812c:	\--|-> movea.l 1cade <speech>,a0
    8132:	   |   move.l 4(a0),d0
    8136:	   \-- bne.s 80da <killAllSpeech+0x64>
	}
}
    8138:	       nop
    813a:	       nop
    813c:	       movea.l (sp)+,a6
    813e:	       lea 12(sp),sp
    8142:	       rts

00008144 <makeTalker>:

	return TRUE;
}

void makeTalker (struct onScreenPerson *me) {
	setFrames (me, ANI_TALK);
    8144:	pea 2 <_start+0x2>
    8148:	move.l 8(sp),-(sp)
    814c:	jsr 82a4 <setFrames>
    8152:	addq.l #8,sp
}
    8154:	nop
    8156:	rts

00008158 <saveSpeech>:

void saveSpeech (struct speechStruct * sS, BPTR fp) {
    8158:	       lea -52(sp),sp
    815c:	       move.l a6,-(sp)
    815e:	       move.l d2,-(sp)
	struct speechLine * viewLine = sS -> allSpeech;
    8160:	       movea.l 64(sp),a0
    8164:	       move.l 4(a0),56(sp)
	
	putFloat (speechSpeed, fp);
    816a:	       move.l 1c40c <speechSpeed>,d0
    8170:	       move.l 68(sp),-(sp)
    8174:	       move.l d0,-(sp)
    8176:	       jsr a46 <putFloat>
    817c:	       addq.l #8,sp
	
		// Write y co-ordinate
		put2bytes (sS -> speechY, fp);
    817e:	       movea.l 64(sp),a0
    8182:	       move.l 8(a0),d0
    8186:	       move.l 68(sp),-(sp)
    818a:	       move.l d0,-(sp)
    818c:	       jsr 8d0 <put2bytes>
    8192:	       addq.l #8,sp
		
		// Write which character's talking
		put2bytes (sS -> lookWhosTalking, fp);		
    8194:	       movea.l 64(sp),a0
    8198:	       move.l 16(a0),d0
    819c:	       move.l 68(sp),-(sp)
    81a0:	       move.l d0,-(sp)
    81a2:	       jsr 8d0 <put2bytes>
    81a8:	       addq.l #8,sp
		if (sS -> currentTalker) {
    81aa:	       movea.l 64(sp),a0
    81ae:	       move.l (a0),d0
    81b0:	   /-- beq.s 81f4 <saveSpeech+0x9c>
			FPutC (fp, 1);
    81b2:	   |   move.l 68(sp),40(sp)
    81b8:	   |   moveq #1,d0
    81ba:	   |   move.l d0,36(sp)
    81be:	   |   move.l 1ca8a <DOSBase>,d0
    81c4:	   |   movea.l d0,a6
    81c6:	   |   move.l 40(sp),d1
    81ca:	   |   move.l 36(sp),d2
    81ce:	   |   jsr -312(a6)
    81d2:	   |   move.l d0,32(sp)
			put2bytes (sS->currentTalker->thisType->objectNum, fp);
    81d6:	   |   movea.l 64(sp),a0
    81da:	   |   movea.l (a0),a0
    81dc:	   |   movea.l 114(a0),a0
    81e0:	   |   move.l 4(a0),d0
    81e4:	   |   move.l 68(sp),-(sp)
    81e8:	   |   move.l d0,-(sp)
    81ea:	   |   jsr 8d0 <put2bytes>
    81f0:	   |   addq.l #8,sp
    81f2:	/--|-- bra.s 8270 <saveSpeech+0x118>
		} else {
			FPutC (fp, 0);
    81f4:	|  \-> move.l 68(sp),52(sp)
    81fa:	|      clr.l 48(sp)
    81fe:	|      move.l 1ca8a <DOSBase>,d0
    8204:	|      movea.l d0,a6
    8206:	|      move.l 52(sp),d1
    820a:	|      move.l 48(sp),d2
    820e:	|      jsr -312(a6)
    8212:	|      move.l d0,44(sp)
		}
		
		// Write what's being said
		while (viewLine) {
    8216:	+----- bra.s 8270 <saveSpeech+0x118>
			FPutC (fp, 1);
    8218:	|  /-> move.l 68(sp),16(sp)
    821e:	|  |   moveq #1,d0
    8220:	|  |   move.l d0,12(sp)
    8224:	|  |   move.l 1ca8a <DOSBase>,d0
    822a:	|  |   movea.l d0,a6
    822c:	|  |   move.l 16(sp),d1
    8230:	|  |   move.l 12(sp),d2
    8234:	|  |   jsr -312(a6)
    8238:	|  |   move.l d0,8(sp)
			writeString (viewLine -> textLine, fp);
    823c:	|  |   movea.l 56(sp),a0
    8240:	|  |   move.l (a0),d0
    8242:	|  |   move.l 68(sp),-(sp)
    8246:	|  |   move.l d0,-(sp)
    8248:	|  |   jsr bd8 <writeString>
    824e:	|  |   addq.l #8,sp
			put2bytes (viewLine -> x, fp);
    8250:	|  |   movea.l 56(sp),a0
    8254:	|  |   move.l 8(a0),d0
    8258:	|  |   move.l 68(sp),-(sp)
    825c:	|  |   move.l d0,-(sp)
    825e:	|  |   jsr 8d0 <put2bytes>
    8264:	|  |   addq.l #8,sp
			viewLine = viewLine -> next;
    8266:	|  |   movea.l 56(sp),a0
    826a:	|  |   move.l 4(a0),56(sp)
		while (viewLine) {
    8270:	\--|-> tst.l 56(sp)
    8274:	   \-- bne.s 8218 <saveSpeech+0xc0>
		}
		FPutC (fp, 0);
    8276:	       move.l 68(sp),28(sp)
    827c:	       clr.l 24(sp)
    8280:	       move.l 1ca8a <DOSBase>,d0
    8286:	       movea.l d0,a6
    8288:	       move.l 28(sp),d1
    828c:	       move.l 24(sp),d2
    8290:	       jsr -312(a6)
    8294:	       move.l d0,20(sp)
}
    8298:	       nop
    829a:	       move.l (sp)+,d2
    829c:	       movea.l (sp)+,a6
    829e:	       lea 52(sp),sp
    82a2:	       rts

000082a4 <setFrames>:

void setFrames (struct onScreenPerson *m, int a) {
    82a4:	move.l d2,-(sp)
	m->myAnim = m->myPersona -> animation[(a * m->myPersona -> numDirections) + m->direction];
    82a6:	movea.l 8(sp),a0
    82aa:	movea.l 80(a0),a0
    82ae:	move.l (a0),d2
    82b0:	movea.l 8(sp),a0
    82b4:	movea.l 80(a0),a0
    82b8:	move.l 4(a0),d0
    82bc:	move.l 12(sp),-(sp)
    82c0:	move.l d0,-(sp)
    82c2:	jsr 17d1a <__mulsi3>
    82c8:	addq.l #8,sp
    82ca:	move.l d0,d1
    82cc:	movea.l 8(sp),a0
    82d0:	move.l 106(a0),d0
    82d4:	add.l d1,d0
    82d6:	add.l d0,d0
    82d8:	add.l d0,d0
    82da:	movea.l d2,a0
    82dc:	adda.l d0,a0
    82de:	move.l (a0),d0
    82e0:	movea.l 8(sp),a0
    82e4:	move.l d0,72(a0)
}
    82e8:	nop
    82ea:	move.l (sp)+,d2
    82ec:	rts

000082ee <wrapSpeech>:

int wrapSpeech(char * theText, int objT, int sampleFile, BOOL animPerson) {
    82ee:	       lea -20(sp),sp
    82f2:	       move.l d2,-(sp)
    82f4:	       move.l 40(sp),d0
    82f8:	       move.w d0,d0
    82fa:	       move.w d0,6(sp)
    int i;

    speech->lookWhosTalking = objT;
    82fe:	       movea.l 1cade <speech>,a0
    8304:	       move.l 32(sp),16(a0)
    struct onScreenPerson * thisPerson = findPerson(objT);
    830a:	       move.l 32(sp),-(sp)
    830e:	       jsr a75a <findPerson>
    8314:	       addq.l #4,sp
    8316:	       move.l d0,16(sp)
    if (thisPerson) {
    831a:	   /-- beq.s 8340 <wrapSpeech+0x52>
        //setObjFontColour(thisPerson->thisType); Todo Amigize this
        i = wrapSpeechPerson(theText, thisPerson, sampleFile, animPerson);
    831c:	   |   movea.w 6(sp),a0
    8320:	   |   move.l a0,-(sp)
    8322:	   |   move.l 40(sp),-(sp)
    8326:	   |   move.l 24(sp),-(sp)
    832a:	   |   move.l 40(sp),-(sp)
    832e:	   |   jsr 8406 <wrapSpeechPerson>
    8334:	   |   lea 16(sp),sp
    8338:	   |   move.l d0,20(sp)
    833c:	/--|-- bra.w 83fa <wrapSpeech+0x10c>
    } else {
        struct screenRegion * thisRegion = getRegionForObject(objT);
    8340:	|  \-> move.l 32(sp),-(sp)
    8344:	|      jsr 15b48 <getRegionForObject>
    834a:	|      addq.l #4,sp
    834c:	|      move.l d0,12(sp)
        if (thisRegion) {
    8350:	|  /-- beq.s 83bc <wrapSpeech+0xce>
            //setObjFontColour(thisRegion->thisType); Todo Amigize this
            i = wrapSpeechXY(theText, ((thisRegion->x1 + thisRegion->x2) >> 1) - cameraX, thisRegion->y1 - thisRegion->thisType->speechGap - cameraY, thisRegion->thisType->wrapSpeech, sampleFile);
    8352:	|  |   movea.l 12(sp),a0
    8356:	|  |   movea.l 28(a0),a0
    835a:	|  |   move.l 28(a0),d0
    835e:	|  |   movea.l 12(sp),a0
    8362:	|  |   movea.l 4(a0),a1
    8366:	|  |   movea.l 12(sp),a0
    836a:	|  |   movea.l 28(a0),a0
    836e:	|  |   move.l 20(a0),d1
    8372:	|  |   movea.l a1,a0
    8374:	|  |   suba.l d1,a0
    8376:	|  |   move.l 1cb40 <cameraY>,d1
    837c:	|  |   movea.l a0,a1
    837e:	|  |   suba.l d1,a1
    8380:	|  |   movea.l 12(sp),a0
    8384:	|  |   move.l (a0),d2
    8386:	|  |   movea.l 12(sp),a0
    838a:	|  |   move.l 8(a0),d1
    838e:	|  |   add.l d2,d1
    8390:	|  |   move.l d1,d2
    8392:	|  |   asr.l #1,d2
    8394:	|  |   move.l 1cb3c <cameraX>,d1
    839a:	|  |   movea.l d2,a0
    839c:	|  |   suba.l d1,a0
    839e:	|  |   move.l 36(sp),-(sp)
    83a2:	|  |   move.l d0,-(sp)
    83a4:	|  |   move.l a1,-(sp)
    83a6:	|  |   move.l a0,-(sp)
    83a8:	|  |   move.l 44(sp),-(sp)
    83ac:	|  |   jsr 8524 <wrapSpeechXY>
    83b2:	|  |   lea 20(sp),sp
    83b6:	|  |   move.l d0,20(sp)
    83ba:	+--|-- bra.s 83fa <wrapSpeech+0x10c>
        } else {
            struct objectType * temp = findObjectType(objT);
    83bc:	|  \-> move.l 32(sp),-(sp)
    83c0:	|      jsr d650 <findObjectType>
    83c6:	|      addq.l #4,sp
    83c8:	|      move.l d0,8(sp)
            //setObjFontColour(temp); Todo: Amigize this
            i = wrapSpeechXY(theText, winWidth >> 1, 10, temp->wrapSpeech, sampleFile);
    83cc:	|      movea.l 8(sp),a0
    83d0:	|      move.l 28(a0),d1
    83d4:	|      move.l 1c9d6 <winWidth>,d0
    83da:	|      lsr.l #1,d0
    83dc:	|      move.l 36(sp),-(sp)
    83e0:	|      move.l d1,-(sp)
    83e2:	|      pea a <_start+0xa>
    83e6:	|      move.l d0,-(sp)
    83e8:	|      move.l 44(sp),-(sp)
    83ec:	|      jsr 8524 <wrapSpeechXY>
    83f2:	|      lea 20(sp),sp
    83f6:	|      move.l d0,20(sp)
        }
    }
    return i;
    83fa:	\----> move.l 20(sp),d0
}
    83fe:	       move.l (sp)+,d2
    8400:	       lea 20(sp),sp
    8404:	       rts

00008406 <wrapSpeechPerson>:

int wrapSpeechPerson (char * theText, struct onScreenPerson *thePerson, int sampleFile, BOOL animPerson) {
    8406:	    subq.l #8,sp
    8408:	    movem.l d2-d4,-(sp)
    840c:	    move.l 36(sp),d0
    8410:	    move.w d0,d0
    8412:	    move.w d0,14(sp)
	int i = wrapSpeechXY (theText, thePerson->x - cameraX, thePerson->y - cameraY - (thePerson->scale * (thePerson->height - thePerson->floaty)) - thePerson->thisType -> speechGap, thePerson->thisType -> wrapSpeech, sampleFile);
    8416:	    movea.l 28(sp),a0
    841a:	    movea.l 114(a0),a0
    841e:	    move.l 28(a0),d2
    8422:	    movea.l 28(sp),a0
    8426:	    move.l 4(a0),d3
    842a:	    move.l 1cb40 <cameraY>,d0
    8430:	    move.l d0,-(sp)
    8432:	    jsr 17798 <__floatsisf>
    8438:	    addq.l #4,sp
    843a:	    move.l d0,-(sp)
    843c:	    move.l d3,-(sp)
    843e:	    jsr 17a8c <__subsf3>
    8444:	    addq.l #8,sp
    8446:	    move.l d0,d3
    8448:	    movea.l 28(sp),a0
    844c:	    move.l 32(a0),d4
    8450:	    movea.l 28(sp),a0
    8454:	    move.l 20(a0),d1
    8458:	    movea.l 28(sp),a0
    845c:	    move.l 24(a0),d0
    8460:	    sub.l d0,d1
    8462:	    move.l d1,-(sp)
    8464:	    jsr 17798 <__floatsisf>
    846a:	    addq.l #4,sp
    846c:	    move.l d0,-(sp)
    846e:	    move.l d4,-(sp)
    8470:	    jsr 1784a <__mulsf3>
    8476:	    addq.l #8,sp
    8478:	    move.l d0,-(sp)
    847a:	    move.l d3,-(sp)
    847c:	    jsr 17a8c <__subsf3>
    8482:	    addq.l #8,sp
    8484:	    move.l d0,d3
    8486:	    movea.l 28(sp),a0
    848a:	    movea.l 114(a0),a0
    848e:	    move.l 20(a0),d0
    8492:	    move.l d0,-(sp)
    8494:	    jsr 17798 <__floatsisf>
    849a:	    addq.l #4,sp
    849c:	    move.l d0,-(sp)
    849e:	    move.l d3,-(sp)
    84a0:	    jsr 17a8c <__subsf3>
    84a6:	    addq.l #8,sp
    84a8:	    move.l d0,-(sp)
    84aa:	    jsr 17730 <__fixsfsi>
    84b0:	    addq.l #4,sp
    84b2:	    move.l d0,d4
    84b4:	    movea.l 28(sp),a0
    84b8:	    move.l (a0),d3
    84ba:	    move.l 1cb3c <cameraX>,d0
    84c0:	    move.l d0,-(sp)
    84c2:	    jsr 17798 <__floatsisf>
    84c8:	    addq.l #4,sp
    84ca:	    move.l d0,-(sp)
    84cc:	    move.l d3,-(sp)
    84ce:	    jsr 17a8c <__subsf3>
    84d4:	    addq.l #8,sp
    84d6:	    move.l d0,-(sp)
    84d8:	    jsr 17730 <__fixsfsi>
    84de:	    addq.l #4,sp
    84e0:	    move.l 32(sp),-(sp)
    84e4:	    move.l d2,-(sp)
    84e6:	    move.l d4,-(sp)
    84e8:	    move.l d0,-(sp)
    84ea:	    move.l 40(sp),-(sp)
    84ee:	    jsr 8524 <wrapSpeechXY>
    84f4:	    lea 20(sp),sp
    84f8:	    move.l d0,16(sp)
	if (animPerson) {
    84fc:	    tst.w 14(sp)
    8500:	/-- beq.s 8518 <wrapSpeechPerson+0x112>
		makeTalker (thePerson);
    8502:	|   move.l 28(sp),-(sp)
    8506:	|   jsr 8144 <makeTalker>
    850c:	|   addq.l #4,sp
		speech -> currentTalker = thePerson;
    850e:	|   movea.l 1cade <speech>,a0
    8514:	|   move.l 28(sp),(a0)
	}
	return i;
    8518:	\-> move.l 16(sp),d0
}
    851c:	    movem.l (sp)+,d2-d4
    8520:	    addq.l #8,sp
    8522:	    rts

00008524 <wrapSpeechXY>:

int wrapSpeechXY(char * theText, int x, int y, int wrap, int sampleFile) {
    8524:	                   lea -16(sp),sp
    8528:	                   movem.l d2-d4/a2,-(sp)
    int a, offset = 0;
    852c:	                   clr.l 16(sp)
    killAllSpeech();
    8530:	                   jsr 8076 <killAllSpeech>

    int speechTime = (strlen(theText) + 20) * speechSpeed;
    8536:	                   move.l 36(sp),-(sp)
    853a:	                   jsr 13df2 <strlen>
    8540:	                   addq.l #4,sp
    8542:	                   movea.l d0,a0
    8544:	                   lea 20(a0),a0
    8548:	                   move.l a0,-(sp)
    854a:	                   jsr 177c0 <__floatunsisf>
    8550:	                   addq.l #4,sp
    8552:	                   move.l d0,d1
    8554:	                   move.l 1c40c <speechSpeed>,d0
    855a:	                   move.l d0,-(sp)
    855c:	                   move.l d1,-(sp)
    855e:	                   jsr 1784a <__mulsf3>
    8564:	                   addq.l #8,sp
    8566:	                   move.l d0,-(sp)
    8568:	                   jsr 17730 <__fixsfsi>
    856e:	                   addq.l #4,sp
    8570:	                   move.l d0,24(sp)
    if (speechTime < 1) speechTime = 1;
    8574:	               /-- bgt.s 857c <wrapSpeechXY+0x58>
    8576:	               |   moveq #1,d0
    8578:	               |   move.l d0,24(sp)

    if (sampleFile != -1) {
    857c:	               \-> moveq #-1,d1
    857e:	                   cmp.l 52(sp),d1
    8582:	               /-- beq.s 85c2 <wrapSpeechXY+0x9e>
        if (speechMode >= 1) {
    8584:	               |   move.l 1cb50 <speechMode>,d0
    858a:	               +-- ble.s 85c2 <wrapSpeechXY+0x9e>
            if (startSound(sampleFile, FALSE)) {
    858c:	               |   clr.l -(sp)
    858e:	               |   move.l 56(sp),-(sp)
    8592:	               |   jsr d31a <startSound>
    8598:	               |   addq.l #8,sp
    859a:	               |   tst.w d0
    859c:	               +-- beq.s 85c2 <wrapSpeechXY+0x9e>
                speechTime = -10;
    859e:	               |   moveq #-10,d0
    85a0:	               |   move.l d0,24(sp)
                speech->lastFile = sampleFile;
    85a4:	               |   movea.l 1cade <speech>,a0
    85aa:	               |   move.l 52(sp),12(a0)
                if (speechMode == 2) return -10;
    85b0:	               |   move.l 1cb50 <speechMode>,d0
    85b6:	               |   moveq #2,d1
    85b8:	               |   cmp.l d0,d1
    85ba:	               +-- bne.s 85c2 <wrapSpeechXY+0x9e>
    85bc:	               |   moveq #-10,d0
    85be:	/--------------|-- bra.w 8848 <wrapSpeechXY+0x324>
            }
        }
    }
    speech->speechY = y;
    85c2:	|              \-> movea.l 1cade <speech>,a0
    85c8:	|                  move.l 44(sp),8(a0)

    while (strlen(theText) > (unsigned long) wrap) {
    85ce:	|     /----------- bra.w 8682 <wrapSpeechXY+0x15e>
        a = wrap;
    85d2:	|  /--|----------> move.l 48(sp),28(sp)
        while (theText[a] != ' ') {
    85d8:	|  |  |        /-- bra.s 85e8 <wrapSpeechXY+0xc4>
            a--;
    85da:	|  |  |  /-----|-> subq.l #1,28(sp)
            if (a == 0) {
    85de:	|  |  |  |     +-- bne.s 85e8 <wrapSpeechXY+0xc4>
                a = wrap;
    85e0:	|  |  |  |     |   move.l 48(sp),28(sp)
                break;
    85e6:	|  |  |  |  /--|-- bra.s 85fa <wrapSpeechXY+0xd6>
        while (theText[a] != ' ') {
    85e8:	|  |  |  |  |  \-> move.l 28(sp),d0
    85ec:	|  |  |  |  |      movea.l 36(sp),a0
    85f0:	|  |  |  |  |      adda.l d0,a0
    85f2:	|  |  |  |  |      move.b (a0),d0
    85f4:	|  |  |  |  |      cmpi.b #32,d0
    85f8:	|  |  |  \--|----- bne.s 85da <wrapSpeechXY+0xb6>
            }
        }
        theText[a] = 0;
    85fa:	|  |  |     \----> move.l 28(sp),d0
    85fe:	|  |  |            movea.l 36(sp),a0
    8602:	|  |  |            adda.l d0,a0
    8604:	|  |  |            clr.b (a0)
        addSpeechLine(theText, x, &offset);
    8606:	|  |  |            lea 16(sp),a0
    860a:	|  |  |            move.l a0,-(sp)
    860c:	|  |  |            move.l 44(sp),-(sp)
    8610:	|  |  |            move.l 44(sp),-(sp)
    8614:	|  |  |            jsr 7dc0 <addSpeechLine>
    861a:	|  |  |            lea 12(sp),sp
        theText[a] = ' ';
    861e:	|  |  |            move.l 28(sp),d0
    8622:	|  |  |            movea.l 36(sp),a0
    8626:	|  |  |            adda.l d0,a0
    8628:	|  |  |            move.b #32,(a0)
        theText += a + 1;
    862c:	|  |  |            move.l 28(sp),d0
    8630:	|  |  |            addq.l #1,d0
    8632:	|  |  |            add.l d0,36(sp)
        y -= fontHeight / cameraZoom;
    8636:	|  |  |            move.l 44(sp),-(sp)
    863a:	|  |  |            jsr 17798 <__floatsisf>
    8640:	|  |  |            addq.l #4,sp
    8642:	|  |  |            move.l d0,d2
    8644:	|  |  |            move.l 1cb7a <fontHeight>,d0
    864a:	|  |  |            move.l d0,-(sp)
    864c:	|  |  |            jsr 17798 <__floatsisf>
    8652:	|  |  |            addq.l #4,sp
    8654:	|  |  |            move.l d0,d1
    8656:	|  |  |            move.l 1c420 <cameraZoom>,d0
    865c:	|  |  |            move.l d0,-(sp)
    865e:	|  |  |            move.l d1,-(sp)
    8660:	|  |  |            jsr 1764e <__divsf3>
    8666:	|  |  |            addq.l #8,sp
    8668:	|  |  |            move.l d0,-(sp)
    866a:	|  |  |            move.l d2,-(sp)
    866c:	|  |  |            jsr 17a8c <__subsf3>
    8672:	|  |  |            addq.l #8,sp
    8674:	|  |  |            move.l d0,-(sp)
    8676:	|  |  |            jsr 17730 <__fixsfsi>
    867c:	|  |  |            addq.l #4,sp
    867e:	|  |  |            move.l d0,44(sp)
    while (strlen(theText) > (unsigned long) wrap) {
    8682:	|  |  \----------> move.l 36(sp),-(sp)
    8686:	|  |               jsr 13df2 <strlen>
    868c:	|  |               addq.l #4,sp
    868e:	|  |               move.l d0,d1
    8690:	|  |               move.l 48(sp),d0
    8694:	|  |               cmp.l d1,d0
    8696:	|  \-------------- bcs.w 85d2 <wrapSpeechXY+0xae>
    }
    addSpeechLine(theText, x, &offset);
    869a:	|                  lea 16(sp),a0
    869e:	|                  move.l a0,-(sp)
    86a0:	|                  move.l 44(sp),-(sp)
    86a4:	|                  move.l 44(sp),-(sp)
    86a8:	|                  jsr 7dc0 <addSpeechLine>
    86ae:	|                  lea 12(sp),sp
    y -= fontHeight / cameraZoom;
    86b2:	|                  move.l 44(sp),-(sp)
    86b6:	|                  jsr 17798 <__floatsisf>
    86bc:	|                  addq.l #4,sp
    86be:	|                  move.l d0,d2
    86c0:	|                  move.l 1cb7a <fontHeight>,d0
    86c6:	|                  move.l d0,-(sp)
    86c8:	|                  jsr 17798 <__floatsisf>
    86ce:	|                  addq.l #4,sp
    86d0:	|                  move.l d0,d1
    86d2:	|                  move.l 1c420 <cameraZoom>,d0
    86d8:	|                  move.l d0,-(sp)
    86da:	|                  move.l d1,-(sp)
    86dc:	|                  jsr 1764e <__divsf3>
    86e2:	|                  addq.l #8,sp
    86e4:	|                  move.l d0,-(sp)
    86e6:	|                  move.l d2,-(sp)
    86e8:	|                  jsr 17a8c <__subsf3>
    86ee:	|                  addq.l #8,sp
    86f0:	|                  move.l d0,-(sp)
    86f2:	|                  jsr 17730 <__fixsfsi>
    86f8:	|                  addq.l #4,sp
    86fa:	|                  move.l d0,44(sp)

    if (y < 0) speech->speechY -= y;
    86fe:	|              /-- bpl.s 871c <wrapSpeechXY+0x1f8>
    8700:	|              |   movea.l 1cade <speech>,a0
    8706:	|              |   move.l 8(a0),d0
    870a:	|              |   movea.l 1cade <speech>,a0
    8710:	|              |   sub.l 44(sp),d0
    8714:	|              |   move.l d0,8(a0)
    8718:	|           /--|-- bra.w 880a <wrapSpeechXY+0x2e6>
    else if (speech->speechY > cameraY + (FLOAT)(winHeight - fontHeight / 3) / cameraZoom) speech->speechY = cameraY + (FLOAT)(winHeight - fontHeight / 3) / cameraZoom;
    871c:	|           |  \-> movea.l 1cade <speech>,a0
    8722:	|           |      move.l 8(a0),d0
    8726:	|           |      move.l d0,-(sp)
    8728:	|           |      jsr 17798 <__floatsisf>
    872e:	|           |      addq.l #4,sp
    8730:	|           |      move.l d0,d2
    8732:	|           |      move.l 1cb40 <cameraY>,d0
    8738:	|           |      move.l d0,-(sp)
    873a:	|           |      jsr 17798 <__floatsisf>
    8740:	|           |      addq.l #4,sp
    8742:	|           |      move.l d0,d3
    8744:	|           |      move.l 1c9da <winHeight>,d4
    874a:	|           |      move.l 1cb7a <fontHeight>,d0
    8750:	|           |      pea 3 <_start+0x3>
    8754:	|           |      move.l d0,-(sp)
    8756:	|           |      jsr 17d98 <__divsi3>
    875c:	|           |      addq.l #8,sp
    875e:	|           |      move.l d4,d1
    8760:	|           |      sub.l d0,d1
    8762:	|           |      move.l d1,-(sp)
    8764:	|           |      jsr 177c0 <__floatunsisf>
    876a:	|           |      addq.l #4,sp
    876c:	|           |      move.l d0,d1
    876e:	|           |      move.l 1c420 <cameraZoom>,d0
    8774:	|           |      move.l d0,-(sp)
    8776:	|           |      move.l d1,-(sp)
    8778:	|           |      jsr 1764e <__divsf3>
    877e:	|           |      addq.l #8,sp
    8780:	|           |      move.l d0,-(sp)
    8782:	|           |      move.l d3,-(sp)
    8784:	|           |      jsr 17554 <__addsf3>
    878a:	|           |      addq.l #8,sp
    878c:	|           |      move.l d0,-(sp)
    878e:	|           |      move.l d2,-(sp)
    8790:	|           |      jsr 17904 <__gtsf2>
    8796:	|           |      addq.l #8,sp
    8798:	|           |      tst.l d0
    879a:	|           +----- ble.s 880a <wrapSpeechXY+0x2e6>
    879c:	|           |      move.l 1cb40 <cameraY>,d0
    87a2:	|           |      move.l d0,-(sp)
    87a4:	|           |      jsr 17798 <__floatsisf>
    87aa:	|           |      addq.l #4,sp
    87ac:	|           |      move.l d0,d2
    87ae:	|           |      move.l 1c9da <winHeight>,d3
    87b4:	|           |      move.l 1cb7a <fontHeight>,d0
    87ba:	|           |      pea 3 <_start+0x3>
    87be:	|           |      move.l d0,-(sp)
    87c0:	|           |      jsr 17d98 <__divsi3>
    87c6:	|           |      addq.l #8,sp
    87c8:	|           |      move.l d3,d1
    87ca:	|           |      sub.l d0,d1
    87cc:	|           |      move.l d1,-(sp)
    87ce:	|           |      jsr 177c0 <__floatunsisf>
    87d4:	|           |      addq.l #4,sp
    87d6:	|           |      move.l d0,d1
    87d8:	|           |      move.l 1c420 <cameraZoom>,d0
    87de:	|           |      move.l d0,-(sp)
    87e0:	|           |      move.l d1,-(sp)
    87e2:	|           |      jsr 1764e <__divsf3>
    87e8:	|           |      addq.l #8,sp
    87ea:	|           |      move.l d0,-(sp)
    87ec:	|           |      move.l d2,-(sp)
    87ee:	|           |      jsr 17554 <__addsf3>
    87f4:	|           |      addq.l #8,sp
    87f6:	|           |      movea.l 1cade <speech>,a2
    87fc:	|           |      move.l d0,-(sp)
    87fe:	|           |      jsr 17730 <__fixsfsi>
    8804:	|           |      addq.l #4,sp
    8806:	|           |      move.l d0,8(a2)

    if (offset) {
    880a:	|           \----> move.l 16(sp),d0
    880e:	|        /-------- beq.s 8844 <wrapSpeechXY+0x320>
        struct speechLine * viewLine = speech->allSpeech;
    8810:	|        |         movea.l 1cade <speech>,a0
    8816:	|        |         move.l 4(a0),20(sp)
        while (viewLine) {
    881c:	|        |     /-- bra.s 883e <wrapSpeechXY+0x31a>
            viewLine->x += offset;
    881e:	|        |  /--|-> movea.l 20(sp),a0
    8822:	|        |  |  |   move.l 8(a0),d1
    8826:	|        |  |  |   move.l 16(sp),d0
    882a:	|        |  |  |   add.l d1,d0
    882c:	|        |  |  |   movea.l 20(sp),a0
    8830:	|        |  |  |   move.l d0,8(a0)
            viewLine = viewLine->next;
    8834:	|        |  |  |   movea.l 20(sp),a0
    8838:	|        |  |  |   move.l 4(a0),20(sp)
        while (viewLine) {
    883e:	|        |  |  \-> tst.l 20(sp)
    8842:	|        |  \----- bne.s 881e <wrapSpeechXY+0x2fa>
        }
    }

    return speechTime;
    8844:	|        \-------> move.l 24(sp),d0
}
    8848:	\----------------> movem.l (sp)+,d2-d4/a2
    884c:	                   lea 16(sp),sp
    8850:	                   rts

00008852 <killZBuffer>:

#define EMULATOR

struct zBufferData *zBuffer;

void killZBuffer () {
    8852:	       lea -12(sp),sp
    8856:	       move.l a6,-(sp)
	struct zBufferData *zbuffercursor =  zBuffer;
    8858:	       move.l 1cae2 <zBuffer>,12(sp)

	while(zbuffercursor) {
    8860:	   /-- bra.s 8888 <killZBuffer+0x36>
		struct zBufferData *deleteme = zbuffercursor;
    8862:	/--|-> move.l 12(sp),8(sp)
		zbuffercursor = zbuffercursor->nextPanel;
    8868:	|  |   movea.l 12(sp),a0
    886c:	|  |   move.l 24(a0),12(sp)
		FreeVec(deleteme);
    8872:	|  |   move.l 8(sp),4(sp)
    8878:	|  |   move.l 1ca82 <SysBase>,d0
    887e:	|  |   movea.l d0,a6
    8880:	|  |   movea.l 4(sp),a1
    8884:	|  |   jsr -690(a6)
	while(zbuffercursor) {
    8888:	|  \-> tst.l 12(sp)
    888c:	\----- bne.s 8862 <killZBuffer+0x10>
	}
	zBuffer = NULL;
    888e:	       clr.l 1cae2 <zBuffer>
}
    8894:	       nop
    8896:	       movea.l (sp)+,a6
    8898:	       lea 12(sp),sp
    889c:	       rts

0000889e <setZBuffer>:

BOOL setZBuffer (unsigned int y) {
    889e:	                lea -304(sp),sp
    88a2:	                movem.l d2-d4/a2/a6,-(sp)
	int x, n;
	ULONG stillToGo = 0;
    88a6:	                clr.l 314(sp)
	int yPalette[16], sorted[16], sortback[16];

	killZBuffer ();	
    88aa:	                jsr 8852 <killZBuffer>
	
	if (! openFileFromNum (y)) return FALSE;
    88b0:	                move.l 328(sp),d0
    88b4:	                move.l d0,-(sp)
    88b6:	                jsr 6eb0 <openFileFromNum>
    88bc:	                addq.l #4,sp
    88be:	                tst.l d0
    88c0:	            /-- bne.s 88c8 <setZBuffer+0x2a>
    88c2:	            |   clr.w d0
    88c4:	/-----------|-- bra.w 8b86 <setZBuffer+0x2e8>
	
	if (FGetC (bigDataFile) != 'a' || FGetC (bigDataFile) != 's' || FGetC (bigDataFile) != 'z' || FGetC (bigDataFile) != 'b') 
    88c8:	|           \-> move.l 1ca6a <bigDataFile>,310(sp)
    88d0:	|               move.l 1ca8a <DOSBase>,d0
    88d6:	|               movea.l d0,a6
    88d8:	|               move.l 310(sp),d1
    88dc:	|               jsr -306(a6)
    88e0:	|               move.l d0,306(sp)
    88e4:	|               move.l 306(sp),d0
    88e8:	|               moveq #97,d1
    88ea:	|               cmp.l d0,d1
    88ec:	|        /----- bne.s 8960 <setZBuffer+0xc2>
    88ee:	|        |      move.l 1ca6a <bigDataFile>,302(sp)
    88f6:	|        |      move.l 1ca8a <DOSBase>,d0
    88fc:	|        |      movea.l d0,a6
    88fe:	|        |      move.l 302(sp),d1
    8902:	|        |      jsr -306(a6)
    8906:	|        |      move.l d0,298(sp)
    890a:	|        |      move.l 298(sp),d0
    890e:	|        |      moveq #115,d1
    8910:	|        |      cmp.l d0,d1
    8912:	|        +----- bne.s 8960 <setZBuffer+0xc2>
    8914:	|        |      move.l 1ca6a <bigDataFile>,294(sp)
    891c:	|        |      move.l 1ca8a <DOSBase>,d0
    8922:	|        |      movea.l d0,a6
    8924:	|        |      move.l 294(sp),d1
    8928:	|        |      jsr -306(a6)
    892c:	|        |      move.l d0,290(sp)
    8930:	|        |      move.l 290(sp),d0
    8934:	|        |      moveq #122,d1
    8936:	|        |      cmp.l d0,d1
    8938:	|        +----- bne.s 8960 <setZBuffer+0xc2>
    893a:	|        |      move.l 1ca6a <bigDataFile>,286(sp)
    8942:	|        |      move.l 1ca8a <DOSBase>,d0
    8948:	|        |      movea.l d0,a6
    894a:	|        |      move.l 286(sp),d1
    894e:	|        |      jsr -306(a6)
    8952:	|        |      move.l d0,282(sp)
    8956:	|        |      move.l 282(sp),d0
    895a:	|        |      moveq #98,d1
    895c:	|        |      cmp.l d0,d1
    895e:	|        |  /-- beq.s 8974 <setZBuffer+0xd6>
	{ 
		 KPrintF("Not a Z-buffer file");
    8960:	|        \--|-> pea 190d0 <PutChar+0x12a0>
    8966:	|           |   jsr 17366 <KPrintF>
    896c:	|           |   addq.l #4,sp
		 return FALSE;
    896e:	|           |   clr.w d0
    8970:	+-----------|-- bra.w 8b86 <setZBuffer+0x2e8>
	}

	UWORD numelements = FGetC(bigDataFile);
    8974:	|           \-> move.l 1ca6a <bigDataFile>,278(sp)
    897c:	|               move.l 1ca8a <DOSBase>,d0
    8982:	|               movea.l d0,a6
    8984:	|               move.l 278(sp),d1
    8988:	|               jsr -306(a6)
    898c:	|               move.l d0,274(sp)
    8990:	|               move.l 274(sp),d0
    8994:	|               move.w d0,322(sp)

	UWORD size;
	UWORD count;

	zBuffer = AllocVec(sizeof(struct zBufferData), MEMF_ANY);
    8998:	|               moveq #28,d0
    899a:	|               move.l d0,270(sp)
    899e:	|               clr.l 266(sp)
    89a2:	|               move.l 1ca82 <SysBase>,d0
    89a8:	|               movea.l d0,a6
    89aa:	|               move.l 270(sp),d0
    89ae:	|               move.l 266(sp),d1
    89b2:	|               jsr -684(a6)
    89b6:	|               move.l d0,262(sp)
    89ba:	|               move.l 262(sp),d0
    89be:	|               move.l d0,1cae2 <zBuffer>

	struct zBufferData *currentitem;
	currentitem = zBuffer;
    89c4:	|               move.l 1cae2 <zBuffer>,318(sp)

	while(numelements--)
    89cc:	|     /-------- bra.w 8b6c <setZBuffer+0x2ce>
	{		
		currentitem->width = get2bytes (bigDataFile);
    89d0:	|  /--|-------> move.l 1ca6a <bigDataFile>,d0
    89d6:	|  |  |         move.l d0,-(sp)
    89d8:	|  |  |         jsr 6bc <get2bytes>
    89de:	|  |  |         addq.l #4,sp
    89e0:	|  |  |         movea.l 318(sp),a0
    89e4:	|  |  |         move.l d0,(a0)
		currentitem->height = get2bytes (bigDataFile);
    89e6:	|  |  |         move.l 1ca6a <bigDataFile>,d0
    89ec:	|  |  |         move.l d0,-(sp)
    89ee:	|  |  |         jsr 6bc <get2bytes>
    89f4:	|  |  |         addq.l #4,sp
    89f6:	|  |  |         movea.l 318(sp),a0
    89fa:	|  |  |         move.l d0,4(a0)

		currentitem->topx = get2bytes (bigDataFile);
    89fe:	|  |  |         move.l 1ca6a <bigDataFile>,d0
    8a04:	|  |  |         move.l d0,-(sp)
    8a06:	|  |  |         jsr 6bc <get2bytes>
    8a0c:	|  |  |         addq.l #4,sp
    8a0e:	|  |  |         movea.l 318(sp),a0
    8a12:	|  |  |         move.l d0,8(a0)
		currentitem->topy = get2bytes (bigDataFile);
    8a16:	|  |  |         move.l 1ca6a <bigDataFile>,d0
    8a1c:	|  |  |         move.l d0,-(sp)
    8a1e:	|  |  |         jsr 6bc <get2bytes>
    8a24:	|  |  |         addq.l #4,sp
    8a26:	|  |  |         movea.l 318(sp),a0
    8a2a:	|  |  |         move.l d0,12(a0)
		currentitem->yz = get2bytes (bigDataFile);
    8a2e:	|  |  |         move.l 1ca6a <bigDataFile>,d0
    8a34:	|  |  |         move.l d0,-(sp)
    8a36:	|  |  |         jsr 6bc <get2bytes>
    8a3c:	|  |  |         addq.l #4,sp
    8a3e:	|  |  |         movea.l 318(sp),a0
    8a42:	|  |  |         move.l d0,16(a0)

		UWORD size = currentitem->width * currentitem->height / 8;
    8a46:	|  |  |         movea.l 318(sp),a0
    8a4a:	|  |  |         move.l (a0),d0
    8a4c:	|  |  |         movea.l 318(sp),a0
    8a50:	|  |  |         move.l 4(a0),d1
    8a54:	|  |  |         move.l d1,-(sp)
    8a56:	|  |  |         move.l d0,-(sp)
    8a58:	|  |  |         jsr 17d1a <__mulsi3>
    8a5e:	|  |  |         addq.l #8,sp
    8a60:	|  |  |         tst.l d0
    8a62:	|  |  |     /-- bge.s 8a66 <setZBuffer+0x1c8>
    8a64:	|  |  |     |   addq.l #7,d0
    8a66:	|  |  |     \-> asr.l #3,d0
    8a68:	|  |  |         move.w d0,260(sp)
		currentitem->bitplane = AllocVec( size, MEMF_CHIP);
    8a6c:	|  |  |         moveq #0,d0
    8a6e:	|  |  |         move.w 260(sp),d0
    8a72:	|  |  |         move.l d0,256(sp)
    8a76:	|  |  |         moveq #2,d1
    8a78:	|  |  |         move.l d1,252(sp)
    8a7c:	|  |  |         move.l 1ca82 <SysBase>,d0
    8a82:	|  |  |         movea.l d0,a6
    8a84:	|  |  |         move.l 256(sp),d0
    8a88:	|  |  |         move.l 252(sp),d1
    8a8c:	|  |  |         jsr -684(a6)
    8a90:	|  |  |         move.l d0,248(sp)
    8a94:	|  |  |         move.l 248(sp),d0
    8a98:	|  |  |         movea.l 318(sp),a0
    8a9c:	|  |  |         move.l d0,20(a0)
		count = FRead( bigDataFile, currentitem->bitplane, 1, size);				
    8aa0:	|  |  |         move.l 1ca6a <bigDataFile>,244(sp)
    8aa8:	|  |  |         movea.l 318(sp),a0
    8aac:	|  |  |         move.l 20(a0),240(sp)
    8ab2:	|  |  |         moveq #1,d0
    8ab4:	|  |  |         move.l d0,236(sp)
    8ab8:	|  |  |         moveq #0,d0
    8aba:	|  |  |         move.w 260(sp),d0
    8abe:	|  |  |         move.l d0,232(sp)
    8ac2:	|  |  |         move.l 1ca8a <DOSBase>,d0
    8ac8:	|  |  |         movea.l d0,a6
    8aca:	|  |  |         move.l 244(sp),d1
    8ace:	|  |  |         move.l 240(sp),d2
    8ad2:	|  |  |         move.l 236(sp),d3
    8ad6:	|  |  |         move.l 232(sp),d4
    8ada:	|  |  |         jsr -324(a6)
    8ade:	|  |  |         move.l d0,228(sp)
    8ae2:	|  |  |         move.l 228(sp),d0
    8ae6:	|  |  |         move.w d0,226(sp)

		if(numelements > 0) {
    8aea:	|  |  |         tst.w 322(sp)
    8aee:	|  |  |  /----- beq.s 8b2a <setZBuffer+0x28c>
			currentitem->nextPanel = AllocVec(sizeof(struct zBufferData), MEMF_ANY);
    8af0:	|  |  |  |      moveq #28,d1
    8af2:	|  |  |  |      move.l d1,222(sp)
    8af6:	|  |  |  |      clr.l 218(sp)
    8afa:	|  |  |  |      move.l 1ca82 <SysBase>,d0
    8b00:	|  |  |  |      movea.l d0,a6
    8b02:	|  |  |  |      move.l 222(sp),d0
    8b06:	|  |  |  |      move.l 218(sp),d1
    8b0a:	|  |  |  |      jsr -684(a6)
    8b0e:	|  |  |  |      move.l d0,214(sp)
    8b12:	|  |  |  |      move.l 214(sp),d0
    8b16:	|  |  |  |      movea.l 318(sp),a0
    8b1a:	|  |  |  |      move.l d0,24(a0)
			currentitem = currentitem->nextPanel;
    8b1e:	|  |  |  |      movea.l 318(sp),a0
    8b22:	|  |  |  |      move.l 24(a0),318(sp)
    8b28:	|  |  |  |  /-- bra.s 8b32 <setZBuffer+0x294>
		} else {
			currentitem->nextPanel = NULL;
    8b2a:	|  |  |  \--|-> movea.l 318(sp),a0
    8b2e:	|  |  |     |   clr.l 24(a0)
		}
		#ifdef EMULATOR  
  			debug_register_bitmap(currentitem->bitplane, "zBuffer.bpl", currentitem->width, currentitem->height , 1, 0);
    8b32:	|  |  |     \-> movea.l 318(sp),a0
    8b36:	|  |  |         move.l 4(a0),d0
    8b3a:	|  |  |         move.l d0,d0
    8b3c:	|  |  |         movea.w d0,a1
    8b3e:	|  |  |         movea.l 318(sp),a0
    8b42:	|  |  |         move.l (a0),d0
    8b44:	|  |  |         move.l d0,d0
    8b46:	|  |  |         movea.w d0,a0
    8b48:	|  |  |         movea.l 318(sp),a2
    8b4c:	|  |  |         move.l 20(a2),d0
    8b50:	|  |  |         clr.l -(sp)
    8b52:	|  |  |         pea 1 <_start+0x1>
    8b56:	|  |  |         move.l a1,-(sp)
    8b58:	|  |  |         move.l a0,-(sp)
    8b5a:	|  |  |         pea 190e4 <PutChar+0x12b4>
    8b60:	|  |  |         move.l d0,-(sp)
    8b62:	|  |  |         jsr 1744e <debug_register_bitmap>
    8b68:	|  |  |         lea 24(sp),sp
	while(numelements--)
    8b6c:	|  |  \-------> move.w 322(sp),d0
    8b70:	|  |            move.w d0,d1
    8b72:	|  |            subq.w #1,d1
    8b74:	|  |            move.w d1,322(sp)
    8b78:	|  |            tst.w d0
    8b7a:	|  \----------- bne.w 89d0 <setZBuffer+0x132>
		#endif  
		
	}


	finishAccess ();
    8b7e:	|               jsr 6da8 <finishAccess>
	
	return TRUE;
    8b84:	|               moveq #1,d0
}
    8b86:	\-------------> movem.l (sp)+,d2-d4/a2/a6
    8b8a:	                lea 304(sp),sp
    8b8e:	                rts

00008b90 <forgetSpriteBank>:
extern int cameraX, cameraY;
extern struct inputType input;


void forgetSpriteBank (struct loadedSpriteBank * forgetme)
{			
    8b90:	          lea -32(sp),sp
    8b94:	          move.l a6,-(sp)
	struct spriteBank *spritebanktoforget = &forgetme->bank;
    8b96:	          move.l 40(sp),d0
    8b9a:	          addq.l #8,d0
    8b9c:	          move.l d0,24(sp)
	
	for (int i = 0; i < spritebanktoforget->total; i++) {
    8ba0:	          clr.l 32(sp)
    8ba4:	   /----- bra.s 8bea <forgetSpriteBank+0x5a>
		struct sprite *cursprite = &spritebanktoforget->sprites[i];		
    8ba6:	/--|----> movea.l 24(sp),a0
    8baa:	|  |      movea.l 8(a0),a0
    8bae:	|  |      move.l 32(sp),d1
    8bb2:	|  |      move.l d1,d0
    8bb4:	|  |      lsl.l #3,d0
    8bb6:	|  |      sub.l d1,d0
    8bb8:	|  |      add.l d0,d0
    8bba:	|  |      add.l d0,d0
    8bbc:	|  |      adda.l d0,a0
    8bbe:	|  |      move.l a0,8(sp)
		if(cursprite->data) {		
    8bc2:	|  |      movea.l 8(sp),a0
    8bc6:	|  |      move.l 24(a0),d0
    8bca:	|  |  /-- beq.s 8be6 <forgetSpriteBank+0x56>
			FreeVec(cursprite->data);			
    8bcc:	|  |  |   movea.l 8(sp),a0
    8bd0:	|  |  |   move.l 24(a0),4(sp)
    8bd6:	|  |  |   move.l 1ca82 <SysBase>,d0
    8bdc:	|  |  |   movea.l d0,a6
    8bde:	|  |  |   movea.l 4(sp),a1
    8be2:	|  |  |   jsr -690(a6)
	for (int i = 0; i < spritebanktoforget->total; i++) {
    8be6:	|  |  \-> addq.l #1,32(sp)
    8bea:	|  \----> movea.l 24(sp),a0
    8bee:	|         move.l (a0),d0
    8bf0:	|         cmp.l 32(sp),d0
    8bf4:	\-------- bgt.s 8ba6 <forgetSpriteBank+0x16>
		}		
	}

	FreeVec(spritebanktoforget->sprites);	
    8bf6:	          movea.l 24(sp),a0
    8bfa:	          move.l 8(a0),20(sp)
    8c00:	          move.l 1ca82 <SysBase>,d0
    8c06:	          movea.l d0,a6
    8c08:	          movea.l 20(sp),a1
    8c0c:	          jsr -690(a6)
	
	
	struct loadedSpriteBank *precedingbank = allLoadedBanks;
    8c10:	          move.l 1cb9a <allLoadedBanks>,28(sp)
	
	while(precedingbank->next->ID != forgetme->ID && precedingbank != NULL)
    8c18:	      /-- bra.s 8c24 <forgetSpriteBank+0x94>
	{
		precedingbank = precedingbank->next;
    8c1a:	   /--|-> movea.l 28(sp),a0
    8c1e:	   |  |   move.l 22(a0),28(sp)
	while(precedingbank->next->ID != forgetme->ID && precedingbank != NULL)
    8c24:	   |  \-> movea.l 28(sp),a0
    8c28:	   |      movea.l 22(a0),a0
    8c2c:	   |      move.l (a0),d1
    8c2e:	   |      movea.l 40(sp),a0
    8c32:	   |      move.l (a0),d0
    8c34:	   |      cmp.l d1,d0
    8c36:	   |  /-- beq.s 8c3e <forgetSpriteBank+0xae>
    8c38:	   |  |   tst.l 28(sp)
    8c3c:	   \--|-- bne.s 8c1a <forgetSpriteBank+0x8a>
	}	

	if(precedingbank)
    8c3e:	      \-> tst.l 28(sp)
    8c42:	   /----- beq.s 8c6c <forgetSpriteBank+0xdc>
	{
		//Forget element in the middle of the chain or the last one
		precedingbank->next = forgetme->next;
    8c44:	   |      movea.l 40(sp),a0
    8c48:	   |      move.l 22(a0),d0
    8c4c:	   |      movea.l 28(sp),a0
    8c50:	   |      move.l d0,22(a0)
		FreeVec( forgetme);
    8c54:	   |      move.l 40(sp),12(sp)
    8c5a:	   |      move.l 1ca82 <SysBase>,d0
    8c60:	   |      movea.l d0,a6
    8c62:	   |      movea.l 12(sp),a1
    8c66:	   |      jsr -690(a6)
	{
		//Forget first element in the chain
		allLoadedBanks = allLoadedBanks->next;
		FreeVec( forgetme);
	}	
}
    8c6a:	   |  /-- bra.s 8c92 <forgetSpriteBank+0x102>
		allLoadedBanks = allLoadedBanks->next;
    8c6c:	   \--|-> movea.l 1cb9a <allLoadedBanks>,a0
    8c72:	      |   move.l 22(a0),d0
    8c76:	      |   move.l d0,1cb9a <allLoadedBanks>
		FreeVec( forgetme);
    8c7c:	      |   move.l 40(sp),16(sp)
    8c82:	      |   move.l 1ca82 <SysBase>,d0
    8c88:	      |   movea.l d0,a6
    8c8a:	      |   movea.l 16(sp),a1
    8c8e:	      |   jsr -690(a6)
}
    8c92:	      \-> nop
    8c94:	          movea.l (sp)+,a6
    8c96:	          lea 32(sp),sp
    8c9a:	          rts

00008c9c <loadSpriteBank>:

BOOL loadSpriteBank (int fileNum, struct spriteBank *loadhere) {
    8c9c:	                      lea -84(sp),sp
    8ca0:	                      movem.l d2-d4/a2/a6,-(sp)

	KPrintF("loadSpriteBank: Starting\n");
    8ca4:	                      pea 190f0 <PutChar+0x12c0>
    8caa:	                      jsr 17366 <KPrintF>
    8cb0:	                      addq.l #4,sp

	int i, tex_num, total, picwidth, picheight, howmany = 0, startIndex = 0;
    8cb2:	                      clr.l 94(sp)
    8cb6:	                      clr.l 90(sp)
	int *totalwidth, *maxheight;
	int numTextures = 0;
    8cba:	                      clr.l 86(sp)
	UBYTE *data;

	if (!openFileFromNum(fileNum)) {
    8cbe:	                      move.l 108(sp),-(sp)
    8cc2:	                      jsr 6eb0 <openFileFromNum>
    8cc8:	                      addq.l #4,sp
    8cca:	                      tst.l d0
    8ccc:	                  /-- bne.s 8ce2 <loadSpriteBank+0x46>
		KPrintF("loadSpriteBank: Can't open sprite bank / font");
    8cce:	                  |   pea 1910a <PutChar+0x12da>
    8cd4:	                  |   jsr 17366 <KPrintF>
    8cda:	                  |   addq.l #4,sp
		return FALSE;
    8cdc:	                  |   clr.w d0
    8cde:	/-----------------|-- bra.w 90d6 <loadSpriteBank+0x43a>
	}

	get2bytes(bigDataFile); // Ignore first 2 bytes
    8ce2:	|                 \-> move.l 1ca6a <bigDataFile>,d0
    8ce8:	|                     move.l d0,-(sp)
    8cea:	|                     jsr 6bc <get2bytes>
    8cf0:	|                     addq.l #4,sp
	loadhere->type = FGetC(bigDataFile);
    8cf2:	|                     move.l 1ca6a <bigDataFile>,82(sp)
    8cfa:	|                     move.l 1ca8a <DOSBase>,d0
    8d00:	|                     movea.l d0,a6
    8d02:	|                     move.l 82(sp),d1
    8d06:	|                     jsr -306(a6)
    8d0a:	|                     move.l d0,78(sp)
    8d0e:	|                     move.l 78(sp),d0
    8d12:	|                     movea.l 112(sp),a0
    8d16:	|                     move.l d0,4(a0)
	total = get2bytes(bigDataFile);
    8d1a:	|                     move.l 1ca6a <bigDataFile>,d0
    8d20:	|                     move.l d0,-(sp)
    8d22:	|                     jsr 6bc <get2bytes>
    8d28:	|                     addq.l #4,sp
    8d2a:	|                     move.l d0,74(sp)

	if (total <= 0) {
    8d2e:	|                 /-- bgt.s 8d44 <loadSpriteBank+0xa8>
		KPrintF("loadSpriteBank: No sprites in bank or invalid sprite bank file\n");
    8d30:	|                 |   pea 19138 <PutChar+0x1308>
    8d36:	|                 |   jsr 17366 <KPrintF>
    8d3c:	|                 |   addq.l #4,sp
		return FALSE;
    8d3e:	|                 |   clr.w d0
    8d40:	+-----------------|-- bra.w 90d6 <loadSpriteBank+0x43a>
	}
	if (loadhere->type == 3)
    8d44:	|                 \-> movea.l 112(sp),a0
    8d48:	|                     move.l 4(a0),d0
    8d4c:	|                     moveq #3,d1
    8d4e:	|                     cmp.l d0,d1
    8d50:	|                 /-- bne.s 8d5e <loadSpriteBank+0xc2>
	{
		loadhere->isFont = TRUE;
    8d52:	|                 |   movea.l 112(sp),a0
    8d56:	|                 |   move.w #1,12(a0)
    8d5c:	|              /--|-- bra.s 8d80 <loadSpriteBank+0xe4>
	}
	else if (loadhere->type > 3) {
    8d5e:	|              |  \-> movea.l 112(sp),a0
    8d62:	|              |      move.l 4(a0),d0
    8d66:	|              |      moveq #3,d1
    8d68:	|              |      cmp.l d0,d1
    8d6a:	|              +----- bge.s 8d80 <loadSpriteBank+0xe4>
		KPrintF("loadSpriteBank: Unsupported sprite bank file format\n");
    8d6c:	|              |      pea 19178 <PutChar+0x1348>
    8d72:	|              |      jsr 17366 <KPrintF>
    8d78:	|              |      addq.l #4,sp
		return FALSE;
    8d7a:	|              |      clr.w d0
    8d7c:	+--------------|----- bra.w 90d6 <loadSpriteBank+0x43a>
	}

	loadhere->total = total;
    8d80:	|              \----> movea.l 112(sp),a0
    8d84:	|                     move.l 74(sp),(a0)
	loadhere->sprites = AllocVec(sizeof(struct sprite) * total, MEMF_ANY);
    8d88:	|                     move.l 74(sp),d1
    8d8c:	|                     move.l d1,d0
    8d8e:	|                     lsl.l #3,d0
    8d90:	|                     sub.l d1,d0
    8d92:	|                     add.l d0,d0
    8d94:	|                     add.l d0,d0
    8d96:	|                     move.l d0,70(sp)
    8d9a:	|                     clr.l 66(sp)
    8d9e:	|                     move.l 1ca82 <SysBase>,d0
    8da4:	|                     movea.l d0,a6
    8da6:	|                     move.l 70(sp),d0
    8daa:	|                     move.l 66(sp),d1
    8dae:	|                     jsr -684(a6)
    8db2:	|                     move.l d0,62(sp)
    8db6:	|                     move.l 62(sp),d0
    8dba:	|                     movea.l 112(sp),a0
    8dbe:	|                     move.l d0,8(a0)
	if (!loadhere->sprites) return FALSE;	
    8dc2:	|                     movea.l 112(sp),a0
    8dc6:	|                     move.l 8(a0),d0
    8dca:	|                 /-- bne.s 8dd2 <loadSpriteBank+0x136>
    8dcc:	|                 |   clr.w d0
    8dce:	+-----------------|-- bra.w 90d6 <loadSpriteBank+0x43a>
	
	startIndex = 1;
    8dd2:	|                 \-> moveq #1,d0
    8dd4:	|                     move.l d0,90(sp)

	for (i = 0; i < total; i++) {
    8dd8:	|                     clr.l 100(sp)
    8ddc:	|     /-------------- bra.w 90b4 <loadSpriteBank+0x418>

		UWORD width = get2bytes(bigDataFile);
    8de0:	|  /--|-------------> move.l 1ca6a <bigDataFile>,d0
    8de6:	|  |  |               move.l d0,-(sp)
    8de8:	|  |  |               jsr 6bc <get2bytes>
    8dee:	|  |  |               addq.l #4,sp
    8df0:	|  |  |               move.w d0,60(sp)
		loadhere->sprites[i].width = width;
    8df4:	|  |  |               movea.l 112(sp),a0
    8df8:	|  |  |               movea.l 8(a0),a0
    8dfc:	|  |  |               move.l 100(sp),d1
    8e00:	|  |  |               move.l d1,d0
    8e02:	|  |  |               lsl.l #3,d0
    8e04:	|  |  |               sub.l d1,d0
    8e06:	|  |  |               add.l d0,d0
    8e08:	|  |  |               add.l d0,d0
    8e0a:	|  |  |               adda.l d0,a0
    8e0c:	|  |  |               moveq #0,d0
    8e0e:	|  |  |               move.w 60(sp),d0
    8e12:	|  |  |               move.l d0,(a0)
		loadhere->sprites[i].height = get2bytes(bigDataFile);
    8e14:	|  |  |               movea.l 1ca6a <bigDataFile>,a1
    8e1a:	|  |  |               movea.l 112(sp),a0
    8e1e:	|  |  |               movea.l 8(a0),a0
    8e22:	|  |  |               move.l 100(sp),d1
    8e26:	|  |  |               move.l d1,d0
    8e28:	|  |  |               lsl.l #3,d0
    8e2a:	|  |  |               sub.l d1,d0
    8e2c:	|  |  |               add.l d0,d0
    8e2e:	|  |  |               add.l d0,d0
    8e30:	|  |  |               lea (0,a0,d0.l),a2
    8e34:	|  |  |               move.l a1,-(sp)
    8e36:	|  |  |               jsr 6bc <get2bytes>
    8e3c:	|  |  |               addq.l #4,sp
    8e3e:	|  |  |               move.l d0,4(a2)
		loadhere->sprites[i].xhot = get2bytes(bigDataFile);
    8e42:	|  |  |               movea.l 1ca6a <bigDataFile>,a1
    8e48:	|  |  |               movea.l 112(sp),a0
    8e4c:	|  |  |               movea.l 8(a0),a0
    8e50:	|  |  |               move.l 100(sp),d1
    8e54:	|  |  |               move.l d1,d0
    8e56:	|  |  |               lsl.l #3,d0
    8e58:	|  |  |               sub.l d1,d0
    8e5a:	|  |  |               add.l d0,d0
    8e5c:	|  |  |               add.l d0,d0
    8e5e:	|  |  |               lea (0,a0,d0.l),a2
    8e62:	|  |  |               move.l a1,-(sp)
    8e64:	|  |  |               jsr 6bc <get2bytes>
    8e6a:	|  |  |               addq.l #4,sp
    8e6c:	|  |  |               move.l d0,8(a2)
		loadhere->sprites[i].yhot = get2bytes(bigDataFile);
    8e70:	|  |  |               movea.l 1ca6a <bigDataFile>,a1
    8e76:	|  |  |               movea.l 112(sp),a0
    8e7a:	|  |  |               movea.l 8(a0),a0
    8e7e:	|  |  |               move.l 100(sp),d1
    8e82:	|  |  |               move.l d1,d0
    8e84:	|  |  |               lsl.l #3,d0
    8e86:	|  |  |               sub.l d1,d0
    8e88:	|  |  |               add.l d0,d0
    8e8a:	|  |  |               add.l d0,d0
    8e8c:	|  |  |               lea (0,a0,d0.l),a2
    8e90:	|  |  |               move.l a1,-(sp)
    8e92:	|  |  |               jsr 6bc <get2bytes>
    8e98:	|  |  |               addq.l #4,sp
    8e9a:	|  |  |               move.l d0,12(a2)

		UWORD size;
		
		switch( loadhere->type) 
    8e9e:	|  |  |               movea.l 112(sp),a0
    8ea2:	|  |  |               move.l 4(a0),d0
    8ea6:	|  |  |               moveq #3,d1
    8ea8:	|  |  |               cmp.l d0,d1
    8eaa:	|  |  |     /-------- beq.w 8f46 <loadSpriteBank+0x2aa>
    8eae:	|  |  |     |         moveq #3,d1
    8eb0:	|  |  |     |         cmp.l d0,d1
    8eb2:	|  |  |  /--|-------- blt.w 8fec <loadSpriteBank+0x350>
    8eb6:	|  |  |  |  |         moveq #1,d1
    8eb8:	|  |  |  |  |         cmp.l d0,d1
    8eba:	|  |  |  |  |     /-- beq.s 8ec6 <loadSpriteBank+0x22a>
    8ebc:	|  |  |  |  |     |   moveq #2,d1
    8ebe:	|  |  |  |  |     |   cmp.l d0,d1
    8ec0:	|  |  |  |  |  /--|-- beq.s 8ef2 <loadSpriteBank+0x256>
    8ec2:	|  |  |  +--|--|--|-- bra.w 8fec <loadSpriteBank+0x350>
		{
			case 1: //Sprite
				size = 4*loadhere->sprites[i].height+8;
    8ec6:	|  |  |  |  |  |  \-> movea.l 112(sp),a0
    8eca:	|  |  |  |  |  |      movea.l 8(a0),a0
    8ece:	|  |  |  |  |  |      move.l 100(sp),d1
    8ed2:	|  |  |  |  |  |      move.l d1,d0
    8ed4:	|  |  |  |  |  |      lsl.l #3,d0
    8ed6:	|  |  |  |  |  |      sub.l d1,d0
    8ed8:	|  |  |  |  |  |      add.l d0,d0
    8eda:	|  |  |  |  |  |      add.l d0,d0
    8edc:	|  |  |  |  |  |      adda.l d0,a0
    8ede:	|  |  |  |  |  |      move.l 4(a0),d0
    8ee2:	|  |  |  |  |  |      addq.l #2,d0
    8ee4:	|  |  |  |  |  |      move.l d0,d0
    8ee6:	|  |  |  |  |  |      add.w d0,d0
    8ee8:	|  |  |  |  |  |      add.w d0,d0
    8eea:	|  |  |  |  |  |      move.w d0,98(sp)
				break;
    8eee:	|  |  |  +--|--|----- bra.w 8fec <loadSpriteBank+0x350>
			case 2: //Bob
				size = loadhere->sprites[i].width / 8 * loadhere->sprites[i].height * 6;
    8ef2:	|  |  |  |  |  \----> movea.l 112(sp),a0
    8ef6:	|  |  |  |  |         movea.l 8(a0),a0
    8efa:	|  |  |  |  |         move.l 100(sp),d1
    8efe:	|  |  |  |  |         move.l d1,d0
    8f00:	|  |  |  |  |         lsl.l #3,d0
    8f02:	|  |  |  |  |         sub.l d1,d0
    8f04:	|  |  |  |  |         add.l d0,d0
    8f06:	|  |  |  |  |         add.l d0,d0
    8f08:	|  |  |  |  |         adda.l d0,a0
    8f0a:	|  |  |  |  |         move.l (a0),d0
    8f0c:	|  |  |  |  |     /-- bpl.s 8f10 <loadSpriteBank+0x274>
    8f0e:	|  |  |  |  |     |   addq.l #7,d0
    8f10:	|  |  |  |  |     \-> asr.l #3,d0
    8f12:	|  |  |  |  |         move.l d0,d2
    8f14:	|  |  |  |  |         movea.l 112(sp),a0
    8f18:	|  |  |  |  |         movea.l 8(a0),a0
    8f1c:	|  |  |  |  |         move.l 100(sp),d1
    8f20:	|  |  |  |  |         move.l d1,d0
    8f22:	|  |  |  |  |         lsl.l #3,d0
    8f24:	|  |  |  |  |         sub.l d1,d0
    8f26:	|  |  |  |  |         add.l d0,d0
    8f28:	|  |  |  |  |         add.l d0,d0
    8f2a:	|  |  |  |  |         adda.l d0,a0
    8f2c:	|  |  |  |  |         move.l 4(a0),d0
    8f30:	|  |  |  |  |         move.l d0,d0
    8f32:	|  |  |  |  |         move.w d2,d1
    8f34:	|  |  |  |  |         muls.w d0,d1
    8f36:	|  |  |  |  |         move.w d1,d0
    8f38:	|  |  |  |  |         add.w d0,d0
    8f3a:	|  |  |  |  |         add.w d1,d0
    8f3c:	|  |  |  |  |         add.w d0,d0
    8f3e:	|  |  |  |  |         move.w d0,98(sp)
				break;
    8f42:	|  |  |  +--|-------- bra.w 8fec <loadSpriteBank+0x350>
			case 3: //Font
				UWORD widthextra = loadhere->sprites[i].width % 16 > 0 ? 2 : 0;
    8f46:	|  |  |  |  \-------> movea.l 112(sp),a0
    8f4a:	|  |  |  |            movea.l 8(a0),a0
    8f4e:	|  |  |  |            move.l 100(sp),d1
    8f52:	|  |  |  |            move.l d1,d0
    8f54:	|  |  |  |            lsl.l #3,d0
    8f56:	|  |  |  |            sub.l d1,d0
    8f58:	|  |  |  |            add.l d0,d0
    8f5a:	|  |  |  |            add.l d0,d0
    8f5c:	|  |  |  |            adda.l d0,a0
    8f5e:	|  |  |  |            move.l (a0),d0
    8f60:	|  |  |  |            andi.l #-2147483633,d0
    8f66:	|  |  |  |        /-- bpl.s 8f70 <loadSpriteBank+0x2d4>
    8f68:	|  |  |  |        |   subq.l #1,d0
    8f6a:	|  |  |  |        |   moveq #-16,d1
    8f6c:	|  |  |  |        |   or.l d1,d0
    8f6e:	|  |  |  |        |   addq.l #1,d0
    8f70:	|  |  |  |        \-> tst.l d0
    8f72:	|  |  |  |     /----- ble.s 8f78 <loadSpriteBank+0x2dc>
    8f74:	|  |  |  |     |      moveq #2,d0
    8f76:	|  |  |  |     |  /-- bra.s 8f7a <loadSpriteBank+0x2de>
    8f78:	|  |  |  |     \--|-> clr.w d0
    8f7a:	|  |  |  |        \-> move.w d0,58(sp)
				size = ((loadhere->sprites[i].width  / 16) * 2 + widthextra) * loadhere->sprites[i].height;
    8f7e:	|  |  |  |            movea.l 112(sp),a0
    8f82:	|  |  |  |            movea.l 8(a0),a0
    8f86:	|  |  |  |            move.l 100(sp),d1
    8f8a:	|  |  |  |            move.l d1,d0
    8f8c:	|  |  |  |            lsl.l #3,d0
    8f8e:	|  |  |  |            sub.l d1,d0
    8f90:	|  |  |  |            add.l d0,d0
    8f92:	|  |  |  |            add.l d0,d0
    8f94:	|  |  |  |            adda.l d0,a0
    8f96:	|  |  |  |            move.l (a0),d0
    8f98:	|  |  |  |            movea.l d0,a0
    8f9a:	|  |  |  |            cmpa.w #0,a0
    8f9e:	|  |  |  |        /-- bge.s 8fa4 <loadSpriteBank+0x308>
    8fa0:	|  |  |  |        |   lea 15(a0),a0
    8fa4:	|  |  |  |        \-> move.l a0,d0
    8fa6:	|  |  |  |            asr.l #4,d0
    8fa8:	|  |  |  |            add.l d0,d0
    8faa:	|  |  |  |            move.l d0,d1
    8fac:	|  |  |  |            moveq #0,d0
    8fae:	|  |  |  |            move.w 58(sp),d0
    8fb2:	|  |  |  |            add.l d1,d0
    8fb4:	|  |  |  |            move.l d0,d2
    8fb6:	|  |  |  |            movea.l 112(sp),a0
    8fba:	|  |  |  |            movea.l 8(a0),a0
    8fbe:	|  |  |  |            move.l 100(sp),d1
    8fc2:	|  |  |  |            move.l d1,d0
    8fc4:	|  |  |  |            lsl.l #3,d0
    8fc6:	|  |  |  |            sub.l d1,d0
    8fc8:	|  |  |  |            add.l d0,d0
    8fca:	|  |  |  |            add.l d0,d0
    8fcc:	|  |  |  |            adda.l d0,a0
    8fce:	|  |  |  |            move.l 4(a0),d0
    8fd2:	|  |  |  |            move.l d0,d0
    8fd4:	|  |  |  |            move.w d2,d1
    8fd6:	|  |  |  |            muls.w d0,d1
    8fd8:	|  |  |  |            move.w d1,98(sp)
				if(size > 100)
    8fdc:	|  |  |  |            cmpi.w #100,98(sp)
    8fe2:	|  |  |  |        /-- bls.s 8fea <loadSpriteBank+0x34e>
				{
					UWORD br1 = 1;
    8fe4:	|  |  |  |        |   move.w #1,56(sp)
				}
				break;
    8fea:	|  |  |  |        \-> nop
		}

		loadhere->sprites[i].data = AllocVec(sizeof(UWORD) * size, MEMF_CHIP);
    8fec:	|  |  |  \----------> moveq #0,d0
    8fee:	|  |  |               move.w 98(sp),d0
    8ff2:	|  |  |               add.l d0,d0
    8ff4:	|  |  |               move.l d0,52(sp)
    8ff8:	|  |  |               moveq #2,d0
    8ffa:	|  |  |               move.l d0,48(sp)
    8ffe:	|  |  |               move.l 1ca82 <SysBase>,d0
    9004:	|  |  |               movea.l d0,a6
    9006:	|  |  |               move.l 52(sp),d0
    900a:	|  |  |               move.l 48(sp),d1
    900e:	|  |  |               jsr -684(a6)
    9012:	|  |  |               move.l d0,44(sp)
    9016:	|  |  |               movea.l 44(sp),a1
    901a:	|  |  |               movea.l 112(sp),a0
    901e:	|  |  |               movea.l 8(a0),a0
    9022:	|  |  |               move.l 100(sp),d1
    9026:	|  |  |               move.l d1,d0
    9028:	|  |  |               lsl.l #3,d0
    902a:	|  |  |               sub.l d1,d0
    902c:	|  |  |               add.l d0,d0
    902e:	|  |  |               add.l d0,d0
    9030:	|  |  |               adda.l d0,a0
    9032:	|  |  |               move.l a1,24(a0)
		UWORD count = FRead(bigDataFile, loadhere->sprites[i].data, 2, size / 2);
    9036:	|  |  |               move.l 1ca6a <bigDataFile>,40(sp)
    903e:	|  |  |               movea.l 112(sp),a0
    9042:	|  |  |               movea.l 8(a0),a0
    9046:	|  |  |               move.l 100(sp),d1
    904a:	|  |  |               move.l d1,d0
    904c:	|  |  |               lsl.l #3,d0
    904e:	|  |  |               sub.l d1,d0
    9050:	|  |  |               add.l d0,d0
    9052:	|  |  |               add.l d0,d0
    9054:	|  |  |               adda.l d0,a0
    9056:	|  |  |               move.l 24(a0),36(sp)
    905c:	|  |  |               moveq #2,d1
    905e:	|  |  |               move.l d1,32(sp)
    9062:	|  |  |               move.w 98(sp),d0
    9066:	|  |  |               lsr.w #1,d0
    9068:	|  |  |               move.w d0,d0
    906a:	|  |  |               andi.l #65535,d0
    9070:	|  |  |               move.l d0,28(sp)
    9074:	|  |  |               move.l 1ca8a <DOSBase>,d0
    907a:	|  |  |               movea.l d0,a6
    907c:	|  |  |               move.l 40(sp),d1
    9080:	|  |  |               move.l 36(sp),d2
    9084:	|  |  |               move.l 32(sp),d3
    9088:	|  |  |               move.l 28(sp),d4
    908c:	|  |  |               jsr -324(a6)
    9090:	|  |  |               move.l d0,24(sp)
    9094:	|  |  |               move.l 24(sp),d0
    9098:	|  |  |               move.w d0,22(sp)
		if (!count) {
    909c:	|  |  |           /-- bne.s 90b0 <loadSpriteBank+0x414>
			KPrintF("loadSpriteBank: Cannot read sprite Data from File\n");
    909e:	|  |  |           |   pea 191ad <PutChar+0x137d>
    90a4:	|  |  |           |   jsr 17366 <KPrintF>
    90aa:	|  |  |           |   addq.l #4,sp
			return FALSE;
    90ac:	|  |  |           |   clr.w d0
    90ae:	+--|--|-----------|-- bra.s 90d6 <loadSpriteBank+0x43a>
	for (i = 0; i < total; i++) {
    90b0:	|  |  |           \-> addq.l #1,100(sp)
    90b4:	|  |  \-------------> move.l 100(sp),d0
    90b8:	|  |                  cmp.l 74(sp),d0
    90bc:	|  \----------------- blt.w 8de0 <loadSpriteBank+0x144>
		}
	}

	finishAccess ();
    90c0:	|                     jsr 6da8 <finishAccess>

	KPrintF("loadSpriteBank: Complete\n");
    90c6:	|                     pea 191e0 <PutChar+0x13b0>
    90cc:	|                     jsr 17366 <KPrintF>
    90d2:	|                     addq.l #4,sp
	return TRUE;
    90d4:	|                     moveq #1,d0
}
    90d6:	\-------------------> movem.l (sp)+,d2-d4/a2/a6
    90da:	                      lea 84(sp),sp
    90de:	                      rts

000090e0 <scaleSprite>:

BOOL scaleSprite (struct sprite *single, struct onScreenPerson * thisPerson, BOOL mirror) 
{
    90e0:	                   lea -16(sp),sp
    90e4:	                   move.l 28(sp),d0
    90e8:	                   move.w d0,d0
    90ea:	                   move.w d0,2(sp)
	UWORD x =  (UWORD) thisPerson->x - single->xhot;
    90ee:	                   movea.l 24(sp),a0
    90f2:	                   move.l (a0),d0
    90f4:	                   move.l d0,-(sp)
    90f6:	                   jsr 17af8 <__fixunssfsi>
    90fc:	                   addq.l #4,sp
    90fe:	                   move.l d0,d0
    9100:	                   movea.l 20(sp),a0
    9104:	                   move.l 8(a0),d1
    9108:	                   move.l d1,d1
    910a:	                   movea.w d0,a0
    910c:	                   suba.w d1,a0
    910e:	                   move.w a0,6(sp)
	UWORD y =  (UWORD) thisPerson->y - single->yhot;			
    9112:	                   movea.l 24(sp),a0
    9116:	                   move.l 4(a0),d0
    911a:	                   move.l d0,-(sp)
    911c:	                   jsr 17af8 <__fixunssfsi>
    9122:	                   addq.l #4,sp
    9124:	                   move.l d0,d0
    9126:	                   movea.l 20(sp),a0
    912a:	                   move.l 12(a0),d1
    912e:	                   move.l d1,d1
    9130:	                   movea.w d0,a0
    9132:	                   suba.w d1,a0
    9134:	                   move.w a0,4(sp)

	CstScaleSprite( single, thisPerson, (WORD) x, (WORD) y,SCREEN);
    9138:	                   move.w 4(sp),d0
    913c:	                   movea.w d0,a1
    913e:	                   move.w 6(sp),d0
    9142:	                   movea.w d0,a0
    9144:	                   pea 1 <_start+0x1>
    9148:	                   move.l a1,-(sp)
    914a:	                   move.l a0,-(sp)
    914c:	                   move.l 36(sp),-(sp)
    9150:	                   move.l 36(sp),-(sp)
    9154:	                   jsr 2e62 <CstScaleSprite>
    915a:	                   lea 20(sp),sp

	UWORD x1, y1, x2, y2;

	if (thisPerson -> extra & EXTRA_FIXTOSCREEN) {
    915e:	                   movea.l 24(sp),a0
    9162:	                   move.l 118(a0),d0
    9166:	                   moveq #8,d1
    9168:	                   and.l d1,d0
    916a:	   /-------------- beq.w 922c <scaleSprite+0x14c>
		if (single->xhot < 0)
    916e:	   |               movea.l 20(sp),a0
    9172:	   |               move.l 8(a0),d0
    9176:	   |  /----------- bpl.s 91ae <scaleSprite+0xce>
			x1 = x - (int)(mirror ? single->width - single->xhot : single->xhot+1);
    9178:	   |  |            tst.w 2(sp)
    917c:	   |  |     /----- beq.s 9194 <scaleSprite+0xb4>
    917e:	   |  |     |      movea.l 20(sp),a0
    9182:	   |  |     |      move.l (a0),d0
    9184:	   |  |     |      move.l d0,d1
    9186:	   |  |     |      movea.l 20(sp),a0
    918a:	   |  |     |      move.l 8(a0),d0
    918e:	   |  |     |      move.l d0,d0
    9190:	   |  |     |      sub.w d0,d1
    9192:	   |  |     |  /-- bra.s 91a2 <scaleSprite+0xc2>
    9194:	   |  |     \--|-> movea.l 20(sp),a0
    9198:	   |  |        |   move.l 8(a0),d0
    919c:	   |  |        |   move.l d0,d0
    919e:	   |  |        |   move.w d0,d1
    91a0:	   |  |        |   addq.w #1,d1
    91a2:	   |  |        \-> movea.w 6(sp),a0
    91a6:	   |  |            suba.w d1,a0
    91a8:	   |  |            move.w a0,14(sp)
    91ac:	   |  |  /-------- bra.s 91e2 <scaleSprite+0x102>
		else
			x1 = x - (int)(mirror ? single->width - (single->xhot+1) : single->xhot);
    91ae:	   |  \--|-------> tst.w 2(sp)
    91b2:	   |     |  /----- beq.s 91ce <scaleSprite+0xee>
    91b4:	   |     |  |      movea.l 20(sp),a0
    91b8:	   |     |  |      move.l (a0),d0
    91ba:	   |     |  |      move.l d0,d1
    91bc:	   |     |  |      movea.l 20(sp),a0
    91c0:	   |     |  |      move.l 8(a0),d0
    91c4:	   |     |  |      move.l d0,d0
    91c6:	   |     |  |      sub.w d0,d1
    91c8:	   |     |  |      move.w d1,d0
    91ca:	   |     |  |      subq.w #1,d0
    91cc:	   |     |  |  /-- bra.s 91d8 <scaleSprite+0xf8>
    91ce:	   |     |  \--|-> movea.l 20(sp),a0
    91d2:	   |     |     |   move.l 8(a0),d0
    91d6:	   |     |     |   move.l d0,d0
    91d8:	   |     |     \-> move.w 6(sp),d1
    91dc:	   |     |         sub.w d0,d1
    91de:	   |     |         move.w d1,14(sp)
		
		y1 = y - (single->yhot - thisPerson->floaty);
    91e2:	   |     \-------> movea.l 24(sp),a0
    91e6:	   |               move.l 24(a0),d0
    91ea:	   |               move.l d0,d1
    91ec:	   |               movea.l 20(sp),a0
    91f0:	   |               move.l 12(a0),d0
    91f4:	   |               move.l d0,d0
    91f6:	   |               sub.w d0,d1
    91f8:	   |               movea.w 4(sp),a0
    91fc:	   |               adda.w d1,a0
    91fe:	   |               move.w a0,12(sp)
		x2 = x1 + single->width;
    9202:	   |               movea.l 20(sp),a0
    9206:	   |               move.l (a0),d0
    9208:	   |               move.l d0,d0
    920a:	   |               move.w 14(sp),d1
    920e:	   |               add.w d0,d1
    9210:	   |               move.w d1,10(sp)
		y2 = y1 + single->height;
    9214:	   |               movea.l 20(sp),a0
    9218:	   |               move.l 4(a0),d0
    921c:	   |               move.l d0,d0
    921e:	   |               movea.w 12(sp),a0
    9222:	   |               adda.w d0,a0
    9224:	   |               move.w a0,8(sp)
    9228:	/--|-------------- bra.w 92fe <scaleSprite+0x21e>
	} else {
		x -= cameraX;
    922c:	|  \-------------> move.l 1cb3c <cameraX>,d0
    9232:	|                  move.l d0,d0
    9234:	|                  sub.w d0,6(sp)
		y -= cameraY;
    9238:	|                  move.l 1cb40 <cameraY>,d0
    923e:	|                  move.l d0,d0
    9240:	|                  sub.w d0,4(sp)
		if (single->xhot < 0)
    9244:	|                  movea.l 20(sp),a0
    9248:	|                  move.l 8(a0),d0
    924c:	|     /----------- bpl.s 9284 <scaleSprite+0x1a4>
			x1 = x - (int)(mirror ? single->width - single->xhot : single->xhot+1);
    924e:	|     |            tst.w 2(sp)
    9252:	|     |     /----- beq.s 926a <scaleSprite+0x18a>
    9254:	|     |     |      movea.l 20(sp),a0
    9258:	|     |     |      move.l (a0),d0
    925a:	|     |     |      move.l d0,d1
    925c:	|     |     |      movea.l 20(sp),a0
    9260:	|     |     |      move.l 8(a0),d0
    9264:	|     |     |      move.l d0,d0
    9266:	|     |     |      sub.w d0,d1
    9268:	|     |     |  /-- bra.s 9278 <scaleSprite+0x198>
    926a:	|     |     \--|-> movea.l 20(sp),a0
    926e:	|     |        |   move.l 8(a0),d0
    9272:	|     |        |   move.l d0,d0
    9274:	|     |        |   move.w d0,d1
    9276:	|     |        |   addq.w #1,d1
    9278:	|     |        \-> move.w 6(sp),d0
    927c:	|     |            sub.w d1,d0
    927e:	|     |            move.w d0,14(sp)
    9282:	|     |  /-------- bra.s 92b8 <scaleSprite+0x1d8>
		else
			x1 = x - (int)(mirror ? single->width - (single->xhot+1) : single->xhot);
    9284:	|     \--|-------> tst.w 2(sp)
    9288:	|        |  /----- beq.s 92a4 <scaleSprite+0x1c4>
    928a:	|        |  |      movea.l 20(sp),a0
    928e:	|        |  |      move.l (a0),d0
    9290:	|        |  |      move.l d0,d1
    9292:	|        |  |      movea.l 20(sp),a0
    9296:	|        |  |      move.l 8(a0),d0
    929a:	|        |  |      move.l d0,d0
    929c:	|        |  |      sub.w d0,d1
    929e:	|        |  |      move.w d1,d0
    92a0:	|        |  |      subq.w #1,d0
    92a2:	|        |  |  /-- bra.s 92ae <scaleSprite+0x1ce>
    92a4:	|        |  \--|-> movea.l 20(sp),a0
    92a8:	|        |     |   move.l 8(a0),d0
    92ac:	|        |     |   move.l d0,d0
    92ae:	|        |     \-> move.w 6(sp),d1
    92b2:	|        |         sub.w d0,d1
    92b4:	|        |         move.w d1,14(sp)
		
		y1 = y - (single->yhot - thisPerson->floaty);
    92b8:	|        \-------> movea.l 24(sp),a0
    92bc:	|                  move.l 24(a0),d0
    92c0:	|                  move.l d0,d1
    92c2:	|                  movea.l 20(sp),a0
    92c6:	|                  move.l 12(a0),d0
    92ca:	|                  move.l d0,d0
    92cc:	|                  sub.w d0,d1
    92ce:	|                  movea.w 4(sp),a0
    92d2:	|                  adda.w d1,a0
    92d4:	|                  move.w a0,12(sp)
		x2 = x1 + single->width;
    92d8:	|                  movea.l 20(sp),a0
    92dc:	|                  move.l (a0),d0
    92de:	|                  move.l d0,d0
    92e0:	|                  move.w 14(sp),d1
    92e4:	|                  add.w d0,d1
    92e6:	|                  move.w d1,10(sp)
		y2 = y1 + single->height;
    92ea:	|                  movea.l 20(sp),a0
    92ee:	|                  move.l 4(a0),d0
    92f2:	|                  move.l d0,d0
    92f4:	|                  movea.w 12(sp),a0
    92f8:	|                  adda.w d0,a0
    92fa:	|                  move.w a0,8(sp)
	}

	if (input.mouseX >= x1 && input.mouseX <= x2 && input.mouseY >= y1 && input.mouseY <= y2) {
    92fe:	\----------------> move.l 1ca3e <input+0xa>,d1
    9304:	                   moveq #0,d0
    9306:	                   move.w 14(sp),d0
    930a:	                   cmp.l d1,d0
    930c:	            /----- bgt.s 9342 <scaleSprite+0x262>
    930e:	            |      move.l 1ca3e <input+0xa>,d1
    9314:	            |      moveq #0,d0
    9316:	            |      move.w 10(sp),d0
    931a:	            |      cmp.l d1,d0
    931c:	            +----- blt.s 9342 <scaleSprite+0x262>
    931e:	            |      move.l 1ca42 <input+0xe>,d1
    9324:	            |      moveq #0,d0
    9326:	            |      move.w 12(sp),d0
    932a:	            |      cmp.l d1,d0
    932c:	            +----- bgt.s 9342 <scaleSprite+0x262>
    932e:	            |      move.l 1ca42 <input+0xe>,d1
    9334:	            |      moveq #0,d0
    9336:	            |      move.w 8(sp),d0
    933a:	            |      cmp.l d1,d0
    933c:	            +----- blt.s 9342 <scaleSprite+0x262>
		return TRUE;
    933e:	            |      moveq #1,d0
    9340:	            |  /-- bra.s 9344 <scaleSprite+0x264>
	}
	return FALSE;
    9342:	            \--|-> clr.w d0
    9344:	               \-> lea 16(sp),sp
    9348:	                   rts

0000934a <TF_abs>:

short int scaleHorizon = 75;
short int scaleDivide = 150;

int TF_abs (int a) {
	return (a > 0) ? a : -a;
    934a:	    move.l 4(sp),d0
    934e:	/-- bpl.s 9352 <TF_abs+0x8>
    9350:	|   neg.l d0
}
    9352:	\-> rts

00009354 <addPerson>:


BOOL addPerson(int x, int y, int objNum, struct persona *p) {
    9354:	             lea -28(sp),sp
    9358:	             move.l a6,-(sp)
    935a:	             move.l d2,-(sp)
    struct onScreenPerson *newPerson = AllocVec(sizeof(struct onScreenPerson), MEMF_ANY);
    935c:	             move.l #132,28(sp)
    9364:	             clr.l 24(sp)
    9368:	             move.l 1ca82 <SysBase>,d0
    936e:	             movea.l d0,a6
    9370:	             move.l 28(sp),d0
    9374:	             move.l 24(sp),d1
    9378:	             jsr -684(a6)
    937c:	             move.l d0,20(sp)
    9380:	             move.l 20(sp),d0
    9384:	             move.l d0,16(sp)
    if (!newPerson) return FALSE;
    9388:	         /-- bne.s 9390 <addPerson+0x3c>
    938a:	         |   clr.w d0
    938c:	/--------|-- bra.w 95c0 <addPerson+0x26c>

    // EASY STUFF
    newPerson->thisType = loadObjectType(objNum);
    9390:	|        \-> move.l 48(sp),-(sp)
    9394:	|            jsr d740 <loadObjectType>
    939a:	|            addq.l #4,sp
    939c:	|            movea.l 16(sp),a0
    93a0:	|            move.l d0,114(a0)
    newPerson->scale = 1;
    93a4:	|            movea.l 16(sp),a0
    93a8:	|            move.l #1065353216,32(a0)
    newPerson->extra = 0;
    93b0:	|            movea.l 16(sp),a0
    93b4:	|            clr.l 118(a0)
    newPerson->continueAfterWalking = NULL;
    93b8:	|            movea.l 16(sp),a0
    93bc:	|            clr.l 68(a0)
    moveAndScale(newPerson, x, y);
    93c0:	|            move.l 44(sp),-(sp)
    93c4:	|            jsr 17798 <__floatsisf>
    93ca:	|            addq.l #4,sp
    93cc:	|            move.l d0,d2
    93ce:	|            move.l 40(sp),-(sp)
    93d2:	|            jsr 17798 <__floatsisf>
    93d8:	|            addq.l #4,sp
    93da:	|            move.l d2,-(sp)
    93dc:	|            move.l d0,-(sp)
    93de:	|            move.l 24(sp),-(sp)
    93e2:	|            jsr aea2 <moveAndScale>
    93e8:	|            lea 12(sp),sp
    newPerson->frameNum = 0;
    93ec:	|            movea.l 16(sp),a0
    93f0:	|            clr.l 84(a0)
    newPerson->walkToX = x;
    93f4:	|            movea.l 16(sp),a0
    93f8:	|            move.l 40(sp),40(a0)
    newPerson->walkToY = y;
    93fe:	|            movea.l 16(sp),a0
    9402:	|            move.l 44(sp),44(a0)
    newPerson->walking = FALSE;
    9408:	|            movea.l 16(sp),a0
    940c:	|            clr.w 64(a0)
    newPerson->spinning = FALSE;
    9410:	|            movea.l 16(sp),a0
    9414:	|            clr.w 66(a0)
    newPerson->show = TRUE;
    9418:	|            movea.l 16(sp),a0
    941c:	|            move.w #1,104(a0)
    newPerson->direction = 0;
    9422:	|            movea.l 16(sp),a0
    9426:	|            clr.l 106(a0)
    newPerson->angle = 180;
    942a:	|            movea.l 16(sp),a0
    942e:	|            move.l #180,92(a0)
    newPerson->wantAngle = 180;
    9436:	|            movea.l 16(sp),a0
    943a:	|            move.l #180,96(a0)
    newPerson->angleOffset = 0;
    9442:	|            movea.l 16(sp),a0
    9446:	|            clr.l 100(a0)
    newPerson->floaty = 0;
    944a:	|            movea.l 16(sp),a0
    944e:	|            clr.l 24(a0)
    newPerson->walkSpeed = newPerson->thisType->walkSpeed;
    9452:	|            movea.l 16(sp),a0
    9456:	|            movea.l 114(a0),a0
    945a:	|            move.l 24(a0),d0
    945e:	|            movea.l 16(sp),a0
    9462:	|            move.l d0,28(a0)
    newPerson->myAnim = NULL;
    9466:	|            movea.l 16(sp),a0
    946a:	|            clr.l 72(a0)
    newPerson->spinSpeed = newPerson->thisType->spinSpeed;
    946e:	|            movea.l 16(sp),a0
    9472:	|            movea.l 114(a0),a0
    9476:	|            move.l 32(a0),d0
    947a:	|            movea.l 16(sp),a0
    947e:	|            move.l d0,122(a0)
    newPerson->r = 0;
    9482:	|            movea.l 16(sp),a0
    9486:	|            clr.b 126(a0)
    newPerson->g = 0;
    948a:	|            movea.l 16(sp),a0
    948e:	|            clr.b 127(a0)
    newPerson->b = 0;
    9492:	|            movea.l 16(sp),a0
    9496:	|            clr.b 128(a0)
    newPerson->colourmix = 0;
    949a:	|            movea.l 16(sp),a0
    949e:	|            clr.b 129(a0)
    newPerson->transparency = 0;
    94a2:	|            movea.l 16(sp),a0
    94a6:	|            clr.b 130(a0)
    newPerson->myPersona = p;
    94aa:	|            movea.l 16(sp),a0
    94ae:	|            move.l 52(sp),80(a0)

    setFrames(newPerson, ANI_STAND);
    94b4:	|            clr.l -(sp)
    94b6:	|            move.l 20(sp),-(sp)
    94ba:	|            jsr 82a4 <setFrames>
    94c0:	|            addq.l #8,sp

    // HEIGHT (BASED ON 1st FRAME OF 1st ANIMATION... INC. SPECIAL CASES)
    int fNumSigned = p->animation[0]->frames[0].frameNum;
    94c2:	|            movea.l 52(sp),a0
    94c6:	|            movea.l (a0),a0
    94c8:	|            movea.l (a0),a0
    94ca:	|            movea.l 4(a0),a0
    94ce:	|            move.l (a0),12(sp)
    int fNum = fNumSigned < 0 ? fNumSigned * - 1 : 1;
    94d2:	|     /----- bpl.s 94dc <addPerson+0x188>
    94d4:	|     |      move.l 12(sp),d0
    94d8:	|     |      neg.l d0
    94da:	|     |  /-- bra.s 94de <addPerson+0x18a>
    94dc:	|     \--|-> moveq #1,d0
    94de:	|        \-> move.l d0,8(sp)
    if (fNum >= p->animation[0]->theSprites->bank.total) {
    94e2:	|            movea.l 52(sp),a0
    94e6:	|            movea.l (a0),a0
    94e8:	|            movea.l (a0),a0
    94ea:	|            movea.l (a0),a0
    94ec:	|            move.l 8(a0),d0
    94f0:	|            cmp.l 8(sp),d0
    94f4:	|     /----- bgt.s 9526 <addPerson+0x1d2>
        if (fNumSigned < 0) {
    94f6:	|     |      tst.l 12(sp)
    94fa:	|     |  /-- bge.s 9508 <addPerson+0x1b4>
            newPerson->height = 5;
    94fc:	|     |  |   movea.l 16(sp),a0
    9500:	|     |  |   moveq #5,d0
    9502:	|     |  |   move.l d0,20(a0)
    9506:	|  /--|--|-- bra.s 9552 <addPerson+0x1fe>
        } else {
            newPerson->height = p->animation[0]->theSprites->bank.sprites[0].yhot + 5;
    9508:	|  |  |  \-> movea.l 52(sp),a0
    950c:	|  |  |      movea.l (a0),a0
    950e:	|  |  |      movea.l (a0),a0
    9510:	|  |  |      movea.l (a0),a0
    9512:	|  |  |      movea.l 16(a0),a0
    9516:	|  |  |      move.l 12(a0),d0
    951a:	|  |  |      addq.l #5,d0
    951c:	|  |  |      movea.l 16(sp),a0
    9520:	|  |  |      move.l d0,20(a0)
    9524:	|  +--|----- bra.s 9552 <addPerson+0x1fe>
        }
    } else {
        newPerson->height = p->animation[0]->theSprites->bank.sprites[fNum].yhot + 5;
    9526:	|  |  \----> movea.l 52(sp),a0
    952a:	|  |         movea.l (a0),a0
    952c:	|  |         movea.l (a0),a0
    952e:	|  |         movea.l (a0),a0
    9530:	|  |         movea.l 16(a0),a0
    9534:	|  |         move.l 8(sp),d1
    9538:	|  |         move.l d1,d0
    953a:	|  |         lsl.l #3,d0
    953c:	|  |         sub.l d1,d0
    953e:	|  |         add.l d0,d0
    9540:	|  |         add.l d0,d0
    9542:	|  |         adda.l d0,a0
    9544:	|  |         move.l 12(a0),d0
    9548:	|  |         addq.l #5,d0
    954a:	|  |         movea.l 16(sp),a0
    954e:	|  |         move.l d0,20(a0)
    }

    // NOW ADD IT IN THE RIGHT PLACE
    struct onScreenPerson **changethat = &allPeople;
    9552:	|  \-------> move.l #117478,32(sp)

    while (((*changethat) != NULL) && ((*changethat)->y < y)) {
    955a:	|        /-- bra.s 956a <addPerson+0x216>
        changethat = &((*changethat)->next);
    955c:	|     /--|-> movea.l 32(sp),a0
    9560:	|     |  |   move.l (a0),d0
    9562:	|     |  |   moveq #36,d1
    9564:	|     |  |   add.l d0,d1
    9566:	|     |  |   move.l d1,32(sp)
    while (((*changethat) != NULL) && ((*changethat)->y < y)) {
    956a:	|     |  \-> movea.l 32(sp),a0
    956e:	|     |      move.l (a0),d0
    9570:	|     |  /-- beq.s 9598 <addPerson+0x244>
    9572:	|     |  |   movea.l 32(sp),a0
    9576:	|     |  |   movea.l (a0),a0
    9578:	|     |  |   move.l 4(a0),d2
    957c:	|     |  |   move.l 44(sp),-(sp)
    9580:	|     |  |   jsr 17798 <__floatsisf>
    9586:	|     |  |   addq.l #4,sp
    9588:	|     |  |   move.l d0,-(sp)
    958a:	|     |  |   move.l d2,-(sp)
    958c:	|     |  |   jsr 179be <__ltsf2>
    9592:	|     |  |   addq.l #8,sp
    9594:	|     |  |   tst.l d0
    9596:	|     \--|-- blt.s 955c <addPerson+0x208>
    }

    newPerson->next = (*changethat);
    9598:	|        \-> movea.l 32(sp),a0
    959c:	|            move.l (a0),d0
    959e:	|            movea.l 16(sp),a0
    95a2:	|            move.l d0,36(a0)
    (*changethat) = newPerson;
    95a6:	|            movea.l 32(sp),a0
    95aa:	|            move.l 16(sp),(a0)

    return (BOOL) (newPerson->thisType != NULL);
    95ae:	|            movea.l 16(sp),a0
    95b2:	|            move.l 114(a0),d0
    95b6:	|            sne d0
    95b8:	|            neg.b d0
    95ba:	|            move.b d0,d0
    95bc:	|            andi.w #255,d0
}
    95c0:	\----------> move.l (sp)+,d2
    95c2:	             movea.l (sp)+,a6
    95c4:	             lea 28(sp),sp
    95c8:	             rts

000095ca <animatePerson>:

void animatePerson (int obj, struct personaAnimation * fram) { // Set a new SINGLE animation
    95ca:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(obj);
    95cc:	       move.l 8(sp),-(sp)
    95d0:	       jsr a75a <findPerson>
    95d6:	       addq.l #4,sp
    95d8:	       move.l d0,(sp)
    if (moveMe) {
    95da:	/----- beq.s 960e <animatePerson+0x44>
        if (moveMe -> continueAfterWalking) abortFunction(moveMe -> continueAfterWalking);
    95dc:	|      movea.l (sp),a0
    95de:	|      move.l 68(a0),d0
    95e2:	|  /-- beq.s 95f4 <animatePerson+0x2a>
    95e4:	|  |   movea.l (sp),a0
    95e6:	|  |   move.l 68(a0),d0
    95ea:	|  |   move.l d0,-(sp)
    95ec:	|  |   jsr 484c <abortFunction>
    95f2:	|  |   addq.l #4,sp
        moveMe -> continueAfterWalking = NULL;
    95f4:	|  \-> movea.l (sp),a0
    95f6:	|      clr.l 68(a0)
        moveMe -> walking = FALSE;
    95fa:	|      movea.l (sp),a0
    95fc:	|      clr.w 64(a0)
        moveMe -> spinning = FALSE;
    9600:	|      movea.l (sp),a0
    9602:	|      clr.w 66(a0)
        moveMe -> myAnim = fram;
    9606:	|      movea.l (sp),a0
    9608:	|      move.l 12(sp),72(a0)
    }
}
    960e:	\----> nop
    9610:	       addq.l #4,sp
    9612:	       rts

00009614 <animatePersonUsingPersona>:

void animatePersonUsingPersona (int obj, struct persona * per) { // Set a new costume
    9614:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(obj);
    9616:	       move.l 8(sp),-(sp)
    961a:	       jsr a75a <findPerson>
    9620:	       addq.l #4,sp
    9622:	       move.l d0,(sp)
    if (moveMe) {
    9624:	/----- beq.s 9666 <animatePersonUsingPersona+0x52>
        // if (moveMe -> continueAfterWalking) abortFunction (moveMe -> continueAfterWalking);
        // moveMe -> continueAfterWalking = NULL;
        // moveMe -> walking = false;
        moveMe -> spinning = FALSE;
    9626:	|      movea.l (sp),a0
    9628:	|      clr.w 66(a0)
        moveMe -> myPersona = per;
    962c:	|      movea.l (sp),a0
    962e:	|      move.l 12(sp),80(a0)
        rethinkAngle(moveMe);
    9634:	|      move.l (sp),-(sp)
    9636:	|      jsr b030 <rethinkAngle>
    963c:	|      addq.l #4,sp
        if (moveMe->walking) {
    963e:	|      movea.l (sp),a0
    9640:	|      move.w 64(a0),d0
    9644:	|  /-- beq.s 9658 <animatePersonUsingPersona+0x44>
            setFrames(moveMe, ANI_WALK);
    9646:	|  |   pea 1 <_start+0x1>
    964a:	|  |   move.l 4(sp),-(sp)
    964e:	|  |   jsr 82a4 <setFrames>
    9654:	|  |   addq.l #8,sp
        } else {
            setFrames(moveMe, ANI_STAND);
        }
    }
}
    9656:	+--|-- bra.s 9666 <animatePersonUsingPersona+0x52>
            setFrames(moveMe, ANI_STAND);
    9658:	|  \-> clr.l -(sp)
    965a:	|      move.l 4(sp),-(sp)
    965e:	|      jsr 82a4 <setFrames>
    9664:	|      addq.l #8,sp
}
    9666:	\----> nop
    9668:	       addq.l #4,sp
    966a:	       rts

0000966c <copyAnim>:
		thisPerson = thisPerson->next;
	}
}


struct personaAnimation * copyAnim (struct personaAnimation * orig) {
    966c:	             lea -36(sp),sp
    9670:	             move.l a6,-(sp)
	int num = orig -> numFrames;
    9672:	             movea.l 44(sp),a0
    9676:	             move.l 8(a0),32(sp)


	struct personaAnimation * newAnim	= AllocVec(sizeof( struct personaAnimation), MEMF_ANY);
    967c:	             moveq #12,d0
    967e:	             move.l d0,28(sp)
    9682:	             clr.l 24(sp)
    9686:	             move.l 1ca82 <SysBase>,d0
    968c:	             movea.l d0,a6
    968e:	             move.l 28(sp),d0
    9692:	             move.l 24(sp),d1
    9696:	             jsr -684(a6)
    969a:	             move.l d0,20(sp)
    969e:	             move.l 20(sp),d0
    96a2:	             move.l d0,16(sp)
	if (!(newAnim)) {
    96a6:	         /-- bne.s 96bc <copyAnim+0x50>
		KPrintF("copyAnim: Cannot allocate memory");
    96a8:	         |   pea 191fa <PutChar+0x13ca>
    96ae:	         |   jsr 17366 <KPrintF>
    96b4:	         |   addq.l #4,sp
		return NULL;
    96b6:	         |   moveq #0,d0
    96b8:	/--------|-- bra.w 980e <copyAnim+0x1a2>
	}

	// Copy the easy bits...
	newAnim -> theSprites		= orig -> theSprites;
    96bc:	|        \-> movea.l 44(sp),a0
    96c0:	|            move.l (a0),d0
    96c2:	|            movea.l 16(sp),a0
    96c6:	|            move.l d0,(a0)
	newAnim -> theSprites ->timesUsed++;
    96c8:	|            movea.l 16(sp),a0
    96cc:	|            movea.l (a0),a0
    96ce:	|            move.l 4(a0),d0
    96d2:	|            addq.l #1,d0
    96d4:	|            move.l d0,4(a0)
	newAnim -> numFrames		= num;
    96d8:	|            movea.l 16(sp),a0
    96dc:	|            move.l 32(sp),8(a0)

	if (num) {
    96e2:	|  /-------- beq.w 9802 <copyAnim+0x196>

		// Argh! Frames! We need a whole NEW array of animFrame structures...

		newAnim->frames = AllocVec(sizeof(struct animFrame) * num, MEMF_ANY);
    96e6:	|  |         move.l 32(sp),d1
    96ea:	|  |         move.l d1,d0
    96ec:	|  |         add.l d0,d0
    96ee:	|  |         add.l d1,d0
    96f0:	|  |         add.l d0,d0
    96f2:	|  |         add.l d0,d0
    96f4:	|  |         move.l d0,12(sp)
    96f8:	|  |         clr.l 8(sp)
    96fc:	|  |         move.l 1ca82 <SysBase>,d0
    9702:	|  |         movea.l d0,a6
    9704:	|  |         move.l 12(sp),d0
    9708:	|  |         move.l 8(sp),d1
    970c:	|  |         jsr -684(a6)
    9710:	|  |         move.l d0,4(sp)
    9714:	|  |         move.l 4(sp),d0
    9718:	|  |         movea.l 16(sp),a0
    971c:	|  |         move.l d0,4(a0)
		if (!newAnim->frames) {
    9720:	|  |         movea.l 16(sp),a0
    9724:	|  |         move.l 4(a0),d0
    9728:	|  |     /-- bne.s 973e <copyAnim+0xd2>
			KPrintF("copyAnim: Cannot allocate memory");
    972a:	|  |     |   pea 191fa <PutChar+0x13ca>
    9730:	|  |     |   jsr 17366 <KPrintF>
    9736:	|  |     |   addq.l #4,sp
			return NULL;
    9738:	|  |     |   moveq #0,d0
    973a:	+--|-----|-- bra.w 980e <copyAnim+0x1a2>
		}

		for (int a = 0; a < num; a ++) {
    973e:	|  |     \-> clr.l 36(sp)
    9742:	|  |     /-- bra.w 97f4 <copyAnim+0x188>
			newAnim -> frames[a].frameNum = orig -> frames[a].frameNum;
    9746:	|  |  /--|-> movea.l 44(sp),a0
    974a:	|  |  |  |   movea.l 4(a0),a0
    974e:	|  |  |  |   move.l 36(sp),d1
    9752:	|  |  |  |   move.l d1,d0
    9754:	|  |  |  |   add.l d0,d0
    9756:	|  |  |  |   add.l d1,d0
    9758:	|  |  |  |   add.l d0,d0
    975a:	|  |  |  |   add.l d0,d0
    975c:	|  |  |  |   lea (0,a0,d0.l),a1
    9760:	|  |  |  |   movea.l 16(sp),a0
    9764:	|  |  |  |   movea.l 4(a0),a0
    9768:	|  |  |  |   move.l 36(sp),d1
    976c:	|  |  |  |   move.l d1,d0
    976e:	|  |  |  |   add.l d0,d0
    9770:	|  |  |  |   add.l d1,d0
    9772:	|  |  |  |   add.l d0,d0
    9774:	|  |  |  |   add.l d0,d0
    9776:	|  |  |  |   adda.l d0,a0
    9778:	|  |  |  |   move.l (a1),d0
    977a:	|  |  |  |   move.l d0,(a0)
			newAnim -> frames[a].howMany = orig -> frames[a].howMany;
    977c:	|  |  |  |   movea.l 44(sp),a0
    9780:	|  |  |  |   movea.l 4(a0),a0
    9784:	|  |  |  |   move.l 36(sp),d1
    9788:	|  |  |  |   move.l d1,d0
    978a:	|  |  |  |   add.l d0,d0
    978c:	|  |  |  |   add.l d1,d0
    978e:	|  |  |  |   add.l d0,d0
    9790:	|  |  |  |   add.l d0,d0
    9792:	|  |  |  |   lea (0,a0,d0.l),a1
    9796:	|  |  |  |   movea.l 16(sp),a0
    979a:	|  |  |  |   movea.l 4(a0),a0
    979e:	|  |  |  |   move.l 36(sp),d1
    97a2:	|  |  |  |   move.l d1,d0
    97a4:	|  |  |  |   add.l d0,d0
    97a6:	|  |  |  |   add.l d1,d0
    97a8:	|  |  |  |   add.l d0,d0
    97aa:	|  |  |  |   add.l d0,d0
    97ac:	|  |  |  |   adda.l d0,a0
    97ae:	|  |  |  |   move.l 4(a1),d0
    97b2:	|  |  |  |   move.l d0,4(a0)
			newAnim -> frames[a].noise = orig -> frames[a].noise;
    97b6:	|  |  |  |   movea.l 44(sp),a0
    97ba:	|  |  |  |   movea.l 4(a0),a0
    97be:	|  |  |  |   move.l 36(sp),d1
    97c2:	|  |  |  |   move.l d1,d0
    97c4:	|  |  |  |   add.l d0,d0
    97c6:	|  |  |  |   add.l d1,d0
    97c8:	|  |  |  |   add.l d0,d0
    97ca:	|  |  |  |   add.l d0,d0
    97cc:	|  |  |  |   lea (0,a0,d0.l),a1
    97d0:	|  |  |  |   movea.l 16(sp),a0
    97d4:	|  |  |  |   movea.l 4(a0),a0
    97d8:	|  |  |  |   move.l 36(sp),d1
    97dc:	|  |  |  |   move.l d1,d0
    97de:	|  |  |  |   add.l d0,d0
    97e0:	|  |  |  |   add.l d1,d0
    97e2:	|  |  |  |   add.l d0,d0
    97e4:	|  |  |  |   add.l d0,d0
    97e6:	|  |  |  |   adda.l d0,a0
    97e8:	|  |  |  |   move.l 8(a1),d0
    97ec:	|  |  |  |   move.l d0,8(a0)
		for (int a = 0; a < num; a ++) {
    97f0:	|  |  |  |   addq.l #1,36(sp)
    97f4:	|  |  |  \-> move.l 36(sp),d0
    97f8:	|  |  |      cmp.l 32(sp),d0
    97fc:	|  |  \----- blt.w 9746 <copyAnim+0xda>
    9800:	|  |     /-- bra.s 980a <copyAnim+0x19e>
		}
	} else {
		newAnim -> frames = NULL;
    9802:	|  \-----|-> movea.l 16(sp),a0
    9806:	|        |   clr.l 4(a0)
	}

	return newAnim;
    980a:	|        \-> move.l 16(sp),d0
}
    980e:	\----------> movea.l (sp)+,a6
    9810:	             lea 36(sp),sp
    9814:	             rts

00009816 <createPersonaAnim>:


struct personaAnimation * createPersonaAnim (int num, struct variableStack **stacky) {
    9816:	                lea -44(sp),sp
    981a:	                move.l a6,-(sp)
    981c:	                move.l d2,-(sp)
	struct personaAnimation * newP = AllocVec( sizeof(struct personaAnimation), MEMF_ANY);
    981e:	                moveq #12,d0
    9820:	                move.l d0,40(sp)
    9824:	                clr.l 36(sp)
    9828:	                move.l 1ca82 <SysBase>,d0
    982e:	                movea.l d0,a6
    9830:	                move.l 40(sp),d0
    9834:	                move.l 36(sp),d1
    9838:	                jsr -684(a6)
    983c:	                move.l d0,32(sp)
    9840:	                move.l 32(sp),d0
    9844:	                move.l d0,28(sp)
	if( !newP) {
    9848:	            /-- bne.s 985e <createPersonaAnim+0x48>
		KPrintF("createPersonaAnim: Cannot allocate memory");
    984a:	            |   pea 1921b <PutChar+0x13eb>
    9850:	            |   jsr 17366 <KPrintF>
    9856:	            |   addq.l #4,sp
		return NULL;
    9858:	            |   moveq #0,d0
    985a:	/-----------|-- bra.w 9a2e <createPersonaAnim+0x218>
	}

	newP -> numFrames = num;
    985e:	|           \-> movea.l 28(sp),a0
    9862:	|               move.l 56(sp),8(a0)
	newP -> frames = AllocVec( sizeof( struct animFrame) * num,MEMF_ANY);
    9868:	|               move.l 56(sp),d1
    986c:	|               move.l d1,d0
    986e:	|               add.l d0,d0
    9870:	|               add.l d1,d0
    9872:	|               add.l d0,d0
    9874:	|               add.l d0,d0
    9876:	|               move.l d0,24(sp)
    987a:	|               clr.l 20(sp)
    987e:	|               move.l 1ca82 <SysBase>,d0
    9884:	|               movea.l d0,a6
    9886:	|               move.l 24(sp),d0
    988a:	|               move.l 20(sp),d1
    988e:	|               jsr -684(a6)
    9892:	|               move.l d0,16(sp)
    9896:	|               move.l 16(sp),d0
    989a:	|               movea.l 28(sp),a0
    989e:	|               move.l d0,4(a0)
	if( !newP->frames) {
    98a2:	|               movea.l 28(sp),a0
    98a6:	|               move.l 4(a0),d0
    98aa:	|           /-- bne.s 98c0 <createPersonaAnim+0xaa>
		KPrintF("createPersonaAnim: Cannot allocate memory");
    98ac:	|           |   pea 1921b <PutChar+0x13eb>
    98b2:	|           |   jsr 17366 <KPrintF>
    98b8:	|           |   addq.l #4,sp
		return NULL;
    98ba:	|           |   moveq #0,d0
    98bc:	+-----------|-- bra.w 9a2e <createPersonaAnim+0x218>
	}

	int a = num, frameNum, howMany;
    98c0:	|           \-> move.l 56(sp),48(sp)

	struct variableStack *tmp = *stacky;
    98c6:	|               movea.l 60(sp),a0
    98ca:	|               move.l (a0),44(sp)
	while (a) {
    98ce:	|     /-------- bra.w 9a22 <createPersonaAnim+0x20c>
		a --;
    98d2:	|  /--|-------> subq.l #1,48(sp)
		newP -> frames[a].noise = 0;
    98d6:	|  |  |         movea.l 28(sp),a0
    98da:	|  |  |         movea.l 4(a0),a0
    98de:	|  |  |         move.l 48(sp),d1
    98e2:	|  |  |         move.l d1,d0
    98e4:	|  |  |         add.l d0,d0
    98e6:	|  |  |         add.l d1,d0
    98e8:	|  |  |         add.l d0,d0
    98ea:	|  |  |         add.l d0,d0
    98ec:	|  |  |         adda.l d0,a0
    98ee:	|  |  |         clr.l 8(a0)
		if ( tmp->thisVar.varType == SVT_FILE) {
    98f2:	|  |  |         movea.l 44(sp),a0
    98f6:	|  |  |         move.l (a0),d0
    98f8:	|  |  |         moveq #5,d1
    98fa:	|  |  |         cmp.l d0,d1
    98fc:	|  |  |     /-- bne.s 9928 <createPersonaAnim+0x112>
			newP -> frames[a].noise = tmp -> thisVar.varData.intValue;
    98fe:	|  |  |     |   movea.l 28(sp),a0
    9902:	|  |  |     |   movea.l 4(a0),a0
    9906:	|  |  |     |   move.l 48(sp),d1
    990a:	|  |  |     |   move.l d1,d0
    990c:	|  |  |     |   add.l d0,d0
    990e:	|  |  |     |   add.l d1,d0
    9910:	|  |  |     |   add.l d0,d0
    9912:	|  |  |     |   add.l d0,d0
    9914:	|  |  |     |   lea (0,a0,d0.l),a1
    9918:	|  |  |     |   movea.l 44(sp),a0
    991c:	|  |  |     |   move.l 4(a0),d0
    9920:	|  |  |     |   move.l d0,8(a1)
    9924:	|  |  |  /--|-- bra.w 99d0 <createPersonaAnim+0x1ba>
		} else if ( tmp -> thisVar.varType == SVT_FUNC) {
    9928:	|  |  |  |  \-> movea.l 44(sp),a0
    992c:	|  |  |  |      move.l (a0),d0
    992e:	|  |  |  |      moveq #2,d1
    9930:	|  |  |  |      cmp.l d0,d1
    9932:	|  |  |  |  /-- bne.s 995e <createPersonaAnim+0x148>
			newP -> frames[a].noise = - tmp -> thisVar.varData.intValue;
    9934:	|  |  |  |  |   movea.l 44(sp),a0
    9938:	|  |  |  |  |   move.l 4(a0),d2
    993c:	|  |  |  |  |   movea.l 28(sp),a0
    9940:	|  |  |  |  |   movea.l 4(a0),a0
    9944:	|  |  |  |  |   move.l 48(sp),d1
    9948:	|  |  |  |  |   move.l d1,d0
    994a:	|  |  |  |  |   add.l d0,d0
    994c:	|  |  |  |  |   add.l d1,d0
    994e:	|  |  |  |  |   add.l d0,d0
    9950:	|  |  |  |  |   add.l d0,d0
    9952:	|  |  |  |  |   adda.l d0,a0
    9954:	|  |  |  |  |   move.l d2,d0
    9956:	|  |  |  |  |   neg.l d0
    9958:	|  |  |  |  |   move.l d0,8(a0)
    995c:	|  |  |  +--|-- bra.s 99d0 <createPersonaAnim+0x1ba>
		} else if ( tmp -> thisVar.varType == SVT_STACK) {
    995e:	|  |  |  |  \-> movea.l 44(sp),a0
    9962:	|  |  |  |      move.l (a0),d0
    9964:	|  |  |  |      moveq #6,d1
    9966:	|  |  |  |      cmp.l d0,d1
    9968:	|  |  |  |  /-- bne.s 99b0 <createPersonaAnim+0x19a>
			getValueType (&frameNum, SVT_INT, &tmp->thisVar.varData.theStack -> first -> thisVar);
    996a:	|  |  |  |  |   movea.l 44(sp),a0
    996e:	|  |  |  |  |   movea.l 4(a0),a0
    9972:	|  |  |  |  |   move.l (a0),d0
    9974:	|  |  |  |  |   move.l d0,-(sp)
    9976:	|  |  |  |  |   pea 1 <_start+0x1>
    997a:	|  |  |  |  |   lea 20(sp),a0
    997e:	|  |  |  |  |   move.l a0,-(sp)
    9980:	|  |  |  |  |   jsr 14906 <getValueType>
    9986:	|  |  |  |  |   lea 12(sp),sp
			getValueType (&howMany, SVT_INT, &tmp -> thisVar.varData.theStack -> first -> next -> thisVar);
    998a:	|  |  |  |  |   movea.l 44(sp),a0
    998e:	|  |  |  |  |   movea.l 4(a0),a0
    9992:	|  |  |  |  |   movea.l (a0),a0
    9994:	|  |  |  |  |   move.l 8(a0),d0
    9998:	|  |  |  |  |   move.l d0,-(sp)
    999a:	|  |  |  |  |   pea 1 <_start+0x1>
    999e:	|  |  |  |  |   lea 16(sp),a0
    99a2:	|  |  |  |  |   move.l a0,-(sp)
    99a4:	|  |  |  |  |   jsr 14906 <getValueType>
    99aa:	|  |  |  |  |   lea 12(sp),sp
    99ae:	|  |  |  +--|-- bra.s 99d0 <createPersonaAnim+0x1ba>
		} else {
			getValueType (&frameNum, SVT_INT, &tmp -> thisVar);
    99b0:	|  |  |  |  \-> move.l 44(sp),d0
    99b4:	|  |  |  |      move.l d0,-(sp)
    99b6:	|  |  |  |      pea 1 <_start+0x1>
    99ba:	|  |  |  |      lea 20(sp),a0
    99be:	|  |  |  |      move.l a0,-(sp)
    99c0:	|  |  |  |      jsr 14906 <getValueType>
    99c6:	|  |  |  |      lea 12(sp),sp
			howMany = 1;
    99ca:	|  |  |  |      moveq #1,d0
    99cc:	|  |  |  |      move.l d0,8(sp)
		}
		trimStack (stacky);
    99d0:	|  |  |  \----> move.l 60(sp),-(sp)
    99d4:	|  |  |         jsr 1528a <trimStack>
    99da:	|  |  |         addq.l #4,sp
		newP -> frames[a].frameNum = frameNum;
    99dc:	|  |  |         movea.l 28(sp),a0
    99e0:	|  |  |         movea.l 4(a0),a0
    99e4:	|  |  |         move.l 48(sp),d1
    99e8:	|  |  |         move.l d1,d0
    99ea:	|  |  |         add.l d0,d0
    99ec:	|  |  |         add.l d1,d0
    99ee:	|  |  |         add.l d0,d0
    99f0:	|  |  |         add.l d0,d0
    99f2:	|  |  |         adda.l d0,a0
    99f4:	|  |  |         move.l 12(sp),d0
    99f8:	|  |  |         move.l d0,(a0)
		newP -> frames[a].howMany = howMany;
    99fa:	|  |  |         movea.l 28(sp),a0
    99fe:	|  |  |         movea.l 4(a0),a0
    9a02:	|  |  |         move.l 48(sp),d1
    9a06:	|  |  |         move.l d1,d0
    9a08:	|  |  |         add.l d0,d0
    9a0a:	|  |  |         add.l d1,d0
    9a0c:	|  |  |         add.l d0,d0
    9a0e:	|  |  |         add.l d0,d0
    9a10:	|  |  |         adda.l d0,a0
    9a12:	|  |  |         move.l 8(sp),d0
    9a16:	|  |  |         move.l d0,4(a0)
		tmp = *stacky;
    9a1a:	|  |  |         movea.l 60(sp),a0
    9a1e:	|  |  |         move.l (a0),44(sp)
	while (a) {
    9a22:	|  |  \-------> tst.l 48(sp)
    9a26:	|  \----------- bne.w 98d2 <createPersonaAnim+0xbc>
	}

	return newP;
    9a2a:	|               move.l 28(sp),d0
}
    9a2e:	\-------------> move.l (sp)+,d2
    9a30:	                movea.l (sp)+,a6
    9a32:	                lea 44(sp),sp
    9a36:	                rts

00009a38 <deleteAnim>:

void deleteAnim (struct personaAnimation * orig) {
    9a38:	       lea -12(sp),sp
    9a3c:	       move.l a6,-(sp)

	if(orig->theSprites)
    9a3e:	       movea.l 20(sp),a0
    9a42:	       move.l (a0),d0
    9a44:	   /-- beq.s 9a6e <deleteAnim+0x36>
	{
		int timesused = --orig->theSprites->timesUsed;
    9a46:	   |   movea.l 20(sp),a0
    9a4a:	   |   movea.l (a0),a0
    9a4c:	   |   move.l 4(a0),d0
    9a50:	   |   subq.l #1,d0
    9a52:	   |   move.l d0,4(a0)
    9a56:	   |   move.l 4(a0),12(sp)
		
		if(!timesused)
    9a5c:	   +-- bne.s 9a6e <deleteAnim+0x36>
		{
			forgetSpriteBank( orig->theSprites);
    9a5e:	   |   movea.l 20(sp),a0
    9a62:	   |   move.l (a0),d0
    9a64:	   |   move.l d0,-(sp)
    9a66:	   |   jsr 8b90 <forgetSpriteBank>
    9a6c:	   |   addq.l #4,sp
		}
	}			
	
	if (orig)
    9a6e:	   \-> tst.l 20(sp)
    9a72:	/----- beq.s 9ab2 <deleteAnim+0x7a>
	{
		if (orig -> numFrames) {
    9a74:	|      movea.l 20(sp),a0
    9a78:	|      move.l 8(a0),d0
    9a7c:	|  /-- beq.s 9a98 <deleteAnim+0x60>
			FreeVec( orig->frames);
    9a7e:	|  |   movea.l 20(sp),a0
    9a82:	|  |   move.l 4(a0),8(sp)
    9a88:	|  |   move.l 1ca82 <SysBase>,d0
    9a8e:	|  |   movea.l d0,a6
    9a90:	|  |   movea.l 8(sp),a1
    9a94:	|  |   jsr -690(a6)
		}
		FreeVec(orig);
    9a98:	|  \-> move.l 20(sp),4(sp)
    9a9e:	|      move.l 1ca82 <SysBase>,d0
    9aa4:	|      movea.l d0,a6
    9aa6:	|      movea.l 4(sp),a1
    9aaa:	|      jsr -690(a6)
		orig = NULL;
    9aae:	|      clr.l 20(sp)
	}	
	
}
    9ab2:	\----> nop
    9ab4:	       movea.l (sp)+,a6
    9ab6:	       lea 12(sp),sp
    9aba:	       rts

00009abc <doBorderStuff>:

BOOL doBorderStuff (struct onScreenPerson * moveMe) {
    9abc:	          lea -124(sp),sp
    9ac0:	          movem.l d2-d7,-(sp)
    if (moveMe -> inPoly == moveMe -> walkToPoly) {
    9ac4:	          movea.l 152(sp),a0
    9ac8:	          move.l 56(a0),d1
    9acc:	          movea.l 152(sp),a0
    9ad0:	          move.l 60(a0),d0
    9ad4:	          cmp.l d1,d0
    9ad6:	      /-- bne.s 9b06 <doBorderStuff+0x4a>
        moveMe -> inPoly = -1;
    9ad8:	      |   movea.l 152(sp),a0
    9adc:	      |   moveq #-1,d0
    9ade:	      |   move.l d0,56(a0)
        moveMe -> thisStepX = moveMe -> walkToX;
    9ae2:	      |   movea.l 152(sp),a0
    9ae6:	      |   move.l 40(a0),d0
    9aea:	      |   movea.l 152(sp),a0
    9aee:	      |   move.l d0,48(a0)
        moveMe -> thisStepY = moveMe -> walkToY;
    9af2:	      |   movea.l 152(sp),a0
    9af6:	      |   move.l 44(a0),d0
    9afa:	      |   movea.l 152(sp),a0
    9afe:	      |   move.l d0,52(a0)
    9b02:	   /--|-- bra.w a06c <doBorderStuff+0x5b0>
    } else {
        // The section in which we need to be next...
        int newPoly = currentFloor -> matrix[moveMe -> inPoly][moveMe -> walkToPoly];
    9b06:	   |  \-> movea.l 1cb9e <currentFloor>,a0
    9b0c:	   |      move.l 16(a0),d1
    9b10:	   |      movea.l 152(sp),a0
    9b14:	   |      move.l 56(a0),d0
    9b18:	   |      add.l d0,d0
    9b1a:	   |      add.l d0,d0
    9b1c:	   |      movea.l d1,a0
    9b1e:	   |      adda.l d0,a0
    9b20:	   |      move.l (a0),d1
    9b22:	   |      movea.l 152(sp),a0
    9b26:	   |      move.l 60(a0),d0
    9b2a:	   |      add.l d0,d0
    9b2c:	   |      add.l d0,d0
    9b2e:	   |      movea.l d1,a0
    9b30:	   |      adda.l d0,a0
    9b32:	   |      move.l (a0),144(sp)
        if (newPoly == -1) return FALSE;
    9b36:	   |      moveq #-1,d0
    9b38:	   |      cmp.l 144(sp),d0
    9b3c:	   |  /-- bne.s 9b44 <doBorderStuff+0x88>
    9b3e:	   |  |   clr.w d0
    9b40:	/--|--|-- bra.w a16c <doBorderStuff+0x6b0>

        // Grab the index of the second matching corner...
        int ID, ID2;
        if (! getMatchingCorners (&(currentFloor -> polygon[moveMe -> inPoly]), &(currentFloor -> polygon[newPoly]), &ID, &ID2))
    9b44:	|  |  \-> movea.l 1cb9e <currentFloor>,a0
    9b4a:	|  |      move.l 12(a0),d1
    9b4e:	|  |      move.l 144(sp),d0
    9b52:	|  |      lsl.l #3,d0
    9b54:	|  |      add.l d0,d1
    9b56:	|  |      movea.l 1cb9e <currentFloor>,a0
    9b5c:	|  |      movea.l 12(a0),a1
    9b60:	|  |      movea.l 152(sp),a0
    9b64:	|  |      move.l 56(a0),d0
    9b68:	|  |      lsl.l #3,d0
    9b6a:	|  |      add.l a1,d0
    9b6c:	|  |      lea 40(sp),a0
    9b70:	|  |      move.l a0,-(sp)
    9b72:	|  |      lea 48(sp),a0
    9b76:	|  |      move.l a0,-(sp)
    9b78:	|  |      move.l d1,-(sp)
    9b7a:	|  |      move.l d0,-(sp)
    9b7c:	|  |      jsr 165e8 <getMatchingCorners>
    9b82:	|  |      lea 16(sp),sp
    9b86:	|  |      tst.w d0
    9b88:	|  |  /-- bne.s 9b9e <doBorderStuff+0xe2>
		{
			KPrintF ("Not a valid floor plan!");
    9b8a:	|  |  |   pea 19245 <PutChar+0x1415>
    9b90:	|  |  |   jsr 17366 <KPrintF>
    9b96:	|  |  |   addq.l #4,sp
            return FALSE;
    9b98:	|  |  |   clr.w d0
    9b9a:	+--|--|-- bra.w a16c <doBorderStuff+0x6b0>
		}

        // Remember that we're walking to the new polygon...
        moveMe -> inPoly = newPoly;
    9b9e:	|  |  \-> movea.l 152(sp),a0
    9ba2:	|  |      move.l 144(sp),56(a0)

        // Calculate the destination position on the coincidental line...
        int x1 = moveMe -> x, y1 = moveMe -> y;
    9ba8:	|  |      movea.l 152(sp),a0
    9bac:	|  |      move.l (a0),d0
    9bae:	|  |      move.l d0,-(sp)
    9bb0:	|  |      jsr 17730 <__fixsfsi>
    9bb6:	|  |      addq.l #4,sp
    9bb8:	|  |      move.l d0,140(sp)
    9bbc:	|  |      movea.l 152(sp),a0
    9bc0:	|  |      move.l 4(a0),d0
    9bc4:	|  |      move.l d0,-(sp)
    9bc6:	|  |      jsr 17730 <__fixsfsi>
    9bcc:	|  |      addq.l #4,sp
    9bce:	|  |      move.l d0,136(sp)
        int x2 = moveMe -> walkToX, y2 = moveMe -> walkToY;
    9bd2:	|  |      movea.l 152(sp),a0
    9bd6:	|  |      move.l 40(a0),132(sp)
    9bdc:	|  |      movea.l 152(sp),a0
    9be0:	|  |      move.l 44(a0),128(sp)
        int x3 = currentFloor -> vertex[ID].x, y3 = currentFloor -> vertex[ID].y;
    9be6:	|  |      movea.l 1cb9e <currentFloor>,a0
    9bec:	|  |      move.l 4(a0),d1
    9bf0:	|  |      move.l 44(sp),d0
    9bf4:	|  |      lsl.l #3,d0
    9bf6:	|  |      movea.l d1,a0
    9bf8:	|  |      adda.l d0,a0
    9bfa:	|  |      move.l (a0),124(sp)
    9bfe:	|  |      movea.l 1cb9e <currentFloor>,a0
    9c04:	|  |      move.l 4(a0),d1
    9c08:	|  |      move.l 44(sp),d0
    9c0c:	|  |      lsl.l #3,d0
    9c0e:	|  |      movea.l d1,a0
    9c10:	|  |      adda.l d0,a0
    9c12:	|  |      move.l 4(a0),120(sp)
        int x4 = currentFloor -> vertex[ID2].x, y4 = currentFloor -> vertex[ID2].y;
    9c18:	|  |      movea.l 1cb9e <currentFloor>,a0
    9c1e:	|  |      move.l 4(a0),d1
    9c22:	|  |      move.l 40(sp),d0
    9c26:	|  |      lsl.l #3,d0
    9c28:	|  |      movea.l d1,a0
    9c2a:	|  |      adda.l d0,a0
    9c2c:	|  |      move.l (a0),116(sp)
    9c30:	|  |      movea.l 1cb9e <currentFloor>,a0
    9c36:	|  |      move.l 4(a0),d1
    9c3a:	|  |      move.l 40(sp),d0
    9c3e:	|  |      lsl.l #3,d0
    9c40:	|  |      movea.l d1,a0
    9c42:	|  |      adda.l d0,a0
    9c44:	|  |      move.l 4(a0),112(sp)

        int xAB = x1 - x2;
    9c4a:	|  |      move.l 140(sp),d0
    9c4e:	|  |      sub.l 132(sp),d0
    9c52:	|  |      move.l d0,108(sp)
        int yAB = y1 - y2;
    9c56:	|  |      move.l 136(sp),d0
    9c5a:	|  |      sub.l 128(sp),d0
    9c5e:	|  |      move.l d0,104(sp)
        int xCD = x4 - x3;
    9c62:	|  |      move.l 116(sp),d0
    9c66:	|  |      sub.l 124(sp),d0
    9c6a:	|  |      move.l d0,100(sp)
        int yCD = y4 - y3;
    9c6e:	|  |      move.l 112(sp),d0
    9c72:	|  |      sub.l 120(sp),d0
    9c76:	|  |      move.l d0,96(sp)

        double m = (yAB * (x3 - x1) - xAB * (y3 - y1));
    9c7a:	|  |      move.l 124(sp),d0
    9c7e:	|  |      sub.l 140(sp),d0
    9c82:	|  |      move.l 104(sp),-(sp)
    9c86:	|  |      move.l d0,-(sp)
    9c88:	|  |      jsr 17d1a <__mulsi3>
    9c8e:	|  |      addq.l #8,sp
    9c90:	|  |      move.l d0,d2
    9c92:	|  |      move.l 120(sp),d0
    9c96:	|  |      sub.l 136(sp),d0
    9c9a:	|  |      move.l 108(sp),-(sp)
    9c9e:	|  |      move.l d0,-(sp)
    9ca0:	|  |      jsr 17d1a <__mulsi3>
    9ca6:	|  |      addq.l #8,sp
    9ca8:	|  |      move.l d2,d1
    9caa:	|  |      sub.l d0,d1
    9cac:	|  |      move.l d1,-(sp)
    9cae:	|  |      jsr 17758 <__floatsidf>
    9cb4:	|  |      addq.l #4,sp
    9cb6:	|  |      move.l d0,32(sp)
    9cba:	|  |      move.l d1,36(sp)
    9cbe:	|  |      move.l 32(sp),88(sp)
    9cc4:	|  |      move.l 36(sp),92(sp)
        m /= ((xAB * yCD) - (yAB * xCD));
    9cca:	|  |      move.l 96(sp),-(sp)
    9cce:	|  |      move.l 112(sp),-(sp)
    9cd2:	|  |      jsr 17d1a <__mulsi3>
    9cd8:	|  |      addq.l #8,sp
    9cda:	|  |      move.l d0,d2
    9cdc:	|  |      move.l 100(sp),-(sp)
    9ce0:	|  |      move.l 108(sp),-(sp)
    9ce4:	|  |      jsr 17d1a <__mulsi3>
    9cea:	|  |      addq.l #8,sp
    9cec:	|  |      move.l d2,d1
    9cee:	|  |      sub.l d0,d1
    9cf0:	|  |      move.l d1,-(sp)
    9cf2:	|  |      jsr 17758 <__floatsidf>
    9cf8:	|  |      addq.l #4,sp
    9cfa:	|  |      move.l d1,-(sp)
    9cfc:	|  |      move.l d0,-(sp)
    9cfe:	|  |      move.l 100(sp),-(sp)
    9d02:	|  |      move.l 100(sp),-(sp)
    9d06:	|  |      jsr 175ec <__divdf3>
    9d0c:	|  |      lea 16(sp),sp
    9d10:	|  |      move.l d0,24(sp)
    9d14:	|  |      move.l d1,28(sp)
    9d18:	|  |      move.l 24(sp),88(sp)
    9d1e:	|  |      move.l 28(sp),92(sp)

        if (m > 0 && m < 1) {
    9d24:	|  |      clr.l -(sp)
    9d26:	|  |      clr.l -(sp)
    9d28:	|  |      move.l 100(sp),-(sp)
    9d2c:	|  |      move.l 100(sp),-(sp)
    9d30:	|  |      jsr 178b6 <__gtdf2>
    9d36:	|  |      lea 16(sp),sp
    9d3a:	|  |      tst.l d0
    9d3c:	|  |  /-- ble.w 9e14 <doBorderStuff+0x358>
    9d40:	|  |  |   clr.l -(sp)
    9d42:	|  |  |   move.l #1072693248,-(sp)
    9d48:	|  |  |   move.l 100(sp),-(sp)
    9d4c:	|  |  |   move.l 100(sp),-(sp)
    9d50:	|  |  |   jsr 17970 <__ltdf2>
    9d56:	|  |  |   lea 16(sp),sp
    9d5a:	|  |  |   tst.l d0
    9d5c:	|  |  +-- bge.w 9e14 <doBorderStuff+0x358>
            moveMe -> thisStepX = x3 + m * xCD;
    9d60:	|  |  |   move.l 124(sp),-(sp)
    9d64:	|  |  |   jsr 17758 <__floatsidf>
    9d6a:	|  |  |   addq.l #4,sp
    9d6c:	|  |  |   move.l d0,d2
    9d6e:	|  |  |   move.l d1,d3
    9d70:	|  |  |   move.l 100(sp),-(sp)
    9d74:	|  |  |   jsr 17758 <__floatsidf>
    9d7a:	|  |  |   addq.l #4,sp
    9d7c:	|  |  |   move.l 92(sp),-(sp)
    9d80:	|  |  |   move.l 92(sp),-(sp)
    9d84:	|  |  |   move.l d1,-(sp)
    9d86:	|  |  |   move.l d0,-(sp)
    9d88:	|  |  |   jsr 177e8 <__muldf3>
    9d8e:	|  |  |   lea 16(sp),sp
    9d92:	|  |  |   move.l d1,-(sp)
    9d94:	|  |  |   move.l d0,-(sp)
    9d96:	|  |  |   move.l d3,-(sp)
    9d98:	|  |  |   move.l d2,-(sp)
    9d9a:	|  |  |   jsr 1758a <__adddf3>
    9da0:	|  |  |   lea 16(sp),sp
    9da4:	|  |  |   move.l d1,-(sp)
    9da6:	|  |  |   move.l d0,-(sp)
    9da8:	|  |  |   jsr 176fa <__fixdfsi>
    9dae:	|  |  |   addq.l #8,sp
    9db0:	|  |  |   movea.l 152(sp),a0
    9db4:	|  |  |   move.l d0,48(a0)
            moveMe -> thisStepY = y3 + m * yCD;
    9db8:	|  |  |   move.l 120(sp),-(sp)
    9dbc:	|  |  |   jsr 17758 <__floatsidf>
    9dc2:	|  |  |   addq.l #4,sp
    9dc4:	|  |  |   move.l d0,d2
    9dc6:	|  |  |   move.l d1,d3
    9dc8:	|  |  |   move.l 96(sp),-(sp)
    9dcc:	|  |  |   jsr 17758 <__floatsidf>
    9dd2:	|  |  |   addq.l #4,sp
    9dd4:	|  |  |   move.l 92(sp),-(sp)
    9dd8:	|  |  |   move.l 92(sp),-(sp)
    9ddc:	|  |  |   move.l d1,-(sp)
    9dde:	|  |  |   move.l d0,-(sp)
    9de0:	|  |  |   jsr 177e8 <__muldf3>
    9de6:	|  |  |   lea 16(sp),sp
    9dea:	|  |  |   move.l d1,-(sp)
    9dec:	|  |  |   move.l d0,-(sp)
    9dee:	|  |  |   move.l d3,-(sp)
    9df0:	|  |  |   move.l d2,-(sp)
    9df2:	|  |  |   jsr 1758a <__adddf3>
    9df8:	|  |  |   lea 16(sp),sp
    9dfc:	|  |  |   move.l d1,-(sp)
    9dfe:	|  |  |   move.l d0,-(sp)
    9e00:	|  |  |   jsr 176fa <__fixdfsi>
    9e06:	|  |  |   addq.l #8,sp
    9e08:	|  |  |   movea.l 152(sp),a0
    9e0c:	|  |  |   move.l d0,52(a0)
    9e10:	|  +--|-- bra.w a06c <doBorderStuff+0x5b0>
        } else {
            int dx13 = x1 - x3, dx14 = x1 - x4, dx23 = x2 - x3, dx24 = x2 - x4;
    9e14:	|  |  \-> move.l 140(sp),d0
    9e18:	|  |      sub.l 124(sp),d0
    9e1c:	|  |      move.l d0,84(sp)
    9e20:	|  |      move.l 140(sp),d0
    9e24:	|  |      sub.l 116(sp),d0
    9e28:	|  |      move.l d0,80(sp)
    9e2c:	|  |      move.l 132(sp),d0
    9e30:	|  |      sub.l 124(sp),d0
    9e34:	|  |      move.l d0,76(sp)
    9e38:	|  |      move.l 132(sp),d0
    9e3c:	|  |      sub.l 116(sp),d0
    9e40:	|  |      move.l d0,72(sp)
            int dy13 = y1 - y3, dy14 = y1 - y4, dy23 = y2 - y3, dy24 = y2 - y4;
    9e44:	|  |      move.l 136(sp),d0
    9e48:	|  |      sub.l 120(sp),d0
    9e4c:	|  |      move.l d0,68(sp)
    9e50:	|  |      move.l 136(sp),d0
    9e54:	|  |      sub.l 112(sp),d0
    9e58:	|  |      move.l d0,64(sp)
    9e5c:	|  |      move.l 128(sp),d0
    9e60:	|  |      sub.l 120(sp),d0
    9e64:	|  |      move.l d0,60(sp)
    9e68:	|  |      move.l 128(sp),d0
    9e6c:	|  |      sub.l 112(sp),d0
    9e70:	|  |      move.l d0,56(sp)

            dx13 *= dx13; dx14 *= dx14; dx23 *= dx23; dx24 *= dx24;
    9e74:	|  |      move.l 84(sp),-(sp)
    9e78:	|  |      move.l 88(sp),-(sp)
    9e7c:	|  |      jsr 17d1a <__mulsi3>
    9e82:	|  |      addq.l #8,sp
    9e84:	|  |      move.l d0,84(sp)
    9e88:	|  |      move.l 80(sp),-(sp)
    9e8c:	|  |      move.l 84(sp),-(sp)
    9e90:	|  |      jsr 17d1a <__mulsi3>
    9e96:	|  |      addq.l #8,sp
    9e98:	|  |      move.l d0,80(sp)
    9e9c:	|  |      move.l 76(sp),-(sp)
    9ea0:	|  |      move.l 80(sp),-(sp)
    9ea4:	|  |      jsr 17d1a <__mulsi3>
    9eaa:	|  |      addq.l #8,sp
    9eac:	|  |      move.l d0,76(sp)
    9eb0:	|  |      move.l 72(sp),-(sp)
    9eb4:	|  |      move.l 76(sp),-(sp)
    9eb8:	|  |      jsr 17d1a <__mulsi3>
    9ebe:	|  |      addq.l #8,sp
    9ec0:	|  |      move.l d0,72(sp)
            dy13 *= dy13; dy14 *= dy14; dy23 *= dy23; dy24 *= dy24;
    9ec4:	|  |      move.l 68(sp),-(sp)
    9ec8:	|  |      move.l 72(sp),-(sp)
    9ecc:	|  |      jsr 17d1a <__mulsi3>
    9ed2:	|  |      addq.l #8,sp
    9ed4:	|  |      move.l d0,68(sp)
    9ed8:	|  |      move.l 64(sp),-(sp)
    9edc:	|  |      move.l 68(sp),-(sp)
    9ee0:	|  |      jsr 17d1a <__mulsi3>
    9ee6:	|  |      addq.l #8,sp
    9ee8:	|  |      move.l d0,64(sp)
    9eec:	|  |      move.l 60(sp),-(sp)
    9ef0:	|  |      move.l 64(sp),-(sp)
    9ef4:	|  |      jsr 17d1a <__mulsi3>
    9efa:	|  |      addq.l #8,sp
    9efc:	|  |      move.l d0,60(sp)
    9f00:	|  |      move.l 56(sp),-(sp)
    9f04:	|  |      move.l 60(sp),-(sp)
    9f08:	|  |      jsr 17d1a <__mulsi3>
    9f0e:	|  |      addq.l #8,sp
    9f10:	|  |      move.l d0,56(sp)

            if (sqrt((double) dx13 + dy13) + sqrt((double) dx23 + dy23) <
    9f14:	|  |      move.l 84(sp),-(sp)
    9f18:	|  |      jsr 17758 <__floatsidf>
    9f1e:	|  |      addq.l #4,sp
    9f20:	|  |      move.l d0,d2
    9f22:	|  |      move.l d1,d3
    9f24:	|  |      move.l 68(sp),-(sp)
    9f28:	|  |      jsr 17758 <__floatsidf>
    9f2e:	|  |      addq.l #4,sp
    9f30:	|  |      move.l d1,-(sp)
    9f32:	|  |      move.l d0,-(sp)
    9f34:	|  |      move.l d3,-(sp)
    9f36:	|  |      move.l d2,-(sp)
    9f38:	|  |      jsr 1758a <__adddf3>
    9f3e:	|  |      lea 16(sp),sp
    9f42:	|  |      move.l d1,-(sp)
    9f44:	|  |      move.l d0,-(sp)
    9f46:	|  |      jsr 17cd0 <sqrt>
    9f4c:	|  |      addq.l #8,sp
    9f4e:	|  |      move.l d0,d2
    9f50:	|  |      move.l d1,d3
    9f52:	|  |      move.l 76(sp),-(sp)
    9f56:	|  |      jsr 17758 <__floatsidf>
    9f5c:	|  |      addq.l #4,sp
    9f5e:	|  |      move.l d0,d4
    9f60:	|  |      move.l d1,d5
    9f62:	|  |      move.l 60(sp),-(sp)
    9f66:	|  |      jsr 17758 <__floatsidf>
    9f6c:	|  |      addq.l #4,sp
    9f6e:	|  |      move.l d1,-(sp)
    9f70:	|  |      move.l d0,-(sp)
    9f72:	|  |      move.l d5,-(sp)
    9f74:	|  |      move.l d4,-(sp)
    9f76:	|  |      jsr 1758a <__adddf3>
    9f7c:	|  |      lea 16(sp),sp
    9f80:	|  |      move.l d1,-(sp)
    9f82:	|  |      move.l d0,-(sp)
    9f84:	|  |      jsr 17cd0 <sqrt>
    9f8a:	|  |      addq.l #8,sp
    9f8c:	|  |      move.l d1,-(sp)
    9f8e:	|  |      move.l d0,-(sp)
    9f90:	|  |      move.l d3,-(sp)
    9f92:	|  |      move.l d2,-(sp)
    9f94:	|  |      jsr 1758a <__adddf3>
    9f9a:	|  |      lea 16(sp),sp
    9f9e:	|  |      move.l d0,d2
    9fa0:	|  |      move.l d1,d3
                sqrt((double) dx14 + dy14) + sqrt((double) dx24 + dy24)) {
    9fa2:	|  |      move.l 80(sp),-(sp)
    9fa6:	|  |      jsr 17758 <__floatsidf>
    9fac:	|  |      addq.l #4,sp
    9fae:	|  |      move.l d0,d4
    9fb0:	|  |      move.l d1,d5
    9fb2:	|  |      move.l 64(sp),-(sp)
    9fb6:	|  |      jsr 17758 <__floatsidf>
    9fbc:	|  |      addq.l #4,sp
    9fbe:	|  |      move.l d1,-(sp)
    9fc0:	|  |      move.l d0,-(sp)
    9fc2:	|  |      move.l d5,-(sp)
    9fc4:	|  |      move.l d4,-(sp)
    9fc6:	|  |      jsr 1758a <__adddf3>
    9fcc:	|  |      lea 16(sp),sp
    9fd0:	|  |      move.l d1,-(sp)
    9fd2:	|  |      move.l d0,-(sp)
    9fd4:	|  |      jsr 17cd0 <sqrt>
    9fda:	|  |      addq.l #8,sp
    9fdc:	|  |      move.l d0,d4
    9fde:	|  |      move.l d1,d5
    9fe0:	|  |      move.l 72(sp),-(sp)
    9fe4:	|  |      jsr 17758 <__floatsidf>
    9fea:	|  |      addq.l #4,sp
    9fec:	|  |      move.l d0,d6
    9fee:	|  |      move.l d1,d7
    9ff0:	|  |      move.l 56(sp),-(sp)
    9ff4:	|  |      jsr 17758 <__floatsidf>
    9ffa:	|  |      addq.l #4,sp
    9ffc:	|  |      move.l d1,-(sp)
    9ffe:	|  |      move.l d0,-(sp)
    a000:	|  |      move.l d7,-(sp)
    a002:	|  |      move.l d6,-(sp)
    a004:	|  |      jsr 1758a <__adddf3>
    a00a:	|  |      lea 16(sp),sp
    a00e:	|  |      move.l d1,-(sp)
    a010:	|  |      move.l d0,-(sp)
    a012:	|  |      jsr 17cd0 <sqrt>
    a018:	|  |      addq.l #8,sp
    a01a:	|  |      move.l d1,-(sp)
    a01c:	|  |      move.l d0,-(sp)
    a01e:	|  |      move.l d5,-(sp)
    a020:	|  |      move.l d4,-(sp)
    a022:	|  |      jsr 1758a <__adddf3>
    a028:	|  |      lea 16(sp),sp
            if (sqrt((double) dx13 + dy13) + sqrt((double) dx23 + dy23) <
    a02c:	|  |      move.l d1,-(sp)
    a02e:	|  |      move.l d0,-(sp)
    a030:	|  |      move.l d3,-(sp)
    a032:	|  |      move.l d2,-(sp)
    a034:	|  |      jsr 17970 <__ltdf2>
    a03a:	|  |      lea 16(sp),sp
    a03e:	|  |      tst.l d0
    a040:	|  |  /-- bge.s a058 <doBorderStuff+0x59c>
                moveMe -> thisStepX = x3;
    a042:	|  |  |   movea.l 152(sp),a0
    a046:	|  |  |   move.l 124(sp),48(a0)
                moveMe -> thisStepY = y3;
    a04c:	|  |  |   movea.l 152(sp),a0
    a050:	|  |  |   move.l 120(sp),52(a0)
    a056:	|  +--|-- bra.s a06c <doBorderStuff+0x5b0>
            } else {
                moveMe -> thisStepX = x4;
    a058:	|  |  \-> movea.l 152(sp),a0
    a05c:	|  |      move.l 116(sp),48(a0)
                moveMe -> thisStepY = y4;
    a062:	|  |      movea.l 152(sp),a0
    a066:	|  |      move.l 112(sp),52(a0)
            }
        }
    }

    float yDiff = moveMe -> thisStepY - moveMe -> y;
    a06c:	|  \----> movea.l 152(sp),a0
    a070:	|         move.l 52(a0),d0
    a074:	|         move.l d0,-(sp)
    a076:	|         jsr 17798 <__floatsisf>
    a07c:	|         addq.l #4,sp
    a07e:	|         move.l d0,d1
    a080:	|         movea.l 152(sp),a0
    a084:	|         move.l 4(a0),d0
    a088:	|         move.l d0,-(sp)
    a08a:	|         move.l d1,-(sp)
    a08c:	|         jsr 17a8c <__subsf3>
    a092:	|         addq.l #8,sp
    a094:	|         move.l d0,52(sp)
    float xDiff = moveMe -> x - moveMe -> thisStepX;
    a098:	|         movea.l 152(sp),a0
    a09c:	|         move.l (a0),d2
    a09e:	|         movea.l 152(sp),a0
    a0a2:	|         move.l 48(a0),d0
    a0a6:	|         move.l d0,-(sp)
    a0a8:	|         jsr 17798 <__floatsisf>
    a0ae:	|         addq.l #4,sp
    a0b0:	|         move.l d0,-(sp)
    a0b2:	|         move.l d2,-(sp)
    a0b4:	|         jsr 17a8c <__subsf3>
    a0ba:	|         addq.l #8,sp
    a0bc:	|         move.l d0,48(sp)
    if (xDiff || yDiff) {
    a0c0:	|         clr.l -(sp)
    a0c2:	|         move.l 52(sp),-(sp)
    a0c6:	|         jsr 179f4 <__nesf2>
    a0cc:	|         addq.l #8,sp
    a0ce:	|         tst.l d0
    a0d0:	|     /-- bne.s a0e4 <doBorderStuff+0x628>
    a0d2:	|     |   clr.l -(sp)
    a0d4:	|     |   move.l 56(sp),-(sp)
    a0d8:	|     |   jsr 179f4 <__nesf2>
    a0de:	|     |   addq.l #8,sp
    a0e0:	|     |   tst.l d0
    a0e2:	|  /--|-- beq.s a15a <doBorderStuff+0x69e>
        moveMe -> wantAngle = 180 + ANGLEFIX * atan2f(xDiff, yDiff * 2);
    a0e4:	|  |  \-> move.l 52(sp),d0
    a0e8:	|  |      move.l d0,-(sp)
    a0ea:	|  |      move.l d0,-(sp)
    a0ec:	|  |      jsr 17554 <__addsf3>
    a0f2:	|  |      addq.l #8,sp
    a0f4:	|  |      move.l d0,-(sp)
    a0f6:	|  |      move.l 52(sp),-(sp)
    a0fa:	|  |      jsr 17b20 <atan2f>
    a100:	|  |      addq.l #8,sp
    a102:	|  |      move.l d0,-(sp)
    a104:	|  |      jsr 176ba <__extendsfdf2>
    a10a:	|  |      addq.l #4,sp
    a10c:	|  |      move.l #-1540411785,-(sp)
    a112:	|  |      move.l #1078765033,-(sp)
    a118:	|  |      move.l d1,-(sp)
    a11a:	|  |      move.l d0,-(sp)
    a11c:	|  |      jsr 177e8 <__muldf3>
    a122:	|  |      lea 16(sp),sp
    a126:	|  |      clr.l -(sp)
    a128:	|  |      move.l #1080459264,-(sp)
    a12e:	|  |      move.l d1,-(sp)
    a130:	|  |      move.l d0,-(sp)
    a132:	|  |      jsr 1758a <__adddf3>
    a138:	|  |      lea 16(sp),sp
    a13c:	|  |      move.l d1,-(sp)
    a13e:	|  |      move.l d0,-(sp)
    a140:	|  |      jsr 176fa <__fixdfsi>
    a146:	|  |      addq.l #8,sp
    a148:	|  |      movea.l 152(sp),a0
    a14c:	|  |      move.l d0,96(a0)
        moveMe -> spinning = TRUE;
    a150:	|  |      movea.l 152(sp),a0
    a154:	|  |      move.w #1,66(a0)
    }

    setFrames (moveMe, ANI_WALK);
    a15a:	|  \----> pea 1 <_start+0x1>
    a15e:	|         move.l 156(sp),-(sp)
    a162:	|         jsr 82a4 <setFrames>
    a168:	|         addq.l #8,sp
    return TRUE;
    a16a:	|         moveq #1,d0
}
    a16c:	\-------> movem.l (sp)+,d2-d7
    a170:	          lea 124(sp),sp
    a174:	          rts

0000a176 <drawPeople>:

void drawPeople () {
    a176:	                   lea -24(sp),sp
    a17a:	                   move.l d2,-(sp)

	shufflePeople ();
    a17c:	                   jsr bc12 <shufflePeople>

	struct onScreenPerson * thisPerson = allPeople;
    a182:	                   move.l 1cae6 <allPeople>,24(sp)
	struct personaAnimation * myAnim = NULL;
    a18a:	                   clr.l 20(sp)
	overRegion = NULL;
    a18e:	                   clr.l 1cb96 <overRegion>

	while (thisPerson) {
    a194:	   /-------------- bra.w a746 <drawPeople+0x5d0>
		if (thisPerson -> show) {
    a198:	/--|-------------> movea.l 24(sp),a0
    a19c:	|  |               move.w 104(a0),d0
    a1a0:	|  |  /----------- beq.w a4fa <drawPeople+0x384>
			myAnim = thisPerson -> myAnim;
    a1a4:	|  |  |            movea.l 24(sp),a0
    a1a8:	|  |  |            move.l 72(a0),20(sp)
			if (myAnim != thisPerson -> lastUsedAnim) {
    a1ae:	|  |  |            movea.l 24(sp),a0
    a1b2:	|  |  |            move.l 76(a0),d0
    a1b6:	|  |  |            cmp.l 20(sp),d0
    a1ba:	|  |  |  /-------- beq.w a388 <drawPeople+0x212>
				thisPerson -> samePosCount = 0;
    a1be:	|  |  |  |         movea.l 24(sp),a0
    a1c2:	|  |  |  |         clr.l 16(a0)
				thisPerson -> lastUsedAnim = myAnim;
    a1c6:	|  |  |  |         movea.l 24(sp),a0
    a1ca:	|  |  |  |         move.l 20(sp),76(a0)
				thisPerson -> frameNum = 0;
    a1d0:	|  |  |  |         movea.l 24(sp),a0
    a1d4:	|  |  |  |         clr.l 84(a0)
				thisPerson -> frameTick = myAnim -> frames[0].howMany;
    a1d8:	|  |  |  |         movea.l 20(sp),a0
    a1dc:	|  |  |  |         movea.l 4(a0),a0
    a1e0:	|  |  |  |         move.l 4(a0),d0
    a1e4:	|  |  |  |         movea.l 24(sp),a0
    a1e8:	|  |  |  |         move.l d0,88(a0)
				if (myAnim -> frames[thisPerson -> frameNum].noise > 0) {
    a1ec:	|  |  |  |         movea.l 20(sp),a0
    a1f0:	|  |  |  |         movea.l 4(a0),a1
    a1f4:	|  |  |  |         movea.l 24(sp),a0
    a1f8:	|  |  |  |         move.l 84(a0),d0
    a1fc:	|  |  |  |         move.l d0,d1
    a1fe:	|  |  |  |         move.l d1,d0
    a200:	|  |  |  |         add.l d0,d0
    a202:	|  |  |  |         add.l d1,d0
    a204:	|  |  |  |         add.l d0,d0
    a206:	|  |  |  |         add.l d0,d0
    a208:	|  |  |  |         lea (0,a1,d0.l),a0
    a20c:	|  |  |  |         move.l 8(a0),d0
    a210:	|  |  |  |     /-- ble.w a2b2 <drawPeople+0x13c>
					startSound(myAnim -> frames[thisPerson -> frameNum].noise, FALSE);
    a214:	|  |  |  |     |   movea.l 20(sp),a0
    a218:	|  |  |  |     |   movea.l 4(a0),a1
    a21c:	|  |  |  |     |   movea.l 24(sp),a0
    a220:	|  |  |  |     |   move.l 84(a0),d0
    a224:	|  |  |  |     |   move.l d0,d1
    a226:	|  |  |  |     |   move.l d1,d0
    a228:	|  |  |  |     |   add.l d0,d0
    a22a:	|  |  |  |     |   add.l d1,d0
    a22c:	|  |  |  |     |   add.l d0,d0
    a22e:	|  |  |  |     |   add.l d0,d0
    a230:	|  |  |  |     |   lea (0,a1,d0.l),a0
    a234:	|  |  |  |     |   move.l 8(a0),d0
    a238:	|  |  |  |     |   clr.l -(sp)
    a23a:	|  |  |  |     |   move.l d0,-(sp)
    a23c:	|  |  |  |     |   jsr d31a <startSound>
    a242:	|  |  |  |     |   addq.l #8,sp
					thisPerson -> frameNum ++;
    a244:	|  |  |  |     |   movea.l 24(sp),a0
    a248:	|  |  |  |     |   move.l 84(a0),d0
    a24c:	|  |  |  |     |   addq.l #1,d0
    a24e:	|  |  |  |     |   movea.l 24(sp),a0
    a252:	|  |  |  |     |   move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a256:	|  |  |  |     |   movea.l 24(sp),a0
    a25a:	|  |  |  |     |   move.l 84(a0),d0
    a25e:	|  |  |  |     |   movea.l 24(sp),a0
    a262:	|  |  |  |     |   movea.l 72(a0),a0
    a266:	|  |  |  |     |   move.l 8(a0),d1
    a26a:	|  |  |  |     |   move.l d1,-(sp)
    a26c:	|  |  |  |     |   move.l d0,-(sp)
    a26e:	|  |  |  |     |   jsr 17dc6 <__modsi3>
    a274:	|  |  |  |     |   addq.l #8,sp
    a276:	|  |  |  |     |   movea.l 24(sp),a0
    a27a:	|  |  |  |     |   move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a27e:	|  |  |  |     |   movea.l 24(sp),a0
    a282:	|  |  |  |     |   movea.l 72(a0),a0
    a286:	|  |  |  |     |   movea.l 4(a0),a1
    a28a:	|  |  |  |     |   movea.l 24(sp),a0
    a28e:	|  |  |  |     |   move.l 84(a0),d0
    a292:	|  |  |  |     |   move.l d0,d1
    a294:	|  |  |  |     |   move.l d1,d0
    a296:	|  |  |  |     |   add.l d0,d0
    a298:	|  |  |  |     |   add.l d1,d0
    a29a:	|  |  |  |     |   add.l d0,d0
    a29c:	|  |  |  |     |   add.l d0,d0
    a29e:	|  |  |  |     |   lea (0,a1,d0.l),a0
    a2a2:	|  |  |  |     |   move.l 4(a0),d0
    a2a6:	|  |  |  |     |   movea.l 24(sp),a0
    a2aa:	|  |  |  |     |   move.l d0,88(a0)
    a2ae:	|  |  |  |  /--|-- bra.w a3f0 <drawPeople+0x27a>
				} else if (myAnim -> frames[thisPerson -> frameNum].noise) {
    a2b2:	|  |  |  |  |  \-> movea.l 20(sp),a0
    a2b6:	|  |  |  |  |      movea.l 4(a0),a1
    a2ba:	|  |  |  |  |      movea.l 24(sp),a0
    a2be:	|  |  |  |  |      move.l 84(a0),d0
    a2c2:	|  |  |  |  |      move.l d0,d1
    a2c4:	|  |  |  |  |      move.l d1,d0
    a2c6:	|  |  |  |  |      add.l d0,d0
    a2c8:	|  |  |  |  |      add.l d1,d0
    a2ca:	|  |  |  |  |      add.l d0,d0
    a2cc:	|  |  |  |  |      add.l d0,d0
    a2ce:	|  |  |  |  |      lea (0,a1,d0.l),a0
    a2d2:	|  |  |  |  |      move.l 8(a0),d0
    a2d6:	|  |  |  |  +----- beq.w a3f0 <drawPeople+0x27a>
					startNewFunctionNum (- myAnim -> frames[thisPerson -> frameNum].noise, 0, NULL, noStack, TRUE);
    a2da:	|  |  |  |  |      movea.l 1ca52 <noStack>,a1
    a2e0:	|  |  |  |  |      movea.l 20(sp),a0
    a2e4:	|  |  |  |  |      move.l 4(a0),d2
    a2e8:	|  |  |  |  |      movea.l 24(sp),a0
    a2ec:	|  |  |  |  |      move.l 84(a0),d0
    a2f0:	|  |  |  |  |      move.l d0,d1
    a2f2:	|  |  |  |  |      move.l d1,d0
    a2f4:	|  |  |  |  |      add.l d0,d0
    a2f6:	|  |  |  |  |      add.l d1,d0
    a2f8:	|  |  |  |  |      add.l d0,d0
    a2fa:	|  |  |  |  |      add.l d0,d0
    a2fc:	|  |  |  |  |      movea.l d2,a0
    a2fe:	|  |  |  |  |      adda.l d0,a0
    a300:	|  |  |  |  |      move.l 8(a0),d0
    a304:	|  |  |  |  |      neg.l d0
    a306:	|  |  |  |  |      pea 1 <_start+0x1>
    a30a:	|  |  |  |  |      move.l a1,-(sp)
    a30c:	|  |  |  |  |      clr.l -(sp)
    a30e:	|  |  |  |  |      clr.l -(sp)
    a310:	|  |  |  |  |      move.l d0,-(sp)
    a312:	|  |  |  |  |      jsr 6c08 <startNewFunctionNum>
    a318:	|  |  |  |  |      lea 20(sp),sp
					thisPerson -> frameNum ++;
    a31c:	|  |  |  |  |      movea.l 24(sp),a0
    a320:	|  |  |  |  |      move.l 84(a0),d0
    a324:	|  |  |  |  |      addq.l #1,d0
    a326:	|  |  |  |  |      movea.l 24(sp),a0
    a32a:	|  |  |  |  |      move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a32e:	|  |  |  |  |      movea.l 24(sp),a0
    a332:	|  |  |  |  |      move.l 84(a0),d0
    a336:	|  |  |  |  |      movea.l 24(sp),a0
    a33a:	|  |  |  |  |      movea.l 72(a0),a0
    a33e:	|  |  |  |  |      move.l 8(a0),d1
    a342:	|  |  |  |  |      move.l d1,-(sp)
    a344:	|  |  |  |  |      move.l d0,-(sp)
    a346:	|  |  |  |  |      jsr 17dc6 <__modsi3>
    a34c:	|  |  |  |  |      addq.l #8,sp
    a34e:	|  |  |  |  |      movea.l 24(sp),a0
    a352:	|  |  |  |  |      move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a356:	|  |  |  |  |      movea.l 24(sp),a0
    a35a:	|  |  |  |  |      movea.l 72(a0),a0
    a35e:	|  |  |  |  |      movea.l 4(a0),a1
    a362:	|  |  |  |  |      movea.l 24(sp),a0
    a366:	|  |  |  |  |      move.l 84(a0),d0
    a36a:	|  |  |  |  |      move.l d0,d1
    a36c:	|  |  |  |  |      move.l d1,d0
    a36e:	|  |  |  |  |      add.l d0,d0
    a370:	|  |  |  |  |      add.l d1,d0
    a372:	|  |  |  |  |      add.l d0,d0
    a374:	|  |  |  |  |      add.l d0,d0
    a376:	|  |  |  |  |      lea (0,a1,d0.l),a0
    a37a:	|  |  |  |  |      move.l 4(a0),d0
    a37e:	|  |  |  |  |      movea.l 24(sp),a0
    a382:	|  |  |  |  |      move.l d0,88(a0)
    a386:	|  |  |  |  +----- bra.s a3f0 <drawPeople+0x27a>
				}
			} else {
				if(thisPerson->x == thisPerson->oldx && thisPerson->y == thisPerson->oldy && myAnim->numFrames == 1)
    a388:	|  |  |  \--|----> movea.l 24(sp),a0
    a38c:	|  |  |     |      move.l (a0),d0
    a38e:	|  |  |     |      movea.l 24(sp),a0
    a392:	|  |  |     |      move.l 8(a0),d1
    a396:	|  |  |     |      move.l d1,-(sp)
    a398:	|  |  |     |      move.l d0,-(sp)
    a39a:	|  |  |     |      jsr 17684 <__eqsf2>
    a3a0:	|  |  |     |      addq.l #8,sp
    a3a2:	|  |  |     |      tst.l d0
    a3a4:	|  |  |     |  /-- bne.s a3e8 <drawPeople+0x272>
    a3a6:	|  |  |     |  |   movea.l 24(sp),a0
    a3aa:	|  |  |     |  |   move.l 4(a0),d0
    a3ae:	|  |  |     |  |   movea.l 24(sp),a0
    a3b2:	|  |  |     |  |   move.l 12(a0),d1
    a3b6:	|  |  |     |  |   move.l d1,-(sp)
    a3b8:	|  |  |     |  |   move.l d0,-(sp)
    a3ba:	|  |  |     |  |   jsr 17684 <__eqsf2>
    a3c0:	|  |  |     |  |   addq.l #8,sp
    a3c2:	|  |  |     |  |   tst.l d0
    a3c4:	|  |  |     |  +-- bne.s a3e8 <drawPeople+0x272>
    a3c6:	|  |  |     |  |   movea.l 20(sp),a0
    a3ca:	|  |  |     |  |   move.l 8(a0),d0
    a3ce:	|  |  |     |  |   moveq #1,d1
    a3d0:	|  |  |     |  |   cmp.l d0,d1
    a3d2:	|  |  |     |  +-- bne.s a3e8 <drawPeople+0x272>
				{
					thisPerson->samePosCount++;
    a3d4:	|  |  |     |  |   movea.l 24(sp),a0
    a3d8:	|  |  |     |  |   move.l 16(a0),d0
    a3dc:	|  |  |     |  |   addq.l #1,d0
    a3de:	|  |  |     |  |   movea.l 24(sp),a0
    a3e2:	|  |  |     |  |   move.l d0,16(a0)
    a3e6:	|  |  |     +--|-- bra.s a3f0 <drawPeople+0x27a>
				} else
				{
					thisPerson->samePosCount = 0;
    a3e8:	|  |  |     |  \-> movea.l 24(sp),a0
    a3ec:	|  |  |     |      clr.l 16(a0)
				}
			}

			thisPerson->oldx = thisPerson->x;
    a3f0:	|  |  |     \----> movea.l 24(sp),a0
    a3f4:	|  |  |            move.l (a0),d0
    a3f6:	|  |  |            movea.l 24(sp),a0
    a3fa:	|  |  |            move.l d0,8(a0)
			thisPerson->oldy = thisPerson->y;
    a3fe:	|  |  |            movea.l 24(sp),a0
    a402:	|  |  |            move.l 4(a0),d0
    a406:	|  |  |            movea.l 24(sp),a0
    a40a:	|  |  |            move.l d0,12(a0)
			int fNumSign = myAnim -> frames[thisPerson -> frameNum].frameNum;
    a40e:	|  |  |            movea.l 20(sp),a0
    a412:	|  |  |            movea.l 4(a0),a1
    a416:	|  |  |            movea.l 24(sp),a0
    a41a:	|  |  |            move.l 84(a0),d0
    a41e:	|  |  |            move.l d0,d1
    a420:	|  |  |            move.l d1,d0
    a422:	|  |  |            add.l d0,d0
    a424:	|  |  |            add.l d1,d0
    a426:	|  |  |            add.l d0,d0
    a428:	|  |  |            add.l d0,d0
    a42a:	|  |  |            lea (0,a1,d0.l),a0
    a42e:	|  |  |            move.l (a0),8(sp)
			int m = fNumSign < 0;
    a432:	|  |  |            move.l 8(sp),d0
    a436:	|  |  |            add.l d0,d0
    a438:	|  |  |            subx.l d0,d0
    a43a:	|  |  |            neg.l d0
    a43c:	|  |  |            move.b d0,d0
    a43e:	|  |  |            move.b d0,d0
    a440:	|  |  |            andi.l #255,d0
    a446:	|  |  |            move.l d0,16(sp)
			int fNum = TF_abs(fNumSign);
    a44a:	|  |  |            move.l 8(sp),-(sp)
    a44e:	|  |  |            jsr 934a <TF_abs>
    a454:	|  |  |            addq.l #4,sp
    a456:	|  |  |            move.l d0,12(sp)
			if (fNum >= myAnim -> theSprites -> bank.total) {
    a45a:	|  |  |            movea.l 20(sp),a0
    a45e:	|  |  |            movea.l (a0),a0
    a460:	|  |  |            move.l 8(a0),d0
    a464:	|  |  |            cmp.l 12(sp),d0
    a468:	|  |  |        /-- bgt.s a478 <drawPeople+0x302>
				fNum = 0;
    a46a:	|  |  |        |   clr.l 12(sp)
				m = 2 - m;
    a46e:	|  |  |        |   moveq #2,d0
    a470:	|  |  |        |   sub.l 16(sp),d0
    a474:	|  |  |        |   move.l d0,16(sp)
			}
			if (m != 2) {
    a478:	|  |  |        \-> moveq #2,d1
    a47a:	|  |  |            cmp.l 16(sp),d1
    a47e:	|  |  +----------- beq.s a4fa <drawPeople+0x384>
				BOOL r = FALSE;
    a480:	|  |  |            clr.w 6(sp)

				r = scaleSprite ( &myAnim->theSprites->bank.sprites[fNum], thisPerson, m);
    a484:	|  |  |            move.l 16(sp),d0
    a488:	|  |  |            movea.w d0,a0
    a48a:	|  |  |            movea.l 20(sp),a1
    a48e:	|  |  |            movea.l (a1),a1
    a490:	|  |  |            movea.l 16(a1),a1
    a494:	|  |  |            move.l 12(sp),d1
    a498:	|  |  |            move.l d1,d0
    a49a:	|  |  |            lsl.l #3,d0
    a49c:	|  |  |            sub.l d1,d0
    a49e:	|  |  |            add.l d0,d0
    a4a0:	|  |  |            add.l d0,d0
    a4a2:	|  |  |            add.l a1,d0
    a4a4:	|  |  |            move.l a0,-(sp)
    a4a6:	|  |  |            move.l 28(sp),-(sp)
    a4aa:	|  |  |            move.l d0,-(sp)
    a4ac:	|  |  |            jsr 90e0 <scaleSprite>
    a4b2:	|  |  |            lea 12(sp),sp
    a4b6:	|  |  |            move.w d0,6(sp)
				if (r) {
    a4ba:	|  |  +----------- beq.s a4fa <drawPeople+0x384>
					if (thisPerson -> thisType -> screenName[0]) {
    a4bc:	|  |  |            movea.l 24(sp),a0
    a4c0:	|  |  |            movea.l 114(a0),a0
    a4c4:	|  |  |            movea.l (a0),a0
    a4c6:	|  |  |            move.b (a0),d0
    a4c8:	|  |  +----------- beq.s a4fa <drawPeople+0x384>
						if (personRegion.thisType != thisPerson -> thisType) lastRegion = NULL;
    a4ca:	|  |  |            move.l 1cb06 <personRegion+0x1c>,d1
    a4d0:	|  |  |            movea.l 24(sp),a0
    a4d4:	|  |  |            move.l 114(a0),d0
    a4d8:	|  |  |            cmp.l d1,d0
    a4da:	|  |  |        /-- beq.s a4e2 <drawPeople+0x36c>
    a4dc:	|  |  |        |   clr.l 1ca4a <lastRegion>
						personRegion.thisType = thisPerson -> thisType;
    a4e2:	|  |  |        \-> movea.l 24(sp),a0
    a4e6:	|  |  |            move.l 114(a0),d0
    a4ea:	|  |  |            move.l d0,1cb06 <personRegion+0x1c>
						overRegion = & personRegion;
    a4f0:	|  |  |            move.l #117482,1cb96 <overRegion>
					}
				}
			}
		}
		if (! -- thisPerson -> frameTick) {
    a4fa:	|  |  \----------> movea.l 24(sp),a0
    a4fe:	|  |               move.l 88(a0),d0
    a502:	|  |               subq.l #1,d0
    a504:	|  |               movea.l 24(sp),a0
    a508:	|  |               move.l d0,88(a0)
    a50c:	|  |               movea.l 24(sp),a0
    a510:	|  |               move.l 88(a0),d0
    a514:	|  |        /----- bne.w a73c <drawPeople+0x5c6>
			thisPerson -> frameNum ++;
    a518:	|  |        |      movea.l 24(sp),a0
    a51c:	|  |        |      move.l 84(a0),d0
    a520:	|  |        |      addq.l #1,d0
    a522:	|  |        |      movea.l 24(sp),a0
    a526:	|  |        |      move.l d0,84(a0)
			thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a52a:	|  |        |      movea.l 24(sp),a0
    a52e:	|  |        |      move.l 84(a0),d0
    a532:	|  |        |      movea.l 24(sp),a0
    a536:	|  |        |      movea.l 72(a0),a0
    a53a:	|  |        |      move.l 8(a0),d1
    a53e:	|  |        |      move.l d1,-(sp)
    a540:	|  |        |      move.l d0,-(sp)
    a542:	|  |        |      jsr 17dc6 <__modsi3>
    a548:	|  |        |      addq.l #8,sp
    a54a:	|  |        |      movea.l 24(sp),a0
    a54e:	|  |        |      move.l d0,84(a0)
			thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a552:	|  |        |      movea.l 24(sp),a0
    a556:	|  |        |      movea.l 72(a0),a0
    a55a:	|  |        |      movea.l 4(a0),a1
    a55e:	|  |        |      movea.l 24(sp),a0
    a562:	|  |        |      move.l 84(a0),d0
    a566:	|  |        |      move.l d0,d1
    a568:	|  |        |      move.l d1,d0
    a56a:	|  |        |      add.l d0,d0
    a56c:	|  |        |      add.l d1,d0
    a56e:	|  |        |      add.l d0,d0
    a570:	|  |        |      add.l d0,d0
    a572:	|  |        |      lea (0,a1,d0.l),a0
    a576:	|  |        |      move.l 4(a0),d0
    a57a:	|  |        |      movea.l 24(sp),a0
    a57e:	|  |        |      move.l d0,88(a0)
			if (thisPerson -> show && myAnim && myAnim -> frames) {
    a582:	|  |        |      movea.l 24(sp),a0
    a586:	|  |        |      move.w 104(a0),d0
    a58a:	|  |        +----- beq.w a73c <drawPeople+0x5c6>
    a58e:	|  |        |      tst.l 20(sp)
    a592:	|  |        +----- beq.w a73c <drawPeople+0x5c6>
    a596:	|  |        |      movea.l 20(sp),a0
    a59a:	|  |        |      move.l 4(a0),d0
    a59e:	|  |        +----- beq.w a73c <drawPeople+0x5c6>
				if (myAnim -> frames[thisPerson -> frameNum].noise > 0) {
    a5a2:	|  |        |      movea.l 20(sp),a0
    a5a6:	|  |        |      movea.l 4(a0),a1
    a5aa:	|  |        |      movea.l 24(sp),a0
    a5ae:	|  |        |      move.l 84(a0),d0
    a5b2:	|  |        |      move.l d0,d1
    a5b4:	|  |        |      move.l d1,d0
    a5b6:	|  |        |      add.l d0,d0
    a5b8:	|  |        |      add.l d1,d0
    a5ba:	|  |        |      add.l d0,d0
    a5bc:	|  |        |      add.l d0,d0
    a5be:	|  |        |      lea (0,a1,d0.l),a0
    a5c2:	|  |        |      move.l 8(a0),d0
    a5c6:	|  |        |  /-- ble.w a668 <drawPeople+0x4f2>
					startSound(myAnim -> frames[thisPerson -> frameNum].noise, FALSE);
    a5ca:	|  |        |  |   movea.l 20(sp),a0
    a5ce:	|  |        |  |   movea.l 4(a0),a1
    a5d2:	|  |        |  |   movea.l 24(sp),a0
    a5d6:	|  |        |  |   move.l 84(a0),d0
    a5da:	|  |        |  |   move.l d0,d1
    a5dc:	|  |        |  |   move.l d1,d0
    a5de:	|  |        |  |   add.l d0,d0
    a5e0:	|  |        |  |   add.l d1,d0
    a5e2:	|  |        |  |   add.l d0,d0
    a5e4:	|  |        |  |   add.l d0,d0
    a5e6:	|  |        |  |   lea (0,a1,d0.l),a0
    a5ea:	|  |        |  |   move.l 8(a0),d0
    a5ee:	|  |        |  |   clr.l -(sp)
    a5f0:	|  |        |  |   move.l d0,-(sp)
    a5f2:	|  |        |  |   jsr d31a <startSound>
    a5f8:	|  |        |  |   addq.l #8,sp
					thisPerson -> frameNum ++;
    a5fa:	|  |        |  |   movea.l 24(sp),a0
    a5fe:	|  |        |  |   move.l 84(a0),d0
    a602:	|  |        |  |   addq.l #1,d0
    a604:	|  |        |  |   movea.l 24(sp),a0
    a608:	|  |        |  |   move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a60c:	|  |        |  |   movea.l 24(sp),a0
    a610:	|  |        |  |   move.l 84(a0),d0
    a614:	|  |        |  |   movea.l 24(sp),a0
    a618:	|  |        |  |   movea.l 72(a0),a0
    a61c:	|  |        |  |   move.l 8(a0),d1
    a620:	|  |        |  |   move.l d1,-(sp)
    a622:	|  |        |  |   move.l d0,-(sp)
    a624:	|  |        |  |   jsr 17dc6 <__modsi3>
    a62a:	|  |        |  |   addq.l #8,sp
    a62c:	|  |        |  |   movea.l 24(sp),a0
    a630:	|  |        |  |   move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a634:	|  |        |  |   movea.l 24(sp),a0
    a638:	|  |        |  |   movea.l 72(a0),a0
    a63c:	|  |        |  |   movea.l 4(a0),a1
    a640:	|  |        |  |   movea.l 24(sp),a0
    a644:	|  |        |  |   move.l 84(a0),d0
    a648:	|  |        |  |   move.l d0,d1
    a64a:	|  |        |  |   move.l d1,d0
    a64c:	|  |        |  |   add.l d0,d0
    a64e:	|  |        |  |   add.l d1,d0
    a650:	|  |        |  |   add.l d0,d0
    a652:	|  |        |  |   add.l d0,d0
    a654:	|  |        |  |   lea (0,a1,d0.l),a0
    a658:	|  |        |  |   move.l 4(a0),d0
    a65c:	|  |        |  |   movea.l 24(sp),a0
    a660:	|  |        |  |   move.l d0,88(a0)
    a664:	|  |        +--|-- bra.w a73c <drawPeople+0x5c6>
				} else if (myAnim -> frames[thisPerson -> frameNum].noise) {
    a668:	|  |        |  \-> movea.l 20(sp),a0
    a66c:	|  |        |      movea.l 4(a0),a1
    a670:	|  |        |      movea.l 24(sp),a0
    a674:	|  |        |      move.l 84(a0),d0
    a678:	|  |        |      move.l d0,d1
    a67a:	|  |        |      move.l d1,d0
    a67c:	|  |        |      add.l d0,d0
    a67e:	|  |        |      add.l d1,d0
    a680:	|  |        |      add.l d0,d0
    a682:	|  |        |      add.l d0,d0
    a684:	|  |        |      lea (0,a1,d0.l),a0
    a688:	|  |        |      move.l 8(a0),d0
    a68c:	|  |        +----- beq.w a73c <drawPeople+0x5c6>
					startNewFunctionNum (- myAnim -> frames[thisPerson -> frameNum].noise, 0, NULL, noStack, TRUE);
    a690:	|  |        |      movea.l 1ca52 <noStack>,a1
    a696:	|  |        |      movea.l 20(sp),a0
    a69a:	|  |        |      move.l 4(a0),d2
    a69e:	|  |        |      movea.l 24(sp),a0
    a6a2:	|  |        |      move.l 84(a0),d0
    a6a6:	|  |        |      move.l d0,d1
    a6a8:	|  |        |      move.l d1,d0
    a6aa:	|  |        |      add.l d0,d0
    a6ac:	|  |        |      add.l d1,d0
    a6ae:	|  |        |      add.l d0,d0
    a6b0:	|  |        |      add.l d0,d0
    a6b2:	|  |        |      movea.l d2,a0
    a6b4:	|  |        |      adda.l d0,a0
    a6b6:	|  |        |      move.l 8(a0),d0
    a6ba:	|  |        |      neg.l d0
    a6bc:	|  |        |      pea 1 <_start+0x1>
    a6c0:	|  |        |      move.l a1,-(sp)
    a6c2:	|  |        |      clr.l -(sp)
    a6c4:	|  |        |      clr.l -(sp)
    a6c6:	|  |        |      move.l d0,-(sp)
    a6c8:	|  |        |      jsr 6c08 <startNewFunctionNum>
    a6ce:	|  |        |      lea 20(sp),sp
					thisPerson -> frameNum ++;
    a6d2:	|  |        |      movea.l 24(sp),a0
    a6d6:	|  |        |      move.l 84(a0),d0
    a6da:	|  |        |      addq.l #1,d0
    a6dc:	|  |        |      movea.l 24(sp),a0
    a6e0:	|  |        |      move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a6e4:	|  |        |      movea.l 24(sp),a0
    a6e8:	|  |        |      move.l 84(a0),d0
    a6ec:	|  |        |      movea.l 24(sp),a0
    a6f0:	|  |        |      movea.l 72(a0),a0
    a6f4:	|  |        |      move.l 8(a0),d1
    a6f8:	|  |        |      move.l d1,-(sp)
    a6fa:	|  |        |      move.l d0,-(sp)
    a6fc:	|  |        |      jsr 17dc6 <__modsi3>
    a702:	|  |        |      addq.l #8,sp
    a704:	|  |        |      movea.l 24(sp),a0
    a708:	|  |        |      move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a70c:	|  |        |      movea.l 24(sp),a0
    a710:	|  |        |      movea.l 72(a0),a0
    a714:	|  |        |      movea.l 4(a0),a1
    a718:	|  |        |      movea.l 24(sp),a0
    a71c:	|  |        |      move.l 84(a0),d0
    a720:	|  |        |      move.l d0,d1
    a722:	|  |        |      move.l d1,d0
    a724:	|  |        |      add.l d0,d0
    a726:	|  |        |      add.l d1,d0
    a728:	|  |        |      add.l d0,d0
    a72a:	|  |        |      add.l d0,d0
    a72c:	|  |        |      lea (0,a1,d0.l),a0
    a730:	|  |        |      move.l 4(a0),d0
    a734:	|  |        |      movea.l 24(sp),a0
    a738:	|  |        |      move.l d0,88(a0)
				}
			}
		}
		thisPerson = thisPerson -> next;
    a73c:	|  |        \----> movea.l 24(sp),a0
    a740:	|  |               move.l 36(a0),24(sp)
	while (thisPerson) {
    a746:	|  \-------------> tst.l 24(sp)
    a74a:	\----------------- bne.w a198 <drawPeople+0x22>
	}
}
    a74e:	                   nop
    a750:	                   nop
    a752:	                   move.l (sp)+,d2
    a754:	                   lea 24(sp),sp
    a758:	                   rts

0000a75a <findPerson>:


struct onScreenPerson * findPerson (int v) {
    a75a:	          subq.l #4,sp
	struct onScreenPerson * thisPerson = allPeople;
    a75c:	          move.l 1cae6 <allPeople>,(sp)
	while (thisPerson) {
    a762:	      /-- bra.s a77a <findPerson+0x20>
		if (v == thisPerson -> thisType -> objectNum) break;
    a764:	/-----|-> movea.l (sp),a0
    a766:	|     |   movea.l 114(a0),a0
    a76a:	|     |   move.l 4(a0),d0
    a76e:	|     |   cmp.l 8(sp),d0
    a772:	|  /--|-- beq.s a780 <findPerson+0x26>
		thisPerson = thisPerson -> next;
    a774:	|  |  |   movea.l (sp),a0
    a776:	|  |  |   move.l 36(a0),(sp)
	while (thisPerson) {
    a77a:	|  |  \-> tst.l (sp)
    a77c:	\--|----- bne.s a764 <findPerson+0xa>
    a77e:	   |  /-- bra.s a782 <findPerson+0x28>
		if (v == thisPerson -> thisType -> objectNum) break;
    a780:	   \--|-> nop
	}
	return thisPerson;
    a782:	      \-> move.l (sp),d0
}
    a784:	          addq.l #4,sp
    a786:	          rts

0000a788 <floatCharacter>:

BOOL floatCharacter (int f, int objNum) {
    a788:	       subq.l #4,sp
	struct onScreenPerson * moveMe = findPerson (objNum);
    a78a:	       move.l 12(sp),-(sp)
    a78e:	       jsr a75a <findPerson>
    a794:	       addq.l #4,sp
    a796:	       move.l d0,(sp)
	if (! moveMe) return FALSE;
    a798:	   /-- bne.s a79e <floatCharacter+0x16>
    a79a:	   |   clr.w d0
    a79c:	/--|-- bra.s a7a8 <floatCharacter+0x20>
	moveMe -> floaty = f;
    a79e:	|  \-> movea.l (sp),a0
    a7a0:	|      move.l 8(sp),24(a0)
	return TRUE;
    a7a6:	|      moveq #1,d0
}
    a7a8:	\----> addq.l #4,sp
    a7aa:	       rts

0000a7ac <forceWalkingPerson>:

BOOL forceWalkingPerson (int x, int y, int objNum, struct loadedFunction * func, int di) {
    a7ac:	          subq.l #4,sp
    if (x == 0 && y == 0) return FALSE;
    a7ae:	          tst.l 8(sp)
    a7b2:	      /-- bne.s a7c0 <forceWalkingPerson+0x14>
    a7b4:	      |   tst.l 12(sp)
    a7b8:	      +-- bne.s a7c0 <forceWalkingPerson+0x14>
    a7ba:	      |   clr.w d0
    a7bc:	/-----|-- bra.w a852 <forceWalkingPerson+0xa6>
    struct onScreenPerson * moveMe = findPerson(objNum);
    a7c0:	|     \-> move.l 16(sp),-(sp)
    a7c4:	|         jsr a75a <findPerson>
    a7ca:	|         addq.l #4,sp
    a7cc:	|         move.l d0,(sp)
    if (!moveMe) return FALSE;
    a7ce:	|     /-- bne.s a7d4 <forceWalkingPerson+0x28>
    a7d0:	|     |   clr.w d0
    a7d2:	+-----|-- bra.s a852 <forceWalkingPerson+0xa6>

    if (moveMe->continueAfterWalking) abortFunction(moveMe->continueAfterWalking);
    a7d4:	|     \-> movea.l (sp),a0
    a7d6:	|         move.l 68(a0),d0
    a7da:	|     /-- beq.s a7ec <forceWalkingPerson+0x40>
    a7dc:	|     |   movea.l (sp),a0
    a7de:	|     |   move.l 68(a0),d0
    a7e2:	|     |   move.l d0,-(sp)
    a7e4:	|     |   jsr 484c <abortFunction>
    a7ea:	|     |   addq.l #4,sp
    moveMe->walking = TRUE;
    a7ec:	|     \-> movea.l (sp),a0
    a7ee:	|         move.w #1,64(a0)
    moveMe->continueAfterWalking = NULL;
    a7f4:	|         movea.l (sp),a0
    a7f6:	|         clr.l 68(a0)
    moveMe->directionWhenDoneWalking = di;
    a7fa:	|         movea.l (sp),a0
    a7fc:	|         move.l 24(sp),110(a0)

    moveMe->walkToX = x;
    a802:	|         movea.l (sp),a0
    a804:	|         move.l 8(sp),40(a0)
    moveMe->walkToY = y;
    a80a:	|         movea.l (sp),a0
    a80c:	|         move.l 12(sp),44(a0)

    // Let's pretend the start and end points are both in the same
    // polygon (which one isn't important)
    moveMe->inPoly = 0;
    a812:	|         movea.l (sp),a0
    a814:	|         clr.l 56(a0)
    moveMe->walkToPoly = 0;
    a818:	|         movea.l (sp),a0
    a81a:	|         clr.l 60(a0)

    doBorderStuff(moveMe);
    a81e:	|         move.l (sp),-(sp)
    a820:	|         jsr 9abc <doBorderStuff>
    a826:	|         addq.l #4,sp
    if (walkMe(moveMe, TRUE) || moveMe->spinning) {
    a828:	|         pea 1 <_start+0x1>
    a82c:	|         move.l 4(sp),-(sp)
    a830:	|         jsr c0a0 <walkMe>
    a836:	|         addq.l #8,sp
    a838:	|         tst.w d0
    a83a:	|     /-- bne.s a844 <forceWalkingPerson+0x98>
    a83c:	|     |   movea.l (sp),a0
    a83e:	|     |   move.w 66(a0),d0
    a842:	|  /--|-- beq.s a850 <forceWalkingPerson+0xa4>
        moveMe->continueAfterWalking = func;
    a844:	|  |  \-> movea.l (sp),a0
    a846:	|  |      move.l 20(sp),68(a0)
        return TRUE;
    a84c:	|  |      moveq #1,d0
    a84e:	+--|----- bra.s a852 <forceWalkingPerson+0xa6>
    } else {
        return FALSE;
    a850:	|  \----> clr.w d0
    }
}
    a852:	\-------> addq.l #4,sp
    a854:	          rts

0000a856 <handleClosestPoint>:

BOOL handleClosestPoint (int * setX, int * setY, int * setPoly) {
    a856:	                lea -56(sp),sp
    a85a:	                move.l d2,-(sp)
	int gotX = 320, gotY = 200, gotPoly = -1, i, j, xTest1, yTest1,
    a85c:	                move.l #320,56(sp)
    a864:	                move.l #200,52(sp)
    a86c:	                moveq #-1,d0
    a86e:	                move.l d0,48(sp)
		xTest2, yTest2, closestX, closestY, oldJ, currentDistance = 0xFFFFF,
    a872:	                move.l #1048575,32(sp)
		thisDistance;

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
    a87a:	                clr.l 44(sp)
    a87e:	   /----------- bra.w aa56 <handleClosestPoint+0x200>
		oldJ = currentFloor -> polygon[i].numVertices - 1;
    a882:	/--|----------> movea.l 1cb9e <currentFloor>,a0
    a888:	|  |            move.l 12(a0),d1
    a88c:	|  |            move.l 44(sp),d0
    a890:	|  |            lsl.l #3,d0
    a892:	|  |            movea.l d1,a0
    a894:	|  |            adda.l d0,a0
    a896:	|  |            move.l (a0),d0
    a898:	|  |            move.l d0,d1
    a89a:	|  |            subq.l #1,d1
    a89c:	|  |            move.l d1,36(sp)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
    a8a0:	|  |            clr.l 40(sp)
    a8a4:	|  |     /----- bra.w aa34 <handleClosestPoint+0x1de>
			xTest1 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[j]].x;
    a8a8:	|  |  /--|----> movea.l 1cb9e <currentFloor>,a0
    a8ae:	|  |  |  |      move.l 4(a0),d1
    a8b2:	|  |  |  |      movea.l 1cb9e <currentFloor>,a0
    a8b8:	|  |  |  |      movea.l 12(a0),a0
    a8bc:	|  |  |  |      move.l 44(sp),d0
    a8c0:	|  |  |  |      lsl.l #3,d0
    a8c2:	|  |  |  |      adda.l d0,a0
    a8c4:	|  |  |  |      movea.l 4(a0),a0
    a8c8:	|  |  |  |      move.l 40(sp),d0
    a8cc:	|  |  |  |      add.l d0,d0
    a8ce:	|  |  |  |      add.l d0,d0
    a8d0:	|  |  |  |      adda.l d0,a0
    a8d2:	|  |  |  |      move.l (a0),d0
    a8d4:	|  |  |  |      lsl.l #3,d0
    a8d6:	|  |  |  |      movea.l d1,a0
    a8d8:	|  |  |  |      adda.l d0,a0
    a8da:	|  |  |  |      move.l (a0),28(sp)
			yTest1 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[j]].y;
    a8de:	|  |  |  |      movea.l 1cb9e <currentFloor>,a0
    a8e4:	|  |  |  |      move.l 4(a0),d1
    a8e8:	|  |  |  |      movea.l 1cb9e <currentFloor>,a0
    a8ee:	|  |  |  |      movea.l 12(a0),a0
    a8f2:	|  |  |  |      move.l 44(sp),d0
    a8f6:	|  |  |  |      lsl.l #3,d0
    a8f8:	|  |  |  |      adda.l d0,a0
    a8fa:	|  |  |  |      movea.l 4(a0),a0
    a8fe:	|  |  |  |      move.l 40(sp),d0
    a902:	|  |  |  |      add.l d0,d0
    a904:	|  |  |  |      add.l d0,d0
    a906:	|  |  |  |      adda.l d0,a0
    a908:	|  |  |  |      move.l (a0),d0
    a90a:	|  |  |  |      lsl.l #3,d0
    a90c:	|  |  |  |      movea.l d1,a0
    a90e:	|  |  |  |      adda.l d0,a0
    a910:	|  |  |  |      move.l 4(a0),24(sp)
			xTest2 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[oldJ]].x;
    a916:	|  |  |  |      movea.l 1cb9e <currentFloor>,a0
    a91c:	|  |  |  |      move.l 4(a0),d1
    a920:	|  |  |  |      movea.l 1cb9e <currentFloor>,a0
    a926:	|  |  |  |      movea.l 12(a0),a0
    a92a:	|  |  |  |      move.l 44(sp),d0
    a92e:	|  |  |  |      lsl.l #3,d0
    a930:	|  |  |  |      adda.l d0,a0
    a932:	|  |  |  |      movea.l 4(a0),a0
    a936:	|  |  |  |      move.l 36(sp),d0
    a93a:	|  |  |  |      add.l d0,d0
    a93c:	|  |  |  |      add.l d0,d0
    a93e:	|  |  |  |      adda.l d0,a0
    a940:	|  |  |  |      move.l (a0),d0
    a942:	|  |  |  |      lsl.l #3,d0
    a944:	|  |  |  |      movea.l d1,a0
    a946:	|  |  |  |      adda.l d0,a0
    a948:	|  |  |  |      move.l (a0),20(sp)
			yTest2 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[oldJ]].y;
    a94c:	|  |  |  |      movea.l 1cb9e <currentFloor>,a0
    a952:	|  |  |  |      move.l 4(a0),d1
    a956:	|  |  |  |      movea.l 1cb9e <currentFloor>,a0
    a95c:	|  |  |  |      movea.l 12(a0),a0
    a960:	|  |  |  |      move.l 44(sp),d0
    a964:	|  |  |  |      lsl.l #3,d0
    a966:	|  |  |  |      adda.l d0,a0
    a968:	|  |  |  |      movea.l 4(a0),a0
    a96c:	|  |  |  |      move.l 36(sp),d0
    a970:	|  |  |  |      add.l d0,d0
    a972:	|  |  |  |      add.l d0,d0
    a974:	|  |  |  |      adda.l d0,a0
    a976:	|  |  |  |      move.l (a0),d0
    a978:	|  |  |  |      lsl.l #3,d0
    a97a:	|  |  |  |      movea.l d1,a0
    a97c:	|  |  |  |      adda.l d0,a0
    a97e:	|  |  |  |      move.l 4(a0),16(sp)
			closestPointOnLine (&closestX, &closestY, xTest1, yTest1, xTest2, yTest2, *setX, *setY);
    a984:	|  |  |  |      movea.l 68(sp),a0
    a988:	|  |  |  |      move.l (a0),d1
    a98a:	|  |  |  |      movea.l 64(sp),a0
    a98e:	|  |  |  |      move.l (a0),d0
    a990:	|  |  |  |      move.l d1,-(sp)
    a992:	|  |  |  |      move.l d0,-(sp)
    a994:	|  |  |  |      move.l 24(sp),-(sp)
    a998:	|  |  |  |      move.l 32(sp),-(sp)
    a99c:	|  |  |  |      move.l 40(sp),-(sp)
    a9a0:	|  |  |  |      move.l 48(sp),-(sp)
    a9a4:	|  |  |  |      lea 28(sp),a0
    a9a8:	|  |  |  |      move.l a0,-(sp)
    a9aa:	|  |  |  |      lea 36(sp),a0
    a9ae:	|  |  |  |      move.l a0,-(sp)
    a9b0:	|  |  |  |      jsr 16180 <closestPointOnLine>
    a9b6:	|  |  |  |      lea 32(sp),sp

			xTest1 = *setX - closestX;
    a9ba:	|  |  |  |      movea.l 64(sp),a0
    a9be:	|  |  |  |      move.l (a0),d0
    a9c0:	|  |  |  |      move.l 8(sp),d1
    a9c4:	|  |  |  |      move.l d0,d2
    a9c6:	|  |  |  |      sub.l d1,d2
    a9c8:	|  |  |  |      move.l d2,28(sp)
			yTest1 = *setY - closestY;
    a9cc:	|  |  |  |      movea.l 68(sp),a0
    a9d0:	|  |  |  |      move.l (a0),d0
    a9d2:	|  |  |  |      move.l 4(sp),d1
    a9d6:	|  |  |  |      move.l d0,d2
    a9d8:	|  |  |  |      sub.l d1,d2
    a9da:	|  |  |  |      move.l d2,24(sp)
			thisDistance = xTest1 * xTest1 + yTest1 * yTest1;
    a9de:	|  |  |  |      move.l 28(sp),-(sp)
    a9e2:	|  |  |  |      move.l 32(sp),-(sp)
    a9e6:	|  |  |  |      jsr 17d1a <__mulsi3>
    a9ec:	|  |  |  |      addq.l #8,sp
    a9ee:	|  |  |  |      move.l d0,d2
    a9f0:	|  |  |  |      move.l 24(sp),-(sp)
    a9f4:	|  |  |  |      move.l 28(sp),-(sp)
    a9f8:	|  |  |  |      jsr 17d1a <__mulsi3>
    a9fe:	|  |  |  |      addq.l #8,sp
    aa00:	|  |  |  |      move.l d2,d1
    aa02:	|  |  |  |      add.l d0,d1
    aa04:	|  |  |  |      move.l d1,12(sp)


			if (thisDistance < currentDistance) {
    aa08:	|  |  |  |      move.l 12(sp),d2
    aa0c:	|  |  |  |      cmp.l 32(sp),d2
    aa10:	|  |  |  |  /-- bge.s aa2a <handleClosestPoint+0x1d4>

				currentDistance = thisDistance;
    aa12:	|  |  |  |  |   move.l 12(sp),32(sp)
				gotX = closestX;
    aa18:	|  |  |  |  |   move.l 8(sp),56(sp)
				gotY = closestY;
    aa1e:	|  |  |  |  |   move.l 4(sp),52(sp)
				gotPoly = i;
    aa24:	|  |  |  |  |   move.l 44(sp),48(sp)
			}
			oldJ = j;
    aa2a:	|  |  |  |  \-> move.l 40(sp),36(sp)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
    aa30:	|  |  |  |      addq.l #1,40(sp)
    aa34:	|  |  |  \----> movea.l 1cb9e <currentFloor>,a0
    aa3a:	|  |  |         move.l 12(a0),d1
    aa3e:	|  |  |         move.l 44(sp),d0
    aa42:	|  |  |         lsl.l #3,d0
    aa44:	|  |  |         movea.l d1,a0
    aa46:	|  |  |         adda.l d0,a0
    aa48:	|  |  |         move.l (a0),d0
    aa4a:	|  |  |         cmp.l 40(sp),d0
    aa4e:	|  |  \-------- bgt.w a8a8 <handleClosestPoint+0x52>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
    aa52:	|  |            addq.l #1,44(sp)
    aa56:	|  \----------> movea.l 1cb9e <currentFloor>,a0
    aa5c:	|               move.l 8(a0),d0
    aa60:	|               cmp.l 44(sp),d0
    aa64:	\-------------- bgt.w a882 <handleClosestPoint+0x2c>
		}
	}

	if (gotPoly == -1) return FALSE;
    aa68:	                moveq #-1,d0
    aa6a:	                cmp.l 48(sp),d0
    aa6e:	            /-- bne.s aa74 <handleClosestPoint+0x21e>
    aa70:	            |   clr.w d0
    aa72:	         /--|-- bra.s aa8e <handleClosestPoint+0x238>
	*setX = gotX;
    aa74:	         |  \-> movea.l 64(sp),a0
    aa78:	         |      move.l 56(sp),(a0)
	*setY = gotY;
    aa7c:	         |      movea.l 68(sp),a0
    aa80:	         |      move.l 52(sp),(a0)
	*setPoly = gotPoly;
    aa84:	         |      movea.l 72(sp),a0
    aa88:	         |      move.l 48(sp),(a0)

	return TRUE;
    aa8c:	         |      moveq #1,d0
}
    aa8e:	         \----> move.l (sp)+,d2
    aa90:	                lea 56(sp),sp
    aa94:	                rts

0000aa96 <initPeople>:


BOOL initPeople () {
	personRegion.sX = 0;
    aa96:	clr.l 1cafa <personRegion+0x10>
	personRegion.sY = 0;
    aa9c:	clr.l 1cafe <personRegion+0x14>
	personRegion.di = -1;
    aaa2:	moveq #-1,d0
    aaa4:	move.l d0,1cb02 <personRegion+0x18>
	allScreenRegions = NULL;
    aaaa:	clr.l 1cb92 <allScreenRegions>

	return TRUE;
    aab0:	moveq #1,d0
}
    aab2:	rts

0000aab4 <jumpPerson>:

void jumpPerson (int x, int y, int objNum) {
    aab4:	          subq.l #4,sp
    aab6:	          move.l d2,-(sp)
    if (x == 0 && y == 0) return;
    aab8:	          tst.l 12(sp)
    aabc:	      /-- bne.s aac4 <jumpPerson+0x10>
    aabe:	      |   tst.l 16(sp)
    aac2:	/-----|-- beq.s ab38 <jumpPerson+0x84>
    struct onScreenPerson * moveMe = findPerson(objNum);
    aac4:	|     \-> move.l 20(sp),-(sp)
    aac8:	|         jsr a75a <findPerson>
    aace:	|         addq.l #4,sp
    aad0:	|         move.l d0,4(sp)
    if (!moveMe) return;
    aad4:	|  /----- beq.s ab3c <jumpPerson+0x88>
    if (moveMe->continueAfterWalking) abortFunction(moveMe->continueAfterWalking);
    aad6:	|  |      movea.l 4(sp),a0
    aada:	|  |      move.l 68(a0),d0
    aade:	|  |  /-- beq.s aaf2 <jumpPerson+0x3e>
    aae0:	|  |  |   movea.l 4(sp),a0
    aae4:	|  |  |   move.l 68(a0),d0
    aae8:	|  |  |   move.l d0,-(sp)
    aaea:	|  |  |   jsr 484c <abortFunction>
    aaf0:	|  |  |   addq.l #4,sp
    moveMe->continueAfterWalking = NULL;
    aaf2:	|  |  \-> movea.l 4(sp),a0
    aaf6:	|  |      clr.l 68(a0)
    moveMe->walking = FALSE;
    aafa:	|  |      movea.l 4(sp),a0
    aafe:	|  |      clr.w 64(a0)
    moveMe->spinning = FALSE;
    ab02:	|  |      movea.l 4(sp),a0
    ab06:	|  |      clr.w 66(a0)
    moveAndScale(moveMe, x, y);
    ab0a:	|  |      move.l 16(sp),-(sp)
    ab0e:	|  |      jsr 17798 <__floatsisf>
    ab14:	|  |      addq.l #4,sp
    ab16:	|  |      move.l d0,d2
    ab18:	|  |      move.l 12(sp),-(sp)
    ab1c:	|  |      jsr 17798 <__floatsisf>
    ab22:	|  |      addq.l #4,sp
    ab24:	|  |      move.l d2,-(sp)
    ab26:	|  |      move.l d0,-(sp)
    ab28:	|  |      move.l 12(sp),-(sp)
    ab2c:	|  |      jsr aea2 <moveAndScale>
    ab32:	|  |      lea 12(sp),sp
    ab36:	|  |  /-- bra.s ab3e <jumpPerson+0x8a>
    if (x == 0 && y == 0) return;
    ab38:	\--|--|-> nop
    ab3a:	   |  +-- bra.s ab3e <jumpPerson+0x8a>
    if (!moveMe) return;
    ab3c:	   \--|-> nop
}
    ab3e:	      \-> move.l (sp)+,d2
    ab40:	          addq.l #4,sp
    ab42:	          rts

0000ab44 <killAllPeople>:


void killAllPeople () {
    ab44:	          subq.l #8,sp
    ab46:	          move.l a6,-(sp)
	struct onScreenPerson * killPeople;
	while (allPeople) {
    ab48:	   /----- bra.s abb4 <killAllPeople+0x70>
		if (allPeople -> continueAfterWalking) abortFunction (allPeople -> continueAfterWalking);
    ab4a:	/--|----> movea.l 1cae6 <allPeople>,a0
    ab50:	|  |      move.l 68(a0),d0
    ab54:	|  |  /-- beq.s ab6a <killAllPeople+0x26>
    ab56:	|  |  |   movea.l 1cae6 <allPeople>,a0
    ab5c:	|  |  |   move.l 68(a0),d0
    ab60:	|  |  |   move.l d0,-(sp)
    ab62:	|  |  |   jsr 484c <abortFunction>
    ab68:	|  |  |   addq.l #4,sp
		allPeople -> continueAfterWalking = NULL;
    ab6a:	|  |  \-> movea.l 1cae6 <allPeople>,a0
    ab70:	|  |      clr.l 68(a0)
		killPeople = allPeople;
    ab74:	|  |      move.l 1cae6 <allPeople>,8(sp)
		allPeople = allPeople -> next;
    ab7c:	|  |      movea.l 1cae6 <allPeople>,a0
    ab82:	|  |      move.l 36(a0),d0
    ab86:	|  |      move.l d0,1cae6 <allPeople>
		removeObjectType (killPeople -> thisType);
    ab8c:	|  |      movea.l 8(sp),a0
    ab90:	|  |      move.l 114(a0),d0
    ab94:	|  |      move.l d0,-(sp)
    ab96:	|  |      jsr d9f8 <removeObjectType>
    ab9c:	|  |      addq.l #4,sp
		FreeVec(killPeople);
    ab9e:	|  |      move.l 8(sp),4(sp)
    aba4:	|  |      move.l 1ca82 <SysBase>,d0
    abaa:	|  |      movea.l d0,a6
    abac:	|  |      movea.l 4(sp),a1
    abb0:	|  |      jsr -690(a6)
	while (allPeople) {
    abb4:	|  \----> move.l 1cae6 <allPeople>,d0
    abba:	\-------- bne.s ab4a <killAllPeople+0x6>
	}
}
    abbc:	          nop
    abbe:	          nop
    abc0:	          movea.l (sp)+,a6
    abc2:	          addq.l #8,sp
    abc4:	          rts

0000abc6 <killMostPeople>:

void killMostPeople() {
    abc6:	          lea -12(sp),sp
    abca:	          move.l a6,-(sp)
    struct onScreenPerson *killPeople;
    struct onScreenPerson **lookyHere = &allPeople;
    abcc:	          move.l #117478,12(sp)

    while (*lookyHere) {
    abd4:	   /----- bra.w ac5a <killMostPeople+0x94>
        if ((*lookyHere)->extra & EXTRA_NOREMOVE) {
    abd8:	/--|----> movea.l 12(sp),a0
    abdc:	|  |      movea.l (a0),a0
    abde:	|  |      move.l 118(a0),d0
    abe2:	|  |      moveq #32,d1
    abe4:	|  |      and.l d1,d0
    abe6:	|  |  /-- beq.s abf8 <killMostPeople+0x32>
            lookyHere = &(*lookyHere)->next;
    abe8:	|  |  |   movea.l 12(sp),a0
    abec:	|  |  |   move.l (a0),d0
    abee:	|  |  |   moveq #36,d1
    abf0:	|  |  |   add.l d0,d1
    abf2:	|  |  |   move.l d1,12(sp)
    abf6:	|  +--|-- bra.s ac5a <killMostPeople+0x94>
        } else {
            killPeople = (*lookyHere);
    abf8:	|  |  \-> movea.l 12(sp),a0
    abfc:	|  |      move.l (a0),8(sp)

            // Change last pointer to NEXT in the list instead
            (*lookyHere) = killPeople->next;
    ac00:	|  |      movea.l 8(sp),a0
    ac04:	|  |      move.l 36(a0),d0
    ac08:	|  |      movea.l 12(sp),a0
    ac0c:	|  |      move.l d0,(a0)

            // Gone from the list... now free some memory
            if (killPeople->continueAfterWalking) abortFunction(killPeople->continueAfterWalking);
    ac0e:	|  |      movea.l 8(sp),a0
    ac12:	|  |      move.l 68(a0),d0
    ac16:	|  |  /-- beq.s ac2a <killMostPeople+0x64>
    ac18:	|  |  |   movea.l 8(sp),a0
    ac1c:	|  |  |   move.l 68(a0),d0
    ac20:	|  |  |   move.l d0,-(sp)
    ac22:	|  |  |   jsr 484c <abortFunction>
    ac28:	|  |  |   addq.l #4,sp
            killPeople->continueAfterWalking = NULL;
    ac2a:	|  |  \-> movea.l 8(sp),a0
    ac2e:	|  |      clr.l 68(a0)
            removeObjectType(killPeople->thisType);
    ac32:	|  |      movea.l 8(sp),a0
    ac36:	|  |      move.l 114(a0),d0
    ac3a:	|  |      move.l d0,-(sp)
    ac3c:	|  |      jsr d9f8 <removeObjectType>
    ac42:	|  |      addq.l #4,sp
            FreeVec(killPeople);
    ac44:	|  |      move.l 8(sp),4(sp)
    ac4a:	|  |      move.l 1ca82 <SysBase>,d0
    ac50:	|  |      movea.l d0,a6
    ac52:	|  |      movea.l 4(sp),a1
    ac56:	|  |      jsr -690(a6)
    while (*lookyHere) {
    ac5a:	|  \----> movea.l 12(sp),a0
    ac5e:	|         move.l (a0),d0
    ac60:	\-------- bne.w abd8 <killMostPeople+0x12>
        }
    }
}
    ac64:	          nop
    ac66:	          nop
    ac68:	          movea.l (sp)+,a6
    ac6a:	          lea 12(sp),sp
    ac6e:	          rts

0000ac70 <makeSilent>:
//	db ("End of loadPeople");
	return TRUE;
}

void makeSilent (struct onScreenPerson me) {
	setFrames (&me, ANI_STAND);
    ac70:	clr.l -(sp)
    ac72:	move.l sp,d0
    ac74:	addq.l #8,d0
    ac76:	move.l d0,-(sp)
    ac78:	jsr 82a4 <setFrames>
    ac7e:	addq.l #8,sp
}
    ac80:	nop
    ac82:	rts

0000ac84 <makeWalkingPerson>:

BOOL makeWalkingPerson (int x, int y, int objNum, struct loadedFunction * func, int di) {
    ac84:	          lea -12(sp),sp
    ac88:	          move.l d2,-(sp)
	if (x == 0 && y == 0) return FALSE;
    ac8a:	          tst.l 20(sp)
    ac8e:	      /-- bne.s ac9c <makeWalkingPerson+0x18>
    ac90:	      |   tst.l 24(sp)
    ac94:	      +-- bne.s ac9c <makeWalkingPerson+0x18>
    ac96:	      |   clr.w d0
    ac98:	/-----|-- bra.w ae34 <makeWalkingPerson+0x1b0>
	if (currentFloor -> numPolygons == 0) return FALSE;
    ac9c:	|     \-> movea.l 1cb9e <currentFloor>,a0
    aca2:	|         move.l 8(a0),d0
    aca6:	|     /-- bne.s acae <makeWalkingPerson+0x2a>
    aca8:	|     |   clr.w d0
    acaa:	+-----|-- bra.w ae34 <makeWalkingPerson+0x1b0>
	struct onScreenPerson * moveMe = findPerson (objNum);
    acae:	|     \-> move.l 28(sp),-(sp)
    acb2:	|         jsr a75a <findPerson>
    acb8:	|         addq.l #4,sp
    acba:	|         move.l d0,12(sp)
	if (! moveMe) return FALSE;
    acbe:	|     /-- bne.s acc6 <makeWalkingPerson+0x42>
    acc0:	|     |   clr.w d0
    acc2:	+-----|-- bra.w ae34 <makeWalkingPerson+0x1b0>

	if (moveMe -> continueAfterWalking) abortFunction (moveMe -> continueAfterWalking);
    acc6:	|     \-> movea.l 12(sp),a0
    acca:	|         move.l 68(a0),d0
    acce:	|     /-- beq.s ace2 <makeWalkingPerson+0x5e>
    acd0:	|     |   movea.l 12(sp),a0
    acd4:	|     |   move.l 68(a0),d0
    acd8:	|     |   move.l d0,-(sp)
    acda:	|     |   jsr 484c <abortFunction>
    ace0:	|     |   addq.l #4,sp
	moveMe -> continueAfterWalking = NULL;
    ace2:	|     \-> movea.l 12(sp),a0
    ace6:	|         clr.l 68(a0)
	moveMe -> walking = TRUE;
    acea:	|         movea.l 12(sp),a0
    acee:	|         move.w #1,64(a0)
	moveMe -> directionWhenDoneWalking = di;
    acf4:	|         movea.l 12(sp),a0
    acf8:	|         move.l 36(sp),110(a0)

	moveMe -> walkToX = x;
    acfe:	|         movea.l 12(sp),a0
    ad02:	|         move.l 20(sp),40(a0)
	moveMe -> walkToY = y;
    ad08:	|         movea.l 12(sp),a0
    ad0c:	|         move.l 24(sp),44(a0)
	moveMe -> walkToPoly = inFloor (x, y);
    ad12:	|         move.l 24(sp),-(sp)
    ad16:	|         move.l 24(sp),-(sp)
    ad1a:	|         jsr 166c8 <inFloor>
    ad20:	|         addq.l #8,sp
    ad22:	|         movea.l 12(sp),a0
    ad26:	|         move.l d0,60(a0)
	if (moveMe -> walkToPoly == -1) {
    ad2a:	|         movea.l 12(sp),a0
    ad2e:	|         move.l 60(a0),d0
    ad32:	|         moveq #-1,d1
    ad34:	|         cmp.l d0,d1
    ad36:	|     /-- bne.s ad66 <makeWalkingPerson+0xe2>
		if (! handleClosestPoint (&moveMe -> walkToX, &moveMe -> walkToY, &moveMe -> walkToPoly)) return FALSE;
    ad38:	|     |   movea.w #60,a0
    ad3c:	|     |   adda.l 12(sp),a0
    ad40:	|     |   moveq #44,d1
    ad42:	|     |   add.l 12(sp),d1
    ad46:	|     |   moveq #40,d0
    ad48:	|     |   add.l 12(sp),d0
    ad4c:	|     |   move.l a0,-(sp)
    ad4e:	|     |   move.l d1,-(sp)
    ad50:	|     |   move.l d0,-(sp)
    ad52:	|     |   jsr a856 <handleClosestPoint>
    ad58:	|     |   lea 12(sp),sp
    ad5c:	|     |   tst.w d0
    ad5e:	|     +-- bne.s ad66 <makeWalkingPerson+0xe2>
    ad60:	|     |   clr.w d0
    ad62:	+-----|-- bra.w ae34 <makeWalkingPerson+0x1b0>
	}

	moveMe -> inPoly = inFloor (moveMe -> x, moveMe -> y);
    ad66:	|     \-> movea.l 12(sp),a0
    ad6a:	|         move.l 4(a0),d0
    ad6e:	|         move.l d0,-(sp)
    ad70:	|         jsr 17730 <__fixsfsi>
    ad76:	|         addq.l #4,sp
    ad78:	|         move.l d0,d2
    ad7a:	|         movea.l 12(sp),a0
    ad7e:	|         move.l (a0),d0
    ad80:	|         move.l d0,-(sp)
    ad82:	|         jsr 17730 <__fixsfsi>
    ad88:	|         addq.l #4,sp
    ad8a:	|         move.l d2,-(sp)
    ad8c:	|         move.l d0,-(sp)
    ad8e:	|         jsr 166c8 <inFloor>
    ad94:	|         addq.l #8,sp
    ad96:	|         movea.l 12(sp),a0
    ad9a:	|         move.l d0,56(a0)
	if (moveMe -> inPoly == -1) {
    ad9e:	|         movea.l 12(sp),a0
    ada2:	|         move.l 56(a0),d0
    ada6:	|         moveq #-1,d1
    ada8:	|         cmp.l d0,d1
    adaa:	|     /-- bne.s adfc <makeWalkingPerson+0x178>
		int xxx = moveMe -> x, yyy = moveMe -> y;
    adac:	|     |   movea.l 12(sp),a0
    adb0:	|     |   move.l (a0),d0
    adb2:	|     |   move.l d0,-(sp)
    adb4:	|     |   jsr 17730 <__fixsfsi>
    adba:	|     |   addq.l #4,sp
    adbc:	|     |   move.l d0,8(sp)
    adc0:	|     |   movea.l 12(sp),a0
    adc4:	|     |   move.l 4(a0),d0
    adc8:	|     |   move.l d0,-(sp)
    adca:	|     |   jsr 17730 <__fixsfsi>
    add0:	|     |   addq.l #4,sp
    add2:	|     |   move.l d0,4(sp)
		if (! handleClosestPoint (&xxx, &yyy, &moveMe -> inPoly)) return FALSE;
    add6:	|     |   moveq #56,d0
    add8:	|     |   add.l 12(sp),d0
    addc:	|     |   move.l d0,-(sp)
    adde:	|     |   lea 8(sp),a0
    ade2:	|     |   move.l a0,-(sp)
    ade4:	|     |   moveq #16,d0
    ade6:	|     |   add.l sp,d0
    ade8:	|     |   move.l d0,-(sp)
    adea:	|     |   jsr a856 <handleClosestPoint>
    adf0:	|     |   lea 12(sp),sp
    adf4:	|     |   tst.w d0
    adf6:	|     +-- bne.s adfc <makeWalkingPerson+0x178>
    adf8:	|     |   clr.w d0
    adfa:	+-----|-- bra.s ae34 <makeWalkingPerson+0x1b0>
	}

	doBorderStuff (moveMe);
    adfc:	|     \-> move.l 12(sp),-(sp)
    ae00:	|         jsr 9abc <doBorderStuff>
    ae06:	|         addq.l #4,sp
	if (walkMe (moveMe, FALSE) || moveMe -> spinning) {
    ae08:	|         clr.l -(sp)
    ae0a:	|         move.l 16(sp),-(sp)
    ae0e:	|         jsr c0a0 <walkMe>
    ae14:	|         addq.l #8,sp
    ae16:	|         tst.w d0
    ae18:	|     /-- bne.s ae24 <makeWalkingPerson+0x1a0>
    ae1a:	|     |   movea.l 12(sp),a0
    ae1e:	|     |   move.w 66(a0),d0
    ae22:	|  /--|-- beq.s ae32 <makeWalkingPerson+0x1ae>
		moveMe -> continueAfterWalking = func;
    ae24:	|  |  \-> movea.l 12(sp),a0
    ae28:	|  |      move.l 32(sp),68(a0)
		return TRUE;
    ae2e:	|  |      moveq #1,d0
    ae30:	+--|----- bra.s ae34 <makeWalkingPerson+0x1b0>
	} else {
		return FALSE;
    ae32:	|  \----> clr.w d0
	}
}
    ae34:	\-------> move.l (sp)+,d2
    ae36:	          lea 12(sp),sp
    ae3a:	          rts

0000ae3c <makeNullAnim>:


struct personaAnimation * makeNullAnim () {
    ae3c:	       lea -16(sp),sp
    ae40:	       move.l a6,-(sp)

	struct personaAnimation * newAnim	= AllocVec(sizeof(struct personaAnimation),MEMF_ANY);
    ae42:	       moveq #12,d0
    ae44:	       move.l d0,16(sp)
    ae48:	       clr.l 12(sp)
    ae4c:	       move.l 1ca82 <SysBase>,d0
    ae52:	       movea.l d0,a6
    ae54:	       move.l 16(sp),d0
    ae58:	       move.l 12(sp),d1
    ae5c:	       jsr -684(a6)
    ae60:	       move.l d0,8(sp)
    ae64:	       move.l 8(sp),d0
    ae68:	       move.l d0,4(sp)
    if(newAnim == 0) {
    ae6c:	   /-- bne.s ae80 <makeNullAnim+0x44>
     	KPrintF("makeNullAnim: Can't reserve Memory\n");
    ae6e:	   |   pea 192c5 <PutChar+0x1495>
    ae74:	   |   jsr 17366 <KPrintF>
    ae7a:	   |   addq.l #4,sp
        return NULL;    
    ae7c:	   |   moveq #0,d0
    ae7e:	/--|-- bra.s ae9a <makeNullAnim+0x5e>
    }  

	newAnim -> theSprites		= NULL;
    ae80:	|  \-> movea.l 4(sp),a0
    ae84:	|      clr.l (a0)
	newAnim -> numFrames		= 0;
    ae86:	|      movea.l 4(sp),a0
    ae8a:	|      clr.l 8(a0)
	newAnim -> frames			= NULL;
    ae8e:	|      movea.l 4(sp),a0
    ae92:	|      clr.l 4(a0)
	return newAnim;
    ae96:	|      move.l 4(sp),d0
}
    ae9a:	\----> movea.l (sp)+,a6
    ae9c:	       lea 16(sp),sp
    aea0:	       rts

0000aea2 <moveAndScale>:

void moveAndScale (struct onScreenPerson *me, FLOAT x, FLOAT y) {
    aea2:	    move.l d2,-(sp)
	me->x = x;
    aea4:	    movea.l 8(sp),a0
    aea8:	    move.l 12(sp),(a0)
	me->y = y;
    aeac:	    movea.l 8(sp),a0
    aeb0:	    move.l 16(sp),4(a0)
	me->oldx = 0;
    aeb6:	    movea.l 8(sp),a0
    aeba:	    clr.l 8(a0)
	me->oldy = 0;
    aebe:	    movea.l 8(sp),a0
    aec2:	    clr.l 12(a0)
	if (! (me->extra & EXTRA_NOSCALE) && scaleDivide) me->scale = (me->y - scaleHorizon) / scaleDivide;
    aec6:	    movea.l 8(sp),a0
    aeca:	    move.l 118(a0),d0
    aece:	    moveq #2,d1
    aed0:	    and.l d1,d0
    aed2:	/-- bne.s af2a <moveAndScale+0x88>
    aed4:	|   move.w 1c416 <scaleDivide>,d0
    aeda:	+-- beq.s af2a <moveAndScale+0x88>
    aedc:	|   movea.l 8(sp),a0
    aee0:	|   move.l 4(a0),d2
    aee4:	|   move.w 1c414 <scaleHorizon>,d0
    aeea:	|   movea.w d0,a0
    aeec:	|   move.l a0,-(sp)
    aeee:	|   jsr 17798 <__floatsisf>
    aef4:	|   addq.l #4,sp
    aef6:	|   move.l d0,-(sp)
    aef8:	|   move.l d2,-(sp)
    aefa:	|   jsr 17a8c <__subsf3>
    af00:	|   addq.l #8,sp
    af02:	|   move.l d0,d2
    af04:	|   move.w 1c416 <scaleDivide>,d0
    af0a:	|   movea.w d0,a0
    af0c:	|   move.l a0,-(sp)
    af0e:	|   jsr 17798 <__floatsisf>
    af14:	|   addq.l #4,sp
    af16:	|   move.l d0,-(sp)
    af18:	|   move.l d2,-(sp)
    af1a:	|   jsr 1764e <__divsf3>
    af20:	|   addq.l #8,sp
    af22:	|   movea.l 8(sp),a0
    af26:	|   move.l d0,32(a0)
}
    af2a:	\-> nop
    af2c:	    move.l (sp)+,d2
    af2e:	    rts

0000af30 <removeOneCharacter>:

void removeOneCharacter (int i) {
    af30:	          lea -16(sp),sp
    af34:	          move.l a6,-(sp)
    struct onScreenPerson * p = findPerson(i);	
    af36:	          move.l 24(sp),-(sp)
    af3a:	          jsr a75a <findPerson>
    af40:	          addq.l #4,sp
    af42:	          move.l d0,8(sp)

    if (p) {
    af46:	/-------- beq.w b026 <removeOneCharacter+0xf6>
		/*if( p->myAnim->numFrames == 0) {
			CstRestoreScreen(p->x, p->y, &p->myAnim->theSprites->bank.sprites[0].width, &p->myAnim->theSprites->bank.sprites[0].height );
		} ToDo: Remove this*/


        if (overRegion == &personRegion && overRegion->thisType == p->thisType) {
    af4a:	|         move.l 1cb96 <overRegion>,d0
    af50:	|         cmpi.l #117482,d0
    af56:	|     /-- bne.s af74 <removeOneCharacter+0x44>
    af58:	|     |   movea.l 1cb96 <overRegion>,a0
    af5e:	|     |   move.l 28(a0),d1
    af62:	|     |   movea.l 8(sp),a0
    af66:	|     |   move.l 114(a0),d0
    af6a:	|     |   cmp.l d1,d0
    af6c:	|     +-- bne.s af74 <removeOneCharacter+0x44>
            overRegion = NULL;
    af6e:	|     |   clr.l 1cb96 <overRegion>
        }

        if (p->continueAfterWalking) abortFunction(p->continueAfterWalking);
    af74:	|     \-> movea.l 8(sp),a0
    af78:	|         move.l 68(a0),d0
    af7c:	|     /-- beq.s af90 <removeOneCharacter+0x60>
    af7e:	|     |   movea.l 8(sp),a0
    af82:	|     |   move.l 68(a0),d0
    af86:	|     |   move.l d0,-(sp)
    af88:	|     |   jsr 484c <abortFunction>
    af8e:	|     |   addq.l #4,sp
        p->continueAfterWalking = NULL;
    af90:	|     \-> movea.l 8(sp),a0
    af94:	|         clr.l 68(a0)
        struct onScreenPerson ** killPeople;

		for(int i=0; i<3;i++)
    af98:	|         clr.l 12(sp)
    af9c:	|     /-- bra.s afc4 <removeOneCharacter+0x94>
		{
			deleteAnim( p->myPersona->animation[i]);
    af9e:	|  /--|-> movea.l 8(sp),a0
    afa2:	|  |  |   movea.l 80(a0),a0
    afa6:	|  |  |   move.l (a0),d1
    afa8:	|  |  |   move.l 12(sp),d0
    afac:	|  |  |   add.l d0,d0
    afae:	|  |  |   add.l d0,d0
    afb0:	|  |  |   movea.l d1,a0
    afb2:	|  |  |   adda.l d0,a0
    afb4:	|  |  |   move.l (a0),d0
    afb6:	|  |  |   move.l d0,-(sp)
    afb8:	|  |  |   jsr 9a38 <deleteAnim>
    afbe:	|  |  |   addq.l #4,sp
		for(int i=0; i<3;i++)
    afc0:	|  |  |   addq.l #1,12(sp)
    afc4:	|  |  \-> moveq #2,d0
    afc6:	|  |      cmp.l 12(sp),d0
    afca:	|  \----- bge.s af9e <removeOneCharacter+0x6e>
		}

        for (killPeople = &allPeople;
    afcc:	|         move.l #117478,16(sp)
    afd4:	|     /-- bra.s afe4 <removeOneCharacter+0xb4>
            *killPeople != p;
            killPeople = &((*killPeople)->next)) {;}
    afd6:	|  /--|-> movea.l 16(sp),a0
    afda:	|  |  |   move.l (a0),d0
    afdc:	|  |  |   moveq #36,d1
    afde:	|  |  |   add.l d0,d1
    afe0:	|  |  |   move.l d1,16(sp)
            *killPeople != p;
    afe4:	|  |  \-> movea.l 16(sp),a0
    afe8:	|  |      move.l (a0),d0
    afea:	|  |      cmp.l 8(sp),d0
    afee:	|  \----- bne.s afd6 <removeOneCharacter+0xa6>

        *killPeople = p->next;
    aff0:	|         movea.l 8(sp),a0
    aff4:	|         move.l 36(a0),d0
    aff8:	|         movea.l 16(sp),a0
    affc:	|         move.l d0,(a0)
        removeObjectType(p->thisType);
    affe:	|         movea.l 8(sp),a0
    b002:	|         move.l 114(a0),d0
    b006:	|         move.l d0,-(sp)
    b008:	|         jsr d9f8 <removeObjectType>
    b00e:	|         addq.l #4,sp
        FreeVec(p);
    b010:	|         move.l 8(sp),4(sp)
    b016:	|         move.l 1ca82 <SysBase>,d0
    b01c:	|         movea.l d0,a6
    b01e:	|         movea.l 4(sp),a1
    b022:	|         jsr -690(a6)
    }
}
    b026:	\-------> nop
    b028:	          movea.l (sp)+,a6
    b02a:	          lea 16(sp),sp
    b02e:	          rts

0000b030 <rethinkAngle>:

void rethinkAngle (struct onScreenPerson * thisPerson) {
    b030:	       subq.l #8,sp
    b032:	       move.l d2,-(sp)
	int d = thisPerson -> myPersona -> numDirections;
    b034:	       movea.l 16(sp),a0
    b038:	       movea.l 80(a0),a0
    b03c:	       move.l 4(a0),4(sp)
	int direc = thisPerson -> angle + (180 / d) + 180 + thisPerson -> angleOffset;
    b042:	       movea.l 16(sp),a0
    b046:	       move.l 92(a0),d2
    b04a:	       move.l 4(sp),-(sp)
    b04e:	       pea b4 <_start+0xb4>
    b052:	       jsr 17d98 <__divsi3>
    b058:	       addq.l #8,sp
    b05a:	       add.l d2,d0
    b05c:	       move.l d0,d1
    b05e:	       addi.l #180,d1
    b064:	       movea.l 16(sp),a0
    b068:	       move.l 100(a0),d0
    b06c:	       move.l d1,d2
    b06e:	       add.l d0,d2
    b070:	       move.l d2,8(sp)
	while (direc >= 360) direc -= 360;
    b074:	   /-- bra.s b07e <rethinkAngle+0x4e>
    b076:	/--|-> addi.l #-360,8(sp)
    b07e:	|  \-> cmpi.l #359,8(sp)
    b086:	\----- bgt.s b076 <rethinkAngle+0x46>
	thisPerson -> direction = (direc * d) / 360;
    b088:	       move.l 4(sp),-(sp)
    b08c:	       move.l 12(sp),-(sp)
    b090:	       jsr 17d1a <__mulsi3>
    b096:	       addq.l #8,sp
    b098:	       pea 168 <decodeFilename+0x50>
    b09c:	       move.l d0,-(sp)
    b09e:	       jsr 17d98 <__divsi3>
    b0a4:	       addq.l #8,sp
    b0a6:	       movea.l 16(sp),a0
    b0aa:	       move.l d0,106(a0)
}
    b0ae:	       nop
    b0b0:	       move.l (sp)+,d2
    b0b2:	       addq.l #8,sp
    b0b4:	       rts

0000b0b6 <saveAnim>:


BOOL saveAnim (struct personaAnimation * p, BPTR fp) {
    b0b6:	          subq.l #4,sp
	put2bytes (p -> numFrames, fp);
    b0b8:	          movea.l 8(sp),a0
    b0bc:	          move.l 8(a0),d0
    b0c0:	          move.l 12(sp),-(sp)
    b0c4:	          move.l d0,-(sp)
    b0c6:	          jsr 8d0 <put2bytes>
    b0cc:	          addq.l #8,sp
	if (p -> numFrames) {
    b0ce:	          movea.l 8(sp),a0
    b0d2:	          move.l 8(a0),d0
    b0d6:	/-------- beq.w b17a <saveAnim+0xc4>
		put4bytes (p -> theSprites -> ID, fp);
    b0da:	|         movea.l 8(sp),a0
    b0de:	|         movea.l (a0),a0
    b0e0:	|         move.l (a0),d0
    b0e2:	|         move.l 12(sp),-(sp)
    b0e6:	|         move.l d0,-(sp)
    b0e8:	|         jsr 958 <put4bytes>
    b0ee:	|         addq.l #8,sp

		for (int a = 0; a < p -> numFrames; a ++) {
    b0f0:	|         clr.l (sp)
    b0f2:	|     /-- bra.s b16c <saveAnim+0xb6>
			put4bytes (p -> frames[a].frameNum, fp);
    b0f4:	|  /--|-> movea.l 8(sp),a0
    b0f8:	|  |  |   movea.l 4(a0),a0
    b0fc:	|  |  |   move.l (sp),d1
    b0fe:	|  |  |   move.l d1,d0
    b100:	|  |  |   add.l d0,d0
    b102:	|  |  |   add.l d1,d0
    b104:	|  |  |   add.l d0,d0
    b106:	|  |  |   add.l d0,d0
    b108:	|  |  |   adda.l d0,a0
    b10a:	|  |  |   move.l (a0),d0
    b10c:	|  |  |   move.l 12(sp),-(sp)
    b110:	|  |  |   move.l d0,-(sp)
    b112:	|  |  |   jsr 958 <put4bytes>
    b118:	|  |  |   addq.l #8,sp
			put4bytes (p -> frames[a].howMany, fp);
    b11a:	|  |  |   movea.l 8(sp),a0
    b11e:	|  |  |   movea.l 4(a0),a0
    b122:	|  |  |   move.l (sp),d1
    b124:	|  |  |   move.l d1,d0
    b126:	|  |  |   add.l d0,d0
    b128:	|  |  |   add.l d1,d0
    b12a:	|  |  |   add.l d0,d0
    b12c:	|  |  |   add.l d0,d0
    b12e:	|  |  |   adda.l d0,a0
    b130:	|  |  |   move.l 4(a0),d0
    b134:	|  |  |   move.l 12(sp),-(sp)
    b138:	|  |  |   move.l d0,-(sp)
    b13a:	|  |  |   jsr 958 <put4bytes>
    b140:	|  |  |   addq.l #8,sp
			put4bytes (p -> frames[a].noise, fp);
    b142:	|  |  |   movea.l 8(sp),a0
    b146:	|  |  |   movea.l 4(a0),a0
    b14a:	|  |  |   move.l (sp),d1
    b14c:	|  |  |   move.l d1,d0
    b14e:	|  |  |   add.l d0,d0
    b150:	|  |  |   add.l d1,d0
    b152:	|  |  |   add.l d0,d0
    b154:	|  |  |   add.l d0,d0
    b156:	|  |  |   adda.l d0,a0
    b158:	|  |  |   move.l 8(a0),d0
    b15c:	|  |  |   move.l 12(sp),-(sp)
    b160:	|  |  |   move.l d0,-(sp)
    b162:	|  |  |   jsr 958 <put4bytes>
    b168:	|  |  |   addq.l #8,sp
		for (int a = 0; a < p -> numFrames; a ++) {
    b16a:	|  |  |   addq.l #1,(sp)
    b16c:	|  |  \-> movea.l 8(sp),a0
    b170:	|  |      move.l 8(a0),d0
    b174:	|  |      cmp.l (sp),d0
    b176:	|  \----- bgt.w b0f4 <saveAnim+0x3e>
		}
	}
	return TRUE;
    b17a:	\-------> moveq #1,d0
}
    b17c:	          addq.l #4,sp
    b17e:	          rts

0000b180 <saveCostume>:

BOOL saveCostume (struct persona * cossy, BPTR fp) {
    b180:	             subq.l #4,sp
	int a;
	put2bytes (cossy -> numDirections, fp);
    b182:	             movea.l 8(sp),a0
    b186:	             move.l 4(a0),d0
    b18a:	             move.l 12(sp),-(sp)
    b18e:	             move.l d0,-(sp)
    b190:	             jsr 8d0 <put2bytes>
    b196:	             addq.l #8,sp
	for (a = 0; a < cossy -> numDirections * 3; a ++) {
    b198:	             clr.l (sp)
    b19a:	   /-------- bra.s b1c6 <saveCostume+0x46>
		if (! saveAnim (cossy -> animation[a], fp)) return FALSE;
    b19c:	/--|-------> movea.l 8(sp),a0
    b1a0:	|  |         move.l (a0),d1
    b1a2:	|  |         move.l (sp),d0
    b1a4:	|  |         add.l d0,d0
    b1a6:	|  |         add.l d0,d0
    b1a8:	|  |         movea.l d1,a0
    b1aa:	|  |         adda.l d0,a0
    b1ac:	|  |         move.l (a0),d0
    b1ae:	|  |         move.l 12(sp),-(sp)
    b1b2:	|  |         move.l d0,-(sp)
    b1b4:	|  |         jsr b0b6 <saveAnim>
    b1ba:	|  |         addq.l #8,sp
    b1bc:	|  |         tst.w d0
    b1be:	|  |     /-- bne.s b1c4 <saveCostume+0x44>
    b1c0:	|  |     |   clr.w d0
    b1c2:	|  |  /--|-- bra.s b1da <saveCostume+0x5a>
	for (a = 0; a < cossy -> numDirections * 3; a ++) {
    b1c4:	|  |  |  \-> addq.l #1,(sp)
    b1c6:	|  \--|----> movea.l 8(sp),a0
    b1ca:	|     |      move.l 4(a0),d1
    b1ce:	|     |      move.l d1,d0
    b1d0:	|     |      add.l d0,d0
    b1d2:	|     |      add.l d1,d0
    b1d4:	|     |      cmp.l (sp),d0
    b1d6:	\-----|----- bgt.s b19c <saveCostume+0x1c>
	}

	return TRUE;
    b1d8:	      |      moveq #1,d0
}
    b1da:	      \----> addq.l #4,sp
    b1dc:	             rts

0000b1de <savePeople>:

BOOL savePeople (BPTR fp) {
    b1de:	             lea -144(sp),sp
    b1e2:	             move.l a6,-(sp)
    b1e4:	             move.l d2,-(sp)
	struct onScreenPerson * me = allPeople;
    b1e6:	             move.l 1cae6 <allPeople>,148(sp)
	int countPeople = 0, a;
    b1ee:	             clr.l 144(sp)

	putSigned (scaleHorizon, fp);
    b1f2:	             move.w 1c414 <scaleHorizon>,d0
    b1f8:	             movea.w d0,a0
    b1fa:	             move.l 156(sp),-(sp)
    b1fe:	             move.l a0,-(sp)
    b200:	             jsr a9c <putSigned>
    b206:	             addq.l #8,sp
	putSigned (scaleDivide, fp);
    b208:	             move.w 1c416 <scaleDivide>,d0
    b20e:	             movea.w d0,a0
    b210:	             move.l 156(sp),-(sp)
    b214:	             move.l a0,-(sp)
    b216:	             jsr a9c <putSigned>
    b21c:	             addq.l #8,sp

	while (me) {
    b21e:	         /-- bra.s b22e <savePeople+0x50>
		countPeople ++;
    b220:	      /--|-> addq.l #1,144(sp)
		me = me -> next;
    b224:	      |  |   movea.l 148(sp),a0
    b228:	      |  |   move.l 36(a0),148(sp)
	while (me) {
    b22e:	      |  \-> tst.l 148(sp)
    b232:	      \----- bne.s b220 <savePeople+0x42>
	}

	put2bytes (countPeople, fp);
    b234:	             move.l 156(sp),-(sp)
    b238:	             move.l 148(sp),-(sp)
    b23c:	             jsr 8d0 <put2bytes>
    b242:	             addq.l #8,sp

	me = allPeople;
    b244:	             move.l 1cae6 <allPeople>,148(sp)
	for (a = 0; a < countPeople; a ++) {
    b24c:	             clr.l 140(sp)
    b250:	   /-------- bra.w b6a8 <savePeople+0x4ca>

		putFloat (me -> x, fp);
    b254:	/--|-------> movea.l 148(sp),a0
    b258:	|  |         move.l (a0),d0
    b25a:	|  |         move.l 156(sp),-(sp)
    b25e:	|  |         move.l d0,-(sp)
    b260:	|  |         jsr a46 <putFloat>
    b266:	|  |         addq.l #8,sp
		putFloat (me -> y, fp);
    b268:	|  |         movea.l 148(sp),a0
    b26c:	|  |         move.l 4(a0),d0
    b270:	|  |         move.l 156(sp),-(sp)
    b274:	|  |         move.l d0,-(sp)
    b276:	|  |         jsr a46 <putFloat>
    b27c:	|  |         addq.l #8,sp

		saveCostume (me -> myPersona, fp);
    b27e:	|  |         movea.l 148(sp),a0
    b282:	|  |         move.l 80(a0),d0
    b286:	|  |         move.l 156(sp),-(sp)
    b28a:	|  |         move.l d0,-(sp)
    b28c:	|  |         jsr b180 <saveCostume>
    b292:	|  |         addq.l #8,sp
		saveAnim (me -> myAnim, fp);
    b294:	|  |         movea.l 148(sp),a0
    b298:	|  |         move.l 72(a0),d0
    b29c:	|  |         move.l 156(sp),-(sp)
    b2a0:	|  |         move.l d0,-(sp)
    b2a2:	|  |         jsr b0b6 <saveAnim>
    b2a8:	|  |         addq.l #8,sp
		FPutC( fp, me -> myAnim == me -> lastUsedAnim);
    b2aa:	|  |         move.l 156(sp),136(sp)
    b2b0:	|  |         movea.l 148(sp),a0
    b2b4:	|  |         move.l 72(a0),d1
    b2b8:	|  |         movea.l 148(sp),a0
    b2bc:	|  |         move.l 76(a0),d0
    b2c0:	|  |         cmp.l d1,d0
    b2c2:	|  |         seq d0
    b2c4:	|  |         neg.b d0
    b2c6:	|  |         move.b d0,d0
    b2c8:	|  |         andi.l #255,d0
    b2ce:	|  |         move.l d0,132(sp)
    b2d2:	|  |         move.l 1ca8a <DOSBase>,d0
    b2d8:	|  |         movea.l d0,a6
    b2da:	|  |         move.l 136(sp),d1
    b2de:	|  |         move.l 132(sp),d2
    b2e2:	|  |         jsr -312(a6)
    b2e6:	|  |         move.l d0,128(sp)

		putFloat (me -> scale, fp);
    b2ea:	|  |         movea.l 148(sp),a0
    b2ee:	|  |         move.l 32(a0),d0
    b2f2:	|  |         move.l 156(sp),-(sp)
    b2f6:	|  |         move.l d0,-(sp)
    b2f8:	|  |         jsr a46 <putFloat>
    b2fe:	|  |         addq.l #8,sp

		put2bytes (me -> extra, fp);
    b300:	|  |         movea.l 148(sp),a0
    b304:	|  |         move.l 118(a0),d0
    b308:	|  |         move.l 156(sp),-(sp)
    b30c:	|  |         move.l d0,-(sp)
    b30e:	|  |         jsr 8d0 <put2bytes>
    b314:	|  |         addq.l #8,sp
		put2bytes (me -> height, fp);
    b316:	|  |         movea.l 148(sp),a0
    b31a:	|  |         move.l 20(a0),d0
    b31e:	|  |         move.l 156(sp),-(sp)
    b322:	|  |         move.l d0,-(sp)
    b324:	|  |         jsr 8d0 <put2bytes>
    b32a:	|  |         addq.l #8,sp
		put2bytes (me -> walkToX, fp);
    b32c:	|  |         movea.l 148(sp),a0
    b330:	|  |         move.l 40(a0),d0
    b334:	|  |         move.l 156(sp),-(sp)
    b338:	|  |         move.l d0,-(sp)
    b33a:	|  |         jsr 8d0 <put2bytes>
    b340:	|  |         addq.l #8,sp
		put2bytes (me -> walkToY, fp);
    b342:	|  |         movea.l 148(sp),a0
    b346:	|  |         move.l 44(a0),d0
    b34a:	|  |         move.l 156(sp),-(sp)
    b34e:	|  |         move.l d0,-(sp)
    b350:	|  |         jsr 8d0 <put2bytes>
    b356:	|  |         addq.l #8,sp
		put2bytes (me -> thisStepX, fp);
    b358:	|  |         movea.l 148(sp),a0
    b35c:	|  |         move.l 48(a0),d0
    b360:	|  |         move.l 156(sp),-(sp)
    b364:	|  |         move.l d0,-(sp)
    b366:	|  |         jsr 8d0 <put2bytes>
    b36c:	|  |         addq.l #8,sp
		put2bytes (me -> thisStepY, fp);
    b36e:	|  |         movea.l 148(sp),a0
    b372:	|  |         move.l 52(a0),d0
    b376:	|  |         move.l 156(sp),-(sp)
    b37a:	|  |         move.l d0,-(sp)
    b37c:	|  |         jsr 8d0 <put2bytes>
    b382:	|  |         addq.l #8,sp
		put2bytes (me -> frameNum, fp);
    b384:	|  |         movea.l 148(sp),a0
    b388:	|  |         move.l 84(a0),d0
    b38c:	|  |         move.l 156(sp),-(sp)
    b390:	|  |         move.l d0,-(sp)
    b392:	|  |         jsr 8d0 <put2bytes>
    b398:	|  |         addq.l #8,sp
		put2bytes (me -> frameTick, fp);
    b39a:	|  |         movea.l 148(sp),a0
    b39e:	|  |         move.l 88(a0),d0
    b3a2:	|  |         move.l 156(sp),-(sp)
    b3a6:	|  |         move.l d0,-(sp)
    b3a8:	|  |         jsr 8d0 <put2bytes>
    b3ae:	|  |         addq.l #8,sp
		put2bytes (me -> walkSpeed, fp);
    b3b0:	|  |         movea.l 148(sp),a0
    b3b4:	|  |         move.l 28(a0),d0
    b3b8:	|  |         move.l 156(sp),-(sp)
    b3bc:	|  |         move.l d0,-(sp)
    b3be:	|  |         jsr 8d0 <put2bytes>
    b3c4:	|  |         addq.l #8,sp
		put2bytes (me -> spinSpeed, fp);
    b3c6:	|  |         movea.l 148(sp),a0
    b3ca:	|  |         move.l 122(a0),d0
    b3ce:	|  |         move.l 156(sp),-(sp)
    b3d2:	|  |         move.l d0,-(sp)
    b3d4:	|  |         jsr 8d0 <put2bytes>
    b3da:	|  |         addq.l #8,sp
		putSigned (me -> floaty, fp);
    b3dc:	|  |         movea.l 148(sp),a0
    b3e0:	|  |         move.l 24(a0),d0
    b3e4:	|  |         move.l d0,d0
    b3e6:	|  |         movea.w d0,a0
    b3e8:	|  |         move.l 156(sp),-(sp)
    b3ec:	|  |         move.l a0,-(sp)
    b3ee:	|  |         jsr a9c <putSigned>
    b3f4:	|  |         addq.l #8,sp
		FPutC (fp, me -> show);
    b3f6:	|  |         move.l 156(sp),124(sp)
    b3fc:	|  |         movea.l 148(sp),a0
    b400:	|  |         move.w 104(a0),d0
    b404:	|  |         movea.w d0,a0
    b406:	|  |         move.l a0,120(sp)
    b40a:	|  |         move.l 1ca8a <DOSBase>,d0
    b410:	|  |         movea.l d0,a6
    b412:	|  |         move.l 124(sp),d1
    b416:	|  |         move.l 120(sp),d2
    b41a:	|  |         jsr -312(a6)
    b41e:	|  |         move.l d0,116(sp)
		FPutC (fp, me -> walking);
    b422:	|  |         move.l 156(sp),112(sp)
    b428:	|  |         movea.l 148(sp),a0
    b42c:	|  |         move.w 64(a0),d0
    b430:	|  |         movea.w d0,a0
    b432:	|  |         move.l a0,108(sp)
    b436:	|  |         move.l 1ca8a <DOSBase>,d0
    b43c:	|  |         movea.l d0,a6
    b43e:	|  |         move.l 112(sp),d1
    b442:	|  |         move.l 108(sp),d2
    b446:	|  |         jsr -312(a6)
    b44a:	|  |         move.l d0,104(sp)
		FPutC (fp, me -> spinning);
    b44e:	|  |         move.l 156(sp),100(sp)
    b454:	|  |         movea.l 148(sp),a0
    b458:	|  |         move.w 66(a0),d0
    b45c:	|  |         movea.w d0,a0
    b45e:	|  |         move.l a0,96(sp)
    b462:	|  |         move.l 1ca8a <DOSBase>,d0
    b468:	|  |         movea.l d0,a6
    b46a:	|  |         move.l 100(sp),d1
    b46e:	|  |         move.l 96(sp),d2
    b472:	|  |         jsr -312(a6)
    b476:	|  |         move.l d0,92(sp)
		if (me -> continueAfterWalking) {
    b47a:	|  |         movea.l 148(sp),a0
    b47e:	|  |         move.l 68(a0),d0
    b482:	|  |  /----- beq.s b4c0 <savePeople+0x2e2>
			FPutC (fp, 1);
    b484:	|  |  |      move.l 156(sp),76(sp)
    b48a:	|  |  |      moveq #1,d0
    b48c:	|  |  |      move.l d0,72(sp)
    b490:	|  |  |      move.l 1ca8a <DOSBase>,d0
    b496:	|  |  |      movea.l d0,a6
    b498:	|  |  |      move.l 76(sp),d1
    b49c:	|  |  |      move.l 72(sp),d2
    b4a0:	|  |  |      jsr -312(a6)
    b4a4:	|  |  |      move.l d0,68(sp)
			saveFunction (me -> continueAfterWalking, fp);
    b4a8:	|  |  |      movea.l 148(sp),a0
    b4ac:	|  |  |      move.l 68(a0),d0
    b4b0:	|  |  |      move.l 156(sp),-(sp)
    b4b4:	|  |  |      move.l d0,-(sp)
    b4b6:	|  |  |      jsr c6da <saveFunction>
    b4bc:	|  |  |      addq.l #8,sp
    b4be:	|  |  |  /-- bra.s b4e4 <savePeople+0x306>
		} else {
			FPutC (fp, 1);
    b4c0:	|  |  \--|-> move.l 156(sp),88(sp)
    b4c6:	|  |     |   moveq #1,d0
    b4c8:	|  |     |   move.l d0,84(sp)
    b4cc:	|  |     |   move.l 1ca8a <DOSBase>,d0
    b4d2:	|  |     |   movea.l d0,a6
    b4d4:	|  |     |   move.l 88(sp),d1
    b4d8:	|  |     |   move.l 84(sp),d2
    b4dc:	|  |     |   jsr -312(a6)
    b4e0:	|  |     |   move.l d0,80(sp)
		}
		put2bytes (me -> direction, fp);
    b4e4:	|  |     \-> movea.l 148(sp),a0
    b4e8:	|  |         move.l 106(a0),d0
    b4ec:	|  |         move.l 156(sp),-(sp)
    b4f0:	|  |         move.l d0,-(sp)
    b4f2:	|  |         jsr 8d0 <put2bytes>
    b4f8:	|  |         addq.l #8,sp
		put2bytes (me -> angle, fp);
    b4fa:	|  |         movea.l 148(sp),a0
    b4fe:	|  |         move.l 92(a0),d0
    b502:	|  |         move.l 156(sp),-(sp)
    b506:	|  |         move.l d0,-(sp)
    b508:	|  |         jsr 8d0 <put2bytes>
    b50e:	|  |         addq.l #8,sp
		put2bytes (me -> angleOffset, fp);
    b510:	|  |         movea.l 148(sp),a0
    b514:	|  |         move.l 100(a0),d0
    b518:	|  |         move.l 156(sp),-(sp)
    b51c:	|  |         move.l d0,-(sp)
    b51e:	|  |         jsr 8d0 <put2bytes>
    b524:	|  |         addq.l #8,sp
		put2bytes (me -> wantAngle, fp);
    b526:	|  |         movea.l 148(sp),a0
    b52a:	|  |         move.l 96(a0),d0
    b52e:	|  |         move.l 156(sp),-(sp)
    b532:	|  |         move.l d0,-(sp)
    b534:	|  |         jsr 8d0 <put2bytes>
    b53a:	|  |         addq.l #8,sp
		putSigned (me -> directionWhenDoneWalking, fp);
    b53c:	|  |         movea.l 148(sp),a0
    b540:	|  |         move.l 110(a0),d0
    b544:	|  |         move.l d0,d0
    b546:	|  |         movea.w d0,a0
    b548:	|  |         move.l 156(sp),-(sp)
    b54c:	|  |         move.l a0,-(sp)
    b54e:	|  |         jsr a9c <putSigned>
    b554:	|  |         addq.l #8,sp
		putSigned (me -> inPoly, fp);
    b556:	|  |         movea.l 148(sp),a0
    b55a:	|  |         move.l 56(a0),d0
    b55e:	|  |         move.l d0,d0
    b560:	|  |         movea.w d0,a0
    b562:	|  |         move.l 156(sp),-(sp)
    b566:	|  |         move.l a0,-(sp)
    b568:	|  |         jsr a9c <putSigned>
    b56e:	|  |         addq.l #8,sp
		putSigned (me -> walkToPoly, fp);
    b570:	|  |         movea.l 148(sp),a0
    b574:	|  |         move.l 60(a0),d0
    b578:	|  |         move.l d0,d0
    b57a:	|  |         movea.w d0,a0
    b57c:	|  |         move.l 156(sp),-(sp)
    b580:	|  |         move.l a0,-(sp)
    b582:	|  |         jsr a9c <putSigned>
    b588:	|  |         addq.l #8,sp

		FPutC (fp, me -> r);
    b58a:	|  |         move.l 156(sp),64(sp)
    b590:	|  |         movea.l 148(sp),a0
    b594:	|  |         move.b 126(a0),d0
    b598:	|  |         move.b d0,d0
    b59a:	|  |         andi.l #255,d0
    b5a0:	|  |         move.l d0,60(sp)
    b5a4:	|  |         move.l 1ca8a <DOSBase>,d0
    b5aa:	|  |         movea.l d0,a6
    b5ac:	|  |         move.l 64(sp),d1
    b5b0:	|  |         move.l 60(sp),d2
    b5b4:	|  |         jsr -312(a6)
    b5b8:	|  |         move.l d0,56(sp)
		FPutC (fp, me -> g);
    b5bc:	|  |         move.l 156(sp),52(sp)
    b5c2:	|  |         movea.l 148(sp),a0
    b5c6:	|  |         move.b 127(a0),d0
    b5ca:	|  |         move.b d0,d0
    b5cc:	|  |         andi.l #255,d0
    b5d2:	|  |         move.l d0,48(sp)
    b5d6:	|  |         move.l 1ca8a <DOSBase>,d0
    b5dc:	|  |         movea.l d0,a6
    b5de:	|  |         move.l 52(sp),d1
    b5e2:	|  |         move.l 48(sp),d2
    b5e6:	|  |         jsr -312(a6)
    b5ea:	|  |         move.l d0,44(sp)
		FPutC (fp, me -> b);
    b5ee:	|  |         move.l 156(sp),40(sp)
    b5f4:	|  |         movea.l 148(sp),a0
    b5f8:	|  |         move.b 128(a0),d0
    b5fc:	|  |         move.b d0,d0
    b5fe:	|  |         andi.l #255,d0
    b604:	|  |         move.l d0,36(sp)
    b608:	|  |         move.l 1ca8a <DOSBase>,d0
    b60e:	|  |         movea.l d0,a6
    b610:	|  |         move.l 40(sp),d1
    b614:	|  |         move.l 36(sp),d2
    b618:	|  |         jsr -312(a6)
    b61c:	|  |         move.l d0,32(sp)
		FPutC (fp, me -> colourmix);
    b620:	|  |         move.l 156(sp),28(sp)
    b626:	|  |         movea.l 148(sp),a0
    b62a:	|  |         move.b 129(a0),d0
    b62e:	|  |         move.b d0,d0
    b630:	|  |         andi.l #255,d0
    b636:	|  |         move.l d0,24(sp)
    b63a:	|  |         move.l 1ca8a <DOSBase>,d0
    b640:	|  |         movea.l d0,a6
    b642:	|  |         move.l 28(sp),d1
    b646:	|  |         move.l 24(sp),d2
    b64a:	|  |         jsr -312(a6)
    b64e:	|  |         move.l d0,20(sp)
		FPutC (fp, me -> transparency);
    b652:	|  |         move.l 156(sp),16(sp)
    b658:	|  |         movea.l 148(sp),a0
    b65c:	|  |         move.b 130(a0),d0
    b660:	|  |         move.b d0,d0
    b662:	|  |         andi.l #255,d0
    b668:	|  |         move.l d0,12(sp)
    b66c:	|  |         move.l 1ca8a <DOSBase>,d0
    b672:	|  |         movea.l d0,a6
    b674:	|  |         move.l 16(sp),d1
    b678:	|  |         move.l 12(sp),d2
    b67c:	|  |         jsr -312(a6)
    b680:	|  |         move.l d0,8(sp)
		
		saveObjectRef (me -> thisType, fp);
    b684:	|  |         movea.l 148(sp),a0
    b688:	|  |         move.l 114(a0),d0
    b68c:	|  |         move.l 156(sp),-(sp)
    b690:	|  |         move.l d0,-(sp)
    b692:	|  |         jsr da98 <saveObjectRef>
    b698:	|  |         addq.l #8,sp

		me = me -> next;
    b69a:	|  |         movea.l 148(sp),a0
    b69e:	|  |         move.l 36(a0),148(sp)
	for (a = 0; a < countPeople; a ++) {
    b6a4:	|  |         addq.l #1,140(sp)
    b6a8:	|  \-------> movea.l 140(sp),a0
    b6ac:	|            cmpa.l 144(sp),a0
    b6b0:	\----------- blt.w b254 <savePeople+0x76>
	}
	return TRUE;
    b6b4:	             moveq #1,d0
}
    b6b6:	             move.l (sp)+,d2
    b6b8:	             movea.l (sp)+,a6
    b6ba:	             lea 144(sp),sp
    b6be:	             rts

0000b6c0 <setBankFile>:

void setBankFile (struct personaAnimation * newP, struct loadedSpriteBank * sB) { 
	newP -> theSprites = sB; 
    b6c0:	movea.l 4(sp),a0
    b6c4:	move.l 8(sp),(a0)
}
    b6c8:	nop
    b6ca:	rts

0000b6cc <setDrawMode>:


void setDrawMode (int h, int ob) {
    b6cc:	       subq.l #4,sp
	struct onScreenPerson * moveMe = findPerson (ob);
    b6ce:	       move.l 12(sp),-(sp)
    b6d2:	       jsr a75a <findPerson>
    b6d8:	       addq.l #4,sp
    b6da:	       move.l d0,(sp)
	if (! moveMe) return;
    b6dc:	/----- beq.s b6f0 <setDrawMode+0x24>
		
	setMyDrawMode (moveMe, h);
    b6de:	|      move.l 8(sp),-(sp)
    b6e2:	|      move.l 4(sp),-(sp)
    b6e6:	|      jsr b6f6 <setMyDrawMode>
    b6ec:	|      addq.l #8,sp
    b6ee:	|  /-- bra.s b6f2 <setDrawMode+0x26>
	if (! moveMe) return;
    b6f0:	\--|-> nop
}
    b6f2:	   \-> addq.l #4,sp
    b6f4:	       rts

0000b6f6 <setMyDrawMode>:
	drawModeInvisible,
	numDrawModes
};

void setMyDrawMode (struct onScreenPerson *moveMe, int h) {
	switch (h) {
    b6f6:	       moveq #19,d0
    b6f8:	       cmp.l 8(sp),d0
    b6fc:	/----- bcs.w bbd4 <setMyDrawMode+0x4de>
    b700:	|      move.l 8(sp),d0
    b704:	|      add.l d0,d0
    b706:	|      movea.l d0,a0
    b708:	|      adda.l #46868,a0
    b70e:	|      move.w (a0),d0
    b710:	|      jmp (b714 <setMyDrawMode+0x1e>,pc,d0.w)
    b714:	|      .short 0x04c0
    b716:	|      ori.l #6684712,-(a4)
    b71c:	|      btst d0,-(a0)
    b71e:	|      bchg d0,(a6)+
    b720:	|      bclr d0,(a4)+
    b722:	|      bset d0,(a2)+
    b724:	|      andi.b #84,(a6)
    b728:	|      andi.l #55575312,(a2)
    b72e:	|      .short 0x02d0
    b730:	|      bclr d1,(a0)
    b732:	|      .short 0x044a
    b734:	|      .short 0x040c
    b736:	|      movep.l d1,1158(a6)
    b73a:	|      .short 0x00e2
		case drawModeTransparent3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b73c:	|      movea.l 4(sp),a0
    b740:	|      clr.b 128(a0)
    b744:	|      movea.l 4(sp),a0
    b748:	|      move.b 128(a0),d0
    b74c:	|      movea.l 4(sp),a0
    b750:	|      move.b d0,127(a0)
    b754:	|      movea.l 4(sp),a0
    b758:	|      move.b 127(a0),d0
    b75c:	|      movea.l 4(sp),a0
    b760:	|      move.b d0,126(a0)
			moveMe->colourmix = 0;
    b764:	|      movea.l 4(sp),a0
    b768:	|      clr.b 129(a0)
			moveMe->transparency = 64;
    b76c:	|      movea.l 4(sp),a0
    b770:	|      move.b #64,130(a0)
			break;
    b776:	|  /-- bra.w bc0e <setMyDrawMode+0x518>
		case drawModeTransparent2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b77a:	|  |   movea.l 4(sp),a0
    b77e:	|  |   clr.b 128(a0)
    b782:	|  |   movea.l 4(sp),a0
    b786:	|  |   move.b 128(a0),d0
    b78a:	|  |   movea.l 4(sp),a0
    b78e:	|  |   move.b d0,127(a0)
    b792:	|  |   movea.l 4(sp),a0
    b796:	|  |   move.b 127(a0),d0
    b79a:	|  |   movea.l 4(sp),a0
    b79e:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    b7a2:	|  |   movea.l 4(sp),a0
    b7a6:	|  |   clr.b 129(a0)
			moveMe->transparency = 128;
    b7aa:	|  |   movea.l 4(sp),a0
    b7ae:	|  |   move.b #-128,130(a0)
			break;
    b7b4:	|  +-- bra.w bc0e <setMyDrawMode+0x518>
		case drawModeTransparent1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b7b8:	|  |   movea.l 4(sp),a0
    b7bc:	|  |   clr.b 128(a0)
    b7c0:	|  |   movea.l 4(sp),a0
    b7c4:	|  |   move.b 128(a0),d0
    b7c8:	|  |   movea.l 4(sp),a0
    b7cc:	|  |   move.b d0,127(a0)
    b7d0:	|  |   movea.l 4(sp),a0
    b7d4:	|  |   move.b 127(a0),d0
    b7d8:	|  |   movea.l 4(sp),a0
    b7dc:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    b7e0:	|  |   movea.l 4(sp),a0
    b7e4:	|  |   clr.b 129(a0)
			moveMe->transparency = 192;
    b7e8:	|  |   movea.l 4(sp),a0
    b7ec:	|  |   move.b #-64,130(a0)
			break;
    b7f2:	|  +-- bra.w bc0e <setMyDrawMode+0x518>
		case drawModeInvisible:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b7f6:	|  |   movea.l 4(sp),a0
    b7fa:	|  |   clr.b 128(a0)
    b7fe:	|  |   movea.l 4(sp),a0
    b802:	|  |   move.b 128(a0),d0
    b806:	|  |   movea.l 4(sp),a0
    b80a:	|  |   move.b d0,127(a0)
    b80e:	|  |   movea.l 4(sp),a0
    b812:	|  |   move.b 127(a0),d0
    b816:	|  |   movea.l 4(sp),a0
    b81a:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    b81e:	|  |   movea.l 4(sp),a0
    b822:	|  |   clr.b 129(a0)
			moveMe->transparency = 254;
    b826:	|  |   movea.l 4(sp),a0
    b82a:	|  |   move.b #-2,130(a0)
			break;
    b830:	|  +-- bra.w bc0e <setMyDrawMode+0x518>
		case drawModeDark1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b834:	|  |   movea.l 4(sp),a0
    b838:	|  |   clr.b 128(a0)
    b83c:	|  |   movea.l 4(sp),a0
    b840:	|  |   move.b 128(a0),d0
    b844:	|  |   movea.l 4(sp),a0
    b848:	|  |   move.b d0,127(a0)
    b84c:	|  |   movea.l 4(sp),a0
    b850:	|  |   move.b 127(a0),d0
    b854:	|  |   movea.l 4(sp),a0
    b858:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    b85c:	|  |   movea.l 4(sp),a0
    b860:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    b866:	|  |   movea.l 4(sp),a0
    b86a:	|  |   clr.b 130(a0)
			break;
    b86e:	|  +-- bra.w bc0e <setMyDrawMode+0x518>
		case drawModeDark2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b872:	|  |   movea.l 4(sp),a0
    b876:	|  |   clr.b 128(a0)
    b87a:	|  |   movea.l 4(sp),a0
    b87e:	|  |   move.b 128(a0),d0
    b882:	|  |   movea.l 4(sp),a0
    b886:	|  |   move.b d0,127(a0)
    b88a:	|  |   movea.l 4(sp),a0
    b88e:	|  |   move.b 127(a0),d0
    b892:	|  |   movea.l 4(sp),a0
    b896:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    b89a:	|  |   movea.l 4(sp),a0
    b89e:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    b8a4:	|  |   movea.l 4(sp),a0
    b8a8:	|  |   clr.b 130(a0)
			break;
    b8ac:	|  +-- bra.w bc0e <setMyDrawMode+0x518>
		case drawModeDark3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b8b0:	|  |   movea.l 4(sp),a0
    b8b4:	|  |   clr.b 128(a0)
    b8b8:	|  |   movea.l 4(sp),a0
    b8bc:	|  |   move.b 128(a0),d0
    b8c0:	|  |   movea.l 4(sp),a0
    b8c4:	|  |   move.b d0,127(a0)
    b8c8:	|  |   movea.l 4(sp),a0
    b8cc:	|  |   move.b 127(a0),d0
    b8d0:	|  |   movea.l 4(sp),a0
    b8d4:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    b8d8:	|  |   movea.l 4(sp),a0
    b8dc:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    b8e2:	|  |   movea.l 4(sp),a0
    b8e6:	|  |   clr.b 130(a0)
			break;
    b8ea:	|  +-- bra.w bc0e <setMyDrawMode+0x518>
		case drawModeBlack:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b8ee:	|  |   movea.l 4(sp),a0
    b8f2:	|  |   clr.b 128(a0)
    b8f6:	|  |   movea.l 4(sp),a0
    b8fa:	|  |   move.b 128(a0),d0
    b8fe:	|  |   movea.l 4(sp),a0
    b902:	|  |   move.b d0,127(a0)
    b906:	|  |   movea.l 4(sp),a0
    b90a:	|  |   move.b 127(a0),d0
    b90e:	|  |   movea.l 4(sp),a0
    b912:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b916:	|  |   movea.l 4(sp),a0
    b91a:	|  |   st 129(a0)
			moveMe->transparency = 0;
    b91e:	|  |   movea.l 4(sp),a0
    b922:	|  |   clr.b 130(a0)
			break;
    b926:	|  +-- bra.w bc0e <setMyDrawMode+0x518>
		case drawModeShadow1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b92a:	|  |   movea.l 4(sp),a0
    b92e:	|  |   clr.b 128(a0)
    b932:	|  |   movea.l 4(sp),a0
    b936:	|  |   move.b 128(a0),d0
    b93a:	|  |   movea.l 4(sp),a0
    b93e:	|  |   move.b d0,127(a0)
    b942:	|  |   movea.l 4(sp),a0
    b946:	|  |   move.b 127(a0),d0
    b94a:	|  |   movea.l 4(sp),a0
    b94e:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b952:	|  |   movea.l 4(sp),a0
    b956:	|  |   st 129(a0)
			moveMe->transparency = 64;
    b95a:	|  |   movea.l 4(sp),a0
    b95e:	|  |   move.b #64,130(a0)
			break;
    b964:	|  +-- bra.w bc0e <setMyDrawMode+0x518>
		case drawModeShadow2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b968:	|  |   movea.l 4(sp),a0
    b96c:	|  |   clr.b 128(a0)
    b970:	|  |   movea.l 4(sp),a0
    b974:	|  |   move.b 128(a0),d0
    b978:	|  |   movea.l 4(sp),a0
    b97c:	|  |   move.b d0,127(a0)
    b980:	|  |   movea.l 4(sp),a0
    b984:	|  |   move.b 127(a0),d0
    b988:	|  |   movea.l 4(sp),a0
    b98c:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b990:	|  |   movea.l 4(sp),a0
    b994:	|  |   st 129(a0)
			moveMe->transparency = 128;
    b998:	|  |   movea.l 4(sp),a0
    b99c:	|  |   move.b #-128,130(a0)
			break;
    b9a2:	|  +-- bra.w bc0e <setMyDrawMode+0x518>
		case drawModeShadow3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b9a6:	|  |   movea.l 4(sp),a0
    b9aa:	|  |   clr.b 128(a0)
    b9ae:	|  |   movea.l 4(sp),a0
    b9b2:	|  |   move.b 128(a0),d0
    b9b6:	|  |   movea.l 4(sp),a0
    b9ba:	|  |   move.b d0,127(a0)
    b9be:	|  |   movea.l 4(sp),a0
    b9c2:	|  |   move.b 127(a0),d0
    b9c6:	|  |   movea.l 4(sp),a0
    b9ca:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b9ce:	|  |   movea.l 4(sp),a0
    b9d2:	|  |   st 129(a0)
			moveMe->transparency = 192;
    b9d6:	|  |   movea.l 4(sp),a0
    b9da:	|  |   move.b #-64,130(a0)
			break;
    b9e0:	|  +-- bra.w bc0e <setMyDrawMode+0x518>
		case drawModeFoggy3:
			moveMe->r = moveMe->g = moveMe->b = 128;
    b9e4:	|  |   movea.l 4(sp),a0
    b9e8:	|  |   move.b #-128,128(a0)
    b9ee:	|  |   movea.l 4(sp),a0
    b9f2:	|  |   move.b 128(a0),d0
    b9f6:	|  |   movea.l 4(sp),a0
    b9fa:	|  |   move.b d0,127(a0)
    b9fe:	|  |   movea.l 4(sp),a0
    ba02:	|  |   move.b 127(a0),d0
    ba06:	|  |   movea.l 4(sp),a0
    ba0a:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    ba0e:	|  |   movea.l 4(sp),a0
    ba12:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    ba18:	|  |   movea.l 4(sp),a0
    ba1c:	|  |   clr.b 130(a0)
			break;
    ba20:	|  +-- bra.w bc0e <setMyDrawMode+0x518>
		case drawModeFoggy2:
			moveMe->r = moveMe->g = moveMe->b = 128;
    ba24:	|  |   movea.l 4(sp),a0
    ba28:	|  |   move.b #-128,128(a0)
    ba2e:	|  |   movea.l 4(sp),a0
    ba32:	|  |   move.b 128(a0),d0
    ba36:	|  |   movea.l 4(sp),a0
    ba3a:	|  |   move.b d0,127(a0)
    ba3e:	|  |   movea.l 4(sp),a0
    ba42:	|  |   move.b 127(a0),d0
    ba46:	|  |   movea.l 4(sp),a0
    ba4a:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    ba4e:	|  |   movea.l 4(sp),a0
    ba52:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    ba58:	|  |   movea.l 4(sp),a0
    ba5c:	|  |   clr.b 130(a0)
			break;
    ba60:	|  +-- bra.w bc0e <setMyDrawMode+0x518>
		case drawModeFoggy1:
			moveMe->r = moveMe->g = moveMe->b = 128;
    ba64:	|  |   movea.l 4(sp),a0
    ba68:	|  |   move.b #-128,128(a0)
    ba6e:	|  |   movea.l 4(sp),a0
    ba72:	|  |   move.b 128(a0),d0
    ba76:	|  |   movea.l 4(sp),a0
    ba7a:	|  |   move.b d0,127(a0)
    ba7e:	|  |   movea.l 4(sp),a0
    ba82:	|  |   move.b 127(a0),d0
    ba86:	|  |   movea.l 4(sp),a0
    ba8a:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    ba8e:	|  |   movea.l 4(sp),a0
    ba92:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    ba98:	|  |   movea.l 4(sp),a0
    ba9c:	|  |   clr.b 130(a0)
			break;
    baa0:	|  +-- bra.w bc0e <setMyDrawMode+0x518>
		case drawModeFoggy4:
			moveMe->r = moveMe->g = moveMe->b = 128;
    baa4:	|  |   movea.l 4(sp),a0
    baa8:	|  |   move.b #-128,128(a0)
    baae:	|  |   movea.l 4(sp),a0
    bab2:	|  |   move.b 128(a0),d0
    bab6:	|  |   movea.l 4(sp),a0
    baba:	|  |   move.b d0,127(a0)
    babe:	|  |   movea.l 4(sp),a0
    bac2:	|  |   move.b 127(a0),d0
    bac6:	|  |   movea.l 4(sp),a0
    baca:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    bace:	|  |   movea.l 4(sp),a0
    bad2:	|  |   st 129(a0)
			moveMe->transparency = 0;
    bad6:	|  |   movea.l 4(sp),a0
    bada:	|  |   clr.b 130(a0)
			break;
    bade:	|  +-- bra.w bc0e <setMyDrawMode+0x518>
		case drawModeGlow3:
			moveMe->r = moveMe->g = moveMe->b = 255;
    bae2:	|  |   movea.l 4(sp),a0
    bae6:	|  |   st 128(a0)
    baea:	|  |   movea.l 4(sp),a0
    baee:	|  |   move.b 128(a0),d0
    baf2:	|  |   movea.l 4(sp),a0
    baf6:	|  |   move.b d0,127(a0)
    bafa:	|  |   movea.l 4(sp),a0
    bafe:	|  |   move.b 127(a0),d0
    bb02:	|  |   movea.l 4(sp),a0
    bb06:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    bb0a:	|  |   movea.l 4(sp),a0
    bb0e:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    bb14:	|  |   movea.l 4(sp),a0
    bb18:	|  |   clr.b 130(a0)
			break;
    bb1c:	|  +-- bra.w bc0e <setMyDrawMode+0x518>
		case drawModeGlow2:
			moveMe->r = moveMe->g = moveMe->b = 255;
    bb20:	|  |   movea.l 4(sp),a0
    bb24:	|  |   st 128(a0)
    bb28:	|  |   movea.l 4(sp),a0
    bb2c:	|  |   move.b 128(a0),d0
    bb30:	|  |   movea.l 4(sp),a0
    bb34:	|  |   move.b d0,127(a0)
    bb38:	|  |   movea.l 4(sp),a0
    bb3c:	|  |   move.b 127(a0),d0
    bb40:	|  |   movea.l 4(sp),a0
    bb44:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    bb48:	|  |   movea.l 4(sp),a0
    bb4c:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    bb52:	|  |   movea.l 4(sp),a0
    bb56:	|  |   clr.b 130(a0)
			break;
    bb5a:	|  +-- bra.w bc0e <setMyDrawMode+0x518>
		case drawModeGlow1:
			moveMe->r = moveMe->g = moveMe->b = 255;
    bb5e:	|  |   movea.l 4(sp),a0
    bb62:	|  |   st 128(a0)
    bb66:	|  |   movea.l 4(sp),a0
    bb6a:	|  |   move.b 128(a0),d0
    bb6e:	|  |   movea.l 4(sp),a0
    bb72:	|  |   move.b d0,127(a0)
    bb76:	|  |   movea.l 4(sp),a0
    bb7a:	|  |   move.b 127(a0),d0
    bb7e:	|  |   movea.l 4(sp),a0
    bb82:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    bb86:	|  |   movea.l 4(sp),a0
    bb8a:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    bb90:	|  |   movea.l 4(sp),a0
    bb94:	|  |   clr.b 130(a0)
			break;
    bb98:	|  +-- bra.s bc0e <setMyDrawMode+0x518>
		case drawModeGlow4:
			moveMe->r = moveMe->g = moveMe->b = 255;
    bb9a:	|  |   movea.l 4(sp),a0
    bb9e:	|  |   st 128(a0)
    bba2:	|  |   movea.l 4(sp),a0
    bba6:	|  |   move.b 128(a0),d0
    bbaa:	|  |   movea.l 4(sp),a0
    bbae:	|  |   move.b d0,127(a0)
    bbb2:	|  |   movea.l 4(sp),a0
    bbb6:	|  |   move.b 127(a0),d0
    bbba:	|  |   movea.l 4(sp),a0
    bbbe:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    bbc2:	|  |   movea.l 4(sp),a0
    bbc6:	|  |   st 129(a0)
			moveMe->transparency = 0;
    bbca:	|  |   movea.l 4(sp),a0
    bbce:	|  |   clr.b 130(a0)
			break;
    bbd2:	|  +-- bra.s bc0e <setMyDrawMode+0x518>
		default:
			moveMe->r = moveMe->g = moveMe->b = 0;
    bbd4:	\--|-> movea.l 4(sp),a0
    bbd8:	   |   clr.b 128(a0)
    bbdc:	   |   movea.l 4(sp),a0
    bbe0:	   |   move.b 128(a0),d0
    bbe4:	   |   movea.l 4(sp),a0
    bbe8:	   |   move.b d0,127(a0)
    bbec:	   |   movea.l 4(sp),a0
    bbf0:	   |   move.b 127(a0),d0
    bbf4:	   |   movea.l 4(sp),a0
    bbf8:	   |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    bbfc:	   |   movea.l 4(sp),a0
    bc00:	   |   clr.b 129(a0)
			moveMe->transparency = 0;
    bc04:	   |   movea.l 4(sp),a0
    bc08:	   |   clr.b 130(a0)
			break;
    bc0c:	   |   nop
	}
}
    bc0e:	   \-> nop
    bc10:	       rts

0000bc12 <shufflePeople>:

void shufflePeople () {
    bc12:	             lea -20(sp),sp
	struct onScreenPerson ** thisReference = &allPeople;
    bc16:	             move.l #117478,16(sp)
	struct onScreenPerson * A, * B;

	if (!allPeople) return;
    bc1e:	             move.l 1cae6 <allPeople>,d0
    bc24:	/----------- beq.w bcfa <shufflePeople+0xe8>

	while ((*thisReference)->next) {
    bc28:	|     /----- bra.w bcea <shufflePeople+0xd8>
		float y1 = (*thisReference)->y;
    bc2c:	|  /--|----> movea.l 16(sp),a0
    bc30:	|  |  |      movea.l (a0),a0
    bc32:	|  |  |      move.l 4(a0),12(sp)
		if ((*thisReference)->extra & EXTRA_FRONT) y1 += 1000;
    bc38:	|  |  |      movea.l 16(sp),a0
    bc3c:	|  |  |      movea.l (a0),a0
    bc3e:	|  |  |      move.l 118(a0),d0
    bc42:	|  |  |      moveq #1,d1
    bc44:	|  |  |      and.l d1,d0
    bc46:	|  |  |  /-- beq.s bc5e <shufflePeople+0x4c>
    bc48:	|  |  |  |   move.l #1148846080,-(sp)
    bc4e:	|  |  |  |   move.l 16(sp),-(sp)
    bc52:	|  |  |  |   jsr 17554 <__addsf3>
    bc58:	|  |  |  |   addq.l #8,sp
    bc5a:	|  |  |  |   move.l d0,12(sp)

		float y2 = (*thisReference)->next->y;
    bc5e:	|  |  |  \-> movea.l 16(sp),a0
    bc62:	|  |  |      movea.l (a0),a0
    bc64:	|  |  |      movea.l 36(a0),a0
    bc68:	|  |  |      move.l 4(a0),8(sp)
		if ((*thisReference)->next->extra & EXTRA_FRONT) y2 += 1000;
    bc6e:	|  |  |      movea.l 16(sp),a0
    bc72:	|  |  |      movea.l (a0),a0
    bc74:	|  |  |      movea.l 36(a0),a0
    bc78:	|  |  |      move.l 118(a0),d0
    bc7c:	|  |  |      moveq #1,d1
    bc7e:	|  |  |      and.l d1,d0
    bc80:	|  |  |  /-- beq.s bc98 <shufflePeople+0x86>
    bc82:	|  |  |  |   move.l #1148846080,-(sp)
    bc88:	|  |  |  |   move.l 12(sp),-(sp)
    bc8c:	|  |  |  |   jsr 17554 <__addsf3>
    bc92:	|  |  |  |   addq.l #8,sp
    bc94:	|  |  |  |   move.l d0,8(sp)

		if (y1 > y2) {
    bc98:	|  |  |  \-> move.l 8(sp),-(sp)
    bc9c:	|  |  |      move.l 16(sp),-(sp)
    bca0:	|  |  |      jsr 17904 <__gtsf2>
    bca6:	|  |  |      addq.l #8,sp
    bca8:	|  |  |      tst.l d0
    bcaa:	|  |  |  /-- ble.s bcdc <shufflePeople+0xca>
			A = (*thisReference);
    bcac:	|  |  |  |   movea.l 16(sp),a0
    bcb0:	|  |  |  |   move.l (a0),4(sp)
			B = (*thisReference)->next;
    bcb4:	|  |  |  |   movea.l 16(sp),a0
    bcb8:	|  |  |  |   movea.l (a0),a0
    bcba:	|  |  |  |   move.l 36(a0),(sp)
			A->next = B->next;
    bcbe:	|  |  |  |   movea.l (sp),a0
    bcc0:	|  |  |  |   move.l 36(a0),d0
    bcc4:	|  |  |  |   movea.l 4(sp),a0
    bcc8:	|  |  |  |   move.l d0,36(a0)
			B->next = A;
    bccc:	|  |  |  |   movea.l (sp),a0
    bcce:	|  |  |  |   move.l 4(sp),36(a0)
			(*thisReference) = B;
    bcd4:	|  |  |  |   movea.l 16(sp),a0
    bcd8:	|  |  |  |   move.l (sp),(a0)
    bcda:	|  |  +--|-- bra.s bcea <shufflePeople+0xd8>
		} else {
			thisReference = &((*thisReference)->next);
    bcdc:	|  |  |  \-> movea.l 16(sp),a0
    bce0:	|  |  |      move.l (a0),d0
    bce2:	|  |  |      moveq #36,d1
    bce4:	|  |  |      add.l d0,d1
    bce6:	|  |  |      move.l d1,16(sp)
	while ((*thisReference)->next) {
    bcea:	|  |  \----> movea.l 16(sp),a0
    bcee:	|  |         movea.l (a0),a0
    bcf0:	|  |         move.l 36(a0),d0
    bcf4:	|  \-------- bne.w bc2c <shufflePeople+0x1a>
    bcf8:	|        /-- bra.s bcfc <shufflePeople+0xea>
	if (!allPeople) return;
    bcfa:	\--------|-> nop
		}
	}
}
    bcfc:	         \-> lea 20(sp),sp
    bd00:	             rts

0000bd02 <setCharacterWalkSpeed>:


BOOL setCharacterWalkSpeed (int f, int objNum) {
    bd02:	       subq.l #4,sp
	if (f <= 0) return FALSE;
    bd04:	       tst.l 8(sp)
    bd08:	   /-- bgt.s bd0e <setCharacterWalkSpeed+0xc>
    bd0a:	   |   clr.w d0
    bd0c:	/--|-- bra.s bd2c <setCharacterWalkSpeed+0x2a>
	struct onScreenPerson * moveMe = findPerson (objNum);
    bd0e:	|  \-> move.l 12(sp),-(sp)
    bd12:	|      jsr a75a <findPerson>
    bd18:	|      addq.l #4,sp
    bd1a:	|      move.l d0,(sp)
	if (! moveMe) return FALSE;
    bd1c:	|  /-- bne.s bd22 <setCharacterWalkSpeed+0x20>
    bd1e:	|  |   clr.w d0
    bd20:	+--|-- bra.s bd2c <setCharacterWalkSpeed+0x2a>
	moveMe -> walkSpeed = f;
    bd22:	|  \-> movea.l (sp),a0
    bd24:	|      move.l 8(sp),28(a0)
	return TRUE;
    bd2a:	|      moveq #1,d0
}
    bd2c:	\----> addq.l #4,sp
    bd2e:	       rts

0000bd30 <setPersonExtra>:

BOOL setPersonExtra (int thisNum, int extra) {
    bd30:	       subq.l #4,sp
    struct onScreenPerson * thisPerson = findPerson(thisNum);
    bd32:	       move.l 8(sp),-(sp)
    bd36:	       jsr a75a <findPerson>
    bd3c:	       addq.l #4,sp
    bd3e:	       move.l d0,(sp)
    if (thisPerson) {
    bd40:	/----- beq.s bd60 <setPersonExtra+0x30>
        thisPerson -> extra = extra;
    bd42:	|      movea.l (sp),a0
    bd44:	|      move.l 12(sp),118(a0)
        if (extra & EXTRA_NOSCALE) thisPerson -> scale = 1;
    bd4a:	|      moveq #2,d0
    bd4c:	|      and.l 12(sp),d0
    bd50:	|  /-- beq.s bd5c <setPersonExtra+0x2c>
    bd52:	|  |   movea.l (sp),a0
    bd54:	|  |   move.l #1065353216,32(a0)
        return TRUE;
    bd5c:	|  \-> moveq #1,d0
    bd5e:	|  /-- bra.s bd62 <setPersonExtra+0x32>
    }
    return FALSE;
    bd60:	\--|-> clr.w d0
}
    bd62:	   \-> addq.l #4,sp
    bd64:	       rts

0000bd66 <setScale>:


void setScale (short int h, short int d) {
    bd66:	subq.l #4,sp
    bd68:	move.l 8(sp),d1
    bd6c:	move.l 12(sp),d0
    bd70:	move.w d1,d1
    bd72:	move.w d1,2(sp)
    bd76:	move.w d0,d0
    bd78:	move.w d0,(sp)
	scaleHorizon = h;
    bd7a:	move.w 2(sp),1c414 <scaleHorizon>
	scaleDivide = d;
    bd82:	move.w (sp),1c416 <scaleDivide>
}
    bd88:	nop
    bd8a:	addq.l #4,sp
    bd8c:	rts

0000bd8e <setShown>:

void setShown (BOOL h, int ob) {
    bd8e:	    subq.l #8,sp
    bd90:	    move.l 12(sp),d0
    bd94:	    move.w d0,d0
    bd96:	    move.w d0,2(sp)
	struct onScreenPerson * moveMe = findPerson (ob);
    bd9a:	    move.l 16(sp),-(sp)
    bd9e:	    jsr a75a <findPerson>
    bda4:	    addq.l #4,sp
    bda6:	    move.l d0,4(sp)
	if (moveMe) moveMe -> show = h;
    bdaa:	/-- beq.s bdb6 <setShown+0x28>
    bdac:	|   movea.l 4(sp),a0
    bdb0:	|   move.w 2(sp),104(a0)
}
    bdb6:	\-> nop
    bdb8:	    addq.l #8,sp
    bdba:	    rts

0000bdbc <spinStep>:

void spinStep (struct onScreenPerson * thisPerson) {
    bdbc:	       subq.l #8,sp
    bdbe:	       move.l d2,-(sp)
	int diff = (thisPerson->angle + 360) - thisPerson->wantAngle;
    bdc0:	       movea.l 16(sp),a0
    bdc4:	       move.l 92(a0),d0
    bdc8:	       move.l d0,d1
    bdca:	       addi.l #360,d1
    bdd0:	       movea.l 16(sp),a0
    bdd4:	       move.l 96(a0),d0
    bdd8:	       move.l d1,d2
    bdda:	       sub.l d0,d2
    bddc:	       move.l d2,8(sp)
	int eachSlice = thisPerson->spinSpeed ? thisPerson->spinSpeed : (360 / thisPerson->myPersona->numDirections);
    bde0:	       movea.l 16(sp),a0
    bde4:	       move.l 122(a0),d0
    bde8:	   /-- beq.s bdf4 <spinStep+0x38>
    bdea:	   |   movea.l 16(sp),a0
    bdee:	   |   move.l 122(a0),d0
    bdf2:	/--|-- bra.s be0e <spinStep+0x52>
    bdf4:	|  \-> movea.l 16(sp),a0
    bdf8:	|      movea.l 80(a0),a0
    bdfc:	|      move.l 4(a0),d0
    be00:	|      move.l d0,-(sp)
    be02:	|      pea 168 <decodeFilename+0x50>
    be06:	|      jsr 17d98 <__divsi3>
    be0c:	|      addq.l #8,sp
    be0e:	\----> move.l d0,4(sp)
	while (diff > 180) {
    be12:	   /-- bra.s be1c <spinStep+0x60>
		diff -= 360;
    be14:	/--|-> addi.l #-360,8(sp)
	while (diff > 180) {
    be1c:	|  \-> cmpi.l #180,8(sp)
    be24:	\----- bgt.s be14 <spinStep+0x58>
	}

	if (diff >= eachSlice) {
    be26:	       move.l 8(sp),d0
    be2a:	       cmp.l 4(sp),d0
    be2e:	   /-- blt.s be4c <spinStep+0x90>
		turnMeAngle(thisPerson, thisPerson->angle - eachSlice);
    be30:	   |   movea.l 16(sp),a0
    be34:	   |   move.l 92(a0),d0
    be38:	   |   sub.l 4(sp),d0
    be3c:	   |   move.l d0,-(sp)
    be3e:	   |   move.l 20(sp),-(sp)
    be42:	   |   jsr bf2c <turnMeAngle>
    be48:	   |   addq.l #8,sp
		turnMeAngle(thisPerson, thisPerson->angle + eachSlice);
	} else {
		turnMeAngle(thisPerson, thisPerson->wantAngle);
		thisPerson->spinning = FALSE;
	}
}
    be4a:	/--|-- bra.s be92 <spinStep+0xd6>
	} else if (diff <= -eachSlice) {
    be4c:	|  \-> move.l 4(sp),d0
    be50:	|      neg.l d0
    be52:	|      cmp.l 8(sp),d0
    be56:	|  /-- blt.s be74 <spinStep+0xb8>
		turnMeAngle(thisPerson, thisPerson->angle + eachSlice);
    be58:	|  |   movea.l 16(sp),a0
    be5c:	|  |   move.l 92(a0),d0
    be60:	|  |   add.l 4(sp),d0
    be64:	|  |   move.l d0,-(sp)
    be66:	|  |   move.l 20(sp),-(sp)
    be6a:	|  |   jsr bf2c <turnMeAngle>
    be70:	|  |   addq.l #8,sp
}
    be72:	+--|-- bra.s be92 <spinStep+0xd6>
		turnMeAngle(thisPerson, thisPerson->wantAngle);
    be74:	|  \-> movea.l 16(sp),a0
    be78:	|      move.l 96(a0),d0
    be7c:	|      move.l d0,-(sp)
    be7e:	|      move.l 20(sp),-(sp)
    be82:	|      jsr bf2c <turnMeAngle>
    be88:	|      addq.l #8,sp
		thisPerson->spinning = FALSE;
    be8a:	|      movea.l 16(sp),a0
    be8e:	|      clr.w 66(a0)
}
    be92:	\----> nop
    be94:	       move.l (sp)+,d2
    be96:	       addq.l #8,sp
    be98:	       rts

0000be9a <stopPerson>:


BOOL stopPerson (int o) {
    be9a:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(o);
    be9c:	       move.l 8(sp),-(sp)
    bea0:	       jsr a75a <findPerson>
    bea6:	       addq.l #4,sp
    bea8:	       move.l d0,(sp)
    if (moveMe)
    beaa:	/----- beq.s bee8 <stopPerson+0x4e>
        if (moveMe -> continueAfterWalking) {
    beac:	|      movea.l (sp),a0
    beae:	|      move.l 68(a0),d0
    beb2:	+----- beq.s bee8 <stopPerson+0x4e>
            abortFunction(moveMe -> continueAfterWalking);
    beb4:	|      movea.l (sp),a0
    beb6:	|      move.l 68(a0),d0
    beba:	|      move.l d0,-(sp)
    bebc:	|      jsr 484c <abortFunction>
    bec2:	|      addq.l #4,sp
            moveMe -> continueAfterWalking = NULL;
    bec4:	|      movea.l (sp),a0
    bec6:	|      clr.l 68(a0)
            moveMe -> walking = FALSE;
    beca:	|      movea.l (sp),a0
    becc:	|      clr.w 64(a0)
            moveMe -> spinning = FALSE;
    bed0:	|      movea.l (sp),a0
    bed2:	|      clr.w 66(a0)
            setFrames(moveMe, ANI_STAND);
    bed6:	|      clr.l -(sp)
    bed8:	|      move.l 4(sp),-(sp)
    bedc:	|      jsr 82a4 <setFrames>
    bee2:	|      addq.l #8,sp
            return TRUE;
    bee4:	|      moveq #1,d0
    bee6:	|  /-- bra.s beea <stopPerson+0x50>
        }
    return FALSE;
    bee8:	\--|-> clr.w d0
}
    beea:	   \-> addq.l #4,sp
    beec:	       rts

0000beee <timeForAnim>:


int timeForAnim (struct personaAnimation * fram) {
    beee:	       subq.l #8,sp
	int total = 0;
    bef0:	       clr.l 4(sp)
	for (int a = 0; a < fram -> numFrames; a ++) {
    bef4:	       clr.l (sp)
    bef6:	   /-- bra.s bf18 <timeForAnim+0x2a>
		total += fram -> frames[a].howMany;
    bef8:	/--|-> movea.l 12(sp),a0
    befc:	|  |   movea.l 4(a0),a0
    bf00:	|  |   move.l (sp),d1
    bf02:	|  |   move.l d1,d0
    bf04:	|  |   add.l d0,d0
    bf06:	|  |   add.l d1,d0
    bf08:	|  |   add.l d0,d0
    bf0a:	|  |   add.l d0,d0
    bf0c:	|  |   adda.l d0,a0
    bf0e:	|  |   move.l 4(a0),d0
    bf12:	|  |   add.l d0,4(sp)
	for (int a = 0; a < fram -> numFrames; a ++) {
    bf16:	|  |   addq.l #1,(sp)
    bf18:	|  \-> movea.l 12(sp),a0
    bf1c:	|      move.l 8(a0),d0
    bf20:	|      cmp.l (sp),d0
    bf22:	\----- bgt.s bef8 <timeForAnim+0xa>
	}
	return total;
    bf24:	       move.l 4(sp),d0
}
    bf28:	       addq.l #8,sp
    bf2a:	       rts

0000bf2c <turnMeAngle>:

void turnMeAngle (struct onScreenPerson * thisPerson, int direc) {
    bf2c:	       subq.l #4,sp
	int d = thisPerson -> myPersona -> numDirections;
    bf2e:	       movea.l 8(sp),a0
    bf32:	       movea.l 80(a0),a0
    bf36:	       move.l 4(a0),(sp)
	thisPerson -> angle = direc;
    bf3a:	       movea.l 8(sp),a0
    bf3e:	       move.l 12(sp),92(a0)
	direc += (180 / d) + 180 + thisPerson -> angleOffset;
    bf44:	       move.l (sp),-(sp)
    bf46:	       pea b4 <_start+0xb4>
    bf4a:	       jsr 17d98 <__divsi3>
    bf50:	       addq.l #8,sp
    bf52:	       move.l d0,d1
    bf54:	       addi.l #180,d1
    bf5a:	       movea.l 8(sp),a0
    bf5e:	       move.l 100(a0),d0
    bf62:	       add.l d1,d0
    bf64:	       add.l d0,12(sp)
	while (direc >= 360) direc -= 360;
    bf68:	   /-- bra.s bf72 <turnMeAngle+0x46>
    bf6a:	/--|-> addi.l #-360,12(sp)
    bf72:	|  \-> cmpi.l #359,12(sp)
    bf7a:	\----- bgt.s bf6a <turnMeAngle+0x3e>
	thisPerson -> direction = (direc * d) / 360;
    bf7c:	       move.l (sp),-(sp)
    bf7e:	       move.l 16(sp),-(sp)
    bf82:	       jsr 17d1a <__mulsi3>
    bf88:	       addq.l #8,sp
    bf8a:	       pea 168 <decodeFilename+0x50>
    bf8e:	       move.l d0,-(sp)
    bf90:	       jsr 17d98 <__divsi3>
    bf96:	       addq.l #8,sp
    bf98:	       movea.l 8(sp),a0
    bf9c:	       move.l d0,106(a0)
}
    bfa0:	       nop
    bfa2:	       addq.l #4,sp
    bfa4:	       rts

0000bfa6 <turnPersonToFace>:

BOOL turnPersonToFace (int thisNum, int direc) {
    bfa6:	          subq.l #4,sp
    struct onScreenPerson * thisPerson = findPerson(thisNum);
    bfa8:	          move.l 8(sp),-(sp)
    bfac:	          jsr a75a <findPerson>
    bfb2:	          addq.l #4,sp
    bfb4:	          move.l d0,(sp)
    if (thisPerson) {
    bfb6:	/-------- beq.s c016 <turnPersonToFace+0x70>
        if (thisPerson -> continueAfterWalking) abortFunction(thisPerson -> continueAfterWalking);
    bfb8:	|         movea.l (sp),a0
    bfba:	|         move.l 68(a0),d0
    bfbe:	|     /-- beq.s bfd0 <turnPersonToFace+0x2a>
    bfc0:	|     |   movea.l (sp),a0
    bfc2:	|     |   move.l 68(a0),d0
    bfc6:	|     |   move.l d0,-(sp)
    bfc8:	|     |   jsr 484c <abortFunction>
    bfce:	|     |   addq.l #4,sp
        thisPerson -> continueAfterWalking = NULL;
    bfd0:	|     \-> movea.l (sp),a0
    bfd2:	|         clr.l 68(a0)
        thisPerson -> walking = FALSE;
    bfd6:	|         movea.l (sp),a0
    bfd8:	|         clr.w 64(a0)
        thisPerson -> spinning = FALSE;
    bfdc:	|         movea.l (sp),a0
    bfde:	|         clr.w 66(a0)
        turnMeAngle(thisPerson, direc);
    bfe2:	|         move.l 12(sp),-(sp)
    bfe6:	|         move.l 4(sp),-(sp)
    bfea:	|         jsr bf2c <turnMeAngle>
    bff0:	|         addq.l #8,sp
        setFrames(thisPerson, (thisPerson == speech->currentTalker) ? ANI_TALK : ANI_STAND);
    bff2:	|         movea.l 1cade <speech>,a0
    bff8:	|         move.l (a0),d0
    bffa:	|         cmp.l (sp),d0
    bffc:	|  /----- bne.s c002 <turnPersonToFace+0x5c>
    bffe:	|  |      moveq #2,d0
    c000:	|  |  /-- bra.s c004 <turnPersonToFace+0x5e>
    c002:	|  \--|-> moveq #0,d0
    c004:	|     \-> move.l d0,-(sp)
    c006:	|         move.l 4(sp),-(sp)
    c00a:	|         jsr 82a4 <setFrames>
    c010:	|         addq.l #8,sp
        return TRUE;
    c012:	|         moveq #1,d0
    c014:	|     /-- bra.s c018 <turnPersonToFace+0x72>
    }
    return FALSE;
    c016:	\-----|-> clr.w d0
}
    c018:	      \-> addq.l #4,sp
    c01a:	          rts

0000c01c <walkAllPeople>:

void walkAllPeople() {
    c01c:	             subq.l #4,sp
	struct onScreenPerson *thisPerson = allPeople;
    c01e:	             move.l 1cae6 <allPeople>,(sp)

	while (thisPerson) {
    c024:	   /-------- bra.s c094 <walkAllPeople+0x78>
		if (thisPerson->walking) {
    c026:	/--|-------> movea.l (sp),a0
    c028:	|  |         move.w 64(a0),d0
    c02c:	|  |     /-- beq.s c040 <walkAllPeople+0x24>
			walkMe(thisPerson, TRUE);
    c02e:	|  |     |   pea 1 <_start+0x1>
    c032:	|  |     |   move.l 4(sp),-(sp)
    c036:	|  |     |   jsr c0a0 <walkMe>
    c03c:	|  |     |   addq.l #8,sp
    c03e:	|  |  /--|-- bra.s c060 <walkAllPeople+0x44>
		} else if (thisPerson->spinning) {
    c040:	|  |  |  \-> movea.l (sp),a0
    c042:	|  |  |      move.w 66(a0),d0
    c046:	|  |  +----- beq.s c060 <walkAllPeople+0x44>
			spinStep(thisPerson);
    c048:	|  |  |      move.l (sp),-(sp)
    c04a:	|  |  |      jsr bdbc <spinStep>
    c050:	|  |  |      addq.l #4,sp
			setFrames(thisPerson, ANI_STAND);
    c052:	|  |  |      clr.l -(sp)
    c054:	|  |  |      move.l 4(sp),-(sp)
    c058:	|  |  |      jsr 82a4 <setFrames>
    c05e:	|  |  |      addq.l #8,sp
		}
		if ((!thisPerson->walking) && (!thisPerson->spinning) && thisPerson->continueAfterWalking) {
    c060:	|  |  \----> movea.l (sp),a0
    c062:	|  |         move.w 64(a0),d0
    c066:	|  |     /-- bne.s c08e <walkAllPeople+0x72>
    c068:	|  |     |   movea.l (sp),a0
    c06a:	|  |     |   move.w 66(a0),d0
    c06e:	|  |     +-- bne.s c08e <walkAllPeople+0x72>
    c070:	|  |     |   movea.l (sp),a0
    c072:	|  |     |   move.l 68(a0),d0
    c076:	|  |     +-- beq.s c08e <walkAllPeople+0x72>
			restartFunction(thisPerson->continueAfterWalking);
    c078:	|  |     |   movea.l (sp),a0
    c07a:	|  |     |   move.l 68(a0),d0
    c07e:	|  |     |   move.l d0,-(sp)
    c080:	|  |     |   jsr 69bc <restartFunction>
    c086:	|  |     |   addq.l #4,sp
			thisPerson->continueAfterWalking = NULL;
    c088:	|  |     |   movea.l (sp),a0
    c08a:	|  |     |   clr.l 68(a0)
		}
		thisPerson = thisPerson->next;
    c08e:	|  |     \-> movea.l (sp),a0
    c090:	|  |         move.l 36(a0),(sp)
	while (thisPerson) {
    c094:	|  \-------> tst.l (sp)
    c096:	\----------- bne.s c026 <walkAllPeople+0xa>
	}
}
    c098:	             nop
    c09a:	             nop
    c09c:	             addq.l #4,sp
    c09e:	             rts

0000c0a0 <walkMe>:

BOOL walkMe (struct onScreenPerson * thisPerson, BOOL move) {
    c0a0:	                lea -20(sp),sp
    c0a4:	                move.l d3,-(sp)
    c0a6:	                move.l d2,-(sp)
    c0a8:	                move.l 36(sp),d0
    c0ac:	                move.w d0,d0
    c0ae:	                move.w d0,10(sp)
	float xDiff, yDiff, maxDiff, s;

	if (move == -1) move = TRUE;  // Initialize default value for move
    c0b2:	                cmpi.w #-1,10(sp)
    c0b8:	/-------------- bne.s c0c0 <walkMe+0x20>
    c0ba:	|               move.w #1,10(sp)

	for (;;) {
		xDiff = thisPerson->thisStepX - thisPerson->x;
    c0c0:	>-------------> movea.l 32(sp),a0
    c0c4:	|               move.l 48(a0),d0
    c0c8:	|               move.l d0,-(sp)
    c0ca:	|               jsr 17798 <__floatsisf>
    c0d0:	|               addq.l #4,sp
    c0d2:	|               move.l d0,d1
    c0d4:	|               movea.l 32(sp),a0
    c0d8:	|               move.l (a0),d0
    c0da:	|               move.l d0,-(sp)
    c0dc:	|               move.l d1,-(sp)
    c0de:	|               jsr 17a8c <__subsf3>
    c0e4:	|               addq.l #8,sp
    c0e6:	|               move.l d0,20(sp)
		yDiff = (thisPerson->thisStepY - thisPerson->y) * 2;
    c0ea:	|               movea.l 32(sp),a0
    c0ee:	|               move.l 52(a0),d0
    c0f2:	|               move.l d0,-(sp)
    c0f4:	|               jsr 17798 <__floatsisf>
    c0fa:	|               addq.l #4,sp
    c0fc:	|               move.l d0,d1
    c0fe:	|               movea.l 32(sp),a0
    c102:	|               move.l 4(a0),d0
    c106:	|               move.l d0,-(sp)
    c108:	|               move.l d1,-(sp)
    c10a:	|               jsr 17a8c <__subsf3>
    c110:	|               addq.l #8,sp
    c112:	|               move.l d0,-(sp)
    c114:	|               move.l d0,-(sp)
    c116:	|               jsr 17554 <__addsf3>
    c11c:	|               addq.l #8,sp
    c11e:	|               move.l d0,16(sp)
		s = thisPerson->scale * thisPerson->walkSpeed;
    c122:	|               movea.l 32(sp),a0
    c126:	|               move.l 32(a0),d2
    c12a:	|               movea.l 32(sp),a0
    c12e:	|               move.l 28(a0),d0
    c132:	|               move.l d0,-(sp)
    c134:	|               jsr 17798 <__floatsisf>
    c13a:	|               addq.l #4,sp
    c13c:	|               move.l d0,-(sp)
    c13e:	|               move.l d2,-(sp)
    c140:	|               jsr 1784a <__mulsf3>
    c146:	|               addq.l #8,sp
    c148:	|               move.l d0,24(sp)
		if (s < 0.2) s = 0.2;
    c14c:	|               move.l 24(sp),-(sp)
    c150:	|               jsr 176ba <__extendsfdf2>
    c156:	|               addq.l #4,sp
    c158:	|               move.l #-1717986918,-(sp)
    c15e:	|               move.l #1070176665,-(sp)
    c164:	|               move.l d1,-(sp)
    c166:	|               move.l d0,-(sp)
    c168:	|               jsr 17970 <__ltdf2>
    c16e:	|               lea 16(sp),sp
    c172:	|               tst.l d0
    c174:	|           /-- bge.s c17e <walkMe+0xde>
    c176:	|           |   move.l #1045220557,24(sp)

		maxDiff = (TF_abs(xDiff) >= TF_abs(yDiff)) ? TF_abs(xDiff) : TF_abs(yDiff);
    c17e:	|           \-> move.l 20(sp),-(sp)
    c182:	|               jsr 17730 <__fixsfsi>
    c188:	|               addq.l #4,sp
    c18a:	|               move.l d0,-(sp)
    c18c:	|               jsr 934a <TF_abs>
    c192:	|               addq.l #4,sp
    c194:	|               move.l d0,d2
    c196:	|               move.l 16(sp),-(sp)
    c19a:	|               jsr 17730 <__fixsfsi>
    c1a0:	|               addq.l #4,sp
    c1a2:	|               move.l d0,-(sp)
    c1a4:	|               jsr 934a <TF_abs>
    c1aa:	|               addq.l #4,sp
    c1ac:	|               cmp.l d2,d0
    c1ae:	|        /----- bgt.s c1d2 <walkMe+0x132>
    c1b0:	|        |      move.l 20(sp),-(sp)
    c1b4:	|        |      jsr 17730 <__fixsfsi>
    c1ba:	|        |      addq.l #4,sp
    c1bc:	|        |      move.l d0,-(sp)
    c1be:	|        |      jsr 934a <TF_abs>
    c1c4:	|        |      addq.l #4,sp
    c1c6:	|        |      move.l d0,-(sp)
    c1c8:	|        |      jsr 17798 <__floatsisf>
    c1ce:	|        |      addq.l #4,sp
    c1d0:	|        |  /-- bra.s c1f2 <walkMe+0x152>
    c1d2:	|        \--|-> move.l 16(sp),-(sp)
    c1d6:	|           |   jsr 17730 <__fixsfsi>
    c1dc:	|           |   addq.l #4,sp
    c1de:	|           |   move.l d0,-(sp)
    c1e0:	|           |   jsr 934a <TF_abs>
    c1e6:	|           |   addq.l #4,sp
    c1e8:	|           |   move.l d0,-(sp)
    c1ea:	|           |   jsr 17798 <__floatsisf>
    c1f0:	|           |   addq.l #4,sp
    c1f2:	|           \-> move.l d0,12(sp)

		if (TF_abs(maxDiff) > s) {
    c1f6:	|               move.l 12(sp),-(sp)
    c1fa:	|               jsr 17730 <__fixsfsi>
    c200:	|               addq.l #4,sp
    c202:	|               move.l d0,-(sp)
    c204:	|               jsr 934a <TF_abs>
    c20a:	|               addq.l #4,sp
    c20c:	|               move.l d0,-(sp)
    c20e:	|               jsr 17798 <__floatsisf>
    c214:	|               addq.l #4,sp
    c216:	|               move.l d0,-(sp)
    c218:	|               move.l 28(sp),-(sp)
    c21c:	|               jsr 179be <__ltsf2>
    c222:	|               addq.l #8,sp
    c224:	|               tst.l d0
    c226:	|        /----- bge.w c2d8 <walkMe+0x238>
			if (thisPerson->spinning) {
    c22a:	|        |      movea.l 32(sp),a0
    c22e:	|        |      move.w 66(a0),d0
    c232:	|        |  /-- beq.s c250 <walkMe+0x1b0>
				spinStep(thisPerson);
    c234:	|        |  |   move.l 32(sp),-(sp)
    c238:	|        |  |   jsr bdbc <spinStep>
    c23e:	|        |  |   addq.l #4,sp
				setFrames(thisPerson, ANI_WALK);
    c240:	|        |  |   pea 1 <_start+0x1>
    c244:	|        |  |   move.l 36(sp),-(sp)
    c248:	|        |  |   jsr 82a4 <setFrames>
    c24e:	|        |  |   addq.l #8,sp
			}
			s = maxDiff / s;
    c250:	|        |  \-> move.l 24(sp),-(sp)
    c254:	|        |      move.l 16(sp),-(sp)
    c258:	|        |      jsr 1764e <__divsf3>
    c25e:	|        |      addq.l #8,sp
    c260:	|        |      move.l d0,24(sp)
			if (move)
    c264:	|        |      tst.w 10(sp)
    c268:	|        |  /-- beq.s c2d2 <walkMe+0x232>
				moveAndScale(thisPerson,
							 thisPerson->x + xDiff / s,
							 thisPerson->y + yDiff / (s * 2));
    c26a:	|        |  |   movea.l 32(sp),a0
    c26e:	|        |  |   move.l 4(a0),d2
    c272:	|        |  |   move.l 24(sp),d0
    c276:	|        |  |   move.l d0,-(sp)
    c278:	|        |  |   move.l d0,-(sp)
    c27a:	|        |  |   jsr 17554 <__addsf3>
    c280:	|        |  |   addq.l #8,sp
    c282:	|        |  |   move.l d0,-(sp)
    c284:	|        |  |   move.l 20(sp),-(sp)
    c288:	|        |  |   jsr 1764e <__divsf3>
    c28e:	|        |  |   addq.l #8,sp
				moveAndScale(thisPerson,
    c290:	|        |  |   move.l d0,-(sp)
    c292:	|        |  |   move.l d2,-(sp)
    c294:	|        |  |   jsr 17554 <__addsf3>
    c29a:	|        |  |   addq.l #8,sp
    c29c:	|        |  |   move.l d0,d2
							 thisPerson->x + xDiff / s,
    c29e:	|        |  |   movea.l 32(sp),a0
    c2a2:	|        |  |   move.l (a0),d3
    c2a4:	|        |  |   move.l 24(sp),-(sp)
    c2a8:	|        |  |   move.l 24(sp),-(sp)
    c2ac:	|        |  |   jsr 1764e <__divsf3>
    c2b2:	|        |  |   addq.l #8,sp
				moveAndScale(thisPerson,
    c2b4:	|        |  |   move.l d0,-(sp)
    c2b6:	|        |  |   move.l d3,-(sp)
    c2b8:	|        |  |   jsr 17554 <__addsf3>
    c2be:	|        |  |   addq.l #8,sp
    c2c0:	|        |  |   move.l d2,-(sp)
    c2c2:	|        |  |   move.l d0,-(sp)
    c2c4:	|        |  |   move.l 40(sp),-(sp)
    c2c8:	|        |  |   jsr aea2 <moveAndScale>
    c2ce:	|        |  |   lea 12(sp),sp
			return TRUE;
    c2d2:	|        |  \-> moveq #1,d0
    c2d4:	|  /-----|----- bra.w c386 <walkMe+0x2e6>
		}

		if (thisPerson->inPoly == -1) {
    c2d8:	|  |     \----> movea.l 32(sp),a0
    c2dc:	|  |            move.l 56(a0),d0
    c2e0:	|  |            moveq #-1,d1
    c2e2:	|  |            cmp.l d0,d1
    c2e4:	|  |        /-- bne.s c31c <walkMe+0x27c>
			if (thisPerson->directionWhenDoneWalking != -1) {
    c2e6:	|  |        |   movea.l 32(sp),a0
    c2ea:	|  |        |   move.l 110(a0),d0
    c2ee:	|  |        |   moveq #-1,d1
    c2f0:	|  |        |   cmp.l d0,d1
    c2f2:	|  |  /-----|-- beq.s c330 <walkMe+0x290>
				thisPerson->wantAngle = thisPerson->directionWhenDoneWalking;
    c2f4:	|  |  |     |   movea.l 32(sp),a0
    c2f8:	|  |  |     |   move.l 110(a0),d0
    c2fc:	|  |  |     |   movea.l 32(sp),a0
    c300:	|  |  |     |   move.l d0,96(a0)
				thisPerson->spinning = TRUE;
    c304:	|  |  |     |   movea.l 32(sp),a0
    c308:	|  |  |     |   move.w #1,66(a0)
				spinStep(thisPerson);
    c30e:	|  |  |     |   move.l 32(sp),-(sp)
    c312:	|  |  |     |   jsr bdbc <spinStep>
    c318:	|  |  |     |   addq.l #4,sp
			}
			break;
    c31a:	|  |  +-----|-- bra.s c330 <walkMe+0x290>
		}
		if (!doBorderStuff(thisPerson)) break;
    c31c:	|  |  |     \-> move.l 32(sp),-(sp)
    c320:	|  |  |         jsr 9abc <doBorderStuff>
    c326:	|  |  |         addq.l #4,sp
    c328:	|  |  |         tst.w d0
    c32a:	|  |  |  /----- beq.s c334 <walkMe+0x294>
		xDiff = thisPerson->thisStepX - thisPerson->x;
    c32c:	\--|--|--|----- bra.w c0c0 <walkMe+0x20>
			break;
    c330:	   |  \--|----> nop
    c332:	   |     |  /-- bra.s c336 <walkMe+0x296>
		if (!doBorderStuff(thisPerson)) break;
    c334:	   |     \--|-> nop
	}

	thisPerson->walking = FALSE;
    c336:	   |        \-> movea.l 32(sp),a0
    c33a:	   |            clr.w 64(a0)
	setFrames(thisPerson, ANI_STAND);
    c33e:	   |            clr.l -(sp)
    c340:	   |            move.l 36(sp),-(sp)
    c344:	   |            jsr 82a4 <setFrames>
    c34a:	   |            addq.l #8,sp
	moveAndScale(thisPerson,
				 thisPerson->walkToX,
				 thisPerson->walkToY);
    c34c:	   |            movea.l 32(sp),a0
    c350:	   |            move.l 44(a0),d0
	moveAndScale(thisPerson,
    c354:	   |            move.l d0,-(sp)
    c356:	   |            jsr 17798 <__floatsisf>
    c35c:	   |            addq.l #4,sp
    c35e:	   |            move.l d0,d2
				 thisPerson->walkToX,
    c360:	   |            movea.l 32(sp),a0
    c364:	   |            move.l 40(a0),d0
	moveAndScale(thisPerson,
    c368:	   |            move.l d0,-(sp)
    c36a:	   |            jsr 17798 <__floatsisf>
    c370:	   |            addq.l #4,sp
    c372:	   |            move.l d2,-(sp)
    c374:	   |            move.l d0,-(sp)
    c376:	   |            move.l 40(sp),-(sp)
    c37a:	   |            jsr aea2 <moveAndScale>
    c380:	   |            lea 12(sp),sp
	return FALSE;
    c384:	   |            clr.w d0
}
    c386:	   \----------> move.l (sp)+,d2
    c388:	                move.l (sp)+,d3
    c38a:	                lea 20(sp),sp
    c38e:	                rts

0000c390 <clearStackLib>:
};

int stackLibTotal = 0;
struct stackLibrary * stackLib = NULL;

void clearStackLib () {
    c390:	       subq.l #8,sp
    c392:	       move.l a6,-(sp)
	struct stackLibrary * k;
	while (stackLib) {
    c394:	   /-- bra.s c3c4 <clearStackLib+0x34>
		k = stackLib;
    c396:	/--|-> move.l 1cb12 <stackLib>,8(sp)
		stackLib = stackLib -> next;
    c39e:	|  |   movea.l 1cb12 <stackLib>,a0
    c3a4:	|  |   move.l 4(a0),d0
    c3a8:	|  |   move.l d0,1cb12 <stackLib>
		FreeVec(k);
    c3ae:	|  |   move.l 8(sp),4(sp)
    c3b4:	|  |   move.l 1ca82 <SysBase>,d0
    c3ba:	|  |   movea.l d0,a6
    c3bc:	|  |   movea.l 4(sp),a1
    c3c0:	|  |   jsr -690(a6)
	while (stackLib) {
    c3c4:	|  \-> move.l 1cb12 <stackLib>,d0
    c3ca:	\----- bne.s c396 <clearStackLib+0x6>
	}
	stackLibTotal = 0;
    c3cc:	       clr.l 1cb0e <stackLibTotal>
}
    c3d2:	       nop
    c3d4:	       movea.l (sp)+,a6
    c3d6:	       addq.l #8,sp
    c3d8:	       rts

0000c3da <loadGame>:
	}

	return buildFunc;
}

BOOL loadGame (char * fname) {
    c3da:	          lea -128(sp),sp
    c3de:	          movem.l d2-d3/a6,-(sp)
	BPTR fp;
	FILETIME savedGameTime;
	int a;

	while (allRunningFunctions) finishFunction (allRunningFunctions);
    c3e2:	      /-- bra.s c3f4 <loadGame+0x1a>
    c3e4:	   /--|-> move.l 1ca1a <allRunningFunctions>,d0
    c3ea:	   |  |   move.l d0,-(sp)
    c3ec:	   |  |   jsr 5854 <finishFunction>
    c3f2:	   |  |   addq.l #4,sp
    c3f4:	   |  \-> move.l 1ca1a <allRunningFunctions>,d0
    c3fa:	   \----- bne.s c3e4 <loadGame+0xa>

	fp = openAndVerify (fname, 'S', 'A', ERROR_GAME_LOAD_NO, &ssgVersion);
    c3fc:	          pea 1cb16 <ssgVersion>
    c402:	          pea 1930e <PutChar+0x14de>
    c408:	          pea 41 <_start+0x41>
    c40c:	          pea 53 <_start+0x53>
    c410:	          move.l 160(sp),-(sp)
    c414:	          jsr 660a <openAndVerify>
    c41a:	          lea 20(sp),sp
    c41e:	          move.l d0,112(sp)
	if (fp == NULL) return FALSE;
    c422:	      /-- bne.s c42a <loadGame+0x50>
    c424:	      |   clr.w d0
    c426:	/-----|-- bra.w c6d0 <loadGame+0x2f6>

	unsigned int bytes_read = Read( fp, &savedGameTime, sizeof (FILETIME));
    c42a:	|     \-> move.l 112(sp),108(sp)
    c430:	|         lea 140(sp),a0
    c434:	|         lea -126(a0),a0
    c438:	|         move.l a0,120(sp)
    c43c:	|         moveq #8,d0
    c43e:	|         move.l d0,116(sp)
    c442:	|         move.l 1ca8a <DOSBase>,d0
    c448:	|         movea.l d0,a6
    c44a:	|         move.l 108(sp),d1
    c44e:	|         move.l 120(sp),d2
    c452:	|         move.l 116(sp),d3
    c456:	|         jsr -42(a6)
    c45a:	|         move.l d0,132(sp)
    c45e:	|         move.l 132(sp),d0
    c462:	|         move.l d0,128(sp)
	
	if (bytes_read != sizeof (FILETIME)) {
    c466:	|         moveq #8,d0
    c468:	|         cmp.l 128(sp),d0
    c46c:	|     /-- beq.s c47c <loadGame+0xa2>
		KPrintF("Reading error in loadGame.\n");
    c46e:	|     |   pea 1932f <PutChar+0x14ff>
    c474:	|     |   jsr 17366 <KPrintF>
    c47a:	|     |   addq.l #4,sp
	}

	if (savedGameTime.dwLowDateTime != fileTime.dwLowDateTime ||
    c47c:	|     \-> move.l 14(sp),d1
    c480:	|         move.l 1ca24 <fileTime>,d0
    c486:	|         cmp.l d1,d0
    c488:	|     /-- bne.s c498 <loadGame+0xbe>
		savedGameTime.dwHighDateTime != fileTime.dwHighDateTime) {
    c48a:	|     |   move.l 18(sp),d1
    c48e:	|     |   move.l 1ca28 <fileTime+0x4>,d0
	if (savedGameTime.dwLowDateTime != fileTime.dwLowDateTime ||
    c494:	|     |   cmp.l d1,d0
    c496:	|  /--|-- beq.s c4b8 <loadGame+0xde>
		KPrintF("loadgame:", ERROR_GAME_LOAD_WRONG, fname);
    c498:	|  |  \-> move.l 144(sp),-(sp)
    c49c:	|  |      pea 1934b <PutChar+0x151b>
    c4a2:	|  |      pea 19412 <PutChar+0x15e2>
    c4a8:	|  |      jsr 17366 <KPrintF>
    c4ae:	|  |      lea 12(sp),sp
		return FALSE; 
    c4b2:	|  |      clr.w d0
    c4b4:	+--|----- bra.w c6d0 <loadGame+0x2f6>
	}

	// DON'T ADD ANYTHING NEW BEFORE THIS POINT!

	allowAnyFilename = FGetC (fp);
    c4b8:	|  \----> move.l 112(sp),124(sp)
    c4be:	|         move.l 1ca8a <DOSBase>,d0
    c4c4:	|         movea.l d0,a6
    c4c6:	|         move.l 124(sp),d1
    c4ca:	|         jsr -306(a6)
    c4ce:	|         move.l d0,136(sp)
    c4d2:	|         move.l 136(sp),d0
    c4d6:	|         move.l d0,d0
    c4d8:	|         move.w d0,1c2de <allowAnyFilename>
	captureAllKeys = FGetC (fp);
    c4de:	|         move.l 112(sp),100(sp)
    c4e4:	|         move.l 1ca8a <DOSBase>,d0
    c4ea:	|         movea.l d0,a6
    c4ec:	|         move.l 100(sp),d1
    c4f0:	|         jsr -306(a6)
    c4f4:	|         move.l d0,96(sp)
    c4f8:	|         move.l 96(sp),d0
    c4fc:	|         move.l d0,d0
    c4fe:	|         move.w d0,1ca22 <captureAllKeys>
	FGetC (fp); // updateDisplay (part of movie playing)
    c504:	|         move.l 112(sp),92(sp)
    c50a:	|         move.l 1ca8a <DOSBase>,d0
    c510:	|         movea.l d0,a6
    c512:	|         move.l 92(sp),d1
    c516:	|         jsr -306(a6)
    c51a:	|         move.l d0,88(sp)

	BOOL fontLoaded = FGetC (fp);
    c51e:	|         move.l 112(sp),84(sp)
    c524:	|         move.l 1ca8a <DOSBase>,d0
    c52a:	|         movea.l d0,a6
    c52c:	|         move.l 84(sp),d1
    c530:	|         jsr -306(a6)
    c534:	|         move.l d0,80(sp)
    c538:	|         move.l 80(sp),d0
    c53c:	|         move.w d0,78(sp)
	int fontNum;
	char * charOrder;
	if (fontLoaded) {
    c540:	|     /-- beq.s c574 <loadGame+0x19a>
		fontNum = get2bytes (fp);
    c542:	|     |   move.l 112(sp),-(sp)
    c546:	|     |   jsr 6bc <get2bytes>
    c54c:	|     |   addq.l #4,sp
    c54e:	|     |   move.l d0,74(sp)
		fontHeight = get2bytes (fp);		
    c552:	|     |   move.l 112(sp),-(sp)
    c556:	|     |   jsr 6bc <get2bytes>
    c55c:	|     |   addq.l #4,sp
    c55e:	|     |   move.l d0,1cb7a <fontHeight>
		charOrder = readString(fp);		
    c564:	|     |   move.l 112(sp),-(sp)
    c568:	|     |   jsr b02 <readString>
    c56e:	|     |   addq.l #4,sp
    c570:	|     |   move.l d0,104(sp)
	}
	//loadFont (fontNum, charOrder, fontHeight); Amiga Todo: Implement Graphics stuff
	FreeVec(charOrder);
    c574:	|     \-> move.l 104(sp),70(sp)
    c57a:	|         move.l 1ca82 <SysBase>,d0
    c580:	|         movea.l d0,a6
    c582:	|         movea.l 70(sp),a1
    c586:	|         jsr -690(a6)
	
	fontSpace = getSigned (fp);
    c58a:	|         move.l 112(sp),-(sp)
    c58e:	|         jsr 854 <getSigned>
    c594:	|         addq.l #4,sp
    c596:	|         move.w d0,1c986 <fontSpace>

	killAllPeople ();
    c59c:	|         jsr ab44 <killAllPeople>
	killAllRegions ();
    c5a2:	|         jsr 15b76 <killAllRegions>

	int camerX = get2bytes (fp);
    c5a8:	|         move.l 112(sp),-(sp)
    c5ac:	|         jsr 6bc <get2bytes>
    c5b2:	|         addq.l #4,sp
    c5b4:	|         move.l d0,66(sp)
	int camerY = get2bytes (fp);
    c5b8:	|         move.l 112(sp),-(sp)
    c5bc:	|         jsr 6bc <get2bytes>
    c5c2:	|         addq.l #4,sp
    c5c4:	|         move.l d0,62(sp)
	FLOAT camerZ;
	camerZ = getFloat(fp);
    c5c8:	|         move.l 112(sp),-(sp)
    c5cc:	|         jsr 7d8 <getFloat>
    c5d2:	|         addq.l #4,sp
    c5d4:	|         move.l d0,58(sp)

	brightnessLevel = FGetC (fp);
    c5d8:	|         move.l 112(sp),54(sp)
    c5de:	|         move.l 1ca8a <DOSBase>,d0
    c5e4:	|         movea.l d0,a6
    c5e6:	|         move.l 54(sp),d1
    c5ea:	|         jsr -306(a6)
    c5ee:	|         move.l d0,50(sp)
    c5f2:	|         move.l 50(sp),d0
    c5f6:	|         move.l d0,d0
    c5f8:	|         move.b d0,1c3f8 <brightnessLevel>

	loadHandlers (fp);
    c5fe:	|         move.l 112(sp),-(sp)
    c602:	|         jsr 656a <loadHandlers>
    c608:	|         addq.l #4,sp
	loadRegions (fp);
    c60a:	|         move.l 112(sp),-(sp)
    c60e:	|         jsr 15bd2 <loadRegions>
    c614:	|         addq.l #4,sp

	mouseCursorAnim = AllocVec( sizeof( struct personaAnimation), MEMF_ANY);
    c616:	|         moveq #12,d0
    c618:	|         move.l d0,46(sp)
    c61c:	|         clr.l 42(sp)
    c620:	|         move.l 1ca82 <SysBase>,d0
    c626:	|         movea.l d0,a6
    c628:	|         move.l 46(sp),d0
    c62c:	|         move.l 42(sp),d1
    c630:	|         jsr -684(a6)
    c634:	|         move.l d0,38(sp)
    c638:	|         move.l 38(sp),d0
    c63c:	|         move.l d0,1c988 <mouseCursorAnim>
	if (! mouseCursorAnim) {
    c642:	|         move.l 1c988 <mouseCursorAnim>,d0
    c648:	|     /-- bne.s c65c <loadGame+0x282>
		KPrintF("loadGame: Cannot allocate memory");
    c64a:	|     |   pea 1941c <PutChar+0x15ec>
    c650:	|     |   jsr 17366 <KPrintF>
    c656:	|     |   addq.l #4,sp
		return FALSE;
    c658:	|     |   clr.w d0
    c65a:	+-----|-- bra.s c6d0 <loadGame+0x2f6>
			languageNum = selectedLanguage;
			setFileIndices (NULL, gameSettings.numLanguages, languageNum);
		}
	}

	nosnapshot ();
    c65c:	|     \-> jsr d4ea <nosnapshot>
	if (FGetC (fp)) {
    c662:	|         move.l 112(sp),34(sp)
    c668:	|         move.l 1ca8a <DOSBase>,d0
    c66e:	|         movea.l d0,a6
    c670:	|         move.l 34(sp),d1
    c674:	|         jsr -306(a6)
    c678:	|         move.l d0,30(sp)
    c67c:	|         move.l 30(sp),d0
    c680:	|     /-- beq.s c696 <loadGame+0x2bc>
		if (! restoreSnapshot (fp)) return FALSE;
    c682:	|     |   move.l 112(sp),-(sp)
    c686:	|     |   jsr d56a <restoreSnapshot>
    c68c:	|     |   addq.l #4,sp
    c68e:	|     |   tst.w d0
    c690:	|     +-- bne.s c696 <loadGame+0x2bc>
    c692:	|     |   clr.w d0
    c694:	+-----|-- bra.s c6d0 <loadGame+0x2f6>
	}

	Close (fp);
    c696:	|     \-> move.l 112(sp),26(sp)
    c69c:	|         move.l 1ca8a <DOSBase>,d0
    c6a2:	|         movea.l d0,a6
    c6a4:	|         move.l 26(sp),d1
    c6a8:	|         jsr -36(a6)
    c6ac:	|         move.l d0,22(sp)
	clearStackLib ();
    c6b0:	|         jsr c390 <clearStackLib>

	cameraX = camerX;
    c6b6:	|         move.l 66(sp),1cb3c <cameraX>
	cameraY = camerY;
    c6be:	|         move.l 62(sp),1cb40 <cameraY>
	cameraZoom = camerZ;
    c6c6:	|         move.l 58(sp),1c420 <cameraZoom>

	return TRUE;
    c6ce:	|         moveq #1,d0
}
    c6d0:	\-------> movem.l (sp)+,d2-d3/a6
    c6d4:	          lea 128(sp),sp
    c6d8:	          rts

0000c6da <saveFunction>:

void saveFunction (struct loadedFunction * fun, BPTR fp) {
    c6da:	   /-> lea -64(sp),sp
    c6de:	   |   move.l a6,-(sp)
    c6e0:	   |   move.l d2,-(sp)
	int a;
	put2bytes (fun -> originalNumber, fp);
    c6e2:	   |   movea.l 76(sp),a0
    c6e6:	   |   move.l (a0),d0
    c6e8:	   |   move.l 80(sp),-(sp)
    c6ec:	   |   move.l d0,-(sp)
    c6ee:	   |   jsr 8d0 <put2bytes>
    c6f4:	   |   addq.l #8,sp
	if (fun -> calledBy) {
    c6f6:	   |   movea.l 76(sp),a0
    c6fa:	   |   move.l 40(a0),d0
    c6fe:	/--|-- beq.s c73a <saveFunction+0x60>
		FPutC (fp, 1);
    c700:	|  |   move.l 80(sp),52(sp)
    c706:	|  |   moveq #1,d0
    c708:	|  |   move.l d0,48(sp)
    c70c:	|  |   move.l 1ca8a <DOSBase>,d0
    c712:	|  |   movea.l d0,a6
    c714:	|  |   move.l 52(sp),d1
    c718:	|  |   move.l 48(sp),d2
    c71c:	|  |   jsr -312(a6)
    c720:	|  |   move.l d0,44(sp)
		saveFunction (fun -> calledBy, fp);
    c724:	|  |   movea.l 76(sp),a0
    c728:	|  |   move.l 40(a0),d0
    c72c:	|  |   move.l 80(sp),-(sp)
    c730:	|  |   move.l d0,-(sp)
    c732:	|  \-- jsr c6da <saveFunction>(pc)
    c736:	|      addq.l #8,sp
    c738:	|  /-- bra.s c75c <saveFunction+0x82>
	} else {
		FPutC (fp, 0);
    c73a:	\--|-> move.l 80(sp),64(sp)
    c740:	   |   clr.l 60(sp)
    c744:	   |   move.l 1ca8a <DOSBase>,d0
    c74a:	   |   movea.l d0,a6
    c74c:	   |   move.l 64(sp),d1
    c750:	   |   move.l 60(sp),d2
    c754:	   |   jsr -312(a6)
    c758:	   |   move.l d0,56(sp)
	}
	put4bytes (fun -> timeLeft, fp);
    c75c:	   \-> movea.l 76(sp),a0
    c760:	       move.l 12(a0),d0
    c764:	       move.l 80(sp),-(sp)
    c768:	       move.l d0,-(sp)
    c76a:	       jsr 958 <put4bytes>
    c770:	       addq.l #8,sp
	put2bytes (fun -> runThisLine, fp);
    c772:	       movea.l 76(sp),a0
    c776:	       move.l 36(a0),d0
    c77a:	       move.l 80(sp),-(sp)
    c77e:	       move.l d0,-(sp)
    c780:	       jsr 8d0 <put2bytes>
    c786:	       addq.l #8,sp
	FPutC (fp, fun -> cancelMe);
    c788:	       move.l 80(sp),40(sp)
    c78e:	       movea.l 76(sp),a0
    c792:	       move.w 54(a0),d0
    c796:	       movea.w d0,a0
    c798:	       move.l a0,36(sp)
    c79c:	       move.l 1ca8a <DOSBase>,d0
    c7a2:	       movea.l d0,a6
    c7a4:	       move.l 40(sp),d1
    c7a8:	       move.l 36(sp),d2
    c7ac:	       jsr -312(a6)
    c7b0:	       move.l d0,32(sp)
	FPutC (fp, fun -> returnSomething);
    c7b4:	       move.l 80(sp),28(sp)
    c7ba:	       movea.l 76(sp),a0
    c7be:	       move.w 48(a0),d0
    c7c2:	       movea.w d0,a0
    c7c4:	       move.l a0,24(sp)
    c7c8:	       move.l 1ca8a <DOSBase>,d0
    c7ce:	       movea.l d0,a6
    c7d0:	       move.l 28(sp),d1
    c7d4:	       move.l 24(sp),d2
    c7d8:	       jsr -312(a6)
    c7dc:	       move.l d0,20(sp)
	FPutC (fp, fun -> isSpeech);
    c7e0:	       move.l 80(sp),16(sp)
    c7e6:	       movea.l 76(sp),a0
    c7ea:	       move.w 50(a0),d0
    c7ee:	       movea.w d0,a0
    c7f0:	       move.l a0,12(sp)
    c7f4:	       move.l 1ca8a <DOSBase>,d0
    c7fa:	       movea.l d0,a6
    c7fc:	       move.l 16(sp),d1
    c800:	       move.l 12(sp),d2
    c804:	       jsr -312(a6)
    c808:	       move.l d0,8(sp)
	saveVariable (&fun -> reg, fp);
    c80c:	       moveq #28,d0
    c80e:	       add.l 76(sp),d0
    c812:	       move.l 80(sp),-(sp)
    c816:	       move.l d0,-(sp)
    c818:	       jsr cf32 <saveVariable>
    c81e:	       addq.l #8,sp

	if (fun -> freezerLevel) {
    c820:	       movea.l 76(sp),a0
    c824:	       move.b 56(a0),d0
    c828:	   /-- beq.s c838 <saveFunction+0x15e>
		KPrintF(ERROR_GAME_SAVE_FROZEN);		
    c82a:	   |   pea 1943d <PutChar+0x160d>
    c830:	   |   jsr 17366 <KPrintF>
    c836:	   |   addq.l #4,sp
	}
	saveStack (fun -> stack, fp);
    c838:	   \-> movea.l 76(sp),a0
    c83c:	       move.l 24(a0),d0
    c840:	       move.l 80(sp),-(sp)
    c844:	       move.l d0,-(sp)
    c846:	       jsr cda6 <saveStack>
    c84c:	       addq.l #8,sp
	for (a = 0; a < fun -> numLocals; a ++) {
    c84e:	       clr.l 68(sp)
    c852:	   /-- bra.s c876 <saveFunction+0x19c>
		saveVariable (& (fun -> localVars[a]), fp);
    c854:	/--|-> movea.l 76(sp),a0
    c858:	|  |   move.l 20(a0),d1
    c85c:	|  |   move.l 68(sp),d0
    c860:	|  |   lsl.l #3,d0
    c862:	|  |   add.l d1,d0
    c864:	|  |   move.l 80(sp),-(sp)
    c868:	|  |   move.l d0,-(sp)
    c86a:	|  |   jsr cf32 <saveVariable>
    c870:	|  |   addq.l #8,sp
	for (a = 0; a < fun -> numLocals; a ++) {
    c872:	|  |   addq.l #1,68(sp)
    c876:	|  \-> movea.l 76(sp),a0
    c87a:	|      move.l 8(a0),d0
    c87e:	|      cmp.l 68(sp),d0
    c882:	\----- bgt.s c854 <saveFunction+0x17a>
	}
}
    c884:	       nop
    c886:	       nop
    c888:	       move.l (sp)+,d2
    c88a:	       movea.l (sp)+,a6
    c88c:	       lea 64(sp),sp
    c890:	       rts

0000c892 <saveGame>:

BOOL saveGame (char * fname) {
    c892:	          lea -248(sp),sp
    c896:	          movem.l d2-d3/a6,-(sp)
	int a;

	BPTR fp = Open( fname, MODE_NEWFILE);
    c89a:	          move.l 264(sp),244(sp)
    c8a0:	          move.l #1006,240(sp)
    c8a8:	          move.l 1ca8a <DOSBase>,d0
    c8ae:	          movea.l d0,a6
    c8b0:	          move.l 244(sp),d1
    c8b4:	          move.l 240(sp),d2
    c8b8:	          jsr -30(a6)
    c8bc:	          move.l d0,236(sp)
    c8c0:	          move.l 236(sp),d0
    c8c4:	          move.l d0,232(sp)
	if (fp == NULL) {
    c8c8:	      /-- bne.s c8de <saveGame+0x4c>
		KPrintF("saveGame: Cannot create file");
    c8ca:	      |   pea 1945f <PutChar+0x162f>
    c8d0:	      |   jsr 17366 <KPrintF>
    c8d6:	      |   addq.l #4,sp
		return FALSE;
    c8d8:	      |   clr.w d0
    c8da:	/-----|-- bra.w cd9c <saveGame+0x50a>
	}

	Write( fp, &"SLUDSA", 6);
    c8de:	|     \-> move.l 232(sp),228(sp)
    c8e4:	|         move.l #103548,224(sp)
    c8ec:	|         moveq #6,d0
    c8ee:	|         move.l d0,220(sp)
    c8f2:	|         move.l 1ca8a <DOSBase>,d0
    c8f8:	|         movea.l d0,a6
    c8fa:	|         move.l 228(sp),d1
    c8fe:	|         move.l 224(sp),d2
    c902:	|         move.l 220(sp),d3
    c906:	|         jsr -48(a6)
    c90a:	|         move.l d0,216(sp)
	FPutC (fp, 0);
    c90e:	|         move.l 232(sp),212(sp)
    c914:	|         clr.l 208(sp)
    c918:	|         move.l 1ca8a <DOSBase>,d0
    c91e:	|         movea.l d0,a6
    c920:	|         move.l 212(sp),d1
    c924:	|         move.l 208(sp),d2
    c928:	|         jsr -312(a6)
    c92c:	|         move.l d0,204(sp)
	FPutC (fp, 0);
    c930:	|         move.l 232(sp),200(sp)
    c936:	|         clr.l 196(sp)
    c93a:	|         move.l 1ca8a <DOSBase>,d0
    c940:	|         movea.l d0,a6
    c942:	|         move.l 200(sp),d1
    c946:	|         move.l 196(sp),d2
    c94a:	|         jsr -312(a6)
    c94e:	|         move.l d0,192(sp)
	FPutC (fp, MAJOR_VERSION);
    c952:	|         move.l 232(sp),188(sp)
    c958:	|         moveq #2,d0
    c95a:	|         move.l d0,184(sp)
    c95e:	|         move.l 1ca8a <DOSBase>,d0
    c964:	|         movea.l d0,a6
    c966:	|         move.l 188(sp),d1
    c96a:	|         move.l 184(sp),d2
    c96e:	|         jsr -312(a6)
    c972:	|         move.l d0,180(sp)
	FPutC (fp, MINOR_VERSION);
    c976:	|         move.l 232(sp),176(sp)
    c97c:	|         moveq #2,d0
    c97e:	|         move.l d0,172(sp)
    c982:	|         move.l 1ca8a <DOSBase>,d0
    c988:	|         movea.l d0,a6
    c98a:	|         move.l 176(sp),d1
    c98e:	|         move.l 172(sp),d2
    c992:	|         jsr -312(a6)
    c996:	|         move.l d0,168(sp)

	Write ( fp, &fileTime, sizeof(FILETIME));
    c99a:	|         move.l 232(sp),164(sp)
    c9a0:	|         move.l #117284,160(sp)
    c9a8:	|         moveq #8,d0
    c9aa:	|         move.l d0,156(sp)
    c9ae:	|         move.l 1ca8a <DOSBase>,d0
    c9b4:	|         movea.l d0,a6
    c9b6:	|         move.l 164(sp),d1
    c9ba:	|         move.l 160(sp),d2
    c9be:	|         move.l 156(sp),d3
    c9c2:	|         jsr -48(a6)
    c9c6:	|         move.l d0,152(sp)

	// DON'T ADD ANYTHING NEW BEFORE THIS POINT!

	FPutC (fp, allowAnyFilename);
    c9ca:	|         move.l 232(sp),148(sp)
    c9d0:	|         move.w 1c2de <allowAnyFilename>,d0
    c9d6:	|         movea.w d0,a0
    c9d8:	|         move.l a0,144(sp)
    c9dc:	|         move.l 1ca8a <DOSBase>,d0
    c9e2:	|         movea.l d0,a6
    c9e4:	|         move.l 148(sp),d1
    c9e8:	|         move.l 144(sp),d2
    c9ec:	|         jsr -312(a6)
    c9f0:	|         move.l d0,140(sp)
	FPutC (fp, captureAllKeys);
    c9f4:	|         move.l 232(sp),136(sp)
    c9fa:	|         move.w 1ca22 <captureAllKeys>,d0
    ca00:	|         movea.w d0,a0
    ca02:	|         move.l a0,132(sp)
    ca06:	|         move.l 1ca8a <DOSBase>,d0
    ca0c:	|         movea.l d0,a6
    ca0e:	|         move.l 136(sp),d1
    ca12:	|         move.l 132(sp),d2
    ca16:	|         jsr -312(a6)
    ca1a:	|         move.l d0,128(sp)
	FPutC (fp, TRUE); // updateDisplay
    ca1e:	|         move.l 232(sp),124(sp)
    ca24:	|         moveq #1,d0
    ca26:	|         move.l d0,120(sp)
    ca2a:	|         move.l 1ca8a <DOSBase>,d0
    ca30:	|         movea.l d0,a6
    ca32:	|         move.l 124(sp),d1
    ca36:	|         move.l 120(sp),d2
    ca3a:	|         jsr -312(a6)
    ca3e:	|         move.l d0,116(sp)
	FPutC (fp, fontTableSize>0);
    ca42:	|         move.l 232(sp),112(sp)
    ca48:	|         move.l 1cb8a <fontTableSize>,d0
    ca4e:	|         sgt d0
    ca50:	|         neg.b d0
    ca52:	|         move.b d0,d0
    ca54:	|         andi.l #255,d0
    ca5a:	|         move.l d0,108(sp)
    ca5e:	|         move.l 1ca8a <DOSBase>,d0
    ca64:	|         movea.l d0,a6
    ca66:	|         move.l 112(sp),d1
    ca6a:	|         move.l 108(sp),d2
    ca6e:	|         jsr -312(a6)
    ca72:	|         move.l d0,104(sp)

	if (fontTableSize>0) {
    ca76:	|         move.l 1cb8a <fontTableSize>,d0
    ca7c:	|     /-- ble.s caba <saveGame+0x228>
		put2bytes (loadedFontNum, fp);
    ca7e:	|     |   move.l 1cb7e <loadedFontNum>,d0
    ca84:	|     |   move.l 232(sp),-(sp)
    ca88:	|     |   move.l d0,-(sp)
    ca8a:	|     |   jsr 8d0 <put2bytes>
    ca90:	|     |   addq.l #8,sp
		put2bytes (fontHeight, fp);
    ca92:	|     |   move.l 1cb7a <fontHeight>,d0
    ca98:	|     |   move.l 232(sp),-(sp)
    ca9c:	|     |   move.l d0,-(sp)
    ca9e:	|     |   jsr 8d0 <put2bytes>
    caa4:	|     |   addq.l #8,sp
		writeString(fontOrderString, fp);
    caa6:	|     |   move.l 1cb82 <fontOrderString>,d0
    caac:	|     |   move.l 232(sp),-(sp)
    cab0:	|     |   move.l d0,-(sp)
    cab2:	|     |   jsr bd8 <writeString>
    cab8:	|     |   addq.l #8,sp
	}
	putSigned (fontSpace, fp);
    caba:	|     \-> move.w 1c986 <fontSpace>,d0
    cac0:	|         movea.w d0,a0
    cac2:	|         move.l 232(sp),-(sp)
    cac6:	|         move.l a0,-(sp)
    cac8:	|         jsr a9c <putSigned>
    cace:	|         addq.l #8,sp

	// Save backdrop
	put2bytes (cameraX, fp);
    cad0:	|         move.l 1cb3c <cameraX>,d0
    cad6:	|         move.l 232(sp),-(sp)
    cada:	|         move.l d0,-(sp)
    cadc:	|         jsr 8d0 <put2bytes>
    cae2:	|         addq.l #8,sp
	put2bytes (cameraY, fp);
    cae4:	|         move.l 1cb40 <cameraY>,d0
    caea:	|         move.l 232(sp),-(sp)
    caee:	|         move.l d0,-(sp)
    caf0:	|         jsr 8d0 <put2bytes>
    caf6:	|         addq.l #8,sp
	putFloat(cameraZoom, fp);
    caf8:	|         move.l 1c420 <cameraZoom>,d0
    cafe:	|         move.l 232(sp),-(sp)
    cb02:	|         move.l d0,-(sp)
    cb04:	|         jsr a46 <putFloat>
    cb0a:	|         addq.l #8,sp

	FPutC (fp, brightnessLevel);
    cb0c:	|         move.l 232(sp),100(sp)
    cb12:	|         move.b 1c3f8 <brightnessLevel>,d0
    cb18:	|         move.b d0,d0
    cb1a:	|         andi.l #255,d0
    cb20:	|         move.l d0,96(sp)
    cb24:	|         move.l 1ca8a <DOSBase>,d0
    cb2a:	|         movea.l d0,a6
    cb2c:	|         move.l 100(sp),d1
    cb30:	|         move.l 96(sp),d2
    cb34:	|         jsr -312(a6)
    cb38:	|         move.l d0,92(sp)

	// Save event handlers
	saveHandlers (fp);
    cb3c:	|         move.l 232(sp),-(sp)
    cb40:	|         jsr 6aee <saveHandlers>
    cb46:	|         addq.l #4,sp

	// Save regions
	saveRegions (fp);
    cb48:	|         move.l 232(sp),-(sp)
    cb4c:	|         jsr 15d8c <saveRegions>
    cb52:	|         addq.l #4,sp

	saveAnim (mouseCursorAnim, fp);
    cb54:	|         move.l 1c988 <mouseCursorAnim>,d0
    cb5a:	|         move.l 232(sp),-(sp)
    cb5e:	|         move.l d0,-(sp)
    cb60:	|         jsr b0b6 <saveAnim>
    cb66:	|         addq.l #8,sp
	put2bytes (mouseCursorFrameNum, fp);
    cb68:	|         move.l 1c98c <mouseCursorFrameNum>,d0
    cb6e:	|         move.l 232(sp),-(sp)
    cb72:	|         move.l d0,-(sp)
    cb74:	|         jsr 8d0 <put2bytes>
    cb7a:	|         addq.l #8,sp

	// Save functions
	struct loadedFunction * thisFunction = allRunningFunctions;
    cb7c:	|         move.l 1ca1a <allRunningFunctions>,252(sp)
	int countFunctions = 0;
    cb84:	|         clr.l 248(sp)
	while (thisFunction) {
    cb88:	|     /-- bra.s cb98 <saveGame+0x306>
		countFunctions ++;
    cb8a:	|  /--|-> addq.l #1,248(sp)
		thisFunction = thisFunction -> next;
    cb8e:	|  |  |   movea.l 252(sp),a0
    cb92:	|  |  |   move.l 44(a0),252(sp)
	while (thisFunction) {
    cb98:	|  |  \-> tst.l 252(sp)
    cb9c:	|  \----- bne.s cb8a <saveGame+0x2f8>
	}
	put2bytes (countFunctions, fp);
    cb9e:	|         move.l 232(sp),-(sp)
    cba2:	|         move.l 252(sp),-(sp)
    cba6:	|         jsr 8d0 <put2bytes>
    cbac:	|         addq.l #8,sp

	thisFunction = allRunningFunctions;
    cbae:	|         move.l 1ca1a <allRunningFunctions>,252(sp)
	while (thisFunction) {
    cbb6:	|     /-- bra.s cbd2 <saveGame+0x340>
		saveFunction (thisFunction, fp);
    cbb8:	|  /--|-> move.l 232(sp),-(sp)
    cbbc:	|  |  |   move.l 256(sp),-(sp)
    cbc0:	|  |  |   jsr c6da <saveFunction>
    cbc6:	|  |  |   addq.l #8,sp
		thisFunction = thisFunction -> next;
    cbc8:	|  |  |   movea.l 252(sp),a0
    cbcc:	|  |  |   move.l 44(a0),252(sp)
	while (thisFunction) {
    cbd2:	|  |  \-> tst.l 252(sp)
    cbd6:	|  \----- bne.s cbb8 <saveGame+0x326>
	}

	for (a = 0; a < numGlobals; a ++) {
    cbd8:	|         clr.l 256(sp)
    cbdc:	|     /-- bra.s cbfe <saveGame+0x36c>
		saveVariable (& globalVars[a], fp);
    cbde:	|  /--|-> move.l 1ca30 <globalVars>,d1
    cbe4:	|  |  |   move.l 256(sp),d0
    cbe8:	|  |  |   lsl.l #3,d0
    cbea:	|  |  |   add.l d1,d0
    cbec:	|  |  |   move.l 232(sp),-(sp)
    cbf0:	|  |  |   move.l d0,-(sp)
    cbf2:	|  |  |   jsr cf32 <saveVariable>
    cbf8:	|  |  |   addq.l #8,sp
	for (a = 0; a < numGlobals; a ++) {
    cbfa:	|  |  |   addq.l #1,256(sp)
    cbfe:	|  |  \-> move.l 1ca5a <numGlobals>,d0
    cc04:	|  |      cmp.l 256(sp),d0
    cc08:	|  \----- bgt.s cbde <saveGame+0x34c>
	}

	savePeople (fp);
    cc0a:	|         move.l 232(sp),-(sp)
    cc0e:	|         jsr b1de <savePeople>
    cc14:	|         addq.l #4,sp

	if (currentFloor -> numPolygons) {
    cc16:	|         movea.l 1cb9e <currentFloor>,a0
    cc1c:	|         move.l 8(a0),d0
    cc20:	|  /----- beq.s cc5e <saveGame+0x3cc>
		FPutC (fp, 1);
    cc22:	|  |      move.l 232(sp),76(sp)
    cc28:	|  |      moveq #1,d0
    cc2a:	|  |      move.l d0,72(sp)
    cc2e:	|  |      move.l 1ca8a <DOSBase>,d0
    cc34:	|  |      movea.l d0,a6
    cc36:	|  |      move.l 76(sp),d1
    cc3a:	|  |      move.l 72(sp),d2
    cc3e:	|  |      jsr -312(a6)
    cc42:	|  |      move.l d0,68(sp)
		put2bytes (currentFloor -> originalNum, fp);
    cc46:	|  |      movea.l 1cb9e <currentFloor>,a0
    cc4c:	|  |      move.l (a0),d0
    cc4e:	|  |      move.l 232(sp),-(sp)
    cc52:	|  |      move.l d0,-(sp)
    cc54:	|  |      jsr 8d0 <put2bytes>
    cc5a:	|  |      addq.l #8,sp
    cc5c:	|  |  /-- bra.s cc80 <saveGame+0x3ee>
	} else FPutC (fp, 0);
    cc5e:	|  \--|-> move.l 232(sp),88(sp)
    cc64:	|     |   clr.l 84(sp)
    cc68:	|     |   move.l 1ca8a <DOSBase>,d0
    cc6e:	|     |   movea.l d0,a6
    cc70:	|     |   move.l 88(sp),d1
    cc74:	|     |   move.l 84(sp),d2
    cc78:	|     |   jsr -312(a6)
    cc7c:	|     |   move.l d0,80(sp)
	/*if (zBuffer.tex) {
		FPutC (fp, 1);
		put2bytes (zBuffer.originalNum, fp);
	} else FPutC (fp,0);*/ 

	FPutC (fp, speechMode);
    cc80:	|     \-> move.l 232(sp),64(sp)
    cc86:	|         move.l 1cb50 <speechMode>,60(sp)
    cc8e:	|         move.l 1ca8a <DOSBase>,d0
    cc94:	|         movea.l d0,a6
    cc96:	|         move.l 64(sp),d1
    cc9a:	|         move.l 60(sp),d2
    cc9e:	|         jsr -312(a6)
    cca2:	|         move.l d0,56(sp)
	FPutC (fadeMode, fp);
    cca6:	|         move.b 1c95c <fadeMode>,d0
    ccac:	|         move.b d0,d0
    ccae:	|         andi.l #255,d0
    ccb4:	|         move.l d0,52(sp)
    ccb8:	|         move.l 232(sp),48(sp)
    ccbe:	|         move.l 1ca8a <DOSBase>,d0
    ccc4:	|         movea.l d0,a6
    ccc6:	|         move.l 52(sp),d1
    ccca:	|         move.l 48(sp),d2
    ccce:	|         jsr -312(a6)
    ccd2:	|         move.l d0,44(sp)
	saveSpeech (speech, fp);
    ccd6:	|         move.l 1cade <speech>,d0
    ccdc:	|         move.l 232(sp),-(sp)
    cce0:	|         move.l d0,-(sp)
    cce2:	|         jsr 8158 <saveSpeech>
    cce8:	|         addq.l #8,sp
	saveStatusBars (fp);
    ccea:	|         move.l 232(sp),-(sp)
    ccee:	|         jsr 7b54 <saveStatusBars>
    ccf4:	|         addq.l #4,sp
	saveSounds (fp);
    ccf6:	|         move.l 232(sp),-(sp)
    ccfa:	|         jsr d298 <saveSounds>
    cd00:	|         addq.l #4,sp

	put2bytes (saveEncoding, fp);
    cd02:	|         move.w 1cb3a <saveEncoding>,d0
    cd08:	|         move.w d0,d0
    cd0a:	|         andi.l #65535,d0
    cd10:	|         move.l 232(sp),-(sp)
    cd14:	|         move.l d0,-(sp)
    cd16:	|         jsr 8d0 <put2bytes>
    cd1c:	|         addq.l #8,sp

	saveParallaxRecursive (parallaxStuff, fp);
    cd1e:	|         move.l 1cb2c <parallaxStuff>,d0
    cd24:	|         move.l 232(sp),-(sp)
    cd28:	|         move.l d0,-(sp)
    cd2a:	|         jsr d590 <saveParallaxRecursive>
    cd30:	|         addq.l #8,sp
	FPutC (fp, 0);
    cd32:	|         move.l 232(sp),40(sp)
    cd38:	|         clr.l 36(sp)
    cd3c:	|         move.l 1ca8a <DOSBase>,d0
    cd42:	|         movea.l d0,a6
    cd44:	|         move.l 40(sp),d1
    cd48:	|         move.l 36(sp),d2
    cd4c:	|         jsr -312(a6)
    cd50:	|         move.l d0,32(sp)

	FPutC(fp, languageNum);	// Selected language
    cd54:	|         move.l 232(sp),28(sp)
    cd5a:	|         move.l 1c3fe <languageNum>,24(sp)
    cd62:	|         move.l 1ca8a <DOSBase>,d0
    cd68:	|         movea.l d0,a6
    cd6a:	|         move.l 28(sp),d1
    cd6e:	|         move.l 24(sp),d2
    cd72:	|         jsr -312(a6)
    cd76:	|         move.l d0,20(sp)

	Close(fp);
    cd7a:	|         move.l 232(sp),16(sp)
    cd80:	|         move.l 1ca8a <DOSBase>,d0
    cd86:	|         movea.l d0,a6
    cd88:	|         move.l 16(sp),d1
    cd8c:	|         jsr -36(a6)
    cd90:	|         move.l d0,12(sp)
	clearStackLib ();
    cd94:	|         jsr c390 <clearStackLib>
	return TRUE;
    cd9a:	|         moveq #1,d0
}
    cd9c:	\-------> movem.l (sp)+,d2-d3/a6
    cda0:	          lea 248(sp),sp
    cda4:	          rts

0000cda6 <saveStack>:

//----------------------------------------------------------------------
// For saving and loading stacks...
//----------------------------------------------------------------------

void saveStack (struct variableStack * vs, BPTR fp) {
    cda6:	       lea -12(sp),sp
	int elements = 0;
    cdaa:	       clr.l 8(sp)
	int a;

	struct variableStack * search = vs;
    cdae:	       move.l 16(sp),(sp)
	while (search) {
    cdb2:	   /-- bra.s cdbe <saveStack+0x18>
		elements ++;
    cdb4:	/--|-> addq.l #1,8(sp)
		search = search -> next;
    cdb8:	|  |   movea.l (sp),a0
    cdba:	|  |   move.l 8(a0),(sp)
	while (search) {
    cdbe:	|  \-> tst.l (sp)
    cdc0:	\----- bne.s cdb4 <saveStack+0xe>
	}

	put2bytes (elements, fp);
    cdc2:	       move.l 20(sp),-(sp)
    cdc6:	       move.l 12(sp),-(sp)
    cdca:	       jsr 8d0 <put2bytes>
    cdd0:	       addq.l #8,sp
	search = vs;
    cdd2:	       move.l 16(sp),(sp)
	for (a = 0; a < elements; a ++) {
    cdd6:	       clr.l 4(sp)
    cdda:	   /-- bra.s cdf6 <saveStack+0x50>
		saveVariable (& search -> thisVar, fp);
    cddc:	/--|-> move.l (sp),d0
    cdde:	|  |   move.l 20(sp),-(sp)
    cde2:	|  |   move.l d0,-(sp)
    cde4:	|  |   jsr cf32 <saveVariable>
    cdea:	|  |   addq.l #8,sp
		search = search -> next;
    cdec:	|  |   movea.l (sp),a0
    cdee:	|  |   move.l 8(a0),(sp)
	for (a = 0; a < elements; a ++) {
    cdf2:	|  |   addq.l #1,4(sp)
    cdf6:	|  \-> move.l 4(sp),d0
    cdfa:	|      cmp.l 8(sp),d0
    cdfe:	\----- blt.s cddc <saveStack+0x36>
	}
}
    ce00:	       nop
    ce02:	       nop
    ce04:	       lea 12(sp),sp
    ce08:	       rts

0000ce0a <saveStackRef>:


BOOL saveStackRef (struct stackHandler * vs, BPTR fp) {
    ce0a:	             lea -44(sp),sp
    ce0e:	             move.l a6,-(sp)
    ce10:	             move.l d2,-(sp)
	struct stackLibrary * s = stackLib;
    ce12:	             move.l 1cb12 <stackLib>,48(sp)
	int a = 0;
    ce1a:	             clr.l 44(sp)
	while (s) {
    ce1e:	      /----- bra.s ce7c <saveStackRef+0x72>
		if (s -> stack == vs) {
    ce20:	   /--|----> movea.l 48(sp),a0
    ce24:	   |  |      move.l (a0),d0
    ce26:	   |  |      cmp.l 56(sp),d0
    ce2a:	   |  |  /-- bne.s ce6e <saveStackRef+0x64>
			FPutC (fp, 1);
    ce2c:	   |  |  |   move.l 60(sp),16(sp)
    ce32:	   |  |  |   moveq #1,d0
    ce34:	   |  |  |   move.l d0,12(sp)
    ce38:	   |  |  |   move.l 1ca8a <DOSBase>,d0
    ce3e:	   |  |  |   movea.l d0,a6
    ce40:	   |  |  |   move.l 16(sp),d1
    ce44:	   |  |  |   move.l 12(sp),d2
    ce48:	   |  |  |   jsr -312(a6)
    ce4c:	   |  |  |   move.l d0,8(sp)
			put2bytes (stackLibTotal - a, fp);
    ce50:	   |  |  |   move.l 1cb0e <stackLibTotal>,d0
    ce56:	   |  |  |   sub.l 44(sp),d0
    ce5a:	   |  |  |   move.l 60(sp),-(sp)
    ce5e:	   |  |  |   move.l d0,-(sp)
    ce60:	   |  |  |   jsr 8d0 <put2bytes>
    ce66:	   |  |  |   addq.l #8,sp
			return TRUE;
    ce68:	   |  |  |   moveq #1,d0
    ce6a:	/--|--|--|-- bra.w cf28 <saveStackRef+0x11e>
		}
		s = s -> next;
    ce6e:	|  |  |  \-> movea.l 48(sp),a0
    ce72:	|  |  |      move.l 4(a0),48(sp)
		a ++;
    ce78:	|  |  |      addq.l #1,44(sp)
	while (s) {
    ce7c:	|  |  \----> tst.l 48(sp)
    ce80:	|  \-------- bne.s ce20 <saveStackRef+0x16>
	}
	FPutC (fp, 0);
    ce82:	|            move.l 60(sp),40(sp)
    ce88:	|            clr.l 36(sp)
    ce8c:	|            move.l 1ca8a <DOSBase>,d0
    ce92:	|            movea.l d0,a6
    ce94:	|            move.l 40(sp),d1
    ce98:	|            move.l 36(sp),d2
    ce9c:	|            jsr -312(a6)
    cea0:	|            move.l d0,32(sp)
	saveStack (vs -> first, fp);
    cea4:	|            movea.l 56(sp),a0
    cea8:	|            move.l (a0),d0
    ceaa:	|            move.l 60(sp),-(sp)
    ceae:	|            move.l d0,-(sp)
    ceb0:	|            jsr cda6 <saveStack>
    ceb6:	|            addq.l #8,sp
	s = AllocVec( sizeof(struct stackLibrary), MEMF_ANY);
    ceb8:	|            moveq #8,d0
    ceba:	|            move.l d0,28(sp)
    cebe:	|            clr.l 24(sp)
    cec2:	|            move.l 1ca82 <SysBase>,d0
    cec8:	|            movea.l d0,a6
    ceca:	|            move.l 28(sp),d0
    cece:	|            move.l 24(sp),d1
    ced2:	|            jsr -684(a6)
    ced6:	|            move.l d0,20(sp)
    ceda:	|            move.l 20(sp),d0
    cede:	|            move.l d0,48(sp)
	stackLibTotal ++;
    cee2:	|            move.l 1cb0e <stackLibTotal>,d0
    cee8:	|            addq.l #1,d0
    ceea:	|            move.l d0,1cb0e <stackLibTotal>
	if (! s) {
    cef0:	|            tst.l 48(sp)
    cef4:	|        /-- bne.s cf08 <saveStackRef+0xfe>
		KPrintF("saveStackRef: Cannot allocate memory");
    cef6:	|        |   pea 194ab <PutChar+0x167b>
    cefc:	|        |   jsr 17366 <KPrintF>
    cf02:	|        |   addq.l #4,sp
		return FALSE;
    cf04:	|        |   clr.w d0
    cf06:	+--------|-- bra.s cf28 <saveStackRef+0x11e>
	}
	s -> next = stackLib;
    cf08:	|        \-> move.l 1cb12 <stackLib>,d0
    cf0e:	|            movea.l 48(sp),a0
    cf12:	|            move.l d0,4(a0)
	s -> stack = vs;
    cf16:	|            movea.l 48(sp),a0
    cf1a:	|            move.l 56(sp),(a0)
	stackLib = s;
    cf1e:	|            move.l 48(sp),1cb12 <stackLib>
	return TRUE;
    cf26:	|            moveq #1,d0
}
    cf28:	\----------> move.l (sp)+,d2
    cf2a:	             movea.l (sp)+,a6
    cf2c:	             lea 44(sp),sp
    cf30:	             rts

0000cf32 <saveVariable>:

BOOL saveVariable (struct variable * from, BPTR fp)
{
    cf32:	          lea -12(sp),sp
    cf36:	          move.l a6,-(sp)
    cf38:	          move.l d2,-(sp)
	FPutC (fp,from -> varType);
    cf3a:	          move.l 28(sp),16(sp)
    cf40:	          movea.l 24(sp),a0
    cf44:	          move.l (a0),d0
    cf46:	          move.l d0,12(sp)
    cf4a:	          move.l 1ca8a <DOSBase>,d0
    cf50:	          movea.l d0,a6
    cf52:	          move.l 16(sp),d1
    cf56:	          move.l 12(sp),d2
    cf5a:	          jsr -312(a6)
    cf5e:	          move.l d0,8(sp)
	switch (from -> varType) {
    cf62:	          movea.l 24(sp),a0
    cf66:	          move.l (a0),d0
    cf68:	          moveq #9,d1
    cf6a:	          cmp.l d0,d1
    cf6c:	      /-- bcs.w d01c <saveVariable+0xea>
    cf70:	      |   add.l d0,d0
    cf72:	      |   movea.l d0,a0
    cf74:	      |   adda.l #53120,a0
    cf7a:	      |   move.w (a0),d0
    cf7c:	      |   jmp (cf80 <saveVariable+0x4e>,pc,d0.w)
    cf80:	      |   ori.l #1310740,(a0)+
    cf86:	      |   ori.b #20,(20,a0,d0.w)
    cf8c:	      |   .short 0x004c
    cf8e:	      |   ori.b #126,(a4)
    cf92:	      |   ori.w #8303,-(a4)
		case SVT_INT:
		case SVT_FUNC:
		case SVT_BUILT:
		case SVT_FILE:
		case SVT_OBJTYPE:
		put4bytes (from -> varData.intValue, fp);
    cf96:	      |   ori.b #40,(a0)+
    cf9a:	      |   ori.b #47,d4
    cf9e:	      |   ori.b #0,(a4)+
    cfa2:	      |   jsr 958 <put4bytes>
    cfa8:	      |   addq.l #8,sp
		return TRUE;
    cfaa:	      |   moveq #1,d0
    cfac:	/-----|-- bra.w d058 <saveVariable+0x126>

		case SVT_STRING:
		writeString (from -> varData.theString, fp);
    cfb0:	|     |   movea.l 24(sp),a0
    cfb4:	|     |   move.l 4(a0),d0
    cfb8:	|     |   move.l 28(sp),-(sp)
    cfbc:	|     |   move.l d0,-(sp)
    cfbe:	|     |   jsr bd8 <writeString>
    cfc4:	|     |   addq.l #8,sp
		return TRUE;
    cfc6:	|     |   moveq #1,d0
    cfc8:	+-----|-- bra.w d058 <saveVariable+0x126>

		case SVT_STACK:
		return saveStackRef (from -> varData.theStack, fp);
    cfcc:	|     |   movea.l 24(sp),a0
    cfd0:	|     |   move.l 4(a0),d0
    cfd4:	|     |   move.l 28(sp),-(sp)
    cfd8:	|     |   move.l d0,-(sp)
    cfda:	|     |   jsr ce0a <saveStackRef>
    cfe0:	|     |   addq.l #8,sp
    cfe2:	+-----|-- bra.s d058 <saveVariable+0x126>

		case SVT_COSTUME:
		saveCostume (from -> varData.costumeHandler, fp);
    cfe4:	|     |   movea.l 24(sp),a0
    cfe8:	|     |   move.l 4(a0),d0
    cfec:	|     |   move.l 28(sp),-(sp)
    cff0:	|     |   move.l d0,-(sp)
    cff2:	|     |   jsr b180 <saveCostume>
    cff8:	|     |   addq.l #8,sp
		return FALSE;
    cffa:	|     |   clr.w d0
    cffc:	+-----|-- bra.s d058 <saveVariable+0x126>

		case SVT_ANIM:
		saveAnim (from -> varData.animHandler, fp);
    cffe:	|     |   movea.l 24(sp),a0
    d002:	|     |   move.l 4(a0),d0
    d006:	|     |   move.l 28(sp),-(sp)
    d00a:	|     |   move.l d0,-(sp)
    d00c:	|     |   jsr b0b6 <saveAnim>
    d012:	|     |   addq.l #8,sp
		return FALSE;
    d014:	|     |   clr.w d0
    d016:	+-----|-- bra.s d058 <saveVariable+0x126>

		case SVT_NULL:
		return FALSE;
    d018:	|     |   clr.w d0
    d01a:	+-----|-- bra.s d058 <saveVariable+0x126>

		default:
		KPrintF("Can't save variables of this type:",
					(from->varType < SVT_NUM_TYPES) ?
    d01c:	|     \-> movea.l 24(sp),a0
    d020:	|         move.l (a0),d0
		KPrintF("Can't save variables of this type:",
    d022:	|         moveq #10,d1
    d024:	|         cmp.l d0,d1
    d026:	|  /----- bcs.s d040 <saveVariable+0x10e>
						typeName[from->varType] :
    d028:	|  |      movea.l 24(sp),a0
    d02c:	|  |      move.l (a0),d0
		KPrintF("Can't save variables of this type:",
    d02e:	|  |      add.l d0,d0
    d030:	|  |      movea.l d0,a1
    d032:	|  |      adda.l d0,a1
    d034:	|  |      lea 1c95e <typeName>,a0
    d03a:	|  |      move.l (0,a1,a0.l),d0
    d03e:	|  |  /-- bra.s d046 <saveVariable+0x114>
    d040:	|  \--|-> move.l #103632,d0
    d046:	|     \-> move.l d0,-(sp)
    d048:	|         pea 194d7 <PutChar+0x16a7>
    d04e:	|         jsr 17366 <KPrintF>
    d054:	|         addq.l #8,sp
						"bad ID");						
	}
	return TRUE;
    d056:	|         moveq #1,d0
    d058:	\-------> move.l (sp)+,d2
    d05a:	          movea.l (sp)+,a6
    d05c:	          lea 12(sp),sp
    d060:	          rts

0000d062 <CsiCheckInput>:
extern struct inputType input;

UWORD counterx_old = 0;
UWORD countery_old = 0;

void CsiCheckInput() {
    d062:	          lea -12(sp),sp
    volatile struct Custom *custom = (struct Custom*)0xdff000;
    d066:	          move.l #14675968,4(sp)
    UWORD value = custom->joy0dat;
    d06e:	          movea.l 4(sp),a0
    d072:	          move.w 10(a0),2(sp)
    UBYTE countery_new = (UBYTE) (custom->joy0dat >> 8);
    d078:	          movea.l 4(sp),a0
    d07c:	          move.w 10(a0),d0
    d080:	          lsr.w #8,d0
    d082:	          move.b d0,1(sp)
    UBYTE counterx_new = (UBYTE) (custom->joy0dat & 0xffff);
    d086:	          movea.l 4(sp),a0
    d08a:	          move.w 10(a0),d0
    d08e:	          move.b d0,(sp)

    if(counterx_new)
    d090:	/-------- beq.w d136 <CsiCheckInput+0xd4>
    {
        WORD counterx_diff = counterx_new - counterx_old;
    d094:	|         clr.w d1
    d096:	|         move.b (sp),d1
    d098:	|         move.w 1cb1a <counterx_old>,d0
    d09e:	|         sub.w d0,d1
    d0a0:	|         move.w d1,10(sp)

        if(counterx_diff > 127) {
    d0a4:	|         cmpi.w #128,10(sp)
    d0aa:	|     /-- blt.s d0c2 <CsiCheckInput+0x60>
            input.justMoved = TRUE;                
    d0ac:	|     |   move.w #1,1ca38 <input+0x4>
            counterx_diff -= 256;    
    d0b4:	|     |   move.w 10(sp),d0
    d0b8:	|     |   addi.w #-256,d0
    d0bc:	|     |   move.w d0,10(sp)
    d0c0:	|  /--|-- bra.s d0ee <CsiCheckInput+0x8c>
        } else if (counterx_diff < -128) {
    d0c2:	|  |  \-> cmpi.w #-129,10(sp)
    d0c8:	|  |  /-- bgt.s d0e0 <CsiCheckInput+0x7e>
            counterx_diff += 256;
    d0ca:	|  |  |   move.w 10(sp),d0
    d0ce:	|  |  |   addi.w #256,d0
    d0d2:	|  |  |   move.w d0,10(sp)
            input.justMoved = TRUE;
    d0d6:	|  |  |   move.w #1,1ca38 <input+0x4>
    d0de:	|  +--|-- bra.s d0ee <CsiCheckInput+0x8c>
        } else if (counterx_diff) {
    d0e0:	|  |  \-> tst.w 10(sp)
    d0e4:	|  +----- beq.s d0ee <CsiCheckInput+0x8c>
            input.justMoved = TRUE;
    d0e6:	|  |      move.w #1,1ca38 <input+0x4>
        }

        input.mouseX += counterx_diff;
    d0ee:	|  \----> move.l 1ca3e <input+0xa>,d0
    d0f4:	|         movea.w 10(sp),a0
    d0f8:	|         add.l a0,d0
    d0fa:	|         move.l d0,1ca3e <input+0xa>

        if( input.mouseX > (int) winWidth) {
    d100:	|         move.l 1ca3e <input+0xa>,d1
    d106:	|         move.l 1c9d6 <winWidth>,d0
    d10c:	|         cmp.l d1,d0
    d10e:	|     /-- bge.s d11e <CsiCheckInput+0xbc>
            input.mouseX = winWidth;            
    d110:	|     |   move.l 1c9d6 <winWidth>,d0
    d116:	|     |   move.l d0,1ca3e <input+0xa>
    d11c:	|  /--|-- bra.s d12c <CsiCheckInput+0xca>
        }
        else if(input.mouseX < 0) {
    d11e:	|  |  \-> move.l 1ca3e <input+0xa>,d0
    d124:	|  +----- bpl.s d12c <CsiCheckInput+0xca>
            input.mouseX = 0;
    d126:	|  |      clr.l 1ca3e <input+0xa>
        }

        //KPrintF("CsiCheckInput: MouseX = %d\n", input.mouseX);
        counterx_old = counterx_new;
    d12c:	|  \----> clr.w d0
    d12e:	|         move.b (sp),d0
    d130:	|         move.w d0,1cb1a <counterx_old>
    }    

    if(countery_new)
    d136:	\-------> tst.b 1(sp)
    d13a:	/-------- beq.w d1e4 <CsiCheckInput+0x182>
    {
        WORD countery_diff = countery_new - countery_old;
    d13e:	|         clr.w d1
    d140:	|         move.b 1(sp),d1
    d144:	|         move.w 1cb1c <countery_old>,d0
    d14a:	|         sub.w d0,d1
    d14c:	|         move.w d1,8(sp)

        if(countery_diff > 127) {
    d150:	|         cmpi.w #128,8(sp)
    d156:	|     /-- blt.s d16e <CsiCheckInput+0x10c>
            input.justMoved = TRUE;                
    d158:	|     |   move.w #1,1ca38 <input+0x4>
            countery_diff -= 256;    
    d160:	|     |   move.w 8(sp),d0
    d164:	|     |   addi.w #-256,d0
    d168:	|     |   move.w d0,8(sp)
    d16c:	|  /--|-- bra.s d19a <CsiCheckInput+0x138>
        } else if (countery_diff < -128) {
    d16e:	|  |  \-> cmpi.w #-129,8(sp)
    d174:	|  |  /-- bgt.s d18c <CsiCheckInput+0x12a>
            input.justMoved = TRUE;                
    d176:	|  |  |   move.w #1,1ca38 <input+0x4>
            countery_diff += 256;
    d17e:	|  |  |   move.w 8(sp),d0
    d182:	|  |  |   addi.w #256,d0
    d186:	|  |  |   move.w d0,8(sp)
    d18a:	|  +--|-- bra.s d19a <CsiCheckInput+0x138>
        } else if (countery_diff) {
    d18c:	|  |  \-> tst.w 8(sp)
    d190:	|  +----- beq.s d19a <CsiCheckInput+0x138>
            input.justMoved = TRUE;
    d192:	|  |      move.w #1,1ca38 <input+0x4>
        }

        input.mouseY += countery_diff;
    d19a:	|  \----> move.l 1ca42 <input+0xe>,d0
    d1a0:	|         movea.w 8(sp),a0
    d1a4:	|         add.l a0,d0
    d1a6:	|         move.l d0,1ca42 <input+0xe>

        if( input.mouseY > (int) winHeight) {
    d1ac:	|         move.l 1ca42 <input+0xe>,d1
    d1b2:	|         move.l 1c9da <winHeight>,d0
    d1b8:	|         cmp.l d1,d0
    d1ba:	|     /-- bge.s d1ca <CsiCheckInput+0x168>
            input.mouseY = winHeight;            
    d1bc:	|     |   move.l 1c9da <winHeight>,d0
    d1c2:	|     |   move.l d0,1ca42 <input+0xe>
    d1c8:	|  /--|-- bra.s d1d8 <CsiCheckInput+0x176>
        }
        else if(input.mouseY < 0) {
    d1ca:	|  |  \-> move.l 1ca42 <input+0xe>,d0
    d1d0:	|  +----- bpl.s d1d8 <CsiCheckInput+0x176>
            input.mouseY = 0;
    d1d2:	|  |      clr.l 1ca42 <input+0xe>
        }

        //KPrintF("CsiCheckInput: MouseX = %d\n", input.mouseX);
        countery_old = countery_new;
    d1d8:	|  \----> clr.w d0
    d1da:	|         move.b 1(sp),d0
    d1de:	|         move.w d0,1cb1c <countery_old>
    } 

    if(input.leftClick && ((*(volatile UBYTE*)0xbfe001)&64))
    d1e4:	\-------> move.w 1ca34 <input>,d0
    d1ea:	      /-- beq.s d210 <CsiCheckInput+0x1ae>
    d1ec:	      |   movea.l #12574721,a0
    d1f2:	      |   move.b (a0),d0
    d1f4:	      |   move.b d0,d0
    d1f6:	      |   andi.l #255,d0
    d1fc:	      |   moveq #64,d1
    d1fe:	      |   and.l d1,d0
    d200:	      +-- beq.s d210 <CsiCheckInput+0x1ae>
    {
        input.leftClick = FALSE;
    d202:	      |   clr.w 1ca34 <input>
        input.leftRelease = TRUE;
    d208:	      |   move.w #1,1ca3a <input+0x6>
    }

    if(input.rightClick && ((*(volatile UWORD*)0xdff016)&(1<<10)))
    d210:	      \-> move.w 1ca36 <input+0x2>,d0
    d216:	      /-- beq.s d23e <CsiCheckInput+0x1dc>
    d218:	      |   movea.l #14675990,a0
    d21e:	      |   move.w (a0),d0
    d220:	      |   move.w d0,d0
    d222:	      |   andi.l #65535,d0
    d228:	      |   andi.l #1024,d0
    d22e:	      +-- beq.s d23e <CsiCheckInput+0x1dc>
    {
        input.rightClick = FALSE;
    d230:	      |   clr.w 1ca36 <input+0x2>
        input.rightRelease = TRUE;
    d236:	      |   move.w #1,1ca3c <input+0x8>
    }


    if(!((*(volatile UBYTE*)0xbfe001)&64)) {
    d23e:	      \-> movea.l #12574721,a0
    d244:	          move.b (a0),d0
    d246:	          move.b d0,d0
    d248:	          andi.l #255,d0
    d24e:	          moveq #64,d1
    d250:	          and.l d1,d0
    d252:	      /-- bne.s d25c <CsiCheckInput+0x1fa>
        input.leftClick = TRUE;        
    d254:	      |   move.w #1,1ca34 <input>
    } 
    if(!((*(volatile UWORD*)0xdff016)&(1<<10)) ) {
    d25c:	      \-> movea.l #14675990,a0
    d262:	          move.w (a0),d0
    d264:	          move.w d0,d0
    d266:	          andi.l #65535,d0
    d26c:	          andi.l #1024,d0
    d272:	      /-- bne.s d27c <CsiCheckInput+0x21a>
        input.rightClick = TRUE;
    d274:	      |   move.w #1,1ca36 <input+0x2>
    }

    d27c:	      \-> nop
    d27e:	          lea 12(sp),sp
    d282:	          rts

0000d284 <cacheSound>:

struct soundThing soundCache[MAX_SAMPLES];

int cacheSound (int f) {
//#pragma unused (f)
	return 0;
    d284:	moveq #0,d0
}
    d286:	rts

0000d288 <huntKillFreeSound>:

void huntKillFreeSound (int filenum) {
//#pragma unused(filenum)
}
    d288:	nop
    d28a:	rts

0000d28c <huntKillSound>:

void huntKillSound (int filenum) {
//#pragma unused(filenum)
}
    d28c:	nop
    d28e:	rts

0000d290 <playMOD>:
	defVol = get2bytes (fp);
}

BOOL playMOD (int f, int a, int fromTrack) {
//#pragma unused (f,a,fromTrack)
    return TRUE;
    d290:	moveq #1,d0
}
    d292:	rts

0000d294 <playSoundList>:

void playSoundList(struct soundList *s) {
}
    d294:	nop
    d296:	rts

0000d298 <saveSounds>:

void saveSounds (BPTR fp) {
    d298:	lea -12(sp),sp
    d29c:	move.l a6,-(sp)
    d29e:	move.l d2,-(sp)
	FPutC (fp,0);
    d2a0:	move.l 24(sp),16(sp)
    d2a6:	clr.l 12(sp)
    d2aa:	move.l 1ca8a <DOSBase>,d0
    d2b0:	movea.l d0,a6
    d2b2:	move.l 16(sp),d1
    d2b6:	move.l 12(sp),d2
    d2ba:	jsr -312(a6)
    d2be:	move.l d0,8(sp)
	put2bytes (defSoundVol, fp);
    d2c2:	move.l 1c41c <defSoundVol>,d0
    d2c8:	move.l 24(sp),-(sp)
    d2cc:	move.l d0,-(sp)
    d2ce:	jsr 8d0 <put2bytes>
    d2d4:	addq.l #8,sp
	put2bytes (defVol, fp);
    d2d6:	move.l 1c418 <defVol>,d0
    d2dc:	move.l 24(sp),-(sp)
    d2e0:	move.l d0,-(sp)
    d2e2:	jsr 8d0 <put2bytes>
    d2e8:	addq.l #8,sp
}
    d2ea:	nop
    d2ec:	move.l (sp)+,d2
    d2ee:	movea.l (sp)+,a6
    d2f0:	lea 12(sp),sp
    d2f4:	rts

0000d2f6 <setDefaultMusicVolume>:

void setDefaultMusicVolume (int v) {
	defVol = v;
    d2f6:	move.l 4(sp),1c418 <defVol>
}
    d2fe:	nop
    d300:	rts

0000d302 <setDefaultSoundVolume>:

void setDefaultSoundVolume (int v) {
	defSoundVol = v;
    d302:	move.l 4(sp),1c41c <defSoundVol>
}
    d30a:	nop
    d30c:	rts

0000d30e <setSoundLoop>:

void setSoundLoop (int a, int s, int e) {
//#pragma unused (a,s,e)
}
    d30e:	nop
    d310:	rts

0000d312 <setMusicVolume>:

void setMusicVolume (int a, int v) {
//#pragma unused (a,v)
}
    d312:	nop
    d314:	rts

0000d316 <setSoundVolume>:

void setSoundVolume (int a, int v) {
//#pragma unused (a,v)
}
    d316:	nop
    d318:	rts

0000d31a <startSound>:

BOOL startSound (int f, BOOL loopy) {	
    d31a:	subq.l #4,sp
    d31c:	move.l 12(sp),d0
    d320:	move.w d0,d0
    d322:	move.w d0,2(sp)
//#pragma unused (f,loopy)
	return TRUE;
    d326:	moveq #1,d0
}
    d328:	addq.l #4,sp
    d32a:	rts

0000d32c <stopMOD>:

void stopMOD (int i) {
//#pragma unused(i)
    d32c:	nop
    d32e:	rts

0000d330 <blankScreen>:
int viewportWidth = 320;
int viewportOffsetX = 0, viewportOffsetY = 0;
unsigned int snapshotTextureName = 0;

void blankScreen(int x1, int y1, int x2, int y2) {
	CstBlankScreen(x2, y2);
    d330:	move.l 16(sp),-(sp)
    d334:	move.l 16(sp),-(sp)
    d338:	jsr e0e <CstBlankScreen>
    d33e:	addq.l #8,sp
}
    d340:	nop
    d342:	rts

0000d344 <darkScreen>:

void darkScreen () {
	KPrintF("darkScreen: Amiga: Graphics Display not implemented yet."); //Todo: Amigize this
    d344:	pea 194fa <PutChar+0x16ca>
    d34a:	jsr 17366 <KPrintF>
    d350:	addq.l #4,sp
}
    d352:	nop
    d354:	rts

0000d356 <drawHorizontalLine>:
	//Amiga todo: Maybe some parallaxstuff here?
	//}
}

void drawHorizontalLine (unsigned int x1, unsigned int y, unsigned int x2) {
	drawLine (x1, y, x2, y);
    d356:	movea.l 8(sp),a1
    d35a:	movea.l 12(sp),a0
    d35e:	move.l 8(sp),d1
    d362:	move.l 4(sp),d0
    d366:	move.l a1,-(sp)
    d368:	move.l a0,-(sp)
    d36a:	move.l d1,-(sp)
    d36c:	move.l d0,-(sp)
    d36e:	jsr 3f9c <drawLine>
    d374:	lea 16(sp),sp
}
    d378:	nop
    d37a:	rts

0000d37c <drawVerticalLine>:


void drawVerticalLine (unsigned int x, unsigned int y1, unsigned int y2) {
	drawLine (x, y1, x, y2);
    d37c:	movea.l 12(sp),a1
    d380:	movea.l 4(sp),a0
    d384:	move.l 8(sp),d1
    d388:	move.l 4(sp),d0
    d38c:	move.l a1,-(sp)
    d38e:	move.l a0,-(sp)
    d390:	move.l d1,-(sp)
    d392:	move.l d0,-(sp)
    d394:	jsr 3f9c <drawLine>
    d39a:	lea 16(sp),sp
}
    d39e:	nop
    d3a0:	rts

0000d3a2 <hardScroll>:

void hardScroll (int distance) {
   	KPrintF("Amiga: Function not implemented."); //Todo: Amigize this
    d3a2:	pea 19533 <PutChar+0x1703>
    d3a8:	jsr 17366 <KPrintF>
    d3ae:	addq.l #4,sp
}
    d3b0:	nop
    d3b2:	rts

0000d3b4 <killBackDrop>:


void killBackDrop () {
	CstFreeBuffer();
    d3b4:	jsr 1d86 <CstFreeBuffer>
	deleteTextures (1, &backdropTextureName);
    d3ba:	pea 1cb26 <backdropTextureName>
    d3c0:	pea 1 <_start+0x1>
    d3c4:	jsr 411e <deleteTextures>
    d3ca:	addq.l #8,sp
	backdropTextureName = 0;
    d3cc:	clr.l 1cb26 <backdropTextureName>
	backdropExists = FALSE;
    d3d2:	clr.w 1cb2a <backdropExists>
}
    d3d8:	nop
    d3da:	rts

0000d3dc <killParallax>:

void killParallax () {
    d3dc:	          lea -12(sp),sp
    d3e0:	          move.l a6,-(sp)
	while (parallaxStuff) {
    d3e2:	   /----- bra.s d44e <killParallax+0x72>

		struct parallaxLayer * k = parallaxStuff;
    d3e4:	/--|----> move.l 1cb2c <parallaxStuff>,12(sp)
		parallaxStuff = k->next;
    d3ec:	|  |      movea.l 12(sp),a0
    d3f0:	|  |      move.l 42(a0),d0
    d3f4:	|  |      move.l d0,1cb2c <parallaxStuff>

		// Now kill the image
		deleteTextures (1, &k->textureName);
    d3fa:	|  |      move.l 12(sp),d0
    d3fe:	|  |      addq.l #4,d0
    d400:	|  |      move.l d0,-(sp)
    d402:	|  |      pea 1 <_start+0x1>
    d406:	|  |      jsr 411e <deleteTextures>
    d40c:	|  |      addq.l #8,sp
		if( k->texture) FreeVec(k->texture);
    d40e:	|  |      movea.l 12(sp),a0
    d412:	|  |      move.l (a0),d0
    d414:	|  |  /-- beq.s d42e <killParallax+0x52>
    d416:	|  |  |   movea.l 12(sp),a0
    d41a:	|  |  |   move.l (a0),8(sp)
    d41e:	|  |  |   move.l 1ca82 <SysBase>,d0
    d424:	|  |  |   movea.l d0,a6
    d426:	|  |  |   movea.l 8(sp),a1
    d42a:	|  |  |   jsr -690(a6)
		if( k) FreeVec(k);
    d42e:	|  |  \-> tst.l 12(sp)
    d432:	|  |  /-- beq.s d44a <killParallax+0x6e>
    d434:	|  |  |   move.l 12(sp),4(sp)
    d43a:	|  |  |   move.l 1ca82 <SysBase>,d0
    d440:	|  |  |   movea.l d0,a6
    d442:	|  |  |   movea.l 4(sp),a1
    d446:	|  |  |   jsr -690(a6)
		k = NULL;
    d44a:	|  |  \-> clr.l 12(sp)
	while (parallaxStuff) {
    d44e:	|  \----> move.l 1cb2c <parallaxStuff>,d0
    d454:	\-------- bne.s d3e4 <killParallax+0x8>
	}
}
    d456:	          nop
    d458:	          nop
    d45a:	          movea.l (sp)+,a6
    d45c:	          lea 12(sp),sp
    d460:	          rts

0000d462 <loadBackDrop>:

void loadBackDrop (int fileNum, int x, int y) {
	if (! openFileFromNum (fileNum)) {
    d462:	       move.l 4(sp),-(sp)
    d466:	       jsr 6eb0 <openFileFromNum>
    d46c:	       addq.l #4,sp
    d46e:	       tst.l d0
    d470:	   /-- bne.s d482 <loadBackDrop+0x20>
		KPrintF("Can't load overlay image");
    d472:	   |   pea 19554 <PutChar+0x1724>
    d478:	   |   jsr 17366 <KPrintF>
    d47e:	   |   addq.l #4,sp
		return;
    d480:	/--|-- bra.s d4a2 <loadBackDrop+0x40>
	}
	CstLoadBackdrop( bigDataFile, x, y);
    d482:	|  \-> move.l 1ca6a <bigDataFile>,d0
    d488:	|      move.l 12(sp),-(sp)
    d48c:	|      move.l 12(sp),-(sp)
    d490:	|      move.l d0,-(sp)
    d492:	|      jsr 2034 <CstLoadBackdrop>
    d498:	|      lea 12(sp),sp
	finishAccess ();
    d49c:	|      jsr 6da8 <finishAccess>
	
}
    d4a2:	\----> rts

0000d4a4 <loadParallax>:
	
	backdropExists = TRUE;
	return TRUE;
}

BOOL loadParallax (unsigned short v, unsigned short fracX, unsigned short fracY) {
    d4a4:	subq.l #8,sp
    d4a6:	movea.l 12(sp),a0
    d4aa:	move.l 16(sp),d1
    d4ae:	move.l 20(sp),d0
    d4b2:	movea.w a0,a0
    d4b4:	move.w a0,6(sp)
    d4b8:	move.w d1,d1
    d4ba:	move.w d1,4(sp)
    d4be:	move.w d0,d0
    d4c0:	move.w d0,2(sp)
	KPrintF("loadParallax: Not implemented yet."); //Amiga Todo: Amigize this	
    d4c4:	pea 195a3 <PutChar+0x1773>
    d4ca:	jsr 17366 <KPrintF>
    d4d0:	addq.l #4,sp

}
    d4d2:	nop
    d4d4:	addq.l #8,sp
    d4d6:	rts

0000d4d8 <mixBackDrop>:

void mixBackDrop (int fileNum, int x, int y) {
	KPrintF("mixBackdrop: Amiga Graphics Display not implemented yet."); //Todo: Amigize this	
    d4d8:	pea 195c6 <PutChar+0x1796>
    d4de:	jsr 17366 <KPrintF>
    d4e4:	addq.l #4,sp
}
    d4e6:	nop
    d4e8:	rts

0000d4ea <nosnapshot>:

void nosnapshot () {
	deleteTextures (1, &snapshotTextureName);
    d4ea:	pea 1cb30 <snapshotTextureName>
    d4f0:	pea 1 <_start+0x1>
    d4f4:	jsr 411e <deleteTextures>
    d4fa:	addq.l #8,sp
	snapshotTextureName = 0;
    d4fc:	clr.l 1cb30 <snapshotTextureName>
}
    d502:	nop
    d504:	rts

0000d506 <reserveBackdrop>:

BOOL reserveBackdrop () {	
	cameraX = 0;
    d506:	clr.l 1cb3c <cameraX>
	cameraY = 0;
    d50c:	clr.l 1cb40 <cameraY>
	
	return CstReserveBackdrop(sceneWidth, sceneHeight);
    d512:	move.l 1cb22 <sceneHeight>,d0
    d518:	move.l d0,d1
    d51a:	move.l 1cb1e <sceneWidth>,d0
    d520:	move.l d1,-(sp)
    d522:	move.l d0,-(sp)
    d524:	jsr 3aa2 <CstReserveBackdrop>
    d52a:	addq.l #8,sp
}
    d52c:	rts

0000d52e <resizeBackdrop>:

BOOL resizeBackdrop (int x, int y) {
    killBackDrop ();
    d52e:	jsr d3b4 <killBackDrop>
	killParallax ();
    d534:	jsr d3dc <killParallax>
	killZBuffer ();
    d53a:	jsr 8852 <killZBuffer>
	sceneWidth = x;
    d540:	move.l 4(sp),d0
    d544:	move.l d0,1cb1e <sceneWidth>
	sceneHeight = y;
    d54a:	move.l 8(sp),d0
    d54e:	move.l d0,1cb22 <sceneHeight>
	KPrintF("resizeBackdrop: Reserving new Backdrop");
    d554:	pea 195ff <PutChar+0x17cf>
    d55a:	jsr 17366 <KPrintF>
    d560:	addq.l #4,sp
	return reserveBackdrop();
    d562:	jsr d506 <reserveBackdrop>
	KPrintF("resizeBackdrop: Backdrop reserved");	
}
    d568:	rts

0000d56a <restoreSnapshot>:

BOOL restoreSnapshot (BPTR fp) {
    d56a:	subq.l #8,sp
	unsigned int picWidth = get2bytes (fp);
    d56c:	move.l 12(sp),-(sp)
    d570:	jsr 6bc <get2bytes>
    d576:	addq.l #4,sp
    d578:	move.l d0,4(sp)
	unsigned int picHeight = get2bytes (fp);
    d57c:	move.l 12(sp),-(sp)
    d580:	jsr 6bc <get2bytes>
    d586:	addq.l #4,sp
    d588:	move.l d0,(sp)

	//Todo: Amigize this?

	return TRUE;
    d58a:	moveq #1,d0
}
    d58c:	addq.l #8,sp
    d58e:	rts

0000d590 <saveParallaxRecursive>:

void saveParallaxRecursive (struct parallaxLayer * me, BPTR fp) {
    d590:	   /-> lea -12(sp),sp
    d594:	   |   move.l a6,-(sp)
    d596:	   |   move.l d2,-(sp)
	if (me) {
    d598:	   |   tst.l 24(sp)
    d59c:	/--|-- beq.w d632 <saveParallaxRecursive+0xa2>
		saveParallaxRecursive (me -> next, fp);
    d5a0:	|  |   movea.l 24(sp),a0
    d5a4:	|  |   move.l 42(a0),d0
    d5a8:	|  |   move.l 28(sp),-(sp)
    d5ac:	|  |   move.l d0,-(sp)
    d5ae:	|  \-- jsr d590 <saveParallaxRecursive>(pc)
    d5b2:	|      addq.l #8,sp
		FPutC (fp, 1);
    d5b4:	|      move.l 28(sp),16(sp)
    d5ba:	|      moveq #1,d0
    d5bc:	|      move.l d0,12(sp)
    d5c0:	|      move.l 1ca8a <DOSBase>,d0
    d5c6:	|      movea.l d0,a6
    d5c8:	|      move.l 16(sp),d1
    d5cc:	|      move.l 12(sp),d2
    d5d0:	|      jsr -312(a6)
    d5d4:	|      move.l d0,8(sp)
		put2bytes (me->fileNum, fp);
    d5d8:	|      movea.l 24(sp),a0
    d5dc:	|      move.w 28(a0),d0
    d5e0:	|      move.w d0,d0
    d5e2:	|      andi.l #65535,d0
    d5e8:	|      move.l 28(sp),-(sp)
    d5ec:	|      move.l d0,-(sp)
    d5ee:	|      jsr 8d0 <put2bytes>
    d5f4:	|      addq.l #8,sp
		put2bytes (me ->fractionX, fp);
    d5f6:	|      movea.l 24(sp),a0
    d5fa:	|      move.w 30(a0),d0
    d5fe:	|      move.w d0,d0
    d600:	|      andi.l #65535,d0
    d606:	|      move.l 28(sp),-(sp)
    d60a:	|      move.l d0,-(sp)
    d60c:	|      jsr 8d0 <put2bytes>
    d612:	|      addq.l #8,sp
		put2bytes (me->fractionY, fp);
    d614:	|      movea.l 24(sp),a0
    d618:	|      move.w 32(a0),d0
    d61c:	|      move.w d0,d0
    d61e:	|      andi.l #65535,d0
    d624:	|      move.l 28(sp),-(sp)
    d628:	|      move.l d0,-(sp)
    d62a:	|      jsr 8d0 <put2bytes>
    d630:	|      addq.l #8,sp
	}
}
    d632:	\----> nop
    d634:	       move.l (sp)+,d2
    d636:	       movea.l (sp)+,a6
    d638:	       lea 12(sp),sp
    d63c:	       rts

0000d63e <snapshot>:

BOOL snapshot () {

	KPrintF("snapshot: Not yet implemented on Amiga"); //Todo
    d63e:	pea 19626 <PutChar+0x17f6>
    d644:	jsr 17366 <KPrintF>
    d64a:	addq.l #4,sp
	return TRUE;
    d64c:	moveq #1,d0
    d64e:	rts

0000d650 <findObjectType>:
#include "moreio.h"
#include "support/gcc8_c_support.h"

struct objectType * allObjectTypes = NULL;

struct objectType * findObjectType (int i) {
    d650:	             subq.l #4,sp
	struct objectType * huntType = allObjectTypes;
    d652:	             move.l 1cb34 <allObjectTypes>,(sp)

	while (huntType) {
    d658:	      /----- bra.s d670 <findObjectType+0x20>
		if (huntType -> objectNum == i) return huntType;
    d65a:	   /--|----> movea.l (sp),a0
    d65c:	   |  |      move.l 4(a0),d0
    d660:	   |  |      cmp.l 8(sp),d0
    d664:	   |  |  /-- bne.s d66a <findObjectType+0x1a>
    d666:	   |  |  |   move.l (sp),d0
    d668:	/--|--|--|-- bra.s d680 <findObjectType+0x30>
		huntType = huntType -> next;
    d66a:	|  |  |  \-> movea.l (sp),a0
    d66c:	|  |  |      move.l 8(a0),(sp)
	while (huntType) {
    d670:	|  |  \----> tst.l (sp)
    d672:	|  \-------- bne.s d65a <findObjectType+0xa>
	}

	return loadObjectType (i);
    d674:	|            move.l 8(sp),-(sp)
    d678:	|            jsr d740 <loadObjectType>
    d67e:	|            addq.l #4,sp
}
    d680:	\----------> addq.l #4,sp
    d682:	             rts

0000d684 <getCombinationFunction>:

int getCombinationFunction (int withThis, int thisObject) {
    d684:	             lea -12(sp),sp
	int i, num = 0;
    d688:	             clr.l 4(sp)
	struct objectType * obj = findObjectType (thisObject);
    d68c:	             move.l 20(sp),-(sp)
    d690:	             jsr d650 <findObjectType>
    d696:	             addq.l #4,sp
    d698:	             move.l d0,(sp)

	for (i = 0; i < obj -> numCom; i ++) {
    d69a:	             clr.l 8(sp)
    d69e:	   /-------- bra.s d6d4 <getCombinationFunction+0x50>
		if (obj -> allCombis[i].withObj == withThis)
    d6a0:	/--|-------> movea.l (sp),a0
    d6a2:	|  |         move.l 38(a0),d1
    d6a6:	|  |         move.l 8(sp),d0
    d6aa:	|  |         lsl.l #3,d0
    d6ac:	|  |         movea.l d1,a0
    d6ae:	|  |         adda.l d0,a0
    d6b0:	|  |         move.l (a0),d0
    d6b2:	|  |         cmp.l 16(sp),d0
    d6b6:	|  |  /----- bne.s d6d0 <getCombinationFunction+0x4c>
		{
			num = obj -> allCombis[i].funcNum;
    d6b8:	|  |  |      movea.l (sp),a0
    d6ba:	|  |  |      move.l 38(a0),d1
    d6be:	|  |  |      move.l 8(sp),d0
    d6c2:	|  |  |      lsl.l #3,d0
    d6c4:	|  |  |      movea.l d1,a0
    d6c6:	|  |  |      adda.l d0,a0
    d6c8:	|  |  |      move.l 4(a0),4(sp)
			break;
    d6ce:	|  |  |  /-- bra.s d6e0 <getCombinationFunction+0x5c>
	for (i = 0; i < obj -> numCom; i ++) {
    d6d0:	|  |  \--|-> addq.l #1,8(sp)
    d6d4:	|  \-----|-> movea.l (sp),a0
    d6d6:	|        |   move.l 16(a0),d0
    d6da:	|        |   cmp.l 8(sp),d0
    d6de:	\--------|-- bgt.s d6a0 <getCombinationFunction+0x1c>
		}
	}

	return num;
    d6e0:	         \-> move.l 4(sp),d0
}
    d6e4:	             lea 12(sp),sp
    d6e8:	             rts

0000d6ea <initObjectTypes>:

BOOL initObjectTypes () {
	return TRUE;
    d6ea:	moveq #1,d0
}
    d6ec:	rts

0000d6ee <loadObjectRef>:

struct objectType * loadObjectRef (BPTR fp) {
    d6ee:	subq.l #8,sp
    d6f0:	move.l a6,-(sp)
	struct objectType * r = loadObjectType (get2bytes (fp));
    d6f2:	move.l 16(sp),-(sp)
    d6f6:	jsr 6bc <get2bytes>
    d6fc:	addq.l #4,sp
    d6fe:	move.l d0,-(sp)
    d700:	jsr d740 <loadObjectType>
    d706:	addq.l #4,sp
    d708:	move.l d0,8(sp)
	FreeVec(r -> screenName);
    d70c:	movea.l 8(sp),a0
    d710:	move.l (a0),4(sp)
    d714:	move.l 1ca82 <SysBase>,d0
    d71a:	movea.l d0,a6
    d71c:	movea.l 4(sp),a1
    d720:	jsr -690(a6)
	r -> screenName = readString (fp);
    d724:	move.l 16(sp),-(sp)
    d728:	jsr b02 <readString>
    d72e:	addq.l #4,sp
    d730:	movea.l 8(sp),a0
    d734:	move.l d0,(a0)
	return r;
    d736:	move.l 8(sp),d0
}
    d73a:	movea.l (sp)+,a6
    d73c:	addq.l #8,sp
    d73e:	rts

0000d740 <loadObjectType>:

struct objectType * loadObjectType (int i) {
    d740:	          lea -84(sp),sp
    d744:	          move.l a6,-(sp)
    d746:	          move.l a2,-(sp)
    int a, nameNum;
    struct objectType * newType = AllocVec(sizeof(struct objectType), MEMF_ANY);
    d748:	          moveq #42,d0
    d74a:	          move.l d0,84(sp)
    d74e:	          clr.l 80(sp)
    d752:	          move.l 1ca82 <SysBase>,d0
    d758:	          movea.l d0,a6
    d75a:	          move.l 84(sp),d0
    d75e:	          move.l 80(sp),d1
    d762:	          jsr -684(a6)
    d766:	          move.l d0,76(sp)
    d76a:	          move.l 76(sp),d0
    d76e:	          move.l d0,72(sp)

    if (newType) {
    d772:	/-------- beq.w d9ec <loadObjectType+0x2ac>
        if (openObjectSlice(i)) {
    d776:	|         move.l 96(sp),-(sp)
    d77a:	|         jsr 6f78 <openObjectSlice>
    d780:	|         addq.l #4,sp
    d782:	|         tst.w d0
    d784:	+-------- beq.w d9ec <loadObjectType+0x2ac>
            nameNum = get2bytes(bigDataFile);
    d788:	|         move.l 1ca6a <bigDataFile>,d0
    d78e:	|         move.l d0,-(sp)
    d790:	|         jsr 6bc <get2bytes>
    d796:	|         addq.l #4,sp
    d798:	|         move.l d0,68(sp)
            newType->r = (BYTE) FGetC(bigDataFile);
    d79c:	|         move.l 1ca6a <bigDataFile>,64(sp)
    d7a4:	|         move.l 1ca8a <DOSBase>,d0
    d7aa:	|         movea.l d0,a6
    d7ac:	|         move.l 64(sp),d1
    d7b0:	|         jsr -306(a6)
    d7b4:	|         move.l d0,60(sp)
    d7b8:	|         move.l 60(sp),d0
    d7bc:	|         move.l d0,d0
    d7be:	|         movea.l 72(sp),a0
    d7c2:	|         move.b d0,12(a0)
            newType->g = (BYTE) FGetC(bigDataFile);
    d7c6:	|         move.l 1ca6a <bigDataFile>,56(sp)
    d7ce:	|         move.l 1ca8a <DOSBase>,d0
    d7d4:	|         movea.l d0,a6
    d7d6:	|         move.l 56(sp),d1
    d7da:	|         jsr -306(a6)
    d7de:	|         move.l d0,52(sp)
    d7e2:	|         move.l 52(sp),d0
    d7e6:	|         move.l d0,d0
    d7e8:	|         movea.l 72(sp),a0
    d7ec:	|         move.b d0,13(a0)
            newType->b = (BYTE) FGetC(bigDataFile);
    d7f0:	|         move.l 1ca6a <bigDataFile>,48(sp)
    d7f8:	|         move.l 1ca8a <DOSBase>,d0
    d7fe:	|         movea.l d0,a6
    d800:	|         move.l 48(sp),d1
    d804:	|         jsr -306(a6)
    d808:	|         move.l d0,44(sp)
    d80c:	|         move.l 44(sp),d0
    d810:	|         move.l d0,d0
    d812:	|         movea.l 72(sp),a0
    d816:	|         move.b d0,14(a0)
            newType->speechGap = FGetC(bigDataFile);
    d81a:	|         move.l 1ca6a <bigDataFile>,40(sp)
    d822:	|         move.l 1ca8a <DOSBase>,d0
    d828:	|         movea.l d0,a6
    d82a:	|         move.l 40(sp),d1
    d82e:	|         jsr -306(a6)
    d832:	|         move.l d0,36(sp)
    d836:	|         move.l 36(sp),d0
    d83a:	|         movea.l 72(sp),a0
    d83e:	|         move.l d0,20(a0)
            newType->walkSpeed = FGetC(bigDataFile);
    d842:	|         move.l 1ca6a <bigDataFile>,32(sp)
    d84a:	|         move.l 1ca8a <DOSBase>,d0
    d850:	|         movea.l d0,a6
    d852:	|         move.l 32(sp),d1
    d856:	|         jsr -306(a6)
    d85a:	|         move.l d0,28(sp)
    d85e:	|         move.l 28(sp),d0
    d862:	|         movea.l 72(sp),a0
    d866:	|         move.l d0,24(a0)
            newType->wrapSpeech = get4bytes(bigDataFile);
    d86a:	|         move.l 1ca6a <bigDataFile>,d0
    d870:	|         move.l d0,-(sp)
    d872:	|         jsr 718 <get4bytes>
    d878:	|         addq.l #4,sp
    d87a:	|         movea.l 72(sp),a0
    d87e:	|         move.l d0,28(a0)
            newType->spinSpeed = get2bytes(bigDataFile);
    d882:	|         move.l 1ca6a <bigDataFile>,d0
    d888:	|         move.l d0,-(sp)
    d88a:	|         jsr 6bc <get2bytes>
    d890:	|         addq.l #4,sp
    d892:	|         movea.l 72(sp),a0
    d896:	|         move.l d0,32(a0)

            FGetC(bigDataFile);
    d89a:	|         move.l 1ca6a <bigDataFile>,24(sp)
    d8a2:	|         move.l 1ca8a <DOSBase>,d0
    d8a8:	|         movea.l d0,a6
    d8aa:	|         move.l 24(sp),d1
    d8ae:	|         jsr -306(a6)
    d8b2:	|         move.l d0,20(sp)
            getFloat(bigDataFile);
    d8b6:	|         move.l 1ca6a <bigDataFile>,d0
    d8bc:	|         move.l d0,-(sp)
    d8be:	|         jsr 7d8 <getFloat>
    d8c4:	|         addq.l #4,sp
            getFloat(bigDataFile);
    d8c6:	|         move.l 1ca6a <bigDataFile>,d0
    d8cc:	|         move.l d0,-(sp)
    d8ce:	|         jsr 7d8 <getFloat>
    d8d4:	|         addq.l #4,sp

            newType->flags = get2bytes(bigDataFile);
    d8d6:	|         move.l 1ca6a <bigDataFile>,d0
    d8dc:	|         move.l d0,-(sp)
    d8de:	|         jsr 6bc <get2bytes>
    d8e4:	|         addq.l #4,sp
    d8e6:	|         move.l d0,d0
    d8e8:	|         movea.l 72(sp),a0
    d8ec:	|         move.w d0,36(a0)

            newType->numCom = get2bytes(bigDataFile);
    d8f0:	|         move.l 1ca6a <bigDataFile>,d0
    d8f6:	|         move.l d0,-(sp)
    d8f8:	|         jsr 6bc <get2bytes>
    d8fe:	|         addq.l #4,sp
    d900:	|         movea.l 72(sp),a0
    d904:	|         move.l d0,16(a0)
            newType->allCombis = (newType->numCom) ? AllocVec(sizeof(struct combination) * newType->numCom, MEMF_ANY) : NULL;
    d908:	|         movea.l 72(sp),a0
    d90c:	|         move.l 16(a0),d0
    d910:	|  /----- beq.s d942 <loadObjectType+0x202>
    d912:	|  |      movea.l 72(sp),a0
    d916:	|  |      move.l 16(a0),d0
    d91a:	|  |      lsl.l #3,d0
    d91c:	|  |      move.l d0,16(sp)
    d920:	|  |      clr.l 12(sp)
    d924:	|  |      move.l 1ca82 <SysBase>,d0
    d92a:	|  |      movea.l d0,a6
    d92c:	|  |      move.l 16(sp),d0
    d930:	|  |      move.l 12(sp),d1
    d934:	|  |      jsr -684(a6)
    d938:	|  |      move.l d0,8(sp)
    d93c:	|  |      move.l 8(sp),d0
    d940:	|  |  /-- bra.s d944 <loadObjectType+0x204>
    d942:	|  \--|-> moveq #0,d0
    d944:	|     \-> movea.l 72(sp),a0
    d948:	|         move.l d0,38(a0)

            for (a = 0; a < newType->numCom; a++) {
    d94c:	|         clr.l 88(sp)
    d950:	|     /-- bra.s d9a0 <loadObjectType+0x260>
                newType->allCombis[a].withObj = get2bytes(bigDataFile);
    d952:	|  /--|-> move.l 1ca6a <bigDataFile>,d1
    d958:	|  |  |   movea.l 72(sp),a0
    d95c:	|  |  |   movea.l 38(a0),a0
    d960:	|  |  |   move.l 88(sp),d0
    d964:	|  |  |   lsl.l #3,d0
    d966:	|  |  |   lea (0,a0,d0.l),a2
    d96a:	|  |  |   move.l d1,-(sp)
    d96c:	|  |  |   jsr 6bc <get2bytes>
    d972:	|  |  |   addq.l #4,sp
    d974:	|  |  |   move.l d0,(a2)
                newType->allCombis[a].funcNum = get2bytes(bigDataFile);
    d976:	|  |  |   move.l 1ca6a <bigDataFile>,d1
    d97c:	|  |  |   movea.l 72(sp),a0
    d980:	|  |  |   movea.l 38(a0),a0
    d984:	|  |  |   move.l 88(sp),d0
    d988:	|  |  |   lsl.l #3,d0
    d98a:	|  |  |   lea (0,a0,d0.l),a2
    d98e:	|  |  |   move.l d1,-(sp)
    d990:	|  |  |   jsr 6bc <get2bytes>
    d996:	|  |  |   addq.l #4,sp
    d998:	|  |  |   move.l d0,4(a2)
            for (a = 0; a < newType->numCom; a++) {
    d99c:	|  |  |   addq.l #1,88(sp)
    d9a0:	|  |  \-> movea.l 72(sp),a0
    d9a4:	|  |      move.l 16(a0),d0
    d9a8:	|  |      cmp.l 88(sp),d0
    d9ac:	|  \----- bgt.s d952 <loadObjectType+0x212>
            }
            finishAccess();
    d9ae:	|         jsr 6da8 <finishAccess>
            newType->screenName = getNumberedString(nameNum);
    d9b4:	|         move.l 68(sp),-(sp)
    d9b8:	|         jsr 6db2 <getNumberedString>
    d9be:	|         addq.l #4,sp
    d9c0:	|         movea.l 72(sp),a0
    d9c4:	|         move.l d0,(a0)
            newType->objectNum = i;
    d9c6:	|         movea.l 72(sp),a0
    d9ca:	|         move.l 96(sp),4(a0)
            newType->next = allObjectTypes;
    d9d0:	|         move.l 1cb34 <allObjectTypes>,d0
    d9d6:	|         movea.l 72(sp),a0
    d9da:	|         move.l d0,8(a0)
            allObjectTypes = newType;
    d9de:	|         move.l 72(sp),1cb34 <allObjectTypes>
            return newType;
    d9e6:	|         move.l 72(sp),d0
    d9ea:	|     /-- bra.s d9ee <loadObjectType+0x2ae>
        }
    }
    return NULL;
    d9ec:	\-----|-> moveq #0,d0
}
    d9ee:	      \-> movea.l (sp)+,a2
    d9f0:	          movea.l (sp)+,a6
    d9f2:	          lea 84(sp),sp
    d9f6:	          rts

0000d9f8 <removeObjectType>:


void removeObjectType (struct objectType * oT) {
    d9f8:	             lea -16(sp),sp
    d9fc:	             move.l a6,-(sp)
	struct objectType * * huntRegion = &allObjectTypes;
    d9fe:	             move.l #117556,16(sp)

	while (* huntRegion) {
    da06:	   /-------- bra.s da7a <removeObjectType+0x82>
		if ((* huntRegion) == oT) {
    da08:	/--|-------> movea.l 16(sp),a0
    da0c:	|  |         move.l (a0),d0
    da0e:	|  |         cmp.l 24(sp),d0
    da12:	|  |  /----- bne.s da6c <removeObjectType+0x74>
//			FILE * debuggy2 = fopen ("debug.txt", "at");
//			fprintf (debuggy2, "DELETING OBJECT TYPE: %p %s\n", oT, oT -> screenName);
//			fclose (debuggy2);

			* huntRegion = oT -> next;
    da14:	|  |  |      movea.l 24(sp),a0
    da18:	|  |  |      move.l 8(a0),d0
    da1c:	|  |  |      movea.l 16(sp),a0
    da20:	|  |  |      move.l d0,(a0)
			FreeVec(oT -> allCombis);
    da22:	|  |  |      movea.l 24(sp),a0
    da26:	|  |  |      move.l 38(a0),12(sp)
    da2c:	|  |  |      move.l 1ca82 <SysBase>,d0
    da32:	|  |  |      movea.l d0,a6
    da34:	|  |  |      movea.l 12(sp),a1
    da38:	|  |  |      jsr -690(a6)
			FreeVec(oT -> screenName);
    da3c:	|  |  |      movea.l 24(sp),a0
    da40:	|  |  |      move.l (a0),8(sp)
    da44:	|  |  |      move.l 1ca82 <SysBase>,d0
    da4a:	|  |  |      movea.l d0,a6
    da4c:	|  |  |      movea.l 8(sp),a1
    da50:	|  |  |      jsr -690(a6)
			FreeVec(oT);
    da54:	|  |  |      move.l 24(sp),4(sp)
    da5a:	|  |  |      move.l 1ca82 <SysBase>,d0
    da60:	|  |  |      movea.l d0,a6
    da62:	|  |  |      movea.l 4(sp),a1
    da66:	|  |  |      jsr -690(a6)
			return;
    da6a:	|  |  |  /-- bra.s da90 <removeObjectType+0x98>
		} else {
			huntRegion = & ((* huntRegion) -> next);
    da6c:	|  |  \--|-> movea.l 16(sp),a0
    da70:	|  |     |   move.l (a0),d0
    da72:	|  |     |   move.l d0,d1
    da74:	|  |     |   addq.l #8,d1
    da76:	|  |     |   move.l d1,16(sp)
	while (* huntRegion) {
    da7a:	|  \-----|-> movea.l 16(sp),a0
    da7e:	|        |   move.l (a0),d0
    da80:	\--------|-- bne.s da08 <removeObjectType+0x10>
		}
	}
	KPrintF("Can't delete object type: bad pointer");
    da82:	         |   pea 1964d <PutChar+0x181d>
    da88:	         |   jsr 17366 <KPrintF>
    da8e:	         |   addq.l #4,sp
}
    da90:	         \-> movea.l (sp)+,a6
    da92:	             lea 16(sp),sp
    da96:	             rts

0000da98 <saveObjectRef>:

void saveObjectRef (struct objectType * r, BPTR fp) {
	put2bytes (r -> objectNum, fp);
    da98:	movea.l 4(sp),a0
    da9c:	move.l 4(a0),d0
    daa0:	move.l 8(sp),-(sp)
    daa4:	move.l d0,-(sp)
    daa6:	jsr 8d0 <put2bytes>
    daac:	addq.l #8,sp
	writeString (r -> screenName, fp);
    daae:	movea.l 4(sp),a0
    dab2:	move.l (a0),d0
    dab4:	move.l 8(sp),-(sp)
    dab8:	move.l d0,-(sp)
    daba:	jsr bd8 <writeString>
    dac0:	addq.l #8,sp
    dac2:	nop
    dac4:	rts

0000dac6 <fileToStack>:

char encode1 = 0;
char encode2 = 0;
unsigned short saveEncoding = FALSE;

BOOL fileToStack(char *filename, struct stackHandler *sH) {
    dac6:	                         lea -112(sp),sp
    daca:	                         move.l a6,-(sp)
    dacc:	                         move.l d2,-(sp)
    struct variable stringVar;
    stringVar.varType = SVT_NULL;
    dace:	                         clr.l 10(sp)
    const char *checker = saveEncoding ? "[Custom data (encoded)]\r\n" : "[Custom data (ASCII)]\n";
    dad2:	                         move.w 1cb3a <saveEncoding>,d0
    dad8:	                  /----- beq.s dae2 <fileToStack+0x1c>
    dada:	                  |      move.l #104051,d0
    dae0:	                  |  /-- bra.s dae8 <fileToStack+0x22>
    dae2:	                  \--|-> move.l #104077,d0
    dae8:	                     \-> move.l d0,116(sp)

    BPTR fp = Open(filename, MODE_OLDFILE);
    daec:	                         move.l 124(sp),112(sp)
    daf2:	                         move.l #1005,108(sp)
    dafa:	                         move.l 1ca8a <DOSBase>,d0
    db00:	                         movea.l d0,a6
    db02:	                         move.l 112(sp),d1
    db06:	                         move.l 108(sp),d2
    db0a:	                         jsr -30(a6)
    db0e:	                         move.l d0,104(sp)
    db12:	                         move.l 104(sp),d0
    db16:	                         move.l d0,100(sp)
    if (!fp) {
    db1a:	                     /-- bne.s db34 <fileToStack+0x6e>
        KPrintF("No such file", filename);
    db1c:	                     |   move.l 124(sp),-(sp)
    db20:	                     |   pea 196a4 <PutChar+0x1874>
    db26:	                     |   jsr 17366 <KPrintF>
    db2c:	                     |   addq.l #8,sp
        return FALSE;
    db2e:	                     |   clr.w d0
    db30:	/--------------------|-- bra.w de2a <fileToStack+0x364>
    }

    encode1 = (unsigned char)saveEncoding & 255;
    db34:	|                    \-> move.w 1cb3a <saveEncoding>,d0
    db3a:	|                        move.l d0,d0
    db3c:	|                        move.b d0,1cb38 <encode1>
    encode2 = (unsigned char)(saveEncoding >> 8);
    db42:	|                        move.w 1cb3a <saveEncoding>,d0
    db48:	|                        lsr.w #8,d0
    db4a:	|                        move.l d0,d0
    db4c:	|                        move.b d0,1cb39 <encode2>

    while (*checker) {
    db52:	|                 /----- bra.s dbb6 <fileToStack+0xf0>
        if (FGetC(fp) != *checker) {
    db54:	|              /--|----> move.l 100(sp),30(sp)
    db5a:	|              |  |      move.l 1ca8a <DOSBase>,d0
    db60:	|              |  |      movea.l d0,a6
    db62:	|              |  |      move.l 30(sp),d1
    db66:	|              |  |      jsr -306(a6)
    db6a:	|              |  |      move.l d0,26(sp)
    db6e:	|              |  |      move.l 26(sp),d1
    db72:	|              |  |      movea.l 116(sp),a0
    db76:	|              |  |      move.b (a0),d0
    db78:	|              |  |      ext.w d0
    db7a:	|              |  |      movea.w d0,a0
    db7c:	|              |  |      cmpa.l d1,a0
    db7e:	|              |  |  /-- beq.s dbb2 <fileToStack+0xec>
            Close(fp);
    db80:	|              |  |  |   move.l 100(sp),22(sp)
    db86:	|              |  |  |   move.l 1ca8a <DOSBase>,d0
    db8c:	|              |  |  |   movea.l d0,a6
    db8e:	|              |  |  |   move.l 22(sp),d1
    db92:	|              |  |  |   jsr -36(a6)
    db96:	|              |  |  |   move.l d0,18(sp)
            KPrintF(LOAD_ERROR "This isn't a SLUDGE custom data file:", filename);
    db9a:	|              |  |  |   move.l 124(sp),-(sp)
    db9e:	|              |  |  |   pea 196b1 <PutChar+0x1881>
    dba4:	|              |  |  |   jsr 17366 <KPrintF>
    dbaa:	|              |  |  |   addq.l #8,sp
            return FALSE;
    dbac:	|              |  |  |   clr.w d0
    dbae:	+--------------|--|--|-- bra.w de2a <fileToStack+0x364>
        }
        checker++;
    dbb2:	|              |  |  \-> addq.l #1,116(sp)
    while (*checker) {
    dbb6:	|              |  \----> movea.l 116(sp),a0
    dbba:	|              |         move.b (a0),d0
    dbbc:	|              \-------- bne.s db54 <fileToStack+0x8e>
    }

    if (saveEncoding) {
    dbbe:	|                        move.w 1cb3a <saveEncoding>,d0
    dbc4:	|  /-------------------- beq.s dc38 <fileToStack+0x172>
        char *checker = readStringEncoded(fp);
    dbc6:	|  |                     move.l 100(sp),-(sp)
    dbca:	|  |                     jsr de34 <readStringEncoded>
    dbd0:	|  |                     addq.l #4,sp
    dbd2:	|  |                     move.l d0,96(sp)
        if (strcmp(checker, "UN�LO�CKED")) {
    dbd6:	|  |                     pea 196f2 <PutChar+0x18c2>
    dbdc:	|  |                     move.l 100(sp),-(sp)
    dbe0:	|  |                     jsr 13db2 <strcmp>
    dbe6:	|  |                     addq.l #8,sp
    dbe8:	|  |                     tst.l d0
    dbea:	|  |                 /-- beq.s dc1e <fileToStack+0x158>
            Close(fp);
    dbec:	|  |                 |   move.l 100(sp),88(sp)
    dbf2:	|  |                 |   move.l 1ca8a <DOSBase>,d0
    dbf8:	|  |                 |   movea.l d0,a6
    dbfa:	|  |                 |   move.l 88(sp),d1
    dbfe:	|  |                 |   jsr -36(a6)
    dc02:	|  |                 |   move.l d0,84(sp)
            KPrintF(LOAD_ERROR "The current file encoding setting does not match the encoding setting used when this file was created:", filename);
    dc06:	|  |                 |   move.l 124(sp),-(sp)
    dc0a:	|  |                 |   pea 19701 <PutChar+0x18d1>
    dc10:	|  |                 |   jsr 17366 <KPrintF>
    dc16:	|  |                 |   addq.l #8,sp
            return FALSE;
    dc18:	|  |                 |   clr.w d0
    dc1a:	+--|-----------------|-- bra.w de2a <fileToStack+0x364>
        }
        FreeVec(checker);
    dc1e:	|  |                 \-> move.l 96(sp),92(sp)
    dc24:	|  |                     move.l 1ca82 <SysBase>,d0
    dc2a:	|  |                     movea.l d0,a6
    dc2c:	|  |                     movea.l 92(sp),a1
    dc30:	|  |                     jsr -690(a6)
        checker = NULL;
    dc34:	|  |                     clr.l 96(sp)
    }

    for (;;) {
        if (saveEncoding) {
    dc38:	|  >-------------------> move.w 1cb3a <saveEncoding>,d0
    dc3e:	|  |     /-------------- beq.w dd72 <fileToStack+0x2ac>
            LONG tmp = FGetC(fp) ^ encode1;
    dc42:	|  |     |               move.l 100(sp),76(sp)
    dc48:	|  |     |               move.l 1ca8a <DOSBase>,d0
    dc4e:	|  |     |               movea.l d0,a6
    dc50:	|  |     |               move.l 76(sp),d1
    dc54:	|  |     |               jsr -306(a6)
    dc58:	|  |     |               move.l d0,72(sp)
    dc5c:	|  |     |               move.l 72(sp),d0
    dc60:	|  |     |               move.b 1cb38 <encode1>,d1
    dc66:	|  |     |               ext.w d1
    dc68:	|  |     |               ext.l d1
    dc6a:	|  |     |               move.l d0,d2
    dc6c:	|  |     |               eor.l d1,d2
    dc6e:	|  |     |               move.l d2,68(sp)

            if (tmp == -1) break;
    dc72:	|  |     |               moveq #-1,d0
    dc74:	|  |     |               cmp.l 68(sp),d0
    dc78:	|  |  /--|-------------- beq.w de08 <fileToStack+0x342>

            char i = (char) tmp;
    dc7c:	|  |  |  |               move.b 71(sp),67(sp)

            switch (i) {
    dc82:	|  |  |  |               move.b 67(sp),d0
    dc86:	|  |  |  |               ext.w d0
    dc88:	|  |  |  |               movea.w d0,a0
    dc8a:	|  |  |  |               moveq #2,d2
    dc8c:	|  |  |  |               cmp.l a0,d2
    dc8e:	|  |  |  |     /-------- beq.s dd0a <fileToStack+0x244>
    dc90:	|  |  |  |     |         moveq #2,d0
    dc92:	|  |  |  |     |         cmp.l a0,d0
    dc94:	|  |  |  |  /--|-------- blt.w dd40 <fileToStack+0x27a>
    dc98:	|  |  |  |  |  |         cmpa.w #0,a0
    dc9c:	|  |  |  |  |  |     /-- beq.s dca8 <fileToStack+0x1e2>
    dc9e:	|  |  |  |  |  |     |   moveq #1,d2
    dca0:	|  |  |  |  |  |     |   cmp.l a0,d2
    dca2:	|  |  |  |  |  |  /--|-- beq.s dce4 <fileToStack+0x21e>
    dca4:	|  |  |  |  +--|--|--|-- bra.w dd40 <fileToStack+0x27a>
                case 0: {
                    char *g = readStringEncoded(fp);
    dca8:	|  |  |  |  |  |  |  \-> move.l 100(sp),-(sp)
    dcac:	|  |  |  |  |  |  |      jsr de34 <readStringEncoded>
    dcb2:	|  |  |  |  |  |  |      addq.l #4,sp
    dcb4:	|  |  |  |  |  |  |      move.l d0,54(sp)
                    makeTextVar(&stringVar, g);
    dcb8:	|  |  |  |  |  |  |      move.l 54(sp),-(sp)
    dcbc:	|  |  |  |  |  |  |      lea 14(sp),a0
    dcc0:	|  |  |  |  |  |  |      move.l a0,-(sp)
    dcc2:	|  |  |  |  |  |  |      jsr 14b28 <makeTextVar>
    dcc8:	|  |  |  |  |  |  |      addq.l #8,sp
                    FreeVec(g);
    dcca:	|  |  |  |  |  |  |      move.l 54(sp),50(sp)
    dcd0:	|  |  |  |  |  |  |      move.l 1ca82 <SysBase>,d0
    dcd6:	|  |  |  |  |  |  |      movea.l d0,a6
    dcd8:	|  |  |  |  |  |  |      movea.l 50(sp),a1
    dcdc:	|  |  |  |  |  |  |      jsr -690(a6)
                }
                break;
    dce0:	|  |  |  |  |  |  |  /-- bra.w dd98 <fileToStack+0x2d2>

                case 1:
                    setVariable(&stringVar, SVT_INT, get4bytes(fp));
    dce4:	|  |  |  |  |  |  \--|-> move.l 100(sp),-(sp)
    dce8:	|  |  |  |  |  |     |   jsr 718 <get4bytes>
    dcee:	|  |  |  |  |  |     |   addq.l #4,sp
    dcf0:	|  |  |  |  |  |     |   move.l d0,-(sp)
    dcf2:	|  |  |  |  |  |     |   pea 1 <_start+0x1>
    dcf6:	|  |  |  |  |  |     |   lea 18(sp),a0
    dcfa:	|  |  |  |  |  |     |   move.l a0,-(sp)
    dcfc:	|  |  |  |  |  |     |   jsr 151f8 <setVariable>
    dd02:	|  |  |  |  |  |     |   lea 12(sp),sp
                    break;
    dd06:	|  |  |  |  |  |     +-- bra.w dd98 <fileToStack+0x2d2>

                case 2:
                    setVariable(&stringVar, SVT_INT, FGetC(fp));
    dd0a:	|  |  |  |  |  \-----|-> move.l 100(sp),62(sp)
    dd10:	|  |  |  |  |        |   move.l 1ca8a <DOSBase>,d0
    dd16:	|  |  |  |  |        |   movea.l d0,a6
    dd18:	|  |  |  |  |        |   move.l 62(sp),d1
    dd1c:	|  |  |  |  |        |   jsr -306(a6)
    dd20:	|  |  |  |  |        |   move.l d0,58(sp)
    dd24:	|  |  |  |  |        |   move.l 58(sp),d0
    dd28:	|  |  |  |  |        |   move.l d0,-(sp)
    dd2a:	|  |  |  |  |        |   pea 1 <_start+0x1>
    dd2e:	|  |  |  |  |        |   lea 18(sp),a0
    dd32:	|  |  |  |  |        |   move.l a0,-(sp)
    dd34:	|  |  |  |  |        |   jsr 151f8 <setVariable>
    dd3a:	|  |  |  |  |        |   lea 12(sp),sp
                    break;
    dd3e:	|  |  |  |  |        +-- bra.s dd98 <fileToStack+0x2d2>

                default:
                    KPrintF(LOAD_ERROR "Corrupt custom data file:", filename);
    dd40:	|  |  |  |  \--------|-> move.l 124(sp),-(sp)
    dd44:	|  |  |  |           |   pea 19783 <PutChar+0x1953>
    dd4a:	|  |  |  |           |   jsr 17366 <KPrintF>
    dd50:	|  |  |  |           |   addq.l #8,sp
                    Close(fp);
    dd52:	|  |  |  |           |   move.l 100(sp),46(sp)
    dd58:	|  |  |  |           |   move.l 1ca8a <DOSBase>,d0
    dd5e:	|  |  |  |           |   movea.l d0,a6
    dd60:	|  |  |  |           |   move.l 46(sp),d1
    dd64:	|  |  |  |           |   jsr -36(a6)
    dd68:	|  |  |  |           |   move.l d0,42(sp)
                    return FALSE;
    dd6c:	|  |  |  |           |   clr.w d0
    dd6e:	+--|--|--|-----------|-- bra.w de2a <fileToStack+0x364>
            }
        } else {
            char *line = readTextPlain(fp);
    dd72:	|  |  |  \-----------|-> move.l 100(sp),-(sp)
    dd76:	|  |  |              |   jsr defa <readTextPlain>
    dd7c:	|  |  |              |   addq.l #4,sp
    dd7e:	|  |  |              |   move.l d0,80(sp)
            if (!line) break;
    dd82:	|  |  |        /-----|-- beq.w de0c <fileToStack+0x346>
            makeTextVar(&stringVar, line);
    dd86:	|  |  |        |     |   move.l 80(sp),-(sp)
    dd8a:	|  |  |        |     |   lea 14(sp),a0
    dd8e:	|  |  |        |     |   move.l a0,-(sp)
    dd90:	|  |  |        |     |   jsr 14b28 <makeTextVar>
    dd96:	|  |  |        |     |   addq.l #8,sp
        }

        if (sH->first == NULL) {
    dd98:	|  |  |        |     \-> movea.l 128(sp),a0
    dd9c:	|  |  |        |         move.l (a0),d0
    dd9e:	|  |  |        |  /----- bne.s ddce <fileToStack+0x308>
            // Adds to the TOP of the array... oops!
            if (!addVarToStackQuick(&stringVar, &sH->first)) return FALSE;
    dda0:	|  |  |        |  |      move.l 128(sp),d0
    dda4:	|  |  |        |  |      move.l d0,-(sp)
    dda6:	|  |  |        |  |      lea 14(sp),a0
    ddaa:	|  |  |        |  |      move.l a0,-(sp)
    ddac:	|  |  |        |  |      jsr 141c8 <addVarToStackQuick>
    ddb2:	|  |  |        |  |      addq.l #8,sp
    ddb4:	|  |  |        |  |      tst.w d0
    ddb6:	|  |  |        |  |  /-- bne.s ddbc <fileToStack+0x2f6>
    ddb8:	|  |  |        |  |  |   clr.w d0
    ddba:	+--|--|--------|--|--|-- bra.s de2a <fileToStack+0x364>
            sH->last = sH->first;
    ddbc:	|  |  |        |  |  \-> movea.l 128(sp),a0
    ddc0:	|  |  |        |  |      move.l (a0),d0
    ddc2:	|  |  |        |  |      movea.l 128(sp),a0
    ddc6:	|  |  |        |  |      move.l d0,4(a0)
    ddca:	|  +--|--------|--|----- bra.w dc38 <fileToStack+0x172>
        } else {
            // Adds to the END of the array... much better
            if (!addVarToStackQuick(&stringVar, &sH->last->next)) return FALSE;
    ddce:	|  |  |        |  \----> movea.l 128(sp),a0
    ddd2:	|  |  |        |         move.l 4(a0),d0
    ddd6:	|  |  |        |         addq.l #8,d0
    ddd8:	|  |  |        |         move.l d0,-(sp)
    ddda:	|  |  |        |         lea 14(sp),a0
    ddde:	|  |  |        |         move.l a0,-(sp)
    dde0:	|  |  |        |         jsr 141c8 <addVarToStackQuick>
    dde6:	|  |  |        |         addq.l #8,sp
    dde8:	|  |  |        |         tst.w d0
    ddea:	|  |  |        |     /-- bne.s ddf0 <fileToStack+0x32a>
    ddec:	|  |  |        |     |   clr.w d0
    ddee:	+--|--|--------|-----|-- bra.s de2a <fileToStack+0x364>
            sH->last = sH->last->next;
    ddf0:	|  |  |        |     \-> movea.l 128(sp),a0
    ddf4:	|  |  |        |         movea.l 4(a0),a0
    ddf8:	|  |  |        |         move.l 8(a0),d0
    ddfc:	|  |  |        |         movea.l 128(sp),a0
    de00:	|  |  |        |         move.l d0,4(a0)
        if (saveEncoding) {
    de04:	|  \--|--------|-------- bra.w dc38 <fileToStack+0x172>
            if (tmp == -1) break;
    de08:	|     \--------|-------> nop
    de0a:	|              |     /-- bra.s de0e <fileToStack+0x348>
            if (!line) break;
    de0c:	|              \-----|-> nop
        }
    }
    Close(fp);
    de0e:	|                    \-> move.l 100(sp),38(sp)
    de14:	|                        move.l 1ca8a <DOSBase>,d0
    de1a:	|                        movea.l d0,a6
    de1c:	|                        move.l 38(sp),d1
    de20:	|                        jsr -36(a6)
    de24:	|                        move.l d0,34(sp)
    return TRUE;
    de28:	|                        moveq #1,d0
}
    de2a:	\----------------------> move.l (sp)+,d2
    de2c:	                         movea.l (sp)+,a6
    de2e:	                         lea 112(sp),sp
    de32:	                         rts

0000de34 <readStringEncoded>:

char *readStringEncoded(BPTR fp) {
    de34:	          lea -32(sp),sp
    de38:	          move.l a6,-(sp)
    de3a:	          move.l d2,-(sp)
    int a, len = get2bytes(fp);
    de3c:	          move.l 44(sp),-(sp)
    de40:	          jsr 6bc <get2bytes>
    de46:	          addq.l #4,sp
    de48:	          move.l d0,32(sp)
    char *s = AllocVec(len + 1, MEMF_ANY);
    de4c:	          move.l 32(sp),d0
    de50:	          addq.l #1,d0
    de52:	          move.l d0,28(sp)
    de56:	          clr.l 24(sp)
    de5a:	          move.l 1ca82 <SysBase>,d0
    de60:	          movea.l d0,a6
    de62:	          move.l 28(sp),d0
    de66:	          move.l 24(sp),d1
    de6a:	          jsr -684(a6)
    de6e:	          move.l d0,20(sp)
    de72:	          move.l 20(sp),d0
    de76:	          move.l d0,16(sp)
    if (!s) return NULL;
    de7a:	      /-- bne.s de80 <readStringEncoded+0x4c>
    de7c:	      |   moveq #0,d0
    de7e:	/-----|-- bra.s def0 <readStringEncoded+0xbc>
    for (a = 0; a < len; a++) {
    de80:	|     \-> clr.l 36(sp)
    de84:	|     /-- bra.s ded6 <readStringEncoded+0xa2>
        s[a] = (char)(FGetC(fp) ^ encode1);
    de86:	|  /--|-> move.l 44(sp),12(sp)
    de8c:	|  |  |   move.l 1ca8a <DOSBase>,d0
    de92:	|  |  |   movea.l d0,a6
    de94:	|  |  |   move.l 12(sp),d1
    de98:	|  |  |   jsr -306(a6)
    de9c:	|  |  |   move.l d0,8(sp)
    dea0:	|  |  |   move.l 8(sp),d0
    dea4:	|  |  |   move.l d0,d1
    dea6:	|  |  |   move.b 1cb38 <encode1>,d2
    deac:	|  |  |   move.l 36(sp),d0
    deb0:	|  |  |   movea.l 16(sp),a0
    deb4:	|  |  |   adda.l d0,a0
    deb6:	|  |  |   move.b d1,d0
    deb8:	|  |  |   eor.b d2,d0
    deba:	|  |  |   move.b d0,(a0)
        encode1 += encode2;
    debc:	|  |  |   move.b 1cb38 <encode1>,d0
    dec2:	|  |  |   move.b d0,d1
    dec4:	|  |  |   move.b 1cb39 <encode2>,d0
    deca:	|  |  |   add.b d1,d0
    decc:	|  |  |   move.b d0,1cb38 <encode1>
    for (a = 0; a < len; a++) {
    ded2:	|  |  |   addq.l #1,36(sp)
    ded6:	|  |  \-> move.l 36(sp),d0
    deda:	|  |      cmp.l 32(sp),d0
    dede:	|  \----- blt.s de86 <readStringEncoded+0x52>
    }
    s[len] = 0;
    dee0:	|         move.l 32(sp),d0
    dee4:	|         movea.l 16(sp),a0
    dee8:	|         adda.l d0,a0
    deea:	|         clr.b (a0)
    return s;
    deec:	|         move.l 16(sp),d0
}
    def0:	\-------> move.l (sp)+,d2
    def2:	          movea.l (sp)+,a6
    def4:	          lea 32(sp),sp
    def8:	          rts

0000defa <readTextPlain>:

char *readTextPlain(BPTR fp) {
    defa:	             lea -104(sp),sp
    defe:	             movem.l d2-d4/a6,-(sp)
    ULONG startPos;
    int stringSize = 0;
    df02:	             clr.l 116(sp)
    BOOL keepGoing = TRUE;
    df06:	             move.w #1,114(sp)
    char gotChar;
    char *reply;

    startPos = Seek(fp, 0, OFFSET_CURRENT);
    df0c:	             move.l 124(sp),106(sp)
    df12:	             clr.l 102(sp)
    df16:	             clr.l 98(sp)
    df1a:	             move.l 1ca8a <DOSBase>,d0
    df20:	             movea.l d0,a6
    df22:	             move.l 106(sp),d1
    df26:	             move.l 102(sp),d2
    df2a:	             move.l 98(sp),d3
    df2e:	             jsr -66(a6)
    df32:	             move.l d0,94(sp)
    df36:	             move.l 94(sp),d0
    df3a:	             move.l d0,90(sp)

    LONG tmp;
    while (keepGoing) {
    df3e:	   /-------- bra.s df82 <readTextPlain+0x88>
        tmp = FGetC(fp);
    df40:	/--|-------> move.l 124(sp),22(sp)
    df46:	|  |         move.l 1ca8a <DOSBase>,d0
    df4c:	|  |         movea.l d0,a6
    df4e:	|  |         move.l 22(sp),d1
    df52:	|  |         jsr -306(a6)
    df56:	|  |         move.l d0,18(sp)
    df5a:	|  |         move.l 18(sp),d0
    df5e:	|  |         move.l d0,110(sp)
        char gotChar = (char) tmp;
    df62:	|  |         move.b 113(sp),17(sp)
        if (gotChar == '\n' || tmp == -1) {
    df68:	|  |         cmpi.b #10,17(sp)
    df6e:	|  |  /----- beq.s df78 <readTextPlain+0x7e>
    df70:	|  |  |      moveq #-1,d0
    df72:	|  |  |      cmp.l 110(sp),d0
    df76:	|  |  |  /-- bne.s df7e <readTextPlain+0x84>
            keepGoing = FALSE;
    df78:	|  |  \--|-> clr.w 114(sp)
    df7c:	|  +-----|-- bra.s df82 <readTextPlain+0x88>
        } else {
            stringSize++;
    df7e:	|  |     \-> addq.l #1,116(sp)
    while (keepGoing) {
    df82:	|  \-------> tst.w 114(sp)
    df86:	\----------- bne.s df40 <readTextPlain+0x46>
        }
    }

    if ((stringSize == 0) && tmp == -1) {
    df88:	             tst.l 116(sp)
    df8c:	         /-- bne.s df9c <readTextPlain+0xa2>
    df8e:	         |   moveq #-1,d0
    df90:	         |   cmp.l 110(sp),d0
    df94:	         +-- bne.s df9c <readTextPlain+0xa2>
        return NULL;
    df96:	         |   moveq #0,d0
    df98:	      /--|-- bra.w e082 <readTextPlain+0x188>
    } else {
        Seek(fp, startPos, OFFSET_BEGINNING);
    df9c:	      |  \-> move.l 124(sp),86(sp)
    dfa2:	      |      move.l 90(sp),82(sp)
    dfa8:	      |      moveq #-1,d0
    dfaa:	      |      move.l d0,78(sp)
    dfae:	      |      move.l 1ca8a <DOSBase>,d0
    dfb4:	      |      movea.l d0,a6
    dfb6:	      |      move.l 86(sp),d1
    dfba:	      |      move.l 82(sp),d2
    dfbe:	      |      move.l 78(sp),d3
    dfc2:	      |      jsr -66(a6)
    dfc6:	      |      move.l d0,74(sp)
        reply = AllocVec(stringSize + 1, MEMF_ANY);
    dfca:	      |      move.l 116(sp),d0
    dfce:	      |      addq.l #1,d0
    dfd0:	      |      move.l d0,70(sp)
    dfd4:	      |      clr.l 66(sp)
    dfd8:	      |      move.l 1ca82 <SysBase>,d0
    dfde:	      |      movea.l d0,a6
    dfe0:	      |      move.l 70(sp),d0
    dfe4:	      |      move.l 66(sp),d1
    dfe8:	      |      jsr -684(a6)
    dfec:	      |      move.l d0,62(sp)
    dff0:	      |      move.l 62(sp),d0
    dff4:	      |      move.l d0,58(sp)
        if (reply == NULL) return NULL;
    dff8:	      |  /-- bne.s e000 <readTextPlain+0x106>
    dffa:	      |  |   moveq #0,d0
    dffc:	      +--|-- bra.w e082 <readTextPlain+0x188>
        int bytesRead = FRead(fp, reply, 1, stringSize);
    e000:	      |  \-> move.l 124(sp),54(sp)
    e006:	      |      move.l 58(sp),50(sp)
    e00c:	      |      moveq #1,d0
    e00e:	      |      move.l d0,46(sp)
    e012:	      |      move.l 116(sp),42(sp)
    e018:	      |      move.l 1ca8a <DOSBase>,d0
    e01e:	      |      movea.l d0,a6
    e020:	      |      move.l 54(sp),d1
    e024:	      |      move.l 50(sp),d2
    e028:	      |      move.l 46(sp),d3
    e02c:	      |      move.l 42(sp),d4
    e030:	      |      jsr -324(a6)
    e034:	      |      move.l d0,38(sp)
    e038:	      |      move.l 38(sp),d0
    e03c:	      |      move.l d0,34(sp)
        if (bytesRead != stringSize) {
    e040:	      |      move.l 34(sp),d0
    e044:	      |      cmp.l 116(sp),d0
    e048:	      |  /-- beq.s e058 <readTextPlain+0x15e>
            KPrintF("Reading error in readTextPlain.\n");
    e04a:	      |  |   pea 197b8 <PutChar+0x1988>
    e050:	      |  |   jsr 17366 <KPrintF>
    e056:	      |  |   addq.l #4,sp
        }
        FGetC(fp); // Skip the newline character
    e058:	      |  \-> move.l 124(sp),30(sp)
    e05e:	      |      move.l 1ca8a <DOSBase>,d0
    e064:	      |      movea.l d0,a6
    e066:	      |      move.l 30(sp),d1
    e06a:	      |      jsr -306(a6)
    e06e:	      |      move.l d0,26(sp)
        reply[stringSize] = 0;
    e072:	      |      move.l 116(sp),d0
    e076:	      |      movea.l 58(sp),a0
    e07a:	      |      adda.l d0,a0
    e07c:	      |      clr.b (a0)
    }

    return reply;
    e07e:	      |      move.l 58(sp),d0
}
    e082:	      \----> movem.l (sp)+,d2-d4/a6
    e086:	             lea 104(sp),sp
    e08a:	             rts

0000e08c <stackToFile>:


BOOL stackToFile (char * filename, const struct variable * from) {
    e08c:	                      lea -144(sp),sp
    e090:	                      movem.l d2-d3/a6,-(sp)
    BPTR fp = Open( filename, MODE_NEWFILE);
    e094:	                      move.l 160(sp),148(sp)
    e09a:	                      move.l #1006,144(sp)
    e0a2:	                      move.l 1ca8a <DOSBase>,d0
    e0a8:	                      movea.l d0,a6
    e0aa:	                      move.l 148(sp),d1
    e0ae:	                      move.l 144(sp),d2
    e0b2:	                      jsr -30(a6)
    e0b6:	                      move.l d0,140(sp)
    e0ba:	                      move.l 140(sp),d0
    e0be:	                      move.l d0,136(sp)

    if (!fp) {
    e0c2:	                  /-- bne.s e0dc <stackToFile+0x50>
        KPrintF("Can't create file", filename);
    e0c4:	                  |   move.l 160(sp),-(sp)
    e0c8:	                  |   pea 197d9 <PutChar+0x19a9>
    e0ce:	                  |   jsr 17366 <KPrintF>
    e0d4:	                  |   addq.l #8,sp
        return FALSE;
    e0d6:	                  |   clr.w d0
    e0d8:	/-----------------|-- bra.w e398 <stackToFile+0x30c>
    }

    struct variableStack * hereWeAre = from->varData.theStack->first;
    e0dc:	|                 \-> movea.l 164(sp),a0
    e0e0:	|                     movea.l 4(a0),a0
    e0e4:	|                     move.l (a0),152(sp)

    encode1 = (unsigned char) saveEncoding & 255;
    e0e8:	|                     move.w 1cb3a <saveEncoding>,d0
    e0ee:	|                     move.l d0,d0
    e0f0:	|                     move.b d0,1cb38 <encode1>
    encode2 = (unsigned char) (saveEncoding >> 8);
    e0f6:	|                     move.w 1cb3a <saveEncoding>,d0
    e0fc:	|                     lsr.w #8,d0
    e0fe:	|                     move.l d0,d0
    e100:	|                     move.b d0,1cb39 <encode2>

    if (saveEncoding) {
    e106:	|                     move.w 1cb3a <saveEncoding>,d0
    e10c:	|                 /-- beq.s e15e <stackToFile+0xd2>
        FPrintf(fp, "[Custom data (encoded)]\r\n");
    e10e:	|                 |   move.l 136(sp),116(sp)
    e114:	|                 |   move.l #104051,112(sp)
    e11c:	|                 |   moveq #99,d0
    e11e:	|                 |   not.b d0
    e120:	|                 |   add.l sp,d0
    e122:	|                 |   addi.l #-144,d0
    e128:	|                 |   move.l d0,108(sp)
    e12c:	|                 |   move.l 1ca8a <DOSBase>,d0
    e132:	|                 |   movea.l d0,a6
    e134:	|                 |   move.l 116(sp),d1
    e138:	|                 |   move.l 112(sp),d2
    e13c:	|                 |   move.l 108(sp),d3
    e140:	|                 |   jsr -354(a6)
    e144:	|                 |   move.l d0,104(sp)
        writeStringEncoded("UN�LO�CKED", fp);
    e148:	|                 |   move.l 136(sp),-(sp)
    e14c:	|                 |   pea 196f2 <PutChar+0x18c2>
    e152:	|                 |   jsr e3a2 <writeStringEncoded>
    e158:	|                 |   addq.l #8,sp
    e15a:	|  /--------------|-- bra.w e370 <stackToFile+0x2e4>
    } else {
        FPrintf(fp, "[Custom data (ASCII)]\n");
    e15e:	|  |              \-> move.l 136(sp),132(sp)
    e164:	|  |                  move.l #104077,128(sp)
    e16c:	|  |                  moveq #99,d1
    e16e:	|  |                  not.b d1
    e170:	|  |                  add.l sp,d1
    e172:	|  |                  addi.l #-144,d1
    e178:	|  |                  move.l d1,124(sp)
    e17c:	|  |                  move.l 1ca8a <DOSBase>,d0
    e182:	|  |                  movea.l d0,a6
    e184:	|  |                  move.l 132(sp),d1
    e188:	|  |                  move.l 128(sp),d2
    e18c:	|  |                  move.l 124(sp),d3
    e190:	|  |                  jsr -354(a6)
    e194:	|  |                  move.l d0,120(sp)
    }

    while (hereWeAre) {
    e198:	|  +----------------- bra.w e370 <stackToFile+0x2e4>
        if (saveEncoding) {
    e19c:	|  |  /-------------> move.w 1cb3a <saveEncoding>,d0
    e1a2:	|  |  |     /-------- beq.w e2f4 <stackToFile+0x268>
            switch (hereWeAre->thisVar.varType) {
    e1a6:	|  |  |     |         movea.l 152(sp),a0
    e1aa:	|  |  |     |         move.l (a0),d0
    e1ac:	|  |  |     |         moveq #1,d1
    e1ae:	|  |  |     |         cmp.l d0,d1
    e1b0:	|  |  |     |     /-- beq.s e200 <stackToFile+0x174>
    e1b2:	|  |  |     |     |   moveq #3,d1
    e1b4:	|  |  |     |     |   cmp.l d0,d1
    e1b6:	|  |  |     |  /--|-- bne.w e2c2 <stackToFile+0x236>
                case SVT_STRING:
                    FPutC(fp, encode1);
    e1ba:	|  |  |     |  |  |   move.l 136(sp),76(sp)
    e1c0:	|  |  |     |  |  |   move.b 1cb38 <encode1>,d0
    e1c6:	|  |  |     |  |  |   ext.w d0
    e1c8:	|  |  |     |  |  |   movea.w d0,a0
    e1ca:	|  |  |     |  |  |   move.l a0,72(sp)
    e1ce:	|  |  |     |  |  |   move.l 1ca8a <DOSBase>,d0
    e1d4:	|  |  |     |  |  |   movea.l d0,a6
    e1d6:	|  |  |     |  |  |   move.l 76(sp),d1
    e1da:	|  |  |     |  |  |   move.l 72(sp),d2
    e1de:	|  |  |     |  |  |   jsr -312(a6)
    e1e2:	|  |  |     |  |  |   move.l d0,68(sp)
                    writeStringEncoded(hereWeAre->thisVar.varData.theString, fp);
    e1e6:	|  |  |     |  |  |   movea.l 152(sp),a0
    e1ea:	|  |  |     |  |  |   move.l 4(a0),d0
    e1ee:	|  |  |     |  |  |   move.l 136(sp),-(sp)
    e1f2:	|  |  |     |  |  |   move.l d0,-(sp)
    e1f4:	|  |  |     |  |  |   jsr e3a2 <writeStringEncoded>
    e1fa:	|  |  |     |  |  |   addq.l #8,sp
                    break;
    e1fc:	|  |  |  /--|--|--|-- bra.w e366 <stackToFile+0x2da>

                case SVT_INT:
                    // Small enough to be stored as a char
                    if (hereWeAre->thisVar.varData.intValue >= 0 && hereWeAre->thisVar.varData.intValue < 256) {
    e200:	|  |  |  |  |  |  \-> movea.l 152(sp),a0
    e204:	|  |  |  |  |  |      move.l 4(a0),d0
    e208:	|  |  |  |  |  |  /-- bmi.s e278 <stackToFile+0x1ec>
    e20a:	|  |  |  |  |  |  |   movea.l 152(sp),a0
    e20e:	|  |  |  |  |  |  |   move.l 4(a0),d0
    e212:	|  |  |  |  |  |  |   cmpi.l #255,d0
    e218:	|  |  |  |  |  |  +-- bgt.s e278 <stackToFile+0x1ec>
                        FPutC(fp, 2 ^ encode1);
    e21a:	|  |  |  |  |  |  |   move.l 136(sp),64(sp)
    e220:	|  |  |  |  |  |  |   move.b 1cb38 <encode1>,d0
    e226:	|  |  |  |  |  |  |   eori.b #2,d0
    e22a:	|  |  |  |  |  |  |   ext.w d0
    e22c:	|  |  |  |  |  |  |   movea.w d0,a0
    e22e:	|  |  |  |  |  |  |   move.l a0,60(sp)
    e232:	|  |  |  |  |  |  |   move.l 1ca8a <DOSBase>,d0
    e238:	|  |  |  |  |  |  |   movea.l d0,a6
    e23a:	|  |  |  |  |  |  |   move.l 64(sp),d1
    e23e:	|  |  |  |  |  |  |   move.l 60(sp),d2
    e242:	|  |  |  |  |  |  |   jsr -312(a6)
    e246:	|  |  |  |  |  |  |   move.l d0,56(sp)
                        FPutC(fp, hereWeAre->thisVar.varData.intValue);
    e24a:	|  |  |  |  |  |  |   move.l 136(sp),52(sp)
    e250:	|  |  |  |  |  |  |   movea.l 152(sp),a0
    e254:	|  |  |  |  |  |  |   move.l 4(a0),48(sp)
    e25a:	|  |  |  |  |  |  |   move.l 1ca8a <DOSBase>,d0
    e260:	|  |  |  |  |  |  |   movea.l d0,a6
    e262:	|  |  |  |  |  |  |   move.l 52(sp),d1
    e266:	|  |  |  |  |  |  |   move.l 48(sp),d2
    e26a:	|  |  |  |  |  |  |   jsr -312(a6)
    e26e:	|  |  |  |  |  |  |   move.l d0,44(sp)
    e272:	|  |  |  |  |  |  |   nop
                    } else {
                        FPutC(fp, 1 ^ encode1);
                        put4bytes(hereWeAre->thisVar.varData.intValue, fp);
                    }
                    break;
    e274:	|  |  |  +--|--|--|-- bra.w e366 <stackToFile+0x2da>
                        FPutC(fp, 1 ^ encode1);
    e278:	|  |  |  |  |  |  \-> move.l 136(sp),40(sp)
    e27e:	|  |  |  |  |  |      move.b 1cb38 <encode1>,d0
    e284:	|  |  |  |  |  |      eori.b #1,d0
    e288:	|  |  |  |  |  |      ext.w d0
    e28a:	|  |  |  |  |  |      movea.w d0,a0
    e28c:	|  |  |  |  |  |      move.l a0,36(sp)
    e290:	|  |  |  |  |  |      move.l 1ca8a <DOSBase>,d0
    e296:	|  |  |  |  |  |      movea.l d0,a6
    e298:	|  |  |  |  |  |      move.l 40(sp),d1
    e29c:	|  |  |  |  |  |      move.l 36(sp),d2
    e2a0:	|  |  |  |  |  |      jsr -312(a6)
    e2a4:	|  |  |  |  |  |      move.l d0,32(sp)
                        put4bytes(hereWeAre->thisVar.varData.intValue, fp);
    e2a8:	|  |  |  |  |  |      movea.l 152(sp),a0
    e2ac:	|  |  |  |  |  |      move.l 4(a0),d0
    e2b0:	|  |  |  |  |  |      move.l 136(sp),-(sp)
    e2b4:	|  |  |  |  |  |      move.l d0,-(sp)
    e2b6:	|  |  |  |  |  |      jsr 958 <put4bytes>
    e2bc:	|  |  |  |  |  |      addq.l #8,sp
                    break;
    e2be:	|  |  |  +--|--|----- bra.w e366 <stackToFile+0x2da>

                default:
                    KPrintF("Can't create an encoded custom data file containing anything other than numbers and strings", filename);
    e2c2:	|  |  |  |  |  \----> move.l 160(sp),-(sp)
    e2c6:	|  |  |  |  |         pea 197eb <PutChar+0x19bb>
    e2cc:	|  |  |  |  |         jsr 17366 <KPrintF>
    e2d2:	|  |  |  |  |         addq.l #8,sp
                    Close(fp);
    e2d4:	|  |  |  |  |         move.l 136(sp),28(sp)
    e2da:	|  |  |  |  |         move.l 1ca8a <DOSBase>,d0
    e2e0:	|  |  |  |  |         movea.l d0,a6
    e2e2:	|  |  |  |  |         move.l 28(sp),d1
    e2e6:	|  |  |  |  |         jsr -36(a6)
    e2ea:	|  |  |  |  |         move.l d0,24(sp)
                    return FALSE;
    e2ee:	|  |  |  |  |         clr.w d0
    e2f0:	+--|--|--|--|-------- bra.w e398 <stackToFile+0x30c>
            }
        } else {
            char * makeSureItsText = getTextFromAnyVar(&hereWeAre->thisVar);
    e2f4:	|  |  |  |  \-------> move.l 152(sp),d0
    e2f8:	|  |  |  |            move.l d0,-(sp)
    e2fa:	|  |  |  |            jsr 14edc <getTextFromAnyVar>
    e300:	|  |  |  |            addq.l #4,sp
    e302:	|  |  |  |            move.l d0,100(sp)
            if (makeSureItsText == NULL) break;
    e306:	|  |  |  |     /----- beq.s e37a <stackToFile+0x2ee>
            FPrintf(fp, "%s\n", *makeSureItsText);
    e308:	|  |  |  |     |      movea.l 100(sp),a0
    e30c:	|  |  |  |     |      move.b (a0),d0
    e30e:	|  |  |  |     |      ext.w d0
    e310:	|  |  |  |     |      movea.w d0,a0
    e312:	|  |  |  |     |      move.l a0,12(sp)
    e316:	|  |  |  |     |      move.l 136(sp),96(sp)
    e31c:	|  |  |  |     |      move.l #104519,92(sp)
    e324:	|  |  |  |     |      moveq #99,d0
    e326:	|  |  |  |     |      not.b d0
    e328:	|  |  |  |     |      add.l sp,d0
    e32a:	|  |  |  |     |      addi.l #-144,d0
    e330:	|  |  |  |     |      move.l d0,88(sp)
    e334:	|  |  |  |     |      move.l 1ca8a <DOSBase>,d0
    e33a:	|  |  |  |     |      movea.l d0,a6
    e33c:	|  |  |  |     |      move.l 96(sp),d1
    e340:	|  |  |  |     |      move.l 92(sp),d2
    e344:	|  |  |  |     |      move.l 88(sp),d3
    e348:	|  |  |  |     |      jsr -354(a6)
    e34c:	|  |  |  |     |      move.l d0,84(sp)
            FreeVec(makeSureItsText);
    e350:	|  |  |  |     |      move.l 100(sp),80(sp)
    e356:	|  |  |  |     |      move.l 1ca82 <SysBase>,d0
    e35c:	|  |  |  |     |      movea.l d0,a6
    e35e:	|  |  |  |     |      movea.l 80(sp),a1
    e362:	|  |  |  |     |      jsr -690(a6)
        }

        hereWeAre = hereWeAre->next;
    e366:	|  |  |  \-----|----> movea.l 152(sp),a0
    e36a:	|  |  |        |      move.l 8(a0),152(sp)
    while (hereWeAre) {
    e370:	|  \--|--------|----> tst.l 152(sp)
    e374:	|     \--------|----- bne.w e19c <stackToFile+0x110>
    e378:	|              |  /-- bra.s e37c <stackToFile+0x2f0>
            if (makeSureItsText == NULL) break;
    e37a:	|              \--|-> nop
    }
    Close(fp);
    e37c:	|                 \-> move.l 136(sp),20(sp)
    e382:	|                     move.l 1ca8a <DOSBase>,d0
    e388:	|                     movea.l d0,a6
    e38a:	|                     move.l 20(sp),d1
    e38e:	|                     jsr -36(a6)
    e392:	|                     move.l d0,16(sp)
    return TRUE;
    e396:	|                     moveq #1,d0
}
    e398:	\-------------------> movem.l (sp)+,d2-d3/a6
    e39c:	                      lea 144(sp),sp
    e3a0:	                      rts

0000e3a2 <writeStringEncoded>:

void writeStringEncoded (const char * s, BPTR fp) {
    e3a2:	       lea -20(sp),sp
    e3a6:	       move.l a6,-(sp)
    e3a8:	       move.l d2,-(sp)
	int a, len = strlen (s);
    e3aa:	       move.l 32(sp),-(sp)
    e3ae:	       jsr 13df2 <strlen>
    e3b4:	       addq.l #4,sp
    e3b6:	       move.l d0,20(sp)

	put2bytes (len, fp);
    e3ba:	       move.l 36(sp),-(sp)
    e3be:	       move.l 24(sp),-(sp)
    e3c2:	       jsr 8d0 <put2bytes>
    e3c8:	       addq.l #8,sp
	for (a = 0; a < len; a ++) {
    e3ca:	       clr.l 24(sp)
    e3ce:	   /-- bra.s e424 <writeStringEncoded+0x82>
		FPutC (fp, s[a] ^ encode1);
    e3d0:	/--|-> move.l 36(sp),16(sp)
    e3d6:	|  |   move.l 24(sp),d0
    e3da:	|  |   movea.l 32(sp),a0
    e3de:	|  |   adda.l d0,a0
    e3e0:	|  |   move.b (a0),d1
    e3e2:	|  |   move.b 1cb38 <encode1>,d0
    e3e8:	|  |   eor.b d1,d0
    e3ea:	|  |   ext.w d0
    e3ec:	|  |   movea.w d0,a0
    e3ee:	|  |   move.l a0,12(sp)
    e3f2:	|  |   move.l 1ca8a <DOSBase>,d0
    e3f8:	|  |   movea.l d0,a6
    e3fa:	|  |   move.l 16(sp),d1
    e3fe:	|  |   move.l 12(sp),d2
    e402:	|  |   jsr -312(a6)
    e406:	|  |   move.l d0,8(sp)
		encode1 += encode2;
    e40a:	|  |   move.b 1cb38 <encode1>,d0
    e410:	|  |   move.b d0,d1
    e412:	|  |   move.b 1cb39 <encode2>,d0
    e418:	|  |   add.b d1,d0
    e41a:	|  |   move.b d0,1cb38 <encode1>
	for (a = 0; a < len; a ++) {
    e420:	|  |   addq.l #1,24(sp)
    e424:	|  \-> move.l 24(sp),d0
    e428:	|      cmp.l 20(sp),d0
    e42c:	\----- blt.s e3d0 <writeStringEncoded+0x2e>
	}
}
    e42e:	       nop
    e430:	       nop
    e432:	       move.l (sp)+,d2
    e434:	       movea.l (sp)+,a6
    e436:	       lea 20(sp),sp
    e43a:	       rts

0000e43c <failSecurityCheck>:

#define builtIn(a) 			static enum builtReturn builtIn_ ## a (int numParams, struct loadedFunction * fun)

#define UNUSEDALL		 	(void) (0 && sizeof(numParams) && sizeof (fun));

BOOL failSecurityCheck(char * fn) {
    e43c:	                   subq.l #4,sp
	if (fn == NULL) return TRUE;
    e43e:	                   tst.l 8(sp)
    e442:	               /-- bne.s e448 <failSecurityCheck+0xc>
    e444:	               |   moveq #1,d0
    e446:	/--------------|-- bra.s e4c6 <failSecurityCheck+0x8a>

	int a = 0;
    e448:	|              \-> clr.l (sp)

	while (fn[a]) {
    e44a:	|     /----------- bra.s e4b8 <failSecurityCheck+0x7c>
		switch (fn[a]) {
    e44c:	|  /--|----------> move.l (sp),d0
    e44e:	|  |  |            movea.l 8(sp),a0
    e452:	|  |  |            adda.l d0,a0
    e454:	|  |  |            move.b (a0),d0
    e456:	|  |  |            ext.w d0
    e458:	|  |  |            movea.w d0,a0
    e45a:	|  |  |            moveq #124,d0
    e45c:	|  |  |            cmp.l a0,d0
    e45e:	|  |  |     /----- beq.s e4a0 <failSecurityCheck+0x64>
    e460:	|  |  |     |      moveq #124,d1
    e462:	|  |  |     |      cmp.l a0,d1
    e464:	|  |  |  /--|----- blt.s e4b6 <failSecurityCheck+0x7a>
    e466:	|  |  |  |  |      moveq #92,d0
    e468:	|  |  |  |  |      cmp.l a0,d0
    e46a:	|  |  |  |  +----- beq.s e4a0 <failSecurityCheck+0x64>
    e46c:	|  |  |  |  |      moveq #92,d1
    e46e:	|  |  |  |  |      cmp.l a0,d1
    e470:	|  |  |  +--|----- blt.s e4b6 <failSecurityCheck+0x7a>
    e472:	|  |  |  |  |      moveq #60,d0
    e474:	|  |  |  |  |      cmp.l a0,d0
    e476:	|  |  |  |  |  /-- blt.s e496 <failSecurityCheck+0x5a>
    e478:	|  |  |  |  |  |   moveq #34,d1
    e47a:	|  |  |  |  |  |   cmp.l a0,d1
    e47c:	|  |  |  +--|--|-- bgt.s e4b6 <failSecurityCheck+0x7a>
    e47e:	|  |  |  |  |  |   moveq #-34,d1
    e480:	|  |  |  |  |  |   add.l a0,d1
    e482:	|  |  |  |  |  |   move.l #83894529,d0
    e488:	|  |  |  |  |  |   lsr.l d1,d0
    e48a:	|  |  |  |  |  |   moveq #1,d1
    e48c:	|  |  |  |  |  |   and.l d1,d0
    e48e:	|  |  |  |  |  |   sne d0
    e490:	|  |  |  |  |  |   neg.b d0
    e492:	|  |  |  |  +--|-- bne.s e4a0 <failSecurityCheck+0x64>
    e494:	|  |  |  +--|--|-- bra.s e4b6 <failSecurityCheck+0x7a>
    e496:	|  |  |  |  |  \-> lea -62(a0),a0
    e49a:	|  |  |  |  |      moveq #1,d0
    e49c:	|  |  |  |  |      cmp.l a0,d0
    e49e:	|  |  |  +--|----- bcs.s e4b6 <failSecurityCheck+0x7a>
			case '?':
			case '"':
			case '<':
			case '>':
			case '|':
				KPrintF("Filenames may not contain the following characters: \n\n\\  /  :  \"  <  >  |  ?  *\n\nConsequently, the following filename is not allowed:", fn);
    e4a0:	|  |  |  |  \----> move.l 8(sp),-(sp)
    e4a4:	|  |  |  |         pea 1984b <PutChar+0x1a1b>
    e4aa:	|  |  |  |         jsr 17366 <KPrintF>
    e4b0:	|  |  |  |         addq.l #8,sp
				return TRUE;
    e4b2:	|  |  |  |         moveq #1,d0
    e4b4:	+--|--|--|-------- bra.s e4c6 <failSecurityCheck+0x8a>
		}
		a++;
    e4b6:	|  |  |  \-------> addq.l #1,(sp)
	while (fn[a]) {
    e4b8:	|  |  \----------> move.l (sp),d0
    e4ba:	|  |               movea.l 8(sp),a0
    e4be:	|  |               adda.l d0,a0
    e4c0:	|  |               move.b (a0),d0
    e4c2:	|  \-------------- bne.s e44c <failSecurityCheck+0x10>
	}
	return FALSE;
    e4c4:	|                  clr.w d0
}
    e4c6:	\----------------> addq.l #4,sp
    e4c8:	                   rts

0000e4ca <sayCore>:

static enum builtReturn sayCore (int numParams, struct loadedFunction * fun, BOOL sayIt)
{
    e4ca:	             lea -24(sp),sp
    e4ce:	             move.l a6,-(sp)
    e4d0:	             move.l 40(sp),d0
    e4d4:	             move.w d0,d0
    e4d6:	             move.w d0,6(sp)
	int fileNum = -1;
    e4da:	             moveq #-1,d0
    e4dc:	             move.l d0,12(sp)
	char * newText;
	int objT, p;
	killSpeechTimers ();
    e4e0:	             jsr 6334 <killSpeechTimers>

	switch (numParams) {
    e4e6:	             moveq #2,d0
    e4e8:	             cmp.l 32(sp),d0
    e4ec:	      /----- beq.s e530 <sayCore+0x66>
    e4ee:	      |      moveq #3,d0
    e4f0:	      |      cmp.l 32(sp),d0
    e4f4:	/-----|----- bne.w e612 <sayCore+0x148>
		case 3:
			if (! getValueType (&fileNum, SVT_FILE, &fun->stack->thisVar)) return BR_ERROR;
    e4f8:	|     |      movea.l 36(sp),a0
    e4fc:	|     |      move.l 24(a0),d0
    e500:	|     |      move.l d0,-(sp)
    e502:	|     |      pea 5 <_start+0x5>
    e506:	|     |      lea 20(sp),a0
    e50a:	|     |      move.l a0,-(sp)
    e50c:	|     |      jsr 14906 <getValueType>
    e512:	|     |      lea 12(sp),sp
    e516:	|     |      tst.w d0
    e518:	|     |  /-- bne.s e520 <sayCore+0x56>
    e51a:	|     |  |   moveq #1,d0
    e51c:	|  /--|--|-- bra.w e622 <sayCore+0x158>
			trimStack (&fun -> stack);
    e520:	|  |  |  \-> moveq #24,d0
    e522:	|  |  |      add.l 36(sp),d0
    e526:	|  |  |      move.l d0,-(sp)
    e528:	|  |  |      jsr 1528a <trimStack>
    e52e:	|  |  |      addq.l #4,sp
			[[fallthrough]];

		case 2:
			newText = getTextFromAnyVar (&(fun -> stack->thisVar));
    e530:	|  |  \----> movea.l 36(sp),a0
    e534:	|  |         move.l 24(a0),d0
    e538:	|  |         move.l d0,-(sp)
    e53a:	|  |         jsr 14edc <getTextFromAnyVar>
    e540:	|  |         addq.l #4,sp
    e542:	|  |         move.l d0,24(sp)
			if (! newText) return BR_ERROR;
    e546:	|  |     /-- bne.s e54e <sayCore+0x84>
    e548:	|  |     |   moveq #1,d0
    e54a:	|  +-----|-- bra.w e622 <sayCore+0x158>
			trimStack (&fun -> stack);
    e54e:	|  |     \-> moveq #24,d0
    e550:	|  |         add.l 36(sp),d0
    e554:	|  |         move.l d0,-(sp)
    e556:	|  |         jsr 1528a <trimStack>
    e55c:	|  |         addq.l #4,sp
			if (! getValueType(&objT, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e55e:	|  |         movea.l 36(sp),a0
    e562:	|  |         move.l 24(a0),d0
    e566:	|  |         move.l d0,-(sp)
    e568:	|  |         pea 7 <_start+0x7>
    e56c:	|  |         lea 16(sp),a0
    e570:	|  |         move.l a0,-(sp)
    e572:	|  |         jsr 14906 <getValueType>
    e578:	|  |         lea 12(sp),sp
    e57c:	|  |         tst.w d0
    e57e:	|  |     /-- bne.s e586 <sayCore+0xbc>
    e580:	|  |     |   moveq #1,d0
    e582:	|  +-----|-- bra.w e622 <sayCore+0x158>
			if (! getValueType(&objT, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e586:	|  |     \-> movea.l 36(sp),a0
    e58a:	|  |         move.l 24(a0),d0
    e58e:	|  |         move.l d0,-(sp)
    e590:	|  |         pea 7 <_start+0x7>
    e594:	|  |         lea 16(sp),a0
    e598:	|  |         move.l a0,-(sp)
    e59a:	|  |         jsr 14906 <getValueType>
    e5a0:	|  |         lea 12(sp),sp
    e5a4:	|  |         tst.w d0
    e5a6:	|  |     /-- bne.s e5ac <sayCore+0xe2>
    e5a8:	|  |     |   moveq #1,d0
    e5aa:	|  +-----|-- bra.s e622 <sayCore+0x158>
			trimStack (&fun -> stack);
    e5ac:	|  |     \-> moveq #24,d0
    e5ae:	|  |         add.l 36(sp),d0
    e5b2:	|  |         move.l d0,-(sp)
    e5b4:	|  |         jsr 1528a <trimStack>
    e5ba:	|  |         addq.l #4,sp
			p = wrapSpeech (newText, objT, fileNum, sayIt);
    e5bc:	|  |         movea.w 6(sp),a0
    e5c0:	|  |         move.l 12(sp),d1
    e5c4:	|  |         move.l 8(sp),d0
    e5c8:	|  |         move.l a0,-(sp)
    e5ca:	|  |         move.l d1,-(sp)
    e5cc:	|  |         move.l d0,-(sp)
    e5ce:	|  |         move.l 36(sp),-(sp)
    e5d2:	|  |         jsr 82ee <wrapSpeech>
    e5d8:	|  |         lea 16(sp),sp
    e5dc:	|  |         move.l d0,20(sp)
			fun -> timeLeft = p;
    e5e0:	|  |         movea.l 36(sp),a0
    e5e4:	|  |         move.l 20(sp),12(a0)
			//debugOut ("BUILTIN: sayCore: %s (%i)\n", newText, p);
			fun -> isSpeech = TRUE;
    e5ea:	|  |         movea.l 36(sp),a0
    e5ee:	|  |         move.w #1,50(a0)
			FreeVec(newText);
    e5f4:	|  |         move.l 24(sp),16(sp)
    e5fa:	|  |         move.l 1ca82 <SysBase>,d0
    e600:	|  |         movea.l d0,a6
    e602:	|  |         movea.l 16(sp),a1
    e606:	|  |         jsr -690(a6)
			newText = NULL;
    e60a:	|  |         clr.l 24(sp)
			return BR_KEEP_AND_PAUSE;
    e60e:	|  |         moveq #0,d0
    e610:	|  +-------- bra.s e622 <sayCore+0x158>
	}

	KPrintF("Function should have either 2 or 3 parameters");
    e612:	\--|-------> pea 198d1 <PutChar+0x1aa1>
    e618:	   |         jsr 17366 <KPrintF>
    e61e:	   |         addq.l #4,sp
	return BR_ERROR;
    e620:	   |         moveq #1,d0
}
    e622:	   \-------> movea.l (sp)+,a6
    e624:	             lea 24(sp),sp
    e628:	             rts

0000e62a <builtIn_say>:

builtIn(say)
{
	UNUSEDALL
	return sayCore (numParams, fun, TRUE);
    e62a:	pea 1 <_start+0x1>
    e62e:	move.l 12(sp),-(sp)
    e632:	move.l 12(sp),-(sp)
    e636:	jsr e4ca <sayCore>
    e63c:	lea 12(sp),sp
}
    e640:	rts

0000e642 <builtIn_think>:

builtIn(think)
{
	UNUSEDALL
	return sayCore (numParams, fun, FALSE);
    e642:	clr.l -(sp)
    e644:	move.l 12(sp),-(sp)
    e648:	move.l 12(sp),-(sp)
    e64c:	jsr e4ca <sayCore>
    e652:	lea 12(sp),sp
}
    e656:	rts

0000e658 <builtIn_freeze>:

builtIn(freeze)
{
	UNUSEDALL
	freeze ();
    e658:	jsr 152d2 <freeze>
	freezeSubs (); 
    e65e:	jsr 5924 <freezeSubs>
	fun -> freezerLevel = 0;
    e664:	movea.l 8(sp),a0
    e668:	clr.b 56(a0)
	return BR_CONTINUE;
    e66c:	moveq #2,d0
}
    e66e:	rts

0000e670 <builtIn_unfreeze>:

builtIn(unfreeze)
{
	UNUSEDALL
	unfreeze ();
    e670:	jsr 154ce <unfreeze>
	unfreezeSubs (); 
    e676:	jsr 6d76 <unfreezeSubs>
	return BR_CONTINUE;
    e67c:	moveq #2,d0
}
    e67e:	rts

0000e680 <builtIn_howFrozen>:

builtIn(howFrozen)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, howFrozen ());
    e680:	jsr 154aa <howFrozen>
    e686:	move.l d0,d1
    e688:	moveq #28,d0
    e68a:	add.l 8(sp),d0
    e68e:	move.l d1,-(sp)
    e690:	pea 1 <_start+0x1>
    e694:	move.l d0,-(sp)
    e696:	jsr 151f8 <setVariable>
    e69c:	lea 12(sp),sp
	return BR_CONTINUE; 
    e6a0:	moveq #2,d0
}
    e6a2:	rts

0000e6a4 <builtIn_setCursor>:

builtIn(setCursor)
{
    e6a4:	subq.l #4,sp
	UNUSEDALL
	struct personaAnimation * aa = getAnimationFromVar (&(fun -> stack -> thisVar));
    e6a6:	movea.l 12(sp),a0
    e6aa:	move.l 24(a0),d0
    e6ae:	move.l d0,-(sp)
    e6b0:	jsr 14dde <getAnimationFromVar>
    e6b6:	addq.l #4,sp
    e6b8:	move.l d0,(sp)
	pickAnimCursor (aa);
    e6ba:	move.l (sp),-(sp)
    e6bc:	jsr d6c <pickAnimCursor>
    e6c2:	addq.l #4,sp
	trimStack (&fun -> stack);
    e6c4:	moveq #24,d0
    e6c6:	add.l 12(sp),d0
    e6ca:	move.l d0,-(sp)
    e6cc:	jsr 1528a <trimStack>
    e6d2:	addq.l #4,sp
	return BR_CONTINUE;
    e6d4:	moveq #2,d0
}
    e6d6:	addq.l #4,sp
    e6d8:	rts

0000e6da <builtIn_getMouseX>:

builtIn(getMouseX)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseX + cameraX);
    e6da:	move.l 1ca3e <input+0xa>,d1
    e6e0:	move.l 1cb3c <cameraX>,d0
    e6e6:	add.l d0,d1
    e6e8:	moveq #28,d0
    e6ea:	add.l 8(sp),d0
    e6ee:	move.l d1,-(sp)
    e6f0:	pea 1 <_start+0x1>
    e6f4:	move.l d0,-(sp)
    e6f6:	jsr 151f8 <setVariable>
    e6fc:	lea 12(sp),sp
	return BR_CONTINUE;
    e700:	moveq #2,d0
}
    e702:	rts

0000e704 <builtIn_getMouseY>:

builtIn(getMouseY)
{

	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseY + cameraY);
    e704:	move.l 1ca42 <input+0xe>,d1
    e70a:	move.l 1cb40 <cameraY>,d0
    e710:	add.l d0,d1
    e712:	moveq #28,d0
    e714:	add.l 8(sp),d0
    e718:	move.l d1,-(sp)
    e71a:	pea 1 <_start+0x1>
    e71e:	move.l d0,-(sp)
    e720:	jsr 151f8 <setVariable>
    e726:	lea 12(sp),sp
	return BR_CONTINUE;
    e72a:	moveq #2,d0
}
    e72c:	rts

0000e72e <builtIn_getMouseScreenX>:

builtIn(getMouseScreenX)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseX*cameraZoom);
    e72e:	move.l 1ca3e <input+0xa>,d0
    e734:	move.l d0,-(sp)
    e736:	jsr 17798 <__floatsisf>
    e73c:	addq.l #4,sp
    e73e:	move.l d0,d1
    e740:	move.l 1c420 <cameraZoom>,d0
    e746:	move.l d0,-(sp)
    e748:	move.l d1,-(sp)
    e74a:	jsr 1784a <__mulsf3>
    e750:	addq.l #8,sp
    e752:	move.l d0,-(sp)
    e754:	jsr 17730 <__fixsfsi>
    e75a:	addq.l #4,sp
    e75c:	move.l d0,d1
    e75e:	moveq #28,d0
    e760:	add.l 8(sp),d0
    e764:	move.l d1,-(sp)
    e766:	pea 1 <_start+0x1>
    e76a:	move.l d0,-(sp)
    e76c:	jsr 151f8 <setVariable>
    e772:	lea 12(sp),sp
	return BR_CONTINUE;
    e776:	moveq #2,d0
}
    e778:	rts

0000e77a <builtIn_getMouseScreenY>:

builtIn(getMouseScreenY)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseY*cameraZoom);
    e77a:	move.l 1ca42 <input+0xe>,d0
    e780:	move.l d0,-(sp)
    e782:	jsr 17798 <__floatsisf>
    e788:	addq.l #4,sp
    e78a:	move.l d0,d1
    e78c:	move.l 1c420 <cameraZoom>,d0
    e792:	move.l d0,-(sp)
    e794:	move.l d1,-(sp)
    e796:	jsr 1784a <__mulsf3>
    e79c:	addq.l #8,sp
    e79e:	move.l d0,-(sp)
    e7a0:	jsr 17730 <__fixsfsi>
    e7a6:	addq.l #4,sp
    e7a8:	move.l d0,d1
    e7aa:	moveq #28,d0
    e7ac:	add.l 8(sp),d0
    e7b0:	move.l d1,-(sp)
    e7b2:	pea 1 <_start+0x1>
    e7b6:	move.l d0,-(sp)
    e7b8:	jsr 151f8 <setVariable>
    e7be:	lea 12(sp),sp
	return BR_CONTINUE;
    e7c2:	moveq #2,d0
}
    e7c4:	rts

0000e7c6 <builtIn_getStatusText>:

builtIn(getStatusText)
{
	UNUSEDALL
	makeTextVar (&fun -> reg, statusBarText ());
    e7c6:	jsr 7da2 <statusBarText>
    e7cc:	move.l d0,d1
    e7ce:	moveq #28,d0
    e7d0:	add.l 8(sp),d0
    e7d4:	move.l d1,-(sp)
    e7d6:	move.l d0,-(sp)
    e7d8:	jsr 14b28 <makeTextVar>
    e7de:	addq.l #8,sp
	return BR_CONTINUE;
    e7e0:	moveq #2,d0
}
    e7e2:	rts

0000e7e4 <builtIn_getMatchingFiles>:

builtIn(getMatchingFiles)
{
    e7e4:	       lea -20(sp),sp
    e7e8:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    e7ea:	       movea.l 32(sp),a0
    e7ee:	       move.l 24(a0),d0
    e7f2:	       move.l d0,-(sp)
    e7f4:	       jsr 14edc <getTextFromAnyVar>
    e7fa:	       addq.l #4,sp
    e7fc:	       move.l d0,20(sp)
	if (! newText) return BR_ERROR;
    e800:	   /-- bne.s e808 <builtIn_getMatchingFiles+0x24>
    e802:	   |   moveq #1,d0
    e804:	/--|-- bra.w e8ca <builtIn_getMatchingFiles+0xe6>
	trimStack (&fun -> stack);
    e808:	|  \-> moveq #24,d0
    e80a:	|      add.l 32(sp),d0
    e80e:	|      move.l d0,-(sp)
    e810:	|      jsr 1528a <trimStack>
    e816:	|      addq.l #4,sp
	unlinkVar (&fun -> reg);
    e818:	|      moveq #28,d0
    e81a:	|      add.l 32(sp),d0
    e81e:	|      move.l d0,-(sp)
    e820:	|      jsr 14b54 <unlinkVar>
    e826:	|      addq.l #4,sp

	// Return value
	fun -> reg.varType = SVT_STACK;
    e828:	|      movea.l 32(sp),a0
    e82c:	|      moveq #6,d0
    e82e:	|      move.l d0,28(a0)
	fun -> reg.varData.theStack = AllocVec(sizeof( struct stackHandler),MEMF_ANY);
    e832:	|      moveq #12,d0
    e834:	|      move.l d0,16(sp)
    e838:	|      clr.l 12(sp)
    e83c:	|      move.l 1ca82 <SysBase>,d0
    e842:	|      movea.l d0,a6
    e844:	|      move.l 16(sp),d0
    e848:	|      move.l 12(sp),d1
    e84c:	|      jsr -684(a6)
    e850:	|      move.l d0,8(sp)
    e854:	|      move.l 8(sp),d0
    e858:	|      movea.l 32(sp),a0
    e85c:	|      move.l d0,32(a0)
	if (!(&fun -> reg.varData.theStack)) return BR_ERROR;
    e860:	|      moveq #32,d0
    e862:	|      add.l 32(sp),d0
    e866:	|  /-- bne.s e86c <builtIn_getMatchingFiles+0x88>
    e868:	|  |   moveq #1,d0
    e86a:	+--|-- bra.s e8ca <builtIn_getMatchingFiles+0xe6>
	fun -> reg.varData.theStack -> first = NULL;
    e86c:	|  \-> movea.l 32(sp),a0
    e870:	|      movea.l 32(a0),a0
    e874:	|      clr.l (a0)
	fun -> reg.varData.theStack -> last = NULL;
    e876:	|      movea.l 32(sp),a0
    e87a:	|      movea.l 32(a0),a0
    e87e:	|      clr.l 4(a0)
	fun -> reg.varData.theStack -> timesUsed = 1;
    e882:	|      movea.l 32(sp),a0
    e886:	|      movea.l 32(a0),a0
    e88a:	|      moveq #1,d0
    e88c:	|      move.l d0,8(a0)
	if (! getSavedGamesStack (fun -> reg.varData.theStack, newText)) return BR_ERROR;
    e890:	|      movea.l 32(sp),a0
    e894:	|      move.l 32(a0),d0
    e898:	|      move.l 20(sp),-(sp)
    e89c:	|      move.l d0,-(sp)
    e89e:	|      jsr 146c2 <getSavedGamesStack>
    e8a4:	|      addq.l #8,sp
    e8a6:	|      tst.w d0
    e8a8:	|  /-- bne.s e8ae <builtIn_getMatchingFiles+0xca>
    e8aa:	|  |   moveq #1,d0
    e8ac:	+--|-- bra.s e8ca <builtIn_getMatchingFiles+0xe6>
	FreeVec(newText);
    e8ae:	|  \-> move.l 20(sp),4(sp)
    e8b4:	|      move.l 1ca82 <SysBase>,d0
    e8ba:	|      movea.l d0,a6
    e8bc:	|      movea.l 4(sp),a1
    e8c0:	|      jsr -690(a6)
	newText = NULL;
    e8c4:	|      clr.l 20(sp)
	return BR_CONTINUE;
    e8c8:	|      moveq #2,d0
}
    e8ca:	\----> movea.l (sp)+,a6
    e8cc:	       lea 20(sp),sp
    e8d0:	       rts

0000e8d2 <builtIn_saveGame>:

builtIn(saveGame)
{
    e8d2:	       lea -12(sp),sp
    e8d6:	       move.l a6,-(sp)

    /*if (frozenStuff) {
        fatal ("Can't save game state while the engine is frozen");
    }*/

    loadNow = getTextFromAnyVar(&(fun->stack->thisVar));
    e8d8:	       movea.l 24(sp),a0
    e8dc:	       move.l 24(a0),d0
    e8e0:	       move.l d0,-(sp)
    e8e2:	       jsr 14edc <getTextFromAnyVar>
    e8e8:	       addq.l #4,sp
    e8ea:	       move.l d0,1ca4e <loadNow>
    trimStack(&fun->stack);
    e8f0:	       moveq #24,d0
    e8f2:	       add.l 24(sp),d0
    e8f6:	       move.l d0,-(sp)
    e8f8:	       jsr 1528a <trimStack>
    e8fe:	       addq.l #4,sp

    char *aaaaa = encodeFilename(loadNow);
    e900:	       move.l 1ca4e <loadNow>,d0
    e906:	       move.l d0,-(sp)
    e908:	       jsr 2fe <encodeFilename>
    e90e:	       addq.l #4,sp
    e910:	       move.l d0,12(sp)
    FreeVec(loadNow);
    e914:	       move.l 1ca4e <loadNow>,8(sp)
    e91c:	       move.l 1ca82 <SysBase>,d0
    e922:	       movea.l d0,a6
    e924:	       movea.l 8(sp),a1
    e928:	       jsr -690(a6)
    if (failSecurityCheck(aaaaa)) return BR_ERROR; // Won't fail if encoded, how cool is that? OK, not very.
    e92c:	       move.l 12(sp),-(sp)
    e930:	       jsr e43c <failSecurityCheck>
    e936:	       addq.l #4,sp
    e938:	       tst.w d0
    e93a:	   /-- beq.s e940 <builtIn_saveGame+0x6e>
    e93c:	   |   moveq #1,d0
    e93e:	/--|-- bra.s e990 <builtIn_saveGame+0xbe>

    loadNow = joinStrings(":", aaaaa);
    e940:	|  \-> move.l 12(sp),-(sp)
    e944:	|      pea 198ff <line.c.05397aaf+0x8>
    e94a:	|      jsr 13e32 <joinStrings>
    e950:	|      addq.l #8,sp
    e952:	|      move.l d0,1ca4e <loadNow>
    FreeVec(aaaaa);
    e958:	|      move.l 12(sp),4(sp)
    e95e:	|      move.l 1ca82 <SysBase>,d0
    e964:	|      movea.l d0,a6
    e966:	|      movea.l 4(sp),a1
    e96a:	|      jsr -690(a6)

    setVariable(&fun->reg, SVT_INT, 0);
    e96e:	|      moveq #28,d0
    e970:	|      add.l 24(sp),d0
    e974:	|      clr.l -(sp)
    e976:	|      pea 1 <_start+0x1>
    e97a:	|      move.l d0,-(sp)
    e97c:	|      jsr 151f8 <setVariable>
    e982:	|      lea 12(sp),sp
    saverFunc = fun;
    e986:	|      move.l 24(sp),1cb4c <saverFunc>
    return BR_KEEP_AND_PAUSE;
    e98e:	|      moveq #0,d0
}
    e990:	\----> movea.l (sp)+,a6
    e992:	       lea 12(sp),sp
    e996:	       rts

0000e998 <builtIn_fileExists>:

builtIn(fileExists)
{
    e998:	       lea -36(sp),sp
    e99c:	       move.l a6,-(sp)
    e99e:	       move.l d2,-(sp)
    UNUSEDALL
    loadNow = getTextFromAnyVar(&(fun->stack->thisVar));
    e9a0:	       movea.l 52(sp),a0
    e9a4:	       move.l 24(a0),d0
    e9a8:	       move.l d0,-(sp)
    e9aa:	       jsr 14edc <getTextFromAnyVar>
    e9b0:	       addq.l #4,sp
    e9b2:	       move.l d0,1ca4e <loadNow>
    trimStack(&fun->stack);
    e9b8:	       moveq #24,d0
    e9ba:	       add.l 52(sp),d0
    e9be:	       move.l d0,-(sp)
    e9c0:	       jsr 1528a <trimStack>
    e9c6:	       addq.l #4,sp
    char *aaaaa = encodeFilename(loadNow);
    e9c8:	       move.l 1ca4e <loadNow>,d0
    e9ce:	       move.l d0,-(sp)
    e9d0:	       jsr 2fe <encodeFilename>
    e9d6:	       addq.l #4,sp
    e9d8:	       move.l d0,40(sp)
    FreeVec(loadNow);
    e9dc:	       move.l 1ca4e <loadNow>,36(sp)
    e9e4:	       move.l 1ca82 <SysBase>,d0
    e9ea:	       movea.l d0,a6
    e9ec:	       movea.l 36(sp),a1
    e9f0:	       jsr -690(a6)
    if (failSecurityCheck(aaaaa)) return BR_ERROR;
    e9f4:	       move.l 40(sp),-(sp)
    e9f8:	       jsr e43c <failSecurityCheck>
    e9fe:	       addq.l #4,sp
    ea00:	       tst.w d0
    ea02:	   /-- beq.s ea0a <builtIn_fileExists+0x72>
    ea04:	   |   moveq #1,d0
    ea06:	/--|-- bra.w eaaa <builtIn_fileExists+0x112>
    BPTR fp = Open(aaaaa, MODE_OLDFILE);
    ea0a:	|  \-> move.l 40(sp),32(sp)
    ea10:	|      move.l #1005,28(sp)
    ea18:	|      move.l 1ca8a <DOSBase>,d0
    ea1e:	|      movea.l d0,a6
    ea20:	|      move.l 32(sp),d1
    ea24:	|      move.l 28(sp),d2
    ea28:	|      jsr -30(a6)
    ea2c:	|      move.l d0,24(sp)
    ea30:	|      move.l 24(sp),d0
    ea34:	|      move.l d0,20(sp)
    if (!fp) {        
    ea38:	|  /-- bne.s ea48 <builtIn_fileExists+0xb0>
        KPrintF("Can't get current directory.\n");      
    ea3a:	|  |   pea 19901 <line.c.05397aaf+0xa>
    ea40:	|  |   jsr 17366 <KPrintF>
    ea46:	|  |   addq.l #4,sp
    }
    // Return value
    setVariable(&fun->reg, SVT_INT, (fp != NULL));
    ea48:	|  \-> tst.l 20(sp)
    ea4c:	|      sne d0
    ea4e:	|      neg.b d0
    ea50:	|      moveq #0,d1
    ea52:	|      move.b d0,d1
    ea54:	|      moveq #28,d0
    ea56:	|      add.l 52(sp),d0
    ea5a:	|      move.l d1,-(sp)
    ea5c:	|      pea 1 <_start+0x1>
    ea60:	|      move.l d0,-(sp)
    ea62:	|      jsr 151f8 <setVariable>
    ea68:	|      lea 12(sp),sp
    if (fp) Close(fp);
    ea6c:	|      tst.l 20(sp)
    ea70:	|  /-- beq.s ea8c <builtIn_fileExists+0xf4>
    ea72:	|  |   move.l 20(sp),16(sp)
    ea78:	|  |   move.l 1ca8a <DOSBase>,d0
    ea7e:	|  |   movea.l d0,a6
    ea80:	|  |   move.l 16(sp),d1
    ea84:	|  |   jsr -36(a6)
    ea88:	|  |   move.l d0,12(sp)
    FreeVec(aaaaa);
    ea8c:	|  \-> move.l 40(sp),8(sp)
    ea92:	|      move.l 1ca82 <SysBase>,d0
    ea98:	|      movea.l d0,a6
    ea9a:	|      movea.l 8(sp),a1
    ea9e:	|      jsr -690(a6)
    loadNow = NULL;
    eaa2:	|      clr.l 1ca4e <loadNow>
    return BR_CONTINUE;
    eaa8:	|      moveq #2,d0
}
    eaaa:	\----> move.l (sp)+,d2
    eaac:	       movea.l (sp)+,a6
    eaae:	       lea 36(sp),sp
    eab2:	       rts

0000eab4 <builtIn_loadGame>:

builtIn(loadGame)
{
    eab4:	       lea -36(sp),sp
    eab8:	       move.l a6,-(sp)
    eaba:	       move.l d2,-(sp)
    UNUSEDALL
    char *aaaaa = getTextFromAnyVar(&(fun->stack->thisVar));
    eabc:	       movea.l 52(sp),a0
    eac0:	       move.l 24(a0),d0
    eac4:	       move.l d0,-(sp)
    eac6:	       jsr 14edc <getTextFromAnyVar>
    eacc:	       addq.l #4,sp
    eace:	       move.l d0,40(sp)
    trimStack(&fun->stack);
    ead2:	       moveq #24,d0
    ead4:	       add.l 52(sp),d0
    ead8:	       move.l d0,-(sp)
    eada:	       jsr 1528a <trimStack>
    eae0:	       addq.l #4,sp
    loadNow = encodeFilename(aaaaa);
    eae2:	       move.l 40(sp),-(sp)
    eae6:	       jsr 2fe <encodeFilename>
    eaec:	       addq.l #4,sp
    eaee:	       move.l d0,1ca4e <loadNow>
    FreeVec(aaaaa);
    eaf4:	       move.l 40(sp),36(sp)
    eafa:	       move.l 1ca82 <SysBase>,d0
    eb00:	       movea.l d0,a6
    eb02:	       movea.l 36(sp),a1
    eb06:	       jsr -690(a6)

    /*if (frozenStuff) {
        fatal("Can't load a saved game while the engine is frozen");
    }*/

    if (failSecurityCheck(loadNow)) return BR_ERROR;
    eb0a:	       move.l 1ca4e <loadNow>,d0
    eb10:	       move.l d0,-(sp)
    eb12:	       jsr e43c <failSecurityCheck>
    eb18:	       addq.l #4,sp
    eb1a:	       tst.w d0
    eb1c:	   /-- beq.s eb22 <builtIn_loadGame+0x6e>
    eb1e:	   |   moveq #1,d0
    eb20:	/--|-- bra.s eb92 <builtIn_loadGame+0xde>
    BPTR fp = Open(loadNow, MODE_OLDFILE);
    eb22:	|  \-> move.l 1ca4e <loadNow>,32(sp)
    eb2a:	|      move.l #1005,28(sp)
    eb32:	|      move.l 1ca8a <DOSBase>,d0
    eb38:	|      movea.l d0,a6
    eb3a:	|      move.l 32(sp),d1
    eb3e:	|      move.l 28(sp),d2
    eb42:	|      jsr -30(a6)
    eb46:	|      move.l d0,24(sp)
    eb4a:	|      move.l 24(sp),d0
    eb4e:	|      move.l d0,20(sp)
    if (fp) {
    eb52:	|  /-- beq.s eb72 <builtIn_loadGame+0xbe>
        Close(fp);
    eb54:	|  |   move.l 20(sp),12(sp)
    eb5a:	|  |   move.l 1ca8a <DOSBase>,d0
    eb60:	|  |   movea.l d0,a6
    eb62:	|  |   move.l 12(sp),d1
    eb66:	|  |   jsr -36(a6)
    eb6a:	|  |   move.l d0,8(sp)
        return BR_KEEP_AND_PAUSE;
    eb6e:	|  |   moveq #0,d0
    eb70:	+--|-- bra.s eb92 <builtIn_loadGame+0xde>
    }
    FreeVec(loadNow);
    eb72:	|  \-> move.l 1ca4e <loadNow>,16(sp)
    eb7a:	|      move.l 1ca82 <SysBase>,d0
    eb80:	|      movea.l d0,a6
    eb82:	|      movea.l 16(sp),a1
    eb86:	|      jsr -690(a6)
    loadNow = NULL;
    eb8a:	|      clr.l 1ca4e <loadNow>
    return BR_CONTINUE;
    eb90:	|      moveq #2,d0
}
    eb92:	\----> move.l (sp)+,d2
    eb94:	       movea.l (sp)+,a6
    eb96:	       lea 36(sp),sp
    eb9a:	       rts

0000eb9c <builtIn_blankScreen>:
#pragma mark Background image - Painting

builtIn(blankScreen)
{
	UNUSEDALL
	blankScreen (0, 0, sceneWidth, sceneHeight);
    eb9c:	move.l 1cb22 <sceneHeight>,d0
    eba2:	move.l d0,d1
    eba4:	move.l 1cb1e <sceneWidth>,d0
    ebaa:	move.l d1,-(sp)
    ebac:	move.l d0,-(sp)
    ebae:	clr.l -(sp)
    ebb0:	clr.l -(sp)
    ebb2:	jsr d330 <blankScreen>
    ebb8:	lea 16(sp),sp
	return BR_CONTINUE;
    ebbc:	moveq #2,d0
}
    ebbe:	rts

0000ebc0 <builtIn_blankArea>:

builtIn(blankArea)
{
    ebc0:	       lea -16(sp),sp
	UNUSEDALL
	int x1, y1, x2, y2;
	if (! getValueType (&y2, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    ebc4:	       movea.l 24(sp),a0
    ebc8:	       move.l 24(a0),d0
    ebcc:	       move.l d0,-(sp)
    ebce:	       pea 1 <_start+0x1>
    ebd2:	       lea 8(sp),a0
    ebd6:	       move.l a0,-(sp)
    ebd8:	       jsr 14906 <getValueType>
    ebde:	       lea 12(sp),sp
    ebe2:	       tst.w d0
    ebe4:	   /-- bne.s ebec <builtIn_blankArea+0x2c>
    ebe6:	   |   moveq #1,d0
    ebe8:	/--|-- bra.w ecc2 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    ebec:	|  \-> moveq #24,d0
    ebee:	|      add.l 24(sp),d0
    ebf2:	|      move.l d0,-(sp)
    ebf4:	|      jsr 1528a <trimStack>
    ebfa:	|      addq.l #4,sp
	if (! getValueType (&x2, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    ebfc:	|      movea.l 24(sp),a0
    ec00:	|      move.l 24(a0),d0
    ec04:	|      move.l d0,-(sp)
    ec06:	|      pea 1 <_start+0x1>
    ec0a:	|      lea 12(sp),a0
    ec0e:	|      move.l a0,-(sp)
    ec10:	|      jsr 14906 <getValueType>
    ec16:	|      lea 12(sp),sp
    ec1a:	|      tst.w d0
    ec1c:	|  /-- bne.s ec24 <builtIn_blankArea+0x64>
    ec1e:	|  |   moveq #1,d0
    ec20:	+--|-- bra.w ecc2 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    ec24:	|  \-> moveq #24,d0
    ec26:	|      add.l 24(sp),d0
    ec2a:	|      move.l d0,-(sp)
    ec2c:	|      jsr 1528a <trimStack>
    ec32:	|      addq.l #4,sp
	if (! getValueType (&y1, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    ec34:	|      movea.l 24(sp),a0
    ec38:	|      move.l 24(a0),d0
    ec3c:	|      move.l d0,-(sp)
    ec3e:	|      pea 1 <_start+0x1>
    ec42:	|      moveq #16,d0
    ec44:	|      add.l sp,d0
    ec46:	|      move.l d0,-(sp)
    ec48:	|      jsr 14906 <getValueType>
    ec4e:	|      lea 12(sp),sp
    ec52:	|      tst.w d0
    ec54:	|  /-- bne.s ec5a <builtIn_blankArea+0x9a>
    ec56:	|  |   moveq #1,d0
    ec58:	+--|-- bra.s ecc2 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    ec5a:	|  \-> moveq #24,d0
    ec5c:	|      add.l 24(sp),d0
    ec60:	|      move.l d0,-(sp)
    ec62:	|      jsr 1528a <trimStack>
    ec68:	|      addq.l #4,sp
	if (! getValueType (&x1, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    ec6a:	|      movea.l 24(sp),a0
    ec6e:	|      move.l 24(a0),d0
    ec72:	|      move.l d0,-(sp)
    ec74:	|      pea 1 <_start+0x1>
    ec78:	|      moveq #20,d0
    ec7a:	|      add.l sp,d0
    ec7c:	|      move.l d0,-(sp)
    ec7e:	|      jsr 14906 <getValueType>
    ec84:	|      lea 12(sp),sp
    ec88:	|      tst.w d0
    ec8a:	|  /-- bne.s ec90 <builtIn_blankArea+0xd0>
    ec8c:	|  |   moveq #1,d0
    ec8e:	+--|-- bra.s ecc2 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    ec90:	|  \-> moveq #24,d0
    ec92:	|      add.l 24(sp),d0
    ec96:	|      move.l d0,-(sp)
    ec98:	|      jsr 1528a <trimStack>
    ec9e:	|      addq.l #4,sp
	blankScreen (x1, y1, x2, y2);
    eca0:	|      movea.l (sp),a1
    eca2:	|      movea.l 4(sp),a0
    eca6:	|      move.l 8(sp),d1
    ecaa:	|      move.l 12(sp),d0
    ecae:	|      move.l a1,-(sp)
    ecb0:	|      move.l a0,-(sp)
    ecb2:	|      move.l d1,-(sp)
    ecb4:	|      move.l d0,-(sp)
    ecb6:	|      jsr d330 <blankScreen>
    ecbc:	|      lea 16(sp),sp
	return BR_CONTINUE;
    ecc0:	|      moveq #2,d0
}
    ecc2:	\----> lea 16(sp),sp
    ecc6:	       rts

0000ecc8 <builtIn_darkBackground>:

builtIn(darkBackground)
{
	UNUSEDALL
	darkScreen ();
    ecc8:	jsr d344 <darkScreen>
	return BR_CONTINUE;
    ecce:	moveq #2,d0
}
    ecd0:	rts

0000ecd2 <builtIn_addOverlay>:

builtIn(addOverlay)
{
    ecd2:	       lea -12(sp),sp
	UNUSEDALL
	int fileNumber, xPos, yPos;
	if (! getValueType(&yPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ecd6:	       movea.l 20(sp),a0
    ecda:	       move.l 24(a0),d0
    ecde:	       move.l d0,-(sp)
    ece0:	       pea 1 <_start+0x1>
    ece4:	       lea 8(sp),a0
    ece8:	       move.l a0,-(sp)
    ecea:	       jsr 14906 <getValueType>
    ecf0:	       lea 12(sp),sp
    ecf4:	       tst.w d0
    ecf6:	   /-- bne.s ecfe <builtIn_addOverlay+0x2c>
    ecf8:	   |   moveq #1,d0
    ecfa:	/--|-- bra.w ed96 <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    ecfe:	|  \-> moveq #24,d0
    ed00:	|      add.l 20(sp),d0
    ed04:	|      move.l d0,-(sp)
    ed06:	|      jsr 1528a <trimStack>
    ed0c:	|      addq.l #4,sp
	if (! getValueType(&xPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ed0e:	|      movea.l 20(sp),a0
    ed12:	|      move.l 24(a0),d0
    ed16:	|      move.l d0,-(sp)
    ed18:	|      pea 1 <_start+0x1>
    ed1c:	|      moveq #12,d0
    ed1e:	|      add.l sp,d0
    ed20:	|      move.l d0,-(sp)
    ed22:	|      jsr 14906 <getValueType>
    ed28:	|      lea 12(sp),sp
    ed2c:	|      tst.w d0
    ed2e:	|  /-- bne.s ed34 <builtIn_addOverlay+0x62>
    ed30:	|  |   moveq #1,d0
    ed32:	+--|-- bra.s ed96 <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    ed34:	|  \-> moveq #24,d0
    ed36:	|      add.l 20(sp),d0
    ed3a:	|      move.l d0,-(sp)
    ed3c:	|      jsr 1528a <trimStack>
    ed42:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    ed44:	|      movea.l 20(sp),a0
    ed48:	|      move.l 24(a0),d0
    ed4c:	|      move.l d0,-(sp)
    ed4e:	|      pea 5 <_start+0x5>
    ed52:	|      moveq #16,d0
    ed54:	|      add.l sp,d0
    ed56:	|      move.l d0,-(sp)
    ed58:	|      jsr 14906 <getValueType>
    ed5e:	|      lea 12(sp),sp
    ed62:	|      tst.w d0
    ed64:	|  /-- bne.s ed6a <builtIn_addOverlay+0x98>
    ed66:	|  |   moveq #1,d0
    ed68:	+--|-- bra.s ed96 <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    ed6a:	|  \-> moveq #24,d0
    ed6c:	|      add.l 20(sp),d0
    ed70:	|      move.l d0,-(sp)
    ed72:	|      jsr 1528a <trimStack>
    ed78:	|      addq.l #4,sp
	loadBackDrop (fileNumber, xPos, yPos);
    ed7a:	|      movea.l (sp),a0
    ed7c:	|      move.l 4(sp),d1
    ed80:	|      move.l 8(sp),d0
    ed84:	|      move.l a0,-(sp)
    ed86:	|      move.l d1,-(sp)
    ed88:	|      move.l d0,-(sp)
    ed8a:	|      jsr d462 <loadBackDrop>
    ed90:	|      lea 12(sp),sp
	return BR_CONTINUE;
    ed94:	|      moveq #2,d0
}
    ed96:	\----> lea 12(sp),sp
    ed9a:	       rts

0000ed9c <builtIn_mixOverlay>:

builtIn(mixOverlay)
{
    ed9c:	       lea -12(sp),sp
	UNUSEDALL
	int fileNumber, xPos, yPos;
	if (! getValueType(&yPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    eda0:	       movea.l 20(sp),a0
    eda4:	       move.l 24(a0),d0
    eda8:	       move.l d0,-(sp)
    edaa:	       pea 1 <_start+0x1>
    edae:	       lea 8(sp),a0
    edb2:	       move.l a0,-(sp)
    edb4:	       jsr 14906 <getValueType>
    edba:	       lea 12(sp),sp
    edbe:	       tst.w d0
    edc0:	   /-- bne.s edc8 <builtIn_mixOverlay+0x2c>
    edc2:	   |   moveq #1,d0
    edc4:	/--|-- bra.w ee60 <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    edc8:	|  \-> moveq #24,d0
    edca:	|      add.l 20(sp),d0
    edce:	|      move.l d0,-(sp)
    edd0:	|      jsr 1528a <trimStack>
    edd6:	|      addq.l #4,sp
	if (! getValueType(&xPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    edd8:	|      movea.l 20(sp),a0
    eddc:	|      move.l 24(a0),d0
    ede0:	|      move.l d0,-(sp)
    ede2:	|      pea 1 <_start+0x1>
    ede6:	|      moveq #12,d0
    ede8:	|      add.l sp,d0
    edea:	|      move.l d0,-(sp)
    edec:	|      jsr 14906 <getValueType>
    edf2:	|      lea 12(sp),sp
    edf6:	|      tst.w d0
    edf8:	|  /-- bne.s edfe <builtIn_mixOverlay+0x62>
    edfa:	|  |   moveq #1,d0
    edfc:	+--|-- bra.s ee60 <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    edfe:	|  \-> moveq #24,d0
    ee00:	|      add.l 20(sp),d0
    ee04:	|      move.l d0,-(sp)
    ee06:	|      jsr 1528a <trimStack>
    ee0c:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    ee0e:	|      movea.l 20(sp),a0
    ee12:	|      move.l 24(a0),d0
    ee16:	|      move.l d0,-(sp)
    ee18:	|      pea 5 <_start+0x5>
    ee1c:	|      moveq #16,d0
    ee1e:	|      add.l sp,d0
    ee20:	|      move.l d0,-(sp)
    ee22:	|      jsr 14906 <getValueType>
    ee28:	|      lea 12(sp),sp
    ee2c:	|      tst.w d0
    ee2e:	|  /-- bne.s ee34 <builtIn_mixOverlay+0x98>
    ee30:	|  |   moveq #1,d0
    ee32:	+--|-- bra.s ee60 <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    ee34:	|  \-> moveq #24,d0
    ee36:	|      add.l 20(sp),d0
    ee3a:	|      move.l d0,-(sp)
    ee3c:	|      jsr 1528a <trimStack>
    ee42:	|      addq.l #4,sp
	mixBackDrop (fileNumber, xPos, yPos);
    ee44:	|      movea.l (sp),a0
    ee46:	|      move.l 4(sp),d1
    ee4a:	|      move.l 8(sp),d0
    ee4e:	|      move.l a0,-(sp)
    ee50:	|      move.l d1,-(sp)
    ee52:	|      move.l d0,-(sp)
    ee54:	|      jsr d4d8 <mixBackDrop>
    ee5a:	|      lea 12(sp),sp
	return BR_CONTINUE;
    ee5e:	|      moveq #2,d0
}
    ee60:	\----> lea 12(sp),sp
    ee64:	       rts

0000ee66 <builtIn_pasteImage>:

builtIn(pasteImage)
{
    ee66:	       lea -12(sp),sp
	UNUSEDALL
	KPrintF("pasteimage: Started\n");
    ee6a:	       pea 1991f <line.c.05397aaf+0x28>
    ee70:	       jsr 17366 <KPrintF>
    ee76:	       addq.l #4,sp
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ee78:	       movea.l 20(sp),a0
    ee7c:	       move.l 24(a0),d0
    ee80:	       move.l d0,-(sp)
    ee82:	       pea 1 <_start+0x1>
    ee86:	       lea 8(sp),a0
    ee8a:	       move.l a0,-(sp)
    ee8c:	       jsr 14906 <getValueType>
    ee92:	       lea 12(sp),sp
    ee96:	       tst.w d0
    ee98:	   /-- bne.s eea0 <builtIn_pasteImage+0x3a>
    ee9a:	   |   moveq #1,d0
    ee9c:	/--|-- bra.w ef3e <builtIn_pasteImage+0xd8>
	trimStack (&fun -> stack);
    eea0:	|  \-> moveq #24,d0
    eea2:	|      add.l 20(sp),d0
    eea6:	|      move.l d0,-(sp)
    eea8:	|      jsr 1528a <trimStack>
    eeae:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    eeb0:	|      movea.l 20(sp),a0
    eeb4:	|      move.l 24(a0),d0
    eeb8:	|      move.l d0,-(sp)
    eeba:	|      pea 1 <_start+0x1>
    eebe:	|      moveq #12,d0
    eec0:	|      add.l sp,d0
    eec2:	|      move.l d0,-(sp)
    eec4:	|      jsr 14906 <getValueType>
    eeca:	|      lea 12(sp),sp
    eece:	|      tst.w d0
    eed0:	|  /-- bne.s eed6 <builtIn_pasteImage+0x70>
    eed2:	|  |   moveq #1,d0
    eed4:	+--|-- bra.s ef3e <builtIn_pasteImage+0xd8>
	trimStack (&fun -> stack);
    eed6:	|  \-> moveq #24,d0
    eed8:	|      add.l 20(sp),d0
    eedc:	|      move.l d0,-(sp)
    eede:	|      jsr 1528a <trimStack>
    eee4:	|      addq.l #4,sp
	struct personaAnimation * pp = getAnimationFromVar (&(fun -> stack -> thisVar));
    eee6:	|      movea.l 20(sp),a0
    eeea:	|      move.l 24(a0),d0
    eeee:	|      move.l d0,-(sp)
    eef0:	|      jsr 14dde <getAnimationFromVar>
    eef6:	|      addq.l #4,sp
    eef8:	|      move.l d0,8(sp)
	trimStack (&fun -> stack);
    eefc:	|      moveq #24,d0
    eefe:	|      add.l 20(sp),d0
    ef02:	|      move.l d0,-(sp)
    ef04:	|      jsr 1528a <trimStack>
    ef0a:	|      addq.l #4,sp
	if (pp == NULL) return BR_CONTINUE;
    ef0c:	|      tst.l 8(sp)
    ef10:	|  /-- bne.s ef16 <builtIn_pasteImage+0xb0>
    ef12:	|  |   moveq #2,d0
    ef14:	+--|-- bra.s ef3e <builtIn_pasteImage+0xd8>

	pasteCursor (x, y, pp);
    ef16:	|  \-> move.l (sp),d1
    ef18:	|      move.l 4(sp),d0
    ef1c:	|      move.l 8(sp),-(sp)
    ef20:	|      move.l d1,-(sp)
    ef22:	|      move.l d0,-(sp)
    ef24:	|      jsr d94 <pasteCursor>
    ef2a:	|      lea 12(sp),sp
	KPrintF("pasteimage: Finished\n");
    ef2e:	|      pea 19934 <line.c.05397aaf+0x3d>
    ef34:	|      jsr 17366 <KPrintF>
    ef3a:	|      addq.l #4,sp
	return BR_CONTINUE;	
    ef3c:	|      moveq #2,d0
}
    ef3e:	\----> lea 12(sp),sp
    ef42:	       rts

0000ef44 <builtIn_setSceneDimensions>:

#pragma mark -
#pragma mark Background Image - Scrolling

builtIn(setSceneDimensions)
{
    ef44:	       subq.l #8,sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ef46:	       movea.l 16(sp),a0
    ef4a:	       move.l 24(a0),d0
    ef4e:	       move.l d0,-(sp)
    ef50:	       pea 1 <_start+0x1>
    ef54:	       move.l sp,d0
    ef56:	       addq.l #8,d0
    ef58:	       move.l d0,-(sp)
    ef5a:	       jsr 14906 <getValueType>
    ef60:	       lea 12(sp),sp
    ef64:	       tst.w d0
    ef66:	   /-- bne.s ef6e <builtIn_setSceneDimensions+0x2a>
    ef68:	   |   moveq #1,d0
    ef6a:	/--|-- bra.w eff6 <builtIn_setSceneDimensions+0xb2>
	trimStack (&fun -> stack);
    ef6e:	|  \-> moveq #24,d0
    ef70:	|      add.l 16(sp),d0
    ef74:	|      move.l d0,-(sp)
    ef76:	|      jsr 1528a <trimStack>
    ef7c:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ef7e:	|      movea.l 16(sp),a0
    ef82:	|      move.l 24(a0),d0
    ef86:	|      move.l d0,-(sp)
    ef88:	|      pea 1 <_start+0x1>
    ef8c:	|      moveq #12,d0
    ef8e:	|      add.l sp,d0
    ef90:	|      move.l d0,-(sp)
    ef92:	|      jsr 14906 <getValueType>
    ef98:	|      lea 12(sp),sp
    ef9c:	|      tst.w d0
    ef9e:	|  /-- bne.s efa4 <builtIn_setSceneDimensions+0x60>
    efa0:	|  |   moveq #1,d0
    efa2:	+--|-- bra.s eff6 <builtIn_setSceneDimensions+0xb2>
	trimStack (&fun -> stack);
    efa4:	|  \-> moveq #24,d0
    efa6:	|      add.l 16(sp),d0
    efaa:	|      move.l d0,-(sp)
    efac:	|      jsr 1528a <trimStack>
    efb2:	|      addq.l #4,sp
	if (resizeBackdrop (x, y)) {
    efb4:	|      move.l (sp),d1
    efb6:	|      move.l 4(sp),d0
    efba:	|      move.l d1,-(sp)
    efbc:	|      move.l d0,-(sp)
    efbe:	|      jsr d52e <resizeBackdrop>
    efc4:	|      addq.l #8,sp
    efc6:	|      tst.w d0
    efc8:	|  /-- beq.s efe6 <builtIn_setSceneDimensions+0xa2>
		blankScreen (0, 0, x, y);
    efca:	|  |   move.l (sp),d1
    efcc:	|  |   move.l 4(sp),d0
    efd0:	|  |   move.l d1,-(sp)
    efd2:	|  |   move.l d0,-(sp)
    efd4:	|  |   clr.l -(sp)
    efd6:	|  |   clr.l -(sp)
    efd8:	|  |   jsr d330 <blankScreen>
    efde:	|  |   lea 16(sp),sp
		return BR_CONTINUE;
    efe2:	|  |   moveq #2,d0
    efe4:	+--|-- bra.s eff6 <builtIn_setSceneDimensions+0xb2>
	}
	KPrintF("Out of memory creating new backdrop.");
    efe6:	|  \-> pea 1994a <line.c.05397aaf+0x53>
    efec:	|      jsr 17366 <KPrintF>
    eff2:	|      addq.l #4,sp
	return BR_ERROR;
    eff4:	|      moveq #1,d0
}
    eff6:	\----> addq.l #8,sp
    eff8:	       rts

0000effa <builtIn_aimCamera>:

builtIn(aimCamera)
{
    effa:	          move.l d3,-(sp)
    effc:	          move.l d2,-(sp)
	UNUSEDALL
	if (! getValueType(&cameraY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    effe:	          movea.l 16(sp),a0
    f002:	          move.l 24(a0),d0
    f006:	          move.l d0,-(sp)
    f008:	          pea 1 <_start+0x1>
    f00c:	          pea 1cb40 <cameraY>
    f012:	          jsr 14906 <getValueType>
    f018:	          lea 12(sp),sp
    f01c:	          tst.w d0
    f01e:	      /-- bne.s f026 <builtIn_aimCamera+0x2c>
    f020:	      |   moveq #1,d0
    f022:	/-----|-- bra.w f2a8 <builtIn_aimCamera+0x2ae>
	trimStack (&fun -> stack);
    f026:	|     \-> moveq #24,d0
    f028:	|         add.l 16(sp),d0
    f02c:	|         move.l d0,-(sp)
    f02e:	|         jsr 1528a <trimStack>
    f034:	|         addq.l #4,sp
	if (! getValueType(&cameraX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f036:	|         movea.l 16(sp),a0
    f03a:	|         move.l 24(a0),d0
    f03e:	|         move.l d0,-(sp)
    f040:	|         pea 1 <_start+0x1>
    f044:	|         pea 1cb3c <cameraX>
    f04a:	|         jsr 14906 <getValueType>
    f050:	|         lea 12(sp),sp
    f054:	|         tst.w d0
    f056:	|     /-- bne.s f05e <builtIn_aimCamera+0x64>
    f058:	|     |   moveq #1,d0
    f05a:	+-----|-- bra.w f2a8 <builtIn_aimCamera+0x2ae>
	trimStack (&fun -> stack);
    f05e:	|     \-> moveq #24,d0
    f060:	|         add.l 16(sp),d0
    f064:	|         move.l d0,-(sp)
    f066:	|         jsr 1528a <trimStack>
    f06c:	|         addq.l #4,sp

	cameraX -= (FLOAT)(winWidth >> 1)/ cameraZoom;
    f06e:	|         move.l 1cb3c <cameraX>,d0
    f074:	|         move.l d0,-(sp)
    f076:	|         jsr 17798 <__floatsisf>
    f07c:	|         addq.l #4,sp
    f07e:	|         move.l d0,d2
    f080:	|         move.l 1c9d6 <winWidth>,d0
    f086:	|         lsr.l #1,d0
    f088:	|         move.l d0,-(sp)
    f08a:	|         jsr 177c0 <__floatunsisf>
    f090:	|         addq.l #4,sp
    f092:	|         move.l d0,d1
    f094:	|         move.l 1c420 <cameraZoom>,d0
    f09a:	|         move.l d0,-(sp)
    f09c:	|         move.l d1,-(sp)
    f09e:	|         jsr 1764e <__divsf3>
    f0a4:	|         addq.l #8,sp
    f0a6:	|         move.l d0,-(sp)
    f0a8:	|         move.l d2,-(sp)
    f0aa:	|         jsr 17a8c <__subsf3>
    f0b0:	|         addq.l #8,sp
    f0b2:	|         move.l d0,-(sp)
    f0b4:	|         jsr 17730 <__fixsfsi>
    f0ba:	|         addq.l #4,sp
    f0bc:	|         move.l d0,1cb3c <cameraX>
	cameraY -= (FLOAT)(winHeight >> 1)/ cameraZoom;
    f0c2:	|         move.l 1cb40 <cameraY>,d0
    f0c8:	|         move.l d0,-(sp)
    f0ca:	|         jsr 17798 <__floatsisf>
    f0d0:	|         addq.l #4,sp
    f0d2:	|         move.l d0,d2
    f0d4:	|         move.l 1c9da <winHeight>,d0
    f0da:	|         lsr.l #1,d0
    f0dc:	|         move.l d0,-(sp)
    f0de:	|         jsr 177c0 <__floatunsisf>
    f0e4:	|         addq.l #4,sp
    f0e6:	|         move.l d0,d1
    f0e8:	|         move.l 1c420 <cameraZoom>,d0
    f0ee:	|         move.l d0,-(sp)
    f0f0:	|         move.l d1,-(sp)
    f0f2:	|         jsr 1764e <__divsf3>
    f0f8:	|         addq.l #8,sp
    f0fa:	|         move.l d0,-(sp)
    f0fc:	|         move.l d2,-(sp)
    f0fe:	|         jsr 17a8c <__subsf3>
    f104:	|         addq.l #8,sp
    f106:	|         move.l d0,-(sp)
    f108:	|         jsr 17730 <__fixsfsi>
    f10e:	|         addq.l #4,sp
    f110:	|         move.l d0,1cb40 <cameraY>

	if (cameraX < 0) cameraX = 0;
    f116:	|         move.l 1cb3c <cameraX>,d0
    f11c:	|     /-- bpl.s f128 <builtIn_aimCamera+0x12e>
    f11e:	|     |   clr.l 1cb3c <cameraX>
    f124:	|  /--|-- bra.w f1de <builtIn_aimCamera+0x1e4>
	else if (cameraX > sceneWidth - (FLOAT)winWidth/ cameraZoom) cameraX = sceneWidth - (FLOAT)winWidth/ cameraZoom;
    f128:	|  |  \-> move.l 1cb3c <cameraX>,d0
    f12e:	|  |      move.l d0,-(sp)
    f130:	|  |      jsr 17798 <__floatsisf>
    f136:	|  |      addq.l #4,sp
    f138:	|  |      move.l d0,d2
    f13a:	|  |      move.l 1cb1e <sceneWidth>,d0
    f140:	|  |      move.l d0,-(sp)
    f142:	|  |      jsr 177c0 <__floatunsisf>
    f148:	|  |      addq.l #4,sp
    f14a:	|  |      move.l d0,d3
    f14c:	|  |      move.l 1c9d6 <winWidth>,d0
    f152:	|  |      move.l d0,-(sp)
    f154:	|  |      jsr 177c0 <__floatunsisf>
    f15a:	|  |      addq.l #4,sp
    f15c:	|  |      move.l d0,d1
    f15e:	|  |      move.l 1c420 <cameraZoom>,d0
    f164:	|  |      move.l d0,-(sp)
    f166:	|  |      move.l d1,-(sp)
    f168:	|  |      jsr 1764e <__divsf3>
    f16e:	|  |      addq.l #8,sp
    f170:	|  |      move.l d0,-(sp)
    f172:	|  |      move.l d3,-(sp)
    f174:	|  |      jsr 17a8c <__subsf3>
    f17a:	|  |      addq.l #8,sp
    f17c:	|  |      move.l d0,-(sp)
    f17e:	|  |      move.l d2,-(sp)
    f180:	|  |      jsr 17904 <__gtsf2>
    f186:	|  |      addq.l #8,sp
    f188:	|  |      tst.l d0
    f18a:	|  +----- ble.s f1de <builtIn_aimCamera+0x1e4>
    f18c:	|  |      move.l 1cb1e <sceneWidth>,d0
    f192:	|  |      move.l d0,-(sp)
    f194:	|  |      jsr 177c0 <__floatunsisf>
    f19a:	|  |      addq.l #4,sp
    f19c:	|  |      move.l d0,d2
    f19e:	|  |      move.l 1c9d6 <winWidth>,d0
    f1a4:	|  |      move.l d0,-(sp)
    f1a6:	|  |      jsr 177c0 <__floatunsisf>
    f1ac:	|  |      addq.l #4,sp
    f1ae:	|  |      move.l d0,d1
    f1b0:	|  |      move.l 1c420 <cameraZoom>,d0
    f1b6:	|  |      move.l d0,-(sp)
    f1b8:	|  |      move.l d1,-(sp)
    f1ba:	|  |      jsr 1764e <__divsf3>
    f1c0:	|  |      addq.l #8,sp
    f1c2:	|  |      move.l d0,-(sp)
    f1c4:	|  |      move.l d2,-(sp)
    f1c6:	|  |      jsr 17a8c <__subsf3>
    f1cc:	|  |      addq.l #8,sp
    f1ce:	|  |      move.l d0,-(sp)
    f1d0:	|  |      jsr 17730 <__fixsfsi>
    f1d6:	|  |      addq.l #4,sp
    f1d8:	|  |      move.l d0,1cb3c <cameraX>
	if (cameraY < 0) cameraY = 0;
    f1de:	|  \----> move.l 1cb40 <cameraY>,d0
    f1e4:	|     /-- bpl.s f1f0 <builtIn_aimCamera+0x1f6>
    f1e6:	|     |   clr.l 1cb40 <cameraY>
    f1ec:	|  /--|-- bra.w f2a6 <builtIn_aimCamera+0x2ac>
	else if (cameraY > sceneHeight - (FLOAT)winHeight/ cameraZoom) cameraY = sceneHeight - (FLOAT)winHeight/ cameraZoom;
    f1f0:	|  |  \-> move.l 1cb40 <cameraY>,d0
    f1f6:	|  |      move.l d0,-(sp)
    f1f8:	|  |      jsr 17798 <__floatsisf>
    f1fe:	|  |      addq.l #4,sp
    f200:	|  |      move.l d0,d2
    f202:	|  |      move.l 1cb22 <sceneHeight>,d0
    f208:	|  |      move.l d0,-(sp)
    f20a:	|  |      jsr 177c0 <__floatunsisf>
    f210:	|  |      addq.l #4,sp
    f212:	|  |      move.l d0,d3
    f214:	|  |      move.l 1c9da <winHeight>,d0
    f21a:	|  |      move.l d0,-(sp)
    f21c:	|  |      jsr 177c0 <__floatunsisf>
    f222:	|  |      addq.l #4,sp
    f224:	|  |      move.l d0,d1
    f226:	|  |      move.l 1c420 <cameraZoom>,d0
    f22c:	|  |      move.l d0,-(sp)
    f22e:	|  |      move.l d1,-(sp)
    f230:	|  |      jsr 1764e <__divsf3>
    f236:	|  |      addq.l #8,sp
    f238:	|  |      move.l d0,-(sp)
    f23a:	|  |      move.l d3,-(sp)
    f23c:	|  |      jsr 17a8c <__subsf3>
    f242:	|  |      addq.l #8,sp
    f244:	|  |      move.l d0,-(sp)
    f246:	|  |      move.l d2,-(sp)
    f248:	|  |      jsr 17904 <__gtsf2>
    f24e:	|  |      addq.l #8,sp
    f250:	|  |      tst.l d0
    f252:	|  +----- ble.s f2a6 <builtIn_aimCamera+0x2ac>
    f254:	|  |      move.l 1cb22 <sceneHeight>,d0
    f25a:	|  |      move.l d0,-(sp)
    f25c:	|  |      jsr 177c0 <__floatunsisf>
    f262:	|  |      addq.l #4,sp
    f264:	|  |      move.l d0,d2
    f266:	|  |      move.l 1c9da <winHeight>,d0
    f26c:	|  |      move.l d0,-(sp)
    f26e:	|  |      jsr 177c0 <__floatunsisf>
    f274:	|  |      addq.l #4,sp
    f276:	|  |      move.l d0,d1
    f278:	|  |      move.l 1c420 <cameraZoom>,d0
    f27e:	|  |      move.l d0,-(sp)
    f280:	|  |      move.l d1,-(sp)
    f282:	|  |      jsr 1764e <__divsf3>
    f288:	|  |      addq.l #8,sp
    f28a:	|  |      move.l d0,-(sp)
    f28c:	|  |      move.l d2,-(sp)
    f28e:	|  |      jsr 17a8c <__subsf3>
    f294:	|  |      addq.l #8,sp
    f296:	|  |      move.l d0,-(sp)
    f298:	|  |      jsr 17730 <__fixsfsi>
    f29e:	|  |      addq.l #4,sp
    f2a0:	|  |      move.l d0,1cb40 <cameraY>
	return BR_CONTINUE;
    f2a6:	|  \----> moveq #2,d0
}
    f2a8:	\-------> move.l (sp)+,d2
    f2aa:	          move.l (sp)+,d3
    f2ac:	          rts

0000f2ae <builtIn_zoomCamera>:


builtIn(zoomCamera)
{
    f2ae:	       subq.l #4,sp
    f2b0:	       move.l d2,-(sp)
	UNUSEDALL
	int z;
	if (! getValueType(&z, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f2b2:	       movea.l 16(sp),a0
    f2b6:	       move.l 24(a0),d0
    f2ba:	       move.l d0,-(sp)
    f2bc:	       pea 1 <_start+0x1>
    f2c0:	       moveq #12,d0
    f2c2:	       add.l sp,d0
    f2c4:	       move.l d0,-(sp)
    f2c6:	       jsr 14906 <getValueType>
    f2cc:	       lea 12(sp),sp
    f2d0:	       tst.w d0
    f2d2:	   /-- bne.s f2da <builtIn_zoomCamera+0x2c>
    f2d4:	   |   moveq #1,d0
    f2d6:	/--|-- bra.w f4d4 <builtIn_zoomCamera+0x226>
	trimStack (&fun -> stack);
    f2da:	|  \-> moveq #24,d0
    f2dc:	|      add.l 16(sp),d0
    f2e0:	|      move.l d0,-(sp)
    f2e2:	|      jsr 1528a <trimStack>
    f2e8:	|      addq.l #4,sp

	input.mouseX = input.mouseX * cameraZoom;
    f2ea:	|      move.l 1ca3e <input+0xa>,d0
    f2f0:	|      move.l d0,-(sp)
    f2f2:	|      jsr 17798 <__floatsisf>
    f2f8:	|      addq.l #4,sp
    f2fa:	|      move.l d0,d1
    f2fc:	|      move.l 1c420 <cameraZoom>,d0
    f302:	|      move.l d0,-(sp)
    f304:	|      move.l d1,-(sp)
    f306:	|      jsr 1784a <__mulsf3>
    f30c:	|      addq.l #8,sp
    f30e:	|      move.l d0,-(sp)
    f310:	|      jsr 17730 <__fixsfsi>
    f316:	|      addq.l #4,sp
    f318:	|      move.l d0,1ca3e <input+0xa>
	input.mouseY = input.mouseY * cameraZoom;
    f31e:	|      move.l 1ca42 <input+0xe>,d0
    f324:	|      move.l d0,-(sp)
    f326:	|      jsr 17798 <__floatsisf>
    f32c:	|      addq.l #4,sp
    f32e:	|      move.l d0,d1
    f330:	|      move.l 1c420 <cameraZoom>,d0
    f336:	|      move.l d0,-(sp)
    f338:	|      move.l d1,-(sp)
    f33a:	|      jsr 1784a <__mulsf3>
    f340:	|      addq.l #8,sp
    f342:	|      move.l d0,-(sp)
    f344:	|      jsr 17730 <__fixsfsi>
    f34a:	|      addq.l #4,sp
    f34c:	|      move.l d0,1ca42 <input+0xe>


	cameraZoom = (FLOAT) z * (FLOAT) 0.01;
    f352:	|      move.l 4(sp),d0
    f356:	|      move.l d0,-(sp)
    f358:	|      jsr 17798 <__floatsisf>
    f35e:	|      addq.l #4,sp
    f360:	|      move.l #1008981770,-(sp)
    f366:	|      move.l d0,-(sp)
    f368:	|      jsr 1784a <__mulsf3>
    f36e:	|      addq.l #8,sp
    f370:	|      move.l d0,1c420 <cameraZoom>
	if ((FLOAT) winWidth / cameraZoom > sceneWidth) cameraZoom = (FLOAT)winWidth / sceneWidth;
    f376:	|      move.l 1c9d6 <winWidth>,d0
    f37c:	|      move.l d0,-(sp)
    f37e:	|      jsr 177c0 <__floatunsisf>
    f384:	|      addq.l #4,sp
    f386:	|      move.l d0,d1
    f388:	|      move.l 1c420 <cameraZoom>,d0
    f38e:	|      move.l d0,-(sp)
    f390:	|      move.l d1,-(sp)
    f392:	|      jsr 1764e <__divsf3>
    f398:	|      addq.l #8,sp
    f39a:	|      move.l d0,d2
    f39c:	|      move.l 1cb1e <sceneWidth>,d0
    f3a2:	|      move.l d0,-(sp)
    f3a4:	|      jsr 177c0 <__floatunsisf>
    f3aa:	|      addq.l #4,sp
    f3ac:	|      move.l d0,-(sp)
    f3ae:	|      move.l d2,-(sp)
    f3b0:	|      jsr 17904 <__gtsf2>
    f3b6:	|      addq.l #8,sp
    f3b8:	|      tst.l d0
    f3ba:	|  /-- ble.s f3f0 <builtIn_zoomCamera+0x142>
    f3bc:	|  |   move.l 1c9d6 <winWidth>,d0
    f3c2:	|  |   move.l d0,-(sp)
    f3c4:	|  |   jsr 177c0 <__floatunsisf>
    f3ca:	|  |   addq.l #4,sp
    f3cc:	|  |   move.l d0,d2
    f3ce:	|  |   move.l 1cb1e <sceneWidth>,d0
    f3d4:	|  |   move.l d0,-(sp)
    f3d6:	|  |   jsr 177c0 <__floatunsisf>
    f3dc:	|  |   addq.l #4,sp
    f3de:	|  |   move.l d0,-(sp)
    f3e0:	|  |   move.l d2,-(sp)
    f3e2:	|  |   jsr 1764e <__divsf3>
    f3e8:	|  |   addq.l #8,sp
    f3ea:	|  |   move.l d0,1c420 <cameraZoom>
	if ((FLOAT) winHeight / cameraZoom > sceneHeight) cameraZoom = (FLOAT)winHeight / sceneHeight;
    f3f0:	|  \-> move.l 1c9da <winHeight>,d0
    f3f6:	|      move.l d0,-(sp)
    f3f8:	|      jsr 177c0 <__floatunsisf>
    f3fe:	|      addq.l #4,sp
    f400:	|      move.l d0,d1
    f402:	|      move.l 1c420 <cameraZoom>,d0
    f408:	|      move.l d0,-(sp)
    f40a:	|      move.l d1,-(sp)
    f40c:	|      jsr 1764e <__divsf3>
    f412:	|      addq.l #8,sp
    f414:	|      move.l d0,d2
    f416:	|      move.l 1cb22 <sceneHeight>,d0
    f41c:	|      move.l d0,-(sp)
    f41e:	|      jsr 177c0 <__floatunsisf>
    f424:	|      addq.l #4,sp
    f426:	|      move.l d0,-(sp)
    f428:	|      move.l d2,-(sp)
    f42a:	|      jsr 17904 <__gtsf2>
    f430:	|      addq.l #8,sp
    f432:	|      tst.l d0
    f434:	|  /-- ble.s f46a <builtIn_zoomCamera+0x1bc>
    f436:	|  |   move.l 1c9da <winHeight>,d0
    f43c:	|  |   move.l d0,-(sp)
    f43e:	|  |   jsr 177c0 <__floatunsisf>
    f444:	|  |   addq.l #4,sp
    f446:	|  |   move.l d0,d2
    f448:	|  |   move.l 1cb22 <sceneHeight>,d0
    f44e:	|  |   move.l d0,-(sp)
    f450:	|  |   jsr 177c0 <__floatunsisf>
    f456:	|  |   addq.l #4,sp
    f458:	|  |   move.l d0,-(sp)
    f45a:	|  |   move.l d2,-(sp)
    f45c:	|  |   jsr 1764e <__divsf3>
    f462:	|  |   addq.l #8,sp
    f464:	|  |   move.l d0,1c420 <cameraZoom>
	//setPixelCoords (FALSE); Todo: Amigize this

	input.mouseX = input.mouseX / cameraZoom;
    f46a:	|  \-> move.l 1ca3e <input+0xa>,d0
    f470:	|      move.l d0,-(sp)
    f472:	|      jsr 17798 <__floatsisf>
    f478:	|      addq.l #4,sp
    f47a:	|      move.l d0,d1
    f47c:	|      move.l 1c420 <cameraZoom>,d0
    f482:	|      move.l d0,-(sp)
    f484:	|      move.l d1,-(sp)
    f486:	|      jsr 1764e <__divsf3>
    f48c:	|      addq.l #8,sp
    f48e:	|      move.l d0,-(sp)
    f490:	|      jsr 17730 <__fixsfsi>
    f496:	|      addq.l #4,sp
    f498:	|      move.l d0,1ca3e <input+0xa>
	input.mouseY = input.mouseY / cameraZoom;
    f49e:	|      move.l 1ca42 <input+0xe>,d0
    f4a4:	|      move.l d0,-(sp)
    f4a6:	|      jsr 17798 <__floatsisf>
    f4ac:	|      addq.l #4,sp
    f4ae:	|      move.l d0,d1
    f4b0:	|      move.l 1c420 <cameraZoom>,d0
    f4b6:	|      move.l d0,-(sp)
    f4b8:	|      move.l d1,-(sp)
    f4ba:	|      jsr 1764e <__divsf3>
    f4c0:	|      addq.l #8,sp
    f4c2:	|      move.l d0,-(sp)
    f4c4:	|      jsr 17730 <__fixsfsi>
    f4ca:	|      addq.l #4,sp
    f4cc:	|      move.l d0,1ca42 <input+0xe>

	return BR_CONTINUE;
    f4d2:	|      moveq #2,d0
}
    f4d4:	\----> move.l (sp)+,d2
    f4d6:	       addq.l #4,sp
    f4d8:	       rts

0000f4da <builtIn_pickOne>:
#pragma mark -
#pragma mark Variables


builtIn(pickOne)
{
    f4da:	             subq.l #4,sp
	UNUSEDALL
	if (! numParams) {
    f4dc:	             tst.l 8(sp)
    f4e0:	         /-- bne.s f4f4 <builtIn_pickOne+0x1a>
		KPrintF ("Built-in function should have at least 1 parameter");
    f4e2:	         |   pea 1996f <line.c.05397aaf+0x78>
    f4e8:	         |   jsr 17366 <KPrintF>
    f4ee:	         |   addq.l #4,sp
		return BR_ERROR;
    f4f0:	         |   moveq #1,d0
    f4f2:	/--------|-- bra.s f554 <builtIn_pickOne+0x7a>
	}
	int i = rand() % numParams;
    f4f4:	|        \-> jsr 15f26 <rand>
    f4fa:	|            move.l d0,d1
    f4fc:	|            move.l 8(sp),d0
    f500:	|            move.l d0,-(sp)
    f502:	|            move.l d1,-(sp)
    f504:	|            jsr 17df4 <__umodsi3>
    f50a:	|            addq.l #8,sp
    f50c:	|            move.l d0,(sp)

	// Return value
	while (numParams --) {
    f50e:	|     /----- bra.s f542 <builtIn_pickOne+0x68>
		if (i == numParams) copyVariable (&(fun -> stack -> thisVar), &fun -> reg);
    f510:	|  /--|----> move.l (sp),d0
    f512:	|  |  |      cmp.l 8(sp),d0
    f516:	|  |  |  /-- bne.s f532 <builtIn_pickOne+0x58>
    f518:	|  |  |  |   moveq #28,d0
    f51a:	|  |  |  |   add.l 12(sp),d0
    f51e:	|  |  |  |   movea.l 12(sp),a0
    f522:	|  |  |  |   move.l 24(a0),d1
    f526:	|  |  |  |   move.l d0,-(sp)
    f528:	|  |  |  |   move.l d1,-(sp)
    f52a:	|  |  |  |   jsr 14dc0 <copyVariable>
    f530:	|  |  |  |   addq.l #8,sp
		trimStack (&fun -> stack);
    f532:	|  |  |  \-> moveq #24,d0
    f534:	|  |  |      add.l 12(sp),d0
    f538:	|  |  |      move.l d0,-(sp)
    f53a:	|  |  |      jsr 1528a <trimStack>
    f540:	|  |  |      addq.l #4,sp
	while (numParams --) {
    f542:	|  |  \----> move.l 8(sp),d0
    f546:	|  |         move.l d0,d1
    f548:	|  |         subq.l #1,d1
    f54a:	|  |         move.l d1,8(sp)
    f54e:	|  |         tst.l d0
    f550:	|  \-------- bne.s f510 <builtIn_pickOne+0x36>
	}
	return BR_CONTINUE;
    f552:	|            moveq #2,d0
}
    f554:	\----------> addq.l #4,sp
    f556:	             rts

0000f558 <builtIn_substring>:

builtIn(substring)
{
    f558:	       lea -40(sp),sp
    f55c:	       move.l a6,-(sp)
    f55e:	       move.l d2,-(sp)
    char *newString;
    int start, length;

    //debugOut ("BUILTIN: substring\n");

    if (!getValueType(&length, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    f560:	       movea.l 56(sp),a0
    f564:	       move.l 24(a0),d0
    f568:	       move.l d0,-(sp)
    f56a:	       pea 1 <_start+0x1>
    f56e:	       lea 16(sp),a0
    f572:	       move.l a0,-(sp)
    f574:	       jsr 14906 <getValueType>
    f57a:	       lea 12(sp),sp
    f57e:	       tst.w d0
    f580:	   /-- bne.s f588 <builtIn_substring+0x30>
    f582:	   |   moveq #1,d0
    f584:	/--|-- bra.w f700 <builtIn_substring+0x1a8>
    trimStack(&fun->stack);
    f588:	|  \-> moveq #24,d0
    f58a:	|      add.l 56(sp),d0
    f58e:	|      move.l d0,-(sp)
    f590:	|      jsr 1528a <trimStack>
    f596:	|      addq.l #4,sp
    if (!getValueType(&start, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    f598:	|      movea.l 56(sp),a0
    f59c:	|      move.l 24(a0),d0
    f5a0:	|      move.l d0,-(sp)
    f5a2:	|      pea 1 <_start+0x1>
    f5a6:	|      lea 20(sp),a0
    f5aa:	|      move.l a0,-(sp)
    f5ac:	|      jsr 14906 <getValueType>
    f5b2:	|      lea 12(sp),sp
    f5b6:	|      tst.w d0
    f5b8:	|  /-- bne.s f5c0 <builtIn_substring+0x68>
    f5ba:	|  |   moveq #1,d0
    f5bc:	+--|-- bra.w f700 <builtIn_substring+0x1a8>
    trimStack(&fun->stack);
    f5c0:	|  \-> moveq #24,d0
    f5c2:	|      add.l 56(sp),d0
    f5c6:	|      move.l d0,-(sp)
    f5c8:	|      jsr 1528a <trimStack>
    f5ce:	|      addq.l #4,sp
    wholeString = getTextFromAnyVar(&(fun->stack->thisVar));
    f5d0:	|      movea.l 56(sp),a0
    f5d4:	|      move.l 24(a0),d0
    f5d8:	|      move.l d0,-(sp)
    f5da:	|      jsr 14edc <getTextFromAnyVar>
    f5e0:	|      addq.l #4,sp
    f5e2:	|      move.l d0,44(sp)
    trimStack(&fun->stack);
    f5e6:	|      moveq #24,d0
    f5e8:	|      add.l 56(sp),d0
    f5ec:	|      move.l d0,-(sp)
    f5ee:	|      jsr 1528a <trimStack>
    f5f4:	|      addq.l #4,sp
    
    if (strlen(wholeString) < (ULONG) start + length) {
    f5f6:	|      move.l 44(sp),-(sp)
    f5fa:	|      jsr 13df2 <strlen>
    f600:	|      addq.l #4,sp
    f602:	|      move.l d0,d1
    f604:	|      move.l 12(sp),d0
    f608:	|      movea.l d0,a0
    f60a:	|      move.l 8(sp),d0
    f60e:	|      add.l a0,d0
    f610:	|      cmp.l d1,d0
    f612:	|  /-- bls.s f648 <builtIn_substring+0xf0>
        length = strlen(wholeString) - start;
    f614:	|  |   move.l 44(sp),-(sp)
    f618:	|  |   jsr 13df2 <strlen>
    f61e:	|  |   addq.l #4,sp
    f620:	|  |   move.l d0,d1
    f622:	|  |   move.l 12(sp),d0
    f626:	|  |   sub.l d0,d1
    f628:	|  |   move.l d1,d0
    f62a:	|  |   move.l d0,8(sp)
        if (strlen(wholeString) < (ULONG) start) {
    f62e:	|  |   move.l 44(sp),-(sp)
    f632:	|  |   jsr 13df2 <strlen>
    f638:	|  |   addq.l #4,sp
    f63a:	|  |   move.l d0,d1
    f63c:	|  |   move.l 12(sp),d0
    f640:	|  |   cmp.l d1,d0
    f642:	|  +-- bls.s f648 <builtIn_substring+0xf0>
            start = 0;
    f644:	|  |   clr.l 12(sp)
        }
    }
    if (length < 0) {
    f648:	|  \-> move.l 8(sp),d0
    f64c:	|  /-- bpl.s f652 <builtIn_substring+0xfa>
        length = 0;
    f64e:	|  |   clr.l 8(sp)
    }
    
    int startoffset = start;
    f652:	|  \-> move.l 12(sp),40(sp)
    int endoffset = start + length;
    f658:	|      move.l 12(sp),d1
    f65c:	|      move.l 8(sp),d0
    f660:	|      move.l d1,d2
    f662:	|      add.l d0,d2
    f664:	|      move.l d2,36(sp)

    newString = AllocVec(endoffset - startoffset + 1, MEMF_ANY);
    f668:	|      move.l 36(sp),d0
    f66c:	|      sub.l 40(sp),d0
    f670:	|      addq.l #1,d0
    f672:	|      move.l d0,32(sp)
    f676:	|      clr.l 28(sp)
    f67a:	|      move.l 1ca82 <SysBase>,d0
    f680:	|      movea.l d0,a6
    f682:	|      move.l 32(sp),d0
    f686:	|      move.l 28(sp),d1
    f68a:	|      jsr -684(a6)
    f68e:	|      move.l d0,24(sp)
    f692:	|      move.l 24(sp),d0
    f696:	|      move.l d0,20(sp)
    if (!newString) {
    f69a:	|  /-- bne.s f6a0 <builtIn_substring+0x148>
        return BR_ERROR;
    f69c:	|  |   moveq #1,d0
    f69e:	+--|-- bra.s f700 <builtIn_substring+0x1a8>
    }
    
    memcpy(newString, wholeString + startoffset, endoffset - startoffset);
    f6a0:	|  \-> move.l 36(sp),d0
    f6a4:	|      sub.l 40(sp),d0
    f6a8:	|      move.l d0,d1
    f6aa:	|      move.l 40(sp),d0
    f6ae:	|      add.l 44(sp),d0
    f6b2:	|      move.l d1,-(sp)
    f6b4:	|      move.l d0,-(sp)
    f6b6:	|      move.l 28(sp),-(sp)
    f6ba:	|      jsr 1731a <memcpy>
    f6c0:	|      lea 12(sp),sp
    newString[endoffset - startoffset] = 0;
    f6c4:	|      move.l 36(sp),d0
    f6c8:	|      sub.l 40(sp),d0
    f6cc:	|      movea.l 20(sp),a0
    f6d0:	|      adda.l d0,a0
    f6d2:	|      clr.b (a0)
    
    makeTextVar(&fun->reg, newString);
    f6d4:	|      moveq #28,d0
    f6d6:	|      add.l 56(sp),d0
    f6da:	|      move.l 20(sp),-(sp)
    f6de:	|      move.l d0,-(sp)
    f6e0:	|      jsr 14b28 <makeTextVar>
    f6e6:	|      addq.l #8,sp
    FreeVec(newString);
    f6e8:	|      move.l 20(sp),16(sp)
    f6ee:	|      move.l 1ca82 <SysBase>,d0
    f6f4:	|      movea.l d0,a6
    f6f6:	|      movea.l 16(sp),a1
    f6fa:	|      jsr -690(a6)
    return BR_CONTINUE;
    f6fe:	|      moveq #2,d0
}
    f700:	\----> move.l (sp)+,d2
    f702:	       movea.l (sp)+,a6
    f704:	       lea 40(sp),sp
    f708:	       rts

0000f70a <builtIn_stringLength>:

builtIn(stringLength)
{
    f70a:	subq.l #8,sp
    f70c:	move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    f70e:	movea.l 20(sp),a0
    f712:	move.l 24(a0),d0
    f716:	move.l d0,-(sp)
    f718:	jsr 14edc <getTextFromAnyVar>
    f71e:	addq.l #4,sp
    f720:	move.l d0,8(sp)
	trimStack (&fun -> stack);
    f724:	moveq #24,d0
    f726:	add.l 20(sp),d0
    f72a:	move.l d0,-(sp)
    f72c:	jsr 1528a <trimStack>
    f732:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, strlen(newText));
    f734:	move.l 8(sp),-(sp)
    f738:	jsr 13df2 <strlen>
    f73e:	addq.l #4,sp
    f740:	move.l d0,d1
    f742:	moveq #28,d0
    f744:	add.l 20(sp),d0
    f748:	move.l d1,-(sp)
    f74a:	pea 1 <_start+0x1>
    f74e:	move.l d0,-(sp)
    f750:	jsr 151f8 <setVariable>
    f756:	lea 12(sp),sp
	FreeVec(newText);
    f75a:	move.l 8(sp),4(sp)
    f760:	move.l 1ca82 <SysBase>,d0
    f766:	movea.l d0,a6
    f768:	movea.l 4(sp),a1
    f76c:	jsr -690(a6)
	return BR_CONTINUE;
    f770:	moveq #2,d0
}
    f772:	movea.l (sp)+,a6
    f774:	addq.l #8,sp
    f776:	rts

0000f778 <builtIn_newStack>:

builtIn(newStack)
{
    f778:	             lea -12(sp),sp
    f77c:	             move.l a6,-(sp)
    UNUSEDALL
    unlinkVar(&fun->reg);
    f77e:	             moveq #28,d0
    f780:	             add.l 24(sp),d0
    f784:	             move.l d0,-(sp)
    f786:	             jsr 14b54 <unlinkVar>
    f78c:	             addq.l #4,sp

    // Return value
    fun->reg.varType = SVT_STACK;
    f78e:	             movea.l 24(sp),a0
    f792:	             moveq #6,d0
    f794:	             move.l d0,28(a0)
    fun->reg.varData.theStack = AllocVec(sizeof(struct stackHandler), MEMF_ANY);
    f798:	             moveq #12,d1
    f79a:	             move.l d1,12(sp)
    f79e:	             clr.l 8(sp)
    f7a2:	             move.l 1ca82 <SysBase>,d0
    f7a8:	             movea.l d0,a6
    f7aa:	             move.l 12(sp),d0
    f7ae:	             move.l 8(sp),d1
    f7b2:	             jsr -684(a6)
    f7b6:	             move.l d0,4(sp)
    f7ba:	             move.l 4(sp),d0
    f7be:	             movea.l 24(sp),a0
    f7c2:	             move.l d0,32(a0)
    if (!fun->reg.varData.theStack) return BR_ERROR;
    f7c6:	             movea.l 24(sp),a0
    f7ca:	             move.l 32(a0),d0
    f7ce:	         /-- bne.s f7d6 <builtIn_newStack+0x5e>
    f7d0:	         |   moveq #1,d0
    f7d2:	/--------|-- bra.w f868 <builtIn_newStack+0xf0>
    fun->reg.varData.theStack->first = NULL;
    f7d6:	|        \-> movea.l 24(sp),a0
    f7da:	|            movea.l 32(a0),a0
    f7de:	|            clr.l (a0)
    fun->reg.varData.theStack->last = NULL;
    f7e0:	|            movea.l 24(sp),a0
    f7e4:	|            movea.l 32(a0),a0
    f7e8:	|            clr.l 4(a0)
    fun->reg.varData.theStack->timesUsed = 1;
    f7ec:	|            movea.l 24(sp),a0
    f7f0:	|            movea.l 32(a0),a0
    f7f4:	|            moveq #1,d0
    f7f6:	|            move.l d0,8(a0)
    
    while (numParams--) {
    f7fa:	|     /----- bra.s f856 <builtIn_newStack+0xde>
        if (!addVarToStack(&fun->stack->thisVar, &fun->reg.varData.theStack->first)) return BR_ERROR;
    f7fc:	|  /--|----> movea.l 24(sp),a0
    f800:	|  |  |      move.l 32(a0),d0
    f804:	|  |  |      move.l d0,d1
    f806:	|  |  |      movea.l 24(sp),a0
    f80a:	|  |  |      move.l 24(a0),d0
    f80e:	|  |  |      move.l d1,-(sp)
    f810:	|  |  |      move.l d0,-(sp)
    f812:	|  |  |      jsr 14142 <addVarToStack>
    f818:	|  |  |      addq.l #8,sp
    f81a:	|  |  |      tst.w d0
    f81c:	|  |  |  /-- bne.s f822 <builtIn_newStack+0xaa>
    f81e:	|  |  |  |   moveq #1,d0
    f820:	+--|--|--|-- bra.s f868 <builtIn_newStack+0xf0>
        if (fun->reg.varData.theStack->last == NULL) {
    f822:	|  |  |  \-> movea.l 24(sp),a0
    f826:	|  |  |      movea.l 32(a0),a0
    f82a:	|  |  |      move.l 4(a0),d0
    f82e:	|  |  |  /-- bne.s f846 <builtIn_newStack+0xce>
            fun->reg.varData.theStack->last = fun->reg.varData.theStack->first;
    f830:	|  |  |  |   movea.l 24(sp),a0
    f834:	|  |  |  |   movea.l 32(a0),a1
    f838:	|  |  |  |   movea.l 24(sp),a0
    f83c:	|  |  |  |   movea.l 32(a0),a0
    f840:	|  |  |  |   move.l (a1),d0
    f842:	|  |  |  |   move.l d0,4(a0)
        }
        trimStack(&fun->stack);
    f846:	|  |  |  \-> moveq #24,d0
    f848:	|  |  |      add.l 24(sp),d0
    f84c:	|  |  |      move.l d0,-(sp)
    f84e:	|  |  |      jsr 1528a <trimStack>
    f854:	|  |  |      addq.l #4,sp
    while (numParams--) {
    f856:	|  |  \----> move.l 20(sp),d0
    f85a:	|  |         move.l d0,d1
    f85c:	|  |         subq.l #1,d1
    f85e:	|  |         move.l d1,20(sp)
    f862:	|  |         tst.l d0
    f864:	|  \-------- bne.s f7fc <builtIn_newStack+0x84>
    }
    return BR_CONTINUE;
    f866:	|            moveq #2,d0
}
    f868:	\----------> movea.l (sp)+,a6
    f86a:	             lea 12(sp),sp
    f86e:	             rts

0000f870 <builtIn_stackSize>:
#define builtIn_wait builtIn_newStack

builtIn(stackSize)
{
	UNUSEDALL
	switch (fun -> stack -> thisVar.varType) {
    f870:	          movea.l 8(sp),a0
    f874:	          movea.l 24(a0),a0
    f878:	          move.l (a0),d0
    f87a:	          moveq #6,d1
    f87c:	          cmp.l d0,d1
    f87e:	      /-- beq.s f89a <builtIn_stackSize+0x2a>
    f880:	      |   moveq #10,d1
    f882:	      |   cmp.l d0,d1
    f884:	   /--|-- beq.s f8de <builtIn_stackSize+0x6e>
			setVariable (&fun -> reg, SVT_INT, fun -> stack -> thisVar.varData.fastArray -> size);
			trimStack (&fun -> stack);
			return BR_CONTINUE;

		default:
			break;
    f886:	   |  |   nop
	}
	KPrintF ("Parameter isn't a stack or a fast array.");
    f888:	   |  |   pea 199a2 <line.c.05397aaf+0xab>
    f88e:	   |  |   jsr 17366 <KPrintF>
    f894:	   |  |   addq.l #4,sp
	return BR_ERROR;
    f896:	   |  |   moveq #1,d0
    f898:	/--|--|-- bra.s f918 <builtIn_stackSize+0xa8>
			setVariable (&fun -> reg, SVT_INT, stackSize (fun -> stack -> thisVar.varData.theStack));
    f89a:	|  |  \-> movea.l 8(sp),a0
    f89e:	|  |      movea.l 24(a0),a0
    f8a2:	|  |      move.l 4(a0),d0
    f8a6:	|  |      move.l d0,-(sp)
    f8a8:	|  |      jsr 15266 <stackSize>
    f8ae:	|  |      addq.l #4,sp
    f8b0:	|  |      move.l d0,d1
    f8b2:	|  |      moveq #28,d0
    f8b4:	|  |      add.l 8(sp),d0
    f8b8:	|  |      move.l d1,-(sp)
    f8ba:	|  |      pea 1 <_start+0x1>
    f8be:	|  |      move.l d0,-(sp)
    f8c0:	|  |      jsr 151f8 <setVariable>
    f8c6:	|  |      lea 12(sp),sp
			trimStack (&fun -> stack);
    f8ca:	|  |      moveq #24,d0
    f8cc:	|  |      add.l 8(sp),d0
    f8d0:	|  |      move.l d0,-(sp)
    f8d2:	|  |      jsr 1528a <trimStack>
    f8d8:	|  |      addq.l #4,sp
			return BR_CONTINUE;
    f8da:	|  |      moveq #2,d0
    f8dc:	+--|----- bra.s f918 <builtIn_stackSize+0xa8>
			setVariable (&fun -> reg, SVT_INT, fun -> stack -> thisVar.varData.fastArray -> size);
    f8de:	|  \----> movea.l 8(sp),a0
    f8e2:	|         movea.l 24(a0),a0
    f8e6:	|         movea.l 4(a0),a0
    f8ea:	|         move.l 4(a0),d1
    f8ee:	|         moveq #28,d0
    f8f0:	|         add.l 8(sp),d0
    f8f4:	|         move.l d1,-(sp)
    f8f6:	|         pea 1 <_start+0x1>
    f8fa:	|         move.l d0,-(sp)
    f8fc:	|         jsr 151f8 <setVariable>
    f902:	|         lea 12(sp),sp
			trimStack (&fun -> stack);
    f906:	|         moveq #24,d0
    f908:	|         add.l 8(sp),d0
    f90c:	|         move.l d0,-(sp)
    f90e:	|         jsr 1528a <trimStack>
    f914:	|         addq.l #4,sp
			return BR_CONTINUE;
    f916:	|         moveq #2,d0
}
    f918:	\-------> rts

0000f91a <builtIn_copyStack>:

builtIn(copyStack)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    f91a:	       movea.l 8(sp),a0
    f91e:	       movea.l 24(a0),a0
    f922:	       move.l (a0),d0
    f924:	       moveq #6,d1
    f926:	       cmp.l d0,d1
    f928:	   /-- beq.s f93c <builtIn_copyStack+0x22>
		KPrintF ("Parameter isn't a stack.");
    f92a:	   |   pea 199cb <line.c.05397aaf+0xd4>
    f930:	   |   jsr 17366 <KPrintF>
    f936:	   |   addq.l #4,sp
		return BR_ERROR;
    f938:	   |   moveq #1,d0
    f93a:	/--|-- bra.s f970 <builtIn_copyStack+0x56>
	}
	// Return value
	if (! copyStack (&fun -> stack -> thisVar, &fun -> reg)) return BR_ERROR;
    f93c:	|  \-> moveq #28,d0
    f93e:	|      add.l 8(sp),d0
    f942:	|      movea.l 8(sp),a0
    f946:	|      move.l 24(a0),d1
    f94a:	|      move.l d0,-(sp)
    f94c:	|      move.l d1,-(sp)
    f94e:	|      jsr 1440c <copyStack>
    f954:	|      addq.l #8,sp
    f956:	|      tst.w d0
    f958:	|  /-- bne.s f95e <builtIn_copyStack+0x44>
    f95a:	|  |   moveq #1,d0
    f95c:	+--|-- bra.s f970 <builtIn_copyStack+0x56>
	trimStack (&fun -> stack);
    f95e:	|  \-> moveq #24,d0
    f960:	|      add.l 8(sp),d0
    f964:	|      move.l d0,-(sp)
    f966:	|      jsr 1528a <trimStack>
    f96c:	|      addq.l #4,sp
	return BR_CONTINUE;
    f96e:	|      moveq #2,d0
}
    f970:	\----> rts

0000f972 <builtIn_pushToStack>:

builtIn(pushToStack)
{
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    f972:	       movea.l 8(sp),a0
    f976:	       movea.l 24(a0),a0
    f97a:	       movea.l 8(a0),a0
    f97e:	       move.l (a0),d0
    f980:	       moveq #6,d1
    f982:	       cmp.l d0,d1
    f984:	   /-- beq.s f99a <builtIn_pushToStack+0x28>
		KPrintF("Parameter isn't a stack");
    f986:	   |   pea 199e4 <line.c.05397aaf+0xed>
    f98c:	   |   jsr 17366 <KPrintF>
    f992:	   |   addq.l #4,sp
		return BR_ERROR;
    f994:	   |   moveq #1,d0
    f996:	/--|-- bra.w fa28 <builtIn_pushToStack+0xb6>
	}

	if (! addVarToStack (&fun -> stack -> thisVar, &fun -> stack -> next -> thisVar.varData.theStack -> first))
    f99a:	|  \-> movea.l 8(sp),a0
    f99e:	|      movea.l 24(a0),a0
    f9a2:	|      movea.l 8(a0),a0
    f9a6:	|      move.l 4(a0),d0
    f9aa:	|      move.l d0,d1
    f9ac:	|      movea.l 8(sp),a0
    f9b0:	|      move.l 24(a0),d0
    f9b4:	|      move.l d1,-(sp)
    f9b6:	|      move.l d0,-(sp)
    f9b8:	|      jsr 14142 <addVarToStack>
    f9be:	|      addq.l #8,sp
    f9c0:	|      tst.w d0
    f9c2:	|  /-- bne.s f9c8 <builtIn_pushToStack+0x56>
		return BR_ERROR;
    f9c4:	|  |   moveq #1,d0
    f9c6:	+--|-- bra.s fa28 <builtIn_pushToStack+0xb6>

	if (fun -> stack -> next -> thisVar.varData.theStack -> first -> next == NULL)
    f9c8:	|  \-> movea.l 8(sp),a0
    f9cc:	|      movea.l 24(a0),a0
    f9d0:	|      movea.l 8(a0),a0
    f9d4:	|      movea.l 4(a0),a0
    f9d8:	|      movea.l (a0),a0
    f9da:	|      move.l 8(a0),d0
    f9de:	|  /-- bne.s fa06 <builtIn_pushToStack+0x94>
		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> first;
    f9e0:	|  |   movea.l 8(sp),a0
    f9e4:	|  |   movea.l 24(a0),a0
    f9e8:	|  |   movea.l 8(a0),a0
    f9ec:	|  |   movea.l 4(a0),a1
    f9f0:	|  |   movea.l 8(sp),a0
    f9f4:	|  |   movea.l 24(a0),a0
    f9f8:	|  |   movea.l 8(a0),a0
    f9fc:	|  |   movea.l 4(a0),a0
    fa00:	|  |   move.l (a1),d0
    fa02:	|  |   move.l d0,4(a0)

	trimStack (&fun -> stack);
    fa06:	|  \-> moveq #24,d0
    fa08:	|      add.l 8(sp),d0
    fa0c:	|      move.l d0,-(sp)
    fa0e:	|      jsr 1528a <trimStack>
    fa14:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    fa16:	|      moveq #24,d0
    fa18:	|      add.l 8(sp),d0
    fa1c:	|      move.l d0,-(sp)
    fa1e:	|      jsr 1528a <trimStack>
    fa24:	|      addq.l #4,sp
	return BR_CONTINUE;
    fa26:	|      moveq #2,d0
}
    fa28:	\----> rts

0000fa2a <builtIn_enqueue>:

builtIn(enqueue)
{
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    fa2a:	             movea.l 8(sp),a0
    fa2e:	             movea.l 24(a0),a0
    fa32:	             movea.l 8(a0),a0
    fa36:	             move.l (a0),d0
    fa38:	             moveq #6,d1
    fa3a:	             cmp.l d0,d1
    fa3c:	         /-- beq.s fa52 <builtIn_enqueue+0x28>
		KPrintF ("Parameter isn't a stack");
    fa3e:	         |   pea 199e4 <line.c.05397aaf+0xed>
    fa44:	         |   jsr 17366 <KPrintF>
    fa4a:	         |   addq.l #4,sp
		return BR_ERROR;
    fa4c:	         |   moveq #1,d0
    fa4e:	/--------|-- bra.w fb40 <builtIn_enqueue+0x116>
	}

	if (fun -> stack -> next -> thisVar.varData.theStack -> first == NULL)
    fa52:	|        \-> movea.l 8(sp),a0
    fa56:	|            movea.l 24(a0),a0
    fa5a:	|            movea.l 8(a0),a0
    fa5e:	|            movea.l 4(a0),a0
    fa62:	|            move.l (a0),d0
    fa64:	|     /----- bne.s fabe <builtIn_enqueue+0x94>
	{
		if (! addVarToStack (&fun -> stack -> thisVar, &fun -> stack -> next -> thisVar.varData.theStack -> first))
    fa66:	|     |      movea.l 8(sp),a0
    fa6a:	|     |      movea.l 24(a0),a0
    fa6e:	|     |      movea.l 8(a0),a0
    fa72:	|     |      move.l 4(a0),d0
    fa76:	|     |      move.l d0,d1
    fa78:	|     |      movea.l 8(sp),a0
    fa7c:	|     |      move.l 24(a0),d0
    fa80:	|     |      move.l d1,-(sp)
    fa82:	|     |      move.l d0,-(sp)
    fa84:	|     |      jsr 14142 <addVarToStack>
    fa8a:	|     |      addq.l #8,sp
    fa8c:	|     |      tst.w d0
    fa8e:	|     |  /-- bne.s fa96 <builtIn_enqueue+0x6c>
			return BR_ERROR;
    fa90:	|     |  |   moveq #1,d0
    fa92:	+-----|--|-- bra.w fb40 <builtIn_enqueue+0x116>

		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> first;
    fa96:	|     |  \-> movea.l 8(sp),a0
    fa9a:	|     |      movea.l 24(a0),a0
    fa9e:	|     |      movea.l 8(a0),a0
    faa2:	|     |      movea.l 4(a0),a1
    faa6:	|     |      movea.l 8(sp),a0
    faaa:	|     |      movea.l 24(a0),a0
    faae:	|     |      movea.l 8(a0),a0
    fab2:	|     |      movea.l 4(a0),a0
    fab6:	|     |      move.l (a1),d0
    fab8:	|     |      move.l d0,4(a0)
    fabc:	|  /--|----- bra.s fb1e <builtIn_enqueue+0xf4>
	}
	else
	{
		if (! addVarToStack (&fun -> stack -> thisVar,
							 &fun -> stack -> next -> thisVar.varData.theStack -> last -> next))
    fabe:	|  |  \----> movea.l 8(sp),a0
    fac2:	|  |         movea.l 24(a0),a0
    fac6:	|  |         movea.l 8(a0),a0
    faca:	|  |         movea.l 4(a0),a0
    face:	|  |         move.l 4(a0),d0
		if (! addVarToStack (&fun -> stack -> thisVar,
    fad2:	|  |         move.l d0,d1
    fad4:	|  |         addq.l #8,d1
    fad6:	|  |         movea.l 8(sp),a0
    fada:	|  |         move.l 24(a0),d0
    fade:	|  |         move.l d1,-(sp)
    fae0:	|  |         move.l d0,-(sp)
    fae2:	|  |         jsr 14142 <addVarToStack>
    fae8:	|  |         addq.l #8,sp
    faea:	|  |         tst.w d0
    faec:	|  |     /-- bne.s faf2 <builtIn_enqueue+0xc8>
			return BR_ERROR;
    faee:	|  |     |   moveq #1,d0
    faf0:	+--|-----|-- bra.s fb40 <builtIn_enqueue+0x116>
		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> last -> next;
    faf2:	|  |     \-> movea.l 8(sp),a0
    faf6:	|  |         movea.l 24(a0),a0
    fafa:	|  |         movea.l 8(a0),a0
    fafe:	|  |         movea.l 4(a0),a0
    fb02:	|  |         movea.l 4(a0),a1
    fb06:	|  |         movea.l 8(sp),a0
    fb0a:	|  |         movea.l 24(a0),a0
    fb0e:	|  |         movea.l 8(a0),a0
    fb12:	|  |         movea.l 4(a0),a0
    fb16:	|  |         move.l 8(a1),d0
    fb1a:	|  |         move.l d0,4(a0)
	}

	trimStack (&fun -> stack);
    fb1e:	|  \-------> moveq #24,d0
    fb20:	|            add.l 8(sp),d0
    fb24:	|            move.l d0,-(sp)
    fb26:	|            jsr 1528a <trimStack>
    fb2c:	|            addq.l #4,sp
	trimStack (&fun -> stack);
    fb2e:	|            moveq #24,d0
    fb30:	|            add.l 8(sp),d0
    fb34:	|            move.l d0,-(sp)
    fb36:	|            jsr 1528a <trimStack>
    fb3c:	|            addq.l #4,sp
	return BR_CONTINUE;
    fb3e:	|            moveq #2,d0
}
    fb40:	\----------> rts

0000fb42 <builtIn_deleteFromStack>:

builtIn(deleteFromStack)
{
    fb42:	       move.l a2,-(sp)
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    fb44:	       movea.l 12(sp),a0
    fb48:	       movea.l 24(a0),a0
    fb4c:	       movea.l 8(a0),a0
    fb50:	       move.l (a0),d0
    fb52:	       moveq #6,d1
    fb54:	       cmp.l d0,d1
    fb56:	   /-- beq.s fb6c <builtIn_deleteFromStack+0x2a>
		KPrintF ("Parameter isn't a stack.");
    fb58:	   |   pea 199cb <line.c.05397aaf+0xd4>
    fb5e:	   |   jsr 17366 <KPrintF>
    fb64:	   |   addq.l #4,sp
		return BR_ERROR;
    fb66:	   |   moveq #1,d0
    fb68:	/--|-- bra.w fc02 <builtIn_deleteFromStack+0xc0>
	}

	// Return value
	setVariable (&fun -> reg, SVT_INT,
				 deleteVarFromStack (&fun -> stack -> thisVar,
									 &fun -> stack -> next -> thisVar.varData.theStack -> first, FALSE));
    fb6c:	|  \-> movea.l 12(sp),a0
    fb70:	|      movea.l 24(a0),a0
    fb74:	|      movea.l 8(a0),a0
    fb78:	|      move.l 4(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    fb7c:	|      move.l d0,d1
				 deleteVarFromStack (&fun -> stack -> thisVar,
    fb7e:	|      movea.l 12(sp),a0
    fb82:	|      move.l 24(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    fb86:	|      clr.l -(sp)
    fb88:	|      move.l d1,-(sp)
    fb8a:	|      move.l d0,-(sp)
    fb8c:	|      jsr 144e2 <deleteVarFromStack>
    fb92:	|      lea 12(sp),sp
    fb96:	|      move.l d0,d1
    fb98:	|      moveq #28,d0
    fb9a:	|      add.l 12(sp),d0
    fb9e:	|      move.l d1,-(sp)
    fba0:	|      pea 1 <_start+0x1>
    fba4:	|      move.l d0,-(sp)
    fba6:	|      jsr 151f8 <setVariable>
    fbac:	|      lea 12(sp),sp

	// Horrible hacking because 'last' value might now be wrong!
	fun->stack->next->thisVar.varData.theStack->last = stackFindLast (fun->stack->next->thisVar.varData.theStack->first);
    fbb0:	|      movea.l 12(sp),a0
    fbb4:	|      movea.l 24(a0),a0
    fbb8:	|      movea.l 8(a0),a0
    fbbc:	|      movea.l 4(a0),a0
    fbc0:	|      move.l (a0),d0
    fbc2:	|      movea.l 12(sp),a0
    fbc6:	|      movea.l 24(a0),a0
    fbca:	|      movea.l 8(a0),a0
    fbce:	|      movea.l 4(a0),a2
    fbd2:	|      move.l d0,-(sp)
    fbd4:	|      jsr 15242 <stackFindLast>
    fbda:	|      addq.l #4,sp
    fbdc:	|      move.l d0,4(a2)

	trimStack (&fun -> stack);
    fbe0:	|      moveq #24,d0
    fbe2:	|      add.l 12(sp),d0
    fbe6:	|      move.l d0,-(sp)
    fbe8:	|      jsr 1528a <trimStack>
    fbee:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    fbf0:	|      moveq #24,d0
    fbf2:	|      add.l 12(sp),d0
    fbf6:	|      move.l d0,-(sp)
    fbf8:	|      jsr 1528a <trimStack>
    fbfe:	|      addq.l #4,sp
	return BR_CONTINUE;
    fc00:	|      moveq #2,d0
}
    fc02:	\----> movea.l (sp)+,a2
    fc04:	       rts

0000fc06 <builtIn_deleteAllFromStack>:

builtIn(deleteAllFromStack)
{
    fc06:	       move.l a2,-(sp)
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    fc08:	       movea.l 12(sp),a0
    fc0c:	       movea.l 24(a0),a0
    fc10:	       movea.l 8(a0),a0
    fc14:	       move.l (a0),d0
    fc16:	       moveq #6,d1
    fc18:	       cmp.l d0,d1
    fc1a:	   /-- beq.s fc30 <builtIn_deleteAllFromStack+0x2a>
		KPrintF ("Parameter isn't a stack.");
    fc1c:	   |   pea 199cb <line.c.05397aaf+0xd4>
    fc22:	   |   jsr 17366 <KPrintF>
    fc28:	   |   addq.l #4,sp
		return BR_ERROR;
    fc2a:	   |   moveq #1,d0
    fc2c:	/--|-- bra.w fcc8 <builtIn_deleteAllFromStack+0xc2>
	}

	// Return value
	setVariable (&fun -> reg, SVT_INT,
				 deleteVarFromStack (&fun -> stack -> thisVar,
									 &fun -> stack -> next -> thisVar.varData.theStack -> first, TRUE));
    fc30:	|  \-> movea.l 12(sp),a0
    fc34:	|      movea.l 24(a0),a0
    fc38:	|      movea.l 8(a0),a0
    fc3c:	|      move.l 4(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    fc40:	|      move.l d0,d1
				 deleteVarFromStack (&fun -> stack -> thisVar,
    fc42:	|      movea.l 12(sp),a0
    fc46:	|      move.l 24(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    fc4a:	|      pea 1 <_start+0x1>
    fc4e:	|      move.l d1,-(sp)
    fc50:	|      move.l d0,-(sp)
    fc52:	|      jsr 144e2 <deleteVarFromStack>
    fc58:	|      lea 12(sp),sp
    fc5c:	|      move.l d0,d1
    fc5e:	|      moveq #28,d0
    fc60:	|      add.l 12(sp),d0
    fc64:	|      move.l d1,-(sp)
    fc66:	|      pea 1 <_start+0x1>
    fc6a:	|      move.l d0,-(sp)
    fc6c:	|      jsr 151f8 <setVariable>
    fc72:	|      lea 12(sp),sp

	// Horrible hacking because 'last' value might now be wrong!
	fun->stack->next->thisVar.varData.theStack->last = stackFindLast (fun->stack->next->thisVar.varData.theStack->first);
    fc76:	|      movea.l 12(sp),a0
    fc7a:	|      movea.l 24(a0),a0
    fc7e:	|      movea.l 8(a0),a0
    fc82:	|      movea.l 4(a0),a0
    fc86:	|      move.l (a0),d0
    fc88:	|      movea.l 12(sp),a0
    fc8c:	|      movea.l 24(a0),a0
    fc90:	|      movea.l 8(a0),a0
    fc94:	|      movea.l 4(a0),a2
    fc98:	|      move.l d0,-(sp)
    fc9a:	|      jsr 15242 <stackFindLast>
    fca0:	|      addq.l #4,sp
    fca2:	|      move.l d0,4(a2)

	trimStack (&fun -> stack);
    fca6:	|      moveq #24,d0
    fca8:	|      add.l 12(sp),d0
    fcac:	|      move.l d0,-(sp)
    fcae:	|      jsr 1528a <trimStack>
    fcb4:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    fcb6:	|      moveq #24,d0
    fcb8:	|      add.l 12(sp),d0
    fcbc:	|      move.l d0,-(sp)
    fcbe:	|      jsr 1528a <trimStack>
    fcc4:	|      addq.l #4,sp
	return BR_CONTINUE;
    fcc6:	|      moveq #2,d0
}
    fcc8:	\----> movea.l (sp)+,a2
    fcca:	       rts

0000fccc <builtIn_popFromStack>:

builtIn(popFromStack)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    fccc:	       movea.l 8(sp),a0
    fcd0:	       movea.l 24(a0),a0
    fcd4:	       move.l (a0),d0
    fcd6:	       moveq #6,d1
    fcd8:	       cmp.l d0,d1
    fcda:	   /-- beq.s fcee <builtIn_popFromStack+0x22>
		KPrintF ("Parameter isn't a stack.");
    fcdc:	   |   pea 199cb <line.c.05397aaf+0xd4>
    fce2:	   |   jsr 17366 <KPrintF>
    fce8:	   |   addq.l #4,sp
		return BR_ERROR;
    fcea:	   |   moveq #1,d0
    fcec:	/--|-- bra.s fd58 <builtIn_popFromStack+0x8c>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    fcee:	|  \-> movea.l 8(sp),a0
    fcf2:	|      movea.l 24(a0),a0
    fcf6:	|      movea.l 4(a0),a0
    fcfa:	|      move.l (a0),d0
    fcfc:	|  /-- bne.s fd10 <builtIn_popFromStack+0x44>
		KPrintF ("The stack's empty.");
    fcfe:	|  |   pea 199fc <line.c.05397aaf+0x105>
    fd04:	|  |   jsr 17366 <KPrintF>
    fd0a:	|  |   addq.l #4,sp
		return BR_ERROR;
    fd0c:	|  |   moveq #1,d0
    fd0e:	+--|-- bra.s fd58 <builtIn_popFromStack+0x8c>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> first -> thisVar), &fun -> reg);
    fd10:	|  \-> moveq #28,d0
    fd12:	|      add.l 8(sp),d0
    fd16:	|      movea.l 8(sp),a0
    fd1a:	|      movea.l 24(a0),a0
    fd1e:	|      movea.l 4(a0),a0
    fd22:	|      move.l (a0),d1
    fd24:	|      move.l d0,-(sp)
    fd26:	|      move.l d1,-(sp)
    fd28:	|      jsr 14dc0 <copyVariable>
    fd2e:	|      addq.l #8,sp
	trimStack (&fun -> stack -> thisVar.varData.theStack -> first);
    fd30:	|      movea.l 8(sp),a0
    fd34:	|      movea.l 24(a0),a0
    fd38:	|      move.l 4(a0),d0
    fd3c:	|      move.l d0,-(sp)
    fd3e:	|      jsr 1528a <trimStack>
    fd44:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    fd46:	|      moveq #24,d0
    fd48:	|      add.l 8(sp),d0
    fd4c:	|      move.l d0,-(sp)
    fd4e:	|      jsr 1528a <trimStack>
    fd54:	|      addq.l #4,sp
	return BR_CONTINUE;
    fd56:	|      moveq #2,d0
}
    fd58:	\----> rts

0000fd5a <builtIn_peekStart>:

builtIn(peekStart)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    fd5a:	       movea.l 8(sp),a0
    fd5e:	       movea.l 24(a0),a0
    fd62:	       move.l (a0),d0
    fd64:	       moveq #6,d1
    fd66:	       cmp.l d0,d1
    fd68:	   /-- beq.s fd7c <builtIn_peekStart+0x22>
		KPrintF ("Parameter isn't a stack.");
    fd6a:	   |   pea 199cb <line.c.05397aaf+0xd4>
    fd70:	   |   jsr 17366 <KPrintF>
    fd76:	   |   addq.l #4,sp
		return BR_ERROR;
    fd78:	   |   moveq #1,d0
    fd7a:	/--|-- bra.s fdd0 <builtIn_peekStart+0x76>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    fd7c:	|  \-> movea.l 8(sp),a0
    fd80:	|      movea.l 24(a0),a0
    fd84:	|      movea.l 4(a0),a0
    fd88:	|      move.l (a0),d0
    fd8a:	|  /-- bne.s fd9e <builtIn_peekStart+0x44>
		KPrintF ("The stack's empty.");
    fd8c:	|  |   pea 199fc <line.c.05397aaf+0x105>
    fd92:	|  |   jsr 17366 <KPrintF>
    fd98:	|  |   addq.l #4,sp
		return BR_ERROR;
    fd9a:	|  |   moveq #1,d0
    fd9c:	+--|-- bra.s fdd0 <builtIn_peekStart+0x76>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> first -> thisVar), &fun -> reg);
    fd9e:	|  \-> moveq #28,d0
    fda0:	|      add.l 8(sp),d0
    fda4:	|      movea.l 8(sp),a0
    fda8:	|      movea.l 24(a0),a0
    fdac:	|      movea.l 4(a0),a0
    fdb0:	|      move.l (a0),d1
    fdb2:	|      move.l d0,-(sp)
    fdb4:	|      move.l d1,-(sp)
    fdb6:	|      jsr 14dc0 <copyVariable>
    fdbc:	|      addq.l #8,sp
	trimStack (&fun -> stack);
    fdbe:	|      moveq #24,d0
    fdc0:	|      add.l 8(sp),d0
    fdc4:	|      move.l d0,-(sp)
    fdc6:	|      jsr 1528a <trimStack>
    fdcc:	|      addq.l #4,sp
	return BR_CONTINUE;
    fdce:	|      moveq #2,d0
}
    fdd0:	\----> rts

0000fdd2 <builtIn_peekEnd>:

builtIn(peekEnd)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    fdd2:	       movea.l 8(sp),a0
    fdd6:	       movea.l 24(a0),a0
    fdda:	       move.l (a0),d0
    fddc:	       moveq #6,d1
    fdde:	       cmp.l d0,d1
    fde0:	   /-- beq.s fdf4 <builtIn_peekEnd+0x22>
		KPrintF ("Parameter isn't a stack.");
    fde2:	   |   pea 199cb <line.c.05397aaf+0xd4>
    fde8:	   |   jsr 17366 <KPrintF>
    fdee:	   |   addq.l #4,sp
		return BR_ERROR;
    fdf0:	   |   moveq #1,d0
    fdf2:	/--|-- bra.s fe4a <builtIn_peekEnd+0x78>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    fdf4:	|  \-> movea.l 8(sp),a0
    fdf8:	|      movea.l 24(a0),a0
    fdfc:	|      movea.l 4(a0),a0
    fe00:	|      move.l (a0),d0
    fe02:	|  /-- bne.s fe16 <builtIn_peekEnd+0x44>
		KPrintF ("The stack's empty.");
    fe04:	|  |   pea 199fc <line.c.05397aaf+0x105>
    fe0a:	|  |   jsr 17366 <KPrintF>
    fe10:	|  |   addq.l #4,sp
		return BR_ERROR;
    fe12:	|  |   moveq #1,d0
    fe14:	+--|-- bra.s fe4a <builtIn_peekEnd+0x78>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> last -> thisVar), &fun -> reg);
    fe16:	|  \-> moveq #28,d0
    fe18:	|      add.l 8(sp),d0
    fe1c:	|      movea.l 8(sp),a0
    fe20:	|      movea.l 24(a0),a0
    fe24:	|      movea.l 4(a0),a0
    fe28:	|      move.l 4(a0),d1
    fe2c:	|      move.l d0,-(sp)
    fe2e:	|      move.l d1,-(sp)
    fe30:	|      jsr 14dc0 <copyVariable>
    fe36:	|      addq.l #8,sp
	trimStack (&fun -> stack);
    fe38:	|      moveq #24,d0
    fe3a:	|      add.l 8(sp),d0
    fe3e:	|      move.l d0,-(sp)
    fe40:	|      jsr 1528a <trimStack>
    fe46:	|      addq.l #4,sp
	return BR_CONTINUE;
    fe48:	|      moveq #2,d0
}
    fe4a:	\----> rts

0000fe4c <builtIn_random>:

builtIn(random)
{
    fe4c:	       subq.l #4,sp
	UNUSEDALL
	int num;

	if (! getValueType(&num, SVT_INT,&fun -> stack -> thisVar))
    fe4e:	       movea.l 12(sp),a0
    fe52:	       move.l 24(a0),d0
    fe56:	       move.l d0,-(sp)
    fe58:	       pea 1 <_start+0x1>
    fe5c:	       move.l sp,d0
    fe5e:	       addq.l #8,d0
    fe60:	       move.l d0,-(sp)
    fe62:	       jsr 14906 <getValueType>
    fe68:	       lea 12(sp),sp
    fe6c:	       tst.w d0
    fe6e:	   /-- bne.s fe74 <builtIn_random+0x28>
		return BR_ERROR;
    fe70:	   |   moveq #1,d0
    fe72:	/--|-- bra.s febe <builtIn_random+0x72>

	trimStack (&fun -> stack);
    fe74:	|  \-> moveq #24,d0
    fe76:	|      add.l 12(sp),d0
    fe7a:	|      move.l d0,-(sp)
    fe7c:	|      jsr 1528a <trimStack>
    fe82:	|      addq.l #4,sp
	if (num <= 0) num = 1;
    fe84:	|      move.l (sp),d0
    fe86:	|  /-- bgt.s fe8c <builtIn_random+0x40>
    fe88:	|  |   moveq #1,d0
    fe8a:	|  |   move.l d0,(sp)
	setVariable (&fun -> reg, SVT_INT, rand() % num);
    fe8c:	|  \-> jsr 15f26 <rand>
    fe92:	|      move.l d0,d1
    fe94:	|      move.l (sp),d0
    fe96:	|      move.l d0,-(sp)
    fe98:	|      move.l d1,-(sp)
    fe9a:	|      jsr 17df4 <__umodsi3>
    fea0:	|      addq.l #8,sp
    fea2:	|      move.l d0,d1
    fea4:	|      moveq #28,d0
    fea6:	|      add.l 12(sp),d0
    feaa:	|      move.l d1,-(sp)
    feac:	|      pea 1 <_start+0x1>
    feb0:	|      move.l d0,-(sp)
    feb2:	|      jsr 151f8 <setVariable>
    feb8:	|      lea 12(sp),sp
	return BR_CONTINUE;
    febc:	|      moveq #2,d0
}
    febe:	\----> addq.l #4,sp
    fec0:	       rts

0000fec2 <builtIn_setStatusColour>:
	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	statusBarColour ((byte) red, (byte) green, (byte) blue);
	return BR_CONTINUE; ToDo amigize this?*/
}
    fec2:	nop
    fec4:	rts

0000fec6 <builtIn_setLitStatusColour>:

	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	statusBarLitColour ((byte) red, (byte) green, (byte) blue);Todo - Amigize this?*/
	return BR_CONTINUE;
    fec6:	moveq #2,d0
}
    fec8:	rts

0000feca <builtIn_setPasteColour>:

builtIn (setPasteColour)
{
    feca:	       subq.l #4,sp
	UNUSEDALL
	int index;

	if (! getValueType ( &index, SVT_INT, &fun -> stack -> thisVar)) {
    fecc:	       movea.l 12(sp),a0
    fed0:	       move.l 24(a0),d0
    fed4:	       move.l d0,-(sp)
    fed6:	       pea 1 <_start+0x1>
    feda:	       move.l sp,d0
    fedc:	       addq.l #8,d0
    fede:	       move.l d0,-(sp)
    fee0:	       jsr 14906 <getValueType>
    fee6:	       lea 12(sp),sp
    feea:	       tst.w d0
    feec:	   /-- bne.s ff00 <builtIn_setPasteColour+0x36>
		KPrintF ("setPasteColour: Parameter not a number");
    feee:	   |   pea 19a0f <line.c.05397aaf+0x118>
    fef4:	   |   jsr 17366 <KPrintF>
    fefa:	   |   addq.l #4,sp
		return BR_ERROR;
    fefc:	   |   moveq #1,d0
    fefe:	/--|-- bra.s ff40 <builtIn_setPasteColour+0x76>
	}
	trimStack (&fun -> stack);
    ff00:	|  \-> moveq #24,d0
    ff02:	|      add.l 12(sp),d0
    ff06:	|      move.l d0,-(sp)
    ff08:	|      jsr 1528a <trimStack>
    ff0e:	|      addq.l #4,sp


	textPaletteIndex = (UWORD)index;
    ff10:	|      move.l (sp),d0
    ff12:	|      move.l d0,d0
    ff14:	|      move.w d0,1c99c <textPaletteIndex>

	if( textPaletteIndex > 31) {
    ff1a:	|      move.w 1c99c <textPaletteIndex>,d0
    ff20:	|      cmpi.w #31,d0
    ff24:	|  /-- bls.s ff3e <builtIn_setPasteColour+0x74>
		KPrintF ("setPasteColour: Paletteindex out of Range");
    ff26:	|  |   pea 19a36 <line.c.05397aaf+0x13f>
    ff2c:	|  |   jsr 17366 <KPrintF>
    ff32:	|  |   addq.l #4,sp
		textPaletteIndex = 0;
    ff34:	|  |   clr.w 1c99c <textPaletteIndex>
		return BR_ERROR;
    ff3a:	|  |   moveq #1,d0
    ff3c:	+--|-- bra.s ff40 <builtIn_setPasteColour+0x76>
	}

	//setFontColour (pastePalette, (byte) red, (byte) green, (byte) blue);
	return BR_CONTINUE;
    ff3e:	|  \-> moveq #2,d0
}
    ff40:	\----> addq.l #4,sp
    ff42:	       rts

0000ff44 <builtIn_setBlankColour>:
	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	currentBlankColour = makeColour (red & 255, green & 255, blue & 255);
	setVariable (&fun -> reg, SVT_INT, 1);Todo Amigize this?*/
	return BR_CONTINUE;
    ff44:	moveq #2,d0
}
    ff46:	rts

0000ff48 <builtIn_setBurnColour>:

	currentBurnR = red;
	currentBurnG = green;
	currentBurnB = blue;
	setVariable (&fun -> reg, SVT_INT, 1);Todo Amigize this?*/
	return BR_CONTINUE;
    ff48:	moveq #2,d0
}
    ff4a:	rts

0000ff4c <builtIn_setFont>:


builtIn(setFont)
{
    ff4c:	       lea -16(sp),sp
    ff50:	       move.l a6,-(sp)
    UNUSEDALL
    int fileNumber, newHeight;
    if (!getValueType(&newHeight, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    ff52:	       movea.l 28(sp),a0
    ff56:	       move.l 24(a0),d0
    ff5a:	       move.l d0,-(sp)
    ff5c:	       pea 1 <_start+0x1>
    ff60:	       lea 12(sp),a0
    ff64:	       move.l a0,-(sp)
    ff66:	       jsr 14906 <getValueType>
    ff6c:	       lea 12(sp),sp
    ff70:	       tst.w d0
    ff72:	   /-- bne.s ff7a <builtIn_setFont+0x2e>
    ff74:	   |   moveq #1,d0
    ff76:	/--|-- bra.w 10028 <builtIn_setFont+0xdc>
    //              KPrintF("  Height: %d\n", newHeight);
    trimStack(&fun->stack);
    ff7a:	|  \-> moveq #24,d0
    ff7c:	|      add.l 28(sp),d0
    ff80:	|      move.l d0,-(sp)
    ff82:	|      jsr 1528a <trimStack>
    ff88:	|      addq.l #4,sp
    char *newText = getTextFromAnyVar(&(fun->stack->thisVar));
    ff8a:	|      movea.l 28(sp),a0
    ff8e:	|      move.l 24(a0),d0
    ff92:	|      move.l d0,-(sp)
    ff94:	|      jsr 14edc <getTextFromAnyVar>
    ff9a:	|      addq.l #4,sp
    ff9c:	|      move.l d0,16(sp)
    if (!newText) return BR_ERROR;
    ffa0:	|  /-- bne.s ffa8 <builtIn_setFont+0x5c>
    ffa2:	|  |   moveq #1,d0
    ffa4:	+--|-- bra.w 10028 <builtIn_setFont+0xdc>
    //              KPrintF("  Character supported: %s\n", newText);
    trimStack(&fun->stack);
    ffa8:	|  \-> moveq #24,d0
    ffaa:	|      add.l 28(sp),d0
    ffae:	|      move.l d0,-(sp)
    ffb0:	|      jsr 1528a <trimStack>
    ffb6:	|      addq.l #4,sp
    if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) return BR_ERROR;
    ffb8:	|      movea.l 28(sp),a0
    ffbc:	|      move.l 24(a0),d0
    ffc0:	|      move.l d0,-(sp)
    ffc2:	|      pea 5 <_start+0x5>
    ffc6:	|      lea 16(sp),a0
    ffca:	|      move.l a0,-(sp)
    ffcc:	|      jsr 14906 <getValueType>
    ffd2:	|      lea 12(sp),sp
    ffd6:	|      tst.w d0
    ffd8:	|  /-- bne.s ffde <builtIn_setFont+0x92>
    ffda:	|  |   moveq #1,d0
    ffdc:	+--|-- bra.s 10028 <builtIn_setFont+0xdc>
    //              KPrintF("  File: %d\n", fileNumber);
    trimStack(&fun->stack);
    ffde:	|  \-> moveq #24,d0
    ffe0:	|      add.l 28(sp),d0
    ffe4:	|      move.l d0,-(sp)
    ffe6:	|      jsr 1528a <trimStack>
    ffec:	|      addq.l #4,sp
    if (!loadFont(fileNumber, newText, newHeight)) return BR_ERROR;
    ffee:	|      move.l 4(sp),d1
    fff2:	|      move.l 8(sp),d0
    fff6:	|      move.l d1,-(sp)
    fff8:	|      move.l 20(sp),-(sp)
    fffc:	|      move.l d0,-(sp)
    fffe:	|      jsr 15736 <loadFont>
   10004:	|      lea 12(sp),sp
   10008:	|      tst.w d0
   1000a:	|  /-- bne.s 10010 <builtIn_setFont+0xc4>
   1000c:	|  |   moveq #1,d0
   1000e:	+--|-- bra.s 10028 <builtIn_setFont+0xdc>
    //              KPrintF("  Done!\n");
    FreeVec(newText);
   10010:	|  \-> move.l 16(sp),12(sp)
   10016:	|      move.l 1ca82 <SysBase>,d0
   1001c:	|      movea.l d0,a6
   1001e:	|      movea.l 12(sp),a1
   10022:	|      jsr -690(a6)

    return BR_CONTINUE;
   10026:	|      moveq #2,d0
}
   10028:	\----> movea.l (sp)+,a6
   1002a:	       lea 16(sp),sp
   1002e:	       rts

00010030 <builtIn_inFont>:

builtIn(inFont)
{
   10030:	       subq.l #4,sp
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
   10032:	       movea.l 12(sp),a0
   10036:	       move.l 24(a0),d0
   1003a:	       move.l d0,-(sp)
   1003c:	       jsr 14edc <getTextFromAnyVar>
   10042:	       addq.l #4,sp
   10044:	       move.l d0,(sp)
	if (! newText) return BR_ERROR;
   10046:	   /-- bne.s 1004c <builtIn_inFont+0x1c>
   10048:	   |   moveq #1,d0
   1004a:	/--|-- bra.s 10082 <builtIn_inFont+0x52>
	trimStack (&fun -> stack);
   1004c:	|  \-> moveq #24,d0
   1004e:	|      add.l 12(sp),d0
   10052:	|      move.l d0,-(sp)
   10054:	|      jsr 1528a <trimStack>
   1005a:	|      addq.l #4,sp

	// Return value
	
	setVariable (&fun -> reg, SVT_INT, isInFont(newText));
   1005c:	|      move.l (sp),-(sp)
   1005e:	|      jsr 15724 <isInFont>
   10064:	|      addq.l #4,sp
   10066:	|      movea.w d0,a0
   10068:	|      moveq #28,d0
   1006a:	|      add.l 12(sp),d0
   1006e:	|      move.l a0,-(sp)
   10070:	|      pea 1 <_start+0x1>
   10074:	|      move.l d0,-(sp)
   10076:	|      jsr 151f8 <setVariable>
   1007c:	|      lea 12(sp),sp
	return BR_CONTINUE;
   10080:	|      moveq #2,d0
}
   10082:	\----> addq.l #4,sp
   10084:	       rts

00010086 <builtIn_pasteString>:

builtIn(pasteString)
{
   10086:	       lea -16(sp),sp
   1008a:	       move.l a6,-(sp)
   1008c:	       move.l d2,-(sp)
    UNUSEDALL
    char *newText = getTextFromAnyVar(&(fun->stack->thisVar));
   1008e:	       movea.l 32(sp),a0
   10092:	       move.l 24(a0),d0
   10096:	       move.l d0,-(sp)
   10098:	       jsr 14edc <getTextFromAnyVar>
   1009e:	       addq.l #4,sp
   100a0:	       move.l d0,20(sp)
    trimStack(&fun->stack);
   100a4:	       moveq #24,d0
   100a6:	       add.l 32(sp),d0
   100aa:	       move.l d0,-(sp)
   100ac:	       jsr 1528a <trimStack>
   100b2:	       addq.l #4,sp
    int y, x;
    if (!getValueType(&y, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
   100b4:	       movea.l 32(sp),a0
   100b8:	       move.l 24(a0),d0
   100bc:	       move.l d0,-(sp)
   100be:	       pea 1 <_start+0x1>
   100c2:	       lea 20(sp),a0
   100c6:	       move.l a0,-(sp)
   100c8:	       jsr 14906 <getValueType>
   100ce:	       lea 12(sp),sp
   100d2:	       tst.w d0
   100d4:	   /-- bne.s 100dc <builtIn_pasteString+0x56>
   100d6:	   |   moveq #1,d0
   100d8:	/--|-- bra.w 1017e <builtIn_pasteString+0xf8>
    trimStack(&fun->stack);
   100dc:	|  \-> moveq #24,d0
   100de:	|      add.l 32(sp),d0
   100e2:	|      move.l d0,-(sp)
   100e4:	|      jsr 1528a <trimStack>
   100ea:	|      addq.l #4,sp
    if (!getValueType(&x, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
   100ec:	|      movea.l 32(sp),a0
   100f0:	|      move.l 24(a0),d0
   100f4:	|      move.l d0,-(sp)
   100f6:	|      pea 1 <_start+0x1>
   100fa:	|      lea 16(sp),a0
   100fe:	|      move.l a0,-(sp)
   10100:	|      jsr 14906 <getValueType>
   10106:	|      lea 12(sp),sp
   1010a:	|      tst.w d0
   1010c:	|  /-- bne.s 10112 <builtIn_pasteString+0x8c>
   1010e:	|  |   moveq #1,d0
   10110:	+--|-- bra.s 1017e <builtIn_pasteString+0xf8>
    trimStack(&fun->stack);
   10112:	|  \-> moveq #24,d0
   10114:	|      add.l 32(sp),d0
   10118:	|      move.l d0,-(sp)
   1011a:	|      jsr 1528a <trimStack>
   10120:	|      addq.l #4,sp
    if (x == IN_THE_CENTRE) x = (winWidth - stringWidth(newText)) >> 1;
   10122:	|      move.l 8(sp),d0
   10126:	|      cmpi.l #65535,d0
   1012c:	|  /-- bne.s 1014c <builtIn_pasteString+0xc6>
   1012e:	|  |   move.l 1c9d6 <winWidth>,d2
   10134:	|  |   move.l 20(sp),-(sp)
   10138:	|  |   jsr 159e8 <stringWidth>
   1013e:	|  |   addq.l #4,sp
   10140:	|  |   move.l d2,d1
   10142:	|  |   sub.l d0,d1
   10144:	|  |   move.l d1,d0
   10146:	|  |   lsr.l #1,d0
   10148:	|  |   move.l d0,8(sp)
    //fixFont(pastePalette); //Todo: Amigize this
    pasteStringToBackdrop(newText, x, y); 
   1014c:	|  \-> move.l 12(sp),d1
   10150:	|      move.l 8(sp),d0
   10154:	|      move.l d1,-(sp)
   10156:	|      move.l d0,-(sp)
   10158:	|      move.l 28(sp),-(sp)
   1015c:	|      jsr 1590a <pasteStringToBackdrop>
   10162:	|      lea 12(sp),sp
    FreeVec(newText); 
   10166:	|      move.l 20(sp),16(sp)
   1016c:	|      move.l 1ca82 <SysBase>,d0
   10172:	|      movea.l d0,a6
   10174:	|      movea.l 16(sp),a1
   10178:	|      jsr -690(a6)
    return BR_CONTINUE;
   1017c:	|      moveq #2,d0
}
   1017e:	\----> move.l (sp)+,d2
   10180:	       movea.l (sp)+,a6
   10182:	       lea 16(sp),sp
   10186:	       rts

00010188 <builtIn_anim>:

builtIn(anim)
{
   10188:	       lea -12(sp),sp
	UNUSEDALL
	if (numParams < 2) {
   1018c:	       moveq #1,d0
   1018e:	       cmp.l 16(sp),d0
   10192:	   /-- blt.s 101a8 <builtIn_anim+0x20>
		KPrintF("Built-in function anim() must have at least 2 parameters.");
   10194:	   |   pea 19a60 <line.c.05397aaf+0x169>
   1019a:	   |   jsr 17366 <KPrintF>
   101a0:	   |   addq.l #4,sp
		return BR_ERROR;
   101a2:	   |   moveq #1,d0
   101a4:	/--|-- bra.w 10236 <builtIn_anim+0xae>
	}


	// First store the frame numbers and take 'em off the stack
	struct personaAnimation * ba = createPersonaAnim (numParams - 1, &fun -> stack);
   101a8:	|  \-> moveq #24,d1
   101aa:	|      add.l 20(sp),d1
   101ae:	|      move.l 16(sp),d0
   101b2:	|      subq.l #1,d0
   101b4:	|      move.l d1,-(sp)
   101b6:	|      move.l d0,-(sp)
   101b8:	|      jsr 9816 <createPersonaAnim>
   101be:	|      addq.l #8,sp
   101c0:	|      move.l d0,8(sp)

	// Only remaining paramter is the file number
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   101c4:	|      movea.l 20(sp),a0
   101c8:	|      move.l 24(a0),d0
   101cc:	|      move.l d0,-(sp)
   101ce:	|      pea 5 <_start+0x5>
   101d2:	|      lea 8(sp),a0
   101d6:	|      move.l a0,-(sp)
   101d8:	|      jsr 14906 <getValueType>
   101de:	|      lea 12(sp),sp
   101e2:	|      tst.w d0
   101e4:	|  /-- bne.s 101ea <builtIn_anim+0x62>
   101e6:	|  |   moveq #1,d0
   101e8:	+--|-- bra.s 10236 <builtIn_anim+0xae>
	trimStack (&fun -> stack);
   101ea:	|  \-> moveq #24,d0
   101ec:	|      add.l 20(sp),d0
   101f0:	|      move.l d0,-(sp)
   101f2:	|      jsr 1528a <trimStack>
   101f8:	|      addq.l #4,sp

	// Load the required sprite bank
	struct loadedSpriteBank * sprBanky = loadBankForAnim (fileNumber);
   101fa:	|      move.l (sp),d0
   101fc:	|      move.l d0,-(sp)
   101fe:	|      jsr 16088 <loadBankForAnim>
   10204:	|      addq.l #4,sp
   10206:	|      move.l d0,4(sp)
	if (! sprBanky) return BR_ERROR;	// File not found, fatal done already
   1020a:	|  /-- bne.s 10210 <builtIn_anim+0x88>
   1020c:	|  |   moveq #1,d0
   1020e:	+--|-- bra.s 10236 <builtIn_anim+0xae>
	setBankFile (ba, sprBanky);
   10210:	|  \-> move.l 4(sp),-(sp)
   10214:	|      move.l 12(sp),-(sp)
   10218:	|      jsr b6c0 <setBankFile>
   1021e:	|      addq.l #8,sp

	// Return value
	newAnimationVariable (&fun -> reg, ba);
   10220:	|      moveq #28,d0
   10222:	|      add.l 20(sp),d0
   10226:	|      move.l 8(sp),-(sp)
   1022a:	|      move.l d0,-(sp)
   1022c:	|      jsr 151b4 <newAnimationVariable>
   10232:	|      addq.l #8,sp
	return BR_CONTINUE;
   10234:	|      moveq #2,d0
}
   10236:	\----> lea 12(sp),sp
   1023a:	       rts

0001023c <builtIn_costume>:

builtIn(costume)
{
   1023c:	          lea -32(sp),sp
   10240:	          move.l a6,-(sp)
   10242:	          move.l a2,-(sp)
    UNUSEDALL
    struct persona * newPersona = AllocVec(sizeof(struct persona), MEMF_ANY);
   10244:	          moveq #8,d0
   10246:	          move.l d0,32(sp)
   1024a:	          clr.l 28(sp)
   1024e:	          move.l 1ca82 <SysBase>,d0
   10254:	          movea.l d0,a6
   10256:	          move.l 32(sp),d0
   1025a:	          move.l 28(sp),d1
   1025e:	          jsr -684(a6)
   10262:	          move.l d0,24(sp)
   10266:	          move.l 24(sp),d0
   1026a:	          move.l d0,20(sp)
    if (!newPersona) return BR_ERROR;
   1026e:	      /-- bne.s 10276 <builtIn_costume+0x3a>
   10270:	      |   moveq #1,d0
   10272:	/-----|-- bra.w 1035e <builtIn_costume+0x122>
    newPersona->numDirections = numParams / 3;
   10276:	|     \-> move.l 44(sp),d0
   1027a:	|         pea 3 <_start+0x3>
   1027e:	|         move.l d0,-(sp)
   10280:	|         jsr 17d98 <__divsi3>
   10286:	|         addq.l #8,sp
   10288:	|         movea.l 20(sp),a0
   1028c:	|         move.l d0,4(a0)
    if (numParams == 0 || newPersona->numDirections * 3 != numParams) {
   10290:	|         tst.l 44(sp)
   10294:	|     /-- beq.s 102aa <builtIn_costume+0x6e>
   10296:	|     |   movea.l 20(sp),a0
   1029a:	|     |   move.l 4(a0),d1
   1029e:	|     |   move.l d1,d0
   102a0:	|     |   add.l d0,d0
   102a2:	|     |   add.l d1,d0
   102a4:	|     |   cmp.l 44(sp),d0
   102a8:	|  /--|-- beq.s 102be <builtIn_costume+0x82>
        KPrintF("Illegal number of parameters (should be greater than 0 and divisible by 3)");
   102aa:	|  |  \-> pea 19a9a <line.c.05397aaf+0x1a3>
   102b0:	|  |      jsr 17366 <KPrintF>
   102b6:	|  |      addq.l #4,sp
        return BR_ERROR;
   102b8:	|  |      moveq #1,d0
   102ba:	+--|----- bra.w 1035e <builtIn_costume+0x122>
    }
    int iii;
    newPersona->animation = AllocVec(sizeof(struct personaAnimation *) * numParams, MEMF_ANY);
   102be:	|  \----> move.l 44(sp),d0
   102c2:	|         add.l d0,d0
   102c4:	|         add.l d0,d0
   102c6:	|         move.l d0,16(sp)
   102ca:	|         clr.l 12(sp)
   102ce:	|         move.l 1ca82 <SysBase>,d0
   102d4:	|         movea.l d0,a6
   102d6:	|         move.l 16(sp),d0
   102da:	|         move.l 12(sp),d1
   102de:	|         jsr -684(a6)
   102e2:	|         move.l d0,8(sp)
   102e6:	|         move.l 8(sp),d0
   102ea:	|         movea.l 20(sp),a0
   102ee:	|         move.l d0,(a0)
    if (!newPersona->animation) return BR_ERROR;
   102f0:	|         movea.l 20(sp),a0
   102f4:	|         move.l (a0),d0
   102f6:	|     /-- bne.s 102fc <builtIn_costume+0xc0>
   102f8:	|     |   moveq #1,d0
   102fa:	+-----|-- bra.s 1035e <builtIn_costume+0x122>
    for (iii = numParams - 1; iii >= 0; iii--) {
   102fc:	|     \-> move.l 44(sp),d0
   10300:	|         subq.l #1,d0
   10302:	|         move.l d0,36(sp)
   10306:	|     /-- bra.s 10342 <builtIn_costume+0x106>
        newPersona->animation[iii] = getAnimationFromVar(&(fun->stack->thisVar));
   10308:	|  /--|-> movea.l 48(sp),a0
   1030c:	|  |  |   move.l 24(a0),d0
   10310:	|  |  |   movea.l 20(sp),a0
   10314:	|  |  |   movea.l (a0),a0
   10316:	|  |  |   move.l 36(sp),d1
   1031a:	|  |  |   add.l d1,d1
   1031c:	|  |  |   add.l d1,d1
   1031e:	|  |  |   lea (0,a0,d1.l),a2
   10322:	|  |  |   move.l d0,-(sp)
   10324:	|  |  |   jsr 14dde <getAnimationFromVar>
   1032a:	|  |  |   addq.l #4,sp
   1032c:	|  |  |   move.l d0,(a2)
        trimStack(&fun->stack);
   1032e:	|  |  |   moveq #24,d0
   10330:	|  |  |   add.l 48(sp),d0
   10334:	|  |  |   move.l d0,-(sp)
   10336:	|  |  |   jsr 1528a <trimStack>
   1033c:	|  |  |   addq.l #4,sp
    for (iii = numParams - 1; iii >= 0; iii--) {
   1033e:	|  |  |   subq.l #1,36(sp)
   10342:	|  |  \-> tst.l 36(sp)
   10346:	|  \----- bge.s 10308 <builtIn_costume+0xcc>
    }

    // Return value
    newCostumeVariable(&fun->reg, newPersona);
   10348:	|         moveq #28,d0
   1034a:	|         add.l 48(sp),d0
   1034e:	|         move.l 20(sp),-(sp)
   10352:	|         move.l d0,-(sp)
   10354:	|         jsr 151d6 <newCostumeVariable>
   1035a:	|         addq.l #8,sp
    return BR_CONTINUE;
   1035c:	|         moveq #2,d0
}
   1035e:	\-------> movea.l (sp)+,a2
   10360:	          movea.l (sp)+,a6
   10362:	          lea 32(sp),sp
   10366:	          rts

00010368 <builtIn_launch>:

builtIn(launch)
{
   10368:	          lea -20(sp),sp
   1036c:	          move.l a6,-(sp)
    UNUSEDALL
    char * newTextA = getTextFromAnyVar(&(fun->stack->thisVar));
   1036e:	          movea.l 32(sp),a0
   10372:	          move.l 24(a0),d0
   10376:	          move.l d0,-(sp)
   10378:	          jsr 14edc <getTextFromAnyVar>
   1037e:	          addq.l #4,sp
   10380:	          move.l d0,20(sp)
    if (!newTextA) return BR_ERROR;
   10384:	      /-- bne.s 1038c <builtIn_launch+0x24>
   10386:	      |   moveq #1,d0
   10388:	/-----|-- bra.w 104ba <builtIn_launch+0x152>

    char * newText = encodeFilename(newTextA);
   1038c:	|     \-> move.l 20(sp),-(sp)
   10390:	|         jsr 2fe <encodeFilename>
   10396:	|         addq.l #4,sp
   10398:	|         move.l d0,16(sp)

    trimStack(&fun->stack);
   1039c:	|         moveq #24,d0
   1039e:	|         add.l 32(sp),d0
   103a2:	|         move.l d0,-(sp)
   103a4:	|         jsr 1528a <trimStack>
   103aa:	|         addq.l #4,sp
    if (newTextA[0] == 'h' &&
   103ac:	|         movea.l 20(sp),a0
   103b0:	|         move.b (a0),d0
   103b2:	|         cmpi.b #104,d0
   103b6:	|  /----- bne.s 10420 <builtIn_launch+0xb8>
        newTextA[1] == 't' &&
   103b8:	|  |      movea.l 20(sp),a0
   103bc:	|  |      addq.l #1,a0
   103be:	|  |      move.b (a0),d0
    if (newTextA[0] == 'h' &&
   103c0:	|  |      cmpi.b #116,d0
   103c4:	|  +----- bne.s 10420 <builtIn_launch+0xb8>
        newTextA[2] == 't' &&
   103c6:	|  |      movea.l 20(sp),a0
   103ca:	|  |      addq.l #2,a0
   103cc:	|  |      move.b (a0),d0
        newTextA[1] == 't' &&
   103ce:	|  |      cmpi.b #116,d0
   103d2:	|  +----- bne.s 10420 <builtIn_launch+0xb8>
        newTextA[3] == 'p' &&
   103d4:	|  |      movea.l 20(sp),a0
   103d8:	|  |      addq.l #3,a0
   103da:	|  |      move.b (a0),d0
        newTextA[2] == 't' &&
   103dc:	|  |      cmpi.b #112,d0
   103e0:	|  +----- bne.s 10420 <builtIn_launch+0xb8>
        (newTextA[4] == ':' || (newTextA[4] == 's' && newTextA[5] == ':'))) {
   103e2:	|  |      movea.l 20(sp),a0
   103e6:	|  |      addq.l #4,a0
   103e8:	|  |      move.b (a0),d0
        newTextA[3] == 'p' &&
   103ea:	|  |      cmpi.b #58,d0
   103ee:	|  |  /-- beq.s 1040c <builtIn_launch+0xa4>
        (newTextA[4] == ':' || (newTextA[4] == 's' && newTextA[5] == ':'))) {
   103f0:	|  |  |   movea.l 20(sp),a0
   103f4:	|  |  |   addq.l #4,a0
   103f6:	|  |  |   move.b (a0),d0
   103f8:	|  |  |   cmpi.b #115,d0
   103fc:	|  +--|-- bne.s 10420 <builtIn_launch+0xb8>
   103fe:	|  |  |   movea.l 20(sp),a0
   10402:	|  |  |   addq.l #5,a0
   10404:	|  |  |   move.b (a0),d0
   10406:	|  |  |   cmpi.b #58,d0
   1040a:	|  +--|-- bne.s 10420 <builtIn_launch+0xb8>

        // IT'S A WEBSITE!
        launchMe = copyString(newTextA);
   1040c:	|  |  \-> move.l 20(sp),-(sp)
   10410:	|  |      jsr b8 <copyString>
   10416:	|  |      addq.l #4,sp
   10418:	|  |      move.l d0,1cb44 <launchMe>
   1041e:	|  |  /-- bra.s 10472 <builtIn_launch+0x10a>
    } else {
        char *gameDir;
        gameDir = joinStrings(gamePath, "/");
   10420:	|  \--|-> move.l 1c9ea <gamePath>,d0
   10426:	|     |   pea 19ae5 <line.c.05397aaf+0x1ee>
   1042c:	|     |   move.l d0,-(sp)
   1042e:	|     |   jsr 13e32 <joinStrings>
   10434:	|     |   addq.l #8,sp
   10436:	|     |   move.l d0,12(sp)

        launchMe = joinStrings(gameDir, newText);
   1043a:	|     |   move.l 16(sp),-(sp)
   1043e:	|     |   move.l 16(sp),-(sp)
   10442:	|     |   jsr 13e32 <joinStrings>
   10448:	|     |   addq.l #8,sp
   1044a:	|     |   move.l d0,1cb44 <launchMe>
        FreeVec(newText);
   10450:	|     |   move.l 16(sp),8(sp)
   10456:	|     |   move.l 1ca82 <SysBase>,d0
   1045c:	|     |   movea.l d0,a6
   1045e:	|     |   movea.l 8(sp),a1
   10462:	|     |   jsr -690(a6)
        if (!launchMe) return BR_ERROR;
   10466:	|     |   move.l 1cb44 <launchMe>,d0
   1046c:	|     +-- bne.s 10472 <builtIn_launch+0x10a>
   1046e:	|     |   moveq #1,d0
   10470:	+-----|-- bra.s 104ba <builtIn_launch+0x152>
    }
    FreeVec(newTextA);
   10472:	|     \-> move.l 20(sp),4(sp)
   10478:	|         move.l 1ca82 <SysBase>,d0
   1047e:	|         movea.l d0,a6
   10480:	|         movea.l 4(sp),a1
   10484:	|         jsr -690(a6)
    setGraphicsWindow(FALSE);
   10488:	|         clr.l -(sp)
   1048a:	|         jsr 4212 <setGraphicsWindow>
   10490:	|         addq.l #4,sp
    setVariable(&fun->reg, SVT_INT, 1);
   10492:	|         moveq #28,d0
   10494:	|         add.l 32(sp),d0
   10498:	|         pea 1 <_start+0x1>
   1049c:	|         pea 1 <_start+0x1>
   104a0:	|         move.l d0,-(sp)
   104a2:	|         jsr 151f8 <setVariable>
   104a8:	|         lea 12(sp),sp
    launchResult = &fun->reg;
   104ac:	|         moveq #28,d0
   104ae:	|         add.l 32(sp),d0
   104b2:	|         move.l d0,1cb48 <launchResult>

    return BR_KEEP_AND_PAUSE;
   104b8:	|         moveq #0,d0
}
   104ba:	\-------> movea.l (sp)+,a6
   104bc:	          lea 20(sp),sp
   104c0:	          rts

000104c2 <builtIn_pause>:

builtIn(pause)
{
   104c2:	       subq.l #4,sp
	UNUSEDALL
	int theTime;
	if (! getValueType(&theTime, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   104c4:	       movea.l 12(sp),a0
   104c8:	       move.l 24(a0),d0
   104cc:	       move.l d0,-(sp)
   104ce:	       pea 1 <_start+0x1>
   104d2:	       move.l sp,d0
   104d4:	       addq.l #8,d0
   104d6:	       move.l d0,-(sp)
   104d8:	       jsr 14906 <getValueType>
   104de:	       lea 12(sp),sp
   104e2:	       tst.w d0
   104e4:	   /-- bne.s 104ea <builtIn_pause+0x28>
   104e6:	   |   moveq #1,d0
   104e8:	/--|-- bra.s 10518 <builtIn_pause+0x56>
	trimStack (&fun -> stack);
   104ea:	|  \-> moveq #24,d0
   104ec:	|      add.l 12(sp),d0
   104f0:	|      move.l d0,-(sp)
   104f2:	|      jsr 1528a <trimStack>
   104f8:	|      addq.l #4,sp
	if (theTime > 0) {
   104fa:	|      move.l (sp),d0
   104fc:	|  /-- ble.s 10516 <builtIn_pause+0x54>
		fun -> timeLeft = theTime - 1;
   104fe:	|  |   move.l (sp),d0
   10500:	|  |   subq.l #1,d0
   10502:	|  |   movea.l 12(sp),a0
   10506:	|  |   move.l d0,12(a0)
		fun -> isSpeech = FALSE;
   1050a:	|  |   movea.l 12(sp),a0
   1050e:	|  |   clr.w 50(a0)
		return BR_KEEP_AND_PAUSE;
   10512:	|  |   moveq #0,d0
   10514:	+--|-- bra.s 10518 <builtIn_pause+0x56>
	}
	return BR_CONTINUE;
   10516:	|  \-> moveq #2,d0
}
   10518:	\----> addq.l #4,sp
   1051a:	       rts

0001051c <builtIn_completeTimers>:

builtIn(completeTimers)
{
	UNUSEDALL
	completeTimers();
   1051c:	jsr 497a <completeTimers>
	return BR_CONTINUE;
   10522:	moveq #2,d0
}
   10524:	rts

00010526 <builtIn_callEvent>:

builtIn(callEvent)
{
   10526:	       lea -12(sp),sp
	UNUSEDALL
	int obj1, obj2;
	if (! getValueType(&obj2, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1052a:	       movea.l 20(sp),a0
   1052e:	       move.l 24(a0),d0
   10532:	       move.l d0,-(sp)
   10534:	       pea 7 <_start+0x7>
   10538:	       lea 8(sp),a0
   1053c:	       move.l a0,-(sp)
   1053e:	       jsr 14906 <getValueType>
   10544:	       lea 12(sp),sp
   10548:	       tst.w d0
   1054a:	   /-- bne.s 10552 <builtIn_callEvent+0x2c>
   1054c:	   |   moveq #1,d0
   1054e:	/--|-- bra.w 105e8 <builtIn_callEvent+0xc2>
	trimStack (&fun -> stack);
   10552:	|  \-> moveq #24,d0
   10554:	|      add.l 20(sp),d0
   10558:	|      move.l d0,-(sp)
   1055a:	|      jsr 1528a <trimStack>
   10560:	|      addq.l #4,sp
	if (! getValueType(&obj1, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10562:	|      movea.l 20(sp),a0
   10566:	|      move.l 24(a0),d0
   1056a:	|      move.l d0,-(sp)
   1056c:	|      pea 7 <_start+0x7>
   10570:	|      moveq #12,d0
   10572:	|      add.l sp,d0
   10574:	|      move.l d0,-(sp)
   10576:	|      jsr 14906 <getValueType>
   1057c:	|      lea 12(sp),sp
   10580:	|      tst.w d0
   10582:	|  /-- bne.s 10588 <builtIn_callEvent+0x62>
   10584:	|  |   moveq #1,d0
   10586:	+--|-- bra.s 105e8 <builtIn_callEvent+0xc2>
	trimStack (&fun -> stack);
   10588:	|  \-> moveq #24,d0
   1058a:	|      add.l 20(sp),d0
   1058e:	|      move.l d0,-(sp)
   10590:	|      jsr 1528a <trimStack>
   10596:	|      addq.l #4,sp

	int fNum = getCombinationFunction (obj1, obj2);
   10598:	|      move.l (sp),d1
   1059a:	|      move.l 4(sp),d0
   1059e:	|      move.l d1,-(sp)
   105a0:	|      move.l d0,-(sp)
   105a2:	|      jsr d684 <getCombinationFunction>
   105a8:	|      addq.l #8,sp
   105aa:	|      move.l d0,8(sp)

	// Return value
	if (fNum) {
   105ae:	|  /-- beq.s 105ce <builtIn_callEvent+0xa8>
		setVariable (&fun -> reg, SVT_FUNC, fNum);
   105b0:	|  |   moveq #28,d0
   105b2:	|  |   add.l 20(sp),d0
   105b6:	|  |   move.l 8(sp),-(sp)
   105ba:	|  |   pea 2 <_start+0x2>
   105be:	|  |   move.l d0,-(sp)
   105c0:	|  |   jsr 151f8 <setVariable>
   105c6:	|  |   lea 12(sp),sp
		return BR_CALLAFUNC;
   105ca:	|  |   moveq #4,d0
   105cc:	+--|-- bra.s 105e8 <builtIn_callEvent+0xc2>
	}
	setVariable (&fun -> reg, SVT_INT, 0);
   105ce:	|  \-> moveq #28,d0
   105d0:	|      add.l 20(sp),d0
   105d4:	|      clr.l -(sp)
   105d6:	|      pea 1 <_start+0x1>
   105da:	|      move.l d0,-(sp)
   105dc:	|      jsr 151f8 <setVariable>
   105e2:	|      lea 12(sp),sp
	return BR_CONTINUE;
   105e6:	|      moveq #2,d0
}
   105e8:	\----> lea 12(sp),sp
   105ec:	       rts

000105ee <builtIn_quitGame>:
BOOL reallyWantToQuit = FALSE;

builtIn(quitGame)
{
	UNUSEDALL
	reallyWantToQuit = TRUE;
   105ee:	move.w #1,1cb54 <reallyWantToQuit>
	//quit_event.type=SDL_QUIT; Todo: Amigize
	//SDL_PushEvent(&quit_event);
	return BR_CONTINUE;
   105f6:	moveq #2,d0
}
   105f8:	rts

000105fa <builtIn__rem_movieStart>:

// The old movie functions are deprecated and does nothing.
builtIn(_rem_movieStart)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   105fa:	moveq #24,d0
   105fc:	add.l 8(sp),d0
   10600:	move.l d0,-(sp)
   10602:	jsr 1528a <trimStack>
   10608:	addq.l #4,sp
	KPrintF("Movie Stuff not supported on Amiga");
   1060a:	pea 19ae7 <line.c.05397aaf+0x1f0>
   10610:	jsr 17366 <KPrintF>
   10616:	addq.l #4,sp
	return BR_CONTINUE;
   10618:	moveq #2,d0
}
   1061a:	rts

0001061c <builtIn__rem_movieAbort>:

builtIn(_rem_movieAbort)
{
	UNUSEDALL
	//setVariable (&fun -> reg, SVT_INT, 0);
	KPrintF("Movie Stuff not supported on Amiga");
   1061c:	pea 19ae7 <line.c.05397aaf+0x1f0>
   10622:	jsr 17366 <KPrintF>
   10628:	addq.l #4,sp
	return BR_CONTINUE;
   1062a:	moveq #2,d0
}
   1062c:	rts

0001062e <builtIn__rem_moviePlaying>:

builtIn(_rem_moviePlaying)
{
	UNUSEDALL
	KPrintF("Movie Stuff not supported on Amiga");
   1062e:	pea 19ae7 <line.c.05397aaf+0x1f0>
   10634:	jsr 17366 <KPrintF>
   1063a:	addq.l #4,sp
	//setVariable (&fun -> reg, SVT_INT, 0);
	return BR_CONTINUE;
   1063c:	moveq #2,d0
}
   1063e:	rts

00010640 <builtIn_playMovie>:
	
	if (r && (! fun->next)) {
		restartFunction (fun);
		return BR_ALREADY_GONE;
	}*/
	KPrintF("Movie Stuff not supported on Amiga");
   10640:	pea 19ae7 <line.c.05397aaf+0x1f0>
   10646:	jsr 17366 <KPrintF>
   1064c:	addq.l #4,sp
	return BR_CONTINUE;
   1064e:	moveq #2,d0
}
   10650:	rts

00010652 <builtIn_stopMovie>:
	/*int r;
	
	r = stopMovie();
	
	setVariable (&fun -> reg, SVT_INT, 0);*/
	KPrintF("Movie Stuff not supported on Amiga");
   10652:	pea 19ae7 <line.c.05397aaf+0x1f0>
   10658:	jsr 17366 <KPrintF>
   1065e:	addq.l #4,sp
	return BR_CONTINUE;
   10660:	moveq #2,d0
}
   10662:	rts

00010664 <builtIn_pauseMovie>:
	/*int r;
	
	r = pauseMovie();
	
	setVariable (&fun -> reg, SVT_INT, 0);*/
	KPrintF("Movie Stuff not supported on Amiga");
   10664:	pea 19ae7 <line.c.05397aaf+0x1f0>
   1066a:	jsr 17366 <KPrintF>
   10670:	addq.l #4,sp
	return BR_CONTINUE;
   10672:	moveq #2,d0
}
   10674:	rts

00010676 <builtIn_startMusic>:

#pragma mark -
#pragma mark Audio functions

builtIn(startMusic)
{
   10676:	       lea -12(sp),sp
	UNUSEDALL
	int fromTrack, musChan, fileNumber;
	if (! getValueType(&fromTrack, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1067a:	       movea.l 20(sp),a0
   1067e:	       move.l 24(a0),d0
   10682:	       move.l d0,-(sp)
   10684:	       pea 1 <_start+0x1>
   10688:	       moveq #16,d0
   1068a:	       add.l sp,d0
   1068c:	       move.l d0,-(sp)
   1068e:	       jsr 14906 <getValueType>
   10694:	       lea 12(sp),sp
   10698:	       tst.w d0
   1069a:	   /-- bne.s 106a2 <builtIn_startMusic+0x2c>
   1069c:	   |   moveq #1,d0
   1069e:	/--|-- bra.w 10742 <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
   106a2:	|  \-> moveq #24,d0
   106a4:	|      add.l 20(sp),d0
   106a8:	|      move.l d0,-(sp)
   106aa:	|      jsr 1528a <trimStack>
   106b0:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   106b2:	|      movea.l 20(sp),a0
   106b6:	|      move.l 24(a0),d0
   106ba:	|      move.l d0,-(sp)
   106bc:	|      pea 1 <_start+0x1>
   106c0:	|      moveq #12,d0
   106c2:	|      add.l sp,d0
   106c4:	|      move.l d0,-(sp)
   106c6:	|      jsr 14906 <getValueType>
   106cc:	|      lea 12(sp),sp
   106d0:	|      tst.w d0
   106d2:	|  /-- bne.s 106d8 <builtIn_startMusic+0x62>
   106d4:	|  |   moveq #1,d0
   106d6:	+--|-- bra.s 10742 <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
   106d8:	|  \-> moveq #24,d0
   106da:	|      add.l 20(sp),d0
   106de:	|      move.l d0,-(sp)
   106e0:	|      jsr 1528a <trimStack>
   106e6:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   106e8:	|      movea.l 20(sp),a0
   106ec:	|      move.l 24(a0),d0
   106f0:	|      move.l d0,-(sp)
   106f2:	|      pea 5 <_start+0x5>
   106f6:	|      lea 8(sp),a0
   106fa:	|      move.l a0,-(sp)
   106fc:	|      jsr 14906 <getValueType>
   10702:	|      lea 12(sp),sp
   10706:	|      tst.w d0
   10708:	|  /-- bne.s 1070e <builtIn_startMusic+0x98>
   1070a:	|  |   moveq #1,d0
   1070c:	+--|-- bra.s 10742 <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
   1070e:	|  \-> moveq #24,d0
   10710:	|      add.l 20(sp),d0
   10714:	|      move.l d0,-(sp)
   10716:	|      jsr 1528a <trimStack>
   1071c:	|      addq.l #4,sp
	if (! playMOD (fileNumber, musChan, fromTrack)) return BR_CONTINUE; //BR_ERROR;
   1071e:	|      movea.l 8(sp),a0
   10722:	|      move.l 4(sp),d1
   10726:	|      move.l (sp),d0
   10728:	|      move.l a0,-(sp)
   1072a:	|      move.l d1,-(sp)
   1072c:	|      move.l d0,-(sp)
   1072e:	|      jsr d290 <playMOD>
   10734:	|      lea 12(sp),sp
   10738:	|      tst.w d0
   1073a:	|  /-- bne.s 10740 <builtIn_startMusic+0xca>
   1073c:	|  |   moveq #2,d0
   1073e:	+--|-- bra.s 10742 <builtIn_startMusic+0xcc>
	return BR_CONTINUE;
   10740:	|  \-> moveq #2,d0
}
   10742:	\----> lea 12(sp),sp
   10746:	       rts

00010748 <builtIn_stopMusic>:

builtIn(stopMusic)
{
   10748:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1074a:	       movea.l 12(sp),a0
   1074e:	       move.l 24(a0),d0
   10752:	       move.l d0,-(sp)
   10754:	       pea 1 <_start+0x1>
   10758:	       move.l sp,d0
   1075a:	       addq.l #8,d0
   1075c:	       move.l d0,-(sp)
   1075e:	       jsr 14906 <getValueType>
   10764:	       lea 12(sp),sp
   10768:	       tst.w d0
   1076a:	   /-- bne.s 10770 <builtIn_stopMusic+0x28>
   1076c:	   |   moveq #1,d0
   1076e:	/--|-- bra.s 1078e <builtIn_stopMusic+0x46>
	trimStack (&fun -> stack);
   10770:	|  \-> moveq #24,d0
   10772:	|      add.l 12(sp),d0
   10776:	|      move.l d0,-(sp)
   10778:	|      jsr 1528a <trimStack>
   1077e:	|      addq.l #4,sp
	stopMOD (v);
   10780:	|      move.l (sp),d0
   10782:	|      move.l d0,-(sp)
   10784:	|      jsr d32c <stopMOD>
   1078a:	|      addq.l #4,sp
	return BR_CONTINUE;
   1078c:	|      moveq #2,d0
}
   1078e:	\----> addq.l #4,sp
   10790:	       rts

00010792 <builtIn_setMusicVolume>:

builtIn(setMusicVolume)
{
   10792:	       subq.l #8,sp
	UNUSEDALL
	int musChan, v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10794:	       movea.l 16(sp),a0
   10798:	       move.l 24(a0),d0
   1079c:	       move.l d0,-(sp)
   1079e:	       pea 1 <_start+0x1>
   107a2:	       move.l sp,d0
   107a4:	       addq.l #8,d0
   107a6:	       move.l d0,-(sp)
   107a8:	       jsr 14906 <getValueType>
   107ae:	       lea 12(sp),sp
   107b2:	       tst.w d0
   107b4:	   /-- bne.s 107ba <builtIn_setMusicVolume+0x28>
   107b6:	   |   moveq #1,d0
   107b8:	/--|-- bra.s 10814 <builtIn_setMusicVolume+0x82>
	trimStack (&fun -> stack);
   107ba:	|  \-> moveq #24,d0
   107bc:	|      add.l 16(sp),d0
   107c0:	|      move.l d0,-(sp)
   107c2:	|      jsr 1528a <trimStack>
   107c8:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   107ca:	|      movea.l 16(sp),a0
   107ce:	|      move.l 24(a0),d0
   107d2:	|      move.l d0,-(sp)
   107d4:	|      pea 1 <_start+0x1>
   107d8:	|      moveq #12,d0
   107da:	|      add.l sp,d0
   107dc:	|      move.l d0,-(sp)
   107de:	|      jsr 14906 <getValueType>
   107e4:	|      lea 12(sp),sp
   107e8:	|      tst.w d0
   107ea:	|  /-- bne.s 107f0 <builtIn_setMusicVolume+0x5e>
   107ec:	|  |   moveq #1,d0
   107ee:	+--|-- bra.s 10814 <builtIn_setMusicVolume+0x82>
	trimStack (&fun -> stack);
   107f0:	|  \-> moveq #24,d0
   107f2:	|      add.l 16(sp),d0
   107f6:	|      move.l d0,-(sp)
   107f8:	|      jsr 1528a <trimStack>
   107fe:	|      addq.l #4,sp
	setMusicVolume (musChan, v);
   10800:	|      move.l (sp),d1
   10802:	|      move.l 4(sp),d0
   10806:	|      move.l d1,-(sp)
   10808:	|      move.l d0,-(sp)
   1080a:	|      jsr d312 <setMusicVolume>
   10810:	|      addq.l #8,sp
	return BR_CONTINUE;
   10812:	|      moveq #2,d0
}
   10814:	\----> addq.l #8,sp
   10816:	       rts

00010818 <builtIn_setDefaultMusicVolume>:

builtIn(setDefaultMusicVolume)
{
   10818:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1081a:	       movea.l 12(sp),a0
   1081e:	       move.l 24(a0),d0
   10822:	       move.l d0,-(sp)
   10824:	       pea 1 <_start+0x1>
   10828:	       move.l sp,d0
   1082a:	       addq.l #8,d0
   1082c:	       move.l d0,-(sp)
   1082e:	       jsr 14906 <getValueType>
   10834:	       lea 12(sp),sp
   10838:	       tst.w d0
   1083a:	   /-- bne.s 10840 <builtIn_setDefaultMusicVolume+0x28>
   1083c:	   |   moveq #1,d0
   1083e:	/--|-- bra.s 1085e <builtIn_setDefaultMusicVolume+0x46>
	trimStack (&fun -> stack);
   10840:	|  \-> moveq #24,d0
   10842:	|      add.l 12(sp),d0
   10846:	|      move.l d0,-(sp)
   10848:	|      jsr 1528a <trimStack>
   1084e:	|      addq.l #4,sp
	setDefaultMusicVolume (v);
   10850:	|      move.l (sp),d0
   10852:	|      move.l d0,-(sp)
   10854:	|      jsr d2f6 <setDefaultMusicVolume>
   1085a:	|      addq.l #4,sp
	return BR_CONTINUE;
   1085c:	|      moveq #2,d0
}
   1085e:	\----> addq.l #4,sp
   10860:	       rts

00010862 <builtIn_playSound>:

builtIn(playSound)
{
   10862:	       subq.l #4,sp


	UNUSEDALL
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   10864:	       movea.l 12(sp),a0
   10868:	       move.l 24(a0),d0
   1086c:	       move.l d0,-(sp)
   1086e:	       pea 5 <_start+0x5>
   10872:	       move.l sp,d0
   10874:	       addq.l #8,d0
   10876:	       move.l d0,-(sp)
   10878:	       jsr 14906 <getValueType>
   1087e:	       lea 12(sp),sp
   10882:	       tst.w d0
   10884:	   /-- bne.s 1088a <builtIn_playSound+0x28>
   10886:	   |   moveq #1,d0
   10888:	/--|-- bra.s 108b2 <builtIn_playSound+0x50>
	trimStack (&fun -> stack);
   1088a:	|  \-> moveq #24,d0
   1088c:	|      add.l 12(sp),d0
   10890:	|      move.l d0,-(sp)
   10892:	|      jsr 1528a <trimStack>
   10898:	|      addq.l #4,sp
	if (! startSound (fileNumber, FALSE)) return BR_CONTINUE;	// Was BR_ERROR
   1089a:	|      move.l (sp),d0
   1089c:	|      clr.l -(sp)
   1089e:	|      move.l d0,-(sp)
   108a0:	|      jsr d31a <startSound>
   108a6:	|      addq.l #8,sp
   108a8:	|      tst.w d0
   108aa:	|  /-- bne.s 108b0 <builtIn_playSound+0x4e>
   108ac:	|  |   moveq #2,d0
   108ae:	+--|-- bra.s 108b2 <builtIn_playSound+0x50>
	return BR_CONTINUE;
   108b0:	|  \-> moveq #2,d0
}
   108b2:	\----> addq.l #4,sp
   108b4:	       rts

000108b6 <builtIn_loopSound>:

builtIn(loopSound)
{
   108b6:	             lea -28(sp),sp
   108ba:	             move.l a6,-(sp)
	UNUSEDALL
	int fileNumber;

	if (numParams < 1) {
   108bc:	             tst.l 36(sp)
   108c0:	         /-- bgt.s 108d6 <builtIn_loopSound+0x20>
		KPrintF("Built-in function loopSound() must have at least 1 parameter.");
   108c2:	         |   pea 19b0a <line.c.05397aaf+0x213>
   108c8:	         |   jsr 17366 <KPrintF>
   108ce:	         |   addq.l #4,sp
		return BR_ERROR;
   108d0:	         |   moveq #1,d0
   108d2:	/--------|-- bra.w 10a92 <builtIn_loopSound+0x1dc>
	} else if (numParams < 2) {
   108d6:	|        \-> moveq #1,d0
   108d8:	|            cmp.l 36(sp),d0
   108dc:	|     /----- blt.s 10938 <builtIn_loopSound+0x82>

		if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) return BR_ERROR;
   108de:	|     |      movea.l 40(sp),a0
   108e2:	|     |      move.l 24(a0),d0
   108e6:	|     |      move.l d0,-(sp)
   108e8:	|     |      pea 5 <_start+0x5>
   108ec:	|     |      lea 16(sp),a0
   108f0:	|     |      move.l a0,-(sp)
   108f2:	|     |      jsr 14906 <getValueType>
   108f8:	|     |      lea 12(sp),sp
   108fc:	|     |      tst.w d0
   108fe:	|     |  /-- bne.s 10906 <builtIn_loopSound+0x50>
   10900:	|     |  |   moveq #1,d0
   10902:	+-----|--|-- bra.w 10a92 <builtIn_loopSound+0x1dc>
		trimStack(&fun->stack);
   10906:	|     |  \-> moveq #24,d0
   10908:	|     |      add.l 40(sp),d0
   1090c:	|     |      move.l d0,-(sp)
   1090e:	|     |      jsr 1528a <trimStack>
   10914:	|     |      addq.l #4,sp
		if (!startSound(fileNumber, TRUE)) return BR_CONTINUE;	// Was BR_ERROR
   10916:	|     |      move.l 8(sp),d0
   1091a:	|     |      pea 1 <_start+0x1>
   1091e:	|     |      move.l d0,-(sp)
   10920:	|     |      jsr d31a <startSound>
   10926:	|     |      addq.l #8,sp
   10928:	|     |      tst.w d0
   1092a:	|     |  /-- bne.s 10932 <builtIn_loopSound+0x7c>
   1092c:	|     |  |   moveq #2,d0
   1092e:	+-----|--|-- bra.w 10a92 <builtIn_loopSound+0x1dc>
		return BR_CONTINUE;
   10932:	|     |  \-> moveq #2,d0
   10934:	+-----|----- bra.w 10a92 <builtIn_loopSound+0x1dc>
	} else {
		// We have more than one sound to play!

		int doLoop = 2;
   10938:	|     \----> moveq #2,d1
   1093a:	|            move.l d1,4(sp)
		struct soundList *s = NULL;
   1093e:	|            clr.l 28(sp)
		struct soundList *old = NULL;
   10942:	|            clr.l 24(sp)

		// Should we loop?
		if (fun->stack->thisVar.varType != SVT_FILE) {
   10946:	|            movea.l 40(sp),a0
   1094a:	|            movea.l 24(a0),a0
   1094e:	|            move.l (a0),d0
   10950:	|            moveq #5,d1
   10952:	|            cmp.l d0,d1
   10954:	|  /-------- beq.w 10a2c <builtIn_loopSound+0x176>
			getValueType(&doLoop, SVT_INT,&fun->stack->thisVar);
   10958:	|  |         movea.l 40(sp),a0
   1095c:	|  |         move.l 24(a0),d0
   10960:	|  |         move.l d0,-(sp)
   10962:	|  |         pea 1 <_start+0x1>
   10966:	|  |         lea 12(sp),a0
   1096a:	|  |         move.l a0,-(sp)
   1096c:	|  |         jsr 14906 <getValueType>
   10972:	|  |         lea 12(sp),sp
			trimStack(&fun->stack);
   10976:	|  |         moveq #24,d0
   10978:	|  |         add.l 40(sp),d0
   1097c:	|  |         move.l d0,-(sp)
   1097e:	|  |         jsr 1528a <trimStack>
   10984:	|  |         addq.l #4,sp
			numParams--;
   10986:	|  |         subq.l #1,36(sp)
		}
		while (numParams) {
   1098a:	|  +-------- bra.w 10a2c <builtIn_loopSound+0x176>
			if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) {
   1098e:	|  |  /----> movea.l 40(sp),a0
   10992:	|  |  |      move.l 24(a0),d0
   10996:	|  |  |      move.l d0,-(sp)
   10998:	|  |  |      pea 5 <_start+0x5>
   1099c:	|  |  |      lea 16(sp),a0
   109a0:	|  |  |      move.l a0,-(sp)
   109a2:	|  |  |      jsr 14906 <getValueType>
   109a8:	|  |  |      lea 12(sp),sp
   109ac:	|  |  |      tst.w d0
   109ae:	|  |  |  /-- bne.s 109c4 <builtIn_loopSound+0x10e>
				KPrintF("Illegal parameter given built-in function loopSound().");
   109b0:	|  |  |  |   pea 19b48 <line.c.05397aaf+0x251>
   109b6:	|  |  |  |   jsr 17366 <KPrintF>
   109bc:	|  |  |  |   addq.l #4,sp
				return BR_ERROR;
   109be:	|  |  |  |   moveq #1,d0
   109c0:	+--|--|--|-- bra.w 10a92 <builtIn_loopSound+0x1dc>
			}
			s = AllocVec(sizeof(struct soundList), MEMF_ANY);
   109c4:	|  |  |  \-> moveq #20,d0
   109c6:	|  |  |      move.l d0,20(sp)
   109ca:	|  |  |      clr.l 16(sp)
   109ce:	|  |  |      move.l 1ca82 <SysBase>,d0
   109d4:	|  |  |      movea.l d0,a6
   109d6:	|  |  |      move.l 20(sp),d0
   109da:	|  |  |      move.l 16(sp),d1
   109de:	|  |  |      jsr -684(a6)
   109e2:	|  |  |      move.l d0,12(sp)
   109e6:	|  |  |      move.l 12(sp),d0
   109ea:	|  |  |      move.l d0,28(sp)
			if (!s) return BR_ERROR;
   109ee:	|  |  |  /-- bne.s 109f6 <builtIn_loopSound+0x140>
   109f0:	|  |  |  |   moveq #1,d0
   109f2:	+--|--|--|-- bra.w 10a92 <builtIn_loopSound+0x1dc>

			s->next = old;
   109f6:	|  |  |  \-> movea.l 28(sp),a0
   109fa:	|  |  |      move.l 24(sp),4(a0)
			s->prev = NULL;
   10a00:	|  |  |      movea.l 28(sp),a0
   10a04:	|  |  |      clr.l 8(a0)
			s->sound = fileNumber;
   10a08:	|  |  |      move.l 8(sp),d0
   10a0c:	|  |  |      movea.l 28(sp),a0
   10a10:	|  |  |      move.l d0,(a0)
			old = s;
   10a12:	|  |  |      move.l 28(sp),24(sp)

			trimStack(&fun->stack);
   10a18:	|  |  |      moveq #24,d0
   10a1a:	|  |  |      add.l 40(sp),d0
   10a1e:	|  |  |      move.l d0,-(sp)
   10a20:	|  |  |      jsr 1528a <trimStack>
   10a26:	|  |  |      addq.l #4,sp
			numParams--;
   10a28:	|  |  |      subq.l #1,36(sp)
		while (numParams) {
   10a2c:	|  \--|----> tst.l 36(sp)
   10a30:	|     \----- bne.w 1098e <builtIn_loopSound+0xd8>
		}
		while (s->next) s = s->next;
   10a34:	|        /-- bra.s 10a40 <builtIn_loopSound+0x18a>
   10a36:	|     /--|-> movea.l 28(sp),a0
   10a3a:	|     |  |   move.l 4(a0),28(sp)
   10a40:	|     |  \-> movea.l 28(sp),a0
   10a44:	|     |      move.l 4(a0),d0
   10a48:	|     \----- bne.s 10a36 <builtIn_loopSound+0x180>
		if (doLoop > 1) {
   10a4a:	|            move.l 4(sp),d0
   10a4e:	|            moveq #1,d1
   10a50:	|            cmp.l d0,d1
   10a52:	|     /----- bge.s 10a6a <builtIn_loopSound+0x1b4>
			s->next = old;
   10a54:	|     |      movea.l 28(sp),a0
   10a58:	|     |      move.l 24(sp),4(a0)
			old->prev = s;
   10a5e:	|     |      movea.l 24(sp),a0
   10a62:	|     |      move.l 28(sp),8(a0)
   10a68:	|     |  /-- bra.s 10a7a <builtIn_loopSound+0x1c4>
		} else if (doLoop) {
   10a6a:	|     \--|-> move.l 4(sp),d0
   10a6e:	|        +-- beq.s 10a7a <builtIn_loopSound+0x1c4>
			s->next = s;
   10a70:	|        |   movea.l 28(sp),a0
   10a74:	|        |   move.l 28(sp),4(a0)
		}
		old->vol = -1;
   10a7a:	|        \-> movea.l 24(sp),a0
   10a7e:	|            moveq #-1,d0
   10a80:	|            move.l d0,16(a0)
		playSoundList(old);
   10a84:	|            move.l 24(sp),-(sp)
   10a88:	|            jsr d294 <playSoundList>
   10a8e:	|            addq.l #4,sp
		return BR_CONTINUE;
   10a90:	|            moveq #2,d0
	}
}
   10a92:	\----------> movea.l (sp)+,a6
   10a94:	             lea 28(sp),sp
   10a98:	             rts

00010a9a <builtIn_stopSound>:

builtIn(stopSound)
{
   10a9a:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   10a9c:	       movea.l 12(sp),a0
   10aa0:	       move.l 24(a0),d0
   10aa4:	       move.l d0,-(sp)
   10aa6:	       pea 5 <_start+0x5>
   10aaa:	       move.l sp,d0
   10aac:	       addq.l #8,d0
   10aae:	       move.l d0,-(sp)
   10ab0:	       jsr 14906 <getValueType>
   10ab6:	       lea 12(sp),sp
   10aba:	       tst.w d0
   10abc:	   /-- bne.s 10ac2 <builtIn_stopSound+0x28>
   10abe:	   |   moveq #1,d0
   10ac0:	/--|-- bra.s 10ae0 <builtIn_stopSound+0x46>
	trimStack (&fun -> stack);
   10ac2:	|  \-> moveq #24,d0
   10ac4:	|      add.l 12(sp),d0
   10ac8:	|      move.l d0,-(sp)
   10aca:	|      jsr 1528a <trimStack>
   10ad0:	|      addq.l #4,sp
	huntKillSound (v);
   10ad2:	|      move.l (sp),d0
   10ad4:	|      move.l d0,-(sp)
   10ad6:	|      jsr d28c <huntKillSound>
   10adc:	|      addq.l #4,sp
	return BR_CONTINUE;
   10ade:	|      moveq #2,d0
}
   10ae0:	\----> addq.l #4,sp
   10ae2:	       rts

00010ae4 <builtIn_setDefaultSoundVolume>:

builtIn(setDefaultSoundVolume)
{
   10ae4:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10ae6:	       movea.l 12(sp),a0
   10aea:	       move.l 24(a0),d0
   10aee:	       move.l d0,-(sp)
   10af0:	       pea 1 <_start+0x1>
   10af4:	       move.l sp,d0
   10af6:	       addq.l #8,d0
   10af8:	       move.l d0,-(sp)
   10afa:	       jsr 14906 <getValueType>
   10b00:	       lea 12(sp),sp
   10b04:	       tst.w d0
   10b06:	   /-- bne.s 10b0c <builtIn_setDefaultSoundVolume+0x28>
   10b08:	   |   moveq #1,d0
   10b0a:	/--|-- bra.s 10b2a <builtIn_setDefaultSoundVolume+0x46>
	trimStack (&fun -> stack);
   10b0c:	|  \-> moveq #24,d0
   10b0e:	|      add.l 12(sp),d0
   10b12:	|      move.l d0,-(sp)
   10b14:	|      jsr 1528a <trimStack>
   10b1a:	|      addq.l #4,sp
	setDefaultSoundVolume (v);
   10b1c:	|      move.l (sp),d0
   10b1e:	|      move.l d0,-(sp)
   10b20:	|      jsr d302 <setDefaultSoundVolume>
   10b26:	|      addq.l #4,sp
	return BR_CONTINUE;
   10b28:	|      moveq #2,d0
}
   10b2a:	\----> addq.l #4,sp
   10b2c:	       rts

00010b2e <builtIn_setSoundVolume>:

builtIn(setSoundVolume)
{
   10b2e:	       subq.l #8,sp
	UNUSEDALL
	int musChan, v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10b30:	       movea.l 16(sp),a0
   10b34:	       move.l 24(a0),d0
   10b38:	       move.l d0,-(sp)
   10b3a:	       pea 1 <_start+0x1>
   10b3e:	       move.l sp,d0
   10b40:	       addq.l #8,d0
   10b42:	       move.l d0,-(sp)
   10b44:	       jsr 14906 <getValueType>
   10b4a:	       lea 12(sp),sp
   10b4e:	       tst.w d0
   10b50:	   /-- bne.s 10b56 <builtIn_setSoundVolume+0x28>
   10b52:	   |   moveq #1,d0
   10b54:	/--|-- bra.s 10bb0 <builtIn_setSoundVolume+0x82>
	trimStack (&fun -> stack);
   10b56:	|  \-> moveq #24,d0
   10b58:	|      add.l 16(sp),d0
   10b5c:	|      move.l d0,-(sp)
   10b5e:	|      jsr 1528a <trimStack>
   10b64:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   10b66:	|      movea.l 16(sp),a0
   10b6a:	|      move.l 24(a0),d0
   10b6e:	|      move.l d0,-(sp)
   10b70:	|      pea 5 <_start+0x5>
   10b74:	|      moveq #12,d0
   10b76:	|      add.l sp,d0
   10b78:	|      move.l d0,-(sp)
   10b7a:	|      jsr 14906 <getValueType>
   10b80:	|      lea 12(sp),sp
   10b84:	|      tst.w d0
   10b86:	|  /-- bne.s 10b8c <builtIn_setSoundVolume+0x5e>
   10b88:	|  |   moveq #1,d0
   10b8a:	+--|-- bra.s 10bb0 <builtIn_setSoundVolume+0x82>
	trimStack (&fun -> stack);
   10b8c:	|  \-> moveq #24,d0
   10b8e:	|      add.l 16(sp),d0
   10b92:	|      move.l d0,-(sp)
   10b94:	|      jsr 1528a <trimStack>
   10b9a:	|      addq.l #4,sp
	setSoundVolume (musChan, v);
   10b9c:	|      move.l (sp),d1
   10b9e:	|      move.l 4(sp),d0
   10ba2:	|      move.l d1,-(sp)
   10ba4:	|      move.l d0,-(sp)
   10ba6:	|      jsr d316 <setSoundVolume>
   10bac:	|      addq.l #8,sp
	return BR_CONTINUE;
   10bae:	|      moveq #2,d0
}
   10bb0:	\----> addq.l #8,sp
   10bb2:	       rts

00010bb4 <builtIn_setSoundLoopPoints>:


builtIn(setSoundLoopPoints)
{
   10bb4:	       lea -12(sp),sp
	UNUSEDALL
	int musChan, theEnd, theStart;
	if (! getValueType(&theEnd, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10bb8:	       movea.l 20(sp),a0
   10bbc:	       move.l 24(a0),d0
   10bc0:	       move.l d0,-(sp)
   10bc2:	       pea 1 <_start+0x1>
   10bc6:	       moveq #12,d0
   10bc8:	       add.l sp,d0
   10bca:	       move.l d0,-(sp)
   10bcc:	       jsr 14906 <getValueType>
   10bd2:	       lea 12(sp),sp
   10bd6:	       tst.w d0
   10bd8:	   /-- bne.s 10be0 <builtIn_setSoundLoopPoints+0x2c>
   10bda:	   |   moveq #1,d0
   10bdc:	/--|-- bra.w 10c78 <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
   10be0:	|  \-> moveq #24,d0
   10be2:	|      add.l 20(sp),d0
   10be6:	|      move.l d0,-(sp)
   10be8:	|      jsr 1528a <trimStack>
   10bee:	|      addq.l #4,sp
	if (! getValueType(&theStart, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10bf0:	|      movea.l 20(sp),a0
   10bf4:	|      move.l 24(a0),d0
   10bf8:	|      move.l d0,-(sp)
   10bfa:	|      pea 1 <_start+0x1>
   10bfe:	|      lea 8(sp),a0
   10c02:	|      move.l a0,-(sp)
   10c04:	|      jsr 14906 <getValueType>
   10c0a:	|      lea 12(sp),sp
   10c0e:	|      tst.w d0
   10c10:	|  /-- bne.s 10c16 <builtIn_setSoundLoopPoints+0x62>
   10c12:	|  |   moveq #1,d0
   10c14:	+--|-- bra.s 10c78 <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
   10c16:	|  \-> moveq #24,d0
   10c18:	|      add.l 20(sp),d0
   10c1c:	|      move.l d0,-(sp)
   10c1e:	|      jsr 1528a <trimStack>
   10c24:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   10c26:	|      movea.l 20(sp),a0
   10c2a:	|      move.l 24(a0),d0
   10c2e:	|      move.l d0,-(sp)
   10c30:	|      pea 5 <_start+0x5>
   10c34:	|      moveq #16,d0
   10c36:	|      add.l sp,d0
   10c38:	|      move.l d0,-(sp)
   10c3a:	|      jsr 14906 <getValueType>
   10c40:	|      lea 12(sp),sp
   10c44:	|      tst.w d0
   10c46:	|  /-- bne.s 10c4c <builtIn_setSoundLoopPoints+0x98>
   10c48:	|  |   moveq #1,d0
   10c4a:	+--|-- bra.s 10c78 <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
   10c4c:	|  \-> moveq #24,d0
   10c4e:	|      add.l 20(sp),d0
   10c52:	|      move.l d0,-(sp)
   10c54:	|      jsr 1528a <trimStack>
   10c5a:	|      addq.l #4,sp
	setSoundLoop (musChan, theStart, theEnd);
   10c5c:	|      movea.l 4(sp),a0
   10c60:	|      move.l (sp),d1
   10c62:	|      move.l 8(sp),d0
   10c66:	|      move.l a0,-(sp)
   10c68:	|      move.l d1,-(sp)
   10c6a:	|      move.l d0,-(sp)
   10c6c:	|      jsr d30e <setSoundLoop>
   10c72:	|      lea 12(sp),sp
	return BR_CONTINUE;
   10c76:	|      moveq #2,d0
}
   10c78:	\----> lea 12(sp),sp
   10c7c:	       rts

00010c7e <builtIn_setFloor>:

#pragma mark -
#pragma mark Extra room bits

builtIn(setFloor)
{
   10c7e:	          subq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType == SVT_FILE) {
   10c80:	          movea.l 12(sp),a0
   10c84:	          movea.l 24(a0),a0
   10c88:	          move.l (a0),d0
   10c8a:	          moveq #5,d1
   10c8c:	          cmp.l d0,d1
   10c8e:	/-------- bne.s 10cd2 <builtIn_setFloor+0x54>
		int v;
		getValueType(&v, SVT_FILE,&fun -> stack -> thisVar);
   10c90:	|         movea.l 12(sp),a0
   10c94:	|         move.l 24(a0),d0
   10c98:	|         move.l d0,-(sp)
   10c9a:	|         pea 5 <_start+0x5>
   10c9e:	|         move.l sp,d0
   10ca0:	|         addq.l #8,d0
   10ca2:	|         move.l d0,-(sp)
   10ca4:	|         jsr 14906 <getValueType>
   10caa:	|         lea 12(sp),sp
		trimStack (&fun -> stack);
   10cae:	|         moveq #24,d0
   10cb0:	|         add.l 12(sp),d0
   10cb4:	|         move.l d0,-(sp)
   10cb6:	|         jsr 1528a <trimStack>
   10cbc:	|         addq.l #4,sp
		if (! setFloor (v)) return BR_ERROR;
   10cbe:	|         move.l (sp),d0
   10cc0:	|         move.l d0,-(sp)
   10cc2:	|         jsr 16b10 <setFloor>
   10cc8:	|         addq.l #4,sp
   10cca:	|         tst.w d0
   10ccc:	|  /----- bne.s 10ce8 <builtIn_setFloor+0x6a>
   10cce:	|  |      moveq #1,d0
   10cd0:	|  |  /-- bra.s 10cea <builtIn_setFloor+0x6c>
	} else {
		trimStack (&fun -> stack);
   10cd2:	\--|--|-> moveq #24,d0
   10cd4:	   |  |   add.l 12(sp),d0
   10cd8:	   |  |   move.l d0,-(sp)
   10cda:	   |  |   jsr 1528a <trimStack>
   10ce0:	   |  |   addq.l #4,sp
		setFloorNull ();
   10ce2:	   |  |   jsr 1728a <setFloorNull>
	}
	return BR_CONTINUE;
   10ce8:	   \--|-> moveq #2,d0
}
   10cea:	      \-> addq.l #4,sp
   10cec:	          rts

00010cee <builtIn_showFloor>:

builtIn(showFloor)
{
	UNUSEDALL
	drawFloor ();
   10cee:	jsr 163a8 <drawFloor>
	return BR_CONTINUE;
   10cf4:	moveq #2,d0
}
   10cf6:	rts

00010cf8 <builtIn_setZBuffer>:

builtIn(setZBuffer)
{
   10cf8:	          subq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType == SVT_FILE) {
   10cfa:	          movea.l 12(sp),a0
   10cfe:	          movea.l 24(a0),a0
   10d02:	          move.l (a0),d0
   10d04:	          moveq #5,d1
   10d06:	          cmp.l d0,d1
   10d08:	/-------- bne.s 10d4c <builtIn_setZBuffer+0x54>
		int v;
		getValueType(&v, SVT_FILE,&fun -> stack -> thisVar);
   10d0a:	|         movea.l 12(sp),a0
   10d0e:	|         move.l 24(a0),d0
   10d12:	|         move.l d0,-(sp)
   10d14:	|         pea 5 <_start+0x5>
   10d18:	|         move.l sp,d0
   10d1a:	|         addq.l #8,d0
   10d1c:	|         move.l d0,-(sp)
   10d1e:	|         jsr 14906 <getValueType>
   10d24:	|         lea 12(sp),sp
		trimStack (&fun -> stack);
   10d28:	|         moveq #24,d0
   10d2a:	|         add.l 12(sp),d0
   10d2e:	|         move.l d0,-(sp)
   10d30:	|         jsr 1528a <trimStack>
   10d36:	|         addq.l #4,sp
		if (! setZBuffer (v)) return BR_ERROR;
   10d38:	|         move.l (sp),d0
   10d3a:	|         move.l d0,-(sp)
   10d3c:	|         jsr 889e <setZBuffer>
   10d42:	|         addq.l #4,sp
   10d44:	|         tst.w d0
   10d46:	|  /----- bne.s 10d62 <builtIn_setZBuffer+0x6a>
   10d48:	|  |      moveq #1,d0
   10d4a:	|  |  /-- bra.s 10d64 <builtIn_setZBuffer+0x6c>
	} else {
		trimStack (&fun -> stack);
   10d4c:	\--|--|-> moveq #24,d0
   10d4e:	   |  |   add.l 12(sp),d0
   10d52:	   |  |   move.l d0,-(sp)
   10d54:	   |  |   jsr 1528a <trimStack>
   10d5a:	   |  |   addq.l #4,sp
		killZBuffer ();
   10d5c:	   |  |   jsr 8852 <killZBuffer>
	}
	return BR_CONTINUE;
   10d62:	   \--|-> moveq #2,d0
}
   10d64:	      \-> addq.l #4,sp
   10d66:	          rts

00010d68 <builtIn_setLightMap>:

		default:
			fatal ("Function should have either 2 or 3 parameters");
			return BR_ERROR;
	}*/
	KPrintF("Not implemented on Amiga");
   10d68:	pea 19b7f <graphics.c.1c13408a+0x2c>
   10d6e:	jsr 17366 <KPrintF>
   10d74:	addq.l #4,sp
	return BR_CONTINUE;
   10d76:	moveq #2,d0
}
   10d78:	rts

00010d7a <builtIn_setSpeechMode>:
#pragma mark Objects

builtIn(setSpeechMode)
{
	UNUSEDALL
	if (! getValueType(&speechMode, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10d7a:	          movea.l 8(sp),a0
   10d7e:	          move.l 24(a0),d0
   10d82:	          move.l d0,-(sp)
   10d84:	          pea 1 <_start+0x1>
   10d88:	          pea 1cb50 <speechMode>
   10d8e:	          jsr 14906 <getValueType>
   10d94:	          lea 12(sp),sp
   10d98:	          tst.w d0
   10d9a:	      /-- bne.s 10da0 <builtIn_setSpeechMode+0x26>
   10d9c:	      |   moveq #1,d0
   10d9e:	/-----|-- bra.s 10dd8 <builtIn_setSpeechMode+0x5e>
	trimStack (&fun -> stack);
   10da0:	|     \-> moveq #24,d0
   10da2:	|         add.l 8(sp),d0
   10da6:	|         move.l d0,-(sp)
   10da8:	|         jsr 1528a <trimStack>
   10dae:	|         addq.l #4,sp
	if (speechMode < 0 || speechMode > 2) {
   10db0:	|         move.l 1cb50 <speechMode>,d0
   10db6:	|     /-- bmi.s 10dc4 <builtIn_setSpeechMode+0x4a>
   10db8:	|     |   move.l 1cb50 <speechMode>,d0
   10dbe:	|     |   moveq #2,d1
   10dc0:	|     |   cmp.l d0,d1
   10dc2:	|  /--|-- bge.s 10dd6 <builtIn_setSpeechMode+0x5c>
		KPrintF ("Valid parameters are be SPEECHANDTEXT, SPEECHONLY or TEXTONLY");
   10dc4:	|  |  \-> pea 19b98 <graphics.c.1c13408a+0x45>
   10dca:	|  |      jsr 17366 <KPrintF>
   10dd0:	|  |      addq.l #4,sp
		return BR_ERROR;
   10dd2:	|  |      moveq #1,d0
   10dd4:	+--|----- bra.s 10dd8 <builtIn_setSpeechMode+0x5e>
	}
	return BR_CONTINUE;
   10dd6:	|  \----> moveq #2,d0
}
   10dd8:	\-------> rts

00010dda <builtIn_somethingSpeaking>:

builtIn(somethingSpeaking)
{
   10dda:	       subq.l #4,sp
	UNUSEDALL
	int i = isThereAnySpeechGoingOn ();
   10ddc:	       jsr 805a <isThereAnySpeechGoingOn>
   10de2:	       move.l d0,(sp)
	if (i == -1) {
   10de4:	       moveq #-1,d0
   10de6:	       cmp.l (sp),d0
   10de8:	/----- bne.s 10e04 <builtIn_somethingSpeaking+0x2a>
		setVariable (&fun -> reg, SVT_INT, 0);
   10dea:	|      moveq #28,d0
   10dec:	|      add.l 12(sp),d0
   10df0:	|      clr.l -(sp)
   10df2:	|      pea 1 <_start+0x1>
   10df6:	|      move.l d0,-(sp)
   10df8:	|      jsr 151f8 <setVariable>
   10dfe:	|      lea 12(sp),sp
   10e02:	|  /-- bra.s 10e1c <builtIn_somethingSpeaking+0x42>
	} else {
		setVariable (&fun -> reg, SVT_OBJTYPE, i);
   10e04:	\--|-> moveq #28,d0
   10e06:	   |   add.l 12(sp),d0
   10e0a:	   |   move.l (sp),-(sp)
   10e0c:	   |   pea 7 <_start+0x7>
   10e10:	   |   move.l d0,-(sp)
   10e12:	   |   jsr 151f8 <setVariable>
   10e18:	   |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   10e1c:	   \-> moveq #2,d0
}
   10e1e:	       addq.l #4,sp
   10e20:	       rts

00010e22 <builtIn_skipSpeech>:

builtIn(skipSpeech)
{
	UNUSEDALL
	killSpeechTimers ();
   10e22:	jsr 6334 <killSpeechTimers>
	return BR_CONTINUE;
   10e28:	moveq #2,d0
}
   10e2a:	rts

00010e2c <builtIn_getOverObject>:

builtIn(getOverObject)
{
	UNUSEDALL
	if (overRegion)
   10e2c:	       move.l 1cb96 <overRegion>,d0
   10e32:	/----- beq.s 10e5c <builtIn_getOverObject+0x30>
		// Return value
		setVariable (&fun -> reg, SVT_OBJTYPE, overRegion -> thisType -> objectNum);
   10e34:	|      movea.l 1cb96 <overRegion>,a0
   10e3a:	|      movea.l 28(a0),a0
   10e3e:	|      move.l 4(a0),d1
   10e42:	|      moveq #28,d0
   10e44:	|      add.l 8(sp),d0
   10e48:	|      move.l d1,-(sp)
   10e4a:	|      pea 7 <_start+0x7>
   10e4e:	|      move.l d0,-(sp)
   10e50:	|      jsr 151f8 <setVariable>
   10e56:	|      lea 12(sp),sp
   10e5a:	|  /-- bra.s 10e74 <builtIn_getOverObject+0x48>
	else
		// Return value
		setVariable (&fun -> reg, SVT_INT, 0);
   10e5c:	\--|-> moveq #28,d0
   10e5e:	   |   add.l 8(sp),d0
   10e62:	   |   clr.l -(sp)
   10e64:	   |   pea 1 <_start+0x1>
   10e68:	   |   move.l d0,-(sp)
   10e6a:	   |   jsr 151f8 <setVariable>
   10e70:	   |   lea 12(sp),sp
	return BR_CONTINUE;
   10e74:	   \-> moveq #2,d0
}
   10e76:	       rts

00010e78 <builtIn_rename>:

builtIn(rename)
{
   10e78:	       lea -16(sp),sp
   10e7c:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar(&(fun->stack->thisVar));
   10e7e:	       movea.l 28(sp),a0
   10e82:	       move.l 24(a0),d0
   10e86:	       move.l d0,-(sp)
   10e88:	       jsr 14edc <getTextFromAnyVar>
   10e8e:	       addq.l #4,sp
   10e90:	       move.l d0,16(sp)
	int objT;
	if (!newText) return BR_ERROR;
   10e94:	   /-- bne.s 10e9a <builtIn_rename+0x22>
   10e96:	   |   moveq #1,d0
   10e98:	/--|-- bra.s 10f14 <builtIn_rename+0x9c>
	trimStack(&fun->stack);
   10e9a:	|  \-> moveq #24,d0
   10e9c:	|      add.l 28(sp),d0
   10ea0:	|      move.l d0,-(sp)
   10ea2:	|      jsr 1528a <trimStack>
   10ea8:	|      addq.l #4,sp
	if (!getValueType(&objT, SVT_OBJTYPE, &fun->stack->thisVar)) return BR_ERROR;
   10eaa:	|      movea.l 28(sp),a0
   10eae:	|      move.l 24(a0),d0
   10eb2:	|      move.l d0,-(sp)
   10eb4:	|      pea 7 <_start+0x7>
   10eb8:	|      lea 12(sp),a0
   10ebc:	|      move.l a0,-(sp)
   10ebe:	|      jsr 14906 <getValueType>
   10ec4:	|      lea 12(sp),sp
   10ec8:	|      tst.w d0
   10eca:	|  /-- bne.s 10ed0 <builtIn_rename+0x58>
   10ecc:	|  |   moveq #1,d0
   10ece:	+--|-- bra.s 10f14 <builtIn_rename+0x9c>
	trimStack(&fun->stack);
   10ed0:	|  \-> moveq #24,d0
   10ed2:	|      add.l 28(sp),d0
   10ed6:	|      move.l d0,-(sp)
   10ed8:	|      jsr 1528a <trimStack>
   10ede:	|      addq.l #4,sp
	struct objectType * o = findObjectType(objT);
   10ee0:	|      move.l 4(sp),d0
   10ee4:	|      move.l d0,-(sp)
   10ee6:	|      jsr d650 <findObjectType>
   10eec:	|      addq.l #4,sp
   10eee:	|      move.l d0,12(sp)
	FreeVec(o->screenName);
   10ef2:	|      movea.l 12(sp),a0
   10ef6:	|      move.l (a0),8(sp)
   10efa:	|      move.l 1ca82 <SysBase>,d0
   10f00:	|      movea.l d0,a6
   10f02:	|      movea.l 8(sp),a1
   10f06:	|      jsr -690(a6)
	o->screenName = newText;
   10f0a:	|      movea.l 12(sp),a0
   10f0e:	|      move.l 16(sp),(a0)
	return BR_CONTINUE;
   10f12:	|      moveq #2,d0
}
   10f14:	\----> movea.l (sp)+,a6
   10f16:	       lea 16(sp),sp
   10f1a:	       rts

00010f1c <builtIn_getObjectX>:

builtIn (getObjectX)
{
   10f1c:	          lea -12(sp),sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10f20:	          movea.l 20(sp),a0
   10f24:	          move.l 24(a0),d0
   10f28:	          move.l d0,-(sp)
   10f2a:	          pea 7 <_start+0x7>
   10f2e:	          lea 8(sp),a0
   10f32:	          move.l a0,-(sp)
   10f34:	          jsr 14906 <getValueType>
   10f3a:	          lea 12(sp),sp
   10f3e:	          tst.w d0
   10f40:	      /-- bne.s 10f48 <builtIn_getObjectX+0x2c>
   10f42:	      |   moveq #1,d0
   10f44:	/-----|-- bra.w 10fe4 <builtIn_getObjectX+0xc8>
	trimStack (&fun -> stack);
   10f48:	|     \-> moveq #24,d0
   10f4a:	|         add.l 20(sp),d0
   10f4e:	|         move.l d0,-(sp)
   10f50:	|         jsr 1528a <trimStack>
   10f56:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   10f58:	|         move.l (sp),d0
   10f5a:	|         move.l d0,-(sp)
   10f5c:	|         jsr a75a <findPerson>
   10f62:	|         addq.l #4,sp
   10f64:	|         move.l d0,8(sp)
	if (pers) {
   10f68:	|     /-- beq.s 10f96 <builtIn_getObjectX+0x7a>
		setVariable (&fun -> reg, SVT_INT, pers -> x);
   10f6a:	|     |   movea.l 8(sp),a0
   10f6e:	|     |   move.l (a0),d0
   10f70:	|     |   move.l d0,-(sp)
   10f72:	|     |   jsr 17730 <__fixsfsi>
   10f78:	|     |   addq.l #4,sp
   10f7a:	|     |   move.l d0,d1
   10f7c:	|     |   moveq #28,d0
   10f7e:	|     |   add.l 20(sp),d0
   10f82:	|     |   move.l d1,-(sp)
   10f84:	|     |   pea 1 <_start+0x1>
   10f88:	|     |   move.l d0,-(sp)
   10f8a:	|     |   jsr 151f8 <setVariable>
   10f90:	|     |   lea 12(sp),sp
   10f94:	|  /--|-- bra.s 10fe2 <builtIn_getObjectX+0xc6>
	} else {
		struct screenRegion * la = getRegionForObject (objectNumber);
   10f96:	|  |  \-> move.l (sp),d0
   10f98:	|  |      move.l d0,-(sp)
   10f9a:	|  |      jsr 15b48 <getRegionForObject>
   10fa0:	|  |      addq.l #4,sp
   10fa2:	|  |      move.l d0,4(sp)
		if (la) {
   10fa6:	|  |  /-- beq.s 10fca <builtIn_getObjectX+0xae>
			setVariable (&fun -> reg, SVT_INT, la -> sX);
   10fa8:	|  |  |   movea.l 4(sp),a0
   10fac:	|  |  |   move.l 16(a0),d1
   10fb0:	|  |  |   moveq #28,d0
   10fb2:	|  |  |   add.l 20(sp),d0
   10fb6:	|  |  |   move.l d1,-(sp)
   10fb8:	|  |  |   pea 1 <_start+0x1>
   10fbc:	|  |  |   move.l d0,-(sp)
   10fbe:	|  |  |   jsr 151f8 <setVariable>
   10fc4:	|  |  |   lea 12(sp),sp
   10fc8:	|  +--|-- bra.s 10fe2 <builtIn_getObjectX+0xc6>
		} else {
			setVariable (&fun -> reg, SVT_INT, 0);
   10fca:	|  |  \-> moveq #28,d0
   10fcc:	|  |      add.l 20(sp),d0
   10fd0:	|  |      clr.l -(sp)
   10fd2:	|  |      pea 1 <_start+0x1>
   10fd6:	|  |      move.l d0,-(sp)
   10fd8:	|  |      jsr 151f8 <setVariable>
   10fde:	|  |      lea 12(sp),sp
		}
	}
	return BR_CONTINUE;
   10fe2:	|  \----> moveq #2,d0
}
   10fe4:	\-------> lea 12(sp),sp
   10fe8:	          rts

00010fea <builtIn_getObjectY>:

builtIn (getObjectY)
{
   10fea:	          lea -12(sp),sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10fee:	          movea.l 20(sp),a0
   10ff2:	          move.l 24(a0),d0
   10ff6:	          move.l d0,-(sp)
   10ff8:	          pea 7 <_start+0x7>
   10ffc:	          lea 8(sp),a0
   11000:	          move.l a0,-(sp)
   11002:	          jsr 14906 <getValueType>
   11008:	          lea 12(sp),sp
   1100c:	          tst.w d0
   1100e:	      /-- bne.s 11016 <builtIn_getObjectY+0x2c>
   11010:	      |   moveq #1,d0
   11012:	/-----|-- bra.w 110b4 <builtIn_getObjectY+0xca>
	trimStack (&fun -> stack);
   11016:	|     \-> moveq #24,d0
   11018:	|         add.l 20(sp),d0
   1101c:	|         move.l d0,-(sp)
   1101e:	|         jsr 1528a <trimStack>
   11024:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   11026:	|         move.l (sp),d0
   11028:	|         move.l d0,-(sp)
   1102a:	|         jsr a75a <findPerson>
   11030:	|         addq.l #4,sp
   11032:	|         move.l d0,8(sp)
	if (pers) {
   11036:	|     /-- beq.s 11066 <builtIn_getObjectY+0x7c>
		setVariable (&fun -> reg, SVT_INT, pers -> y);
   11038:	|     |   movea.l 8(sp),a0
   1103c:	|     |   move.l 4(a0),d0
   11040:	|     |   move.l d0,-(sp)
   11042:	|     |   jsr 17730 <__fixsfsi>
   11048:	|     |   addq.l #4,sp
   1104a:	|     |   move.l d0,d1
   1104c:	|     |   moveq #28,d0
   1104e:	|     |   add.l 20(sp),d0
   11052:	|     |   move.l d1,-(sp)
   11054:	|     |   pea 1 <_start+0x1>
   11058:	|     |   move.l d0,-(sp)
   1105a:	|     |   jsr 151f8 <setVariable>
   11060:	|     |   lea 12(sp),sp
   11064:	|  /--|-- bra.s 110b2 <builtIn_getObjectY+0xc8>
	} else {
		struct screenRegion * la = getRegionForObject (objectNumber);
   11066:	|  |  \-> move.l (sp),d0
   11068:	|  |      move.l d0,-(sp)
   1106a:	|  |      jsr 15b48 <getRegionForObject>
   11070:	|  |      addq.l #4,sp
   11072:	|  |      move.l d0,4(sp)
		if (la) {
   11076:	|  |  /-- beq.s 1109a <builtIn_getObjectY+0xb0>
			setVariable (&fun -> reg, SVT_INT, la -> sY);
   11078:	|  |  |   movea.l 4(sp),a0
   1107c:	|  |  |   move.l 20(a0),d1
   11080:	|  |  |   moveq #28,d0
   11082:	|  |  |   add.l 20(sp),d0
   11086:	|  |  |   move.l d1,-(sp)
   11088:	|  |  |   pea 1 <_start+0x1>
   1108c:	|  |  |   move.l d0,-(sp)
   1108e:	|  |  |   jsr 151f8 <setVariable>
   11094:	|  |  |   lea 12(sp),sp
   11098:	|  +--|-- bra.s 110b2 <builtIn_getObjectY+0xc8>
		} else {
			setVariable (&fun -> reg, SVT_INT, 0);
   1109a:	|  |  \-> moveq #28,d0
   1109c:	|  |      add.l 20(sp),d0
   110a0:	|  |      clr.l -(sp)
   110a2:	|  |      pea 1 <_start+0x1>
   110a6:	|  |      move.l d0,-(sp)
   110a8:	|  |      jsr 151f8 <setVariable>
   110ae:	|  |      lea 12(sp),sp
		}
	}
	return BR_CONTINUE;
   110b2:	|  \----> moveq #2,d0
}
   110b4:	\-------> lea 12(sp),sp
   110b8:	          rts

000110ba <builtIn_addScreenRegion>:


builtIn(addScreenRegion)
{
   110ba:	       lea -32(sp),sp
   110be:	       movem.l d2-d5,-(sp)
	UNUSEDALL
	int sX, sY, x1, y1, x2, y2, di, objectNumber;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   110c2:	       movea.l 56(sp),a0
   110c6:	       move.l 24(a0),d0
   110ca:	       move.l d0,-(sp)
   110cc:	       pea 1 <_start+0x1>
   110d0:	       lea 28(sp),a0
   110d4:	       move.l a0,-(sp)
   110d6:	       jsr 14906 <getValueType>
   110dc:	       lea 12(sp),sp
   110e0:	       tst.w d0
   110e2:	   /-- bne.s 110ea <builtIn_addScreenRegion+0x30>
   110e4:	   |   moveq #1,d0
   110e6:	/--|-- bra.w 112c4 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   110ea:	|  \-> moveq #24,d0
   110ec:	|      add.l 56(sp),d0
   110f0:	|      move.l d0,-(sp)
   110f2:	|      jsr 1528a <trimStack>
   110f8:	|      addq.l #4,sp
	if (! getValueType(&sY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   110fa:	|      movea.l 56(sp),a0
   110fe:	|      move.l 24(a0),d0
   11102:	|      move.l d0,-(sp)
   11104:	|      pea 1 <_start+0x1>
   11108:	|      moveq #48,d0
   1110a:	|      add.l sp,d0
   1110c:	|      move.l d0,-(sp)
   1110e:	|      jsr 14906 <getValueType>
   11114:	|      lea 12(sp),sp
   11118:	|      tst.w d0
   1111a:	|  /-- bne.s 11122 <builtIn_addScreenRegion+0x68>
   1111c:	|  |   moveq #1,d0
   1111e:	+--|-- bra.w 112c4 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   11122:	|  \-> moveq #24,d0
   11124:	|      add.l 56(sp),d0
   11128:	|      move.l d0,-(sp)
   1112a:	|      jsr 1528a <trimStack>
   11130:	|      addq.l #4,sp
	if (! getValueType(&sX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11132:	|      movea.l 56(sp),a0
   11136:	|      move.l 24(a0),d0
   1113a:	|      move.l d0,-(sp)
   1113c:	|      pea 1 <_start+0x1>
   11140:	|      moveq #52,d0
   11142:	|      add.l sp,d0
   11144:	|      move.l d0,-(sp)
   11146:	|      jsr 14906 <getValueType>
   1114c:	|      lea 12(sp),sp
   11150:	|      tst.w d0
   11152:	|  /-- bne.s 1115a <builtIn_addScreenRegion+0xa0>
   11154:	|  |   moveq #1,d0
   11156:	+--|-- bra.w 112c4 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   1115a:	|  \-> moveq #24,d0
   1115c:	|      add.l 56(sp),d0
   11160:	|      move.l d0,-(sp)
   11162:	|      jsr 1528a <trimStack>
   11168:	|      addq.l #4,sp
	if (! getValueType(&y2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1116a:	|      movea.l 56(sp),a0
   1116e:	|      move.l 24(a0),d0
   11172:	|      move.l d0,-(sp)
   11174:	|      pea 1 <_start+0x1>
   11178:	|      lea 32(sp),a0
   1117c:	|      move.l a0,-(sp)
   1117e:	|      jsr 14906 <getValueType>
   11184:	|      lea 12(sp),sp
   11188:	|      tst.w d0
   1118a:	|  /-- bne.s 11192 <builtIn_addScreenRegion+0xd8>
   1118c:	|  |   moveq #1,d0
   1118e:	+--|-- bra.w 112c4 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   11192:	|  \-> moveq #24,d0
   11194:	|      add.l 56(sp),d0
   11198:	|      move.l d0,-(sp)
   1119a:	|      jsr 1528a <trimStack>
   111a0:	|      addq.l #4,sp
	if (! getValueType(&x2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   111a2:	|      movea.l 56(sp),a0
   111a6:	|      move.l 24(a0),d0
   111aa:	|      move.l d0,-(sp)
   111ac:	|      pea 1 <_start+0x1>
   111b0:	|      lea 36(sp),a0
   111b4:	|      move.l a0,-(sp)
   111b6:	|      jsr 14906 <getValueType>
   111bc:	|      lea 12(sp),sp
   111c0:	|      tst.w d0
   111c2:	|  /-- bne.s 111ca <builtIn_addScreenRegion+0x110>
   111c4:	|  |   moveq #1,d0
   111c6:	+--|-- bra.w 112c4 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   111ca:	|  \-> moveq #24,d0
   111cc:	|      add.l 56(sp),d0
   111d0:	|      move.l d0,-(sp)
   111d2:	|      jsr 1528a <trimStack>
   111d8:	|      addq.l #4,sp
	if (! getValueType(&y1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   111da:	|      movea.l 56(sp),a0
   111de:	|      move.l 24(a0),d0
   111e2:	|      move.l d0,-(sp)
   111e4:	|      pea 1 <_start+0x1>
   111e8:	|      lea 40(sp),a0
   111ec:	|      move.l a0,-(sp)
   111ee:	|      jsr 14906 <getValueType>
   111f4:	|      lea 12(sp),sp
   111f8:	|      tst.w d0
   111fa:	|  /-- bne.s 11202 <builtIn_addScreenRegion+0x148>
   111fc:	|  |   moveq #1,d0
   111fe:	+--|-- bra.w 112c4 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   11202:	|  \-> moveq #24,d0
   11204:	|      add.l 56(sp),d0
   11208:	|      move.l d0,-(sp)
   1120a:	|      jsr 1528a <trimStack>
   11210:	|      addq.l #4,sp
	if (! getValueType(&x1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11212:	|      movea.l 56(sp),a0
   11216:	|      move.l 24(a0),d0
   1121a:	|      move.l d0,-(sp)
   1121c:	|      pea 1 <_start+0x1>
   11220:	|      lea 44(sp),a0
   11224:	|      move.l a0,-(sp)
   11226:	|      jsr 14906 <getValueType>
   1122c:	|      lea 12(sp),sp
   11230:	|      tst.w d0
   11232:	|  /-- bne.s 1123a <builtIn_addScreenRegion+0x180>
   11234:	|  |   moveq #1,d0
   11236:	+--|-- bra.w 112c4 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   1123a:	|  \-> moveq #24,d0
   1123c:	|      add.l 56(sp),d0
   11240:	|      move.l d0,-(sp)
   11242:	|      jsr 1528a <trimStack>
   11248:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1124a:	|      movea.l 56(sp),a0
   1124e:	|      move.l 24(a0),d0
   11252:	|      move.l d0,-(sp)
   11254:	|      pea 7 <_start+0x7>
   11258:	|      lea 24(sp),a0
   1125c:	|      move.l a0,-(sp)
   1125e:	|      jsr 14906 <getValueType>
   11264:	|      lea 12(sp),sp
   11268:	|      tst.w d0
   1126a:	|  /-- bne.s 11270 <builtIn_addScreenRegion+0x1b6>
   1126c:	|  |   moveq #1,d0
   1126e:	+--|-- bra.s 112c4 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   11270:	|  \-> moveq #24,d0
   11272:	|      add.l 56(sp),d0
   11276:	|      move.l d0,-(sp)
   11278:	|      jsr 1528a <trimStack>
   1127e:	|      addq.l #4,sp
	if (addScreenRegion (x1, y1, x2, y2, sX, sY, di, objectNumber)) return BR_CONTINUE;
   11280:	|      move.l 16(sp),d5
   11284:	|      move.l 20(sp),d4
   11288:	|      move.l 40(sp),d3
   1128c:	|      move.l 44(sp),d2
   11290:	|      movea.l 24(sp),a1
   11294:	|      movea.l 28(sp),a0
   11298:	|      move.l 32(sp),d1
   1129c:	|      move.l 36(sp),d0
   112a0:	|      move.l d5,-(sp)
   112a2:	|      move.l d4,-(sp)
   112a4:	|      move.l d3,-(sp)
   112a6:	|      move.l d2,-(sp)
   112a8:	|      move.l a1,-(sp)
   112aa:	|      move.l a0,-(sp)
   112ac:	|      move.l d1,-(sp)
   112ae:	|      move.l d0,-(sp)
   112b0:	|      jsr 15a02 <addScreenRegion>
   112b6:	|      lea 32(sp),sp
   112ba:	|      tst.w d0
   112bc:	|  /-- beq.s 112c2 <builtIn_addScreenRegion+0x208>
   112be:	|  |   moveq #2,d0
   112c0:	+--|-- bra.s 112c4 <builtIn_addScreenRegion+0x20a>
	return BR_ERROR;
   112c2:	|  \-> moveq #1,d0

}
   112c4:	\----> movem.l (sp)+,d2-d5
   112c8:	       lea 32(sp),sp
   112cc:	       rts

000112ce <builtIn_removeScreenRegion>:

builtIn(removeScreenRegion)
{
   112ce:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   112d0:	       movea.l 12(sp),a0
   112d4:	       move.l 24(a0),d0
   112d8:	       move.l d0,-(sp)
   112da:	       pea 7 <_start+0x7>
   112de:	       move.l sp,d0
   112e0:	       addq.l #8,d0
   112e2:	       move.l d0,-(sp)
   112e4:	       jsr 14906 <getValueType>
   112ea:	       lea 12(sp),sp
   112ee:	       tst.w d0
   112f0:	   /-- bne.s 112f6 <builtIn_removeScreenRegion+0x28>
   112f2:	   |   moveq #1,d0
   112f4:	/--|-- bra.s 11314 <builtIn_removeScreenRegion+0x46>
	trimStack (&fun -> stack);
   112f6:	|  \-> moveq #24,d0
   112f8:	|      add.l 12(sp),d0
   112fc:	|      move.l d0,-(sp)
   112fe:	|      jsr 1528a <trimStack>
   11304:	|      addq.l #4,sp
	removeScreenRegion (objectNumber);
   11306:	|      move.l (sp),d0
   11308:	|      move.l d0,-(sp)
   1130a:	|      jsr 15cf0 <removeScreenRegion>
   11310:	|      addq.l #4,sp
	return BR_CONTINUE;
   11312:	|      moveq #2,d0
}
   11314:	\----> addq.l #4,sp
   11316:	       rts

00011318 <builtIn_showBoxes>:

builtIn(showBoxes)
{
	UNUSEDALL
	showBoxes ();
   11318:	jsr 15e74 <showBoxes>
	return BR_CONTINUE;
   1131e:	moveq #2,d0
}
   11320:	rts

00011322 <builtIn_removeAllScreenRegions>:

builtIn(removeAllScreenRegions)
{
	UNUSEDALL
	killAllRegions ();
   11322:	jsr 15b76 <killAllRegions>
	return BR_CONTINUE;
   11328:	moveq #2,d0
}
   1132a:	rts

0001132c <builtIn_addCharacter>:

builtIn(addCharacter)
{
   1132c:	       lea -16(sp),sp
	UNUSEDALL
	struct persona * p;
	int x, y, objectNumber;

	p = getCostumeFromVar (&(fun -> stack -> thisVar));
   11330:	       movea.l 24(sp),a0
   11334:	       move.l 24(a0),d0
   11338:	       move.l d0,-(sp)
   1133a:	       jsr 145b2 <getCostumeFromVar>
   11340:	       addq.l #4,sp
   11342:	       move.l d0,12(sp)
	if (p == NULL) return BR_ERROR;
   11346:	   /-- bne.s 1134e <builtIn_addCharacter+0x22>
   11348:	   |   moveq #1,d0
   1134a:	/--|-- bra.w 1142a <builtIn_addCharacter+0xfe>

	trimStack (&fun -> stack);
   1134e:	|  \-> moveq #24,d0
   11350:	|      add.l 24(sp),d0
   11354:	|      move.l d0,-(sp)
   11356:	|      jsr 1528a <trimStack>
   1135c:	|      addq.l #4,sp
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1135e:	|      movea.l 24(sp),a0
   11362:	|      move.l 24(a0),d0
   11366:	|      move.l d0,-(sp)
   11368:	|      pea 1 <_start+0x1>
   1136c:	|      lea 12(sp),a0
   11370:	|      move.l a0,-(sp)
   11372:	|      jsr 14906 <getValueType>
   11378:	|      lea 12(sp),sp
   1137c:	|      tst.w d0
   1137e:	|  /-- bne.s 11386 <builtIn_addCharacter+0x5a>
   11380:	|  |   moveq #1,d0
   11382:	+--|-- bra.w 1142a <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
   11386:	|  \-> moveq #24,d0
   11388:	|      add.l 24(sp),d0
   1138c:	|      move.l d0,-(sp)
   1138e:	|      jsr 1528a <trimStack>
   11394:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11396:	|      movea.l 24(sp),a0
   1139a:	|      move.l 24(a0),d0
   1139e:	|      move.l d0,-(sp)
   113a0:	|      pea 1 <_start+0x1>
   113a4:	|      moveq #16,d0
   113a6:	|      add.l sp,d0
   113a8:	|      move.l d0,-(sp)
   113aa:	|      jsr 14906 <getValueType>
   113b0:	|      lea 12(sp),sp
   113b4:	|      tst.w d0
   113b6:	|  /-- bne.s 113bc <builtIn_addCharacter+0x90>
   113b8:	|  |   moveq #1,d0
   113ba:	+--|-- bra.s 1142a <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
   113bc:	|  \-> moveq #24,d0
   113be:	|      add.l 24(sp),d0
   113c2:	|      move.l d0,-(sp)
   113c4:	|      jsr 1528a <trimStack>
   113ca:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   113cc:	|      movea.l 24(sp),a0
   113d0:	|      move.l 24(a0),d0
   113d4:	|      move.l d0,-(sp)
   113d6:	|      pea 7 <_start+0x7>
   113da:	|      lea 8(sp),a0
   113de:	|      move.l a0,-(sp)
   113e0:	|      jsr 14906 <getValueType>
   113e6:	|      lea 12(sp),sp
   113ea:	|      tst.w d0
   113ec:	|  /-- bne.s 113f2 <builtIn_addCharacter+0xc6>
   113ee:	|  |   moveq #1,d0
   113f0:	+--|-- bra.s 1142a <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
   113f2:	|  \-> moveq #24,d0
   113f4:	|      add.l 24(sp),d0
   113f8:	|      move.l d0,-(sp)
   113fa:	|      jsr 1528a <trimStack>
   11400:	|      addq.l #4,sp
	if (addPerson (x, y, objectNumber, p)) return BR_CONTINUE;
   11402:	|      movea.l (sp),a0
   11404:	|      move.l 4(sp),d1
   11408:	|      move.l 8(sp),d0
   1140c:	|      move.l 12(sp),-(sp)
   11410:	|      move.l a0,-(sp)
   11412:	|      move.l d1,-(sp)
   11414:	|      move.l d0,-(sp)
   11416:	|      jsr 9354 <addPerson>
   1141c:	|      lea 16(sp),sp
   11420:	|      tst.w d0
   11422:	|  /-- beq.s 11428 <builtIn_addCharacter+0xfc>
   11424:	|  |   moveq #2,d0
   11426:	+--|-- bra.s 1142a <builtIn_addCharacter+0xfe>
	return BR_ERROR;
   11428:	|  \-> moveq #1,d0
}
   1142a:	\----> lea 16(sp),sp
   1142e:	       rts

00011430 <builtIn_hideCharacter>:

builtIn(hideCharacter)
{
   11430:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11432:	       movea.l 12(sp),a0
   11436:	       move.l 24(a0),d0
   1143a:	       move.l d0,-(sp)
   1143c:	       pea 7 <_start+0x7>
   11440:	       move.l sp,d0
   11442:	       addq.l #8,d0
   11444:	       move.l d0,-(sp)
   11446:	       jsr 14906 <getValueType>
   1144c:	       lea 12(sp),sp
   11450:	       tst.w d0
   11452:	   /-- bne.s 11458 <builtIn_hideCharacter+0x28>
   11454:	   |   moveq #1,d0
   11456:	/--|-- bra.s 11478 <builtIn_hideCharacter+0x48>
	trimStack (&fun -> stack);
   11458:	|  \-> moveq #24,d0
   1145a:	|      add.l 12(sp),d0
   1145e:	|      move.l d0,-(sp)
   11460:	|      jsr 1528a <trimStack>
   11466:	|      addq.l #4,sp
	setShown (FALSE, objectNumber);
   11468:	|      move.l (sp),d0
   1146a:	|      move.l d0,-(sp)
   1146c:	|      clr.l -(sp)
   1146e:	|      jsr bd8e <setShown>
   11474:	|      addq.l #8,sp
	return BR_CONTINUE;
   11476:	|      moveq #2,d0
}
   11478:	\----> addq.l #4,sp
   1147a:	       rts

0001147c <builtIn_showCharacter>:

builtIn(showCharacter)
{
   1147c:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1147e:	       movea.l 12(sp),a0
   11482:	       move.l 24(a0),d0
   11486:	       move.l d0,-(sp)
   11488:	       pea 7 <_start+0x7>
   1148c:	       move.l sp,d0
   1148e:	       addq.l #8,d0
   11490:	       move.l d0,-(sp)
   11492:	       jsr 14906 <getValueType>
   11498:	       lea 12(sp),sp
   1149c:	       tst.w d0
   1149e:	   /-- bne.s 114a4 <builtIn_showCharacter+0x28>
   114a0:	   |   moveq #1,d0
   114a2:	/--|-- bra.s 114c6 <builtIn_showCharacter+0x4a>
	trimStack (&fun -> stack);
   114a4:	|  \-> moveq #24,d0
   114a6:	|      add.l 12(sp),d0
   114aa:	|      move.l d0,-(sp)
   114ac:	|      jsr 1528a <trimStack>
   114b2:	|      addq.l #4,sp
	setShown (TRUE, objectNumber);
   114b4:	|      move.l (sp),d0
   114b6:	|      move.l d0,-(sp)
   114b8:	|      pea 1 <_start+0x1>
   114bc:	|      jsr bd8e <setShown>
   114c2:	|      addq.l #8,sp
	return BR_CONTINUE;
   114c4:	|      moveq #2,d0
}
   114c6:	\----> addq.l #4,sp
   114c8:	       rts

000114ca <builtIn_removeAllCharacters>:

builtIn(removeAllCharacters)
{
	UNUSEDALL
	killSpeechTimers ();
   114ca:	jsr 6334 <killSpeechTimers>
	killMostPeople ();
   114d0:	jsr abc6 <killMostPeople>
	return BR_CONTINUE;
   114d6:	moveq #2,d0
}
   114d8:	rts

000114da <builtIn_setCharacterDrawMode>:

builtIn(setCharacterDrawMode)
{
   114da:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   114dc:	       movea.l 16(sp),a0
   114e0:	       move.l 24(a0),d0
   114e4:	       move.l d0,-(sp)
   114e6:	       pea 1 <_start+0x1>
   114ea:	       move.l sp,d0
   114ec:	       addq.l #8,d0
   114ee:	       move.l d0,-(sp)
   114f0:	       jsr 14906 <getValueType>
   114f6:	       lea 12(sp),sp
   114fa:	       tst.w d0
   114fc:	   /-- bne.s 11502 <builtIn_setCharacterDrawMode+0x28>
   114fe:	   |   moveq #1,d0
   11500:	/--|-- bra.s 1155c <builtIn_setCharacterDrawMode+0x82>
	trimStack (&fun -> stack);
   11502:	|  \-> moveq #24,d0
   11504:	|      add.l 16(sp),d0
   11508:	|      move.l d0,-(sp)
   1150a:	|      jsr 1528a <trimStack>
   11510:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11512:	|      movea.l 16(sp),a0
   11516:	|      move.l 24(a0),d0
   1151a:	|      move.l d0,-(sp)
   1151c:	|      pea 7 <_start+0x7>
   11520:	|      moveq #12,d0
   11522:	|      add.l sp,d0
   11524:	|      move.l d0,-(sp)
   11526:	|      jsr 14906 <getValueType>
   1152c:	|      lea 12(sp),sp
   11530:	|      tst.w d0
   11532:	|  /-- bne.s 11538 <builtIn_setCharacterDrawMode+0x5e>
   11534:	|  |   moveq #1,d0
   11536:	+--|-- bra.s 1155c <builtIn_setCharacterDrawMode+0x82>
	trimStack (&fun -> stack);
   11538:	|  \-> moveq #24,d0
   1153a:	|      add.l 16(sp),d0
   1153e:	|      move.l d0,-(sp)
   11540:	|      jsr 1528a <trimStack>
   11546:	|      addq.l #4,sp
	setDrawMode (di, obj);
   11548:	|      move.l 4(sp),d1
   1154c:	|      move.l (sp),d0
   1154e:	|      move.l d1,-(sp)
   11550:	|      move.l d0,-(sp)
   11552:	|      jsr b6cc <setDrawMode>
   11558:	|      addq.l #8,sp
	return BR_CONTINUE;
   1155a:	|      moveq #2,d0
}
   1155c:	\----> addq.l #8,sp
   1155e:	       rts

00011560 <builtIn_setCharacterTransparency>:

builtIn(setCharacterTransparency)
{
	UNUSEDALL
	KPrintF("setCharacterTransparency: Not implemented on Amiga");
   11560:	pea 19bd6 <graphics.c.1c13408a+0x83>
   11566:	jsr 17366 <KPrintF>
   1156c:	addq.l #4,sp
	return BR_CONTINUE;
   1156e:	moveq #2,d0
}
   11570:	rts

00011572 <builtIn_setCharacterColourise>:

builtIn(setCharacterColourise)
{
	UNUSEDALL
	KPrintF("setCharacterColourise: Currently not implemented on Amiga");
   11572:	pea 19c09 <graphics.c.1c13408a+0xb6>
   11578:	jsr 17366 <KPrintF>
   1157e:	addq.l #4,sp
	if (! getValueType(&r, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
	trimStack (&fun -> stack);
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
	trimStack (&fun -> stack);
	setPersonColourise (obj, r, g, b, mix);*/
	return BR_CONTINUE;
   11580:	moveq #2,d0
}
   11582:	rts

00011584 <builtIn_setScale>:

builtIn(setScale)
{
   11584:	       subq.l #8,sp
	UNUSEDALL
	int val1, val2;
	if (! getValueType(&val2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11586:	       movea.l 16(sp),a0
   1158a:	       move.l 24(a0),d0
   1158e:	       move.l d0,-(sp)
   11590:	       pea 1 <_start+0x1>
   11594:	       move.l sp,d0
   11596:	       addq.l #8,d0
   11598:	       move.l d0,-(sp)
   1159a:	       jsr 14906 <getValueType>
   115a0:	       lea 12(sp),sp
   115a4:	       tst.w d0
   115a6:	   /-- bne.s 115ac <builtIn_setScale+0x28>
   115a8:	   |   moveq #1,d0
   115aa:	/--|-- bra.s 1160e <builtIn_setScale+0x8a>
	trimStack (&fun -> stack);
   115ac:	|  \-> moveq #24,d0
   115ae:	|      add.l 16(sp),d0
   115b2:	|      move.l d0,-(sp)
   115b4:	|      jsr 1528a <trimStack>
   115ba:	|      addq.l #4,sp
	if (! getValueType(&val1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   115bc:	|      movea.l 16(sp),a0
   115c0:	|      move.l 24(a0),d0
   115c4:	|      move.l d0,-(sp)
   115c6:	|      pea 1 <_start+0x1>
   115ca:	|      moveq #12,d0
   115cc:	|      add.l sp,d0
   115ce:	|      move.l d0,-(sp)
   115d0:	|      jsr 14906 <getValueType>
   115d6:	|      lea 12(sp),sp
   115da:	|      tst.w d0
   115dc:	|  /-- bne.s 115e2 <builtIn_setScale+0x5e>
   115de:	|  |   moveq #1,d0
   115e0:	+--|-- bra.s 1160e <builtIn_setScale+0x8a>
	trimStack (&fun -> stack);
   115e2:	|  \-> moveq #24,d0
   115e4:	|      add.l 16(sp),d0
   115e8:	|      move.l d0,-(sp)
   115ea:	|      jsr 1528a <trimStack>
   115f0:	|      addq.l #4,sp
	setScale ((short int) val1, (short int) val2);
   115f2:	|      move.l (sp),d0
   115f4:	|      move.l d0,d0
   115f6:	|      movea.w d0,a1
   115f8:	|      move.l 4(sp),d0
   115fc:	|      move.l d0,d0
   115fe:	|      movea.w d0,a0
   11600:	|      move.l a1,-(sp)
   11602:	|      move.l a0,-(sp)
   11604:	|      jsr bd66 <setScale>
   1160a:	|      addq.l #8,sp
	return BR_CONTINUE;
   1160c:	|      moveq #2,d0
}
   1160e:	\----> addq.l #8,sp
   11610:	       rts

00011612 <builtIn_stopCharacter>:

builtIn(stopCharacter)
{
   11612:	       subq.l #4,sp
	UNUSEDALL
	int obj;
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11614:	       movea.l 12(sp),a0
   11618:	       move.l 24(a0),d0
   1161c:	       move.l d0,-(sp)
   1161e:	       pea 7 <_start+0x7>
   11622:	       move.l sp,d0
   11624:	       addq.l #8,d0
   11626:	       move.l d0,-(sp)
   11628:	       jsr 14906 <getValueType>
   1162e:	       lea 12(sp),sp
   11632:	       tst.w d0
   11634:	   /-- bne.s 1163a <builtIn_stopCharacter+0x28>
   11636:	   |   moveq #1,d0
   11638:	/--|-- bra.s 11672 <builtIn_stopCharacter+0x60>
	trimStack (&fun -> stack);
   1163a:	|  \-> moveq #24,d0
   1163c:	|      add.l 12(sp),d0
   11640:	|      move.l d0,-(sp)
   11642:	|      jsr 1528a <trimStack>
   11648:	|      addq.l #4,sp

	// Return value
	setVariable (&fun -> reg, SVT_INT, stopPerson (obj));
   1164a:	|      move.l (sp),d0
   1164c:	|      move.l d0,-(sp)
   1164e:	|      jsr be9a <stopPerson>
   11654:	|      addq.l #4,sp
   11656:	|      movea.w d0,a0
   11658:	|      moveq #28,d0
   1165a:	|      add.l 12(sp),d0
   1165e:	|      move.l a0,-(sp)
   11660:	|      pea 1 <_start+0x1>
   11664:	|      move.l d0,-(sp)
   11666:	|      jsr 151f8 <setVariable>
   1166c:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11670:	|      moveq #2,d0
}
   11672:	\----> addq.l #4,sp
   11674:	       rts

00011676 <builtIn_pasteCharacter>:
		fixScaleSprite (thisPerson -> x, thisPerson -> y, myAnim -> theSprites -> bank.sprites[abs (fNum)], myAnim -> theSprites -> bank.myPalette, thisPerson, 0, 0, fNum < 0);
		setVariable (&fun -> reg, SVT_INT, 1);
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
	} Todo: Amigize this*/
	KPrintF("Not implemented yet for Amiga");
   11676:	pea 19c43 <graphics.c.1c13408a+0xf0>
   1167c:	jsr 17366 <KPrintF>
   11682:	addq.l #4,sp
	return BR_CONTINUE;
   11684:	moveq #2,d0
}
   11686:	rts

00011688 <builtIn_animate>:

builtIn(animate)
{
   11688:	       subq.l #8,sp
	UNUSEDALL
	int obj;
	struct personaAnimation * pp = getAnimationFromVar (&(fun -> stack -> thisVar));
   1168a:	       movea.l 16(sp),a0
   1168e:	       move.l 24(a0),d0
   11692:	       move.l d0,-(sp)
   11694:	       jsr 14dde <getAnimationFromVar>
   1169a:	       addq.l #4,sp
   1169c:	       move.l d0,4(sp)
	if (pp == NULL) return BR_ERROR;
   116a0:	   /-- bne.s 116a6 <builtIn_animate+0x1e>
   116a2:	   |   moveq #1,d0
   116a4:	/--|-- bra.s 11724 <builtIn_animate+0x9c>
	trimStack (&fun -> stack);
   116a6:	|  \-> moveq #24,d0
   116a8:	|      add.l 16(sp),d0
   116ac:	|      move.l d0,-(sp)
   116ae:	|      jsr 1528a <trimStack>
   116b4:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   116b6:	|      movea.l 16(sp),a0
   116ba:	|      move.l 24(a0),d0
   116be:	|      move.l d0,-(sp)
   116c0:	|      pea 7 <_start+0x7>
   116c4:	|      move.l sp,d0
   116c6:	|      addq.l #8,d0
   116c8:	|      move.l d0,-(sp)
   116ca:	|      jsr 14906 <getValueType>
   116d0:	|      lea 12(sp),sp
   116d4:	|      tst.w d0
   116d6:	|  /-- bne.s 116dc <builtIn_animate+0x54>
   116d8:	|  |   moveq #1,d0
   116da:	+--|-- bra.s 11724 <builtIn_animate+0x9c>
	trimStack (&fun -> stack);
   116dc:	|  \-> moveq #24,d0
   116de:	|      add.l 16(sp),d0
   116e2:	|      move.l d0,-(sp)
   116e4:	|      jsr 1528a <trimStack>
   116ea:	|      addq.l #4,sp
	animatePerson (obj, pp);
   116ec:	|      move.l (sp),d0
   116ee:	|      move.l 4(sp),-(sp)
   116f2:	|      move.l d0,-(sp)
   116f4:	|      jsr 95ca <animatePerson>
   116fa:	|      addq.l #8,sp
	setVariable (&fun -> reg, SVT_INT, timeForAnim (pp));
   116fc:	|      move.l 4(sp),-(sp)
   11700:	|      jsr beee <timeForAnim>
   11706:	|      addq.l #4,sp
   11708:	|      move.l d0,d1
   1170a:	|      moveq #28,d0
   1170c:	|      add.l 16(sp),d0
   11710:	|      move.l d1,-(sp)
   11712:	|      pea 1 <_start+0x1>
   11716:	|      move.l d0,-(sp)
   11718:	|      jsr 151f8 <setVariable>
   1171e:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11722:	|      moveq #2,d0
}
   11724:	\----> addq.l #8,sp
   11726:	       rts

00011728 <builtIn_setCostume>:

builtIn(setCostume)
{
   11728:	       subq.l #8,sp
	UNUSEDALL
	int obj;
	struct persona * pp = getCostumeFromVar(&(fun -> stack -> thisVar));
   1172a:	       movea.l 16(sp),a0
   1172e:	       move.l 24(a0),d0
   11732:	       move.l d0,-(sp)
   11734:	       jsr 145b2 <getCostumeFromVar>
   1173a:	       addq.l #4,sp
   1173c:	       move.l d0,4(sp)
	if (pp == NULL) return BR_ERROR;
   11740:	   /-- bne.s 11746 <builtIn_setCostume+0x1e>
   11742:	   |   moveq #1,d0
   11744:	/--|-- bra.s 1179e <builtIn_setCostume+0x76>
	trimStack (&fun -> stack);
   11746:	|  \-> moveq #24,d0
   11748:	|      add.l 16(sp),d0
   1174c:	|      move.l d0,-(sp)
   1174e:	|      jsr 1528a <trimStack>
   11754:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11756:	|      movea.l 16(sp),a0
   1175a:	|      move.l 24(a0),d0
   1175e:	|      move.l d0,-(sp)
   11760:	|      pea 7 <_start+0x7>
   11764:	|      move.l sp,d0
   11766:	|      addq.l #8,d0
   11768:	|      move.l d0,-(sp)
   1176a:	|      jsr 14906 <getValueType>
   11770:	|      lea 12(sp),sp
   11774:	|      tst.w d0
   11776:	|  /-- bne.s 1177c <builtIn_setCostume+0x54>
   11778:	|  |   moveq #1,d0
   1177a:	+--|-- bra.s 1179e <builtIn_setCostume+0x76>
	trimStack (&fun -> stack);
   1177c:	|  \-> moveq #24,d0
   1177e:	|      add.l 16(sp),d0
   11782:	|      move.l d0,-(sp)
   11784:	|      jsr 1528a <trimStack>
   1178a:	|      addq.l #4,sp
	animatePersonUsingPersona(obj, pp);
   1178c:	|      move.l (sp),d0
   1178e:	|      move.l 4(sp),-(sp)
   11792:	|      move.l d0,-(sp)
   11794:	|      jsr 9614 <animatePersonUsingPersona>
   1179a:	|      addq.l #8,sp
	return BR_CONTINUE;
   1179c:	|      moveq #2,d0
}
   1179e:	\----> addq.l #8,sp
   117a0:	       rts

000117a2 <builtIn_floatCharacter>:

builtIn(floatCharacter)
{
   117a2:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   117a4:	       movea.l 16(sp),a0
   117a8:	       move.l 24(a0),d0
   117ac:	       move.l d0,-(sp)
   117ae:	       pea 1 <_start+0x1>
   117b2:	       move.l sp,d0
   117b4:	       addq.l #8,d0
   117b6:	       move.l d0,-(sp)
   117b8:	       jsr 14906 <getValueType>
   117be:	       lea 12(sp),sp
   117c2:	       tst.w d0
   117c4:	   /-- bne.s 117ca <builtIn_floatCharacter+0x28>
   117c6:	   |   moveq #1,d0
   117c8:	/--|-- bra.s 1183e <builtIn_floatCharacter+0x9c>
	trimStack (&fun -> stack);
   117ca:	|  \-> moveq #24,d0
   117cc:	|      add.l 16(sp),d0
   117d0:	|      move.l d0,-(sp)
   117d2:	|      jsr 1528a <trimStack>
   117d8:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   117da:	|      movea.l 16(sp),a0
   117de:	|      move.l 24(a0),d0
   117e2:	|      move.l d0,-(sp)
   117e4:	|      pea 7 <_start+0x7>
   117e8:	|      moveq #12,d0
   117ea:	|      add.l sp,d0
   117ec:	|      move.l d0,-(sp)
   117ee:	|      jsr 14906 <getValueType>
   117f4:	|      lea 12(sp),sp
   117f8:	|      tst.w d0
   117fa:	|  /-- bne.s 11800 <builtIn_floatCharacter+0x5e>
   117fc:	|  |   moveq #1,d0
   117fe:	+--|-- bra.s 1183e <builtIn_floatCharacter+0x9c>
	trimStack (&fun -> stack);
   11800:	|  \-> moveq #24,d0
   11802:	|      add.l 16(sp),d0
   11806:	|      move.l d0,-(sp)
   11808:	|      jsr 1528a <trimStack>
   1180e:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, floatCharacter (di, obj));
   11810:	|      move.l 4(sp),d1
   11814:	|      move.l (sp),d0
   11816:	|      move.l d1,-(sp)
   11818:	|      move.l d0,-(sp)
   1181a:	|      jsr a788 <floatCharacter>
   11820:	|      addq.l #8,sp
   11822:	|      movea.w d0,a0
   11824:	|      moveq #28,d0
   11826:	|      add.l 16(sp),d0
   1182a:	|      move.l a0,-(sp)
   1182c:	|      pea 1 <_start+0x1>
   11830:	|      move.l d0,-(sp)
   11832:	|      jsr 151f8 <setVariable>
   11838:	|      lea 12(sp),sp
	return BR_CONTINUE;
   1183c:	|      moveq #2,d0
}
   1183e:	\----> addq.l #8,sp
   11840:	       rts

00011842 <builtIn_setCharacterWalkSpeed>:

builtIn(setCharacterWalkSpeed)
{
   11842:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11844:	       movea.l 16(sp),a0
   11848:	       move.l 24(a0),d0
   1184c:	       move.l d0,-(sp)
   1184e:	       pea 1 <_start+0x1>
   11852:	       move.l sp,d0
   11854:	       addq.l #8,d0
   11856:	       move.l d0,-(sp)
   11858:	       jsr 14906 <getValueType>
   1185e:	       lea 12(sp),sp
   11862:	       tst.w d0
   11864:	   /-- bne.s 1186a <builtIn_setCharacterWalkSpeed+0x28>
   11866:	   |   moveq #1,d0
   11868:	/--|-- bra.s 118de <builtIn_setCharacterWalkSpeed+0x9c>
	trimStack (&fun -> stack);
   1186a:	|  \-> moveq #24,d0
   1186c:	|      add.l 16(sp),d0
   11870:	|      move.l d0,-(sp)
   11872:	|      jsr 1528a <trimStack>
   11878:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1187a:	|      movea.l 16(sp),a0
   1187e:	|      move.l 24(a0),d0
   11882:	|      move.l d0,-(sp)
   11884:	|      pea 7 <_start+0x7>
   11888:	|      moveq #12,d0
   1188a:	|      add.l sp,d0
   1188c:	|      move.l d0,-(sp)
   1188e:	|      jsr 14906 <getValueType>
   11894:	|      lea 12(sp),sp
   11898:	|      tst.w d0
   1189a:	|  /-- bne.s 118a0 <builtIn_setCharacterWalkSpeed+0x5e>
   1189c:	|  |   moveq #1,d0
   1189e:	+--|-- bra.s 118de <builtIn_setCharacterWalkSpeed+0x9c>
	trimStack (&fun -> stack);
   118a0:	|  \-> moveq #24,d0
   118a2:	|      add.l 16(sp),d0
   118a6:	|      move.l d0,-(sp)
   118a8:	|      jsr 1528a <trimStack>
   118ae:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, setCharacterWalkSpeed (di, obj));
   118b0:	|      move.l 4(sp),d1
   118b4:	|      move.l (sp),d0
   118b6:	|      move.l d1,-(sp)
   118b8:	|      move.l d0,-(sp)
   118ba:	|      jsr bd02 <setCharacterWalkSpeed>
   118c0:	|      addq.l #8,sp
   118c2:	|      movea.w d0,a0
   118c4:	|      moveq #28,d0
   118c6:	|      add.l 16(sp),d0
   118ca:	|      move.l a0,-(sp)
   118cc:	|      pea 1 <_start+0x1>
   118d0:	|      move.l d0,-(sp)
   118d2:	|      jsr 151f8 <setVariable>
   118d8:	|      lea 12(sp),sp
	return BR_CONTINUE;
   118dc:	|      moveq #2,d0
}
   118de:	\----> addq.l #8,sp
   118e0:	       rts

000118e2 <builtIn_turnCharacter>:

builtIn(turnCharacter)
{
   118e2:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   118e4:	       movea.l 16(sp),a0
   118e8:	       move.l 24(a0),d0
   118ec:	       move.l d0,-(sp)
   118ee:	       pea 1 <_start+0x1>
   118f2:	       move.l sp,d0
   118f4:	       addq.l #8,d0
   118f6:	       move.l d0,-(sp)
   118f8:	       jsr 14906 <getValueType>
   118fe:	       lea 12(sp),sp
   11902:	       tst.w d0
   11904:	   /-- bne.s 1190a <builtIn_turnCharacter+0x28>
   11906:	   |   moveq #1,d0
   11908:	/--|-- bra.s 1197e <builtIn_turnCharacter+0x9c>
	trimStack (&fun -> stack);
   1190a:	|  \-> moveq #24,d0
   1190c:	|      add.l 16(sp),d0
   11910:	|      move.l d0,-(sp)
   11912:	|      jsr 1528a <trimStack>
   11918:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1191a:	|      movea.l 16(sp),a0
   1191e:	|      move.l 24(a0),d0
   11922:	|      move.l d0,-(sp)
   11924:	|      pea 7 <_start+0x7>
   11928:	|      moveq #12,d0
   1192a:	|      add.l sp,d0
   1192c:	|      move.l d0,-(sp)
   1192e:	|      jsr 14906 <getValueType>
   11934:	|      lea 12(sp),sp
   11938:	|      tst.w d0
   1193a:	|  /-- bne.s 11940 <builtIn_turnCharacter+0x5e>
   1193c:	|  |   moveq #1,d0
   1193e:	+--|-- bra.s 1197e <builtIn_turnCharacter+0x9c>
	trimStack (&fun -> stack);
   11940:	|  \-> moveq #24,d0
   11942:	|      add.l 16(sp),d0
   11946:	|      move.l d0,-(sp)
   11948:	|      jsr 1528a <trimStack>
   1194e:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, turnPersonToFace (obj, di));
   11950:	|      move.l (sp),d1
   11952:	|      move.l 4(sp),d0
   11956:	|      move.l d1,-(sp)
   11958:	|      move.l d0,-(sp)
   1195a:	|      jsr bfa6 <turnPersonToFace>
   11960:	|      addq.l #8,sp
   11962:	|      movea.w d0,a0
   11964:	|      moveq #28,d0
   11966:	|      add.l 16(sp),d0
   1196a:	|      move.l a0,-(sp)
   1196c:	|      pea 1 <_start+0x1>
   11970:	|      move.l d0,-(sp)
   11972:	|      jsr 151f8 <setVariable>
   11978:	|      lea 12(sp),sp
	return BR_CONTINUE;
   1197c:	|      moveq #2,d0
}
   1197e:	\----> addq.l #8,sp
   11980:	       rts

00011982 <builtIn_setCharacterExtra>:

builtIn(setCharacterExtra)
{
   11982:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11984:	       movea.l 16(sp),a0
   11988:	       move.l 24(a0),d0
   1198c:	       move.l d0,-(sp)
   1198e:	       pea 1 <_start+0x1>
   11992:	       move.l sp,d0
   11994:	       addq.l #8,d0
   11996:	       move.l d0,-(sp)
   11998:	       jsr 14906 <getValueType>
   1199e:	       lea 12(sp),sp
   119a2:	       tst.w d0
   119a4:	   /-- bne.s 119aa <builtIn_setCharacterExtra+0x28>
   119a6:	   |   moveq #1,d0
   119a8:	/--|-- bra.s 11a1e <builtIn_setCharacterExtra+0x9c>
	trimStack (&fun -> stack);
   119aa:	|  \-> moveq #24,d0
   119ac:	|      add.l 16(sp),d0
   119b0:	|      move.l d0,-(sp)
   119b2:	|      jsr 1528a <trimStack>
   119b8:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   119ba:	|      movea.l 16(sp),a0
   119be:	|      move.l 24(a0),d0
   119c2:	|      move.l d0,-(sp)
   119c4:	|      pea 7 <_start+0x7>
   119c8:	|      moveq #12,d0
   119ca:	|      add.l sp,d0
   119cc:	|      move.l d0,-(sp)
   119ce:	|      jsr 14906 <getValueType>
   119d4:	|      lea 12(sp),sp
   119d8:	|      tst.w d0
   119da:	|  /-- bne.s 119e0 <builtIn_setCharacterExtra+0x5e>
   119dc:	|  |   moveq #1,d0
   119de:	+--|-- bra.s 11a1e <builtIn_setCharacterExtra+0x9c>
	trimStack (&fun -> stack);
   119e0:	|  \-> moveq #24,d0
   119e2:	|      add.l 16(sp),d0
   119e6:	|      move.l d0,-(sp)
   119e8:	|      jsr 1528a <trimStack>
   119ee:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, setPersonExtra (obj, di));
   119f0:	|      move.l (sp),d1
   119f2:	|      move.l 4(sp),d0
   119f6:	|      move.l d1,-(sp)
   119f8:	|      move.l d0,-(sp)
   119fa:	|      jsr bd30 <setPersonExtra>
   11a00:	|      addq.l #8,sp
   11a02:	|      movea.w d0,a0
   11a04:	|      moveq #28,d0
   11a06:	|      add.l 16(sp),d0
   11a0a:	|      move.l a0,-(sp)
   11a0c:	|      pea 1 <_start+0x1>
   11a10:	|      move.l d0,-(sp)
   11a12:	|      jsr 151f8 <setVariable>
   11a18:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11a1c:	|      moveq #2,d0
}
   11a1e:	\----> addq.l #8,sp
   11a20:	       rts

00011a22 <builtIn_removeCharacter>:

builtIn(removeCharacter)
{	
   11a22:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11a24:	       movea.l 12(sp),a0
   11a28:	       move.l 24(a0),d0
   11a2c:	       move.l d0,-(sp)
   11a2e:	       pea 7 <_start+0x7>
   11a32:	       move.l sp,d0
   11a34:	       addq.l #8,d0
   11a36:	       move.l d0,-(sp)
   11a38:	       jsr 14906 <getValueType>
   11a3e:	       lea 12(sp),sp
   11a42:	       tst.w d0
   11a44:	   /-- bne.s 11a4a <builtIn_removeCharacter+0x28>
   11a46:	   |   moveq #1,d0
   11a48:	/--|-- bra.s 11a68 <builtIn_removeCharacter+0x46>
	trimStack (&fun -> stack);
   11a4a:	|  \-> moveq #24,d0
   11a4c:	|      add.l 12(sp),d0
   11a50:	|      move.l d0,-(sp)
   11a52:	|      jsr 1528a <trimStack>
   11a58:	|      addq.l #4,sp
	removeOneCharacter (objectNumber);
   11a5a:	|      move.l (sp),d0
   11a5c:	|      move.l d0,-(sp)
   11a5e:	|      jsr af30 <removeOneCharacter>
   11a64:	|      addq.l #4,sp
	return BR_CONTINUE;
   11a66:	|      moveq #2,d0
}
   11a68:	\----> addq.l #4,sp
   11a6a:	       rts

00011a6c <moveChr>:

static enum builtReturn moveChr(int numParams, struct loadedFunction * fun, BOOL force, BOOL immediate)
{
   11a6c:	                lea -28(sp),sp
   11a70:	                move.l d2,-(sp)
   11a72:	                move.l 44(sp),d1
   11a76:	                move.l 48(sp),d0
   11a7a:	                move.w d1,d1
   11a7c:	                move.w d1,6(sp)
   11a80:	                move.w d0,d0
   11a82:	                move.w d0,4(sp)
	switch (numParams) {
   11a86:	                moveq #2,d0
   11a88:	                cmp.l 36(sp),d0
   11a8c:	      /-------- beq.w 11bce <moveChr+0x162>
   11a90:	      |         moveq #3,d0
   11a92:	      |         cmp.l 36(sp),d0
   11a96:	/-----|-------- bne.w 11d02 <moveChr+0x296>
		case 3:
		{
			int x, y, objectNumber;

			if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11a9a:	|     |         movea.l 40(sp),a0
   11a9e:	|     |         move.l 24(a0),d0
   11aa2:	|     |         move.l d0,-(sp)
   11aa4:	|     |         pea 1 <_start+0x1>
   11aa8:	|     |         lea 20(sp),a0
   11aac:	|     |         move.l a0,-(sp)
   11aae:	|     |         jsr 14906 <getValueType>
   11ab4:	|     |         lea 12(sp),sp
   11ab8:	|     |         tst.w d0
   11aba:	|     |     /-- bne.s 11ac2 <moveChr+0x56>
   11abc:	|     |     |   moveq #1,d0
   11abe:	|  /--|-----|-- bra.w 11d12 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   11ac2:	|  |  |     \-> moveq #24,d0
   11ac4:	|  |  |         add.l 40(sp),d0
   11ac8:	|  |  |         move.l d0,-(sp)
   11aca:	|  |  |         jsr 1528a <trimStack>
   11ad0:	|  |  |         addq.l #4,sp
			if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11ad2:	|  |  |         movea.l 40(sp),a0
   11ad6:	|  |  |         move.l 24(a0),d0
   11ada:	|  |  |         move.l d0,-(sp)
   11adc:	|  |  |         pea 1 <_start+0x1>
   11ae0:	|  |  |         lea 24(sp),a0
   11ae4:	|  |  |         move.l a0,-(sp)
   11ae6:	|  |  |         jsr 14906 <getValueType>
   11aec:	|  |  |         lea 12(sp),sp
   11af0:	|  |  |         tst.w d0
   11af2:	|  |  |     /-- bne.s 11afa <moveChr+0x8e>
   11af4:	|  |  |     |   moveq #1,d0
   11af6:	|  +--|-----|-- bra.w 11d12 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   11afa:	|  |  |     \-> moveq #24,d0
   11afc:	|  |  |         add.l 40(sp),d0
   11b00:	|  |  |         move.l d0,-(sp)
   11b02:	|  |  |         jsr 1528a <trimStack>
   11b08:	|  |  |         addq.l #4,sp
			if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11b0a:	|  |  |         movea.l 40(sp),a0
   11b0e:	|  |  |         move.l 24(a0),d0
   11b12:	|  |  |         move.l d0,-(sp)
   11b14:	|  |  |         pea 7 <_start+0x7>
   11b18:	|  |  |         lea 16(sp),a0
   11b1c:	|  |  |         move.l a0,-(sp)
   11b1e:	|  |  |         jsr 14906 <getValueType>
   11b24:	|  |  |         lea 12(sp),sp
   11b28:	|  |  |         tst.w d0
   11b2a:	|  |  |     /-- bne.s 11b32 <moveChr+0xc6>
   11b2c:	|  |  |     |   moveq #1,d0
   11b2e:	|  +--|-----|-- bra.w 11d12 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   11b32:	|  |  |     \-> moveq #24,d0
   11b34:	|  |  |         add.l 40(sp),d0
   11b38:	|  |  |         move.l d0,-(sp)
   11b3a:	|  |  |         jsr 1528a <trimStack>
   11b40:	|  |  |         addq.l #4,sp

			if (force) {
   11b42:	|  |  |         tst.w 6(sp)
   11b46:	|  |  |     /-- beq.s 11b76 <moveChr+0x10a>
				if (forceWalkingPerson (x, y, objectNumber, fun, -1)) return BR_PAUSE;
   11b48:	|  |  |     |   movea.l 8(sp),a0
   11b4c:	|  |  |     |   move.l 12(sp),d1
   11b50:	|  |  |     |   move.l 16(sp),d0
   11b54:	|  |  |     |   pea ffffffff <gcc8_c_support.c.1fed348d+0xfffb4e13>
   11b58:	|  |  |     |   move.l 44(sp),-(sp)
   11b5c:	|  |  |     |   move.l a0,-(sp)
   11b5e:	|  |  |     |   move.l d1,-(sp)
   11b60:	|  |  |     |   move.l d0,-(sp)
   11b62:	|  |  |     |   jsr a7ac <forceWalkingPerson>
   11b68:	|  |  |     |   lea 20(sp),sp
   11b6c:	|  |  |     |   tst.w d0
   11b6e:	|  |  |  /--|-- beq.s 11bc8 <moveChr+0x15c>
   11b70:	|  |  |  |  |   moveq #3,d0
   11b72:	|  +--|--|--|-- bra.w 11d12 <moveChr+0x2a6>
			} else if (immediate) {
   11b76:	|  |  |  |  \-> tst.w 4(sp)
   11b7a:	|  |  |  |  /-- beq.s 11b9a <moveChr+0x12e>
				jumpPerson (x, y, objectNumber);
   11b7c:	|  |  |  |  |   movea.l 8(sp),a0
   11b80:	|  |  |  |  |   move.l 12(sp),d1
   11b84:	|  |  |  |  |   move.l 16(sp),d0
   11b88:	|  |  |  |  |   move.l a0,-(sp)
   11b8a:	|  |  |  |  |   move.l d1,-(sp)
   11b8c:	|  |  |  |  |   move.l d0,-(sp)
   11b8e:	|  |  |  |  |   jsr aab4 <jumpPerson>
   11b94:	|  |  |  |  |   lea 12(sp),sp
   11b98:	|  |  |  +--|-- bra.s 11bc8 <moveChr+0x15c>
			} else {
				if (makeWalkingPerson (x, y, objectNumber, fun, -1)) return BR_PAUSE;
   11b9a:	|  |  |  |  \-> movea.l 8(sp),a0
   11b9e:	|  |  |  |      move.l 12(sp),d1
   11ba2:	|  |  |  |      move.l 16(sp),d0
   11ba6:	|  |  |  |      pea ffffffff <gcc8_c_support.c.1fed348d+0xfffb4e13>
   11baa:	|  |  |  |      move.l 44(sp),-(sp)
   11bae:	|  |  |  |      move.l a0,-(sp)
   11bb0:	|  |  |  |      move.l d1,-(sp)
   11bb2:	|  |  |  |      move.l d0,-(sp)
   11bb4:	|  |  |  |      jsr ac84 <makeWalkingPerson>
   11bba:	|  |  |  |      lea 20(sp),sp
   11bbe:	|  |  |  |      tst.w d0
   11bc0:	|  |  |  +----- beq.s 11bc8 <moveChr+0x15c>
   11bc2:	|  |  |  |      moveq #3,d0
   11bc4:	|  +--|--|----- bra.w 11d12 <moveChr+0x2a6>
			}
			return BR_CONTINUE;
   11bc8:	|  |  |  \----> moveq #2,d0
   11bca:	|  +--|-------- bra.w 11d12 <moveChr+0x2a6>
		case 2:
		{
			int toObj, objectNumber;
			struct screenRegion * reggie;

			if (! getValueType(&toObj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11bce:	|  |  \-------> movea.l 40(sp),a0
   11bd2:	|  |            move.l 24(a0),d0
   11bd6:	|  |            move.l d0,-(sp)
   11bd8:	|  |            pea 7 <_start+0x7>
   11bdc:	|  |            moveq #32,d0
   11bde:	|  |            add.l sp,d0
   11be0:	|  |            move.l d0,-(sp)
   11be2:	|  |            jsr 14906 <getValueType>
   11be8:	|  |            lea 12(sp),sp
   11bec:	|  |            tst.w d0
   11bee:	|  |        /-- bne.s 11bf6 <moveChr+0x18a>
   11bf0:	|  |        |   moveq #1,d0
   11bf2:	|  +--------|-- bra.w 11d12 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   11bf6:	|  |        \-> moveq #24,d0
   11bf8:	|  |            add.l 40(sp),d0
   11bfc:	|  |            move.l d0,-(sp)
   11bfe:	|  |            jsr 1528a <trimStack>
   11c04:	|  |            addq.l #4,sp
			if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11c06:	|  |            movea.l 40(sp),a0
   11c0a:	|  |            move.l 24(a0),d0
   11c0e:	|  |            move.l d0,-(sp)
   11c10:	|  |            pea 7 <_start+0x7>
   11c14:	|  |            lea 28(sp),a0
   11c18:	|  |            move.l a0,-(sp)
   11c1a:	|  |            jsr 14906 <getValueType>
   11c20:	|  |            lea 12(sp),sp
   11c24:	|  |            tst.w d0
   11c26:	|  |        /-- bne.s 11c2e <moveChr+0x1c2>
   11c28:	|  |        |   moveq #1,d0
   11c2a:	|  +--------|-- bra.w 11d12 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   11c2e:	|  |        \-> moveq #24,d0
   11c30:	|  |            add.l 40(sp),d0
   11c34:	|  |            move.l d0,-(sp)
   11c36:	|  |            jsr 1528a <trimStack>
   11c3c:	|  |            addq.l #4,sp
			reggie = getRegionForObject (toObj);
   11c3e:	|  |            move.l 24(sp),d0
   11c42:	|  |            move.l d0,-(sp)
   11c44:	|  |            jsr 15b48 <getRegionForObject>
   11c4a:	|  |            addq.l #4,sp
   11c4c:	|  |            move.l d0,28(sp)
			if (reggie == NULL) return BR_CONTINUE;
   11c50:	|  |        /-- bne.s 11c58 <moveChr+0x1ec>
   11c52:	|  |        |   moveq #2,d0
   11c54:	|  +--------|-- bra.w 11d12 <moveChr+0x2a6>

			if (force)
   11c58:	|  |        \-> tst.w 6(sp)
   11c5c:	|  |        /-- beq.s 11c98 <moveChr+0x22c>
			{
				if (forceWalkingPerson (reggie -> sX, reggie -> sY,	objectNumber, fun, reggie -> di)) return BR_PAUSE;
   11c5e:	|  |        |   movea.l 28(sp),a0
   11c62:	|  |        |   move.l 24(a0),d2
   11c66:	|  |        |   movea.l 20(sp),a1
   11c6a:	|  |        |   movea.l 28(sp),a0
   11c6e:	|  |        |   move.l 20(a0),d1
   11c72:	|  |        |   movea.l 28(sp),a0
   11c76:	|  |        |   move.l 16(a0),d0
   11c7a:	|  |        |   move.l d2,-(sp)
   11c7c:	|  |        |   move.l 44(sp),-(sp)
   11c80:	|  |        |   move.l a1,-(sp)
   11c82:	|  |        |   move.l d1,-(sp)
   11c84:	|  |        |   move.l d0,-(sp)
   11c86:	|  |        |   jsr a7ac <forceWalkingPerson>
   11c8c:	|  |        |   lea 20(sp),sp
   11c90:	|  |        |   tst.w d0
   11c92:	|  |     /--|-- beq.s 11cfe <moveChr+0x292>
   11c94:	|  |     |  |   moveq #3,d0
   11c96:	|  +-----|--|-- bra.s 11d12 <moveChr+0x2a6>
			}
			else if (immediate)
   11c98:	|  |     |  \-> tst.w 4(sp)
   11c9c:	|  |     |  /-- beq.s 11cc4 <moveChr+0x258>
			{
				jumpPerson (reggie -> sX, reggie -> sY,	objectNumber);
   11c9e:	|  |     |  |   movea.l 20(sp),a1
   11ca2:	|  |     |  |   movea.l 28(sp),a0
   11ca6:	|  |     |  |   move.l 20(a0),d1
   11caa:	|  |     |  |   movea.l 28(sp),a0
   11cae:	|  |     |  |   move.l 16(a0),d0
   11cb2:	|  |     |  |   move.l a1,-(sp)
   11cb4:	|  |     |  |   move.l d1,-(sp)
   11cb6:	|  |     |  |   move.l d0,-(sp)
   11cb8:	|  |     |  |   jsr aab4 <jumpPerson>
   11cbe:	|  |     |  |   lea 12(sp),sp
   11cc2:	|  |     +--|-- bra.s 11cfe <moveChr+0x292>
			}
			else
			{
				if (makeWalkingPerson (reggie -> sX, reggie -> sY, objectNumber, fun, reggie -> di)) return BR_PAUSE;
   11cc4:	|  |     |  \-> movea.l 28(sp),a0
   11cc8:	|  |     |      move.l 24(a0),d2
   11ccc:	|  |     |      movea.l 20(sp),a1
   11cd0:	|  |     |      movea.l 28(sp),a0
   11cd4:	|  |     |      move.l 20(a0),d1
   11cd8:	|  |     |      movea.l 28(sp),a0
   11cdc:	|  |     |      move.l 16(a0),d0
   11ce0:	|  |     |      move.l d2,-(sp)
   11ce2:	|  |     |      move.l 44(sp),-(sp)
   11ce6:	|  |     |      move.l a1,-(sp)
   11ce8:	|  |     |      move.l d1,-(sp)
   11cea:	|  |     |      move.l d0,-(sp)
   11cec:	|  |     |      jsr ac84 <makeWalkingPerson>
   11cf2:	|  |     |      lea 20(sp),sp
   11cf6:	|  |     |      tst.w d0
   11cf8:	|  |     +----- beq.s 11cfe <moveChr+0x292>
   11cfa:	|  |     |      moveq #3,d0
   11cfc:	|  +-----|----- bra.s 11d12 <moveChr+0x2a6>
			}
			return BR_CONTINUE;
   11cfe:	|  |     \----> moveq #2,d0
   11d00:	|  +----------- bra.s 11d12 <moveChr+0x2a6>
		}

		default:
			KPrintF ("Built-in function must have either 2 or 3 parameters.");
   11d02:	\--|----------> pea 19c61 <graphics.c.1c13408a+0x10e>
   11d08:	   |            jsr 17366 <KPrintF>
   11d0e:	   |            addq.l #4,sp
			return BR_ERROR;
   11d10:	   |            moveq #1,d0
	}
}
   11d12:	   \----------> move.l (sp)+,d2
   11d14:	                lea 28(sp),sp
   11d18:	                rts

00011d1a <builtIn_moveCharacter>:

builtIn(moveCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, FALSE, FALSE);
   11d1a:	clr.l -(sp)
   11d1c:	clr.l -(sp)
   11d1e:	move.l 16(sp),-(sp)
   11d22:	move.l 16(sp),-(sp)
   11d26:	jsr 11a6c <moveChr>
   11d2c:	lea 16(sp),sp
}
   11d30:	rts

00011d32 <builtIn_forceCharacter>:

builtIn(forceCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, TRUE, FALSE);
   11d32:	clr.l -(sp)
   11d34:	pea 1 <_start+0x1>
   11d38:	move.l 16(sp),-(sp)
   11d3c:	move.l 16(sp),-(sp)
   11d40:	jsr 11a6c <moveChr>
   11d46:	lea 16(sp),sp
}
   11d4a:	rts

00011d4c <builtIn_jumpCharacter>:

builtIn(jumpCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, FALSE, TRUE);
   11d4c:	pea 1 <_start+0x1>
   11d50:	clr.l -(sp)
   11d52:	move.l 16(sp),-(sp)
   11d56:	move.l 16(sp),-(sp)
   11d5a:	jsr 11a6c <moveChr>
   11d60:	lea 16(sp),sp
}
   11d64:	rts

00011d66 <builtIn_clearStatus>:

builtIn(clearStatus)
{
	UNUSEDALL
	clearStatusBar ();
   11d66:	jsr 7a2e <clearStatusBar>
	return BR_CONTINUE;
   11d6c:	moveq #2,d0
}
   11d6e:	rts

00011d70 <builtIn_removeLastStatus>:

builtIn(removeLastStatus)
{
	UNUSEDALL
	killLastStatus ();
   11d70:	jsr 7ad6 <killLastStatus>
	return BR_CONTINUE;
   11d76:	moveq #2,d0
}
   11d78:	rts

00011d7a <builtIn_addStatus>:

builtIn(addStatus)
{
	UNUSEDALL
	addStatusBar ();
   11d7a:	jsr 79c4 <addStatusBar>
	return BR_CONTINUE;
   11d80:	moveq #2,d0
}
   11d82:	rts

00011d84 <builtIn_statusText>:

builtIn(statusText)
{
   11d84:	       subq.l #8,sp
   11d86:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar(&(fun->stack->thisVar));
   11d88:	       movea.l 20(sp),a0
   11d8c:	       move.l 24(a0),d0
   11d90:	       move.l d0,-(sp)
   11d92:	       jsr 14edc <getTextFromAnyVar>
   11d98:	       addq.l #4,sp
   11d9a:	       move.l d0,8(sp)
	if (!newText) return BR_ERROR;
   11d9e:	   /-- bne.s 11da4 <builtIn_statusText+0x20>
   11da0:	   |   moveq #1,d0
   11da2:	/--|-- bra.s 11dd8 <builtIn_statusText+0x54>
	trimStack(&fun->stack);
   11da4:	|  \-> moveq #24,d0
   11da6:	|      add.l 20(sp),d0
   11daa:	|      move.l d0,-(sp)
   11dac:	|      jsr 1528a <trimStack>
   11db2:	|      addq.l #4,sp
	setStatusBar(newText);
   11db4:	|      move.l 8(sp),-(sp)
   11db8:	|      jsr 7d56 <setStatusBar>
   11dbe:	|      addq.l #4,sp
	FreeVec(newText);
   11dc0:	|      move.l 8(sp),4(sp)
   11dc6:	|      move.l 1ca82 <SysBase>,d0
   11dcc:	|      movea.l d0,a6
   11dce:	|      movea.l 4(sp),a1
   11dd2:	|      jsr -690(a6)
	return BR_CONTINUE;
   11dd6:	|      moveq #2,d0
}
   11dd8:	\----> movea.l (sp)+,a6
   11dda:	       addq.l #8,sp
   11ddc:	       rts

00011dde <builtIn_lightStatus>:

builtIn(lightStatus)
{
   11dde:	       subq.l #4,sp
	UNUSEDALL
	int val;
	if (! getValueType(&val, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11de0:	       movea.l 12(sp),a0
   11de4:	       move.l 24(a0),d0
   11de8:	       move.l d0,-(sp)
   11dea:	       pea 1 <_start+0x1>
   11dee:	       move.l sp,d0
   11df0:	       addq.l #8,d0
   11df2:	       move.l d0,-(sp)
   11df4:	       jsr 14906 <getValueType>
   11dfa:	       lea 12(sp),sp
   11dfe:	       tst.w d0
   11e00:	   /-- bne.s 11e06 <builtIn_lightStatus+0x28>
   11e02:	   |   moveq #1,d0
   11e04:	/--|-- bra.s 11e24 <builtIn_lightStatus+0x46>
	trimStack (&fun -> stack);
   11e06:	|  \-> moveq #24,d0
   11e08:	|      add.l 12(sp),d0
   11e0c:	|      move.l d0,-(sp)
   11e0e:	|      jsr 1528a <trimStack>
   11e14:	|      addq.l #4,sp
	setLitStatus (val);
   11e16:	|      move.l (sp),d0
   11e18:	|      move.l d0,-(sp)
   11e1a:	|      jsr 7d46 <setLitStatus>
   11e20:	|      addq.l #4,sp
	return BR_CONTINUE;
   11e22:	|      moveq #2,d0
}
   11e24:	\----> addq.l #4,sp
   11e26:	       rts

00011e28 <builtIn_positionStatus>:

builtIn(positionStatus)
{
   11e28:	       subq.l #8,sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11e2a:	       movea.l 16(sp),a0
   11e2e:	       move.l 24(a0),d0
   11e32:	       move.l d0,-(sp)
   11e34:	       pea 1 <_start+0x1>
   11e38:	       move.l sp,d0
   11e3a:	       addq.l #8,d0
   11e3c:	       move.l d0,-(sp)
   11e3e:	       jsr 14906 <getValueType>
   11e44:	       lea 12(sp),sp
   11e48:	       tst.w d0
   11e4a:	   /-- bne.s 11e50 <builtIn_positionStatus+0x28>
   11e4c:	   |   moveq #1,d0
   11e4e:	/--|-- bra.s 11eaa <builtIn_positionStatus+0x82>
	trimStack (&fun -> stack);
   11e50:	|  \-> moveq #24,d0
   11e52:	|      add.l 16(sp),d0
   11e56:	|      move.l d0,-(sp)
   11e58:	|      jsr 1528a <trimStack>
   11e5e:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11e60:	|      movea.l 16(sp),a0
   11e64:	|      move.l 24(a0),d0
   11e68:	|      move.l d0,-(sp)
   11e6a:	|      pea 1 <_start+0x1>
   11e6e:	|      moveq #12,d0
   11e70:	|      add.l sp,d0
   11e72:	|      move.l d0,-(sp)
   11e74:	|      jsr 14906 <getValueType>
   11e7a:	|      lea 12(sp),sp
   11e7e:	|      tst.w d0
   11e80:	|  /-- bne.s 11e86 <builtIn_positionStatus+0x5e>
   11e82:	|  |   moveq #1,d0
   11e84:	+--|-- bra.s 11eaa <builtIn_positionStatus+0x82>
	trimStack (&fun -> stack);
   11e86:	|  \-> moveq #24,d0
   11e88:	|      add.l 16(sp),d0
   11e8c:	|      move.l d0,-(sp)
   11e8e:	|      jsr 1528a <trimStack>
   11e94:	|      addq.l #4,sp
	positionStatus (x, y);
   11e96:	|      move.l (sp),d1
   11e98:	|      move.l 4(sp),d0
   11e9c:	|      move.l d1,-(sp)
   11e9e:	|      move.l d0,-(sp)
   11ea0:	|      jsr 7b38 <positionStatus>
   11ea6:	|      addq.l #8,sp
	return BR_CONTINUE;
   11ea8:	|      moveq #2,d0
}
   11eaa:	\----> addq.l #8,sp
   11eac:	       rts

00011eae <builtIn_alignStatus>:

builtIn(alignStatus)
{
   11eae:	       subq.l #4,sp
	UNUSEDALL
	int val;
	if (! getValueType(&val, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11eb0:	       movea.l 12(sp),a0
   11eb4:	       move.l 24(a0),d0
   11eb8:	       move.l d0,-(sp)
   11eba:	       pea 1 <_start+0x1>
   11ebe:	       move.l sp,d0
   11ec0:	       addq.l #8,d0
   11ec2:	       move.l d0,-(sp)
   11ec4:	       jsr 14906 <getValueType>
   11eca:	       lea 12(sp),sp
   11ece:	       tst.w d0
   11ed0:	   /-- bne.s 11ed6 <builtIn_alignStatus+0x28>
   11ed2:	   |   moveq #1,d0
   11ed4:	/--|-- bra.s 11ef6 <builtIn_alignStatus+0x48>
	trimStack (&fun -> stack);
   11ed6:	|  \-> moveq #24,d0
   11ed8:	|      add.l 12(sp),d0
   11edc:	|      move.l d0,-(sp)
   11ede:	|      jsr 1528a <trimStack>
   11ee4:	|      addq.l #4,sp
	nowStatus -> alignStatus = (short) val;
   11ee6:	|      move.l (sp),d0
   11ee8:	|      movea.l 1c408 <nowStatus>,a0
   11eee:	|      move.l d0,d0
   11ef0:	|      move.w d0,4(a0)
	return BR_CONTINUE;
   11ef4:	|      moveq #2,d0
}
   11ef6:	\----> addq.l #4,sp
   11ef8:	       rts

00011efa <getFuncNumForCallback>:

static BOOL getFuncNumForCallback(int numParams, struct loadedFunction * fun, int *functionNum)
{
	switch (numParams) {
   11efa:	             tst.l 4(sp)
   11efe:	      /----- beq.s 11f0a <getFuncNumForCallback+0x10>
   11f00:	      |      moveq #1,d0
   11f02:	      |      cmp.l 4(sp),d0
   11f06:	      |  /-- beq.s 11f10 <getFuncNumForCallback+0x16>
   11f08:	   /--|--|-- bra.s 11f46 <getFuncNumForCallback+0x4c>
		case 0:
			functionNum = 0;
   11f0a:	   |  \--|-> clr.l 12(sp)
			break;
   11f0e:	/--|-----|-- bra.s 11f58 <getFuncNumForCallback+0x5e>

		case 1:
			if (! getValueType(functionNum, SVT_FUNC,&fun -> stack -> thisVar)) return FALSE;
   11f10:	|  |     \-> movea.l 8(sp),a0
   11f14:	|  |         move.l 24(a0),d0
   11f18:	|  |         move.l d0,-(sp)
   11f1a:	|  |         pea 2 <_start+0x2>
   11f1e:	|  |         move.l 20(sp),-(sp)
   11f22:	|  |         jsr 14906 <getValueType>
   11f28:	|  |         lea 12(sp),sp
   11f2c:	|  |         tst.w d0
   11f2e:	|  |     /-- bne.s 11f34 <getFuncNumForCallback+0x3a>
   11f30:	|  |     |   clr.w d0
   11f32:	|  |  /--|-- bra.s 11f5a <getFuncNumForCallback+0x60>
			trimStack (&fun -> stack);
   11f34:	|  |  |  \-> moveq #24,d0
   11f36:	|  |  |      add.l 8(sp),d0
   11f3a:	|  |  |      move.l d0,-(sp)
   11f3c:	|  |  |      jsr 1528a <trimStack>
   11f42:	|  |  |      addq.l #4,sp
			break;
   11f44:	+--|--|----- bra.s 11f58 <getFuncNumForCallback+0x5e>

		default:
			KPrintF ("Too many parameters.");
   11f46:	|  \--|----> pea 19c97 <graphics.c.1c13408a+0x144>
   11f4c:	|     |      jsr 17366 <KPrintF>
   11f52:	|     |      addq.l #4,sp
			return FALSE;
   11f54:	|     |      clr.w d0
   11f56:	|     +----- bra.s 11f5a <getFuncNumForCallback+0x60>
	}
	return TRUE;
   11f58:	\-----|----> moveq #1,d0
}
   11f5a:	      \----> rts

00011f5c <builtIn_onLeftMouse>:

builtIn (onLeftMouse)
{
   11f5c:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11f5e:	       move.l sp,d0
   11f60:	       move.l d0,-(sp)
   11f62:	       move.l 16(sp),-(sp)
   11f66:	       move.l 16(sp),-(sp)
   11f6a:	       jsr 11efa <getFuncNumForCallback>
   11f70:	       lea 12(sp),sp
   11f74:	       tst.w d0
   11f76:	/----- beq.s 11f86 <builtIn_onLeftMouse+0x2a>
	{
		currentEvents -> leftMouseFunction = functionNum;
   11f78:	|      movea.l 1c3fa <currentEvents>,a0
   11f7e:	|      move.l (sp),d0
   11f80:	|      move.l d0,(a0)
		return BR_CONTINUE;
   11f82:	|      moveq #2,d0
   11f84:	|  /-- bra.s 11f88 <builtIn_onLeftMouse+0x2c>
	}
	return BR_ERROR;
   11f86:	\--|-> moveq #1,d0
}
   11f88:	   \-> addq.l #4,sp
   11f8a:	       rts

00011f8c <builtIn_onLeftMouseUp>:

builtIn (onLeftMouseUp)
{
   11f8c:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11f8e:	       move.l sp,d0
   11f90:	       move.l d0,-(sp)
   11f92:	       move.l 16(sp),-(sp)
   11f96:	       move.l 16(sp),-(sp)
   11f9a:	       jsr 11efa <getFuncNumForCallback>
   11fa0:	       lea 12(sp),sp
   11fa4:	       tst.w d0
   11fa6:	/----- beq.s 11fb8 <builtIn_onLeftMouseUp+0x2c>
	{
		currentEvents -> leftMouseUpFunction = functionNum;
   11fa8:	|      movea.l 1c3fa <currentEvents>,a0
   11fae:	|      move.l (sp),d0
   11fb0:	|      move.l d0,4(a0)
		return BR_CONTINUE;
   11fb4:	|      moveq #2,d0
   11fb6:	|  /-- bra.s 11fba <builtIn_onLeftMouseUp+0x2e>
	}
	return BR_ERROR;
   11fb8:	\--|-> moveq #1,d0
}
   11fba:	   \-> addq.l #4,sp
   11fbc:	       rts

00011fbe <builtIn_onRightMouse>:

builtIn (onRightMouse)
{
   11fbe:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11fc0:	       move.l sp,d0
   11fc2:	       move.l d0,-(sp)
   11fc4:	       move.l 16(sp),-(sp)
   11fc8:	       move.l 16(sp),-(sp)
   11fcc:	       jsr 11efa <getFuncNumForCallback>
   11fd2:	       lea 12(sp),sp
   11fd6:	       tst.w d0
   11fd8:	/----- beq.s 11fea <builtIn_onRightMouse+0x2c>
	{
		currentEvents -> rightMouseFunction = functionNum;
   11fda:	|      movea.l 1c3fa <currentEvents>,a0
   11fe0:	|      move.l (sp),d0
   11fe2:	|      move.l d0,8(a0)
		return BR_CONTINUE;
   11fe6:	|      moveq #2,d0
   11fe8:	|  /-- bra.s 11fec <builtIn_onRightMouse+0x2e>
	}
	return BR_ERROR;
   11fea:	\--|-> moveq #1,d0
}
   11fec:	   \-> addq.l #4,sp
   11fee:	       rts

00011ff0 <builtIn_onRightMouseUp>:

builtIn (onRightMouseUp)
{
   11ff0:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11ff2:	       move.l sp,d0
   11ff4:	       move.l d0,-(sp)
   11ff6:	       move.l 16(sp),-(sp)
   11ffa:	       move.l 16(sp),-(sp)
   11ffe:	       jsr 11efa <getFuncNumForCallback>
   12004:	       lea 12(sp),sp
   12008:	       tst.w d0
   1200a:	/----- beq.s 1201c <builtIn_onRightMouseUp+0x2c>
	{
		currentEvents -> rightMouseUpFunction = functionNum;
   1200c:	|      movea.l 1c3fa <currentEvents>,a0
   12012:	|      move.l (sp),d0
   12014:	|      move.l d0,12(a0)
		return BR_CONTINUE;
   12018:	|      moveq #2,d0
   1201a:	|  /-- bra.s 1201e <builtIn_onRightMouseUp+0x2e>
	}
	return BR_ERROR;
   1201c:	\--|-> moveq #1,d0
}
   1201e:	   \-> addq.l #4,sp
   12020:	       rts

00012022 <builtIn_onFocusChange>:

builtIn (onFocusChange)
{
   12022:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   12024:	       move.l sp,d0
   12026:	       move.l d0,-(sp)
   12028:	       move.l 16(sp),-(sp)
   1202c:	       move.l 16(sp),-(sp)
   12030:	       jsr 11efa <getFuncNumForCallback>
   12036:	       lea 12(sp),sp
   1203a:	       tst.w d0
   1203c:	/----- beq.s 1204e <builtIn_onFocusChange+0x2c>
	{
		currentEvents -> focusFunction = functionNum;
   1203e:	|      movea.l 1c3fa <currentEvents>,a0
   12044:	|      move.l (sp),d0
   12046:	|      move.l d0,20(a0)
		return BR_CONTINUE;
   1204a:	|      moveq #2,d0
   1204c:	|  /-- bra.s 12050 <builtIn_onFocusChange+0x2e>
	}
	return BR_ERROR;
   1204e:	\--|-> moveq #1,d0
}
   12050:	   \-> addq.l #4,sp
   12052:	       rts

00012054 <builtIn_onMoveMouse>:

builtIn (onMoveMouse)
{
   12054:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   12056:	       move.l sp,d0
   12058:	       move.l d0,-(sp)
   1205a:	       move.l 16(sp),-(sp)
   1205e:	       move.l 16(sp),-(sp)
   12062:	       jsr 11efa <getFuncNumForCallback>
   12068:	       lea 12(sp),sp
   1206c:	       tst.w d0
   1206e:	/----- beq.s 12080 <builtIn_onMoveMouse+0x2c>
	{
		currentEvents -> moveMouseFunction = functionNum;
   12070:	|      movea.l 1c3fa <currentEvents>,a0
   12076:	|      move.l (sp),d0
   12078:	|      move.l d0,16(a0)
		return BR_CONTINUE;
   1207c:	|      moveq #2,d0
   1207e:	|  /-- bra.s 12082 <builtIn_onMoveMouse+0x2e>
	}
	return BR_ERROR;
   12080:	\--|-> moveq #1,d0
}
   12082:	   \-> addq.l #4,sp
   12084:	       rts

00012086 <builtIn_onKeyboard>:

builtIn (onKeyboard)
{
   12086:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   12088:	       move.l sp,d0
   1208a:	       move.l d0,-(sp)
   1208c:	       move.l 16(sp),-(sp)
   12090:	       move.l 16(sp),-(sp)
   12094:	       jsr 11efa <getFuncNumForCallback>
   1209a:	       lea 12(sp),sp
   1209e:	       tst.w d0
   120a0:	/----- beq.s 120b2 <builtIn_onKeyboard+0x2c>
	{
		currentEvents -> spaceFunction = functionNum;
   120a2:	|      movea.l 1c3fa <currentEvents>,a0
   120a8:	|      move.l (sp),d0
   120aa:	|      move.l d0,24(a0)
		return BR_CONTINUE;
   120ae:	|      moveq #2,d0
   120b0:	|  /-- bra.s 120b4 <builtIn_onKeyboard+0x2e>
	}
	return BR_ERROR;
   120b2:	\--|-> moveq #1,d0
}
   120b4:	   \-> addq.l #4,sp
   120b6:	       rts

000120b8 <builtIn_spawnSub>:

builtIn (spawnSub)
{
   120b8:	          subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   120ba:	          move.l sp,d0
   120bc:	          move.l d0,-(sp)
   120be:	          move.l 16(sp),-(sp)
   120c2:	          move.l 16(sp),-(sp)
   120c6:	          jsr 11efa <getFuncNumForCallback>
   120cc:	          lea 12(sp),sp
   120d0:	          tst.w d0
   120d2:	/-------- beq.s 120fe <builtIn_spawnSub+0x46>
	{
		if (! startNewFunctionNum (functionNum, 0, NULL, noStack, TRUE)) return BR_ERROR;
   120d4:	|         move.l 1ca52 <noStack>,d1
   120da:	|         move.l (sp),d0
   120dc:	|         pea 1 <_start+0x1>
   120e0:	|         move.l d1,-(sp)
   120e2:	|         clr.l -(sp)
   120e4:	|         clr.l -(sp)
   120e6:	|         move.l d0,-(sp)
   120e8:	|         jsr 6c08 <startNewFunctionNum>
   120ee:	|         lea 20(sp),sp
   120f2:	|         tst.l d0
   120f4:	|     /-- bne.s 120fa <builtIn_spawnSub+0x42>
   120f6:	|     |   moveq #1,d0
   120f8:	|  /--|-- bra.s 12100 <builtIn_spawnSub+0x48>
		return BR_CONTINUE;
   120fa:	|  |  \-> moveq #2,d0
   120fc:	|  +----- bra.s 12100 <builtIn_spawnSub+0x48>
	}
	return BR_ERROR;
   120fe:	\--|----> moveq #1,d0
}
   12100:	   \----> addq.l #4,sp
   12102:	          rts

00012104 <builtIn_cancelSub>:

builtIn (cancelSub)
{
   12104:	          subq.l #8,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   12106:	          move.l sp,d0
   12108:	          addq.l #4,d0
   1210a:	          move.l d0,-(sp)
   1210c:	          move.l 20(sp),-(sp)
   12110:	          move.l 20(sp),-(sp)
   12114:	          jsr 11efa <getFuncNumForCallback>
   1211a:	          lea 12(sp),sp
   1211e:	          tst.w d0
   12120:	/-------- beq.s 12156 <builtIn_cancelSub+0x52>
	{
		BOOL killedMyself;
		cancelAFunction (functionNum, fun, &killedMyself);
   12122:	|         move.l 4(sp),d1
   12126:	|         move.l sp,d0
   12128:	|         addq.l #2,d0
   1212a:	|         move.l d0,-(sp)
   1212c:	|         move.l 20(sp),-(sp)
   12130:	|         move.l d1,-(sp)
   12132:	|         jsr 492e <cancelAFunction>
   12138:	|         lea 12(sp),sp
		if (killedMyself) {
   1213c:	|         move.w 2(sp),d0
   12140:	|  /----- beq.s 12152 <builtIn_cancelSub+0x4e>
			abortFunction (fun);
   12142:	|  |      move.l 16(sp),-(sp)
   12146:	|  |      jsr 484c <abortFunction>
   1214c:	|  |      addq.l #4,sp
			return BR_ALREADY_GONE;
   1214e:	|  |      moveq #5,d0
   12150:	|  |  /-- bra.s 12158 <builtIn_cancelSub+0x54>
		}
		return BR_CONTINUE;
   12152:	|  \--|-> moveq #2,d0
   12154:	|     +-- bra.s 12158 <builtIn_cancelSub+0x54>
	}
	return BR_ERROR;
   12156:	\-----|-> moveq #1,d0
}
   12158:	      \-> addq.l #8,sp
   1215a:	          rts

0001215c <builtIn_stringWidth>:

builtIn(stringWidth)
{
   1215c:	       subq.l #8,sp
   1215e:	       move.l a6,-(sp)
	UNUSEDALL
	char * theText = getTextFromAnyVar(&(fun->stack->thisVar));
   12160:	       movea.l 20(sp),a0
   12164:	       move.l 24(a0),d0
   12168:	       move.l d0,-(sp)
   1216a:	       jsr 14edc <getTextFromAnyVar>
   12170:	       addq.l #4,sp
   12172:	       move.l d0,8(sp)
	if (!theText) return BR_ERROR;
   12176:	   /-- bne.s 1217c <builtIn_stringWidth+0x20>
   12178:	   |   moveq #1,d0
   1217a:	/--|-- bra.s 121ca <builtIn_stringWidth+0x6e>
	trimStack(&fun->stack);
   1217c:	|  \-> moveq #24,d0
   1217e:	|      add.l 20(sp),d0
   12182:	|      move.l d0,-(sp)
   12184:	|      jsr 1528a <trimStack>
   1218a:	|      addq.l #4,sp

	// Return value
	setVariable(&fun->reg, SVT_INT, stringWidth(theText));
   1218c:	|      move.l 8(sp),-(sp)
   12190:	|      jsr 159e8 <stringWidth>
   12196:	|      addq.l #4,sp
   12198:	|      move.l d0,d1
   1219a:	|      moveq #28,d0
   1219c:	|      add.l 20(sp),d0
   121a0:	|      move.l d1,-(sp)
   121a2:	|      pea 1 <_start+0x1>
   121a6:	|      move.l d0,-(sp)
   121a8:	|      jsr 151f8 <setVariable>
   121ae:	|      lea 12(sp),sp
	FreeVec(theText);
   121b2:	|      move.l 8(sp),4(sp)
   121b8:	|      move.l 1ca82 <SysBase>,d0
   121be:	|      movea.l d0,a6
   121c0:	|      movea.l 4(sp),a1
   121c4:	|      jsr -690(a6)
	return BR_CONTINUE;
   121c8:	|      moveq #2,d0
}
   121ca:	\----> movea.l (sp)+,a6
   121cc:	       addq.l #8,sp
   121ce:	       rts

000121d0 <builtIn_hardScroll>:

builtIn(hardScroll)
{
   121d0:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   121d2:	       movea.l 12(sp),a0
   121d6:	       move.l 24(a0),d0
   121da:	       move.l d0,-(sp)
   121dc:	       pea 1 <_start+0x1>
   121e0:	       move.l sp,d0
   121e2:	       addq.l #8,d0
   121e4:	       move.l d0,-(sp)
   121e6:	       jsr 14906 <getValueType>
   121ec:	       lea 12(sp),sp
   121f0:	       tst.w d0
   121f2:	   /-- bne.s 121f8 <builtIn_hardScroll+0x28>
   121f4:	   |   moveq #1,d0
   121f6:	/--|-- bra.s 12216 <builtIn_hardScroll+0x46>
	trimStack (&fun -> stack);
   121f8:	|  \-> moveq #24,d0
   121fa:	|      add.l 12(sp),d0
   121fe:	|      move.l d0,-(sp)
   12200:	|      jsr 1528a <trimStack>
   12206:	|      addq.l #4,sp
	hardScroll (v);
   12208:	|      move.l (sp),d0
   1220a:	|      move.l d0,-(sp)
   1220c:	|      jsr d3a2 <hardScroll>
   12212:	|      addq.l #4,sp
	return BR_CONTINUE;
   12214:	|      moveq #2,d0
}
   12216:	\----> addq.l #4,sp
   12218:	       rts

0001221a <builtIn_isScreenRegion>:


builtIn(isScreenRegion)
{
   1221a:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1221c:	       movea.l 12(sp),a0
   12220:	       move.l 24(a0),d0
   12224:	       move.l d0,-(sp)
   12226:	       pea 7 <_start+0x7>
   1222a:	       move.l sp,d0
   1222c:	       addq.l #8,d0
   1222e:	       move.l d0,-(sp)
   12230:	       jsr 14906 <getValueType>
   12236:	       lea 12(sp),sp
   1223a:	       tst.w d0
   1223c:	   /-- bne.s 12242 <builtIn_isScreenRegion+0x28>
   1223e:	   |   moveq #1,d0
   12240:	/--|-- bra.s 12282 <builtIn_isScreenRegion+0x68>
	trimStack (&fun -> stack);
   12242:	|  \-> moveq #24,d0
   12244:	|      add.l 12(sp),d0
   12248:	|      move.l d0,-(sp)
   1224a:	|      jsr 1528a <trimStack>
   12250:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, getRegionForObject (objectNumber) != NULL);
   12252:	|      move.l (sp),d0
   12254:	|      move.l d0,-(sp)
   12256:	|      jsr 15b48 <getRegionForObject>
   1225c:	|      addq.l #4,sp
   1225e:	|      tst.l d0
   12260:	|      sne d0
   12262:	|      neg.b d0
   12264:	|      moveq #0,d1
   12266:	|      move.b d0,d1
   12268:	|      moveq #28,d0
   1226a:	|      add.l 12(sp),d0
   1226e:	|      move.l d1,-(sp)
   12270:	|      pea 1 <_start+0x1>
   12274:	|      move.l d0,-(sp)
   12276:	|      jsr 151f8 <setVariable>
   1227c:	|      lea 12(sp),sp
	return BR_CONTINUE;
   12280:	|      moveq #2,d0
}
   12282:	\----> addq.l #4,sp
   12284:	       rts

00012286 <builtIn_setSpeechSpeed>:

builtIn(setSpeechSpeed)
{
   12286:	       subq.l #4,sp
	UNUSEDALL
	int number;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12288:	       movea.l 12(sp),a0
   1228c:	       move.l 24(a0),d0
   12290:	       move.l d0,-(sp)
   12292:	       pea 1 <_start+0x1>
   12296:	       move.l sp,d0
   12298:	       addq.l #8,d0
   1229a:	       move.l d0,-(sp)
   1229c:	       jsr 14906 <getValueType>
   122a2:	       lea 12(sp),sp
   122a6:	       tst.w d0
   122a8:	   /-- bne.s 122ae <builtIn_setSpeechSpeed+0x28>
   122aa:	   |   moveq #1,d0
   122ac:	/--|-- bra.s 122fc <builtIn_setSpeechSpeed+0x76>
	trimStack (&fun -> stack);
   122ae:	|  \-> moveq #24,d0
   122b0:	|      add.l 12(sp),d0
   122b4:	|      move.l d0,-(sp)
   122b6:	|      jsr 1528a <trimStack>
   122bc:	|      addq.l #4,sp
	speechSpeed = number * (FLOAT) 0.01;
   122be:	|      move.l (sp),d0
   122c0:	|      move.l d0,-(sp)
   122c2:	|      jsr 17798 <__floatsisf>
   122c8:	|      addq.l #4,sp
   122ca:	|      move.l #1008981770,-(sp)
   122d0:	|      move.l d0,-(sp)
   122d2:	|      jsr 1784a <__mulsf3>
   122d8:	|      addq.l #8,sp
   122da:	|      move.l d0,1c40c <speechSpeed>
	setVariable (&fun -> reg, SVT_INT, 1);
   122e0:	|      moveq #28,d0
   122e2:	|      add.l 12(sp),d0
   122e6:	|      pea 1 <_start+0x1>
   122ea:	|      pea 1 <_start+0x1>
   122ee:	|      move.l d0,-(sp)
   122f0:	|      jsr 151f8 <setVariable>
   122f6:	|      lea 12(sp),sp
	return BR_CONTINUE;
   122fa:	|      moveq #2,d0
}
   122fc:	\----> addq.l #4,sp
   122fe:	       rts

00012300 <builtIn_setFontSpacing>:

builtIn(setFontSpacing)
{
   12300:	       subq.l #4,sp
	UNUSEDALL
	int fontSpaceI;
	if (! getValueType(&fontSpaceI, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12302:	       movea.l 12(sp),a0
   12306:	       move.l 24(a0),d0
   1230a:	       move.l d0,-(sp)
   1230c:	       pea 1 <_start+0x1>
   12310:	       move.l sp,d0
   12312:	       addq.l #8,d0
   12314:	       move.l d0,-(sp)
   12316:	       jsr 14906 <getValueType>
   1231c:	       lea 12(sp),sp
   12320:	       tst.w d0
   12322:	   /-- bne.s 12328 <builtIn_setFontSpacing+0x28>
   12324:	   |   moveq #1,d0
   12326:	/--|-- bra.s 1235e <builtIn_setFontSpacing+0x5e>
	fontSpace = fontSpaceI;
   12328:	|  \-> move.l (sp),d0
   1232a:	|      move.l d0,d0
   1232c:	|      move.w d0,1c986 <fontSpace>
	trimStack (&fun -> stack);
   12332:	|      moveq #24,d0
   12334:	|      add.l 12(sp),d0
   12338:	|      move.l d0,-(sp)
   1233a:	|      jsr 1528a <trimStack>
   12340:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   12342:	|      moveq #28,d0
   12344:	|      add.l 12(sp),d0
   12348:	|      pea 1 <_start+0x1>
   1234c:	|      pea 1 <_start+0x1>
   12350:	|      move.l d0,-(sp)
   12352:	|      jsr 151f8 <setVariable>
   12358:	|      lea 12(sp),sp
	return BR_CONTINUE;
   1235c:	|      moveq #2,d0
}
   1235e:	\----> addq.l #4,sp
   12360:	       rts

00012362 <builtIn_transitionLevel>:

builtIn(transitionLevel)
{
   12362:	          subq.l #4,sp
	UNUSEDALL
	int number;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12364:	          movea.l 12(sp),a0
   12368:	          move.l 24(a0),d0
   1236c:	          move.l d0,-(sp)
   1236e:	          pea 1 <_start+0x1>
   12372:	          move.l sp,d0
   12374:	          addq.l #8,d0
   12376:	          move.l d0,-(sp)
   12378:	          jsr 14906 <getValueType>
   1237e:	          lea 12(sp),sp
   12382:	          tst.w d0
   12384:	      /-- bne.s 1238a <builtIn_transitionLevel+0x28>
   12386:	      |   moveq #1,d0
   12388:	/-----|-- bra.s 123de <builtIn_transitionLevel+0x7c>
	trimStack (&fun -> stack);
   1238a:	|     \-> moveq #24,d0
   1238c:	|         add.l 12(sp),d0
   12390:	|         move.l d0,-(sp)
   12392:	|         jsr 1528a <trimStack>
   12398:	|         addq.l #4,sp

	if (number < 0)
   1239a:	|         move.l (sp),d0
   1239c:	|     /-- bpl.s 123a6 <builtIn_transitionLevel+0x44>
		brightnessLevel = 0;
   1239e:	|     |   clr.b 1c3f8 <brightnessLevel>
   123a4:	|  /--|-- bra.s 123c2 <builtIn_transitionLevel+0x60>
	else if (number > 255)
   123a6:	|  |  \-> move.l (sp),d0
   123a8:	|  |      cmpi.l #255,d0
   123ae:	|  |  /-- ble.s 123b8 <builtIn_transitionLevel+0x56>
		brightnessLevel = 255;
   123b0:	|  |  |   st 1c3f8 <brightnessLevel>
   123b6:	|  +--|-- bra.s 123c2 <builtIn_transitionLevel+0x60>
	else
		brightnessLevel = number;
   123b8:	|  |  \-> move.l (sp),d0
   123ba:	|  |      move.l d0,d0
   123bc:	|  |      move.b d0,1c3f8 <brightnessLevel>

	setVariable (&fun -> reg, SVT_INT, 1);
   123c2:	|  \----> moveq #28,d0
   123c4:	|         add.l 12(sp),d0
   123c8:	|         pea 1 <_start+0x1>
   123cc:	|         pea 1 <_start+0x1>
   123d0:	|         move.l d0,-(sp)
   123d2:	|         jsr 151f8 <setVariable>
   123d8:	|         lea 12(sp),sp
	return BR_CONTINUE;
   123dc:	|         moveq #2,d0
}
   123de:	\-------> addq.l #4,sp
   123e0:	          rts

000123e2 <builtIn_captureAllKeys>:

builtIn(captureAllKeys)
{
	UNUSEDALL
	captureAllKeys = getBoolean(&(fun -> stack -> thisVar));
   123e2:	movea.l 8(sp),a0
   123e6:	move.l 24(a0),d0
   123ea:	move.l d0,-(sp)
   123ec:	jsr 14e46 <getBoolean>
   123f2:	addq.l #4,sp
   123f4:	move.w d0,1ca22 <captureAllKeys>
	trimStack (&fun -> stack);
   123fa:	moveq #24,d0
   123fc:	add.l 8(sp),d0
   12400:	move.l d0,-(sp)
   12402:	jsr 1528a <trimStack>
   12408:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, captureAllKeys);
   1240a:	move.w 1ca22 <captureAllKeys>,d0
   12410:	movea.w d0,a0
   12412:	moveq #28,d0
   12414:	add.l 8(sp),d0
   12418:	move.l a0,-(sp)
   1241a:	pea 1 <_start+0x1>
   1241e:	move.l d0,-(sp)
   12420:	jsr 151f8 <setVariable>
   12426:	lea 12(sp),sp
	return BR_CONTINUE;
   1242a:	moveq #2,d0
}
   1242c:	rts

0001242e <builtIn_spinCharacter>:


builtIn(spinCharacter)
{
   1242e:	       lea -12(sp),sp
	UNUSEDALL
	int number, objectNumber;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12432:	       movea.l 20(sp),a0
   12436:	       move.l 24(a0),d0
   1243a:	       move.l d0,-(sp)
   1243c:	       pea 1 <_start+0x1>
   12440:	       moveq #12,d0
   12442:	       add.l sp,d0
   12444:	       move.l d0,-(sp)
   12446:	       jsr 14906 <getValueType>
   1244c:	       lea 12(sp),sp
   12450:	       tst.w d0
   12452:	   /-- bne.s 1245a <builtIn_spinCharacter+0x2c>
   12454:	   |   moveq #1,d0
   12456:	/--|-- bra.w 1250a <builtIn_spinCharacter+0xdc>
	trimStack (&fun -> stack);
   1245a:	|  \-> moveq #24,d0
   1245c:	|      add.l 20(sp),d0
   12460:	|      move.l d0,-(sp)
   12462:	|      jsr 1528a <trimStack>
   12468:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1246a:	|      movea.l 20(sp),a0
   1246e:	|      move.l 24(a0),d0
   12472:	|      move.l d0,-(sp)
   12474:	|      pea 7 <_start+0x7>
   12478:	|      lea 8(sp),a0
   1247c:	|      move.l a0,-(sp)
   1247e:	|      jsr 14906 <getValueType>
   12484:	|      lea 12(sp),sp
   12488:	|      tst.w d0
   1248a:	|  /-- bne.s 12490 <builtIn_spinCharacter+0x62>
   1248c:	|  |   moveq #1,d0
   1248e:	+--|-- bra.s 1250a <builtIn_spinCharacter+0xdc>
	trimStack (&fun -> stack);
   12490:	|  \-> moveq #24,d0
   12492:	|      add.l 20(sp),d0
   12496:	|      move.l d0,-(sp)
   12498:	|      jsr 1528a <trimStack>
   1249e:	|      addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   124a0:	|      move.l (sp),d0
   124a2:	|      move.l d0,-(sp)
   124a4:	|      jsr a75a <findPerson>
   124aa:	|      addq.l #4,sp
   124ac:	|      move.l d0,8(sp)
	if (thisPerson) {
   124b0:	|  /-- beq.s 124f0 <builtIn_spinCharacter+0xc2>
		thisPerson -> wantAngle = number;
   124b2:	|  |   move.l 4(sp),d0
   124b6:	|  |   movea.l 8(sp),a0
   124ba:	|  |   move.l d0,96(a0)
		thisPerson -> spinning = TRUE;
   124be:	|  |   movea.l 8(sp),a0
   124c2:	|  |   move.w #1,66(a0)
		thisPerson -> continueAfterWalking = fun;
   124c8:	|  |   movea.l 8(sp),a0
   124cc:	|  |   move.l 20(sp),68(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   124d2:	|  |   moveq #28,d0
   124d4:	|  |   add.l 20(sp),d0
   124d8:	|  |   pea 1 <_start+0x1>
   124dc:	|  |   pea 1 <_start+0x1>
   124e0:	|  |   move.l d0,-(sp)
   124e2:	|  |   jsr 151f8 <setVariable>
   124e8:	|  |   lea 12(sp),sp
		return BR_PAUSE;
   124ec:	|  |   moveq #3,d0
   124ee:	+--|-- bra.s 1250a <builtIn_spinCharacter+0xdc>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   124f0:	|  \-> moveq #28,d0
   124f2:	|      add.l 20(sp),d0
   124f6:	|      clr.l -(sp)
   124f8:	|      pea 1 <_start+0x1>
   124fc:	|      move.l d0,-(sp)
   124fe:	|      jsr 151f8 <setVariable>
   12504:	|      lea 12(sp),sp
		return BR_CONTINUE;
   12508:	|      moveq #2,d0
	}
}
   1250a:	\----> lea 12(sp),sp
   1250e:	       rts

00012510 <builtIn_getCharacterDirection>:

builtIn(getCharacterDirection)
{
   12510:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12512:	          movea.l 16(sp),a0
   12516:	          move.l 24(a0),d0
   1251a:	          move.l d0,-(sp)
   1251c:	          pea 7 <_start+0x7>
   12520:	          move.l sp,d0
   12522:	          addq.l #8,d0
   12524:	          move.l d0,-(sp)
   12526:	          jsr 14906 <getValueType>
   1252c:	          lea 12(sp),sp
   12530:	          tst.w d0
   12532:	      /-- bne.s 12538 <builtIn_getCharacterDirection+0x28>
   12534:	      |   moveq #1,d0
   12536:	/-----|-- bra.s 12596 <builtIn_getCharacterDirection+0x86>
	trimStack (&fun -> stack);
   12538:	|     \-> moveq #24,d0
   1253a:	|         add.l 16(sp),d0
   1253e:	|         move.l d0,-(sp)
   12540:	|         jsr 1528a <trimStack>
   12546:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   12548:	|         move.l (sp),d0
   1254a:	|         move.l d0,-(sp)
   1254c:	|         jsr a75a <findPerson>
   12552:	|         addq.l #4,sp
   12554:	|         move.l d0,4(sp)
	if (thisPerson) {
   12558:	|  /----- beq.s 1257c <builtIn_getCharacterDirection+0x6c>
		setVariable (&fun -> reg, SVT_INT, thisPerson -> direction);
   1255a:	|  |      movea.l 4(sp),a0
   1255e:	|  |      move.l 106(a0),d1
   12562:	|  |      moveq #28,d0
   12564:	|  |      add.l 16(sp),d0
   12568:	|  |      move.l d1,-(sp)
   1256a:	|  |      pea 1 <_start+0x1>
   1256e:	|  |      move.l d0,-(sp)
   12570:	|  |      jsr 151f8 <setVariable>
   12576:	|  |      lea 12(sp),sp
   1257a:	|  |  /-- bra.s 12594 <builtIn_getCharacterDirection+0x84>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   1257c:	|  \--|-> moveq #28,d0
   1257e:	|     |   add.l 16(sp),d0
   12582:	|     |   clr.l -(sp)
   12584:	|     |   pea 1 <_start+0x1>
   12588:	|     |   move.l d0,-(sp)
   1258a:	|     |   jsr 151f8 <setVariable>
   12590:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   12594:	|     \-> moveq #2,d0
}
   12596:	\-------> addq.l #8,sp
   12598:	          rts

0001259a <builtIn_isCharacter>:

builtIn(isCharacter)
{
   1259a:	       subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1259c:	       movea.l 16(sp),a0
   125a0:	       move.l 24(a0),d0
   125a4:	       move.l d0,-(sp)
   125a6:	       pea 7 <_start+0x7>
   125aa:	       move.l sp,d0
   125ac:	       addq.l #8,d0
   125ae:	       move.l d0,-(sp)
   125b0:	       jsr 14906 <getValueType>
   125b6:	       lea 12(sp),sp
   125ba:	       tst.w d0
   125bc:	   /-- bne.s 125c2 <builtIn_isCharacter+0x28>
   125be:	   |   moveq #1,d0
   125c0:	/--|-- bra.s 12604 <builtIn_isCharacter+0x6a>
	trimStack (&fun -> stack);
   125c2:	|  \-> moveq #24,d0
   125c4:	|      add.l 16(sp),d0
   125c8:	|      move.l d0,-(sp)
   125ca:	|      jsr 1528a <trimStack>
   125d0:	|      addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   125d2:	|      move.l (sp),d0
   125d4:	|      move.l d0,-(sp)
   125d6:	|      jsr a75a <findPerson>
   125dc:	|      addq.l #4,sp
   125de:	|      move.l d0,4(sp)
	setVariable (&fun -> reg, SVT_INT, thisPerson != NULL);
   125e2:	|      sne d0
   125e4:	|      neg.b d0
   125e6:	|      moveq #0,d1
   125e8:	|      move.b d0,d1
   125ea:	|      moveq #28,d0
   125ec:	|      add.l 16(sp),d0
   125f0:	|      move.l d1,-(sp)
   125f2:	|      pea 1 <_start+0x1>
   125f6:	|      move.l d0,-(sp)
   125f8:	|      jsr 151f8 <setVariable>
   125fe:	|      lea 12(sp),sp
	return BR_CONTINUE;
   12602:	|      moveq #2,d0
}
   12604:	\----> addq.l #8,sp
   12606:	       rts

00012608 <builtIn_normalCharacter>:

builtIn(normalCharacter)
{
   12608:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1260a:	          movea.l 16(sp),a0
   1260e:	          move.l 24(a0),d0
   12612:	          move.l d0,-(sp)
   12614:	          pea 7 <_start+0x7>
   12618:	          move.l sp,d0
   1261a:	          addq.l #8,d0
   1261c:	          move.l d0,-(sp)
   1261e:	          jsr 14906 <getValueType>
   12624:	          lea 12(sp),sp
   12628:	          tst.w d0
   1262a:	      /-- bne.s 12630 <builtIn_normalCharacter+0x28>
   1262c:	      |   moveq #1,d0
   1262e:	/-----|-- bra.s 126ac <builtIn_normalCharacter+0xa4>
	trimStack (&fun -> stack);
   12630:	|     \-> moveq #24,d0
   12632:	|         add.l 16(sp),d0
   12636:	|         move.l d0,-(sp)
   12638:	|         jsr 1528a <trimStack>
   1263e:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   12640:	|         move.l (sp),d0
   12642:	|         move.l d0,-(sp)
   12644:	|         jsr a75a <findPerson>
   1264a:	|         addq.l #4,sp
   1264c:	|         move.l d0,4(sp)
	if (thisPerson)
   12650:	|  /----- beq.s 12692 <builtIn_normalCharacter+0x8a>
	{
		thisPerson -> myAnim = thisPerson -> myPersona -> animation[thisPerson -> direction];
   12652:	|  |      movea.l 4(sp),a0
   12656:	|  |      movea.l 80(a0),a0
   1265a:	|  |      move.l (a0),d1
   1265c:	|  |      movea.l 4(sp),a0
   12660:	|  |      move.l 106(a0),d0
   12664:	|  |      add.l d0,d0
   12666:	|  |      add.l d0,d0
   12668:	|  |      movea.l d1,a0
   1266a:	|  |      adda.l d0,a0
   1266c:	|  |      move.l (a0),d0
   1266e:	|  |      movea.l 4(sp),a0
   12672:	|  |      move.l d0,72(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   12676:	|  |      moveq #28,d0
   12678:	|  |      add.l 16(sp),d0
   1267c:	|  |      pea 1 <_start+0x1>
   12680:	|  |      pea 1 <_start+0x1>
   12684:	|  |      move.l d0,-(sp)
   12686:	|  |      jsr 151f8 <setVariable>
   1268c:	|  |      lea 12(sp),sp
   12690:	|  |  /-- bra.s 126aa <builtIn_normalCharacter+0xa2>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   12692:	|  \--|-> moveq #28,d0
   12694:	|     |   add.l 16(sp),d0
   12698:	|     |   clr.l -(sp)
   1269a:	|     |   pea 1 <_start+0x1>
   1269e:	|     |   move.l d0,-(sp)
   126a0:	|     |   jsr 151f8 <setVariable>
   126a6:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   126aa:	|     \-> moveq #2,d0
}
   126ac:	\-------> addq.l #8,sp
   126ae:	          rts

000126b0 <builtIn_isMoving>:

builtIn(isMoving)
{
   126b0:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   126b2:	          movea.l 16(sp),a0
   126b6:	          move.l 24(a0),d0
   126ba:	          move.l d0,-(sp)
   126bc:	          pea 7 <_start+0x7>
   126c0:	          move.l sp,d0
   126c2:	          addq.l #8,d0
   126c4:	          move.l d0,-(sp)
   126c6:	          jsr 14906 <getValueType>
   126cc:	          lea 12(sp),sp
   126d0:	          tst.w d0
   126d2:	      /-- bne.s 126d8 <builtIn_isMoving+0x28>
   126d4:	      |   moveq #1,d0
   126d6:	/-----|-- bra.s 12738 <builtIn_isMoving+0x88>
	trimStack (&fun -> stack);
   126d8:	|     \-> moveq #24,d0
   126da:	|         add.l 16(sp),d0
   126de:	|         move.l d0,-(sp)
   126e0:	|         jsr 1528a <trimStack>
   126e6:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   126e8:	|         move.l (sp),d0
   126ea:	|         move.l d0,-(sp)
   126ec:	|         jsr a75a <findPerson>
   126f2:	|         addq.l #4,sp
   126f4:	|         move.l d0,4(sp)
	if (thisPerson)
   126f8:	|  /----- beq.s 1271e <builtIn_isMoving+0x6e>
	{
		setVariable (&fun -> reg, SVT_INT, thisPerson -> walking);
   126fa:	|  |      movea.l 4(sp),a0
   126fe:	|  |      move.w 64(a0),d0
   12702:	|  |      movea.w d0,a0
   12704:	|  |      moveq #28,d0
   12706:	|  |      add.l 16(sp),d0
   1270a:	|  |      move.l a0,-(sp)
   1270c:	|  |      pea 1 <_start+0x1>
   12710:	|  |      move.l d0,-(sp)
   12712:	|  |      jsr 151f8 <setVariable>
   12718:	|  |      lea 12(sp),sp
   1271c:	|  |  /-- bra.s 12736 <builtIn_isMoving+0x86>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   1271e:	|  \--|-> moveq #28,d0
   12720:	|     |   add.l 16(sp),d0
   12724:	|     |   clr.l -(sp)
   12726:	|     |   pea 1 <_start+0x1>
   1272a:	|     |   move.l d0,-(sp)
   1272c:	|     |   jsr 151f8 <setVariable>
   12732:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   12736:	|     \-> moveq #2,d0
}
   12738:	\-------> addq.l #8,sp
   1273a:	          rts

0001273c <builtIn_fetchEvent>:

builtIn(fetchEvent)
{
   1273c:	          lea -12(sp),sp
	UNUSEDALL
	int obj1, obj2;
	if (! getValueType(&obj2, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12740:	          movea.l 20(sp),a0
   12744:	          move.l 24(a0),d0
   12748:	          move.l d0,-(sp)
   1274a:	          pea 7 <_start+0x7>
   1274e:	          lea 8(sp),a0
   12752:	          move.l a0,-(sp)
   12754:	          jsr 14906 <getValueType>
   1275a:	          lea 12(sp),sp
   1275e:	          tst.w d0
   12760:	      /-- bne.s 12768 <builtIn_fetchEvent+0x2c>
   12762:	      |   moveq #1,d0
   12764:	/-----|-- bra.w 127fc <builtIn_fetchEvent+0xc0>
	trimStack (&fun -> stack);
   12768:	|     \-> moveq #24,d0
   1276a:	|         add.l 20(sp),d0
   1276e:	|         move.l d0,-(sp)
   12770:	|         jsr 1528a <trimStack>
   12776:	|         addq.l #4,sp
	if (! getValueType(&obj1, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12778:	|         movea.l 20(sp),a0
   1277c:	|         move.l 24(a0),d0
   12780:	|         move.l d0,-(sp)
   12782:	|         pea 7 <_start+0x7>
   12786:	|         moveq #12,d0
   12788:	|         add.l sp,d0
   1278a:	|         move.l d0,-(sp)
   1278c:	|         jsr 14906 <getValueType>
   12792:	|         lea 12(sp),sp
   12796:	|         tst.w d0
   12798:	|     /-- bne.s 1279e <builtIn_fetchEvent+0x62>
   1279a:	|     |   moveq #1,d0
   1279c:	+-----|-- bra.s 127fc <builtIn_fetchEvent+0xc0>
	trimStack (&fun -> stack);
   1279e:	|     \-> moveq #24,d0
   127a0:	|         add.l 20(sp),d0
   127a4:	|         move.l d0,-(sp)
   127a6:	|         jsr 1528a <trimStack>
   127ac:	|         addq.l #4,sp

	int fNum = getCombinationFunction (obj1, obj2);
   127ae:	|         move.l (sp),d1
   127b0:	|         move.l 4(sp),d0
   127b4:	|         move.l d1,-(sp)
   127b6:	|         move.l d0,-(sp)
   127b8:	|         jsr d684 <getCombinationFunction>
   127be:	|         addq.l #8,sp
   127c0:	|         move.l d0,8(sp)

	// Return value
	if (fNum) {
   127c4:	|  /----- beq.s 127e2 <builtIn_fetchEvent+0xa6>
		setVariable (&fun -> reg, SVT_FUNC, fNum);
   127c6:	|  |      moveq #28,d0
   127c8:	|  |      add.l 20(sp),d0
   127cc:	|  |      move.l 8(sp),-(sp)
   127d0:	|  |      pea 2 <_start+0x2>
   127d4:	|  |      move.l d0,-(sp)
   127d6:	|  |      jsr 151f8 <setVariable>
   127dc:	|  |      lea 12(sp),sp
   127e0:	|  |  /-- bra.s 127fa <builtIn_fetchEvent+0xbe>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   127e2:	|  \--|-> moveq #28,d0
   127e4:	|     |   add.l 20(sp),d0
   127e8:	|     |   clr.l -(sp)
   127ea:	|     |   pea 1 <_start+0x1>
   127ee:	|     |   move.l d0,-(sp)
   127f0:	|     |   jsr 151f8 <setVariable>
   127f6:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   127fa:	|     \-> moveq #2,d0
}
   127fc:	\-------> lea 12(sp),sp
   12800:	          rts

00012802 <builtIn_deleteFile>:

builtIn(deleteFile)
{
   12802:	       lea -24(sp),sp
   12806:	       move.l a6,-(sp)
    UNUSEDALL

    char *namNormal = getTextFromAnyVar(&(fun->stack->thisVar));
   12808:	       movea.l 36(sp),a0
   1280c:	       move.l 24(a0),d0
   12810:	       move.l d0,-(sp)
   12812:	       jsr 14edc <getTextFromAnyVar>
   12818:	       addq.l #4,sp
   1281a:	       move.l d0,24(sp)
    trimStack(&fun->stack);
   1281e:	       moveq #24,d0
   12820:	       add.l 36(sp),d0
   12824:	       move.l d0,-(sp)
   12826:	       jsr 1528a <trimStack>
   1282c:	       addq.l #4,sp
    char *nam = encodeFilename(namNormal);
   1282e:	       move.l 24(sp),-(sp)
   12832:	       jsr 2fe <encodeFilename>
   12838:	       addq.l #4,sp
   1283a:	       move.l d0,20(sp)
    FreeVec(namNormal);
   1283e:	       move.l 24(sp),16(sp)
   12844:	       move.l 1ca82 <SysBase>,d0
   1284a:	       movea.l d0,a6
   1284c:	       movea.l 16(sp),a1
   12850:	       jsr -690(a6)
    if (failSecurityCheck(nam)) return BR_ERROR;
   12854:	       move.l 20(sp),-(sp)
   12858:	       jsr e43c <failSecurityCheck>
   1285e:	       addq.l #4,sp
   12860:	       tst.w d0
   12862:	   /-- beq.s 12868 <builtIn_deleteFile+0x66>
   12864:	   |   moveq #1,d0
   12866:	/--|-- bra.s 128b6 <builtIn_deleteFile+0xb4>
    setVariable(&fun->reg, SVT_INT, DeleteFile(nam));
   12868:	|  \-> move.l 20(sp),12(sp)
   1286e:	|      move.l 1ca8a <DOSBase>,d0
   12874:	|      movea.l d0,a6
   12876:	|      move.l 12(sp),d1
   1287a:	|      jsr -72(a6)
   1287e:	|      move.l d0,8(sp)
   12882:	|      move.l 8(sp),d1
   12886:	|      moveq #28,d0
   12888:	|      add.l 36(sp),d0
   1288c:	|      move.l d1,-(sp)
   1288e:	|      pea 1 <_start+0x1>
   12892:	|      move.l d0,-(sp)
   12894:	|      jsr 151f8 <setVariable>
   1289a:	|      lea 12(sp),sp
    FreeVec(nam);
   1289e:	|      move.l 20(sp),4(sp)
   128a4:	|      move.l 1ca82 <SysBase>,d0
   128aa:	|      movea.l d0,a6
   128ac:	|      movea.l 4(sp),a1
   128b0:	|      jsr -690(a6)

    return BR_CONTINUE;
   128b4:	|      moveq #2,d0
}
   128b6:	\----> movea.l (sp)+,a6
   128b8:	       lea 24(sp),sp
   128bc:	       rts

000128be <builtIn_renameFile>:

builtIn(renameFile)
{
   128be:	       lea -40(sp),sp
   128c2:	       move.l a6,-(sp)
   128c4:	       move.l d2,-(sp)
	UNUSEDALL
	char * temp;

	temp = getTextFromAnyVar(&(fun->stack->thisVar));
   128c6:	       movea.l 56(sp),a0
   128ca:	       move.l 24(a0),d0
   128ce:	       move.l d0,-(sp)
   128d0:	       jsr 14edc <getTextFromAnyVar>
   128d6:	       addq.l #4,sp
   128d8:	       move.l d0,44(sp)
	char * newnam = encodeFilename(temp);
   128dc:	       move.l 44(sp),-(sp)
   128e0:	       jsr 2fe <encodeFilename>
   128e6:	       addq.l #4,sp
   128e8:	       move.l d0,40(sp)
	trimStack(&fun->stack);
   128ec:	       moveq #24,d0
   128ee:	       add.l 56(sp),d0
   128f2:	       move.l d0,-(sp)
   128f4:	       jsr 1528a <trimStack>
   128fa:	       addq.l #4,sp
	if (failSecurityCheck(newnam)) return BR_ERROR;
   128fc:	       move.l 40(sp),-(sp)
   12900:	       jsr e43c <failSecurityCheck>
   12906:	       addq.l #4,sp
   12908:	       tst.w d0
   1290a:	   /-- beq.s 12912 <builtIn_renameFile+0x54>
   1290c:	   |   moveq #1,d0
   1290e:	/--|-- bra.w 129f8 <builtIn_renameFile+0x13a>
	FreeVec(temp);
   12912:	|  \-> move.l 44(sp),36(sp)
   12918:	|      move.l 1ca82 <SysBase>,d0
   1291e:	|      movea.l d0,a6
   12920:	|      movea.l 36(sp),a1
   12924:	|      jsr -690(a6)

	temp = getTextFromAnyVar(&(fun->stack->thisVar));
   12928:	|      movea.l 56(sp),a0
   1292c:	|      move.l 24(a0),d0
   12930:	|      move.l d0,-(sp)
   12932:	|      jsr 14edc <getTextFromAnyVar>
   12938:	|      addq.l #4,sp
   1293a:	|      move.l d0,44(sp)
	char * nam = encodeFilename(temp);
   1293e:	|      move.l 44(sp),-(sp)
   12942:	|      jsr 2fe <encodeFilename>
   12948:	|      addq.l #4,sp
   1294a:	|      move.l d0,32(sp)
	trimStack(&fun->stack);
   1294e:	|      moveq #24,d0
   12950:	|      add.l 56(sp),d0
   12954:	|      move.l d0,-(sp)
   12956:	|      jsr 1528a <trimStack>
   1295c:	|      addq.l #4,sp
	if (failSecurityCheck(nam)) return BR_ERROR;
   1295e:	|      move.l 32(sp),-(sp)
   12962:	|      jsr e43c <failSecurityCheck>
   12968:	|      addq.l #4,sp
   1296a:	|      tst.w d0
   1296c:	|  /-- beq.s 12974 <builtIn_renameFile+0xb6>
   1296e:	|  |   moveq #1,d0
   12970:	+--|-- bra.w 129f8 <builtIn_renameFile+0x13a>
	FreeVec(temp);
   12974:	|  \-> move.l 44(sp),28(sp)
   1297a:	|      move.l 1ca82 <SysBase>,d0
   12980:	|      movea.l d0,a6
   12982:	|      movea.l 28(sp),a1
   12986:	|      jsr -690(a6)

	setVariable(&fun->reg, SVT_INT, Rename(nam, newnam));
   1298a:	|      move.l 32(sp),24(sp)
   12990:	|      move.l 40(sp),20(sp)
   12996:	|      move.l 1ca8a <DOSBase>,d0
   1299c:	|      movea.l d0,a6
   1299e:	|      move.l 24(sp),d1
   129a2:	|      move.l 20(sp),d2
   129a6:	|      jsr -78(a6)
   129aa:	|      move.l d0,16(sp)
   129ae:	|      move.l 16(sp),d1
   129b2:	|      moveq #28,d0
   129b4:	|      add.l 56(sp),d0
   129b8:	|      move.l d1,-(sp)
   129ba:	|      pea 1 <_start+0x1>
   129be:	|      move.l d0,-(sp)
   129c0:	|      jsr 151f8 <setVariable>
   129c6:	|      lea 12(sp),sp
	FreeVec(nam);
   129ca:	|      move.l 32(sp),12(sp)
   129d0:	|      move.l 1ca82 <SysBase>,d0
   129d6:	|      movea.l d0,a6
   129d8:	|      movea.l 12(sp),a1
   129dc:	|      jsr -690(a6)
	FreeVec(newnam);
   129e0:	|      move.l 40(sp),8(sp)
   129e6:	|      move.l 1ca82 <SysBase>,d0
   129ec:	|      movea.l d0,a6
   129ee:	|      movea.l 8(sp),a1
   129f2:	|      jsr -690(a6)

	return BR_CONTINUE;
   129f6:	|      moveq #2,d0
}
   129f8:	\----> move.l (sp)+,d2
   129fa:	       movea.l (sp)+,a6
   129fc:	       lea 40(sp),sp
   12a00:	       rts

00012a02 <builtIn_cacheSound>:

builtIn(cacheSound)
{
   12a02:	       subq.l #4,sp
	UNUSEDALL
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   12a04:	       movea.l 12(sp),a0
   12a08:	       move.l 24(a0),d0
   12a0c:	       move.l d0,-(sp)
   12a0e:	       pea 5 <_start+0x5>
   12a12:	       move.l sp,d0
   12a14:	       addq.l #8,d0
   12a16:	       move.l d0,-(sp)
   12a18:	       jsr 14906 <getValueType>
   12a1e:	       lea 12(sp),sp
   12a22:	       tst.w d0
   12a24:	   /-- bne.s 12a2a <builtIn_cacheSound+0x28>
   12a26:	   |   moveq #1,d0
   12a28:	/--|-- bra.s 12a52 <builtIn_cacheSound+0x50>
	trimStack (&fun -> stack);
   12a2a:	|  \-> moveq #24,d0
   12a2c:	|      add.l 12(sp),d0
   12a30:	|      move.l d0,-(sp)
   12a32:	|      jsr 1528a <trimStack>
   12a38:	|      addq.l #4,sp
	if (cacheSound (fileNumber) == -1) return BR_ERROR;
   12a3a:	|      move.l (sp),d0
   12a3c:	|      move.l d0,-(sp)
   12a3e:	|      jsr d284 <cacheSound>
   12a44:	|      addq.l #4,sp
   12a46:	|      moveq #-1,d1
   12a48:	|      cmp.l d0,d1
   12a4a:	|  /-- bne.s 12a50 <builtIn_cacheSound+0x4e>
   12a4c:	|  |   moveq #1,d0
   12a4e:	+--|-- bra.s 12a52 <builtIn_cacheSound+0x50>
	return BR_CONTINUE;
   12a50:	|  \-> moveq #2,d0
}
   12a52:	\----> addq.l #4,sp
   12a54:	       rts

00012a56 <builtIn_burnString>:
	trimStack (&fun -> stack);
	if (x == IN_THE_CENTRE) x = (winWidth - stringWidth (newText)) >> 1;
	fixFont (pastePalette);
	burnStringToBackdrop (newText, x, y, pastePalette);
	delete[] newText; Todo: Amigize this*/
	KPrintF("burnString: Not implemented for Amiga yet");
   12a56:	pea 19cac <graphics.c.1c13408a+0x159>
   12a5c:	jsr 17366 <KPrintF>
   12a62:	addq.l #4,sp
	return BR_CONTINUE;
   12a64:	moveq #2,d0
}
   12a66:	rts

00012a68 <builtIn_setCharacterSpinSpeed>:

builtIn(setCharacterSpinSpeed)
{
   12a68:	          lea -12(sp),sp
	UNUSEDALL
	int speed, who;
	if (! getValueType(&speed, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12a6c:	          movea.l 20(sp),a0
   12a70:	          move.l 24(a0),d0
   12a74:	          move.l d0,-(sp)
   12a76:	          pea 1 <_start+0x1>
   12a7a:	          moveq #12,d0
   12a7c:	          add.l sp,d0
   12a7e:	          move.l d0,-(sp)
   12a80:	          jsr 14906 <getValueType>
   12a86:	          lea 12(sp),sp
   12a8a:	          tst.w d0
   12a8c:	      /-- bne.s 12a94 <builtIn_setCharacterSpinSpeed+0x2c>
   12a8e:	      |   moveq #1,d0
   12a90:	/-----|-- bra.w 12b2e <builtIn_setCharacterSpinSpeed+0xc6>
	trimStack (&fun -> stack);
   12a94:	|     \-> moveq #24,d0
   12a96:	|         add.l 20(sp),d0
   12a9a:	|         move.l d0,-(sp)
   12a9c:	|         jsr 1528a <trimStack>
   12aa2:	|         addq.l #4,sp
	if (! getValueType(&who, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12aa4:	|         movea.l 20(sp),a0
   12aa8:	|         move.l 24(a0),d0
   12aac:	|         move.l d0,-(sp)
   12aae:	|         pea 7 <_start+0x7>
   12ab2:	|         lea 8(sp),a0
   12ab6:	|         move.l a0,-(sp)
   12ab8:	|         jsr 14906 <getValueType>
   12abe:	|         lea 12(sp),sp
   12ac2:	|         tst.w d0
   12ac4:	|     /-- bne.s 12aca <builtIn_setCharacterSpinSpeed+0x62>
   12ac6:	|     |   moveq #1,d0
   12ac8:	+-----|-- bra.s 12b2e <builtIn_setCharacterSpinSpeed+0xc6>
	trimStack (&fun -> stack);
   12aca:	|     \-> moveq #24,d0
   12acc:	|         add.l 20(sp),d0
   12ad0:	|         move.l d0,-(sp)
   12ad2:	|         jsr 1528a <trimStack>
   12ad8:	|         addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (who);
   12ada:	|         move.l (sp),d0
   12adc:	|         move.l d0,-(sp)
   12ade:	|         jsr a75a <findPerson>
   12ae4:	|         addq.l #4,sp
   12ae6:	|         move.l d0,8(sp)

	if (thisPerson) {
   12aea:	|  /----- beq.s 12b14 <builtIn_setCharacterSpinSpeed+0xac>
		thisPerson -> spinSpeed = speed;
   12aec:	|  |      move.l 4(sp),d0
   12af0:	|  |      movea.l 8(sp),a0
   12af4:	|  |      move.l d0,122(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   12af8:	|  |      moveq #28,d0
   12afa:	|  |      add.l 20(sp),d0
   12afe:	|  |      pea 1 <_start+0x1>
   12b02:	|  |      pea 1 <_start+0x1>
   12b06:	|  |      move.l d0,-(sp)
   12b08:	|  |      jsr 151f8 <setVariable>
   12b0e:	|  |      lea 12(sp),sp
   12b12:	|  |  /-- bra.s 12b2c <builtIn_setCharacterSpinSpeed+0xc4>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   12b14:	|  \--|-> moveq #28,d0
   12b16:	|     |   add.l 20(sp),d0
   12b1a:	|     |   clr.l -(sp)
   12b1c:	|     |   pea 1 <_start+0x1>
   12b20:	|     |   move.l d0,-(sp)
   12b22:	|     |   jsr 151f8 <setVariable>
   12b28:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   12b2c:	|     \-> moveq #2,d0
}
   12b2e:	\-------> lea 12(sp),sp
   12b32:	          rts

00012b34 <builtIn_setCharacterAngleOffset>:

builtIn(setCharacterAngleOffset)
{
   12b34:	          lea -12(sp),sp
	UNUSEDALL
	int angle, who;
	if (! getValueType(&angle, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12b38:	          movea.l 20(sp),a0
   12b3c:	          move.l 24(a0),d0
   12b40:	          move.l d0,-(sp)
   12b42:	          pea 1 <_start+0x1>
   12b46:	          moveq #12,d0
   12b48:	          add.l sp,d0
   12b4a:	          move.l d0,-(sp)
   12b4c:	          jsr 14906 <getValueType>
   12b52:	          lea 12(sp),sp
   12b56:	          tst.w d0
   12b58:	      /-- bne.s 12b60 <builtIn_setCharacterAngleOffset+0x2c>
   12b5a:	      |   moveq #1,d0
   12b5c:	/-----|-- bra.w 12bfa <builtIn_setCharacterAngleOffset+0xc6>
	trimStack (&fun -> stack);
   12b60:	|     \-> moveq #24,d0
   12b62:	|         add.l 20(sp),d0
   12b66:	|         move.l d0,-(sp)
   12b68:	|         jsr 1528a <trimStack>
   12b6e:	|         addq.l #4,sp
	if (! getValueType(&who, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12b70:	|         movea.l 20(sp),a0
   12b74:	|         move.l 24(a0),d0
   12b78:	|         move.l d0,-(sp)
   12b7a:	|         pea 7 <_start+0x7>
   12b7e:	|         lea 8(sp),a0
   12b82:	|         move.l a0,-(sp)
   12b84:	|         jsr 14906 <getValueType>
   12b8a:	|         lea 12(sp),sp
   12b8e:	|         tst.w d0
   12b90:	|     /-- bne.s 12b96 <builtIn_setCharacterAngleOffset+0x62>
   12b92:	|     |   moveq #1,d0
   12b94:	+-----|-- bra.s 12bfa <builtIn_setCharacterAngleOffset+0xc6>
	trimStack (&fun -> stack);
   12b96:	|     \-> moveq #24,d0
   12b98:	|         add.l 20(sp),d0
   12b9c:	|         move.l d0,-(sp)
   12b9e:	|         jsr 1528a <trimStack>
   12ba4:	|         addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (who);
   12ba6:	|         move.l (sp),d0
   12ba8:	|         move.l d0,-(sp)
   12baa:	|         jsr a75a <findPerson>
   12bb0:	|         addq.l #4,sp
   12bb2:	|         move.l d0,8(sp)

	if (thisPerson) {
   12bb6:	|  /----- beq.s 12be0 <builtIn_setCharacterAngleOffset+0xac>
		thisPerson -> angleOffset = angle;
   12bb8:	|  |      move.l 4(sp),d0
   12bbc:	|  |      movea.l 8(sp),a0
   12bc0:	|  |      move.l d0,100(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   12bc4:	|  |      moveq #28,d0
   12bc6:	|  |      add.l 20(sp),d0
   12bca:	|  |      pea 1 <_start+0x1>
   12bce:	|  |      pea 1 <_start+0x1>
   12bd2:	|  |      move.l d0,-(sp)
   12bd4:	|  |      jsr 151f8 <setVariable>
   12bda:	|  |      lea 12(sp),sp
   12bde:	|  |  /-- bra.s 12bf8 <builtIn_setCharacterAngleOffset+0xc4>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   12be0:	|  \--|-> moveq #28,d0
   12be2:	|     |   add.l 20(sp),d0
   12be6:	|     |   clr.l -(sp)
   12be8:	|     |   pea 1 <_start+0x1>
   12bec:	|     |   move.l d0,-(sp)
   12bee:	|     |   jsr 151f8 <setVariable>
   12bf4:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   12bf8:	|     \-> moveq #2,d0
}
   12bfa:	\-------> lea 12(sp),sp
   12bfe:	          rts

00012c00 <builtIn_transitionMode>:


builtIn(transitionMode)
{
   12c00:	       subq.l #4,sp
	UNUSEDALL
	int n;
	if (! getValueType(&n, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12c02:	       movea.l 12(sp),a0
   12c06:	       move.l 24(a0),d0
   12c0a:	       move.l d0,-(sp)
   12c0c:	       pea 1 <_start+0x1>
   12c10:	       move.l sp,d0
   12c12:	       addq.l #8,d0
   12c14:	       move.l d0,-(sp)
   12c16:	       jsr 14906 <getValueType>
   12c1c:	       lea 12(sp),sp
   12c20:	       tst.w d0
   12c22:	   /-- bne.s 12c28 <builtIn_transitionMode+0x28>
   12c24:	   |   moveq #1,d0
   12c26:	/--|-- bra.s 12c5e <builtIn_transitionMode+0x5e>
	fadeMode = n;
   12c28:	|  \-> move.l (sp),d0
   12c2a:	|      move.l d0,d0
   12c2c:	|      move.b d0,1c95c <fadeMode>
	trimStack (&fun -> stack);
   12c32:	|      moveq #24,d0
   12c34:	|      add.l 12(sp),d0
   12c38:	|      move.l d0,-(sp)
   12c3a:	|      jsr 1528a <trimStack>
   12c40:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   12c42:	|      moveq #28,d0
   12c44:	|      add.l 12(sp),d0
   12c48:	|      pea 1 <_start+0x1>
   12c4c:	|      pea 1 <_start+0x1>
   12c50:	|      move.l d0,-(sp)
   12c52:	|      jsr 151f8 <setVariable>
   12c58:	|      lea 12(sp),sp
	return BR_CONTINUE;
   12c5c:	|      moveq #2,d0
}
   12c5e:	\----> addq.l #4,sp
   12c60:	       rts

00012c62 <builtIn__rem_updateDisplay>:

// Removed function - does nothing
builtIn(_rem_updateDisplay)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   12c62:	moveq #24,d0
   12c64:	add.l 8(sp),d0
   12c68:	move.l d0,-(sp)
   12c6a:	jsr 1528a <trimStack>
   12c70:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, TRUE);
   12c72:	moveq #28,d0
   12c74:	add.l 8(sp),d0
   12c78:	pea 1 <_start+0x1>
   12c7c:	pea 1 <_start+0x1>
   12c80:	move.l d0,-(sp)
   12c82:	jsr 151f8 <setVariable>
   12c88:	lea 12(sp),sp
	return BR_CONTINUE;
   12c8c:	moveq #2,d0
}
   12c8e:	rts

00012c90 <builtIn_getSoundCache>:
	if (! checkNew (&fun -> reg.varData.theStack)) return BR_ERROR;
	fun -> reg.varData.theStack -> first = NULL;
	fun -> reg.varData.theStack -> last = NULL;
	fun -> reg.varData.theStack -> timesUsed = 1;
	if (! getSoundCacheStack (&fun -> reg.varData.theStack)) return BR_ERROR; Todo: Amigize this?*/
	KPrintF("getSoundCache: Not implemented yet for Amiga");
   12c90:	pea 19cd6 <graphics.c.1c13408a+0x183>
   12c96:	jsr 17366 <KPrintF>
   12c9c:	addq.l #4,sp
	return BR_CONTINUE;
   12c9e:	moveq #2,d0
}
   12ca0:	rts

00012ca2 <builtIn_saveCustomData>:

builtIn(saveCustomData)
{
   12ca2:	       lea -16(sp),sp
   12ca6:	       move.l a6,-(sp)
	UNUSEDALL
	// saveCustomData (thisStack, fileName);
	char * fileNameB = getTextFromAnyVar(&(fun->stack->thisVar));
   12ca8:	       movea.l 28(sp),a0
   12cac:	       move.l 24(a0),d0
   12cb0:	       move.l d0,-(sp)
   12cb2:	       jsr 14edc <getTextFromAnyVar>
   12cb8:	       addq.l #4,sp
   12cba:	       move.l d0,16(sp)
	if (!fileNameB) return BR_ERROR;
   12cbe:	   /-- bne.s 12cc6 <builtIn_saveCustomData+0x24>
   12cc0:	   |   moveq #1,d0
   12cc2:	/--|-- bra.w 12d78 <builtIn_saveCustomData+0xd6>

	char * fileName = encodeFilename(fileNameB);
   12cc6:	|  \-> move.l 16(sp),-(sp)
   12cca:	|      jsr 2fe <encodeFilename>
   12cd0:	|      addq.l #4,sp
   12cd2:	|      move.l d0,12(sp)
	FreeVec(fileNameB);
   12cd6:	|      move.l 16(sp),8(sp)
   12cdc:	|      move.l 1ca82 <SysBase>,d0
   12ce2:	|      movea.l d0,a6
   12ce4:	|      movea.l 8(sp),a1
   12ce8:	|      jsr -690(a6)

	if (failSecurityCheck(fileName)) return BR_ERROR;
   12cec:	|      move.l 12(sp),-(sp)
   12cf0:	|      jsr e43c <failSecurityCheck>
   12cf6:	|      addq.l #4,sp
   12cf8:	|      tst.w d0
   12cfa:	|  /-- beq.s 12d00 <builtIn_saveCustomData+0x5e>
   12cfc:	|  |   moveq #1,d0
   12cfe:	+--|-- bra.s 12d78 <builtIn_saveCustomData+0xd6>
	trimStack(&fun->stack);
   12d00:	|  \-> moveq #24,d0
   12d02:	|      add.l 28(sp),d0
   12d06:	|      move.l d0,-(sp)
   12d08:	|      jsr 1528a <trimStack>
   12d0e:	|      addq.l #4,sp

	if (fun->stack->thisVar.varType != SVT_STACK) {
   12d10:	|      movea.l 28(sp),a0
   12d14:	|      movea.l 24(a0),a0
   12d18:	|      move.l (a0),d0
   12d1a:	|      moveq #6,d1
   12d1c:	|      cmp.l d0,d1
   12d1e:	|  /-- beq.s 12d32 <builtIn_saveCustomData+0x90>
		KPrintF("First parameter isn't a stack");
   12d20:	|  |   pea 19d03 <graphics.c.1c13408a+0x1b0>
   12d26:	|  |   jsr 17366 <KPrintF>
   12d2c:	|  |   addq.l #4,sp
		return BR_ERROR;
   12d2e:	|  |   moveq #1,d0
   12d30:	+--|-- bra.s 12d78 <builtIn_saveCustomData+0xd6>
	}
	if (!stackToFile(fileName, &fun->stack->thisVar)) return BR_ERROR;
   12d32:	|  \-> movea.l 28(sp),a0
   12d36:	|      move.l 24(a0),d0
   12d3a:	|      move.l d0,-(sp)
   12d3c:	|      move.l 16(sp),-(sp)
   12d40:	|      jsr e08c <stackToFile>
   12d46:	|      addq.l #8,sp
   12d48:	|      tst.w d0
   12d4a:	|  /-- bne.s 12d50 <builtIn_saveCustomData+0xae>
   12d4c:	|  |   moveq #1,d0
   12d4e:	+--|-- bra.s 12d78 <builtIn_saveCustomData+0xd6>
	trimStack(&fun->stack);
   12d50:	|  \-> moveq #24,d0
   12d52:	|      add.l 28(sp),d0
   12d56:	|      move.l d0,-(sp)
   12d58:	|      jsr 1528a <trimStack>
   12d5e:	|      addq.l #4,sp
	FreeVec(fileName);
   12d60:	|      move.l 12(sp),4(sp)
   12d66:	|      move.l 1ca82 <SysBase>,d0
   12d6c:	|      movea.l d0,a6
   12d6e:	|      movea.l 4(sp),a1
   12d72:	|      jsr -690(a6)
	return BR_CONTINUE;
   12d76:	|      moveq #2,d0
}
   12d78:	\----> movea.l (sp)+,a6
   12d7a:	       lea 16(sp),sp
   12d7e:	       rts

00012d80 <builtIn_loadCustomData>:

builtIn(loadCustomData)
{
   12d80:	       lea -28(sp),sp
   12d84:	       move.l a6,-(sp)
	UNUSEDALL

	char * newTextA = getTextFromAnyVar(&(fun->stack->thisVar));
   12d86:	       movea.l 40(sp),a0
   12d8a:	       move.l 24(a0),d0
   12d8e:	       move.l d0,-(sp)
   12d90:	       jsr 14edc <getTextFromAnyVar>
   12d96:	       addq.l #4,sp
   12d98:	       move.l d0,28(sp)
	if (!newTextA) return BR_ERROR;
   12d9c:	   /-- bne.s 12da4 <builtIn_loadCustomData+0x24>
   12d9e:	   |   moveq #1,d0
   12da0:	/--|-- bra.w 12ea0 <builtIn_loadCustomData+0x120>

	char * newText = encodeFilename(newTextA);
   12da4:	|  \-> move.l 28(sp),-(sp)
   12da8:	|      jsr 2fe <encodeFilename>
   12dae:	|      addq.l #4,sp
   12db0:	|      move.l d0,24(sp)
	FreeVec(newTextA);
   12db4:	|      move.l 28(sp),20(sp)
   12dba:	|      move.l 1ca82 <SysBase>,d0
   12dc0:	|      movea.l d0,a6
   12dc2:	|      movea.l 20(sp),a1
   12dc6:	|      jsr -690(a6)

	if (failSecurityCheck(newText)) return BR_ERROR;
   12dca:	|      move.l 24(sp),-(sp)
   12dce:	|      jsr e43c <failSecurityCheck>
   12dd4:	|      addq.l #4,sp
   12dd6:	|      tst.w d0
   12dd8:	|  /-- beq.s 12de0 <builtIn_loadCustomData+0x60>
   12dda:	|  |   moveq #1,d0
   12ddc:	+--|-- bra.w 12ea0 <builtIn_loadCustomData+0x120>
	trimStack(&fun->stack);
   12de0:	|  \-> moveq #24,d0
   12de2:	|      add.l 40(sp),d0
   12de6:	|      move.l d0,-(sp)
   12de8:	|      jsr 1528a <trimStack>
   12dee:	|      addq.l #4,sp

	unlinkVar(&fun->reg);
   12df0:	|      moveq #28,d0
   12df2:	|      add.l 40(sp),d0
   12df6:	|      move.l d0,-(sp)
   12df8:	|      jsr 14b54 <unlinkVar>
   12dfe:	|      addq.l #4,sp
	fun->reg.varType = SVT_STACK;
   12e00:	|      movea.l 40(sp),a0
   12e04:	|      moveq #6,d0
   12e06:	|      move.l d0,28(a0)
	fun->reg.varData.theStack = AllocVec(sizeof(struct stackHandler), MEMF_ANY);
   12e0a:	|      moveq #12,d0
   12e0c:	|      move.l d0,16(sp)
   12e10:	|      clr.l 12(sp)
   12e14:	|      move.l 1ca82 <SysBase>,d0
   12e1a:	|      movea.l d0,a6
   12e1c:	|      move.l 16(sp),d0
   12e20:	|      move.l 12(sp),d1
   12e24:	|      jsr -684(a6)
   12e28:	|      move.l d0,8(sp)
   12e2c:	|      move.l 8(sp),d0
   12e30:	|      movea.l 40(sp),a0
   12e34:	|      move.l d0,32(a0)
	if (!fun->reg.varData.theStack) return BR_ERROR;
   12e38:	|      movea.l 40(sp),a0
   12e3c:	|      move.l 32(a0),d0
   12e40:	|  /-- bne.s 12e46 <builtIn_loadCustomData+0xc6>
   12e42:	|  |   moveq #1,d0
   12e44:	+--|-- bra.s 12ea0 <builtIn_loadCustomData+0x120>
	fun->reg.varData.theStack->first = NULL;
   12e46:	|  \-> movea.l 40(sp),a0
   12e4a:	|      movea.l 32(a0),a0
   12e4e:	|      clr.l (a0)
	fun->reg.varData.theStack->last = NULL;
   12e50:	|      movea.l 40(sp),a0
   12e54:	|      movea.l 32(a0),a0
   12e58:	|      clr.l 4(a0)
	fun->reg.varData.theStack->timesUsed = 1;
   12e5c:	|      movea.l 40(sp),a0
   12e60:	|      movea.l 32(a0),a0
   12e64:	|      moveq #1,d0
   12e66:	|      move.l d0,8(a0)
	if (!fileToStack(newText, fun->reg.varData.theStack)) return BR_ERROR;
   12e6a:	|      movea.l 40(sp),a0
   12e6e:	|      move.l 32(a0),d0
   12e72:	|      move.l d0,-(sp)
   12e74:	|      move.l 28(sp),-(sp)
   12e78:	|      jsr dac6 <fileToStack>
   12e7e:	|      addq.l #8,sp
   12e80:	|      tst.w d0
   12e82:	|  /-- bne.s 12e88 <builtIn_loadCustomData+0x108>
   12e84:	|  |   moveq #1,d0
   12e86:	+--|-- bra.s 12ea0 <builtIn_loadCustomData+0x120>
	FreeVec(newText);
   12e88:	|  \-> move.l 24(sp),4(sp)
   12e8e:	|      move.l 1ca82 <SysBase>,d0
   12e94:	|      movea.l d0,a6
   12e96:	|      movea.l 4(sp),a1
   12e9a:	|      jsr -690(a6)
	return BR_CONTINUE;
   12e9e:	|      moveq #2,d0
}
   12ea0:	\----> movea.l (sp)+,a6
   12ea2:	       lea 28(sp),sp
   12ea6:	       rts

00012ea8 <builtIn_setCustomEncoding>:

builtIn(setCustomEncoding)
{
   12ea8:	       subq.l #4,sp
	UNUSEDALL
	int n;
	if (! getValueType(&n, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12eaa:	       movea.l 12(sp),a0
   12eae:	       move.l 24(a0),d0
   12eb2:	       move.l d0,-(sp)
   12eb4:	       pea 1 <_start+0x1>
   12eb8:	       move.l sp,d0
   12eba:	       addq.l #8,d0
   12ebc:	       move.l d0,-(sp)
   12ebe:	       jsr 14906 <getValueType>
   12ec4:	       lea 12(sp),sp
   12ec8:	       tst.w d0
   12eca:	   /-- bne.s 12ed0 <builtIn_setCustomEncoding+0x28>
   12ecc:	   |   moveq #1,d0
   12ece:	/--|-- bra.s 12f06 <builtIn_setCustomEncoding+0x5e>
	saveEncoding = n;
   12ed0:	|  \-> move.l (sp),d0
   12ed2:	|      move.l d0,d0
   12ed4:	|      move.w d0,1cb3a <saveEncoding>
	trimStack (&fun -> stack);
   12eda:	|      moveq #24,d0
   12edc:	|      add.l 12(sp),d0
   12ee0:	|      move.l d0,-(sp)
   12ee2:	|      jsr 1528a <trimStack>
   12ee8:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   12eea:	|      moveq #28,d0
   12eec:	|      add.l 12(sp),d0
   12ef0:	|      pea 1 <_start+0x1>
   12ef4:	|      pea 1 <_start+0x1>
   12ef8:	|      move.l d0,-(sp)
   12efa:	|      jsr 151f8 <setVariable>
   12f00:	|      lea 12(sp),sp
	return BR_CONTINUE;
   12f04:	|      moveq #2,d0
}
   12f06:	\----> addq.l #4,sp
   12f08:	       rts

00012f0a <builtIn_freeSound>:

builtIn(freeSound)
{
   12f0a:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   12f0c:	       movea.l 12(sp),a0
   12f10:	       move.l 24(a0),d0
   12f14:	       move.l d0,-(sp)
   12f16:	       pea 5 <_start+0x5>
   12f1a:	       move.l sp,d0
   12f1c:	       addq.l #8,d0
   12f1e:	       move.l d0,-(sp)
   12f20:	       jsr 14906 <getValueType>
   12f26:	       lea 12(sp),sp
   12f2a:	       tst.w d0
   12f2c:	   /-- bne.s 12f32 <builtIn_freeSound+0x28>
   12f2e:	   |   moveq #1,d0
   12f30:	/--|-- bra.s 12f50 <builtIn_freeSound+0x46>
	trimStack (&fun -> stack);
   12f32:	|  \-> moveq #24,d0
   12f34:	|      add.l 12(sp),d0
   12f38:	|      move.l d0,-(sp)
   12f3a:	|      jsr 1528a <trimStack>
   12f40:	|      addq.l #4,sp
	huntKillFreeSound (v);
   12f42:	|      move.l (sp),d0
   12f44:	|      move.l d0,-(sp)
   12f46:	|      jsr d288 <huntKillFreeSound>
   12f4c:	|      addq.l #4,sp
	return BR_CONTINUE;
   12f4e:	|      moveq #2,d0
}
   12f50:	\----> addq.l #4,sp
   12f52:	       rts

00012f54 <builtIn_parallaxAdd>:

builtIn(parallaxAdd)
{
   12f54:	       lea -12(sp),sp
   12f58:	       move.l d2,-(sp)
	/*if (frozenStuff) {
		fatal ("Can't set background parallax image while frozen");
		return BR_ERROR;
	} else { Todo: Amigize this*/
		int wrapX, wrapY, v;
		if (! getValueType(&wrapY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12f5a:	       movea.l 24(sp),a0
   12f5e:	       move.l 24(a0),d0
   12f62:	       move.l d0,-(sp)
   12f64:	       pea 1 <_start+0x1>
   12f68:	       moveq #16,d0
   12f6a:	       add.l sp,d0
   12f6c:	       move.l d0,-(sp)
   12f6e:	       jsr 14906 <getValueType>
   12f74:	       lea 12(sp),sp
   12f78:	       tst.w d0
   12f7a:	   /-- bne.s 12f82 <builtIn_parallaxAdd+0x2e>
   12f7c:	   |   moveq #1,d0
   12f7e:	/--|-- bra.w 13056 <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   12f82:	|  \-> moveq #24,d0
   12f84:	|      add.l 24(sp),d0
   12f88:	|      move.l d0,-(sp)
   12f8a:	|      jsr 1528a <trimStack>
   12f90:	|      addq.l #4,sp
		if (! getValueType(&wrapX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12f92:	|      movea.l 24(sp),a0
   12f96:	|      move.l 24(a0),d0
   12f9a:	|      move.l d0,-(sp)
   12f9c:	|      pea 1 <_start+0x1>
   12fa0:	|      moveq #20,d0
   12fa2:	|      add.l sp,d0
   12fa4:	|      move.l d0,-(sp)
   12fa6:	|      jsr 14906 <getValueType>
   12fac:	|      lea 12(sp),sp
   12fb0:	|      tst.w d0
   12fb2:	|  /-- bne.s 12fba <builtIn_parallaxAdd+0x66>
   12fb4:	|  |   moveq #1,d0
   12fb6:	+--|-- bra.w 13056 <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   12fba:	|  \-> moveq #24,d0
   12fbc:	|      add.l 24(sp),d0
   12fc0:	|      move.l d0,-(sp)
   12fc2:	|      jsr 1528a <trimStack>
   12fc8:	|      addq.l #4,sp
		if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   12fca:	|      movea.l 24(sp),a0
   12fce:	|      move.l 24(a0),d0
   12fd2:	|      move.l d0,-(sp)
   12fd4:	|      pea 5 <_start+0x5>
   12fd8:	|      lea 12(sp),a0
   12fdc:	|      move.l a0,-(sp)
   12fde:	|      jsr 14906 <getValueType>
   12fe4:	|      lea 12(sp),sp
   12fe8:	|      tst.w d0
   12fea:	|  /-- bne.s 12ff0 <builtIn_parallaxAdd+0x9c>
   12fec:	|  |   moveq #1,d0
   12fee:	+--|-- bra.s 13056 <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   12ff0:	|  \-> moveq #24,d0
   12ff2:	|      add.l 24(sp),d0
   12ff6:	|      move.l d0,-(sp)
   12ff8:	|      jsr 1528a <trimStack>
   12ffe:	|      addq.l #4,sp

		if (! loadParallax (v, wrapX, wrapY)) return BR_ERROR;
   13000:	|      move.l 8(sp),d0
   13004:	|      move.l d0,d0
   13006:	|      moveq #0,d2
   13008:	|      move.w d0,d2
   1300a:	|      move.l 12(sp),d0
   1300e:	|      move.l d0,d0
   13010:	|      moveq #0,d1
   13012:	|      move.w d0,d1
   13014:	|      move.l 4(sp),d0
   13018:	|      move.l d0,d0
   1301a:	|      move.w d0,d0
   1301c:	|      andi.l #65535,d0
   13022:	|      move.l d2,-(sp)
   13024:	|      move.l d1,-(sp)
   13026:	|      move.l d0,-(sp)
   13028:	|      jsr d4a4 <loadParallax>
   1302e:	|      lea 12(sp),sp
   13032:	|      tst.w d0
   13034:	|  /-- bne.s 1303a <builtIn_parallaxAdd+0xe6>
   13036:	|  |   moveq #1,d0
   13038:	+--|-- bra.s 13056 <builtIn_parallaxAdd+0x102>
		setVariable (&fun -> reg, SVT_INT, 1);
   1303a:	|  \-> moveq #28,d0
   1303c:	|      add.l 24(sp),d0
   13040:	|      pea 1 <_start+0x1>
   13044:	|      pea 1 <_start+0x1>
   13048:	|      move.l d0,-(sp)
   1304a:	|      jsr 151f8 <setVariable>
   13050:	|      lea 12(sp),sp
	//}
	return BR_CONTINUE;
   13054:	|      moveq #2,d0
}
   13056:	\----> move.l (sp)+,d2
   13058:	       lea 12(sp),sp
   1305c:	       rts

0001305e <builtIn_parallaxClear>:

builtIn(parallaxClear)
{
	UNUSEDALL
	killParallax ();
   1305e:	jsr d3dc <killParallax>
	setVariable (&fun -> reg, SVT_INT, 1);
   13064:	moveq #28,d0
   13066:	add.l 8(sp),d0
   1306a:	pea 1 <_start+0x1>
   1306e:	pea 1 <_start+0x1>
   13072:	move.l d0,-(sp)
   13074:	jsr 151f8 <setVariable>
   1307a:	lea 12(sp),sp
	return BR_CONTINUE;
   1307e:	moveq #2,d0
}
   13080:	rts

00013082 <builtIn_getPixelColour>:
	if (! checkNew (&fun -> reg.varData.theStack)) return BR_ERROR;
	fun -> reg.varData.theStack -> first = NULL;
	fun -> reg.varData.theStack -> last = NULL;
	fun -> reg.varData.theStack -> timesUsed = 1;
	if (! getRGBIntoStack (x, y, &fun -> reg.varData.theStack)) return BR_ERROR; Todo: Amigize this*/
	KPrintF("getPixelColor: Not implemented for Amiga");
   13082:	pea 19d21 <graphics.c.1c13408a+0x1ce>
   13088:	jsr 17366 <KPrintF>
   1308e:	addq.l #4,sp

	return BR_CONTINUE;
   13090:	moveq #2,d0
}
   13092:	rts

00013094 <builtIn_makeFastArray>:

builtIn(makeFastArray)
{
   13094:	             subq.l #8,sp
	UNUSEDALL
	switch (fun -> stack -> thisVar.varType) {
   13096:	             movea.l 16(sp),a0
   1309a:	             movea.l 24(a0),a0
   1309e:	             move.l (a0),d0
   130a0:	             moveq #1,d1
   130a2:	             cmp.l d0,d1
   130a4:	      /----- beq.s 130ec <builtIn_makeFastArray+0x58>
   130a6:	      |      moveq #6,d1
   130a8:	      |      cmp.l d0,d1
   130aa:	/-----|----- bne.s 1312a <builtIn_makeFastArray+0x96>
		case SVT_STACK:
		{
			BOOL success = makeFastArrayFromStack (&fun -> reg, fun -> stack -> thisVar.varData.theStack);
   130ac:	|     |      movea.l 16(sp),a0
   130b0:	|     |      movea.l 24(a0),a0
   130b4:	|     |      move.l 4(a0),d1
   130b8:	|     |      moveq #28,d0
   130ba:	|     |      add.l 16(sp),d0
   130be:	|     |      move.l d1,-(sp)
   130c0:	|     |      move.l d0,-(sp)
   130c2:	|     |      jsr 149b8 <makeFastArrayFromStack>
   130c8:	|     |      addq.l #8,sp
   130ca:	|     |      move.w d0,6(sp)
			trimStack (&fun -> stack);
   130ce:	|     |      moveq #24,d0
   130d0:	|     |      add.l 16(sp),d0
   130d4:	|     |      move.l d0,-(sp)
   130d6:	|     |      jsr 1528a <trimStack>
   130dc:	|     |      addq.l #4,sp
			return success ? BR_CONTINUE : BR_ERROR;
   130de:	|     |      tst.w 6(sp)
   130e2:	|     |  /-- beq.s 130e8 <builtIn_makeFastArray+0x54>
   130e4:	|     |  |   moveq #2,d0
   130e6:	|  /--|--|-- bra.s 1313c <builtIn_makeFastArray+0xa8>
   130e8:	|  |  |  \-> moveq #1,d0
   130ea:	|  +--|----- bra.s 1313c <builtIn_makeFastArray+0xa8>
		}
			break;

		case SVT_INT:
		{
			int i = fun -> stack -> thisVar.varData.intValue;
   130ec:	|  |  \----> movea.l 16(sp),a0
   130f0:	|  |         movea.l 24(a0),a0
   130f4:	|  |         move.l 4(a0),2(sp)
			trimStack (&fun -> stack);
   130fa:	|  |         moveq #24,d0
   130fc:	|  |         add.l 16(sp),d0
   13100:	|  |         move.l d0,-(sp)
   13102:	|  |         jsr 1528a <trimStack>
   13108:	|  |         addq.l #4,sp
			return makeFastArraySize (&fun -> reg, i) ? BR_CONTINUE : BR_ERROR;
   1310a:	|  |         moveq #28,d0
   1310c:	|  |         add.l 16(sp),d0
   13110:	|  |         move.l 2(sp),-(sp)
   13114:	|  |         move.l d0,-(sp)
   13116:	|  |         jsr 14a22 <makeFastArraySize>
   1311c:	|  |         addq.l #8,sp
   1311e:	|  |         tst.w d0
   13120:	|  |     /-- beq.s 13126 <builtIn_makeFastArray+0x92>
   13122:	|  |     |   moveq #2,d0
   13124:	|  +-----|-- bra.s 1313c <builtIn_makeFastArray+0xa8>
   13126:	|  |     \-> moveq #1,d0
   13128:	|  +-------- bra.s 1313c <builtIn_makeFastArray+0xa8>
		}
			break;

		default:
			break;
   1312a:	\--|-------> nop
	}
	KPrintF ("Parameter must be a number or a stack.");
   1312c:	   |         pea 19d4a <graphics.c.1c13408a+0x1f7>
   13132:	   |         jsr 17366 <KPrintF>
   13138:	   |         addq.l #4,sp
	return BR_ERROR;
   1313a:	   |         moveq #1,d0
}
   1313c:	   \-------> addq.l #8,sp
   1313e:	             rts

00013140 <builtIn_getCharacterScale>:

builtIn(getCharacterScale)
{
   13140:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   13142:	          movea.l 16(sp),a0
   13146:	          move.l 24(a0),d0
   1314a:	          move.l d0,-(sp)
   1314c:	          pea 7 <_start+0x7>
   13150:	          move.l sp,d0
   13152:	          addq.l #8,d0
   13154:	          move.l d0,-(sp)
   13156:	          jsr 14906 <getValueType>
   1315c:	          lea 12(sp),sp
   13160:	          tst.w d0
   13162:	      /-- bne.s 13168 <builtIn_getCharacterScale+0x28>
   13164:	      |   moveq #1,d0
   13166:	/-----|-- bra.s 131e2 <builtIn_getCharacterScale+0xa2>
	trimStack (&fun -> stack);
   13168:	|     \-> moveq #24,d0
   1316a:	|         add.l 16(sp),d0
   1316e:	|         move.l d0,-(sp)
   13170:	|         jsr 1528a <trimStack>
   13176:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   13178:	|         move.l (sp),d0
   1317a:	|         move.l d0,-(sp)
   1317c:	|         jsr a75a <findPerson>
   13182:	|         addq.l #4,sp
   13184:	|         move.l d0,4(sp)
	if (pers) {
   13188:	|  /----- beq.s 131c8 <builtIn_getCharacterScale+0x88>
		setVariable (&fun -> reg, SVT_INT, pers -> scale * (FLOAT) 100); 
   1318a:	|  |      movea.l 4(sp),a0
   1318e:	|  |      move.l 32(a0),d0
   13192:	|  |      move.l #1120403456,-(sp)
   13198:	|  |      move.l d0,-(sp)
   1319a:	|  |      jsr 1784a <__mulsf3>
   131a0:	|  |      addq.l #8,sp
   131a2:	|  |      move.l d0,-(sp)
   131a4:	|  |      jsr 17730 <__fixsfsi>
   131aa:	|  |      addq.l #4,sp
   131ac:	|  |      move.l d0,d1
   131ae:	|  |      moveq #28,d0
   131b0:	|  |      add.l 16(sp),d0
   131b4:	|  |      move.l d1,-(sp)
   131b6:	|  |      pea 1 <_start+0x1>
   131ba:	|  |      move.l d0,-(sp)
   131bc:	|  |      jsr 151f8 <setVariable>
   131c2:	|  |      lea 12(sp),sp
   131c6:	|  |  /-- bra.s 131e0 <builtIn_getCharacterScale+0xa0>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   131c8:	|  \--|-> moveq #28,d0
   131ca:	|     |   add.l 16(sp),d0
   131ce:	|     |   clr.l -(sp)
   131d0:	|     |   pea 1 <_start+0x1>
   131d4:	|     |   move.l d0,-(sp)
   131d6:	|     |   jsr 151f8 <setVariable>
   131dc:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   131e0:	|     \-> moveq #2,d0
}
   131e2:	\-------> addq.l #8,sp
   131e4:	          rts

000131e6 <builtIn_getLanguageID>:

builtIn(getLanguageID)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, gameSettings.languageID);
   131e6:	move.l 1cb5e <gameSettings>,d0
   131ec:	move.l d0,d1
   131ee:	moveq #28,d0
   131f0:	add.l 8(sp),d0
   131f4:	move.l d1,-(sp)
   131f6:	pea 1 <_start+0x1>
   131fa:	move.l d0,-(sp)
   131fc:	jsr 151f8 <setVariable>
   13202:	lea 12(sp),sp
	return BR_CONTINUE;
   13206:	moveq #2,d0
}
   13208:	rts

0001320a <builtIn__rem_launchWith>:
// Removed function
builtIn(_rem_launchWith)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   1320a:	moveq #24,d0
   1320c:	add.l 8(sp),d0
   13210:	move.l d0,-(sp)
   13212:	jsr 1528a <trimStack>
   13218:	addq.l #4,sp
	trimStack (&fun -> stack);
   1321a:	moveq #24,d0
   1321c:	add.l 8(sp),d0
   13220:	move.l d0,-(sp)
   13222:	jsr 1528a <trimStack>
   13228:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, FALSE);
   1322a:	moveq #28,d0
   1322c:	add.l 8(sp),d0
   13230:	clr.l -(sp)
   13232:	pea 1 <_start+0x1>
   13236:	move.l d0,-(sp)
   13238:	jsr 151f8 <setVariable>
   1323e:	lea 12(sp),sp

	return BR_CONTINUE;
   13242:	moveq #2,d0

}
   13244:	rts

00013246 <builtIn_getFramesPerSecond>:

builtIn(getFramesPerSecond)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, lastFramesPerSecond);
   13246:	move.l 1c402 <lastFramesPerSecond>,d1
   1324c:	moveq #28,d0
   1324e:	add.l 8(sp),d0
   13252:	move.l d1,-(sp)
   13254:	pea 1 <_start+0x1>
   13258:	move.l d0,-(sp)
   1325a:	jsr 151f8 <setVariable>
   13260:	lea 12(sp),sp
	return BR_CONTINUE;
   13264:	moveq #2,d0
}
   13266:	rts

00013268 <builtIn_showThumbnail>:
	//				deb ("aaaaa is still ", aaaaa);
	delete[] aaaaa;
	//				deb ("Deleted", "aaaaa");
	showThumbnail (file, x, y);
	delete[] file; Todo Amigize this?*/
	return BR_CONTINUE;
   13268:	moveq #2,d0
}
   1326a:	rts

0001326c <builtIn_setThumbnailSize>:

builtIn(setThumbnailSize)
{
   1326c:	          lea -52(sp),sp
	UNUSEDALL
	if (! getValueType(&thumbHeight, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   13270:	          movea.l 60(sp),a0
   13274:	          move.l 24(a0),d0
   13278:	          move.l d0,-(sp)
   1327a:	          pea 1 <_start+0x1>
   1327e:	          pea 1c998 <thumbHeight>
   13284:	          jsr 14906 <getValueType>
   1328a:	          lea 12(sp),sp
   1328e:	          tst.w d0
   13290:	      /-- bne.s 13298 <builtIn_setThumbnailSize+0x2c>
   13292:	      |   moveq #1,d0
   13294:	/-----|-- bra.w 13354 <builtIn_setThumbnailSize+0xe8>
	trimStack (&fun -> stack);
   13298:	|     \-> moveq #24,d0
   1329a:	|         add.l 60(sp),d0
   1329e:	|         move.l d0,-(sp)
   132a0:	|         jsr 1528a <trimStack>
   132a6:	|         addq.l #4,sp
	if (! getValueType(&thumbWidth, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   132a8:	|         movea.l 60(sp),a0
   132ac:	|         move.l 24(a0),d0
   132b0:	|         move.l d0,-(sp)
   132b2:	|         pea 1 <_start+0x1>
   132b6:	|         pea 1c994 <thumbWidth>
   132bc:	|         jsr 14906 <getValueType>
   132c2:	|         lea 12(sp),sp
   132c6:	|         tst.w d0
   132c8:	|     /-- bne.s 132d0 <builtIn_setThumbnailSize+0x64>
   132ca:	|     |   moveq #1,d0
   132cc:	+-----|-- bra.w 13354 <builtIn_setThumbnailSize+0xe8>
	trimStack (&fun -> stack);
   132d0:	|     \-> moveq #24,d0
   132d2:	|         add.l 60(sp),d0
   132d6:	|         move.l d0,-(sp)
   132d8:	|         jsr 1528a <trimStack>
   132de:	|         addq.l #4,sp
	if (thumbWidth < 0 || thumbHeight < 0 || (unsigned int) thumbWidth > winWidth || (unsigned int) thumbHeight > winHeight) {
   132e0:	|         move.l 1c994 <thumbWidth>,d0
   132e6:	|     /-- bmi.s 13314 <builtIn_setThumbnailSize+0xa8>
   132e8:	|     |   move.l 1c998 <thumbHeight>,d0
   132ee:	|     +-- bmi.s 13314 <builtIn_setThumbnailSize+0xa8>
   132f0:	|     |   move.l 1c994 <thumbWidth>,d0
   132f6:	|     |   move.l d0,d1
   132f8:	|     |   move.l 1c9d6 <winWidth>,d0
   132fe:	|     |   cmp.l d1,d0
   13300:	|     +-- bcs.s 13314 <builtIn_setThumbnailSize+0xa8>
   13302:	|     |   move.l 1c998 <thumbHeight>,d0
   13308:	|     |   move.l d0,d1
   1330a:	|     |   move.l 1c9da <winHeight>,d0
   13310:	|     |   cmp.l d1,d0
   13312:	|  /--|-- bcc.s 13352 <builtIn_setThumbnailSize+0xe6>
		char buff[50];
		sprintf (buff, "%d x %d", thumbWidth, thumbHeight);
   13314:	|  |  \-> move.l 1c998 <thumbHeight>,d1
   1331a:	|  |      move.l 1c994 <thumbWidth>,d0
   13320:	|  |      move.l d1,-(sp)
   13322:	|  |      move.l d0,-(sp)
   13324:	|  |      pea 19d71 <graphics.c.1c13408a+0x21e>
   1332a:	|  |      lea 14(sp),a0
   1332e:	|  |      move.l a0,-(sp)
   13330:	|  |      jsr 14110 <sprintf>
   13336:	|  |      lea 16(sp),sp
		KPrintF ("Invalid thumbnail size", buff);
   1333a:	|  |      lea 2(sp),a0
   1333e:	|  |      move.l a0,-(sp)
   13340:	|  |      pea 19d79 <graphics.c.1c13408a+0x226>
   13346:	|  |      jsr 17366 <KPrintF>
   1334c:	|  |      addq.l #8,sp
		return BR_ERROR;
   1334e:	|  |      moveq #1,d0
   13350:	+--|----- bra.s 13354 <builtIn_setThumbnailSize+0xe8>
	}
	return BR_CONTINUE;
   13352:	|  \----> moveq #2,d0
}
   13354:	\-------> lea 52(sp),sp
   13358:	          rts

0001335a <builtIn_hasFlag>:

builtIn(hasFlag)
{
   1335a:	       lea -12(sp),sp
   1335e:	       move.l d2,-(sp)
	UNUSEDALL
	int objNum, flagIndex;
	if (! getValueType(&flagIndex, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   13360:	       movea.l 24(sp),a0
   13364:	       move.l 24(a0),d0
   13368:	       move.l d0,-(sp)
   1336a:	       pea 1 <_start+0x1>
   1336e:	       lea 12(sp),a0
   13372:	       move.l a0,-(sp)
   13374:	       jsr 14906 <getValueType>
   1337a:	       lea 12(sp),sp
   1337e:	       tst.w d0
   13380:	   /-- bne.s 13388 <builtIn_hasFlag+0x2e>
   13382:	   |   moveq #1,d0
   13384:	/--|-- bra.w 13418 <builtIn_hasFlag+0xbe>
	trimStack (&fun -> stack);
   13388:	|  \-> moveq #24,d0
   1338a:	|      add.l 24(sp),d0
   1338e:	|      move.l d0,-(sp)
   13390:	|      jsr 1528a <trimStack>
   13396:	|      addq.l #4,sp
	if (! getValueType(&objNum, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   13398:	|      movea.l 24(sp),a0
   1339c:	|      move.l 24(a0),d0
   133a0:	|      move.l d0,-(sp)
   133a2:	|      pea 7 <_start+0x7>
   133a6:	|      moveq #16,d0
   133a8:	|      add.l sp,d0
   133aa:	|      move.l d0,-(sp)
   133ac:	|      jsr 14906 <getValueType>
   133b2:	|      lea 12(sp),sp
   133b6:	|      tst.w d0
   133b8:	|  /-- bne.s 133be <builtIn_hasFlag+0x64>
   133ba:	|  |   moveq #1,d0
   133bc:	+--|-- bra.s 13418 <builtIn_hasFlag+0xbe>
	trimStack (&fun -> stack);
   133be:	|  \-> moveq #24,d0
   133c0:	|      add.l 24(sp),d0
   133c4:	|      move.l d0,-(sp)
   133c6:	|      jsr 1528a <trimStack>
   133cc:	|      addq.l #4,sp
	struct objectType * objT = findObjectType (objNum);
   133ce:	|      move.l 8(sp),d0
   133d2:	|      move.l d0,-(sp)
   133d4:	|      jsr d650 <findObjectType>
   133da:	|      addq.l #4,sp
   133dc:	|      move.l d0,12(sp)
	if (! objT) return BR_ERROR;
   133e0:	|  /-- bne.s 133e6 <builtIn_hasFlag+0x8c>
   133e2:	|  |   moveq #1,d0
   133e4:	+--|-- bra.s 13418 <builtIn_hasFlag+0xbe>
	setVariable (&fun -> reg, SVT_INT, objT->flags & (1 << flagIndex));
   133e6:	|  \-> movea.l 12(sp),a0
   133ea:	|      move.w 36(a0),d0
   133ee:	|      moveq #0,d2
   133f0:	|      move.w d0,d2
   133f2:	|      move.l 4(sp),d1
   133f6:	|      moveq #1,d0
   133f8:	|      lsl.l d1,d0
   133fa:	|      move.l d2,d1
   133fc:	|      and.l d0,d1
   133fe:	|      moveq #28,d0
   13400:	|      add.l 24(sp),d0
   13404:	|      move.l d1,-(sp)
   13406:	|      pea 1 <_start+0x1>
   1340a:	|      move.l d0,-(sp)
   1340c:	|      jsr 151f8 <setVariable>
   13412:	|      lea 12(sp),sp
	return BR_CONTINUE;
   13416:	|      moveq #2,d0
}
   13418:	\----> move.l (sp)+,d2
   1341a:	       lea 12(sp),sp
   1341e:	       rts

00013420 <builtIn_snapshotGrab>:

builtIn(snapshotGrab)
{
	UNUSEDALL
	return snapshot () ? BR_CONTINUE : BR_ERROR;
   13420:	       jsr d63e <snapshot>
   13426:	       tst.w d0
   13428:	/----- beq.s 1342e <builtIn_snapshotGrab+0xe>
   1342a:	|      moveq #2,d0
   1342c:	|  /-- bra.s 13430 <builtIn_snapshotGrab+0x10>
   1342e:	\--|-> moveq #1,d0
}
   13430:	   \-> rts

00013432 <builtIn_snapshotClear>:

builtIn(snapshotClear)
{
	UNUSEDALL
	nosnapshot ();
   13432:	jsr d4ea <nosnapshot>
	return BR_CONTINUE;
   13438:	moveq #2,d0
}
   1343a:	rts

0001343c <builtIn_bodgeFilenames>:

builtIn(bodgeFilenames)
{
   1343c:	subq.l #4,sp
	UNUSEDALL
	BOOL lastValue = allowAnyFilename;
   1343e:	move.w 1c2de <allowAnyFilename>,2(sp)
	allowAnyFilename = getBoolean(&(fun -> stack -> thisVar));
   13446:	movea.l 12(sp),a0
   1344a:	move.l 24(a0),d0
   1344e:	move.l d0,-(sp)
   13450:	jsr 14e46 <getBoolean>
   13456:	addq.l #4,sp
   13458:	move.w d0,1c2de <allowAnyFilename>
	trimStack (&fun -> stack);
   1345e:	moveq #24,d0
   13460:	add.l 12(sp),d0
   13464:	move.l d0,-(sp)
   13466:	jsr 1528a <trimStack>
   1346c:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, lastValue);
   1346e:	movea.w 2(sp),a0
   13472:	moveq #28,d0
   13474:	add.l 12(sp),d0
   13478:	move.l a0,-(sp)
   1347a:	pea 1 <_start+0x1>
   1347e:	move.l d0,-(sp)
   13480:	jsr 151f8 <setVariable>
   13486:	lea 12(sp),sp
	return BR_CONTINUE;
   1348a:	moveq #2,d0
}
   1348c:	addq.l #4,sp
   1348e:	rts

00013490 <builtIn__rem_registryGetString>:

// Deprecated - does nothing.
builtIn(_rem_registryGetString)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   13490:	moveq #24,d0
   13492:	add.l 8(sp),d0
   13496:	move.l d0,-(sp)
   13498:	jsr 1528a <trimStack>
   1349e:	addq.l #4,sp
	trimStack (&fun -> stack);
   134a0:	moveq #24,d0
   134a2:	add.l 8(sp),d0
   134a6:	move.l d0,-(sp)
   134a8:	jsr 1528a <trimStack>
   134ae:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 0);
   134b0:	moveq #28,d0
   134b2:	add.l 8(sp),d0
   134b6:	clr.l -(sp)
   134b8:	pea 1 <_start+0x1>
   134bc:	move.l d0,-(sp)
   134be:	jsr 151f8 <setVariable>
   134c4:	lea 12(sp),sp

	return BR_CONTINUE;
   134c8:	moveq #2,d0
}
   134ca:	rts

000134cc <builtIn_quitWithFatalError>:

builtIn(quitWithFatalError)
{
   134cc:	subq.l #4,sp
	UNUSEDALL
	char * mess = getTextFromAnyVar(&(fun -> stack -> thisVar));
   134ce:	movea.l 12(sp),a0
   134d2:	move.l 24(a0),d0
   134d6:	move.l d0,-(sp)
   134d8:	jsr 14edc <getTextFromAnyVar>
   134de:	addq.l #4,sp
   134e0:	move.l d0,(sp)
	trimStack (&fun -> stack);
   134e2:	moveq #24,d0
   134e4:	add.l 12(sp),d0
   134e8:	move.l d0,-(sp)
   134ea:	jsr 1528a <trimStack>
   134f0:	addq.l #4,sp
	KPrintF (mess);
   134f2:	move.l (sp),-(sp)
   134f4:	jsr 17366 <KPrintF>
   134fa:	addq.l #4,sp
	return BR_ERROR;
   134fc:	moveq #1,d0
}
   134fe:	addq.l #4,sp
   13500:	rts

00013502 <builtIn__rem_setCharacterAA>:

builtIn(_rem_setCharacterAA)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   13502:	moveq #24,d0
   13504:	add.l 8(sp),d0
   13508:	move.l d0,-(sp)
   1350a:	jsr 1528a <trimStack>
   13510:	addq.l #4,sp
	trimStack (&fun -> stack);
   13512:	moveq #24,d0
   13514:	add.l 8(sp),d0
   13518:	move.l d0,-(sp)
   1351a:	jsr 1528a <trimStack>
   13520:	addq.l #4,sp
	trimStack (&fun -> stack);
   13522:	moveq #24,d0
   13524:	add.l 8(sp),d0
   13528:	move.l d0,-(sp)
   1352a:	jsr 1528a <trimStack>
   13530:	addq.l #4,sp
	trimStack (&fun -> stack);
   13532:	moveq #24,d0
   13534:	add.l 8(sp),d0
   13538:	move.l d0,-(sp)
   1353a:	jsr 1528a <trimStack>
   13540:	addq.l #4,sp

	return BR_CONTINUE;
   13542:	moveq #2,d0
}
   13544:	rts

00013546 <builtIn__rem_setMaximumAA>:

builtIn(_rem_setMaximumAA)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   13546:	moveq #24,d0
   13548:	add.l 8(sp),d0
   1354c:	move.l d0,-(sp)
   1354e:	jsr 1528a <trimStack>
   13554:	addq.l #4,sp
	trimStack (&fun -> stack);
   13556:	moveq #24,d0
   13558:	add.l 8(sp),d0
   1355c:	move.l d0,-(sp)
   1355e:	jsr 1528a <trimStack>
   13564:	addq.l #4,sp
	trimStack (&fun -> stack);
   13566:	moveq #24,d0
   13568:	add.l 8(sp),d0
   1356c:	move.l d0,-(sp)
   1356e:	jsr 1528a <trimStack>
   13574:	addq.l #4,sp

	return BR_CONTINUE;
   13576:	moveq #2,d0

}
   13578:	rts

0001357a <builtIn_setBackgroundEffect>:

builtIn(setBackgroundEffect)
{
   1357a:	subq.l #4,sp
	UNUSEDALL
	BOOL done = TRUE;
   1357c:	move.w #1,2(sp)
	//BOOL done = blur_createSettings(numParams, fun->stack); Amiga Todo: Amigize?
	setVariable (&fun -> reg, SVT_INT, done ? 1 : 0);
   13582:	sne d0
   13584:	neg.b d0
   13586:	moveq #0,d1
   13588:	move.b d0,d1
   1358a:	moveq #28,d0
   1358c:	add.l 12(sp),d0
   13590:	move.l d1,-(sp)
   13592:	pea 1 <_start+0x1>
   13596:	move.l d0,-(sp)
   13598:	jsr 151f8 <setVariable>
   1359e:	lea 12(sp),sp
	return BR_CONTINUE;
   135a2:	moveq #2,d0
}
   135a4:	addq.l #4,sp
   135a6:	rts

000135a8 <builtIn_doBackgroundEffect>:

builtIn(doBackgroundEffect)
{
   135a8:	subq.l #4,sp
	UNUSEDALL
	//BOOL done = blurScreen ();
	BOOL done = TRUE;
   135aa:	move.w #1,2(sp)
	KPrintF("doBackgroundEffect: Function not implemented on Amiga");
   135b0:	pea 19d90 <graphics.c.1c13408a+0x23d>
   135b6:	jsr 17366 <KPrintF>
   135bc:	addq.l #4,sp
	//Amiga Todo: Amigize this
	setVariable (&fun -> reg, SVT_INT, done ? 1 : 0);
   135be:	tst.w 2(sp)
   135c2:	sne d0
   135c4:	neg.b d0
   135c6:	moveq #0,d1
   135c8:	move.b d0,d1
   135ca:	moveq #28,d0
   135cc:	add.l 12(sp),d0
   135d0:	move.l d1,-(sp)
   135d2:	pea 1 <_start+0x1>
   135d6:	move.l d0,-(sp)
   135d8:	jsr 151f8 <setVariable>
   135de:	lea 12(sp),sp
	return BR_CONTINUE;
   135e2:	moveq #2,d0
}
   135e4:	addq.l #4,sp
   135e6:	rts

000135e8 <callBuiltIn>:
#undef FUNC

#define NUM_FUNCS			(sizeof (builtInFunctionArray) / sizeof (builtInFunctionArray[0]))


enum builtReturn callBuiltIn (int whichFunc, int numParams, struct loadedFunction * fun) {
   135e8:	             lea -100(sp),sp
   // fprintf (stderr, "Calling function %d: %s\n", whichFunc, builtInFunctionNames[whichFunc]);    fflush (stderr);

	if ((unsigned int)whichFunc < NUM_FUNCS) {
   135ec:	             move.l 104(sp),d0
   135f0:	             cmpi.l #166,d0
   135f6:	/----------- bhi.w 136d8 <callBuiltIn+0xf0>
		if (paramNum[whichFunc] != -1) {
   135fa:	|            move.l 104(sp),d0
   135fe:	|            add.l d0,d0
   13600:	|            movea.l d0,a1
   13602:	|            adda.l d0,a1
   13604:	|            lea 1c424 <paramNum>,a0
   1360a:	|            move.l (0,a1,a0.l),d0
   1360e:	|            moveq #-1,d1
   13610:	|            cmp.l d0,d1
   13612:	|  /-------- beq.w 136a0 <callBuiltIn+0xb8>
			if (paramNum[whichFunc] != numParams) {
   13616:	|  |         move.l 104(sp),d0
   1361a:	|  |         add.l d0,d0
   1361c:	|  |         movea.l d0,a1
   1361e:	|  |         adda.l d0,a1
   13620:	|  |         lea 1c424 <paramNum>,a0
   13626:	|  |         move.l (0,a1,a0.l),d0
   1362a:	|  |         cmp.l 108(sp),d0
   1362e:	|  +-------- beq.s 136a0 <callBuiltIn+0xb8>
				char buff[100];
				sprintf (buff, "Built in function must have %i parameter%s",
						 paramNum[whichFunc],
						 (paramNum[whichFunc] == 1) ? "" : "s");
   13630:	|  |         move.l 104(sp),d0
   13634:	|  |         add.l d0,d0
   13636:	|  |         movea.l d0,a1
   13638:	|  |         adda.l d0,a1
   1363a:	|  |         lea 1c424 <paramNum>,a0
   13640:	|  |         move.l (0,a1,a0.l),d0
				sprintf (buff, "Built in function must have %i parameter%s",
   13644:	|  |         moveq #1,d1
   13646:	|  |         cmp.l d0,d1
   13648:	|  |  /----- bne.s 13652 <callBuiltIn+0x6a>
   1364a:	|  |  |      move.l #101036,d0
   13650:	|  |  |  /-- bra.s 13658 <callBuiltIn+0x70>
   13652:	|  |  \--|-> move.l #105926,d0
   13658:	|  |     \-> move.l 104(sp),d1
   1365c:	|  |         add.l d1,d1
   1365e:	|  |         movea.l d1,a1
   13660:	|  |         adda.l d1,a1
   13662:	|  |         lea 1c424 <paramNum>,a0
   13668:	|  |         move.l (0,a1,a0.l),d1
   1366c:	|  |         move.l d0,-(sp)
   1366e:	|  |         move.l d1,-(sp)
   13670:	|  |         pea 19dc8 <graphics.c.1c13408a+0x275>
   13676:	|  |         lea 12(sp),a0
   1367a:	|  |         move.l a0,-(sp)
   1367c:	|  |         jsr 14110 <sprintf>
   13682:	|  |         lea 16(sp),sp

				KPrintF(copyString (buff));
   13686:	|  |         movea.l sp,a0
   13688:	|  |         move.l a0,-(sp)
   1368a:	|  |         jsr b8 <copyString>
   13690:	|  |         addq.l #4,sp
   13692:	|  |         move.l d0,-(sp)
   13694:	|  |         jsr 17366 <KPrintF>
   1369a:	|  |         addq.l #4,sp
				return BR_ERROR;
   1369c:	|  |         moveq #1,d0
   1369e:	|  |     /-- bra.s 136e8 <callBuiltIn+0x100>
			}
		}

		if (builtInFunctionArray[whichFunc].func)
   136a0:	|  \-----|-> move.l 104(sp),d0
   136a4:	|        |   add.l d0,d0
   136a6:	|        |   movea.l d0,a1
   136a8:	|        |   adda.l d0,a1
   136aa:	|        |   lea 1c6c0 <builtInFunctionArray>,a0
   136b0:	|        |   move.l (0,a1,a0.l),d0
   136b4:	+--------|-- beq.s 136d8 <callBuiltIn+0xf0>
		{
			//fprintf (stderr, "Calling %i: %s\n", whichFunc, builtInFunctionNames[whichFunc]);
			return builtInFunctionArray[whichFunc].func (numParams, fun);
   136b6:	|        |   move.l 104(sp),d0
   136ba:	|        |   add.l d0,d0
   136bc:	|        |   movea.l d0,a1
   136be:	|        |   adda.l d0,a1
   136c0:	|        |   lea 1c6c0 <builtInFunctionArray>,a0
   136c6:	|        |   movea.l (0,a1,a0.l),a0
   136ca:	|        |   move.l 112(sp),-(sp)
   136ce:	|        |   move.l 112(sp),-(sp)
   136d2:	|        |   jsr (a0)
   136d4:	|        |   addq.l #8,sp
   136d6:	|        +-- bra.s 136e8 <callBuiltIn+0x100>
		}
	}

	KPrintF("Unknown / unimplemented built-in function.");
   136d8:	\--------|-> pea 19df3 <graphics.c.1c13408a+0x2a0>
   136de:	         |   jsr 17366 <KPrintF>
   136e4:	         |   addq.l #4,sp
	return BR_ERROR;
   136e6:	         |   moveq #1,d0
}
   136e8:	         \-> lea 100(sp),sp
   136ec:	             rts

000136ee <getLanguageForFileB>:
int *languageTable;
char **languageName;
struct settingsStruct gameSettings;

int getLanguageForFileB ()
{
   136ee:	          subq.l #8,sp
	int indexNum = -1;
   136f0:	          moveq #-1,d0
   136f2:	          move.l d0,4(sp)

	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   136f6:	          clr.l (sp)
   136f8:	   /----- bra.s 1371e <getLanguageForFileB+0x30>
		if ((unsigned int) languageTable[i] == gameSettings.languageID) indexNum = i;
   136fa:	/--|----> move.l 1cb56 <languageTable>,d1
   13700:	|  |      move.l (sp),d0
   13702:	|  |      add.l d0,d0
   13704:	|  |      add.l d0,d0
   13706:	|  |      movea.l d1,a0
   13708:	|  |      adda.l d0,a0
   1370a:	|  |      move.l (a0),d0
   1370c:	|  |      move.l d0,d1
   1370e:	|  |      move.l 1cb5e <gameSettings>,d0
   13714:	|  |      cmp.l d1,d0
   13716:	|  |  /-- bne.s 1371c <getLanguageForFileB+0x2e>
   13718:	|  |  |   move.l (sp),4(sp)
	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   1371c:	|  |  \-> addq.l #1,(sp)
   1371e:	|  \----> move.l 1cb62 <gameSettings+0x4>,d0
   13724:	|         cmp.l (sp),d0
   13726:	\-------- bcc.s 136fa <getLanguageForFileB+0xc>
	}

	return indexNum;
   13728:	          move.l 4(sp),d0
}
   1372c:	          addq.l #8,sp
   1372e:	          rts

00013730 <getPrefsFilename>:

char * getPrefsFilename (char * filename) {
   13730:	          lea -20(sp),sp
   13734:	          move.l a6,-(sp)
	// Yes, this trashes the original string, but
	// we also free it at the end (warning!)...

	int n, i;

	n = strlen (filename);
   13736:	          move.l 28(sp),-(sp)
   1373a:	          jsr 13df2 <strlen>
   13740:	          addq.l #4,sp
   13742:	          move.l d0,12(sp)


	if (n > 4 && filename[n-4] == '.') {
   13746:	          moveq #4,d0
   13748:	          cmp.l 12(sp),d0
   1374c:	      /-- bge.s 13770 <getPrefsFilename+0x40>
   1374e:	      |   move.l 12(sp),d0
   13752:	      |   subq.l #4,d0
   13754:	      |   movea.l 28(sp),a0
   13758:	      |   adda.l d0,a0
   1375a:	      |   move.b (a0),d0
   1375c:	      |   cmpi.b #46,d0
   13760:	      +-- bne.s 13770 <getPrefsFilename+0x40>
		filename[n-4] = 0;
   13762:	      |   move.l 12(sp),d0
   13766:	      |   subq.l #4,d0
   13768:	      |   movea.l 28(sp),a0
   1376c:	      |   adda.l d0,a0
   1376e:	      |   clr.b (a0)
	}

	char * f = filename;
   13770:	      \-> move.l 28(sp),16(sp)
	for (i = 0; i<n; i++) {
   13776:	          clr.l 20(sp)
   1377a:	   /----- bra.s 137a2 <getPrefsFilename+0x72>
		if (filename[i] == '/') f = filename + i + 1;
   1377c:	/--|----> move.l 20(sp),d0
   13780:	|  |      movea.l 28(sp),a0
   13784:	|  |      adda.l d0,a0
   13786:	|  |      move.b (a0),d0
   13788:	|  |      cmpi.b #47,d0
   1378c:	|  |  /-- bne.s 1379e <getPrefsFilename+0x6e>
   1378e:	|  |  |   move.l 20(sp),d0
   13792:	|  |  |   addq.l #1,d0
   13794:	|  |  |   move.l 28(sp),d1
   13798:	|  |  |   add.l d0,d1
   1379a:	|  |  |   move.l d1,16(sp)
	for (i = 0; i<n; i++) {
   1379e:	|  |  \-> addq.l #1,20(sp)
   137a2:	|  \----> move.l 20(sp),d0
   137a6:	|         cmp.l 12(sp),d0
   137aa:	\-------- blt.s 1377c <getPrefsFilename+0x4c>
	}

	char * joined = joinStrings (f, ".ini");
   137ac:	          pea 19e1e <graphics.c.1c13408a+0x2cb>
   137b2:	          move.l 20(sp),-(sp)
   137b6:	          jsr 13e32 <joinStrings>
   137bc:	          addq.l #8,sp
   137be:	          move.l d0,8(sp)

	FreeVec(filename);
   137c2:	          move.l 28(sp),4(sp)
   137c8:	          move.l 1ca82 <SysBase>,d0
   137ce:	          movea.l d0,a6
   137d0:	          movea.l 4(sp),a1
   137d4:	          jsr -690(a6)
	filename = NULL;
   137d8:	          clr.l 28(sp)
	return joined;
   137dc:	          move.l 8(sp),d0
}
   137e0:	          movea.l (sp)+,a6
   137e2:	          lea 20(sp),sp
   137e6:	          rts

000137e8 <makeLanguageTable>:

void makeLanguageTable (BPTR table)
{
   137e8:	             lea -28(sp),sp
   137ec:	             move.l a6,-(sp)
   137ee:	             move.l a2,-(sp)
	languageTable = AllocVec(gameSettings.numLanguages + 1,MEMF_ANY);
   137f0:	             move.l 1cb62 <gameSettings+0x4>,d0
   137f6:	             move.l d0,d1
   137f8:	             addq.l #1,d1
   137fa:	             move.l d1,28(sp)
   137fe:	             clr.l 24(sp)
   13802:	             move.l 1ca82 <SysBase>,d0
   13808:	             movea.l d0,a6
   1380a:	             move.l 28(sp),d0
   1380e:	             move.l 24(sp),d1
   13812:	             jsr -684(a6)
   13816:	             move.l d0,20(sp)
   1381a:	             move.l 20(sp),d0
   1381e:	             move.l d0,1cb56 <languageTable>
    if( languageTable == 0) {
   13824:	             move.l 1cb56 <languageTable>,d0
   1382a:	         /-- bne.s 1383a <makeLanguageTable+0x52>
        KPrintF("makeLanguageTable: Cannot Alloc Mem for languageTable");
   1382c:	         |   pea 19e23 <graphics.c.1c13408a+0x2d0>
   13832:	         |   jsr 17366 <KPrintF>
   13838:	         |   addq.l #4,sp
    }

	languageName = AllocVec(gameSettings.numLanguages + 1,MEMF_ANY);
   1383a:	         \-> move.l 1cb62 <gameSettings+0x4>,d0
   13840:	             move.l d0,d1
   13842:	             addq.l #1,d1
   13844:	             move.l d1,16(sp)
   13848:	             clr.l 12(sp)
   1384c:	             move.l 1ca82 <SysBase>,d0
   13852:	             movea.l d0,a6
   13854:	             move.l 16(sp),d0
   13858:	             move.l 12(sp),d1
   1385c:	             jsr -684(a6)
   13860:	             move.l d0,8(sp)
   13864:	             move.l 8(sp),d0
   13868:	             move.l d0,1cb5a <languageName>
	if( languageName == 0) {
   1386e:	             move.l 1cb5a <languageName>,d0
   13874:	         /-- bne.s 13884 <makeLanguageTable+0x9c>
        KPrintF("makeLanguageName: Cannot Alloc Mem for languageName");
   13876:	         |   pea 19e59 <graphics.c.1c13408a+0x306>
   1387c:	         |   jsr 17366 <KPrintF>
   13882:	         |   addq.l #4,sp
    }

	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   13884:	         \-> clr.l 32(sp)
   13888:	   /-------- bra.s 13900 <makeLanguageTable+0x118>
		languageTable[i] = i ? get2bytes (table) : 0;
   1388a:	/--|-------> tst.l 32(sp)
   1388e:	|  |  /----- beq.s 1389e <makeLanguageTable+0xb6>
   13890:	|  |  |      move.l 40(sp),-(sp)
   13894:	|  |  |      jsr 6bc <get2bytes>
   1389a:	|  |  |      addq.l #4,sp
   1389c:	|  |  |  /-- bra.s 138a0 <makeLanguageTable+0xb8>
   1389e:	|  |  \--|-> moveq #0,d0
   138a0:	|  |     \-> movea.l 1cb56 <languageTable>,a0
   138a6:	|  |         move.l 32(sp),d1
   138aa:	|  |         add.l d1,d1
   138ac:	|  |         add.l d1,d1
   138ae:	|  |         adda.l d1,a0
   138b0:	|  |         move.l d0,(a0)
		languageName[i] = 0;
   138b2:	|  |         move.l 1cb5a <languageName>,d1
   138b8:	|  |         move.l 32(sp),d0
   138bc:	|  |         add.l d0,d0
   138be:	|  |         add.l d0,d0
   138c0:	|  |         movea.l d1,a0
   138c2:	|  |         adda.l d0,a0
   138c4:	|  |         clr.l (a0)
		if (gameVersion >= VERSION(2,0)) {
   138c6:	|  |         move.l 1ca2c <gameVersion>,d0
   138cc:	|  |         cmpi.l #511,d0
   138d2:	|  |     /-- ble.s 138fc <makeLanguageTable+0x114>
			if (gameSettings.numLanguages)
   138d4:	|  |     |   move.l 1cb62 <gameSettings+0x4>,d0
   138da:	|  |     +-- beq.s 138fc <makeLanguageTable+0x114>
				languageName[i] = readString (table);
   138dc:	|  |     |   move.l 1cb5a <languageName>,d1
   138e2:	|  |     |   move.l 32(sp),d0
   138e6:	|  |     |   add.l d0,d0
   138e8:	|  |     |   add.l d0,d0
   138ea:	|  |     |   movea.l d1,a2
   138ec:	|  |     |   adda.l d0,a2
   138ee:	|  |     |   move.l 40(sp),-(sp)
   138f2:	|  |     |   jsr b02 <readString>
   138f8:	|  |     |   addq.l #4,sp
   138fa:	|  |     |   move.l d0,(a2)
	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   138fc:	|  |     \-> addq.l #1,32(sp)
   13900:	|  \-------> move.l 1cb62 <gameSettings+0x4>,d0
   13906:	|            cmp.l 32(sp),d0
   1390a:	\----------- bcc.w 1388a <makeLanguageTable+0xa2>
		}
	}
}
   1390e:	             nop
   13910:	             nop
   13912:	             movea.l (sp)+,a2
   13914:	             movea.l (sp)+,a6
   13916:	             lea 28(sp),sp
   1391a:	             rts

0001391c <readIniFile>:

void readIniFile (char * filename) {
   1391c:	                      lea -564(sp),sp
   13920:	                      move.l a6,-(sp)
   13922:	                      move.l d2,-(sp)
	char * langName = getPrefsFilename (copyString (filename));
   13924:	                      move.l 576(sp),-(sp)
   13928:	                      jsr b8 <copyString>
   1392e:	                      addq.l #4,sp
   13930:	                      move.l d0,-(sp)
   13932:	                      jsr 13730 <getPrefsFilename>
   13938:	                      addq.l #4,sp
   1393a:	                      move.l d0,562(sp)

	BPTR fp = Open(langName,MODE_OLDFILE);	
   1393e:	                      move.l 562(sp),558(sp)
   13944:	                      move.l #1005,554(sp)
   1394c:	                      move.l 1ca8a <DOSBase>,d0
   13952:	                      movea.l d0,a6
   13954:	                      move.l 558(sp),d1
   13958:	                      move.l 554(sp),d2
   1395c:	                      jsr -30(a6)
   13960:	                      move.l d0,550(sp)
   13964:	                      move.l 550(sp),d0
   13968:	                      move.l d0,546(sp)

	gameSettings.languageID = 0;
   1396c:	                      clr.l 1cb5e <gameSettings>
	gameSettings.userFullScreen = TRUE; //Always fullscreen on AMIGA
   13972:	                      move.w #1,1cb66 <gameSettings+0x8>
	gameSettings.refreshRate = 0;
   1397a:	                      clr.l 1cb68 <gameSettings+0xa>
	gameSettings.antiAlias = 1;
   13980:	                      moveq #1,d0
   13982:	                      move.l d0,1cb6c <gameSettings+0xe>
	gameSettings.fixedPixels = FALSE;
   13988:	                      clr.w 1cb70 <gameSettings+0x12>
	gameSettings.noStartWindow = FALSE;
   1398e:	                      clr.w 1cb72 <gameSettings+0x14>
	gameSettings.debugMode = FALSE;
   13994:	                      clr.w 1cb74 <gameSettings+0x16>

	FreeVec(langName);
   1399a:	                      move.l 562(sp),542(sp)
   139a0:	                      move.l 1ca82 <SysBase>,d0
   139a6:	                      movea.l d0,a6
   139a8:	                      movea.l 542(sp),a1
   139ac:	                      jsr -690(a6)
	langName = NULL;
   139b0:	                      clr.l 562(sp)

	if (fp) {
   139b4:	                      tst.l 546(sp)
   139b8:	/-------------------- beq.w 13c96 <readIniFile+0x37a>
		char lineSoFar[257] = "";
   139bc:	|                     move.l sp,d0
   139be:	|                     addi.l #265,d0
   139c4:	|                     move.l #257,d1
   139ca:	|                     move.l d1,-(sp)
   139cc:	|                     clr.l -(sp)
   139ce:	|                     move.l d0,-(sp)
   139d0:	|                     jsr 172ea <memset>
   139d6:	|                     lea 12(sp),sp
		char secondSoFar[257] = "";
   139da:	|                     move.l sp,d0
   139dc:	|                     addq.l #8,d0
   139de:	|                     move.l #257,d1
   139e4:	|                     move.l d1,-(sp)
   139e6:	|                     clr.l -(sp)
   139e8:	|                     move.l d0,-(sp)
   139ea:	|                     jsr 172ea <memset>
   139f0:	|                     lea 12(sp),sp
		unsigned char here = 0;
   139f4:	|                     clr.b 571(sp)
		char readChar = ' ';
   139f8:	|                     move.b #32,570(sp)
		BOOL keepGoing = TRUE;
   139fe:	|                     move.w #1,568(sp)
		BOOL doingSecond = FALSE;
   13a04:	|                     clr.w 566(sp)
		LONG tmp = 0;
   13a08:	|                     clr.l 538(sp)

		do {

			tmp = FGetC (fp);
   13a0c:	|  /----------------> move.l 546(sp),534(sp)
   13a12:	|  |                  move.l 1ca8a <DOSBase>,d0
   13a18:	|  |                  movea.l d0,a6
   13a1a:	|  |                  move.l 534(sp),d1
   13a1e:	|  |                  jsr -306(a6)
   13a22:	|  |                  move.l d0,530(sp)
   13a26:	|  |                  move.l 530(sp),d0
   13a2a:	|  |                  move.l d0,538(sp)
			if (tmp == - 1) {
   13a2e:	|  |                  moveq #-1,d1
   13a30:	|  |                  cmp.l 538(sp),d1
   13a34:	|  |           /----- bne.s 13a42 <readIniFile+0x126>
				readChar = '\n';
   13a36:	|  |           |      move.b #10,570(sp)
				keepGoing = FALSE;
   13a3c:	|  |           |      clr.w 568(sp)
   13a40:	|  |           |  /-- bra.s 13a48 <readIniFile+0x12c>
			} else {
				readChar = (char) tmp;
   13a42:	|  |           \--|-> move.b 541(sp),570(sp)
			}

			switch (readChar) {
   13a48:	|  |              \-> move.b 570(sp),d0
   13a4c:	|  |                  ext.w d0
   13a4e:	|  |                  movea.w d0,a0
   13a50:	|  |                  moveq #61,d0
   13a52:	|  |                  cmp.l a0,d0
   13a54:	|  |     /----------- beq.w 13bfe <readIniFile+0x2e2>
   13a58:	|  |     |            moveq #61,d1
   13a5a:	|  |     |            cmp.l a0,d1
   13a5c:	|  |  /--|----------- blt.w 13c0a <readIniFile+0x2ee>
   13a60:	|  |  |  |            moveq #10,d0
   13a62:	|  |  |  |            cmp.l a0,d0
   13a64:	|  |  |  |        /-- beq.s 13a6e <readIniFile+0x152>
   13a66:	|  |  |  |        |   moveq #13,d1
   13a68:	|  |  |  |        |   cmp.l a0,d1
   13a6a:	|  |  +--|--------|-- bne.w 13c0a <readIniFile+0x2ee>
				case '\n':
				case '\r':
				if (doingSecond) {
   13a6e:	|  |  |  |        \-> tst.w 566(sp)
   13a72:	|  |  |  |     /----- beq.w 13bec <readIniFile+0x2d0>
					if (strcmp (lineSoFar, "LANGUAGE") == 0)
   13a76:	|  |  |  |     |      pea 19e8d <graphics.c.1c13408a+0x33a>
   13a7c:	|  |  |  |     |      move.l sp,d0
   13a7e:	|  |  |  |     |      addi.l #269,d0
   13a84:	|  |  |  |     |      move.l d0,-(sp)
   13a86:	|  |  |  |     |      jsr 13db2 <strcmp>
   13a8c:	|  |  |  |     |      addq.l #8,sp
   13a8e:	|  |  |  |     |      tst.l d0
   13a90:	|  |  |  |     |  /-- bne.s 13aaa <readIniFile+0x18e>
					{
						gameSettings.languageID = stringToInt (secondSoFar);
   13a92:	|  |  |  |     |  |   move.l sp,d0
   13a94:	|  |  |  |     |  |   addq.l #8,d0
   13a96:	|  |  |  |     |  |   move.l d0,-(sp)
   13a98:	|  |  |  |     |  |   jsr 13ca2 <stringToInt>
   13a9e:	|  |  |  |     |  |   addq.l #4,sp
   13aa0:	|  |  |  |     |  |   move.l d0,1cb5e <gameSettings>
   13aa6:	|  |  |  |     +--|-- bra.w 13bec <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "WINDOW") == 0)
   13aaa:	|  |  |  |     |  \-> pea 19e96 <graphics.c.1c13408a+0x343>
   13ab0:	|  |  |  |     |      move.l sp,d0
   13ab2:	|  |  |  |     |      addi.l #269,d0
   13ab8:	|  |  |  |     |      move.l d0,-(sp)
   13aba:	|  |  |  |     |      jsr 13db2 <strcmp>
   13ac0:	|  |  |  |     |      addq.l #8,sp
   13ac2:	|  |  |  |     |      tst.l d0
   13ac4:	|  |  |  |     |  /-- bne.s 13aea <readIniFile+0x1ce>
					{
						gameSettings.userFullScreen = ! stringToInt (secondSoFar);
   13ac6:	|  |  |  |     |  |   move.l sp,d0
   13ac8:	|  |  |  |     |  |   addq.l #8,d0
   13aca:	|  |  |  |     |  |   move.l d0,-(sp)
   13acc:	|  |  |  |     |  |   jsr 13ca2 <stringToInt>
   13ad2:	|  |  |  |     |  |   addq.l #4,sp
   13ad4:	|  |  |  |     |  |   tst.l d0
   13ad6:	|  |  |  |     |  |   seq d0
   13ad8:	|  |  |  |     |  |   neg.b d0
   13ada:	|  |  |  |     |  |   move.b d0,d0
   13adc:	|  |  |  |     |  |   andi.w #255,d0
   13ae0:	|  |  |  |     |  |   move.w d0,1cb66 <gameSettings+0x8>
   13ae6:	|  |  |  |     +--|-- bra.w 13bec <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "REFRESH") == 0)
   13aea:	|  |  |  |     |  \-> pea 19e9d <graphics.c.1c13408a+0x34a>
   13af0:	|  |  |  |     |      move.l sp,d0
   13af2:	|  |  |  |     |      addi.l #269,d0
   13af8:	|  |  |  |     |      move.l d0,-(sp)
   13afa:	|  |  |  |     |      jsr 13db2 <strcmp>
   13b00:	|  |  |  |     |      addq.l #8,sp
   13b02:	|  |  |  |     |      tst.l d0
   13b04:	|  |  |  |     |  /-- bne.s 13b1e <readIniFile+0x202>
					{
						gameSettings.refreshRate = stringToInt (secondSoFar);
   13b06:	|  |  |  |     |  |   move.l sp,d0
   13b08:	|  |  |  |     |  |   addq.l #8,d0
   13b0a:	|  |  |  |     |  |   move.l d0,-(sp)
   13b0c:	|  |  |  |     |  |   jsr 13ca2 <stringToInt>
   13b12:	|  |  |  |     |  |   addq.l #4,sp
   13b14:	|  |  |  |     |  |   move.l d0,1cb68 <gameSettings+0xa>
   13b1a:	|  |  |  |     +--|-- bra.w 13bec <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "ANTIALIAS") == 0)
   13b1e:	|  |  |  |     |  \-> pea 19ea5 <graphics.c.1c13408a+0x352>
   13b24:	|  |  |  |     |      move.l sp,d0
   13b26:	|  |  |  |     |      addi.l #269,d0
   13b2c:	|  |  |  |     |      move.l d0,-(sp)
   13b2e:	|  |  |  |     |      jsr 13db2 <strcmp>
   13b34:	|  |  |  |     |      addq.l #8,sp
   13b36:	|  |  |  |     |      tst.l d0
   13b38:	|  |  |  |     |  /-- bne.s 13b52 <readIniFile+0x236>
					{
						gameSettings.antiAlias = stringToInt (secondSoFar);
   13b3a:	|  |  |  |     |  |   move.l sp,d0
   13b3c:	|  |  |  |     |  |   addq.l #8,d0
   13b3e:	|  |  |  |     |  |   move.l d0,-(sp)
   13b40:	|  |  |  |     |  |   jsr 13ca2 <stringToInt>
   13b46:	|  |  |  |     |  |   addq.l #4,sp
   13b48:	|  |  |  |     |  |   move.l d0,1cb6c <gameSettings+0xe>
   13b4e:	|  |  |  |     +--|-- bra.w 13bec <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "FIXEDPIXELS") == 0)
   13b52:	|  |  |  |     |  \-> pea 19eaf <graphics.c.1c13408a+0x35c>
   13b58:	|  |  |  |     |      move.l sp,d0
   13b5a:	|  |  |  |     |      addi.l #269,d0
   13b60:	|  |  |  |     |      move.l d0,-(sp)
   13b62:	|  |  |  |     |      jsr 13db2 <strcmp>
   13b68:	|  |  |  |     |      addq.l #8,sp
   13b6a:	|  |  |  |     |      tst.l d0
   13b6c:	|  |  |  |     |  /-- bne.s 13b86 <readIniFile+0x26a>
					{
						gameSettings.fixedPixels = stringToInt (secondSoFar);
   13b6e:	|  |  |  |     |  |   move.l sp,d0
   13b70:	|  |  |  |     |  |   addq.l #8,d0
   13b72:	|  |  |  |     |  |   move.l d0,-(sp)
   13b74:	|  |  |  |     |  |   jsr 13ca2 <stringToInt>
   13b7a:	|  |  |  |     |  |   addq.l #4,sp
   13b7c:	|  |  |  |     |  |   move.l d0,d0
   13b7e:	|  |  |  |     |  |   move.w d0,1cb70 <gameSettings+0x12>
   13b84:	|  |  |  |     +--|-- bra.s 13bec <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "NOSTARTWINDOW") == 0)
   13b86:	|  |  |  |     |  \-> pea 19ebb <graphics.c.1c13408a+0x368>
   13b8c:	|  |  |  |     |      move.l sp,d0
   13b8e:	|  |  |  |     |      addi.l #269,d0
   13b94:	|  |  |  |     |      move.l d0,-(sp)
   13b96:	|  |  |  |     |      jsr 13db2 <strcmp>
   13b9c:	|  |  |  |     |      addq.l #8,sp
   13b9e:	|  |  |  |     |      tst.l d0
   13ba0:	|  |  |  |     |  /-- bne.s 13bba <readIniFile+0x29e>
					{
						gameSettings.noStartWindow = stringToInt (secondSoFar);
   13ba2:	|  |  |  |     |  |   move.l sp,d0
   13ba4:	|  |  |  |     |  |   addq.l #8,d0
   13ba6:	|  |  |  |     |  |   move.l d0,-(sp)
   13ba8:	|  |  |  |     |  |   jsr 13ca2 <stringToInt>
   13bae:	|  |  |  |     |  |   addq.l #4,sp
   13bb0:	|  |  |  |     |  |   move.l d0,d0
   13bb2:	|  |  |  |     |  |   move.w d0,1cb72 <gameSettings+0x14>
   13bb8:	|  |  |  |     +--|-- bra.s 13bec <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "DEBUGMODE") == 0)
   13bba:	|  |  |  |     |  \-> pea 19ec9 <graphics.c.1c13408a+0x376>
   13bc0:	|  |  |  |     |      move.l sp,d0
   13bc2:	|  |  |  |     |      addi.l #269,d0
   13bc8:	|  |  |  |     |      move.l d0,-(sp)
   13bca:	|  |  |  |     |      jsr 13db2 <strcmp>
   13bd0:	|  |  |  |     |      addq.l #8,sp
   13bd2:	|  |  |  |     |      tst.l d0
   13bd4:	|  |  |  |     +----- bne.s 13bec <readIniFile+0x2d0>
					{
						gameSettings.debugMode = stringToInt (secondSoFar);
   13bd6:	|  |  |  |     |      move.l sp,d0
   13bd8:	|  |  |  |     |      addq.l #8,d0
   13bda:	|  |  |  |     |      move.l d0,-(sp)
   13bdc:	|  |  |  |     |      jsr 13ca2 <stringToInt>
   13be2:	|  |  |  |     |      addq.l #4,sp
   13be4:	|  |  |  |     |      move.l d0,d0
   13be6:	|  |  |  |     |      move.w d0,1cb74 <gameSettings+0x16>
					}
				}
				here = 0;
   13bec:	|  |  |  |     \----> clr.b 571(sp)
				doingSecond = FALSE;
   13bf0:	|  |  |  |            clr.w 566(sp)
				lineSoFar[0] = 0;
   13bf4:	|  |  |  |            clr.b 265(sp)
				secondSoFar[0] = 0;
   13bf8:	|  |  |  |            clr.b 8(sp)
				break;
   13bfc:	|  |  |  |  /-------- bra.s 13c74 <readIniFile+0x358>

				case '=':
				doingSecond = TRUE;
   13bfe:	|  |  |  \--|-------> move.w #1,566(sp)
				here = 0;
   13c04:	|  |  |     |         clr.b 571(sp)
				break;
   13c08:	|  |  |     +-------- bra.s 13c74 <readIniFile+0x358>

				default:
				if (doingSecond) {
   13c0a:	|  |  \-----|-------> tst.w 566(sp)
   13c0e:	|  |        |  /----- beq.s 13c42 <readIniFile+0x326>
					secondSoFar[here ++] = readChar;
   13c10:	|  |        |  |      move.b 571(sp),d0
   13c14:	|  |        |  |      move.b d0,d1
   13c16:	|  |        |  |      addq.b #1,d1
   13c18:	|  |        |  |      move.b d1,571(sp)
   13c1c:	|  |        |  |      move.b d0,d0
   13c1e:	|  |        |  |      andi.l #255,d0
   13c24:	|  |        |  |      lea 572(sp),a0
   13c28:	|  |        |  |      adda.l d0,a0
   13c2a:	|  |        |  |      move.b 570(sp),-564(a0)
					secondSoFar[here] = 0;
   13c30:	|  |        |  |      moveq #0,d0
   13c32:	|  |        |  |      move.b 571(sp),d0
   13c36:	|  |        |  |      lea 572(sp),a0
   13c3a:	|  |        |  |      adda.l d0,a0
   13c3c:	|  |        |  |      clr.b -564(a0)
				} else {
					lineSoFar[here ++] = readChar;
					lineSoFar[here] = 0;
				}
				break;
   13c40:	|  |        |  |  /-- bra.s 13c72 <readIniFile+0x356>
					lineSoFar[here ++] = readChar;
   13c42:	|  |        |  \--|-> move.b 571(sp),d0
   13c46:	|  |        |     |   move.b d0,d1
   13c48:	|  |        |     |   addq.b #1,d1
   13c4a:	|  |        |     |   move.b d1,571(sp)
   13c4e:	|  |        |     |   move.b d0,d0
   13c50:	|  |        |     |   andi.l #255,d0
   13c56:	|  |        |     |   lea 572(sp),a0
   13c5a:	|  |        |     |   adda.l d0,a0
   13c5c:	|  |        |     |   move.b 570(sp),-307(a0)
					lineSoFar[here] = 0;
   13c62:	|  |        |     |   moveq #0,d0
   13c64:	|  |        |     |   move.b 571(sp),d0
   13c68:	|  |        |     |   lea 572(sp),a0
   13c6c:	|  |        |     |   adda.l d0,a0
   13c6e:	|  |        |     |   clr.b -307(a0)
				break;
   13c72:	|  |        |     \-> nop
			}
		} while (keepGoing);
   13c74:	|  |        \-------> tst.w 568(sp)
   13c78:	|  \----------------- bne.w 13a0c <readIniFile+0xf0>

		Close(fp);
   13c7c:	|                     move.l 546(sp),526(sp)
   13c82:	|                     move.l 1ca8a <DOSBase>,d0
   13c88:	|                     movea.l d0,a6
   13c8a:	|                     move.l 526(sp),d1
   13c8e:	|                     jsr -36(a6)
   13c92:	|                     move.l d0,522(sp)
	}
}
   13c96:	\-------------------> nop
   13c98:	                      move.l (sp)+,d2
   13c9a:	                      movea.l (sp)+,a6
   13c9c:	                      lea 564(sp),sp
   13ca0:	                      rts

00013ca2 <stringToInt>:

unsigned int stringToInt (char * s) {
   13ca2:	             subq.l #8,sp
	int i = 0;
   13ca4:	             clr.l 4(sp)
	BOOL negative = FALSE;
   13ca8:	             clr.w 2(sp)
	for (;;) {
		if (*s >= '0' && *s <= '9') {
   13cac:	/----------> movea.l 12(sp),a0
   13cb0:	|            move.b (a0),d0
   13cb2:	|            cmpi.b #47,d0
   13cb6:	|        /-- ble.s 13cee <stringToInt+0x4c>
   13cb8:	|        |   movea.l 12(sp),a0
   13cbc:	|        |   move.b (a0),d0
   13cbe:	|        |   cmpi.b #57,d0
   13cc2:	|        +-- bgt.s 13cee <stringToInt+0x4c>
			i *= 10;
   13cc4:	|        |   move.l 4(sp),d1
   13cc8:	|        |   move.l d1,d0
   13cca:	|        |   add.l d0,d0
   13ccc:	|        |   add.l d0,d0
   13cce:	|        |   add.l d1,d0
   13cd0:	|        |   add.l d0,d0
   13cd2:	|        |   move.l d0,4(sp)
			i += *s - '0';
   13cd6:	|        |   movea.l 12(sp),a0
   13cda:	|        |   move.b (a0),d0
   13cdc:	|        |   ext.w d0
   13cde:	|        |   movea.w d0,a0
   13ce0:	|        |   moveq #-48,d0
   13ce2:	|        |   add.l a0,d0
   13ce4:	|        |   add.l d0,4(sp)
			s ++;
   13ce8:	|        |   addq.l #1,12(sp)
   13cec:	|  /-----|-- bra.s 13d26 <stringToInt+0x84>
		} else if (*s == '-') {
   13cee:	|  |     \-> movea.l 12(sp),a0
   13cf2:	|  |         move.b (a0),d0
   13cf4:	|  |         cmpi.b #45,d0
   13cf8:	|  |     /-- bne.s 13d12 <stringToInt+0x70>
			negative = ! negative;
   13cfa:	|  |     |   tst.w 2(sp)
   13cfe:	|  |     |   seq d0
   13d00:	|  |     |   neg.b d0
   13d02:	|  |     |   move.b d0,d0
   13d04:	|  |     |   andi.w #255,d0
   13d08:	|  |     |   move.w d0,2(sp)
			s++;
   13d0c:	|  |     |   addq.l #1,12(sp)
   13d10:	+--|-----|-- bra.s 13cac <stringToInt+0xa>
		} else {
			if (negative)
   13d12:	|  |     \-> tst.w 2(sp)
   13d16:	|  |     /-- beq.s 13d20 <stringToInt+0x7e>
				return -i;
   13d18:	|  |     |   move.l 4(sp),d0
   13d1c:	|  |     |   neg.l d0
   13d1e:	|  |  /--|-- bra.s 13d28 <stringToInt+0x86>
			return i;
   13d20:	|  |  |  \-> move.l 4(sp),d0
   13d24:	|  |  +----- bra.s 13d28 <stringToInt+0x86>
		if (*s >= '0' && *s <= '9') {
   13d26:	\--\--|----X bra.s 13cac <stringToInt+0xa>
		}
	}
   13d28:	      \----> addq.l #8,sp
   13d2a:	             rts

00013d2c <fileExists>:
 */
#include <proto/dos.h>
#include "helpers.h"
#include "support/gcc8_c_support.h"

BYTE fileExists(const char * file) {
   13d2c:	    lea -28(sp),sp
   13d30:	    move.l a6,-(sp)
   13d32:	    move.l d2,-(sp)
	KPrintF("fileexists: Checking File");
   13d34:	    pea 19ed3 <graphics.c.1c13408a+0x380>
   13d3a:	    jsr 17366 <KPrintF>
   13d40:	    addq.l #4,sp
	BPTR tester;
	BYTE retval = 0;
   13d42:	    clr.b 35(sp)
	tester = Open(file, MODE_OLDFILE);
   13d46:	    move.l 40(sp),30(sp)
   13d4c:	    move.l #1005,26(sp)
   13d54:	    move.l 1ca8a <DOSBase>,d0
   13d5a:	    movea.l d0,a6
   13d5c:	    move.l 30(sp),d1
   13d60:	    move.l 26(sp),d2
   13d64:	    jsr -30(a6)
   13d68:	    move.l d0,22(sp)
   13d6c:	    move.l 22(sp),d0
   13d70:	    move.l d0,18(sp)
	if (tester) {
   13d74:	/-- beq.s 13da4 <fileExists+0x78>
		KPrintF("fileexists: File exists");
   13d76:	|   pea 19eed <graphics.c.1c13408a+0x39a>
   13d7c:	|   jsr 17366 <KPrintF>
   13d82:	|   addq.l #4,sp
		retval = 1;
   13d84:	|   move.b #1,35(sp)
		Close(tester);
   13d8a:	|   move.l 18(sp),14(sp)
   13d90:	|   move.l 1ca8a <DOSBase>,d0
   13d96:	|   movea.l d0,a6
   13d98:	|   move.l 14(sp),d1
   13d9c:	|   jsr -36(a6)
   13da0:	|   move.l d0,10(sp)
	}
	return retval;
   13da4:	\-> move.b 35(sp),d0
   13da8:	    move.l (sp)+,d2
   13daa:	    movea.l (sp)+,a6
   13dac:	    lea 28(sp),sp
   13db0:	    rts

00013db2 <strcmp>:
#endif


int strcmp(const char* s1, const char* s2)
{
    while(*s1 && (*s1 == *s2))
   13db2:	   /-- bra.s 13dbc <strcmp+0xa>
    {
        s1++;
   13db4:	/--|-> addq.l #1,4(sp)
        s2++;
   13db8:	|  |   addq.l #1,8(sp)
    while(*s1 && (*s1 == *s2))
   13dbc:	|  \-> movea.l 4(sp),a0
   13dc0:	|      move.b (a0),d0
   13dc2:	|  /-- beq.s 13dd4 <strcmp+0x22>
   13dc4:	|  |   movea.l 4(sp),a0
   13dc8:	|  |   move.b (a0),d1
   13dca:	|  |   movea.l 8(sp),a0
   13dce:	|  |   move.b (a0),d0
   13dd0:	|  |   cmp.b d1,d0
   13dd2:	\--|-- beq.s 13db4 <strcmp+0x2>
    }
    return *(const unsigned char*)s1 - *(const unsigned char*)s2;
   13dd4:	   \-> movea.l 4(sp),a0
   13dd8:	       move.b (a0),d0
   13dda:	       moveq #0,d1
   13ddc:	       move.b d0,d1
   13dde:	       movea.l 8(sp),a0
   13de2:	       move.b (a0),d0
   13de4:	       move.b d0,d0
   13de6:	       andi.l #255,d0
   13dec:	       sub.l d0,d1
   13dee:	       move.l d1,d0
}
   13df0:	       rts

00013df2 <strlen>:

long unsigned int strlen (const char *s) 
{  
   13df2:	       subq.l #4,sp
	long unsigned int i = 0;
   13df4:	       clr.l (sp)
	while(s[i]) i++; 
   13df6:	   /-- bra.s 13dfa <strlen+0x8>
   13df8:	/--|-> addq.l #1,(sp)
   13dfa:	|  \-> movea.l 8(sp),a0
   13dfe:	|      adda.l (sp),a0
   13e00:	|      move.b (a0),d0
   13e02:	\----- bne.s 13df8 <strlen+0x6>
	return(i);
   13e04:	       move.l (sp),d0
}
   13e06:	       addq.l #4,sp
   13e08:	       rts

00013e0a <strcpy>:

char *strcpy(char *t, const char *s) 
{
	while(*t++ = *s++);
   13e0a:	    nop
   13e0c:	/-> move.l 8(sp),d0
   13e10:	|   move.l d0,d1
   13e12:	|   addq.l #1,d1
   13e14:	|   move.l d1,8(sp)
   13e18:	|   movea.l 4(sp),a0
   13e1c:	|   lea 1(a0),a1
   13e20:	|   move.l a1,4(sp)
   13e24:	|   movea.l d0,a1
   13e26:	|   move.b (a1),d0
   13e28:	|   move.b d0,(a0)
   13e2a:	|   move.b (a0),d0
   13e2c:	\-- bne.s 13e0c <strcpy+0x2>
}
   13e2e:	    nop
   13e30:	    rts

00013e32 <joinStrings>:

char * joinStrings (const char * s1, const char * s2) {
   13e32:	    lea -20(sp),sp
   13e36:	    move.l a6,-(sp)
   13e38:	    move.l d2,-(sp)
	char * newString = AllocVec(strlen (s1) + strlen (s2) + 1, MEMF_ANY); 
   13e3a:	    move.l 32(sp),-(sp)
   13e3e:	    jsr 13df2 <strlen>
   13e44:	    addq.l #4,sp
   13e46:	    move.l d0,d2
   13e48:	    move.l 36(sp),-(sp)
   13e4c:	    jsr 13df2 <strlen>
   13e52:	    addq.l #4,sp
   13e54:	    add.l d2,d0
   13e56:	    move.l d0,d1
   13e58:	    addq.l #1,d1
   13e5a:	    move.l d1,20(sp)
   13e5e:	    clr.l 16(sp)
   13e62:	    move.l 1ca82 <SysBase>,d0
   13e68:	    movea.l d0,a6
   13e6a:	    move.l 20(sp),d0
   13e6e:	    move.l 16(sp),d1
   13e72:	    jsr -684(a6)
   13e76:	    move.l d0,12(sp)
   13e7a:	    move.l 12(sp),d0
   13e7e:	    move.l d0,8(sp)
	char * t = newString;
   13e82:	    move.l 8(sp),24(sp)

	while(*t++ = *s1++);
   13e88:	    nop
   13e8a:	/-> move.l 32(sp),d0
   13e8e:	|   move.l d0,d1
   13e90:	|   addq.l #1,d1
   13e92:	|   move.l d1,32(sp)
   13e96:	|   movea.l 24(sp),a0
   13e9a:	|   lea 1(a0),a1
   13e9e:	|   move.l a1,24(sp)
   13ea2:	|   movea.l d0,a1
   13ea4:	|   move.b (a1),d0
   13ea6:	|   move.b d0,(a0)
   13ea8:	|   move.b (a0),d0
   13eaa:	\-- bne.s 13e8a <joinStrings+0x58>
	t--;
   13eac:	    subq.l #1,24(sp)
	while(*t++ = *s2++);
   13eb0:	    nop
   13eb2:	/-> move.l 36(sp),d0
   13eb6:	|   move.l d0,d1
   13eb8:	|   addq.l #1,d1
   13eba:	|   move.l d1,36(sp)
   13ebe:	|   movea.l 24(sp),a0
   13ec2:	|   lea 1(a0),a1
   13ec6:	|   move.l a1,24(sp)
   13eca:	|   movea.l d0,a1
   13ecc:	|   move.b (a1),d0
   13ece:	|   move.b d0,(a0)
   13ed0:	|   move.b (a0),d0
   13ed2:	\-- bne.s 13eb2 <joinStrings+0x80>

	return newString;
   13ed4:	    move.l 8(sp),d0
}
   13ed8:	    move.l (sp)+,d2
   13eda:	    movea.l (sp)+,a6
   13edc:	    lea 20(sp),sp
   13ee0:	    rts

00013ee2 <itoa>:

#define va_start(ap, last) (ap = (va_list)&last + sizeof(last))
#define va_arg(ap, type) (*(type*)(ap += sizeof(type)) - 1)
#define va_end(ap) (ap = (va_list)0)

char* itoa(int value, char* str, int base) {
   13ee2:	       lea -16(sp),sp
    char* rc;
    char* ptr;
    char* low;
    // Set '-' for negative decimals.
    if (base == 10 && value < 0) {
   13ee6:	       moveq #10,d0
   13ee8:	       cmp.l 28(sp),d0
   13eec:	   /-- bne.s 13f0a <itoa+0x28>
   13eee:	   |   tst.l 20(sp)
   13ef2:	   +-- bge.s 13f0a <itoa+0x28>
        *str++ = '-';
   13ef4:	   |   move.l 24(sp),d0
   13ef8:	   |   move.l d0,d1
   13efa:	   |   addq.l #1,d1
   13efc:	   |   move.l d1,24(sp)
   13f00:	   |   movea.l d0,a0
   13f02:	   |   move.b #45,(a0)
        value *= -1;
   13f06:	   |   neg.l 20(sp)
    }
    rc = ptr = str;
   13f0a:	   \-> move.l 24(sp),12(sp)
   13f10:	       move.l 12(sp),4(sp)
    // Set pointer to last digit's place.
    do {
        *ptr++ = "0123456789abcdef"[value % base];
   13f16:	   /-> move.l 20(sp),d0
   13f1a:	   |   move.l 28(sp),-(sp)
   13f1e:	   |   move.l d0,-(sp)
   13f20:	   |   jsr 17dc6 <__modsi3>
   13f26:	   |   addq.l #8,sp
   13f28:	   |   movea.l d0,a1
   13f2a:	   |   move.l 12(sp),d0
   13f2e:	   |   move.l d0,d1
   13f30:	   |   addq.l #1,d1
   13f32:	   |   move.l d1,12(sp)
   13f36:	   |   lea 19f05 <graphics.c.1c13408a+0x3b2>,a0
   13f3c:	   |   move.b (0,a1,a0.l),d1
   13f40:	   |   movea.l d0,a0
   13f42:	   |   move.b d1,(a0)
        value /= base;
   13f44:	   |   move.l 28(sp),-(sp)
   13f48:	   |   move.l 24(sp),-(sp)
   13f4c:	   |   jsr 17d98 <__divsi3>
   13f52:	   |   addq.l #8,sp
   13f54:	   |   move.l d0,20(sp)
    } while (value);
   13f58:	   \-- bne.s 13f16 <itoa+0x34>
    // Null-terminate string.
    *ptr-- = '\0';
   13f5a:	       move.l 12(sp),d0
   13f5e:	       move.l d0,d1
   13f60:	       subq.l #1,d1
   13f62:	       move.l d1,12(sp)
   13f66:	       movea.l d0,a0
   13f68:	       clr.b (a0)
    // Reverse string.
    for (low = rc; low < ptr; low++, ptr--) {
   13f6a:	       move.l 4(sp),8(sp)
   13f70:	   /-- bra.s 13f96 <itoa+0xb4>
        char temp = *low;
   13f72:	/--|-> movea.l 8(sp),a0
   13f76:	|  |   move.b (a0),3(sp)
        *low = *ptr;
   13f7a:	|  |   movea.l 12(sp),a0
   13f7e:	|  |   move.b (a0),d0
   13f80:	|  |   movea.l 8(sp),a0
   13f84:	|  |   move.b d0,(a0)
        *ptr = temp;
   13f86:	|  |   movea.l 12(sp),a0
   13f8a:	|  |   move.b 3(sp),(a0)
    for (low = rc; low < ptr; low++, ptr--) {
   13f8e:	|  |   addq.l #1,8(sp)
   13f92:	|  |   subq.l #1,12(sp)
   13f96:	|  \-> move.l 8(sp),d0
   13f9a:	|      cmp.l 12(sp),d0
   13f9e:	\----- bcs.s 13f72 <itoa+0x90>
    }
    return rc;
   13fa0:	       move.l 4(sp),d0
}
   13fa4:	       lea 16(sp),sp
   13fa8:	       rts

00013faa <vsprintf2>:

int vsprintf2(char* str, const char* format, va_list args) {
   13faa:	                            lea -40(sp),sp
   13fae:	                            move.l d2,-(sp)
    char* s = str;
   13fb0:	                            move.l 48(sp),40(sp)
    const char* p = format;
   13fb6:	                            move.l 52(sp),36(sp)
    int i;
    char* sval;
    char buffer[20];

    while (*p) {
   13fbc:	   /----------------------- bra.w 140f0 <vsprintf2+0x146>
        if (*p == '%') {
   13fc0:	/--|----------------------> movea.l 36(sp),a0
   13fc4:	|  |                        move.b (a0),d0
   13fc6:	|  |                        cmpi.b #37,d0
   13fca:	|  |  /-------------------- bne.w 140d6 <vsprintf2+0x12c>
            switch (*++p) {
   13fce:	|  |  |                     addq.l #1,36(sp)
   13fd2:	|  |  |                     movea.l 36(sp),a0
   13fd6:	|  |  |                     move.b (a0),d0
   13fd8:	|  |  |                     ext.w d0
   13fda:	|  |  |                     movea.w d0,a0
   13fdc:	|  |  |                     moveq #115,d0
   13fde:	|  |  |                     cmp.l a0,d0
   13fe0:	|  |  |           /-------- beq.s 14058 <vsprintf2+0xae>
   13fe2:	|  |  |           |         moveq #115,d1
   13fe4:	|  |  |           |         cmp.l a0,d1
   13fe6:	|  |  |  /--------|-------- blt.w 140be <vsprintf2+0x114>
   13fea:	|  |  |  |        |         moveq #99,d2
   13fec:	|  |  |  |        |         cmp.l a0,d2
   13fee:	|  |  |  |  /-----|-------- beq.w 14096 <vsprintf2+0xec>
   13ff2:	|  |  |  |  |     |         moveq #100,d0
   13ff4:	|  |  |  |  |     |         cmp.l a0,d0
   13ff6:	|  |  |  +--|-----|-------- bne.w 140be <vsprintf2+0x114>
                case 'd':
                    i = va_arg(args, int);
   13ffa:	|  |  |  |  |     |         addq.l #4,56(sp)
   13ffe:	|  |  |  |  |     |         movea.l 56(sp),a0
   14002:	|  |  |  |  |     |         move.l (a0),d0
   14004:	|  |  |  |  |     |         move.l d0,d1
   14006:	|  |  |  |  |     |         subq.l #1,d1
   14008:	|  |  |  |  |     |         move.l d1,24(sp)
                    itoa(i, buffer, 10);
   1400c:	|  |  |  |  |     |         pea a <_start+0xa>
   14010:	|  |  |  |  |     |         lea 8(sp),a0
   14014:	|  |  |  |  |     |         move.l a0,-(sp)
   14016:	|  |  |  |  |     |         move.l 32(sp),-(sp)
   1401a:	|  |  |  |  |     |         jsr 13ee2 <itoa>
   14020:	|  |  |  |  |     |         lea 12(sp),sp
					for (char* b = buffer; *b; b++) {
   14024:	|  |  |  |  |     |         lea 44(sp),a0
   14028:	|  |  |  |  |     |         lea -40(a0),a0
   1402c:	|  |  |  |  |     |         move.l a0,28(sp)
   14030:	|  |  |  |  |     |     /-- bra.s 1404c <vsprintf2+0xa2>
                        *s++ = *b;
   14032:	|  |  |  |  |     |  /--|-> move.l 40(sp),d0
   14036:	|  |  |  |  |     |  |  |   move.l d0,d1
   14038:	|  |  |  |  |     |  |  |   addq.l #1,d1
   1403a:	|  |  |  |  |     |  |  |   move.l d1,40(sp)
   1403e:	|  |  |  |  |     |  |  |   movea.l 28(sp),a0
   14042:	|  |  |  |  |     |  |  |   move.b (a0),d1
   14044:	|  |  |  |  |     |  |  |   movea.l d0,a0
   14046:	|  |  |  |  |     |  |  |   move.b d1,(a0)
					for (char* b = buffer; *b; b++) {
   14048:	|  |  |  |  |     |  |  |   addq.l #1,28(sp)
   1404c:	|  |  |  |  |     |  |  \-> movea.l 28(sp),a0
   14050:	|  |  |  |  |     |  |      move.b (a0),d0
   14052:	|  |  |  |  |     |  \----- bne.s 14032 <vsprintf2+0x88>
                    }
                    break;
   14054:	|  |  |  |  |  /--|-------- bra.w 140ec <vsprintf2+0x142>
                case 's':
                    sval = va_arg(args, char*);
   14058:	|  |  |  |  |  |  \-------> addq.l #4,56(sp)
   1405c:	|  |  |  |  |  |            movea.l 56(sp),a0
   14060:	|  |  |  |  |  |            move.l (a0),d0
   14062:	|  |  |  |  |  |            move.l d0,d1
   14064:	|  |  |  |  |  |            subq.l #1,d1
   14066:	|  |  |  |  |  |            move.l d1,32(sp)
                    while (*sval) {
   1406a:	|  |  |  |  |  |        /-- bra.s 1408c <vsprintf2+0xe2>
                        *s++ = *sval++;
   1406c:	|  |  |  |  |  |     /--|-> move.l 32(sp),d1
   14070:	|  |  |  |  |  |     |  |   move.l d1,d2
   14072:	|  |  |  |  |  |     |  |   addq.l #1,d2
   14074:	|  |  |  |  |  |     |  |   move.l d2,32(sp)
   14078:	|  |  |  |  |  |     |  |   move.l 40(sp),d0
   1407c:	|  |  |  |  |  |     |  |   move.l d0,d2
   1407e:	|  |  |  |  |  |     |  |   addq.l #1,d2
   14080:	|  |  |  |  |  |     |  |   move.l d2,40(sp)
   14084:	|  |  |  |  |  |     |  |   movea.l d1,a0
   14086:	|  |  |  |  |  |     |  |   move.b (a0),d1
   14088:	|  |  |  |  |  |     |  |   movea.l d0,a0
   1408a:	|  |  |  |  |  |     |  |   move.b d1,(a0)
                    while (*sval) {
   1408c:	|  |  |  |  |  |     |  \-> movea.l 32(sp),a0
   14090:	|  |  |  |  |  |     |      move.b (a0),d0
   14092:	|  |  |  |  |  |     \----- bne.s 1406c <vsprintf2+0xc2>
                    }
                    break;
   14094:	|  |  |  |  |  +----------- bra.s 140ec <vsprintf2+0x142>
                case 'c':
                    i = va_arg(args, int);
   14096:	|  |  |  |  \--|----------> addq.l #4,56(sp)
   1409a:	|  |  |  |     |            movea.l 56(sp),a0
   1409e:	|  |  |  |     |            move.l (a0),d0
   140a0:	|  |  |  |     |            move.l d0,d1
   140a2:	|  |  |  |     |            subq.l #1,d1
   140a4:	|  |  |  |     |            move.l d1,24(sp)
                    *s++ = (char)i;
   140a8:	|  |  |  |     |            move.l 40(sp),d0
   140ac:	|  |  |  |     |            move.l d0,d2
   140ae:	|  |  |  |     |            addq.l #1,d2
   140b0:	|  |  |  |     |            move.l d2,40(sp)
   140b4:	|  |  |  |     |            move.l 24(sp),d1
   140b8:	|  |  |  |     |            movea.l d0,a0
   140ba:	|  |  |  |     |            move.b d1,(a0)
                    break;
   140bc:	|  |  |  |     +----------- bra.s 140ec <vsprintf2+0x142>
                default:
                    *s++ = *p;
   140be:	|  |  |  \-----|----------> move.l 40(sp),d0
   140c2:	|  |  |        |            move.l d0,d1
   140c4:	|  |  |        |            addq.l #1,d1
   140c6:	|  |  |        |            move.l d1,40(sp)
   140ca:	|  |  |        |            movea.l 36(sp),a0
   140ce:	|  |  |        |            move.b (a0),d1
   140d0:	|  |  |        |            movea.l d0,a0
   140d2:	|  |  |        |            move.b d1,(a0)
                    break;
   140d4:	|  |  |        +----------- bra.s 140ec <vsprintf2+0x142>
            }
        } else {
            *s++ = *p;
   140d6:	|  |  \--------|----------> move.l 40(sp),d0
   140da:	|  |           |            move.l d0,d1
   140dc:	|  |           |            addq.l #1,d1
   140de:	|  |           |            move.l d1,40(sp)
   140e2:	|  |           |            movea.l 36(sp),a0
   140e6:	|  |           |            move.b (a0),d1
   140e8:	|  |           |            movea.l d0,a0
   140ea:	|  |           |            move.b d1,(a0)
        }
        p++;
   140ec:	|  |           \----------> addq.l #1,36(sp)
    while (*p) {
   140f0:	|  \----------------------> movea.l 36(sp),a0
   140f4:	|                           move.b (a0),d0
   140f6:	\-------------------------- bne.w 13fc0 <vsprintf2+0x16>
    }
    *s = '\0';
   140fa:	                            movea.l 40(sp),a0
   140fe:	                            clr.b (a0)
    return s - str;
   14100:	                            move.l 40(sp),d0
   14104:	                            sub.l 48(sp),d0
}
   14108:	                            move.l (sp)+,d2
   1410a:	                            lea 40(sp),sp
   1410e:	                            rts

00014110 <sprintf>:

int sprintf(char* str, const char* format, ...) {
   14110:	subq.l #8,sp
    va_list args;
    int done;

    va_start(args, format);
   14112:	moveq #16,d0
   14114:	add.l sp,d0
   14116:	move.l d0,d1
   14118:	addq.l #4,d1
   1411a:	move.l d1,4(sp)
    done = vsprintf2(str, format, args);
   1411e:	move.l 16(sp),d0
   14122:	move.l 4(sp),-(sp)
   14126:	move.l d0,-(sp)
   14128:	move.l 20(sp),-(sp)
   1412c:	jsr 13faa <vsprintf2>
   14132:	lea 12(sp),sp
   14136:	move.l d0,(sp)
    va_end(args);
   14138:	clr.l 4(sp)

    return done;
   1413c:	move.l (sp),d0
}
   1413e:	addq.l #8,sp
   14140:	rts

00014142 <addVarToStack>:
const char * typeName[] = {"undefined", "number", "user function", "string",
							"built-in function", "file", "stack",
							"object type", "animation", "costume"};


BOOL addVarToStack(const struct variable * va, struct variableStack ** thisStack) {
   14142:	       lea -20(sp),sp
   14146:	       move.l a6,-(sp)
    struct variableStack * newStack = (struct variableStack *)AllocVec(sizeof(struct variableStack), MEMF_ANY);
   14148:	       moveq #12,d0
   1414a:	       move.l d0,20(sp)
   1414e:	       clr.l 16(sp)
   14152:	       move.l 1ca82 <SysBase>,d0
   14158:	       movea.l d0,a6
   1415a:	       move.l 20(sp),d0
   1415e:	       move.l 16(sp),d1
   14162:	       jsr -684(a6)
   14166:	       move.l d0,12(sp)
   1416a:	       move.l 12(sp),d0
   1416e:	       move.l d0,8(sp)
    if (!newStack) return FALSE;
   14172:	   /-- bne.s 14178 <addVarToStack+0x36>
   14174:	   |   clr.w d0
   14176:	/--|-- bra.s 141c0 <addVarToStack+0x7e>

    if (!copyMain(va, &newStack->thisVar)) {
   14178:	|  \-> move.l 8(sp),d0
   1417c:	|      move.l d0,-(sp)
   1417e:	|      move.l 32(sp),-(sp)
   14182:	|      jsr 14ca4 <copyMain>
   14188:	|      addq.l #8,sp
   1418a:	|      tst.w d0
   1418c:	|  /-- bne.s 141a8 <addVarToStack+0x66>
        FreeVec(newStack);
   1418e:	|  |   move.l 8(sp),4(sp)
   14194:	|  |   move.l 1ca82 <SysBase>,d0
   1419a:	|  |   movea.l d0,a6
   1419c:	|  |   movea.l 4(sp),a1
   141a0:	|  |   jsr -690(a6)
        return FALSE;
   141a4:	|  |   clr.w d0
   141a6:	+--|-- bra.s 141c0 <addVarToStack+0x7e>
    }

    newStack->next = *thisStack;
   141a8:	|  \-> movea.l 32(sp),a0
   141ac:	|      move.l (a0),d0
   141ae:	|      movea.l 8(sp),a0
   141b2:	|      move.l d0,8(a0)
    *thisStack = newStack;
   141b6:	|      movea.l 32(sp),a0
   141ba:	|      move.l 8(sp),(a0)
    return TRUE;
   141be:	|      moveq #1,d0
}
   141c0:	\----> movea.l (sp)+,a6
   141c2:	       lea 20(sp),sp
   141c6:	       rts

000141c8 <addVarToStackQuick>:

BOOL addVarToStackQuick(struct variable *va, struct variableStack **thisStack) {
   141c8:	       lea -16(sp),sp
   141cc:	       move.l a6,-(sp)
    struct variableStack *newStack = AllocVec(sizeof(struct variableStack), MEMF_ANY);
   141ce:	       moveq #12,d0
   141d0:	       move.l d0,16(sp)
   141d4:	       clr.l 12(sp)
   141d8:	       move.l 1ca82 <SysBase>,d0
   141de:	       movea.l d0,a6
   141e0:	       move.l 16(sp),d0
   141e4:	       move.l 12(sp),d1
   141e8:	       jsr -684(a6)
   141ec:	       move.l d0,8(sp)
   141f0:	       move.l 8(sp),d0
   141f4:	       move.l d0,4(sp)
    if (!newStack) return FALSE;
   141f8:	   /-- bne.s 141fe <addVarToStackQuick+0x36>
   141fa:	   |   clr.w d0
   141fc:	/--|-- bra.s 14234 <addVarToStackQuick+0x6c>

//    if (!copyMain(va, &newStack->thisVar)) return FALSE;

    memcpy(&(newStack->thisVar), va, sizeof(struct variable));
   141fe:	|  \-> move.l 4(sp),d0
   14202:	|      pea 8 <_start+0x8>
   14206:	|      move.l 28(sp),-(sp)
   1420a:	|      move.l d0,-(sp)
   1420c:	|      jsr 1731a <memcpy>
   14212:	|      lea 12(sp),sp
    va->varType = SVT_NULL;
   14216:	|      movea.l 24(sp),a0
   1421a:	|      clr.l (a0)

    newStack->next = *thisStack;
   1421c:	|      movea.l 28(sp),a0
   14220:	|      move.l (a0),d0
   14222:	|      movea.l 4(sp),a0
   14226:	|      move.l d0,8(a0)
    *thisStack = newStack;
   1422a:	|      movea.l 28(sp),a0
   1422e:	|      move.l 4(sp),(a0)
    return TRUE;
   14232:	|      moveq #1,d0
}
   14234:	\----> movea.l (sp)+,a6
   14236:	       lea 16(sp),sp
   1423a:	       rts

0001423c <addVariablesInSecond>:

void addVariablesInSecond(struct variable * var1, struct variable * var2) {
   1423c:	       lea -16(sp),sp
   14240:	       move.l a6,-(sp)
	if (var1->varType == SVT_INT && var2->varType == SVT_INT) {
   14242:	       movea.l 24(sp),a0
   14246:	       move.l (a0),d0
   14248:	       moveq #1,d1
   1424a:	       cmp.l d0,d1
   1424c:	   /-- bne.s 14276 <addVariablesInSecond+0x3a>
   1424e:	   |   movea.l 28(sp),a0
   14252:	   |   move.l (a0),d0
   14254:	   |   moveq #1,d1
   14256:	   |   cmp.l d0,d1
   14258:	   +-- bne.s 14276 <addVariablesInSecond+0x3a>
		var2->varData.intValue += var1->varData.intValue;
   1425a:	   |   movea.l 28(sp),a0
   1425e:	   |   move.l 4(a0),d1
   14262:	   |   movea.l 24(sp),a0
   14266:	   |   move.l 4(a0),d0
   1426a:	   |   add.l d1,d0
   1426c:	   |   movea.l 28(sp),a0
   14270:	   |   move.l d0,4(a0)
   14274:	/--|-- bra.s 142f0 <addVariablesInSecond+0xb4>
	} else {
		char * string1 = getTextFromAnyVar(var1);
   14276:	|  \-> move.l 24(sp),-(sp)
   1427a:	|      jsr 14edc <getTextFromAnyVar>
   14280:	|      addq.l #4,sp
   14282:	|      move.l d0,16(sp)
		char * string2 = getTextFromAnyVar(var2);
   14286:	|      move.l 28(sp),-(sp)
   1428a:	|      jsr 14edc <getTextFromAnyVar>
   14290:	|      addq.l #4,sp
   14292:	|      move.l d0,12(sp)

		unlinkVar(var2);
   14296:	|      move.l 28(sp),-(sp)
   1429a:	|      jsr 14b54 <unlinkVar>
   142a0:	|      addq.l #4,sp
		var2->varData.theString = joinStrings(string1, string2);
   142a2:	|      move.l 12(sp),-(sp)
   142a6:	|      move.l 20(sp),-(sp)
   142aa:	|      jsr 13e32 <joinStrings>
   142b0:	|      addq.l #8,sp
   142b2:	|      movea.l 28(sp),a0
   142b6:	|      move.l d0,4(a0)
		var2->varType = SVT_STRING;
   142ba:	|      movea.l 28(sp),a0
   142be:	|      moveq #3,d0
   142c0:	|      move.l d0,(a0)
		FreeVec(string1);
   142c2:	|      move.l 16(sp),8(sp)
   142c8:	|      move.l 1ca82 <SysBase>,d0
   142ce:	|      movea.l d0,a6
   142d0:	|      movea.l 8(sp),a1
   142d4:	|      jsr -690(a6)
		FreeVec(string2);
   142d8:	|      move.l 12(sp),4(sp)
   142de:	|      move.l 1ca82 <SysBase>,d0
   142e4:	|      movea.l d0,a6
   142e6:	|      movea.l 4(sp),a1
   142ea:	|      jsr -690(a6)
	}
}
   142ee:	|      nop
   142f0:	\----> nop
   142f2:	       movea.l (sp)+,a6
   142f4:	       lea 16(sp),sp
   142f8:	       rts

000142fa <compareVariablesInSecond>:

void compareVariablesInSecond (const struct variable *var1, struct variable *var2) {	
	setVariable (var2, SVT_INT, compareVars (*var1, *var2));
   142fa:	movea.l 8(sp),a0
   142fe:	move.l 4(a0),-(sp)
   14302:	move.l (a0),-(sp)
   14304:	movea.l 12(sp),a0
   14308:	move.l 4(a0),-(sp)
   1430c:	move.l (a0),-(sp)
   1430e:	jsr 14330 <compareVars>
   14314:	lea 16(sp),sp
   14318:	move.l d0,-(sp)
   1431a:	pea 1 <_start+0x1>
   1431e:	move.l 16(sp),-(sp)
   14322:	jsr 151f8 <setVariable>
   14328:	lea 12(sp),sp
}
   1432c:	nop
   1432e:	rts

00014330 <compareVars>:


int compareVars (const struct variable var1, const struct variable var2) {
   14330:	       subq.l #4,sp
	int re = 0;
   14332:	       clr.l (sp)
	if (var1.varType == var2.varType) {
   14334:	       move.l 8(sp),d1
   14338:	       move.l 16(sp),d0
   1433c:	       cmp.l d1,d0
   1433e:	/----- bne.w 14406 <compareVars+0xd6>
		switch (var1.varType) {
   14342:	|      move.l 8(sp),d0
   14346:	|      moveq #9,d1
   14348:	|      cmp.l d0,d1
   1434a:	|  /-- bcs.w 143ee <compareVars+0xbe>
   1434e:	|  |   add.l d0,d0
   14350:	|  |   movea.l d0,a0
   14352:	|  |   adda.l #82782,a0
   14358:	|  |   move.w (a0),d0
   1435a:	|  |   jmp (1435e <compareVars+0x2e>,pc,d0.w)
   1435e:	|  |   ori.b #-112,(a4)
   14362:	|  |   ori.l #5243024,(a0)
   14368:	|  |   ori.l #7733392,(a0)
   1436e:	|  |   ori.b #28,(1,a6,d7.w)
			case SVT_NULL:
			re = 1;
   14374:	|  |   move.l d0,(sp)
			break;
   14376:	+--|-- bra.w 14406 <compareVars+0xd6>

			case SVT_COSTUME:
			re = (var1.varData.costumeHandler == var2.varData.costumeHandler);
   1437a:	|  |   move.l 12(sp),d1
   1437e:	|  |   move.l 20(sp),d0
   14382:	|  |   cmp.l d1,d0
   14384:	|  |   seq d0
   14386:	|  |   neg.b d0
   14388:	|  |   move.b d0,d0
   1438a:	|  |   andi.l #255,d0
   14390:	|  |   move.l d0,(sp)
			break;
   14392:	+--|-- bra.s 14406 <compareVars+0xd6>

			case SVT_ANIM:
			re = (var1.varData.animHandler == var2.varData.animHandler);
   14394:	|  |   move.l 12(sp),d1
   14398:	|  |   move.l 20(sp),d0
   1439c:	|  |   cmp.l d1,d0
   1439e:	|  |   seq d0
   143a0:	|  |   neg.b d0
   143a2:	|  |   move.b d0,d0
   143a4:	|  |   andi.l #255,d0
   143aa:	|  |   move.l d0,(sp)
			break;
   143ac:	+--|-- bra.s 14406 <compareVars+0xd6>

			case SVT_STRING:

			re = (strcmp (var1.varData.theString, var2.varData.theString) == 0);
   143ae:	|  |   move.l 20(sp),d1
   143b2:	|  |   move.l 12(sp),d0
   143b6:	|  |   move.l d1,-(sp)
   143b8:	|  |   move.l d0,-(sp)
   143ba:	|  |   jsr 13db2 <strcmp>
   143c0:	|  |   addq.l #8,sp
   143c2:	|  |   tst.l d0
   143c4:	|  |   seq d0
   143c6:	|  |   neg.b d0
   143c8:	|  |   move.b d0,d0
   143ca:	|  |   andi.l #255,d0
   143d0:	|  |   move.l d0,(sp)
			break;
   143d2:	+--|-- bra.s 14406 <compareVars+0xd6>

			case SVT_STACK:
			re = (var1.varData.theStack == var2.varData.theStack);
   143d4:	|  |   move.l 12(sp),d1
   143d8:	|  |   move.l 20(sp),d0
   143dc:	|  |   cmp.l d1,d0
   143de:	|  |   seq d0
   143e0:	|  |   neg.b d0
   143e2:	|  |   move.b d0,d0
   143e4:	|  |   andi.l #255,d0
   143ea:	|  |   move.l d0,(sp)
			break;
   143ec:	+--|-- bra.s 14406 <compareVars+0xd6>

			default:
			re = (var1.varData.intValue == var2.varData.intValue);
   143ee:	|  \-> move.l 12(sp),d1
   143f2:	|      move.l 20(sp),d0
   143f6:	|      cmp.l d1,d0
   143f8:	|      seq d0
   143fa:	|      neg.b d0
   143fc:	|      move.b d0,d0
   143fe:	|      andi.l #255,d0
   14404:	|      move.l d0,(sp)
		}
	}
	return re;
   14406:	\----> move.l (sp),d0
}
   14408:	       addq.l #4,sp
   1440a:	       rts

0001440c <copyStack>:

BOOL copyStack (const struct variable * from, struct variable * to) {
   1440c:	             lea -16(sp),sp
   14410:	             move.l a6,-(sp)
	to->varType = SVT_STACK;
   14412:	             movea.l 28(sp),a0
   14416:	             moveq #6,d0
   14418:	             move.l d0,(a0)
	to->varData.theStack = (struct stackHandler *)AllocVec(sizeof(struct stackHandler), MEMF_ANY);
   1441a:	             moveq #12,d0
   1441c:	             move.l d0,12(sp)
   14420:	             clr.l 8(sp)
   14424:	             move.l 1ca82 <SysBase>,d0
   1442a:	             movea.l d0,a6
   1442c:	             move.l 12(sp),d0
   14430:	             move.l 8(sp),d1
   14434:	             jsr -684(a6)
   14438:	             move.l d0,4(sp)
   1443c:	             move.l 4(sp),d0
   14440:	             movea.l 28(sp),a0
   14444:	             move.l d0,4(a0)
	if (!to->varData.theStack) return FALSE;
   14448:	             movea.l 28(sp),a0
   1444c:	             move.l 4(a0),d0
   14450:	         /-- bne.s 14458 <copyStack+0x4c>
   14452:	         |   clr.w d0
   14454:	/--------|-- bra.w 144da <copyStack+0xce>
	to->varData.theStack->first = NULL;
   14458:	|        \-> movea.l 28(sp),a0
   1445c:	|            movea.l 4(a0),a0
   14460:	|            clr.l (a0)
	to->varData.theStack->last = NULL;
   14462:	|            movea.l 28(sp),a0
   14466:	|            movea.l 4(a0),a0
   1446a:	|            clr.l 4(a0)
	to->varData.theStack->timesUsed = 1;
   1446e:	|            movea.l 28(sp),a0
   14472:	|            movea.l 4(a0),a0
   14476:	|            moveq #1,d0
   14478:	|            move.l d0,8(a0)
	struct variableStack * a = from->varData.theStack->first;
   1447c:	|            movea.l 24(sp),a0
   14480:	|            movea.l 4(a0),a0
   14484:	|            move.l (a0),16(sp)

	while (a) {
   14488:	|     /----- bra.s 144d2 <copyStack+0xc6>
		addVarToStack(&a->thisVar, &(to->varData.theStack->first));
   1448a:	|  /--|----> movea.l 28(sp),a0
   1448e:	|  |  |      move.l 4(a0),d0
   14492:	|  |  |      move.l d0,d1
   14494:	|  |  |      move.l 16(sp),d0
   14498:	|  |  |      move.l d1,-(sp)
   1449a:	|  |  |      move.l d0,-(sp)
   1449c:	|  |  |      jsr 14142 <addVarToStack>
   144a2:	|  |  |      addq.l #8,sp
		if (to->varData.theStack->last == NULL) {
   144a4:	|  |  |      movea.l 28(sp),a0
   144a8:	|  |  |      movea.l 4(a0),a0
   144ac:	|  |  |      move.l 4(a0),d0
   144b0:	|  |  |  /-- bne.s 144c8 <copyStack+0xbc>
			to->varData.theStack->last = to->varData.theStack->first;
   144b2:	|  |  |  |   movea.l 28(sp),a0
   144b6:	|  |  |  |   movea.l 4(a0),a1
   144ba:	|  |  |  |   movea.l 28(sp),a0
   144be:	|  |  |  |   movea.l 4(a0),a0
   144c2:	|  |  |  |   move.l (a1),d0
   144c4:	|  |  |  |   move.l d0,4(a0)
		}
		a = a->next;
   144c8:	|  |  |  \-> movea.l 16(sp),a0
   144cc:	|  |  |      move.l 8(a0),16(sp)
	while (a) {
   144d2:	|  |  \----> tst.l 16(sp)
   144d6:	|  \-------- bne.s 1448a <copyStack+0x7e>
	}

	return TRUE;
   144d8:	|            moveq #1,d0
}
   144da:	\----------> movea.l (sp)+,a6
   144dc:	             lea 16(sp),sp
   144e0:	             rts

000144e2 <deleteVarFromStack>:

int deleteVarFromStack (const struct variable * va, struct variableStack ** thisStack, BOOL allOfEm) {
   144e2:	                lea -20(sp),sp
   144e6:	                move.l a6,-(sp)
   144e8:	                move.l 36(sp),d0
   144ec:	                move.w d0,d0
   144ee:	                move.w d0,6(sp)
    struct variableStack ** huntVar = thisStack;
   144f2:	                move.l 32(sp),20(sp)
    struct variableStack * killMe;
    int reply = 0;
   144f8:	                clr.l 16(sp)

    while (*huntVar) {
   144fc:	   /----------- bra.s 1457a <deleteVarFromStack+0x98>
        if (compareVars((*huntVar)->thisVar, *va)) {
   144fe:	/--|----------> movea.l 20(sp),a0
   14502:	|  |            movea.l (a0),a0
   14504:	|  |            movea.l 28(sp),a1
   14508:	|  |            move.l 4(a1),-(sp)
   1450c:	|  |            move.l (a1),-(sp)
   1450e:	|  |            move.l 4(a0),-(sp)
   14512:	|  |            move.l (a0),-(sp)
   14514:	|  |            jsr 14330 <compareVars>
   1451a:	|  |            lea 16(sp),sp
   1451e:	|  |            tst.l d0
   14520:	|  |  /-------- beq.s 1456c <deleteVarFromStack+0x8a>
            killMe = *huntVar;
   14522:	|  |  |         movea.l 20(sp),a0
   14526:	|  |  |         move.l (a0),12(sp)
            *huntVar = killMe->next;
   1452a:	|  |  |         movea.l 12(sp),a0
   1452e:	|  |  |         move.l 8(a0),d0
   14532:	|  |  |         movea.l 20(sp),a0
   14536:	|  |  |         move.l d0,(a0)
            unlinkVar(&killMe->thisVar);
   14538:	|  |  |         move.l 12(sp),d0
   1453c:	|  |  |         move.l d0,-(sp)
   1453e:	|  |  |         jsr 14b54 <unlinkVar>
   14544:	|  |  |         addq.l #4,sp
            FreeVec(killMe);
   14546:	|  |  |         move.l 12(sp),8(sp)
   1454c:	|  |  |         move.l 1ca82 <SysBase>,d0
   14552:	|  |  |         movea.l d0,a6
   14554:	|  |  |         movea.l 8(sp),a1
   14558:	|  |  |         jsr -690(a6)
            if (!allOfEm) return 1;
   1455c:	|  |  |         tst.w 6(sp)
   14560:	|  |  |     /-- bne.s 14566 <deleteVarFromStack+0x84>
   14562:	|  |  |     |   moveq #1,d0
   14564:	|  |  |  /--|-- bra.s 14588 <deleteVarFromStack+0xa6>
            reply++;
   14566:	|  |  |  |  \-> addq.l #1,16(sp)
   1456a:	|  +--|--|----- bra.s 1457a <deleteVarFromStack+0x98>
        } else {
            huntVar = &((*huntVar)->next);
   1456c:	|  |  \--|----> movea.l 20(sp),a0
   14570:	|  |     |      move.l (a0),d0
   14572:	|  |     |      move.l d0,d1
   14574:	|  |     |      addq.l #8,d1
   14576:	|  |     |      move.l d1,20(sp)
    while (*huntVar) {
   1457a:	|  \-----|----> movea.l 20(sp),a0
   1457e:	|        |      move.l (a0),d0
   14580:	\--------|----- bne.w 144fe <deleteVarFromStack+0x1c>
        }
    }

    return reply;
   14584:	         |      move.l 16(sp),d0
}
   14588:	         \----> movea.l (sp)+,a6
   1458a:	                lea 20(sp),sp
   1458e:	                rts

00014590 <fastArrayGetByIndex>:


struct variable * fastArrayGetByIndex (struct fastArrayHandler * vS, unsigned int theIndex) {
	if (theIndex >= (unsigned int) vS -> size) return NULL;
   14590:	       movea.l 4(sp),a0
   14594:	       move.l 4(a0),d0
   14598:	       cmp.l 8(sp),d0
   1459c:	   /-- bhi.s 145a2 <fastArrayGetByIndex+0x12>
   1459e:	   |   moveq #0,d0
   145a0:	/--|-- bra.s 145b0 <fastArrayGetByIndex+0x20>
	return & vS -> fastVariables[theIndex];
   145a2:	|  \-> movea.l 4(sp),a0
   145a6:	|      move.l (a0),d1
   145a8:	|      move.l 8(sp),d0
   145ac:	|      lsl.l #3,d0
   145ae:	|      add.l d1,d0
}
   145b0:	\----> rts

000145b2 <getCostumeFromVar>:

struct persona * getCostumeFromVar(struct variable *thisVar) {
   145b2:	                lea -32(sp),sp
   145b6:	                move.l a6,-(sp)
   145b8:	                move.l a2,-(sp)
    struct persona *p = NULL;
   145ba:	                clr.l 36(sp)

    switch (thisVar->varType) {
   145be:	                movea.l 44(sp),a0
   145c2:	                move.l (a0),d0
   145c4:	                moveq #8,d1
   145c6:	                cmp.l d0,d1
   145c8:	            /-- beq.s 145d6 <getCostumeFromVar+0x24>
   145ca:	            |   moveq #9,d1
   145cc:	            |   cmp.l d0,d1
   145ce:	   /--------|-- beq.w 14684 <getCostumeFromVar+0xd2>
   145d2:	/--|--------|-- bra.w 1468e <getCostumeFromVar+0xdc>
        case SVT_ANIM:
            p = AllocVec(sizeof(struct persona), MEMF_ANY);
   145d6:	|  |        \-> moveq #8,d0
   145d8:	|  |            move.l d0,28(sp)
   145dc:	|  |            clr.l 24(sp)
   145e0:	|  |            move.l 1ca82 <SysBase>,d0
   145e6:	|  |            movea.l d0,a6
   145e8:	|  |            move.l 28(sp),d0
   145ec:	|  |            move.l 24(sp),d1
   145f0:	|  |            jsr -684(a6)
   145f4:	|  |            move.l d0,20(sp)
   145f8:	|  |            move.l 20(sp),d0
   145fc:	|  |            move.l d0,36(sp)
            if (!p) return NULL;
   14600:	|  |        /-- bne.s 14608 <getCostumeFromVar+0x56>
   14602:	|  |        |   moveq #0,d0
   14604:	|  |  /-----|-- bra.w 146b8 <getCostumeFromVar+0x106>
            p->numDirections = 1;
   14608:	|  |  |     \-> movea.l 36(sp),a0
   1460c:	|  |  |         moveq #1,d1
   1460e:	|  |  |         move.l d1,4(a0)
            p->animation = AllocVec(3 * sizeof(struct personaAnimation *), MEMF_ANY);
   14612:	|  |  |         moveq #12,d0
   14614:	|  |  |         move.l d0,16(sp)
   14618:	|  |  |         clr.l 12(sp)
   1461c:	|  |  |         move.l 1ca82 <SysBase>,d0
   14622:	|  |  |         movea.l d0,a6
   14624:	|  |  |         move.l 16(sp),d0
   14628:	|  |  |         move.l 12(sp),d1
   1462c:	|  |  |         jsr -684(a6)
   14630:	|  |  |         move.l d0,8(sp)
   14634:	|  |  |         move.l 8(sp),d0
   14638:	|  |  |         movea.l 36(sp),a0
   1463c:	|  |  |         move.l d0,(a0)
            if (!p->animation) return NULL;
   1463e:	|  |  |         movea.l 36(sp),a0
   14642:	|  |  |         move.l (a0),d0
   14644:	|  |  |     /-- bne.s 1464a <getCostumeFromVar+0x98>
   14646:	|  |  |     |   moveq #0,d0
   14648:	|  |  +-----|-- bra.s 146b8 <getCostumeFromVar+0x106>

            for (int iii = 0; iii < 3; iii++) {
   1464a:	|  |  |     \-> clr.l 32(sp)
   1464e:	|  |  |     /-- bra.s 1467a <getCostumeFromVar+0xc8>
                p->animation[iii] = copyAnim(thisVar->varData.animHandler);
   14650:	|  |  |  /--|-> movea.l 44(sp),a0
   14654:	|  |  |  |  |   move.l 4(a0),d0
   14658:	|  |  |  |  |   movea.l 36(sp),a0
   1465c:	|  |  |  |  |   movea.l (a0),a0
   1465e:	|  |  |  |  |   move.l 32(sp),d1
   14662:	|  |  |  |  |   add.l d1,d1
   14664:	|  |  |  |  |   add.l d1,d1
   14666:	|  |  |  |  |   lea (0,a0,d1.l),a2
   1466a:	|  |  |  |  |   move.l d0,-(sp)
   1466c:	|  |  |  |  |   jsr 966c <copyAnim>
   14672:	|  |  |  |  |   addq.l #4,sp
   14674:	|  |  |  |  |   move.l d0,(a2)
            for (int iii = 0; iii < 3; iii++) {
   14676:	|  |  |  |  |   addq.l #1,32(sp)
   1467a:	|  |  |  |  \-> moveq #2,d1
   1467c:	|  |  |  |      cmp.l 32(sp),d1
   14680:	|  |  |  \----- bge.s 14650 <getCostumeFromVar+0x9e>
            }
            break;
   14682:	|  |  |     /-- bra.s 146b4 <getCostumeFromVar+0x102>

        case SVT_COSTUME:
            return thisVar->varData.costumeHandler;
   14684:	|  \--|-----|-> movea.l 44(sp),a0
   14688:	|     |     |   move.l 4(a0),d0
   1468c:	|     +-----|-- bra.s 146b8 <getCostumeFromVar+0x106>
            break;

        default:
            KPrintF("Expecting an animation variable; found variable of type", typeName[thisVar->varType]);
   1468e:	\-----|-----|-> movea.l 44(sp),a0
   14692:	      |     |   move.l (a0),d0
   14694:	      |     |   add.l d0,d0
   14696:	      |     |   movea.l d0,a1
   14698:	      |     |   adda.l d0,a1
   1469a:	      |     |   lea 1c95e <typeName>,a0
   146a0:	      |     |   move.l (0,a1,a0.l),d0
   146a4:	      |     |   move.l d0,-(sp)
   146a6:	      |     |   pea 19f77 <newfatal.c.307beca7+0x24>
   146ac:	      |     |   jsr 17366 <KPrintF>
   146b2:	      |     |   addq.l #8,sp
    }

    return p;
   146b4:	      |     \-> move.l 36(sp),d0
}
   146b8:	      \-------> movea.l (sp)+,a2
   146ba:	                movea.l (sp)+,a6
   146bc:	                lea 32(sp),sp
   146c0:	                rts

000146c2 <getSavedGamesStack>:

BOOL getSavedGamesStack(struct stackHandler * sH, char * ext) {
   146c2:	                lea -96(sp),sp
   146c6:	                movem.l d2-d3/a6,-(sp)
	char * pattern = joinStrings("*", ext);
   146ca:	                move.l 116(sp),-(sp)
   146ce:	                pea 19faf <newfatal.c.307beca7+0x5c>
   146d4:	                jsr 13e32 <joinStrings>
   146da:	                addq.l #8,sp
   146dc:	                move.l d0,102(sp)
	if (!pattern) return FALSE;
   146e0:	            /-- bne.s 146e8 <getSavedGamesStack+0x26>
   146e2:	            |   clr.w d0
   146e4:	/-----------|-- bra.w 148fc <getSavedGamesStack+0x23a>

	struct variable newName;
	newName.varType = SVT_NULL;
   146e8:	|           \-> clr.l 14(sp)

	BPTR dirLock = Lock(".", ACCESS_READ);
   146ec:	|               move.l #106417,98(sp)
   146f4:	|               moveq #-2,d0
   146f6:	|               move.l d0,94(sp)
   146fa:	|               move.l 1ca8a <DOSBase>,d0
   14700:	|               movea.l d0,a6
   14702:	|               move.l 98(sp),d1
   14706:	|               move.l 94(sp),d2
   1470a:	|               jsr -84(a6)
   1470e:	|               move.l d0,90(sp)
   14712:	|               move.l 90(sp),d0
   14716:	|               move.l d0,86(sp)
	if (!dirLock) return FALSE;
   1471a:	|           /-- bne.s 14722 <getSavedGamesStack+0x60>
   1471c:	|           |   clr.w d0
   1471e:	+-----------|-- bra.w 148fc <getSavedGamesStack+0x23a>

	struct FileInfoBlock *fib = (struct FileInfoBlock *)AllocVec(sizeof(struct FileInfoBlock), MEMF_CLEAR);
   14722:	|           \-> move.l #260,82(sp)
   1472a:	|               move.l #65536,78(sp)
   14732:	|               move.l 1ca82 <SysBase>,d0
   14738:	|               movea.l d0,a6
   1473a:	|               move.l 82(sp),d0
   1473e:	|               move.l 78(sp),d1
   14742:	|               jsr -684(a6)
   14746:	|               move.l d0,74(sp)
   1474a:	|               move.l 74(sp),d0
   1474e:	|               move.l d0,70(sp)
	if (!fib) {
   14752:	|           /-- bne.s 14770 <getSavedGamesStack+0xae>
		UnLock(dirLock);
   14754:	|           |   move.l 86(sp),22(sp)
   1475a:	|           |   move.l 1ca8a <DOSBase>,d0
   14760:	|           |   movea.l d0,a6
   14762:	|           |   move.l 22(sp),d1
   14766:	|           |   jsr -90(a6)
		return FALSE;
   1476a:	|           |   clr.w d0
   1476c:	+-----------|-- bra.w 148fc <getSavedGamesStack+0x23a>
	}

	BOOL result = FALSE;
   14770:	|           \-> clr.w 106(sp)
	if (Examine(dirLock, fib)) {
   14774:	|               move.l 86(sp),66(sp)
   1477a:	|               move.l 70(sp),62(sp)
   14780:	|               move.l 1ca8a <DOSBase>,d0
   14786:	|               movea.l d0,a6
   14788:	|               move.l 66(sp),d1
   1478c:	|               move.l 62(sp),d2
   14790:	|               jsr -102(a6)
   14794:	|               move.l d0,58(sp)
   14798:	|               move.l 58(sp),d0
   1479c:	|  /----------- beq.w 148b0 <getSavedGamesStack+0x1ee>
		while (ExNext(dirLock, fib)) {
   147a0:	|  |        /-- bra.w 1487c <getSavedGamesStack+0x1ba>
			if (!strcmp(fib->fib_FileName + strlen(fib->fib_FileName) - strlen(ext), ext)) {
   147a4:	|  |  /-----|-> move.l 70(sp),d2
   147a8:	|  |  |     |   addq.l #8,d2
   147aa:	|  |  |     |   move.l 70(sp),d0
   147ae:	|  |  |     |   addq.l #8,d0
   147b0:	|  |  |     |   move.l d0,-(sp)
   147b2:	|  |  |     |   jsr 13df2 <strlen>
   147b8:	|  |  |     |   addq.l #4,sp
   147ba:	|  |  |     |   move.l d0,d3
   147bc:	|  |  |     |   move.l 116(sp),-(sp)
   147c0:	|  |  |     |   jsr 13df2 <strlen>
   147c6:	|  |  |     |   addq.l #4,sp
   147c8:	|  |  |     |   move.l d3,d1
   147ca:	|  |  |     |   sub.l d0,d1
   147cc:	|  |  |     |   move.l d2,d0
   147ce:	|  |  |     |   add.l d1,d0
   147d0:	|  |  |     |   move.l 116(sp),-(sp)
   147d4:	|  |  |     |   move.l d0,-(sp)
   147d6:	|  |  |     |   jsr 13db2 <strcmp>
   147dc:	|  |  |     |   addq.l #8,sp
   147de:	|  |  |     |   tst.l d0
   147e0:	|  |  |     +-- bne.w 1487c <getSavedGamesStack+0x1ba>
				fib->fib_FileName[strlen(fib->fib_FileName) - strlen(ext)] = 0;
   147e4:	|  |  |     |   move.l 70(sp),d0
   147e8:	|  |  |     |   addq.l #8,d0
   147ea:	|  |  |     |   move.l d0,-(sp)
   147ec:	|  |  |     |   jsr 13df2 <strlen>
   147f2:	|  |  |     |   addq.l #4,sp
   147f4:	|  |  |     |   move.l d0,d2
   147f6:	|  |  |     |   move.l 116(sp),-(sp)
   147fa:	|  |  |     |   jsr 13df2 <strlen>
   14800:	|  |  |     |   addq.l #4,sp
   14802:	|  |  |     |   move.l d0,d1
   14804:	|  |  |     |   move.l d2,d0
   14806:	|  |  |     |   sub.l d1,d0
   14808:	|  |  |     |   movea.l 70(sp),a0
   1480c:	|  |  |     |   clr.b (8,a0,d0.l)
				char * decoded = decodeFilename(fib->fib_FileName);
   14810:	|  |  |     |   move.l 70(sp),d0
   14814:	|  |  |     |   addq.l #8,d0
   14816:	|  |  |     |   move.l d0,-(sp)
   14818:	|  |  |     |   jsr 118 <decodeFilename>
   1481e:	|  |  |     |   addq.l #4,sp
   14820:	|  |  |     |   move.l d0,42(sp)
				makeTextVar(&newName, decoded);
   14824:	|  |  |     |   move.l 42(sp),-(sp)
   14828:	|  |  |     |   lea 18(sp),a0
   1482c:	|  |  |     |   move.l a0,-(sp)
   1482e:	|  |  |     |   jsr 14b28 <makeTextVar>
   14834:	|  |  |     |   addq.l #8,sp
				FreeVec(decoded);
   14836:	|  |  |     |   move.l 42(sp),38(sp)
   1483c:	|  |  |     |   move.l 1ca82 <SysBase>,d0
   14842:	|  |  |     |   movea.l d0,a6
   14844:	|  |  |     |   movea.l 38(sp),a1
   14848:	|  |  |     |   jsr -690(a6)
				if (!addVarToStack(&newName, &sH->first)) goto cleanup;
   1484c:	|  |  |     |   move.l 112(sp),d0
   14850:	|  |  |     |   move.l d0,-(sp)
   14852:	|  |  |     |   lea 18(sp),a0
   14856:	|  |  |     |   move.l a0,-(sp)
   14858:	|  |  |     |   jsr 14142 <addVarToStack>
   1485e:	|  |  |     |   addq.l #8,sp
   14860:	|  |  |     |   tst.w d0
   14862:	|  |  |  /--|-- beq.s 148b4 <getSavedGamesStack+0x1f2>
				if (sH->last == NULL) sH->last = sH->first;
   14864:	|  |  |  |  |   movea.l 112(sp),a0
   14868:	|  |  |  |  |   move.l 4(a0),d0
   1486c:	|  |  |  |  +-- bne.s 1487c <getSavedGamesStack+0x1ba>
   1486e:	|  |  |  |  |   movea.l 112(sp),a0
   14872:	|  |  |  |  |   move.l (a0),d0
   14874:	|  |  |  |  |   movea.l 112(sp),a0
   14878:	|  |  |  |  |   move.l d0,4(a0)
		while (ExNext(dirLock, fib)) {
   1487c:	|  |  |  |  \-> move.l 86(sp),54(sp)
   14882:	|  |  |  |      move.l 70(sp),50(sp)
   14888:	|  |  |  |      move.l 1ca8a <DOSBase>,d0
   1488e:	|  |  |  |      movea.l d0,a6
   14890:	|  |  |  |      move.l 54(sp),d1
   14894:	|  |  |  |      move.l 50(sp),d2
   14898:	|  |  |  |      jsr -108(a6)
   1489c:	|  |  |  |      move.l d0,46(sp)
   148a0:	|  |  |  |      move.l 46(sp),d0
   148a4:	|  |  \--|----- bne.w 147a4 <getSavedGamesStack+0xe2>
			}
		}
		result = TRUE;
   148a8:	|  |     |      move.w #1,106(sp)
   148ae:	|  |     |  /-- bra.s 148b6 <getSavedGamesStack+0x1f4>
	}

cleanup:
   148b0:	|  \-----|--|-> nop
   148b2:	|        |  +-- bra.s 148b6 <getSavedGamesStack+0x1f4>
				if (!addVarToStack(&newName, &sH->first)) goto cleanup;
   148b4:	|        \--|-> nop
	FreeVec(fib);
   148b6:	|           \-> move.l 70(sp),34(sp)
   148bc:	|               move.l 1ca82 <SysBase>,d0
   148c2:	|               movea.l d0,a6
   148c4:	|               movea.l 34(sp),a1
   148c8:	|               jsr -690(a6)
	UnLock(dirLock);
   148cc:	|               move.l 86(sp),30(sp)
   148d2:	|               move.l 1ca8a <DOSBase>,d0
   148d8:	|               movea.l d0,a6
   148da:	|               move.l 30(sp),d1
   148de:	|               jsr -90(a6)
	FreeVec(pattern);
   148e2:	|               move.l 102(sp),26(sp)
   148e8:	|               move.l 1ca82 <SysBase>,d0
   148ee:	|               movea.l d0,a6
   148f0:	|               movea.l 26(sp),a1
   148f4:	|               jsr -690(a6)
	return result;
   148f8:	|               move.w 106(sp),d0
}
   148fc:	\-------------> movem.l (sp)+,d2-d3/a6
   14900:	                lea 96(sp),sp
   14904:	                rts

00014906 <getValueType>:


BOOL getValueType (int *toHere, enum variableType vT, const struct variable *v) {
   14906:	       subq.l #8,sp
	//if (! v) return false;
	if (v->varType != vT) {
   14908:	       movea.l 20(sp),a0
   1490c:	       move.l (a0),d0
   1490e:	       cmp.l 16(sp),d0
   14912:	/----- beq.s 14976 <getValueType+0x70>
		char * e1 = joinStrings ("Can only perform specified operation on a value which is of type ", typeName[vT]);
   14914:	|      move.l 16(sp),d0
   14918:	|      add.l d0,d0
   1491a:	|      movea.l d0,a1
   1491c:	|      adda.l d0,a1
   1491e:	|      lea 1c95e <typeName>,a0
   14924:	|      move.l (0,a1,a0.l),d0
   14928:	|      move.l d0,-(sp)
   1492a:	|      pea 19fb3 <newfatal.c.307beca7+0x60>
   14930:	|      jsr 13e32 <joinStrings>
   14936:	|      addq.l #8,sp
   14938:	|      move.l d0,4(sp)
		char * e2 = joinStrings ("... value supplied was of type ", typeName[v->varType]);
   1493c:	|      movea.l 20(sp),a0
   14940:	|      move.l (a0),d0
   14942:	|      add.l d0,d0
   14944:	|      movea.l d0,a1
   14946:	|      adda.l d0,a1
   14948:	|      lea 1c95e <typeName>,a0
   1494e:	|      move.l (0,a1,a0.l),d0
   14952:	|      move.l d0,-(sp)
   14954:	|      pea 19ff5 <newfatal.c.307beca7+0xa2>
   1495a:	|      jsr 13e32 <joinStrings>
   14960:	|      addq.l #8,sp
   14962:	|      move.l d0,(sp)
		KPrintF(e1, e2);
   14964:	|      move.l (sp),-(sp)
   14966:	|      move.l 8(sp),-(sp)
   1496a:	|      jsr 17366 <KPrintF>
   14970:	|      addq.l #8,sp

		return FALSE;
   14972:	|      clr.w d0
   14974:	|  /-- bra.s 14986 <getValueType+0x80>
	}
	*toHere = v->varData.intValue;
   14976:	\--|-> movea.l 20(sp),a0
   1497a:	   |   move.l 4(a0),d0
   1497e:	   |   movea.l 12(sp),a0
   14982:	   |   move.l d0,(a0)
	return TRUE;
   14984:	   |   moveq #1,d0
}
   14986:	   \-> addq.l #8,sp
   14988:	       rts

0001498a <loadStringToVar>:

BOOL loadStringToVar (struct variable *thisVar, int value) {
	makeTextVar (thisVar, getNumberedString (value));
   1498a:	move.l 8(sp),-(sp)
   1498e:	jsr 6db2 <getNumberedString>
   14994:	addq.l #4,sp
   14996:	move.l d0,-(sp)
   14998:	move.l 8(sp),-(sp)
   1499c:	jsr 14b28 <makeTextVar>
   149a2:	addq.l #8,sp
	return (BOOL) (thisVar->varData.theString != NULL);
   149a4:	movea.l 4(sp),a0
   149a8:	move.l 4(a0),d0
   149ac:	sne d0
   149ae:	neg.b d0
   149b0:	move.b d0,d0
   149b2:	andi.w #255,d0
}
   149b6:	rts

000149b8 <makeFastArrayFromStack>:
		break;
	}
	return TRUE;
}

BOOL makeFastArrayFromStack (struct variable *to, const struct stackHandler *stacky) {
   149b8:	          subq.l #8,sp
    int size = stackSize(stacky);
   149ba:	          move.l 16(sp),-(sp)
   149be:	          jsr 15266 <stackSize>
   149c4:	          addq.l #4,sp
   149c6:	          move.l d0,4(sp)
    if (!makeFastArraySize(to, size)) return FALSE;
   149ca:	          move.l 4(sp),-(sp)
   149ce:	          move.l 16(sp),-(sp)
   149d2:	          jsr 14a22 <makeFastArraySize>
   149d8:	          addq.l #8,sp
   149da:	          tst.w d0
   149dc:	      /-- bne.s 149e2 <makeFastArrayFromStack+0x2a>
   149de:	      |   clr.w d0
   149e0:	/-----|-- bra.s 14a1e <makeFastArrayFromStack+0x66>

    // Now let's fill up the new array

    struct variableStack *allV = stacky->first;
   149e2:	|     \-> movea.l 16(sp),a0
   149e6:	|         move.l (a0),(sp)
    size = 0;
   149e8:	|         clr.l 4(sp)
    while (allV) {
   149ec:	|     /-- bra.s 14a18 <makeFastArrayFromStack+0x60>
        copyMain(&allV->thisVar, &to->varData.fastArray->fastVariables[size]);
   149ee:	|  /--|-> movea.l 12(sp),a0
   149f2:	|  |  |   movea.l 4(a0),a0
   149f6:	|  |  |   move.l (a0),d1
   149f8:	|  |  |   move.l 4(sp),d0
   149fc:	|  |  |   lsl.l #3,d0
   149fe:	|  |  |   add.l d0,d1
   14a00:	|  |  |   move.l (sp),d0
   14a02:	|  |  |   move.l d1,-(sp)
   14a04:	|  |  |   move.l d0,-(sp)
   14a06:	|  |  |   jsr 14ca4 <copyMain>
   14a0c:	|  |  |   addq.l #8,sp
        size++;
   14a0e:	|  |  |   addq.l #1,4(sp)
        allV = allV->next;
   14a12:	|  |  |   movea.l (sp),a0
   14a14:	|  |  |   move.l 8(a0),(sp)
    while (allV) {
   14a18:	|  |  \-> tst.l (sp)
   14a1a:	|  \----- bne.s 149ee <makeFastArrayFromStack+0x36>
    }
    return TRUE;
   14a1c:	|         moveq #1,d0
}
   14a1e:	\-------> addq.l #8,sp
   14a20:	          rts

00014a22 <makeFastArraySize>:


BOOL makeFastArraySize (struct variable *to, int size) {
   14a22:	          lea -28(sp),sp
   14a26:	          move.l a6,-(sp)
    if (size < 0) {
   14a28:	          tst.l 40(sp)
   14a2c:	      /-- bge.s 14a42 <makeFastArraySize+0x20>
		KPrintF("makeFastArraySize: Can't create a fast array with a negative number of elements!");
   14a2e:	      |   pea 1a03a <newfatal.c.307beca7+0xe7>
   14a34:	      |   jsr 17366 <KPrintF>
   14a3a:	      |   addq.l #4,sp
		return FALSE;
   14a3c:	      |   clr.w d0
   14a3e:	/-----|-- bra.w 14b20 <makeFastArraySize+0xfe>
	}		
    unlinkVar(to);
   14a42:	|     \-> move.l 36(sp),-(sp)
   14a46:	|         jsr 14b54 <unlinkVar>
   14a4c:	|         addq.l #4,sp
    to->varType = SVT_FASTARRAY;
   14a4e:	|         movea.l 36(sp),a0
   14a52:	|         moveq #10,d0
   14a54:	|         move.l d0,(a0)
    to->varData.fastArray = AllocVec(sizeof(struct fastArrayHandler), MEMF_ANY);
   14a56:	|         moveq #12,d0
   14a58:	|         move.l d0,24(sp)
   14a5c:	|         clr.l 20(sp)
   14a60:	|         move.l 1ca82 <SysBase>,d0
   14a66:	|         movea.l d0,a6
   14a68:	|         move.l 24(sp),d0
   14a6c:	|         move.l 20(sp),d1
   14a70:	|         jsr -684(a6)
   14a74:	|         move.l d0,16(sp)
   14a78:	|         move.l 16(sp),d0
   14a7c:	|         movea.l 36(sp),a0
   14a80:	|         move.l d0,4(a0)
    if (!to->varData.fastArray) return FALSE;
   14a84:	|         movea.l 36(sp),a0
   14a88:	|         move.l 4(a0),d0
   14a8c:	|     /-- bne.s 14a94 <makeFastArraySize+0x72>
   14a8e:	|     |   clr.w d0
   14a90:	+-----|-- bra.w 14b20 <makeFastArraySize+0xfe>
    to->varData.fastArray->fastVariables = AllocVec(size * sizeof(struct variable), MEMF_ANY);
   14a94:	|     \-> move.l 40(sp),d0
   14a98:	|         lsl.l #3,d0
   14a9a:	|         move.l d0,12(sp)
   14a9e:	|         clr.l 8(sp)
   14aa2:	|         move.l 1ca82 <SysBase>,d0
   14aa8:	|         movea.l d0,a6
   14aaa:	|         move.l 12(sp),d0
   14aae:	|         move.l 8(sp),d1
   14ab2:	|         jsr -684(a6)
   14ab6:	|         move.l d0,4(sp)
   14aba:	|         move.l 4(sp),d0
   14abe:	|         movea.l 36(sp),a0
   14ac2:	|         movea.l 4(a0),a0
   14ac6:	|         move.l d0,(a0)
    if (!to->varData.fastArray->fastVariables) return FALSE;
   14ac8:	|         movea.l 36(sp),a0
   14acc:	|         movea.l 4(a0),a0
   14ad0:	|         move.l (a0),d0
   14ad2:	|     /-- bne.s 14ad8 <makeFastArraySize+0xb6>
   14ad4:	|     |   clr.w d0
   14ad6:	+-----|-- bra.s 14b20 <makeFastArraySize+0xfe>
    for (int i = 0; i < size; i++) {
   14ad8:	|     \-> clr.l 28(sp)
   14adc:	|     /-- bra.s 14af8 <makeFastArraySize+0xd6>
        to->varData.fastArray->fastVariables[i].varType = SVT_NULL;
   14ade:	|  /--|-> movea.l 36(sp),a0
   14ae2:	|  |  |   movea.l 4(a0),a0
   14ae6:	|  |  |   move.l (a0),d1
   14ae8:	|  |  |   move.l 28(sp),d0
   14aec:	|  |  |   lsl.l #3,d0
   14aee:	|  |  |   movea.l d1,a0
   14af0:	|  |  |   adda.l d0,a0
   14af2:	|  |  |   clr.l (a0)
    for (int i = 0; i < size; i++) {
   14af4:	|  |  |   addq.l #1,28(sp)
   14af8:	|  |  \-> move.l 28(sp),d0
   14afc:	|  |      cmp.l 40(sp),d0
   14b00:	|  \----- blt.s 14ade <makeFastArraySize+0xbc>
    }
    to->varData.fastArray->size = size;
   14b02:	|         movea.l 36(sp),a0
   14b06:	|         movea.l 4(a0),a0
   14b0a:	|         move.l 40(sp),4(a0)
    to->varData.fastArray->timesUsed = 1;
   14b10:	|         movea.l 36(sp),a0
   14b14:	|         movea.l 4(a0),a0
   14b18:	|         moveq #1,d0
   14b1a:	|         move.l d0,8(a0)
    return TRUE;
   14b1e:	|         moveq #1,d0
}
   14b20:	\-------> movea.l (sp)+,a6
   14b22:	          lea 28(sp),sp
   14b26:	          rts

00014b28 <makeTextVar>:

void makeTextVar (struct variable *thisVar, const char * txt) {
	unlinkVar (thisVar);
   14b28:	move.l 4(sp),-(sp)
   14b2c:	jsr 14b54 <unlinkVar>
   14b32:	addq.l #4,sp
	thisVar->varType = SVT_STRING;
   14b34:	movea.l 4(sp),a0
   14b38:	moveq #3,d0
   14b3a:	move.l d0,(a0)
	thisVar->varData.theString = copyString (txt);
   14b3c:	move.l 8(sp),-(sp)
   14b40:	jsr b8 <copyString>
   14b46:	addq.l #4,sp
   14b48:	movea.l 4(sp),a0
   14b4c:	move.l d0,4(a0)
}
   14b50:	nop
   14b52:	rts

00014b54 <unlinkVar>:

void unlinkVar (struct variable *thisVar) {
   14b54:	                      lea -16(sp),sp
   14b58:	                      move.l a6,-(sp)

	switch (thisVar->varType) {
   14b5a:	                      movea.l 24(sp),a0
   14b5e:	                      move.l (a0),d0
   14b60:	                      moveq #10,d1
   14b62:	                      cmp.l d0,d1
   14b64:	            /-------- beq.w 14c1c <unlinkVar+0xc8>
   14b68:	            |         moveq #10,d1
   14b6a:	            |         cmp.l d0,d1
   14b6c:	/-----------|-------- bcs.w 14c90 <unlinkVar+0x13c>
   14b70:	|           |         moveq #8,d1
   14b72:	|           |         cmp.l d0,d1
   14b74:	|  /--------|-------- beq.w 14c7c <unlinkVar+0x128>
   14b78:	|  |        |         moveq #8,d1
   14b7a:	|  |        |         cmp.l d0,d1
   14b7c:	+--|--------|-------- bcs.w 14c90 <unlinkVar+0x13c>
   14b80:	|  |        |         moveq #3,d1
   14b82:	|  |        |         cmp.l d0,d1
   14b84:	|  |        |     /-- beq.s 14b90 <unlinkVar+0x3c>
   14b86:	|  |        |     |   moveq #6,d1
   14b88:	|  |        |     |   cmp.l d0,d1
   14b8a:	|  |        |  /--|-- beq.s 14bb6 <unlinkVar+0x62>
		case SVT_ANIM:
		deleteAnim (thisVar->varData.animHandler);
		break;

		default:
		break;
   14b8c:	+--|--------|--|--|-- bra.w 14c90 <unlinkVar+0x13c>
        FreeVec(thisVar->varData.theString);
   14b90:	|  |        |  |  \-> movea.l 24(sp),a0
   14b94:	|  |        |  |      move.l 4(a0),4(sp)
   14b9a:	|  |        |  |      move.l 1ca82 <SysBase>,d0
   14ba0:	|  |        |  |      movea.l d0,a6
   14ba2:	|  |        |  |      movea.l 4(sp),a1
   14ba6:	|  |        |  |      jsr -690(a6)
		thisVar->varData.theString = NULL;
   14baa:	|  |        |  |      movea.l 24(sp),a0
   14bae:	|  |        |  |      clr.l 4(a0)
		break;
   14bb2:	|  |  /-----|--|----- bra.w 14c9a <unlinkVar+0x146>
		thisVar->varData.theStack -> timesUsed --;
   14bb6:	|  |  |     |  \----> movea.l 24(sp),a0
   14bba:	|  |  |     |         movea.l 4(a0),a0
   14bbe:	|  |  |     |         move.l 8(a0),d0
   14bc2:	|  |  |     |         subq.l #1,d0
   14bc4:	|  |  |     |         move.l d0,8(a0)
		if (thisVar->varData.theStack -> timesUsed <= 0) {
   14bc8:	|  |  |     |         movea.l 24(sp),a0
   14bcc:	|  |  |     |         movea.l 4(a0),a0
   14bd0:	|  |  |     |         move.l 8(a0),d0
   14bd4:	|  |  |  /--|-------- bgt.w 14c94 <unlinkVar+0x140>
			while (thisVar->varData.theStack -> first) trimStack (&thisVar->varData.theStack -> first);
   14bd8:	|  |  |  |  |     /-- bra.s 14bec <unlinkVar+0x98>
   14bda:	|  |  |  |  |  /--|-> movea.l 24(sp),a0
   14bde:	|  |  |  |  |  |  |   move.l 4(a0),d0
   14be2:	|  |  |  |  |  |  |   move.l d0,-(sp)
   14be4:	|  |  |  |  |  |  |   jsr 1528a <trimStack>
   14bea:	|  |  |  |  |  |  |   addq.l #4,sp
   14bec:	|  |  |  |  |  |  \-> movea.l 24(sp),a0
   14bf0:	|  |  |  |  |  |      movea.l 4(a0),a0
   14bf4:	|  |  |  |  |  |      move.l (a0),d0
   14bf6:	|  |  |  |  |  \----- bne.s 14bda <unlinkVar+0x86>
			FreeVec(thisVar->varData.theStack);
   14bf8:	|  |  |  |  |         movea.l 24(sp),a0
   14bfc:	|  |  |  |  |         move.l 4(a0),8(sp)
   14c02:	|  |  |  |  |         move.l 1ca82 <SysBase>,d0
   14c08:	|  |  |  |  |         movea.l d0,a6
   14c0a:	|  |  |  |  |         movea.l 8(sp),a1
   14c0e:	|  |  |  |  |         jsr -690(a6)
			thisVar->varData.theStack = NULL;
   14c12:	|  |  |  |  |         movea.l 24(sp),a0
   14c16:	|  |  |  |  |         clr.l 4(a0)
		break;
   14c1a:	|  |  |  +--|-------- bra.s 14c94 <unlinkVar+0x140>
		thisVar->varData.fastArray -> timesUsed --;
   14c1c:	|  |  |  |  \-------> movea.l 24(sp),a0
   14c20:	|  |  |  |            movea.l 4(a0),a0
   14c24:	|  |  |  |            move.l 8(a0),d0
   14c28:	|  |  |  |            subq.l #1,d0
   14c2a:	|  |  |  |            move.l d0,8(a0)
		if (thisVar->varData.theStack -> timesUsed <= 0) {
   14c2e:	|  |  |  |            movea.l 24(sp),a0
   14c32:	|  |  |  |            movea.l 4(a0),a0
   14c36:	|  |  |  |            move.l 8(a0),d0
   14c3a:	|  |  |  |        /-- bgt.s 14c98 <unlinkVar+0x144>
            FreeVec( thisVar->varData.fastArray -> fastVariables);
   14c3c:	|  |  |  |        |   movea.l 24(sp),a0
   14c40:	|  |  |  |        |   movea.l 4(a0),a0
   14c44:	|  |  |  |        |   move.l (a0),16(sp)
   14c48:	|  |  |  |        |   move.l 1ca82 <SysBase>,d0
   14c4e:	|  |  |  |        |   movea.l d0,a6
   14c50:	|  |  |  |        |   movea.l 16(sp),a1
   14c54:	|  |  |  |        |   jsr -690(a6)
			FreeVec(thisVar->varData.fastArray);
   14c58:	|  |  |  |        |   movea.l 24(sp),a0
   14c5c:	|  |  |  |        |   move.l 4(a0),12(sp)
   14c62:	|  |  |  |        |   move.l 1ca82 <SysBase>,d0
   14c68:	|  |  |  |        |   movea.l d0,a6
   14c6a:	|  |  |  |        |   movea.l 12(sp),a1
   14c6e:	|  |  |  |        |   jsr -690(a6)
			thisVar->varData.fastArray = NULL;
   14c72:	|  |  |  |        |   movea.l 24(sp),a0
   14c76:	|  |  |  |        |   clr.l 4(a0)
		break;
   14c7a:	|  |  |  |        +-- bra.s 14c98 <unlinkVar+0x144>
		deleteAnim (thisVar->varData.animHandler);
   14c7c:	|  \--|--|--------|-> movea.l 24(sp),a0
   14c80:	|     |  |        |   move.l 4(a0),d0
   14c84:	|     |  |        |   move.l d0,-(sp)
   14c86:	|     |  |        |   jsr 9a38 <deleteAnim>
   14c8c:	|     |  |        |   addq.l #4,sp
		break;
   14c8e:	|     +--|--------|-- bra.s 14c9a <unlinkVar+0x146>
		break;
   14c90:	\-----|--|--------|-> nop
   14c92:	      +--|--------|-- bra.s 14c9a <unlinkVar+0x146>
		break;
   14c94:	      |  \--------|-> nop
   14c96:	      +-----------|-- bra.s 14c9a <unlinkVar+0x146>
		break;
   14c98:	      |           \-> nop
	}
}
   14c9a:	      \-------------> nop
   14c9c:	                      movea.l (sp)+,a6
   14c9e:	                      lea 16(sp),sp
   14ca2:	                      rts

00014ca4 <copyMain>:

BOOL copyMain (const struct variable *from, struct variable *to) {
	to->varType = from->varType;
   14ca4:	       movea.l 4(sp),a0
   14ca8:	       move.l (a0),d0
   14caa:	       movea.l 8(sp),a0
   14cae:	       move.l d0,(a0)
	switch (to->varType) {
   14cb0:	       movea.l 8(sp),a0
   14cb4:	       move.l (a0),d0
   14cb6:	       moveq #10,d1
   14cb8:	       cmp.l d0,d1
   14cba:	/----- bcs.w 14dac <copyMain+0x108>
   14cbe:	|      add.l d0,d0
   14cc0:	|      movea.l d0,a0
   14cc2:	|      adda.l #85198,a0
   14cc8:	|      move.w (a0),d0
   14cca:	|      jmp (14cce <copyMain+0x2a>,pc,d0.w)
   14cce:	|      .short 0x00da
   14cd0:	|      ori.b #22,(a6)
   14cd4:	|      ori.w #22,(a4)
   14cd8:	|      ori.b #-126,(a6)
   14cdc:	|      ori.b #-68,(a6)
   14ce0:	|      ori.l #2891887,4(a0)
		case SVT_INT:
		case SVT_FUNC:
		case SVT_BUILT:
		case SVT_FILE:
		case SVT_OBJTYPE:
		to->varData.intValue = from->varData.intValue;
   14ce8:	|      move.l 4(a0),d0
   14cec:	|      movea.l 8(sp),a0
   14cf0:	|      move.l d0,4(a0)
		return TRUE;
   14cf4:	|      moveq #1,d0
   14cf6:	|  /-- bra.w 14dbe <copyMain+0x11a>

		case SVT_FASTARRAY:
		to->varData.fastArray = from->varData.fastArray;
   14cfa:	|  |   movea.l 4(sp),a0
   14cfe:	|  |   move.l 4(a0),d0
   14d02:	|  |   movea.l 8(sp),a0
   14d06:	|  |   move.l d0,4(a0)
		to->varData.fastArray -> timesUsed ++;
   14d0a:	|  |   movea.l 8(sp),a0
   14d0e:	|  |   movea.l 4(a0),a0
   14d12:	|  |   move.l 8(a0),d0
   14d16:	|  |   addq.l #1,d0
   14d18:	|  |   move.l d0,8(a0)
		return TRUE;
   14d1c:	|  |   moveq #1,d0
   14d1e:	|  +-- bra.w 14dbe <copyMain+0x11a>

		case SVT_STRING:
		to->varData.theString = copyString (from->varData.theString);
   14d22:	|  |   movea.l 4(sp),a0
   14d26:	|  |   move.l 4(a0),d0
   14d2a:	|  |   move.l d0,-(sp)
   14d2c:	|  |   jsr b8 <copyString>
   14d32:	|  |   addq.l #4,sp
   14d34:	|  |   movea.l 8(sp),a0
   14d38:	|  |   move.l d0,4(a0)
		return to->varData.theString ? TRUE : FALSE;
   14d3c:	|  |   movea.l 8(sp),a0
   14d40:	|  |   move.l 4(a0),d0
   14d44:	|  |   sne d0
   14d46:	|  |   neg.b d0
   14d48:	|  |   move.b d0,d0
   14d4a:	|  |   andi.w #255,d0
   14d4e:	|  +-- bra.s 14dbe <copyMain+0x11a>

		case SVT_STACK:
		to->varData.theStack = from->varData.theStack;
   14d50:	|  |   movea.l 4(sp),a0
   14d54:	|  |   move.l 4(a0),d0
   14d58:	|  |   movea.l 8(sp),a0
   14d5c:	|  |   move.l d0,4(a0)
		to->varData.theStack -> timesUsed ++;
   14d60:	|  |   movea.l 8(sp),a0
   14d64:	|  |   movea.l 4(a0),a0
   14d68:	|  |   move.l 8(a0),d0
   14d6c:	|  |   addq.l #1,d0
   14d6e:	|  |   move.l d0,8(a0)
		return TRUE;
   14d72:	|  |   moveq #1,d0
   14d74:	|  +-- bra.s 14dbe <copyMain+0x11a>

		case SVT_COSTUME:
		to->varData.costumeHandler = from->varData.costumeHandler;
   14d76:	|  |   movea.l 4(sp),a0
   14d7a:	|  |   move.l 4(a0),d0
   14d7e:	|  |   movea.l 8(sp),a0
   14d82:	|  |   move.l d0,4(a0)
		return TRUE;
   14d86:	|  |   moveq #1,d0
   14d88:	|  +-- bra.s 14dbe <copyMain+0x11a>

		case SVT_ANIM:
		to->varData.animHandler = copyAnim (from->varData.animHandler);
   14d8a:	|  |   movea.l 4(sp),a0
   14d8e:	|  |   move.l 4(a0),d0
   14d92:	|  |   move.l d0,-(sp)
   14d94:	|  |   jsr 966c <copyAnim>
   14d9a:	|  |   addq.l #4,sp
   14d9c:	|  |   movea.l 8(sp),a0
   14da0:	|  |   move.l d0,4(a0)
		return TRUE;
   14da4:	|  |   moveq #1,d0
   14da6:	|  +-- bra.s 14dbe <copyMain+0x11a>

		case SVT_NULL:
		return TRUE;
   14da8:	|  |   moveq #1,d0
   14daa:	|  +-- bra.s 14dbe <copyMain+0x11a>

		default:
		break;
   14dac:	\--|-> nop
	}
	KPrintF("Unknown value type");
   14dae:	   |   pea 1a08b <newfatal.c.307beca7+0x138>
   14db4:	   |   jsr 17366 <KPrintF>
   14dba:	   |   addq.l #4,sp
	return FALSE;
   14dbc:	   |   clr.w d0
}
   14dbe:	   \-> rts

00014dc0 <copyVariable>:

BOOL copyVariable (const struct variable *from, struct variable *to) {
	unlinkVar (to);
   14dc0:	move.l 8(sp),-(sp)
   14dc4:	jsr 14b54 <unlinkVar>
   14dca:	addq.l #4,sp
	return copyMain(from, to);
   14dcc:	move.l 8(sp),-(sp)
   14dd0:	move.l 8(sp),-(sp)
   14dd4:	jsr 14ca4 <copyMain>
   14dda:	addq.l #8,sp
}
   14ddc:	rts

00014dde <getAnimationFromVar>:

struct personaAnimation * getAnimationFromVar (struct variable *thisVar) {
	if (thisVar->varType == SVT_ANIM)
   14dde:	       movea.l 4(sp),a0
   14de2:	       move.l (a0),d0
   14de4:	       moveq #8,d1
   14de6:	       cmp.l d0,d1
   14de8:	   /-- bne.s 14dfe <getAnimationFromVar+0x20>
		return copyAnim (thisVar->varData.animHandler);
   14dea:	   |   movea.l 4(sp),a0
   14dee:	   |   move.l 4(a0),d0
   14df2:	   |   move.l d0,-(sp)
   14df4:	   |   jsr 966c <copyAnim>
   14dfa:	   |   addq.l #4,sp
   14dfc:	/--|-- bra.s 14e44 <getAnimationFromVar+0x66>

	if (thisVar->varType == SVT_INT && thisVar->varData.intValue == 0)
   14dfe:	|  \-> movea.l 4(sp),a0
   14e02:	|      move.l (a0),d0
   14e04:	|      moveq #1,d1
   14e06:	|      cmp.l d0,d1
   14e08:	|  /-- bne.s 14e1c <getAnimationFromVar+0x3e>
   14e0a:	|  |   movea.l 4(sp),a0
   14e0e:	|  |   move.l 4(a0),d0
   14e12:	|  +-- bne.s 14e1c <getAnimationFromVar+0x3e>
		return makeNullAnim();
   14e14:	|  |   jsr ae3c <makeNullAnim>
   14e1a:	+--|-- bra.s 14e44 <getAnimationFromVar+0x66>

	KPrintF("Expecting an animation variable; found variable of type", typeName[thisVar->varType]);
   14e1c:	|  \-> movea.l 4(sp),a0
   14e20:	|      move.l (a0),d0
   14e22:	|      add.l d0,d0
   14e24:	|      movea.l d0,a1
   14e26:	|      adda.l d0,a1
   14e28:	|      lea 1c95e <typeName>,a0
   14e2e:	|      move.l (0,a1,a0.l),d0
   14e32:	|      move.l d0,-(sp)
   14e34:	|      pea 19f77 <newfatal.c.307beca7+0x24>
   14e3a:	|      jsr 17366 <KPrintF>
   14e40:	|      addq.l #8,sp
	return NULL;
   14e42:	|      moveq #0,d0
}
   14e44:	\----> rts

00014e46 <getBoolean>:

BOOL getBoolean (const struct variable *from) {
	switch (from->varType) {
   14e46:	       movea.l 4(sp),a0
   14e4a:	       move.l (a0),d0
   14e4c:	       moveq #10,d1
   14e4e:	       cmp.l d0,d1
   14e50:	/----- bcs.w 14ed6 <getBoolean+0x90>
   14e54:	|      add.l d0,d0
   14e56:	|      movea.l d0,a0
   14e58:	|      adda.l #85604,a0
   14e5e:	|      move.w (a0),d0
   14e60:	|      jmp (14e64 <getBoolean+0x1e>,pc,d0.w)
   14e64:	|      ori.b #26,(a6)
   14e68:	|      ori.w #68,(114,a2,d0.w)
   14e6e:	|      ori.w #46,(114,a2,d0.w)
   14e74:	|      ori.w #114,(90,a2,d0.w)
		case SVT_NULL:
		return FALSE;
   14e7a:	|      clr.w d0
   14e7c:	|  /-- bra.s 14eda <getBoolean+0x94>

		case SVT_INT:
		return (BOOL) (from->varData.intValue != 0);
   14e7e:	|  |   movea.l 4(sp),a0
   14e82:	|  |   move.l 4(a0),d0
   14e86:	|  |   sne d0
   14e88:	|  |   neg.b d0
   14e8a:	|  |   move.b d0,d0
   14e8c:	|  |   andi.w #255,d0
   14e90:	|  +-- bra.s 14eda <getBoolean+0x94>

		case SVT_STACK:
		return (BOOL) (from->varData.theStack -> first != NULL);
   14e92:	|  |   movea.l 4(sp),a0
   14e96:	|  |   movea.l 4(a0),a0
   14e9a:	|  |   move.l (a0),d0
   14e9c:	|  |   sne d0
   14e9e:	|  |   neg.b d0
   14ea0:	|  |   move.b d0,d0
   14ea2:	|  |   andi.w #255,d0
   14ea6:	|  +-- bra.s 14eda <getBoolean+0x94>

		case SVT_STRING:
		return (BOOL) (from->varData.theString[0] != 0);
   14ea8:	|  |   movea.l 4(sp),a0
   14eac:	|  |   movea.l 4(a0),a0
   14eb0:	|  |   move.b (a0),d0
   14eb2:	|  |   sne d0
   14eb4:	|  |   neg.b d0
   14eb6:	|  |   move.b d0,d0
   14eb8:	|  |   andi.w #255,d0
   14ebc:	|  +-- bra.s 14eda <getBoolean+0x94>

		case SVT_FASTARRAY:
		return (BOOL) (from->varData.fastArray -> size != 0);
   14ebe:	|  |   movea.l 4(sp),a0
   14ec2:	|  |   movea.l 4(a0),a0
   14ec6:	|  |   move.l 4(a0),d0
   14eca:	|  |   sne d0
   14ecc:	|  |   neg.b d0
   14ece:	|  |   move.b d0,d0
   14ed0:	|  |   andi.w #255,d0
   14ed4:	|  +-- bra.s 14eda <getBoolean+0x94>

		default:
		break;
   14ed6:	\--|-> nop
	}
	return TRUE;
   14ed8:	   |   moveq #1,d0
}
   14eda:	   \-> rts

00014edc <getTextFromAnyVar>:

char * getTextFromAnyVar (const struct variable *from) {
   14edc:	      /----------> lea -76(sp),sp
   14ee0:	      |            move.l a6,-(sp)
	switch (from->varType) {
   14ee2:	      |            movea.l 84(sp),a0
   14ee6:	      |            move.l (a0),d0
   14ee8:	      |            moveq #10,d1
   14eea:	      |            cmp.l d0,d1
   14eec:	/-----|----------- bcs.w 1518a <getTextFromAnyVar+0x2ae>
   14ef0:	|     |            add.l d0,d0
   14ef2:	|     |            movea.l d0,a0
   14ef4:	|     |            adda.l #85760,a0
   14efa:	|     |            move.w (a0),d0
   14efc:	|     |            jmp (14f00 <getTextFromAnyVar+0x24>,pc,d0.w)
   14f00:	|     |            .short 0x028a
   14f02:	|     |            bset d0,(a0)+
   14f04:	|     |            .short 0x028a
   14f06:	|     |            ori.b #-118,(a6)
   14f0a:	|     |            andi.b #8,ccr
   14f0e:	|     |            andi.w #650,-(a0)
   14f12:	|     |            .short 0x028a
   14f14:	|     |            ori.b #111,84(a4)
		case SVT_STRING:
		return copyString (from->varData.theString);
   14f1a:	|     |            move.l 4(a0),d0
   14f1e:	|     |            move.l d0,-(sp)
   14f20:	|     |            jsr b8 <copyString>
   14f26:	|     |            addq.l #4,sp
   14f28:	|  /--|----------- bra.w 151ac <getTextFromAnyVar+0x2d0>

		case SVT_FASTARRAY:
		{
			char * builder = copyString ("FAST:");
   14f2c:	|  |  |            pea 1a09e <newfatal.c.307beca7+0x14b>
   14f32:	|  |  |            jsr b8 <copyString>
   14f38:	|  |  |            addq.l #4,sp
   14f3a:	|  |  |            move.l d0,76(sp)
			char * builder2;
			char * grabText;

			for (int i = 0; i < from->varData.fastArray -> size; i ++) {
   14f3e:	|  |  |            clr.l 72(sp)
   14f42:	|  |  |     /----- bra.w 14fec <getTextFromAnyVar+0x110>
				builder2 = joinStrings (builder, " ");
   14f46:	|  |  |  /--|----> pea 1a0a4 <newfatal.c.307beca7+0x151>
   14f4c:	|  |  |  |  |      move.l 80(sp),-(sp)
   14f50:	|  |  |  |  |      jsr 13e32 <joinStrings>
   14f56:	|  |  |  |  |      addq.l #8,sp
   14f58:	|  |  |  |  |      move.l d0,60(sp)
				if (! builder2) return NULL;
   14f5c:	|  |  |  |  |  /-- bne.s 14f64 <getTextFromAnyVar+0x88>
   14f5e:	|  |  |  |  |  |   moveq #0,d0
   14f60:	|  +--|--|--|--|-- bra.w 151ac <getTextFromAnyVar+0x2d0>
				FreeVec(builder);
   14f64:	|  |  |  |  |  \-> move.l 76(sp),56(sp)
   14f6a:	|  |  |  |  |      move.l 1ca82 <SysBase>,d0
   14f70:	|  |  |  |  |      movea.l d0,a6
   14f72:	|  |  |  |  |      movea.l 56(sp),a1
   14f76:	|  |  |  |  |      jsr -690(a6)
				grabText = getTextFromAnyVar (&from->varData.fastArray -> fastVariables[i]);
   14f7a:	|  |  |  |  |      movea.l 84(sp),a0
   14f7e:	|  |  |  |  |      movea.l 4(a0),a0
   14f82:	|  |  |  |  |      move.l (a0),d1
   14f84:	|  |  |  |  |      move.l 72(sp),d0
   14f88:	|  |  |  |  |      lsl.l #3,d0
   14f8a:	|  |  |  |  |      add.l d1,d0
   14f8c:	|  |  |  |  |      move.l d0,-(sp)
   14f8e:	|  |  +--|--|----- jsr 14edc <getTextFromAnyVar>(pc)
   14f92:	|  |  |  |  |      addq.l #4,sp
   14f94:	|  |  |  |  |      move.l d0,52(sp)
				builder = joinStrings (builder2, grabText);
   14f98:	|  |  |  |  |      move.l 52(sp),-(sp)
   14f9c:	|  |  |  |  |      move.l 64(sp),-(sp)
   14fa0:	|  |  |  |  |      jsr 13e32 <joinStrings>
   14fa6:	|  |  |  |  |      addq.l #8,sp
   14fa8:	|  |  |  |  |      move.l d0,76(sp)
				if (! builder) return NULL;
   14fac:	|  |  |  |  |  /-- bne.s 14fb4 <getTextFromAnyVar+0xd8>
   14fae:	|  |  |  |  |  |   moveq #0,d0
   14fb0:	|  +--|--|--|--|-- bra.w 151ac <getTextFromAnyVar+0x2d0>
				FreeVec(grabText);
   14fb4:	|  |  |  |  |  \-> move.l 52(sp),48(sp)
   14fba:	|  |  |  |  |      move.l 1ca82 <SysBase>,d0
   14fc0:	|  |  |  |  |      movea.l d0,a6
   14fc2:	|  |  |  |  |      movea.l 48(sp),a1
   14fc6:	|  |  |  |  |      jsr -690(a6)
				grabText = NULL;
   14fca:	|  |  |  |  |      clr.l 52(sp)
				FreeVec(builder2);
   14fce:	|  |  |  |  |      move.l 60(sp),44(sp)
   14fd4:	|  |  |  |  |      move.l 1ca82 <SysBase>,d0
   14fda:	|  |  |  |  |      movea.l d0,a6
   14fdc:	|  |  |  |  |      movea.l 44(sp),a1
   14fe0:	|  |  |  |  |      jsr -690(a6)
				builder2 = NULL;
   14fe4:	|  |  |  |  |      clr.l 60(sp)
			for (int i = 0; i < from->varData.fastArray -> size; i ++) {
   14fe8:	|  |  |  |  |      addq.l #1,72(sp)
   14fec:	|  |  |  |  \----> movea.l 84(sp),a0
   14ff0:	|  |  |  |         movea.l 4(a0),a0
   14ff4:	|  |  |  |         move.l 4(a0),d0
   14ff8:	|  |  |  |         cmp.l 72(sp),d0
   14ffc:	|  |  |  \-------- bgt.w 14f46 <getTextFromAnyVar+0x6a>
			}
			return builder;
   15000:	|  |  |            move.l 76(sp),d0
   15004:	|  +--|----------- bra.w 151ac <getTextFromAnyVar+0x2d0>
		}

		case SVT_STACK:
		{
			char * builder = copyString ("ARRAY:");
   15008:	|  |  |            pea 1a0a6 <newfatal.c.307beca7+0x153>
   1500e:	|  |  |            jsr b8 <copyString>
   15014:	|  |  |            addq.l #4,sp
   15016:	|  |  |            move.l d0,68(sp)
			char * builder2;
			char * grabText;

			struct variableStack * stacky = from->varData.theStack -> first;
   1501a:	|  |  |            movea.l 84(sp),a0
   1501e:	|  |  |            movea.l 4(a0),a0
   15022:	|  |  |            move.l (a0),64(sp)

			while (stacky) {
   15026:	|  |  |     /----- bra.w 150c8 <getTextFromAnyVar+0x1ec>
				builder2 = joinStrings (builder, " ");
   1502a:	|  |  |  /--|----> pea 1a0a4 <newfatal.c.307beca7+0x151>
   15030:	|  |  |  |  |      move.l 72(sp),-(sp)
   15034:	|  |  |  |  |      jsr 13e32 <joinStrings>
   1503a:	|  |  |  |  |      addq.l #8,sp
   1503c:	|  |  |  |  |      move.l d0,36(sp)
				if (! builder2) return NULL;
   15040:	|  |  |  |  |  /-- bne.s 15048 <getTextFromAnyVar+0x16c>
   15042:	|  |  |  |  |  |   moveq #0,d0
   15044:	|  +--|--|--|--|-- bra.w 151ac <getTextFromAnyVar+0x2d0>
				FreeVec(builder);
   15048:	|  |  |  |  |  \-> move.l 68(sp),32(sp)
   1504e:	|  |  |  |  |      move.l 1ca82 <SysBase>,d0
   15054:	|  |  |  |  |      movea.l d0,a6
   15056:	|  |  |  |  |      movea.l 32(sp),a1
   1505a:	|  |  |  |  |      jsr -690(a6)
				grabText = getTextFromAnyVar (&stacky -> thisVar);
   1505e:	|  |  |  |  |      move.l 64(sp),d0
   15062:	|  |  |  |  |      move.l d0,-(sp)
   15064:	|  |  \--|--|----- jsr 14edc <getTextFromAnyVar>(pc)
   15068:	|  |     |  |      addq.l #4,sp
   1506a:	|  |     |  |      move.l d0,28(sp)
				builder = joinStrings (builder2, grabText);
   1506e:	|  |     |  |      move.l 28(sp),-(sp)
   15072:	|  |     |  |      move.l 40(sp),-(sp)
   15076:	|  |     |  |      jsr 13e32 <joinStrings>
   1507c:	|  |     |  |      addq.l #8,sp
   1507e:	|  |     |  |      move.l d0,68(sp)
				if (! builder) return NULL;
   15082:	|  |     |  |  /-- bne.s 1508a <getTextFromAnyVar+0x1ae>
   15084:	|  |     |  |  |   moveq #0,d0
   15086:	|  +-----|--|--|-- bra.w 151ac <getTextFromAnyVar+0x2d0>
				FreeVec(grabText);
   1508a:	|  |     |  |  \-> move.l 28(sp),24(sp)
   15090:	|  |     |  |      move.l 1ca82 <SysBase>,d0
   15096:	|  |     |  |      movea.l d0,a6
   15098:	|  |     |  |      movea.l 24(sp),a1
   1509c:	|  |     |  |      jsr -690(a6)
				grabText = NULL;
   150a0:	|  |     |  |      clr.l 28(sp)
				FreeVec(builder2);
   150a4:	|  |     |  |      move.l 36(sp),20(sp)
   150aa:	|  |     |  |      move.l 1ca82 <SysBase>,d0
   150b0:	|  |     |  |      movea.l d0,a6
   150b2:	|  |     |  |      movea.l 20(sp),a1
   150b6:	|  |     |  |      jsr -690(a6)
				builder2 = NULL;
   150ba:	|  |     |  |      clr.l 36(sp)
				stacky = stacky -> next;
   150be:	|  |     |  |      movea.l 64(sp),a0
   150c2:	|  |     |  |      move.l 8(a0),64(sp)
			while (stacky) {
   150c8:	|  |     |  \----> tst.l 64(sp)
   150cc:	|  |     \-------- bne.w 1502a <getTextFromAnyVar+0x14e>
			}
			return builder;
   150d0:	|  |               move.l 68(sp),d0
   150d4:	|  +-------------- bra.w 151ac <getTextFromAnyVar+0x2d0>
		}

		case SVT_INT:
		{
			char * buff = AllocVec(10, MEMF_ANY);
   150d8:	|  |               moveq #10,d0
   150da:	|  |               move.l d0,16(sp)
   150de:	|  |               clr.l 12(sp)
   150e2:	|  |               move.l 1ca82 <SysBase>,d0
   150e8:	|  |               movea.l d0,a6
   150ea:	|  |               move.l 16(sp),d0
   150ee:	|  |               move.l 12(sp),d1
   150f2:	|  |               jsr -684(a6)
   150f6:	|  |               move.l d0,8(sp)
   150fa:	|  |               move.l 8(sp),d0
   150fe:	|  |               move.l d0,4(sp)
			if (! buff) {
   15102:	|  |           /-- bne.s 15118 <getTextFromAnyVar+0x23c>
				KPrintF("getTextFromAnyVar: Cannot allocate Memory");
   15104:	|  |           |   pea 1a0ad <newfatal.c.307beca7+0x15a>
   1510a:	|  |           |   jsr 17366 <KPrintF>
   15110:	|  |           |   addq.l #4,sp
				return NULL;
   15112:	|  |           |   moveq #0,d0
   15114:	|  +-----------|-- bra.w 151ac <getTextFromAnyVar+0x2d0>
			}
			sprintf (buff, "%i", from->varData.intValue);
   15118:	|  |           \-> movea.l 84(sp),a0
   1511c:	|  |               move.l 4(a0),d0
   15120:	|  |               move.l d0,-(sp)
   15122:	|  |               pea 1a0d7 <newfatal.c.307beca7+0x184>
   15128:	|  |               move.l 12(sp),-(sp)
   1512c:	|  |               jsr 14110 <sprintf>
   15132:	|  |               lea 12(sp),sp
			return buff;
   15136:	|  |               move.l 4(sp),d0
   1513a:	|  +-------------- bra.s 151ac <getTextFromAnyVar+0x2d0>
		}

		case SVT_FILE:
		{

			return joinStrings ("", resourceNameFromNum (from->varData.intValue));
   1513c:	|  |               movea.l 84(sp),a0
   15140:	|  |               move.l 4(a0),d0
   15144:	|  |               move.l d0,-(sp)
   15146:	|  |               jsr 4232 <resourceNameFromNum>
   1514c:	|  |               addq.l #4,sp
   1514e:	|  |               move.l d0,-(sp)
   15150:	|  |               pea 18aac <PutChar+0xc7c>
   15156:	|  |               jsr 13e32 <joinStrings>
   1515c:	|  |               addq.l #8,sp
   1515e:	|  +-------------- bra.s 151ac <getTextFromAnyVar+0x2d0>
		}

		case SVT_OBJTYPE:
		{
			struct objectType * thisType = findObjectType (from->varData.intValue);
   15160:	|  |               movea.l 84(sp),a0
   15164:	|  |               move.l 4(a0),d0
   15168:	|  |               move.l d0,-(sp)
   1516a:	|  |               jsr d650 <findObjectType>
   15170:	|  |               addq.l #4,sp
   15172:	|  |               move.l d0,40(sp)
			if (thisType) return copyString (thisType -> screenName);
   15176:	+--|-------------- beq.s 1518a <getTextFromAnyVar+0x2ae>
   15178:	|  |               movea.l 40(sp),a0
   1517c:	|  |               move.l (a0),d0
   1517e:	|  |               move.l d0,-(sp)
   15180:	|  |               jsr b8 <copyString>
   15186:	|  |               addq.l #4,sp
   15188:	|  +-------------- bra.s 151ac <getTextFromAnyVar+0x2d0>
		}

		default:
		break;
   1518a:	\--|-------------> nop
	}

	return copyString (typeName[from->varType]);
   1518c:	   |               movea.l 84(sp),a0
   15190:	   |               move.l (a0),d0
   15192:	   |               add.l d0,d0
   15194:	   |               movea.l d0,a1
   15196:	   |               adda.l d0,a1
   15198:	   |               lea 1c95e <typeName>,a0
   1519e:	   |               move.l (0,a1,a0.l),d0
   151a2:	   |               move.l d0,-(sp)
   151a4:	   |               jsr b8 <copyString>
   151aa:	   |               addq.l #4,sp
}
   151ac:	   \-------------> movea.l (sp)+,a6
   151ae:	                   lea 76(sp),sp
   151b2:	                   rts

000151b4 <newAnimationVariable>:


void newAnimationVariable (struct variable *thisVar, struct personaAnimation * i) {
	unlinkVar (thisVar);
   151b4:	move.l 4(sp),-(sp)
   151b8:	jsr 14b54 <unlinkVar>
   151be:	addq.l #4,sp
	thisVar->varType = SVT_ANIM;
   151c0:	movea.l 4(sp),a0
   151c4:	moveq #8,d0
   151c6:	move.l d0,(a0)
	thisVar->varData.animHandler = i;
   151c8:	movea.l 4(sp),a0
   151cc:	move.l 8(sp),4(a0)
}
   151d2:	nop
   151d4:	rts

000151d6 <newCostumeVariable>:

void newCostumeVariable (struct variable * thisVar, struct persona * i) {
	unlinkVar(thisVar);
   151d6:	move.l 4(sp),-(sp)
   151da:	jsr 14b54 <unlinkVar>
   151e0:	addq.l #4,sp
	thisVar->varType = SVT_COSTUME;
   151e2:	movea.l 4(sp),a0
   151e6:	moveq #9,d0
   151e8:	move.l d0,(a0)
	thisVar->varData.costumeHandler = i;
   151ea:	movea.l 4(sp),a0
   151ee:	move.l 8(sp),4(a0)
}
   151f4:	nop
   151f6:	rts

000151f8 <setVariable>:

void setVariable (struct variable *thisVar, enum variableType vT, int value) {
	unlinkVar (thisVar);
   151f8:	move.l 4(sp),-(sp)
   151fc:	jsr 14b54 <unlinkVar>
   15202:	addq.l #4,sp
	thisVar->varType = vT;
   15204:	movea.l 4(sp),a0
   15208:	move.l 8(sp),(a0)
	thisVar->varData.intValue = value;
   1520c:	movea.l 4(sp),a0
   15210:	move.l 12(sp),4(a0)
}
   15216:	nop
   15218:	rts

0001521a <stackGetByIndex>:

struct variable * stackGetByIndex (struct variableStack * vS, unsigned int theIndex) {
    while (theIndex--) {
   1521a:	      /-- bra.s 1522c <stackGetByIndex+0x12>
        vS = vS->next;
   1521c:	/-----|-> movea.l 4(sp),a0
   15220:	|     |   move.l 8(a0),4(sp)
        if (!vS) {
   15226:	|     +-- bne.s 1522c <stackGetByIndex+0x12>
            return NULL;
   15228:	|     |   moveq #0,d0
   1522a:	|  /--|-- bra.s 15240 <stackGetByIndex+0x26>
    while (theIndex--) {
   1522c:	|  |  \-> move.l 8(sp),d0
   15230:	|  |      move.l d0,d1
   15232:	|  |      subq.l #1,d1
   15234:	|  |      move.l d1,8(sp)
   15238:	|  |      tst.l d0
   1523a:	\--|----- bne.s 1521c <stackGetByIndex+0x2>
        }
    }
    return &(vS->thisVar);
   1523c:	   |      move.l 4(sp),d0
}
   15240:	   \----> rts

00015242 <stackFindLast>:

// Would be a LOT better just to keep this up to date in deletevarfromstack function... ah well
struct variableStack * stackFindLast (struct variableStack * hunt) {
	if (hunt == NULL)
   15242:	          tst.l 4(sp)
   15246:	      /-- bne.s 15256 <stackFindLast+0x14>
		return NULL;
   15248:	      |   moveq #0,d0
   1524a:	/-----|-- bra.s 15264 <stackFindLast+0x22>

	while (hunt->next)
		hunt = hunt->next;
   1524c:	|  /--|-> movea.l 4(sp),a0
   15250:	|  |  |   move.l 8(a0),4(sp)
	while (hunt->next)
   15256:	|  |  \-> movea.l 4(sp),a0
   1525a:	|  |      move.l 8(a0),d0
   1525e:	|  \----- bne.s 1524c <stackFindLast+0xa>

	return hunt;
   15260:	|         move.l 4(sp),d0
}
   15264:	\-------> rts

00015266 <stackSize>:

int stackSize (const struct stackHandler * me) {
   15266:	       subq.l #8,sp
	int r = 0;
   15268:	       clr.l 4(sp)
	struct variableStack * a = me -> first;
   1526c:	       movea.l 12(sp),a0
   15270:	       move.l (a0),(sp)
	while (a) {
   15272:	   /-- bra.s 1527e <stackSize+0x18>
		r ++;
   15274:	/--|-> addq.l #1,4(sp)
		a = a -> next;
   15278:	|  |   movea.l (sp),a0
   1527a:	|  |   move.l 8(a0),(sp)
	while (a) {
   1527e:	|  \-> tst.l (sp)
   15280:	\----- bne.s 15274 <stackSize+0xe>
	}
	return r;
   15282:	       move.l 4(sp),d0
}
   15286:	       addq.l #8,sp
   15288:	       rts

0001528a <trimStack>:

void trimStack (struct variableStack ** stack) {
   1528a:	subq.l #8,sp
   1528c:	move.l a6,-(sp)

	struct variableStack* killMe = *stack;
   1528e:	movea.l 16(sp),a0
   15292:	move.l (a0),8(sp)

	*stack = (*stack)->next;
   15296:	movea.l 16(sp),a0
   1529a:	movea.l (a0),a0
   1529c:	move.l 8(a0),d0
   152a0:	movea.l 16(sp),a0
   152a4:	move.l d0,(a0)

	// When calling this, we've ALWAYS checked that stack != NULL
	unlinkVar (&(killMe -> thisVar));
   152a6:	move.l 8(sp),d0
   152aa:	move.l d0,-(sp)
   152ac:	jsr 14b54 <unlinkVar>
   152b2:	addq.l #4,sp
	FreeVec(killMe);
   152b4:	move.l 8(sp),4(sp)
   152ba:	move.l 1ca82 <SysBase>,d0
   152c0:	movea.l d0,a6
   152c2:	movea.l 4(sp),a1
   152c6:	jsr -690(a6)
   152ca:	nop
   152cc:	movea.l (sp)+,a6
   152ce:	addq.l #8,sp
   152d0:	rts

000152d2 <freeze>:
extern BOOL backdropExists;

struct frozenStuffStruct * frozenStuff = NULL;


BOOL freeze () {
   152d2:	       lea -52(sp),sp
   152d6:	       move.l a6,-(sp)
	KPrintF("calling freeze()\n");
   152d8:	       pea 1a0da <newfatal.c.307beca7+0x187>
   152de:	       jsr 17366 <KPrintF>
   152e4:	       addq.l #4,sp

	struct frozenStuffStruct * newFreezer = (struct frozenStuffStruct *) AllocVec(sizeof(struct frozenStuffStruct), MEMF_ANY);
   152e6:	       moveq #68,d0
   152e8:	       move.l d0,52(sp)
   152ec:	       clr.l 48(sp)
   152f0:	       move.l 1ca82 <SysBase>,d0
   152f6:	       movea.l d0,a6
   152f8:	       move.l 52(sp),d0
   152fc:	       move.l 48(sp),d1
   15300:	       jsr -684(a6)
   15304:	       move.l d0,44(sp)
   15308:	       move.l 44(sp),d0
   1530c:	       move.l d0,40(sp)
	if (!newFreezer) return FALSE;
   15310:	   /-- bne.s 15318 <freeze+0x46>
   15312:	   |   clr.w d0
   15314:	/--|-- bra.w 154a2 <freeze+0x1d0>

	CstFreeze();
   15318:	|  \-> jsr 1e4e <CstFreeze>

	// Grab a copy of the current scene
	//ToDo: Amiga Graphics handling here	

	int picWidth = sceneWidth;
   1531e:	|      move.l 1cb1e <sceneWidth>,d0
   15324:	|      move.l d0,36(sp)
	int picHeight = sceneHeight;	
   15328:	|      move.l 1cb22 <sceneHeight>,d0
   1532e:	|      move.l d0,32(sp)



	newFreezer -> sceneWidth = sceneWidth;
   15332:	|      move.l 1cb1e <sceneWidth>,d0
   15338:	|      movea.l 40(sp),a0
   1533c:	|      move.l d0,48(a0)
	newFreezer -> sceneHeight = sceneHeight;
   15340:	|      move.l 1cb22 <sceneHeight>,d0
   15346:	|      movea.l 40(sp),a0
   1534a:	|      move.l d0,52(a0)
	newFreezer -> cameraX = cameraX;
   1534e:	|      move.l 1cb3c <cameraX>,d0
   15354:	|      movea.l 40(sp),a0
   15358:	|      move.l d0,40(a0)
	newFreezer -> cameraY = cameraY;
   1535c:	|      move.l 1cb40 <cameraY>,d0
   15362:	|      movea.l 40(sp),a0
   15366:	|      move.l d0,44(a0)
	newFreezer -> cameraZoom = cameraZoom;
   1536a:	|      move.l 1c420 <cameraZoom>,d0
   15370:	|      movea.l 40(sp),a0
   15374:	|      move.l d0,56(a0)
	// resizeBackdrop kills parallax stuff, light map, z-buffer...
	/*if (! resizeBackdrop (winWidth, winHeight)) {
		KPrintF("Can't create new temporary backdrop buffer");
	}*/

	backdropExists = TRUE;
   15378:	|      move.w #1,1cb2a <backdropExists>

	newFreezer -> allPeople = allPeople;
   15380:	|      move.l 1cae6 <allPeople>,d0
   15386:	|      movea.l 40(sp),a0
   1538a:	|      move.l d0,(a0)
	allPeople = NULL;
   1538c:	|      clr.l 1cae6 <allPeople>

	struct statusStuff * newStatusStuff = (struct statusStuff *) AllocVec(sizeof(struct statusStuff), MEMF_ANY);
   15392:	|      moveq #42,d0
   15394:	|      move.l d0,28(sp)
   15398:	|      clr.l 24(sp)
   1539c:	|      move.l 1ca82 <SysBase>,d0
   153a2:	|      movea.l d0,a6
   153a4:	|      move.l 28(sp),d0
   153a8:	|      move.l 24(sp),d1
   153ac:	|      jsr -684(a6)
   153b0:	|      move.l d0,20(sp)
   153b4:	|      move.l 20(sp),d0
   153b8:	|      move.l d0,16(sp)
	if (!newStatusStuff) return FALSE;	
   153bc:	|  /-- bne.s 153c4 <freeze+0xf2>
   153be:	|  |   clr.w d0
   153c0:	+--|-- bra.w 154a2 <freeze+0x1d0>

	newFreezer -> allScreenRegions = allScreenRegions;
   153c4:	|  \-> move.l 1cb92 <allScreenRegions>,d0
   153ca:	|      movea.l 40(sp),a0
   153ce:	|      move.l d0,4(a0)
	allScreenRegions = NULL;
   153d2:	|      clr.l 1cb92 <allScreenRegions>
	overRegion = NULL;
   153d8:	|      clr.l 1cb96 <overRegion>

	newFreezer -> mouseCursorAnim = mouseCursorAnim;
   153de:	|      move.l 1c988 <mouseCursorAnim>,d0
   153e4:	|      movea.l 40(sp),a0
   153e8:	|      move.l d0,32(a0)
	newFreezer -> mouseCursorFrameNum = mouseCursorFrameNum;
   153ec:	|      move.l 1c98c <mouseCursorFrameNum>,d0
   153f2:	|      movea.l 40(sp),a0
   153f6:	|      move.l d0,36(a0)
	mouseCursorAnim = makeNullAnim ();
   153fa:	|      jsr ae3c <makeNullAnim>
   15400:	|      move.l d0,1c988 <mouseCursorAnim>
	mouseCursorFrameNum = 0;
   15406:	|      clr.l 1c98c <mouseCursorFrameNum>

	newFreezer -> zBuffer = zBuffer;
   1540c:	|      move.l 1cae2 <zBuffer>,d0
   15412:	|      movea.l 40(sp),a0
   15416:	|      move.l d0,60(a0)
	zBuffer = NULL;
   1541a:	|      clr.l 1cae2 <zBuffer>

	newFreezer -> speech = speech;
   15420:	|      move.l 1cade <speech>,d0
   15426:	|      movea.l 40(sp),a0
   1542a:	|      move.l d0,20(a0)
	initSpeech ();
   1542e:	|      jsr 7fde <initSpeech>

	newFreezer -> currentEvents = (struct eventhandlers *) AllocVec(sizeof(struct eventHandlers), MEMF_ANY);
   15434:	|      moveq #28,d0
   15436:	|      move.l d0,12(sp)
   1543a:	|      clr.l 8(sp)
   1543e:	|      move.l 1ca82 <SysBase>,d0
   15444:	|      movea.l d0,a6
   15446:	|      move.l 12(sp),d0
   1544a:	|      move.l 8(sp),d1
   1544e:	|      jsr -684(a6)
   15452:	|      move.l d0,4(sp)
   15456:	|      move.l 4(sp),d0
   1545a:	|      movea.l 40(sp),a0
   1545e:	|      move.l d0,28(a0)
	if (!newFreezer -> currentEvents) return FALSE;
   15462:	|      movea.l 40(sp),a0
   15466:	|      move.l 28(a0),d0
   1546a:	|  /-- bne.s 15470 <freeze+0x19e>
   1546c:	|  |   clr.w d0
   1546e:	+--|-- bra.s 154a2 <freeze+0x1d0>
	memset (newFreezer -> currentEvents, 0, sizeof(struct eventHandlers));
   15470:	|  \-> movea.l 40(sp),a0
   15474:	|      move.l 28(a0),d0
   15478:	|      pea 1c <_start+0x1c>
   1547c:	|      clr.l -(sp)
   1547e:	|      move.l d0,-(sp)
   15480:	|      jsr 172ea <memset>
   15486:	|      lea 12(sp),sp

	newFreezer -> next = frozenStuff;
   1548a:	|      move.l 1cb76 <frozenStuff>,d0
   15490:	|      movea.l 40(sp),a0
   15494:	|      move.l d0,64(a0)
	frozenStuff = newFreezer;
   15498:	|      move.l 40(sp),1cb76 <frozenStuff>

	return TRUE;
   154a0:	|      moveq #1,d0
}
   154a2:	\----> movea.l (sp)+,a6
   154a4:	       lea 52(sp),sp
   154a8:	       rts

000154aa <howFrozen>:

int howFrozen () {
   154aa:	       subq.l #8,sp
	int a = 0;
   154ac:	       clr.l 4(sp)
	struct frozenStuffStruct * f = frozenStuff;
   154b0:	       move.l 1cb76 <frozenStuff>,(sp)
	while (f) {
   154b6:	   /-- bra.s 154c2 <howFrozen+0x18>
		a ++;
   154b8:	/--|-> addq.l #1,4(sp)
		f = f -> next;
   154bc:	|  |   movea.l (sp),a0
   154be:	|  |   move.l 64(a0),(sp)
	while (f) {
   154c2:	|  \-> tst.l (sp)
   154c4:	\----- bne.s 154b8 <howFrozen+0xe>
	}
	return a;
   154c6:	       move.l 4(sp),d0
}
   154ca:	       addq.l #8,sp
   154cc:	       rts

000154ce <unfreeze>:

void unfreeze () {
   154ce:	       lea -16(sp),sp
   154d2:	       move.l a6,-(sp)
	struct frozenStuffStruct * killMe = frozenStuff;
   154d4:	       move.l 1cb76 <frozenStuff>,16(sp)

	if (! frozenStuff) return;
   154dc:	       move.l 1cb76 <frozenStuff>,d0
   154e2:	/----- beq.w 1571a <unfreeze+0x24c>

	CstUnfreeze();
   154e6:	|      jsr 3e2a <CstUnfreeze>

	sceneWidth = frozenStuff -> sceneWidth;
   154ec:	|      movea.l 1cb76 <frozenStuff>,a0
   154f2:	|      move.l 48(a0),d0
   154f6:	|      move.l d0,1cb1e <sceneWidth>
	sceneHeight = frozenStuff -> sceneHeight;
   154fc:	|      movea.l 1cb76 <frozenStuff>,a0
   15502:	|      move.l 52(a0),d0
   15506:	|      move.l d0,1cb22 <sceneHeight>

	cameraX = frozenStuff -> cameraX;
   1550c:	|      movea.l 1cb76 <frozenStuff>,a0
   15512:	|      move.l 40(a0),d0
   15516:	|      move.l d0,1cb3c <cameraX>
	cameraY = frozenStuff -> cameraY;
   1551c:	|      movea.l 1cb76 <frozenStuff>,a0
   15522:	|      move.l 44(a0),d0
   15526:	|      move.l d0,1cb40 <cameraY>
	input.mouseX = (int)(input.mouseX * cameraZoom);
   1552c:	|      move.l 1ca3e <input+0xa>,d0
   15532:	|      move.l d0,-(sp)
   15534:	|      jsr 17798 <__floatsisf>
   1553a:	|      addq.l #4,sp
   1553c:	|      move.l d0,d1
   1553e:	|      move.l 1c420 <cameraZoom>,d0
   15544:	|      move.l d0,-(sp)
   15546:	|      move.l d1,-(sp)
   15548:	|      jsr 1784a <__mulsf3>
   1554e:	|      addq.l #8,sp
   15550:	|      move.l d0,-(sp)
   15552:	|      jsr 17730 <__fixsfsi>
   15558:	|      addq.l #4,sp
   1555a:	|      move.l d0,1ca3e <input+0xa>
	input.mouseY = (int)(input.mouseY * cameraZoom);
   15560:	|      move.l 1ca42 <input+0xe>,d0
   15566:	|      move.l d0,-(sp)
   15568:	|      jsr 17798 <__floatsisf>
   1556e:	|      addq.l #4,sp
   15570:	|      move.l d0,d1
   15572:	|      move.l 1c420 <cameraZoom>,d0
   15578:	|      move.l d0,-(sp)
   1557a:	|      move.l d1,-(sp)
   1557c:	|      jsr 1784a <__mulsf3>
   15582:	|      addq.l #8,sp
   15584:	|      move.l d0,-(sp)
   15586:	|      jsr 17730 <__fixsfsi>
   1558c:	|      addq.l #4,sp
   1558e:	|      move.l d0,1ca42 <input+0xe>
	cameraZoom = frozenStuff -> cameraZoom;
   15594:	|      movea.l 1cb76 <frozenStuff>,a0
   1559a:	|      move.l 56(a0),d0
   1559e:	|      move.l d0,1c420 <cameraZoom>
	input.mouseX = (int)(input.mouseX / cameraZoom);
   155a4:	|      move.l 1ca3e <input+0xa>,d0
   155aa:	|      move.l d0,-(sp)
   155ac:	|      jsr 17798 <__floatsisf>
   155b2:	|      addq.l #4,sp
   155b4:	|      move.l d0,d1
   155b6:	|      move.l 1c420 <cameraZoom>,d0
   155bc:	|      move.l d0,-(sp)
   155be:	|      move.l d1,-(sp)
   155c0:	|      jsr 1764e <__divsf3>
   155c6:	|      addq.l #8,sp
   155c8:	|      move.l d0,-(sp)
   155ca:	|      jsr 17730 <__fixsfsi>
   155d0:	|      addq.l #4,sp
   155d2:	|      move.l d0,1ca3e <input+0xa>
	input.mouseY = (int)(input.mouseY / cameraZoom);
   155d8:	|      move.l 1ca42 <input+0xe>,d0
   155de:	|      move.l d0,-(sp)
   155e0:	|      jsr 17798 <__floatsisf>
   155e6:	|      addq.l #4,sp
   155e8:	|      move.l d0,d1
   155ea:	|      move.l 1c420 <cameraZoom>,d0
   155f0:	|      move.l d0,-(sp)
   155f2:	|      move.l d1,-(sp)
   155f4:	|      jsr 1764e <__divsf3>
   155fa:	|      addq.l #8,sp
   155fc:	|      move.l d0,-(sp)
   155fe:	|      jsr 17730 <__fixsfsi>
   15604:	|      addq.l #4,sp
   15606:	|      move.l d0,1ca42 <input+0xe>

	killAllPeople ();
   1560c:	|      jsr ab44 <killAllPeople>
	allPeople = frozenStuff -> allPeople;
   15612:	|      movea.l 1cb76 <frozenStuff>,a0
   15618:	|      move.l (a0),d0
   1561a:	|      move.l d0,1cae6 <allPeople>

	killAllRegions ();
   15620:	|      jsr 15b76 <killAllRegions>
	allScreenRegions = frozenStuff -> allScreenRegions;
   15626:	|      movea.l 1cb76 <frozenStuff>,a0
   1562c:	|      move.l 4(a0),d0
   15630:	|      move.l d0,1cb92 <allScreenRegions>
	
	deleteAnim (mouseCursorAnim);  
   15636:	|      move.l 1c988 <mouseCursorAnim>,d0
   1563c:	|      move.l d0,-(sp)
   1563e:	|      jsr 9a38 <deleteAnim>
   15644:	|      addq.l #4,sp
	mouseCursorAnim = frozenStuff -> mouseCursorAnim;
   15646:	|      movea.l 1cb76 <frozenStuff>,a0
   1564c:	|      move.l 32(a0),d0
   15650:	|      move.l d0,1c988 <mouseCursorAnim>
	mouseCursorFrameNum = frozenStuff -> mouseCursorFrameNum;	
   15656:	|      movea.l 1cb76 <frozenStuff>,a0
   1565c:	|      move.l 36(a0),d0
   15660:	|      move.l d0,1c98c <mouseCursorFrameNum>

	killZBuffer ();
   15666:	|      jsr 8852 <killZBuffer>
	zBuffer = frozenStuff->zBuffer;
   1566c:	|      movea.l 1cb76 <frozenStuff>,a0
   15672:	|      move.l 60(a0),d0
   15676:	|      move.l d0,1cae2 <zBuffer>

	if (currentEvents) FreeVec(currentEvents);
   1567c:	|      move.l 1c3fa <currentEvents>,d0
   15682:	|  /-- beq.s 1569c <unfreeze+0x1ce>
   15684:	|  |   move.l 1c3fa <currentEvents>,12(sp)
   1568c:	|  |   move.l 1ca82 <SysBase>,d0
   15692:	|  |   movea.l d0,a6
   15694:	|  |   movea.l 12(sp),a1
   15698:	|  |   jsr -690(a6)
	currentEvents = frozenStuff -> currentEvents;
   1569c:	|  \-> movea.l 1cb76 <frozenStuff>,a0
   156a2:	|      move.l 28(a0),d0
   156a6:	|      move.l d0,1c3fa <currentEvents>

	killAllSpeech ();
   156ac:	|      jsr 8076 <killAllSpeech>
	if (speech) FreeVec(speech);
   156b2:	|      move.l 1cade <speech>,d0
   156b8:	|  /-- beq.s 156d2 <unfreeze+0x204>
   156ba:	|  |   move.l 1cade <speech>,8(sp)
   156c2:	|  |   move.l 1ca82 <SysBase>,d0
   156c8:	|  |   movea.l d0,a6
   156ca:	|  |   movea.l 8(sp),a1
   156ce:	|  |   jsr -690(a6)
	speech = frozenStuff -> speech;
   156d2:	|  \-> movea.l 1cb76 <frozenStuff>,a0
   156d8:	|      move.l 20(a0),d0
   156dc:	|      move.l d0,1cade <speech>

	frozenStuff = frozenStuff -> next;
   156e2:	|      movea.l 1cb76 <frozenStuff>,a0
   156e8:	|      move.l 64(a0),d0
   156ec:	|      move.l d0,1cb76 <frozenStuff>

	overRegion = NULL;
   156f2:	|      clr.l 1cb96 <overRegion>
	if (killMe) FreeVec(killMe);
   156f8:	|      tst.l 16(sp)
   156fc:	|  /-- beq.s 15714 <unfreeze+0x246>
   156fe:	|  |   move.l 16(sp),4(sp)
   15704:	|  |   move.l 1ca82 <SysBase>,d0
   1570a:	|  |   movea.l d0,a6
   1570c:	|  |   movea.l 4(sp),a1
   15710:	|  |   jsr -690(a6)
	killMe = NULL;
   15714:	|  \-> clr.l 16(sp)
   15718:	|  /-- bra.s 1571c <unfreeze+0x24e>
	if (! frozenStuff) return;
   1571a:	\--|-> nop
}
   1571c:	   \-> movea.l (sp)+,a6
   1571e:	       lea 16(sp),sp
   15722:	       rts

00015724 <isInFont>:
unsigned int fontTableSize = 0;
struct loadedSpriteBank *theFont;


BOOL isInFont (char * theText) {
	KPrintF("isInFont: Not implemented yet on Amiga"); //Todo: Implement on Amiga
   15724:	pea 1a0ec <newfatal.c.307beca7+0x199>
   1572a:	jsr 17366 <KPrintF>
   15730:	addq.l #4,sp
	return FALSE;
   15732:	clr.w d0
}
   15734:	rts

00015736 <loadFont>:

BOOL loadFont (int filenum, char * charOrder, int h) {
   15736:	          lea -32(sp),sp
   1573a:	          move.l a6,-(sp)
   1573c:	          move.l d2,-(sp)
	unsigned int a = 0;
   1573e:	          clr.l 36(sp)
	ULONG c;

	if( fontOrderString) FreeVec(fontOrderString);
   15742:	          move.l 1cb82 <fontOrderString>,d0
   15748:	      /-- beq.s 15762 <loadFont+0x2c>
   1574a:	      |   move.l 1cb82 <fontOrderString>,24(sp)
   15752:	      |   move.l 1ca82 <SysBase>,d0
   15758:	      |   movea.l d0,a6
   1575a:	      |   movea.l 24(sp),a1
   1575e:	      |   jsr -690(a6)
	fontOrderString = copyString(charOrder);
   15762:	      \-> move.l 48(sp),-(sp)
   15766:	          jsr b8 <copyString>
   1576c:	          addq.l #4,sp
   1576e:	          move.l d0,1cb82 <fontOrderString>
	if( theFont) forgetSpriteBank(theFont);	
   15774:	          move.l 1cb8e <theFont>,d0
   1577a:	      /-- beq.s 1578c <loadFont+0x56>
   1577c:	      |   move.l 1cb8e <theFont>,d0
   15782:	      |   move.l d0,-(sp)
   15784:	      |   jsr 8b90 <forgetSpriteBank>
   1578a:	      |   addq.l #4,sp
	theFont = NULL;
   1578c:	      \-> clr.l 1cb8e <theFont>

	loadedFontNum = filenum;
   15792:	          move.l 44(sp),1cb7e <loadedFontNum>

	fontTableSize = 0;
   1579a:	          clr.l 1cb8a <fontTableSize>
	char *tmp = charOrder;
   157a0:	          move.l 48(sp),32(sp)
	while (*tmp) {        
   157a6:	   /----- bra.s 157e2 <loadFont+0xac>
		if (*tmp > (UBYTE) fontTableSize) fontTableSize = *tmp;
   157a8:	/--|----> movea.l 32(sp),a0
   157ac:	|  |      move.b (a0),d0
   157ae:	|  |      ext.w d0
   157b0:	|  |      movea.w d0,a0
   157b2:	|  |      move.l 1cb8a <fontTableSize>,d0
   157b8:	|  |      move.l d0,d0
   157ba:	|  |      move.b d0,d0
   157bc:	|  |      andi.l #255,d0
   157c2:	|  |      cmp.l a0,d0
   157c4:	|  |  /-- bge.s 157d6 <loadFont+0xa0>
   157c6:	|  |  |   movea.l 32(sp),a0
   157ca:	|  |  |   move.b (a0),d0
   157cc:	|  |  |   ext.w d0
   157ce:	|  |  |   movea.w d0,a0
   157d0:	|  |  |   move.l a0,1cb8a <fontTableSize>
		*tmp++;
   157d6:	|  |  \-> move.l 32(sp),d0
   157da:	|  |      move.l d0,d1
   157dc:	|  |      addq.l #1,d1
   157de:	|  |      move.l d1,32(sp)
	while (*tmp) {        
   157e2:	|  \----> movea.l 32(sp),a0
   157e6:	|         move.b (a0),d0
   157e8:	\-------- bne.s 157a8 <loadFont+0x72>
	}
	fontTableSize++;
   157ea:	          move.l 1cb8a <fontTableSize>,d0
   157f0:	          addq.l #1,d0
   157f2:	          move.l d0,1cb8a <fontTableSize>

	if( fontTable) FreeVec(fontTable);
   157f8:	          move.l 1cb86 <fontTable>,d0
   157fe:	      /-- beq.s 15818 <loadFont+0xe2>
   15800:	      |   move.l 1cb86 <fontTable>,20(sp)
   15808:	      |   move.l 1ca82 <SysBase>,d0
   1580e:	      |   movea.l d0,a6
   15810:	      |   movea.l 20(sp),a1
   15814:	      |   jsr -690(a6)
	fontTable = AllocVec(sizeof(ULONG) * fontTableSize, MEMF_ANY);
   15818:	      \-> move.l 1cb8a <fontTableSize>,d0
   1581e:	          add.l d0,d0
   15820:	          add.l d0,d0
   15822:	          move.l d0,16(sp)
   15826:	          clr.l 12(sp)
   1582a:	          move.l 1ca82 <SysBase>,d0
   15830:	          movea.l d0,a6
   15832:	          move.l 16(sp),d0
   15836:	          move.l 12(sp),d1
   1583a:	          jsr -684(a6)
   1583e:	          move.l d0,8(sp)
   15842:	          move.l 8(sp),d0
   15846:	          move.l d0,1cb86 <fontTable>
	if (!fontTable) return FALSE;
   1584c:	          move.l 1cb86 <fontTable>,d0
   15852:	      /-- bne.s 1585a <loadFont+0x124>
   15854:	      |   clr.w d0
   15856:	/-----|-- bra.w 15900 <loadFont+0x1ca>

	for (a = 0;  a < fontTableSize; a++) {
   1585a:	|     \-> clr.l 36(sp)
   1585e:	|     /-- bra.s 15878 <loadFont+0x142>
		fontTable[a] = 0;
   15860:	|  /--|-> move.l 1cb86 <fontTable>,d1
   15866:	|  |  |   move.l 36(sp),d0
   1586a:	|  |  |   add.l d0,d0
   1586c:	|  |  |   add.l d0,d0
   1586e:	|  |  |   movea.l d1,a0
   15870:	|  |  |   adda.l d0,a0
   15872:	|  |  |   clr.l (a0)
	for (a = 0;  a < fontTableSize; a++) {
   15874:	|  |  |   addq.l #1,36(sp)
   15878:	|  |  \-> move.l 1cb8a <fontTableSize>,d0
   1587e:	|  |      cmp.l 36(sp),d0
   15882:	|  \----- bhi.s 15860 <loadFont+0x12a>
	}
	a = 0;
   15884:	|         clr.l 36(sp)
	int i = 0;
   15888:	|         clr.l 28(sp)
	tmp = charOrder;
   1588c:	|         move.l 48(sp),32(sp)
	while (*tmp) {
   15892:	|     /-- bra.s 158c2 <loadFont+0x18c>
		fontTable[*tmp++] = i;
   15894:	|  /--|-> move.l 1cb86 <fontTable>,d1
   1589a:	|  |  |   move.l 32(sp),d0
   1589e:	|  |  |   move.l d0,d2
   158a0:	|  |  |   addq.l #1,d2
   158a2:	|  |  |   move.l d2,32(sp)
   158a6:	|  |  |   movea.l d0,a0
   158a8:	|  |  |   move.b (a0),d0
   158aa:	|  |  |   ext.w d0
   158ac:	|  |  |   movea.w d0,a0
   158ae:	|  |  |   move.l a0,d0
   158b0:	|  |  |   add.l a0,d0
   158b2:	|  |  |   add.l d0,d0
   158b4:	|  |  |   movea.l d1,a0
   158b6:	|  |  |   adda.l d0,a0
   158b8:	|  |  |   move.l 28(sp),d0
   158bc:	|  |  |   move.l d0,(a0)
		i++;
   158be:	|  |  |   addq.l #1,28(sp)
	while (*tmp) {
   158c2:	|  |  \-> movea.l 32(sp),a0
   158c6:	|  |      move.b (a0),d0
   158c8:	|  \----- bne.s 15894 <loadFont+0x15e>
	}
	
	theFont = loadBankForAnim(filenum);
   158ca:	|         move.l 44(sp),-(sp)
   158ce:	|         jsr 16088 <loadBankForAnim>
   158d4:	|         addq.l #4,sp
   158d6:	|         move.l d0,1cb8e <theFont>
	if (!theFont) {
   158dc:	|         move.l 1cb8e <theFont>,d0
   158e2:	|     /-- bne.s 158f6 <loadFont+0x1c0>
		KPrintF("loadFont: Can't load font");
   158e4:	|     |   pea 1a113 <newfatal.c.307beca7+0x1c0>
   158ea:	|     |   jsr 17366 <KPrintF>
   158f0:	|     |   addq.l #4,sp
		return FALSE;
   158f2:	|     |   clr.w d0
   158f4:	+-----|-- bra.s 15900 <loadFont+0x1ca>
	}
	fontHeight = h;
   158f6:	|     \-> move.l 52(sp),1cb7a <fontHeight>
	return TRUE;
   158fe:	|         moveq #1,d0
}
   15900:	\-------> move.l (sp)+,d2
   15902:	          movea.l (sp)+,a6
   15904:	          lea 32(sp),sp
   15908:	          rts

0001590a <pasteStringToBackdrop>:

void pasteStringToBackdrop(char *theText, int xOff, int y) {
   1590a:	                lea -12(sp),sp
    struct sprite *mySprite;
    int a = 0;
   1590e:	                clr.l 4(sp)

    if (!fontTableSize) return;
   15912:	                move.l 1cb8a <fontTableSize>,d0
   15918:	/-------------- beq.w 159e0 <pasteStringToBackdrop+0xd6>

    xOff += fontSpace >> 1;
   1591c:	|               move.w 1c986 <fontSpace>,d0
   15922:	|               asr.w #1,d0
   15924:	|               ext.l d0
   15926:	|               add.l d0,20(sp)
	char *tmp = theText;
   1592a:	|               move.l 16(sp),8(sp)
    while (*tmp) {        
   15930:	|     /-------- bra.w 159d4 <pasteStringToBackdrop+0xca>
        mySprite = &theFont->bank.sprites[fontInTable( (UBYTE) *tmp)];
   15934:	|  /--|-------> movea.l 1cb8e <theFont>,a0
   1593a:	|  |  |         movea.l 16(a0),a0
   1593e:	|  |  |         movea.l 8(sp),a1
   15942:	|  |  |         move.b (a1),d0
   15944:	|  |  |         move.b d0,d0
   15946:	|  |  |         andi.l #255,d0
   1594c:	|  |  |         move.l 1cb8a <fontTableSize>,d1
   15952:	|  |  |         cmp.l d0,d1
   15954:	|  |  |  /----- bls.s 15980 <pasteStringToBackdrop+0x76>
   15956:	|  |  |  |      move.l 1cb86 <fontTable>,d1
   1595c:	|  |  |  |      movea.l 8(sp),a1
   15960:	|  |  |  |      move.b (a1),d0
   15962:	|  |  |  |      move.b d0,d0
   15964:	|  |  |  |      andi.l #255,d0
   1596a:	|  |  |  |      add.l d0,d0
   1596c:	|  |  |  |      add.l d0,d0
   1596e:	|  |  |  |      movea.l d1,a1
   15970:	|  |  |  |      adda.l d0,a1
   15972:	|  |  |  |      move.l (a1),d1
   15974:	|  |  |  |      move.l d1,d0
   15976:	|  |  |  |      lsl.l #3,d0
   15978:	|  |  |  |      sub.l d1,d0
   1597a:	|  |  |  |      add.l d0,d0
   1597c:	|  |  |  |      add.l d0,d0
   1597e:	|  |  |  |  /-- bra.s 15982 <pasteStringToBackdrop+0x78>
   15980:	|  |  |  \--|-> moveq #0,d0
   15982:	|  |  |     \-> adda.l d0,a0
   15984:	|  |  |         move.l a0,(sp)
        CstPasteChar( mySprite, xOff - mySprite->xhot, y - mySprite->yhot);
   15986:	|  |  |         move.l 24(sp),d1
   1598a:	|  |  |         movea.l (sp),a0
   1598c:	|  |  |         move.l 12(a0),d0
   15990:	|  |  |         move.l d0,d0
   15992:	|  |  |         sub.w d0,d1
   15994:	|  |  |         move.w d1,d0
   15996:	|  |  |         movea.w d0,a1
   15998:	|  |  |         move.l 20(sp),d1
   1599c:	|  |  |         movea.l (sp),a0
   1599e:	|  |  |         move.l 8(a0),d0
   159a2:	|  |  |         move.l d0,d0
   159a4:	|  |  |         sub.w d0,d1
   159a6:	|  |  |         move.w d1,d0
   159a8:	|  |  |         movea.w d0,a0
   159aa:	|  |  |         move.l a1,-(sp)
   159ac:	|  |  |         move.l a0,-(sp)
   159ae:	|  |  |         move.l 8(sp),-(sp)
   159b2:	|  |  |         jsr 24f0 <CstPasteChar>
   159b8:	|  |  |         lea 12(sp),sp
        xOff += mySprite->width + fontSpace;
   159bc:	|  |  |         movea.l (sp),a0
   159be:	|  |  |         move.l (a0),d1
   159c0:	|  |  |         move.w 1c986 <fontSpace>,d0
   159c6:	|  |  |         movea.w d0,a0
   159c8:	|  |  |         move.l d1,d0
   159ca:	|  |  |         add.l a0,d0
   159cc:	|  |  |         add.l d0,20(sp)
		tmp++;
   159d0:	|  |  |         addq.l #1,8(sp)
    while (*tmp) {        
   159d4:	|  |  \-------> movea.l 8(sp),a0
   159d8:	|  |            move.b (a0),d0
   159da:	|  \----------- bne.w 15934 <pasteStringToBackdrop+0x2a>
   159de:	|           /-- bra.s 159e2 <pasteStringToBackdrop+0xd8>
    if (!fontTableSize) return;
   159e0:	\-----------|-> nop
    }
}
   159e2:	            \-> lea 12(sp),sp
   159e6:	                rts

000159e8 <stringWidth>:


int stringWidth (char * theText) {
   159e8:	       subq.l #8,sp
	int a = 0;
   159ea:	       clr.l 4(sp)
    ULONG c;
	int xOff = 0;
   159ee:	       clr.l (sp)

	if (! fontTableSize) return 0;
   159f0:	       move.l 1cb8a <fontTableSize>,d0
   159f6:	/----- bne.s 159fc <stringWidth+0x14>
   159f8:	|      moveq #0,d0
   159fa:	|  /-- bra.s 159fe <stringWidth+0x16>
	/*while (theText[a]) {
        c = u8_nextchar(theText, &a);
		xOff += theFont.sprites[fontInTable(c)].width + fontSpace;
	}Todo: Amigize this*/
	
	return xOff;
   159fc:	\--|-> move.l (sp),d0
}
   159fe:	   \-> addq.l #8,sp
   15a00:	       rts

00015a02 <addScreenRegion>:
struct screenRegion * allScreenRegions = NULL;
struct screenRegion * overRegion = NULL;



BOOL addScreenRegion(int x1, int y1, int x2, int y2, int sX, int sY, int di, int objectNum) {
   15a02:	       lea -16(sp),sp
   15a06:	       move.l a6,-(sp)
    struct screenRegion *newRegion = AllocVec(sizeof(struct screenRegion), MEMF_ANY);
   15a08:	       moveq #36,d0
   15a0a:	       move.l d0,16(sp)
   15a0e:	       clr.l 12(sp)
   15a12:	       move.l 1ca82 <SysBase>,d0
   15a18:	       movea.l d0,a6
   15a1a:	       move.l 16(sp),d0
   15a1e:	       move.l 12(sp),d1
   15a22:	       jsr -684(a6)
   15a26:	       move.l d0,8(sp)
   15a2a:	       move.l 8(sp),d0
   15a2e:	       move.l d0,4(sp)
    if (!newRegion) return FALSE;
   15a32:	   /-- bne.s 15a3a <addScreenRegion+0x38>
   15a34:	   |   clr.w d0
   15a36:	/--|-- bra.w 15aba <addScreenRegion+0xb8>
    newRegion->di = di;
   15a3a:	|  \-> movea.l 4(sp),a0
   15a3e:	|      move.l 48(sp),24(a0)
    newRegion->x1 = x1;
   15a44:	|      movea.l 4(sp),a0
   15a48:	|      move.l 24(sp),(a0)
    newRegion->y1 = y1;
   15a4c:	|      movea.l 4(sp),a0
   15a50:	|      move.l 28(sp),4(a0)
    newRegion->x2 = x2;
   15a56:	|      movea.l 4(sp),a0
   15a5a:	|      move.l 32(sp),8(a0)
    newRegion->y2 = y2;
   15a60:	|      movea.l 4(sp),a0
   15a64:	|      move.l 36(sp),12(a0)
    newRegion->sX = sX;
   15a6a:	|      movea.l 4(sp),a0
   15a6e:	|      move.l 40(sp),16(a0)
    newRegion->sY = sY;
   15a74:	|      movea.l 4(sp),a0
   15a78:	|      move.l 44(sp),20(a0)
    newRegion->thisType = loadObjectType(objectNum);
   15a7e:	|      move.l 52(sp),-(sp)
   15a82:	|      jsr d740 <loadObjectType>
   15a88:	|      addq.l #4,sp
   15a8a:	|      movea.l 4(sp),a0
   15a8e:	|      move.l d0,28(a0)
    newRegion->next = allScreenRegions;
   15a92:	|      move.l 1cb92 <allScreenRegions>,d0
   15a98:	|      movea.l 4(sp),a0
   15a9c:	|      move.l d0,32(a0)
    allScreenRegions = newRegion;
   15aa0:	|      move.l 4(sp),1cb92 <allScreenRegions>
    return (BOOL) (newRegion->thisType != NULL);
   15aa8:	|      movea.l 4(sp),a0
   15aac:	|      move.l 28(a0),d0
   15ab0:	|      sne d0
   15ab2:	|      neg.b d0
   15ab4:	|      move.b d0,d0
   15ab6:	|      andi.w #255,d0
}
   15aba:	\----> movea.l (sp)+,a6
   15abc:	       lea 16(sp),sp
   15ac0:	       rts

00015ac2 <getOverRegion>:

void getOverRegion () {
   15ac2:	             subq.l #4,sp
	struct screenRegion * thisRegion = allScreenRegions;
   15ac4:	             move.l 1cb92 <allScreenRegions>,(sp)
	while (thisRegion) {
   15aca:	   /-------- bra.s 15b38 <getOverRegion+0x76>
		if ((input.mouseX >= thisRegion -> x1 - cameraX) && (input.mouseY >= thisRegion -> y1 - cameraY) &&
   15acc:	/--|-------> move.l 1ca3e <input+0xa>,d0
   15ad2:	|  |         movea.l (sp),a0
   15ad4:	|  |         movea.l (a0),a0
   15ad6:	|  |         move.l 1cb3c <cameraX>,d1
   15adc:	|  |         suba.l d1,a0
   15ade:	|  |         cmpa.l d0,a0
   15ae0:	|  |  /----- bgt.s 15b32 <getOverRegion+0x70>
   15ae2:	|  |  |      move.l 1ca42 <input+0xe>,d0
   15ae8:	|  |  |      movea.l (sp),a0
   15aea:	|  |  |      movea.l 4(a0),a0
   15aee:	|  |  |      move.l 1cb40 <cameraY>,d1
   15af4:	|  |  |      suba.l d1,a0
   15af6:	|  |  |      cmpa.l d0,a0
   15af8:	|  |  +----- bgt.s 15b32 <getOverRegion+0x70>
			 (input.mouseX <= thisRegion -> x2 - cameraX) && (input.mouseY <= thisRegion -> y2 - cameraY)) {
   15afa:	|  |  |      move.l 1ca3e <input+0xa>,d0
   15b00:	|  |  |      movea.l (sp),a0
   15b02:	|  |  |      movea.l 8(a0),a0
   15b06:	|  |  |      move.l 1cb3c <cameraX>,d1
   15b0c:	|  |  |      suba.l d1,a0
		if ((input.mouseX >= thisRegion -> x1 - cameraX) && (input.mouseY >= thisRegion -> y1 - cameraY) &&
   15b0e:	|  |  |      cmpa.l d0,a0
   15b10:	|  |  +----- blt.s 15b32 <getOverRegion+0x70>
			 (input.mouseX <= thisRegion -> x2 - cameraX) && (input.mouseY <= thisRegion -> y2 - cameraY)) {
   15b12:	|  |  |      move.l 1ca42 <input+0xe>,d0
   15b18:	|  |  |      movea.l (sp),a0
   15b1a:	|  |  |      movea.l 12(a0),a0
   15b1e:	|  |  |      move.l 1cb40 <cameraY>,d1
   15b24:	|  |  |      suba.l d1,a0
   15b26:	|  |  |      cmpa.l d0,a0
   15b28:	|  |  +----- blt.s 15b32 <getOverRegion+0x70>
			overRegion = thisRegion;
   15b2a:	|  |  |      move.l (sp),1cb96 <overRegion>
			return;
   15b30:	|  |  |  /-- bra.s 15b44 <getOverRegion+0x82>
		}
		thisRegion = thisRegion -> next;
   15b32:	|  |  \--|-> movea.l (sp),a0
   15b34:	|  |     |   move.l 32(a0),(sp)
	while (thisRegion) {
   15b38:	|  \-----|-> tst.l (sp)
   15b3a:	\--------|-- bne.s 15acc <getOverRegion+0xa>
	}
	overRegion = NULL;
   15b3c:	         |   clr.l 1cb96 <overRegion>
	return;
   15b42:	         |   nop
}
   15b44:	         \-> addq.l #4,sp
   15b46:	             rts

00015b48 <getRegionForObject>:


struct screenRegion * getRegionForObject (int obj) {
   15b48:	             subq.l #4,sp
	struct screenRegion * thisRegion = allScreenRegions;
   15b4a:	             move.l 1cb92 <allScreenRegions>,(sp)

	while (thisRegion) {
   15b50:	   /-------- bra.s 15b6c <getRegionForObject+0x24>
		if (obj == thisRegion -> thisType -> objectNum) {
   15b52:	/--|-------> movea.l (sp),a0
   15b54:	|  |         movea.l 28(a0),a0
   15b58:	|  |         move.l 4(a0),d0
   15b5c:	|  |         cmp.l 8(sp),d0
   15b60:	|  |     /-- bne.s 15b66 <getRegionForObject+0x1e>
			return thisRegion;
   15b62:	|  |     |   move.l (sp),d0
   15b64:	|  |  /--|-- bra.s 15b72 <getRegionForObject+0x2a>
		}
		thisRegion = thisRegion -> next;
   15b66:	|  |  |  \-> movea.l (sp),a0
   15b68:	|  |  |      move.l 32(a0),(sp)
	while (thisRegion) {
   15b6c:	|  \--|----> tst.l (sp)
   15b6e:	\-----|----- bne.s 15b52 <getRegionForObject+0xa>
	}

	return NULL;
   15b70:	      |      moveq #0,d0
}
   15b72:	      \----> addq.l #4,sp
   15b74:	             rts

00015b76 <killAllRegions>:

void killAllRegions () {
   15b76:	       subq.l #8,sp
   15b78:	       move.l a6,-(sp)
	struct screenRegion * killRegion;
	while (allScreenRegions) {
   15b7a:	   /-- bra.s 15bbc <killAllRegions+0x46>
		killRegion = allScreenRegions;
   15b7c:	/--|-> move.l 1cb92 <allScreenRegions>,8(sp)
		allScreenRegions = allScreenRegions -> next;
   15b84:	|  |   movea.l 1cb92 <allScreenRegions>,a0
   15b8a:	|  |   move.l 32(a0),d0
   15b8e:	|  |   move.l d0,1cb92 <allScreenRegions>
		removeObjectType (killRegion -> thisType);
   15b94:	|  |   movea.l 8(sp),a0
   15b98:	|  |   move.l 28(a0),d0
   15b9c:	|  |   move.l d0,-(sp)
   15b9e:	|  |   jsr d9f8 <removeObjectType>
   15ba4:	|  |   addq.l #4,sp
		FreeVec(killRegion);
   15ba6:	|  |   move.l 8(sp),4(sp)
   15bac:	|  |   move.l 1ca82 <SysBase>,d0
   15bb2:	|  |   movea.l d0,a6
   15bb4:	|  |   movea.l 4(sp),a1
   15bb8:	|  |   jsr -690(a6)
	while (allScreenRegions) {
   15bbc:	|  \-> move.l 1cb92 <allScreenRegions>,d0
   15bc2:	\----- bne.s 15b7c <killAllRegions+0x6>
	}
	overRegion = NULL;
   15bc4:	       clr.l 1cb96 <overRegion>
}
   15bca:	       nop
   15bcc:	       movea.l (sp)+,a6
   15bce:	       addq.l #8,sp
   15bd0:	       rts

00015bd2 <loadRegions>:

void loadRegions (BPTR fp) {
   15bd2:	       lea -24(sp),sp
   15bd6:	       move.l a6,-(sp)
	int numRegions = get2bytes (fp);
   15bd8:	       move.l 32(sp),-(sp)
   15bdc:	       jsr 6bc <get2bytes>
   15be2:	       addq.l #4,sp
   15be4:	       move.l d0,24(sp)

	struct screenRegion * newRegion;
	struct screenRegion * * pointy = & allScreenRegions;
   15be8:	       move.l #117650,20(sp)

	while (numRegions --) {
   15bf0:	   /-- bra.w 15cce <loadRegions+0xfc>
		newRegion = AllocVec( sizeof(struct screenRegion),MEMF_ANY);
   15bf4:	/--|-> moveq #36,d0
   15bf6:	|  |   move.l d0,16(sp)
   15bfa:	|  |   clr.l 12(sp)
   15bfe:	|  |   move.l 1ca82 <SysBase>,d0
   15c04:	|  |   movea.l d0,a6
   15c06:	|  |   move.l 16(sp),d0
   15c0a:	|  |   move.l 12(sp),d1
   15c0e:	|  |   jsr -684(a6)
   15c12:	|  |   move.l d0,8(sp)
   15c16:	|  |   move.l 8(sp),d0
   15c1a:	|  |   move.l d0,4(sp)
		* pointy = newRegion;
   15c1e:	|  |   movea.l 20(sp),a0
   15c22:	|  |   move.l 4(sp),(a0)
		pointy = & (newRegion -> next);
   15c26:	|  |   moveq #32,d1
   15c28:	|  |   add.l 4(sp),d1
   15c2c:	|  |   move.l d1,20(sp)

		newRegion -> x1 = get2bytes (fp);
   15c30:	|  |   move.l 32(sp),-(sp)
   15c34:	|  |   jsr 6bc <get2bytes>
   15c3a:	|  |   addq.l #4,sp
   15c3c:	|  |   movea.l 4(sp),a0
   15c40:	|  |   move.l d0,(a0)
		newRegion -> y1 = get2bytes (fp);
   15c42:	|  |   move.l 32(sp),-(sp)
   15c46:	|  |   jsr 6bc <get2bytes>
   15c4c:	|  |   addq.l #4,sp
   15c4e:	|  |   movea.l 4(sp),a0
   15c52:	|  |   move.l d0,4(a0)
		newRegion -> x2 = get2bytes (fp);
   15c56:	|  |   move.l 32(sp),-(sp)
   15c5a:	|  |   jsr 6bc <get2bytes>
   15c60:	|  |   addq.l #4,sp
   15c62:	|  |   movea.l 4(sp),a0
   15c66:	|  |   move.l d0,8(a0)
		newRegion -> y2 = get2bytes (fp);
   15c6a:	|  |   move.l 32(sp),-(sp)
   15c6e:	|  |   jsr 6bc <get2bytes>
   15c74:	|  |   addq.l #4,sp
   15c76:	|  |   movea.l 4(sp),a0
   15c7a:	|  |   move.l d0,12(a0)
		newRegion -> sX = get2bytes (fp);
   15c7e:	|  |   move.l 32(sp),-(sp)
   15c82:	|  |   jsr 6bc <get2bytes>
   15c88:	|  |   addq.l #4,sp
   15c8a:	|  |   movea.l 4(sp),a0
   15c8e:	|  |   move.l d0,16(a0)
		newRegion -> sY = get2bytes (fp);
   15c92:	|  |   move.l 32(sp),-(sp)
   15c96:	|  |   jsr 6bc <get2bytes>
   15c9c:	|  |   addq.l #4,sp
   15c9e:	|  |   movea.l 4(sp),a0
   15ca2:	|  |   move.l d0,20(a0)
		newRegion -> di = get2bytes (fp);
   15ca6:	|  |   move.l 32(sp),-(sp)
   15caa:	|  |   jsr 6bc <get2bytes>
   15cb0:	|  |   addq.l #4,sp
   15cb2:	|  |   movea.l 4(sp),a0
   15cb6:	|  |   move.l d0,24(a0)
		newRegion -> thisType = loadObjectRef (fp);
   15cba:	|  |   move.l 32(sp),-(sp)
   15cbe:	|  |   jsr d6ee <loadObjectRef>
   15cc4:	|  |   addq.l #4,sp
   15cc6:	|  |   movea.l 4(sp),a0
   15cca:	|  |   move.l d0,28(a0)
	while (numRegions --) {
   15cce:	|  \-> move.l 24(sp),d0
   15cd2:	|      move.l d0,d1
   15cd4:	|      subq.l #1,d1
   15cd6:	|      move.l d1,24(sp)
   15cda:	|      tst.l d0
   15cdc:	\----- bne.w 15bf4 <loadRegions+0x22>
	}
	* pointy = NULL;
   15ce0:	       movea.l 20(sp),a0
   15ce4:	       clr.l (a0)
}
   15ce6:	       nop
   15ce8:	       movea.l (sp)+,a6
   15cea:	       lea 24(sp),sp
   15cee:	       rts

00015cf0 <removeScreenRegion>:

void removeScreenRegion (int objectNum) {
   15cf0:	             lea -12(sp),sp
   15cf4:	             move.l a6,-(sp)
    struct screenRegion ** huntRegion = &allScreenRegions;
   15cf6:	             move.l #117650,12(sp)
    struct screenRegion * killMe;

    while (*huntRegion) {
   15cfe:	   /-------- bra.s 15d78 <removeScreenRegion+0x88>
        if ((*huntRegion)->thisType->objectNum == objectNum) {
   15d00:	/--|-------> movea.l 12(sp),a0
   15d04:	|  |         movea.l (a0),a0
   15d06:	|  |         movea.l 28(a0),a0
   15d0a:	|  |         move.l 4(a0),d0
   15d0e:	|  |         cmp.l 20(sp),d0
   15d12:	|  |  /----- bne.s 15d6a <removeScreenRegion+0x7a>
            killMe = *huntRegion;
   15d14:	|  |  |      movea.l 12(sp),a0
   15d18:	|  |  |      move.l (a0),8(sp)
            *huntRegion = killMe->next;
   15d1c:	|  |  |      movea.l 8(sp),a0
   15d20:	|  |  |      move.l 32(a0),d0
   15d24:	|  |  |      movea.l 12(sp),a0
   15d28:	|  |  |      move.l d0,(a0)
            removeObjectType(killMe->thisType);
   15d2a:	|  |  |      movea.l 8(sp),a0
   15d2e:	|  |  |      move.l 28(a0),d0
   15d32:	|  |  |      move.l d0,-(sp)
   15d34:	|  |  |      jsr d9f8 <removeObjectType>
   15d3a:	|  |  |      addq.l #4,sp
            if (killMe == overRegion) overRegion = NULL;
   15d3c:	|  |  |      move.l 1cb96 <overRegion>,d0
   15d42:	|  |  |      cmp.l 8(sp),d0
   15d46:	|  |  |  /-- bne.s 15d4e <removeScreenRegion+0x5e>
   15d48:	|  |  |  |   clr.l 1cb96 <overRegion>
            FreeVec(killMe);
   15d4e:	|  |  |  \-> move.l 8(sp),4(sp)
   15d54:	|  |  |      move.l 1ca82 <SysBase>,d0
   15d5a:	|  |  |      movea.l d0,a6
   15d5c:	|  |  |      movea.l 4(sp),a1
   15d60:	|  |  |      jsr -690(a6)
            killMe = NULL;
   15d64:	|  |  |      clr.l 8(sp)
   15d68:	|  +--|----- bra.s 15d78 <removeScreenRegion+0x88>
        } else {
            huntRegion = &((*huntRegion)->next);
   15d6a:	|  |  \----> movea.l 12(sp),a0
   15d6e:	|  |         move.l (a0),d0
   15d70:	|  |         moveq #32,d1
   15d72:	|  |         add.l d0,d1
   15d74:	|  |         move.l d1,12(sp)
    while (*huntRegion) {
   15d78:	|  \-------> movea.l 12(sp),a0
   15d7c:	|            move.l (a0),d0
   15d7e:	\----------- bne.s 15d00 <removeScreenRegion+0x10>
        }
    }
}
   15d80:	             nop
   15d82:	             nop
   15d84:	             movea.l (sp)+,a6
   15d86:	             lea 12(sp),sp
   15d8a:	             rts

00015d8c <saveRegions>:

void saveRegions (BPTR fp) {
   15d8c:	       subq.l #8,sp
	int numRegions = 0;
   15d8e:	       clr.l 4(sp)
	struct screenRegion * thisRegion = allScreenRegions;
   15d92:	       move.l 1cb92 <allScreenRegions>,(sp)
	while (thisRegion) {
   15d98:	   /-- bra.s 15da4 <saveRegions+0x18>
		thisRegion = thisRegion -> next;
   15d9a:	/--|-> movea.l (sp),a0
   15d9c:	|  |   move.l 32(a0),(sp)
		numRegions ++;
   15da0:	|  |   addq.l #1,4(sp)
	while (thisRegion) {
   15da4:	|  \-> tst.l (sp)
   15da6:	\----- bne.s 15d9a <saveRegions+0xe>
	}
	put2bytes (numRegions, fp);
   15da8:	       move.l 12(sp),-(sp)
   15dac:	       move.l 8(sp),-(sp)
   15db0:	       jsr 8d0 <put2bytes>
   15db6:	       addq.l #8,sp
	thisRegion = allScreenRegions;
   15db8:	       move.l 1cb92 <allScreenRegions>,(sp)
	while (thisRegion) {
   15dbe:	/----- bra.w 15e66 <saveRegions+0xda>
		put2bytes (thisRegion -> x1, fp);
   15dc2:	|  /-> movea.l (sp),a0
   15dc4:	|  |   move.l (a0),d0
   15dc6:	|  |   move.l 12(sp),-(sp)
   15dca:	|  |   move.l d0,-(sp)
   15dcc:	|  |   jsr 8d0 <put2bytes>
   15dd2:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> y1, fp);
   15dd4:	|  |   movea.l (sp),a0
   15dd6:	|  |   move.l 4(a0),d0
   15dda:	|  |   move.l 12(sp),-(sp)
   15dde:	|  |   move.l d0,-(sp)
   15de0:	|  |   jsr 8d0 <put2bytes>
   15de6:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> x2, fp);
   15de8:	|  |   movea.l (sp),a0
   15dea:	|  |   move.l 8(a0),d0
   15dee:	|  |   move.l 12(sp),-(sp)
   15df2:	|  |   move.l d0,-(sp)
   15df4:	|  |   jsr 8d0 <put2bytes>
   15dfa:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> y2, fp);
   15dfc:	|  |   movea.l (sp),a0
   15dfe:	|  |   move.l 12(a0),d0
   15e02:	|  |   move.l 12(sp),-(sp)
   15e06:	|  |   move.l d0,-(sp)
   15e08:	|  |   jsr 8d0 <put2bytes>
   15e0e:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> sX, fp);
   15e10:	|  |   movea.l (sp),a0
   15e12:	|  |   move.l 16(a0),d0
   15e16:	|  |   move.l 12(sp),-(sp)
   15e1a:	|  |   move.l d0,-(sp)
   15e1c:	|  |   jsr 8d0 <put2bytes>
   15e22:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> sY, fp);
   15e24:	|  |   movea.l (sp),a0
   15e26:	|  |   move.l 20(a0),d0
   15e2a:	|  |   move.l 12(sp),-(sp)
   15e2e:	|  |   move.l d0,-(sp)
   15e30:	|  |   jsr 8d0 <put2bytes>
   15e36:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> di, fp);
   15e38:	|  |   movea.l (sp),a0
   15e3a:	|  |   move.l 24(a0),d0
   15e3e:	|  |   move.l 12(sp),-(sp)
   15e42:	|  |   move.l d0,-(sp)
   15e44:	|  |   jsr 8d0 <put2bytes>
   15e4a:	|  |   addq.l #8,sp
		saveObjectRef (thisRegion -> thisType, fp);
   15e4c:	|  |   movea.l (sp),a0
   15e4e:	|  |   move.l 28(a0),d0
   15e52:	|  |   move.l 12(sp),-(sp)
   15e56:	|  |   move.l d0,-(sp)
   15e58:	|  |   jsr da98 <saveObjectRef>
   15e5e:	|  |   addq.l #8,sp

		thisRegion = thisRegion -> next;
   15e60:	|  |   movea.l (sp),a0
   15e62:	|  |   move.l 32(a0),(sp)
	while (thisRegion) {
   15e66:	\--|-> tst.l (sp)
   15e68:	   \-- bne.w 15dc2 <saveRegions+0x36>
	}
}
   15e6c:	       nop
   15e6e:	       nop
   15e70:	       addq.l #8,sp
   15e72:	       rts

00015e74 <showBoxes>:

void showBoxes () {
   15e74:	       subq.l #4,sp
	struct screenRegion * huntRegion = allScreenRegions;
   15e76:	       move.l 1cb92 <allScreenRegions>,(sp)

	while (huntRegion) {
   15e7c:	/----- bra.w 15f18 <showBoxes+0xa4>
		drawVerticalLine (huntRegion -> x1, huntRegion -> y1, huntRegion -> y2);
   15e80:	|  /-> movea.l (sp),a0
   15e82:	|  |   move.l 12(a0),d0
   15e86:	|  |   movea.l d0,a1
   15e88:	|  |   movea.l (sp),a0
   15e8a:	|  |   move.l 4(a0),d0
   15e8e:	|  |   move.l d0,d1
   15e90:	|  |   movea.l (sp),a0
   15e92:	|  |   move.l (a0),d0
   15e94:	|  |   move.l a1,-(sp)
   15e96:	|  |   move.l d1,-(sp)
   15e98:	|  |   move.l d0,-(sp)
   15e9a:	|  |   jsr d37c <drawVerticalLine>
   15ea0:	|  |   lea 12(sp),sp
		drawVerticalLine (huntRegion -> x2, huntRegion -> y1, huntRegion -> y2);
   15ea4:	|  |   movea.l (sp),a0
   15ea6:	|  |   move.l 12(a0),d0
   15eaa:	|  |   movea.l d0,a1
   15eac:	|  |   movea.l (sp),a0
   15eae:	|  |   move.l 4(a0),d0
   15eb2:	|  |   move.l d0,d1
   15eb4:	|  |   movea.l (sp),a0
   15eb6:	|  |   move.l 8(a0),d0
   15eba:	|  |   move.l a1,-(sp)
   15ebc:	|  |   move.l d1,-(sp)
   15ebe:	|  |   move.l d0,-(sp)
   15ec0:	|  |   jsr d37c <drawVerticalLine>
   15ec6:	|  |   lea 12(sp),sp
		drawHorizontalLine (huntRegion -> x1, huntRegion -> y1, huntRegion -> x2);
   15eca:	|  |   movea.l (sp),a0
   15ecc:	|  |   move.l 8(a0),d0
   15ed0:	|  |   movea.l d0,a1
   15ed2:	|  |   movea.l (sp),a0
   15ed4:	|  |   move.l 4(a0),d0
   15ed8:	|  |   move.l d0,d1
   15eda:	|  |   movea.l (sp),a0
   15edc:	|  |   move.l (a0),d0
   15ede:	|  |   move.l a1,-(sp)
   15ee0:	|  |   move.l d1,-(sp)
   15ee2:	|  |   move.l d0,-(sp)
   15ee4:	|  |   jsr d356 <drawHorizontalLine>
   15eea:	|  |   lea 12(sp),sp
		drawHorizontalLine (huntRegion -> x1, huntRegion -> y2, huntRegion -> x2);
   15eee:	|  |   movea.l (sp),a0
   15ef0:	|  |   move.l 8(a0),d0
   15ef4:	|  |   movea.l d0,a1
   15ef6:	|  |   movea.l (sp),a0
   15ef8:	|  |   move.l 12(a0),d0
   15efc:	|  |   move.l d0,d1
   15efe:	|  |   movea.l (sp),a0
   15f00:	|  |   move.l (a0),d0
   15f02:	|  |   move.l a1,-(sp)
   15f04:	|  |   move.l d1,-(sp)
   15f06:	|  |   move.l d0,-(sp)
   15f08:	|  |   jsr d356 <drawHorizontalLine>
   15f0e:	|  |   lea 12(sp),sp
		huntRegion = huntRegion -> next;
   15f12:	|  |   movea.l (sp),a0
   15f14:	|  |   move.l 32(a0),(sp)
	while (huntRegion) {
   15f18:	\--|-> tst.l (sp)
   15f1a:	   \-- bne.w 15e80 <showBoxes+0xc>
	}
   15f1e:	       nop
   15f20:	       nop
   15f22:	       addq.l #4,sp
   15f24:	       rts

00015f26 <rand>:
// Define constants for LCG
#define MULTIPLIER 1103515245UL
#define INCREMENT 12345UL
#define MODULUS 0x7FFFFFFFUL

ULONG rand() {
   15f26:	       lea -88(sp),sp
   15f2a:	       move.l a6,-(sp)
    struct timerequest *timereq;

    struct MsgPort *timerport = CreateMsgPort();
   15f2c:	       move.l 1ca82 <SysBase>,d0
   15f32:	       movea.l d0,a6
   15f34:	       jsr -666(a6)
   15f38:	       move.l d0,88(sp)
   15f3c:	       move.l 88(sp),d0
   15f40:	       move.l d0,84(sp)

    timereq = CreateIORequest(timerport, sizeof(struct timerequest));
   15f44:	       move.l 84(sp),80(sp)
   15f4a:	       moveq #40,d0
   15f4c:	       move.l d0,76(sp)
   15f50:	       move.l 1ca82 <SysBase>,d0
   15f56:	       movea.l d0,a6
   15f58:	       movea.l 80(sp),a0
   15f5c:	       move.l 76(sp),d0
   15f60:	       jsr -654(a6)
   15f64:	       move.l d0,72(sp)
   15f68:	       move.l 72(sp),d0
   15f6c:	       move.l d0,68(sp)
    struct IORequest* ioreq = (struct IORequest*)timereq;
   15f70:	       move.l 68(sp),64(sp)
    if (OpenDevice(TIMERNAME, UNIT_MICROHZ, ioreq, 0)) {
   15f76:	       move.l #106797,60(sp)
   15f7e:	       clr.l 56(sp)
   15f82:	       move.l 64(sp),52(sp)
   15f88:	       clr.l 48(sp)
   15f8c:	       move.l 1ca82 <SysBase>,d0
   15f92:	       movea.l d0,a6
   15f94:	       movea.l 60(sp),a0
   15f98:	       move.l 56(sp),d0
   15f9c:	       movea.l 52(sp),a1
   15fa0:	       move.l 48(sp),d1
   15fa4:	       jsr -444(a6)
   15fa8:	       move.b d0,47(sp)
   15fac:	       move.b 47(sp),d0
   15fb0:	   /-- beq.s 15fc6 <rand+0xa0>
        KPrintF("Unable to open timer device\n");
   15fb2:	   |   pea 1a13a <newfatal.c.307beca7+0x1e7>
   15fb8:	   |   jsr 17366 <KPrintF>
   15fbe:	   |   addq.l #4,sp
        return 0;
   15fc0:	   |   moveq #0,d0
   15fc2:	/--|-- bra.w 16080 <rand+0x15a>
    }
    struct Device* TimerBase = ioreq->io_Device;
   15fc6:	|  \-> movea.l 64(sp),a0
   15fca:	|      move.l 20(a0),42(sp)

    struct EClockVal eclock;
    ReadEClock(&eclock);
   15fd0:	|      lea 92(sp),a0
   15fd4:	|      lea -86(a0),a0
   15fd8:	|      move.l a0,38(sp)
   15fdc:	|      movea.l 42(sp),a6
   15fe0:	|      movea.l 38(sp),a0
   15fe4:	|      jsr -60(a6)
   15fe8:	|      move.l d0,34(sp)

    ULONG seed = eclock.ev_lo; // Using the lower part of EClock value as seed
   15fec:	|      move.l 10(sp),30(sp)
    seed = (seed * MULTIPLIER + INCREMENT) & 0x7fffffff; // Simple LCG
   15ff2:	|      move.l #1103515245,-(sp)
   15ff8:	|      move.l 34(sp),-(sp)
   15ffc:	|      jsr 17d1a <__mulsi3>
   16002:	|      addq.l #8,sp
   16004:	|      addi.l #12345,d0
   1600a:	|      move.l d0,d1
   1600c:	|      bclr #31,d1
   16010:	|      move.l d1,30(sp)

    // Transform the seed to a random number
    int random_number = seed % 100; // For example, a random number between 0 and 99
   16014:	|      move.l 30(sp),d0
   16018:	|      pea 64 <_start+0x64>
   1601c:	|      move.l d0,-(sp)
   1601e:	|      jsr 17df4 <__umodsi3>
   16024:	|      addq.l #8,sp
   16026:	|      move.l d0,26(sp)
    KPrintF("Random Number: %d\n", random_number);
   1602a:	|      move.l 26(sp),-(sp)
   1602e:	|      pea 1a157 <main_sludge.c.c09e4a78+0x6>
   16034:	|      jsr 17366 <KPrintF>
   1603a:	|      addq.l #8,sp

    CloseDevice(ioreq);
   1603c:	|      move.l 64(sp),22(sp)
   16042:	|      move.l 1ca82 <SysBase>,d0
   16048:	|      movea.l d0,a6
   1604a:	|      movea.l 22(sp),a1
   1604e:	|      jsr -450(a6)
    DeleteIORequest(ioreq);
   16052:	|      move.l 64(sp),18(sp)
   16058:	|      move.l 1ca82 <SysBase>,d0
   1605e:	|      movea.l d0,a6
   16060:	|      movea.l 18(sp),a0
   16064:	|      jsr -660(a6)
    DeleteMsgPort(timerport);
   16068:	|      move.l 84(sp),14(sp)
   1606e:	|      move.l 1ca82 <SysBase>,d0
   16074:	|      movea.l d0,a6
   16076:	|      movea.l 14(sp),a0
   1607a:	|      jsr -672(a6)
    return 0;
   1607e:	|      moveq #0,d0
   16080:	\----> movea.l (sp)+,a6
   16082:	       lea 88(sp),sp
   16086:	       rts

00016088 <loadBankForAnim>:
#include "sprbanks.h"
#include "support/gcc8_c_support.h"

struct loadedSpriteBank * allLoadedBanks = NULL;

struct loadedSpriteBank * loadBankForAnim (int ID) {
   16088:	             lea -20(sp),sp
   1608c:	             move.l a6,-(sp)
	// KPrintF("loadBankForAnim: Looking for sprite bank with ID %d\n", ID);	
	struct loadedSpriteBank * returnMe = allLoadedBanks;
   1608e:	             move.l 1cb9a <allLoadedBanks>,20(sp)
	while (returnMe) {
   16096:	      /----- bra.s 160c8 <loadBankForAnim+0x40>
		if (returnMe->ID == ID) {
   16098:	   /--|----> movea.l 20(sp),a0
   1609c:	   |  |      move.l (a0),d0
   1609e:	   |  |      cmp.l 28(sp),d0
   160a2:	   |  |  /-- bne.s 160be <loadBankForAnim+0x36>
			// KPrintF("loadBankForAnim: Found existing sprite bank with ID %d\n", returnMe->ID);
			returnMe->timesUsed++;
   160a4:	   |  |  |   movea.l 20(sp),a0
   160a8:	   |  |  |   move.l 4(a0),d0
   160ac:	   |  |  |   addq.l #1,d0
   160ae:	   |  |  |   movea.l 20(sp),a0
   160b2:	   |  |  |   move.l d0,4(a0)
			return returnMe;			
   160b6:	   |  |  |   move.l 20(sp),d0
   160ba:	/--|--|--|-- bra.w 16178 <loadBankForAnim+0xf0>
		}		
		returnMe = returnMe->next;
   160be:	|  |  |  \-> movea.l 20(sp),a0
   160c2:	|  |  |      move.l 22(a0),20(sp)
	while (returnMe) {
   160c8:	|  |  \----> tst.l 20(sp)
   160cc:	|  \-------- bne.s 16098 <loadBankForAnim+0x10>
	}
	returnMe = AllocVec(sizeof(struct loadedSpriteBank), MEMF_ANY);
   160ce:	|            moveq #26,d0
   160d0:	|            move.l d0,16(sp)
   160d4:	|            clr.l 12(sp)
   160d8:	|            move.l 1ca82 <SysBase>,d0
   160de:	|            movea.l d0,a6
   160e0:	|            move.l 16(sp),d0
   160e4:	|            move.l 12(sp),d1
   160e8:	|            jsr -684(a6)
   160ec:	|            move.l d0,8(sp)
   160f0:	|            move.l 8(sp),d0
   160f4:	|            move.l d0,20(sp)
	// KPrintF("loadBankForAnim: No existing sprite bank with ID %d\n", ID);
	if (returnMe) {
   160f8:	|     /----- beq.s 16176 <loadBankForAnim+0xee>
		returnMe->ID = ID;
   160fa:	|     |      movea.l 20(sp),a0
   160fe:	|     |      move.l 28(sp),(a0)
		if (loadSpriteBank(ID, &returnMe->bank)) {
   16102:	|     |      move.l 20(sp),d0
   16106:	|     |      addq.l #8,d0
   16108:	|     |      move.l d0,-(sp)
   1610a:	|     |      move.l 32(sp),-(sp)
   1610e:	|     |      jsr 8c9c <loadSpriteBank>
   16114:	|     |      addq.l #8,sp
   16116:	|     |      tst.w d0
   16118:	|     |  /-- beq.s 1614e <loadBankForAnim+0xc6>
			returnMe->timesUsed = 1;
   1611a:	|     |  |   movea.l 20(sp),a0
   1611e:	|     |  |   moveq #1,d0
   16120:	|     |  |   move.l d0,4(a0)
			returnMe->next = allLoadedBanks;
   16124:	|     |  |   move.l 1cb9a <allLoadedBanks>,d0
   1612a:	|     |  |   movea.l 20(sp),a0
   1612e:	|     |  |   move.l d0,22(a0)
			allLoadedBanks = returnMe;
   16132:	|     |  |   move.l 20(sp),1cb9a <allLoadedBanks>
			KPrintF("loadBankForAnim: New sprite bank created OK\n");
   1613a:	|     |  |   pea 1a16a <main_sludge.c.c09e4a78+0x19>
   16140:	|     |  |   jsr 17366 <KPrintF>
   16146:	|     |  |   addq.l #4,sp
			return returnMe;
   16148:	|     |  |   move.l 20(sp),d0
   1614c:	+-----|--|-- bra.s 16178 <loadBankForAnim+0xf0>
		} else {
			KPrintF("loadBankForAnim: I guess I couldn't load the sprites...\n");
   1614e:	|     |  \-> pea 1a197 <main_sludge.c.c09e4a78+0x46>
   16154:	|     |      jsr 17366 <KPrintF>
   1615a:	|     |      addq.l #4,sp
			FreeVec(returnMe);
   1615c:	|     |      move.l 20(sp),4(sp)
   16162:	|     |      move.l 1ca82 <SysBase>,d0
   16168:	|     |      movea.l d0,a6
   1616a:	|     |      movea.l 4(sp),a1
   1616e:	|     |      jsr -690(a6)
			return NULL;
   16172:	|     |      moveq #0,d0
   16174:	+-----|----- bra.s 16178 <loadBankForAnim+0xf0>
		}
	} else return NULL;
   16176:	|     \----> moveq #0,d0
}
   16178:	\----------> movea.l (sp)+,a6
   1617a:	             lea 20(sp),sp
   1617e:	             rts

00016180 <closestPointOnLine>:
#include "support/gcc8_c_support.h"
#include "line.h"

struct flor * currentFloor = NULL;

BOOL closestPointOnLine (int * closestX, int * closestY, int x1, int y1, int x2, int y2, int xP, int yP) {
   16180:	       lea -60(sp),sp
   16184:	       move.l d3,-(sp)
   16186:	       move.l d2,-(sp)
 	DOUBLE xDiff = x2 - x1;
   16188:	       move.l 88(sp),d0
   1618c:	       sub.l 80(sp),d0
   16190:	       move.l d0,-(sp)
   16192:	       jsr 17758 <__floatsidf>
   16198:	       addq.l #4,sp
   1619a:	       move.l d0,32(sp)
   1619e:	       move.l d1,36(sp)
   161a2:	       move.l 32(sp),60(sp)
   161a8:	       move.l 36(sp),64(sp)
	int yDiff = y2 - y1;
   161ae:	       move.l 92(sp),d0
   161b2:	       sub.l 84(sp),d0
   161b6:	       move.l d0,56(sp)

	DOUBLE m = xDiff * (xP - x1) + yDiff * (yP - y1);
   161ba:	       move.l 96(sp),d0
   161be:	       sub.l 80(sp),d0
   161c2:	       move.l d0,-(sp)
   161c4:	       jsr 17758 <__floatsidf>
   161ca:	       addq.l #4,sp
   161cc:	       move.l 64(sp),-(sp)
   161d0:	       move.l 64(sp),-(sp)
   161d4:	       move.l d1,-(sp)
   161d6:	       move.l d0,-(sp)
   161d8:	       jsr 177e8 <__muldf3>
   161de:	       lea 16(sp),sp
   161e2:	       move.l d0,d2
   161e4:	       move.l d1,d3
   161e6:	       move.l 100(sp),d0
   161ea:	       sub.l 84(sp),d0
   161ee:	       move.l 56(sp),-(sp)
   161f2:	       move.l d0,-(sp)
   161f4:	       jsr 17d1a <__mulsi3>
   161fa:	       addq.l #8,sp
   161fc:	       move.l d0,-(sp)
   161fe:	       jsr 17758 <__floatsidf>
   16204:	       addq.l #4,sp
   16206:	       move.l d1,-(sp)
   16208:	       move.l d0,-(sp)
   1620a:	       move.l d3,-(sp)
   1620c:	       move.l d2,-(sp)
   1620e:	       jsr 1758a <__adddf3>
   16214:	       lea 16(sp),sp
   16218:	       move.l d0,24(sp)
   1621c:	       move.l d1,28(sp)
   16220:	       move.l 24(sp),48(sp)
   16226:	       move.l 28(sp),52(sp)
	m /= (xDiff * xDiff) + (yDiff * yDiff);
   1622c:	       move.l 64(sp),-(sp)
   16230:	       move.l 64(sp),-(sp)
   16234:	       move.l 72(sp),-(sp)
   16238:	       move.l 72(sp),-(sp)
   1623c:	       jsr 177e8 <__muldf3>
   16242:	       lea 16(sp),sp
   16246:	       move.l d0,d2
   16248:	       move.l d1,d3
   1624a:	       move.l 56(sp),-(sp)
   1624e:	       move.l 60(sp),-(sp)
   16252:	       jsr 17d1a <__mulsi3>
   16258:	       addq.l #8,sp
   1625a:	       move.l d0,-(sp)
   1625c:	       jsr 17758 <__floatsidf>
   16262:	       addq.l #4,sp
   16264:	       move.l d1,-(sp)
   16266:	       move.l d0,-(sp)
   16268:	       move.l d3,-(sp)
   1626a:	       move.l d2,-(sp)
   1626c:	       jsr 1758a <__adddf3>
   16272:	       lea 16(sp),sp
   16276:	       move.l d1,-(sp)
   16278:	       move.l d0,-(sp)
   1627a:	       move.l 60(sp),-(sp)
   1627e:	       move.l 60(sp),-(sp)
   16282:	       jsr 175ec <__divdf3>
   16288:	       lea 16(sp),sp
   1628c:	       move.l d0,16(sp)
   16290:	       move.l d1,20(sp)
   16294:	       move.l 16(sp),48(sp)
   1629a:	       move.l 20(sp),52(sp)

	if (m < 0) {		
   162a0:	       clr.l -(sp)
   162a2:	       clr.l -(sp)
   162a4:	       move.l 60(sp),-(sp)
   162a8:	       move.l 60(sp),-(sp)
   162ac:	       jsr 17970 <__ltdf2>
   162b2:	       lea 16(sp),sp
   162b6:	       tst.l d0
   162b8:	   /-- bge.s 162ce <closestPointOnLine+0x14e>
		*closestX = x1;
   162ba:	   |   movea.l 72(sp),a0
   162be:	   |   move.l 80(sp),(a0)
		*closestY = y1;
   162c2:	   |   movea.l 76(sp),a0
   162c6:	   |   move.l 84(sp),(a0)
   162ca:	/--|-- bra.w 1639c <closestPointOnLine+0x21c>
	} else if (m > 1) {
   162ce:	|  \-> clr.l -(sp)
   162d0:	|      move.l #1072693248,-(sp)
   162d6:	|      move.l 60(sp),-(sp)
   162da:	|      move.l 60(sp),-(sp)
   162de:	|      jsr 178b6 <__gtdf2>
   162e4:	|      lea 16(sp),sp
   162e8:	|      tst.l d0
   162ea:	|  /-- ble.s 16300 <closestPointOnLine+0x180>
		*closestX = x2;
   162ec:	|  |   movea.l 72(sp),a0
   162f0:	|  |   move.l 88(sp),(a0)
		*closestY = y2;
   162f4:	|  |   movea.l 76(sp),a0
   162f8:	|  |   move.l 92(sp),(a0)
   162fc:	+--|-- bra.w 1639c <closestPointOnLine+0x21c>
	} else {
		DOUBLE tmp = m * xDiff; 
   16300:	|  \-> move.l 64(sp),-(sp)
   16304:	|      move.l 64(sp),-(sp)
   16308:	|      move.l 60(sp),-(sp)
   1630c:	|      move.l 60(sp),-(sp)
   16310:	|      jsr 177e8 <__muldf3>
   16316:	|      lea 16(sp),sp
   1631a:	|      move.l d0,8(sp)
   1631e:	|      move.l d1,12(sp)
   16322:	|      move.l 8(sp),40(sp)
   16328:	|      move.l 12(sp),44(sp)
		*closestX = (int) tmp;
   1632e:	|      move.l 44(sp),-(sp)
   16332:	|      move.l 44(sp),-(sp)
   16336:	|      jsr 176fa <__fixdfsi>
   1633c:	|      addq.l #8,sp
   1633e:	|      movea.l 72(sp),a0
   16342:	|      move.l d0,(a0)
		*closestX += x1;
   16344:	|      movea.l 72(sp),a0
   16348:	|      move.l (a0),d0
   1634a:	|      add.l 80(sp),d0
   1634e:	|      movea.l 72(sp),a0
   16352:	|      move.l d0,(a0)
		*closestY = m * yDiff;
   16354:	|      move.l 56(sp),-(sp)
   16358:	|      jsr 17758 <__floatsidf>
   1635e:	|      addq.l #4,sp
   16360:	|      move.l 52(sp),-(sp)
   16364:	|      move.l 52(sp),-(sp)
   16368:	|      move.l d1,-(sp)
   1636a:	|      move.l d0,-(sp)
   1636c:	|      jsr 177e8 <__muldf3>
   16372:	|      lea 16(sp),sp
   16376:	|      move.l d1,-(sp)
   16378:	|      move.l d0,-(sp)
   1637a:	|      jsr 176fa <__fixdfsi>
   16380:	|      addq.l #8,sp
   16382:	|      movea.l 76(sp),a0
   16386:	|      move.l d0,(a0)
		*closestY += y1;
   16388:	|      movea.l 76(sp),a0
   1638c:	|      move.l (a0),d0
   1638e:	|      add.l 84(sp),d0
   16392:	|      movea.l 76(sp),a0
   16396:	|      move.l d0,(a0)
		return TRUE;
   16398:	|      moveq #1,d0
   1639a:	|  /-- bra.s 1639e <closestPointOnLine+0x21e>
	}
	return FALSE;
   1639c:	\--|-> clr.w d0
}
   1639e:	   \-> move.l (sp)+,d2
   163a0:	       move.l (sp)+,d3
   163a2:	       lea 60(sp),sp
   163a6:	       rts

000163a8 <drawFloor>:

void drawFloor() {
   163a8:	                lea -12(sp),sp
   163ac:	                move.l d3,-(sp)
   163ae:	                move.l d2,-(sp)
    int i, j, nV;
    for (i = 0; i < currentFloor->numPolygons; i++) {
   163b0:	                clr.l 16(sp)
   163b4:	   /----------- bra.w 165c8 <drawFloor+0x220>
        nV = currentFloor->polygon[i].numVertices;
   163b8:	/--|----------> movea.l 1cb9e <currentFloor>,a0
   163be:	|  |            move.l 12(a0),d1
   163c2:	|  |            move.l 16(sp),d0
   163c6:	|  |            lsl.l #3,d0
   163c8:	|  |            movea.l d1,a0
   163ca:	|  |            adda.l d0,a0
   163cc:	|  |            move.l (a0),8(sp)
        if (nV > 1) {
   163d0:	|  |            moveq #1,d0
   163d2:	|  |            cmp.l 8(sp),d0
   163d6:	|  |  /-------- bge.w 165c4 <drawFloor+0x21c>
            for (j = 1; j < nV; j++) {
   163da:	|  |  |         moveq #1,d0
   163dc:	|  |  |         move.l d0,12(sp)
   163e0:	|  |  |     /-- bra.w 164da <drawFloor+0x132>
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].y,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].x,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].y);
   163e4:	|  |  |  /--|-> movea.l 1cb9e <currentFloor>,a0
   163ea:	|  |  |  |  |   move.l 4(a0),d1
   163ee:	|  |  |  |  |   movea.l 1cb9e <currentFloor>,a0
   163f4:	|  |  |  |  |   movea.l 12(a0),a0
   163f8:	|  |  |  |  |   move.l 16(sp),d0
   163fc:	|  |  |  |  |   lsl.l #3,d0
   163fe:	|  |  |  |  |   adda.l d0,a0
   16400:	|  |  |  |  |   movea.l 4(a0),a0
   16404:	|  |  |  |  |   move.l 12(sp),d0
   16408:	|  |  |  |  |   add.l d0,d0
   1640a:	|  |  |  |  |   add.l d0,d0
   1640c:	|  |  |  |  |   adda.l d0,a0
   1640e:	|  |  |  |  |   move.l (a0),d0
   16410:	|  |  |  |  |   lsl.l #3,d0
   16412:	|  |  |  |  |   movea.l d1,a0
   16414:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   16416:	|  |  |  |  |   move.l 4(a0),d2
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].x,
   1641a:	|  |  |  |  |   movea.l 1cb9e <currentFloor>,a0
   16420:	|  |  |  |  |   move.l 4(a0),d1
   16424:	|  |  |  |  |   movea.l 1cb9e <currentFloor>,a0
   1642a:	|  |  |  |  |   movea.l 12(a0),a0
   1642e:	|  |  |  |  |   move.l 16(sp),d0
   16432:	|  |  |  |  |   lsl.l #3,d0
   16434:	|  |  |  |  |   adda.l d0,a0
   16436:	|  |  |  |  |   movea.l 4(a0),a0
   1643a:	|  |  |  |  |   move.l 12(sp),d0
   1643e:	|  |  |  |  |   add.l d0,d0
   16440:	|  |  |  |  |   add.l d0,d0
   16442:	|  |  |  |  |   adda.l d0,a0
   16444:	|  |  |  |  |   move.l (a0),d0
   16446:	|  |  |  |  |   lsl.l #3,d0
   16448:	|  |  |  |  |   movea.l d1,a0
   1644a:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   1644c:	|  |  |  |  |   movea.l (a0),a1
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].y,
   1644e:	|  |  |  |  |   movea.l 1cb9e <currentFloor>,a0
   16454:	|  |  |  |  |   move.l 4(a0),d1
   16458:	|  |  |  |  |   movea.l 1cb9e <currentFloor>,a0
   1645e:	|  |  |  |  |   movea.l 12(a0),a0
   16462:	|  |  |  |  |   move.l 16(sp),d0
   16466:	|  |  |  |  |   lsl.l #3,d0
   16468:	|  |  |  |  |   adda.l d0,a0
   1646a:	|  |  |  |  |   movea.l 4(a0),a0
   1646e:	|  |  |  |  |   move.l 12(sp),d0
   16472:	|  |  |  |  |   addi.l #1073741823,d0
   16478:	|  |  |  |  |   add.l d0,d0
   1647a:	|  |  |  |  |   add.l d0,d0
   1647c:	|  |  |  |  |   adda.l d0,a0
   1647e:	|  |  |  |  |   move.l (a0),d0
   16480:	|  |  |  |  |   lsl.l #3,d0
   16482:	|  |  |  |  |   movea.l d1,a0
   16484:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   16486:	|  |  |  |  |   move.l 4(a0),d1
   1648a:	|  |  |  |  |   movea.l 1cb9e <currentFloor>,a0
   16490:	|  |  |  |  |   move.l 4(a0),d3
   16494:	|  |  |  |  |   movea.l 1cb9e <currentFloor>,a0
   1649a:	|  |  |  |  |   movea.l 12(a0),a0
   1649e:	|  |  |  |  |   move.l 16(sp),d0
   164a2:	|  |  |  |  |   lsl.l #3,d0
   164a4:	|  |  |  |  |   adda.l d0,a0
   164a6:	|  |  |  |  |   movea.l 4(a0),a0
   164aa:	|  |  |  |  |   move.l 12(sp),d0
   164ae:	|  |  |  |  |   addi.l #1073741823,d0
   164b4:	|  |  |  |  |   add.l d0,d0
   164b6:	|  |  |  |  |   add.l d0,d0
   164b8:	|  |  |  |  |   adda.l d0,a0
   164ba:	|  |  |  |  |   move.l (a0),d0
   164bc:	|  |  |  |  |   lsl.l #3,d0
   164be:	|  |  |  |  |   movea.l d3,a0
   164c0:	|  |  |  |  |   adda.l d0,a0
   164c2:	|  |  |  |  |   move.l (a0),d0
   164c4:	|  |  |  |  |   move.l d2,-(sp)
   164c6:	|  |  |  |  |   move.l a1,-(sp)
   164c8:	|  |  |  |  |   move.l d1,-(sp)
   164ca:	|  |  |  |  |   move.l d0,-(sp)
   164cc:	|  |  |  |  |   jsr 3f9c <drawLine>
   164d2:	|  |  |  |  |   lea 16(sp),sp
            for (j = 1; j < nV; j++) {
   164d6:	|  |  |  |  |   addq.l #1,12(sp)
   164da:	|  |  |  |  \-> move.l 12(sp),d0
   164de:	|  |  |  |      cmp.l 8(sp),d0
   164e2:	|  |  |  \----- blt.w 163e4 <drawFloor+0x3c>
            }
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].y,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].x,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].y);
   164e6:	|  |  |         movea.l 1cb9e <currentFloor>,a0
   164ec:	|  |  |         move.l 4(a0),d1
   164f0:	|  |  |         movea.l 1cb9e <currentFloor>,a0
   164f6:	|  |  |         movea.l 12(a0),a0
   164fa:	|  |  |         move.l 16(sp),d0
   164fe:	|  |  |         lsl.l #3,d0
   16500:	|  |  |         adda.l d0,a0
   16502:	|  |  |         movea.l 4(a0),a0
   16506:	|  |  |         move.l 8(sp),d0
   1650a:	|  |  |         addi.l #1073741823,d0
   16510:	|  |  |         add.l d0,d0
   16512:	|  |  |         add.l d0,d0
   16514:	|  |  |         adda.l d0,a0
   16516:	|  |  |         move.l (a0),d0
   16518:	|  |  |         lsl.l #3,d0
   1651a:	|  |  |         movea.l d1,a0
   1651c:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   1651e:	|  |  |         move.l 4(a0),d2
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].x,
   16522:	|  |  |         movea.l 1cb9e <currentFloor>,a0
   16528:	|  |  |         move.l 4(a0),d1
   1652c:	|  |  |         movea.l 1cb9e <currentFloor>,a0
   16532:	|  |  |         movea.l 12(a0),a0
   16536:	|  |  |         move.l 16(sp),d0
   1653a:	|  |  |         lsl.l #3,d0
   1653c:	|  |  |         adda.l d0,a0
   1653e:	|  |  |         movea.l 4(a0),a0
   16542:	|  |  |         move.l 8(sp),d0
   16546:	|  |  |         addi.l #1073741823,d0
   1654c:	|  |  |         add.l d0,d0
   1654e:	|  |  |         add.l d0,d0
   16550:	|  |  |         adda.l d0,a0
   16552:	|  |  |         move.l (a0),d0
   16554:	|  |  |         lsl.l #3,d0
   16556:	|  |  |         movea.l d1,a0
   16558:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   1655a:	|  |  |         movea.l (a0),a1
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].y,
   1655c:	|  |  |         movea.l 1cb9e <currentFloor>,a0
   16562:	|  |  |         move.l 4(a0),d1
   16566:	|  |  |         movea.l 1cb9e <currentFloor>,a0
   1656c:	|  |  |         movea.l 12(a0),a0
   16570:	|  |  |         move.l 16(sp),d0
   16574:	|  |  |         lsl.l #3,d0
   16576:	|  |  |         adda.l d0,a0
   16578:	|  |  |         movea.l 4(a0),a0
   1657c:	|  |  |         move.l (a0),d0
   1657e:	|  |  |         lsl.l #3,d0
   16580:	|  |  |         movea.l d1,a0
   16582:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   16584:	|  |  |         move.l 4(a0),d1
   16588:	|  |  |         movea.l 1cb9e <currentFloor>,a0
   1658e:	|  |  |         move.l 4(a0),d3
   16592:	|  |  |         movea.l 1cb9e <currentFloor>,a0
   16598:	|  |  |         movea.l 12(a0),a0
   1659c:	|  |  |         move.l 16(sp),d0
   165a0:	|  |  |         lsl.l #3,d0
   165a2:	|  |  |         adda.l d0,a0
   165a4:	|  |  |         movea.l 4(a0),a0
   165a8:	|  |  |         move.l (a0),d0
   165aa:	|  |  |         lsl.l #3,d0
   165ac:	|  |  |         movea.l d3,a0
   165ae:	|  |  |         adda.l d0,a0
   165b0:	|  |  |         move.l (a0),d0
   165b2:	|  |  |         move.l d2,-(sp)
   165b4:	|  |  |         move.l a1,-(sp)
   165b6:	|  |  |         move.l d1,-(sp)
   165b8:	|  |  |         move.l d0,-(sp)
   165ba:	|  |  |         jsr 3f9c <drawLine>
   165c0:	|  |  |         lea 16(sp),sp
    for (i = 0; i < currentFloor->numPolygons; i++) {
   165c4:	|  |  \-------> addq.l #1,16(sp)
   165c8:	|  \----------> movea.l 1cb9e <currentFloor>,a0
   165ce:	|               move.l 8(a0),d0
   165d2:	|               cmp.l 16(sp),d0
   165d6:	\-------------- bgt.w 163b8 <drawFloor+0x10>
        }
    }
}
   165da:	                nop
   165dc:	                nop
   165de:	                move.l (sp)+,d2
   165e0:	                move.l (sp)+,d3
   165e2:	                lea 12(sp),sp
   165e6:	                rts

000165e8 <getMatchingCorners>:

BOOL getMatchingCorners(struct floorPolygon *a, struct floorPolygon *b, int *cornerA, int *cornerB) {
   165e8:	                      lea -12(sp),sp
    int sharedVertices = 0;
   165ec:	                      clr.l 8(sp)
    int i, j;

    for (i = 0; i < a->numVertices; i++) {
   165f0:	                      clr.l 4(sp)
   165f4:	   /----------------- bra.w 16686 <getMatchingCorners+0x9e>
        for (j = 0; j < b->numVertices; j++) {
   165f8:	/--|----------------> clr.l (sp)
   165fa:	|  |     /----------- bra.s 16676 <getMatchingCorners+0x8e>
            if (a->vertexID[i] == b->vertexID[j]) {
   165fc:	|  |  /--|----------> movea.l 16(sp),a0
   16600:	|  |  |  |            move.l 4(a0),d1
   16604:	|  |  |  |            move.l 4(sp),d0
   16608:	|  |  |  |            add.l d0,d0
   1660a:	|  |  |  |            add.l d0,d0
   1660c:	|  |  |  |            movea.l d1,a0
   1660e:	|  |  |  |            adda.l d0,a0
   16610:	|  |  |  |            move.l (a0),d1
   16612:	|  |  |  |            movea.l 20(sp),a0
   16616:	|  |  |  |            movea.l 4(a0),a0
   1661a:	|  |  |  |            move.l (sp),d0
   1661c:	|  |  |  |            add.l d0,d0
   1661e:	|  |  |  |            add.l d0,d0
   16620:	|  |  |  |            adda.l d0,a0
   16622:	|  |  |  |            move.l (a0),d0
   16624:	|  |  |  |            cmp.l d1,d0
   16626:	|  |  |  |  /-------- bne.s 16674 <getMatchingCorners+0x8c>
                if (sharedVertices++) {
   16628:	|  |  |  |  |         move.l 8(sp),d0
   1662c:	|  |  |  |  |         move.l d0,d1
   1662e:	|  |  |  |  |         addq.l #1,d1
   16630:	|  |  |  |  |         move.l d1,8(sp)
   16634:	|  |  |  |  |         tst.l d0
   16636:	|  |  |  |  |     /-- beq.s 16658 <getMatchingCorners+0x70>
                    *cornerB = a->vertexID[i];
   16638:	|  |  |  |  |     |   movea.l 16(sp),a0
   1663c:	|  |  |  |  |     |   move.l 4(a0),d1
   16640:	|  |  |  |  |     |   move.l 4(sp),d0
   16644:	|  |  |  |  |     |   add.l d0,d0
   16646:	|  |  |  |  |     |   add.l d0,d0
   16648:	|  |  |  |  |     |   movea.l d1,a0
   1664a:	|  |  |  |  |     |   adda.l d0,a0
   1664c:	|  |  |  |  |     |   move.l (a0),d0
   1664e:	|  |  |  |  |     |   movea.l 28(sp),a0
   16652:	|  |  |  |  |     |   move.l d0,(a0)
                    return TRUE;
   16654:	|  |  |  |  |     |   moveq #1,d0
   16656:	|  |  |  |  |  /--|-- bra.s 16696 <getMatchingCorners+0xae>
                } else {
                    *cornerA = a->vertexID[i];
   16658:	|  |  |  |  |  |  \-> movea.l 16(sp),a0
   1665c:	|  |  |  |  |  |      move.l 4(a0),d1
   16660:	|  |  |  |  |  |      move.l 4(sp),d0
   16664:	|  |  |  |  |  |      add.l d0,d0
   16666:	|  |  |  |  |  |      add.l d0,d0
   16668:	|  |  |  |  |  |      movea.l d1,a0
   1666a:	|  |  |  |  |  |      adda.l d0,a0
   1666c:	|  |  |  |  |  |      move.l (a0),d0
   1666e:	|  |  |  |  |  |      movea.l 24(sp),a0
   16672:	|  |  |  |  |  |      move.l d0,(a0)
        for (j = 0; j < b->numVertices; j++) {
   16674:	|  |  |  |  \--|----> addq.l #1,(sp)
   16676:	|  |  |  \-----|----> movea.l 20(sp),a0
   1667a:	|  |  |        |      move.l (a0),d0
   1667c:	|  |  |        |      cmp.l (sp),d0
   1667e:	|  |  \--------|----- bgt.w 165fc <getMatchingCorners+0x14>
    for (i = 0; i < a->numVertices; i++) {
   16682:	|  |           |      addq.l #1,4(sp)
   16686:	|  \-----------|----> movea.l 16(sp),a0
   1668a:	|              |      move.l (a0),d0
   1668c:	|              |      cmp.l 4(sp),d0
   16690:	\--------------|----- bgt.w 165f8 <getMatchingCorners+0x10>
                }
            }
        }
    }

    return FALSE;
   16694:	               |      clr.w d0
}
   16696:	               \----> lea 12(sp),sp
   1669a:	                      rts

0001669c <noFloor>:



void noFloor () {
	currentFloor -> numPolygons = 0;
   1669c:	movea.l 1cb9e <currentFloor>,a0
   166a2:	clr.l 8(a0)
	currentFloor -> polygon = NULL;
   166a6:	movea.l 1cb9e <currentFloor>,a0
   166ac:	clr.l 12(a0)
	currentFloor -> vertex = NULL;
   166b0:	movea.l 1cb9e <currentFloor>,a0
   166b6:	clr.l 4(a0)
	currentFloor -> matrix = NULL;
   166ba:	movea.l 1cb9e <currentFloor>,a0
   166c0:	clr.l 16(a0)
}
   166c4:	nop
   166c6:	rts

000166c8 <inFloor>:

int inFloor (int x, int y) {
   166c8:	          subq.l #8,sp
	int i, r = -1;
   166ca:	          moveq #-1,d0
   166cc:	          move.l d0,(sp)

	for (i = 0; i < currentFloor -> numPolygons; i ++)
   166ce:	          clr.l 4(sp)
   166d2:	   /----- bra.s 16706 <inFloor+0x3e>
		if (pointInFloorPolygon (&currentFloor -> polygon[i], x, y))
   166d4:	/--|----> movea.l 1cb9e <currentFloor>,a0
   166da:	|  |      move.l 12(a0),d1
   166de:	|  |      move.l 4(sp),d0
   166e2:	|  |      lsl.l #3,d0
   166e4:	|  |      add.l d1,d0
   166e6:	|  |      move.l 16(sp),-(sp)
   166ea:	|  |      move.l 16(sp),-(sp)
   166ee:	|  |      move.l d0,-(sp)
   166f0:	|  |      jsr 168d2 <pointInFloorPolygon>
   166f6:	|  |      lea 12(sp),sp
   166fa:	|  |      tst.w d0
   166fc:	|  |  /-- beq.s 16702 <inFloor+0x3a>
			r = i;
   166fe:	|  |  |   move.l 4(sp),(sp)
	for (i = 0; i < currentFloor -> numPolygons; i ++)
   16702:	|  |  \-> addq.l #1,4(sp)
   16706:	|  \----> movea.l 1cb9e <currentFloor>,a0
   1670c:	|         move.l 8(a0),d0
   16710:	|         cmp.l 4(sp),d0
   16714:	\-------- bgt.s 166d4 <inFloor+0xc>

	return r;
   16716:	          move.l (sp),d0
}
   16718:	          addq.l #8,sp
   1671a:	          rts

0001671c <initFloor>:

BOOL initFloor () {
   1671c:	       lea -12(sp),sp
   16720:	       move.l a6,-(sp)
	currentFloor = AllocVec(sizeof(struct flor), MEMF_ANY);
   16722:	       moveq #20,d0
   16724:	       move.l d0,12(sp)
   16728:	       clr.l 8(sp)
   1672c:	       move.l 1ca82 <SysBase>,d0
   16732:	       movea.l d0,a6
   16734:	       move.l 12(sp),d0
   16738:	       move.l 8(sp),d1
   1673c:	       jsr -684(a6)
   16740:	       move.l d0,4(sp)
   16744:	       move.l 4(sp),d0
   16748:	       move.l d0,1cb9e <currentFloor>

    if(currentFloor == 0) {
   1674e:	       move.l 1cb9e <currentFloor>,d0
   16754:	/----- bne.s 16768 <initFloor+0x4c>
        KPrintF("initFloor: Could not initialize Mem");
   16756:	|      pea 1a1d0 <main_sludge.c.c09e4a78+0x7f>
   1675c:	|      jsr 17366 <KPrintF>
   16762:	|      addq.l #4,sp
        return FALSE;
   16764:	|      clr.w d0
   16766:	|  /-- bra.s 16770 <initFloor+0x54>
    }

	noFloor ();
   16768:	\--|-> jsr 1669c <noFloor>
	return TRUE;
   1676e:	   |   moveq #1,d0
}
   16770:	   \-> movea.l (sp)+,a6
   16772:	       lea 12(sp),sp
   16776:	       rts

00016778 <killFloor>:

void killFloor () {
   16778:	       lea -24(sp),sp
   1677c:	       move.l a6,-(sp)
	for (int i = 0; i < currentFloor -> numPolygons; i ++) {
   1677e:	       clr.l 24(sp)
   16782:	   /-- bra.s 167dc <killFloor+0x64>
		FreeVec(currentFloor -> polygon[i].vertexID);
   16784:	/--|-> movea.l 1cb9e <currentFloor>,a0
   1678a:	|  |   move.l 12(a0),d1
   1678e:	|  |   move.l 24(sp),d0
   16792:	|  |   lsl.l #3,d0
   16794:	|  |   movea.l d1,a0
   16796:	|  |   adda.l d0,a0
   16798:	|  |   move.l 4(a0),8(sp)
   1679e:	|  |   move.l 1ca82 <SysBase>,d0
   167a4:	|  |   movea.l d0,a6
   167a6:	|  |   movea.l 8(sp),a1
   167aa:	|  |   jsr -690(a6)
		FreeVec(currentFloor -> matrix[i]);
   167ae:	|  |   movea.l 1cb9e <currentFloor>,a0
   167b4:	|  |   move.l 16(a0),d1
   167b8:	|  |   move.l 24(sp),d0
   167bc:	|  |   add.l d0,d0
   167be:	|  |   add.l d0,d0
   167c0:	|  |   movea.l d1,a0
   167c2:	|  |   adda.l d0,a0
   167c4:	|  |   move.l (a0),4(sp)
   167c8:	|  |   move.l 1ca82 <SysBase>,d0
   167ce:	|  |   movea.l d0,a6
   167d0:	|  |   movea.l 4(sp),a1
   167d4:	|  |   jsr -690(a6)
	for (int i = 0; i < currentFloor -> numPolygons; i ++) {
   167d8:	|  |   addq.l #1,24(sp)
   167dc:	|  \-> movea.l 1cb9e <currentFloor>,a0
   167e2:	|      move.l 8(a0),d0
   167e6:	|      cmp.l 24(sp),d0
   167ea:	\----- bgt.s 16784 <killFloor+0xc>
	}
	FreeVec(currentFloor -> polygon);
   167ec:	       movea.l 1cb9e <currentFloor>,a0
   167f2:	       move.l 12(a0),20(sp)
   167f8:	       move.l 1ca82 <SysBase>,d0
   167fe:	       movea.l d0,a6
   16800:	       movea.l 20(sp),a1
   16804:	       jsr -690(a6)
	currentFloor -> polygon = NULL;
   16808:	       movea.l 1cb9e <currentFloor>,a0
   1680e:	       clr.l 12(a0)
	FreeVec(currentFloor -> vertex);
   16812:	       movea.l 1cb9e <currentFloor>,a0
   16818:	       move.l 4(a0),16(sp)
   1681e:	       move.l 1ca82 <SysBase>,d0
   16824:	       movea.l d0,a6
   16826:	       movea.l 16(sp),a1
   1682a:	       jsr -690(a6)
	currentFloor -> vertex = NULL;
   1682e:	       movea.l 1cb9e <currentFloor>,a0
   16834:	       clr.l 4(a0)
	FreeVec(currentFloor -> matrix);
   16838:	       movea.l 1cb9e <currentFloor>,a0
   1683e:	       move.l 16(a0),12(sp)
   16844:	       move.l 1ca82 <SysBase>,d0
   1684a:	       movea.l d0,a6
   1684c:	       movea.l 12(sp),a1
   16850:	       jsr -690(a6)
	currentFloor -> matrix = NULL;
   16854:	       movea.l 1cb9e <currentFloor>,a0
   1685a:	       clr.l 16(a0)
}
   1685e:	       nop
   16860:	       movea.l (sp)+,a6
   16862:	       lea 24(sp),sp
   16866:	       rts

00016868 <polysShareSide>:

BOOL polysShareSide (struct floorPolygon a, struct floorPolygon b) {
   16868:	                   lea -12(sp),sp
	int sharedVertices = 0;
   1686c:	                   clr.l 8(sp)
	int i, j;

	for (i = 0; i < a.numVertices; i ++) {
   16870:	                   clr.l 4(sp)
   16874:	   /-------------- bra.s 168c0 <polysShareSide+0x58>
		for (j = 0; j < b.numVertices; j ++) {
   16876:	/--|-------------> clr.l (sp)
   16878:	|  |     /-------- bra.s 168b4 <polysShareSide+0x4c>
			if (a.vertexID[i] == b.vertexID[j]) {
   1687a:	|  |  /--|-------> move.l 20(sp),d1
   1687e:	|  |  |  |         move.l 4(sp),d0
   16882:	|  |  |  |         add.l d0,d0
   16884:	|  |  |  |         add.l d0,d0
   16886:	|  |  |  |         movea.l d1,a0
   16888:	|  |  |  |         adda.l d0,a0
   1688a:	|  |  |  |         move.l (a0),d1
   1688c:	|  |  |  |         movea.l 28(sp),a0
   16890:	|  |  |  |         move.l (sp),d0
   16892:	|  |  |  |         add.l d0,d0
   16894:	|  |  |  |         add.l d0,d0
   16896:	|  |  |  |         adda.l d0,a0
   16898:	|  |  |  |         move.l (a0),d0
   1689a:	|  |  |  |         cmp.l d1,d0
   1689c:	|  |  |  |     /-- bne.s 168b2 <polysShareSide+0x4a>
				if (sharedVertices ++) return TRUE;
   1689e:	|  |  |  |     |   move.l 8(sp),d0
   168a2:	|  |  |  |     |   move.l d0,d1
   168a4:	|  |  |  |     |   addq.l #1,d1
   168a6:	|  |  |  |     |   move.l d1,8(sp)
   168aa:	|  |  |  |     |   tst.l d0
   168ac:	|  |  |  |     +-- beq.s 168b2 <polysShareSide+0x4a>
   168ae:	|  |  |  |     |   moveq #1,d0
   168b0:	|  |  |  |  /--|-- bra.s 168cc <polysShareSide+0x64>
		for (j = 0; j < b.numVertices; j ++) {
   168b2:	|  |  |  |  |  \-> addq.l #1,(sp)
   168b4:	|  |  |  \--|----> move.l 24(sp),d0
   168b8:	|  |  |     |      cmp.l (sp),d0
   168ba:	|  |  \-----|----- bgt.s 1687a <polysShareSide+0x12>
	for (i = 0; i < a.numVertices; i ++) {
   168bc:	|  |        |      addq.l #1,4(sp)
   168c0:	|  \--------|----> move.l 16(sp),d0
   168c4:	|           |      cmp.l 4(sp),d0
   168c8:	\-----------|----- bgt.s 16876 <polysShareSide+0xe>
			}
		}
	}

	return FALSE;
   168ca:	            |      clr.w d0
}
   168cc:	            \----> lea 12(sp),sp
   168d0:	                   rts

000168d2 <pointInFloorPolygon>:

BOOL pointInFloorPolygon (struct floorPolygon * floorPoly, int x, int y) {
   168d2:	             lea -28(sp),sp
   168d6:	             move.l d3,-(sp)
   168d8:	             move.l d2,-(sp)
	int i = 0, j, c = 0;
   168da:	             clr.l 32(sp)
   168de:	             clr.l 24(sp)
	float xp_i, yp_i;
	float xp_j, yp_j;

	for (j = floorPoly->numVertices - 1; i < floorPoly->numVertices; j = i++) {
   168e2:	             movea.l 40(sp),a0
   168e6:	             move.l (a0),d0
   168e8:	             move.l d0,d1
   168ea:	             subq.l #1,d1
   168ec:	             move.l d1,28(sp)
   168f0:	   /-------- bra.w 16aea <pointInFloorPolygon+0x218>

		xp_i = currentFloor->vertex[floorPoly->vertexID[i]].x;
   168f4:	/--|-------> movea.l 1cb9e <currentFloor>,a0
   168fa:	|  |         move.l 4(a0),d1
   168fe:	|  |         movea.l 40(sp),a0
   16902:	|  |         movea.l 4(a0),a0
   16906:	|  |         move.l 32(sp),d0
   1690a:	|  |         add.l d0,d0
   1690c:	|  |         add.l d0,d0
   1690e:	|  |         adda.l d0,a0
   16910:	|  |         move.l (a0),d0
   16912:	|  |         lsl.l #3,d0
   16914:	|  |         movea.l d1,a0
   16916:	|  |         adda.l d0,a0
   16918:	|  |         move.l (a0),d0
   1691a:	|  |         move.l d0,-(sp)
   1691c:	|  |         jsr 17798 <__floatsisf>
   16922:	|  |         addq.l #4,sp
   16924:	|  |         move.l d0,20(sp)
		yp_i = currentFloor->vertex[floorPoly->vertexID[i]].y;
   16928:	|  |         movea.l 1cb9e <currentFloor>,a0
   1692e:	|  |         move.l 4(a0),d1
   16932:	|  |         movea.l 40(sp),a0
   16936:	|  |         movea.l 4(a0),a0
   1693a:	|  |         move.l 32(sp),d0
   1693e:	|  |         add.l d0,d0
   16940:	|  |         add.l d0,d0
   16942:	|  |         adda.l d0,a0
   16944:	|  |         move.l (a0),d0
   16946:	|  |         lsl.l #3,d0
   16948:	|  |         movea.l d1,a0
   1694a:	|  |         adda.l d0,a0
   1694c:	|  |         move.l 4(a0),d0
   16950:	|  |         move.l d0,-(sp)
   16952:	|  |         jsr 17798 <__floatsisf>
   16958:	|  |         addq.l #4,sp
   1695a:	|  |         move.l d0,16(sp)
		xp_j = currentFloor->vertex[floorPoly->vertexID[j]].x;
   1695e:	|  |         movea.l 1cb9e <currentFloor>,a0
   16964:	|  |         move.l 4(a0),d1
   16968:	|  |         movea.l 40(sp),a0
   1696c:	|  |         movea.l 4(a0),a0
   16970:	|  |         move.l 28(sp),d0
   16974:	|  |         add.l d0,d0
   16976:	|  |         add.l d0,d0
   16978:	|  |         adda.l d0,a0
   1697a:	|  |         move.l (a0),d0
   1697c:	|  |         lsl.l #3,d0
   1697e:	|  |         movea.l d1,a0
   16980:	|  |         adda.l d0,a0
   16982:	|  |         move.l (a0),d0
   16984:	|  |         move.l d0,-(sp)
   16986:	|  |         jsr 17798 <__floatsisf>
   1698c:	|  |         addq.l #4,sp
   1698e:	|  |         move.l d0,12(sp)
		yp_j = currentFloor->vertex[floorPoly->vertexID[j]].y;
   16992:	|  |         movea.l 1cb9e <currentFloor>,a0
   16998:	|  |         move.l 4(a0),d1
   1699c:	|  |         movea.l 40(sp),a0
   169a0:	|  |         movea.l 4(a0),a0
   169a4:	|  |         move.l 28(sp),d0
   169a8:	|  |         add.l d0,d0
   169aa:	|  |         add.l d0,d0
   169ac:	|  |         adda.l d0,a0
   169ae:	|  |         move.l (a0),d0
   169b0:	|  |         lsl.l #3,d0
   169b2:	|  |         movea.l d1,a0
   169b4:	|  |         adda.l d0,a0
   169b6:	|  |         move.l 4(a0),d0
   169ba:	|  |         move.l d0,-(sp)
   169bc:	|  |         jsr 17798 <__floatsisf>
   169c2:	|  |         addq.l #4,sp
   169c4:	|  |         move.l d0,8(sp)

		if ((((yp_i <= y) && (y < yp_j)) || ((yp_j <= y) && (y < yp_i))) &&
   169c8:	|  |         move.l 48(sp),-(sp)
   169cc:	|  |         jsr 17798 <__floatsisf>
   169d2:	|  |         addq.l #4,sp
   169d4:	|  |         move.l d0,-(sp)
   169d6:	|  |         move.l 20(sp),-(sp)
   169da:	|  |         jsr 1793a <__lesf2>
   169e0:	|  |         addq.l #8,sp
   169e2:	|  |         tst.l d0
   169e4:	|  |     /-- bgt.s 16a04 <pointInFloorPolygon+0x132>
   169e6:	|  |     |   move.l 48(sp),-(sp)
   169ea:	|  |     |   jsr 17798 <__floatsisf>
   169f0:	|  |     |   addq.l #4,sp
   169f2:	|  |     |   move.l d0,-(sp)
   169f4:	|  |     |   move.l 12(sp),-(sp)
   169f8:	|  |     |   jsr 17904 <__gtsf2>
   169fe:	|  |     |   addq.l #8,sp
   16a00:	|  |     |   tst.l d0
   16a02:	|  |  /--|-- bgt.s 16a44 <pointInFloorPolygon+0x172>
   16a04:	|  |  |  \-> move.l 48(sp),-(sp)
   16a08:	|  |  |      jsr 17798 <__floatsisf>
   16a0e:	|  |  |      addq.l #4,sp
   16a10:	|  |  |      move.l d0,-(sp)
   16a12:	|  |  |      move.l 12(sp),-(sp)
   16a16:	|  |  |      jsr 1793a <__lesf2>
   16a1c:	|  |  |      addq.l #8,sp
   16a1e:	|  |  |      tst.l d0
   16a20:	|  |  |  /-- bgt.w 16ada <pointInFloorPolygon+0x208>
   16a24:	|  |  |  |   move.l 48(sp),-(sp)
   16a28:	|  |  |  |   jsr 17798 <__floatsisf>
   16a2e:	|  |  |  |   addq.l #4,sp
   16a30:	|  |  |  |   move.l d0,-(sp)
   16a32:	|  |  |  |   move.l 20(sp),-(sp)
   16a36:	|  |  |  |   jsr 17904 <__gtsf2>
   16a3c:	|  |  |  |   addq.l #8,sp
   16a3e:	|  |  |  |   tst.l d0
   16a40:	|  |  |  +-- ble.w 16ada <pointInFloorPolygon+0x208>
			(x < (xp_j - xp_i) * (y - yp_i) / (yp_j - yp_i) + xp_i)) {
   16a44:	|  |  \--|-> move.l 44(sp),-(sp)
   16a48:	|  |     |   jsr 17798 <__floatsisf>
   16a4e:	|  |     |   addq.l #4,sp
   16a50:	|  |     |   move.l d0,d3
   16a52:	|  |     |   move.l 20(sp),-(sp)
   16a56:	|  |     |   move.l 16(sp),-(sp)
   16a5a:	|  |     |   jsr 17a8c <__subsf3>
   16a60:	|  |     |   addq.l #8,sp
   16a62:	|  |     |   move.l d0,d2
   16a64:	|  |     |   move.l 48(sp),-(sp)
   16a68:	|  |     |   jsr 17798 <__floatsisf>
   16a6e:	|  |     |   addq.l #4,sp
   16a70:	|  |     |   move.l 16(sp),-(sp)
   16a74:	|  |     |   move.l d0,-(sp)
   16a76:	|  |     |   jsr 17a8c <__subsf3>
   16a7c:	|  |     |   addq.l #8,sp
   16a7e:	|  |     |   move.l d0,-(sp)
   16a80:	|  |     |   move.l d2,-(sp)
   16a82:	|  |     |   jsr 1784a <__mulsf3>
   16a88:	|  |     |   addq.l #8,sp
   16a8a:	|  |     |   move.l d0,d2
   16a8c:	|  |     |   move.l 16(sp),-(sp)
   16a90:	|  |     |   move.l 12(sp),-(sp)
   16a94:	|  |     |   jsr 17a8c <__subsf3>
   16a9a:	|  |     |   addq.l #8,sp
   16a9c:	|  |     |   move.l d0,-(sp)
   16a9e:	|  |     |   move.l d2,-(sp)
   16aa0:	|  |     |   jsr 1764e <__divsf3>
   16aa6:	|  |     |   addq.l #8,sp
   16aa8:	|  |     |   move.l 20(sp),-(sp)
   16aac:	|  |     |   move.l d0,-(sp)
   16aae:	|  |     |   jsr 17554 <__addsf3>
   16ab4:	|  |     |   addq.l #8,sp
		if ((((yp_i <= y) && (y < yp_j)) || ((yp_j <= y) && (y < yp_i))) &&
   16ab6:	|  |     |   move.l d0,-(sp)
   16ab8:	|  |     |   move.l d3,-(sp)
   16aba:	|  |     |   jsr 179be <__ltsf2>
   16ac0:	|  |     |   addq.l #8,sp
   16ac2:	|  |     |   tst.l d0
   16ac4:	|  |     +-- bge.s 16ada <pointInFloorPolygon+0x208>

			c = !c;
   16ac6:	|  |     |   tst.l 24(sp)
   16aca:	|  |     |   seq d0
   16acc:	|  |     |   neg.b d0
   16ace:	|  |     |   move.b d0,d0
   16ad0:	|  |     |   andi.l #255,d0
   16ad6:	|  |     |   move.l d0,24(sp)
	for (j = floorPoly->numVertices - 1; i < floorPoly->numVertices; j = i++) {
   16ada:	|  |     \-> move.l 32(sp),d0
   16ade:	|  |         move.l d0,d1
   16ae0:	|  |         addq.l #1,d1
   16ae2:	|  |         move.l d1,32(sp)
   16ae6:	|  |         move.l d0,28(sp)
   16aea:	|  \-------> movea.l 40(sp),a0
   16aee:	|            move.l (a0),d0
   16af0:	|            cmp.l 32(sp),d0
   16af4:	\----------- bgt.w 168f4 <pointInFloorPolygon+0x22>
		}
	}
	return c ? TRUE : FALSE;
   16af8:	             tst.l 24(sp)
   16afc:	             sne d0
   16afe:	             neg.b d0
   16b00:	             move.b d0,d0
   16b02:	             andi.w #255,d0
}
   16b06:	             move.l (sp)+,d2
   16b08:	             move.l (sp)+,d3
   16b0a:	             lea 28(sp),sp
   16b0e:	             rts

00016b10 <setFloor>:

BOOL setFloor (int fileNum) {
   16b10:	                               lea -132(sp),sp
   16b14:	                               move.l a6,-(sp)
   16b16:	                               move.l a2,-(sp)
	int i, j;

	killFloor ();
   16b18:	                               jsr 16778 <killFloor>

	if (! openFileFromNum (fileNum)) return FALSE;
   16b1e:	                               move.l 144(sp),-(sp)
   16b22:	                               jsr 6eb0 <openFileFromNum>
   16b28:	                               addq.l #4,sp
   16b2a:	                               tst.l d0
   16b2c:	                           /-- bne.s 16b34 <setFloor+0x24>
   16b2e:	                           |   clr.w d0
   16b30:	/--------------------------|-- bra.w 17280 <setFloor+0x770>

	// Find out how many polygons there are and reserve memory

	currentFloor -> originalNum = fileNum;
   16b34:	|                          \-> movea.l 1cb9e <currentFloor>,a0
   16b3a:	|                              move.l 144(sp),(a0)
	currentFloor -> numPolygons = FGetC (bigDataFile);
   16b3e:	|                              move.l 1ca6a <bigDataFile>,118(sp)
   16b46:	|                              move.l 1ca8a <DOSBase>,d0
   16b4c:	|                              movea.l d0,a6
   16b4e:	|                              move.l 118(sp),d1
   16b52:	|                              jsr -306(a6)
   16b56:	|                              move.l d0,114(sp)
   16b5a:	|                              move.l 114(sp),d0
   16b5e:	|                              movea.l 1cb9e <currentFloor>,a0
   16b64:	|                              move.l d0,8(a0)
	currentFloor -> polygon = AllocVec(  sizeof( struct floorPolygon) * currentFloor -> numPolygons, MEMF_ANY);
   16b68:	|                              movea.l 1cb9e <currentFloor>,a0
   16b6e:	|                              move.l 8(a0),d0
   16b72:	|                              lsl.l #3,d0
   16b74:	|                              move.l d0,110(sp)
   16b78:	|                              clr.l 106(sp)
   16b7c:	|                              move.l 1ca82 <SysBase>,d0
   16b82:	|                              movea.l d0,a6
   16b84:	|                              move.l 110(sp),d0
   16b88:	|                              move.l 106(sp),d1
   16b8c:	|                              jsr -684(a6)
   16b90:	|                              move.l d0,102(sp)
   16b94:	|                              move.l 102(sp),d0
   16b98:	|                              movea.l 1cb9e <currentFloor>,a0
   16b9e:	|                              move.l d0,12(a0)
	if (!(currentFloor -> polygon)) {
   16ba2:	|                              movea.l 1cb9e <currentFloor>,a0
   16ba8:	|                              move.l 12(a0),d0
   16bac:	|                          /-- bne.s 16bc2 <setFloor+0xb2>
		KPrintF("setFloor: Cannot allocate memory");
   16bae:	|                          |   pea 1a1f4 <main_sludge.c.c09e4a78+0xa3>
   16bb4:	|                          |   jsr 17366 <KPrintF>
   16bba:	|                          |   addq.l #4,sp
		return FALSE;
   16bbc:	|                          |   clr.w d0
   16bbe:	+--------------------------|-- bra.w 17280 <setFloor+0x770>
	}

	// Read in each polygon

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16bc2:	|                          \-> clr.l 136(sp)
   16bc6:	|                    /-------- bra.w 16cde <setFloor+0x1ce>

		// Find out how many vertex IDs there are and reserve memory

		currentFloor -> polygon[i].numVertices = FGetC (bigDataFile);
   16bca:	|                 /--|-------> move.l 1ca6a <bigDataFile>,26(sp)
   16bd2:	|                 |  |         move.l 1ca8a <DOSBase>,d0
   16bd8:	|                 |  |         movea.l d0,a6
   16bda:	|                 |  |         move.l 26(sp),d1
   16bde:	|                 |  |         jsr -306(a6)
   16be2:	|                 |  |         move.l d0,22(sp)
   16be6:	|                 |  |         move.l 22(sp),d1
   16bea:	|                 |  |         movea.l 1cb9e <currentFloor>,a0
   16bf0:	|                 |  |         movea.l 12(a0),a0
   16bf4:	|                 |  |         move.l 136(sp),d0
   16bf8:	|                 |  |         lsl.l #3,d0
   16bfa:	|                 |  |         adda.l d0,a0
   16bfc:	|                 |  |         move.l d1,(a0)
		currentFloor -> polygon[i].vertexID = AllocVec(sizeof (int) * currentFloor -> polygon[i].numVertices, MEMF_ANY);
   16bfe:	|                 |  |         movea.l 1cb9e <currentFloor>,a0
   16c04:	|                 |  |         move.l 12(a0),d1
   16c08:	|                 |  |         move.l 136(sp),d0
   16c0c:	|                 |  |         lsl.l #3,d0
   16c0e:	|                 |  |         movea.l d1,a0
   16c10:	|                 |  |         adda.l d0,a0
   16c12:	|                 |  |         move.l (a0),d0
   16c14:	|                 |  |         add.l d0,d0
   16c16:	|                 |  |         add.l d0,d0
   16c18:	|                 |  |         move.l d0,18(sp)
   16c1c:	|                 |  |         clr.l 14(sp)
   16c20:	|                 |  |         move.l 1ca82 <SysBase>,d0
   16c26:	|                 |  |         movea.l d0,a6
   16c28:	|                 |  |         move.l 18(sp),d0
   16c2c:	|                 |  |         move.l 14(sp),d1
   16c30:	|                 |  |         jsr -684(a6)
   16c34:	|                 |  |         move.l d0,10(sp)
   16c38:	|                 |  |         move.l 10(sp),d1
   16c3c:	|                 |  |         movea.l 1cb9e <currentFloor>,a0
   16c42:	|                 |  |         movea.l 12(a0),a0
   16c46:	|                 |  |         move.l 136(sp),d0
   16c4a:	|                 |  |         lsl.l #3,d0
   16c4c:	|                 |  |         adda.l d0,a0
   16c4e:	|                 |  |         move.l d1,4(a0)
		if (!(currentFloor -> polygon[i].vertexID)) {
   16c52:	|                 |  |         movea.l 1cb9e <currentFloor>,a0
   16c58:	|                 |  |         move.l 12(a0),d1
   16c5c:	|                 |  |         move.l 136(sp),d0
   16c60:	|                 |  |         lsl.l #3,d0
   16c62:	|                 |  |         movea.l d1,a0
   16c64:	|                 |  |         adda.l d0,a0
   16c66:	|                 |  |         move.l 4(a0),d0
   16c6a:	|                 |  |     /-- bne.s 16c80 <setFloor+0x170>
			KPrintF("setFloor: Cannot allocate memory");
   16c6c:	|                 |  |     |   pea 1a1f4 <main_sludge.c.c09e4a78+0xa3>
   16c72:	|                 |  |     |   jsr 17366 <KPrintF>
   16c78:	|                 |  |     |   addq.l #4,sp
			return FALSE;
   16c7a:	|                 |  |     |   clr.w d0
   16c7c:	+-----------------|--|-----|-- bra.w 17280 <setFloor+0x770>
		}

		// Read in each vertex ID

		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
   16c80:	|                 |  |     \-> clr.l 132(sp)
   16c84:	|                 |  |     /-- bra.s 16cbe <setFloor+0x1ae>
			currentFloor -> polygon[i].vertexID[j] = get2bytes (bigDataFile);
   16c86:	|                 |  |  /--|-> move.l 1ca6a <bigDataFile>,d1
   16c8c:	|                 |  |  |  |   movea.l 1cb9e <currentFloor>,a0
   16c92:	|                 |  |  |  |   movea.l 12(a0),a0
   16c96:	|                 |  |  |  |   move.l 136(sp),d0
   16c9a:	|                 |  |  |  |   lsl.l #3,d0
   16c9c:	|                 |  |  |  |   adda.l d0,a0
   16c9e:	|                 |  |  |  |   movea.l 4(a0),a0
   16ca2:	|                 |  |  |  |   move.l 132(sp),d0
   16ca6:	|                 |  |  |  |   add.l d0,d0
   16ca8:	|                 |  |  |  |   add.l d0,d0
   16caa:	|                 |  |  |  |   lea (0,a0,d0.l),a2
   16cae:	|                 |  |  |  |   move.l d1,-(sp)
   16cb0:	|                 |  |  |  |   jsr 6bc <get2bytes>
   16cb6:	|                 |  |  |  |   addq.l #4,sp
   16cb8:	|                 |  |  |  |   move.l d0,(a2)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
   16cba:	|                 |  |  |  |   addq.l #1,132(sp)
   16cbe:	|                 |  |  |  \-> movea.l 1cb9e <currentFloor>,a0
   16cc4:	|                 |  |  |      move.l 12(a0),d1
   16cc8:	|                 |  |  |      move.l 136(sp),d0
   16ccc:	|                 |  |  |      lsl.l #3,d0
   16cce:	|                 |  |  |      movea.l d1,a0
   16cd0:	|                 |  |  |      adda.l d0,a0
   16cd2:	|                 |  |  |      move.l (a0),d0
   16cd4:	|                 |  |  |      cmp.l 132(sp),d0
   16cd8:	|                 |  |  \----- bgt.s 16c86 <setFloor+0x176>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16cda:	|                 |  |         addq.l #1,136(sp)
   16cde:	|                 |  \-------> movea.l 1cb9e <currentFloor>,a0
   16ce4:	|                 |            move.l 8(a0),d0
   16ce8:	|                 |            cmp.l 136(sp),d0
   16cec:	|                 \----------- bgt.w 16bca <setFloor+0xba>
		}
	}

	// Find out how many vertices there are and reserve memory

	i = get2bytes (bigDataFile);
   16cf0:	|                              move.l 1ca6a <bigDataFile>,d0
   16cf6:	|                              move.l d0,-(sp)
   16cf8:	|                              jsr 6bc <get2bytes>
   16cfe:	|                              addq.l #4,sp
   16d00:	|                              move.l d0,136(sp)
	currentFloor -> vertex = AllocVec( sizeof(struct POINT)*i,MEMF_ANY);
   16d04:	|                              move.l 136(sp),d0
   16d08:	|                              lsl.l #3,d0
   16d0a:	|                              move.l d0,98(sp)
   16d0e:	|                              clr.l 94(sp)
   16d12:	|                              move.l 1ca82 <SysBase>,d0
   16d18:	|                              movea.l d0,a6
   16d1a:	|                              move.l 98(sp),d0
   16d1e:	|                              move.l 94(sp),d1
   16d22:	|                              jsr -684(a6)
   16d26:	|                              move.l d0,90(sp)
   16d2a:	|                              move.l 90(sp),d0
   16d2e:	|                              movea.l 1cb9e <currentFloor>,a0
   16d34:	|                              move.l d0,4(a0)

	if (!(currentFloor -> vertex)) {
   16d38:	|                              movea.l 1cb9e <currentFloor>,a0
   16d3e:	|                              move.l 4(a0),d0
   16d42:	|                          /-- bne.s 16d58 <setFloor+0x248>
		KPrintF("setFloor: Cannot allocate memory");
   16d44:	|                          |   pea 1a1f4 <main_sludge.c.c09e4a78+0xa3>
   16d4a:	|                          |   jsr 17366 <KPrintF>
   16d50:	|                          |   addq.l #4,sp
		return FALSE;
   16d52:	|                          |   clr.w d0
   16d54:	+--------------------------|-- bra.w 17280 <setFloor+0x770>
	}

	for (j = 0; j < i; j ++) {
   16d58:	|                          \-> clr.l 132(sp)
   16d5c:	|                          /-- bra.s 16db0 <setFloor+0x2a0>
		currentFloor -> vertex[j].x = get2bytes (bigDataFile);
   16d5e:	|                       /--|-> move.l 1ca6a <bigDataFile>,d1
   16d64:	|                       |  |   movea.l 1cb9e <currentFloor>,a0
   16d6a:	|                       |  |   movea.l 4(a0),a0
   16d6e:	|                       |  |   move.l 132(sp),d0
   16d72:	|                       |  |   lsl.l #3,d0
   16d74:	|                       |  |   lea (0,a0,d0.l),a2
   16d78:	|                       |  |   move.l d1,-(sp)
   16d7a:	|                       |  |   jsr 6bc <get2bytes>
   16d80:	|                       |  |   addq.l #4,sp
   16d82:	|                       |  |   move.l d0,(a2)
		currentFloor -> vertex[j].y = get2bytes (bigDataFile);
   16d84:	|                       |  |   move.l 1ca6a <bigDataFile>,d1
   16d8a:	|                       |  |   movea.l 1cb9e <currentFloor>,a0
   16d90:	|                       |  |   movea.l 4(a0),a0
   16d94:	|                       |  |   move.l 132(sp),d0
   16d98:	|                       |  |   lsl.l #3,d0
   16d9a:	|                       |  |   lea (0,a0,d0.l),a2
   16d9e:	|                       |  |   move.l d1,-(sp)
   16da0:	|                       |  |   jsr 6bc <get2bytes>
   16da6:	|                       |  |   addq.l #4,sp
   16da8:	|                       |  |   move.l d0,4(a2)
	for (j = 0; j < i; j ++) {
   16dac:	|                       |  |   addq.l #1,132(sp)
   16db0:	|                       |  \-> move.l 132(sp),d0
   16db4:	|                       |      cmp.l 136(sp),d0
   16db8:	|                       \----- blt.s 16d5e <setFloor+0x24e>
	}

	finishAccess ();
   16dba:	|                              jsr 6da8 <finishAccess>

	// Now build the movement martix

	currentFloor -> matrix = AllocVec( sizeof(int) * currentFloor -> numPolygons, MEMF_ANY);
   16dc0:	|                              movea.l 1cb9e <currentFloor>,a0
   16dc6:	|                              move.l 8(a0),d0
   16dca:	|                              add.l d0,d0
   16dcc:	|                              add.l d0,d0
   16dce:	|                              move.l d0,86(sp)
   16dd2:	|                              clr.l 82(sp)
   16dd6:	|                              move.l 1ca82 <SysBase>,d0
   16ddc:	|                              movea.l d0,a6
   16dde:	|                              move.l 86(sp),d0
   16de2:	|                              move.l 82(sp),d1
   16de6:	|                              jsr -684(a6)
   16dea:	|                              move.l d0,78(sp)
   16dee:	|                              move.l 78(sp),d0
   16df2:	|                              movea.l 1cb9e <currentFloor>,a0
   16df8:	|                              move.l d0,16(a0)
	int * * distanceMatrix = AllocVec( sizeof(int) * currentFloor -> numPolygons, MEMF_ANY);
   16dfc:	|                              movea.l 1cb9e <currentFloor>,a0
   16e02:	|                              move.l 8(a0),d0
   16e06:	|                              add.l d0,d0
   16e08:	|                              add.l d0,d0
   16e0a:	|                              move.l d0,74(sp)
   16e0e:	|                              clr.l 70(sp)
   16e12:	|                              move.l 1ca82 <SysBase>,d0
   16e18:	|                              movea.l d0,a6
   16e1a:	|                              move.l 74(sp),d0
   16e1e:	|                              move.l 70(sp),d1
   16e22:	|                              jsr -684(a6)
   16e26:	|                              move.l d0,66(sp)
   16e2a:	|                              move.l 66(sp),d0
   16e2e:	|                              move.l d0,62(sp)


	if (!(currentFloor -> matrix)) {
   16e32:	|                              movea.l 1cb9e <currentFloor>,a0
   16e38:	|                              move.l 16(a0),d0
   16e3c:	|                          /-- bne.s 16e52 <setFloor+0x342>
		KPrintF("setFloor: Cannot allocate memory");
   16e3e:	|                          |   pea 1a1f4 <main_sludge.c.c09e4a78+0xa3>
   16e44:	|                          |   jsr 17366 <KPrintF>
   16e4a:	|                          |   addq.l #4,sp
		return FALSE;
   16e4c:	|                          |   clr.w d0
   16e4e:	+--------------------------|-- bra.w 17280 <setFloor+0x770>
	}

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16e52:	|                          \-> clr.l 136(sp)
   16e56:	|                    /-------- bra.w 16f7a <setFloor+0x46a>
		currentFloor -> matrix[i] = AllocVec( sizeof(int) * currentFloor -> numPolygons,MEMF_ANY);
   16e5a:	|                 /--|-------> movea.l 1cb9e <currentFloor>,a0
   16e60:	|                 |  |         move.l 8(a0),d0
   16e64:	|                 |  |         add.l d0,d0
   16e66:	|                 |  |         add.l d0,d0
   16e68:	|                 |  |         move.l d0,50(sp)
   16e6c:	|                 |  |         clr.l 46(sp)
   16e70:	|                 |  |         move.l 1ca82 <SysBase>,d0
   16e76:	|                 |  |         movea.l d0,a6
   16e78:	|                 |  |         move.l 50(sp),d0
   16e7c:	|                 |  |         move.l 46(sp),d1
   16e80:	|                 |  |         jsr -684(a6)
   16e84:	|                 |  |         move.l d0,42(sp)
   16e88:	|                 |  |         move.l 42(sp),d0
   16e8c:	|                 |  |         movea.l 1cb9e <currentFloor>,a0
   16e92:	|                 |  |         movea.l 16(a0),a0
   16e96:	|                 |  |         move.l 136(sp),d1
   16e9a:	|                 |  |         add.l d1,d1
   16e9c:	|                 |  |         add.l d1,d1
   16e9e:	|                 |  |         adda.l d1,a0
   16ea0:	|                 |  |         move.l d0,(a0)
		distanceMatrix        [i] = AllocVec( sizeof(int) * currentFloor -> numPolygons,MEMF_ANY);
   16ea2:	|                 |  |         movea.l 1cb9e <currentFloor>,a0
   16ea8:	|                 |  |         move.l 8(a0),d0
   16eac:	|                 |  |         add.l d0,d0
   16eae:	|                 |  |         add.l d0,d0
   16eb0:	|                 |  |         move.l d0,38(sp)
   16eb4:	|                 |  |         clr.l 34(sp)
   16eb8:	|                 |  |         move.l 1ca82 <SysBase>,d0
   16ebe:	|                 |  |         movea.l d0,a6
   16ec0:	|                 |  |         move.l 38(sp),d0
   16ec4:	|                 |  |         move.l 34(sp),d1
   16ec8:	|                 |  |         jsr -684(a6)
   16ecc:	|                 |  |         move.l d0,30(sp)
   16ed0:	|                 |  |         move.l 30(sp),d1
   16ed4:	|                 |  |         move.l 136(sp),d0
   16ed8:	|                 |  |         add.l d0,d0
   16eda:	|                 |  |         add.l d0,d0
   16edc:	|                 |  |         movea.l 62(sp),a0
   16ee0:	|                 |  |         adda.l d0,a0
   16ee2:	|                 |  |         move.l d1,(a0)
		if (!(currentFloor -> matrix[i])) { 
   16ee4:	|                 |  |         movea.l 1cb9e <currentFloor>,a0
   16eea:	|                 |  |         move.l 16(a0),d1
   16eee:	|                 |  |         move.l 136(sp),d0
   16ef2:	|                 |  |         add.l d0,d0
   16ef4:	|                 |  |         add.l d0,d0
   16ef6:	|                 |  |         movea.l d1,a0
   16ef8:	|                 |  |         adda.l d0,a0
   16efa:	|                 |  |         move.l (a0),d0
   16efc:	|                 |  |     /-- bne.s 16f12 <setFloor+0x402>
			KPrintF("setFloor: Cannot allocate memory");
   16efe:	|                 |  |     |   pea 1a1f4 <main_sludge.c.c09e4a78+0xa3>
   16f04:	|                 |  |     |   jsr 17366 <KPrintF>
   16f0a:	|                 |  |     |   addq.l #4,sp
			return FALSE;
   16f0c:	|                 |  |     |   clr.w d0
   16f0e:	+-----------------|--|-----|-- bra.w 17280 <setFloor+0x770>
		}
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   16f12:	|                 |  |     \-> clr.l 132(sp)
   16f16:	|                 |  |     /-- bra.s 16f66 <setFloor+0x456>
			currentFloor -> matrix[i][j] = -1;
   16f18:	|                 |  |  /--|-> movea.l 1cb9e <currentFloor>,a0
   16f1e:	|                 |  |  |  |   move.l 16(a0),d1
   16f22:	|                 |  |  |  |   move.l 136(sp),d0
   16f26:	|                 |  |  |  |   add.l d0,d0
   16f28:	|                 |  |  |  |   add.l d0,d0
   16f2a:	|                 |  |  |  |   movea.l d1,a0
   16f2c:	|                 |  |  |  |   adda.l d0,a0
   16f2e:	|                 |  |  |  |   move.l (a0),d1
   16f30:	|                 |  |  |  |   move.l 132(sp),d0
   16f34:	|                 |  |  |  |   add.l d0,d0
   16f36:	|                 |  |  |  |   add.l d0,d0
   16f38:	|                 |  |  |  |   movea.l d1,a0
   16f3a:	|                 |  |  |  |   adda.l d0,a0
   16f3c:	|                 |  |  |  |   moveq #-1,d1
   16f3e:	|                 |  |  |  |   move.l d1,(a0)
			distanceMatrix        [i][j] = 10000;
   16f40:	|                 |  |  |  |   move.l 136(sp),d0
   16f44:	|                 |  |  |  |   add.l d0,d0
   16f46:	|                 |  |  |  |   add.l d0,d0
   16f48:	|                 |  |  |  |   movea.l 62(sp),a0
   16f4c:	|                 |  |  |  |   adda.l d0,a0
   16f4e:	|                 |  |  |  |   move.l (a0),d1
   16f50:	|                 |  |  |  |   move.l 132(sp),d0
   16f54:	|                 |  |  |  |   add.l d0,d0
   16f56:	|                 |  |  |  |   add.l d0,d0
   16f58:	|                 |  |  |  |   movea.l d1,a0
   16f5a:	|                 |  |  |  |   adda.l d0,a0
   16f5c:	|                 |  |  |  |   move.l #10000,(a0)
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   16f62:	|                 |  |  |  |   addq.l #1,132(sp)
   16f66:	|                 |  |  |  \-> movea.l 1cb9e <currentFloor>,a0
   16f6c:	|                 |  |  |      move.l 8(a0),d0
   16f70:	|                 |  |  |      cmp.l 132(sp),d0
   16f74:	|                 |  |  \----- bgt.s 16f18 <setFloor+0x408>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16f76:	|                 |  |         addq.l #1,136(sp)
   16f7a:	|                 |  \-------> movea.l 1cb9e <currentFloor>,a0
   16f80:	|                 |            move.l 8(a0),d0
   16f84:	|                 |            cmp.l 136(sp),d0
   16f88:	|                 \----------- bgt.w 16e5a <setFloor+0x34a>
		}
	}

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16f8c:	|                              clr.l 136(sp)
   16f90:	|              /-------------- bra.w 17096 <setFloor+0x586>
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   16f94:	|           /--|-------------> clr.l 132(sp)
   16f98:	|           |  |     /-------- bra.w 17080 <setFloor+0x570>
			if (i != j) {
   16f9c:	|           |  |  /--|-------> move.l 136(sp),d0
   16fa0:	|           |  |  |  |         cmp.l 132(sp),d0
   16fa4:	|           |  |  |  |     /-- beq.w 17036 <setFloor+0x526>
				if (polysShareSide (currentFloor -> polygon[i], currentFloor -> polygon[j])) {
   16fa8:	|           |  |  |  |     |   movea.l 1cb9e <currentFloor>,a0
   16fae:	|           |  |  |  |     |   move.l 12(a0),d1
   16fb2:	|           |  |  |  |     |   move.l 132(sp),d0
   16fb6:	|           |  |  |  |     |   lsl.l #3,d0
   16fb8:	|           |  |  |  |     |   movea.l d1,a1
   16fba:	|           |  |  |  |     |   adda.l d0,a1
   16fbc:	|           |  |  |  |     |   movea.l 1cb9e <currentFloor>,a0
   16fc2:	|           |  |  |  |     |   move.l 12(a0),d1
   16fc6:	|           |  |  |  |     |   move.l 136(sp),d0
   16fca:	|           |  |  |  |     |   lsl.l #3,d0
   16fcc:	|           |  |  |  |     |   movea.l d1,a0
   16fce:	|           |  |  |  |     |   adda.l d0,a0
   16fd0:	|           |  |  |  |     |   move.l 4(a1),-(sp)
   16fd4:	|           |  |  |  |     |   move.l (a1),-(sp)
   16fd6:	|           |  |  |  |     |   move.l 4(a0),-(sp)
   16fda:	|           |  |  |  |     |   move.l (a0),-(sp)
   16fdc:	|           |  |  |  |     |   jsr 16868 <polysShareSide>
   16fe2:	|           |  |  |  |     |   lea 16(sp),sp
   16fe6:	|           |  |  |  |     |   tst.w d0
   16fe8:	|           |  |  |  |  /--|-- beq.w 1707c <setFloor+0x56c>
					currentFloor -> matrix[i][j] = j;
   16fec:	|           |  |  |  |  |  |   movea.l 1cb9e <currentFloor>,a0
   16ff2:	|           |  |  |  |  |  |   move.l 16(a0),d1
   16ff6:	|           |  |  |  |  |  |   move.l 136(sp),d0
   16ffa:	|           |  |  |  |  |  |   add.l d0,d0
   16ffc:	|           |  |  |  |  |  |   add.l d0,d0
   16ffe:	|           |  |  |  |  |  |   movea.l d1,a0
   17000:	|           |  |  |  |  |  |   adda.l d0,a0
   17002:	|           |  |  |  |  |  |   move.l (a0),d1
   17004:	|           |  |  |  |  |  |   move.l 132(sp),d0
   17008:	|           |  |  |  |  |  |   add.l d0,d0
   1700a:	|           |  |  |  |  |  |   add.l d0,d0
   1700c:	|           |  |  |  |  |  |   movea.l d1,a0
   1700e:	|           |  |  |  |  |  |   adda.l d0,a0
   17010:	|           |  |  |  |  |  |   move.l 132(sp),(a0)
					distanceMatrix        [i][j] = 1;
   17014:	|           |  |  |  |  |  |   move.l 136(sp),d0
   17018:	|           |  |  |  |  |  |   add.l d0,d0
   1701a:	|           |  |  |  |  |  |   add.l d0,d0
   1701c:	|           |  |  |  |  |  |   movea.l 62(sp),a0
   17020:	|           |  |  |  |  |  |   adda.l d0,a0
   17022:	|           |  |  |  |  |  |   move.l (a0),d1
   17024:	|           |  |  |  |  |  |   move.l 132(sp),d0
   17028:	|           |  |  |  |  |  |   add.l d0,d0
   1702a:	|           |  |  |  |  |  |   add.l d0,d0
   1702c:	|           |  |  |  |  |  |   movea.l d1,a0
   1702e:	|           |  |  |  |  |  |   adda.l d0,a0
   17030:	|           |  |  |  |  |  |   moveq #1,d1
   17032:	|           |  |  |  |  |  |   move.l d1,(a0)
   17034:	|           |  |  |  |  +--|-- bra.s 1707c <setFloor+0x56c>
				}
			} else {
				currentFloor -> matrix[i][j] = -2;
   17036:	|           |  |  |  |  |  \-> movea.l 1cb9e <currentFloor>,a0
   1703c:	|           |  |  |  |  |      move.l 16(a0),d1
   17040:	|           |  |  |  |  |      move.l 136(sp),d0
   17044:	|           |  |  |  |  |      add.l d0,d0
   17046:	|           |  |  |  |  |      add.l d0,d0
   17048:	|           |  |  |  |  |      movea.l d1,a0
   1704a:	|           |  |  |  |  |      adda.l d0,a0
   1704c:	|           |  |  |  |  |      move.l (a0),d1
   1704e:	|           |  |  |  |  |      move.l 132(sp),d0
   17052:	|           |  |  |  |  |      add.l d0,d0
   17054:	|           |  |  |  |  |      add.l d0,d0
   17056:	|           |  |  |  |  |      movea.l d1,a0
   17058:	|           |  |  |  |  |      adda.l d0,a0
   1705a:	|           |  |  |  |  |      moveq #-2,d0
   1705c:	|           |  |  |  |  |      move.l d0,(a0)
				distanceMatrix        [i][j] = 0;
   1705e:	|           |  |  |  |  |      move.l 136(sp),d0
   17062:	|           |  |  |  |  |      add.l d0,d0
   17064:	|           |  |  |  |  |      add.l d0,d0
   17066:	|           |  |  |  |  |      movea.l 62(sp),a0
   1706a:	|           |  |  |  |  |      adda.l d0,a0
   1706c:	|           |  |  |  |  |      move.l (a0),d1
   1706e:	|           |  |  |  |  |      move.l 132(sp),d0
   17072:	|           |  |  |  |  |      add.l d0,d0
   17074:	|           |  |  |  |  |      add.l d0,d0
   17076:	|           |  |  |  |  |      movea.l d1,a0
   17078:	|           |  |  |  |  |      adda.l d0,a0
   1707a:	|           |  |  |  |  |      clr.l (a0)
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   1707c:	|           |  |  |  |  \----> addq.l #1,132(sp)
   17080:	|           |  |  |  \-------> movea.l 1cb9e <currentFloor>,a0
   17086:	|           |  |  |            move.l 8(a0),d0
   1708a:	|           |  |  |            cmp.l 132(sp),d0
   1708e:	|           |  |  \----------- bgt.w 16f9c <setFloor+0x48c>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   17092:	|           |  |               addq.l #1,136(sp)
   17096:	|           |  \-------------> movea.l 1cb9e <currentFloor>,a0
   1709c:	|           |                  move.l 8(a0),d0
   170a0:	|           |                  cmp.l 136(sp),d0
   170a4:	|           \----------------- bgt.w 16f94 <setFloor+0x484>
			}
		}
	}

	BOOL madeChange;
	int lookForDistance = 0;
   170a8:	|                              clr.l 126(sp)

	do {
		lookForDistance ++;
   170ac:	|  /-------------------------> addq.l #1,126(sp)
//		debugMatrix ();
		madeChange = FALSE;
   170b0:	|  |                           clr.w 130(sp)
		for (i = 0; i < currentFloor -> numPolygons; i ++) {
   170b4:	|  |                           clr.l 136(sp)
   170b8:	|  |     /-------------------- bra.w 1720e <setFloor+0x6fe>
			for (j = 0; j < currentFloor -> numPolygons; j ++) {
   170bc:	|  |  /--|-------------------> clr.l 132(sp)
   170c0:	|  |  |  |     /-------------- bra.w 171f8 <setFloor+0x6e8>
				if (currentFloor -> matrix[i][j] == -1) {
   170c4:	|  |  |  |  /--|-------------> movea.l 1cb9e <currentFloor>,a0
   170ca:	|  |  |  |  |  |               move.l 16(a0),d1
   170ce:	|  |  |  |  |  |               move.l 136(sp),d0
   170d2:	|  |  |  |  |  |               add.l d0,d0
   170d4:	|  |  |  |  |  |               add.l d0,d0
   170d6:	|  |  |  |  |  |               movea.l d1,a0
   170d8:	|  |  |  |  |  |               adda.l d0,a0
   170da:	|  |  |  |  |  |               move.l (a0),d1
   170dc:	|  |  |  |  |  |               move.l 132(sp),d0
   170e0:	|  |  |  |  |  |               add.l d0,d0
   170e2:	|  |  |  |  |  |               add.l d0,d0
   170e4:	|  |  |  |  |  |               movea.l d1,a0
   170e6:	|  |  |  |  |  |               adda.l d0,a0
   170e8:	|  |  |  |  |  |               move.l (a0),d0
   170ea:	|  |  |  |  |  |               moveq #-1,d1
   170ec:	|  |  |  |  |  |               cmp.l d0,d1
   170ee:	|  |  |  |  |  |  /----------- bne.w 171f4 <setFloor+0x6e4>

					// OK, so we don't know how to get from i to j...
					for (int d = 0; d < currentFloor -> numPolygons; d ++) {
   170f2:	|  |  |  |  |  |  |            clr.l 122(sp)
   170f6:	|  |  |  |  |  |  |     /----- bra.w 171e2 <setFloor+0x6d2>
						if (d != i && d != j) {
   170fa:	|  |  |  |  |  |  |  /--|----> move.l 122(sp),d0
   170fe:	|  |  |  |  |  |  |  |  |      cmp.l 136(sp),d0
   17102:	|  |  |  |  |  |  |  |  |  /-- beq.w 171de <setFloor+0x6ce>
   17106:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d1
   1710a:	|  |  |  |  |  |  |  |  |  |   cmp.l 132(sp),d1
   1710e:	|  |  |  |  |  |  |  |  |  +-- beq.w 171de <setFloor+0x6ce>
							if (currentFloor -> matrix[i][d] == d &&
   17112:	|  |  |  |  |  |  |  |  |  |   movea.l 1cb9e <currentFloor>,a0
   17118:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   1711c:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   17120:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17122:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17124:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   17126:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   17128:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   1712a:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   1712e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17130:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17132:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   17134:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   17136:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
   17138:	|  |  |  |  |  |  |  |  |  |   cmp.l 122(sp),d0
   1713c:	|  |  |  |  |  |  |  |  |  +-- bne.w 171de <setFloor+0x6ce>
								currentFloor -> matrix[d][j] >= 0 &&
   17140:	|  |  |  |  |  |  |  |  |  |   movea.l 1cb9e <currentFloor>,a0
   17146:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   1714a:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   1714e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17150:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17152:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   17154:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   17156:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   17158:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   1715c:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1715e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17160:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   17162:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   17164:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
							if (currentFloor -> matrix[i][d] == d &&
   17166:	|  |  |  |  |  |  |  |  |  +-- bmi.s 171de <setFloor+0x6ce>
								distanceMatrix        [d][j] <= lookForDistance) {
   17168:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   1716c:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1716e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17170:	|  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a0
   17174:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   17176:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   17178:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   1717c:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1717e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17180:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   17182:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   17184:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
								currentFloor -> matrix[d][j] >= 0 &&
   17186:	|  |  |  |  |  |  |  |  |  |   cmp.l 126(sp),d0
   1718a:	|  |  |  |  |  |  |  |  |  +-- bgt.s 171de <setFloor+0x6ce>

								 currentFloor -> matrix[i][j] = d;
   1718c:	|  |  |  |  |  |  |  |  |  |   movea.l 1cb9e <currentFloor>,a0
   17192:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   17196:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   1719a:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1719c:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1719e:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   171a0:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   171a2:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   171a4:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   171a8:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   171aa:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   171ac:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   171ae:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   171b0:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),(a0)
								 distanceMatrix		  [i][j] = lookForDistance + 1;
   171b4:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   171b8:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   171ba:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   171bc:	|  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a0
   171c0:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   171c2:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   171c4:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   171c8:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   171ca:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   171cc:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   171ce:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   171d0:	|  |  |  |  |  |  |  |  |  |   move.l 126(sp),d0
   171d4:	|  |  |  |  |  |  |  |  |  |   addq.l #1,d0
   171d6:	|  |  |  |  |  |  |  |  |  |   move.l d0,(a0)
								 madeChange = TRUE;
   171d8:	|  |  |  |  |  |  |  |  |  |   move.w #1,130(sp)
					for (int d = 0; d < currentFloor -> numPolygons; d ++) {
   171de:	|  |  |  |  |  |  |  |  |  \-> addq.l #1,122(sp)
   171e2:	|  |  |  |  |  |  |  |  \----> movea.l 1cb9e <currentFloor>,a0
   171e8:	|  |  |  |  |  |  |  |         move.l 8(a0),d0
   171ec:	|  |  |  |  |  |  |  |         cmp.l 122(sp),d0
   171f0:	|  |  |  |  |  |  |  \-------- bgt.w 170fa <setFloor+0x5ea>
			for (j = 0; j < currentFloor -> numPolygons; j ++) {
   171f4:	|  |  |  |  |  |  \----------> addq.l #1,132(sp)
   171f8:	|  |  |  |  |  \-------------> movea.l 1cb9e <currentFloor>,a0
   171fe:	|  |  |  |  |                  move.l 8(a0),d0
   17202:	|  |  |  |  |                  cmp.l 132(sp),d0
   17206:	|  |  |  |  \----------------- bgt.w 170c4 <setFloor+0x5b4>
		for (i = 0; i < currentFloor -> numPolygons; i ++) {
   1720a:	|  |  |  |                     addq.l #1,136(sp)
   1720e:	|  |  |  \-------------------> movea.l 1cb9e <currentFloor>,a0
   17214:	|  |  |                        move.l 8(a0),d0
   17218:	|  |  |                        cmp.l 136(sp),d0
   1721c:	|  |  \----------------------- bgt.w 170bc <setFloor+0x5ac>
						}
					}
				}
			}
		}
	} while (madeChange);
   17220:	|  |                           tst.w 130(sp)
   17224:	|  \-------------------------- bne.w 170ac <setFloor+0x59c>

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   17228:	|                              clr.l 136(sp)
   1722c:	|                          /-- bra.s 17254 <setFloor+0x744>
		FreeVec(distanceMatrix [i]);
   1722e:	|                       /--|-> move.l 136(sp),d0
   17232:	|                       |  |   add.l d0,d0
   17234:	|                       |  |   add.l d0,d0
   17236:	|                       |  |   movea.l 62(sp),a0
   1723a:	|                       |  |   adda.l d0,a0
   1723c:	|                       |  |   move.l (a0),54(sp)
   17240:	|                       |  |   move.l 1ca82 <SysBase>,d0
   17246:	|                       |  |   movea.l d0,a6
   17248:	|                       |  |   movea.l 54(sp),a1
   1724c:	|                       |  |   jsr -690(a6)
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   17250:	|                       |  |   addq.l #1,136(sp)
   17254:	|                       |  \-> movea.l 1cb9e <currentFloor>,a0
   1725a:	|                       |      move.l 8(a0),d0
   1725e:	|                       |      cmp.l 136(sp),d0
   17262:	|                       \----- bgt.s 1722e <setFloor+0x71e>
	}

	FreeVec(distanceMatrix);
   17264:	|                              move.l 62(sp),58(sp)
   1726a:	|                              move.l 1ca82 <SysBase>,d0
   17270:	|                              movea.l d0,a6
   17272:	|                              movea.l 58(sp),a1
   17276:	|                              jsr -690(a6)
	distanceMatrix = NULL;	
   1727a:	|                              clr.l 62(sp)

	return TRUE;
   1727e:	|                              moveq #1,d0
}
   17280:	\----------------------------> movea.l (sp)+,a2
   17282:	                               movea.l (sp)+,a6
   17284:	                               lea 132(sp),sp
   17288:	                               rts

0001728a <setFloorNull>:

void setFloorNull () {
	killFloor ();
   1728a:	jsr 16778 <killFloor>
	noFloor ();
   17290:	jsr 1669c <noFloor>
   17296:	nop
   17298:	rts

0001729a <WaitVbl>:
void WaitVbl() {
   1729a:	       subq.l #8,sp
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
   1729c:	   /-> movea.l #14675972,a0
   172a2:	   |   move.l (a0),d0
   172a4:	   |   move.l d0,(sp)
		vpos&=0x1ff00;
   172a6:	   |   move.l (sp),d0
   172a8:	   |   andi.l #130816,d0
   172ae:	   |   move.l d0,(sp)
		if (vpos!=(300<<8))
   172b0:	   |   move.l (sp),d0
   172b2:	   |   cmpi.l #76800,d0
   172b8:	   \-- beq.s 1729c <WaitVbl+0x2>
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
   172ba:	/----> movea.l #14675972,a0
   172c0:	|      move.l (a0),d0
   172c2:	|      move.l d0,4(sp)
		vpos&=0x1ff00;
   172c6:	|      move.l 4(sp),d0
   172ca:	|      andi.l #130816,d0
   172d0:	|      move.l d0,4(sp)
		if (vpos==(300<<8))
   172d4:	|      move.l 4(sp),d0
   172d8:	|      cmpi.l #76800,d0
   172de:	|  /-- beq.s 172e2 <WaitVbl+0x48>
	while (1) {
   172e0:	\--|-- bra.s 172ba <WaitVbl+0x20>
			break;
   172e2:	   \-> nop
}
   172e4:	       nop
   172e6:	       addq.l #8,sp
   172e8:	       rts

000172ea <memset>:
void* memset(void *dest, int val, unsigned long len) {
   172ea:	       subq.l #4,sp
	unsigned char *ptr = (unsigned char *)dest;
   172ec:	       move.l 8(sp),(sp)
	while(len-- > 0)
   172f0:	   /-- bra.s 17302 <memset+0x18>
		*ptr++ = val;
   172f2:	/--|-> move.l (sp),d0
   172f4:	|  |   move.l d0,d1
   172f6:	|  |   addq.l #1,d1
   172f8:	|  |   move.l d1,(sp)
   172fa:	|  |   move.l 12(sp),d1
   172fe:	|  |   movea.l d0,a0
   17300:	|  |   move.b d1,(a0)
	while(len-- > 0)
   17302:	|  \-> move.l 16(sp),d0
   17306:	|      move.l d0,d1
   17308:	|      subq.l #1,d1
   1730a:	|      move.l d1,16(sp)
   1730e:	|      tst.l d0
   17310:	\----- bne.s 172f2 <memset+0x8>
	return dest;
   17312:	       move.l 8(sp),d0
}
   17316:	       addq.l #4,sp
   17318:	       rts

0001731a <memcpy>:
void* memcpy(void *dest, const void *src, unsigned long len) {
   1731a:	       subq.l #8,sp
   1731c:	       move.l d2,-(sp)
	char *d = (char *)dest;
   1731e:	       move.l 16(sp),8(sp)
	const char *s = (const char *)src;
   17324:	       move.l 20(sp),4(sp)
	while(len--)
   1732a:	   /-- bra.s 1734c <memcpy+0x32>
		*d++ = *s++;
   1732c:	/--|-> move.l 4(sp),d1
   17330:	|  |   move.l d1,d0
   17332:	|  |   addq.l #1,d0
   17334:	|  |   move.l d0,4(sp)
   17338:	|  |   move.l 8(sp),d0
   1733c:	|  |   move.l d0,d2
   1733e:	|  |   addq.l #1,d2
   17340:	|  |   move.l d2,8(sp)
   17344:	|  |   movea.l d1,a0
   17346:	|  |   move.b (a0),d1
   17348:	|  |   movea.l d0,a0
   1734a:	|  |   move.b d1,(a0)
	while(len--)
   1734c:	|  \-> move.l 24(sp),d0
   17350:	|      move.l d0,d1
   17352:	|      subq.l #1,d1
   17354:	|      move.l d1,24(sp)
   17358:	|      tst.l d0
   1735a:	\----- bne.s 1732c <memcpy+0x12>
	return dest;
   1735c:	       move.l 16(sp),d0
}
   17360:	       move.l (sp)+,d2
   17362:	       addq.l #8,sp
   17364:	       rts

00017366 <KPrintF>:
void KPrintF(const char* fmt, ...) {
   17366:	       lea -128(sp),sp
   1736a:	       movem.l a2-a3/a6,-(sp)
	if(*((UWORD *)UaeDbgLog) == 0x4eb9 || *((UWORD *)UaeDbgLog) == 0xa00e) {
   1736e:	       move.w f0ff60 <gcc8_c_support.c.1fed348d+0xec4d74>,d0
   17374:	       cmpi.w #20153,d0
   17378:	   /-- beq.s 1739c <KPrintF+0x36>
   1737a:	   |   cmpi.w #-24562,d0
   1737e:	   +-- beq.s 1739c <KPrintF+0x36>
		RawDoFmt((CONST_STRPTR)fmt, vl, KPutCharX, 0);
   17380:	   |   movea.l 1ca82 <SysBase>,a6
   17386:	   |   movea.l 144(sp),a0
   1738a:	   |   lea 148(sp),a1
   1738e:	   |   lea 17e22 <KPutCharX>,a2
   17394:	   |   suba.l a3,a3
   17396:	   |   jsr -522(a6)
}
   1739a:	/--|-- bra.s 173c6 <KPrintF+0x60>
		RawDoFmt((CONST_STRPTR)fmt, vl, PutChar, temp);
   1739c:	|  \-> movea.l 1ca82 <SysBase>,a6
   173a2:	|      movea.l 144(sp),a0
   173a6:	|      lea 148(sp),a1
   173aa:	|      lea 17e30 <PutChar>,a2
   173b0:	|      lea 12(sp),a3
   173b4:	|      jsr -522(a6)
		UaeDbgLog(86, temp);
   173b8:	|      move.l a3,-(sp)
   173ba:	|      pea 56 <_start+0x56>
   173be:	|      jsr f0ff60 <gcc8_c_support.c.1fed348d+0xec4d74>
	if(*((UWORD *)UaeDbgLog) == 0x4eb9 || *((UWORD *)UaeDbgLog) == 0xa00e) {
   173c4:	|      addq.l #8,sp
}
   173c6:	\----> movem.l (sp)+,a2-a3/a6
   173ca:	       lea 128(sp),sp
   173ce:	       rts

000173d0 <debug_cmd>:
		UaeConf(82, -1, on ? "blitter_cycle_exact false" : "blitter_cycle_exact true", 0, &outbuf, 1);
		UaeConf(82, -1, on ? "warp true" : "warp false", 0, &outbuf, 1);
	}
}

static void debug_cmd(unsigned int arg1, unsigned int arg2, unsigned int arg3, unsigned int arg4) {
   173d0:	       subq.l #4,sp
	long(*UaeLib)(unsigned int arg0, unsigned int arg1, unsigned int arg2, unsigned int arg3, unsigned int arg4);
	UaeLib = (long(*)(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int))0xf0ff60;
   173d2:	       move.l #15794016,(sp)
	if(*((UWORD *)UaeLib) == 0x4eb9 || *((UWORD *)UaeLib) == 0xa00e) {
   173d8:	       movea.l (sp),a0
   173da:	       move.w (a0),d0
   173dc:	       cmpi.w #20153,d0
   173e0:	   /-- beq.s 173ec <debug_cmd+0x1c>
   173e2:	   |   movea.l (sp),a0
   173e4:	   |   move.w (a0),d0
   173e6:	   |   cmpi.w #-24562,d0
   173ea:	/--|-- bne.s 1740a <debug_cmd+0x3a>
		UaeLib(88, arg1, arg2, arg3, arg4);
   173ec:	|  \-> move.l 20(sp),-(sp)
   173f0:	|      move.l 20(sp),-(sp)
   173f4:	|      move.l 20(sp),-(sp)
   173f8:	|      move.l 20(sp),-(sp)
   173fc:	|      pea 58 <_start+0x58>
   17400:	|      movea.l 20(sp),a0
   17404:	|      jsr (a0)
   17406:	|      lea 20(sp),sp
	}
}
   1740a:	\----> nop
   1740c:	       addq.l #4,sp
   1740e:	       rts

00017410 <my_strncpy>:
void debug_stop_idle() {
	debug_cmd(barto_cmd_set_idle, 0, 0, 0);
}

// gfx debugger
static void my_strncpy(char* destination, const char* source, unsigned long num) {
   17410:	       move.l d2,-(sp)
	while(*source && --num > 0)
   17412:	   /-- bra.s 17434 <my_strncpy+0x24>
		*destination++ = *source++;
   17414:	/--|-> move.l 12(sp),d1
   17418:	|  |   move.l d1,d0
   1741a:	|  |   addq.l #1,d0
   1741c:	|  |   move.l d0,12(sp)
   17420:	|  |   move.l 8(sp),d0
   17424:	|  |   move.l d0,d2
   17426:	|  |   addq.l #1,d2
   17428:	|  |   move.l d2,8(sp)
   1742c:	|  |   movea.l d1,a0
   1742e:	|  |   move.b (a0),d1
   17430:	|  |   movea.l d0,a0
   17432:	|  |   move.b d1,(a0)
	while(*source && --num > 0)
   17434:	|  \-> movea.l 12(sp),a0
   17438:	|      move.b (a0),d0
   1743a:	|  /-- beq.s 17442 <my_strncpy+0x32>
   1743c:	|  |   subq.l #1,16(sp)
   17440:	\--|-- bne.s 17414 <my_strncpy+0x4>
	*destination = '\0';
   17442:	   \-> movea.l 8(sp),a0
   17446:	       clr.b (a0)
}
   17448:	       nop
   1744a:	       move.l (sp)+,d2
   1744c:	       rts

0001744e <debug_register_bitmap>:

void debug_register_bitmap(const void* addr, const char* name, short width, short height, short numPlanes, unsigned short flags) {
   1744e:	    lea -60(sp),sp
   17452:	    movea.l 72(sp),a1
   17456:	    movea.l 76(sp),a0
   1745a:	    move.l 80(sp),d1
   1745e:	    move.l 84(sp),d0
   17462:	    movea.w a1,a1
   17464:	    move.w a1,8(sp)
   17468:	    movea.w a0,a0
   1746a:	    move.w a0,6(sp)
   1746e:	    move.w d1,d1
   17470:	    move.w d1,4(sp)
   17474:	    move.w d0,d0
   17476:	    move.w d0,2(sp)
	struct debug_resource resource = {
   1747a:	    lea 10(sp),a0
   1747e:	    clr.l (a0)
   17480:	    addq.l #4,a0
   17482:	    clr.l (a0)
   17484:	    addq.l #4,a0
   17486:	    clr.l (a0)
   17488:	    addq.l #4,a0
   1748a:	    clr.l (a0)
   1748c:	    addq.l #4,a0
   1748e:	    clr.l (a0)
   17490:	    addq.l #4,a0
   17492:	    clr.l (a0)
   17494:	    addq.l #4,a0
   17496:	    clr.l (a0)
   17498:	    addq.l #4,a0
   1749a:	    clr.l (a0)
   1749c:	    addq.l #4,a0
   1749e:	    clr.l (a0)
   174a0:	    addq.l #4,a0
   174a2:	    clr.l (a0)
   174a4:	    addq.l #4,a0
   174a6:	    clr.l (a0)
   174a8:	    addq.l #4,a0
   174aa:	    clr.l (a0)
   174ac:	    addq.l #4,a0
   174ae:	    clr.w (a0)
   174b0:	    addq.l #2,a0
		.address = (unsigned int)addr,
   174b2:	    move.l 64(sp),d0
	struct debug_resource resource = {
   174b6:	    move.l d0,10(sp)
		.size = width / 8 * height * numPlanes,
   174ba:	    move.w 8(sp),d0
   174be:	/-- bpl.s 174c2 <debug_register_bitmap+0x74>
   174c0:	|   addq.w #7,d0
   174c2:	\-> asr.w #3,d0
   174c4:	    movea.w d0,a0
   174c6:	    movea.w 6(sp),a1
   174ca:	    move.l a1,-(sp)
   174cc:	    move.l a0,-(sp)
   174ce:	    jsr 17d1a <__mulsi3>
   174d4:	    addq.l #8,sp
   174d6:	    movea.w 4(sp),a0
   174da:	    move.l a0,-(sp)
   174dc:	    move.l d0,-(sp)
   174de:	    jsr 17d1a <__mulsi3>
   174e4:	    addq.l #8,sp
	struct debug_resource resource = {
   174e6:	    move.l d0,14(sp)
   174ea:	    move.w 2(sp),52(sp)
   174f0:	    move.w 8(sp),54(sp)
   174f6:	    move.w 6(sp),56(sp)
   174fc:	    move.w 4(sp),58(sp)
		.type = debug_resource_type_bitmap,
		.flags = flags,
		.bitmap = { width, height, numPlanes }
	};

	if (flags & debug_resource_bitmap_masked)
   17502:	    moveq #0,d0
   17504:	    move.w 2(sp),d0
   17508:	    moveq #2,d1
   1750a:	    and.l d1,d0
   1750c:	/-- beq.s 17518 <debug_register_bitmap+0xca>
		resource.size *= 2;
   1750e:	|   move.l 14(sp),d0
   17512:	|   add.l d0,d0
   17514:	|   move.l d0,14(sp)

	my_strncpy(resource.name, name, sizeof(resource.name));
   17518:	\-> pea 20 <_start+0x20>
   1751c:	    move.l 72(sp),-(sp)
   17520:	    lea 18(sp),a0
   17524:	    move.l a0,d0
   17526:	    addq.l #8,d0
   17528:	    move.l d0,-(sp)
   1752a:	    jsr 17410 <my_strncpy>
   17530:	    lea 12(sp),sp
	debug_cmd(barto_cmd_register_resource, (unsigned int)&resource, 0, 0);
   17534:	    lea 10(sp),a0
   17538:	    clr.l -(sp)
   1753a:	    clr.l -(sp)
   1753c:	    move.l a0,-(sp)
   1753e:	    pea 4 <_start+0x4>
   17542:	    jsr 173d0 <debug_cmd>
   17548:	    lea 16(sp),sp
}
   1754c:	    nop
   1754e:	    lea 60(sp),sp
   17552:	    rts

00017554 <__addsf3>:
	};
	my_strncpy(resource.name, name, sizeof(resource.name));
	debug_cmd(barto_cmd_save, (unsigned int)&resource, 0, 0);
}

FLOAT __addsf3( FLOAT a, FLOAT b) {
   17554:	lea -12(sp),sp
   17558:	move.l a6,-(sp)
	return IEEESPAdd( a, b);
   1755a:	move.l 20(sp),12(sp)
   17560:	move.l 24(sp),8(sp)
   17566:	move.l 1ca92 <MathIeeeSingBasBase>,d0
   1756c:	movea.l d0,a6
   1756e:	move.l 12(sp),d0
   17572:	move.l 8(sp),d1
   17576:	jsr -66(a6)
   1757a:	move.l d0,4(sp)
   1757e:	move.l 4(sp),d0
}
   17582:	movea.l (sp)+,a6
   17584:	lea 12(sp),sp
   17588:	rts

0001758a <__adddf3>:

DOUBLE __adddf3( DOUBLE a, DOUBLE b) {
   1758a:	lea -32(sp),sp
   1758e:	movem.l d2-d3/a6,-(sp)
	return IEEEDPAdd( a, b);
   17592:	move.l 48(sp),36(sp)
   17598:	move.l 52(sp),40(sp)
   1759e:	move.l 56(sp),28(sp)
   175a4:	move.l 60(sp),32(sp)
   175aa:	move.l 1ca9a <MathIeeeDoubBasBase>,d0
   175b0:	movea.l d0,a6
   175b2:	move.l 36(sp),d0
   175b6:	move.l 40(sp),d1
   175ba:	move.l 28(sp),d2
   175be:	move.l 32(sp),d3
   175c2:	jsr -66(a6)
   175c6:	move.l d0,12(sp)
   175ca:	move.l d1,16(sp)
   175ce:	move.l 12(sp),20(sp)
   175d4:	move.l 16(sp),24(sp)
   175da:	move.l 20(sp),d0
   175de:	move.l 24(sp),d1
}
   175e2:	movem.l (sp)+,d2-d3/a6
   175e6:	lea 32(sp),sp
   175ea:	rts

000175ec <__divdf3>:

DOUBLE __divdf3( DOUBLE a, DOUBLE b) {
   175ec:	lea -32(sp),sp
   175f0:	movem.l d2-d3/a6,-(sp)
	return IEEEDPDiv( a, b);
   175f4:	move.l 48(sp),36(sp)
   175fa:	move.l 52(sp),40(sp)
   17600:	move.l 56(sp),28(sp)
   17606:	move.l 60(sp),32(sp)
   1760c:	move.l 1ca9a <MathIeeeDoubBasBase>,d0
   17612:	movea.l d0,a6
   17614:	move.l 36(sp),d0
   17618:	move.l 40(sp),d1
   1761c:	move.l 28(sp),d2
   17620:	move.l 32(sp),d3
   17624:	jsr -84(a6)
   17628:	move.l d0,12(sp)
   1762c:	move.l d1,16(sp)
   17630:	move.l 12(sp),20(sp)
   17636:	move.l 16(sp),24(sp)
   1763c:	move.l 20(sp),d0
   17640:	move.l 24(sp),d1
}
   17644:	movem.l (sp)+,d2-d3/a6
   17648:	lea 32(sp),sp
   1764c:	rts

0001764e <__divsf3>:

FLOAT __divsf3( FLOAT a, FLOAT b) {
   1764e:	lea -12(sp),sp
   17652:	move.l a6,-(sp)
	return IEEESPDiv( a, b);
   17654:	move.l 20(sp),12(sp)
   1765a:	move.l 24(sp),8(sp)
   17660:	move.l 1ca92 <MathIeeeSingBasBase>,d0
   17666:	movea.l d0,a6
   17668:	move.l 12(sp),d0
   1766c:	move.l 8(sp),d1
   17670:	jsr -84(a6)
   17674:	move.l d0,4(sp)
   17678:	move.l 4(sp),d0
}
   1767c:	movea.l (sp)+,a6
   1767e:	lea 12(sp),sp
   17682:	rts

00017684 <__eqsf2>:

int __eqsf2( FLOAT a, FLOAT b) {
   17684:	lea -12(sp),sp
   17688:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   1768a:	move.l 20(sp),12(sp)
   17690:	move.l 24(sp),8(sp)
   17696:	move.l 1ca92 <MathIeeeSingBasBase>,d0
   1769c:	movea.l d0,a6
   1769e:	move.l 12(sp),d0
   176a2:	move.l 8(sp),d1
   176a6:	jsr -42(a6)
   176aa:	move.l d0,4(sp)
   176ae:	move.l 4(sp),d0
}
   176b2:	movea.l (sp)+,a6
   176b4:	lea 12(sp),sp
   176b8:	rts

000176ba <__extendsfdf2>:

DOUBLE __extendsfdf2 (FLOAT a) {
   176ba:	lea -20(sp),sp
   176be:	move.l a6,-(sp)
	return IEEEDPFieee( a );
   176c0:	move.l 28(sp),20(sp)
   176c6:	move.l 1ca9e <MathIeeeDoubTransBase>,d0
   176cc:	movea.l d0,a6
   176ce:	move.l 20(sp),d0
   176d2:	jsr -108(a6)
   176d6:	move.l d0,4(sp)
   176da:	move.l d1,8(sp)
   176de:	move.l 4(sp),12(sp)
   176e4:	move.l 8(sp),16(sp)
   176ea:	move.l 12(sp),d0
   176ee:	move.l 16(sp),d1
}
   176f2:	movea.l (sp)+,a6
   176f4:	lea 20(sp),sp
   176f8:	rts

000176fa <__fixdfsi>:

LONG __fixdfsi(DOUBLE value) {
   176fa:	lea -12(sp),sp
   176fe:	move.l a6,-(sp)
	return IEEEDPFix(value);
   17700:	move.l 20(sp),8(sp)
   17706:	move.l 24(sp),12(sp)
   1770c:	move.l 1ca9a <MathIeeeDoubBasBase>,d0
   17712:	movea.l d0,a6
   17714:	move.l 8(sp),d0
   17718:	move.l 12(sp),d1
   1771c:	jsr -30(a6)
   17720:	move.l d0,4(sp)
   17724:	move.l 4(sp),d0
}
   17728:	movea.l (sp)+,a6
   1772a:	lea 12(sp),sp
   1772e:	rts

00017730 <__fixsfsi>:

LONG __fixsfsi(FLOAT value) {
   17730:	subq.l #8,sp
   17732:	move.l a6,-(sp)
	return IEEESPFix(value);
   17734:	move.l 16(sp),8(sp)
   1773a:	move.l 1ca92 <MathIeeeSingBasBase>,d0
   17740:	movea.l d0,a6
   17742:	move.l 8(sp),d0
   17746:	jsr -30(a6)
   1774a:	move.l d0,4(sp)
   1774e:	move.l 4(sp),d0
}
   17752:	movea.l (sp)+,a6
   17754:	addq.l #8,sp
   17756:	rts

00017758 <__floatsidf>:


DOUBLE __floatsidf (int i) {
   17758:	lea -20(sp),sp
   1775c:	move.l a6,-(sp)
	return IEEEDPFlt((LONG) i);  
   1775e:	move.l 28(sp),20(sp)
   17764:	move.l 1ca9a <MathIeeeDoubBasBase>,d0
   1776a:	movea.l d0,a6
   1776c:	move.l 20(sp),d0
   17770:	jsr -36(a6)
   17774:	move.l d0,4(sp)
   17778:	move.l d1,8(sp)
   1777c:	move.l 4(sp),12(sp)
   17782:	move.l 8(sp),16(sp)
   17788:	move.l 12(sp),d0
   1778c:	move.l 16(sp),d1
}
   17790:	movea.l (sp)+,a6
   17792:	lea 20(sp),sp
   17796:	rts

00017798 <__floatsisf>:

FLOAT __floatsisf(int i) {
   17798:	subq.l #8,sp
   1779a:	move.l a6,-(sp)
	return IEEESPFlt((LONG) i); 
   1779c:	move.l 16(sp),8(sp)
   177a2:	move.l 1ca92 <MathIeeeSingBasBase>,d0
   177a8:	movea.l d0,a6
   177aa:	move.l 8(sp),d0
   177ae:	jsr -36(a6)
   177b2:	move.l d0,4(sp)
   177b6:	move.l 4(sp),d0
}
   177ba:	movea.l (sp)+,a6
   177bc:	addq.l #8,sp
   177be:	rts

000177c0 <__floatunsisf>:

FLOAT __floatunsisf(unsigned int i) {	
   177c0:	subq.l #8,sp
   177c2:	move.l a6,-(sp)
	return IEEESPFlt((LONG) i); 
   177c4:	move.l 16(sp),8(sp)
   177ca:	move.l 1ca92 <MathIeeeSingBasBase>,d0
   177d0:	movea.l d0,a6
   177d2:	move.l 8(sp),d0
   177d6:	jsr -36(a6)
   177da:	move.l d0,4(sp)
   177de:	move.l 4(sp),d0
}
   177e2:	movea.l (sp)+,a6
   177e4:	addq.l #8,sp
   177e6:	rts

000177e8 <__muldf3>:

DOUBLE __muldf3( DOUBLE leftParm, DOUBLE rightParm ) {
   177e8:	lea -32(sp),sp
   177ec:	movem.l d2-d3/a6,-(sp)
	return IEEEDPMul( leftParm, rightParm);
   177f0:	move.l 48(sp),36(sp)
   177f6:	move.l 52(sp),40(sp)
   177fc:	move.l 56(sp),28(sp)
   17802:	move.l 60(sp),32(sp)
   17808:	move.l 1ca9a <MathIeeeDoubBasBase>,d0
   1780e:	movea.l d0,a6
   17810:	move.l 36(sp),d0
   17814:	move.l 40(sp),d1
   17818:	move.l 28(sp),d2
   1781c:	move.l 32(sp),d3
   17820:	jsr -78(a6)
   17824:	move.l d0,12(sp)
   17828:	move.l d1,16(sp)
   1782c:	move.l 12(sp),20(sp)
   17832:	move.l 16(sp),24(sp)
   17838:	move.l 20(sp),d0
   1783c:	move.l 24(sp),d1
}
   17840:	movem.l (sp)+,d2-d3/a6
   17844:	lea 32(sp),sp
   17848:	rts

0001784a <__mulsf3>:

 //FLOAT IEEESPMul( FLOAT leftParm, FLOAT rightParm );
FLOAT __mulsf3( FLOAT leftParm, FLOAT rightParm ) {
   1784a:	lea -12(sp),sp
   1784e:	move.l a6,-(sp)
	return IEEESPMul( leftParm, rightParm);
   17850:	move.l 20(sp),12(sp)
   17856:	move.l 24(sp),8(sp)
   1785c:	move.l 1ca92 <MathIeeeSingBasBase>,d0
   17862:	movea.l d0,a6
   17864:	move.l 12(sp),d0
   17868:	move.l 8(sp),d1
   1786c:	jsr -78(a6)
   17870:	move.l d0,4(sp)
   17874:	move.l 4(sp),d0
}
   17878:	movea.l (sp)+,a6
   1787a:	lea 12(sp),sp
   1787e:	rts

00017880 <__gesf2>:


int __gesf2( FLOAT a, FLOAT b) {
   17880:	lea -12(sp),sp
   17884:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   17886:	move.l 20(sp),12(sp)
   1788c:	move.l 24(sp),8(sp)
   17892:	move.l 1ca92 <MathIeeeSingBasBase>,d0
   17898:	movea.l d0,a6
   1789a:	move.l 12(sp),d0
   1789e:	move.l 8(sp),d1
   178a2:	jsr -42(a6)
   178a6:	move.l d0,4(sp)
   178aa:	move.l 4(sp),d0
}
   178ae:	movea.l (sp)+,a6
   178b0:	lea 12(sp),sp
   178b4:	rts

000178b6 <__gtdf2>:

int __gtdf2( DOUBLE a, DOUBLE b) {
   178b6:	lea -20(sp),sp
   178ba:	movem.l d2-d3/a6,-(sp)
	return IEEEDPCmp( a, b);
   178be:	move.l 36(sp),24(sp)
   178c4:	move.l 40(sp),28(sp)
   178ca:	move.l 44(sp),16(sp)
   178d0:	move.l 48(sp),20(sp)
   178d6:	move.l 1ca9a <MathIeeeDoubBasBase>,d0
   178dc:	movea.l d0,a6
   178de:	move.l 24(sp),d0
   178e2:	move.l 28(sp),d1
   178e6:	move.l 16(sp),d2
   178ea:	move.l 20(sp),d3
   178ee:	jsr -42(a6)
   178f2:	move.l d0,12(sp)
   178f6:	move.l 12(sp),d0
}
   178fa:	movem.l (sp)+,d2-d3/a6
   178fe:	lea 20(sp),sp
   17902:	rts

00017904 <__gtsf2>:

int __gtsf2( FLOAT a, FLOAT b) {
   17904:	lea -12(sp),sp
   17908:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   1790a:	move.l 20(sp),12(sp)
   17910:	move.l 24(sp),8(sp)
   17916:	move.l 1ca92 <MathIeeeSingBasBase>,d0
   1791c:	movea.l d0,a6
   1791e:	move.l 12(sp),d0
   17922:	move.l 8(sp),d1
   17926:	jsr -42(a6)
   1792a:	move.l d0,4(sp)
   1792e:	move.l 4(sp),d0
}
   17932:	movea.l (sp)+,a6
   17934:	lea 12(sp),sp
   17938:	rts

0001793a <__lesf2>:

int __lesf2( FLOAT a, FLOAT b) {
   1793a:	lea -12(sp),sp
   1793e:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   17940:	move.l 20(sp),12(sp)
   17946:	move.l 24(sp),8(sp)
   1794c:	move.l 1ca92 <MathIeeeSingBasBase>,d0
   17952:	movea.l d0,a6
   17954:	move.l 12(sp),d0
   17958:	move.l 8(sp),d1
   1795c:	jsr -42(a6)
   17960:	move.l d0,4(sp)
   17964:	move.l 4(sp),d0
}
   17968:	movea.l (sp)+,a6
   1796a:	lea 12(sp),sp
   1796e:	rts

00017970 <__ltdf2>:

int __ltdf2( DOUBLE a, DOUBLE b) {
   17970:	lea -20(sp),sp
   17974:	movem.l d2-d3/a6,-(sp)
	return IEEEDPCmp( a, b);
   17978:	move.l 36(sp),24(sp)
   1797e:	move.l 40(sp),28(sp)
   17984:	move.l 44(sp),16(sp)
   1798a:	move.l 48(sp),20(sp)
   17990:	move.l 1ca9a <MathIeeeDoubBasBase>,d0
   17996:	movea.l d0,a6
   17998:	move.l 24(sp),d0
   1799c:	move.l 28(sp),d1
   179a0:	move.l 16(sp),d2
   179a4:	move.l 20(sp),d3
   179a8:	jsr -42(a6)
   179ac:	move.l d0,12(sp)
   179b0:	move.l 12(sp),d0
}
   179b4:	movem.l (sp)+,d2-d3/a6
   179b8:	lea 20(sp),sp
   179bc:	rts

000179be <__ltsf2>:

int __ltsf2( FLOAT a, FLOAT b) {
   179be:	lea -12(sp),sp
   179c2:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   179c4:	move.l 20(sp),12(sp)
   179ca:	move.l 24(sp),8(sp)
   179d0:	move.l 1ca92 <MathIeeeSingBasBase>,d0
   179d6:	movea.l d0,a6
   179d8:	move.l 12(sp),d0
   179dc:	move.l 8(sp),d1
   179e0:	jsr -42(a6)
   179e4:	move.l d0,4(sp)
   179e8:	move.l 4(sp),d0
}
   179ec:	movea.l (sp)+,a6
   179ee:	lea 12(sp),sp
   179f2:	rts

000179f4 <__nesf2>:

int __nesf2( FLOAT a, FLOAT b) {
   179f4:	lea -12(sp),sp
   179f8:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   179fa:	move.l 20(sp),12(sp)
   17a00:	move.l 24(sp),8(sp)
   17a06:	move.l 1ca92 <MathIeeeSingBasBase>,d0
   17a0c:	movea.l d0,a6
   17a0e:	move.l 12(sp),d0
   17a12:	move.l 8(sp),d1
   17a16:	jsr -42(a6)
   17a1a:	move.l d0,4(sp)
   17a1e:	move.l 4(sp),d0
}
   17a22:	movea.l (sp)+,a6
   17a24:	lea 12(sp),sp
   17a28:	rts

00017a2a <__subdf3>:

DOUBLE __subdf3 (DOUBLE a, DOUBLE b) {
   17a2a:	lea -32(sp),sp
   17a2e:	movem.l d2-d3/a6,-(sp)
	return IEEEDPSub( a, b);
   17a32:	move.l 48(sp),36(sp)
   17a38:	move.l 52(sp),40(sp)
   17a3e:	move.l 56(sp),28(sp)
   17a44:	move.l 60(sp),32(sp)
   17a4a:	move.l 1ca9a <MathIeeeDoubBasBase>,d0
   17a50:	movea.l d0,a6
   17a52:	move.l 36(sp),d0
   17a56:	move.l 40(sp),d1
   17a5a:	move.l 28(sp),d2
   17a5e:	move.l 32(sp),d3
   17a62:	jsr -72(a6)
   17a66:	move.l d0,12(sp)
   17a6a:	move.l d1,16(sp)
   17a6e:	move.l 12(sp),20(sp)
   17a74:	move.l 16(sp),24(sp)
   17a7a:	move.l 20(sp),d0
   17a7e:	move.l 24(sp),d1
}
   17a82:	movem.l (sp)+,d2-d3/a6
   17a86:	lea 32(sp),sp
   17a8a:	rts

00017a8c <__subsf3>:

FLOAT __subsf3 (float a, float b) {
   17a8c:	lea -12(sp),sp
   17a90:	move.l a6,-(sp)
	return IEEESPSub( a, b);
   17a92:	move.l 20(sp),12(sp)
   17a98:	move.l 24(sp),8(sp)
   17a9e:	move.l 1ca92 <MathIeeeSingBasBase>,d0
   17aa4:	movea.l d0,a6
   17aa6:	move.l 12(sp),d0
   17aaa:	move.l 8(sp),d1
   17aae:	jsr -72(a6)
   17ab2:	move.l d0,4(sp)
   17ab6:	move.l 4(sp),d0
}
   17aba:	movea.l (sp)+,a6
   17abc:	lea 12(sp),sp
   17ac0:	rts

00017ac2 <__truncdfsf2>:

FLOAT __truncdfsf2(DOUBLE a) {
   17ac2:	lea -12(sp),sp
   17ac6:	move.l a6,-(sp)
	return IEEEDPTieee( a);
   17ac8:	move.l 20(sp),8(sp)
   17ace:	move.l 24(sp),12(sp)
   17ad4:	move.l 1ca9e <MathIeeeDoubTransBase>,d0
   17ada:	movea.l d0,a6
   17adc:	move.l 8(sp),d0
   17ae0:	move.l 12(sp),d1
   17ae4:	jsr -102(a6)
   17ae8:	move.l d0,4(sp)
   17aec:	move.l 4(sp),d0
}
   17af0:	movea.l (sp)+,a6
   17af2:	lea 12(sp),sp
   17af6:	rts

00017af8 <__fixunssfsi>:

unsigned int __fixunssfsi (float a) {
   17af8:	subq.l #8,sp
   17afa:	move.l a6,-(sp)
	return IEEESPFix(a);
   17afc:	move.l 16(sp),8(sp)
   17b02:	move.l 1ca92 <MathIeeeSingBasBase>,d0
   17b08:	movea.l d0,a6
   17b0a:	move.l 8(sp),d0
   17b0e:	jsr -30(a6)
   17b12:	move.l d0,4(sp)
   17b16:	move.l 4(sp),d0
}
   17b1a:	movea.l (sp)+,a6
   17b1c:	addq.l #8,sp
   17b1e:	rts

00017b20 <atan2f>:

FLOAT atan2f(FLOAT y, FLOAT x) {
   17b20:	       lea -24(sp),sp
   17b24:	       move.l a6,-(sp)
    if (x > 0) {
   17b26:	       clr.l -(sp)
   17b28:	       move.l 40(sp),-(sp)
   17b2c:	       jsr 17904 <__gtsf2>
   17b32:	       addq.l #8,sp
   17b34:	       tst.l d0
   17b36:	   /-- ble.s 17b68 <atan2f+0x48>
        return IEEESPAtan(y / x);
   17b38:	   |   move.l 36(sp),-(sp)
   17b3c:	   |   move.l 36(sp),-(sp)
   17b40:	   |   jsr 1764e <__divsf3>
   17b46:	   |   addq.l #8,sp
   17b48:	   |   move.l d0,8(sp)
   17b4c:	   |   move.l 1ca96 <MathIeeeSingTransBase>,d0
   17b52:	   |   movea.l d0,a6
   17b54:	   |   move.l 8(sp),d0
   17b58:	   |   jsr -30(a6)
   17b5c:	   |   move.l d0,4(sp)
   17b60:	   |   move.l 4(sp),d0
   17b64:	/--|-- bra.w 17cc8 <atan2f+0x1a8>
    } else if (x < 0 && y >= 0) {
   17b68:	|  \-> clr.l -(sp)
   17b6a:	|      move.l 40(sp),-(sp)
   17b6e:	|      jsr 179be <__ltsf2>
   17b74:	|      addq.l #8,sp
   17b76:	|      tst.l d0
   17b78:	|  /-- bge.s 17bec <atan2f+0xcc>
   17b7a:	|  |   clr.l -(sp)
   17b7c:	|  |   move.l 36(sp),-(sp)
   17b80:	|  |   jsr 17880 <__gesf2>
   17b86:	|  |   addq.l #8,sp
   17b88:	|  |   tst.l d0
   17b8a:	|  +-- blt.s 17bec <atan2f+0xcc>
        return IEEESPAtan(y / x) + PI;
   17b8c:	|  |   move.l 36(sp),-(sp)
   17b90:	|  |   move.l 36(sp),-(sp)
   17b94:	|  |   jsr 1764e <__divsf3>
   17b9a:	|  |   addq.l #8,sp
   17b9c:	|  |   move.l d0,24(sp)
   17ba0:	|  |   move.l 1ca96 <MathIeeeSingTransBase>,d0
   17ba6:	|  |   movea.l d0,a6
   17ba8:	|  |   move.l 24(sp),d0
   17bac:	|  |   jsr -30(a6)
   17bb0:	|  |   move.l d0,20(sp)
   17bb4:	|  |   move.l 20(sp),d0
   17bb8:	|  |   move.l d0,-(sp)
   17bba:	|  |   jsr 176ba <__extendsfdf2>
   17bc0:	|  |   addq.l #4,sp
   17bc2:	|  |   move.l #1413754136,-(sp)
   17bc8:	|  |   move.l #1074340347,-(sp)
   17bce:	|  |   move.l d1,-(sp)
   17bd0:	|  |   move.l d0,-(sp)
   17bd2:	|  |   jsr 1758a <__adddf3>
   17bd8:	|  |   lea 16(sp),sp
   17bdc:	|  |   move.l d1,-(sp)
   17bde:	|  |   move.l d0,-(sp)
   17be0:	|  |   jsr 17ac2 <__truncdfsf2>
   17be6:	|  |   addq.l #8,sp
   17be8:	+--|-- bra.w 17cc8 <atan2f+0x1a8>
    } else if (x < 0 && y < 0) {
   17bec:	|  \-> clr.l -(sp)
   17bee:	|      move.l 40(sp),-(sp)
   17bf2:	|      jsr 179be <__ltsf2>
   17bf8:	|      addq.l #8,sp
   17bfa:	|      tst.l d0
   17bfc:	|  /-- bge.s 17c6e <atan2f+0x14e>
   17bfe:	|  |   clr.l -(sp)
   17c00:	|  |   move.l 36(sp),-(sp)
   17c04:	|  |   jsr 179be <__ltsf2>
   17c0a:	|  |   addq.l #8,sp
   17c0c:	|  |   tst.l d0
   17c0e:	|  +-- bge.s 17c6e <atan2f+0x14e>
        return IEEESPAtan(y / x) - PI;
   17c10:	|  |   move.l 36(sp),-(sp)
   17c14:	|  |   move.l 36(sp),-(sp)
   17c18:	|  |   jsr 1764e <__divsf3>
   17c1e:	|  |   addq.l #8,sp
   17c20:	|  |   move.l d0,16(sp)
   17c24:	|  |   move.l 1ca96 <MathIeeeSingTransBase>,d0
   17c2a:	|  |   movea.l d0,a6
   17c2c:	|  |   move.l 16(sp),d0
   17c30:	|  |   jsr -30(a6)
   17c34:	|  |   move.l d0,12(sp)
   17c38:	|  |   move.l 12(sp),d0
   17c3c:	|  |   move.l d0,-(sp)
   17c3e:	|  |   jsr 176ba <__extendsfdf2>
   17c44:	|  |   addq.l #4,sp
   17c46:	|  |   move.l #1413754136,-(sp)
   17c4c:	|  |   move.l #1074340347,-(sp)
   17c52:	|  |   move.l d1,-(sp)
   17c54:	|  |   move.l d0,-(sp)
   17c56:	|  |   jsr 17a2a <__subdf3>
   17c5c:	|  |   lea 16(sp),sp
   17c60:	|  |   move.l d1,-(sp)
   17c62:	|  |   move.l d0,-(sp)
   17c64:	|  |   jsr 17ac2 <__truncdfsf2>
   17c6a:	|  |   addq.l #8,sp
   17c6c:	+--|-- bra.s 17cc8 <atan2f+0x1a8>
    } else if (x == 0 && y > 0) {
   17c6e:	|  \-> clr.l -(sp)
   17c70:	|      move.l 40(sp),-(sp)
   17c74:	|      jsr 17684 <__eqsf2>
   17c7a:	|      addq.l #8,sp
   17c7c:	|      tst.l d0
   17c7e:	|  /-- bne.s 17c9a <atan2f+0x17a>
   17c80:	|  |   clr.l -(sp)
   17c82:	|  |   move.l 36(sp),-(sp)
   17c86:	|  |   jsr 17904 <__gtsf2>
   17c8c:	|  |   addq.l #8,sp
   17c8e:	|  |   tst.l d0
   17c90:	|  +-- ble.s 17c9a <atan2f+0x17a>
        return PI / 2;
   17c92:	|  |   move.l #1070141403,d0
   17c98:	+--|-- bra.s 17cc8 <atan2f+0x1a8>
    } else if (x == 0 && y < 0) {
   17c9a:	|  \-> clr.l -(sp)
   17c9c:	|      move.l 40(sp),-(sp)
   17ca0:	|      jsr 17684 <__eqsf2>
   17ca6:	|      addq.l #8,sp
   17ca8:	|      tst.l d0
   17caa:	|  /-- bne.s 17cc6 <atan2f+0x1a6>
   17cac:	|  |   clr.l -(sp)
   17cae:	|  |   move.l 36(sp),-(sp)
   17cb2:	|  |   jsr 179be <__ltsf2>
   17cb8:	|  |   addq.l #8,sp
   17cba:	|  |   tst.l d0
   17cbc:	|  +-- bge.s 17cc6 <atan2f+0x1a6>
        return -PI / 2;
   17cbe:	|  |   move.l #-1077342245,d0
   17cc4:	+--|-- bra.s 17cc8 <atan2f+0x1a8>
    } else {
        // This case is x == 0 and y == 0, atan2(0, 0) is undefined, but often treated as 0.
        return 0;
   17cc6:	|  \-> moveq #0,d0
    }
}
   17cc8:	\----> movea.l (sp)+,a6
   17cca:	       lea 24(sp),sp
   17cce:	       rts

00017cd0 <sqrt>:

DOUBLE sqrt( DOUBLE input) {
   17cd0:	lea -24(sp),sp
   17cd4:	move.l a6,-(sp)
	return IEEEDPSqrt(input);
   17cd6:	move.l 32(sp),20(sp)
   17cdc:	move.l 36(sp),24(sp)
   17ce2:	move.l 1ca9e <MathIeeeDoubTransBase>,d0
   17ce8:	movea.l d0,a6
   17cea:	move.l 20(sp),d0
   17cee:	move.l 24(sp),d1
   17cf2:	jsr -96(a6)
   17cf6:	move.l d0,4(sp)
   17cfa:	move.l d1,8(sp)
   17cfe:	move.l 4(sp),12(sp)
   17d04:	move.l 8(sp),16(sp)
   17d0a:	move.l 12(sp),d0
   17d0e:	move.l 16(sp),d1
}
   17d12:	movea.l (sp)+,a6
   17d14:	lea 24(sp),sp
   17d18:	rts

00017d1a <__mulsi3>:
	.section .text.__mulsi3,"ax",@progbits
	.type __mulsi3, function
	.globl	__mulsi3
__mulsi3:
	.cfi_startproc
	movew	sp@(4), d0	/* x0 -> d0 */
   17d1a:	move.w 4(sp),d0
	muluw	sp@(10), d0	/* x0*y1 */
   17d1e:	mulu.w 10(sp),d0
	movew	sp@(6), d1	/* x1 -> d1 */
   17d22:	move.w 6(sp),d1
	muluw	sp@(8), d1	/* x1*y0 */
   17d26:	mulu.w 8(sp),d1
	addw	d1, d0
   17d2a:	add.w d1,d0
	swap	d0
   17d2c:	swap d0
	clrw	d0
   17d2e:	clr.w d0
	movew	sp@(6), d1	/* x1 -> d1 */
   17d30:	move.w 6(sp),d1
	muluw	sp@(10), d1	/* x1*y1 */
   17d34:	mulu.w 10(sp),d1
	addl	d1, d0
   17d38:	add.l d1,d0
	rts
   17d3a:	rts

00017d3c <__udivsi3>:
	.section .text.__udivsi3,"ax",@progbits
	.type __udivsi3, function
	.globl	__udivsi3
__udivsi3:
	.cfi_startproc
	movel	d2, sp@-
   17d3c:	       move.l d2,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	sp@(12), d1	/* d1 = divisor */
   17d3e:	       move.l 12(sp),d1
	movel	sp@(8), d0	/* d0 = dividend */
   17d42:	       move.l 8(sp),d0

	cmpl	#0x10000, d1 /* divisor >= 2 ^ 16 ?   */
   17d46:	       cmpi.l #65536,d1
	jcc	3f		/* then try next algorithm */
   17d4c:	   /-- bcc.s 17d64 <__udivsi3+0x28>
	movel	d0, d2
   17d4e:	   |   move.l d0,d2
	clrw	d2
   17d50:	   |   clr.w d2
	swap	d2
   17d52:	   |   swap d2
	divu	d1, d2          /* high quotient in lower word */
   17d54:	   |   divu.w d1,d2
	movew	d2, d0		/* save high quotient */
   17d56:	   |   move.w d2,d0
	swap	d0
   17d58:	   |   swap d0
	movew	sp@(10), d2	/* get low dividend + high rest */
   17d5a:	   |   move.w 10(sp),d2
	divu	d1, d2		/* low quotient */
   17d5e:	   |   divu.w d1,d2
	movew	d2, d0
   17d60:	   |   move.w d2,d0
	jra	6f
   17d62:	/--|-- bra.s 17d94 <__udivsi3+0x58>

3:	movel	d1, d2		/* use d2 as divisor backup */
   17d64:	|  \-> move.l d1,d2
4:	lsrl	#1, d1	/* shift divisor */
   17d66:	|  /-> lsr.l #1,d1
	lsrl	#1, d0	/* shift dividend */
   17d68:	|  |   lsr.l #1,d0
	cmpl	#0x10000, d1 /* still divisor >= 2 ^ 16 ?  */
   17d6a:	|  |   cmpi.l #65536,d1
	jcc	4b
   17d70:	|  \-- bcc.s 17d66 <__udivsi3+0x2a>
	divu	d1, d0		/* now we have 16-bit divisor */
   17d72:	|      divu.w d1,d0
	andl	#0xffff, d0 /* mask out divisor, ignore remainder */
   17d74:	|      andi.l #65535,d0

/* Multiply the 16-bit tentative quotient with the 32-bit divisor.  Because of
   the operand ranges, this might give a 33-bit product.  If this product is
   greater than the dividend, the tentative quotient was too large. */
	movel	d2, d1
   17d7a:	|      move.l d2,d1
	mulu	d0, d1		/* low part, 32 bits */
   17d7c:	|      mulu.w d0,d1
	swap	d2
   17d7e:	|      swap d2
	mulu	d0, d2		/* high part, at most 17 bits */
   17d80:	|      mulu.w d0,d2
	swap	d2		/* align high part with low part */
   17d82:	|      swap d2
	tstw	d2		/* high part 17 bits? */
   17d84:	|      tst.w d2
	jne	5f		/* if 17 bits, quotient was too large */
   17d86:	|  /-- bne.s 17d92 <__udivsi3+0x56>
	addl	d2, d1		/* add parts */
   17d88:	|  |   add.l d2,d1
	jcs	5f		/* if sum is 33 bits, quotient was too large */
   17d8a:	|  +-- bcs.s 17d92 <__udivsi3+0x56>
	cmpl	sp@(8), d1	/* compare the sum with the dividend */
   17d8c:	|  |   cmp.l 8(sp),d1
	jls	6f		/* if sum > dividend, quotient was too large */
   17d90:	+--|-- bls.s 17d94 <__udivsi3+0x58>
5:	subql	#1, d0	/* adjust quotient */
   17d92:	|  \-> subq.l #1,d0

6:	movel	sp@+, d2
   17d94:	\----> move.l (sp)+,d2
	.cfi_adjust_cfa_offset -4
	rts
   17d96:	       rts

00017d98 <__divsi3>:
	.section .text.__divsi3,"ax",@progbits
	.type __divsi3, function
	.globl	__divsi3
 __divsi3:
 	.cfi_startproc
	movel	d2, sp@-
   17d98:	    move.l d2,-(sp)
	.cfi_adjust_cfa_offset 4

	moveq	#1, d2	/* sign of result stored in d2 (=1 or =-1) */
   17d9a:	    moveq #1,d2
	movel	sp@(12), d1	/* d1 = divisor */
   17d9c:	    move.l 12(sp),d1
	jpl	1f
   17da0:	/-- bpl.s 17da6 <__divsi3+0xe>
	negl	d1
   17da2:	|   neg.l d1
	negb	d2		/* change sign because divisor <0  */
   17da4:	|   neg.b d2
1:	movel	sp@(8), d0	/* d0 = dividend */
   17da6:	\-> move.l 8(sp),d0
	jpl	2f
   17daa:	/-- bpl.s 17db0 <__divsi3+0x18>
	negl	d0
   17dac:	|   neg.l d0
	negb	d2
   17dae:	|   neg.b d2

2:	movel	d1, sp@-
   17db0:	\-> move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   17db2:	    move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__udivsi3	/* divide abs(dividend) by abs(divisor) */
   17db4:	    jsr 17d3c <__udivsi3>
	addql	#8, sp
   17dba:	    addq.l #8,sp
	.cfi_adjust_cfa_offset -8

	tstb	d2
   17dbc:	    tst.b d2
	jpl	3f
   17dbe:	/-- bpl.s 17dc2 <__divsi3+0x2a>
	negl	d0
   17dc0:	|   neg.l d0

3:	movel	sp@+, d2
   17dc2:	\-> move.l (sp)+,d2
	.cfi_adjust_cfa_offset -4
	rts
   17dc4:	    rts

00017dc6 <__modsi3>:
	.section .text.__modsi3,"ax",@progbits
	.type __modsi3, function
	.globl	__modsi3
__modsi3:
	.cfi_startproc
	movel	sp@(8), d1	/* d1 = divisor */
   17dc6:	move.l 8(sp),d1
	movel	sp@(4), d0	/* d0 = dividend */
   17dca:	move.l 4(sp),d0
	movel	d1, sp@-
   17dce:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   17dd0:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__divsi3
   17dd2:	jsr 17d98 <__divsi3>
	addql	#8, sp
   17dd8:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(8), d1	/* d1 = divisor */
   17dda:	move.l 8(sp),d1
	movel	d1, sp@-
   17dde:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   17de0:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__mulsi3	/* d0 = (a/b)*b */
   17de2:	jsr 17d1a <__mulsi3>
	addql	#8, sp
   17de8:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(4), d1	/* d1 = dividend */
   17dea:	move.l 4(sp),d1
	subl	d0, d1		/* d1 = a - (a/b)*b */
   17dee:	sub.l d0,d1
	movel	d1, d0
   17df0:	move.l d1,d0
	rts
   17df2:	rts

00017df4 <__umodsi3>:
	.section .text.__umodsi3,"ax",@progbits
	.type __umodsi3, function
	.globl	__umodsi3
__umodsi3:
	.cfi_startproc
	movel	sp@(8), d1	/* d1 = divisor */
   17df4:	move.l 8(sp),d1
	movel	sp@(4), d0	/* d0 = dividend */
   17df8:	move.l 4(sp),d0
	movel	d1, sp@-
   17dfc:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   17dfe:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__udivsi3
   17e00:	jsr 17d3c <__udivsi3>
	addql	#8, sp
   17e06:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(8), d1	/* d1 = divisor */
   17e08:	move.l 8(sp),d1
	movel	d1, sp@-
   17e0c:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   17e0e:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__mulsi3	/* d0 = (a/b)*b */
   17e10:	jsr 17d1a <__mulsi3>
	addql	#8, sp
   17e16:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(4), d1	/* d1 = dividend */
   17e18:	move.l 4(sp),d1
	subl	d0, d1		/* d1 = a - (a/b)*b */
   17e1c:	sub.l d0,d1
	movel	d1, d0
   17e1e:	move.l d1,d0
	rts
   17e20:	rts

00017e22 <KPutCharX>:
	.type KPutCharX, function
	.globl	KPutCharX

KPutCharX:
	.cfi_startproc
    move.l  a6, -(sp)
   17e22:	move.l a6,-(sp)
	.cfi_adjust_cfa_offset 4
    move.l  4.w, a6
   17e24:	movea.l 4 <_start+0x4>,a6
    jsr     -0x204(a6)
   17e28:	jsr -516(a6)
    move.l (sp)+, a6
   17e2c:	movea.l (sp)+,a6
	.cfi_adjust_cfa_offset -4
    rts
   17e2e:	rts

00017e30 <PutChar>:
	.type PutChar, function
	.globl	PutChar

PutChar:
	.cfi_startproc
	move.b d0, (a3)+
   17e30:	move.b d0,(a3)+
	rts
   17e32:	rts
