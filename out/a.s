
out/a.elf:     file format elf32-m68k


Disassembly of section .text:

00000000 <_start>:
extern void (*__init_array_start[])() __attribute__((weak));
extern void (*__init_array_end[])() __attribute__((weak));
extern void (*__fini_array_start[])() __attribute__((weak));
extern void (*__fini_array_end[])() __attribute__((weak));

__attribute__((used)) __attribute__((section(".text.unlikely"))) void _start() {
       0:	       subq.l #8,sp
	// initialize globals, ctors etc.
	unsigned long count;
	unsigned long i;

	count = __preinit_array_end - __preinit_array_start;
       2:	       move.l #109055,d0
       8:	       subi.l #109055,d0
       e:	       asr.l #2,d0
      10:	       move.l d0,(sp)
	for (i = 0; i < count; i++)
      12:	       clr.l 4(sp)
      16:	   /-- bra.s 32 <_start+0x32>
		__preinit_array_start[i]();
      18:	/--|-> move.l 4(sp),d0
      1c:	|  |   add.l d0,d0
      1e:	|  |   movea.l d0,a1
      20:	|  |   adda.l d0,a1
      22:	|  |   lea 1a9ff <__fini_array_end>,a0
      28:	|  |   movea.l (0,a1,a0.l),a0
      2c:	|  |   jsr (a0)
	for (i = 0; i < count; i++)
      2e:	|  |   addq.l #1,4(sp)
      32:	|  \-> move.l 4(sp),d0
      36:	|      cmp.l (sp),d0
      38:	\----- bcs.s 18 <_start+0x18>

	count = __init_array_end - __init_array_start;
      3a:	       move.l #109055,d0
      40:	       subi.l #109055,d0
      46:	       asr.l #2,d0
      48:	       move.l d0,(sp)
	for (i = 0; i < count; i++)
      4a:	       clr.l 4(sp)
      4e:	   /-- bra.s 6a <_start+0x6a>
		__init_array_start[i]();
      50:	/--|-> move.l 4(sp),d0
      54:	|  |   add.l d0,d0
      56:	|  |   movea.l d0,a1
      58:	|  |   adda.l d0,a1
      5a:	|  |   lea 1a9ff <__fini_array_end>,a0
      60:	|  |   movea.l (0,a1,a0.l),a0
      64:	|  |   jsr (a0)
	for (i = 0; i < count; i++)
      66:	|  |   addq.l #1,4(sp)
      6a:	|  \-> move.l 4(sp),d0
      6e:	|      cmp.l (sp),d0
      70:	\----- bcs.s 50 <_start+0x50>

	main();
      72:	       jsr 6472 <main>

	// call dtors
	count = __fini_array_end - __fini_array_start;
      78:	       move.l #109055,d0
      7e:	       subi.l #109055,d0
      84:	       asr.l #2,d0
      86:	       move.l d0,(sp)
	for (i = count; i > 0; i--)
      88:	       move.l (sp),4(sp)
      8c:	   /-- bra.s aa <_start+0xaa>
		__fini_array_start[i - 1]();
      8e:	/--|-> move.l 4(sp),d0
      92:	|  |   subq.l #1,d0
      94:	|  |   add.l d0,d0
      96:	|  |   movea.l d0,a1
      98:	|  |   adda.l d0,a1
      9a:	|  |   lea 1a9ff <__fini_array_end>,a0
      a0:	|  |   movea.l (0,a1,a0.l),a0
      a4:	|  |   jsr (a0)
	for (i = count; i > 0; i--)
      a6:	|  |   subq.l #1,4(sp)
      aa:	|  \-> tst.l 4(sp)
      ae:	\----- bne.s 8e <_start+0x8e>
}
      b0:	       nop
      b2:	       nop
      b4:	       addq.l #8,sp
      b6:	       rts

000000b8 <copyString>:
#include "support/gcc8_c_support.h"
#include "moreio.h"

BOOL allowAnyFilename = TRUE;

char * copyString(const char * c) {
      b8:	       lea -16(sp),sp
      bc:	       move.l a6,-(sp)
    char * r = (char *)AllocVec(strlen(c) + 1, MEMF_ANY);
      be:	       move.l 24(sp),-(sp)
      c2:	       jsr 12bea <strlen>
      c8:	       addq.l #4,sp
      ca:	       move.l d0,d1
      cc:	       addq.l #1,d1
      ce:	       move.l d1,16(sp)
      d2:	       clr.l 12(sp)
      d6:	       move.l 1b1a2 <SysBase>,d0
      dc:	       movea.l d0,a6
      de:	       move.l 16(sp),d0
      e2:	       move.l 12(sp),d1
      e6:	       jsr -684(a6)
      ea:	       move.l d0,8(sp)
      ee:	       move.l 8(sp),d0
      f2:	       move.l d0,4(sp)
    if (!r) return NULL;
      f6:	   /-- bne.s fc <copyString+0x44>
      f8:	   |   moveq #0,d0
      fa:	/--|-- bra.s 110 <copyString+0x58>
    strcpy(r, c);
      fc:	|  \-> move.l 24(sp),-(sp)
     100:	|      move.l 8(sp),-(sp)
     104:	|      jsr 12c02 <strcpy>
     10a:	|      addq.l #8,sp
    return r;
     10c:	|      move.l 4(sp),d0
}
     110:	\----> movea.l (sp)+,a6
     112:	       lea 16(sp),sp
     116:	       rts

00000118 <decodeFilename>:

char * decodeFilename(char * nameIn) {
     118:	                      lea -20(sp),sp
     11c:	                      move.l a6,-(sp)
	if (allowAnyFilename) {
     11e:	                      move.w 1aa00 <allowAnyFilename>,d0
     124:	/-------------------- beq.w 2ea <decodeFilename+0x1d2>
		char * newName = (char *)AllocVec(strlen(nameIn) + 1, MEMF_ANY);
     128:	|                     move.l 28(sp),-(sp)
     12c:	|                     jsr 12bea <strlen>
     132:	|                     addq.l #4,sp
     134:	|                     move.l d0,d1
     136:	|                     addq.l #1,d1
     138:	|                     move.l d1,16(sp)
     13c:	|                     clr.l 12(sp)
     140:	|                     move.l 1b1a2 <SysBase>,d0
     146:	|                     movea.l d0,a6
     148:	|                     move.l 16(sp),d0
     14c:	|                     move.l 12(sp),d1
     150:	|                     jsr -684(a6)
     154:	|                     move.l d0,8(sp)
     158:	|                     move.l 8(sp),d0
     15c:	|                     move.l d0,4(sp)
		if (!newName) return NULL;
     160:	|                 /-- bne.s 168 <decodeFilename+0x50>
     162:	|                 |   moveq #0,d0
     164:	|  /--------------|-- bra.w 2f6 <decodeFilename+0x1de>

		int i = 0;
     168:	|  |              \-> clr.l 20(sp)
		while (*nameIn) {
     16c:	|  |     /----------- bra.w 2ce <decodeFilename+0x1b6>
			if (*nameIn == '_') {
     170:	|  |  /--|----------> movea.l 28(sp),a0
     174:	|  |  |  |            move.b (a0),d0
     176:	|  |  |  |            cmpi.b #95,d0
     17a:	|  |  |  |  /-------- bne.w 2b4 <decodeFilename+0x19c>
				nameIn++;
     17e:	|  |  |  |  |         addq.l #1,28(sp)
				switch (*nameIn) {
     182:	|  |  |  |  |         movea.l 28(sp),a0
     186:	|  |  |  |  |         move.b (a0),d0
     188:	|  |  |  |  |         ext.w d0
     18a:	|  |  |  |  |         movea.w d0,a0
     18c:	|  |  |  |  |         moveq #-65,d0
     18e:	|  |  |  |  |         add.l a0,d0
     190:	|  |  |  |  |         moveq #20,d1
     192:	|  |  |  |  |         cmp.l d0,d1
     194:	|  |  |  |  |  /----- bcs.w 2a4 <decodeFilename+0x18c>
     198:	|  |  |  |  |  |      add.l d0,d0
     19a:	|  |  |  |  |  |      movea.l d0,a0
     19c:	|  |  |  |  |  |      adda.l #424,a0
     1a2:	|  |  |  |  |  |      move.w (a0),d0
     1a4:	|  |  |  |  |  |      jmp (1a8 <decodeFilename+0x90>,pc,d0.w)
     1a8:	|  |  |  |  |  |      .short 0x00d4
     1aa:	|  |  |  |  |  |      ori.l #12583164,(a0)+
     1b0:	|  |  |  |  |  |      .short 0x00fc
     1b2:	|  |  |  |  |  |      ori.l #4194556,252(a4)
     1ba:	|  |  |  |  |  |      .short 0x00fc
     1bc:	|  |  |  |  |  |      .short 0x00fc
     1be:	|  |  |  |  |  |      ori.b #-4,252(a2)
     1c4:	|  |  |  |  |  |      .short 0x00fc
     1c6:	|  |  |  |  |  |      ori.w #232,(a6)
     1ca:	|  |  |  |  |  |      .short 0x00fc
     1cc:	|  |  |  |  |  |      ori.l #16515180,d2
					case 'L':	newName[i] = '<';	nameIn++;	break;
     1d2:	|  |  |  |  |  |      move.l 20(sp),d0
     1d6:	|  |  |  |  |  |      movea.l 4(sp),a0
     1da:	|  |  |  |  |  |      adda.l d0,a0
     1dc:	|  |  |  |  |  |      move.b #60,(a0)
     1e0:	|  |  |  |  |  |      addq.l #1,28(sp)
     1e4:	|  |  |  |  |  |  /-- bra.w 2ca <decodeFilename+0x1b2>
					case 'G':	newName[i] = '>';	nameIn++;	break;
     1e8:	|  |  |  |  |  |  |   move.l 20(sp),d0
     1ec:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     1f0:	|  |  |  |  |  |  |   adda.l d0,a0
     1f2:	|  |  |  |  |  |  |   move.b #62,(a0)
     1f6:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     1fa:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'P':	newName[i] = '|';	nameIn++;	break;
     1fe:	|  |  |  |  |  |  |   move.l 20(sp),d0
     202:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     206:	|  |  |  |  |  |  |   adda.l d0,a0
     208:	|  |  |  |  |  |  |   move.b #124,(a0)
     20c:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     210:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'U':	newName[i] = '_';	nameIn++;	break;
     214:	|  |  |  |  |  |  |   move.l 20(sp),d0
     218:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     21c:	|  |  |  |  |  |  |   adda.l d0,a0
     21e:	|  |  |  |  |  |  |   move.b #95,(a0)
     222:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     226:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'S':	newName[i] = '\"';	nameIn++;	break;
     22a:	|  |  |  |  |  |  |   move.l 20(sp),d0
     22e:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     232:	|  |  |  |  |  |  |   adda.l d0,a0
     234:	|  |  |  |  |  |  |   move.b #34,(a0)
     238:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     23c:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'B':	newName[i] = '\\';	nameIn++;	break;
     240:	|  |  |  |  |  |  |   move.l 20(sp),d0
     244:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     248:	|  |  |  |  |  |  |   adda.l d0,a0
     24a:	|  |  |  |  |  |  |   move.b #92,(a0)
     24e:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     252:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'F':	newName[i] = '/';	nameIn++;	break;
     254:	|  |  |  |  |  |  |   move.l 20(sp),d0
     258:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     25c:	|  |  |  |  |  |  |   adda.l d0,a0
     25e:	|  |  |  |  |  |  |   move.b #47,(a0)
     262:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     266:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'C':	newName[i] = ':';	nameIn++;	break;
     268:	|  |  |  |  |  |  |   move.l 20(sp),d0
     26c:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     270:	|  |  |  |  |  |  |   adda.l d0,a0
     272:	|  |  |  |  |  |  |   move.b #58,(a0)
     276:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     27a:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'A':	newName[i] = '*';	nameIn++;	break;
     27c:	|  |  |  |  |  |  |   move.l 20(sp),d0
     280:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     284:	|  |  |  |  |  |  |   adda.l d0,a0
     286:	|  |  |  |  |  |  |   move.b #42,(a0)
     28a:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     28e:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'Q':	newName[i] = '?';	nameIn++;	break;
     290:	|  |  |  |  |  |  |   move.l 20(sp),d0
     294:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     298:	|  |  |  |  |  |  |   adda.l d0,a0
     29a:	|  |  |  |  |  |  |   move.b #63,(a0)
     29e:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     2a2:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					default:	newName[i] = '_';
     2a4:	|  |  |  |  |  \--|-> move.l 20(sp),d0
     2a8:	|  |  |  |  |     |   movea.l 4(sp),a0
     2ac:	|  |  |  |  |     |   adda.l d0,a0
     2ae:	|  |  |  |  |     |   move.b #95,(a0)
     2b2:	|  |  |  |  |     +-- bra.s 2ca <decodeFilename+0x1b2>
				}
			} else {
				newName[i] = *nameIn;
     2b4:	|  |  |  |  \-----|-> move.l 20(sp),d0
     2b8:	|  |  |  |        |   movea.l 4(sp),a0
     2bc:	|  |  |  |        |   adda.l d0,a0
     2be:	|  |  |  |        |   movea.l 28(sp),a1
     2c2:	|  |  |  |        |   move.b (a1),d0
     2c4:	|  |  |  |        |   move.b d0,(a0)
				nameIn++;
     2c6:	|  |  |  |        |   addq.l #1,28(sp)
			}
			i++;
     2ca:	|  |  |  |        \-> addq.l #1,20(sp)
		while (*nameIn) {
     2ce:	|  |  |  \----------> movea.l 28(sp),a0
     2d2:	|  |  |               move.b (a0),d0
     2d4:	|  |  \-------------- bne.w 170 <decodeFilename+0x58>
		}
		newName[i] = 0;
     2d8:	|  |                  move.l 20(sp),d0
     2dc:	|  |                  movea.l 4(sp),a0
     2e0:	|  |                  adda.l d0,a0
     2e2:	|  |                  clr.b (a0)
		return newName;
     2e4:	|  |                  move.l 4(sp),d0
     2e8:	|  +----------------- bra.s 2f6 <decodeFilename+0x1de>
	} else {
		return copyString(nameIn);
     2ea:	\--|----------------> move.l 28(sp),-(sp)
     2ee:	   |                  jsr b8 <copyString>
     2f4:	   |                  addq.l #4,sp
	}
}
     2f6:	   \----------------> movea.l (sp)+,a6
     2f8:	                      lea 20(sp),sp
     2fc:	                      rts

000002fe <encodeFilename>:

char * encodeFilename (char * nameIn) {
     2fe:	                      lea -24(sp),sp
     302:	                      move.l a6,-(sp)
	if (! nameIn) return NULL;
     304:	                      tst.l 32(sp)
     308:	                  /-- bne.s 310 <encodeFilename+0x12>
     30a:	                  |   moveq #0,d0
     30c:	/-----------------|-- bra.w 688 <encodeFilename+0x38a>
	if (allowAnyFilename) {
     310:	|                 \-> move.w 1aa00 <allowAnyFilename>,d0
     316:	|  /----------------- beq.w 644 <encodeFilename+0x346>
		char * newName = AllocVec( strlen(nameIn)*2+1,MEMF_ANY);
     31a:	|  |                  move.l 32(sp),-(sp)
     31e:	|  |                  jsr 12bea <strlen>
     324:	|  |                  addq.l #4,sp
     326:	|  |                  add.l d0,d0
     328:	|  |                  move.l d0,d1
     32a:	|  |                  addq.l #1,d1
     32c:	|  |                  move.l d1,16(sp)
     330:	|  |                  clr.l 12(sp)
     334:	|  |                  move.l 1b1a2 <SysBase>,d0
     33a:	|  |                  movea.l d0,a6
     33c:	|  |                  move.l 16(sp),d0
     340:	|  |                  move.l 12(sp),d1
     344:	|  |                  jsr -684(a6)
     348:	|  |                  move.l d0,8(sp)
     34c:	|  |                  move.l 8(sp),d0
     350:	|  |                  move.l d0,4(sp)
		if(newName == 0) {
     354:	|  |              /-- bne.s 36a <encodeFilename+0x6c>
			KPrintF( "encodefilename: Could not allocate Memory");
     356:	|  |              |   pea 16544 <PutChar+0x4>
     35c:	|  |              |   jsr 15bf0 <KPrintF>
     362:	|  |              |   addq.l #4,sp
			return NULL;
     364:	|  |              |   moveq #0,d0
     366:	+--|--------------|-- bra.w 688 <encodeFilename+0x38a>
		}

		int i = 0;
     36a:	|  |              \-> clr.l 24(sp)
		while (*nameIn) {
     36e:	|  |     /----------- bra.w 634 <encodeFilename+0x336>
			switch (*nameIn) {
     372:	|  |  /--|----------> movea.l 32(sp),a0
     376:	|  |  |  |            move.b (a0),d0
     378:	|  |  |  |            ext.w d0
     37a:	|  |  |  |            movea.w d0,a0
     37c:	|  |  |  |            moveq #95,d0
     37e:	|  |  |  |            cmp.l a0,d0
     380:	|  |  |  |        /-- blt.w 424 <encodeFilename+0x126>
     384:	|  |  |  |        |   moveq #34,d1
     386:	|  |  |  |        |   cmp.l a0,d1
     388:	|  |  |  |  /-----|-- bgt.w 608 <encodeFilename+0x30a>
     38c:	|  |  |  |  |     |   moveq #-34,d0
     38e:	|  |  |  |  |     |   add.l a0,d0
     390:	|  |  |  |  |     |   moveq #61,d1
     392:	|  |  |  |  |     |   cmp.l d0,d1
     394:	|  |  |  |  +-----|-- bcs.w 608 <encodeFilename+0x30a>
     398:	|  |  |  |  |     |   add.l d0,d0
     39a:	|  |  |  |  |     |   movea.l d0,a0
     39c:	|  |  |  |  |     |   adda.l #936,a0
     3a2:	|  |  |  |  |     |   move.w (a0),d0
     3a4:	|  |  |  |  |     |   jmp (3a8 <encodeFilename+0xaa>,pc,d0.w)
     3a8:	|  |  |  |  |     |   bchg d0,d6
     3aa:	|  |  |  |  |     |   andi.w #608,-(a0)
     3ae:	|  |  |  |  |     |   andi.w #608,-(a0)
     3b2:	|  |  |  |  |     |   andi.w #608,-(a0)
     3b6:	|  |  |  |  |     |   andi.w #516,-(a0)
     3ba:	|  |  |  |  |     |   andi.w #608,-(a0)
     3be:	|  |  |  |  |     |   andi.w #608,-(a0)
     3c2:	|  |  |  |  |     |   bclr d0,-(a6)
     3c4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3c8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3cc:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d0:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d8:	|  |  |  |  |     |   bset d0,(a6)
     3da:	|  |  |  |  |     |   andi.w #134,-(a0)
     3de:	|  |  |  |  |     |   andi.w #182,-(a0)
     3e2:	|  |  |  |  |     |   andi.b #96,(96,a2,d0.w:2)
     3e8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3ec:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f0:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3fc:	|  |  |  |  |     |   andi.w #608,-(a0)
     400:	|  |  |  |  |     |   andi.w #608,-(a0)
     404:	|  |  |  |  |     |   andi.w #608,-(a0)
     408:	|  |  |  |  |     |   andi.w #608,-(a0)
     40c:	|  |  |  |  |     |   andi.w #608,-(a0)
     410:	|  |  |  |  |     |   andi.w #608,-(a0)
     414:	|  |  |  |  |     |   andi.w #608,-(a0)
     418:	|  |  |  |  |     |   andi.w #608,-(a0)
     41c:	|  |  |  |  |     |   bchg d0,(96,a6,d0.w:2)
     420:	|  |  |  |  |     |   andi.w #278,-(a0)
     424:	|  |  |  |  |     \-> moveq #124,d0
     426:	|  |  |  |  |         cmp.l a0,d0
     428:	|  |  |  |  |     /-- beq.s 48e <encodeFilename+0x190>
     42a:	|  |  |  |  +-----|-- bra.w 608 <encodeFilename+0x30a>
				case '<':	newName[i++] = '_';		newName[i++] = 'L';		break;
     42e:	|  |  |  |  |     |   move.l 24(sp),d0
     432:	|  |  |  |  |     |   move.l d0,d1
     434:	|  |  |  |  |     |   addq.l #1,d1
     436:	|  |  |  |  |     |   move.l d1,24(sp)
     43a:	|  |  |  |  |     |   movea.l 4(sp),a0
     43e:	|  |  |  |  |     |   adda.l d0,a0
     440:	|  |  |  |  |     |   move.b #95,(a0)
     444:	|  |  |  |  |     |   move.l 24(sp),d0
     448:	|  |  |  |  |     |   move.l d0,d1
     44a:	|  |  |  |  |     |   addq.l #1,d1
     44c:	|  |  |  |  |     |   move.l d1,24(sp)
     450:	|  |  |  |  |     |   movea.l 4(sp),a0
     454:	|  |  |  |  |     |   adda.l d0,a0
     456:	|  |  |  |  |     |   move.b #76,(a0)
     45a:	|  |  |  |  |  /--|-- bra.w 624 <encodeFilename+0x326>
				case '>':	newName[i++] = '_';		newName[i++] = 'G';		break;
     45e:	|  |  |  |  |  |  |   move.l 24(sp),d0
     462:	|  |  |  |  |  |  |   move.l d0,d1
     464:	|  |  |  |  |  |  |   addq.l #1,d1
     466:	|  |  |  |  |  |  |   move.l d1,24(sp)
     46a:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     46e:	|  |  |  |  |  |  |   adda.l d0,a0
     470:	|  |  |  |  |  |  |   move.b #95,(a0)
     474:	|  |  |  |  |  |  |   move.l 24(sp),d0
     478:	|  |  |  |  |  |  |   move.l d0,d1
     47a:	|  |  |  |  |  |  |   addq.l #1,d1
     47c:	|  |  |  |  |  |  |   move.l d1,24(sp)
     480:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     484:	|  |  |  |  |  |  |   adda.l d0,a0
     486:	|  |  |  |  |  |  |   move.b #71,(a0)
     48a:	|  |  |  |  |  +--|-- bra.w 624 <encodeFilename+0x326>
				case '|':	newName[i++] = '_';		newName[i++] = 'P';		break;
     48e:	|  |  |  |  |  |  \-> move.l 24(sp),d0
     492:	|  |  |  |  |  |      move.l d0,d1
     494:	|  |  |  |  |  |      addq.l #1,d1
     496:	|  |  |  |  |  |      move.l d1,24(sp)
     49a:	|  |  |  |  |  |      movea.l 4(sp),a0
     49e:	|  |  |  |  |  |      adda.l d0,a0
     4a0:	|  |  |  |  |  |      move.b #95,(a0)
     4a4:	|  |  |  |  |  |      move.l 24(sp),d0
     4a8:	|  |  |  |  |  |      move.l d0,d1
     4aa:	|  |  |  |  |  |      addq.l #1,d1
     4ac:	|  |  |  |  |  |      move.l d1,24(sp)
     4b0:	|  |  |  |  |  |      movea.l 4(sp),a0
     4b4:	|  |  |  |  |  |      adda.l d0,a0
     4b6:	|  |  |  |  |  |      move.b #80,(a0)
     4ba:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '_':	newName[i++] = '_';		newName[i++] = 'U';		break;
     4be:	|  |  |  |  |  |      move.l 24(sp),d0
     4c2:	|  |  |  |  |  |      move.l d0,d1
     4c4:	|  |  |  |  |  |      addq.l #1,d1
     4c6:	|  |  |  |  |  |      move.l d1,24(sp)
     4ca:	|  |  |  |  |  |      movea.l 4(sp),a0
     4ce:	|  |  |  |  |  |      adda.l d0,a0
     4d0:	|  |  |  |  |  |      move.b #95,(a0)
     4d4:	|  |  |  |  |  |      move.l 24(sp),d0
     4d8:	|  |  |  |  |  |      move.l d0,d1
     4da:	|  |  |  |  |  |      addq.l #1,d1
     4dc:	|  |  |  |  |  |      move.l d1,24(sp)
     4e0:	|  |  |  |  |  |      movea.l 4(sp),a0
     4e4:	|  |  |  |  |  |      adda.l d0,a0
     4e6:	|  |  |  |  |  |      move.b #85,(a0)
     4ea:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '\"':	newName[i++] = '_';		newName[i++] = 'S';		break;
     4ee:	|  |  |  |  |  |      move.l 24(sp),d0
     4f2:	|  |  |  |  |  |      move.l d0,d1
     4f4:	|  |  |  |  |  |      addq.l #1,d1
     4f6:	|  |  |  |  |  |      move.l d1,24(sp)
     4fa:	|  |  |  |  |  |      movea.l 4(sp),a0
     4fe:	|  |  |  |  |  |      adda.l d0,a0
     500:	|  |  |  |  |  |      move.b #95,(a0)
     504:	|  |  |  |  |  |      move.l 24(sp),d0
     508:	|  |  |  |  |  |      move.l d0,d1
     50a:	|  |  |  |  |  |      addq.l #1,d1
     50c:	|  |  |  |  |  |      move.l d1,24(sp)
     510:	|  |  |  |  |  |      movea.l 4(sp),a0
     514:	|  |  |  |  |  |      adda.l d0,a0
     516:	|  |  |  |  |  |      move.b #83,(a0)
     51a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '\\':	newName[i++] = '_';		newName[i++] = 'B';		break;
     51e:	|  |  |  |  |  |      move.l 24(sp),d0
     522:	|  |  |  |  |  |      move.l d0,d1
     524:	|  |  |  |  |  |      addq.l #1,d1
     526:	|  |  |  |  |  |      move.l d1,24(sp)
     52a:	|  |  |  |  |  |      movea.l 4(sp),a0
     52e:	|  |  |  |  |  |      adda.l d0,a0
     530:	|  |  |  |  |  |      move.b #95,(a0)
     534:	|  |  |  |  |  |      move.l 24(sp),d0
     538:	|  |  |  |  |  |      move.l d0,d1
     53a:	|  |  |  |  |  |      addq.l #1,d1
     53c:	|  |  |  |  |  |      move.l d1,24(sp)
     540:	|  |  |  |  |  |      movea.l 4(sp),a0
     544:	|  |  |  |  |  |      adda.l d0,a0
     546:	|  |  |  |  |  |      move.b #66,(a0)
     54a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '/':	newName[i++] = '_';		newName[i++] = 'F';		break;
     54e:	|  |  |  |  |  |      move.l 24(sp),d0
     552:	|  |  |  |  |  |      move.l d0,d1
     554:	|  |  |  |  |  |      addq.l #1,d1
     556:	|  |  |  |  |  |      move.l d1,24(sp)
     55a:	|  |  |  |  |  |      movea.l 4(sp),a0
     55e:	|  |  |  |  |  |      adda.l d0,a0
     560:	|  |  |  |  |  |      move.b #95,(a0)
     564:	|  |  |  |  |  |      move.l 24(sp),d0
     568:	|  |  |  |  |  |      move.l d0,d1
     56a:	|  |  |  |  |  |      addq.l #1,d1
     56c:	|  |  |  |  |  |      move.l d1,24(sp)
     570:	|  |  |  |  |  |      movea.l 4(sp),a0
     574:	|  |  |  |  |  |      adda.l d0,a0
     576:	|  |  |  |  |  |      move.b #70,(a0)
     57a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case ':':	newName[i++] = '_';		newName[i++] = 'C';		break;
     57e:	|  |  |  |  |  |      move.l 24(sp),d0
     582:	|  |  |  |  |  |      move.l d0,d1
     584:	|  |  |  |  |  |      addq.l #1,d1
     586:	|  |  |  |  |  |      move.l d1,24(sp)
     58a:	|  |  |  |  |  |      movea.l 4(sp),a0
     58e:	|  |  |  |  |  |      adda.l d0,a0
     590:	|  |  |  |  |  |      move.b #95,(a0)
     594:	|  |  |  |  |  |      move.l 24(sp),d0
     598:	|  |  |  |  |  |      move.l d0,d1
     59a:	|  |  |  |  |  |      addq.l #1,d1
     59c:	|  |  |  |  |  |      move.l d1,24(sp)
     5a0:	|  |  |  |  |  |      movea.l 4(sp),a0
     5a4:	|  |  |  |  |  |      adda.l d0,a0
     5a6:	|  |  |  |  |  |      move.b #67,(a0)
     5aa:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>
				case '*':	newName[i++] = '_';		newName[i++] = 'A';		break;
     5ac:	|  |  |  |  |  |      move.l 24(sp),d0
     5b0:	|  |  |  |  |  |      move.l d0,d1
     5b2:	|  |  |  |  |  |      addq.l #1,d1
     5b4:	|  |  |  |  |  |      move.l d1,24(sp)
     5b8:	|  |  |  |  |  |      movea.l 4(sp),a0
     5bc:	|  |  |  |  |  |      adda.l d0,a0
     5be:	|  |  |  |  |  |      move.b #95,(a0)
     5c2:	|  |  |  |  |  |      move.l 24(sp),d0
     5c6:	|  |  |  |  |  |      move.l d0,d1
     5c8:	|  |  |  |  |  |      addq.l #1,d1
     5ca:	|  |  |  |  |  |      move.l d1,24(sp)
     5ce:	|  |  |  |  |  |      movea.l 4(sp),a0
     5d2:	|  |  |  |  |  |      adda.l d0,a0
     5d4:	|  |  |  |  |  |      move.b #65,(a0)
     5d8:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>
				case '?':	newName[i++] = '_';		newName[i++] = 'Q';		break;
     5da:	|  |  |  |  |  |      move.l 24(sp),d0
     5de:	|  |  |  |  |  |      move.l d0,d1
     5e0:	|  |  |  |  |  |      addq.l #1,d1
     5e2:	|  |  |  |  |  |      move.l d1,24(sp)
     5e6:	|  |  |  |  |  |      movea.l 4(sp),a0
     5ea:	|  |  |  |  |  |      adda.l d0,a0
     5ec:	|  |  |  |  |  |      move.b #95,(a0)
     5f0:	|  |  |  |  |  |      move.l 24(sp),d0
     5f4:	|  |  |  |  |  |      move.l d0,d1
     5f6:	|  |  |  |  |  |      addq.l #1,d1
     5f8:	|  |  |  |  |  |      move.l d1,24(sp)
     5fc:	|  |  |  |  |  |      movea.l 4(sp),a0
     600:	|  |  |  |  |  |      adda.l d0,a0
     602:	|  |  |  |  |  |      move.b #81,(a0)
     606:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>

				default:	newName[i++] = *nameIn;							break;
     608:	|  |  |  |  \--|----> move.l 24(sp),d0
     60c:	|  |  |  |     |      move.l d0,d1
     60e:	|  |  |  |     |      addq.l #1,d1
     610:	|  |  |  |     |      move.l d1,24(sp)
     614:	|  |  |  |     |      movea.l 4(sp),a0
     618:	|  |  |  |     |      adda.l d0,a0
     61a:	|  |  |  |     |      movea.l 32(sp),a1
     61e:	|  |  |  |     |      move.b (a1),d0
     620:	|  |  |  |     |      move.b d0,(a0)
     622:	|  |  |  |     |      nop
			}
			newName[i] = 0;
     624:	|  |  |  |     \----> move.l 24(sp),d0
     628:	|  |  |  |            movea.l 4(sp),a0
     62c:	|  |  |  |            adda.l d0,a0
     62e:	|  |  |  |            clr.b (a0)
			nameIn ++;
     630:	|  |  |  |            addq.l #1,32(sp)
		while (*nameIn) {
     634:	|  |  |  \----------> movea.l 32(sp),a0
     638:	|  |  |               move.b (a0),d0
     63a:	|  |  \-------------- bne.w 372 <encodeFilename+0x74>
		}
		return newName;
     63e:	|  |                  move.l 4(sp),d0
     642:	+--|----------------- bra.s 688 <encodeFilename+0x38a>
	} else {
		int a;
		for (a = 0; nameIn[a]; a ++) {
     644:	|  \----------------> clr.l 20(sp)
     648:	|              /----- bra.s 66e <encodeFilename+0x370>
			if (nameIn[a] == '\\') nameIn[a] ='/';
     64a:	|           /--|----> move.l 20(sp),d0
     64e:	|           |  |      movea.l 32(sp),a0
     652:	|           |  |      adda.l d0,a0
     654:	|           |  |      move.b (a0),d0
     656:	|           |  |      cmpi.b #92,d0
     65a:	|           |  |  /-- bne.s 66a <encodeFilename+0x36c>
     65c:	|           |  |  |   move.l 20(sp),d0
     660:	|           |  |  |   movea.l 32(sp),a0
     664:	|           |  |  |   adda.l d0,a0
     666:	|           |  |  |   move.b #47,(a0)
		for (a = 0; nameIn[a]; a ++) {
     66a:	|           |  |  \-> addq.l #1,20(sp)
     66e:	|           |  \----> move.l 20(sp),d0
     672:	|           |         movea.l 32(sp),a0
     676:	|           |         adda.l d0,a0
     678:	|           |         move.b (a0),d0
     67a:	|           \-------- bne.s 64a <encodeFilename+0x34c>
		}

		return copyString (nameIn);
     67c:	|                     move.l 32(sp),-(sp)
     680:	|                     jsr b8 <copyString>
     686:	|                     addq.l #4,sp
	}
}
     688:	\-------------------> movea.l (sp)+,a6
     68a:	                      lea 24(sp),sp
     68e:	                      rts

00000690 <FLOATSwap>:

FLOAT FLOATSwap( FLOAT f )
{
     690:	subq.l #8,sp
	{
		FLOAT f;
		unsigned char b[4];
	} dat1, dat2;

	dat1.f = f;
     692:	move.l 12(sp),4(sp)
	dat2.b[0] = dat1.b[3];
     698:	move.b 7(sp),d0
     69c:	move.b d0,(sp)
	dat2.b[1] = dat1.b[2];
     69e:	move.b 6(sp),d0
     6a2:	move.b d0,1(sp)
	dat2.b[2] = dat1.b[1];
     6a6:	move.b 5(sp),d0
     6aa:	move.b d0,2(sp)
	dat2.b[3] = dat1.b[0];
     6ae:	move.b 4(sp),d0
     6b2:	move.b d0,3(sp)
	return dat2.f;
     6b6:	move.l (sp),d0
}
     6b8:	addq.l #8,sp
     6ba:	rts

000006bc <get2bytes>:

int get2bytes (BPTR fp) {
     6bc:	lea -24(sp),sp
     6c0:	move.l a6,-(sp)
	int f1, f2;

	f1 = FGetC (fp);
     6c2:	move.l 32(sp),24(sp)
     6c8:	move.l 1b1aa <DOSBase>,d0
     6ce:	movea.l d0,a6
     6d0:	move.l 24(sp),d1
     6d4:	jsr -306(a6)
     6d8:	move.l d0,20(sp)
     6dc:	move.l 20(sp),d0
     6e0:	move.l d0,16(sp)
	f2 = FGetC (fp);
     6e4:	move.l 32(sp),12(sp)
     6ea:	move.l 1b1aa <DOSBase>,d0
     6f0:	movea.l d0,a6
     6f2:	move.l 12(sp),d1
     6f6:	jsr -306(a6)
     6fa:	move.l d0,8(sp)
     6fe:	move.l 8(sp),d0
     702:	move.l d0,4(sp)

	return (f1 * 256 + f2);
     706:	move.l 16(sp),d0
     70a:	lsl.l #8,d0
     70c:	add.l 4(sp),d0
}
     710:	movea.l (sp)+,a6
     712:	lea 24(sp),sp
     716:	rts

00000718 <get4bytes>:

ULONG get4bytes (BPTR fp) {
     718:	lea -52(sp),sp
     71c:	move.l a6,-(sp)
	int f1, f2, f3, f4;

	f1 = FGetC (fp);
     71e:	move.l 60(sp),52(sp)
     724:	move.l 1b1aa <DOSBase>,d0
     72a:	movea.l d0,a6
     72c:	move.l 52(sp),d1
     730:	jsr -306(a6)
     734:	move.l d0,48(sp)
     738:	move.l 48(sp),d0
     73c:	move.l d0,44(sp)
	f2 = FGetC (fp);
     740:	move.l 60(sp),40(sp)
     746:	move.l 1b1aa <DOSBase>,d0
     74c:	movea.l d0,a6
     74e:	move.l 40(sp),d1
     752:	jsr -306(a6)
     756:	move.l d0,36(sp)
     75a:	move.l 36(sp),d0
     75e:	move.l d0,32(sp)
	f3 = FGetC (fp);
     762:	move.l 60(sp),28(sp)
     768:	move.l 1b1aa <DOSBase>,d0
     76e:	movea.l d0,a6
     770:	move.l 28(sp),d1
     774:	jsr -306(a6)
     778:	move.l d0,24(sp)
     77c:	move.l 24(sp),d0
     780:	move.l d0,20(sp)
	f4 = FGetC (fp);
     784:	move.l 60(sp),16(sp)
     78a:	move.l 1b1aa <DOSBase>,d0
     790:	movea.l d0,a6
     792:	move.l 16(sp),d1
     796:	jsr -306(a6)
     79a:	move.l d0,12(sp)
     79e:	move.l 12(sp),d0
     7a2:	move.l d0,8(sp)

	ULONG x = f1 + f2*256 + f3*256*256 + f4*256*256*256;
     7a6:	move.l 32(sp),d0
     7aa:	lsl.l #8,d0
     7ac:	move.l d0,d1
     7ae:	add.l 44(sp),d1
     7b2:	move.l 20(sp),d0
     7b6:	swap d0
     7b8:	clr.w d0
     7ba:	add.l d0,d1
     7bc:	move.l 8(sp),d0
     7c0:	lsl.w #8,d0
     7c2:	swap d0
     7c4:	clr.w d0
     7c6:	add.l d1,d0
     7c8:	move.l d0,4(sp)

	return x;
     7cc:	move.l 4(sp),d0
}
     7d0:	movea.l (sp)+,a6
     7d2:	lea 52(sp),sp
     7d6:	rts

000007d8 <getFloat>:

FLOAT getFloat (BPTR fp) {
     7d8:	    lea -28(sp),sp
     7dc:	    movem.l d2-d4/a6,-(sp)
	FLOAT f;
	LONG blocks_read = FRead( fp, &f, sizeof (FLOAT), 1 ); 
     7e0:	    move.l 48(sp),40(sp)
     7e6:	    lea 44(sp),a0
     7ea:	    lea -28(a0),a0
     7ee:	    move.l a0,36(sp)
     7f2:	    moveq #4,d0
     7f4:	    move.l d0,32(sp)
     7f8:	    moveq #1,d0
     7fa:	    move.l d0,28(sp)
     7fe:	    move.l 1b1aa <DOSBase>,d0
     804:	    movea.l d0,a6
     806:	    move.l 40(sp),d1
     80a:	    move.l 36(sp),d2
     80e:	    move.l 32(sp),d3
     812:	    move.l 28(sp),d4
     816:	    jsr -324(a6)
     81a:	    move.l d0,24(sp)
     81e:	    move.l 24(sp),d0
     822:	    move.l d0,20(sp)
	if (blocks_read != 1) {
     826:	    moveq #1,d0
     828:	    cmp.l 20(sp),d0
     82c:	/-- beq.s 83c <getFloat+0x64>
		KPrintF("Reading error in getFloat.\n");
     82e:	|   pea 1656e <PutChar+0x2e>
     834:	|   jsr 15bf0 <KPrintF>
     83a:	|   addq.l #4,sp
	}
	return FLOATSwap(f);
     83c:	\-> move.l 16(sp),d0
     840:	    move.l d0,-(sp)
     842:	    jsr 690 <FLOATSwap>
     848:	    addq.l #4,sp
	return f;
}
     84a:	    movem.l (sp)+,d2-d4/a6
     84e:	    lea 28(sp),sp
     852:	    rts

00000854 <getSigned>:

short getSigned (BPTR fp) {
     854:	    lea -24(sp),sp
     858:	    movem.l d2-d3/a6,-(sp)
	short f;
	LONG bytes_read = Read(fp, &f, sizeof(short));
     85c:	    move.l 40(sp),32(sp)
     862:	    lea 36(sp),a0
     866:	    lea -22(a0),a0
     86a:	    move.l a0,28(sp)
     86e:	    moveq #2,d0
     870:	    move.l d0,24(sp)
     874:	    move.l 1b1aa <DOSBase>,d0
     87a:	    movea.l d0,a6
     87c:	    move.l 32(sp),d1
     880:	    move.l 28(sp),d2
     884:	    move.l 24(sp),d3
     888:	    jsr -42(a6)
     88c:	    move.l d0,20(sp)
     890:	    move.l 20(sp),d0
     894:	    move.l d0,16(sp)
	if (bytes_read != sizeof (short)) {
     898:	    moveq #2,d0
     89a:	    cmp.l 16(sp),d0
     89e:	/-- beq.s 8ae <getSigned+0x5a>
		KPrintF("getSigned: Reading error in getSigned.\n");
     8a0:	|   pea 1658a <PutChar+0x4a>
     8a6:	|   jsr 15bf0 <KPrintF>
     8ac:	|   addq.l #4,sp
	}
	f = shortSwap(f);
     8ae:	\-> move.w 14(sp),d0
     8b2:	    movea.w d0,a0
     8b4:	    move.l a0,-(sp)
     8b6:	    jsr baa <shortSwap>
     8bc:	    addq.l #4,sp
     8be:	    move.w d0,14(sp)
	return f;
     8c2:	    move.w 14(sp),d0
}
     8c6:	    movem.l (sp)+,d2-d3/a6
     8ca:	    lea 24(sp),sp
     8ce:	    rts

000008d0 <put2bytes>:

void put2bytes (int numtoput, BPTR fp) {
     8d0:	    lea -24(sp),sp
     8d4:	    move.l a6,-(sp)
     8d6:	    move.l d2,-(sp)
	FPutC( fp, (char) (numtoput / 256));
     8d8:	    move.l 40(sp),28(sp)
     8de:	    move.l 36(sp),d0
     8e2:	/-- bpl.s 8ea <put2bytes+0x1a>
     8e4:	|   addi.l #255,d0
     8ea:	\-> asr.l #8,d0
     8ec:	    move.l d0,d0
     8ee:	    ext.w d0
     8f0:	    movea.w d0,a0
     8f2:	    move.l a0,24(sp)
     8f6:	    move.l 1b1aa <DOSBase>,d0
     8fc:	    movea.l d0,a6
     8fe:	    move.l 28(sp),d1
     902:	    move.l 24(sp),d2
     906:	    jsr -312(a6)
     90a:	    move.l d0,20(sp)
	FPutC( fp, (char) (numtoput % 256));
     90e:	    move.l 40(sp),16(sp)
     914:	    move.l 36(sp),d0
     918:	    andi.l #-2147483393,d0
     91e:	/-- bpl.s 92a <put2bytes+0x5a>
     920:	|   subq.l #1,d0
     922:	|   moveq #-1,d1
     924:	|   not.b d1
     926:	|   or.l d1,d0
     928:	|   addq.l #1,d0
     92a:	\-> move.l d0,d0
     92c:	    ext.w d0
     92e:	    movea.w d0,a0
     930:	    move.l a0,12(sp)
     934:	    move.l 1b1aa <DOSBase>,d0
     93a:	    movea.l d0,a6
     93c:	    move.l 16(sp),d1
     940:	    move.l 12(sp),d2
     944:	    jsr -312(a6)
     948:	    move.l d0,8(sp)
}
     94c:	    nop
     94e:	    move.l (sp)+,d2
     950:	    movea.l (sp)+,a6
     952:	    lea 24(sp),sp
     956:	    rts

00000958 <put4bytes>:

void put4bytes (ULONG i, BPTR fp) {
     958:	lea -52(sp),sp
     95c:	move.l a6,-(sp)
     95e:	move.l d2,-(sp)
	//	fwrite (&i, sizeof (long int), 1, fp);
	unsigned char f1, f2, f3, f4;

	f4 = i / (256*256*256);
     960:	move.l 64(sp),d0
     964:	clr.w d0
     966:	swap d0
     968:	lsr.w #8,d0
     96a:	move.b d0,59(sp)
	i = i % (256*256*256);
     96e:	andi.l #16777215,64(sp)
	f3 = i / (256*256);
     976:	move.l 64(sp),d0
     97a:	clr.w d0
     97c:	swap d0
     97e:	move.b d0,58(sp)
	i = i % (256*256);
     982:	andi.l #65535,64(sp)
	f2 = i / 256;
     98a:	move.l 64(sp),d0
     98e:	lsr.l #8,d0
     990:	move.b d0,57(sp)
	f1 = i % 256;
     994:	move.b 67(sp),56(sp)

	FPutC (fp,f1);
     99a:	move.l 68(sp),52(sp)
     9a0:	moveq #0,d0
     9a2:	move.b 56(sp),d0
     9a6:	move.l d0,48(sp)
     9aa:	move.l 1b1aa <DOSBase>,d0
     9b0:	movea.l d0,a6
     9b2:	move.l 52(sp),d1
     9b6:	move.l 48(sp),d2
     9ba:	jsr -312(a6)
     9be:	move.l d0,44(sp)
	FPutC (fp,f2);
     9c2:	move.l 68(sp),40(sp)
     9c8:	moveq #0,d0
     9ca:	move.b 57(sp),d0
     9ce:	move.l d0,36(sp)
     9d2:	move.l 1b1aa <DOSBase>,d0
     9d8:	movea.l d0,a6
     9da:	move.l 40(sp),d1
     9de:	move.l 36(sp),d2
     9e2:	jsr -312(a6)
     9e6:	move.l d0,32(sp)
	FPutC (fp,f3);
     9ea:	move.l 68(sp),28(sp)
     9f0:	moveq #0,d0
     9f2:	move.b 58(sp),d0
     9f6:	move.l d0,24(sp)
     9fa:	move.l 1b1aa <DOSBase>,d0
     a00:	movea.l d0,a6
     a02:	move.l 28(sp),d1
     a06:	move.l 24(sp),d2
     a0a:	jsr -312(a6)
     a0e:	move.l d0,20(sp)
	FPutC (fp,f4);
     a12:	move.l 68(sp),16(sp)
     a18:	moveq #0,d0
     a1a:	move.b 59(sp),d0
     a1e:	move.l d0,12(sp)
     a22:	move.l 1b1aa <DOSBase>,d0
     a28:	movea.l d0,a6
     a2a:	move.l 16(sp),d1
     a2e:	move.l 12(sp),d2
     a32:	jsr -312(a6)
     a36:	move.l d0,8(sp)
}
     a3a:	nop
     a3c:	move.l (sp)+,d2
     a3e:	movea.l (sp)+,a6
     a40:	lea 52(sp),sp
     a44:	rts

00000a46 <putFloat>:

void putFloat (FLOAT f, BPTR fp) {
     a46:	lea -16(sp),sp
     a4a:	movem.l d2-d3/a6,-(sp)
	f = FLOATSwap(f);
     a4e:	move.l 32(sp),d0
     a52:	move.l d0,-(sp)
     a54:	jsr 690 <FLOATSwap>
     a5a:	addq.l #4,sp
     a5c:	move.l d0,32(sp)
	Write( fp, &f, sizeof (FLOAT));
     a60:	move.l 36(sp),24(sp)
     a66:	moveq #32,d0
     a68:	add.l sp,d0
     a6a:	move.l d0,20(sp)
     a6e:	moveq #4,d0
     a70:	move.l d0,16(sp)
     a74:	move.l 1b1aa <DOSBase>,d0
     a7a:	movea.l d0,a6
     a7c:	move.l 24(sp),d1
     a80:	move.l 20(sp),d2
     a84:	move.l 16(sp),d3
     a88:	jsr -48(a6)
     a8c:	move.l d0,12(sp)
}
     a90:	nop
     a92:	movem.l (sp)+,d2-d3/a6
     a96:	lea 16(sp),sp
     a9a:	rts

00000a9c <putSigned>:

void putSigned (short f, BPTR fp) {
     a9c:	lea -20(sp),sp
     aa0:	movem.l d2-d3/a6,-(sp)
     aa4:	move.l 36(sp),d0
     aa8:	move.w d0,d0
     aaa:	move.w d0,14(sp)
	f = shortSwap(f);
     aae:	move.w 14(sp),d0
     ab2:	movea.w d0,a0
     ab4:	move.l a0,-(sp)
     ab6:	jsr baa <shortSwap>
     abc:	addq.l #4,sp
     abe:	move.w d0,14(sp)
	Write(fp, &f, sizeof(short));
     ac2:	move.l 40(sp),28(sp)
     ac8:	lea 32(sp),a0
     acc:	lea -18(a0),a0
     ad0:	move.l a0,24(sp)
     ad4:	moveq #2,d0
     ad6:	move.l d0,20(sp)
     ada:	move.l 1b1aa <DOSBase>,d0
     ae0:	movea.l d0,a6
     ae2:	move.l 28(sp),d1
     ae6:	move.l 24(sp),d2
     aea:	move.l 20(sp),d3
     aee:	jsr -48(a6)
     af2:	move.l d0,16(sp)
}
     af6:	nop
     af8:	movem.l (sp)+,d2-d3/a6
     afc:	lea 20(sp),sp
     b00:	rts

00000b02 <readString>:

char * readString (BPTR fp) {
     b02:	          lea -32(sp),sp
     b06:	          move.l a6,-(sp)

	int a, len = get2bytes (fp);
     b08:	          move.l 40(sp),-(sp)
     b0c:	          jsr 6bc <get2bytes>
     b12:	          addq.l #4,sp
     b14:	          move.l d0,28(sp)
	//debugOut ("MOREIO: readString - len %i\n", len);
	char * s = AllocVec(len+1,MEMF_ANY);
     b18:	          move.l 28(sp),d0
     b1c:	          addq.l #1,d0
     b1e:	          move.l d0,24(sp)
     b22:	          clr.l 20(sp)
     b26:	          move.l 1b1a2 <SysBase>,d0
     b2c:	          movea.l d0,a6
     b2e:	          move.l 24(sp),d0
     b32:	          move.l 20(sp),d1
     b36:	          jsr -684(a6)
     b3a:	          move.l d0,16(sp)
     b3e:	          move.l 16(sp),d0
     b42:	          move.l d0,12(sp)
	if(s == 0) return NULL;
     b46:	      /-- bne.s b4c <readString+0x4a>
     b48:	      |   moveq #0,d0
     b4a:	/-----|-- bra.s ba2 <readString+0xa0>
	for (a = 0; a < len; a ++) {
     b4c:	|     \-> clr.l 32(sp)
     b50:	|     /-- bra.s b88 <readString+0x86>
		s[a] = (char) (FGetC (fp) - 1);
     b52:	|  /--|-> move.l 40(sp),8(sp)
     b58:	|  |  |   move.l 1b1aa <DOSBase>,d0
     b5e:	|  |  |   movea.l d0,a6
     b60:	|  |  |   move.l 8(sp),d1
     b64:	|  |  |   jsr -306(a6)
     b68:	|  |  |   move.l d0,4(sp)
     b6c:	|  |  |   move.l 4(sp),d0
     b70:	|  |  |   move.l d0,d0
     b72:	|  |  |   move.b d0,d1
     b74:	|  |  |   subq.b #1,d1
     b76:	|  |  |   move.l 32(sp),d0
     b7a:	|  |  |   movea.l 12(sp),a0
     b7e:	|  |  |   adda.l d0,a0
     b80:	|  |  |   move.b d1,d0
     b82:	|  |  |   move.b d0,(a0)
	for (a = 0; a < len; a ++) {
     b84:	|  |  |   addq.l #1,32(sp)
     b88:	|  |  \-> move.l 32(sp),d0
     b8c:	|  |      cmp.l 28(sp),d0
     b90:	|  \----- blt.s b52 <readString+0x50>
	}
	s[len] = 0;
     b92:	|         move.l 28(sp),d0
     b96:	|         movea.l 12(sp),a0
     b9a:	|         adda.l d0,a0
     b9c:	|         clr.b (a0)
	//debugOut ("MOREIO: readString: %s\n", s);
	return s;
     b9e:	|         move.l 12(sp),d0
}
     ba2:	\-------> movea.l (sp)+,a6
     ba4:	          lea 32(sp),sp
     ba8:	          rts

00000baa <shortSwap>:

short shortSwap( short s )
{
     baa:	subq.l #4,sp
     bac:	move.l 8(sp),d0
     bb0:	move.w d0,d0
     bb2:	move.w d0,(sp)
	unsigned char b1, b2;
	
	b1 = s & 255;
     bb4:	move.b 1(sp),3(sp)
	b2 = (s >> 8) & 255;
     bba:	move.w (sp),d0
     bbc:	asr.w #8,d0
     bbe:	move.b d0,2(sp)
	
	return (b1 << 8) + b2;
     bc2:	clr.w d0
     bc4:	move.b 3(sp),d0
     bc8:	move.w d0,d1
     bca:	lsl.w #8,d1
     bcc:	clr.w d0
     bce:	move.b 2(sp),d0
     bd2:	add.w d1,d0
}
     bd4:	addq.l #4,sp
     bd6:	rts

00000bd8 <writeString>:

void writeString (char * s, BPTR fp) {
     bd8:	       lea -20(sp),sp
     bdc:	       move.l a6,-(sp)
     bde:	       move.l d2,-(sp)
	int a, len = strlen (s);
     be0:	       move.l 32(sp),-(sp)
     be4:	       jsr 12bea <strlen>
     bea:	       addq.l #4,sp
     bec:	       move.l d0,20(sp)
	put2bytes (len, fp);
     bf0:	       move.l 36(sp),-(sp)
     bf4:	       move.l 24(sp),-(sp)
     bf8:	       jsr 8d0 <put2bytes>
     bfe:	       addq.l #8,sp
	for (a = 0; a < len; a ++) {
     c00:	       clr.l 24(sp)
     c04:	   /-- bra.s c40 <writeString+0x68>
		FPutC (fp,s[a] + 1);
     c06:	/--|-> move.l 36(sp),16(sp)
     c0c:	|  |   move.l 24(sp),d0
     c10:	|  |   movea.l 32(sp),a0
     c14:	|  |   adda.l d0,a0
     c16:	|  |   move.b (a0),d0
     c18:	|  |   ext.w d0
     c1a:	|  |   ext.l d0
     c1c:	|  |   move.l d0,d1
     c1e:	|  |   addq.l #1,d1
     c20:	|  |   move.l d1,12(sp)
     c24:	|  |   move.l 1b1aa <DOSBase>,d0
     c2a:	|  |   movea.l d0,a6
     c2c:	|  |   move.l 16(sp),d1
     c30:	|  |   move.l 12(sp),d2
     c34:	|  |   jsr -312(a6)
     c38:	|  |   move.l d0,8(sp)
	for (a = 0; a < len; a ++) {
     c3c:	|  |   addq.l #1,24(sp)
     c40:	|  \-> move.l 24(sp),d0
     c44:	|      cmp.l 20(sp),d0
     c48:	\----- blt.s c06 <writeString+0x2e>
	}
     c4a:	       nop
     c4c:	       nop
     c4e:	       move.l (sp)+,d2
     c50:	       movea.l (sp)+,a6
     c52:	       lea 20(sp),sp
     c56:	       rts

00000c58 <displayCursor>:
int mouseCursorFrameNum = 0;
int mouseCursorCountUp = 0;

extern struct inputType input;

void displayCursor () {
     c58:	    movem.l d2-d5,-(sp)

	
	if( mouseCursorAnim->theSprites)
     c5c:	    movea.l 1b0aa <mouseCursorAnim>,a0
     c62:	    move.l (a0),d0
     c64:	/-- beq.w d64 <displayCursor+0x10c>
	{		
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
			input.mouseY + 44 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].yhot,
			mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].height,
			(UBYTE *) mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].data);
     c68:	|   movea.l 1b0aa <mouseCursorAnim>,a0
     c6e:	|   movea.l (a0),a0
     c70:	|   movea.l 16(a0),a1
     c74:	|   movea.l 1b0aa <mouseCursorAnim>,a0
     c7a:	|   movea.l 4(a0),a0
     c7e:	|   move.l (a0),d0
     c80:	|   move.l d0,d1
     c82:	|   move.l d1,d0
     c84:	|   lsl.l #3,d0
     c86:	|   sub.l d1,d0
     c88:	|   add.l d0,d0
     c8a:	|   add.l d0,d0
     c8c:	|   lea (0,a1,d0.l),a0
     c90:	|   movea.l 24(a0),a1
			mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].height,
     c94:	|   movea.l 1b0aa <mouseCursorAnim>,a0
     c9a:	|   movea.l (a0),a0
     c9c:	|   move.l 16(a0),d2
     ca0:	|   movea.l 1b0aa <mouseCursorAnim>,a0
     ca6:	|   movea.l 4(a0),a0
     caa:	|   move.l (a0),d0
     cac:	|   move.l d0,d1
     cae:	|   move.l d1,d0
     cb0:	|   lsl.l #3,d0
     cb2:	|   sub.l d1,d0
     cb4:	|   add.l d0,d0
     cb6:	|   add.l d0,d0
     cb8:	|   movea.l d2,a0
     cba:	|   adda.l d0,a0
     cbc:	|   move.l 4(a0),d0
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
     cc0:	|   move.l d0,d0
     cc2:	|   moveq #0,d3
     cc4:	|   move.w d0,d3
			input.mouseY + 44 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].yhot,
     cc6:	|   move.l 1b162 <input+0xe>,d0
     ccc:	|   move.l d0,d2
     cce:	|   movea.l 1b0aa <mouseCursorAnim>,a0
     cd4:	|   movea.l (a0),a0
     cd6:	|   move.l 16(a0),d4
     cda:	|   movea.l 1b0aa <mouseCursorAnim>,a0
     ce0:	|   movea.l 4(a0),a0
     ce4:	|   move.l (a0),d0
     ce6:	|   move.l d0,d1
     ce8:	|   move.l d1,d0
     cea:	|   lsl.l #3,d0
     cec:	|   sub.l d1,d0
     cee:	|   add.l d0,d0
     cf0:	|   add.l d0,d0
     cf2:	|   movea.l d4,a0
     cf4:	|   adda.l d0,a0
     cf6:	|   move.l 12(a0),d0
     cfa:	|   move.l d0,d0
     cfc:	|   move.w d2,d1
     cfe:	|   sub.w d0,d1
     d00:	|   move.w d1,d0
     d02:	|   addi.w #44,d0
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
     d06:	|   moveq #0,d2
     d08:	|   move.w d0,d2
     d0a:	|   move.l 1b15e <input+0xa>,d0
     d10:	|   move.l d0,d4
     d12:	|   movea.l 1b0aa <mouseCursorAnim>,a0
     d18:	|   movea.l (a0),a0
     d1a:	|   move.l 16(a0),d5
     d1e:	|   movea.l 1b0aa <mouseCursorAnim>,a0
     d24:	|   movea.l 4(a0),a0
     d28:	|   move.l (a0),d0
     d2a:	|   move.l d0,d1
     d2c:	|   move.l d1,d0
     d2e:	|   lsl.l #3,d0
     d30:	|   sub.l d1,d0
     d32:	|   add.l d0,d0
     d34:	|   add.l d0,d0
     d36:	|   movea.l d5,a0
     d38:	|   adda.l d0,a0
     d3a:	|   move.l 8(a0),d0
     d3e:	|   move.l d0,d0
     d40:	|   move.w d4,d1
     d42:	|   sub.w d0,d1
     d44:	|   move.w d1,d0
     d46:	|   addi.w #128,d0
     d4a:	|   move.w d0,d0
     d4c:	|   andi.l #65535,d0
     d52:	|   move.l a1,-(sp)
     d54:	|   move.l d3,-(sp)
     d56:	|   move.l d2,-(sp)
     d58:	|   move.l d0,-(sp)
     d5a:	|   jsr 13ee <CstDisplayCursor>
     d60:	|   lea 16(sp),sp
	}
}
     d64:	\-> nop
     d66:	    movem.l (sp)+,d2-d5
     d6a:	    rts

00000d6c <pickAnimCursor>:

void pickAnimCursor (struct personaAnimation * pp) {
	deleteAnim (mouseCursorAnim);
     d6c:	move.l 1b0aa <mouseCursorAnim>,d0
     d72:	move.l d0,-(sp)
     d74:	jsr 88fa <deleteAnim>
     d7a:	addq.l #4,sp
	mouseCursorAnim = pp;
     d7c:	move.l 4(sp),1b0aa <mouseCursorAnim>
	mouseCursorFrameNum = 0;
     d84:	clr.l 1b0ae <mouseCursorFrameNum>
	mouseCursorCountUp = 0;
     d8a:	clr.l 1b0b2 <mouseCursorCountUp>
}
     d90:	nop
     d92:	rts

00000d94 <pasteCursor>:

void pasteCursor (int x, int y, struct personaAnimation * c) {
     d94:	subq.l #8,sp

				//int fNumSign = myAnim -> frames[thisPerson -> frameNum].frameNum;
	
	struct sprite *spritetouse = &c->theSprites->bank.sprites[c->frames[0].frameNum];
     d96:	movea.l 20(sp),a0
     d9a:	movea.l (a0),a0
     d9c:	movea.l 16(a0),a0
     da0:	movea.l 20(sp),a1
     da4:	movea.l 4(a1),a1
     da8:	move.l (a1),d0
     daa:	move.l d0,d1
     dac:	move.l d1,d0
     dae:	lsl.l #3,d0
     db0:	sub.l d1,d0
     db2:	add.l d0,d0
     db4:	add.l d0,d0
     db6:	adda.l d0,a0
     db8:	move.l a0,4(sp)

	UWORD absx =  x - spritetouse->xhot;
     dbc:	move.l 12(sp),d0
     dc0:	movea.l 4(sp),a0
     dc4:	move.l 8(a0),d1
     dc8:	move.l d1,d1
     dca:	movea.w d0,a0
     dcc:	suba.w d1,a0
     dce:	move.w a0,2(sp)
	UWORD absy =  y - spritetouse->yhot;
     dd2:	move.l 16(sp),d0
     dd6:	movea.l 4(sp),a0
     dda:	move.l 12(a0),d1
     dde:	move.l d1,d1
     de0:	movea.w d0,a0
     de2:	suba.w d1,a0
     de4:	move.w a0,(sp)

	CstScaleSprite( spritetouse, (struct onScreenPerson *) NULL, absx, absy, BACKDROP);
     de6:	move.w (sp),d0
     de8:	movea.w d0,a1
     dea:	move.w 2(sp),d0
     dee:	movea.w d0,a0
     df0:	pea 2 <_start+0x2>
     df4:	move.l a1,-(sp)
     df6:	move.l a0,-(sp)
     df8:	clr.l -(sp)
     dfa:	move.l 20(sp),-(sp)
     dfe:	jsr 1df2 <CstScaleSprite>
     e04:	lea 20(sp),sp
     e08:	nop
     e0a:	addq.l #8,sp
     e0c:	rts

00000e0e <CstBlankScreen>:
    0x1900000, 0x1920000, 0x1940000, 0x1960000, 0x1980000, 0x19a0000, 0x19c0000, 0x19e0000,
    0x1a00000, 0x1a20000, 0x1a40000, 0x1a60000, 0x1a80000, 0x1aa0000, 0x1ac0000, 0x1ae0000,
    0x1b00000, 0x1b20000, 0x1b40000, 0x1b60000, 0x1b80000, 0x1ba0000, 0x1bc0000, 0x1be0000 
};

void CstBlankScreen( int width, int height) {
     e0e:	          lea -16(sp),sp
     e12:	          move.l a6,-(sp)

  KPrintF("CstBlankScreen: started\n");
     e14:	          pea 165b2 <PutChar+0x72>
     e1a:	          jsr 15bf0 <KPrintF>
     e20:	          addq.l #4,sp

  if( !CstBackDrop) {
     e22:	          move.l 1b0c4 <CstBackDrop>,d0
     e28:	      /-- bne.s e3c <CstBlankScreen+0x2e>
    KPrintF("CstBlankScreen: Backdrop empty nothing to do\n");
     e2a:	      |   pea 165cb <PutChar+0x8b>
     e30:	      |   jsr 15bf0 <KPrintF>
     e36:	      |   addq.l #4,sp
    return;
     e38:	/-----|-- bra.w fc6 <CstBlankScreen+0x1b8>
  }

  CstPaletteLoaded = 0;
     e3c:	|     \-> clr.w 1b0be <CstPaletteLoaded>

  volatile struct Custom *custom = (struct Custom*)0xdff000;
     e42:	|         move.l #14675968,8(sp)

  width /= 16;
     e4a:	|         move.l 24(sp),d0
     e4e:	|         movea.l d0,a0
     e50:	|         cmpa.w #0,a0
     e54:	|     /-- bge.s e5a <CstBlankScreen+0x4c>
     e56:	|     |   lea 15(a0),a0
     e5a:	|     \-> move.l a0,d0
     e5c:	|         asr.l #4,d0
     e5e:	|         move.l d0,24(sp)

  WaitBlit();
     e62:	|         move.l 1b1ae <GfxBase>,d0
     e68:	|         movea.l d0,a6
     e6a:	|         jsr -228(a6)

  //Both Buffers need to be done
  custom->bltafwm = 0xffff;
     e6e:	|         movea.l 8(sp),a0
     e72:	|         move.w #-1,68(a0)
  custom->bltalwm = 0xffff;
     e78:	|         movea.l 8(sp),a0
     e7c:	|         move.w #-1,70(a0)
  custom->bltamod = 0;
     e82:	|         movea.l 8(sp),a0
     e86:	|         move.w #0,100(a0)
  custom->bltbmod = 0;
     e8c:	|         movea.l 8(sp),a0
     e90:	|         move.w #0,98(a0)
  custom->bltcmod = 0;
     e96:	|         movea.l 8(sp),a0
     e9a:	|         move.w #0,96(a0)
  custom->bltdmod = 0;
     ea0:	|         movea.l 8(sp),a0
     ea4:	|         move.w #0,102(a0)
  custom->bltcon1 = 0;
     eaa:	|         movea.l 8(sp),a0
     eae:	|         move.w #0,66(a0)
  custom->bltcon0 = 0x0100;
     eb4:	|         movea.l 8(sp),a0
     eb8:	|         move.w #256,64(a0)
  ULONG bltdpt = (ULONG) CstBackDrop;
     ebe:	|         move.l 1b0c4 <CstBackDrop>,d0
     ec4:	|         move.l d0,16(sp)
  UWORD bltsize = height*64+width;    
     ec8:	|         move.l 28(sp),d0
     ecc:	|         lsl.w #6,d0
     ece:	|         move.l 24(sp),d1
     ed2:	|         movea.w d0,a0
     ed4:	|         adda.w d1,a0
     ed6:	|         move.w a0,6(sp)
  UWORD blitsize = width*height*2;
     eda:	|         move.l 24(sp),d1
     ede:	|         move.l 28(sp),d0
     ee2:	|         muls.w d1,d0
     ee4:	|         add.w d0,d0
     ee6:	|         move.w d0,4(sp)

  KPrintF("CstBlankScreen: Starting Blits\n");
     eea:	|         pea 165f9 <PutChar+0xb9>
     ef0:	|         jsr 15bf0 <KPrintF>
     ef6:	|         addq.l #4,sp

  for(int i2=0;i2<5;i2++)
     ef8:	|         clr.l 12(sp)
     efc:	|     /-- bra.s f2e <CstBlankScreen+0x120>
  {            
    custom->bltdpt = (APTR) bltdpt;
     efe:	|  /--|-> move.l 16(sp),d0
     f02:	|  |  |   movea.l 8(sp),a0
     f06:	|  |  |   move.l d0,84(a0)
    custom->bltsize = bltsize;            
     f0a:	|  |  |   movea.l 8(sp),a0
     f0e:	|  |  |   move.w 6(sp),88(a0)
    WaitBlit();
     f14:	|  |  |   move.l 1b1ae <GfxBase>,d0
     f1a:	|  |  |   movea.l d0,a6
     f1c:	|  |  |   jsr -228(a6)
    bltdpt += blitsize;
     f20:	|  |  |   moveq #0,d0
     f22:	|  |  |   move.w 4(sp),d0
     f26:	|  |  |   add.l d0,16(sp)
  for(int i2=0;i2<5;i2++)
     f2a:	|  |  |   addq.l #1,12(sp)
     f2e:	|  |  \-> moveq #4,d0
     f30:	|  |      cmp.l 12(sp),d0
     f34:	|  \----- bge.s efe <CstBlankScreen+0xf0>
  }

  KPrintF("CstBlankScreen: Finished Blits\n");
     f36:	|         pea 16619 <PutChar+0xd9>
     f3c:	|         jsr 15bf0 <KPrintF>
     f42:	|         addq.l #4,sp

  CstApplyBackDropCounter = 2;
     f44:	|         move.w #2,1b0d0 <CstApplyBackDropCounter>

  *CstBackDropBufferApplyCursor++ = winWidth/16;
     f4c:	|         move.l 1b0f6 <winWidth>,d0
     f52:	|         lsr.l #4,d0
     f54:	|         movea.l 1b0e6 <CstBackDropBufferApplyCursor>,a0
     f5a:	|         move.l a0,d1
     f5c:	|         addq.l #2,d1
     f5e:	|         move.l d1,1b0e6 <CstBackDropBufferApplyCursor>
     f64:	|         move.l d0,d0
     f66:	|         move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = winHeight;
     f68:	|         move.l 1b0fa <winHeight>,d0
     f6e:	|         movea.l 1b0e6 <CstBackDropBufferApplyCursor>,a0
     f74:	|         move.l a0,d1
     f76:	|         addq.l #2,d1
     f78:	|         move.l d1,1b0e6 <CstBackDropBufferApplyCursor>
     f7e:	|         move.l d0,d0
     f80:	|         move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = 0;
     f82:	|         movea.l 1b0e6 <CstBackDropBufferApplyCursor>,a0
     f88:	|         move.l a0,d0
     f8a:	|         addq.l #2,d0
     f8c:	|         move.l d0,1b0e6 <CstBackDropBufferApplyCursor>
     f92:	|         clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
     f94:	|         movea.l 1b0e6 <CstBackDropBufferApplyCursor>,a0
     f9a:	|         move.l a0,d0
     f9c:	|         addq.l #2,d0
     f9e:	|         move.l d0,1b0e6 <CstBackDropBufferApplyCursor>
     fa4:	|         clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
     fa6:	|         movea.l 1b0e6 <CstBackDropBufferApplyCursor>,a0
     fac:	|         move.l a0,d0
     fae:	|         addq.l #2,d0
     fb0:	|         move.l d0,1b0e6 <CstBackDropBufferApplyCursor>
     fb6:	|         clr.w (a0)

  KPrintF("CstBlankScreen: end\n");
     fb8:	|         pea 16639 <PutChar+0xf9>
     fbe:	|         jsr 15bf0 <KPrintF>
     fc4:	|         addq.l #4,sp


}
     fc6:	\-------> movea.l (sp)+,a6
     fc8:	          lea 16(sp),sp
     fcc:	          rts

00000fce <CstCreateCopperlist>:

UWORD * CstCreateCopperlist( int width) {
     fce:	       lea -52(sp),sp
     fd2:	       move.l a6,-(sp)
     fd4:	       move.l d2,-(sp)
  
  ULONG *retval = AllocMem(  CSTCOPSIZE, MEMF_CHIP);
     fd6:	       move.l #400,32(sp)
     fde:	       moveq #2,d0
     fe0:	       move.l d0,28(sp)
     fe4:	       move.l 1b1a2 <SysBase>,d0
     fea:	       movea.l d0,a6
     fec:	       move.l 32(sp),d0
     ff0:	       move.l 28(sp),d1
     ff4:	       jsr -198(a6)
     ff8:	       move.l d0,24(sp)
     ffc:	       move.l 24(sp),d0
    1000:	       move.l d0,20(sp)
  
  if( retval == 0) {
    1004:	   /-- bne.s 102e <CstCreateCopperlist+0x60>
    KPrintF("CstCreateCopperlist: Allocation of Ram for Copper failed.\n", 40);
    1006:	   |   pea 28 <_start+0x28>
    100a:	   |   pea 1664e <PutChar+0x10e>
    1010:	   |   jsr 15bf0 <KPrintF>
    1016:	   |   addq.l #8,sp
    Exit(1);
    1018:	   |   moveq #1,d1
    101a:	   |   move.l d1,16(sp)
    101e:	   |   move.l 1b1aa <DOSBase>,d0
    1024:	   |   movea.l d0,a6
    1026:	   |   move.l 16(sp),d1
    102a:	   |   jsr -144(a6)
  }
  ULONG *cl = retval;
    102e:	   \-> move.l 20(sp),56(sp)
  CstClCursor = (UWORD *)cl;
    1034:	       move.l 56(sp),1b0f2 <CstClCursor>

  ULONG *clpartinstruction;
  clpartinstruction = CstClSprites;
    103c:	       move.l #109058,52(sp)
  for(int i=0; i<16;i++)
    1044:	       clr.l 48(sp)
    1048:	   /-- bra.s 106e <CstCreateCopperlist+0xa0>
    *cl++ = *clpartinstruction++;
    104a:	/--|-> move.l 52(sp),d1
    104e:	|  |   move.l d1,d2
    1050:	|  |   addq.l #4,d2
    1052:	|  |   move.l d2,52(sp)
    1056:	|  |   move.l 56(sp),d0
    105a:	|  |   move.l d0,d2
    105c:	|  |   addq.l #4,d2
    105e:	|  |   move.l d2,56(sp)
    1062:	|  |   movea.l d1,a0
    1064:	|  |   move.l (a0),d1
    1066:	|  |   movea.l d0,a0
    1068:	|  |   move.l d1,(a0)
  for(int i=0; i<16;i++)
    106a:	|  |   addq.l #1,48(sp)
    106e:	|  \-> moveq #15,d0
    1070:	|      cmp.l 48(sp),d0
    1074:	\----- bge.s 104a <CstCreateCopperlist+0x7c>

  clpartinstruction = CstClScreen;
    1076:	       move.l #109122,52(sp)

  for(int i=0; i<12;i++)
    107e:	       clr.l 44(sp)
    1082:	   /-- bra.s 10a8 <CstCreateCopperlist+0xda>
    *cl++ = *clpartinstruction++;
    1084:	/--|-> move.l 52(sp),d1
    1088:	|  |   move.l d1,d2
    108a:	|  |   addq.l #4,d2
    108c:	|  |   move.l d2,52(sp)
    1090:	|  |   move.l 56(sp),d0
    1094:	|  |   move.l d0,d2
    1096:	|  |   addq.l #4,d2
    1098:	|  |   move.l d2,56(sp)
    109c:	|  |   movea.l d1,a0
    109e:	|  |   move.l (a0),d1
    10a0:	|  |   movea.l d0,a0
    10a2:	|  |   move.l d1,(a0)
  for(int i=0; i<12;i++)
    10a4:	|  |   addq.l #1,44(sp)
    10a8:	|  \-> moveq #11,d0
    10aa:	|      cmp.l 44(sp),d0
    10ae:	\----- bge.s 1084 <CstCreateCopperlist+0xb6>

  clpartinstruction = CstClBitplanes;
    10b0:	       move.l #109170,52(sp)
  for(int i=0; i<10;i++)
    10b8:	       clr.l 40(sp)
    10bc:	   /-- bra.s 10e2 <CstCreateCopperlist+0x114>
    *cl++ = *clpartinstruction++;        
    10be:	/--|-> move.l 52(sp),d1
    10c2:	|  |   move.l d1,d2
    10c4:	|  |   addq.l #4,d2
    10c6:	|  |   move.l d2,52(sp)
    10ca:	|  |   move.l 56(sp),d0
    10ce:	|  |   move.l d0,d2
    10d0:	|  |   addq.l #4,d2
    10d2:	|  |   move.l d2,56(sp)
    10d6:	|  |   movea.l d1,a0
    10d8:	|  |   move.l (a0),d1
    10da:	|  |   movea.l d0,a0
    10dc:	|  |   move.l d1,(a0)
  for(int i=0; i<10;i++)
    10de:	|  |   addq.l #1,40(sp)
    10e2:	|  \-> moveq #9,d0
    10e4:	|      cmp.l 40(sp),d0
    10e8:	\----- bge.s 10be <CstCreateCopperlist+0xf0>

  
  clpartinstruction = CstClColorTemplate;
    10ea:	       move.l #109210,52(sp)
  CstClColor = (UWORD *) cl;
    10f2:	       move.l 56(sp),1b0ea <CstClColor>
  for(int i=0; i<32;i++)
    10fa:	       clr.l 36(sp)
    10fe:	   /-- bra.s 1124 <CstCreateCopperlist+0x156>
    *cl++ = *clpartinstruction++;        
    1100:	/--|-> move.l 52(sp),d1
    1104:	|  |   move.l d1,d2
    1106:	|  |   addq.l #4,d2
    1108:	|  |   move.l d2,52(sp)
    110c:	|  |   move.l 56(sp),d0
    1110:	|  |   move.l d0,d2
    1112:	|  |   addq.l #4,d2
    1114:	|  |   move.l d2,56(sp)
    1118:	|  |   movea.l d1,a0
    111a:	|  |   move.l (a0),d1
    111c:	|  |   movea.l d0,a0
    111e:	|  |   move.l d1,(a0)
  for(int i=0; i<32;i++)
    1120:	|  |   addq.l #1,36(sp)
    1124:	|  \-> moveq #31,d0
    1126:	|      cmp.l 36(sp),d0
    112a:	\----- bge.s 1100 <CstCreateCopperlist+0x132>
 
  /* Screen is bigger than real screen? Setup BPLxMod accordingly*/
  if(width > 40) {
    112c:	       moveq #40,d1
    112e:	       cmp.l 64(sp),d1
    1132:	   /-- bge.s 1190 <CstCreateCopperlist+0x1c2>
    int tmp = width - 40;
    1134:	   |   moveq #-40,d2
    1136:	   |   add.l 64(sp),d2
    113a:	   |   move.l d2,12(sp)
    UWORD *cw = (UWORD *) cl; 
    113e:	   |   move.l 56(sp),8(sp)
    *cw++ = 0x108;
    1144:	   |   move.l 8(sp),d0
    1148:	   |   move.l d0,d1
    114a:	   |   addq.l #2,d1
    114c:	   |   move.l d1,8(sp)
    1150:	   |   movea.l d0,a0
    1152:	   |   move.w #264,(a0)
    *cw++ = tmp;
    1156:	   |   move.l 8(sp),d0
    115a:	   |   move.l d0,d1
    115c:	   |   addq.l #2,d1
    115e:	   |   move.l d1,8(sp)
    1162:	   |   move.l 12(sp),d1
    1166:	   |   movea.l d0,a0
    1168:	   |   move.w d1,(a0)
    *cw++ = 0x10a;
    116a:	   |   move.l 8(sp),d0
    116e:	   |   move.l d0,d1
    1170:	   |   addq.l #2,d1
    1172:	   |   move.l d1,8(sp)
    1176:	   |   movea.l d0,a0
    1178:	   |   move.w #266,(a0)
    *cw++ = tmp;     
    117c:	   |   move.l 8(sp),d0
    1180:	   |   move.l d0,d1
    1182:	   |   addq.l #2,d1
    1184:	   |   move.l d1,8(sp)
    1188:	   |   move.l 12(sp),d1
    118c:	   |   movea.l d0,a0
    118e:	   |   move.w d1,(a0)
  }

  *cl++ = 0xfffffffe;
    1190:	   \-> move.l 56(sp),d0
    1194:	       move.l d0,d1
    1196:	       addq.l #4,d1
    1198:	       move.l d1,56(sp)
    119c:	       moveq #-2,d2
    119e:	       movea.l d0,a0
    11a0:	       move.l d2,(a0)
  return (UWORD *) retval;  
    11a2:	       move.l 20(sp),d0
}
    11a6:	       move.l (sp)+,d2
    11a8:	       movea.l (sp)+,a6
    11aa:	       lea 52(sp),sp
    11ae:	       rts

000011b0 <CstDisplayBackDrop>:

void CstDisplayBackDrop() 
{
    11b0:	                lea -40(sp),sp
    11b4:	                move.l a6,-(sp)
    11b6:	                move.l d2,-(sp)
 volatile struct Custom *custom = (struct Custom*)0xdff000;  
    11b8:	                move.l #14675968,16(sp)

  KPrintF("CstDisplayBackDrop: Started");
    11c0:	                pea 16689 <PutChar+0x149>
    11c6:	                jsr 15bf0 <KPrintF>
    11cc:	                addq.l #4,sp

  CstBackDropBufferApplyCursor = CstBackDropBufferApplyStart;
    11ce:	                move.l 1b0e2 <CstBackDropBufferApplyStart>,d0
    11d4:	                move.l d0,1b0e6 <CstBackDropBufferApplyCursor>
  UWORD *cursor = CstBackDropBufferApplyStart;
    11da:	                move.l 1b0e2 <CstBackDropBufferApplyStart>,44(sp)
  if(!*cursor || !CstDrawBuffer) {
    11e2:	                movea.l 44(sp),a0
    11e6:	                move.w (a0),d0
    11e8:	/-------------- beq.w 13e2 <CstDisplayBackDrop+0x232>
    11ec:	|               move.l 1b0d6 <CstDrawBuffer>,d0
    11f2:	+-------------- beq.w 13e2 <CstDisplayBackDrop+0x232>
    return;
  } 

  WaitBlit();
    11f6:	|               move.l 1b1ae <GfxBase>,d0
    11fc:	|               movea.l d0,a6
    11fe:	|               jsr -228(a6)
  
  custom->bltafwm = 0xffff;
    1202:	|               movea.l 16(sp),a0
    1206:	|               move.w #-1,68(a0)
  custom->bltalwm = 0xffff;  
    120c:	|               movea.l 16(sp),a0
    1210:	|               move.w #-1,70(a0)
  custom->bltcon0 = 0x9f0;
    1216:	|               movea.l 16(sp),a0
    121a:	|               move.w #2544,64(a0)
  
  while(*cursor)
    1220:	|     /-------- bra.w 1388 <CstDisplayBackDrop+0x1d8>
  {    
    UWORD width = *cursor++;
    1224:	|  /--|-------> move.l 44(sp),d0
    1228:	|  |  |         move.l d0,d1
    122a:	|  |  |         addq.l #2,d1
    122c:	|  |  |         move.l d1,44(sp)
    1230:	|  |  |         movea.l d0,a0
    1232:	|  |  |         move.w (a0),14(sp)
    UWORD height = *cursor++;
    1236:	|  |  |         move.l 44(sp),d0
    123a:	|  |  |         move.l d0,d1
    123c:	|  |  |         addq.l #2,d1
    123e:	|  |  |         move.l d1,44(sp)
    1242:	|  |  |         movea.l d0,a0
    1244:	|  |  |         move.w (a0),12(sp)
    UWORD xpos = *cursor++;
    1248:	|  |  |         move.l 44(sp),d0
    124c:	|  |  |         move.l d0,d1
    124e:	|  |  |         addq.l #2,d1
    1250:	|  |  |         move.l d1,44(sp)
    1254:	|  |  |         movea.l d0,a0
    1256:	|  |  |         move.w (a0),10(sp)
    UWORD ypos = *cursor++;
    125a:	|  |  |         move.l 44(sp),d0
    125e:	|  |  |         move.l d0,d1
    1260:	|  |  |         addq.l #2,d1
    1262:	|  |  |         move.l d1,44(sp)
    1266:	|  |  |         movea.l d0,a0
    1268:	|  |  |         move.w (a0),8(sp)

    custom->bltamod = winWidth/8-width*2;
    126c:	|  |  |         move.l 1b0f6 <winWidth>,d0
    1272:	|  |  |         lsr.l #3,d0
    1274:	|  |  |         move.l d0,d1
    1276:	|  |  |         move.w 14(sp),d0
    127a:	|  |  |         add.w d0,d0
    127c:	|  |  |         sub.w d0,d1
    127e:	|  |  |         movea.l 16(sp),a0
    1282:	|  |  |         move.w d1,100(a0)
    custom->bltdmod = winWidth/8-width*2;
    1286:	|  |  |         move.l 1b0f6 <winWidth>,d0
    128c:	|  |  |         lsr.l #3,d0
    128e:	|  |  |         move.l d0,d1
    1290:	|  |  |         move.w 14(sp),d0
    1294:	|  |  |         add.w d0,d0
    1296:	|  |  |         sub.w d0,d1
    1298:	|  |  |         movea.l 16(sp),a0
    129c:	|  |  |         move.w d1,102(a0)
    ULONG bltapt = ((ULONG) CstBackDrop) + ypos*winWidth/8 + xpos;
    12a0:	|  |  |         moveq #0,d0
    12a2:	|  |  |         move.w 8(sp),d0
    12a6:	|  |  |         move.l 1b0f6 <winWidth>,d1
    12ac:	|  |  |         move.l d1,-(sp)
    12ae:	|  |  |         move.l d0,-(sp)
    12b0:	|  |  |         jsr 1642a <__mulsi3>
    12b6:	|  |  |         addq.l #8,sp
    12b8:	|  |  |         move.l d0,d1
    12ba:	|  |  |         lsr.l #3,d1
    12bc:	|  |  |         move.l 1b0c4 <CstBackDrop>,d0
    12c2:	|  |  |         add.l d0,d1
    12c4:	|  |  |         moveq #0,d0
    12c6:	|  |  |         move.w 10(sp),d0
    12ca:	|  |  |         move.l d1,d2
    12cc:	|  |  |         add.l d0,d2
    12ce:	|  |  |         move.l d2,40(sp)
    ULONG bltdpt = ((ULONG) CstDrawBuffer) + ypos*winWidth/8 + xpos;
    12d2:	|  |  |         moveq #0,d0
    12d4:	|  |  |         move.w 8(sp),d0
    12d8:	|  |  |         move.l 1b0f6 <winWidth>,d1
    12de:	|  |  |         move.l d1,-(sp)
    12e0:	|  |  |         move.l d0,-(sp)
    12e2:	|  |  |         jsr 1642a <__mulsi3>
    12e8:	|  |  |         addq.l #8,sp
    12ea:	|  |  |         move.l d0,d1
    12ec:	|  |  |         lsr.l #3,d1
    12ee:	|  |  |         move.l 1b0d6 <CstDrawBuffer>,d0
    12f4:	|  |  |         add.l d0,d1
    12f6:	|  |  |         moveq #0,d0
    12f8:	|  |  |         move.w 10(sp),d0
    12fc:	|  |  |         move.l d1,d2
    12fe:	|  |  |         add.l d0,d2
    1300:	|  |  |         move.l d2,36(sp)
    for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    1304:	|  |  |         clr.l 32(sp)
    1308:	|  |  |     /-- bra.s 1380 <CstDisplayBackDrop+0x1d0>
    {
      custom->bltapt = (APTR) bltapt;
    130a:	|  |  |  /--|-> move.l 40(sp),d0
    130e:	|  |  |  |  |   movea.l 16(sp),a0
    1312:	|  |  |  |  |   move.l d0,80(a0)
      custom->bltdpt = (APTR) bltdpt;
    1316:	|  |  |  |  |   move.l 36(sp),d0
    131a:	|  |  |  |  |   movea.l 16(sp),a0
    131e:	|  |  |  |  |   move.l d0,84(a0)
      custom->bltsize = (height << 6) + width;
    1322:	|  |  |  |  |   move.w 12(sp),d0
    1326:	|  |  |  |  |   lsl.w #6,d0
    1328:	|  |  |  |  |   add.w 14(sp),d0
    132c:	|  |  |  |  |   movea.l 16(sp),a0
    1330:	|  |  |  |  |   move.w d0,88(a0)
      bltapt += winWidth/8*winHeight;
    1334:	|  |  |  |  |   move.l 1b0f6 <winWidth>,d0
    133a:	|  |  |  |  |   lsr.l #3,d0
    133c:	|  |  |  |  |   move.l 1b0fa <winHeight>,d1
    1342:	|  |  |  |  |   move.l d1,-(sp)
    1344:	|  |  |  |  |   move.l d0,-(sp)
    1346:	|  |  |  |  |   jsr 1642a <__mulsi3>
    134c:	|  |  |  |  |   addq.l #8,sp
    134e:	|  |  |  |  |   add.l d0,40(sp)
      bltdpt += winWidth/8*winHeight;
    1352:	|  |  |  |  |   move.l 1b0f6 <winWidth>,d0
    1358:	|  |  |  |  |   lsr.l #3,d0
    135a:	|  |  |  |  |   move.l 1b0fa <winHeight>,d1
    1360:	|  |  |  |  |   move.l d1,-(sp)
    1362:	|  |  |  |  |   move.l d0,-(sp)
    1364:	|  |  |  |  |   jsr 1642a <__mulsi3>
    136a:	|  |  |  |  |   addq.l #8,sp
    136c:	|  |  |  |  |   add.l d0,36(sp)
      WaitBlit();
    1370:	|  |  |  |  |   move.l 1b1ae <GfxBase>,d0
    1376:	|  |  |  |  |   movea.l d0,a6
    1378:	|  |  |  |  |   jsr -228(a6)
    for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    137c:	|  |  |  |  |   addq.l #1,32(sp)
    1380:	|  |  |  |  \-> moveq #4,d0
    1382:	|  |  |  |      cmp.l 32(sp),d0
    1386:	|  |  |  \----- bge.s 130a <CstDisplayBackDrop+0x15a>
  while(*cursor)
    1388:	|  |  \-------> movea.l 44(sp),a0
    138c:	|  |            move.w (a0),d0
    138e:	|  \----------- bne.w 1224 <CstDisplayBackDrop+0x74>
    }  
  }
  UWORD *colorpos = CstPalette;
    1392:	|               move.l 1b0ee <CstPalette>,28(sp)
  
  UWORD *tmp = CstClColor;
    139a:	|               move.l 1b0ea <CstClColor>,24(sp)
  for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes
    13a2:	|               clr.l 20(sp)
    13a6:	|           /-- bra.s 13d8 <CstDisplayBackDrop+0x228>
    *tmp++;
    13a8:	|        /--|-> move.l 24(sp),d0
    13ac:	|        |  |   move.l d0,d1
    13ae:	|        |  |   addq.l #2,d1
    13b0:	|        |  |   move.l d1,24(sp)
    *tmp++ = *colorpos++;
    13b4:	|        |  |   move.l 28(sp),d1
    13b8:	|        |  |   move.l d1,d2
    13ba:	|        |  |   addq.l #2,d2
    13bc:	|        |  |   move.l d2,28(sp)
    13c0:	|        |  |   move.l 24(sp),d0
    13c4:	|        |  |   move.l d0,d2
    13c6:	|        |  |   addq.l #2,d2
    13c8:	|        |  |   move.l d2,24(sp)
    13cc:	|        |  |   movea.l d1,a0
    13ce:	|        |  |   move.w (a0),d1
    13d0:	|        |  |   movea.l d0,a0
    13d2:	|        |  |   move.w d1,(a0)
  for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes
    13d4:	|        |  |   addq.l #1,20(sp)
    13d8:	|        |  \-> moveq #31,d0
    13da:	|        |      cmp.l 20(sp),d0
    13de:	|        \----- bge.s 13a8 <CstDisplayBackDrop+0x1f8>
    13e0:	|           /-- bra.s 13e4 <CstDisplayBackDrop+0x234>
    return;
    13e2:	\-----------|-> nop
  }
}
    13e4:	            \-> move.l (sp)+,d2
    13e6:	                movea.l (sp)+,a6
    13e8:	                lea 40(sp),sp
    13ec:	                rts

000013ee <CstDisplayCursor>:

void CstDisplayCursor(UWORD x, UWORD y, UWORD height, UBYTE *spritedata)
{
    13ee:	lea -20(sp),sp
    13f2:	movea.l 24(sp),a0
    13f6:	move.l 28(sp),d1
    13fa:	move.l 32(sp),d0
    13fe:	movea.w a0,a0
    1400:	move.w a0,4(sp)
    1404:	move.w d1,d1
    1406:	move.w d1,2(sp)
    140a:	move.w d0,d0
    140c:	move.w d0,(sp)
  spritedata[0] = (UBYTE) (y & 0xff); //Low 8 Bits of y
    140e:	move.w 2(sp),d0
    1412:	movea.l 36(sp),a0
    1416:	move.b d0,(a0)
  spritedata[1] = (UBYTE) (x >> 1); //High 8 Bits of x
    1418:	move.w 4(sp),d0
    141c:	lsr.w #1,d0
    141e:	movea.l 36(sp),a0
    1422:	addq.l #1,a0
    1424:	move.l d0,d0
    1426:	move.b d0,(a0)
  spritedata[2] = (UBYTE) (y+height & 0xff); //Sprite Stop Low 8 Bits
    1428:	move.w 2(sp),d1
    142c:	move.w (sp),d0
    142e:	movea.l 36(sp),a0
    1432:	addq.l #2,a0
    1434:	add.b d1,d0
    1436:	move.b d0,(a0)

  UWORD lowbitx = x & 0x1;
    1438:	move.w 4(sp),d0
    143c:	andi.w #1,d0
    1440:	move.w d0,18(sp)
  UWORD vstophighbit = ((y+height) & 0x100) >> 7;
    1444:	move.w 2(sp),d0
    1448:	add.w (sp),d0
    144a:	move.w d0,d0
    144c:	andi.l #65535,d0
    1452:	asr.l #7,d0
    1454:	move.l d0,d0
    1456:	move.w d0,d1
    1458:	andi.w #2,d1
    145c:	move.w d1,16(sp)
  UWORD vstarthighbit = (y & 0x100) >> 6;
    1460:	moveq #0,d0
    1462:	move.w 2(sp),d0
    1466:	asr.l #6,d0
    1468:	move.l d0,d0
    146a:	move.w d0,d1
    146c:	andi.w #4,d1
    1470:	move.w d1,14(sp)

  spritedata[3] = lowbitx + vstophighbit + vstarthighbit; //Low Bit X, Sprite Stop High Bit
    1474:	move.w 18(sp),d1
    1478:	move.w 16(sp),d0
    147c:	add.b d0,d1
    147e:	move.w 14(sp),d0
    1482:	movea.l 36(sp),a0
    1486:	addq.l #3,a0
    1488:	add.b d1,d0
    148a:	move.b d0,(a0)

  ULONG ptr = (ULONG) spritedata; 
    148c:	move.l 36(sp),10(sp)
  UWORD loptr = (UWORD) ptr & 0xffff;
    1492:	move.w 12(sp),8(sp)
  UWORD hiptr = ptr >> 16;
    1498:	move.l 10(sp),d0
    149c:	clr.w d0
    149e:	swap d0
    14a0:	move.w d0,6(sp)

  CstClCursor[1] = hiptr;
    14a4:	move.l 1b0f2 <CstClCursor>,d0
    14aa:	movea.l d0,a0
    14ac:	addq.l #2,a0
    14ae:	move.w 6(sp),(a0)
  CstClCursor[3] = loptr;
    14b2:	move.l 1b0f2 <CstClCursor>,d0
    14b8:	movea.l d0,a0
    14ba:	addq.l #6,a0
    14bc:	move.w 8(sp),(a0)

}
    14c0:	nop
    14c2:	lea 20(sp),sp
    14c6:	rts

000014c8 <CstDrawBackdrop>:

void CstDrawBackdrop() {  
  if(CstApplyBackDropCounter > 0) 
    14c8:	    move.w 1b0d0 <CstApplyBackDropCounter>,d0
    14ce:	/-- beq.s 14e4 <CstDrawBackdrop+0x1c>
  {
    CstDisplayBackDrop();
    14d0:	|   jsr 11b0 <CstDisplayBackDrop>
    CstApplyBackDropCounter--;
    14d6:	|   move.w 1b0d0 <CstApplyBackDropCounter>,d0
    14dc:	|   subq.w #1,d0
    14de:	|   move.w d0,1b0d0 <CstApplyBackDropCounter>
  }    
}
    14e4:	\-> nop
    14e6:	    rts

000014e8 <CstFreeBuffer>:

void CstFreeBuffer( ) {
    14e8:	    lea -20(sp),sp
    14ec:	    move.l a6,-(sp)
  if( CstDrawBuffer) FreeVec(CstDrawBuffer);
    14ee:	    move.l 1b0d6 <CstDrawBuffer>,d0
    14f4:	/-- beq.s 150e <CstFreeBuffer+0x26>
    14f6:	|   move.l 1b0d6 <CstDrawBuffer>,20(sp)
    14fe:	|   move.l 1b1a2 <SysBase>,d0
    1504:	|   movea.l d0,a6
    1506:	|   movea.l 20(sp),a1
    150a:	|   jsr -690(a6)
  if( CstViewBuffer) FreeVec(CstViewBuffer);
    150e:	\-> move.l 1b0d2 <CstViewBuffer>,d0
    1514:	/-- beq.s 152e <CstFreeBuffer+0x46>
    1516:	|   move.l 1b0d2 <CstViewBuffer>,16(sp)
    151e:	|   move.l 1b1a2 <SysBase>,d0
    1524:	|   movea.l d0,a6
    1526:	|   movea.l 16(sp),a1
    152a:	|   jsr -690(a6)
  if( CstCopperList) FreeVec(CstCopperList);  
    152e:	\-> move.l 1b0cc <CstCopperList>,d0
    1534:	/-- beq.s 154e <CstFreeBuffer+0x66>
    1536:	|   move.l 1b0cc <CstCopperList>,12(sp)
    153e:	|   move.l 1b1a2 <SysBase>,d0
    1544:	|   movea.l d0,a6
    1546:	|   movea.l 12(sp),a1
    154a:	|   jsr -690(a6)
  if( CstBackDrop) FreeVec(CstBackDrop);  
    154e:	\-> move.l 1b0c4 <CstBackDrop>,d0
    1554:	/-- beq.s 156e <CstFreeBuffer+0x86>
    1556:	|   move.l 1b0c4 <CstBackDrop>,8(sp)
    155e:	|   move.l 1b1a2 <SysBase>,d0
    1564:	|   movea.l d0,a6
    1566:	|   movea.l 8(sp),a1
    156a:	|   jsr -690(a6)
  if( CstBackDropBackup) FreeVec(CstBackDropBackup);
    156e:	\-> move.l 1b0c8 <CstBackDropBackup>,d0
    1574:	/-- beq.s 158e <CstFreeBuffer+0xa6>
    1576:	|   move.l 1b0c8 <CstBackDropBackup>,4(sp)
    157e:	|   move.l 1b1a2 <SysBase>,d0
    1584:	|   movea.l d0,a6
    1586:	|   movea.l 4(sp),a1
    158a:	|   jsr -690(a6)
  CstDrawBuffer = NULL;
    158e:	\-> clr.l 1b0d6 <CstDrawBuffer>
  CstViewBuffer = NULL;
    1594:	    clr.l 1b0d2 <CstViewBuffer>
  CstCopperList = NULL;
    159a:	    clr.l 1b0cc <CstCopperList>
  CstBackDrop = NULL;
    15a0:	    clr.l 1b0c4 <CstBackDrop>

}
    15a6:	    nop
    15a8:	    movea.l (sp)+,a6
    15aa:	    lea 20(sp),sp
    15ae:	    rts

000015b0 <CstFreeze>:



void CstFreeze( ) {
    15b0:	       lea -36(sp),sp
    15b4:	       move.l a6,-(sp)
    15b6:	       move.l d2,-(sp)

	KPrintF("CstFreeze: Freezing Background Started");  
    15b8:	       pea 166a5 <PutChar+0x165>
    15be:	       jsr 15bf0 <KPrintF>
    15c4:	       addq.l #4,sp

  UWORD size = winWidth/8*winHeight*5;
    15c6:	       move.l 1b0f6 <winWidth>,d0
    15cc:	       lsr.l #3,d0
    15ce:	       move.l d0,d1
    15d0:	       move.l 1b0fa <winHeight>,d0
    15d6:	       move.l d0,d0
    15d8:	       muls.w d0,d1
    15da:	       move.w d1,d0
    15dc:	       add.w d0,d0
    15de:	       add.w d0,d0
    15e0:	       move.w d0,d2
    15e2:	       add.w d1,d2
    15e4:	       move.w d2,26(sp)

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    15e8:	       move.l #14675968,22(sp)

  //Backup Existing Backdrop to save location
  CstBackDropBackup = AllocVec(size, MEMF_ANY);
    15f0:	       moveq #0,d0
    15f2:	       move.w 26(sp),d0
    15f6:	       move.l d0,18(sp)
    15fa:	       clr.l 14(sp)
    15fe:	       move.l 1b1a2 <SysBase>,d0
    1604:	       movea.l d0,a6
    1606:	       move.l 18(sp),d0
    160a:	       move.l 14(sp),d1
    160e:	       jsr -684(a6)
    1612:	       move.l d0,10(sp)
    1616:	       move.l 10(sp),d0
    161a:	       move.l d0,1b0c8 <CstBackDropBackup>
  if( !CstBackDropBackup)
    1620:	       move.l 1b0c8 <CstBackDropBackup>,d0
    1626:	   /-- bne.s 1636 <CstFreeze+0x86>
  {
    KPrintF("CstFreeze: Cannot allocate Memory for CstBackDropBackup");
    1628:	   |   pea 166cc <PutChar+0x18c>
    162e:	   |   jsr 15bf0 <KPrintF>
    1634:	   |   addq.l #4,sp

#ifdef EMULATOR
  debug_register_bitmap(CstBackDropBackup, "BackDropBackup", winWidth, winHeight, 5, 0);
#endif  

  ULONG *src = (ULONG *) CstBackDrop;
    1636:	   \-> move.l 1b0c4 <CstBackDrop>,40(sp)
  ULONG *dst = (ULONG *) CstBackDropBackup;
    163e:	       move.l 1b0c8 <CstBackDropBackup>,36(sp)
  for(int i=0;i<size/4;i++) 
    1646:	       clr.l 32(sp)
    164a:	   /-- bra.s 1670 <CstFreeze+0xc0>
  {
    *dst++ = *src++;
    164c:	/--|-> move.l 40(sp),d1
    1650:	|  |   move.l d1,d0
    1652:	|  |   addq.l #4,d0
    1654:	|  |   move.l d0,40(sp)
    1658:	|  |   move.l 36(sp),d0
    165c:	|  |   move.l d0,d2
    165e:	|  |   addq.l #4,d2
    1660:	|  |   move.l d2,36(sp)
    1664:	|  |   movea.l d1,a0
    1666:	|  |   move.l (a0),d1
    1668:	|  |   movea.l d0,a0
    166a:	|  |   move.l d1,(a0)
  for(int i=0;i<size/4;i++) 
    166c:	|  |   addq.l #1,32(sp)
    1670:	|  \-> move.w 26(sp),d0
    1674:	|      lsr.w #2,d0
    1676:	|      move.w d0,d0
    1678:	|      andi.l #65535,d0
    167e:	|      cmp.l 32(sp),d0
    1682:	\----- bgt.s 164c <CstFreeze+0x9c>
  }

  //Replace existing Backdrop with ViewBuffer
  src = (ULONG *) CstViewBuffer;
    1684:	       move.l 1b0d2 <CstViewBuffer>,40(sp)
  dst = (ULONG *) CstBackDrop;
    168c:	       move.l 1b0c4 <CstBackDrop>,36(sp)

  for(int i=0;i<size/4;i++) 
    1694:	       clr.l 28(sp)
    1698:	   /-- bra.s 16be <CstFreeze+0x10e>
  {
    *dst++ = *src++;
    169a:	/--|-> move.l 40(sp),d1
    169e:	|  |   move.l d1,d0
    16a0:	|  |   addq.l #4,d0
    16a2:	|  |   move.l d0,40(sp)
    16a6:	|  |   move.l 36(sp),d0
    16aa:	|  |   move.l d0,d2
    16ac:	|  |   addq.l #4,d2
    16ae:	|  |   move.l d2,36(sp)
    16b2:	|  |   movea.l d1,a0
    16b4:	|  |   move.l (a0),d1
    16b6:	|  |   movea.l d0,a0
    16b8:	|  |   move.l d1,(a0)
  for(int i=0;i<size/4;i++) 
    16ba:	|  |   addq.l #1,28(sp)
    16be:	|  \-> move.w 26(sp),d0
    16c2:	|      lsr.w #2,d0
    16c4:	|      move.w d0,d0
    16c6:	|      andi.l #65535,d0
    16cc:	|      cmp.l 28(sp),d0
    16d0:	\----- bgt.s 169a <CstFreeze+0xea>
  }

  CstApplyBackDropCounter = 2;
    16d2:	       move.w #2,1b0d0 <CstApplyBackDropCounter>

  *CstBackDropBufferApplyCursor++ = winWidth/16;
    16da:	       move.l 1b0f6 <winWidth>,d0
    16e0:	       lsr.l #4,d0
    16e2:	       movea.l 1b0e6 <CstBackDropBufferApplyCursor>,a0
    16e8:	       move.l a0,d1
    16ea:	       addq.l #2,d1
    16ec:	       move.l d1,1b0e6 <CstBackDropBufferApplyCursor>
    16f2:	       move.l d0,d0
    16f4:	       move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = winHeight;
    16f6:	       move.l 1b0fa <winHeight>,d0
    16fc:	       movea.l 1b0e6 <CstBackDropBufferApplyCursor>,a0
    1702:	       move.l a0,d1
    1704:	       addq.l #2,d1
    1706:	       move.l d1,1b0e6 <CstBackDropBufferApplyCursor>
    170c:	       move.l d0,d0
    170e:	       move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = 0;
    1710:	       movea.l 1b0e6 <CstBackDropBufferApplyCursor>,a0
    1716:	       move.l a0,d0
    1718:	       addq.l #2,d0
    171a:	       move.l d0,1b0e6 <CstBackDropBufferApplyCursor>
    1720:	       clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    1722:	       movea.l 1b0e6 <CstBackDropBufferApplyCursor>,a0
    1728:	       move.l a0,d0
    172a:	       addq.l #2,d0
    172c:	       move.l d0,1b0e6 <CstBackDropBufferApplyCursor>
    1732:	       clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    1734:	       movea.l 1b0e6 <CstBackDropBufferApplyCursor>,a0
    173a:	       move.l a0,d0
    173c:	       addq.l #2,d0
    173e:	       move.l d0,1b0e6 <CstBackDropBufferApplyCursor>
    1744:	       clr.w (a0)

  KPrintF("CstFreeze: Finished");
    1746:	       pea 16704 <PutChar+0x1c4>
    174c:	       jsr 15bf0 <KPrintF>
    1752:	       addq.l #4,sp

}
    1754:	       nop
    1756:	       move.l (sp)+,d2
    1758:	       movea.l (sp)+,a6
    175a:	       lea 36(sp),sp
    175e:	       rts

00001760 <CstLoadBackdrop>:

void CstLoadBackdrop( BPTR fp, int x, int y) {
    1760:	             lea -144(sp),sp
    1764:	             movem.l d2-d4/a6,-(sp)

	KPrintF("CstLoadBackDrop: Loading of Background started");
    1768:	             pea 16718 <PutChar+0x1d8>
    176e:	             jsr 15bf0 <KPrintF>
    1774:	             addq.l #4,sp

  UWORD width = get2bytes(fp);
    1776:	             move.l 164(sp),-(sp)
    177a:	             jsr 6bc <get2bytes>
    1780:	             addq.l #4,sp
    1782:	             move.w d0,134(sp)
  UWORD height = get2bytes(fp);  
    1786:	             move.l 164(sp),-(sp)
    178a:	             jsr 6bc <get2bytes>
    1790:	             addq.l #4,sp
    1792:	             move.w d0,132(sp)

  UWORD widthbyteslayer = width/8;
    1796:	             move.w 134(sp),d0
    179a:	             lsr.w #3,d0
    179c:	             move.w d0,130(sp)
  UWORD widthwordslayer = widthbyteslayer/2;  
    17a0:	             move.w 130(sp),d0
    17a4:	             lsr.w #1,d0
    17a6:	             move.w d0,128(sp)
  UWORD widthbytesbackdrop = winWidth / 8;
    17aa:	             move.l 1b0f6 <winWidth>,d0
    17b0:	             lsr.l #3,d0
    17b2:	             move.w d0,126(sp)
  UWORD sizeplane =  widthbyteslayer*height;
    17b6:	             move.w 130(sp),d0
    17ba:	             muls.w 132(sp),d0
    17be:	             move.w d0,124(sp)
  UWORD size = sizeplane * 5; //Todo other number of bitplanes
    17c2:	             move.w 124(sp),d1
    17c6:	             move.w d1,d0
    17c8:	             add.w d0,d0
    17ca:	             add.w d0,d0
    17cc:	             move.w d0,d2
    17ce:	             add.w d1,d2
    17d0:	             move.w d2,122(sp)

  //Load Palette to Copper
  if( CstPaletteLoaded == 0)
    17d4:	             move.w 1b0be <CstPaletteLoaded>,d0
    17da:	/----------- bne.w 1874 <CstLoadBackdrop+0x114>
  {    
    UWORD reg = 0x180;
    17de:	|            move.w #384,120(sp)

    if(CstPalette) {
    17e4:	|            move.l 1b0ee <CstPalette>,d0
    17ea:	|        /-- beq.s 1804 <CstLoadBackdrop+0xa4>
      FreeVec(CstPalette);
    17ec:	|        |   move.l 1b0ee <CstPalette>,116(sp)
    17f4:	|        |   move.l 1b1a2 <SysBase>,d0
    17fa:	|        |   movea.l d0,a6
    17fc:	|        |   movea.l 116(sp),a1
    1800:	|        |   jsr -690(a6)
    }

    CstPalette = AllocVec(32*2,MEMF_ANY); //ToDo other number of bitplanes
    1804:	|        \-> moveq #64,d0
    1806:	|            move.l d0,112(sp)
    180a:	|            clr.l 108(sp)
    180e:	|            move.l 1b1a2 <SysBase>,d0
    1814:	|            movea.l d0,a6
    1816:	|            move.l 112(sp),d0
    181a:	|            move.l 108(sp),d1
    181e:	|            jsr -684(a6)
    1822:	|            move.l d0,104(sp)
    1826:	|            move.l 104(sp),d0
    182a:	|            move.l d0,1b0ee <CstPalette>
    CstPaletteLoaded = 1;
    1830:	|            move.w #1,1b0be <CstPaletteLoaded>
    UWORD *tmp = CstPalette;
    1838:	|            move.l 1b0ee <CstPalette>,156(sp)
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    1840:	|            clr.l 152(sp)
    1844:	|        /-- bra.s 186a <CstLoadBackdrop+0x10a>
      *tmp++ = get2bytes(fp);
    1846:	|     /--|-> move.l 164(sp),-(sp)
    184a:	|     |  |   jsr 6bc <get2bytes>
    1850:	|     |  |   addq.l #4,sp
    1852:	|     |  |   move.l d0,d1
    1854:	|     |  |   move.l 156(sp),d0
    1858:	|     |  |   move.l d0,d2
    185a:	|     |  |   addq.l #2,d2
    185c:	|     |  |   move.l d2,156(sp)
    1860:	|     |  |   move.l d1,d1
    1862:	|     |  |   movea.l d0,a0
    1864:	|     |  |   move.w d1,(a0)
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    1866:	|     |  |   addq.l #1,152(sp)
    186a:	|     |  \-> moveq #31,d0
    186c:	|     |      cmp.l 152(sp),d0
    1870:	|     \----- bge.s 1846 <CstLoadBackdrop+0xe6>
    1872:	|  /-------- bra.s 1892 <CstLoadBackdrop+0x132>
    }
  }
  else
  //There's already a palette loaded for this background. Do not load palette
  {
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    1874:	\--|-------> clr.l 148(sp)
    1878:	   |     /-- bra.s 188a <CstLoadBackdrop+0x12a>
      get2bytes(fp);
    187a:	   |  /--|-> move.l 164(sp),-(sp)
    187e:	   |  |  |   jsr 6bc <get2bytes>
    1884:	   |  |  |   addq.l #4,sp
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    1886:	   |  |  |   addq.l #1,148(sp)
    188a:	   |  |  \-> moveq #31,d2
    188c:	   |  |      cmp.l 148(sp),d2
    1890:	   |  \----- bge.s 187a <CstLoadBackdrop+0x11a>
    }
  }

  //Load Picture From Disk
  UWORD *tmpbuffer = AllocVec(size, MEMF_CHIP); //Todo other number of bitplanes
    1892:	   \-------> moveq #0,d0
    1894:	             move.w 122(sp),d0
    1898:	             move.l d0,100(sp)
    189c:	             moveq #2,d0
    189e:	             move.l d0,96(sp)
    18a2:	             move.l 1b1a2 <SysBase>,d0
    18a8:	             movea.l d0,a6
    18aa:	             move.l 100(sp),d0
    18ae:	             move.l 96(sp),d1
    18b2:	             jsr -684(a6)
    18b6:	             move.l d0,92(sp)
    18ba:	             move.l 92(sp),d0
    18be:	             move.l d0,88(sp)
  if( !tmpbuffer)
    18c2:	         /-- bne.s 18d2 <CstLoadBackdrop+0x172>
  {
    KPrintF("CstLoadBackDrop: Cannot allocate Memory for tmpbuffer");
    18c4:	         |   pea 16747 <PutChar+0x207>
    18ca:	         |   jsr 15bf0 <KPrintF>
    18d0:	         |   addq.l #4,sp
  }
  UWORD *tmpmask = AllocVec(sizeplane, MEMF_CHIP);
    18d2:	         \-> moveq #0,d0
    18d4:	             move.w 124(sp),d0
    18d8:	             move.l d0,84(sp)
    18dc:	             moveq #2,d2
    18de:	             move.l d2,80(sp)
    18e2:	             move.l 1b1a2 <SysBase>,d0
    18e8:	             movea.l d0,a6
    18ea:	             move.l 84(sp),d0
    18ee:	             move.l 80(sp),d1
    18f2:	             jsr -684(a6)
    18f6:	             move.l d0,76(sp)
    18fa:	             move.l 76(sp),d0
    18fe:	             move.l d0,72(sp)
  if( !tmpmask)
    1902:	         /-- bne.s 1912 <CstLoadBackdrop+0x1b2>
  {
    KPrintF("CstLoadBackDrop: Cannot allocate Memory for tmpmask");
    1904:	         |   pea 1677d <PutChar+0x23d>
    190a:	         |   jsr 15bf0 <KPrintF>
    1910:	         |   addq.l #4,sp
#ifdef EMULATOR
  debug_register_bitmap(tmpbuffer, "tmpbuffer.bpl", width, height, 5, 0);
  debug_register_bitmap(tmpbuffer, "tmpmask.bpl", width, height, 1, 0);
#endif  

  UWORD count = FRead( fp, tmpbuffer, 2, size/2);
    1912:	         \-> move.l 164(sp),68(sp)
    1918:	             move.l 88(sp),64(sp)
    191e:	             moveq #2,d0
    1920:	             move.l d0,60(sp)
    1924:	             move.w 122(sp),d0
    1928:	             lsr.w #1,d0
    192a:	             move.w d0,d0
    192c:	             andi.l #65535,d0
    1932:	             move.l d0,56(sp)
    1936:	             move.l 1b1aa <DOSBase>,d0
    193c:	             movea.l d0,a6
    193e:	             move.l 68(sp),d1
    1942:	             move.l 64(sp),d2
    1946:	             move.l 60(sp),d3
    194a:	             move.l 56(sp),d4
    194e:	             jsr -324(a6)
    1952:	             move.l d0,52(sp)
    1956:	             move.l 52(sp),d0
    195a:	             move.w d0,50(sp)
  if(!count) {
    195e:	         /-- bne.s 1972 <CstLoadBackdrop+0x212>
    KPrintF("Error while reading stream");
    1960:	         |   pea 167b1 <PutChar+0x271>
    1966:	         |   jsr 15bf0 <KPrintF>
    196c:	         |   addq.l #4,sp
    return;
    196e:	   /-----|-- bra.w 1bbe <CstLoadBackdrop+0x45e>
  }  
  count = FRead( fp, tmpmask, 2, sizeplane/2);
    1972:	   |     \-> move.l 164(sp),46(sp)
    1978:	   |         move.l 72(sp),42(sp)
    197e:	   |         moveq #2,d2
    1980:	   |         move.l d2,38(sp)
    1984:	   |         move.w 124(sp),d0
    1988:	   |         lsr.w #1,d0
    198a:	   |         move.w d0,d0
    198c:	   |         andi.l #65535,d0
    1992:	   |         move.l d0,34(sp)
    1996:	   |         move.l 1b1aa <DOSBase>,d0
    199c:	   |         movea.l d0,a6
    199e:	   |         move.l 46(sp),d1
    19a2:	   |         move.l 42(sp),d2
    19a6:	   |         move.l 38(sp),d3
    19aa:	   |         move.l 34(sp),d4
    19ae:	   |         jsr -324(a6)
    19b2:	   |         move.l d0,30(sp)
    19b6:	   |         move.l 30(sp),d0
    19ba:	   |         move.w d0,50(sp)
   

  if(!count) {
    19be:	   |     /-- bne.s 19d2 <CstLoadBackdrop+0x272>
    KPrintF("Error while reading stream");
    19c0:	   |     |   pea 167b1 <PutChar+0x271>
    19c6:	   |     |   jsr 15bf0 <KPrintF>
    19cc:	   |     |   addq.l #4,sp
    return;
    19ce:	   +-----|-- bra.w 1bbe <CstLoadBackdrop+0x45e>
  }

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    19d2:	   |     \-> move.l #14675968,26(sp)

  ULONG backdropcursor = (ULONG) CstBackDrop; 
    19da:	   |         move.l 1b0c4 <CstBackDrop>,d0
    19e0:	   |         move.l d0,144(sp)
  UWORD offset = widthbytesbackdrop*y + x / 8;
    19e4:	   |         move.l 172(sp),d0
    19e8:	   |         move.w d0,d1
    19ea:	   |         muls.w 126(sp),d1
    19ee:	   |         move.l 168(sp),d0
    19f2:	   |     /-- bpl.s 19f6 <CstLoadBackdrop+0x296>
    19f4:	   |     |   addq.l #7,d0
    19f6:	   |     \-> asr.l #3,d0
    19f8:	   |         move.l d0,d0
    19fa:	   |         movea.w d1,a0
    19fc:	   |         adda.w d0,a0
    19fe:	   |         move.w a0,24(sp)
  backdropcursor += offset; 
    1a02:	   |         moveq #0,d0
    1a04:	   |         move.w 24(sp),d0
    1a08:	   |         add.l d0,144(sp)

 	KPrintF("CstLoadBackDrop: Starting Blit");
    1a0c:	   |         pea 167cc <PutChar+0x28c>
    1a12:	   |         jsr 15bf0 <KPrintF>
    1a18:	   |         addq.l #4,sp


  WaitBlit();
    1a1a:	   |         move.l 1b1ae <GfxBase>,d0
    1a20:	   |         movea.l d0,a6
    1a22:	   |         jsr -228(a6)

  custom->bltafwm = 0xffff;
    1a26:	   |         movea.l 26(sp),a0
    1a2a:	   |         move.w #-1,68(a0)
  custom->bltalwm = 0xffff;
    1a30:	   |         movea.l 26(sp),a0
    1a34:	   |         move.w #-1,70(a0)
  custom->bltamod = 0;
    1a3a:	   |         movea.l 26(sp),a0
    1a3e:	   |         move.w #0,100(a0)
  custom->bltbmod = 0;
    1a44:	   |         movea.l 26(sp),a0
    1a48:	   |         move.w #0,98(a0)
  custom->bltcmod = widthbytesbackdrop - widthbyteslayer;
    1a4e:	   |         move.w 126(sp),d0
    1a52:	   |         sub.w 130(sp),d0
    1a56:	   |         movea.l 26(sp),a0
    1a5a:	   |         move.w d0,96(a0)
  custom->bltdmod = widthbytesbackdrop - widthbyteslayer;
    1a5e:	   |         move.w 126(sp),d0
    1a62:	   |         sub.w 130(sp),d0
    1a66:	   |         movea.l 26(sp),a0
    1a6a:	   |         move.w d0,102(a0)
  custom->bltcon0 = 0xfca;
    1a6e:	   |         movea.l 26(sp),a0
    1a72:	   |         move.w #4042,64(a0)
  custom->bltcon1 = 0;
    1a78:	   |         movea.l 26(sp),a0
    1a7c:	   |         move.w #0,66(a0)
  
  ULONG tmpbuffercursor = (ULONG) tmpbuffer;
    1a82:	   |         move.l 88(sp),140(sp)
  for(int i=0;i<5;i++) //Todo other number of bitplanes
    1a88:	   |         clr.l 136(sp)
    1a8c:	   |     /-- bra.s 1aee <CstLoadBackdrop+0x38e>
  {    
    custom->bltapt = (APTR) tmpmask;
    1a8e:	   |  /--|-> movea.l 26(sp),a0
    1a92:	   |  |  |   move.l 72(sp),80(a0)
    custom->bltbpt = (APTR) tmpbuffercursor;
    1a98:	   |  |  |   move.l 140(sp),d0
    1a9c:	   |  |  |   movea.l 26(sp),a0
    1aa0:	   |  |  |   move.l d0,76(a0)
    custom->bltcpt = (APTR)backdropcursor;
    1aa4:	   |  |  |   move.l 144(sp),d0
    1aa8:	   |  |  |   movea.l 26(sp),a0
    1aac:	   |  |  |   move.l d0,72(a0)
    custom->bltdpt = (APTR) backdropcursor;
    1ab0:	   |  |  |   move.l 144(sp),d0
    1ab4:	   |  |  |   movea.l 26(sp),a0
    1ab8:	   |  |  |   move.l d0,84(a0)
    custom->bltsize = (height<<6)+widthwordslayer;
    1abc:	   |  |  |   move.w 132(sp),d0
    1ac0:	   |  |  |   lsl.w #6,d0
    1ac2:	   |  |  |   add.w 128(sp),d0
    1ac6:	   |  |  |   movea.l 26(sp),a0
    1aca:	   |  |  |   move.w d0,88(a0)
    tmpbuffercursor += sizeplane;
    1ace:	   |  |  |   moveq #0,d0
    1ad0:	   |  |  |   move.w 124(sp),d0
    1ad4:	   |  |  |   add.l d0,140(sp)
    backdropcursor += CstBackdropSizePlane;
    1ad8:	   |  |  |   move.w 1b0c2 <CstBackdropSizePlane>,d0
    1ade:	   |  |  |   move.w d0,d0
    1ae0:	   |  |  |   andi.l #65535,d0
    1ae6:	   |  |  |   add.l d0,144(sp)
  for(int i=0;i<5;i++) //Todo other number of bitplanes
    1aea:	   |  |  |   addq.l #1,136(sp)
    1aee:	   |  |  \-> moveq #4,d0
    1af0:	   |  |      cmp.l 136(sp),d0
    1af4:	   |  \----- bge.s 1a8e <CstLoadBackdrop+0x32e>
  }    

  WaitBlit();
    1af6:	   |         move.l 1b1ae <GfxBase>,d0
    1afc:	   |         movea.l d0,a6
    1afe:	   |         jsr -228(a6)

 	KPrintF("CstLoadBackDrop: Freeing Memory");
    1b02:	   |         pea 167eb <PutChar+0x2ab>
    1b08:	   |         jsr 15bf0 <KPrintF>
    1b0e:	   |         addq.l #4,sp


  FreeVec(tmpbuffer);
    1b10:	   |         move.l 88(sp),20(sp)
    1b16:	   |         move.l 1b1a2 <SysBase>,d0
    1b1c:	   |         movea.l d0,a6
    1b1e:	   |         movea.l 20(sp),a1
    1b22:	   |         jsr -690(a6)
  FreeVec(tmpmask);
    1b26:	   |         move.l 72(sp),16(sp)
    1b2c:	   |         move.l 1b1a2 <SysBase>,d0
    1b32:	   |         movea.l d0,a6
    1b34:	   |         movea.l 16(sp),a1
    1b38:	   |         jsr -690(a6)

  CstApplyBackDropCounter = 2;
    1b3c:	   |         move.w #2,1b0d0 <CstApplyBackDropCounter>

  *CstBackDropBufferApplyCursor++ = winWidth/16;
    1b44:	   |         move.l 1b0f6 <winWidth>,d0
    1b4a:	   |         lsr.l #4,d0
    1b4c:	   |         movea.l 1b0e6 <CstBackDropBufferApplyCursor>,a0
    1b52:	   |         move.l a0,d1
    1b54:	   |         addq.l #2,d1
    1b56:	   |         move.l d1,1b0e6 <CstBackDropBufferApplyCursor>
    1b5c:	   |         move.l d0,d0
    1b5e:	   |         move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = winHeight;
    1b60:	   |         move.l 1b0fa <winHeight>,d0
    1b66:	   |         movea.l 1b0e6 <CstBackDropBufferApplyCursor>,a0
    1b6c:	   |         move.l a0,d1
    1b6e:	   |         addq.l #2,d1
    1b70:	   |         move.l d1,1b0e6 <CstBackDropBufferApplyCursor>
    1b76:	   |         move.l d0,d0
    1b78:	   |         move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = 0;
    1b7a:	   |         movea.l 1b0e6 <CstBackDropBufferApplyCursor>,a0
    1b80:	   |         move.l a0,d0
    1b82:	   |         addq.l #2,d0
    1b84:	   |         move.l d0,1b0e6 <CstBackDropBufferApplyCursor>
    1b8a:	   |         clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    1b8c:	   |         movea.l 1b0e6 <CstBackDropBufferApplyCursor>,a0
    1b92:	   |         move.l a0,d0
    1b94:	   |         addq.l #2,d0
    1b96:	   |         move.l d0,1b0e6 <CstBackDropBufferApplyCursor>
    1b9c:	   |         clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    1b9e:	   |         movea.l 1b0e6 <CstBackDropBufferApplyCursor>,a0
    1ba4:	   |         move.l a0,d0
    1ba6:	   |         addq.l #2,d0
    1ba8:	   |         move.l d0,1b0e6 <CstBackDropBufferApplyCursor>
    1bae:	   |         clr.w (a0)

  KPrintF("CstLoadBackDrop: Finished");
    1bb0:	   |         pea 1680b <PutChar+0x2cb>
    1bb6:	   |         jsr 15bf0 <KPrintF>
    1bbc:	   |         addq.l #4,sp

}
    1bbe:	   \-------> movem.l (sp)+,d2-d4/a6
    1bc2:	             lea 144(sp),sp
    1bc6:	             rts

00001bc8 <CstRestoreScreen>:

ULONG test = 0;

void CstRestoreScreen()
{
    1bc8:	                   lea -24(sp),sp
    1bcc:	                   move.l a6,-(sp)
    1bce:	                   move.l d2,-(sp)
  volatile struct Custom *custom = (struct Custom*)0xdff000;  
    1bd0:	                   move.l #14675968,16(sp)

  //struct CleanupQueue *cursor  = CstCleanupQueueDrawBuffer;
  if(!CstCleanupQueueDrawBuffer || !CstDrawBuffer) {
    1bd8:	                   move.l 1b0de <CstCleanupQueueDrawBuffer>,d0
    1bde:	/----------------- beq.w 1de6 <CstRestoreScreen+0x21e>
    1be2:	|                  move.l 1b0d6 <CstDrawBuffer>,d0
    1be8:	+----------------- beq.w 1de6 <CstRestoreScreen+0x21e>
    return;
  } 

  WaitBlit();
    1bec:	|                  move.l 1b1ae <GfxBase>,d0
    1bf2:	|                  movea.l d0,a6
    1bf4:	|                  jsr -228(a6)
  
  custom->bltafwm = 0xffff;
    1bf8:	|                  movea.l 16(sp),a0
    1bfc:	|                  move.w #-1,68(a0)
  custom->bltalwm = 0xffff;  
    1c02:	|                  movea.l 16(sp),a0
    1c06:	|                  move.w #-1,70(a0)
  custom->bltcon0 = 0x9f0;
    1c0c:	|                  movea.l 16(sp),a0
    1c10:	|                  move.w #2544,64(a0)
  
  while(CstCleanupQueueDrawBuffer)
    1c16:	|     /----------- bra.w 1dda <CstRestoreScreen+0x212>
  {    

    if( CstCleanupQueueDrawBuffer->person && CstCleanupQueueDrawBuffer->person->samePosCount < 3)
    1c1a:	|  /--|----------> movea.l 1b0de <CstCleanupQueueDrawBuffer>,a0
    1c20:	|  |  |            move.l 4(a0),d0
    1c24:	|  |  |  /-------- beq.w 1da8 <CstRestoreScreen+0x1e0>
    1c28:	|  |  |  |         movea.l 1b0de <CstCleanupQueueDrawBuffer>,a0
    1c2e:	|  |  |  |         movea.l 4(a0),a0
    1c32:	|  |  |  |         move.l 16(a0),d0
    1c36:	|  |  |  |         moveq #2,d1
    1c38:	|  |  |  |         cmp.l d0,d1
    1c3a:	|  |  |  +-------- blt.w 1da8 <CstRestoreScreen+0x1e0>
    {
      custom->bltamod = winWidth/8-CstCleanupQueueDrawBuffer->widthinwords*2;
    1c3e:	|  |  |  |         move.l 1b0f6 <winWidth>,d0
    1c44:	|  |  |  |         lsr.l #3,d0
    1c46:	|  |  |  |         move.l d0,d1
    1c48:	|  |  |  |         movea.l 1b0de <CstCleanupQueueDrawBuffer>,a0
    1c4e:	|  |  |  |         move.w 8(a0),d0
    1c52:	|  |  |  |         add.w d0,d0
    1c54:	|  |  |  |         sub.w d0,d1
    1c56:	|  |  |  |         movea.l 16(sp),a0
    1c5a:	|  |  |  |         move.w d1,100(a0)
      custom->bltdmod = winWidth/8-CstCleanupQueueDrawBuffer->widthinwords*2;
    1c5e:	|  |  |  |         move.l 1b0f6 <winWidth>,d0
    1c64:	|  |  |  |         lsr.l #3,d0
    1c66:	|  |  |  |         move.l d0,d1
    1c68:	|  |  |  |         movea.l 1b0de <CstCleanupQueueDrawBuffer>,a0
    1c6e:	|  |  |  |         move.w 8(a0),d0
    1c72:	|  |  |  |         add.w d0,d0
    1c74:	|  |  |  |         sub.w d0,d1
    1c76:	|  |  |  |         movea.l 16(sp),a0
    1c7a:	|  |  |  |         move.w d1,102(a0)
      ULONG bltapt = ((ULONG) CstBackDrop) + CstCleanupQueueDrawBuffer->starty*winWidth/8 + CstCleanupQueueDrawBuffer->startxinbytes;
    1c7e:	|  |  |  |         movea.l 1b0de <CstCleanupQueueDrawBuffer>,a0
    1c84:	|  |  |  |         move.w 14(a0),d0
    1c88:	|  |  |  |         move.w d0,d0
    1c8a:	|  |  |  |         andi.l #65535,d0
    1c90:	|  |  |  |         move.l 1b0f6 <winWidth>,d1
    1c96:	|  |  |  |         move.l d1,-(sp)
    1c98:	|  |  |  |         move.l d0,-(sp)
    1c9a:	|  |  |  |         jsr 1642a <__mulsi3>
    1ca0:	|  |  |  |         addq.l #8,sp
    1ca2:	|  |  |  |         move.l d0,d1
    1ca4:	|  |  |  |         lsr.l #3,d1
    1ca6:	|  |  |  |         move.l 1b0c4 <CstBackDrop>,d0
    1cac:	|  |  |  |         add.l d0,d1
    1cae:	|  |  |  |         movea.l 1b0de <CstCleanupQueueDrawBuffer>,a0
    1cb4:	|  |  |  |         move.w 12(a0),d0
    1cb8:	|  |  |  |         move.w d0,d0
    1cba:	|  |  |  |         andi.l #65535,d0
    1cc0:	|  |  |  |         move.l d1,d2
    1cc2:	|  |  |  |         add.l d0,d2
    1cc4:	|  |  |  |         move.l d2,28(sp)
      ULONG bltdpt = ((ULONG) CstDrawBuffer) + CstCleanupQueueDrawBuffer->starty*winWidth/8 + CstCleanupQueueDrawBuffer->startxinbytes;
    1cc8:	|  |  |  |         movea.l 1b0de <CstCleanupQueueDrawBuffer>,a0
    1cce:	|  |  |  |         move.w 14(a0),d0
    1cd2:	|  |  |  |         move.w d0,d0
    1cd4:	|  |  |  |         andi.l #65535,d0
    1cda:	|  |  |  |         move.l 1b0f6 <winWidth>,d1
    1ce0:	|  |  |  |         move.l d1,-(sp)
    1ce2:	|  |  |  |         move.l d0,-(sp)
    1ce4:	|  |  |  |         jsr 1642a <__mulsi3>
    1cea:	|  |  |  |         addq.l #8,sp
    1cec:	|  |  |  |         move.l d0,d1
    1cee:	|  |  |  |         lsr.l #3,d1
    1cf0:	|  |  |  |         move.l 1b0d6 <CstDrawBuffer>,d0
    1cf6:	|  |  |  |         add.l d0,d1
    1cf8:	|  |  |  |         movea.l 1b0de <CstCleanupQueueDrawBuffer>,a0
    1cfe:	|  |  |  |         move.w 12(a0),d0
    1d02:	|  |  |  |         move.w d0,d0
    1d04:	|  |  |  |         andi.l #65535,d0
    1d0a:	|  |  |  |         move.l d1,d2
    1d0c:	|  |  |  |         add.l d0,d2
    1d0e:	|  |  |  |         move.l d2,24(sp)
      for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    1d12:	|  |  |  |         clr.l 20(sp)
    1d16:	|  |  |  |     /-- bra.w 1d9e <CstRestoreScreen+0x1d6>
      {
        custom->bltapt = (APTR) bltapt;
    1d1a:	|  |  |  |  /--|-> move.l 28(sp),d0
    1d1e:	|  |  |  |  |  |   movea.l 16(sp),a0
    1d22:	|  |  |  |  |  |   move.l d0,80(a0)
        custom->bltdpt = (APTR) bltdpt;
    1d26:	|  |  |  |  |  |   move.l 24(sp),d0
    1d2a:	|  |  |  |  |  |   movea.l 16(sp),a0
    1d2e:	|  |  |  |  |  |   move.l d0,84(a0)
        custom->bltsize = (CstCleanupQueueDrawBuffer->height << 6) + CstCleanupQueueDrawBuffer->widthinwords;
    1d32:	|  |  |  |  |  |   movea.l 1b0de <CstCleanupQueueDrawBuffer>,a0
    1d38:	|  |  |  |  |  |   move.w 10(a0),d0
    1d3c:	|  |  |  |  |  |   lsl.w #6,d0
    1d3e:	|  |  |  |  |  |   movea.l 1b0de <CstCleanupQueueDrawBuffer>,a0
    1d44:	|  |  |  |  |  |   move.w 8(a0),d1
    1d48:	|  |  |  |  |  |   add.w d1,d0
    1d4a:	|  |  |  |  |  |   movea.l 16(sp),a0
    1d4e:	|  |  |  |  |  |   move.w d0,88(a0)
        bltapt += winWidth/8*winHeight;
    1d52:	|  |  |  |  |  |   move.l 1b0f6 <winWidth>,d0
    1d58:	|  |  |  |  |  |   lsr.l #3,d0
    1d5a:	|  |  |  |  |  |   move.l 1b0fa <winHeight>,d1
    1d60:	|  |  |  |  |  |   move.l d1,-(sp)
    1d62:	|  |  |  |  |  |   move.l d0,-(sp)
    1d64:	|  |  |  |  |  |   jsr 1642a <__mulsi3>
    1d6a:	|  |  |  |  |  |   addq.l #8,sp
    1d6c:	|  |  |  |  |  |   add.l d0,28(sp)
        bltdpt += winWidth/8*winHeight;
    1d70:	|  |  |  |  |  |   move.l 1b0f6 <winWidth>,d0
    1d76:	|  |  |  |  |  |   lsr.l #3,d0
    1d78:	|  |  |  |  |  |   move.l 1b0fa <winHeight>,d1
    1d7e:	|  |  |  |  |  |   move.l d1,-(sp)
    1d80:	|  |  |  |  |  |   move.l d0,-(sp)
    1d82:	|  |  |  |  |  |   jsr 1642a <__mulsi3>
    1d88:	|  |  |  |  |  |   addq.l #8,sp
    1d8a:	|  |  |  |  |  |   add.l d0,24(sp)
        WaitBlit();
    1d8e:	|  |  |  |  |  |   move.l 1b1ae <GfxBase>,d0
    1d94:	|  |  |  |  |  |   movea.l d0,a6
    1d96:	|  |  |  |  |  |   jsr -228(a6)
      for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    1d9a:	|  |  |  |  |  |   addq.l #1,20(sp)
    1d9e:	|  |  |  |  |  \-> moveq #4,d0
    1da0:	|  |  |  |  |      cmp.l 20(sp),d0
    1da4:	|  |  |  |  \----- bge.w 1d1a <CstRestoreScreen+0x152>
      }
    }
    struct CleanupQueue *todelete = CstCleanupQueueDrawBuffer;
    1da8:	|  |  |  \-------> move.l 1b0de <CstCleanupQueueDrawBuffer>,12(sp)
    CstCleanupQueueDrawBuffer = CstCleanupQueueDrawBuffer->next;  
    1db0:	|  |  |            movea.l 1b0de <CstCleanupQueueDrawBuffer>,a0
    1db6:	|  |  |            move.l 16(a0),d0
    1dba:	|  |  |            move.l d0,1b0de <CstCleanupQueueDrawBuffer>
    FreeVec(todelete);    
    1dc0:	|  |  |            move.l 12(sp),8(sp)
    1dc6:	|  |  |            move.l 1b1a2 <SysBase>,d0
    1dcc:	|  |  |            movea.l d0,a6
    1dce:	|  |  |            movea.l 8(sp),a1
    1dd2:	|  |  |            jsr -690(a6)
    todelete = NULL;
    1dd6:	|  |  |            clr.l 12(sp)
  while(CstCleanupQueueDrawBuffer)
    1dda:	|  |  \----------> move.l 1b0de <CstCleanupQueueDrawBuffer>,d0
    1de0:	|  \-------------- bne.w 1c1a <CstRestoreScreen+0x52>
    1de4:	|              /-- bra.s 1de8 <CstRestoreScreen+0x220>
    return;
    1de6:	\--------------|-> nop
  }
  
}
    1de8:	               \-> move.l (sp)+,d2
    1dea:	                   movea.l (sp)+,a6
    1dec:	                   lea 24(sp),sp
    1df0:	                   rts

00001df2 <CstScaleSprite>:

void CstScaleSprite( struct sprite *single, struct onScreenPerson *person, WORD x, WORD y, UWORD destinationtype)
{  
    1df2:	                lea -124(sp),sp
    1df6:	                movem.l d2-d3/a6,-(sp)
    1dfa:	                movea.l 148(sp),a0
    1dfe:	                move.l 152(sp),d1
    1e02:	                move.l 156(sp),d0
    1e06:	                movea.w a0,a0
    1e08:	                move.w a0,16(sp)
    1e0c:	                move.w d1,d1
    1e0e:	                move.w d1,14(sp)
    1e12:	                move.w d0,d0
    1e14:	                move.w d0,12(sp)

  UWORD *destination = 0;
    1e18:	                clr.l 132(sp)
  switch(destinationtype)
    1e1c:	                moveq #0,d0
    1e1e:	                move.w 12(sp),d0
    1e22:	                moveq #1,d1
    1e24:	                cmp.l d0,d1
    1e26:	            /-- beq.s 1e30 <CstScaleSprite+0x3e>
    1e28:	            |   moveq #2,d2
    1e2a:	            |   cmp.l d0,d2
    1e2c:	         /--|-- beq.s 1e3a <CstScaleSprite+0x48>
    1e2e:	      /--|--|-- bra.s 1e4c <CstScaleSprite+0x5a>
  {
    case SCREEN:
      destination = (UWORD *) CstDrawBuffer;      
    1e30:	      |  |  \-> move.l 1b0d6 <CstDrawBuffer>,132(sp)
      break;
    1e38:	      +--|----- bra.s 1e4c <CstScaleSprite+0x5a>
    case BACKDROP:      
      CstApplyBackDropCounter = 2;
    1e3a:	      |  \----> move.w #2,1b0d0 <CstApplyBackDropCounter>
      destination = (UWORD *) CstBackDrop;      
    1e42:	      |         move.l 1b0c4 <CstBackDrop>,132(sp)
      break;
    1e4a:	      |         nop
  ULONG bltcon1; //Shift Source
  ULONG ystartdst;
  ULONG ystartsrc; 
  ULONG blitheight;

  if( y < 0) {
    1e4c:	      \-------> tst.w 14(sp)
    1e50:	         /----- bge.s 1e98 <CstScaleSprite+0xa6>
    if(y + single->height < 0) {
    1e52:	         |      movea.w 14(sp),a1
    1e56:	         |      movea.l 140(sp),a0
    1e5a:	         |      move.l 4(a0),d0
    1e5e:	         |      add.l a1,d0
    1e60:	         |  /-- bpl.s 1e74 <CstScaleSprite+0x82>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    1e62:	         |  |   pea 16825 <PutChar+0x2e5>
    1e68:	         |  |   jsr 15bf0 <KPrintF>
    1e6e:	         |  |   addq.l #4,sp
      return;
    1e70:	/--------|--|-- bra.w 290c <CstScaleSprite+0xb1a>
    }
    ystartdst = 0;
    1e74:	|        |  \-> clr.l 96(sp)
    ystartsrc = y*-1;
    1e78:	|        |      move.w 14(sp),d0
    1e7c:	|        |      ext.l d0
    1e7e:	|        |      neg.l d0
    1e80:	|        |      move.l d0,92(sp)
    blitheight = single->height+y;
    1e84:	|        |      movea.l 140(sp),a0
    1e88:	|        |      move.l 4(a0),d0
    1e8c:	|        |      movea.w 14(sp),a0
    1e90:	|        |      add.l a0,d0
    1e92:	|        |      move.l d0,88(sp)
    1e96:	|     /--|----- bra.s 1f0a <CstScaleSprite+0x118>
  } else if(y+single->height > (int) winHeight) {
    1e98:	|     |  \----> movea.w 14(sp),a1
    1e9c:	|     |         movea.l 140(sp),a0
    1ea0:	|     |         move.l 4(a0),d0
    1ea4:	|     |         move.l a1,d1
    1ea6:	|     |         add.l d0,d1
    1ea8:	|     |         move.l 1b0fa <winHeight>,d0
    1eae:	|     |         cmp.l d1,d0
    1eb0:	|     |  /----- bge.s 1ef2 <CstScaleSprite+0x100>
    if(y  > (int) winHeight) {
    1eb2:	|     |  |      movea.w 14(sp),a0
    1eb6:	|     |  |      move.l 1b0fa <winHeight>,d0
    1ebc:	|     |  |      cmp.l a0,d0
    1ebe:	|     |  |  /-- bge.s 1ed2 <CstScaleSprite+0xe0>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    1ec0:	|     |  |  |   pea 16825 <PutChar+0x2e5>
    1ec6:	|     |  |  |   jsr 15bf0 <KPrintF>
    1ecc:	|     |  |  |   addq.l #4,sp
      return;
    1ece:	+-----|--|--|-- bra.w 290c <CstScaleSprite+0xb1a>
    }
    ystartdst = y;
    1ed2:	|     |  |  \-> movea.w 14(sp),a0
    1ed6:	|     |  |      move.l a0,96(sp)
    ystartsrc = 0;
    1eda:	|     |  |      clr.l 92(sp)
    blitheight = winHeight-y;
    1ede:	|     |  |      move.l 1b0fa <winHeight>,d0
    1ee4:	|     |  |      movea.w 14(sp),a0
    1ee8:	|     |  |      move.l d0,d1
    1eea:	|     |  |      sub.l a0,d1
    1eec:	|     |  |      move.l d1,88(sp)
    1ef0:	|     +--|----- bra.s 1f0a <CstScaleSprite+0x118>
  } else {
    ystartdst = y;
    1ef2:	|     |  \----> movea.w 14(sp),a0
    1ef6:	|     |         move.l a0,96(sp)
    ystartsrc = 0;
    1efa:	|     |         clr.l 92(sp)
    blitheight = single->height;
    1efe:	|     |         movea.l 140(sp),a0
    1f02:	|     |         move.l 4(a0),d0
    1f06:	|     |         move.l d0,88(sp)
  }


  if( x < 0) { //Leftmost part outside screen
    1f0a:	|     \-------> tst.w 16(sp)
    1f0e:	|     /-------- bge.w 21be <CstScaleSprite+0x3cc>
    if(x + single->width < 0) {
    1f12:	|     |         movea.w 16(sp),a1
    1f16:	|     |         movea.l 140(sp),a0
    1f1a:	|     |         move.l (a0),d0
    1f1c:	|     |         add.l a1,d0
    1f1e:	|     |     /-- bpl.s 1f32 <CstScaleSprite+0x140>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    1f20:	|     |     |   pea 16825 <PutChar+0x2e5>
    1f26:	|     |     |   jsr 15bf0 <KPrintF>
    1f2c:	|     |     |   addq.l #4,sp
      return;
    1f2e:	+-----|-----|-- bra.w 290c <CstScaleSprite+0xb1a>

    }
    
    extrawords = 1;
    1f32:	|     |     \-> move.w #1,130(sp)
    cutwordssource = (x*-1)/16; 
    1f38:	|     |         move.w 16(sp),d0
    1f3c:	|     |     /-- bpl.s 1f42 <CstScaleSprite+0x150>
    1f3e:	|     |     |   addi.w #15,d0
    1f42:	|     |     \-> asr.w #4,d0
    1f44:	|     |         neg.w d0
    1f46:	|     |         move.w d0,128(sp)
    cutmaskpixel = (x*-1)%16;     
    1f4a:	|     |         move.w 16(sp),d0
    1f4e:	|     |         ext.l d0
    1f50:	|     |         neg.l d0
    1f52:	|     |         andi.l #-2147483633,d0
    1f58:	|     |     /-- bpl.s 1f62 <CstScaleSprite+0x170>
    1f5a:	|     |     |   subq.l #1,d0
    1f5c:	|     |     |   moveq #-16,d1
    1f5e:	|     |     |   or.l d1,d0
    1f60:	|     |     |   addq.l #1,d0
    1f62:	|     |     \-> move.w d0,126(sp)
    bltalwm = 0; //Last Word of this channel almost masked out
    1f66:	|     |         clr.w 124(sp)
    bltapt = ((ULONG) single->data)+(single->width/8)*single->height*5+cutwordssource*2+ystartsrc*single->width/8;
    1f6a:	|     |         movea.l 140(sp),a0
    1f6e:	|     |         move.l 24(a0),d0
    1f72:	|     |         move.l d0,d2
    1f74:	|     |         moveq #0,d0
    1f76:	|     |         move.w 128(sp),d0
    1f7a:	|     |         add.l d0,d0
    1f7c:	|     |         move.l d0,d3
    1f7e:	|     |         movea.l 140(sp),a0
    1f82:	|     |         move.l (a0),d0
    1f84:	|     |     /-- bpl.s 1f88 <CstScaleSprite+0x196>
    1f86:	|     |     |   addq.l #7,d0
    1f88:	|     |     \-> asr.l #3,d0
    1f8a:	|     |         movea.l 140(sp),a0
    1f8e:	|     |         move.l 4(a0),d1
    1f92:	|     |         move.l d1,-(sp)
    1f94:	|     |         move.l d0,-(sp)
    1f96:	|     |         jsr 1642a <__mulsi3>
    1f9c:	|     |         addq.l #8,sp
    1f9e:	|     |         move.l d0,d1
    1fa0:	|     |         move.l d1,d0
    1fa2:	|     |         add.l d0,d0
    1fa4:	|     |         add.l d0,d0
    1fa6:	|     |         add.l d1,d0
    1fa8:	|     |         add.l d3,d0
    1faa:	|     |         add.l d0,d2
    1fac:	|     |         movea.l 140(sp),a0
    1fb0:	|     |         move.l (a0),d0
    1fb2:	|     |         move.l 92(sp),-(sp)
    1fb6:	|     |         move.l d0,-(sp)
    1fb8:	|     |         jsr 1642a <__mulsi3>
    1fbe:	|     |         addq.l #8,sp
    1fc0:	|     |         lsr.l #3,d0
    1fc2:	|     |         move.l d2,d1
    1fc4:	|     |         add.l d0,d1
    1fc6:	|     |         move.l d1,120(sp)
    bltbpt = ((ULONG) single->data)+cutwordssource*2+ystartsrc*single->width/8;
    1fca:	|     |         movea.l 140(sp),a0
    1fce:	|     |         move.l 24(a0),d0
    1fd2:	|     |         move.l d0,d1
    1fd4:	|     |         moveq #0,d0
    1fd6:	|     |         move.w 128(sp),d0
    1fda:	|     |         add.l d0,d0
    1fdc:	|     |         move.l d1,d2
    1fde:	|     |         add.l d0,d2
    1fe0:	|     |         movea.l 140(sp),a0
    1fe4:	|     |         move.l (a0),d0
    1fe6:	|     |         move.l 92(sp),-(sp)
    1fea:	|     |         move.l d0,-(sp)
    1fec:	|     |         jsr 1642a <__mulsi3>
    1ff2:	|     |         addq.l #8,sp
    1ff4:	|     |         lsr.l #3,d0
    1ff6:	|     |         move.l d2,d1
    1ff8:	|     |         add.l d0,d1
    1ffa:	|     |         move.l d1,116(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    1ffe:	|     |         move.l 1b0f6 <winWidth>,d0
    2004:	|     |         move.l 96(sp),-(sp)
    2008:	|     |         move.l d0,-(sp)
    200a:	|     |         jsr 1642a <__mulsi3>
    2010:	|     |         addq.l #8,sp
    2012:	|     |         lsr.l #3,d0
    2014:	|     |         move.l 132(sp),d1
    2018:	|     |         add.l d1,d0
    201a:	|     |         move.l d0,d2
    201c:	|     |         subq.l #2,d2
    201e:	|     |         move.l d2,112(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    2022:	|     |         move.l 1b0f6 <winWidth>,d0
    2028:	|     |         move.l 96(sp),-(sp)
    202c:	|     |         move.l d0,-(sp)
    202e:	|     |         jsr 1642a <__mulsi3>
    2034:	|     |         addq.l #8,sp
    2036:	|     |         lsr.l #3,d0
    2038:	|     |         move.l 132(sp),d1
    203c:	|     |         add.l d1,d0
    203e:	|     |         move.l d0,d1
    2040:	|     |         subq.l #2,d1
    2042:	|     |         move.l d1,108(sp)
    bltcon0 = 0xfca + ((16-cutmaskpixel) << 12);
    2046:	|     |         moveq #0,d0
    2048:	|     |         move.w 126(sp),d0
    204c:	|     |         moveq #16,d1
    204e:	|     |         sub.l d0,d1
    2050:	|     |         move.l d1,d0
    2052:	|     |         moveq #12,d2
    2054:	|     |         lsl.l d2,d0
    2056:	|     |         addi.l #4042,d0
    205c:	|     |         move.l d0,104(sp)
    bltcon1 = ((16-cutmaskpixel) << 12);
    2060:	|     |         moveq #0,d0
    2062:	|     |         move.w 126(sp),d0
    2066:	|     |         moveq #16,d1
    2068:	|     |         sub.l d0,d1
    206a:	|     |         move.l d1,d0
    206c:	|     |         moveq #12,d1
    206e:	|     |         lsl.l d1,d0
    2070:	|     |         move.l d0,100(sp)
    if( destinationtype == SCREEN)
    2074:	|     |         cmpi.w #1,12(sp)
    207a:	|     |  /----- bne.w 2138 <CstScaleSprite+0x346>
    {      
      struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    207e:	|     |  |      move.l 1b0de <CstCleanupQueueDrawBuffer>,48(sp)
      CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    2086:	|     |  |      moveq #20,d2
    2088:	|     |  |      move.l d2,44(sp)
    208c:	|     |  |      clr.l 40(sp)
    2090:	|     |  |      move.l 1b1a2 <SysBase>,d0
    2096:	|     |  |      movea.l d0,a6
    2098:	|     |  |      move.l 44(sp),d0
    209c:	|     |  |      move.l 40(sp),d1
    20a0:	|     |  |      jsr -684(a6)
    20a4:	|     |  |      move.l d0,36(sp)
    20a8:	|     |  |      move.l 36(sp),d0
    20ac:	|     |  |      move.l d0,1b0de <CstCleanupQueueDrawBuffer>
      CstCleanupQueueDrawBuffer->next = next;   
    20b2:	|     |  |      movea.l 1b0de <CstCleanupQueueDrawBuffer>,a0
    20b8:	|     |  |      move.l 48(sp),16(a0)

      CstCleanupQueueDrawBuffer->x = x;
    20be:	|     |  |      movea.l 1b0de <CstCleanupQueueDrawBuffer>,a0
    20c4:	|     |  |      move.w 16(sp),d0
    20c8:	|     |  |      move.w d0,(a0)
      CstCleanupQueueDrawBuffer->y = y;
    20ca:	|     |  |      movea.l 1b0de <CstCleanupQueueDrawBuffer>,a0
    20d0:	|     |  |      move.w 14(sp),d0
    20d4:	|     |  |      move.w d0,2(a0)
      CstCleanupQueueDrawBuffer->person = person;      
    20d8:	|     |  |      movea.l 1b0de <CstCleanupQueueDrawBuffer>,a0
    20de:	|     |  |      move.l 144(sp),4(a0)

      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; //Width in X Bytes
    20e4:	|     |  |      movea.l 140(sp),a0
    20e8:	|     |  |      move.l (a0),d0
    20ea:	|     |  |      movea.l d0,a0
    20ec:	|     |  |      cmpa.w #0,a0
    20f0:	|     |  |  /-- bge.s 20f6 <CstScaleSprite+0x304>
    20f2:	|     |  |  |   lea 15(a0),a0
    20f6:	|     |  |  \-> move.l a0,d0
    20f8:	|     |  |      asr.l #4,d0
    20fa:	|     |  |      move.l d0,d0
    20fc:	|     |  |      add.w 128(sp),d0
    2100:	|     |  |      movea.l 1b0de <CstCleanupQueueDrawBuffer>,a0
    2106:	|     |  |      add.w 130(sp),d0
    210a:	|     |  |      move.w d0,8(a0)
      CstCleanupQueueDrawBuffer->height = blitheight;
    210e:	|     |  |      movea.l 1b0de <CstCleanupQueueDrawBuffer>,a0
    2114:	|     |  |      move.l 88(sp),d0
    2118:	|     |  |      move.w d0,10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes = 0;
    211c:	|     |  |      movea.l 1b0de <CstCleanupQueueDrawBuffer>,a0
    2122:	|     |  |      clr.w 12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    2126:	|     |  |      movea.l 1b0de <CstCleanupQueueDrawBuffer>,a0
    212c:	|     |  |      move.l 96(sp),d0
    2130:	|     |  |      move.w d0,14(a0)
    2134:	|  /--|--|----- bra.w 2750 <CstScaleSprite+0x95e>
    } else {
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    2138:	|  |  |  \----> movea.l 140(sp),a0
    213c:	|  |  |         move.l (a0),d0
    213e:	|  |  |         movea.l d0,a0
    2140:	|  |  |         cmpa.w #0,a0
    2144:	|  |  |     /-- bge.s 214a <CstScaleSprite+0x358>
    2146:	|  |  |     |   lea 15(a0),a0
    214a:	|  |  |     \-> move.l a0,d0
    214c:	|  |  |         asr.l #4,d0
    214e:	|  |  |         move.l d0,d0
    2150:	|  |  |         add.w 128(sp),d0
    2154:	|  |  |         movea.l 1b0e6 <CstBackDropBufferApplyCursor>,a0
    215a:	|  |  |         move.l a0,d1
    215c:	|  |  |         addq.l #2,d1
    215e:	|  |  |         move.l d1,1b0e6 <CstBackDropBufferApplyCursor>
    2164:	|  |  |         add.w 130(sp),d0
    2168:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    216a:	|  |  |         movea.l 1b0e6 <CstBackDropBufferApplyCursor>,a0
    2170:	|  |  |         move.l a0,d0
    2172:	|  |  |         addq.l #2,d0
    2174:	|  |  |         move.l d0,1b0e6 <CstBackDropBufferApplyCursor>
    217a:	|  |  |         move.l 88(sp),d0
    217e:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    2180:	|  |  |         movea.l 1b0e6 <CstBackDropBufferApplyCursor>,a0
    2186:	|  |  |         move.l a0,d0
    2188:	|  |  |         addq.l #2,d0
    218a:	|  |  |         move.l d0,1b0e6 <CstBackDropBufferApplyCursor>
    2190:	|  |  |         clr.w (a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    2192:	|  |  |         movea.l 1b0e6 <CstBackDropBufferApplyCursor>,a0
    2198:	|  |  |         move.l a0,d0
    219a:	|  |  |         addq.l #2,d0
    219c:	|  |  |         move.l d0,1b0e6 <CstBackDropBufferApplyCursor>
    21a2:	|  |  |         move.l 96(sp),d0
    21a6:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    21a8:	|  |  |         movea.l 1b0e6 <CstBackDropBufferApplyCursor>,a0
    21ae:	|  |  |         move.l a0,d0
    21b0:	|  |  |         addq.l #2,d0
    21b2:	|  |  |         move.l d0,1b0e6 <CstBackDropBufferApplyCursor>
    21b8:	|  |  |         clr.w (a0)
    21ba:	|  +--|-------- bra.w 2750 <CstScaleSprite+0x95e>
    }
  } else if(x + single->width > (int) winWidth) { //Rightmost part outside screen   
    21be:	|  |  \-------> movea.w 16(sp),a1
    21c2:	|  |            movea.l 140(sp),a0
    21c6:	|  |            move.l (a0),d0
    21c8:	|  |            move.l a1,d1
    21ca:	|  |            add.l d0,d1
    21cc:	|  |            move.l 1b0f6 <winWidth>,d0
    21d2:	|  |            cmp.l d1,d0
    21d4:	|  |  /-------- bge.w 24b6 <CstScaleSprite+0x6c4>

    if(x - single->width > (int) winWidth)
    21d8:	|  |  |         movea.w 16(sp),a1
    21dc:	|  |  |         movea.l 140(sp),a0
    21e0:	|  |  |         move.l (a0),d0
    21e2:	|  |  |         move.l a1,d1
    21e4:	|  |  |         sub.l d0,d1
    21e6:	|  |  |         move.l 1b0f6 <winWidth>,d0
    21ec:	|  |  |         cmp.l d1,d0
    21ee:	|  |  |     /-- bge.s 2202 <CstScaleSprite+0x410>
    {    
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    21f0:	|  |  |     |   pea 16825 <PutChar+0x2e5>
    21f6:	|  |  |     |   jsr 15bf0 <KPrintF>
    21fc:	|  |  |     |   addq.l #4,sp
      return;
    21fe:	+--|--|-----|-- bra.w 290c <CstScaleSprite+0xb1a>
    }
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    2202:	|  |  |     \-> clr.w 130(sp)
    cutwordssource = (x+single->width - winWidth)/16;
    2206:	|  |  |         movea.w 16(sp),a1
    220a:	|  |  |         movea.l 140(sp),a0
    220e:	|  |  |         move.l (a0),d0
    2210:	|  |  |         add.l a1,d0
    2212:	|  |  |         move.l d0,d1
    2214:	|  |  |         move.l 1b0f6 <winWidth>,d0
    221a:	|  |  |         sub.l d0,d1
    221c:	|  |  |         move.l d1,d0
    221e:	|  |  |         lsr.l #4,d0
    2220:	|  |  |         move.w d0,128(sp)
    cutmaskpixel = 0;
    2224:	|  |  |         clr.w 126(sp)
    bltalwm = 0xffff; //Last word contains source data to be blit
    2228:	|  |  |         move.w #-1,124(sp)
    bltapt = ((ULONG) single->data)+(single->width/8)*single->height*5+ystartsrc*single->width/8;
    222e:	|  |  |         movea.l 140(sp),a0
    2232:	|  |  |         move.l 24(a0),d0
    2236:	|  |  |         move.l d0,d2
    2238:	|  |  |         movea.l 140(sp),a0
    223c:	|  |  |         move.l (a0),d0
    223e:	|  |  |     /-- bpl.s 2242 <CstScaleSprite+0x450>
    2240:	|  |  |     |   addq.l #7,d0
    2242:	|  |  |     \-> asr.l #3,d0
    2244:	|  |  |         movea.l 140(sp),a0
    2248:	|  |  |         move.l 4(a0),d1
    224c:	|  |  |         move.l d1,-(sp)
    224e:	|  |  |         move.l d0,-(sp)
    2250:	|  |  |         jsr 1642a <__mulsi3>
    2256:	|  |  |         addq.l #8,sp
    2258:	|  |  |         move.l d0,d1
    225a:	|  |  |         move.l d1,d0
    225c:	|  |  |         add.l d0,d0
    225e:	|  |  |         add.l d0,d0
    2260:	|  |  |         add.l d1,d0
    2262:	|  |  |         add.l d0,d2
    2264:	|  |  |         movea.l 140(sp),a0
    2268:	|  |  |         move.l (a0),d0
    226a:	|  |  |         move.l 92(sp),-(sp)
    226e:	|  |  |         move.l d0,-(sp)
    2270:	|  |  |         jsr 1642a <__mulsi3>
    2276:	|  |  |         addq.l #8,sp
    2278:	|  |  |         lsr.l #3,d0
    227a:	|  |  |         move.l d2,d1
    227c:	|  |  |         add.l d0,d1
    227e:	|  |  |         move.l d1,120(sp)
    bltbpt = (ULONG) single->data+ystartsrc*single->width/8;
    2282:	|  |  |         movea.l 140(sp),a0
    2286:	|  |  |         move.l 24(a0),d0
    228a:	|  |  |         move.l d0,d2
    228c:	|  |  |         movea.l 140(sp),a0
    2290:	|  |  |         move.l (a0),d0
    2292:	|  |  |         move.l 92(sp),-(sp)
    2296:	|  |  |         move.l d0,-(sp)
    2298:	|  |  |         jsr 1642a <__mulsi3>
    229e:	|  |  |         addq.l #8,sp
    22a0:	|  |  |         lsr.l #3,d0
    22a2:	|  |  |         move.l d2,d1
    22a4:	|  |  |         add.l d0,d1
    22a6:	|  |  |         move.l d1,116(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    22aa:	|  |  |         move.l 1b0f6 <winWidth>,d0
    22b0:	|  |  |         move.l 96(sp),-(sp)
    22b4:	|  |  |         move.l d0,-(sp)
    22b6:	|  |  |         jsr 1642a <__mulsi3>
    22bc:	|  |  |         addq.l #8,sp
    22be:	|  |  |         lsr.l #3,d0
    22c0:	|  |  |         move.l 132(sp),d1
    22c4:	|  |  |         add.l d0,d1
    22c6:	|  |  |         move.w 16(sp),d0
    22ca:	|  |  |     /-- bpl.s 22d0 <CstScaleSprite+0x4de>
    22cc:	|  |  |     |   addi.w #15,d0
    22d0:	|  |  |     \-> asr.w #4,d0
    22d2:	|  |  |         movea.w d0,a0
    22d4:	|  |  |         move.l a0,d0
    22d6:	|  |  |         add.l a0,d0
    22d8:	|  |  |         move.l d1,d2
    22da:	|  |  |         add.l d0,d2
    22dc:	|  |  |         move.l d2,112(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    22e0:	|  |  |         move.l 1b0f6 <winWidth>,d0
    22e6:	|  |  |         move.l 96(sp),-(sp)
    22ea:	|  |  |         move.l d0,-(sp)
    22ec:	|  |  |         jsr 1642a <__mulsi3>
    22f2:	|  |  |         addq.l #8,sp
    22f4:	|  |  |         lsr.l #3,d0
    22f6:	|  |  |         move.l 132(sp),d1
    22fa:	|  |  |         add.l d0,d1
    22fc:	|  |  |         move.w 16(sp),d0
    2300:	|  |  |     /-- bpl.s 2306 <CstScaleSprite+0x514>
    2302:	|  |  |     |   addi.w #15,d0
    2306:	|  |  |     \-> asr.w #4,d0
    2308:	|  |  |         movea.w d0,a0
    230a:	|  |  |         move.l a0,d0
    230c:	|  |  |         add.l a0,d0
    230e:	|  |  |         move.l d1,d2
    2310:	|  |  |         add.l d0,d2
    2312:	|  |  |         move.l d2,108(sp)
    bltcon0 = 0xfca + ((single->width%16) << 12);
    2316:	|  |  |         movea.l 140(sp),a0
    231a:	|  |  |         move.l (a0),d0
    231c:	|  |  |         andi.l #-2147483633,d0
    2322:	|  |  |     /-- bpl.s 232c <CstScaleSprite+0x53a>
    2324:	|  |  |     |   subq.l #1,d0
    2326:	|  |  |     |   moveq #-16,d1
    2328:	|  |  |     |   or.l d1,d0
    232a:	|  |  |     |   addq.l #1,d0
    232c:	|  |  |     \-> moveq #12,d2
    232e:	|  |  |         lsl.l d2,d0
    2330:	|  |  |         addi.l #4042,d0
    2336:	|  |  |         move.l d0,104(sp)
    bltcon1 = ((single->width%16) << 12);
    233a:	|  |  |         movea.l 140(sp),a0
    233e:	|  |  |         move.l (a0),d0
    2340:	|  |  |         andi.l #-2147483633,d0
    2346:	|  |  |     /-- bpl.s 2350 <CstScaleSprite+0x55e>
    2348:	|  |  |     |   subq.l #1,d0
    234a:	|  |  |     |   moveq #-16,d1
    234c:	|  |  |     |   or.l d1,d0
    234e:	|  |  |     |   addq.l #1,d0
    2350:	|  |  |     \-> moveq #12,d2
    2352:	|  |  |         lsl.l d2,d0
    2354:	|  |  |         move.l d0,100(sp)
    if( destinationtype == SCREEN)
    2358:	|  |  |         cmpi.w #1,12(sp)
    235e:	|  |  |  /----- bne.w 2426 <CstScaleSprite+0x634>
    {
      struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    2362:	|  |  |  |      move.l 1b0de <CstCleanupQueueDrawBuffer>,64(sp)
      CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    236a:	|  |  |  |      moveq #20,d0
    236c:	|  |  |  |      move.l d0,60(sp)
    2370:	|  |  |  |      clr.l 56(sp)
    2374:	|  |  |  |      move.l 1b1a2 <SysBase>,d0
    237a:	|  |  |  |      movea.l d0,a6
    237c:	|  |  |  |      move.l 60(sp),d0
    2380:	|  |  |  |      move.l 56(sp),d1
    2384:	|  |  |  |      jsr -684(a6)
    2388:	|  |  |  |      move.l d0,52(sp)
    238c:	|  |  |  |      move.l 52(sp),d0
    2390:	|  |  |  |      move.l d0,1b0de <CstCleanupQueueDrawBuffer>
      CstCleanupQueueDrawBuffer->next = next;   
    2396:	|  |  |  |      movea.l 1b0de <CstCleanupQueueDrawBuffer>,a0
    239c:	|  |  |  |      move.l 64(sp),16(a0)

      CstCleanupQueueDrawBuffer->x = x;
    23a2:	|  |  |  |      movea.l 1b0de <CstCleanupQueueDrawBuffer>,a0
    23a8:	|  |  |  |      move.w 16(sp),d0
    23ac:	|  |  |  |      move.w d0,(a0)
      CstCleanupQueueDrawBuffer->y = y;
    23ae:	|  |  |  |      movea.l 1b0de <CstCleanupQueueDrawBuffer>,a0
    23b4:	|  |  |  |      move.w 14(sp),d0
    23b8:	|  |  |  |      move.w d0,2(a0)
      CstCleanupQueueDrawBuffer->person = person; 
    23bc:	|  |  |  |      movea.l 1b0de <CstCleanupQueueDrawBuffer>,a0
    23c2:	|  |  |  |      move.l 144(sp),4(a0)
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource; //Width in X Bytes
    23c8:	|  |  |  |      movea.l 140(sp),a0
    23cc:	|  |  |  |      move.l (a0),d0
    23ce:	|  |  |  |      movea.l d0,a0
    23d0:	|  |  |  |      cmpa.w #0,a0
    23d4:	|  |  |  |  /-- bge.s 23da <CstScaleSprite+0x5e8>
    23d6:	|  |  |  |  |   lea 15(a0),a0
    23da:	|  |  |  |  \-> move.l a0,d0
    23dc:	|  |  |  |      asr.l #4,d0
    23de:	|  |  |  |      move.l d0,d0
    23e0:	|  |  |  |      movea.l 1b0de <CstCleanupQueueDrawBuffer>,a0
    23e6:	|  |  |  |      add.w 128(sp),d0
    23ea:	|  |  |  |      move.w d0,8(a0)
      CstCleanupQueueDrawBuffer->height =  blitheight; //Height
    23ee:	|  |  |  |      movea.l 1b0de <CstCleanupQueueDrawBuffer>,a0
    23f4:	|  |  |  |      move.l 88(sp),d0
    23f8:	|  |  |  |      move.w d0,10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; //X Start in Bytes;
    23fc:	|  |  |  |      move.w 16(sp),d0
    2400:	|  |  |  |  /-- bpl.s 2406 <CstScaleSprite+0x614>
    2402:	|  |  |  |  |   addi.w #15,d0
    2406:	|  |  |  |  \-> asr.w #4,d0
    2408:	|  |  |  |      movea.l 1b0de <CstCleanupQueueDrawBuffer>,a0
    240e:	|  |  |  |      add.w d0,d0
    2410:	|  |  |  |      move.w d0,12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    2414:	|  |  |  |      movea.l 1b0de <CstCleanupQueueDrawBuffer>,a0
    241a:	|  |  |  |      move.l 96(sp),d0
    241e:	|  |  |  |      move.w d0,14(a0)
    2422:	|  +--|--|----- bra.w 2750 <CstScaleSprite+0x95e>
    } else {
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource;
    2426:	|  |  |  \----> movea.l 140(sp),a0
    242a:	|  |  |         move.l (a0),d0
    242c:	|  |  |         movea.l d0,a0
    242e:	|  |  |         cmpa.w #0,a0
    2432:	|  |  |     /-- bge.s 2438 <CstScaleSprite+0x646>
    2434:	|  |  |     |   lea 15(a0),a0
    2438:	|  |  |     \-> move.l a0,d0
    243a:	|  |  |         asr.l #4,d0
    243c:	|  |  |         move.l d0,d0
    243e:	|  |  |         movea.l 1b0e6 <CstBackDropBufferApplyCursor>,a0
    2444:	|  |  |         move.l a0,d1
    2446:	|  |  |         addq.l #2,d1
    2448:	|  |  |         move.l d1,1b0e6 <CstBackDropBufferApplyCursor>
    244e:	|  |  |         add.w 128(sp),d0
    2452:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    2454:	|  |  |         movea.l 1b0e6 <CstBackDropBufferApplyCursor>,a0
    245a:	|  |  |         move.l a0,d0
    245c:	|  |  |         addq.l #2,d0
    245e:	|  |  |         move.l d0,1b0e6 <CstBackDropBufferApplyCursor>
    2464:	|  |  |         move.l 88(sp),d0
    2468:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = (x/16)*2;
    246a:	|  |  |         move.w 16(sp),d0
    246e:	|  |  |     /-- bpl.s 2474 <CstScaleSprite+0x682>
    2470:	|  |  |     |   addi.w #15,d0
    2474:	|  |  |     \-> asr.w #4,d0
    2476:	|  |  |         movea.l 1b0e6 <CstBackDropBufferApplyCursor>,a0
    247c:	|  |  |         move.l a0,d1
    247e:	|  |  |         addq.l #2,d1
    2480:	|  |  |         move.l d1,1b0e6 <CstBackDropBufferApplyCursor>
    2486:	|  |  |         add.w d0,d0
    2488:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    248a:	|  |  |         movea.l 1b0e6 <CstBackDropBufferApplyCursor>,a0
    2490:	|  |  |         move.l a0,d0
    2492:	|  |  |         addq.l #2,d0
    2494:	|  |  |         move.l d0,1b0e6 <CstBackDropBufferApplyCursor>
    249a:	|  |  |         move.l 96(sp),d0
    249e:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    24a0:	|  |  |         movea.l 1b0e6 <CstBackDropBufferApplyCursor>,a0
    24a6:	|  |  |         move.l a0,d0
    24a8:	|  |  |         addq.l #2,d0
    24aa:	|  |  |         move.l d0,1b0e6 <CstBackDropBufferApplyCursor>
    24b0:	|  |  |         clr.w (a0)
    24b2:	|  +--|-------- bra.w 2750 <CstScaleSprite+0x95e>
    }
  } else { //Whole Sprite on Screen

    extrawords = 1;
    24b6:	|  |  \-------> move.w #1,130(sp)
    cutwordssource = 0;
    24bc:	|  |            clr.w 128(sp)
    cutmaskpixel = 0;
    24c0:	|  |            clr.w 126(sp)
    bltalwm = 0; //Last Word of this channel almost masked out
    24c4:	|  |            clr.w 124(sp)
    bltapt = ((ULONG) single->data)+(single->width/8)*single->height*5+ystartsrc*single->width/8;
    24c8:	|  |            movea.l 140(sp),a0
    24cc:	|  |            move.l 24(a0),d0
    24d0:	|  |            move.l d0,d2
    24d2:	|  |            movea.l 140(sp),a0
    24d6:	|  |            move.l (a0),d0
    24d8:	|  |        /-- bpl.s 24dc <CstScaleSprite+0x6ea>
    24da:	|  |        |   addq.l #7,d0
    24dc:	|  |        \-> asr.l #3,d0
    24de:	|  |            movea.l 140(sp),a0
    24e2:	|  |            move.l 4(a0),d1
    24e6:	|  |            move.l d1,-(sp)
    24e8:	|  |            move.l d0,-(sp)
    24ea:	|  |            jsr 1642a <__mulsi3>
    24f0:	|  |            addq.l #8,sp
    24f2:	|  |            move.l d0,d1
    24f4:	|  |            move.l d1,d0
    24f6:	|  |            add.l d0,d0
    24f8:	|  |            add.l d0,d0
    24fa:	|  |            add.l d1,d0
    24fc:	|  |            add.l d0,d2
    24fe:	|  |            movea.l 140(sp),a0
    2502:	|  |            move.l (a0),d0
    2504:	|  |            move.l 92(sp),-(sp)
    2508:	|  |            move.l d0,-(sp)
    250a:	|  |            jsr 1642a <__mulsi3>
    2510:	|  |            addq.l #8,sp
    2512:	|  |            lsr.l #3,d0
    2514:	|  |            move.l d2,d1
    2516:	|  |            add.l d0,d1
    2518:	|  |            move.l d1,120(sp)
    bltbpt = (ULONG) single->data+ystartsrc*single->width/8;
    251c:	|  |            movea.l 140(sp),a0
    2520:	|  |            move.l 24(a0),d0
    2524:	|  |            move.l d0,d2
    2526:	|  |            movea.l 140(sp),a0
    252a:	|  |            move.l (a0),d0
    252c:	|  |            move.l 92(sp),-(sp)
    2530:	|  |            move.l d0,-(sp)
    2532:	|  |            jsr 1642a <__mulsi3>
    2538:	|  |            addq.l #8,sp
    253a:	|  |            lsr.l #3,d0
    253c:	|  |            move.l d2,d1
    253e:	|  |            add.l d0,d1
    2540:	|  |            move.l d1,116(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    2544:	|  |            move.l 1b0f6 <winWidth>,d0
    254a:	|  |            move.l 96(sp),-(sp)
    254e:	|  |            move.l d0,-(sp)
    2550:	|  |            jsr 1642a <__mulsi3>
    2556:	|  |            addq.l #8,sp
    2558:	|  |            lsr.l #3,d0
    255a:	|  |            move.l 132(sp),d1
    255e:	|  |            add.l d0,d1
    2560:	|  |            move.w 16(sp),d0
    2564:	|  |        /-- bpl.s 256a <CstScaleSprite+0x778>
    2566:	|  |        |   addi.w #15,d0
    256a:	|  |        \-> asr.w #4,d0
    256c:	|  |            movea.w d0,a0
    256e:	|  |            move.l a0,d0
    2570:	|  |            add.l a0,d0
    2572:	|  |            move.l d1,d2
    2574:	|  |            add.l d0,d2
    2576:	|  |            move.l d2,112(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    257a:	|  |            move.l 1b0f6 <winWidth>,d0
    2580:	|  |            move.l 96(sp),-(sp)
    2584:	|  |            move.l d0,-(sp)
    2586:	|  |            jsr 1642a <__mulsi3>
    258c:	|  |            addq.l #8,sp
    258e:	|  |            lsr.l #3,d0
    2590:	|  |            move.l 132(sp),d1
    2594:	|  |            add.l d0,d1
    2596:	|  |            move.w 16(sp),d0
    259a:	|  |        /-- bpl.s 25a0 <CstScaleSprite+0x7ae>
    259c:	|  |        |   addi.w #15,d0
    25a0:	|  |        \-> asr.w #4,d0
    25a2:	|  |            movea.w d0,a0
    25a4:	|  |            move.l a0,d0
    25a6:	|  |            add.l a0,d0
    25a8:	|  |            move.l d1,d2
    25aa:	|  |            add.l d0,d2
    25ac:	|  |            move.l d2,108(sp)
    bltcon0 = 0xfca + ((x%16) << 12);
    25b0:	|  |            move.w 16(sp),d0
    25b4:	|  |            andi.w #-32753,d0
    25b8:	|  |        /-- bpl.s 25c2 <CstScaleSprite+0x7d0>
    25ba:	|  |        |   subq.w #1,d0
    25bc:	|  |        |   ori.w #-16,d0
    25c0:	|  |        |   addq.w #1,d0
    25c2:	|  |        \-> ext.l d0
    25c4:	|  |            moveq #12,d1
    25c6:	|  |            lsl.l d1,d0
    25c8:	|  |            addi.l #4042,d0
    25ce:	|  |            move.l d0,104(sp)
    bltcon1 = ((x%16) << 12);
    25d2:	|  |            move.w 16(sp),d0
    25d6:	|  |            andi.w #-32753,d0
    25da:	|  |        /-- bpl.s 25e4 <CstScaleSprite+0x7f2>
    25dc:	|  |        |   subq.w #1,d0
    25de:	|  |        |   ori.w #-16,d0
    25e2:	|  |        |   addq.w #1,d0
    25e4:	|  |        \-> ext.l d0
    25e6:	|  |            moveq #12,d2
    25e8:	|  |            lsl.l d2,d0
    25ea:	|  |            move.l d0,100(sp)
    if( destinationtype == SCREEN)
    25ee:	|  |            cmpi.w #1,12(sp)
    25f4:	|  |     /----- bne.w 26c0 <CstScaleSprite+0x8ce>
    {
      struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    25f8:	|  |     |      move.l 1b0de <CstCleanupQueueDrawBuffer>,80(sp)
      CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    2600:	|  |     |      moveq #20,d0
    2602:	|  |     |      move.l d0,76(sp)
    2606:	|  |     |      clr.l 72(sp)
    260a:	|  |     |      move.l 1b1a2 <SysBase>,d0
    2610:	|  |     |      movea.l d0,a6
    2612:	|  |     |      move.l 76(sp),d0
    2616:	|  |     |      move.l 72(sp),d1
    261a:	|  |     |      jsr -684(a6)
    261e:	|  |     |      move.l d0,68(sp)
    2622:	|  |     |      move.l 68(sp),d0
    2626:	|  |     |      move.l d0,1b0de <CstCleanupQueueDrawBuffer>
      CstCleanupQueueDrawBuffer->next = next;   
    262c:	|  |     |      movea.l 1b0de <CstCleanupQueueDrawBuffer>,a0
    2632:	|  |     |      move.l 80(sp),16(a0)

      CstCleanupQueueDrawBuffer->x = x;
    2638:	|  |     |      movea.l 1b0de <CstCleanupQueueDrawBuffer>,a0
    263e:	|  |     |      move.w 16(sp),d0
    2642:	|  |     |      move.w d0,(a0)
      CstCleanupQueueDrawBuffer->y = y;
    2644:	|  |     |      movea.l 1b0de <CstCleanupQueueDrawBuffer>,a0
    264a:	|  |     |      move.w 14(sp),d0
    264e:	|  |     |      move.w d0,2(a0)
      CstCleanupQueueDrawBuffer->person = person; 
    2652:	|  |     |      movea.l 1b0de <CstCleanupQueueDrawBuffer>,a0
    2658:	|  |     |      move.l 144(sp),4(a0)
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; 
    265e:	|  |     |      movea.l 140(sp),a0
    2662:	|  |     |      move.l (a0),d0
    2664:	|  |     |      movea.l d0,a0
    2666:	|  |     |      cmpa.w #0,a0
    266a:	|  |     |  /-- bge.s 2670 <CstScaleSprite+0x87e>
    266c:	|  |     |  |   lea 15(a0),a0
    2670:	|  |     |  \-> move.l a0,d0
    2672:	|  |     |      asr.l #4,d0
    2674:	|  |     |      move.l d0,d0
    2676:	|  |     |      add.w 128(sp),d0
    267a:	|  |     |      movea.l 1b0de <CstCleanupQueueDrawBuffer>,a0
    2680:	|  |     |      add.w 130(sp),d0
    2684:	|  |     |      move.w d0,8(a0)
      CstCleanupQueueDrawBuffer->height =  blitheight; 
    2688:	|  |     |      movea.l 1b0de <CstCleanupQueueDrawBuffer>,a0
    268e:	|  |     |      move.l 88(sp),d0
    2692:	|  |     |      move.w d0,10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; 
    2696:	|  |     |      move.w 16(sp),d0
    269a:	|  |     |  /-- bpl.s 26a0 <CstScaleSprite+0x8ae>
    269c:	|  |     |  |   addi.w #15,d0
    26a0:	|  |     |  \-> asr.w #4,d0
    26a2:	|  |     |      movea.l 1b0de <CstCleanupQueueDrawBuffer>,a0
    26a8:	|  |     |      add.w d0,d0
    26aa:	|  |     |      move.w d0,12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    26ae:	|  |     |      movea.l 1b0de <CstCleanupQueueDrawBuffer>,a0
    26b4:	|  |     |      move.l 96(sp),d0
    26b8:	|  |     |      move.w d0,14(a0)
    26bc:	|  +-----|----- bra.w 2750 <CstScaleSprite+0x95e>
    } else
    {
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    26c0:	|  |     \----> movea.l 140(sp),a0
    26c4:	|  |            move.l (a0),d0
    26c6:	|  |            movea.l d0,a0
    26c8:	|  |            cmpa.w #0,a0
    26cc:	|  |        /-- bge.s 26d2 <CstScaleSprite+0x8e0>
    26ce:	|  |        |   lea 15(a0),a0
    26d2:	|  |        \-> move.l a0,d0
    26d4:	|  |            asr.l #4,d0
    26d6:	|  |            move.l d0,d0
    26d8:	|  |            add.w 128(sp),d0
    26dc:	|  |            movea.l 1b0e6 <CstBackDropBufferApplyCursor>,a0
    26e2:	|  |            move.l a0,d1
    26e4:	|  |            addq.l #2,d1
    26e6:	|  |            move.l d1,1b0e6 <CstBackDropBufferApplyCursor>
    26ec:	|  |            add.w 130(sp),d0
    26f0:	|  |            move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    26f2:	|  |            movea.l 1b0e6 <CstBackDropBufferApplyCursor>,a0
    26f8:	|  |            move.l a0,d0
    26fa:	|  |            addq.l #2,d0
    26fc:	|  |            move.l d0,1b0e6 <CstBackDropBufferApplyCursor>
    2702:	|  |            move.l 88(sp),d0
    2706:	|  |            move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = (x/16)*2;
    2708:	|  |            move.w 16(sp),d0
    270c:	|  |        /-- bpl.s 2712 <CstScaleSprite+0x920>
    270e:	|  |        |   addi.w #15,d0
    2712:	|  |        \-> asr.w #4,d0
    2714:	|  |            movea.l 1b0e6 <CstBackDropBufferApplyCursor>,a0
    271a:	|  |            move.l a0,d1
    271c:	|  |            addq.l #2,d1
    271e:	|  |            move.l d1,1b0e6 <CstBackDropBufferApplyCursor>
    2724:	|  |            add.w d0,d0
    2726:	|  |            move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    2728:	|  |            movea.l 1b0e6 <CstBackDropBufferApplyCursor>,a0
    272e:	|  |            move.l a0,d0
    2730:	|  |            addq.l #2,d0
    2732:	|  |            move.l d0,1b0e6 <CstBackDropBufferApplyCursor>
    2738:	|  |            move.l 96(sp),d0
    273c:	|  |            move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    273e:	|  |            movea.l 1b0e6 <CstBackDropBufferApplyCursor>,a0
    2744:	|  |            move.l a0,d0
    2746:	|  |            addq.l #2,d0
    2748:	|  |            move.l d0,1b0e6 <CstBackDropBufferApplyCursor>
    274e:	|  |            clr.w (a0)
    }
  }

  if(person && person->samePosCount > 3) {
    2750:	|  \----------> tst.l 144(sp)
    2754:	|           /-- beq.s 2766 <CstScaleSprite+0x974>
    2756:	|           |   movea.l 144(sp),a0
    275a:	|           |   move.l 16(a0),d0
    275e:	|           |   moveq #3,d1
    2760:	|           |   cmp.l d0,d1
    2762:	|     /-----|-- blt.w 290a <CstScaleSprite+0xb18>
    return;
  }

  UWORD bltafwm = 0xffff >> cutmaskpixel;
    2766:	|     |     \-> moveq #0,d0
    2768:	|     |         move.w 126(sp),d0
    276c:	|     |         moveq #0,d1
    276e:	|     |         not.w d1
    2770:	|     |         asr.l d0,d1
    2772:	|     |         move.w d1,34(sp)
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    2776:	|     |         moveq #0,d1
    2778:	|     |         move.w 128(sp),d1
    277c:	|     |         moveq #0,d0
    277e:	|     |         move.w 130(sp),d0
    2782:	|     |         sub.l d0,d1
    2784:	|     |         move.l d1,d0
    2786:	|     |         add.w d0,d0
    2788:	|     |         move.w d0,32(sp)
  WORD bltbmod = cutwordssource*2-(extrawords*2); //Jump to next line
    278c:	|     |         moveq #0,d1
    278e:	|     |         move.w 128(sp),d1
    2792:	|     |         moveq #0,d0
    2794:	|     |         move.w 130(sp),d0
    2798:	|     |         sub.l d0,d1
    279a:	|     |         move.l d1,d0
    279c:	|     |         add.w d0,d0
    279e:	|     |         move.w d0,30(sp)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    27a2:	|     |         move.l 1b0f6 <winWidth>,d0
    27a8:	|     |         lsr.l #3,d0
    27aa:	|     |         move.l d0,d1
    27ac:	|     |         movea.l 140(sp),a0
    27b0:	|     |         move.l (a0),d0
    27b2:	|     |     /-- bpl.s 27b6 <CstScaleSprite+0x9c4>
    27b4:	|     |     |   addq.l #7,d0
    27b6:	|     |     \-> asr.l #3,d0
    27b8:	|     |         move.l d0,d0
    27ba:	|     |         sub.w d0,d1
    27bc:	|     |         move.w 128(sp),d0
    27c0:	|     |         sub.w 130(sp),d0
    27c4:	|     |         add.w d0,d0
    27c6:	|     |         add.w d1,d0
    27c8:	|     |         move.w d0,28(sp)
  WORD bltdmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    27cc:	|     |         move.l 1b0f6 <winWidth>,d0
    27d2:	|     |         lsr.l #3,d0
    27d4:	|     |         move.l d0,d1
    27d6:	|     |         movea.l 140(sp),a0
    27da:	|     |         move.l (a0),d0
    27dc:	|     |     /-- bpl.s 27e0 <CstScaleSprite+0x9ee>
    27de:	|     |     |   addq.l #7,d0
    27e0:	|     |     \-> asr.l #3,d0
    27e2:	|     |         move.l d0,d0
    27e4:	|     |         sub.w d0,d1
    27e6:	|     |         move.w 128(sp),d0
    27ea:	|     |         sub.w 130(sp),d0
    27ee:	|     |         add.w d0,d0
    27f0:	|     |         add.w d1,d0
    27f2:	|     |         move.w d0,26(sp)

  volatile struct Custom *custom = (struct Custom*)0xdff000;
    27f6:	|     |         move.l #14675968,22(sp)
  WaitBlit();
    27fe:	|     |         move.l 1b1ae <GfxBase>,d0
    2804:	|     |         movea.l d0,a6
    2806:	|     |         jsr -228(a6)

  custom->bltafwm = bltafwm;
    280a:	|     |         movea.l 22(sp),a0
    280e:	|     |         move.w 34(sp),68(a0)
  custom->bltalwm = bltalwm;
    2814:	|     |         movea.l 22(sp),a0
    2818:	|     |         move.w 124(sp),70(a0)
  custom->bltamod = bltamod;
    281e:	|     |         move.w 32(sp),d0
    2822:	|     |         movea.l 22(sp),a0
    2826:	|     |         move.w d0,100(a0)
  custom->bltbmod = bltbmod;
    282a:	|     |         move.w 30(sp),d0
    282e:	|     |         movea.l 22(sp),a0
    2832:	|     |         move.w d0,98(a0)
  custom->bltcmod = bltcmod;
    2836:	|     |         move.w 28(sp),d0
    283a:	|     |         movea.l 22(sp),a0
    283e:	|     |         move.w d0,96(a0)
  custom->bltdmod = bltdmod;
    2842:	|     |         move.w 26(sp),d0
    2846:	|     |         movea.l 22(sp),a0
    284a:	|     |         move.w d0,102(a0)
  custom->bltcon0 = bltcon0;
    284e:	|     |         move.l 104(sp),d0
    2852:	|     |         movea.l 22(sp),a0
    2856:	|     |         move.w d0,64(a0)
  custom->bltcon1 = bltcon1;  
    285a:	|     |         move.l 100(sp),d0
    285e:	|     |         movea.l 22(sp),a0
    2862:	|     |         move.w d0,66(a0)

  UWORD bltbptplus = (single->width >> 3)*single->height;
    2866:	|     |         movea.l 140(sp),a0
    286a:	|     |         move.l (a0),d0
    286c:	|     |         asr.l #3,d0
    286e:	|     |         move.l d0,d1
    2870:	|     |         movea.l 140(sp),a0
    2874:	|     |         move.l 4(a0),d0
    2878:	|     |         move.l d0,d0
    287a:	|     |         move.w d1,d2
    287c:	|     |         muls.w d0,d2
    287e:	|     |         move.w d2,20(sp)
  UWORD bltcptplus = winWidth/8*winHeight;
    2882:	|     |         move.l 1b0f6 <winWidth>,d0
    2888:	|     |         lsr.l #3,d0
    288a:	|     |         move.l d0,d1
    288c:	|     |         move.l 1b0fa <winHeight>,d0
    2892:	|     |         move.l d0,d0
    2894:	|     |         move.w d1,d2
    2896:	|     |         muls.w d0,d2
    2898:	|     |         move.w d2,18(sp)
  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    289c:	|     |         clr.l 84(sp)
    28a0:	|     |     /-- bra.s 2900 <CstScaleSprite+0xb0e>
  {
    custom->bltapt = (APTR) bltapt;
    28a2:	|     |  /--|-> move.l 120(sp),d0
    28a6:	|     |  |  |   movea.l 22(sp),a0
    28aa:	|     |  |  |   move.l d0,80(a0)
    custom->bltbpt = (APTR) bltbpt;
    28ae:	|     |  |  |   move.l 116(sp),d0
    28b2:	|     |  |  |   movea.l 22(sp),a0
    28b6:	|     |  |  |   move.l d0,76(a0)
    custom->bltcpt = (APTR) bltcpt;
    28ba:	|     |  |  |   move.l 112(sp),d0
    28be:	|     |  |  |   movea.l 22(sp),a0
    28c2:	|     |  |  |   move.l d0,72(a0)
    custom->bltdpt = (APTR) bltdpt;
    28c6:	|     |  |  |   move.l 108(sp),d0
    28ca:	|     |  |  |   movea.l 22(sp),a0
    28ce:	|     |  |  |   move.l d0,84(a0)
    //custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    bltbpt += bltbptplus;
    28d2:	|     |  |  |   moveq #0,d0
    28d4:	|     |  |  |   move.w 20(sp),d0
    28d8:	|     |  |  |   add.l d0,116(sp)
    bltcpt += bltcptplus;
    28dc:	|     |  |  |   moveq #0,d0
    28de:	|     |  |  |   move.w 18(sp),d0
    28e2:	|     |  |  |   add.l d0,112(sp)
    bltdpt += bltcptplus;
    28e6:	|     |  |  |   moveq #0,d0
    28e8:	|     |  |  |   move.w 18(sp),d0
    28ec:	|     |  |  |   add.l d0,108(sp)
    WaitBlit();
    28f0:	|     |  |  |   move.l 1b1ae <GfxBase>,d0
    28f6:	|     |  |  |   movea.l d0,a6
    28f8:	|     |  |  |   jsr -228(a6)
  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    28fc:	|     |  |  |   addq.l #1,84(sp)
    2900:	|     |  |  \-> moveq #4,d0
    2902:	|     |  |      cmp.l 84(sp),d0
    2906:	|     |  \----- bge.s 28a2 <CstScaleSprite+0xab0>
    2908:	+-----|-------- bra.s 290c <CstScaleSprite+0xb1a>
    return;
    290a:	|     \-------> nop
  }   
}
    290c:	\-------------> movem.l (sp)+,d2-d3/a6
    2910:	                lea 124(sp),sp
    2914:	                rts

00002916 <CstSetCl>:

void CstSetCl(UWORD *copperlist)
{
    2916:	subq.l #4,sp
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    2918:	move.l #14675968,(sp)
  custom->cop1lc = (ULONG) copperlist;
    291e:	move.l 8(sp),d0
    2922:	movea.l (sp),a0
    2924:	move.l d0,128(a0)
}
    2928:	nop
    292a:	addq.l #4,sp
    292c:	rts

0000292e <CstSwapBuffer>:

void CstSwapBuffer( ) {
    292e:	lea -20(sp),sp
  ULONG *tmp;
  tmp = CstViewBuffer;
    2932:	move.l 1b0d2 <CstViewBuffer>,16(sp)
  CstViewBuffer = CstDrawBuffer;
    293a:	move.l 1b0d6 <CstDrawBuffer>,d0
    2940:	move.l d0,1b0d2 <CstViewBuffer>
  CstDrawBuffer = tmp;
    2946:	move.l 16(sp),1b0d6 <CstDrawBuffer>

  struct CleanupQueue *tmp2 = CstCleanupQueueViewBuffer;
    294e:	move.l 1b0da <CstCleanupQueueViewBuffer>,12(sp)
  CstCleanupQueueViewBuffer = CstCleanupQueueDrawBuffer;
    2956:	move.l 1b0de <CstCleanupQueueDrawBuffer>,d0
    295c:	move.l d0,1b0da <CstCleanupQueueViewBuffer>
  CstCleanupQueueDrawBuffer = tmp2;
    2962:	move.l 12(sp),1b0de <CstCleanupQueueDrawBuffer>


  UWORD *copword = CstCopperList;
    296a:	move.l 1b0cc <CstCopperList>,8(sp)
  ULONG ptr = (ULONG) CstViewBuffer;
    2972:	move.l 1b0d2 <CstViewBuffer>,d0
    2978:	move.l d0,4(sp)
  UWORD highword = ptr >> 16;
    297c:	move.l 4(sp),d0
    2980:	clr.w d0
    2982:	swap d0
    2984:	move.w d0,2(sp)
  UWORD lowword = ptr & 0xffff;  
    2988:	move.w 6(sp),(sp)

  copword[CSTBPL1LOW] = lowword;
    298c:	movea.w #118,a0
    2990:	adda.l 8(sp),a0
    2994:	move.w (sp),(a0)
  copword[CSTBPL1HIGH] = highword;
    2996:	movea.w #114,a0
    299a:	adda.l 8(sp),a0
    299e:	move.w 2(sp),(a0)

  ptr +=  40*256;
    29a2:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    29aa:	move.l 4(sp),d0
    29ae:	clr.w d0
    29b0:	swap d0
    29b2:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    29b6:	move.w 6(sp),(sp)

  copword[CSTBPL2LOW] = lowword;
    29ba:	movea.w #126,a0
    29be:	adda.l 8(sp),a0
    29c2:	move.w (sp),(a0)
  copword[CSTBPL2HIGH] = highword;
    29c4:	movea.w #122,a0
    29c8:	adda.l 8(sp),a0
    29cc:	move.w 2(sp),(a0)
  
  ptr +=  40*256;
    29d0:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    29d8:	move.l 4(sp),d0
    29dc:	clr.w d0
    29de:	swap d0
    29e0:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    29e4:	move.w 6(sp),(sp)
  
  copword[CSTBPL3LOW] = lowword;
    29e8:	movea.l 8(sp),a0
    29ec:	lea 134(a0),a0
    29f0:	move.w (sp),(a0)
  copword[CSTBPL3HIGH] = highword;
    29f2:	movea.l 8(sp),a0
    29f6:	lea 130(a0),a0
    29fa:	move.w 2(sp),(a0)

  ptr +=  40*256;
    29fe:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    2a06:	move.l 4(sp),d0
    2a0a:	clr.w d0
    2a0c:	swap d0
    2a0e:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    2a12:	move.w 6(sp),(sp)

  copword[CSTBPL4LOW] = lowword;
    2a16:	movea.l 8(sp),a0
    2a1a:	lea 142(a0),a0
    2a1e:	move.w (sp),(a0)
  copword[CSTBPL4HIGH] = highword;
    2a20:	movea.l 8(sp),a0
    2a24:	lea 138(a0),a0
    2a28:	move.w 2(sp),(a0)

  ptr +=  40*256;
    2a2c:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    2a34:	move.l 4(sp),d0
    2a38:	clr.w d0
    2a3a:	swap d0
    2a3c:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    2a40:	move.w 6(sp),(sp)

  copword[CSTBPL5LOW] = lowword;
    2a44:	movea.l 8(sp),a0
    2a48:	lea 150(a0),a0
    2a4c:	move.w (sp),(a0)
  copword[CSTBPL5HIGH] = highword;
    2a4e:	movea.l 8(sp),a0
    2a52:	lea 146(a0),a0
    2a56:	move.w 2(sp),(a0)

}
    2a5a:	nop
    2a5c:	lea 20(sp),sp
    2a60:	rts

00002a62 <CstReserveBackdrop>:

BOOL CstReserveBackdrop(int width, int height) {
    2a62:	          lea -56(sp),sp
    2a66:	          move.l a6,-(sp)

 	KPrintF("CstReserveBackdrop: Begin");
    2a68:	          pea 16858 <PutChar+0x318>
    2a6e:	          jsr 15bf0 <KPrintF>
    2a74:	          addq.l #4,sp

  width = width / 8;
    2a76:	          move.l 64(sp),d0
    2a7a:	      /-- bpl.s 2a7e <CstReserveBackdrop+0x1c>
    2a7c:	      |   addq.l #7,d0
    2a7e:	      \-> asr.l #3,d0
    2a80:	          move.l d0,64(sp)

  if( width < 40) 
    2a84:	          moveq #39,d0
    2a86:	          cmp.l 64(sp),d0
    2a8a:	      /-- blt.s 2aa0 <CstReserveBackdrop+0x3e>
  {
    KPrintF("CstReserveBackdrop: Screens smaller than 320px not supported.");
    2a8c:	      |   pea 16872 <PutChar+0x332>
    2a92:	      |   jsr 15bf0 <KPrintF>
    2a98:	      |   addq.l #4,sp
    return FALSE;
    2a9a:	      |   clr.w d0
    2a9c:	/-----|-- bra.w 2d5c <CstReserveBackdrop+0x2fa>
  }  
  KPrintF("CstReserveBackdrop: Screen Okay");
    2aa0:	|     \-> pea 168b0 <PutChar+0x370>
    2aa6:	|         jsr 15bf0 <KPrintF>
    2aac:	|         addq.l #4,sp

  CstCopperList = CstCreateCopperlist( width);
    2aae:	|         move.l 64(sp),-(sp)
    2ab2:	|         jsr fce <CstCreateCopperlist>
    2ab8:	|         addq.l #4,sp
    2aba:	|         move.l d0,1b0cc <CstCopperList>
  KPrintF("CstReserveBackdrop: Copperlist created");
    2ac0:	|         pea 168d0 <PutChar+0x390>
    2ac6:	|         jsr 15bf0 <KPrintF>
    2acc:	|         addq.l #4,sp
  CstBackdropSizePlane = width*height;
    2ace:	|         move.l 64(sp),d1
    2ad2:	|         move.l 68(sp),d0
    2ad6:	|         muls.w d1,d0
    2ad8:	|         move.w d0,1b0c2 <CstBackdropSizePlane>
  CstBackdropSize = CstBackdropSizePlane * 5; //Todo: Support other Bitplane Modes;  
    2ade:	|         move.w 1b0c2 <CstBackdropSizePlane>,d1
    2ae4:	|         move.w d1,d0
    2ae6:	|         add.w d0,d0
    2ae8:	|         add.w d0,d0
    2aea:	|         add.w d1,d0
    2aec:	|         move.w d0,1b0c0 <CstBackdropSize>
  

  CstBackDrop = AllocVec(CstBackdropSize,MEMF_CHIP);
    2af2:	|         move.w 1b0c0 <CstBackdropSize>,d0
    2af8:	|         move.w d0,d0
    2afa:	|         andi.l #65535,d0
    2b00:	|         move.l d0,48(sp)
    2b04:	|         moveq #2,d1
    2b06:	|         move.l d1,44(sp)
    2b0a:	|         move.l 1b1a2 <SysBase>,d0
    2b10:	|         movea.l d0,a6
    2b12:	|         move.l 48(sp),d0
    2b16:	|         move.l 44(sp),d1
    2b1a:	|         jsr -684(a6)
    2b1e:	|         move.l d0,40(sp)
    2b22:	|         move.l 40(sp),d0
    2b26:	|         move.l d0,1b0c4 <CstBackDrop>
  if( !CstBackDrop)
    2b2c:	|         move.l 1b0c4 <CstBackDrop>,d0
    2b32:	|     /-- bne.s 2b48 <CstReserveBackdrop+0xe6>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for Backdrop");
    2b34:	|     |   pea 168f7 <PutChar+0x3b7>
    2b3a:	|     |   jsr 15bf0 <KPrintF>
    2b40:	|     |   addq.l #4,sp
    return FALSE;  
    2b42:	|     |   clr.w d0
    2b44:	+-----|-- bra.w 2d5c <CstReserveBackdrop+0x2fa>
  }
  KPrintF("CstReserveBackdrop: Backdrop reserved");
    2b48:	|     \-> pea 1692f <PutChar+0x3ef>
    2b4e:	|         jsr 15bf0 <KPrintF>
    2b54:	|         addq.l #4,sp

  //Initialize Buffer
  ULONG *cursor = (ULONG *)CstBackDrop;
    2b56:	|         move.l 1b0c4 <CstBackDrop>,56(sp)
  for(int i=0;i<CstBackdropSize/4;i++)
    2b5e:	|         clr.l 52(sp)
    2b62:	|     /-- bra.s 2b78 <CstReserveBackdrop+0x116>
  {
    *cursor++ = 0;
    2b64:	|  /--|-> move.l 56(sp),d0
    2b68:	|  |  |   move.l d0,d1
    2b6a:	|  |  |   addq.l #4,d1
    2b6c:	|  |  |   move.l d1,56(sp)
    2b70:	|  |  |   movea.l d0,a0
    2b72:	|  |  |   clr.l (a0)
  for(int i=0;i<CstBackdropSize/4;i++)
    2b74:	|  |  |   addq.l #1,52(sp)
    2b78:	|  |  \-> move.w 1b0c0 <CstBackdropSize>,d0
    2b7e:	|  |      lsr.w #2,d0
    2b80:	|  |      move.w d0,d0
    2b82:	|  |      andi.l #65535,d0
    2b88:	|  |      cmp.l 52(sp),d0
    2b8c:	|  \----- bgt.s 2b64 <CstReserveBackdrop+0x102>
  }  
  
  CstDrawBuffer = AllocVec(CstBackdropSize+width*2,MEMF_CHIP); //Some extra size for bob routine border area
    2b8e:	|         move.w 1b0c0 <CstBackdropSize>,d0
    2b94:	|         move.w d0,d0
    2b96:	|         andi.l #65535,d0
    2b9c:	|         move.l 64(sp),d1
    2ba0:	|         add.l d1,d1
    2ba2:	|         add.l d1,d0
    2ba4:	|         move.l d0,36(sp)
    2ba8:	|         moveq #2,d0
    2baa:	|         move.l d0,32(sp)
    2bae:	|         move.l 1b1a2 <SysBase>,d0
    2bb4:	|         movea.l d0,a6
    2bb6:	|         move.l 36(sp),d0
    2bba:	|         move.l 32(sp),d1
    2bbe:	|         jsr -684(a6)
    2bc2:	|         move.l d0,28(sp)
    2bc6:	|         move.l 28(sp),d0
    2bca:	|         move.l d0,1b0d6 <CstDrawBuffer>
  if( !CstDrawBuffer)
    2bd0:	|         move.l 1b0d6 <CstDrawBuffer>,d0
    2bd6:	|     /-- bne.s 2bec <CstReserveBackdrop+0x18a>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for DrawBuffer");
    2bd8:	|     |   pea 16955 <PutChar+0x415>
    2bde:	|     |   jsr 15bf0 <KPrintF>
    2be4:	|     |   addq.l #4,sp
    return FALSE;  
    2be6:	|     |   clr.w d0
    2be8:	+-----|-- bra.w 2d5c <CstReserveBackdrop+0x2fa>
  }
  KPrintF("CstReserveBackdrop: DrawBuffer reserved");
    2bec:	|     \-> pea 1698f <PutChar+0x44f>
    2bf2:	|         jsr 15bf0 <KPrintF>
    2bf8:	|         addq.l #4,sp
    
  CstBackDropBufferApplyStart = AllocVec( 100*3*2,MEMF_ANY);
    2bfa:	|         move.l #600,24(sp)
    2c02:	|         clr.l 20(sp)
    2c06:	|         move.l 1b1a2 <SysBase>,d0
    2c0c:	|         movea.l d0,a6
    2c0e:	|         move.l 24(sp),d0
    2c12:	|         move.l 20(sp),d1
    2c16:	|         jsr -684(a6)
    2c1a:	|         move.l d0,16(sp)
    2c1e:	|         move.l 16(sp),d0
    2c22:	|         move.l d0,1b0e2 <CstBackDropBufferApplyStart>
  if( !CstBackDropBufferApplyStart)
    2c28:	|         move.l 1b0e2 <CstBackDropBufferApplyStart>,d0
    2c2e:	|     /-- bne.s 2c44 <CstReserveBackdrop+0x1e2>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for CstBackDropBufferApplyStart");
    2c30:	|     |   pea 169b7 <PutChar+0x477>
    2c36:	|     |   jsr 15bf0 <KPrintF>
    2c3c:	|     |   addq.l #4,sp
    return FALSE;  
    2c3e:	|     |   clr.w d0
    2c40:	+-----|-- bra.w 2d5c <CstReserveBackdrop+0x2fa>
  }
  CstBackDropBufferApplyCursor = CstBackDropBufferApplyStart;
    2c44:	|     \-> move.l 1b0e2 <CstBackDropBufferApplyStart>,d0
    2c4a:	|         move.l d0,1b0e6 <CstBackDropBufferApplyCursor>
  *CstBackDropBufferApplyStart = 0;
    2c50:	|         movea.l 1b0e2 <CstBackDropBufferApplyStart>,a0
    2c56:	|         clr.w (a0)

  *CstBackDropBufferApplyStart = 0;
    2c58:	|         movea.l 1b0e2 <CstBackDropBufferApplyStart>,a0
    2c5e:	|         clr.w (a0)
  CstViewBuffer = AllocVec(CstBackdropSize+width*2,MEMF_CHIP); //Some extra size for bob routine border area
    2c60:	|         move.w 1b0c0 <CstBackdropSize>,d0
    2c66:	|         move.w d0,d0
    2c68:	|         andi.l #65535,d0
    2c6e:	|         move.l 64(sp),d1
    2c72:	|         add.l d1,d1
    2c74:	|         add.l d1,d0
    2c76:	|         move.l d0,12(sp)
    2c7a:	|         moveq #2,d1
    2c7c:	|         move.l d1,8(sp)
    2c80:	|         move.l 1b1a2 <SysBase>,d0
    2c86:	|         movea.l d0,a6
    2c88:	|         move.l 12(sp),d0
    2c8c:	|         move.l 8(sp),d1
    2c90:	|         jsr -684(a6)
    2c94:	|         move.l d0,4(sp)
    2c98:	|         move.l 4(sp),d0
    2c9c:	|         move.l d0,1b0d2 <CstViewBuffer>
  if( !CstViewBuffer)
    2ca2:	|         move.l 1b0d2 <CstViewBuffer>,d0
    2ca8:	|     /-- bne.s 2cbe <CstReserveBackdrop+0x25c>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for ViewBuffer");
    2caa:	|     |   pea 16a02 <PutChar+0x4c2>
    2cb0:	|     |   jsr 15bf0 <KPrintF>
    2cb6:	|     |   addq.l #4,sp
    return FALSE;  
    2cb8:	|     |   clr.w d0
    2cba:	+-----|-- bra.w 2d5c <CstReserveBackdrop+0x2fa>
  }
  KPrintF("CstReserveBackdrop: ViewBuffer reserved");
    2cbe:	|     \-> pea 16a3c <PutChar+0x4fc>
    2cc4:	|         jsr 15bf0 <KPrintF>
    2cca:	|         addq.l #4,sp
  
  CstDrawBuffer += width/4; //divide with 4 because pointer is ulong 
    2ccc:	|         move.l 1b0d6 <CstDrawBuffer>,d1
    2cd2:	|         move.l 64(sp),d0
    2cd6:	|     /-- bpl.s 2cda <CstReserveBackdrop+0x278>
    2cd8:	|     |   addq.l #3,d0
    2cda:	|     \-> asr.l #2,d0
    2cdc:	|         add.l d0,d0
    2cde:	|         add.l d0,d0
    2ce0:	|         add.l d1,d0
    2ce2:	|         move.l d0,1b0d6 <CstDrawBuffer>
  CstViewBuffer += width/4; //divide with 4 because pointer is ulong
    2ce8:	|         move.l 1b0d2 <CstViewBuffer>,d1
    2cee:	|         move.l 64(sp),d0
    2cf2:	|     /-- bpl.s 2cf6 <CstReserveBackdrop+0x294>
    2cf4:	|     |   addq.l #3,d0
    2cf6:	|     \-> asr.l #2,d0
    2cf8:	|         add.l d0,d0
    2cfa:	|         add.l d0,d0
    2cfc:	|         add.l d1,d0
    2cfe:	|         move.l d0,1b0d2 <CstViewBuffer>
  debug_register_bitmap(CstViewBuffer, "viewbuffer.bpl", width*8, height, 5, 0);
#endif

  

  if( !CstCopperList || ! CstDrawBuffer || !CstViewBuffer)
    2d04:	|         move.l 1b0cc <CstCopperList>,d0
    2d0a:	|     /-- beq.s 2d1c <CstReserveBackdrop+0x2ba>
    2d0c:	|     |   move.l 1b0d6 <CstDrawBuffer>,d0
    2d12:	|     +-- beq.s 2d1c <CstReserveBackdrop+0x2ba>
    2d14:	|     |   move.l 1b0d2 <CstViewBuffer>,d0
    2d1a:	|  /--|-- bne.s 2d2e <CstReserveBackdrop+0x2cc>
  {
    KPrintF("CstReserveBackdrop: Memory allocation failed");
    2d1c:	|  |  \-> pea 16a64 <PutChar+0x524>
    2d22:	|  |      jsr 15bf0 <KPrintF>
    2d28:	|  |      addq.l #4,sp
    return FALSE;
    2d2a:	|  |      clr.w d0
    2d2c:	+--|----- bra.s 2d5c <CstReserveBackdrop+0x2fa>
  }

  KPrintF("CstReserveBackdrop: Setting Copperlist");
    2d2e:	|  \----> pea 16a91 <PutChar+0x551>
    2d34:	|         jsr 15bf0 <KPrintF>
    2d3a:	|         addq.l #4,sp
  CstSetCl( CstCopperList);
    2d3c:	|         move.l 1b0cc <CstCopperList>,d0
    2d42:	|         move.l d0,-(sp)
    2d44:	|         jsr 2916 <CstSetCl>
    2d4a:	|         addq.l #4,sp
  KPrintF("CstReserveBackdrop: Copperlist Set");
    2d4c:	|         pea 16ab8 <PutChar+0x578>
    2d52:	|         jsr 15bf0 <KPrintF>
    2d58:	|         addq.l #4,sp
  return TRUE;
    2d5a:	|         moveq #1,d0

}
    2d5c:	\-------> movea.l (sp)+,a6
    2d5e:	          lea 56(sp),sp
    2d62:	          rts

00002d64 <drawLine>:
#include "support/gcc8_c_support.h"
#include "line.h"

extern int sceneWidth, sceneHeight;

void drawLine(int x1, int y1, int x2, int y2) {
    2d64:	       lea -20(sp),sp
	int x, y;
	BOOL backwards = FALSE;
    2d68:	       clr.w 10(sp)
	
	if (x1 < 0)  x1 = 0;
    2d6c:	       tst.l 24(sp)
    2d70:	   /-- bge.s 2d76 <drawLine+0x12>
    2d72:	   |   clr.l 24(sp)
	if (y1 < 0)  y1 = 0;
    2d76:	   \-> tst.l 28(sp)
    2d7a:	   /-- bge.s 2d80 <drawLine+0x1c>
    2d7c:	   |   clr.l 28(sp)
	if (x2 < 0)  x2 = 0;
    2d80:	   \-> tst.l 32(sp)
    2d84:	   /-- bge.s 2d8a <drawLine+0x26>
    2d86:	   |   clr.l 32(sp)
	if (y2 < 0)  y2 = 0;
    2d8a:	   \-> tst.l 36(sp)
    2d8e:	   /-- bge.s 2d94 <drawLine+0x30>
    2d90:	   |   clr.l 36(sp)
	if (x1 > sceneWidth) x1 = sceneWidth - 1;
    2d94:	   \-> move.l 1b296 <sceneWidth>,d0
    2d9a:	       cmp.l 24(sp),d0
    2d9e:	   /-- bge.s 2dae <drawLine+0x4a>
    2da0:	   |   move.l 1b296 <sceneWidth>,d0
    2da6:	   |   move.l d0,d1
    2da8:	   |   subq.l #1,d1
    2daa:	   |   move.l d1,24(sp)
	if (x2 > sceneWidth) x2 = sceneWidth - 1;
    2dae:	   \-> move.l 1b296 <sceneWidth>,d0
    2db4:	       cmp.l 32(sp),d0
    2db8:	   /-- bge.s 2dc8 <drawLine+0x64>
    2dba:	   |   move.l 1b296 <sceneWidth>,d0
    2dc0:	   |   move.l d0,d1
    2dc2:	   |   subq.l #1,d1
    2dc4:	   |   move.l d1,32(sp)
	if (y1 > sceneHeight) y1 = sceneHeight - 1;
    2dc8:	   \-> move.l 1b29a <sceneHeight>,d0
    2dce:	       cmp.l 28(sp),d0
    2dd2:	   /-- bge.s 2de2 <drawLine+0x7e>
    2dd4:	   |   move.l 1b29a <sceneHeight>,d0
    2dda:	   |   move.l d0,d1
    2ddc:	   |   subq.l #1,d1
    2dde:	   |   move.l d1,28(sp)
	if (y2 > sceneHeight) y2 = sceneHeight - 1;
    2de2:	   \-> move.l 1b29a <sceneHeight>,d0
    2de8:	       cmp.l 36(sp),d0
    2dec:	   /-- bge.s 2dfc <drawLine+0x98>
    2dee:	   |   move.l 1b29a <sceneHeight>,d0
    2df4:	   |   move.l d0,d1
    2df6:	   |   subq.l #1,d1
    2df8:	   |   move.l d1,36(sp)

	if (x1 > x2) {
    2dfc:	   \-> move.l 24(sp),d0
    2e00:	       cmp.l 32(sp),d0
    2e04:	/----- ble.s 2e20 <drawLine+0xbc>
		x = x2; 
    2e06:	|      move.l 32(sp),16(sp)
		backwards = !backwards;
    2e0c:	|      tst.w 10(sp)
    2e10:	|      seq d0
    2e12:	|      neg.b d0
    2e14:	|      move.b d0,d0
    2e16:	|      andi.w #255,d0
    2e1a:	|      move.w d0,10(sp)
    2e1e:	|  /-- bra.s 2e26 <drawLine+0xc2>
	} else x = x1;
    2e20:	\--|-> move.l 24(sp),16(sp)
		
	if (y1 > y2) {
    2e26:	   \-> move.l 28(sp),d1
    2e2a:	       cmp.l 36(sp),d1
    2e2e:	/----- ble.s 2e4a <drawLine+0xe6>
		y = y2; 
    2e30:	|      move.l 36(sp),12(sp)
		backwards = !backwards;
    2e36:	|      tst.w 10(sp)
    2e3a:	|      seq d0
    2e3c:	|      neg.b d0
    2e3e:	|      move.b d0,d0
    2e40:	|      andi.w #255,d0
    2e44:	|      move.w d0,10(sp)
    2e48:	|  /-- bra.s 2e50 <drawLine+0xec>
	} else y = y1;	
    2e4a:	\--|-> move.l 28(sp),12(sp)
	
	int diffX = x2-x1;
    2e50:	   \-> move.l 32(sp),d0
    2e54:	       sub.l 24(sp),d0
    2e58:	       move.l d0,6(sp)
    diffX = diffX < 0 ? diffX * -1 : diffX;
    2e5c:	       move.l 6(sp),d0
    2e60:	   /-- bpl.s 2e64 <drawLine+0x100>
    2e62:	   |   neg.l d0
    2e64:	   \-> move.l d0,6(sp)
	int diffY = y2-y1;	
    2e68:	       move.l 36(sp),d1
    2e6c:	       sub.l 28(sp),d1
    2e70:	       move.l d1,2(sp)
    diffY = diffY < 0 ? diffY * -1 : diffY;
    2e74:	       move.l 2(sp),d0
    2e78:	   /-- bpl.s 2e7c <drawLine+0x118>
    2e7a:	   |   neg.l d0
    2e7c:	   \-> move.l d0,2(sp)
	
	if (! diffX) {
    2e80:	       tst.l 6(sp)
    2e84:	   /-- bne.s 2ea8 <drawLine+0x144>
		diffX = 1;
    2e86:	   |   moveq #1,d0
    2e88:	   |   move.l d0,6(sp)
		if (x == sceneWidth - 1) x = sceneWidth -2;
    2e8c:	   |   move.l 1b296 <sceneWidth>,d0
    2e92:	   |   subq.l #1,d0
    2e94:	   |   cmp.l 16(sp),d0
    2e98:	   +-- bne.s 2ea8 <drawLine+0x144>
    2e9a:	   |   move.l 1b296 <sceneWidth>,d0
    2ea0:	   |   move.l d0,d1
    2ea2:	   |   subq.l #2,d1
    2ea4:	   |   move.l d1,16(sp)
	}
	if (! diffY) {
    2ea8:	   \-> tst.l 2(sp)
    2eac:	   /-- bne.s 2ed0 <drawLine+0x16c>
		diffY = 1;
    2eae:	   |   moveq #1,d0
    2eb0:	   |   move.l d0,2(sp)
		if (y == sceneHeight - 1) y = sceneHeight -2;
    2eb4:	   |   move.l 1b29a <sceneHeight>,d0
    2eba:	   |   subq.l #1,d0
    2ebc:	   |   cmp.l 12(sp),d0
    2ec0:	   +-- bne.s 2ed0 <drawLine+0x16c>
    2ec2:	   |   move.l 1b29a <sceneHeight>,d0
    2ec8:	   |   move.l d0,d1
    2eca:	   |   subq.l #2,d1
    2ecc:	   |   move.l d1,12(sp)
	}

    KPrintF("drawLine: Not implemented on Amiga"); //Amiga Todo: Implement 	
    2ed0:	   \-> pea 16adb <PutChar+0x59b>
    2ed6:	       jsr 15bf0 <KPrintF>
    2edc:	       addq.l #4,sp
	
}
    2ede:	       nop
    2ee0:	       lea 20(sp),sp
    2ee4:	       rts

00002ee6 <deleteTextures>:
extern int specialSettings;
struct textureList *firstTexture = NULL;
BOOL NPOT_textures = TRUE;

void deleteTextures(unsigned int n,  unsigned int * textures)
{
    2ee6:	                      lea -24(sp),sp
    2eea:	                      move.l a6,-(sp)
	if (firstTexture == NULL) {
    2eec:	                      move.l 1b0fe <firstTexture>,d0
    2ef2:	/-------------------- beq.w 2fd0 <deleteTextures+0xea>
		//debugOut("Deleting texture while list is already empty.\n");
	} else {
		for (unsigned int i = 0; i < n; i++) {
    2ef6:	|                     clr.l 24(sp)
    2efa:	|     /-------------- bra.w 2fc4 <deleteTextures+0xde>
			BOOL found = FALSE;
    2efe:	|  /--|-------------> clr.w 18(sp)
			struct textureList *list = firstTexture;
    2f02:	|  |  |               move.l 1b0fe <firstTexture>,20(sp)
			if (list->name == textures[i]) {
    2f0a:	|  |  |               movea.l 20(sp),a0
    2f0e:	|  |  |               move.l (a0),d1
    2f10:	|  |  |               move.l 24(sp),d0
    2f14:	|  |  |               add.l d0,d0
    2f16:	|  |  |               add.l d0,d0
    2f18:	|  |  |               movea.l 36(sp),a0
    2f1c:	|  |  |               adda.l d0,a0
    2f1e:	|  |  |               move.l (a0),d0
    2f20:	|  |  |               cmp.l d1,d0
    2f22:	|  |  |  /----------- bne.w 2fb6 <deleteTextures+0xd0>
				found = TRUE;
    2f26:	|  |  |  |            move.w #1,18(sp)
				firstTexture = list->next;
    2f2c:	|  |  |  |            movea.l 20(sp),a0
    2f30:	|  |  |  |            move.l 12(a0),d0
    2f34:	|  |  |  |            move.l d0,1b0fe <firstTexture>
				FreeVec(list);
    2f3a:	|  |  |  |            move.l 20(sp),6(sp)
    2f40:	|  |  |  |            move.l 1b1a2 <SysBase>,d0
    2f46:	|  |  |  |            movea.l d0,a6
    2f48:	|  |  |  |            movea.l 6(sp),a1
    2f4c:	|  |  |  |            jsr -690(a6)
				continue;
    2f50:	|  |  |  |  /-------- bra.s 2fc0 <deleteTextures+0xda>
			}

			while (list->next) {
				if (list->next->name == textures[i]) {
    2f52:	|  |  |  |  |  /----> movea.l 20(sp),a0
    2f56:	|  |  |  |  |  |      movea.l 12(a0),a0
    2f5a:	|  |  |  |  |  |      move.l (a0),d1
    2f5c:	|  |  |  |  |  |      move.l 24(sp),d0
    2f60:	|  |  |  |  |  |      add.l d0,d0
    2f62:	|  |  |  |  |  |      add.l d0,d0
    2f64:	|  |  |  |  |  |      movea.l 36(sp),a0
    2f68:	|  |  |  |  |  |      adda.l d0,a0
    2f6a:	|  |  |  |  |  |      move.l (a0),d0
    2f6c:	|  |  |  |  |  |      cmp.l d1,d0
    2f6e:	|  |  |  |  |  |  /-- bne.s 2fac <deleteTextures+0xc6>
					found = TRUE;
    2f70:	|  |  |  |  |  |  |   move.w #1,18(sp)
					struct textureList *deleteMe = list->next;
    2f76:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    2f7a:	|  |  |  |  |  |  |   move.l 12(a0),14(sp)
					list->next = list->next->next;
    2f80:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    2f84:	|  |  |  |  |  |  |   movea.l 12(a0),a0
    2f88:	|  |  |  |  |  |  |   move.l 12(a0),d0
    2f8c:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    2f90:	|  |  |  |  |  |  |   move.l d0,12(a0)
					FreeVec(deleteMe);
    2f94:	|  |  |  |  |  |  |   move.l 14(sp),10(sp)
    2f9a:	|  |  |  |  |  |  |   move.l 1b1a2 <SysBase>,d0
    2fa0:	|  |  |  |  |  |  |   movea.l d0,a6
    2fa2:	|  |  |  |  |  |  |   movea.l 10(sp),a1
    2fa6:	|  |  |  |  |  |  |   jsr -690(a6)
					break;
    2faa:	|  |  |  |  +--|--|-- bra.s 2fc0 <deleteTextures+0xda>
				}
				list = list->next;
    2fac:	|  |  |  |  |  |  \-> movea.l 20(sp),a0
    2fb0:	|  |  |  |  |  |      move.l 12(a0),20(sp)
			while (list->next) {
    2fb6:	|  |  |  \--|--|----> movea.l 20(sp),a0
    2fba:	|  |  |     |  |      move.l 12(a0),d0
    2fbe:	|  |  |     |  \----- bne.s 2f52 <deleteTextures+0x6c>
		for (unsigned int i = 0; i < n; i++) {
    2fc0:	|  |  |     \-------> addq.l #1,24(sp)
    2fc4:	|  |  \-------------> move.l 24(sp),d0
    2fc8:	|  |                  cmp.l 32(sp),d0
    2fcc:	|  \----------------- bcs.w 2efe <deleteTextures+0x18>
			}
		}
	}
}
    2fd0:	\-------------------> nop
    2fd2:	                      movea.l (sp)+,a6
    2fd4:	                      lea 24(sp),sp
    2fd8:	                      rts

00002fda <setGraphicsWindow>:

void setGraphicsWindow(BOOL fullscreen) {
    2fda:	subq.l #4,sp
    2fdc:	move.l 8(sp),d0
    2fe0:	move.w d0,d0
    2fe2:	move.w d0,2(sp)
	KPrintF("setGraphicsWindow: Not implemented on Amiga yet"); //TODO
    2fe6:	pea 16afe <PutChar+0x5be>
    2fec:	jsr 15bf0 <KPrintF>
    2ff2:	addq.l #4,sp
}
    2ff4:	nop
    2ff6:	addq.l #4,sp
    2ff8:	rts

00002ffa <resourceNameFromNum>:

extern int numResourceNames /* = 0*/;
extern char * * allResourceNames /*= NULL*/;

const char * resourceNameFromNum (int i) {
	if (i == -1) return NULL;
    2ffa:	       moveq #-1,d0
    2ffc:	       cmp.l 4(sp),d0
    3000:	   /-- bne.s 3006 <resourceNameFromNum+0xc>
    3002:	   |   moveq #0,d0
    3004:	/--|-- bra.s 303e <resourceNameFromNum+0x44>
	if (numResourceNames == 0) return "RESOURCE";
    3006:	|  \-> move.l 1b17e <numResourceNames>,d0
    300c:	|  /-- bne.s 3016 <resourceNameFromNum+0x1c>
    300e:	|  |   move.l #92974,d0
    3014:	+--|-- bra.s 303e <resourceNameFromNum+0x44>
	if (i < numResourceNames) return allResourceNames[i];
    3016:	|  \-> move.l 1b17e <numResourceNames>,d0
    301c:	|      cmp.l 4(sp),d0
    3020:	|  /-- ble.s 3038 <resourceNameFromNum+0x3e>
    3022:	|  |   move.l 1b136 <allResourceNames>,d1
    3028:	|  |   move.l 4(sp),d0
    302c:	|  |   add.l d0,d0
    302e:	|  |   add.l d0,d0
    3030:	|  |   movea.l d1,a0
    3032:	|  |   adda.l d0,a0
    3034:	|  |   move.l (a0),d0
    3036:	+--|-- bra.s 303e <resourceNameFromNum+0x44>
	return "Unknown resource";
    3038:	|  \-> move.l #92983,d0
    303e:	\----> rts

00003040 <main_sludge>:
char * gamePath = NULL;
char *bundleFolder;
int weAreDoneSoQuit;

int main_sludge(int argc, char *argv[])
{
    3040:	          lea -44(sp),sp
    3044:	          movem.l d2-d3/a6,-(sp)
	/* Dimensions of our window. */
	//AMIGA TODO: Maybe remove as there will be no windowed mode
    winWidth = 320;
    3048:	          move.l #320,1b0f6 <winWidth>
    winHeight = 256;
    3052:	          move.l #256,1b0fa <winHeight>

	char * sludgeFile;

	if(argc == 0) {
    305c:	          tst.l 60(sp)
    3060:	      /-- bne.s 3078 <main_sludge+0x38>
		bundleFolder = copyString("game/");
    3062:	      |   pea 16b48 <PutChar+0x608>
    3068:	      |   jsr b8 <copyString>
    306e:	      |   addq.l #4,sp
    3070:	      |   move.l d0,1b10e <bundleFolder>
    3076:	   /--|-- bra.s 308e <main_sludge+0x4e>
	} else {
		bundleFolder = copyString(argv[0]);
    3078:	   |  \-> movea.l 64(sp),a0
    307c:	   |      move.l (a0),d0
    307e:	   |      move.l d0,-(sp)
    3080:	   |      jsr b8 <copyString>
    3086:	   |      addq.l #4,sp
    3088:	   |      move.l d0,1b10e <bundleFolder>
	}
    
	int lastSlash = -1;
    308e:	   \----> moveq #-1,d0
    3090:	          move.l d0,48(sp)
	for (int i = 0; bundleFolder[i]; i ++) {
    3094:	          clr.l 44(sp)
    3098:	   /----- bra.s 30ba <main_sludge+0x7a>
		if (bundleFolder[i] == PATHSLASH) lastSlash = i;
    309a:	/--|----> move.l 1b10e <bundleFolder>,d1
    30a0:	|  |      move.l 44(sp),d0
    30a4:	|  |      movea.l d1,a0
    30a6:	|  |      adda.l d0,a0
    30a8:	|  |      move.b (a0),d0
    30aa:	|  |      cmpi.b #47,d0
    30ae:	|  |  /-- bne.s 30b6 <main_sludge+0x76>
    30b0:	|  |  |   move.l 44(sp),48(sp)
	for (int i = 0; bundleFolder[i]; i ++) {
    30b6:	|  |  \-> addq.l #1,44(sp)
    30ba:	|  \----> move.l 1b10e <bundleFolder>,d1
    30c0:	|         move.l 44(sp),d0
    30c4:	|         movea.l d1,a0
    30c6:	|         adda.l d0,a0
    30c8:	|         move.b (a0),d0
    30ca:	\-------- bne.s 309a <main_sludge+0x5a>
	}
	bundleFolder[lastSlash+1] = NULL;
    30cc:	          move.l 1b10e <bundleFolder>,d0
    30d2:	          move.l 48(sp),d1
    30d6:	          addq.l #1,d1
    30d8:	          movea.l d0,a0
    30da:	          adda.l d1,a0
    30dc:	          clr.b (a0)

	if (argc > 1) {
    30de:	          moveq #1,d0
    30e0:	          cmp.l 60(sp),d0
    30e4:	      /-- bge.s 3100 <main_sludge+0xc0>
		sludgeFile = argv[argc - 1];
    30e6:	      |   move.l 60(sp),d0
    30ea:	      |   addi.l #1073741823,d0
    30f0:	      |   add.l d0,d0
    30f2:	      |   add.l d0,d0
    30f4:	      |   movea.l 64(sp),a0
    30f8:	      |   adda.l d0,a0
    30fa:	      |   move.l (a0),52(sp)
    30fe:	   /--|-- bra.s 315a <main_sludge+0x11a>
	} else {
		sludgeFile = joinStrings (bundleFolder, "gamedata.slg");
    3100:	   |  \-> move.l 1b10e <bundleFolder>,d0
    3106:	   |      pea 16b4e <PutChar+0x60e>
    310c:	   |      move.l d0,-(sp)
    310e:	   |      jsr 12c2a <joinStrings>
    3114:	   |      addq.l #8,sp
    3116:	   |      move.l d0,52(sp)
		if (! ( fileExists (sludgeFile) ) ) {
    311a:	   |      move.l 52(sp),-(sp)
    311e:	   |      jsr 12b24 <fileExists>
    3124:	   |      addq.l #4,sp
    3126:	   |      tst.b d0
    3128:	   +----- bne.s 315a <main_sludge+0x11a>
			FreeVec(sludgeFile);
    312a:	   |      move.l 52(sp),40(sp)
    3130:	   |      move.l 1b1a2 <SysBase>,d0
    3136:	   |      movea.l d0,a6
    3138:	   |      movea.l 40(sp),a1
    313c:	   |      jsr -690(a6)
			sludgeFile = joinStrings (bundleFolder, "gamedata");			
    3140:	   |      move.l 1b10e <bundleFolder>,d0
    3146:	   |      pea 16b5b <PutChar+0x61b>
    314c:	   |      move.l d0,-(sp)
    314e:	   |      jsr 12c2a <joinStrings>
    3154:	   |      addq.l #8,sp
    3156:	   |      move.l d0,52(sp)
	//AMIGA TODO: Show arguments
	/*if (! parseCmdlineParameters(argc, argv) && !(sludgeFile) ) {
		printCmdlineUsage();
		return 0;
	}*/
	KPrintF("Game file not found.\n");
    315a:	   \----> pea 16b64 <PutChar+0x624>
    3160:	          jsr 15bf0 <KPrintF>
    3166:	          addq.l #4,sp
	if (! fileExists(sludgeFile) ) {	
    3168:	          move.l 52(sp),-(sp)
    316c:	          jsr 12b24 <fileExists>
    3172:	          addq.l #4,sp
    3174:	          tst.b d0
    3176:	      /-- bne.s 31ce <main_sludge+0x18e>
		Write(Output(), (APTR)"Game file not found.\n", 21);
    3178:	      |   move.l 1b1aa <DOSBase>,d0
    317e:	      |   movea.l d0,a6
    3180:	      |   jsr -60(a6)
    3184:	      |   move.l d0,28(sp)
    3188:	      |   move.l 28(sp),d0
    318c:	      |   move.l d0,24(sp)
    3190:	      |   move.l #93028,20(sp)
    3198:	      |   moveq #21,d0
    319a:	      |   move.l d0,16(sp)
    319e:	      |   move.l 1b1aa <DOSBase>,d0
    31a4:	      |   movea.l d0,a6
    31a6:	      |   move.l 24(sp),d1
    31aa:	      |   move.l 20(sp),d2
    31ae:	      |   move.l 16(sp),d3
    31b2:	      |   jsr -48(a6)
    31b6:	      |   move.l d0,12(sp)
		KPrintF("Game file not found.\n");
    31ba:	      |   pea 16b64 <PutChar+0x624>
    31c0:	      |   jsr 15bf0 <KPrintF>
    31c6:	      |   addq.l #4,sp
		//AMIGA TODO: Show arguments
		//printCmdlineUsage();
		return 0;
    31c8:	      |   moveq #0,d0
    31ca:	/-----|-- bra.w 33c6 <main_sludge+0x386>
	}

	KPrintF("Setgamefilepath\n");
    31ce:	|     \-> pea 16b7a <PutChar+0x63a>
    31d4:	|         jsr 15bf0 <KPrintF>
    31da:	|         addq.l #4,sp
	setGameFilePath (sludgeFile);	
    31dc:	|         move.l 52(sp),-(sp)
    31e0:	|         jsr 33d0 <setGameFilePath>
    31e6:	|         addq.l #4,sp
	if (! initSludge (sludgeFile)) return 0;
    31e8:	|         move.l 52(sp),-(sp)
    31ec:	|         jsr 497e <initSludge>
    31f2:	|         addq.l #4,sp
    31f4:	|         tst.w d0
    31f6:	|     /-- bne.s 31fe <main_sludge+0x1be>
    31f8:	|     |   moveq #0,d0
    31fa:	+-----|-- bra.w 33c6 <main_sludge+0x386>
	
	if( winWidth != 320 || winHeight != 256) {
    31fe:	|     \-> move.l 1b0f6 <winWidth>,d0
    3204:	|         cmpi.l #320,d0
    320a:	|     /-- bne.s 321a <main_sludge+0x1da>
    320c:	|     |   move.l 1b0fa <winHeight>,d0
    3212:	|     |   cmpi.l #256,d0
    3218:	|  /--|-- beq.s 323c <main_sludge+0x1fc>
		KPrintF("This Screen Format is currently unsupported on Amiga. Only PAL Lowres supported atm. winWidth and winHeight will be reseted.");	
    321a:	|  |  \-> pea 16b8b <PutChar+0x64b>
    3220:	|  |      jsr 15bf0 <KPrintF>
    3226:	|  |      addq.l #4,sp
		winWidth = 320;
    3228:	|  |      move.l #320,1b0f6 <winWidth>
		winHeight = 256;
    3232:	|  |      move.l #256,1b0fa <winHeight>
	}

	KPrintF("Resizing Backdrop\n");
    323c:	|  \----> pea 16c08 <PutChar+0x6c8>
    3242:	|         jsr 15bf0 <KPrintF>
    3248:	|         addq.l #4,sp
	if (! resizeBackdrop (winWidth, winHeight)) {
    324a:	|         move.l 1b0fa <winHeight>,d0
    3250:	|         move.l d0,d1
    3252:	|         move.l 1b0f6 <winWidth>,d0
    3258:	|         move.l d1,-(sp)
    325a:	|         move.l d0,-(sp)
    325c:	|         jsr c3d4 <resizeBackdrop>
    3262:	|         addq.l #8,sp
    3264:	|         tst.w d0
    3266:	|     /-- bne.s 327c <main_sludge+0x23c>
		KPrintF("Couldn't allocate memory for backdrop");
    3268:	|     |   pea 16c1b <PutChar+0x6db>
    326e:	|     |   jsr 15bf0 <KPrintF>
    3274:	|     |   addq.l #4,sp
		return FALSE;
    3276:	|     |   moveq #0,d0
    3278:	+-----|-- bra.w 33c6 <main_sludge+0x386>
	}

	KPrintF("Init People\n");
    327c:	|     \-> pea 16c41 <PutChar+0x701>
    3282:	|         jsr 15bf0 <KPrintF>
    3288:	|         addq.l #4,sp
	if (! initPeople ())
    328a:	|         jsr 9958 <initPeople>
    3290:	|         tst.w d0
    3292:	|     /-- bne.s 32a8 <main_sludge+0x268>
	{
		KPrintF("Couldn't initialise people stuff");
    3294:	|     |   pea 16c4e <PutChar+0x70e>
    329a:	|     |   jsr 15bf0 <KPrintF>
    32a0:	|     |   addq.l #4,sp
		return FALSE;
    32a2:	|     |   moveq #0,d0
    32a4:	+-----|-- bra.w 33c6 <main_sludge+0x386>
	}

	KPrintF("Init Floor\n");
    32a8:	|     \-> pea 16c6f <PutChar+0x72f>
    32ae:	|         jsr 15bf0 <KPrintF>
    32b4:	|         addq.l #4,sp
	if (! initFloor ())
    32b6:	|         jsr 14fa6 <initFloor>
    32bc:	|         tst.w d0
    32be:	|     /-- bne.s 32d4 <main_sludge+0x294>
	{
		KPrintF("Couldn't initialise floor stuff");
    32c0:	|     |   pea 16c7b <PutChar+0x73b>
    32c6:	|     |   jsr 15bf0 <KPrintF>
    32cc:	|     |   addq.l #4,sp
		
		return FALSE;
    32ce:	|     |   moveq #0,d0
    32d0:	+-----|-- bra.w 33c6 <main_sludge+0x386>
	}

	KPrintF("Init Objecttype\n");
    32d4:	|     \-> pea 16c9b <PutChar+0x75b>
    32da:	|         jsr 15bf0 <KPrintF>
    32e0:	|         addq.l #4,sp
	if (! initObjectTypes ())
    32e2:	|         jsr c590 <initObjectTypes>
    32e8:	|         tst.w d0
    32ea:	|     /-- bne.s 3300 <main_sludge+0x2c0>
	{
		KPrintF("Couldn't initialise object type stuff");
    32ec:	|     |   pea 16cac <PutChar+0x76c>
    32f2:	|     |   jsr 15bf0 <KPrintF>
    32f8:	|     |   addq.l #4,sp
		return FALSE;
    32fa:	|     |   moveq #0,d0
    32fc:	+-----|-- bra.w 33c6 <main_sludge+0x386>
	}

	KPrintF("Init speech\n");
    3300:	|     \-> pea 16cd2 <PutChar+0x792>
    3306:	|         jsr 15bf0 <KPrintF>
    330c:	|         addq.l #4,sp
	initSpeech ();
    330e:	|         jsr 6d60 <initSpeech>
	KPrintF("Init status bar\n");
    3314:	|         pea 16cdf <PutChar+0x79f>
    331a:	|         jsr 15bf0 <KPrintF>
    3320:	|         addq.l #4,sp
	initStatusBar ();
    3322:	|         jsr 6824 <initStatusBar>

	KPrintF("Get numbered string\n");
    3328:	|         pea 16cf0 <PutChar+0x7b0>
    332e:	|         jsr 15bf0 <KPrintF>
    3334:	|         addq.l #4,sp
	gameName = getNumberedString(1);
    3336:	|         pea 1 <_start+0x1>
    333a:	|         jsr 5b42 <getNumberedString>
    3340:	|         addq.l #4,sp
    3342:	|         move.l d0,1b106 <gameName>
	//initSoundStuff (hMainWindow); Todo Amiga: Maybe move soundstuff here
	KPrintF("Start new function num\n");
    3348:	|         pea 16d05 <PutChar+0x7c5>
    334e:	|         jsr 15bf0 <KPrintF>
    3354:	|         addq.l #4,sp
	startNewFunctionNum (0, 0, NULL, noStack, TRUE);
    3356:	|         move.l 1b172 <noStack>,d0
    335c:	|         pea 1 <_start+0x1>
    3360:	|         move.l d0,-(sp)
    3362:	|         clr.l -(sp)
    3364:	|         clr.l -(sp)
    3366:	|         clr.l -(sp)
    3368:	|         jsr 59ca <startNewFunctionNum>
    336e:	|         lea 20(sp),sp

	KPrintF("Starting main loop");
    3372:	|         pea 16d1d <PutChar+0x7dd>
    3378:	|         jsr 15bf0 <KPrintF>
    337e:	|         addq.l #4,sp

	volatile struct Custom *custom = (struct Custom*)0xdff000;
    3380:	|         move.l #14675968,36(sp)
	weAreDoneSoQuit = 0;
    3388:	|         clr.l 1b112 <weAreDoneSoQuit>
	while ( !weAreDoneSoQuit ) {	
    338e:	|     /-- bra.s 33a8 <main_sludge+0x368>
		//custom->color[0] = 0xf00;			
		sludgeDisplay ();
    3390:	|  /--|-> jsr 595a <sludgeDisplay>
		CsiCheckInput();
    3396:	|  |  |   jsr bf04 <CsiCheckInput>
		handleInput();
    339c:	|  |  |   jsr 4718 <handleInput>
		//custom->color[0] = 0x000;			
		WaitVbl();
    33a2:	|  |  |   jsr 15b24 <WaitVbl>
	while ( !weAreDoneSoQuit ) {	
    33a8:	|  |  \-> move.l 1b112 <weAreDoneSoQuit>,d0
    33ae:	|  \----- beq.s 3390 <main_sludge+0x350>
	}	
	//Amiga Cleanup
	FreeVec(sludgeFile);
    33b0:	|         move.l 52(sp),32(sp)
    33b6:	|         move.l 1b1a2 <SysBase>,d0
    33bc:	|         movea.l d0,a6
    33be:	|         movea.l 32(sp),a1
    33c2:	|         jsr -690(a6)
}
    33c6:	\-------> movem.l (sp)+,d2-d3/a6
    33ca:	          lea 44(sp),sp
    33ce:	          rts

000033d0 <setGameFilePath>:

void setGameFilePath (char * f) {
    33d0:	          lea -1104(sp),sp
    33d4:	          move.l a6,-(sp)
    33d6:	          move.l d2,-(sp)
	char currentDir[1000];

	if (!GetCurrentDirName( currentDir, 998)) {
    33d8:	          move.l #1112,d0
    33de:	          add.l sp,d0
    33e0:	          addi.l #-1102,d0
    33e6:	          move.l d0,1100(sp)
    33ea:	          move.l #998,1096(sp)
    33f2:	          move.l 1b1aa <DOSBase>,d0
    33f8:	          movea.l d0,a6
    33fa:	          move.l 1100(sp),d1
    33fe:	          move.l 1096(sp),d2
    3402:	          jsr -564(a6)
    3406:	          move.w d0,1094(sp)
    340a:	          move.w 1094(sp),d0
    340e:	      /-- bne.s 341e <setGameFilePath+0x4e>
		KPrintF("setGameFilePath:  current directory.\n");
    3410:	      |   pea 16d30 <PutChar+0x7f0>
    3416:	      |   jsr 15bf0 <KPrintF>
    341c:	      |   addq.l #4,sp
	}	

	int got = -1, a;	
    341e:	      \-> moveq #-1,d0
    3420:	          move.l d0,1108(sp)

	for (a = 0; f[a]; a ++) {
    3424:	          clr.l 1104(sp)
    3428:	   /----- bra.s 3446 <setGameFilePath+0x76>
		if (f[a] == PATHSLASH) got = a;
    342a:	/--|----> move.l 1104(sp),d0
    342e:	|  |      movea.l 1116(sp),a0
    3432:	|  |      adda.l d0,a0
    3434:	|  |      move.b (a0),d0
    3436:	|  |      cmpi.b #47,d0
    343a:	|  |  /-- bne.s 3442 <setGameFilePath+0x72>
    343c:	|  |  |   move.l 1104(sp),1108(sp)
	for (a = 0; f[a]; a ++) {
    3442:	|  |  \-> addq.l #1,1104(sp)
    3446:	|  \----> move.l 1104(sp),d0
    344a:	|         movea.l 1116(sp),a0
    344e:	|         adda.l d0,a0
    3450:	|         move.b (a0),d0
    3452:	\-------- bne.s 342a <setGameFilePath+0x5a>
	}

	if (got != -1) {
    3454:	          moveq #-1,d0
    3456:	          cmp.l 1108(sp),d0
    345a:	   /----- beq.s 34d4 <setGameFilePath+0x104>
		f[got] = 0;	
    345c:	   |      move.l 1108(sp),d0
    3460:	   |      movea.l 1116(sp),a0
    3464:	   |      adda.l d0,a0
    3466:	   |      clr.b (a0)
		BPTR lock = Lock(f, ACCESS_READ);	
    3468:	   |      move.l 1116(sp),1090(sp)
    346e:	   |      moveq #-2,d0
    3470:	   |      move.l d0,1086(sp)
    3474:	   |      move.l 1b1aa <DOSBase>,d0
    347a:	   |      movea.l d0,a6
    347c:	   |      move.l 1090(sp),d1
    3480:	   |      move.l 1086(sp),d2
    3484:	   |      jsr -84(a6)
    3488:	   |      move.l d0,1082(sp)
    348c:	   |      move.l 1082(sp),d0
    3490:	   |      move.l d0,1078(sp)
		if (!CurrentDir(lock)) {
    3494:	   |      move.l 1078(sp),1074(sp)
    349a:	   |      move.l 1b1aa <DOSBase>,d0
    34a0:	   |      movea.l d0,a6
    34a2:	   |      move.l 1074(sp),d1
    34a6:	   |      jsr -126(a6)
    34aa:	   |      move.l d0,1070(sp)
    34ae:	   |      move.l 1070(sp),d0
    34b2:	   |  /-- bne.s 34c6 <setGameFilePath+0xf6>
			KPrintF("setGameFilePath:: Failed changing to directory %s\n", f);
    34b4:	   |  |   move.l 1116(sp),-(sp)
    34b8:	   |  |   pea 16d56 <PutChar+0x816>
    34be:	   |  |   jsr 15bf0 <KPrintF>
    34c4:	   |  |   addq.l #8,sp
		}
		f[got] = PATHSLASH;
    34c6:	   |  \-> move.l 1108(sp),d0
    34ca:	   |      movea.l 1116(sp),a0
    34ce:	   |      adda.l d0,a0
    34d0:	   |      move.b #47,(a0)
	}

	gamePath = AllocVec(400, MEMF_ANY);
    34d4:	   \----> move.l #400,1066(sp)
    34dc:	          clr.l 1062(sp)
    34e0:	          move.l 1b1a2 <SysBase>,d0
    34e6:	          movea.l d0,a6
    34e8:	          move.l 1066(sp),d0
    34ec:	          move.l 1062(sp),d1
    34f0:	          jsr -684(a6)
    34f4:	          move.l d0,1058(sp)
    34f8:	          move.l 1058(sp),d0
    34fc:	          move.l d0,1b10a <gamePath>
	if (gamePath==0) {
    3502:	          move.l 1b10a <gamePath>,d0
    3508:	      /-- bne.s 351c <setGameFilePath+0x14c>
		KPrintF("setGameFilePath: Can't reserve memory for game directory.\n");
    350a:	      |   pea 16d89 <PutChar+0x849>
    3510:	      |   jsr 15bf0 <KPrintF>
    3516:	      |   addq.l #4,sp
    3518:	   /--|-- bra.w 3604 <setGameFilePath+0x234>
		return;
	}

	BPTR lock = Lock(gamePath, ACCESS_READ);	
    351c:	   |  \-> move.l 1b10a <gamePath>,1054(sp)
    3524:	   |      moveq #-2,d0
    3526:	   |      move.l d0,1050(sp)
    352a:	   |      move.l 1b1aa <DOSBase>,d0
    3530:	   |      movea.l d0,a6
    3532:	   |      move.l 1054(sp),d1
    3536:	   |      move.l 1050(sp),d2
    353a:	   |      jsr -84(a6)
    353e:	   |      move.l d0,1046(sp)
    3542:	   |      move.l 1046(sp),d0
    3546:	   |      move.l d0,1042(sp)
	if (! CurrentDir(lock)) {
    354a:	   |      move.l 1042(sp),1038(sp)
    3550:	   |      move.l 1b1aa <DOSBase>,d0
    3556:	   |      movea.l d0,a6
    3558:	   |      move.l 1038(sp),d1
    355c:	   |      jsr -126(a6)
    3560:	   |      move.l d0,1034(sp)
    3564:	   |      move.l 1034(sp),d0
    3568:	   |  /-- bne.s 3578 <setGameFilePath+0x1a8>
		KPrintF("setGameFilePath: Can't get game directory.\n");
    356a:	   |  |   pea 16dc4 <PutChar+0x884>
    3570:	   |  |   jsr 15bf0 <KPrintF>
    3576:	   |  |   addq.l #4,sp
	}
	
	lock = Lock(currentDir, ACCESS_READ);	
    3578:	   |  \-> move.l #1112,d0
    357e:	   |      add.l sp,d0
    3580:	   |      addi.l #-1102,d0
    3586:	   |      move.l d0,1030(sp)
    358a:	   |      moveq #-2,d0
    358c:	   |      move.l d0,1026(sp)
    3590:	   |      move.l 1b1aa <DOSBase>,d0
    3596:	   |      movea.l d0,a6
    3598:	   |      move.l 1030(sp),d1
    359c:	   |      move.l 1026(sp),d2
    35a0:	   |      jsr -84(a6)
    35a4:	   |      move.l d0,1022(sp)
    35a8:	   |      move.l 1022(sp),d0
    35ac:	   |      move.l d0,1042(sp)
	if (!CurrentDir(lock)) {	
    35b0:	   |      move.l 1042(sp),1018(sp)
    35b6:	   |      move.l 1b1aa <DOSBase>,d0
    35bc:	   |      movea.l d0,a6
    35be:	   |      move.l 1018(sp),d1
    35c2:	   |      jsr -126(a6)
    35c6:	   |      move.l d0,1014(sp)
    35ca:	   |      move.l 1014(sp),d0
    35ce:	   |  /-- bne.s 35e4 <setGameFilePath+0x214>
		KPrintF("setGameFilePath: Failed changing to directory %s\n", currentDir);
    35d0:	   |  |   moveq #10,d0
    35d2:	   |  |   add.l sp,d0
    35d4:	   |  |   move.l d0,-(sp)
    35d6:	   |  |   pea 16df0 <PutChar+0x8b0>
    35dc:	   |  |   jsr 15bf0 <KPrintF>
    35e2:	   |  |   addq.l #8,sp
	}

	//Free Mem
	if (gamePath != 0) FreeVec(gamePath);
    35e4:	   |  \-> move.l 1b10a <gamePath>,d0
    35ea:	   +----- beq.s 3604 <setGameFilePath+0x234>
    35ec:	   |      move.l 1b10a <gamePath>,1010(sp)
    35f4:	   |      move.l 1b1a2 <SysBase>,d0
    35fa:	   |      movea.l d0,a6
    35fc:	   |      movea.l 1010(sp),a1
    3600:	   |      jsr -690(a6)
}
    3604:	   \----> move.l (sp)+,d2
    3606:	          movea.l (sp)+,a6
    3608:	          lea 1104(sp),sp
    360c:	          rts

0000360e <abortFunction>:
int numResourceNames = 0;
int numUserFunc = 0;
int specialSettings;


void abortFunction (struct loadedFunction * fun) {
    360e:	/-------> lea -16(sp),sp
    3612:	|         move.l a6,-(sp)
	int a;

	pauseFunction (fun);
    3614:	|         move.l 24(sp),-(sp)
    3618:	|         jsr 573c <pauseFunction>
    361e:	|         addq.l #4,sp
	while (fun -> stack) trimStack (&fun -> stack);
    3620:	|     /-- bra.s 3632 <abortFunction+0x24>
    3622:	|  /--|-> moveq #24,d0
    3624:	|  |  |   add.l 24(sp),d0
    3628:	|  |  |   move.l d0,-(sp)
    362a:	|  |  |   jsr 14082 <trimStack>
    3630:	|  |  |   addq.l #4,sp
    3632:	|  |  \-> movea.l 24(sp),a0
    3636:	|  |      move.l 24(a0),d0
    363a:	|  \----- bne.s 3622 <abortFunction+0x14>
	FreeVec( fun -> compiledLines);
    363c:	|         movea.l 24(sp),a0
    3640:	|         move.l 4(a0),12(sp)
    3646:	|         move.l 1b1a2 <SysBase>,d0
    364c:	|         movea.l d0,a6
    364e:	|         movea.l 12(sp),a1
    3652:	|         jsr -690(a6)
	for (a = 0; a < fun -> numLocals; a ++) unlinkVar (&(fun -> localVars[a]));
    3656:	|         clr.l 16(sp)
    365a:	|     /-- bra.s 367a <abortFunction+0x6c>
    365c:	|  /--|-> movea.l 24(sp),a0
    3660:	|  |  |   move.l 20(a0),d1
    3664:	|  |  |   move.l 16(sp),d0
    3668:	|  |  |   lsl.l #3,d0
    366a:	|  |  |   add.l d1,d0
    366c:	|  |  |   move.l d0,-(sp)
    366e:	|  |  |   jsr 1394c <unlinkVar>
    3674:	|  |  |   addq.l #4,sp
    3676:	|  |  |   addq.l #1,16(sp)
    367a:	|  |  \-> movea.l 24(sp),a0
    367e:	|  |      move.l 8(a0),d0
    3682:	|  |      cmp.l 16(sp),d0
    3686:	|  \----- bgt.s 365c <abortFunction+0x4e>
	FreeVec(fun -> localVars);
    3688:	|         movea.l 24(sp),a0
    368c:	|         move.l 20(a0),8(sp)
    3692:	|         move.l 1b1a2 <SysBase>,d0
    3698:	|         movea.l d0,a6
    369a:	|         movea.l 8(sp),a1
    369e:	|         jsr -690(a6)
	unlinkVar (&fun -> reg);
    36a2:	|         moveq #28,d0
    36a4:	|         add.l 24(sp),d0
    36a8:	|         move.l d0,-(sp)
    36aa:	|         jsr 1394c <unlinkVar>
    36b0:	|         addq.l #4,sp
	if (fun -> calledBy) abortFunction (fun -> calledBy);
    36b2:	|         movea.l 24(sp),a0
    36b6:	|         move.l 40(a0),d0
    36ba:	|     /-- beq.s 36cc <abortFunction+0xbe>
    36bc:	|     |   movea.l 24(sp),a0
    36c0:	|     |   move.l 40(a0),d0
    36c4:	|     |   move.l d0,-(sp)
    36c6:	\-----|-- jsr 360e <abortFunction>(pc)
    36ca:	      |   addq.l #4,sp
	FreeVec(fun);
    36cc:	      \-> move.l 24(sp),4(sp)
    36d2:	          move.l 1b1a2 <SysBase>,d0
    36d8:	          movea.l d0,a6
    36da:	          movea.l 4(sp),a1
    36de:	          jsr -690(a6)
	fun = NULL;
    36e2:	          clr.l 24(sp)
}
    36e6:	          nop
    36e8:	          movea.l (sp)+,a6
    36ea:	          lea 16(sp),sp
    36ee:	          rts

000036f0 <cancelAFunction>:

int cancelAFunction (int funcNum, struct loadedFunction * myself, BOOL * killedMyself) {
    36f0:	          subq.l #8,sp
	int n = 0;
    36f2:	          clr.l 4(sp)
	*killedMyself = FALSE;
    36f6:	          movea.l 20(sp),a0
    36fa:	          clr.w (a0)

	struct loadedFunction * fun = allRunningFunctions;
    36fc:	          move.l 1b13a <allRunningFunctions>,(sp)
	while (fun) {
    3702:	   /----- bra.s 3730 <cancelAFunction+0x40>
		if (fun -> originalNumber == funcNum) {
    3704:	/--|----> movea.l (sp),a0
    3706:	|  |      move.l (a0),d0
    3708:	|  |      cmp.l 12(sp),d0
    370c:	|  |  /-- bne.s 372a <cancelAFunction+0x3a>
			fun -> cancelMe = TRUE;
    370e:	|  |  |   movea.l (sp),a0
    3710:	|  |  |   move.w #1,54(a0)
			n++;
    3716:	|  |  |   addq.l #1,4(sp)
			if (fun == myself) *killedMyself = TRUE;
    371a:	|  |  |   move.l (sp),d0
    371c:	|  |  |   cmp.l 16(sp),d0
    3720:	|  |  +-- bne.s 372a <cancelAFunction+0x3a>
    3722:	|  |  |   movea.l 20(sp),a0
    3726:	|  |  |   move.w #1,(a0)
		}
		fun = fun -> next;
    372a:	|  |  \-> movea.l (sp),a0
    372c:	|  |      move.l 44(a0),(sp)
	while (fun) {
    3730:	|  \----> tst.l (sp)
    3732:	\-------- bne.s 3704 <cancelAFunction+0x14>
	}
	return n;
    3734:	          move.l 4(sp),d0
}
    3738:	          addq.l #8,sp
    373a:	          rts

0000373c <completeTimers>:


void completeTimers () {
    373c:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    373e:	          move.l 1b13a <allRunningFunctions>,(sp)

	while (thisFunction) {
    3744:	   /----- bra.s 375a <completeTimers+0x1e>
		if (thisFunction->freezerLevel == 0) thisFunction->timeLeft = 0;
    3746:	/--|----> movea.l (sp),a0
    3748:	|  |      move.b 56(a0),d0
    374c:	|  |  /-- bne.s 3754 <completeTimers+0x18>
    374e:	|  |  |   movea.l (sp),a0
    3750:	|  |  |   clr.l 12(a0)
		thisFunction = thisFunction->next;
    3754:	|  |  \-> movea.l (sp),a0
    3756:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    375a:	|  \----> tst.l (sp)
    375c:	\-------- bne.s 3746 <completeTimers+0xa>
	}
}
    375e:	          nop
    3760:	          nop
    3762:	          addq.l #4,sp
    3764:	          rts

00003766 <continueFunction>:

BOOL continueFunction (struct loadedFunction * fun) {
    3766:	                                                             lea -76(sp),sp
	BOOL keepLooping = TRUE;
    376a:	                                                             move.w #1,74(sp)
	BOOL advanceNow;
	unsigned int param;
	enum sludgeCommand com;

	if (fun -> cancelMe) {
    3770:	                                                             movea.l 80(sp),a0
    3774:	                                                             move.w 54(a0),d0
    3778:	/----------------------------------------------------------- beq.w 4606 <continueFunction+0xea0>
		abortFunction (fun);
    377c:	|                                                            move.l 80(sp),-(sp)
    3780:	|                                                            jsr 360e <abortFunction>
    3786:	|                                                            addq.l #4,sp
		return TRUE;
    3788:	|                                                            moveq #1,d0
    378a:	|  /-------------------------------------------------------- bra.w 4610 <continueFunction+0xeaa>
	}

	while (keepLooping) {
		advanceNow = TRUE;
    378e:	|  |  /----------------------------------------------------> move.w #1,72(sp)
		param = fun -> compiledLines[fun -> runThisLine].param;
    3794:	|  |  |                                                      movea.l 80(sp),a0
    3798:	|  |  |                                                      move.l 4(a0),d1
    379c:	|  |  |                                                      movea.l 80(sp),a0
    37a0:	|  |  |                                                      move.l 36(a0),d0
    37a4:	|  |  |                                                      lsl.l #3,d0
    37a6:	|  |  |                                                      movea.l d1,a0
    37a8:	|  |  |                                                      adda.l d0,a0
    37aa:	|  |  |                                                      move.l 4(a0),68(sp)
		com = fun -> compiledLines[fun -> runThisLine].theCommand;
    37b0:	|  |  |                                                      movea.l 80(sp),a0
    37b4:	|  |  |                                                      move.l 4(a0),d1
    37b8:	|  |  |                                                      movea.l 80(sp),a0
    37bc:	|  |  |                                                      move.l 36(a0),d0
    37c0:	|  |  |                                                      lsl.l #3,d0
    37c2:	|  |  |                                                      movea.l d1,a0
    37c4:	|  |  |                                                      adda.l d0,a0
    37c6:	|  |  |                                                      move.l (a0),64(sp)

//		fprintf (stderr, "com: %d param: %d (%s)\n", com, param,
//				(com < numSludgeCommands) ? sludgeText[com] : ERROR_UNKNOWN_MCODE); fflush(stderr);


		switch (com) {
    37ca:	|  |  |                                                      moveq #41,d0
    37cc:	|  |  |                                                      cmp.l 64(sp),d0
    37d0:	|  |  |  /-------------------------------------------------- bcs.w 45ba <continueFunction+0xe54>
    37d4:	|  |  |  |                                                   move.l 64(sp),d0
    37d8:	|  |  |  |                                                   add.l d0,d0
    37da:	|  |  |  |                                                   movea.l d0,a0
    37dc:	|  |  |  |                                                   adda.l #14312,a0
    37e2:	|  |  |  |                                                   move.w (a0),d0
    37e4:	|  |  |  |                                                   jmp (37e8 <continueFunction+0x82>,pc,d0.w)
    37e8:	|  |  |  |                                                   bset d6,(a2)
    37ea:	|  |  |  |                                                   ori.w #2670,(a4)
    37ee:	|  |  |  |                                                   eori.w #2416,d6
    37f2:	|  |  |  |                                                   bchg d4,d2
    37f4:	|  |  |  |                                                   bclr d4,(a4)+
    37f6:	|  |  |  |                                                   andi.l #181013194,d4
    37fc:	|  |  |  |                                                   .short 0x0aca
    37fe:	|  |  |  |                                                   .short 0x0aca
    3800:	|  |  |  |                                                   andi.l #51251914,(-54,a2,d0.l:2)
    3808:	|  |  |  |                                                   .short 0x0aca
    380a:	|  |  |  |                                                   andi.w #906,-(a4)
    380e:	|  |  |  |                                                   bchg d1,196(a2)
    3812:	|  |  |  |                                                   bset d1,580(a4)
    3816:	|  |  |  |                                                   bclr d1,2576(a2)
    381a:	|  |  |  |                                                   andi.b #-56,2762(a2)
    3820:	|  |  |  |                                                   .short 0x0aca
    3822:	|  |  |  |                                                   eori.l #63572682,d0
    3828:	|  |  |  |                                                   .short 0x0aca
    382a:	|  |  |  |                                                   bchg d3,-(a2)
    382c:	|  |  |  |                                                   bchg #-36,(a2)
    3830:	|  |  |  |                                                   .short 0x08cc
    3832:	|  |  |  |                                                   addi.b #14,1038(a0)
    3838:	|  |  |  |                                                   .short 0x040e
    383a:	|  |  |  |                                                   bset d4,8303(a4)
			case SLU_RETURN:
			if (fun -> calledBy) {
    383e:	|  |  |  |                                                   ori.w #8232,(a0)
    3842:	|  |  |  |                                                   ori.b #78,8303(a0)
				struct loadedFunction * returnTo = fun -> calledBy;
    3848:	|  |  |  |                                                   ori.w #12136,(a0)
    384c:	|  |  |  |                                                   ori.b #44,8303(a0)
				if (fun -> returnSomething) copyVariable (&fun -> reg, &returnTo -> reg);
    3852:	|  |  |  |                                                   ori.w #12328,(a0)
    3856:	|  |  |  |                                                   ori.b #24,(28,a0,d7.w:2)
    385c:	|  |  |  |                                                   add.l 44(sp),d1
    3860:	|  |  |  |                                                   moveq #28,d0
    3862:	|  |  |  |                                                   add.l 80(sp),d0
    3866:	|  |  |  |                                                   move.l d1,-(sp)
    3868:	|  |  |  |                                                   move.l d0,-(sp)
    386a:	|  |  |  |                                                   jsr 13bb8 <copyVariable>
    3870:	|  |  |  |                                                   addq.l #8,sp
				finishFunction (fun);
    3872:	|  |  |  |                                                   move.l 80(sp),-(sp)
    3876:	|  |  |  |                                                   jsr 4616 <finishFunction>
    387c:	|  |  |  |                                                   addq.l #4,sp
				fun = returnTo;
    387e:	|  |  |  |                                                   move.l 44(sp),80(sp)
				restartFunction (fun);
    3884:	|  |  |  |                                                   move.l 80(sp),-(sp)
    3888:	|  |  |  |                                                   jsr 577e <restartFunction>
    388e:	|  |  |  |                                                   addq.l #4,sp
			} else {
				finishFunction (fun);
				advanceNow = FALSE;		// So we don't do anything else with "fun"
				keepLooping = FALSE;	// So we drop out of the loop
			}
			break;
    3890:	|  |  |  |  /----------------------------------------------- bra.w 45ee <continueFunction+0xe88>
				finishFunction (fun);
    3894:	|  |  |  |  |                                                move.l 80(sp),-(sp)
    3898:	|  |  |  |  |                                                jsr 4616 <finishFunction>
    389e:	|  |  |  |  |                                                addq.l #4,sp
				advanceNow = FALSE;		// So we don't do anything else with "fun"
    38a0:	|  |  |  |  |                                                clr.w 72(sp)
				keepLooping = FALSE;	// So we drop out of the loop
    38a4:	|  |  |  |  |                                                clr.w 74(sp)
			break;
    38a8:	|  |  |  |  +----------------------------------------------- bra.w 45ee <continueFunction+0xe88>

			case SLU_CALLIT:
			switch (fun -> reg.varType) {
    38ac:	|  |  |  |  |                                                movea.l 80(sp),a0
    38b0:	|  |  |  |  |                                                move.l 28(a0),d0
    38b4:	|  |  |  |  |                                                moveq #2,d1
    38b6:	|  |  |  |  |                                                cmp.l d0,d1
    38b8:	|  |  |  |  |                                            /-- beq.s 38c4 <continueFunction+0x15e>
    38ba:	|  |  |  |  |                                            |   moveq #4,d1
    38bc:	|  |  |  |  |                                            |   cmp.l d0,d1
    38be:	|  |  |  |  |                                         /--|-- beq.s 3912 <continueFunction+0x1ac>
    38c0:	|  |  |  |  |                                /--------|--|-- bra.w 39fa <continueFunction+0x294>
				case SVT_FUNC:
				pauseFunction (fun);		
    38c4:	|  |  |  |  |                                |        |  \-> move.l 80(sp),-(sp)
    38c8:	|  |  |  |  |                                |        |      jsr 573c <pauseFunction>
    38ce:	|  |  |  |  |                                |        |      addq.l #4,sp
				if (! startNewFunctionNum (fun -> reg.varData.intValue, param, fun, &fun -> stack,TRUE)) return FALSE;
    38d0:	|  |  |  |  |                                |        |      moveq #24,d0
    38d2:	|  |  |  |  |                                |        |      add.l 80(sp),d0
    38d6:	|  |  |  |  |                                |        |      movea.l 80(sp),a0
    38da:	|  |  |  |  |                                |        |      move.l 32(a0),d1
    38de:	|  |  |  |  |                                |        |      pea 1 <_start+0x1>
    38e2:	|  |  |  |  |                                |        |      move.l d0,-(sp)
    38e4:	|  |  |  |  |                                |        |      move.l 88(sp),-(sp)
    38e8:	|  |  |  |  |                                |        |      move.l 80(sp),-(sp)
    38ec:	|  |  |  |  |                                |        |      move.l d1,-(sp)
    38ee:	|  |  |  |  |                                |        |      jsr 59ca <startNewFunctionNum>
    38f4:	|  |  |  |  |                                |        |      lea 20(sp),sp
    38f8:	|  |  |  |  |                                |        |      tst.l d0
    38fa:	|  |  |  |  |                                |        |  /-- bne.s 3902 <continueFunction+0x19c>
    38fc:	|  |  |  |  |                                |        |  |   clr.w d0
    38fe:	|  +--|--|--|--------------------------------|--------|--|-- bra.w 4610 <continueFunction+0xeaa>
				fun = allRunningFunctions;
    3902:	|  |  |  |  |                                |        |  \-> move.l 1b13a <allRunningFunctions>,80(sp)
				advanceNow = FALSE;		// So we don't do anything else with "fun"
    390a:	|  |  |  |  |                                |        |      clr.w 72(sp)
				break;
    390e:	|  |  |  |  |                                |  /-----|----- bra.w 3a0e <continueFunction+0x2a8>

				case SVT_BUILT:
					{
					//KPrintF("Loading function %ld",fun -> reg.varData.intValue);
					enum builtReturn br = callBuiltIn (fun -> reg.varData.intValue, param, fun);
    3912:	|  |  |  |  |                                |  |     \----> move.l 68(sp),d1
    3916:	|  |  |  |  |                                |  |            movea.l 80(sp),a0
    391a:	|  |  |  |  |                                |  |            move.l 32(a0),d0
    391e:	|  |  |  |  |                                |  |            move.l 80(sp),-(sp)
    3922:	|  |  |  |  |                                |  |            move.l d1,-(sp)
    3924:	|  |  |  |  |                                |  |            move.l d0,-(sp)
    3926:	|  |  |  |  |                                |  |            jsr 123e0 <callBuiltIn>
    392c:	|  |  |  |  |                                |  |            lea 12(sp),sp
    3930:	|  |  |  |  |                                |  |            move.l d0,52(sp)
    3934:	|  |  |  |  |                                |  |            moveq #5,d0
    3936:	|  |  |  |  |                                |  |            cmp.l 52(sp),d0
    393a:	|  |  |  |  |                                |  |  /-------- bcs.w 39f6 <continueFunction+0x290>
    393e:	|  |  |  |  |                                |  |  |         move.l 52(sp),d0
    3942:	|  |  |  |  |                                |  |  |         add.l d0,d0
    3944:	|  |  |  |  |                                |  |  |         movea.l d0,a0
    3946:	|  |  |  |  |                                |  |  |         adda.l #14674,a0
    394c:	|  |  |  |  |                                |  |  |         move.w (a0),d0
    394e:	|  |  |  |  |                                |  |  |         jmp (3952 <continueFunction+0x1ec>,pc,d0.w)
    3952:	|  |  |  |  |                                |  |  |         ori.b #12,164(a4)
    3958:	|  |  |  |  |                                |  |  |         ori.b #60,-(a0)
    395c:	|  |  |  |  |                                |  |  |     /-> ori.b #121,(1,a2,d0.w)

					switch (br) {
						case BR_ERROR:
							KPrintF("Unknown error. This shouldn't happen. Please notify the SLUDGE developers.");
    3962:	|  |  |  |  |                                |  |  |     \-- bgt.s 395c <continueFunction+0x1f6>
    3964:	|  |  |  |  |                                |  |  |         jsr 15bf0 <KPrintF>
    396a:	|  |  |  |  |                                |  |  |         addq.l #4,sp
							return FALSE;
    396c:	|  |  |  |  |                                |  |  |         clr.w d0
    396e:	|  +--|--|--|--------------------------------|--|--|-------- bra.w 4610 <continueFunction+0xeaa>

						case BR_PAUSE:
						pauseFunction (fun);
    3972:	|  |  |  |  |                                |  |  |         move.l 80(sp),-(sp)
    3976:	|  |  |  |  |                                |  |  |         jsr 573c <pauseFunction>
    397c:	|  |  |  |  |                                |  |  |         addq.l #4,sp
						[[fallthrough]];
						// No break!

						case BR_KEEP_AND_PAUSE:
						keepLooping = FALSE;
    397e:	|  |  |  |  |                                |  |  |         clr.w 74(sp)
						break;
    3982:	|  |  |  |  |                                |  |  |  /----- bra.s 39f8 <continueFunction+0x292>

						case BR_ALREADY_GONE:
						keepLooping = FALSE;
    3984:	|  |  |  |  |                                |  |  |  |      clr.w 74(sp)
						advanceNow = FALSE;
    3988:	|  |  |  |  |                                |  |  |  |      clr.w 72(sp)
						break;
    398c:	|  |  |  |  |                                |  |  |  +----- bra.s 39f8 <continueFunction+0x292>

						case BR_CALLAFUNC:
						{
							int i = fun -> reg.varData.intValue;
    398e:	|  |  |  |  |                                |  |  |  |      movea.l 80(sp),a0
    3992:	|  |  |  |  |                                |  |  |  |      move.l 32(a0),48(sp)
							setVariable (&fun -> reg, SVT_INT, 1);
    3998:	|  |  |  |  |                                |  |  |  |      moveq #28,d0
    399a:	|  |  |  |  |                                |  |  |  |      add.l 80(sp),d0
    399e:	|  |  |  |  |                                |  |  |  |      pea 1 <_start+0x1>
    39a2:	|  |  |  |  |                                |  |  |  |      pea 1 <_start+0x1>
    39a6:	|  |  |  |  |                                |  |  |  |      move.l d0,-(sp)
    39a8:	|  |  |  |  |                                |  |  |  |      jsr 13ff0 <setVariable>
    39ae:	|  |  |  |  |                                |  |  |  |      lea 12(sp),sp
							pauseFunction (fun);							
    39b2:	|  |  |  |  |                                |  |  |  |      move.l 80(sp),-(sp)
    39b6:	|  |  |  |  |                                |  |  |  |      jsr 573c <pauseFunction>
    39bc:	|  |  |  |  |                                |  |  |  |      addq.l #4,sp
							if (! startNewFunctionNum (i, 0, fun, noStack, FALSE)) return FALSE;
    39be:	|  |  |  |  |                                |  |  |  |      move.l 1b172 <noStack>,d1
    39c4:	|  |  |  |  |                                |  |  |  |      move.l 48(sp),d0
    39c8:	|  |  |  |  |                                |  |  |  |      clr.l -(sp)
    39ca:	|  |  |  |  |                                |  |  |  |      move.l d1,-(sp)
    39cc:	|  |  |  |  |                                |  |  |  |      move.l 88(sp),-(sp)
    39d0:	|  |  |  |  |                                |  |  |  |      clr.l -(sp)
    39d2:	|  |  |  |  |                                |  |  |  |      move.l d0,-(sp)
    39d4:	|  |  |  |  |                                |  |  |  |      jsr 59ca <startNewFunctionNum>
    39da:	|  |  |  |  |                                |  |  |  |      lea 20(sp),sp
    39de:	|  |  |  |  |                                |  |  |  |      tst.l d0
    39e0:	|  |  |  |  |                                |  |  |  |  /-- bne.s 39e8 <continueFunction+0x282>
    39e2:	|  |  |  |  |                                |  |  |  |  |   clr.w d0
    39e4:	|  +--|--|--|--------------------------------|--|--|--|--|-- bra.w 4610 <continueFunction+0xeaa>
							fun = allRunningFunctions;
    39e8:	|  |  |  |  |                                |  |  |  |  \-> move.l 1b13a <allRunningFunctions>,80(sp)
							advanceNow = FALSE;		// So we don't do anything else with "fun"
    39f0:	|  |  |  |  |                                |  |  |  |      clr.w 72(sp)
						}
						break;
    39f4:	|  |  |  |  |                                |  |  |  +----- bra.s 39f8 <continueFunction+0x292>

						default:
						break;
    39f6:	|  |  |  |  |                                |  |  \--|----> nop
					}
				}
				break;
    39f8:	|  |  |  |  |                                |  +-----\----X bra.s 3a0e <continueFunction+0x2a8>

				default:
				KPrintF(ERROR_CALL_NONFUNCTION);
    39fa:	|  |  |  |  |                                \--|----------> pea 16f43 <PutChar+0xa03>
    3a00:	|  |  |  |  |                                   |            jsr 15bf0 <KPrintF>
    3a06:	|  |  |  |  |                                   |            addq.l #4,sp
				return FALSE;
    3a08:	|  |  |  |  |                                   |            clr.w d0
    3a0a:	|  +--|--|--|-----------------------------------|----------- bra.w 4610 <continueFunction+0xeaa>
			}
			break;
    3a0e:	|  |  |  |  +-----------------------------------\----------X bra.w 45ee <continueFunction+0xe88>

			// These all grab things and shove 'em into the register

			case SLU_LOAD_NULL:
			setVariable (&fun -> reg, SVT_NULL, 0);
    3a12:	|  |  |  |  |                                                moveq #28,d0
    3a14:	|  |  |  |  |                                                add.l 80(sp),d0
    3a18:	|  |  |  |  |                                                clr.l -(sp)
    3a1a:	|  |  |  |  |                                                clr.l -(sp)
    3a1c:	|  |  |  |  |                                                move.l d0,-(sp)
    3a1e:	|  |  |  |  |                                                jsr 13ff0 <setVariable>
    3a24:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    3a28:	|  |  |  |  +----------------------------------------------- bra.w 45ee <continueFunction+0xe88>

			case SLU_LOAD_FILE:
			setVariable (&fun -> reg, SVT_FILE, param);
    3a2c:	|  |  |  |  |                                                move.l 68(sp),d1
    3a30:	|  |  |  |  |                                                moveq #28,d0
    3a32:	|  |  |  |  |                                                add.l 80(sp),d0
    3a36:	|  |  |  |  |                                                move.l d1,-(sp)
    3a38:	|  |  |  |  |                                                pea 5 <_start+0x5>
    3a3c:	|  |  |  |  |                                                move.l d0,-(sp)
    3a3e:	|  |  |  |  |                                                jsr 13ff0 <setVariable>
    3a44:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    3a48:	|  |  |  |  +----------------------------------------------- bra.w 45ee <continueFunction+0xe88>

			case SLU_LOAD_VALUE:
			setVariable (&fun -> reg, SVT_INT, param);
    3a4c:	|  |  |  |  |                                                move.l 68(sp),d1
    3a50:	|  |  |  |  |                                                moveq #28,d0
    3a52:	|  |  |  |  |                                                add.l 80(sp),d0
    3a56:	|  |  |  |  |                                                move.l d1,-(sp)
    3a58:	|  |  |  |  |                                                pea 1 <_start+0x1>
    3a5c:	|  |  |  |  |                                                move.l d0,-(sp)
    3a5e:	|  |  |  |  |                                                jsr 13ff0 <setVariable>
    3a64:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    3a68:	|  |  |  |  +----------------------------------------------- bra.w 45ee <continueFunction+0xe88>

			case SLU_LOAD_LOCAL:
			if (! copyVariable (&(fun -> localVars[param]), &fun -> reg)) return FALSE;
    3a6c:	|  |  |  |  |                                                moveq #28,d0
    3a6e:	|  |  |  |  |                                                add.l 80(sp),d0
    3a72:	|  |  |  |  |                                                movea.l 80(sp),a0
    3a76:	|  |  |  |  |                                                movea.l 20(a0),a0
    3a7a:	|  |  |  |  |                                                move.l 68(sp),d1
    3a7e:	|  |  |  |  |                                                lsl.l #3,d1
    3a80:	|  |  |  |  |                                                add.l a0,d1
    3a82:	|  |  |  |  |                                                move.l d0,-(sp)
    3a84:	|  |  |  |  |                                                move.l d1,-(sp)
    3a86:	|  |  |  |  |                                                jsr 13bb8 <copyVariable>
    3a8c:	|  |  |  |  |                                                addq.l #8,sp
    3a8e:	|  |  |  |  |                                                tst.w d0
    3a90:	|  |  |  |  |  /-------------------------------------------- bne.w 45cc <continueFunction+0xe66>
    3a94:	|  |  |  |  |  |                                             clr.w d0
    3a96:	|  +--|--|--|--|-------------------------------------------- bra.w 4610 <continueFunction+0xeaa>
			break;

			case SLU_AND:
			setVariable (&fun -> reg, SVT_INT, getBoolean (&fun -> reg) && getBoolean(&(fun -> stack -> thisVar)));
    3a9a:	|  |  |  |  |  |                                             moveq #28,d0
    3a9c:	|  |  |  |  |  |                                             add.l 80(sp),d0
    3aa0:	|  |  |  |  |  |                                             move.l d0,-(sp)
    3aa2:	|  |  |  |  |  |                                             jsr 13c3e <getBoolean>
    3aa8:	|  |  |  |  |  |                                             addq.l #4,sp
    3aaa:	|  |  |  |  |  |                                             tst.w d0
    3aac:	|  |  |  |  |  |                                      /----- beq.s 3ac8 <continueFunction+0x362>
    3aae:	|  |  |  |  |  |                                      |      movea.l 80(sp),a0
    3ab2:	|  |  |  |  |  |                                      |      move.l 24(a0),d0
    3ab6:	|  |  |  |  |  |                                      |      move.l d0,-(sp)
    3ab8:	|  |  |  |  |  |                                      |      jsr 13c3e <getBoolean>
    3abe:	|  |  |  |  |  |                                      |      addq.l #4,sp
    3ac0:	|  |  |  |  |  |                                      |      tst.w d0
    3ac2:	|  |  |  |  |  |                                      +----- beq.s 3ac8 <continueFunction+0x362>
    3ac4:	|  |  |  |  |  |                                      |      moveq #1,d0
    3ac6:	|  |  |  |  |  |                                      |  /-- bra.s 3aca <continueFunction+0x364>
    3ac8:	|  |  |  |  |  |                                      \--|-> moveq #0,d0
    3aca:	|  |  |  |  |  |                                         \-> moveq #28,d1
    3acc:	|  |  |  |  |  |                                             add.l 80(sp),d1
    3ad0:	|  |  |  |  |  |                                             move.l d0,-(sp)
    3ad2:	|  |  |  |  |  |                                             pea 1 <_start+0x1>
    3ad6:	|  |  |  |  |  |                                             move.l d1,-(sp)
    3ad8:	|  |  |  |  |  |                                             jsr 13ff0 <setVariable>
    3ade:	|  |  |  |  |  |                                             lea 12(sp),sp
			trimStack (&fun -> stack);
    3ae2:	|  |  |  |  |  |                                             moveq #24,d0
    3ae4:	|  |  |  |  |  |                                             add.l 80(sp),d0
    3ae8:	|  |  |  |  |  |                                             move.l d0,-(sp)
    3aea:	|  |  |  |  |  |                                             jsr 14082 <trimStack>
    3af0:	|  |  |  |  |  |                                             addq.l #4,sp
			break;
    3af2:	|  |  |  |  +--|-------------------------------------------- bra.w 45ee <continueFunction+0xe88>

			case SLU_OR:
			setVariable (&fun -> reg, SVT_INT, getBoolean (&fun -> reg) || getBoolean (&(fun -> stack -> thisVar)));
    3af6:	|  |  |  |  |  |                                             moveq #28,d0
    3af8:	|  |  |  |  |  |                                             add.l 80(sp),d0
    3afc:	|  |  |  |  |  |                                             move.l d0,-(sp)
    3afe:	|  |  |  |  |  |                                             jsr 13c3e <getBoolean>
    3b04:	|  |  |  |  |  |                                             addq.l #4,sp
    3b06:	|  |  |  |  |  |                                             tst.w d0
    3b08:	|  |  |  |  |  |                                         /-- bne.s 3b20 <continueFunction+0x3ba>
    3b0a:	|  |  |  |  |  |                                         |   movea.l 80(sp),a0
    3b0e:	|  |  |  |  |  |                                         |   move.l 24(a0),d0
    3b12:	|  |  |  |  |  |                                         |   move.l d0,-(sp)
    3b14:	|  |  |  |  |  |                                         |   jsr 13c3e <getBoolean>
    3b1a:	|  |  |  |  |  |                                         |   addq.l #4,sp
    3b1c:	|  |  |  |  |  |                                         |   tst.w d0
    3b1e:	|  |  |  |  |  |                                      /--|-- beq.s 3b24 <continueFunction+0x3be>
    3b20:	|  |  |  |  |  |                                      |  \-> moveq #1,d0
    3b22:	|  |  |  |  |  |                                      |  /-- bra.s 3b26 <continueFunction+0x3c0>
    3b24:	|  |  |  |  |  |                                      \--|-> moveq #0,d0
    3b26:	|  |  |  |  |  |                                         \-> moveq #28,d1
    3b28:	|  |  |  |  |  |                                             add.l 80(sp),d1
    3b2c:	|  |  |  |  |  |                                             move.l d0,-(sp)
    3b2e:	|  |  |  |  |  |                                             pea 1 <_start+0x1>
    3b32:	|  |  |  |  |  |                                             move.l d1,-(sp)
    3b34:	|  |  |  |  |  |                                             jsr 13ff0 <setVariable>
    3b3a:	|  |  |  |  |  |                                             lea 12(sp),sp
			trimStack (&fun -> stack);
    3b3e:	|  |  |  |  |  |                                             moveq #24,d0
    3b40:	|  |  |  |  |  |                                             add.l 80(sp),d0
    3b44:	|  |  |  |  |  |                                             move.l d0,-(sp)
    3b46:	|  |  |  |  |  |                                             jsr 14082 <trimStack>
    3b4c:	|  |  |  |  |  |                                             addq.l #4,sp
			break;
    3b4e:	|  |  |  |  +--|-------------------------------------------- bra.w 45ee <continueFunction+0xe88>

			case SLU_LOAD_FUNC:
    		setVariable (&fun -> reg, SVT_FUNC, param);
    3b52:	|  |  |  |  |  |                                             move.l 68(sp),d1
    3b56:	|  |  |  |  |  |                                             moveq #28,d0
    3b58:	|  |  |  |  |  |                                             add.l 80(sp),d0
    3b5c:	|  |  |  |  |  |                                             move.l d1,-(sp)
    3b5e:	|  |  |  |  |  |                                             pea 2 <_start+0x2>
    3b62:	|  |  |  |  |  |                                             move.l d0,-(sp)
    3b64:	|  |  |  |  |  |                                             jsr 13ff0 <setVariable>
    3b6a:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    3b6e:	|  |  |  |  +--|-------------------------------------------- bra.w 45ee <continueFunction+0xe88>

			case SLU_LOAD_BUILT:
			setVariable (&fun -> reg, SVT_BUILT, param);
    3b72:	|  |  |  |  |  |                                             move.l 68(sp),d1
    3b76:	|  |  |  |  |  |                                             moveq #28,d0
    3b78:	|  |  |  |  |  |                                             add.l 80(sp),d0
    3b7c:	|  |  |  |  |  |                                             move.l d1,-(sp)
    3b7e:	|  |  |  |  |  |                                             pea 4 <_start+0x4>
    3b82:	|  |  |  |  |  |                                             move.l d0,-(sp)
    3b84:	|  |  |  |  |  |                                             jsr 13ff0 <setVariable>
    3b8a:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    3b8e:	|  |  |  |  +--|-------------------------------------------- bra.w 45ee <continueFunction+0xe88>

			case SLU_LOAD_OBJTYPE:
			setVariable (&fun -> reg, SVT_OBJTYPE, param);
    3b92:	|  |  |  |  |  |                                             move.l 68(sp),d1
    3b96:	|  |  |  |  |  |                                             moveq #28,d0
    3b98:	|  |  |  |  |  |                                             add.l 80(sp),d0
    3b9c:	|  |  |  |  |  |                                             move.l d1,-(sp)
    3b9e:	|  |  |  |  |  |                                             pea 7 <_start+0x7>
    3ba2:	|  |  |  |  |  |                                             move.l d0,-(sp)
    3ba4:	|  |  |  |  |  |                                             jsr 13ff0 <setVariable>
    3baa:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    3bae:	|  |  |  |  +--|-------------------------------------------- bra.w 45ee <continueFunction+0xe88>

			case SLU_UNREG:
			if (dialogValue != 1) {
    3bb2:	|  |  |  |  |  |                                             move.l 1b102 <dialogValue>,d0
    3bb8:	|  |  |  |  |  |                                             moveq #1,d1
    3bba:	|  |  |  |  |  |                                             cmp.l d0,d1
    3bbc:	|  |  |  |  |  |  /----------------------------------------- beq.w 45d0 <continueFunction+0xe6a>
				KPrintF(ERROR_HACKER);
    3bc0:	|  |  |  |  |  |  |                                          pea 16f58 <PutChar+0xa18>
    3bc6:	|  |  |  |  |  |  |                                          jsr 15bf0 <KPrintF>
    3bcc:	|  |  |  |  |  |  |                                          addq.l #4,sp
				return FALSE;
    3bce:	|  |  |  |  |  |  |                                          clr.w d0
    3bd0:	|  +--|--|--|--|--|----------------------------------------- bra.w 4610 <continueFunction+0xeaa>
			}
			break;

			case SLU_LOAD_STRING:
				if (! loadStringToVar (&fun -> reg, param)) {
    3bd4:	|  |  |  |  |  |  |                                          move.l 68(sp),d1
    3bd8:	|  |  |  |  |  |  |                                          moveq #28,d0
    3bda:	|  |  |  |  |  |  |                                          add.l 80(sp),d0
    3bde:	|  |  |  |  |  |  |                                          move.l d1,-(sp)
    3be0:	|  |  |  |  |  |  |                                          move.l d0,-(sp)
    3be2:	|  |  |  |  |  |  |                                          jsr 13782 <loadStringToVar>
    3be8:	|  |  |  |  |  |  |                                          addq.l #8,sp
    3bea:	|  |  |  |  |  |  |                                          tst.w d0
    3bec:	|  |  |  |  |  |  |  /-------------------------------------- bne.w 45d4 <continueFunction+0xe6e>
					return FALSE;
    3bf0:	|  |  |  |  |  |  |  |                                       clr.w d0
    3bf2:	|  +--|--|--|--|--|--|-------------------------------------- bra.w 4610 <continueFunction+0xeaa>
			break;

			case SLU_INDEXGET:
			case SLU_INCREMENT_INDEX:
			case SLU_DECREMENT_INDEX:
			switch (fun -> stack -> thisVar.varType) {
    3bf6:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    3bfa:	|  |  |  |  |  |  |  |                                       movea.l 24(a0),a0
    3bfe:	|  |  |  |  |  |  |  |                                       move.l (a0),d0
    3c00:	|  |  |  |  |  |  |  |                                       moveq #10,d1
    3c02:	|  |  |  |  |  |  |  |                                       cmp.l d0,d1
    3c04:	|  |  |  |  |  |  |  |                                /----- beq.s 3c62 <continueFunction+0x4fc>
    3c06:	|  |  |  |  |  |  |  |                                |      moveq #10,d1
    3c08:	|  |  |  |  |  |  |  |                                |      cmp.l d0,d1
    3c0a:	|  |  |  |  |  |  |  |              /-----------------|----- bcs.w 3df6 <continueFunction+0x690>
    3c0e:	|  |  |  |  |  |  |  |              |                 |      tst.l d0
    3c10:	|  |  |  |  |  |  |  |              |                 |  /-- beq.s 3c1c <continueFunction+0x4b6>
    3c12:	|  |  |  |  |  |  |  |              |                 |  |   moveq #6,d1
    3c14:	|  |  |  |  |  |  |  |              |                 |  |   cmp.l d0,d1
    3c16:	|  |  |  |  |  |  |  |              |                 +--|-- beq.s 3c62 <continueFunction+0x4fc>
    3c18:	|  |  |  |  |  |  |  |              +-----------------|--|-- bra.w 3df6 <continueFunction+0x690>
				case SVT_NULL:
				if (com == SLU_INDEXGET) {
    3c1c:	|  |  |  |  |  |  |  |              |                 |  \-> moveq #38,d0
    3c1e:	|  |  |  |  |  |  |  |              |                 |      cmp.l 64(sp),d0
    3c22:	|  |  |  |  |  |  |  |              |                 |  /-- bne.s 3c4e <continueFunction+0x4e8>
					setVariable (&fun -> reg, SVT_NULL, 0);
    3c24:	|  |  |  |  |  |  |  |              |                 |  |   moveq #28,d0
    3c26:	|  |  |  |  |  |  |  |              |                 |  |   add.l 80(sp),d0
    3c2a:	|  |  |  |  |  |  |  |              |                 |  |   clr.l -(sp)
    3c2c:	|  |  |  |  |  |  |  |              |                 |  |   clr.l -(sp)
    3c2e:	|  |  |  |  |  |  |  |              |                 |  |   move.l d0,-(sp)
    3c30:	|  |  |  |  |  |  |  |              |                 |  |   jsr 13ff0 <setVariable>
    3c36:	|  |  |  |  |  |  |  |              |                 |  |   lea 12(sp),sp
					trimStack (&fun -> stack);
    3c3a:	|  |  |  |  |  |  |  |              |                 |  |   moveq #24,d0
    3c3c:	|  |  |  |  |  |  |  |              |                 |  |   add.l 80(sp),d0
    3c40:	|  |  |  |  |  |  |  |              |                 |  |   move.l d0,-(sp)
    3c42:	|  |  |  |  |  |  |  |              |                 |  |   jsr 14082 <trimStack>
    3c48:	|  |  |  |  |  |  |  |              |                 |  |   addq.l #4,sp
				} else {
					KPrintF((ERROR_INCDEC_UNKNOWN));
					return FALSE;
				}
				break;
    3c4a:	|  |  |  |  |  |  |  |              |  /--------------|--|-- bra.w 3e0c <continueFunction+0x6a6>
					KPrintF((ERROR_INCDEC_UNKNOWN));
    3c4e:	|  |  |  |  |  |  |  |              |  |              |  \-> pea 16f99 <PutChar+0xa59>
    3c54:	|  |  |  |  |  |  |  |              |  |              |      jsr 15bf0 <KPrintF>
    3c5a:	|  |  |  |  |  |  |  |              |  |              |      addq.l #4,sp
					return FALSE;
    3c5c:	|  |  |  |  |  |  |  |              |  |              |      clr.w d0
    3c5e:	|  +--|--|--|--|--|--|--------------|--|--------------|----- bra.w 4610 <continueFunction+0xeaa>

				case SVT_FASTARRAY:
				case SVT_STACK:
				if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    3c62:	|  |  |  |  |  |  |  |              |  |              \----> movea.l 80(sp),a0
    3c66:	|  |  |  |  |  |  |  |              |  |                     movea.l 24(a0),a0
    3c6a:	|  |  |  |  |  |  |  |              |  |                     movea.l 4(a0),a0
    3c6e:	|  |  |  |  |  |  |  |              |  |                     move.l (a0),d0
    3c70:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 3c86 <continueFunction+0x520>
					KPrintF((ERROR_INDEX_EMPTY));
    3c72:	|  |  |  |  |  |  |  |              |  |                 |   pea 16fd5 <PutChar+0xa95>
    3c78:	|  |  |  |  |  |  |  |              |  |                 |   jsr 15bf0 <KPrintF>
    3c7e:	|  |  |  |  |  |  |  |              |  |                 |   addq.l #4,sp
					return FALSE;
    3c80:	|  |  |  |  |  |  |  |              |  |                 |   clr.w d0
    3c82:	|  +--|--|--|--|--|--|--------------|--|-----------------|-- bra.w 4610 <continueFunction+0xeaa>
				} else {
					int ii;
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    3c86:	|  |  |  |  |  |  |  |              |  |                 \-> moveq #28,d0
    3c88:	|  |  |  |  |  |  |  |              |  |                     add.l 80(sp),d0
    3c8c:	|  |  |  |  |  |  |  |              |  |                     move.l d0,-(sp)
    3c8e:	|  |  |  |  |  |  |  |              |  |                     pea 1 <_start+0x1>
    3c92:	|  |  |  |  |  |  |  |              |  |                     lea 12(sp),a0
    3c96:	|  |  |  |  |  |  |  |              |  |                     move.l a0,-(sp)
    3c98:	|  |  |  |  |  |  |  |              |  |                     jsr 136fe <getValueType>
    3c9e:	|  |  |  |  |  |  |  |              |  |                     lea 12(sp),sp
    3ca2:	|  |  |  |  |  |  |  |              |  |                     tst.w d0
    3ca4:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 3cac <continueFunction+0x546>
    3ca6:	|  |  |  |  |  |  |  |              |  |                 |   clr.w d0
    3ca8:	|  +--|--|--|--|--|--|--------------|--|-----------------|-- bra.w 4610 <continueFunction+0xeaa>
					struct variable * grab = (fun -> stack -> thisVar.varType == SVT_FASTARRAY) ?
    3cac:	|  |  |  |  |  |  |  |              |  |                 \-> movea.l 80(sp),a0
    3cb0:	|  |  |  |  |  |  |  |              |  |                     movea.l 24(a0),a0
    3cb4:	|  |  |  |  |  |  |  |              |  |                     move.l (a0),d0
						fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii)
							:
    3cb6:	|  |  |  |  |  |  |  |              |  |                     moveq #10,d1
    3cb8:	|  |  |  |  |  |  |  |              |  |                     cmp.l d0,d1
    3cba:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 3cdc <continueFunction+0x576>
						fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii)
    3cbc:	|  |  |  |  |  |  |  |              |  |                 |   move.l 4(sp),d0
    3cc0:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,d1
    3cc2:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 80(sp),a0
    3cc6:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 24(a0),a0
    3cca:	|  |  |  |  |  |  |  |              |  |                 |   move.l 4(a0),d0
    3cce:	|  |  |  |  |  |  |  |              |  |                 |   move.l d1,-(sp)
    3cd0:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,-(sp)
    3cd2:	|  |  |  |  |  |  |  |              |  |                 |   jsr 13388 <fastArrayGetByIndex>
    3cd8:	|  |  |  |  |  |  |  |              |  |                 |   addq.l #8,sp
    3cda:	|  |  |  |  |  |  |  |              |  |              /--|-- bra.s 3cfc <continueFunction+0x596>
						stackGetByIndex (fun -> stack -> thisVar.varData.theStack -> first, ii);
    3cdc:	|  |  |  |  |  |  |  |              |  |              |  \-> move.l 4(sp),d0
    3ce0:	|  |  |  |  |  |  |  |              |  |              |      move.l d0,d1
    3ce2:	|  |  |  |  |  |  |  |              |  |              |      movea.l 80(sp),a0
    3ce6:	|  |  |  |  |  |  |  |              |  |              |      movea.l 24(a0),a0
    3cea:	|  |  |  |  |  |  |  |              |  |              |      movea.l 4(a0),a0
    3cee:	|  |  |  |  |  |  |  |              |  |              |      move.l (a0),d0
    3cf0:	|  |  |  |  |  |  |  |              |  |              |      move.l d1,-(sp)
    3cf2:	|  |  |  |  |  |  |  |              |  |              |      move.l d0,-(sp)
    3cf4:	|  |  |  |  |  |  |  |              |  |              |      jsr 14012 <stackGetByIndex>
    3cfa:	|  |  |  |  |  |  |  |              |  |              |      addq.l #8,sp
					struct variable * grab = (fun -> stack -> thisVar.varType == SVT_FASTARRAY) ?
    3cfc:	|  |  |  |  |  |  |  |              |  |              \----> move.l d0,60(sp)

					trimStack (&fun -> stack);
    3d00:	|  |  |  |  |  |  |  |              |  |                     moveq #24,d0
    3d02:	|  |  |  |  |  |  |  |              |  |                     add.l 80(sp),d0
    3d06:	|  |  |  |  |  |  |  |              |  |                     move.l d0,-(sp)
    3d08:	|  |  |  |  |  |  |  |              |  |                     jsr 14082 <trimStack>
    3d0e:	|  |  |  |  |  |  |  |              |  |                     addq.l #4,sp

					if (! grab) {
    3d10:	|  |  |  |  |  |  |  |              |  |                     tst.l 60(sp)
    3d14:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 3d30 <continueFunction+0x5ca>
						setVariable (&fun -> reg, SVT_NULL, 0);
    3d16:	|  |  |  |  |  |  |  |              |  |                 |   moveq #28,d0
    3d18:	|  |  |  |  |  |  |  |              |  |                 |   add.l 80(sp),d0
    3d1c:	|  |  |  |  |  |  |  |              |  |                 |   clr.l -(sp)
    3d1e:	|  |  |  |  |  |  |  |              |  |                 |   clr.l -(sp)
    3d20:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,-(sp)
    3d22:	|  |  |  |  |  |  |  |              |  |                 |   jsr 13ff0 <setVariable>
    3d28:	|  |  |  |  |  |  |  |              |  |                 |   lea 12(sp),sp
							default:
							if (! copyVariable (grab, &fun -> reg)) return FALSE;
						}
					}
				}
				break;
    3d2c:	|  |  |  |  |  |  |  |              |  |  /--------------|-- bra.w 3e0a <continueFunction+0x6a4>
    3d30:	|  |  |  |  |  |  |  |              |  |  |              \-> moveq #39,d0
    3d32:	|  |  |  |  |  |  |  |              |  |  |                  cmp.l 64(sp),d0
    3d36:	|  |  |  |  |  |  |  |              |  |  |              /-- beq.s 3d44 <continueFunction+0x5de>
    3d38:	|  |  |  |  |  |  |  |              |  |  |              |   moveq #40,d1
    3d3a:	|  |  |  |  |  |  |  |              |  |  |              |   cmp.l 64(sp),d1
    3d3e:	|  |  |  |  |  |  |  |              |  |  |           /--|-- beq.s 3d8e <continueFunction+0x628>
    3d40:	|  |  |  |  |  |  |  |              |  |  |  /--------|--|-- bra.w 3dd6 <continueFunction+0x670>
							if (! getValueType (&ii, SVT_INT, grab)) return FALSE;
    3d44:	|  |  |  |  |  |  |  |              |  |  |  |        |  \-> move.l 60(sp),-(sp)
    3d48:	|  |  |  |  |  |  |  |              |  |  |  |        |      pea 1 <_start+0x1>
    3d4c:	|  |  |  |  |  |  |  |              |  |  |  |        |      lea 8(sp),a0
    3d50:	|  |  |  |  |  |  |  |              |  |  |  |        |      move.l a0,-(sp)
    3d52:	|  |  |  |  |  |  |  |              |  |  |  |        |      jsr 136fe <getValueType>
    3d58:	|  |  |  |  |  |  |  |              |  |  |  |        |      lea 12(sp),sp
    3d5c:	|  |  |  |  |  |  |  |              |  |  |  |        |      tst.w d0
    3d5e:	|  |  |  |  |  |  |  |              |  |  |  |        |  /-- bne.s 3d66 <continueFunction+0x600>
    3d60:	|  |  |  |  |  |  |  |              |  |  |  |        |  |   clr.w d0
    3d62:	|  |  |  |  |  |  |  |              |  |  |  |  /-----|--|-- bra.w 3df0 <continueFunction+0x68a>
							setVariable (&fun -> reg, SVT_INT, ii);
    3d66:	|  |  |  |  |  |  |  |              |  |  |  |  |     |  \-> move.l (sp),d1
    3d68:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      moveq #28,d0
    3d6a:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      add.l 80(sp),d0
    3d6e:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d1,-(sp)
    3d70:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      pea 1 <_start+0x1>
    3d74:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d0,-(sp)
    3d76:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      jsr 13ff0 <setVariable>
    3d7c:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      lea 12(sp),sp
							grab -> varData.intValue = ii + 1;
    3d80:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l (sp),d0
    3d82:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      addq.l #1,d0
    3d84:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      movea.l 60(sp),a0
    3d88:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d0,4(a0)
							break;
    3d8c:	|  |  |  |  |  |  |  |              |  |  |  |  |  /--|----- bra.s 3df4 <continueFunction+0x68e>
							if (! getValueType (&ii, SVT_INT, grab)) return FALSE;
    3d8e:	|  |  |  |  |  |  |  |              |  |  |  |  |  |  \----> move.l 60(sp),-(sp)
    3d92:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         pea 1 <_start+0x1>
    3d96:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 8(sp),a0
    3d9a:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l a0,-(sp)
    3d9c:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         jsr 136fe <getValueType>
    3da2:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 12(sp),sp
    3da6:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         tst.w d0
    3da8:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     /-- bne.s 3dae <continueFunction+0x648>
    3daa:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     |   clr.w d0
    3dac:	|  |  |  |  |  |  |  |              |  |  |  |  +--|-----|-- bra.s 3df0 <continueFunction+0x68a>
							setVariable (&fun -> reg, SVT_INT, ii);
    3dae:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     \-> move.l (sp),d1
    3db0:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         moveq #28,d0
    3db2:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         add.l 80(sp),d0
    3db6:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d1,-(sp)
    3db8:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         pea 1 <_start+0x1>
    3dbc:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d0,-(sp)
    3dbe:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         jsr 13ff0 <setVariable>
    3dc4:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 12(sp),sp
							grab -> varData.intValue = ii - 1;
    3dc8:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l (sp),d0
    3dca:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         subq.l #1,d0
    3dcc:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         movea.l 60(sp),a0
    3dd0:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d0,4(a0)
							break;
    3dd4:	|  |  |  |  |  |  |  |              |  |  |  |  |  +-------- bra.s 3df4 <continueFunction+0x68e>
							if (! copyVariable (grab, &fun -> reg)) return FALSE;
    3dd6:	|  |  |  |  |  |  |  |              |  |  |  \--|--|-------> moveq #28,d0
    3dd8:	|  |  |  |  |  |  |  |              |  |  |     |  |         add.l 80(sp),d0
    3ddc:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l d0,-(sp)
    3dde:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l 64(sp),-(sp)
    3de2:	|  |  |  |  |  |  |  |              |  |  |     |  |         jsr 13bb8 <copyVariable>
    3de8:	|  |  |  |  |  |  |  |              |  |  |     |  |         addq.l #8,sp
    3dea:	|  |  |  |  |  |  |  |              |  |  |     |  |         tst.w d0
    3dec:	|  |  |  |  |  |  |  |              |  |  +-----|--|-------- bne.s 3e0a <continueFunction+0x6a4>
    3dee:	|  |  |  |  |  |  |  |              |  |  |     |  |         clr.w d0
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    3df0:	|  +--|--|--|--|--|--|--------------|--|--|-----\--|-------X bra.w 4610 <continueFunction+0xeaa>
				break;
    3df4:	|  |  |  |  |  |  |  |              |  |  +--------\-------X bra.s 3e0a <continueFunction+0x6a4>

				default:
				KPrintF((ERROR_INDEX_NONSTACK));
    3df6:	|  |  |  |  |  |  |  |              \--|--|----------------> pea 16ff3 <PutChar+0xab3>
    3dfc:	|  |  |  |  |  |  |  |                 |  |                  jsr 15bf0 <KPrintF>
    3e02:	|  |  |  |  |  |  |  |                 |  |                  addq.l #4,sp
				return FALSE;
    3e04:	|  |  |  |  |  |  |  |                 |  |                  clr.w d0
    3e06:	|  +--|--|--|--|--|--|-----------------|--|----------------- bra.w 4610 <continueFunction+0xeaa>
				break;
    3e0a:	|  |  |  |  |  |  |  |                 |  \----------------> nop
			}
			break;
    3e0c:	|  |  |  |  +--|--|--|-----------------\-------------------X bra.w 45ee <continueFunction+0xe88>

			case SLU_INDEXSET:
			switch (fun -> stack -> thisVar.varType) {
    3e10:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    3e14:	|  |  |  |  |  |  |  |                                       movea.l 24(a0),a0
    3e18:	|  |  |  |  |  |  |  |                                       move.l (a0),d0
    3e1a:	|  |  |  |  |  |  |  |                                       moveq #6,d1
    3e1c:	|  |  |  |  |  |  |  |                                       cmp.l d0,d1
    3e1e:	|  |  |  |  |  |  |  |                                   /-- beq.s 3e2c <continueFunction+0x6c6>
    3e20:	|  |  |  |  |  |  |  |                                   |   moveq #10,d1
    3e22:	|  |  |  |  |  |  |  |                                   |   cmp.l d0,d1
    3e24:	|  |  |  |  |  |  |  |                                /--|-- beq.w 3ed8 <continueFunction+0x772>
    3e28:	|  |  |  |  |  |  |  |                             /--|--|-- bra.w 3f36 <continueFunction+0x7d0>
				case SVT_STACK:
				if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    3e2c:	|  |  |  |  |  |  |  |                             |  |  \-> movea.l 80(sp),a0
    3e30:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    3e34:	|  |  |  |  |  |  |  |                             |  |      movea.l 4(a0),a0
    3e38:	|  |  |  |  |  |  |  |                             |  |      move.l (a0),d0
    3e3a:	|  |  |  |  |  |  |  |                             |  |  /-- bne.s 3e50 <continueFunction+0x6ea>
					KPrintF((ERROR_INDEX_EMPTY));
    3e3c:	|  |  |  |  |  |  |  |                             |  |  |   pea 16fd5 <PutChar+0xa95>
    3e42:	|  |  |  |  |  |  |  |                             |  |  |   jsr 15bf0 <KPrintF>
    3e48:	|  |  |  |  |  |  |  |                             |  |  |   addq.l #4,sp
					return FALSE;
    3e4a:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    3e4c:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 4610 <continueFunction+0xeaa>
				} else {
					int ii;
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    3e50:	|  |  |  |  |  |  |  |                             |  |  \-> moveq #28,d0
    3e52:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    3e56:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    3e58:	|  |  |  |  |  |  |  |                             |  |      pea 1 <_start+0x1>
    3e5c:	|  |  |  |  |  |  |  |                             |  |      lea 16(sp),a0
    3e60:	|  |  |  |  |  |  |  |                             |  |      move.l a0,-(sp)
    3e62:	|  |  |  |  |  |  |  |                             |  |      jsr 136fe <getValueType>
    3e68:	|  |  |  |  |  |  |  |                             |  |      lea 12(sp),sp
    3e6c:	|  |  |  |  |  |  |  |                             |  |      tst.w d0
    3e6e:	|  |  |  |  |  |  |  |                             |  |  /-- bne.s 3e76 <continueFunction+0x710>
    3e70:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    3e72:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 4610 <continueFunction+0xeaa>
					if (! stackSetByIndex (fun -> stack -> thisVar.varData.theStack -> first, ii, &fun -> stack -> next -> thisVar)) {
    3e76:	|  |  |  |  |  |  |  |                             |  |  \-> movea.l 80(sp),a0
    3e7a:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    3e7e:	|  |  |  |  |  |  |  |                             |  |      move.l 8(a0),d0
    3e82:	|  |  |  |  |  |  |  |                             |  |      movea.l d0,a1
    3e84:	|  |  |  |  |  |  |  |                             |  |      move.l 8(sp),d0
    3e88:	|  |  |  |  |  |  |  |                             |  |      move.l d0,d1
    3e8a:	|  |  |  |  |  |  |  |                             |  |      movea.l 80(sp),a0
    3e8e:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    3e92:	|  |  |  |  |  |  |  |                             |  |      movea.l 4(a0),a0
    3e96:	|  |  |  |  |  |  |  |                             |  |      move.l (a0),d0
    3e98:	|  |  |  |  |  |  |  |                             |  |      move.l a1,-(sp)
    3e9a:	|  |  |  |  |  |  |  |                             |  |      move.l d1,-(sp)
    3e9c:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    3e9e:	|  |  |  |  |  |  |  |                             |  |      jsr 5986 <stackSetByIndex>
    3ea4:	|  |  |  |  |  |  |  |                             |  |      lea 12(sp),sp
    3ea8:	|  |  |  |  |  |  |  |                             |  |      tst.w d0
    3eaa:	|  |  |  |  |  |  |  |                             |  |  /-- bne.s 3eb2 <continueFunction+0x74c>
						return FALSE;
    3eac:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    3eae:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 4610 <continueFunction+0xeaa>
					}
					trimStack (&fun -> stack);
    3eb2:	|  |  |  |  |  |  |  |                             |  |  \-> moveq #24,d0
    3eb4:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    3eb8:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    3eba:	|  |  |  |  |  |  |  |                             |  |      jsr 14082 <trimStack>
    3ec0:	|  |  |  |  |  |  |  |                             |  |      addq.l #4,sp
					trimStack (&fun -> stack);
    3ec2:	|  |  |  |  |  |  |  |                             |  |      moveq #24,d0
    3ec4:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    3ec8:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    3eca:	|  |  |  |  |  |  |  |                             |  |      jsr 14082 <trimStack>
    3ed0:	|  |  |  |  |  |  |  |                             |  |      addq.l #4,sp
				}
				break;
    3ed2:	|  |  |  |  |  |  |  |                             |  |      nop

				default:
				KPrintF((ERROR_INDEX_NONSTACK));
				return FALSE;
			}
			break;
    3ed4:	|  |  |  |  +--|--|--|-----------------------------|--|----- bra.w 45ee <continueFunction+0xe88>
					if (! getValueType (&ii, SVT_INT, &fun->reg)) return FALSE;
    3ed8:	|  |  |  |  |  |  |  |                             |  \----> moveq #28,d0
    3eda:	|  |  |  |  |  |  |  |                             |         add.l 80(sp),d0
    3ede:	|  |  |  |  |  |  |  |                             |         move.l d0,-(sp)
    3ee0:	|  |  |  |  |  |  |  |                             |         pea 1 <_start+0x1>
    3ee4:	|  |  |  |  |  |  |  |                             |         lea 20(sp),a0
    3ee8:	|  |  |  |  |  |  |  |                             |         move.l a0,-(sp)
    3eea:	|  |  |  |  |  |  |  |                             |         jsr 136fe <getValueType>
    3ef0:	|  |  |  |  |  |  |  |                             |         lea 12(sp),sp
    3ef4:	|  |  |  |  |  |  |  |                             |         tst.w d0
    3ef6:	|  |  |  |  |  |  |  |                             |     /-- bne.s 3efe <continueFunction+0x798>
    3ef8:	|  |  |  |  |  |  |  |                             |     |   clr.w d0
    3efa:	|  +--|--|--|--|--|--|-----------------------------|-----|-- bra.w 4610 <continueFunction+0xeaa>
					struct variable * v = fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii);
    3efe:	|  |  |  |  |  |  |  |                             |     \-> move.l 12(sp),d0
    3f02:	|  |  |  |  |  |  |  |                             |         move.l d0,d1
    3f04:	|  |  |  |  |  |  |  |                             |         movea.l 80(sp),a0
    3f08:	|  |  |  |  |  |  |  |                             |         movea.l 24(a0),a0
    3f0c:	|  |  |  |  |  |  |  |                             |         move.l 4(a0),d0
    3f10:	|  |  |  |  |  |  |  |                             |         move.l d1,-(sp)
    3f12:	|  |  |  |  |  |  |  |                             |         move.l d0,-(sp)
    3f14:	|  |  |  |  |  |  |  |                             |         jsr 13388 <fastArrayGetByIndex>
    3f1a:	|  |  |  |  |  |  |  |                             |         addq.l #8,sp
    3f1c:	|  |  |  |  |  |  |  |                             |         move.l d0,56(sp)
					if (v == NULL) KPrintF(("Not within bounds of fast array."));
    3f20:	|  |  |  |  |  |  |  |                             |     /-- bne.s 3f30 <continueFunction+0x7ca>
    3f22:	|  |  |  |  |  |  |  |                             |     |   pea 17017 <PutChar+0xad7>
    3f28:	|  |  |  |  |  |  |  |                             |     |   jsr 15bf0 <KPrintF>
    3f2e:	|  |  |  |  |  |  |  |                             |     |   addq.l #4,sp
					return FALSE;
    3f30:	|  |  |  |  |  |  |  |                             |     \-> clr.w d0
    3f32:	|  +--|--|--|--|--|--|-----------------------------|-------- bra.w 4610 <continueFunction+0xeaa>
				KPrintF((ERROR_INDEX_NONSTACK));
    3f36:	|  |  |  |  |  |  |  |                             \-------> pea 16ff3 <PutChar+0xab3>
    3f3c:	|  |  |  |  |  |  |  |                                       jsr 15bf0 <KPrintF>
    3f42:	|  |  |  |  |  |  |  |                                       addq.l #4,sp
				return FALSE;
    3f44:	|  |  |  |  |  |  |  |                                       clr.w d0
    3f46:	|  +--|--|--|--|--|--|-------------------------------------- bra.w 4610 <continueFunction+0xeaa>
			// variable, a global or onto the stack...

			case SLU_INCREMENT_LOCAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&fun -> localVars[param])) return FALSE;
    3f4a:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    3f4e:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    3f52:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    3f56:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    3f58:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    3f5a:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    3f5c:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    3f60:	|  |  |  |  |  |  |  |                                       lea 24(sp),a0
    3f64:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    3f66:	|  |  |  |  |  |  |  |                                       jsr 136fe <getValueType>
    3f6c:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    3f70:	|  |  |  |  |  |  |  |                                       tst.w d0
    3f72:	|  |  |  |  |  |  |  |                                   /-- bne.s 3f7a <continueFunction+0x814>
    3f74:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    3f76:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 4610 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    3f7a:	|  |  |  |  |  |  |  |                                   \-> move.l 16(sp),d1
    3f7e:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    3f80:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    3f84:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    3f86:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    3f8a:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    3f8c:	|  |  |  |  |  |  |  |                                       jsr 13ff0 <setVariable>
    3f92:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&(fun -> localVars[param]), SVT_INT, ii + 1);
    3f96:	|  |  |  |  |  |  |  |                                       move.l 16(sp),d0
    3f9a:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    3f9c:	|  |  |  |  |  |  |  |                                       addq.l #1,d1
    3f9e:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    3fa2:	|  |  |  |  |  |  |  |                                       movea.l 20(a0),a0
    3fa6:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    3faa:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    3fac:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    3fae:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    3fb0:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    3fb4:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    3fb6:	|  |  |  |  |  |  |  |                                       jsr 13ff0 <setVariable>
    3fbc:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    3fc0:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 45ee <continueFunction+0xe88>

			case SLU_INCREMENT_GLOBAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&globalVars[param])) return FALSE;
    3fc4:	|  |  |  |  |  |  |  |                                       move.l 1b150 <globalVars>,d1
    3fca:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    3fce:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    3fd0:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    3fd2:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    3fd4:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    3fd8:	|  |  |  |  |  |  |  |                                       lea 28(sp),a0
    3fdc:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    3fde:	|  |  |  |  |  |  |  |                                       jsr 136fe <getValueType>
    3fe4:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    3fe8:	|  |  |  |  |  |  |  |                                       tst.w d0
    3fea:	|  |  |  |  |  |  |  |                                   /-- bne.s 3ff2 <continueFunction+0x88c>
    3fec:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    3fee:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 4610 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    3ff2:	|  |  |  |  |  |  |  |                                   \-> move.l 20(sp),d1
    3ff6:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    3ff8:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    3ffc:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    3ffe:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    4002:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    4004:	|  |  |  |  |  |  |  |                                       jsr 13ff0 <setVariable>
    400a:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&globalVars[param], SVT_INT, ii + 1);
    400e:	|  |  |  |  |  |  |  |                                       move.l 20(sp),d0
    4012:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    4014:	|  |  |  |  |  |  |  |                                       addq.l #1,d1
    4016:	|  |  |  |  |  |  |  |                                       movea.l 1b150 <globalVars>,a0
    401c:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    4020:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    4022:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    4024:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    4026:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    402a:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    402c:	|  |  |  |  |  |  |  |                                       jsr 13ff0 <setVariable>
    4032:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    4036:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 45ee <continueFunction+0xe88>

			case SLU_DECREMENT_LOCAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&fun -> localVars[param])) return FALSE;
    403a:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    403e:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    4042:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    4046:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    4048:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    404a:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    404c:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    4050:	|  |  |  |  |  |  |  |                                       lea 32(sp),a0
    4054:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    4056:	|  |  |  |  |  |  |  |                                       jsr 136fe <getValueType>
    405c:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    4060:	|  |  |  |  |  |  |  |                                       tst.w d0
    4062:	|  |  |  |  |  |  |  |                                   /-- bne.s 406a <continueFunction+0x904>
    4064:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    4066:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 4610 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    406a:	|  |  |  |  |  |  |  |                                   \-> move.l 24(sp),d1
    406e:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    4070:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    4074:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    4076:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    407a:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    407c:	|  |  |  |  |  |  |  |                                       jsr 13ff0 <setVariable>
    4082:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&(fun -> localVars[param]), SVT_INT, ii - 1);
    4086:	|  |  |  |  |  |  |  |                                       move.l 24(sp),d0
    408a:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    408c:	|  |  |  |  |  |  |  |                                       subq.l #1,d1
    408e:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    4092:	|  |  |  |  |  |  |  |                                       movea.l 20(a0),a0
    4096:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    409a:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    409c:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    409e:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    40a0:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    40a4:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    40a6:	|  |  |  |  |  |  |  |                                       jsr 13ff0 <setVariable>
    40ac:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    40b0:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 45ee <continueFunction+0xe88>

			case SLU_DECREMENT_GLOBAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&globalVars[param])) return FALSE;
    40b4:	|  |  |  |  |  |  |  |                                       move.l 1b150 <globalVars>,d1
    40ba:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    40be:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    40c0:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    40c2:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    40c4:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    40c8:	|  |  |  |  |  |  |  |                                       lea 36(sp),a0
    40cc:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    40ce:	|  |  |  |  |  |  |  |                                       jsr 136fe <getValueType>
    40d4:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    40d8:	|  |  |  |  |  |  |  |                                       tst.w d0
    40da:	|  |  |  |  |  |  |  |                                   /-- bne.s 40e2 <continueFunction+0x97c>
    40dc:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    40de:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 4610 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    40e2:	|  |  |  |  |  |  |  |                                   \-> move.l 28(sp),d1
    40e6:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    40e8:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    40ec:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    40ee:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    40f2:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    40f4:	|  |  |  |  |  |  |  |                                       jsr 13ff0 <setVariable>
    40fa:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&globalVars[param], SVT_INT, ii - 1);
    40fe:	|  |  |  |  |  |  |  |                                       move.l 28(sp),d0
    4102:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    4104:	|  |  |  |  |  |  |  |                                       subq.l #1,d1
    4106:	|  |  |  |  |  |  |  |                                       movea.l 1b150 <globalVars>,a0
    410c:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    4110:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    4112:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    4114:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    4116:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    411a:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    411c:	|  |  |  |  |  |  |  |                                       jsr 13ff0 <setVariable>
    4122:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    4126:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 45ee <continueFunction+0xe88>

			case SLU_SET_LOCAL:
			if (! copyVariable (&fun -> reg, &(fun -> localVars[param]))) return FALSE;
    412a:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    412e:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    4132:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    4136:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    4138:	|  |  |  |  |  |  |  |                                       add.l d0,d1
    413a:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    413c:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    4140:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    4142:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    4144:	|  |  |  |  |  |  |  |                                       jsr 13bb8 <copyVariable>
    414a:	|  |  |  |  |  |  |  |                                       addq.l #8,sp
    414c:	|  |  |  |  |  |  |  |                                       tst.w d0
    414e:	|  |  |  |  |  |  |  |  /----------------------------------- bne.w 45d8 <continueFunction+0xe72>
    4152:	|  |  |  |  |  |  |  |  |                                    clr.w d0
    4154:	|  +--|--|--|--|--|--|--|----------------------------------- bra.w 4610 <continueFunction+0xeaa>
			break;

			case SLU_SET_GLOBAL:
//			newDebug ("  Copying TO global variable", param);
//			newDebug ("  Global type at the moment", globalVars[param].varType);
			if (! copyVariable (&fun -> reg, &globalVars[param])) return FALSE;
    4158:	|  |  |  |  |  |  |  |  |                                    move.l 1b150 <globalVars>,d1
    415e:	|  |  |  |  |  |  |  |  |                                    move.l 68(sp),d0
    4162:	|  |  |  |  |  |  |  |  |                                    lsl.l #3,d0
    4164:	|  |  |  |  |  |  |  |  |                                    add.l d0,d1
    4166:	|  |  |  |  |  |  |  |  |                                    moveq #28,d0
    4168:	|  |  |  |  |  |  |  |  |                                    add.l 80(sp),d0
    416c:	|  |  |  |  |  |  |  |  |                                    move.l d1,-(sp)
    416e:	|  |  |  |  |  |  |  |  |                                    move.l d0,-(sp)
    4170:	|  |  |  |  |  |  |  |  |                                    jsr 13bb8 <copyVariable>
    4176:	|  |  |  |  |  |  |  |  |                                    addq.l #8,sp
    4178:	|  |  |  |  |  |  |  |  |                                    tst.w d0
    417a:	|  |  |  |  |  |  |  |  |  /-------------------------------- bne.w 45dc <continueFunction+0xe76>
    417e:	|  |  |  |  |  |  |  |  |  |                                 clr.w d0
    4180:	|  +--|--|--|--|--|--|--|--|-------------------------------- bra.w 4610 <continueFunction+0xeaa>
			break;

			case SLU_LOAD_GLOBAL:
//			newDebug ("  Copying FROM global variable", param);
//			newDebug ("  Global type at the moment", globalVars[param].varType);
			if (! copyVariable (&globalVars[param], &fun -> reg)) return FALSE;
    4184:	|  |  |  |  |  |  |  |  |  |                                 moveq #28,d0
    4186:	|  |  |  |  |  |  |  |  |  |                                 add.l 80(sp),d0
    418a:	|  |  |  |  |  |  |  |  |  |                                 movea.l 1b150 <globalVars>,a0
    4190:	|  |  |  |  |  |  |  |  |  |                                 move.l 68(sp),d1
    4194:	|  |  |  |  |  |  |  |  |  |                                 lsl.l #3,d1
    4196:	|  |  |  |  |  |  |  |  |  |                                 add.l a0,d1
    4198:	|  |  |  |  |  |  |  |  |  |                                 move.l d0,-(sp)
    419a:	|  |  |  |  |  |  |  |  |  |                                 move.l d1,-(sp)
    419c:	|  |  |  |  |  |  |  |  |  |                                 jsr 13bb8 <copyVariable>
    41a2:	|  |  |  |  |  |  |  |  |  |                                 addq.l #8,sp
    41a4:	|  |  |  |  |  |  |  |  |  |                                 tst.w d0
    41a6:	|  |  |  |  |  |  |  |  |  |  /----------------------------- bne.w 45e0 <continueFunction+0xe7a>
    41aa:	|  |  |  |  |  |  |  |  |  |  |                              clr.w d0
    41ac:	|  +--|--|--|--|--|--|--|--|--|----------------------------- bra.w 4610 <continueFunction+0xeaa>
			break;

			case SLU_STACK_PUSH:
			if (! addVarToStack (&fun -> reg, &fun -> stack)) return FALSE;
    41b0:	|  |  |  |  |  |  |  |  |  |  |                              moveq #24,d1
    41b2:	|  |  |  |  |  |  |  |  |  |  |                              add.l 80(sp),d1
    41b6:	|  |  |  |  |  |  |  |  |  |  |                              moveq #28,d0
    41b8:	|  |  |  |  |  |  |  |  |  |  |                              add.l 80(sp),d0
    41bc:	|  |  |  |  |  |  |  |  |  |  |                              move.l d1,-(sp)
    41be:	|  |  |  |  |  |  |  |  |  |  |                              move.l d0,-(sp)
    41c0:	|  |  |  |  |  |  |  |  |  |  |                              jsr 12f3a <addVarToStack>
    41c6:	|  |  |  |  |  |  |  |  |  |  |                              addq.l #8,sp
    41c8:	|  |  |  |  |  |  |  |  |  |  |                              tst.w d0
    41ca:	|  |  |  |  |  |  |  |  |  |  |  /-------------------------- bne.w 45e4 <continueFunction+0xe7e>
    41ce:	|  |  |  |  |  |  |  |  |  |  |  |                           clr.w d0
    41d0:	|  +--|--|--|--|--|--|--|--|--|--|-------------------------- bra.w 4610 <continueFunction+0xeaa>
			break;

			case SLU_QUICK_PUSH:
			if (! addVarToStackQuick (&fun -> reg, &fun -> stack)) return FALSE;
    41d4:	|  |  |  |  |  |  |  |  |  |  |  |                           moveq #24,d1
    41d6:	|  |  |  |  |  |  |  |  |  |  |  |                           add.l 80(sp),d1
    41da:	|  |  |  |  |  |  |  |  |  |  |  |                           moveq #28,d0
    41dc:	|  |  |  |  |  |  |  |  |  |  |  |                           add.l 80(sp),d0
    41e0:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l d1,-(sp)
    41e2:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l d0,-(sp)
    41e4:	|  |  |  |  |  |  |  |  |  |  |  |                           jsr 12fc0 <addVarToStackQuick>
    41ea:	|  |  |  |  |  |  |  |  |  |  |  |                           addq.l #8,sp
    41ec:	|  |  |  |  |  |  |  |  |  |  |  |                           tst.w d0
    41ee:	|  |  |  |  |  |  |  |  |  |  |  |  /----------------------- bne.w 45e8 <continueFunction+0xe82>
    41f2:	|  |  |  |  |  |  |  |  |  |  |  |  |                        clr.w d0
    41f4:	|  +--|--|--|--|--|--|--|--|--|--|--|----------------------- bra.w 4610 <continueFunction+0xeaa>
			break;

			case SLU_NOT:
			setVariable (&fun -> reg, SVT_INT, ! getBoolean (&fun -> reg));
    41f8:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    41fa:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    41fe:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    4200:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 13c3e <getBoolean>
    4206:	|  |  |  |  |  |  |  |  |  |  |  |  |                        addq.l #4,sp
    4208:	|  |  |  |  |  |  |  |  |  |  |  |  |                        tst.w d0
    420a:	|  |  |  |  |  |  |  |  |  |  |  |  |                        seq d0
    420c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        neg.b d0
    420e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #0,d1
    4210:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.b d0,d1
    4212:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    4214:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    4218:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d1,-(sp)
    421a:	|  |  |  |  |  |  |  |  |  |  |  |  |                        pea 1 <_start+0x1>
    421e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    4220:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 13ff0 <setVariable>
    4226:	|  |  |  |  |  |  |  |  |  |  |  |  |                        lea 12(sp),sp
			break;
    422a:	|  |  |  |  +--|--|--|--|--|--|--|--|----------------------- bra.w 45ee <continueFunction+0xe88>

			case SLU_BR_ZERO:
			if (! getBoolean (&fun -> reg)) {
    422e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    4230:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    4234:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    4236:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 13c3e <getBoolean>
    423c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        addq.l #4,sp
    423e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        tst.w d0
    4240:	|  |  |  |  |  |  |  |  |  |  |  |  |  /-------------------- bne.w 45ec <continueFunction+0xe86>
				advanceNow = FALSE;
    4244:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     clr.w 72(sp)
				fun -> runThisLine = param;
    4248:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    424c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 68(sp),36(a0)
			}
			break;
    4252:	|  |  |  |  |  |  |  |  |  |  |  |  |  +-------------------- bra.w 45ec <continueFunction+0xe86>

			case SLU_BRANCH:
			advanceNow = FALSE;
    4256:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     clr.w 72(sp)
			fun -> runThisLine = param;
    425a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    425e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 68(sp),36(a0)
			break;
    4264:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-------------------- bra.w 45ee <continueFunction+0xe88>

			case SLU_NEGATIVE:
			{
				int i;
				if (! getValueType(&i, SVT_INT,&fun -> reg)) return FALSE;
    4268:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     moveq #28,d0
    426a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     add.l 80(sp),d0
    426e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,-(sp)
    4270:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     pea 1 <_start+0x1>
    4274:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 40(sp),a0
    4278:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l a0,-(sp)
    427a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     jsr 136fe <getValueType>
    4280:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 12(sp),sp
    4284:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     tst.w d0
    4286:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 /-- bne.s 428e <continueFunction+0xb28>
    4288:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 |   clr.w d0
    428a:	|  +--|--|--|--|--|--|--|--|--|--|--|--|-----------------|-- bra.w 4610 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, -i);
    428e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 \-> move.l 32(sp),d0
    4292:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,d1
    4294:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     neg.l d1
    4296:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     moveq #28,d0
    4298:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     add.l 80(sp),d0
    429c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d1,-(sp)
    429e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     pea 1 <_start+0x1>
    42a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,-(sp)
    42a4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     jsr 13ff0 <setVariable>
    42aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 12(sp),sp
			}
			break;
    42ae:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-------------------- bra.w 45ee <continueFunction+0xe88>
			case SLU_NOT_EQ:
			case SLU_LESSTHAN:
			case SLU_MORETHAN:
			case SLU_LESS_EQUAL:
			case SLU_MORE_EQUAL:
			if (fun -> stack) {
    42b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    42b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 24(a0),d0
    42ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  /----------------- beq.w 45a4 <continueFunction+0xe3e>
    42be:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  moveq #15,d0
    42c0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  cmp.l 64(sp),d0
    42c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        /-------- beq.s 4340 <continueFunction+0xbda>
    42c6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #15,d1
    42c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         cmp.l 64(sp),d1
    42cc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     /--|-------- bcs.w 438a <continueFunction+0xc24>
    42d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |         moveq #8,d0
    42d2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |         cmp.l 64(sp),d0
    42d6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     /-- beq.s 42e4 <continueFunction+0xb7e>
    42d8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |   moveq #14,d1
    42da:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |   cmp.l 64(sp),d1
    42de:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  /--|-- beq.s 4312 <continueFunction+0xbac>
    42e0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     +--|--|--|-- bra.w 438a <continueFunction+0xc24>
				int firstValue, secondValue;

				switch (com) {
					case SLU_PLUS:
					addVariablesInSecond (&fun -> stack -> thisVar, &fun -> reg);
    42e4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  \-> moveq #28,d0
    42e6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      add.l 80(sp),d0
    42ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      movea.l 80(sp),a0
    42ee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l 24(a0),d1
    42f2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d0,-(sp)
    42f4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d1,-(sp)
    42f6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      jsr 13034 <addVariablesInSecond>
    42fc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      addq.l #8,sp
					trimStack (&fun -> stack);
    42fe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      moveq #24,d0
    4300:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      add.l 80(sp),d0
    4304:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d0,-(sp)
    4306:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      jsr 14082 <trimStack>
    430c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      addq.l #4,sp
					break;
    430e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  /--|--|--|----- bra.w 45b8 <continueFunction+0xe52>

					case SLU_EQUALS:
					compareVariablesInSecond (&(fun -> stack -> thisVar), &fun -> reg);
    4312:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \----> moveq #28,d0
    4314:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         add.l 80(sp),d0
    4318:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         movea.l 80(sp),a0
    431c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l 24(a0),d1
    4320:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d0,-(sp)
    4322:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d1,-(sp)
    4324:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         jsr 130f2 <compareVariablesInSecond>
    432a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         addq.l #8,sp
					trimStack (&fun -> stack);
    432c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         moveq #24,d0
    432e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         add.l 80(sp),d0
    4332:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d0,-(sp)
    4334:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         jsr 14082 <trimStack>
    433a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         addq.l #4,sp
					break;
    433c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|--|-------- bra.w 45b8 <continueFunction+0xe52>

					case SLU_NOT_EQ:
					compareVariablesInSecond (&(fun -> stack -> thisVar), &fun -> reg);
    4340:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \-------> moveq #28,d0
    4342:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            add.l 80(sp),d0
    4346:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    434a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 24(a0),d1
    434e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,-(sp)
    4350:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d1,-(sp)
    4352:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            jsr 130f2 <compareVariablesInSecond>
    4358:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            addq.l #8,sp
					trimStack (&fun -> stack);
    435a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            moveq #24,d0
    435c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            add.l 80(sp),d0
    4360:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,-(sp)
    4362:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            jsr 14082 <trimStack>
    4368:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            addq.l #4,sp
	               	fun -> reg.varData.intValue = ! fun -> reg.varData.intValue;
    436a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    436e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 32(a0),d0
    4372:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            seq d0
    4374:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            neg.b d0
    4376:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.b d0,d0
    4378:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            andi.l #255,d0
    437e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    4382:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,32(a0)
					break;
    4386:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|----------- bra.w 45b8 <continueFunction+0xe52>

					default:
					if (! getValueType (&firstValue, SVT_INT, &fun->stack->thisVar)) return FALSE;
    438a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \----------> movea.l 80(sp),a0
    438e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l 24(a0),d0
    4392:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    4394:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               pea 1 <_start+0x1>
    4398:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 48(sp),a0
    439c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l a0,-(sp)
    439e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 136fe <getValueType>
    43a4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 12(sp),sp
    43a8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               tst.w d0
    43aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           /-- bne.s 43b2 <continueFunction+0xc4c>
    43ac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   clr.w d0
    43ae:	|  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|-----------|-- bra.w 4610 <continueFunction+0xeaa>
					if (! getValueType(&secondValue, SVT_INT,&fun -> reg)) return FALSE;
    43b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           \-> moveq #28,d0
    43b4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 80(sp),d0
    43b8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    43ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               pea 1 <_start+0x1>
    43be:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 44(sp),a0
    43c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l a0,-(sp)
    43c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 136fe <getValueType>
    43ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 12(sp),sp
    43ce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               tst.w d0
    43d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           /-- bne.s 43d8 <continueFunction+0xc72>
    43d2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   clr.w d0
    43d4:	|  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|-----------|-- bra.w 4610 <continueFunction+0xeaa>
					trimStack (&fun -> stack);
    43d8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           \-> moveq #24,d0
    43da:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 80(sp),d0
    43de:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    43e0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 14082 <trimStack>
    43e6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               addq.l #4,sp
    43e8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               moveq #-9,d0
    43ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 64(sp),d0
    43ee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               moveq #23,d1
    43f0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               cmp.l d0,d1
    43f2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           /-- bcs.w 45b6 <continueFunction+0xe50>
    43f6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l d0,d0
    43f8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   movea.l d0,a0
    43fa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   adda.l #17414,a0
    4400:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.w (a0),d0
    4402:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jmp (4406 <continueFunction+0xca0>,pc,d0.w)
    4406:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   ori.w #48,-(a2)
    440a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x00ba
    440c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    4414:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x0088
    4416:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    441e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    4426:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(15466778,d0.w)
    442e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(21365106,d0.w)

					switch (com) {
						case SLU_MULT:
						setVariable (&fun -> reg, SVT_INT, firstValue * secondValue);
    4436:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    443a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    443e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    4440:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    4442:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 1642a <__mulsi3>
    4448:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    444a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    444c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    444e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    4452:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    4454:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    4458:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    445a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 13ff0 <setVariable>
    4460:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    4464:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 45b8 <continueFunction+0xe52>

						case SLU_MINUS:
						setVariable (&fun -> reg, SVT_INT, firstValue - secondValue);
    4468:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    446c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    4470:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sub.l d0,d1
    4472:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    4474:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    4478:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    447a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    447e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    4480:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 13ff0 <setVariable>
    4486:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    448a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 45b8 <continueFunction+0xe52>

						case SLU_MODULUS:
						setVariable (&fun -> reg, SVT_INT, firstValue % secondValue);
    448e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    4492:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    4496:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    4498:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    449a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 164d6 <__modsi3>
    44a0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    44a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    44a4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    44a6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    44aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    44ac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    44b0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    44b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 13ff0 <setVariable>
    44b8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    44bc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 45b8 <continueFunction+0xe52>

						case SLU_DIVIDE:
						setVariable (&fun -> reg, SVT_INT, firstValue / secondValue);
    44c0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    44c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    44c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    44ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    44cc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 164a8 <__divsi3>
    44d2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    44d4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    44d6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    44d8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    44dc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    44de:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    44e2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    44e4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 13ff0 <setVariable>
    44ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    44ee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 45b8 <continueFunction+0xe52>

						case SLU_LESSTHAN:
						setVariable (&fun -> reg, SVT_INT, firstValue < secondValue);
    44f2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    44f6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    44fa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    44fc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sgt d0
    44fe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    4500:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    4502:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    4504:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    4506:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    450a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    450c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    4510:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    4512:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 13ff0 <setVariable>
    4518:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    451c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 45b8 <continueFunction+0xe52>

						case SLU_MORETHAN:
						setVariable (&fun -> reg, SVT_INT, firstValue > secondValue);
    4520:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    4524:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    4528:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    452a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   slt d0
    452c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    452e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    4530:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    4532:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    4534:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    4538:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    453a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    453e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    4540:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 13ff0 <setVariable>
    4546:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    454a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 45b8 <continueFunction+0xe52>

						case SLU_LESS_EQUAL:
						setVariable (&fun -> reg, SVT_INT, firstValue <= secondValue);
    454c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    4550:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    4554:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    4556:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sge d0
    4558:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    455a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    455c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    455e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    4560:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    4564:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    4566:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    456a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    456c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 13ff0 <setVariable>
    4572:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    4576:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 45b8 <continueFunction+0xe52>

						case SLU_MORE_EQUAL:
						setVariable (&fun -> reg, SVT_INT, firstValue >= secondValue);
    4578:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    457c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    4580:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    4582:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sle d0
    4584:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    4586:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    4588:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    458a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    458c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    4590:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    4592:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    4596:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    4598:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 13ff0 <setVariable>
    459e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    45a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 45b8 <continueFunction+0xe52>
						default:
						break;
					}
				}
			} else {
				KPrintF((ERROR_NOSTACK));
    45a4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  \--|-----------|-> pea 17038 <PutChar+0xaf8>
    45aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   jsr 15bf0 <KPrintF>
    45b0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   addq.l #4,sp
				return FALSE;
    45b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   clr.w d0
    45b4:	|  +--|--|--|--|--|--|--|--|--|--|--|--|-----|-----------|-- bra.s 4610 <continueFunction+0xeaa>
						break;
    45b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           \-> nop
			}
			break;
    45b8:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-----\-------------X bra.s 45ee <continueFunction+0xe88>

			default:
			KPrintF((ERROR_UNKNOWN_CODE));
    45ba:	|  |  |  \--|--|--|--|--|--|--|--|--|--|-------------------> pea 17050 <PutChar+0xb10>
    45c0:	|  |  |     |  |  |  |  |  |  |  |  |  |                     jsr 15bf0 <KPrintF>
    45c6:	|  |  |     |  |  |  |  |  |  |  |  |  |                     addq.l #4,sp
			return FALSE;
    45c8:	|  |  |     |  |  |  |  |  |  |  |  |  |                     clr.w d0
    45ca:	|  +--|-----|--|--|--|--|--|--|--|--|--|-------------------- bra.s 4610 <continueFunction+0xeaa>
			break;
    45cc:	|  |  |     |  \--|--|--|--|--|--|--|--|-------------------> nop
    45ce:	|  |  |     +-----|--|--|--|--|--|--|--|-------------------- bra.s 45ee <continueFunction+0xe88>
			break;
    45d0:	|  |  |     |     \--|--|--|--|--|--|--|-------------------> nop
    45d2:	|  |  |     +--------|--|--|--|--|--|--|-------------------- bra.s 45ee <continueFunction+0xe88>
			break;
    45d4:	|  |  |     |        \--|--|--|--|--|--|-------------------> nop
    45d6:	|  |  |     +-----------|--|--|--|--|--|-------------------- bra.s 45ee <continueFunction+0xe88>
			break;
    45d8:	|  |  |     |           \--|--|--|--|--|-------------------> nop
    45da:	|  |  |     +--------------|--|--|--|--|-------------------- bra.s 45ee <continueFunction+0xe88>
			break;
    45dc:	|  |  |     |              \--|--|--|--|-------------------> nop
    45de:	|  |  |     +-----------------|--|--|--|-------------------- bra.s 45ee <continueFunction+0xe88>
			break;
    45e0:	|  |  |     |                 \--|--|--|-------------------> nop
    45e2:	|  |  |     +--------------------|--|--|-------------------- bra.s 45ee <continueFunction+0xe88>
			break;
    45e4:	|  |  |     |                    \--|--|-------------------> nop
    45e6:	|  |  |     +-----------------------|--|-------------------- bra.s 45ee <continueFunction+0xe88>
			break;
    45e8:	|  |  |     |                       \--|-------------------> nop
    45ea:	|  |  |     +--------------------------|-------------------- bra.s 45ee <continueFunction+0xe88>
			break;
    45ec:	|  |  |     |                          \-------------------> nop
		}

		if (advanceNow) fun -> runThisLine ++;
    45ee:	|  |  |     \----------------------------------------------> tst.w 72(sp)
    45f2:	+--|--|----------------------------------------------------- beq.s 4606 <continueFunction+0xea0>
    45f4:	|  |  |                                                      movea.l 80(sp),a0
    45f8:	|  |  |                                                      move.l 36(a0),d0
    45fc:	|  |  |                                                      addq.l #1,d0
    45fe:	|  |  |                                                      movea.l 80(sp),a0
    4602:	|  |  |                                                      move.l d0,36(a0)
	while (keepLooping) {
    4606:	\--|--|----------------------------------------------------> tst.w 74(sp)
    460a:	   |  \----------------------------------------------------- bne.w 378e <continueFunction+0x28>

	}
	return TRUE;
    460e:	   |                                                         moveq #1,d0
}
    4610:	   \-------------------------------------------------------> lea 76(sp),sp
    4614:	                                                             rts

00004616 <finishFunction>:

void finishFunction (struct loadedFunction * fun) {
    4616:	          lea -16(sp),sp
    461a:	          move.l a6,-(sp)
	int a;

	pauseFunction (fun);
    461c:	          move.l 24(sp),-(sp)
    4620:	          jsr 573c <pauseFunction>
    4626:	          addq.l #4,sp
	if (fun -> stack) 
    4628:	          movea.l 24(sp),a0
    462c:	          move.l 24(a0),d0
    4630:	      /-- beq.s 4644 <finishFunction+0x2e>
	{
		KPrintF("finishfunction: error non empty stack");
    4632:	      |   pea 1707c <PutChar+0xb3c>
    4638:	      |   jsr 15bf0 <KPrintF>
    463e:	      |   addq.l #4,sp
		return;
    4640:	/-----|-- bra.w 46de <finishFunction+0xc8>
	}
	FreeVec( fun -> compiledLines);
    4644:	|     \-> movea.l 24(sp),a0
    4648:	|         move.l 4(a0),12(sp)
    464e:	|         move.l 1b1a2 <SysBase>,d0
    4654:	|         movea.l d0,a6
    4656:	|         movea.l 12(sp),a1
    465a:	|         jsr -690(a6)
	for (a = 0; a < fun -> numLocals; a ++) unlinkVar (&(fun -> localVars[a]));
    465e:	|         clr.l 16(sp)
    4662:	|     /-- bra.s 4682 <finishFunction+0x6c>
    4664:	|  /--|-> movea.l 24(sp),a0
    4668:	|  |  |   move.l 20(a0),d1
    466c:	|  |  |   move.l 16(sp),d0
    4670:	|  |  |   lsl.l #3,d0
    4672:	|  |  |   add.l d1,d0
    4674:	|  |  |   move.l d0,-(sp)
    4676:	|  |  |   jsr 1394c <unlinkVar>
    467c:	|  |  |   addq.l #4,sp
    467e:	|  |  |   addq.l #1,16(sp)
    4682:	|  |  \-> movea.l 24(sp),a0
    4686:	|  |      move.l 8(a0),d0
    468a:	|  |      cmp.l 16(sp),d0
    468e:	|  \----- bgt.s 4664 <finishFunction+0x4e>
	if( fun->numLocals > 0) {
    4690:	|         movea.l 24(sp),a0
    4694:	|         move.l 8(a0),d0
    4698:	|     /-- ble.s 46b4 <finishFunction+0x9e>
		FreeVec(fun -> localVars);
    469a:	|     |   movea.l 24(sp),a0
    469e:	|     |   move.l 20(a0),8(sp)
    46a4:	|     |   move.l 1b1a2 <SysBase>,d0
    46aa:	|     |   movea.l d0,a6
    46ac:	|     |   movea.l 8(sp),a1
    46b0:	|     |   jsr -690(a6)
	}
	unlinkVar (&fun -> reg);
    46b4:	|     \-> moveq #28,d0
    46b6:	|         add.l 24(sp),d0
    46ba:	|         move.l d0,-(sp)
    46bc:	|         jsr 1394c <unlinkVar>
    46c2:	|         addq.l #4,sp
	FreeVec(fun);
    46c4:	|         move.l 24(sp),4(sp)
    46ca:	|         move.l 1b1a2 <SysBase>,d0
    46d0:	|         movea.l d0,a6
    46d2:	|         movea.l 4(sp),a1
    46d6:	|         jsr -690(a6)
	fun = NULL;
    46da:	|         clr.l 24(sp)
}
    46de:	\-------> movea.l (sp)+,a6
    46e0:	          lea 16(sp),sp
    46e4:	          rts

000046e6 <freezeSubs>:

void freezeSubs () {
    46e6:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    46e8:	          move.l 1b13a <allRunningFunctions>,(sp)

	while (thisFunction) {
    46ee:	   /----- bra.s 470c <freezeSubs+0x26>
		if (thisFunction -> unfreezable) {
    46f0:	/--|----> movea.l (sp),a0
    46f2:	|  |      move.w 52(a0),d0
    46f6:	|  |  /-- bne.s 4706 <freezeSubs+0x20>
			//msgBox ("SLUDGE debugging bollocks!", "Trying to freeze an unfreezable function!");
		} else {
			thisFunction -> freezerLevel ++;
    46f8:	|  |  |   movea.l (sp),a0
    46fa:	|  |  |   move.b 56(a0),d0
    46fe:	|  |  |   addq.b #1,d0
    4700:	|  |  |   movea.l (sp),a0
    4702:	|  |  |   move.b d0,56(a0)
		}
		thisFunction = thisFunction -> next;
    4706:	|  |  \-> movea.l (sp),a0
    4708:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    470c:	|  \----> tst.l (sp)
    470e:	\-------- bne.s 46f0 <freezeSubs+0xa>
	}
}
    4710:	          nop
    4712:	          nop
    4714:	          addq.l #4,sp
    4716:	          rts

00004718 <handleInput>:

BOOL handleInput () {
    4718:	             lea -16(sp),sp
    471c:	             move.l a6,-(sp)
	//Amiga Todo: import more from orig code and adjust 

	if (! overRegion) getOverRegion ();
    471e:	             move.l 1b306 <overRegion>,d0
    4724:	         /-- bne.s 472c <handleInput+0x14>
    4726:	         |   jsr 1438c <getOverRegion>

	if (input.justMoved) {
    472c:	         \-> move.w 1b158 <input+0x4>,d0
    4732:	         /-- beq.s 4770 <handleInput+0x58>
		if (currentEvents -> moveMouseFunction) {
    4734:	         |   movea.l 1ab1c <currentEvents>,a0
    473a:	         |   move.l 16(a0),d0
    473e:	         +-- beq.s 4770 <handleInput+0x58>
			if (! startNewFunctionNum (currentEvents -> moveMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    4740:	         |   move.l 1b172 <noStack>,d1
    4746:	         |   movea.l 1ab1c <currentEvents>,a0
    474c:	         |   move.l 16(a0),d0
    4750:	         |   pea 1 <_start+0x1>
    4754:	         |   move.l d1,-(sp)
    4756:	         |   clr.l -(sp)
    4758:	         |   clr.l -(sp)
    475a:	         |   move.l d0,-(sp)
    475c:	         |   jsr 59ca <startNewFunctionNum>
    4762:	         |   lea 20(sp),sp
    4766:	         |   tst.l d0
    4768:	         +-- bne.s 4770 <handleInput+0x58>
    476a:	         |   clr.w d0
    476c:	/--------|-- bra.w 4976 <handleInput+0x25e>
		}
	}
	input.justMoved = FALSE;
    4770:	|        \-> clr.w 1b158 <input+0x4>

	if (lastRegion != overRegion && currentEvents -> focusFunction) {
    4776:	|            move.l 1b16a <lastRegion>,d1
    477c:	|            move.l 1b306 <overRegion>,d0
    4782:	|            cmp.l d1,d0
    4784:	|  /-------- beq.w 485c <handleInput+0x144>
    4788:	|  |         movea.l 1ab1c <currentEvents>,a0
    478e:	|  |         move.l 20(a0),d0
    4792:	|  +-------- beq.w 485c <handleInput+0x144>
		struct variableStack * tempStack = AllocVec( sizeof(struct variableStack), MEMF_ANY);
    4796:	|  |         moveq #12,d0
    4798:	|  |         move.l d0,16(sp)
    479c:	|  |         clr.l 12(sp)
    47a0:	|  |         move.l 1b1a2 <SysBase>,d0
    47a6:	|  |         movea.l d0,a6
    47a8:	|  |         move.l 16(sp),d0
    47ac:	|  |         move.l 12(sp),d1
    47b0:	|  |         jsr -684(a6)
    47b4:	|  |         move.l d0,8(sp)
    47b8:	|  |         move.l 8(sp),d0
    47bc:	|  |         move.l d0,4(sp)
		if(!tempStack) {
    47c0:	|  |         move.l 4(sp),d0
    47c4:	|  |     /-- bne.s 47da <handleInput+0xc2>
			KPrintF("handleInput: Cannot allocate memory for variablestack");
    47c6:	|  |     |   pea 170a2 <PutChar+0xb62>
    47cc:	|  |     |   jsr 15bf0 <KPrintF>
    47d2:	|  |     |   addq.l #4,sp
			return FALSE;
    47d4:	|  |     |   clr.w d0
    47d6:	+--|-----|-- bra.w 4976 <handleInput+0x25e>
		}
		
		initVarNew (tempStack -> thisVar);
    47da:	|  |     \-> movea.l 4(sp),a0
    47de:	|  |         clr.l (a0)
		if (overRegion) {
    47e0:	|  |         move.l 1b306 <overRegion>,d0
    47e6:	|  |  /----- beq.s 480e <handleInput+0xf6>
			setVariable (&tempStack -> thisVar, SVT_OBJTYPE, overRegion -> thisType -> objectNum);
    47e8:	|  |  |      movea.l 1b306 <overRegion>,a0
    47ee:	|  |  |      movea.l 28(a0),a0
    47f2:	|  |  |      move.l 4(a0),d1
    47f6:	|  |  |      move.l 4(sp),d0
    47fa:	|  |  |      move.l d1,-(sp)
    47fc:	|  |  |      pea 7 <_start+0x7>
    4800:	|  |  |      move.l d0,-(sp)
    4802:	|  |  |      jsr 13ff0 <setVariable>
    4808:	|  |  |      lea 12(sp),sp
    480c:	|  |  |  /-- bra.s 4824 <handleInput+0x10c>
		} else {
			setVariable (&tempStack -> thisVar, SVT_INT, 0);
    480e:	|  |  \--|-> move.l 4(sp),d0
    4812:	|  |     |   clr.l -(sp)
    4814:	|  |     |   pea 1 <_start+0x1>
    4818:	|  |     |   move.l d0,-(sp)
    481a:	|  |     |   jsr 13ff0 <setVariable>
    4820:	|  |     |   lea 12(sp),sp
		}
		tempStack -> next = NULL;
    4824:	|  |     \-> movea.l 4(sp),a0
    4828:	|  |         clr.l 8(a0)
		if (! startNewFunctionNum (currentEvents -> focusFunction, 1, NULL, &tempStack, TRUE)) return FALSE;
    482c:	|  |         movea.l 1ab1c <currentEvents>,a0
    4832:	|  |         move.l 20(a0),d0
    4836:	|  |         pea 1 <_start+0x1>
    483a:	|  |         lea 8(sp),a0
    483e:	|  |         move.l a0,-(sp)
    4840:	|  |         clr.l -(sp)
    4842:	|  |         pea 1 <_start+0x1>
    4846:	|  |         move.l d0,-(sp)
    4848:	|  |         jsr 59ca <startNewFunctionNum>
    484e:	|  |         lea 20(sp),sp
    4852:	|  |         tst.l d0
    4854:	|  +-------- bne.s 485c <handleInput+0x144>
    4856:	|  |         clr.w d0
    4858:	+--|-------- bra.w 4976 <handleInput+0x25e>
	}
	if (input.leftRelease && currentEvents -> leftMouseUpFunction)  {
    485c:	|  \-------> move.w 1b15a <input+0x6>,d0
    4862:	|        /-- beq.s 48a0 <handleInput+0x188>
    4864:	|        |   movea.l 1ab1c <currentEvents>,a0
    486a:	|        |   move.l 4(a0),d0
    486e:	|        +-- beq.s 48a0 <handleInput+0x188>
		if (! startNewFunctionNum (currentEvents -> leftMouseUpFunction, 0, NULL, noStack, TRUE)) return FALSE;
    4870:	|        |   move.l 1b172 <noStack>,d1
    4876:	|        |   movea.l 1ab1c <currentEvents>,a0
    487c:	|        |   move.l 4(a0),d0
    4880:	|        |   pea 1 <_start+0x1>
    4884:	|        |   move.l d1,-(sp)
    4886:	|        |   clr.l -(sp)
    4888:	|        |   clr.l -(sp)
    488a:	|        |   move.l d0,-(sp)
    488c:	|        |   jsr 59ca <startNewFunctionNum>
    4892:	|        |   lea 20(sp),sp
    4896:	|        |   tst.l d0
    4898:	|        +-- bne.s 48a0 <handleInput+0x188>
    489a:	|        |   clr.w d0
    489c:	+--------|-- bra.w 4976 <handleInput+0x25e>
	}
	if (input.rightRelease && currentEvents -> rightMouseUpFunction) {
    48a0:	|        \-> move.w 1b15c <input+0x8>,d0
    48a6:	|        /-- beq.s 48e4 <handleInput+0x1cc>
    48a8:	|        |   movea.l 1ab1c <currentEvents>,a0
    48ae:	|        |   move.l 12(a0),d0
    48b2:	|        +-- beq.s 48e4 <handleInput+0x1cc>
		if (! startNewFunctionNum (currentEvents -> rightMouseUpFunction, 0, NULL, noStack, TRUE)) return FALSE;
    48b4:	|        |   move.l 1b172 <noStack>,d1
    48ba:	|        |   movea.l 1ab1c <currentEvents>,a0
    48c0:	|        |   move.l 12(a0),d0
    48c4:	|        |   pea 1 <_start+0x1>
    48c8:	|        |   move.l d1,-(sp)
    48ca:	|        |   clr.l -(sp)
    48cc:	|        |   clr.l -(sp)
    48ce:	|        |   move.l d0,-(sp)
    48d0:	|        |   jsr 59ca <startNewFunctionNum>
    48d6:	|        |   lea 20(sp),sp
    48da:	|        |   tst.l d0
    48dc:	|        +-- bne.s 48e4 <handleInput+0x1cc>
    48de:	|        |   clr.w d0
    48e0:	+--------|-- bra.w 4976 <handleInput+0x25e>
	}
	if (input.leftClick && currentEvents -> leftMouseFunction)
    48e4:	|        \-> move.w 1b154 <input>,d0
    48ea:	|        /-- beq.s 4922 <handleInput+0x20a>
    48ec:	|        |   movea.l 1ab1c <currentEvents>,a0
    48f2:	|        |   move.l (a0),d0
    48f4:	|        +-- beq.s 4922 <handleInput+0x20a>
		if (! startNewFunctionNum (currentEvents -> leftMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    48f6:	|        |   move.l 1b172 <noStack>,d1
    48fc:	|        |   movea.l 1ab1c <currentEvents>,a0
    4902:	|        |   move.l (a0),d0
    4904:	|        |   pea 1 <_start+0x1>
    4908:	|        |   move.l d1,-(sp)
    490a:	|        |   clr.l -(sp)
    490c:	|        |   clr.l -(sp)
    490e:	|        |   move.l d0,-(sp)
    4910:	|        |   jsr 59ca <startNewFunctionNum>
    4916:	|        |   lea 20(sp),sp
    491a:	|        |   tst.l d0
    491c:	|        +-- bne.s 4922 <handleInput+0x20a>
    491e:	|        |   clr.w d0
    4920:	+--------|-- bra.s 4976 <handleInput+0x25e>
	if (input.rightClick && currentEvents -> rightMouseFunction) {
    4922:	|        \-> move.w 1b156 <input+0x2>,d0
    4928:	|        /-- beq.s 4964 <handleInput+0x24c>
    492a:	|        |   movea.l 1ab1c <currentEvents>,a0
    4930:	|        |   move.l 8(a0),d0
    4934:	|        +-- beq.s 4964 <handleInput+0x24c>
		if (! startNewFunctionNum (currentEvents -> rightMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    4936:	|        |   move.l 1b172 <noStack>,d1
    493c:	|        |   movea.l 1ab1c <currentEvents>,a0
    4942:	|        |   move.l 8(a0),d0
    4946:	|        |   pea 1 <_start+0x1>
    494a:	|        |   move.l d1,-(sp)
    494c:	|        |   clr.l -(sp)
    494e:	|        |   clr.l -(sp)
    4950:	|        |   move.l d0,-(sp)
    4952:	|        |   jsr 59ca <startNewFunctionNum>
    4958:	|        |   lea 20(sp),sp
    495c:	|        |   tst.l d0
    495e:	|        +-- bne.s 4964 <handleInput+0x24c>
    4960:	|        |   clr.w d0
    4962:	+--------|-- bra.s 4976 <handleInput+0x25e>
	}

	lastRegion = overRegion;
    4964:	|        \-> move.l 1b306 <overRegion>,d0
    496a:	|            move.l d0,1b16a <lastRegion>
	return runSludge ();
    4970:	|            jsr 5798 <runSludge>
}
    4976:	\----------> movea.l (sp)+,a6
    4978:	             lea 16(sp),sp
    497c:	             rts

0000497e <initSludge>:

BOOL initSludge (char * filename) {
    497e:	             lea -292(sp),sp
    4982:	             movem.l d2-d4/a2/a6,-(sp)
	int a = 0;
    4986:	             clr.l 308(sp)
	mouseCursorAnim = makeNullAnim ();
    498a:	             jsr 9cfe <makeNullAnim>
    4990:	             move.l d0,1b0aa <mouseCursorAnim>

	//Amiga: Attention. This was changed to a Nonpointer Type
	BPTR fp = openAndVerify (filename, 'G', 'E', ERROR_BAD_HEADER, &gameVersion);
    4996:	             pea 1b14c <gameVersion>
    499c:	             pea 170d8 <PutChar+0xb98>
    49a2:	             pea 45 <_start+0x45>
    49a6:	             pea 47 <_start+0x47>
    49aa:	             move.l 332(sp),-(sp)
    49ae:	             jsr 53cc <openAndVerify>
    49b4:	             lea 20(sp),sp
    49b8:	             move.l d0,288(sp)
	if (! fp) return FALSE;
    49bc:	         /-- bne.s 49c4 <initSludge+0x46>
    49be:	         |   clr.w d0
    49c0:	/--------|-- bra.w 50ec <initSludge+0x76e>
	if (FGetC (fp)) {
    49c4:	|        \-> move.l 288(sp),284(sp)
    49ca:	|            move.l 1b1aa <DOSBase>,d0
    49d0:	|            movea.l d0,a6
    49d2:	|            move.l 284(sp),d1
    49d6:	|            jsr -306(a6)
    49da:	|            move.l d0,280(sp)
    49de:	|            move.l 280(sp),d0
    49e2:	|  /-------- beq.w 4b8c <initSludge+0x20e>
		numBIFNames = get2bytes (fp);
    49e6:	|  |         move.l 288(sp),-(sp)
    49ea:	|  |         jsr 6bc <get2bytes>
    49f0:	|  |         addq.l #4,sp
    49f2:	|  |         move.l d0,1b176 <numBIFNames>
		allBIFNames = AllocVec(numBIFNames,MEMF_ANY);
    49f8:	|  |         move.l 1b176 <numBIFNames>,d0
    49fe:	|  |         move.l d0,276(sp)
    4a02:	|  |         clr.l 272(sp)
    4a06:	|  |         move.l 1b1a2 <SysBase>,d0
    4a0c:	|  |         movea.l d0,a6
    4a0e:	|  |         move.l 276(sp),d0
    4a12:	|  |         move.l 272(sp),d1
    4a16:	|  |         jsr -684(a6)
    4a1a:	|  |         move.l d0,268(sp)
    4a1e:	|  |         move.l 268(sp),d0
    4a22:	|  |         move.l d0,1b132 <allBIFNames>
		if(allBIFNames == 0) return FALSE;
    4a28:	|  |         move.l 1b132 <allBIFNames>,d0
    4a2e:	|  |     /-- bne.s 4a36 <initSludge+0xb8>
    4a30:	|  |     |   clr.w d0
    4a32:	+--|-----|-- bra.w 50ec <initSludge+0x76e>
		for (int fn = 0; fn < numBIFNames; fn ++) {
    4a36:	|  |     \-> clr.l 304(sp)
    4a3a:	|  |     /-- bra.s 4a60 <initSludge+0xe2>
			allBIFNames[fn] = (char *) readString (fp);
    4a3c:	|  |  /--|-> move.l 1b132 <allBIFNames>,d1
    4a42:	|  |  |  |   move.l 304(sp),d0
    4a46:	|  |  |  |   add.l d0,d0
    4a48:	|  |  |  |   add.l d0,d0
    4a4a:	|  |  |  |   movea.l d1,a2
    4a4c:	|  |  |  |   adda.l d0,a2
    4a4e:	|  |  |  |   move.l 288(sp),-(sp)
    4a52:	|  |  |  |   jsr b02 <readString>
    4a58:	|  |  |  |   addq.l #4,sp
    4a5a:	|  |  |  |   move.l d0,(a2)
		for (int fn = 0; fn < numBIFNames; fn ++) {
    4a5c:	|  |  |  |   addq.l #1,304(sp)
    4a60:	|  |  |  \-> move.l 1b176 <numBIFNames>,d0
    4a66:	|  |  |      cmp.l 304(sp),d0
    4a6a:	|  |  \----- bgt.s 4a3c <initSludge+0xbe>
		}
		numUserFunc = get2bytes (fp);
    4a6c:	|  |         move.l 288(sp),-(sp)
    4a70:	|  |         jsr 6bc <get2bytes>
    4a76:	|  |         addq.l #4,sp
    4a78:	|  |         move.l d0,1b182 <numUserFunc>
		allUserFunc = AllocVec(numUserFunc,MEMF_ANY);
    4a7e:	|  |         move.l 1b182 <numUserFunc>,d0
    4a84:	|  |         move.l d0,264(sp)
    4a88:	|  |         clr.l 260(sp)
    4a8c:	|  |         move.l 1b1a2 <SysBase>,d0
    4a92:	|  |         movea.l d0,a6
    4a94:	|  |         move.l 264(sp),d0
    4a98:	|  |         move.l 260(sp),d1
    4a9c:	|  |         jsr -684(a6)
    4aa0:	|  |         move.l d0,256(sp)
    4aa4:	|  |         move.l 256(sp),d0
    4aa8:	|  |         move.l d0,1b13e <allUserFunc>
		if( allUserFunc == 0) return FALSE;
    4aae:	|  |         move.l 1b13e <allUserFunc>,d0
    4ab4:	|  |     /-- bne.s 4abc <initSludge+0x13e>
    4ab6:	|  |     |   clr.w d0
    4ab8:	+--|-----|-- bra.w 50ec <initSludge+0x76e>

		for (int fn = 0; fn < numUserFunc; fn ++) {
    4abc:	|  |     \-> clr.l 300(sp)
    4ac0:	|  |     /-- bra.s 4ae6 <initSludge+0x168>
			allUserFunc[fn] =   (char *) readString (fp);
    4ac2:	|  |  /--|-> move.l 1b13e <allUserFunc>,d1
    4ac8:	|  |  |  |   move.l 300(sp),d0
    4acc:	|  |  |  |   add.l d0,d0
    4ace:	|  |  |  |   add.l d0,d0
    4ad0:	|  |  |  |   movea.l d1,a2
    4ad2:	|  |  |  |   adda.l d0,a2
    4ad4:	|  |  |  |   move.l 288(sp),-(sp)
    4ad8:	|  |  |  |   jsr b02 <readString>
    4ade:	|  |  |  |   addq.l #4,sp
    4ae0:	|  |  |  |   move.l d0,(a2)
		for (int fn = 0; fn < numUserFunc; fn ++) {
    4ae2:	|  |  |  |   addq.l #1,300(sp)
    4ae6:	|  |  |  \-> move.l 1b182 <numUserFunc>,d0
    4aec:	|  |  |      cmp.l 300(sp),d0
    4af0:	|  |  \----- bgt.s 4ac2 <initSludge+0x144>
		}
		if (gameVersion >= VERSION(1,3)) {
    4af2:	|  |         move.l 1b14c <gameVersion>,d0
    4af8:	|  |         cmpi.l #258,d0
    4afe:	|  +-------- ble.w 4b8c <initSludge+0x20e>
			numResourceNames = get2bytes (fp);
    4b02:	|  |         move.l 288(sp),-(sp)
    4b06:	|  |         jsr 6bc <get2bytes>
    4b0c:	|  |         addq.l #4,sp
    4b0e:	|  |         move.l d0,1b17e <numResourceNames>
			allResourceNames = AllocVec(sizeof(char *) * numResourceNames,MEMF_ANY);
    4b14:	|  |         move.l 1b17e <numResourceNames>,d0
    4b1a:	|  |         add.l d0,d0
    4b1c:	|  |         add.l d0,d0
    4b1e:	|  |         move.l d0,252(sp)
    4b22:	|  |         clr.l 248(sp)
    4b26:	|  |         move.l 1b1a2 <SysBase>,d0
    4b2c:	|  |         movea.l d0,a6
    4b2e:	|  |         move.l 252(sp),d0
    4b32:	|  |         move.l 248(sp),d1
    4b36:	|  |         jsr -684(a6)
    4b3a:	|  |         move.l d0,244(sp)
    4b3e:	|  |         move.l 244(sp),d0
    4b42:	|  |         move.l d0,1b136 <allResourceNames>
			if(allResourceNames == 0) return FALSE;
    4b48:	|  |         move.l 1b136 <allResourceNames>,d0
    4b4e:	|  |     /-- bne.s 4b56 <initSludge+0x1d8>
    4b50:	|  |     |   clr.w d0
    4b52:	+--|-----|-- bra.w 50ec <initSludge+0x76e>

			for (int fn = 0; fn < numResourceNames; fn ++) {
    4b56:	|  |     \-> clr.l 296(sp)
    4b5a:	|  |     /-- bra.s 4b80 <initSludge+0x202>
				allResourceNames[fn] =  (char *) readString (fp);
    4b5c:	|  |  /--|-> move.l 1b136 <allResourceNames>,d1
    4b62:	|  |  |  |   move.l 296(sp),d0
    4b66:	|  |  |  |   add.l d0,d0
    4b68:	|  |  |  |   add.l d0,d0
    4b6a:	|  |  |  |   movea.l d1,a2
    4b6c:	|  |  |  |   adda.l d0,a2
    4b6e:	|  |  |  |   move.l 288(sp),-(sp)
    4b72:	|  |  |  |   jsr b02 <readString>
    4b78:	|  |  |  |   addq.l #4,sp
    4b7a:	|  |  |  |   move.l d0,(a2)
			for (int fn = 0; fn < numResourceNames; fn ++) {
    4b7c:	|  |  |  |   addq.l #1,296(sp)
    4b80:	|  |  |  \-> move.l 1b17e <numResourceNames>,d0
    4b86:	|  |  |      cmp.l 296(sp),d0
    4b8a:	|  |  \----- bgt.s 4b5c <initSludge+0x1de>
			}
		}
	}

	input.mouseX = 129;
    4b8c:	|  \-------> move.l #129,1b15e <input+0xa>
	input.mouseY = 100;
    4b96:	|            moveq #100,d0
    4b98:	|            move.l d0,1b162 <input+0xe>
	winWidth = get2bytes (fp);
    4b9e:	|            move.l 288(sp),-(sp)
    4ba2:	|            jsr 6bc <get2bytes>
    4ba8:	|            addq.l #4,sp
    4baa:	|            move.l d0,1b0f6 <winWidth>
	winHeight = get2bytes (fp);
    4bb0:	|            move.l 288(sp),-(sp)
    4bb4:	|            jsr 6bc <get2bytes>
    4bba:	|            addq.l #4,sp
    4bbc:	|            move.l d0,1b0fa <winHeight>
	specialSettings = FGetC (fp);
    4bc2:	|            move.l 288(sp),240(sp)
    4bc8:	|            move.l 1b1aa <DOSBase>,d0
    4bce:	|            movea.l d0,a6
    4bd0:	|            move.l 240(sp),d1
    4bd4:	|            jsr -306(a6)
    4bd8:	|            move.l d0,236(sp)
    4bdc:	|            move.l 236(sp),d0
    4be0:	|            move.l d0,1b186 <specialSettings>

	desiredfps = 1000/FGetC (fp);
    4be6:	|            move.l 288(sp),232(sp)
    4bec:	|            move.l 1b1aa <DOSBase>,d0
    4bf2:	|            movea.l d0,a6
    4bf4:	|            move.l 232(sp),d1
    4bf8:	|            jsr -306(a6)
    4bfc:	|            move.l d0,228(sp)
    4c00:	|            move.l 228(sp),d0
    4c04:	|            move.l d0,-(sp)
    4c06:	|            pea 3e8 <encodeFilename+0xea>
    4c0a:	|            jsr 164a8 <__divsi3>
    4c10:	|            addq.l #8,sp
    4c12:	|            move.l d0,1ab32 <desiredfps>

	readString(fp); //Need to keep reading to stay on track. But the comented line below looks wrong.
    4c18:	|            move.l 288(sp),-(sp)
    4c1c:	|            jsr b02 <readString>
    4c22:	|            addq.l #4,sp
	//FreeVec(readString (fp));

	ULONG blocks_read = FRead( fp, &fileTime, sizeof (FILETIME), 1 ); 
    4c24:	|            move.l 288(sp),224(sp)
    4c2a:	|            move.l #110916,220(sp)
    4c32:	|            moveq #8,d1
    4c34:	|            move.l d1,216(sp)
    4c38:	|            moveq #1,d0
    4c3a:	|            move.l d0,212(sp)
    4c3e:	|            move.l 1b1aa <DOSBase>,d0
    4c44:	|            movea.l d0,a6
    4c46:	|            move.l 224(sp),d1
    4c4a:	|            move.l 220(sp),d2
    4c4e:	|            move.l 216(sp),d3
    4c52:	|            move.l 212(sp),d4
    4c56:	|            jsr -324(a6)
    4c5a:	|            move.l d0,208(sp)
    4c5e:	|            move.l 208(sp),d0
    4c62:	|            move.l d0,204(sp)
	if (blocks_read != 1) {
    4c66:	|            moveq #1,d1
    4c68:	|            cmp.l 204(sp),d1
    4c6c:	|        /-- beq.s 4c7c <initSludge+0x2fe>
		KPrintF("Reading error in initSludge.\n");
    4c6e:	|        |   pea 17111 <PutChar+0xbd1>
    4c74:	|        |   jsr 15bf0 <KPrintF>
    4c7a:	|        |   addq.l #4,sp
	}

	char * dataFol = (gameVersion >= VERSION(1,3)) ? readString(fp) : joinStrings ("", "");
    4c7c:	|        \-> move.l 1b14c <gameVersion>,d0
    4c82:	|            cmpi.l #258,d0
    4c88:	|        /-- ble.s 4c98 <initSludge+0x31a>
    4c8a:	|        |   move.l 288(sp),-(sp)
    4c8e:	|        |   jsr b02 <readString>
    4c94:	|        |   addq.l #4,sp
    4c96:	|     /--|-- bra.s 4cac <initSludge+0x32e>
    4c98:	|     |  \-> pea 1712f <PutChar+0xbef>
    4c9e:	|     |      pea 1712f <PutChar+0xbef>
    4ca4:	|     |      jsr 12c2a <joinStrings>
    4caa:	|     |      addq.l #8,sp
    4cac:	|     \----> move.l d0,200(sp)

	gameSettings.numLanguages = (gameVersion >= VERSION(1,3)) ? (FGetC (fp)) : 0;
    4cb0:	|            move.l 1b14c <gameVersion>,d0
    4cb6:	|            cmpi.l #258,d0
    4cbc:	|     /----- ble.s 4cde <initSludge+0x360>
    4cbe:	|     |      move.l 288(sp),196(sp)
    4cc4:	|     |      move.l 1b1aa <DOSBase>,d0
    4cca:	|     |      movea.l d0,a6
    4ccc:	|     |      move.l 196(sp),d1
    4cd0:	|     |      jsr -306(a6)
    4cd4:	|     |      move.l d0,192(sp)
    4cd8:	|     |      move.l 192(sp),d0
    4cdc:	|     |  /-- bra.s 4ce0 <initSludge+0x362>
    4cde:	|     \--|-> moveq #0,d0
    4ce0:	|        \-> move.l d0,1b2da <gameSettings+0x4>
	makeLanguageTable (fp);
    4ce6:	|            move.l 288(sp),-(sp)
    4cea:	|            jsr 125e0 <makeLanguageTable>
    4cf0:	|            addq.l #4,sp

	if (gameVersion >= VERSION(1,6))
    4cf2:	|            move.l 1b14c <gameVersion>,d0
    4cf8:	|            cmpi.l #261,d0
    4cfe:	|        /-- ble.s 4d4c <initSludge+0x3ce>
	{
		FGetC(fp);
    4d00:	|        |   move.l 288(sp),188(sp)
    4d06:	|        |   move.l 1b1aa <DOSBase>,d0
    4d0c:	|        |   movea.l d0,a6
    4d0e:	|        |   move.l 188(sp),d1
    4d12:	|        |   jsr -306(a6)
    4d16:	|        |   move.l d0,184(sp)
		// aaLoad
		FGetC (fp);
    4d1a:	|        |   move.l 288(sp),180(sp)
    4d20:	|        |   move.l 1b1aa <DOSBase>,d0
    4d26:	|        |   movea.l d0,a6
    4d28:	|        |   move.l 180(sp),d1
    4d2c:	|        |   jsr -306(a6)
    4d30:	|        |   move.l d0,176(sp)
		getFloat (fp);
    4d34:	|        |   move.l 288(sp),-(sp)
    4d38:	|        |   jsr 7d8 <getFloat>
    4d3e:	|        |   addq.l #4,sp
		getFloat (fp);
    4d40:	|        |   move.l 288(sp),-(sp)
    4d44:	|        |   jsr 7d8 <getFloat>
    4d4a:	|        |   addq.l #4,sp
	}

	char * checker = readString (fp);
    4d4c:	|        \-> move.l 288(sp),-(sp)
    4d50:	|            jsr b02 <readString>
    4d56:	|            addq.l #4,sp
    4d58:	|            move.l d0,172(sp)

	if (strcmp (checker, "okSoFar")) {
    4d5c:	|            pea 17130 <PutChar+0xbf0>
    4d62:	|            move.l 176(sp),-(sp)
    4d66:	|            jsr 12baa <strcmp>
    4d6c:	|            addq.l #8,sp
    4d6e:	|            tst.l d0
    4d70:	|        /-- beq.s 4d78 <initSludge+0x3fa>
		return FALSE;
    4d72:	|        |   clr.w d0
    4d74:	+--------|-- bra.w 50ec <initSludge+0x76e>
	}
	FreeVec( checker);
    4d78:	|        \-> move.l 172(sp),168(sp)
    4d7e:	|            move.l 1b1a2 <SysBase>,d0
    4d84:	|            movea.l d0,a6
    4d86:	|            movea.l 168(sp),a1
    4d8a:	|            jsr -690(a6)
	checker = NULL;
    4d8e:	|            clr.l 172(sp)

    unsigned char customIconLogo = FGetC (fp);
    4d92:	|            move.l 288(sp),164(sp)
    4d98:	|            move.l 1b1aa <DOSBase>,d0
    4d9e:	|            movea.l d0,a6
    4da0:	|            move.l 164(sp),d1
    4da4:	|            jsr -306(a6)
    4da8:	|            move.l d0,160(sp)
    4dac:	|            move.l 160(sp),d0
    4db0:	|            move.b d0,159(sp)

	if (customIconLogo & 1) {
    4db4:	|            moveq #0,d0
    4db6:	|            move.b 159(sp),d0
    4dba:	|            moveq #1,d1
    4dbc:	|            and.l d1,d0
    4dbe:	|        /-- beq.s 4e16 <initSludge+0x498>
		// There is an icon - read it!
		Write(Output(), (APTR)"initsludge:Game Icon not supported on this plattform.\n", 54);
    4dc0:	|        |   move.l 1b1aa <DOSBase>,d0
    4dc6:	|        |   movea.l d0,a6
    4dc8:	|        |   jsr -60(a6)
    4dcc:	|        |   move.l d0,38(sp)
    4dd0:	|        |   move.l 38(sp),d0
    4dd4:	|        |   move.l d0,34(sp)
    4dd8:	|        |   move.l #94520,30(sp)
    4de0:	|        |   moveq #54,d0
    4de2:	|        |   move.l d0,26(sp)
    4de6:	|        |   move.l 1b1aa <DOSBase>,d0
    4dec:	|        |   movea.l d0,a6
    4dee:	|        |   move.l 34(sp),d1
    4df2:	|        |   move.l 30(sp),d2
    4df6:	|        |   move.l 26(sp),d3
    4dfa:	|        |   jsr -48(a6)
    4dfe:	|        |   move.l d0,22(sp)
		KPrintF("initsludge: Game Icon not supported on this plattform.\n");
    4e02:	|        |   pea 1716f <PutChar+0xc2f>
    4e08:	|        |   jsr 15bf0 <KPrintF>
    4e0e:	|        |   addq.l #4,sp
		return FALSE;
    4e10:	|        |   clr.w d0
    4e12:	+--------|-- bra.w 50ec <initSludge+0x76e>
	}

	numGlobals = get2bytes (fp);
    4e16:	|        \-> move.l 288(sp),-(sp)
    4e1a:	|            jsr 6bc <get2bytes>
    4e20:	|            addq.l #4,sp
    4e22:	|            move.l d0,1b17a <numGlobals>

	globalVars = AllocVec( sizeof(struct variable) * numGlobals,MEMF_ANY);
    4e28:	|            move.l 1b17a <numGlobals>,d0
    4e2e:	|            lsl.l #3,d0
    4e30:	|            move.l d0,154(sp)
    4e34:	|            clr.l 150(sp)
    4e38:	|            move.l 1b1a2 <SysBase>,d0
    4e3e:	|            movea.l d0,a6
    4e40:	|            move.l 154(sp),d0
    4e44:	|            move.l 150(sp),d1
    4e48:	|            jsr -684(a6)
    4e4c:	|            move.l d0,146(sp)
    4e50:	|            move.l 146(sp),d0
    4e54:	|            move.l d0,1b150 <globalVars>
	if(globalVars == 0 && numGlobals > 0) {
    4e5a:	|            move.l 1b150 <globalVars>,d0
    4e60:	|        /-- bne.s 4e7e <initSludge+0x500>
    4e62:	|        |   move.l 1b17a <numGlobals>,d0
    4e68:	|        +-- ble.s 4e7e <initSludge+0x500>
		KPrintF("initsludge: Cannot allocate memory for globalvars\n");
    4e6a:	|        |   pea 171a7 <PutChar+0xc67>
    4e70:	|        |   jsr 15bf0 <KPrintF>
    4e76:	|        |   addq.l #4,sp
		return FALSE;
    4e78:	|        |   clr.w d0
    4e7a:	+--------|-- bra.w 50ec <initSludge+0x76e>
	}		 
	for (a = 0; a < numGlobals; a ++) initVarNew (globalVars[a]);
    4e7e:	|        \-> clr.l 308(sp)
    4e82:	|        /-- bra.s 4e9a <initSludge+0x51c>
    4e84:	|     /--|-> move.l 1b150 <globalVars>,d1
    4e8a:	|     |  |   move.l 308(sp),d0
    4e8e:	|     |  |   lsl.l #3,d0
    4e90:	|     |  |   movea.l d1,a0
    4e92:	|     |  |   adda.l d0,a0
    4e94:	|     |  |   clr.l (a0)
    4e96:	|     |  |   addq.l #1,308(sp)
    4e9a:	|     |  \-> move.l 1b17a <numGlobals>,d0
    4ea0:	|     |      cmp.l 308(sp),d0
    4ea4:	|     \----- bgt.s 4e84 <initSludge+0x506>

	setFileIndices (fp, gameSettings.numLanguages, 0);
    4ea6:	|            move.l 1b2da <gameSettings+0x4>,d0
    4eac:	|            clr.l -(sp)
    4eae:	|            move.l d0,-(sp)
    4eb0:	|            move.l 296(sp),-(sp)
    4eb4:	|            jsr 5e88 <setFileIndices>
    4eba:	|            lea 12(sp),sp

	char * gameNameOrig = getNumberedString(1);	
    4ebe:	|            pea 1 <_start+0x1>
    4ec2:	|            jsr 5b42 <getNumberedString>
    4ec8:	|            addq.l #4,sp
    4eca:	|            move.l d0,142(sp)
	char * gameName = encodeFilename (gameNameOrig);
    4ece:	|            move.l 142(sp),-(sp)
    4ed2:	|            jsr 2fe <encodeFilename>
    4ed8:	|            addq.l #4,sp
    4eda:	|            move.l d0,138(sp)

	FreeVec(gameNameOrig);
    4ede:	|            move.l 142(sp),134(sp)
    4ee4:	|            move.l 1b1a2 <SysBase>,d0
    4eea:	|            movea.l d0,a6
    4eec:	|            movea.l 134(sp),a1
    4ef0:	|            jsr -690(a6)

	BPTR lock = CreateDir( gameName );
    4ef4:	|            move.l 138(sp),130(sp)
    4efa:	|            move.l 1b1aa <DOSBase>,d0
    4f00:	|            movea.l d0,a6
    4f02:	|            move.l 130(sp),d1
    4f06:	|            jsr -120(a6)
    4f0a:	|            move.l d0,126(sp)
    4f0e:	|            move.l 126(sp),d0
    4f12:	|            move.l d0,292(sp)
	if(lock == 0) {
    4f16:	|        /-- bne.s 4f44 <initSludge+0x5c6>
		//Directory does already exist
		lock = Lock(gameName, ACCESS_READ);
    4f18:	|        |   move.l 138(sp),122(sp)
    4f1e:	|        |   moveq #-2,d1
    4f20:	|        |   move.l d1,118(sp)
    4f24:	|        |   move.l 1b1aa <DOSBase>,d0
    4f2a:	|        |   movea.l d0,a6
    4f2c:	|        |   move.l 122(sp),d1
    4f30:	|        |   move.l 118(sp),d2
    4f34:	|        |   jsr -84(a6)
    4f38:	|        |   move.l d0,114(sp)
    4f3c:	|        |   move.l 114(sp),d0
    4f40:	|        |   move.l d0,292(sp)
	}

	if (!CurrentDir(lock)) {
    4f44:	|        \-> move.l 292(sp),110(sp)
    4f4a:	|            move.l 1b1aa <DOSBase>,d0
    4f50:	|            movea.l d0,a6
    4f52:	|            move.l 110(sp),d1
    4f56:	|            jsr -126(a6)
    4f5a:	|            move.l d0,106(sp)
    4f5e:	|            move.l 106(sp),d0
    4f62:	|        /-- bne.s 4fbe <initSludge+0x640>
		KPrintF("initsludge: Failed changing to directory %s\n", gameName);
    4f64:	|        |   move.l 138(sp),-(sp)
    4f68:	|        |   pea 171da <PutChar+0xc9a>
    4f6e:	|        |   jsr 15bf0 <KPrintF>
    4f74:	|        |   addq.l #8,sp
		Write(Output(), (APTR)"initsludge:Failed changing to directory\n", 40);
    4f76:	|        |   move.l 1b1aa <DOSBase>,d0
    4f7c:	|        |   movea.l d0,a6
    4f7e:	|        |   jsr -60(a6)
    4f82:	|        |   move.l d0,58(sp)
    4f86:	|        |   move.l 58(sp),d0
    4f8a:	|        |   move.l d0,54(sp)
    4f8e:	|        |   move.l #94727,50(sp)
    4f96:	|        |   moveq #40,d0
    4f98:	|        |   move.l d0,46(sp)
    4f9c:	|        |   move.l 1b1aa <DOSBase>,d0
    4fa2:	|        |   movea.l d0,a6
    4fa4:	|        |   move.l 54(sp),d1
    4fa8:	|        |   move.l 50(sp),d2
    4fac:	|        |   move.l 46(sp),d3
    4fb0:	|        |   jsr -48(a6)
    4fb4:	|        |   move.l d0,42(sp)
		return FALSE;
    4fb8:	|        |   clr.w d0
    4fba:	+--------|-- bra.w 50ec <initSludge+0x76e>
	}

	FreeVec(gameName);
    4fbe:	|        \-> move.l 138(sp),102(sp)
    4fc4:	|            move.l 1b1a2 <SysBase>,d0
    4fca:	|            movea.l d0,a6
    4fcc:	|            movea.l 102(sp),a1
    4fd0:	|            jsr -690(a6)

	readIniFile (filename);
    4fd4:	|            move.l 316(sp),-(sp)
    4fd8:	|            jsr 12714 <readIniFile>
    4fde:	|            addq.l #4,sp

	// Now set file indices properly to the chosen language.
	languageNum = getLanguageForFileB ();
    4fe0:	|            jsr 124e6 <getLanguageForFileB>
    4fe6:	|            move.l d0,1ab20 <languageNum>
	if (languageNum < 0) KPrintF("Can't find the translation data specified!");
    4fec:	|            move.l 1ab20 <languageNum>,d0
    4ff2:	|        /-- bpl.s 5002 <initSludge+0x684>
    4ff4:	|        |   pea 17230 <PutChar+0xcf0>
    4ffa:	|        |   jsr 15bf0 <KPrintF>
    5000:	|        |   addq.l #4,sp
	setFileIndices (NULL, gameSettings.numLanguages, languageNum);
    5002:	|        \-> move.l 1ab20 <languageNum>,d0
    5008:	|            move.l d0,d1
    500a:	|            move.l 1b2da <gameSettings+0x4>,d0
    5010:	|            move.l d1,-(sp)
    5012:	|            move.l d0,-(sp)
    5014:	|            clr.l -(sp)
    5016:	|            jsr 5e88 <setFileIndices>
    501c:	|            lea 12(sp),sp

	if (dataFol[0]) {
    5020:	|            movea.l 200(sp),a0
    5024:	|            move.b (a0),d0
    5026:	|     /----- beq.w 50d0 <initSludge+0x752>
		char *dataFolder = encodeFilename(dataFol);
    502a:	|     |      move.l 200(sp),-(sp)
    502e:	|     |      jsr 2fe <encodeFilename>
    5034:	|     |      addq.l #4,sp
    5036:	|     |      move.l d0,98(sp)
		lock = CreateDir( dataFolder );
    503a:	|     |      move.l 98(sp),94(sp)
    5040:	|     |      move.l 1b1aa <DOSBase>,d0
    5046:	|     |      movea.l d0,a6
    5048:	|     |      move.l 94(sp),d1
    504c:	|     |      jsr -120(a6)
    5050:	|     |      move.l d0,90(sp)
    5054:	|     |      move.l 90(sp),d0
    5058:	|     |      move.l d0,292(sp)
		if(lock == 0) {
    505c:	|     |  /-- bne.s 508a <initSludge+0x70c>
			//Directory does already exist
			lock = Lock(dataFolder, ACCESS_READ);		
    505e:	|     |  |   move.l 98(sp),86(sp)
    5064:	|     |  |   moveq #-2,d1
    5066:	|     |  |   move.l d1,82(sp)
    506a:	|     |  |   move.l 1b1aa <DOSBase>,d0
    5070:	|     |  |   movea.l d0,a6
    5072:	|     |  |   move.l 86(sp),d1
    5076:	|     |  |   move.l 82(sp),d2
    507a:	|     |  |   jsr -84(a6)
    507e:	|     |  |   move.l d0,78(sp)
    5082:	|     |  |   move.l 78(sp),d0
    5086:	|     |  |   move.l d0,292(sp)
		}


		if (!CurrentDir(lock)) {
    508a:	|     |  \-> move.l 292(sp),74(sp)
    5090:	|     |      move.l 1b1aa <DOSBase>,d0
    5096:	|     |      movea.l d0,a6
    5098:	|     |      move.l 74(sp),d1
    509c:	|     |      jsr -126(a6)
    50a0:	|     |      move.l d0,70(sp)
    50a4:	|     |      move.l 70(sp),d0
    50a8:	|     |  /-- bne.s 50ba <initSludge+0x73c>
			(Output(), (APTR)"initsludge:This game's data folder is inaccessible!\n", 52);
    50aa:	|     |  |   move.l 1b1aa <DOSBase>,d0
    50b0:	|     |  |   movea.l d0,a6
    50b2:	|     |  |   jsr -60(a6)
    50b6:	|     |  |   move.l d0,66(sp)
		}
		FreeVec(dataFolder);
    50ba:	|     |  \-> move.l 98(sp),62(sp)
    50c0:	|     |      move.l 1b1a2 <SysBase>,d0
    50c6:	|     |      movea.l d0,a6
    50c8:	|     |      movea.l 62(sp),a1
    50cc:	|     |      jsr -690(a6)
	}

 	positionStatus (10, winHeight - 15);
    50d0:	|     \----> movea.l 1b0fa <winHeight>,a0
    50d6:	|            lea -15(a0),a0
    50da:	|            move.l a0,d0
    50dc:	|            move.l d0,-(sp)
    50de:	|            pea a <_start+0xa>
    50e2:	|            jsr 68ba <positionStatus>
    50e8:	|            addq.l #8,sp

	return TRUE;
    50ea:	|            moveq #1,d0
}
    50ec:	\----------> movem.l (sp)+,d2-d4/a2/a6
    50f0:	             lea 292(sp),sp
    50f4:	             rts

000050f6 <killSpeechTimers>:

void killSpeechTimers () {
    50f6:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    50f8:	          move.l 1b13a <allRunningFunctions>,(sp)

	while (thisFunction) {
    50fe:	   /----- bra.s 512a <killSpeechTimers+0x34>
		if (thisFunction -> freezerLevel == 0 && thisFunction -> isSpeech && thisFunction -> timeLeft) {
    5100:	/--|----> movea.l (sp),a0
    5102:	|  |      move.b 56(a0),d0
    5106:	|  |  /-- bne.s 5124 <killSpeechTimers+0x2e>
    5108:	|  |  |   movea.l (sp),a0
    510a:	|  |  |   move.w 50(a0),d0
    510e:	|  |  +-- beq.s 5124 <killSpeechTimers+0x2e>
    5110:	|  |  |   movea.l (sp),a0
    5112:	|  |  |   move.l 12(a0),d0
    5116:	|  |  +-- beq.s 5124 <killSpeechTimers+0x2e>
			thisFunction -> timeLeft = 0;
    5118:	|  |  |   movea.l (sp),a0
    511a:	|  |  |   clr.l 12(a0)
			thisFunction -> isSpeech = FALSE;
    511e:	|  |  |   movea.l (sp),a0
    5120:	|  |  |   clr.w 50(a0)
		}
		thisFunction = thisFunction -> next;
    5124:	|  |  \-> movea.l (sp),a0
    5126:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    512a:	|  \----> tst.l (sp)
    512c:	\-------- bne.s 5100 <killSpeechTimers+0xa>
	}

	killAllSpeech ();
    512e:	          jsr 6df8 <killAllSpeech>
}
    5134:	          nop
    5136:	          addq.l #4,sp
    5138:	          rts

0000513a <loadFunctionCode>:

BOOL loadFunctionCode (struct loadedFunction * newFunc) {
    513a:	             lea -52(sp),sp
    513e:	             move.l a6,-(sp)
	unsigned int numLines, numLinesRead;
	int a;

	if (! openSubSlice (newFunc -> originalNumber)) return FALSE;
    5140:	             movea.l 60(sp),a0
    5144:	             move.l (a0),d0
    5146:	             move.l d0,-(sp)
    5148:	             jsr 5dc8 <openSubSlice>
    514e:	             addq.l #4,sp
    5150:	             tst.w d0
    5152:	         /-- bne.s 515a <loadFunctionCode+0x20>
    5154:	         |   clr.w d0
    5156:	/--------|-- bra.w 5324 <loadFunctionCode+0x1ea>
	

	newFunc-> unfreezable	= FGetC (bigDataFile);
    515a:	|        \-> move.l 1b18a <bigDataFile>,44(sp)
    5162:	|            move.l 1b1aa <DOSBase>,d0
    5168:	|            movea.l d0,a6
    516a:	|            move.l 44(sp),d1
    516e:	|            jsr -306(a6)
    5172:	|            move.l d0,40(sp)
    5176:	|            move.l 40(sp),d0
    517a:	|            move.l d0,d0
    517c:	|            movea.l 60(sp),a0
    5180:	|            move.w d0,52(a0)
	numLines				= get2bytes (bigDataFile);
    5184:	|            move.l 1b18a <bigDataFile>,d0
    518a:	|            move.l d0,-(sp)
    518c:	|            jsr 6bc <get2bytes>
    5192:	|            addq.l #4,sp
    5194:	|            move.l d0,36(sp)
	newFunc -> numArgs		= get2bytes (bigDataFile);
    5198:	|            move.l 1b18a <bigDataFile>,d0
    519e:	|            move.l d0,-(sp)
    51a0:	|            jsr 6bc <get2bytes>
    51a6:	|            addq.l #4,sp
    51a8:	|            movea.l 60(sp),a0
    51ac:	|            move.l d0,16(a0)
	newFunc -> numLocals	= get2bytes (bigDataFile);
    51b0:	|            move.l 1b18a <bigDataFile>,d0
    51b6:	|            move.l d0,-(sp)
    51b8:	|            jsr 6bc <get2bytes>
    51be:	|            addq.l #4,sp
    51c0:	|            movea.l 60(sp),a0
    51c4:	|            move.l d0,8(a0)
	newFunc -> compiledLines = AllocVec( sizeof(struct lineOfCode) * numLines,MEMF_ANY);
    51c8:	|            move.l 36(sp),d0
    51cc:	|            lsl.l #3,d0
    51ce:	|            move.l d0,32(sp)
    51d2:	|            clr.l 28(sp)
    51d6:	|            move.l 1b1a2 <SysBase>,d0
    51dc:	|            movea.l d0,a6
    51de:	|            move.l 32(sp),d0
    51e2:	|            move.l 28(sp),d1
    51e6:	|            jsr -684(a6)
    51ea:	|            move.l d0,24(sp)
    51ee:	|            move.l 24(sp),d0
    51f2:	|            movea.l 60(sp),a0
    51f6:	|            move.l d0,4(a0)
	if (! newFunc -> compiledLines) {
    51fa:	|            movea.l 60(sp),a0
    51fe:	|            move.l 4(a0),d0
    5202:	|        /-- bne.s 5218 <loadFunctionCode+0xde>
		KPrintF("loadFunctionCode: cannot allocate memory");
    5204:	|        |   pea 1725b <PutChar+0xd1b>
    520a:	|        |   jsr 15bf0 <KPrintF>
    5210:	|        |   addq.l #4,sp
		return FALSE;
    5212:	|        |   clr.w d0
    5214:	+--------|-- bra.w 5324 <loadFunctionCode+0x1ea>
	}

	for (numLinesRead = 0; numLinesRead < numLines; numLinesRead ++) {
    5218:	|        \-> clr.l 52(sp)
    521c:	|        /-- bra.s 527e <loadFunctionCode+0x144>
		newFunc -> compiledLines[numLinesRead].theCommand = (enum sludgeCommand) FGetC(bigDataFile);
    521e:	|     /--|-> move.l 1b18a <bigDataFile>,8(sp)
    5226:	|     |  |   move.l 1b1aa <DOSBase>,d0
    522c:	|     |  |   movea.l d0,a6
    522e:	|     |  |   move.l 8(sp),d1
    5232:	|     |  |   jsr -306(a6)
    5236:	|     |  |   move.l d0,4(sp)
    523a:	|     |  |   move.l 4(sp),d1
    523e:	|     |  |   movea.l 60(sp),a0
    5242:	|     |  |   movea.l 4(a0),a0
    5246:	|     |  |   move.l 52(sp),d0
    524a:	|     |  |   lsl.l #3,d0
    524c:	|     |  |   adda.l d0,a0
    524e:	|     |  |   move.l d1,d0
    5250:	|     |  |   move.l d0,(a0)
		newFunc -> compiledLines[numLinesRead].param = get2bytes (bigDataFile);
    5252:	|     |  |   move.l 1b18a <bigDataFile>,d0
    5258:	|     |  |   move.l d0,-(sp)
    525a:	|     |  |   jsr 6bc <get2bytes>
    5260:	|     |  |   addq.l #4,sp
    5262:	|     |  |   move.l d0,d1
    5264:	|     |  |   movea.l 60(sp),a0
    5268:	|     |  |   movea.l 4(a0),a0
    526c:	|     |  |   move.l 52(sp),d0
    5270:	|     |  |   lsl.l #3,d0
    5272:	|     |  |   adda.l d0,a0
    5274:	|     |  |   move.l d1,d0
    5276:	|     |  |   move.l d0,4(a0)
	for (numLinesRead = 0; numLinesRead < numLines; numLinesRead ++) {
    527a:	|     |  |   addq.l #1,52(sp)
    527e:	|     |  \-> move.l 52(sp),d0
    5282:	|     |      cmp.l 36(sp),d0
    5286:	|     \----- bcs.s 521e <loadFunctionCode+0xe4>
	}

	finishAccess ();
    5288:	|            jsr 5b38 <finishAccess>

	// Now we need to reserve memory for the local variables
	if(newFunc->numLocals > 0) {
    528e:	|            movea.l 60(sp),a0
    5292:	|            move.l 8(a0),d0
    5296:	|  /-------- ble.w 531a <loadFunctionCode+0x1e0>
		newFunc -> localVars = AllocVec( sizeof(struct variable) * newFunc->numLocals,MEMF_ANY);
    529a:	|  |         movea.l 60(sp),a0
    529e:	|  |         move.l 8(a0),d0
    52a2:	|  |         lsl.l #3,d0
    52a4:	|  |         move.l d0,20(sp)
    52a8:	|  |         clr.l 16(sp)
    52ac:	|  |         move.l 1b1a2 <SysBase>,d0
    52b2:	|  |         movea.l d0,a6
    52b4:	|  |         move.l 20(sp),d0
    52b8:	|  |         move.l 16(sp),d1
    52bc:	|  |         jsr -684(a6)
    52c0:	|  |         move.l d0,12(sp)
    52c4:	|  |         move.l 12(sp),d0
    52c8:	|  |         movea.l 60(sp),a0
    52cc:	|  |         move.l d0,20(a0)
		if (!newFunc -> localVars) {
    52d0:	|  |         movea.l 60(sp),a0
    52d4:	|  |         move.l 20(a0),d0
    52d8:	|  |     /-- bne.s 52ec <loadFunctionCode+0x1b2>
			KPrintF("loadFunctionCode: cannot allocate memory");
    52da:	|  |     |   pea 1725b <PutChar+0xd1b>
    52e0:	|  |     |   jsr 15bf0 <KPrintF>
    52e6:	|  |     |   addq.l #4,sp
			return FALSE;
    52e8:	|  |     |   clr.w d0
    52ea:	+--|-----|-- bra.s 5324 <loadFunctionCode+0x1ea>
		}

		for (a = 0; a < newFunc -> numLocals; a ++) {
    52ec:	|  |     \-> clr.l 48(sp)
    52f0:	|  |     /-- bra.s 530a <loadFunctionCode+0x1d0>
			initVarNew (newFunc -> localVars[a]);
    52f2:	|  |  /--|-> movea.l 60(sp),a0
    52f6:	|  |  |  |   move.l 20(a0),d1
    52fa:	|  |  |  |   move.l 48(sp),d0
    52fe:	|  |  |  |   lsl.l #3,d0
    5300:	|  |  |  |   movea.l d1,a0
    5302:	|  |  |  |   adda.l d0,a0
    5304:	|  |  |  |   clr.l (a0)
		for (a = 0; a < newFunc -> numLocals; a ++) {
    5306:	|  |  |  |   addq.l #1,48(sp)
    530a:	|  |  |  \-> movea.l 60(sp),a0
    530e:	|  |  |      move.l 8(a0),d0
    5312:	|  |  |      cmp.l 48(sp),d0
    5316:	|  |  \----- bgt.s 52f2 <loadFunctionCode+0x1b8>
    5318:	|  |     /-- bra.s 5322 <loadFunctionCode+0x1e8>
		}
	} else
	{
		newFunc->numLocals = NULL;
    531a:	|  \-----|-> movea.l 60(sp),a0
    531e:	|        |   clr.l 8(a0)
	}
	return TRUE;
    5322:	|        \-> moveq #1,d0
}
    5324:	\----------> movea.l (sp)+,a6
    5326:	             lea 52(sp),sp
    532a:	             rts

0000532c <loadHandlers>:

void loadHandlers (BPTR fp) {
    532c:	move.l a2,-(sp)
	currentEvents -> leftMouseFunction		= get2bytes (fp);
    532e:	movea.l 1ab1c <currentEvents>,a2
    5334:	move.l 8(sp),-(sp)
    5338:	jsr 6bc <get2bytes>
    533e:	addq.l #4,sp
    5340:	move.l d0,(a2)
	currentEvents -> leftMouseUpFunction	= get2bytes (fp);
    5342:	movea.l 1ab1c <currentEvents>,a2
    5348:	move.l 8(sp),-(sp)
    534c:	jsr 6bc <get2bytes>
    5352:	addq.l #4,sp
    5354:	move.l d0,4(a2)
	currentEvents -> rightMouseFunction		= get2bytes (fp);
    5358:	movea.l 1ab1c <currentEvents>,a2
    535e:	move.l 8(sp),-(sp)
    5362:	jsr 6bc <get2bytes>
    5368:	addq.l #4,sp
    536a:	move.l d0,8(a2)
	currentEvents -> rightMouseUpFunction	= get2bytes (fp);
    536e:	movea.l 1ab1c <currentEvents>,a2
    5374:	move.l 8(sp),-(sp)
    5378:	jsr 6bc <get2bytes>
    537e:	addq.l #4,sp
    5380:	move.l d0,12(a2)
	currentEvents -> moveMouseFunction		= get2bytes (fp);
    5384:	movea.l 1ab1c <currentEvents>,a2
    538a:	move.l 8(sp),-(sp)
    538e:	jsr 6bc <get2bytes>
    5394:	addq.l #4,sp
    5396:	move.l d0,16(a2)
	currentEvents -> focusFunction			= get2bytes (fp);
    539a:	movea.l 1ab1c <currentEvents>,a2
    53a0:	move.l 8(sp),-(sp)
    53a4:	jsr 6bc <get2bytes>
    53aa:	addq.l #4,sp
    53ac:	move.l d0,20(a2)
	currentEvents -> spaceFunction			= get2bytes (fp);
    53b0:	movea.l 1ab1c <currentEvents>,a2
    53b6:	move.l 8(sp),-(sp)
    53ba:	jsr 6bc <get2bytes>
    53c0:	addq.l #4,sp
    53c2:	move.l d0,24(a2)
}
    53c6:	nop
    53c8:	movea.l (sp)+,a2
    53ca:	rts

000053cc <openAndVerify>:

BPTR openAndVerify (char * filename, char extra1, char extra2, const char * er, int *fileVersion) {
    53cc:	       lea -312(sp),sp
    53d0:	       movem.l d2-d3/a6,-(sp)
    53d4:	       move.l 332(sp),d1
    53d8:	       move.l 336(sp),d0
    53dc:	       move.b d1,d1
    53de:	       move.b d1,16(sp)
    53e2:	       move.b d0,d0
    53e4:	       move.b d0,14(sp)
	BPTR fp = Open(filename,MODE_OLDFILE);
    53e8:	       move.l 328(sp),318(sp)
    53ee:	       move.l #1005,314(sp)
    53f6:	       move.l 1b1aa <DOSBase>,d0
    53fc:	       movea.l d0,a6
    53fe:	       move.l 318(sp),d1
    5402:	       move.l 314(sp),d2
    5406:	       jsr -30(a6)
    540a:	       move.l d0,310(sp)
    540e:	       move.l 310(sp),d0
    5412:	       move.l d0,306(sp)

	if (! fp) {
    5416:	   /-- bne.s 5472 <openAndVerify+0xa6>
		Write(Output(), (APTR)"openAndVerify: Can't open file\n", 31);
    5418:	   |   move.l 1b1aa <DOSBase>,d0
    541e:	   |   movea.l d0,a6
    5420:	   |   jsr -60(a6)
    5424:	   |   move.l d0,154(sp)
    5428:	   |   move.l 154(sp),d0
    542c:	   |   move.l d0,150(sp)
    5430:	   |   move.l #94852,146(sp)
    5438:	   |   moveq #31,d0
    543a:	   |   move.l d0,142(sp)
    543e:	   |   move.l 1b1aa <DOSBase>,d0
    5444:	   |   movea.l d0,a6
    5446:	   |   move.l 150(sp),d1
    544a:	   |   move.l 146(sp),d2
    544e:	   |   move.l 142(sp),d3
    5452:	   |   jsr -48(a6)
    5456:	   |   move.l d0,138(sp)
		KPrintF("openAndVerify: Can't open file", filename);
    545a:	   |   move.l 328(sp),-(sp)
    545e:	   |   pea 172a4 <PutChar+0xd64>
    5464:	   |   jsr 15bf0 <KPrintF>
    546a:	   |   addq.l #8,sp
		return NULL;
    546c:	   |   moveq #0,d0
    546e:	/--|-- bra.w 5732 <openAndVerify+0x366>
	}
	BOOL headerBad = FALSE;
    5472:	|  \-> clr.w 322(sp)
	if (FGetC (fp) != 'S') headerBad = TRUE;
    5476:	|      move.l 306(sp),302(sp)
    547c:	|      move.l 1b1aa <DOSBase>,d0
    5482:	|      movea.l d0,a6
    5484:	|      move.l 302(sp),d1
    5488:	|      jsr -306(a6)
    548c:	|      move.l d0,298(sp)
    5490:	|      move.l 298(sp),d0
    5494:	|      moveq #83,d1
    5496:	|      cmp.l d0,d1
    5498:	|  /-- beq.s 54a0 <openAndVerify+0xd4>
    549a:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'L') headerBad = TRUE;
    54a0:	|  \-> move.l 306(sp),294(sp)
    54a6:	|      move.l 1b1aa <DOSBase>,d0
    54ac:	|      movea.l d0,a6
    54ae:	|      move.l 294(sp),d1
    54b2:	|      jsr -306(a6)
    54b6:	|      move.l d0,290(sp)
    54ba:	|      move.l 290(sp),d0
    54be:	|      moveq #76,d1
    54c0:	|      cmp.l d0,d1
    54c2:	|  /-- beq.s 54ca <openAndVerify+0xfe>
    54c4:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'U') headerBad = TRUE;
    54ca:	|  \-> move.l 306(sp),286(sp)
    54d0:	|      move.l 1b1aa <DOSBase>,d0
    54d6:	|      movea.l d0,a6
    54d8:	|      move.l 286(sp),d1
    54dc:	|      jsr -306(a6)
    54e0:	|      move.l d0,282(sp)
    54e4:	|      move.l 282(sp),d0
    54e8:	|      moveq #85,d1
    54ea:	|      cmp.l d0,d1
    54ec:	|  /-- beq.s 54f4 <openAndVerify+0x128>
    54ee:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'D') headerBad = TRUE;
    54f4:	|  \-> move.l 306(sp),278(sp)
    54fa:	|      move.l 1b1aa <DOSBase>,d0
    5500:	|      movea.l d0,a6
    5502:	|      move.l 278(sp),d1
    5506:	|      jsr -306(a6)
    550a:	|      move.l d0,274(sp)
    550e:	|      move.l 274(sp),d0
    5512:	|      moveq #68,d1
    5514:	|      cmp.l d0,d1
    5516:	|  /-- beq.s 551e <openAndVerify+0x152>
    5518:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != extra1) headerBad = TRUE;
    551e:	|  \-> move.l 306(sp),270(sp)
    5524:	|      move.l 1b1aa <DOSBase>,d0
    552a:	|      movea.l d0,a6
    552c:	|      move.l 270(sp),d1
    5530:	|      jsr -306(a6)
    5534:	|      move.l d0,266(sp)
    5538:	|      move.l 266(sp),d1
    553c:	|      move.b 16(sp),d0
    5540:	|      ext.w d0
    5542:	|      movea.w d0,a0
    5544:	|      cmpa.l d1,a0
    5546:	|  /-- beq.s 554e <openAndVerify+0x182>
    5548:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != extra2) headerBad = TRUE;
    554e:	|  \-> move.l 306(sp),262(sp)
    5554:	|      move.l 1b1aa <DOSBase>,d0
    555a:	|      movea.l d0,a6
    555c:	|      move.l 262(sp),d1
    5560:	|      jsr -306(a6)
    5564:	|      move.l d0,258(sp)
    5568:	|      move.l 258(sp),d1
    556c:	|      move.b 14(sp),d0
    5570:	|      ext.w d0
    5572:	|      movea.w d0,a0
    5574:	|      cmpa.l d1,a0
    5576:	|  /-- beq.s 557e <openAndVerify+0x1b2>
    5578:	|  |   move.w #1,322(sp)
	if (headerBad) {
    557e:	|  \-> tst.w 322(sp)
    5582:	|  /-- beq.s 55da <openAndVerify+0x20e>
		Write(Output(), (APTR)"openAndVerify: Bad Header\n", 31);
    5584:	|  |   move.l 1b1aa <DOSBase>,d0
    558a:	|  |   movea.l d0,a6
    558c:	|  |   jsr -60(a6)
    5590:	|  |   move.l d0,174(sp)
    5594:	|  |   move.l 174(sp),d0
    5598:	|  |   move.l d0,170(sp)
    559c:	|  |   move.l #94915,166(sp)
    55a4:	|  |   moveq #31,d0
    55a6:	|  |   move.l d0,162(sp)
    55aa:	|  |   move.l 1b1aa <DOSBase>,d0
    55b0:	|  |   movea.l d0,a6
    55b2:	|  |   move.l 170(sp),d1
    55b6:	|  |   move.l 166(sp),d2
    55ba:	|  |   move.l 162(sp),d3
    55be:	|  |   jsr -48(a6)
    55c2:	|  |   move.l d0,158(sp)
		KPrintF("openAndVerify: Bad Header\n");
    55c6:	|  |   pea 172c3 <PutChar+0xd83>
    55cc:	|  |   jsr 15bf0 <KPrintF>
    55d2:	|  |   addq.l #4,sp
		return NULL;
    55d4:	|  |   moveq #0,d0
    55d6:	+--|-- bra.w 5732 <openAndVerify+0x366>
	}
	FGetC (fp);
    55da:	|  \-> move.l 306(sp),254(sp)
    55e0:	|      move.l 1b1aa <DOSBase>,d0
    55e6:	|      movea.l d0,a6
    55e8:	|      move.l 254(sp),d1
    55ec:	|      jsr -306(a6)
    55f0:	|      move.l d0,250(sp)
	while (FGetC(fp)) {;}
    55f4:	|      nop
    55f6:	|  /-> move.l 306(sp),246(sp)
    55fc:	|  |   move.l 1b1aa <DOSBase>,d0
    5602:	|  |   movea.l d0,a6
    5604:	|  |   move.l 246(sp),d1
    5608:	|  |   jsr -306(a6)
    560c:	|  |   move.l d0,242(sp)
    5610:	|  |   move.l 242(sp),d0
    5614:	|  \-- bne.s 55f6 <openAndVerify+0x22a>

	int majVersion = FGetC (fp);
    5616:	|      move.l 306(sp),238(sp)
    561c:	|      move.l 1b1aa <DOSBase>,d0
    5622:	|      movea.l d0,a6
    5624:	|      move.l 238(sp),d1
    5628:	|      jsr -306(a6)
    562c:	|      move.l d0,234(sp)
    5630:	|      move.l 234(sp),d0
    5634:	|      move.l d0,230(sp)
	int minVersion = FGetC (fp);
    5638:	|      move.l 306(sp),226(sp)
    563e:	|      move.l 1b1aa <DOSBase>,d0
    5644:	|      movea.l d0,a6
    5646:	|      move.l 226(sp),d1
    564a:	|      jsr -306(a6)
    564e:	|      move.l d0,222(sp)
    5652:	|      move.l 222(sp),d0
    5656:	|      move.l d0,218(sp)
	*fileVersion = majVersion * 256 + minVersion;
    565a:	|      move.l 230(sp),d0
    565e:	|      lsl.l #8,d0
    5660:	|      add.l 218(sp),d0
    5664:	|      movea.l 344(sp),a0
    5668:	|      move.l d0,(a0)

	char txtVer[120];

	if (*fileVersion > WHOLE_VERSION) {
    566a:	|      movea.l 344(sp),a0
    566e:	|      move.l (a0),d0
    5670:	|      cmpi.l #514,d0
    5676:	|  /-- ble.s 56cc <openAndVerify+0x300>
		//sprintf (txtVer, ERROR_VERSION_TOO_LOW_2, majVersion, minVersion);
		Write(Output(), (APTR)ERROR_VERSION_TOO_LOW_1, 100);
    5678:	|  |   move.l 1b1aa <DOSBase>,d0
    567e:	|  |   movea.l d0,a6
    5680:	|  |   jsr -60(a6)
    5684:	|  |   move.l d0,194(sp)
    5688:	|  |   move.l 194(sp),d0
    568c:	|  |   move.l d0,190(sp)
    5690:	|  |   move.l #94942,186(sp)
    5698:	|  |   moveq #100,d1
    569a:	|  |   move.l d1,182(sp)
    569e:	|  |   move.l 1b1aa <DOSBase>,d0
    56a4:	|  |   movea.l d0,a6
    56a6:	|  |   move.l 190(sp),d1
    56aa:	|  |   move.l 186(sp),d2
    56ae:	|  |   move.l 182(sp),d3
    56b2:	|  |   jsr -48(a6)
    56b6:	|  |   move.l d0,178(sp)
		KPrintF(ERROR_VERSION_TOO_LOW_1);
    56ba:	|  |   pea 172de <PutChar+0xd9e>
    56c0:	|  |   jsr 15bf0 <KPrintF>
    56c6:	|  |   addq.l #4,sp
		return NULL;
    56c8:	|  |   moveq #0,d0
    56ca:	+--|-- bra.s 5732 <openAndVerify+0x366>
	} else if (*fileVersion < MINIM_VERSION) {
    56cc:	|  \-> movea.l 344(sp),a0
    56d0:	|      move.l (a0),d0
    56d2:	|      cmpi.l #257,d0
    56d8:	|  /-- bgt.s 572e <openAndVerify+0x362>
		Write(Output(), (APTR)ERROR_VERSION_TOO_HIGH_1, 100);
    56da:	|  |   move.l 1b1aa <DOSBase>,d0
    56e0:	|  |   movea.l d0,a6
    56e2:	|  |   jsr -60(a6)
    56e6:	|  |   move.l d0,214(sp)
    56ea:	|  |   move.l 214(sp),d0
    56ee:	|  |   move.l d0,210(sp)
    56f2:	|  |   move.l #95011,206(sp)
    56fa:	|  |   moveq #100,d0
    56fc:	|  |   move.l d0,202(sp)
    5700:	|  |   move.l 1b1aa <DOSBase>,d0
    5706:	|  |   movea.l d0,a6
    5708:	|  |   move.l 210(sp),d1
    570c:	|  |   move.l 206(sp),d2
    5710:	|  |   move.l 202(sp),d3
    5714:	|  |   jsr -48(a6)
    5718:	|  |   move.l d0,198(sp)
		KPrintF(ERROR_VERSION_TOO_HIGH_1);
    571c:	|  |   pea 17323 <PutChar+0xde3>
    5722:	|  |   jsr 15bf0 <KPrintF>
    5728:	|  |   addq.l #4,sp
		return NULL;
    572a:	|  |   moveq #0,d0
    572c:	+--|-- bra.s 5732 <openAndVerify+0x366>
	}
	return fp;
    572e:	|  \-> move.l 306(sp),d0
}
    5732:	\----> movem.l (sp)+,d2-d3/a6
    5736:	       lea 312(sp),sp
    573a:	       rts

0000573c <pauseFunction>:

void pauseFunction (struct loadedFunction * fun) {
    573c:	          subq.l #4,sp
	struct loadedFunction * * huntAndDestroy = & allRunningFunctions;
    573e:	          move.l #110906,(sp)
	while (* huntAndDestroy) {
    5744:	   /----- bra.s 5770 <pauseFunction+0x34>
		if (fun == * huntAndDestroy) {
    5746:	/--|----> movea.l (sp),a0
    5748:	|  |      move.l (a0),d0
    574a:	|  |      cmp.l 8(sp),d0
    574e:	|  |  /-- bne.s 5766 <pauseFunction+0x2a>
			(* huntAndDestroy) = (* huntAndDestroy) -> next;
    5750:	|  |  |   movea.l (sp),a0
    5752:	|  |  |   movea.l (a0),a0
    5754:	|  |  |   move.l 44(a0),d0
    5758:	|  |  |   movea.l (sp),a0
    575a:	|  |  |   move.l d0,(a0)
			fun->next = NULL;
    575c:	|  |  |   movea.l 8(sp),a0
    5760:	|  |  |   clr.l 44(a0)
    5764:	|  +--|-- bra.s 5770 <pauseFunction+0x34>
		} else {
			huntAndDestroy = & (* huntAndDestroy) -> next;
    5766:	|  |  \-> movea.l (sp),a0
    5768:	|  |      move.l (a0),d0
    576a:	|  |      moveq #44,d1
    576c:	|  |      add.l d0,d1
    576e:	|  |      move.l d1,(sp)
	while (* huntAndDestroy) {
    5770:	|  \----> movea.l (sp),a0
    5772:	|         move.l (a0),d0
    5774:	\-------- bne.s 5746 <pauseFunction+0xa>
		}
	}
}
    5776:	          nop
    5778:	          nop
    577a:	          addq.l #4,sp
    577c:	          rts

0000577e <restartFunction>:

void restartFunction (struct loadedFunction * fun) {
	fun -> next = allRunningFunctions;
    577e:	move.l 1b13a <allRunningFunctions>,d0
    5784:	movea.l 4(sp),a0
    5788:	move.l d0,44(a0)
	allRunningFunctions = fun;
    578c:	move.l 4(sp),1b13a <allRunningFunctions>
}
    5794:	nop
    5796:	rts

00005798 <runSludge>:

BOOL runSludge () {
    5798:	                   lea -12(sp),sp
    579c:	                   move.l a6,-(sp)
	
	struct loadedFunction * thisFunction = allRunningFunctions;
    579e:	                   move.l 1b13a <allRunningFunctions>,12(sp)
	struct loadedFunction * nextFunction;

	while (thisFunction) {
    57a6:	      /----------- bra.s 5822 <runSludge+0x8a>
		nextFunction = thisFunction -> next;
    57a8:	   /--|----------> movea.l 12(sp),a0
    57ac:	   |  |            move.l 44(a0),4(sp)

		if (! thisFunction -> freezerLevel) {
    57b2:	   |  |            movea.l 12(sp),a0
    57b6:	   |  |            move.b 56(a0),d0
    57ba:	   |  |  /-------- bne.s 581c <runSludge+0x84>
			if (thisFunction -> timeLeft) {
    57bc:	   |  |  |         movea.l 12(sp),a0
    57c0:	   |  |  |         move.l 12(a0),d0
    57c4:	   |  |  |  /----- beq.s 57ee <runSludge+0x56>
				if (thisFunction -> timeLeft < 0) {				
    57c6:	   |  |  |  |      movea.l 12(sp),a0
    57ca:	   |  |  |  |      move.l 12(a0),d0
    57ce:	   |  |  |  |  /-- bpl.s 57da <runSludge+0x42>
					thisFunction -> timeLeft = 0;
    57d0:	   |  |  |  |  |   movea.l 12(sp),a0
    57d4:	   |  |  |  |  |   clr.l 12(a0)
    57d8:	   |  |  +--|--|-- bra.s 581c <runSludge+0x84>
				} else if (! -- (thisFunction -> timeLeft)) {
    57da:	   |  |  |  |  \-> movea.l 12(sp),a0
    57de:	   |  |  |  |      move.l 12(a0),d0
    57e2:	   |  |  |  |      subq.l #1,d0
    57e4:	   |  |  |  |      movea.l 12(sp),a0
    57e8:	   |  |  |  |      move.l d0,12(a0)
    57ec:	   |  |  +--|----- bra.s 581c <runSludge+0x84>
				}
			} else {
				if (thisFunction -> isSpeech) {
    57ee:	   |  |  |  \----> movea.l 12(sp),a0
    57f2:	   |  |  |         move.w 50(a0),d0
    57f6:	   |  |  |     /-- beq.s 5806 <runSludge+0x6e>
					thisFunction -> isSpeech = FALSE;
    57f8:	   |  |  |     |   movea.l 12(sp),a0
    57fc:	   |  |  |     |   clr.w 50(a0)
					killAllSpeech ();
    5800:	   |  |  |     |   jsr 6df8 <killAllSpeech>
				}
				if (! continueFunction (thisFunction))
    5806:	   |  |  |     \-> move.l 12(sp),-(sp)
    580a:	   |  |  |         jsr 3766 <continueFunction>
    5810:	   |  |  |         addq.l #4,sp
    5812:	   |  |  |         tst.w d0
    5814:	   |  |  +-------- bne.s 581c <runSludge+0x84>
					return FALSE;
    5816:	   |  |  |         clr.w d0
    5818:	/--|--|--|-------- bra.w 58a8 <runSludge+0x110>
			}
		}

		thisFunction = nextFunction;
    581c:	|  |  |  \-------> move.l 4(sp),12(sp)
	while (thisFunction) {
    5822:	|  |  \----------> tst.l 12(sp)
    5826:	|  \-------------- bne.s 57a8 <runSludge+0x10>
	}

	if (loadNow) {
    5828:	|                  move.l 1b16e <loadNow>,d0
    582e:	|        /-------- beq.s 58a6 <runSludge+0x10e>
		if (loadNow[0] == ':') {
    5830:	|        |         movea.l 1b16e <loadNow>,a0
    5836:	|        |         move.b (a0),d0
    5838:	|        |         cmpi.b #58,d0
    583c:	|        |  /----- bne.s 5870 <runSludge+0xd8>
			saveGame (loadNow + 1);
    583e:	|        |  |      move.l 1b16e <loadNow>,d0
    5844:	|        |  |      addq.l #1,d0
    5846:	|        |  |      move.l d0,-(sp)
    5848:	|        |  |      jsr b6d0 <saveGame>
    584e:	|        |  |      addq.l #4,sp
			setVariable (&saverFunc->reg, SVT_INT, 1);
    5850:	|        |  |      movea.l 1b2c4 <saverFunc>,a0
    5856:	|        |  |      lea 28(a0),a0
    585a:	|        |  |      pea 1 <_start+0x1>
    585e:	|        |  |      pea 1 <_start+0x1>
    5862:	|        |  |      move.l a0,-(sp)
    5864:	|        |  |      jsr 13ff0 <setVariable>
    586a:	|        |  |      lea 12(sp),sp
    586e:	|        |  |  /-- bra.s 5888 <runSludge+0xf0>
		} else {
			if (! loadGame (loadNow)) return FALSE;
    5870:	|        |  \--|-> move.l 1b16e <loadNow>,d0
    5876:	|        |     |   move.l d0,-(sp)
    5878:	|        |     |   jsr b218 <loadGame>
    587e:	|        |     |   addq.l #4,sp
    5880:	|        |     |   tst.w d0
    5882:	|        |     +-- bne.s 5888 <runSludge+0xf0>
    5884:	|        |     |   clr.w d0
    5886:	+--------|-----|-- bra.s 58a8 <runSludge+0x110>
		}
		FreeVec(loadNow);
    5888:	|        |     \-> move.l 1b16e <loadNow>,8(sp)
    5890:	|        |         move.l 1b1a2 <SysBase>,d0
    5896:	|        |         movea.l d0,a6
    5898:	|        |         movea.l 8(sp),a1
    589c:	|        |         jsr -690(a6)
		loadNow = NULL;
    58a0:	|        |         clr.l 1b16e <loadNow>
	}

	return TRUE;
    58a6:	|        \-------> moveq #1,d0
}
    58a8:	\----------------> movea.l (sp)+,a6
    58aa:	                   lea 12(sp),sp
    58ae:	                   rts

000058b0 <saveHandlers>:

void saveHandlers (BPTR fp) {
	put2bytes (currentEvents -> leftMouseFunction,		fp);
    58b0:	movea.l 1ab1c <currentEvents>,a0
    58b6:	move.l (a0),d0
    58b8:	move.l 4(sp),-(sp)
    58bc:	move.l d0,-(sp)
    58be:	jsr 8d0 <put2bytes>
    58c4:	addq.l #8,sp
	put2bytes (currentEvents -> leftMouseUpFunction,	fp);
    58c6:	movea.l 1ab1c <currentEvents>,a0
    58cc:	move.l 4(a0),d0
    58d0:	move.l 4(sp),-(sp)
    58d4:	move.l d0,-(sp)
    58d6:	jsr 8d0 <put2bytes>
    58dc:	addq.l #8,sp
	put2bytes (currentEvents -> rightMouseFunction,		fp);
    58de:	movea.l 1ab1c <currentEvents>,a0
    58e4:	move.l 8(a0),d0
    58e8:	move.l 4(sp),-(sp)
    58ec:	move.l d0,-(sp)
    58ee:	jsr 8d0 <put2bytes>
    58f4:	addq.l #8,sp
	put2bytes (currentEvents -> rightMouseUpFunction,	fp);
    58f6:	movea.l 1ab1c <currentEvents>,a0
    58fc:	move.l 12(a0),d0
    5900:	move.l 4(sp),-(sp)
    5904:	move.l d0,-(sp)
    5906:	jsr 8d0 <put2bytes>
    590c:	addq.l #8,sp
	put2bytes (currentEvents -> moveMouseFunction,		fp);
    590e:	movea.l 1ab1c <currentEvents>,a0
    5914:	move.l 16(a0),d0
    5918:	move.l 4(sp),-(sp)
    591c:	move.l d0,-(sp)
    591e:	jsr 8d0 <put2bytes>
    5924:	addq.l #8,sp
	put2bytes (currentEvents -> focusFunction,			fp);
    5926:	movea.l 1ab1c <currentEvents>,a0
    592c:	move.l 20(a0),d0
    5930:	move.l 4(sp),-(sp)
    5934:	move.l d0,-(sp)
    5936:	jsr 8d0 <put2bytes>
    593c:	addq.l #8,sp
	put2bytes (currentEvents -> spaceFunction,			fp);
    593e:	movea.l 1ab1c <currentEvents>,a0
    5944:	move.l 24(a0),d0
    5948:	move.l 4(sp),-(sp)
    594c:	move.l d0,-(sp)
    594e:	jsr 8d0 <put2bytes>
    5954:	addq.l #8,sp
}
    5956:	nop
    5958:	rts

0000595a <sludgeDisplay>:

void sludgeDisplay () {					
    595a:	subq.l #4,sp
  	volatile struct Custom *custom = (struct Custom*)0xdff000;
    595c:	move.l #14675968,(sp)
	displayCursor();
    5962:	jsr c58 <displayCursor>
	CstDrawBackdrop();
    5968:	jsr 14c8 <CstDrawBackdrop>
	CstRestoreScreen();
    596e:	jsr 1bc8 <CstRestoreScreen>
	drawPeople();
    5974:	jsr 9038 <drawPeople>
	CstSwapBuffer();
    597a:	jsr 292e <CstSwapBuffer>
}
    5980:	nop
    5982:	addq.l #4,sp
    5984:	rts

00005986 <stackSetByIndex>:

BOOL stackSetByIndex (struct variableStack * vS, unsigned int theIndex, const struct variable * va) {
	while (theIndex--) {
    5986:	      /-- bra.s 59a6 <stackSetByIndex+0x20>
		vS = vS->next;
    5988:	/-----|-> movea.l 4(sp),a0
    598c:	|     |   move.l 8(a0),4(sp)
		if (!vS) {
    5992:	|     +-- bne.s 59a6 <stackSetByIndex+0x20>
			KPrintF("Index past end of stack.");
    5994:	|     |   pea 1736a <PutChar+0xe2a>
    599a:	|     |   jsr 15bf0 <KPrintF>
    59a0:	|     |   addq.l #4,sp
			return FALSE;
    59a2:	|     |   clr.w d0
    59a4:	|  /--|-- bra.s 59c8 <stackSetByIndex+0x42>
	while (theIndex--) {
    59a6:	|  |  \-> move.l 8(sp),d0
    59aa:	|  |      move.l d0,d1
    59ac:	|  |      subq.l #1,d1
    59ae:	|  |      move.l d1,8(sp)
    59b2:	|  |      tst.l d0
    59b4:	\--|----- bne.s 5988 <stackSetByIndex+0x2>
		}
	}
	return copyVariable(va, &(vS->thisVar));
    59b6:	   |      move.l 4(sp),d0
    59ba:	   |      move.l d0,-(sp)
    59bc:	   |      move.l 16(sp),-(sp)
    59c0:	   |      jsr 13bb8 <copyVariable>
    59c6:	   |      addq.l #8,sp
}
    59c8:	   \----> rts

000059ca <startNewFunctionNum>:

int startNewFunctionNum (unsigned int funcNum, unsigned int numParamsExpected, struct loadedFunction * calledBy, struct variableStack ** vStack, BOOL returnSommet) {
    59ca:	             lea -24(sp),sp
    59ce:	             move.l a6,-(sp)
    59d0:	             move.l 48(sp),d0
    59d4:	             move.w d0,d0
    59d6:	             move.w d0,6(sp)
		
	struct loadedFunction * newFunc = AllocVec(sizeof(struct loadedFunction),MEMF_ANY);
    59da:	             moveq #58,d0
    59dc:	             move.l d0,24(sp)
    59e0:	             clr.l 20(sp)
    59e4:	             move.l 1b1a2 <SysBase>,d0
    59ea:	             movea.l d0,a6
    59ec:	             move.l 24(sp),d0
    59f0:	             move.l 20(sp),d1
    59f4:	             jsr -684(a6)
    59f8:	             move.l d0,16(sp)
    59fc:	             move.l 16(sp),d0
    5a00:	             move.l d0,12(sp)
	if(!newFunc) {
    5a04:	         /-- bne.s 5a1a <startNewFunctionNum+0x50>
		KPrintF("startNewFunction: Cannot allocate memory");
    5a06:	         |   pea 17383 <PutChar+0xe43>
    5a0c:	         |   jsr 15bf0 <KPrintF>
    5a12:	         |   addq.l #4,sp
		return 0;
    5a14:	         |   moveq #0,d0
    5a16:	/--------|-- bra.w 5b30 <startNewFunctionNum+0x166>
	}
	newFunc -> originalNumber = funcNum;
    5a1a:	|        \-> move.l 32(sp),d0
    5a1e:	|            movea.l 12(sp),a0
    5a22:	|            move.l d0,(a0)

	loadFunctionCode (newFunc);
    5a24:	|            move.l 12(sp),-(sp)
    5a28:	|            jsr 513a <loadFunctionCode>
    5a2e:	|            addq.l #4,sp

	if (newFunc -> numArgs != (int)numParamsExpected) {
    5a30:	|            movea.l 12(sp),a0
    5a34:	|            move.l 16(a0),d1
    5a38:	|            move.l 36(sp),d0
    5a3c:	|            cmp.l d1,d0
    5a3e:	|        /-- beq.s 5a54 <startNewFunctionNum+0x8a>
		KPrintF("Wrong number of parameters!");
    5a40:	|        |   pea 173ac <PutChar+0xe6c>
    5a46:	|        |   jsr 15bf0 <KPrintF>
    5a4c:	|        |   addq.l #4,sp
		return NULL; 
    5a4e:	|        |   moveq #0,d0
    5a50:	+--------|-- bra.w 5b30 <startNewFunctionNum+0x166>
	}
	if (newFunc -> numArgs > newFunc -> numLocals)  {
    5a54:	|        \-> movea.l 12(sp),a0
    5a58:	|            move.l 16(a0),d1
    5a5c:	|            movea.l 12(sp),a0
    5a60:	|            move.l 8(a0),d0
    5a64:	|            cmp.l d1,d0
    5a66:	|  /-------- bge.s 5ad0 <startNewFunctionNum+0x106>
		KPrintF ("More arguments than local variable space!");
    5a68:	|  |         pea 173c8 <PutChar+0xe88>
    5a6e:	|  |         jsr 15bf0 <KPrintF>
    5a74:	|  |         addq.l #4,sp
		return NULL; 
    5a76:	|  |         moveq #0,d0
    5a78:	+--|-------- bra.w 5b30 <startNewFunctionNum+0x166>
	}
	
	// Now, lets copy the parameters from the calling function's stack...

	while (numParamsExpected) {
		struct variableStack *vStacksimpleptr = *vStack;
    5a7c:	|  |  /----> movea.l 44(sp),a0
    5a80:	|  |  |      move.l (a0),8(sp)
		numParamsExpected --;
    5a84:	|  |  |      subq.l #1,36(sp)
		if (*vStack == NULL) {
    5a88:	|  |  |      movea.l 44(sp),a0
    5a8c:	|  |  |      move.l (a0),d0
    5a8e:	|  |  |  /-- bne.s 5aa4 <startNewFunctionNum+0xda>
			KPrintF("Corrupted file! The stack's empty and there were still parameters expected");
    5a90:	|  |  |  |   pea 173f2 <PutChar+0xeb2>
    5a96:	|  |  |  |   jsr 15bf0 <KPrintF>
    5a9c:	|  |  |  |   addq.l #4,sp
			return NULL;
    5a9e:	|  |  |  |   moveq #0,d0
    5aa0:	+--|--|--|-- bra.w 5b30 <startNewFunctionNum+0x166>
		}
		copyVariable (&vStacksimpleptr -> thisVar, &newFunc->localVars[numParamsExpected]);
    5aa4:	|  |  |  \-> movea.l 12(sp),a0
    5aa8:	|  |  |      move.l 20(a0),d1
    5aac:	|  |  |      move.l 36(sp),d0
    5ab0:	|  |  |      lsl.l #3,d0
    5ab2:	|  |  |      add.l d0,d1
    5ab4:	|  |  |      move.l 8(sp),d0
    5ab8:	|  |  |      move.l d1,-(sp)
    5aba:	|  |  |      move.l d0,-(sp)
    5abc:	|  |  |      jsr 13bb8 <copyVariable>
    5ac2:	|  |  |      addq.l #8,sp
		trimStack ( vStack);
    5ac4:	|  |  |      move.l 44(sp),-(sp)
    5ac8:	|  |  |      jsr 14082 <trimStack>
    5ace:	|  |  |      addq.l #4,sp
	while (numParamsExpected) {
    5ad0:	|  \--|----> tst.l 36(sp)
    5ad4:	|     \----- bne.s 5a7c <startNewFunctionNum+0xb2>
	}

	newFunc -> cancelMe = FALSE;
    5ad6:	|            movea.l 12(sp),a0
    5ada:	|            clr.w 54(a0)
	newFunc -> timeLeft = 0;
    5ade:	|            movea.l 12(sp),a0
    5ae2:	|            clr.l 12(a0)
	newFunc -> returnSomething = returnSommet;
    5ae6:	|            movea.l 12(sp),a0
    5aea:	|            move.w 6(sp),48(a0)
	newFunc -> calledBy = calledBy;
    5af0:	|            movea.l 12(sp),a0
    5af4:	|            move.l 40(sp),40(a0)
	newFunc -> stack = NULL;
    5afa:	|            movea.l 12(sp),a0
    5afe:	|            clr.l 24(a0)
	newFunc -> freezerLevel = 0;
    5b02:	|            movea.l 12(sp),a0
    5b06:	|            clr.b 56(a0)
	newFunc -> runThisLine = 0;
    5b0a:	|            movea.l 12(sp),a0
    5b0e:	|            clr.l 36(a0)
	newFunc -> isSpeech = 0;
    5b12:	|            movea.l 12(sp),a0
    5b16:	|            clr.w 50(a0)
	newFunc -> reg.varType = SVT_NULL;
    5b1a:	|            movea.l 12(sp),a0
    5b1e:	|            clr.l 28(a0)

	restartFunction (newFunc);
    5b22:	|            move.l 12(sp),-(sp)
    5b26:	|            jsr 577e <restartFunction>
    5b2c:	|            addq.l #4,sp
	return 1;
    5b2e:	|            moveq #1,d0
}
    5b30:	\----------> movea.l (sp)+,a6
    5b32:	             lea 24(sp),sp
    5b36:	             rts

00005b38 <finishAccess>:
char * convertString(char * s) {
	return NULL;
}

void finishAccess () {
	sliceBusy = FALSE;
    5b38:	clr.w 1ab28 <sliceBusy>
}
    5b3e:	nop
    5b40:	rts

00005b42 <getNumberedString>:

char * getNumberedString (int value) {
    5b42:	       lea -56(sp),sp
    5b46:	       movem.l d2-d3/a6,-(sp)

	if (sliceBusy) {
    5b4a:	       move.w 1ab28 <sliceBusy>,d0
    5b50:	   /-- beq.s 5b9a <getNumberedString+0x58>
		Write(Output(), (APTR)"getNumberedString: Can't read from data file. I'm already reading something\n", 76);        
    5b52:	   |   move.l 1b1aa <DOSBase>,d0
    5b58:	   |   movea.l d0,a6
    5b5a:	   |   jsr -60(a6)
    5b5e:	   |   move.l d0,28(sp)
    5b62:	   |   move.l 28(sp),d0
    5b66:	   |   move.l d0,24(sp)
    5b6a:	   |   move.l #95293,20(sp)
    5b72:	   |   moveq #76,d0
    5b74:	   |   move.l d0,16(sp)
    5b78:	   |   move.l 1b1aa <DOSBase>,d0
    5b7e:	   |   movea.l d0,a6
    5b80:	   |   move.l 24(sp),d1
    5b84:	   |   move.l 20(sp),d2
    5b88:	   |   move.l 16(sp),d3
    5b8c:	   |   jsr -48(a6)
    5b90:	   |   move.l d0,12(sp)
		return NULL;
    5b94:	   |   moveq #0,d0
    5b96:	/--|-- bra.w 5c36 <getNumberedString+0xf4>
	}

	Seek(bigDataFile, (value << 2) + startOfTextIndex, OFFSET_BEGINNING);
    5b9a:	|  \-> move.l 1b18a <bigDataFile>,64(sp)
    5ba2:	|      move.l 72(sp),d0
    5ba6:	|      add.l d0,d0
    5ba8:	|      add.l d0,d0
    5baa:	|      move.l d0,d1
    5bac:	|      move.l 1b196 <startOfTextIndex>,d0
    5bb2:	|      add.l d1,d0
    5bb4:	|      move.l d0,60(sp)
    5bb8:	|      moveq #-1,d0
    5bba:	|      move.l d0,56(sp)
    5bbe:	|      move.l 1b1aa <DOSBase>,d0
    5bc4:	|      movea.l d0,a6
    5bc6:	|      move.l 64(sp),d1
    5bca:	|      move.l 60(sp),d2
    5bce:	|      move.l 56(sp),d3
    5bd2:	|      jsr -66(a6)
    5bd6:	|      move.l d0,52(sp)
	value = get4bytes (bigDataFile);
    5bda:	|      move.l 1b18a <bigDataFile>,d0
    5be0:	|      move.l d0,-(sp)
    5be2:	|      jsr 718 <get4bytes>
    5be8:	|      addq.l #4,sp
    5bea:	|      move.l d0,72(sp)
	Seek (bigDataFile, value, OFFSET_BEGINING);
    5bee:	|      move.l 1b18a <bigDataFile>,48(sp)
    5bf6:	|      move.l 72(sp),44(sp)
    5bfc:	|      moveq #-1,d0
    5bfe:	|      move.l d0,40(sp)
    5c02:	|      move.l 1b1aa <DOSBase>,d0
    5c08:	|      movea.l d0,a6
    5c0a:	|      move.l 48(sp),d1
    5c0e:	|      move.l 44(sp),d2
    5c12:	|      move.l 40(sp),d3
    5c16:	|      jsr -66(a6)
    5c1a:	|      move.l d0,36(sp)

	char * s = readString (bigDataFile);    
    5c1e:	|      move.l 1b18a <bigDataFile>,d0
    5c24:	|      move.l d0,-(sp)
    5c26:	|      jsr b02 <readString>
    5c2c:	|      addq.l #4,sp
    5c2e:	|      move.l d0,32(sp)
	
	return s;
    5c32:	|      move.l 32(sp),d0
}
    5c36:	\----> movem.l (sp)+,d2-d3/a6
    5c3a:	       lea 56(sp),sp
    5c3e:	       rts

00005c40 <openFileFromNum>:

unsigned int openFileFromNum (int num) {
    5c40:	       lea -32(sp),sp
    5c44:	       movem.l d2-d3/a6,-(sp)
//	FILE * dbug = fopen ("debuggy.txt", "at");

	if (sliceBusy) {
    5c48:	       move.w 1ab28 <sliceBusy>,d0
    5c4e:	   /-- beq.s 5c6a <openFileFromNum+0x2a>
		KPrintF("Can't read from data file", "I'm already reading something");
    5c50:	   |   pea 1748a <PutChar+0xf4a>
    5c56:	   |   pea 174a8 <PutChar+0xf68>
    5c5c:	   |   jsr 15bf0 <KPrintF>
    5c62:	   |   addq.l #8,sp
		return 0;
    5c64:	   |   moveq #0,d0
    5c66:	/--|-- bra.w 5cfe <openFileFromNum+0xbe>
	}

	Seek( bigDataFile,  startOfDataIndex + (num << 2), OFFSET_BEGINING);	
    5c6a:	|  \-> move.l 1b18a <bigDataFile>,40(sp)
    5c72:	|      move.l 48(sp),d0
    5c76:	|      add.l d0,d0
    5c78:	|      add.l d0,d0
    5c7a:	|      move.l d0,d1
    5c7c:	|      move.l 1b192 <startOfDataIndex>,d0
    5c82:	|      add.l d1,d0
    5c84:	|      move.l d0,36(sp)
    5c88:	|      moveq #-1,d0
    5c8a:	|      move.l d0,32(sp)
    5c8e:	|      move.l 1b1aa <DOSBase>,d0
    5c94:	|      movea.l d0,a6
    5c96:	|      move.l 40(sp),d1
    5c9a:	|      move.l 36(sp),d2
    5c9e:	|      move.l 32(sp),d3
    5ca2:	|      jsr -66(a6)
    5ca6:	|      move.l d0,28(sp)
	Seek( bigDataFile, get4bytes (bigDataFile), OFFSET_CURRENT);
    5caa:	|      move.l 1b18a <bigDataFile>,24(sp)
    5cb2:	|      move.l 1b18a <bigDataFile>,d0
    5cb8:	|      move.l d0,-(sp)
    5cba:	|      jsr 718 <get4bytes>
    5cc0:	|      addq.l #4,sp
    5cc2:	|      move.l d0,20(sp)
    5cc6:	|      clr.l 16(sp)
    5cca:	|      move.l 1b1aa <DOSBase>,d0
    5cd0:	|      movea.l d0,a6
    5cd2:	|      move.l 24(sp),d1
    5cd6:	|      move.l 20(sp),d2
    5cda:	|      move.l 16(sp),d3
    5cde:	|      jsr -66(a6)
    5ce2:	|      move.l d0,12(sp)
//	fprintf (dbug, "Jumping to %li (for data) \n", ftell (bigDataFile));
	sliceBusy = TRUE;
    5ce6:	|      move.w #1,1ab28 <sliceBusy>
//	fclose (dbug);

	return get4bytes (bigDataFile);
    5cee:	|      move.l 1b18a <bigDataFile>,d0
    5cf4:	|      move.l d0,-(sp)
    5cf6:	|      jsr 718 <get4bytes>
    5cfc:	|      addq.l #4,sp
}
    5cfe:	\----> movem.l (sp)+,d2-d3/a6
    5d02:	       lea 32(sp),sp
    5d06:	       rts

00005d08 <openObjectSlice>:

BOOL openObjectSlice (int num) {
    5d08:	       lea -32(sp),sp
    5d0c:	       movem.l d2-d3/a6,-(sp)
    // BPTR dbug = FOpen("debuggy.txt", MODE_NEWFILE);

    // FPrintf(dbug, "\nTrying to open object %i\n", num);

    if (sliceBusy) {
    5d10:	       move.w 1ab28 <sliceBusy>,d0
    5d16:	   /-- beq.s 5d32 <openObjectSlice+0x2a>
        KPrintF("Can't read from data file", "I'm already reading something");
    5d18:	   |   pea 1748a <PutChar+0xf4a>
    5d1e:	   |   pea 174a8 <PutChar+0xf68>
    5d24:	   |   jsr 15bf0 <KPrintF>
    5d2a:	   |   addq.l #8,sp
        return FALSE;
    5d2c:	   |   clr.w d0
    5d2e:	/--|-- bra.w 5dbe <openObjectSlice+0xb6>
    }

    // FPrintf(dbug, "Going to position %ld\n", startOfObjectIndex + (num << 2));
    Seek(bigDataFile, startOfObjectIndex + (num << 2), OFFSET_BEGINNING);
    5d32:	|  \-> move.l 1b18a <bigDataFile>,40(sp)
    5d3a:	|      move.l 48(sp),d0
    5d3e:	|      add.l d0,d0
    5d40:	|      add.l d0,d0
    5d42:	|      move.l d0,d1
    5d44:	|      move.l 1b19e <startOfObjectIndex>,d0
    5d4a:	|      add.l d1,d0
    5d4c:	|      move.l d0,36(sp)
    5d50:	|      moveq #-1,d0
    5d52:	|      move.l d0,32(sp)
    5d56:	|      move.l 1b1aa <DOSBase>,d0
    5d5c:	|      movea.l d0,a6
    5d5e:	|      move.l 40(sp),d1
    5d62:	|      move.l 36(sp),d2
    5d66:	|      move.l 32(sp),d3
    5d6a:	|      jsr -66(a6)
    5d6e:	|      move.l d0,28(sp)
    Seek(bigDataFile, get4bytes(bigDataFile), OFFSET_BEGINNING);
    5d72:	|      move.l 1b18a <bigDataFile>,24(sp)
    5d7a:	|      move.l 1b18a <bigDataFile>,d0
    5d80:	|      move.l d0,-(sp)
    5d82:	|      jsr 718 <get4bytes>
    5d88:	|      addq.l #4,sp
    5d8a:	|      move.l d0,20(sp)
    5d8e:	|      moveq #-1,d0
    5d90:	|      move.l d0,16(sp)
    5d94:	|      move.l 1b1aa <DOSBase>,d0
    5d9a:	|      movea.l d0,a6
    5d9c:	|      move.l 24(sp),d1
    5da0:	|      move.l 20(sp),d2
    5da4:	|      move.l 16(sp),d3
    5da8:	|      jsr -66(a6)
    5dac:	|      move.l d0,12(sp)
    // FPrintf(dbug, "Told to skip forward to %ld\n", FTell(bigDataFile));
    // FClose(dbug);
    return sliceBusy = TRUE;
    5db0:	|      move.w #1,1ab28 <sliceBusy>
    5db8:	|      move.w 1ab28 <sliceBusy>,d0
}
    5dbe:	\----> movem.l (sp)+,d2-d3/a6
    5dc2:	       lea 32(sp),sp
    5dc6:	       rts

00005dc8 <openSubSlice>:

BOOL openSubSlice (int num) {
    5dc8:	       lea -32(sp),sp
    5dcc:	       movem.l d2-d3/a6,-(sp)
//	FILE * dbug = fopen ("debuggy.txt", "at");

//	fprintf (dbug, "\nTrying to open sub %i\n", num);

	if (sliceBusy) {
    5dd0:	       move.w 1ab28 <sliceBusy>,d0
    5dd6:	   /-- beq.s 5df2 <openSubSlice+0x2a>
		KPrintF("Can't read from data file", "I'm already reading something");
    5dd8:	   |   pea 1748a <PutChar+0xf4a>
    5dde:	   |   pea 174a8 <PutChar+0xf68>
    5de4:	   |   jsr 15bf0 <KPrintF>
    5dea:	   |   addq.l #8,sp
		return FALSE;
    5dec:	   |   clr.w d0
    5dee:	/--|-- bra.w 5e7e <openSubSlice+0xb6>
	}

//	fprintf (dbug, "Going to position %li\n", startOfSubIndex + (num << 2));
	Seek(bigDataFile, startOfSubIndex + (num << 2), OFFSET_BEGINNING);
    5df2:	|  \-> move.l 1b18a <bigDataFile>,40(sp)
    5dfa:	|      move.l 48(sp),d0
    5dfe:	|      add.l d0,d0
    5e00:	|      add.l d0,d0
    5e02:	|      move.l d0,d1
    5e04:	|      move.l 1b19a <startOfSubIndex>,d0
    5e0a:	|      add.l d1,d0
    5e0c:	|      move.l d0,36(sp)
    5e10:	|      moveq #-1,d0
    5e12:	|      move.l d0,32(sp)
    5e16:	|      move.l 1b1aa <DOSBase>,d0
    5e1c:	|      movea.l d0,a6
    5e1e:	|      move.l 40(sp),d1
    5e22:	|      move.l 36(sp),d2
    5e26:	|      move.l 32(sp),d3
    5e2a:	|      jsr -66(a6)
    5e2e:	|      move.l d0,28(sp)
	Seek(bigDataFile, get4bytes (bigDataFile), OFFSET_BEGINNING);
    5e32:	|      move.l 1b18a <bigDataFile>,24(sp)
    5e3a:	|      move.l 1b18a <bigDataFile>,d0
    5e40:	|      move.l d0,-(sp)
    5e42:	|      jsr 718 <get4bytes>
    5e48:	|      addq.l #4,sp
    5e4a:	|      move.l d0,20(sp)
    5e4e:	|      moveq #-1,d0
    5e50:	|      move.l d0,16(sp)
    5e54:	|      move.l 1b1aa <DOSBase>,d0
    5e5a:	|      movea.l d0,a6
    5e5c:	|      move.l 24(sp),d1
    5e60:	|      move.l 20(sp),d2
    5e64:	|      move.l 16(sp),d3
    5e68:	|      jsr -66(a6)
    5e6c:	|      move.l d0,12(sp)
//	fprintf (dbug, "Told to skip forward to %li\n", ftell (bigDataFile));
//	fclose (dbug);
	return sliceBusy = TRUE;
    5e70:	|      move.w #1,1ab28 <sliceBusy>
    5e78:	|      move.w 1ab28 <sliceBusy>,d0
}
    5e7e:	\----> movem.l (sp)+,d2-d3/a6
    5e82:	       lea 32(sp),sp
    5e86:	       rts

00005e88 <setFileIndices>:

void setFileIndices (BPTR fp, unsigned int numLanguages, unsigned int skipBefore) {
    5e88:	       lea -180(sp),sp
    5e8c:	       movem.l d2-d3/a6,-(sp)
	if (fp) {
    5e90:	       tst.l 196(sp)
    5e94:	/----- beq.s 5ed4 <setFileIndices+0x4c>
		// Keep hold of the file handle, and let things get at it
		bigDataFile = fp;
    5e96:	|      move.l 196(sp),1b18a <bigDataFile>
		startIndex = Seek( fp, 0, OFFSET_CURRENT);
    5e9e:	|      move.l 196(sp),168(sp)
    5ea4:	|      clr.l 164(sp)
    5ea8:	|      clr.l 160(sp)
    5eac:	|      move.l 1b1aa <DOSBase>,d0
    5eb2:	|      movea.l d0,a6
    5eb4:	|      move.l 168(sp),d1
    5eb8:	|      move.l 164(sp),d2
    5ebc:	|      move.l 160(sp),d3
    5ec0:	|      jsr -66(a6)
    5ec4:	|      move.l d0,156(sp)
    5ec8:	|      move.l 156(sp),d0
    5ecc:	|      move.l d0,1b18e <startIndex>
    5ed2:	|  /-- bra.s 5f0e <setFileIndices+0x86>
	} else {
		// No file pointer - this means that we reuse the bigDataFile
		fp = bigDataFile;
    5ed4:	\--|-> move.l 1b18a <bigDataFile>,196(sp)
        Seek(fp, startIndex, OFFSET_BEGINNING);
    5edc:	   |   move.l 196(sp),184(sp)
    5ee2:	   |   move.l 1b18e <startIndex>,d0
    5ee8:	   |   move.l d0,180(sp)
    5eec:	   |   moveq #-1,d0
    5eee:	   |   move.l d0,176(sp)
    5ef2:	   |   move.l 1b1aa <DOSBase>,d0
    5ef8:	   |   movea.l d0,a6
    5efa:	   |   move.l 184(sp),d1
    5efe:	   |   move.l 180(sp),d2
    5f02:	   |   move.l 176(sp),d3
    5f06:	   |   jsr -66(a6)
    5f0a:	   |   move.l d0,172(sp)
	}
	sliceBusy = FALSE;
    5f0e:	   \-> clr.w 1ab28 <sliceBusy>

	if (skipBefore > numLanguages) {
    5f14:	       move.l 204(sp),d0
    5f18:	       cmp.l 200(sp),d0
    5f1c:	   /-- bls.s 5f30 <setFileIndices+0xa8>
		KPrintF("setFileIndices: Warning: Not a valid language ID! Using default instead.");
    5f1e:	   |   pea 174c2 <PutChar+0xf82>
    5f24:	   |   jsr 15bf0 <KPrintF>
    5f2a:	   |   addq.l #4,sp
		skipBefore = 0;
    5f2c:	   |   clr.l 204(sp)
	}

	// STRINGS
	int skipAfter = numLanguages - skipBefore;
    5f30:	   \-> move.l 200(sp),d0
    5f34:	       sub.l 204(sp),d0
    5f38:	       move.l d0,188(sp)
	while (skipBefore) {
    5f3c:	   /-- bra.s 5f7a <setFileIndices+0xf2>
        Seek(fp, get4bytes(fp),OFFSET_BEGINING);		
    5f3e:	/--|-> move.l 196(sp),24(sp)
    5f44:	|  |   move.l 196(sp),-(sp)
    5f48:	|  |   jsr 718 <get4bytes>
    5f4e:	|  |   addq.l #4,sp
    5f50:	|  |   move.l d0,20(sp)
    5f54:	|  |   moveq #-1,d0
    5f56:	|  |   move.l d0,16(sp)
    5f5a:	|  |   move.l 1b1aa <DOSBase>,d0
    5f60:	|  |   movea.l d0,a6
    5f62:	|  |   move.l 24(sp),d1
    5f66:	|  |   move.l 20(sp),d2
    5f6a:	|  |   move.l 16(sp),d3
    5f6e:	|  |   jsr -66(a6)
    5f72:	|  |   move.l d0,12(sp)
		skipBefore --;
    5f76:	|  |   subq.l #1,204(sp)
	while (skipBefore) {
    5f7a:	|  \-> tst.l 204(sp)
    5f7e:	\----- bne.s 5f3e <setFileIndices+0xb6>
	}
	startOfTextIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    5f80:	       move.l 196(sp),152(sp)
    5f86:	       clr.l 148(sp)
    5f8a:	       clr.l 144(sp)
    5f8e:	       move.l 1b1aa <DOSBase>,d0
    5f94:	       movea.l d0,a6
    5f96:	       move.l 152(sp),d1
    5f9a:	       move.l 148(sp),d2
    5f9e:	       move.l 144(sp),d3
    5fa2:	       jsr -66(a6)
    5fa6:	       move.l d0,140(sp)
    5faa:	       move.l 140(sp),d0
    5fae:	       addq.l #4,d0
    5fb0:	       move.l d0,1b196 <startOfTextIndex>

	Seek(fp, get4bytes (fp), OFFSET_BEGINNING);
    5fb6:	       move.l 196(sp),136(sp)
    5fbc:	       move.l 196(sp),-(sp)
    5fc0:	       jsr 718 <get4bytes>
    5fc6:	       addq.l #4,sp
    5fc8:	       move.l d0,132(sp)
    5fcc:	       moveq #-1,d0
    5fce:	       move.l d0,128(sp)
    5fd2:	       move.l 1b1aa <DOSBase>,d0
    5fd8:	       movea.l d0,a6
    5fda:	       move.l 136(sp),d1
    5fde:	       move.l 132(sp),d2
    5fe2:	       move.l 128(sp),d3
    5fe6:	       jsr -66(a6)
    5fea:	       move.l d0,124(sp)

	while (skipAfter) {
    5fee:	   /-- bra.s 602c <setFileIndices+0x1a4>
        Seek( fp, get4bytes (fp), OFFSET_BEGINING);
    5ff0:	/--|-> move.l 196(sp),40(sp)
    5ff6:	|  |   move.l 196(sp),-(sp)
    5ffa:	|  |   jsr 718 <get4bytes>
    6000:	|  |   addq.l #4,sp
    6002:	|  |   move.l d0,36(sp)
    6006:	|  |   moveq #-1,d0
    6008:	|  |   move.l d0,32(sp)
    600c:	|  |   move.l 1b1aa <DOSBase>,d0
    6012:	|  |   movea.l d0,a6
    6014:	|  |   move.l 40(sp),d1
    6018:	|  |   move.l 36(sp),d2
    601c:	|  |   move.l 32(sp),d3
    6020:	|  |   jsr -66(a6)
    6024:	|  |   move.l d0,28(sp)
		skipAfter --;
    6028:	|  |   subq.l #1,188(sp)
	while (skipAfter) {
    602c:	|  \-> tst.l 188(sp)
    6030:	\----- bne.s 5ff0 <setFileIndices+0x168>
	}

	startOfSubIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    6032:	       move.l 196(sp),120(sp)
    6038:	       clr.l 116(sp)
    603c:	       clr.l 112(sp)
    6040:	       move.l 1b1aa <DOSBase>,d0
    6046:	       movea.l d0,a6
    6048:	       move.l 120(sp),d1
    604c:	       move.l 116(sp),d2
    6050:	       move.l 112(sp),d3
    6054:	       jsr -66(a6)
    6058:	       move.l d0,108(sp)
    605c:	       move.l 108(sp),d0
    6060:	       addq.l #4,d0
    6062:	       move.l d0,1b19a <startOfSubIndex>
    Seek( fp, get4bytes (fp), OFFSET_CURRENT);
    6068:	       move.l 196(sp),104(sp)
    606e:	       move.l 196(sp),-(sp)
    6072:	       jsr 718 <get4bytes>
    6078:	       addq.l #4,sp
    607a:	       move.l d0,100(sp)
    607e:	       clr.l 96(sp)
    6082:	       move.l 1b1aa <DOSBase>,d0
    6088:	       movea.l d0,a6
    608a:	       move.l 104(sp),d1
    608e:	       move.l 100(sp),d2
    6092:	       move.l 96(sp),d3
    6096:	       jsr -66(a6)
    609a:	       move.l d0,92(sp)

	startOfObjectIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    609e:	       move.l 196(sp),88(sp)
    60a4:	       clr.l 84(sp)
    60a8:	       clr.l 80(sp)
    60ac:	       move.l 1b1aa <DOSBase>,d0
    60b2:	       movea.l d0,a6
    60b4:	       move.l 88(sp),d1
    60b8:	       move.l 84(sp),d2
    60bc:	       move.l 80(sp),d3
    60c0:	       jsr -66(a6)
    60c4:	       move.l d0,76(sp)
    60c8:	       move.l 76(sp),d0
    60cc:	       addq.l #4,d0
    60ce:	       move.l d0,1b19e <startOfObjectIndex>
	Seek (fp, get4bytes (fp), OFFSET_CURRENT);
    60d4:	       move.l 196(sp),72(sp)
    60da:	       move.l 196(sp),-(sp)
    60de:	       jsr 718 <get4bytes>
    60e4:	       addq.l #4,sp
    60e6:	       move.l d0,68(sp)
    60ea:	       clr.l 64(sp)
    60ee:	       move.l 1b1aa <DOSBase>,d0
    60f4:	       movea.l d0,a6
    60f6:	       move.l 72(sp),d1
    60fa:	       move.l 68(sp),d2
    60fe:	       move.l 64(sp),d3
    6102:	       jsr -66(a6)
    6106:	       move.l d0,60(sp)

	// Remember that the data section starts here
	startOfDataIndex =  Seek( fp, 0, OFFSET_CURRENT);
    610a:	       move.l 196(sp),56(sp)
    6110:	       clr.l 52(sp)
    6114:	       clr.l 48(sp)
    6118:	       move.l 1b1aa <DOSBase>,d0
    611e:	       movea.l d0,a6
    6120:	       move.l 56(sp),d1
    6124:	       move.l 52(sp),d2
    6128:	       move.l 48(sp),d3
    612c:	       jsr -66(a6)
    6130:	       move.l d0,44(sp)
    6134:	       move.l 44(sp),d0
    6138:	       move.l d0,1b192 <startOfDataIndex>
    613e:	       nop
    6140:	       movem.l (sp)+,d2-d3/a6
    6144:	       lea 180(sp),sp
    6148:	       rts

0000614a <GetVBR>:
static volatile APTR VBR=0;
static APTR SystemIrq;
 
struct View *ActiView;

static APTR GetVBR(void) {
    614a:	    lea -20(sp),sp
    614e:	    move.l a6,-(sp)
    6150:	    move.l d7,-(sp)
	APTR vbr = 0;
    6152:	    clr.l 24(sp)
	UWORD getvbr[] = { 0x4e7a, 0x0801, 0x4e73 }; // MOVEC.L VBR,D0 RTE
    6156:	    move.w #20090,10(sp)
    615c:	    move.w #2049,12(sp)
    6162:	    move.w #20083,14(sp)

	if (SysBase->AttnFlags & AFF_68010) 
    6168:	    movea.l 1b1a2 <SysBase>,a0
    616e:	    move.w 296(a0),d0
    6172:	    move.w d0,d0
    6174:	    andi.l #65535,d0
    617a:	    moveq #1,d1
    617c:	    and.l d1,d0
    617e:	/-- beq.s 61ac <GetVBR+0x62>
		vbr = (APTR)Supervisor((ULONG (*)())getvbr);
    6180:	|   lea 28(sp),a0
    6184:	|   lea -18(a0),a0
    6188:	|   move.l a0,20(sp)
    618c:	|   move.l 1b1a2 <SysBase>,d0
    6192:	|   movea.l d0,a6
    6194:	|   move.l 20(sp),d7
    6198:	|   exg d7,a5
    619a:	|   jsr -30(a6)
    619e:	|   exg d7,a5
    61a0:	|   move.l d0,16(sp)
    61a4:	|   move.l 16(sp),d0
    61a8:	|   move.l d0,24(sp)

	return vbr;
    61ac:	\-> move.l 24(sp),d0
}
    61b0:	    move.l (sp)+,d7
    61b2:	    movea.l (sp)+,a6
    61b4:	    lea 20(sp),sp
    61b8:	    rts

000061ba <SetInterruptHandler>:

void SetInterruptHandler(APTR interrupt) {
	*(volatile APTR*)(((UBYTE*)VBR)+0x6c) = interrupt;
    61ba:	movea.l 1b1c8 <VBR>,a0
    61c0:	lea 108(a0),a0
    61c4:	move.l 4(sp),(a0)
}
    61c8:	nop
    61ca:	rts

000061cc <GetInterruptHandler>:

APTR GetInterruptHandler() {
	return *(volatile APTR*)(((UBYTE*)VBR)+0x6c);
    61cc:	movea.l 1b1c8 <VBR>,a0
    61d2:	move.l 108(a0),d0
}
    61d6:	rts

000061d8 <TakeSystem>:
	UWORD tst=*(volatile UWORD*)&custom->dmaconr; //for compatiblity a1000
	(void)tst;
	while (*(volatile UWORD*)&custom->dmaconr&(1<<14)) {} //blitter busy wait
}

void TakeSystem() {
    61d8:	       subq.l #8,sp
    61da:	       move.l a6,-(sp)
	KPrintF("TakeSystem: Run Forbid\n");
    61dc:	       pea 1750b <PutChar+0xfcb>
    61e2:	       jsr 15bf0 <KPrintF>
    61e8:	       addq.l #4,sp
	Forbid();
    61ea:	       move.l 1b1a2 <SysBase>,d0
    61f0:	       movea.l d0,a6
    61f2:	       jsr -132(a6)
	//Save current interrupts and DMA settings so we can restore them upon exit. 
	KPrintF("TakeSystem: Saving Registers\n");
    61f6:	       pea 17523 <PutChar+0xfe3>
    61fc:	       jsr 15bf0 <KPrintF>
    6202:	       addq.l #4,sp
	SystemADKCON=custom->adkconr;
    6204:	       movea.l 1b1a6 <custom>,a0
    620a:	       move.w 16(a0),d0
    620e:	       move.w d0,1b1c6 <SystemADKCON>
	SystemInts=custom->intenar;
    6214:	       movea.l 1b1a6 <custom>,a0
    621a:	       move.w 28(a0),d0
    621e:	       move.w d0,1b1c2 <SystemInts>
	SystemDMA=custom->dmaconr;
    6224:	       movea.l 1b1a6 <custom>,a0
    622a:	       move.w 2(a0),d0
    622e:	       move.w d0,1b1c4 <SystemDMA>
	ActiView=GfxBase->ActiView; //store current view
    6234:	       movea.l 1b1ae <GfxBase>,a0
    623a:	       move.l 34(a0),d0
    623e:	       move.l d0,1b1d0 <ActiView>

	KPrintF("TakeSystem: LoadView\n");
    6244:	       pea 17541 <PutChar+0x1001>
    624a:	       jsr 15bf0 <KPrintF>
    6250:	       addq.l #4,sp
	LoadView(0);
    6252:	       clr.l 4(sp)
    6256:	       move.l 1b1ae <GfxBase>,d0
    625c:	       movea.l d0,a6
    625e:	       movea.l 4(sp),a1
    6262:	       jsr -222(a6)
	KPrintF("TakeSystem: WaitTof\n");
    6266:	       pea 17557 <PutChar+0x1017>
    626c:	       jsr 15bf0 <KPrintF>
    6272:	       addq.l #4,sp
	WaitTOF();
    6274:	       move.l 1b1ae <GfxBase>,d0
    627a:	       movea.l d0,a6
    627c:	       jsr -270(a6)
	WaitTOF();
    6280:	       move.l 1b1ae <GfxBase>,d0
    6286:	       movea.l d0,a6
    6288:	       jsr -270(a6)

	KPrintF("TakeSystem: WaitVBL\n");
    628c:	       pea 1756c <PutChar+0x102c>
    6292:	       jsr 15bf0 <KPrintF>
    6298:	       addq.l #4,sp
	WaitVbl();
    629a:	       jsr 15b24 <WaitVbl>
	WaitVbl();
    62a0:	       jsr 15b24 <WaitVbl>

	KPrintF("TakeSystem: Doing Blitter Stuff\n");
    62a6:	       pea 17581 <PutChar+0x1041>
    62ac:	       jsr 15bf0 <KPrintF>
    62b2:	       addq.l #4,sp
	OwnBlitter();
    62b4:	       move.l 1b1ae <GfxBase>,d0
    62ba:	       movea.l d0,a6
    62bc:	       jsr -456(a6)
	WaitBlit();	
    62c0:	       move.l 1b1ae <GfxBase>,d0
    62c6:	       movea.l d0,a6
    62c8:	       jsr -228(a6)
	Disable();
    62cc:	       move.l 1b1a2 <SysBase>,d0
    62d2:	       movea.l d0,a6
    62d4:	       jsr -120(a6)
	
	//custom->intena=0x7fff;//disable all interrupts
	//custom->intreq=0x7fff;//Clear any interrupts that were pending
	
	KPrintF("TakeSystem: Clear DMA\n");
    62d8:	       pea 175a2 <PutChar+0x1062>
    62de:	       jsr 15bf0 <KPrintF>
    62e4:	       addq.l #4,sp
	custom->dmacon=0x7fff;//Clear all DMA channels
    62e6:	       movea.l 1b1a6 <custom>,a0
    62ec:	       move.w #32767,150(a0)

	KPrintF("TakeSystem: Set all colors to black\n");
    62f2:	       pea 175b9 <PutChar+0x1079>
    62f8:	       jsr 15bf0 <KPrintF>
    62fe:	       addq.l #4,sp
	//set all colors black
	for(int a=0;a<32;a++)
    6300:	       clr.l 8(sp)
    6304:	   /-- bra.s 6322 <TakeSystem+0x14a>
		custom->color[a]=0;
    6306:	/--|-> movea.l 1b1a6 <custom>,a0
    630c:	|  |   move.l 8(sp),d0
    6310:	|  |   addi.l #192,d0
    6316:	|  |   add.l d0,d0
    6318:	|  |   move.w #0,(0,a0,d0.l)
	for(int a=0;a<32;a++)
    631e:	|  |   addq.l #1,8(sp)
    6322:	|  \-> moveq #31,d0
    6324:	|      cmp.l 8(sp),d0
    6328:	\----- bge.s 6306 <TakeSystem+0x12e>

	WaitVbl();
    632a:	       jsr 15b24 <WaitVbl>
	WaitVbl();
    6330:	       jsr 15b24 <WaitVbl>

	KPrintF("TakeSystem: Save System interrupts\n");
    6336:	       pea 175de <PutChar+0x109e>
    633c:	       jsr 15bf0 <KPrintF>
    6342:	       addq.l #4,sp
	VBR=GetVBR();
    6344:	       jsr 614a <GetVBR>
    634a:	       move.l d0,1b1c8 <VBR>
	SystemIrq=GetInterruptHandler(); //store interrupt register*/
    6350:	       jsr 61cc <GetInterruptHandler>
    6356:	       move.l d0,1b1cc <SystemIrq>
}
    635c:	       nop
    635e:	       movea.l (sp)+,a6
    6360:	       addq.l #8,sp
    6362:	       rts

00006364 <FreeSystem>:

void FreeSystem() { 
    6364:	subq.l #4,sp
    6366:	move.l a6,-(sp)
	WaitVbl();
    6368:	jsr 15b24 <WaitVbl>
	WaitBlit();
    636e:	move.l 1b1ae <GfxBase>,d0
    6374:	movea.l d0,a6
    6376:	jsr -228(a6)
	custom->intena=0x7fff;//disable all interrupts
    637a:	movea.l 1b1a6 <custom>,a0
    6380:	move.w #32767,154(a0)
	custom->intreq=0x7fff;//Clear any interrupts that were pending
    6386:	movea.l 1b1a6 <custom>,a0
    638c:	move.w #32767,156(a0)
	custom->dmacon=0x7fff;//Clear all DMA channels
    6392:	movea.l 1b1a6 <custom>,a0
    6398:	move.w #32767,150(a0)

	//restore interrupts
	SetInterruptHandler(SystemIrq);
    639e:	move.l 1b1cc <SystemIrq>,d0
    63a4:	move.l d0,-(sp)
    63a6:	jsr 61ba <SetInterruptHandler>
    63ac:	addq.l #4,sp

	/*Restore system copper list(s). */
	custom->cop1lc=(ULONG)GfxBase->copinit;
    63ae:	movea.l 1b1ae <GfxBase>,a0
    63b4:	move.l 38(a0),d0
    63b8:	movea.l 1b1a6 <custom>,a0
    63be:	move.l d0,128(a0)
	custom->cop2lc=(ULONG)GfxBase->LOFlist;
    63c2:	movea.l 1b1ae <GfxBase>,a0
    63c8:	move.l 50(a0),d0
    63cc:	movea.l 1b1a6 <custom>,a0
    63d2:	move.l d0,132(a0)
	custom->copjmp1=0x7fff; //start coppper
    63d6:	movea.l 1b1a6 <custom>,a0
    63dc:	move.w #32767,136(a0)

	/*Restore all interrupts and DMA settings. */
	//custom->intena=SystemInts|0x8000;
	custom->dmacon=SystemDMA|0x8000;
    63e2:	move.w 1b1c4 <SystemDMA>,d0
    63e8:	movea.l 1b1a6 <custom>,a0
    63ee:	ori.w #-32768,d0
    63f2:	move.w d0,150(a0)
	custom->adkcon=SystemADKCON|0x8000;
    63f6:	move.w 1b1c6 <SystemADKCON>,d0
    63fc:	movea.l 1b1a6 <custom>,a0
    6402:	ori.w #-32768,d0
    6406:	move.w d0,158(a0)

	WaitBlit();	
    640a:	move.l 1b1ae <GfxBase>,d0
    6410:	movea.l d0,a6
    6412:	jsr -228(a6)
	DisownBlitter();
    6416:	move.l 1b1ae <GfxBase>,d0
    641c:	movea.l d0,a6
    641e:	jsr -462(a6)
	Enable();
    6422:	move.l 1b1a2 <SysBase>,d0
    6428:	movea.l d0,a6
    642a:	jsr -126(a6)

	LoadView(ActiView);
    642e:	move.l 1b1d0 <ActiView>,4(sp)
    6436:	move.l 1b1ae <GfxBase>,d0
    643c:	movea.l d0,a6
    643e:	movea.l 4(sp),a1
    6442:	jsr -222(a6)
	WaitTOF();
    6446:	move.l 1b1ae <GfxBase>,d0
    644c:	movea.l d0,a6
    644e:	jsr -270(a6)
	WaitTOF();
    6452:	move.l 1b1ae <GfxBase>,d0
    6458:	movea.l d0,a6
    645a:	jsr -270(a6)

	Permit();
    645e:	move.l 1b1a2 <SysBase>,d0
    6464:	movea.l d0,a6
    6466:	jsr -138(a6)
}
    646a:	nop
    646c:	movea.l (sp)+,a6
    646e:	addq.l #4,sp
    6470:	rts

00006472 <main>:
static void Wait10() { WaitLine(0x10); }
static void Wait11() { WaitLine(0x11); }
static void Wait12() { WaitLine(0x12); }
static void Wait13() { WaitLine(0x13); }

int main(int argc, char *argv[]) {
    6472:	    lea -128(sp),sp
    6476:	    movem.l d2-d3/a6,-(sp)
	SysBase = *((struct ExecBase**)4UL);
    647a:	    movea.w #4,a0
    647e:	    move.l (a0),d0
    6480:	    move.l d0,1b1a2 <SysBase>
	custom = (struct Custom*)0xdff000;	
    6486:	    move.l #14675968,1b1a6 <custom>


	// We will use the graphics library only to locate and restore the system copper list once we are through.
	GfxBase = (struct GfxBase *)OpenLibrary((CONST_STRPTR)"graphics.library",0);
    6490:	    move.l #95746,136(sp)
    6498:	    clr.l 132(sp)
    649c:	    move.l 1b1a2 <SysBase>,d0
    64a2:	    movea.l d0,a6
    64a4:	    movea.l 136(sp),a1
    64a8:	    move.l 132(sp),d0
    64ac:	    jsr -552(a6)
    64b0:	    move.l d0,128(sp)
    64b4:	    move.l 128(sp),d0
    64b8:	    move.l d0,1b1ae <GfxBase>
	if (!GfxBase)
    64be:	    move.l 1b1ae <GfxBase>,d0
    64c4:	/-- bne.s 64da <main+0x68>
		Exit(0);
    64c6:	|   clr.l 124(sp)
    64ca:	|   move.l 1b1aa <DOSBase>,d0
    64d0:	|   movea.l d0,a6
    64d2:	|   move.l 124(sp),d1
    64d6:	|   jsr -144(a6)

	// used for printing
	DOSBase = (struct DosLibrary*)OpenLibrary((CONST_STRPTR)"dos.library", 0);
    64da:	\-> move.l #95763,120(sp)
    64e2:	    clr.l 116(sp)
    64e6:	    move.l 1b1a2 <SysBase>,d0
    64ec:	    movea.l d0,a6
    64ee:	    movea.l 120(sp),a1
    64f2:	    move.l 116(sp),d0
    64f6:	    jsr -552(a6)
    64fa:	    move.l d0,112(sp)
    64fe:	    move.l 112(sp),d0
    6502:	    move.l d0,1b1aa <DOSBase>
	if (!DOSBase)
    6508:	    move.l 1b1aa <DOSBase>,d0
    650e:	/-- bne.s 6524 <main+0xb2>
		Exit(0);
    6510:	|   clr.l 108(sp)
    6514:	|   move.l 1b1aa <DOSBase>,d0
    651a:	|   movea.l d0,a6
    651c:	|   move.l 108(sp),d1
    6520:	|   jsr -144(a6)

	MathIeeeSingBasBase = (struct MathIEEEBase *) OpenLibrary("mathieeesingbas.library", 0);	
    6524:	\-> move.l #95775,104(sp)
    652c:	    clr.l 100(sp)
    6530:	    move.l 1b1a2 <SysBase>,d0
    6536:	    movea.l d0,a6
    6538:	    movea.l 104(sp),a1
    653c:	    move.l 100(sp),d0
    6540:	    jsr -552(a6)
    6544:	    move.l d0,96(sp)
    6548:	    move.l 96(sp),d0
    654c:	    move.l d0,1b1b2 <MathIeeeSingBasBase>
	if (!MathIeeeSingBasBase)
    6552:	    move.l 1b1b2 <MathIeeeSingBasBase>,d0
    6558:	/-- bne.s 656e <main+0xfc>
		Exit(0);	
    655a:	|   clr.l 92(sp)
    655e:	|   move.l 1b1aa <DOSBase>,d0
    6564:	|   movea.l d0,a6
    6566:	|   move.l 92(sp),d1
    656a:	|   jsr -144(a6)

	MathIeeeSingTransBase = (struct MathIEEEBase *) OpenLibrary("mathieeesingtrans.library",0);													
    656e:	\-> move.l #95799,88(sp)
    6576:	    clr.l 84(sp)
    657a:	    move.l 1b1a2 <SysBase>,d0
    6580:	    movea.l d0,a6
    6582:	    movea.l 88(sp),a1
    6586:	    move.l 84(sp),d0
    658a:	    jsr -552(a6)
    658e:	    move.l d0,80(sp)
    6592:	    move.l 80(sp),d0
    6596:	    move.l d0,1b1b6 <MathIeeeSingTransBase>
	if (!MathIeeeSingTransBase)
    659c:	    move.l 1b1b6 <MathIeeeSingTransBase>,d0
    65a2:	/-- bne.s 65b8 <main+0x146>
		Exit(0);
    65a4:	|   clr.l 76(sp)
    65a8:	|   move.l 1b1aa <DOSBase>,d0
    65ae:	|   movea.l d0,a6
    65b0:	|   move.l 76(sp),d1
    65b4:	|   jsr -144(a6)

	MathIeeeDoubTransBase =  (struct MathIEEEBase *) OpenLibrary("mathieeedoubtrans.library",0);
    65b8:	\-> move.l #95825,72(sp)
    65c0:	    clr.l 68(sp)
    65c4:	    move.l 1b1a2 <SysBase>,d0
    65ca:	    movea.l d0,a6
    65cc:	    movea.l 72(sp),a1
    65d0:	    move.l 68(sp),d0
    65d4:	    jsr -552(a6)
    65d8:	    move.l d0,64(sp)
    65dc:	    move.l 64(sp),d0
    65e0:	    move.l d0,1b1be <MathIeeeDoubTransBase>
	if (!MathIeeeDoubTransBase)		
    65e6:	    move.l 1b1be <MathIeeeDoubTransBase>,d0
    65ec:	/-- bne.s 6602 <main+0x190>
		Exit(0);
    65ee:	|   clr.l 60(sp)
    65f2:	|   move.l 1b1aa <DOSBase>,d0
    65f8:	|   movea.l d0,a6
    65fa:	|   move.l 60(sp),d1
    65fe:	|   jsr -144(a6)

	MathIeeeDoubBasBase = (struct MathIEEEBase *) OpenLibrary("mathieeedoubbas.library",0);
    6602:	\-> move.l #95851,56(sp)
    660a:	    clr.l 52(sp)
    660e:	    move.l 1b1a2 <SysBase>,d0
    6614:	    movea.l d0,a6
    6616:	    movea.l 56(sp),a1
    661a:	    move.l 52(sp),d0
    661e:	    jsr -552(a6)
    6622:	    move.l d0,48(sp)
    6626:	    move.l 48(sp),d0
    662a:	    move.l d0,1b1ba <MathIeeeDoubBasBase>
	if( !MathIeeeDoubBasBase) 
    6630:	    move.l 1b1ba <MathIeeeDoubBasBase>,d0
    6636:	/-- bne.s 664c <main+0x1da>
		Exit(0);
    6638:	|   clr.l 44(sp)
    663c:	|   move.l 1b1aa <DOSBase>,d0
    6642:	|   movea.l d0,a6
    6644:	|   move.l 44(sp),d1
    6648:	|   jsr -144(a6)
	

	KPrintF(" debugger from Amiga Test 025!\n");
    664c:	\-> pea 17683 <PutChar+0x1143>
    6652:	    jsr 15bf0 <KPrintF>
    6658:	    addq.l #4,sp

	Write(Output(), (APTR)"Hello console Test 025!\n", 25);
    665a:	    move.l 1b1aa <DOSBase>,d0
    6660:	    movea.l d0,a6
    6662:	    jsr -60(a6)
    6666:	    move.l d0,40(sp)
    666a:	    move.l 40(sp),d0
    666e:	    move.l d0,36(sp)
    6672:	    move.l #95907,32(sp)
    667a:	    moveq #25,d0
    667c:	    move.l d0,28(sp)
    6680:	    move.l 1b1aa <DOSBase>,d0
    6686:	    movea.l d0,a6
    6688:	    move.l 36(sp),d1
    668c:	    move.l 32(sp),d2
    6690:	    move.l 28(sp),d3
    6694:	    jsr -48(a6)
    6698:	    move.l d0,24(sp)
	Delay(50);
    669c:	    moveq #50,d0
    669e:	    move.l d0,20(sp)
    66a2:	    move.l 1b1aa <DOSBase>,d0
    66a8:	    movea.l d0,a6
    66aa:	    move.l 20(sp),d1
    66ae:	    jsr -198(a6)
	if(p61Init(module) != 0)
		KPrintF("p61Init failed!\n");
#endif
	warpmode(0);*/

	KPrintF("Taking System\n");
    66b2:	    pea 176bc <PutChar+0x117c>
    66b8:	    jsr 15bf0 <KPrintF>
    66be:	    addq.l #4,sp
	TakeSystem();
    66c0:	    jsr 61d8 <TakeSystem>
	KPrintF("System Taken\n");
    66c6:	    pea 176cb <PutChar+0x118b>
    66cc:	    jsr 15bf0 <KPrintF>
    66d2:	    addq.l #4,sp

	custom->dmacon = 0x87ff;
    66d4:	    movea.l 1b1a6 <custom>,a0
    66da:	    move.w #-30721,150(a0)
	WaitVbl();
    66e0:	    jsr 15b24 <WaitVbl>

	KPrintF("Starting main_sludge\n");
    66e6:	    pea 176d9 <PutChar+0x1199>
    66ec:	    jsr 15bf0 <KPrintF>
    66f2:	    addq.l #4,sp
	main_sludge(argc, argv);	
    66f4:	    move.l 148(sp),-(sp)
    66f8:	    move.l 148(sp),-(sp)
    66fc:	    jsr 3040 <main_sludge>
    6702:	    addq.l #8,sp
#ifdef MUSIC
	p61End();
#endif

	// END
	FreeSystem();
    6704:	    jsr 6364 <FreeSystem>

	CloseLibrary((struct Library*)DOSBase);
    670a:	    move.l 1b1aa <DOSBase>,16(sp)
    6712:	    move.l 1b1a2 <SysBase>,d0
    6718:	    movea.l d0,a6
    671a:	    movea.l 16(sp),a1
    671e:	    jsr -414(a6)
	CloseLibrary((struct Library*)GfxBase);
    6722:	    move.l 1b1ae <GfxBase>,12(sp)
    672a:	    move.l 1b1a2 <SysBase>,d0
    6730:	    movea.l d0,a6
    6732:	    movea.l 12(sp),a1
    6736:	    jsr -414(a6)
    673a:	    moveq #0,d0
}
    673c:	    movem.l (sp)+,d2-d3/a6
    6740:	    lea 128(sp),sp
    6744:	    rts

00006746 <addStatusBar>:
#include "support/gcc8_c_support.h"

struct statusStuff mainStatus;
struct statusStuff * nowStatus = & mainStatus;

void addStatusBar () {
    6746:	    lea -16(sp),sp
    674a:	    move.l a6,-(sp)
	struct statusBar * newStat = AllocVec(sizeof(struct statusBar), MEMF_ANY);
    674c:	    moveq #8,d0
    674e:	    move.l d0,16(sp)
    6752:	    clr.l 12(sp)
    6756:	    move.l 1b1a2 <SysBase>,d0
    675c:	    movea.l d0,a6
    675e:	    move.l 16(sp),d0
    6762:	    move.l 12(sp),d1
    6766:	    jsr -684(a6)
    676a:	    move.l d0,8(sp)
    676e:	    move.l 8(sp),d0
    6772:	    move.l d0,4(sp)
	if (!newStat) {
    6776:	/-- bne.s 67a6 <addStatusBar+0x60>
		newStat -> next = nowStatus -> firstStatusBar;
    6778:	|   movea.l 1ab2a <nowStatus>,a0
    677e:	|   move.l (a0),d0
    6780:	|   movea.l 4(sp),a0
    6784:	|   move.l d0,4(a0)
		newStat -> text = copyString ("");
    6788:	|   pea 1712f <PutChar+0xbef>
    678e:	|   jsr b8 <copyString>
    6794:	|   addq.l #4,sp
    6796:	|   movea.l 4(sp),a0
    679a:	|   move.l d0,(a0)
		nowStatus -> firstStatusBar = newStat;
    679c:	|   movea.l 1ab2a <nowStatus>,a0
    67a2:	|   move.l 4(sp),(a0)
	}
}
    67a6:	\-> nop
    67a8:	    movea.l (sp)+,a6
    67aa:	    lea 16(sp),sp
    67ae:	    rts

000067b0 <clearStatusBar>:

void clearStatusBar () {
    67b0:	       lea -16(sp),sp
    67b4:	       move.l a6,-(sp)
	struct statusBar * stat = nowStatus -> firstStatusBar;
    67b6:	       movea.l 1ab2a <nowStatus>,a0
    67bc:	       move.l (a0),16(sp)
	struct statusBar * kill;
	nowStatus -> litStatus = -1;
    67c0:	       movea.l 1ab2a <nowStatus>,a0
    67c6:	       moveq #-1,d0
    67c8:	       move.l d0,6(a0)
	while (stat) {
    67cc:	   /-- bra.s 680c <clearStatusBar+0x5c>
		kill = stat;
    67ce:	/--|-> move.l 16(sp),12(sp)
		stat = stat -> next;
    67d4:	|  |   movea.l 16(sp),a0
    67d8:	|  |   move.l 4(a0),16(sp)
		FreeVec(kill -> text);
    67de:	|  |   movea.l 12(sp),a0
    67e2:	|  |   move.l (a0),8(sp)
    67e6:	|  |   move.l 1b1a2 <SysBase>,d0
    67ec:	|  |   movea.l d0,a6
    67ee:	|  |   movea.l 8(sp),a1
    67f2:	|  |   jsr -690(a6)
		FreeVec(kill);
    67f6:	|  |   move.l 12(sp),4(sp)
    67fc:	|  |   move.l 1b1a2 <SysBase>,d0
    6802:	|  |   movea.l d0,a6
    6804:	|  |   movea.l 4(sp),a1
    6808:	|  |   jsr -690(a6)
	while (stat) {
    680c:	|  \-> tst.l 16(sp)
    6810:	\----- bne.s 67ce <clearStatusBar+0x1e>
	}
	nowStatus -> firstStatusBar = NULL;
    6812:	       movea.l 1ab2a <nowStatus>,a0
    6818:	       clr.l (a0)
}
    681a:	       nop
    681c:	       movea.l (sp)+,a6
    681e:	       lea 16(sp),sp
    6822:	       rts

00006824 <initStatusBar>:

void initStatusBar () {
	mainStatus.firstStatusBar = NULL;
    6824:	clr.l 1b1d4 <mainStatus>
	mainStatus.alignStatus = IN_THE_CENTRE;
    682a:	move.w #-1,1b1d8 <mainStatus+0x4>
	mainStatus.litStatus = -1;
    6832:	moveq #-1,d0
    6834:	move.l d0,1b1da <mainStatus+0x6>
	mainStatus.statusX = 10;
    683a:	moveq #10,d0
    683c:	move.l d0,1b1de <mainStatus+0xa>
	mainStatus.statusY = winHeight - 15;
    6842:	movea.l 1b0fa <winHeight>,a0
    6848:	lea -15(a0),a0
    684c:	move.l a0,d0
    684e:	move.l d0,1b1e2 <mainStatus+0xe>
	//statusBarColour (255, 255, 255); Amiga Todo: Amigize this
	//statusBarLitColour (255, 255, 128); Amiga Todo: Amigize this
}
    6854:	nop
    6856:	rts

00006858 <killLastStatus>:

void killLastStatus () {
    6858:	    lea -12(sp),sp
    685c:	    move.l a6,-(sp)
	if (nowStatus -> firstStatusBar) {
    685e:	    movea.l 1ab2a <nowStatus>,a0
    6864:	    move.l (a0),d0
    6866:	/-- beq.s 68b0 <killLastStatus+0x58>
		struct statusBar * kill = nowStatus -> firstStatusBar;
    6868:	|   movea.l 1ab2a <nowStatus>,a0
    686e:	|   move.l (a0),12(sp)
		nowStatus -> firstStatusBar = kill -> next;
    6872:	|   movea.l 1ab2a <nowStatus>,a0
    6878:	|   movea.l 12(sp),a1
    687c:	|   move.l 4(a1),d0
    6880:	|   move.l d0,(a0)
		FreeVec(kill -> text);
    6882:	|   movea.l 12(sp),a0
    6886:	|   move.l (a0),8(sp)
    688a:	|   move.l 1b1a2 <SysBase>,d0
    6890:	|   movea.l d0,a6
    6892:	|   movea.l 8(sp),a1
    6896:	|   jsr -690(a6)
		FreeVec(kill);
    689a:	|   move.l 12(sp),4(sp)
    68a0:	|   move.l 1b1a2 <SysBase>,d0
    68a6:	|   movea.l d0,a6
    68a8:	|   movea.l 4(sp),a1
    68ac:	|   jsr -690(a6)
	}
}
    68b0:	\-> nop
    68b2:	    movea.l (sp)+,a6
    68b4:	    lea 12(sp),sp
    68b8:	    rts

000068ba <positionStatus>:
	}
	return TRUE;
}

void positionStatus (int x, int y) {
	nowStatus -> statusX = x;
    68ba:	movea.l 1ab2a <nowStatus>,a0
    68c0:	move.l 4(sp),10(a0)
	nowStatus -> statusY = y;
    68c6:	movea.l 1ab2a <nowStatus>,a0
    68cc:	move.l 8(sp),14(a0)
}
    68d2:	nop
    68d4:	rts

000068d6 <saveStatusBars>:


void saveStatusBars (BPTR fp) {
    68d6:	       lea -100(sp),sp
    68da:	       move.l a6,-(sp)
    68dc:	       move.l d2,-(sp)
	struct statusBar * viewLine = nowStatus -> firstStatusBar;
    68de:	       movea.l 1ab2a <nowStatus>,a0
    68e4:	       move.l (a0),104(sp)

	put2bytes (nowStatus -> alignStatus, fp);
    68e8:	       movea.l 1ab2a <nowStatus>,a0
    68ee:	       move.w 4(a0),d0
    68f2:	       move.w d0,d0
    68f4:	       andi.l #65535,d0
    68fa:	       move.l 112(sp),-(sp)
    68fe:	       move.l d0,-(sp)
    6900:	       jsr 8d0 <put2bytes>
    6906:	       addq.l #8,sp
	putSigned (nowStatus -> litStatus, fp);
    6908:	       movea.l 1ab2a <nowStatus>,a0
    690e:	       move.l 6(a0),d0
    6912:	       move.l d0,d0
    6914:	       movea.w d0,a0
    6916:	       move.l 112(sp),-(sp)
    691a:	       move.l a0,-(sp)
    691c:	       jsr a9c <putSigned>
    6922:	       addq.l #8,sp
	put2bytes (nowStatus -> statusX, fp);
    6924:	       movea.l 1ab2a <nowStatus>,a0
    692a:	       move.l 10(a0),d0
    692e:	       move.l 112(sp),-(sp)
    6932:	       move.l d0,-(sp)
    6934:	       jsr 8d0 <put2bytes>
    693a:	       addq.l #8,sp
	put2bytes (nowStatus -> statusY, fp);
    693c:	       movea.l 1ab2a <nowStatus>,a0
    6942:	       move.l 14(a0),d0
    6946:	       move.l 112(sp),-(sp)
    694a:	       move.l d0,-(sp)
    694c:	       jsr 8d0 <put2bytes>
    6952:	       addq.l #8,sp

	FPutC (fp, nowStatus -> statusR);
    6954:	       move.l 112(sp),100(sp)
    695a:	       movea.l 1ab2a <nowStatus>,a0
    6960:	       move.l 18(a0),96(sp)
    6966:	       move.l 1b1aa <DOSBase>,d0
    696c:	       movea.l d0,a6
    696e:	       move.l 100(sp),d1
    6972:	       move.l 96(sp),d2
    6976:	       jsr -312(a6)
    697a:	       move.l d0,92(sp)
	FPutC (fp, nowStatus -> statusG);
    697e:	       move.l 112(sp),88(sp)
    6984:	       movea.l 1ab2a <nowStatus>,a0
    698a:	       move.l 22(a0),84(sp)
    6990:	       move.l 1b1aa <DOSBase>,d0
    6996:	       movea.l d0,a6
    6998:	       move.l 88(sp),d1
    699c:	       move.l 84(sp),d2
    69a0:	       jsr -312(a6)
    69a4:	       move.l d0,80(sp)
	FPutC (fp, nowStatus -> statusB);
    69a8:	       move.l 112(sp),76(sp)
    69ae:	       movea.l 1ab2a <nowStatus>,a0
    69b4:	       move.l 26(a0),72(sp)
    69ba:	       move.l 1b1aa <DOSBase>,d0
    69c0:	       movea.l d0,a6
    69c2:	       move.l 76(sp),d1
    69c6:	       move.l 72(sp),d2
    69ca:	       jsr -312(a6)
    69ce:	       move.l d0,68(sp)
	FPutC (fp, nowStatus -> statusLR);
    69d2:	       move.l 112(sp),64(sp)
    69d8:	       movea.l 1ab2a <nowStatus>,a0
    69de:	       move.l 30(a0),60(sp)
    69e4:	       move.l 1b1aa <DOSBase>,d0
    69ea:	       movea.l d0,a6
    69ec:	       move.l 64(sp),d1
    69f0:	       move.l 60(sp),d2
    69f4:	       jsr -312(a6)
    69f8:	       move.l d0,56(sp)
	FPutC (fp, nowStatus -> statusLG);
    69fc:	       move.l 112(sp),52(sp)
    6a02:	       movea.l 1ab2a <nowStatus>,a0
    6a08:	       move.l 34(a0),48(sp)
    6a0e:	       move.l 1b1aa <DOSBase>,d0
    6a14:	       movea.l d0,a6
    6a16:	       move.l 52(sp),d1
    6a1a:	       move.l 48(sp),d2
    6a1e:	       jsr -312(a6)
    6a22:	       move.l d0,44(sp)
	FPutC (fp, nowStatus -> statusLB);
    6a26:	       move.l 112(sp),40(sp)
    6a2c:	       movea.l 1ab2a <nowStatus>,a0
    6a32:	       move.l 38(a0),36(sp)
    6a38:	       move.l 1b1aa <DOSBase>,d0
    6a3e:	       movea.l d0,a6
    6a40:	       move.l 40(sp),d1
    6a44:	       move.l 36(sp),d2
    6a48:	       jsr -312(a6)
    6a4c:	       move.l d0,32(sp)

	// Write what's being said
	while (viewLine) {
    6a50:	   /-- bra.s 6a94 <saveStatusBars+0x1be>
		FPutC (fp,1);
    6a52:	/--|-> move.l 112(sp),16(sp)
    6a58:	|  |   moveq #1,d0
    6a5a:	|  |   move.l d0,12(sp)
    6a5e:	|  |   move.l 1b1aa <DOSBase>,d0
    6a64:	|  |   movea.l d0,a6
    6a66:	|  |   move.l 16(sp),d1
    6a6a:	|  |   move.l 12(sp),d2
    6a6e:	|  |   jsr -312(a6)
    6a72:	|  |   move.l d0,8(sp)
		writeString (viewLine -> text, fp);
    6a76:	|  |   movea.l 104(sp),a0
    6a7a:	|  |   move.l (a0),d0
    6a7c:	|  |   move.l 112(sp),-(sp)
    6a80:	|  |   move.l d0,-(sp)
    6a82:	|  |   jsr bd8 <writeString>
    6a88:	|  |   addq.l #8,sp
		viewLine = viewLine -> next;
    6a8a:	|  |   movea.l 104(sp),a0
    6a8e:	|  |   move.l 4(a0),104(sp)
	while (viewLine) {
    6a94:	|  \-> tst.l 104(sp)
    6a98:	\----- bne.s 6a52 <saveStatusBars+0x17c>
	}
	FPutC (fp,0);
    6a9a:	       move.l 112(sp),28(sp)
    6aa0:	       clr.l 24(sp)
    6aa4:	       move.l 1b1aa <DOSBase>,d0
    6aaa:	       movea.l d0,a6
    6aac:	       move.l 28(sp),d1
    6ab0:	       move.l 24(sp),d2
    6ab4:	       jsr -312(a6)
    6ab8:	       move.l d0,20(sp)
}
    6abc:	       nop
    6abe:	       move.l (sp)+,d2
    6ac0:	       movea.l (sp)+,a6
    6ac2:	       lea 100(sp),sp
    6ac6:	       rts

00006ac8 <setLitStatus>:

void setLitStatus (int i) {
	nowStatus -> litStatus = i;
    6ac8:	movea.l 1ab2a <nowStatus>,a0
    6ace:	move.l 4(sp),6(a0)
}
    6ad4:	nop
    6ad6:	rts

00006ad8 <setStatusBar>:

void setStatusBar (char * txt) {
    6ad8:	    subq.l #4,sp
    6ada:	    move.l a6,-(sp)
    6adc:	    move.l a2,-(sp)
	if (nowStatus -> firstStatusBar) {
    6ade:	    movea.l 1ab2a <nowStatus>,a0
    6ae4:	    move.l (a0),d0
    6ae6:	/-- beq.s 6b1a <setStatusBar+0x42>
		FreeVec(nowStatus -> firstStatusBar -> text);
    6ae8:	|   movea.l 1ab2a <nowStatus>,a0
    6aee:	|   movea.l (a0),a0
    6af0:	|   move.l (a0),8(sp)
    6af4:	|   move.l 1b1a2 <SysBase>,d0
    6afa:	|   movea.l d0,a6
    6afc:	|   movea.l 8(sp),a1
    6b00:	|   jsr -690(a6)
		nowStatus -> firstStatusBar -> text = copyString (txt);
    6b04:	|   movea.l 1ab2a <nowStatus>,a0
    6b0a:	|   movea.l (a0),a2
    6b0c:	|   move.l 16(sp),-(sp)
    6b10:	|   jsr b8 <copyString>
    6b16:	|   addq.l #4,sp
    6b18:	|   move.l d0,(a2)
	}
}
    6b1a:	\-> nop
    6b1c:	    movea.l (sp)+,a2
    6b1e:	    movea.l (sp)+,a6
    6b20:	    addq.l #4,sp
    6b22:	    rts

00006b24 <statusBarText>:

const char * statusBarText () {
	if (nowStatus -> firstStatusBar) {
    6b24:	       movea.l 1ab2a <nowStatus>,a0
    6b2a:	       move.l (a0),d0
    6b2c:	/----- beq.s 6b3a <statusBarText+0x16>
		return nowStatus -> firstStatusBar -> text;
    6b2e:	|      movea.l 1ab2a <nowStatus>,a0
    6b34:	|      movea.l (a0),a0
    6b36:	|      move.l (a0),d0
    6b38:	|  /-- bra.s 6b40 <statusBarText+0x1c>
	} else {
		return "";
    6b3a:	\--|-> move.l #94511,d0
	}
    6b40:	   \-> rts

00006b42 <addSpeechLine>:

struct speechStruct * speech;
FLOAT speechSpeed = 1;


void addSpeechLine (char * theLine, int x, int *offset) {
    6b42:	       lea -28(sp),sp
    6b46:	       movem.l d2-d5/a6,-(sp)
	int halfWidth = (stringWidth (theLine) >> 1)/cameraZoom;
    6b4a:	       move.l 52(sp),-(sp)
    6b4e:	       jsr 142a0 <stringWidth>
    6b54:	       addq.l #4,sp
    6b56:	       asr.l #1,d0
    6b58:	       move.l d0,-(sp)
    6b5a:	       jsr 15ea8 <__floatsisf>
    6b60:	       addq.l #4,sp
    6b62:	       move.l d0,d1
    6b64:	       move.l 1ab42 <cameraZoom>,d0
    6b6a:	       move.l d0,-(sp)
    6b6c:	       move.l d1,-(sp)
    6b6e:	       jsr 15d54 <__divsf3>
    6b74:	       addq.l #8,sp
    6b76:	       move.l d0,-(sp)
    6b78:	       jsr 15e40 <__fixsfsi>
    6b7e:	       addq.l #4,sp
    6b80:	       move.l d0,44(sp)
	int xx1 = x - (halfWidth);
    6b84:	       move.l 56(sp),d0
    6b88:	       sub.l 44(sp),d0
    6b8c:	       move.l d0,40(sp)
	int xx2 = x + (halfWidth);
    6b90:	       move.l 56(sp),d0
    6b94:	       add.l 44(sp),d0
    6b98:	       move.l d0,36(sp)
	struct speechLine * newLine = AllocVec(sizeof(struct speechLine),MEMF_ANY);
    6b9c:	       moveq #12,d0
    6b9e:	       move.l d0,32(sp)
    6ba2:	       clr.l 28(sp)
    6ba6:	       move.l 1b1a2 <SysBase>,d0
    6bac:	       movea.l d0,a6
    6bae:	       move.l 32(sp),d0
    6bb2:	       move.l 28(sp),d1
    6bb6:	       jsr -684(a6)
    6bba:	       move.l d0,24(sp)
    6bbe:	       move.l 24(sp),d0
    6bc2:	       move.l d0,20(sp)

	newLine -> next = speech -> allSpeech;
    6bc6:	       movea.l 1b1fe <speech>,a0
    6bcc:	       move.l 4(a0),d0
    6bd0:	       movea.l 20(sp),a0
    6bd4:	       move.l d0,4(a0)
	newLine -> textLine = copyString (theLine);
    6bd8:	       move.l 52(sp),-(sp)
    6bdc:	       jsr b8 <copyString>
    6be2:	       addq.l #4,sp
    6be4:	       movea.l 20(sp),a0
    6be8:	       move.l d0,(a0)
	newLine -> x = xx1;
    6bea:	       movea.l 20(sp),a0
    6bee:	       move.l 40(sp),8(a0)
	speech -> allSpeech = newLine;
    6bf4:	       movea.l 1b1fe <speech>,a0
    6bfa:	       move.l 20(sp),4(a0)
	if ((xx1 < 5) && (*offset < (5 - xx1))) {
    6c00:	       moveq #4,d0
    6c02:	       cmp.l 40(sp),d0
    6c06:	   /-- blt.s 6c28 <addSpeechLine+0xe6>
    6c08:	   |   movea.l 60(sp),a0
    6c0c:	   |   move.l (a0),d1
    6c0e:	   |   moveq #5,d0
    6c10:	   |   sub.l 40(sp),d0
    6c14:	   |   cmp.l d1,d0
    6c16:	   +-- ble.s 6c28 <addSpeechLine+0xe6>
		*offset = 5 - xx1;
    6c18:	   |   moveq #5,d0
    6c1a:	   |   sub.l 40(sp),d0
    6c1e:	   |   movea.l 60(sp),a0
    6c22:	   |   move.l d0,(a0)
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
		*offset = (int) ((FLOAT)winWidth/cameraZoom) - 5 - xx2;
	}
}
    6c24:	/--|-- bra.w 6d54 <addSpeechLine+0x212>
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
    6c28:	|  \-> move.l 36(sp),-(sp)
    6c2c:	|      jsr 15ea8 <__floatsisf>
    6c32:	|      addq.l #4,sp
    6c34:	|      move.l d0,d2
    6c36:	|      move.l 1b0f6 <winWidth>,d0
    6c3c:	|      move.l d0,-(sp)
    6c3e:	|      jsr 15ed0 <__floatunsisf>
    6c44:	|      addq.l #4,sp
    6c46:	|      move.l d0,d1
    6c48:	|      move.l 1ab42 <cameraZoom>,d0
    6c4e:	|      move.l d0,-(sp)
    6c50:	|      move.l d1,-(sp)
    6c52:	|      jsr 15d54 <__divsf3>
    6c58:	|      addq.l #8,sp
    6c5a:	|      move.l #1084227584,-(sp)
    6c60:	|      move.l d0,-(sp)
    6c62:	|      jsr 1619c <__subsf3>
    6c68:	|      addq.l #8,sp
    6c6a:	|      move.l d0,-(sp)
    6c6c:	|      move.l d2,-(sp)
    6c6e:	|      jsr 15f90 <__gesf2>
    6c74:	|      addq.l #8,sp
    6c76:	|      tst.l d0
    6c78:	|  /-- bge.s 6c7e <addSpeechLine+0x13c>
}
    6c7a:	+--|-- bra.w 6d54 <addSpeechLine+0x212>
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
    6c7e:	|  \-> movea.l 60(sp),a0
    6c82:	|      move.l (a0),d0
    6c84:	|      move.l d0,-(sp)
    6c86:	|      jsr 15ea8 <__floatsisf>
    6c8c:	|      addq.l #4,sp
    6c8e:	|      move.l d0,-(sp)
    6c90:	|      jsr 15dc0 <__extendsfdf2>
    6c96:	|      addq.l #4,sp
    6c98:	|      move.l d0,d4
    6c9a:	|      move.l d1,d5
    6c9c:	|      move.l 1b0f6 <winWidth>,d0
    6ca2:	|      move.l d0,-(sp)
    6ca4:	|      jsr 15ed0 <__floatunsisf>
    6caa:	|      addq.l #4,sp
    6cac:	|      move.l d0,d1
    6cae:	|      move.l 1ab42 <cameraZoom>,d0
    6cb4:	|      move.l d0,-(sp)
    6cb6:	|      move.l d1,-(sp)
    6cb8:	|      jsr 15d54 <__divsf3>
    6cbe:	|      addq.l #8,sp
    6cc0:	|      move.l d0,-(sp)
    6cc2:	|      jsr 15dc0 <__extendsfdf2>
    6cc8:	|      addq.l #4,sp
    6cca:	|      clr.l -(sp)
    6ccc:	|      move.l #1075052544,-(sp)
    6cd2:	|      move.l d1,-(sp)
    6cd4:	|      move.l d0,-(sp)
    6cd6:	|      jsr 1613a <__subdf3>
    6cdc:	|      lea 16(sp),sp
    6ce0:	|      move.l d0,d2
    6ce2:	|      move.l d1,d3
    6ce4:	|      move.l 36(sp),-(sp)
    6ce8:	|      jsr 15e68 <__floatsidf>
    6cee:	|      addq.l #4,sp
    6cf0:	|      move.l d1,-(sp)
    6cf2:	|      move.l d0,-(sp)
    6cf4:	|      move.l d3,-(sp)
    6cf6:	|      move.l d2,-(sp)
    6cf8:	|      jsr 1613a <__subdf3>
    6cfe:	|      lea 16(sp),sp
    6d02:	|      move.l d1,-(sp)
    6d04:	|      move.l d0,-(sp)
    6d06:	|      move.l d5,-(sp)
    6d08:	|      move.l d4,-(sp)
    6d0a:	|      jsr 15fc6 <__gtdf2>
    6d10:	|      lea 16(sp),sp
    6d14:	|      tst.l d0
    6d16:	|  /-- bgt.s 6d1a <addSpeechLine+0x1d8>
}
    6d18:	+--|-- bra.s 6d54 <addSpeechLine+0x212>
		*offset = (int) ((FLOAT)winWidth/cameraZoom) - 5 - xx2;
    6d1a:	|  \-> move.l 1b0f6 <winWidth>,d0
    6d20:	|      move.l d0,-(sp)
    6d22:	|      jsr 15ed0 <__floatunsisf>
    6d28:	|      addq.l #4,sp
    6d2a:	|      move.l d0,d1
    6d2c:	|      move.l 1ab42 <cameraZoom>,d0
    6d32:	|      move.l d0,-(sp)
    6d34:	|      move.l d1,-(sp)
    6d36:	|      jsr 15d54 <__divsf3>
    6d3c:	|      addq.l #8,sp
    6d3e:	|      move.l d0,-(sp)
    6d40:	|      jsr 15e40 <__fixsfsi>
    6d46:	|      addq.l #4,sp
    6d48:	|      subq.l #5,d0
    6d4a:	|      sub.l 36(sp),d0
    6d4e:	|      movea.l 60(sp),a0
    6d52:	|      move.l d0,(a0)
}
    6d54:	\----> nop
    6d56:	       movem.l (sp)+,d2-d5/a6
    6d5a:	       lea 28(sp),sp
    6d5e:	       rts

00006d60 <initSpeech>:


void initSpeech () {
    6d60:	       lea -12(sp),sp
    6d64:	       move.l a6,-(sp)
	speech = AllocVec(sizeof(struct speechStruct), MEMF_ANY);
    6d66:	       moveq #20,d0
    6d68:	       move.l d0,12(sp)
    6d6c:	       clr.l 8(sp)
    6d70:	       move.l 1b1a2 <SysBase>,d0
    6d76:	       movea.l d0,a6
    6d78:	       move.l 12(sp),d0
    6d7c:	       move.l 8(sp),d1
    6d80:	       jsr -684(a6)
    6d84:	       move.l d0,4(sp)
    6d88:	       move.l 4(sp),d0
    6d8c:	       move.l d0,1b1fe <speech>
	if (speech) {
    6d92:	       move.l 1b1fe <speech>,d0
    6d98:	/----- beq.s 6dc4 <initSpeech+0x64>
		speech -> currentTalker = NULL;
    6d9a:	|      movea.l 1b1fe <speech>,a0
    6da0:	|      clr.l (a0)
		speech -> allSpeech = NULL;
    6da2:	|      movea.l 1b1fe <speech>,a0
    6da8:	|      clr.l 4(a0)
		speech -> speechY = 0;
    6dac:	|      movea.l 1b1fe <speech>,a0
    6db2:	|      clr.l 8(a0)
		speech -> lastFile = -1;
    6db6:	|      movea.l 1b1fe <speech>,a0
    6dbc:	|      moveq #-1,d0
    6dbe:	|      move.l d0,12(a0)
	} else
    {
        KPrintF("Could not allocate memory");
    }
}
    6dc2:	|  /-- bra.s 6dd2 <initSpeech+0x72>
        KPrintF("Could not allocate memory");
    6dc4:	\--|-> pea 17716 <PutChar+0x11d6>
    6dca:	   |   jsr 15bf0 <KPrintF>
    6dd0:	   |   addq.l #4,sp
}
    6dd2:	   \-> nop
    6dd4:	       movea.l (sp)+,a6
    6dd6:	       lea 12(sp),sp
    6dda:	       rts

00006ddc <isThereAnySpeechGoingOn>:

int isThereAnySpeechGoingOn () {
	return speech -> allSpeech ? speech -> lookWhosTalking : -1;
    6ddc:	       movea.l 1b1fe <speech>,a0
    6de2:	       move.l 4(a0),d0
    6de6:	/----- beq.s 6df4 <isThereAnySpeechGoingOn+0x18>
    6de8:	|      movea.l 1b1fe <speech>,a0
    6dee:	|      move.l 16(a0),d0
    6df2:	|  /-- bra.s 6df6 <isThereAnySpeechGoingOn+0x1a>
    6df4:	\--|-> moveq #-1,d0
}
    6df6:	   \-> rts

00006df8 <killAllSpeech>:

void killAllSpeech () {
    6df8:	       lea -12(sp),sp
    6dfc:	       move.l a6,-(sp)
	if (speech -> lastFile != -1) {
    6dfe:	       movea.l 1b1fe <speech>,a0
    6e04:	       move.l 12(a0),d0
    6e08:	       moveq #-1,d1
    6e0a:	       cmp.l d0,d1
    6e0c:	   /-- beq.s 6e1a <killAllSpeech+0x22>
		//huntKillSound (speech -> lastFile); Amiga Todo: Replace?
		speech -> lastFile = -1;
    6e0e:	   |   movea.l 1b1fe <speech>,a0
    6e14:	   |   moveq #-1,d0
    6e16:	   |   move.l d0,12(a0)
	}

	if (speech -> currentTalker) {
    6e1a:	   \-> movea.l 1b1fe <speech>,a0
    6e20:	       move.l (a0),d0
    6e22:	/----- beq.w 6eae <killAllSpeech+0xb6>
		makeSilent (* (speech -> currentTalker));
    6e26:	|      movea.l 1b1fe <speech>,a0
    6e2c:	|      move.l (a0),d1
    6e2e:	|      lea -132(sp),sp
    6e32:	|      move.l sp,d0
    6e34:	|      movea.w #132,a0
    6e38:	|      move.l a0,-(sp)
    6e3a:	|      move.l d1,-(sp)
    6e3c:	|      move.l d0,-(sp)
    6e3e:	|      jsr 15ba4 <memcpy>
    6e44:	|      lea 12(sp),sp
    6e48:	|      jsr 9b32 <makeSilent>
    6e4e:	|      lea 132(sp),sp
		speech -> currentTalker = NULL;
    6e52:	|      movea.l 1b1fe <speech>,a0
    6e58:	|      clr.l (a0)
	}
	
	struct speechLine * killMe;
	
	while (speech -> allSpeech) {
    6e5a:	+----- bra.s 6eae <killAllSpeech+0xb6>
		killMe = speech -> allSpeech;
    6e5c:	|  /-> movea.l 1b1fe <speech>,a0
    6e62:	|  |   move.l 4(a0),12(sp)
		speech -> allSpeech = speech -> allSpeech -> next;
    6e68:	|  |   movea.l 1b1fe <speech>,a0
    6e6e:	|  |   movea.l 4(a0),a1
    6e72:	|  |   movea.l 1b1fe <speech>,a0
    6e78:	|  |   move.l 4(a1),d0
    6e7c:	|  |   move.l d0,4(a0)
		FreeVec(killMe -> textLine);
    6e80:	|  |   movea.l 12(sp),a0
    6e84:	|  |   move.l (a0),8(sp)
    6e88:	|  |   move.l 1b1a2 <SysBase>,d0
    6e8e:	|  |   movea.l d0,a6
    6e90:	|  |   movea.l 8(sp),a1
    6e94:	|  |   jsr -690(a6)
		FreeVec(killMe);
    6e98:	|  |   move.l 12(sp),4(sp)
    6e9e:	|  |   move.l 1b1a2 <SysBase>,d0
    6ea4:	|  |   movea.l d0,a6
    6ea6:	|  |   movea.l 4(sp),a1
    6eaa:	|  |   jsr -690(a6)
	while (speech -> allSpeech) {
    6eae:	\--|-> movea.l 1b1fe <speech>,a0
    6eb4:	   |   move.l 4(a0),d0
    6eb8:	   \-- bne.s 6e5c <killAllSpeech+0x64>
	}
}
    6eba:	       nop
    6ebc:	       nop
    6ebe:	       movea.l (sp)+,a6
    6ec0:	       lea 12(sp),sp
    6ec4:	       rts

00006ec6 <makeTalker>:

	return TRUE;
}

void makeTalker (struct onScreenPerson *me) {
	setFrames (me, ANI_TALK);
    6ec6:	pea 2 <_start+0x2>
    6eca:	move.l 8(sp),-(sp)
    6ece:	jsr 7026 <setFrames>
    6ed4:	addq.l #8,sp
}
    6ed6:	nop
    6ed8:	rts

00006eda <saveSpeech>:

void saveSpeech (struct speechStruct * sS, BPTR fp) {
    6eda:	       lea -52(sp),sp
    6ede:	       move.l a6,-(sp)
    6ee0:	       move.l d2,-(sp)
	struct speechLine * viewLine = sS -> allSpeech;
    6ee2:	       movea.l 64(sp),a0
    6ee6:	       move.l 4(a0),56(sp)
	
	putFloat (speechSpeed, fp);
    6eec:	       move.l 1ab2e <speechSpeed>,d0
    6ef2:	       move.l 68(sp),-(sp)
    6ef6:	       move.l d0,-(sp)
    6ef8:	       jsr a46 <putFloat>
    6efe:	       addq.l #8,sp
	
		// Write y co-ordinate
		put2bytes (sS -> speechY, fp);
    6f00:	       movea.l 64(sp),a0
    6f04:	       move.l 8(a0),d0
    6f08:	       move.l 68(sp),-(sp)
    6f0c:	       move.l d0,-(sp)
    6f0e:	       jsr 8d0 <put2bytes>
    6f14:	       addq.l #8,sp
		
		// Write which character's talking
		put2bytes (sS -> lookWhosTalking, fp);		
    6f16:	       movea.l 64(sp),a0
    6f1a:	       move.l 16(a0),d0
    6f1e:	       move.l 68(sp),-(sp)
    6f22:	       move.l d0,-(sp)
    6f24:	       jsr 8d0 <put2bytes>
    6f2a:	       addq.l #8,sp
		if (sS -> currentTalker) {
    6f2c:	       movea.l 64(sp),a0
    6f30:	       move.l (a0),d0
    6f32:	   /-- beq.s 6f76 <saveSpeech+0x9c>
			FPutC (fp, 1);
    6f34:	   |   move.l 68(sp),40(sp)
    6f3a:	   |   moveq #1,d0
    6f3c:	   |   move.l d0,36(sp)
    6f40:	   |   move.l 1b1aa <DOSBase>,d0
    6f46:	   |   movea.l d0,a6
    6f48:	   |   move.l 40(sp),d1
    6f4c:	   |   move.l 36(sp),d2
    6f50:	   |   jsr -312(a6)
    6f54:	   |   move.l d0,32(sp)
			put2bytes (sS->currentTalker->thisType->objectNum, fp);
    6f58:	   |   movea.l 64(sp),a0
    6f5c:	   |   movea.l (a0),a0
    6f5e:	   |   movea.l 114(a0),a0
    6f62:	   |   move.l 4(a0),d0
    6f66:	   |   move.l 68(sp),-(sp)
    6f6a:	   |   move.l d0,-(sp)
    6f6c:	   |   jsr 8d0 <put2bytes>
    6f72:	   |   addq.l #8,sp
    6f74:	/--|-- bra.s 6ff2 <saveSpeech+0x118>
		} else {
			FPutC (fp, 0);
    6f76:	|  \-> move.l 68(sp),52(sp)
    6f7c:	|      clr.l 48(sp)
    6f80:	|      move.l 1b1aa <DOSBase>,d0
    6f86:	|      movea.l d0,a6
    6f88:	|      move.l 52(sp),d1
    6f8c:	|      move.l 48(sp),d2
    6f90:	|      jsr -312(a6)
    6f94:	|      move.l d0,44(sp)
		}
		
		// Write what's being said
		while (viewLine) {
    6f98:	+----- bra.s 6ff2 <saveSpeech+0x118>
			FPutC (fp, 1);
    6f9a:	|  /-> move.l 68(sp),16(sp)
    6fa0:	|  |   moveq #1,d0
    6fa2:	|  |   move.l d0,12(sp)
    6fa6:	|  |   move.l 1b1aa <DOSBase>,d0
    6fac:	|  |   movea.l d0,a6
    6fae:	|  |   move.l 16(sp),d1
    6fb2:	|  |   move.l 12(sp),d2
    6fb6:	|  |   jsr -312(a6)
    6fba:	|  |   move.l d0,8(sp)
			writeString (viewLine -> textLine, fp);
    6fbe:	|  |   movea.l 56(sp),a0
    6fc2:	|  |   move.l (a0),d0
    6fc4:	|  |   move.l 68(sp),-(sp)
    6fc8:	|  |   move.l d0,-(sp)
    6fca:	|  |   jsr bd8 <writeString>
    6fd0:	|  |   addq.l #8,sp
			put2bytes (viewLine -> x, fp);
    6fd2:	|  |   movea.l 56(sp),a0
    6fd6:	|  |   move.l 8(a0),d0
    6fda:	|  |   move.l 68(sp),-(sp)
    6fde:	|  |   move.l d0,-(sp)
    6fe0:	|  |   jsr 8d0 <put2bytes>
    6fe6:	|  |   addq.l #8,sp
			viewLine = viewLine -> next;
    6fe8:	|  |   movea.l 56(sp),a0
    6fec:	|  |   move.l 4(a0),56(sp)
		while (viewLine) {
    6ff2:	\--|-> tst.l 56(sp)
    6ff6:	   \-- bne.s 6f9a <saveSpeech+0xc0>
		}
		FPutC (fp, 0);
    6ff8:	       move.l 68(sp),28(sp)
    6ffe:	       clr.l 24(sp)
    7002:	       move.l 1b1aa <DOSBase>,d0
    7008:	       movea.l d0,a6
    700a:	       move.l 28(sp),d1
    700e:	       move.l 24(sp),d2
    7012:	       jsr -312(a6)
    7016:	       move.l d0,20(sp)
}
    701a:	       nop
    701c:	       move.l (sp)+,d2
    701e:	       movea.l (sp)+,a6
    7020:	       lea 52(sp),sp
    7024:	       rts

00007026 <setFrames>:

void setFrames (struct onScreenPerson *m, int a) {
    7026:	move.l d2,-(sp)
	m->myAnim = m->myPersona -> animation[(a * m->myPersona -> numDirections) + m->direction];
    7028:	movea.l 8(sp),a0
    702c:	movea.l 80(a0),a0
    7030:	move.l (a0),d2
    7032:	movea.l 8(sp),a0
    7036:	movea.l 80(a0),a0
    703a:	move.l 4(a0),d0
    703e:	move.l 12(sp),-(sp)
    7042:	move.l d0,-(sp)
    7044:	jsr 1642a <__mulsi3>
    704a:	addq.l #8,sp
    704c:	move.l d0,d1
    704e:	movea.l 8(sp),a0
    7052:	move.l 106(a0),d0
    7056:	add.l d1,d0
    7058:	add.l d0,d0
    705a:	add.l d0,d0
    705c:	movea.l d2,a0
    705e:	adda.l d0,a0
    7060:	move.l (a0),d0
    7062:	movea.l 8(sp),a0
    7066:	move.l d0,72(a0)
}
    706a:	nop
    706c:	move.l (sp)+,d2
    706e:	rts

00007070 <wrapSpeech>:

int wrapSpeech(char * theText, int objT, int sampleFile, BOOL animPerson) {
    7070:	       lea -20(sp),sp
    7074:	       move.l d2,-(sp)
    7076:	       move.l 40(sp),d0
    707a:	       move.w d0,d0
    707c:	       move.w d0,6(sp)
    int i;

    speech->lookWhosTalking = objT;
    7080:	       movea.l 1b1fe <speech>,a0
    7086:	       move.l 32(sp),16(a0)
    struct onScreenPerson * thisPerson = findPerson(objT);
    708c:	       move.l 32(sp),-(sp)
    7090:	       jsr 961c <findPerson>
    7096:	       addq.l #4,sp
    7098:	       move.l d0,16(sp)
    if (thisPerson) {
    709c:	   /-- beq.s 70c2 <wrapSpeech+0x52>
        //setObjFontColour(thisPerson->thisType); Todo Amigize this
        i = wrapSpeechPerson(theText, thisPerson, sampleFile, animPerson);
    709e:	   |   movea.w 6(sp),a0
    70a2:	   |   move.l a0,-(sp)
    70a4:	   |   move.l 40(sp),-(sp)
    70a8:	   |   move.l 24(sp),-(sp)
    70ac:	   |   move.l 40(sp),-(sp)
    70b0:	   |   jsr 7188 <wrapSpeechPerson>
    70b6:	   |   lea 16(sp),sp
    70ba:	   |   move.l d0,20(sp)
    70be:	/--|-- bra.w 717c <wrapSpeech+0x10c>
    } else {
        struct screenRegion * thisRegion = getRegionForObject(objT);
    70c2:	|  \-> move.l 32(sp),-(sp)
    70c6:	|      jsr 14412 <getRegionForObject>
    70cc:	|      addq.l #4,sp
    70ce:	|      move.l d0,12(sp)
        if (thisRegion) {
    70d2:	|  /-- beq.s 713e <wrapSpeech+0xce>
            //setObjFontColour(thisRegion->thisType); Todo Amigize this
            i = wrapSpeechXY(theText, ((thisRegion->x1 + thisRegion->x2) >> 1) - cameraX, thisRegion->y1 - thisRegion->thisType->speechGap - cameraY, thisRegion->thisType->wrapSpeech, sampleFile);
    70d4:	|  |   movea.l 12(sp),a0
    70d8:	|  |   movea.l 28(a0),a0
    70dc:	|  |   move.l 28(a0),d0
    70e0:	|  |   movea.l 12(sp),a0
    70e4:	|  |   movea.l 4(a0),a1
    70e8:	|  |   movea.l 12(sp),a0
    70ec:	|  |   movea.l 28(a0),a0
    70f0:	|  |   move.l 20(a0),d1
    70f4:	|  |   movea.l a1,a0
    70f6:	|  |   suba.l d1,a0
    70f8:	|  |   move.l 1b2b8 <cameraY>,d1
    70fe:	|  |   movea.l a0,a1
    7100:	|  |   suba.l d1,a1
    7102:	|  |   movea.l 12(sp),a0
    7106:	|  |   move.l (a0),d2
    7108:	|  |   movea.l 12(sp),a0
    710c:	|  |   move.l 8(a0),d1
    7110:	|  |   add.l d2,d1
    7112:	|  |   move.l d1,d2
    7114:	|  |   asr.l #1,d2
    7116:	|  |   move.l 1b2b4 <cameraX>,d1
    711c:	|  |   movea.l d2,a0
    711e:	|  |   suba.l d1,a0
    7120:	|  |   move.l 36(sp),-(sp)
    7124:	|  |   move.l d0,-(sp)
    7126:	|  |   move.l a1,-(sp)
    7128:	|  |   move.l a0,-(sp)
    712a:	|  |   move.l 44(sp),-(sp)
    712e:	|  |   jsr 72a6 <wrapSpeechXY>
    7134:	|  |   lea 20(sp),sp
    7138:	|  |   move.l d0,20(sp)
    713c:	+--|-- bra.s 717c <wrapSpeech+0x10c>
        } else {
            struct objectType * temp = findObjectType(objT);
    713e:	|  \-> move.l 32(sp),-(sp)
    7142:	|      jsr c4f6 <findObjectType>
    7148:	|      addq.l #4,sp
    714a:	|      move.l d0,8(sp)
            //setObjFontColour(temp); Todo: Amigize this
            i = wrapSpeechXY(theText, winWidth >> 1, 10, temp->wrapSpeech, sampleFile);
    714e:	|      movea.l 8(sp),a0
    7152:	|      move.l 28(a0),d1
    7156:	|      move.l 1b0f6 <winWidth>,d0
    715c:	|      lsr.l #1,d0
    715e:	|      move.l 36(sp),-(sp)
    7162:	|      move.l d1,-(sp)
    7164:	|      pea a <_start+0xa>
    7168:	|      move.l d0,-(sp)
    716a:	|      move.l 44(sp),-(sp)
    716e:	|      jsr 72a6 <wrapSpeechXY>
    7174:	|      lea 20(sp),sp
    7178:	|      move.l d0,20(sp)
        }
    }
    return i;
    717c:	\----> move.l 20(sp),d0
}
    7180:	       move.l (sp)+,d2
    7182:	       lea 20(sp),sp
    7186:	       rts

00007188 <wrapSpeechPerson>:

int wrapSpeechPerson (char * theText, struct onScreenPerson *thePerson, int sampleFile, BOOL animPerson) {
    7188:	    subq.l #8,sp
    718a:	    movem.l d2-d4,-(sp)
    718e:	    move.l 36(sp),d0
    7192:	    move.w d0,d0
    7194:	    move.w d0,14(sp)
	int i = wrapSpeechXY (theText, thePerson->x - cameraX, thePerson->y - cameraY - (thePerson->scale * (thePerson->height - thePerson->floaty)) - thePerson->thisType -> speechGap, thePerson->thisType -> wrapSpeech, sampleFile);
    7198:	    movea.l 28(sp),a0
    719c:	    movea.l 114(a0),a0
    71a0:	    move.l 28(a0),d2
    71a4:	    movea.l 28(sp),a0
    71a8:	    move.l 4(a0),d3
    71ac:	    move.l 1b2b8 <cameraY>,d0
    71b2:	    move.l d0,-(sp)
    71b4:	    jsr 15ea8 <__floatsisf>
    71ba:	    addq.l #4,sp
    71bc:	    move.l d0,-(sp)
    71be:	    move.l d3,-(sp)
    71c0:	    jsr 1619c <__subsf3>
    71c6:	    addq.l #8,sp
    71c8:	    move.l d0,d3
    71ca:	    movea.l 28(sp),a0
    71ce:	    move.l 32(a0),d4
    71d2:	    movea.l 28(sp),a0
    71d6:	    move.l 20(a0),d1
    71da:	    movea.l 28(sp),a0
    71de:	    move.l 24(a0),d0
    71e2:	    sub.l d0,d1
    71e4:	    move.l d1,-(sp)
    71e6:	    jsr 15ea8 <__floatsisf>
    71ec:	    addq.l #4,sp
    71ee:	    move.l d0,-(sp)
    71f0:	    move.l d4,-(sp)
    71f2:	    jsr 15f5a <__mulsf3>
    71f8:	    addq.l #8,sp
    71fa:	    move.l d0,-(sp)
    71fc:	    move.l d3,-(sp)
    71fe:	    jsr 1619c <__subsf3>
    7204:	    addq.l #8,sp
    7206:	    move.l d0,d3
    7208:	    movea.l 28(sp),a0
    720c:	    movea.l 114(a0),a0
    7210:	    move.l 20(a0),d0
    7214:	    move.l d0,-(sp)
    7216:	    jsr 15ea8 <__floatsisf>
    721c:	    addq.l #4,sp
    721e:	    move.l d0,-(sp)
    7220:	    move.l d3,-(sp)
    7222:	    jsr 1619c <__subsf3>
    7228:	    addq.l #8,sp
    722a:	    move.l d0,-(sp)
    722c:	    jsr 15e40 <__fixsfsi>
    7232:	    addq.l #4,sp
    7234:	    move.l d0,d4
    7236:	    movea.l 28(sp),a0
    723a:	    move.l (a0),d3
    723c:	    move.l 1b2b4 <cameraX>,d0
    7242:	    move.l d0,-(sp)
    7244:	    jsr 15ea8 <__floatsisf>
    724a:	    addq.l #4,sp
    724c:	    move.l d0,-(sp)
    724e:	    move.l d3,-(sp)
    7250:	    jsr 1619c <__subsf3>
    7256:	    addq.l #8,sp
    7258:	    move.l d0,-(sp)
    725a:	    jsr 15e40 <__fixsfsi>
    7260:	    addq.l #4,sp
    7262:	    move.l 32(sp),-(sp)
    7266:	    move.l d2,-(sp)
    7268:	    move.l d4,-(sp)
    726a:	    move.l d0,-(sp)
    726c:	    move.l 40(sp),-(sp)
    7270:	    jsr 72a6 <wrapSpeechXY>
    7276:	    lea 20(sp),sp
    727a:	    move.l d0,16(sp)
	if (animPerson) {
    727e:	    tst.w 14(sp)
    7282:	/-- beq.s 729a <wrapSpeechPerson+0x112>
		makeTalker (thePerson);
    7284:	|   move.l 28(sp),-(sp)
    7288:	|   jsr 6ec6 <makeTalker>
    728e:	|   addq.l #4,sp
		speech -> currentTalker = thePerson;
    7290:	|   movea.l 1b1fe <speech>,a0
    7296:	|   move.l 28(sp),(a0)
	}
	return i;
    729a:	\-> move.l 16(sp),d0
}
    729e:	    movem.l (sp)+,d2-d4
    72a2:	    addq.l #8,sp
    72a4:	    rts

000072a6 <wrapSpeechXY>:

int wrapSpeechXY(char * theText, int x, int y, int wrap, int sampleFile) {
    72a6:	                   lea -16(sp),sp
    72aa:	                   movem.l d2-d4/a2,-(sp)
    int a, offset = 0;
    72ae:	                   clr.l 16(sp)
    killAllSpeech();
    72b2:	                   jsr 6df8 <killAllSpeech>

    int speechTime = (strlen(theText) + 20) * speechSpeed;
    72b8:	                   move.l 36(sp),-(sp)
    72bc:	                   jsr 12bea <strlen>
    72c2:	                   addq.l #4,sp
    72c4:	                   movea.l d0,a0
    72c6:	                   lea 20(a0),a0
    72ca:	                   move.l a0,-(sp)
    72cc:	                   jsr 15ed0 <__floatunsisf>
    72d2:	                   addq.l #4,sp
    72d4:	                   move.l d0,d1
    72d6:	                   move.l 1ab2e <speechSpeed>,d0
    72dc:	                   move.l d0,-(sp)
    72de:	                   move.l d1,-(sp)
    72e0:	                   jsr 15f5a <__mulsf3>
    72e6:	                   addq.l #8,sp
    72e8:	                   move.l d0,-(sp)
    72ea:	                   jsr 15e40 <__fixsfsi>
    72f0:	                   addq.l #4,sp
    72f2:	                   move.l d0,24(sp)
    if (speechTime < 1) speechTime = 1;
    72f6:	               /-- bgt.s 72fe <wrapSpeechXY+0x58>
    72f8:	               |   moveq #1,d0
    72fa:	               |   move.l d0,24(sp)

    if (sampleFile != -1) {
    72fe:	               \-> moveq #-1,d1
    7300:	                   cmp.l 52(sp),d1
    7304:	               /-- beq.s 7344 <wrapSpeechXY+0x9e>
        if (speechMode >= 1) {
    7306:	               |   move.l 1b2c8 <speechMode>,d0
    730c:	               +-- ble.s 7344 <wrapSpeechXY+0x9e>
            if (startSound(sampleFile, FALSE)) {
    730e:	               |   clr.l -(sp)
    7310:	               |   move.l 56(sp),-(sp)
    7314:	               |   jsr c1c0 <startSound>
    731a:	               |   addq.l #8,sp
    731c:	               |   tst.w d0
    731e:	               +-- beq.s 7344 <wrapSpeechXY+0x9e>
                speechTime = -10;
    7320:	               |   moveq #-10,d0
    7322:	               |   move.l d0,24(sp)
                speech->lastFile = sampleFile;
    7326:	               |   movea.l 1b1fe <speech>,a0
    732c:	               |   move.l 52(sp),12(a0)
                if (speechMode == 2) return -10;
    7332:	               |   move.l 1b2c8 <speechMode>,d0
    7338:	               |   moveq #2,d1
    733a:	               |   cmp.l d0,d1
    733c:	               +-- bne.s 7344 <wrapSpeechXY+0x9e>
    733e:	               |   moveq #-10,d0
    7340:	/--------------|-- bra.w 75ca <wrapSpeechXY+0x324>
            }
        }
    }
    speech->speechY = y;
    7344:	|              \-> movea.l 1b1fe <speech>,a0
    734a:	|                  move.l 44(sp),8(a0)

    while (strlen(theText) > (unsigned long) wrap) {
    7350:	|     /----------- bra.w 7404 <wrapSpeechXY+0x15e>
        a = wrap;
    7354:	|  /--|----------> move.l 48(sp),28(sp)
        while (theText[a] != ' ') {
    735a:	|  |  |        /-- bra.s 736a <wrapSpeechXY+0xc4>
            a--;
    735c:	|  |  |  /-----|-> subq.l #1,28(sp)
            if (a == 0) {
    7360:	|  |  |  |     +-- bne.s 736a <wrapSpeechXY+0xc4>
                a = wrap;
    7362:	|  |  |  |     |   move.l 48(sp),28(sp)
                break;
    7368:	|  |  |  |  /--|-- bra.s 737c <wrapSpeechXY+0xd6>
        while (theText[a] != ' ') {
    736a:	|  |  |  |  |  \-> move.l 28(sp),d0
    736e:	|  |  |  |  |      movea.l 36(sp),a0
    7372:	|  |  |  |  |      adda.l d0,a0
    7374:	|  |  |  |  |      move.b (a0),d0
    7376:	|  |  |  |  |      cmpi.b #32,d0
    737a:	|  |  |  \--|----- bne.s 735c <wrapSpeechXY+0xb6>
            }
        }
        theText[a] = 0;
    737c:	|  |  |     \----> move.l 28(sp),d0
    7380:	|  |  |            movea.l 36(sp),a0
    7384:	|  |  |            adda.l d0,a0
    7386:	|  |  |            clr.b (a0)
        addSpeechLine(theText, x, &offset);
    7388:	|  |  |            lea 16(sp),a0
    738c:	|  |  |            move.l a0,-(sp)
    738e:	|  |  |            move.l 44(sp),-(sp)
    7392:	|  |  |            move.l 44(sp),-(sp)
    7396:	|  |  |            jsr 6b42 <addSpeechLine>
    739c:	|  |  |            lea 12(sp),sp
        theText[a] = ' ';
    73a0:	|  |  |            move.l 28(sp),d0
    73a4:	|  |  |            movea.l 36(sp),a0
    73a8:	|  |  |            adda.l d0,a0
    73aa:	|  |  |            move.b #32,(a0)
        theText += a + 1;
    73ae:	|  |  |            move.l 28(sp),d0
    73b2:	|  |  |            addq.l #1,d0
    73b4:	|  |  |            add.l d0,36(sp)
        y -= fontHeight / cameraZoom;
    73b8:	|  |  |            move.l 44(sp),-(sp)
    73bc:	|  |  |            jsr 15ea8 <__floatsisf>
    73c2:	|  |  |            addq.l #4,sp
    73c4:	|  |  |            move.l d0,d2
    73c6:	|  |  |            move.l 1b2f2 <fontHeight>,d0
    73cc:	|  |  |            move.l d0,-(sp)
    73ce:	|  |  |            jsr 15ea8 <__floatsisf>
    73d4:	|  |  |            addq.l #4,sp
    73d6:	|  |  |            move.l d0,d1
    73d8:	|  |  |            move.l 1ab42 <cameraZoom>,d0
    73de:	|  |  |            move.l d0,-(sp)
    73e0:	|  |  |            move.l d1,-(sp)
    73e2:	|  |  |            jsr 15d54 <__divsf3>
    73e8:	|  |  |            addq.l #8,sp
    73ea:	|  |  |            move.l d0,-(sp)
    73ec:	|  |  |            move.l d2,-(sp)
    73ee:	|  |  |            jsr 1619c <__subsf3>
    73f4:	|  |  |            addq.l #8,sp
    73f6:	|  |  |            move.l d0,-(sp)
    73f8:	|  |  |            jsr 15e40 <__fixsfsi>
    73fe:	|  |  |            addq.l #4,sp
    7400:	|  |  |            move.l d0,44(sp)
    while (strlen(theText) > (unsigned long) wrap) {
    7404:	|  |  \----------> move.l 36(sp),-(sp)
    7408:	|  |               jsr 12bea <strlen>
    740e:	|  |               addq.l #4,sp
    7410:	|  |               move.l d0,d1
    7412:	|  |               move.l 48(sp),d0
    7416:	|  |               cmp.l d1,d0
    7418:	|  \-------------- bcs.w 7354 <wrapSpeechXY+0xae>
    }
    addSpeechLine(theText, x, &offset);
    741c:	|                  lea 16(sp),a0
    7420:	|                  move.l a0,-(sp)
    7422:	|                  move.l 44(sp),-(sp)
    7426:	|                  move.l 44(sp),-(sp)
    742a:	|                  jsr 6b42 <addSpeechLine>
    7430:	|                  lea 12(sp),sp
    y -= fontHeight / cameraZoom;
    7434:	|                  move.l 44(sp),-(sp)
    7438:	|                  jsr 15ea8 <__floatsisf>
    743e:	|                  addq.l #4,sp
    7440:	|                  move.l d0,d2
    7442:	|                  move.l 1b2f2 <fontHeight>,d0
    7448:	|                  move.l d0,-(sp)
    744a:	|                  jsr 15ea8 <__floatsisf>
    7450:	|                  addq.l #4,sp
    7452:	|                  move.l d0,d1
    7454:	|                  move.l 1ab42 <cameraZoom>,d0
    745a:	|                  move.l d0,-(sp)
    745c:	|                  move.l d1,-(sp)
    745e:	|                  jsr 15d54 <__divsf3>
    7464:	|                  addq.l #8,sp
    7466:	|                  move.l d0,-(sp)
    7468:	|                  move.l d2,-(sp)
    746a:	|                  jsr 1619c <__subsf3>
    7470:	|                  addq.l #8,sp
    7472:	|                  move.l d0,-(sp)
    7474:	|                  jsr 15e40 <__fixsfsi>
    747a:	|                  addq.l #4,sp
    747c:	|                  move.l d0,44(sp)

    if (y < 0) speech->speechY -= y;
    7480:	|              /-- bpl.s 749e <wrapSpeechXY+0x1f8>
    7482:	|              |   movea.l 1b1fe <speech>,a0
    7488:	|              |   move.l 8(a0),d0
    748c:	|              |   movea.l 1b1fe <speech>,a0
    7492:	|              |   sub.l 44(sp),d0
    7496:	|              |   move.l d0,8(a0)
    749a:	|           /--|-- bra.w 758c <wrapSpeechXY+0x2e6>
    else if (speech->speechY > cameraY + (FLOAT)(winHeight - fontHeight / 3) / cameraZoom) speech->speechY = cameraY + (FLOAT)(winHeight - fontHeight / 3) / cameraZoom;
    749e:	|           |  \-> movea.l 1b1fe <speech>,a0
    74a4:	|           |      move.l 8(a0),d0
    74a8:	|           |      move.l d0,-(sp)
    74aa:	|           |      jsr 15ea8 <__floatsisf>
    74b0:	|           |      addq.l #4,sp
    74b2:	|           |      move.l d0,d2
    74b4:	|           |      move.l 1b2b8 <cameraY>,d0
    74ba:	|           |      move.l d0,-(sp)
    74bc:	|           |      jsr 15ea8 <__floatsisf>
    74c2:	|           |      addq.l #4,sp
    74c4:	|           |      move.l d0,d3
    74c6:	|           |      move.l 1b0fa <winHeight>,d4
    74cc:	|           |      move.l 1b2f2 <fontHeight>,d0
    74d2:	|           |      pea 3 <_start+0x3>
    74d6:	|           |      move.l d0,-(sp)
    74d8:	|           |      jsr 164a8 <__divsi3>
    74de:	|           |      addq.l #8,sp
    74e0:	|           |      move.l d4,d1
    74e2:	|           |      sub.l d0,d1
    74e4:	|           |      move.l d1,-(sp)
    74e6:	|           |      jsr 15ed0 <__floatunsisf>
    74ec:	|           |      addq.l #4,sp
    74ee:	|           |      move.l d0,d1
    74f0:	|           |      move.l 1ab42 <cameraZoom>,d0
    74f6:	|           |      move.l d0,-(sp)
    74f8:	|           |      move.l d1,-(sp)
    74fa:	|           |      jsr 15d54 <__divsf3>
    7500:	|           |      addq.l #8,sp
    7502:	|           |      move.l d0,-(sp)
    7504:	|           |      move.l d3,-(sp)
    7506:	|           |      jsr 15c5a <__addsf3>
    750c:	|           |      addq.l #8,sp
    750e:	|           |      move.l d0,-(sp)
    7510:	|           |      move.l d2,-(sp)
    7512:	|           |      jsr 16014 <__gtsf2>
    7518:	|           |      addq.l #8,sp
    751a:	|           |      tst.l d0
    751c:	|           +----- ble.s 758c <wrapSpeechXY+0x2e6>
    751e:	|           |      move.l 1b2b8 <cameraY>,d0
    7524:	|           |      move.l d0,-(sp)
    7526:	|           |      jsr 15ea8 <__floatsisf>
    752c:	|           |      addq.l #4,sp
    752e:	|           |      move.l d0,d2
    7530:	|           |      move.l 1b0fa <winHeight>,d3
    7536:	|           |      move.l 1b2f2 <fontHeight>,d0
    753c:	|           |      pea 3 <_start+0x3>
    7540:	|           |      move.l d0,-(sp)
    7542:	|           |      jsr 164a8 <__divsi3>
    7548:	|           |      addq.l #8,sp
    754a:	|           |      move.l d3,d1
    754c:	|           |      sub.l d0,d1
    754e:	|           |      move.l d1,-(sp)
    7550:	|           |      jsr 15ed0 <__floatunsisf>
    7556:	|           |      addq.l #4,sp
    7558:	|           |      move.l d0,d1
    755a:	|           |      move.l 1ab42 <cameraZoom>,d0
    7560:	|           |      move.l d0,-(sp)
    7562:	|           |      move.l d1,-(sp)
    7564:	|           |      jsr 15d54 <__divsf3>
    756a:	|           |      addq.l #8,sp
    756c:	|           |      move.l d0,-(sp)
    756e:	|           |      move.l d2,-(sp)
    7570:	|           |      jsr 15c5a <__addsf3>
    7576:	|           |      addq.l #8,sp
    7578:	|           |      movea.l 1b1fe <speech>,a2
    757e:	|           |      move.l d0,-(sp)
    7580:	|           |      jsr 15e40 <__fixsfsi>
    7586:	|           |      addq.l #4,sp
    7588:	|           |      move.l d0,8(a2)

    if (offset) {
    758c:	|           \----> move.l 16(sp),d0
    7590:	|        /-------- beq.s 75c6 <wrapSpeechXY+0x320>
        struct speechLine * viewLine = speech->allSpeech;
    7592:	|        |         movea.l 1b1fe <speech>,a0
    7598:	|        |         move.l 4(a0),20(sp)
        while (viewLine) {
    759e:	|        |     /-- bra.s 75c0 <wrapSpeechXY+0x31a>
            viewLine->x += offset;
    75a0:	|        |  /--|-> movea.l 20(sp),a0
    75a4:	|        |  |  |   move.l 8(a0),d1
    75a8:	|        |  |  |   move.l 16(sp),d0
    75ac:	|        |  |  |   add.l d1,d0
    75ae:	|        |  |  |   movea.l 20(sp),a0
    75b2:	|        |  |  |   move.l d0,8(a0)
            viewLine = viewLine->next;
    75b6:	|        |  |  |   movea.l 20(sp),a0
    75ba:	|        |  |  |   move.l 4(a0),20(sp)
        while (viewLine) {
    75c0:	|        |  |  \-> tst.l 20(sp)
    75c4:	|        |  \----- bne.s 75a0 <wrapSpeechXY+0x2fa>
        }
    }

    return speechTime;
    75c6:	|        \-------> move.l 24(sp),d0
}
    75ca:	\----------------> movem.l (sp)+,d2-d4/a2
    75ce:	                   lea 16(sp),sp
    75d2:	                   rts

000075d4 <killZBuffer>:
#include "stringy.h"
#include "support/gcc8_c_support.h"

struct zBufferData zBuffer;

void killZBuffer () {
    75d4:	    subq.l #4,sp
    75d6:	    move.l a6,-(sp)
	if (zBuffer.tex) {
    75d8:	    move.l 1b252 <zBuffer+0x50>,d0
    75de:	/-- beq.s 7616 <killZBuffer+0x42>
		deleteTextures (1, &zBuffer.texName);
    75e0:	|   pea 1b256 <zBuffer+0x54>
    75e6:	|   pea 1 <_start+0x1>
    75ea:	|   jsr 2ee6 <deleteTextures>
    75f0:	|   addq.l #8,sp
		zBuffer.texName = 0;
    75f2:	|   clr.l 1b256 <zBuffer+0x54>
        FreeVec(zBuffer.tex);
    75f8:	|   move.l 1b252 <zBuffer+0x50>,4(sp)
    7600:	|   move.l 1b1a2 <SysBase>,d0
    7606:	|   movea.l d0,a6
    7608:	|   movea.l 4(sp),a1
    760c:	|   jsr -690(a6)
		zBuffer.tex = NULL;
    7610:	|   clr.l 1b252 <zBuffer+0x50>
	}
	zBuffer.numPanels = 0;
    7616:	\-> clr.l 1b20a <zBuffer+0x8>
	zBuffer.originalNum =0;
    761c:	    clr.l 1b24e <zBuffer+0x4c>
}
    7622:	    nop
    7624:	    movea.l (sp)+,a6
    7626:	    addq.l #4,sp
    7628:	    rts

0000762a <setZBuffer>:

BOOL setZBuffer (unsigned int y) {
    762a:	                         lea -528(sp),sp
    762e:	                         movem.l d2-d3/a6,-(sp)
	int x, n;
	ULONG stillToGo = 0;
    7632:	                         clr.l 528(sp)
	int yPalette[16], sorted[16], sortback[16];

	killZBuffer ();
    7636:	                         jsr 75d4 <killZBuffer>

	zBuffer.originalNum = y;
    763c:	                         move.l 544(sp),d0
    7640:	                         move.l d0,1b24e <zBuffer+0x4c>
	if (! openFileFromNum (y)) return FALSE;
    7646:	                         move.l 544(sp),d0
    764a:	                         move.l d0,-(sp)
    764c:	                         jsr 5c40 <openFileFromNum>
    7652:	                         addq.l #4,sp
    7654:	                         tst.l d0
    7656:	                     /-- bne.s 765e <setZBuffer+0x34>
    7658:	                     |   clr.w d0
    765a:	/--------------------|-- bra.w 7a3c <setZBuffer+0x412>
	if (FGetC (bigDataFile) != 'S' && FGetC (bigDataFile) != 'z' && FGetC (bigDataFile) != 'b') 
    765e:	|                    \-> move.l 1b18a <bigDataFile>,524(sp)
    7666:	|                        move.l 1b1aa <DOSBase>,d0
    766c:	|                        movea.l d0,a6
    766e:	|                        move.l 524(sp),d1
    7672:	|                        jsr -306(a6)
    7676:	|                        move.l d0,520(sp)
    767a:	|                        move.l 520(sp),d0
    767e:	|                        moveq #83,d1
    7680:	|                        cmp.l d0,d1
    7682:	|                    /-- beq.s 76e4 <setZBuffer+0xba>
    7684:	|                    |   move.l 1b18a <bigDataFile>,516(sp)
    768c:	|                    |   move.l 1b1aa <DOSBase>,d0
    7692:	|                    |   movea.l d0,a6
    7694:	|                    |   move.l 516(sp),d1
    7698:	|                    |   jsr -306(a6)
    769c:	|                    |   move.l d0,512(sp)
    76a0:	|                    |   move.l 512(sp),d0
    76a4:	|                    |   moveq #122,d1
    76a6:	|                    |   cmp.l d0,d1
    76a8:	|                    +-- beq.s 76e4 <setZBuffer+0xba>
    76aa:	|                    |   move.l 1b18a <bigDataFile>,508(sp)
    76b2:	|                    |   move.l 1b1aa <DOSBase>,d0
    76b8:	|                    |   movea.l d0,a6
    76ba:	|                    |   move.l 508(sp),d1
    76be:	|                    |   jsr -306(a6)
    76c2:	|                    |   move.l d0,504(sp)
    76c6:	|                    |   move.l 504(sp),d0
    76ca:	|                    |   moveq #98,d1
    76cc:	|                    |   cmp.l d0,d1
    76ce:	|                    +-- beq.s 76e4 <setZBuffer+0xba>
	{
		 KPrintF("Not a Z-buffer file");
    76d0:	|                    |   pea 17753 <PutChar+0x1213>
    76d6:	|                    |   jsr 15bf0 <KPrintF>
    76dc:	|                    |   addq.l #4,sp
		 return FALSE;
    76de:	|                    |   clr.w d0
    76e0:	+--------------------|-- bra.w 7a3c <setZBuffer+0x412>
	}

	switch (FGetC (bigDataFile)) {
    76e4:	|                    \-> move.l 1b18a <bigDataFile>,500(sp)
    76ec:	|                        move.l 1b1aa <DOSBase>,d0
    76f2:	|                        movea.l d0,a6
    76f4:	|                        move.l 500(sp),d1
    76f8:	|                        jsr -306(a6)
    76fc:	|                        move.l d0,496(sp)
    7700:	|                        move.l 496(sp),d0
    7704:	|                    /-- beq.s 770e <setZBuffer+0xe4>
    7706:	|                    |   moveq #1,d1
    7708:	|                    |   cmp.l d0,d1
    770a:	|                 /--|-- beq.s 7724 <setZBuffer+0xfa>
    770c:	|              /--|--|-- bra.s 7752 <setZBuffer+0x128>
		case 0:
		zBuffer.width = 640;
    770e:	|              |  |  \-> move.l #640,1b202 <zBuffer>
		zBuffer.height = 480;
    7718:	|              |  |      move.l #480,1b206 <zBuffer+0x4>
		break;
    7722:	|              |  |  /-- bra.s 7766 <setZBuffer+0x13c>
		
		case 1:
		zBuffer.width = get2bytes (bigDataFile);
    7724:	|              |  \--|-> move.l 1b18a <bigDataFile>,d0
    772a:	|              |     |   move.l d0,-(sp)
    772c:	|              |     |   jsr 6bc <get2bytes>
    7732:	|              |     |   addq.l #4,sp
    7734:	|              |     |   move.l d0,1b202 <zBuffer>
		zBuffer.height = get2bytes (bigDataFile);
    773a:	|              |     |   move.l 1b18a <bigDataFile>,d0
    7740:	|              |     |   move.l d0,-(sp)
    7742:	|              |     |   jsr 6bc <get2bytes>
    7748:	|              |     |   addq.l #4,sp
    774a:	|              |     |   move.l d0,1b206 <zBuffer+0x4>
		break;
    7750:	|              |     +-- bra.s 7766 <setZBuffer+0x13c>
		
		default:
		KPrintF("Extended Z-buffer format not supported in this version of the SLUDGE engine");
    7752:	|              \-----|-> pea 17767 <PutChar+0x1227>
    7758:	|                    |   jsr 15bf0 <KPrintF>
    775e:	|                    |   addq.l #4,sp
		return FALSE;
    7760:	|                    |   clr.w d0
    7762:	+--------------------|-- bra.w 7a3c <setZBuffer+0x412>
	}
	if ((unsigned int) zBuffer.width != sceneWidth || (unsigned int) zBuffer.height != sceneHeight) {
    7766:	|                    \-> move.l 1b202 <zBuffer>,d0
    776c:	|                        move.l d0,d1
    776e:	|                        move.l 1b296 <sceneWidth>,d0
    7774:	|                        cmp.l d1,d0
    7776:	|                    /-- bne.s 778a <setZBuffer+0x160>
    7778:	|                    |   move.l 1b206 <zBuffer+0x4>,d0
    777e:	|                    |   move.l d0,d1
    7780:	|                    |   move.l 1b29a <sceneHeight>,d0
    7786:	|                    |   cmp.l d1,d0
    7788:	|                 /--|-- beq.s 77da <setZBuffer+0x1b0>
		char tmp[256];
		sprintf (tmp, "Z-w: %d Z-h:%d w: %d, h:%d", zBuffer.width, zBuffer.height, sceneWidth, sceneHeight);
    778a:	|                 |  \-> movea.l 1b29a <sceneHeight>,a1
    7790:	|                 |      movea.l 1b296 <sceneWidth>,a0
    7796:	|                 |      move.l 1b206 <zBuffer+0x4>,d1
    779c:	|                 |      move.l 1b202 <zBuffer>,d0
    77a2:	|                 |      move.l a1,-(sp)
    77a4:	|                 |      move.l a0,-(sp)
    77a6:	|                 |      move.l d1,-(sp)
    77a8:	|                 |      move.l d0,-(sp)
    77aa:	|                 |      pea 177b3 <PutChar+0x1273>
    77b0:	|                 |      moveq #32,d0
    77b2:	|                 |      add.l sp,d0
    77b4:	|                 |      move.l d0,-(sp)
    77b6:	|                 |      jsr 12f08 <sprintf>
    77bc:	|                 |      lea 24(sp),sp
		KPrintF("Z-buffer width and height don't match scene width and height", tmp);
    77c0:	|                 |      moveq #12,d0
    77c2:	|                 |      add.l sp,d0
    77c4:	|                 |      move.l d0,-(sp)
    77c6:	|                 |      pea 177ce <PutChar+0x128e>
    77cc:	|                 |      jsr 15bf0 <KPrintF>
    77d2:	|                 |      addq.l #8,sp
		return FALSE;
    77d4:	|                 |      clr.w d0
    77d6:	+-----------------|----- bra.w 7a3c <setZBuffer+0x412>
	}
		
	zBuffer.numPanels = FGetC (bigDataFile);
    77da:	|                 \----> move.l 1b18a <bigDataFile>,492(sp)
    77e2:	|                        move.l 1b1aa <DOSBase>,d0
    77e8:	|                        movea.l d0,a6
    77ea:	|                        move.l 492(sp),d1
    77ee:	|                        jsr -306(a6)
    77f2:	|                        move.l d0,488(sp)
    77f6:	|                        move.l 488(sp),d0
    77fa:	|                        move.l d0,1b20a <zBuffer+0x8>
	for (y = 0; y < (unsigned int) zBuffer.numPanels; y ++) {
    7800:	|                        clr.l 544(sp)
    7804:	|                    /-- bra.s 7830 <setZBuffer+0x206>
		yPalette[y] = get2bytes (bigDataFile);
    7806:	|                 /--|-> move.l 1b18a <bigDataFile>,d0
    780c:	|                 |  |   move.l d0,-(sp)
    780e:	|                 |  |   jsr 6bc <get2bytes>
    7814:	|                 |  |   addq.l #4,sp
    7816:	|                 |  |   move.l 544(sp),d1
    781a:	|                 |  |   add.l d1,d1
    781c:	|                 |  |   add.l d1,d1
    781e:	|                 |  |   lea 540(sp),a0
    7822:	|                 |  |   add.l a0,d1
    7824:	|                 |  |   movea.l d1,a0
    7826:	|                 |  |   lea -144(a0),a0
    782a:	|                 |  |   move.l d0,(a0)
	for (y = 0; y < (unsigned int) zBuffer.numPanels; y ++) {
    782c:	|                 |  |   addq.l #1,544(sp)
    7830:	|                 |  \-> move.l 1b20a <zBuffer+0x8>,d0
    7836:	|                 |      cmp.l 544(sp),d0
    783a:	|                 \----- bhi.s 7806 <setZBuffer+0x1dc>
	}
	sortZPal (yPalette, sorted, zBuffer.numPanels);
    783c:	|                        move.l 1b20a <zBuffer+0x8>,d0
    7842:	|                        move.l d0,-(sp)
    7844:	|                        move.l sp,d0
    7846:	|                        addi.l #336,d0
    784c:	|                        move.l d0,-(sp)
    784e:	|                        move.l sp,d0
    7850:	|                        addi.l #404,d0
    7856:	|                        move.l d0,-(sp)
    7858:	|                        jsr 7a46 <sortZPal>
    785e:	|                        lea 12(sp),sp
	for (y = 0; y < (unsigned int) zBuffer.numPanels; y ++) {
    7862:	|                        clr.l 544(sp)
    7866:	|                    /-- bra.s 78de <setZBuffer+0x2b4>
		zBuffer.panel[y] = yPalette[sorted[y]];
    7868:	|                 /--|-> move.l 544(sp),d0
    786c:	|                 |  |   add.l d0,d0
    786e:	|                 |  |   add.l d0,d0
    7870:	|                 |  |   move.l #540,d1
    7876:	|                 |  |   add.l sp,d1
    7878:	|                 |  |   add.l d1,d0
    787a:	|                 |  |   movea.l d0,a0
    787c:	|                 |  |   lea -208(a0),a0
    7880:	|                 |  |   move.l (a0),d0
    7882:	|                 |  |   add.l d0,d0
    7884:	|                 |  |   add.l d0,d0
    7886:	|                 |  |   lea 540(sp),a0
    788a:	|                 |  |   add.l a0,d0
    788c:	|                 |  |   movea.l d0,a0
    788e:	|                 |  |   lea -144(a0),a0
    7892:	|                 |  |   move.l (a0),d0
    7894:	|                 |  |   move.l 544(sp),d1
    7898:	|                 |  |   addq.l #3,d1
    789a:	|                 |  |   add.l d1,d1
    789c:	|                 |  |   movea.l d1,a1
    789e:	|                 |  |   adda.l d1,a1
    78a0:	|                 |  |   lea 1b202 <zBuffer>,a0
    78a6:	|                 |  |   move.l d0,(0,a1,a0.l)
		sortback[sorted[y]] = y; 
    78aa:	|                 |  |   move.l 544(sp),d0
    78ae:	|                 |  |   add.l d0,d0
    78b0:	|                 |  |   add.l d0,d0
    78b2:	|                 |  |   move.l #540,d1
    78b8:	|                 |  |   add.l sp,d1
    78ba:	|                 |  |   add.l d1,d0
    78bc:	|                 |  |   movea.l d0,a0
    78be:	|                 |  |   lea -208(a0),a0
    78c2:	|                 |  |   move.l (a0),d1
    78c4:	|                 |  |   move.l 544(sp),d0
    78c8:	|                 |  |   add.l d1,d1
    78ca:	|                 |  |   add.l d1,d1
    78cc:	|                 |  |   lea 540(sp),a0
    78d0:	|                 |  |   add.l a0,d1
    78d2:	|                 |  |   movea.l d1,a0
    78d4:	|                 |  |   lea -272(a0),a0
    78d8:	|                 |  |   move.l d0,(a0)
	for (y = 0; y < (unsigned int) zBuffer.numPanels; y ++) {
    78da:	|                 |  |   addq.l #1,544(sp)
    78de:	|                 |  \-> move.l 1b20a <zBuffer+0x8>,d0
    78e4:	|                 |      cmp.l 544(sp),d0
    78e8:	|                 \----- bhi.w 7868 <setZBuffer+0x23e>
	}
	
	int picWidth = sceneWidth;
    78ec:	|                        move.l 1b296 <sceneWidth>,d0
    78f2:	|                        move.l d0,484(sp)
	int picHeight = sceneHeight;
    78f6:	|                        move.l 1b29a <sceneHeight>,d0
    78fc:	|                        move.l d0,480(sp)

	zBuffer.tex = AllocVec(picHeight*picWidth,MEMF_ANY);
    7900:	|                        move.l 484(sp),-(sp)
    7904:	|                        move.l 484(sp),-(sp)
    7908:	|                        jsr 1642a <__mulsi3>
    790e:	|                        addq.l #8,sp
    7910:	|                        move.l d0,476(sp)
    7914:	|                        clr.l 472(sp)
    7918:	|                        move.l 1b1a2 <SysBase>,d0
    791e:	|                        movea.l d0,a6
    7920:	|                        move.l 476(sp),d0
    7924:	|                        move.l 472(sp),d1
    7928:	|                        jsr -684(a6)
    792c:	|                        move.l d0,468(sp)
    7930:	|                        move.l 468(sp),d0
    7934:	|                        move.l d0,1b252 <zBuffer+0x50>
	if (!zBuffer.tex) {
    793a:	|                        move.l 1b252 <zBuffer+0x50>,d0
    7940:	|                    /-- bne.s 7956 <setZBuffer+0x32c>
		KPrintF("setZBuffer: Cannot allocate memory");
    7942:	|                    |   pea 1780b <PutChar+0x12cb>
    7948:	|                    |   jsr 15bf0 <KPrintF>
    794e:	|                    |   addq.l #4,sp
		return FALSE;
    7950:	|                    |   clr.w d0
    7952:	+--------------------|-- bra.w 7a3c <setZBuffer+0x412>
	}

	for (y = 0; y < sceneHeight; y ++) {
    7956:	|                    \-> clr.l 544(sp)
    795a:	|     /----------------- bra.w 7a26 <setZBuffer+0x3fc>
		for (x = 0; (unsigned int) x < sceneWidth; x ++) {
    795e:	|  /--|----------------> clr.l 536(sp)
    7962:	|  |  |     /----------- bra.w 7a12 <setZBuffer+0x3e8>
			if (stillToGo == 0) {
    7966:	|  |  |  /--|----------> tst.l 528(sp)
    796a:	|  |  |  |  |  /-------- bne.s 79c8 <setZBuffer+0x39e>
				n = FGetC (bigDataFile);
    796c:	|  |  |  |  |  |         move.l 1b18a <bigDataFile>,464(sp)
    7974:	|  |  |  |  |  |         move.l 1b1aa <DOSBase>,d0
    797a:	|  |  |  |  |  |         movea.l d0,a6
    797c:	|  |  |  |  |  |         move.l 464(sp),d1
    7980:	|  |  |  |  |  |         jsr -306(a6)
    7984:	|  |  |  |  |  |         move.l d0,460(sp)
    7988:	|  |  |  |  |  |         move.l 460(sp),d0
    798c:	|  |  |  |  |  |         move.l d0,532(sp)
				stillToGo = n >> 4;
    7990:	|  |  |  |  |  |         move.l 532(sp),d0
    7994:	|  |  |  |  |  |         asr.l #4,d0
    7996:	|  |  |  |  |  |         move.l d0,528(sp)
				if (stillToGo == 15) stillToGo = get2bytes (bigDataFile) + 16l;
    799a:	|  |  |  |  |  |         moveq #15,d0
    799c:	|  |  |  |  |  |         cmp.l 528(sp),d0
    79a0:	|  |  |  |  |  |  /----- bne.s 79be <setZBuffer+0x394>
    79a2:	|  |  |  |  |  |  |      move.l 1b18a <bigDataFile>,d0
    79a8:	|  |  |  |  |  |  |      move.l d0,-(sp)
    79aa:	|  |  |  |  |  |  |      jsr 6bc <get2bytes>
    79b0:	|  |  |  |  |  |  |      addq.l #4,sp
    79b2:	|  |  |  |  |  |  |      movea.l d0,a0
    79b4:	|  |  |  |  |  |  |      lea 16(a0),a0
    79b8:	|  |  |  |  |  |  |      move.l a0,528(sp)
    79bc:	|  |  |  |  |  |  |  /-- bra.s 79c2 <setZBuffer+0x398>
				else stillToGo ++;
    79be:	|  |  |  |  |  |  \--|-> addq.l #1,528(sp)
				n &= 15;
    79c2:	|  |  |  |  |  |     \-> moveq #15,d1
    79c4:	|  |  |  |  |  |         and.l d1,532(sp)
			}
			zBuffer.tex[y*picWidth + x] = sortback[n]*16;
    79c8:	|  |  |  |  |  \-------> move.l 532(sp),d0
    79cc:	|  |  |  |  |            add.l d0,d0
    79ce:	|  |  |  |  |            add.l d0,d0
    79d0:	|  |  |  |  |            lea 540(sp),a0
    79d4:	|  |  |  |  |            add.l a0,d0
    79d6:	|  |  |  |  |            movea.l d0,a0
    79d8:	|  |  |  |  |            lea -272(a0),a0
    79dc:	|  |  |  |  |            move.l (a0),d0
    79de:	|  |  |  |  |            move.l d0,d2
    79e0:	|  |  |  |  |            move.l 1b252 <zBuffer+0x50>,d3
    79e6:	|  |  |  |  |            move.l 484(sp),d0
    79ea:	|  |  |  |  |            move.l 544(sp),-(sp)
    79ee:	|  |  |  |  |            move.l d0,-(sp)
    79f0:	|  |  |  |  |            jsr 1642a <__mulsi3>
    79f6:	|  |  |  |  |            addq.l #8,sp
    79f8:	|  |  |  |  |            move.l d0,d1
    79fa:	|  |  |  |  |            move.l 536(sp),d0
    79fe:	|  |  |  |  |            add.l d1,d0
    7a00:	|  |  |  |  |            movea.l d3,a0
    7a02:	|  |  |  |  |            adda.l d0,a0
    7a04:	|  |  |  |  |            move.b d2,d0
    7a06:	|  |  |  |  |            lsl.b #4,d0
    7a08:	|  |  |  |  |            move.b d0,(a0)
			stillToGo --;
    7a0a:	|  |  |  |  |            subq.l #1,528(sp)
		for (x = 0; (unsigned int) x < sceneWidth; x ++) {
    7a0e:	|  |  |  |  |            addq.l #1,536(sp)
    7a12:	|  |  |  |  \----------> move.l 536(sp),d1
    7a16:	|  |  |  |               move.l 1b296 <sceneWidth>,d0
    7a1c:	|  |  |  |               cmp.l d1,d0
    7a1e:	|  |  |  \-------------- bhi.w 7966 <setZBuffer+0x33c>
	for (y = 0; y < sceneHeight; y ++) {
    7a22:	|  |  |                  addq.l #1,544(sp)
    7a26:	|  |  \----------------> move.l 1b29a <sceneHeight>,d0
    7a2c:	|  |                     cmp.l 544(sp),d0
    7a30:	|  \-------------------- bhi.w 795e <setZBuffer+0x334>
		}
	}

	finishAccess ();
    7a34:	|                        jsr 5b38 <finishAccess>
	
	return TRUE;
    7a3a:	|                        moveq #1,d0
}
    7a3c:	\----------------------> movem.l (sp)+,d2-d3/a6
    7a40:	                         lea 528(sp),sp
    7a44:	                         rts

00007a46 <sortZPal>:

void sortZPal (int *oldpal, int *newpal, int size) {
    7a46:	             subq.l #8,sp
	int i, tmp;

	for (i = 0; i < size; i ++) {
    7a48:	             clr.l 4(sp)
    7a4c:	         /-- bra.s 7a64 <sortZPal+0x1e>
		newpal[i] = i;
    7a4e:	      /--|-> move.l 4(sp),d0
    7a52:	      |  |   add.l d0,d0
    7a54:	      |  |   add.l d0,d0
    7a56:	      |  |   movea.l 16(sp),a0
    7a5a:	      |  |   adda.l d0,a0
    7a5c:	      |  |   move.l 4(sp),(a0)
	for (i = 0; i < size; i ++) {
    7a60:	      |  |   addq.l #1,4(sp)
    7a64:	      |  \-> move.l 4(sp),d0
    7a68:	      |      cmp.l 20(sp),d0
    7a6c:	      \----- blt.s 7a4e <sortZPal+0x8>
	}

	if (size < 2) return;		
    7a6e:	             moveq #1,d0
    7a70:	             cmp.l 20(sp),d0
    7a74:	/----------- bge.w 7b26 <sortZPal+0xe0>
		
	for (i = 1; i < size; i ++) {
    7a78:	|            moveq #1,d0
    7a7a:	|            move.l d0,4(sp)
    7a7e:	|     /----- bra.w 7b18 <sortZPal+0xd2>
		if (oldpal[newpal[i]] < oldpal[newpal[i-1]]) {
    7a82:	|  /--|----> move.l 4(sp),d0
    7a86:	|  |  |      add.l d0,d0
    7a88:	|  |  |      add.l d0,d0
    7a8a:	|  |  |      movea.l 16(sp),a0
    7a8e:	|  |  |      adda.l d0,a0
    7a90:	|  |  |      move.l (a0),d0
    7a92:	|  |  |      add.l d0,d0
    7a94:	|  |  |      add.l d0,d0
    7a96:	|  |  |      movea.l 12(sp),a0
    7a9a:	|  |  |      adda.l d0,a0
    7a9c:	|  |  |      move.l (a0),d1
    7a9e:	|  |  |      move.l 4(sp),d0
    7aa2:	|  |  |      addi.l #1073741823,d0
    7aa8:	|  |  |      add.l d0,d0
    7aaa:	|  |  |      add.l d0,d0
    7aac:	|  |  |      movea.l 16(sp),a0
    7ab0:	|  |  |      adda.l d0,a0
    7ab2:	|  |  |      move.l (a0),d0
    7ab4:	|  |  |      add.l d0,d0
    7ab6:	|  |  |      add.l d0,d0
    7ab8:	|  |  |      movea.l 12(sp),a0
    7abc:	|  |  |      adda.l d0,a0
    7abe:	|  |  |      move.l (a0),d0
    7ac0:	|  |  |      cmp.l d1,d0
    7ac2:	|  |  |  /-- ble.s 7b14 <sortZPal+0xce>
			tmp = newpal[i];
    7ac4:	|  |  |  |   move.l 4(sp),d0
    7ac8:	|  |  |  |   add.l d0,d0
    7aca:	|  |  |  |   add.l d0,d0
    7acc:	|  |  |  |   movea.l 16(sp),a0
    7ad0:	|  |  |  |   adda.l d0,a0
    7ad2:	|  |  |  |   move.l (a0),(sp)
			newpal[i] = newpal[i-1];
    7ad4:	|  |  |  |   move.l 4(sp),d0
    7ad8:	|  |  |  |   addi.l #1073741823,d0
    7ade:	|  |  |  |   add.l d0,d0
    7ae0:	|  |  |  |   add.l d0,d0
    7ae2:	|  |  |  |   movea.l 16(sp),a1
    7ae6:	|  |  |  |   adda.l d0,a1
    7ae8:	|  |  |  |   move.l 4(sp),d0
    7aec:	|  |  |  |   add.l d0,d0
    7aee:	|  |  |  |   add.l d0,d0
    7af0:	|  |  |  |   movea.l 16(sp),a0
    7af4:	|  |  |  |   adda.l d0,a0
    7af6:	|  |  |  |   move.l (a1),d0
    7af8:	|  |  |  |   move.l d0,(a0)
			newpal[i-1] = tmp;
    7afa:	|  |  |  |   move.l 4(sp),d0
    7afe:	|  |  |  |   addi.l #1073741823,d0
    7b04:	|  |  |  |   add.l d0,d0
    7b06:	|  |  |  |   add.l d0,d0
    7b08:	|  |  |  |   movea.l 16(sp),a0
    7b0c:	|  |  |  |   adda.l d0,a0
    7b0e:	|  |  |  |   move.l (sp),(a0)
			i = 0;
    7b10:	|  |  |  |   clr.l 4(sp)
	for (i = 1; i < size; i ++) {
    7b14:	|  |  |  \-> addq.l #1,4(sp)
    7b18:	|  |  \----> move.l 4(sp),d0
    7b1c:	|  |         cmp.l 20(sp),d0
    7b20:	|  \-------- blt.w 7a82 <sortZPal+0x3c>
    7b24:	|        /-- bra.s 7b28 <sortZPal+0xe2>
	if (size < 2) return;		
    7b26:	\--------|-> nop
		}
	}
    7b28:	         \-> addq.l #8,sp
    7b2a:	             rts

00007b2c <forgetSpriteBank>:
extern int cameraX, cameraY;
extern struct inputType input;


void forgetSpriteBank (struct loadedSpriteBank * forgetme)
{			
    7b2c:	          lea -36(sp),sp
    7b30:	          move.l a6,-(sp)

	struct spriteBank *spritebanktoforget = &forgetme->bank;
    7b32:	          move.l 44(sp),d0
    7b36:	          addq.l #8,d0
    7b38:	          move.l d0,28(sp)
	
	for (int i = 0; i < spritebanktoforget->total; i++) {
    7b3c:	          clr.l 36(sp)
    7b40:	   /----- bra.s 7b86 <forgetSpriteBank+0x5a>
		struct sprite *cursprite = &spritebanktoforget->sprites[i];		
    7b42:	/--|----> movea.l 28(sp),a0
    7b46:	|  |      movea.l 8(a0),a0
    7b4a:	|  |      move.l 36(sp),d1
    7b4e:	|  |      move.l d1,d0
    7b50:	|  |      lsl.l #3,d0
    7b52:	|  |      sub.l d1,d0
    7b54:	|  |      add.l d0,d0
    7b56:	|  |      add.l d0,d0
    7b58:	|  |      adda.l d0,a0
    7b5a:	|  |      move.l a0,8(sp)
		if(cursprite->data) {		
    7b5e:	|  |      movea.l 8(sp),a0
    7b62:	|  |      move.l 24(a0),d0
    7b66:	|  |  /-- beq.s 7b82 <forgetSpriteBank+0x56>
			FreeVec(cursprite->data);			
    7b68:	|  |  |   movea.l 8(sp),a0
    7b6c:	|  |  |   move.l 24(a0),4(sp)
    7b72:	|  |  |   move.l 1b1a2 <SysBase>,d0
    7b78:	|  |  |   movea.l d0,a6
    7b7a:	|  |  |   movea.l 4(sp),a1
    7b7e:	|  |  |   jsr -690(a6)
	for (int i = 0; i < spritebanktoforget->total; i++) {
    7b82:	|  |  \-> addq.l #1,36(sp)
    7b86:	|  \----> movea.l 28(sp),a0
    7b8a:	|         move.l (a0),d0
    7b8c:	|         cmp.l 36(sp),d0
    7b90:	\-------- bgt.s 7b42 <forgetSpriteBank+0x16>
		}
	}
	FreeVec(spritebanktoforget->sprites);
    7b92:	          movea.l 28(sp),a0
    7b96:	          move.l 8(a0),24(sp)
    7b9c:	          move.l 1b1a2 <SysBase>,d0
    7ba2:	          movea.l d0,a6
    7ba4:	          movea.l 24(sp),a1
    7ba8:	          jsr -690(a6)
	FreeVec(spritebanktoforget);
    7bac:	          move.l 28(sp),20(sp)
    7bb2:	          move.l 1b1a2 <SysBase>,d0
    7bb8:	          movea.l d0,a6
    7bba:	          movea.l 20(sp),a1
    7bbe:	          jsr -690(a6)
	
	struct loadedSpriteBank *precedingbank = allLoadedBanks;
    7bc2:	          move.l 1b30a <allLoadedBanks>,32(sp)
	
	while(precedingbank->next->ID != forgetme->ID && precedingbank != NULL)
    7bca:	      /-- bra.s 7bd6 <forgetSpriteBank+0xaa>
	{
		precedingbank = precedingbank->next;
    7bcc:	   /--|-> movea.l 32(sp),a0
    7bd0:	   |  |   move.l 22(a0),32(sp)
	while(precedingbank->next->ID != forgetme->ID && precedingbank != NULL)
    7bd6:	   |  \-> movea.l 32(sp),a0
    7bda:	   |      movea.l 22(a0),a0
    7bde:	   |      move.l (a0),d1
    7be0:	   |      movea.l 44(sp),a0
    7be4:	   |      move.l (a0),d0
    7be6:	   |      cmp.l d1,d0
    7be8:	   |  /-- beq.s 7bf0 <forgetSpriteBank+0xc4>
    7bea:	   |  |   tst.l 32(sp)
    7bee:	   \--|-- bne.s 7bcc <forgetSpriteBank+0xa0>
	}	

	if(precedingbank)
    7bf0:	      \-> tst.l 32(sp)
    7bf4:	   /----- beq.s 7c1e <forgetSpriteBank+0xf2>
	{
		//Forget element in the middle of the chain or the last one
		precedingbank->next = forgetme->next;
    7bf6:	   |      movea.l 44(sp),a0
    7bfa:	   |      move.l 22(a0),d0
    7bfe:	   |      movea.l 32(sp),a0
    7c02:	   |      move.l d0,22(a0)
		FreeVec( forgetme);
    7c06:	   |      move.l 44(sp),12(sp)
    7c0c:	   |      move.l 1b1a2 <SysBase>,d0
    7c12:	   |      movea.l d0,a6
    7c14:	   |      movea.l 12(sp),a1
    7c18:	   |      jsr -690(a6)
	{
		//Forget first element in the chain
		allLoadedBanks = allLoadedBanks->next;
		FreeVec( forgetme);
	}	
}
    7c1c:	   |  /-- bra.s 7c44 <forgetSpriteBank+0x118>
		allLoadedBanks = allLoadedBanks->next;
    7c1e:	   \--|-> movea.l 1b30a <allLoadedBanks>,a0
    7c24:	      |   move.l 22(a0),d0
    7c28:	      |   move.l d0,1b30a <allLoadedBanks>
		FreeVec( forgetme);
    7c2e:	      |   move.l 44(sp),16(sp)
    7c34:	      |   move.l 1b1a2 <SysBase>,d0
    7c3a:	      |   movea.l d0,a6
    7c3c:	      |   movea.l 16(sp),a1
    7c40:	      |   jsr -690(a6)
}
    7c44:	      \-> nop
    7c46:	          movea.l (sp)+,a6
    7c48:	          lea 36(sp),sp
    7c4c:	          rts

00007c4e <loadSpriteBank>:

BOOL loadSpriteBank (int fileNum, struct spriteBank *loadhere, BOOL isFont) {
    7c4e:	                lea -80(sp),sp
    7c52:	                movem.l d2-d4/a2/a6,-(sp)
    7c56:	                move.l 112(sp),d0
    7c5a:	                move.w d0,d0
    7c5c:	                move.w d0,22(sp)
	int i, tex_num, total, picwidth, picheight, howmany = 0, startIndex = 0;
    7c60:	                clr.l 90(sp)
    7c64:	                clr.l 86(sp)
	int *totalwidth, *maxheight;
	int numTextures = 0;
    7c68:	                clr.l 82(sp)
	UBYTE *data;

	if (!openFileFromNum(fileNum)) {
    7c6c:	                move.l 104(sp),-(sp)
    7c70:	                jsr 5c40 <openFileFromNum>
    7c76:	                addq.l #4,sp
    7c78:	                tst.l d0
    7c7a:	            /-- bne.s 7c90 <loadSpriteBank+0x42>
		KPrintF("loadSpriteBank: Can't open sprite bank / font");
    7c7c:	            |   pea 1782e <PutChar+0x12ee>
    7c82:	            |   jsr 15bf0 <KPrintF>
    7c88:	            |   addq.l #4,sp
		return FALSE;
    7c8a:	            |   clr.w d0
    7c8c:	/-----------|-- bra.w 7f98 <loadSpriteBank+0x34a>
	}

	loadhere->isFont = isFont;
    7c90:	|           \-> movea.l 108(sp),a0
    7c94:	|               move.w 22(sp),12(a0)

	get2bytes(bigDataFile); // Ignore first 2 bytes
    7c9a:	|               move.l 1b18a <bigDataFile>,d0
    7ca0:	|               move.l d0,-(sp)
    7ca2:	|               jsr 6bc <get2bytes>
    7ca8:	|               addq.l #4,sp
	loadhere->type = FGetC(bigDataFile);
    7caa:	|               move.l 1b18a <bigDataFile>,78(sp)
    7cb2:	|               move.l 1b1aa <DOSBase>,d0
    7cb8:	|               movea.l d0,a6
    7cba:	|               move.l 78(sp),d1
    7cbe:	|               jsr -306(a6)
    7cc2:	|               move.l d0,74(sp)
    7cc6:	|               move.l 74(sp),d0
    7cca:	|               movea.l 108(sp),a0
    7cce:	|               move.l d0,4(a0)
	total = get2bytes(bigDataFile);
    7cd2:	|               move.l 1b18a <bigDataFile>,d0
    7cd8:	|               move.l d0,-(sp)
    7cda:	|               jsr 6bc <get2bytes>
    7ce0:	|               addq.l #4,sp
    7ce2:	|               move.l d0,70(sp)

	if (total <= 0) {
    7ce6:	|           /-- bgt.s 7cfc <loadSpriteBank+0xae>
		KPrintF("loadSpriteBank: No sprites in bank or invalid sprite bank file\n");
    7ce8:	|           |   pea 1785c <PutChar+0x131c>
    7cee:	|           |   jsr 15bf0 <KPrintF>
    7cf4:	|           |   addq.l #4,sp
		return FALSE;
    7cf6:	|           |   clr.w d0
    7cf8:	+-----------|-- bra.w 7f98 <loadSpriteBank+0x34a>
	}
	if (loadhere->type > 2) {
    7cfc:	|           \-> movea.l 108(sp),a0
    7d00:	|               move.l 4(a0),d0
    7d04:	|               moveq #2,d1
    7d06:	|               cmp.l d0,d1
    7d08:	|           /-- bge.s 7d1e <loadSpriteBank+0xd0>
		KPrintF("loadSpriteBank: Unsupported sprite bank file format\n");
    7d0a:	|           |   pea 1789c <PutChar+0x135c>
    7d10:	|           |   jsr 15bf0 <KPrintF>
    7d16:	|           |   addq.l #4,sp
		return FALSE;
    7d18:	|           |   clr.w d0
    7d1a:	+-----------|-- bra.w 7f98 <loadSpriteBank+0x34a>
	}

	loadhere->total = total;
    7d1e:	|           \-> movea.l 108(sp),a0
    7d22:	|               move.l 70(sp),(a0)
	loadhere->sprites = AllocVec(sizeof(struct sprite) * total, MEMF_ANY);
    7d26:	|               move.l 70(sp),d1
    7d2a:	|               move.l d1,d0
    7d2c:	|               lsl.l #3,d0
    7d2e:	|               sub.l d1,d0
    7d30:	|               add.l d0,d0
    7d32:	|               add.l d0,d0
    7d34:	|               move.l d0,66(sp)
    7d38:	|               clr.l 62(sp)
    7d3c:	|               move.l 1b1a2 <SysBase>,d0
    7d42:	|               movea.l d0,a6
    7d44:	|               move.l 66(sp),d0
    7d48:	|               move.l 62(sp),d1
    7d4c:	|               jsr -684(a6)
    7d50:	|               move.l d0,58(sp)
    7d54:	|               move.l 58(sp),d0
    7d58:	|               movea.l 108(sp),a0
    7d5c:	|               move.l d0,8(a0)
	if (!loadhere->sprites) return FALSE;	
    7d60:	|               movea.l 108(sp),a0
    7d64:	|               move.l 8(a0),d0
    7d68:	|           /-- bne.s 7d70 <loadSpriteBank+0x122>
    7d6a:	|           |   clr.w d0
    7d6c:	+-----------|-- bra.w 7f98 <loadSpriteBank+0x34a>
	
	startIndex = 1;
    7d70:	|           \-> moveq #1,d0
    7d72:	|               move.l d0,86(sp)

	for (i = 0; i < total; i++) {
    7d76:	|               clr.l 96(sp)
    7d7a:	|     /-------- bra.w 7f84 <loadSpriteBank+0x336>
		loadhere->sprites[i].width = get2bytes(bigDataFile);
    7d7e:	|  /--|-------> movea.l 1b18a <bigDataFile>,a1
    7d84:	|  |  |         movea.l 108(sp),a0
    7d88:	|  |  |         movea.l 8(a0),a0
    7d8c:	|  |  |         move.l 96(sp),d1
    7d90:	|  |  |         move.l d1,d0
    7d92:	|  |  |         lsl.l #3,d0
    7d94:	|  |  |         sub.l d1,d0
    7d96:	|  |  |         add.l d0,d0
    7d98:	|  |  |         add.l d0,d0
    7d9a:	|  |  |         lea (0,a0,d0.l),a2
    7d9e:	|  |  |         move.l a1,-(sp)
    7da0:	|  |  |         jsr 6bc <get2bytes>
    7da6:	|  |  |         addq.l #4,sp
    7da8:	|  |  |         move.l d0,(a2)
		loadhere->sprites[i].height = get2bytes(bigDataFile);
    7daa:	|  |  |         movea.l 1b18a <bigDataFile>,a1
    7db0:	|  |  |         movea.l 108(sp),a0
    7db4:	|  |  |         movea.l 8(a0),a0
    7db8:	|  |  |         move.l 96(sp),d1
    7dbc:	|  |  |         move.l d1,d0
    7dbe:	|  |  |         lsl.l #3,d0
    7dc0:	|  |  |         sub.l d1,d0
    7dc2:	|  |  |         add.l d0,d0
    7dc4:	|  |  |         add.l d0,d0
    7dc6:	|  |  |         lea (0,a0,d0.l),a2
    7dca:	|  |  |         move.l a1,-(sp)
    7dcc:	|  |  |         jsr 6bc <get2bytes>
    7dd2:	|  |  |         addq.l #4,sp
    7dd4:	|  |  |         move.l d0,4(a2)
		loadhere->sprites[i].xhot = get2bytes(bigDataFile);
    7dd8:	|  |  |         movea.l 1b18a <bigDataFile>,a1
    7dde:	|  |  |         movea.l 108(sp),a0
    7de2:	|  |  |         movea.l 8(a0),a0
    7de6:	|  |  |         move.l 96(sp),d1
    7dea:	|  |  |         move.l d1,d0
    7dec:	|  |  |         lsl.l #3,d0
    7dee:	|  |  |         sub.l d1,d0
    7df0:	|  |  |         add.l d0,d0
    7df2:	|  |  |         add.l d0,d0
    7df4:	|  |  |         lea (0,a0,d0.l),a2
    7df8:	|  |  |         move.l a1,-(sp)
    7dfa:	|  |  |         jsr 6bc <get2bytes>
    7e00:	|  |  |         addq.l #4,sp
    7e02:	|  |  |         move.l d0,8(a2)
		loadhere->sprites[i].yhot = get2bytes(bigDataFile);
    7e06:	|  |  |         movea.l 1b18a <bigDataFile>,a1
    7e0c:	|  |  |         movea.l 108(sp),a0
    7e10:	|  |  |         movea.l 8(a0),a0
    7e14:	|  |  |         move.l 96(sp),d1
    7e18:	|  |  |         move.l d1,d0
    7e1a:	|  |  |         lsl.l #3,d0
    7e1c:	|  |  |         sub.l d1,d0
    7e1e:	|  |  |         add.l d0,d0
    7e20:	|  |  |         add.l d0,d0
    7e22:	|  |  |         lea (0,a0,d0.l),a2
    7e26:	|  |  |         move.l a1,-(sp)
    7e28:	|  |  |         jsr 6bc <get2bytes>
    7e2e:	|  |  |         addq.l #4,sp
    7e30:	|  |  |         move.l d0,12(a2)

		UWORD size;
		// ToDo Load Data
		if( loadhere->type == 1) 
    7e34:	|  |  |         movea.l 108(sp),a0
    7e38:	|  |  |         move.l 4(a0),d0
    7e3c:	|  |  |         moveq #1,d1
    7e3e:	|  |  |         cmp.l d0,d1
    7e40:	|  |  |     /-- bne.s 7e6c <loadSpriteBank+0x21e>
		//Mousecursor Data (4 Colors HW-Sprite)
		{
			size = 4*loadhere->sprites[i].height+8;
    7e42:	|  |  |     |   movea.l 108(sp),a0
    7e46:	|  |  |     |   movea.l 8(a0),a0
    7e4a:	|  |  |     |   move.l 96(sp),d1
    7e4e:	|  |  |     |   move.l d1,d0
    7e50:	|  |  |     |   lsl.l #3,d0
    7e52:	|  |  |     |   sub.l d1,d0
    7e54:	|  |  |     |   add.l d0,d0
    7e56:	|  |  |     |   add.l d0,d0
    7e58:	|  |  |     |   adda.l d0,a0
    7e5a:	|  |  |     |   move.l 4(a0),d0
    7e5e:	|  |  |     |   addq.l #2,d0
    7e60:	|  |  |     |   move.l d0,d0
    7e62:	|  |  |     |   add.w d0,d0
    7e64:	|  |  |     |   add.w d0,d0
    7e66:	|  |  |     |   move.w d0,94(sp)
    7e6a:	|  |  |  /--|-- bra.s 7ebc <loadSpriteBank+0x26e>
		} else {
			size = loadhere->sprites[i].width / 8 * loadhere->sprites[i].height * 6;
    7e6c:	|  |  |  |  \-> movea.l 108(sp),a0
    7e70:	|  |  |  |      movea.l 8(a0),a0
    7e74:	|  |  |  |      move.l 96(sp),d1
    7e78:	|  |  |  |      move.l d1,d0
    7e7a:	|  |  |  |      lsl.l #3,d0
    7e7c:	|  |  |  |      sub.l d1,d0
    7e7e:	|  |  |  |      add.l d0,d0
    7e80:	|  |  |  |      add.l d0,d0
    7e82:	|  |  |  |      adda.l d0,a0
    7e84:	|  |  |  |      move.l (a0),d0
    7e86:	|  |  |  |  /-- bpl.s 7e8a <loadSpriteBank+0x23c>
    7e88:	|  |  |  |  |   addq.l #7,d0
    7e8a:	|  |  |  |  \-> asr.l #3,d0
    7e8c:	|  |  |  |      move.l d0,d2
    7e8e:	|  |  |  |      movea.l 108(sp),a0
    7e92:	|  |  |  |      movea.l 8(a0),a0
    7e96:	|  |  |  |      move.l 96(sp),d1
    7e9a:	|  |  |  |      move.l d1,d0
    7e9c:	|  |  |  |      lsl.l #3,d0
    7e9e:	|  |  |  |      sub.l d1,d0
    7ea0:	|  |  |  |      add.l d0,d0
    7ea2:	|  |  |  |      add.l d0,d0
    7ea4:	|  |  |  |      adda.l d0,a0
    7ea6:	|  |  |  |      move.l 4(a0),d0
    7eaa:	|  |  |  |      move.l d0,d0
    7eac:	|  |  |  |      move.w d2,d1
    7eae:	|  |  |  |      muls.w d0,d1
    7eb0:	|  |  |  |      move.w d1,d0
    7eb2:	|  |  |  |      add.w d0,d0
    7eb4:	|  |  |  |      add.w d1,d0
    7eb6:	|  |  |  |      add.w d0,d0
    7eb8:	|  |  |  |      move.w d0,94(sp)
		}
		loadhere->sprites[i].data = AllocVec(sizeof(UWORD) * size, MEMF_CHIP);
    7ebc:	|  |  |  \----> moveq #0,d0
    7ebe:	|  |  |         move.w 94(sp),d0
    7ec2:	|  |  |         add.l d0,d0
    7ec4:	|  |  |         move.l d0,54(sp)
    7ec8:	|  |  |         moveq #2,d0
    7eca:	|  |  |         move.l d0,50(sp)
    7ece:	|  |  |         move.l 1b1a2 <SysBase>,d0
    7ed4:	|  |  |         movea.l d0,a6
    7ed6:	|  |  |         move.l 54(sp),d0
    7eda:	|  |  |         move.l 50(sp),d1
    7ede:	|  |  |         jsr -684(a6)
    7ee2:	|  |  |         move.l d0,46(sp)
    7ee6:	|  |  |         movea.l 46(sp),a1
    7eea:	|  |  |         movea.l 108(sp),a0
    7eee:	|  |  |         movea.l 8(a0),a0
    7ef2:	|  |  |         move.l 96(sp),d1
    7ef6:	|  |  |         move.l d1,d0
    7ef8:	|  |  |         lsl.l #3,d0
    7efa:	|  |  |         sub.l d1,d0
    7efc:	|  |  |         add.l d0,d0
    7efe:	|  |  |         add.l d0,d0
    7f00:	|  |  |         adda.l d0,a0
    7f02:	|  |  |         move.l a1,24(a0)
		UWORD count = FRead(bigDataFile, loadhere->sprites[i].data, 2, size / 2);
    7f06:	|  |  |         move.l 1b18a <bigDataFile>,42(sp)
    7f0e:	|  |  |         movea.l 108(sp),a0
    7f12:	|  |  |         movea.l 8(a0),a0
    7f16:	|  |  |         move.l 96(sp),d1
    7f1a:	|  |  |         move.l d1,d0
    7f1c:	|  |  |         lsl.l #3,d0
    7f1e:	|  |  |         sub.l d1,d0
    7f20:	|  |  |         add.l d0,d0
    7f22:	|  |  |         add.l d0,d0
    7f24:	|  |  |         adda.l d0,a0
    7f26:	|  |  |         move.l 24(a0),38(sp)
    7f2c:	|  |  |         moveq #2,d1
    7f2e:	|  |  |         move.l d1,34(sp)
    7f32:	|  |  |         move.w 94(sp),d0
    7f36:	|  |  |         lsr.w #1,d0
    7f38:	|  |  |         move.w d0,d0
    7f3a:	|  |  |         andi.l #65535,d0
    7f40:	|  |  |         move.l d0,30(sp)
    7f44:	|  |  |         move.l 1b1aa <DOSBase>,d0
    7f4a:	|  |  |         movea.l d0,a6
    7f4c:	|  |  |         move.l 42(sp),d1
    7f50:	|  |  |         move.l 38(sp),d2
    7f54:	|  |  |         move.l 34(sp),d3
    7f58:	|  |  |         move.l 30(sp),d4
    7f5c:	|  |  |         jsr -324(a6)
    7f60:	|  |  |         move.l d0,26(sp)
    7f64:	|  |  |         move.l 26(sp),d0
    7f68:	|  |  |         move.w d0,24(sp)
		if (!count) {
    7f6c:	|  |  |     /-- bne.s 7f80 <loadSpriteBank+0x332>
			KPrintF("loadSpriteBank: Cannot read sprite Data from File\n");
    7f6e:	|  |  |     |   pea 178d1 <PutChar+0x1391>
    7f74:	|  |  |     |   jsr 15bf0 <KPrintF>
    7f7a:	|  |  |     |   addq.l #4,sp
			return FALSE;
    7f7c:	|  |  |     |   clr.w d0
    7f7e:	+--|--|-----|-- bra.s 7f98 <loadSpriteBank+0x34a>
	for (i = 0; i < total; i++) {
    7f80:	|  |  |     \-> addq.l #1,96(sp)
    7f84:	|  |  \-------> move.l 96(sp),d0
    7f88:	|  |            cmp.l 70(sp),d0
    7f8c:	|  \----------- blt.w 7d7e <loadSpriteBank+0x130>
		}
	}

	finishAccess ();
    7f90:	|               jsr 5b38 <finishAccess>

	return TRUE;
    7f96:	|               moveq #1,d0
}
    7f98:	\-------------> movem.l (sp)+,d2-d4/a2/a6
    7f9c:	                lea 80(sp),sp
    7fa0:	                rts

00007fa2 <scaleSprite>:

BOOL scaleSprite (struct sprite *single, struct onScreenPerson * thisPerson, BOOL mirror) 
{
    7fa2:	                   lea -16(sp),sp
    7fa6:	                   move.l 28(sp),d0
    7faa:	                   move.w d0,d0
    7fac:	                   move.w d0,2(sp)
	UWORD x =  (UWORD) thisPerson->x - single->xhot;
    7fb0:	                   movea.l 24(sp),a0
    7fb4:	                   move.l (a0),d0
    7fb6:	                   move.l d0,-(sp)
    7fb8:	                   jsr 16208 <__fixunssfsi>
    7fbe:	                   addq.l #4,sp
    7fc0:	                   move.l d0,d0
    7fc2:	                   movea.l 20(sp),a0
    7fc6:	                   move.l 8(a0),d1
    7fca:	                   move.l d1,d1
    7fcc:	                   movea.w d0,a0
    7fce:	                   suba.w d1,a0
    7fd0:	                   move.w a0,6(sp)
	UWORD y =  (UWORD) thisPerson->y - single->yhot;			
    7fd4:	                   movea.l 24(sp),a0
    7fd8:	                   move.l 4(a0),d0
    7fdc:	                   move.l d0,-(sp)
    7fde:	                   jsr 16208 <__fixunssfsi>
    7fe4:	                   addq.l #4,sp
    7fe6:	                   move.l d0,d0
    7fe8:	                   movea.l 20(sp),a0
    7fec:	                   move.l 12(a0),d1
    7ff0:	                   move.l d1,d1
    7ff2:	                   movea.w d0,a0
    7ff4:	                   suba.w d1,a0
    7ff6:	                   move.w a0,4(sp)

	CstScaleSprite( single, thisPerson, (WORD) x, (WORD) y,SCREEN);
    7ffa:	                   move.w 4(sp),d0
    7ffe:	                   movea.w d0,a1
    8000:	                   move.w 6(sp),d0
    8004:	                   movea.w d0,a0
    8006:	                   pea 1 <_start+0x1>
    800a:	                   move.l a1,-(sp)
    800c:	                   move.l a0,-(sp)
    800e:	                   move.l 36(sp),-(sp)
    8012:	                   move.l 36(sp),-(sp)
    8016:	                   jsr 1df2 <CstScaleSprite>
    801c:	                   lea 20(sp),sp

	UWORD x1, y1, x2, y2;

	if (thisPerson -> extra & EXTRA_FIXTOSCREEN) {
    8020:	                   movea.l 24(sp),a0
    8024:	                   move.l 118(a0),d0
    8028:	                   moveq #8,d1
    802a:	                   and.l d1,d0
    802c:	   /-------------- beq.w 80ee <scaleSprite+0x14c>
		if (single->xhot < 0)
    8030:	   |               movea.l 20(sp),a0
    8034:	   |               move.l 8(a0),d0
    8038:	   |  /----------- bpl.s 8070 <scaleSprite+0xce>
			x1 = x - (int)(mirror ? single->width - single->xhot : single->xhot+1);
    803a:	   |  |            tst.w 2(sp)
    803e:	   |  |     /----- beq.s 8056 <scaleSprite+0xb4>
    8040:	   |  |     |      movea.l 20(sp),a0
    8044:	   |  |     |      move.l (a0),d0
    8046:	   |  |     |      move.l d0,d1
    8048:	   |  |     |      movea.l 20(sp),a0
    804c:	   |  |     |      move.l 8(a0),d0
    8050:	   |  |     |      move.l d0,d0
    8052:	   |  |     |      sub.w d0,d1
    8054:	   |  |     |  /-- bra.s 8064 <scaleSprite+0xc2>
    8056:	   |  |     \--|-> movea.l 20(sp),a0
    805a:	   |  |        |   move.l 8(a0),d0
    805e:	   |  |        |   move.l d0,d0
    8060:	   |  |        |   move.w d0,d1
    8062:	   |  |        |   addq.w #1,d1
    8064:	   |  |        \-> movea.w 6(sp),a0
    8068:	   |  |            suba.w d1,a0
    806a:	   |  |            move.w a0,14(sp)
    806e:	   |  |  /-------- bra.s 80a4 <scaleSprite+0x102>
		else
			x1 = x - (int)(mirror ? single->width - (single->xhot+1) : single->xhot);
    8070:	   |  \--|-------> tst.w 2(sp)
    8074:	   |     |  /----- beq.s 8090 <scaleSprite+0xee>
    8076:	   |     |  |      movea.l 20(sp),a0
    807a:	   |     |  |      move.l (a0),d0
    807c:	   |     |  |      move.l d0,d1
    807e:	   |     |  |      movea.l 20(sp),a0
    8082:	   |     |  |      move.l 8(a0),d0
    8086:	   |     |  |      move.l d0,d0
    8088:	   |     |  |      sub.w d0,d1
    808a:	   |     |  |      move.w d1,d0
    808c:	   |     |  |      subq.w #1,d0
    808e:	   |     |  |  /-- bra.s 809a <scaleSprite+0xf8>
    8090:	   |     |  \--|-> movea.l 20(sp),a0
    8094:	   |     |     |   move.l 8(a0),d0
    8098:	   |     |     |   move.l d0,d0
    809a:	   |     |     \-> move.w 6(sp),d1
    809e:	   |     |         sub.w d0,d1
    80a0:	   |     |         move.w d1,14(sp)
		
		y1 = y - (single->yhot - thisPerson->floaty);
    80a4:	   |     \-------> movea.l 24(sp),a0
    80a8:	   |               move.l 24(a0),d0
    80ac:	   |               move.l d0,d1
    80ae:	   |               movea.l 20(sp),a0
    80b2:	   |               move.l 12(a0),d0
    80b6:	   |               move.l d0,d0
    80b8:	   |               sub.w d0,d1
    80ba:	   |               movea.w 4(sp),a0
    80be:	   |               adda.w d1,a0
    80c0:	   |               move.w a0,12(sp)
		x2 = x1 + single->width;
    80c4:	   |               movea.l 20(sp),a0
    80c8:	   |               move.l (a0),d0
    80ca:	   |               move.l d0,d0
    80cc:	   |               move.w 14(sp),d1
    80d0:	   |               add.w d0,d1
    80d2:	   |               move.w d1,10(sp)
		y2 = y1 + single->height;
    80d6:	   |               movea.l 20(sp),a0
    80da:	   |               move.l 4(a0),d0
    80de:	   |               move.l d0,d0
    80e0:	   |               movea.w 12(sp),a0
    80e4:	   |               adda.w d0,a0
    80e6:	   |               move.w a0,8(sp)
    80ea:	/--|-------------- bra.w 81c0 <scaleSprite+0x21e>
	} else {
		x -= cameraX;
    80ee:	|  \-------------> move.l 1b2b4 <cameraX>,d0
    80f4:	|                  move.l d0,d0
    80f6:	|                  sub.w d0,6(sp)
		y -= cameraY;
    80fa:	|                  move.l 1b2b8 <cameraY>,d0
    8100:	|                  move.l d0,d0
    8102:	|                  sub.w d0,4(sp)
		if (single->xhot < 0)
    8106:	|                  movea.l 20(sp),a0
    810a:	|                  move.l 8(a0),d0
    810e:	|     /----------- bpl.s 8146 <scaleSprite+0x1a4>
			x1 = x - (int)(mirror ? single->width - single->xhot : single->xhot+1);
    8110:	|     |            tst.w 2(sp)
    8114:	|     |     /----- beq.s 812c <scaleSprite+0x18a>
    8116:	|     |     |      movea.l 20(sp),a0
    811a:	|     |     |      move.l (a0),d0
    811c:	|     |     |      move.l d0,d1
    811e:	|     |     |      movea.l 20(sp),a0
    8122:	|     |     |      move.l 8(a0),d0
    8126:	|     |     |      move.l d0,d0
    8128:	|     |     |      sub.w d0,d1
    812a:	|     |     |  /-- bra.s 813a <scaleSprite+0x198>
    812c:	|     |     \--|-> movea.l 20(sp),a0
    8130:	|     |        |   move.l 8(a0),d0
    8134:	|     |        |   move.l d0,d0
    8136:	|     |        |   move.w d0,d1
    8138:	|     |        |   addq.w #1,d1
    813a:	|     |        \-> move.w 6(sp),d0
    813e:	|     |            sub.w d1,d0
    8140:	|     |            move.w d0,14(sp)
    8144:	|     |  /-------- bra.s 817a <scaleSprite+0x1d8>
		else
			x1 = x - (int)(mirror ? single->width - (single->xhot+1) : single->xhot);
    8146:	|     \--|-------> tst.w 2(sp)
    814a:	|        |  /----- beq.s 8166 <scaleSprite+0x1c4>
    814c:	|        |  |      movea.l 20(sp),a0
    8150:	|        |  |      move.l (a0),d0
    8152:	|        |  |      move.l d0,d1
    8154:	|        |  |      movea.l 20(sp),a0
    8158:	|        |  |      move.l 8(a0),d0
    815c:	|        |  |      move.l d0,d0
    815e:	|        |  |      sub.w d0,d1
    8160:	|        |  |      move.w d1,d0
    8162:	|        |  |      subq.w #1,d0
    8164:	|        |  |  /-- bra.s 8170 <scaleSprite+0x1ce>
    8166:	|        |  \--|-> movea.l 20(sp),a0
    816a:	|        |     |   move.l 8(a0),d0
    816e:	|        |     |   move.l d0,d0
    8170:	|        |     \-> move.w 6(sp),d1
    8174:	|        |         sub.w d0,d1
    8176:	|        |         move.w d1,14(sp)
		
		y1 = y - (single->yhot - thisPerson->floaty);
    817a:	|        \-------> movea.l 24(sp),a0
    817e:	|                  move.l 24(a0),d0
    8182:	|                  move.l d0,d1
    8184:	|                  movea.l 20(sp),a0
    8188:	|                  move.l 12(a0),d0
    818c:	|                  move.l d0,d0
    818e:	|                  sub.w d0,d1
    8190:	|                  movea.w 4(sp),a0
    8194:	|                  adda.w d1,a0
    8196:	|                  move.w a0,12(sp)
		x2 = x1 + single->width;
    819a:	|                  movea.l 20(sp),a0
    819e:	|                  move.l (a0),d0
    81a0:	|                  move.l d0,d0
    81a2:	|                  move.w 14(sp),d1
    81a6:	|                  add.w d0,d1
    81a8:	|                  move.w d1,10(sp)
		y2 = y1 + single->height;
    81ac:	|                  movea.l 20(sp),a0
    81b0:	|                  move.l 4(a0),d0
    81b4:	|                  move.l d0,d0
    81b6:	|                  movea.w 12(sp),a0
    81ba:	|                  adda.w d0,a0
    81bc:	|                  move.w a0,8(sp)
	}

	if (input.mouseX >= x1 && input.mouseX <= x2 && input.mouseY >= y1 && input.mouseY <= y2) {
    81c0:	\----------------> move.l 1b15e <input+0xa>,d1
    81c6:	                   moveq #0,d0
    81c8:	                   move.w 14(sp),d0
    81cc:	                   cmp.l d1,d0
    81ce:	            /----- bgt.s 8204 <scaleSprite+0x262>
    81d0:	            |      move.l 1b15e <input+0xa>,d1
    81d6:	            |      moveq #0,d0
    81d8:	            |      move.w 10(sp),d0
    81dc:	            |      cmp.l d1,d0
    81de:	            +----- blt.s 8204 <scaleSprite+0x262>
    81e0:	            |      move.l 1b162 <input+0xe>,d1
    81e6:	            |      moveq #0,d0
    81e8:	            |      move.w 12(sp),d0
    81ec:	            |      cmp.l d1,d0
    81ee:	            +----- bgt.s 8204 <scaleSprite+0x262>
    81f0:	            |      move.l 1b162 <input+0xe>,d1
    81f6:	            |      moveq #0,d0
    81f8:	            |      move.w 8(sp),d0
    81fc:	            |      cmp.l d1,d0
    81fe:	            +----- blt.s 8204 <scaleSprite+0x262>
		return TRUE;
    8200:	            |      moveq #1,d0
    8202:	            |  /-- bra.s 8206 <scaleSprite+0x264>
	}
	return FALSE;
    8204:	            \--|-> clr.w d0
    8206:	               \-> lea 16(sp),sp
    820a:	                   rts

0000820c <TF_abs>:

short int scaleHorizon = 75;
short int scaleDivide = 150;

int TF_abs (int a) {
	return (a > 0) ? a : -a;
    820c:	    move.l 4(sp),d0
    8210:	/-- bpl.s 8214 <TF_abs+0x8>
    8212:	|   neg.l d0
}
    8214:	\-> rts

00008216 <addPerson>:


BOOL addPerson(int x, int y, int objNum, struct persona *p) {
    8216:	             lea -28(sp),sp
    821a:	             move.l a6,-(sp)
    821c:	             move.l d2,-(sp)
    struct onScreenPerson *newPerson = AllocVec(sizeof(struct onScreenPerson), MEMF_ANY);
    821e:	             move.l #132,28(sp)
    8226:	             clr.l 24(sp)
    822a:	             move.l 1b1a2 <SysBase>,d0
    8230:	             movea.l d0,a6
    8232:	             move.l 28(sp),d0
    8236:	             move.l 24(sp),d1
    823a:	             jsr -684(a6)
    823e:	             move.l d0,20(sp)
    8242:	             move.l 20(sp),d0
    8246:	             move.l d0,16(sp)
    if (!newPerson) return FALSE;
    824a:	         /-- bne.s 8252 <addPerson+0x3c>
    824c:	         |   clr.w d0
    824e:	/--------|-- bra.w 8482 <addPerson+0x26c>

    // EASY STUFF
    newPerson->thisType = loadObjectType(objNum);
    8252:	|        \-> move.l 48(sp),-(sp)
    8256:	|            jsr c5e6 <loadObjectType>
    825c:	|            addq.l #4,sp
    825e:	|            movea.l 16(sp),a0
    8262:	|            move.l d0,114(a0)
    newPerson->scale = 1;
    8266:	|            movea.l 16(sp),a0
    826a:	|            move.l #1065353216,32(a0)
    newPerson->extra = 0;
    8272:	|            movea.l 16(sp),a0
    8276:	|            clr.l 118(a0)
    newPerson->continueAfterWalking = NULL;
    827a:	|            movea.l 16(sp),a0
    827e:	|            clr.l 68(a0)
    moveAndScale(newPerson, x, y);
    8282:	|            move.l 44(sp),-(sp)
    8286:	|            jsr 15ea8 <__floatsisf>
    828c:	|            addq.l #4,sp
    828e:	|            move.l d0,d2
    8290:	|            move.l 40(sp),-(sp)
    8294:	|            jsr 15ea8 <__floatsisf>
    829a:	|            addq.l #4,sp
    829c:	|            move.l d2,-(sp)
    829e:	|            move.l d0,-(sp)
    82a0:	|            move.l 24(sp),-(sp)
    82a4:	|            jsr 9d64 <moveAndScale>
    82aa:	|            lea 12(sp),sp
    newPerson->frameNum = 0;
    82ae:	|            movea.l 16(sp),a0
    82b2:	|            clr.l 84(a0)
    newPerson->walkToX = x;
    82b6:	|            movea.l 16(sp),a0
    82ba:	|            move.l 40(sp),40(a0)
    newPerson->walkToY = y;
    82c0:	|            movea.l 16(sp),a0
    82c4:	|            move.l 44(sp),44(a0)
    newPerson->walking = FALSE;
    82ca:	|            movea.l 16(sp),a0
    82ce:	|            clr.w 64(a0)
    newPerson->spinning = FALSE;
    82d2:	|            movea.l 16(sp),a0
    82d6:	|            clr.w 66(a0)
    newPerson->show = TRUE;
    82da:	|            movea.l 16(sp),a0
    82de:	|            move.w #1,104(a0)
    newPerson->direction = 0;
    82e4:	|            movea.l 16(sp),a0
    82e8:	|            clr.l 106(a0)
    newPerson->angle = 180;
    82ec:	|            movea.l 16(sp),a0
    82f0:	|            move.l #180,92(a0)
    newPerson->wantAngle = 180;
    82f8:	|            movea.l 16(sp),a0
    82fc:	|            move.l #180,96(a0)
    newPerson->angleOffset = 0;
    8304:	|            movea.l 16(sp),a0
    8308:	|            clr.l 100(a0)
    newPerson->floaty = 0;
    830c:	|            movea.l 16(sp),a0
    8310:	|            clr.l 24(a0)
    newPerson->walkSpeed = newPerson->thisType->walkSpeed;
    8314:	|            movea.l 16(sp),a0
    8318:	|            movea.l 114(a0),a0
    831c:	|            move.l 24(a0),d0
    8320:	|            movea.l 16(sp),a0
    8324:	|            move.l d0,28(a0)
    newPerson->myAnim = NULL;
    8328:	|            movea.l 16(sp),a0
    832c:	|            clr.l 72(a0)
    newPerson->spinSpeed = newPerson->thisType->spinSpeed;
    8330:	|            movea.l 16(sp),a0
    8334:	|            movea.l 114(a0),a0
    8338:	|            move.l 32(a0),d0
    833c:	|            movea.l 16(sp),a0
    8340:	|            move.l d0,122(a0)
    newPerson->r = 0;
    8344:	|            movea.l 16(sp),a0
    8348:	|            clr.b 126(a0)
    newPerson->g = 0;
    834c:	|            movea.l 16(sp),a0
    8350:	|            clr.b 127(a0)
    newPerson->b = 0;
    8354:	|            movea.l 16(sp),a0
    8358:	|            clr.b 128(a0)
    newPerson->colourmix = 0;
    835c:	|            movea.l 16(sp),a0
    8360:	|            clr.b 129(a0)
    newPerson->transparency = 0;
    8364:	|            movea.l 16(sp),a0
    8368:	|            clr.b 130(a0)
    newPerson->myPersona = p;
    836c:	|            movea.l 16(sp),a0
    8370:	|            move.l 52(sp),80(a0)

    setFrames(newPerson, ANI_STAND);
    8376:	|            clr.l -(sp)
    8378:	|            move.l 20(sp),-(sp)
    837c:	|            jsr 7026 <setFrames>
    8382:	|            addq.l #8,sp

    // HEIGHT (BASED ON 1st FRAME OF 1st ANIMATION... INC. SPECIAL CASES)
    int fNumSigned = p->animation[0]->frames[0].frameNum;
    8384:	|            movea.l 52(sp),a0
    8388:	|            movea.l (a0),a0
    838a:	|            movea.l (a0),a0
    838c:	|            movea.l 4(a0),a0
    8390:	|            move.l (a0),12(sp)
    int fNum = fNumSigned < 0 ? fNumSigned * - 1 : 1;
    8394:	|     /----- bpl.s 839e <addPerson+0x188>
    8396:	|     |      move.l 12(sp),d0
    839a:	|     |      neg.l d0
    839c:	|     |  /-- bra.s 83a0 <addPerson+0x18a>
    839e:	|     \--|-> moveq #1,d0
    83a0:	|        \-> move.l d0,8(sp)
    if (fNum >= p->animation[0]->theSprites->bank.total) {
    83a4:	|            movea.l 52(sp),a0
    83a8:	|            movea.l (a0),a0
    83aa:	|            movea.l (a0),a0
    83ac:	|            movea.l (a0),a0
    83ae:	|            move.l 8(a0),d0
    83b2:	|            cmp.l 8(sp),d0
    83b6:	|     /----- bgt.s 83e8 <addPerson+0x1d2>
        if (fNumSigned < 0) {
    83b8:	|     |      tst.l 12(sp)
    83bc:	|     |  /-- bge.s 83ca <addPerson+0x1b4>
            newPerson->height = 5;
    83be:	|     |  |   movea.l 16(sp),a0
    83c2:	|     |  |   moveq #5,d0
    83c4:	|     |  |   move.l d0,20(a0)
    83c8:	|  /--|--|-- bra.s 8414 <addPerson+0x1fe>
        } else {
            newPerson->height = p->animation[0]->theSprites->bank.sprites[0].yhot + 5;
    83ca:	|  |  |  \-> movea.l 52(sp),a0
    83ce:	|  |  |      movea.l (a0),a0
    83d0:	|  |  |      movea.l (a0),a0
    83d2:	|  |  |      movea.l (a0),a0
    83d4:	|  |  |      movea.l 16(a0),a0
    83d8:	|  |  |      move.l 12(a0),d0
    83dc:	|  |  |      addq.l #5,d0
    83de:	|  |  |      movea.l 16(sp),a0
    83e2:	|  |  |      move.l d0,20(a0)
    83e6:	|  +--|----- bra.s 8414 <addPerson+0x1fe>
        }
    } else {
        newPerson->height = p->animation[0]->theSprites->bank.sprites[fNum].yhot + 5;
    83e8:	|  |  \----> movea.l 52(sp),a0
    83ec:	|  |         movea.l (a0),a0
    83ee:	|  |         movea.l (a0),a0
    83f0:	|  |         movea.l (a0),a0
    83f2:	|  |         movea.l 16(a0),a0
    83f6:	|  |         move.l 8(sp),d1
    83fa:	|  |         move.l d1,d0
    83fc:	|  |         lsl.l #3,d0
    83fe:	|  |         sub.l d1,d0
    8400:	|  |         add.l d0,d0
    8402:	|  |         add.l d0,d0
    8404:	|  |         adda.l d0,a0
    8406:	|  |         move.l 12(a0),d0
    840a:	|  |         addq.l #5,d0
    840c:	|  |         movea.l 16(sp),a0
    8410:	|  |         move.l d0,20(a0)
    }

    // NOW ADD IT IN THE RIGHT PLACE
    struct onScreenPerson **changethat = &allPeople;
    8414:	|  \-------> move.l #111194,32(sp)

    while (((*changethat) != NULL) && ((*changethat)->y < y)) {
    841c:	|        /-- bra.s 842c <addPerson+0x216>
        changethat = &((*changethat)->next);
    841e:	|     /--|-> movea.l 32(sp),a0
    8422:	|     |  |   move.l (a0),d0
    8424:	|     |  |   moveq #36,d1
    8426:	|     |  |   add.l d0,d1
    8428:	|     |  |   move.l d1,32(sp)
    while (((*changethat) != NULL) && ((*changethat)->y < y)) {
    842c:	|     |  \-> movea.l 32(sp),a0
    8430:	|     |      move.l (a0),d0
    8432:	|     |  /-- beq.s 845a <addPerson+0x244>
    8434:	|     |  |   movea.l 32(sp),a0
    8438:	|     |  |   movea.l (a0),a0
    843a:	|     |  |   move.l 4(a0),d2
    843e:	|     |  |   move.l 44(sp),-(sp)
    8442:	|     |  |   jsr 15ea8 <__floatsisf>
    8448:	|     |  |   addq.l #4,sp
    844a:	|     |  |   move.l d0,-(sp)
    844c:	|     |  |   move.l d2,-(sp)
    844e:	|     |  |   jsr 160ce <__ltsf2>
    8454:	|     |  |   addq.l #8,sp
    8456:	|     |  |   tst.l d0
    8458:	|     \--|-- blt.s 841e <addPerson+0x208>
    }

    newPerson->next = (*changethat);
    845a:	|        \-> movea.l 32(sp),a0
    845e:	|            move.l (a0),d0
    8460:	|            movea.l 16(sp),a0
    8464:	|            move.l d0,36(a0)
    (*changethat) = newPerson;
    8468:	|            movea.l 32(sp),a0
    846c:	|            move.l 16(sp),(a0)

    return (BOOL) (newPerson->thisType != NULL);
    8470:	|            movea.l 16(sp),a0
    8474:	|            move.l 114(a0),d0
    8478:	|            sne d0
    847a:	|            neg.b d0
    847c:	|            move.b d0,d0
    847e:	|            andi.w #255,d0
}
    8482:	\----------> move.l (sp)+,d2
    8484:	             movea.l (sp)+,a6
    8486:	             lea 28(sp),sp
    848a:	             rts

0000848c <animatePerson>:

void animatePerson (int obj, struct personaAnimation * fram) { // Set a new SINGLE animation
    848c:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(obj);
    848e:	       move.l 8(sp),-(sp)
    8492:	       jsr 961c <findPerson>
    8498:	       addq.l #4,sp
    849a:	       move.l d0,(sp)
    if (moveMe) {
    849c:	/----- beq.s 84d0 <animatePerson+0x44>
        if (moveMe -> continueAfterWalking) abortFunction(moveMe -> continueAfterWalking);
    849e:	|      movea.l (sp),a0
    84a0:	|      move.l 68(a0),d0
    84a4:	|  /-- beq.s 84b6 <animatePerson+0x2a>
    84a6:	|  |   movea.l (sp),a0
    84a8:	|  |   move.l 68(a0),d0
    84ac:	|  |   move.l d0,-(sp)
    84ae:	|  |   jsr 360e <abortFunction>
    84b4:	|  |   addq.l #4,sp
        moveMe -> continueAfterWalking = NULL;
    84b6:	|  \-> movea.l (sp),a0
    84b8:	|      clr.l 68(a0)
        moveMe -> walking = FALSE;
    84bc:	|      movea.l (sp),a0
    84be:	|      clr.w 64(a0)
        moveMe -> spinning = FALSE;
    84c2:	|      movea.l (sp),a0
    84c4:	|      clr.w 66(a0)
        moveMe -> myAnim = fram;
    84c8:	|      movea.l (sp),a0
    84ca:	|      move.l 12(sp),72(a0)
    }
}
    84d0:	\----> nop
    84d2:	       addq.l #4,sp
    84d4:	       rts

000084d6 <animatePersonUsingPersona>:

void animatePersonUsingPersona (int obj, struct persona * per) { // Set a new costume
    84d6:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(obj);
    84d8:	       move.l 8(sp),-(sp)
    84dc:	       jsr 961c <findPerson>
    84e2:	       addq.l #4,sp
    84e4:	       move.l d0,(sp)
    if (moveMe) {
    84e6:	/----- beq.s 8528 <animatePersonUsingPersona+0x52>
        // if (moveMe -> continueAfterWalking) abortFunction (moveMe -> continueAfterWalking);
        // moveMe -> continueAfterWalking = NULL;
        // moveMe -> walking = false;
        moveMe -> spinning = FALSE;
    84e8:	|      movea.l (sp),a0
    84ea:	|      clr.w 66(a0)
        moveMe -> myPersona = per;
    84ee:	|      movea.l (sp),a0
    84f0:	|      move.l 12(sp),80(a0)
        rethinkAngle(moveMe);
    84f6:	|      move.l (sp),-(sp)
    84f8:	|      jsr 9ef2 <rethinkAngle>
    84fe:	|      addq.l #4,sp
        if (moveMe->walking) {
    8500:	|      movea.l (sp),a0
    8502:	|      move.w 64(a0),d0
    8506:	|  /-- beq.s 851a <animatePersonUsingPersona+0x44>
            setFrames(moveMe, ANI_WALK);
    8508:	|  |   pea 1 <_start+0x1>
    850c:	|  |   move.l 4(sp),-(sp)
    8510:	|  |   jsr 7026 <setFrames>
    8516:	|  |   addq.l #8,sp
        } else {
            setFrames(moveMe, ANI_STAND);
        }
    }
}
    8518:	+--|-- bra.s 8528 <animatePersonUsingPersona+0x52>
            setFrames(moveMe, ANI_STAND);
    851a:	|  \-> clr.l -(sp)
    851c:	|      move.l 4(sp),-(sp)
    8520:	|      jsr 7026 <setFrames>
    8526:	|      addq.l #8,sp
}
    8528:	\----> nop
    852a:	       addq.l #4,sp
    852c:	       rts

0000852e <copyAnim>:
		thisPerson = thisPerson->next;
	}
}


struct personaAnimation * copyAnim (struct personaAnimation * orig) {
    852e:	             lea -36(sp),sp
    8532:	             move.l a6,-(sp)
	int num = orig -> numFrames;
    8534:	             movea.l 44(sp),a0
    8538:	             move.l 8(a0),32(sp)


	struct personaAnimation * newAnim	= AllocVec(sizeof( struct personaAnimation), MEMF_ANY);
    853e:	             moveq #12,d0
    8540:	             move.l d0,28(sp)
    8544:	             clr.l 24(sp)
    8548:	             move.l 1b1a2 <SysBase>,d0
    854e:	             movea.l d0,a6
    8550:	             move.l 28(sp),d0
    8554:	             move.l 24(sp),d1
    8558:	             jsr -684(a6)
    855c:	             move.l d0,20(sp)
    8560:	             move.l 20(sp),d0
    8564:	             move.l d0,16(sp)
	if (!(newAnim)) {
    8568:	         /-- bne.s 857e <copyAnim+0x50>
		KPrintF("copyAnim: Cannot allocate memory");
    856a:	         |   pea 17904 <PutChar+0x13c4>
    8570:	         |   jsr 15bf0 <KPrintF>
    8576:	         |   addq.l #4,sp
		return NULL;
    8578:	         |   moveq #0,d0
    857a:	/--------|-- bra.w 86d0 <copyAnim+0x1a2>
	}

	// Copy the easy bits...
	newAnim -> theSprites		= orig -> theSprites;
    857e:	|        \-> movea.l 44(sp),a0
    8582:	|            move.l (a0),d0
    8584:	|            movea.l 16(sp),a0
    8588:	|            move.l d0,(a0)
	newAnim -> theSprites ->timesUsed++;
    858a:	|            movea.l 16(sp),a0
    858e:	|            movea.l (a0),a0
    8590:	|            move.l 4(a0),d0
    8594:	|            addq.l #1,d0
    8596:	|            move.l d0,4(a0)
	newAnim -> numFrames		= num;
    859a:	|            movea.l 16(sp),a0
    859e:	|            move.l 32(sp),8(a0)

	if (num) {
    85a4:	|  /-------- beq.w 86c4 <copyAnim+0x196>

		// Argh! Frames! We need a whole NEW array of animFrame structures...

		newAnim->frames = AllocVec(sizeof(struct animFrame) * num, MEMF_ANY);
    85a8:	|  |         move.l 32(sp),d1
    85ac:	|  |         move.l d1,d0
    85ae:	|  |         add.l d0,d0
    85b0:	|  |         add.l d1,d0
    85b2:	|  |         add.l d0,d0
    85b4:	|  |         add.l d0,d0
    85b6:	|  |         move.l d0,12(sp)
    85ba:	|  |         clr.l 8(sp)
    85be:	|  |         move.l 1b1a2 <SysBase>,d0
    85c4:	|  |         movea.l d0,a6
    85c6:	|  |         move.l 12(sp),d0
    85ca:	|  |         move.l 8(sp),d1
    85ce:	|  |         jsr -684(a6)
    85d2:	|  |         move.l d0,4(sp)
    85d6:	|  |         move.l 4(sp),d0
    85da:	|  |         movea.l 16(sp),a0
    85de:	|  |         move.l d0,4(a0)
		if (!newAnim->frames) {
    85e2:	|  |         movea.l 16(sp),a0
    85e6:	|  |         move.l 4(a0),d0
    85ea:	|  |     /-- bne.s 8600 <copyAnim+0xd2>
			KPrintF("copyAnim: Cannot allocate memory");
    85ec:	|  |     |   pea 17904 <PutChar+0x13c4>
    85f2:	|  |     |   jsr 15bf0 <KPrintF>
    85f8:	|  |     |   addq.l #4,sp
			return NULL;
    85fa:	|  |     |   moveq #0,d0
    85fc:	+--|-----|-- bra.w 86d0 <copyAnim+0x1a2>
		}

		for (int a = 0; a < num; a ++) {
    8600:	|  |     \-> clr.l 36(sp)
    8604:	|  |     /-- bra.w 86b6 <copyAnim+0x188>
			newAnim -> frames[a].frameNum = orig -> frames[a].frameNum;
    8608:	|  |  /--|-> movea.l 44(sp),a0
    860c:	|  |  |  |   movea.l 4(a0),a0
    8610:	|  |  |  |   move.l 36(sp),d1
    8614:	|  |  |  |   move.l d1,d0
    8616:	|  |  |  |   add.l d0,d0
    8618:	|  |  |  |   add.l d1,d0
    861a:	|  |  |  |   add.l d0,d0
    861c:	|  |  |  |   add.l d0,d0
    861e:	|  |  |  |   lea (0,a0,d0.l),a1
    8622:	|  |  |  |   movea.l 16(sp),a0
    8626:	|  |  |  |   movea.l 4(a0),a0
    862a:	|  |  |  |   move.l 36(sp),d1
    862e:	|  |  |  |   move.l d1,d0
    8630:	|  |  |  |   add.l d0,d0
    8632:	|  |  |  |   add.l d1,d0
    8634:	|  |  |  |   add.l d0,d0
    8636:	|  |  |  |   add.l d0,d0
    8638:	|  |  |  |   adda.l d0,a0
    863a:	|  |  |  |   move.l (a1),d0
    863c:	|  |  |  |   move.l d0,(a0)
			newAnim -> frames[a].howMany = orig -> frames[a].howMany;
    863e:	|  |  |  |   movea.l 44(sp),a0
    8642:	|  |  |  |   movea.l 4(a0),a0
    8646:	|  |  |  |   move.l 36(sp),d1
    864a:	|  |  |  |   move.l d1,d0
    864c:	|  |  |  |   add.l d0,d0
    864e:	|  |  |  |   add.l d1,d0
    8650:	|  |  |  |   add.l d0,d0
    8652:	|  |  |  |   add.l d0,d0
    8654:	|  |  |  |   lea (0,a0,d0.l),a1
    8658:	|  |  |  |   movea.l 16(sp),a0
    865c:	|  |  |  |   movea.l 4(a0),a0
    8660:	|  |  |  |   move.l 36(sp),d1
    8664:	|  |  |  |   move.l d1,d0
    8666:	|  |  |  |   add.l d0,d0
    8668:	|  |  |  |   add.l d1,d0
    866a:	|  |  |  |   add.l d0,d0
    866c:	|  |  |  |   add.l d0,d0
    866e:	|  |  |  |   adda.l d0,a0
    8670:	|  |  |  |   move.l 4(a1),d0
    8674:	|  |  |  |   move.l d0,4(a0)
			newAnim -> frames[a].noise = orig -> frames[a].noise;
    8678:	|  |  |  |   movea.l 44(sp),a0
    867c:	|  |  |  |   movea.l 4(a0),a0
    8680:	|  |  |  |   move.l 36(sp),d1
    8684:	|  |  |  |   move.l d1,d0
    8686:	|  |  |  |   add.l d0,d0
    8688:	|  |  |  |   add.l d1,d0
    868a:	|  |  |  |   add.l d0,d0
    868c:	|  |  |  |   add.l d0,d0
    868e:	|  |  |  |   lea (0,a0,d0.l),a1
    8692:	|  |  |  |   movea.l 16(sp),a0
    8696:	|  |  |  |   movea.l 4(a0),a0
    869a:	|  |  |  |   move.l 36(sp),d1
    869e:	|  |  |  |   move.l d1,d0
    86a0:	|  |  |  |   add.l d0,d0
    86a2:	|  |  |  |   add.l d1,d0
    86a4:	|  |  |  |   add.l d0,d0
    86a6:	|  |  |  |   add.l d0,d0
    86a8:	|  |  |  |   adda.l d0,a0
    86aa:	|  |  |  |   move.l 8(a1),d0
    86ae:	|  |  |  |   move.l d0,8(a0)
		for (int a = 0; a < num; a ++) {
    86b2:	|  |  |  |   addq.l #1,36(sp)
    86b6:	|  |  |  \-> move.l 36(sp),d0
    86ba:	|  |  |      cmp.l 32(sp),d0
    86be:	|  |  \----- blt.w 8608 <copyAnim+0xda>
    86c2:	|  |     /-- bra.s 86cc <copyAnim+0x19e>
		}
	} else {
		newAnim -> frames = NULL;
    86c4:	|  \-----|-> movea.l 16(sp),a0
    86c8:	|        |   clr.l 4(a0)
	}

	return newAnim;
    86cc:	|        \-> move.l 16(sp),d0
}
    86d0:	\----------> movea.l (sp)+,a6
    86d2:	             lea 36(sp),sp
    86d6:	             rts

000086d8 <createPersonaAnim>:


struct personaAnimation * createPersonaAnim (int num, struct variableStack **stacky) {
    86d8:	                lea -44(sp),sp
    86dc:	                move.l a6,-(sp)
    86de:	                move.l d2,-(sp)
	struct personaAnimation * newP = AllocVec( sizeof(struct personaAnimation), MEMF_ANY);
    86e0:	                moveq #12,d0
    86e2:	                move.l d0,40(sp)
    86e6:	                clr.l 36(sp)
    86ea:	                move.l 1b1a2 <SysBase>,d0
    86f0:	                movea.l d0,a6
    86f2:	                move.l 40(sp),d0
    86f6:	                move.l 36(sp),d1
    86fa:	                jsr -684(a6)
    86fe:	                move.l d0,32(sp)
    8702:	                move.l 32(sp),d0
    8706:	                move.l d0,28(sp)
	if( !newP) {
    870a:	            /-- bne.s 8720 <createPersonaAnim+0x48>
		KPrintF("createPersonaAnim: Cannot allocate memory");
    870c:	            |   pea 17925 <PutChar+0x13e5>
    8712:	            |   jsr 15bf0 <KPrintF>
    8718:	            |   addq.l #4,sp
		return NULL;
    871a:	            |   moveq #0,d0
    871c:	/-----------|-- bra.w 88f0 <createPersonaAnim+0x218>
	}

	newP -> numFrames = num;
    8720:	|           \-> movea.l 28(sp),a0
    8724:	|               move.l 56(sp),8(a0)
	newP -> frames = AllocVec( sizeof( struct animFrame) * num,MEMF_ANY);
    872a:	|               move.l 56(sp),d1
    872e:	|               move.l d1,d0
    8730:	|               add.l d0,d0
    8732:	|               add.l d1,d0
    8734:	|               add.l d0,d0
    8736:	|               add.l d0,d0
    8738:	|               move.l d0,24(sp)
    873c:	|               clr.l 20(sp)
    8740:	|               move.l 1b1a2 <SysBase>,d0
    8746:	|               movea.l d0,a6
    8748:	|               move.l 24(sp),d0
    874c:	|               move.l 20(sp),d1
    8750:	|               jsr -684(a6)
    8754:	|               move.l d0,16(sp)
    8758:	|               move.l 16(sp),d0
    875c:	|               movea.l 28(sp),a0
    8760:	|               move.l d0,4(a0)
	if( !newP->frames) {
    8764:	|               movea.l 28(sp),a0
    8768:	|               move.l 4(a0),d0
    876c:	|           /-- bne.s 8782 <createPersonaAnim+0xaa>
		KPrintF("createPersonaAnim: Cannot allocate memory");
    876e:	|           |   pea 17925 <PutChar+0x13e5>
    8774:	|           |   jsr 15bf0 <KPrintF>
    877a:	|           |   addq.l #4,sp
		return NULL;
    877c:	|           |   moveq #0,d0
    877e:	+-----------|-- bra.w 88f0 <createPersonaAnim+0x218>
	}

	int a = num, frameNum, howMany;
    8782:	|           \-> move.l 56(sp),48(sp)

	struct variableStack *tmp = *stacky;
    8788:	|               movea.l 60(sp),a0
    878c:	|               move.l (a0),44(sp)
	while (a) {
    8790:	|     /-------- bra.w 88e4 <createPersonaAnim+0x20c>
		a --;
    8794:	|  /--|-------> subq.l #1,48(sp)
		newP -> frames[a].noise = 0;
    8798:	|  |  |         movea.l 28(sp),a0
    879c:	|  |  |         movea.l 4(a0),a0
    87a0:	|  |  |         move.l 48(sp),d1
    87a4:	|  |  |         move.l d1,d0
    87a6:	|  |  |         add.l d0,d0
    87a8:	|  |  |         add.l d1,d0
    87aa:	|  |  |         add.l d0,d0
    87ac:	|  |  |         add.l d0,d0
    87ae:	|  |  |         adda.l d0,a0
    87b0:	|  |  |         clr.l 8(a0)
		if ( tmp->thisVar.varType == SVT_FILE) {
    87b4:	|  |  |         movea.l 44(sp),a0
    87b8:	|  |  |         move.l (a0),d0
    87ba:	|  |  |         moveq #5,d1
    87bc:	|  |  |         cmp.l d0,d1
    87be:	|  |  |     /-- bne.s 87ea <createPersonaAnim+0x112>
			newP -> frames[a].noise = tmp -> thisVar.varData.intValue;
    87c0:	|  |  |     |   movea.l 28(sp),a0
    87c4:	|  |  |     |   movea.l 4(a0),a0
    87c8:	|  |  |     |   move.l 48(sp),d1
    87cc:	|  |  |     |   move.l d1,d0
    87ce:	|  |  |     |   add.l d0,d0
    87d0:	|  |  |     |   add.l d1,d0
    87d2:	|  |  |     |   add.l d0,d0
    87d4:	|  |  |     |   add.l d0,d0
    87d6:	|  |  |     |   lea (0,a0,d0.l),a1
    87da:	|  |  |     |   movea.l 44(sp),a0
    87de:	|  |  |     |   move.l 4(a0),d0
    87e2:	|  |  |     |   move.l d0,8(a1)
    87e6:	|  |  |  /--|-- bra.w 8892 <createPersonaAnim+0x1ba>
		} else if ( tmp -> thisVar.varType == SVT_FUNC) {
    87ea:	|  |  |  |  \-> movea.l 44(sp),a0
    87ee:	|  |  |  |      move.l (a0),d0
    87f0:	|  |  |  |      moveq #2,d1
    87f2:	|  |  |  |      cmp.l d0,d1
    87f4:	|  |  |  |  /-- bne.s 8820 <createPersonaAnim+0x148>
			newP -> frames[a].noise = - tmp -> thisVar.varData.intValue;
    87f6:	|  |  |  |  |   movea.l 44(sp),a0
    87fa:	|  |  |  |  |   move.l 4(a0),d2
    87fe:	|  |  |  |  |   movea.l 28(sp),a0
    8802:	|  |  |  |  |   movea.l 4(a0),a0
    8806:	|  |  |  |  |   move.l 48(sp),d1
    880a:	|  |  |  |  |   move.l d1,d0
    880c:	|  |  |  |  |   add.l d0,d0
    880e:	|  |  |  |  |   add.l d1,d0
    8810:	|  |  |  |  |   add.l d0,d0
    8812:	|  |  |  |  |   add.l d0,d0
    8814:	|  |  |  |  |   adda.l d0,a0
    8816:	|  |  |  |  |   move.l d2,d0
    8818:	|  |  |  |  |   neg.l d0
    881a:	|  |  |  |  |   move.l d0,8(a0)
    881e:	|  |  |  +--|-- bra.s 8892 <createPersonaAnim+0x1ba>
		} else if ( tmp -> thisVar.varType == SVT_STACK) {
    8820:	|  |  |  |  \-> movea.l 44(sp),a0
    8824:	|  |  |  |      move.l (a0),d0
    8826:	|  |  |  |      moveq #6,d1
    8828:	|  |  |  |      cmp.l d0,d1
    882a:	|  |  |  |  /-- bne.s 8872 <createPersonaAnim+0x19a>
			getValueType (&frameNum, SVT_INT, &tmp->thisVar.varData.theStack -> first -> thisVar);
    882c:	|  |  |  |  |   movea.l 44(sp),a0
    8830:	|  |  |  |  |   movea.l 4(a0),a0
    8834:	|  |  |  |  |   move.l (a0),d0
    8836:	|  |  |  |  |   move.l d0,-(sp)
    8838:	|  |  |  |  |   pea 1 <_start+0x1>
    883c:	|  |  |  |  |   lea 20(sp),a0
    8840:	|  |  |  |  |   move.l a0,-(sp)
    8842:	|  |  |  |  |   jsr 136fe <getValueType>
    8848:	|  |  |  |  |   lea 12(sp),sp
			getValueType (&howMany, SVT_INT, &tmp -> thisVar.varData.theStack -> first -> next -> thisVar);
    884c:	|  |  |  |  |   movea.l 44(sp),a0
    8850:	|  |  |  |  |   movea.l 4(a0),a0
    8854:	|  |  |  |  |   movea.l (a0),a0
    8856:	|  |  |  |  |   move.l 8(a0),d0
    885a:	|  |  |  |  |   move.l d0,-(sp)
    885c:	|  |  |  |  |   pea 1 <_start+0x1>
    8860:	|  |  |  |  |   lea 16(sp),a0
    8864:	|  |  |  |  |   move.l a0,-(sp)
    8866:	|  |  |  |  |   jsr 136fe <getValueType>
    886c:	|  |  |  |  |   lea 12(sp),sp
    8870:	|  |  |  +--|-- bra.s 8892 <createPersonaAnim+0x1ba>
		} else {
			getValueType (&frameNum, SVT_INT, &tmp -> thisVar);
    8872:	|  |  |  |  \-> move.l 44(sp),d0
    8876:	|  |  |  |      move.l d0,-(sp)
    8878:	|  |  |  |      pea 1 <_start+0x1>
    887c:	|  |  |  |      lea 20(sp),a0
    8880:	|  |  |  |      move.l a0,-(sp)
    8882:	|  |  |  |      jsr 136fe <getValueType>
    8888:	|  |  |  |      lea 12(sp),sp
			howMany = 1;
    888c:	|  |  |  |      moveq #1,d0
    888e:	|  |  |  |      move.l d0,8(sp)
		}
		trimStack (stacky);
    8892:	|  |  |  \----> move.l 60(sp),-(sp)
    8896:	|  |  |         jsr 14082 <trimStack>
    889c:	|  |  |         addq.l #4,sp
		newP -> frames[a].frameNum = frameNum;
    889e:	|  |  |         movea.l 28(sp),a0
    88a2:	|  |  |         movea.l 4(a0),a0
    88a6:	|  |  |         move.l 48(sp),d1
    88aa:	|  |  |         move.l d1,d0
    88ac:	|  |  |         add.l d0,d0
    88ae:	|  |  |         add.l d1,d0
    88b0:	|  |  |         add.l d0,d0
    88b2:	|  |  |         add.l d0,d0
    88b4:	|  |  |         adda.l d0,a0
    88b6:	|  |  |         move.l 12(sp),d0
    88ba:	|  |  |         move.l d0,(a0)
		newP -> frames[a].howMany = howMany;
    88bc:	|  |  |         movea.l 28(sp),a0
    88c0:	|  |  |         movea.l 4(a0),a0
    88c4:	|  |  |         move.l 48(sp),d1
    88c8:	|  |  |         move.l d1,d0
    88ca:	|  |  |         add.l d0,d0
    88cc:	|  |  |         add.l d1,d0
    88ce:	|  |  |         add.l d0,d0
    88d0:	|  |  |         add.l d0,d0
    88d2:	|  |  |         adda.l d0,a0
    88d4:	|  |  |         move.l 8(sp),d0
    88d8:	|  |  |         move.l d0,4(a0)
		tmp = *stacky;
    88dc:	|  |  |         movea.l 60(sp),a0
    88e0:	|  |  |         move.l (a0),44(sp)
	while (a) {
    88e4:	|  |  \-------> tst.l 48(sp)
    88e8:	|  \----------- bne.w 8794 <createPersonaAnim+0xbc>
	}

	return newP;
    88ec:	|               move.l 28(sp),d0
}
    88f0:	\-------------> move.l (sp)+,d2
    88f2:	                movea.l (sp)+,a6
    88f4:	                lea 44(sp),sp
    88f8:	                rts

000088fa <deleteAnim>:

void deleteAnim (struct personaAnimation * orig) {
    88fa:	       lea -12(sp),sp
    88fe:	       move.l a6,-(sp)

	if(orig->theSprites)
    8900:	       movea.l 20(sp),a0
    8904:	       move.l (a0),d0
    8906:	   /-- beq.s 8930 <deleteAnim+0x36>
	{
		int timesused = --orig->theSprites->timesUsed;
    8908:	   |   movea.l 20(sp),a0
    890c:	   |   movea.l (a0),a0
    890e:	   |   move.l 4(a0),d0
    8912:	   |   subq.l #1,d0
    8914:	   |   move.l d0,4(a0)
    8918:	   |   move.l 4(a0),12(sp)
		
		if(!timesused)
    891e:	   +-- bne.s 8930 <deleteAnim+0x36>
		{
			forgetSpriteBank( orig->theSprites);
    8920:	   |   movea.l 20(sp),a0
    8924:	   |   move.l (a0),d0
    8926:	   |   move.l d0,-(sp)
    8928:	   |   jsr 7b2c <forgetSpriteBank>
    892e:	   |   addq.l #4,sp
		}
	}			
	
	if (orig)
    8930:	   \-> tst.l 20(sp)
    8934:	/----- beq.s 8974 <deleteAnim+0x7a>
	{
		if (orig -> numFrames) {
    8936:	|      movea.l 20(sp),a0
    893a:	|      move.l 8(a0),d0
    893e:	|  /-- beq.s 895a <deleteAnim+0x60>
			FreeVec( orig->frames);
    8940:	|  |   movea.l 20(sp),a0
    8944:	|  |   move.l 4(a0),8(sp)
    894a:	|  |   move.l 1b1a2 <SysBase>,d0
    8950:	|  |   movea.l d0,a6
    8952:	|  |   movea.l 8(sp),a1
    8956:	|  |   jsr -690(a6)
		}
		FreeVec(orig);
    895a:	|  \-> move.l 20(sp),4(sp)
    8960:	|      move.l 1b1a2 <SysBase>,d0
    8966:	|      movea.l d0,a6
    8968:	|      movea.l 4(sp),a1
    896c:	|      jsr -690(a6)
		orig = NULL;
    8970:	|      clr.l 20(sp)
	}	
	
}
    8974:	\----> nop
    8976:	       movea.l (sp)+,a6
    8978:	       lea 12(sp),sp
    897c:	       rts

0000897e <doBorderStuff>:

BOOL doBorderStuff (struct onScreenPerson * moveMe) {
    897e:	          lea -124(sp),sp
    8982:	          movem.l d2-d7,-(sp)
    if (moveMe -> inPoly == moveMe -> walkToPoly) {
    8986:	          movea.l 152(sp),a0
    898a:	          move.l 56(a0),d1
    898e:	          movea.l 152(sp),a0
    8992:	          move.l 60(a0),d0
    8996:	          cmp.l d1,d0
    8998:	      /-- bne.s 89c8 <doBorderStuff+0x4a>
        moveMe -> inPoly = -1;
    899a:	      |   movea.l 152(sp),a0
    899e:	      |   moveq #-1,d0
    89a0:	      |   move.l d0,56(a0)
        moveMe -> thisStepX = moveMe -> walkToX;
    89a4:	      |   movea.l 152(sp),a0
    89a8:	      |   move.l 40(a0),d0
    89ac:	      |   movea.l 152(sp),a0
    89b0:	      |   move.l d0,48(a0)
        moveMe -> thisStepY = moveMe -> walkToY;
    89b4:	      |   movea.l 152(sp),a0
    89b8:	      |   move.l 44(a0),d0
    89bc:	      |   movea.l 152(sp),a0
    89c0:	      |   move.l d0,52(a0)
    89c4:	   /--|-- bra.w 8f2e <doBorderStuff+0x5b0>
    } else {
        // The section in which we need to be next...
        int newPoly = currentFloor -> matrix[moveMe -> inPoly][moveMe -> walkToPoly];
    89c8:	   |  \-> movea.l 1b30e <currentFloor>,a0
    89ce:	   |      move.l 16(a0),d1
    89d2:	   |      movea.l 152(sp),a0
    89d6:	   |      move.l 56(a0),d0
    89da:	   |      add.l d0,d0
    89dc:	   |      add.l d0,d0
    89de:	   |      movea.l d1,a0
    89e0:	   |      adda.l d0,a0
    89e2:	   |      move.l (a0),d1
    89e4:	   |      movea.l 152(sp),a0
    89e8:	   |      move.l 60(a0),d0
    89ec:	   |      add.l d0,d0
    89ee:	   |      add.l d0,d0
    89f0:	   |      movea.l d1,a0
    89f2:	   |      adda.l d0,a0
    89f4:	   |      move.l (a0),144(sp)
        if (newPoly == -1) return FALSE;
    89f8:	   |      moveq #-1,d0
    89fa:	   |      cmp.l 144(sp),d0
    89fe:	   |  /-- bne.s 8a06 <doBorderStuff+0x88>
    8a00:	   |  |   clr.w d0
    8a02:	/--|--|-- bra.w 902e <doBorderStuff+0x6b0>

        // Grab the index of the second matching corner...
        int ID, ID2;
        if (! getMatchingCorners (&(currentFloor -> polygon[moveMe -> inPoly]), &(currentFloor -> polygon[newPoly]), &ID, &ID2))
    8a06:	|  |  \-> movea.l 1b30e <currentFloor>,a0
    8a0c:	|  |      move.l 12(a0),d1
    8a10:	|  |      move.l 144(sp),d0
    8a14:	|  |      lsl.l #3,d0
    8a16:	|  |      add.l d0,d1
    8a18:	|  |      movea.l 1b30e <currentFloor>,a0
    8a1e:	|  |      movea.l 12(a0),a1
    8a22:	|  |      movea.l 152(sp),a0
    8a26:	|  |      move.l 56(a0),d0
    8a2a:	|  |      lsl.l #3,d0
    8a2c:	|  |      add.l a1,d0
    8a2e:	|  |      lea 40(sp),a0
    8a32:	|  |      move.l a0,-(sp)
    8a34:	|  |      lea 48(sp),a0
    8a38:	|  |      move.l a0,-(sp)
    8a3a:	|  |      move.l d1,-(sp)
    8a3c:	|  |      move.l d0,-(sp)
    8a3e:	|  |      jsr 14e72 <getMatchingCorners>
    8a44:	|  |      lea 16(sp),sp
    8a48:	|  |      tst.w d0
    8a4a:	|  |  /-- bne.s 8a60 <doBorderStuff+0xe2>
		{
			KPrintF ("Not a valid floor plan!");
    8a4c:	|  |  |   pea 1794f <PutChar+0x140f>
    8a52:	|  |  |   jsr 15bf0 <KPrintF>
    8a58:	|  |  |   addq.l #4,sp
            return FALSE;
    8a5a:	|  |  |   clr.w d0
    8a5c:	+--|--|-- bra.w 902e <doBorderStuff+0x6b0>
		}

        // Remember that we're walking to the new polygon...
        moveMe -> inPoly = newPoly;
    8a60:	|  |  \-> movea.l 152(sp),a0
    8a64:	|  |      move.l 144(sp),56(a0)

        // Calculate the destination position on the coincidental line...
        int x1 = moveMe -> x, y1 = moveMe -> y;
    8a6a:	|  |      movea.l 152(sp),a0
    8a6e:	|  |      move.l (a0),d0
    8a70:	|  |      move.l d0,-(sp)
    8a72:	|  |      jsr 15e40 <__fixsfsi>
    8a78:	|  |      addq.l #4,sp
    8a7a:	|  |      move.l d0,140(sp)
    8a7e:	|  |      movea.l 152(sp),a0
    8a82:	|  |      move.l 4(a0),d0
    8a86:	|  |      move.l d0,-(sp)
    8a88:	|  |      jsr 15e40 <__fixsfsi>
    8a8e:	|  |      addq.l #4,sp
    8a90:	|  |      move.l d0,136(sp)
        int x2 = moveMe -> walkToX, y2 = moveMe -> walkToY;
    8a94:	|  |      movea.l 152(sp),a0
    8a98:	|  |      move.l 40(a0),132(sp)
    8a9e:	|  |      movea.l 152(sp),a0
    8aa2:	|  |      move.l 44(a0),128(sp)
        int x3 = currentFloor -> vertex[ID].x, y3 = currentFloor -> vertex[ID].y;
    8aa8:	|  |      movea.l 1b30e <currentFloor>,a0
    8aae:	|  |      move.l 4(a0),d1
    8ab2:	|  |      move.l 44(sp),d0
    8ab6:	|  |      lsl.l #3,d0
    8ab8:	|  |      movea.l d1,a0
    8aba:	|  |      adda.l d0,a0
    8abc:	|  |      move.l (a0),124(sp)
    8ac0:	|  |      movea.l 1b30e <currentFloor>,a0
    8ac6:	|  |      move.l 4(a0),d1
    8aca:	|  |      move.l 44(sp),d0
    8ace:	|  |      lsl.l #3,d0
    8ad0:	|  |      movea.l d1,a0
    8ad2:	|  |      adda.l d0,a0
    8ad4:	|  |      move.l 4(a0),120(sp)
        int x4 = currentFloor -> vertex[ID2].x, y4 = currentFloor -> vertex[ID2].y;
    8ada:	|  |      movea.l 1b30e <currentFloor>,a0
    8ae0:	|  |      move.l 4(a0),d1
    8ae4:	|  |      move.l 40(sp),d0
    8ae8:	|  |      lsl.l #3,d0
    8aea:	|  |      movea.l d1,a0
    8aec:	|  |      adda.l d0,a0
    8aee:	|  |      move.l (a0),116(sp)
    8af2:	|  |      movea.l 1b30e <currentFloor>,a0
    8af8:	|  |      move.l 4(a0),d1
    8afc:	|  |      move.l 40(sp),d0
    8b00:	|  |      lsl.l #3,d0
    8b02:	|  |      movea.l d1,a0
    8b04:	|  |      adda.l d0,a0
    8b06:	|  |      move.l 4(a0),112(sp)

        int xAB = x1 - x2;
    8b0c:	|  |      move.l 140(sp),d0
    8b10:	|  |      sub.l 132(sp),d0
    8b14:	|  |      move.l d0,108(sp)
        int yAB = y1 - y2;
    8b18:	|  |      move.l 136(sp),d0
    8b1c:	|  |      sub.l 128(sp),d0
    8b20:	|  |      move.l d0,104(sp)
        int xCD = x4 - x3;
    8b24:	|  |      move.l 116(sp),d0
    8b28:	|  |      sub.l 124(sp),d0
    8b2c:	|  |      move.l d0,100(sp)
        int yCD = y4 - y3;
    8b30:	|  |      move.l 112(sp),d0
    8b34:	|  |      sub.l 120(sp),d0
    8b38:	|  |      move.l d0,96(sp)

        double m = (yAB * (x3 - x1) - xAB * (y3 - y1));
    8b3c:	|  |      move.l 124(sp),d0
    8b40:	|  |      sub.l 140(sp),d0
    8b44:	|  |      move.l 104(sp),-(sp)
    8b48:	|  |      move.l d0,-(sp)
    8b4a:	|  |      jsr 1642a <__mulsi3>
    8b50:	|  |      addq.l #8,sp
    8b52:	|  |      move.l d0,d2
    8b54:	|  |      move.l 120(sp),d0
    8b58:	|  |      sub.l 136(sp),d0
    8b5c:	|  |      move.l 108(sp),-(sp)
    8b60:	|  |      move.l d0,-(sp)
    8b62:	|  |      jsr 1642a <__mulsi3>
    8b68:	|  |      addq.l #8,sp
    8b6a:	|  |      move.l d2,d1
    8b6c:	|  |      sub.l d0,d1
    8b6e:	|  |      move.l d1,-(sp)
    8b70:	|  |      jsr 15e68 <__floatsidf>
    8b76:	|  |      addq.l #4,sp
    8b78:	|  |      move.l d0,32(sp)
    8b7c:	|  |      move.l d1,36(sp)
    8b80:	|  |      move.l 32(sp),88(sp)
    8b86:	|  |      move.l 36(sp),92(sp)
        m /= ((xAB * yCD) - (yAB * xCD));
    8b8c:	|  |      move.l 96(sp),-(sp)
    8b90:	|  |      move.l 112(sp),-(sp)
    8b94:	|  |      jsr 1642a <__mulsi3>
    8b9a:	|  |      addq.l #8,sp
    8b9c:	|  |      move.l d0,d2
    8b9e:	|  |      move.l 100(sp),-(sp)
    8ba2:	|  |      move.l 108(sp),-(sp)
    8ba6:	|  |      jsr 1642a <__mulsi3>
    8bac:	|  |      addq.l #8,sp
    8bae:	|  |      move.l d2,d1
    8bb0:	|  |      sub.l d0,d1
    8bb2:	|  |      move.l d1,-(sp)
    8bb4:	|  |      jsr 15e68 <__floatsidf>
    8bba:	|  |      addq.l #4,sp
    8bbc:	|  |      move.l d1,-(sp)
    8bbe:	|  |      move.l d0,-(sp)
    8bc0:	|  |      move.l 100(sp),-(sp)
    8bc4:	|  |      move.l 100(sp),-(sp)
    8bc8:	|  |      jsr 15cf2 <__divdf3>
    8bce:	|  |      lea 16(sp),sp
    8bd2:	|  |      move.l d0,24(sp)
    8bd6:	|  |      move.l d1,28(sp)
    8bda:	|  |      move.l 24(sp),88(sp)
    8be0:	|  |      move.l 28(sp),92(sp)

        if (m > 0 && m < 1) {
    8be6:	|  |      clr.l -(sp)
    8be8:	|  |      clr.l -(sp)
    8bea:	|  |      move.l 100(sp),-(sp)
    8bee:	|  |      move.l 100(sp),-(sp)
    8bf2:	|  |      jsr 15fc6 <__gtdf2>
    8bf8:	|  |      lea 16(sp),sp
    8bfc:	|  |      tst.l d0
    8bfe:	|  |  /-- ble.w 8cd6 <doBorderStuff+0x358>
    8c02:	|  |  |   clr.l -(sp)
    8c04:	|  |  |   move.l #1072693248,-(sp)
    8c0a:	|  |  |   move.l 100(sp),-(sp)
    8c0e:	|  |  |   move.l 100(sp),-(sp)
    8c12:	|  |  |   jsr 16080 <__ltdf2>
    8c18:	|  |  |   lea 16(sp),sp
    8c1c:	|  |  |   tst.l d0
    8c1e:	|  |  +-- bge.w 8cd6 <doBorderStuff+0x358>
            moveMe -> thisStepX = x3 + m * xCD;
    8c22:	|  |  |   move.l 124(sp),-(sp)
    8c26:	|  |  |   jsr 15e68 <__floatsidf>
    8c2c:	|  |  |   addq.l #4,sp
    8c2e:	|  |  |   move.l d0,d2
    8c30:	|  |  |   move.l d1,d3
    8c32:	|  |  |   move.l 100(sp),-(sp)
    8c36:	|  |  |   jsr 15e68 <__floatsidf>
    8c3c:	|  |  |   addq.l #4,sp
    8c3e:	|  |  |   move.l 92(sp),-(sp)
    8c42:	|  |  |   move.l 92(sp),-(sp)
    8c46:	|  |  |   move.l d1,-(sp)
    8c48:	|  |  |   move.l d0,-(sp)
    8c4a:	|  |  |   jsr 15ef8 <__muldf3>
    8c50:	|  |  |   lea 16(sp),sp
    8c54:	|  |  |   move.l d1,-(sp)
    8c56:	|  |  |   move.l d0,-(sp)
    8c58:	|  |  |   move.l d3,-(sp)
    8c5a:	|  |  |   move.l d2,-(sp)
    8c5c:	|  |  |   jsr 15c90 <__adddf3>
    8c62:	|  |  |   lea 16(sp),sp
    8c66:	|  |  |   move.l d1,-(sp)
    8c68:	|  |  |   move.l d0,-(sp)
    8c6a:	|  |  |   jsr 15e00 <__fixdfsi>
    8c70:	|  |  |   addq.l #8,sp
    8c72:	|  |  |   movea.l 152(sp),a0
    8c76:	|  |  |   move.l d0,48(a0)
            moveMe -> thisStepY = y3 + m * yCD;
    8c7a:	|  |  |   move.l 120(sp),-(sp)
    8c7e:	|  |  |   jsr 15e68 <__floatsidf>
    8c84:	|  |  |   addq.l #4,sp
    8c86:	|  |  |   move.l d0,d2
    8c88:	|  |  |   move.l d1,d3
    8c8a:	|  |  |   move.l 96(sp),-(sp)
    8c8e:	|  |  |   jsr 15e68 <__floatsidf>
    8c94:	|  |  |   addq.l #4,sp
    8c96:	|  |  |   move.l 92(sp),-(sp)
    8c9a:	|  |  |   move.l 92(sp),-(sp)
    8c9e:	|  |  |   move.l d1,-(sp)
    8ca0:	|  |  |   move.l d0,-(sp)
    8ca2:	|  |  |   jsr 15ef8 <__muldf3>
    8ca8:	|  |  |   lea 16(sp),sp
    8cac:	|  |  |   move.l d1,-(sp)
    8cae:	|  |  |   move.l d0,-(sp)
    8cb0:	|  |  |   move.l d3,-(sp)
    8cb2:	|  |  |   move.l d2,-(sp)
    8cb4:	|  |  |   jsr 15c90 <__adddf3>
    8cba:	|  |  |   lea 16(sp),sp
    8cbe:	|  |  |   move.l d1,-(sp)
    8cc0:	|  |  |   move.l d0,-(sp)
    8cc2:	|  |  |   jsr 15e00 <__fixdfsi>
    8cc8:	|  |  |   addq.l #8,sp
    8cca:	|  |  |   movea.l 152(sp),a0
    8cce:	|  |  |   move.l d0,52(a0)
    8cd2:	|  +--|-- bra.w 8f2e <doBorderStuff+0x5b0>
        } else {
            int dx13 = x1 - x3, dx14 = x1 - x4, dx23 = x2 - x3, dx24 = x2 - x4;
    8cd6:	|  |  \-> move.l 140(sp),d0
    8cda:	|  |      sub.l 124(sp),d0
    8cde:	|  |      move.l d0,84(sp)
    8ce2:	|  |      move.l 140(sp),d0
    8ce6:	|  |      sub.l 116(sp),d0
    8cea:	|  |      move.l d0,80(sp)
    8cee:	|  |      move.l 132(sp),d0
    8cf2:	|  |      sub.l 124(sp),d0
    8cf6:	|  |      move.l d0,76(sp)
    8cfa:	|  |      move.l 132(sp),d0
    8cfe:	|  |      sub.l 116(sp),d0
    8d02:	|  |      move.l d0,72(sp)
            int dy13 = y1 - y3, dy14 = y1 - y4, dy23 = y2 - y3, dy24 = y2 - y4;
    8d06:	|  |      move.l 136(sp),d0
    8d0a:	|  |      sub.l 120(sp),d0
    8d0e:	|  |      move.l d0,68(sp)
    8d12:	|  |      move.l 136(sp),d0
    8d16:	|  |      sub.l 112(sp),d0
    8d1a:	|  |      move.l d0,64(sp)
    8d1e:	|  |      move.l 128(sp),d0
    8d22:	|  |      sub.l 120(sp),d0
    8d26:	|  |      move.l d0,60(sp)
    8d2a:	|  |      move.l 128(sp),d0
    8d2e:	|  |      sub.l 112(sp),d0
    8d32:	|  |      move.l d0,56(sp)

            dx13 *= dx13; dx14 *= dx14; dx23 *= dx23; dx24 *= dx24;
    8d36:	|  |      move.l 84(sp),-(sp)
    8d3a:	|  |      move.l 88(sp),-(sp)
    8d3e:	|  |      jsr 1642a <__mulsi3>
    8d44:	|  |      addq.l #8,sp
    8d46:	|  |      move.l d0,84(sp)
    8d4a:	|  |      move.l 80(sp),-(sp)
    8d4e:	|  |      move.l 84(sp),-(sp)
    8d52:	|  |      jsr 1642a <__mulsi3>
    8d58:	|  |      addq.l #8,sp
    8d5a:	|  |      move.l d0,80(sp)
    8d5e:	|  |      move.l 76(sp),-(sp)
    8d62:	|  |      move.l 80(sp),-(sp)
    8d66:	|  |      jsr 1642a <__mulsi3>
    8d6c:	|  |      addq.l #8,sp
    8d6e:	|  |      move.l d0,76(sp)
    8d72:	|  |      move.l 72(sp),-(sp)
    8d76:	|  |      move.l 76(sp),-(sp)
    8d7a:	|  |      jsr 1642a <__mulsi3>
    8d80:	|  |      addq.l #8,sp
    8d82:	|  |      move.l d0,72(sp)
            dy13 *= dy13; dy14 *= dy14; dy23 *= dy23; dy24 *= dy24;
    8d86:	|  |      move.l 68(sp),-(sp)
    8d8a:	|  |      move.l 72(sp),-(sp)
    8d8e:	|  |      jsr 1642a <__mulsi3>
    8d94:	|  |      addq.l #8,sp
    8d96:	|  |      move.l d0,68(sp)
    8d9a:	|  |      move.l 64(sp),-(sp)
    8d9e:	|  |      move.l 68(sp),-(sp)
    8da2:	|  |      jsr 1642a <__mulsi3>
    8da8:	|  |      addq.l #8,sp
    8daa:	|  |      move.l d0,64(sp)
    8dae:	|  |      move.l 60(sp),-(sp)
    8db2:	|  |      move.l 64(sp),-(sp)
    8db6:	|  |      jsr 1642a <__mulsi3>
    8dbc:	|  |      addq.l #8,sp
    8dbe:	|  |      move.l d0,60(sp)
    8dc2:	|  |      move.l 56(sp),-(sp)
    8dc6:	|  |      move.l 60(sp),-(sp)
    8dca:	|  |      jsr 1642a <__mulsi3>
    8dd0:	|  |      addq.l #8,sp
    8dd2:	|  |      move.l d0,56(sp)

            if (sqrt((double) dx13 + dy13) + sqrt((double) dx23 + dy23) <
    8dd6:	|  |      move.l 84(sp),-(sp)
    8dda:	|  |      jsr 15e68 <__floatsidf>
    8de0:	|  |      addq.l #4,sp
    8de2:	|  |      move.l d0,d2
    8de4:	|  |      move.l d1,d3
    8de6:	|  |      move.l 68(sp),-(sp)
    8dea:	|  |      jsr 15e68 <__floatsidf>
    8df0:	|  |      addq.l #4,sp
    8df2:	|  |      move.l d1,-(sp)
    8df4:	|  |      move.l d0,-(sp)
    8df6:	|  |      move.l d3,-(sp)
    8df8:	|  |      move.l d2,-(sp)
    8dfa:	|  |      jsr 15c90 <__adddf3>
    8e00:	|  |      lea 16(sp),sp
    8e04:	|  |      move.l d1,-(sp)
    8e06:	|  |      move.l d0,-(sp)
    8e08:	|  |      jsr 163e0 <sqrt>
    8e0e:	|  |      addq.l #8,sp
    8e10:	|  |      move.l d0,d2
    8e12:	|  |      move.l d1,d3
    8e14:	|  |      move.l 76(sp),-(sp)
    8e18:	|  |      jsr 15e68 <__floatsidf>
    8e1e:	|  |      addq.l #4,sp
    8e20:	|  |      move.l d0,d4
    8e22:	|  |      move.l d1,d5
    8e24:	|  |      move.l 60(sp),-(sp)
    8e28:	|  |      jsr 15e68 <__floatsidf>
    8e2e:	|  |      addq.l #4,sp
    8e30:	|  |      move.l d1,-(sp)
    8e32:	|  |      move.l d0,-(sp)
    8e34:	|  |      move.l d5,-(sp)
    8e36:	|  |      move.l d4,-(sp)
    8e38:	|  |      jsr 15c90 <__adddf3>
    8e3e:	|  |      lea 16(sp),sp
    8e42:	|  |      move.l d1,-(sp)
    8e44:	|  |      move.l d0,-(sp)
    8e46:	|  |      jsr 163e0 <sqrt>
    8e4c:	|  |      addq.l #8,sp
    8e4e:	|  |      move.l d1,-(sp)
    8e50:	|  |      move.l d0,-(sp)
    8e52:	|  |      move.l d3,-(sp)
    8e54:	|  |      move.l d2,-(sp)
    8e56:	|  |      jsr 15c90 <__adddf3>
    8e5c:	|  |      lea 16(sp),sp
    8e60:	|  |      move.l d0,d2
    8e62:	|  |      move.l d1,d3
                sqrt((double) dx14 + dy14) + sqrt((double) dx24 + dy24)) {
    8e64:	|  |      move.l 80(sp),-(sp)
    8e68:	|  |      jsr 15e68 <__floatsidf>
    8e6e:	|  |      addq.l #4,sp
    8e70:	|  |      move.l d0,d4
    8e72:	|  |      move.l d1,d5
    8e74:	|  |      move.l 64(sp),-(sp)
    8e78:	|  |      jsr 15e68 <__floatsidf>
    8e7e:	|  |      addq.l #4,sp
    8e80:	|  |      move.l d1,-(sp)
    8e82:	|  |      move.l d0,-(sp)
    8e84:	|  |      move.l d5,-(sp)
    8e86:	|  |      move.l d4,-(sp)
    8e88:	|  |      jsr 15c90 <__adddf3>
    8e8e:	|  |      lea 16(sp),sp
    8e92:	|  |      move.l d1,-(sp)
    8e94:	|  |      move.l d0,-(sp)
    8e96:	|  |      jsr 163e0 <sqrt>
    8e9c:	|  |      addq.l #8,sp
    8e9e:	|  |      move.l d0,d4
    8ea0:	|  |      move.l d1,d5
    8ea2:	|  |      move.l 72(sp),-(sp)
    8ea6:	|  |      jsr 15e68 <__floatsidf>
    8eac:	|  |      addq.l #4,sp
    8eae:	|  |      move.l d0,d6
    8eb0:	|  |      move.l d1,d7
    8eb2:	|  |      move.l 56(sp),-(sp)
    8eb6:	|  |      jsr 15e68 <__floatsidf>
    8ebc:	|  |      addq.l #4,sp
    8ebe:	|  |      move.l d1,-(sp)
    8ec0:	|  |      move.l d0,-(sp)
    8ec2:	|  |      move.l d7,-(sp)
    8ec4:	|  |      move.l d6,-(sp)
    8ec6:	|  |      jsr 15c90 <__adddf3>
    8ecc:	|  |      lea 16(sp),sp
    8ed0:	|  |      move.l d1,-(sp)
    8ed2:	|  |      move.l d0,-(sp)
    8ed4:	|  |      jsr 163e0 <sqrt>
    8eda:	|  |      addq.l #8,sp
    8edc:	|  |      move.l d1,-(sp)
    8ede:	|  |      move.l d0,-(sp)
    8ee0:	|  |      move.l d5,-(sp)
    8ee2:	|  |      move.l d4,-(sp)
    8ee4:	|  |      jsr 15c90 <__adddf3>
    8eea:	|  |      lea 16(sp),sp
            if (sqrt((double) dx13 + dy13) + sqrt((double) dx23 + dy23) <
    8eee:	|  |      move.l d1,-(sp)
    8ef0:	|  |      move.l d0,-(sp)
    8ef2:	|  |      move.l d3,-(sp)
    8ef4:	|  |      move.l d2,-(sp)
    8ef6:	|  |      jsr 16080 <__ltdf2>
    8efc:	|  |      lea 16(sp),sp
    8f00:	|  |      tst.l d0
    8f02:	|  |  /-- bge.s 8f1a <doBorderStuff+0x59c>
                moveMe -> thisStepX = x3;
    8f04:	|  |  |   movea.l 152(sp),a0
    8f08:	|  |  |   move.l 124(sp),48(a0)
                moveMe -> thisStepY = y3;
    8f0e:	|  |  |   movea.l 152(sp),a0
    8f12:	|  |  |   move.l 120(sp),52(a0)
    8f18:	|  +--|-- bra.s 8f2e <doBorderStuff+0x5b0>
            } else {
                moveMe -> thisStepX = x4;
    8f1a:	|  |  \-> movea.l 152(sp),a0
    8f1e:	|  |      move.l 116(sp),48(a0)
                moveMe -> thisStepY = y4;
    8f24:	|  |      movea.l 152(sp),a0
    8f28:	|  |      move.l 112(sp),52(a0)
            }
        }
    }

    float yDiff = moveMe -> thisStepY - moveMe -> y;
    8f2e:	|  \----> movea.l 152(sp),a0
    8f32:	|         move.l 52(a0),d0
    8f36:	|         move.l d0,-(sp)
    8f38:	|         jsr 15ea8 <__floatsisf>
    8f3e:	|         addq.l #4,sp
    8f40:	|         move.l d0,d1
    8f42:	|         movea.l 152(sp),a0
    8f46:	|         move.l 4(a0),d0
    8f4a:	|         move.l d0,-(sp)
    8f4c:	|         move.l d1,-(sp)
    8f4e:	|         jsr 1619c <__subsf3>
    8f54:	|         addq.l #8,sp
    8f56:	|         move.l d0,52(sp)
    float xDiff = moveMe -> x - moveMe -> thisStepX;
    8f5a:	|         movea.l 152(sp),a0
    8f5e:	|         move.l (a0),d2
    8f60:	|         movea.l 152(sp),a0
    8f64:	|         move.l 48(a0),d0
    8f68:	|         move.l d0,-(sp)
    8f6a:	|         jsr 15ea8 <__floatsisf>
    8f70:	|         addq.l #4,sp
    8f72:	|         move.l d0,-(sp)
    8f74:	|         move.l d2,-(sp)
    8f76:	|         jsr 1619c <__subsf3>
    8f7c:	|         addq.l #8,sp
    8f7e:	|         move.l d0,48(sp)
    if (xDiff || yDiff) {
    8f82:	|         clr.l -(sp)
    8f84:	|         move.l 52(sp),-(sp)
    8f88:	|         jsr 16104 <__nesf2>
    8f8e:	|         addq.l #8,sp
    8f90:	|         tst.l d0
    8f92:	|     /-- bne.s 8fa6 <doBorderStuff+0x628>
    8f94:	|     |   clr.l -(sp)
    8f96:	|     |   move.l 56(sp),-(sp)
    8f9a:	|     |   jsr 16104 <__nesf2>
    8fa0:	|     |   addq.l #8,sp
    8fa2:	|     |   tst.l d0
    8fa4:	|  /--|-- beq.s 901c <doBorderStuff+0x69e>
        moveMe -> wantAngle = 180 + ANGLEFIX * atan2f(xDiff, yDiff * 2);
    8fa6:	|  |  \-> move.l 52(sp),d0
    8faa:	|  |      move.l d0,-(sp)
    8fac:	|  |      move.l d0,-(sp)
    8fae:	|  |      jsr 15c5a <__addsf3>
    8fb4:	|  |      addq.l #8,sp
    8fb6:	|  |      move.l d0,-(sp)
    8fb8:	|  |      move.l 52(sp),-(sp)
    8fbc:	|  |      jsr 16230 <atan2f>
    8fc2:	|  |      addq.l #8,sp
    8fc4:	|  |      move.l d0,-(sp)
    8fc6:	|  |      jsr 15dc0 <__extendsfdf2>
    8fcc:	|  |      addq.l #4,sp
    8fce:	|  |      move.l #-1540411785,-(sp)
    8fd4:	|  |      move.l #1078765033,-(sp)
    8fda:	|  |      move.l d1,-(sp)
    8fdc:	|  |      move.l d0,-(sp)
    8fde:	|  |      jsr 15ef8 <__muldf3>
    8fe4:	|  |      lea 16(sp),sp
    8fe8:	|  |      clr.l -(sp)
    8fea:	|  |      move.l #1080459264,-(sp)
    8ff0:	|  |      move.l d1,-(sp)
    8ff2:	|  |      move.l d0,-(sp)
    8ff4:	|  |      jsr 15c90 <__adddf3>
    8ffa:	|  |      lea 16(sp),sp
    8ffe:	|  |      move.l d1,-(sp)
    9000:	|  |      move.l d0,-(sp)
    9002:	|  |      jsr 15e00 <__fixdfsi>
    9008:	|  |      addq.l #8,sp
    900a:	|  |      movea.l 152(sp),a0
    900e:	|  |      move.l d0,96(a0)
        moveMe -> spinning = TRUE;
    9012:	|  |      movea.l 152(sp),a0
    9016:	|  |      move.w #1,66(a0)
    }

    setFrames (moveMe, ANI_WALK);
    901c:	|  \----> pea 1 <_start+0x1>
    9020:	|         move.l 156(sp),-(sp)
    9024:	|         jsr 7026 <setFrames>
    902a:	|         addq.l #8,sp
    return TRUE;
    902c:	|         moveq #1,d0
}
    902e:	\-------> movem.l (sp)+,d2-d7
    9032:	          lea 124(sp),sp
    9036:	          rts

00009038 <drawPeople>:

void drawPeople () {
    9038:	                   lea -24(sp),sp
    903c:	                   move.l d2,-(sp)

	shufflePeople ();
    903e:	                   jsr aad4 <shufflePeople>

	struct onScreenPerson * thisPerson = allPeople;
    9044:	                   move.l 1b25a <allPeople>,24(sp)
	struct personaAnimation * myAnim = NULL;
    904c:	                   clr.l 20(sp)
	overRegion = NULL;
    9050:	                   clr.l 1b306 <overRegion>

	while (thisPerson) {
    9056:	   /-------------- bra.w 9608 <drawPeople+0x5d0>
		if (thisPerson -> show) {
    905a:	/--|-------------> movea.l 24(sp),a0
    905e:	|  |               move.w 104(a0),d0
    9062:	|  |  /----------- beq.w 93bc <drawPeople+0x384>
			myAnim = thisPerson -> myAnim;
    9066:	|  |  |            movea.l 24(sp),a0
    906a:	|  |  |            move.l 72(a0),20(sp)
			if (myAnim != thisPerson -> lastUsedAnim) {
    9070:	|  |  |            movea.l 24(sp),a0
    9074:	|  |  |            move.l 76(a0),d0
    9078:	|  |  |            cmp.l 20(sp),d0
    907c:	|  |  |  /-------- beq.w 924a <drawPeople+0x212>
				thisPerson -> samePosCount = 0;
    9080:	|  |  |  |         movea.l 24(sp),a0
    9084:	|  |  |  |         clr.l 16(a0)
				thisPerson -> lastUsedAnim = myAnim;
    9088:	|  |  |  |         movea.l 24(sp),a0
    908c:	|  |  |  |         move.l 20(sp),76(a0)
				thisPerson -> frameNum = 0;
    9092:	|  |  |  |         movea.l 24(sp),a0
    9096:	|  |  |  |         clr.l 84(a0)
				thisPerson -> frameTick = myAnim -> frames[0].howMany;
    909a:	|  |  |  |         movea.l 20(sp),a0
    909e:	|  |  |  |         movea.l 4(a0),a0
    90a2:	|  |  |  |         move.l 4(a0),d0
    90a6:	|  |  |  |         movea.l 24(sp),a0
    90aa:	|  |  |  |         move.l d0,88(a0)
				if (myAnim -> frames[thisPerson -> frameNum].noise > 0) {
    90ae:	|  |  |  |         movea.l 20(sp),a0
    90b2:	|  |  |  |         movea.l 4(a0),a1
    90b6:	|  |  |  |         movea.l 24(sp),a0
    90ba:	|  |  |  |         move.l 84(a0),d0
    90be:	|  |  |  |         move.l d0,d1
    90c0:	|  |  |  |         move.l d1,d0
    90c2:	|  |  |  |         add.l d0,d0
    90c4:	|  |  |  |         add.l d1,d0
    90c6:	|  |  |  |         add.l d0,d0
    90c8:	|  |  |  |         add.l d0,d0
    90ca:	|  |  |  |         lea (0,a1,d0.l),a0
    90ce:	|  |  |  |         move.l 8(a0),d0
    90d2:	|  |  |  |     /-- ble.w 9174 <drawPeople+0x13c>
					startSound(myAnim -> frames[thisPerson -> frameNum].noise, FALSE);
    90d6:	|  |  |  |     |   movea.l 20(sp),a0
    90da:	|  |  |  |     |   movea.l 4(a0),a1
    90de:	|  |  |  |     |   movea.l 24(sp),a0
    90e2:	|  |  |  |     |   move.l 84(a0),d0
    90e6:	|  |  |  |     |   move.l d0,d1
    90e8:	|  |  |  |     |   move.l d1,d0
    90ea:	|  |  |  |     |   add.l d0,d0
    90ec:	|  |  |  |     |   add.l d1,d0
    90ee:	|  |  |  |     |   add.l d0,d0
    90f0:	|  |  |  |     |   add.l d0,d0
    90f2:	|  |  |  |     |   lea (0,a1,d0.l),a0
    90f6:	|  |  |  |     |   move.l 8(a0),d0
    90fa:	|  |  |  |     |   clr.l -(sp)
    90fc:	|  |  |  |     |   move.l d0,-(sp)
    90fe:	|  |  |  |     |   jsr c1c0 <startSound>
    9104:	|  |  |  |     |   addq.l #8,sp
					thisPerson -> frameNum ++;
    9106:	|  |  |  |     |   movea.l 24(sp),a0
    910a:	|  |  |  |     |   move.l 84(a0),d0
    910e:	|  |  |  |     |   addq.l #1,d0
    9110:	|  |  |  |     |   movea.l 24(sp),a0
    9114:	|  |  |  |     |   move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    9118:	|  |  |  |     |   movea.l 24(sp),a0
    911c:	|  |  |  |     |   move.l 84(a0),d0
    9120:	|  |  |  |     |   movea.l 24(sp),a0
    9124:	|  |  |  |     |   movea.l 72(a0),a0
    9128:	|  |  |  |     |   move.l 8(a0),d1
    912c:	|  |  |  |     |   move.l d1,-(sp)
    912e:	|  |  |  |     |   move.l d0,-(sp)
    9130:	|  |  |  |     |   jsr 164d6 <__modsi3>
    9136:	|  |  |  |     |   addq.l #8,sp
    9138:	|  |  |  |     |   movea.l 24(sp),a0
    913c:	|  |  |  |     |   move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    9140:	|  |  |  |     |   movea.l 24(sp),a0
    9144:	|  |  |  |     |   movea.l 72(a0),a0
    9148:	|  |  |  |     |   movea.l 4(a0),a1
    914c:	|  |  |  |     |   movea.l 24(sp),a0
    9150:	|  |  |  |     |   move.l 84(a0),d0
    9154:	|  |  |  |     |   move.l d0,d1
    9156:	|  |  |  |     |   move.l d1,d0
    9158:	|  |  |  |     |   add.l d0,d0
    915a:	|  |  |  |     |   add.l d1,d0
    915c:	|  |  |  |     |   add.l d0,d0
    915e:	|  |  |  |     |   add.l d0,d0
    9160:	|  |  |  |     |   lea (0,a1,d0.l),a0
    9164:	|  |  |  |     |   move.l 4(a0),d0
    9168:	|  |  |  |     |   movea.l 24(sp),a0
    916c:	|  |  |  |     |   move.l d0,88(a0)
    9170:	|  |  |  |  /--|-- bra.w 92b2 <drawPeople+0x27a>
				} else if (myAnim -> frames[thisPerson -> frameNum].noise) {
    9174:	|  |  |  |  |  \-> movea.l 20(sp),a0
    9178:	|  |  |  |  |      movea.l 4(a0),a1
    917c:	|  |  |  |  |      movea.l 24(sp),a0
    9180:	|  |  |  |  |      move.l 84(a0),d0
    9184:	|  |  |  |  |      move.l d0,d1
    9186:	|  |  |  |  |      move.l d1,d0
    9188:	|  |  |  |  |      add.l d0,d0
    918a:	|  |  |  |  |      add.l d1,d0
    918c:	|  |  |  |  |      add.l d0,d0
    918e:	|  |  |  |  |      add.l d0,d0
    9190:	|  |  |  |  |      lea (0,a1,d0.l),a0
    9194:	|  |  |  |  |      move.l 8(a0),d0
    9198:	|  |  |  |  +----- beq.w 92b2 <drawPeople+0x27a>
					startNewFunctionNum (- myAnim -> frames[thisPerson -> frameNum].noise, 0, NULL, noStack, TRUE);
    919c:	|  |  |  |  |      movea.l 1b172 <noStack>,a1
    91a2:	|  |  |  |  |      movea.l 20(sp),a0
    91a6:	|  |  |  |  |      move.l 4(a0),d2
    91aa:	|  |  |  |  |      movea.l 24(sp),a0
    91ae:	|  |  |  |  |      move.l 84(a0),d0
    91b2:	|  |  |  |  |      move.l d0,d1
    91b4:	|  |  |  |  |      move.l d1,d0
    91b6:	|  |  |  |  |      add.l d0,d0
    91b8:	|  |  |  |  |      add.l d1,d0
    91ba:	|  |  |  |  |      add.l d0,d0
    91bc:	|  |  |  |  |      add.l d0,d0
    91be:	|  |  |  |  |      movea.l d2,a0
    91c0:	|  |  |  |  |      adda.l d0,a0
    91c2:	|  |  |  |  |      move.l 8(a0),d0
    91c6:	|  |  |  |  |      neg.l d0
    91c8:	|  |  |  |  |      pea 1 <_start+0x1>
    91cc:	|  |  |  |  |      move.l a1,-(sp)
    91ce:	|  |  |  |  |      clr.l -(sp)
    91d0:	|  |  |  |  |      clr.l -(sp)
    91d2:	|  |  |  |  |      move.l d0,-(sp)
    91d4:	|  |  |  |  |      jsr 59ca <startNewFunctionNum>
    91da:	|  |  |  |  |      lea 20(sp),sp
					thisPerson -> frameNum ++;
    91de:	|  |  |  |  |      movea.l 24(sp),a0
    91e2:	|  |  |  |  |      move.l 84(a0),d0
    91e6:	|  |  |  |  |      addq.l #1,d0
    91e8:	|  |  |  |  |      movea.l 24(sp),a0
    91ec:	|  |  |  |  |      move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    91f0:	|  |  |  |  |      movea.l 24(sp),a0
    91f4:	|  |  |  |  |      move.l 84(a0),d0
    91f8:	|  |  |  |  |      movea.l 24(sp),a0
    91fc:	|  |  |  |  |      movea.l 72(a0),a0
    9200:	|  |  |  |  |      move.l 8(a0),d1
    9204:	|  |  |  |  |      move.l d1,-(sp)
    9206:	|  |  |  |  |      move.l d0,-(sp)
    9208:	|  |  |  |  |      jsr 164d6 <__modsi3>
    920e:	|  |  |  |  |      addq.l #8,sp
    9210:	|  |  |  |  |      movea.l 24(sp),a0
    9214:	|  |  |  |  |      move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    9218:	|  |  |  |  |      movea.l 24(sp),a0
    921c:	|  |  |  |  |      movea.l 72(a0),a0
    9220:	|  |  |  |  |      movea.l 4(a0),a1
    9224:	|  |  |  |  |      movea.l 24(sp),a0
    9228:	|  |  |  |  |      move.l 84(a0),d0
    922c:	|  |  |  |  |      move.l d0,d1
    922e:	|  |  |  |  |      move.l d1,d0
    9230:	|  |  |  |  |      add.l d0,d0
    9232:	|  |  |  |  |      add.l d1,d0
    9234:	|  |  |  |  |      add.l d0,d0
    9236:	|  |  |  |  |      add.l d0,d0
    9238:	|  |  |  |  |      lea (0,a1,d0.l),a0
    923c:	|  |  |  |  |      move.l 4(a0),d0
    9240:	|  |  |  |  |      movea.l 24(sp),a0
    9244:	|  |  |  |  |      move.l d0,88(a0)
    9248:	|  |  |  |  +----- bra.s 92b2 <drawPeople+0x27a>
				}
			} else {
				if(thisPerson->x == thisPerson->oldx && thisPerson->y == thisPerson->oldy && myAnim->numFrames == 1)
    924a:	|  |  |  \--|----> movea.l 24(sp),a0
    924e:	|  |  |     |      move.l (a0),d0
    9250:	|  |  |     |      movea.l 24(sp),a0
    9254:	|  |  |     |      move.l 8(a0),d1
    9258:	|  |  |     |      move.l d1,-(sp)
    925a:	|  |  |     |      move.l d0,-(sp)
    925c:	|  |  |     |      jsr 15d8a <__eqsf2>
    9262:	|  |  |     |      addq.l #8,sp
    9264:	|  |  |     |      tst.l d0
    9266:	|  |  |     |  /-- bne.s 92aa <drawPeople+0x272>
    9268:	|  |  |     |  |   movea.l 24(sp),a0
    926c:	|  |  |     |  |   move.l 4(a0),d0
    9270:	|  |  |     |  |   movea.l 24(sp),a0
    9274:	|  |  |     |  |   move.l 12(a0),d1
    9278:	|  |  |     |  |   move.l d1,-(sp)
    927a:	|  |  |     |  |   move.l d0,-(sp)
    927c:	|  |  |     |  |   jsr 15d8a <__eqsf2>
    9282:	|  |  |     |  |   addq.l #8,sp
    9284:	|  |  |     |  |   tst.l d0
    9286:	|  |  |     |  +-- bne.s 92aa <drawPeople+0x272>
    9288:	|  |  |     |  |   movea.l 20(sp),a0
    928c:	|  |  |     |  |   move.l 8(a0),d0
    9290:	|  |  |     |  |   moveq #1,d1
    9292:	|  |  |     |  |   cmp.l d0,d1
    9294:	|  |  |     |  +-- bne.s 92aa <drawPeople+0x272>
				{
					thisPerson->samePosCount++;
    9296:	|  |  |     |  |   movea.l 24(sp),a0
    929a:	|  |  |     |  |   move.l 16(a0),d0
    929e:	|  |  |     |  |   addq.l #1,d0
    92a0:	|  |  |     |  |   movea.l 24(sp),a0
    92a4:	|  |  |     |  |   move.l d0,16(a0)
    92a8:	|  |  |     +--|-- bra.s 92b2 <drawPeople+0x27a>
				} else
				{
					thisPerson->samePosCount = 0;
    92aa:	|  |  |     |  \-> movea.l 24(sp),a0
    92ae:	|  |  |     |      clr.l 16(a0)
				}
			}

			thisPerson->oldx = thisPerson->x;
    92b2:	|  |  |     \----> movea.l 24(sp),a0
    92b6:	|  |  |            move.l (a0),d0
    92b8:	|  |  |            movea.l 24(sp),a0
    92bc:	|  |  |            move.l d0,8(a0)
			thisPerson->oldy = thisPerson->y;
    92c0:	|  |  |            movea.l 24(sp),a0
    92c4:	|  |  |            move.l 4(a0),d0
    92c8:	|  |  |            movea.l 24(sp),a0
    92cc:	|  |  |            move.l d0,12(a0)
			int fNumSign = myAnim -> frames[thisPerson -> frameNum].frameNum;
    92d0:	|  |  |            movea.l 20(sp),a0
    92d4:	|  |  |            movea.l 4(a0),a1
    92d8:	|  |  |            movea.l 24(sp),a0
    92dc:	|  |  |            move.l 84(a0),d0
    92e0:	|  |  |            move.l d0,d1
    92e2:	|  |  |            move.l d1,d0
    92e4:	|  |  |            add.l d0,d0
    92e6:	|  |  |            add.l d1,d0
    92e8:	|  |  |            add.l d0,d0
    92ea:	|  |  |            add.l d0,d0
    92ec:	|  |  |            lea (0,a1,d0.l),a0
    92f0:	|  |  |            move.l (a0),8(sp)
			int m = fNumSign < 0;
    92f4:	|  |  |            move.l 8(sp),d0
    92f8:	|  |  |            add.l d0,d0
    92fa:	|  |  |            subx.l d0,d0
    92fc:	|  |  |            neg.l d0
    92fe:	|  |  |            move.b d0,d0
    9300:	|  |  |            move.b d0,d0
    9302:	|  |  |            andi.l #255,d0
    9308:	|  |  |            move.l d0,16(sp)
			int fNum = TF_abs(fNumSign);
    930c:	|  |  |            move.l 8(sp),-(sp)
    9310:	|  |  |            jsr 820c <TF_abs>
    9316:	|  |  |            addq.l #4,sp
    9318:	|  |  |            move.l d0,12(sp)
			if (fNum >= myAnim -> theSprites -> bank.total) {
    931c:	|  |  |            movea.l 20(sp),a0
    9320:	|  |  |            movea.l (a0),a0
    9322:	|  |  |            move.l 8(a0),d0
    9326:	|  |  |            cmp.l 12(sp),d0
    932a:	|  |  |        /-- bgt.s 933a <drawPeople+0x302>
				fNum = 0;
    932c:	|  |  |        |   clr.l 12(sp)
				m = 2 - m;
    9330:	|  |  |        |   moveq #2,d0
    9332:	|  |  |        |   sub.l 16(sp),d0
    9336:	|  |  |        |   move.l d0,16(sp)
			}
			if (m != 2) {
    933a:	|  |  |        \-> moveq #2,d1
    933c:	|  |  |            cmp.l 16(sp),d1
    9340:	|  |  +----------- beq.s 93bc <drawPeople+0x384>
				BOOL r = FALSE;
    9342:	|  |  |            clr.w 6(sp)

				r = scaleSprite ( &myAnim->theSprites->bank.sprites[fNum], thisPerson, m);
    9346:	|  |  |            move.l 16(sp),d0
    934a:	|  |  |            movea.w d0,a0
    934c:	|  |  |            movea.l 20(sp),a1
    9350:	|  |  |            movea.l (a1),a1
    9352:	|  |  |            movea.l 16(a1),a1
    9356:	|  |  |            move.l 12(sp),d1
    935a:	|  |  |            move.l d1,d0
    935c:	|  |  |            lsl.l #3,d0
    935e:	|  |  |            sub.l d1,d0
    9360:	|  |  |            add.l d0,d0
    9362:	|  |  |            add.l d0,d0
    9364:	|  |  |            add.l a1,d0
    9366:	|  |  |            move.l a0,-(sp)
    9368:	|  |  |            move.l 28(sp),-(sp)
    936c:	|  |  |            move.l d0,-(sp)
    936e:	|  |  |            jsr 7fa2 <scaleSprite>
    9374:	|  |  |            lea 12(sp),sp
    9378:	|  |  |            move.w d0,6(sp)
				if (r) {
    937c:	|  |  +----------- beq.s 93bc <drawPeople+0x384>
					if (thisPerson -> thisType -> screenName[0]) {
    937e:	|  |  |            movea.l 24(sp),a0
    9382:	|  |  |            movea.l 114(a0),a0
    9386:	|  |  |            movea.l (a0),a0
    9388:	|  |  |            move.b (a0),d0
    938a:	|  |  +----------- beq.s 93bc <drawPeople+0x384>
						if (personRegion.thisType != thisPerson -> thisType) lastRegion = NULL;
    938c:	|  |  |            move.l 1b27a <personRegion+0x1c>,d1
    9392:	|  |  |            movea.l 24(sp),a0
    9396:	|  |  |            move.l 114(a0),d0
    939a:	|  |  |            cmp.l d1,d0
    939c:	|  |  |        /-- beq.s 93a4 <drawPeople+0x36c>
    939e:	|  |  |        |   clr.l 1b16a <lastRegion>
						personRegion.thisType = thisPerson -> thisType;
    93a4:	|  |  |        \-> movea.l 24(sp),a0
    93a8:	|  |  |            move.l 114(a0),d0
    93ac:	|  |  |            move.l d0,1b27a <personRegion+0x1c>
						overRegion = & personRegion;
    93b2:	|  |  |            move.l #111198,1b306 <overRegion>
					}
				}
			}
		}
		if (! -- thisPerson -> frameTick) {
    93bc:	|  |  \----------> movea.l 24(sp),a0
    93c0:	|  |               move.l 88(a0),d0
    93c4:	|  |               subq.l #1,d0
    93c6:	|  |               movea.l 24(sp),a0
    93ca:	|  |               move.l d0,88(a0)
    93ce:	|  |               movea.l 24(sp),a0
    93d2:	|  |               move.l 88(a0),d0
    93d6:	|  |        /----- bne.w 95fe <drawPeople+0x5c6>
			thisPerson -> frameNum ++;
    93da:	|  |        |      movea.l 24(sp),a0
    93de:	|  |        |      move.l 84(a0),d0
    93e2:	|  |        |      addq.l #1,d0
    93e4:	|  |        |      movea.l 24(sp),a0
    93e8:	|  |        |      move.l d0,84(a0)
			thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    93ec:	|  |        |      movea.l 24(sp),a0
    93f0:	|  |        |      move.l 84(a0),d0
    93f4:	|  |        |      movea.l 24(sp),a0
    93f8:	|  |        |      movea.l 72(a0),a0
    93fc:	|  |        |      move.l 8(a0),d1
    9400:	|  |        |      move.l d1,-(sp)
    9402:	|  |        |      move.l d0,-(sp)
    9404:	|  |        |      jsr 164d6 <__modsi3>
    940a:	|  |        |      addq.l #8,sp
    940c:	|  |        |      movea.l 24(sp),a0
    9410:	|  |        |      move.l d0,84(a0)
			thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    9414:	|  |        |      movea.l 24(sp),a0
    9418:	|  |        |      movea.l 72(a0),a0
    941c:	|  |        |      movea.l 4(a0),a1
    9420:	|  |        |      movea.l 24(sp),a0
    9424:	|  |        |      move.l 84(a0),d0
    9428:	|  |        |      move.l d0,d1
    942a:	|  |        |      move.l d1,d0
    942c:	|  |        |      add.l d0,d0
    942e:	|  |        |      add.l d1,d0
    9430:	|  |        |      add.l d0,d0
    9432:	|  |        |      add.l d0,d0
    9434:	|  |        |      lea (0,a1,d0.l),a0
    9438:	|  |        |      move.l 4(a0),d0
    943c:	|  |        |      movea.l 24(sp),a0
    9440:	|  |        |      move.l d0,88(a0)
			if (thisPerson -> show && myAnim && myAnim -> frames) {
    9444:	|  |        |      movea.l 24(sp),a0
    9448:	|  |        |      move.w 104(a0),d0
    944c:	|  |        +----- beq.w 95fe <drawPeople+0x5c6>
    9450:	|  |        |      tst.l 20(sp)
    9454:	|  |        +----- beq.w 95fe <drawPeople+0x5c6>
    9458:	|  |        |      movea.l 20(sp),a0
    945c:	|  |        |      move.l 4(a0),d0
    9460:	|  |        +----- beq.w 95fe <drawPeople+0x5c6>
				if (myAnim -> frames[thisPerson -> frameNum].noise > 0) {
    9464:	|  |        |      movea.l 20(sp),a0
    9468:	|  |        |      movea.l 4(a0),a1
    946c:	|  |        |      movea.l 24(sp),a0
    9470:	|  |        |      move.l 84(a0),d0
    9474:	|  |        |      move.l d0,d1
    9476:	|  |        |      move.l d1,d0
    9478:	|  |        |      add.l d0,d0
    947a:	|  |        |      add.l d1,d0
    947c:	|  |        |      add.l d0,d0
    947e:	|  |        |      add.l d0,d0
    9480:	|  |        |      lea (0,a1,d0.l),a0
    9484:	|  |        |      move.l 8(a0),d0
    9488:	|  |        |  /-- ble.w 952a <drawPeople+0x4f2>
					startSound(myAnim -> frames[thisPerson -> frameNum].noise, FALSE);
    948c:	|  |        |  |   movea.l 20(sp),a0
    9490:	|  |        |  |   movea.l 4(a0),a1
    9494:	|  |        |  |   movea.l 24(sp),a0
    9498:	|  |        |  |   move.l 84(a0),d0
    949c:	|  |        |  |   move.l d0,d1
    949e:	|  |        |  |   move.l d1,d0
    94a0:	|  |        |  |   add.l d0,d0
    94a2:	|  |        |  |   add.l d1,d0
    94a4:	|  |        |  |   add.l d0,d0
    94a6:	|  |        |  |   add.l d0,d0
    94a8:	|  |        |  |   lea (0,a1,d0.l),a0
    94ac:	|  |        |  |   move.l 8(a0),d0
    94b0:	|  |        |  |   clr.l -(sp)
    94b2:	|  |        |  |   move.l d0,-(sp)
    94b4:	|  |        |  |   jsr c1c0 <startSound>
    94ba:	|  |        |  |   addq.l #8,sp
					thisPerson -> frameNum ++;
    94bc:	|  |        |  |   movea.l 24(sp),a0
    94c0:	|  |        |  |   move.l 84(a0),d0
    94c4:	|  |        |  |   addq.l #1,d0
    94c6:	|  |        |  |   movea.l 24(sp),a0
    94ca:	|  |        |  |   move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    94ce:	|  |        |  |   movea.l 24(sp),a0
    94d2:	|  |        |  |   move.l 84(a0),d0
    94d6:	|  |        |  |   movea.l 24(sp),a0
    94da:	|  |        |  |   movea.l 72(a0),a0
    94de:	|  |        |  |   move.l 8(a0),d1
    94e2:	|  |        |  |   move.l d1,-(sp)
    94e4:	|  |        |  |   move.l d0,-(sp)
    94e6:	|  |        |  |   jsr 164d6 <__modsi3>
    94ec:	|  |        |  |   addq.l #8,sp
    94ee:	|  |        |  |   movea.l 24(sp),a0
    94f2:	|  |        |  |   move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    94f6:	|  |        |  |   movea.l 24(sp),a0
    94fa:	|  |        |  |   movea.l 72(a0),a0
    94fe:	|  |        |  |   movea.l 4(a0),a1
    9502:	|  |        |  |   movea.l 24(sp),a0
    9506:	|  |        |  |   move.l 84(a0),d0
    950a:	|  |        |  |   move.l d0,d1
    950c:	|  |        |  |   move.l d1,d0
    950e:	|  |        |  |   add.l d0,d0
    9510:	|  |        |  |   add.l d1,d0
    9512:	|  |        |  |   add.l d0,d0
    9514:	|  |        |  |   add.l d0,d0
    9516:	|  |        |  |   lea (0,a1,d0.l),a0
    951a:	|  |        |  |   move.l 4(a0),d0
    951e:	|  |        |  |   movea.l 24(sp),a0
    9522:	|  |        |  |   move.l d0,88(a0)
    9526:	|  |        +--|-- bra.w 95fe <drawPeople+0x5c6>
				} else if (myAnim -> frames[thisPerson -> frameNum].noise) {
    952a:	|  |        |  \-> movea.l 20(sp),a0
    952e:	|  |        |      movea.l 4(a0),a1
    9532:	|  |        |      movea.l 24(sp),a0
    9536:	|  |        |      move.l 84(a0),d0
    953a:	|  |        |      move.l d0,d1
    953c:	|  |        |      move.l d1,d0
    953e:	|  |        |      add.l d0,d0
    9540:	|  |        |      add.l d1,d0
    9542:	|  |        |      add.l d0,d0
    9544:	|  |        |      add.l d0,d0
    9546:	|  |        |      lea (0,a1,d0.l),a0
    954a:	|  |        |      move.l 8(a0),d0
    954e:	|  |        +----- beq.w 95fe <drawPeople+0x5c6>
					startNewFunctionNum (- myAnim -> frames[thisPerson -> frameNum].noise, 0, NULL, noStack, TRUE);
    9552:	|  |        |      movea.l 1b172 <noStack>,a1
    9558:	|  |        |      movea.l 20(sp),a0
    955c:	|  |        |      move.l 4(a0),d2
    9560:	|  |        |      movea.l 24(sp),a0
    9564:	|  |        |      move.l 84(a0),d0
    9568:	|  |        |      move.l d0,d1
    956a:	|  |        |      move.l d1,d0
    956c:	|  |        |      add.l d0,d0
    956e:	|  |        |      add.l d1,d0
    9570:	|  |        |      add.l d0,d0
    9572:	|  |        |      add.l d0,d0
    9574:	|  |        |      movea.l d2,a0
    9576:	|  |        |      adda.l d0,a0
    9578:	|  |        |      move.l 8(a0),d0
    957c:	|  |        |      neg.l d0
    957e:	|  |        |      pea 1 <_start+0x1>
    9582:	|  |        |      move.l a1,-(sp)
    9584:	|  |        |      clr.l -(sp)
    9586:	|  |        |      clr.l -(sp)
    9588:	|  |        |      move.l d0,-(sp)
    958a:	|  |        |      jsr 59ca <startNewFunctionNum>
    9590:	|  |        |      lea 20(sp),sp
					thisPerson -> frameNum ++;
    9594:	|  |        |      movea.l 24(sp),a0
    9598:	|  |        |      move.l 84(a0),d0
    959c:	|  |        |      addq.l #1,d0
    959e:	|  |        |      movea.l 24(sp),a0
    95a2:	|  |        |      move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    95a6:	|  |        |      movea.l 24(sp),a0
    95aa:	|  |        |      move.l 84(a0),d0
    95ae:	|  |        |      movea.l 24(sp),a0
    95b2:	|  |        |      movea.l 72(a0),a0
    95b6:	|  |        |      move.l 8(a0),d1
    95ba:	|  |        |      move.l d1,-(sp)
    95bc:	|  |        |      move.l d0,-(sp)
    95be:	|  |        |      jsr 164d6 <__modsi3>
    95c4:	|  |        |      addq.l #8,sp
    95c6:	|  |        |      movea.l 24(sp),a0
    95ca:	|  |        |      move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    95ce:	|  |        |      movea.l 24(sp),a0
    95d2:	|  |        |      movea.l 72(a0),a0
    95d6:	|  |        |      movea.l 4(a0),a1
    95da:	|  |        |      movea.l 24(sp),a0
    95de:	|  |        |      move.l 84(a0),d0
    95e2:	|  |        |      move.l d0,d1
    95e4:	|  |        |      move.l d1,d0
    95e6:	|  |        |      add.l d0,d0
    95e8:	|  |        |      add.l d1,d0
    95ea:	|  |        |      add.l d0,d0
    95ec:	|  |        |      add.l d0,d0
    95ee:	|  |        |      lea (0,a1,d0.l),a0
    95f2:	|  |        |      move.l 4(a0),d0
    95f6:	|  |        |      movea.l 24(sp),a0
    95fa:	|  |        |      move.l d0,88(a0)
				}
			}
		}
		thisPerson = thisPerson -> next;
    95fe:	|  |        \----> movea.l 24(sp),a0
    9602:	|  |               move.l 36(a0),24(sp)
	while (thisPerson) {
    9608:	|  \-------------> tst.l 24(sp)
    960c:	\----------------- bne.w 905a <drawPeople+0x22>
	}
}
    9610:	                   nop
    9612:	                   nop
    9614:	                   move.l (sp)+,d2
    9616:	                   lea 24(sp),sp
    961a:	                   rts

0000961c <findPerson>:


struct onScreenPerson * findPerson (int v) {
    961c:	          subq.l #4,sp
	struct onScreenPerson * thisPerson = allPeople;
    961e:	          move.l 1b25a <allPeople>,(sp)
	while (thisPerson) {
    9624:	      /-- bra.s 963c <findPerson+0x20>
		if (v == thisPerson -> thisType -> objectNum) break;
    9626:	/-----|-> movea.l (sp),a0
    9628:	|     |   movea.l 114(a0),a0
    962c:	|     |   move.l 4(a0),d0
    9630:	|     |   cmp.l 8(sp),d0
    9634:	|  /--|-- beq.s 9642 <findPerson+0x26>
		thisPerson = thisPerson -> next;
    9636:	|  |  |   movea.l (sp),a0
    9638:	|  |  |   move.l 36(a0),(sp)
	while (thisPerson) {
    963c:	|  |  \-> tst.l (sp)
    963e:	\--|----- bne.s 9626 <findPerson+0xa>
    9640:	   |  /-- bra.s 9644 <findPerson+0x28>
		if (v == thisPerson -> thisType -> objectNum) break;
    9642:	   \--|-> nop
	}
	return thisPerson;
    9644:	      \-> move.l (sp),d0
}
    9646:	          addq.l #4,sp
    9648:	          rts

0000964a <floatCharacter>:

BOOL floatCharacter (int f, int objNum) {
    964a:	       subq.l #4,sp
	struct onScreenPerson * moveMe = findPerson (objNum);
    964c:	       move.l 12(sp),-(sp)
    9650:	       jsr 961c <findPerson>
    9656:	       addq.l #4,sp
    9658:	       move.l d0,(sp)
	if (! moveMe) return FALSE;
    965a:	   /-- bne.s 9660 <floatCharacter+0x16>
    965c:	   |   clr.w d0
    965e:	/--|-- bra.s 966a <floatCharacter+0x20>
	moveMe -> floaty = f;
    9660:	|  \-> movea.l (sp),a0
    9662:	|      move.l 8(sp),24(a0)
	return TRUE;
    9668:	|      moveq #1,d0
}
    966a:	\----> addq.l #4,sp
    966c:	       rts

0000966e <forceWalkingPerson>:

BOOL forceWalkingPerson (int x, int y, int objNum, struct loadedFunction * func, int di) {
    966e:	          subq.l #4,sp
    if (x == 0 && y == 0) return FALSE;
    9670:	          tst.l 8(sp)
    9674:	      /-- bne.s 9682 <forceWalkingPerson+0x14>
    9676:	      |   tst.l 12(sp)
    967a:	      +-- bne.s 9682 <forceWalkingPerson+0x14>
    967c:	      |   clr.w d0
    967e:	/-----|-- bra.w 9714 <forceWalkingPerson+0xa6>
    struct onScreenPerson * moveMe = findPerson(objNum);
    9682:	|     \-> move.l 16(sp),-(sp)
    9686:	|         jsr 961c <findPerson>
    968c:	|         addq.l #4,sp
    968e:	|         move.l d0,(sp)
    if (!moveMe) return FALSE;
    9690:	|     /-- bne.s 9696 <forceWalkingPerson+0x28>
    9692:	|     |   clr.w d0
    9694:	+-----|-- bra.s 9714 <forceWalkingPerson+0xa6>

    if (moveMe->continueAfterWalking) abortFunction(moveMe->continueAfterWalking);
    9696:	|     \-> movea.l (sp),a0
    9698:	|         move.l 68(a0),d0
    969c:	|     /-- beq.s 96ae <forceWalkingPerson+0x40>
    969e:	|     |   movea.l (sp),a0
    96a0:	|     |   move.l 68(a0),d0
    96a4:	|     |   move.l d0,-(sp)
    96a6:	|     |   jsr 360e <abortFunction>
    96ac:	|     |   addq.l #4,sp
    moveMe->walking = TRUE;
    96ae:	|     \-> movea.l (sp),a0
    96b0:	|         move.w #1,64(a0)
    moveMe->continueAfterWalking = NULL;
    96b6:	|         movea.l (sp),a0
    96b8:	|         clr.l 68(a0)
    moveMe->directionWhenDoneWalking = di;
    96bc:	|         movea.l (sp),a0
    96be:	|         move.l 24(sp),110(a0)

    moveMe->walkToX = x;
    96c4:	|         movea.l (sp),a0
    96c6:	|         move.l 8(sp),40(a0)
    moveMe->walkToY = y;
    96cc:	|         movea.l (sp),a0
    96ce:	|         move.l 12(sp),44(a0)

    // Let's pretend the start and end points are both in the same
    // polygon (which one isn't important)
    moveMe->inPoly = 0;
    96d4:	|         movea.l (sp),a0
    96d6:	|         clr.l 56(a0)
    moveMe->walkToPoly = 0;
    96da:	|         movea.l (sp),a0
    96dc:	|         clr.l 60(a0)

    doBorderStuff(moveMe);
    96e0:	|         move.l (sp),-(sp)
    96e2:	|         jsr 897e <doBorderStuff>
    96e8:	|         addq.l #4,sp
    if (walkMe(moveMe, TRUE) || moveMe->spinning) {
    96ea:	|         pea 1 <_start+0x1>
    96ee:	|         move.l 4(sp),-(sp)
    96f2:	|         jsr aede <walkMe>
    96f8:	|         addq.l #8,sp
    96fa:	|         tst.w d0
    96fc:	|     /-- bne.s 9706 <forceWalkingPerson+0x98>
    96fe:	|     |   movea.l (sp),a0
    9700:	|     |   move.w 66(a0),d0
    9704:	|  /--|-- beq.s 9712 <forceWalkingPerson+0xa4>
        moveMe->continueAfterWalking = func;
    9706:	|  |  \-> movea.l (sp),a0
    9708:	|  |      move.l 20(sp),68(a0)
        return TRUE;
    970e:	|  |      moveq #1,d0
    9710:	+--|----- bra.s 9714 <forceWalkingPerson+0xa6>
    } else {
        return FALSE;
    9712:	|  \----> clr.w d0
    }
}
    9714:	\-------> addq.l #4,sp
    9716:	          rts

00009718 <handleClosestPoint>:

BOOL handleClosestPoint (int * setX, int * setY, int * setPoly) {
    9718:	                lea -56(sp),sp
    971c:	                move.l d2,-(sp)
	int gotX = 320, gotY = 200, gotPoly = -1, i, j, xTest1, yTest1,
    971e:	                move.l #320,56(sp)
    9726:	                move.l #200,52(sp)
    972e:	                moveq #-1,d0
    9730:	                move.l d0,48(sp)
		xTest2, yTest2, closestX, closestY, oldJ, currentDistance = 0xFFFFF,
    9734:	                move.l #1048575,32(sp)
		thisDistance;

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
    973c:	                clr.l 44(sp)
    9740:	   /----------- bra.w 9918 <handleClosestPoint+0x200>
		oldJ = currentFloor -> polygon[i].numVertices - 1;
    9744:	/--|----------> movea.l 1b30e <currentFloor>,a0
    974a:	|  |            move.l 12(a0),d1
    974e:	|  |            move.l 44(sp),d0
    9752:	|  |            lsl.l #3,d0
    9754:	|  |            movea.l d1,a0
    9756:	|  |            adda.l d0,a0
    9758:	|  |            move.l (a0),d0
    975a:	|  |            move.l d0,d1
    975c:	|  |            subq.l #1,d1
    975e:	|  |            move.l d1,36(sp)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
    9762:	|  |            clr.l 40(sp)
    9766:	|  |     /----- bra.w 98f6 <handleClosestPoint+0x1de>
			xTest1 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[j]].x;
    976a:	|  |  /--|----> movea.l 1b30e <currentFloor>,a0
    9770:	|  |  |  |      move.l 4(a0),d1
    9774:	|  |  |  |      movea.l 1b30e <currentFloor>,a0
    977a:	|  |  |  |      movea.l 12(a0),a0
    977e:	|  |  |  |      move.l 44(sp),d0
    9782:	|  |  |  |      lsl.l #3,d0
    9784:	|  |  |  |      adda.l d0,a0
    9786:	|  |  |  |      movea.l 4(a0),a0
    978a:	|  |  |  |      move.l 40(sp),d0
    978e:	|  |  |  |      add.l d0,d0
    9790:	|  |  |  |      add.l d0,d0
    9792:	|  |  |  |      adda.l d0,a0
    9794:	|  |  |  |      move.l (a0),d0
    9796:	|  |  |  |      lsl.l #3,d0
    9798:	|  |  |  |      movea.l d1,a0
    979a:	|  |  |  |      adda.l d0,a0
    979c:	|  |  |  |      move.l (a0),28(sp)
			yTest1 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[j]].y;
    97a0:	|  |  |  |      movea.l 1b30e <currentFloor>,a0
    97a6:	|  |  |  |      move.l 4(a0),d1
    97aa:	|  |  |  |      movea.l 1b30e <currentFloor>,a0
    97b0:	|  |  |  |      movea.l 12(a0),a0
    97b4:	|  |  |  |      move.l 44(sp),d0
    97b8:	|  |  |  |      lsl.l #3,d0
    97ba:	|  |  |  |      adda.l d0,a0
    97bc:	|  |  |  |      movea.l 4(a0),a0
    97c0:	|  |  |  |      move.l 40(sp),d0
    97c4:	|  |  |  |      add.l d0,d0
    97c6:	|  |  |  |      add.l d0,d0
    97c8:	|  |  |  |      adda.l d0,a0
    97ca:	|  |  |  |      move.l (a0),d0
    97cc:	|  |  |  |      lsl.l #3,d0
    97ce:	|  |  |  |      movea.l d1,a0
    97d0:	|  |  |  |      adda.l d0,a0
    97d2:	|  |  |  |      move.l 4(a0),24(sp)
			xTest2 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[oldJ]].x;
    97d8:	|  |  |  |      movea.l 1b30e <currentFloor>,a0
    97de:	|  |  |  |      move.l 4(a0),d1
    97e2:	|  |  |  |      movea.l 1b30e <currentFloor>,a0
    97e8:	|  |  |  |      movea.l 12(a0),a0
    97ec:	|  |  |  |      move.l 44(sp),d0
    97f0:	|  |  |  |      lsl.l #3,d0
    97f2:	|  |  |  |      adda.l d0,a0
    97f4:	|  |  |  |      movea.l 4(a0),a0
    97f8:	|  |  |  |      move.l 36(sp),d0
    97fc:	|  |  |  |      add.l d0,d0
    97fe:	|  |  |  |      add.l d0,d0
    9800:	|  |  |  |      adda.l d0,a0
    9802:	|  |  |  |      move.l (a0),d0
    9804:	|  |  |  |      lsl.l #3,d0
    9806:	|  |  |  |      movea.l d1,a0
    9808:	|  |  |  |      adda.l d0,a0
    980a:	|  |  |  |      move.l (a0),20(sp)
			yTest2 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[oldJ]].y;
    980e:	|  |  |  |      movea.l 1b30e <currentFloor>,a0
    9814:	|  |  |  |      move.l 4(a0),d1
    9818:	|  |  |  |      movea.l 1b30e <currentFloor>,a0
    981e:	|  |  |  |      movea.l 12(a0),a0
    9822:	|  |  |  |      move.l 44(sp),d0
    9826:	|  |  |  |      lsl.l #3,d0
    9828:	|  |  |  |      adda.l d0,a0
    982a:	|  |  |  |      movea.l 4(a0),a0
    982e:	|  |  |  |      move.l 36(sp),d0
    9832:	|  |  |  |      add.l d0,d0
    9834:	|  |  |  |      add.l d0,d0
    9836:	|  |  |  |      adda.l d0,a0
    9838:	|  |  |  |      move.l (a0),d0
    983a:	|  |  |  |      lsl.l #3,d0
    983c:	|  |  |  |      movea.l d1,a0
    983e:	|  |  |  |      adda.l d0,a0
    9840:	|  |  |  |      move.l 4(a0),16(sp)
			closestPointOnLine (&closestX, &closestY, xTest1, yTest1, xTest2, yTest2, *setX, *setY);
    9846:	|  |  |  |      movea.l 68(sp),a0
    984a:	|  |  |  |      move.l (a0),d1
    984c:	|  |  |  |      movea.l 64(sp),a0
    9850:	|  |  |  |      move.l (a0),d0
    9852:	|  |  |  |      move.l d1,-(sp)
    9854:	|  |  |  |      move.l d0,-(sp)
    9856:	|  |  |  |      move.l 24(sp),-(sp)
    985a:	|  |  |  |      move.l 32(sp),-(sp)
    985e:	|  |  |  |      move.l 40(sp),-(sp)
    9862:	|  |  |  |      move.l 48(sp),-(sp)
    9866:	|  |  |  |      lea 28(sp),a0
    986a:	|  |  |  |      move.l a0,-(sp)
    986c:	|  |  |  |      lea 36(sp),a0
    9870:	|  |  |  |      move.l a0,-(sp)
    9872:	|  |  |  |      jsr 14a50 <closestPointOnLine>
    9878:	|  |  |  |      lea 32(sp),sp

			xTest1 = *setX - closestX;
    987c:	|  |  |  |      movea.l 64(sp),a0
    9880:	|  |  |  |      move.l (a0),d0
    9882:	|  |  |  |      move.l 8(sp),d1
    9886:	|  |  |  |      move.l d0,d2
    9888:	|  |  |  |      sub.l d1,d2
    988a:	|  |  |  |      move.l d2,28(sp)
			yTest1 = *setY - closestY;
    988e:	|  |  |  |      movea.l 68(sp),a0
    9892:	|  |  |  |      move.l (a0),d0
    9894:	|  |  |  |      move.l 4(sp),d1
    9898:	|  |  |  |      move.l d0,d2
    989a:	|  |  |  |      sub.l d1,d2
    989c:	|  |  |  |      move.l d2,24(sp)
			thisDistance = xTest1 * xTest1 + yTest1 * yTest1;
    98a0:	|  |  |  |      move.l 28(sp),-(sp)
    98a4:	|  |  |  |      move.l 32(sp),-(sp)
    98a8:	|  |  |  |      jsr 1642a <__mulsi3>
    98ae:	|  |  |  |      addq.l #8,sp
    98b0:	|  |  |  |      move.l d0,d2
    98b2:	|  |  |  |      move.l 24(sp),-(sp)
    98b6:	|  |  |  |      move.l 28(sp),-(sp)
    98ba:	|  |  |  |      jsr 1642a <__mulsi3>
    98c0:	|  |  |  |      addq.l #8,sp
    98c2:	|  |  |  |      move.l d2,d1
    98c4:	|  |  |  |      add.l d0,d1
    98c6:	|  |  |  |      move.l d1,12(sp)


			if (thisDistance < currentDistance) {
    98ca:	|  |  |  |      move.l 12(sp),d2
    98ce:	|  |  |  |      cmp.l 32(sp),d2
    98d2:	|  |  |  |  /-- bge.s 98ec <handleClosestPoint+0x1d4>

				currentDistance = thisDistance;
    98d4:	|  |  |  |  |   move.l 12(sp),32(sp)
				gotX = closestX;
    98da:	|  |  |  |  |   move.l 8(sp),56(sp)
				gotY = closestY;
    98e0:	|  |  |  |  |   move.l 4(sp),52(sp)
				gotPoly = i;
    98e6:	|  |  |  |  |   move.l 44(sp),48(sp)
			}
			oldJ = j;
    98ec:	|  |  |  |  \-> move.l 40(sp),36(sp)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
    98f2:	|  |  |  |      addq.l #1,40(sp)
    98f6:	|  |  |  \----> movea.l 1b30e <currentFloor>,a0
    98fc:	|  |  |         move.l 12(a0),d1
    9900:	|  |  |         move.l 44(sp),d0
    9904:	|  |  |         lsl.l #3,d0
    9906:	|  |  |         movea.l d1,a0
    9908:	|  |  |         adda.l d0,a0
    990a:	|  |  |         move.l (a0),d0
    990c:	|  |  |         cmp.l 40(sp),d0
    9910:	|  |  \-------- bgt.w 976a <handleClosestPoint+0x52>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
    9914:	|  |            addq.l #1,44(sp)
    9918:	|  \----------> movea.l 1b30e <currentFloor>,a0
    991e:	|               move.l 8(a0),d0
    9922:	|               cmp.l 44(sp),d0
    9926:	\-------------- bgt.w 9744 <handleClosestPoint+0x2c>
		}
	}

	if (gotPoly == -1) return FALSE;
    992a:	                moveq #-1,d0
    992c:	                cmp.l 48(sp),d0
    9930:	            /-- bne.s 9936 <handleClosestPoint+0x21e>
    9932:	            |   clr.w d0
    9934:	         /--|-- bra.s 9950 <handleClosestPoint+0x238>
	*setX = gotX;
    9936:	         |  \-> movea.l 64(sp),a0
    993a:	         |      move.l 56(sp),(a0)
	*setY = gotY;
    993e:	         |      movea.l 68(sp),a0
    9942:	         |      move.l 52(sp),(a0)
	*setPoly = gotPoly;
    9946:	         |      movea.l 72(sp),a0
    994a:	         |      move.l 48(sp),(a0)

	return TRUE;
    994e:	         |      moveq #1,d0
}
    9950:	         \----> move.l (sp)+,d2
    9952:	                lea 56(sp),sp
    9956:	                rts

00009958 <initPeople>:


BOOL initPeople () {
	personRegion.sX = 0;
    9958:	clr.l 1b26e <personRegion+0x10>
	personRegion.sY = 0;
    995e:	clr.l 1b272 <personRegion+0x14>
	personRegion.di = -1;
    9964:	moveq #-1,d0
    9966:	move.l d0,1b276 <personRegion+0x18>
	allScreenRegions = NULL;
    996c:	clr.l 1b302 <allScreenRegions>

	return TRUE;
    9972:	moveq #1,d0
}
    9974:	rts

00009976 <jumpPerson>:

void jumpPerson (int x, int y, int objNum) {
    9976:	          subq.l #4,sp
    9978:	          move.l d2,-(sp)
    if (x == 0 && y == 0) return;
    997a:	          tst.l 12(sp)
    997e:	      /-- bne.s 9986 <jumpPerson+0x10>
    9980:	      |   tst.l 16(sp)
    9984:	/-----|-- beq.s 99fa <jumpPerson+0x84>
    struct onScreenPerson * moveMe = findPerson(objNum);
    9986:	|     \-> move.l 20(sp),-(sp)
    998a:	|         jsr 961c <findPerson>
    9990:	|         addq.l #4,sp
    9992:	|         move.l d0,4(sp)
    if (!moveMe) return;
    9996:	|  /----- beq.s 99fe <jumpPerson+0x88>
    if (moveMe->continueAfterWalking) abortFunction(moveMe->continueAfterWalking);
    9998:	|  |      movea.l 4(sp),a0
    999c:	|  |      move.l 68(a0),d0
    99a0:	|  |  /-- beq.s 99b4 <jumpPerson+0x3e>
    99a2:	|  |  |   movea.l 4(sp),a0
    99a6:	|  |  |   move.l 68(a0),d0
    99aa:	|  |  |   move.l d0,-(sp)
    99ac:	|  |  |   jsr 360e <abortFunction>
    99b2:	|  |  |   addq.l #4,sp
    moveMe->continueAfterWalking = NULL;
    99b4:	|  |  \-> movea.l 4(sp),a0
    99b8:	|  |      clr.l 68(a0)
    moveMe->walking = FALSE;
    99bc:	|  |      movea.l 4(sp),a0
    99c0:	|  |      clr.w 64(a0)
    moveMe->spinning = FALSE;
    99c4:	|  |      movea.l 4(sp),a0
    99c8:	|  |      clr.w 66(a0)
    moveAndScale(moveMe, x, y);
    99cc:	|  |      move.l 16(sp),-(sp)
    99d0:	|  |      jsr 15ea8 <__floatsisf>
    99d6:	|  |      addq.l #4,sp
    99d8:	|  |      move.l d0,d2
    99da:	|  |      move.l 12(sp),-(sp)
    99de:	|  |      jsr 15ea8 <__floatsisf>
    99e4:	|  |      addq.l #4,sp
    99e6:	|  |      move.l d2,-(sp)
    99e8:	|  |      move.l d0,-(sp)
    99ea:	|  |      move.l 12(sp),-(sp)
    99ee:	|  |      jsr 9d64 <moveAndScale>
    99f4:	|  |      lea 12(sp),sp
    99f8:	|  |  /-- bra.s 9a00 <jumpPerson+0x8a>
    if (x == 0 && y == 0) return;
    99fa:	\--|--|-> nop
    99fc:	   |  +-- bra.s 9a00 <jumpPerson+0x8a>
    if (!moveMe) return;
    99fe:	   \--|-> nop
}
    9a00:	      \-> move.l (sp)+,d2
    9a02:	          addq.l #4,sp
    9a04:	          rts

00009a06 <killAllPeople>:


void killAllPeople () {
    9a06:	          subq.l #8,sp
    9a08:	          move.l a6,-(sp)
	struct onScreenPerson * killPeople;
	while (allPeople) {
    9a0a:	   /----- bra.s 9a76 <killAllPeople+0x70>
		if (allPeople -> continueAfterWalking) abortFunction (allPeople -> continueAfterWalking);
    9a0c:	/--|----> movea.l 1b25a <allPeople>,a0
    9a12:	|  |      move.l 68(a0),d0
    9a16:	|  |  /-- beq.s 9a2c <killAllPeople+0x26>
    9a18:	|  |  |   movea.l 1b25a <allPeople>,a0
    9a1e:	|  |  |   move.l 68(a0),d0
    9a22:	|  |  |   move.l d0,-(sp)
    9a24:	|  |  |   jsr 360e <abortFunction>
    9a2a:	|  |  |   addq.l #4,sp
		allPeople -> continueAfterWalking = NULL;
    9a2c:	|  |  \-> movea.l 1b25a <allPeople>,a0
    9a32:	|  |      clr.l 68(a0)
		killPeople = allPeople;
    9a36:	|  |      move.l 1b25a <allPeople>,8(sp)
		allPeople = allPeople -> next;
    9a3e:	|  |      movea.l 1b25a <allPeople>,a0
    9a44:	|  |      move.l 36(a0),d0
    9a48:	|  |      move.l d0,1b25a <allPeople>
		removeObjectType (killPeople -> thisType);
    9a4e:	|  |      movea.l 8(sp),a0
    9a52:	|  |      move.l 114(a0),d0
    9a56:	|  |      move.l d0,-(sp)
    9a58:	|  |      jsr c89e <removeObjectType>
    9a5e:	|  |      addq.l #4,sp
		FreeVec(killPeople);
    9a60:	|  |      move.l 8(sp),4(sp)
    9a66:	|  |      move.l 1b1a2 <SysBase>,d0
    9a6c:	|  |      movea.l d0,a6
    9a6e:	|  |      movea.l 4(sp),a1
    9a72:	|  |      jsr -690(a6)
	while (allPeople) {
    9a76:	|  \----> move.l 1b25a <allPeople>,d0
    9a7c:	\-------- bne.s 9a0c <killAllPeople+0x6>
	}
}
    9a7e:	          nop
    9a80:	          nop
    9a82:	          movea.l (sp)+,a6
    9a84:	          addq.l #8,sp
    9a86:	          rts

00009a88 <killMostPeople>:

void killMostPeople() {
    9a88:	          lea -12(sp),sp
    9a8c:	          move.l a6,-(sp)
    struct onScreenPerson *killPeople;
    struct onScreenPerson **lookyHere = &allPeople;
    9a8e:	          move.l #111194,12(sp)

    while (*lookyHere) {
    9a96:	   /----- bra.w 9b1c <killMostPeople+0x94>
        if ((*lookyHere)->extra & EXTRA_NOREMOVE) {
    9a9a:	/--|----> movea.l 12(sp),a0
    9a9e:	|  |      movea.l (a0),a0
    9aa0:	|  |      move.l 118(a0),d0
    9aa4:	|  |      moveq #32,d1
    9aa6:	|  |      and.l d1,d0
    9aa8:	|  |  /-- beq.s 9aba <killMostPeople+0x32>
            lookyHere = &(*lookyHere)->next;
    9aaa:	|  |  |   movea.l 12(sp),a0
    9aae:	|  |  |   move.l (a0),d0
    9ab0:	|  |  |   moveq #36,d1
    9ab2:	|  |  |   add.l d0,d1
    9ab4:	|  |  |   move.l d1,12(sp)
    9ab8:	|  +--|-- bra.s 9b1c <killMostPeople+0x94>
        } else {
            killPeople = (*lookyHere);
    9aba:	|  |  \-> movea.l 12(sp),a0
    9abe:	|  |      move.l (a0),8(sp)

            // Change last pointer to NEXT in the list instead
            (*lookyHere) = killPeople->next;
    9ac2:	|  |      movea.l 8(sp),a0
    9ac6:	|  |      move.l 36(a0),d0
    9aca:	|  |      movea.l 12(sp),a0
    9ace:	|  |      move.l d0,(a0)

            // Gone from the list... now free some memory
            if (killPeople->continueAfterWalking) abortFunction(killPeople->continueAfterWalking);
    9ad0:	|  |      movea.l 8(sp),a0
    9ad4:	|  |      move.l 68(a0),d0
    9ad8:	|  |  /-- beq.s 9aec <killMostPeople+0x64>
    9ada:	|  |  |   movea.l 8(sp),a0
    9ade:	|  |  |   move.l 68(a0),d0
    9ae2:	|  |  |   move.l d0,-(sp)
    9ae4:	|  |  |   jsr 360e <abortFunction>
    9aea:	|  |  |   addq.l #4,sp
            killPeople->continueAfterWalking = NULL;
    9aec:	|  |  \-> movea.l 8(sp),a0
    9af0:	|  |      clr.l 68(a0)
            removeObjectType(killPeople->thisType);
    9af4:	|  |      movea.l 8(sp),a0
    9af8:	|  |      move.l 114(a0),d0
    9afc:	|  |      move.l d0,-(sp)
    9afe:	|  |      jsr c89e <removeObjectType>
    9b04:	|  |      addq.l #4,sp
            FreeVec(killPeople);
    9b06:	|  |      move.l 8(sp),4(sp)
    9b0c:	|  |      move.l 1b1a2 <SysBase>,d0
    9b12:	|  |      movea.l d0,a6
    9b14:	|  |      movea.l 4(sp),a1
    9b18:	|  |      jsr -690(a6)
    while (*lookyHere) {
    9b1c:	|  \----> movea.l 12(sp),a0
    9b20:	|         move.l (a0),d0
    9b22:	\-------- bne.w 9a9a <killMostPeople+0x12>
        }
    }
}
    9b26:	          nop
    9b28:	          nop
    9b2a:	          movea.l (sp)+,a6
    9b2c:	          lea 12(sp),sp
    9b30:	          rts

00009b32 <makeSilent>:
//	db ("End of loadPeople");
	return TRUE;
}

void makeSilent (struct onScreenPerson me) {
	setFrames (&me, ANI_STAND);
    9b32:	clr.l -(sp)
    9b34:	move.l sp,d0
    9b36:	addq.l #8,d0
    9b38:	move.l d0,-(sp)
    9b3a:	jsr 7026 <setFrames>
    9b40:	addq.l #8,sp
}
    9b42:	nop
    9b44:	rts

00009b46 <makeWalkingPerson>:

BOOL makeWalkingPerson (int x, int y, int objNum, struct loadedFunction * func, int di) {
    9b46:	          lea -12(sp),sp
    9b4a:	          move.l d2,-(sp)
	if (x == 0 && y == 0) return FALSE;
    9b4c:	          tst.l 20(sp)
    9b50:	      /-- bne.s 9b5e <makeWalkingPerson+0x18>
    9b52:	      |   tst.l 24(sp)
    9b56:	      +-- bne.s 9b5e <makeWalkingPerson+0x18>
    9b58:	      |   clr.w d0
    9b5a:	/-----|-- bra.w 9cf6 <makeWalkingPerson+0x1b0>
	if (currentFloor -> numPolygons == 0) return FALSE;
    9b5e:	|     \-> movea.l 1b30e <currentFloor>,a0
    9b64:	|         move.l 8(a0),d0
    9b68:	|     /-- bne.s 9b70 <makeWalkingPerson+0x2a>
    9b6a:	|     |   clr.w d0
    9b6c:	+-----|-- bra.w 9cf6 <makeWalkingPerson+0x1b0>
	struct onScreenPerson * moveMe = findPerson (objNum);
    9b70:	|     \-> move.l 28(sp),-(sp)
    9b74:	|         jsr 961c <findPerson>
    9b7a:	|         addq.l #4,sp
    9b7c:	|         move.l d0,12(sp)
	if (! moveMe) return FALSE;
    9b80:	|     /-- bne.s 9b88 <makeWalkingPerson+0x42>
    9b82:	|     |   clr.w d0
    9b84:	+-----|-- bra.w 9cf6 <makeWalkingPerson+0x1b0>

	if (moveMe -> continueAfterWalking) abortFunction (moveMe -> continueAfterWalking);
    9b88:	|     \-> movea.l 12(sp),a0
    9b8c:	|         move.l 68(a0),d0
    9b90:	|     /-- beq.s 9ba4 <makeWalkingPerson+0x5e>
    9b92:	|     |   movea.l 12(sp),a0
    9b96:	|     |   move.l 68(a0),d0
    9b9a:	|     |   move.l d0,-(sp)
    9b9c:	|     |   jsr 360e <abortFunction>
    9ba2:	|     |   addq.l #4,sp
	moveMe -> continueAfterWalking = NULL;
    9ba4:	|     \-> movea.l 12(sp),a0
    9ba8:	|         clr.l 68(a0)
	moveMe -> walking = TRUE;
    9bac:	|         movea.l 12(sp),a0
    9bb0:	|         move.w #1,64(a0)
	moveMe -> directionWhenDoneWalking = di;
    9bb6:	|         movea.l 12(sp),a0
    9bba:	|         move.l 36(sp),110(a0)

	moveMe -> walkToX = x;
    9bc0:	|         movea.l 12(sp),a0
    9bc4:	|         move.l 20(sp),40(a0)
	moveMe -> walkToY = y;
    9bca:	|         movea.l 12(sp),a0
    9bce:	|         move.l 24(sp),44(a0)
	moveMe -> walkToPoly = inFloor (x, y);
    9bd4:	|         move.l 24(sp),-(sp)
    9bd8:	|         move.l 24(sp),-(sp)
    9bdc:	|         jsr 14f52 <inFloor>
    9be2:	|         addq.l #8,sp
    9be4:	|         movea.l 12(sp),a0
    9be8:	|         move.l d0,60(a0)
	if (moveMe -> walkToPoly == -1) {
    9bec:	|         movea.l 12(sp),a0
    9bf0:	|         move.l 60(a0),d0
    9bf4:	|         moveq #-1,d1
    9bf6:	|         cmp.l d0,d1
    9bf8:	|     /-- bne.s 9c28 <makeWalkingPerson+0xe2>
		if (! handleClosestPoint (&moveMe -> walkToX, &moveMe -> walkToY, &moveMe -> walkToPoly)) return FALSE;
    9bfa:	|     |   movea.w #60,a0
    9bfe:	|     |   adda.l 12(sp),a0
    9c02:	|     |   moveq #44,d1
    9c04:	|     |   add.l 12(sp),d1
    9c08:	|     |   moveq #40,d0
    9c0a:	|     |   add.l 12(sp),d0
    9c0e:	|     |   move.l a0,-(sp)
    9c10:	|     |   move.l d1,-(sp)
    9c12:	|     |   move.l d0,-(sp)
    9c14:	|     |   jsr 9718 <handleClosestPoint>
    9c1a:	|     |   lea 12(sp),sp
    9c1e:	|     |   tst.w d0
    9c20:	|     +-- bne.s 9c28 <makeWalkingPerson+0xe2>
    9c22:	|     |   clr.w d0
    9c24:	+-----|-- bra.w 9cf6 <makeWalkingPerson+0x1b0>
	}

	moveMe -> inPoly = inFloor (moveMe -> x, moveMe -> y);
    9c28:	|     \-> movea.l 12(sp),a0
    9c2c:	|         move.l 4(a0),d0
    9c30:	|         move.l d0,-(sp)
    9c32:	|         jsr 15e40 <__fixsfsi>
    9c38:	|         addq.l #4,sp
    9c3a:	|         move.l d0,d2
    9c3c:	|         movea.l 12(sp),a0
    9c40:	|         move.l (a0),d0
    9c42:	|         move.l d0,-(sp)
    9c44:	|         jsr 15e40 <__fixsfsi>
    9c4a:	|         addq.l #4,sp
    9c4c:	|         move.l d2,-(sp)
    9c4e:	|         move.l d0,-(sp)
    9c50:	|         jsr 14f52 <inFloor>
    9c56:	|         addq.l #8,sp
    9c58:	|         movea.l 12(sp),a0
    9c5c:	|         move.l d0,56(a0)
	if (moveMe -> inPoly == -1) {
    9c60:	|         movea.l 12(sp),a0
    9c64:	|         move.l 56(a0),d0
    9c68:	|         moveq #-1,d1
    9c6a:	|         cmp.l d0,d1
    9c6c:	|     /-- bne.s 9cbe <makeWalkingPerson+0x178>
		int xxx = moveMe -> x, yyy = moveMe -> y;
    9c6e:	|     |   movea.l 12(sp),a0
    9c72:	|     |   move.l (a0),d0
    9c74:	|     |   move.l d0,-(sp)
    9c76:	|     |   jsr 15e40 <__fixsfsi>
    9c7c:	|     |   addq.l #4,sp
    9c7e:	|     |   move.l d0,8(sp)
    9c82:	|     |   movea.l 12(sp),a0
    9c86:	|     |   move.l 4(a0),d0
    9c8a:	|     |   move.l d0,-(sp)
    9c8c:	|     |   jsr 15e40 <__fixsfsi>
    9c92:	|     |   addq.l #4,sp
    9c94:	|     |   move.l d0,4(sp)
		if (! handleClosestPoint (&xxx, &yyy, &moveMe -> inPoly)) return FALSE;
    9c98:	|     |   moveq #56,d0
    9c9a:	|     |   add.l 12(sp),d0
    9c9e:	|     |   move.l d0,-(sp)
    9ca0:	|     |   lea 8(sp),a0
    9ca4:	|     |   move.l a0,-(sp)
    9ca6:	|     |   moveq #16,d0
    9ca8:	|     |   add.l sp,d0
    9caa:	|     |   move.l d0,-(sp)
    9cac:	|     |   jsr 9718 <handleClosestPoint>
    9cb2:	|     |   lea 12(sp),sp
    9cb6:	|     |   tst.w d0
    9cb8:	|     +-- bne.s 9cbe <makeWalkingPerson+0x178>
    9cba:	|     |   clr.w d0
    9cbc:	+-----|-- bra.s 9cf6 <makeWalkingPerson+0x1b0>
	}

	doBorderStuff (moveMe);
    9cbe:	|     \-> move.l 12(sp),-(sp)
    9cc2:	|         jsr 897e <doBorderStuff>
    9cc8:	|         addq.l #4,sp
	if (walkMe (moveMe, FALSE) || moveMe -> spinning) {
    9cca:	|         clr.l -(sp)
    9ccc:	|         move.l 16(sp),-(sp)
    9cd0:	|         jsr aede <walkMe>
    9cd6:	|         addq.l #8,sp
    9cd8:	|         tst.w d0
    9cda:	|     /-- bne.s 9ce6 <makeWalkingPerson+0x1a0>
    9cdc:	|     |   movea.l 12(sp),a0
    9ce0:	|     |   move.w 66(a0),d0
    9ce4:	|  /--|-- beq.s 9cf4 <makeWalkingPerson+0x1ae>
		moveMe -> continueAfterWalking = func;
    9ce6:	|  |  \-> movea.l 12(sp),a0
    9cea:	|  |      move.l 32(sp),68(a0)
		return TRUE;
    9cf0:	|  |      moveq #1,d0
    9cf2:	+--|----- bra.s 9cf6 <makeWalkingPerson+0x1b0>
	} else {
		return FALSE;
    9cf4:	|  \----> clr.w d0
	}
}
    9cf6:	\-------> move.l (sp)+,d2
    9cf8:	          lea 12(sp),sp
    9cfc:	          rts

00009cfe <makeNullAnim>:


struct personaAnimation * makeNullAnim () {
    9cfe:	       lea -16(sp),sp
    9d02:	       move.l a6,-(sp)

	struct personaAnimation * newAnim	= AllocVec(sizeof(struct personaAnimation),MEMF_ANY);
    9d04:	       moveq #12,d0
    9d06:	       move.l d0,16(sp)
    9d0a:	       clr.l 12(sp)
    9d0e:	       move.l 1b1a2 <SysBase>,d0
    9d14:	       movea.l d0,a6
    9d16:	       move.l 16(sp),d0
    9d1a:	       move.l 12(sp),d1
    9d1e:	       jsr -684(a6)
    9d22:	       move.l d0,8(sp)
    9d26:	       move.l 8(sp),d0
    9d2a:	       move.l d0,4(sp)
    if(newAnim == 0) {
    9d2e:	   /-- bne.s 9d42 <makeNullAnim+0x44>
     	KPrintF("makeNullAnim: Can't reserve Memory\n");
    9d30:	   |   pea 179cf <PutChar+0x148f>
    9d36:	   |   jsr 15bf0 <KPrintF>
    9d3c:	   |   addq.l #4,sp
        return NULL;    
    9d3e:	   |   moveq #0,d0
    9d40:	/--|-- bra.s 9d5c <makeNullAnim+0x5e>
    }  

	newAnim -> theSprites		= NULL;
    9d42:	|  \-> movea.l 4(sp),a0
    9d46:	|      clr.l (a0)
	newAnim -> numFrames		= 0;
    9d48:	|      movea.l 4(sp),a0
    9d4c:	|      clr.l 8(a0)
	newAnim -> frames			= NULL;
    9d50:	|      movea.l 4(sp),a0
    9d54:	|      clr.l 4(a0)
	return newAnim;
    9d58:	|      move.l 4(sp),d0
}
    9d5c:	\----> movea.l (sp)+,a6
    9d5e:	       lea 16(sp),sp
    9d62:	       rts

00009d64 <moveAndScale>:

void moveAndScale (struct onScreenPerson *me, FLOAT x, FLOAT y) {
    9d64:	    move.l d2,-(sp)
	me->x = x;
    9d66:	    movea.l 8(sp),a0
    9d6a:	    move.l 12(sp),(a0)
	me->y = y;
    9d6e:	    movea.l 8(sp),a0
    9d72:	    move.l 16(sp),4(a0)
	me->oldx = 0;
    9d78:	    movea.l 8(sp),a0
    9d7c:	    clr.l 8(a0)
	me->oldy = 0;
    9d80:	    movea.l 8(sp),a0
    9d84:	    clr.l 12(a0)
	if (! (me->extra & EXTRA_NOSCALE) && scaleDivide) me->scale = (me->y - scaleHorizon) / scaleDivide;
    9d88:	    movea.l 8(sp),a0
    9d8c:	    move.l 118(a0),d0
    9d90:	    moveq #2,d1
    9d92:	    and.l d1,d0
    9d94:	/-- bne.s 9dec <moveAndScale+0x88>
    9d96:	|   move.w 1ab38 <scaleDivide>,d0
    9d9c:	+-- beq.s 9dec <moveAndScale+0x88>
    9d9e:	|   movea.l 8(sp),a0
    9da2:	|   move.l 4(a0),d2
    9da6:	|   move.w 1ab36 <scaleHorizon>,d0
    9dac:	|   movea.w d0,a0
    9dae:	|   move.l a0,-(sp)
    9db0:	|   jsr 15ea8 <__floatsisf>
    9db6:	|   addq.l #4,sp
    9db8:	|   move.l d0,-(sp)
    9dba:	|   move.l d2,-(sp)
    9dbc:	|   jsr 1619c <__subsf3>
    9dc2:	|   addq.l #8,sp
    9dc4:	|   move.l d0,d2
    9dc6:	|   move.w 1ab38 <scaleDivide>,d0
    9dcc:	|   movea.w d0,a0
    9dce:	|   move.l a0,-(sp)
    9dd0:	|   jsr 15ea8 <__floatsisf>
    9dd6:	|   addq.l #4,sp
    9dd8:	|   move.l d0,-(sp)
    9dda:	|   move.l d2,-(sp)
    9ddc:	|   jsr 15d54 <__divsf3>
    9de2:	|   addq.l #8,sp
    9de4:	|   movea.l 8(sp),a0
    9de8:	|   move.l d0,32(a0)
}
    9dec:	\-> nop
    9dee:	    move.l (sp)+,d2
    9df0:	    rts

00009df2 <removeOneCharacter>:

void removeOneCharacter (int i) {
    9df2:	          lea -16(sp),sp
    9df6:	          move.l a6,-(sp)
    struct onScreenPerson * p = findPerson(i);	
    9df8:	          move.l 24(sp),-(sp)
    9dfc:	          jsr 961c <findPerson>
    9e02:	          addq.l #4,sp
    9e04:	          move.l d0,8(sp)

    if (p) {
    9e08:	/-------- beq.w 9ee8 <removeOneCharacter+0xf6>
		/*if( p->myAnim->numFrames == 0) {
			CstRestoreScreen(p->x, p->y, &p->myAnim->theSprites->bank.sprites[0].width, &p->myAnim->theSprites->bank.sprites[0].height );
		} ToDo: Remove this*/


        if (overRegion == &personRegion && overRegion->thisType == p->thisType) {
    9e0c:	|         move.l 1b306 <overRegion>,d0
    9e12:	|         cmpi.l #111198,d0
    9e18:	|     /-- bne.s 9e36 <removeOneCharacter+0x44>
    9e1a:	|     |   movea.l 1b306 <overRegion>,a0
    9e20:	|     |   move.l 28(a0),d1
    9e24:	|     |   movea.l 8(sp),a0
    9e28:	|     |   move.l 114(a0),d0
    9e2c:	|     |   cmp.l d1,d0
    9e2e:	|     +-- bne.s 9e36 <removeOneCharacter+0x44>
            overRegion = NULL;
    9e30:	|     |   clr.l 1b306 <overRegion>
        }

        if (p->continueAfterWalking) abortFunction(p->continueAfterWalking);
    9e36:	|     \-> movea.l 8(sp),a0
    9e3a:	|         move.l 68(a0),d0
    9e3e:	|     /-- beq.s 9e52 <removeOneCharacter+0x60>
    9e40:	|     |   movea.l 8(sp),a0
    9e44:	|     |   move.l 68(a0),d0
    9e48:	|     |   move.l d0,-(sp)
    9e4a:	|     |   jsr 360e <abortFunction>
    9e50:	|     |   addq.l #4,sp
        p->continueAfterWalking = NULL;
    9e52:	|     \-> movea.l 8(sp),a0
    9e56:	|         clr.l 68(a0)
        struct onScreenPerson ** killPeople;

		for(int i=0; i<3;i++)
    9e5a:	|         clr.l 12(sp)
    9e5e:	|     /-- bra.s 9e86 <removeOneCharacter+0x94>
		{
			deleteAnim( p->myPersona->animation[i]);
    9e60:	|  /--|-> movea.l 8(sp),a0
    9e64:	|  |  |   movea.l 80(a0),a0
    9e68:	|  |  |   move.l (a0),d1
    9e6a:	|  |  |   move.l 12(sp),d0
    9e6e:	|  |  |   add.l d0,d0
    9e70:	|  |  |   add.l d0,d0
    9e72:	|  |  |   movea.l d1,a0
    9e74:	|  |  |   adda.l d0,a0
    9e76:	|  |  |   move.l (a0),d0
    9e78:	|  |  |   move.l d0,-(sp)
    9e7a:	|  |  |   jsr 88fa <deleteAnim>
    9e80:	|  |  |   addq.l #4,sp
		for(int i=0; i<3;i++)
    9e82:	|  |  |   addq.l #1,12(sp)
    9e86:	|  |  \-> moveq #2,d0
    9e88:	|  |      cmp.l 12(sp),d0
    9e8c:	|  \----- bge.s 9e60 <removeOneCharacter+0x6e>
		}

        for (killPeople = &allPeople;
    9e8e:	|         move.l #111194,16(sp)
    9e96:	|     /-- bra.s 9ea6 <removeOneCharacter+0xb4>
            *killPeople != p;
            killPeople = &((*killPeople)->next)) {;}
    9e98:	|  /--|-> movea.l 16(sp),a0
    9e9c:	|  |  |   move.l (a0),d0
    9e9e:	|  |  |   moveq #36,d1
    9ea0:	|  |  |   add.l d0,d1
    9ea2:	|  |  |   move.l d1,16(sp)
            *killPeople != p;
    9ea6:	|  |  \-> movea.l 16(sp),a0
    9eaa:	|  |      move.l (a0),d0
    9eac:	|  |      cmp.l 8(sp),d0
    9eb0:	|  \----- bne.s 9e98 <removeOneCharacter+0xa6>

        *killPeople = p->next;
    9eb2:	|         movea.l 8(sp),a0
    9eb6:	|         move.l 36(a0),d0
    9eba:	|         movea.l 16(sp),a0
    9ebe:	|         move.l d0,(a0)
        removeObjectType(p->thisType);
    9ec0:	|         movea.l 8(sp),a0
    9ec4:	|         move.l 114(a0),d0
    9ec8:	|         move.l d0,-(sp)
    9eca:	|         jsr c89e <removeObjectType>
    9ed0:	|         addq.l #4,sp
        FreeVec(p);
    9ed2:	|         move.l 8(sp),4(sp)
    9ed8:	|         move.l 1b1a2 <SysBase>,d0
    9ede:	|         movea.l d0,a6
    9ee0:	|         movea.l 4(sp),a1
    9ee4:	|         jsr -690(a6)
    }
}
    9ee8:	\-------> nop
    9eea:	          movea.l (sp)+,a6
    9eec:	          lea 16(sp),sp
    9ef0:	          rts

00009ef2 <rethinkAngle>:

void rethinkAngle (struct onScreenPerson * thisPerson) {
    9ef2:	       subq.l #8,sp
    9ef4:	       move.l d2,-(sp)
	int d = thisPerson -> myPersona -> numDirections;
    9ef6:	       movea.l 16(sp),a0
    9efa:	       movea.l 80(a0),a0
    9efe:	       move.l 4(a0),4(sp)
	int direc = thisPerson -> angle + (180 / d) + 180 + thisPerson -> angleOffset;
    9f04:	       movea.l 16(sp),a0
    9f08:	       move.l 92(a0),d2
    9f0c:	       move.l 4(sp),-(sp)
    9f10:	       pea b4 <_start+0xb4>
    9f14:	       jsr 164a8 <__divsi3>
    9f1a:	       addq.l #8,sp
    9f1c:	       add.l d2,d0
    9f1e:	       move.l d0,d1
    9f20:	       addi.l #180,d1
    9f26:	       movea.l 16(sp),a0
    9f2a:	       move.l 100(a0),d0
    9f2e:	       move.l d1,d2
    9f30:	       add.l d0,d2
    9f32:	       move.l d2,8(sp)
	while (direc >= 360) direc -= 360;
    9f36:	   /-- bra.s 9f40 <rethinkAngle+0x4e>
    9f38:	/--|-> addi.l #-360,8(sp)
    9f40:	|  \-> cmpi.l #359,8(sp)
    9f48:	\----- bgt.s 9f38 <rethinkAngle+0x46>
	thisPerson -> direction = (direc * d) / 360;
    9f4a:	       move.l 4(sp),-(sp)
    9f4e:	       move.l 12(sp),-(sp)
    9f52:	       jsr 1642a <__mulsi3>
    9f58:	       addq.l #8,sp
    9f5a:	       pea 168 <decodeFilename+0x50>
    9f5e:	       move.l d0,-(sp)
    9f60:	       jsr 164a8 <__divsi3>
    9f66:	       addq.l #8,sp
    9f68:	       movea.l 16(sp),a0
    9f6c:	       move.l d0,106(a0)
}
    9f70:	       nop
    9f72:	       move.l (sp)+,d2
    9f74:	       addq.l #8,sp
    9f76:	       rts

00009f78 <saveAnim>:


BOOL saveAnim (struct personaAnimation * p, BPTR fp) {
    9f78:	          subq.l #4,sp
	put2bytes (p -> numFrames, fp);
    9f7a:	          movea.l 8(sp),a0
    9f7e:	          move.l 8(a0),d0
    9f82:	          move.l 12(sp),-(sp)
    9f86:	          move.l d0,-(sp)
    9f88:	          jsr 8d0 <put2bytes>
    9f8e:	          addq.l #8,sp
	if (p -> numFrames) {
    9f90:	          movea.l 8(sp),a0
    9f94:	          move.l 8(a0),d0
    9f98:	/-------- beq.w a03c <saveAnim+0xc4>
		put4bytes (p -> theSprites -> ID, fp);
    9f9c:	|         movea.l 8(sp),a0
    9fa0:	|         movea.l (a0),a0
    9fa2:	|         move.l (a0),d0
    9fa4:	|         move.l 12(sp),-(sp)
    9fa8:	|         move.l d0,-(sp)
    9faa:	|         jsr 958 <put4bytes>
    9fb0:	|         addq.l #8,sp

		for (int a = 0; a < p -> numFrames; a ++) {
    9fb2:	|         clr.l (sp)
    9fb4:	|     /-- bra.s a02e <saveAnim+0xb6>
			put4bytes (p -> frames[a].frameNum, fp);
    9fb6:	|  /--|-> movea.l 8(sp),a0
    9fba:	|  |  |   movea.l 4(a0),a0
    9fbe:	|  |  |   move.l (sp),d1
    9fc0:	|  |  |   move.l d1,d0
    9fc2:	|  |  |   add.l d0,d0
    9fc4:	|  |  |   add.l d1,d0
    9fc6:	|  |  |   add.l d0,d0
    9fc8:	|  |  |   add.l d0,d0
    9fca:	|  |  |   adda.l d0,a0
    9fcc:	|  |  |   move.l (a0),d0
    9fce:	|  |  |   move.l 12(sp),-(sp)
    9fd2:	|  |  |   move.l d0,-(sp)
    9fd4:	|  |  |   jsr 958 <put4bytes>
    9fda:	|  |  |   addq.l #8,sp
			put4bytes (p -> frames[a].howMany, fp);
    9fdc:	|  |  |   movea.l 8(sp),a0
    9fe0:	|  |  |   movea.l 4(a0),a0
    9fe4:	|  |  |   move.l (sp),d1
    9fe6:	|  |  |   move.l d1,d0
    9fe8:	|  |  |   add.l d0,d0
    9fea:	|  |  |   add.l d1,d0
    9fec:	|  |  |   add.l d0,d0
    9fee:	|  |  |   add.l d0,d0
    9ff0:	|  |  |   adda.l d0,a0
    9ff2:	|  |  |   move.l 4(a0),d0
    9ff6:	|  |  |   move.l 12(sp),-(sp)
    9ffa:	|  |  |   move.l d0,-(sp)
    9ffc:	|  |  |   jsr 958 <put4bytes>
    a002:	|  |  |   addq.l #8,sp
			put4bytes (p -> frames[a].noise, fp);
    a004:	|  |  |   movea.l 8(sp),a0
    a008:	|  |  |   movea.l 4(a0),a0
    a00c:	|  |  |   move.l (sp),d1
    a00e:	|  |  |   move.l d1,d0
    a010:	|  |  |   add.l d0,d0
    a012:	|  |  |   add.l d1,d0
    a014:	|  |  |   add.l d0,d0
    a016:	|  |  |   add.l d0,d0
    a018:	|  |  |   adda.l d0,a0
    a01a:	|  |  |   move.l 8(a0),d0
    a01e:	|  |  |   move.l 12(sp),-(sp)
    a022:	|  |  |   move.l d0,-(sp)
    a024:	|  |  |   jsr 958 <put4bytes>
    a02a:	|  |  |   addq.l #8,sp
		for (int a = 0; a < p -> numFrames; a ++) {
    a02c:	|  |  |   addq.l #1,(sp)
    a02e:	|  |  \-> movea.l 8(sp),a0
    a032:	|  |      move.l 8(a0),d0
    a036:	|  |      cmp.l (sp),d0
    a038:	|  \----- bgt.w 9fb6 <saveAnim+0x3e>
		}
	}
	return TRUE;
    a03c:	\-------> moveq #1,d0
}
    a03e:	          addq.l #4,sp
    a040:	          rts

0000a042 <saveCostume>:

BOOL saveCostume (struct persona * cossy, BPTR fp) {
    a042:	             subq.l #4,sp
	int a;
	put2bytes (cossy -> numDirections, fp);
    a044:	             movea.l 8(sp),a0
    a048:	             move.l 4(a0),d0
    a04c:	             move.l 12(sp),-(sp)
    a050:	             move.l d0,-(sp)
    a052:	             jsr 8d0 <put2bytes>
    a058:	             addq.l #8,sp
	for (a = 0; a < cossy -> numDirections * 3; a ++) {
    a05a:	             clr.l (sp)
    a05c:	   /-------- bra.s a088 <saveCostume+0x46>
		if (! saveAnim (cossy -> animation[a], fp)) return FALSE;
    a05e:	/--|-------> movea.l 8(sp),a0
    a062:	|  |         move.l (a0),d1
    a064:	|  |         move.l (sp),d0
    a066:	|  |         add.l d0,d0
    a068:	|  |         add.l d0,d0
    a06a:	|  |         movea.l d1,a0
    a06c:	|  |         adda.l d0,a0
    a06e:	|  |         move.l (a0),d0
    a070:	|  |         move.l 12(sp),-(sp)
    a074:	|  |         move.l d0,-(sp)
    a076:	|  |         jsr 9f78 <saveAnim>
    a07c:	|  |         addq.l #8,sp
    a07e:	|  |         tst.w d0
    a080:	|  |     /-- bne.s a086 <saveCostume+0x44>
    a082:	|  |     |   clr.w d0
    a084:	|  |  /--|-- bra.s a09c <saveCostume+0x5a>
	for (a = 0; a < cossy -> numDirections * 3; a ++) {
    a086:	|  |  |  \-> addq.l #1,(sp)
    a088:	|  \--|----> movea.l 8(sp),a0
    a08c:	|     |      move.l 4(a0),d1
    a090:	|     |      move.l d1,d0
    a092:	|     |      add.l d0,d0
    a094:	|     |      add.l d1,d0
    a096:	|     |      cmp.l (sp),d0
    a098:	\-----|----- bgt.s a05e <saveCostume+0x1c>
	}

	return TRUE;
    a09a:	      |      moveq #1,d0
}
    a09c:	      \----> addq.l #4,sp
    a09e:	             rts

0000a0a0 <savePeople>:

BOOL savePeople (BPTR fp) {
    a0a0:	             lea -144(sp),sp
    a0a4:	             move.l a6,-(sp)
    a0a6:	             move.l d2,-(sp)
	struct onScreenPerson * me = allPeople;
    a0a8:	             move.l 1b25a <allPeople>,148(sp)
	int countPeople = 0, a;
    a0b0:	             clr.l 144(sp)

	putSigned (scaleHorizon, fp);
    a0b4:	             move.w 1ab36 <scaleHorizon>,d0
    a0ba:	             movea.w d0,a0
    a0bc:	             move.l 156(sp),-(sp)
    a0c0:	             move.l a0,-(sp)
    a0c2:	             jsr a9c <putSigned>
    a0c8:	             addq.l #8,sp
	putSigned (scaleDivide, fp);
    a0ca:	             move.w 1ab38 <scaleDivide>,d0
    a0d0:	             movea.w d0,a0
    a0d2:	             move.l 156(sp),-(sp)
    a0d6:	             move.l a0,-(sp)
    a0d8:	             jsr a9c <putSigned>
    a0de:	             addq.l #8,sp

	while (me) {
    a0e0:	         /-- bra.s a0f0 <savePeople+0x50>
		countPeople ++;
    a0e2:	      /--|-> addq.l #1,144(sp)
		me = me -> next;
    a0e6:	      |  |   movea.l 148(sp),a0
    a0ea:	      |  |   move.l 36(a0),148(sp)
	while (me) {
    a0f0:	      |  \-> tst.l 148(sp)
    a0f4:	      \----- bne.s a0e2 <savePeople+0x42>
	}

	put2bytes (countPeople, fp);
    a0f6:	             move.l 156(sp),-(sp)
    a0fa:	             move.l 148(sp),-(sp)
    a0fe:	             jsr 8d0 <put2bytes>
    a104:	             addq.l #8,sp

	me = allPeople;
    a106:	             move.l 1b25a <allPeople>,148(sp)
	for (a = 0; a < countPeople; a ++) {
    a10e:	             clr.l 140(sp)
    a112:	   /-------- bra.w a56a <savePeople+0x4ca>

		putFloat (me -> x, fp);
    a116:	/--|-------> movea.l 148(sp),a0
    a11a:	|  |         move.l (a0),d0
    a11c:	|  |         move.l 156(sp),-(sp)
    a120:	|  |         move.l d0,-(sp)
    a122:	|  |         jsr a46 <putFloat>
    a128:	|  |         addq.l #8,sp
		putFloat (me -> y, fp);
    a12a:	|  |         movea.l 148(sp),a0
    a12e:	|  |         move.l 4(a0),d0
    a132:	|  |         move.l 156(sp),-(sp)
    a136:	|  |         move.l d0,-(sp)
    a138:	|  |         jsr a46 <putFloat>
    a13e:	|  |         addq.l #8,sp

		saveCostume (me -> myPersona, fp);
    a140:	|  |         movea.l 148(sp),a0
    a144:	|  |         move.l 80(a0),d0
    a148:	|  |         move.l 156(sp),-(sp)
    a14c:	|  |         move.l d0,-(sp)
    a14e:	|  |         jsr a042 <saveCostume>
    a154:	|  |         addq.l #8,sp
		saveAnim (me -> myAnim, fp);
    a156:	|  |         movea.l 148(sp),a0
    a15a:	|  |         move.l 72(a0),d0
    a15e:	|  |         move.l 156(sp),-(sp)
    a162:	|  |         move.l d0,-(sp)
    a164:	|  |         jsr 9f78 <saveAnim>
    a16a:	|  |         addq.l #8,sp
		FPutC( fp, me -> myAnim == me -> lastUsedAnim);
    a16c:	|  |         move.l 156(sp),136(sp)
    a172:	|  |         movea.l 148(sp),a0
    a176:	|  |         move.l 72(a0),d1
    a17a:	|  |         movea.l 148(sp),a0
    a17e:	|  |         move.l 76(a0),d0
    a182:	|  |         cmp.l d1,d0
    a184:	|  |         seq d0
    a186:	|  |         neg.b d0
    a188:	|  |         move.b d0,d0
    a18a:	|  |         andi.l #255,d0
    a190:	|  |         move.l d0,132(sp)
    a194:	|  |         move.l 1b1aa <DOSBase>,d0
    a19a:	|  |         movea.l d0,a6
    a19c:	|  |         move.l 136(sp),d1
    a1a0:	|  |         move.l 132(sp),d2
    a1a4:	|  |         jsr -312(a6)
    a1a8:	|  |         move.l d0,128(sp)

		putFloat (me -> scale, fp);
    a1ac:	|  |         movea.l 148(sp),a0
    a1b0:	|  |         move.l 32(a0),d0
    a1b4:	|  |         move.l 156(sp),-(sp)
    a1b8:	|  |         move.l d0,-(sp)
    a1ba:	|  |         jsr a46 <putFloat>
    a1c0:	|  |         addq.l #8,sp

		put2bytes (me -> extra, fp);
    a1c2:	|  |         movea.l 148(sp),a0
    a1c6:	|  |         move.l 118(a0),d0
    a1ca:	|  |         move.l 156(sp),-(sp)
    a1ce:	|  |         move.l d0,-(sp)
    a1d0:	|  |         jsr 8d0 <put2bytes>
    a1d6:	|  |         addq.l #8,sp
		put2bytes (me -> height, fp);
    a1d8:	|  |         movea.l 148(sp),a0
    a1dc:	|  |         move.l 20(a0),d0
    a1e0:	|  |         move.l 156(sp),-(sp)
    a1e4:	|  |         move.l d0,-(sp)
    a1e6:	|  |         jsr 8d0 <put2bytes>
    a1ec:	|  |         addq.l #8,sp
		put2bytes (me -> walkToX, fp);
    a1ee:	|  |         movea.l 148(sp),a0
    a1f2:	|  |         move.l 40(a0),d0
    a1f6:	|  |         move.l 156(sp),-(sp)
    a1fa:	|  |         move.l d0,-(sp)
    a1fc:	|  |         jsr 8d0 <put2bytes>
    a202:	|  |         addq.l #8,sp
		put2bytes (me -> walkToY, fp);
    a204:	|  |         movea.l 148(sp),a0
    a208:	|  |         move.l 44(a0),d0
    a20c:	|  |         move.l 156(sp),-(sp)
    a210:	|  |         move.l d0,-(sp)
    a212:	|  |         jsr 8d0 <put2bytes>
    a218:	|  |         addq.l #8,sp
		put2bytes (me -> thisStepX, fp);
    a21a:	|  |         movea.l 148(sp),a0
    a21e:	|  |         move.l 48(a0),d0
    a222:	|  |         move.l 156(sp),-(sp)
    a226:	|  |         move.l d0,-(sp)
    a228:	|  |         jsr 8d0 <put2bytes>
    a22e:	|  |         addq.l #8,sp
		put2bytes (me -> thisStepY, fp);
    a230:	|  |         movea.l 148(sp),a0
    a234:	|  |         move.l 52(a0),d0
    a238:	|  |         move.l 156(sp),-(sp)
    a23c:	|  |         move.l d0,-(sp)
    a23e:	|  |         jsr 8d0 <put2bytes>
    a244:	|  |         addq.l #8,sp
		put2bytes (me -> frameNum, fp);
    a246:	|  |         movea.l 148(sp),a0
    a24a:	|  |         move.l 84(a0),d0
    a24e:	|  |         move.l 156(sp),-(sp)
    a252:	|  |         move.l d0,-(sp)
    a254:	|  |         jsr 8d0 <put2bytes>
    a25a:	|  |         addq.l #8,sp
		put2bytes (me -> frameTick, fp);
    a25c:	|  |         movea.l 148(sp),a0
    a260:	|  |         move.l 88(a0),d0
    a264:	|  |         move.l 156(sp),-(sp)
    a268:	|  |         move.l d0,-(sp)
    a26a:	|  |         jsr 8d0 <put2bytes>
    a270:	|  |         addq.l #8,sp
		put2bytes (me -> walkSpeed, fp);
    a272:	|  |         movea.l 148(sp),a0
    a276:	|  |         move.l 28(a0),d0
    a27a:	|  |         move.l 156(sp),-(sp)
    a27e:	|  |         move.l d0,-(sp)
    a280:	|  |         jsr 8d0 <put2bytes>
    a286:	|  |         addq.l #8,sp
		put2bytes (me -> spinSpeed, fp);
    a288:	|  |         movea.l 148(sp),a0
    a28c:	|  |         move.l 122(a0),d0
    a290:	|  |         move.l 156(sp),-(sp)
    a294:	|  |         move.l d0,-(sp)
    a296:	|  |         jsr 8d0 <put2bytes>
    a29c:	|  |         addq.l #8,sp
		putSigned (me -> floaty, fp);
    a29e:	|  |         movea.l 148(sp),a0
    a2a2:	|  |         move.l 24(a0),d0
    a2a6:	|  |         move.l d0,d0
    a2a8:	|  |         movea.w d0,a0
    a2aa:	|  |         move.l 156(sp),-(sp)
    a2ae:	|  |         move.l a0,-(sp)
    a2b0:	|  |         jsr a9c <putSigned>
    a2b6:	|  |         addq.l #8,sp
		FPutC (fp, me -> show);
    a2b8:	|  |         move.l 156(sp),124(sp)
    a2be:	|  |         movea.l 148(sp),a0
    a2c2:	|  |         move.w 104(a0),d0
    a2c6:	|  |         movea.w d0,a0
    a2c8:	|  |         move.l a0,120(sp)
    a2cc:	|  |         move.l 1b1aa <DOSBase>,d0
    a2d2:	|  |         movea.l d0,a6
    a2d4:	|  |         move.l 124(sp),d1
    a2d8:	|  |         move.l 120(sp),d2
    a2dc:	|  |         jsr -312(a6)
    a2e0:	|  |         move.l d0,116(sp)
		FPutC (fp, me -> walking);
    a2e4:	|  |         move.l 156(sp),112(sp)
    a2ea:	|  |         movea.l 148(sp),a0
    a2ee:	|  |         move.w 64(a0),d0
    a2f2:	|  |         movea.w d0,a0
    a2f4:	|  |         move.l a0,108(sp)
    a2f8:	|  |         move.l 1b1aa <DOSBase>,d0
    a2fe:	|  |         movea.l d0,a6
    a300:	|  |         move.l 112(sp),d1
    a304:	|  |         move.l 108(sp),d2
    a308:	|  |         jsr -312(a6)
    a30c:	|  |         move.l d0,104(sp)
		FPutC (fp, me -> spinning);
    a310:	|  |         move.l 156(sp),100(sp)
    a316:	|  |         movea.l 148(sp),a0
    a31a:	|  |         move.w 66(a0),d0
    a31e:	|  |         movea.w d0,a0
    a320:	|  |         move.l a0,96(sp)
    a324:	|  |         move.l 1b1aa <DOSBase>,d0
    a32a:	|  |         movea.l d0,a6
    a32c:	|  |         move.l 100(sp),d1
    a330:	|  |         move.l 96(sp),d2
    a334:	|  |         jsr -312(a6)
    a338:	|  |         move.l d0,92(sp)
		if (me -> continueAfterWalking) {
    a33c:	|  |         movea.l 148(sp),a0
    a340:	|  |         move.l 68(a0),d0
    a344:	|  |  /----- beq.s a382 <savePeople+0x2e2>
			FPutC (fp, 1);
    a346:	|  |  |      move.l 156(sp),76(sp)
    a34c:	|  |  |      moveq #1,d0
    a34e:	|  |  |      move.l d0,72(sp)
    a352:	|  |  |      move.l 1b1aa <DOSBase>,d0
    a358:	|  |  |      movea.l d0,a6
    a35a:	|  |  |      move.l 76(sp),d1
    a35e:	|  |  |      move.l 72(sp),d2
    a362:	|  |  |      jsr -312(a6)
    a366:	|  |  |      move.l d0,68(sp)
			saveFunction (me -> continueAfterWalking, fp);
    a36a:	|  |  |      movea.l 148(sp),a0
    a36e:	|  |  |      move.l 68(a0),d0
    a372:	|  |  |      move.l 156(sp),-(sp)
    a376:	|  |  |      move.l d0,-(sp)
    a378:	|  |  |      jsr b518 <saveFunction>
    a37e:	|  |  |      addq.l #8,sp
    a380:	|  |  |  /-- bra.s a3a6 <savePeople+0x306>
		} else {
			FPutC (fp, 1);
    a382:	|  |  \--|-> move.l 156(sp),88(sp)
    a388:	|  |     |   moveq #1,d0
    a38a:	|  |     |   move.l d0,84(sp)
    a38e:	|  |     |   move.l 1b1aa <DOSBase>,d0
    a394:	|  |     |   movea.l d0,a6
    a396:	|  |     |   move.l 88(sp),d1
    a39a:	|  |     |   move.l 84(sp),d2
    a39e:	|  |     |   jsr -312(a6)
    a3a2:	|  |     |   move.l d0,80(sp)
		}
		put2bytes (me -> direction, fp);
    a3a6:	|  |     \-> movea.l 148(sp),a0
    a3aa:	|  |         move.l 106(a0),d0
    a3ae:	|  |         move.l 156(sp),-(sp)
    a3b2:	|  |         move.l d0,-(sp)
    a3b4:	|  |         jsr 8d0 <put2bytes>
    a3ba:	|  |         addq.l #8,sp
		put2bytes (me -> angle, fp);
    a3bc:	|  |         movea.l 148(sp),a0
    a3c0:	|  |         move.l 92(a0),d0
    a3c4:	|  |         move.l 156(sp),-(sp)
    a3c8:	|  |         move.l d0,-(sp)
    a3ca:	|  |         jsr 8d0 <put2bytes>
    a3d0:	|  |         addq.l #8,sp
		put2bytes (me -> angleOffset, fp);
    a3d2:	|  |         movea.l 148(sp),a0
    a3d6:	|  |         move.l 100(a0),d0
    a3da:	|  |         move.l 156(sp),-(sp)
    a3de:	|  |         move.l d0,-(sp)
    a3e0:	|  |         jsr 8d0 <put2bytes>
    a3e6:	|  |         addq.l #8,sp
		put2bytes (me -> wantAngle, fp);
    a3e8:	|  |         movea.l 148(sp),a0
    a3ec:	|  |         move.l 96(a0),d0
    a3f0:	|  |         move.l 156(sp),-(sp)
    a3f4:	|  |         move.l d0,-(sp)
    a3f6:	|  |         jsr 8d0 <put2bytes>
    a3fc:	|  |         addq.l #8,sp
		putSigned (me -> directionWhenDoneWalking, fp);
    a3fe:	|  |         movea.l 148(sp),a0
    a402:	|  |         move.l 110(a0),d0
    a406:	|  |         move.l d0,d0
    a408:	|  |         movea.w d0,a0
    a40a:	|  |         move.l 156(sp),-(sp)
    a40e:	|  |         move.l a0,-(sp)
    a410:	|  |         jsr a9c <putSigned>
    a416:	|  |         addq.l #8,sp
		putSigned (me -> inPoly, fp);
    a418:	|  |         movea.l 148(sp),a0
    a41c:	|  |         move.l 56(a0),d0
    a420:	|  |         move.l d0,d0
    a422:	|  |         movea.w d0,a0
    a424:	|  |         move.l 156(sp),-(sp)
    a428:	|  |         move.l a0,-(sp)
    a42a:	|  |         jsr a9c <putSigned>
    a430:	|  |         addq.l #8,sp
		putSigned (me -> walkToPoly, fp);
    a432:	|  |         movea.l 148(sp),a0
    a436:	|  |         move.l 60(a0),d0
    a43a:	|  |         move.l d0,d0
    a43c:	|  |         movea.w d0,a0
    a43e:	|  |         move.l 156(sp),-(sp)
    a442:	|  |         move.l a0,-(sp)
    a444:	|  |         jsr a9c <putSigned>
    a44a:	|  |         addq.l #8,sp

		FPutC (fp, me -> r);
    a44c:	|  |         move.l 156(sp),64(sp)
    a452:	|  |         movea.l 148(sp),a0
    a456:	|  |         move.b 126(a0),d0
    a45a:	|  |         move.b d0,d0
    a45c:	|  |         andi.l #255,d0
    a462:	|  |         move.l d0,60(sp)
    a466:	|  |         move.l 1b1aa <DOSBase>,d0
    a46c:	|  |         movea.l d0,a6
    a46e:	|  |         move.l 64(sp),d1
    a472:	|  |         move.l 60(sp),d2
    a476:	|  |         jsr -312(a6)
    a47a:	|  |         move.l d0,56(sp)
		FPutC (fp, me -> g);
    a47e:	|  |         move.l 156(sp),52(sp)
    a484:	|  |         movea.l 148(sp),a0
    a488:	|  |         move.b 127(a0),d0
    a48c:	|  |         move.b d0,d0
    a48e:	|  |         andi.l #255,d0
    a494:	|  |         move.l d0,48(sp)
    a498:	|  |         move.l 1b1aa <DOSBase>,d0
    a49e:	|  |         movea.l d0,a6
    a4a0:	|  |         move.l 52(sp),d1
    a4a4:	|  |         move.l 48(sp),d2
    a4a8:	|  |         jsr -312(a6)
    a4ac:	|  |         move.l d0,44(sp)
		FPutC (fp, me -> b);
    a4b0:	|  |         move.l 156(sp),40(sp)
    a4b6:	|  |         movea.l 148(sp),a0
    a4ba:	|  |         move.b 128(a0),d0
    a4be:	|  |         move.b d0,d0
    a4c0:	|  |         andi.l #255,d0
    a4c6:	|  |         move.l d0,36(sp)
    a4ca:	|  |         move.l 1b1aa <DOSBase>,d0
    a4d0:	|  |         movea.l d0,a6
    a4d2:	|  |         move.l 40(sp),d1
    a4d6:	|  |         move.l 36(sp),d2
    a4da:	|  |         jsr -312(a6)
    a4de:	|  |         move.l d0,32(sp)
		FPutC (fp, me -> colourmix);
    a4e2:	|  |         move.l 156(sp),28(sp)
    a4e8:	|  |         movea.l 148(sp),a0
    a4ec:	|  |         move.b 129(a0),d0
    a4f0:	|  |         move.b d0,d0
    a4f2:	|  |         andi.l #255,d0
    a4f8:	|  |         move.l d0,24(sp)
    a4fc:	|  |         move.l 1b1aa <DOSBase>,d0
    a502:	|  |         movea.l d0,a6
    a504:	|  |         move.l 28(sp),d1
    a508:	|  |         move.l 24(sp),d2
    a50c:	|  |         jsr -312(a6)
    a510:	|  |         move.l d0,20(sp)
		FPutC (fp, me -> transparency);
    a514:	|  |         move.l 156(sp),16(sp)
    a51a:	|  |         movea.l 148(sp),a0
    a51e:	|  |         move.b 130(a0),d0
    a522:	|  |         move.b d0,d0
    a524:	|  |         andi.l #255,d0
    a52a:	|  |         move.l d0,12(sp)
    a52e:	|  |         move.l 1b1aa <DOSBase>,d0
    a534:	|  |         movea.l d0,a6
    a536:	|  |         move.l 16(sp),d1
    a53a:	|  |         move.l 12(sp),d2
    a53e:	|  |         jsr -312(a6)
    a542:	|  |         move.l d0,8(sp)
		
		saveObjectRef (me -> thisType, fp);
    a546:	|  |         movea.l 148(sp),a0
    a54a:	|  |         move.l 114(a0),d0
    a54e:	|  |         move.l 156(sp),-(sp)
    a552:	|  |         move.l d0,-(sp)
    a554:	|  |         jsr c93e <saveObjectRef>
    a55a:	|  |         addq.l #8,sp

		me = me -> next;
    a55c:	|  |         movea.l 148(sp),a0
    a560:	|  |         move.l 36(a0),148(sp)
	for (a = 0; a < countPeople; a ++) {
    a566:	|  |         addq.l #1,140(sp)
    a56a:	|  \-------> movea.l 140(sp),a0
    a56e:	|            cmpa.l 144(sp),a0
    a572:	\----------- blt.w a116 <savePeople+0x76>
	}
	return TRUE;
    a576:	             moveq #1,d0
}
    a578:	             move.l (sp)+,d2
    a57a:	             movea.l (sp)+,a6
    a57c:	             lea 144(sp),sp
    a580:	             rts

0000a582 <setBankFile>:

void setBankFile (struct personaAnimation * newP, struct loadedSpriteBank * sB) { 
	newP -> theSprites = sB; 
    a582:	movea.l 4(sp),a0
    a586:	move.l 8(sp),(a0)
}
    a58a:	nop
    a58c:	rts

0000a58e <setDrawMode>:


void setDrawMode (int h, int ob) {
    a58e:	       subq.l #4,sp
	struct onScreenPerson * moveMe = findPerson (ob);
    a590:	       move.l 12(sp),-(sp)
    a594:	       jsr 961c <findPerson>
    a59a:	       addq.l #4,sp
    a59c:	       move.l d0,(sp)
	if (! moveMe) return;
    a59e:	/----- beq.s a5b2 <setDrawMode+0x24>
		
	setMyDrawMode (moveMe, h);
    a5a0:	|      move.l 8(sp),-(sp)
    a5a4:	|      move.l 4(sp),-(sp)
    a5a8:	|      jsr a5b8 <setMyDrawMode>
    a5ae:	|      addq.l #8,sp
    a5b0:	|  /-- bra.s a5b4 <setDrawMode+0x26>
	if (! moveMe) return;
    a5b2:	\--|-> nop
}
    a5b4:	   \-> addq.l #4,sp
    a5b6:	       rts

0000a5b8 <setMyDrawMode>:
	drawModeInvisible,
	numDrawModes
};

void setMyDrawMode (struct onScreenPerson *moveMe, int h) {
	switch (h) {
    a5b8:	       moveq #19,d0
    a5ba:	       cmp.l 8(sp),d0
    a5be:	/----- bcs.w aa96 <setMyDrawMode+0x4de>
    a5c2:	|      move.l 8(sp),d0
    a5c6:	|      add.l d0,d0
    a5c8:	|      movea.l d0,a0
    a5ca:	|      adda.l #42454,a0
    a5d0:	|      move.w (a0),d0
    a5d2:	|      jmp (a5d6 <setMyDrawMode+0x1e>,pc,d0.w)
    a5d6:	|      .short 0x04c0
    a5d8:	|      ori.l #6684712,-(a4)
    a5de:	|      btst d0,-(a0)
    a5e0:	|      bchg d0,(a6)+
    a5e2:	|      bclr d0,(a4)+
    a5e4:	|      bset d0,(a2)+
    a5e6:	|      andi.b #84,(a6)
    a5ea:	|      andi.l #55575312,(a2)
    a5f0:	|      .short 0x02d0
    a5f2:	|      bclr d1,(a0)
    a5f4:	|      .short 0x044a
    a5f6:	|      .short 0x040c
    a5f8:	|      movep.l d1,1158(a6)
    a5fc:	|      .short 0x00e2
		case drawModeTransparent3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    a5fe:	|      movea.l 4(sp),a0
    a602:	|      clr.b 128(a0)
    a606:	|      movea.l 4(sp),a0
    a60a:	|      move.b 128(a0),d0
    a60e:	|      movea.l 4(sp),a0
    a612:	|      move.b d0,127(a0)
    a616:	|      movea.l 4(sp),a0
    a61a:	|      move.b 127(a0),d0
    a61e:	|      movea.l 4(sp),a0
    a622:	|      move.b d0,126(a0)
			moveMe->colourmix = 0;
    a626:	|      movea.l 4(sp),a0
    a62a:	|      clr.b 129(a0)
			moveMe->transparency = 64;
    a62e:	|      movea.l 4(sp),a0
    a632:	|      move.b #64,130(a0)
			break;
    a638:	|  /-- bra.w aad0 <setMyDrawMode+0x518>
		case drawModeTransparent2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    a63c:	|  |   movea.l 4(sp),a0
    a640:	|  |   clr.b 128(a0)
    a644:	|  |   movea.l 4(sp),a0
    a648:	|  |   move.b 128(a0),d0
    a64c:	|  |   movea.l 4(sp),a0
    a650:	|  |   move.b d0,127(a0)
    a654:	|  |   movea.l 4(sp),a0
    a658:	|  |   move.b 127(a0),d0
    a65c:	|  |   movea.l 4(sp),a0
    a660:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    a664:	|  |   movea.l 4(sp),a0
    a668:	|  |   clr.b 129(a0)
			moveMe->transparency = 128;
    a66c:	|  |   movea.l 4(sp),a0
    a670:	|  |   move.b #-128,130(a0)
			break;
    a676:	|  +-- bra.w aad0 <setMyDrawMode+0x518>
		case drawModeTransparent1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    a67a:	|  |   movea.l 4(sp),a0
    a67e:	|  |   clr.b 128(a0)
    a682:	|  |   movea.l 4(sp),a0
    a686:	|  |   move.b 128(a0),d0
    a68a:	|  |   movea.l 4(sp),a0
    a68e:	|  |   move.b d0,127(a0)
    a692:	|  |   movea.l 4(sp),a0
    a696:	|  |   move.b 127(a0),d0
    a69a:	|  |   movea.l 4(sp),a0
    a69e:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    a6a2:	|  |   movea.l 4(sp),a0
    a6a6:	|  |   clr.b 129(a0)
			moveMe->transparency = 192;
    a6aa:	|  |   movea.l 4(sp),a0
    a6ae:	|  |   move.b #-64,130(a0)
			break;
    a6b4:	|  +-- bra.w aad0 <setMyDrawMode+0x518>
		case drawModeInvisible:
			moveMe->r = moveMe->g = moveMe->b = 0;
    a6b8:	|  |   movea.l 4(sp),a0
    a6bc:	|  |   clr.b 128(a0)
    a6c0:	|  |   movea.l 4(sp),a0
    a6c4:	|  |   move.b 128(a0),d0
    a6c8:	|  |   movea.l 4(sp),a0
    a6cc:	|  |   move.b d0,127(a0)
    a6d0:	|  |   movea.l 4(sp),a0
    a6d4:	|  |   move.b 127(a0),d0
    a6d8:	|  |   movea.l 4(sp),a0
    a6dc:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    a6e0:	|  |   movea.l 4(sp),a0
    a6e4:	|  |   clr.b 129(a0)
			moveMe->transparency = 254;
    a6e8:	|  |   movea.l 4(sp),a0
    a6ec:	|  |   move.b #-2,130(a0)
			break;
    a6f2:	|  +-- bra.w aad0 <setMyDrawMode+0x518>
		case drawModeDark1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    a6f6:	|  |   movea.l 4(sp),a0
    a6fa:	|  |   clr.b 128(a0)
    a6fe:	|  |   movea.l 4(sp),a0
    a702:	|  |   move.b 128(a0),d0
    a706:	|  |   movea.l 4(sp),a0
    a70a:	|  |   move.b d0,127(a0)
    a70e:	|  |   movea.l 4(sp),a0
    a712:	|  |   move.b 127(a0),d0
    a716:	|  |   movea.l 4(sp),a0
    a71a:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    a71e:	|  |   movea.l 4(sp),a0
    a722:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    a728:	|  |   movea.l 4(sp),a0
    a72c:	|  |   clr.b 130(a0)
			break;
    a730:	|  +-- bra.w aad0 <setMyDrawMode+0x518>
		case drawModeDark2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    a734:	|  |   movea.l 4(sp),a0
    a738:	|  |   clr.b 128(a0)
    a73c:	|  |   movea.l 4(sp),a0
    a740:	|  |   move.b 128(a0),d0
    a744:	|  |   movea.l 4(sp),a0
    a748:	|  |   move.b d0,127(a0)
    a74c:	|  |   movea.l 4(sp),a0
    a750:	|  |   move.b 127(a0),d0
    a754:	|  |   movea.l 4(sp),a0
    a758:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    a75c:	|  |   movea.l 4(sp),a0
    a760:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    a766:	|  |   movea.l 4(sp),a0
    a76a:	|  |   clr.b 130(a0)
			break;
    a76e:	|  +-- bra.w aad0 <setMyDrawMode+0x518>
		case drawModeDark3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    a772:	|  |   movea.l 4(sp),a0
    a776:	|  |   clr.b 128(a0)
    a77a:	|  |   movea.l 4(sp),a0
    a77e:	|  |   move.b 128(a0),d0
    a782:	|  |   movea.l 4(sp),a0
    a786:	|  |   move.b d0,127(a0)
    a78a:	|  |   movea.l 4(sp),a0
    a78e:	|  |   move.b 127(a0),d0
    a792:	|  |   movea.l 4(sp),a0
    a796:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    a79a:	|  |   movea.l 4(sp),a0
    a79e:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    a7a4:	|  |   movea.l 4(sp),a0
    a7a8:	|  |   clr.b 130(a0)
			break;
    a7ac:	|  +-- bra.w aad0 <setMyDrawMode+0x518>
		case drawModeBlack:
			moveMe->r = moveMe->g = moveMe->b = 0;
    a7b0:	|  |   movea.l 4(sp),a0
    a7b4:	|  |   clr.b 128(a0)
    a7b8:	|  |   movea.l 4(sp),a0
    a7bc:	|  |   move.b 128(a0),d0
    a7c0:	|  |   movea.l 4(sp),a0
    a7c4:	|  |   move.b d0,127(a0)
    a7c8:	|  |   movea.l 4(sp),a0
    a7cc:	|  |   move.b 127(a0),d0
    a7d0:	|  |   movea.l 4(sp),a0
    a7d4:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    a7d8:	|  |   movea.l 4(sp),a0
    a7dc:	|  |   st 129(a0)
			moveMe->transparency = 0;
    a7e0:	|  |   movea.l 4(sp),a0
    a7e4:	|  |   clr.b 130(a0)
			break;
    a7e8:	|  +-- bra.w aad0 <setMyDrawMode+0x518>
		case drawModeShadow1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    a7ec:	|  |   movea.l 4(sp),a0
    a7f0:	|  |   clr.b 128(a0)
    a7f4:	|  |   movea.l 4(sp),a0
    a7f8:	|  |   move.b 128(a0),d0
    a7fc:	|  |   movea.l 4(sp),a0
    a800:	|  |   move.b d0,127(a0)
    a804:	|  |   movea.l 4(sp),a0
    a808:	|  |   move.b 127(a0),d0
    a80c:	|  |   movea.l 4(sp),a0
    a810:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    a814:	|  |   movea.l 4(sp),a0
    a818:	|  |   st 129(a0)
			moveMe->transparency = 64;
    a81c:	|  |   movea.l 4(sp),a0
    a820:	|  |   move.b #64,130(a0)
			break;
    a826:	|  +-- bra.w aad0 <setMyDrawMode+0x518>
		case drawModeShadow2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    a82a:	|  |   movea.l 4(sp),a0
    a82e:	|  |   clr.b 128(a0)
    a832:	|  |   movea.l 4(sp),a0
    a836:	|  |   move.b 128(a0),d0
    a83a:	|  |   movea.l 4(sp),a0
    a83e:	|  |   move.b d0,127(a0)
    a842:	|  |   movea.l 4(sp),a0
    a846:	|  |   move.b 127(a0),d0
    a84a:	|  |   movea.l 4(sp),a0
    a84e:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    a852:	|  |   movea.l 4(sp),a0
    a856:	|  |   st 129(a0)
			moveMe->transparency = 128;
    a85a:	|  |   movea.l 4(sp),a0
    a85e:	|  |   move.b #-128,130(a0)
			break;
    a864:	|  +-- bra.w aad0 <setMyDrawMode+0x518>
		case drawModeShadow3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    a868:	|  |   movea.l 4(sp),a0
    a86c:	|  |   clr.b 128(a0)
    a870:	|  |   movea.l 4(sp),a0
    a874:	|  |   move.b 128(a0),d0
    a878:	|  |   movea.l 4(sp),a0
    a87c:	|  |   move.b d0,127(a0)
    a880:	|  |   movea.l 4(sp),a0
    a884:	|  |   move.b 127(a0),d0
    a888:	|  |   movea.l 4(sp),a0
    a88c:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    a890:	|  |   movea.l 4(sp),a0
    a894:	|  |   st 129(a0)
			moveMe->transparency = 192;
    a898:	|  |   movea.l 4(sp),a0
    a89c:	|  |   move.b #-64,130(a0)
			break;
    a8a2:	|  +-- bra.w aad0 <setMyDrawMode+0x518>
		case drawModeFoggy3:
			moveMe->r = moveMe->g = moveMe->b = 128;
    a8a6:	|  |   movea.l 4(sp),a0
    a8aa:	|  |   move.b #-128,128(a0)
    a8b0:	|  |   movea.l 4(sp),a0
    a8b4:	|  |   move.b 128(a0),d0
    a8b8:	|  |   movea.l 4(sp),a0
    a8bc:	|  |   move.b d0,127(a0)
    a8c0:	|  |   movea.l 4(sp),a0
    a8c4:	|  |   move.b 127(a0),d0
    a8c8:	|  |   movea.l 4(sp),a0
    a8cc:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    a8d0:	|  |   movea.l 4(sp),a0
    a8d4:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    a8da:	|  |   movea.l 4(sp),a0
    a8de:	|  |   clr.b 130(a0)
			break;
    a8e2:	|  +-- bra.w aad0 <setMyDrawMode+0x518>
		case drawModeFoggy2:
			moveMe->r = moveMe->g = moveMe->b = 128;
    a8e6:	|  |   movea.l 4(sp),a0
    a8ea:	|  |   move.b #-128,128(a0)
    a8f0:	|  |   movea.l 4(sp),a0
    a8f4:	|  |   move.b 128(a0),d0
    a8f8:	|  |   movea.l 4(sp),a0
    a8fc:	|  |   move.b d0,127(a0)
    a900:	|  |   movea.l 4(sp),a0
    a904:	|  |   move.b 127(a0),d0
    a908:	|  |   movea.l 4(sp),a0
    a90c:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    a910:	|  |   movea.l 4(sp),a0
    a914:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    a91a:	|  |   movea.l 4(sp),a0
    a91e:	|  |   clr.b 130(a0)
			break;
    a922:	|  +-- bra.w aad0 <setMyDrawMode+0x518>
		case drawModeFoggy1:
			moveMe->r = moveMe->g = moveMe->b = 128;
    a926:	|  |   movea.l 4(sp),a0
    a92a:	|  |   move.b #-128,128(a0)
    a930:	|  |   movea.l 4(sp),a0
    a934:	|  |   move.b 128(a0),d0
    a938:	|  |   movea.l 4(sp),a0
    a93c:	|  |   move.b d0,127(a0)
    a940:	|  |   movea.l 4(sp),a0
    a944:	|  |   move.b 127(a0),d0
    a948:	|  |   movea.l 4(sp),a0
    a94c:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    a950:	|  |   movea.l 4(sp),a0
    a954:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    a95a:	|  |   movea.l 4(sp),a0
    a95e:	|  |   clr.b 130(a0)
			break;
    a962:	|  +-- bra.w aad0 <setMyDrawMode+0x518>
		case drawModeFoggy4:
			moveMe->r = moveMe->g = moveMe->b = 128;
    a966:	|  |   movea.l 4(sp),a0
    a96a:	|  |   move.b #-128,128(a0)
    a970:	|  |   movea.l 4(sp),a0
    a974:	|  |   move.b 128(a0),d0
    a978:	|  |   movea.l 4(sp),a0
    a97c:	|  |   move.b d0,127(a0)
    a980:	|  |   movea.l 4(sp),a0
    a984:	|  |   move.b 127(a0),d0
    a988:	|  |   movea.l 4(sp),a0
    a98c:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    a990:	|  |   movea.l 4(sp),a0
    a994:	|  |   st 129(a0)
			moveMe->transparency = 0;
    a998:	|  |   movea.l 4(sp),a0
    a99c:	|  |   clr.b 130(a0)
			break;
    a9a0:	|  +-- bra.w aad0 <setMyDrawMode+0x518>
		case drawModeGlow3:
			moveMe->r = moveMe->g = moveMe->b = 255;
    a9a4:	|  |   movea.l 4(sp),a0
    a9a8:	|  |   st 128(a0)
    a9ac:	|  |   movea.l 4(sp),a0
    a9b0:	|  |   move.b 128(a0),d0
    a9b4:	|  |   movea.l 4(sp),a0
    a9b8:	|  |   move.b d0,127(a0)
    a9bc:	|  |   movea.l 4(sp),a0
    a9c0:	|  |   move.b 127(a0),d0
    a9c4:	|  |   movea.l 4(sp),a0
    a9c8:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    a9cc:	|  |   movea.l 4(sp),a0
    a9d0:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    a9d6:	|  |   movea.l 4(sp),a0
    a9da:	|  |   clr.b 130(a0)
			break;
    a9de:	|  +-- bra.w aad0 <setMyDrawMode+0x518>
		case drawModeGlow2:
			moveMe->r = moveMe->g = moveMe->b = 255;
    a9e2:	|  |   movea.l 4(sp),a0
    a9e6:	|  |   st 128(a0)
    a9ea:	|  |   movea.l 4(sp),a0
    a9ee:	|  |   move.b 128(a0),d0
    a9f2:	|  |   movea.l 4(sp),a0
    a9f6:	|  |   move.b d0,127(a0)
    a9fa:	|  |   movea.l 4(sp),a0
    a9fe:	|  |   move.b 127(a0),d0
    aa02:	|  |   movea.l 4(sp),a0
    aa06:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    aa0a:	|  |   movea.l 4(sp),a0
    aa0e:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    aa14:	|  |   movea.l 4(sp),a0
    aa18:	|  |   clr.b 130(a0)
			break;
    aa1c:	|  +-- bra.w aad0 <setMyDrawMode+0x518>
		case drawModeGlow1:
			moveMe->r = moveMe->g = moveMe->b = 255;
    aa20:	|  |   movea.l 4(sp),a0
    aa24:	|  |   st 128(a0)
    aa28:	|  |   movea.l 4(sp),a0
    aa2c:	|  |   move.b 128(a0),d0
    aa30:	|  |   movea.l 4(sp),a0
    aa34:	|  |   move.b d0,127(a0)
    aa38:	|  |   movea.l 4(sp),a0
    aa3c:	|  |   move.b 127(a0),d0
    aa40:	|  |   movea.l 4(sp),a0
    aa44:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    aa48:	|  |   movea.l 4(sp),a0
    aa4c:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    aa52:	|  |   movea.l 4(sp),a0
    aa56:	|  |   clr.b 130(a0)
			break;
    aa5a:	|  +-- bra.s aad0 <setMyDrawMode+0x518>
		case drawModeGlow4:
			moveMe->r = moveMe->g = moveMe->b = 255;
    aa5c:	|  |   movea.l 4(sp),a0
    aa60:	|  |   st 128(a0)
    aa64:	|  |   movea.l 4(sp),a0
    aa68:	|  |   move.b 128(a0),d0
    aa6c:	|  |   movea.l 4(sp),a0
    aa70:	|  |   move.b d0,127(a0)
    aa74:	|  |   movea.l 4(sp),a0
    aa78:	|  |   move.b 127(a0),d0
    aa7c:	|  |   movea.l 4(sp),a0
    aa80:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    aa84:	|  |   movea.l 4(sp),a0
    aa88:	|  |   st 129(a0)
			moveMe->transparency = 0;
    aa8c:	|  |   movea.l 4(sp),a0
    aa90:	|  |   clr.b 130(a0)
			break;
    aa94:	|  +-- bra.s aad0 <setMyDrawMode+0x518>
		default:
			moveMe->r = moveMe->g = moveMe->b = 0;
    aa96:	\--|-> movea.l 4(sp),a0
    aa9a:	   |   clr.b 128(a0)
    aa9e:	   |   movea.l 4(sp),a0
    aaa2:	   |   move.b 128(a0),d0
    aaa6:	   |   movea.l 4(sp),a0
    aaaa:	   |   move.b d0,127(a0)
    aaae:	   |   movea.l 4(sp),a0
    aab2:	   |   move.b 127(a0),d0
    aab6:	   |   movea.l 4(sp),a0
    aaba:	   |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    aabe:	   |   movea.l 4(sp),a0
    aac2:	   |   clr.b 129(a0)
			moveMe->transparency = 0;
    aac6:	   |   movea.l 4(sp),a0
    aaca:	   |   clr.b 130(a0)
			break;
    aace:	   |   nop
	}
}
    aad0:	   \-> nop
    aad2:	       rts

0000aad4 <shufflePeople>:

void shufflePeople () {
    aad4:	             lea -20(sp),sp
	struct onScreenPerson ** thisReference = &allPeople;
    aad8:	             move.l #111194,16(sp)
	struct onScreenPerson * A, * B;

	if (!allPeople) return;
    aae0:	             move.l 1b25a <allPeople>,d0
    aae6:	/----------- beq.w abbc <shufflePeople+0xe8>

	while ((*thisReference)->next) {
    aaea:	|     /----- bra.w abac <shufflePeople+0xd8>
		float y1 = (*thisReference)->y;
    aaee:	|  /--|----> movea.l 16(sp),a0
    aaf2:	|  |  |      movea.l (a0),a0
    aaf4:	|  |  |      move.l 4(a0),12(sp)
		if ((*thisReference)->extra & EXTRA_FRONT) y1 += 1000;
    aafa:	|  |  |      movea.l 16(sp),a0
    aafe:	|  |  |      movea.l (a0),a0
    ab00:	|  |  |      move.l 118(a0),d0
    ab04:	|  |  |      moveq #1,d1
    ab06:	|  |  |      and.l d1,d0
    ab08:	|  |  |  /-- beq.s ab20 <shufflePeople+0x4c>
    ab0a:	|  |  |  |   move.l #1148846080,-(sp)
    ab10:	|  |  |  |   move.l 16(sp),-(sp)
    ab14:	|  |  |  |   jsr 15c5a <__addsf3>
    ab1a:	|  |  |  |   addq.l #8,sp
    ab1c:	|  |  |  |   move.l d0,12(sp)

		float y2 = (*thisReference)->next->y;
    ab20:	|  |  |  \-> movea.l 16(sp),a0
    ab24:	|  |  |      movea.l (a0),a0
    ab26:	|  |  |      movea.l 36(a0),a0
    ab2a:	|  |  |      move.l 4(a0),8(sp)
		if ((*thisReference)->next->extra & EXTRA_FRONT) y2 += 1000;
    ab30:	|  |  |      movea.l 16(sp),a0
    ab34:	|  |  |      movea.l (a0),a0
    ab36:	|  |  |      movea.l 36(a0),a0
    ab3a:	|  |  |      move.l 118(a0),d0
    ab3e:	|  |  |      moveq #1,d1
    ab40:	|  |  |      and.l d1,d0
    ab42:	|  |  |  /-- beq.s ab5a <shufflePeople+0x86>
    ab44:	|  |  |  |   move.l #1148846080,-(sp)
    ab4a:	|  |  |  |   move.l 12(sp),-(sp)
    ab4e:	|  |  |  |   jsr 15c5a <__addsf3>
    ab54:	|  |  |  |   addq.l #8,sp
    ab56:	|  |  |  |   move.l d0,8(sp)

		if (y1 > y2) {
    ab5a:	|  |  |  \-> move.l 8(sp),-(sp)
    ab5e:	|  |  |      move.l 16(sp),-(sp)
    ab62:	|  |  |      jsr 16014 <__gtsf2>
    ab68:	|  |  |      addq.l #8,sp
    ab6a:	|  |  |      tst.l d0
    ab6c:	|  |  |  /-- ble.s ab9e <shufflePeople+0xca>
			A = (*thisReference);
    ab6e:	|  |  |  |   movea.l 16(sp),a0
    ab72:	|  |  |  |   move.l (a0),4(sp)
			B = (*thisReference)->next;
    ab76:	|  |  |  |   movea.l 16(sp),a0
    ab7a:	|  |  |  |   movea.l (a0),a0
    ab7c:	|  |  |  |   move.l 36(a0),(sp)
			A->next = B->next;
    ab80:	|  |  |  |   movea.l (sp),a0
    ab82:	|  |  |  |   move.l 36(a0),d0
    ab86:	|  |  |  |   movea.l 4(sp),a0
    ab8a:	|  |  |  |   move.l d0,36(a0)
			B->next = A;
    ab8e:	|  |  |  |   movea.l (sp),a0
    ab90:	|  |  |  |   move.l 4(sp),36(a0)
			(*thisReference) = B;
    ab96:	|  |  |  |   movea.l 16(sp),a0
    ab9a:	|  |  |  |   move.l (sp),(a0)
    ab9c:	|  |  +--|-- bra.s abac <shufflePeople+0xd8>
		} else {
			thisReference = &((*thisReference)->next);
    ab9e:	|  |  |  \-> movea.l 16(sp),a0
    aba2:	|  |  |      move.l (a0),d0
    aba4:	|  |  |      moveq #36,d1
    aba6:	|  |  |      add.l d0,d1
    aba8:	|  |  |      move.l d1,16(sp)
	while ((*thisReference)->next) {
    abac:	|  |  \----> movea.l 16(sp),a0
    abb0:	|  |         movea.l (a0),a0
    abb2:	|  |         move.l 36(a0),d0
    abb6:	|  \-------- bne.w aaee <shufflePeople+0x1a>
    abba:	|        /-- bra.s abbe <shufflePeople+0xea>
	if (!allPeople) return;
    abbc:	\--------|-> nop
		}
	}
}
    abbe:	         \-> lea 20(sp),sp
    abc2:	             rts

0000abc4 <setCharacterWalkSpeed>:


BOOL setCharacterWalkSpeed (int f, int objNum) {
    abc4:	       subq.l #4,sp
	if (f <= 0) return FALSE;
    abc6:	       tst.l 8(sp)
    abca:	   /-- bgt.s abd0 <setCharacterWalkSpeed+0xc>
    abcc:	   |   clr.w d0
    abce:	/--|-- bra.s abee <setCharacterWalkSpeed+0x2a>
	struct onScreenPerson * moveMe = findPerson (objNum);
    abd0:	|  \-> move.l 12(sp),-(sp)
    abd4:	|      jsr 961c <findPerson>
    abda:	|      addq.l #4,sp
    abdc:	|      move.l d0,(sp)
	if (! moveMe) return FALSE;
    abde:	|  /-- bne.s abe4 <setCharacterWalkSpeed+0x20>
    abe0:	|  |   clr.w d0
    abe2:	+--|-- bra.s abee <setCharacterWalkSpeed+0x2a>
	moveMe -> walkSpeed = f;
    abe4:	|  \-> movea.l (sp),a0
    abe6:	|      move.l 8(sp),28(a0)
	return TRUE;
    abec:	|      moveq #1,d0
}
    abee:	\----> addq.l #4,sp
    abf0:	       rts

0000abf2 <setPersonExtra>:

BOOL setPersonExtra (int thisNum, int extra) {
    abf2:	       subq.l #4,sp
    struct onScreenPerson * thisPerson = findPerson(thisNum);
    abf4:	       move.l 8(sp),-(sp)
    abf8:	       jsr 961c <findPerson>
    abfe:	       addq.l #4,sp
    ac00:	       move.l d0,(sp)
    if (thisPerson) {
    ac02:	/----- beq.s ac22 <setPersonExtra+0x30>
        thisPerson -> extra = extra;
    ac04:	|      movea.l (sp),a0
    ac06:	|      move.l 12(sp),118(a0)
        if (extra & EXTRA_NOSCALE) thisPerson -> scale = 1;
    ac0c:	|      moveq #2,d0
    ac0e:	|      and.l 12(sp),d0
    ac12:	|  /-- beq.s ac1e <setPersonExtra+0x2c>
    ac14:	|  |   movea.l (sp),a0
    ac16:	|  |   move.l #1065353216,32(a0)
        return TRUE;
    ac1e:	|  \-> moveq #1,d0
    ac20:	|  /-- bra.s ac24 <setPersonExtra+0x32>
    }
    return FALSE;
    ac22:	\--|-> clr.w d0
}
    ac24:	   \-> addq.l #4,sp
    ac26:	       rts

0000ac28 <setScale>:


void setScale (short int h, short int d) {
    ac28:	subq.l #4,sp
    ac2a:	move.l 8(sp),d1
    ac2e:	move.l 12(sp),d0
    ac32:	move.w d1,d1
    ac34:	move.w d1,2(sp)
    ac38:	move.w d0,d0
    ac3a:	move.w d0,(sp)
	scaleHorizon = h;
    ac3c:	move.w 2(sp),1ab36 <scaleHorizon>
	scaleDivide = d;
    ac44:	move.w (sp),1ab38 <scaleDivide>
}
    ac4a:	nop
    ac4c:	addq.l #4,sp
    ac4e:	rts

0000ac50 <setShown>:

void setShown (BOOL h, int ob) {
    ac50:	    subq.l #8,sp
    ac52:	    move.l 12(sp),d0
    ac56:	    move.w d0,d0
    ac58:	    move.w d0,2(sp)
	struct onScreenPerson * moveMe = findPerson (ob);
    ac5c:	    move.l 16(sp),-(sp)
    ac60:	    jsr 961c <findPerson>
    ac66:	    addq.l #4,sp
    ac68:	    move.l d0,4(sp)
	if (moveMe) moveMe -> show = h;
    ac6c:	/-- beq.s ac78 <setShown+0x28>
    ac6e:	|   movea.l 4(sp),a0
    ac72:	|   move.w 2(sp),104(a0)
}
    ac78:	\-> nop
    ac7a:	    addq.l #8,sp
    ac7c:	    rts

0000ac7e <spinStep>:

void spinStep (struct onScreenPerson * thisPerson) {
    ac7e:	       subq.l #8,sp
    ac80:	       move.l d2,-(sp)
	int diff = (thisPerson->angle + 360) - thisPerson->wantAngle;
    ac82:	       movea.l 16(sp),a0
    ac86:	       move.l 92(a0),d0
    ac8a:	       move.l d0,d1
    ac8c:	       addi.l #360,d1
    ac92:	       movea.l 16(sp),a0
    ac96:	       move.l 96(a0),d0
    ac9a:	       move.l d1,d2
    ac9c:	       sub.l d0,d2
    ac9e:	       move.l d2,8(sp)
	int eachSlice = thisPerson->spinSpeed ? thisPerson->spinSpeed : (360 / thisPerson->myPersona->numDirections);
    aca2:	       movea.l 16(sp),a0
    aca6:	       move.l 122(a0),d0
    acaa:	   /-- beq.s acb6 <spinStep+0x38>
    acac:	   |   movea.l 16(sp),a0
    acb0:	   |   move.l 122(a0),d0
    acb4:	/--|-- bra.s acd0 <spinStep+0x52>
    acb6:	|  \-> movea.l 16(sp),a0
    acba:	|      movea.l 80(a0),a0
    acbe:	|      move.l 4(a0),d0
    acc2:	|      move.l d0,-(sp)
    acc4:	|      pea 168 <decodeFilename+0x50>
    acc8:	|      jsr 164a8 <__divsi3>
    acce:	|      addq.l #8,sp
    acd0:	\----> move.l d0,4(sp)
	while (diff > 180) {
    acd4:	   /-- bra.s acde <spinStep+0x60>
		diff -= 360;
    acd6:	/--|-> addi.l #-360,8(sp)
	while (diff > 180) {
    acde:	|  \-> cmpi.l #180,8(sp)
    ace6:	\----- bgt.s acd6 <spinStep+0x58>
	}

	if (diff >= eachSlice) {
    ace8:	       move.l 8(sp),d0
    acec:	       cmp.l 4(sp),d0
    acf0:	   /-- blt.s ad0e <spinStep+0x90>
		turnMeAngle(thisPerson, thisPerson->angle - eachSlice);
    acf2:	   |   movea.l 16(sp),a0
    acf6:	   |   move.l 92(a0),d0
    acfa:	   |   sub.l 4(sp),d0
    acfe:	   |   move.l d0,-(sp)
    ad00:	   |   move.l 20(sp),-(sp)
    ad04:	   |   jsr adee <turnMeAngle>
    ad0a:	   |   addq.l #8,sp
		turnMeAngle(thisPerson, thisPerson->angle + eachSlice);
	} else {
		turnMeAngle(thisPerson, thisPerson->wantAngle);
		thisPerson->spinning = FALSE;
	}
}
    ad0c:	/--|-- bra.s ad54 <spinStep+0xd6>
	} else if (diff <= -eachSlice) {
    ad0e:	|  \-> move.l 4(sp),d0
    ad12:	|      neg.l d0
    ad14:	|      cmp.l 8(sp),d0
    ad18:	|  /-- blt.s ad36 <spinStep+0xb8>
		turnMeAngle(thisPerson, thisPerson->angle + eachSlice);
    ad1a:	|  |   movea.l 16(sp),a0
    ad1e:	|  |   move.l 92(a0),d0
    ad22:	|  |   add.l 4(sp),d0
    ad26:	|  |   move.l d0,-(sp)
    ad28:	|  |   move.l 20(sp),-(sp)
    ad2c:	|  |   jsr adee <turnMeAngle>
    ad32:	|  |   addq.l #8,sp
}
    ad34:	+--|-- bra.s ad54 <spinStep+0xd6>
		turnMeAngle(thisPerson, thisPerson->wantAngle);
    ad36:	|  \-> movea.l 16(sp),a0
    ad3a:	|      move.l 96(a0),d0
    ad3e:	|      move.l d0,-(sp)
    ad40:	|      move.l 20(sp),-(sp)
    ad44:	|      jsr adee <turnMeAngle>
    ad4a:	|      addq.l #8,sp
		thisPerson->spinning = FALSE;
    ad4c:	|      movea.l 16(sp),a0
    ad50:	|      clr.w 66(a0)
}
    ad54:	\----> nop
    ad56:	       move.l (sp)+,d2
    ad58:	       addq.l #8,sp
    ad5a:	       rts

0000ad5c <stopPerson>:


BOOL stopPerson (int o) {
    ad5c:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(o);
    ad5e:	       move.l 8(sp),-(sp)
    ad62:	       jsr 961c <findPerson>
    ad68:	       addq.l #4,sp
    ad6a:	       move.l d0,(sp)
    if (moveMe)
    ad6c:	/----- beq.s adaa <stopPerson+0x4e>
        if (moveMe -> continueAfterWalking) {
    ad6e:	|      movea.l (sp),a0
    ad70:	|      move.l 68(a0),d0
    ad74:	+----- beq.s adaa <stopPerson+0x4e>
            abortFunction(moveMe -> continueAfterWalking);
    ad76:	|      movea.l (sp),a0
    ad78:	|      move.l 68(a0),d0
    ad7c:	|      move.l d0,-(sp)
    ad7e:	|      jsr 360e <abortFunction>
    ad84:	|      addq.l #4,sp
            moveMe -> continueAfterWalking = NULL;
    ad86:	|      movea.l (sp),a0
    ad88:	|      clr.l 68(a0)
            moveMe -> walking = FALSE;
    ad8c:	|      movea.l (sp),a0
    ad8e:	|      clr.w 64(a0)
            moveMe -> spinning = FALSE;
    ad92:	|      movea.l (sp),a0
    ad94:	|      clr.w 66(a0)
            setFrames(moveMe, ANI_STAND);
    ad98:	|      clr.l -(sp)
    ad9a:	|      move.l 4(sp),-(sp)
    ad9e:	|      jsr 7026 <setFrames>
    ada4:	|      addq.l #8,sp
            return TRUE;
    ada6:	|      moveq #1,d0
    ada8:	|  /-- bra.s adac <stopPerson+0x50>
        }
    return FALSE;
    adaa:	\--|-> clr.w d0
}
    adac:	   \-> addq.l #4,sp
    adae:	       rts

0000adb0 <timeForAnim>:


int timeForAnim (struct personaAnimation * fram) {
    adb0:	       subq.l #8,sp
	int total = 0;
    adb2:	       clr.l 4(sp)
	for (int a = 0; a < fram -> numFrames; a ++) {
    adb6:	       clr.l (sp)
    adb8:	   /-- bra.s adda <timeForAnim+0x2a>
		total += fram -> frames[a].howMany;
    adba:	/--|-> movea.l 12(sp),a0
    adbe:	|  |   movea.l 4(a0),a0
    adc2:	|  |   move.l (sp),d1
    adc4:	|  |   move.l d1,d0
    adc6:	|  |   add.l d0,d0
    adc8:	|  |   add.l d1,d0
    adca:	|  |   add.l d0,d0
    adcc:	|  |   add.l d0,d0
    adce:	|  |   adda.l d0,a0
    add0:	|  |   move.l 4(a0),d0
    add4:	|  |   add.l d0,4(sp)
	for (int a = 0; a < fram -> numFrames; a ++) {
    add8:	|  |   addq.l #1,(sp)
    adda:	|  \-> movea.l 12(sp),a0
    adde:	|      move.l 8(a0),d0
    ade2:	|      cmp.l (sp),d0
    ade4:	\----- bgt.s adba <timeForAnim+0xa>
	}
	return total;
    ade6:	       move.l 4(sp),d0
}
    adea:	       addq.l #8,sp
    adec:	       rts

0000adee <turnMeAngle>:

void turnMeAngle (struct onScreenPerson * thisPerson, int direc) {
    adee:	       subq.l #4,sp
	int d = thisPerson -> myPersona -> numDirections;
    adf0:	       movea.l 8(sp),a0
    adf4:	       movea.l 80(a0),a0
    adf8:	       move.l 4(a0),(sp)
	thisPerson -> angle = direc;
    adfc:	       movea.l 8(sp),a0
    ae00:	       move.l 12(sp),92(a0)
	direc += (180 / d) + 180 + thisPerson -> angleOffset;
    ae06:	       move.l (sp),-(sp)
    ae08:	       pea b4 <_start+0xb4>
    ae0c:	       jsr 164a8 <__divsi3>
    ae12:	       addq.l #8,sp
    ae14:	       move.l d0,d1
    ae16:	       addi.l #180,d1
    ae1c:	       movea.l 8(sp),a0
    ae20:	       move.l 100(a0),d0
    ae24:	       add.l d1,d0
    ae26:	       add.l d0,12(sp)
	while (direc >= 360) direc -= 360;
    ae2a:	   /-- bra.s ae34 <turnMeAngle+0x46>
    ae2c:	/--|-> addi.l #-360,12(sp)
    ae34:	|  \-> cmpi.l #359,12(sp)
    ae3c:	\----- bgt.s ae2c <turnMeAngle+0x3e>
	thisPerson -> direction = (direc * d) / 360;
    ae3e:	       move.l (sp),-(sp)
    ae40:	       move.l 16(sp),-(sp)
    ae44:	       jsr 1642a <__mulsi3>
    ae4a:	       addq.l #8,sp
    ae4c:	       pea 168 <decodeFilename+0x50>
    ae50:	       move.l d0,-(sp)
    ae52:	       jsr 164a8 <__divsi3>
    ae58:	       addq.l #8,sp
    ae5a:	       movea.l 8(sp),a0
    ae5e:	       move.l d0,106(a0)
}
    ae62:	       nop
    ae64:	       addq.l #4,sp
    ae66:	       rts

0000ae68 <turnPersonToFace>:

BOOL turnPersonToFace (int thisNum, int direc) {
    ae68:	          subq.l #4,sp
    struct onScreenPerson * thisPerson = findPerson(thisNum);
    ae6a:	          move.l 8(sp),-(sp)
    ae6e:	          jsr 961c <findPerson>
    ae74:	          addq.l #4,sp
    ae76:	          move.l d0,(sp)
    if (thisPerson) {
    ae78:	/-------- beq.s aed8 <turnPersonToFace+0x70>
        if (thisPerson -> continueAfterWalking) abortFunction(thisPerson -> continueAfterWalking);
    ae7a:	|         movea.l (sp),a0
    ae7c:	|         move.l 68(a0),d0
    ae80:	|     /-- beq.s ae92 <turnPersonToFace+0x2a>
    ae82:	|     |   movea.l (sp),a0
    ae84:	|     |   move.l 68(a0),d0
    ae88:	|     |   move.l d0,-(sp)
    ae8a:	|     |   jsr 360e <abortFunction>
    ae90:	|     |   addq.l #4,sp
        thisPerson -> continueAfterWalking = NULL;
    ae92:	|     \-> movea.l (sp),a0
    ae94:	|         clr.l 68(a0)
        thisPerson -> walking = FALSE;
    ae98:	|         movea.l (sp),a0
    ae9a:	|         clr.w 64(a0)
        thisPerson -> spinning = FALSE;
    ae9e:	|         movea.l (sp),a0
    aea0:	|         clr.w 66(a0)
        turnMeAngle(thisPerson, direc);
    aea4:	|         move.l 12(sp),-(sp)
    aea8:	|         move.l 4(sp),-(sp)
    aeac:	|         jsr adee <turnMeAngle>
    aeb2:	|         addq.l #8,sp
        setFrames(thisPerson, (thisPerson == speech->currentTalker) ? ANI_TALK : ANI_STAND);
    aeb4:	|         movea.l 1b1fe <speech>,a0
    aeba:	|         move.l (a0),d0
    aebc:	|         cmp.l (sp),d0
    aebe:	|  /----- bne.s aec4 <turnPersonToFace+0x5c>
    aec0:	|  |      moveq #2,d0
    aec2:	|  |  /-- bra.s aec6 <turnPersonToFace+0x5e>
    aec4:	|  \--|-> moveq #0,d0
    aec6:	|     \-> move.l d0,-(sp)
    aec8:	|         move.l 4(sp),-(sp)
    aecc:	|         jsr 7026 <setFrames>
    aed2:	|         addq.l #8,sp
        return TRUE;
    aed4:	|         moveq #1,d0
    aed6:	|     /-- bra.s aeda <turnPersonToFace+0x72>
    }
    return FALSE;
    aed8:	\-----|-> clr.w d0
}
    aeda:	      \-> addq.l #4,sp
    aedc:	          rts

0000aede <walkMe>:

BOOL walkMe (struct onScreenPerson * thisPerson, BOOL move) {
    aede:	                lea -20(sp),sp
    aee2:	                move.l d3,-(sp)
    aee4:	                move.l d2,-(sp)
    aee6:	                move.l 36(sp),d0
    aeea:	                move.w d0,d0
    aeec:	                move.w d0,10(sp)
	float xDiff, yDiff, maxDiff, s;

	if (move == -1) move = TRUE;  // Initialize default value for move
    aef0:	                cmpi.w #-1,10(sp)
    aef6:	/-------------- bne.s aefe <walkMe+0x20>
    aef8:	|               move.w #1,10(sp)

	for (;;) {
		xDiff = thisPerson->thisStepX - thisPerson->x;
    aefe:	>-------------> movea.l 32(sp),a0
    af02:	|               move.l 48(a0),d0
    af06:	|               move.l d0,-(sp)
    af08:	|               jsr 15ea8 <__floatsisf>
    af0e:	|               addq.l #4,sp
    af10:	|               move.l d0,d1
    af12:	|               movea.l 32(sp),a0
    af16:	|               move.l (a0),d0
    af18:	|               move.l d0,-(sp)
    af1a:	|               move.l d1,-(sp)
    af1c:	|               jsr 1619c <__subsf3>
    af22:	|               addq.l #8,sp
    af24:	|               move.l d0,20(sp)
		yDiff = (thisPerson->thisStepY - thisPerson->y) * 2;
    af28:	|               movea.l 32(sp),a0
    af2c:	|               move.l 52(a0),d0
    af30:	|               move.l d0,-(sp)
    af32:	|               jsr 15ea8 <__floatsisf>
    af38:	|               addq.l #4,sp
    af3a:	|               move.l d0,d1
    af3c:	|               movea.l 32(sp),a0
    af40:	|               move.l 4(a0),d0
    af44:	|               move.l d0,-(sp)
    af46:	|               move.l d1,-(sp)
    af48:	|               jsr 1619c <__subsf3>
    af4e:	|               addq.l #8,sp
    af50:	|               move.l d0,-(sp)
    af52:	|               move.l d0,-(sp)
    af54:	|               jsr 15c5a <__addsf3>
    af5a:	|               addq.l #8,sp
    af5c:	|               move.l d0,16(sp)
		s = thisPerson->scale * thisPerson->walkSpeed;
    af60:	|               movea.l 32(sp),a0
    af64:	|               move.l 32(a0),d2
    af68:	|               movea.l 32(sp),a0
    af6c:	|               move.l 28(a0),d0
    af70:	|               move.l d0,-(sp)
    af72:	|               jsr 15ea8 <__floatsisf>
    af78:	|               addq.l #4,sp
    af7a:	|               move.l d0,-(sp)
    af7c:	|               move.l d2,-(sp)
    af7e:	|               jsr 15f5a <__mulsf3>
    af84:	|               addq.l #8,sp
    af86:	|               move.l d0,24(sp)
		if (s < 0.2) s = 0.2;
    af8a:	|               move.l 24(sp),-(sp)
    af8e:	|               jsr 15dc0 <__extendsfdf2>
    af94:	|               addq.l #4,sp
    af96:	|               move.l #-1717986918,-(sp)
    af9c:	|               move.l #1070176665,-(sp)
    afa2:	|               move.l d1,-(sp)
    afa4:	|               move.l d0,-(sp)
    afa6:	|               jsr 16080 <__ltdf2>
    afac:	|               lea 16(sp),sp
    afb0:	|               tst.l d0
    afb2:	|           /-- bge.s afbc <walkMe+0xde>
    afb4:	|           |   move.l #1045220557,24(sp)

		maxDiff = (TF_abs(xDiff) >= TF_abs(yDiff)) ? TF_abs(xDiff) : TF_abs(yDiff);
    afbc:	|           \-> move.l 20(sp),-(sp)
    afc0:	|               jsr 15e40 <__fixsfsi>
    afc6:	|               addq.l #4,sp
    afc8:	|               move.l d0,-(sp)
    afca:	|               jsr 820c <TF_abs>
    afd0:	|               addq.l #4,sp
    afd2:	|               move.l d0,d2
    afd4:	|               move.l 16(sp),-(sp)
    afd8:	|               jsr 15e40 <__fixsfsi>
    afde:	|               addq.l #4,sp
    afe0:	|               move.l d0,-(sp)
    afe2:	|               jsr 820c <TF_abs>
    afe8:	|               addq.l #4,sp
    afea:	|               cmp.l d2,d0
    afec:	|        /----- bgt.s b010 <walkMe+0x132>
    afee:	|        |      move.l 20(sp),-(sp)
    aff2:	|        |      jsr 15e40 <__fixsfsi>
    aff8:	|        |      addq.l #4,sp
    affa:	|        |      move.l d0,-(sp)
    affc:	|        |      jsr 820c <TF_abs>
    b002:	|        |      addq.l #4,sp
    b004:	|        |      move.l d0,-(sp)
    b006:	|        |      jsr 15ea8 <__floatsisf>
    b00c:	|        |      addq.l #4,sp
    b00e:	|        |  /-- bra.s b030 <walkMe+0x152>
    b010:	|        \--|-> move.l 16(sp),-(sp)
    b014:	|           |   jsr 15e40 <__fixsfsi>
    b01a:	|           |   addq.l #4,sp
    b01c:	|           |   move.l d0,-(sp)
    b01e:	|           |   jsr 820c <TF_abs>
    b024:	|           |   addq.l #4,sp
    b026:	|           |   move.l d0,-(sp)
    b028:	|           |   jsr 15ea8 <__floatsisf>
    b02e:	|           |   addq.l #4,sp
    b030:	|           \-> move.l d0,12(sp)

		if (TF_abs(maxDiff) > s) {
    b034:	|               move.l 12(sp),-(sp)
    b038:	|               jsr 15e40 <__fixsfsi>
    b03e:	|               addq.l #4,sp
    b040:	|               move.l d0,-(sp)
    b042:	|               jsr 820c <TF_abs>
    b048:	|               addq.l #4,sp
    b04a:	|               move.l d0,-(sp)
    b04c:	|               jsr 15ea8 <__floatsisf>
    b052:	|               addq.l #4,sp
    b054:	|               move.l d0,-(sp)
    b056:	|               move.l 28(sp),-(sp)
    b05a:	|               jsr 160ce <__ltsf2>
    b060:	|               addq.l #8,sp
    b062:	|               tst.l d0
    b064:	|        /----- bge.w b116 <walkMe+0x238>
			if (thisPerson->spinning) {
    b068:	|        |      movea.l 32(sp),a0
    b06c:	|        |      move.w 66(a0),d0
    b070:	|        |  /-- beq.s b08e <walkMe+0x1b0>
				spinStep(thisPerson);
    b072:	|        |  |   move.l 32(sp),-(sp)
    b076:	|        |  |   jsr ac7e <spinStep>
    b07c:	|        |  |   addq.l #4,sp
				setFrames(thisPerson, ANI_WALK);
    b07e:	|        |  |   pea 1 <_start+0x1>
    b082:	|        |  |   move.l 36(sp),-(sp)
    b086:	|        |  |   jsr 7026 <setFrames>
    b08c:	|        |  |   addq.l #8,sp
			}
			s = maxDiff / s;
    b08e:	|        |  \-> move.l 24(sp),-(sp)
    b092:	|        |      move.l 16(sp),-(sp)
    b096:	|        |      jsr 15d54 <__divsf3>
    b09c:	|        |      addq.l #8,sp
    b09e:	|        |      move.l d0,24(sp)
			if (move)
    b0a2:	|        |      tst.w 10(sp)
    b0a6:	|        |  /-- beq.s b110 <walkMe+0x232>
				moveAndScale(thisPerson,
							 thisPerson->x + xDiff / s,
							 thisPerson->y + yDiff / (s * 2));
    b0a8:	|        |  |   movea.l 32(sp),a0
    b0ac:	|        |  |   move.l 4(a0),d2
    b0b0:	|        |  |   move.l 24(sp),d0
    b0b4:	|        |  |   move.l d0,-(sp)
    b0b6:	|        |  |   move.l d0,-(sp)
    b0b8:	|        |  |   jsr 15c5a <__addsf3>
    b0be:	|        |  |   addq.l #8,sp
    b0c0:	|        |  |   move.l d0,-(sp)
    b0c2:	|        |  |   move.l 20(sp),-(sp)
    b0c6:	|        |  |   jsr 15d54 <__divsf3>
    b0cc:	|        |  |   addq.l #8,sp
				moveAndScale(thisPerson,
    b0ce:	|        |  |   move.l d0,-(sp)
    b0d0:	|        |  |   move.l d2,-(sp)
    b0d2:	|        |  |   jsr 15c5a <__addsf3>
    b0d8:	|        |  |   addq.l #8,sp
    b0da:	|        |  |   move.l d0,d2
							 thisPerson->x + xDiff / s,
    b0dc:	|        |  |   movea.l 32(sp),a0
    b0e0:	|        |  |   move.l (a0),d3
    b0e2:	|        |  |   move.l 24(sp),-(sp)
    b0e6:	|        |  |   move.l 24(sp),-(sp)
    b0ea:	|        |  |   jsr 15d54 <__divsf3>
    b0f0:	|        |  |   addq.l #8,sp
				moveAndScale(thisPerson,
    b0f2:	|        |  |   move.l d0,-(sp)
    b0f4:	|        |  |   move.l d3,-(sp)
    b0f6:	|        |  |   jsr 15c5a <__addsf3>
    b0fc:	|        |  |   addq.l #8,sp
    b0fe:	|        |  |   move.l d2,-(sp)
    b100:	|        |  |   move.l d0,-(sp)
    b102:	|        |  |   move.l 40(sp),-(sp)
    b106:	|        |  |   jsr 9d64 <moveAndScale>
    b10c:	|        |  |   lea 12(sp),sp
			return TRUE;
    b110:	|        |  \-> moveq #1,d0
    b112:	|  /-----|----- bra.w b1c4 <walkMe+0x2e6>
		}

		if (thisPerson->inPoly == -1) {
    b116:	|  |     \----> movea.l 32(sp),a0
    b11a:	|  |            move.l 56(a0),d0
    b11e:	|  |            moveq #-1,d1
    b120:	|  |            cmp.l d0,d1
    b122:	|  |        /-- bne.s b15a <walkMe+0x27c>
			if (thisPerson->directionWhenDoneWalking != -1) {
    b124:	|  |        |   movea.l 32(sp),a0
    b128:	|  |        |   move.l 110(a0),d0
    b12c:	|  |        |   moveq #-1,d1
    b12e:	|  |        |   cmp.l d0,d1
    b130:	|  |  /-----|-- beq.s b16e <walkMe+0x290>
				thisPerson->wantAngle = thisPerson->directionWhenDoneWalking;
    b132:	|  |  |     |   movea.l 32(sp),a0
    b136:	|  |  |     |   move.l 110(a0),d0
    b13a:	|  |  |     |   movea.l 32(sp),a0
    b13e:	|  |  |     |   move.l d0,96(a0)
				thisPerson->spinning = TRUE;
    b142:	|  |  |     |   movea.l 32(sp),a0
    b146:	|  |  |     |   move.w #1,66(a0)
				spinStep(thisPerson);
    b14c:	|  |  |     |   move.l 32(sp),-(sp)
    b150:	|  |  |     |   jsr ac7e <spinStep>
    b156:	|  |  |     |   addq.l #4,sp
			}
			break;
    b158:	|  |  +-----|-- bra.s b16e <walkMe+0x290>
		}
		if (!doBorderStuff(thisPerson)) break;
    b15a:	|  |  |     \-> move.l 32(sp),-(sp)
    b15e:	|  |  |         jsr 897e <doBorderStuff>
    b164:	|  |  |         addq.l #4,sp
    b166:	|  |  |         tst.w d0
    b168:	|  |  |  /----- beq.s b172 <walkMe+0x294>
		xDiff = thisPerson->thisStepX - thisPerson->x;
    b16a:	\--|--|--|----- bra.w aefe <walkMe+0x20>
			break;
    b16e:	   |  \--|----> nop
    b170:	   |     |  /-- bra.s b174 <walkMe+0x296>
		if (!doBorderStuff(thisPerson)) break;
    b172:	   |     \--|-> nop
	}

	thisPerson->walking = FALSE;
    b174:	   |        \-> movea.l 32(sp),a0
    b178:	   |            clr.w 64(a0)
	setFrames(thisPerson, ANI_STAND);
    b17c:	   |            clr.l -(sp)
    b17e:	   |            move.l 36(sp),-(sp)
    b182:	   |            jsr 7026 <setFrames>
    b188:	   |            addq.l #8,sp
	moveAndScale(thisPerson,
				 thisPerson->walkToX,
				 thisPerson->walkToY);
    b18a:	   |            movea.l 32(sp),a0
    b18e:	   |            move.l 44(a0),d0
	moveAndScale(thisPerson,
    b192:	   |            move.l d0,-(sp)
    b194:	   |            jsr 15ea8 <__floatsisf>
    b19a:	   |            addq.l #4,sp
    b19c:	   |            move.l d0,d2
				 thisPerson->walkToX,
    b19e:	   |            movea.l 32(sp),a0
    b1a2:	   |            move.l 40(a0),d0
	moveAndScale(thisPerson,
    b1a6:	   |            move.l d0,-(sp)
    b1a8:	   |            jsr 15ea8 <__floatsisf>
    b1ae:	   |            addq.l #4,sp
    b1b0:	   |            move.l d2,-(sp)
    b1b2:	   |            move.l d0,-(sp)
    b1b4:	   |            move.l 40(sp),-(sp)
    b1b8:	   |            jsr 9d64 <moveAndScale>
    b1be:	   |            lea 12(sp),sp
	return FALSE;
    b1c2:	   |            clr.w d0
}
    b1c4:	   \----------> move.l (sp)+,d2
    b1c6:	                move.l (sp)+,d3
    b1c8:	                lea 20(sp),sp
    b1cc:	                rts

0000b1ce <clearStackLib>:
};

int stackLibTotal = 0;
struct stackLibrary * stackLib = NULL;

void clearStackLib () {
    b1ce:	       subq.l #8,sp
    b1d0:	       move.l a6,-(sp)
	struct stackLibrary * k;
	while (stackLib) {
    b1d2:	   /-- bra.s b202 <clearStackLib+0x34>
		k = stackLib;
    b1d4:	/--|-> move.l 1b286 <stackLib>,8(sp)
		stackLib = stackLib -> next;
    b1dc:	|  |   movea.l 1b286 <stackLib>,a0
    b1e2:	|  |   move.l 4(a0),d0
    b1e6:	|  |   move.l d0,1b286 <stackLib>
		FreeVec(k);
    b1ec:	|  |   move.l 8(sp),4(sp)
    b1f2:	|  |   move.l 1b1a2 <SysBase>,d0
    b1f8:	|  |   movea.l d0,a6
    b1fa:	|  |   movea.l 4(sp),a1
    b1fe:	|  |   jsr -690(a6)
	while (stackLib) {
    b202:	|  \-> move.l 1b286 <stackLib>,d0
    b208:	\----- bne.s b1d4 <clearStackLib+0x6>
	}
	stackLibTotal = 0;
    b20a:	       clr.l 1b282 <stackLibTotal>
}
    b210:	       nop
    b212:	       movea.l (sp)+,a6
    b214:	       addq.l #8,sp
    b216:	       rts

0000b218 <loadGame>:
	}

	return buildFunc;
}

BOOL loadGame (char * fname) {
    b218:	          lea -128(sp),sp
    b21c:	          movem.l d2-d3/a6,-(sp)
	BPTR fp;
	FILETIME savedGameTime;
	int a;

	while (allRunningFunctions) finishFunction (allRunningFunctions);
    b220:	      /-- bra.s b232 <loadGame+0x1a>
    b222:	   /--|-> move.l 1b13a <allRunningFunctions>,d0
    b228:	   |  |   move.l d0,-(sp)
    b22a:	   |  |   jsr 4616 <finishFunction>
    b230:	   |  |   addq.l #4,sp
    b232:	   |  \-> move.l 1b13a <allRunningFunctions>,d0
    b238:	   \----- bne.s b222 <loadGame+0xa>

	fp = openAndVerify (fname, 'S', 'A', ERROR_GAME_LOAD_NO, &ssgVersion);
    b23a:	          pea 1b28a <ssgVersion>
    b240:	          pea 17a18 <PutChar+0x14d8>
    b246:	          pea 41 <_start+0x41>
    b24a:	          pea 53 <_start+0x53>
    b24e:	          move.l 160(sp),-(sp)
    b252:	          jsr 53cc <openAndVerify>
    b258:	          lea 20(sp),sp
    b25c:	          move.l d0,112(sp)
	if (fp == NULL) return FALSE;
    b260:	      /-- bne.s b268 <loadGame+0x50>
    b262:	      |   clr.w d0
    b264:	/-----|-- bra.w b50e <loadGame+0x2f6>

	unsigned int bytes_read = Read( fp, &savedGameTime, sizeof (FILETIME));
    b268:	|     \-> move.l 112(sp),108(sp)
    b26e:	|         lea 140(sp),a0
    b272:	|         lea -126(a0),a0
    b276:	|         move.l a0,120(sp)
    b27a:	|         moveq #8,d0
    b27c:	|         move.l d0,116(sp)
    b280:	|         move.l 1b1aa <DOSBase>,d0
    b286:	|         movea.l d0,a6
    b288:	|         move.l 108(sp),d1
    b28c:	|         move.l 120(sp),d2
    b290:	|         move.l 116(sp),d3
    b294:	|         jsr -42(a6)
    b298:	|         move.l d0,132(sp)
    b29c:	|         move.l 132(sp),d0
    b2a0:	|         move.l d0,128(sp)
	
	if (bytes_read != sizeof (FILETIME)) {
    b2a4:	|         moveq #8,d0
    b2a6:	|         cmp.l 128(sp),d0
    b2aa:	|     /-- beq.s b2ba <loadGame+0xa2>
		KPrintF("Reading error in loadGame.\n");
    b2ac:	|     |   pea 17a39 <PutChar+0x14f9>
    b2b2:	|     |   jsr 15bf0 <KPrintF>
    b2b8:	|     |   addq.l #4,sp
	}

	if (savedGameTime.dwLowDateTime != fileTime.dwLowDateTime ||
    b2ba:	|     \-> move.l 14(sp),d1
    b2be:	|         move.l 1b144 <fileTime>,d0
    b2c4:	|         cmp.l d1,d0
    b2c6:	|     /-- bne.s b2d6 <loadGame+0xbe>
		savedGameTime.dwHighDateTime != fileTime.dwHighDateTime) {
    b2c8:	|     |   move.l 18(sp),d1
    b2cc:	|     |   move.l 1b148 <fileTime+0x4>,d0
	if (savedGameTime.dwLowDateTime != fileTime.dwLowDateTime ||
    b2d2:	|     |   cmp.l d1,d0
    b2d4:	|  /--|-- beq.s b2f6 <loadGame+0xde>
		KPrintF("loadgame:", ERROR_GAME_LOAD_WRONG, fname);
    b2d6:	|  |  \-> move.l 144(sp),-(sp)
    b2da:	|  |      pea 17a55 <PutChar+0x1515>
    b2e0:	|  |      pea 17b1c <PutChar+0x15dc>
    b2e6:	|  |      jsr 15bf0 <KPrintF>
    b2ec:	|  |      lea 12(sp),sp
		return FALSE; 
    b2f0:	|  |      clr.w d0
    b2f2:	+--|----- bra.w b50e <loadGame+0x2f6>
	}

	// DON'T ADD ANYTHING NEW BEFORE THIS POINT!

	allowAnyFilename = FGetC (fp);
    b2f6:	|  \----> move.l 112(sp),124(sp)
    b2fc:	|         move.l 1b1aa <DOSBase>,d0
    b302:	|         movea.l d0,a6
    b304:	|         move.l 124(sp),d1
    b308:	|         jsr -306(a6)
    b30c:	|         move.l d0,136(sp)
    b310:	|         move.l 136(sp),d0
    b314:	|         move.l d0,d0
    b316:	|         move.w d0,1aa00 <allowAnyFilename>
	captureAllKeys = FGetC (fp);
    b31c:	|         move.l 112(sp),100(sp)
    b322:	|         move.l 1b1aa <DOSBase>,d0
    b328:	|         movea.l d0,a6
    b32a:	|         move.l 100(sp),d1
    b32e:	|         jsr -306(a6)
    b332:	|         move.l d0,96(sp)
    b336:	|         move.l 96(sp),d0
    b33a:	|         move.l d0,d0
    b33c:	|         move.w d0,1b142 <captureAllKeys>
	FGetC (fp); // updateDisplay (part of movie playing)
    b342:	|         move.l 112(sp),92(sp)
    b348:	|         move.l 1b1aa <DOSBase>,d0
    b34e:	|         movea.l d0,a6
    b350:	|         move.l 92(sp),d1
    b354:	|         jsr -306(a6)
    b358:	|         move.l d0,88(sp)

	BOOL fontLoaded = FGetC (fp);
    b35c:	|         move.l 112(sp),84(sp)
    b362:	|         move.l 1b1aa <DOSBase>,d0
    b368:	|         movea.l d0,a6
    b36a:	|         move.l 84(sp),d1
    b36e:	|         jsr -306(a6)
    b372:	|         move.l d0,80(sp)
    b376:	|         move.l 80(sp),d0
    b37a:	|         move.w d0,78(sp)
	int fontNum;
	char * charOrder;
	if (fontLoaded) {
    b37e:	|     /-- beq.s b3b2 <loadGame+0x19a>
		fontNum = get2bytes (fp);
    b380:	|     |   move.l 112(sp),-(sp)
    b384:	|     |   jsr 6bc <get2bytes>
    b38a:	|     |   addq.l #4,sp
    b38c:	|     |   move.l d0,74(sp)
		fontHeight = get2bytes (fp);		
    b390:	|     |   move.l 112(sp),-(sp)
    b394:	|     |   jsr 6bc <get2bytes>
    b39a:	|     |   addq.l #4,sp
    b39c:	|     |   move.l d0,1b2f2 <fontHeight>
		charOrder = readString(fp);		
    b3a2:	|     |   move.l 112(sp),-(sp)
    b3a6:	|     |   jsr b02 <readString>
    b3ac:	|     |   addq.l #4,sp
    b3ae:	|     |   move.l d0,104(sp)
	}
	//loadFont (fontNum, charOrder, fontHeight); Amiga Todo: Implement Graphics stuff
	FreeVec(charOrder);
    b3b2:	|     \-> move.l 104(sp),70(sp)
    b3b8:	|         move.l 1b1a2 <SysBase>,d0
    b3be:	|         movea.l d0,a6
    b3c0:	|         movea.l 70(sp),a1
    b3c4:	|         jsr -690(a6)
	
	fontSpace = getSigned (fp);
    b3c8:	|         move.l 112(sp),-(sp)
    b3cc:	|         jsr 854 <getSigned>
    b3d2:	|         addq.l #4,sp
    b3d4:	|         move.w d0,1b0a8 <fontSpace>

	killAllPeople ();
    b3da:	|         jsr 9a06 <killAllPeople>
	killAllRegions ();
    b3e0:	|         jsr 14440 <killAllRegions>

	int camerX = get2bytes (fp);
    b3e6:	|         move.l 112(sp),-(sp)
    b3ea:	|         jsr 6bc <get2bytes>
    b3f0:	|         addq.l #4,sp
    b3f2:	|         move.l d0,66(sp)
	int camerY = get2bytes (fp);
    b3f6:	|         move.l 112(sp),-(sp)
    b3fa:	|         jsr 6bc <get2bytes>
    b400:	|         addq.l #4,sp
    b402:	|         move.l d0,62(sp)
	FLOAT camerZ;
	camerZ = getFloat(fp);
    b406:	|         move.l 112(sp),-(sp)
    b40a:	|         jsr 7d8 <getFloat>
    b410:	|         addq.l #4,sp
    b412:	|         move.l d0,58(sp)

	brightnessLevel = FGetC (fp);
    b416:	|         move.l 112(sp),54(sp)
    b41c:	|         move.l 1b1aa <DOSBase>,d0
    b422:	|         movea.l d0,a6
    b424:	|         move.l 54(sp),d1
    b428:	|         jsr -306(a6)
    b42c:	|         move.l d0,50(sp)
    b430:	|         move.l 50(sp),d0
    b434:	|         move.l d0,d0
    b436:	|         move.b d0,1ab1a <brightnessLevel>

	loadHandlers (fp);
    b43c:	|         move.l 112(sp),-(sp)
    b440:	|         jsr 532c <loadHandlers>
    b446:	|         addq.l #4,sp
	loadRegions (fp);
    b448:	|         move.l 112(sp),-(sp)
    b44c:	|         jsr 1449c <loadRegions>
    b452:	|         addq.l #4,sp

	mouseCursorAnim = AllocVec( sizeof( struct personaAnimation), MEMF_ANY);
    b454:	|         moveq #12,d0
    b456:	|         move.l d0,46(sp)
    b45a:	|         clr.l 42(sp)
    b45e:	|         move.l 1b1a2 <SysBase>,d0
    b464:	|         movea.l d0,a6
    b466:	|         move.l 46(sp),d0
    b46a:	|         move.l 42(sp),d1
    b46e:	|         jsr -684(a6)
    b472:	|         move.l d0,38(sp)
    b476:	|         move.l 38(sp),d0
    b47a:	|         move.l d0,1b0aa <mouseCursorAnim>
	if (! mouseCursorAnim) {
    b480:	|         move.l 1b0aa <mouseCursorAnim>,d0
    b486:	|     /-- bne.s b49a <loadGame+0x282>
		KPrintF("loadGame: Cannot allocate memory");
    b488:	|     |   pea 17b26 <PutChar+0x15e6>
    b48e:	|     |   jsr 15bf0 <KPrintF>
    b494:	|     |   addq.l #4,sp
		return FALSE;
    b496:	|     |   clr.w d0
    b498:	+-----|-- bra.s b50e <loadGame+0x2f6>
			languageNum = selectedLanguage;
			setFileIndices (NULL, gameSettings.numLanguages, languageNum);
		}
	}

	nosnapshot ();
    b49a:	|     \-> jsr c390 <nosnapshot>
	if (FGetC (fp)) {
    b4a0:	|         move.l 112(sp),34(sp)
    b4a6:	|         move.l 1b1aa <DOSBase>,d0
    b4ac:	|         movea.l d0,a6
    b4ae:	|         move.l 34(sp),d1
    b4b2:	|         jsr -306(a6)
    b4b6:	|         move.l d0,30(sp)
    b4ba:	|         move.l 30(sp),d0
    b4be:	|     /-- beq.s b4d4 <loadGame+0x2bc>
		if (! restoreSnapshot (fp)) return FALSE;
    b4c0:	|     |   move.l 112(sp),-(sp)
    b4c4:	|     |   jsr c410 <restoreSnapshot>
    b4ca:	|     |   addq.l #4,sp
    b4cc:	|     |   tst.w d0
    b4ce:	|     +-- bne.s b4d4 <loadGame+0x2bc>
    b4d0:	|     |   clr.w d0
    b4d2:	+-----|-- bra.s b50e <loadGame+0x2f6>
	}

	Close (fp);
    b4d4:	|     \-> move.l 112(sp),26(sp)
    b4da:	|         move.l 1b1aa <DOSBase>,d0
    b4e0:	|         movea.l d0,a6
    b4e2:	|         move.l 26(sp),d1
    b4e6:	|         jsr -36(a6)
    b4ea:	|         move.l d0,22(sp)
	clearStackLib ();
    b4ee:	|         jsr b1ce <clearStackLib>

	cameraX = camerX;
    b4f4:	|         move.l 66(sp),1b2b4 <cameraX>
	cameraY = camerY;
    b4fc:	|         move.l 62(sp),1b2b8 <cameraY>
	cameraZoom = camerZ;
    b504:	|         move.l 58(sp),1ab42 <cameraZoom>

	return TRUE;
    b50c:	|         moveq #1,d0
}
    b50e:	\-------> movem.l (sp)+,d2-d3/a6
    b512:	          lea 128(sp),sp
    b516:	          rts

0000b518 <saveFunction>:

void saveFunction (struct loadedFunction * fun, BPTR fp) {
    b518:	   /-> lea -64(sp),sp
    b51c:	   |   move.l a6,-(sp)
    b51e:	   |   move.l d2,-(sp)
	int a;
	put2bytes (fun -> originalNumber, fp);
    b520:	   |   movea.l 76(sp),a0
    b524:	   |   move.l (a0),d0
    b526:	   |   move.l 80(sp),-(sp)
    b52a:	   |   move.l d0,-(sp)
    b52c:	   |   jsr 8d0 <put2bytes>
    b532:	   |   addq.l #8,sp
	if (fun -> calledBy) {
    b534:	   |   movea.l 76(sp),a0
    b538:	   |   move.l 40(a0),d0
    b53c:	/--|-- beq.s b578 <saveFunction+0x60>
		FPutC (fp, 1);
    b53e:	|  |   move.l 80(sp),52(sp)
    b544:	|  |   moveq #1,d0
    b546:	|  |   move.l d0,48(sp)
    b54a:	|  |   move.l 1b1aa <DOSBase>,d0
    b550:	|  |   movea.l d0,a6
    b552:	|  |   move.l 52(sp),d1
    b556:	|  |   move.l 48(sp),d2
    b55a:	|  |   jsr -312(a6)
    b55e:	|  |   move.l d0,44(sp)
		saveFunction (fun -> calledBy, fp);
    b562:	|  |   movea.l 76(sp),a0
    b566:	|  |   move.l 40(a0),d0
    b56a:	|  |   move.l 80(sp),-(sp)
    b56e:	|  |   move.l d0,-(sp)
    b570:	|  \-- jsr b518 <saveFunction>(pc)
    b574:	|      addq.l #8,sp
    b576:	|  /-- bra.s b59a <saveFunction+0x82>
	} else {
		FPutC (fp, 0);
    b578:	\--|-> move.l 80(sp),64(sp)
    b57e:	   |   clr.l 60(sp)
    b582:	   |   move.l 1b1aa <DOSBase>,d0
    b588:	   |   movea.l d0,a6
    b58a:	   |   move.l 64(sp),d1
    b58e:	   |   move.l 60(sp),d2
    b592:	   |   jsr -312(a6)
    b596:	   |   move.l d0,56(sp)
	}
	put4bytes (fun -> timeLeft, fp);
    b59a:	   \-> movea.l 76(sp),a0
    b59e:	       move.l 12(a0),d0
    b5a2:	       move.l 80(sp),-(sp)
    b5a6:	       move.l d0,-(sp)
    b5a8:	       jsr 958 <put4bytes>
    b5ae:	       addq.l #8,sp
	put2bytes (fun -> runThisLine, fp);
    b5b0:	       movea.l 76(sp),a0
    b5b4:	       move.l 36(a0),d0
    b5b8:	       move.l 80(sp),-(sp)
    b5bc:	       move.l d0,-(sp)
    b5be:	       jsr 8d0 <put2bytes>
    b5c4:	       addq.l #8,sp
	FPutC (fp, fun -> cancelMe);
    b5c6:	       move.l 80(sp),40(sp)
    b5cc:	       movea.l 76(sp),a0
    b5d0:	       move.w 54(a0),d0
    b5d4:	       movea.w d0,a0
    b5d6:	       move.l a0,36(sp)
    b5da:	       move.l 1b1aa <DOSBase>,d0
    b5e0:	       movea.l d0,a6
    b5e2:	       move.l 40(sp),d1
    b5e6:	       move.l 36(sp),d2
    b5ea:	       jsr -312(a6)
    b5ee:	       move.l d0,32(sp)
	FPutC (fp, fun -> returnSomething);
    b5f2:	       move.l 80(sp),28(sp)
    b5f8:	       movea.l 76(sp),a0
    b5fc:	       move.w 48(a0),d0
    b600:	       movea.w d0,a0
    b602:	       move.l a0,24(sp)
    b606:	       move.l 1b1aa <DOSBase>,d0
    b60c:	       movea.l d0,a6
    b60e:	       move.l 28(sp),d1
    b612:	       move.l 24(sp),d2
    b616:	       jsr -312(a6)
    b61a:	       move.l d0,20(sp)
	FPutC (fp, fun -> isSpeech);
    b61e:	       move.l 80(sp),16(sp)
    b624:	       movea.l 76(sp),a0
    b628:	       move.w 50(a0),d0
    b62c:	       movea.w d0,a0
    b62e:	       move.l a0,12(sp)
    b632:	       move.l 1b1aa <DOSBase>,d0
    b638:	       movea.l d0,a6
    b63a:	       move.l 16(sp),d1
    b63e:	       move.l 12(sp),d2
    b642:	       jsr -312(a6)
    b646:	       move.l d0,8(sp)
	saveVariable (&fun -> reg, fp);
    b64a:	       moveq #28,d0
    b64c:	       add.l 76(sp),d0
    b650:	       move.l 80(sp),-(sp)
    b654:	       move.l d0,-(sp)
    b656:	       jsr bdd4 <saveVariable>
    b65c:	       addq.l #8,sp

	if (fun -> freezerLevel) {
    b65e:	       movea.l 76(sp),a0
    b662:	       move.b 56(a0),d0
    b666:	   /-- beq.s b676 <saveFunction+0x15e>
		KPrintF(ERROR_GAME_SAVE_FROZEN);		
    b668:	   |   pea 17b47 <PutChar+0x1607>
    b66e:	   |   jsr 15bf0 <KPrintF>
    b674:	   |   addq.l #4,sp
	}
	saveStack (fun -> stack, fp);
    b676:	   \-> movea.l 76(sp),a0
    b67a:	       move.l 24(a0),d0
    b67e:	       move.l 80(sp),-(sp)
    b682:	       move.l d0,-(sp)
    b684:	       jsr bc48 <saveStack>
    b68a:	       addq.l #8,sp
	for (a = 0; a < fun -> numLocals; a ++) {
    b68c:	       clr.l 68(sp)
    b690:	   /-- bra.s b6b4 <saveFunction+0x19c>
		saveVariable (& (fun -> localVars[a]), fp);
    b692:	/--|-> movea.l 76(sp),a0
    b696:	|  |   move.l 20(a0),d1
    b69a:	|  |   move.l 68(sp),d0
    b69e:	|  |   lsl.l #3,d0
    b6a0:	|  |   add.l d1,d0
    b6a2:	|  |   move.l 80(sp),-(sp)
    b6a6:	|  |   move.l d0,-(sp)
    b6a8:	|  |   jsr bdd4 <saveVariable>
    b6ae:	|  |   addq.l #8,sp
	for (a = 0; a < fun -> numLocals; a ++) {
    b6b0:	|  |   addq.l #1,68(sp)
    b6b4:	|  \-> movea.l 76(sp),a0
    b6b8:	|      move.l 8(a0),d0
    b6bc:	|      cmp.l 68(sp),d0
    b6c0:	\----- bgt.s b692 <saveFunction+0x17a>
	}
}
    b6c2:	       nop
    b6c4:	       nop
    b6c6:	       move.l (sp)+,d2
    b6c8:	       movea.l (sp)+,a6
    b6ca:	       lea 64(sp),sp
    b6ce:	       rts

0000b6d0 <saveGame>:

BOOL saveGame (char * fname) {
    b6d0:	          lea -272(sp),sp
    b6d4:	          movem.l d2-d3/a6,-(sp)
	int a;

	BPTR fp = Open( fname, MODE_NEWFILE);
    b6d8:	          move.l 288(sp),268(sp)
    b6de:	          move.l #1006,264(sp)
    b6e6:	          move.l 1b1aa <DOSBase>,d0
    b6ec:	          movea.l d0,a6
    b6ee:	          move.l 268(sp),d1
    b6f2:	          move.l 264(sp),d2
    b6f6:	          jsr -30(a6)
    b6fa:	          move.l d0,260(sp)
    b6fe:	          move.l 260(sp),d0
    b702:	          move.l d0,256(sp)
	if (fp == NULL) {
    b706:	      /-- bne.s b71c <saveGame+0x4c>
		KPrintF("saveGame: Cannot create file");
    b708:	      |   pea 17b69 <PutChar+0x1629>
    b70e:	      |   jsr 15bf0 <KPrintF>
    b714:	      |   addq.l #4,sp
		return FALSE;
    b716:	      |   clr.w d0
    b718:	/-----|-- bra.w bc3e <saveGame+0x56e>
	}

	Write( fp, &"SLUDSA", 6);
    b71c:	|     \-> move.l 256(sp),252(sp)
    b722:	|         move.l #97158,248(sp)
    b72a:	|         moveq #6,d0
    b72c:	|         move.l d0,244(sp)
    b730:	|         move.l 1b1aa <DOSBase>,d0
    b736:	|         movea.l d0,a6
    b738:	|         move.l 252(sp),d1
    b73c:	|         move.l 248(sp),d2
    b740:	|         move.l 244(sp),d3
    b744:	|         jsr -48(a6)
    b748:	|         move.l d0,240(sp)
	FPutC (fp, 0);
    b74c:	|         move.l 256(sp),236(sp)
    b752:	|         clr.l 232(sp)
    b756:	|         move.l 1b1aa <DOSBase>,d0
    b75c:	|         movea.l d0,a6
    b75e:	|         move.l 236(sp),d1
    b762:	|         move.l 232(sp),d2
    b766:	|         jsr -312(a6)
    b76a:	|         move.l d0,228(sp)
	FPutC (fp, 0);
    b76e:	|         move.l 256(sp),224(sp)
    b774:	|         clr.l 220(sp)
    b778:	|         move.l 1b1aa <DOSBase>,d0
    b77e:	|         movea.l d0,a6
    b780:	|         move.l 224(sp),d1
    b784:	|         move.l 220(sp),d2
    b788:	|         jsr -312(a6)
    b78c:	|         move.l d0,216(sp)
	FPutC (fp, MAJOR_VERSION);
    b790:	|         move.l 256(sp),212(sp)
    b796:	|         moveq #2,d0
    b798:	|         move.l d0,208(sp)
    b79c:	|         move.l 1b1aa <DOSBase>,d0
    b7a2:	|         movea.l d0,a6
    b7a4:	|         move.l 212(sp),d1
    b7a8:	|         move.l 208(sp),d2
    b7ac:	|         jsr -312(a6)
    b7b0:	|         move.l d0,204(sp)
	FPutC (fp, MINOR_VERSION);
    b7b4:	|         move.l 256(sp),200(sp)
    b7ba:	|         moveq #2,d0
    b7bc:	|         move.l d0,196(sp)
    b7c0:	|         move.l 1b1aa <DOSBase>,d0
    b7c6:	|         movea.l d0,a6
    b7c8:	|         move.l 200(sp),d1
    b7cc:	|         move.l 196(sp),d2
    b7d0:	|         jsr -312(a6)
    b7d4:	|         move.l d0,192(sp)

	Write ( fp, &fileTime, sizeof(FILETIME));
    b7d8:	|         move.l 256(sp),188(sp)
    b7de:	|         move.l #110916,184(sp)
    b7e6:	|         moveq #8,d0
    b7e8:	|         move.l d0,180(sp)
    b7ec:	|         move.l 1b1aa <DOSBase>,d0
    b7f2:	|         movea.l d0,a6
    b7f4:	|         move.l 188(sp),d1
    b7f8:	|         move.l 184(sp),d2
    b7fc:	|         move.l 180(sp),d3
    b800:	|         jsr -48(a6)
    b804:	|         move.l d0,176(sp)

	// DON'T ADD ANYTHING NEW BEFORE THIS POINT!

	FPutC (fp, allowAnyFilename);
    b808:	|         move.l 256(sp),172(sp)
    b80e:	|         move.w 1aa00 <allowAnyFilename>,d0
    b814:	|         movea.w d0,a0
    b816:	|         move.l a0,168(sp)
    b81a:	|         move.l 1b1aa <DOSBase>,d0
    b820:	|         movea.l d0,a6
    b822:	|         move.l 172(sp),d1
    b826:	|         move.l 168(sp),d2
    b82a:	|         jsr -312(a6)
    b82e:	|         move.l d0,164(sp)
	FPutC (fp, captureAllKeys);
    b832:	|         move.l 256(sp),160(sp)
    b838:	|         move.w 1b142 <captureAllKeys>,d0
    b83e:	|         movea.w d0,a0
    b840:	|         move.l a0,156(sp)
    b844:	|         move.l 1b1aa <DOSBase>,d0
    b84a:	|         movea.l d0,a6
    b84c:	|         move.l 160(sp),d1
    b850:	|         move.l 156(sp),d2
    b854:	|         jsr -312(a6)
    b858:	|         move.l d0,152(sp)
	FPutC (fp, TRUE); // updateDisplay
    b85c:	|         move.l 256(sp),148(sp)
    b862:	|         moveq #1,d0
    b864:	|         move.l d0,144(sp)
    b868:	|         move.l 1b1aa <DOSBase>,d0
    b86e:	|         movea.l d0,a6
    b870:	|         move.l 148(sp),d1
    b874:	|         move.l 144(sp),d2
    b878:	|         jsr -312(a6)
    b87c:	|         move.l d0,140(sp)
	FPutC (fp, fontTableSize>0);
    b880:	|         move.l 256(sp),136(sp)
    b886:	|         move.l 1b2fe <fontTableSize>,d0
    b88c:	|         sgt d0
    b88e:	|         neg.b d0
    b890:	|         move.b d0,d0
    b892:	|         andi.l #255,d0
    b898:	|         move.l d0,132(sp)
    b89c:	|         move.l 1b1aa <DOSBase>,d0
    b8a2:	|         movea.l d0,a6
    b8a4:	|         move.l 136(sp),d1
    b8a8:	|         move.l 132(sp),d2
    b8ac:	|         jsr -312(a6)
    b8b0:	|         move.l d0,128(sp)

	if (fontTableSize>0) {
    b8b4:	|         move.l 1b2fe <fontTableSize>,d0
    b8ba:	|     /-- ble.s b8f8 <saveGame+0x228>
		put2bytes (loadedFontNum, fp);
    b8bc:	|     |   move.l 1b2f6 <loadedFontNum>,d0
    b8c2:	|     |   move.l 256(sp),-(sp)
    b8c6:	|     |   move.l d0,-(sp)
    b8c8:	|     |   jsr 8d0 <put2bytes>
    b8ce:	|     |   addq.l #8,sp
		put2bytes (fontHeight, fp);
    b8d0:	|     |   move.l 1b2f2 <fontHeight>,d0
    b8d6:	|     |   move.l 256(sp),-(sp)
    b8da:	|     |   move.l d0,-(sp)
    b8dc:	|     |   jsr 8d0 <put2bytes>
    b8e2:	|     |   addq.l #8,sp
		writeString(fontOrderString, fp);
    b8e4:	|     |   move.l 1b2fa <fontOrderString>,d0
    b8ea:	|     |   move.l 256(sp),-(sp)
    b8ee:	|     |   move.l d0,-(sp)
    b8f0:	|     |   jsr bd8 <writeString>
    b8f6:	|     |   addq.l #8,sp
	}
	putSigned (fontSpace, fp);
    b8f8:	|     \-> move.w 1b0a8 <fontSpace>,d0
    b8fe:	|         movea.w d0,a0
    b900:	|         move.l 256(sp),-(sp)
    b904:	|         move.l a0,-(sp)
    b906:	|         jsr a9c <putSigned>
    b90c:	|         addq.l #8,sp

	// Save backdrop
	put2bytes (cameraX, fp);
    b90e:	|         move.l 1b2b4 <cameraX>,d0
    b914:	|         move.l 256(sp),-(sp)
    b918:	|         move.l d0,-(sp)
    b91a:	|         jsr 8d0 <put2bytes>
    b920:	|         addq.l #8,sp
	put2bytes (cameraY, fp);
    b922:	|         move.l 1b2b8 <cameraY>,d0
    b928:	|         move.l 256(sp),-(sp)
    b92c:	|         move.l d0,-(sp)
    b92e:	|         jsr 8d0 <put2bytes>
    b934:	|         addq.l #8,sp
	putFloat(cameraZoom, fp);
    b936:	|         move.l 1ab42 <cameraZoom>,d0
    b93c:	|         move.l 256(sp),-(sp)
    b940:	|         move.l d0,-(sp)
    b942:	|         jsr a46 <putFloat>
    b948:	|         addq.l #8,sp

	FPutC (fp, brightnessLevel);
    b94a:	|         move.l 256(sp),124(sp)
    b950:	|         move.b 1ab1a <brightnessLevel>,d0
    b956:	|         move.b d0,d0
    b958:	|         andi.l #255,d0
    b95e:	|         move.l d0,120(sp)
    b962:	|         move.l 1b1aa <DOSBase>,d0
    b968:	|         movea.l d0,a6
    b96a:	|         move.l 124(sp),d1
    b96e:	|         move.l 120(sp),d2
    b972:	|         jsr -312(a6)
    b976:	|         move.l d0,116(sp)

	// Save event handlers
	saveHandlers (fp);
    b97a:	|         move.l 256(sp),-(sp)
    b97e:	|         jsr 58b0 <saveHandlers>
    b984:	|         addq.l #4,sp

	// Save regions
	saveRegions (fp);
    b986:	|         move.l 256(sp),-(sp)
    b98a:	|         jsr 14656 <saveRegions>
    b990:	|         addq.l #4,sp

	saveAnim (mouseCursorAnim, fp);
    b992:	|         move.l 1b0aa <mouseCursorAnim>,d0
    b998:	|         move.l 256(sp),-(sp)
    b99c:	|         move.l d0,-(sp)
    b99e:	|         jsr 9f78 <saveAnim>
    b9a4:	|         addq.l #8,sp
	put2bytes (mouseCursorFrameNum, fp);
    b9a6:	|         move.l 1b0ae <mouseCursorFrameNum>,d0
    b9ac:	|         move.l 256(sp),-(sp)
    b9b0:	|         move.l d0,-(sp)
    b9b2:	|         jsr 8d0 <put2bytes>
    b9b8:	|         addq.l #8,sp

	// Save functions
	struct loadedFunction * thisFunction = allRunningFunctions;
    b9ba:	|         move.l 1b13a <allRunningFunctions>,276(sp)
	int countFunctions = 0;
    b9c2:	|         clr.l 272(sp)
	while (thisFunction) {
    b9c6:	|     /-- bra.s b9d6 <saveGame+0x306>
		countFunctions ++;
    b9c8:	|  /--|-> addq.l #1,272(sp)
		thisFunction = thisFunction -> next;
    b9cc:	|  |  |   movea.l 276(sp),a0
    b9d0:	|  |  |   move.l 44(a0),276(sp)
	while (thisFunction) {
    b9d6:	|  |  \-> tst.l 276(sp)
    b9da:	|  \----- bne.s b9c8 <saveGame+0x2f8>
	}
	put2bytes (countFunctions, fp);
    b9dc:	|         move.l 256(sp),-(sp)
    b9e0:	|         move.l 276(sp),-(sp)
    b9e4:	|         jsr 8d0 <put2bytes>
    b9ea:	|         addq.l #8,sp

	thisFunction = allRunningFunctions;
    b9ec:	|         move.l 1b13a <allRunningFunctions>,276(sp)
	while (thisFunction) {
    b9f4:	|     /-- bra.s ba10 <saveGame+0x340>
		saveFunction (thisFunction, fp);
    b9f6:	|  /--|-> move.l 256(sp),-(sp)
    b9fa:	|  |  |   move.l 280(sp),-(sp)
    b9fe:	|  |  |   jsr b518 <saveFunction>
    ba04:	|  |  |   addq.l #8,sp
		thisFunction = thisFunction -> next;
    ba06:	|  |  |   movea.l 276(sp),a0
    ba0a:	|  |  |   move.l 44(a0),276(sp)
	while (thisFunction) {
    ba10:	|  |  \-> tst.l 276(sp)
    ba14:	|  \----- bne.s b9f6 <saveGame+0x326>
	}

	for (a = 0; a < numGlobals; a ++) {
    ba16:	|         clr.l 280(sp)
    ba1a:	|     /-- bra.s ba3c <saveGame+0x36c>
		saveVariable (& globalVars[a], fp);
    ba1c:	|  /--|-> move.l 1b150 <globalVars>,d1
    ba22:	|  |  |   move.l 280(sp),d0
    ba26:	|  |  |   lsl.l #3,d0
    ba28:	|  |  |   add.l d1,d0
    ba2a:	|  |  |   move.l 256(sp),-(sp)
    ba2e:	|  |  |   move.l d0,-(sp)
    ba30:	|  |  |   jsr bdd4 <saveVariable>
    ba36:	|  |  |   addq.l #8,sp
	for (a = 0; a < numGlobals; a ++) {
    ba38:	|  |  |   addq.l #1,280(sp)
    ba3c:	|  |  \-> move.l 1b17a <numGlobals>,d0
    ba42:	|  |      cmp.l 280(sp),d0
    ba46:	|  \----- bgt.s ba1c <saveGame+0x34c>
	}

	savePeople (fp);
    ba48:	|         move.l 256(sp),-(sp)
    ba4c:	|         jsr a0a0 <savePeople>
    ba52:	|         addq.l #4,sp

	if (currentFloor -> numPolygons) {
    ba54:	|         movea.l 1b30e <currentFloor>,a0
    ba5a:	|         move.l 8(a0),d0
    ba5e:	|  /----- beq.s ba9c <saveGame+0x3cc>
		FPutC (fp, 1);
    ba60:	|  |      move.l 256(sp),100(sp)
    ba66:	|  |      moveq #1,d0
    ba68:	|  |      move.l d0,96(sp)
    ba6c:	|  |      move.l 1b1aa <DOSBase>,d0
    ba72:	|  |      movea.l d0,a6
    ba74:	|  |      move.l 100(sp),d1
    ba78:	|  |      move.l 96(sp),d2
    ba7c:	|  |      jsr -312(a6)
    ba80:	|  |      move.l d0,92(sp)
		put2bytes (currentFloor -> originalNum, fp);
    ba84:	|  |      movea.l 1b30e <currentFloor>,a0
    ba8a:	|  |      move.l (a0),d0
    ba8c:	|  |      move.l 256(sp),-(sp)
    ba90:	|  |      move.l d0,-(sp)
    ba92:	|  |      jsr 8d0 <put2bytes>
    ba98:	|  |      addq.l #8,sp
    ba9a:	|  |  /-- bra.s babe <saveGame+0x3ee>
	} else FPutC (fp, 0);
    ba9c:	|  \--|-> move.l 256(sp),112(sp)
    baa2:	|     |   clr.l 108(sp)
    baa6:	|     |   move.l 1b1aa <DOSBase>,d0
    baac:	|     |   movea.l d0,a6
    baae:	|     |   move.l 112(sp),d1
    bab2:	|     |   move.l 108(sp),d2
    bab6:	|     |   jsr -312(a6)
    baba:	|     |   move.l d0,104(sp)

	if (zBuffer.tex) {
    babe:	|     \-> move.l 1b252 <zBuffer+0x50>,d0
    bac4:	|  /----- beq.s bb00 <saveGame+0x430>
		FPutC (fp, 1);
    bac6:	|  |      move.l 256(sp),76(sp)
    bacc:	|  |      moveq #1,d0
    bace:	|  |      move.l d0,72(sp)
    bad2:	|  |      move.l 1b1aa <DOSBase>,d0
    bad8:	|  |      movea.l d0,a6
    bada:	|  |      move.l 76(sp),d1
    bade:	|  |      move.l 72(sp),d2
    bae2:	|  |      jsr -312(a6)
    bae6:	|  |      move.l d0,68(sp)
		put2bytes (zBuffer.originalNum, fp);
    baea:	|  |      move.l 1b24e <zBuffer+0x4c>,d0
    baf0:	|  |      move.l 256(sp),-(sp)
    baf4:	|  |      move.l d0,-(sp)
    baf6:	|  |      jsr 8d0 <put2bytes>
    bafc:	|  |      addq.l #8,sp
    bafe:	|  |  /-- bra.s bb22 <saveGame+0x452>
	} else FPutC (fp,0);
    bb00:	|  \--|-> move.l 256(sp),88(sp)
    bb06:	|     |   clr.l 84(sp)
    bb0a:	|     |   move.l 1b1aa <DOSBase>,d0
    bb10:	|     |   movea.l d0,a6
    bb12:	|     |   move.l 88(sp),d1
    bb16:	|     |   move.l 84(sp),d2
    bb1a:	|     |   jsr -312(a6)
    bb1e:	|     |   move.l d0,80(sp)

	FPutC (fp, speechMode);
    bb22:	|     \-> move.l 256(sp),64(sp)
    bb28:	|         move.l 1b2c8 <speechMode>,60(sp)
    bb30:	|         move.l 1b1aa <DOSBase>,d0
    bb36:	|         movea.l d0,a6
    bb38:	|         move.l 64(sp),d1
    bb3c:	|         move.l 60(sp),d2
    bb40:	|         jsr -312(a6)
    bb44:	|         move.l d0,56(sp)
	FPutC (fadeMode, fp);
    bb48:	|         move.b 1b07e <fadeMode>,d0
    bb4e:	|         move.b d0,d0
    bb50:	|         andi.l #255,d0
    bb56:	|         move.l d0,52(sp)
    bb5a:	|         move.l 256(sp),48(sp)
    bb60:	|         move.l 1b1aa <DOSBase>,d0
    bb66:	|         movea.l d0,a6
    bb68:	|         move.l 52(sp),d1
    bb6c:	|         move.l 48(sp),d2
    bb70:	|         jsr -312(a6)
    bb74:	|         move.l d0,44(sp)
	saveSpeech (speech, fp);
    bb78:	|         move.l 1b1fe <speech>,d0
    bb7e:	|         move.l 256(sp),-(sp)
    bb82:	|         move.l d0,-(sp)
    bb84:	|         jsr 6eda <saveSpeech>
    bb8a:	|         addq.l #8,sp
	saveStatusBars (fp);
    bb8c:	|         move.l 256(sp),-(sp)
    bb90:	|         jsr 68d6 <saveStatusBars>
    bb96:	|         addq.l #4,sp
	saveSounds (fp);
    bb98:	|         move.l 256(sp),-(sp)
    bb9c:	|         jsr c13e <saveSounds>
    bba2:	|         addq.l #4,sp

	put2bytes (saveEncoding, fp);
    bba4:	|         move.w 1b2b2 <saveEncoding>,d0
    bbaa:	|         move.w d0,d0
    bbac:	|         andi.l #65535,d0
    bbb2:	|         move.l 256(sp),-(sp)
    bbb6:	|         move.l d0,-(sp)
    bbb8:	|         jsr 8d0 <put2bytes>
    bbbe:	|         addq.l #8,sp

	saveParallaxRecursive (parallaxStuff, fp);
    bbc0:	|         move.l 1b2a4 <parallaxStuff>,d0
    bbc6:	|         move.l 256(sp),-(sp)
    bbca:	|         move.l d0,-(sp)
    bbcc:	|         jsr c436 <saveParallaxRecursive>
    bbd2:	|         addq.l #8,sp
	FPutC (fp, 0);
    bbd4:	|         move.l 256(sp),40(sp)
    bbda:	|         clr.l 36(sp)
    bbde:	|         move.l 1b1aa <DOSBase>,d0
    bbe4:	|         movea.l d0,a6
    bbe6:	|         move.l 40(sp),d1
    bbea:	|         move.l 36(sp),d2
    bbee:	|         jsr -312(a6)
    bbf2:	|         move.l d0,32(sp)

	FPutC(fp, languageNum);	// Selected language
    bbf6:	|         move.l 256(sp),28(sp)
    bbfc:	|         move.l 1ab20 <languageNum>,24(sp)
    bc04:	|         move.l 1b1aa <DOSBase>,d0
    bc0a:	|         movea.l d0,a6
    bc0c:	|         move.l 28(sp),d1
    bc10:	|         move.l 24(sp),d2
    bc14:	|         jsr -312(a6)
    bc18:	|         move.l d0,20(sp)

	Close(fp);
    bc1c:	|         move.l 256(sp),16(sp)
    bc22:	|         move.l 1b1aa <DOSBase>,d0
    bc28:	|         movea.l d0,a6
    bc2a:	|         move.l 16(sp),d1
    bc2e:	|         jsr -36(a6)
    bc32:	|         move.l d0,12(sp)
	clearStackLib ();
    bc36:	|         jsr b1ce <clearStackLib>
	return TRUE;
    bc3c:	|         moveq #1,d0
}
    bc3e:	\-------> movem.l (sp)+,d2-d3/a6
    bc42:	          lea 272(sp),sp
    bc46:	          rts

0000bc48 <saveStack>:

//----------------------------------------------------------------------
// For saving and loading stacks...
//----------------------------------------------------------------------

void saveStack (struct variableStack * vs, BPTR fp) {
    bc48:	       lea -12(sp),sp
	int elements = 0;
    bc4c:	       clr.l 8(sp)
	int a;

	struct variableStack * search = vs;
    bc50:	       move.l 16(sp),(sp)
	while (search) {
    bc54:	   /-- bra.s bc60 <saveStack+0x18>
		elements ++;
    bc56:	/--|-> addq.l #1,8(sp)
		search = search -> next;
    bc5a:	|  |   movea.l (sp),a0
    bc5c:	|  |   move.l 8(a0),(sp)
	while (search) {
    bc60:	|  \-> tst.l (sp)
    bc62:	\----- bne.s bc56 <saveStack+0xe>
	}

	put2bytes (elements, fp);
    bc64:	       move.l 20(sp),-(sp)
    bc68:	       move.l 12(sp),-(sp)
    bc6c:	       jsr 8d0 <put2bytes>
    bc72:	       addq.l #8,sp
	search = vs;
    bc74:	       move.l 16(sp),(sp)
	for (a = 0; a < elements; a ++) {
    bc78:	       clr.l 4(sp)
    bc7c:	   /-- bra.s bc98 <saveStack+0x50>
		saveVariable (& search -> thisVar, fp);
    bc7e:	/--|-> move.l (sp),d0
    bc80:	|  |   move.l 20(sp),-(sp)
    bc84:	|  |   move.l d0,-(sp)
    bc86:	|  |   jsr bdd4 <saveVariable>
    bc8c:	|  |   addq.l #8,sp
		search = search -> next;
    bc8e:	|  |   movea.l (sp),a0
    bc90:	|  |   move.l 8(a0),(sp)
	for (a = 0; a < elements; a ++) {
    bc94:	|  |   addq.l #1,4(sp)
    bc98:	|  \-> move.l 4(sp),d0
    bc9c:	|      cmp.l 8(sp),d0
    bca0:	\----- blt.s bc7e <saveStack+0x36>
	}
}
    bca2:	       nop
    bca4:	       nop
    bca6:	       lea 12(sp),sp
    bcaa:	       rts

0000bcac <saveStackRef>:


BOOL saveStackRef (struct stackHandler * vs, BPTR fp) {
    bcac:	             lea -44(sp),sp
    bcb0:	             move.l a6,-(sp)
    bcb2:	             move.l d2,-(sp)
	struct stackLibrary * s = stackLib;
    bcb4:	             move.l 1b286 <stackLib>,48(sp)
	int a = 0;
    bcbc:	             clr.l 44(sp)
	while (s) {
    bcc0:	      /----- bra.s bd1e <saveStackRef+0x72>
		if (s -> stack == vs) {
    bcc2:	   /--|----> movea.l 48(sp),a0
    bcc6:	   |  |      move.l (a0),d0
    bcc8:	   |  |      cmp.l 56(sp),d0
    bccc:	   |  |  /-- bne.s bd10 <saveStackRef+0x64>
			FPutC (fp, 1);
    bcce:	   |  |  |   move.l 60(sp),16(sp)
    bcd4:	   |  |  |   moveq #1,d0
    bcd6:	   |  |  |   move.l d0,12(sp)
    bcda:	   |  |  |   move.l 1b1aa <DOSBase>,d0
    bce0:	   |  |  |   movea.l d0,a6
    bce2:	   |  |  |   move.l 16(sp),d1
    bce6:	   |  |  |   move.l 12(sp),d2
    bcea:	   |  |  |   jsr -312(a6)
    bcee:	   |  |  |   move.l d0,8(sp)
			put2bytes (stackLibTotal - a, fp);
    bcf2:	   |  |  |   move.l 1b282 <stackLibTotal>,d0
    bcf8:	   |  |  |   sub.l 44(sp),d0
    bcfc:	   |  |  |   move.l 60(sp),-(sp)
    bd00:	   |  |  |   move.l d0,-(sp)
    bd02:	   |  |  |   jsr 8d0 <put2bytes>
    bd08:	   |  |  |   addq.l #8,sp
			return TRUE;
    bd0a:	   |  |  |   moveq #1,d0
    bd0c:	/--|--|--|-- bra.w bdca <saveStackRef+0x11e>
		}
		s = s -> next;
    bd10:	|  |  |  \-> movea.l 48(sp),a0
    bd14:	|  |  |      move.l 4(a0),48(sp)
		a ++;
    bd1a:	|  |  |      addq.l #1,44(sp)
	while (s) {
    bd1e:	|  |  \----> tst.l 48(sp)
    bd22:	|  \-------- bne.s bcc2 <saveStackRef+0x16>
	}
	FPutC (fp, 0);
    bd24:	|            move.l 60(sp),40(sp)
    bd2a:	|            clr.l 36(sp)
    bd2e:	|            move.l 1b1aa <DOSBase>,d0
    bd34:	|            movea.l d0,a6
    bd36:	|            move.l 40(sp),d1
    bd3a:	|            move.l 36(sp),d2
    bd3e:	|            jsr -312(a6)
    bd42:	|            move.l d0,32(sp)
	saveStack (vs -> first, fp);
    bd46:	|            movea.l 56(sp),a0
    bd4a:	|            move.l (a0),d0
    bd4c:	|            move.l 60(sp),-(sp)
    bd50:	|            move.l d0,-(sp)
    bd52:	|            jsr bc48 <saveStack>
    bd58:	|            addq.l #8,sp
	s = AllocVec( sizeof(struct stackLibrary), MEMF_ANY);
    bd5a:	|            moveq #8,d0
    bd5c:	|            move.l d0,28(sp)
    bd60:	|            clr.l 24(sp)
    bd64:	|            move.l 1b1a2 <SysBase>,d0
    bd6a:	|            movea.l d0,a6
    bd6c:	|            move.l 28(sp),d0
    bd70:	|            move.l 24(sp),d1
    bd74:	|            jsr -684(a6)
    bd78:	|            move.l d0,20(sp)
    bd7c:	|            move.l 20(sp),d0
    bd80:	|            move.l d0,48(sp)
	stackLibTotal ++;
    bd84:	|            move.l 1b282 <stackLibTotal>,d0
    bd8a:	|            addq.l #1,d0
    bd8c:	|            move.l d0,1b282 <stackLibTotal>
	if (! s) {
    bd92:	|            tst.l 48(sp)
    bd96:	|        /-- bne.s bdaa <saveStackRef+0xfe>
		KPrintF("saveStackRef: Cannot allocate memory");
    bd98:	|        |   pea 17bb5 <PutChar+0x1675>
    bd9e:	|        |   jsr 15bf0 <KPrintF>
    bda4:	|        |   addq.l #4,sp
		return FALSE;
    bda6:	|        |   clr.w d0
    bda8:	+--------|-- bra.s bdca <saveStackRef+0x11e>
	}
	s -> next = stackLib;
    bdaa:	|        \-> move.l 1b286 <stackLib>,d0
    bdb0:	|            movea.l 48(sp),a0
    bdb4:	|            move.l d0,4(a0)
	s -> stack = vs;
    bdb8:	|            movea.l 48(sp),a0
    bdbc:	|            move.l 56(sp),(a0)
	stackLib = s;
    bdc0:	|            move.l 48(sp),1b286 <stackLib>
	return TRUE;
    bdc8:	|            moveq #1,d0
}
    bdca:	\----------> move.l (sp)+,d2
    bdcc:	             movea.l (sp)+,a6
    bdce:	             lea 44(sp),sp
    bdd2:	             rts

0000bdd4 <saveVariable>:

BOOL saveVariable (struct variable * from, BPTR fp)
{
    bdd4:	          lea -12(sp),sp
    bdd8:	          move.l a6,-(sp)
    bdda:	          move.l d2,-(sp)
	FPutC (fp,from -> varType);
    bddc:	          move.l 28(sp),16(sp)
    bde2:	          movea.l 24(sp),a0
    bde6:	          move.l (a0),d0
    bde8:	          move.l d0,12(sp)
    bdec:	          move.l 1b1aa <DOSBase>,d0
    bdf2:	          movea.l d0,a6
    bdf4:	          move.l 16(sp),d1
    bdf8:	          move.l 12(sp),d2
    bdfc:	          jsr -312(a6)
    be00:	          move.l d0,8(sp)
	switch (from -> varType) {
    be04:	          movea.l 24(sp),a0
    be08:	          move.l (a0),d0
    be0a:	          moveq #9,d1
    be0c:	          cmp.l d0,d1
    be0e:	      /-- bcs.w bebe <saveVariable+0xea>
    be12:	      |   add.l d0,d0
    be14:	      |   movea.l d0,a0
    be16:	      |   adda.l #48674,a0
    be1c:	      |   move.w (a0),d0
    be1e:	      |   jmp (be22 <saveVariable+0x4e>,pc,d0.w)
    be22:	      |   ori.l #1310740,(a0)+
    be28:	      |   ori.b #20,(20,a0,d0.w)
    be2e:	      |   .short 0x004c
    be30:	      |   ori.b #126,(a4)
    be34:	      |   ori.w #8303,-(a4)
		case SVT_INT:
		case SVT_FUNC:
		case SVT_BUILT:
		case SVT_FILE:
		case SVT_OBJTYPE:
		put4bytes (from -> varData.intValue, fp);
    be38:	      |   ori.b #40,(a0)+
    be3c:	      |   ori.b #47,d4
    be40:	      |   ori.b #0,(a4)+
    be44:	      |   jsr 958 <put4bytes>
    be4a:	      |   addq.l #8,sp
		return TRUE;
    be4c:	      |   moveq #1,d0
    be4e:	/-----|-- bra.w befa <saveVariable+0x126>

		case SVT_STRING:
		writeString (from -> varData.theString, fp);
    be52:	|     |   movea.l 24(sp),a0
    be56:	|     |   move.l 4(a0),d0
    be5a:	|     |   move.l 28(sp),-(sp)
    be5e:	|     |   move.l d0,-(sp)
    be60:	|     |   jsr bd8 <writeString>
    be66:	|     |   addq.l #8,sp
		return TRUE;
    be68:	|     |   moveq #1,d0
    be6a:	+-----|-- bra.w befa <saveVariable+0x126>

		case SVT_STACK:
		return saveStackRef (from -> varData.theStack, fp);
    be6e:	|     |   movea.l 24(sp),a0
    be72:	|     |   move.l 4(a0),d0
    be76:	|     |   move.l 28(sp),-(sp)
    be7a:	|     |   move.l d0,-(sp)
    be7c:	|     |   jsr bcac <saveStackRef>
    be82:	|     |   addq.l #8,sp
    be84:	+-----|-- bra.s befa <saveVariable+0x126>

		case SVT_COSTUME:
		saveCostume (from -> varData.costumeHandler, fp);
    be86:	|     |   movea.l 24(sp),a0
    be8a:	|     |   move.l 4(a0),d0
    be8e:	|     |   move.l 28(sp),-(sp)
    be92:	|     |   move.l d0,-(sp)
    be94:	|     |   jsr a042 <saveCostume>
    be9a:	|     |   addq.l #8,sp
		return FALSE;
    be9c:	|     |   clr.w d0
    be9e:	+-----|-- bra.s befa <saveVariable+0x126>

		case SVT_ANIM:
		saveAnim (from -> varData.animHandler, fp);
    bea0:	|     |   movea.l 24(sp),a0
    bea4:	|     |   move.l 4(a0),d0
    bea8:	|     |   move.l 28(sp),-(sp)
    beac:	|     |   move.l d0,-(sp)
    beae:	|     |   jsr 9f78 <saveAnim>
    beb4:	|     |   addq.l #8,sp
		return FALSE;
    beb6:	|     |   clr.w d0
    beb8:	+-----|-- bra.s befa <saveVariable+0x126>

		case SVT_NULL:
		return FALSE;
    beba:	|     |   clr.w d0
    bebc:	+-----|-- bra.s befa <saveVariable+0x126>

		default:
		KPrintF("Can't save variables of this type:",
					(from->varType < SVT_NUM_TYPES) ?
    bebe:	|     \-> movea.l 24(sp),a0
    bec2:	|         move.l (a0),d0
		KPrintF("Can't save variables of this type:",
    bec4:	|         moveq #10,d1
    bec6:	|         cmp.l d0,d1
    bec8:	|  /----- bcs.s bee2 <saveVariable+0x10e>
						typeName[from->varType] :
    beca:	|  |      movea.l 24(sp),a0
    bece:	|  |      move.l (a0),d0
		KPrintF("Can't save variables of this type:",
    bed0:	|  |      add.l d0,d0
    bed2:	|  |      movea.l d0,a1
    bed4:	|  |      adda.l d0,a1
    bed6:	|  |      lea 1b080 <typeName>,a0
    bedc:	|  |      move.l (0,a1,a0.l),d0
    bee0:	|  |  /-- bra.s bee8 <saveVariable+0x114>
    bee2:	|  \--|-> move.l #97242,d0
    bee8:	|     \-> move.l d0,-(sp)
    beea:	|         pea 17be1 <PutChar+0x16a1>
    bef0:	|         jsr 15bf0 <KPrintF>
    bef6:	|         addq.l #8,sp
						"bad ID");						
	}
	return TRUE;
    bef8:	|         moveq #1,d0
    befa:	\-------> move.l (sp)+,d2
    befc:	          movea.l (sp)+,a6
    befe:	          lea 12(sp),sp
    bf02:	          rts

0000bf04 <CsiCheckInput>:
extern struct inputType input;

counterx_old = 0;
countery_old = 0;

void CsiCheckInput() {
    bf04:	          lea -12(sp),sp
    volatile struct Custom *custom = (struct Custom*)0xdff000;
    bf08:	          move.l #14675968,4(sp)
    UWORD value = custom->joy0dat;
    bf10:	          movea.l 4(sp),a0
    bf14:	          move.w 10(a0),2(sp)
    UBYTE countery_new = (UBYTE) (custom->joy0dat >> 8);
    bf1a:	          movea.l 4(sp),a0
    bf1e:	          move.w 10(a0),d0
    bf22:	          lsr.w #8,d0
    bf24:	          move.b d0,1(sp)
    UBYTE counterx_new = (UBYTE) (custom->joy0dat & 0xffff);
    bf28:	          movea.l 4(sp),a0
    bf2c:	          move.w 10(a0),d0
    bf30:	          move.b d0,(sp)

    if(counterx_new)
    bf32:	/-------- beq.w bfda <CsiCheckInput+0xd6>
    {
        WORD counterx_diff = counterx_new - counterx_old;
    bf36:	|         clr.w d1
    bf38:	|         move.b (sp),d1
    bf3a:	|         move.l 1b28e <counterx_old>,d0
    bf40:	|         move.l d0,d0
    bf42:	|         sub.w d0,d1
    bf44:	|         move.w d1,10(sp)

        if(counterx_diff > 127) {
    bf48:	|         cmpi.w #128,10(sp)
    bf4e:	|     /-- blt.s bf66 <CsiCheckInput+0x62>
            input.justMoved = TRUE;                
    bf50:	|     |   move.w #1,1b158 <input+0x4>
            counterx_diff -= 256;    
    bf58:	|     |   move.w 10(sp),d0
    bf5c:	|     |   addi.w #-256,d0
    bf60:	|     |   move.w d0,10(sp)
    bf64:	|  /--|-- bra.s bf92 <CsiCheckInput+0x8e>
        } else if (counterx_diff < -128) {
    bf66:	|  |  \-> cmpi.w #-129,10(sp)
    bf6c:	|  |  /-- bgt.s bf84 <CsiCheckInput+0x80>
            counterx_diff += 256;
    bf6e:	|  |  |   move.w 10(sp),d0
    bf72:	|  |  |   addi.w #256,d0
    bf76:	|  |  |   move.w d0,10(sp)
            input.justMoved = TRUE;
    bf7a:	|  |  |   move.w #1,1b158 <input+0x4>
    bf82:	|  +--|-- bra.s bf92 <CsiCheckInput+0x8e>
        } else if (counterx_diff) {
    bf84:	|  |  \-> tst.w 10(sp)
    bf88:	|  +----- beq.s bf92 <CsiCheckInput+0x8e>
            input.justMoved = TRUE;
    bf8a:	|  |      move.w #1,1b158 <input+0x4>
        }

        input.mouseX += counterx_diff;
    bf92:	|  \----> move.l 1b15e <input+0xa>,d0
    bf98:	|         movea.w 10(sp),a0
    bf9c:	|         add.l a0,d0
    bf9e:	|         move.l d0,1b15e <input+0xa>

        if( input.mouseX > (int) winWidth) {
    bfa4:	|         move.l 1b15e <input+0xa>,d1
    bfaa:	|         move.l 1b0f6 <winWidth>,d0
    bfb0:	|         cmp.l d1,d0
    bfb2:	|     /-- bge.s bfc2 <CsiCheckInput+0xbe>
            input.mouseX = winWidth;            
    bfb4:	|     |   move.l 1b0f6 <winWidth>,d0
    bfba:	|     |   move.l d0,1b15e <input+0xa>
    bfc0:	|  /--|-- bra.s bfd0 <CsiCheckInput+0xcc>
        }
        else if(input.mouseX < 0) {
    bfc2:	|  |  \-> move.l 1b15e <input+0xa>,d0
    bfc8:	|  +----- bpl.s bfd0 <CsiCheckInput+0xcc>
            input.mouseX = 0;
    bfca:	|  |      clr.l 1b15e <input+0xa>
        }

        //KPrintF("CsiCheckInput: MouseX = %d\n", input.mouseX);
        counterx_old = counterx_new;
    bfd0:	|  \----> moveq #0,d0
    bfd2:	|         move.b (sp),d0
    bfd4:	|         move.l d0,1b28e <counterx_old>
    }    

    if(countery_new)
    bfda:	\-------> tst.b 1(sp)
    bfde:	/-------- beq.w c08a <CsiCheckInput+0x186>
    {
        WORD countery_diff = countery_new - countery_old;
    bfe2:	|         clr.w d1
    bfe4:	|         move.b 1(sp),d1
    bfe8:	|         move.l 1b292 <countery_old>,d0
    bfee:	|         move.l d0,d0
    bff0:	|         sub.w d0,d1
    bff2:	|         move.w d1,8(sp)

        if(countery_diff > 127) {
    bff6:	|         cmpi.w #128,8(sp)
    bffc:	|     /-- blt.s c014 <CsiCheckInput+0x110>
            input.justMoved = TRUE;                
    bffe:	|     |   move.w #1,1b158 <input+0x4>
            countery_diff -= 256;    
    c006:	|     |   move.w 8(sp),d0
    c00a:	|     |   addi.w #-256,d0
    c00e:	|     |   move.w d0,8(sp)
    c012:	|  /--|-- bra.s c040 <CsiCheckInput+0x13c>
        } else if (countery_diff < -128) {
    c014:	|  |  \-> cmpi.w #-129,8(sp)
    c01a:	|  |  /-- bgt.s c032 <CsiCheckInput+0x12e>
            input.justMoved = TRUE;                
    c01c:	|  |  |   move.w #1,1b158 <input+0x4>
            countery_diff += 256;
    c024:	|  |  |   move.w 8(sp),d0
    c028:	|  |  |   addi.w #256,d0
    c02c:	|  |  |   move.w d0,8(sp)
    c030:	|  +--|-- bra.s c040 <CsiCheckInput+0x13c>
        } else if (countery_diff) {
    c032:	|  |  \-> tst.w 8(sp)
    c036:	|  +----- beq.s c040 <CsiCheckInput+0x13c>
            input.justMoved = TRUE;
    c038:	|  |      move.w #1,1b158 <input+0x4>
        }

        input.mouseY += countery_diff;
    c040:	|  \----> move.l 1b162 <input+0xe>,d0
    c046:	|         movea.w 8(sp),a0
    c04a:	|         add.l a0,d0
    c04c:	|         move.l d0,1b162 <input+0xe>

        if( input.mouseY > (int) winHeight) {
    c052:	|         move.l 1b162 <input+0xe>,d1
    c058:	|         move.l 1b0fa <winHeight>,d0
    c05e:	|         cmp.l d1,d0
    c060:	|     /-- bge.s c070 <CsiCheckInput+0x16c>
            input.mouseY = winHeight;            
    c062:	|     |   move.l 1b0fa <winHeight>,d0
    c068:	|     |   move.l d0,1b162 <input+0xe>
    c06e:	|  /--|-- bra.s c07e <CsiCheckInput+0x17a>
        }
        else if(input.mouseY < 0) {
    c070:	|  |  \-> move.l 1b162 <input+0xe>,d0
    c076:	|  +----- bpl.s c07e <CsiCheckInput+0x17a>
            input.mouseY = 0;
    c078:	|  |      clr.l 1b162 <input+0xe>
        }

        //KPrintF("CsiCheckInput: MouseX = %d\n", input.mouseX);
        countery_old = countery_new;
    c07e:	|  \----> moveq #0,d0
    c080:	|         move.b 1(sp),d0
    c084:	|         move.l d0,1b292 <countery_old>
    } 

    if(input.leftClick && ((*(volatile UBYTE*)0xbfe001)&64))
    c08a:	\-------> move.w 1b154 <input>,d0
    c090:	      /-- beq.s c0b6 <CsiCheckInput+0x1b2>
    c092:	      |   movea.l #12574721,a0
    c098:	      |   move.b (a0),d0
    c09a:	      |   move.b d0,d0
    c09c:	      |   andi.l #255,d0
    c0a2:	      |   moveq #64,d1
    c0a4:	      |   and.l d1,d0
    c0a6:	      +-- beq.s c0b6 <CsiCheckInput+0x1b2>
    {
        input.leftClick = FALSE;
    c0a8:	      |   clr.w 1b154 <input>
        input.leftRelease = TRUE;
    c0ae:	      |   move.w #1,1b15a <input+0x6>
    }

    if(input.rightClick && ((*(volatile UWORD*)0xdff016)&(1<<10)))
    c0b6:	      \-> move.w 1b156 <input+0x2>,d0
    c0bc:	      /-- beq.s c0e4 <CsiCheckInput+0x1e0>
    c0be:	      |   movea.l #14675990,a0
    c0c4:	      |   move.w (a0),d0
    c0c6:	      |   move.w d0,d0
    c0c8:	      |   andi.l #65535,d0
    c0ce:	      |   andi.l #1024,d0
    c0d4:	      +-- beq.s c0e4 <CsiCheckInput+0x1e0>
    {
        input.rightClick = FALSE;
    c0d6:	      |   clr.w 1b156 <input+0x2>
        input.rightRelease = TRUE;
    c0dc:	      |   move.w #1,1b15c <input+0x8>
    }


    if(!((*(volatile UBYTE*)0xbfe001)&64)) {
    c0e4:	      \-> movea.l #12574721,a0
    c0ea:	          move.b (a0),d0
    c0ec:	          move.b d0,d0
    c0ee:	          andi.l #255,d0
    c0f4:	          moveq #64,d1
    c0f6:	          and.l d1,d0
    c0f8:	      /-- bne.s c102 <CsiCheckInput+0x1fe>
        input.leftClick = TRUE;        
    c0fa:	      |   move.w #1,1b154 <input>
    } 
    if(!((*(volatile UWORD*)0xdff016)&(1<<10)) ) {
    c102:	      \-> movea.l #14675990,a0
    c108:	          move.w (a0),d0
    c10a:	          move.w d0,d0
    c10c:	          andi.l #65535,d0
    c112:	          andi.l #1024,d0
    c118:	      /-- bne.s c122 <CsiCheckInput+0x21e>
        input.rightClick = TRUE;
    c11a:	      |   move.w #1,1b156 <input+0x2>
    }

    c122:	      \-> nop
    c124:	          lea 12(sp),sp
    c128:	          rts

0000c12a <cacheSound>:

struct soundThing soundCache[MAX_SAMPLES];

int cacheSound (int f) {
//#pragma unused (f)
	return 0;
    c12a:	moveq #0,d0
}
    c12c:	rts

0000c12e <huntKillFreeSound>:

void huntKillFreeSound (int filenum) {
//#pragma unused(filenum)
}
    c12e:	nop
    c130:	rts

0000c132 <huntKillSound>:

void huntKillSound (int filenum) {
//#pragma unused(filenum)
}
    c132:	nop
    c134:	rts

0000c136 <playMOD>:
	defVol = get2bytes (fp);
}

BOOL playMOD (int f, int a, int fromTrack) {
//#pragma unused (f,a,fromTrack)
    return TRUE;
    c136:	moveq #1,d0
}
    c138:	rts

0000c13a <playSoundList>:

void playSoundList(struct soundList *s) {
}
    c13a:	nop
    c13c:	rts

0000c13e <saveSounds>:

void saveSounds (BPTR fp) {
    c13e:	lea -12(sp),sp
    c142:	move.l a6,-(sp)
    c144:	move.l d2,-(sp)
	FPutC (fp,0);
    c146:	move.l 24(sp),16(sp)
    c14c:	clr.l 12(sp)
    c150:	move.l 1b1aa <DOSBase>,d0
    c156:	movea.l d0,a6
    c158:	move.l 16(sp),d1
    c15c:	move.l 12(sp),d2
    c160:	jsr -312(a6)
    c164:	move.l d0,8(sp)
	put2bytes (defSoundVol, fp);
    c168:	move.l 1ab3e <defSoundVol>,d0
    c16e:	move.l 24(sp),-(sp)
    c172:	move.l d0,-(sp)
    c174:	jsr 8d0 <put2bytes>
    c17a:	addq.l #8,sp
	put2bytes (defVol, fp);
    c17c:	move.l 1ab3a <defVol>,d0
    c182:	move.l 24(sp),-(sp)
    c186:	move.l d0,-(sp)
    c188:	jsr 8d0 <put2bytes>
    c18e:	addq.l #8,sp
}
    c190:	nop
    c192:	move.l (sp)+,d2
    c194:	movea.l (sp)+,a6
    c196:	lea 12(sp),sp
    c19a:	rts

0000c19c <setDefaultMusicVolume>:

void setDefaultMusicVolume (int v) {
	defVol = v;
    c19c:	move.l 4(sp),1ab3a <defVol>
}
    c1a4:	nop
    c1a6:	rts

0000c1a8 <setDefaultSoundVolume>:

void setDefaultSoundVolume (int v) {
	defSoundVol = v;
    c1a8:	move.l 4(sp),1ab3e <defSoundVol>
}
    c1b0:	nop
    c1b2:	rts

0000c1b4 <setSoundLoop>:

void setSoundLoop (int a, int s, int e) {
//#pragma unused (a,s,e)
}
    c1b4:	nop
    c1b6:	rts

0000c1b8 <setMusicVolume>:

void setMusicVolume (int a, int v) {
//#pragma unused (a,v)
}
    c1b8:	nop
    c1ba:	rts

0000c1bc <setSoundVolume>:

void setSoundVolume (int a, int v) {
//#pragma unused (a,v)
}
    c1bc:	nop
    c1be:	rts

0000c1c0 <startSound>:

BOOL startSound (int f, BOOL loopy) {	
    c1c0:	subq.l #4,sp
    c1c2:	move.l 12(sp),d0
    c1c6:	move.w d0,d0
    c1c8:	move.w d0,2(sp)
//#pragma unused (f,loopy)
	return TRUE;
    c1cc:	moveq #1,d0
}
    c1ce:	addq.l #4,sp
    c1d0:	rts

0000c1d2 <stopMOD>:

void stopMOD (int i) {
//#pragma unused(i)
    c1d2:	nop
    c1d4:	rts

0000c1d6 <blankScreen>:
int viewportWidth = 320;
int viewportOffsetX = 0, viewportOffsetY = 0;
unsigned int snapshotTextureName = 0;

void blankScreen(int x1, int y1, int x2, int y2) {
	CstBlankScreen(x2, y2);
    c1d6:	move.l 16(sp),-(sp)
    c1da:	move.l 16(sp),-(sp)
    c1de:	jsr e0e <CstBlankScreen>
    c1e4:	addq.l #8,sp
}
    c1e6:	nop
    c1e8:	rts

0000c1ea <darkScreen>:

void darkScreen () {
	KPrintF("darkScreen: Amiga: Graphics Display not implemented yet."); //Todo: Amigize this
    c1ea:	pea 17c04 <PutChar+0x16c4>
    c1f0:	jsr 15bf0 <KPrintF>
    c1f6:	addq.l #4,sp
}
    c1f8:	nop
    c1fa:	rts

0000c1fc <drawHorizontalLine>:
	//Amiga todo: Maybe some parallaxstuff here?
	//}
}

void drawHorizontalLine (unsigned int x1, unsigned int y, unsigned int x2) {
	drawLine (x1, y, x2, y);
    c1fc:	movea.l 8(sp),a1
    c200:	movea.l 12(sp),a0
    c204:	move.l 8(sp),d1
    c208:	move.l 4(sp),d0
    c20c:	move.l a1,-(sp)
    c20e:	move.l a0,-(sp)
    c210:	move.l d1,-(sp)
    c212:	move.l d0,-(sp)
    c214:	jsr 2d64 <drawLine>
    c21a:	lea 16(sp),sp
}
    c21e:	nop
    c220:	rts

0000c222 <drawVerticalLine>:


void drawVerticalLine (unsigned int x, unsigned int y1, unsigned int y2) {
	drawLine (x, y1, x, y2);
    c222:	movea.l 12(sp),a1
    c226:	movea.l 4(sp),a0
    c22a:	move.l 8(sp),d1
    c22e:	move.l 4(sp),d0
    c232:	move.l a1,-(sp)
    c234:	move.l a0,-(sp)
    c236:	move.l d1,-(sp)
    c238:	move.l d0,-(sp)
    c23a:	jsr 2d64 <drawLine>
    c240:	lea 16(sp),sp
}
    c244:	nop
    c246:	rts

0000c248 <hardScroll>:

void hardScroll (int distance) {
   	KPrintF("Amiga: Function not implemented."); //Todo: Amigize this
    c248:	pea 17c3d <PutChar+0x16fd>
    c24e:	jsr 15bf0 <KPrintF>
    c254:	addq.l #4,sp
}
    c256:	nop
    c258:	rts

0000c25a <killBackDrop>:


void killBackDrop () {
	CstFreeBuffer();
    c25a:	jsr 14e8 <CstFreeBuffer>
	deleteTextures (1, &backdropTextureName);
    c260:	pea 1b29e <backdropTextureName>
    c266:	pea 1 <_start+0x1>
    c26a:	jsr 2ee6 <deleteTextures>
    c270:	addq.l #8,sp
	backdropTextureName = 0;
    c272:	clr.l 1b29e <backdropTextureName>
	backdropExists = FALSE;
    c278:	clr.w 1b2a2 <backdropExists>
}
    c27e:	nop
    c280:	rts

0000c282 <killParallax>:

void killParallax () {
    c282:	          lea -12(sp),sp
    c286:	          move.l a6,-(sp)
	while (parallaxStuff) {
    c288:	   /----- bra.s c2f4 <killParallax+0x72>

		struct parallaxLayer * k = parallaxStuff;
    c28a:	/--|----> move.l 1b2a4 <parallaxStuff>,12(sp)
		parallaxStuff = k->next;
    c292:	|  |      movea.l 12(sp),a0
    c296:	|  |      move.l 42(a0),d0
    c29a:	|  |      move.l d0,1b2a4 <parallaxStuff>

		// Now kill the image
		deleteTextures (1, &k->textureName);
    c2a0:	|  |      move.l 12(sp),d0
    c2a4:	|  |      addq.l #4,d0
    c2a6:	|  |      move.l d0,-(sp)
    c2a8:	|  |      pea 1 <_start+0x1>
    c2ac:	|  |      jsr 2ee6 <deleteTextures>
    c2b2:	|  |      addq.l #8,sp
		if( k->texture) FreeVec(k->texture);
    c2b4:	|  |      movea.l 12(sp),a0
    c2b8:	|  |      move.l (a0),d0
    c2ba:	|  |  /-- beq.s c2d4 <killParallax+0x52>
    c2bc:	|  |  |   movea.l 12(sp),a0
    c2c0:	|  |  |   move.l (a0),8(sp)
    c2c4:	|  |  |   move.l 1b1a2 <SysBase>,d0
    c2ca:	|  |  |   movea.l d0,a6
    c2cc:	|  |  |   movea.l 8(sp),a1
    c2d0:	|  |  |   jsr -690(a6)
		if( k) FreeVec(k);
    c2d4:	|  |  \-> tst.l 12(sp)
    c2d8:	|  |  /-- beq.s c2f0 <killParallax+0x6e>
    c2da:	|  |  |   move.l 12(sp),4(sp)
    c2e0:	|  |  |   move.l 1b1a2 <SysBase>,d0
    c2e6:	|  |  |   movea.l d0,a6
    c2e8:	|  |  |   movea.l 4(sp),a1
    c2ec:	|  |  |   jsr -690(a6)
		k = NULL;
    c2f0:	|  |  \-> clr.l 12(sp)
	while (parallaxStuff) {
    c2f4:	|  \----> move.l 1b2a4 <parallaxStuff>,d0
    c2fa:	\-------- bne.s c28a <killParallax+0x8>
	}
}
    c2fc:	          nop
    c2fe:	          nop
    c300:	          movea.l (sp)+,a6
    c302:	          lea 12(sp),sp
    c306:	          rts

0000c308 <loadBackDrop>:

void loadBackDrop (int fileNum, int x, int y) {
	if (! openFileFromNum (fileNum)) {
    c308:	       move.l 4(sp),-(sp)
    c30c:	       jsr 5c40 <openFileFromNum>
    c312:	       addq.l #4,sp
    c314:	       tst.l d0
    c316:	   /-- bne.s c328 <loadBackDrop+0x20>
		KPrintF("Can't load overlay image");
    c318:	   |   pea 17c5e <PutChar+0x171e>
    c31e:	   |   jsr 15bf0 <KPrintF>
    c324:	   |   addq.l #4,sp
		return;
    c326:	/--|-- bra.s c348 <loadBackDrop+0x40>
	}
	CstLoadBackdrop( bigDataFile, x, y);
    c328:	|  \-> move.l 1b18a <bigDataFile>,d0
    c32e:	|      move.l 12(sp),-(sp)
    c332:	|      move.l 12(sp),-(sp)
    c336:	|      move.l d0,-(sp)
    c338:	|      jsr 1760 <CstLoadBackdrop>
    c33e:	|      lea 12(sp),sp
	finishAccess ();
    c342:	|      jsr 5b38 <finishAccess>
	
}
    c348:	\----> rts

0000c34a <loadParallax>:
	
	backdropExists = TRUE;
	return TRUE;
}

BOOL loadParallax (unsigned short v, unsigned short fracX, unsigned short fracY) {
    c34a:	subq.l #8,sp
    c34c:	movea.l 12(sp),a0
    c350:	move.l 16(sp),d1
    c354:	move.l 20(sp),d0
    c358:	movea.w a0,a0
    c35a:	move.w a0,6(sp)
    c35e:	move.w d1,d1
    c360:	move.w d1,4(sp)
    c364:	move.w d0,d0
    c366:	move.w d0,2(sp)
	KPrintF("loadParallax: Not implemented yet."); //Amiga Todo: Amigize this	
    c36a:	pea 17cad <PutChar+0x176d>
    c370:	jsr 15bf0 <KPrintF>
    c376:	addq.l #4,sp

}
    c378:	nop
    c37a:	addq.l #8,sp
    c37c:	rts

0000c37e <mixBackDrop>:

void mixBackDrop (int fileNum, int x, int y) {
	KPrintF("mixBackdrop: Amiga Graphics Display not implemented yet."); //Todo: Amigize this	
    c37e:	pea 17cd0 <PutChar+0x1790>
    c384:	jsr 15bf0 <KPrintF>
    c38a:	addq.l #4,sp
}
    c38c:	nop
    c38e:	rts

0000c390 <nosnapshot>:

void nosnapshot () {
	deleteTextures (1, &snapshotTextureName);
    c390:	pea 1b2a8 <snapshotTextureName>
    c396:	pea 1 <_start+0x1>
    c39a:	jsr 2ee6 <deleteTextures>
    c3a0:	addq.l #8,sp
	snapshotTextureName = 0;
    c3a2:	clr.l 1b2a8 <snapshotTextureName>
}
    c3a8:	nop
    c3aa:	rts

0000c3ac <reserveBackdrop>:

BOOL reserveBackdrop () {	
	cameraX = 0;
    c3ac:	clr.l 1b2b4 <cameraX>
	cameraY = 0;
    c3b2:	clr.l 1b2b8 <cameraY>
	
	return CstReserveBackdrop(sceneWidth, sceneHeight);
    c3b8:	move.l 1b29a <sceneHeight>,d0
    c3be:	move.l d0,d1
    c3c0:	move.l 1b296 <sceneWidth>,d0
    c3c6:	move.l d1,-(sp)
    c3c8:	move.l d0,-(sp)
    c3ca:	jsr 2a62 <CstReserveBackdrop>
    c3d0:	addq.l #8,sp
}
    c3d2:	rts

0000c3d4 <resizeBackdrop>:

BOOL resizeBackdrop (int x, int y) {
    killBackDrop ();
    c3d4:	jsr c25a <killBackDrop>
	killParallax ();
    c3da:	jsr c282 <killParallax>
	killZBuffer ();
    c3e0:	jsr 75d4 <killZBuffer>
	sceneWidth = x;
    c3e6:	move.l 4(sp),d0
    c3ea:	move.l d0,1b296 <sceneWidth>
	sceneHeight = y;
    c3f0:	move.l 8(sp),d0
    c3f4:	move.l d0,1b29a <sceneHeight>
	KPrintF("resizeBackdrop: Reserving new Backdrop");
    c3fa:	pea 17d09 <PutChar+0x17c9>
    c400:	jsr 15bf0 <KPrintF>
    c406:	addq.l #4,sp
	return reserveBackdrop();
    c408:	jsr c3ac <reserveBackdrop>
	KPrintF("resizeBackdrop: Backdrop reserved");	
}
    c40e:	rts

0000c410 <restoreSnapshot>:

BOOL restoreSnapshot (BPTR fp) {
    c410:	subq.l #8,sp
	unsigned int picWidth = get2bytes (fp);
    c412:	move.l 12(sp),-(sp)
    c416:	jsr 6bc <get2bytes>
    c41c:	addq.l #4,sp
    c41e:	move.l d0,4(sp)
	unsigned int picHeight = get2bytes (fp);
    c422:	move.l 12(sp),-(sp)
    c426:	jsr 6bc <get2bytes>
    c42c:	addq.l #4,sp
    c42e:	move.l d0,(sp)

	//Todo: Amigize this?

	return TRUE;
    c430:	moveq #1,d0
}
    c432:	addq.l #8,sp
    c434:	rts

0000c436 <saveParallaxRecursive>:

void saveParallaxRecursive (struct parallaxLayer * me, BPTR fp) {
    c436:	   /-> lea -12(sp),sp
    c43a:	   |   move.l a6,-(sp)
    c43c:	   |   move.l d2,-(sp)
	if (me) {
    c43e:	   |   tst.l 24(sp)
    c442:	/--|-- beq.w c4d8 <saveParallaxRecursive+0xa2>
		saveParallaxRecursive (me -> next, fp);
    c446:	|  |   movea.l 24(sp),a0
    c44a:	|  |   move.l 42(a0),d0
    c44e:	|  |   move.l 28(sp),-(sp)
    c452:	|  |   move.l d0,-(sp)
    c454:	|  \-- jsr c436 <saveParallaxRecursive>(pc)
    c458:	|      addq.l #8,sp
		FPutC (fp, 1);
    c45a:	|      move.l 28(sp),16(sp)
    c460:	|      moveq #1,d0
    c462:	|      move.l d0,12(sp)
    c466:	|      move.l 1b1aa <DOSBase>,d0
    c46c:	|      movea.l d0,a6
    c46e:	|      move.l 16(sp),d1
    c472:	|      move.l 12(sp),d2
    c476:	|      jsr -312(a6)
    c47a:	|      move.l d0,8(sp)
		put2bytes (me->fileNum, fp);
    c47e:	|      movea.l 24(sp),a0
    c482:	|      move.w 28(a0),d0
    c486:	|      move.w d0,d0
    c488:	|      andi.l #65535,d0
    c48e:	|      move.l 28(sp),-(sp)
    c492:	|      move.l d0,-(sp)
    c494:	|      jsr 8d0 <put2bytes>
    c49a:	|      addq.l #8,sp
		put2bytes (me ->fractionX, fp);
    c49c:	|      movea.l 24(sp),a0
    c4a0:	|      move.w 30(a0),d0
    c4a4:	|      move.w d0,d0
    c4a6:	|      andi.l #65535,d0
    c4ac:	|      move.l 28(sp),-(sp)
    c4b0:	|      move.l d0,-(sp)
    c4b2:	|      jsr 8d0 <put2bytes>
    c4b8:	|      addq.l #8,sp
		put2bytes (me->fractionY, fp);
    c4ba:	|      movea.l 24(sp),a0
    c4be:	|      move.w 32(a0),d0
    c4c2:	|      move.w d0,d0
    c4c4:	|      andi.l #65535,d0
    c4ca:	|      move.l 28(sp),-(sp)
    c4ce:	|      move.l d0,-(sp)
    c4d0:	|      jsr 8d0 <put2bytes>
    c4d6:	|      addq.l #8,sp
	}
}
    c4d8:	\----> nop
    c4da:	       move.l (sp)+,d2
    c4dc:	       movea.l (sp)+,a6
    c4de:	       lea 12(sp),sp
    c4e2:	       rts

0000c4e4 <snapshot>:

BOOL snapshot () {

	KPrintF("snapshot: Not yet implemented on Amiga"); //Todo
    c4e4:	pea 17d30 <PutChar+0x17f0>
    c4ea:	jsr 15bf0 <KPrintF>
    c4f0:	addq.l #4,sp
	return TRUE;
    c4f2:	moveq #1,d0
    c4f4:	rts

0000c4f6 <findObjectType>:
#include "moreio.h"
#include "support/gcc8_c_support.h"

struct objectType * allObjectTypes = NULL;

struct objectType * findObjectType (int i) {
    c4f6:	             subq.l #4,sp
	struct objectType * huntType = allObjectTypes;
    c4f8:	             move.l 1b2ac <allObjectTypes>,(sp)

	while (huntType) {
    c4fe:	      /----- bra.s c516 <findObjectType+0x20>
		if (huntType -> objectNum == i) return huntType;
    c500:	   /--|----> movea.l (sp),a0
    c502:	   |  |      move.l 4(a0),d0
    c506:	   |  |      cmp.l 8(sp),d0
    c50a:	   |  |  /-- bne.s c510 <findObjectType+0x1a>
    c50c:	   |  |  |   move.l (sp),d0
    c50e:	/--|--|--|-- bra.s c526 <findObjectType+0x30>
		huntType = huntType -> next;
    c510:	|  |  |  \-> movea.l (sp),a0
    c512:	|  |  |      move.l 8(a0),(sp)
	while (huntType) {
    c516:	|  |  \----> tst.l (sp)
    c518:	|  \-------- bne.s c500 <findObjectType+0xa>
	}

	return loadObjectType (i);
    c51a:	|            move.l 8(sp),-(sp)
    c51e:	|            jsr c5e6 <loadObjectType>
    c524:	|            addq.l #4,sp
}
    c526:	\----------> addq.l #4,sp
    c528:	             rts

0000c52a <getCombinationFunction>:

int getCombinationFunction (int withThis, int thisObject) {
    c52a:	             lea -12(sp),sp
	int i, num = 0;
    c52e:	             clr.l 4(sp)
	struct objectType * obj = findObjectType (thisObject);
    c532:	             move.l 20(sp),-(sp)
    c536:	             jsr c4f6 <findObjectType>
    c53c:	             addq.l #4,sp
    c53e:	             move.l d0,(sp)

	for (i = 0; i < obj -> numCom; i ++) {
    c540:	             clr.l 8(sp)
    c544:	   /-------- bra.s c57a <getCombinationFunction+0x50>
		if (obj -> allCombis[i].withObj == withThis)
    c546:	/--|-------> movea.l (sp),a0
    c548:	|  |         move.l 38(a0),d1
    c54c:	|  |         move.l 8(sp),d0
    c550:	|  |         lsl.l #3,d0
    c552:	|  |         movea.l d1,a0
    c554:	|  |         adda.l d0,a0
    c556:	|  |         move.l (a0),d0
    c558:	|  |         cmp.l 16(sp),d0
    c55c:	|  |  /----- bne.s c576 <getCombinationFunction+0x4c>
		{
			num = obj -> allCombis[i].funcNum;
    c55e:	|  |  |      movea.l (sp),a0
    c560:	|  |  |      move.l 38(a0),d1
    c564:	|  |  |      move.l 8(sp),d0
    c568:	|  |  |      lsl.l #3,d0
    c56a:	|  |  |      movea.l d1,a0
    c56c:	|  |  |      adda.l d0,a0
    c56e:	|  |  |      move.l 4(a0),4(sp)
			break;
    c574:	|  |  |  /-- bra.s c586 <getCombinationFunction+0x5c>
	for (i = 0; i < obj -> numCom; i ++) {
    c576:	|  |  \--|-> addq.l #1,8(sp)
    c57a:	|  \-----|-> movea.l (sp),a0
    c57c:	|        |   move.l 16(a0),d0
    c580:	|        |   cmp.l 8(sp),d0
    c584:	\--------|-- bgt.s c546 <getCombinationFunction+0x1c>
		}
	}

	return num;
    c586:	         \-> move.l 4(sp),d0
}
    c58a:	             lea 12(sp),sp
    c58e:	             rts

0000c590 <initObjectTypes>:

BOOL initObjectTypes () {
	return TRUE;
    c590:	moveq #1,d0
}
    c592:	rts

0000c594 <loadObjectRef>:

struct objectType * loadObjectRef (BPTR fp) {
    c594:	subq.l #8,sp
    c596:	move.l a6,-(sp)
	struct objectType * r = loadObjectType (get2bytes (fp));
    c598:	move.l 16(sp),-(sp)
    c59c:	jsr 6bc <get2bytes>
    c5a2:	addq.l #4,sp
    c5a4:	move.l d0,-(sp)
    c5a6:	jsr c5e6 <loadObjectType>
    c5ac:	addq.l #4,sp
    c5ae:	move.l d0,8(sp)
	FreeVec(r -> screenName);
    c5b2:	movea.l 8(sp),a0
    c5b6:	move.l (a0),4(sp)
    c5ba:	move.l 1b1a2 <SysBase>,d0
    c5c0:	movea.l d0,a6
    c5c2:	movea.l 4(sp),a1
    c5c6:	jsr -690(a6)
	r -> screenName = readString (fp);
    c5ca:	move.l 16(sp),-(sp)
    c5ce:	jsr b02 <readString>
    c5d4:	addq.l #4,sp
    c5d6:	movea.l 8(sp),a0
    c5da:	move.l d0,(a0)
	return r;
    c5dc:	move.l 8(sp),d0
}
    c5e0:	movea.l (sp)+,a6
    c5e2:	addq.l #8,sp
    c5e4:	rts

0000c5e6 <loadObjectType>:

struct objectType * loadObjectType (int i) {
    c5e6:	          lea -84(sp),sp
    c5ea:	          move.l a6,-(sp)
    c5ec:	          move.l a2,-(sp)
    int a, nameNum;
    struct objectType * newType = AllocVec(sizeof(struct objectType), MEMF_ANY);
    c5ee:	          moveq #42,d0
    c5f0:	          move.l d0,84(sp)
    c5f4:	          clr.l 80(sp)
    c5f8:	          move.l 1b1a2 <SysBase>,d0
    c5fe:	          movea.l d0,a6
    c600:	          move.l 84(sp),d0
    c604:	          move.l 80(sp),d1
    c608:	          jsr -684(a6)
    c60c:	          move.l d0,76(sp)
    c610:	          move.l 76(sp),d0
    c614:	          move.l d0,72(sp)

    if (newType) {
    c618:	/-------- beq.w c892 <loadObjectType+0x2ac>
        if (openObjectSlice(i)) {
    c61c:	|         move.l 96(sp),-(sp)
    c620:	|         jsr 5d08 <openObjectSlice>
    c626:	|         addq.l #4,sp
    c628:	|         tst.w d0
    c62a:	+-------- beq.w c892 <loadObjectType+0x2ac>
            nameNum = get2bytes(bigDataFile);
    c62e:	|         move.l 1b18a <bigDataFile>,d0
    c634:	|         move.l d0,-(sp)
    c636:	|         jsr 6bc <get2bytes>
    c63c:	|         addq.l #4,sp
    c63e:	|         move.l d0,68(sp)
            newType->r = (BYTE) FGetC(bigDataFile);
    c642:	|         move.l 1b18a <bigDataFile>,64(sp)
    c64a:	|         move.l 1b1aa <DOSBase>,d0
    c650:	|         movea.l d0,a6
    c652:	|         move.l 64(sp),d1
    c656:	|         jsr -306(a6)
    c65a:	|         move.l d0,60(sp)
    c65e:	|         move.l 60(sp),d0
    c662:	|         move.l d0,d0
    c664:	|         movea.l 72(sp),a0
    c668:	|         move.b d0,12(a0)
            newType->g = (BYTE) FGetC(bigDataFile);
    c66c:	|         move.l 1b18a <bigDataFile>,56(sp)
    c674:	|         move.l 1b1aa <DOSBase>,d0
    c67a:	|         movea.l d0,a6
    c67c:	|         move.l 56(sp),d1
    c680:	|         jsr -306(a6)
    c684:	|         move.l d0,52(sp)
    c688:	|         move.l 52(sp),d0
    c68c:	|         move.l d0,d0
    c68e:	|         movea.l 72(sp),a0
    c692:	|         move.b d0,13(a0)
            newType->b = (BYTE) FGetC(bigDataFile);
    c696:	|         move.l 1b18a <bigDataFile>,48(sp)
    c69e:	|         move.l 1b1aa <DOSBase>,d0
    c6a4:	|         movea.l d0,a6
    c6a6:	|         move.l 48(sp),d1
    c6aa:	|         jsr -306(a6)
    c6ae:	|         move.l d0,44(sp)
    c6b2:	|         move.l 44(sp),d0
    c6b6:	|         move.l d0,d0
    c6b8:	|         movea.l 72(sp),a0
    c6bc:	|         move.b d0,14(a0)
            newType->speechGap = FGetC(bigDataFile);
    c6c0:	|         move.l 1b18a <bigDataFile>,40(sp)
    c6c8:	|         move.l 1b1aa <DOSBase>,d0
    c6ce:	|         movea.l d0,a6
    c6d0:	|         move.l 40(sp),d1
    c6d4:	|         jsr -306(a6)
    c6d8:	|         move.l d0,36(sp)
    c6dc:	|         move.l 36(sp),d0
    c6e0:	|         movea.l 72(sp),a0
    c6e4:	|         move.l d0,20(a0)
            newType->walkSpeed = FGetC(bigDataFile);
    c6e8:	|         move.l 1b18a <bigDataFile>,32(sp)
    c6f0:	|         move.l 1b1aa <DOSBase>,d0
    c6f6:	|         movea.l d0,a6
    c6f8:	|         move.l 32(sp),d1
    c6fc:	|         jsr -306(a6)
    c700:	|         move.l d0,28(sp)
    c704:	|         move.l 28(sp),d0
    c708:	|         movea.l 72(sp),a0
    c70c:	|         move.l d0,24(a0)
            newType->wrapSpeech = get4bytes(bigDataFile);
    c710:	|         move.l 1b18a <bigDataFile>,d0
    c716:	|         move.l d0,-(sp)
    c718:	|         jsr 718 <get4bytes>
    c71e:	|         addq.l #4,sp
    c720:	|         movea.l 72(sp),a0
    c724:	|         move.l d0,28(a0)
            newType->spinSpeed = get2bytes(bigDataFile);
    c728:	|         move.l 1b18a <bigDataFile>,d0
    c72e:	|         move.l d0,-(sp)
    c730:	|         jsr 6bc <get2bytes>
    c736:	|         addq.l #4,sp
    c738:	|         movea.l 72(sp),a0
    c73c:	|         move.l d0,32(a0)

            FGetC(bigDataFile);
    c740:	|         move.l 1b18a <bigDataFile>,24(sp)
    c748:	|         move.l 1b1aa <DOSBase>,d0
    c74e:	|         movea.l d0,a6
    c750:	|         move.l 24(sp),d1
    c754:	|         jsr -306(a6)
    c758:	|         move.l d0,20(sp)
            getFloat(bigDataFile);
    c75c:	|         move.l 1b18a <bigDataFile>,d0
    c762:	|         move.l d0,-(sp)
    c764:	|         jsr 7d8 <getFloat>
    c76a:	|         addq.l #4,sp
            getFloat(bigDataFile);
    c76c:	|         move.l 1b18a <bigDataFile>,d0
    c772:	|         move.l d0,-(sp)
    c774:	|         jsr 7d8 <getFloat>
    c77a:	|         addq.l #4,sp

            newType->flags = get2bytes(bigDataFile);
    c77c:	|         move.l 1b18a <bigDataFile>,d0
    c782:	|         move.l d0,-(sp)
    c784:	|         jsr 6bc <get2bytes>
    c78a:	|         addq.l #4,sp
    c78c:	|         move.l d0,d0
    c78e:	|         movea.l 72(sp),a0
    c792:	|         move.w d0,36(a0)

            newType->numCom = get2bytes(bigDataFile);
    c796:	|         move.l 1b18a <bigDataFile>,d0
    c79c:	|         move.l d0,-(sp)
    c79e:	|         jsr 6bc <get2bytes>
    c7a4:	|         addq.l #4,sp
    c7a6:	|         movea.l 72(sp),a0
    c7aa:	|         move.l d0,16(a0)
            newType->allCombis = (newType->numCom) ? AllocVec(sizeof(struct combination) * newType->numCom, MEMF_ANY) : NULL;
    c7ae:	|         movea.l 72(sp),a0
    c7b2:	|         move.l 16(a0),d0
    c7b6:	|  /----- beq.s c7e8 <loadObjectType+0x202>
    c7b8:	|  |      movea.l 72(sp),a0
    c7bc:	|  |      move.l 16(a0),d0
    c7c0:	|  |      lsl.l #3,d0
    c7c2:	|  |      move.l d0,16(sp)
    c7c6:	|  |      clr.l 12(sp)
    c7ca:	|  |      move.l 1b1a2 <SysBase>,d0
    c7d0:	|  |      movea.l d0,a6
    c7d2:	|  |      move.l 16(sp),d0
    c7d6:	|  |      move.l 12(sp),d1
    c7da:	|  |      jsr -684(a6)
    c7de:	|  |      move.l d0,8(sp)
    c7e2:	|  |      move.l 8(sp),d0
    c7e6:	|  |  /-- bra.s c7ea <loadObjectType+0x204>
    c7e8:	|  \--|-> moveq #0,d0
    c7ea:	|     \-> movea.l 72(sp),a0
    c7ee:	|         move.l d0,38(a0)

            for (a = 0; a < newType->numCom; a++) {
    c7f2:	|         clr.l 88(sp)
    c7f6:	|     /-- bra.s c846 <loadObjectType+0x260>
                newType->allCombis[a].withObj = get2bytes(bigDataFile);
    c7f8:	|  /--|-> move.l 1b18a <bigDataFile>,d1
    c7fe:	|  |  |   movea.l 72(sp),a0
    c802:	|  |  |   movea.l 38(a0),a0
    c806:	|  |  |   move.l 88(sp),d0
    c80a:	|  |  |   lsl.l #3,d0
    c80c:	|  |  |   lea (0,a0,d0.l),a2
    c810:	|  |  |   move.l d1,-(sp)
    c812:	|  |  |   jsr 6bc <get2bytes>
    c818:	|  |  |   addq.l #4,sp
    c81a:	|  |  |   move.l d0,(a2)
                newType->allCombis[a].funcNum = get2bytes(bigDataFile);
    c81c:	|  |  |   move.l 1b18a <bigDataFile>,d1
    c822:	|  |  |   movea.l 72(sp),a0
    c826:	|  |  |   movea.l 38(a0),a0
    c82a:	|  |  |   move.l 88(sp),d0
    c82e:	|  |  |   lsl.l #3,d0
    c830:	|  |  |   lea (0,a0,d0.l),a2
    c834:	|  |  |   move.l d1,-(sp)
    c836:	|  |  |   jsr 6bc <get2bytes>
    c83c:	|  |  |   addq.l #4,sp
    c83e:	|  |  |   move.l d0,4(a2)
            for (a = 0; a < newType->numCom; a++) {
    c842:	|  |  |   addq.l #1,88(sp)
    c846:	|  |  \-> movea.l 72(sp),a0
    c84a:	|  |      move.l 16(a0),d0
    c84e:	|  |      cmp.l 88(sp),d0
    c852:	|  \----- bgt.s c7f8 <loadObjectType+0x212>
            }
            finishAccess();
    c854:	|         jsr 5b38 <finishAccess>
            newType->screenName = getNumberedString(nameNum);
    c85a:	|         move.l 68(sp),-(sp)
    c85e:	|         jsr 5b42 <getNumberedString>
    c864:	|         addq.l #4,sp
    c866:	|         movea.l 72(sp),a0
    c86a:	|         move.l d0,(a0)
            newType->objectNum = i;
    c86c:	|         movea.l 72(sp),a0
    c870:	|         move.l 96(sp),4(a0)
            newType->next = allObjectTypes;
    c876:	|         move.l 1b2ac <allObjectTypes>,d0
    c87c:	|         movea.l 72(sp),a0
    c880:	|         move.l d0,8(a0)
            allObjectTypes = newType;
    c884:	|         move.l 72(sp),1b2ac <allObjectTypes>
            return newType;
    c88c:	|         move.l 72(sp),d0
    c890:	|     /-- bra.s c894 <loadObjectType+0x2ae>
        }
    }
    return NULL;
    c892:	\-----|-> moveq #0,d0
}
    c894:	      \-> movea.l (sp)+,a2
    c896:	          movea.l (sp)+,a6
    c898:	          lea 84(sp),sp
    c89c:	          rts

0000c89e <removeObjectType>:


void removeObjectType (struct objectType * oT) {
    c89e:	             lea -16(sp),sp
    c8a2:	             move.l a6,-(sp)
	struct objectType * * huntRegion = &allObjectTypes;
    c8a4:	             move.l #111276,16(sp)

	while (* huntRegion) {
    c8ac:	   /-------- bra.s c920 <removeObjectType+0x82>
		if ((* huntRegion) == oT) {
    c8ae:	/--|-------> movea.l 16(sp),a0
    c8b2:	|  |         move.l (a0),d0
    c8b4:	|  |         cmp.l 24(sp),d0
    c8b8:	|  |  /----- bne.s c912 <removeObjectType+0x74>
//			FILE * debuggy2 = fopen ("debug.txt", "at");
//			fprintf (debuggy2, "DELETING OBJECT TYPE: %p %s\n", oT, oT -> screenName);
//			fclose (debuggy2);

			* huntRegion = oT -> next;
    c8ba:	|  |  |      movea.l 24(sp),a0
    c8be:	|  |  |      move.l 8(a0),d0
    c8c2:	|  |  |      movea.l 16(sp),a0
    c8c6:	|  |  |      move.l d0,(a0)
			FreeVec(oT -> allCombis);
    c8c8:	|  |  |      movea.l 24(sp),a0
    c8cc:	|  |  |      move.l 38(a0),12(sp)
    c8d2:	|  |  |      move.l 1b1a2 <SysBase>,d0
    c8d8:	|  |  |      movea.l d0,a6
    c8da:	|  |  |      movea.l 12(sp),a1
    c8de:	|  |  |      jsr -690(a6)
			FreeVec(oT -> screenName);
    c8e2:	|  |  |      movea.l 24(sp),a0
    c8e6:	|  |  |      move.l (a0),8(sp)
    c8ea:	|  |  |      move.l 1b1a2 <SysBase>,d0
    c8f0:	|  |  |      movea.l d0,a6
    c8f2:	|  |  |      movea.l 8(sp),a1
    c8f6:	|  |  |      jsr -690(a6)
			FreeVec(oT);
    c8fa:	|  |  |      move.l 24(sp),4(sp)
    c900:	|  |  |      move.l 1b1a2 <SysBase>,d0
    c906:	|  |  |      movea.l d0,a6
    c908:	|  |  |      movea.l 4(sp),a1
    c90c:	|  |  |      jsr -690(a6)
			return;
    c910:	|  |  |  /-- bra.s c936 <removeObjectType+0x98>
		} else {
			huntRegion = & ((* huntRegion) -> next);
    c912:	|  |  \--|-> movea.l 16(sp),a0
    c916:	|  |     |   move.l (a0),d0
    c918:	|  |     |   move.l d0,d1
    c91a:	|  |     |   addq.l #8,d1
    c91c:	|  |     |   move.l d1,16(sp)
	while (* huntRegion) {
    c920:	|  \-----|-> movea.l 16(sp),a0
    c924:	|        |   move.l (a0),d0
    c926:	\--------|-- bne.s c8ae <removeObjectType+0x10>
		}
	}
	KPrintF("Can't delete object type: bad pointer");
    c928:	         |   pea 17d57 <PutChar+0x1817>
    c92e:	         |   jsr 15bf0 <KPrintF>
    c934:	         |   addq.l #4,sp
}
    c936:	         \-> movea.l (sp)+,a6
    c938:	             lea 16(sp),sp
    c93c:	             rts

0000c93e <saveObjectRef>:

void saveObjectRef (struct objectType * r, BPTR fp) {
	put2bytes (r -> objectNum, fp);
    c93e:	movea.l 4(sp),a0
    c942:	move.l 4(a0),d0
    c946:	move.l 8(sp),-(sp)
    c94a:	move.l d0,-(sp)
    c94c:	jsr 8d0 <put2bytes>
    c952:	addq.l #8,sp
	writeString (r -> screenName, fp);
    c954:	movea.l 4(sp),a0
    c958:	move.l (a0),d0
    c95a:	move.l 8(sp),-(sp)
    c95e:	move.l d0,-(sp)
    c960:	jsr bd8 <writeString>
    c966:	addq.l #8,sp
    c968:	nop
    c96a:	rts

0000c96c <fileToStack>:

char encode1 = 0;
char encode2 = 0;
unsigned short saveEncoding = FALSE;

BOOL fileToStack(char *filename, struct stackHandler *sH) {
    c96c:	                         lea -112(sp),sp
    c970:	                         move.l a6,-(sp)
    c972:	                         move.l d2,-(sp)
    struct variable stringVar;
    stringVar.varType = SVT_NULL;
    c974:	                         clr.l 10(sp)
    const char *checker = saveEncoding ? "[Custom data (encoded)]\r\n" : "[Custom data (ASCII)]\n";
    c978:	                         move.w 1b2b2 <saveEncoding>,d0
    c97e:	                  /----- beq.s c988 <fileToStack+0x1c>
    c980:	                  |      move.l #97661,d0
    c986:	                  |  /-- bra.s c98e <fileToStack+0x22>
    c988:	                  \--|-> move.l #97687,d0
    c98e:	                     \-> move.l d0,116(sp)

    BPTR fp = Open(filename, MODE_OLDFILE);
    c992:	                         move.l 124(sp),112(sp)
    c998:	                         move.l #1005,108(sp)
    c9a0:	                         move.l 1b1aa <DOSBase>,d0
    c9a6:	                         movea.l d0,a6
    c9a8:	                         move.l 112(sp),d1
    c9ac:	                         move.l 108(sp),d2
    c9b0:	                         jsr -30(a6)
    c9b4:	                         move.l d0,104(sp)
    c9b8:	                         move.l 104(sp),d0
    c9bc:	                         move.l d0,100(sp)
    if (!fp) {
    c9c0:	                     /-- bne.s c9da <fileToStack+0x6e>
        KPrintF("No such file", filename);
    c9c2:	                     |   move.l 124(sp),-(sp)
    c9c6:	                     |   pea 17dae <PutChar+0x186e>
    c9cc:	                     |   jsr 15bf0 <KPrintF>
    c9d2:	                     |   addq.l #8,sp
        return FALSE;
    c9d4:	                     |   clr.w d0
    c9d6:	/--------------------|-- bra.w ccd0 <fileToStack+0x364>
    }

    encode1 = (unsigned char)saveEncoding & 255;
    c9da:	|                    \-> move.w 1b2b2 <saveEncoding>,d0
    c9e0:	|                        move.l d0,d0
    c9e2:	|                        move.b d0,1b2b0 <encode1>
    encode2 = (unsigned char)(saveEncoding >> 8);
    c9e8:	|                        move.w 1b2b2 <saveEncoding>,d0
    c9ee:	|                        lsr.w #8,d0
    c9f0:	|                        move.l d0,d0
    c9f2:	|                        move.b d0,1b2b1 <encode2>

    while (*checker) {
    c9f8:	|                 /----- bra.s ca5c <fileToStack+0xf0>
        if (FGetC(fp) != *checker) {
    c9fa:	|              /--|----> move.l 100(sp),30(sp)
    ca00:	|              |  |      move.l 1b1aa <DOSBase>,d0
    ca06:	|              |  |      movea.l d0,a6
    ca08:	|              |  |      move.l 30(sp),d1
    ca0c:	|              |  |      jsr -306(a6)
    ca10:	|              |  |      move.l d0,26(sp)
    ca14:	|              |  |      move.l 26(sp),d1
    ca18:	|              |  |      movea.l 116(sp),a0
    ca1c:	|              |  |      move.b (a0),d0
    ca1e:	|              |  |      ext.w d0
    ca20:	|              |  |      movea.w d0,a0
    ca22:	|              |  |      cmpa.l d1,a0
    ca24:	|              |  |  /-- beq.s ca58 <fileToStack+0xec>
            Close(fp);
    ca26:	|              |  |  |   move.l 100(sp),22(sp)
    ca2c:	|              |  |  |   move.l 1b1aa <DOSBase>,d0
    ca32:	|              |  |  |   movea.l d0,a6
    ca34:	|              |  |  |   move.l 22(sp),d1
    ca38:	|              |  |  |   jsr -36(a6)
    ca3c:	|              |  |  |   move.l d0,18(sp)
            KPrintF(LOAD_ERROR "This isn't a SLUDGE custom data file:", filename);
    ca40:	|              |  |  |   move.l 124(sp),-(sp)
    ca44:	|              |  |  |   pea 17dbb <PutChar+0x187b>
    ca4a:	|              |  |  |   jsr 15bf0 <KPrintF>
    ca50:	|              |  |  |   addq.l #8,sp
            return FALSE;
    ca52:	|              |  |  |   clr.w d0
    ca54:	+--------------|--|--|-- bra.w ccd0 <fileToStack+0x364>
        }
        checker++;
    ca58:	|              |  |  \-> addq.l #1,116(sp)
    while (*checker) {
    ca5c:	|              |  \----> movea.l 116(sp),a0
    ca60:	|              |         move.b (a0),d0
    ca62:	|              \-------- bne.s c9fa <fileToStack+0x8e>
    }

    if (saveEncoding) {
    ca64:	|                        move.w 1b2b2 <saveEncoding>,d0
    ca6a:	|  /-------------------- beq.s cade <fileToStack+0x172>
        char *checker = readStringEncoded(fp);
    ca6c:	|  |                     move.l 100(sp),-(sp)
    ca70:	|  |                     jsr ccda <readStringEncoded>
    ca76:	|  |                     addq.l #4,sp
    ca78:	|  |                     move.l d0,96(sp)
        if (strcmp(checker, "UN�LO�CKED")) {
    ca7c:	|  |                     pea 17dfc <PutChar+0x18bc>
    ca82:	|  |                     move.l 100(sp),-(sp)
    ca86:	|  |                     jsr 12baa <strcmp>
    ca8c:	|  |                     addq.l #8,sp
    ca8e:	|  |                     tst.l d0
    ca90:	|  |                 /-- beq.s cac4 <fileToStack+0x158>
            Close(fp);
    ca92:	|  |                 |   move.l 100(sp),88(sp)
    ca98:	|  |                 |   move.l 1b1aa <DOSBase>,d0
    ca9e:	|  |                 |   movea.l d0,a6
    caa0:	|  |                 |   move.l 88(sp),d1
    caa4:	|  |                 |   jsr -36(a6)
    caa8:	|  |                 |   move.l d0,84(sp)
            KPrintF(LOAD_ERROR "The current file encoding setting does not match the encoding setting used when this file was created:", filename);
    caac:	|  |                 |   move.l 124(sp),-(sp)
    cab0:	|  |                 |   pea 17e0b <PutChar+0x18cb>
    cab6:	|  |                 |   jsr 15bf0 <KPrintF>
    cabc:	|  |                 |   addq.l #8,sp
            return FALSE;
    cabe:	|  |                 |   clr.w d0
    cac0:	+--|-----------------|-- bra.w ccd0 <fileToStack+0x364>
        }
        FreeVec(checker);
    cac4:	|  |                 \-> move.l 96(sp),92(sp)
    caca:	|  |                     move.l 1b1a2 <SysBase>,d0
    cad0:	|  |                     movea.l d0,a6
    cad2:	|  |                     movea.l 92(sp),a1
    cad6:	|  |                     jsr -690(a6)
        checker = NULL;
    cada:	|  |                     clr.l 96(sp)
    }

    for (;;) {
        if (saveEncoding) {
    cade:	|  >-------------------> move.w 1b2b2 <saveEncoding>,d0
    cae4:	|  |     /-------------- beq.w cc18 <fileToStack+0x2ac>
            LONG tmp = FGetC(fp) ^ encode1;
    cae8:	|  |     |               move.l 100(sp),76(sp)
    caee:	|  |     |               move.l 1b1aa <DOSBase>,d0
    caf4:	|  |     |               movea.l d0,a6
    caf6:	|  |     |               move.l 76(sp),d1
    cafa:	|  |     |               jsr -306(a6)
    cafe:	|  |     |               move.l d0,72(sp)
    cb02:	|  |     |               move.l 72(sp),d0
    cb06:	|  |     |               move.b 1b2b0 <encode1>,d1
    cb0c:	|  |     |               ext.w d1
    cb0e:	|  |     |               ext.l d1
    cb10:	|  |     |               move.l d0,d2
    cb12:	|  |     |               eor.l d1,d2
    cb14:	|  |     |               move.l d2,68(sp)

            if (tmp == -1) break;
    cb18:	|  |     |               moveq #-1,d0
    cb1a:	|  |     |               cmp.l 68(sp),d0
    cb1e:	|  |  /--|-------------- beq.w ccae <fileToStack+0x342>

            char i = (char) tmp;
    cb22:	|  |  |  |               move.b 71(sp),67(sp)

            switch (i) {
    cb28:	|  |  |  |               move.b 67(sp),d0
    cb2c:	|  |  |  |               ext.w d0
    cb2e:	|  |  |  |               movea.w d0,a0
    cb30:	|  |  |  |               moveq #2,d2
    cb32:	|  |  |  |               cmp.l a0,d2
    cb34:	|  |  |  |     /-------- beq.s cbb0 <fileToStack+0x244>
    cb36:	|  |  |  |     |         moveq #2,d0
    cb38:	|  |  |  |     |         cmp.l a0,d0
    cb3a:	|  |  |  |  /--|-------- blt.w cbe6 <fileToStack+0x27a>
    cb3e:	|  |  |  |  |  |         cmpa.w #0,a0
    cb42:	|  |  |  |  |  |     /-- beq.s cb4e <fileToStack+0x1e2>
    cb44:	|  |  |  |  |  |     |   moveq #1,d2
    cb46:	|  |  |  |  |  |     |   cmp.l a0,d2
    cb48:	|  |  |  |  |  |  /--|-- beq.s cb8a <fileToStack+0x21e>
    cb4a:	|  |  |  |  +--|--|--|-- bra.w cbe6 <fileToStack+0x27a>
                case 0: {
                    char *g = readStringEncoded(fp);
    cb4e:	|  |  |  |  |  |  |  \-> move.l 100(sp),-(sp)
    cb52:	|  |  |  |  |  |  |      jsr ccda <readStringEncoded>
    cb58:	|  |  |  |  |  |  |      addq.l #4,sp
    cb5a:	|  |  |  |  |  |  |      move.l d0,54(sp)
                    makeTextVar(&stringVar, g);
    cb5e:	|  |  |  |  |  |  |      move.l 54(sp),-(sp)
    cb62:	|  |  |  |  |  |  |      lea 14(sp),a0
    cb66:	|  |  |  |  |  |  |      move.l a0,-(sp)
    cb68:	|  |  |  |  |  |  |      jsr 13920 <makeTextVar>
    cb6e:	|  |  |  |  |  |  |      addq.l #8,sp
                    FreeVec(g);
    cb70:	|  |  |  |  |  |  |      move.l 54(sp),50(sp)
    cb76:	|  |  |  |  |  |  |      move.l 1b1a2 <SysBase>,d0
    cb7c:	|  |  |  |  |  |  |      movea.l d0,a6
    cb7e:	|  |  |  |  |  |  |      movea.l 50(sp),a1
    cb82:	|  |  |  |  |  |  |      jsr -690(a6)
                }
                break;
    cb86:	|  |  |  |  |  |  |  /-- bra.w cc3e <fileToStack+0x2d2>

                case 1:
                    setVariable(&stringVar, SVT_INT, get4bytes(fp));
    cb8a:	|  |  |  |  |  |  \--|-> move.l 100(sp),-(sp)
    cb8e:	|  |  |  |  |  |     |   jsr 718 <get4bytes>
    cb94:	|  |  |  |  |  |     |   addq.l #4,sp
    cb96:	|  |  |  |  |  |     |   move.l d0,-(sp)
    cb98:	|  |  |  |  |  |     |   pea 1 <_start+0x1>
    cb9c:	|  |  |  |  |  |     |   lea 18(sp),a0
    cba0:	|  |  |  |  |  |     |   move.l a0,-(sp)
    cba2:	|  |  |  |  |  |     |   jsr 13ff0 <setVariable>
    cba8:	|  |  |  |  |  |     |   lea 12(sp),sp
                    break;
    cbac:	|  |  |  |  |  |     +-- bra.w cc3e <fileToStack+0x2d2>

                case 2:
                    setVariable(&stringVar, SVT_INT, FGetC(fp));
    cbb0:	|  |  |  |  |  \-----|-> move.l 100(sp),62(sp)
    cbb6:	|  |  |  |  |        |   move.l 1b1aa <DOSBase>,d0
    cbbc:	|  |  |  |  |        |   movea.l d0,a6
    cbbe:	|  |  |  |  |        |   move.l 62(sp),d1
    cbc2:	|  |  |  |  |        |   jsr -306(a6)
    cbc6:	|  |  |  |  |        |   move.l d0,58(sp)
    cbca:	|  |  |  |  |        |   move.l 58(sp),d0
    cbce:	|  |  |  |  |        |   move.l d0,-(sp)
    cbd0:	|  |  |  |  |        |   pea 1 <_start+0x1>
    cbd4:	|  |  |  |  |        |   lea 18(sp),a0
    cbd8:	|  |  |  |  |        |   move.l a0,-(sp)
    cbda:	|  |  |  |  |        |   jsr 13ff0 <setVariable>
    cbe0:	|  |  |  |  |        |   lea 12(sp),sp
                    break;
    cbe4:	|  |  |  |  |        +-- bra.s cc3e <fileToStack+0x2d2>

                default:
                    KPrintF(LOAD_ERROR "Corrupt custom data file:", filename);
    cbe6:	|  |  |  |  \--------|-> move.l 124(sp),-(sp)
    cbea:	|  |  |  |           |   pea 17e8d <PutChar+0x194d>
    cbf0:	|  |  |  |           |   jsr 15bf0 <KPrintF>
    cbf6:	|  |  |  |           |   addq.l #8,sp
                    Close(fp);
    cbf8:	|  |  |  |           |   move.l 100(sp),46(sp)
    cbfe:	|  |  |  |           |   move.l 1b1aa <DOSBase>,d0
    cc04:	|  |  |  |           |   movea.l d0,a6
    cc06:	|  |  |  |           |   move.l 46(sp),d1
    cc0a:	|  |  |  |           |   jsr -36(a6)
    cc0e:	|  |  |  |           |   move.l d0,42(sp)
                    return FALSE;
    cc12:	|  |  |  |           |   clr.w d0
    cc14:	+--|--|--|-----------|-- bra.w ccd0 <fileToStack+0x364>
            }
        } else {
            char *line = readTextPlain(fp);
    cc18:	|  |  |  \-----------|-> move.l 100(sp),-(sp)
    cc1c:	|  |  |              |   jsr cda0 <readTextPlain>
    cc22:	|  |  |              |   addq.l #4,sp
    cc24:	|  |  |              |   move.l d0,80(sp)
            if (!line) break;
    cc28:	|  |  |        /-----|-- beq.w ccb2 <fileToStack+0x346>
            makeTextVar(&stringVar, line);
    cc2c:	|  |  |        |     |   move.l 80(sp),-(sp)
    cc30:	|  |  |        |     |   lea 14(sp),a0
    cc34:	|  |  |        |     |   move.l a0,-(sp)
    cc36:	|  |  |        |     |   jsr 13920 <makeTextVar>
    cc3c:	|  |  |        |     |   addq.l #8,sp
        }

        if (sH->first == NULL) {
    cc3e:	|  |  |        |     \-> movea.l 128(sp),a0
    cc42:	|  |  |        |         move.l (a0),d0
    cc44:	|  |  |        |  /----- bne.s cc74 <fileToStack+0x308>
            // Adds to the TOP of the array... oops!
            if (!addVarToStackQuick(&stringVar, &sH->first)) return FALSE;
    cc46:	|  |  |        |  |      move.l 128(sp),d0
    cc4a:	|  |  |        |  |      move.l d0,-(sp)
    cc4c:	|  |  |        |  |      lea 14(sp),a0
    cc50:	|  |  |        |  |      move.l a0,-(sp)
    cc52:	|  |  |        |  |      jsr 12fc0 <addVarToStackQuick>
    cc58:	|  |  |        |  |      addq.l #8,sp
    cc5a:	|  |  |        |  |      tst.w d0
    cc5c:	|  |  |        |  |  /-- bne.s cc62 <fileToStack+0x2f6>
    cc5e:	|  |  |        |  |  |   clr.w d0
    cc60:	+--|--|--------|--|--|-- bra.s ccd0 <fileToStack+0x364>
            sH->last = sH->first;
    cc62:	|  |  |        |  |  \-> movea.l 128(sp),a0
    cc66:	|  |  |        |  |      move.l (a0),d0
    cc68:	|  |  |        |  |      movea.l 128(sp),a0
    cc6c:	|  |  |        |  |      move.l d0,4(a0)
    cc70:	|  +--|--------|--|----- bra.w cade <fileToStack+0x172>
        } else {
            // Adds to the END of the array... much better
            if (!addVarToStackQuick(&stringVar, &sH->last->next)) return FALSE;
    cc74:	|  |  |        |  \----> movea.l 128(sp),a0
    cc78:	|  |  |        |         move.l 4(a0),d0
    cc7c:	|  |  |        |         addq.l #8,d0
    cc7e:	|  |  |        |         move.l d0,-(sp)
    cc80:	|  |  |        |         lea 14(sp),a0
    cc84:	|  |  |        |         move.l a0,-(sp)
    cc86:	|  |  |        |         jsr 12fc0 <addVarToStackQuick>
    cc8c:	|  |  |        |         addq.l #8,sp
    cc8e:	|  |  |        |         tst.w d0
    cc90:	|  |  |        |     /-- bne.s cc96 <fileToStack+0x32a>
    cc92:	|  |  |        |     |   clr.w d0
    cc94:	+--|--|--------|-----|-- bra.s ccd0 <fileToStack+0x364>
            sH->last = sH->last->next;
    cc96:	|  |  |        |     \-> movea.l 128(sp),a0
    cc9a:	|  |  |        |         movea.l 4(a0),a0
    cc9e:	|  |  |        |         move.l 8(a0),d0
    cca2:	|  |  |        |         movea.l 128(sp),a0
    cca6:	|  |  |        |         move.l d0,4(a0)
        if (saveEncoding) {
    ccaa:	|  \--|--------|-------- bra.w cade <fileToStack+0x172>
            if (tmp == -1) break;
    ccae:	|     \--------|-------> nop
    ccb0:	|              |     /-- bra.s ccb4 <fileToStack+0x348>
            if (!line) break;
    ccb2:	|              \-----|-> nop
        }
    }
    Close(fp);
    ccb4:	|                    \-> move.l 100(sp),38(sp)
    ccba:	|                        move.l 1b1aa <DOSBase>,d0
    ccc0:	|                        movea.l d0,a6
    ccc2:	|                        move.l 38(sp),d1
    ccc6:	|                        jsr -36(a6)
    ccca:	|                        move.l d0,34(sp)
    return TRUE;
    ccce:	|                        moveq #1,d0
}
    ccd0:	\----------------------> move.l (sp)+,d2
    ccd2:	                         movea.l (sp)+,a6
    ccd4:	                         lea 112(sp),sp
    ccd8:	                         rts

0000ccda <readStringEncoded>:

char *readStringEncoded(BPTR fp) {
    ccda:	          lea -32(sp),sp
    ccde:	          move.l a6,-(sp)
    cce0:	          move.l d2,-(sp)
    int a, len = get2bytes(fp);
    cce2:	          move.l 44(sp),-(sp)
    cce6:	          jsr 6bc <get2bytes>
    ccec:	          addq.l #4,sp
    ccee:	          move.l d0,32(sp)
    char *s = AllocVec(len + 1, MEMF_ANY);
    ccf2:	          move.l 32(sp),d0
    ccf6:	          addq.l #1,d0
    ccf8:	          move.l d0,28(sp)
    ccfc:	          clr.l 24(sp)
    cd00:	          move.l 1b1a2 <SysBase>,d0
    cd06:	          movea.l d0,a6
    cd08:	          move.l 28(sp),d0
    cd0c:	          move.l 24(sp),d1
    cd10:	          jsr -684(a6)
    cd14:	          move.l d0,20(sp)
    cd18:	          move.l 20(sp),d0
    cd1c:	          move.l d0,16(sp)
    if (!s) return NULL;
    cd20:	      /-- bne.s cd26 <readStringEncoded+0x4c>
    cd22:	      |   moveq #0,d0
    cd24:	/-----|-- bra.s cd96 <readStringEncoded+0xbc>
    for (a = 0; a < len; a++) {
    cd26:	|     \-> clr.l 36(sp)
    cd2a:	|     /-- bra.s cd7c <readStringEncoded+0xa2>
        s[a] = (char)(FGetC(fp) ^ encode1);
    cd2c:	|  /--|-> move.l 44(sp),12(sp)
    cd32:	|  |  |   move.l 1b1aa <DOSBase>,d0
    cd38:	|  |  |   movea.l d0,a6
    cd3a:	|  |  |   move.l 12(sp),d1
    cd3e:	|  |  |   jsr -306(a6)
    cd42:	|  |  |   move.l d0,8(sp)
    cd46:	|  |  |   move.l 8(sp),d0
    cd4a:	|  |  |   move.l d0,d1
    cd4c:	|  |  |   move.b 1b2b0 <encode1>,d2
    cd52:	|  |  |   move.l 36(sp),d0
    cd56:	|  |  |   movea.l 16(sp),a0
    cd5a:	|  |  |   adda.l d0,a0
    cd5c:	|  |  |   move.b d1,d0
    cd5e:	|  |  |   eor.b d2,d0
    cd60:	|  |  |   move.b d0,(a0)
        encode1 += encode2;
    cd62:	|  |  |   move.b 1b2b0 <encode1>,d0
    cd68:	|  |  |   move.b d0,d1
    cd6a:	|  |  |   move.b 1b2b1 <encode2>,d0
    cd70:	|  |  |   add.b d1,d0
    cd72:	|  |  |   move.b d0,1b2b0 <encode1>
    for (a = 0; a < len; a++) {
    cd78:	|  |  |   addq.l #1,36(sp)
    cd7c:	|  |  \-> move.l 36(sp),d0
    cd80:	|  |      cmp.l 32(sp),d0
    cd84:	|  \----- blt.s cd2c <readStringEncoded+0x52>
    }
    s[len] = 0;
    cd86:	|         move.l 32(sp),d0
    cd8a:	|         movea.l 16(sp),a0
    cd8e:	|         adda.l d0,a0
    cd90:	|         clr.b (a0)
    return s;
    cd92:	|         move.l 16(sp),d0
}
    cd96:	\-------> move.l (sp)+,d2
    cd98:	          movea.l (sp)+,a6
    cd9a:	          lea 32(sp),sp
    cd9e:	          rts

0000cda0 <readTextPlain>:

char *readTextPlain(BPTR fp) {
    cda0:	             lea -104(sp),sp
    cda4:	             movem.l d2-d4/a6,-(sp)
    ULONG startPos;
    int stringSize = 0;
    cda8:	             clr.l 116(sp)
    BOOL keepGoing = TRUE;
    cdac:	             move.w #1,114(sp)
    char gotChar;
    char *reply;

    startPos = Seek(fp, 0, OFFSET_CURRENT);
    cdb2:	             move.l 124(sp),106(sp)
    cdb8:	             clr.l 102(sp)
    cdbc:	             clr.l 98(sp)
    cdc0:	             move.l 1b1aa <DOSBase>,d0
    cdc6:	             movea.l d0,a6
    cdc8:	             move.l 106(sp),d1
    cdcc:	             move.l 102(sp),d2
    cdd0:	             move.l 98(sp),d3
    cdd4:	             jsr -66(a6)
    cdd8:	             move.l d0,94(sp)
    cddc:	             move.l 94(sp),d0
    cde0:	             move.l d0,90(sp)

    LONG tmp;
    while (keepGoing) {
    cde4:	   /-------- bra.s ce28 <readTextPlain+0x88>
        tmp = FGetC(fp);
    cde6:	/--|-------> move.l 124(sp),22(sp)
    cdec:	|  |         move.l 1b1aa <DOSBase>,d0
    cdf2:	|  |         movea.l d0,a6
    cdf4:	|  |         move.l 22(sp),d1
    cdf8:	|  |         jsr -306(a6)
    cdfc:	|  |         move.l d0,18(sp)
    ce00:	|  |         move.l 18(sp),d0
    ce04:	|  |         move.l d0,110(sp)
        char gotChar = (char) tmp;
    ce08:	|  |         move.b 113(sp),17(sp)
        if (gotChar == '\n' || tmp == -1) {
    ce0e:	|  |         cmpi.b #10,17(sp)
    ce14:	|  |  /----- beq.s ce1e <readTextPlain+0x7e>
    ce16:	|  |  |      moveq #-1,d0
    ce18:	|  |  |      cmp.l 110(sp),d0
    ce1c:	|  |  |  /-- bne.s ce24 <readTextPlain+0x84>
            keepGoing = FALSE;
    ce1e:	|  |  \--|-> clr.w 114(sp)
    ce22:	|  +-----|-- bra.s ce28 <readTextPlain+0x88>
        } else {
            stringSize++;
    ce24:	|  |     \-> addq.l #1,116(sp)
    while (keepGoing) {
    ce28:	|  \-------> tst.w 114(sp)
    ce2c:	\----------- bne.s cde6 <readTextPlain+0x46>
        }
    }

    if ((stringSize == 0) && tmp == -1) {
    ce2e:	             tst.l 116(sp)
    ce32:	         /-- bne.s ce42 <readTextPlain+0xa2>
    ce34:	         |   moveq #-1,d0
    ce36:	         |   cmp.l 110(sp),d0
    ce3a:	         +-- bne.s ce42 <readTextPlain+0xa2>
        return NULL;
    ce3c:	         |   moveq #0,d0
    ce3e:	      /--|-- bra.w cf28 <readTextPlain+0x188>
    } else {
        Seek(fp, startPos, OFFSET_BEGINNING);
    ce42:	      |  \-> move.l 124(sp),86(sp)
    ce48:	      |      move.l 90(sp),82(sp)
    ce4e:	      |      moveq #-1,d0
    ce50:	      |      move.l d0,78(sp)
    ce54:	      |      move.l 1b1aa <DOSBase>,d0
    ce5a:	      |      movea.l d0,a6
    ce5c:	      |      move.l 86(sp),d1
    ce60:	      |      move.l 82(sp),d2
    ce64:	      |      move.l 78(sp),d3
    ce68:	      |      jsr -66(a6)
    ce6c:	      |      move.l d0,74(sp)
        reply = AllocVec(stringSize + 1, MEMF_ANY);
    ce70:	      |      move.l 116(sp),d0
    ce74:	      |      addq.l #1,d0
    ce76:	      |      move.l d0,70(sp)
    ce7a:	      |      clr.l 66(sp)
    ce7e:	      |      move.l 1b1a2 <SysBase>,d0
    ce84:	      |      movea.l d0,a6
    ce86:	      |      move.l 70(sp),d0
    ce8a:	      |      move.l 66(sp),d1
    ce8e:	      |      jsr -684(a6)
    ce92:	      |      move.l d0,62(sp)
    ce96:	      |      move.l 62(sp),d0
    ce9a:	      |      move.l d0,58(sp)
        if (reply == NULL) return NULL;
    ce9e:	      |  /-- bne.s cea6 <readTextPlain+0x106>
    cea0:	      |  |   moveq #0,d0
    cea2:	      +--|-- bra.w cf28 <readTextPlain+0x188>
        int bytesRead = FRead(fp, reply, 1, stringSize);
    cea6:	      |  \-> move.l 124(sp),54(sp)
    ceac:	      |      move.l 58(sp),50(sp)
    ceb2:	      |      moveq #1,d0
    ceb4:	      |      move.l d0,46(sp)
    ceb8:	      |      move.l 116(sp),42(sp)
    cebe:	      |      move.l 1b1aa <DOSBase>,d0
    cec4:	      |      movea.l d0,a6
    cec6:	      |      move.l 54(sp),d1
    ceca:	      |      move.l 50(sp),d2
    cece:	      |      move.l 46(sp),d3
    ced2:	      |      move.l 42(sp),d4
    ced6:	      |      jsr -324(a6)
    ceda:	      |      move.l d0,38(sp)
    cede:	      |      move.l 38(sp),d0
    cee2:	      |      move.l d0,34(sp)
        if (bytesRead != stringSize) {
    cee6:	      |      move.l 34(sp),d0
    ceea:	      |      cmp.l 116(sp),d0
    ceee:	      |  /-- beq.s cefe <readTextPlain+0x15e>
            KPrintF("Reading error in readTextPlain.\n");
    cef0:	      |  |   pea 17ec2 <PutChar+0x1982>
    cef6:	      |  |   jsr 15bf0 <KPrintF>
    cefc:	      |  |   addq.l #4,sp
        }
        FGetC(fp); // Skip the newline character
    cefe:	      |  \-> move.l 124(sp),30(sp)
    cf04:	      |      move.l 1b1aa <DOSBase>,d0
    cf0a:	      |      movea.l d0,a6
    cf0c:	      |      move.l 30(sp),d1
    cf10:	      |      jsr -306(a6)
    cf14:	      |      move.l d0,26(sp)
        reply[stringSize] = 0;
    cf18:	      |      move.l 116(sp),d0
    cf1c:	      |      movea.l 58(sp),a0
    cf20:	      |      adda.l d0,a0
    cf22:	      |      clr.b (a0)
    }

    return reply;
    cf24:	      |      move.l 58(sp),d0
}
    cf28:	      \----> movem.l (sp)+,d2-d4/a6
    cf2c:	             lea 104(sp),sp
    cf30:	             rts

0000cf32 <stackToFile>:


BOOL stackToFile (char * filename, const struct variable * from) {
    cf32:	                      lea -144(sp),sp
    cf36:	                      movem.l d2-d3/a6,-(sp)
    BPTR fp = Open( filename, MODE_NEWFILE);
    cf3a:	                      move.l 160(sp),148(sp)
    cf40:	                      move.l #1006,144(sp)
    cf48:	                      move.l 1b1aa <DOSBase>,d0
    cf4e:	                      movea.l d0,a6
    cf50:	                      move.l 148(sp),d1
    cf54:	                      move.l 144(sp),d2
    cf58:	                      jsr -30(a6)
    cf5c:	                      move.l d0,140(sp)
    cf60:	                      move.l 140(sp),d0
    cf64:	                      move.l d0,136(sp)

    if (!fp) {
    cf68:	                  /-- bne.s cf82 <stackToFile+0x50>
        KPrintF("Can't create file", filename);
    cf6a:	                  |   move.l 160(sp),-(sp)
    cf6e:	                  |   pea 17ee3 <PutChar+0x19a3>
    cf74:	                  |   jsr 15bf0 <KPrintF>
    cf7a:	                  |   addq.l #8,sp
        return FALSE;
    cf7c:	                  |   clr.w d0
    cf7e:	/-----------------|-- bra.w d23e <stackToFile+0x30c>
    }

    struct variableStack * hereWeAre = from->varData.theStack->first;
    cf82:	|                 \-> movea.l 164(sp),a0
    cf86:	|                     movea.l 4(a0),a0
    cf8a:	|                     move.l (a0),152(sp)

    encode1 = (unsigned char) saveEncoding & 255;
    cf8e:	|                     move.w 1b2b2 <saveEncoding>,d0
    cf94:	|                     move.l d0,d0
    cf96:	|                     move.b d0,1b2b0 <encode1>
    encode2 = (unsigned char) (saveEncoding >> 8);
    cf9c:	|                     move.w 1b2b2 <saveEncoding>,d0
    cfa2:	|                     lsr.w #8,d0
    cfa4:	|                     move.l d0,d0
    cfa6:	|                     move.b d0,1b2b1 <encode2>

    if (saveEncoding) {
    cfac:	|                     move.w 1b2b2 <saveEncoding>,d0
    cfb2:	|                 /-- beq.s d004 <stackToFile+0xd2>
        FPrintf(fp, "[Custom data (encoded)]\r\n");
    cfb4:	|                 |   move.l 136(sp),116(sp)
    cfba:	|                 |   move.l #97661,112(sp)
    cfc2:	|                 |   moveq #99,d0
    cfc4:	|                 |   not.b d0
    cfc6:	|                 |   add.l sp,d0
    cfc8:	|                 |   addi.l #-144,d0
    cfce:	|                 |   move.l d0,108(sp)
    cfd2:	|                 |   move.l 1b1aa <DOSBase>,d0
    cfd8:	|                 |   movea.l d0,a6
    cfda:	|                 |   move.l 116(sp),d1
    cfde:	|                 |   move.l 112(sp),d2
    cfe2:	|                 |   move.l 108(sp),d3
    cfe6:	|                 |   jsr -354(a6)
    cfea:	|                 |   move.l d0,104(sp)
        writeStringEncoded("UN�LO�CKED", fp);
    cfee:	|                 |   move.l 136(sp),-(sp)
    cff2:	|                 |   pea 17dfc <PutChar+0x18bc>
    cff8:	|                 |   jsr d248 <writeStringEncoded>
    cffe:	|                 |   addq.l #8,sp
    d000:	|  /--------------|-- bra.w d216 <stackToFile+0x2e4>
    } else {
        FPrintf(fp, "[Custom data (ASCII)]\n");
    d004:	|  |              \-> move.l 136(sp),132(sp)
    d00a:	|  |                  move.l #97687,128(sp)
    d012:	|  |                  moveq #99,d1
    d014:	|  |                  not.b d1
    d016:	|  |                  add.l sp,d1
    d018:	|  |                  addi.l #-144,d1
    d01e:	|  |                  move.l d1,124(sp)
    d022:	|  |                  move.l 1b1aa <DOSBase>,d0
    d028:	|  |                  movea.l d0,a6
    d02a:	|  |                  move.l 132(sp),d1
    d02e:	|  |                  move.l 128(sp),d2
    d032:	|  |                  move.l 124(sp),d3
    d036:	|  |                  jsr -354(a6)
    d03a:	|  |                  move.l d0,120(sp)
    }

    while (hereWeAre) {
    d03e:	|  +----------------- bra.w d216 <stackToFile+0x2e4>
        if (saveEncoding) {
    d042:	|  |  /-------------> move.w 1b2b2 <saveEncoding>,d0
    d048:	|  |  |     /-------- beq.w d19a <stackToFile+0x268>
            switch (hereWeAre->thisVar.varType) {
    d04c:	|  |  |     |         movea.l 152(sp),a0
    d050:	|  |  |     |         move.l (a0),d0
    d052:	|  |  |     |         moveq #1,d1
    d054:	|  |  |     |         cmp.l d0,d1
    d056:	|  |  |     |     /-- beq.s d0a6 <stackToFile+0x174>
    d058:	|  |  |     |     |   moveq #3,d1
    d05a:	|  |  |     |     |   cmp.l d0,d1
    d05c:	|  |  |     |  /--|-- bne.w d168 <stackToFile+0x236>
                case SVT_STRING:
                    FPutC(fp, encode1);
    d060:	|  |  |     |  |  |   move.l 136(sp),76(sp)
    d066:	|  |  |     |  |  |   move.b 1b2b0 <encode1>,d0
    d06c:	|  |  |     |  |  |   ext.w d0
    d06e:	|  |  |     |  |  |   movea.w d0,a0
    d070:	|  |  |     |  |  |   move.l a0,72(sp)
    d074:	|  |  |     |  |  |   move.l 1b1aa <DOSBase>,d0
    d07a:	|  |  |     |  |  |   movea.l d0,a6
    d07c:	|  |  |     |  |  |   move.l 76(sp),d1
    d080:	|  |  |     |  |  |   move.l 72(sp),d2
    d084:	|  |  |     |  |  |   jsr -312(a6)
    d088:	|  |  |     |  |  |   move.l d0,68(sp)
                    writeStringEncoded(hereWeAre->thisVar.varData.theString, fp);
    d08c:	|  |  |     |  |  |   movea.l 152(sp),a0
    d090:	|  |  |     |  |  |   move.l 4(a0),d0
    d094:	|  |  |     |  |  |   move.l 136(sp),-(sp)
    d098:	|  |  |     |  |  |   move.l d0,-(sp)
    d09a:	|  |  |     |  |  |   jsr d248 <writeStringEncoded>
    d0a0:	|  |  |     |  |  |   addq.l #8,sp
                    break;
    d0a2:	|  |  |  /--|--|--|-- bra.w d20c <stackToFile+0x2da>

                case SVT_INT:
                    // Small enough to be stored as a char
                    if (hereWeAre->thisVar.varData.intValue >= 0 && hereWeAre->thisVar.varData.intValue < 256) {
    d0a6:	|  |  |  |  |  |  \-> movea.l 152(sp),a0
    d0aa:	|  |  |  |  |  |      move.l 4(a0),d0
    d0ae:	|  |  |  |  |  |  /-- bmi.s d11e <stackToFile+0x1ec>
    d0b0:	|  |  |  |  |  |  |   movea.l 152(sp),a0
    d0b4:	|  |  |  |  |  |  |   move.l 4(a0),d0
    d0b8:	|  |  |  |  |  |  |   cmpi.l #255,d0
    d0be:	|  |  |  |  |  |  +-- bgt.s d11e <stackToFile+0x1ec>
                        FPutC(fp, 2 ^ encode1);
    d0c0:	|  |  |  |  |  |  |   move.l 136(sp),64(sp)
    d0c6:	|  |  |  |  |  |  |   move.b 1b2b0 <encode1>,d0
    d0cc:	|  |  |  |  |  |  |   eori.b #2,d0
    d0d0:	|  |  |  |  |  |  |   ext.w d0
    d0d2:	|  |  |  |  |  |  |   movea.w d0,a0
    d0d4:	|  |  |  |  |  |  |   move.l a0,60(sp)
    d0d8:	|  |  |  |  |  |  |   move.l 1b1aa <DOSBase>,d0
    d0de:	|  |  |  |  |  |  |   movea.l d0,a6
    d0e0:	|  |  |  |  |  |  |   move.l 64(sp),d1
    d0e4:	|  |  |  |  |  |  |   move.l 60(sp),d2
    d0e8:	|  |  |  |  |  |  |   jsr -312(a6)
    d0ec:	|  |  |  |  |  |  |   move.l d0,56(sp)
                        FPutC(fp, hereWeAre->thisVar.varData.intValue);
    d0f0:	|  |  |  |  |  |  |   move.l 136(sp),52(sp)
    d0f6:	|  |  |  |  |  |  |   movea.l 152(sp),a0
    d0fa:	|  |  |  |  |  |  |   move.l 4(a0),48(sp)
    d100:	|  |  |  |  |  |  |   move.l 1b1aa <DOSBase>,d0
    d106:	|  |  |  |  |  |  |   movea.l d0,a6
    d108:	|  |  |  |  |  |  |   move.l 52(sp),d1
    d10c:	|  |  |  |  |  |  |   move.l 48(sp),d2
    d110:	|  |  |  |  |  |  |   jsr -312(a6)
    d114:	|  |  |  |  |  |  |   move.l d0,44(sp)
    d118:	|  |  |  |  |  |  |   nop
                    } else {
                        FPutC(fp, 1 ^ encode1);
                        put4bytes(hereWeAre->thisVar.varData.intValue, fp);
                    }
                    break;
    d11a:	|  |  |  +--|--|--|-- bra.w d20c <stackToFile+0x2da>
                        FPutC(fp, 1 ^ encode1);
    d11e:	|  |  |  |  |  |  \-> move.l 136(sp),40(sp)
    d124:	|  |  |  |  |  |      move.b 1b2b0 <encode1>,d0
    d12a:	|  |  |  |  |  |      eori.b #1,d0
    d12e:	|  |  |  |  |  |      ext.w d0
    d130:	|  |  |  |  |  |      movea.w d0,a0
    d132:	|  |  |  |  |  |      move.l a0,36(sp)
    d136:	|  |  |  |  |  |      move.l 1b1aa <DOSBase>,d0
    d13c:	|  |  |  |  |  |      movea.l d0,a6
    d13e:	|  |  |  |  |  |      move.l 40(sp),d1
    d142:	|  |  |  |  |  |      move.l 36(sp),d2
    d146:	|  |  |  |  |  |      jsr -312(a6)
    d14a:	|  |  |  |  |  |      move.l d0,32(sp)
                        put4bytes(hereWeAre->thisVar.varData.intValue, fp);
    d14e:	|  |  |  |  |  |      movea.l 152(sp),a0
    d152:	|  |  |  |  |  |      move.l 4(a0),d0
    d156:	|  |  |  |  |  |      move.l 136(sp),-(sp)
    d15a:	|  |  |  |  |  |      move.l d0,-(sp)
    d15c:	|  |  |  |  |  |      jsr 958 <put4bytes>
    d162:	|  |  |  |  |  |      addq.l #8,sp
                    break;
    d164:	|  |  |  +--|--|----- bra.w d20c <stackToFile+0x2da>

                default:
                    KPrintF("Can't create an encoded custom data file containing anything other than numbers and strings", filename);
    d168:	|  |  |  |  |  \----> move.l 160(sp),-(sp)
    d16c:	|  |  |  |  |         pea 17ef5 <PutChar+0x19b5>
    d172:	|  |  |  |  |         jsr 15bf0 <KPrintF>
    d178:	|  |  |  |  |         addq.l #8,sp
                    Close(fp);
    d17a:	|  |  |  |  |         move.l 136(sp),28(sp)
    d180:	|  |  |  |  |         move.l 1b1aa <DOSBase>,d0
    d186:	|  |  |  |  |         movea.l d0,a6
    d188:	|  |  |  |  |         move.l 28(sp),d1
    d18c:	|  |  |  |  |         jsr -36(a6)
    d190:	|  |  |  |  |         move.l d0,24(sp)
                    return FALSE;
    d194:	|  |  |  |  |         clr.w d0
    d196:	+--|--|--|--|-------- bra.w d23e <stackToFile+0x30c>
            }
        } else {
            char * makeSureItsText = getTextFromAnyVar(&hereWeAre->thisVar);
    d19a:	|  |  |  |  \-------> move.l 152(sp),d0
    d19e:	|  |  |  |            move.l d0,-(sp)
    d1a0:	|  |  |  |            jsr 13cd4 <getTextFromAnyVar>
    d1a6:	|  |  |  |            addq.l #4,sp
    d1a8:	|  |  |  |            move.l d0,100(sp)
            if (makeSureItsText == NULL) break;
    d1ac:	|  |  |  |     /----- beq.s d220 <stackToFile+0x2ee>
            FPrintf(fp, "%s\n", *makeSureItsText);
    d1ae:	|  |  |  |     |      movea.l 100(sp),a0
    d1b2:	|  |  |  |     |      move.b (a0),d0
    d1b4:	|  |  |  |     |      ext.w d0
    d1b6:	|  |  |  |     |      movea.w d0,a0
    d1b8:	|  |  |  |     |      move.l a0,12(sp)
    d1bc:	|  |  |  |     |      move.l 136(sp),96(sp)
    d1c2:	|  |  |  |     |      move.l #98129,92(sp)
    d1ca:	|  |  |  |     |      moveq #99,d0
    d1cc:	|  |  |  |     |      not.b d0
    d1ce:	|  |  |  |     |      add.l sp,d0
    d1d0:	|  |  |  |     |      addi.l #-144,d0
    d1d6:	|  |  |  |     |      move.l d0,88(sp)
    d1da:	|  |  |  |     |      move.l 1b1aa <DOSBase>,d0
    d1e0:	|  |  |  |     |      movea.l d0,a6
    d1e2:	|  |  |  |     |      move.l 96(sp),d1
    d1e6:	|  |  |  |     |      move.l 92(sp),d2
    d1ea:	|  |  |  |     |      move.l 88(sp),d3
    d1ee:	|  |  |  |     |      jsr -354(a6)
    d1f2:	|  |  |  |     |      move.l d0,84(sp)
            FreeVec(makeSureItsText);
    d1f6:	|  |  |  |     |      move.l 100(sp),80(sp)
    d1fc:	|  |  |  |     |      move.l 1b1a2 <SysBase>,d0
    d202:	|  |  |  |     |      movea.l d0,a6
    d204:	|  |  |  |     |      movea.l 80(sp),a1
    d208:	|  |  |  |     |      jsr -690(a6)
        }

        hereWeAre = hereWeAre->next;
    d20c:	|  |  |  \-----|----> movea.l 152(sp),a0
    d210:	|  |  |        |      move.l 8(a0),152(sp)
    while (hereWeAre) {
    d216:	|  \--|--------|----> tst.l 152(sp)
    d21a:	|     \--------|----- bne.w d042 <stackToFile+0x110>
    d21e:	|              |  /-- bra.s d222 <stackToFile+0x2f0>
            if (makeSureItsText == NULL) break;
    d220:	|              \--|-> nop
    }
    Close(fp);
    d222:	|                 \-> move.l 136(sp),20(sp)
    d228:	|                     move.l 1b1aa <DOSBase>,d0
    d22e:	|                     movea.l d0,a6
    d230:	|                     move.l 20(sp),d1
    d234:	|                     jsr -36(a6)
    d238:	|                     move.l d0,16(sp)
    return TRUE;
    d23c:	|                     moveq #1,d0
}
    d23e:	\-------------------> movem.l (sp)+,d2-d3/a6
    d242:	                      lea 144(sp),sp
    d246:	                      rts

0000d248 <writeStringEncoded>:

void writeStringEncoded (const char * s, BPTR fp) {
    d248:	       lea -20(sp),sp
    d24c:	       move.l a6,-(sp)
    d24e:	       move.l d2,-(sp)
	int a, len = strlen (s);
    d250:	       move.l 32(sp),-(sp)
    d254:	       jsr 12bea <strlen>
    d25a:	       addq.l #4,sp
    d25c:	       move.l d0,20(sp)

	put2bytes (len, fp);
    d260:	       move.l 36(sp),-(sp)
    d264:	       move.l 24(sp),-(sp)
    d268:	       jsr 8d0 <put2bytes>
    d26e:	       addq.l #8,sp
	for (a = 0; a < len; a ++) {
    d270:	       clr.l 24(sp)
    d274:	   /-- bra.s d2ca <writeStringEncoded+0x82>
		FPutC (fp, s[a] ^ encode1);
    d276:	/--|-> move.l 36(sp),16(sp)
    d27c:	|  |   move.l 24(sp),d0
    d280:	|  |   movea.l 32(sp),a0
    d284:	|  |   adda.l d0,a0
    d286:	|  |   move.b (a0),d1
    d288:	|  |   move.b 1b2b0 <encode1>,d0
    d28e:	|  |   eor.b d1,d0
    d290:	|  |   ext.w d0
    d292:	|  |   movea.w d0,a0
    d294:	|  |   move.l a0,12(sp)
    d298:	|  |   move.l 1b1aa <DOSBase>,d0
    d29e:	|  |   movea.l d0,a6
    d2a0:	|  |   move.l 16(sp),d1
    d2a4:	|  |   move.l 12(sp),d2
    d2a8:	|  |   jsr -312(a6)
    d2ac:	|  |   move.l d0,8(sp)
		encode1 += encode2;
    d2b0:	|  |   move.b 1b2b0 <encode1>,d0
    d2b6:	|  |   move.b d0,d1
    d2b8:	|  |   move.b 1b2b1 <encode2>,d0
    d2be:	|  |   add.b d1,d0
    d2c0:	|  |   move.b d0,1b2b0 <encode1>
	for (a = 0; a < len; a ++) {
    d2c6:	|  |   addq.l #1,24(sp)
    d2ca:	|  \-> move.l 24(sp),d0
    d2ce:	|      cmp.l 20(sp),d0
    d2d2:	\----- blt.s d276 <writeStringEncoded+0x2e>
	}
}
    d2d4:	       nop
    d2d6:	       nop
    d2d8:	       move.l (sp)+,d2
    d2da:	       movea.l (sp)+,a6
    d2dc:	       lea 20(sp),sp
    d2e0:	       rts

0000d2e2 <failSecurityCheck>:

#define builtIn(a) 			static enum builtReturn builtIn_ ## a (int numParams, struct loadedFunction * fun)

#define UNUSEDALL		 	(void) (0 && sizeof(numParams) && sizeof (fun));

BOOL failSecurityCheck(char * fn) {
    d2e2:	                   subq.l #4,sp
	if (fn == NULL) return TRUE;
    d2e4:	                   tst.l 8(sp)
    d2e8:	               /-- bne.s d2ee <failSecurityCheck+0xc>
    d2ea:	               |   moveq #1,d0
    d2ec:	/--------------|-- bra.s d36c <failSecurityCheck+0x8a>

	int a = 0;
    d2ee:	|              \-> clr.l (sp)

	while (fn[a]) {
    d2f0:	|     /----------- bra.s d35e <failSecurityCheck+0x7c>
		switch (fn[a]) {
    d2f2:	|  /--|----------> move.l (sp),d0
    d2f4:	|  |  |            movea.l 8(sp),a0
    d2f8:	|  |  |            adda.l d0,a0
    d2fa:	|  |  |            move.b (a0),d0
    d2fc:	|  |  |            ext.w d0
    d2fe:	|  |  |            movea.w d0,a0
    d300:	|  |  |            moveq #124,d0
    d302:	|  |  |            cmp.l a0,d0
    d304:	|  |  |     /----- beq.s d346 <failSecurityCheck+0x64>
    d306:	|  |  |     |      moveq #124,d1
    d308:	|  |  |     |      cmp.l a0,d1
    d30a:	|  |  |  /--|----- blt.s d35c <failSecurityCheck+0x7a>
    d30c:	|  |  |  |  |      moveq #92,d0
    d30e:	|  |  |  |  |      cmp.l a0,d0
    d310:	|  |  |  |  +----- beq.s d346 <failSecurityCheck+0x64>
    d312:	|  |  |  |  |      moveq #92,d1
    d314:	|  |  |  |  |      cmp.l a0,d1
    d316:	|  |  |  +--|----- blt.s d35c <failSecurityCheck+0x7a>
    d318:	|  |  |  |  |      moveq #60,d0
    d31a:	|  |  |  |  |      cmp.l a0,d0
    d31c:	|  |  |  |  |  /-- blt.s d33c <failSecurityCheck+0x5a>
    d31e:	|  |  |  |  |  |   moveq #34,d1
    d320:	|  |  |  |  |  |   cmp.l a0,d1
    d322:	|  |  |  +--|--|-- bgt.s d35c <failSecurityCheck+0x7a>
    d324:	|  |  |  |  |  |   moveq #-34,d1
    d326:	|  |  |  |  |  |   add.l a0,d1
    d328:	|  |  |  |  |  |   move.l #83894529,d0
    d32e:	|  |  |  |  |  |   lsr.l d1,d0
    d330:	|  |  |  |  |  |   moveq #1,d1
    d332:	|  |  |  |  |  |   and.l d1,d0
    d334:	|  |  |  |  |  |   sne d0
    d336:	|  |  |  |  |  |   neg.b d0
    d338:	|  |  |  |  +--|-- bne.s d346 <failSecurityCheck+0x64>
    d33a:	|  |  |  +--|--|-- bra.s d35c <failSecurityCheck+0x7a>
    d33c:	|  |  |  |  |  \-> lea -62(a0),a0
    d340:	|  |  |  |  |      moveq #1,d0
    d342:	|  |  |  |  |      cmp.l a0,d0
    d344:	|  |  |  +--|----- bcs.s d35c <failSecurityCheck+0x7a>
			case '?':
			case '"':
			case '<':
			case '>':
			case '|':
				KPrintF("Filenames may not contain the following characters: \n\n\\  /  :  \"  <  >  |  ?  *\n\nConsequently, the following filename is not allowed:", fn);
    d346:	|  |  |  |  \----> move.l 8(sp),-(sp)
    d34a:	|  |  |  |         pea 17f55 <PutChar+0x1a15>
    d350:	|  |  |  |         jsr 15bf0 <KPrintF>
    d356:	|  |  |  |         addq.l #8,sp
				return TRUE;
    d358:	|  |  |  |         moveq #1,d0
    d35a:	+--|--|--|-------- bra.s d36c <failSecurityCheck+0x8a>
		}
		a++;
    d35c:	|  |  |  \-------> addq.l #1,(sp)
	while (fn[a]) {
    d35e:	|  |  \----------> move.l (sp),d0
    d360:	|  |               movea.l 8(sp),a0
    d364:	|  |               adda.l d0,a0
    d366:	|  |               move.b (a0),d0
    d368:	|  \-------------- bne.s d2f2 <failSecurityCheck+0x10>
	}
	return FALSE;
    d36a:	|                  clr.w d0
}
    d36c:	\----------------> addq.l #4,sp
    d36e:	                   rts

0000d370 <sayCore>:

static enum builtReturn sayCore (int numParams, struct loadedFunction * fun, BOOL sayIt)
{
    d370:	             lea -24(sp),sp
    d374:	             move.l a6,-(sp)
    d376:	             move.l 40(sp),d0
    d37a:	             move.w d0,d0
    d37c:	             move.w d0,6(sp)
	int fileNum = -1;
    d380:	             moveq #-1,d0
    d382:	             move.l d0,12(sp)
	char * newText;
	int objT, p;
	killSpeechTimers ();
    d386:	             jsr 50f6 <killSpeechTimers>

	switch (numParams) {
    d38c:	             moveq #2,d0
    d38e:	             cmp.l 32(sp),d0
    d392:	      /----- beq.s d3d6 <sayCore+0x66>
    d394:	      |      moveq #3,d0
    d396:	      |      cmp.l 32(sp),d0
    d39a:	/-----|----- bne.w d4b8 <sayCore+0x148>
		case 3:
			if (! getValueType (&fileNum, SVT_FILE, &fun->stack->thisVar)) return BR_ERROR;
    d39e:	|     |      movea.l 36(sp),a0
    d3a2:	|     |      move.l 24(a0),d0
    d3a6:	|     |      move.l d0,-(sp)
    d3a8:	|     |      pea 5 <_start+0x5>
    d3ac:	|     |      lea 20(sp),a0
    d3b0:	|     |      move.l a0,-(sp)
    d3b2:	|     |      jsr 136fe <getValueType>
    d3b8:	|     |      lea 12(sp),sp
    d3bc:	|     |      tst.w d0
    d3be:	|     |  /-- bne.s d3c6 <sayCore+0x56>
    d3c0:	|     |  |   moveq #1,d0
    d3c2:	|  /--|--|-- bra.w d4c8 <sayCore+0x158>
			trimStack (&fun -> stack);
    d3c6:	|  |  |  \-> moveq #24,d0
    d3c8:	|  |  |      add.l 36(sp),d0
    d3cc:	|  |  |      move.l d0,-(sp)
    d3ce:	|  |  |      jsr 14082 <trimStack>
    d3d4:	|  |  |      addq.l #4,sp
			[[fallthrough]];

		case 2:
			newText = getTextFromAnyVar (&(fun -> stack->thisVar));
    d3d6:	|  |  \----> movea.l 36(sp),a0
    d3da:	|  |         move.l 24(a0),d0
    d3de:	|  |         move.l d0,-(sp)
    d3e0:	|  |         jsr 13cd4 <getTextFromAnyVar>
    d3e6:	|  |         addq.l #4,sp
    d3e8:	|  |         move.l d0,24(sp)
			if (! newText) return BR_ERROR;
    d3ec:	|  |     /-- bne.s d3f4 <sayCore+0x84>
    d3ee:	|  |     |   moveq #1,d0
    d3f0:	|  +-----|-- bra.w d4c8 <sayCore+0x158>
			trimStack (&fun -> stack);
    d3f4:	|  |     \-> moveq #24,d0
    d3f6:	|  |         add.l 36(sp),d0
    d3fa:	|  |         move.l d0,-(sp)
    d3fc:	|  |         jsr 14082 <trimStack>
    d402:	|  |         addq.l #4,sp
			if (! getValueType(&objT, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    d404:	|  |         movea.l 36(sp),a0
    d408:	|  |         move.l 24(a0),d0
    d40c:	|  |         move.l d0,-(sp)
    d40e:	|  |         pea 7 <_start+0x7>
    d412:	|  |         lea 16(sp),a0
    d416:	|  |         move.l a0,-(sp)
    d418:	|  |         jsr 136fe <getValueType>
    d41e:	|  |         lea 12(sp),sp
    d422:	|  |         tst.w d0
    d424:	|  |     /-- bne.s d42c <sayCore+0xbc>
    d426:	|  |     |   moveq #1,d0
    d428:	|  +-----|-- bra.w d4c8 <sayCore+0x158>
			if (! getValueType(&objT, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    d42c:	|  |     \-> movea.l 36(sp),a0
    d430:	|  |         move.l 24(a0),d0
    d434:	|  |         move.l d0,-(sp)
    d436:	|  |         pea 7 <_start+0x7>
    d43a:	|  |         lea 16(sp),a0
    d43e:	|  |         move.l a0,-(sp)
    d440:	|  |         jsr 136fe <getValueType>
    d446:	|  |         lea 12(sp),sp
    d44a:	|  |         tst.w d0
    d44c:	|  |     /-- bne.s d452 <sayCore+0xe2>
    d44e:	|  |     |   moveq #1,d0
    d450:	|  +-----|-- bra.s d4c8 <sayCore+0x158>
			trimStack (&fun -> stack);
    d452:	|  |     \-> moveq #24,d0
    d454:	|  |         add.l 36(sp),d0
    d458:	|  |         move.l d0,-(sp)
    d45a:	|  |         jsr 14082 <trimStack>
    d460:	|  |         addq.l #4,sp
			p = wrapSpeech (newText, objT, fileNum, sayIt);
    d462:	|  |         movea.w 6(sp),a0
    d466:	|  |         move.l 12(sp),d1
    d46a:	|  |         move.l 8(sp),d0
    d46e:	|  |         move.l a0,-(sp)
    d470:	|  |         move.l d1,-(sp)
    d472:	|  |         move.l d0,-(sp)
    d474:	|  |         move.l 36(sp),-(sp)
    d478:	|  |         jsr 7070 <wrapSpeech>
    d47e:	|  |         lea 16(sp),sp
    d482:	|  |         move.l d0,20(sp)
			fun -> timeLeft = p;
    d486:	|  |         movea.l 36(sp),a0
    d48a:	|  |         move.l 20(sp),12(a0)
			//debugOut ("BUILTIN: sayCore: %s (%i)\n", newText, p);
			fun -> isSpeech = TRUE;
    d490:	|  |         movea.l 36(sp),a0
    d494:	|  |         move.w #1,50(a0)
			FreeVec(newText);
    d49a:	|  |         move.l 24(sp),16(sp)
    d4a0:	|  |         move.l 1b1a2 <SysBase>,d0
    d4a6:	|  |         movea.l d0,a6
    d4a8:	|  |         movea.l 16(sp),a1
    d4ac:	|  |         jsr -690(a6)
			newText = NULL;
    d4b0:	|  |         clr.l 24(sp)
			return BR_KEEP_AND_PAUSE;
    d4b4:	|  |         moveq #0,d0
    d4b6:	|  +-------- bra.s d4c8 <sayCore+0x158>
	}

	KPrintF("Function should have either 2 or 3 parameters");
    d4b8:	\--|-------> pea 17fdb <PutChar+0x1a9b>
    d4be:	   |         jsr 15bf0 <KPrintF>
    d4c4:	   |         addq.l #4,sp
	return BR_ERROR;
    d4c6:	   |         moveq #1,d0
}
    d4c8:	   \-------> movea.l (sp)+,a6
    d4ca:	             lea 24(sp),sp
    d4ce:	             rts

0000d4d0 <builtIn_say>:

builtIn(say)
{
	UNUSEDALL
	return sayCore (numParams, fun, TRUE);
    d4d0:	pea 1 <_start+0x1>
    d4d4:	move.l 12(sp),-(sp)
    d4d8:	move.l 12(sp),-(sp)
    d4dc:	jsr d370 <sayCore>
    d4e2:	lea 12(sp),sp
}
    d4e6:	rts

0000d4e8 <builtIn_think>:

builtIn(think)
{
	UNUSEDALL
	return sayCore (numParams, fun, FALSE);
    d4e8:	clr.l -(sp)
    d4ea:	move.l 12(sp),-(sp)
    d4ee:	move.l 12(sp),-(sp)
    d4f2:	jsr d370 <sayCore>
    d4f8:	lea 12(sp),sp
}
    d4fc:	rts

0000d4fe <builtIn_freeze>:

builtIn(freeze)
{
	UNUSEDALL
	freeze ();
    d4fe:	jsr 140ca <freeze>
	freezeSubs (); 
    d504:	jsr 46e6 <freezeSubs>
	fun -> freezerLevel = 0;
    d50a:	movea.l 8(sp),a0
    d50e:	clr.b 56(a0)
	return BR_CONTINUE;
    d512:	moveq #2,d0
}
    d514:	rts

0000d516 <builtIn_unfreeze>:
builtIn(unfreeze)
{
	UNUSEDALL
	/*unfreeze ();
	unfreezeSubs (); Amiga todo: Implement*/
	return BR_CONTINUE;
    d516:	moveq #2,d0
}
    d518:	rts

0000d51a <builtIn_howFrozen>:
builtIn(howFrozen)
{
	UNUSEDALL
	/*setVariable (&fun -> reg, SVT_INT, howFrozen ());
	return BR_CONTINUE; Amiga todo implement*/
}
    d51a:	nop
    d51c:	rts

0000d51e <builtIn_setCursor>:

builtIn(setCursor)
{
    d51e:	subq.l #4,sp
	UNUSEDALL
	struct personaAnimation * aa = getAnimationFromVar (&(fun -> stack -> thisVar));
    d520:	movea.l 12(sp),a0
    d524:	move.l 24(a0),d0
    d528:	move.l d0,-(sp)
    d52a:	jsr 13bd6 <getAnimationFromVar>
    d530:	addq.l #4,sp
    d532:	move.l d0,(sp)
	pickAnimCursor (aa);
    d534:	move.l (sp),-(sp)
    d536:	jsr d6c <pickAnimCursor>
    d53c:	addq.l #4,sp
	trimStack (&fun -> stack);
    d53e:	moveq #24,d0
    d540:	add.l 12(sp),d0
    d544:	move.l d0,-(sp)
    d546:	jsr 14082 <trimStack>
    d54c:	addq.l #4,sp
	return BR_CONTINUE;
    d54e:	moveq #2,d0
}
    d550:	addq.l #4,sp
    d552:	rts

0000d554 <builtIn_getMouseX>:

builtIn(getMouseX)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseX + cameraX);
    d554:	move.l 1b15e <input+0xa>,d1
    d55a:	move.l 1b2b4 <cameraX>,d0
    d560:	add.l d0,d1
    d562:	moveq #28,d0
    d564:	add.l 8(sp),d0
    d568:	move.l d1,-(sp)
    d56a:	pea 1 <_start+0x1>
    d56e:	move.l d0,-(sp)
    d570:	jsr 13ff0 <setVariable>
    d576:	lea 12(sp),sp
	return BR_CONTINUE;
    d57a:	moveq #2,d0
}
    d57c:	rts

0000d57e <builtIn_getMouseY>:

builtIn(getMouseY)
{

	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseY + cameraY);
    d57e:	move.l 1b162 <input+0xe>,d1
    d584:	move.l 1b2b8 <cameraY>,d0
    d58a:	add.l d0,d1
    d58c:	moveq #28,d0
    d58e:	add.l 8(sp),d0
    d592:	move.l d1,-(sp)
    d594:	pea 1 <_start+0x1>
    d598:	move.l d0,-(sp)
    d59a:	jsr 13ff0 <setVariable>
    d5a0:	lea 12(sp),sp
	return BR_CONTINUE;
    d5a4:	moveq #2,d0
}
    d5a6:	rts

0000d5a8 <builtIn_getMouseScreenX>:

builtIn(getMouseScreenX)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseX*cameraZoom);
    d5a8:	move.l 1b15e <input+0xa>,d0
    d5ae:	move.l d0,-(sp)
    d5b0:	jsr 15ea8 <__floatsisf>
    d5b6:	addq.l #4,sp
    d5b8:	move.l d0,d1
    d5ba:	move.l 1ab42 <cameraZoom>,d0
    d5c0:	move.l d0,-(sp)
    d5c2:	move.l d1,-(sp)
    d5c4:	jsr 15f5a <__mulsf3>
    d5ca:	addq.l #8,sp
    d5cc:	move.l d0,-(sp)
    d5ce:	jsr 15e40 <__fixsfsi>
    d5d4:	addq.l #4,sp
    d5d6:	move.l d0,d1
    d5d8:	moveq #28,d0
    d5da:	add.l 8(sp),d0
    d5de:	move.l d1,-(sp)
    d5e0:	pea 1 <_start+0x1>
    d5e4:	move.l d0,-(sp)
    d5e6:	jsr 13ff0 <setVariable>
    d5ec:	lea 12(sp),sp
	return BR_CONTINUE;
    d5f0:	moveq #2,d0
}
    d5f2:	rts

0000d5f4 <builtIn_getMouseScreenY>:

builtIn(getMouseScreenY)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseY*cameraZoom);
    d5f4:	move.l 1b162 <input+0xe>,d0
    d5fa:	move.l d0,-(sp)
    d5fc:	jsr 15ea8 <__floatsisf>
    d602:	addq.l #4,sp
    d604:	move.l d0,d1
    d606:	move.l 1ab42 <cameraZoom>,d0
    d60c:	move.l d0,-(sp)
    d60e:	move.l d1,-(sp)
    d610:	jsr 15f5a <__mulsf3>
    d616:	addq.l #8,sp
    d618:	move.l d0,-(sp)
    d61a:	jsr 15e40 <__fixsfsi>
    d620:	addq.l #4,sp
    d622:	move.l d0,d1
    d624:	moveq #28,d0
    d626:	add.l 8(sp),d0
    d62a:	move.l d1,-(sp)
    d62c:	pea 1 <_start+0x1>
    d630:	move.l d0,-(sp)
    d632:	jsr 13ff0 <setVariable>
    d638:	lea 12(sp),sp
	return BR_CONTINUE;
    d63c:	moveq #2,d0
}
    d63e:	rts

0000d640 <builtIn_getStatusText>:

builtIn(getStatusText)
{
	UNUSEDALL
	makeTextVar (&fun -> reg, statusBarText ());
    d640:	jsr 6b24 <statusBarText>
    d646:	move.l d0,d1
    d648:	moveq #28,d0
    d64a:	add.l 8(sp),d0
    d64e:	move.l d1,-(sp)
    d650:	move.l d0,-(sp)
    d652:	jsr 13920 <makeTextVar>
    d658:	addq.l #8,sp
	return BR_CONTINUE;
    d65a:	moveq #2,d0
}
    d65c:	rts

0000d65e <builtIn_getMatchingFiles>:

builtIn(getMatchingFiles)
{
    d65e:	       lea -20(sp),sp
    d662:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    d664:	       movea.l 32(sp),a0
    d668:	       move.l 24(a0),d0
    d66c:	       move.l d0,-(sp)
    d66e:	       jsr 13cd4 <getTextFromAnyVar>
    d674:	       addq.l #4,sp
    d676:	       move.l d0,20(sp)
	if (! newText) return BR_ERROR;
    d67a:	   /-- bne.s d682 <builtIn_getMatchingFiles+0x24>
    d67c:	   |   moveq #1,d0
    d67e:	/--|-- bra.w d744 <builtIn_getMatchingFiles+0xe6>
	trimStack (&fun -> stack);
    d682:	|  \-> moveq #24,d0
    d684:	|      add.l 32(sp),d0
    d688:	|      move.l d0,-(sp)
    d68a:	|      jsr 14082 <trimStack>
    d690:	|      addq.l #4,sp
	unlinkVar (&fun -> reg);
    d692:	|      moveq #28,d0
    d694:	|      add.l 32(sp),d0
    d698:	|      move.l d0,-(sp)
    d69a:	|      jsr 1394c <unlinkVar>
    d6a0:	|      addq.l #4,sp

	// Return value
	fun -> reg.varType = SVT_STACK;
    d6a2:	|      movea.l 32(sp),a0
    d6a6:	|      moveq #6,d0
    d6a8:	|      move.l d0,28(a0)
	fun -> reg.varData.theStack = AllocVec(sizeof( struct stackHandler),MEMF_ANY);
    d6ac:	|      moveq #12,d0
    d6ae:	|      move.l d0,16(sp)
    d6b2:	|      clr.l 12(sp)
    d6b6:	|      move.l 1b1a2 <SysBase>,d0
    d6bc:	|      movea.l d0,a6
    d6be:	|      move.l 16(sp),d0
    d6c2:	|      move.l 12(sp),d1
    d6c6:	|      jsr -684(a6)
    d6ca:	|      move.l d0,8(sp)
    d6ce:	|      move.l 8(sp),d0
    d6d2:	|      movea.l 32(sp),a0
    d6d6:	|      move.l d0,32(a0)
	if (!(&fun -> reg.varData.theStack)) return BR_ERROR;
    d6da:	|      moveq #32,d0
    d6dc:	|      add.l 32(sp),d0
    d6e0:	|  /-- bne.s d6e6 <builtIn_getMatchingFiles+0x88>
    d6e2:	|  |   moveq #1,d0
    d6e4:	+--|-- bra.s d744 <builtIn_getMatchingFiles+0xe6>
	fun -> reg.varData.theStack -> first = NULL;
    d6e6:	|  \-> movea.l 32(sp),a0
    d6ea:	|      movea.l 32(a0),a0
    d6ee:	|      clr.l (a0)
	fun -> reg.varData.theStack -> last = NULL;
    d6f0:	|      movea.l 32(sp),a0
    d6f4:	|      movea.l 32(a0),a0
    d6f8:	|      clr.l 4(a0)
	fun -> reg.varData.theStack -> timesUsed = 1;
    d6fc:	|      movea.l 32(sp),a0
    d700:	|      movea.l 32(a0),a0
    d704:	|      moveq #1,d0
    d706:	|      move.l d0,8(a0)
	if (! getSavedGamesStack (fun -> reg.varData.theStack, newText)) return BR_ERROR;
    d70a:	|      movea.l 32(sp),a0
    d70e:	|      move.l 32(a0),d0
    d712:	|      move.l 20(sp),-(sp)
    d716:	|      move.l d0,-(sp)
    d718:	|      jsr 134ba <getSavedGamesStack>
    d71e:	|      addq.l #8,sp
    d720:	|      tst.w d0
    d722:	|  /-- bne.s d728 <builtIn_getMatchingFiles+0xca>
    d724:	|  |   moveq #1,d0
    d726:	+--|-- bra.s d744 <builtIn_getMatchingFiles+0xe6>
	FreeVec(newText);
    d728:	|  \-> move.l 20(sp),4(sp)
    d72e:	|      move.l 1b1a2 <SysBase>,d0
    d734:	|      movea.l d0,a6
    d736:	|      movea.l 4(sp),a1
    d73a:	|      jsr -690(a6)
	newText = NULL;
    d73e:	|      clr.l 20(sp)
	return BR_CONTINUE;
    d742:	|      moveq #2,d0
}
    d744:	\----> movea.l (sp)+,a6
    d746:	       lea 20(sp),sp
    d74a:	       rts

0000d74c <builtIn_saveGame>:

builtIn(saveGame)
{
    d74c:	       lea -12(sp),sp
    d750:	       move.l a6,-(sp)

    /*if (frozenStuff) {
        fatal ("Can't save game state while the engine is frozen");
    }*/

    loadNow = getTextFromAnyVar(&(fun->stack->thisVar));
    d752:	       movea.l 24(sp),a0
    d756:	       move.l 24(a0),d0
    d75a:	       move.l d0,-(sp)
    d75c:	       jsr 13cd4 <getTextFromAnyVar>
    d762:	       addq.l #4,sp
    d764:	       move.l d0,1b16e <loadNow>
    trimStack(&fun->stack);
    d76a:	       moveq #24,d0
    d76c:	       add.l 24(sp),d0
    d770:	       move.l d0,-(sp)
    d772:	       jsr 14082 <trimStack>
    d778:	       addq.l #4,sp

    char *aaaaa = encodeFilename(loadNow);
    d77a:	       move.l 1b16e <loadNow>,d0
    d780:	       move.l d0,-(sp)
    d782:	       jsr 2fe <encodeFilename>
    d788:	       addq.l #4,sp
    d78a:	       move.l d0,12(sp)
    FreeVec(loadNow);
    d78e:	       move.l 1b16e <loadNow>,8(sp)
    d796:	       move.l 1b1a2 <SysBase>,d0
    d79c:	       movea.l d0,a6
    d79e:	       movea.l 8(sp),a1
    d7a2:	       jsr -690(a6)
    if (failSecurityCheck(aaaaa)) return BR_ERROR; // Won't fail if encoded, how cool is that? OK, not very.
    d7a6:	       move.l 12(sp),-(sp)
    d7aa:	       jsr d2e2 <failSecurityCheck>
    d7b0:	       addq.l #4,sp
    d7b2:	       tst.w d0
    d7b4:	   /-- beq.s d7ba <builtIn_saveGame+0x6e>
    d7b6:	   |   moveq #1,d0
    d7b8:	/--|-- bra.s d80a <builtIn_saveGame+0xbe>

    loadNow = joinStrings(":", aaaaa);
    d7ba:	|  \-> move.l 12(sp),-(sp)
    d7be:	|      pea 18009 <PutChar+0x1ac9>
    d7c4:	|      jsr 12c2a <joinStrings>
    d7ca:	|      addq.l #8,sp
    d7cc:	|      move.l d0,1b16e <loadNow>
    FreeVec(aaaaa);
    d7d2:	|      move.l 12(sp),4(sp)
    d7d8:	|      move.l 1b1a2 <SysBase>,d0
    d7de:	|      movea.l d0,a6
    d7e0:	|      movea.l 4(sp),a1
    d7e4:	|      jsr -690(a6)

    setVariable(&fun->reg, SVT_INT, 0);
    d7e8:	|      moveq #28,d0
    d7ea:	|      add.l 24(sp),d0
    d7ee:	|      clr.l -(sp)
    d7f0:	|      pea 1 <_start+0x1>
    d7f4:	|      move.l d0,-(sp)
    d7f6:	|      jsr 13ff0 <setVariable>
    d7fc:	|      lea 12(sp),sp
    saverFunc = fun;
    d800:	|      move.l 24(sp),1b2c4 <saverFunc>
    return BR_KEEP_AND_PAUSE;
    d808:	|      moveq #0,d0
}
    d80a:	\----> movea.l (sp)+,a6
    d80c:	       lea 12(sp),sp
    d810:	       rts

0000d812 <builtIn_fileExists>:

builtIn(fileExists)
{
    d812:	       lea -36(sp),sp
    d816:	       move.l a6,-(sp)
    d818:	       move.l d2,-(sp)
    UNUSEDALL
    loadNow = getTextFromAnyVar(&(fun->stack->thisVar));
    d81a:	       movea.l 52(sp),a0
    d81e:	       move.l 24(a0),d0
    d822:	       move.l d0,-(sp)
    d824:	       jsr 13cd4 <getTextFromAnyVar>
    d82a:	       addq.l #4,sp
    d82c:	       move.l d0,1b16e <loadNow>
    trimStack(&fun->stack);
    d832:	       moveq #24,d0
    d834:	       add.l 52(sp),d0
    d838:	       move.l d0,-(sp)
    d83a:	       jsr 14082 <trimStack>
    d840:	       addq.l #4,sp
    char *aaaaa = encodeFilename(loadNow);
    d842:	       move.l 1b16e <loadNow>,d0
    d848:	       move.l d0,-(sp)
    d84a:	       jsr 2fe <encodeFilename>
    d850:	       addq.l #4,sp
    d852:	       move.l d0,40(sp)
    FreeVec(loadNow);
    d856:	       move.l 1b16e <loadNow>,36(sp)
    d85e:	       move.l 1b1a2 <SysBase>,d0
    d864:	       movea.l d0,a6
    d866:	       movea.l 36(sp),a1
    d86a:	       jsr -690(a6)
    if (failSecurityCheck(aaaaa)) return BR_ERROR;
    d86e:	       move.l 40(sp),-(sp)
    d872:	       jsr d2e2 <failSecurityCheck>
    d878:	       addq.l #4,sp
    d87a:	       tst.w d0
    d87c:	   /-- beq.s d884 <builtIn_fileExists+0x72>
    d87e:	   |   moveq #1,d0
    d880:	/--|-- bra.w d924 <builtIn_fileExists+0x112>
    BPTR fp = Open(aaaaa, MODE_OLDFILE);
    d884:	|  \-> move.l 40(sp),32(sp)
    d88a:	|      move.l #1005,28(sp)
    d892:	|      move.l 1b1aa <DOSBase>,d0
    d898:	|      movea.l d0,a6
    d89a:	|      move.l 32(sp),d1
    d89e:	|      move.l 28(sp),d2
    d8a2:	|      jsr -30(a6)
    d8a6:	|      move.l d0,24(sp)
    d8aa:	|      move.l 24(sp),d0
    d8ae:	|      move.l d0,20(sp)
    if (!fp) {        
    d8b2:	|  /-- bne.s d8c2 <builtIn_fileExists+0xb0>
        KPrintF("Can't get current directory.\n");      
    d8b4:	|  |   pea 1800b <PutChar+0x1acb>
    d8ba:	|  |   jsr 15bf0 <KPrintF>
    d8c0:	|  |   addq.l #4,sp
    }
    // Return value
    setVariable(&fun->reg, SVT_INT, (fp != NULL));
    d8c2:	|  \-> tst.l 20(sp)
    d8c6:	|      sne d0
    d8c8:	|      neg.b d0
    d8ca:	|      moveq #0,d1
    d8cc:	|      move.b d0,d1
    d8ce:	|      moveq #28,d0
    d8d0:	|      add.l 52(sp),d0
    d8d4:	|      move.l d1,-(sp)
    d8d6:	|      pea 1 <_start+0x1>
    d8da:	|      move.l d0,-(sp)
    d8dc:	|      jsr 13ff0 <setVariable>
    d8e2:	|      lea 12(sp),sp
    if (fp) Close(fp);
    d8e6:	|      tst.l 20(sp)
    d8ea:	|  /-- beq.s d906 <builtIn_fileExists+0xf4>
    d8ec:	|  |   move.l 20(sp),16(sp)
    d8f2:	|  |   move.l 1b1aa <DOSBase>,d0
    d8f8:	|  |   movea.l d0,a6
    d8fa:	|  |   move.l 16(sp),d1
    d8fe:	|  |   jsr -36(a6)
    d902:	|  |   move.l d0,12(sp)
    FreeVec(aaaaa);
    d906:	|  \-> move.l 40(sp),8(sp)
    d90c:	|      move.l 1b1a2 <SysBase>,d0
    d912:	|      movea.l d0,a6
    d914:	|      movea.l 8(sp),a1
    d918:	|      jsr -690(a6)
    loadNow = NULL;
    d91c:	|      clr.l 1b16e <loadNow>
    return BR_CONTINUE;
    d922:	|      moveq #2,d0
}
    d924:	\----> move.l (sp)+,d2
    d926:	       movea.l (sp)+,a6
    d928:	       lea 36(sp),sp
    d92c:	       rts

0000d92e <builtIn_loadGame>:

builtIn(loadGame)
{
    d92e:	       lea -36(sp),sp
    d932:	       move.l a6,-(sp)
    d934:	       move.l d2,-(sp)
    UNUSEDALL
    char *aaaaa = getTextFromAnyVar(&(fun->stack->thisVar));
    d936:	       movea.l 52(sp),a0
    d93a:	       move.l 24(a0),d0
    d93e:	       move.l d0,-(sp)
    d940:	       jsr 13cd4 <getTextFromAnyVar>
    d946:	       addq.l #4,sp
    d948:	       move.l d0,40(sp)
    trimStack(&fun->stack);
    d94c:	       moveq #24,d0
    d94e:	       add.l 52(sp),d0
    d952:	       move.l d0,-(sp)
    d954:	       jsr 14082 <trimStack>
    d95a:	       addq.l #4,sp
    loadNow = encodeFilename(aaaaa);
    d95c:	       move.l 40(sp),-(sp)
    d960:	       jsr 2fe <encodeFilename>
    d966:	       addq.l #4,sp
    d968:	       move.l d0,1b16e <loadNow>
    FreeVec(aaaaa);
    d96e:	       move.l 40(sp),36(sp)
    d974:	       move.l 1b1a2 <SysBase>,d0
    d97a:	       movea.l d0,a6
    d97c:	       movea.l 36(sp),a1
    d980:	       jsr -690(a6)

    /*if (frozenStuff) {
        fatal("Can't load a saved game while the engine is frozen");
    }*/

    if (failSecurityCheck(loadNow)) return BR_ERROR;
    d984:	       move.l 1b16e <loadNow>,d0
    d98a:	       move.l d0,-(sp)
    d98c:	       jsr d2e2 <failSecurityCheck>
    d992:	       addq.l #4,sp
    d994:	       tst.w d0
    d996:	   /-- beq.s d99c <builtIn_loadGame+0x6e>
    d998:	   |   moveq #1,d0
    d99a:	/--|-- bra.s da0c <builtIn_loadGame+0xde>
    BPTR fp = Open(loadNow, MODE_OLDFILE);
    d99c:	|  \-> move.l 1b16e <loadNow>,32(sp)
    d9a4:	|      move.l #1005,28(sp)
    d9ac:	|      move.l 1b1aa <DOSBase>,d0
    d9b2:	|      movea.l d0,a6
    d9b4:	|      move.l 32(sp),d1
    d9b8:	|      move.l 28(sp),d2
    d9bc:	|      jsr -30(a6)
    d9c0:	|      move.l d0,24(sp)
    d9c4:	|      move.l 24(sp),d0
    d9c8:	|      move.l d0,20(sp)
    if (fp) {
    d9cc:	|  /-- beq.s d9ec <builtIn_loadGame+0xbe>
        Close(fp);
    d9ce:	|  |   move.l 20(sp),12(sp)
    d9d4:	|  |   move.l 1b1aa <DOSBase>,d0
    d9da:	|  |   movea.l d0,a6
    d9dc:	|  |   move.l 12(sp),d1
    d9e0:	|  |   jsr -36(a6)
    d9e4:	|  |   move.l d0,8(sp)
        return BR_KEEP_AND_PAUSE;
    d9e8:	|  |   moveq #0,d0
    d9ea:	+--|-- bra.s da0c <builtIn_loadGame+0xde>
    }
    FreeVec(loadNow);
    d9ec:	|  \-> move.l 1b16e <loadNow>,16(sp)
    d9f4:	|      move.l 1b1a2 <SysBase>,d0
    d9fa:	|      movea.l d0,a6
    d9fc:	|      movea.l 16(sp),a1
    da00:	|      jsr -690(a6)
    loadNow = NULL;
    da04:	|      clr.l 1b16e <loadNow>
    return BR_CONTINUE;
    da0a:	|      moveq #2,d0
}
    da0c:	\----> move.l (sp)+,d2
    da0e:	       movea.l (sp)+,a6
    da10:	       lea 36(sp),sp
    da14:	       rts

0000da16 <builtIn_blankScreen>:
#pragma mark Background image - Painting

builtIn(blankScreen)
{
	UNUSEDALL
	blankScreen (0, 0, sceneWidth, sceneHeight);
    da16:	move.l 1b29a <sceneHeight>,d0
    da1c:	move.l d0,d1
    da1e:	move.l 1b296 <sceneWidth>,d0
    da24:	move.l d1,-(sp)
    da26:	move.l d0,-(sp)
    da28:	clr.l -(sp)
    da2a:	clr.l -(sp)
    da2c:	jsr c1d6 <blankScreen>
    da32:	lea 16(sp),sp
	return BR_CONTINUE;
    da36:	moveq #2,d0
}
    da38:	rts

0000da3a <builtIn_blankArea>:

builtIn(blankArea)
{
    da3a:	       lea -16(sp),sp
	UNUSEDALL
	int x1, y1, x2, y2;
	if (! getValueType (&y2, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    da3e:	       movea.l 24(sp),a0
    da42:	       move.l 24(a0),d0
    da46:	       move.l d0,-(sp)
    da48:	       pea 1 <_start+0x1>
    da4c:	       lea 8(sp),a0
    da50:	       move.l a0,-(sp)
    da52:	       jsr 136fe <getValueType>
    da58:	       lea 12(sp),sp
    da5c:	       tst.w d0
    da5e:	   /-- bne.s da66 <builtIn_blankArea+0x2c>
    da60:	   |   moveq #1,d0
    da62:	/--|-- bra.w db3c <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    da66:	|  \-> moveq #24,d0
    da68:	|      add.l 24(sp),d0
    da6c:	|      move.l d0,-(sp)
    da6e:	|      jsr 14082 <trimStack>
    da74:	|      addq.l #4,sp
	if (! getValueType (&x2, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    da76:	|      movea.l 24(sp),a0
    da7a:	|      move.l 24(a0),d0
    da7e:	|      move.l d0,-(sp)
    da80:	|      pea 1 <_start+0x1>
    da84:	|      lea 12(sp),a0
    da88:	|      move.l a0,-(sp)
    da8a:	|      jsr 136fe <getValueType>
    da90:	|      lea 12(sp),sp
    da94:	|      tst.w d0
    da96:	|  /-- bne.s da9e <builtIn_blankArea+0x64>
    da98:	|  |   moveq #1,d0
    da9a:	+--|-- bra.w db3c <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    da9e:	|  \-> moveq #24,d0
    daa0:	|      add.l 24(sp),d0
    daa4:	|      move.l d0,-(sp)
    daa6:	|      jsr 14082 <trimStack>
    daac:	|      addq.l #4,sp
	if (! getValueType (&y1, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    daae:	|      movea.l 24(sp),a0
    dab2:	|      move.l 24(a0),d0
    dab6:	|      move.l d0,-(sp)
    dab8:	|      pea 1 <_start+0x1>
    dabc:	|      moveq #16,d0
    dabe:	|      add.l sp,d0
    dac0:	|      move.l d0,-(sp)
    dac2:	|      jsr 136fe <getValueType>
    dac8:	|      lea 12(sp),sp
    dacc:	|      tst.w d0
    dace:	|  /-- bne.s dad4 <builtIn_blankArea+0x9a>
    dad0:	|  |   moveq #1,d0
    dad2:	+--|-- bra.s db3c <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    dad4:	|  \-> moveq #24,d0
    dad6:	|      add.l 24(sp),d0
    dada:	|      move.l d0,-(sp)
    dadc:	|      jsr 14082 <trimStack>
    dae2:	|      addq.l #4,sp
	if (! getValueType (&x1, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    dae4:	|      movea.l 24(sp),a0
    dae8:	|      move.l 24(a0),d0
    daec:	|      move.l d0,-(sp)
    daee:	|      pea 1 <_start+0x1>
    daf2:	|      moveq #20,d0
    daf4:	|      add.l sp,d0
    daf6:	|      move.l d0,-(sp)
    daf8:	|      jsr 136fe <getValueType>
    dafe:	|      lea 12(sp),sp
    db02:	|      tst.w d0
    db04:	|  /-- bne.s db0a <builtIn_blankArea+0xd0>
    db06:	|  |   moveq #1,d0
    db08:	+--|-- bra.s db3c <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    db0a:	|  \-> moveq #24,d0
    db0c:	|      add.l 24(sp),d0
    db10:	|      move.l d0,-(sp)
    db12:	|      jsr 14082 <trimStack>
    db18:	|      addq.l #4,sp
	blankScreen (x1, y1, x2, y2);
    db1a:	|      movea.l (sp),a1
    db1c:	|      movea.l 4(sp),a0
    db20:	|      move.l 8(sp),d1
    db24:	|      move.l 12(sp),d0
    db28:	|      move.l a1,-(sp)
    db2a:	|      move.l a0,-(sp)
    db2c:	|      move.l d1,-(sp)
    db2e:	|      move.l d0,-(sp)
    db30:	|      jsr c1d6 <blankScreen>
    db36:	|      lea 16(sp),sp
	return BR_CONTINUE;
    db3a:	|      moveq #2,d0
}
    db3c:	\----> lea 16(sp),sp
    db40:	       rts

0000db42 <builtIn_darkBackground>:

builtIn(darkBackground)
{
	UNUSEDALL
	darkScreen ();
    db42:	jsr c1ea <darkScreen>
	return BR_CONTINUE;
    db48:	moveq #2,d0
}
    db4a:	rts

0000db4c <builtIn_addOverlay>:

builtIn(addOverlay)
{
    db4c:	       lea -12(sp),sp
	UNUSEDALL
	int fileNumber, xPos, yPos;
	if (! getValueType(&yPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    db50:	       movea.l 20(sp),a0
    db54:	       move.l 24(a0),d0
    db58:	       move.l d0,-(sp)
    db5a:	       pea 1 <_start+0x1>
    db5e:	       lea 8(sp),a0
    db62:	       move.l a0,-(sp)
    db64:	       jsr 136fe <getValueType>
    db6a:	       lea 12(sp),sp
    db6e:	       tst.w d0
    db70:	   /-- bne.s db78 <builtIn_addOverlay+0x2c>
    db72:	   |   moveq #1,d0
    db74:	/--|-- bra.w dc10 <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    db78:	|  \-> moveq #24,d0
    db7a:	|      add.l 20(sp),d0
    db7e:	|      move.l d0,-(sp)
    db80:	|      jsr 14082 <trimStack>
    db86:	|      addq.l #4,sp
	if (! getValueType(&xPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    db88:	|      movea.l 20(sp),a0
    db8c:	|      move.l 24(a0),d0
    db90:	|      move.l d0,-(sp)
    db92:	|      pea 1 <_start+0x1>
    db96:	|      moveq #12,d0
    db98:	|      add.l sp,d0
    db9a:	|      move.l d0,-(sp)
    db9c:	|      jsr 136fe <getValueType>
    dba2:	|      lea 12(sp),sp
    dba6:	|      tst.w d0
    dba8:	|  /-- bne.s dbae <builtIn_addOverlay+0x62>
    dbaa:	|  |   moveq #1,d0
    dbac:	+--|-- bra.s dc10 <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    dbae:	|  \-> moveq #24,d0
    dbb0:	|      add.l 20(sp),d0
    dbb4:	|      move.l d0,-(sp)
    dbb6:	|      jsr 14082 <trimStack>
    dbbc:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    dbbe:	|      movea.l 20(sp),a0
    dbc2:	|      move.l 24(a0),d0
    dbc6:	|      move.l d0,-(sp)
    dbc8:	|      pea 5 <_start+0x5>
    dbcc:	|      moveq #16,d0
    dbce:	|      add.l sp,d0
    dbd0:	|      move.l d0,-(sp)
    dbd2:	|      jsr 136fe <getValueType>
    dbd8:	|      lea 12(sp),sp
    dbdc:	|      tst.w d0
    dbde:	|  /-- bne.s dbe4 <builtIn_addOverlay+0x98>
    dbe0:	|  |   moveq #1,d0
    dbe2:	+--|-- bra.s dc10 <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    dbe4:	|  \-> moveq #24,d0
    dbe6:	|      add.l 20(sp),d0
    dbea:	|      move.l d0,-(sp)
    dbec:	|      jsr 14082 <trimStack>
    dbf2:	|      addq.l #4,sp
	loadBackDrop (fileNumber, xPos, yPos);
    dbf4:	|      movea.l (sp),a0
    dbf6:	|      move.l 4(sp),d1
    dbfa:	|      move.l 8(sp),d0
    dbfe:	|      move.l a0,-(sp)
    dc00:	|      move.l d1,-(sp)
    dc02:	|      move.l d0,-(sp)
    dc04:	|      jsr c308 <loadBackDrop>
    dc0a:	|      lea 12(sp),sp
	return BR_CONTINUE;
    dc0e:	|      moveq #2,d0
}
    dc10:	\----> lea 12(sp),sp
    dc14:	       rts

0000dc16 <builtIn_mixOverlay>:

builtIn(mixOverlay)
{
    dc16:	       lea -12(sp),sp
	UNUSEDALL
	int fileNumber, xPos, yPos;
	if (! getValueType(&yPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    dc1a:	       movea.l 20(sp),a0
    dc1e:	       move.l 24(a0),d0
    dc22:	       move.l d0,-(sp)
    dc24:	       pea 1 <_start+0x1>
    dc28:	       lea 8(sp),a0
    dc2c:	       move.l a0,-(sp)
    dc2e:	       jsr 136fe <getValueType>
    dc34:	       lea 12(sp),sp
    dc38:	       tst.w d0
    dc3a:	   /-- bne.s dc42 <builtIn_mixOverlay+0x2c>
    dc3c:	   |   moveq #1,d0
    dc3e:	/--|-- bra.w dcda <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    dc42:	|  \-> moveq #24,d0
    dc44:	|      add.l 20(sp),d0
    dc48:	|      move.l d0,-(sp)
    dc4a:	|      jsr 14082 <trimStack>
    dc50:	|      addq.l #4,sp
	if (! getValueType(&xPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    dc52:	|      movea.l 20(sp),a0
    dc56:	|      move.l 24(a0),d0
    dc5a:	|      move.l d0,-(sp)
    dc5c:	|      pea 1 <_start+0x1>
    dc60:	|      moveq #12,d0
    dc62:	|      add.l sp,d0
    dc64:	|      move.l d0,-(sp)
    dc66:	|      jsr 136fe <getValueType>
    dc6c:	|      lea 12(sp),sp
    dc70:	|      tst.w d0
    dc72:	|  /-- bne.s dc78 <builtIn_mixOverlay+0x62>
    dc74:	|  |   moveq #1,d0
    dc76:	+--|-- bra.s dcda <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    dc78:	|  \-> moveq #24,d0
    dc7a:	|      add.l 20(sp),d0
    dc7e:	|      move.l d0,-(sp)
    dc80:	|      jsr 14082 <trimStack>
    dc86:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    dc88:	|      movea.l 20(sp),a0
    dc8c:	|      move.l 24(a0),d0
    dc90:	|      move.l d0,-(sp)
    dc92:	|      pea 5 <_start+0x5>
    dc96:	|      moveq #16,d0
    dc98:	|      add.l sp,d0
    dc9a:	|      move.l d0,-(sp)
    dc9c:	|      jsr 136fe <getValueType>
    dca2:	|      lea 12(sp),sp
    dca6:	|      tst.w d0
    dca8:	|  /-- bne.s dcae <builtIn_mixOverlay+0x98>
    dcaa:	|  |   moveq #1,d0
    dcac:	+--|-- bra.s dcda <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    dcae:	|  \-> moveq #24,d0
    dcb0:	|      add.l 20(sp),d0
    dcb4:	|      move.l d0,-(sp)
    dcb6:	|      jsr 14082 <trimStack>
    dcbc:	|      addq.l #4,sp
	mixBackDrop (fileNumber, xPos, yPos);
    dcbe:	|      movea.l (sp),a0
    dcc0:	|      move.l 4(sp),d1
    dcc4:	|      move.l 8(sp),d0
    dcc8:	|      move.l a0,-(sp)
    dcca:	|      move.l d1,-(sp)
    dccc:	|      move.l d0,-(sp)
    dcce:	|      jsr c37e <mixBackDrop>
    dcd4:	|      lea 12(sp),sp
	return BR_CONTINUE;
    dcd8:	|      moveq #2,d0
}
    dcda:	\----> lea 12(sp),sp
    dcde:	       rts

0000dce0 <builtIn_pasteImage>:

builtIn(pasteImage)
{
    dce0:	       lea -12(sp),sp
	UNUSEDALL
	KPrintF("pasteimage: Started\n");
    dce4:	       pea 18029 <PutChar+0x1ae9>
    dcea:	       jsr 15bf0 <KPrintF>
    dcf0:	       addq.l #4,sp
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    dcf2:	       movea.l 20(sp),a0
    dcf6:	       move.l 24(a0),d0
    dcfa:	       move.l d0,-(sp)
    dcfc:	       pea 1 <_start+0x1>
    dd00:	       lea 8(sp),a0
    dd04:	       move.l a0,-(sp)
    dd06:	       jsr 136fe <getValueType>
    dd0c:	       lea 12(sp),sp
    dd10:	       tst.w d0
    dd12:	   /-- bne.s dd1a <builtIn_pasteImage+0x3a>
    dd14:	   |   moveq #1,d0
    dd16:	/--|-- bra.w ddb8 <builtIn_pasteImage+0xd8>
	trimStack (&fun -> stack);
    dd1a:	|  \-> moveq #24,d0
    dd1c:	|      add.l 20(sp),d0
    dd20:	|      move.l d0,-(sp)
    dd22:	|      jsr 14082 <trimStack>
    dd28:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    dd2a:	|      movea.l 20(sp),a0
    dd2e:	|      move.l 24(a0),d0
    dd32:	|      move.l d0,-(sp)
    dd34:	|      pea 1 <_start+0x1>
    dd38:	|      moveq #12,d0
    dd3a:	|      add.l sp,d0
    dd3c:	|      move.l d0,-(sp)
    dd3e:	|      jsr 136fe <getValueType>
    dd44:	|      lea 12(sp),sp
    dd48:	|      tst.w d0
    dd4a:	|  /-- bne.s dd50 <builtIn_pasteImage+0x70>
    dd4c:	|  |   moveq #1,d0
    dd4e:	+--|-- bra.s ddb8 <builtIn_pasteImage+0xd8>
	trimStack (&fun -> stack);
    dd50:	|  \-> moveq #24,d0
    dd52:	|      add.l 20(sp),d0
    dd56:	|      move.l d0,-(sp)
    dd58:	|      jsr 14082 <trimStack>
    dd5e:	|      addq.l #4,sp
	struct personaAnimation * pp = getAnimationFromVar (&(fun -> stack -> thisVar));
    dd60:	|      movea.l 20(sp),a0
    dd64:	|      move.l 24(a0),d0
    dd68:	|      move.l d0,-(sp)
    dd6a:	|      jsr 13bd6 <getAnimationFromVar>
    dd70:	|      addq.l #4,sp
    dd72:	|      move.l d0,8(sp)
	trimStack (&fun -> stack);
    dd76:	|      moveq #24,d0
    dd78:	|      add.l 20(sp),d0
    dd7c:	|      move.l d0,-(sp)
    dd7e:	|      jsr 14082 <trimStack>
    dd84:	|      addq.l #4,sp
	if (pp == NULL) return BR_CONTINUE;
    dd86:	|      tst.l 8(sp)
    dd8a:	|  /-- bne.s dd90 <builtIn_pasteImage+0xb0>
    dd8c:	|  |   moveq #2,d0
    dd8e:	+--|-- bra.s ddb8 <builtIn_pasteImage+0xd8>

	pasteCursor (x, y, pp);
    dd90:	|  \-> move.l (sp),d1
    dd92:	|      move.l 4(sp),d0
    dd96:	|      move.l 8(sp),-(sp)
    dd9a:	|      move.l d1,-(sp)
    dd9c:	|      move.l d0,-(sp)
    dd9e:	|      jsr d94 <pasteCursor>
    dda4:	|      lea 12(sp),sp
	KPrintF("pasteimage: Finished\n");
    dda8:	|      pea 1803e <PutChar+0x1afe>
    ddae:	|      jsr 15bf0 <KPrintF>
    ddb4:	|      addq.l #4,sp
	return BR_CONTINUE;	
    ddb6:	|      moveq #2,d0
}
    ddb8:	\----> lea 12(sp),sp
    ddbc:	       rts

0000ddbe <builtIn_setSceneDimensions>:

#pragma mark -
#pragma mark Background Image - Scrolling

builtIn(setSceneDimensions)
{
    ddbe:	       subq.l #8,sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ddc0:	       movea.l 16(sp),a0
    ddc4:	       move.l 24(a0),d0
    ddc8:	       move.l d0,-(sp)
    ddca:	       pea 1 <_start+0x1>
    ddce:	       move.l sp,d0
    ddd0:	       addq.l #8,d0
    ddd2:	       move.l d0,-(sp)
    ddd4:	       jsr 136fe <getValueType>
    ddda:	       lea 12(sp),sp
    ddde:	       tst.w d0
    dde0:	   /-- bne.s dde8 <builtIn_setSceneDimensions+0x2a>
    dde2:	   |   moveq #1,d0
    dde4:	/--|-- bra.w de70 <builtIn_setSceneDimensions+0xb2>
	trimStack (&fun -> stack);
    dde8:	|  \-> moveq #24,d0
    ddea:	|      add.l 16(sp),d0
    ddee:	|      move.l d0,-(sp)
    ddf0:	|      jsr 14082 <trimStack>
    ddf6:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ddf8:	|      movea.l 16(sp),a0
    ddfc:	|      move.l 24(a0),d0
    de00:	|      move.l d0,-(sp)
    de02:	|      pea 1 <_start+0x1>
    de06:	|      moveq #12,d0
    de08:	|      add.l sp,d0
    de0a:	|      move.l d0,-(sp)
    de0c:	|      jsr 136fe <getValueType>
    de12:	|      lea 12(sp),sp
    de16:	|      tst.w d0
    de18:	|  /-- bne.s de1e <builtIn_setSceneDimensions+0x60>
    de1a:	|  |   moveq #1,d0
    de1c:	+--|-- bra.s de70 <builtIn_setSceneDimensions+0xb2>
	trimStack (&fun -> stack);
    de1e:	|  \-> moveq #24,d0
    de20:	|      add.l 16(sp),d0
    de24:	|      move.l d0,-(sp)
    de26:	|      jsr 14082 <trimStack>
    de2c:	|      addq.l #4,sp
	if (resizeBackdrop (x, y)) {
    de2e:	|      move.l (sp),d1
    de30:	|      move.l 4(sp),d0
    de34:	|      move.l d1,-(sp)
    de36:	|      move.l d0,-(sp)
    de38:	|      jsr c3d4 <resizeBackdrop>
    de3e:	|      addq.l #8,sp
    de40:	|      tst.w d0
    de42:	|  /-- beq.s de60 <builtIn_setSceneDimensions+0xa2>
		blankScreen (0, 0, x, y);
    de44:	|  |   move.l (sp),d1
    de46:	|  |   move.l 4(sp),d0
    de4a:	|  |   move.l d1,-(sp)
    de4c:	|  |   move.l d0,-(sp)
    de4e:	|  |   clr.l -(sp)
    de50:	|  |   clr.l -(sp)
    de52:	|  |   jsr c1d6 <blankScreen>
    de58:	|  |   lea 16(sp),sp
		return BR_CONTINUE;
    de5c:	|  |   moveq #2,d0
    de5e:	+--|-- bra.s de70 <builtIn_setSceneDimensions+0xb2>
	}
	KPrintF("Out of memory creating new backdrop.");
    de60:	|  \-> pea 18054 <PutChar+0x1b14>
    de66:	|      jsr 15bf0 <KPrintF>
    de6c:	|      addq.l #4,sp
	return BR_ERROR;
    de6e:	|      moveq #1,d0
}
    de70:	\----> addq.l #8,sp
    de72:	       rts

0000de74 <builtIn_aimCamera>:

builtIn(aimCamera)
{
    de74:	          move.l d3,-(sp)
    de76:	          move.l d2,-(sp)
	UNUSEDALL
	if (! getValueType(&cameraY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    de78:	          movea.l 16(sp),a0
    de7c:	          move.l 24(a0),d0
    de80:	          move.l d0,-(sp)
    de82:	          pea 1 <_start+0x1>
    de86:	          pea 1b2b8 <cameraY>
    de8c:	          jsr 136fe <getValueType>
    de92:	          lea 12(sp),sp
    de96:	          tst.w d0
    de98:	      /-- bne.s dea0 <builtIn_aimCamera+0x2c>
    de9a:	      |   moveq #1,d0
    de9c:	/-----|-- bra.w e122 <builtIn_aimCamera+0x2ae>
	trimStack (&fun -> stack);
    dea0:	|     \-> moveq #24,d0
    dea2:	|         add.l 16(sp),d0
    dea6:	|         move.l d0,-(sp)
    dea8:	|         jsr 14082 <trimStack>
    deae:	|         addq.l #4,sp
	if (! getValueType(&cameraX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    deb0:	|         movea.l 16(sp),a0
    deb4:	|         move.l 24(a0),d0
    deb8:	|         move.l d0,-(sp)
    deba:	|         pea 1 <_start+0x1>
    debe:	|         pea 1b2b4 <cameraX>
    dec4:	|         jsr 136fe <getValueType>
    deca:	|         lea 12(sp),sp
    dece:	|         tst.w d0
    ded0:	|     /-- bne.s ded8 <builtIn_aimCamera+0x64>
    ded2:	|     |   moveq #1,d0
    ded4:	+-----|-- bra.w e122 <builtIn_aimCamera+0x2ae>
	trimStack (&fun -> stack);
    ded8:	|     \-> moveq #24,d0
    deda:	|         add.l 16(sp),d0
    dede:	|         move.l d0,-(sp)
    dee0:	|         jsr 14082 <trimStack>
    dee6:	|         addq.l #4,sp

	cameraX -= (FLOAT)(winWidth >> 1)/ cameraZoom;
    dee8:	|         move.l 1b2b4 <cameraX>,d0
    deee:	|         move.l d0,-(sp)
    def0:	|         jsr 15ea8 <__floatsisf>
    def6:	|         addq.l #4,sp
    def8:	|         move.l d0,d2
    defa:	|         move.l 1b0f6 <winWidth>,d0
    df00:	|         lsr.l #1,d0
    df02:	|         move.l d0,-(sp)
    df04:	|         jsr 15ed0 <__floatunsisf>
    df0a:	|         addq.l #4,sp
    df0c:	|         move.l d0,d1
    df0e:	|         move.l 1ab42 <cameraZoom>,d0
    df14:	|         move.l d0,-(sp)
    df16:	|         move.l d1,-(sp)
    df18:	|         jsr 15d54 <__divsf3>
    df1e:	|         addq.l #8,sp
    df20:	|         move.l d0,-(sp)
    df22:	|         move.l d2,-(sp)
    df24:	|         jsr 1619c <__subsf3>
    df2a:	|         addq.l #8,sp
    df2c:	|         move.l d0,-(sp)
    df2e:	|         jsr 15e40 <__fixsfsi>
    df34:	|         addq.l #4,sp
    df36:	|         move.l d0,1b2b4 <cameraX>
	cameraY -= (FLOAT)(winHeight >> 1)/ cameraZoom;
    df3c:	|         move.l 1b2b8 <cameraY>,d0
    df42:	|         move.l d0,-(sp)
    df44:	|         jsr 15ea8 <__floatsisf>
    df4a:	|         addq.l #4,sp
    df4c:	|         move.l d0,d2
    df4e:	|         move.l 1b0fa <winHeight>,d0
    df54:	|         lsr.l #1,d0
    df56:	|         move.l d0,-(sp)
    df58:	|         jsr 15ed0 <__floatunsisf>
    df5e:	|         addq.l #4,sp
    df60:	|         move.l d0,d1
    df62:	|         move.l 1ab42 <cameraZoom>,d0
    df68:	|         move.l d0,-(sp)
    df6a:	|         move.l d1,-(sp)
    df6c:	|         jsr 15d54 <__divsf3>
    df72:	|         addq.l #8,sp
    df74:	|         move.l d0,-(sp)
    df76:	|         move.l d2,-(sp)
    df78:	|         jsr 1619c <__subsf3>
    df7e:	|         addq.l #8,sp
    df80:	|         move.l d0,-(sp)
    df82:	|         jsr 15e40 <__fixsfsi>
    df88:	|         addq.l #4,sp
    df8a:	|         move.l d0,1b2b8 <cameraY>

	if (cameraX < 0) cameraX = 0;
    df90:	|         move.l 1b2b4 <cameraX>,d0
    df96:	|     /-- bpl.s dfa2 <builtIn_aimCamera+0x12e>
    df98:	|     |   clr.l 1b2b4 <cameraX>
    df9e:	|  /--|-- bra.w e058 <builtIn_aimCamera+0x1e4>
	else if (cameraX > sceneWidth - (FLOAT)winWidth/ cameraZoom) cameraX = sceneWidth - (FLOAT)winWidth/ cameraZoom;
    dfa2:	|  |  \-> move.l 1b2b4 <cameraX>,d0
    dfa8:	|  |      move.l d0,-(sp)
    dfaa:	|  |      jsr 15ea8 <__floatsisf>
    dfb0:	|  |      addq.l #4,sp
    dfb2:	|  |      move.l d0,d2
    dfb4:	|  |      move.l 1b296 <sceneWidth>,d0
    dfba:	|  |      move.l d0,-(sp)
    dfbc:	|  |      jsr 15ed0 <__floatunsisf>
    dfc2:	|  |      addq.l #4,sp
    dfc4:	|  |      move.l d0,d3
    dfc6:	|  |      move.l 1b0f6 <winWidth>,d0
    dfcc:	|  |      move.l d0,-(sp)
    dfce:	|  |      jsr 15ed0 <__floatunsisf>
    dfd4:	|  |      addq.l #4,sp
    dfd6:	|  |      move.l d0,d1
    dfd8:	|  |      move.l 1ab42 <cameraZoom>,d0
    dfde:	|  |      move.l d0,-(sp)
    dfe0:	|  |      move.l d1,-(sp)
    dfe2:	|  |      jsr 15d54 <__divsf3>
    dfe8:	|  |      addq.l #8,sp
    dfea:	|  |      move.l d0,-(sp)
    dfec:	|  |      move.l d3,-(sp)
    dfee:	|  |      jsr 1619c <__subsf3>
    dff4:	|  |      addq.l #8,sp
    dff6:	|  |      move.l d0,-(sp)
    dff8:	|  |      move.l d2,-(sp)
    dffa:	|  |      jsr 16014 <__gtsf2>
    e000:	|  |      addq.l #8,sp
    e002:	|  |      tst.l d0
    e004:	|  +----- ble.s e058 <builtIn_aimCamera+0x1e4>
    e006:	|  |      move.l 1b296 <sceneWidth>,d0
    e00c:	|  |      move.l d0,-(sp)
    e00e:	|  |      jsr 15ed0 <__floatunsisf>
    e014:	|  |      addq.l #4,sp
    e016:	|  |      move.l d0,d2
    e018:	|  |      move.l 1b0f6 <winWidth>,d0
    e01e:	|  |      move.l d0,-(sp)
    e020:	|  |      jsr 15ed0 <__floatunsisf>
    e026:	|  |      addq.l #4,sp
    e028:	|  |      move.l d0,d1
    e02a:	|  |      move.l 1ab42 <cameraZoom>,d0
    e030:	|  |      move.l d0,-(sp)
    e032:	|  |      move.l d1,-(sp)
    e034:	|  |      jsr 15d54 <__divsf3>
    e03a:	|  |      addq.l #8,sp
    e03c:	|  |      move.l d0,-(sp)
    e03e:	|  |      move.l d2,-(sp)
    e040:	|  |      jsr 1619c <__subsf3>
    e046:	|  |      addq.l #8,sp
    e048:	|  |      move.l d0,-(sp)
    e04a:	|  |      jsr 15e40 <__fixsfsi>
    e050:	|  |      addq.l #4,sp
    e052:	|  |      move.l d0,1b2b4 <cameraX>
	if (cameraY < 0) cameraY = 0;
    e058:	|  \----> move.l 1b2b8 <cameraY>,d0
    e05e:	|     /-- bpl.s e06a <builtIn_aimCamera+0x1f6>
    e060:	|     |   clr.l 1b2b8 <cameraY>
    e066:	|  /--|-- bra.w e120 <builtIn_aimCamera+0x2ac>
	else if (cameraY > sceneHeight - (FLOAT)winHeight/ cameraZoom) cameraY = sceneHeight - (FLOAT)winHeight/ cameraZoom;
    e06a:	|  |  \-> move.l 1b2b8 <cameraY>,d0
    e070:	|  |      move.l d0,-(sp)
    e072:	|  |      jsr 15ea8 <__floatsisf>
    e078:	|  |      addq.l #4,sp
    e07a:	|  |      move.l d0,d2
    e07c:	|  |      move.l 1b29a <sceneHeight>,d0
    e082:	|  |      move.l d0,-(sp)
    e084:	|  |      jsr 15ed0 <__floatunsisf>
    e08a:	|  |      addq.l #4,sp
    e08c:	|  |      move.l d0,d3
    e08e:	|  |      move.l 1b0fa <winHeight>,d0
    e094:	|  |      move.l d0,-(sp)
    e096:	|  |      jsr 15ed0 <__floatunsisf>
    e09c:	|  |      addq.l #4,sp
    e09e:	|  |      move.l d0,d1
    e0a0:	|  |      move.l 1ab42 <cameraZoom>,d0
    e0a6:	|  |      move.l d0,-(sp)
    e0a8:	|  |      move.l d1,-(sp)
    e0aa:	|  |      jsr 15d54 <__divsf3>
    e0b0:	|  |      addq.l #8,sp
    e0b2:	|  |      move.l d0,-(sp)
    e0b4:	|  |      move.l d3,-(sp)
    e0b6:	|  |      jsr 1619c <__subsf3>
    e0bc:	|  |      addq.l #8,sp
    e0be:	|  |      move.l d0,-(sp)
    e0c0:	|  |      move.l d2,-(sp)
    e0c2:	|  |      jsr 16014 <__gtsf2>
    e0c8:	|  |      addq.l #8,sp
    e0ca:	|  |      tst.l d0
    e0cc:	|  +----- ble.s e120 <builtIn_aimCamera+0x2ac>
    e0ce:	|  |      move.l 1b29a <sceneHeight>,d0
    e0d4:	|  |      move.l d0,-(sp)
    e0d6:	|  |      jsr 15ed0 <__floatunsisf>
    e0dc:	|  |      addq.l #4,sp
    e0de:	|  |      move.l d0,d2
    e0e0:	|  |      move.l 1b0fa <winHeight>,d0
    e0e6:	|  |      move.l d0,-(sp)
    e0e8:	|  |      jsr 15ed0 <__floatunsisf>
    e0ee:	|  |      addq.l #4,sp
    e0f0:	|  |      move.l d0,d1
    e0f2:	|  |      move.l 1ab42 <cameraZoom>,d0
    e0f8:	|  |      move.l d0,-(sp)
    e0fa:	|  |      move.l d1,-(sp)
    e0fc:	|  |      jsr 15d54 <__divsf3>
    e102:	|  |      addq.l #8,sp
    e104:	|  |      move.l d0,-(sp)
    e106:	|  |      move.l d2,-(sp)
    e108:	|  |      jsr 1619c <__subsf3>
    e10e:	|  |      addq.l #8,sp
    e110:	|  |      move.l d0,-(sp)
    e112:	|  |      jsr 15e40 <__fixsfsi>
    e118:	|  |      addq.l #4,sp
    e11a:	|  |      move.l d0,1b2b8 <cameraY>
	return BR_CONTINUE;
    e120:	|  \----> moveq #2,d0
}
    e122:	\-------> move.l (sp)+,d2
    e124:	          move.l (sp)+,d3
    e126:	          rts

0000e128 <builtIn_zoomCamera>:


builtIn(zoomCamera)
{
    e128:	       subq.l #4,sp
    e12a:	       move.l d2,-(sp)
	UNUSEDALL
	int z;
	if (! getValueType(&z, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e12c:	       movea.l 16(sp),a0
    e130:	       move.l 24(a0),d0
    e134:	       move.l d0,-(sp)
    e136:	       pea 1 <_start+0x1>
    e13a:	       moveq #12,d0
    e13c:	       add.l sp,d0
    e13e:	       move.l d0,-(sp)
    e140:	       jsr 136fe <getValueType>
    e146:	       lea 12(sp),sp
    e14a:	       tst.w d0
    e14c:	   /-- bne.s e154 <builtIn_zoomCamera+0x2c>
    e14e:	   |   moveq #1,d0
    e150:	/--|-- bra.w e34e <builtIn_zoomCamera+0x226>
	trimStack (&fun -> stack);
    e154:	|  \-> moveq #24,d0
    e156:	|      add.l 16(sp),d0
    e15a:	|      move.l d0,-(sp)
    e15c:	|      jsr 14082 <trimStack>
    e162:	|      addq.l #4,sp

	input.mouseX = input.mouseX * cameraZoom;
    e164:	|      move.l 1b15e <input+0xa>,d0
    e16a:	|      move.l d0,-(sp)
    e16c:	|      jsr 15ea8 <__floatsisf>
    e172:	|      addq.l #4,sp
    e174:	|      move.l d0,d1
    e176:	|      move.l 1ab42 <cameraZoom>,d0
    e17c:	|      move.l d0,-(sp)
    e17e:	|      move.l d1,-(sp)
    e180:	|      jsr 15f5a <__mulsf3>
    e186:	|      addq.l #8,sp
    e188:	|      move.l d0,-(sp)
    e18a:	|      jsr 15e40 <__fixsfsi>
    e190:	|      addq.l #4,sp
    e192:	|      move.l d0,1b15e <input+0xa>
	input.mouseY = input.mouseY * cameraZoom;
    e198:	|      move.l 1b162 <input+0xe>,d0
    e19e:	|      move.l d0,-(sp)
    e1a0:	|      jsr 15ea8 <__floatsisf>
    e1a6:	|      addq.l #4,sp
    e1a8:	|      move.l d0,d1
    e1aa:	|      move.l 1ab42 <cameraZoom>,d0
    e1b0:	|      move.l d0,-(sp)
    e1b2:	|      move.l d1,-(sp)
    e1b4:	|      jsr 15f5a <__mulsf3>
    e1ba:	|      addq.l #8,sp
    e1bc:	|      move.l d0,-(sp)
    e1be:	|      jsr 15e40 <__fixsfsi>
    e1c4:	|      addq.l #4,sp
    e1c6:	|      move.l d0,1b162 <input+0xe>


	cameraZoom = (FLOAT) z * (FLOAT) 0.01;
    e1cc:	|      move.l 4(sp),d0
    e1d0:	|      move.l d0,-(sp)
    e1d2:	|      jsr 15ea8 <__floatsisf>
    e1d8:	|      addq.l #4,sp
    e1da:	|      move.l #1008981770,-(sp)
    e1e0:	|      move.l d0,-(sp)
    e1e2:	|      jsr 15f5a <__mulsf3>
    e1e8:	|      addq.l #8,sp
    e1ea:	|      move.l d0,1ab42 <cameraZoom>
	if ((FLOAT) winWidth / cameraZoom > sceneWidth) cameraZoom = (FLOAT)winWidth / sceneWidth;
    e1f0:	|      move.l 1b0f6 <winWidth>,d0
    e1f6:	|      move.l d0,-(sp)
    e1f8:	|      jsr 15ed0 <__floatunsisf>
    e1fe:	|      addq.l #4,sp
    e200:	|      move.l d0,d1
    e202:	|      move.l 1ab42 <cameraZoom>,d0
    e208:	|      move.l d0,-(sp)
    e20a:	|      move.l d1,-(sp)
    e20c:	|      jsr 15d54 <__divsf3>
    e212:	|      addq.l #8,sp
    e214:	|      move.l d0,d2
    e216:	|      move.l 1b296 <sceneWidth>,d0
    e21c:	|      move.l d0,-(sp)
    e21e:	|      jsr 15ed0 <__floatunsisf>
    e224:	|      addq.l #4,sp
    e226:	|      move.l d0,-(sp)
    e228:	|      move.l d2,-(sp)
    e22a:	|      jsr 16014 <__gtsf2>
    e230:	|      addq.l #8,sp
    e232:	|      tst.l d0
    e234:	|  /-- ble.s e26a <builtIn_zoomCamera+0x142>
    e236:	|  |   move.l 1b0f6 <winWidth>,d0
    e23c:	|  |   move.l d0,-(sp)
    e23e:	|  |   jsr 15ed0 <__floatunsisf>
    e244:	|  |   addq.l #4,sp
    e246:	|  |   move.l d0,d2
    e248:	|  |   move.l 1b296 <sceneWidth>,d0
    e24e:	|  |   move.l d0,-(sp)
    e250:	|  |   jsr 15ed0 <__floatunsisf>
    e256:	|  |   addq.l #4,sp
    e258:	|  |   move.l d0,-(sp)
    e25a:	|  |   move.l d2,-(sp)
    e25c:	|  |   jsr 15d54 <__divsf3>
    e262:	|  |   addq.l #8,sp
    e264:	|  |   move.l d0,1ab42 <cameraZoom>
	if ((FLOAT) winHeight / cameraZoom > sceneHeight) cameraZoom = (FLOAT)winHeight / sceneHeight;
    e26a:	|  \-> move.l 1b0fa <winHeight>,d0
    e270:	|      move.l d0,-(sp)
    e272:	|      jsr 15ed0 <__floatunsisf>
    e278:	|      addq.l #4,sp
    e27a:	|      move.l d0,d1
    e27c:	|      move.l 1ab42 <cameraZoom>,d0
    e282:	|      move.l d0,-(sp)
    e284:	|      move.l d1,-(sp)
    e286:	|      jsr 15d54 <__divsf3>
    e28c:	|      addq.l #8,sp
    e28e:	|      move.l d0,d2
    e290:	|      move.l 1b29a <sceneHeight>,d0
    e296:	|      move.l d0,-(sp)
    e298:	|      jsr 15ed0 <__floatunsisf>
    e29e:	|      addq.l #4,sp
    e2a0:	|      move.l d0,-(sp)
    e2a2:	|      move.l d2,-(sp)
    e2a4:	|      jsr 16014 <__gtsf2>
    e2aa:	|      addq.l #8,sp
    e2ac:	|      tst.l d0
    e2ae:	|  /-- ble.s e2e4 <builtIn_zoomCamera+0x1bc>
    e2b0:	|  |   move.l 1b0fa <winHeight>,d0
    e2b6:	|  |   move.l d0,-(sp)
    e2b8:	|  |   jsr 15ed0 <__floatunsisf>
    e2be:	|  |   addq.l #4,sp
    e2c0:	|  |   move.l d0,d2
    e2c2:	|  |   move.l 1b29a <sceneHeight>,d0
    e2c8:	|  |   move.l d0,-(sp)
    e2ca:	|  |   jsr 15ed0 <__floatunsisf>
    e2d0:	|  |   addq.l #4,sp
    e2d2:	|  |   move.l d0,-(sp)
    e2d4:	|  |   move.l d2,-(sp)
    e2d6:	|  |   jsr 15d54 <__divsf3>
    e2dc:	|  |   addq.l #8,sp
    e2de:	|  |   move.l d0,1ab42 <cameraZoom>
	//setPixelCoords (FALSE); Todo: Amigize this

	input.mouseX = input.mouseX / cameraZoom;
    e2e4:	|  \-> move.l 1b15e <input+0xa>,d0
    e2ea:	|      move.l d0,-(sp)
    e2ec:	|      jsr 15ea8 <__floatsisf>
    e2f2:	|      addq.l #4,sp
    e2f4:	|      move.l d0,d1
    e2f6:	|      move.l 1ab42 <cameraZoom>,d0
    e2fc:	|      move.l d0,-(sp)
    e2fe:	|      move.l d1,-(sp)
    e300:	|      jsr 15d54 <__divsf3>
    e306:	|      addq.l #8,sp
    e308:	|      move.l d0,-(sp)
    e30a:	|      jsr 15e40 <__fixsfsi>
    e310:	|      addq.l #4,sp
    e312:	|      move.l d0,1b15e <input+0xa>
	input.mouseY = input.mouseY / cameraZoom;
    e318:	|      move.l 1b162 <input+0xe>,d0
    e31e:	|      move.l d0,-(sp)
    e320:	|      jsr 15ea8 <__floatsisf>
    e326:	|      addq.l #4,sp
    e328:	|      move.l d0,d1
    e32a:	|      move.l 1ab42 <cameraZoom>,d0
    e330:	|      move.l d0,-(sp)
    e332:	|      move.l d1,-(sp)
    e334:	|      jsr 15d54 <__divsf3>
    e33a:	|      addq.l #8,sp
    e33c:	|      move.l d0,-(sp)
    e33e:	|      jsr 15e40 <__fixsfsi>
    e344:	|      addq.l #4,sp
    e346:	|      move.l d0,1b162 <input+0xe>

	return BR_CONTINUE;
    e34c:	|      moveq #2,d0
}
    e34e:	\----> move.l (sp)+,d2
    e350:	       addq.l #4,sp
    e352:	       rts

0000e354 <builtIn_pickOne>:
#pragma mark -
#pragma mark Variables


builtIn(pickOne)
{
    e354:	             subq.l #4,sp
	UNUSEDALL
	if (! numParams) {
    e356:	             tst.l 8(sp)
    e35a:	         /-- bne.s e36e <builtIn_pickOne+0x1a>
		KPrintF ("Built-in function should have at least 1 parameter");
    e35c:	         |   pea 18079 <PutChar+0x1b39>
    e362:	         |   jsr 15bf0 <KPrintF>
    e368:	         |   addq.l #4,sp
		return BR_ERROR;
    e36a:	         |   moveq #1,d0
    e36c:	/--------|-- bra.s e3ce <builtIn_pickOne+0x7a>
	}
	int i = rand() % numParams;
    e36e:	|        \-> jsr 147f0 <rand>
    e374:	|            move.l d0,d1
    e376:	|            move.l 8(sp),d0
    e37a:	|            move.l d0,-(sp)
    e37c:	|            move.l d1,-(sp)
    e37e:	|            jsr 16504 <__umodsi3>
    e384:	|            addq.l #8,sp
    e386:	|            move.l d0,(sp)

	// Return value
	while (numParams --) {
    e388:	|     /----- bra.s e3bc <builtIn_pickOne+0x68>
		if (i == numParams) copyVariable (&(fun -> stack -> thisVar), &fun -> reg);
    e38a:	|  /--|----> move.l (sp),d0
    e38c:	|  |  |      cmp.l 8(sp),d0
    e390:	|  |  |  /-- bne.s e3ac <builtIn_pickOne+0x58>
    e392:	|  |  |  |   moveq #28,d0
    e394:	|  |  |  |   add.l 12(sp),d0
    e398:	|  |  |  |   movea.l 12(sp),a0
    e39c:	|  |  |  |   move.l 24(a0),d1
    e3a0:	|  |  |  |   move.l d0,-(sp)
    e3a2:	|  |  |  |   move.l d1,-(sp)
    e3a4:	|  |  |  |   jsr 13bb8 <copyVariable>
    e3aa:	|  |  |  |   addq.l #8,sp
		trimStack (&fun -> stack);
    e3ac:	|  |  |  \-> moveq #24,d0
    e3ae:	|  |  |      add.l 12(sp),d0
    e3b2:	|  |  |      move.l d0,-(sp)
    e3b4:	|  |  |      jsr 14082 <trimStack>
    e3ba:	|  |  |      addq.l #4,sp
	while (numParams --) {
    e3bc:	|  |  \----> move.l 8(sp),d0
    e3c0:	|  |         move.l d0,d1
    e3c2:	|  |         subq.l #1,d1
    e3c4:	|  |         move.l d1,8(sp)
    e3c8:	|  |         tst.l d0
    e3ca:	|  \-------- bne.s e38a <builtIn_pickOne+0x36>
	}
	return BR_CONTINUE;
    e3cc:	|            moveq #2,d0
}
    e3ce:	\----------> addq.l #4,sp
    e3d0:	             rts

0000e3d2 <builtIn_substring>:

builtIn(substring)
{
    e3d2:	       lea -40(sp),sp
    e3d6:	       move.l a6,-(sp)
    e3d8:	       move.l d2,-(sp)
    char *newString;
    int start, length;

    //debugOut ("BUILTIN: substring\n");

    if (!getValueType(&length, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    e3da:	       movea.l 56(sp),a0
    e3de:	       move.l 24(a0),d0
    e3e2:	       move.l d0,-(sp)
    e3e4:	       pea 1 <_start+0x1>
    e3e8:	       lea 16(sp),a0
    e3ec:	       move.l a0,-(sp)
    e3ee:	       jsr 136fe <getValueType>
    e3f4:	       lea 12(sp),sp
    e3f8:	       tst.w d0
    e3fa:	   /-- bne.s e402 <builtIn_substring+0x30>
    e3fc:	   |   moveq #1,d0
    e3fe:	/--|-- bra.w e57a <builtIn_substring+0x1a8>
    trimStack(&fun->stack);
    e402:	|  \-> moveq #24,d0
    e404:	|      add.l 56(sp),d0
    e408:	|      move.l d0,-(sp)
    e40a:	|      jsr 14082 <trimStack>
    e410:	|      addq.l #4,sp
    if (!getValueType(&start, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    e412:	|      movea.l 56(sp),a0
    e416:	|      move.l 24(a0),d0
    e41a:	|      move.l d0,-(sp)
    e41c:	|      pea 1 <_start+0x1>
    e420:	|      lea 20(sp),a0
    e424:	|      move.l a0,-(sp)
    e426:	|      jsr 136fe <getValueType>
    e42c:	|      lea 12(sp),sp
    e430:	|      tst.w d0
    e432:	|  /-- bne.s e43a <builtIn_substring+0x68>
    e434:	|  |   moveq #1,d0
    e436:	+--|-- bra.w e57a <builtIn_substring+0x1a8>
    trimStack(&fun->stack);
    e43a:	|  \-> moveq #24,d0
    e43c:	|      add.l 56(sp),d0
    e440:	|      move.l d0,-(sp)
    e442:	|      jsr 14082 <trimStack>
    e448:	|      addq.l #4,sp
    wholeString = getTextFromAnyVar(&(fun->stack->thisVar));
    e44a:	|      movea.l 56(sp),a0
    e44e:	|      move.l 24(a0),d0
    e452:	|      move.l d0,-(sp)
    e454:	|      jsr 13cd4 <getTextFromAnyVar>
    e45a:	|      addq.l #4,sp
    e45c:	|      move.l d0,44(sp)
    trimStack(&fun->stack);
    e460:	|      moveq #24,d0
    e462:	|      add.l 56(sp),d0
    e466:	|      move.l d0,-(sp)
    e468:	|      jsr 14082 <trimStack>
    e46e:	|      addq.l #4,sp
    
    if (strlen(wholeString) < (ULONG) start + length) {
    e470:	|      move.l 44(sp),-(sp)
    e474:	|      jsr 12bea <strlen>
    e47a:	|      addq.l #4,sp
    e47c:	|      move.l d0,d1
    e47e:	|      move.l 12(sp),d0
    e482:	|      movea.l d0,a0
    e484:	|      move.l 8(sp),d0
    e488:	|      add.l a0,d0
    e48a:	|      cmp.l d1,d0
    e48c:	|  /-- bls.s e4c2 <builtIn_substring+0xf0>
        length = strlen(wholeString) - start;
    e48e:	|  |   move.l 44(sp),-(sp)
    e492:	|  |   jsr 12bea <strlen>
    e498:	|  |   addq.l #4,sp
    e49a:	|  |   move.l d0,d1
    e49c:	|  |   move.l 12(sp),d0
    e4a0:	|  |   sub.l d0,d1
    e4a2:	|  |   move.l d1,d0
    e4a4:	|  |   move.l d0,8(sp)
        if (strlen(wholeString) < (ULONG) start) {
    e4a8:	|  |   move.l 44(sp),-(sp)
    e4ac:	|  |   jsr 12bea <strlen>
    e4b2:	|  |   addq.l #4,sp
    e4b4:	|  |   move.l d0,d1
    e4b6:	|  |   move.l 12(sp),d0
    e4ba:	|  |   cmp.l d1,d0
    e4bc:	|  +-- bls.s e4c2 <builtIn_substring+0xf0>
            start = 0;
    e4be:	|  |   clr.l 12(sp)
        }
    }
    if (length < 0) {
    e4c2:	|  \-> move.l 8(sp),d0
    e4c6:	|  /-- bpl.s e4cc <builtIn_substring+0xfa>
        length = 0;
    e4c8:	|  |   clr.l 8(sp)
    }
    
    int startoffset = start;
    e4cc:	|  \-> move.l 12(sp),40(sp)
    int endoffset = start + length;
    e4d2:	|      move.l 12(sp),d1
    e4d6:	|      move.l 8(sp),d0
    e4da:	|      move.l d1,d2
    e4dc:	|      add.l d0,d2
    e4de:	|      move.l d2,36(sp)

    newString = AllocVec(endoffset - startoffset + 1, MEMF_ANY);
    e4e2:	|      move.l 36(sp),d0
    e4e6:	|      sub.l 40(sp),d0
    e4ea:	|      addq.l #1,d0
    e4ec:	|      move.l d0,32(sp)
    e4f0:	|      clr.l 28(sp)
    e4f4:	|      move.l 1b1a2 <SysBase>,d0
    e4fa:	|      movea.l d0,a6
    e4fc:	|      move.l 32(sp),d0
    e500:	|      move.l 28(sp),d1
    e504:	|      jsr -684(a6)
    e508:	|      move.l d0,24(sp)
    e50c:	|      move.l 24(sp),d0
    e510:	|      move.l d0,20(sp)
    if (!newString) {
    e514:	|  /-- bne.s e51a <builtIn_substring+0x148>
        return BR_ERROR;
    e516:	|  |   moveq #1,d0
    e518:	+--|-- bra.s e57a <builtIn_substring+0x1a8>
    }
    
    memcpy(newString, wholeString + startoffset, endoffset - startoffset);
    e51a:	|  \-> move.l 36(sp),d0
    e51e:	|      sub.l 40(sp),d0
    e522:	|      move.l d0,d1
    e524:	|      move.l 40(sp),d0
    e528:	|      add.l 44(sp),d0
    e52c:	|      move.l d1,-(sp)
    e52e:	|      move.l d0,-(sp)
    e530:	|      move.l 28(sp),-(sp)
    e534:	|      jsr 15ba4 <memcpy>
    e53a:	|      lea 12(sp),sp
    newString[endoffset - startoffset] = 0;
    e53e:	|      move.l 36(sp),d0
    e542:	|      sub.l 40(sp),d0
    e546:	|      movea.l 20(sp),a0
    e54a:	|      adda.l d0,a0
    e54c:	|      clr.b (a0)
    
    makeTextVar(&fun->reg, newString);
    e54e:	|      moveq #28,d0
    e550:	|      add.l 56(sp),d0
    e554:	|      move.l 20(sp),-(sp)
    e558:	|      move.l d0,-(sp)
    e55a:	|      jsr 13920 <makeTextVar>
    e560:	|      addq.l #8,sp
    FreeVec(newString);
    e562:	|      move.l 20(sp),16(sp)
    e568:	|      move.l 1b1a2 <SysBase>,d0
    e56e:	|      movea.l d0,a6
    e570:	|      movea.l 16(sp),a1
    e574:	|      jsr -690(a6)
    return BR_CONTINUE;
    e578:	|      moveq #2,d0
}
    e57a:	\----> move.l (sp)+,d2
    e57c:	       movea.l (sp)+,a6
    e57e:	       lea 40(sp),sp
    e582:	       rts

0000e584 <builtIn_stringLength>:

builtIn(stringLength)
{
    e584:	subq.l #8,sp
    e586:	move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    e588:	movea.l 20(sp),a0
    e58c:	move.l 24(a0),d0
    e590:	move.l d0,-(sp)
    e592:	jsr 13cd4 <getTextFromAnyVar>
    e598:	addq.l #4,sp
    e59a:	move.l d0,8(sp)
	trimStack (&fun -> stack);
    e59e:	moveq #24,d0
    e5a0:	add.l 20(sp),d0
    e5a4:	move.l d0,-(sp)
    e5a6:	jsr 14082 <trimStack>
    e5ac:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, strlen(newText));
    e5ae:	move.l 8(sp),-(sp)
    e5b2:	jsr 12bea <strlen>
    e5b8:	addq.l #4,sp
    e5ba:	move.l d0,d1
    e5bc:	moveq #28,d0
    e5be:	add.l 20(sp),d0
    e5c2:	move.l d1,-(sp)
    e5c4:	pea 1 <_start+0x1>
    e5c8:	move.l d0,-(sp)
    e5ca:	jsr 13ff0 <setVariable>
    e5d0:	lea 12(sp),sp
	FreeVec(newText);
    e5d4:	move.l 8(sp),4(sp)
    e5da:	move.l 1b1a2 <SysBase>,d0
    e5e0:	movea.l d0,a6
    e5e2:	movea.l 4(sp),a1
    e5e6:	jsr -690(a6)
	return BR_CONTINUE;
    e5ea:	moveq #2,d0
}
    e5ec:	movea.l (sp)+,a6
    e5ee:	addq.l #8,sp
    e5f0:	rts

0000e5f2 <builtIn_newStack>:

builtIn(newStack)
{
    e5f2:	             lea -12(sp),sp
    e5f6:	             move.l a6,-(sp)
    UNUSEDALL
    unlinkVar(&fun->reg);
    e5f8:	             moveq #28,d0
    e5fa:	             add.l 24(sp),d0
    e5fe:	             move.l d0,-(sp)
    e600:	             jsr 1394c <unlinkVar>
    e606:	             addq.l #4,sp

    // Return value
    fun->reg.varType = SVT_STACK;
    e608:	             movea.l 24(sp),a0
    e60c:	             moveq #6,d0
    e60e:	             move.l d0,28(a0)
    fun->reg.varData.theStack = AllocVec(sizeof(struct stackHandler), MEMF_ANY);
    e612:	             moveq #12,d1
    e614:	             move.l d1,12(sp)
    e618:	             clr.l 8(sp)
    e61c:	             move.l 1b1a2 <SysBase>,d0
    e622:	             movea.l d0,a6
    e624:	             move.l 12(sp),d0
    e628:	             move.l 8(sp),d1
    e62c:	             jsr -684(a6)
    e630:	             move.l d0,4(sp)
    e634:	             move.l 4(sp),d0
    e638:	             movea.l 24(sp),a0
    e63c:	             move.l d0,32(a0)
    if (!fun->reg.varData.theStack) return BR_ERROR;
    e640:	             movea.l 24(sp),a0
    e644:	             move.l 32(a0),d0
    e648:	         /-- bne.s e650 <builtIn_newStack+0x5e>
    e64a:	         |   moveq #1,d0
    e64c:	/--------|-- bra.w e6e2 <builtIn_newStack+0xf0>
    fun->reg.varData.theStack->first = NULL;
    e650:	|        \-> movea.l 24(sp),a0
    e654:	|            movea.l 32(a0),a0
    e658:	|            clr.l (a0)
    fun->reg.varData.theStack->last = NULL;
    e65a:	|            movea.l 24(sp),a0
    e65e:	|            movea.l 32(a0),a0
    e662:	|            clr.l 4(a0)
    fun->reg.varData.theStack->timesUsed = 1;
    e666:	|            movea.l 24(sp),a0
    e66a:	|            movea.l 32(a0),a0
    e66e:	|            moveq #1,d0
    e670:	|            move.l d0,8(a0)
    
    while (numParams--) {
    e674:	|     /----- bra.s e6d0 <builtIn_newStack+0xde>
        if (!addVarToStack(&fun->stack->thisVar, &fun->reg.varData.theStack->first)) return BR_ERROR;
    e676:	|  /--|----> movea.l 24(sp),a0
    e67a:	|  |  |      move.l 32(a0),d0
    e67e:	|  |  |      move.l d0,d1
    e680:	|  |  |      movea.l 24(sp),a0
    e684:	|  |  |      move.l 24(a0),d0
    e688:	|  |  |      move.l d1,-(sp)
    e68a:	|  |  |      move.l d0,-(sp)
    e68c:	|  |  |      jsr 12f3a <addVarToStack>
    e692:	|  |  |      addq.l #8,sp
    e694:	|  |  |      tst.w d0
    e696:	|  |  |  /-- bne.s e69c <builtIn_newStack+0xaa>
    e698:	|  |  |  |   moveq #1,d0
    e69a:	+--|--|--|-- bra.s e6e2 <builtIn_newStack+0xf0>
        if (fun->reg.varData.theStack->last == NULL) {
    e69c:	|  |  |  \-> movea.l 24(sp),a0
    e6a0:	|  |  |      movea.l 32(a0),a0
    e6a4:	|  |  |      move.l 4(a0),d0
    e6a8:	|  |  |  /-- bne.s e6c0 <builtIn_newStack+0xce>
            fun->reg.varData.theStack->last = fun->reg.varData.theStack->first;
    e6aa:	|  |  |  |   movea.l 24(sp),a0
    e6ae:	|  |  |  |   movea.l 32(a0),a1
    e6b2:	|  |  |  |   movea.l 24(sp),a0
    e6b6:	|  |  |  |   movea.l 32(a0),a0
    e6ba:	|  |  |  |   move.l (a1),d0
    e6bc:	|  |  |  |   move.l d0,4(a0)
        }
        trimStack(&fun->stack);
    e6c0:	|  |  |  \-> moveq #24,d0
    e6c2:	|  |  |      add.l 24(sp),d0
    e6c6:	|  |  |      move.l d0,-(sp)
    e6c8:	|  |  |      jsr 14082 <trimStack>
    e6ce:	|  |  |      addq.l #4,sp
    while (numParams--) {
    e6d0:	|  |  \----> move.l 20(sp),d0
    e6d4:	|  |         move.l d0,d1
    e6d6:	|  |         subq.l #1,d1
    e6d8:	|  |         move.l d1,20(sp)
    e6dc:	|  |         tst.l d0
    e6de:	|  \-------- bne.s e676 <builtIn_newStack+0x84>
    }
    return BR_CONTINUE;
    e6e0:	|            moveq #2,d0
}
    e6e2:	\----------> movea.l (sp)+,a6
    e6e4:	             lea 12(sp),sp
    e6e8:	             rts

0000e6ea <builtIn_stackSize>:
#define builtIn_wait builtIn_newStack

builtIn(stackSize)
{
	UNUSEDALL
	switch (fun -> stack -> thisVar.varType) {
    e6ea:	          movea.l 8(sp),a0
    e6ee:	          movea.l 24(a0),a0
    e6f2:	          move.l (a0),d0
    e6f4:	          moveq #6,d1
    e6f6:	          cmp.l d0,d1
    e6f8:	      /-- beq.s e714 <builtIn_stackSize+0x2a>
    e6fa:	      |   moveq #10,d1
    e6fc:	      |   cmp.l d0,d1
    e6fe:	   /--|-- beq.s e758 <builtIn_stackSize+0x6e>
			setVariable (&fun -> reg, SVT_INT, fun -> stack -> thisVar.varData.fastArray -> size);
			trimStack (&fun -> stack);
			return BR_CONTINUE;

		default:
			break;
    e700:	   |  |   nop
	}
	KPrintF ("Parameter isn't a stack or a fast array.");
    e702:	   |  |   pea 180ac <PutChar+0x1b6c>
    e708:	   |  |   jsr 15bf0 <KPrintF>
    e70e:	   |  |   addq.l #4,sp
	return BR_ERROR;
    e710:	   |  |   moveq #1,d0
    e712:	/--|--|-- bra.s e792 <builtIn_stackSize+0xa8>
			setVariable (&fun -> reg, SVT_INT, stackSize (fun -> stack -> thisVar.varData.theStack));
    e714:	|  |  \-> movea.l 8(sp),a0
    e718:	|  |      movea.l 24(a0),a0
    e71c:	|  |      move.l 4(a0),d0
    e720:	|  |      move.l d0,-(sp)
    e722:	|  |      jsr 1405e <stackSize>
    e728:	|  |      addq.l #4,sp
    e72a:	|  |      move.l d0,d1
    e72c:	|  |      moveq #28,d0
    e72e:	|  |      add.l 8(sp),d0
    e732:	|  |      move.l d1,-(sp)
    e734:	|  |      pea 1 <_start+0x1>
    e738:	|  |      move.l d0,-(sp)
    e73a:	|  |      jsr 13ff0 <setVariable>
    e740:	|  |      lea 12(sp),sp
			trimStack (&fun -> stack);
    e744:	|  |      moveq #24,d0
    e746:	|  |      add.l 8(sp),d0
    e74a:	|  |      move.l d0,-(sp)
    e74c:	|  |      jsr 14082 <trimStack>
    e752:	|  |      addq.l #4,sp
			return BR_CONTINUE;
    e754:	|  |      moveq #2,d0
    e756:	+--|----- bra.s e792 <builtIn_stackSize+0xa8>
			setVariable (&fun -> reg, SVT_INT, fun -> stack -> thisVar.varData.fastArray -> size);
    e758:	|  \----> movea.l 8(sp),a0
    e75c:	|         movea.l 24(a0),a0
    e760:	|         movea.l 4(a0),a0
    e764:	|         move.l 4(a0),d1
    e768:	|         moveq #28,d0
    e76a:	|         add.l 8(sp),d0
    e76e:	|         move.l d1,-(sp)
    e770:	|         pea 1 <_start+0x1>
    e774:	|         move.l d0,-(sp)
    e776:	|         jsr 13ff0 <setVariable>
    e77c:	|         lea 12(sp),sp
			trimStack (&fun -> stack);
    e780:	|         moveq #24,d0
    e782:	|         add.l 8(sp),d0
    e786:	|         move.l d0,-(sp)
    e788:	|         jsr 14082 <trimStack>
    e78e:	|         addq.l #4,sp
			return BR_CONTINUE;
    e790:	|         moveq #2,d0
}
    e792:	\-------> rts

0000e794 <builtIn_copyStack>:

builtIn(copyStack)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    e794:	       movea.l 8(sp),a0
    e798:	       movea.l 24(a0),a0
    e79c:	       move.l (a0),d0
    e79e:	       moveq #6,d1
    e7a0:	       cmp.l d0,d1
    e7a2:	   /-- beq.s e7b6 <builtIn_copyStack+0x22>
		KPrintF ("Parameter isn't a stack.");
    e7a4:	   |   pea 180d5 <PutChar+0x1b95>
    e7aa:	   |   jsr 15bf0 <KPrintF>
    e7b0:	   |   addq.l #4,sp
		return BR_ERROR;
    e7b2:	   |   moveq #1,d0
    e7b4:	/--|-- bra.s e7ea <builtIn_copyStack+0x56>
	}
	// Return value
	if (! copyStack (&fun -> stack -> thisVar, &fun -> reg)) return BR_ERROR;
    e7b6:	|  \-> moveq #28,d0
    e7b8:	|      add.l 8(sp),d0
    e7bc:	|      movea.l 8(sp),a0
    e7c0:	|      move.l 24(a0),d1
    e7c4:	|      move.l d0,-(sp)
    e7c6:	|      move.l d1,-(sp)
    e7c8:	|      jsr 13204 <copyStack>
    e7ce:	|      addq.l #8,sp
    e7d0:	|      tst.w d0
    e7d2:	|  /-- bne.s e7d8 <builtIn_copyStack+0x44>
    e7d4:	|  |   moveq #1,d0
    e7d6:	+--|-- bra.s e7ea <builtIn_copyStack+0x56>
	trimStack (&fun -> stack);
    e7d8:	|  \-> moveq #24,d0
    e7da:	|      add.l 8(sp),d0
    e7de:	|      move.l d0,-(sp)
    e7e0:	|      jsr 14082 <trimStack>
    e7e6:	|      addq.l #4,sp
	return BR_CONTINUE;
    e7e8:	|      moveq #2,d0
}
    e7ea:	\----> rts

0000e7ec <builtIn_pushToStack>:

builtIn(pushToStack)
{
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    e7ec:	       movea.l 8(sp),a0
    e7f0:	       movea.l 24(a0),a0
    e7f4:	       movea.l 8(a0),a0
    e7f8:	       move.l (a0),d0
    e7fa:	       moveq #6,d1
    e7fc:	       cmp.l d0,d1
    e7fe:	   /-- beq.s e814 <builtIn_pushToStack+0x28>
		KPrintF("Parameter isn't a stack");
    e800:	   |   pea 180ee <PutChar+0x1bae>
    e806:	   |   jsr 15bf0 <KPrintF>
    e80c:	   |   addq.l #4,sp
		return BR_ERROR;
    e80e:	   |   moveq #1,d0
    e810:	/--|-- bra.w e8a2 <builtIn_pushToStack+0xb6>
	}

	if (! addVarToStack (&fun -> stack -> thisVar, &fun -> stack -> next -> thisVar.varData.theStack -> first))
    e814:	|  \-> movea.l 8(sp),a0
    e818:	|      movea.l 24(a0),a0
    e81c:	|      movea.l 8(a0),a0
    e820:	|      move.l 4(a0),d0
    e824:	|      move.l d0,d1
    e826:	|      movea.l 8(sp),a0
    e82a:	|      move.l 24(a0),d0
    e82e:	|      move.l d1,-(sp)
    e830:	|      move.l d0,-(sp)
    e832:	|      jsr 12f3a <addVarToStack>
    e838:	|      addq.l #8,sp
    e83a:	|      tst.w d0
    e83c:	|  /-- bne.s e842 <builtIn_pushToStack+0x56>
		return BR_ERROR;
    e83e:	|  |   moveq #1,d0
    e840:	+--|-- bra.s e8a2 <builtIn_pushToStack+0xb6>

	if (fun -> stack -> next -> thisVar.varData.theStack -> first -> next == NULL)
    e842:	|  \-> movea.l 8(sp),a0
    e846:	|      movea.l 24(a0),a0
    e84a:	|      movea.l 8(a0),a0
    e84e:	|      movea.l 4(a0),a0
    e852:	|      movea.l (a0),a0
    e854:	|      move.l 8(a0),d0
    e858:	|  /-- bne.s e880 <builtIn_pushToStack+0x94>
		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> first;
    e85a:	|  |   movea.l 8(sp),a0
    e85e:	|  |   movea.l 24(a0),a0
    e862:	|  |   movea.l 8(a0),a0
    e866:	|  |   movea.l 4(a0),a1
    e86a:	|  |   movea.l 8(sp),a0
    e86e:	|  |   movea.l 24(a0),a0
    e872:	|  |   movea.l 8(a0),a0
    e876:	|  |   movea.l 4(a0),a0
    e87a:	|  |   move.l (a1),d0
    e87c:	|  |   move.l d0,4(a0)

	trimStack (&fun -> stack);
    e880:	|  \-> moveq #24,d0
    e882:	|      add.l 8(sp),d0
    e886:	|      move.l d0,-(sp)
    e888:	|      jsr 14082 <trimStack>
    e88e:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    e890:	|      moveq #24,d0
    e892:	|      add.l 8(sp),d0
    e896:	|      move.l d0,-(sp)
    e898:	|      jsr 14082 <trimStack>
    e89e:	|      addq.l #4,sp
	return BR_CONTINUE;
    e8a0:	|      moveq #2,d0
}
    e8a2:	\----> rts

0000e8a4 <builtIn_enqueue>:

builtIn(enqueue)
{
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    e8a4:	             movea.l 8(sp),a0
    e8a8:	             movea.l 24(a0),a0
    e8ac:	             movea.l 8(a0),a0
    e8b0:	             move.l (a0),d0
    e8b2:	             moveq #6,d1
    e8b4:	             cmp.l d0,d1
    e8b6:	         /-- beq.s e8cc <builtIn_enqueue+0x28>
		KPrintF ("Parameter isn't a stack");
    e8b8:	         |   pea 180ee <PutChar+0x1bae>
    e8be:	         |   jsr 15bf0 <KPrintF>
    e8c4:	         |   addq.l #4,sp
		return BR_ERROR;
    e8c6:	         |   moveq #1,d0
    e8c8:	/--------|-- bra.w e9ba <builtIn_enqueue+0x116>
	}

	if (fun -> stack -> next -> thisVar.varData.theStack -> first == NULL)
    e8cc:	|        \-> movea.l 8(sp),a0
    e8d0:	|            movea.l 24(a0),a0
    e8d4:	|            movea.l 8(a0),a0
    e8d8:	|            movea.l 4(a0),a0
    e8dc:	|            move.l (a0),d0
    e8de:	|     /----- bne.s e938 <builtIn_enqueue+0x94>
	{
		if (! addVarToStack (&fun -> stack -> thisVar, &fun -> stack -> next -> thisVar.varData.theStack -> first))
    e8e0:	|     |      movea.l 8(sp),a0
    e8e4:	|     |      movea.l 24(a0),a0
    e8e8:	|     |      movea.l 8(a0),a0
    e8ec:	|     |      move.l 4(a0),d0
    e8f0:	|     |      move.l d0,d1
    e8f2:	|     |      movea.l 8(sp),a0
    e8f6:	|     |      move.l 24(a0),d0
    e8fa:	|     |      move.l d1,-(sp)
    e8fc:	|     |      move.l d0,-(sp)
    e8fe:	|     |      jsr 12f3a <addVarToStack>
    e904:	|     |      addq.l #8,sp
    e906:	|     |      tst.w d0
    e908:	|     |  /-- bne.s e910 <builtIn_enqueue+0x6c>
			return BR_ERROR;
    e90a:	|     |  |   moveq #1,d0
    e90c:	+-----|--|-- bra.w e9ba <builtIn_enqueue+0x116>

		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> first;
    e910:	|     |  \-> movea.l 8(sp),a0
    e914:	|     |      movea.l 24(a0),a0
    e918:	|     |      movea.l 8(a0),a0
    e91c:	|     |      movea.l 4(a0),a1
    e920:	|     |      movea.l 8(sp),a0
    e924:	|     |      movea.l 24(a0),a0
    e928:	|     |      movea.l 8(a0),a0
    e92c:	|     |      movea.l 4(a0),a0
    e930:	|     |      move.l (a1),d0
    e932:	|     |      move.l d0,4(a0)
    e936:	|  /--|----- bra.s e998 <builtIn_enqueue+0xf4>
	}
	else
	{
		if (! addVarToStack (&fun -> stack -> thisVar,
							 &fun -> stack -> next -> thisVar.varData.theStack -> last -> next))
    e938:	|  |  \----> movea.l 8(sp),a0
    e93c:	|  |         movea.l 24(a0),a0
    e940:	|  |         movea.l 8(a0),a0
    e944:	|  |         movea.l 4(a0),a0
    e948:	|  |         move.l 4(a0),d0
		if (! addVarToStack (&fun -> stack -> thisVar,
    e94c:	|  |         move.l d0,d1
    e94e:	|  |         addq.l #8,d1
    e950:	|  |         movea.l 8(sp),a0
    e954:	|  |         move.l 24(a0),d0
    e958:	|  |         move.l d1,-(sp)
    e95a:	|  |         move.l d0,-(sp)
    e95c:	|  |         jsr 12f3a <addVarToStack>
    e962:	|  |         addq.l #8,sp
    e964:	|  |         tst.w d0
    e966:	|  |     /-- bne.s e96c <builtIn_enqueue+0xc8>
			return BR_ERROR;
    e968:	|  |     |   moveq #1,d0
    e96a:	+--|-----|-- bra.s e9ba <builtIn_enqueue+0x116>
		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> last -> next;
    e96c:	|  |     \-> movea.l 8(sp),a0
    e970:	|  |         movea.l 24(a0),a0
    e974:	|  |         movea.l 8(a0),a0
    e978:	|  |         movea.l 4(a0),a0
    e97c:	|  |         movea.l 4(a0),a1
    e980:	|  |         movea.l 8(sp),a0
    e984:	|  |         movea.l 24(a0),a0
    e988:	|  |         movea.l 8(a0),a0
    e98c:	|  |         movea.l 4(a0),a0
    e990:	|  |         move.l 8(a1),d0
    e994:	|  |         move.l d0,4(a0)
	}

	trimStack (&fun -> stack);
    e998:	|  \-------> moveq #24,d0
    e99a:	|            add.l 8(sp),d0
    e99e:	|            move.l d0,-(sp)
    e9a0:	|            jsr 14082 <trimStack>
    e9a6:	|            addq.l #4,sp
	trimStack (&fun -> stack);
    e9a8:	|            moveq #24,d0
    e9aa:	|            add.l 8(sp),d0
    e9ae:	|            move.l d0,-(sp)
    e9b0:	|            jsr 14082 <trimStack>
    e9b6:	|            addq.l #4,sp
	return BR_CONTINUE;
    e9b8:	|            moveq #2,d0
}
    e9ba:	\----------> rts

0000e9bc <builtIn_deleteFromStack>:

builtIn(deleteFromStack)
{
    e9bc:	       move.l a2,-(sp)
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    e9be:	       movea.l 12(sp),a0
    e9c2:	       movea.l 24(a0),a0
    e9c6:	       movea.l 8(a0),a0
    e9ca:	       move.l (a0),d0
    e9cc:	       moveq #6,d1
    e9ce:	       cmp.l d0,d1
    e9d0:	   /-- beq.s e9e6 <builtIn_deleteFromStack+0x2a>
		KPrintF ("Parameter isn't a stack.");
    e9d2:	   |   pea 180d5 <PutChar+0x1b95>
    e9d8:	   |   jsr 15bf0 <KPrintF>
    e9de:	   |   addq.l #4,sp
		return BR_ERROR;
    e9e0:	   |   moveq #1,d0
    e9e2:	/--|-- bra.w ea7c <builtIn_deleteFromStack+0xc0>
	}

	// Return value
	setVariable (&fun -> reg, SVT_INT,
				 deleteVarFromStack (&fun -> stack -> thisVar,
									 &fun -> stack -> next -> thisVar.varData.theStack -> first, FALSE));
    e9e6:	|  \-> movea.l 12(sp),a0
    e9ea:	|      movea.l 24(a0),a0
    e9ee:	|      movea.l 8(a0),a0
    e9f2:	|      move.l 4(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    e9f6:	|      move.l d0,d1
				 deleteVarFromStack (&fun -> stack -> thisVar,
    e9f8:	|      movea.l 12(sp),a0
    e9fc:	|      move.l 24(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    ea00:	|      clr.l -(sp)
    ea02:	|      move.l d1,-(sp)
    ea04:	|      move.l d0,-(sp)
    ea06:	|      jsr 132da <deleteVarFromStack>
    ea0c:	|      lea 12(sp),sp
    ea10:	|      move.l d0,d1
    ea12:	|      moveq #28,d0
    ea14:	|      add.l 12(sp),d0
    ea18:	|      move.l d1,-(sp)
    ea1a:	|      pea 1 <_start+0x1>
    ea1e:	|      move.l d0,-(sp)
    ea20:	|      jsr 13ff0 <setVariable>
    ea26:	|      lea 12(sp),sp

	// Horrible hacking because 'last' value might now be wrong!
	fun->stack->next->thisVar.varData.theStack->last = stackFindLast (fun->stack->next->thisVar.varData.theStack->first);
    ea2a:	|      movea.l 12(sp),a0
    ea2e:	|      movea.l 24(a0),a0
    ea32:	|      movea.l 8(a0),a0
    ea36:	|      movea.l 4(a0),a0
    ea3a:	|      move.l (a0),d0
    ea3c:	|      movea.l 12(sp),a0
    ea40:	|      movea.l 24(a0),a0
    ea44:	|      movea.l 8(a0),a0
    ea48:	|      movea.l 4(a0),a2
    ea4c:	|      move.l d0,-(sp)
    ea4e:	|      jsr 1403a <stackFindLast>
    ea54:	|      addq.l #4,sp
    ea56:	|      move.l d0,4(a2)

	trimStack (&fun -> stack);
    ea5a:	|      moveq #24,d0
    ea5c:	|      add.l 12(sp),d0
    ea60:	|      move.l d0,-(sp)
    ea62:	|      jsr 14082 <trimStack>
    ea68:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    ea6a:	|      moveq #24,d0
    ea6c:	|      add.l 12(sp),d0
    ea70:	|      move.l d0,-(sp)
    ea72:	|      jsr 14082 <trimStack>
    ea78:	|      addq.l #4,sp
	return BR_CONTINUE;
    ea7a:	|      moveq #2,d0
}
    ea7c:	\----> movea.l (sp)+,a2
    ea7e:	       rts

0000ea80 <builtIn_deleteAllFromStack>:

builtIn(deleteAllFromStack)
{
    ea80:	       move.l a2,-(sp)
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    ea82:	       movea.l 12(sp),a0
    ea86:	       movea.l 24(a0),a0
    ea8a:	       movea.l 8(a0),a0
    ea8e:	       move.l (a0),d0
    ea90:	       moveq #6,d1
    ea92:	       cmp.l d0,d1
    ea94:	   /-- beq.s eaaa <builtIn_deleteAllFromStack+0x2a>
		KPrintF ("Parameter isn't a stack.");
    ea96:	   |   pea 180d5 <PutChar+0x1b95>
    ea9c:	   |   jsr 15bf0 <KPrintF>
    eaa2:	   |   addq.l #4,sp
		return BR_ERROR;
    eaa4:	   |   moveq #1,d0
    eaa6:	/--|-- bra.w eb42 <builtIn_deleteAllFromStack+0xc2>
	}

	// Return value
	setVariable (&fun -> reg, SVT_INT,
				 deleteVarFromStack (&fun -> stack -> thisVar,
									 &fun -> stack -> next -> thisVar.varData.theStack -> first, TRUE));
    eaaa:	|  \-> movea.l 12(sp),a0
    eaae:	|      movea.l 24(a0),a0
    eab2:	|      movea.l 8(a0),a0
    eab6:	|      move.l 4(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    eaba:	|      move.l d0,d1
				 deleteVarFromStack (&fun -> stack -> thisVar,
    eabc:	|      movea.l 12(sp),a0
    eac0:	|      move.l 24(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    eac4:	|      pea 1 <_start+0x1>
    eac8:	|      move.l d1,-(sp)
    eaca:	|      move.l d0,-(sp)
    eacc:	|      jsr 132da <deleteVarFromStack>
    ead2:	|      lea 12(sp),sp
    ead6:	|      move.l d0,d1
    ead8:	|      moveq #28,d0
    eada:	|      add.l 12(sp),d0
    eade:	|      move.l d1,-(sp)
    eae0:	|      pea 1 <_start+0x1>
    eae4:	|      move.l d0,-(sp)
    eae6:	|      jsr 13ff0 <setVariable>
    eaec:	|      lea 12(sp),sp

	// Horrible hacking because 'last' value might now be wrong!
	fun->stack->next->thisVar.varData.theStack->last = stackFindLast (fun->stack->next->thisVar.varData.theStack->first);
    eaf0:	|      movea.l 12(sp),a0
    eaf4:	|      movea.l 24(a0),a0
    eaf8:	|      movea.l 8(a0),a0
    eafc:	|      movea.l 4(a0),a0
    eb00:	|      move.l (a0),d0
    eb02:	|      movea.l 12(sp),a0
    eb06:	|      movea.l 24(a0),a0
    eb0a:	|      movea.l 8(a0),a0
    eb0e:	|      movea.l 4(a0),a2
    eb12:	|      move.l d0,-(sp)
    eb14:	|      jsr 1403a <stackFindLast>
    eb1a:	|      addq.l #4,sp
    eb1c:	|      move.l d0,4(a2)

	trimStack (&fun -> stack);
    eb20:	|      moveq #24,d0
    eb22:	|      add.l 12(sp),d0
    eb26:	|      move.l d0,-(sp)
    eb28:	|      jsr 14082 <trimStack>
    eb2e:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    eb30:	|      moveq #24,d0
    eb32:	|      add.l 12(sp),d0
    eb36:	|      move.l d0,-(sp)
    eb38:	|      jsr 14082 <trimStack>
    eb3e:	|      addq.l #4,sp
	return BR_CONTINUE;
    eb40:	|      moveq #2,d0
}
    eb42:	\----> movea.l (sp)+,a2
    eb44:	       rts

0000eb46 <builtIn_popFromStack>:

builtIn(popFromStack)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    eb46:	       movea.l 8(sp),a0
    eb4a:	       movea.l 24(a0),a0
    eb4e:	       move.l (a0),d0
    eb50:	       moveq #6,d1
    eb52:	       cmp.l d0,d1
    eb54:	   /-- beq.s eb68 <builtIn_popFromStack+0x22>
		KPrintF ("Parameter isn't a stack.");
    eb56:	   |   pea 180d5 <PutChar+0x1b95>
    eb5c:	   |   jsr 15bf0 <KPrintF>
    eb62:	   |   addq.l #4,sp
		return BR_ERROR;
    eb64:	   |   moveq #1,d0
    eb66:	/--|-- bra.s ebd2 <builtIn_popFromStack+0x8c>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    eb68:	|  \-> movea.l 8(sp),a0
    eb6c:	|      movea.l 24(a0),a0
    eb70:	|      movea.l 4(a0),a0
    eb74:	|      move.l (a0),d0
    eb76:	|  /-- bne.s eb8a <builtIn_popFromStack+0x44>
		KPrintF ("The stack's empty.");
    eb78:	|  |   pea 18106 <PutChar+0x1bc6>
    eb7e:	|  |   jsr 15bf0 <KPrintF>
    eb84:	|  |   addq.l #4,sp
		return BR_ERROR;
    eb86:	|  |   moveq #1,d0
    eb88:	+--|-- bra.s ebd2 <builtIn_popFromStack+0x8c>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> first -> thisVar), &fun -> reg);
    eb8a:	|  \-> moveq #28,d0
    eb8c:	|      add.l 8(sp),d0
    eb90:	|      movea.l 8(sp),a0
    eb94:	|      movea.l 24(a0),a0
    eb98:	|      movea.l 4(a0),a0
    eb9c:	|      move.l (a0),d1
    eb9e:	|      move.l d0,-(sp)
    eba0:	|      move.l d1,-(sp)
    eba2:	|      jsr 13bb8 <copyVariable>
    eba8:	|      addq.l #8,sp
	trimStack (&fun -> stack -> thisVar.varData.theStack -> first);
    ebaa:	|      movea.l 8(sp),a0
    ebae:	|      movea.l 24(a0),a0
    ebb2:	|      move.l 4(a0),d0
    ebb6:	|      move.l d0,-(sp)
    ebb8:	|      jsr 14082 <trimStack>
    ebbe:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    ebc0:	|      moveq #24,d0
    ebc2:	|      add.l 8(sp),d0
    ebc6:	|      move.l d0,-(sp)
    ebc8:	|      jsr 14082 <trimStack>
    ebce:	|      addq.l #4,sp
	return BR_CONTINUE;
    ebd0:	|      moveq #2,d0
}
    ebd2:	\----> rts

0000ebd4 <builtIn_peekStart>:

builtIn(peekStart)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    ebd4:	       movea.l 8(sp),a0
    ebd8:	       movea.l 24(a0),a0
    ebdc:	       move.l (a0),d0
    ebde:	       moveq #6,d1
    ebe0:	       cmp.l d0,d1
    ebe2:	   /-- beq.s ebf6 <builtIn_peekStart+0x22>
		KPrintF ("Parameter isn't a stack.");
    ebe4:	   |   pea 180d5 <PutChar+0x1b95>
    ebea:	   |   jsr 15bf0 <KPrintF>
    ebf0:	   |   addq.l #4,sp
		return BR_ERROR;
    ebf2:	   |   moveq #1,d0
    ebf4:	/--|-- bra.s ec4a <builtIn_peekStart+0x76>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    ebf6:	|  \-> movea.l 8(sp),a0
    ebfa:	|      movea.l 24(a0),a0
    ebfe:	|      movea.l 4(a0),a0
    ec02:	|      move.l (a0),d0
    ec04:	|  /-- bne.s ec18 <builtIn_peekStart+0x44>
		KPrintF ("The stack's empty.");
    ec06:	|  |   pea 18106 <PutChar+0x1bc6>
    ec0c:	|  |   jsr 15bf0 <KPrintF>
    ec12:	|  |   addq.l #4,sp
		return BR_ERROR;
    ec14:	|  |   moveq #1,d0
    ec16:	+--|-- bra.s ec4a <builtIn_peekStart+0x76>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> first -> thisVar), &fun -> reg);
    ec18:	|  \-> moveq #28,d0
    ec1a:	|      add.l 8(sp),d0
    ec1e:	|      movea.l 8(sp),a0
    ec22:	|      movea.l 24(a0),a0
    ec26:	|      movea.l 4(a0),a0
    ec2a:	|      move.l (a0),d1
    ec2c:	|      move.l d0,-(sp)
    ec2e:	|      move.l d1,-(sp)
    ec30:	|      jsr 13bb8 <copyVariable>
    ec36:	|      addq.l #8,sp
	trimStack (&fun -> stack);
    ec38:	|      moveq #24,d0
    ec3a:	|      add.l 8(sp),d0
    ec3e:	|      move.l d0,-(sp)
    ec40:	|      jsr 14082 <trimStack>
    ec46:	|      addq.l #4,sp
	return BR_CONTINUE;
    ec48:	|      moveq #2,d0
}
    ec4a:	\----> rts

0000ec4c <builtIn_peekEnd>:

builtIn(peekEnd)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    ec4c:	       movea.l 8(sp),a0
    ec50:	       movea.l 24(a0),a0
    ec54:	       move.l (a0),d0
    ec56:	       moveq #6,d1
    ec58:	       cmp.l d0,d1
    ec5a:	   /-- beq.s ec6e <builtIn_peekEnd+0x22>
		KPrintF ("Parameter isn't a stack.");
    ec5c:	   |   pea 180d5 <PutChar+0x1b95>
    ec62:	   |   jsr 15bf0 <KPrintF>
    ec68:	   |   addq.l #4,sp
		return BR_ERROR;
    ec6a:	   |   moveq #1,d0
    ec6c:	/--|-- bra.s ecc4 <builtIn_peekEnd+0x78>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    ec6e:	|  \-> movea.l 8(sp),a0
    ec72:	|      movea.l 24(a0),a0
    ec76:	|      movea.l 4(a0),a0
    ec7a:	|      move.l (a0),d0
    ec7c:	|  /-- bne.s ec90 <builtIn_peekEnd+0x44>
		KPrintF ("The stack's empty.");
    ec7e:	|  |   pea 18106 <PutChar+0x1bc6>
    ec84:	|  |   jsr 15bf0 <KPrintF>
    ec8a:	|  |   addq.l #4,sp
		return BR_ERROR;
    ec8c:	|  |   moveq #1,d0
    ec8e:	+--|-- bra.s ecc4 <builtIn_peekEnd+0x78>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> last -> thisVar), &fun -> reg);
    ec90:	|  \-> moveq #28,d0
    ec92:	|      add.l 8(sp),d0
    ec96:	|      movea.l 8(sp),a0
    ec9a:	|      movea.l 24(a0),a0
    ec9e:	|      movea.l 4(a0),a0
    eca2:	|      move.l 4(a0),d1
    eca6:	|      move.l d0,-(sp)
    eca8:	|      move.l d1,-(sp)
    ecaa:	|      jsr 13bb8 <copyVariable>
    ecb0:	|      addq.l #8,sp
	trimStack (&fun -> stack);
    ecb2:	|      moveq #24,d0
    ecb4:	|      add.l 8(sp),d0
    ecb8:	|      move.l d0,-(sp)
    ecba:	|      jsr 14082 <trimStack>
    ecc0:	|      addq.l #4,sp
	return BR_CONTINUE;
    ecc2:	|      moveq #2,d0
}
    ecc4:	\----> rts

0000ecc6 <builtIn_random>:

builtIn(random)
{
    ecc6:	       subq.l #4,sp
	UNUSEDALL
	int num;

	if (! getValueType(&num, SVT_INT,&fun -> stack -> thisVar))
    ecc8:	       movea.l 12(sp),a0
    eccc:	       move.l 24(a0),d0
    ecd0:	       move.l d0,-(sp)
    ecd2:	       pea 1 <_start+0x1>
    ecd6:	       move.l sp,d0
    ecd8:	       addq.l #8,d0
    ecda:	       move.l d0,-(sp)
    ecdc:	       jsr 136fe <getValueType>
    ece2:	       lea 12(sp),sp
    ece6:	       tst.w d0
    ece8:	   /-- bne.s ecee <builtIn_random+0x28>
		return BR_ERROR;
    ecea:	   |   moveq #1,d0
    ecec:	/--|-- bra.s ed38 <builtIn_random+0x72>

	trimStack (&fun -> stack);
    ecee:	|  \-> moveq #24,d0
    ecf0:	|      add.l 12(sp),d0
    ecf4:	|      move.l d0,-(sp)
    ecf6:	|      jsr 14082 <trimStack>
    ecfc:	|      addq.l #4,sp
	if (num <= 0) num = 1;
    ecfe:	|      move.l (sp),d0
    ed00:	|  /-- bgt.s ed06 <builtIn_random+0x40>
    ed02:	|  |   moveq #1,d0
    ed04:	|  |   move.l d0,(sp)
	setVariable (&fun -> reg, SVT_INT, rand() % num);
    ed06:	|  \-> jsr 147f0 <rand>
    ed0c:	|      move.l d0,d1
    ed0e:	|      move.l (sp),d0
    ed10:	|      move.l d0,-(sp)
    ed12:	|      move.l d1,-(sp)
    ed14:	|      jsr 16504 <__umodsi3>
    ed1a:	|      addq.l #8,sp
    ed1c:	|      move.l d0,d1
    ed1e:	|      moveq #28,d0
    ed20:	|      add.l 12(sp),d0
    ed24:	|      move.l d1,-(sp)
    ed26:	|      pea 1 <_start+0x1>
    ed2a:	|      move.l d0,-(sp)
    ed2c:	|      jsr 13ff0 <setVariable>
    ed32:	|      lea 12(sp),sp
	return BR_CONTINUE;
    ed36:	|      moveq #2,d0
}
    ed38:	\----> addq.l #4,sp
    ed3a:	       rts

0000ed3c <builtIn_setStatusColour>:
	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	statusBarColour ((byte) red, (byte) green, (byte) blue);
	return BR_CONTINUE; ToDo amigize this?*/
}
    ed3c:	nop
    ed3e:	rts

0000ed40 <builtIn_setLitStatusColour>:

	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	statusBarLitColour ((byte) red, (byte) green, (byte) blue);Todo - Amigize this?*/
	return BR_CONTINUE;
    ed40:	moveq #2,d0
}
    ed42:	rts

0000ed44 <builtIn_setPasteColour>:

builtIn (setPasteColour)
{
	UNUSEDALL
	int red, green, blue;
	KPrintF("setPasteColour: Function not implemented on Amiga. Attention using this might cause problems!\n");
    ed44:	pea 18119 <PutChar+0x1bd9>
    ed4a:	jsr 15bf0 <KPrintF>
    ed50:	addq.l #4,sp
	/*if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	setFontColour (pastePalette, (byte) red, (byte) green, (byte) blue);Todo Amigize This?*/
	return BR_CONTINUE;
    ed52:	moveq #2,d0
}
    ed54:	rts

0000ed56 <builtIn_setBlankColour>:
	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	currentBlankColour = makeColour (red & 255, green & 255, blue & 255);
	setVariable (&fun -> reg, SVT_INT, 1);Todo Amigize this?*/
	return BR_CONTINUE;
    ed56:	moveq #2,d0
}
    ed58:	rts

0000ed5a <builtIn_setBurnColour>:

	currentBurnR = red;
	currentBurnG = green;
	currentBurnB = blue;
	setVariable (&fun -> reg, SVT_INT, 1);Todo Amigize this?*/
	return BR_CONTINUE;
    ed5a:	moveq #2,d0
}
    ed5c:	rts

0000ed5e <builtIn_setFont>:


builtIn(setFont)
{
    ed5e:	       lea -16(sp),sp
    ed62:	       move.l a6,-(sp)
    UNUSEDALL
    int fileNumber, newHeight;
    if (!getValueType(&newHeight, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    ed64:	       movea.l 28(sp),a0
    ed68:	       move.l 24(a0),d0
    ed6c:	       move.l d0,-(sp)
    ed6e:	       pea 1 <_start+0x1>
    ed72:	       lea 12(sp),a0
    ed76:	       move.l a0,-(sp)
    ed78:	       jsr 136fe <getValueType>
    ed7e:	       lea 12(sp),sp
    ed82:	       tst.w d0
    ed84:	   /-- bne.s ed8c <builtIn_setFont+0x2e>
    ed86:	   |   moveq #1,d0
    ed88:	/--|-- bra.w ee3a <builtIn_setFont+0xdc>
    //              KPrintF("  Height: %d\n", newHeight);
    trimStack(&fun->stack);
    ed8c:	|  \-> moveq #24,d0
    ed8e:	|      add.l 28(sp),d0
    ed92:	|      move.l d0,-(sp)
    ed94:	|      jsr 14082 <trimStack>
    ed9a:	|      addq.l #4,sp
    char *newText = getTextFromAnyVar(&(fun->stack->thisVar));
    ed9c:	|      movea.l 28(sp),a0
    eda0:	|      move.l 24(a0),d0
    eda4:	|      move.l d0,-(sp)
    eda6:	|      jsr 13cd4 <getTextFromAnyVar>
    edac:	|      addq.l #4,sp
    edae:	|      move.l d0,16(sp)
    if (!newText) return BR_ERROR;
    edb2:	|  /-- bne.s edba <builtIn_setFont+0x5c>
    edb4:	|  |   moveq #1,d0
    edb6:	+--|-- bra.w ee3a <builtIn_setFont+0xdc>
    //              KPrintF("  Character supported: %s\n", newText);
    trimStack(&fun->stack);
    edba:	|  \-> moveq #24,d0
    edbc:	|      add.l 28(sp),d0
    edc0:	|      move.l d0,-(sp)
    edc2:	|      jsr 14082 <trimStack>
    edc8:	|      addq.l #4,sp
    if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) return BR_ERROR;
    edca:	|      movea.l 28(sp),a0
    edce:	|      move.l 24(a0),d0
    edd2:	|      move.l d0,-(sp)
    edd4:	|      pea 5 <_start+0x5>
    edd8:	|      lea 16(sp),a0
    eddc:	|      move.l a0,-(sp)
    edde:	|      jsr 136fe <getValueType>
    ede4:	|      lea 12(sp),sp
    ede8:	|      tst.w d0
    edea:	|  /-- bne.s edf0 <builtIn_setFont+0x92>
    edec:	|  |   moveq #1,d0
    edee:	+--|-- bra.s ee3a <builtIn_setFont+0xdc>
    //              KPrintF("  File: %d\n", fileNumber);
    trimStack(&fun->stack);
    edf0:	|  \-> moveq #24,d0
    edf2:	|      add.l 28(sp),d0
    edf6:	|      move.l d0,-(sp)
    edf8:	|      jsr 14082 <trimStack>
    edfe:	|      addq.l #4,sp
    if (!loadFont(fileNumber, newText, newHeight)) return BR_ERROR;
    ee00:	|      move.l 4(sp),d1
    ee04:	|      move.l 8(sp),d0
    ee08:	|      move.l d1,-(sp)
    ee0a:	|      move.l 20(sp),-(sp)
    ee0e:	|      move.l d0,-(sp)
    ee10:	|      jsr 142ba <loadFont>
    ee16:	|      lea 12(sp),sp
    ee1a:	|      tst.w d0
    ee1c:	|  /-- bne.s ee22 <builtIn_setFont+0xc4>
    ee1e:	|  |   moveq #1,d0
    ee20:	+--|-- bra.s ee3a <builtIn_setFont+0xdc>
    //              KPrintF("  Done!\n");
    FreeVec(newText);
    ee22:	|  \-> move.l 16(sp),12(sp)
    ee28:	|      move.l 1b1a2 <SysBase>,d0
    ee2e:	|      movea.l d0,a6
    ee30:	|      movea.l 12(sp),a1
    ee34:	|      jsr -690(a6)

    return BR_CONTINUE;
    ee38:	|      moveq #2,d0
}
    ee3a:	\----> movea.l (sp)+,a6
    ee3c:	       lea 16(sp),sp
    ee40:	       rts

0000ee42 <builtIn_inFont>:

builtIn(inFont)
{
    ee42:	       subq.l #4,sp
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    ee44:	       movea.l 12(sp),a0
    ee48:	       move.l 24(a0),d0
    ee4c:	       move.l d0,-(sp)
    ee4e:	       jsr 13cd4 <getTextFromAnyVar>
    ee54:	       addq.l #4,sp
    ee56:	       move.l d0,(sp)
	if (! newText) return BR_ERROR;
    ee58:	   /-- bne.s ee5e <builtIn_inFont+0x1c>
    ee5a:	   |   moveq #1,d0
    ee5c:	/--|-- bra.s ee94 <builtIn_inFont+0x52>
	trimStack (&fun -> stack);
    ee5e:	|  \-> moveq #24,d0
    ee60:	|      add.l 12(sp),d0
    ee64:	|      move.l d0,-(sp)
    ee66:	|      jsr 14082 <trimStack>
    ee6c:	|      addq.l #4,sp

	// Return value
	
	setVariable (&fun -> reg, SVT_INT, isInFont(newText));
    ee6e:	|      move.l (sp),-(sp)
    ee70:	|      jsr 1428e <isInFont>
    ee76:	|      addq.l #4,sp
    ee78:	|      movea.w d0,a0
    ee7a:	|      moveq #28,d0
    ee7c:	|      add.l 12(sp),d0
    ee80:	|      move.l a0,-(sp)
    ee82:	|      pea 1 <_start+0x1>
    ee86:	|      move.l d0,-(sp)
    ee88:	|      jsr 13ff0 <setVariable>
    ee8e:	|      lea 12(sp),sp
	return BR_CONTINUE;
    ee92:	|      moveq #2,d0
}
    ee94:	\----> addq.l #4,sp
    ee96:	       rts

0000ee98 <builtIn_pasteString>:

builtIn(pasteString)
{
    ee98:	       lea -16(sp),sp
    ee9c:	       move.l a6,-(sp)
    ee9e:	       move.l d2,-(sp)
    UNUSEDALL
    char *newText = getTextFromAnyVar(&(fun->stack->thisVar));
    eea0:	       movea.l 32(sp),a0
    eea4:	       move.l 24(a0),d0
    eea8:	       move.l d0,-(sp)
    eeaa:	       jsr 13cd4 <getTextFromAnyVar>
    eeb0:	       addq.l #4,sp
    eeb2:	       move.l d0,20(sp)
    trimStack(&fun->stack);
    eeb6:	       moveq #24,d0
    eeb8:	       add.l 32(sp),d0
    eebc:	       move.l d0,-(sp)
    eebe:	       jsr 14082 <trimStack>
    eec4:	       addq.l #4,sp
    int y, x;
    if (!getValueType(&y, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    eec6:	       movea.l 32(sp),a0
    eeca:	       move.l 24(a0),d0
    eece:	       move.l d0,-(sp)
    eed0:	       pea 1 <_start+0x1>
    eed4:	       lea 20(sp),a0
    eed8:	       move.l a0,-(sp)
    eeda:	       jsr 136fe <getValueType>
    eee0:	       lea 12(sp),sp
    eee4:	       tst.w d0
    eee6:	   /-- bne.s eeee <builtIn_pasteString+0x56>
    eee8:	   |   moveq #1,d0
    eeea:	/--|-- bra.w ef76 <builtIn_pasteString+0xde>
    trimStack(&fun->stack);
    eeee:	|  \-> moveq #24,d0
    eef0:	|      add.l 32(sp),d0
    eef4:	|      move.l d0,-(sp)
    eef6:	|      jsr 14082 <trimStack>
    eefc:	|      addq.l #4,sp
    if (!getValueType(&x, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    eefe:	|      movea.l 32(sp),a0
    ef02:	|      move.l 24(a0),d0
    ef06:	|      move.l d0,-(sp)
    ef08:	|      pea 1 <_start+0x1>
    ef0c:	|      lea 16(sp),a0
    ef10:	|      move.l a0,-(sp)
    ef12:	|      jsr 136fe <getValueType>
    ef18:	|      lea 12(sp),sp
    ef1c:	|      tst.w d0
    ef1e:	|  /-- bne.s ef24 <builtIn_pasteString+0x8c>
    ef20:	|  |   moveq #1,d0
    ef22:	+--|-- bra.s ef76 <builtIn_pasteString+0xde>
    trimStack(&fun->stack);
    ef24:	|  \-> moveq #24,d0
    ef26:	|      add.l 32(sp),d0
    ef2a:	|      move.l d0,-(sp)
    ef2c:	|      jsr 14082 <trimStack>
    ef32:	|      addq.l #4,sp
    if (x == IN_THE_CENTRE) x = (winWidth - stringWidth(newText)) >> 1;
    ef34:	|      move.l 8(sp),d0
    ef38:	|      cmpi.l #65535,d0
    ef3e:	|  /-- bne.s ef5e <builtIn_pasteString+0xc6>
    ef40:	|  |   move.l 1b0f6 <winWidth>,d2
    ef46:	|  |   move.l 20(sp),-(sp)
    ef4a:	|  |   jsr 142a0 <stringWidth>
    ef50:	|  |   addq.l #4,sp
    ef52:	|  |   move.l d2,d1
    ef54:	|  |   sub.l d0,d1
    ef56:	|  |   move.l d1,d0
    ef58:	|  |   lsr.l #1,d0
    ef5a:	|  |   move.l d0,8(sp)
    //fixFont(pastePalette);
    //pasteStringToBackdrop(newText, x, y, pastePalette); //Todo: Amigize this
    FreeVec(newText); 
    ef5e:	|  \-> move.l 20(sp),16(sp)
    ef64:	|      move.l 1b1a2 <SysBase>,d0
    ef6a:	|      movea.l d0,a6
    ef6c:	|      movea.l 16(sp),a1
    ef70:	|      jsr -690(a6)
    return BR_CONTINUE;
    ef74:	|      moveq #2,d0
}
    ef76:	\----> move.l (sp)+,d2
    ef78:	       movea.l (sp)+,a6
    ef7a:	       lea 16(sp),sp
    ef7e:	       rts

0000ef80 <builtIn_anim>:

builtIn(anim)
{
    ef80:	       lea -12(sp),sp
	UNUSEDALL
	if (numParams < 2) {
    ef84:	       moveq #1,d0
    ef86:	       cmp.l 16(sp),d0
    ef8a:	   /-- blt.s efa0 <builtIn_anim+0x20>
		KPrintF("Built-in function anim() must have at least 2 parameters.");
    ef8c:	   |   pea 18178 <PutChar+0x1c38>
    ef92:	   |   jsr 15bf0 <KPrintF>
    ef98:	   |   addq.l #4,sp
		return BR_ERROR;
    ef9a:	   |   moveq #1,d0
    ef9c:	/--|-- bra.w f02e <builtIn_anim+0xae>
	}


	// First store the frame numbers and take 'em off the stack
	struct personaAnimation * ba = createPersonaAnim (numParams - 1, &fun -> stack);
    efa0:	|  \-> moveq #24,d1
    efa2:	|      add.l 20(sp),d1
    efa6:	|      move.l 16(sp),d0
    efaa:	|      subq.l #1,d0
    efac:	|      move.l d1,-(sp)
    efae:	|      move.l d0,-(sp)
    efb0:	|      jsr 86d8 <createPersonaAnim>
    efb6:	|      addq.l #8,sp
    efb8:	|      move.l d0,8(sp)

	// Only remaining paramter is the file number
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    efbc:	|      movea.l 20(sp),a0
    efc0:	|      move.l 24(a0),d0
    efc4:	|      move.l d0,-(sp)
    efc6:	|      pea 5 <_start+0x5>
    efca:	|      lea 8(sp),a0
    efce:	|      move.l a0,-(sp)
    efd0:	|      jsr 136fe <getValueType>
    efd6:	|      lea 12(sp),sp
    efda:	|      tst.w d0
    efdc:	|  /-- bne.s efe2 <builtIn_anim+0x62>
    efde:	|  |   moveq #1,d0
    efe0:	+--|-- bra.s f02e <builtIn_anim+0xae>
	trimStack (&fun -> stack);
    efe2:	|  \-> moveq #24,d0
    efe4:	|      add.l 20(sp),d0
    efe8:	|      move.l d0,-(sp)
    efea:	|      jsr 14082 <trimStack>
    eff0:	|      addq.l #4,sp

	// Load the required sprite bank
	struct loadedSpriteBank * sprBanky = loadBankForAnim (fileNumber);
    eff2:	|      move.l (sp),d0
    eff4:	|      move.l d0,-(sp)
    eff6:	|      jsr 14952 <loadBankForAnim>
    effc:	|      addq.l #4,sp
    effe:	|      move.l d0,4(sp)
	if (! sprBanky) return BR_ERROR;	// File not found, fatal done already
    f002:	|  /-- bne.s f008 <builtIn_anim+0x88>
    f004:	|  |   moveq #1,d0
    f006:	+--|-- bra.s f02e <builtIn_anim+0xae>
	setBankFile (ba, sprBanky);
    f008:	|  \-> move.l 4(sp),-(sp)
    f00c:	|      move.l 12(sp),-(sp)
    f010:	|      jsr a582 <setBankFile>
    f016:	|      addq.l #8,sp

	// Return value
	newAnimationVariable (&fun -> reg, ba);
    f018:	|      moveq #28,d0
    f01a:	|      add.l 20(sp),d0
    f01e:	|      move.l 8(sp),-(sp)
    f022:	|      move.l d0,-(sp)
    f024:	|      jsr 13fac <newAnimationVariable>
    f02a:	|      addq.l #8,sp
	return BR_CONTINUE;
    f02c:	|      moveq #2,d0
}
    f02e:	\----> lea 12(sp),sp
    f032:	       rts

0000f034 <builtIn_costume>:

builtIn(costume)
{
    f034:	          lea -32(sp),sp
    f038:	          move.l a6,-(sp)
    f03a:	          move.l a2,-(sp)
    UNUSEDALL
    struct persona * newPersona = AllocVec(sizeof(struct persona), MEMF_ANY);
    f03c:	          moveq #8,d0
    f03e:	          move.l d0,32(sp)
    f042:	          clr.l 28(sp)
    f046:	          move.l 1b1a2 <SysBase>,d0
    f04c:	          movea.l d0,a6
    f04e:	          move.l 32(sp),d0
    f052:	          move.l 28(sp),d1
    f056:	          jsr -684(a6)
    f05a:	          move.l d0,24(sp)
    f05e:	          move.l 24(sp),d0
    f062:	          move.l d0,20(sp)
    if (!newPersona) return BR_ERROR;
    f066:	      /-- bne.s f06e <builtIn_costume+0x3a>
    f068:	      |   moveq #1,d0
    f06a:	/-----|-- bra.w f156 <builtIn_costume+0x122>
    newPersona->numDirections = numParams / 3;
    f06e:	|     \-> move.l 44(sp),d0
    f072:	|         pea 3 <_start+0x3>
    f076:	|         move.l d0,-(sp)
    f078:	|         jsr 164a8 <__divsi3>
    f07e:	|         addq.l #8,sp
    f080:	|         movea.l 20(sp),a0
    f084:	|         move.l d0,4(a0)
    if (numParams == 0 || newPersona->numDirections * 3 != numParams) {
    f088:	|         tst.l 44(sp)
    f08c:	|     /-- beq.s f0a2 <builtIn_costume+0x6e>
    f08e:	|     |   movea.l 20(sp),a0
    f092:	|     |   move.l 4(a0),d1
    f096:	|     |   move.l d1,d0
    f098:	|     |   add.l d0,d0
    f09a:	|     |   add.l d1,d0
    f09c:	|     |   cmp.l 44(sp),d0
    f0a0:	|  /--|-- beq.s f0b6 <builtIn_costume+0x82>
        KPrintF("Illegal number of parameters (should be greater than 0 and divisible by 3)");
    f0a2:	|  |  \-> pea 181b2 <PutChar+0x1c72>
    f0a8:	|  |      jsr 15bf0 <KPrintF>
    f0ae:	|  |      addq.l #4,sp
        return BR_ERROR;
    f0b0:	|  |      moveq #1,d0
    f0b2:	+--|----- bra.w f156 <builtIn_costume+0x122>
    }
    int iii;
    newPersona->animation = AllocVec(sizeof(struct personaAnimation *) * numParams, MEMF_ANY);
    f0b6:	|  \----> move.l 44(sp),d0
    f0ba:	|         add.l d0,d0
    f0bc:	|         add.l d0,d0
    f0be:	|         move.l d0,16(sp)
    f0c2:	|         clr.l 12(sp)
    f0c6:	|         move.l 1b1a2 <SysBase>,d0
    f0cc:	|         movea.l d0,a6
    f0ce:	|         move.l 16(sp),d0
    f0d2:	|         move.l 12(sp),d1
    f0d6:	|         jsr -684(a6)
    f0da:	|         move.l d0,8(sp)
    f0de:	|         move.l 8(sp),d0
    f0e2:	|         movea.l 20(sp),a0
    f0e6:	|         move.l d0,(a0)
    if (!newPersona->animation) return BR_ERROR;
    f0e8:	|         movea.l 20(sp),a0
    f0ec:	|         move.l (a0),d0
    f0ee:	|     /-- bne.s f0f4 <builtIn_costume+0xc0>
    f0f0:	|     |   moveq #1,d0
    f0f2:	+-----|-- bra.s f156 <builtIn_costume+0x122>
    for (iii = numParams - 1; iii >= 0; iii--) {
    f0f4:	|     \-> move.l 44(sp),d0
    f0f8:	|         subq.l #1,d0
    f0fa:	|         move.l d0,36(sp)
    f0fe:	|     /-- bra.s f13a <builtIn_costume+0x106>
        newPersona->animation[iii] = getAnimationFromVar(&(fun->stack->thisVar));
    f100:	|  /--|-> movea.l 48(sp),a0
    f104:	|  |  |   move.l 24(a0),d0
    f108:	|  |  |   movea.l 20(sp),a0
    f10c:	|  |  |   movea.l (a0),a0
    f10e:	|  |  |   move.l 36(sp),d1
    f112:	|  |  |   add.l d1,d1
    f114:	|  |  |   add.l d1,d1
    f116:	|  |  |   lea (0,a0,d1.l),a2
    f11a:	|  |  |   move.l d0,-(sp)
    f11c:	|  |  |   jsr 13bd6 <getAnimationFromVar>
    f122:	|  |  |   addq.l #4,sp
    f124:	|  |  |   move.l d0,(a2)
        trimStack(&fun->stack);
    f126:	|  |  |   moveq #24,d0
    f128:	|  |  |   add.l 48(sp),d0
    f12c:	|  |  |   move.l d0,-(sp)
    f12e:	|  |  |   jsr 14082 <trimStack>
    f134:	|  |  |   addq.l #4,sp
    for (iii = numParams - 1; iii >= 0; iii--) {
    f136:	|  |  |   subq.l #1,36(sp)
    f13a:	|  |  \-> tst.l 36(sp)
    f13e:	|  \----- bge.s f100 <builtIn_costume+0xcc>
    }

    // Return value
    newCostumeVariable(&fun->reg, newPersona);
    f140:	|         moveq #28,d0
    f142:	|         add.l 48(sp),d0
    f146:	|         move.l 20(sp),-(sp)
    f14a:	|         move.l d0,-(sp)
    f14c:	|         jsr 13fce <newCostumeVariable>
    f152:	|         addq.l #8,sp
    return BR_CONTINUE;
    f154:	|         moveq #2,d0
}
    f156:	\-------> movea.l (sp)+,a2
    f158:	          movea.l (sp)+,a6
    f15a:	          lea 32(sp),sp
    f15e:	          rts

0000f160 <builtIn_launch>:

builtIn(launch)
{
    f160:	          lea -20(sp),sp
    f164:	          move.l a6,-(sp)
    UNUSEDALL
    char * newTextA = getTextFromAnyVar(&(fun->stack->thisVar));
    f166:	          movea.l 32(sp),a0
    f16a:	          move.l 24(a0),d0
    f16e:	          move.l d0,-(sp)
    f170:	          jsr 13cd4 <getTextFromAnyVar>
    f176:	          addq.l #4,sp
    f178:	          move.l d0,20(sp)
    if (!newTextA) return BR_ERROR;
    f17c:	      /-- bne.s f184 <builtIn_launch+0x24>
    f17e:	      |   moveq #1,d0
    f180:	/-----|-- bra.w f2b2 <builtIn_launch+0x152>

    char * newText = encodeFilename(newTextA);
    f184:	|     \-> move.l 20(sp),-(sp)
    f188:	|         jsr 2fe <encodeFilename>
    f18e:	|         addq.l #4,sp
    f190:	|         move.l d0,16(sp)

    trimStack(&fun->stack);
    f194:	|         moveq #24,d0
    f196:	|         add.l 32(sp),d0
    f19a:	|         move.l d0,-(sp)
    f19c:	|         jsr 14082 <trimStack>
    f1a2:	|         addq.l #4,sp
    if (newTextA[0] == 'h' &&
    f1a4:	|         movea.l 20(sp),a0
    f1a8:	|         move.b (a0),d0
    f1aa:	|         cmpi.b #104,d0
    f1ae:	|  /----- bne.s f218 <builtIn_launch+0xb8>
        newTextA[1] == 't' &&
    f1b0:	|  |      movea.l 20(sp),a0
    f1b4:	|  |      addq.l #1,a0
    f1b6:	|  |      move.b (a0),d0
    if (newTextA[0] == 'h' &&
    f1b8:	|  |      cmpi.b #116,d0
    f1bc:	|  +----- bne.s f218 <builtIn_launch+0xb8>
        newTextA[2] == 't' &&
    f1be:	|  |      movea.l 20(sp),a0
    f1c2:	|  |      addq.l #2,a0
    f1c4:	|  |      move.b (a0),d0
        newTextA[1] == 't' &&
    f1c6:	|  |      cmpi.b #116,d0
    f1ca:	|  +----- bne.s f218 <builtIn_launch+0xb8>
        newTextA[3] == 'p' &&
    f1cc:	|  |      movea.l 20(sp),a0
    f1d0:	|  |      addq.l #3,a0
    f1d2:	|  |      move.b (a0),d0
        newTextA[2] == 't' &&
    f1d4:	|  |      cmpi.b #112,d0
    f1d8:	|  +----- bne.s f218 <builtIn_launch+0xb8>
        (newTextA[4] == ':' || (newTextA[4] == 's' && newTextA[5] == ':'))) {
    f1da:	|  |      movea.l 20(sp),a0
    f1de:	|  |      addq.l #4,a0
    f1e0:	|  |      move.b (a0),d0
        newTextA[3] == 'p' &&
    f1e2:	|  |      cmpi.b #58,d0
    f1e6:	|  |  /-- beq.s f204 <builtIn_launch+0xa4>
        (newTextA[4] == ':' || (newTextA[4] == 's' && newTextA[5] == ':'))) {
    f1e8:	|  |  |   movea.l 20(sp),a0
    f1ec:	|  |  |   addq.l #4,a0
    f1ee:	|  |  |   move.b (a0),d0
    f1f0:	|  |  |   cmpi.b #115,d0
    f1f4:	|  +--|-- bne.s f218 <builtIn_launch+0xb8>
    f1f6:	|  |  |   movea.l 20(sp),a0
    f1fa:	|  |  |   addq.l #5,a0
    f1fc:	|  |  |   move.b (a0),d0
    f1fe:	|  |  |   cmpi.b #58,d0
    f202:	|  +--|-- bne.s f218 <builtIn_launch+0xb8>

        // IT'S A WEBSITE!
        launchMe = copyString(newTextA);
    f204:	|  |  \-> move.l 20(sp),-(sp)
    f208:	|  |      jsr b8 <copyString>
    f20e:	|  |      addq.l #4,sp
    f210:	|  |      move.l d0,1b2bc <launchMe>
    f216:	|  |  /-- bra.s f26a <builtIn_launch+0x10a>
    } else {
        char *gameDir;
        gameDir = joinStrings(gamePath, "/");
    f218:	|  \--|-> move.l 1b10a <gamePath>,d0
    f21e:	|     |   pea 181fd <PutChar+0x1cbd>
    f224:	|     |   move.l d0,-(sp)
    f226:	|     |   jsr 12c2a <joinStrings>
    f22c:	|     |   addq.l #8,sp
    f22e:	|     |   move.l d0,12(sp)

        launchMe = joinStrings(gameDir, newText);
    f232:	|     |   move.l 16(sp),-(sp)
    f236:	|     |   move.l 16(sp),-(sp)
    f23a:	|     |   jsr 12c2a <joinStrings>
    f240:	|     |   addq.l #8,sp
    f242:	|     |   move.l d0,1b2bc <launchMe>
        FreeVec(newText);
    f248:	|     |   move.l 16(sp),8(sp)
    f24e:	|     |   move.l 1b1a2 <SysBase>,d0
    f254:	|     |   movea.l d0,a6
    f256:	|     |   movea.l 8(sp),a1
    f25a:	|     |   jsr -690(a6)
        if (!launchMe) return BR_ERROR;
    f25e:	|     |   move.l 1b2bc <launchMe>,d0
    f264:	|     +-- bne.s f26a <builtIn_launch+0x10a>
    f266:	|     |   moveq #1,d0
    f268:	+-----|-- bra.s f2b2 <builtIn_launch+0x152>
    }
    FreeVec(newTextA);
    f26a:	|     \-> move.l 20(sp),4(sp)
    f270:	|         move.l 1b1a2 <SysBase>,d0
    f276:	|         movea.l d0,a6
    f278:	|         movea.l 4(sp),a1
    f27c:	|         jsr -690(a6)
    setGraphicsWindow(FALSE);
    f280:	|         clr.l -(sp)
    f282:	|         jsr 2fda <setGraphicsWindow>
    f288:	|         addq.l #4,sp
    setVariable(&fun->reg, SVT_INT, 1);
    f28a:	|         moveq #28,d0
    f28c:	|         add.l 32(sp),d0
    f290:	|         pea 1 <_start+0x1>
    f294:	|         pea 1 <_start+0x1>
    f298:	|         move.l d0,-(sp)
    f29a:	|         jsr 13ff0 <setVariable>
    f2a0:	|         lea 12(sp),sp
    launchResult = &fun->reg;
    f2a4:	|         moveq #28,d0
    f2a6:	|         add.l 32(sp),d0
    f2aa:	|         move.l d0,1b2c0 <launchResult>

    return BR_KEEP_AND_PAUSE;
    f2b0:	|         moveq #0,d0
}
    f2b2:	\-------> movea.l (sp)+,a6
    f2b4:	          lea 20(sp),sp
    f2b8:	          rts

0000f2ba <builtIn_pause>:

builtIn(pause)
{
    f2ba:	       subq.l #4,sp
	UNUSEDALL
	int theTime;
	if (! getValueType(&theTime, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f2bc:	       movea.l 12(sp),a0
    f2c0:	       move.l 24(a0),d0
    f2c4:	       move.l d0,-(sp)
    f2c6:	       pea 1 <_start+0x1>
    f2ca:	       move.l sp,d0
    f2cc:	       addq.l #8,d0
    f2ce:	       move.l d0,-(sp)
    f2d0:	       jsr 136fe <getValueType>
    f2d6:	       lea 12(sp),sp
    f2da:	       tst.w d0
    f2dc:	   /-- bne.s f2e2 <builtIn_pause+0x28>
    f2de:	   |   moveq #1,d0
    f2e0:	/--|-- bra.s f310 <builtIn_pause+0x56>
	trimStack (&fun -> stack);
    f2e2:	|  \-> moveq #24,d0
    f2e4:	|      add.l 12(sp),d0
    f2e8:	|      move.l d0,-(sp)
    f2ea:	|      jsr 14082 <trimStack>
    f2f0:	|      addq.l #4,sp
	if (theTime > 0) {
    f2f2:	|      move.l (sp),d0
    f2f4:	|  /-- ble.s f30e <builtIn_pause+0x54>
		fun -> timeLeft = theTime - 1;
    f2f6:	|  |   move.l (sp),d0
    f2f8:	|  |   subq.l #1,d0
    f2fa:	|  |   movea.l 12(sp),a0
    f2fe:	|  |   move.l d0,12(a0)
		fun -> isSpeech = FALSE;
    f302:	|  |   movea.l 12(sp),a0
    f306:	|  |   clr.w 50(a0)
		return BR_KEEP_AND_PAUSE;
    f30a:	|  |   moveq #0,d0
    f30c:	+--|-- bra.s f310 <builtIn_pause+0x56>
	}
	return BR_CONTINUE;
    f30e:	|  \-> moveq #2,d0
}
    f310:	\----> addq.l #4,sp
    f312:	       rts

0000f314 <builtIn_completeTimers>:

builtIn(completeTimers)
{
	UNUSEDALL
	completeTimers();
    f314:	jsr 373c <completeTimers>
	return BR_CONTINUE;
    f31a:	moveq #2,d0
}
    f31c:	rts

0000f31e <builtIn_callEvent>:

builtIn(callEvent)
{
    f31e:	       lea -12(sp),sp
	UNUSEDALL
	int obj1, obj2;
	if (! getValueType(&obj2, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    f322:	       movea.l 20(sp),a0
    f326:	       move.l 24(a0),d0
    f32a:	       move.l d0,-(sp)
    f32c:	       pea 7 <_start+0x7>
    f330:	       lea 8(sp),a0
    f334:	       move.l a0,-(sp)
    f336:	       jsr 136fe <getValueType>
    f33c:	       lea 12(sp),sp
    f340:	       tst.w d0
    f342:	   /-- bne.s f34a <builtIn_callEvent+0x2c>
    f344:	   |   moveq #1,d0
    f346:	/--|-- bra.w f3e0 <builtIn_callEvent+0xc2>
	trimStack (&fun -> stack);
    f34a:	|  \-> moveq #24,d0
    f34c:	|      add.l 20(sp),d0
    f350:	|      move.l d0,-(sp)
    f352:	|      jsr 14082 <trimStack>
    f358:	|      addq.l #4,sp
	if (! getValueType(&obj1, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    f35a:	|      movea.l 20(sp),a0
    f35e:	|      move.l 24(a0),d0
    f362:	|      move.l d0,-(sp)
    f364:	|      pea 7 <_start+0x7>
    f368:	|      moveq #12,d0
    f36a:	|      add.l sp,d0
    f36c:	|      move.l d0,-(sp)
    f36e:	|      jsr 136fe <getValueType>
    f374:	|      lea 12(sp),sp
    f378:	|      tst.w d0
    f37a:	|  /-- bne.s f380 <builtIn_callEvent+0x62>
    f37c:	|  |   moveq #1,d0
    f37e:	+--|-- bra.s f3e0 <builtIn_callEvent+0xc2>
	trimStack (&fun -> stack);
    f380:	|  \-> moveq #24,d0
    f382:	|      add.l 20(sp),d0
    f386:	|      move.l d0,-(sp)
    f388:	|      jsr 14082 <trimStack>
    f38e:	|      addq.l #4,sp

	int fNum = getCombinationFunction (obj1, obj2);
    f390:	|      move.l (sp),d1
    f392:	|      move.l 4(sp),d0
    f396:	|      move.l d1,-(sp)
    f398:	|      move.l d0,-(sp)
    f39a:	|      jsr c52a <getCombinationFunction>
    f3a0:	|      addq.l #8,sp
    f3a2:	|      move.l d0,8(sp)

	// Return value
	if (fNum) {
    f3a6:	|  /-- beq.s f3c6 <builtIn_callEvent+0xa8>
		setVariable (&fun -> reg, SVT_FUNC, fNum);
    f3a8:	|  |   moveq #28,d0
    f3aa:	|  |   add.l 20(sp),d0
    f3ae:	|  |   move.l 8(sp),-(sp)
    f3b2:	|  |   pea 2 <_start+0x2>
    f3b6:	|  |   move.l d0,-(sp)
    f3b8:	|  |   jsr 13ff0 <setVariable>
    f3be:	|  |   lea 12(sp),sp
		return BR_CALLAFUNC;
    f3c2:	|  |   moveq #4,d0
    f3c4:	+--|-- bra.s f3e0 <builtIn_callEvent+0xc2>
	}
	setVariable (&fun -> reg, SVT_INT, 0);
    f3c6:	|  \-> moveq #28,d0
    f3c8:	|      add.l 20(sp),d0
    f3cc:	|      clr.l -(sp)
    f3ce:	|      pea 1 <_start+0x1>
    f3d2:	|      move.l d0,-(sp)
    f3d4:	|      jsr 13ff0 <setVariable>
    f3da:	|      lea 12(sp),sp
	return BR_CONTINUE;
    f3de:	|      moveq #2,d0
}
    f3e0:	\----> lea 12(sp),sp
    f3e4:	       rts

0000f3e6 <builtIn_quitGame>:
BOOL reallyWantToQuit = FALSE;

builtIn(quitGame)
{
	UNUSEDALL
	reallyWantToQuit = TRUE;
    f3e6:	move.w #1,1b2cc <reallyWantToQuit>
	//quit_event.type=SDL_QUIT; Todo: Amigize
	//SDL_PushEvent(&quit_event);
	return BR_CONTINUE;
    f3ee:	moveq #2,d0
}
    f3f0:	rts

0000f3f2 <builtIn__rem_movieStart>:

// The old movie functions are deprecated and does nothing.
builtIn(_rem_movieStart)
{
	UNUSEDALL
	trimStack (&fun -> stack);
    f3f2:	moveq #24,d0
    f3f4:	add.l 8(sp),d0
    f3f8:	move.l d0,-(sp)
    f3fa:	jsr 14082 <trimStack>
    f400:	addq.l #4,sp
	KPrintF("Movie Stuff not supported on Amiga");
    f402:	pea 181ff <PutChar+0x1cbf>
    f408:	jsr 15bf0 <KPrintF>
    f40e:	addq.l #4,sp
	return BR_CONTINUE;
    f410:	moveq #2,d0
}
    f412:	rts

0000f414 <builtIn__rem_movieAbort>:

builtIn(_rem_movieAbort)
{
	UNUSEDALL
	//setVariable (&fun -> reg, SVT_INT, 0);
	KPrintF("Movie Stuff not supported on Amiga");
    f414:	pea 181ff <PutChar+0x1cbf>
    f41a:	jsr 15bf0 <KPrintF>
    f420:	addq.l #4,sp
	return BR_CONTINUE;
    f422:	moveq #2,d0
}
    f424:	rts

0000f426 <builtIn__rem_moviePlaying>:

builtIn(_rem_moviePlaying)
{
	UNUSEDALL
	KPrintF("Movie Stuff not supported on Amiga");
    f426:	pea 181ff <PutChar+0x1cbf>
    f42c:	jsr 15bf0 <KPrintF>
    f432:	addq.l #4,sp
	//setVariable (&fun -> reg, SVT_INT, 0);
	return BR_CONTINUE;
    f434:	moveq #2,d0
}
    f436:	rts

0000f438 <builtIn_playMovie>:
	
	if (r && (! fun->next)) {
		restartFunction (fun);
		return BR_ALREADY_GONE;
	}*/
	KPrintF("Movie Stuff not supported on Amiga");
    f438:	pea 181ff <PutChar+0x1cbf>
    f43e:	jsr 15bf0 <KPrintF>
    f444:	addq.l #4,sp
	return BR_CONTINUE;
    f446:	moveq #2,d0
}
    f448:	rts

0000f44a <builtIn_stopMovie>:
	/*int r;
	
	r = stopMovie();
	
	setVariable (&fun -> reg, SVT_INT, 0);*/
	KPrintF("Movie Stuff not supported on Amiga");
    f44a:	pea 181ff <PutChar+0x1cbf>
    f450:	jsr 15bf0 <KPrintF>
    f456:	addq.l #4,sp
	return BR_CONTINUE;
    f458:	moveq #2,d0
}
    f45a:	rts

0000f45c <builtIn_pauseMovie>:
	/*int r;
	
	r = pauseMovie();
	
	setVariable (&fun -> reg, SVT_INT, 0);*/
	KPrintF("Movie Stuff not supported on Amiga");
    f45c:	pea 181ff <PutChar+0x1cbf>
    f462:	jsr 15bf0 <KPrintF>
    f468:	addq.l #4,sp
	return BR_CONTINUE;
    f46a:	moveq #2,d0
}
    f46c:	rts

0000f46e <builtIn_startMusic>:

#pragma mark -
#pragma mark Audio functions

builtIn(startMusic)
{
    f46e:	       lea -12(sp),sp
	UNUSEDALL
	int fromTrack, musChan, fileNumber;
	if (! getValueType(&fromTrack, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f472:	       movea.l 20(sp),a0
    f476:	       move.l 24(a0),d0
    f47a:	       move.l d0,-(sp)
    f47c:	       pea 1 <_start+0x1>
    f480:	       moveq #16,d0
    f482:	       add.l sp,d0
    f484:	       move.l d0,-(sp)
    f486:	       jsr 136fe <getValueType>
    f48c:	       lea 12(sp),sp
    f490:	       tst.w d0
    f492:	   /-- bne.s f49a <builtIn_startMusic+0x2c>
    f494:	   |   moveq #1,d0
    f496:	/--|-- bra.w f53a <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
    f49a:	|  \-> moveq #24,d0
    f49c:	|      add.l 20(sp),d0
    f4a0:	|      move.l d0,-(sp)
    f4a2:	|      jsr 14082 <trimStack>
    f4a8:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f4aa:	|      movea.l 20(sp),a0
    f4ae:	|      move.l 24(a0),d0
    f4b2:	|      move.l d0,-(sp)
    f4b4:	|      pea 1 <_start+0x1>
    f4b8:	|      moveq #12,d0
    f4ba:	|      add.l sp,d0
    f4bc:	|      move.l d0,-(sp)
    f4be:	|      jsr 136fe <getValueType>
    f4c4:	|      lea 12(sp),sp
    f4c8:	|      tst.w d0
    f4ca:	|  /-- bne.s f4d0 <builtIn_startMusic+0x62>
    f4cc:	|  |   moveq #1,d0
    f4ce:	+--|-- bra.s f53a <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
    f4d0:	|  \-> moveq #24,d0
    f4d2:	|      add.l 20(sp),d0
    f4d6:	|      move.l d0,-(sp)
    f4d8:	|      jsr 14082 <trimStack>
    f4de:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    f4e0:	|      movea.l 20(sp),a0
    f4e4:	|      move.l 24(a0),d0
    f4e8:	|      move.l d0,-(sp)
    f4ea:	|      pea 5 <_start+0x5>
    f4ee:	|      lea 8(sp),a0
    f4f2:	|      move.l a0,-(sp)
    f4f4:	|      jsr 136fe <getValueType>
    f4fa:	|      lea 12(sp),sp
    f4fe:	|      tst.w d0
    f500:	|  /-- bne.s f506 <builtIn_startMusic+0x98>
    f502:	|  |   moveq #1,d0
    f504:	+--|-- bra.s f53a <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
    f506:	|  \-> moveq #24,d0
    f508:	|      add.l 20(sp),d0
    f50c:	|      move.l d0,-(sp)
    f50e:	|      jsr 14082 <trimStack>
    f514:	|      addq.l #4,sp
	if (! playMOD (fileNumber, musChan, fromTrack)) return BR_CONTINUE; //BR_ERROR;
    f516:	|      movea.l 8(sp),a0
    f51a:	|      move.l 4(sp),d1
    f51e:	|      move.l (sp),d0
    f520:	|      move.l a0,-(sp)
    f522:	|      move.l d1,-(sp)
    f524:	|      move.l d0,-(sp)
    f526:	|      jsr c136 <playMOD>
    f52c:	|      lea 12(sp),sp
    f530:	|      tst.w d0
    f532:	|  /-- bne.s f538 <builtIn_startMusic+0xca>
    f534:	|  |   moveq #2,d0
    f536:	+--|-- bra.s f53a <builtIn_startMusic+0xcc>
	return BR_CONTINUE;
    f538:	|  \-> moveq #2,d0
}
    f53a:	\----> lea 12(sp),sp
    f53e:	       rts

0000f540 <builtIn_stopMusic>:

builtIn(stopMusic)
{
    f540:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f542:	       movea.l 12(sp),a0
    f546:	       move.l 24(a0),d0
    f54a:	       move.l d0,-(sp)
    f54c:	       pea 1 <_start+0x1>
    f550:	       move.l sp,d0
    f552:	       addq.l #8,d0
    f554:	       move.l d0,-(sp)
    f556:	       jsr 136fe <getValueType>
    f55c:	       lea 12(sp),sp
    f560:	       tst.w d0
    f562:	   /-- bne.s f568 <builtIn_stopMusic+0x28>
    f564:	   |   moveq #1,d0
    f566:	/--|-- bra.s f586 <builtIn_stopMusic+0x46>
	trimStack (&fun -> stack);
    f568:	|  \-> moveq #24,d0
    f56a:	|      add.l 12(sp),d0
    f56e:	|      move.l d0,-(sp)
    f570:	|      jsr 14082 <trimStack>
    f576:	|      addq.l #4,sp
	stopMOD (v);
    f578:	|      move.l (sp),d0
    f57a:	|      move.l d0,-(sp)
    f57c:	|      jsr c1d2 <stopMOD>
    f582:	|      addq.l #4,sp
	return BR_CONTINUE;
    f584:	|      moveq #2,d0
}
    f586:	\----> addq.l #4,sp
    f588:	       rts

0000f58a <builtIn_setMusicVolume>:

builtIn(setMusicVolume)
{
    f58a:	       subq.l #8,sp
	UNUSEDALL
	int musChan, v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f58c:	       movea.l 16(sp),a0
    f590:	       move.l 24(a0),d0
    f594:	       move.l d0,-(sp)
    f596:	       pea 1 <_start+0x1>
    f59a:	       move.l sp,d0
    f59c:	       addq.l #8,d0
    f59e:	       move.l d0,-(sp)
    f5a0:	       jsr 136fe <getValueType>
    f5a6:	       lea 12(sp),sp
    f5aa:	       tst.w d0
    f5ac:	   /-- bne.s f5b2 <builtIn_setMusicVolume+0x28>
    f5ae:	   |   moveq #1,d0
    f5b0:	/--|-- bra.s f60c <builtIn_setMusicVolume+0x82>
	trimStack (&fun -> stack);
    f5b2:	|  \-> moveq #24,d0
    f5b4:	|      add.l 16(sp),d0
    f5b8:	|      move.l d0,-(sp)
    f5ba:	|      jsr 14082 <trimStack>
    f5c0:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f5c2:	|      movea.l 16(sp),a0
    f5c6:	|      move.l 24(a0),d0
    f5ca:	|      move.l d0,-(sp)
    f5cc:	|      pea 1 <_start+0x1>
    f5d0:	|      moveq #12,d0
    f5d2:	|      add.l sp,d0
    f5d4:	|      move.l d0,-(sp)
    f5d6:	|      jsr 136fe <getValueType>
    f5dc:	|      lea 12(sp),sp
    f5e0:	|      tst.w d0
    f5e2:	|  /-- bne.s f5e8 <builtIn_setMusicVolume+0x5e>
    f5e4:	|  |   moveq #1,d0
    f5e6:	+--|-- bra.s f60c <builtIn_setMusicVolume+0x82>
	trimStack (&fun -> stack);
    f5e8:	|  \-> moveq #24,d0
    f5ea:	|      add.l 16(sp),d0
    f5ee:	|      move.l d0,-(sp)
    f5f0:	|      jsr 14082 <trimStack>
    f5f6:	|      addq.l #4,sp
	setMusicVolume (musChan, v);
    f5f8:	|      move.l (sp),d1
    f5fa:	|      move.l 4(sp),d0
    f5fe:	|      move.l d1,-(sp)
    f600:	|      move.l d0,-(sp)
    f602:	|      jsr c1b8 <setMusicVolume>
    f608:	|      addq.l #8,sp
	return BR_CONTINUE;
    f60a:	|      moveq #2,d0
}
    f60c:	\----> addq.l #8,sp
    f60e:	       rts

0000f610 <builtIn_setDefaultMusicVolume>:

builtIn(setDefaultMusicVolume)
{
    f610:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f612:	       movea.l 12(sp),a0
    f616:	       move.l 24(a0),d0
    f61a:	       move.l d0,-(sp)
    f61c:	       pea 1 <_start+0x1>
    f620:	       move.l sp,d0
    f622:	       addq.l #8,d0
    f624:	       move.l d0,-(sp)
    f626:	       jsr 136fe <getValueType>
    f62c:	       lea 12(sp),sp
    f630:	       tst.w d0
    f632:	   /-- bne.s f638 <builtIn_setDefaultMusicVolume+0x28>
    f634:	   |   moveq #1,d0
    f636:	/--|-- bra.s f656 <builtIn_setDefaultMusicVolume+0x46>
	trimStack (&fun -> stack);
    f638:	|  \-> moveq #24,d0
    f63a:	|      add.l 12(sp),d0
    f63e:	|      move.l d0,-(sp)
    f640:	|      jsr 14082 <trimStack>
    f646:	|      addq.l #4,sp
	setDefaultMusicVolume (v);
    f648:	|      move.l (sp),d0
    f64a:	|      move.l d0,-(sp)
    f64c:	|      jsr c19c <setDefaultMusicVolume>
    f652:	|      addq.l #4,sp
	return BR_CONTINUE;
    f654:	|      moveq #2,d0
}
    f656:	\----> addq.l #4,sp
    f658:	       rts

0000f65a <builtIn_playSound>:

builtIn(playSound)
{
    f65a:	       subq.l #4,sp


	UNUSEDALL
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    f65c:	       movea.l 12(sp),a0
    f660:	       move.l 24(a0),d0
    f664:	       move.l d0,-(sp)
    f666:	       pea 5 <_start+0x5>
    f66a:	       move.l sp,d0
    f66c:	       addq.l #8,d0
    f66e:	       move.l d0,-(sp)
    f670:	       jsr 136fe <getValueType>
    f676:	       lea 12(sp),sp
    f67a:	       tst.w d0
    f67c:	   /-- bne.s f682 <builtIn_playSound+0x28>
    f67e:	   |   moveq #1,d0
    f680:	/--|-- bra.s f6aa <builtIn_playSound+0x50>
	trimStack (&fun -> stack);
    f682:	|  \-> moveq #24,d0
    f684:	|      add.l 12(sp),d0
    f688:	|      move.l d0,-(sp)
    f68a:	|      jsr 14082 <trimStack>
    f690:	|      addq.l #4,sp
	if (! startSound (fileNumber, FALSE)) return BR_CONTINUE;	// Was BR_ERROR
    f692:	|      move.l (sp),d0
    f694:	|      clr.l -(sp)
    f696:	|      move.l d0,-(sp)
    f698:	|      jsr c1c0 <startSound>
    f69e:	|      addq.l #8,sp
    f6a0:	|      tst.w d0
    f6a2:	|  /-- bne.s f6a8 <builtIn_playSound+0x4e>
    f6a4:	|  |   moveq #2,d0
    f6a6:	+--|-- bra.s f6aa <builtIn_playSound+0x50>
	return BR_CONTINUE;
    f6a8:	|  \-> moveq #2,d0
}
    f6aa:	\----> addq.l #4,sp
    f6ac:	       rts

0000f6ae <builtIn_loopSound>:

builtIn(loopSound)
{
    f6ae:	             lea -28(sp),sp
    f6b2:	             move.l a6,-(sp)
	UNUSEDALL
	int fileNumber;

	if (numParams < 1) {
    f6b4:	             tst.l 36(sp)
    f6b8:	         /-- bgt.s f6ce <builtIn_loopSound+0x20>
		KPrintF("Built-in function loopSound() must have at least 1 parameter.");
    f6ba:	         |   pea 18222 <PutChar+0x1ce2>
    f6c0:	         |   jsr 15bf0 <KPrintF>
    f6c6:	         |   addq.l #4,sp
		return BR_ERROR;
    f6c8:	         |   moveq #1,d0
    f6ca:	/--------|-- bra.w f88a <builtIn_loopSound+0x1dc>
	} else if (numParams < 2) {
    f6ce:	|        \-> moveq #1,d0
    f6d0:	|            cmp.l 36(sp),d0
    f6d4:	|     /----- blt.s f730 <builtIn_loopSound+0x82>

		if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) return BR_ERROR;
    f6d6:	|     |      movea.l 40(sp),a0
    f6da:	|     |      move.l 24(a0),d0
    f6de:	|     |      move.l d0,-(sp)
    f6e0:	|     |      pea 5 <_start+0x5>
    f6e4:	|     |      lea 16(sp),a0
    f6e8:	|     |      move.l a0,-(sp)
    f6ea:	|     |      jsr 136fe <getValueType>
    f6f0:	|     |      lea 12(sp),sp
    f6f4:	|     |      tst.w d0
    f6f6:	|     |  /-- bne.s f6fe <builtIn_loopSound+0x50>
    f6f8:	|     |  |   moveq #1,d0
    f6fa:	+-----|--|-- bra.w f88a <builtIn_loopSound+0x1dc>
		trimStack(&fun->stack);
    f6fe:	|     |  \-> moveq #24,d0
    f700:	|     |      add.l 40(sp),d0
    f704:	|     |      move.l d0,-(sp)
    f706:	|     |      jsr 14082 <trimStack>
    f70c:	|     |      addq.l #4,sp
		if (!startSound(fileNumber, TRUE)) return BR_CONTINUE;	// Was BR_ERROR
    f70e:	|     |      move.l 8(sp),d0
    f712:	|     |      pea 1 <_start+0x1>
    f716:	|     |      move.l d0,-(sp)
    f718:	|     |      jsr c1c0 <startSound>
    f71e:	|     |      addq.l #8,sp
    f720:	|     |      tst.w d0
    f722:	|     |  /-- bne.s f72a <builtIn_loopSound+0x7c>
    f724:	|     |  |   moveq #2,d0
    f726:	+-----|--|-- bra.w f88a <builtIn_loopSound+0x1dc>
		return BR_CONTINUE;
    f72a:	|     |  \-> moveq #2,d0
    f72c:	+-----|----- bra.w f88a <builtIn_loopSound+0x1dc>
	} else {
		// We have more than one sound to play!

		int doLoop = 2;
    f730:	|     \----> moveq #2,d1
    f732:	|            move.l d1,4(sp)
		struct soundList *s = NULL;
    f736:	|            clr.l 28(sp)
		struct soundList *old = NULL;
    f73a:	|            clr.l 24(sp)

		// Should we loop?
		if (fun->stack->thisVar.varType != SVT_FILE) {
    f73e:	|            movea.l 40(sp),a0
    f742:	|            movea.l 24(a0),a0
    f746:	|            move.l (a0),d0
    f748:	|            moveq #5,d1
    f74a:	|            cmp.l d0,d1
    f74c:	|  /-------- beq.w f824 <builtIn_loopSound+0x176>
			getValueType(&doLoop, SVT_INT,&fun->stack->thisVar);
    f750:	|  |         movea.l 40(sp),a0
    f754:	|  |         move.l 24(a0),d0
    f758:	|  |         move.l d0,-(sp)
    f75a:	|  |         pea 1 <_start+0x1>
    f75e:	|  |         lea 12(sp),a0
    f762:	|  |         move.l a0,-(sp)
    f764:	|  |         jsr 136fe <getValueType>
    f76a:	|  |         lea 12(sp),sp
			trimStack(&fun->stack);
    f76e:	|  |         moveq #24,d0
    f770:	|  |         add.l 40(sp),d0
    f774:	|  |         move.l d0,-(sp)
    f776:	|  |         jsr 14082 <trimStack>
    f77c:	|  |         addq.l #4,sp
			numParams--;
    f77e:	|  |         subq.l #1,36(sp)
		}
		while (numParams) {
    f782:	|  +-------- bra.w f824 <builtIn_loopSound+0x176>
			if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) {
    f786:	|  |  /----> movea.l 40(sp),a0
    f78a:	|  |  |      move.l 24(a0),d0
    f78e:	|  |  |      move.l d0,-(sp)
    f790:	|  |  |      pea 5 <_start+0x5>
    f794:	|  |  |      lea 16(sp),a0
    f798:	|  |  |      move.l a0,-(sp)
    f79a:	|  |  |      jsr 136fe <getValueType>
    f7a0:	|  |  |      lea 12(sp),sp
    f7a4:	|  |  |      tst.w d0
    f7a6:	|  |  |  /-- bne.s f7bc <builtIn_loopSound+0x10e>
				KPrintF("Illegal parameter given built-in function loopSound().");
    f7a8:	|  |  |  |   pea 18260 <PutChar+0x1d20>
    f7ae:	|  |  |  |   jsr 15bf0 <KPrintF>
    f7b4:	|  |  |  |   addq.l #4,sp
				return BR_ERROR;
    f7b6:	|  |  |  |   moveq #1,d0
    f7b8:	+--|--|--|-- bra.w f88a <builtIn_loopSound+0x1dc>
			}
			s = AllocVec(sizeof(struct soundList), MEMF_ANY);
    f7bc:	|  |  |  \-> moveq #20,d0
    f7be:	|  |  |      move.l d0,20(sp)
    f7c2:	|  |  |      clr.l 16(sp)
    f7c6:	|  |  |      move.l 1b1a2 <SysBase>,d0
    f7cc:	|  |  |      movea.l d0,a6
    f7ce:	|  |  |      move.l 20(sp),d0
    f7d2:	|  |  |      move.l 16(sp),d1
    f7d6:	|  |  |      jsr -684(a6)
    f7da:	|  |  |      move.l d0,12(sp)
    f7de:	|  |  |      move.l 12(sp),d0
    f7e2:	|  |  |      move.l d0,28(sp)
			if (!s) return BR_ERROR;
    f7e6:	|  |  |  /-- bne.s f7ee <builtIn_loopSound+0x140>
    f7e8:	|  |  |  |   moveq #1,d0
    f7ea:	+--|--|--|-- bra.w f88a <builtIn_loopSound+0x1dc>

			s->next = old;
    f7ee:	|  |  |  \-> movea.l 28(sp),a0
    f7f2:	|  |  |      move.l 24(sp),4(a0)
			s->prev = NULL;
    f7f8:	|  |  |      movea.l 28(sp),a0
    f7fc:	|  |  |      clr.l 8(a0)
			s->sound = fileNumber;
    f800:	|  |  |      move.l 8(sp),d0
    f804:	|  |  |      movea.l 28(sp),a0
    f808:	|  |  |      move.l d0,(a0)
			old = s;
    f80a:	|  |  |      move.l 28(sp),24(sp)

			trimStack(&fun->stack);
    f810:	|  |  |      moveq #24,d0
    f812:	|  |  |      add.l 40(sp),d0
    f816:	|  |  |      move.l d0,-(sp)
    f818:	|  |  |      jsr 14082 <trimStack>
    f81e:	|  |  |      addq.l #4,sp
			numParams--;
    f820:	|  |  |      subq.l #1,36(sp)
		while (numParams) {
    f824:	|  \--|----> tst.l 36(sp)
    f828:	|     \----- bne.w f786 <builtIn_loopSound+0xd8>
		}
		while (s->next) s = s->next;
    f82c:	|        /-- bra.s f838 <builtIn_loopSound+0x18a>
    f82e:	|     /--|-> movea.l 28(sp),a0
    f832:	|     |  |   move.l 4(a0),28(sp)
    f838:	|     |  \-> movea.l 28(sp),a0
    f83c:	|     |      move.l 4(a0),d0
    f840:	|     \----- bne.s f82e <builtIn_loopSound+0x180>
		if (doLoop > 1) {
    f842:	|            move.l 4(sp),d0
    f846:	|            moveq #1,d1
    f848:	|            cmp.l d0,d1
    f84a:	|     /----- bge.s f862 <builtIn_loopSound+0x1b4>
			s->next = old;
    f84c:	|     |      movea.l 28(sp),a0
    f850:	|     |      move.l 24(sp),4(a0)
			old->prev = s;
    f856:	|     |      movea.l 24(sp),a0
    f85a:	|     |      move.l 28(sp),8(a0)
    f860:	|     |  /-- bra.s f872 <builtIn_loopSound+0x1c4>
		} else if (doLoop) {
    f862:	|     \--|-> move.l 4(sp),d0
    f866:	|        +-- beq.s f872 <builtIn_loopSound+0x1c4>
			s->next = s;
    f868:	|        |   movea.l 28(sp),a0
    f86c:	|        |   move.l 28(sp),4(a0)
		}
		old->vol = -1;
    f872:	|        \-> movea.l 24(sp),a0
    f876:	|            moveq #-1,d0
    f878:	|            move.l d0,16(a0)
		playSoundList(old);
    f87c:	|            move.l 24(sp),-(sp)
    f880:	|            jsr c13a <playSoundList>
    f886:	|            addq.l #4,sp
		return BR_CONTINUE;
    f888:	|            moveq #2,d0
	}
}
    f88a:	\----------> movea.l (sp)+,a6
    f88c:	             lea 28(sp),sp
    f890:	             rts

0000f892 <builtIn_stopSound>:

builtIn(stopSound)
{
    f892:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    f894:	       movea.l 12(sp),a0
    f898:	       move.l 24(a0),d0
    f89c:	       move.l d0,-(sp)
    f89e:	       pea 5 <_start+0x5>
    f8a2:	       move.l sp,d0
    f8a4:	       addq.l #8,d0
    f8a6:	       move.l d0,-(sp)
    f8a8:	       jsr 136fe <getValueType>
    f8ae:	       lea 12(sp),sp
    f8b2:	       tst.w d0
    f8b4:	   /-- bne.s f8ba <builtIn_stopSound+0x28>
    f8b6:	   |   moveq #1,d0
    f8b8:	/--|-- bra.s f8d8 <builtIn_stopSound+0x46>
	trimStack (&fun -> stack);
    f8ba:	|  \-> moveq #24,d0
    f8bc:	|      add.l 12(sp),d0
    f8c0:	|      move.l d0,-(sp)
    f8c2:	|      jsr 14082 <trimStack>
    f8c8:	|      addq.l #4,sp
	huntKillSound (v);
    f8ca:	|      move.l (sp),d0
    f8cc:	|      move.l d0,-(sp)
    f8ce:	|      jsr c132 <huntKillSound>
    f8d4:	|      addq.l #4,sp
	return BR_CONTINUE;
    f8d6:	|      moveq #2,d0
}
    f8d8:	\----> addq.l #4,sp
    f8da:	       rts

0000f8dc <builtIn_setDefaultSoundVolume>:

builtIn(setDefaultSoundVolume)
{
    f8dc:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f8de:	       movea.l 12(sp),a0
    f8e2:	       move.l 24(a0),d0
    f8e6:	       move.l d0,-(sp)
    f8e8:	       pea 1 <_start+0x1>
    f8ec:	       move.l sp,d0
    f8ee:	       addq.l #8,d0
    f8f0:	       move.l d0,-(sp)
    f8f2:	       jsr 136fe <getValueType>
    f8f8:	       lea 12(sp),sp
    f8fc:	       tst.w d0
    f8fe:	   /-- bne.s f904 <builtIn_setDefaultSoundVolume+0x28>
    f900:	   |   moveq #1,d0
    f902:	/--|-- bra.s f922 <builtIn_setDefaultSoundVolume+0x46>
	trimStack (&fun -> stack);
    f904:	|  \-> moveq #24,d0
    f906:	|      add.l 12(sp),d0
    f90a:	|      move.l d0,-(sp)
    f90c:	|      jsr 14082 <trimStack>
    f912:	|      addq.l #4,sp
	setDefaultSoundVolume (v);
    f914:	|      move.l (sp),d0
    f916:	|      move.l d0,-(sp)
    f918:	|      jsr c1a8 <setDefaultSoundVolume>
    f91e:	|      addq.l #4,sp
	return BR_CONTINUE;
    f920:	|      moveq #2,d0
}
    f922:	\----> addq.l #4,sp
    f924:	       rts

0000f926 <builtIn_setSoundVolume>:

builtIn(setSoundVolume)
{
    f926:	       subq.l #8,sp
	UNUSEDALL
	int musChan, v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f928:	       movea.l 16(sp),a0
    f92c:	       move.l 24(a0),d0
    f930:	       move.l d0,-(sp)
    f932:	       pea 1 <_start+0x1>
    f936:	       move.l sp,d0
    f938:	       addq.l #8,d0
    f93a:	       move.l d0,-(sp)
    f93c:	       jsr 136fe <getValueType>
    f942:	       lea 12(sp),sp
    f946:	       tst.w d0
    f948:	   /-- bne.s f94e <builtIn_setSoundVolume+0x28>
    f94a:	   |   moveq #1,d0
    f94c:	/--|-- bra.s f9a8 <builtIn_setSoundVolume+0x82>
	trimStack (&fun -> stack);
    f94e:	|  \-> moveq #24,d0
    f950:	|      add.l 16(sp),d0
    f954:	|      move.l d0,-(sp)
    f956:	|      jsr 14082 <trimStack>
    f95c:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    f95e:	|      movea.l 16(sp),a0
    f962:	|      move.l 24(a0),d0
    f966:	|      move.l d0,-(sp)
    f968:	|      pea 5 <_start+0x5>
    f96c:	|      moveq #12,d0
    f96e:	|      add.l sp,d0
    f970:	|      move.l d0,-(sp)
    f972:	|      jsr 136fe <getValueType>
    f978:	|      lea 12(sp),sp
    f97c:	|      tst.w d0
    f97e:	|  /-- bne.s f984 <builtIn_setSoundVolume+0x5e>
    f980:	|  |   moveq #1,d0
    f982:	+--|-- bra.s f9a8 <builtIn_setSoundVolume+0x82>
	trimStack (&fun -> stack);
    f984:	|  \-> moveq #24,d0
    f986:	|      add.l 16(sp),d0
    f98a:	|      move.l d0,-(sp)
    f98c:	|      jsr 14082 <trimStack>
    f992:	|      addq.l #4,sp
	setSoundVolume (musChan, v);
    f994:	|      move.l (sp),d1
    f996:	|      move.l 4(sp),d0
    f99a:	|      move.l d1,-(sp)
    f99c:	|      move.l d0,-(sp)
    f99e:	|      jsr c1bc <setSoundVolume>
    f9a4:	|      addq.l #8,sp
	return BR_CONTINUE;
    f9a6:	|      moveq #2,d0
}
    f9a8:	\----> addq.l #8,sp
    f9aa:	       rts

0000f9ac <builtIn_setSoundLoopPoints>:


builtIn(setSoundLoopPoints)
{
    f9ac:	       lea -12(sp),sp
	UNUSEDALL
	int musChan, theEnd, theStart;
	if (! getValueType(&theEnd, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f9b0:	       movea.l 20(sp),a0
    f9b4:	       move.l 24(a0),d0
    f9b8:	       move.l d0,-(sp)
    f9ba:	       pea 1 <_start+0x1>
    f9be:	       moveq #12,d0
    f9c0:	       add.l sp,d0
    f9c2:	       move.l d0,-(sp)
    f9c4:	       jsr 136fe <getValueType>
    f9ca:	       lea 12(sp),sp
    f9ce:	       tst.w d0
    f9d0:	   /-- bne.s f9d8 <builtIn_setSoundLoopPoints+0x2c>
    f9d2:	   |   moveq #1,d0
    f9d4:	/--|-- bra.w fa70 <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
    f9d8:	|  \-> moveq #24,d0
    f9da:	|      add.l 20(sp),d0
    f9de:	|      move.l d0,-(sp)
    f9e0:	|      jsr 14082 <trimStack>
    f9e6:	|      addq.l #4,sp
	if (! getValueType(&theStart, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f9e8:	|      movea.l 20(sp),a0
    f9ec:	|      move.l 24(a0),d0
    f9f0:	|      move.l d0,-(sp)
    f9f2:	|      pea 1 <_start+0x1>
    f9f6:	|      lea 8(sp),a0
    f9fa:	|      move.l a0,-(sp)
    f9fc:	|      jsr 136fe <getValueType>
    fa02:	|      lea 12(sp),sp
    fa06:	|      tst.w d0
    fa08:	|  /-- bne.s fa0e <builtIn_setSoundLoopPoints+0x62>
    fa0a:	|  |   moveq #1,d0
    fa0c:	+--|-- bra.s fa70 <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
    fa0e:	|  \-> moveq #24,d0
    fa10:	|      add.l 20(sp),d0
    fa14:	|      move.l d0,-(sp)
    fa16:	|      jsr 14082 <trimStack>
    fa1c:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    fa1e:	|      movea.l 20(sp),a0
    fa22:	|      move.l 24(a0),d0
    fa26:	|      move.l d0,-(sp)
    fa28:	|      pea 5 <_start+0x5>
    fa2c:	|      moveq #16,d0
    fa2e:	|      add.l sp,d0
    fa30:	|      move.l d0,-(sp)
    fa32:	|      jsr 136fe <getValueType>
    fa38:	|      lea 12(sp),sp
    fa3c:	|      tst.w d0
    fa3e:	|  /-- bne.s fa44 <builtIn_setSoundLoopPoints+0x98>
    fa40:	|  |   moveq #1,d0
    fa42:	+--|-- bra.s fa70 <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
    fa44:	|  \-> moveq #24,d0
    fa46:	|      add.l 20(sp),d0
    fa4a:	|      move.l d0,-(sp)
    fa4c:	|      jsr 14082 <trimStack>
    fa52:	|      addq.l #4,sp
	setSoundLoop (musChan, theStart, theEnd);
    fa54:	|      movea.l 4(sp),a0
    fa58:	|      move.l (sp),d1
    fa5a:	|      move.l 8(sp),d0
    fa5e:	|      move.l a0,-(sp)
    fa60:	|      move.l d1,-(sp)
    fa62:	|      move.l d0,-(sp)
    fa64:	|      jsr c1b4 <setSoundLoop>
    fa6a:	|      lea 12(sp),sp
	return BR_CONTINUE;
    fa6e:	|      moveq #2,d0
}
    fa70:	\----> lea 12(sp),sp
    fa74:	       rts

0000fa76 <builtIn_setFloor>:

#pragma mark -
#pragma mark Extra room bits

builtIn(setFloor)
{
    fa76:	          subq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType == SVT_FILE) {
    fa78:	          movea.l 12(sp),a0
    fa7c:	          movea.l 24(a0),a0
    fa80:	          move.l (a0),d0
    fa82:	          moveq #5,d1
    fa84:	          cmp.l d0,d1
    fa86:	/-------- bne.s faca <builtIn_setFloor+0x54>
		int v;
		getValueType(&v, SVT_FILE,&fun -> stack -> thisVar);
    fa88:	|         movea.l 12(sp),a0
    fa8c:	|         move.l 24(a0),d0
    fa90:	|         move.l d0,-(sp)
    fa92:	|         pea 5 <_start+0x5>
    fa96:	|         move.l sp,d0
    fa98:	|         addq.l #8,d0
    fa9a:	|         move.l d0,-(sp)
    fa9c:	|         jsr 136fe <getValueType>
    faa2:	|         lea 12(sp),sp
		trimStack (&fun -> stack);
    faa6:	|         moveq #24,d0
    faa8:	|         add.l 12(sp),d0
    faac:	|         move.l d0,-(sp)
    faae:	|         jsr 14082 <trimStack>
    fab4:	|         addq.l #4,sp
		if (! setFloor (v)) return BR_ERROR;
    fab6:	|         move.l (sp),d0
    fab8:	|         move.l d0,-(sp)
    faba:	|         jsr 1539a <setFloor>
    fac0:	|         addq.l #4,sp
    fac2:	|         tst.w d0
    fac4:	|  /----- bne.s fae0 <builtIn_setFloor+0x6a>
    fac6:	|  |      moveq #1,d0
    fac8:	|  |  /-- bra.s fae2 <builtIn_setFloor+0x6c>
	} else {
		trimStack (&fun -> stack);
    faca:	\--|--|-> moveq #24,d0
    facc:	   |  |   add.l 12(sp),d0
    fad0:	   |  |   move.l d0,-(sp)
    fad2:	   |  |   jsr 14082 <trimStack>
    fad8:	   |  |   addq.l #4,sp
		setFloorNull ();
    fada:	   |  |   jsr 15b14 <setFloorNull>
	}
	return BR_CONTINUE;
    fae0:	   \--|-> moveq #2,d0
}
    fae2:	      \-> addq.l #4,sp
    fae4:	          rts

0000fae6 <builtIn_showFloor>:

builtIn(showFloor)
{
	UNUSEDALL
	drawFloor ();
    fae6:	jsr 14c32 <drawFloor>
	return BR_CONTINUE;
    faec:	moveq #2,d0
}
    faee:	rts

0000faf0 <builtIn_setZBuffer>:

builtIn(setZBuffer)
{
    faf0:	          subq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType == SVT_FILE) {
    faf2:	          movea.l 12(sp),a0
    faf6:	          movea.l 24(a0),a0
    fafa:	          move.l (a0),d0
    fafc:	          moveq #5,d1
    fafe:	          cmp.l d0,d1
    fb00:	/-------- bne.s fb44 <builtIn_setZBuffer+0x54>
		int v;
		getValueType(&v, SVT_FILE,&fun -> stack -> thisVar);
    fb02:	|         movea.l 12(sp),a0
    fb06:	|         move.l 24(a0),d0
    fb0a:	|         move.l d0,-(sp)
    fb0c:	|         pea 5 <_start+0x5>
    fb10:	|         move.l sp,d0
    fb12:	|         addq.l #8,d0
    fb14:	|         move.l d0,-(sp)
    fb16:	|         jsr 136fe <getValueType>
    fb1c:	|         lea 12(sp),sp
		trimStack (&fun -> stack);
    fb20:	|         moveq #24,d0
    fb22:	|         add.l 12(sp),d0
    fb26:	|         move.l d0,-(sp)
    fb28:	|         jsr 14082 <trimStack>
    fb2e:	|         addq.l #4,sp
		if (! setZBuffer (v)) return BR_ERROR;
    fb30:	|         move.l (sp),d0
    fb32:	|         move.l d0,-(sp)
    fb34:	|         jsr 762a <setZBuffer>
    fb3a:	|         addq.l #4,sp
    fb3c:	|         tst.w d0
    fb3e:	|  /----- bne.s fb5a <builtIn_setZBuffer+0x6a>
    fb40:	|  |      moveq #1,d0
    fb42:	|  |  /-- bra.s fb5c <builtIn_setZBuffer+0x6c>
	} else {
		trimStack (&fun -> stack);
    fb44:	\--|--|-> moveq #24,d0
    fb46:	   |  |   add.l 12(sp),d0
    fb4a:	   |  |   move.l d0,-(sp)
    fb4c:	   |  |   jsr 14082 <trimStack>
    fb52:	   |  |   addq.l #4,sp
		killZBuffer ();
    fb54:	   |  |   jsr 75d4 <killZBuffer>
	}
	return BR_CONTINUE;
    fb5a:	   \--|-> moveq #2,d0
}
    fb5c:	      \-> addq.l #4,sp
    fb5e:	          rts

0000fb60 <builtIn_setLightMap>:

		default:
			fatal ("Function should have either 2 or 3 parameters");
			return BR_ERROR;
	}*/
	KPrintF("Not implemented on Amiga");
    fb60:	pea 18297 <PutChar+0x1d57>
    fb66:	jsr 15bf0 <KPrintF>
    fb6c:	addq.l #4,sp
	return BR_CONTINUE;
    fb6e:	moveq #2,d0
}
    fb70:	rts

0000fb72 <builtIn_setSpeechMode>:
#pragma mark Objects

builtIn(setSpeechMode)
{
	UNUSEDALL
	if (! getValueType(&speechMode, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    fb72:	          movea.l 8(sp),a0
    fb76:	          move.l 24(a0),d0
    fb7a:	          move.l d0,-(sp)
    fb7c:	          pea 1 <_start+0x1>
    fb80:	          pea 1b2c8 <speechMode>
    fb86:	          jsr 136fe <getValueType>
    fb8c:	          lea 12(sp),sp
    fb90:	          tst.w d0
    fb92:	      /-- bne.s fb98 <builtIn_setSpeechMode+0x26>
    fb94:	      |   moveq #1,d0
    fb96:	/-----|-- bra.s fbd0 <builtIn_setSpeechMode+0x5e>
	trimStack (&fun -> stack);
    fb98:	|     \-> moveq #24,d0
    fb9a:	|         add.l 8(sp),d0
    fb9e:	|         move.l d0,-(sp)
    fba0:	|         jsr 14082 <trimStack>
    fba6:	|         addq.l #4,sp
	if (speechMode < 0 || speechMode > 2) {
    fba8:	|         move.l 1b2c8 <speechMode>,d0
    fbae:	|     /-- bmi.s fbbc <builtIn_setSpeechMode+0x4a>
    fbb0:	|     |   move.l 1b2c8 <speechMode>,d0
    fbb6:	|     |   moveq #2,d1
    fbb8:	|     |   cmp.l d0,d1
    fbba:	|  /--|-- bge.s fbce <builtIn_setSpeechMode+0x5c>
		KPrintF ("Valid parameters are be SPEECHANDTEXT, SPEECHONLY or TEXTONLY");
    fbbc:	|  |  \-> pea 182b0 <PutChar+0x1d70>
    fbc2:	|  |      jsr 15bf0 <KPrintF>
    fbc8:	|  |      addq.l #4,sp
		return BR_ERROR;
    fbca:	|  |      moveq #1,d0
    fbcc:	+--|----- bra.s fbd0 <builtIn_setSpeechMode+0x5e>
	}
	return BR_CONTINUE;
    fbce:	|  \----> moveq #2,d0
}
    fbd0:	\-------> rts

0000fbd2 <builtIn_somethingSpeaking>:

builtIn(somethingSpeaking)
{
    fbd2:	       subq.l #4,sp
	UNUSEDALL
	int i = isThereAnySpeechGoingOn ();
    fbd4:	       jsr 6ddc <isThereAnySpeechGoingOn>
    fbda:	       move.l d0,(sp)
	if (i == -1) {
    fbdc:	       moveq #-1,d0
    fbde:	       cmp.l (sp),d0
    fbe0:	/----- bne.s fbfc <builtIn_somethingSpeaking+0x2a>
		setVariable (&fun -> reg, SVT_INT, 0);
    fbe2:	|      moveq #28,d0
    fbe4:	|      add.l 12(sp),d0
    fbe8:	|      clr.l -(sp)
    fbea:	|      pea 1 <_start+0x1>
    fbee:	|      move.l d0,-(sp)
    fbf0:	|      jsr 13ff0 <setVariable>
    fbf6:	|      lea 12(sp),sp
    fbfa:	|  /-- bra.s fc14 <builtIn_somethingSpeaking+0x42>
	} else {
		setVariable (&fun -> reg, SVT_OBJTYPE, i);
    fbfc:	\--|-> moveq #28,d0
    fbfe:	   |   add.l 12(sp),d0
    fc02:	   |   move.l (sp),-(sp)
    fc04:	   |   pea 7 <_start+0x7>
    fc08:	   |   move.l d0,-(sp)
    fc0a:	   |   jsr 13ff0 <setVariable>
    fc10:	   |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    fc14:	   \-> moveq #2,d0
}
    fc16:	       addq.l #4,sp
    fc18:	       rts

0000fc1a <builtIn_skipSpeech>:

builtIn(skipSpeech)
{
	UNUSEDALL
	killSpeechTimers ();
    fc1a:	jsr 50f6 <killSpeechTimers>
	return BR_CONTINUE;
    fc20:	moveq #2,d0
}
    fc22:	rts

0000fc24 <builtIn_getOverObject>:

builtIn(getOverObject)
{
	UNUSEDALL
	if (overRegion)
    fc24:	       move.l 1b306 <overRegion>,d0
    fc2a:	/----- beq.s fc54 <builtIn_getOverObject+0x30>
		// Return value
		setVariable (&fun -> reg, SVT_OBJTYPE, overRegion -> thisType -> objectNum);
    fc2c:	|      movea.l 1b306 <overRegion>,a0
    fc32:	|      movea.l 28(a0),a0
    fc36:	|      move.l 4(a0),d1
    fc3a:	|      moveq #28,d0
    fc3c:	|      add.l 8(sp),d0
    fc40:	|      move.l d1,-(sp)
    fc42:	|      pea 7 <_start+0x7>
    fc46:	|      move.l d0,-(sp)
    fc48:	|      jsr 13ff0 <setVariable>
    fc4e:	|      lea 12(sp),sp
    fc52:	|  /-- bra.s fc6c <builtIn_getOverObject+0x48>
	else
		// Return value
		setVariable (&fun -> reg, SVT_INT, 0);
    fc54:	\--|-> moveq #28,d0
    fc56:	   |   add.l 8(sp),d0
    fc5a:	   |   clr.l -(sp)
    fc5c:	   |   pea 1 <_start+0x1>
    fc60:	   |   move.l d0,-(sp)
    fc62:	   |   jsr 13ff0 <setVariable>
    fc68:	   |   lea 12(sp),sp
	return BR_CONTINUE;
    fc6c:	   \-> moveq #2,d0
}
    fc6e:	       rts

0000fc70 <builtIn_rename>:

builtIn(rename)
{
    fc70:	       lea -16(sp),sp
    fc74:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar(&(fun->stack->thisVar));
    fc76:	       movea.l 28(sp),a0
    fc7a:	       move.l 24(a0),d0
    fc7e:	       move.l d0,-(sp)
    fc80:	       jsr 13cd4 <getTextFromAnyVar>
    fc86:	       addq.l #4,sp
    fc88:	       move.l d0,16(sp)
	int objT;
	if (!newText) return BR_ERROR;
    fc8c:	   /-- bne.s fc92 <builtIn_rename+0x22>
    fc8e:	   |   moveq #1,d0
    fc90:	/--|-- bra.s fd0c <builtIn_rename+0x9c>
	trimStack(&fun->stack);
    fc92:	|  \-> moveq #24,d0
    fc94:	|      add.l 28(sp),d0
    fc98:	|      move.l d0,-(sp)
    fc9a:	|      jsr 14082 <trimStack>
    fca0:	|      addq.l #4,sp
	if (!getValueType(&objT, SVT_OBJTYPE, &fun->stack->thisVar)) return BR_ERROR;
    fca2:	|      movea.l 28(sp),a0
    fca6:	|      move.l 24(a0),d0
    fcaa:	|      move.l d0,-(sp)
    fcac:	|      pea 7 <_start+0x7>
    fcb0:	|      lea 12(sp),a0
    fcb4:	|      move.l a0,-(sp)
    fcb6:	|      jsr 136fe <getValueType>
    fcbc:	|      lea 12(sp),sp
    fcc0:	|      tst.w d0
    fcc2:	|  /-- bne.s fcc8 <builtIn_rename+0x58>
    fcc4:	|  |   moveq #1,d0
    fcc6:	+--|-- bra.s fd0c <builtIn_rename+0x9c>
	trimStack(&fun->stack);
    fcc8:	|  \-> moveq #24,d0
    fcca:	|      add.l 28(sp),d0
    fcce:	|      move.l d0,-(sp)
    fcd0:	|      jsr 14082 <trimStack>
    fcd6:	|      addq.l #4,sp
	struct objectType * o = findObjectType(objT);
    fcd8:	|      move.l 4(sp),d0
    fcdc:	|      move.l d0,-(sp)
    fcde:	|      jsr c4f6 <findObjectType>
    fce4:	|      addq.l #4,sp
    fce6:	|      move.l d0,12(sp)
	FreeVec(o->screenName);
    fcea:	|      movea.l 12(sp),a0
    fcee:	|      move.l (a0),8(sp)
    fcf2:	|      move.l 1b1a2 <SysBase>,d0
    fcf8:	|      movea.l d0,a6
    fcfa:	|      movea.l 8(sp),a1
    fcfe:	|      jsr -690(a6)
	o->screenName = newText;
    fd02:	|      movea.l 12(sp),a0
    fd06:	|      move.l 16(sp),(a0)
	return BR_CONTINUE;
    fd0a:	|      moveq #2,d0
}
    fd0c:	\----> movea.l (sp)+,a6
    fd0e:	       lea 16(sp),sp
    fd12:	       rts

0000fd14 <builtIn_getObjectX>:

builtIn (getObjectX)
{
    fd14:	          lea -12(sp),sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    fd18:	          movea.l 20(sp),a0
    fd1c:	          move.l 24(a0),d0
    fd20:	          move.l d0,-(sp)
    fd22:	          pea 7 <_start+0x7>
    fd26:	          lea 8(sp),a0
    fd2a:	          move.l a0,-(sp)
    fd2c:	          jsr 136fe <getValueType>
    fd32:	          lea 12(sp),sp
    fd36:	          tst.w d0
    fd38:	      /-- bne.s fd40 <builtIn_getObjectX+0x2c>
    fd3a:	      |   moveq #1,d0
    fd3c:	/-----|-- bra.w fddc <builtIn_getObjectX+0xc8>
	trimStack (&fun -> stack);
    fd40:	|     \-> moveq #24,d0
    fd42:	|         add.l 20(sp),d0
    fd46:	|         move.l d0,-(sp)
    fd48:	|         jsr 14082 <trimStack>
    fd4e:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
    fd50:	|         move.l (sp),d0
    fd52:	|         move.l d0,-(sp)
    fd54:	|         jsr 961c <findPerson>
    fd5a:	|         addq.l #4,sp
    fd5c:	|         move.l d0,8(sp)
	if (pers) {
    fd60:	|     /-- beq.s fd8e <builtIn_getObjectX+0x7a>
		setVariable (&fun -> reg, SVT_INT, pers -> x);
    fd62:	|     |   movea.l 8(sp),a0
    fd66:	|     |   move.l (a0),d0
    fd68:	|     |   move.l d0,-(sp)
    fd6a:	|     |   jsr 15e40 <__fixsfsi>
    fd70:	|     |   addq.l #4,sp
    fd72:	|     |   move.l d0,d1
    fd74:	|     |   moveq #28,d0
    fd76:	|     |   add.l 20(sp),d0
    fd7a:	|     |   move.l d1,-(sp)
    fd7c:	|     |   pea 1 <_start+0x1>
    fd80:	|     |   move.l d0,-(sp)
    fd82:	|     |   jsr 13ff0 <setVariable>
    fd88:	|     |   lea 12(sp),sp
    fd8c:	|  /--|-- bra.s fdda <builtIn_getObjectX+0xc6>
	} else {
		struct screenRegion * la = getRegionForObject (objectNumber);
    fd8e:	|  |  \-> move.l (sp),d0
    fd90:	|  |      move.l d0,-(sp)
    fd92:	|  |      jsr 14412 <getRegionForObject>
    fd98:	|  |      addq.l #4,sp
    fd9a:	|  |      move.l d0,4(sp)
		if (la) {
    fd9e:	|  |  /-- beq.s fdc2 <builtIn_getObjectX+0xae>
			setVariable (&fun -> reg, SVT_INT, la -> sX);
    fda0:	|  |  |   movea.l 4(sp),a0
    fda4:	|  |  |   move.l 16(a0),d1
    fda8:	|  |  |   moveq #28,d0
    fdaa:	|  |  |   add.l 20(sp),d0
    fdae:	|  |  |   move.l d1,-(sp)
    fdb0:	|  |  |   pea 1 <_start+0x1>
    fdb4:	|  |  |   move.l d0,-(sp)
    fdb6:	|  |  |   jsr 13ff0 <setVariable>
    fdbc:	|  |  |   lea 12(sp),sp
    fdc0:	|  +--|-- bra.s fdda <builtIn_getObjectX+0xc6>
		} else {
			setVariable (&fun -> reg, SVT_INT, 0);
    fdc2:	|  |  \-> moveq #28,d0
    fdc4:	|  |      add.l 20(sp),d0
    fdc8:	|  |      clr.l -(sp)
    fdca:	|  |      pea 1 <_start+0x1>
    fdce:	|  |      move.l d0,-(sp)
    fdd0:	|  |      jsr 13ff0 <setVariable>
    fdd6:	|  |      lea 12(sp),sp
		}
	}
	return BR_CONTINUE;
    fdda:	|  \----> moveq #2,d0
}
    fddc:	\-------> lea 12(sp),sp
    fde0:	          rts

0000fde2 <builtIn_getObjectY>:

builtIn (getObjectY)
{
    fde2:	          lea -12(sp),sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    fde6:	          movea.l 20(sp),a0
    fdea:	          move.l 24(a0),d0
    fdee:	          move.l d0,-(sp)
    fdf0:	          pea 7 <_start+0x7>
    fdf4:	          lea 8(sp),a0
    fdf8:	          move.l a0,-(sp)
    fdfa:	          jsr 136fe <getValueType>
    fe00:	          lea 12(sp),sp
    fe04:	          tst.w d0
    fe06:	      /-- bne.s fe0e <builtIn_getObjectY+0x2c>
    fe08:	      |   moveq #1,d0
    fe0a:	/-----|-- bra.w feac <builtIn_getObjectY+0xca>
	trimStack (&fun -> stack);
    fe0e:	|     \-> moveq #24,d0
    fe10:	|         add.l 20(sp),d0
    fe14:	|         move.l d0,-(sp)
    fe16:	|         jsr 14082 <trimStack>
    fe1c:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
    fe1e:	|         move.l (sp),d0
    fe20:	|         move.l d0,-(sp)
    fe22:	|         jsr 961c <findPerson>
    fe28:	|         addq.l #4,sp
    fe2a:	|         move.l d0,8(sp)
	if (pers) {
    fe2e:	|     /-- beq.s fe5e <builtIn_getObjectY+0x7c>
		setVariable (&fun -> reg, SVT_INT, pers -> y);
    fe30:	|     |   movea.l 8(sp),a0
    fe34:	|     |   move.l 4(a0),d0
    fe38:	|     |   move.l d0,-(sp)
    fe3a:	|     |   jsr 15e40 <__fixsfsi>
    fe40:	|     |   addq.l #4,sp
    fe42:	|     |   move.l d0,d1
    fe44:	|     |   moveq #28,d0
    fe46:	|     |   add.l 20(sp),d0
    fe4a:	|     |   move.l d1,-(sp)
    fe4c:	|     |   pea 1 <_start+0x1>
    fe50:	|     |   move.l d0,-(sp)
    fe52:	|     |   jsr 13ff0 <setVariable>
    fe58:	|     |   lea 12(sp),sp
    fe5c:	|  /--|-- bra.s feaa <builtIn_getObjectY+0xc8>
	} else {
		struct screenRegion * la = getRegionForObject (objectNumber);
    fe5e:	|  |  \-> move.l (sp),d0
    fe60:	|  |      move.l d0,-(sp)
    fe62:	|  |      jsr 14412 <getRegionForObject>
    fe68:	|  |      addq.l #4,sp
    fe6a:	|  |      move.l d0,4(sp)
		if (la) {
    fe6e:	|  |  /-- beq.s fe92 <builtIn_getObjectY+0xb0>
			setVariable (&fun -> reg, SVT_INT, la -> sY);
    fe70:	|  |  |   movea.l 4(sp),a0
    fe74:	|  |  |   move.l 20(a0),d1
    fe78:	|  |  |   moveq #28,d0
    fe7a:	|  |  |   add.l 20(sp),d0
    fe7e:	|  |  |   move.l d1,-(sp)
    fe80:	|  |  |   pea 1 <_start+0x1>
    fe84:	|  |  |   move.l d0,-(sp)
    fe86:	|  |  |   jsr 13ff0 <setVariable>
    fe8c:	|  |  |   lea 12(sp),sp
    fe90:	|  +--|-- bra.s feaa <builtIn_getObjectY+0xc8>
		} else {
			setVariable (&fun -> reg, SVT_INT, 0);
    fe92:	|  |  \-> moveq #28,d0
    fe94:	|  |      add.l 20(sp),d0
    fe98:	|  |      clr.l -(sp)
    fe9a:	|  |      pea 1 <_start+0x1>
    fe9e:	|  |      move.l d0,-(sp)
    fea0:	|  |      jsr 13ff0 <setVariable>
    fea6:	|  |      lea 12(sp),sp
		}
	}
	return BR_CONTINUE;
    feaa:	|  \----> moveq #2,d0
}
    feac:	\-------> lea 12(sp),sp
    feb0:	          rts

0000feb2 <builtIn_addScreenRegion>:


builtIn(addScreenRegion)
{
    feb2:	       lea -32(sp),sp
    feb6:	       movem.l d2-d5,-(sp)
	UNUSEDALL
	int sX, sY, x1, y1, x2, y2, di, objectNumber;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    feba:	       movea.l 56(sp),a0
    febe:	       move.l 24(a0),d0
    fec2:	       move.l d0,-(sp)
    fec4:	       pea 1 <_start+0x1>
    fec8:	       lea 28(sp),a0
    fecc:	       move.l a0,-(sp)
    fece:	       jsr 136fe <getValueType>
    fed4:	       lea 12(sp),sp
    fed8:	       tst.w d0
    feda:	   /-- bne.s fee2 <builtIn_addScreenRegion+0x30>
    fedc:	   |   moveq #1,d0
    fede:	/--|-- bra.w 100bc <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    fee2:	|  \-> moveq #24,d0
    fee4:	|      add.l 56(sp),d0
    fee8:	|      move.l d0,-(sp)
    feea:	|      jsr 14082 <trimStack>
    fef0:	|      addq.l #4,sp
	if (! getValueType(&sY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    fef2:	|      movea.l 56(sp),a0
    fef6:	|      move.l 24(a0),d0
    fefa:	|      move.l d0,-(sp)
    fefc:	|      pea 1 <_start+0x1>
    ff00:	|      moveq #48,d0
    ff02:	|      add.l sp,d0
    ff04:	|      move.l d0,-(sp)
    ff06:	|      jsr 136fe <getValueType>
    ff0c:	|      lea 12(sp),sp
    ff10:	|      tst.w d0
    ff12:	|  /-- bne.s ff1a <builtIn_addScreenRegion+0x68>
    ff14:	|  |   moveq #1,d0
    ff16:	+--|-- bra.w 100bc <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    ff1a:	|  \-> moveq #24,d0
    ff1c:	|      add.l 56(sp),d0
    ff20:	|      move.l d0,-(sp)
    ff22:	|      jsr 14082 <trimStack>
    ff28:	|      addq.l #4,sp
	if (! getValueType(&sX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ff2a:	|      movea.l 56(sp),a0
    ff2e:	|      move.l 24(a0),d0
    ff32:	|      move.l d0,-(sp)
    ff34:	|      pea 1 <_start+0x1>
    ff38:	|      moveq #52,d0
    ff3a:	|      add.l sp,d0
    ff3c:	|      move.l d0,-(sp)
    ff3e:	|      jsr 136fe <getValueType>
    ff44:	|      lea 12(sp),sp
    ff48:	|      tst.w d0
    ff4a:	|  /-- bne.s ff52 <builtIn_addScreenRegion+0xa0>
    ff4c:	|  |   moveq #1,d0
    ff4e:	+--|-- bra.w 100bc <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    ff52:	|  \-> moveq #24,d0
    ff54:	|      add.l 56(sp),d0
    ff58:	|      move.l d0,-(sp)
    ff5a:	|      jsr 14082 <trimStack>
    ff60:	|      addq.l #4,sp
	if (! getValueType(&y2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ff62:	|      movea.l 56(sp),a0
    ff66:	|      move.l 24(a0),d0
    ff6a:	|      move.l d0,-(sp)
    ff6c:	|      pea 1 <_start+0x1>
    ff70:	|      lea 32(sp),a0
    ff74:	|      move.l a0,-(sp)
    ff76:	|      jsr 136fe <getValueType>
    ff7c:	|      lea 12(sp),sp
    ff80:	|      tst.w d0
    ff82:	|  /-- bne.s ff8a <builtIn_addScreenRegion+0xd8>
    ff84:	|  |   moveq #1,d0
    ff86:	+--|-- bra.w 100bc <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    ff8a:	|  \-> moveq #24,d0
    ff8c:	|      add.l 56(sp),d0
    ff90:	|      move.l d0,-(sp)
    ff92:	|      jsr 14082 <trimStack>
    ff98:	|      addq.l #4,sp
	if (! getValueType(&x2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ff9a:	|      movea.l 56(sp),a0
    ff9e:	|      move.l 24(a0),d0
    ffa2:	|      move.l d0,-(sp)
    ffa4:	|      pea 1 <_start+0x1>
    ffa8:	|      lea 36(sp),a0
    ffac:	|      move.l a0,-(sp)
    ffae:	|      jsr 136fe <getValueType>
    ffb4:	|      lea 12(sp),sp
    ffb8:	|      tst.w d0
    ffba:	|  /-- bne.s ffc2 <builtIn_addScreenRegion+0x110>
    ffbc:	|  |   moveq #1,d0
    ffbe:	+--|-- bra.w 100bc <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    ffc2:	|  \-> moveq #24,d0
    ffc4:	|      add.l 56(sp),d0
    ffc8:	|      move.l d0,-(sp)
    ffca:	|      jsr 14082 <trimStack>
    ffd0:	|      addq.l #4,sp
	if (! getValueType(&y1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ffd2:	|      movea.l 56(sp),a0
    ffd6:	|      move.l 24(a0),d0
    ffda:	|      move.l d0,-(sp)
    ffdc:	|      pea 1 <_start+0x1>
    ffe0:	|      lea 40(sp),a0
    ffe4:	|      move.l a0,-(sp)
    ffe6:	|      jsr 136fe <getValueType>
    ffec:	|      lea 12(sp),sp
    fff0:	|      tst.w d0
    fff2:	|  /-- bne.s fffa <builtIn_addScreenRegion+0x148>
    fff4:	|  |   moveq #1,d0
    fff6:	+--|-- bra.w 100bc <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    fffa:	|  \-> moveq #24,d0
    fffc:	|      add.l 56(sp),d0
   10000:	|      move.l d0,-(sp)
   10002:	|      jsr 14082 <trimStack>
   10008:	|      addq.l #4,sp
	if (! getValueType(&x1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1000a:	|      movea.l 56(sp),a0
   1000e:	|      move.l 24(a0),d0
   10012:	|      move.l d0,-(sp)
   10014:	|      pea 1 <_start+0x1>
   10018:	|      lea 44(sp),a0
   1001c:	|      move.l a0,-(sp)
   1001e:	|      jsr 136fe <getValueType>
   10024:	|      lea 12(sp),sp
   10028:	|      tst.w d0
   1002a:	|  /-- bne.s 10032 <builtIn_addScreenRegion+0x180>
   1002c:	|  |   moveq #1,d0
   1002e:	+--|-- bra.w 100bc <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   10032:	|  \-> moveq #24,d0
   10034:	|      add.l 56(sp),d0
   10038:	|      move.l d0,-(sp)
   1003a:	|      jsr 14082 <trimStack>
   10040:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10042:	|      movea.l 56(sp),a0
   10046:	|      move.l 24(a0),d0
   1004a:	|      move.l d0,-(sp)
   1004c:	|      pea 7 <_start+0x7>
   10050:	|      lea 24(sp),a0
   10054:	|      move.l a0,-(sp)
   10056:	|      jsr 136fe <getValueType>
   1005c:	|      lea 12(sp),sp
   10060:	|      tst.w d0
   10062:	|  /-- bne.s 10068 <builtIn_addScreenRegion+0x1b6>
   10064:	|  |   moveq #1,d0
   10066:	+--|-- bra.s 100bc <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   10068:	|  \-> moveq #24,d0
   1006a:	|      add.l 56(sp),d0
   1006e:	|      move.l d0,-(sp)
   10070:	|      jsr 14082 <trimStack>
   10076:	|      addq.l #4,sp
	if (addScreenRegion (x1, y1, x2, y2, sX, sY, di, objectNumber)) return BR_CONTINUE;
   10078:	|      move.l 16(sp),d5
   1007c:	|      move.l 20(sp),d4
   10080:	|      move.l 40(sp),d3
   10084:	|      move.l 44(sp),d2
   10088:	|      movea.l 24(sp),a1
   1008c:	|      movea.l 28(sp),a0
   10090:	|      move.l 32(sp),d1
   10094:	|      move.l 36(sp),d0
   10098:	|      move.l d5,-(sp)
   1009a:	|      move.l d4,-(sp)
   1009c:	|      move.l d3,-(sp)
   1009e:	|      move.l d2,-(sp)
   100a0:	|      move.l a1,-(sp)
   100a2:	|      move.l a0,-(sp)
   100a4:	|      move.l d1,-(sp)
   100a6:	|      move.l d0,-(sp)
   100a8:	|      jsr 142cc <addScreenRegion>
   100ae:	|      lea 32(sp),sp
   100b2:	|      tst.w d0
   100b4:	|  /-- beq.s 100ba <builtIn_addScreenRegion+0x208>
   100b6:	|  |   moveq #2,d0
   100b8:	+--|-- bra.s 100bc <builtIn_addScreenRegion+0x20a>
	return BR_ERROR;
   100ba:	|  \-> moveq #1,d0

}
   100bc:	\----> movem.l (sp)+,d2-d5
   100c0:	       lea 32(sp),sp
   100c4:	       rts

000100c6 <builtIn_removeScreenRegion>:

builtIn(removeScreenRegion)
{
   100c6:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   100c8:	       movea.l 12(sp),a0
   100cc:	       move.l 24(a0),d0
   100d0:	       move.l d0,-(sp)
   100d2:	       pea 7 <_start+0x7>
   100d6:	       move.l sp,d0
   100d8:	       addq.l #8,d0
   100da:	       move.l d0,-(sp)
   100dc:	       jsr 136fe <getValueType>
   100e2:	       lea 12(sp),sp
   100e6:	       tst.w d0
   100e8:	   /-- bne.s 100ee <builtIn_removeScreenRegion+0x28>
   100ea:	   |   moveq #1,d0
   100ec:	/--|-- bra.s 1010c <builtIn_removeScreenRegion+0x46>
	trimStack (&fun -> stack);
   100ee:	|  \-> moveq #24,d0
   100f0:	|      add.l 12(sp),d0
   100f4:	|      move.l d0,-(sp)
   100f6:	|      jsr 14082 <trimStack>
   100fc:	|      addq.l #4,sp
	removeScreenRegion (objectNumber);
   100fe:	|      move.l (sp),d0
   10100:	|      move.l d0,-(sp)
   10102:	|      jsr 145ba <removeScreenRegion>
   10108:	|      addq.l #4,sp
	return BR_CONTINUE;
   1010a:	|      moveq #2,d0
}
   1010c:	\----> addq.l #4,sp
   1010e:	       rts

00010110 <builtIn_showBoxes>:

builtIn(showBoxes)
{
	UNUSEDALL
	showBoxes ();
   10110:	jsr 1473e <showBoxes>
	return BR_CONTINUE;
   10116:	moveq #2,d0
}
   10118:	rts

0001011a <builtIn_removeAllScreenRegions>:

builtIn(removeAllScreenRegions)
{
	UNUSEDALL
	killAllRegions ();
   1011a:	jsr 14440 <killAllRegions>
	return BR_CONTINUE;
   10120:	moveq #2,d0
}
   10122:	rts

00010124 <builtIn_addCharacter>:

builtIn(addCharacter)
{
   10124:	       lea -16(sp),sp
	UNUSEDALL
	struct persona * p;
	int x, y, objectNumber;

	p = getCostumeFromVar (&(fun -> stack -> thisVar));
   10128:	       movea.l 24(sp),a0
   1012c:	       move.l 24(a0),d0
   10130:	       move.l d0,-(sp)
   10132:	       jsr 133aa <getCostumeFromVar>
   10138:	       addq.l #4,sp
   1013a:	       move.l d0,12(sp)
	if (p == NULL) return BR_ERROR;
   1013e:	   /-- bne.s 10146 <builtIn_addCharacter+0x22>
   10140:	   |   moveq #1,d0
   10142:	/--|-- bra.w 10222 <builtIn_addCharacter+0xfe>

	trimStack (&fun -> stack);
   10146:	|  \-> moveq #24,d0
   10148:	|      add.l 24(sp),d0
   1014c:	|      move.l d0,-(sp)
   1014e:	|      jsr 14082 <trimStack>
   10154:	|      addq.l #4,sp
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10156:	|      movea.l 24(sp),a0
   1015a:	|      move.l 24(a0),d0
   1015e:	|      move.l d0,-(sp)
   10160:	|      pea 1 <_start+0x1>
   10164:	|      lea 12(sp),a0
   10168:	|      move.l a0,-(sp)
   1016a:	|      jsr 136fe <getValueType>
   10170:	|      lea 12(sp),sp
   10174:	|      tst.w d0
   10176:	|  /-- bne.s 1017e <builtIn_addCharacter+0x5a>
   10178:	|  |   moveq #1,d0
   1017a:	+--|-- bra.w 10222 <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
   1017e:	|  \-> moveq #24,d0
   10180:	|      add.l 24(sp),d0
   10184:	|      move.l d0,-(sp)
   10186:	|      jsr 14082 <trimStack>
   1018c:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1018e:	|      movea.l 24(sp),a0
   10192:	|      move.l 24(a0),d0
   10196:	|      move.l d0,-(sp)
   10198:	|      pea 1 <_start+0x1>
   1019c:	|      moveq #16,d0
   1019e:	|      add.l sp,d0
   101a0:	|      move.l d0,-(sp)
   101a2:	|      jsr 136fe <getValueType>
   101a8:	|      lea 12(sp),sp
   101ac:	|      tst.w d0
   101ae:	|  /-- bne.s 101b4 <builtIn_addCharacter+0x90>
   101b0:	|  |   moveq #1,d0
   101b2:	+--|-- bra.s 10222 <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
   101b4:	|  \-> moveq #24,d0
   101b6:	|      add.l 24(sp),d0
   101ba:	|      move.l d0,-(sp)
   101bc:	|      jsr 14082 <trimStack>
   101c2:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   101c4:	|      movea.l 24(sp),a0
   101c8:	|      move.l 24(a0),d0
   101cc:	|      move.l d0,-(sp)
   101ce:	|      pea 7 <_start+0x7>
   101d2:	|      lea 8(sp),a0
   101d6:	|      move.l a0,-(sp)
   101d8:	|      jsr 136fe <getValueType>
   101de:	|      lea 12(sp),sp
   101e2:	|      tst.w d0
   101e4:	|  /-- bne.s 101ea <builtIn_addCharacter+0xc6>
   101e6:	|  |   moveq #1,d0
   101e8:	+--|-- bra.s 10222 <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
   101ea:	|  \-> moveq #24,d0
   101ec:	|      add.l 24(sp),d0
   101f0:	|      move.l d0,-(sp)
   101f2:	|      jsr 14082 <trimStack>
   101f8:	|      addq.l #4,sp
	if (addPerson (x, y, objectNumber, p)) return BR_CONTINUE;
   101fa:	|      movea.l (sp),a0
   101fc:	|      move.l 4(sp),d1
   10200:	|      move.l 8(sp),d0
   10204:	|      move.l 12(sp),-(sp)
   10208:	|      move.l a0,-(sp)
   1020a:	|      move.l d1,-(sp)
   1020c:	|      move.l d0,-(sp)
   1020e:	|      jsr 8216 <addPerson>
   10214:	|      lea 16(sp),sp
   10218:	|      tst.w d0
   1021a:	|  /-- beq.s 10220 <builtIn_addCharacter+0xfc>
   1021c:	|  |   moveq #2,d0
   1021e:	+--|-- bra.s 10222 <builtIn_addCharacter+0xfe>
	return BR_ERROR;
   10220:	|  \-> moveq #1,d0
}
   10222:	\----> lea 16(sp),sp
   10226:	       rts

00010228 <builtIn_hideCharacter>:

builtIn(hideCharacter)
{
   10228:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1022a:	       movea.l 12(sp),a0
   1022e:	       move.l 24(a0),d0
   10232:	       move.l d0,-(sp)
   10234:	       pea 7 <_start+0x7>
   10238:	       move.l sp,d0
   1023a:	       addq.l #8,d0
   1023c:	       move.l d0,-(sp)
   1023e:	       jsr 136fe <getValueType>
   10244:	       lea 12(sp),sp
   10248:	       tst.w d0
   1024a:	   /-- bne.s 10250 <builtIn_hideCharacter+0x28>
   1024c:	   |   moveq #1,d0
   1024e:	/--|-- bra.s 10270 <builtIn_hideCharacter+0x48>
	trimStack (&fun -> stack);
   10250:	|  \-> moveq #24,d0
   10252:	|      add.l 12(sp),d0
   10256:	|      move.l d0,-(sp)
   10258:	|      jsr 14082 <trimStack>
   1025e:	|      addq.l #4,sp
	setShown (FALSE, objectNumber);
   10260:	|      move.l (sp),d0
   10262:	|      move.l d0,-(sp)
   10264:	|      clr.l -(sp)
   10266:	|      jsr ac50 <setShown>
   1026c:	|      addq.l #8,sp
	return BR_CONTINUE;
   1026e:	|      moveq #2,d0
}
   10270:	\----> addq.l #4,sp
   10272:	       rts

00010274 <builtIn_showCharacter>:

builtIn(showCharacter)
{
   10274:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10276:	       movea.l 12(sp),a0
   1027a:	       move.l 24(a0),d0
   1027e:	       move.l d0,-(sp)
   10280:	       pea 7 <_start+0x7>
   10284:	       move.l sp,d0
   10286:	       addq.l #8,d0
   10288:	       move.l d0,-(sp)
   1028a:	       jsr 136fe <getValueType>
   10290:	       lea 12(sp),sp
   10294:	       tst.w d0
   10296:	   /-- bne.s 1029c <builtIn_showCharacter+0x28>
   10298:	   |   moveq #1,d0
   1029a:	/--|-- bra.s 102be <builtIn_showCharacter+0x4a>
	trimStack (&fun -> stack);
   1029c:	|  \-> moveq #24,d0
   1029e:	|      add.l 12(sp),d0
   102a2:	|      move.l d0,-(sp)
   102a4:	|      jsr 14082 <trimStack>
   102aa:	|      addq.l #4,sp
	setShown (TRUE, objectNumber);
   102ac:	|      move.l (sp),d0
   102ae:	|      move.l d0,-(sp)
   102b0:	|      pea 1 <_start+0x1>
   102b4:	|      jsr ac50 <setShown>
   102ba:	|      addq.l #8,sp
	return BR_CONTINUE;
   102bc:	|      moveq #2,d0
}
   102be:	\----> addq.l #4,sp
   102c0:	       rts

000102c2 <builtIn_removeAllCharacters>:

builtIn(removeAllCharacters)
{
	UNUSEDALL
	killSpeechTimers ();
   102c2:	jsr 50f6 <killSpeechTimers>
	killMostPeople ();
   102c8:	jsr 9a88 <killMostPeople>
	return BR_CONTINUE;
   102ce:	moveq #2,d0
}
   102d0:	rts

000102d2 <builtIn_setCharacterDrawMode>:

builtIn(setCharacterDrawMode)
{
   102d2:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   102d4:	       movea.l 16(sp),a0
   102d8:	       move.l 24(a0),d0
   102dc:	       move.l d0,-(sp)
   102de:	       pea 1 <_start+0x1>
   102e2:	       move.l sp,d0
   102e4:	       addq.l #8,d0
   102e6:	       move.l d0,-(sp)
   102e8:	       jsr 136fe <getValueType>
   102ee:	       lea 12(sp),sp
   102f2:	       tst.w d0
   102f4:	   /-- bne.s 102fa <builtIn_setCharacterDrawMode+0x28>
   102f6:	   |   moveq #1,d0
   102f8:	/--|-- bra.s 10354 <builtIn_setCharacterDrawMode+0x82>
	trimStack (&fun -> stack);
   102fa:	|  \-> moveq #24,d0
   102fc:	|      add.l 16(sp),d0
   10300:	|      move.l d0,-(sp)
   10302:	|      jsr 14082 <trimStack>
   10308:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1030a:	|      movea.l 16(sp),a0
   1030e:	|      move.l 24(a0),d0
   10312:	|      move.l d0,-(sp)
   10314:	|      pea 7 <_start+0x7>
   10318:	|      moveq #12,d0
   1031a:	|      add.l sp,d0
   1031c:	|      move.l d0,-(sp)
   1031e:	|      jsr 136fe <getValueType>
   10324:	|      lea 12(sp),sp
   10328:	|      tst.w d0
   1032a:	|  /-- bne.s 10330 <builtIn_setCharacterDrawMode+0x5e>
   1032c:	|  |   moveq #1,d0
   1032e:	+--|-- bra.s 10354 <builtIn_setCharacterDrawMode+0x82>
	trimStack (&fun -> stack);
   10330:	|  \-> moveq #24,d0
   10332:	|      add.l 16(sp),d0
   10336:	|      move.l d0,-(sp)
   10338:	|      jsr 14082 <trimStack>
   1033e:	|      addq.l #4,sp
	setDrawMode (di, obj);
   10340:	|      move.l 4(sp),d1
   10344:	|      move.l (sp),d0
   10346:	|      move.l d1,-(sp)
   10348:	|      move.l d0,-(sp)
   1034a:	|      jsr a58e <setDrawMode>
   10350:	|      addq.l #8,sp
	return BR_CONTINUE;
   10352:	|      moveq #2,d0
}
   10354:	\----> addq.l #8,sp
   10356:	       rts

00010358 <builtIn_setCharacterTransparency>:

builtIn(setCharacterTransparency)
{
	UNUSEDALL
	KPrintF("setCharacterTransparency: Not implemented on Amiga");
   10358:	pea 182ee <PutChar+0x1dae>
   1035e:	jsr 15bf0 <KPrintF>
   10364:	addq.l #4,sp
	return BR_CONTINUE;
   10366:	moveq #2,d0
}
   10368:	rts

0001036a <builtIn_setCharacterColourise>:

builtIn(setCharacterColourise)
{
	UNUSEDALL
	KPrintF("setCharacterColourise: Currently not implemented on Amiga");
   1036a:	pea 18321 <PutChar+0x1de1>
   10370:	jsr 15bf0 <KPrintF>
   10376:	addq.l #4,sp
	if (! getValueType(&r, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
	trimStack (&fun -> stack);
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
	trimStack (&fun -> stack);
	setPersonColourise (obj, r, g, b, mix);*/
	return BR_CONTINUE;
   10378:	moveq #2,d0
}
   1037a:	rts

0001037c <builtIn_setScale>:

builtIn(setScale)
{
   1037c:	       subq.l #8,sp
	UNUSEDALL
	int val1, val2;
	if (! getValueType(&val2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1037e:	       movea.l 16(sp),a0
   10382:	       move.l 24(a0),d0
   10386:	       move.l d0,-(sp)
   10388:	       pea 1 <_start+0x1>
   1038c:	       move.l sp,d0
   1038e:	       addq.l #8,d0
   10390:	       move.l d0,-(sp)
   10392:	       jsr 136fe <getValueType>
   10398:	       lea 12(sp),sp
   1039c:	       tst.w d0
   1039e:	   /-- bne.s 103a4 <builtIn_setScale+0x28>
   103a0:	   |   moveq #1,d0
   103a2:	/--|-- bra.s 10406 <builtIn_setScale+0x8a>
	trimStack (&fun -> stack);
   103a4:	|  \-> moveq #24,d0
   103a6:	|      add.l 16(sp),d0
   103aa:	|      move.l d0,-(sp)
   103ac:	|      jsr 14082 <trimStack>
   103b2:	|      addq.l #4,sp
	if (! getValueType(&val1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   103b4:	|      movea.l 16(sp),a0
   103b8:	|      move.l 24(a0),d0
   103bc:	|      move.l d0,-(sp)
   103be:	|      pea 1 <_start+0x1>
   103c2:	|      moveq #12,d0
   103c4:	|      add.l sp,d0
   103c6:	|      move.l d0,-(sp)
   103c8:	|      jsr 136fe <getValueType>
   103ce:	|      lea 12(sp),sp
   103d2:	|      tst.w d0
   103d4:	|  /-- bne.s 103da <builtIn_setScale+0x5e>
   103d6:	|  |   moveq #1,d0
   103d8:	+--|-- bra.s 10406 <builtIn_setScale+0x8a>
	trimStack (&fun -> stack);
   103da:	|  \-> moveq #24,d0
   103dc:	|      add.l 16(sp),d0
   103e0:	|      move.l d0,-(sp)
   103e2:	|      jsr 14082 <trimStack>
   103e8:	|      addq.l #4,sp
	setScale ((short int) val1, (short int) val2);
   103ea:	|      move.l (sp),d0
   103ec:	|      move.l d0,d0
   103ee:	|      movea.w d0,a1
   103f0:	|      move.l 4(sp),d0
   103f4:	|      move.l d0,d0
   103f6:	|      movea.w d0,a0
   103f8:	|      move.l a1,-(sp)
   103fa:	|      move.l a0,-(sp)
   103fc:	|      jsr ac28 <setScale>
   10402:	|      addq.l #8,sp
	return BR_CONTINUE;
   10404:	|      moveq #2,d0
}
   10406:	\----> addq.l #8,sp
   10408:	       rts

0001040a <builtIn_stopCharacter>:

builtIn(stopCharacter)
{
   1040a:	       subq.l #4,sp
	UNUSEDALL
	int obj;
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1040c:	       movea.l 12(sp),a0
   10410:	       move.l 24(a0),d0
   10414:	       move.l d0,-(sp)
   10416:	       pea 7 <_start+0x7>
   1041a:	       move.l sp,d0
   1041c:	       addq.l #8,d0
   1041e:	       move.l d0,-(sp)
   10420:	       jsr 136fe <getValueType>
   10426:	       lea 12(sp),sp
   1042a:	       tst.w d0
   1042c:	   /-- bne.s 10432 <builtIn_stopCharacter+0x28>
   1042e:	   |   moveq #1,d0
   10430:	/--|-- bra.s 1046a <builtIn_stopCharacter+0x60>
	trimStack (&fun -> stack);
   10432:	|  \-> moveq #24,d0
   10434:	|      add.l 12(sp),d0
   10438:	|      move.l d0,-(sp)
   1043a:	|      jsr 14082 <trimStack>
   10440:	|      addq.l #4,sp

	// Return value
	setVariable (&fun -> reg, SVT_INT, stopPerson (obj));
   10442:	|      move.l (sp),d0
   10444:	|      move.l d0,-(sp)
   10446:	|      jsr ad5c <stopPerson>
   1044c:	|      addq.l #4,sp
   1044e:	|      movea.w d0,a0
   10450:	|      moveq #28,d0
   10452:	|      add.l 12(sp),d0
   10456:	|      move.l a0,-(sp)
   10458:	|      pea 1 <_start+0x1>
   1045c:	|      move.l d0,-(sp)
   1045e:	|      jsr 13ff0 <setVariable>
   10464:	|      lea 12(sp),sp
	return BR_CONTINUE;
   10468:	|      moveq #2,d0
}
   1046a:	\----> addq.l #4,sp
   1046c:	       rts

0001046e <builtIn_pasteCharacter>:
		fixScaleSprite (thisPerson -> x, thisPerson -> y, myAnim -> theSprites -> bank.sprites[abs (fNum)], myAnim -> theSprites -> bank.myPalette, thisPerson, 0, 0, fNum < 0);
		setVariable (&fun -> reg, SVT_INT, 1);
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
	} Todo: Amigize this*/
	KPrintF("Not implemented yet for Amiga");
   1046e:	pea 1835b <PutChar+0x1e1b>
   10474:	jsr 15bf0 <KPrintF>
   1047a:	addq.l #4,sp
	return BR_CONTINUE;
   1047c:	moveq #2,d0
}
   1047e:	rts

00010480 <builtIn_animate>:

builtIn(animate)
{
   10480:	       subq.l #8,sp
	UNUSEDALL
	int obj;
	struct personaAnimation * pp = getAnimationFromVar (&(fun -> stack -> thisVar));
   10482:	       movea.l 16(sp),a0
   10486:	       move.l 24(a0),d0
   1048a:	       move.l d0,-(sp)
   1048c:	       jsr 13bd6 <getAnimationFromVar>
   10492:	       addq.l #4,sp
   10494:	       move.l d0,4(sp)
	if (pp == NULL) return BR_ERROR;
   10498:	   /-- bne.s 1049e <builtIn_animate+0x1e>
   1049a:	   |   moveq #1,d0
   1049c:	/--|-- bra.s 1051c <builtIn_animate+0x9c>
	trimStack (&fun -> stack);
   1049e:	|  \-> moveq #24,d0
   104a0:	|      add.l 16(sp),d0
   104a4:	|      move.l d0,-(sp)
   104a6:	|      jsr 14082 <trimStack>
   104ac:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   104ae:	|      movea.l 16(sp),a0
   104b2:	|      move.l 24(a0),d0
   104b6:	|      move.l d0,-(sp)
   104b8:	|      pea 7 <_start+0x7>
   104bc:	|      move.l sp,d0
   104be:	|      addq.l #8,d0
   104c0:	|      move.l d0,-(sp)
   104c2:	|      jsr 136fe <getValueType>
   104c8:	|      lea 12(sp),sp
   104cc:	|      tst.w d0
   104ce:	|  /-- bne.s 104d4 <builtIn_animate+0x54>
   104d0:	|  |   moveq #1,d0
   104d2:	+--|-- bra.s 1051c <builtIn_animate+0x9c>
	trimStack (&fun -> stack);
   104d4:	|  \-> moveq #24,d0
   104d6:	|      add.l 16(sp),d0
   104da:	|      move.l d0,-(sp)
   104dc:	|      jsr 14082 <trimStack>
   104e2:	|      addq.l #4,sp
	animatePerson (obj, pp);
   104e4:	|      move.l (sp),d0
   104e6:	|      move.l 4(sp),-(sp)
   104ea:	|      move.l d0,-(sp)
   104ec:	|      jsr 848c <animatePerson>
   104f2:	|      addq.l #8,sp
	setVariable (&fun -> reg, SVT_INT, timeForAnim (pp));
   104f4:	|      move.l 4(sp),-(sp)
   104f8:	|      jsr adb0 <timeForAnim>
   104fe:	|      addq.l #4,sp
   10500:	|      move.l d0,d1
   10502:	|      moveq #28,d0
   10504:	|      add.l 16(sp),d0
   10508:	|      move.l d1,-(sp)
   1050a:	|      pea 1 <_start+0x1>
   1050e:	|      move.l d0,-(sp)
   10510:	|      jsr 13ff0 <setVariable>
   10516:	|      lea 12(sp),sp
	return BR_CONTINUE;
   1051a:	|      moveq #2,d0
}
   1051c:	\----> addq.l #8,sp
   1051e:	       rts

00010520 <builtIn_setCostume>:

builtIn(setCostume)
{
   10520:	       subq.l #8,sp
	UNUSEDALL
	int obj;
	struct persona * pp = getCostumeFromVar(&(fun -> stack -> thisVar));
   10522:	       movea.l 16(sp),a0
   10526:	       move.l 24(a0),d0
   1052a:	       move.l d0,-(sp)
   1052c:	       jsr 133aa <getCostumeFromVar>
   10532:	       addq.l #4,sp
   10534:	       move.l d0,4(sp)
	if (pp == NULL) return BR_ERROR;
   10538:	   /-- bne.s 1053e <builtIn_setCostume+0x1e>
   1053a:	   |   moveq #1,d0
   1053c:	/--|-- bra.s 10596 <builtIn_setCostume+0x76>
	trimStack (&fun -> stack);
   1053e:	|  \-> moveq #24,d0
   10540:	|      add.l 16(sp),d0
   10544:	|      move.l d0,-(sp)
   10546:	|      jsr 14082 <trimStack>
   1054c:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1054e:	|      movea.l 16(sp),a0
   10552:	|      move.l 24(a0),d0
   10556:	|      move.l d0,-(sp)
   10558:	|      pea 7 <_start+0x7>
   1055c:	|      move.l sp,d0
   1055e:	|      addq.l #8,d0
   10560:	|      move.l d0,-(sp)
   10562:	|      jsr 136fe <getValueType>
   10568:	|      lea 12(sp),sp
   1056c:	|      tst.w d0
   1056e:	|  /-- bne.s 10574 <builtIn_setCostume+0x54>
   10570:	|  |   moveq #1,d0
   10572:	+--|-- bra.s 10596 <builtIn_setCostume+0x76>
	trimStack (&fun -> stack);
   10574:	|  \-> moveq #24,d0
   10576:	|      add.l 16(sp),d0
   1057a:	|      move.l d0,-(sp)
   1057c:	|      jsr 14082 <trimStack>
   10582:	|      addq.l #4,sp
	animatePersonUsingPersona(obj, pp);
   10584:	|      move.l (sp),d0
   10586:	|      move.l 4(sp),-(sp)
   1058a:	|      move.l d0,-(sp)
   1058c:	|      jsr 84d6 <animatePersonUsingPersona>
   10592:	|      addq.l #8,sp
	return BR_CONTINUE;
   10594:	|      moveq #2,d0
}
   10596:	\----> addq.l #8,sp
   10598:	       rts

0001059a <builtIn_floatCharacter>:

builtIn(floatCharacter)
{
   1059a:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1059c:	       movea.l 16(sp),a0
   105a0:	       move.l 24(a0),d0
   105a4:	       move.l d0,-(sp)
   105a6:	       pea 1 <_start+0x1>
   105aa:	       move.l sp,d0
   105ac:	       addq.l #8,d0
   105ae:	       move.l d0,-(sp)
   105b0:	       jsr 136fe <getValueType>
   105b6:	       lea 12(sp),sp
   105ba:	       tst.w d0
   105bc:	   /-- bne.s 105c2 <builtIn_floatCharacter+0x28>
   105be:	   |   moveq #1,d0
   105c0:	/--|-- bra.s 10636 <builtIn_floatCharacter+0x9c>
	trimStack (&fun -> stack);
   105c2:	|  \-> moveq #24,d0
   105c4:	|      add.l 16(sp),d0
   105c8:	|      move.l d0,-(sp)
   105ca:	|      jsr 14082 <trimStack>
   105d0:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   105d2:	|      movea.l 16(sp),a0
   105d6:	|      move.l 24(a0),d0
   105da:	|      move.l d0,-(sp)
   105dc:	|      pea 7 <_start+0x7>
   105e0:	|      moveq #12,d0
   105e2:	|      add.l sp,d0
   105e4:	|      move.l d0,-(sp)
   105e6:	|      jsr 136fe <getValueType>
   105ec:	|      lea 12(sp),sp
   105f0:	|      tst.w d0
   105f2:	|  /-- bne.s 105f8 <builtIn_floatCharacter+0x5e>
   105f4:	|  |   moveq #1,d0
   105f6:	+--|-- bra.s 10636 <builtIn_floatCharacter+0x9c>
	trimStack (&fun -> stack);
   105f8:	|  \-> moveq #24,d0
   105fa:	|      add.l 16(sp),d0
   105fe:	|      move.l d0,-(sp)
   10600:	|      jsr 14082 <trimStack>
   10606:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, floatCharacter (di, obj));
   10608:	|      move.l 4(sp),d1
   1060c:	|      move.l (sp),d0
   1060e:	|      move.l d1,-(sp)
   10610:	|      move.l d0,-(sp)
   10612:	|      jsr 964a <floatCharacter>
   10618:	|      addq.l #8,sp
   1061a:	|      movea.w d0,a0
   1061c:	|      moveq #28,d0
   1061e:	|      add.l 16(sp),d0
   10622:	|      move.l a0,-(sp)
   10624:	|      pea 1 <_start+0x1>
   10628:	|      move.l d0,-(sp)
   1062a:	|      jsr 13ff0 <setVariable>
   10630:	|      lea 12(sp),sp
	return BR_CONTINUE;
   10634:	|      moveq #2,d0
}
   10636:	\----> addq.l #8,sp
   10638:	       rts

0001063a <builtIn_setCharacterWalkSpeed>:

builtIn(setCharacterWalkSpeed)
{
   1063a:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1063c:	       movea.l 16(sp),a0
   10640:	       move.l 24(a0),d0
   10644:	       move.l d0,-(sp)
   10646:	       pea 1 <_start+0x1>
   1064a:	       move.l sp,d0
   1064c:	       addq.l #8,d0
   1064e:	       move.l d0,-(sp)
   10650:	       jsr 136fe <getValueType>
   10656:	       lea 12(sp),sp
   1065a:	       tst.w d0
   1065c:	   /-- bne.s 10662 <builtIn_setCharacterWalkSpeed+0x28>
   1065e:	   |   moveq #1,d0
   10660:	/--|-- bra.s 106d6 <builtIn_setCharacterWalkSpeed+0x9c>
	trimStack (&fun -> stack);
   10662:	|  \-> moveq #24,d0
   10664:	|      add.l 16(sp),d0
   10668:	|      move.l d0,-(sp)
   1066a:	|      jsr 14082 <trimStack>
   10670:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10672:	|      movea.l 16(sp),a0
   10676:	|      move.l 24(a0),d0
   1067a:	|      move.l d0,-(sp)
   1067c:	|      pea 7 <_start+0x7>
   10680:	|      moveq #12,d0
   10682:	|      add.l sp,d0
   10684:	|      move.l d0,-(sp)
   10686:	|      jsr 136fe <getValueType>
   1068c:	|      lea 12(sp),sp
   10690:	|      tst.w d0
   10692:	|  /-- bne.s 10698 <builtIn_setCharacterWalkSpeed+0x5e>
   10694:	|  |   moveq #1,d0
   10696:	+--|-- bra.s 106d6 <builtIn_setCharacterWalkSpeed+0x9c>
	trimStack (&fun -> stack);
   10698:	|  \-> moveq #24,d0
   1069a:	|      add.l 16(sp),d0
   1069e:	|      move.l d0,-(sp)
   106a0:	|      jsr 14082 <trimStack>
   106a6:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, setCharacterWalkSpeed (di, obj));
   106a8:	|      move.l 4(sp),d1
   106ac:	|      move.l (sp),d0
   106ae:	|      move.l d1,-(sp)
   106b0:	|      move.l d0,-(sp)
   106b2:	|      jsr abc4 <setCharacterWalkSpeed>
   106b8:	|      addq.l #8,sp
   106ba:	|      movea.w d0,a0
   106bc:	|      moveq #28,d0
   106be:	|      add.l 16(sp),d0
   106c2:	|      move.l a0,-(sp)
   106c4:	|      pea 1 <_start+0x1>
   106c8:	|      move.l d0,-(sp)
   106ca:	|      jsr 13ff0 <setVariable>
   106d0:	|      lea 12(sp),sp
	return BR_CONTINUE;
   106d4:	|      moveq #2,d0
}
   106d6:	\----> addq.l #8,sp
   106d8:	       rts

000106da <builtIn_turnCharacter>:

builtIn(turnCharacter)
{
   106da:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   106dc:	       movea.l 16(sp),a0
   106e0:	       move.l 24(a0),d0
   106e4:	       move.l d0,-(sp)
   106e6:	       pea 1 <_start+0x1>
   106ea:	       move.l sp,d0
   106ec:	       addq.l #8,d0
   106ee:	       move.l d0,-(sp)
   106f0:	       jsr 136fe <getValueType>
   106f6:	       lea 12(sp),sp
   106fa:	       tst.w d0
   106fc:	   /-- bne.s 10702 <builtIn_turnCharacter+0x28>
   106fe:	   |   moveq #1,d0
   10700:	/--|-- bra.s 10776 <builtIn_turnCharacter+0x9c>
	trimStack (&fun -> stack);
   10702:	|  \-> moveq #24,d0
   10704:	|      add.l 16(sp),d0
   10708:	|      move.l d0,-(sp)
   1070a:	|      jsr 14082 <trimStack>
   10710:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10712:	|      movea.l 16(sp),a0
   10716:	|      move.l 24(a0),d0
   1071a:	|      move.l d0,-(sp)
   1071c:	|      pea 7 <_start+0x7>
   10720:	|      moveq #12,d0
   10722:	|      add.l sp,d0
   10724:	|      move.l d0,-(sp)
   10726:	|      jsr 136fe <getValueType>
   1072c:	|      lea 12(sp),sp
   10730:	|      tst.w d0
   10732:	|  /-- bne.s 10738 <builtIn_turnCharacter+0x5e>
   10734:	|  |   moveq #1,d0
   10736:	+--|-- bra.s 10776 <builtIn_turnCharacter+0x9c>
	trimStack (&fun -> stack);
   10738:	|  \-> moveq #24,d0
   1073a:	|      add.l 16(sp),d0
   1073e:	|      move.l d0,-(sp)
   10740:	|      jsr 14082 <trimStack>
   10746:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, turnPersonToFace (obj, di));
   10748:	|      move.l (sp),d1
   1074a:	|      move.l 4(sp),d0
   1074e:	|      move.l d1,-(sp)
   10750:	|      move.l d0,-(sp)
   10752:	|      jsr ae68 <turnPersonToFace>
   10758:	|      addq.l #8,sp
   1075a:	|      movea.w d0,a0
   1075c:	|      moveq #28,d0
   1075e:	|      add.l 16(sp),d0
   10762:	|      move.l a0,-(sp)
   10764:	|      pea 1 <_start+0x1>
   10768:	|      move.l d0,-(sp)
   1076a:	|      jsr 13ff0 <setVariable>
   10770:	|      lea 12(sp),sp
	return BR_CONTINUE;
   10774:	|      moveq #2,d0
}
   10776:	\----> addq.l #8,sp
   10778:	       rts

0001077a <builtIn_setCharacterExtra>:

builtIn(setCharacterExtra)
{
   1077a:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1077c:	       movea.l 16(sp),a0
   10780:	       move.l 24(a0),d0
   10784:	       move.l d0,-(sp)
   10786:	       pea 1 <_start+0x1>
   1078a:	       move.l sp,d0
   1078c:	       addq.l #8,d0
   1078e:	       move.l d0,-(sp)
   10790:	       jsr 136fe <getValueType>
   10796:	       lea 12(sp),sp
   1079a:	       tst.w d0
   1079c:	   /-- bne.s 107a2 <builtIn_setCharacterExtra+0x28>
   1079e:	   |   moveq #1,d0
   107a0:	/--|-- bra.s 10816 <builtIn_setCharacterExtra+0x9c>
	trimStack (&fun -> stack);
   107a2:	|  \-> moveq #24,d0
   107a4:	|      add.l 16(sp),d0
   107a8:	|      move.l d0,-(sp)
   107aa:	|      jsr 14082 <trimStack>
   107b0:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   107b2:	|      movea.l 16(sp),a0
   107b6:	|      move.l 24(a0),d0
   107ba:	|      move.l d0,-(sp)
   107bc:	|      pea 7 <_start+0x7>
   107c0:	|      moveq #12,d0
   107c2:	|      add.l sp,d0
   107c4:	|      move.l d0,-(sp)
   107c6:	|      jsr 136fe <getValueType>
   107cc:	|      lea 12(sp),sp
   107d0:	|      tst.w d0
   107d2:	|  /-- bne.s 107d8 <builtIn_setCharacterExtra+0x5e>
   107d4:	|  |   moveq #1,d0
   107d6:	+--|-- bra.s 10816 <builtIn_setCharacterExtra+0x9c>
	trimStack (&fun -> stack);
   107d8:	|  \-> moveq #24,d0
   107da:	|      add.l 16(sp),d0
   107de:	|      move.l d0,-(sp)
   107e0:	|      jsr 14082 <trimStack>
   107e6:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, setPersonExtra (obj, di));
   107e8:	|      move.l (sp),d1
   107ea:	|      move.l 4(sp),d0
   107ee:	|      move.l d1,-(sp)
   107f0:	|      move.l d0,-(sp)
   107f2:	|      jsr abf2 <setPersonExtra>
   107f8:	|      addq.l #8,sp
   107fa:	|      movea.w d0,a0
   107fc:	|      moveq #28,d0
   107fe:	|      add.l 16(sp),d0
   10802:	|      move.l a0,-(sp)
   10804:	|      pea 1 <_start+0x1>
   10808:	|      move.l d0,-(sp)
   1080a:	|      jsr 13ff0 <setVariable>
   10810:	|      lea 12(sp),sp
	return BR_CONTINUE;
   10814:	|      moveq #2,d0
}
   10816:	\----> addq.l #8,sp
   10818:	       rts

0001081a <builtIn_removeCharacter>:

builtIn(removeCharacter)
{	
   1081a:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1081c:	       movea.l 12(sp),a0
   10820:	       move.l 24(a0),d0
   10824:	       move.l d0,-(sp)
   10826:	       pea 7 <_start+0x7>
   1082a:	       move.l sp,d0
   1082c:	       addq.l #8,d0
   1082e:	       move.l d0,-(sp)
   10830:	       jsr 136fe <getValueType>
   10836:	       lea 12(sp),sp
   1083a:	       tst.w d0
   1083c:	   /-- bne.s 10842 <builtIn_removeCharacter+0x28>
   1083e:	   |   moveq #1,d0
   10840:	/--|-- bra.s 10860 <builtIn_removeCharacter+0x46>
	trimStack (&fun -> stack);
   10842:	|  \-> moveq #24,d0
   10844:	|      add.l 12(sp),d0
   10848:	|      move.l d0,-(sp)
   1084a:	|      jsr 14082 <trimStack>
   10850:	|      addq.l #4,sp
	removeOneCharacter (objectNumber);
   10852:	|      move.l (sp),d0
   10854:	|      move.l d0,-(sp)
   10856:	|      jsr 9df2 <removeOneCharacter>
   1085c:	|      addq.l #4,sp
	return BR_CONTINUE;
   1085e:	|      moveq #2,d0
}
   10860:	\----> addq.l #4,sp
   10862:	       rts

00010864 <moveChr>:

static enum builtReturn moveChr(int numParams, struct loadedFunction * fun, BOOL force, BOOL immediate)
{
   10864:	                lea -28(sp),sp
   10868:	                move.l d2,-(sp)
   1086a:	                move.l 44(sp),d1
   1086e:	                move.l 48(sp),d0
   10872:	                move.w d1,d1
   10874:	                move.w d1,6(sp)
   10878:	                move.w d0,d0
   1087a:	                move.w d0,4(sp)
	switch (numParams) {
   1087e:	                moveq #2,d0
   10880:	                cmp.l 36(sp),d0
   10884:	      /-------- beq.w 109c6 <moveChr+0x162>
   10888:	      |         moveq #3,d0
   1088a:	      |         cmp.l 36(sp),d0
   1088e:	/-----|-------- bne.w 10afa <moveChr+0x296>
		case 3:
		{
			int x, y, objectNumber;

			if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10892:	|     |         movea.l 40(sp),a0
   10896:	|     |         move.l 24(a0),d0
   1089a:	|     |         move.l d0,-(sp)
   1089c:	|     |         pea 1 <_start+0x1>
   108a0:	|     |         lea 20(sp),a0
   108a4:	|     |         move.l a0,-(sp)
   108a6:	|     |         jsr 136fe <getValueType>
   108ac:	|     |         lea 12(sp),sp
   108b0:	|     |         tst.w d0
   108b2:	|     |     /-- bne.s 108ba <moveChr+0x56>
   108b4:	|     |     |   moveq #1,d0
   108b6:	|  /--|-----|-- bra.w 10b0a <moveChr+0x2a6>
			trimStack (&fun -> stack);
   108ba:	|  |  |     \-> moveq #24,d0
   108bc:	|  |  |         add.l 40(sp),d0
   108c0:	|  |  |         move.l d0,-(sp)
   108c2:	|  |  |         jsr 14082 <trimStack>
   108c8:	|  |  |         addq.l #4,sp
			if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   108ca:	|  |  |         movea.l 40(sp),a0
   108ce:	|  |  |         move.l 24(a0),d0
   108d2:	|  |  |         move.l d0,-(sp)
   108d4:	|  |  |         pea 1 <_start+0x1>
   108d8:	|  |  |         lea 24(sp),a0
   108dc:	|  |  |         move.l a0,-(sp)
   108de:	|  |  |         jsr 136fe <getValueType>
   108e4:	|  |  |         lea 12(sp),sp
   108e8:	|  |  |         tst.w d0
   108ea:	|  |  |     /-- bne.s 108f2 <moveChr+0x8e>
   108ec:	|  |  |     |   moveq #1,d0
   108ee:	|  +--|-----|-- bra.w 10b0a <moveChr+0x2a6>
			trimStack (&fun -> stack);
   108f2:	|  |  |     \-> moveq #24,d0
   108f4:	|  |  |         add.l 40(sp),d0
   108f8:	|  |  |         move.l d0,-(sp)
   108fa:	|  |  |         jsr 14082 <trimStack>
   10900:	|  |  |         addq.l #4,sp
			if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10902:	|  |  |         movea.l 40(sp),a0
   10906:	|  |  |         move.l 24(a0),d0
   1090a:	|  |  |         move.l d0,-(sp)
   1090c:	|  |  |         pea 7 <_start+0x7>
   10910:	|  |  |         lea 16(sp),a0
   10914:	|  |  |         move.l a0,-(sp)
   10916:	|  |  |         jsr 136fe <getValueType>
   1091c:	|  |  |         lea 12(sp),sp
   10920:	|  |  |         tst.w d0
   10922:	|  |  |     /-- bne.s 1092a <moveChr+0xc6>
   10924:	|  |  |     |   moveq #1,d0
   10926:	|  +--|-----|-- bra.w 10b0a <moveChr+0x2a6>
			trimStack (&fun -> stack);
   1092a:	|  |  |     \-> moveq #24,d0
   1092c:	|  |  |         add.l 40(sp),d0
   10930:	|  |  |         move.l d0,-(sp)
   10932:	|  |  |         jsr 14082 <trimStack>
   10938:	|  |  |         addq.l #4,sp

			if (force) {
   1093a:	|  |  |         tst.w 6(sp)
   1093e:	|  |  |     /-- beq.s 1096e <moveChr+0x10a>
				if (forceWalkingPerson (x, y, objectNumber, fun, -1)) return BR_PAUSE;
   10940:	|  |  |     |   movea.l 8(sp),a0
   10944:	|  |  |     |   move.l 12(sp),d1
   10948:	|  |  |     |   move.l 16(sp),d0
   1094c:	|  |  |     |   pea ffffffff <gcc8_c_support.c.cce2f5c3+0xfffb66bc>
   10950:	|  |  |     |   move.l 44(sp),-(sp)
   10954:	|  |  |     |   move.l a0,-(sp)
   10956:	|  |  |     |   move.l d1,-(sp)
   10958:	|  |  |     |   move.l d0,-(sp)
   1095a:	|  |  |     |   jsr 966e <forceWalkingPerson>
   10960:	|  |  |     |   lea 20(sp),sp
   10964:	|  |  |     |   tst.w d0
   10966:	|  |  |  /--|-- beq.s 109c0 <moveChr+0x15c>
   10968:	|  |  |  |  |   moveq #3,d0
   1096a:	|  +--|--|--|-- bra.w 10b0a <moveChr+0x2a6>
			} else if (immediate) {
   1096e:	|  |  |  |  \-> tst.w 4(sp)
   10972:	|  |  |  |  /-- beq.s 10992 <moveChr+0x12e>
				jumpPerson (x, y, objectNumber);
   10974:	|  |  |  |  |   movea.l 8(sp),a0
   10978:	|  |  |  |  |   move.l 12(sp),d1
   1097c:	|  |  |  |  |   move.l 16(sp),d0
   10980:	|  |  |  |  |   move.l a0,-(sp)
   10982:	|  |  |  |  |   move.l d1,-(sp)
   10984:	|  |  |  |  |   move.l d0,-(sp)
   10986:	|  |  |  |  |   jsr 9976 <jumpPerson>
   1098c:	|  |  |  |  |   lea 12(sp),sp
   10990:	|  |  |  +--|-- bra.s 109c0 <moveChr+0x15c>
			} else {
				if (makeWalkingPerson (x, y, objectNumber, fun, -1)) return BR_PAUSE;
   10992:	|  |  |  |  \-> movea.l 8(sp),a0
   10996:	|  |  |  |      move.l 12(sp),d1
   1099a:	|  |  |  |      move.l 16(sp),d0
   1099e:	|  |  |  |      pea ffffffff <gcc8_c_support.c.cce2f5c3+0xfffb66bc>
   109a2:	|  |  |  |      move.l 44(sp),-(sp)
   109a6:	|  |  |  |      move.l a0,-(sp)
   109a8:	|  |  |  |      move.l d1,-(sp)
   109aa:	|  |  |  |      move.l d0,-(sp)
   109ac:	|  |  |  |      jsr 9b46 <makeWalkingPerson>
   109b2:	|  |  |  |      lea 20(sp),sp
   109b6:	|  |  |  |      tst.w d0
   109b8:	|  |  |  +----- beq.s 109c0 <moveChr+0x15c>
   109ba:	|  |  |  |      moveq #3,d0
   109bc:	|  +--|--|----- bra.w 10b0a <moveChr+0x2a6>
			}
			return BR_CONTINUE;
   109c0:	|  |  |  \----> moveq #2,d0
   109c2:	|  +--|-------- bra.w 10b0a <moveChr+0x2a6>
		case 2:
		{
			int toObj, objectNumber;
			struct screenRegion * reggie;

			if (! getValueType(&toObj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   109c6:	|  |  \-------> movea.l 40(sp),a0
   109ca:	|  |            move.l 24(a0),d0
   109ce:	|  |            move.l d0,-(sp)
   109d0:	|  |            pea 7 <_start+0x7>
   109d4:	|  |            moveq #32,d0
   109d6:	|  |            add.l sp,d0
   109d8:	|  |            move.l d0,-(sp)
   109da:	|  |            jsr 136fe <getValueType>
   109e0:	|  |            lea 12(sp),sp
   109e4:	|  |            tst.w d0
   109e6:	|  |        /-- bne.s 109ee <moveChr+0x18a>
   109e8:	|  |        |   moveq #1,d0
   109ea:	|  +--------|-- bra.w 10b0a <moveChr+0x2a6>
			trimStack (&fun -> stack);
   109ee:	|  |        \-> moveq #24,d0
   109f0:	|  |            add.l 40(sp),d0
   109f4:	|  |            move.l d0,-(sp)
   109f6:	|  |            jsr 14082 <trimStack>
   109fc:	|  |            addq.l #4,sp
			if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   109fe:	|  |            movea.l 40(sp),a0
   10a02:	|  |            move.l 24(a0),d0
   10a06:	|  |            move.l d0,-(sp)
   10a08:	|  |            pea 7 <_start+0x7>
   10a0c:	|  |            lea 28(sp),a0
   10a10:	|  |            move.l a0,-(sp)
   10a12:	|  |            jsr 136fe <getValueType>
   10a18:	|  |            lea 12(sp),sp
   10a1c:	|  |            tst.w d0
   10a1e:	|  |        /-- bne.s 10a26 <moveChr+0x1c2>
   10a20:	|  |        |   moveq #1,d0
   10a22:	|  +--------|-- bra.w 10b0a <moveChr+0x2a6>
			trimStack (&fun -> stack);
   10a26:	|  |        \-> moveq #24,d0
   10a28:	|  |            add.l 40(sp),d0
   10a2c:	|  |            move.l d0,-(sp)
   10a2e:	|  |            jsr 14082 <trimStack>
   10a34:	|  |            addq.l #4,sp
			reggie = getRegionForObject (toObj);
   10a36:	|  |            move.l 24(sp),d0
   10a3a:	|  |            move.l d0,-(sp)
   10a3c:	|  |            jsr 14412 <getRegionForObject>
   10a42:	|  |            addq.l #4,sp
   10a44:	|  |            move.l d0,28(sp)
			if (reggie == NULL) return BR_CONTINUE;
   10a48:	|  |        /-- bne.s 10a50 <moveChr+0x1ec>
   10a4a:	|  |        |   moveq #2,d0
   10a4c:	|  +--------|-- bra.w 10b0a <moveChr+0x2a6>

			if (force)
   10a50:	|  |        \-> tst.w 6(sp)
   10a54:	|  |        /-- beq.s 10a90 <moveChr+0x22c>
			{
				if (forceWalkingPerson (reggie -> sX, reggie -> sY,	objectNumber, fun, reggie -> di)) return BR_PAUSE;
   10a56:	|  |        |   movea.l 28(sp),a0
   10a5a:	|  |        |   move.l 24(a0),d2
   10a5e:	|  |        |   movea.l 20(sp),a1
   10a62:	|  |        |   movea.l 28(sp),a0
   10a66:	|  |        |   move.l 20(a0),d1
   10a6a:	|  |        |   movea.l 28(sp),a0
   10a6e:	|  |        |   move.l 16(a0),d0
   10a72:	|  |        |   move.l d2,-(sp)
   10a74:	|  |        |   move.l 44(sp),-(sp)
   10a78:	|  |        |   move.l a1,-(sp)
   10a7a:	|  |        |   move.l d1,-(sp)
   10a7c:	|  |        |   move.l d0,-(sp)
   10a7e:	|  |        |   jsr 966e <forceWalkingPerson>
   10a84:	|  |        |   lea 20(sp),sp
   10a88:	|  |        |   tst.w d0
   10a8a:	|  |     /--|-- beq.s 10af6 <moveChr+0x292>
   10a8c:	|  |     |  |   moveq #3,d0
   10a8e:	|  +-----|--|-- bra.s 10b0a <moveChr+0x2a6>
			}
			else if (immediate)
   10a90:	|  |     |  \-> tst.w 4(sp)
   10a94:	|  |     |  /-- beq.s 10abc <moveChr+0x258>
			{
				jumpPerson (reggie -> sX, reggie -> sY,	objectNumber);
   10a96:	|  |     |  |   movea.l 20(sp),a1
   10a9a:	|  |     |  |   movea.l 28(sp),a0
   10a9e:	|  |     |  |   move.l 20(a0),d1
   10aa2:	|  |     |  |   movea.l 28(sp),a0
   10aa6:	|  |     |  |   move.l 16(a0),d0
   10aaa:	|  |     |  |   move.l a1,-(sp)
   10aac:	|  |     |  |   move.l d1,-(sp)
   10aae:	|  |     |  |   move.l d0,-(sp)
   10ab0:	|  |     |  |   jsr 9976 <jumpPerson>
   10ab6:	|  |     |  |   lea 12(sp),sp
   10aba:	|  |     +--|-- bra.s 10af6 <moveChr+0x292>
			}
			else
			{
				if (makeWalkingPerson (reggie -> sX, reggie -> sY, objectNumber, fun, reggie -> di)) return BR_PAUSE;
   10abc:	|  |     |  \-> movea.l 28(sp),a0
   10ac0:	|  |     |      move.l 24(a0),d2
   10ac4:	|  |     |      movea.l 20(sp),a1
   10ac8:	|  |     |      movea.l 28(sp),a0
   10acc:	|  |     |      move.l 20(a0),d1
   10ad0:	|  |     |      movea.l 28(sp),a0
   10ad4:	|  |     |      move.l 16(a0),d0
   10ad8:	|  |     |      move.l d2,-(sp)
   10ada:	|  |     |      move.l 44(sp),-(sp)
   10ade:	|  |     |      move.l a1,-(sp)
   10ae0:	|  |     |      move.l d1,-(sp)
   10ae2:	|  |     |      move.l d0,-(sp)
   10ae4:	|  |     |      jsr 9b46 <makeWalkingPerson>
   10aea:	|  |     |      lea 20(sp),sp
   10aee:	|  |     |      tst.w d0
   10af0:	|  |     +----- beq.s 10af6 <moveChr+0x292>
   10af2:	|  |     |      moveq #3,d0
   10af4:	|  +-----|----- bra.s 10b0a <moveChr+0x2a6>
			}
			return BR_CONTINUE;
   10af6:	|  |     \----> moveq #2,d0
   10af8:	|  +----------- bra.s 10b0a <moveChr+0x2a6>
		}

		default:
			KPrintF ("Built-in function must have either 2 or 3 parameters.");
   10afa:	\--|----------> pea 18379 <PutChar+0x1e39>
   10b00:	   |            jsr 15bf0 <KPrintF>
   10b06:	   |            addq.l #4,sp
			return BR_ERROR;
   10b08:	   |            moveq #1,d0
	}
}
   10b0a:	   \----------> move.l (sp)+,d2
   10b0c:	                lea 28(sp),sp
   10b10:	                rts

00010b12 <builtIn_moveCharacter>:

builtIn(moveCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, FALSE, FALSE);
   10b12:	clr.l -(sp)
   10b14:	clr.l -(sp)
   10b16:	move.l 16(sp),-(sp)
   10b1a:	move.l 16(sp),-(sp)
   10b1e:	jsr 10864 <moveChr>
   10b24:	lea 16(sp),sp
}
   10b28:	rts

00010b2a <builtIn_forceCharacter>:

builtIn(forceCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, TRUE, FALSE);
   10b2a:	clr.l -(sp)
   10b2c:	pea 1 <_start+0x1>
   10b30:	move.l 16(sp),-(sp)
   10b34:	move.l 16(sp),-(sp)
   10b38:	jsr 10864 <moveChr>
   10b3e:	lea 16(sp),sp
}
   10b42:	rts

00010b44 <builtIn_jumpCharacter>:

builtIn(jumpCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, FALSE, TRUE);
   10b44:	pea 1 <_start+0x1>
   10b48:	clr.l -(sp)
   10b4a:	move.l 16(sp),-(sp)
   10b4e:	move.l 16(sp),-(sp)
   10b52:	jsr 10864 <moveChr>
   10b58:	lea 16(sp),sp
}
   10b5c:	rts

00010b5e <builtIn_clearStatus>:

builtIn(clearStatus)
{
	UNUSEDALL
	clearStatusBar ();
   10b5e:	jsr 67b0 <clearStatusBar>
	return BR_CONTINUE;
   10b64:	moveq #2,d0
}
   10b66:	rts

00010b68 <builtIn_removeLastStatus>:

builtIn(removeLastStatus)
{
	UNUSEDALL
	killLastStatus ();
   10b68:	jsr 6858 <killLastStatus>
	return BR_CONTINUE;
   10b6e:	moveq #2,d0
}
   10b70:	rts

00010b72 <builtIn_addStatus>:

builtIn(addStatus)
{
	UNUSEDALL
	addStatusBar ();
   10b72:	jsr 6746 <addStatusBar>
	return BR_CONTINUE;
   10b78:	moveq #2,d0
}
   10b7a:	rts

00010b7c <builtIn_statusText>:

builtIn(statusText)
{
   10b7c:	       subq.l #8,sp
   10b7e:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar(&(fun->stack->thisVar));
   10b80:	       movea.l 20(sp),a0
   10b84:	       move.l 24(a0),d0
   10b88:	       move.l d0,-(sp)
   10b8a:	       jsr 13cd4 <getTextFromAnyVar>
   10b90:	       addq.l #4,sp
   10b92:	       move.l d0,8(sp)
	if (!newText) return BR_ERROR;
   10b96:	   /-- bne.s 10b9c <builtIn_statusText+0x20>
   10b98:	   |   moveq #1,d0
   10b9a:	/--|-- bra.s 10bd0 <builtIn_statusText+0x54>
	trimStack(&fun->stack);
   10b9c:	|  \-> moveq #24,d0
   10b9e:	|      add.l 20(sp),d0
   10ba2:	|      move.l d0,-(sp)
   10ba4:	|      jsr 14082 <trimStack>
   10baa:	|      addq.l #4,sp
	setStatusBar(newText);
   10bac:	|      move.l 8(sp),-(sp)
   10bb0:	|      jsr 6ad8 <setStatusBar>
   10bb6:	|      addq.l #4,sp
	FreeVec(newText);
   10bb8:	|      move.l 8(sp),4(sp)
   10bbe:	|      move.l 1b1a2 <SysBase>,d0
   10bc4:	|      movea.l d0,a6
   10bc6:	|      movea.l 4(sp),a1
   10bca:	|      jsr -690(a6)
	return BR_CONTINUE;
   10bce:	|      moveq #2,d0
}
   10bd0:	\----> movea.l (sp)+,a6
   10bd2:	       addq.l #8,sp
   10bd4:	       rts

00010bd6 <builtIn_lightStatus>:

builtIn(lightStatus)
{
   10bd6:	       subq.l #4,sp
	UNUSEDALL
	int val;
	if (! getValueType(&val, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10bd8:	       movea.l 12(sp),a0
   10bdc:	       move.l 24(a0),d0
   10be0:	       move.l d0,-(sp)
   10be2:	       pea 1 <_start+0x1>
   10be6:	       move.l sp,d0
   10be8:	       addq.l #8,d0
   10bea:	       move.l d0,-(sp)
   10bec:	       jsr 136fe <getValueType>
   10bf2:	       lea 12(sp),sp
   10bf6:	       tst.w d0
   10bf8:	   /-- bne.s 10bfe <builtIn_lightStatus+0x28>
   10bfa:	   |   moveq #1,d0
   10bfc:	/--|-- bra.s 10c1c <builtIn_lightStatus+0x46>
	trimStack (&fun -> stack);
   10bfe:	|  \-> moveq #24,d0
   10c00:	|      add.l 12(sp),d0
   10c04:	|      move.l d0,-(sp)
   10c06:	|      jsr 14082 <trimStack>
   10c0c:	|      addq.l #4,sp
	setLitStatus (val);
   10c0e:	|      move.l (sp),d0
   10c10:	|      move.l d0,-(sp)
   10c12:	|      jsr 6ac8 <setLitStatus>
   10c18:	|      addq.l #4,sp
	return BR_CONTINUE;
   10c1a:	|      moveq #2,d0
}
   10c1c:	\----> addq.l #4,sp
   10c1e:	       rts

00010c20 <builtIn_positionStatus>:

builtIn(positionStatus)
{
   10c20:	       subq.l #8,sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10c22:	       movea.l 16(sp),a0
   10c26:	       move.l 24(a0),d0
   10c2a:	       move.l d0,-(sp)
   10c2c:	       pea 1 <_start+0x1>
   10c30:	       move.l sp,d0
   10c32:	       addq.l #8,d0
   10c34:	       move.l d0,-(sp)
   10c36:	       jsr 136fe <getValueType>
   10c3c:	       lea 12(sp),sp
   10c40:	       tst.w d0
   10c42:	   /-- bne.s 10c48 <builtIn_positionStatus+0x28>
   10c44:	   |   moveq #1,d0
   10c46:	/--|-- bra.s 10ca2 <builtIn_positionStatus+0x82>
	trimStack (&fun -> stack);
   10c48:	|  \-> moveq #24,d0
   10c4a:	|      add.l 16(sp),d0
   10c4e:	|      move.l d0,-(sp)
   10c50:	|      jsr 14082 <trimStack>
   10c56:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10c58:	|      movea.l 16(sp),a0
   10c5c:	|      move.l 24(a0),d0
   10c60:	|      move.l d0,-(sp)
   10c62:	|      pea 1 <_start+0x1>
   10c66:	|      moveq #12,d0
   10c68:	|      add.l sp,d0
   10c6a:	|      move.l d0,-(sp)
   10c6c:	|      jsr 136fe <getValueType>
   10c72:	|      lea 12(sp),sp
   10c76:	|      tst.w d0
   10c78:	|  /-- bne.s 10c7e <builtIn_positionStatus+0x5e>
   10c7a:	|  |   moveq #1,d0
   10c7c:	+--|-- bra.s 10ca2 <builtIn_positionStatus+0x82>
	trimStack (&fun -> stack);
   10c7e:	|  \-> moveq #24,d0
   10c80:	|      add.l 16(sp),d0
   10c84:	|      move.l d0,-(sp)
   10c86:	|      jsr 14082 <trimStack>
   10c8c:	|      addq.l #4,sp
	positionStatus (x, y);
   10c8e:	|      move.l (sp),d1
   10c90:	|      move.l 4(sp),d0
   10c94:	|      move.l d1,-(sp)
   10c96:	|      move.l d0,-(sp)
   10c98:	|      jsr 68ba <positionStatus>
   10c9e:	|      addq.l #8,sp
	return BR_CONTINUE;
   10ca0:	|      moveq #2,d0
}
   10ca2:	\----> addq.l #8,sp
   10ca4:	       rts

00010ca6 <builtIn_alignStatus>:

builtIn(alignStatus)
{
   10ca6:	       subq.l #4,sp
	UNUSEDALL
	int val;
	if (! getValueType(&val, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10ca8:	       movea.l 12(sp),a0
   10cac:	       move.l 24(a0),d0
   10cb0:	       move.l d0,-(sp)
   10cb2:	       pea 1 <_start+0x1>
   10cb6:	       move.l sp,d0
   10cb8:	       addq.l #8,d0
   10cba:	       move.l d0,-(sp)
   10cbc:	       jsr 136fe <getValueType>
   10cc2:	       lea 12(sp),sp
   10cc6:	       tst.w d0
   10cc8:	   /-- bne.s 10cce <builtIn_alignStatus+0x28>
   10cca:	   |   moveq #1,d0
   10ccc:	/--|-- bra.s 10cee <builtIn_alignStatus+0x48>
	trimStack (&fun -> stack);
   10cce:	|  \-> moveq #24,d0
   10cd0:	|      add.l 12(sp),d0
   10cd4:	|      move.l d0,-(sp)
   10cd6:	|      jsr 14082 <trimStack>
   10cdc:	|      addq.l #4,sp
	nowStatus -> alignStatus = (short) val;
   10cde:	|      move.l (sp),d0
   10ce0:	|      movea.l 1ab2a <nowStatus>,a0
   10ce6:	|      move.l d0,d0
   10ce8:	|      move.w d0,4(a0)
	return BR_CONTINUE;
   10cec:	|      moveq #2,d0
}
   10cee:	\----> addq.l #4,sp
   10cf0:	       rts

00010cf2 <getFuncNumForCallback>:

static BOOL getFuncNumForCallback(int numParams, struct loadedFunction * fun, int *functionNum)
{
	switch (numParams) {
   10cf2:	             tst.l 4(sp)
   10cf6:	      /----- beq.s 10d02 <getFuncNumForCallback+0x10>
   10cf8:	      |      moveq #1,d0
   10cfa:	      |      cmp.l 4(sp),d0
   10cfe:	      |  /-- beq.s 10d08 <getFuncNumForCallback+0x16>
   10d00:	   /--|--|-- bra.s 10d3e <getFuncNumForCallback+0x4c>
		case 0:
			functionNum = 0;
   10d02:	   |  \--|-> clr.l 12(sp)
			break;
   10d06:	/--|-----|-- bra.s 10d50 <getFuncNumForCallback+0x5e>

		case 1:
			if (! getValueType(functionNum, SVT_FUNC,&fun -> stack -> thisVar)) return FALSE;
   10d08:	|  |     \-> movea.l 8(sp),a0
   10d0c:	|  |         move.l 24(a0),d0
   10d10:	|  |         move.l d0,-(sp)
   10d12:	|  |         pea 2 <_start+0x2>
   10d16:	|  |         move.l 20(sp),-(sp)
   10d1a:	|  |         jsr 136fe <getValueType>
   10d20:	|  |         lea 12(sp),sp
   10d24:	|  |         tst.w d0
   10d26:	|  |     /-- bne.s 10d2c <getFuncNumForCallback+0x3a>
   10d28:	|  |     |   clr.w d0
   10d2a:	|  |  /--|-- bra.s 10d52 <getFuncNumForCallback+0x60>
			trimStack (&fun -> stack);
   10d2c:	|  |  |  \-> moveq #24,d0
   10d2e:	|  |  |      add.l 8(sp),d0
   10d32:	|  |  |      move.l d0,-(sp)
   10d34:	|  |  |      jsr 14082 <trimStack>
   10d3a:	|  |  |      addq.l #4,sp
			break;
   10d3c:	+--|--|----- bra.s 10d50 <getFuncNumForCallback+0x5e>

		default:
			KPrintF ("Too many parameters.");
   10d3e:	|  \--|----> pea 183af <PutChar+0x1e6f>
   10d44:	|     |      jsr 15bf0 <KPrintF>
   10d4a:	|     |      addq.l #4,sp
			return FALSE;
   10d4c:	|     |      clr.w d0
   10d4e:	|     +----- bra.s 10d52 <getFuncNumForCallback+0x60>
	}
	return TRUE;
   10d50:	\-----|----> moveq #1,d0
}
   10d52:	      \----> rts

00010d54 <builtIn_onLeftMouse>:

builtIn (onLeftMouse)
{
   10d54:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   10d56:	       move.l sp,d0
   10d58:	       move.l d0,-(sp)
   10d5a:	       move.l 16(sp),-(sp)
   10d5e:	       move.l 16(sp),-(sp)
   10d62:	       jsr 10cf2 <getFuncNumForCallback>
   10d68:	       lea 12(sp),sp
   10d6c:	       tst.w d0
   10d6e:	/----- beq.s 10d7e <builtIn_onLeftMouse+0x2a>
	{
		currentEvents -> leftMouseFunction = functionNum;
   10d70:	|      movea.l 1ab1c <currentEvents>,a0
   10d76:	|      move.l (sp),d0
   10d78:	|      move.l d0,(a0)
		return BR_CONTINUE;
   10d7a:	|      moveq #2,d0
   10d7c:	|  /-- bra.s 10d80 <builtIn_onLeftMouse+0x2c>
	}
	return BR_ERROR;
   10d7e:	\--|-> moveq #1,d0
}
   10d80:	   \-> addq.l #4,sp
   10d82:	       rts

00010d84 <builtIn_onLeftMouseUp>:

builtIn (onLeftMouseUp)
{
   10d84:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   10d86:	       move.l sp,d0
   10d88:	       move.l d0,-(sp)
   10d8a:	       move.l 16(sp),-(sp)
   10d8e:	       move.l 16(sp),-(sp)
   10d92:	       jsr 10cf2 <getFuncNumForCallback>
   10d98:	       lea 12(sp),sp
   10d9c:	       tst.w d0
   10d9e:	/----- beq.s 10db0 <builtIn_onLeftMouseUp+0x2c>
	{
		currentEvents -> leftMouseUpFunction = functionNum;
   10da0:	|      movea.l 1ab1c <currentEvents>,a0
   10da6:	|      move.l (sp),d0
   10da8:	|      move.l d0,4(a0)
		return BR_CONTINUE;
   10dac:	|      moveq #2,d0
   10dae:	|  /-- bra.s 10db2 <builtIn_onLeftMouseUp+0x2e>
	}
	return BR_ERROR;
   10db0:	\--|-> moveq #1,d0
}
   10db2:	   \-> addq.l #4,sp
   10db4:	       rts

00010db6 <builtIn_onRightMouse>:

builtIn (onRightMouse)
{
   10db6:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   10db8:	       move.l sp,d0
   10dba:	       move.l d0,-(sp)
   10dbc:	       move.l 16(sp),-(sp)
   10dc0:	       move.l 16(sp),-(sp)
   10dc4:	       jsr 10cf2 <getFuncNumForCallback>
   10dca:	       lea 12(sp),sp
   10dce:	       tst.w d0
   10dd0:	/----- beq.s 10de2 <builtIn_onRightMouse+0x2c>
	{
		currentEvents -> rightMouseFunction = functionNum;
   10dd2:	|      movea.l 1ab1c <currentEvents>,a0
   10dd8:	|      move.l (sp),d0
   10dda:	|      move.l d0,8(a0)
		return BR_CONTINUE;
   10dde:	|      moveq #2,d0
   10de0:	|  /-- bra.s 10de4 <builtIn_onRightMouse+0x2e>
	}
	return BR_ERROR;
   10de2:	\--|-> moveq #1,d0
}
   10de4:	   \-> addq.l #4,sp
   10de6:	       rts

00010de8 <builtIn_onRightMouseUp>:

builtIn (onRightMouseUp)
{
   10de8:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   10dea:	       move.l sp,d0
   10dec:	       move.l d0,-(sp)
   10dee:	       move.l 16(sp),-(sp)
   10df2:	       move.l 16(sp),-(sp)
   10df6:	       jsr 10cf2 <getFuncNumForCallback>
   10dfc:	       lea 12(sp),sp
   10e00:	       tst.w d0
   10e02:	/----- beq.s 10e14 <builtIn_onRightMouseUp+0x2c>
	{
		currentEvents -> rightMouseUpFunction = functionNum;
   10e04:	|      movea.l 1ab1c <currentEvents>,a0
   10e0a:	|      move.l (sp),d0
   10e0c:	|      move.l d0,12(a0)
		return BR_CONTINUE;
   10e10:	|      moveq #2,d0
   10e12:	|  /-- bra.s 10e16 <builtIn_onRightMouseUp+0x2e>
	}
	return BR_ERROR;
   10e14:	\--|-> moveq #1,d0
}
   10e16:	   \-> addq.l #4,sp
   10e18:	       rts

00010e1a <builtIn_onFocusChange>:

builtIn (onFocusChange)
{
   10e1a:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   10e1c:	       move.l sp,d0
   10e1e:	       move.l d0,-(sp)
   10e20:	       move.l 16(sp),-(sp)
   10e24:	       move.l 16(sp),-(sp)
   10e28:	       jsr 10cf2 <getFuncNumForCallback>
   10e2e:	       lea 12(sp),sp
   10e32:	       tst.w d0
   10e34:	/----- beq.s 10e46 <builtIn_onFocusChange+0x2c>
	{
		currentEvents -> focusFunction = functionNum;
   10e36:	|      movea.l 1ab1c <currentEvents>,a0
   10e3c:	|      move.l (sp),d0
   10e3e:	|      move.l d0,20(a0)
		return BR_CONTINUE;
   10e42:	|      moveq #2,d0
   10e44:	|  /-- bra.s 10e48 <builtIn_onFocusChange+0x2e>
	}
	return BR_ERROR;
   10e46:	\--|-> moveq #1,d0
}
   10e48:	   \-> addq.l #4,sp
   10e4a:	       rts

00010e4c <builtIn_onMoveMouse>:

builtIn (onMoveMouse)
{
   10e4c:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   10e4e:	       move.l sp,d0
   10e50:	       move.l d0,-(sp)
   10e52:	       move.l 16(sp),-(sp)
   10e56:	       move.l 16(sp),-(sp)
   10e5a:	       jsr 10cf2 <getFuncNumForCallback>
   10e60:	       lea 12(sp),sp
   10e64:	       tst.w d0
   10e66:	/----- beq.s 10e78 <builtIn_onMoveMouse+0x2c>
	{
		currentEvents -> moveMouseFunction = functionNum;
   10e68:	|      movea.l 1ab1c <currentEvents>,a0
   10e6e:	|      move.l (sp),d0
   10e70:	|      move.l d0,16(a0)
		return BR_CONTINUE;
   10e74:	|      moveq #2,d0
   10e76:	|  /-- bra.s 10e7a <builtIn_onMoveMouse+0x2e>
	}
	return BR_ERROR;
   10e78:	\--|-> moveq #1,d0
}
   10e7a:	   \-> addq.l #4,sp
   10e7c:	       rts

00010e7e <builtIn_onKeyboard>:

builtIn (onKeyboard)
{
   10e7e:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   10e80:	       move.l sp,d0
   10e82:	       move.l d0,-(sp)
   10e84:	       move.l 16(sp),-(sp)
   10e88:	       move.l 16(sp),-(sp)
   10e8c:	       jsr 10cf2 <getFuncNumForCallback>
   10e92:	       lea 12(sp),sp
   10e96:	       tst.w d0
   10e98:	/----- beq.s 10eaa <builtIn_onKeyboard+0x2c>
	{
		currentEvents -> spaceFunction = functionNum;
   10e9a:	|      movea.l 1ab1c <currentEvents>,a0
   10ea0:	|      move.l (sp),d0
   10ea2:	|      move.l d0,24(a0)
		return BR_CONTINUE;
   10ea6:	|      moveq #2,d0
   10ea8:	|  /-- bra.s 10eac <builtIn_onKeyboard+0x2e>
	}
	return BR_ERROR;
   10eaa:	\--|-> moveq #1,d0
}
   10eac:	   \-> addq.l #4,sp
   10eae:	       rts

00010eb0 <builtIn_spawnSub>:

builtIn (spawnSub)
{
   10eb0:	          subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   10eb2:	          move.l sp,d0
   10eb4:	          move.l d0,-(sp)
   10eb6:	          move.l 16(sp),-(sp)
   10eba:	          move.l 16(sp),-(sp)
   10ebe:	          jsr 10cf2 <getFuncNumForCallback>
   10ec4:	          lea 12(sp),sp
   10ec8:	          tst.w d0
   10eca:	/-------- beq.s 10ef6 <builtIn_spawnSub+0x46>
	{
		if (! startNewFunctionNum (functionNum, 0, NULL, noStack, TRUE)) return BR_ERROR;
   10ecc:	|         move.l 1b172 <noStack>,d1
   10ed2:	|         move.l (sp),d0
   10ed4:	|         pea 1 <_start+0x1>
   10ed8:	|         move.l d1,-(sp)
   10eda:	|         clr.l -(sp)
   10edc:	|         clr.l -(sp)
   10ede:	|         move.l d0,-(sp)
   10ee0:	|         jsr 59ca <startNewFunctionNum>
   10ee6:	|         lea 20(sp),sp
   10eea:	|         tst.l d0
   10eec:	|     /-- bne.s 10ef2 <builtIn_spawnSub+0x42>
   10eee:	|     |   moveq #1,d0
   10ef0:	|  /--|-- bra.s 10ef8 <builtIn_spawnSub+0x48>
		return BR_CONTINUE;
   10ef2:	|  |  \-> moveq #2,d0
   10ef4:	|  +----- bra.s 10ef8 <builtIn_spawnSub+0x48>
	}
	return BR_ERROR;
   10ef6:	\--|----> moveq #1,d0
}
   10ef8:	   \----> addq.l #4,sp
   10efa:	          rts

00010efc <builtIn_cancelSub>:

builtIn (cancelSub)
{
   10efc:	          subq.l #8,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   10efe:	          move.l sp,d0
   10f00:	          addq.l #4,d0
   10f02:	          move.l d0,-(sp)
   10f04:	          move.l 20(sp),-(sp)
   10f08:	          move.l 20(sp),-(sp)
   10f0c:	          jsr 10cf2 <getFuncNumForCallback>
   10f12:	          lea 12(sp),sp
   10f16:	          tst.w d0
   10f18:	/-------- beq.s 10f4e <builtIn_cancelSub+0x52>
	{
		BOOL killedMyself;
		cancelAFunction (functionNum, fun, &killedMyself);
   10f1a:	|         move.l 4(sp),d1
   10f1e:	|         move.l sp,d0
   10f20:	|         addq.l #2,d0
   10f22:	|         move.l d0,-(sp)
   10f24:	|         move.l 20(sp),-(sp)
   10f28:	|         move.l d1,-(sp)
   10f2a:	|         jsr 36f0 <cancelAFunction>
   10f30:	|         lea 12(sp),sp
		if (killedMyself) {
   10f34:	|         move.w 2(sp),d0
   10f38:	|  /----- beq.s 10f4a <builtIn_cancelSub+0x4e>
			abortFunction (fun);
   10f3a:	|  |      move.l 16(sp),-(sp)
   10f3e:	|  |      jsr 360e <abortFunction>
   10f44:	|  |      addq.l #4,sp
			return BR_ALREADY_GONE;
   10f46:	|  |      moveq #5,d0
   10f48:	|  |  /-- bra.s 10f50 <builtIn_cancelSub+0x54>
		}
		return BR_CONTINUE;
   10f4a:	|  \--|-> moveq #2,d0
   10f4c:	|     +-- bra.s 10f50 <builtIn_cancelSub+0x54>
	}
	return BR_ERROR;
   10f4e:	\-----|-> moveq #1,d0
}
   10f50:	      \-> addq.l #8,sp
   10f52:	          rts

00010f54 <builtIn_stringWidth>:

builtIn(stringWidth)
{
   10f54:	       subq.l #8,sp
   10f56:	       move.l a6,-(sp)
	UNUSEDALL
	char * theText = getTextFromAnyVar(&(fun->stack->thisVar));
   10f58:	       movea.l 20(sp),a0
   10f5c:	       move.l 24(a0),d0
   10f60:	       move.l d0,-(sp)
   10f62:	       jsr 13cd4 <getTextFromAnyVar>
   10f68:	       addq.l #4,sp
   10f6a:	       move.l d0,8(sp)
	if (!theText) return BR_ERROR;
   10f6e:	   /-- bne.s 10f74 <builtIn_stringWidth+0x20>
   10f70:	   |   moveq #1,d0
   10f72:	/--|-- bra.s 10fc2 <builtIn_stringWidth+0x6e>
	trimStack(&fun->stack);
   10f74:	|  \-> moveq #24,d0
   10f76:	|      add.l 20(sp),d0
   10f7a:	|      move.l d0,-(sp)
   10f7c:	|      jsr 14082 <trimStack>
   10f82:	|      addq.l #4,sp

	// Return value
	setVariable(&fun->reg, SVT_INT, stringWidth(theText));
   10f84:	|      move.l 8(sp),-(sp)
   10f88:	|      jsr 142a0 <stringWidth>
   10f8e:	|      addq.l #4,sp
   10f90:	|      move.l d0,d1
   10f92:	|      moveq #28,d0
   10f94:	|      add.l 20(sp),d0
   10f98:	|      move.l d1,-(sp)
   10f9a:	|      pea 1 <_start+0x1>
   10f9e:	|      move.l d0,-(sp)
   10fa0:	|      jsr 13ff0 <setVariable>
   10fa6:	|      lea 12(sp),sp
	FreeVec(theText);
   10faa:	|      move.l 8(sp),4(sp)
   10fb0:	|      move.l 1b1a2 <SysBase>,d0
   10fb6:	|      movea.l d0,a6
   10fb8:	|      movea.l 4(sp),a1
   10fbc:	|      jsr -690(a6)
	return BR_CONTINUE;
   10fc0:	|      moveq #2,d0
}
   10fc2:	\----> movea.l (sp)+,a6
   10fc4:	       addq.l #8,sp
   10fc6:	       rts

00010fc8 <builtIn_hardScroll>:

builtIn(hardScroll)
{
   10fc8:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10fca:	       movea.l 12(sp),a0
   10fce:	       move.l 24(a0),d0
   10fd2:	       move.l d0,-(sp)
   10fd4:	       pea 1 <_start+0x1>
   10fd8:	       move.l sp,d0
   10fda:	       addq.l #8,d0
   10fdc:	       move.l d0,-(sp)
   10fde:	       jsr 136fe <getValueType>
   10fe4:	       lea 12(sp),sp
   10fe8:	       tst.w d0
   10fea:	   /-- bne.s 10ff0 <builtIn_hardScroll+0x28>
   10fec:	   |   moveq #1,d0
   10fee:	/--|-- bra.s 1100e <builtIn_hardScroll+0x46>
	trimStack (&fun -> stack);
   10ff0:	|  \-> moveq #24,d0
   10ff2:	|      add.l 12(sp),d0
   10ff6:	|      move.l d0,-(sp)
   10ff8:	|      jsr 14082 <trimStack>
   10ffe:	|      addq.l #4,sp
	hardScroll (v);
   11000:	|      move.l (sp),d0
   11002:	|      move.l d0,-(sp)
   11004:	|      jsr c248 <hardScroll>
   1100a:	|      addq.l #4,sp
	return BR_CONTINUE;
   1100c:	|      moveq #2,d0
}
   1100e:	\----> addq.l #4,sp
   11010:	       rts

00011012 <builtIn_isScreenRegion>:


builtIn(isScreenRegion)
{
   11012:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11014:	       movea.l 12(sp),a0
   11018:	       move.l 24(a0),d0
   1101c:	       move.l d0,-(sp)
   1101e:	       pea 7 <_start+0x7>
   11022:	       move.l sp,d0
   11024:	       addq.l #8,d0
   11026:	       move.l d0,-(sp)
   11028:	       jsr 136fe <getValueType>
   1102e:	       lea 12(sp),sp
   11032:	       tst.w d0
   11034:	   /-- bne.s 1103a <builtIn_isScreenRegion+0x28>
   11036:	   |   moveq #1,d0
   11038:	/--|-- bra.s 1107a <builtIn_isScreenRegion+0x68>
	trimStack (&fun -> stack);
   1103a:	|  \-> moveq #24,d0
   1103c:	|      add.l 12(sp),d0
   11040:	|      move.l d0,-(sp)
   11042:	|      jsr 14082 <trimStack>
   11048:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, getRegionForObject (objectNumber) != NULL);
   1104a:	|      move.l (sp),d0
   1104c:	|      move.l d0,-(sp)
   1104e:	|      jsr 14412 <getRegionForObject>
   11054:	|      addq.l #4,sp
   11056:	|      tst.l d0
   11058:	|      sne d0
   1105a:	|      neg.b d0
   1105c:	|      moveq #0,d1
   1105e:	|      move.b d0,d1
   11060:	|      moveq #28,d0
   11062:	|      add.l 12(sp),d0
   11066:	|      move.l d1,-(sp)
   11068:	|      pea 1 <_start+0x1>
   1106c:	|      move.l d0,-(sp)
   1106e:	|      jsr 13ff0 <setVariable>
   11074:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11078:	|      moveq #2,d0
}
   1107a:	\----> addq.l #4,sp
   1107c:	       rts

0001107e <builtIn_setSpeechSpeed>:

builtIn(setSpeechSpeed)
{
   1107e:	       subq.l #4,sp
	UNUSEDALL
	int number;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11080:	       movea.l 12(sp),a0
   11084:	       move.l 24(a0),d0
   11088:	       move.l d0,-(sp)
   1108a:	       pea 1 <_start+0x1>
   1108e:	       move.l sp,d0
   11090:	       addq.l #8,d0
   11092:	       move.l d0,-(sp)
   11094:	       jsr 136fe <getValueType>
   1109a:	       lea 12(sp),sp
   1109e:	       tst.w d0
   110a0:	   /-- bne.s 110a6 <builtIn_setSpeechSpeed+0x28>
   110a2:	   |   moveq #1,d0
   110a4:	/--|-- bra.s 110f4 <builtIn_setSpeechSpeed+0x76>
	trimStack (&fun -> stack);
   110a6:	|  \-> moveq #24,d0
   110a8:	|      add.l 12(sp),d0
   110ac:	|      move.l d0,-(sp)
   110ae:	|      jsr 14082 <trimStack>
   110b4:	|      addq.l #4,sp
	speechSpeed = number * (FLOAT) 0.01;
   110b6:	|      move.l (sp),d0
   110b8:	|      move.l d0,-(sp)
   110ba:	|      jsr 15ea8 <__floatsisf>
   110c0:	|      addq.l #4,sp
   110c2:	|      move.l #1008981770,-(sp)
   110c8:	|      move.l d0,-(sp)
   110ca:	|      jsr 15f5a <__mulsf3>
   110d0:	|      addq.l #8,sp
   110d2:	|      move.l d0,1ab2e <speechSpeed>
	setVariable (&fun -> reg, SVT_INT, 1);
   110d8:	|      moveq #28,d0
   110da:	|      add.l 12(sp),d0
   110de:	|      pea 1 <_start+0x1>
   110e2:	|      pea 1 <_start+0x1>
   110e6:	|      move.l d0,-(sp)
   110e8:	|      jsr 13ff0 <setVariable>
   110ee:	|      lea 12(sp),sp
	return BR_CONTINUE;
   110f2:	|      moveq #2,d0
}
   110f4:	\----> addq.l #4,sp
   110f6:	       rts

000110f8 <builtIn_setFontSpacing>:

builtIn(setFontSpacing)
{
   110f8:	       subq.l #4,sp
	UNUSEDALL
	int fontSpaceI;
	if (! getValueType(&fontSpaceI, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   110fa:	       movea.l 12(sp),a0
   110fe:	       move.l 24(a0),d0
   11102:	       move.l d0,-(sp)
   11104:	       pea 1 <_start+0x1>
   11108:	       move.l sp,d0
   1110a:	       addq.l #8,d0
   1110c:	       move.l d0,-(sp)
   1110e:	       jsr 136fe <getValueType>
   11114:	       lea 12(sp),sp
   11118:	       tst.w d0
   1111a:	   /-- bne.s 11120 <builtIn_setFontSpacing+0x28>
   1111c:	   |   moveq #1,d0
   1111e:	/--|-- bra.s 11156 <builtIn_setFontSpacing+0x5e>
	fontSpace = fontSpaceI;
   11120:	|  \-> move.l (sp),d0
   11122:	|      move.l d0,d0
   11124:	|      move.w d0,1b0a8 <fontSpace>
	trimStack (&fun -> stack);
   1112a:	|      moveq #24,d0
   1112c:	|      add.l 12(sp),d0
   11130:	|      move.l d0,-(sp)
   11132:	|      jsr 14082 <trimStack>
   11138:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   1113a:	|      moveq #28,d0
   1113c:	|      add.l 12(sp),d0
   11140:	|      pea 1 <_start+0x1>
   11144:	|      pea 1 <_start+0x1>
   11148:	|      move.l d0,-(sp)
   1114a:	|      jsr 13ff0 <setVariable>
   11150:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11154:	|      moveq #2,d0
}
   11156:	\----> addq.l #4,sp
   11158:	       rts

0001115a <builtIn_transitionLevel>:

builtIn(transitionLevel)
{
   1115a:	          subq.l #4,sp
	UNUSEDALL
	int number;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1115c:	          movea.l 12(sp),a0
   11160:	          move.l 24(a0),d0
   11164:	          move.l d0,-(sp)
   11166:	          pea 1 <_start+0x1>
   1116a:	          move.l sp,d0
   1116c:	          addq.l #8,d0
   1116e:	          move.l d0,-(sp)
   11170:	          jsr 136fe <getValueType>
   11176:	          lea 12(sp),sp
   1117a:	          tst.w d0
   1117c:	      /-- bne.s 11182 <builtIn_transitionLevel+0x28>
   1117e:	      |   moveq #1,d0
   11180:	/-----|-- bra.s 111d6 <builtIn_transitionLevel+0x7c>
	trimStack (&fun -> stack);
   11182:	|     \-> moveq #24,d0
   11184:	|         add.l 12(sp),d0
   11188:	|         move.l d0,-(sp)
   1118a:	|         jsr 14082 <trimStack>
   11190:	|         addq.l #4,sp

	if (number < 0)
   11192:	|         move.l (sp),d0
   11194:	|     /-- bpl.s 1119e <builtIn_transitionLevel+0x44>
		brightnessLevel = 0;
   11196:	|     |   clr.b 1ab1a <brightnessLevel>
   1119c:	|  /--|-- bra.s 111ba <builtIn_transitionLevel+0x60>
	else if (number > 255)
   1119e:	|  |  \-> move.l (sp),d0
   111a0:	|  |      cmpi.l #255,d0
   111a6:	|  |  /-- ble.s 111b0 <builtIn_transitionLevel+0x56>
		brightnessLevel = 255;
   111a8:	|  |  |   st 1ab1a <brightnessLevel>
   111ae:	|  +--|-- bra.s 111ba <builtIn_transitionLevel+0x60>
	else
		brightnessLevel = number;
   111b0:	|  |  \-> move.l (sp),d0
   111b2:	|  |      move.l d0,d0
   111b4:	|  |      move.b d0,1ab1a <brightnessLevel>

	setVariable (&fun -> reg, SVT_INT, 1);
   111ba:	|  \----> moveq #28,d0
   111bc:	|         add.l 12(sp),d0
   111c0:	|         pea 1 <_start+0x1>
   111c4:	|         pea 1 <_start+0x1>
   111c8:	|         move.l d0,-(sp)
   111ca:	|         jsr 13ff0 <setVariable>
   111d0:	|         lea 12(sp),sp
	return BR_CONTINUE;
   111d4:	|         moveq #2,d0
}
   111d6:	\-------> addq.l #4,sp
   111d8:	          rts

000111da <builtIn_captureAllKeys>:

builtIn(captureAllKeys)
{
	UNUSEDALL
	captureAllKeys = getBoolean(&(fun -> stack -> thisVar));
   111da:	movea.l 8(sp),a0
   111de:	move.l 24(a0),d0
   111e2:	move.l d0,-(sp)
   111e4:	jsr 13c3e <getBoolean>
   111ea:	addq.l #4,sp
   111ec:	move.w d0,1b142 <captureAllKeys>
	trimStack (&fun -> stack);
   111f2:	moveq #24,d0
   111f4:	add.l 8(sp),d0
   111f8:	move.l d0,-(sp)
   111fa:	jsr 14082 <trimStack>
   11200:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, captureAllKeys);
   11202:	move.w 1b142 <captureAllKeys>,d0
   11208:	movea.w d0,a0
   1120a:	moveq #28,d0
   1120c:	add.l 8(sp),d0
   11210:	move.l a0,-(sp)
   11212:	pea 1 <_start+0x1>
   11216:	move.l d0,-(sp)
   11218:	jsr 13ff0 <setVariable>
   1121e:	lea 12(sp),sp
	return BR_CONTINUE;
   11222:	moveq #2,d0
}
   11224:	rts

00011226 <builtIn_spinCharacter>:


builtIn(spinCharacter)
{
   11226:	       lea -12(sp),sp
	UNUSEDALL
	int number, objectNumber;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1122a:	       movea.l 20(sp),a0
   1122e:	       move.l 24(a0),d0
   11232:	       move.l d0,-(sp)
   11234:	       pea 1 <_start+0x1>
   11238:	       moveq #12,d0
   1123a:	       add.l sp,d0
   1123c:	       move.l d0,-(sp)
   1123e:	       jsr 136fe <getValueType>
   11244:	       lea 12(sp),sp
   11248:	       tst.w d0
   1124a:	   /-- bne.s 11252 <builtIn_spinCharacter+0x2c>
   1124c:	   |   moveq #1,d0
   1124e:	/--|-- bra.w 11302 <builtIn_spinCharacter+0xdc>
	trimStack (&fun -> stack);
   11252:	|  \-> moveq #24,d0
   11254:	|      add.l 20(sp),d0
   11258:	|      move.l d0,-(sp)
   1125a:	|      jsr 14082 <trimStack>
   11260:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11262:	|      movea.l 20(sp),a0
   11266:	|      move.l 24(a0),d0
   1126a:	|      move.l d0,-(sp)
   1126c:	|      pea 7 <_start+0x7>
   11270:	|      lea 8(sp),a0
   11274:	|      move.l a0,-(sp)
   11276:	|      jsr 136fe <getValueType>
   1127c:	|      lea 12(sp),sp
   11280:	|      tst.w d0
   11282:	|  /-- bne.s 11288 <builtIn_spinCharacter+0x62>
   11284:	|  |   moveq #1,d0
   11286:	+--|-- bra.s 11302 <builtIn_spinCharacter+0xdc>
	trimStack (&fun -> stack);
   11288:	|  \-> moveq #24,d0
   1128a:	|      add.l 20(sp),d0
   1128e:	|      move.l d0,-(sp)
   11290:	|      jsr 14082 <trimStack>
   11296:	|      addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   11298:	|      move.l (sp),d0
   1129a:	|      move.l d0,-(sp)
   1129c:	|      jsr 961c <findPerson>
   112a2:	|      addq.l #4,sp
   112a4:	|      move.l d0,8(sp)
	if (thisPerson) {
   112a8:	|  /-- beq.s 112e8 <builtIn_spinCharacter+0xc2>
		thisPerson -> wantAngle = number;
   112aa:	|  |   move.l 4(sp),d0
   112ae:	|  |   movea.l 8(sp),a0
   112b2:	|  |   move.l d0,96(a0)
		thisPerson -> spinning = TRUE;
   112b6:	|  |   movea.l 8(sp),a0
   112ba:	|  |   move.w #1,66(a0)
		thisPerson -> continueAfterWalking = fun;
   112c0:	|  |   movea.l 8(sp),a0
   112c4:	|  |   move.l 20(sp),68(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   112ca:	|  |   moveq #28,d0
   112cc:	|  |   add.l 20(sp),d0
   112d0:	|  |   pea 1 <_start+0x1>
   112d4:	|  |   pea 1 <_start+0x1>
   112d8:	|  |   move.l d0,-(sp)
   112da:	|  |   jsr 13ff0 <setVariable>
   112e0:	|  |   lea 12(sp),sp
		return BR_PAUSE;
   112e4:	|  |   moveq #3,d0
   112e6:	+--|-- bra.s 11302 <builtIn_spinCharacter+0xdc>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   112e8:	|  \-> moveq #28,d0
   112ea:	|      add.l 20(sp),d0
   112ee:	|      clr.l -(sp)
   112f0:	|      pea 1 <_start+0x1>
   112f4:	|      move.l d0,-(sp)
   112f6:	|      jsr 13ff0 <setVariable>
   112fc:	|      lea 12(sp),sp
		return BR_CONTINUE;
   11300:	|      moveq #2,d0
	}
}
   11302:	\----> lea 12(sp),sp
   11306:	       rts

00011308 <builtIn_getCharacterDirection>:

builtIn(getCharacterDirection)
{
   11308:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1130a:	          movea.l 16(sp),a0
   1130e:	          move.l 24(a0),d0
   11312:	          move.l d0,-(sp)
   11314:	          pea 7 <_start+0x7>
   11318:	          move.l sp,d0
   1131a:	          addq.l #8,d0
   1131c:	          move.l d0,-(sp)
   1131e:	          jsr 136fe <getValueType>
   11324:	          lea 12(sp),sp
   11328:	          tst.w d0
   1132a:	      /-- bne.s 11330 <builtIn_getCharacterDirection+0x28>
   1132c:	      |   moveq #1,d0
   1132e:	/-----|-- bra.s 1138e <builtIn_getCharacterDirection+0x86>
	trimStack (&fun -> stack);
   11330:	|     \-> moveq #24,d0
   11332:	|         add.l 16(sp),d0
   11336:	|         move.l d0,-(sp)
   11338:	|         jsr 14082 <trimStack>
   1133e:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   11340:	|         move.l (sp),d0
   11342:	|         move.l d0,-(sp)
   11344:	|         jsr 961c <findPerson>
   1134a:	|         addq.l #4,sp
   1134c:	|         move.l d0,4(sp)
	if (thisPerson) {
   11350:	|  /----- beq.s 11374 <builtIn_getCharacterDirection+0x6c>
		setVariable (&fun -> reg, SVT_INT, thisPerson -> direction);
   11352:	|  |      movea.l 4(sp),a0
   11356:	|  |      move.l 106(a0),d1
   1135a:	|  |      moveq #28,d0
   1135c:	|  |      add.l 16(sp),d0
   11360:	|  |      move.l d1,-(sp)
   11362:	|  |      pea 1 <_start+0x1>
   11366:	|  |      move.l d0,-(sp)
   11368:	|  |      jsr 13ff0 <setVariable>
   1136e:	|  |      lea 12(sp),sp
   11372:	|  |  /-- bra.s 1138c <builtIn_getCharacterDirection+0x84>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   11374:	|  \--|-> moveq #28,d0
   11376:	|     |   add.l 16(sp),d0
   1137a:	|     |   clr.l -(sp)
   1137c:	|     |   pea 1 <_start+0x1>
   11380:	|     |   move.l d0,-(sp)
   11382:	|     |   jsr 13ff0 <setVariable>
   11388:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   1138c:	|     \-> moveq #2,d0
}
   1138e:	\-------> addq.l #8,sp
   11390:	          rts

00011392 <builtIn_isCharacter>:

builtIn(isCharacter)
{
   11392:	       subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11394:	       movea.l 16(sp),a0
   11398:	       move.l 24(a0),d0
   1139c:	       move.l d0,-(sp)
   1139e:	       pea 7 <_start+0x7>
   113a2:	       move.l sp,d0
   113a4:	       addq.l #8,d0
   113a6:	       move.l d0,-(sp)
   113a8:	       jsr 136fe <getValueType>
   113ae:	       lea 12(sp),sp
   113b2:	       tst.w d0
   113b4:	   /-- bne.s 113ba <builtIn_isCharacter+0x28>
   113b6:	   |   moveq #1,d0
   113b8:	/--|-- bra.s 113fc <builtIn_isCharacter+0x6a>
	trimStack (&fun -> stack);
   113ba:	|  \-> moveq #24,d0
   113bc:	|      add.l 16(sp),d0
   113c0:	|      move.l d0,-(sp)
   113c2:	|      jsr 14082 <trimStack>
   113c8:	|      addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   113ca:	|      move.l (sp),d0
   113cc:	|      move.l d0,-(sp)
   113ce:	|      jsr 961c <findPerson>
   113d4:	|      addq.l #4,sp
   113d6:	|      move.l d0,4(sp)
	setVariable (&fun -> reg, SVT_INT, thisPerson != NULL);
   113da:	|      sne d0
   113dc:	|      neg.b d0
   113de:	|      moveq #0,d1
   113e0:	|      move.b d0,d1
   113e2:	|      moveq #28,d0
   113e4:	|      add.l 16(sp),d0
   113e8:	|      move.l d1,-(sp)
   113ea:	|      pea 1 <_start+0x1>
   113ee:	|      move.l d0,-(sp)
   113f0:	|      jsr 13ff0 <setVariable>
   113f6:	|      lea 12(sp),sp
	return BR_CONTINUE;
   113fa:	|      moveq #2,d0
}
   113fc:	\----> addq.l #8,sp
   113fe:	       rts

00011400 <builtIn_normalCharacter>:

builtIn(normalCharacter)
{
   11400:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11402:	          movea.l 16(sp),a0
   11406:	          move.l 24(a0),d0
   1140a:	          move.l d0,-(sp)
   1140c:	          pea 7 <_start+0x7>
   11410:	          move.l sp,d0
   11412:	          addq.l #8,d0
   11414:	          move.l d0,-(sp)
   11416:	          jsr 136fe <getValueType>
   1141c:	          lea 12(sp),sp
   11420:	          tst.w d0
   11422:	      /-- bne.s 11428 <builtIn_normalCharacter+0x28>
   11424:	      |   moveq #1,d0
   11426:	/-----|-- bra.s 114a4 <builtIn_normalCharacter+0xa4>
	trimStack (&fun -> stack);
   11428:	|     \-> moveq #24,d0
   1142a:	|         add.l 16(sp),d0
   1142e:	|         move.l d0,-(sp)
   11430:	|         jsr 14082 <trimStack>
   11436:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   11438:	|         move.l (sp),d0
   1143a:	|         move.l d0,-(sp)
   1143c:	|         jsr 961c <findPerson>
   11442:	|         addq.l #4,sp
   11444:	|         move.l d0,4(sp)
	if (thisPerson)
   11448:	|  /----- beq.s 1148a <builtIn_normalCharacter+0x8a>
	{
		thisPerson -> myAnim = thisPerson -> myPersona -> animation[thisPerson -> direction];
   1144a:	|  |      movea.l 4(sp),a0
   1144e:	|  |      movea.l 80(a0),a0
   11452:	|  |      move.l (a0),d1
   11454:	|  |      movea.l 4(sp),a0
   11458:	|  |      move.l 106(a0),d0
   1145c:	|  |      add.l d0,d0
   1145e:	|  |      add.l d0,d0
   11460:	|  |      movea.l d1,a0
   11462:	|  |      adda.l d0,a0
   11464:	|  |      move.l (a0),d0
   11466:	|  |      movea.l 4(sp),a0
   1146a:	|  |      move.l d0,72(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   1146e:	|  |      moveq #28,d0
   11470:	|  |      add.l 16(sp),d0
   11474:	|  |      pea 1 <_start+0x1>
   11478:	|  |      pea 1 <_start+0x1>
   1147c:	|  |      move.l d0,-(sp)
   1147e:	|  |      jsr 13ff0 <setVariable>
   11484:	|  |      lea 12(sp),sp
   11488:	|  |  /-- bra.s 114a2 <builtIn_normalCharacter+0xa2>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   1148a:	|  \--|-> moveq #28,d0
   1148c:	|     |   add.l 16(sp),d0
   11490:	|     |   clr.l -(sp)
   11492:	|     |   pea 1 <_start+0x1>
   11496:	|     |   move.l d0,-(sp)
   11498:	|     |   jsr 13ff0 <setVariable>
   1149e:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   114a2:	|     \-> moveq #2,d0
}
   114a4:	\-------> addq.l #8,sp
   114a6:	          rts

000114a8 <builtIn_isMoving>:

builtIn(isMoving)
{
   114a8:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   114aa:	          movea.l 16(sp),a0
   114ae:	          move.l 24(a0),d0
   114b2:	          move.l d0,-(sp)
   114b4:	          pea 7 <_start+0x7>
   114b8:	          move.l sp,d0
   114ba:	          addq.l #8,d0
   114bc:	          move.l d0,-(sp)
   114be:	          jsr 136fe <getValueType>
   114c4:	          lea 12(sp),sp
   114c8:	          tst.w d0
   114ca:	      /-- bne.s 114d0 <builtIn_isMoving+0x28>
   114cc:	      |   moveq #1,d0
   114ce:	/-----|-- bra.s 11530 <builtIn_isMoving+0x88>
	trimStack (&fun -> stack);
   114d0:	|     \-> moveq #24,d0
   114d2:	|         add.l 16(sp),d0
   114d6:	|         move.l d0,-(sp)
   114d8:	|         jsr 14082 <trimStack>
   114de:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   114e0:	|         move.l (sp),d0
   114e2:	|         move.l d0,-(sp)
   114e4:	|         jsr 961c <findPerson>
   114ea:	|         addq.l #4,sp
   114ec:	|         move.l d0,4(sp)
	if (thisPerson)
   114f0:	|  /----- beq.s 11516 <builtIn_isMoving+0x6e>
	{
		setVariable (&fun -> reg, SVT_INT, thisPerson -> walking);
   114f2:	|  |      movea.l 4(sp),a0
   114f6:	|  |      move.w 64(a0),d0
   114fa:	|  |      movea.w d0,a0
   114fc:	|  |      moveq #28,d0
   114fe:	|  |      add.l 16(sp),d0
   11502:	|  |      move.l a0,-(sp)
   11504:	|  |      pea 1 <_start+0x1>
   11508:	|  |      move.l d0,-(sp)
   1150a:	|  |      jsr 13ff0 <setVariable>
   11510:	|  |      lea 12(sp),sp
   11514:	|  |  /-- bra.s 1152e <builtIn_isMoving+0x86>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   11516:	|  \--|-> moveq #28,d0
   11518:	|     |   add.l 16(sp),d0
   1151c:	|     |   clr.l -(sp)
   1151e:	|     |   pea 1 <_start+0x1>
   11522:	|     |   move.l d0,-(sp)
   11524:	|     |   jsr 13ff0 <setVariable>
   1152a:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   1152e:	|     \-> moveq #2,d0
}
   11530:	\-------> addq.l #8,sp
   11532:	          rts

00011534 <builtIn_fetchEvent>:

builtIn(fetchEvent)
{
   11534:	          lea -12(sp),sp
	UNUSEDALL
	int obj1, obj2;
	if (! getValueType(&obj2, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11538:	          movea.l 20(sp),a0
   1153c:	          move.l 24(a0),d0
   11540:	          move.l d0,-(sp)
   11542:	          pea 7 <_start+0x7>
   11546:	          lea 8(sp),a0
   1154a:	          move.l a0,-(sp)
   1154c:	          jsr 136fe <getValueType>
   11552:	          lea 12(sp),sp
   11556:	          tst.w d0
   11558:	      /-- bne.s 11560 <builtIn_fetchEvent+0x2c>
   1155a:	      |   moveq #1,d0
   1155c:	/-----|-- bra.w 115f4 <builtIn_fetchEvent+0xc0>
	trimStack (&fun -> stack);
   11560:	|     \-> moveq #24,d0
   11562:	|         add.l 20(sp),d0
   11566:	|         move.l d0,-(sp)
   11568:	|         jsr 14082 <trimStack>
   1156e:	|         addq.l #4,sp
	if (! getValueType(&obj1, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11570:	|         movea.l 20(sp),a0
   11574:	|         move.l 24(a0),d0
   11578:	|         move.l d0,-(sp)
   1157a:	|         pea 7 <_start+0x7>
   1157e:	|         moveq #12,d0
   11580:	|         add.l sp,d0
   11582:	|         move.l d0,-(sp)
   11584:	|         jsr 136fe <getValueType>
   1158a:	|         lea 12(sp),sp
   1158e:	|         tst.w d0
   11590:	|     /-- bne.s 11596 <builtIn_fetchEvent+0x62>
   11592:	|     |   moveq #1,d0
   11594:	+-----|-- bra.s 115f4 <builtIn_fetchEvent+0xc0>
	trimStack (&fun -> stack);
   11596:	|     \-> moveq #24,d0
   11598:	|         add.l 20(sp),d0
   1159c:	|         move.l d0,-(sp)
   1159e:	|         jsr 14082 <trimStack>
   115a4:	|         addq.l #4,sp

	int fNum = getCombinationFunction (obj1, obj2);
   115a6:	|         move.l (sp),d1
   115a8:	|         move.l 4(sp),d0
   115ac:	|         move.l d1,-(sp)
   115ae:	|         move.l d0,-(sp)
   115b0:	|         jsr c52a <getCombinationFunction>
   115b6:	|         addq.l #8,sp
   115b8:	|         move.l d0,8(sp)

	// Return value
	if (fNum) {
   115bc:	|  /----- beq.s 115da <builtIn_fetchEvent+0xa6>
		setVariable (&fun -> reg, SVT_FUNC, fNum);
   115be:	|  |      moveq #28,d0
   115c0:	|  |      add.l 20(sp),d0
   115c4:	|  |      move.l 8(sp),-(sp)
   115c8:	|  |      pea 2 <_start+0x2>
   115cc:	|  |      move.l d0,-(sp)
   115ce:	|  |      jsr 13ff0 <setVariable>
   115d4:	|  |      lea 12(sp),sp
   115d8:	|  |  /-- bra.s 115f2 <builtIn_fetchEvent+0xbe>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   115da:	|  \--|-> moveq #28,d0
   115dc:	|     |   add.l 20(sp),d0
   115e0:	|     |   clr.l -(sp)
   115e2:	|     |   pea 1 <_start+0x1>
   115e6:	|     |   move.l d0,-(sp)
   115e8:	|     |   jsr 13ff0 <setVariable>
   115ee:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   115f2:	|     \-> moveq #2,d0
}
   115f4:	\-------> lea 12(sp),sp
   115f8:	          rts

000115fa <builtIn_deleteFile>:

builtIn(deleteFile)
{
   115fa:	       lea -24(sp),sp
   115fe:	       move.l a6,-(sp)
    UNUSEDALL

    char *namNormal = getTextFromAnyVar(&(fun->stack->thisVar));
   11600:	       movea.l 36(sp),a0
   11604:	       move.l 24(a0),d0
   11608:	       move.l d0,-(sp)
   1160a:	       jsr 13cd4 <getTextFromAnyVar>
   11610:	       addq.l #4,sp
   11612:	       move.l d0,24(sp)
    trimStack(&fun->stack);
   11616:	       moveq #24,d0
   11618:	       add.l 36(sp),d0
   1161c:	       move.l d0,-(sp)
   1161e:	       jsr 14082 <trimStack>
   11624:	       addq.l #4,sp
    char *nam = encodeFilename(namNormal);
   11626:	       move.l 24(sp),-(sp)
   1162a:	       jsr 2fe <encodeFilename>
   11630:	       addq.l #4,sp
   11632:	       move.l d0,20(sp)
    FreeVec(namNormal);
   11636:	       move.l 24(sp),16(sp)
   1163c:	       move.l 1b1a2 <SysBase>,d0
   11642:	       movea.l d0,a6
   11644:	       movea.l 16(sp),a1
   11648:	       jsr -690(a6)
    if (failSecurityCheck(nam)) return BR_ERROR;
   1164c:	       move.l 20(sp),-(sp)
   11650:	       jsr d2e2 <failSecurityCheck>
   11656:	       addq.l #4,sp
   11658:	       tst.w d0
   1165a:	   /-- beq.s 11660 <builtIn_deleteFile+0x66>
   1165c:	   |   moveq #1,d0
   1165e:	/--|-- bra.s 116ae <builtIn_deleteFile+0xb4>
    setVariable(&fun->reg, SVT_INT, DeleteFile(nam));
   11660:	|  \-> move.l 20(sp),12(sp)
   11666:	|      move.l 1b1aa <DOSBase>,d0
   1166c:	|      movea.l d0,a6
   1166e:	|      move.l 12(sp),d1
   11672:	|      jsr -72(a6)
   11676:	|      move.l d0,8(sp)
   1167a:	|      move.l 8(sp),d1
   1167e:	|      moveq #28,d0
   11680:	|      add.l 36(sp),d0
   11684:	|      move.l d1,-(sp)
   11686:	|      pea 1 <_start+0x1>
   1168a:	|      move.l d0,-(sp)
   1168c:	|      jsr 13ff0 <setVariable>
   11692:	|      lea 12(sp),sp
    FreeVec(nam);
   11696:	|      move.l 20(sp),4(sp)
   1169c:	|      move.l 1b1a2 <SysBase>,d0
   116a2:	|      movea.l d0,a6
   116a4:	|      movea.l 4(sp),a1
   116a8:	|      jsr -690(a6)

    return BR_CONTINUE;
   116ac:	|      moveq #2,d0
}
   116ae:	\----> movea.l (sp)+,a6
   116b0:	       lea 24(sp),sp
   116b4:	       rts

000116b6 <builtIn_renameFile>:

builtIn(renameFile)
{
   116b6:	       lea -40(sp),sp
   116ba:	       move.l a6,-(sp)
   116bc:	       move.l d2,-(sp)
	UNUSEDALL
	char * temp;

	temp = getTextFromAnyVar(&(fun->stack->thisVar));
   116be:	       movea.l 56(sp),a0
   116c2:	       move.l 24(a0),d0
   116c6:	       move.l d0,-(sp)
   116c8:	       jsr 13cd4 <getTextFromAnyVar>
   116ce:	       addq.l #4,sp
   116d0:	       move.l d0,44(sp)
	char * newnam = encodeFilename(temp);
   116d4:	       move.l 44(sp),-(sp)
   116d8:	       jsr 2fe <encodeFilename>
   116de:	       addq.l #4,sp
   116e0:	       move.l d0,40(sp)
	trimStack(&fun->stack);
   116e4:	       moveq #24,d0
   116e6:	       add.l 56(sp),d0
   116ea:	       move.l d0,-(sp)
   116ec:	       jsr 14082 <trimStack>
   116f2:	       addq.l #4,sp
	if (failSecurityCheck(newnam)) return BR_ERROR;
   116f4:	       move.l 40(sp),-(sp)
   116f8:	       jsr d2e2 <failSecurityCheck>
   116fe:	       addq.l #4,sp
   11700:	       tst.w d0
   11702:	   /-- beq.s 1170a <builtIn_renameFile+0x54>
   11704:	   |   moveq #1,d0
   11706:	/--|-- bra.w 117f0 <builtIn_renameFile+0x13a>
	FreeVec(temp);
   1170a:	|  \-> move.l 44(sp),36(sp)
   11710:	|      move.l 1b1a2 <SysBase>,d0
   11716:	|      movea.l d0,a6
   11718:	|      movea.l 36(sp),a1
   1171c:	|      jsr -690(a6)

	temp = getTextFromAnyVar(&(fun->stack->thisVar));
   11720:	|      movea.l 56(sp),a0
   11724:	|      move.l 24(a0),d0
   11728:	|      move.l d0,-(sp)
   1172a:	|      jsr 13cd4 <getTextFromAnyVar>
   11730:	|      addq.l #4,sp
   11732:	|      move.l d0,44(sp)
	char * nam = encodeFilename(temp);
   11736:	|      move.l 44(sp),-(sp)
   1173a:	|      jsr 2fe <encodeFilename>
   11740:	|      addq.l #4,sp
   11742:	|      move.l d0,32(sp)
	trimStack(&fun->stack);
   11746:	|      moveq #24,d0
   11748:	|      add.l 56(sp),d0
   1174c:	|      move.l d0,-(sp)
   1174e:	|      jsr 14082 <trimStack>
   11754:	|      addq.l #4,sp
	if (failSecurityCheck(nam)) return BR_ERROR;
   11756:	|      move.l 32(sp),-(sp)
   1175a:	|      jsr d2e2 <failSecurityCheck>
   11760:	|      addq.l #4,sp
   11762:	|      tst.w d0
   11764:	|  /-- beq.s 1176c <builtIn_renameFile+0xb6>
   11766:	|  |   moveq #1,d0
   11768:	+--|-- bra.w 117f0 <builtIn_renameFile+0x13a>
	FreeVec(temp);
   1176c:	|  \-> move.l 44(sp),28(sp)
   11772:	|      move.l 1b1a2 <SysBase>,d0
   11778:	|      movea.l d0,a6
   1177a:	|      movea.l 28(sp),a1
   1177e:	|      jsr -690(a6)

	setVariable(&fun->reg, SVT_INT, Rename(nam, newnam));
   11782:	|      move.l 32(sp),24(sp)
   11788:	|      move.l 40(sp),20(sp)
   1178e:	|      move.l 1b1aa <DOSBase>,d0
   11794:	|      movea.l d0,a6
   11796:	|      move.l 24(sp),d1
   1179a:	|      move.l 20(sp),d2
   1179e:	|      jsr -78(a6)
   117a2:	|      move.l d0,16(sp)
   117a6:	|      move.l 16(sp),d1
   117aa:	|      moveq #28,d0
   117ac:	|      add.l 56(sp),d0
   117b0:	|      move.l d1,-(sp)
   117b2:	|      pea 1 <_start+0x1>
   117b6:	|      move.l d0,-(sp)
   117b8:	|      jsr 13ff0 <setVariable>
   117be:	|      lea 12(sp),sp
	FreeVec(nam);
   117c2:	|      move.l 32(sp),12(sp)
   117c8:	|      move.l 1b1a2 <SysBase>,d0
   117ce:	|      movea.l d0,a6
   117d0:	|      movea.l 12(sp),a1
   117d4:	|      jsr -690(a6)
	FreeVec(newnam);
   117d8:	|      move.l 40(sp),8(sp)
   117de:	|      move.l 1b1a2 <SysBase>,d0
   117e4:	|      movea.l d0,a6
   117e6:	|      movea.l 8(sp),a1
   117ea:	|      jsr -690(a6)

	return BR_CONTINUE;
   117ee:	|      moveq #2,d0
}
   117f0:	\----> move.l (sp)+,d2
   117f2:	       movea.l (sp)+,a6
   117f4:	       lea 40(sp),sp
   117f8:	       rts

000117fa <builtIn_cacheSound>:

builtIn(cacheSound)
{
   117fa:	       subq.l #4,sp
	UNUSEDALL
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   117fc:	       movea.l 12(sp),a0
   11800:	       move.l 24(a0),d0
   11804:	       move.l d0,-(sp)
   11806:	       pea 5 <_start+0x5>
   1180a:	       move.l sp,d0
   1180c:	       addq.l #8,d0
   1180e:	       move.l d0,-(sp)
   11810:	       jsr 136fe <getValueType>
   11816:	       lea 12(sp),sp
   1181a:	       tst.w d0
   1181c:	   /-- bne.s 11822 <builtIn_cacheSound+0x28>
   1181e:	   |   moveq #1,d0
   11820:	/--|-- bra.s 1184a <builtIn_cacheSound+0x50>
	trimStack (&fun -> stack);
   11822:	|  \-> moveq #24,d0
   11824:	|      add.l 12(sp),d0
   11828:	|      move.l d0,-(sp)
   1182a:	|      jsr 14082 <trimStack>
   11830:	|      addq.l #4,sp
	if (cacheSound (fileNumber) == -1) return BR_ERROR;
   11832:	|      move.l (sp),d0
   11834:	|      move.l d0,-(sp)
   11836:	|      jsr c12a <cacheSound>
   1183c:	|      addq.l #4,sp
   1183e:	|      moveq #-1,d1
   11840:	|      cmp.l d0,d1
   11842:	|  /-- bne.s 11848 <builtIn_cacheSound+0x4e>
   11844:	|  |   moveq #1,d0
   11846:	+--|-- bra.s 1184a <builtIn_cacheSound+0x50>
	return BR_CONTINUE;
   11848:	|  \-> moveq #2,d0
}
   1184a:	\----> addq.l #4,sp
   1184c:	       rts

0001184e <builtIn_burnString>:
	trimStack (&fun -> stack);
	if (x == IN_THE_CENTRE) x = (winWidth - stringWidth (newText)) >> 1;
	fixFont (pastePalette);
	burnStringToBackdrop (newText, x, y, pastePalette);
	delete[] newText; Todo: Amigize this*/
	KPrintF("burnString: Not implemented for Amiga yet");
   1184e:	pea 183c4 <PutChar+0x1e84>
   11854:	jsr 15bf0 <KPrintF>
   1185a:	addq.l #4,sp
	return BR_CONTINUE;
   1185c:	moveq #2,d0
}
   1185e:	rts

00011860 <builtIn_setCharacterSpinSpeed>:

builtIn(setCharacterSpinSpeed)
{
   11860:	          lea -12(sp),sp
	UNUSEDALL
	int speed, who;
	if (! getValueType(&speed, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11864:	          movea.l 20(sp),a0
   11868:	          move.l 24(a0),d0
   1186c:	          move.l d0,-(sp)
   1186e:	          pea 1 <_start+0x1>
   11872:	          moveq #12,d0
   11874:	          add.l sp,d0
   11876:	          move.l d0,-(sp)
   11878:	          jsr 136fe <getValueType>
   1187e:	          lea 12(sp),sp
   11882:	          tst.w d0
   11884:	      /-- bne.s 1188c <builtIn_setCharacterSpinSpeed+0x2c>
   11886:	      |   moveq #1,d0
   11888:	/-----|-- bra.w 11926 <builtIn_setCharacterSpinSpeed+0xc6>
	trimStack (&fun -> stack);
   1188c:	|     \-> moveq #24,d0
   1188e:	|         add.l 20(sp),d0
   11892:	|         move.l d0,-(sp)
   11894:	|         jsr 14082 <trimStack>
   1189a:	|         addq.l #4,sp
	if (! getValueType(&who, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1189c:	|         movea.l 20(sp),a0
   118a0:	|         move.l 24(a0),d0
   118a4:	|         move.l d0,-(sp)
   118a6:	|         pea 7 <_start+0x7>
   118aa:	|         lea 8(sp),a0
   118ae:	|         move.l a0,-(sp)
   118b0:	|         jsr 136fe <getValueType>
   118b6:	|         lea 12(sp),sp
   118ba:	|         tst.w d0
   118bc:	|     /-- bne.s 118c2 <builtIn_setCharacterSpinSpeed+0x62>
   118be:	|     |   moveq #1,d0
   118c0:	+-----|-- bra.s 11926 <builtIn_setCharacterSpinSpeed+0xc6>
	trimStack (&fun -> stack);
   118c2:	|     \-> moveq #24,d0
   118c4:	|         add.l 20(sp),d0
   118c8:	|         move.l d0,-(sp)
   118ca:	|         jsr 14082 <trimStack>
   118d0:	|         addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (who);
   118d2:	|         move.l (sp),d0
   118d4:	|         move.l d0,-(sp)
   118d6:	|         jsr 961c <findPerson>
   118dc:	|         addq.l #4,sp
   118de:	|         move.l d0,8(sp)

	if (thisPerson) {
   118e2:	|  /----- beq.s 1190c <builtIn_setCharacterSpinSpeed+0xac>
		thisPerson -> spinSpeed = speed;
   118e4:	|  |      move.l 4(sp),d0
   118e8:	|  |      movea.l 8(sp),a0
   118ec:	|  |      move.l d0,122(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   118f0:	|  |      moveq #28,d0
   118f2:	|  |      add.l 20(sp),d0
   118f6:	|  |      pea 1 <_start+0x1>
   118fa:	|  |      pea 1 <_start+0x1>
   118fe:	|  |      move.l d0,-(sp)
   11900:	|  |      jsr 13ff0 <setVariable>
   11906:	|  |      lea 12(sp),sp
   1190a:	|  |  /-- bra.s 11924 <builtIn_setCharacterSpinSpeed+0xc4>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   1190c:	|  \--|-> moveq #28,d0
   1190e:	|     |   add.l 20(sp),d0
   11912:	|     |   clr.l -(sp)
   11914:	|     |   pea 1 <_start+0x1>
   11918:	|     |   move.l d0,-(sp)
   1191a:	|     |   jsr 13ff0 <setVariable>
   11920:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   11924:	|     \-> moveq #2,d0
}
   11926:	\-------> lea 12(sp),sp
   1192a:	          rts

0001192c <builtIn_setCharacterAngleOffset>:

builtIn(setCharacterAngleOffset)
{
   1192c:	          lea -12(sp),sp
	UNUSEDALL
	int angle, who;
	if (! getValueType(&angle, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11930:	          movea.l 20(sp),a0
   11934:	          move.l 24(a0),d0
   11938:	          move.l d0,-(sp)
   1193a:	          pea 1 <_start+0x1>
   1193e:	          moveq #12,d0
   11940:	          add.l sp,d0
   11942:	          move.l d0,-(sp)
   11944:	          jsr 136fe <getValueType>
   1194a:	          lea 12(sp),sp
   1194e:	          tst.w d0
   11950:	      /-- bne.s 11958 <builtIn_setCharacterAngleOffset+0x2c>
   11952:	      |   moveq #1,d0
   11954:	/-----|-- bra.w 119f2 <builtIn_setCharacterAngleOffset+0xc6>
	trimStack (&fun -> stack);
   11958:	|     \-> moveq #24,d0
   1195a:	|         add.l 20(sp),d0
   1195e:	|         move.l d0,-(sp)
   11960:	|         jsr 14082 <trimStack>
   11966:	|         addq.l #4,sp
	if (! getValueType(&who, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11968:	|         movea.l 20(sp),a0
   1196c:	|         move.l 24(a0),d0
   11970:	|         move.l d0,-(sp)
   11972:	|         pea 7 <_start+0x7>
   11976:	|         lea 8(sp),a0
   1197a:	|         move.l a0,-(sp)
   1197c:	|         jsr 136fe <getValueType>
   11982:	|         lea 12(sp),sp
   11986:	|         tst.w d0
   11988:	|     /-- bne.s 1198e <builtIn_setCharacterAngleOffset+0x62>
   1198a:	|     |   moveq #1,d0
   1198c:	+-----|-- bra.s 119f2 <builtIn_setCharacterAngleOffset+0xc6>
	trimStack (&fun -> stack);
   1198e:	|     \-> moveq #24,d0
   11990:	|         add.l 20(sp),d0
   11994:	|         move.l d0,-(sp)
   11996:	|         jsr 14082 <trimStack>
   1199c:	|         addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (who);
   1199e:	|         move.l (sp),d0
   119a0:	|         move.l d0,-(sp)
   119a2:	|         jsr 961c <findPerson>
   119a8:	|         addq.l #4,sp
   119aa:	|         move.l d0,8(sp)

	if (thisPerson) {
   119ae:	|  /----- beq.s 119d8 <builtIn_setCharacterAngleOffset+0xac>
		thisPerson -> angleOffset = angle;
   119b0:	|  |      move.l 4(sp),d0
   119b4:	|  |      movea.l 8(sp),a0
   119b8:	|  |      move.l d0,100(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   119bc:	|  |      moveq #28,d0
   119be:	|  |      add.l 20(sp),d0
   119c2:	|  |      pea 1 <_start+0x1>
   119c6:	|  |      pea 1 <_start+0x1>
   119ca:	|  |      move.l d0,-(sp)
   119cc:	|  |      jsr 13ff0 <setVariable>
   119d2:	|  |      lea 12(sp),sp
   119d6:	|  |  /-- bra.s 119f0 <builtIn_setCharacterAngleOffset+0xc4>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   119d8:	|  \--|-> moveq #28,d0
   119da:	|     |   add.l 20(sp),d0
   119de:	|     |   clr.l -(sp)
   119e0:	|     |   pea 1 <_start+0x1>
   119e4:	|     |   move.l d0,-(sp)
   119e6:	|     |   jsr 13ff0 <setVariable>
   119ec:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   119f0:	|     \-> moveq #2,d0
}
   119f2:	\-------> lea 12(sp),sp
   119f6:	          rts

000119f8 <builtIn_transitionMode>:


builtIn(transitionMode)
{
   119f8:	       subq.l #4,sp
	UNUSEDALL
	int n;
	if (! getValueType(&n, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   119fa:	       movea.l 12(sp),a0
   119fe:	       move.l 24(a0),d0
   11a02:	       move.l d0,-(sp)
   11a04:	       pea 1 <_start+0x1>
   11a08:	       move.l sp,d0
   11a0a:	       addq.l #8,d0
   11a0c:	       move.l d0,-(sp)
   11a0e:	       jsr 136fe <getValueType>
   11a14:	       lea 12(sp),sp
   11a18:	       tst.w d0
   11a1a:	   /-- bne.s 11a20 <builtIn_transitionMode+0x28>
   11a1c:	   |   moveq #1,d0
   11a1e:	/--|-- bra.s 11a56 <builtIn_transitionMode+0x5e>
	fadeMode = n;
   11a20:	|  \-> move.l (sp),d0
   11a22:	|      move.l d0,d0
   11a24:	|      move.b d0,1b07e <fadeMode>
	trimStack (&fun -> stack);
   11a2a:	|      moveq #24,d0
   11a2c:	|      add.l 12(sp),d0
   11a30:	|      move.l d0,-(sp)
   11a32:	|      jsr 14082 <trimStack>
   11a38:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   11a3a:	|      moveq #28,d0
   11a3c:	|      add.l 12(sp),d0
   11a40:	|      pea 1 <_start+0x1>
   11a44:	|      pea 1 <_start+0x1>
   11a48:	|      move.l d0,-(sp)
   11a4a:	|      jsr 13ff0 <setVariable>
   11a50:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11a54:	|      moveq #2,d0
}
   11a56:	\----> addq.l #4,sp
   11a58:	       rts

00011a5a <builtIn__rem_updateDisplay>:

// Removed function - does nothing
builtIn(_rem_updateDisplay)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   11a5a:	moveq #24,d0
   11a5c:	add.l 8(sp),d0
   11a60:	move.l d0,-(sp)
   11a62:	jsr 14082 <trimStack>
   11a68:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, TRUE);
   11a6a:	moveq #28,d0
   11a6c:	add.l 8(sp),d0
   11a70:	pea 1 <_start+0x1>
   11a74:	pea 1 <_start+0x1>
   11a78:	move.l d0,-(sp)
   11a7a:	jsr 13ff0 <setVariable>
   11a80:	lea 12(sp),sp
	return BR_CONTINUE;
   11a84:	moveq #2,d0
}
   11a86:	rts

00011a88 <builtIn_getSoundCache>:
	if (! checkNew (&fun -> reg.varData.theStack)) return BR_ERROR;
	fun -> reg.varData.theStack -> first = NULL;
	fun -> reg.varData.theStack -> last = NULL;
	fun -> reg.varData.theStack -> timesUsed = 1;
	if (! getSoundCacheStack (&fun -> reg.varData.theStack)) return BR_ERROR; Todo: Amigize this?*/
	KPrintF("getSoundCache: Not implemented yet for Amiga");
   11a88:	pea 183ee <PutChar+0x1eae>
   11a8e:	jsr 15bf0 <KPrintF>
   11a94:	addq.l #4,sp
	return BR_CONTINUE;
   11a96:	moveq #2,d0
}
   11a98:	rts

00011a9a <builtIn_saveCustomData>:

builtIn(saveCustomData)
{
   11a9a:	       lea -16(sp),sp
   11a9e:	       move.l a6,-(sp)
	UNUSEDALL
	// saveCustomData (thisStack, fileName);
	char * fileNameB = getTextFromAnyVar(&(fun->stack->thisVar));
   11aa0:	       movea.l 28(sp),a0
   11aa4:	       move.l 24(a0),d0
   11aa8:	       move.l d0,-(sp)
   11aaa:	       jsr 13cd4 <getTextFromAnyVar>
   11ab0:	       addq.l #4,sp
   11ab2:	       move.l d0,16(sp)
	if (!fileNameB) return BR_ERROR;
   11ab6:	   /-- bne.s 11abe <builtIn_saveCustomData+0x24>
   11ab8:	   |   moveq #1,d0
   11aba:	/--|-- bra.w 11b70 <builtIn_saveCustomData+0xd6>

	char * fileName = encodeFilename(fileNameB);
   11abe:	|  \-> move.l 16(sp),-(sp)
   11ac2:	|      jsr 2fe <encodeFilename>
   11ac8:	|      addq.l #4,sp
   11aca:	|      move.l d0,12(sp)
	FreeVec(fileNameB);
   11ace:	|      move.l 16(sp),8(sp)
   11ad4:	|      move.l 1b1a2 <SysBase>,d0
   11ada:	|      movea.l d0,a6
   11adc:	|      movea.l 8(sp),a1
   11ae0:	|      jsr -690(a6)

	if (failSecurityCheck(fileName)) return BR_ERROR;
   11ae4:	|      move.l 12(sp),-(sp)
   11ae8:	|      jsr d2e2 <failSecurityCheck>
   11aee:	|      addq.l #4,sp
   11af0:	|      tst.w d0
   11af2:	|  /-- beq.s 11af8 <builtIn_saveCustomData+0x5e>
   11af4:	|  |   moveq #1,d0
   11af6:	+--|-- bra.s 11b70 <builtIn_saveCustomData+0xd6>
	trimStack(&fun->stack);
   11af8:	|  \-> moveq #24,d0
   11afa:	|      add.l 28(sp),d0
   11afe:	|      move.l d0,-(sp)
   11b00:	|      jsr 14082 <trimStack>
   11b06:	|      addq.l #4,sp

	if (fun->stack->thisVar.varType != SVT_STACK) {
   11b08:	|      movea.l 28(sp),a0
   11b0c:	|      movea.l 24(a0),a0
   11b10:	|      move.l (a0),d0
   11b12:	|      moveq #6,d1
   11b14:	|      cmp.l d0,d1
   11b16:	|  /-- beq.s 11b2a <builtIn_saveCustomData+0x90>
		KPrintF("First parameter isn't a stack");
   11b18:	|  |   pea 1841b <PutChar+0x1edb>
   11b1e:	|  |   jsr 15bf0 <KPrintF>
   11b24:	|  |   addq.l #4,sp
		return BR_ERROR;
   11b26:	|  |   moveq #1,d0
   11b28:	+--|-- bra.s 11b70 <builtIn_saveCustomData+0xd6>
	}
	if (!stackToFile(fileName, &fun->stack->thisVar)) return BR_ERROR;
   11b2a:	|  \-> movea.l 28(sp),a0
   11b2e:	|      move.l 24(a0),d0
   11b32:	|      move.l d0,-(sp)
   11b34:	|      move.l 16(sp),-(sp)
   11b38:	|      jsr cf32 <stackToFile>
   11b3e:	|      addq.l #8,sp
   11b40:	|      tst.w d0
   11b42:	|  /-- bne.s 11b48 <builtIn_saveCustomData+0xae>
   11b44:	|  |   moveq #1,d0
   11b46:	+--|-- bra.s 11b70 <builtIn_saveCustomData+0xd6>
	trimStack(&fun->stack);
   11b48:	|  \-> moveq #24,d0
   11b4a:	|      add.l 28(sp),d0
   11b4e:	|      move.l d0,-(sp)
   11b50:	|      jsr 14082 <trimStack>
   11b56:	|      addq.l #4,sp
	FreeVec(fileName);
   11b58:	|      move.l 12(sp),4(sp)
   11b5e:	|      move.l 1b1a2 <SysBase>,d0
   11b64:	|      movea.l d0,a6
   11b66:	|      movea.l 4(sp),a1
   11b6a:	|      jsr -690(a6)
	return BR_CONTINUE;
   11b6e:	|      moveq #2,d0
}
   11b70:	\----> movea.l (sp)+,a6
   11b72:	       lea 16(sp),sp
   11b76:	       rts

00011b78 <builtIn_loadCustomData>:

builtIn(loadCustomData)
{
   11b78:	       lea -28(sp),sp
   11b7c:	       move.l a6,-(sp)
	UNUSEDALL

	char * newTextA = getTextFromAnyVar(&(fun->stack->thisVar));
   11b7e:	       movea.l 40(sp),a0
   11b82:	       move.l 24(a0),d0
   11b86:	       move.l d0,-(sp)
   11b88:	       jsr 13cd4 <getTextFromAnyVar>
   11b8e:	       addq.l #4,sp
   11b90:	       move.l d0,28(sp)
	if (!newTextA) return BR_ERROR;
   11b94:	   /-- bne.s 11b9c <builtIn_loadCustomData+0x24>
   11b96:	   |   moveq #1,d0
   11b98:	/--|-- bra.w 11c98 <builtIn_loadCustomData+0x120>

	char * newText = encodeFilename(newTextA);
   11b9c:	|  \-> move.l 28(sp),-(sp)
   11ba0:	|      jsr 2fe <encodeFilename>
   11ba6:	|      addq.l #4,sp
   11ba8:	|      move.l d0,24(sp)
	FreeVec(newTextA);
   11bac:	|      move.l 28(sp),20(sp)
   11bb2:	|      move.l 1b1a2 <SysBase>,d0
   11bb8:	|      movea.l d0,a6
   11bba:	|      movea.l 20(sp),a1
   11bbe:	|      jsr -690(a6)

	if (failSecurityCheck(newText)) return BR_ERROR;
   11bc2:	|      move.l 24(sp),-(sp)
   11bc6:	|      jsr d2e2 <failSecurityCheck>
   11bcc:	|      addq.l #4,sp
   11bce:	|      tst.w d0
   11bd0:	|  /-- beq.s 11bd8 <builtIn_loadCustomData+0x60>
   11bd2:	|  |   moveq #1,d0
   11bd4:	+--|-- bra.w 11c98 <builtIn_loadCustomData+0x120>
	trimStack(&fun->stack);
   11bd8:	|  \-> moveq #24,d0
   11bda:	|      add.l 40(sp),d0
   11bde:	|      move.l d0,-(sp)
   11be0:	|      jsr 14082 <trimStack>
   11be6:	|      addq.l #4,sp

	unlinkVar(&fun->reg);
   11be8:	|      moveq #28,d0
   11bea:	|      add.l 40(sp),d0
   11bee:	|      move.l d0,-(sp)
   11bf0:	|      jsr 1394c <unlinkVar>
   11bf6:	|      addq.l #4,sp
	fun->reg.varType = SVT_STACK;
   11bf8:	|      movea.l 40(sp),a0
   11bfc:	|      moveq #6,d0
   11bfe:	|      move.l d0,28(a0)
	fun->reg.varData.theStack = AllocVec(sizeof(struct stackHandler), MEMF_ANY);
   11c02:	|      moveq #12,d0
   11c04:	|      move.l d0,16(sp)
   11c08:	|      clr.l 12(sp)
   11c0c:	|      move.l 1b1a2 <SysBase>,d0
   11c12:	|      movea.l d0,a6
   11c14:	|      move.l 16(sp),d0
   11c18:	|      move.l 12(sp),d1
   11c1c:	|      jsr -684(a6)
   11c20:	|      move.l d0,8(sp)
   11c24:	|      move.l 8(sp),d0
   11c28:	|      movea.l 40(sp),a0
   11c2c:	|      move.l d0,32(a0)
	if (!fun->reg.varData.theStack) return BR_ERROR;
   11c30:	|      movea.l 40(sp),a0
   11c34:	|      move.l 32(a0),d0
   11c38:	|  /-- bne.s 11c3e <builtIn_loadCustomData+0xc6>
   11c3a:	|  |   moveq #1,d0
   11c3c:	+--|-- bra.s 11c98 <builtIn_loadCustomData+0x120>
	fun->reg.varData.theStack->first = NULL;
   11c3e:	|  \-> movea.l 40(sp),a0
   11c42:	|      movea.l 32(a0),a0
   11c46:	|      clr.l (a0)
	fun->reg.varData.theStack->last = NULL;
   11c48:	|      movea.l 40(sp),a0
   11c4c:	|      movea.l 32(a0),a0
   11c50:	|      clr.l 4(a0)
	fun->reg.varData.theStack->timesUsed = 1;
   11c54:	|      movea.l 40(sp),a0
   11c58:	|      movea.l 32(a0),a0
   11c5c:	|      moveq #1,d0
   11c5e:	|      move.l d0,8(a0)
	if (!fileToStack(newText, fun->reg.varData.theStack)) return BR_ERROR;
   11c62:	|      movea.l 40(sp),a0
   11c66:	|      move.l 32(a0),d0
   11c6a:	|      move.l d0,-(sp)
   11c6c:	|      move.l 28(sp),-(sp)
   11c70:	|      jsr c96c <fileToStack>
   11c76:	|      addq.l #8,sp
   11c78:	|      tst.w d0
   11c7a:	|  /-- bne.s 11c80 <builtIn_loadCustomData+0x108>
   11c7c:	|  |   moveq #1,d0
   11c7e:	+--|-- bra.s 11c98 <builtIn_loadCustomData+0x120>
	FreeVec(newText);
   11c80:	|  \-> move.l 24(sp),4(sp)
   11c86:	|      move.l 1b1a2 <SysBase>,d0
   11c8c:	|      movea.l d0,a6
   11c8e:	|      movea.l 4(sp),a1
   11c92:	|      jsr -690(a6)
	return BR_CONTINUE;
   11c96:	|      moveq #2,d0
}
   11c98:	\----> movea.l (sp)+,a6
   11c9a:	       lea 28(sp),sp
   11c9e:	       rts

00011ca0 <builtIn_setCustomEncoding>:

builtIn(setCustomEncoding)
{
   11ca0:	       subq.l #4,sp
	UNUSEDALL
	int n;
	if (! getValueType(&n, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11ca2:	       movea.l 12(sp),a0
   11ca6:	       move.l 24(a0),d0
   11caa:	       move.l d0,-(sp)
   11cac:	       pea 1 <_start+0x1>
   11cb0:	       move.l sp,d0
   11cb2:	       addq.l #8,d0
   11cb4:	       move.l d0,-(sp)
   11cb6:	       jsr 136fe <getValueType>
   11cbc:	       lea 12(sp),sp
   11cc0:	       tst.w d0
   11cc2:	   /-- bne.s 11cc8 <builtIn_setCustomEncoding+0x28>
   11cc4:	   |   moveq #1,d0
   11cc6:	/--|-- bra.s 11cfe <builtIn_setCustomEncoding+0x5e>
	saveEncoding = n;
   11cc8:	|  \-> move.l (sp),d0
   11cca:	|      move.l d0,d0
   11ccc:	|      move.w d0,1b2b2 <saveEncoding>
	trimStack (&fun -> stack);
   11cd2:	|      moveq #24,d0
   11cd4:	|      add.l 12(sp),d0
   11cd8:	|      move.l d0,-(sp)
   11cda:	|      jsr 14082 <trimStack>
   11ce0:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   11ce2:	|      moveq #28,d0
   11ce4:	|      add.l 12(sp),d0
   11ce8:	|      pea 1 <_start+0x1>
   11cec:	|      pea 1 <_start+0x1>
   11cf0:	|      move.l d0,-(sp)
   11cf2:	|      jsr 13ff0 <setVariable>
   11cf8:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11cfc:	|      moveq #2,d0
}
   11cfe:	\----> addq.l #4,sp
   11d00:	       rts

00011d02 <builtIn_freeSound>:

builtIn(freeSound)
{
   11d02:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   11d04:	       movea.l 12(sp),a0
   11d08:	       move.l 24(a0),d0
   11d0c:	       move.l d0,-(sp)
   11d0e:	       pea 5 <_start+0x5>
   11d12:	       move.l sp,d0
   11d14:	       addq.l #8,d0
   11d16:	       move.l d0,-(sp)
   11d18:	       jsr 136fe <getValueType>
   11d1e:	       lea 12(sp),sp
   11d22:	       tst.w d0
   11d24:	   /-- bne.s 11d2a <builtIn_freeSound+0x28>
   11d26:	   |   moveq #1,d0
   11d28:	/--|-- bra.s 11d48 <builtIn_freeSound+0x46>
	trimStack (&fun -> stack);
   11d2a:	|  \-> moveq #24,d0
   11d2c:	|      add.l 12(sp),d0
   11d30:	|      move.l d0,-(sp)
   11d32:	|      jsr 14082 <trimStack>
   11d38:	|      addq.l #4,sp
	huntKillFreeSound (v);
   11d3a:	|      move.l (sp),d0
   11d3c:	|      move.l d0,-(sp)
   11d3e:	|      jsr c12e <huntKillFreeSound>
   11d44:	|      addq.l #4,sp
	return BR_CONTINUE;
   11d46:	|      moveq #2,d0
}
   11d48:	\----> addq.l #4,sp
   11d4a:	       rts

00011d4c <builtIn_parallaxAdd>:

builtIn(parallaxAdd)
{
   11d4c:	       lea -12(sp),sp
   11d50:	       move.l d2,-(sp)
	/*if (frozenStuff) {
		fatal ("Can't set background parallax image while frozen");
		return BR_ERROR;
	} else { Todo: Amigize this*/
		int wrapX, wrapY, v;
		if (! getValueType(&wrapY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11d52:	       movea.l 24(sp),a0
   11d56:	       move.l 24(a0),d0
   11d5a:	       move.l d0,-(sp)
   11d5c:	       pea 1 <_start+0x1>
   11d60:	       moveq #16,d0
   11d62:	       add.l sp,d0
   11d64:	       move.l d0,-(sp)
   11d66:	       jsr 136fe <getValueType>
   11d6c:	       lea 12(sp),sp
   11d70:	       tst.w d0
   11d72:	   /-- bne.s 11d7a <builtIn_parallaxAdd+0x2e>
   11d74:	   |   moveq #1,d0
   11d76:	/--|-- bra.w 11e4e <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   11d7a:	|  \-> moveq #24,d0
   11d7c:	|      add.l 24(sp),d0
   11d80:	|      move.l d0,-(sp)
   11d82:	|      jsr 14082 <trimStack>
   11d88:	|      addq.l #4,sp
		if (! getValueType(&wrapX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11d8a:	|      movea.l 24(sp),a0
   11d8e:	|      move.l 24(a0),d0
   11d92:	|      move.l d0,-(sp)
   11d94:	|      pea 1 <_start+0x1>
   11d98:	|      moveq #20,d0
   11d9a:	|      add.l sp,d0
   11d9c:	|      move.l d0,-(sp)
   11d9e:	|      jsr 136fe <getValueType>
   11da4:	|      lea 12(sp),sp
   11da8:	|      tst.w d0
   11daa:	|  /-- bne.s 11db2 <builtIn_parallaxAdd+0x66>
   11dac:	|  |   moveq #1,d0
   11dae:	+--|-- bra.w 11e4e <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   11db2:	|  \-> moveq #24,d0
   11db4:	|      add.l 24(sp),d0
   11db8:	|      move.l d0,-(sp)
   11dba:	|      jsr 14082 <trimStack>
   11dc0:	|      addq.l #4,sp
		if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   11dc2:	|      movea.l 24(sp),a0
   11dc6:	|      move.l 24(a0),d0
   11dca:	|      move.l d0,-(sp)
   11dcc:	|      pea 5 <_start+0x5>
   11dd0:	|      lea 12(sp),a0
   11dd4:	|      move.l a0,-(sp)
   11dd6:	|      jsr 136fe <getValueType>
   11ddc:	|      lea 12(sp),sp
   11de0:	|      tst.w d0
   11de2:	|  /-- bne.s 11de8 <builtIn_parallaxAdd+0x9c>
   11de4:	|  |   moveq #1,d0
   11de6:	+--|-- bra.s 11e4e <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   11de8:	|  \-> moveq #24,d0
   11dea:	|      add.l 24(sp),d0
   11dee:	|      move.l d0,-(sp)
   11df0:	|      jsr 14082 <trimStack>
   11df6:	|      addq.l #4,sp

		if (! loadParallax (v, wrapX, wrapY)) return BR_ERROR;
   11df8:	|      move.l 8(sp),d0
   11dfc:	|      move.l d0,d0
   11dfe:	|      moveq #0,d2
   11e00:	|      move.w d0,d2
   11e02:	|      move.l 12(sp),d0
   11e06:	|      move.l d0,d0
   11e08:	|      moveq #0,d1
   11e0a:	|      move.w d0,d1
   11e0c:	|      move.l 4(sp),d0
   11e10:	|      move.l d0,d0
   11e12:	|      move.w d0,d0
   11e14:	|      andi.l #65535,d0
   11e1a:	|      move.l d2,-(sp)
   11e1c:	|      move.l d1,-(sp)
   11e1e:	|      move.l d0,-(sp)
   11e20:	|      jsr c34a <loadParallax>
   11e26:	|      lea 12(sp),sp
   11e2a:	|      tst.w d0
   11e2c:	|  /-- bne.s 11e32 <builtIn_parallaxAdd+0xe6>
   11e2e:	|  |   moveq #1,d0
   11e30:	+--|-- bra.s 11e4e <builtIn_parallaxAdd+0x102>
		setVariable (&fun -> reg, SVT_INT, 1);
   11e32:	|  \-> moveq #28,d0
   11e34:	|      add.l 24(sp),d0
   11e38:	|      pea 1 <_start+0x1>
   11e3c:	|      pea 1 <_start+0x1>
   11e40:	|      move.l d0,-(sp)
   11e42:	|      jsr 13ff0 <setVariable>
   11e48:	|      lea 12(sp),sp
	//}
	return BR_CONTINUE;
   11e4c:	|      moveq #2,d0
}
   11e4e:	\----> move.l (sp)+,d2
   11e50:	       lea 12(sp),sp
   11e54:	       rts

00011e56 <builtIn_parallaxClear>:

builtIn(parallaxClear)
{
	UNUSEDALL
	killParallax ();
   11e56:	jsr c282 <killParallax>
	setVariable (&fun -> reg, SVT_INT, 1);
   11e5c:	moveq #28,d0
   11e5e:	add.l 8(sp),d0
   11e62:	pea 1 <_start+0x1>
   11e66:	pea 1 <_start+0x1>
   11e6a:	move.l d0,-(sp)
   11e6c:	jsr 13ff0 <setVariable>
   11e72:	lea 12(sp),sp
	return BR_CONTINUE;
   11e76:	moveq #2,d0
}
   11e78:	rts

00011e7a <builtIn_getPixelColour>:
	if (! checkNew (&fun -> reg.varData.theStack)) return BR_ERROR;
	fun -> reg.varData.theStack -> first = NULL;
	fun -> reg.varData.theStack -> last = NULL;
	fun -> reg.varData.theStack -> timesUsed = 1;
	if (! getRGBIntoStack (x, y, &fun -> reg.varData.theStack)) return BR_ERROR; Todo: Amigize this*/
	KPrintF("getPixelColor: Not implemented for Amiga");
   11e7a:	pea 18439 <PutChar+0x1ef9>
   11e80:	jsr 15bf0 <KPrintF>
   11e86:	addq.l #4,sp

	return BR_CONTINUE;
   11e88:	moveq #2,d0
}
   11e8a:	rts

00011e8c <builtIn_makeFastArray>:

builtIn(makeFastArray)
{
   11e8c:	             subq.l #8,sp
	UNUSEDALL
	switch (fun -> stack -> thisVar.varType) {
   11e8e:	             movea.l 16(sp),a0
   11e92:	             movea.l 24(a0),a0
   11e96:	             move.l (a0),d0
   11e98:	             moveq #1,d1
   11e9a:	             cmp.l d0,d1
   11e9c:	      /----- beq.s 11ee4 <builtIn_makeFastArray+0x58>
   11e9e:	      |      moveq #6,d1
   11ea0:	      |      cmp.l d0,d1
   11ea2:	/-----|----- bne.s 11f22 <builtIn_makeFastArray+0x96>
		case SVT_STACK:
		{
			BOOL success = makeFastArrayFromStack (&fun -> reg, fun -> stack -> thisVar.varData.theStack);
   11ea4:	|     |      movea.l 16(sp),a0
   11ea8:	|     |      movea.l 24(a0),a0
   11eac:	|     |      move.l 4(a0),d1
   11eb0:	|     |      moveq #28,d0
   11eb2:	|     |      add.l 16(sp),d0
   11eb6:	|     |      move.l d1,-(sp)
   11eb8:	|     |      move.l d0,-(sp)
   11eba:	|     |      jsr 137b0 <makeFastArrayFromStack>
   11ec0:	|     |      addq.l #8,sp
   11ec2:	|     |      move.w d0,6(sp)
			trimStack (&fun -> stack);
   11ec6:	|     |      moveq #24,d0
   11ec8:	|     |      add.l 16(sp),d0
   11ecc:	|     |      move.l d0,-(sp)
   11ece:	|     |      jsr 14082 <trimStack>
   11ed4:	|     |      addq.l #4,sp
			return success ? BR_CONTINUE : BR_ERROR;
   11ed6:	|     |      tst.w 6(sp)
   11eda:	|     |  /-- beq.s 11ee0 <builtIn_makeFastArray+0x54>
   11edc:	|     |  |   moveq #2,d0
   11ede:	|  /--|--|-- bra.s 11f34 <builtIn_makeFastArray+0xa8>
   11ee0:	|  |  |  \-> moveq #1,d0
   11ee2:	|  +--|----- bra.s 11f34 <builtIn_makeFastArray+0xa8>
		}
			break;

		case SVT_INT:
		{
			int i = fun -> stack -> thisVar.varData.intValue;
   11ee4:	|  |  \----> movea.l 16(sp),a0
   11ee8:	|  |         movea.l 24(a0),a0
   11eec:	|  |         move.l 4(a0),2(sp)
			trimStack (&fun -> stack);
   11ef2:	|  |         moveq #24,d0
   11ef4:	|  |         add.l 16(sp),d0
   11ef8:	|  |         move.l d0,-(sp)
   11efa:	|  |         jsr 14082 <trimStack>
   11f00:	|  |         addq.l #4,sp
			return makeFastArraySize (&fun -> reg, i) ? BR_CONTINUE : BR_ERROR;
   11f02:	|  |         moveq #28,d0
   11f04:	|  |         add.l 16(sp),d0
   11f08:	|  |         move.l 2(sp),-(sp)
   11f0c:	|  |         move.l d0,-(sp)
   11f0e:	|  |         jsr 1381a <makeFastArraySize>
   11f14:	|  |         addq.l #8,sp
   11f16:	|  |         tst.w d0
   11f18:	|  |     /-- beq.s 11f1e <builtIn_makeFastArray+0x92>
   11f1a:	|  |     |   moveq #2,d0
   11f1c:	|  +-----|-- bra.s 11f34 <builtIn_makeFastArray+0xa8>
   11f1e:	|  |     \-> moveq #1,d0
   11f20:	|  +-------- bra.s 11f34 <builtIn_makeFastArray+0xa8>
		}
			break;

		default:
			break;
   11f22:	\--|-------> nop
	}
	KPrintF ("Parameter must be a number or a stack.");
   11f24:	   |         pea 18462 <PutChar+0x1f22>
   11f2a:	   |         jsr 15bf0 <KPrintF>
   11f30:	   |         addq.l #4,sp
	return BR_ERROR;
   11f32:	   |         moveq #1,d0
}
   11f34:	   \-------> addq.l #8,sp
   11f36:	             rts

00011f38 <builtIn_getCharacterScale>:

builtIn(getCharacterScale)
{
   11f38:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11f3a:	          movea.l 16(sp),a0
   11f3e:	          move.l 24(a0),d0
   11f42:	          move.l d0,-(sp)
   11f44:	          pea 7 <_start+0x7>
   11f48:	          move.l sp,d0
   11f4a:	          addq.l #8,d0
   11f4c:	          move.l d0,-(sp)
   11f4e:	          jsr 136fe <getValueType>
   11f54:	          lea 12(sp),sp
   11f58:	          tst.w d0
   11f5a:	      /-- bne.s 11f60 <builtIn_getCharacterScale+0x28>
   11f5c:	      |   moveq #1,d0
   11f5e:	/-----|-- bra.s 11fda <builtIn_getCharacterScale+0xa2>
	trimStack (&fun -> stack);
   11f60:	|     \-> moveq #24,d0
   11f62:	|         add.l 16(sp),d0
   11f66:	|         move.l d0,-(sp)
   11f68:	|         jsr 14082 <trimStack>
   11f6e:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   11f70:	|         move.l (sp),d0
   11f72:	|         move.l d0,-(sp)
   11f74:	|         jsr 961c <findPerson>
   11f7a:	|         addq.l #4,sp
   11f7c:	|         move.l d0,4(sp)
	if (pers) {
   11f80:	|  /----- beq.s 11fc0 <builtIn_getCharacterScale+0x88>
		setVariable (&fun -> reg, SVT_INT, pers -> scale * (FLOAT) 100); 
   11f82:	|  |      movea.l 4(sp),a0
   11f86:	|  |      move.l 32(a0),d0
   11f8a:	|  |      move.l #1120403456,-(sp)
   11f90:	|  |      move.l d0,-(sp)
   11f92:	|  |      jsr 15f5a <__mulsf3>
   11f98:	|  |      addq.l #8,sp
   11f9a:	|  |      move.l d0,-(sp)
   11f9c:	|  |      jsr 15e40 <__fixsfsi>
   11fa2:	|  |      addq.l #4,sp
   11fa4:	|  |      move.l d0,d1
   11fa6:	|  |      moveq #28,d0
   11fa8:	|  |      add.l 16(sp),d0
   11fac:	|  |      move.l d1,-(sp)
   11fae:	|  |      pea 1 <_start+0x1>
   11fb2:	|  |      move.l d0,-(sp)
   11fb4:	|  |      jsr 13ff0 <setVariable>
   11fba:	|  |      lea 12(sp),sp
   11fbe:	|  |  /-- bra.s 11fd8 <builtIn_getCharacterScale+0xa0>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   11fc0:	|  \--|-> moveq #28,d0
   11fc2:	|     |   add.l 16(sp),d0
   11fc6:	|     |   clr.l -(sp)
   11fc8:	|     |   pea 1 <_start+0x1>
   11fcc:	|     |   move.l d0,-(sp)
   11fce:	|     |   jsr 13ff0 <setVariable>
   11fd4:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   11fd8:	|     \-> moveq #2,d0
}
   11fda:	\-------> addq.l #8,sp
   11fdc:	          rts

00011fde <builtIn_getLanguageID>:

builtIn(getLanguageID)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, gameSettings.languageID);
   11fde:	move.l 1b2d6 <gameSettings>,d0
   11fe4:	move.l d0,d1
   11fe6:	moveq #28,d0
   11fe8:	add.l 8(sp),d0
   11fec:	move.l d1,-(sp)
   11fee:	pea 1 <_start+0x1>
   11ff2:	move.l d0,-(sp)
   11ff4:	jsr 13ff0 <setVariable>
   11ffa:	lea 12(sp),sp
	return BR_CONTINUE;
   11ffe:	moveq #2,d0
}
   12000:	rts

00012002 <builtIn__rem_launchWith>:
// Removed function
builtIn(_rem_launchWith)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   12002:	moveq #24,d0
   12004:	add.l 8(sp),d0
   12008:	move.l d0,-(sp)
   1200a:	jsr 14082 <trimStack>
   12010:	addq.l #4,sp
	trimStack (&fun -> stack);
   12012:	moveq #24,d0
   12014:	add.l 8(sp),d0
   12018:	move.l d0,-(sp)
   1201a:	jsr 14082 <trimStack>
   12020:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, FALSE);
   12022:	moveq #28,d0
   12024:	add.l 8(sp),d0
   12028:	clr.l -(sp)
   1202a:	pea 1 <_start+0x1>
   1202e:	move.l d0,-(sp)
   12030:	jsr 13ff0 <setVariable>
   12036:	lea 12(sp),sp

	return BR_CONTINUE;
   1203a:	moveq #2,d0

}
   1203c:	rts

0001203e <builtIn_getFramesPerSecond>:

builtIn(getFramesPerSecond)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, lastFramesPerSecond);
   1203e:	move.l 1ab24 <lastFramesPerSecond>,d1
   12044:	moveq #28,d0
   12046:	add.l 8(sp),d0
   1204a:	move.l d1,-(sp)
   1204c:	pea 1 <_start+0x1>
   12050:	move.l d0,-(sp)
   12052:	jsr 13ff0 <setVariable>
   12058:	lea 12(sp),sp
	return BR_CONTINUE;
   1205c:	moveq #2,d0
}
   1205e:	rts

00012060 <builtIn_showThumbnail>:
	//				deb ("aaaaa is still ", aaaaa);
	delete[] aaaaa;
	//				deb ("Deleted", "aaaaa");
	showThumbnail (file, x, y);
	delete[] file; Todo Amigize this?*/
	return BR_CONTINUE;
   12060:	moveq #2,d0
}
   12062:	rts

00012064 <builtIn_setThumbnailSize>:

builtIn(setThumbnailSize)
{
   12064:	          lea -52(sp),sp
	UNUSEDALL
	if (! getValueType(&thumbHeight, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12068:	          movea.l 60(sp),a0
   1206c:	          move.l 24(a0),d0
   12070:	          move.l d0,-(sp)
   12072:	          pea 1 <_start+0x1>
   12076:	          pea 1b0ba <thumbHeight>
   1207c:	          jsr 136fe <getValueType>
   12082:	          lea 12(sp),sp
   12086:	          tst.w d0
   12088:	      /-- bne.s 12090 <builtIn_setThumbnailSize+0x2c>
   1208a:	      |   moveq #1,d0
   1208c:	/-----|-- bra.w 1214c <builtIn_setThumbnailSize+0xe8>
	trimStack (&fun -> stack);
   12090:	|     \-> moveq #24,d0
   12092:	|         add.l 60(sp),d0
   12096:	|         move.l d0,-(sp)
   12098:	|         jsr 14082 <trimStack>
   1209e:	|         addq.l #4,sp
	if (! getValueType(&thumbWidth, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   120a0:	|         movea.l 60(sp),a0
   120a4:	|         move.l 24(a0),d0
   120a8:	|         move.l d0,-(sp)
   120aa:	|         pea 1 <_start+0x1>
   120ae:	|         pea 1b0b6 <thumbWidth>
   120b4:	|         jsr 136fe <getValueType>
   120ba:	|         lea 12(sp),sp
   120be:	|         tst.w d0
   120c0:	|     /-- bne.s 120c8 <builtIn_setThumbnailSize+0x64>
   120c2:	|     |   moveq #1,d0
   120c4:	+-----|-- bra.w 1214c <builtIn_setThumbnailSize+0xe8>
	trimStack (&fun -> stack);
   120c8:	|     \-> moveq #24,d0
   120ca:	|         add.l 60(sp),d0
   120ce:	|         move.l d0,-(sp)
   120d0:	|         jsr 14082 <trimStack>
   120d6:	|         addq.l #4,sp
	if (thumbWidth < 0 || thumbHeight < 0 || (unsigned int) thumbWidth > winWidth || (unsigned int) thumbHeight > winHeight) {
   120d8:	|         move.l 1b0b6 <thumbWidth>,d0
   120de:	|     /-- bmi.s 1210c <builtIn_setThumbnailSize+0xa8>
   120e0:	|     |   move.l 1b0ba <thumbHeight>,d0
   120e6:	|     +-- bmi.s 1210c <builtIn_setThumbnailSize+0xa8>
   120e8:	|     |   move.l 1b0b6 <thumbWidth>,d0
   120ee:	|     |   move.l d0,d1
   120f0:	|     |   move.l 1b0f6 <winWidth>,d0
   120f6:	|     |   cmp.l d1,d0
   120f8:	|     +-- bcs.s 1210c <builtIn_setThumbnailSize+0xa8>
   120fa:	|     |   move.l 1b0ba <thumbHeight>,d0
   12100:	|     |   move.l d0,d1
   12102:	|     |   move.l 1b0fa <winHeight>,d0
   12108:	|     |   cmp.l d1,d0
   1210a:	|  /--|-- bcc.s 1214a <builtIn_setThumbnailSize+0xe6>
		char buff[50];
		sprintf (buff, "%d x %d", thumbWidth, thumbHeight);
   1210c:	|  |  \-> move.l 1b0ba <thumbHeight>,d1
   12112:	|  |      move.l 1b0b6 <thumbWidth>,d0
   12118:	|  |      move.l d1,-(sp)
   1211a:	|  |      move.l d0,-(sp)
   1211c:	|  |      pea 18489 <PutChar+0x1f49>
   12122:	|  |      lea 14(sp),a0
   12126:	|  |      move.l a0,-(sp)
   12128:	|  |      jsr 12f08 <sprintf>
   1212e:	|  |      lea 16(sp),sp
		KPrintF ("Invalid thumbnail size", buff);
   12132:	|  |      lea 2(sp),a0
   12136:	|  |      move.l a0,-(sp)
   12138:	|  |      pea 18491 <PutChar+0x1f51>
   1213e:	|  |      jsr 15bf0 <KPrintF>
   12144:	|  |      addq.l #8,sp
		return BR_ERROR;
   12146:	|  |      moveq #1,d0
   12148:	+--|----- bra.s 1214c <builtIn_setThumbnailSize+0xe8>
	}
	return BR_CONTINUE;
   1214a:	|  \----> moveq #2,d0
}
   1214c:	\-------> lea 52(sp),sp
   12150:	          rts

00012152 <builtIn_hasFlag>:

builtIn(hasFlag)
{
   12152:	       lea -12(sp),sp
   12156:	       move.l d2,-(sp)
	UNUSEDALL
	int objNum, flagIndex;
	if (! getValueType(&flagIndex, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12158:	       movea.l 24(sp),a0
   1215c:	       move.l 24(a0),d0
   12160:	       move.l d0,-(sp)
   12162:	       pea 1 <_start+0x1>
   12166:	       lea 12(sp),a0
   1216a:	       move.l a0,-(sp)
   1216c:	       jsr 136fe <getValueType>
   12172:	       lea 12(sp),sp
   12176:	       tst.w d0
   12178:	   /-- bne.s 12180 <builtIn_hasFlag+0x2e>
   1217a:	   |   moveq #1,d0
   1217c:	/--|-- bra.w 12210 <builtIn_hasFlag+0xbe>
	trimStack (&fun -> stack);
   12180:	|  \-> moveq #24,d0
   12182:	|      add.l 24(sp),d0
   12186:	|      move.l d0,-(sp)
   12188:	|      jsr 14082 <trimStack>
   1218e:	|      addq.l #4,sp
	if (! getValueType(&objNum, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12190:	|      movea.l 24(sp),a0
   12194:	|      move.l 24(a0),d0
   12198:	|      move.l d0,-(sp)
   1219a:	|      pea 7 <_start+0x7>
   1219e:	|      moveq #16,d0
   121a0:	|      add.l sp,d0
   121a2:	|      move.l d0,-(sp)
   121a4:	|      jsr 136fe <getValueType>
   121aa:	|      lea 12(sp),sp
   121ae:	|      tst.w d0
   121b0:	|  /-- bne.s 121b6 <builtIn_hasFlag+0x64>
   121b2:	|  |   moveq #1,d0
   121b4:	+--|-- bra.s 12210 <builtIn_hasFlag+0xbe>
	trimStack (&fun -> stack);
   121b6:	|  \-> moveq #24,d0
   121b8:	|      add.l 24(sp),d0
   121bc:	|      move.l d0,-(sp)
   121be:	|      jsr 14082 <trimStack>
   121c4:	|      addq.l #4,sp
	struct objectType * objT = findObjectType (objNum);
   121c6:	|      move.l 8(sp),d0
   121ca:	|      move.l d0,-(sp)
   121cc:	|      jsr c4f6 <findObjectType>
   121d2:	|      addq.l #4,sp
   121d4:	|      move.l d0,12(sp)
	if (! objT) return BR_ERROR;
   121d8:	|  /-- bne.s 121de <builtIn_hasFlag+0x8c>
   121da:	|  |   moveq #1,d0
   121dc:	+--|-- bra.s 12210 <builtIn_hasFlag+0xbe>
	setVariable (&fun -> reg, SVT_INT, objT->flags & (1 << flagIndex));
   121de:	|  \-> movea.l 12(sp),a0
   121e2:	|      move.w 36(a0),d0
   121e6:	|      moveq #0,d2
   121e8:	|      move.w d0,d2
   121ea:	|      move.l 4(sp),d1
   121ee:	|      moveq #1,d0
   121f0:	|      lsl.l d1,d0
   121f2:	|      move.l d2,d1
   121f4:	|      and.l d0,d1
   121f6:	|      moveq #28,d0
   121f8:	|      add.l 24(sp),d0
   121fc:	|      move.l d1,-(sp)
   121fe:	|      pea 1 <_start+0x1>
   12202:	|      move.l d0,-(sp)
   12204:	|      jsr 13ff0 <setVariable>
   1220a:	|      lea 12(sp),sp
	return BR_CONTINUE;
   1220e:	|      moveq #2,d0
}
   12210:	\----> move.l (sp)+,d2
   12212:	       lea 12(sp),sp
   12216:	       rts

00012218 <builtIn_snapshotGrab>:

builtIn(snapshotGrab)
{
	UNUSEDALL
	return snapshot () ? BR_CONTINUE : BR_ERROR;
   12218:	       jsr c4e4 <snapshot>
   1221e:	       tst.w d0
   12220:	/----- beq.s 12226 <builtIn_snapshotGrab+0xe>
   12222:	|      moveq #2,d0
   12224:	|  /-- bra.s 12228 <builtIn_snapshotGrab+0x10>
   12226:	\--|-> moveq #1,d0
}
   12228:	   \-> rts

0001222a <builtIn_snapshotClear>:

builtIn(snapshotClear)
{
	UNUSEDALL
	nosnapshot ();
   1222a:	jsr c390 <nosnapshot>
	return BR_CONTINUE;
   12230:	moveq #2,d0
}
   12232:	rts

00012234 <builtIn_bodgeFilenames>:

builtIn(bodgeFilenames)
{
   12234:	subq.l #4,sp
	UNUSEDALL
	BOOL lastValue = allowAnyFilename;
   12236:	move.w 1aa00 <allowAnyFilename>,2(sp)
	allowAnyFilename = getBoolean(&(fun -> stack -> thisVar));
   1223e:	movea.l 12(sp),a0
   12242:	move.l 24(a0),d0
   12246:	move.l d0,-(sp)
   12248:	jsr 13c3e <getBoolean>
   1224e:	addq.l #4,sp
   12250:	move.w d0,1aa00 <allowAnyFilename>
	trimStack (&fun -> stack);
   12256:	moveq #24,d0
   12258:	add.l 12(sp),d0
   1225c:	move.l d0,-(sp)
   1225e:	jsr 14082 <trimStack>
   12264:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, lastValue);
   12266:	movea.w 2(sp),a0
   1226a:	moveq #28,d0
   1226c:	add.l 12(sp),d0
   12270:	move.l a0,-(sp)
   12272:	pea 1 <_start+0x1>
   12276:	move.l d0,-(sp)
   12278:	jsr 13ff0 <setVariable>
   1227e:	lea 12(sp),sp
	return BR_CONTINUE;
   12282:	moveq #2,d0
}
   12284:	addq.l #4,sp
   12286:	rts

00012288 <builtIn__rem_registryGetString>:

// Deprecated - does nothing.
builtIn(_rem_registryGetString)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   12288:	moveq #24,d0
   1228a:	add.l 8(sp),d0
   1228e:	move.l d0,-(sp)
   12290:	jsr 14082 <trimStack>
   12296:	addq.l #4,sp
	trimStack (&fun -> stack);
   12298:	moveq #24,d0
   1229a:	add.l 8(sp),d0
   1229e:	move.l d0,-(sp)
   122a0:	jsr 14082 <trimStack>
   122a6:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 0);
   122a8:	moveq #28,d0
   122aa:	add.l 8(sp),d0
   122ae:	clr.l -(sp)
   122b0:	pea 1 <_start+0x1>
   122b4:	move.l d0,-(sp)
   122b6:	jsr 13ff0 <setVariable>
   122bc:	lea 12(sp),sp

	return BR_CONTINUE;
   122c0:	moveq #2,d0
}
   122c2:	rts

000122c4 <builtIn_quitWithFatalError>:

builtIn(quitWithFatalError)
{
   122c4:	subq.l #4,sp
	UNUSEDALL
	char * mess = getTextFromAnyVar(&(fun -> stack -> thisVar));
   122c6:	movea.l 12(sp),a0
   122ca:	move.l 24(a0),d0
   122ce:	move.l d0,-(sp)
   122d0:	jsr 13cd4 <getTextFromAnyVar>
   122d6:	addq.l #4,sp
   122d8:	move.l d0,(sp)
	trimStack (&fun -> stack);
   122da:	moveq #24,d0
   122dc:	add.l 12(sp),d0
   122e0:	move.l d0,-(sp)
   122e2:	jsr 14082 <trimStack>
   122e8:	addq.l #4,sp
	KPrintF (mess);
   122ea:	move.l (sp),-(sp)
   122ec:	jsr 15bf0 <KPrintF>
   122f2:	addq.l #4,sp
	return BR_ERROR;
   122f4:	moveq #1,d0
}
   122f6:	addq.l #4,sp
   122f8:	rts

000122fa <builtIn__rem_setCharacterAA>:

builtIn(_rem_setCharacterAA)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   122fa:	moveq #24,d0
   122fc:	add.l 8(sp),d0
   12300:	move.l d0,-(sp)
   12302:	jsr 14082 <trimStack>
   12308:	addq.l #4,sp
	trimStack (&fun -> stack);
   1230a:	moveq #24,d0
   1230c:	add.l 8(sp),d0
   12310:	move.l d0,-(sp)
   12312:	jsr 14082 <trimStack>
   12318:	addq.l #4,sp
	trimStack (&fun -> stack);
   1231a:	moveq #24,d0
   1231c:	add.l 8(sp),d0
   12320:	move.l d0,-(sp)
   12322:	jsr 14082 <trimStack>
   12328:	addq.l #4,sp
	trimStack (&fun -> stack);
   1232a:	moveq #24,d0
   1232c:	add.l 8(sp),d0
   12330:	move.l d0,-(sp)
   12332:	jsr 14082 <trimStack>
   12338:	addq.l #4,sp

	return BR_CONTINUE;
   1233a:	moveq #2,d0
}
   1233c:	rts

0001233e <builtIn__rem_setMaximumAA>:

builtIn(_rem_setMaximumAA)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   1233e:	moveq #24,d0
   12340:	add.l 8(sp),d0
   12344:	move.l d0,-(sp)
   12346:	jsr 14082 <trimStack>
   1234c:	addq.l #4,sp
	trimStack (&fun -> stack);
   1234e:	moveq #24,d0
   12350:	add.l 8(sp),d0
   12354:	move.l d0,-(sp)
   12356:	jsr 14082 <trimStack>
   1235c:	addq.l #4,sp
	trimStack (&fun -> stack);
   1235e:	moveq #24,d0
   12360:	add.l 8(sp),d0
   12364:	move.l d0,-(sp)
   12366:	jsr 14082 <trimStack>
   1236c:	addq.l #4,sp

	return BR_CONTINUE;
   1236e:	moveq #2,d0

}
   12370:	rts

00012372 <builtIn_setBackgroundEffect>:

builtIn(setBackgroundEffect)
{
   12372:	subq.l #4,sp
	UNUSEDALL
	BOOL done = TRUE;
   12374:	move.w #1,2(sp)
	//BOOL done = blur_createSettings(numParams, fun->stack); Amiga Todo: Amigize?
	setVariable (&fun -> reg, SVT_INT, done ? 1 : 0);
   1237a:	sne d0
   1237c:	neg.b d0
   1237e:	moveq #0,d1
   12380:	move.b d0,d1
   12382:	moveq #28,d0
   12384:	add.l 12(sp),d0
   12388:	move.l d1,-(sp)
   1238a:	pea 1 <_start+0x1>
   1238e:	move.l d0,-(sp)
   12390:	jsr 13ff0 <setVariable>
   12396:	lea 12(sp),sp
	return BR_CONTINUE;
   1239a:	moveq #2,d0
}
   1239c:	addq.l #4,sp
   1239e:	rts

000123a0 <builtIn_doBackgroundEffect>:

builtIn(doBackgroundEffect)
{
   123a0:	subq.l #4,sp
	UNUSEDALL
	//BOOL done = blurScreen ();
	BOOL done = TRUE;
   123a2:	move.w #1,2(sp)
	KPrintF("doBackgroundEffect: Function not implemented on Amiga");
   123a8:	pea 184a8 <PutChar+0x1f68>
   123ae:	jsr 15bf0 <KPrintF>
   123b4:	addq.l #4,sp
	//Amiga Todo: Amigize this
	setVariable (&fun -> reg, SVT_INT, done ? 1 : 0);
   123b6:	tst.w 2(sp)
   123ba:	sne d0
   123bc:	neg.b d0
   123be:	moveq #0,d1
   123c0:	move.b d0,d1
   123c2:	moveq #28,d0
   123c4:	add.l 12(sp),d0
   123c8:	move.l d1,-(sp)
   123ca:	pea 1 <_start+0x1>
   123ce:	move.l d0,-(sp)
   123d0:	jsr 13ff0 <setVariable>
   123d6:	lea 12(sp),sp
	return BR_CONTINUE;
   123da:	moveq #2,d0
}
   123dc:	addq.l #4,sp
   123de:	rts

000123e0 <callBuiltIn>:
#undef FUNC

#define NUM_FUNCS			(sizeof (builtInFunctionArray) / sizeof (builtInFunctionArray[0]))


enum builtReturn callBuiltIn (int whichFunc, int numParams, struct loadedFunction * fun) {
   123e0:	             lea -100(sp),sp
   // fprintf (stderr, "Calling function %d: %s\n", whichFunc, builtInFunctionNames[whichFunc]);    fflush (stderr);

	if ((unsigned int)whichFunc < NUM_FUNCS) {
   123e4:	             move.l 104(sp),d0
   123e8:	             cmpi.l #166,d0
   123ee:	/----------- bhi.w 124d0 <callBuiltIn+0xf0>
		if (paramNum[whichFunc] != -1) {
   123f2:	|            move.l 104(sp),d0
   123f6:	|            add.l d0,d0
   123f8:	|            movea.l d0,a1
   123fa:	|            adda.l d0,a1
   123fc:	|            lea 1ab46 <paramNum>,a0
   12402:	|            move.l (0,a1,a0.l),d0
   12406:	|            moveq #-1,d1
   12408:	|            cmp.l d0,d1
   1240a:	|  /-------- beq.w 12498 <callBuiltIn+0xb8>
			if (paramNum[whichFunc] != numParams) {
   1240e:	|  |         move.l 104(sp),d0
   12412:	|  |         add.l d0,d0
   12414:	|  |         movea.l d0,a1
   12416:	|  |         adda.l d0,a1
   12418:	|  |         lea 1ab46 <paramNum>,a0
   1241e:	|  |         move.l (0,a1,a0.l),d0
   12422:	|  |         cmp.l 108(sp),d0
   12426:	|  +-------- beq.s 12498 <callBuiltIn+0xb8>
				char buff[100];
				sprintf (buff, "Built in function must have %i parameter%s",
						 paramNum[whichFunc],
						 (paramNum[whichFunc] == 1) ? "" : "s");
   12428:	|  |         move.l 104(sp),d0
   1242c:	|  |         add.l d0,d0
   1242e:	|  |         movea.l d0,a1
   12430:	|  |         adda.l d0,a1
   12432:	|  |         lea 1ab46 <paramNum>,a0
   12438:	|  |         move.l (0,a1,a0.l),d0
				sprintf (buff, "Built in function must have %i parameter%s",
   1243c:	|  |         moveq #1,d1
   1243e:	|  |         cmp.l d0,d1
   12440:	|  |  /----- bne.s 1244a <callBuiltIn+0x6a>
   12442:	|  |  |      move.l #94511,d0
   12448:	|  |  |  /-- bra.s 12450 <callBuiltIn+0x70>
   1244a:	|  |  \--|-> move.l #99550,d0
   12450:	|  |     \-> move.l 104(sp),d1
   12454:	|  |         add.l d1,d1
   12456:	|  |         movea.l d1,a1
   12458:	|  |         adda.l d1,a1
   1245a:	|  |         lea 1ab46 <paramNum>,a0
   12460:	|  |         move.l (0,a1,a0.l),d1
   12464:	|  |         move.l d0,-(sp)
   12466:	|  |         move.l d1,-(sp)
   12468:	|  |         pea 184e0 <PutChar+0x1fa0>
   1246e:	|  |         lea 12(sp),a0
   12472:	|  |         move.l a0,-(sp)
   12474:	|  |         jsr 12f08 <sprintf>
   1247a:	|  |         lea 16(sp),sp

				KPrintF(copyString (buff));
   1247e:	|  |         movea.l sp,a0
   12480:	|  |         move.l a0,-(sp)
   12482:	|  |         jsr b8 <copyString>
   12488:	|  |         addq.l #4,sp
   1248a:	|  |         move.l d0,-(sp)
   1248c:	|  |         jsr 15bf0 <KPrintF>
   12492:	|  |         addq.l #4,sp
				return BR_ERROR;
   12494:	|  |         moveq #1,d0
   12496:	|  |     /-- bra.s 124e0 <callBuiltIn+0x100>
			}
		}

		if (builtInFunctionArray[whichFunc].func)
   12498:	|  \-----|-> move.l 104(sp),d0
   1249c:	|        |   add.l d0,d0
   1249e:	|        |   movea.l d0,a1
   124a0:	|        |   adda.l d0,a1
   124a2:	|        |   lea 1ade2 <builtInFunctionArray>,a0
   124a8:	|        |   move.l (0,a1,a0.l),d0
   124ac:	+--------|-- beq.s 124d0 <callBuiltIn+0xf0>
		{
			//fprintf (stderr, "Calling %i: %s\n", whichFunc, builtInFunctionNames[whichFunc]);
			return builtInFunctionArray[whichFunc].func (numParams, fun);
   124ae:	|        |   move.l 104(sp),d0
   124b2:	|        |   add.l d0,d0
   124b4:	|        |   movea.l d0,a1
   124b6:	|        |   adda.l d0,a1
   124b8:	|        |   lea 1ade2 <builtInFunctionArray>,a0
   124be:	|        |   movea.l (0,a1,a0.l),a0
   124c2:	|        |   move.l 112(sp),-(sp)
   124c6:	|        |   move.l 112(sp),-(sp)
   124ca:	|        |   jsr (a0)
   124cc:	|        |   addq.l #8,sp
   124ce:	|        +-- bra.s 124e0 <callBuiltIn+0x100>
		}
	}

	KPrintF("Unknown / unimplemented built-in function.");
   124d0:	\--------|-> pea 1850b <PutChar+0x1fcb>
   124d6:	         |   jsr 15bf0 <KPrintF>
   124dc:	         |   addq.l #4,sp
	return BR_ERROR;
   124de:	         |   moveq #1,d0
}
   124e0:	         \-> lea 100(sp),sp
   124e4:	             rts

000124e6 <getLanguageForFileB>:
int *languageTable;
char **languageName;
struct settingsStruct gameSettings;

int getLanguageForFileB ()
{
   124e6:	          subq.l #8,sp
	int indexNum = -1;
   124e8:	          moveq #-1,d0
   124ea:	          move.l d0,4(sp)

	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   124ee:	          clr.l (sp)
   124f0:	   /----- bra.s 12516 <getLanguageForFileB+0x30>
		if ((unsigned int) languageTable[i] == gameSettings.languageID) indexNum = i;
   124f2:	/--|----> move.l 1b2ce <languageTable>,d1
   124f8:	|  |      move.l (sp),d0
   124fa:	|  |      add.l d0,d0
   124fc:	|  |      add.l d0,d0
   124fe:	|  |      movea.l d1,a0
   12500:	|  |      adda.l d0,a0
   12502:	|  |      move.l (a0),d0
   12504:	|  |      move.l d0,d1
   12506:	|  |      move.l 1b2d6 <gameSettings>,d0
   1250c:	|  |      cmp.l d1,d0
   1250e:	|  |  /-- bne.s 12514 <getLanguageForFileB+0x2e>
   12510:	|  |  |   move.l (sp),4(sp)
	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   12514:	|  |  \-> addq.l #1,(sp)
   12516:	|  \----> move.l 1b2da <gameSettings+0x4>,d0
   1251c:	|         cmp.l (sp),d0
   1251e:	\-------- bcc.s 124f2 <getLanguageForFileB+0xc>
	}

	return indexNum;
   12520:	          move.l 4(sp),d0
}
   12524:	          addq.l #8,sp
   12526:	          rts

00012528 <getPrefsFilename>:

char * getPrefsFilename (char * filename) {
   12528:	          lea -20(sp),sp
   1252c:	          move.l a6,-(sp)
	// Yes, this trashes the original string, but
	// we also free it at the end (warning!)...

	int n, i;

	n = strlen (filename);
   1252e:	          move.l 28(sp),-(sp)
   12532:	          jsr 12bea <strlen>
   12538:	          addq.l #4,sp
   1253a:	          move.l d0,12(sp)


	if (n > 4 && filename[n-4] == '.') {
   1253e:	          moveq #4,d0
   12540:	          cmp.l 12(sp),d0
   12544:	      /-- bge.s 12568 <getPrefsFilename+0x40>
   12546:	      |   move.l 12(sp),d0
   1254a:	      |   subq.l #4,d0
   1254c:	      |   movea.l 28(sp),a0
   12550:	      |   adda.l d0,a0
   12552:	      |   move.b (a0),d0
   12554:	      |   cmpi.b #46,d0
   12558:	      +-- bne.s 12568 <getPrefsFilename+0x40>
		filename[n-4] = 0;
   1255a:	      |   move.l 12(sp),d0
   1255e:	      |   subq.l #4,d0
   12560:	      |   movea.l 28(sp),a0
   12564:	      |   adda.l d0,a0
   12566:	      |   clr.b (a0)
	}

	char * f = filename;
   12568:	      \-> move.l 28(sp),16(sp)
	for (i = 0; i<n; i++) {
   1256e:	          clr.l 20(sp)
   12572:	   /----- bra.s 1259a <getPrefsFilename+0x72>
		if (filename[i] == '/') f = filename + i + 1;
   12574:	/--|----> move.l 20(sp),d0
   12578:	|  |      movea.l 28(sp),a0
   1257c:	|  |      adda.l d0,a0
   1257e:	|  |      move.b (a0),d0
   12580:	|  |      cmpi.b #47,d0
   12584:	|  |  /-- bne.s 12596 <getPrefsFilename+0x6e>
   12586:	|  |  |   move.l 20(sp),d0
   1258a:	|  |  |   addq.l #1,d0
   1258c:	|  |  |   move.l 28(sp),d1
   12590:	|  |  |   add.l d0,d1
   12592:	|  |  |   move.l d1,16(sp)
	for (i = 0; i<n; i++) {
   12596:	|  |  \-> addq.l #1,20(sp)
   1259a:	|  \----> move.l 20(sp),d0
   1259e:	|         cmp.l 12(sp),d0
   125a2:	\-------- blt.s 12574 <getPrefsFilename+0x4c>
	}

	char * joined = joinStrings (f, ".ini");
   125a4:	          pea 18536 <PutChar+0x1ff6>
   125aa:	          move.l 20(sp),-(sp)
   125ae:	          jsr 12c2a <joinStrings>
   125b4:	          addq.l #8,sp
   125b6:	          move.l d0,8(sp)

	FreeVec(filename);
   125ba:	          move.l 28(sp),4(sp)
   125c0:	          move.l 1b1a2 <SysBase>,d0
   125c6:	          movea.l d0,a6
   125c8:	          movea.l 4(sp),a1
   125cc:	          jsr -690(a6)
	filename = NULL;
   125d0:	          clr.l 28(sp)
	return joined;
   125d4:	          move.l 8(sp),d0
}
   125d8:	          movea.l (sp)+,a6
   125da:	          lea 20(sp),sp
   125de:	          rts

000125e0 <makeLanguageTable>:

void makeLanguageTable (BPTR table)
{
   125e0:	             lea -28(sp),sp
   125e4:	             move.l a6,-(sp)
   125e6:	             move.l a2,-(sp)
	languageTable = AllocVec(gameSettings.numLanguages + 1,MEMF_ANY);
   125e8:	             move.l 1b2da <gameSettings+0x4>,d0
   125ee:	             move.l d0,d1
   125f0:	             addq.l #1,d1
   125f2:	             move.l d1,28(sp)
   125f6:	             clr.l 24(sp)
   125fa:	             move.l 1b1a2 <SysBase>,d0
   12600:	             movea.l d0,a6
   12602:	             move.l 28(sp),d0
   12606:	             move.l 24(sp),d1
   1260a:	             jsr -684(a6)
   1260e:	             move.l d0,20(sp)
   12612:	             move.l 20(sp),d0
   12616:	             move.l d0,1b2ce <languageTable>
    if( languageTable == 0) {
   1261c:	             move.l 1b2ce <languageTable>,d0
   12622:	         /-- bne.s 12632 <makeLanguageTable+0x52>
        KPrintF("makeLanguageTable: Cannot Alloc Mem for languageTable");
   12624:	         |   pea 1853b <PutChar+0x1ffb>
   1262a:	         |   jsr 15bf0 <KPrintF>
   12630:	         |   addq.l #4,sp
    }

	languageName = AllocVec(gameSettings.numLanguages + 1,MEMF_ANY);
   12632:	         \-> move.l 1b2da <gameSettings+0x4>,d0
   12638:	             move.l d0,d1
   1263a:	             addq.l #1,d1
   1263c:	             move.l d1,16(sp)
   12640:	             clr.l 12(sp)
   12644:	             move.l 1b1a2 <SysBase>,d0
   1264a:	             movea.l d0,a6
   1264c:	             move.l 16(sp),d0
   12650:	             move.l 12(sp),d1
   12654:	             jsr -684(a6)
   12658:	             move.l d0,8(sp)
   1265c:	             move.l 8(sp),d0
   12660:	             move.l d0,1b2d2 <languageName>
	if( languageName == 0) {
   12666:	             move.l 1b2d2 <languageName>,d0
   1266c:	         /-- bne.s 1267c <makeLanguageTable+0x9c>
        KPrintF("makeLanguageName: Cannot Alloc Mem for languageName");
   1266e:	         |   pea 18571 <PutChar+0x2031>
   12674:	         |   jsr 15bf0 <KPrintF>
   1267a:	         |   addq.l #4,sp
    }

	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   1267c:	         \-> clr.l 32(sp)
   12680:	   /-------- bra.s 126f8 <makeLanguageTable+0x118>
		languageTable[i] = i ? get2bytes (table) : 0;
   12682:	/--|-------> tst.l 32(sp)
   12686:	|  |  /----- beq.s 12696 <makeLanguageTable+0xb6>
   12688:	|  |  |      move.l 40(sp),-(sp)
   1268c:	|  |  |      jsr 6bc <get2bytes>
   12692:	|  |  |      addq.l #4,sp
   12694:	|  |  |  /-- bra.s 12698 <makeLanguageTable+0xb8>
   12696:	|  |  \--|-> moveq #0,d0
   12698:	|  |     \-> movea.l 1b2ce <languageTable>,a0
   1269e:	|  |         move.l 32(sp),d1
   126a2:	|  |         add.l d1,d1
   126a4:	|  |         add.l d1,d1
   126a6:	|  |         adda.l d1,a0
   126a8:	|  |         move.l d0,(a0)
		languageName[i] = 0;
   126aa:	|  |         move.l 1b2d2 <languageName>,d1
   126b0:	|  |         move.l 32(sp),d0
   126b4:	|  |         add.l d0,d0
   126b6:	|  |         add.l d0,d0
   126b8:	|  |         movea.l d1,a0
   126ba:	|  |         adda.l d0,a0
   126bc:	|  |         clr.l (a0)
		if (gameVersion >= VERSION(2,0)) {
   126be:	|  |         move.l 1b14c <gameVersion>,d0
   126c4:	|  |         cmpi.l #511,d0
   126ca:	|  |     /-- ble.s 126f4 <makeLanguageTable+0x114>
			if (gameSettings.numLanguages)
   126cc:	|  |     |   move.l 1b2da <gameSettings+0x4>,d0
   126d2:	|  |     +-- beq.s 126f4 <makeLanguageTable+0x114>
				languageName[i] = readString (table);
   126d4:	|  |     |   move.l 1b2d2 <languageName>,d1
   126da:	|  |     |   move.l 32(sp),d0
   126de:	|  |     |   add.l d0,d0
   126e0:	|  |     |   add.l d0,d0
   126e2:	|  |     |   movea.l d1,a2
   126e4:	|  |     |   adda.l d0,a2
   126e6:	|  |     |   move.l 40(sp),-(sp)
   126ea:	|  |     |   jsr b02 <readString>
   126f0:	|  |     |   addq.l #4,sp
   126f2:	|  |     |   move.l d0,(a2)
	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   126f4:	|  |     \-> addq.l #1,32(sp)
   126f8:	|  \-------> move.l 1b2da <gameSettings+0x4>,d0
   126fe:	|            cmp.l 32(sp),d0
   12702:	\----------- bcc.w 12682 <makeLanguageTable+0xa2>
		}
	}
}
   12706:	             nop
   12708:	             nop
   1270a:	             movea.l (sp)+,a2
   1270c:	             movea.l (sp)+,a6
   1270e:	             lea 28(sp),sp
   12712:	             rts

00012714 <readIniFile>:

void readIniFile (char * filename) {
   12714:	                      lea -564(sp),sp
   12718:	                      move.l a6,-(sp)
   1271a:	                      move.l d2,-(sp)
	char * langName = getPrefsFilename (copyString (filename));
   1271c:	                      move.l 576(sp),-(sp)
   12720:	                      jsr b8 <copyString>
   12726:	                      addq.l #4,sp
   12728:	                      move.l d0,-(sp)
   1272a:	                      jsr 12528 <getPrefsFilename>
   12730:	                      addq.l #4,sp
   12732:	                      move.l d0,562(sp)

	BPTR fp = Open(langName,MODE_OLDFILE);	
   12736:	                      move.l 562(sp),558(sp)
   1273c:	                      move.l #1005,554(sp)
   12744:	                      move.l 1b1aa <DOSBase>,d0
   1274a:	                      movea.l d0,a6
   1274c:	                      move.l 558(sp),d1
   12750:	                      move.l 554(sp),d2
   12754:	                      jsr -30(a6)
   12758:	                      move.l d0,550(sp)
   1275c:	                      move.l 550(sp),d0
   12760:	                      move.l d0,546(sp)

	gameSettings.languageID = 0;
   12764:	                      clr.l 1b2d6 <gameSettings>
	gameSettings.userFullScreen = TRUE; //Always fullscreen on AMIGA
   1276a:	                      move.w #1,1b2de <gameSettings+0x8>
	gameSettings.refreshRate = 0;
   12772:	                      clr.l 1b2e0 <gameSettings+0xa>
	gameSettings.antiAlias = 1;
   12778:	                      moveq #1,d0
   1277a:	                      move.l d0,1b2e4 <gameSettings+0xe>
	gameSettings.fixedPixels = FALSE;
   12780:	                      clr.w 1b2e8 <gameSettings+0x12>
	gameSettings.noStartWindow = FALSE;
   12786:	                      clr.w 1b2ea <gameSettings+0x14>
	gameSettings.debugMode = FALSE;
   1278c:	                      clr.w 1b2ec <gameSettings+0x16>

	FreeVec(langName);
   12792:	                      move.l 562(sp),542(sp)
   12798:	                      move.l 1b1a2 <SysBase>,d0
   1279e:	                      movea.l d0,a6
   127a0:	                      movea.l 542(sp),a1
   127a4:	                      jsr -690(a6)
	langName = NULL;
   127a8:	                      clr.l 562(sp)

	if (fp) {
   127ac:	                      tst.l 546(sp)
   127b0:	/-------------------- beq.w 12a8e <readIniFile+0x37a>
		char lineSoFar[257] = "";
   127b4:	|                     move.l sp,d0
   127b6:	|                     addi.l #265,d0
   127bc:	|                     move.l #257,d1
   127c2:	|                     move.l d1,-(sp)
   127c4:	|                     clr.l -(sp)
   127c6:	|                     move.l d0,-(sp)
   127c8:	|                     jsr 15b74 <memset>
   127ce:	|                     lea 12(sp),sp
		char secondSoFar[257] = "";
   127d2:	|                     move.l sp,d0
   127d4:	|                     addq.l #8,d0
   127d6:	|                     move.l #257,d1
   127dc:	|                     move.l d1,-(sp)
   127de:	|                     clr.l -(sp)
   127e0:	|                     move.l d0,-(sp)
   127e2:	|                     jsr 15b74 <memset>
   127e8:	|                     lea 12(sp),sp
		unsigned char here = 0;
   127ec:	|                     clr.b 571(sp)
		char readChar = ' ';
   127f0:	|                     move.b #32,570(sp)
		BOOL keepGoing = TRUE;
   127f6:	|                     move.w #1,568(sp)
		BOOL doingSecond = FALSE;
   127fc:	|                     clr.w 566(sp)
		LONG tmp = 0;
   12800:	|                     clr.l 538(sp)

		do {

			tmp = FGetC (fp);
   12804:	|  /----------------> move.l 546(sp),534(sp)
   1280a:	|  |                  move.l 1b1aa <DOSBase>,d0
   12810:	|  |                  movea.l d0,a6
   12812:	|  |                  move.l 534(sp),d1
   12816:	|  |                  jsr -306(a6)
   1281a:	|  |                  move.l d0,530(sp)
   1281e:	|  |                  move.l 530(sp),d0
   12822:	|  |                  move.l d0,538(sp)
			if (tmp == - 1) {
   12826:	|  |                  moveq #-1,d1
   12828:	|  |                  cmp.l 538(sp),d1
   1282c:	|  |           /----- bne.s 1283a <readIniFile+0x126>
				readChar = '\n';
   1282e:	|  |           |      move.b #10,570(sp)
				keepGoing = FALSE;
   12834:	|  |           |      clr.w 568(sp)
   12838:	|  |           |  /-- bra.s 12840 <readIniFile+0x12c>
			} else {
				readChar = (char) tmp;
   1283a:	|  |           \--|-> move.b 541(sp),570(sp)
			}

			switch (readChar) {
   12840:	|  |              \-> move.b 570(sp),d0
   12844:	|  |                  ext.w d0
   12846:	|  |                  movea.w d0,a0
   12848:	|  |                  moveq #61,d0
   1284a:	|  |                  cmp.l a0,d0
   1284c:	|  |     /----------- beq.w 129f6 <readIniFile+0x2e2>
   12850:	|  |     |            moveq #61,d1
   12852:	|  |     |            cmp.l a0,d1
   12854:	|  |  /--|----------- blt.w 12a02 <readIniFile+0x2ee>
   12858:	|  |  |  |            moveq #10,d0
   1285a:	|  |  |  |            cmp.l a0,d0
   1285c:	|  |  |  |        /-- beq.s 12866 <readIniFile+0x152>
   1285e:	|  |  |  |        |   moveq #13,d1
   12860:	|  |  |  |        |   cmp.l a0,d1
   12862:	|  |  +--|--------|-- bne.w 12a02 <readIniFile+0x2ee>
				case '\n':
				case '\r':
				if (doingSecond) {
   12866:	|  |  |  |        \-> tst.w 566(sp)
   1286a:	|  |  |  |     /----- beq.w 129e4 <readIniFile+0x2d0>
					if (strcmp (lineSoFar, "LANGUAGE") == 0)
   1286e:	|  |  |  |     |      pea 185a5 <PutChar+0x2065>
   12874:	|  |  |  |     |      move.l sp,d0
   12876:	|  |  |  |     |      addi.l #269,d0
   1287c:	|  |  |  |     |      move.l d0,-(sp)
   1287e:	|  |  |  |     |      jsr 12baa <strcmp>
   12884:	|  |  |  |     |      addq.l #8,sp
   12886:	|  |  |  |     |      tst.l d0
   12888:	|  |  |  |     |  /-- bne.s 128a2 <readIniFile+0x18e>
					{
						gameSettings.languageID = stringToInt (secondSoFar);
   1288a:	|  |  |  |     |  |   move.l sp,d0
   1288c:	|  |  |  |     |  |   addq.l #8,d0
   1288e:	|  |  |  |     |  |   move.l d0,-(sp)
   12890:	|  |  |  |     |  |   jsr 12a9a <stringToInt>
   12896:	|  |  |  |     |  |   addq.l #4,sp
   12898:	|  |  |  |     |  |   move.l d0,1b2d6 <gameSettings>
   1289e:	|  |  |  |     +--|-- bra.w 129e4 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "WINDOW") == 0)
   128a2:	|  |  |  |     |  \-> pea 185ae <PutChar+0x206e>
   128a8:	|  |  |  |     |      move.l sp,d0
   128aa:	|  |  |  |     |      addi.l #269,d0
   128b0:	|  |  |  |     |      move.l d0,-(sp)
   128b2:	|  |  |  |     |      jsr 12baa <strcmp>
   128b8:	|  |  |  |     |      addq.l #8,sp
   128ba:	|  |  |  |     |      tst.l d0
   128bc:	|  |  |  |     |  /-- bne.s 128e2 <readIniFile+0x1ce>
					{
						gameSettings.userFullScreen = ! stringToInt (secondSoFar);
   128be:	|  |  |  |     |  |   move.l sp,d0
   128c0:	|  |  |  |     |  |   addq.l #8,d0
   128c2:	|  |  |  |     |  |   move.l d0,-(sp)
   128c4:	|  |  |  |     |  |   jsr 12a9a <stringToInt>
   128ca:	|  |  |  |     |  |   addq.l #4,sp
   128cc:	|  |  |  |     |  |   tst.l d0
   128ce:	|  |  |  |     |  |   seq d0
   128d0:	|  |  |  |     |  |   neg.b d0
   128d2:	|  |  |  |     |  |   move.b d0,d0
   128d4:	|  |  |  |     |  |   andi.w #255,d0
   128d8:	|  |  |  |     |  |   move.w d0,1b2de <gameSettings+0x8>
   128de:	|  |  |  |     +--|-- bra.w 129e4 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "REFRESH") == 0)
   128e2:	|  |  |  |     |  \-> pea 185b5 <PutChar+0x2075>
   128e8:	|  |  |  |     |      move.l sp,d0
   128ea:	|  |  |  |     |      addi.l #269,d0
   128f0:	|  |  |  |     |      move.l d0,-(sp)
   128f2:	|  |  |  |     |      jsr 12baa <strcmp>
   128f8:	|  |  |  |     |      addq.l #8,sp
   128fa:	|  |  |  |     |      tst.l d0
   128fc:	|  |  |  |     |  /-- bne.s 12916 <readIniFile+0x202>
					{
						gameSettings.refreshRate = stringToInt (secondSoFar);
   128fe:	|  |  |  |     |  |   move.l sp,d0
   12900:	|  |  |  |     |  |   addq.l #8,d0
   12902:	|  |  |  |     |  |   move.l d0,-(sp)
   12904:	|  |  |  |     |  |   jsr 12a9a <stringToInt>
   1290a:	|  |  |  |     |  |   addq.l #4,sp
   1290c:	|  |  |  |     |  |   move.l d0,1b2e0 <gameSettings+0xa>
   12912:	|  |  |  |     +--|-- bra.w 129e4 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "ANTIALIAS") == 0)
   12916:	|  |  |  |     |  \-> pea 185bd <PutChar+0x207d>
   1291c:	|  |  |  |     |      move.l sp,d0
   1291e:	|  |  |  |     |      addi.l #269,d0
   12924:	|  |  |  |     |      move.l d0,-(sp)
   12926:	|  |  |  |     |      jsr 12baa <strcmp>
   1292c:	|  |  |  |     |      addq.l #8,sp
   1292e:	|  |  |  |     |      tst.l d0
   12930:	|  |  |  |     |  /-- bne.s 1294a <readIniFile+0x236>
					{
						gameSettings.antiAlias = stringToInt (secondSoFar);
   12932:	|  |  |  |     |  |   move.l sp,d0
   12934:	|  |  |  |     |  |   addq.l #8,d0
   12936:	|  |  |  |     |  |   move.l d0,-(sp)
   12938:	|  |  |  |     |  |   jsr 12a9a <stringToInt>
   1293e:	|  |  |  |     |  |   addq.l #4,sp
   12940:	|  |  |  |     |  |   move.l d0,1b2e4 <gameSettings+0xe>
   12946:	|  |  |  |     +--|-- bra.w 129e4 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "FIXEDPIXELS") == 0)
   1294a:	|  |  |  |     |  \-> pea 185c7 <PutChar+0x2087>
   12950:	|  |  |  |     |      move.l sp,d0
   12952:	|  |  |  |     |      addi.l #269,d0
   12958:	|  |  |  |     |      move.l d0,-(sp)
   1295a:	|  |  |  |     |      jsr 12baa <strcmp>
   12960:	|  |  |  |     |      addq.l #8,sp
   12962:	|  |  |  |     |      tst.l d0
   12964:	|  |  |  |     |  /-- bne.s 1297e <readIniFile+0x26a>
					{
						gameSettings.fixedPixels = stringToInt (secondSoFar);
   12966:	|  |  |  |     |  |   move.l sp,d0
   12968:	|  |  |  |     |  |   addq.l #8,d0
   1296a:	|  |  |  |     |  |   move.l d0,-(sp)
   1296c:	|  |  |  |     |  |   jsr 12a9a <stringToInt>
   12972:	|  |  |  |     |  |   addq.l #4,sp
   12974:	|  |  |  |     |  |   move.l d0,d0
   12976:	|  |  |  |     |  |   move.w d0,1b2e8 <gameSettings+0x12>
   1297c:	|  |  |  |     +--|-- bra.s 129e4 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "NOSTARTWINDOW") == 0)
   1297e:	|  |  |  |     |  \-> pea 185d3 <PutChar+0x2093>
   12984:	|  |  |  |     |      move.l sp,d0
   12986:	|  |  |  |     |      addi.l #269,d0
   1298c:	|  |  |  |     |      move.l d0,-(sp)
   1298e:	|  |  |  |     |      jsr 12baa <strcmp>
   12994:	|  |  |  |     |      addq.l #8,sp
   12996:	|  |  |  |     |      tst.l d0
   12998:	|  |  |  |     |  /-- bne.s 129b2 <readIniFile+0x29e>
					{
						gameSettings.noStartWindow = stringToInt (secondSoFar);
   1299a:	|  |  |  |     |  |   move.l sp,d0
   1299c:	|  |  |  |     |  |   addq.l #8,d0
   1299e:	|  |  |  |     |  |   move.l d0,-(sp)
   129a0:	|  |  |  |     |  |   jsr 12a9a <stringToInt>
   129a6:	|  |  |  |     |  |   addq.l #4,sp
   129a8:	|  |  |  |     |  |   move.l d0,d0
   129aa:	|  |  |  |     |  |   move.w d0,1b2ea <gameSettings+0x14>
   129b0:	|  |  |  |     +--|-- bra.s 129e4 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "DEBUGMODE") == 0)
   129b2:	|  |  |  |     |  \-> pea 185e1 <PutChar+0x20a1>
   129b8:	|  |  |  |     |      move.l sp,d0
   129ba:	|  |  |  |     |      addi.l #269,d0
   129c0:	|  |  |  |     |      move.l d0,-(sp)
   129c2:	|  |  |  |     |      jsr 12baa <strcmp>
   129c8:	|  |  |  |     |      addq.l #8,sp
   129ca:	|  |  |  |     |      tst.l d0
   129cc:	|  |  |  |     +----- bne.s 129e4 <readIniFile+0x2d0>
					{
						gameSettings.debugMode = stringToInt (secondSoFar);
   129ce:	|  |  |  |     |      move.l sp,d0
   129d0:	|  |  |  |     |      addq.l #8,d0
   129d2:	|  |  |  |     |      move.l d0,-(sp)
   129d4:	|  |  |  |     |      jsr 12a9a <stringToInt>
   129da:	|  |  |  |     |      addq.l #4,sp
   129dc:	|  |  |  |     |      move.l d0,d0
   129de:	|  |  |  |     |      move.w d0,1b2ec <gameSettings+0x16>
					}
				}
				here = 0;
   129e4:	|  |  |  |     \----> clr.b 571(sp)
				doingSecond = FALSE;
   129e8:	|  |  |  |            clr.w 566(sp)
				lineSoFar[0] = 0;
   129ec:	|  |  |  |            clr.b 265(sp)
				secondSoFar[0] = 0;
   129f0:	|  |  |  |            clr.b 8(sp)
				break;
   129f4:	|  |  |  |  /-------- bra.s 12a6c <readIniFile+0x358>

				case '=':
				doingSecond = TRUE;
   129f6:	|  |  |  \--|-------> move.w #1,566(sp)
				here = 0;
   129fc:	|  |  |     |         clr.b 571(sp)
				break;
   12a00:	|  |  |     +-------- bra.s 12a6c <readIniFile+0x358>

				default:
				if (doingSecond) {
   12a02:	|  |  \-----|-------> tst.w 566(sp)
   12a06:	|  |        |  /----- beq.s 12a3a <readIniFile+0x326>
					secondSoFar[here ++] = readChar;
   12a08:	|  |        |  |      move.b 571(sp),d0
   12a0c:	|  |        |  |      move.b d0,d1
   12a0e:	|  |        |  |      addq.b #1,d1
   12a10:	|  |        |  |      move.b d1,571(sp)
   12a14:	|  |        |  |      move.b d0,d0
   12a16:	|  |        |  |      andi.l #255,d0
   12a1c:	|  |        |  |      lea 572(sp),a0
   12a20:	|  |        |  |      adda.l d0,a0
   12a22:	|  |        |  |      move.b 570(sp),-564(a0)
					secondSoFar[here] = 0;
   12a28:	|  |        |  |      moveq #0,d0
   12a2a:	|  |        |  |      move.b 571(sp),d0
   12a2e:	|  |        |  |      lea 572(sp),a0
   12a32:	|  |        |  |      adda.l d0,a0
   12a34:	|  |        |  |      clr.b -564(a0)
				} else {
					lineSoFar[here ++] = readChar;
					lineSoFar[here] = 0;
				}
				break;
   12a38:	|  |        |  |  /-- bra.s 12a6a <readIniFile+0x356>
					lineSoFar[here ++] = readChar;
   12a3a:	|  |        |  \--|-> move.b 571(sp),d0
   12a3e:	|  |        |     |   move.b d0,d1
   12a40:	|  |        |     |   addq.b #1,d1
   12a42:	|  |        |     |   move.b d1,571(sp)
   12a46:	|  |        |     |   move.b d0,d0
   12a48:	|  |        |     |   andi.l #255,d0
   12a4e:	|  |        |     |   lea 572(sp),a0
   12a52:	|  |        |     |   adda.l d0,a0
   12a54:	|  |        |     |   move.b 570(sp),-307(a0)
					lineSoFar[here] = 0;
   12a5a:	|  |        |     |   moveq #0,d0
   12a5c:	|  |        |     |   move.b 571(sp),d0
   12a60:	|  |        |     |   lea 572(sp),a0
   12a64:	|  |        |     |   adda.l d0,a0
   12a66:	|  |        |     |   clr.b -307(a0)
				break;
   12a6a:	|  |        |     \-> nop
			}
		} while (keepGoing);
   12a6c:	|  |        \-------> tst.w 568(sp)
   12a70:	|  \----------------- bne.w 12804 <readIniFile+0xf0>

		Close(fp);
   12a74:	|                     move.l 546(sp),526(sp)
   12a7a:	|                     move.l 1b1aa <DOSBase>,d0
   12a80:	|                     movea.l d0,a6
   12a82:	|                     move.l 526(sp),d1
   12a86:	|                     jsr -36(a6)
   12a8a:	|                     move.l d0,522(sp)
	}
}
   12a8e:	\-------------------> nop
   12a90:	                      move.l (sp)+,d2
   12a92:	                      movea.l (sp)+,a6
   12a94:	                      lea 564(sp),sp
   12a98:	                      rts

00012a9a <stringToInt>:

unsigned int stringToInt (char * s) {
   12a9a:	             subq.l #8,sp
	int i = 0;
   12a9c:	             clr.l 4(sp)
	BOOL negative = FALSE;
   12aa0:	             clr.w 2(sp)
	for (;;) {
		if (*s >= '0' && *s <= '9') {
   12aa4:	/----------> movea.l 12(sp),a0
   12aa8:	|            move.b (a0),d0
   12aaa:	|            cmpi.b #47,d0
   12aae:	|        /-- ble.s 12ae6 <stringToInt+0x4c>
   12ab0:	|        |   movea.l 12(sp),a0
   12ab4:	|        |   move.b (a0),d0
   12ab6:	|        |   cmpi.b #57,d0
   12aba:	|        +-- bgt.s 12ae6 <stringToInt+0x4c>
			i *= 10;
   12abc:	|        |   move.l 4(sp),d1
   12ac0:	|        |   move.l d1,d0
   12ac2:	|        |   add.l d0,d0
   12ac4:	|        |   add.l d0,d0
   12ac6:	|        |   add.l d1,d0
   12ac8:	|        |   add.l d0,d0
   12aca:	|        |   move.l d0,4(sp)
			i += *s - '0';
   12ace:	|        |   movea.l 12(sp),a0
   12ad2:	|        |   move.b (a0),d0
   12ad4:	|        |   ext.w d0
   12ad6:	|        |   movea.w d0,a0
   12ad8:	|        |   moveq #-48,d0
   12ada:	|        |   add.l a0,d0
   12adc:	|        |   add.l d0,4(sp)
			s ++;
   12ae0:	|        |   addq.l #1,12(sp)
   12ae4:	|  /-----|-- bra.s 12b1e <stringToInt+0x84>
		} else if (*s == '-') {
   12ae6:	|  |     \-> movea.l 12(sp),a0
   12aea:	|  |         move.b (a0),d0
   12aec:	|  |         cmpi.b #45,d0
   12af0:	|  |     /-- bne.s 12b0a <stringToInt+0x70>
			negative = ! negative;
   12af2:	|  |     |   tst.w 2(sp)
   12af6:	|  |     |   seq d0
   12af8:	|  |     |   neg.b d0
   12afa:	|  |     |   move.b d0,d0
   12afc:	|  |     |   andi.w #255,d0
   12b00:	|  |     |   move.w d0,2(sp)
			s++;
   12b04:	|  |     |   addq.l #1,12(sp)
   12b08:	+--|-----|-- bra.s 12aa4 <stringToInt+0xa>
		} else {
			if (negative)
   12b0a:	|  |     \-> tst.w 2(sp)
   12b0e:	|  |     /-- beq.s 12b18 <stringToInt+0x7e>
				return -i;
   12b10:	|  |     |   move.l 4(sp),d0
   12b14:	|  |     |   neg.l d0
   12b16:	|  |  /--|-- bra.s 12b20 <stringToInt+0x86>
			return i;
   12b18:	|  |  |  \-> move.l 4(sp),d0
   12b1c:	|  |  +----- bra.s 12b20 <stringToInt+0x86>
		if (*s >= '0' && *s <= '9') {
   12b1e:	\--\--|----X bra.s 12aa4 <stringToInt+0xa>
		}
	}
   12b20:	      \----> addq.l #8,sp
   12b22:	             rts

00012b24 <fileExists>:
 */
#include <proto/dos.h>
#include "helpers.h"
#include "support/gcc8_c_support.h"

BYTE fileExists(const char * file) {
   12b24:	    lea -28(sp),sp
   12b28:	    move.l a6,-(sp)
   12b2a:	    move.l d2,-(sp)
	KPrintF("fileexists: Checking File");
   12b2c:	    pea 185eb <PutChar+0x20ab>
   12b32:	    jsr 15bf0 <KPrintF>
   12b38:	    addq.l #4,sp
	BPTR tester;
	BYTE retval = 0;
   12b3a:	    clr.b 35(sp)
	tester = Open(file, MODE_OLDFILE);
   12b3e:	    move.l 40(sp),30(sp)
   12b44:	    move.l #1005,26(sp)
   12b4c:	    move.l 1b1aa <DOSBase>,d0
   12b52:	    movea.l d0,a6
   12b54:	    move.l 30(sp),d1
   12b58:	    move.l 26(sp),d2
   12b5c:	    jsr -30(a6)
   12b60:	    move.l d0,22(sp)
   12b64:	    move.l 22(sp),d0
   12b68:	    move.l d0,18(sp)
	if (tester) {
   12b6c:	/-- beq.s 12b9c <fileExists+0x78>
		KPrintF("fileexists: File exists");
   12b6e:	|   pea 18605 <PutChar+0x20c5>
   12b74:	|   jsr 15bf0 <KPrintF>
   12b7a:	|   addq.l #4,sp
		retval = 1;
   12b7c:	|   move.b #1,35(sp)
		Close(tester);
   12b82:	|   move.l 18(sp),14(sp)
   12b88:	|   move.l 1b1aa <DOSBase>,d0
   12b8e:	|   movea.l d0,a6
   12b90:	|   move.l 14(sp),d1
   12b94:	|   jsr -36(a6)
   12b98:	|   move.l d0,10(sp)
	}
	return retval;
   12b9c:	\-> move.b 35(sp),d0
   12ba0:	    move.l (sp)+,d2
   12ba2:	    movea.l (sp)+,a6
   12ba4:	    lea 28(sp),sp
   12ba8:	    rts

00012baa <strcmp>:
#endif


int strcmp(const char* s1, const char* s2)
{
    while(*s1 && (*s1 == *s2))
   12baa:	   /-- bra.s 12bb4 <strcmp+0xa>
    {
        s1++;
   12bac:	/--|-> addq.l #1,4(sp)
        s2++;
   12bb0:	|  |   addq.l #1,8(sp)
    while(*s1 && (*s1 == *s2))
   12bb4:	|  \-> movea.l 4(sp),a0
   12bb8:	|      move.b (a0),d0
   12bba:	|  /-- beq.s 12bcc <strcmp+0x22>
   12bbc:	|  |   movea.l 4(sp),a0
   12bc0:	|  |   move.b (a0),d1
   12bc2:	|  |   movea.l 8(sp),a0
   12bc6:	|  |   move.b (a0),d0
   12bc8:	|  |   cmp.b d1,d0
   12bca:	\--|-- beq.s 12bac <strcmp+0x2>
    }
    return *(const unsigned char*)s1 - *(const unsigned char*)s2;
   12bcc:	   \-> movea.l 4(sp),a0
   12bd0:	       move.b (a0),d0
   12bd2:	       moveq #0,d1
   12bd4:	       move.b d0,d1
   12bd6:	       movea.l 8(sp),a0
   12bda:	       move.b (a0),d0
   12bdc:	       move.b d0,d0
   12bde:	       andi.l #255,d0
   12be4:	       sub.l d0,d1
   12be6:	       move.l d1,d0
}
   12be8:	       rts

00012bea <strlen>:

long unsigned int strlen (const char *s) 
{  
   12bea:	       subq.l #4,sp
	long unsigned int i = 0;
   12bec:	       clr.l (sp)
	while(s[i]) i++; 
   12bee:	   /-- bra.s 12bf2 <strlen+0x8>
   12bf0:	/--|-> addq.l #1,(sp)
   12bf2:	|  \-> movea.l 8(sp),a0
   12bf6:	|      adda.l (sp),a0
   12bf8:	|      move.b (a0),d0
   12bfa:	\----- bne.s 12bf0 <strlen+0x6>
	return(i);
   12bfc:	       move.l (sp),d0
}
   12bfe:	       addq.l #4,sp
   12c00:	       rts

00012c02 <strcpy>:

char *strcpy(char *t, const char *s) 
{
	while(*t++ = *s++);
   12c02:	    nop
   12c04:	/-> move.l 8(sp),d0
   12c08:	|   move.l d0,d1
   12c0a:	|   addq.l #1,d1
   12c0c:	|   move.l d1,8(sp)
   12c10:	|   movea.l 4(sp),a0
   12c14:	|   lea 1(a0),a1
   12c18:	|   move.l a1,4(sp)
   12c1c:	|   movea.l d0,a1
   12c1e:	|   move.b (a1),d0
   12c20:	|   move.b d0,(a0)
   12c22:	|   move.b (a0),d0
   12c24:	\-- bne.s 12c04 <strcpy+0x2>
}
   12c26:	    nop
   12c28:	    rts

00012c2a <joinStrings>:

char * joinStrings (const char * s1, const char * s2) {
   12c2a:	    lea -20(sp),sp
   12c2e:	    move.l a6,-(sp)
   12c30:	    move.l d2,-(sp)
	char * newString = AllocVec(strlen (s1) + strlen (s2) + 1, MEMF_ANY); 
   12c32:	    move.l 32(sp),-(sp)
   12c36:	    jsr 12bea <strlen>
   12c3c:	    addq.l #4,sp
   12c3e:	    move.l d0,d2
   12c40:	    move.l 36(sp),-(sp)
   12c44:	    jsr 12bea <strlen>
   12c4a:	    addq.l #4,sp
   12c4c:	    add.l d2,d0
   12c4e:	    move.l d0,d1
   12c50:	    addq.l #1,d1
   12c52:	    move.l d1,20(sp)
   12c56:	    clr.l 16(sp)
   12c5a:	    move.l 1b1a2 <SysBase>,d0
   12c60:	    movea.l d0,a6
   12c62:	    move.l 20(sp),d0
   12c66:	    move.l 16(sp),d1
   12c6a:	    jsr -684(a6)
   12c6e:	    move.l d0,12(sp)
   12c72:	    move.l 12(sp),d0
   12c76:	    move.l d0,8(sp)
	char * t = newString;
   12c7a:	    move.l 8(sp),24(sp)

	while(*t++ = *s1++);
   12c80:	    nop
   12c82:	/-> move.l 32(sp),d0
   12c86:	|   move.l d0,d1
   12c88:	|   addq.l #1,d1
   12c8a:	|   move.l d1,32(sp)
   12c8e:	|   movea.l 24(sp),a0
   12c92:	|   lea 1(a0),a1
   12c96:	|   move.l a1,24(sp)
   12c9a:	|   movea.l d0,a1
   12c9c:	|   move.b (a1),d0
   12c9e:	|   move.b d0,(a0)
   12ca0:	|   move.b (a0),d0
   12ca2:	\-- bne.s 12c82 <joinStrings+0x58>
	t--;
   12ca4:	    subq.l #1,24(sp)
	while(*t++ = *s2++);
   12ca8:	    nop
   12caa:	/-> move.l 36(sp),d0
   12cae:	|   move.l d0,d1
   12cb0:	|   addq.l #1,d1
   12cb2:	|   move.l d1,36(sp)
   12cb6:	|   movea.l 24(sp),a0
   12cba:	|   lea 1(a0),a1
   12cbe:	|   move.l a1,24(sp)
   12cc2:	|   movea.l d0,a1
   12cc4:	|   move.b (a1),d0
   12cc6:	|   move.b d0,(a0)
   12cc8:	|   move.b (a0),d0
   12cca:	\-- bne.s 12caa <joinStrings+0x80>

	return newString;
   12ccc:	    move.l 8(sp),d0
}
   12cd0:	    move.l (sp)+,d2
   12cd2:	    movea.l (sp)+,a6
   12cd4:	    lea 20(sp),sp
   12cd8:	    rts

00012cda <itoa>:

#define va_start(ap, last) (ap = (va_list)&last + sizeof(last))
#define va_arg(ap, type) (*(type*)(ap += sizeof(type)) - 1)
#define va_end(ap) (ap = (va_list)0)

char* itoa(int value, char* str, int base) {
   12cda:	       lea -16(sp),sp
    char* rc;
    char* ptr;
    char* low;
    // Set '-' for negative decimals.
    if (base == 10 && value < 0) {
   12cde:	       moveq #10,d0
   12ce0:	       cmp.l 28(sp),d0
   12ce4:	   /-- bne.s 12d02 <itoa+0x28>
   12ce6:	   |   tst.l 20(sp)
   12cea:	   +-- bge.s 12d02 <itoa+0x28>
        *str++ = '-';
   12cec:	   |   move.l 24(sp),d0
   12cf0:	   |   move.l d0,d1
   12cf2:	   |   addq.l #1,d1
   12cf4:	   |   move.l d1,24(sp)
   12cf8:	   |   movea.l d0,a0
   12cfa:	   |   move.b #45,(a0)
        value *= -1;
   12cfe:	   |   neg.l 20(sp)
    }
    rc = ptr = str;
   12d02:	   \-> move.l 24(sp),12(sp)
   12d08:	       move.l 12(sp),4(sp)
    // Set pointer to last digit's place.
    do {
        *ptr++ = "0123456789abcdef"[value % base];
   12d0e:	   /-> move.l 20(sp),d0
   12d12:	   |   move.l 28(sp),-(sp)
   12d16:	   |   move.l d0,-(sp)
   12d18:	   |   jsr 164d6 <__modsi3>
   12d1e:	   |   addq.l #8,sp
   12d20:	   |   movea.l d0,a1
   12d22:	   |   move.l 12(sp),d0
   12d26:	   |   move.l d0,d1
   12d28:	   |   addq.l #1,d1
   12d2a:	   |   move.l d1,12(sp)
   12d2e:	   |   lea 1861d <PutChar+0x20dd>,a0
   12d34:	   |   move.b (0,a1,a0.l),d1
   12d38:	   |   movea.l d0,a0
   12d3a:	   |   move.b d1,(a0)
        value /= base;
   12d3c:	   |   move.l 28(sp),-(sp)
   12d40:	   |   move.l 24(sp),-(sp)
   12d44:	   |   jsr 164a8 <__divsi3>
   12d4a:	   |   addq.l #8,sp
   12d4c:	   |   move.l d0,20(sp)
    } while (value);
   12d50:	   \-- bne.s 12d0e <itoa+0x34>
    // Null-terminate string.
    *ptr-- = '\0';
   12d52:	       move.l 12(sp),d0
   12d56:	       move.l d0,d1
   12d58:	       subq.l #1,d1
   12d5a:	       move.l d1,12(sp)
   12d5e:	       movea.l d0,a0
   12d60:	       clr.b (a0)
    // Reverse string.
    for (low = rc; low < ptr; low++, ptr--) {
   12d62:	       move.l 4(sp),8(sp)
   12d68:	   /-- bra.s 12d8e <itoa+0xb4>
        char temp = *low;
   12d6a:	/--|-> movea.l 8(sp),a0
   12d6e:	|  |   move.b (a0),3(sp)
        *low = *ptr;
   12d72:	|  |   movea.l 12(sp),a0
   12d76:	|  |   move.b (a0),d0
   12d78:	|  |   movea.l 8(sp),a0
   12d7c:	|  |   move.b d0,(a0)
        *ptr = temp;
   12d7e:	|  |   movea.l 12(sp),a0
   12d82:	|  |   move.b 3(sp),(a0)
    for (low = rc; low < ptr; low++, ptr--) {
   12d86:	|  |   addq.l #1,8(sp)
   12d8a:	|  |   subq.l #1,12(sp)
   12d8e:	|  \-> move.l 8(sp),d0
   12d92:	|      cmp.l 12(sp),d0
   12d96:	\----- bcs.s 12d6a <itoa+0x90>
    }
    return rc;
   12d98:	       move.l 4(sp),d0
}
   12d9c:	       lea 16(sp),sp
   12da0:	       rts

00012da2 <vsprintf2>:

int vsprintf2(char* str, const char* format, va_list args) {
   12da2:	                            lea -40(sp),sp
   12da6:	                            move.l d2,-(sp)
    char* s = str;
   12da8:	                            move.l 48(sp),40(sp)
    const char* p = format;
   12dae:	                            move.l 52(sp),36(sp)
    int i;
    char* sval;
    char buffer[20];

    while (*p) {
   12db4:	   /----------------------- bra.w 12ee8 <vsprintf2+0x146>
        if (*p == '%') {
   12db8:	/--|----------------------> movea.l 36(sp),a0
   12dbc:	|  |                        move.b (a0),d0
   12dbe:	|  |                        cmpi.b #37,d0
   12dc2:	|  |  /-------------------- bne.w 12ece <vsprintf2+0x12c>
            switch (*++p) {
   12dc6:	|  |  |                     addq.l #1,36(sp)
   12dca:	|  |  |                     movea.l 36(sp),a0
   12dce:	|  |  |                     move.b (a0),d0
   12dd0:	|  |  |                     ext.w d0
   12dd2:	|  |  |                     movea.w d0,a0
   12dd4:	|  |  |                     moveq #115,d0
   12dd6:	|  |  |                     cmp.l a0,d0
   12dd8:	|  |  |           /-------- beq.s 12e50 <vsprintf2+0xae>
   12dda:	|  |  |           |         moveq #115,d1
   12ddc:	|  |  |           |         cmp.l a0,d1
   12dde:	|  |  |  /--------|-------- blt.w 12eb6 <vsprintf2+0x114>
   12de2:	|  |  |  |        |         moveq #99,d2
   12de4:	|  |  |  |        |         cmp.l a0,d2
   12de6:	|  |  |  |  /-----|-------- beq.w 12e8e <vsprintf2+0xec>
   12dea:	|  |  |  |  |     |         moveq #100,d0
   12dec:	|  |  |  |  |     |         cmp.l a0,d0
   12dee:	|  |  |  +--|-----|-------- bne.w 12eb6 <vsprintf2+0x114>
                case 'd':
                    i = va_arg(args, int);
   12df2:	|  |  |  |  |     |         addq.l #4,56(sp)
   12df6:	|  |  |  |  |     |         movea.l 56(sp),a0
   12dfa:	|  |  |  |  |     |         move.l (a0),d0
   12dfc:	|  |  |  |  |     |         move.l d0,d1
   12dfe:	|  |  |  |  |     |         subq.l #1,d1
   12e00:	|  |  |  |  |     |         move.l d1,24(sp)
                    itoa(i, buffer, 10);
   12e04:	|  |  |  |  |     |         pea a <_start+0xa>
   12e08:	|  |  |  |  |     |         lea 8(sp),a0
   12e0c:	|  |  |  |  |     |         move.l a0,-(sp)
   12e0e:	|  |  |  |  |     |         move.l 32(sp),-(sp)
   12e12:	|  |  |  |  |     |         jsr 12cda <itoa>
   12e18:	|  |  |  |  |     |         lea 12(sp),sp
					for (char* b = buffer; *b; b++) {
   12e1c:	|  |  |  |  |     |         lea 44(sp),a0
   12e20:	|  |  |  |  |     |         lea -40(a0),a0
   12e24:	|  |  |  |  |     |         move.l a0,28(sp)
   12e28:	|  |  |  |  |     |     /-- bra.s 12e44 <vsprintf2+0xa2>
                        *s++ = *b;
   12e2a:	|  |  |  |  |     |  /--|-> move.l 40(sp),d0
   12e2e:	|  |  |  |  |     |  |  |   move.l d0,d1
   12e30:	|  |  |  |  |     |  |  |   addq.l #1,d1
   12e32:	|  |  |  |  |     |  |  |   move.l d1,40(sp)
   12e36:	|  |  |  |  |     |  |  |   movea.l 28(sp),a0
   12e3a:	|  |  |  |  |     |  |  |   move.b (a0),d1
   12e3c:	|  |  |  |  |     |  |  |   movea.l d0,a0
   12e3e:	|  |  |  |  |     |  |  |   move.b d1,(a0)
					for (char* b = buffer; *b; b++) {
   12e40:	|  |  |  |  |     |  |  |   addq.l #1,28(sp)
   12e44:	|  |  |  |  |     |  |  \-> movea.l 28(sp),a0
   12e48:	|  |  |  |  |     |  |      move.b (a0),d0
   12e4a:	|  |  |  |  |     |  \----- bne.s 12e2a <vsprintf2+0x88>
                    }
                    break;
   12e4c:	|  |  |  |  |  /--|-------- bra.w 12ee4 <vsprintf2+0x142>
                case 's':
                    sval = va_arg(args, char*);
   12e50:	|  |  |  |  |  |  \-------> addq.l #4,56(sp)
   12e54:	|  |  |  |  |  |            movea.l 56(sp),a0
   12e58:	|  |  |  |  |  |            move.l (a0),d0
   12e5a:	|  |  |  |  |  |            move.l d0,d1
   12e5c:	|  |  |  |  |  |            subq.l #1,d1
   12e5e:	|  |  |  |  |  |            move.l d1,32(sp)
                    while (*sval) {
   12e62:	|  |  |  |  |  |        /-- bra.s 12e84 <vsprintf2+0xe2>
                        *s++ = *sval++;
   12e64:	|  |  |  |  |  |     /--|-> move.l 32(sp),d1
   12e68:	|  |  |  |  |  |     |  |   move.l d1,d2
   12e6a:	|  |  |  |  |  |     |  |   addq.l #1,d2
   12e6c:	|  |  |  |  |  |     |  |   move.l d2,32(sp)
   12e70:	|  |  |  |  |  |     |  |   move.l 40(sp),d0
   12e74:	|  |  |  |  |  |     |  |   move.l d0,d2
   12e76:	|  |  |  |  |  |     |  |   addq.l #1,d2
   12e78:	|  |  |  |  |  |     |  |   move.l d2,40(sp)
   12e7c:	|  |  |  |  |  |     |  |   movea.l d1,a0
   12e7e:	|  |  |  |  |  |     |  |   move.b (a0),d1
   12e80:	|  |  |  |  |  |     |  |   movea.l d0,a0
   12e82:	|  |  |  |  |  |     |  |   move.b d1,(a0)
                    while (*sval) {
   12e84:	|  |  |  |  |  |     |  \-> movea.l 32(sp),a0
   12e88:	|  |  |  |  |  |     |      move.b (a0),d0
   12e8a:	|  |  |  |  |  |     \----- bne.s 12e64 <vsprintf2+0xc2>
                    }
                    break;
   12e8c:	|  |  |  |  |  +----------- bra.s 12ee4 <vsprintf2+0x142>
                case 'c':
                    i = va_arg(args, int);
   12e8e:	|  |  |  |  \--|----------> addq.l #4,56(sp)
   12e92:	|  |  |  |     |            movea.l 56(sp),a0
   12e96:	|  |  |  |     |            move.l (a0),d0
   12e98:	|  |  |  |     |            move.l d0,d1
   12e9a:	|  |  |  |     |            subq.l #1,d1
   12e9c:	|  |  |  |     |            move.l d1,24(sp)
                    *s++ = (char)i;
   12ea0:	|  |  |  |     |            move.l 40(sp),d0
   12ea4:	|  |  |  |     |            move.l d0,d2
   12ea6:	|  |  |  |     |            addq.l #1,d2
   12ea8:	|  |  |  |     |            move.l d2,40(sp)
   12eac:	|  |  |  |     |            move.l 24(sp),d1
   12eb0:	|  |  |  |     |            movea.l d0,a0
   12eb2:	|  |  |  |     |            move.b d1,(a0)
                    break;
   12eb4:	|  |  |  |     +----------- bra.s 12ee4 <vsprintf2+0x142>
                default:
                    *s++ = *p;
   12eb6:	|  |  |  \-----|----------> move.l 40(sp),d0
   12eba:	|  |  |        |            move.l d0,d1
   12ebc:	|  |  |        |            addq.l #1,d1
   12ebe:	|  |  |        |            move.l d1,40(sp)
   12ec2:	|  |  |        |            movea.l 36(sp),a0
   12ec6:	|  |  |        |            move.b (a0),d1
   12ec8:	|  |  |        |            movea.l d0,a0
   12eca:	|  |  |        |            move.b d1,(a0)
                    break;
   12ecc:	|  |  |        +----------- bra.s 12ee4 <vsprintf2+0x142>
            }
        } else {
            *s++ = *p;
   12ece:	|  |  \--------|----------> move.l 40(sp),d0
   12ed2:	|  |           |            move.l d0,d1
   12ed4:	|  |           |            addq.l #1,d1
   12ed6:	|  |           |            move.l d1,40(sp)
   12eda:	|  |           |            movea.l 36(sp),a0
   12ede:	|  |           |            move.b (a0),d1
   12ee0:	|  |           |            movea.l d0,a0
   12ee2:	|  |           |            move.b d1,(a0)
        }
        p++;
   12ee4:	|  |           \----------> addq.l #1,36(sp)
    while (*p) {
   12ee8:	|  \----------------------> movea.l 36(sp),a0
   12eec:	|                           move.b (a0),d0
   12eee:	\-------------------------- bne.w 12db8 <vsprintf2+0x16>
    }
    *s = '\0';
   12ef2:	                            movea.l 40(sp),a0
   12ef6:	                            clr.b (a0)
    return s - str;
   12ef8:	                            move.l 40(sp),d0
   12efc:	                            sub.l 48(sp),d0
}
   12f00:	                            move.l (sp)+,d2
   12f02:	                            lea 40(sp),sp
   12f06:	                            rts

00012f08 <sprintf>:

int sprintf(char* str, const char* format, ...) {
   12f08:	subq.l #8,sp
    va_list args;
    int done;

    va_start(args, format);
   12f0a:	moveq #16,d0
   12f0c:	add.l sp,d0
   12f0e:	move.l d0,d1
   12f10:	addq.l #4,d1
   12f12:	move.l d1,4(sp)
    done = vsprintf2(str, format, args);
   12f16:	move.l 16(sp),d0
   12f1a:	move.l 4(sp),-(sp)
   12f1e:	move.l d0,-(sp)
   12f20:	move.l 20(sp),-(sp)
   12f24:	jsr 12da2 <vsprintf2>
   12f2a:	lea 12(sp),sp
   12f2e:	move.l d0,(sp)
    va_end(args);
   12f30:	clr.l 4(sp)

    return done;
   12f34:	move.l (sp),d0
}
   12f36:	addq.l #8,sp
   12f38:	rts

00012f3a <addVarToStack>:
const char * typeName[] = {"undefined", "number", "user function", "string",
							"built-in function", "file", "stack",
							"object type", "animation", "costume"};


BOOL addVarToStack(const struct variable * va, struct variableStack ** thisStack) {
   12f3a:	       lea -20(sp),sp
   12f3e:	       move.l a6,-(sp)
    struct variableStack * newStack = (struct variableStack *)AllocVec(sizeof(struct variableStack), MEMF_ANY);
   12f40:	       moveq #12,d0
   12f42:	       move.l d0,20(sp)
   12f46:	       clr.l 16(sp)
   12f4a:	       move.l 1b1a2 <SysBase>,d0
   12f50:	       movea.l d0,a6
   12f52:	       move.l 20(sp),d0
   12f56:	       move.l 16(sp),d1
   12f5a:	       jsr -684(a6)
   12f5e:	       move.l d0,12(sp)
   12f62:	       move.l 12(sp),d0
   12f66:	       move.l d0,8(sp)
    if (!newStack) return FALSE;
   12f6a:	   /-- bne.s 12f70 <addVarToStack+0x36>
   12f6c:	   |   clr.w d0
   12f6e:	/--|-- bra.s 12fb8 <addVarToStack+0x7e>

    if (!copyMain(va, &newStack->thisVar)) {
   12f70:	|  \-> move.l 8(sp),d0
   12f74:	|      move.l d0,-(sp)
   12f76:	|      move.l 32(sp),-(sp)
   12f7a:	|      jsr 13a9c <copyMain>
   12f80:	|      addq.l #8,sp
   12f82:	|      tst.w d0
   12f84:	|  /-- bne.s 12fa0 <addVarToStack+0x66>
        FreeVec(newStack);
   12f86:	|  |   move.l 8(sp),4(sp)
   12f8c:	|  |   move.l 1b1a2 <SysBase>,d0
   12f92:	|  |   movea.l d0,a6
   12f94:	|  |   movea.l 4(sp),a1
   12f98:	|  |   jsr -690(a6)
        return FALSE;
   12f9c:	|  |   clr.w d0
   12f9e:	+--|-- bra.s 12fb8 <addVarToStack+0x7e>
    }

    newStack->next = *thisStack;
   12fa0:	|  \-> movea.l 32(sp),a0
   12fa4:	|      move.l (a0),d0
   12fa6:	|      movea.l 8(sp),a0
   12faa:	|      move.l d0,8(a0)
    *thisStack = newStack;
   12fae:	|      movea.l 32(sp),a0
   12fb2:	|      move.l 8(sp),(a0)
    return TRUE;
   12fb6:	|      moveq #1,d0
}
   12fb8:	\----> movea.l (sp)+,a6
   12fba:	       lea 20(sp),sp
   12fbe:	       rts

00012fc0 <addVarToStackQuick>:

BOOL addVarToStackQuick(struct variable *va, struct variableStack **thisStack) {
   12fc0:	       lea -16(sp),sp
   12fc4:	       move.l a6,-(sp)
    struct variableStack *newStack = AllocVec(sizeof(struct variableStack), MEMF_ANY);
   12fc6:	       moveq #12,d0
   12fc8:	       move.l d0,16(sp)
   12fcc:	       clr.l 12(sp)
   12fd0:	       move.l 1b1a2 <SysBase>,d0
   12fd6:	       movea.l d0,a6
   12fd8:	       move.l 16(sp),d0
   12fdc:	       move.l 12(sp),d1
   12fe0:	       jsr -684(a6)
   12fe4:	       move.l d0,8(sp)
   12fe8:	       move.l 8(sp),d0
   12fec:	       move.l d0,4(sp)
    if (!newStack) return FALSE;
   12ff0:	   /-- bne.s 12ff6 <addVarToStackQuick+0x36>
   12ff2:	   |   clr.w d0
   12ff4:	/--|-- bra.s 1302c <addVarToStackQuick+0x6c>

//    if (!copyMain(va, &newStack->thisVar)) return FALSE;

    memcpy(&(newStack->thisVar), va, sizeof(struct variable));
   12ff6:	|  \-> move.l 4(sp),d0
   12ffa:	|      pea 8 <_start+0x8>
   12ffe:	|      move.l 28(sp),-(sp)
   13002:	|      move.l d0,-(sp)
   13004:	|      jsr 15ba4 <memcpy>
   1300a:	|      lea 12(sp),sp
    va->varType = SVT_NULL;
   1300e:	|      movea.l 24(sp),a0
   13012:	|      clr.l (a0)

    newStack->next = *thisStack;
   13014:	|      movea.l 28(sp),a0
   13018:	|      move.l (a0),d0
   1301a:	|      movea.l 4(sp),a0
   1301e:	|      move.l d0,8(a0)
    *thisStack = newStack;
   13022:	|      movea.l 28(sp),a0
   13026:	|      move.l 4(sp),(a0)
    return TRUE;
   1302a:	|      moveq #1,d0
}
   1302c:	\----> movea.l (sp)+,a6
   1302e:	       lea 16(sp),sp
   13032:	       rts

00013034 <addVariablesInSecond>:

void addVariablesInSecond(struct variable * var1, struct variable * var2) {
   13034:	       lea -16(sp),sp
   13038:	       move.l a6,-(sp)
	if (var1->varType == SVT_INT && var2->varType == SVT_INT) {
   1303a:	       movea.l 24(sp),a0
   1303e:	       move.l (a0),d0
   13040:	       moveq #1,d1
   13042:	       cmp.l d0,d1
   13044:	   /-- bne.s 1306e <addVariablesInSecond+0x3a>
   13046:	   |   movea.l 28(sp),a0
   1304a:	   |   move.l (a0),d0
   1304c:	   |   moveq #1,d1
   1304e:	   |   cmp.l d0,d1
   13050:	   +-- bne.s 1306e <addVariablesInSecond+0x3a>
		var2->varData.intValue += var1->varData.intValue;
   13052:	   |   movea.l 28(sp),a0
   13056:	   |   move.l 4(a0),d1
   1305a:	   |   movea.l 24(sp),a0
   1305e:	   |   move.l 4(a0),d0
   13062:	   |   add.l d1,d0
   13064:	   |   movea.l 28(sp),a0
   13068:	   |   move.l d0,4(a0)
   1306c:	/--|-- bra.s 130e8 <addVariablesInSecond+0xb4>
	} else {
		char * string1 = getTextFromAnyVar(var1);
   1306e:	|  \-> move.l 24(sp),-(sp)
   13072:	|      jsr 13cd4 <getTextFromAnyVar>
   13078:	|      addq.l #4,sp
   1307a:	|      move.l d0,16(sp)
		char * string2 = getTextFromAnyVar(var2);
   1307e:	|      move.l 28(sp),-(sp)
   13082:	|      jsr 13cd4 <getTextFromAnyVar>
   13088:	|      addq.l #4,sp
   1308a:	|      move.l d0,12(sp)

		unlinkVar(var2);
   1308e:	|      move.l 28(sp),-(sp)
   13092:	|      jsr 1394c <unlinkVar>
   13098:	|      addq.l #4,sp
		var2->varData.theString = joinStrings(string1, string2);
   1309a:	|      move.l 12(sp),-(sp)
   1309e:	|      move.l 20(sp),-(sp)
   130a2:	|      jsr 12c2a <joinStrings>
   130a8:	|      addq.l #8,sp
   130aa:	|      movea.l 28(sp),a0
   130ae:	|      move.l d0,4(a0)
		var2->varType = SVT_STRING;
   130b2:	|      movea.l 28(sp),a0
   130b6:	|      moveq #3,d0
   130b8:	|      move.l d0,(a0)
		FreeVec(string1);
   130ba:	|      move.l 16(sp),8(sp)
   130c0:	|      move.l 1b1a2 <SysBase>,d0
   130c6:	|      movea.l d0,a6
   130c8:	|      movea.l 8(sp),a1
   130cc:	|      jsr -690(a6)
		FreeVec(string2);
   130d0:	|      move.l 12(sp),4(sp)
   130d6:	|      move.l 1b1a2 <SysBase>,d0
   130dc:	|      movea.l d0,a6
   130de:	|      movea.l 4(sp),a1
   130e2:	|      jsr -690(a6)
	}
}
   130e6:	|      nop
   130e8:	\----> nop
   130ea:	       movea.l (sp)+,a6
   130ec:	       lea 16(sp),sp
   130f0:	       rts

000130f2 <compareVariablesInSecond>:

void compareVariablesInSecond (const struct variable *var1, struct variable *var2) {	
	setVariable (var2, SVT_INT, compareVars (*var1, *var2));
   130f2:	movea.l 8(sp),a0
   130f6:	move.l 4(a0),-(sp)
   130fa:	move.l (a0),-(sp)
   130fc:	movea.l 12(sp),a0
   13100:	move.l 4(a0),-(sp)
   13104:	move.l (a0),-(sp)
   13106:	jsr 13128 <compareVars>
   1310c:	lea 16(sp),sp
   13110:	move.l d0,-(sp)
   13112:	pea 1 <_start+0x1>
   13116:	move.l 16(sp),-(sp)
   1311a:	jsr 13ff0 <setVariable>
   13120:	lea 12(sp),sp
}
   13124:	nop
   13126:	rts

00013128 <compareVars>:


int compareVars (const struct variable var1, const struct variable var2) {
   13128:	       subq.l #4,sp
	int re = 0;
   1312a:	       clr.l (sp)
	if (var1.varType == var2.varType) {
   1312c:	       move.l 8(sp),d1
   13130:	       move.l 16(sp),d0
   13134:	       cmp.l d1,d0
   13136:	/----- bne.w 131fe <compareVars+0xd6>
		switch (var1.varType) {
   1313a:	|      move.l 8(sp),d0
   1313e:	|      moveq #9,d1
   13140:	|      cmp.l d0,d1
   13142:	|  /-- bcs.w 131e6 <compareVars+0xbe>
   13146:	|  |   add.l d0,d0
   13148:	|  |   movea.l d0,a0
   1314a:	|  |   adda.l #78166,a0
   13150:	|  |   move.w (a0),d0
   13152:	|  |   jmp (13156 <compareVars+0x2e>,pc,d0.w)
   13156:	|  |   ori.b #-112,(a4)
   1315a:	|  |   ori.l #5243024,(a0)
   13160:	|  |   ori.l #7733392,(a0)
   13166:	|  |   ori.b #28,(1,a6,d7.w)
			case SVT_NULL:
			re = 1;
   1316c:	|  |   move.l d0,(sp)
			break;
   1316e:	+--|-- bra.w 131fe <compareVars+0xd6>

			case SVT_COSTUME:
			re = (var1.varData.costumeHandler == var2.varData.costumeHandler);
   13172:	|  |   move.l 12(sp),d1
   13176:	|  |   move.l 20(sp),d0
   1317a:	|  |   cmp.l d1,d0
   1317c:	|  |   seq d0
   1317e:	|  |   neg.b d0
   13180:	|  |   move.b d0,d0
   13182:	|  |   andi.l #255,d0
   13188:	|  |   move.l d0,(sp)
			break;
   1318a:	+--|-- bra.s 131fe <compareVars+0xd6>

			case SVT_ANIM:
			re = (var1.varData.animHandler == var2.varData.animHandler);
   1318c:	|  |   move.l 12(sp),d1
   13190:	|  |   move.l 20(sp),d0
   13194:	|  |   cmp.l d1,d0
   13196:	|  |   seq d0
   13198:	|  |   neg.b d0
   1319a:	|  |   move.b d0,d0
   1319c:	|  |   andi.l #255,d0
   131a2:	|  |   move.l d0,(sp)
			break;
   131a4:	+--|-- bra.s 131fe <compareVars+0xd6>

			case SVT_STRING:

			re = (strcmp (var1.varData.theString, var2.varData.theString) == 0);
   131a6:	|  |   move.l 20(sp),d1
   131aa:	|  |   move.l 12(sp),d0
   131ae:	|  |   move.l d1,-(sp)
   131b0:	|  |   move.l d0,-(sp)
   131b2:	|  |   jsr 12baa <strcmp>
   131b8:	|  |   addq.l #8,sp
   131ba:	|  |   tst.l d0
   131bc:	|  |   seq d0
   131be:	|  |   neg.b d0
   131c0:	|  |   move.b d0,d0
   131c2:	|  |   andi.l #255,d0
   131c8:	|  |   move.l d0,(sp)
			break;
   131ca:	+--|-- bra.s 131fe <compareVars+0xd6>

			case SVT_STACK:
			re = (var1.varData.theStack == var2.varData.theStack);
   131cc:	|  |   move.l 12(sp),d1
   131d0:	|  |   move.l 20(sp),d0
   131d4:	|  |   cmp.l d1,d0
   131d6:	|  |   seq d0
   131d8:	|  |   neg.b d0
   131da:	|  |   move.b d0,d0
   131dc:	|  |   andi.l #255,d0
   131e2:	|  |   move.l d0,(sp)
			break;
   131e4:	+--|-- bra.s 131fe <compareVars+0xd6>

			default:
			re = (var1.varData.intValue == var2.varData.intValue);
   131e6:	|  \-> move.l 12(sp),d1
   131ea:	|      move.l 20(sp),d0
   131ee:	|      cmp.l d1,d0
   131f0:	|      seq d0
   131f2:	|      neg.b d0
   131f4:	|      move.b d0,d0
   131f6:	|      andi.l #255,d0
   131fc:	|      move.l d0,(sp)
		}
	}
	return re;
   131fe:	\----> move.l (sp),d0
}
   13200:	       addq.l #4,sp
   13202:	       rts

00013204 <copyStack>:

BOOL copyStack (const struct variable * from, struct variable * to) {
   13204:	             lea -16(sp),sp
   13208:	             move.l a6,-(sp)
	to->varType = SVT_STACK;
   1320a:	             movea.l 28(sp),a0
   1320e:	             moveq #6,d0
   13210:	             move.l d0,(a0)
	to->varData.theStack = (struct stackHandler *)AllocVec(sizeof(struct stackHandler), MEMF_ANY);
   13212:	             moveq #12,d0
   13214:	             move.l d0,12(sp)
   13218:	             clr.l 8(sp)
   1321c:	             move.l 1b1a2 <SysBase>,d0
   13222:	             movea.l d0,a6
   13224:	             move.l 12(sp),d0
   13228:	             move.l 8(sp),d1
   1322c:	             jsr -684(a6)
   13230:	             move.l d0,4(sp)
   13234:	             move.l 4(sp),d0
   13238:	             movea.l 28(sp),a0
   1323c:	             move.l d0,4(a0)
	if (!to->varData.theStack) return FALSE;
   13240:	             movea.l 28(sp),a0
   13244:	             move.l 4(a0),d0
   13248:	         /-- bne.s 13250 <copyStack+0x4c>
   1324a:	         |   clr.w d0
   1324c:	/--------|-- bra.w 132d2 <copyStack+0xce>
	to->varData.theStack->first = NULL;
   13250:	|        \-> movea.l 28(sp),a0
   13254:	|            movea.l 4(a0),a0
   13258:	|            clr.l (a0)
	to->varData.theStack->last = NULL;
   1325a:	|            movea.l 28(sp),a0
   1325e:	|            movea.l 4(a0),a0
   13262:	|            clr.l 4(a0)
	to->varData.theStack->timesUsed = 1;
   13266:	|            movea.l 28(sp),a0
   1326a:	|            movea.l 4(a0),a0
   1326e:	|            moveq #1,d0
   13270:	|            move.l d0,8(a0)
	struct variableStack * a = from->varData.theStack->first;
   13274:	|            movea.l 24(sp),a0
   13278:	|            movea.l 4(a0),a0
   1327c:	|            move.l (a0),16(sp)

	while (a) {
   13280:	|     /----- bra.s 132ca <copyStack+0xc6>
		addVarToStack(&a->thisVar, &(to->varData.theStack->first));
   13282:	|  /--|----> movea.l 28(sp),a0
   13286:	|  |  |      move.l 4(a0),d0
   1328a:	|  |  |      move.l d0,d1
   1328c:	|  |  |      move.l 16(sp),d0
   13290:	|  |  |      move.l d1,-(sp)
   13292:	|  |  |      move.l d0,-(sp)
   13294:	|  |  |      jsr 12f3a <addVarToStack>
   1329a:	|  |  |      addq.l #8,sp
		if (to->varData.theStack->last == NULL) {
   1329c:	|  |  |      movea.l 28(sp),a0
   132a0:	|  |  |      movea.l 4(a0),a0
   132a4:	|  |  |      move.l 4(a0),d0
   132a8:	|  |  |  /-- bne.s 132c0 <copyStack+0xbc>
			to->varData.theStack->last = to->varData.theStack->first;
   132aa:	|  |  |  |   movea.l 28(sp),a0
   132ae:	|  |  |  |   movea.l 4(a0),a1
   132b2:	|  |  |  |   movea.l 28(sp),a0
   132b6:	|  |  |  |   movea.l 4(a0),a0
   132ba:	|  |  |  |   move.l (a1),d0
   132bc:	|  |  |  |   move.l d0,4(a0)
		}
		a = a->next;
   132c0:	|  |  |  \-> movea.l 16(sp),a0
   132c4:	|  |  |      move.l 8(a0),16(sp)
	while (a) {
   132ca:	|  |  \----> tst.l 16(sp)
   132ce:	|  \-------- bne.s 13282 <copyStack+0x7e>
	}

	return TRUE;
   132d0:	|            moveq #1,d0
}
   132d2:	\----------> movea.l (sp)+,a6
   132d4:	             lea 16(sp),sp
   132d8:	             rts

000132da <deleteVarFromStack>:

int deleteVarFromStack (const struct variable * va, struct variableStack ** thisStack, BOOL allOfEm) {
   132da:	                lea -20(sp),sp
   132de:	                move.l a6,-(sp)
   132e0:	                move.l 36(sp),d0
   132e4:	                move.w d0,d0
   132e6:	                move.w d0,6(sp)
    struct variableStack ** huntVar = thisStack;
   132ea:	                move.l 32(sp),20(sp)
    struct variableStack * killMe;
    int reply = 0;
   132f0:	                clr.l 16(sp)

    while (*huntVar) {
   132f4:	   /----------- bra.s 13372 <deleteVarFromStack+0x98>
        if (compareVars((*huntVar)->thisVar, *va)) {
   132f6:	/--|----------> movea.l 20(sp),a0
   132fa:	|  |            movea.l (a0),a0
   132fc:	|  |            movea.l 28(sp),a1
   13300:	|  |            move.l 4(a1),-(sp)
   13304:	|  |            move.l (a1),-(sp)
   13306:	|  |            move.l 4(a0),-(sp)
   1330a:	|  |            move.l (a0),-(sp)
   1330c:	|  |            jsr 13128 <compareVars>
   13312:	|  |            lea 16(sp),sp
   13316:	|  |            tst.l d0
   13318:	|  |  /-------- beq.s 13364 <deleteVarFromStack+0x8a>
            killMe = *huntVar;
   1331a:	|  |  |         movea.l 20(sp),a0
   1331e:	|  |  |         move.l (a0),12(sp)
            *huntVar = killMe->next;
   13322:	|  |  |         movea.l 12(sp),a0
   13326:	|  |  |         move.l 8(a0),d0
   1332a:	|  |  |         movea.l 20(sp),a0
   1332e:	|  |  |         move.l d0,(a0)
            unlinkVar(&killMe->thisVar);
   13330:	|  |  |         move.l 12(sp),d0
   13334:	|  |  |         move.l d0,-(sp)
   13336:	|  |  |         jsr 1394c <unlinkVar>
   1333c:	|  |  |         addq.l #4,sp
            FreeVec(killMe);
   1333e:	|  |  |         move.l 12(sp),8(sp)
   13344:	|  |  |         move.l 1b1a2 <SysBase>,d0
   1334a:	|  |  |         movea.l d0,a6
   1334c:	|  |  |         movea.l 8(sp),a1
   13350:	|  |  |         jsr -690(a6)
            if (!allOfEm) return 1;
   13354:	|  |  |         tst.w 6(sp)
   13358:	|  |  |     /-- bne.s 1335e <deleteVarFromStack+0x84>
   1335a:	|  |  |     |   moveq #1,d0
   1335c:	|  |  |  /--|-- bra.s 13380 <deleteVarFromStack+0xa6>
            reply++;
   1335e:	|  |  |  |  \-> addq.l #1,16(sp)
   13362:	|  +--|--|----- bra.s 13372 <deleteVarFromStack+0x98>
        } else {
            huntVar = &((*huntVar)->next);
   13364:	|  |  \--|----> movea.l 20(sp),a0
   13368:	|  |     |      move.l (a0),d0
   1336a:	|  |     |      move.l d0,d1
   1336c:	|  |     |      addq.l #8,d1
   1336e:	|  |     |      move.l d1,20(sp)
    while (*huntVar) {
   13372:	|  \-----|----> movea.l 20(sp),a0
   13376:	|        |      move.l (a0),d0
   13378:	\--------|----- bne.w 132f6 <deleteVarFromStack+0x1c>
        }
    }

    return reply;
   1337c:	         |      move.l 16(sp),d0
}
   13380:	         \----> movea.l (sp)+,a6
   13382:	                lea 20(sp),sp
   13386:	                rts

00013388 <fastArrayGetByIndex>:


struct variable * fastArrayGetByIndex (struct fastArrayHandler * vS, unsigned int theIndex) {
	if (theIndex >= (unsigned int) vS -> size) return NULL;
   13388:	       movea.l 4(sp),a0
   1338c:	       move.l 4(a0),d0
   13390:	       cmp.l 8(sp),d0
   13394:	   /-- bhi.s 1339a <fastArrayGetByIndex+0x12>
   13396:	   |   moveq #0,d0
   13398:	/--|-- bra.s 133a8 <fastArrayGetByIndex+0x20>
	return & vS -> fastVariables[theIndex];
   1339a:	|  \-> movea.l 4(sp),a0
   1339e:	|      move.l (a0),d1
   133a0:	|      move.l 8(sp),d0
   133a4:	|      lsl.l #3,d0
   133a6:	|      add.l d1,d0
}
   133a8:	\----> rts

000133aa <getCostumeFromVar>:

struct persona * getCostumeFromVar(struct variable *thisVar) {
   133aa:	                lea -32(sp),sp
   133ae:	                move.l a6,-(sp)
   133b0:	                move.l a2,-(sp)
    struct persona *p = NULL;
   133b2:	                clr.l 36(sp)

    switch (thisVar->varType) {
   133b6:	                movea.l 44(sp),a0
   133ba:	                move.l (a0),d0
   133bc:	                moveq #8,d1
   133be:	                cmp.l d0,d1
   133c0:	            /-- beq.s 133ce <getCostumeFromVar+0x24>
   133c2:	            |   moveq #9,d1
   133c4:	            |   cmp.l d0,d1
   133c6:	   /--------|-- beq.w 1347c <getCostumeFromVar+0xd2>
   133ca:	/--|--------|-- bra.w 13486 <getCostumeFromVar+0xdc>
        case SVT_ANIM:
            p = AllocVec(sizeof(struct persona), MEMF_ANY);
   133ce:	|  |        \-> moveq #8,d0
   133d0:	|  |            move.l d0,28(sp)
   133d4:	|  |            clr.l 24(sp)
   133d8:	|  |            move.l 1b1a2 <SysBase>,d0
   133de:	|  |            movea.l d0,a6
   133e0:	|  |            move.l 28(sp),d0
   133e4:	|  |            move.l 24(sp),d1
   133e8:	|  |            jsr -684(a6)
   133ec:	|  |            move.l d0,20(sp)
   133f0:	|  |            move.l 20(sp),d0
   133f4:	|  |            move.l d0,36(sp)
            if (!p) return NULL;
   133f8:	|  |        /-- bne.s 13400 <getCostumeFromVar+0x56>
   133fa:	|  |        |   moveq #0,d0
   133fc:	|  |  /-----|-- bra.w 134b0 <getCostumeFromVar+0x106>
            p->numDirections = 1;
   13400:	|  |  |     \-> movea.l 36(sp),a0
   13404:	|  |  |         moveq #1,d1
   13406:	|  |  |         move.l d1,4(a0)
            p->animation = AllocVec(3 * sizeof(struct personaAnimation *), MEMF_ANY);
   1340a:	|  |  |         moveq #12,d0
   1340c:	|  |  |         move.l d0,16(sp)
   13410:	|  |  |         clr.l 12(sp)
   13414:	|  |  |         move.l 1b1a2 <SysBase>,d0
   1341a:	|  |  |         movea.l d0,a6
   1341c:	|  |  |         move.l 16(sp),d0
   13420:	|  |  |         move.l 12(sp),d1
   13424:	|  |  |         jsr -684(a6)
   13428:	|  |  |         move.l d0,8(sp)
   1342c:	|  |  |         move.l 8(sp),d0
   13430:	|  |  |         movea.l 36(sp),a0
   13434:	|  |  |         move.l d0,(a0)
            if (!p->animation) return NULL;
   13436:	|  |  |         movea.l 36(sp),a0
   1343a:	|  |  |         move.l (a0),d0
   1343c:	|  |  |     /-- bne.s 13442 <getCostumeFromVar+0x98>
   1343e:	|  |  |     |   moveq #0,d0
   13440:	|  |  +-----|-- bra.s 134b0 <getCostumeFromVar+0x106>

            for (int iii = 0; iii < 3; iii++) {
   13442:	|  |  |     \-> clr.l 32(sp)
   13446:	|  |  |     /-- bra.s 13472 <getCostumeFromVar+0xc8>
                p->animation[iii] = copyAnim(thisVar->varData.animHandler);
   13448:	|  |  |  /--|-> movea.l 44(sp),a0
   1344c:	|  |  |  |  |   move.l 4(a0),d0
   13450:	|  |  |  |  |   movea.l 36(sp),a0
   13454:	|  |  |  |  |   movea.l (a0),a0
   13456:	|  |  |  |  |   move.l 32(sp),d1
   1345a:	|  |  |  |  |   add.l d1,d1
   1345c:	|  |  |  |  |   add.l d1,d1
   1345e:	|  |  |  |  |   lea (0,a0,d1.l),a2
   13462:	|  |  |  |  |   move.l d0,-(sp)
   13464:	|  |  |  |  |   jsr 852e <copyAnim>
   1346a:	|  |  |  |  |   addq.l #4,sp
   1346c:	|  |  |  |  |   move.l d0,(a2)
            for (int iii = 0; iii < 3; iii++) {
   1346e:	|  |  |  |  |   addq.l #1,32(sp)
   13472:	|  |  |  |  \-> moveq #2,d1
   13474:	|  |  |  |      cmp.l 32(sp),d1
   13478:	|  |  |  \----- bge.s 13448 <getCostumeFromVar+0x9e>
            }
            break;
   1347a:	|  |  |     /-- bra.s 134ac <getCostumeFromVar+0x102>

        case SVT_COSTUME:
            return thisVar->varData.costumeHandler;
   1347c:	|  \--|-----|-> movea.l 44(sp),a0
   13480:	|     |     |   move.l 4(a0),d0
   13484:	|     +-----|-- bra.s 134b0 <getCostumeFromVar+0x106>
            break;

        default:
            KPrintF("Expecting an animation variable; found variable of type", typeName[thisVar->varType]);
   13486:	\-----|-----|-> movea.l 44(sp),a0
   1348a:	      |     |   move.l (a0),d0
   1348c:	      |     |   add.l d0,d0
   1348e:	      |     |   movea.l d0,a1
   13490:	      |     |   adda.l d0,a1
   13492:	      |     |   lea 1b080 <typeName>,a0
   13498:	      |     |   move.l (0,a1,a0.l),d0
   1349c:	      |     |   move.l d0,-(sp)
   1349e:	      |     |   pea 1868f <PutChar+0x214f>
   134a4:	      |     |   jsr 15bf0 <KPrintF>
   134aa:	      |     |   addq.l #8,sp
    }

    return p;
   134ac:	      |     \-> move.l 36(sp),d0
}
   134b0:	      \-------> movea.l (sp)+,a2
   134b2:	                movea.l (sp)+,a6
   134b4:	                lea 32(sp),sp
   134b8:	                rts

000134ba <getSavedGamesStack>:

BOOL getSavedGamesStack(struct stackHandler * sH, char * ext) {
   134ba:	                lea -96(sp),sp
   134be:	                movem.l d2-d3/a6,-(sp)
	char * pattern = joinStrings("*", ext);
   134c2:	                move.l 116(sp),-(sp)
   134c6:	                pea 186c7 <PutChar+0x2187>
   134cc:	                jsr 12c2a <joinStrings>
   134d2:	                addq.l #8,sp
   134d4:	                move.l d0,102(sp)
	if (!pattern) return FALSE;
   134d8:	            /-- bne.s 134e0 <getSavedGamesStack+0x26>
   134da:	            |   clr.w d0
   134dc:	/-----------|-- bra.w 136f4 <getSavedGamesStack+0x23a>

	struct variable newName;
	newName.varType = SVT_NULL;
   134e0:	|           \-> clr.l 14(sp)

	BPTR dirLock = Lock(".", ACCESS_READ);
   134e4:	|               move.l #100041,98(sp)
   134ec:	|               moveq #-2,d0
   134ee:	|               move.l d0,94(sp)
   134f2:	|               move.l 1b1aa <DOSBase>,d0
   134f8:	|               movea.l d0,a6
   134fa:	|               move.l 98(sp),d1
   134fe:	|               move.l 94(sp),d2
   13502:	|               jsr -84(a6)
   13506:	|               move.l d0,90(sp)
   1350a:	|               move.l 90(sp),d0
   1350e:	|               move.l d0,86(sp)
	if (!dirLock) return FALSE;
   13512:	|           /-- bne.s 1351a <getSavedGamesStack+0x60>
   13514:	|           |   clr.w d0
   13516:	+-----------|-- bra.w 136f4 <getSavedGamesStack+0x23a>

	struct FileInfoBlock *fib = (struct FileInfoBlock *)AllocVec(sizeof(struct FileInfoBlock), MEMF_CLEAR);
   1351a:	|           \-> move.l #260,82(sp)
   13522:	|               move.l #65536,78(sp)
   1352a:	|               move.l 1b1a2 <SysBase>,d0
   13530:	|               movea.l d0,a6
   13532:	|               move.l 82(sp),d0
   13536:	|               move.l 78(sp),d1
   1353a:	|               jsr -684(a6)
   1353e:	|               move.l d0,74(sp)
   13542:	|               move.l 74(sp),d0
   13546:	|               move.l d0,70(sp)
	if (!fib) {
   1354a:	|           /-- bne.s 13568 <getSavedGamesStack+0xae>
		UnLock(dirLock);
   1354c:	|           |   move.l 86(sp),22(sp)
   13552:	|           |   move.l 1b1aa <DOSBase>,d0
   13558:	|           |   movea.l d0,a6
   1355a:	|           |   move.l 22(sp),d1
   1355e:	|           |   jsr -90(a6)
		return FALSE;
   13562:	|           |   clr.w d0
   13564:	+-----------|-- bra.w 136f4 <getSavedGamesStack+0x23a>
	}

	BOOL result = FALSE;
   13568:	|           \-> clr.w 106(sp)
	if (Examine(dirLock, fib)) {
   1356c:	|               move.l 86(sp),66(sp)
   13572:	|               move.l 70(sp),62(sp)
   13578:	|               move.l 1b1aa <DOSBase>,d0
   1357e:	|               movea.l d0,a6
   13580:	|               move.l 66(sp),d1
   13584:	|               move.l 62(sp),d2
   13588:	|               jsr -102(a6)
   1358c:	|               move.l d0,58(sp)
   13590:	|               move.l 58(sp),d0
   13594:	|  /----------- beq.w 136a8 <getSavedGamesStack+0x1ee>
		while (ExNext(dirLock, fib)) {
   13598:	|  |        /-- bra.w 13674 <getSavedGamesStack+0x1ba>
			if (!strcmp(fib->fib_FileName + strlen(fib->fib_FileName) - strlen(ext), ext)) {
   1359c:	|  |  /-----|-> move.l 70(sp),d2
   135a0:	|  |  |     |   addq.l #8,d2
   135a2:	|  |  |     |   move.l 70(sp),d0
   135a6:	|  |  |     |   addq.l #8,d0
   135a8:	|  |  |     |   move.l d0,-(sp)
   135aa:	|  |  |     |   jsr 12bea <strlen>
   135b0:	|  |  |     |   addq.l #4,sp
   135b2:	|  |  |     |   move.l d0,d3
   135b4:	|  |  |     |   move.l 116(sp),-(sp)
   135b8:	|  |  |     |   jsr 12bea <strlen>
   135be:	|  |  |     |   addq.l #4,sp
   135c0:	|  |  |     |   move.l d3,d1
   135c2:	|  |  |     |   sub.l d0,d1
   135c4:	|  |  |     |   move.l d2,d0
   135c6:	|  |  |     |   add.l d1,d0
   135c8:	|  |  |     |   move.l 116(sp),-(sp)
   135cc:	|  |  |     |   move.l d0,-(sp)
   135ce:	|  |  |     |   jsr 12baa <strcmp>
   135d4:	|  |  |     |   addq.l #8,sp
   135d6:	|  |  |     |   tst.l d0
   135d8:	|  |  |     +-- bne.w 13674 <getSavedGamesStack+0x1ba>
				fib->fib_FileName[strlen(fib->fib_FileName) - strlen(ext)] = 0;
   135dc:	|  |  |     |   move.l 70(sp),d0
   135e0:	|  |  |     |   addq.l #8,d0
   135e2:	|  |  |     |   move.l d0,-(sp)
   135e4:	|  |  |     |   jsr 12bea <strlen>
   135ea:	|  |  |     |   addq.l #4,sp
   135ec:	|  |  |     |   move.l d0,d2
   135ee:	|  |  |     |   move.l 116(sp),-(sp)
   135f2:	|  |  |     |   jsr 12bea <strlen>
   135f8:	|  |  |     |   addq.l #4,sp
   135fa:	|  |  |     |   move.l d0,d1
   135fc:	|  |  |     |   move.l d2,d0
   135fe:	|  |  |     |   sub.l d1,d0
   13600:	|  |  |     |   movea.l 70(sp),a0
   13604:	|  |  |     |   clr.b (8,a0,d0.l)
				char * decoded = decodeFilename(fib->fib_FileName);
   13608:	|  |  |     |   move.l 70(sp),d0
   1360c:	|  |  |     |   addq.l #8,d0
   1360e:	|  |  |     |   move.l d0,-(sp)
   13610:	|  |  |     |   jsr 118 <decodeFilename>
   13616:	|  |  |     |   addq.l #4,sp
   13618:	|  |  |     |   move.l d0,42(sp)
				makeTextVar(&newName, decoded);
   1361c:	|  |  |     |   move.l 42(sp),-(sp)
   13620:	|  |  |     |   lea 18(sp),a0
   13624:	|  |  |     |   move.l a0,-(sp)
   13626:	|  |  |     |   jsr 13920 <makeTextVar>
   1362c:	|  |  |     |   addq.l #8,sp
				FreeVec(decoded);
   1362e:	|  |  |     |   move.l 42(sp),38(sp)
   13634:	|  |  |     |   move.l 1b1a2 <SysBase>,d0
   1363a:	|  |  |     |   movea.l d0,a6
   1363c:	|  |  |     |   movea.l 38(sp),a1
   13640:	|  |  |     |   jsr -690(a6)
				if (!addVarToStack(&newName, &sH->first)) goto cleanup;
   13644:	|  |  |     |   move.l 112(sp),d0
   13648:	|  |  |     |   move.l d0,-(sp)
   1364a:	|  |  |     |   lea 18(sp),a0
   1364e:	|  |  |     |   move.l a0,-(sp)
   13650:	|  |  |     |   jsr 12f3a <addVarToStack>
   13656:	|  |  |     |   addq.l #8,sp
   13658:	|  |  |     |   tst.w d0
   1365a:	|  |  |  /--|-- beq.s 136ac <getSavedGamesStack+0x1f2>
				if (sH->last == NULL) sH->last = sH->first;
   1365c:	|  |  |  |  |   movea.l 112(sp),a0
   13660:	|  |  |  |  |   move.l 4(a0),d0
   13664:	|  |  |  |  +-- bne.s 13674 <getSavedGamesStack+0x1ba>
   13666:	|  |  |  |  |   movea.l 112(sp),a0
   1366a:	|  |  |  |  |   move.l (a0),d0
   1366c:	|  |  |  |  |   movea.l 112(sp),a0
   13670:	|  |  |  |  |   move.l d0,4(a0)
		while (ExNext(dirLock, fib)) {
   13674:	|  |  |  |  \-> move.l 86(sp),54(sp)
   1367a:	|  |  |  |      move.l 70(sp),50(sp)
   13680:	|  |  |  |      move.l 1b1aa <DOSBase>,d0
   13686:	|  |  |  |      movea.l d0,a6
   13688:	|  |  |  |      move.l 54(sp),d1
   1368c:	|  |  |  |      move.l 50(sp),d2
   13690:	|  |  |  |      jsr -108(a6)
   13694:	|  |  |  |      move.l d0,46(sp)
   13698:	|  |  |  |      move.l 46(sp),d0
   1369c:	|  |  \--|----- bne.w 1359c <getSavedGamesStack+0xe2>
			}
		}
		result = TRUE;
   136a0:	|  |     |      move.w #1,106(sp)
   136a6:	|  |     |  /-- bra.s 136ae <getSavedGamesStack+0x1f4>
	}

cleanup:
   136a8:	|  \-----|--|-> nop
   136aa:	|        |  +-- bra.s 136ae <getSavedGamesStack+0x1f4>
				if (!addVarToStack(&newName, &sH->first)) goto cleanup;
   136ac:	|        \--|-> nop
	FreeVec(fib);
   136ae:	|           \-> move.l 70(sp),34(sp)
   136b4:	|               move.l 1b1a2 <SysBase>,d0
   136ba:	|               movea.l d0,a6
   136bc:	|               movea.l 34(sp),a1
   136c0:	|               jsr -690(a6)
	UnLock(dirLock);
   136c4:	|               move.l 86(sp),30(sp)
   136ca:	|               move.l 1b1aa <DOSBase>,d0
   136d0:	|               movea.l d0,a6
   136d2:	|               move.l 30(sp),d1
   136d6:	|               jsr -90(a6)
	FreeVec(pattern);
   136da:	|               move.l 102(sp),26(sp)
   136e0:	|               move.l 1b1a2 <SysBase>,d0
   136e6:	|               movea.l d0,a6
   136e8:	|               movea.l 26(sp),a1
   136ec:	|               jsr -690(a6)
	return result;
   136f0:	|               move.w 106(sp),d0
}
   136f4:	\-------------> movem.l (sp)+,d2-d3/a6
   136f8:	                lea 96(sp),sp
   136fc:	                rts

000136fe <getValueType>:


BOOL getValueType (int *toHere, enum variableType vT, const struct variable *v) {
   136fe:	       subq.l #8,sp
	//if (! v) return false;
	if (v->varType != vT) {
   13700:	       movea.l 20(sp),a0
   13704:	       move.l (a0),d0
   13706:	       cmp.l 16(sp),d0
   1370a:	/----- beq.s 1376e <getValueType+0x70>
		char * e1 = joinStrings ("Can only perform specified operation on a value which is of type ", typeName[vT]);
   1370c:	|      move.l 16(sp),d0
   13710:	|      add.l d0,d0
   13712:	|      movea.l d0,a1
   13714:	|      adda.l d0,a1
   13716:	|      lea 1b080 <typeName>,a0
   1371c:	|      move.l (0,a1,a0.l),d0
   13720:	|      move.l d0,-(sp)
   13722:	|      pea 186cb <PutChar+0x218b>
   13728:	|      jsr 12c2a <joinStrings>
   1372e:	|      addq.l #8,sp
   13730:	|      move.l d0,4(sp)
		char * e2 = joinStrings ("... value supplied was of type ", typeName[v->varType]);
   13734:	|      movea.l 20(sp),a0
   13738:	|      move.l (a0),d0
   1373a:	|      add.l d0,d0
   1373c:	|      movea.l d0,a1
   1373e:	|      adda.l d0,a1
   13740:	|      lea 1b080 <typeName>,a0
   13746:	|      move.l (0,a1,a0.l),d0
   1374a:	|      move.l d0,-(sp)
   1374c:	|      pea 1870d <PutChar+0x21cd>
   13752:	|      jsr 12c2a <joinStrings>
   13758:	|      addq.l #8,sp
   1375a:	|      move.l d0,(sp)
		KPrintF(e1, e2);
   1375c:	|      move.l (sp),-(sp)
   1375e:	|      move.l 8(sp),-(sp)
   13762:	|      jsr 15bf0 <KPrintF>
   13768:	|      addq.l #8,sp

		return FALSE;
   1376a:	|      clr.w d0
   1376c:	|  /-- bra.s 1377e <getValueType+0x80>
	}
	*toHere = v->varData.intValue;
   1376e:	\--|-> movea.l 20(sp),a0
   13772:	   |   move.l 4(a0),d0
   13776:	   |   movea.l 12(sp),a0
   1377a:	   |   move.l d0,(a0)
	return TRUE;
   1377c:	   |   moveq #1,d0
}
   1377e:	   \-> addq.l #8,sp
   13780:	       rts

00013782 <loadStringToVar>:

BOOL loadStringToVar (struct variable *thisVar, int value) {
	makeTextVar (thisVar, getNumberedString (value));
   13782:	move.l 8(sp),-(sp)
   13786:	jsr 5b42 <getNumberedString>
   1378c:	addq.l #4,sp
   1378e:	move.l d0,-(sp)
   13790:	move.l 8(sp),-(sp)
   13794:	jsr 13920 <makeTextVar>
   1379a:	addq.l #8,sp
	return (BOOL) (thisVar->varData.theString != NULL);
   1379c:	movea.l 4(sp),a0
   137a0:	move.l 4(a0),d0
   137a4:	sne d0
   137a6:	neg.b d0
   137a8:	move.b d0,d0
   137aa:	andi.w #255,d0
}
   137ae:	rts

000137b0 <makeFastArrayFromStack>:
		break;
	}
	return TRUE;
}

BOOL makeFastArrayFromStack (struct variable *to, const struct stackHandler *stacky) {
   137b0:	          subq.l #8,sp
    int size = stackSize(stacky);
   137b2:	          move.l 16(sp),-(sp)
   137b6:	          jsr 1405e <stackSize>
   137bc:	          addq.l #4,sp
   137be:	          move.l d0,4(sp)
    if (!makeFastArraySize(to, size)) return FALSE;
   137c2:	          move.l 4(sp),-(sp)
   137c6:	          move.l 16(sp),-(sp)
   137ca:	          jsr 1381a <makeFastArraySize>
   137d0:	          addq.l #8,sp
   137d2:	          tst.w d0
   137d4:	      /-- bne.s 137da <makeFastArrayFromStack+0x2a>
   137d6:	      |   clr.w d0
   137d8:	/-----|-- bra.s 13816 <makeFastArrayFromStack+0x66>

    // Now let's fill up the new array

    struct variableStack *allV = stacky->first;
   137da:	|     \-> movea.l 16(sp),a0
   137de:	|         move.l (a0),(sp)
    size = 0;
   137e0:	|         clr.l 4(sp)
    while (allV) {
   137e4:	|     /-- bra.s 13810 <makeFastArrayFromStack+0x60>
        copyMain(&allV->thisVar, &to->varData.fastArray->fastVariables[size]);
   137e6:	|  /--|-> movea.l 12(sp),a0
   137ea:	|  |  |   movea.l 4(a0),a0
   137ee:	|  |  |   move.l (a0),d1
   137f0:	|  |  |   move.l 4(sp),d0
   137f4:	|  |  |   lsl.l #3,d0
   137f6:	|  |  |   add.l d0,d1
   137f8:	|  |  |   move.l (sp),d0
   137fa:	|  |  |   move.l d1,-(sp)
   137fc:	|  |  |   move.l d0,-(sp)
   137fe:	|  |  |   jsr 13a9c <copyMain>
   13804:	|  |  |   addq.l #8,sp
        size++;
   13806:	|  |  |   addq.l #1,4(sp)
        allV = allV->next;
   1380a:	|  |  |   movea.l (sp),a0
   1380c:	|  |  |   move.l 8(a0),(sp)
    while (allV) {
   13810:	|  |  \-> tst.l (sp)
   13812:	|  \----- bne.s 137e6 <makeFastArrayFromStack+0x36>
    }
    return TRUE;
   13814:	|         moveq #1,d0
}
   13816:	\-------> addq.l #8,sp
   13818:	          rts

0001381a <makeFastArraySize>:


BOOL makeFastArraySize (struct variable *to, int size) {
   1381a:	          lea -28(sp),sp
   1381e:	          move.l a6,-(sp)
    if (size < 0) {
   13820:	          tst.l 40(sp)
   13824:	      /-- bge.s 1383a <makeFastArraySize+0x20>
		KPrintF("makeFastArraySize: Can't create a fast array with a negative number of elements!");
   13826:	      |   pea 18752 <PutChar+0x2212>
   1382c:	      |   jsr 15bf0 <KPrintF>
   13832:	      |   addq.l #4,sp
		return FALSE;
   13834:	      |   clr.w d0
   13836:	/-----|-- bra.w 13918 <makeFastArraySize+0xfe>
	}		
    unlinkVar(to);
   1383a:	|     \-> move.l 36(sp),-(sp)
   1383e:	|         jsr 1394c <unlinkVar>
   13844:	|         addq.l #4,sp
    to->varType = SVT_FASTARRAY;
   13846:	|         movea.l 36(sp),a0
   1384a:	|         moveq #10,d0
   1384c:	|         move.l d0,(a0)
    to->varData.fastArray = AllocVec(sizeof(struct fastArrayHandler), MEMF_ANY);
   1384e:	|         moveq #12,d0
   13850:	|         move.l d0,24(sp)
   13854:	|         clr.l 20(sp)
   13858:	|         move.l 1b1a2 <SysBase>,d0
   1385e:	|         movea.l d0,a6
   13860:	|         move.l 24(sp),d0
   13864:	|         move.l 20(sp),d1
   13868:	|         jsr -684(a6)
   1386c:	|         move.l d0,16(sp)
   13870:	|         move.l 16(sp),d0
   13874:	|         movea.l 36(sp),a0
   13878:	|         move.l d0,4(a0)
    if (!to->varData.fastArray) return FALSE;
   1387c:	|         movea.l 36(sp),a0
   13880:	|         move.l 4(a0),d0
   13884:	|     /-- bne.s 1388c <makeFastArraySize+0x72>
   13886:	|     |   clr.w d0
   13888:	+-----|-- bra.w 13918 <makeFastArraySize+0xfe>
    to->varData.fastArray->fastVariables = AllocVec(size * sizeof(struct variable), MEMF_ANY);
   1388c:	|     \-> move.l 40(sp),d0
   13890:	|         lsl.l #3,d0
   13892:	|         move.l d0,12(sp)
   13896:	|         clr.l 8(sp)
   1389a:	|         move.l 1b1a2 <SysBase>,d0
   138a0:	|         movea.l d0,a6
   138a2:	|         move.l 12(sp),d0
   138a6:	|         move.l 8(sp),d1
   138aa:	|         jsr -684(a6)
   138ae:	|         move.l d0,4(sp)
   138b2:	|         move.l 4(sp),d0
   138b6:	|         movea.l 36(sp),a0
   138ba:	|         movea.l 4(a0),a0
   138be:	|         move.l d0,(a0)
    if (!to->varData.fastArray->fastVariables) return FALSE;
   138c0:	|         movea.l 36(sp),a0
   138c4:	|         movea.l 4(a0),a0
   138c8:	|         move.l (a0),d0
   138ca:	|     /-- bne.s 138d0 <makeFastArraySize+0xb6>
   138cc:	|     |   clr.w d0
   138ce:	+-----|-- bra.s 13918 <makeFastArraySize+0xfe>
    for (int i = 0; i < size; i++) {
   138d0:	|     \-> clr.l 28(sp)
   138d4:	|     /-- bra.s 138f0 <makeFastArraySize+0xd6>
        to->varData.fastArray->fastVariables[i].varType = SVT_NULL;
   138d6:	|  /--|-> movea.l 36(sp),a0
   138da:	|  |  |   movea.l 4(a0),a0
   138de:	|  |  |   move.l (a0),d1
   138e0:	|  |  |   move.l 28(sp),d0
   138e4:	|  |  |   lsl.l #3,d0
   138e6:	|  |  |   movea.l d1,a0
   138e8:	|  |  |   adda.l d0,a0
   138ea:	|  |  |   clr.l (a0)
    for (int i = 0; i < size; i++) {
   138ec:	|  |  |   addq.l #1,28(sp)
   138f0:	|  |  \-> move.l 28(sp),d0
   138f4:	|  |      cmp.l 40(sp),d0
   138f8:	|  \----- blt.s 138d6 <makeFastArraySize+0xbc>
    }
    to->varData.fastArray->size = size;
   138fa:	|         movea.l 36(sp),a0
   138fe:	|         movea.l 4(a0),a0
   13902:	|         move.l 40(sp),4(a0)
    to->varData.fastArray->timesUsed = 1;
   13908:	|         movea.l 36(sp),a0
   1390c:	|         movea.l 4(a0),a0
   13910:	|         moveq #1,d0
   13912:	|         move.l d0,8(a0)
    return TRUE;
   13916:	|         moveq #1,d0
}
   13918:	\-------> movea.l (sp)+,a6
   1391a:	          lea 28(sp),sp
   1391e:	          rts

00013920 <makeTextVar>:

void makeTextVar (struct variable *thisVar, const char * txt) {
	unlinkVar (thisVar);
   13920:	move.l 4(sp),-(sp)
   13924:	jsr 1394c <unlinkVar>
   1392a:	addq.l #4,sp
	thisVar->varType = SVT_STRING;
   1392c:	movea.l 4(sp),a0
   13930:	moveq #3,d0
   13932:	move.l d0,(a0)
	thisVar->varData.theString = copyString (txt);
   13934:	move.l 8(sp),-(sp)
   13938:	jsr b8 <copyString>
   1393e:	addq.l #4,sp
   13940:	movea.l 4(sp),a0
   13944:	move.l d0,4(a0)
}
   13948:	nop
   1394a:	rts

0001394c <unlinkVar>:

void unlinkVar (struct variable *thisVar) {
   1394c:	                      lea -16(sp),sp
   13950:	                      move.l a6,-(sp)

	switch (thisVar->varType) {
   13952:	                      movea.l 24(sp),a0
   13956:	                      move.l (a0),d0
   13958:	                      moveq #10,d1
   1395a:	                      cmp.l d0,d1
   1395c:	            /-------- beq.w 13a14 <unlinkVar+0xc8>
   13960:	            |         moveq #10,d1
   13962:	            |         cmp.l d0,d1
   13964:	/-----------|-------- bcs.w 13a88 <unlinkVar+0x13c>
   13968:	|           |         moveq #8,d1
   1396a:	|           |         cmp.l d0,d1
   1396c:	|  /--------|-------- beq.w 13a74 <unlinkVar+0x128>
   13970:	|  |        |         moveq #8,d1
   13972:	|  |        |         cmp.l d0,d1
   13974:	+--|--------|-------- bcs.w 13a88 <unlinkVar+0x13c>
   13978:	|  |        |         moveq #3,d1
   1397a:	|  |        |         cmp.l d0,d1
   1397c:	|  |        |     /-- beq.s 13988 <unlinkVar+0x3c>
   1397e:	|  |        |     |   moveq #6,d1
   13980:	|  |        |     |   cmp.l d0,d1
   13982:	|  |        |  /--|-- beq.s 139ae <unlinkVar+0x62>
		case SVT_ANIM:
		deleteAnim (thisVar->varData.animHandler);
		break;

		default:
		break;
   13984:	+--|--------|--|--|-- bra.w 13a88 <unlinkVar+0x13c>
        FreeVec(thisVar->varData.theString);
   13988:	|  |        |  |  \-> movea.l 24(sp),a0
   1398c:	|  |        |  |      move.l 4(a0),4(sp)
   13992:	|  |        |  |      move.l 1b1a2 <SysBase>,d0
   13998:	|  |        |  |      movea.l d0,a6
   1399a:	|  |        |  |      movea.l 4(sp),a1
   1399e:	|  |        |  |      jsr -690(a6)
		thisVar->varData.theString = NULL;
   139a2:	|  |        |  |      movea.l 24(sp),a0
   139a6:	|  |        |  |      clr.l 4(a0)
		break;
   139aa:	|  |  /-----|--|----- bra.w 13a92 <unlinkVar+0x146>
		thisVar->varData.theStack -> timesUsed --;
   139ae:	|  |  |     |  \----> movea.l 24(sp),a0
   139b2:	|  |  |     |         movea.l 4(a0),a0
   139b6:	|  |  |     |         move.l 8(a0),d0
   139ba:	|  |  |     |         subq.l #1,d0
   139bc:	|  |  |     |         move.l d0,8(a0)
		if (thisVar->varData.theStack -> timesUsed <= 0) {
   139c0:	|  |  |     |         movea.l 24(sp),a0
   139c4:	|  |  |     |         movea.l 4(a0),a0
   139c8:	|  |  |     |         move.l 8(a0),d0
   139cc:	|  |  |  /--|-------- bgt.w 13a8c <unlinkVar+0x140>
			while (thisVar->varData.theStack -> first) trimStack (&thisVar->varData.theStack -> first);
   139d0:	|  |  |  |  |     /-- bra.s 139e4 <unlinkVar+0x98>
   139d2:	|  |  |  |  |  /--|-> movea.l 24(sp),a0
   139d6:	|  |  |  |  |  |  |   move.l 4(a0),d0
   139da:	|  |  |  |  |  |  |   move.l d0,-(sp)
   139dc:	|  |  |  |  |  |  |   jsr 14082 <trimStack>
   139e2:	|  |  |  |  |  |  |   addq.l #4,sp
   139e4:	|  |  |  |  |  |  \-> movea.l 24(sp),a0
   139e8:	|  |  |  |  |  |      movea.l 4(a0),a0
   139ec:	|  |  |  |  |  |      move.l (a0),d0
   139ee:	|  |  |  |  |  \----- bne.s 139d2 <unlinkVar+0x86>
			FreeVec(thisVar->varData.theStack);
   139f0:	|  |  |  |  |         movea.l 24(sp),a0
   139f4:	|  |  |  |  |         move.l 4(a0),8(sp)
   139fa:	|  |  |  |  |         move.l 1b1a2 <SysBase>,d0
   13a00:	|  |  |  |  |         movea.l d0,a6
   13a02:	|  |  |  |  |         movea.l 8(sp),a1
   13a06:	|  |  |  |  |         jsr -690(a6)
			thisVar->varData.theStack = NULL;
   13a0a:	|  |  |  |  |         movea.l 24(sp),a0
   13a0e:	|  |  |  |  |         clr.l 4(a0)
		break;
   13a12:	|  |  |  +--|-------- bra.s 13a8c <unlinkVar+0x140>
		thisVar->varData.fastArray -> timesUsed --;
   13a14:	|  |  |  |  \-------> movea.l 24(sp),a0
   13a18:	|  |  |  |            movea.l 4(a0),a0
   13a1c:	|  |  |  |            move.l 8(a0),d0
   13a20:	|  |  |  |            subq.l #1,d0
   13a22:	|  |  |  |            move.l d0,8(a0)
		if (thisVar->varData.theStack -> timesUsed <= 0) {
   13a26:	|  |  |  |            movea.l 24(sp),a0
   13a2a:	|  |  |  |            movea.l 4(a0),a0
   13a2e:	|  |  |  |            move.l 8(a0),d0
   13a32:	|  |  |  |        /-- bgt.s 13a90 <unlinkVar+0x144>
            FreeVec( thisVar->varData.fastArray -> fastVariables);
   13a34:	|  |  |  |        |   movea.l 24(sp),a0
   13a38:	|  |  |  |        |   movea.l 4(a0),a0
   13a3c:	|  |  |  |        |   move.l (a0),16(sp)
   13a40:	|  |  |  |        |   move.l 1b1a2 <SysBase>,d0
   13a46:	|  |  |  |        |   movea.l d0,a6
   13a48:	|  |  |  |        |   movea.l 16(sp),a1
   13a4c:	|  |  |  |        |   jsr -690(a6)
			FreeVec(thisVar->varData.fastArray);
   13a50:	|  |  |  |        |   movea.l 24(sp),a0
   13a54:	|  |  |  |        |   move.l 4(a0),12(sp)
   13a5a:	|  |  |  |        |   move.l 1b1a2 <SysBase>,d0
   13a60:	|  |  |  |        |   movea.l d0,a6
   13a62:	|  |  |  |        |   movea.l 12(sp),a1
   13a66:	|  |  |  |        |   jsr -690(a6)
			thisVar->varData.fastArray = NULL;
   13a6a:	|  |  |  |        |   movea.l 24(sp),a0
   13a6e:	|  |  |  |        |   clr.l 4(a0)
		break;
   13a72:	|  |  |  |        +-- bra.s 13a90 <unlinkVar+0x144>
		deleteAnim (thisVar->varData.animHandler);
   13a74:	|  \--|--|--------|-> movea.l 24(sp),a0
   13a78:	|     |  |        |   move.l 4(a0),d0
   13a7c:	|     |  |        |   move.l d0,-(sp)
   13a7e:	|     |  |        |   jsr 88fa <deleteAnim>
   13a84:	|     |  |        |   addq.l #4,sp
		break;
   13a86:	|     +--|--------|-- bra.s 13a92 <unlinkVar+0x146>
		break;
   13a88:	\-----|--|--------|-> nop
   13a8a:	      +--|--------|-- bra.s 13a92 <unlinkVar+0x146>
		break;
   13a8c:	      |  \--------|-> nop
   13a8e:	      +-----------|-- bra.s 13a92 <unlinkVar+0x146>
		break;
   13a90:	      |           \-> nop
	}
}
   13a92:	      \-------------> nop
   13a94:	                      movea.l (sp)+,a6
   13a96:	                      lea 16(sp),sp
   13a9a:	                      rts

00013a9c <copyMain>:

BOOL copyMain (const struct variable *from, struct variable *to) {
	to->varType = from->varType;
   13a9c:	       movea.l 4(sp),a0
   13aa0:	       move.l (a0),d0
   13aa2:	       movea.l 8(sp),a0
   13aa6:	       move.l d0,(a0)
	switch (to->varType) {
   13aa8:	       movea.l 8(sp),a0
   13aac:	       move.l (a0),d0
   13aae:	       moveq #10,d1
   13ab0:	       cmp.l d0,d1
   13ab2:	/----- bcs.w 13ba4 <copyMain+0x108>
   13ab6:	|      add.l d0,d0
   13ab8:	|      movea.l d0,a0
   13aba:	|      adda.l #80582,a0
   13ac0:	|      move.w (a0),d0
   13ac2:	|      jmp (13ac6 <copyMain+0x2a>,pc,d0.w)
   13ac6:	|      .short 0x00da
   13ac8:	|      ori.b #22,(a6)
   13acc:	|      ori.w #22,(a4)
   13ad0:	|      ori.b #-126,(a6)
   13ad4:	|      ori.b #-68,(a6)
   13ad8:	|      ori.l #2891887,4(a0)
		case SVT_INT:
		case SVT_FUNC:
		case SVT_BUILT:
		case SVT_FILE:
		case SVT_OBJTYPE:
		to->varData.intValue = from->varData.intValue;
   13ae0:	|      move.l 4(a0),d0
   13ae4:	|      movea.l 8(sp),a0
   13ae8:	|      move.l d0,4(a0)
		return TRUE;
   13aec:	|      moveq #1,d0
   13aee:	|  /-- bra.w 13bb6 <copyMain+0x11a>

		case SVT_FASTARRAY:
		to->varData.fastArray = from->varData.fastArray;
   13af2:	|  |   movea.l 4(sp),a0
   13af6:	|  |   move.l 4(a0),d0
   13afa:	|  |   movea.l 8(sp),a0
   13afe:	|  |   move.l d0,4(a0)
		to->varData.fastArray -> timesUsed ++;
   13b02:	|  |   movea.l 8(sp),a0
   13b06:	|  |   movea.l 4(a0),a0
   13b0a:	|  |   move.l 8(a0),d0
   13b0e:	|  |   addq.l #1,d0
   13b10:	|  |   move.l d0,8(a0)
		return TRUE;
   13b14:	|  |   moveq #1,d0
   13b16:	|  +-- bra.w 13bb6 <copyMain+0x11a>

		case SVT_STRING:
		to->varData.theString = copyString (from->varData.theString);
   13b1a:	|  |   movea.l 4(sp),a0
   13b1e:	|  |   move.l 4(a0),d0
   13b22:	|  |   move.l d0,-(sp)
   13b24:	|  |   jsr b8 <copyString>
   13b2a:	|  |   addq.l #4,sp
   13b2c:	|  |   movea.l 8(sp),a0
   13b30:	|  |   move.l d0,4(a0)
		return to->varData.theString ? TRUE : FALSE;
   13b34:	|  |   movea.l 8(sp),a0
   13b38:	|  |   move.l 4(a0),d0
   13b3c:	|  |   sne d0
   13b3e:	|  |   neg.b d0
   13b40:	|  |   move.b d0,d0
   13b42:	|  |   andi.w #255,d0
   13b46:	|  +-- bra.s 13bb6 <copyMain+0x11a>

		case SVT_STACK:
		to->varData.theStack = from->varData.theStack;
   13b48:	|  |   movea.l 4(sp),a0
   13b4c:	|  |   move.l 4(a0),d0
   13b50:	|  |   movea.l 8(sp),a0
   13b54:	|  |   move.l d0,4(a0)
		to->varData.theStack -> timesUsed ++;
   13b58:	|  |   movea.l 8(sp),a0
   13b5c:	|  |   movea.l 4(a0),a0
   13b60:	|  |   move.l 8(a0),d0
   13b64:	|  |   addq.l #1,d0
   13b66:	|  |   move.l d0,8(a0)
		return TRUE;
   13b6a:	|  |   moveq #1,d0
   13b6c:	|  +-- bra.s 13bb6 <copyMain+0x11a>

		case SVT_COSTUME:
		to->varData.costumeHandler = from->varData.costumeHandler;
   13b6e:	|  |   movea.l 4(sp),a0
   13b72:	|  |   move.l 4(a0),d0
   13b76:	|  |   movea.l 8(sp),a0
   13b7a:	|  |   move.l d0,4(a0)
		return TRUE;
   13b7e:	|  |   moveq #1,d0
   13b80:	|  +-- bra.s 13bb6 <copyMain+0x11a>

		case SVT_ANIM:
		to->varData.animHandler = copyAnim (from->varData.animHandler);
   13b82:	|  |   movea.l 4(sp),a0
   13b86:	|  |   move.l 4(a0),d0
   13b8a:	|  |   move.l d0,-(sp)
   13b8c:	|  |   jsr 852e <copyAnim>
   13b92:	|  |   addq.l #4,sp
   13b94:	|  |   movea.l 8(sp),a0
   13b98:	|  |   move.l d0,4(a0)
		return TRUE;
   13b9c:	|  |   moveq #1,d0
   13b9e:	|  +-- bra.s 13bb6 <copyMain+0x11a>

		case SVT_NULL:
		return TRUE;
   13ba0:	|  |   moveq #1,d0
   13ba2:	|  +-- bra.s 13bb6 <copyMain+0x11a>

		default:
		break;
   13ba4:	\--|-> nop
	}
	KPrintF("Unknown value type");
   13ba6:	   |   pea 187a3 <PutChar+0x2263>
   13bac:	   |   jsr 15bf0 <KPrintF>
   13bb2:	   |   addq.l #4,sp
	return FALSE;
   13bb4:	   |   clr.w d0
}
   13bb6:	   \-> rts

00013bb8 <copyVariable>:

BOOL copyVariable (const struct variable *from, struct variable *to) {
	unlinkVar (to);
   13bb8:	move.l 8(sp),-(sp)
   13bbc:	jsr 1394c <unlinkVar>
   13bc2:	addq.l #4,sp
	return copyMain(from, to);
   13bc4:	move.l 8(sp),-(sp)
   13bc8:	move.l 8(sp),-(sp)
   13bcc:	jsr 13a9c <copyMain>
   13bd2:	addq.l #8,sp
}
   13bd4:	rts

00013bd6 <getAnimationFromVar>:

struct personaAnimation * getAnimationFromVar (struct variable *thisVar) {
	if (thisVar->varType == SVT_ANIM)
   13bd6:	       movea.l 4(sp),a0
   13bda:	       move.l (a0),d0
   13bdc:	       moveq #8,d1
   13bde:	       cmp.l d0,d1
   13be0:	   /-- bne.s 13bf6 <getAnimationFromVar+0x20>
		return copyAnim (thisVar->varData.animHandler);
   13be2:	   |   movea.l 4(sp),a0
   13be6:	   |   move.l 4(a0),d0
   13bea:	   |   move.l d0,-(sp)
   13bec:	   |   jsr 852e <copyAnim>
   13bf2:	   |   addq.l #4,sp
   13bf4:	/--|-- bra.s 13c3c <getAnimationFromVar+0x66>

	if (thisVar->varType == SVT_INT && thisVar->varData.intValue == 0)
   13bf6:	|  \-> movea.l 4(sp),a0
   13bfa:	|      move.l (a0),d0
   13bfc:	|      moveq #1,d1
   13bfe:	|      cmp.l d0,d1
   13c00:	|  /-- bne.s 13c14 <getAnimationFromVar+0x3e>
   13c02:	|  |   movea.l 4(sp),a0
   13c06:	|  |   move.l 4(a0),d0
   13c0a:	|  +-- bne.s 13c14 <getAnimationFromVar+0x3e>
		return makeNullAnim();
   13c0c:	|  |   jsr 9cfe <makeNullAnim>
   13c12:	+--|-- bra.s 13c3c <getAnimationFromVar+0x66>

	KPrintF("Expecting an animation variable; found variable of type", typeName[thisVar->varType]);
   13c14:	|  \-> movea.l 4(sp),a0
   13c18:	|      move.l (a0),d0
   13c1a:	|      add.l d0,d0
   13c1c:	|      movea.l d0,a1
   13c1e:	|      adda.l d0,a1
   13c20:	|      lea 1b080 <typeName>,a0
   13c26:	|      move.l (0,a1,a0.l),d0
   13c2a:	|      move.l d0,-(sp)
   13c2c:	|      pea 1868f <PutChar+0x214f>
   13c32:	|      jsr 15bf0 <KPrintF>
   13c38:	|      addq.l #8,sp
	return NULL;
   13c3a:	|      moveq #0,d0
}
   13c3c:	\----> rts

00013c3e <getBoolean>:

BOOL getBoolean (const struct variable *from) {
	switch (from->varType) {
   13c3e:	       movea.l 4(sp),a0
   13c42:	       move.l (a0),d0
   13c44:	       moveq #10,d1
   13c46:	       cmp.l d0,d1
   13c48:	/----- bcs.w 13cce <getBoolean+0x90>
   13c4c:	|      add.l d0,d0
   13c4e:	|      movea.l d0,a0
   13c50:	|      adda.l #80988,a0
   13c56:	|      move.w (a0),d0
   13c58:	|      jmp (13c5c <getBoolean+0x1e>,pc,d0.w)
   13c5c:	|      ori.b #26,(a6)
   13c60:	|      ori.w #68,(114,a2,d0.w)
   13c66:	|      ori.w #46,(114,a2,d0.w)
   13c6c:	|      ori.w #114,(90,a2,d0.w)
		case SVT_NULL:
		return FALSE;
   13c72:	|      clr.w d0
   13c74:	|  /-- bra.s 13cd2 <getBoolean+0x94>

		case SVT_INT:
		return (BOOL) (from->varData.intValue != 0);
   13c76:	|  |   movea.l 4(sp),a0
   13c7a:	|  |   move.l 4(a0),d0
   13c7e:	|  |   sne d0
   13c80:	|  |   neg.b d0
   13c82:	|  |   move.b d0,d0
   13c84:	|  |   andi.w #255,d0
   13c88:	|  +-- bra.s 13cd2 <getBoolean+0x94>

		case SVT_STACK:
		return (BOOL) (from->varData.theStack -> first != NULL);
   13c8a:	|  |   movea.l 4(sp),a0
   13c8e:	|  |   movea.l 4(a0),a0
   13c92:	|  |   move.l (a0),d0
   13c94:	|  |   sne d0
   13c96:	|  |   neg.b d0
   13c98:	|  |   move.b d0,d0
   13c9a:	|  |   andi.w #255,d0
   13c9e:	|  +-- bra.s 13cd2 <getBoolean+0x94>

		case SVT_STRING:
		return (BOOL) (from->varData.theString[0] != 0);
   13ca0:	|  |   movea.l 4(sp),a0
   13ca4:	|  |   movea.l 4(a0),a0
   13ca8:	|  |   move.b (a0),d0
   13caa:	|  |   sne d0
   13cac:	|  |   neg.b d0
   13cae:	|  |   move.b d0,d0
   13cb0:	|  |   andi.w #255,d0
   13cb4:	|  +-- bra.s 13cd2 <getBoolean+0x94>

		case SVT_FASTARRAY:
		return (BOOL) (from->varData.fastArray -> size != 0);
   13cb6:	|  |   movea.l 4(sp),a0
   13cba:	|  |   movea.l 4(a0),a0
   13cbe:	|  |   move.l 4(a0),d0
   13cc2:	|  |   sne d0
   13cc4:	|  |   neg.b d0
   13cc6:	|  |   move.b d0,d0
   13cc8:	|  |   andi.w #255,d0
   13ccc:	|  +-- bra.s 13cd2 <getBoolean+0x94>

		default:
		break;
   13cce:	\--|-> nop
	}
	return TRUE;
   13cd0:	   |   moveq #1,d0
}
   13cd2:	   \-> rts

00013cd4 <getTextFromAnyVar>:

char * getTextFromAnyVar (const struct variable *from) {
   13cd4:	      /----------> lea -76(sp),sp
   13cd8:	      |            move.l a6,-(sp)
	switch (from->varType) {
   13cda:	      |            movea.l 84(sp),a0
   13cde:	      |            move.l (a0),d0
   13ce0:	      |            moveq #10,d1
   13ce2:	      |            cmp.l d0,d1
   13ce4:	/-----|----------- bcs.w 13f82 <getTextFromAnyVar+0x2ae>
   13ce8:	|     |            add.l d0,d0
   13cea:	|     |            movea.l d0,a0
   13cec:	|     |            adda.l #81144,a0
   13cf2:	|     |            move.w (a0),d0
   13cf4:	|     |            jmp (13cf8 <getTextFromAnyVar+0x24>,pc,d0.w)
   13cf8:	|     |            .short 0x028a
   13cfa:	|     |            bset d0,(a0)+
   13cfc:	|     |            .short 0x028a
   13cfe:	|     |            ori.b #-118,(a6)
   13d02:	|     |            andi.b #8,ccr
   13d06:	|     |            andi.w #650,-(a0)
   13d0a:	|     |            .short 0x028a
   13d0c:	|     |            ori.b #111,84(a4)
		case SVT_STRING:
		return copyString (from->varData.theString);
   13d12:	|     |            move.l 4(a0),d0
   13d16:	|     |            move.l d0,-(sp)
   13d18:	|     |            jsr b8 <copyString>
   13d1e:	|     |            addq.l #4,sp
   13d20:	|  /--|----------- bra.w 13fa4 <getTextFromAnyVar+0x2d0>

		case SVT_FASTARRAY:
		{
			char * builder = copyString ("FAST:");
   13d24:	|  |  |            pea 187b6 <PutChar+0x2276>
   13d2a:	|  |  |            jsr b8 <copyString>
   13d30:	|  |  |            addq.l #4,sp
   13d32:	|  |  |            move.l d0,76(sp)
			char * builder2;
			char * grabText;

			for (int i = 0; i < from->varData.fastArray -> size; i ++) {
   13d36:	|  |  |            clr.l 72(sp)
   13d3a:	|  |  |     /----- bra.w 13de4 <getTextFromAnyVar+0x110>
				builder2 = joinStrings (builder, " ");
   13d3e:	|  |  |  /--|----> pea 187bc <PutChar+0x227c>
   13d44:	|  |  |  |  |      move.l 80(sp),-(sp)
   13d48:	|  |  |  |  |      jsr 12c2a <joinStrings>
   13d4e:	|  |  |  |  |      addq.l #8,sp
   13d50:	|  |  |  |  |      move.l d0,60(sp)
				if (! builder2) return NULL;
   13d54:	|  |  |  |  |  /-- bne.s 13d5c <getTextFromAnyVar+0x88>
   13d56:	|  |  |  |  |  |   moveq #0,d0
   13d58:	|  +--|--|--|--|-- bra.w 13fa4 <getTextFromAnyVar+0x2d0>
				FreeVec(builder);
   13d5c:	|  |  |  |  |  \-> move.l 76(sp),56(sp)
   13d62:	|  |  |  |  |      move.l 1b1a2 <SysBase>,d0
   13d68:	|  |  |  |  |      movea.l d0,a6
   13d6a:	|  |  |  |  |      movea.l 56(sp),a1
   13d6e:	|  |  |  |  |      jsr -690(a6)
				grabText = getTextFromAnyVar (&from->varData.fastArray -> fastVariables[i]);
   13d72:	|  |  |  |  |      movea.l 84(sp),a0
   13d76:	|  |  |  |  |      movea.l 4(a0),a0
   13d7a:	|  |  |  |  |      move.l (a0),d1
   13d7c:	|  |  |  |  |      move.l 72(sp),d0
   13d80:	|  |  |  |  |      lsl.l #3,d0
   13d82:	|  |  |  |  |      add.l d1,d0
   13d84:	|  |  |  |  |      move.l d0,-(sp)
   13d86:	|  |  +--|--|----- jsr 13cd4 <getTextFromAnyVar>(pc)
   13d8a:	|  |  |  |  |      addq.l #4,sp
   13d8c:	|  |  |  |  |      move.l d0,52(sp)
				builder = joinStrings (builder2, grabText);
   13d90:	|  |  |  |  |      move.l 52(sp),-(sp)
   13d94:	|  |  |  |  |      move.l 64(sp),-(sp)
   13d98:	|  |  |  |  |      jsr 12c2a <joinStrings>
   13d9e:	|  |  |  |  |      addq.l #8,sp
   13da0:	|  |  |  |  |      move.l d0,76(sp)
				if (! builder) return NULL;
   13da4:	|  |  |  |  |  /-- bne.s 13dac <getTextFromAnyVar+0xd8>
   13da6:	|  |  |  |  |  |   moveq #0,d0
   13da8:	|  +--|--|--|--|-- bra.w 13fa4 <getTextFromAnyVar+0x2d0>
				FreeVec(grabText);
   13dac:	|  |  |  |  |  \-> move.l 52(sp),48(sp)
   13db2:	|  |  |  |  |      move.l 1b1a2 <SysBase>,d0
   13db8:	|  |  |  |  |      movea.l d0,a6
   13dba:	|  |  |  |  |      movea.l 48(sp),a1
   13dbe:	|  |  |  |  |      jsr -690(a6)
				grabText = NULL;
   13dc2:	|  |  |  |  |      clr.l 52(sp)
				FreeVec(builder2);
   13dc6:	|  |  |  |  |      move.l 60(sp),44(sp)
   13dcc:	|  |  |  |  |      move.l 1b1a2 <SysBase>,d0
   13dd2:	|  |  |  |  |      movea.l d0,a6
   13dd4:	|  |  |  |  |      movea.l 44(sp),a1
   13dd8:	|  |  |  |  |      jsr -690(a6)
				builder2 = NULL;
   13ddc:	|  |  |  |  |      clr.l 60(sp)
			for (int i = 0; i < from->varData.fastArray -> size; i ++) {
   13de0:	|  |  |  |  |      addq.l #1,72(sp)
   13de4:	|  |  |  |  \----> movea.l 84(sp),a0
   13de8:	|  |  |  |         movea.l 4(a0),a0
   13dec:	|  |  |  |         move.l 4(a0),d0
   13df0:	|  |  |  |         cmp.l 72(sp),d0
   13df4:	|  |  |  \-------- bgt.w 13d3e <getTextFromAnyVar+0x6a>
			}
			return builder;
   13df8:	|  |  |            move.l 76(sp),d0
   13dfc:	|  +--|----------- bra.w 13fa4 <getTextFromAnyVar+0x2d0>
		}

		case SVT_STACK:
		{
			char * builder = copyString ("ARRAY:");
   13e00:	|  |  |            pea 187be <PutChar+0x227e>
   13e06:	|  |  |            jsr b8 <copyString>
   13e0c:	|  |  |            addq.l #4,sp
   13e0e:	|  |  |            move.l d0,68(sp)
			char * builder2;
			char * grabText;

			struct variableStack * stacky = from->varData.theStack -> first;
   13e12:	|  |  |            movea.l 84(sp),a0
   13e16:	|  |  |            movea.l 4(a0),a0
   13e1a:	|  |  |            move.l (a0),64(sp)

			while (stacky) {
   13e1e:	|  |  |     /----- bra.w 13ec0 <getTextFromAnyVar+0x1ec>
				builder2 = joinStrings (builder, " ");
   13e22:	|  |  |  /--|----> pea 187bc <PutChar+0x227c>
   13e28:	|  |  |  |  |      move.l 72(sp),-(sp)
   13e2c:	|  |  |  |  |      jsr 12c2a <joinStrings>
   13e32:	|  |  |  |  |      addq.l #8,sp
   13e34:	|  |  |  |  |      move.l d0,36(sp)
				if (! builder2) return NULL;
   13e38:	|  |  |  |  |  /-- bne.s 13e40 <getTextFromAnyVar+0x16c>
   13e3a:	|  |  |  |  |  |   moveq #0,d0
   13e3c:	|  +--|--|--|--|-- bra.w 13fa4 <getTextFromAnyVar+0x2d0>
				FreeVec(builder);
   13e40:	|  |  |  |  |  \-> move.l 68(sp),32(sp)
   13e46:	|  |  |  |  |      move.l 1b1a2 <SysBase>,d0
   13e4c:	|  |  |  |  |      movea.l d0,a6
   13e4e:	|  |  |  |  |      movea.l 32(sp),a1
   13e52:	|  |  |  |  |      jsr -690(a6)
				grabText = getTextFromAnyVar (&stacky -> thisVar);
   13e56:	|  |  |  |  |      move.l 64(sp),d0
   13e5a:	|  |  |  |  |      move.l d0,-(sp)
   13e5c:	|  |  \--|--|----- jsr 13cd4 <getTextFromAnyVar>(pc)
   13e60:	|  |     |  |      addq.l #4,sp
   13e62:	|  |     |  |      move.l d0,28(sp)
				builder = joinStrings (builder2, grabText);
   13e66:	|  |     |  |      move.l 28(sp),-(sp)
   13e6a:	|  |     |  |      move.l 40(sp),-(sp)
   13e6e:	|  |     |  |      jsr 12c2a <joinStrings>
   13e74:	|  |     |  |      addq.l #8,sp
   13e76:	|  |     |  |      move.l d0,68(sp)
				if (! builder) return NULL;
   13e7a:	|  |     |  |  /-- bne.s 13e82 <getTextFromAnyVar+0x1ae>
   13e7c:	|  |     |  |  |   moveq #0,d0
   13e7e:	|  +-----|--|--|-- bra.w 13fa4 <getTextFromAnyVar+0x2d0>
				FreeVec(grabText);
   13e82:	|  |     |  |  \-> move.l 28(sp),24(sp)
   13e88:	|  |     |  |      move.l 1b1a2 <SysBase>,d0
   13e8e:	|  |     |  |      movea.l d0,a6
   13e90:	|  |     |  |      movea.l 24(sp),a1
   13e94:	|  |     |  |      jsr -690(a6)
				grabText = NULL;
   13e98:	|  |     |  |      clr.l 28(sp)
				FreeVec(builder2);
   13e9c:	|  |     |  |      move.l 36(sp),20(sp)
   13ea2:	|  |     |  |      move.l 1b1a2 <SysBase>,d0
   13ea8:	|  |     |  |      movea.l d0,a6
   13eaa:	|  |     |  |      movea.l 20(sp),a1
   13eae:	|  |     |  |      jsr -690(a6)
				builder2 = NULL;
   13eb2:	|  |     |  |      clr.l 36(sp)
				stacky = stacky -> next;
   13eb6:	|  |     |  |      movea.l 64(sp),a0
   13eba:	|  |     |  |      move.l 8(a0),64(sp)
			while (stacky) {
   13ec0:	|  |     |  \----> tst.l 64(sp)
   13ec4:	|  |     \-------- bne.w 13e22 <getTextFromAnyVar+0x14e>
			}
			return builder;
   13ec8:	|  |               move.l 68(sp),d0
   13ecc:	|  +-------------- bra.w 13fa4 <getTextFromAnyVar+0x2d0>
		}

		case SVT_INT:
		{
			char * buff = AllocVec(10, MEMF_ANY);
   13ed0:	|  |               moveq #10,d0
   13ed2:	|  |               move.l d0,16(sp)
   13ed6:	|  |               clr.l 12(sp)
   13eda:	|  |               move.l 1b1a2 <SysBase>,d0
   13ee0:	|  |               movea.l d0,a6
   13ee2:	|  |               move.l 16(sp),d0
   13ee6:	|  |               move.l 12(sp),d1
   13eea:	|  |               jsr -684(a6)
   13eee:	|  |               move.l d0,8(sp)
   13ef2:	|  |               move.l 8(sp),d0
   13ef6:	|  |               move.l d0,4(sp)
			if (! buff) {
   13efa:	|  |           /-- bne.s 13f10 <getTextFromAnyVar+0x23c>
				KPrintF("getTextFromAnyVar: Cannot allocate Memory");
   13efc:	|  |           |   pea 187c5 <PutChar+0x2285>
   13f02:	|  |           |   jsr 15bf0 <KPrintF>
   13f08:	|  |           |   addq.l #4,sp
				return NULL;
   13f0a:	|  |           |   moveq #0,d0
   13f0c:	|  +-----------|-- bra.w 13fa4 <getTextFromAnyVar+0x2d0>
			}
			sprintf (buff, "%i", from->varData.intValue);
   13f10:	|  |           \-> movea.l 84(sp),a0
   13f14:	|  |               move.l 4(a0),d0
   13f18:	|  |               move.l d0,-(sp)
   13f1a:	|  |               pea 187ef <PutChar+0x22af>
   13f20:	|  |               move.l 12(sp),-(sp)
   13f24:	|  |               jsr 12f08 <sprintf>
   13f2a:	|  |               lea 12(sp),sp
			return buff;
   13f2e:	|  |               move.l 4(sp),d0
   13f32:	|  +-------------- bra.s 13fa4 <getTextFromAnyVar+0x2d0>
		}

		case SVT_FILE:
		{

			return joinStrings ("", resourceNameFromNum (from->varData.intValue));
   13f34:	|  |               movea.l 84(sp),a0
   13f38:	|  |               move.l 4(a0),d0
   13f3c:	|  |               move.l d0,-(sp)
   13f3e:	|  |               jsr 2ffa <resourceNameFromNum>
   13f44:	|  |               addq.l #4,sp
   13f46:	|  |               move.l d0,-(sp)
   13f48:	|  |               pea 1712f <PutChar+0xbef>
   13f4e:	|  |               jsr 12c2a <joinStrings>
   13f54:	|  |               addq.l #8,sp
   13f56:	|  +-------------- bra.s 13fa4 <getTextFromAnyVar+0x2d0>
		}

		case SVT_OBJTYPE:
		{
			struct objectType * thisType = findObjectType (from->varData.intValue);
   13f58:	|  |               movea.l 84(sp),a0
   13f5c:	|  |               move.l 4(a0),d0
   13f60:	|  |               move.l d0,-(sp)
   13f62:	|  |               jsr c4f6 <findObjectType>
   13f68:	|  |               addq.l #4,sp
   13f6a:	|  |               move.l d0,40(sp)
			if (thisType) return copyString (thisType -> screenName);
   13f6e:	+--|-------------- beq.s 13f82 <getTextFromAnyVar+0x2ae>
   13f70:	|  |               movea.l 40(sp),a0
   13f74:	|  |               move.l (a0),d0
   13f76:	|  |               move.l d0,-(sp)
   13f78:	|  |               jsr b8 <copyString>
   13f7e:	|  |               addq.l #4,sp
   13f80:	|  +-------------- bra.s 13fa4 <getTextFromAnyVar+0x2d0>
		}

		default:
		break;
   13f82:	\--|-------------> nop
	}

	return copyString (typeName[from->varType]);
   13f84:	   |               movea.l 84(sp),a0
   13f88:	   |               move.l (a0),d0
   13f8a:	   |               add.l d0,d0
   13f8c:	   |               movea.l d0,a1
   13f8e:	   |               adda.l d0,a1
   13f90:	   |               lea 1b080 <typeName>,a0
   13f96:	   |               move.l (0,a1,a0.l),d0
   13f9a:	   |               move.l d0,-(sp)
   13f9c:	   |               jsr b8 <copyString>
   13fa2:	   |               addq.l #4,sp
}
   13fa4:	   \-------------> movea.l (sp)+,a6
   13fa6:	                   lea 76(sp),sp
   13faa:	                   rts

00013fac <newAnimationVariable>:


void newAnimationVariable (struct variable *thisVar, struct personaAnimation * i) {
	unlinkVar (thisVar);
   13fac:	move.l 4(sp),-(sp)
   13fb0:	jsr 1394c <unlinkVar>
   13fb6:	addq.l #4,sp
	thisVar->varType = SVT_ANIM;
   13fb8:	movea.l 4(sp),a0
   13fbc:	moveq #8,d0
   13fbe:	move.l d0,(a0)
	thisVar->varData.animHandler = i;
   13fc0:	movea.l 4(sp),a0
   13fc4:	move.l 8(sp),4(a0)
}
   13fca:	nop
   13fcc:	rts

00013fce <newCostumeVariable>:

void newCostumeVariable (struct variable * thisVar, struct persona * i) {
	unlinkVar(thisVar);
   13fce:	move.l 4(sp),-(sp)
   13fd2:	jsr 1394c <unlinkVar>
   13fd8:	addq.l #4,sp
	thisVar->varType = SVT_COSTUME;
   13fda:	movea.l 4(sp),a0
   13fde:	moveq #9,d0
   13fe0:	move.l d0,(a0)
	thisVar->varData.costumeHandler = i;
   13fe2:	movea.l 4(sp),a0
   13fe6:	move.l 8(sp),4(a0)
}
   13fec:	nop
   13fee:	rts

00013ff0 <setVariable>:

void setVariable (struct variable *thisVar, enum variableType vT, int value) {
	unlinkVar (thisVar);
   13ff0:	move.l 4(sp),-(sp)
   13ff4:	jsr 1394c <unlinkVar>
   13ffa:	addq.l #4,sp
	thisVar->varType = vT;
   13ffc:	movea.l 4(sp),a0
   14000:	move.l 8(sp),(a0)
	thisVar->varData.intValue = value;
   14004:	movea.l 4(sp),a0
   14008:	move.l 12(sp),4(a0)
}
   1400e:	nop
   14010:	rts

00014012 <stackGetByIndex>:

struct variable * stackGetByIndex (struct variableStack * vS, unsigned int theIndex) {
    while (theIndex--) {
   14012:	      /-- bra.s 14024 <stackGetByIndex+0x12>
        vS = vS->next;
   14014:	/-----|-> movea.l 4(sp),a0
   14018:	|     |   move.l 8(a0),4(sp)
        if (!vS) {
   1401e:	|     +-- bne.s 14024 <stackGetByIndex+0x12>
            return NULL;
   14020:	|     |   moveq #0,d0
   14022:	|  /--|-- bra.s 14038 <stackGetByIndex+0x26>
    while (theIndex--) {
   14024:	|  |  \-> move.l 8(sp),d0
   14028:	|  |      move.l d0,d1
   1402a:	|  |      subq.l #1,d1
   1402c:	|  |      move.l d1,8(sp)
   14030:	|  |      tst.l d0
   14032:	\--|----- bne.s 14014 <stackGetByIndex+0x2>
        }
    }
    return &(vS->thisVar);
   14034:	   |      move.l 4(sp),d0
}
   14038:	   \----> rts

0001403a <stackFindLast>:

// Would be a LOT better just to keep this up to date in deletevarfromstack function... ah well
struct variableStack * stackFindLast (struct variableStack * hunt) {
	if (hunt == NULL)
   1403a:	          tst.l 4(sp)
   1403e:	      /-- bne.s 1404e <stackFindLast+0x14>
		return NULL;
   14040:	      |   moveq #0,d0
   14042:	/-----|-- bra.s 1405c <stackFindLast+0x22>

	while (hunt->next)
		hunt = hunt->next;
   14044:	|  /--|-> movea.l 4(sp),a0
   14048:	|  |  |   move.l 8(a0),4(sp)
	while (hunt->next)
   1404e:	|  |  \-> movea.l 4(sp),a0
   14052:	|  |      move.l 8(a0),d0
   14056:	|  \----- bne.s 14044 <stackFindLast+0xa>

	return hunt;
   14058:	|         move.l 4(sp),d0
}
   1405c:	\-------> rts

0001405e <stackSize>:

int stackSize (const struct stackHandler * me) {
   1405e:	       subq.l #8,sp
	int r = 0;
   14060:	       clr.l 4(sp)
	struct variableStack * a = me -> first;
   14064:	       movea.l 12(sp),a0
   14068:	       move.l (a0),(sp)
	while (a) {
   1406a:	   /-- bra.s 14076 <stackSize+0x18>
		r ++;
   1406c:	/--|-> addq.l #1,4(sp)
		a = a -> next;
   14070:	|  |   movea.l (sp),a0
   14072:	|  |   move.l 8(a0),(sp)
	while (a) {
   14076:	|  \-> tst.l (sp)
   14078:	\----- bne.s 1406c <stackSize+0xe>
	}
	return r;
   1407a:	       move.l 4(sp),d0
}
   1407e:	       addq.l #8,sp
   14080:	       rts

00014082 <trimStack>:

void trimStack (struct variableStack ** stack) {
   14082:	subq.l #8,sp
   14084:	move.l a6,-(sp)

	struct variableStack* killMe = *stack;
   14086:	movea.l 16(sp),a0
   1408a:	move.l (a0),8(sp)

	*stack = (*stack)->next;
   1408e:	movea.l 16(sp),a0
   14092:	movea.l (a0),a0
   14094:	move.l 8(a0),d0
   14098:	movea.l 16(sp),a0
   1409c:	move.l d0,(a0)

	// When calling this, we've ALWAYS checked that stack != NULL
	unlinkVar (&(killMe -> thisVar));
   1409e:	move.l 8(sp),d0
   140a2:	move.l d0,-(sp)
   140a4:	jsr 1394c <unlinkVar>
   140aa:	addq.l #4,sp
	FreeVec(killMe);
   140ac:	move.l 8(sp),4(sp)
   140b2:	move.l 1b1a2 <SysBase>,d0
   140b8:	movea.l d0,a6
   140ba:	movea.l 4(sp),a1
   140be:	jsr -690(a6)
   140c2:	nop
   140c4:	movea.l (sp)+,a6
   140c6:	addq.l #8,sp
   140c8:	rts

000140ca <freeze>:
extern BOOL backdropExists;

struct frozenStuffStruct * frozenStuff = NULL;


BOOL freeze () {
   140ca:	       lea -52(sp),sp
   140ce:	       move.l a6,-(sp)
	KPrintF("calling freeze()\n");
   140d0:	       pea 187f2 <PutChar+0x22b2>
   140d6:	       jsr 15bf0 <KPrintF>
   140dc:	       addq.l #4,sp

	struct frozenStuffStruct * newFreezer = (struct frozenStuffStruct *) AllocVec(sizeof(struct frozenStuffStruct), MEMF_ANY);
   140de:	       moveq #64,d0
   140e0:	       move.l d0,52(sp)
   140e4:	       clr.l 48(sp)
   140e8:	       move.l 1b1a2 <SysBase>,d0
   140ee:	       movea.l d0,a6
   140f0:	       move.l 52(sp),d0
   140f4:	       move.l 48(sp),d1
   140f8:	       jsr -684(a6)
   140fc:	       move.l d0,44(sp)
   14100:	       move.l 44(sp),d0
   14104:	       move.l d0,40(sp)
	if (!newFreezer) return FALSE;
   14108:	   /-- bne.s 14110 <freeze+0x46>
   1410a:	   |   clr.w d0
   1410c:	/--|-- bra.w 14286 <freeze+0x1bc>

	CstFreeze();
   14110:	|  \-> jsr 15b0 <CstFreeze>

	// Grab a copy of the current scene
	//ToDo: Amiga Graphics handling here	

	int picWidth = sceneWidth;
   14116:	|      move.l 1b296 <sceneWidth>,d0
   1411c:	|      move.l d0,36(sp)
	int picHeight = sceneHeight;	
   14120:	|      move.l 1b29a <sceneHeight>,d0
   14126:	|      move.l d0,32(sp)



	newFreezer -> sceneWidth = sceneWidth;
   1412a:	|      move.l 1b296 <sceneWidth>,d0
   14130:	|      movea.l 40(sp),a0
   14134:	|      move.l d0,48(a0)
	newFreezer -> sceneHeight = sceneHeight;
   14138:	|      move.l 1b29a <sceneHeight>,d0
   1413e:	|      movea.l 40(sp),a0
   14142:	|      move.l d0,52(a0)
	newFreezer -> cameraX = cameraX;
   14146:	|      move.l 1b2b4 <cameraX>,d0
   1414c:	|      movea.l 40(sp),a0
   14150:	|      move.l d0,40(a0)
	newFreezer -> cameraY = cameraY;
   14154:	|      move.l 1b2b8 <cameraY>,d0
   1415a:	|      movea.l 40(sp),a0
   1415e:	|      move.l d0,44(a0)
	newFreezer -> cameraZoom = cameraZoom;
   14162:	|      move.l 1ab42 <cameraZoom>,d0
   14168:	|      movea.l 40(sp),a0
   1416c:	|      move.l d0,56(a0)
	// resizeBackdrop kills parallax stuff, light map, z-buffer...
	/*if (! resizeBackdrop (winWidth, winHeight)) {
		KPrintF("Can't create new temporary backdrop buffer");
	}*/

	backdropExists = TRUE;
   14170:	|      move.w #1,1b2a2 <backdropExists>

	newFreezer -> allPeople = allPeople;
   14178:	|      move.l 1b25a <allPeople>,d0
   1417e:	|      movea.l 40(sp),a0
   14182:	|      move.l d0,(a0)
	allPeople = NULL;
   14184:	|      clr.l 1b25a <allPeople>

	struct statusStuff * newStatusStuff = (struct statusStuff *) AllocVec(sizeof(struct statusStuff), MEMF_ANY);
   1418a:	|      moveq #42,d0
   1418c:	|      move.l d0,28(sp)
   14190:	|      clr.l 24(sp)
   14194:	|      move.l 1b1a2 <SysBase>,d0
   1419a:	|      movea.l d0,a6
   1419c:	|      move.l 28(sp),d0
   141a0:	|      move.l 24(sp),d1
   141a4:	|      jsr -684(a6)
   141a8:	|      move.l d0,20(sp)
   141ac:	|      move.l 20(sp),d0
   141b0:	|      move.l d0,16(sp)
	if (!newStatusStuff) return FALSE;	
   141b4:	|  /-- bne.s 141bc <freeze+0xf2>
   141b6:	|  |   clr.w d0
   141b8:	+--|-- bra.w 14286 <freeze+0x1bc>

	newFreezer -> allScreenRegions = allScreenRegions;
   141bc:	|  \-> move.l 1b302 <allScreenRegions>,d0
   141c2:	|      movea.l 40(sp),a0
   141c6:	|      move.l d0,4(a0)
	allScreenRegions = NULL;
   141ca:	|      clr.l 1b302 <allScreenRegions>
	overRegion = NULL;
   141d0:	|      clr.l 1b306 <overRegion>

	newFreezer -> mouseCursorAnim = mouseCursorAnim;
   141d6:	|      move.l 1b0aa <mouseCursorAnim>,d0
   141dc:	|      movea.l 40(sp),a0
   141e0:	|      move.l d0,32(a0)
	newFreezer -> mouseCursorFrameNum = mouseCursorFrameNum;
   141e4:	|      move.l 1b0ae <mouseCursorFrameNum>,d0
   141ea:	|      movea.l 40(sp),a0
   141ee:	|      move.l d0,36(a0)
	mouseCursorAnim = makeNullAnim ();
   141f2:	|      jsr 9cfe <makeNullAnim>
   141f8:	|      move.l d0,1b0aa <mouseCursorAnim>
	mouseCursorFrameNum = 0;
   141fe:	|      clr.l 1b0ae <mouseCursorFrameNum>

	newFreezer -> speech = speech;
   14204:	|      move.l 1b1fe <speech>,d0
   1420a:	|      movea.l 40(sp),a0
   1420e:	|      move.l d0,20(a0)
	initSpeech ();
   14212:	|      jsr 6d60 <initSpeech>

	newFreezer -> currentEvents = (struct eventhandlers *) AllocVec(sizeof(struct eventHandlers), MEMF_ANY);
   14218:	|      moveq #28,d0
   1421a:	|      move.l d0,12(sp)
   1421e:	|      clr.l 8(sp)
   14222:	|      move.l 1b1a2 <SysBase>,d0
   14228:	|      movea.l d0,a6
   1422a:	|      move.l 12(sp),d0
   1422e:	|      move.l 8(sp),d1
   14232:	|      jsr -684(a6)
   14236:	|      move.l d0,4(sp)
   1423a:	|      move.l 4(sp),d0
   1423e:	|      movea.l 40(sp),a0
   14242:	|      move.l d0,28(a0)
	if (!newFreezer -> currentEvents) return FALSE;
   14246:	|      movea.l 40(sp),a0
   1424a:	|      move.l 28(a0),d0
   1424e:	|  /-- bne.s 14254 <freeze+0x18a>
   14250:	|  |   clr.w d0
   14252:	+--|-- bra.s 14286 <freeze+0x1bc>
	memset (newFreezer -> currentEvents, 0, sizeof(struct eventHandlers));
   14254:	|  \-> movea.l 40(sp),a0
   14258:	|      move.l 28(a0),d0
   1425c:	|      pea 1c <_start+0x1c>
   14260:	|      clr.l -(sp)
   14262:	|      move.l d0,-(sp)
   14264:	|      jsr 15b74 <memset>
   1426a:	|      lea 12(sp),sp

	newFreezer -> next = frozenStuff;
   1426e:	|      move.l 1b2ee <frozenStuff>,d0
   14274:	|      movea.l 40(sp),a0
   14278:	|      move.l d0,60(a0)
	frozenStuff = newFreezer;
   1427c:	|      move.l 40(sp),1b2ee <frozenStuff>

	return TRUE;
   14284:	|      moveq #1,d0
}
   14286:	\----> movea.l (sp)+,a6
   14288:	       lea 52(sp),sp
   1428c:	       rts

0001428e <isInFont>:

ULONG * fontTable = NULL;
unsigned int fontTableSize = 0;

BOOL isInFont (char * theText) {
	KPrintF("isInFont: Not implemented yet on Amiga"); //Todo: Implement on Amiga
   1428e:	pea 18804 <PutChar+0x22c4>
   14294:	jsr 15bf0 <KPrintF>
   1429a:	addq.l #4,sp
	return FALSE;
   1429c:	clr.w d0
}
   1429e:	rts

000142a0 <stringWidth>:

int stringWidth (char * theText) {
   142a0:	       subq.l #8,sp
	int a = 0;
   142a2:	       clr.l 4(sp)
    ULONG c;
	int xOff = 0;
   142a6:	       clr.l (sp)

	if (! fontTableSize) return 0;
   142a8:	       move.l 1b2fe <fontTableSize>,d0
   142ae:	/----- bne.s 142b4 <stringWidth+0x14>
   142b0:	|      moveq #0,d0
   142b2:	|  /-- bra.s 142b6 <stringWidth+0x16>
	/*while (theText[a]) {
        c = u8_nextchar(theText, &a);
		xOff += theFont.sprites[fontInTable(c)].width + fontSpace;
	}Todo: Amigize this*/
	
	return xOff;
   142b4:	\--|-> move.l (sp),d0
}
   142b6:	   \-> addq.l #8,sp
   142b8:	       rts

000142ba <loadFont>:

	FreeVec(fontOrderString);
	fontOrderString = copyString(charOrder);*/

	//forgetSpriteBank(theFont);
	KPrintF("loadFont: Not implemented on Amiga");	
   142ba:	pea 1882b <PutChar+0x22eb>
   142c0:	jsr 15bf0 <KPrintF>
   142c6:	addq.l #4,sp
		return FALSE;
	}*/

	//numFontColours = theFont.myPalette.total;*/
	//fontHeight = h;
	return TRUE;
   142c8:	moveq #1,d0
}
   142ca:	rts

000142cc <addScreenRegion>:
struct screenRegion * allScreenRegions = NULL;
struct screenRegion * overRegion = NULL;



BOOL addScreenRegion(int x1, int y1, int x2, int y2, int sX, int sY, int di, int objectNum) {
   142cc:	       lea -16(sp),sp
   142d0:	       move.l a6,-(sp)
    struct screenRegion *newRegion = AllocVec(sizeof(struct screenRegion), MEMF_ANY);
   142d2:	       moveq #36,d0
   142d4:	       move.l d0,16(sp)
   142d8:	       clr.l 12(sp)
   142dc:	       move.l 1b1a2 <SysBase>,d0
   142e2:	       movea.l d0,a6
   142e4:	       move.l 16(sp),d0
   142e8:	       move.l 12(sp),d1
   142ec:	       jsr -684(a6)
   142f0:	       move.l d0,8(sp)
   142f4:	       move.l 8(sp),d0
   142f8:	       move.l d0,4(sp)
    if (!newRegion) return FALSE;
   142fc:	   /-- bne.s 14304 <addScreenRegion+0x38>
   142fe:	   |   clr.w d0
   14300:	/--|-- bra.w 14384 <addScreenRegion+0xb8>
    newRegion->di = di;
   14304:	|  \-> movea.l 4(sp),a0
   14308:	|      move.l 48(sp),24(a0)
    newRegion->x1 = x1;
   1430e:	|      movea.l 4(sp),a0
   14312:	|      move.l 24(sp),(a0)
    newRegion->y1 = y1;
   14316:	|      movea.l 4(sp),a0
   1431a:	|      move.l 28(sp),4(a0)
    newRegion->x2 = x2;
   14320:	|      movea.l 4(sp),a0
   14324:	|      move.l 32(sp),8(a0)
    newRegion->y2 = y2;
   1432a:	|      movea.l 4(sp),a0
   1432e:	|      move.l 36(sp),12(a0)
    newRegion->sX = sX;
   14334:	|      movea.l 4(sp),a0
   14338:	|      move.l 40(sp),16(a0)
    newRegion->sY = sY;
   1433e:	|      movea.l 4(sp),a0
   14342:	|      move.l 44(sp),20(a0)
    newRegion->thisType = loadObjectType(objectNum);
   14348:	|      move.l 52(sp),-(sp)
   1434c:	|      jsr c5e6 <loadObjectType>
   14352:	|      addq.l #4,sp
   14354:	|      movea.l 4(sp),a0
   14358:	|      move.l d0,28(a0)
    newRegion->next = allScreenRegions;
   1435c:	|      move.l 1b302 <allScreenRegions>,d0
   14362:	|      movea.l 4(sp),a0
   14366:	|      move.l d0,32(a0)
    allScreenRegions = newRegion;
   1436a:	|      move.l 4(sp),1b302 <allScreenRegions>
    return (BOOL) (newRegion->thisType != NULL);
   14372:	|      movea.l 4(sp),a0
   14376:	|      move.l 28(a0),d0
   1437a:	|      sne d0
   1437c:	|      neg.b d0
   1437e:	|      move.b d0,d0
   14380:	|      andi.w #255,d0
}
   14384:	\----> movea.l (sp)+,a6
   14386:	       lea 16(sp),sp
   1438a:	       rts

0001438c <getOverRegion>:

void getOverRegion () {
   1438c:	             subq.l #4,sp
	struct screenRegion * thisRegion = allScreenRegions;
   1438e:	             move.l 1b302 <allScreenRegions>,(sp)
	while (thisRegion) {
   14394:	   /-------- bra.s 14402 <getOverRegion+0x76>
		if ((input.mouseX >= thisRegion -> x1 - cameraX) && (input.mouseY >= thisRegion -> y1 - cameraY) &&
   14396:	/--|-------> move.l 1b15e <input+0xa>,d0
   1439c:	|  |         movea.l (sp),a0
   1439e:	|  |         movea.l (a0),a0
   143a0:	|  |         move.l 1b2b4 <cameraX>,d1
   143a6:	|  |         suba.l d1,a0
   143a8:	|  |         cmpa.l d0,a0
   143aa:	|  |  /----- bgt.s 143fc <getOverRegion+0x70>
   143ac:	|  |  |      move.l 1b162 <input+0xe>,d0
   143b2:	|  |  |      movea.l (sp),a0
   143b4:	|  |  |      movea.l 4(a0),a0
   143b8:	|  |  |      move.l 1b2b8 <cameraY>,d1
   143be:	|  |  |      suba.l d1,a0
   143c0:	|  |  |      cmpa.l d0,a0
   143c2:	|  |  +----- bgt.s 143fc <getOverRegion+0x70>
			 (input.mouseX <= thisRegion -> x2 - cameraX) && (input.mouseY <= thisRegion -> y2 - cameraY)) {
   143c4:	|  |  |      move.l 1b15e <input+0xa>,d0
   143ca:	|  |  |      movea.l (sp),a0
   143cc:	|  |  |      movea.l 8(a0),a0
   143d0:	|  |  |      move.l 1b2b4 <cameraX>,d1
   143d6:	|  |  |      suba.l d1,a0
		if ((input.mouseX >= thisRegion -> x1 - cameraX) && (input.mouseY >= thisRegion -> y1 - cameraY) &&
   143d8:	|  |  |      cmpa.l d0,a0
   143da:	|  |  +----- blt.s 143fc <getOverRegion+0x70>
			 (input.mouseX <= thisRegion -> x2 - cameraX) && (input.mouseY <= thisRegion -> y2 - cameraY)) {
   143dc:	|  |  |      move.l 1b162 <input+0xe>,d0
   143e2:	|  |  |      movea.l (sp),a0
   143e4:	|  |  |      movea.l 12(a0),a0
   143e8:	|  |  |      move.l 1b2b8 <cameraY>,d1
   143ee:	|  |  |      suba.l d1,a0
   143f0:	|  |  |      cmpa.l d0,a0
   143f2:	|  |  +----- blt.s 143fc <getOverRegion+0x70>
			overRegion = thisRegion;
   143f4:	|  |  |      move.l (sp),1b306 <overRegion>
			return;
   143fa:	|  |  |  /-- bra.s 1440e <getOverRegion+0x82>
		}
		thisRegion = thisRegion -> next;
   143fc:	|  |  \--|-> movea.l (sp),a0
   143fe:	|  |     |   move.l 32(a0),(sp)
	while (thisRegion) {
   14402:	|  \-----|-> tst.l (sp)
   14404:	\--------|-- bne.s 14396 <getOverRegion+0xa>
	}
	overRegion = NULL;
   14406:	         |   clr.l 1b306 <overRegion>
	return;
   1440c:	         |   nop
}
   1440e:	         \-> addq.l #4,sp
   14410:	             rts

00014412 <getRegionForObject>:


struct screenRegion * getRegionForObject (int obj) {
   14412:	             subq.l #4,sp
	struct screenRegion * thisRegion = allScreenRegions;
   14414:	             move.l 1b302 <allScreenRegions>,(sp)

	while (thisRegion) {
   1441a:	   /-------- bra.s 14436 <getRegionForObject+0x24>
		if (obj == thisRegion -> thisType -> objectNum) {
   1441c:	/--|-------> movea.l (sp),a0
   1441e:	|  |         movea.l 28(a0),a0
   14422:	|  |         move.l 4(a0),d0
   14426:	|  |         cmp.l 8(sp),d0
   1442a:	|  |     /-- bne.s 14430 <getRegionForObject+0x1e>
			return thisRegion;
   1442c:	|  |     |   move.l (sp),d0
   1442e:	|  |  /--|-- bra.s 1443c <getRegionForObject+0x2a>
		}
		thisRegion = thisRegion -> next;
   14430:	|  |  |  \-> movea.l (sp),a0
   14432:	|  |  |      move.l 32(a0),(sp)
	while (thisRegion) {
   14436:	|  \--|----> tst.l (sp)
   14438:	\-----|----- bne.s 1441c <getRegionForObject+0xa>
	}

	return NULL;
   1443a:	      |      moveq #0,d0
}
   1443c:	      \----> addq.l #4,sp
   1443e:	             rts

00014440 <killAllRegions>:

void killAllRegions () {
   14440:	       subq.l #8,sp
   14442:	       move.l a6,-(sp)
	struct screenRegion * killRegion;
	while (allScreenRegions) {
   14444:	   /-- bra.s 14486 <killAllRegions+0x46>
		killRegion = allScreenRegions;
   14446:	/--|-> move.l 1b302 <allScreenRegions>,8(sp)
		allScreenRegions = allScreenRegions -> next;
   1444e:	|  |   movea.l 1b302 <allScreenRegions>,a0
   14454:	|  |   move.l 32(a0),d0
   14458:	|  |   move.l d0,1b302 <allScreenRegions>
		removeObjectType (killRegion -> thisType);
   1445e:	|  |   movea.l 8(sp),a0
   14462:	|  |   move.l 28(a0),d0
   14466:	|  |   move.l d0,-(sp)
   14468:	|  |   jsr c89e <removeObjectType>
   1446e:	|  |   addq.l #4,sp
		FreeVec(killRegion);
   14470:	|  |   move.l 8(sp),4(sp)
   14476:	|  |   move.l 1b1a2 <SysBase>,d0
   1447c:	|  |   movea.l d0,a6
   1447e:	|  |   movea.l 4(sp),a1
   14482:	|  |   jsr -690(a6)
	while (allScreenRegions) {
   14486:	|  \-> move.l 1b302 <allScreenRegions>,d0
   1448c:	\----- bne.s 14446 <killAllRegions+0x6>
	}
	overRegion = NULL;
   1448e:	       clr.l 1b306 <overRegion>
}
   14494:	       nop
   14496:	       movea.l (sp)+,a6
   14498:	       addq.l #8,sp
   1449a:	       rts

0001449c <loadRegions>:

void loadRegions (BPTR fp) {
   1449c:	       lea -24(sp),sp
   144a0:	       move.l a6,-(sp)
	int numRegions = get2bytes (fp);
   144a2:	       move.l 32(sp),-(sp)
   144a6:	       jsr 6bc <get2bytes>
   144ac:	       addq.l #4,sp
   144ae:	       move.l d0,24(sp)

	struct screenRegion * newRegion;
	struct screenRegion * * pointy = & allScreenRegions;
   144b2:	       move.l #111362,20(sp)

	while (numRegions --) {
   144ba:	   /-- bra.w 14598 <loadRegions+0xfc>
		newRegion = AllocVec( sizeof(struct screenRegion),MEMF_ANY);
   144be:	/--|-> moveq #36,d0
   144c0:	|  |   move.l d0,16(sp)
   144c4:	|  |   clr.l 12(sp)
   144c8:	|  |   move.l 1b1a2 <SysBase>,d0
   144ce:	|  |   movea.l d0,a6
   144d0:	|  |   move.l 16(sp),d0
   144d4:	|  |   move.l 12(sp),d1
   144d8:	|  |   jsr -684(a6)
   144dc:	|  |   move.l d0,8(sp)
   144e0:	|  |   move.l 8(sp),d0
   144e4:	|  |   move.l d0,4(sp)
		* pointy = newRegion;
   144e8:	|  |   movea.l 20(sp),a0
   144ec:	|  |   move.l 4(sp),(a0)
		pointy = & (newRegion -> next);
   144f0:	|  |   moveq #32,d1
   144f2:	|  |   add.l 4(sp),d1
   144f6:	|  |   move.l d1,20(sp)

		newRegion -> x1 = get2bytes (fp);
   144fa:	|  |   move.l 32(sp),-(sp)
   144fe:	|  |   jsr 6bc <get2bytes>
   14504:	|  |   addq.l #4,sp
   14506:	|  |   movea.l 4(sp),a0
   1450a:	|  |   move.l d0,(a0)
		newRegion -> y1 = get2bytes (fp);
   1450c:	|  |   move.l 32(sp),-(sp)
   14510:	|  |   jsr 6bc <get2bytes>
   14516:	|  |   addq.l #4,sp
   14518:	|  |   movea.l 4(sp),a0
   1451c:	|  |   move.l d0,4(a0)
		newRegion -> x2 = get2bytes (fp);
   14520:	|  |   move.l 32(sp),-(sp)
   14524:	|  |   jsr 6bc <get2bytes>
   1452a:	|  |   addq.l #4,sp
   1452c:	|  |   movea.l 4(sp),a0
   14530:	|  |   move.l d0,8(a0)
		newRegion -> y2 = get2bytes (fp);
   14534:	|  |   move.l 32(sp),-(sp)
   14538:	|  |   jsr 6bc <get2bytes>
   1453e:	|  |   addq.l #4,sp
   14540:	|  |   movea.l 4(sp),a0
   14544:	|  |   move.l d0,12(a0)
		newRegion -> sX = get2bytes (fp);
   14548:	|  |   move.l 32(sp),-(sp)
   1454c:	|  |   jsr 6bc <get2bytes>
   14552:	|  |   addq.l #4,sp
   14554:	|  |   movea.l 4(sp),a0
   14558:	|  |   move.l d0,16(a0)
		newRegion -> sY = get2bytes (fp);
   1455c:	|  |   move.l 32(sp),-(sp)
   14560:	|  |   jsr 6bc <get2bytes>
   14566:	|  |   addq.l #4,sp
   14568:	|  |   movea.l 4(sp),a0
   1456c:	|  |   move.l d0,20(a0)
		newRegion -> di = get2bytes (fp);
   14570:	|  |   move.l 32(sp),-(sp)
   14574:	|  |   jsr 6bc <get2bytes>
   1457a:	|  |   addq.l #4,sp
   1457c:	|  |   movea.l 4(sp),a0
   14580:	|  |   move.l d0,24(a0)
		newRegion -> thisType = loadObjectRef (fp);
   14584:	|  |   move.l 32(sp),-(sp)
   14588:	|  |   jsr c594 <loadObjectRef>
   1458e:	|  |   addq.l #4,sp
   14590:	|  |   movea.l 4(sp),a0
   14594:	|  |   move.l d0,28(a0)
	while (numRegions --) {
   14598:	|  \-> move.l 24(sp),d0
   1459c:	|      move.l d0,d1
   1459e:	|      subq.l #1,d1
   145a0:	|      move.l d1,24(sp)
   145a4:	|      tst.l d0
   145a6:	\----- bne.w 144be <loadRegions+0x22>
	}
	* pointy = NULL;
   145aa:	       movea.l 20(sp),a0
   145ae:	       clr.l (a0)
}
   145b0:	       nop
   145b2:	       movea.l (sp)+,a6
   145b4:	       lea 24(sp),sp
   145b8:	       rts

000145ba <removeScreenRegion>:

void removeScreenRegion (int objectNum) {
   145ba:	             lea -12(sp),sp
   145be:	             move.l a6,-(sp)
    struct screenRegion ** huntRegion = &allScreenRegions;
   145c0:	             move.l #111362,12(sp)
    struct screenRegion * killMe;

    while (*huntRegion) {
   145c8:	   /-------- bra.s 14642 <removeScreenRegion+0x88>
        if ((*huntRegion)->thisType->objectNum == objectNum) {
   145ca:	/--|-------> movea.l 12(sp),a0
   145ce:	|  |         movea.l (a0),a0
   145d0:	|  |         movea.l 28(a0),a0
   145d4:	|  |         move.l 4(a0),d0
   145d8:	|  |         cmp.l 20(sp),d0
   145dc:	|  |  /----- bne.s 14634 <removeScreenRegion+0x7a>
            killMe = *huntRegion;
   145de:	|  |  |      movea.l 12(sp),a0
   145e2:	|  |  |      move.l (a0),8(sp)
            *huntRegion = killMe->next;
   145e6:	|  |  |      movea.l 8(sp),a0
   145ea:	|  |  |      move.l 32(a0),d0
   145ee:	|  |  |      movea.l 12(sp),a0
   145f2:	|  |  |      move.l d0,(a0)
            removeObjectType(killMe->thisType);
   145f4:	|  |  |      movea.l 8(sp),a0
   145f8:	|  |  |      move.l 28(a0),d0
   145fc:	|  |  |      move.l d0,-(sp)
   145fe:	|  |  |      jsr c89e <removeObjectType>
   14604:	|  |  |      addq.l #4,sp
            if (killMe == overRegion) overRegion = NULL;
   14606:	|  |  |      move.l 1b306 <overRegion>,d0
   1460c:	|  |  |      cmp.l 8(sp),d0
   14610:	|  |  |  /-- bne.s 14618 <removeScreenRegion+0x5e>
   14612:	|  |  |  |   clr.l 1b306 <overRegion>
            FreeVec(killMe);
   14618:	|  |  |  \-> move.l 8(sp),4(sp)
   1461e:	|  |  |      move.l 1b1a2 <SysBase>,d0
   14624:	|  |  |      movea.l d0,a6
   14626:	|  |  |      movea.l 4(sp),a1
   1462a:	|  |  |      jsr -690(a6)
            killMe = NULL;
   1462e:	|  |  |      clr.l 8(sp)
   14632:	|  +--|----- bra.s 14642 <removeScreenRegion+0x88>
        } else {
            huntRegion = &((*huntRegion)->next);
   14634:	|  |  \----> movea.l 12(sp),a0
   14638:	|  |         move.l (a0),d0
   1463a:	|  |         moveq #32,d1
   1463c:	|  |         add.l d0,d1
   1463e:	|  |         move.l d1,12(sp)
    while (*huntRegion) {
   14642:	|  \-------> movea.l 12(sp),a0
   14646:	|            move.l (a0),d0
   14648:	\----------- bne.s 145ca <removeScreenRegion+0x10>
        }
    }
}
   1464a:	             nop
   1464c:	             nop
   1464e:	             movea.l (sp)+,a6
   14650:	             lea 12(sp),sp
   14654:	             rts

00014656 <saveRegions>:

void saveRegions (BPTR fp) {
   14656:	       subq.l #8,sp
	int numRegions = 0;
   14658:	       clr.l 4(sp)
	struct screenRegion * thisRegion = allScreenRegions;
   1465c:	       move.l 1b302 <allScreenRegions>,(sp)
	while (thisRegion) {
   14662:	   /-- bra.s 1466e <saveRegions+0x18>
		thisRegion = thisRegion -> next;
   14664:	/--|-> movea.l (sp),a0
   14666:	|  |   move.l 32(a0),(sp)
		numRegions ++;
   1466a:	|  |   addq.l #1,4(sp)
	while (thisRegion) {
   1466e:	|  \-> tst.l (sp)
   14670:	\----- bne.s 14664 <saveRegions+0xe>
	}
	put2bytes (numRegions, fp);
   14672:	       move.l 12(sp),-(sp)
   14676:	       move.l 8(sp),-(sp)
   1467a:	       jsr 8d0 <put2bytes>
   14680:	       addq.l #8,sp
	thisRegion = allScreenRegions;
   14682:	       move.l 1b302 <allScreenRegions>,(sp)
	while (thisRegion) {
   14688:	/----- bra.w 14730 <saveRegions+0xda>
		put2bytes (thisRegion -> x1, fp);
   1468c:	|  /-> movea.l (sp),a0
   1468e:	|  |   move.l (a0),d0
   14690:	|  |   move.l 12(sp),-(sp)
   14694:	|  |   move.l d0,-(sp)
   14696:	|  |   jsr 8d0 <put2bytes>
   1469c:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> y1, fp);
   1469e:	|  |   movea.l (sp),a0
   146a0:	|  |   move.l 4(a0),d0
   146a4:	|  |   move.l 12(sp),-(sp)
   146a8:	|  |   move.l d0,-(sp)
   146aa:	|  |   jsr 8d0 <put2bytes>
   146b0:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> x2, fp);
   146b2:	|  |   movea.l (sp),a0
   146b4:	|  |   move.l 8(a0),d0
   146b8:	|  |   move.l 12(sp),-(sp)
   146bc:	|  |   move.l d0,-(sp)
   146be:	|  |   jsr 8d0 <put2bytes>
   146c4:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> y2, fp);
   146c6:	|  |   movea.l (sp),a0
   146c8:	|  |   move.l 12(a0),d0
   146cc:	|  |   move.l 12(sp),-(sp)
   146d0:	|  |   move.l d0,-(sp)
   146d2:	|  |   jsr 8d0 <put2bytes>
   146d8:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> sX, fp);
   146da:	|  |   movea.l (sp),a0
   146dc:	|  |   move.l 16(a0),d0
   146e0:	|  |   move.l 12(sp),-(sp)
   146e4:	|  |   move.l d0,-(sp)
   146e6:	|  |   jsr 8d0 <put2bytes>
   146ec:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> sY, fp);
   146ee:	|  |   movea.l (sp),a0
   146f0:	|  |   move.l 20(a0),d0
   146f4:	|  |   move.l 12(sp),-(sp)
   146f8:	|  |   move.l d0,-(sp)
   146fa:	|  |   jsr 8d0 <put2bytes>
   14700:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> di, fp);
   14702:	|  |   movea.l (sp),a0
   14704:	|  |   move.l 24(a0),d0
   14708:	|  |   move.l 12(sp),-(sp)
   1470c:	|  |   move.l d0,-(sp)
   1470e:	|  |   jsr 8d0 <put2bytes>
   14714:	|  |   addq.l #8,sp
		saveObjectRef (thisRegion -> thisType, fp);
   14716:	|  |   movea.l (sp),a0
   14718:	|  |   move.l 28(a0),d0
   1471c:	|  |   move.l 12(sp),-(sp)
   14720:	|  |   move.l d0,-(sp)
   14722:	|  |   jsr c93e <saveObjectRef>
   14728:	|  |   addq.l #8,sp

		thisRegion = thisRegion -> next;
   1472a:	|  |   movea.l (sp),a0
   1472c:	|  |   move.l 32(a0),(sp)
	while (thisRegion) {
   14730:	\--|-> tst.l (sp)
   14732:	   \-- bne.w 1468c <saveRegions+0x36>
	}
}
   14736:	       nop
   14738:	       nop
   1473a:	       addq.l #8,sp
   1473c:	       rts

0001473e <showBoxes>:

void showBoxes () {
   1473e:	       subq.l #4,sp
	struct screenRegion * huntRegion = allScreenRegions;
   14740:	       move.l 1b302 <allScreenRegions>,(sp)

	while (huntRegion) {
   14746:	/----- bra.w 147e2 <showBoxes+0xa4>
		drawVerticalLine (huntRegion -> x1, huntRegion -> y1, huntRegion -> y2);
   1474a:	|  /-> movea.l (sp),a0
   1474c:	|  |   move.l 12(a0),d0
   14750:	|  |   movea.l d0,a1
   14752:	|  |   movea.l (sp),a0
   14754:	|  |   move.l 4(a0),d0
   14758:	|  |   move.l d0,d1
   1475a:	|  |   movea.l (sp),a0
   1475c:	|  |   move.l (a0),d0
   1475e:	|  |   move.l a1,-(sp)
   14760:	|  |   move.l d1,-(sp)
   14762:	|  |   move.l d0,-(sp)
   14764:	|  |   jsr c222 <drawVerticalLine>
   1476a:	|  |   lea 12(sp),sp
		drawVerticalLine (huntRegion -> x2, huntRegion -> y1, huntRegion -> y2);
   1476e:	|  |   movea.l (sp),a0
   14770:	|  |   move.l 12(a0),d0
   14774:	|  |   movea.l d0,a1
   14776:	|  |   movea.l (sp),a0
   14778:	|  |   move.l 4(a0),d0
   1477c:	|  |   move.l d0,d1
   1477e:	|  |   movea.l (sp),a0
   14780:	|  |   move.l 8(a0),d0
   14784:	|  |   move.l a1,-(sp)
   14786:	|  |   move.l d1,-(sp)
   14788:	|  |   move.l d0,-(sp)
   1478a:	|  |   jsr c222 <drawVerticalLine>
   14790:	|  |   lea 12(sp),sp
		drawHorizontalLine (huntRegion -> x1, huntRegion -> y1, huntRegion -> x2);
   14794:	|  |   movea.l (sp),a0
   14796:	|  |   move.l 8(a0),d0
   1479a:	|  |   movea.l d0,a1
   1479c:	|  |   movea.l (sp),a0
   1479e:	|  |   move.l 4(a0),d0
   147a2:	|  |   move.l d0,d1
   147a4:	|  |   movea.l (sp),a0
   147a6:	|  |   move.l (a0),d0
   147a8:	|  |   move.l a1,-(sp)
   147aa:	|  |   move.l d1,-(sp)
   147ac:	|  |   move.l d0,-(sp)
   147ae:	|  |   jsr c1fc <drawHorizontalLine>
   147b4:	|  |   lea 12(sp),sp
		drawHorizontalLine (huntRegion -> x1, huntRegion -> y2, huntRegion -> x2);
   147b8:	|  |   movea.l (sp),a0
   147ba:	|  |   move.l 8(a0),d0
   147be:	|  |   movea.l d0,a1
   147c0:	|  |   movea.l (sp),a0
   147c2:	|  |   move.l 12(a0),d0
   147c6:	|  |   move.l d0,d1
   147c8:	|  |   movea.l (sp),a0
   147ca:	|  |   move.l (a0),d0
   147cc:	|  |   move.l a1,-(sp)
   147ce:	|  |   move.l d1,-(sp)
   147d0:	|  |   move.l d0,-(sp)
   147d2:	|  |   jsr c1fc <drawHorizontalLine>
   147d8:	|  |   lea 12(sp),sp
		huntRegion = huntRegion -> next;
   147dc:	|  |   movea.l (sp),a0
   147de:	|  |   move.l 32(a0),(sp)
	while (huntRegion) {
   147e2:	\--|-> tst.l (sp)
   147e4:	   \-- bne.w 1474a <showBoxes+0xc>
	}
   147e8:	       nop
   147ea:	       nop
   147ec:	       addq.l #4,sp
   147ee:	       rts

000147f0 <rand>:
// Define constants for LCG
#define MULTIPLIER 1103515245UL
#define INCREMENT 12345UL
#define MODULUS 0x7FFFFFFFUL

ULONG rand() {
   147f0:	       lea -88(sp),sp
   147f4:	       move.l a6,-(sp)
    struct timerequest *timereq;

    struct MsgPort *timerport = CreateMsgPort();
   147f6:	       move.l 1b1a2 <SysBase>,d0
   147fc:	       movea.l d0,a6
   147fe:	       jsr -666(a6)
   14802:	       move.l d0,88(sp)
   14806:	       move.l 88(sp),d0
   1480a:	       move.l d0,84(sp)

    timereq = CreateIORequest(timerport, sizeof(struct timerequest));
   1480e:	       move.l 84(sp),80(sp)
   14814:	       moveq #40,d0
   14816:	       move.l d0,76(sp)
   1481a:	       move.l 1b1a2 <SysBase>,d0
   14820:	       movea.l d0,a6
   14822:	       movea.l 80(sp),a0
   14826:	       move.l 76(sp),d0
   1482a:	       jsr -654(a6)
   1482e:	       move.l d0,72(sp)
   14832:	       move.l 72(sp),d0
   14836:	       move.l d0,68(sp)
    struct IORequest* ioreq = (struct IORequest*)timereq;
   1483a:	       move.l 68(sp),64(sp)
    if (OpenDevice(TIMERNAME, UNIT_MICROHZ, ioreq, 0)) {
   14840:	       move.l #100430,60(sp)
   14848:	       clr.l 56(sp)
   1484c:	       move.l 64(sp),52(sp)
   14852:	       clr.l 48(sp)
   14856:	       move.l 1b1a2 <SysBase>,d0
   1485c:	       movea.l d0,a6
   1485e:	       movea.l 60(sp),a0
   14862:	       move.l 56(sp),d0
   14866:	       movea.l 52(sp),a1
   1486a:	       move.l 48(sp),d1
   1486e:	       jsr -444(a6)
   14872:	       move.b d0,47(sp)
   14876:	       move.b 47(sp),d0
   1487a:	   /-- beq.s 14890 <rand+0xa0>
        KPrintF("Unable to open timer device\n");
   1487c:	   |   pea 1885b <line.c.05397aaf+0x1d>
   14882:	   |   jsr 15bf0 <KPrintF>
   14888:	   |   addq.l #4,sp
        return 0;
   1488a:	   |   moveq #0,d0
   1488c:	/--|-- bra.w 1494a <rand+0x15a>
    }
    struct Device* TimerBase = ioreq->io_Device;
   14890:	|  \-> movea.l 64(sp),a0
   14894:	|      move.l 20(a0),42(sp)

    struct EClockVal eclock;
    ReadEClock(&eclock);
   1489a:	|      lea 92(sp),a0
   1489e:	|      lea -86(a0),a0
   148a2:	|      move.l a0,38(sp)
   148a6:	|      movea.l 42(sp),a6
   148aa:	|      movea.l 38(sp),a0
   148ae:	|      jsr -60(a6)
   148b2:	|      move.l d0,34(sp)

    ULONG seed = eclock.ev_lo; // Using the lower part of EClock value as seed
   148b6:	|      move.l 10(sp),30(sp)
    seed = (seed * MULTIPLIER + INCREMENT) & 0x7fffffff; // Simple LCG
   148bc:	|      move.l #1103515245,-(sp)
   148c2:	|      move.l 34(sp),-(sp)
   148c6:	|      jsr 1642a <__mulsi3>
   148cc:	|      addq.l #8,sp
   148ce:	|      addi.l #12345,d0
   148d4:	|      move.l d0,d1
   148d6:	|      bclr #31,d1
   148da:	|      move.l d1,30(sp)

    // Transform the seed to a random number
    int random_number = seed % 100; // For example, a random number between 0 and 99
   148de:	|      move.l 30(sp),d0
   148e2:	|      pea 64 <_start+0x64>
   148e6:	|      move.l d0,-(sp)
   148e8:	|      jsr 16504 <__umodsi3>
   148ee:	|      addq.l #8,sp
   148f0:	|      move.l d0,26(sp)
    KPrintF("Random Number: %d\n", random_number);
   148f4:	|      move.l 26(sp),-(sp)
   148f8:	|      pea 18878 <line.c.05397aaf+0x3a>
   148fe:	|      jsr 15bf0 <KPrintF>
   14904:	|      addq.l #8,sp

    CloseDevice(ioreq);
   14906:	|      move.l 64(sp),22(sp)
   1490c:	|      move.l 1b1a2 <SysBase>,d0
   14912:	|      movea.l d0,a6
   14914:	|      movea.l 22(sp),a1
   14918:	|      jsr -450(a6)
    DeleteIORequest(ioreq);
   1491c:	|      move.l 64(sp),18(sp)
   14922:	|      move.l 1b1a2 <SysBase>,d0
   14928:	|      movea.l d0,a6
   1492a:	|      movea.l 18(sp),a0
   1492e:	|      jsr -660(a6)
    DeleteMsgPort(timerport);
   14932:	|      move.l 84(sp),14(sp)
   14938:	|      move.l 1b1a2 <SysBase>,d0
   1493e:	|      movea.l d0,a6
   14940:	|      movea.l 14(sp),a0
   14944:	|      jsr -672(a6)
    return 0;
   14948:	|      moveq #0,d0
   1494a:	\----> movea.l (sp)+,a6
   1494c:	       lea 88(sp),sp
   14950:	       rts

00014952 <loadBankForAnim>:
#include "sprbanks.h"
#include "support/gcc8_c_support.h"

struct loadedSpriteBank * allLoadedBanks = NULL;

struct loadedSpriteBank * loadBankForAnim (int ID) {
   14952:	             lea -20(sp),sp
   14956:	             move.l a6,-(sp)
	// KPrintF("loadBankForAnim: Looking for sprite bank with ID %d\n", ID);	
	struct loadedSpriteBank * returnMe = allLoadedBanks;
   14958:	             move.l 1b30a <allLoadedBanks>,20(sp)
	while (returnMe) {
   14960:	      /----- bra.s 14992 <loadBankForAnim+0x40>
		if (returnMe->ID == ID) {
   14962:	   /--|----> movea.l 20(sp),a0
   14966:	   |  |      move.l (a0),d0
   14968:	   |  |      cmp.l 28(sp),d0
   1496c:	   |  |  /-- bne.s 14988 <loadBankForAnim+0x36>
			// KPrintF("loadBankForAnim: Found existing sprite bank with ID %d\n", returnMe->ID);
			returnMe->timesUsed++;
   1496e:	   |  |  |   movea.l 20(sp),a0
   14972:	   |  |  |   move.l 4(a0),d0
   14976:	   |  |  |   addq.l #1,d0
   14978:	   |  |  |   movea.l 20(sp),a0
   1497c:	   |  |  |   move.l d0,4(a0)
			return returnMe;			
   14980:	   |  |  |   move.l 20(sp),d0
   14984:	/--|--|--|-- bra.w 14a48 <loadBankForAnim+0xf6>
		}		
		returnMe = returnMe->next;
   14988:	|  |  |  \-> movea.l 20(sp),a0
   1498c:	|  |  |      move.l 22(a0),20(sp)
	while (returnMe) {
   14992:	|  |  \----> tst.l 20(sp)
   14996:	|  \-------- bne.s 14962 <loadBankForAnim+0x10>
	}
	returnMe = AllocVec(sizeof(struct loadedSpriteBank), MEMF_ANY);
   14998:	|            moveq #26,d0
   1499a:	|            move.l d0,16(sp)
   1499e:	|            clr.l 12(sp)
   149a2:	|            move.l 1b1a2 <SysBase>,d0
   149a8:	|            movea.l d0,a6
   149aa:	|            move.l 16(sp),d0
   149ae:	|            move.l 12(sp),d1
   149b2:	|            jsr -684(a6)
   149b6:	|            move.l d0,8(sp)
   149ba:	|            move.l 8(sp),d0
   149be:	|            move.l d0,20(sp)
	// KPrintF("loadBankForAnim: No existing sprite bank with ID %d\n", ID);
	if (returnMe) {
   149c2:	|     /----- beq.w 14a46 <loadBankForAnim+0xf4>
		returnMe->ID = ID;
   149c6:	|     |      movea.l 20(sp),a0
   149ca:	|     |      move.l 28(sp),(a0)
		if (loadSpriteBank(ID, &returnMe->bank, FALSE)) {
   149ce:	|     |      move.l 20(sp),d0
   149d2:	|     |      addq.l #8,d0
   149d4:	|     |      clr.l -(sp)
   149d6:	|     |      move.l d0,-(sp)
   149d8:	|     |      move.l 36(sp),-(sp)
   149dc:	|     |      jsr 7c4e <loadSpriteBank>
   149e2:	|     |      lea 12(sp),sp
   149e6:	|     |      tst.w d0
   149e8:	|     |  /-- beq.s 14a1e <loadBankForAnim+0xcc>
			returnMe->timesUsed = 1;
   149ea:	|     |  |   movea.l 20(sp),a0
   149ee:	|     |  |   moveq #1,d0
   149f0:	|     |  |   move.l d0,4(a0)
			returnMe->next = allLoadedBanks;
   149f4:	|     |  |   move.l 1b30a <allLoadedBanks>,d0
   149fa:	|     |  |   movea.l 20(sp),a0
   149fe:	|     |  |   move.l d0,22(a0)
			allLoadedBanks = returnMe;
   14a02:	|     |  |   move.l 20(sp),1b30a <allLoadedBanks>
			KPrintF("loadBankForAnim: New sprite bank created OK\n");
   14a0a:	|     |  |   pea 1888b <line.c.05397aaf+0x4d>
   14a10:	|     |  |   jsr 15bf0 <KPrintF>
   14a16:	|     |  |   addq.l #4,sp
			return returnMe;
   14a18:	|     |  |   move.l 20(sp),d0
   14a1c:	+-----|--|-- bra.s 14a48 <loadBankForAnim+0xf6>
		} else {
			KPrintF("loadBankForAnim: I guess I couldn't load the sprites...\n");
   14a1e:	|     |  \-> pea 188b8 <line.c.05397aaf+0x7a>
   14a24:	|     |      jsr 15bf0 <KPrintF>
   14a2a:	|     |      addq.l #4,sp
			FreeVec(returnMe);
   14a2c:	|     |      move.l 20(sp),4(sp)
   14a32:	|     |      move.l 1b1a2 <SysBase>,d0
   14a38:	|     |      movea.l d0,a6
   14a3a:	|     |      movea.l 4(sp),a1
   14a3e:	|     |      jsr -690(a6)
			return NULL;
   14a42:	|     |      moveq #0,d0
   14a44:	+-----|----- bra.s 14a48 <loadBankForAnim+0xf6>
		}
	} else return NULL;
   14a46:	|     \----> moveq #0,d0
}
   14a48:	\----------> movea.l (sp)+,a6
   14a4a:	             lea 20(sp),sp
   14a4e:	             rts

00014a50 <closestPointOnLine>:
#include "support/gcc8_c_support.h"
#include "line.h"

struct flor * currentFloor = NULL;

BOOL closestPointOnLine (int * closestX, int * closestY, int x1, int y1, int x2, int y2, int xP, int yP) {
   14a50:	       lea -32(sp),sp
   14a54:	       move.l d3,-(sp)
   14a56:	       move.l d2,-(sp)
	int xDiff = x2 - x1;
   14a58:	       move.l 60(sp),d0
   14a5c:	       sub.l 52(sp),d0
   14a60:	       move.l d0,36(sp)
	int yDiff = y2 - y1;
   14a64:	       move.l 64(sp),d0
   14a68:	       sub.l 56(sp),d0
   14a6c:	       move.l d0,32(sp)

	double m = xDiff * (xP - x1) + yDiff * (yP - y1);
   14a70:	       move.l 68(sp),d0
   14a74:	       sub.l 52(sp),d0
   14a78:	       move.l 36(sp),-(sp)
   14a7c:	       move.l d0,-(sp)
   14a7e:	       jsr 1642a <__mulsi3>
   14a84:	       addq.l #8,sp
   14a86:	       move.l d0,d2
   14a88:	       move.l 72(sp),d0
   14a8c:	       sub.l 56(sp),d0
   14a90:	       move.l 32(sp),-(sp)
   14a94:	       move.l d0,-(sp)
   14a96:	       jsr 1642a <__mulsi3>
   14a9c:	       addq.l #8,sp
   14a9e:	       add.l d2,d0
   14aa0:	       move.l d0,-(sp)
   14aa2:	       jsr 15e68 <__floatsidf>
   14aa8:	       addq.l #4,sp
   14aaa:	       move.l d0,16(sp)
   14aae:	       move.l d1,20(sp)
   14ab2:	       move.l 16(sp),24(sp)
   14ab8:	       move.l 20(sp),28(sp)
	m /= (xDiff * xDiff) + (yDiff * yDiff);
   14abe:	       move.l 36(sp),-(sp)
   14ac2:	       move.l 40(sp),-(sp)
   14ac6:	       jsr 1642a <__mulsi3>
   14acc:	       addq.l #8,sp
   14ace:	       move.l d0,d2
   14ad0:	       move.l 32(sp),-(sp)
   14ad4:	       move.l 36(sp),-(sp)
   14ad8:	       jsr 1642a <__mulsi3>
   14ade:	       addq.l #8,sp
   14ae0:	       add.l d2,d0
   14ae2:	       move.l d0,-(sp)
   14ae4:	       jsr 15e68 <__floatsidf>
   14aea:	       addq.l #4,sp
   14aec:	       move.l d1,-(sp)
   14aee:	       move.l d0,-(sp)
   14af0:	       move.l 36(sp),-(sp)
   14af4:	       move.l 36(sp),-(sp)
   14af8:	       jsr 15cf2 <__divdf3>
   14afe:	       lea 16(sp),sp
   14b02:	       move.l d0,8(sp)
   14b06:	       move.l d1,12(sp)
   14b0a:	       move.l 8(sp),24(sp)
   14b10:	       move.l 12(sp),28(sp)

	if (m < 0) {
   14b16:	       clr.l -(sp)
   14b18:	       clr.l -(sp)
   14b1a:	       move.l 36(sp),-(sp)
   14b1e:	       move.l 36(sp),-(sp)
   14b22:	       jsr 16080 <__ltdf2>
   14b28:	       lea 16(sp),sp
   14b2c:	       tst.l d0
   14b2e:	   /-- bge.s 14b44 <closestPointOnLine+0xf4>
		*closestX = x1;
   14b30:	   |   movea.l 44(sp),a0
   14b34:	   |   move.l 52(sp),(a0)
		*closestY = y1;
   14b38:	   |   movea.l 48(sp),a0
   14b3c:	   |   move.l 56(sp),(a0)
   14b40:	/--|-- bra.w 14c26 <closestPointOnLine+0x1d6>
	} else if (m > 1) {
   14b44:	|  \-> clr.l -(sp)
   14b46:	|      move.l #1072693248,-(sp)
   14b4c:	|      move.l 36(sp),-(sp)
   14b50:	|      move.l 36(sp),-(sp)
   14b54:	|      jsr 15fc6 <__gtdf2>
   14b5a:	|      lea 16(sp),sp
   14b5e:	|      tst.l d0
   14b60:	|  /-- ble.s 14b76 <closestPointOnLine+0x126>
		*closestX = x2;
   14b62:	|  |   movea.l 44(sp),a0
   14b66:	|  |   move.l 60(sp),(a0)
		*closestY = y2;
   14b6a:	|  |   movea.l 48(sp),a0
   14b6e:	|  |   move.l 64(sp),(a0)
   14b72:	+--|-- bra.w 14c26 <closestPointOnLine+0x1d6>
	} else {
		*closestX = x1 + m * xDiff;
   14b76:	|  \-> move.l 52(sp),-(sp)
   14b7a:	|      jsr 15e68 <__floatsidf>
   14b80:	|      addq.l #4,sp
   14b82:	|      move.l d0,d2
   14b84:	|      move.l d1,d3
   14b86:	|      move.l 36(sp),-(sp)
   14b8a:	|      jsr 15e68 <__floatsidf>
   14b90:	|      addq.l #4,sp
   14b92:	|      move.l 28(sp),-(sp)
   14b96:	|      move.l 28(sp),-(sp)
   14b9a:	|      move.l d1,-(sp)
   14b9c:	|      move.l d0,-(sp)
   14b9e:	|      jsr 15ef8 <__muldf3>
   14ba4:	|      lea 16(sp),sp
   14ba8:	|      move.l d1,-(sp)
   14baa:	|      move.l d0,-(sp)
   14bac:	|      move.l d3,-(sp)
   14bae:	|      move.l d2,-(sp)
   14bb0:	|      jsr 15c90 <__adddf3>
   14bb6:	|      lea 16(sp),sp
   14bba:	|      move.l d1,-(sp)
   14bbc:	|      move.l d0,-(sp)
   14bbe:	|      jsr 15e00 <__fixdfsi>
   14bc4:	|      addq.l #8,sp
   14bc6:	|      movea.l 44(sp),a0
   14bca:	|      move.l d0,(a0)
		*closestY = y1 + m * yDiff;
   14bcc:	|      move.l 56(sp),-(sp)
   14bd0:	|      jsr 15e68 <__floatsidf>
   14bd6:	|      addq.l #4,sp
   14bd8:	|      move.l d0,d2
   14bda:	|      move.l d1,d3
   14bdc:	|      move.l 32(sp),-(sp)
   14be0:	|      jsr 15e68 <__floatsidf>
   14be6:	|      addq.l #4,sp
   14be8:	|      move.l 28(sp),-(sp)
   14bec:	|      move.l 28(sp),-(sp)
   14bf0:	|      move.l d1,-(sp)
   14bf2:	|      move.l d0,-(sp)
   14bf4:	|      jsr 15ef8 <__muldf3>
   14bfa:	|      lea 16(sp),sp
   14bfe:	|      move.l d1,-(sp)
   14c00:	|      move.l d0,-(sp)
   14c02:	|      move.l d3,-(sp)
   14c04:	|      move.l d2,-(sp)
   14c06:	|      jsr 15c90 <__adddf3>
   14c0c:	|      lea 16(sp),sp
   14c10:	|      move.l d1,-(sp)
   14c12:	|      move.l d0,-(sp)
   14c14:	|      jsr 15e00 <__fixdfsi>
   14c1a:	|      addq.l #8,sp
   14c1c:	|      movea.l 48(sp),a0
   14c20:	|      move.l d0,(a0)
		return TRUE;
   14c22:	|      moveq #1,d0
   14c24:	|  /-- bra.s 14c28 <closestPointOnLine+0x1d8>
	}
	return FALSE;
   14c26:	\--|-> clr.w d0
}
   14c28:	   \-> move.l (sp)+,d2
   14c2a:	       move.l (sp)+,d3
   14c2c:	       lea 32(sp),sp
   14c30:	       rts

00014c32 <drawFloor>:

void drawFloor() {
   14c32:	                lea -12(sp),sp
   14c36:	                move.l d3,-(sp)
   14c38:	                move.l d2,-(sp)
    int i, j, nV;
    for (i = 0; i < currentFloor->numPolygons; i++) {
   14c3a:	                clr.l 16(sp)
   14c3e:	   /----------- bra.w 14e52 <drawFloor+0x220>
        nV = currentFloor->polygon[i].numVertices;
   14c42:	/--|----------> movea.l 1b30e <currentFloor>,a0
   14c48:	|  |            move.l 12(a0),d1
   14c4c:	|  |            move.l 16(sp),d0
   14c50:	|  |            lsl.l #3,d0
   14c52:	|  |            movea.l d1,a0
   14c54:	|  |            adda.l d0,a0
   14c56:	|  |            move.l (a0),8(sp)
        if (nV > 1) {
   14c5a:	|  |            moveq #1,d0
   14c5c:	|  |            cmp.l 8(sp),d0
   14c60:	|  |  /-------- bge.w 14e4e <drawFloor+0x21c>
            for (j = 1; j < nV; j++) {
   14c64:	|  |  |         moveq #1,d0
   14c66:	|  |  |         move.l d0,12(sp)
   14c6a:	|  |  |     /-- bra.w 14d64 <drawFloor+0x132>
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].y,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].x,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].y);
   14c6e:	|  |  |  /--|-> movea.l 1b30e <currentFloor>,a0
   14c74:	|  |  |  |  |   move.l 4(a0),d1
   14c78:	|  |  |  |  |   movea.l 1b30e <currentFloor>,a0
   14c7e:	|  |  |  |  |   movea.l 12(a0),a0
   14c82:	|  |  |  |  |   move.l 16(sp),d0
   14c86:	|  |  |  |  |   lsl.l #3,d0
   14c88:	|  |  |  |  |   adda.l d0,a0
   14c8a:	|  |  |  |  |   movea.l 4(a0),a0
   14c8e:	|  |  |  |  |   move.l 12(sp),d0
   14c92:	|  |  |  |  |   add.l d0,d0
   14c94:	|  |  |  |  |   add.l d0,d0
   14c96:	|  |  |  |  |   adda.l d0,a0
   14c98:	|  |  |  |  |   move.l (a0),d0
   14c9a:	|  |  |  |  |   lsl.l #3,d0
   14c9c:	|  |  |  |  |   movea.l d1,a0
   14c9e:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   14ca0:	|  |  |  |  |   move.l 4(a0),d2
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].x,
   14ca4:	|  |  |  |  |   movea.l 1b30e <currentFloor>,a0
   14caa:	|  |  |  |  |   move.l 4(a0),d1
   14cae:	|  |  |  |  |   movea.l 1b30e <currentFloor>,a0
   14cb4:	|  |  |  |  |   movea.l 12(a0),a0
   14cb8:	|  |  |  |  |   move.l 16(sp),d0
   14cbc:	|  |  |  |  |   lsl.l #3,d0
   14cbe:	|  |  |  |  |   adda.l d0,a0
   14cc0:	|  |  |  |  |   movea.l 4(a0),a0
   14cc4:	|  |  |  |  |   move.l 12(sp),d0
   14cc8:	|  |  |  |  |   add.l d0,d0
   14cca:	|  |  |  |  |   add.l d0,d0
   14ccc:	|  |  |  |  |   adda.l d0,a0
   14cce:	|  |  |  |  |   move.l (a0),d0
   14cd0:	|  |  |  |  |   lsl.l #3,d0
   14cd2:	|  |  |  |  |   movea.l d1,a0
   14cd4:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   14cd6:	|  |  |  |  |   movea.l (a0),a1
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].y,
   14cd8:	|  |  |  |  |   movea.l 1b30e <currentFloor>,a0
   14cde:	|  |  |  |  |   move.l 4(a0),d1
   14ce2:	|  |  |  |  |   movea.l 1b30e <currentFloor>,a0
   14ce8:	|  |  |  |  |   movea.l 12(a0),a0
   14cec:	|  |  |  |  |   move.l 16(sp),d0
   14cf0:	|  |  |  |  |   lsl.l #3,d0
   14cf2:	|  |  |  |  |   adda.l d0,a0
   14cf4:	|  |  |  |  |   movea.l 4(a0),a0
   14cf8:	|  |  |  |  |   move.l 12(sp),d0
   14cfc:	|  |  |  |  |   addi.l #1073741823,d0
   14d02:	|  |  |  |  |   add.l d0,d0
   14d04:	|  |  |  |  |   add.l d0,d0
   14d06:	|  |  |  |  |   adda.l d0,a0
   14d08:	|  |  |  |  |   move.l (a0),d0
   14d0a:	|  |  |  |  |   lsl.l #3,d0
   14d0c:	|  |  |  |  |   movea.l d1,a0
   14d0e:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   14d10:	|  |  |  |  |   move.l 4(a0),d1
   14d14:	|  |  |  |  |   movea.l 1b30e <currentFloor>,a0
   14d1a:	|  |  |  |  |   move.l 4(a0),d3
   14d1e:	|  |  |  |  |   movea.l 1b30e <currentFloor>,a0
   14d24:	|  |  |  |  |   movea.l 12(a0),a0
   14d28:	|  |  |  |  |   move.l 16(sp),d0
   14d2c:	|  |  |  |  |   lsl.l #3,d0
   14d2e:	|  |  |  |  |   adda.l d0,a0
   14d30:	|  |  |  |  |   movea.l 4(a0),a0
   14d34:	|  |  |  |  |   move.l 12(sp),d0
   14d38:	|  |  |  |  |   addi.l #1073741823,d0
   14d3e:	|  |  |  |  |   add.l d0,d0
   14d40:	|  |  |  |  |   add.l d0,d0
   14d42:	|  |  |  |  |   adda.l d0,a0
   14d44:	|  |  |  |  |   move.l (a0),d0
   14d46:	|  |  |  |  |   lsl.l #3,d0
   14d48:	|  |  |  |  |   movea.l d3,a0
   14d4a:	|  |  |  |  |   adda.l d0,a0
   14d4c:	|  |  |  |  |   move.l (a0),d0
   14d4e:	|  |  |  |  |   move.l d2,-(sp)
   14d50:	|  |  |  |  |   move.l a1,-(sp)
   14d52:	|  |  |  |  |   move.l d1,-(sp)
   14d54:	|  |  |  |  |   move.l d0,-(sp)
   14d56:	|  |  |  |  |   jsr 2d64 <drawLine>
   14d5c:	|  |  |  |  |   lea 16(sp),sp
            for (j = 1; j < nV; j++) {
   14d60:	|  |  |  |  |   addq.l #1,12(sp)
   14d64:	|  |  |  |  \-> move.l 12(sp),d0
   14d68:	|  |  |  |      cmp.l 8(sp),d0
   14d6c:	|  |  |  \----- blt.w 14c6e <drawFloor+0x3c>
            }
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].y,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].x,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].y);
   14d70:	|  |  |         movea.l 1b30e <currentFloor>,a0
   14d76:	|  |  |         move.l 4(a0),d1
   14d7a:	|  |  |         movea.l 1b30e <currentFloor>,a0
   14d80:	|  |  |         movea.l 12(a0),a0
   14d84:	|  |  |         move.l 16(sp),d0
   14d88:	|  |  |         lsl.l #3,d0
   14d8a:	|  |  |         adda.l d0,a0
   14d8c:	|  |  |         movea.l 4(a0),a0
   14d90:	|  |  |         move.l 8(sp),d0
   14d94:	|  |  |         addi.l #1073741823,d0
   14d9a:	|  |  |         add.l d0,d0
   14d9c:	|  |  |         add.l d0,d0
   14d9e:	|  |  |         adda.l d0,a0
   14da0:	|  |  |         move.l (a0),d0
   14da2:	|  |  |         lsl.l #3,d0
   14da4:	|  |  |         movea.l d1,a0
   14da6:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   14da8:	|  |  |         move.l 4(a0),d2
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].x,
   14dac:	|  |  |         movea.l 1b30e <currentFloor>,a0
   14db2:	|  |  |         move.l 4(a0),d1
   14db6:	|  |  |         movea.l 1b30e <currentFloor>,a0
   14dbc:	|  |  |         movea.l 12(a0),a0
   14dc0:	|  |  |         move.l 16(sp),d0
   14dc4:	|  |  |         lsl.l #3,d0
   14dc6:	|  |  |         adda.l d0,a0
   14dc8:	|  |  |         movea.l 4(a0),a0
   14dcc:	|  |  |         move.l 8(sp),d0
   14dd0:	|  |  |         addi.l #1073741823,d0
   14dd6:	|  |  |         add.l d0,d0
   14dd8:	|  |  |         add.l d0,d0
   14dda:	|  |  |         adda.l d0,a0
   14ddc:	|  |  |         move.l (a0),d0
   14dde:	|  |  |         lsl.l #3,d0
   14de0:	|  |  |         movea.l d1,a0
   14de2:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   14de4:	|  |  |         movea.l (a0),a1
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].y,
   14de6:	|  |  |         movea.l 1b30e <currentFloor>,a0
   14dec:	|  |  |         move.l 4(a0),d1
   14df0:	|  |  |         movea.l 1b30e <currentFloor>,a0
   14df6:	|  |  |         movea.l 12(a0),a0
   14dfa:	|  |  |         move.l 16(sp),d0
   14dfe:	|  |  |         lsl.l #3,d0
   14e00:	|  |  |         adda.l d0,a0
   14e02:	|  |  |         movea.l 4(a0),a0
   14e06:	|  |  |         move.l (a0),d0
   14e08:	|  |  |         lsl.l #3,d0
   14e0a:	|  |  |         movea.l d1,a0
   14e0c:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   14e0e:	|  |  |         move.l 4(a0),d1
   14e12:	|  |  |         movea.l 1b30e <currentFloor>,a0
   14e18:	|  |  |         move.l 4(a0),d3
   14e1c:	|  |  |         movea.l 1b30e <currentFloor>,a0
   14e22:	|  |  |         movea.l 12(a0),a0
   14e26:	|  |  |         move.l 16(sp),d0
   14e2a:	|  |  |         lsl.l #3,d0
   14e2c:	|  |  |         adda.l d0,a0
   14e2e:	|  |  |         movea.l 4(a0),a0
   14e32:	|  |  |         move.l (a0),d0
   14e34:	|  |  |         lsl.l #3,d0
   14e36:	|  |  |         movea.l d3,a0
   14e38:	|  |  |         adda.l d0,a0
   14e3a:	|  |  |         move.l (a0),d0
   14e3c:	|  |  |         move.l d2,-(sp)
   14e3e:	|  |  |         move.l a1,-(sp)
   14e40:	|  |  |         move.l d1,-(sp)
   14e42:	|  |  |         move.l d0,-(sp)
   14e44:	|  |  |         jsr 2d64 <drawLine>
   14e4a:	|  |  |         lea 16(sp),sp
    for (i = 0; i < currentFloor->numPolygons; i++) {
   14e4e:	|  |  \-------> addq.l #1,16(sp)
   14e52:	|  \----------> movea.l 1b30e <currentFloor>,a0
   14e58:	|               move.l 8(a0),d0
   14e5c:	|               cmp.l 16(sp),d0
   14e60:	\-------------- bgt.w 14c42 <drawFloor+0x10>
        }
    }
}
   14e64:	                nop
   14e66:	                nop
   14e68:	                move.l (sp)+,d2
   14e6a:	                move.l (sp)+,d3
   14e6c:	                lea 12(sp),sp
   14e70:	                rts

00014e72 <getMatchingCorners>:

BOOL getMatchingCorners(struct floorPolygon *a, struct floorPolygon *b, int *cornerA, int *cornerB) {
   14e72:	                      lea -12(sp),sp
    int sharedVertices = 0;
   14e76:	                      clr.l 8(sp)
    int i, j;

    for (i = 0; i < a->numVertices; i++) {
   14e7a:	                      clr.l 4(sp)
   14e7e:	   /----------------- bra.w 14f10 <getMatchingCorners+0x9e>
        for (j = 0; j < b->numVertices; j++) {
   14e82:	/--|----------------> clr.l (sp)
   14e84:	|  |     /----------- bra.s 14f00 <getMatchingCorners+0x8e>
            if (a->vertexID[i] == b->vertexID[j]) {
   14e86:	|  |  /--|----------> movea.l 16(sp),a0
   14e8a:	|  |  |  |            move.l 4(a0),d1
   14e8e:	|  |  |  |            move.l 4(sp),d0
   14e92:	|  |  |  |            add.l d0,d0
   14e94:	|  |  |  |            add.l d0,d0
   14e96:	|  |  |  |            movea.l d1,a0
   14e98:	|  |  |  |            adda.l d0,a0
   14e9a:	|  |  |  |            move.l (a0),d1
   14e9c:	|  |  |  |            movea.l 20(sp),a0
   14ea0:	|  |  |  |            movea.l 4(a0),a0
   14ea4:	|  |  |  |            move.l (sp),d0
   14ea6:	|  |  |  |            add.l d0,d0
   14ea8:	|  |  |  |            add.l d0,d0
   14eaa:	|  |  |  |            adda.l d0,a0
   14eac:	|  |  |  |            move.l (a0),d0
   14eae:	|  |  |  |            cmp.l d1,d0
   14eb0:	|  |  |  |  /-------- bne.s 14efe <getMatchingCorners+0x8c>
                if (sharedVertices++) {
   14eb2:	|  |  |  |  |         move.l 8(sp),d0
   14eb6:	|  |  |  |  |         move.l d0,d1
   14eb8:	|  |  |  |  |         addq.l #1,d1
   14eba:	|  |  |  |  |         move.l d1,8(sp)
   14ebe:	|  |  |  |  |         tst.l d0
   14ec0:	|  |  |  |  |     /-- beq.s 14ee2 <getMatchingCorners+0x70>
                    *cornerB = a->vertexID[i];
   14ec2:	|  |  |  |  |     |   movea.l 16(sp),a0
   14ec6:	|  |  |  |  |     |   move.l 4(a0),d1
   14eca:	|  |  |  |  |     |   move.l 4(sp),d0
   14ece:	|  |  |  |  |     |   add.l d0,d0
   14ed0:	|  |  |  |  |     |   add.l d0,d0
   14ed2:	|  |  |  |  |     |   movea.l d1,a0
   14ed4:	|  |  |  |  |     |   adda.l d0,a0
   14ed6:	|  |  |  |  |     |   move.l (a0),d0
   14ed8:	|  |  |  |  |     |   movea.l 28(sp),a0
   14edc:	|  |  |  |  |     |   move.l d0,(a0)
                    return TRUE;
   14ede:	|  |  |  |  |     |   moveq #1,d0
   14ee0:	|  |  |  |  |  /--|-- bra.s 14f20 <getMatchingCorners+0xae>
                } else {
                    *cornerA = a->vertexID[i];
   14ee2:	|  |  |  |  |  |  \-> movea.l 16(sp),a0
   14ee6:	|  |  |  |  |  |      move.l 4(a0),d1
   14eea:	|  |  |  |  |  |      move.l 4(sp),d0
   14eee:	|  |  |  |  |  |      add.l d0,d0
   14ef0:	|  |  |  |  |  |      add.l d0,d0
   14ef2:	|  |  |  |  |  |      movea.l d1,a0
   14ef4:	|  |  |  |  |  |      adda.l d0,a0
   14ef6:	|  |  |  |  |  |      move.l (a0),d0
   14ef8:	|  |  |  |  |  |      movea.l 24(sp),a0
   14efc:	|  |  |  |  |  |      move.l d0,(a0)
        for (j = 0; j < b->numVertices; j++) {
   14efe:	|  |  |  |  \--|----> addq.l #1,(sp)
   14f00:	|  |  |  \-----|----> movea.l 20(sp),a0
   14f04:	|  |  |        |      move.l (a0),d0
   14f06:	|  |  |        |      cmp.l (sp),d0
   14f08:	|  |  \--------|----- bgt.w 14e86 <getMatchingCorners+0x14>
    for (i = 0; i < a->numVertices; i++) {
   14f0c:	|  |           |      addq.l #1,4(sp)
   14f10:	|  \-----------|----> movea.l 16(sp),a0
   14f14:	|              |      move.l (a0),d0
   14f16:	|              |      cmp.l 4(sp),d0
   14f1a:	\--------------|----- bgt.w 14e82 <getMatchingCorners+0x10>
                }
            }
        }
    }

    return FALSE;
   14f1e:	               |      clr.w d0
}
   14f20:	               \----> lea 12(sp),sp
   14f24:	                      rts

00014f26 <noFloor>:



void noFloor () {
	currentFloor -> numPolygons = 0;
   14f26:	movea.l 1b30e <currentFloor>,a0
   14f2c:	clr.l 8(a0)
	currentFloor -> polygon = NULL;
   14f30:	movea.l 1b30e <currentFloor>,a0
   14f36:	clr.l 12(a0)
	currentFloor -> vertex = NULL;
   14f3a:	movea.l 1b30e <currentFloor>,a0
   14f40:	clr.l 4(a0)
	currentFloor -> matrix = NULL;
   14f44:	movea.l 1b30e <currentFloor>,a0
   14f4a:	clr.l 16(a0)
}
   14f4e:	nop
   14f50:	rts

00014f52 <inFloor>:

int inFloor (int x, int y) {
   14f52:	          subq.l #8,sp
	int i, r = -1;
   14f54:	          moveq #-1,d0
   14f56:	          move.l d0,(sp)

	for (i = 0; i < currentFloor -> numPolygons; i ++)
   14f58:	          clr.l 4(sp)
   14f5c:	   /----- bra.s 14f90 <inFloor+0x3e>
		if (pointInFloorPolygon (&currentFloor -> polygon[i], x, y))
   14f5e:	/--|----> movea.l 1b30e <currentFloor>,a0
   14f64:	|  |      move.l 12(a0),d1
   14f68:	|  |      move.l 4(sp),d0
   14f6c:	|  |      lsl.l #3,d0
   14f6e:	|  |      add.l d1,d0
   14f70:	|  |      move.l 16(sp),-(sp)
   14f74:	|  |      move.l 16(sp),-(sp)
   14f78:	|  |      move.l d0,-(sp)
   14f7a:	|  |      jsr 1515c <pointInFloorPolygon>
   14f80:	|  |      lea 12(sp),sp
   14f84:	|  |      tst.w d0
   14f86:	|  |  /-- beq.s 14f8c <inFloor+0x3a>
			r = i;
   14f88:	|  |  |   move.l 4(sp),(sp)
	for (i = 0; i < currentFloor -> numPolygons; i ++)
   14f8c:	|  |  \-> addq.l #1,4(sp)
   14f90:	|  \----> movea.l 1b30e <currentFloor>,a0
   14f96:	|         move.l 8(a0),d0
   14f9a:	|         cmp.l 4(sp),d0
   14f9e:	\-------- bgt.s 14f5e <inFloor+0xc>

	return r;
   14fa0:	          move.l (sp),d0
}
   14fa2:	          addq.l #8,sp
   14fa4:	          rts

00014fa6 <initFloor>:

BOOL initFloor () {
   14fa6:	       lea -12(sp),sp
   14faa:	       move.l a6,-(sp)
	currentFloor = AllocVec(sizeof(struct flor), MEMF_ANY);
   14fac:	       moveq #20,d0
   14fae:	       move.l d0,12(sp)
   14fb2:	       clr.l 8(sp)
   14fb6:	       move.l 1b1a2 <SysBase>,d0
   14fbc:	       movea.l d0,a6
   14fbe:	       move.l 12(sp),d0
   14fc2:	       move.l 8(sp),d1
   14fc6:	       jsr -684(a6)
   14fca:	       move.l d0,4(sp)
   14fce:	       move.l 4(sp),d0
   14fd2:	       move.l d0,1b30e <currentFloor>

    if(currentFloor == 0) {
   14fd8:	       move.l 1b30e <currentFloor>,d0
   14fde:	/----- bne.s 14ff2 <initFloor+0x4c>
        KPrintF("initFloor: Could not initialize Mem");
   14fe0:	|      pea 188f1 <line.c.05397aaf+0xb3>
   14fe6:	|      jsr 15bf0 <KPrintF>
   14fec:	|      addq.l #4,sp
        return FALSE;
   14fee:	|      clr.w d0
   14ff0:	|  /-- bra.s 14ffa <initFloor+0x54>
    }

	noFloor ();
   14ff2:	\--|-> jsr 14f26 <noFloor>
	return TRUE;
   14ff8:	   |   moveq #1,d0
}
   14ffa:	   \-> movea.l (sp)+,a6
   14ffc:	       lea 12(sp),sp
   15000:	       rts

00015002 <killFloor>:

void killFloor () {
   15002:	       lea -24(sp),sp
   15006:	       move.l a6,-(sp)
	for (int i = 0; i < currentFloor -> numPolygons; i ++) {
   15008:	       clr.l 24(sp)
   1500c:	   /-- bra.s 15066 <killFloor+0x64>
		FreeVec(currentFloor -> polygon[i].vertexID);
   1500e:	/--|-> movea.l 1b30e <currentFloor>,a0
   15014:	|  |   move.l 12(a0),d1
   15018:	|  |   move.l 24(sp),d0
   1501c:	|  |   lsl.l #3,d0
   1501e:	|  |   movea.l d1,a0
   15020:	|  |   adda.l d0,a0
   15022:	|  |   move.l 4(a0),8(sp)
   15028:	|  |   move.l 1b1a2 <SysBase>,d0
   1502e:	|  |   movea.l d0,a6
   15030:	|  |   movea.l 8(sp),a1
   15034:	|  |   jsr -690(a6)
		FreeVec(currentFloor -> matrix[i]);
   15038:	|  |   movea.l 1b30e <currentFloor>,a0
   1503e:	|  |   move.l 16(a0),d1
   15042:	|  |   move.l 24(sp),d0
   15046:	|  |   add.l d0,d0
   15048:	|  |   add.l d0,d0
   1504a:	|  |   movea.l d1,a0
   1504c:	|  |   adda.l d0,a0
   1504e:	|  |   move.l (a0),4(sp)
   15052:	|  |   move.l 1b1a2 <SysBase>,d0
   15058:	|  |   movea.l d0,a6
   1505a:	|  |   movea.l 4(sp),a1
   1505e:	|  |   jsr -690(a6)
	for (int i = 0; i < currentFloor -> numPolygons; i ++) {
   15062:	|  |   addq.l #1,24(sp)
   15066:	|  \-> movea.l 1b30e <currentFloor>,a0
   1506c:	|      move.l 8(a0),d0
   15070:	|      cmp.l 24(sp),d0
   15074:	\----- bgt.s 1500e <killFloor+0xc>
	}
	FreeVec(currentFloor -> polygon);
   15076:	       movea.l 1b30e <currentFloor>,a0
   1507c:	       move.l 12(a0),20(sp)
   15082:	       move.l 1b1a2 <SysBase>,d0
   15088:	       movea.l d0,a6
   1508a:	       movea.l 20(sp),a1
   1508e:	       jsr -690(a6)
	currentFloor -> polygon = NULL;
   15092:	       movea.l 1b30e <currentFloor>,a0
   15098:	       clr.l 12(a0)
	FreeVec(currentFloor -> vertex);
   1509c:	       movea.l 1b30e <currentFloor>,a0
   150a2:	       move.l 4(a0),16(sp)
   150a8:	       move.l 1b1a2 <SysBase>,d0
   150ae:	       movea.l d0,a6
   150b0:	       movea.l 16(sp),a1
   150b4:	       jsr -690(a6)
	currentFloor -> vertex = NULL;
   150b8:	       movea.l 1b30e <currentFloor>,a0
   150be:	       clr.l 4(a0)
	FreeVec(currentFloor -> matrix);
   150c2:	       movea.l 1b30e <currentFloor>,a0
   150c8:	       move.l 16(a0),12(sp)
   150ce:	       move.l 1b1a2 <SysBase>,d0
   150d4:	       movea.l d0,a6
   150d6:	       movea.l 12(sp),a1
   150da:	       jsr -690(a6)
	currentFloor -> matrix = NULL;
   150de:	       movea.l 1b30e <currentFloor>,a0
   150e4:	       clr.l 16(a0)
}
   150e8:	       nop
   150ea:	       movea.l (sp)+,a6
   150ec:	       lea 24(sp),sp
   150f0:	       rts

000150f2 <polysShareSide>:

BOOL polysShareSide (struct floorPolygon a, struct floorPolygon b) {
   150f2:	                   lea -12(sp),sp
	int sharedVertices = 0;
   150f6:	                   clr.l 8(sp)
	int i, j;

	for (i = 0; i < a.numVertices; i ++) {
   150fa:	                   clr.l 4(sp)
   150fe:	   /-------------- bra.s 1514a <polysShareSide+0x58>
		for (j = 0; j < b.numVertices; j ++) {
   15100:	/--|-------------> clr.l (sp)
   15102:	|  |     /-------- bra.s 1513e <polysShareSide+0x4c>
			if (a.vertexID[i] == b.vertexID[j]) {
   15104:	|  |  /--|-------> move.l 20(sp),d1
   15108:	|  |  |  |         move.l 4(sp),d0
   1510c:	|  |  |  |         add.l d0,d0
   1510e:	|  |  |  |         add.l d0,d0
   15110:	|  |  |  |         movea.l d1,a0
   15112:	|  |  |  |         adda.l d0,a0
   15114:	|  |  |  |         move.l (a0),d1
   15116:	|  |  |  |         movea.l 28(sp),a0
   1511a:	|  |  |  |         move.l (sp),d0
   1511c:	|  |  |  |         add.l d0,d0
   1511e:	|  |  |  |         add.l d0,d0
   15120:	|  |  |  |         adda.l d0,a0
   15122:	|  |  |  |         move.l (a0),d0
   15124:	|  |  |  |         cmp.l d1,d0
   15126:	|  |  |  |     /-- bne.s 1513c <polysShareSide+0x4a>
				if (sharedVertices ++) return TRUE;
   15128:	|  |  |  |     |   move.l 8(sp),d0
   1512c:	|  |  |  |     |   move.l d0,d1
   1512e:	|  |  |  |     |   addq.l #1,d1
   15130:	|  |  |  |     |   move.l d1,8(sp)
   15134:	|  |  |  |     |   tst.l d0
   15136:	|  |  |  |     +-- beq.s 1513c <polysShareSide+0x4a>
   15138:	|  |  |  |     |   moveq #1,d0
   1513a:	|  |  |  |  /--|-- bra.s 15156 <polysShareSide+0x64>
		for (j = 0; j < b.numVertices; j ++) {
   1513c:	|  |  |  |  |  \-> addq.l #1,(sp)
   1513e:	|  |  |  \--|----> move.l 24(sp),d0
   15142:	|  |  |     |      cmp.l (sp),d0
   15144:	|  |  \-----|----- bgt.s 15104 <polysShareSide+0x12>
	for (i = 0; i < a.numVertices; i ++) {
   15146:	|  |        |      addq.l #1,4(sp)
   1514a:	|  \--------|----> move.l 16(sp),d0
   1514e:	|           |      cmp.l 4(sp),d0
   15152:	\-----------|----- bgt.s 15100 <polysShareSide+0xe>
			}
		}
	}

	return FALSE;
   15154:	            |      clr.w d0
}
   15156:	            \----> lea 12(sp),sp
   1515a:	                   rts

0001515c <pointInFloorPolygon>:

BOOL pointInFloorPolygon (struct floorPolygon * floorPoly, int x, int y) {
   1515c:	             lea -28(sp),sp
   15160:	             move.l d3,-(sp)
   15162:	             move.l d2,-(sp)
	int i = 0, j, c = 0;
   15164:	             clr.l 32(sp)
   15168:	             clr.l 24(sp)
	float xp_i, yp_i;
	float xp_j, yp_j;

	for (j = floorPoly->numVertices - 1; i < floorPoly->numVertices; j = i++) {
   1516c:	             movea.l 40(sp),a0
   15170:	             move.l (a0),d0
   15172:	             move.l d0,d1
   15174:	             subq.l #1,d1
   15176:	             move.l d1,28(sp)
   1517a:	   /-------- bra.w 15374 <pointInFloorPolygon+0x218>

		xp_i = currentFloor->vertex[floorPoly->vertexID[i]].x;
   1517e:	/--|-------> movea.l 1b30e <currentFloor>,a0
   15184:	|  |         move.l 4(a0),d1
   15188:	|  |         movea.l 40(sp),a0
   1518c:	|  |         movea.l 4(a0),a0
   15190:	|  |         move.l 32(sp),d0
   15194:	|  |         add.l d0,d0
   15196:	|  |         add.l d0,d0
   15198:	|  |         adda.l d0,a0
   1519a:	|  |         move.l (a0),d0
   1519c:	|  |         lsl.l #3,d0
   1519e:	|  |         movea.l d1,a0
   151a0:	|  |         adda.l d0,a0
   151a2:	|  |         move.l (a0),d0
   151a4:	|  |         move.l d0,-(sp)
   151a6:	|  |         jsr 15ea8 <__floatsisf>
   151ac:	|  |         addq.l #4,sp
   151ae:	|  |         move.l d0,20(sp)
		yp_i = currentFloor->vertex[floorPoly->vertexID[i]].y;
   151b2:	|  |         movea.l 1b30e <currentFloor>,a0
   151b8:	|  |         move.l 4(a0),d1
   151bc:	|  |         movea.l 40(sp),a0
   151c0:	|  |         movea.l 4(a0),a0
   151c4:	|  |         move.l 32(sp),d0
   151c8:	|  |         add.l d0,d0
   151ca:	|  |         add.l d0,d0
   151cc:	|  |         adda.l d0,a0
   151ce:	|  |         move.l (a0),d0
   151d0:	|  |         lsl.l #3,d0
   151d2:	|  |         movea.l d1,a0
   151d4:	|  |         adda.l d0,a0
   151d6:	|  |         move.l 4(a0),d0
   151da:	|  |         move.l d0,-(sp)
   151dc:	|  |         jsr 15ea8 <__floatsisf>
   151e2:	|  |         addq.l #4,sp
   151e4:	|  |         move.l d0,16(sp)
		xp_j = currentFloor->vertex[floorPoly->vertexID[j]].x;
   151e8:	|  |         movea.l 1b30e <currentFloor>,a0
   151ee:	|  |         move.l 4(a0),d1
   151f2:	|  |         movea.l 40(sp),a0
   151f6:	|  |         movea.l 4(a0),a0
   151fa:	|  |         move.l 28(sp),d0
   151fe:	|  |         add.l d0,d0
   15200:	|  |         add.l d0,d0
   15202:	|  |         adda.l d0,a0
   15204:	|  |         move.l (a0),d0
   15206:	|  |         lsl.l #3,d0
   15208:	|  |         movea.l d1,a0
   1520a:	|  |         adda.l d0,a0
   1520c:	|  |         move.l (a0),d0
   1520e:	|  |         move.l d0,-(sp)
   15210:	|  |         jsr 15ea8 <__floatsisf>
   15216:	|  |         addq.l #4,sp
   15218:	|  |         move.l d0,12(sp)
		yp_j = currentFloor->vertex[floorPoly->vertexID[j]].y;
   1521c:	|  |         movea.l 1b30e <currentFloor>,a0
   15222:	|  |         move.l 4(a0),d1
   15226:	|  |         movea.l 40(sp),a0
   1522a:	|  |         movea.l 4(a0),a0
   1522e:	|  |         move.l 28(sp),d0
   15232:	|  |         add.l d0,d0
   15234:	|  |         add.l d0,d0
   15236:	|  |         adda.l d0,a0
   15238:	|  |         move.l (a0),d0
   1523a:	|  |         lsl.l #3,d0
   1523c:	|  |         movea.l d1,a0
   1523e:	|  |         adda.l d0,a0
   15240:	|  |         move.l 4(a0),d0
   15244:	|  |         move.l d0,-(sp)
   15246:	|  |         jsr 15ea8 <__floatsisf>
   1524c:	|  |         addq.l #4,sp
   1524e:	|  |         move.l d0,8(sp)

		if ((((yp_i <= y) && (y < yp_j)) || ((yp_j <= y) && (y < yp_i))) &&
   15252:	|  |         move.l 48(sp),-(sp)
   15256:	|  |         jsr 15ea8 <__floatsisf>
   1525c:	|  |         addq.l #4,sp
   1525e:	|  |         move.l d0,-(sp)
   15260:	|  |         move.l 20(sp),-(sp)
   15264:	|  |         jsr 1604a <__lesf2>
   1526a:	|  |         addq.l #8,sp
   1526c:	|  |         tst.l d0
   1526e:	|  |     /-- bgt.s 1528e <pointInFloorPolygon+0x132>
   15270:	|  |     |   move.l 48(sp),-(sp)
   15274:	|  |     |   jsr 15ea8 <__floatsisf>
   1527a:	|  |     |   addq.l #4,sp
   1527c:	|  |     |   move.l d0,-(sp)
   1527e:	|  |     |   move.l 12(sp),-(sp)
   15282:	|  |     |   jsr 16014 <__gtsf2>
   15288:	|  |     |   addq.l #8,sp
   1528a:	|  |     |   tst.l d0
   1528c:	|  |  /--|-- bgt.s 152ce <pointInFloorPolygon+0x172>
   1528e:	|  |  |  \-> move.l 48(sp),-(sp)
   15292:	|  |  |      jsr 15ea8 <__floatsisf>
   15298:	|  |  |      addq.l #4,sp
   1529a:	|  |  |      move.l d0,-(sp)
   1529c:	|  |  |      move.l 12(sp),-(sp)
   152a0:	|  |  |      jsr 1604a <__lesf2>
   152a6:	|  |  |      addq.l #8,sp
   152a8:	|  |  |      tst.l d0
   152aa:	|  |  |  /-- bgt.w 15364 <pointInFloorPolygon+0x208>
   152ae:	|  |  |  |   move.l 48(sp),-(sp)
   152b2:	|  |  |  |   jsr 15ea8 <__floatsisf>
   152b8:	|  |  |  |   addq.l #4,sp
   152ba:	|  |  |  |   move.l d0,-(sp)
   152bc:	|  |  |  |   move.l 20(sp),-(sp)
   152c0:	|  |  |  |   jsr 16014 <__gtsf2>
   152c6:	|  |  |  |   addq.l #8,sp
   152c8:	|  |  |  |   tst.l d0
   152ca:	|  |  |  +-- ble.w 15364 <pointInFloorPolygon+0x208>
			(x < (xp_j - xp_i) * (y - yp_i) / (yp_j - yp_i) + xp_i)) {
   152ce:	|  |  \--|-> move.l 44(sp),-(sp)
   152d2:	|  |     |   jsr 15ea8 <__floatsisf>
   152d8:	|  |     |   addq.l #4,sp
   152da:	|  |     |   move.l d0,d3
   152dc:	|  |     |   move.l 20(sp),-(sp)
   152e0:	|  |     |   move.l 16(sp),-(sp)
   152e4:	|  |     |   jsr 1619c <__subsf3>
   152ea:	|  |     |   addq.l #8,sp
   152ec:	|  |     |   move.l d0,d2
   152ee:	|  |     |   move.l 48(sp),-(sp)
   152f2:	|  |     |   jsr 15ea8 <__floatsisf>
   152f8:	|  |     |   addq.l #4,sp
   152fa:	|  |     |   move.l 16(sp),-(sp)
   152fe:	|  |     |   move.l d0,-(sp)
   15300:	|  |     |   jsr 1619c <__subsf3>
   15306:	|  |     |   addq.l #8,sp
   15308:	|  |     |   move.l d0,-(sp)
   1530a:	|  |     |   move.l d2,-(sp)
   1530c:	|  |     |   jsr 15f5a <__mulsf3>
   15312:	|  |     |   addq.l #8,sp
   15314:	|  |     |   move.l d0,d2
   15316:	|  |     |   move.l 16(sp),-(sp)
   1531a:	|  |     |   move.l 12(sp),-(sp)
   1531e:	|  |     |   jsr 1619c <__subsf3>
   15324:	|  |     |   addq.l #8,sp
   15326:	|  |     |   move.l d0,-(sp)
   15328:	|  |     |   move.l d2,-(sp)
   1532a:	|  |     |   jsr 15d54 <__divsf3>
   15330:	|  |     |   addq.l #8,sp
   15332:	|  |     |   move.l 20(sp),-(sp)
   15336:	|  |     |   move.l d0,-(sp)
   15338:	|  |     |   jsr 15c5a <__addsf3>
   1533e:	|  |     |   addq.l #8,sp
		if ((((yp_i <= y) && (y < yp_j)) || ((yp_j <= y) && (y < yp_i))) &&
   15340:	|  |     |   move.l d0,-(sp)
   15342:	|  |     |   move.l d3,-(sp)
   15344:	|  |     |   jsr 160ce <__ltsf2>
   1534a:	|  |     |   addq.l #8,sp
   1534c:	|  |     |   tst.l d0
   1534e:	|  |     +-- bge.s 15364 <pointInFloorPolygon+0x208>

			c = !c;
   15350:	|  |     |   tst.l 24(sp)
   15354:	|  |     |   seq d0
   15356:	|  |     |   neg.b d0
   15358:	|  |     |   move.b d0,d0
   1535a:	|  |     |   andi.l #255,d0
   15360:	|  |     |   move.l d0,24(sp)
	for (j = floorPoly->numVertices - 1; i < floorPoly->numVertices; j = i++) {
   15364:	|  |     \-> move.l 32(sp),d0
   15368:	|  |         move.l d0,d1
   1536a:	|  |         addq.l #1,d1
   1536c:	|  |         move.l d1,32(sp)
   15370:	|  |         move.l d0,28(sp)
   15374:	|  \-------> movea.l 40(sp),a0
   15378:	|            move.l (a0),d0
   1537a:	|            cmp.l 32(sp),d0
   1537e:	\----------- bgt.w 1517e <pointInFloorPolygon+0x22>
		}
	}
	return c ? TRUE : FALSE;
   15382:	             tst.l 24(sp)
   15386:	             sne d0
   15388:	             neg.b d0
   1538a:	             move.b d0,d0
   1538c:	             andi.w #255,d0
}
   15390:	             move.l (sp)+,d2
   15392:	             move.l (sp)+,d3
   15394:	             lea 28(sp),sp
   15398:	             rts

0001539a <setFloor>:

BOOL setFloor (int fileNum) {
   1539a:	                               lea -132(sp),sp
   1539e:	                               move.l a6,-(sp)
   153a0:	                               move.l a2,-(sp)
	int i, j;

	killFloor ();
   153a2:	                               jsr 15002 <killFloor>

	if (! openFileFromNum (fileNum)) return FALSE;
   153a8:	                               move.l 144(sp),-(sp)
   153ac:	                               jsr 5c40 <openFileFromNum>
   153b2:	                               addq.l #4,sp
   153b4:	                               tst.l d0
   153b6:	                           /-- bne.s 153be <setFloor+0x24>
   153b8:	                           |   clr.w d0
   153ba:	/--------------------------|-- bra.w 15b0a <setFloor+0x770>

	// Find out how many polygons there are and reserve memory

	currentFloor -> originalNum = fileNum;
   153be:	|                          \-> movea.l 1b30e <currentFloor>,a0
   153c4:	|                              move.l 144(sp),(a0)
	currentFloor -> numPolygons = FGetC (bigDataFile);
   153c8:	|                              move.l 1b18a <bigDataFile>,118(sp)
   153d0:	|                              move.l 1b1aa <DOSBase>,d0
   153d6:	|                              movea.l d0,a6
   153d8:	|                              move.l 118(sp),d1
   153dc:	|                              jsr -306(a6)
   153e0:	|                              move.l d0,114(sp)
   153e4:	|                              move.l 114(sp),d0
   153e8:	|                              movea.l 1b30e <currentFloor>,a0
   153ee:	|                              move.l d0,8(a0)
	currentFloor -> polygon = AllocVec(  sizeof( struct floorPolygon) * currentFloor -> numPolygons, MEMF_ANY);
   153f2:	|                              movea.l 1b30e <currentFloor>,a0
   153f8:	|                              move.l 8(a0),d0
   153fc:	|                              lsl.l #3,d0
   153fe:	|                              move.l d0,110(sp)
   15402:	|                              clr.l 106(sp)
   15406:	|                              move.l 1b1a2 <SysBase>,d0
   1540c:	|                              movea.l d0,a6
   1540e:	|                              move.l 110(sp),d0
   15412:	|                              move.l 106(sp),d1
   15416:	|                              jsr -684(a6)
   1541a:	|                              move.l d0,102(sp)
   1541e:	|                              move.l 102(sp),d0
   15422:	|                              movea.l 1b30e <currentFloor>,a0
   15428:	|                              move.l d0,12(a0)
	if (!(currentFloor -> polygon)) {
   1542c:	|                              movea.l 1b30e <currentFloor>,a0
   15432:	|                              move.l 12(a0),d0
   15436:	|                          /-- bne.s 1544c <setFloor+0xb2>
		KPrintF("setFloor: Cannot allocate memory");
   15438:	|                          |   pea 18915 <line.c.05397aaf+0xd7>
   1543e:	|                          |   jsr 15bf0 <KPrintF>
   15444:	|                          |   addq.l #4,sp
		return FALSE;
   15446:	|                          |   clr.w d0
   15448:	+--------------------------|-- bra.w 15b0a <setFloor+0x770>
	}

	// Read in each polygon

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   1544c:	|                          \-> clr.l 136(sp)
   15450:	|                    /-------- bra.w 15568 <setFloor+0x1ce>

		// Find out how many vertex IDs there are and reserve memory

		currentFloor -> polygon[i].numVertices = FGetC (bigDataFile);
   15454:	|                 /--|-------> move.l 1b18a <bigDataFile>,26(sp)
   1545c:	|                 |  |         move.l 1b1aa <DOSBase>,d0
   15462:	|                 |  |         movea.l d0,a6
   15464:	|                 |  |         move.l 26(sp),d1
   15468:	|                 |  |         jsr -306(a6)
   1546c:	|                 |  |         move.l d0,22(sp)
   15470:	|                 |  |         move.l 22(sp),d1
   15474:	|                 |  |         movea.l 1b30e <currentFloor>,a0
   1547a:	|                 |  |         movea.l 12(a0),a0
   1547e:	|                 |  |         move.l 136(sp),d0
   15482:	|                 |  |         lsl.l #3,d0
   15484:	|                 |  |         adda.l d0,a0
   15486:	|                 |  |         move.l d1,(a0)
		currentFloor -> polygon[i].vertexID = AllocVec(sizeof (int) * currentFloor -> polygon[i].numVertices, MEMF_ANY);
   15488:	|                 |  |         movea.l 1b30e <currentFloor>,a0
   1548e:	|                 |  |         move.l 12(a0),d1
   15492:	|                 |  |         move.l 136(sp),d0
   15496:	|                 |  |         lsl.l #3,d0
   15498:	|                 |  |         movea.l d1,a0
   1549a:	|                 |  |         adda.l d0,a0
   1549c:	|                 |  |         move.l (a0),d0
   1549e:	|                 |  |         add.l d0,d0
   154a0:	|                 |  |         add.l d0,d0
   154a2:	|                 |  |         move.l d0,18(sp)
   154a6:	|                 |  |         clr.l 14(sp)
   154aa:	|                 |  |         move.l 1b1a2 <SysBase>,d0
   154b0:	|                 |  |         movea.l d0,a6
   154b2:	|                 |  |         move.l 18(sp),d0
   154b6:	|                 |  |         move.l 14(sp),d1
   154ba:	|                 |  |         jsr -684(a6)
   154be:	|                 |  |         move.l d0,10(sp)
   154c2:	|                 |  |         move.l 10(sp),d1
   154c6:	|                 |  |         movea.l 1b30e <currentFloor>,a0
   154cc:	|                 |  |         movea.l 12(a0),a0
   154d0:	|                 |  |         move.l 136(sp),d0
   154d4:	|                 |  |         lsl.l #3,d0
   154d6:	|                 |  |         adda.l d0,a0
   154d8:	|                 |  |         move.l d1,4(a0)
		if (!(currentFloor -> polygon[i].vertexID)) {
   154dc:	|                 |  |         movea.l 1b30e <currentFloor>,a0
   154e2:	|                 |  |         move.l 12(a0),d1
   154e6:	|                 |  |         move.l 136(sp),d0
   154ea:	|                 |  |         lsl.l #3,d0
   154ec:	|                 |  |         movea.l d1,a0
   154ee:	|                 |  |         adda.l d0,a0
   154f0:	|                 |  |         move.l 4(a0),d0
   154f4:	|                 |  |     /-- bne.s 1550a <setFloor+0x170>
			KPrintF("setFloor: Cannot allocate memory");
   154f6:	|                 |  |     |   pea 18915 <line.c.05397aaf+0xd7>
   154fc:	|                 |  |     |   jsr 15bf0 <KPrintF>
   15502:	|                 |  |     |   addq.l #4,sp
			return FALSE;
   15504:	|                 |  |     |   clr.w d0
   15506:	+-----------------|--|-----|-- bra.w 15b0a <setFloor+0x770>
		}

		// Read in each vertex ID

		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
   1550a:	|                 |  |     \-> clr.l 132(sp)
   1550e:	|                 |  |     /-- bra.s 15548 <setFloor+0x1ae>
			currentFloor -> polygon[i].vertexID[j] = get2bytes (bigDataFile);
   15510:	|                 |  |  /--|-> move.l 1b18a <bigDataFile>,d1
   15516:	|                 |  |  |  |   movea.l 1b30e <currentFloor>,a0
   1551c:	|                 |  |  |  |   movea.l 12(a0),a0
   15520:	|                 |  |  |  |   move.l 136(sp),d0
   15524:	|                 |  |  |  |   lsl.l #3,d0
   15526:	|                 |  |  |  |   adda.l d0,a0
   15528:	|                 |  |  |  |   movea.l 4(a0),a0
   1552c:	|                 |  |  |  |   move.l 132(sp),d0
   15530:	|                 |  |  |  |   add.l d0,d0
   15532:	|                 |  |  |  |   add.l d0,d0
   15534:	|                 |  |  |  |   lea (0,a0,d0.l),a2
   15538:	|                 |  |  |  |   move.l d1,-(sp)
   1553a:	|                 |  |  |  |   jsr 6bc <get2bytes>
   15540:	|                 |  |  |  |   addq.l #4,sp
   15542:	|                 |  |  |  |   move.l d0,(a2)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
   15544:	|                 |  |  |  |   addq.l #1,132(sp)
   15548:	|                 |  |  |  \-> movea.l 1b30e <currentFloor>,a0
   1554e:	|                 |  |  |      move.l 12(a0),d1
   15552:	|                 |  |  |      move.l 136(sp),d0
   15556:	|                 |  |  |      lsl.l #3,d0
   15558:	|                 |  |  |      movea.l d1,a0
   1555a:	|                 |  |  |      adda.l d0,a0
   1555c:	|                 |  |  |      move.l (a0),d0
   1555e:	|                 |  |  |      cmp.l 132(sp),d0
   15562:	|                 |  |  \----- bgt.s 15510 <setFloor+0x176>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   15564:	|                 |  |         addq.l #1,136(sp)
   15568:	|                 |  \-------> movea.l 1b30e <currentFloor>,a0
   1556e:	|                 |            move.l 8(a0),d0
   15572:	|                 |            cmp.l 136(sp),d0
   15576:	|                 \----------- bgt.w 15454 <setFloor+0xba>
		}
	}

	// Find out how many vertices there are and reserve memory

	i = get2bytes (bigDataFile);
   1557a:	|                              move.l 1b18a <bigDataFile>,d0
   15580:	|                              move.l d0,-(sp)
   15582:	|                              jsr 6bc <get2bytes>
   15588:	|                              addq.l #4,sp
   1558a:	|                              move.l d0,136(sp)
	currentFloor -> vertex = AllocVec( sizeof(struct POINT)*i,MEMF_ANY);
   1558e:	|                              move.l 136(sp),d0
   15592:	|                              lsl.l #3,d0
   15594:	|                              move.l d0,98(sp)
   15598:	|                              clr.l 94(sp)
   1559c:	|                              move.l 1b1a2 <SysBase>,d0
   155a2:	|                              movea.l d0,a6
   155a4:	|                              move.l 98(sp),d0
   155a8:	|                              move.l 94(sp),d1
   155ac:	|                              jsr -684(a6)
   155b0:	|                              move.l d0,90(sp)
   155b4:	|                              move.l 90(sp),d0
   155b8:	|                              movea.l 1b30e <currentFloor>,a0
   155be:	|                              move.l d0,4(a0)

	if (!(currentFloor -> vertex)) {
   155c2:	|                              movea.l 1b30e <currentFloor>,a0
   155c8:	|                              move.l 4(a0),d0
   155cc:	|                          /-- bne.s 155e2 <setFloor+0x248>
		KPrintF("setFloor: Cannot allocate memory");
   155ce:	|                          |   pea 18915 <line.c.05397aaf+0xd7>
   155d4:	|                          |   jsr 15bf0 <KPrintF>
   155da:	|                          |   addq.l #4,sp
		return FALSE;
   155dc:	|                          |   clr.w d0
   155de:	+--------------------------|-- bra.w 15b0a <setFloor+0x770>
	}

	for (j = 0; j < i; j ++) {
   155e2:	|                          \-> clr.l 132(sp)
   155e6:	|                          /-- bra.s 1563a <setFloor+0x2a0>
		currentFloor -> vertex[j].x = get2bytes (bigDataFile);
   155e8:	|                       /--|-> move.l 1b18a <bigDataFile>,d1
   155ee:	|                       |  |   movea.l 1b30e <currentFloor>,a0
   155f4:	|                       |  |   movea.l 4(a0),a0
   155f8:	|                       |  |   move.l 132(sp),d0
   155fc:	|                       |  |   lsl.l #3,d0
   155fe:	|                       |  |   lea (0,a0,d0.l),a2
   15602:	|                       |  |   move.l d1,-(sp)
   15604:	|                       |  |   jsr 6bc <get2bytes>
   1560a:	|                       |  |   addq.l #4,sp
   1560c:	|                       |  |   move.l d0,(a2)
		currentFloor -> vertex[j].y = get2bytes (bigDataFile);
   1560e:	|                       |  |   move.l 1b18a <bigDataFile>,d1
   15614:	|                       |  |   movea.l 1b30e <currentFloor>,a0
   1561a:	|                       |  |   movea.l 4(a0),a0
   1561e:	|                       |  |   move.l 132(sp),d0
   15622:	|                       |  |   lsl.l #3,d0
   15624:	|                       |  |   lea (0,a0,d0.l),a2
   15628:	|                       |  |   move.l d1,-(sp)
   1562a:	|                       |  |   jsr 6bc <get2bytes>
   15630:	|                       |  |   addq.l #4,sp
   15632:	|                       |  |   move.l d0,4(a2)
	for (j = 0; j < i; j ++) {
   15636:	|                       |  |   addq.l #1,132(sp)
   1563a:	|                       |  \-> move.l 132(sp),d0
   1563e:	|                       |      cmp.l 136(sp),d0
   15642:	|                       \----- blt.s 155e8 <setFloor+0x24e>
	}

	finishAccess ();
   15644:	|                              jsr 5b38 <finishAccess>

	// Now build the movement martix

	currentFloor -> matrix = AllocVec( sizeof(int) * currentFloor -> numPolygons, MEMF_ANY);
   1564a:	|                              movea.l 1b30e <currentFloor>,a0
   15650:	|                              move.l 8(a0),d0
   15654:	|                              add.l d0,d0
   15656:	|                              add.l d0,d0
   15658:	|                              move.l d0,86(sp)
   1565c:	|                              clr.l 82(sp)
   15660:	|                              move.l 1b1a2 <SysBase>,d0
   15666:	|                              movea.l d0,a6
   15668:	|                              move.l 86(sp),d0
   1566c:	|                              move.l 82(sp),d1
   15670:	|                              jsr -684(a6)
   15674:	|                              move.l d0,78(sp)
   15678:	|                              move.l 78(sp),d0
   1567c:	|                              movea.l 1b30e <currentFloor>,a0
   15682:	|                              move.l d0,16(a0)
	int * * distanceMatrix = AllocVec( sizeof(int) * currentFloor -> numPolygons, MEMF_ANY);
   15686:	|                              movea.l 1b30e <currentFloor>,a0
   1568c:	|                              move.l 8(a0),d0
   15690:	|                              add.l d0,d0
   15692:	|                              add.l d0,d0
   15694:	|                              move.l d0,74(sp)
   15698:	|                              clr.l 70(sp)
   1569c:	|                              move.l 1b1a2 <SysBase>,d0
   156a2:	|                              movea.l d0,a6
   156a4:	|                              move.l 74(sp),d0
   156a8:	|                              move.l 70(sp),d1
   156ac:	|                              jsr -684(a6)
   156b0:	|                              move.l d0,66(sp)
   156b4:	|                              move.l 66(sp),d0
   156b8:	|                              move.l d0,62(sp)


	if (!(currentFloor -> matrix)) {
   156bc:	|                              movea.l 1b30e <currentFloor>,a0
   156c2:	|                              move.l 16(a0),d0
   156c6:	|                          /-- bne.s 156dc <setFloor+0x342>
		KPrintF("setFloor: Cannot allocate memory");
   156c8:	|                          |   pea 18915 <line.c.05397aaf+0xd7>
   156ce:	|                          |   jsr 15bf0 <KPrintF>
   156d4:	|                          |   addq.l #4,sp
		return FALSE;
   156d6:	|                          |   clr.w d0
   156d8:	+--------------------------|-- bra.w 15b0a <setFloor+0x770>
	}

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   156dc:	|                          \-> clr.l 136(sp)
   156e0:	|                    /-------- bra.w 15804 <setFloor+0x46a>
		currentFloor -> matrix[i] = AllocVec( sizeof(int) * currentFloor -> numPolygons,MEMF_ANY);
   156e4:	|                 /--|-------> movea.l 1b30e <currentFloor>,a0
   156ea:	|                 |  |         move.l 8(a0),d0
   156ee:	|                 |  |         add.l d0,d0
   156f0:	|                 |  |         add.l d0,d0
   156f2:	|                 |  |         move.l d0,50(sp)
   156f6:	|                 |  |         clr.l 46(sp)
   156fa:	|                 |  |         move.l 1b1a2 <SysBase>,d0
   15700:	|                 |  |         movea.l d0,a6
   15702:	|                 |  |         move.l 50(sp),d0
   15706:	|                 |  |         move.l 46(sp),d1
   1570a:	|                 |  |         jsr -684(a6)
   1570e:	|                 |  |         move.l d0,42(sp)
   15712:	|                 |  |         move.l 42(sp),d0
   15716:	|                 |  |         movea.l 1b30e <currentFloor>,a0
   1571c:	|                 |  |         movea.l 16(a0),a0
   15720:	|                 |  |         move.l 136(sp),d1
   15724:	|                 |  |         add.l d1,d1
   15726:	|                 |  |         add.l d1,d1
   15728:	|                 |  |         adda.l d1,a0
   1572a:	|                 |  |         move.l d0,(a0)
		distanceMatrix        [i] = AllocVec( sizeof(int) * currentFloor -> numPolygons,MEMF_ANY);
   1572c:	|                 |  |         movea.l 1b30e <currentFloor>,a0
   15732:	|                 |  |         move.l 8(a0),d0
   15736:	|                 |  |         add.l d0,d0
   15738:	|                 |  |         add.l d0,d0
   1573a:	|                 |  |         move.l d0,38(sp)
   1573e:	|                 |  |         clr.l 34(sp)
   15742:	|                 |  |         move.l 1b1a2 <SysBase>,d0
   15748:	|                 |  |         movea.l d0,a6
   1574a:	|                 |  |         move.l 38(sp),d0
   1574e:	|                 |  |         move.l 34(sp),d1
   15752:	|                 |  |         jsr -684(a6)
   15756:	|                 |  |         move.l d0,30(sp)
   1575a:	|                 |  |         move.l 30(sp),d1
   1575e:	|                 |  |         move.l 136(sp),d0
   15762:	|                 |  |         add.l d0,d0
   15764:	|                 |  |         add.l d0,d0
   15766:	|                 |  |         movea.l 62(sp),a0
   1576a:	|                 |  |         adda.l d0,a0
   1576c:	|                 |  |         move.l d1,(a0)
		if (!(currentFloor -> matrix[i])) { 
   1576e:	|                 |  |         movea.l 1b30e <currentFloor>,a0
   15774:	|                 |  |         move.l 16(a0),d1
   15778:	|                 |  |         move.l 136(sp),d0
   1577c:	|                 |  |         add.l d0,d0
   1577e:	|                 |  |         add.l d0,d0
   15780:	|                 |  |         movea.l d1,a0
   15782:	|                 |  |         adda.l d0,a0
   15784:	|                 |  |         move.l (a0),d0
   15786:	|                 |  |     /-- bne.s 1579c <setFloor+0x402>
			KPrintF("setFloor: Cannot allocate memory");
   15788:	|                 |  |     |   pea 18915 <line.c.05397aaf+0xd7>
   1578e:	|                 |  |     |   jsr 15bf0 <KPrintF>
   15794:	|                 |  |     |   addq.l #4,sp
			return FALSE;
   15796:	|                 |  |     |   clr.w d0
   15798:	+-----------------|--|-----|-- bra.w 15b0a <setFloor+0x770>
		}
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   1579c:	|                 |  |     \-> clr.l 132(sp)
   157a0:	|                 |  |     /-- bra.s 157f0 <setFloor+0x456>
			currentFloor -> matrix[i][j] = -1;
   157a2:	|                 |  |  /--|-> movea.l 1b30e <currentFloor>,a0
   157a8:	|                 |  |  |  |   move.l 16(a0),d1
   157ac:	|                 |  |  |  |   move.l 136(sp),d0
   157b0:	|                 |  |  |  |   add.l d0,d0
   157b2:	|                 |  |  |  |   add.l d0,d0
   157b4:	|                 |  |  |  |   movea.l d1,a0
   157b6:	|                 |  |  |  |   adda.l d0,a0
   157b8:	|                 |  |  |  |   move.l (a0),d1
   157ba:	|                 |  |  |  |   move.l 132(sp),d0
   157be:	|                 |  |  |  |   add.l d0,d0
   157c0:	|                 |  |  |  |   add.l d0,d0
   157c2:	|                 |  |  |  |   movea.l d1,a0
   157c4:	|                 |  |  |  |   adda.l d0,a0
   157c6:	|                 |  |  |  |   moveq #-1,d1
   157c8:	|                 |  |  |  |   move.l d1,(a0)
			distanceMatrix        [i][j] = 10000;
   157ca:	|                 |  |  |  |   move.l 136(sp),d0
   157ce:	|                 |  |  |  |   add.l d0,d0
   157d0:	|                 |  |  |  |   add.l d0,d0
   157d2:	|                 |  |  |  |   movea.l 62(sp),a0
   157d6:	|                 |  |  |  |   adda.l d0,a0
   157d8:	|                 |  |  |  |   move.l (a0),d1
   157da:	|                 |  |  |  |   move.l 132(sp),d0
   157de:	|                 |  |  |  |   add.l d0,d0
   157e0:	|                 |  |  |  |   add.l d0,d0
   157e2:	|                 |  |  |  |   movea.l d1,a0
   157e4:	|                 |  |  |  |   adda.l d0,a0
   157e6:	|                 |  |  |  |   move.l #10000,(a0)
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   157ec:	|                 |  |  |  |   addq.l #1,132(sp)
   157f0:	|                 |  |  |  \-> movea.l 1b30e <currentFloor>,a0
   157f6:	|                 |  |  |      move.l 8(a0),d0
   157fa:	|                 |  |  |      cmp.l 132(sp),d0
   157fe:	|                 |  |  \----- bgt.s 157a2 <setFloor+0x408>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   15800:	|                 |  |         addq.l #1,136(sp)
   15804:	|                 |  \-------> movea.l 1b30e <currentFloor>,a0
   1580a:	|                 |            move.l 8(a0),d0
   1580e:	|                 |            cmp.l 136(sp),d0
   15812:	|                 \----------- bgt.w 156e4 <setFloor+0x34a>
		}
	}

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   15816:	|                              clr.l 136(sp)
   1581a:	|              /-------------- bra.w 15920 <setFloor+0x586>
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   1581e:	|           /--|-------------> clr.l 132(sp)
   15822:	|           |  |     /-------- bra.w 1590a <setFloor+0x570>
			if (i != j) {
   15826:	|           |  |  /--|-------> move.l 136(sp),d0
   1582a:	|           |  |  |  |         cmp.l 132(sp),d0
   1582e:	|           |  |  |  |     /-- beq.w 158c0 <setFloor+0x526>
				if (polysShareSide (currentFloor -> polygon[i], currentFloor -> polygon[j])) {
   15832:	|           |  |  |  |     |   movea.l 1b30e <currentFloor>,a0
   15838:	|           |  |  |  |     |   move.l 12(a0),d1
   1583c:	|           |  |  |  |     |   move.l 132(sp),d0
   15840:	|           |  |  |  |     |   lsl.l #3,d0
   15842:	|           |  |  |  |     |   movea.l d1,a1
   15844:	|           |  |  |  |     |   adda.l d0,a1
   15846:	|           |  |  |  |     |   movea.l 1b30e <currentFloor>,a0
   1584c:	|           |  |  |  |     |   move.l 12(a0),d1
   15850:	|           |  |  |  |     |   move.l 136(sp),d0
   15854:	|           |  |  |  |     |   lsl.l #3,d0
   15856:	|           |  |  |  |     |   movea.l d1,a0
   15858:	|           |  |  |  |     |   adda.l d0,a0
   1585a:	|           |  |  |  |     |   move.l 4(a1),-(sp)
   1585e:	|           |  |  |  |     |   move.l (a1),-(sp)
   15860:	|           |  |  |  |     |   move.l 4(a0),-(sp)
   15864:	|           |  |  |  |     |   move.l (a0),-(sp)
   15866:	|           |  |  |  |     |   jsr 150f2 <polysShareSide>
   1586c:	|           |  |  |  |     |   lea 16(sp),sp
   15870:	|           |  |  |  |     |   tst.w d0
   15872:	|           |  |  |  |  /--|-- beq.w 15906 <setFloor+0x56c>
					currentFloor -> matrix[i][j] = j;
   15876:	|           |  |  |  |  |  |   movea.l 1b30e <currentFloor>,a0
   1587c:	|           |  |  |  |  |  |   move.l 16(a0),d1
   15880:	|           |  |  |  |  |  |   move.l 136(sp),d0
   15884:	|           |  |  |  |  |  |   add.l d0,d0
   15886:	|           |  |  |  |  |  |   add.l d0,d0
   15888:	|           |  |  |  |  |  |   movea.l d1,a0
   1588a:	|           |  |  |  |  |  |   adda.l d0,a0
   1588c:	|           |  |  |  |  |  |   move.l (a0),d1
   1588e:	|           |  |  |  |  |  |   move.l 132(sp),d0
   15892:	|           |  |  |  |  |  |   add.l d0,d0
   15894:	|           |  |  |  |  |  |   add.l d0,d0
   15896:	|           |  |  |  |  |  |   movea.l d1,a0
   15898:	|           |  |  |  |  |  |   adda.l d0,a0
   1589a:	|           |  |  |  |  |  |   move.l 132(sp),(a0)
					distanceMatrix        [i][j] = 1;
   1589e:	|           |  |  |  |  |  |   move.l 136(sp),d0
   158a2:	|           |  |  |  |  |  |   add.l d0,d0
   158a4:	|           |  |  |  |  |  |   add.l d0,d0
   158a6:	|           |  |  |  |  |  |   movea.l 62(sp),a0
   158aa:	|           |  |  |  |  |  |   adda.l d0,a0
   158ac:	|           |  |  |  |  |  |   move.l (a0),d1
   158ae:	|           |  |  |  |  |  |   move.l 132(sp),d0
   158b2:	|           |  |  |  |  |  |   add.l d0,d0
   158b4:	|           |  |  |  |  |  |   add.l d0,d0
   158b6:	|           |  |  |  |  |  |   movea.l d1,a0
   158b8:	|           |  |  |  |  |  |   adda.l d0,a0
   158ba:	|           |  |  |  |  |  |   moveq #1,d1
   158bc:	|           |  |  |  |  |  |   move.l d1,(a0)
   158be:	|           |  |  |  |  +--|-- bra.s 15906 <setFloor+0x56c>
				}
			} else {
				currentFloor -> matrix[i][j] = -2;
   158c0:	|           |  |  |  |  |  \-> movea.l 1b30e <currentFloor>,a0
   158c6:	|           |  |  |  |  |      move.l 16(a0),d1
   158ca:	|           |  |  |  |  |      move.l 136(sp),d0
   158ce:	|           |  |  |  |  |      add.l d0,d0
   158d0:	|           |  |  |  |  |      add.l d0,d0
   158d2:	|           |  |  |  |  |      movea.l d1,a0
   158d4:	|           |  |  |  |  |      adda.l d0,a0
   158d6:	|           |  |  |  |  |      move.l (a0),d1
   158d8:	|           |  |  |  |  |      move.l 132(sp),d0
   158dc:	|           |  |  |  |  |      add.l d0,d0
   158de:	|           |  |  |  |  |      add.l d0,d0
   158e0:	|           |  |  |  |  |      movea.l d1,a0
   158e2:	|           |  |  |  |  |      adda.l d0,a0
   158e4:	|           |  |  |  |  |      moveq #-2,d0
   158e6:	|           |  |  |  |  |      move.l d0,(a0)
				distanceMatrix        [i][j] = 0;
   158e8:	|           |  |  |  |  |      move.l 136(sp),d0
   158ec:	|           |  |  |  |  |      add.l d0,d0
   158ee:	|           |  |  |  |  |      add.l d0,d0
   158f0:	|           |  |  |  |  |      movea.l 62(sp),a0
   158f4:	|           |  |  |  |  |      adda.l d0,a0
   158f6:	|           |  |  |  |  |      move.l (a0),d1
   158f8:	|           |  |  |  |  |      move.l 132(sp),d0
   158fc:	|           |  |  |  |  |      add.l d0,d0
   158fe:	|           |  |  |  |  |      add.l d0,d0
   15900:	|           |  |  |  |  |      movea.l d1,a0
   15902:	|           |  |  |  |  |      adda.l d0,a0
   15904:	|           |  |  |  |  |      clr.l (a0)
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   15906:	|           |  |  |  |  \----> addq.l #1,132(sp)
   1590a:	|           |  |  |  \-------> movea.l 1b30e <currentFloor>,a0
   15910:	|           |  |  |            move.l 8(a0),d0
   15914:	|           |  |  |            cmp.l 132(sp),d0
   15918:	|           |  |  \----------- bgt.w 15826 <setFloor+0x48c>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   1591c:	|           |  |               addq.l #1,136(sp)
   15920:	|           |  \-------------> movea.l 1b30e <currentFloor>,a0
   15926:	|           |                  move.l 8(a0),d0
   1592a:	|           |                  cmp.l 136(sp),d0
   1592e:	|           \----------------- bgt.w 1581e <setFloor+0x484>
			}
		}
	}

	BOOL madeChange;
	int lookForDistance = 0;
   15932:	|                              clr.l 126(sp)

	do {
		lookForDistance ++;
   15936:	|  /-------------------------> addq.l #1,126(sp)
//		debugMatrix ();
		madeChange = FALSE;
   1593a:	|  |                           clr.w 130(sp)
		for (i = 0; i < currentFloor -> numPolygons; i ++) {
   1593e:	|  |                           clr.l 136(sp)
   15942:	|  |     /-------------------- bra.w 15a98 <setFloor+0x6fe>
			for (j = 0; j < currentFloor -> numPolygons; j ++) {
   15946:	|  |  /--|-------------------> clr.l 132(sp)
   1594a:	|  |  |  |     /-------------- bra.w 15a82 <setFloor+0x6e8>
				if (currentFloor -> matrix[i][j] == -1) {
   1594e:	|  |  |  |  /--|-------------> movea.l 1b30e <currentFloor>,a0
   15954:	|  |  |  |  |  |               move.l 16(a0),d1
   15958:	|  |  |  |  |  |               move.l 136(sp),d0
   1595c:	|  |  |  |  |  |               add.l d0,d0
   1595e:	|  |  |  |  |  |               add.l d0,d0
   15960:	|  |  |  |  |  |               movea.l d1,a0
   15962:	|  |  |  |  |  |               adda.l d0,a0
   15964:	|  |  |  |  |  |               move.l (a0),d1
   15966:	|  |  |  |  |  |               move.l 132(sp),d0
   1596a:	|  |  |  |  |  |               add.l d0,d0
   1596c:	|  |  |  |  |  |               add.l d0,d0
   1596e:	|  |  |  |  |  |               movea.l d1,a0
   15970:	|  |  |  |  |  |               adda.l d0,a0
   15972:	|  |  |  |  |  |               move.l (a0),d0
   15974:	|  |  |  |  |  |               moveq #-1,d1
   15976:	|  |  |  |  |  |               cmp.l d0,d1
   15978:	|  |  |  |  |  |  /----------- bne.w 15a7e <setFloor+0x6e4>

					// OK, so we don't know how to get from i to j...
					for (int d = 0; d < currentFloor -> numPolygons; d ++) {
   1597c:	|  |  |  |  |  |  |            clr.l 122(sp)
   15980:	|  |  |  |  |  |  |     /----- bra.w 15a6c <setFloor+0x6d2>
						if (d != i && d != j) {
   15984:	|  |  |  |  |  |  |  /--|----> move.l 122(sp),d0
   15988:	|  |  |  |  |  |  |  |  |      cmp.l 136(sp),d0
   1598c:	|  |  |  |  |  |  |  |  |  /-- beq.w 15a68 <setFloor+0x6ce>
   15990:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d1
   15994:	|  |  |  |  |  |  |  |  |  |   cmp.l 132(sp),d1
   15998:	|  |  |  |  |  |  |  |  |  +-- beq.w 15a68 <setFloor+0x6ce>
							if (currentFloor -> matrix[i][d] == d &&
   1599c:	|  |  |  |  |  |  |  |  |  |   movea.l 1b30e <currentFloor>,a0
   159a2:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   159a6:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   159aa:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   159ac:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   159ae:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   159b0:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   159b2:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   159b4:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   159b8:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   159ba:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   159bc:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   159be:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   159c0:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
   159c2:	|  |  |  |  |  |  |  |  |  |   cmp.l 122(sp),d0
   159c6:	|  |  |  |  |  |  |  |  |  +-- bne.w 15a68 <setFloor+0x6ce>
								currentFloor -> matrix[d][j] >= 0 &&
   159ca:	|  |  |  |  |  |  |  |  |  |   movea.l 1b30e <currentFloor>,a0
   159d0:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   159d4:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   159d8:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   159da:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   159dc:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   159de:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   159e0:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   159e2:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   159e6:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   159e8:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   159ea:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   159ec:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   159ee:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
							if (currentFloor -> matrix[i][d] == d &&
   159f0:	|  |  |  |  |  |  |  |  |  +-- bmi.s 15a68 <setFloor+0x6ce>
								distanceMatrix        [d][j] <= lookForDistance) {
   159f2:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   159f6:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   159f8:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   159fa:	|  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a0
   159fe:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   15a00:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   15a02:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   15a06:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   15a08:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   15a0a:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   15a0c:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   15a0e:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
								currentFloor -> matrix[d][j] >= 0 &&
   15a10:	|  |  |  |  |  |  |  |  |  |   cmp.l 126(sp),d0
   15a14:	|  |  |  |  |  |  |  |  |  +-- bgt.s 15a68 <setFloor+0x6ce>

								 currentFloor -> matrix[i][j] = d;
   15a16:	|  |  |  |  |  |  |  |  |  |   movea.l 1b30e <currentFloor>,a0
   15a1c:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   15a20:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   15a24:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   15a26:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   15a28:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   15a2a:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   15a2c:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   15a2e:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   15a32:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   15a34:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   15a36:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   15a38:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   15a3a:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),(a0)
								 distanceMatrix		  [i][j] = lookForDistance + 1;
   15a3e:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   15a42:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   15a44:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   15a46:	|  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a0
   15a4a:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   15a4c:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   15a4e:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   15a52:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   15a54:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   15a56:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   15a58:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   15a5a:	|  |  |  |  |  |  |  |  |  |   move.l 126(sp),d0
   15a5e:	|  |  |  |  |  |  |  |  |  |   addq.l #1,d0
   15a60:	|  |  |  |  |  |  |  |  |  |   move.l d0,(a0)
								 madeChange = TRUE;
   15a62:	|  |  |  |  |  |  |  |  |  |   move.w #1,130(sp)
					for (int d = 0; d < currentFloor -> numPolygons; d ++) {
   15a68:	|  |  |  |  |  |  |  |  |  \-> addq.l #1,122(sp)
   15a6c:	|  |  |  |  |  |  |  |  \----> movea.l 1b30e <currentFloor>,a0
   15a72:	|  |  |  |  |  |  |  |         move.l 8(a0),d0
   15a76:	|  |  |  |  |  |  |  |         cmp.l 122(sp),d0
   15a7a:	|  |  |  |  |  |  |  \-------- bgt.w 15984 <setFloor+0x5ea>
			for (j = 0; j < currentFloor -> numPolygons; j ++) {
   15a7e:	|  |  |  |  |  |  \----------> addq.l #1,132(sp)
   15a82:	|  |  |  |  |  \-------------> movea.l 1b30e <currentFloor>,a0
   15a88:	|  |  |  |  |                  move.l 8(a0),d0
   15a8c:	|  |  |  |  |                  cmp.l 132(sp),d0
   15a90:	|  |  |  |  \----------------- bgt.w 1594e <setFloor+0x5b4>
		for (i = 0; i < currentFloor -> numPolygons; i ++) {
   15a94:	|  |  |  |                     addq.l #1,136(sp)
   15a98:	|  |  |  \-------------------> movea.l 1b30e <currentFloor>,a0
   15a9e:	|  |  |                        move.l 8(a0),d0
   15aa2:	|  |  |                        cmp.l 136(sp),d0
   15aa6:	|  |  \----------------------- bgt.w 15946 <setFloor+0x5ac>
						}
					}
				}
			}
		}
	} while (madeChange);
   15aaa:	|  |                           tst.w 130(sp)
   15aae:	|  \-------------------------- bne.w 15936 <setFloor+0x59c>

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   15ab2:	|                              clr.l 136(sp)
   15ab6:	|                          /-- bra.s 15ade <setFloor+0x744>
		FreeVec(distanceMatrix [i]);
   15ab8:	|                       /--|-> move.l 136(sp),d0
   15abc:	|                       |  |   add.l d0,d0
   15abe:	|                       |  |   add.l d0,d0
   15ac0:	|                       |  |   movea.l 62(sp),a0
   15ac4:	|                       |  |   adda.l d0,a0
   15ac6:	|                       |  |   move.l (a0),54(sp)
   15aca:	|                       |  |   move.l 1b1a2 <SysBase>,d0
   15ad0:	|                       |  |   movea.l d0,a6
   15ad2:	|                       |  |   movea.l 54(sp),a1
   15ad6:	|                       |  |   jsr -690(a6)
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   15ada:	|                       |  |   addq.l #1,136(sp)
   15ade:	|                       |  \-> movea.l 1b30e <currentFloor>,a0
   15ae4:	|                       |      move.l 8(a0),d0
   15ae8:	|                       |      cmp.l 136(sp),d0
   15aec:	|                       \----- bgt.s 15ab8 <setFloor+0x71e>
	}

	FreeVec(distanceMatrix);
   15aee:	|                              move.l 62(sp),58(sp)
   15af4:	|                              move.l 1b1a2 <SysBase>,d0
   15afa:	|                              movea.l d0,a6
   15afc:	|                              movea.l 58(sp),a1
   15b00:	|                              jsr -690(a6)
	distanceMatrix = NULL;	
   15b04:	|                              clr.l 62(sp)

	return TRUE;
   15b08:	|                              moveq #1,d0
}
   15b0a:	\----------------------------> movea.l (sp)+,a2
   15b0c:	                               movea.l (sp)+,a6
   15b0e:	                               lea 132(sp),sp
   15b12:	                               rts

00015b14 <setFloorNull>:

void setFloorNull () {
	killFloor ();
   15b14:	jsr 15002 <killFloor>
	noFloor ();
   15b1a:	jsr 14f26 <noFloor>
   15b20:	nop
   15b22:	rts

00015b24 <WaitVbl>:
void WaitVbl() {
   15b24:	       subq.l #8,sp
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
   15b26:	   /-> movea.l #14675972,a0
   15b2c:	   |   move.l (a0),d0
   15b2e:	   |   move.l d0,(sp)
		vpos&=0x1ff00;
   15b30:	   |   move.l (sp),d0
   15b32:	   |   andi.l #130816,d0
   15b38:	   |   move.l d0,(sp)
		if (vpos!=(300<<8))
   15b3a:	   |   move.l (sp),d0
   15b3c:	   |   cmpi.l #76800,d0
   15b42:	   \-- beq.s 15b26 <WaitVbl+0x2>
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
   15b44:	/----> movea.l #14675972,a0
   15b4a:	|      move.l (a0),d0
   15b4c:	|      move.l d0,4(sp)
		vpos&=0x1ff00;
   15b50:	|      move.l 4(sp),d0
   15b54:	|      andi.l #130816,d0
   15b5a:	|      move.l d0,4(sp)
		if (vpos==(300<<8))
   15b5e:	|      move.l 4(sp),d0
   15b62:	|      cmpi.l #76800,d0
   15b68:	|  /-- beq.s 15b6c <WaitVbl+0x48>
	while (1) {
   15b6a:	\--|-- bra.s 15b44 <WaitVbl+0x20>
			break;
   15b6c:	   \-> nop
}
   15b6e:	       nop
   15b70:	       addq.l #8,sp
   15b72:	       rts

00015b74 <memset>:
void* memset(void *dest, int val, unsigned long len) {
   15b74:	       subq.l #4,sp
	unsigned char *ptr = (unsigned char *)dest;
   15b76:	       move.l 8(sp),(sp)
	while(len-- > 0)
   15b7a:	   /-- bra.s 15b8c <memset+0x18>
		*ptr++ = val;
   15b7c:	/--|-> move.l (sp),d0
   15b7e:	|  |   move.l d0,d1
   15b80:	|  |   addq.l #1,d1
   15b82:	|  |   move.l d1,(sp)
   15b84:	|  |   move.l 12(sp),d1
   15b88:	|  |   movea.l d0,a0
   15b8a:	|  |   move.b d1,(a0)
	while(len-- > 0)
   15b8c:	|  \-> move.l 16(sp),d0
   15b90:	|      move.l d0,d1
   15b92:	|      subq.l #1,d1
   15b94:	|      move.l d1,16(sp)
   15b98:	|      tst.l d0
   15b9a:	\----- bne.s 15b7c <memset+0x8>
	return dest;
   15b9c:	       move.l 8(sp),d0
}
   15ba0:	       addq.l #4,sp
   15ba2:	       rts

00015ba4 <memcpy>:
void* memcpy(void *dest, const void *src, unsigned long len) {
   15ba4:	       subq.l #8,sp
   15ba6:	       move.l d2,-(sp)
	char *d = (char *)dest;
   15ba8:	       move.l 16(sp),8(sp)
	const char *s = (const char *)src;
   15bae:	       move.l 20(sp),4(sp)
	while(len--)
   15bb4:	   /-- bra.s 15bd6 <memcpy+0x32>
		*d++ = *s++;
   15bb6:	/--|-> move.l 4(sp),d1
   15bba:	|  |   move.l d1,d0
   15bbc:	|  |   addq.l #1,d0
   15bbe:	|  |   move.l d0,4(sp)
   15bc2:	|  |   move.l 8(sp),d0
   15bc6:	|  |   move.l d0,d2
   15bc8:	|  |   addq.l #1,d2
   15bca:	|  |   move.l d2,8(sp)
   15bce:	|  |   movea.l d1,a0
   15bd0:	|  |   move.b (a0),d1
   15bd2:	|  |   movea.l d0,a0
   15bd4:	|  |   move.b d1,(a0)
	while(len--)
   15bd6:	|  \-> move.l 24(sp),d0
   15bda:	|      move.l d0,d1
   15bdc:	|      subq.l #1,d1
   15bde:	|      move.l d1,24(sp)
   15be2:	|      tst.l d0
   15be4:	\----- bne.s 15bb6 <memcpy+0x12>
	return dest;
   15be6:	       move.l 16(sp),d0
}
   15bea:	       move.l (sp)+,d2
   15bec:	       addq.l #8,sp
   15bee:	       rts

00015bf0 <KPrintF>:
void KPrintF(const char* fmt, ...) {
   15bf0:	       lea -128(sp),sp
   15bf4:	       movem.l a2-a3/a6,-(sp)
	if(*((UWORD *)UaeDbgLog) == 0x4eb9 || *((UWORD *)UaeDbgLog) == 0xa00e) {
   15bf8:	       move.w f0ff60 <gcc8_c_support.c.cce2f5c3+0xec661d>,d0
   15bfe:	       cmpi.w #20153,d0
   15c02:	   /-- beq.s 15c26 <KPrintF+0x36>
   15c04:	   |   cmpi.w #-24562,d0
   15c08:	   +-- beq.s 15c26 <KPrintF+0x36>
		RawDoFmt((CONST_STRPTR)fmt, vl, KPutCharX, 0);
   15c0a:	   |   movea.l 1b1a2 <SysBase>,a6
   15c10:	   |   movea.l 144(sp),a0
   15c14:	   |   lea 148(sp),a1
   15c18:	   |   lea 16532 <KPutCharX>,a2
   15c1e:	   |   suba.l a3,a3
   15c20:	   |   jsr -522(a6)
}
   15c24:	/--|-- bra.s 15c50 <KPrintF+0x60>
		RawDoFmt((CONST_STRPTR)fmt, vl, PutChar, temp);
   15c26:	|  \-> movea.l 1b1a2 <SysBase>,a6
   15c2c:	|      movea.l 144(sp),a0
   15c30:	|      lea 148(sp),a1
   15c34:	|      lea 16540 <PutChar>,a2
   15c3a:	|      lea 12(sp),a3
   15c3e:	|      jsr -522(a6)
		UaeDbgLog(86, temp);
   15c42:	|      move.l a3,-(sp)
   15c44:	|      pea 56 <_start+0x56>
   15c48:	|      jsr f0ff60 <gcc8_c_support.c.cce2f5c3+0xec661d>
	if(*((UWORD *)UaeDbgLog) == 0x4eb9 || *((UWORD *)UaeDbgLog) == 0xa00e) {
   15c4e:	|      addq.l #8,sp
}
   15c50:	\----> movem.l (sp)+,a2-a3/a6
   15c54:	       lea 128(sp),sp
   15c58:	       rts

00015c5a <__addsf3>:
	};
	my_strncpy(resource.name, name, sizeof(resource.name));
	debug_cmd(barto_cmd_save, (unsigned int)&resource, 0, 0);
}

FLOAT __addsf3( FLOAT a, FLOAT b) {
   15c5a:	lea -12(sp),sp
   15c5e:	move.l a6,-(sp)
	return IEEESPAdd( a, b);
   15c60:	move.l 20(sp),12(sp)
   15c66:	move.l 24(sp),8(sp)
   15c6c:	move.l 1b1b2 <MathIeeeSingBasBase>,d0
   15c72:	movea.l d0,a6
   15c74:	move.l 12(sp),d0
   15c78:	move.l 8(sp),d1
   15c7c:	jsr -66(a6)
   15c80:	move.l d0,4(sp)
   15c84:	move.l 4(sp),d0
}
   15c88:	movea.l (sp)+,a6
   15c8a:	lea 12(sp),sp
   15c8e:	rts

00015c90 <__adddf3>:

DOUBLE __adddf3( DOUBLE a, DOUBLE b) {
   15c90:	lea -32(sp),sp
   15c94:	movem.l d2-d3/a6,-(sp)
	return IEEEDPAdd( a, b);
   15c98:	move.l 48(sp),36(sp)
   15c9e:	move.l 52(sp),40(sp)
   15ca4:	move.l 56(sp),28(sp)
   15caa:	move.l 60(sp),32(sp)
   15cb0:	move.l 1b1ba <MathIeeeDoubBasBase>,d0
   15cb6:	movea.l d0,a6
   15cb8:	move.l 36(sp),d0
   15cbc:	move.l 40(sp),d1
   15cc0:	move.l 28(sp),d2
   15cc4:	move.l 32(sp),d3
   15cc8:	jsr -66(a6)
   15ccc:	move.l d0,12(sp)
   15cd0:	move.l d1,16(sp)
   15cd4:	move.l 12(sp),20(sp)
   15cda:	move.l 16(sp),24(sp)
   15ce0:	move.l 20(sp),d0
   15ce4:	move.l 24(sp),d1
}
   15ce8:	movem.l (sp)+,d2-d3/a6
   15cec:	lea 32(sp),sp
   15cf0:	rts

00015cf2 <__divdf3>:

DOUBLE __divdf3( DOUBLE a, DOUBLE b) {
   15cf2:	lea -32(sp),sp
   15cf6:	movem.l d2-d3/a6,-(sp)
	return IEEEDPDiv( a, b);
   15cfa:	move.l 48(sp),36(sp)
   15d00:	move.l 52(sp),40(sp)
   15d06:	move.l 56(sp),28(sp)
   15d0c:	move.l 60(sp),32(sp)
   15d12:	move.l 1b1ba <MathIeeeDoubBasBase>,d0
   15d18:	movea.l d0,a6
   15d1a:	move.l 36(sp),d0
   15d1e:	move.l 40(sp),d1
   15d22:	move.l 28(sp),d2
   15d26:	move.l 32(sp),d3
   15d2a:	jsr -84(a6)
   15d2e:	move.l d0,12(sp)
   15d32:	move.l d1,16(sp)
   15d36:	move.l 12(sp),20(sp)
   15d3c:	move.l 16(sp),24(sp)
   15d42:	move.l 20(sp),d0
   15d46:	move.l 24(sp),d1
}
   15d4a:	movem.l (sp)+,d2-d3/a6
   15d4e:	lea 32(sp),sp
   15d52:	rts

00015d54 <__divsf3>:

FLOAT __divsf3( FLOAT a, FLOAT b) {
   15d54:	lea -12(sp),sp
   15d58:	move.l a6,-(sp)
	return IEEESPDiv( a, b);
   15d5a:	move.l 20(sp),12(sp)
   15d60:	move.l 24(sp),8(sp)
   15d66:	move.l 1b1b2 <MathIeeeSingBasBase>,d0
   15d6c:	movea.l d0,a6
   15d6e:	move.l 12(sp),d0
   15d72:	move.l 8(sp),d1
   15d76:	jsr -84(a6)
   15d7a:	move.l d0,4(sp)
   15d7e:	move.l 4(sp),d0
}
   15d82:	movea.l (sp)+,a6
   15d84:	lea 12(sp),sp
   15d88:	rts

00015d8a <__eqsf2>:

int __eqsf2( FLOAT a, FLOAT b) {
   15d8a:	lea -12(sp),sp
   15d8e:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   15d90:	move.l 20(sp),12(sp)
   15d96:	move.l 24(sp),8(sp)
   15d9c:	move.l 1b1b2 <MathIeeeSingBasBase>,d0
   15da2:	movea.l d0,a6
   15da4:	move.l 12(sp),d0
   15da8:	move.l 8(sp),d1
   15dac:	jsr -42(a6)
   15db0:	move.l d0,4(sp)
   15db4:	move.l 4(sp),d0
}
   15db8:	movea.l (sp)+,a6
   15dba:	lea 12(sp),sp
   15dbe:	rts

00015dc0 <__extendsfdf2>:

DOUBLE __extendsfdf2 (FLOAT a) {
   15dc0:	lea -20(sp),sp
   15dc4:	move.l a6,-(sp)
	return IEEEDPFieee( a );
   15dc6:	move.l 28(sp),20(sp)
   15dcc:	move.l 1b1be <MathIeeeDoubTransBase>,d0
   15dd2:	movea.l d0,a6
   15dd4:	move.l 20(sp),d0
   15dd8:	jsr -108(a6)
   15ddc:	move.l d0,4(sp)
   15de0:	move.l d1,8(sp)
   15de4:	move.l 4(sp),12(sp)
   15dea:	move.l 8(sp),16(sp)
   15df0:	move.l 12(sp),d0
   15df4:	move.l 16(sp),d1
}
   15df8:	movea.l (sp)+,a6
   15dfa:	lea 20(sp),sp
   15dfe:	rts

00015e00 <__fixdfsi>:

DOUBLE __fixdfsi(DOUBLE value) {
   15e00:	lea -12(sp),sp
   15e04:	move.l a6,-(sp)
	return IEEEDPFix(value);
   15e06:	move.l 20(sp),8(sp)
   15e0c:	move.l 24(sp),12(sp)
   15e12:	move.l 1b1ba <MathIeeeDoubBasBase>,d0
   15e18:	movea.l d0,a6
   15e1a:	move.l 8(sp),d0
   15e1e:	move.l 12(sp),d1
   15e22:	jsr -30(a6)
   15e26:	move.l d0,4(sp)
   15e2a:	move.l 4(sp),d0
   15e2e:	move.l d0,-(sp)
   15e30:	jsr 15e68 <__floatsidf>
   15e36:	addq.l #4,sp
}
   15e38:	movea.l (sp)+,a6
   15e3a:	lea 12(sp),sp
   15e3e:	rts

00015e40 <__fixsfsi>:

LONG __fixsfsi(FLOAT value) {
   15e40:	subq.l #8,sp
   15e42:	move.l a6,-(sp)
	return IEEESPFix(value);
   15e44:	move.l 16(sp),8(sp)
   15e4a:	move.l 1b1b2 <MathIeeeSingBasBase>,d0
   15e50:	movea.l d0,a6
   15e52:	move.l 8(sp),d0
   15e56:	jsr -30(a6)
   15e5a:	move.l d0,4(sp)
   15e5e:	move.l 4(sp),d0
}
   15e62:	movea.l (sp)+,a6
   15e64:	addq.l #8,sp
   15e66:	rts

00015e68 <__floatsidf>:


DOUBLE __floatsidf (int i) {
   15e68:	lea -20(sp),sp
   15e6c:	move.l a6,-(sp)
	return IEEEDPFlt((LONG) i);  
   15e6e:	move.l 28(sp),20(sp)
   15e74:	move.l 1b1ba <MathIeeeDoubBasBase>,d0
   15e7a:	movea.l d0,a6
   15e7c:	move.l 20(sp),d0
   15e80:	jsr -36(a6)
   15e84:	move.l d0,4(sp)
   15e88:	move.l d1,8(sp)
   15e8c:	move.l 4(sp),12(sp)
   15e92:	move.l 8(sp),16(sp)
   15e98:	move.l 12(sp),d0
   15e9c:	move.l 16(sp),d1
}
   15ea0:	movea.l (sp)+,a6
   15ea2:	lea 20(sp),sp
   15ea6:	rts

00015ea8 <__floatsisf>:

FLOAT __floatsisf(int i) {
   15ea8:	subq.l #8,sp
   15eaa:	move.l a6,-(sp)
	return IEEESPFlt((LONG) i); 
   15eac:	move.l 16(sp),8(sp)
   15eb2:	move.l 1b1b2 <MathIeeeSingBasBase>,d0
   15eb8:	movea.l d0,a6
   15eba:	move.l 8(sp),d0
   15ebe:	jsr -36(a6)
   15ec2:	move.l d0,4(sp)
   15ec6:	move.l 4(sp),d0
}
   15eca:	movea.l (sp)+,a6
   15ecc:	addq.l #8,sp
   15ece:	rts

00015ed0 <__floatunsisf>:

FLOAT __floatunsisf(unsigned int i) {	
   15ed0:	subq.l #8,sp
   15ed2:	move.l a6,-(sp)
	return IEEESPFlt((LONG) i); 
   15ed4:	move.l 16(sp),8(sp)
   15eda:	move.l 1b1b2 <MathIeeeSingBasBase>,d0
   15ee0:	movea.l d0,a6
   15ee2:	move.l 8(sp),d0
   15ee6:	jsr -36(a6)
   15eea:	move.l d0,4(sp)
   15eee:	move.l 4(sp),d0
}
   15ef2:	movea.l (sp)+,a6
   15ef4:	addq.l #8,sp
   15ef6:	rts

00015ef8 <__muldf3>:

DOUBLE __muldf3( DOUBLE leftParm, DOUBLE rightParm ) {
   15ef8:	lea -32(sp),sp
   15efc:	movem.l d2-d3/a6,-(sp)
	return IEEEDPMul( leftParm, rightParm);
   15f00:	move.l 48(sp),36(sp)
   15f06:	move.l 52(sp),40(sp)
   15f0c:	move.l 56(sp),28(sp)
   15f12:	move.l 60(sp),32(sp)
   15f18:	move.l 1b1ba <MathIeeeDoubBasBase>,d0
   15f1e:	movea.l d0,a6
   15f20:	move.l 36(sp),d0
   15f24:	move.l 40(sp),d1
   15f28:	move.l 28(sp),d2
   15f2c:	move.l 32(sp),d3
   15f30:	jsr -78(a6)
   15f34:	move.l d0,12(sp)
   15f38:	move.l d1,16(sp)
   15f3c:	move.l 12(sp),20(sp)
   15f42:	move.l 16(sp),24(sp)
   15f48:	move.l 20(sp),d0
   15f4c:	move.l 24(sp),d1
}
   15f50:	movem.l (sp)+,d2-d3/a6
   15f54:	lea 32(sp),sp
   15f58:	rts

00015f5a <__mulsf3>:

 //FLOAT IEEESPMul( FLOAT leftParm, FLOAT rightParm );
FLOAT __mulsf3( FLOAT leftParm, FLOAT rightParm ) {
   15f5a:	lea -12(sp),sp
   15f5e:	move.l a6,-(sp)
	return IEEESPMul( leftParm, rightParm);
   15f60:	move.l 20(sp),12(sp)
   15f66:	move.l 24(sp),8(sp)
   15f6c:	move.l 1b1b2 <MathIeeeSingBasBase>,d0
   15f72:	movea.l d0,a6
   15f74:	move.l 12(sp),d0
   15f78:	move.l 8(sp),d1
   15f7c:	jsr -78(a6)
   15f80:	move.l d0,4(sp)
   15f84:	move.l 4(sp),d0
}
   15f88:	movea.l (sp)+,a6
   15f8a:	lea 12(sp),sp
   15f8e:	rts

00015f90 <__gesf2>:


int __gesf2( FLOAT a, FLOAT b) {
   15f90:	lea -12(sp),sp
   15f94:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   15f96:	move.l 20(sp),12(sp)
   15f9c:	move.l 24(sp),8(sp)
   15fa2:	move.l 1b1b2 <MathIeeeSingBasBase>,d0
   15fa8:	movea.l d0,a6
   15faa:	move.l 12(sp),d0
   15fae:	move.l 8(sp),d1
   15fb2:	jsr -42(a6)
   15fb6:	move.l d0,4(sp)
   15fba:	move.l 4(sp),d0
}
   15fbe:	movea.l (sp)+,a6
   15fc0:	lea 12(sp),sp
   15fc4:	rts

00015fc6 <__gtdf2>:

int __gtdf2( DOUBLE a, DOUBLE b) {
   15fc6:	lea -20(sp),sp
   15fca:	movem.l d2-d3/a6,-(sp)
	return IEEEDPCmp( a, b);
   15fce:	move.l 36(sp),24(sp)
   15fd4:	move.l 40(sp),28(sp)
   15fda:	move.l 44(sp),16(sp)
   15fe0:	move.l 48(sp),20(sp)
   15fe6:	move.l 1b1ba <MathIeeeDoubBasBase>,d0
   15fec:	movea.l d0,a6
   15fee:	move.l 24(sp),d0
   15ff2:	move.l 28(sp),d1
   15ff6:	move.l 16(sp),d2
   15ffa:	move.l 20(sp),d3
   15ffe:	jsr -42(a6)
   16002:	move.l d0,12(sp)
   16006:	move.l 12(sp),d0
}
   1600a:	movem.l (sp)+,d2-d3/a6
   1600e:	lea 20(sp),sp
   16012:	rts

00016014 <__gtsf2>:

int __gtsf2( FLOAT a, FLOAT b) {
   16014:	lea -12(sp),sp
   16018:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   1601a:	move.l 20(sp),12(sp)
   16020:	move.l 24(sp),8(sp)
   16026:	move.l 1b1b2 <MathIeeeSingBasBase>,d0
   1602c:	movea.l d0,a6
   1602e:	move.l 12(sp),d0
   16032:	move.l 8(sp),d1
   16036:	jsr -42(a6)
   1603a:	move.l d0,4(sp)
   1603e:	move.l 4(sp),d0
}
   16042:	movea.l (sp)+,a6
   16044:	lea 12(sp),sp
   16048:	rts

0001604a <__lesf2>:

int __lesf2( FLOAT a, FLOAT b) {
   1604a:	lea -12(sp),sp
   1604e:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   16050:	move.l 20(sp),12(sp)
   16056:	move.l 24(sp),8(sp)
   1605c:	move.l 1b1b2 <MathIeeeSingBasBase>,d0
   16062:	movea.l d0,a6
   16064:	move.l 12(sp),d0
   16068:	move.l 8(sp),d1
   1606c:	jsr -42(a6)
   16070:	move.l d0,4(sp)
   16074:	move.l 4(sp),d0
}
   16078:	movea.l (sp)+,a6
   1607a:	lea 12(sp),sp
   1607e:	rts

00016080 <__ltdf2>:

int __ltdf2( DOUBLE a, DOUBLE b) {
   16080:	lea -20(sp),sp
   16084:	movem.l d2-d3/a6,-(sp)
	return IEEEDPCmp( a, b);
   16088:	move.l 36(sp),24(sp)
   1608e:	move.l 40(sp),28(sp)
   16094:	move.l 44(sp),16(sp)
   1609a:	move.l 48(sp),20(sp)
   160a0:	move.l 1b1ba <MathIeeeDoubBasBase>,d0
   160a6:	movea.l d0,a6
   160a8:	move.l 24(sp),d0
   160ac:	move.l 28(sp),d1
   160b0:	move.l 16(sp),d2
   160b4:	move.l 20(sp),d3
   160b8:	jsr -42(a6)
   160bc:	move.l d0,12(sp)
   160c0:	move.l 12(sp),d0
}
   160c4:	movem.l (sp)+,d2-d3/a6
   160c8:	lea 20(sp),sp
   160cc:	rts

000160ce <__ltsf2>:

int __ltsf2( FLOAT a, FLOAT b) {
   160ce:	lea -12(sp),sp
   160d2:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   160d4:	move.l 20(sp),12(sp)
   160da:	move.l 24(sp),8(sp)
   160e0:	move.l 1b1b2 <MathIeeeSingBasBase>,d0
   160e6:	movea.l d0,a6
   160e8:	move.l 12(sp),d0
   160ec:	move.l 8(sp),d1
   160f0:	jsr -42(a6)
   160f4:	move.l d0,4(sp)
   160f8:	move.l 4(sp),d0
}
   160fc:	movea.l (sp)+,a6
   160fe:	lea 12(sp),sp
   16102:	rts

00016104 <__nesf2>:

int __nesf2( FLOAT a, FLOAT b) {
   16104:	lea -12(sp),sp
   16108:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   1610a:	move.l 20(sp),12(sp)
   16110:	move.l 24(sp),8(sp)
   16116:	move.l 1b1b2 <MathIeeeSingBasBase>,d0
   1611c:	movea.l d0,a6
   1611e:	move.l 12(sp),d0
   16122:	move.l 8(sp),d1
   16126:	jsr -42(a6)
   1612a:	move.l d0,4(sp)
   1612e:	move.l 4(sp),d0
}
   16132:	movea.l (sp)+,a6
   16134:	lea 12(sp),sp
   16138:	rts

0001613a <__subdf3>:

DOUBLE __subdf3 (DOUBLE a, DOUBLE b) {
   1613a:	lea -32(sp),sp
   1613e:	movem.l d2-d3/a6,-(sp)
	return IEEEDPSub( a, b);
   16142:	move.l 48(sp),36(sp)
   16148:	move.l 52(sp),40(sp)
   1614e:	move.l 56(sp),28(sp)
   16154:	move.l 60(sp),32(sp)
   1615a:	move.l 1b1ba <MathIeeeDoubBasBase>,d0
   16160:	movea.l d0,a6
   16162:	move.l 36(sp),d0
   16166:	move.l 40(sp),d1
   1616a:	move.l 28(sp),d2
   1616e:	move.l 32(sp),d3
   16172:	jsr -72(a6)
   16176:	move.l d0,12(sp)
   1617a:	move.l d1,16(sp)
   1617e:	move.l 12(sp),20(sp)
   16184:	move.l 16(sp),24(sp)
   1618a:	move.l 20(sp),d0
   1618e:	move.l 24(sp),d1
}
   16192:	movem.l (sp)+,d2-d3/a6
   16196:	lea 32(sp),sp
   1619a:	rts

0001619c <__subsf3>:

FLOAT __subsf3 (float a, float b) {
   1619c:	lea -12(sp),sp
   161a0:	move.l a6,-(sp)
	return IEEESPSub( a, b);
   161a2:	move.l 20(sp),12(sp)
   161a8:	move.l 24(sp),8(sp)
   161ae:	move.l 1b1b2 <MathIeeeSingBasBase>,d0
   161b4:	movea.l d0,a6
   161b6:	move.l 12(sp),d0
   161ba:	move.l 8(sp),d1
   161be:	jsr -72(a6)
   161c2:	move.l d0,4(sp)
   161c6:	move.l 4(sp),d0
}
   161ca:	movea.l (sp)+,a6
   161cc:	lea 12(sp),sp
   161d0:	rts

000161d2 <__truncdfsf2>:

FLOAT __truncdfsf2(DOUBLE a) {
   161d2:	lea -12(sp),sp
   161d6:	move.l a6,-(sp)
	return IEEEDPTieee( a);
   161d8:	move.l 20(sp),8(sp)
   161de:	move.l 24(sp),12(sp)
   161e4:	move.l 1b1be <MathIeeeDoubTransBase>,d0
   161ea:	movea.l d0,a6
   161ec:	move.l 8(sp),d0
   161f0:	move.l 12(sp),d1
   161f4:	jsr -102(a6)
   161f8:	move.l d0,4(sp)
   161fc:	move.l 4(sp),d0
}
   16200:	movea.l (sp)+,a6
   16202:	lea 12(sp),sp
   16206:	rts

00016208 <__fixunssfsi>:

unsigned int __fixunssfsi (float a) {
   16208:	subq.l #8,sp
   1620a:	move.l a6,-(sp)
	return IEEESPFix(a);
   1620c:	move.l 16(sp),8(sp)
   16212:	move.l 1b1b2 <MathIeeeSingBasBase>,d0
   16218:	movea.l d0,a6
   1621a:	move.l 8(sp),d0
   1621e:	jsr -30(a6)
   16222:	move.l d0,4(sp)
   16226:	move.l 4(sp),d0
}
   1622a:	movea.l (sp)+,a6
   1622c:	addq.l #8,sp
   1622e:	rts

00016230 <atan2f>:

FLOAT atan2f(FLOAT y, FLOAT x) {
   16230:	       lea -24(sp),sp
   16234:	       move.l a6,-(sp)
    if (x > 0) {
   16236:	       clr.l -(sp)
   16238:	       move.l 40(sp),-(sp)
   1623c:	       jsr 16014 <__gtsf2>
   16242:	       addq.l #8,sp
   16244:	       tst.l d0
   16246:	   /-- ble.s 16278 <atan2f+0x48>
        return IEEESPAtan(y / x);
   16248:	   |   move.l 36(sp),-(sp)
   1624c:	   |   move.l 36(sp),-(sp)
   16250:	   |   jsr 15d54 <__divsf3>
   16256:	   |   addq.l #8,sp
   16258:	   |   move.l d0,8(sp)
   1625c:	   |   move.l 1b1b6 <MathIeeeSingTransBase>,d0
   16262:	   |   movea.l d0,a6
   16264:	   |   move.l 8(sp),d0
   16268:	   |   jsr -30(a6)
   1626c:	   |   move.l d0,4(sp)
   16270:	   |   move.l 4(sp),d0
   16274:	/--|-- bra.w 163d8 <atan2f+0x1a8>
    } else if (x < 0 && y >= 0) {
   16278:	|  \-> clr.l -(sp)
   1627a:	|      move.l 40(sp),-(sp)
   1627e:	|      jsr 160ce <__ltsf2>
   16284:	|      addq.l #8,sp
   16286:	|      tst.l d0
   16288:	|  /-- bge.s 162fc <atan2f+0xcc>
   1628a:	|  |   clr.l -(sp)
   1628c:	|  |   move.l 36(sp),-(sp)
   16290:	|  |   jsr 15f90 <__gesf2>
   16296:	|  |   addq.l #8,sp
   16298:	|  |   tst.l d0
   1629a:	|  +-- blt.s 162fc <atan2f+0xcc>
        return IEEESPAtan(y / x) + PI;
   1629c:	|  |   move.l 36(sp),-(sp)
   162a0:	|  |   move.l 36(sp),-(sp)
   162a4:	|  |   jsr 15d54 <__divsf3>
   162aa:	|  |   addq.l #8,sp
   162ac:	|  |   move.l d0,24(sp)
   162b0:	|  |   move.l 1b1b6 <MathIeeeSingTransBase>,d0
   162b6:	|  |   movea.l d0,a6
   162b8:	|  |   move.l 24(sp),d0
   162bc:	|  |   jsr -30(a6)
   162c0:	|  |   move.l d0,20(sp)
   162c4:	|  |   move.l 20(sp),d0
   162c8:	|  |   move.l d0,-(sp)
   162ca:	|  |   jsr 15dc0 <__extendsfdf2>
   162d0:	|  |   addq.l #4,sp
   162d2:	|  |   move.l #1413754136,-(sp)
   162d8:	|  |   move.l #1074340347,-(sp)
   162de:	|  |   move.l d1,-(sp)
   162e0:	|  |   move.l d0,-(sp)
   162e2:	|  |   jsr 15c90 <__adddf3>
   162e8:	|  |   lea 16(sp),sp
   162ec:	|  |   move.l d1,-(sp)
   162ee:	|  |   move.l d0,-(sp)
   162f0:	|  |   jsr 161d2 <__truncdfsf2>
   162f6:	|  |   addq.l #8,sp
   162f8:	+--|-- bra.w 163d8 <atan2f+0x1a8>
    } else if (x < 0 && y < 0) {
   162fc:	|  \-> clr.l -(sp)
   162fe:	|      move.l 40(sp),-(sp)
   16302:	|      jsr 160ce <__ltsf2>
   16308:	|      addq.l #8,sp
   1630a:	|      tst.l d0
   1630c:	|  /-- bge.s 1637e <atan2f+0x14e>
   1630e:	|  |   clr.l -(sp)
   16310:	|  |   move.l 36(sp),-(sp)
   16314:	|  |   jsr 160ce <__ltsf2>
   1631a:	|  |   addq.l #8,sp
   1631c:	|  |   tst.l d0
   1631e:	|  +-- bge.s 1637e <atan2f+0x14e>
        return IEEESPAtan(y / x) - PI;
   16320:	|  |   move.l 36(sp),-(sp)
   16324:	|  |   move.l 36(sp),-(sp)
   16328:	|  |   jsr 15d54 <__divsf3>
   1632e:	|  |   addq.l #8,sp
   16330:	|  |   move.l d0,16(sp)
   16334:	|  |   move.l 1b1b6 <MathIeeeSingTransBase>,d0
   1633a:	|  |   movea.l d0,a6
   1633c:	|  |   move.l 16(sp),d0
   16340:	|  |   jsr -30(a6)
   16344:	|  |   move.l d0,12(sp)
   16348:	|  |   move.l 12(sp),d0
   1634c:	|  |   move.l d0,-(sp)
   1634e:	|  |   jsr 15dc0 <__extendsfdf2>
   16354:	|  |   addq.l #4,sp
   16356:	|  |   move.l #1413754136,-(sp)
   1635c:	|  |   move.l #1074340347,-(sp)
   16362:	|  |   move.l d1,-(sp)
   16364:	|  |   move.l d0,-(sp)
   16366:	|  |   jsr 1613a <__subdf3>
   1636c:	|  |   lea 16(sp),sp
   16370:	|  |   move.l d1,-(sp)
   16372:	|  |   move.l d0,-(sp)
   16374:	|  |   jsr 161d2 <__truncdfsf2>
   1637a:	|  |   addq.l #8,sp
   1637c:	+--|-- bra.s 163d8 <atan2f+0x1a8>
    } else if (x == 0 && y > 0) {
   1637e:	|  \-> clr.l -(sp)
   16380:	|      move.l 40(sp),-(sp)
   16384:	|      jsr 15d8a <__eqsf2>
   1638a:	|      addq.l #8,sp
   1638c:	|      tst.l d0
   1638e:	|  /-- bne.s 163aa <atan2f+0x17a>
   16390:	|  |   clr.l -(sp)
   16392:	|  |   move.l 36(sp),-(sp)
   16396:	|  |   jsr 16014 <__gtsf2>
   1639c:	|  |   addq.l #8,sp
   1639e:	|  |   tst.l d0
   163a0:	|  +-- ble.s 163aa <atan2f+0x17a>
        return PI / 2;
   163a2:	|  |   move.l #1070141403,d0
   163a8:	+--|-- bra.s 163d8 <atan2f+0x1a8>
    } else if (x == 0 && y < 0) {
   163aa:	|  \-> clr.l -(sp)
   163ac:	|      move.l 40(sp),-(sp)
   163b0:	|      jsr 15d8a <__eqsf2>
   163b6:	|      addq.l #8,sp
   163b8:	|      tst.l d0
   163ba:	|  /-- bne.s 163d6 <atan2f+0x1a6>
   163bc:	|  |   clr.l -(sp)
   163be:	|  |   move.l 36(sp),-(sp)
   163c2:	|  |   jsr 160ce <__ltsf2>
   163c8:	|  |   addq.l #8,sp
   163ca:	|  |   tst.l d0
   163cc:	|  +-- bge.s 163d6 <atan2f+0x1a6>
        return -PI / 2;
   163ce:	|  |   move.l #-1077342245,d0
   163d4:	+--|-- bra.s 163d8 <atan2f+0x1a8>
    } else {
        // This case is x == 0 and y == 0, atan2(0, 0) is undefined, but often treated as 0.
        return 0;
   163d6:	|  \-> moveq #0,d0
    }
}
   163d8:	\----> movea.l (sp)+,a6
   163da:	       lea 24(sp),sp
   163de:	       rts

000163e0 <sqrt>:

DOUBLE sqrt( DOUBLE input) {
   163e0:	lea -24(sp),sp
   163e4:	move.l a6,-(sp)
	return IEEEDPSqrt(input);
   163e6:	move.l 32(sp),20(sp)
   163ec:	move.l 36(sp),24(sp)
   163f2:	move.l 1b1be <MathIeeeDoubTransBase>,d0
   163f8:	movea.l d0,a6
   163fa:	move.l 20(sp),d0
   163fe:	move.l 24(sp),d1
   16402:	jsr -96(a6)
   16406:	move.l d0,4(sp)
   1640a:	move.l d1,8(sp)
   1640e:	move.l 4(sp),12(sp)
   16414:	move.l 8(sp),16(sp)
   1641a:	move.l 12(sp),d0
   1641e:	move.l 16(sp),d1
}
   16422:	movea.l (sp)+,a6
   16424:	lea 24(sp),sp
   16428:	rts

0001642a <__mulsi3>:
	.section .text.__mulsi3,"ax",@progbits
	.type __mulsi3, function
	.globl	__mulsi3
__mulsi3:
	.cfi_startproc
	movew	sp@(4), d0	/* x0 -> d0 */
   1642a:	move.w 4(sp),d0
	muluw	sp@(10), d0	/* x0*y1 */
   1642e:	mulu.w 10(sp),d0
	movew	sp@(6), d1	/* x1 -> d1 */
   16432:	move.w 6(sp),d1
	muluw	sp@(8), d1	/* x1*y0 */
   16436:	mulu.w 8(sp),d1
	addw	d1, d0
   1643a:	add.w d1,d0
	swap	d0
   1643c:	swap d0
	clrw	d0
   1643e:	clr.w d0
	movew	sp@(6), d1	/* x1 -> d1 */
   16440:	move.w 6(sp),d1
	muluw	sp@(10), d1	/* x1*y1 */
   16444:	mulu.w 10(sp),d1
	addl	d1, d0
   16448:	add.l d1,d0
	rts
   1644a:	rts

0001644c <__udivsi3>:
	.section .text.__udivsi3,"ax",@progbits
	.type __udivsi3, function
	.globl	__udivsi3
__udivsi3:
	.cfi_startproc
	movel	d2, sp@-
   1644c:	       move.l d2,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	sp@(12), d1	/* d1 = divisor */
   1644e:	       move.l 12(sp),d1
	movel	sp@(8), d0	/* d0 = dividend */
   16452:	       move.l 8(sp),d0

	cmpl	#0x10000, d1 /* divisor >= 2 ^ 16 ?   */
   16456:	       cmpi.l #65536,d1
	jcc	3f		/* then try next algorithm */
   1645c:	   /-- bcc.s 16474 <__udivsi3+0x28>
	movel	d0, d2
   1645e:	   |   move.l d0,d2
	clrw	d2
   16460:	   |   clr.w d2
	swap	d2
   16462:	   |   swap d2
	divu	d1, d2          /* high quotient in lower word */
   16464:	   |   divu.w d1,d2
	movew	d2, d0		/* save high quotient */
   16466:	   |   move.w d2,d0
	swap	d0
   16468:	   |   swap d0
	movew	sp@(10), d2	/* get low dividend + high rest */
   1646a:	   |   move.w 10(sp),d2
	divu	d1, d2		/* low quotient */
   1646e:	   |   divu.w d1,d2
	movew	d2, d0
   16470:	   |   move.w d2,d0
	jra	6f
   16472:	/--|-- bra.s 164a4 <__udivsi3+0x58>

3:	movel	d1, d2		/* use d2 as divisor backup */
   16474:	|  \-> move.l d1,d2
4:	lsrl	#1, d1	/* shift divisor */
   16476:	|  /-> lsr.l #1,d1
	lsrl	#1, d0	/* shift dividend */
   16478:	|  |   lsr.l #1,d0
	cmpl	#0x10000, d1 /* still divisor >= 2 ^ 16 ?  */
   1647a:	|  |   cmpi.l #65536,d1
	jcc	4b
   16480:	|  \-- bcc.s 16476 <__udivsi3+0x2a>
	divu	d1, d0		/* now we have 16-bit divisor */
   16482:	|      divu.w d1,d0
	andl	#0xffff, d0 /* mask out divisor, ignore remainder */
   16484:	|      andi.l #65535,d0

/* Multiply the 16-bit tentative quotient with the 32-bit divisor.  Because of
   the operand ranges, this might give a 33-bit product.  If this product is
   greater than the dividend, the tentative quotient was too large. */
	movel	d2, d1
   1648a:	|      move.l d2,d1
	mulu	d0, d1		/* low part, 32 bits */
   1648c:	|      mulu.w d0,d1
	swap	d2
   1648e:	|      swap d2
	mulu	d0, d2		/* high part, at most 17 bits */
   16490:	|      mulu.w d0,d2
	swap	d2		/* align high part with low part */
   16492:	|      swap d2
	tstw	d2		/* high part 17 bits? */
   16494:	|      tst.w d2
	jne	5f		/* if 17 bits, quotient was too large */
   16496:	|  /-- bne.s 164a2 <__udivsi3+0x56>
	addl	d2, d1		/* add parts */
   16498:	|  |   add.l d2,d1
	jcs	5f		/* if sum is 33 bits, quotient was too large */
   1649a:	|  +-- bcs.s 164a2 <__udivsi3+0x56>
	cmpl	sp@(8), d1	/* compare the sum with the dividend */
   1649c:	|  |   cmp.l 8(sp),d1
	jls	6f		/* if sum > dividend, quotient was too large */
   164a0:	+--|-- bls.s 164a4 <__udivsi3+0x58>
5:	subql	#1, d0	/* adjust quotient */
   164a2:	|  \-> subq.l #1,d0

6:	movel	sp@+, d2
   164a4:	\----> move.l (sp)+,d2
	.cfi_adjust_cfa_offset -4
	rts
   164a6:	       rts

000164a8 <__divsi3>:
	.section .text.__divsi3,"ax",@progbits
	.type __divsi3, function
	.globl	__divsi3
 __divsi3:
 	.cfi_startproc
	movel	d2, sp@-
   164a8:	    move.l d2,-(sp)
	.cfi_adjust_cfa_offset 4

	moveq	#1, d2	/* sign of result stored in d2 (=1 or =-1) */
   164aa:	    moveq #1,d2
	movel	sp@(12), d1	/* d1 = divisor */
   164ac:	    move.l 12(sp),d1
	jpl	1f
   164b0:	/-- bpl.s 164b6 <__divsi3+0xe>
	negl	d1
   164b2:	|   neg.l d1
	negb	d2		/* change sign because divisor <0  */
   164b4:	|   neg.b d2
1:	movel	sp@(8), d0	/* d0 = dividend */
   164b6:	\-> move.l 8(sp),d0
	jpl	2f
   164ba:	/-- bpl.s 164c0 <__divsi3+0x18>
	negl	d0
   164bc:	|   neg.l d0
	negb	d2
   164be:	|   neg.b d2

2:	movel	d1, sp@-
   164c0:	\-> move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   164c2:	    move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__udivsi3	/* divide abs(dividend) by abs(divisor) */
   164c4:	    jsr 1644c <__udivsi3>
	addql	#8, sp
   164ca:	    addq.l #8,sp
	.cfi_adjust_cfa_offset -8

	tstb	d2
   164cc:	    tst.b d2
	jpl	3f
   164ce:	/-- bpl.s 164d2 <__divsi3+0x2a>
	negl	d0
   164d0:	|   neg.l d0

3:	movel	sp@+, d2
   164d2:	\-> move.l (sp)+,d2
	.cfi_adjust_cfa_offset -4
	rts
   164d4:	    rts

000164d6 <__modsi3>:
	.section .text.__modsi3,"ax",@progbits
	.type __modsi3, function
	.globl	__modsi3
__modsi3:
	.cfi_startproc
	movel	sp@(8), d1	/* d1 = divisor */
   164d6:	move.l 8(sp),d1
	movel	sp@(4), d0	/* d0 = dividend */
   164da:	move.l 4(sp),d0
	movel	d1, sp@-
   164de:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   164e0:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__divsi3
   164e2:	jsr 164a8 <__divsi3>
	addql	#8, sp
   164e8:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(8), d1	/* d1 = divisor */
   164ea:	move.l 8(sp),d1
	movel	d1, sp@-
   164ee:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   164f0:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__mulsi3	/* d0 = (a/b)*b */
   164f2:	jsr 1642a <__mulsi3>
	addql	#8, sp
   164f8:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(4), d1	/* d1 = dividend */
   164fa:	move.l 4(sp),d1
	subl	d0, d1		/* d1 = a - (a/b)*b */
   164fe:	sub.l d0,d1
	movel	d1, d0
   16500:	move.l d1,d0
	rts
   16502:	rts

00016504 <__umodsi3>:
	.section .text.__umodsi3,"ax",@progbits
	.type __umodsi3, function
	.globl	__umodsi3
__umodsi3:
	.cfi_startproc
	movel	sp@(8), d1	/* d1 = divisor */
   16504:	move.l 8(sp),d1
	movel	sp@(4), d0	/* d0 = dividend */
   16508:	move.l 4(sp),d0
	movel	d1, sp@-
   1650c:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   1650e:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__udivsi3
   16510:	jsr 1644c <__udivsi3>
	addql	#8, sp
   16516:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(8), d1	/* d1 = divisor */
   16518:	move.l 8(sp),d1
	movel	d1, sp@-
   1651c:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   1651e:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__mulsi3	/* d0 = (a/b)*b */
   16520:	jsr 1642a <__mulsi3>
	addql	#8, sp
   16526:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(4), d1	/* d1 = dividend */
   16528:	move.l 4(sp),d1
	subl	d0, d1		/* d1 = a - (a/b)*b */
   1652c:	sub.l d0,d1
	movel	d1, d0
   1652e:	move.l d1,d0
	rts
   16530:	rts

00016532 <KPutCharX>:
	.type KPutCharX, function
	.globl	KPutCharX

KPutCharX:
	.cfi_startproc
    move.l  a6, -(sp)
   16532:	move.l a6,-(sp)
	.cfi_adjust_cfa_offset 4
    move.l  4.w, a6
   16534:	movea.l 4 <_start+0x4>,a6
    jsr     -0x204(a6)
   16538:	jsr -516(a6)
    move.l (sp)+, a6
   1653c:	movea.l (sp)+,a6
	.cfi_adjust_cfa_offset -4
    rts
   1653e:	rts

00016540 <PutChar>:
	.type PutChar, function
	.globl	PutChar

PutChar:
	.cfi_startproc
	move.b d0, (a3)+
   16540:	move.b d0,(a3)+
	rts
   16542:	rts
